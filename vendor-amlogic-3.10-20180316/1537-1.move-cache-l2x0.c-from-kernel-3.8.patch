From a5ed69902ab373dd5364897b7e8139cbcbd770c5 Mon Sep 17 00:00:00 2001
From: "yun.cai" <yun.cai@amlogic.com>
Date: Tue, 22 Oct 2013 14:56:40 +0800
Subject: [PATCH 1537/5965] 1.move cache-l2x0.c from kernel 3.8 2.remark the
 RAM map 3.remark the the "WARN" of "device_create_file" function

---
 arch/arm/configs/meson8_defconfig |  16 +-
 arch/arm/mm/cache-l2x0.c          | 251 +++++++++++++++++++++++++++++-
 arch/arm/mm/ioremap.c             |   4 +-
 drivers/base/core.c               |   3 +-
 drivers/of/platform.c             |  13 ++
 5 files changed, 270 insertions(+), 17 deletions(-)
 mode change 100644 => 100755 arch/arm/mm/cache-l2x0.c
 mode change 100644 => 100755 arch/arm/mm/ioremap.c
 mode change 100644 => 100755 drivers/base/core.c
 mode change 100644 => 100755 drivers/of/platform.c

diff --git a/arch/arm/configs/meson8_defconfig b/arch/arm/configs/meson8_defconfig
index e73b61216c4c..8da9bf0da3b7 100755
--- a/arch/arm/configs/meson8_defconfig
+++ b/arch/arm/configs/meson8_defconfig
@@ -142,9 +142,11 @@ CONFIG_AM_LOGO=y
 CONFIG_UEVENT_HELPER_PATH="/sbin/hotplug"
 CONFIG_DEVTMPFS=y
 CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_MTD=y
+CONFIG_MTD_BLOCK=y
 CONFIG_PROC_DEVICETREE=y
 CONFIG_OF_SELFTEST=y
-# CONFIG_BLK_DEV is not set
+CONFIG_BLK_DEV_LOOP=y
 CONFIG_SCSI=y
 CONFIG_BLK_DEV_SD=y
 CONFIG_BLK_DEV_SR=y
@@ -161,18 +163,19 @@ CONFIG_PPPOLAC=y
 CONFIG_PPPOPNS=y
 CONFIG_PPP_ASYNC=y
 CONFIG_PPP_SYNC_TTY=y
-# CONFIG_INPUT_MOUSEDEV is not set
-# CONFIG_INPUT_KEYBOARD is not set
-# CONFIG_INPUT_MOUSE is not set
-CONFIG_SERIO_LIBPS2=y
+CONFIG_INPUT_POLLDEV=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_INPUT_MISC=y
 CONFIG_DEVPTS_MULTIPLE_INSTANCES=y
-# CONFIG_HWMON is not set
+CONFIG_SPI=y
+CONFIG_MEDIA_SUPPORT=y
 CONFIG_SOUND=y
 CONFIG_SND=y
 CONFIG_SND_SOC=y
 # CONFIG_HID is not set
 # CONFIG_USB_SUPPORT is not set
 CONFIG_MMC=y
+CONFIG_MMC_DEBUG=y
 CONFIG_UIO=y
 CONFIG_UIO_PDRV=y
 CONFIG_UIO_PDRV_GENIRQ=y
@@ -182,7 +185,6 @@ CONFIG_ANDROID_BINDER_IPC=y
 CONFIG_ASHMEM=y
 CONFIG_ANDROID_LOGGER=y
 CONFIG_ANDROID_LOW_MEMORY_KILLER=y
-# CONFIG_IOMMU_SUPPORT is not set
 CONFIG_EXT2_FS=y
 CONFIG_EXT3_FS=y
 CONFIG_EXT3_FS_POSIX_ACL=y
diff --git a/arch/arm/mm/cache-l2x0.c b/arch/arm/mm/cache-l2x0.c
old mode 100644
new mode 100755
index 90a130f98acf..b6fba8b45208
--- a/arch/arm/mm/cache-l2x0.c
+++ b/arch/arm/mm/cache-l2x0.c
@@ -342,7 +342,7 @@ static void l2x0_unlock(u32 cache_id)
 	int lockregs;
 	int i;
 
-	switch (cache_id & L2X0_CACHE_ID_PART_MASK) {
+	switch (cache_id) {
 	case L2X0_CACHE_ID_PART_L310:
 		lockregs = 8;
 		break;
@@ -365,7 +365,7 @@ static void l2x0_unlock(u32 cache_id)
 
 void __init l2x0_init(void __iomem *base, u32 aux_val, u32 aux_mask)
 {
-	u32 aux;
+	u32 aux,prefetch,power,tag_lan,data_lan;
 	u32 way_size = 0;
 	int way_size_shift = L2X0_WAY_SIZE_SHIFT;
 	const char *type;
@@ -392,6 +392,7 @@ void __init l2x0_init(void __iomem *base, u32 aux_val, u32 aux_mask)
 		/* Unmapped register. */
 		sync_reg_offset = L2X0_DUMMY_REG;
 #endif
+		//if ((cache_id & L2X0_CACHE_ID_RTL_MASK) <= L2X0_CACHE_ID_RTL_R3P0)
 		if ((l2x0_cache_id & L2X0_CACHE_ID_RTL_MASK) <= L2X0_CACHE_ID_RTL_R3P0)
 			outer_cache.set_debug = pl310_set_debug;
 		break;
@@ -402,7 +403,9 @@ void __init l2x0_init(void __iomem *base, u32 aux_val, u32 aux_mask)
 
 	case AURORA_CACHE_ID:
 		sync_reg_offset = AURORA_SYNC_REG;
+		//ways = (aux >> 13) & 0xf;
 		l2x0_ways = (aux >> 13) & 0xf;
+		//ways = 2 << ((ways + 1) >> 2);
 		l2x0_ways = 2 << ((l2x0_ways + 1) >> 2);
 		way_size_shift = AURORA_WAY_SIZE_SHIFT;
 		type = "Aurora";
@@ -445,7 +448,11 @@ void __init l2x0_init(void __iomem *base, u32 aux_val, u32 aux_mask)
 
 	/* Re-read it in case some bits are reserved. */
 	aux = readl_relaxed(l2x0_base + L2X0_AUX_CTRL);
-
+	prefetch=readl_relaxed(l2x0_base+ L2X0_PREFETCH_CTRL);
+	power=readl_relaxed(l2x0_base+ L2X0_POWER_CTRL);
+	tag_lan = readl_relaxed(l2x0_base + L2X0_TAG_LATENCY_CTRL);
+	data_lan = readl_relaxed(l2x0_base + L2X0_DATA_LATENCY_CTRL);
+	
 	/* Save the value for resuming. */
 	l2x0_saved_regs.aux_ctrl = aux;
 
@@ -460,8 +467,12 @@ void __init l2x0_init(void __iomem *base, u32 aux_val, u32 aux_mask)
 	}
 
 	printk(KERN_INFO "%s cache controller enabled\n", type);
-	printk(KERN_INFO "l2x0: %d ways, CACHE_ID 0x%08x, AUX_CTRL 0x%08x, Cache size: %d B\n",
-			l2x0_ways, l2x0_cache_id, aux, l2x0_size);
+	printk(KERN_INFO "l2x0: %d ways, %d sets, CACHE_ID 0x%08x,  Cache size: %d B\n",
+			l2x0_ways, l2x0_sets, l2x0_cache_id, l2x0_size);
+	printk(KERN_INFO "      AUX_CTRL 0x%08x, PERFETCH_CTRL 0x%08x, POWER_CTRL  0x%08x\n",
+		aux,prefetch,power);
+	printk(KERN_INFO "      TAG_LATENCY 0x%08x, DATA_LATENCY 0x%08x\n",
+		tag_lan, data_lan);
 }
 
 #ifdef CONFIG_OF
@@ -754,6 +765,222 @@ static void __init aurora_of_setup(const struct device_node *np,
 	*aux_mask &= ~mask;
 }
 
+
+#ifdef CONFIG_PLAT_MESON
+#define L2X0_AUX_CTRL_FULL_LINE_OF_ZERO_SHIFT		0
+#define L2X0_AUX_CTRL_HIGH_PRIORITY_FOR_SO_DEV_SHIFT	10
+#define L2X0_AUX_CTRL_STORE_BUFFER_DEV_LMT_SHIFT	11
+#define L2X0_AUX_CTRL_EXCLUSIVE_CACHE_CFG_SHIFT		12
+#define L2X0_AUX_CTRL_SHARED_ATTRIB_INVALID_SHIFT	13
+#define L2X0_AUX_CTRL_FORCE_WRITE_ALLOCATE_SHIFT	23
+#define L2X0_AUX_CTRL_FORCE_WRITE_ALLOCATE_MASK	(3 << 23)
+#define L2X0_AUX_CTRL_CACHE_REPLACE_POLICY_SHIFT	25
+
+#define L2X0_PREF_CTRL_DOUBLE_LINE_FILL_SHIFT	30
+#define L2X0_PREF_CTRL_INSTR_PREFETCH_SHIFT	29
+#define L2X0_PREF_CTRL_DATA_PREFETCH_SHIFT	28
+#define L2X0_PREF_CTRL_DLF_ON_WRAP_DISABLE_SHIFT	27
+#define L2X0_PREF_CTRL_PREFETCH_DROP_SHIFT	24
+#define L2X0_PREF_CTRL_INCR_DLF_SHIFT	23
+#define L2X0_PREF_CTRL_NOT_SAME_ID_EXEL_SEQ_SHIFT	21
+#define L2X0_PREF_CTRL_PERFETCH_OFFSET_SHIFT		0
+#define L2X0_PREF_CTRL_PERFETCH_OFFSET_MASK		(0x1f << 0)
+static void __init meson_of_setup(const struct device_node *np,
+				u32 *aux_val, u32 *aux_mask)
+{
+	u32 val = *aux_val;
+	u32 mask =  *aux_mask;
+
+	void * prefetch_reg = (void * )l2x0_base + L2X0_PREFETCH_CTRL;
+	u32 prefetch_val;
+	void * power_reg = (void * )l2x0_base + L2X0_POWER_CTRL;
+	u32 power_val;
+
+	int way_size = -1, ws_value;
+	int associativity = -1, assoc_value;
+	int prefetch_offset = -1;
+
+	if (of_property_read_bool(np, "aux-early_write_response")) {
+		val |= (1 << L2X0_AUX_CTRL_EARLY_BRESP_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_EARLY_BRESP_SHIFT);
+	}
+
+	if(of_property_read_bool(np, "aux-instruction_prefetch")){
+		val |= (1 << L2X0_AUX_CTRL_INSTR_PREFETCH_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_INSTR_PREFETCH_SHIFT);
+		prefetch_val = readl_relaxed(prefetch_reg);
+		prefetch_val |= (1 << L2X0_PREF_CTRL_INSTR_PREFETCH_SHIFT);
+		writel_relaxed(prefetch_val,prefetch_reg);		
+	}
+
+	if(of_property_read_bool(np, "aux-data_prefetch")){
+		val |= (1 << L2X0_AUX_CTRL_DATA_PREFETCH_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_DATA_PREFETCH_SHIFT);		
+		prefetch_val = readl_relaxed(prefetch_reg);
+		prefetch_val |= (1 << L2X0_PREF_CTRL_DATA_PREFETCH_SHIFT);
+		writel_relaxed(prefetch_val,prefetch_reg);		
+	}
+
+	if (of_property_read_bool(np, "aux-ns_lockdown")) {
+		val |= (1 << L2X0_AUX_CTRL_NS_LOCKDOWN_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_NS_LOCKDOWN_SHIFT);
+	}
+
+	if(of_property_read_bool(np, "aux-cache_replace_policy_round_robin")){
+		val |= (1 << L2X0_AUX_CTRL_CACHE_REPLACE_POLICY_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_CACHE_REPLACE_POLICY_SHIFT);		
+	}else{
+		val &= ~(1 << L2X0_AUX_CTRL_CACHE_REPLACE_POLICY_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_CACHE_REPLACE_POLICY_SHIFT);	
+	}
+
+	if(of_property_read_bool(np, "aux-force_no_write_alloc")){
+		val |= (1 << L2X0_AUX_CTRL_FORCE_WRITE_ALLOCATE_SHIFT);
+		mask &= ~L2X0_AUX_CTRL_FORCE_WRITE_ALLOCATE_MASK;
+	}
+
+	if(of_property_read_bool(np, "aux-store_buffer_device_limit")){
+		val |= (1 << L2X0_AUX_CTRL_STORE_BUFFER_DEV_LMT_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_STORE_BUFFER_DEV_LMT_SHIFT);
+	}
+
+	if(of_property_read_bool(np, "aux-high_prio_for_so_dev_read")){
+		val |= (1 << L2X0_AUX_CTRL_HIGH_PRIORITY_FOR_SO_DEV_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_HIGH_PRIORITY_FOR_SO_DEV_SHIFT);
+	}
+
+	if(of_property_read_bool(np, "aux-full_line_of_zero")){
+		val |= (1 << L2X0_AUX_CTRL_FULL_LINE_OF_ZERO_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_FULL_LINE_OF_ZERO_SHIFT);
+	}
+
+	if(of_property_read_bool(np, "aux-ns_int_ctrl")){
+		val |= (1 << L2X0_AUX_CTRL_NS_INT_CTRL_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_NS_INT_CTRL_SHIFT);
+	}
+
+	if(of_property_read_bool(np, "aux-share_override")){
+		val |= (1 << L2X0_AUX_CTRL_SHARE_OVERRIDE_SHIFT);
+		mask &= ~(1 << L2X0_AUX_CTRL_SHARE_OVERRIDE_SHIFT);
+	}
+	
+	if(of_property_read_u32(np, "aux-way_size",&way_size) > 0){
+		switch(way_size){
+		case 16:
+			ws_value = 1;
+			break;
+		case 32:
+			ws_value = 2;
+			break;
+		case 64:
+			ws_value = 3;
+			break;
+		case 128:
+			ws_value = 4;
+			break;
+		case 256:
+			ws_value = 5;
+			break;
+		case 512:
+			ws_value = 6;
+			break;
+		default:
+			ws_value = 0;
+			break;
+		}
+		val |= (ws_value << L2X0_AUX_CTRL_WAY_SIZE_SHIFT);
+		mask &= ~L2X0_AUX_CTRL_WAY_SIZE_MASK;
+	}
+
+	if(!of_property_read_u32(np, "aux-associativity",&associativity)){
+		if(associativity == 16)
+			assoc_value = 1;
+		else 
+			assoc_value = 0;
+		val |= (assoc_value << L2X0_AUX_CTRL_ASSOCIATIVITY_SHIFT);
+		mask &= ~(assoc_value << L2X0_AUX_CTRL_ASSOCIATIVITY_SHIFT);
+	}
+
+	if(of_property_read_bool(np, "prefetch-double_line_fill")){
+		prefetch_val = readl_relaxed(prefetch_reg);
+		prefetch_val |= (1 << L2X0_PREF_CTRL_DOUBLE_LINE_FILL_SHIFT);
+		writel_relaxed(prefetch_val,prefetch_reg);
+	}
+
+	if(of_property_read_bool(np, "prefetch-double_line_fill_on_wrap_read_disable")){
+		prefetch_val = readl_relaxed(prefetch_reg);
+		prefetch_val |= (1 << L2X0_PREF_CTRL_DLF_ON_WRAP_DISABLE_SHIFT);
+		writel_relaxed(prefetch_val,prefetch_reg);
+	}
+
+	if(of_property_read_bool(np, "prefetch-prefetch_drop")){
+		prefetch_val = readl_relaxed(prefetch_reg);
+		prefetch_val |= (1 << L2X0_PREF_CTRL_PREFETCH_DROP_SHIFT);
+		writel_relaxed(prefetch_val,prefetch_reg);
+	}
+
+	if(of_property_read_bool(np, "prefetch-incr_double_line_fill")){
+		prefetch_val = readl_relaxed(prefetch_reg);
+		prefetch_val |= (1 << L2X0_PREF_CTRL_INCR_DLF_SHIFT);
+		writel_relaxed(prefetch_val,prefetch_reg);
+	}
+
+	if(of_property_read_bool(np, "prefetch-not_same_id_excl_seq")){
+		prefetch_val = readl_relaxed(prefetch_reg);
+		prefetch_val |= (1 << L2X0_PREF_CTRL_NOT_SAME_ID_EXEL_SEQ_SHIFT);
+		writel_relaxed(prefetch_val,prefetch_reg);
+	}
+
+	if(!of_property_read_u32(np, "prefetch-prefetch_offset",&prefetch_offset)){
+		switch(prefetch_offset){
+		case 0 ... 7:
+		case 15:
+		case 23:
+		case 31:
+			prefetch_val = readl_relaxed(prefetch_reg);
+			prefetch_val &= ~(L2X0_PREF_CTRL_PERFETCH_OFFSET_MASK);
+			prefetch_val |= (prefetch_offset << L2X0_PREF_CTRL_PERFETCH_OFFSET_SHIFT);
+			writel_relaxed(prefetch_val,prefetch_reg);	
+		default:
+			break;
+		}
+
+	}
+
+	if(of_property_read_bool(np, "power-dynamic_clk_gating")){
+		power_val = readl_relaxed(power_reg);
+		power_val |= L2X0_DYNAMIC_CLK_GATING_EN;
+		writel_relaxed(power_val,power_reg);
+	}
+
+	if(of_property_read_bool(np, "power-standby_mode")){
+		power_val = readl_relaxed(power_reg);
+		power_val |= L2X0_STNDBY_MODE_EN;
+		writel_relaxed(power_val,power_reg);
+	}
+
+	*aux_val = val;
+	*aux_mask = mask;
+	
+	pl310_of_setup(np,aux_val,aux_mask);
+}
+
+static const struct l2x0_of_data meson_pl310_data = {
+	.setup = meson_of_setup,
+	.save  = pl310_save,
+	.outer_cache = {
+		.resume      = pl310_resume,
+		.inv_range   = l2x0_inv_range,
+		.clean_range = l2x0_clean_range,
+		.flush_range = l2x0_flush_range,
+		.sync        = l2x0_cache_sync,
+		.flush_all   = l2x0_flush_all,
+		.inv_all     = l2x0_inv_all,
+		.disable     = l2x0_disable,
+		.set_debug   = pl310_set_debug,
+	},
+};
+#endif
 static const struct l2x0_of_data pl310_data = {
 	.setup = pl310_of_setup,
 	.save  = pl310_save,
@@ -766,6 +993,7 @@ static const struct l2x0_of_data pl310_data = {
 		.flush_all   = l2x0_flush_all,
 		.inv_all     = l2x0_inv_all,
 		.disable     = l2x0_disable,
+		.set_debug   = pl310_set_debug,
 	},
 };
 
@@ -808,6 +1036,9 @@ static const struct l2x0_of_data aurora_no_outer_data = {
 };
 
 static const struct of_device_id l2x0_ids[] __initconst = {
+#ifdef CONFIG_PLAT_MESON
+	{ .compatible = "arm,meson-pl310-cache", .data = (void *)&meson_pl310_data },
+#endif
 	{ .compatible = "arm,pl310-cache", .data = (void *)&pl310_data },
 	{ .compatible = "arm,l220-cache", .data = (void *)&l2x0_data },
 	{ .compatible = "arm,l210-cache", .data = (void *)&l2x0_data },
@@ -830,10 +1061,15 @@ int __init l2x0_of_init(u32 aux_val, u32 aux_mask)
 
 	if (of_address_to_resource(np, 0, &res))
 		return -ENODEV;
-
+	
+#ifdef CONFIG_PLAT_MESON
+#include <mach/io.h>
+	l2x0_base = IO_PL310_BASE;
+#else
 	l2x0_base = ioremap(res.start, resource_size(&res));
 	if (!l2x0_base)
 		return -ENOMEM;
+#endif
 
 	l2x0_saved_regs.phy_base = res.start;
 
@@ -854,9 +1090,10 @@ int __init l2x0_of_init(u32 aux_val, u32 aux_mask)
 		data->save();
 
 	of_init = true;
-	memcpy(&outer_cache, &data->outer_cache, sizeof(outer_cache));
 	l2x0_init(l2x0_base, aux_val, aux_mask);
 
+	memcpy(&outer_cache, &data->outer_cache, sizeof(outer_cache));
+
 	return 0;
 }
 #endif
diff --git a/arch/arm/mm/ioremap.c b/arch/arm/mm/ioremap.c
old mode 100644
new mode 100755
index 04d9006eab1f..722d979c55f4
--- a/arch/arm/mm/ioremap.c
+++ b/arch/arm/mm/ioremap.c
@@ -298,8 +298,8 @@ void __iomem * __arm_ioremap_pfn_caller(unsigned long pfn,
 	/*
 	 * Don't allow RAM to be mapped - this causes problems with ARMv6+
 	 */
-	if (WARN_ON(pfn_valid(pfn)))
-		return NULL;
+//	if (WARN_ON(pfn_valid(pfn)))
+//		return NULL;
 
 	area = get_vm_area_caller(size, VM_IOREMAP, caller);
  	if (!area)
diff --git a/drivers/base/core.c b/drivers/base/core.c
old mode 100644
new mode 100755
index 2499cefdcdf2..98179f3f2713
--- a/drivers/base/core.c
+++ b/drivers/base/core.c
@@ -571,12 +571,13 @@ int device_create_file(struct device *dev,
 	int error = 0;
 
 	if (dev) {
-		WARN(((attr->attr.mode & S_IWUGO) && !attr->store),
+/*		WARN(((attr->attr.mode & S_IWUGO) && !attr->store),
 			"Attribute %s: write permission without 'store'\n",
 			attr->attr.name);
 		WARN(((attr->attr.mode & S_IRUGO) && !attr->show),
 			"Attribute %s: read permission without 'show'\n",
 			attr->attr.name);
+*/
 		error = sysfs_create_file(&dev->kobj, &attr->attr);
 	}
 
diff --git a/drivers/of/platform.c b/drivers/of/platform.c
old mode 100644
new mode 100755
index e0a6514ab46c..af2555fd0252
--- a/drivers/of/platform.c
+++ b/drivers/of/platform.c
@@ -80,6 +80,9 @@ void of_device_make_bus_id(struct device *dev)
 	u64 addr;
 	const __be32 *addrp;
 	int magic;
+	#if defined(CONFIG_PLAT_MESON)
+	const char *name;
+	#endif
 
 #ifdef CONFIG_PPC_DCR
 	/*
@@ -101,6 +104,16 @@ void of_device_make_bus_id(struct device *dev)
 	}
 #endif /* CONFIG_PPC_DCR */
 
+	#if defined(CONFIG_PLAT_MESON)
+	name = of_get_property(node,"dev_name",NULL);
+	if (name){
+		dev_set_name(dev, "%s", name);
+		pr_debug("+++%s: %s care the dev_name!(PLAT_MESON)\n",__func__,node->full_name);
+		return;
+	}
+	else
+		pr_debug("+++%s: %s don't care the dev_name!!!(PLAT_MESON)\n",__func__,node->full_name);
+	#endif
 	/*
 	 * For MMIO, get the physical address
 	 */
-- 
2.19.0

