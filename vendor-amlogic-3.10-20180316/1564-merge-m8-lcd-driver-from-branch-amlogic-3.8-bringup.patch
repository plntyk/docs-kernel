From 2156d3bc48ab528f43f0469f3ee281504f016013 Mon Sep 17 00:00:00 2001
From: "wenjie.li" <wenjie.li@amlogic.com>
Date: Thu, 31 Oct 2013 18:44:29 +0800
Subject: [PATCH 1564/5965] merge m8 lcd driver from branch amlogic-3.8-bringup

---
 arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd |   4 +-
 arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd |   4 +-
 arch/arm/mach-meson8/include/mach/vpu.h      |  89 ++++++--
 arch/arm/mach-meson8/vpu.c                   | 221 ++++++++++++-------
 drivers/amlogic/display/vout/aml_lcd.dtd     |   7 +-
 drivers/amlogic/display/vout/edp_drv.c       |   4 +-
 drivers/amlogic/display/vout/edp_drv.h       |   6 +-
 drivers/amlogic/display/vout/lcdoutc.c       |  72 +++++-
 drivers/amlogic/display/vout/tvconf.c        |   4 +-
 include/linux/amlogic/vout/lcdoutc.h         |   1 +
 10 files changed, 296 insertions(+), 116 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
index 2e2a9f064e11..2a23757ccb7f 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
@@ -850,7 +850,7 @@ sdio{
 //$$ L2 PROP_U32 = "clock_spread_spectrum"
 //$$ L2 PROP_U32 = "clock_auto_generation"
 //$$ L2 PROP_U32 3 = "clk_pll_div_clk_ctrl"
-//$$ L2 PROP_U32 = "phy_ctrl"
+//$$ L2 PROP_U32 = "lvds_vswing"
 //$$ L2 PROP_U32 2 = "lvds_user_repack"
 //$$ L2 PROP_U32 3 = "edp_user_link_rate_lane_count"
 //$$ L2 PROP_U32 2 = "edp_link_adaptive_vswing"
@@ -939,7 +939,7 @@ sdio{
 		clock_spread_spectrum=<0>;	/** ss_level(0=disable, 1=0.5%, 2=1%, 3=2%, 4=3%, 5=4%, 6=5%) */
 		clock_auto_generation=<1>;	/** clk_auto_generation(0 for using customer clock parameters, as clk_pll_div_clk_ctrl defined, 1 for auto generate clock parameters by lcd_clock) */
 		clk_pll_div_clk_ctrl=<0x1000038 0x918803 0x44003101>;	/** pll_ctrl, div_ctrl, clk_ctrl : (only valid when clk_auto_generation=0) */
-		phy_ctrl=<0xaf40>; /** phy ctrl */
+		lvds_vswing=<1>;	/** lvds_vswing_level(default level=1, support level 0,1,2,3,4) */
 		lvds_user_repack=<0 0>;	/** lvds_repack_user(0 for auto setting, 1 for user define), lvds_repack(0 for JEIDA data mapping, 1 for VESA data mapping. only valid when lvds_repack_user=1) */
 		edp_user_link_rate_lane_count=<1 1 4>;	/** edp_user(0 for auto setting, 1 for user define), link_rate(0 for 1.62G, 1 for 2.7G, only valid when edp_user=1), lane_count(support 1,2,4, only valid when edp_user=1) */
 		edp_link_adaptive_vswing=<0 0>;	/** adaptive(0 for fixed user defined vswing, 1 for auto setting vswing by training), vswing(support level 0,1,2,3, user defined vswing, only valid when adaptive=0) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
index 22423e74f630..1bcaa92ca617 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
@@ -819,7 +819,7 @@ sdio{
 //$$ L2 PROP_U32 = "clock_spread_spectrum"
 //$$ L2 PROP_U32 = "clock_auto_generation"
 //$$ L2 PROP_U32 3 = "clk_pll_div_clk_ctrl"
-//$$ L2 PROP_U32 = "phy_ctrl"
+//$$ L2 PROP_U32 = "lvds_vswing"
 //$$ L2 PROP_U32 2 = "lvds_user_repack"
 //$$ L2 PROP_U32 3 = "edp_user_link_rate_lane_count"
 //$$ L2 PROP_U32 2 = "edp_link_adaptive_vswing"
@@ -908,7 +908,7 @@ sdio{
 		clock_spread_spectrum=<0>;	/** ss_level(0=disable, 1=0.5%, 2=1%, 3=2%, 4=3%, 5=4%, 6=5%) */
 		clock_auto_generation=<1>;	/** clk_auto_generation(0 for using customer clock parameters, as clk_pll_div_clk_ctrl defined, 1 for auto generate clock parameters by lcd_clock) */
 		clk_pll_div_clk_ctrl=<0x100042b 0x18833 0x03a82102>;	/** pll_ctrl, div_ctrl, clk_ctrl : (only valid when clk_auto_generation=0) */
-		phy_ctrl=<0xaf40>; /** phy ctrl */
+		lvds_vswing=<1>;	/** lvds_vswing_level(default level=1, support level 0,1,2,3,4) */
 		lvds_user_repack=<0 0>;	/** lvds_repack_user(0 for auto setting, 1 for user define), lvds_repack(0 for JEIDA data mapping, 1 for VESA data mapping. only valid when lvds_repack_user=1) */
 		edp_user_link_rate_lane_count=<1 1 4>;	/** edp_user(0 for auto setting, 1 for user define), link_rate(0 for 1.62G, 1 for 2.7G, only valid when edp_user=1), lane_count(support 1,2,4, only valid when edp_user=1) */
 		edp_link_adaptive_vswing=<0 0>;	/** adaptive(0 for fixed user defined vswing, 1 for auto setting vswing by training), vswing(support level 0,1,2,3, user defined vswing, only valid when adaptive=0) */
diff --git a/arch/arm/mach-meson8/include/mach/vpu.h b/arch/arm/mach-meson8/include/mach/vpu.h
index d24b5ab29cdf..58306c16a560 100755
--- a/arch/arm/mach-meson8/include/mach/vpu.h
+++ b/arch/arm/mach-meson8/include/mach/vpu.h
@@ -2,25 +2,75 @@
 #define __VPU_H__
 
 //#define CONFIG_VPU_DYNAMIC_ADJ
-
 typedef struct {
 	unsigned int h_res;
 	unsigned int v_res;
 	unsigned int refresh_rate;
 	unsigned int clk_level;
 }VPU_Conf_t;
-
-#define VPU_MODE_BIT_MASK	0x1000
-#define VPU_MODE_NONE		0x8000
+#define VPU_MOD_START	100
 typedef enum {
-    VPU_MODE_ENCP = 0,
-    VPU_MODE_ENCI,
-	VPU_MODE_ENCL,
-	VPU_MODE_VIDEO,
-	VPU_MODE_OSD,
-	VPU_MODE_VPP,
-	VPU_MODE_MAX,
-} vpu_mode_t;
+    VPU_VIU_OSD1 = VPU_MOD_START,
+    VPU_VIU_OSD2,
+	VPU_VIU_VD1,
+	VPU_VIU_VD2,
+	VPU_VIU_CHROMA,
+	VPU_VIU_OFIFO,
+	VPU_VIU_SCALE,
+	VPU_VIU_OSD_SCALE,
+	VPU_VIU_VDIN0,
+	VPU_VIU_VDIN1,
+	VPU_PIC_ROT1,
+	VPU_PIC_ROT2,
+	VPU_PIC_ROT3,
+	VPU_DI_PRE,
+	VPU_DI_POST,
+	VPU_VIU2_OSD1,
+    VPU_VIU2_OSD2,
+	VPU_VIU2_VD1,
+	VPU_VIU2_CHROMA,
+	VPU_VIU2_OFIFO,
+	VPU_VIU2_SCALE,
+	VPU_VIU2_OSD_SCALE,
+	VPU_VENCP,
+	VPU_VENCL,
+	VPU_VENCI,
+	VPU_ISP,
+	VPU_MAX,
+} vpu_mod_t;
+
+static const char* vpu_mod_table[]={
+	"viu_osd1",
+	"viu_osd2",
+	"viu_vd1",
+	"viu_vd2",
+	"viu_chroma",
+	"viu_ofifo",
+	"viu_scale",
+	"viu_osd_scale",
+	"viu_vdin0",
+	"viu_vdin1",
+	"pic_rot1",
+	"pic_rot2",
+	"pic_rot3",
+	"di_pre",
+	"di_post",
+	"viu2_osd1",
+	"viu2_osd2",
+	"viu2_vd1",
+	"viu2_chroma",
+	"viu2_ofifo",
+	"viu2_scale",
+	"viu2_osd_scale",
+	"vencp",
+	"vencl",
+	"venci",
+	"isp",
+	"none",
+};
+
+
+
 
 /*
  *  Function: get_vpu_clk_vmod
@@ -41,7 +91,7 @@ typedef enum {
  *      video_clk = get_vpu_clk_vmod(VPU_MODE_VIDEO | VPU_MODE_BIT_MASK);
  *
 */
-extern unsigned int get_vpu_clk_vmod(unsigned int vmod);
+//extern unsigned int get_vpu_clk_vmod(unsigned int vmod);
 /*
  *  Function: request_vpu_clk_vomd
  *      Request a new vpu clk holding frequency with specified vomd
@@ -63,7 +113,7 @@ extern unsigned int get_vpu_clk_vmod(unsigned int vmod);
  *      ret = request_vpu_clk_vomd(300000000, VPU_MODE_VIDEO | VPU_MODE_BIT_MASK);
  *
 */
-extern int request_vpu_clk_vomd(unsigned int vclk, unsigned int vmod);
+//extern int request_vpu_clk_vomd(unsigned int vclk, unsigned int vmod);
 /*
  *  Function: release_vpu_clk_vomd
  *      Release vpu clk holding frequency to 0 with specified vomd
@@ -84,6 +134,15 @@ extern int request_vpu_clk_vomd(unsigned int vclk, unsigned int vmod);
  *      ret = release_vpu_clk_vomd(VPU_MODE_VIDEO | VPU_MODE_BIT_MASK);
  *
 */
-extern int release_vpu_clk_vomd(unsigned int vmod);
+
+//VPU memory power down
+#define VPU_MEM_POWER_ON		0
+#define VPU_MEM_POWER_DOWN		1
+
+extern unsigned int get_vpu_clk_vmod(unsigned int vmod);
+extern int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod);
+extern int release_vpu_clk_vmod(unsigned int vmod);
+
+extern void switch_vpu_mem_pd_vmod(unsigned int vmod, int flag);
 
 #endif
diff --git a/arch/arm/mach-meson8/vpu.c b/arch/arm/mach-meson8/vpu.c
index 4771baefa61f..a88b9f7a9f6c 100755
--- a/arch/arm/mach-meson8/vpu.c
+++ b/arch/arm/mach-meson8/vpu.c
@@ -16,10 +16,11 @@
 #include <mach/vpu.h>
 #include <linux/amlogic/vout/vinfo.h>
 
-#define VPU_VERION	"v01"
+#define VPU_VERION	"v02"
 
 //#define LIMIT_VPU_CLK_LOW
 static spinlock_t vpu_lock;
+static spinlock_t vpu_mem_lock;
 
 #define CLK_LEVEL_DFT		4
 #define CLK_LEVEL_MAX		8	//limit max clk to 364M
@@ -40,23 +41,33 @@ static unsigned int vpu_clk_setting[][3] = {
 };
 
 static unsigned int vpu_clk_vmod[] = {
-	0,	//VPU_MODE_ENCP
-	0,	//VPU_MODE_ENCI
-	0,	//VPU_MODE_ENCL
-	0,	//VPU_MODE_VIDEO
-	0,	//VPU_MODE_OSD
-	0,	//VPU_MODE_VPP
-	0,	//NONE
-};
-
-static const char* vpu_vmod_table[]={
-	"ENCP",
-	"ENCI",
-	"ENCL",
-	"VIDEO",
-	"OSD",
-	"VPP",
-	"NONE",
+	0,	//VPU_VIU_OSD1,
+	0,	//VPU_VIU_OSD2,
+	0,	//VPU_VIU_VD1,
+	0,	//VPU_VIU_VD2,
+	0,	//VPU_VIU_CHROMA,
+	0,	//VPU_VIU_OFIFO,
+	0,	//VPU_VIU_SCALE,
+	0,	//VPU_VIU_OSD_SCALE,
+	0,	//VPU_VIU_VDIN0,
+	0,	//VPU_VIU_VDIN1,
+	0,	//VPU_PIC_ROT1,
+	0,	//VPU_PIC_ROT2,
+	0,	//VPU_PIC_ROT3,
+	0,	//VPU_DI_PRE,
+	0,	//VPU_DI_POST,
+	0,	//VPU_VIU2_OSD1,
+	0,	//VPU_VIU2_OSD2,
+	0,	//VPU_VIU2_VD1,
+	0,	//VPU_VIU2_CHROMA,
+	0,	//VPU_VIU2_OFIFO,
+	0,	//VPU_VIU2_SCALE,
+	0,	//VPU_VIU2_OSD_SCALE,
+	0,	//VPU_VENCP,
+	0,	//VPU_VENCL,
+	0,	//VPU_VENCI,
+	0,	//VPU_ISP,
+	0,	//VPU_MAX,
 };
 
 static VPU_Conf_t vpu_config = {
@@ -68,14 +79,13 @@ static VPU_Conf_t vpu_config = {
 
 static int dft_clk_level;
 
-static vpu_mode_t get_vpu_mode(unsigned int vmod)
+static vpu_mod_t get_vpu_mod(unsigned int vmod)
 {
-	unsigned int vpu_mode;
+	unsigned int vpu_mod;
 	
+	if (vmod < VPU_MOD_START) {
 	switch (vmod) {
-		case VMODE_480I:
 		case VMODE_480P:
-		case VMODE_576I:
 		case VMODE_576P:
 		case VMODE_720P:
 		case VMODE_1080I:
@@ -89,32 +99,32 @@ static vpu_mode_t get_vpu_mode(unsigned int vmod)
 		case VMODE_SVGA:
 		case VMODE_XGA:
 		case VMODE_SXGA:
-			vpu_mode = VPU_MODE_ENCP;
+				vpu_mod = VPU_VENCP;
 			break;
+			case VMODE_480I:
+			case VMODE_576I:
 		case VMODE_480CVBS:
 		case VMODE_576CVBS:
-			vpu_mode = VPU_MODE_ENCI;
+				vpu_mod = VPU_VENCI;
 			break;
 		case VMODE_LCD:
 		case VMODE_LVDS_1080P:
 		case VMODE_LVDS_1080P_50HZ:
-			vpu_mode = VPU_MODE_ENCL;
-			break;
-		case (VPU_MODE_VIDEO | VPU_MODE_BIT_MASK):
-			vpu_mode = VPU_MODE_VIDEO;
-			break;
-		case (VPU_MODE_OSD | VPU_MODE_BIT_MASK):
-			vpu_mode = VPU_MODE_OSD;
-			break;
-		case (VPU_MODE_VPP | VPU_MODE_BIT_MASK):
-			vpu_mode = VPU_MODE_VPP;
-			break;
-		default:
-			vpu_mode = VPU_MODE_MAX;
+				vpu_mod = VPU_VENCL;
 			break;
+			default:
+				vpu_mod = VPU_MAX;
+				break;
+		}
 	}
-	
-	return vpu_mode;
+	else if ((vmod >= VPU_MOD_START) && (vmod < VPU_MAX)) {
+		vpu_mod = vmod;
+	}
+	else {
+		vpu_mod = VPU_MAX;
+	}
+
+	return vpu_mod;
 } 
 
 static unsigned int get_vpu_clk_level_max_vmod(void)
@@ -123,9 +133,9 @@ static unsigned int get_vpu_clk_level_max_vmod(void)
 	int i,j;
 	
 	max_level = 0;
-	for (i=0; i<VPU_MODE_MAX; i++) {
-		if (vpu_clk_vmod[i] > max_level)
-			max_level = vpu_clk_vmod[i];
+	for (i=VPU_MOD_START; i<VPU_MAX; i++) {
+		if (vpu_clk_vmod[i-VPU_MOD_START] > max_level)
+			max_level = vpu_clk_vmod[i-VPU_MOD_START];
 	}
 }
 
@@ -135,7 +145,7 @@ static unsigned int get_vpu_clk_level(unsigned int video_clk)
 	unsigned clk_level;
 	int i;
 	
-	video_bw = video_clk + 2000000;
+	video_bw = video_clk + 1000000;
 
 	for (i=0; i<CLK_LEVEL_MAX; i++) {
 		if (video_bw <= vpu_clk_setting[i][0])			
@@ -207,6 +217,8 @@ static int set_vpu_clk(unsigned int vclk)
 		vpu_config.clk_level = clk_level;
 		printk("set vpu clk: %uHz, readback: %uHz(0x%x)\n", vpu_clk_setting[clk_level][0], get_vpu_clk(), (aml_read_reg32(P_HHI_VPU_CLK_CNTL)));
 	}
+	if (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 8) & 1) == 0)
+		aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 8, 1);
 
 set_vpu_clk_limit:
 	spin_unlock_irqrestore(&vpu_lock, flags);
@@ -234,18 +246,19 @@ set_vpu_clk_limit:
 */
 unsigned int get_vpu_clk_vmod(unsigned int vmod)
 {
-	unsigned int vpu_mode;
+	unsigned int vpu_mod;
 	unsigned int vpu_clk;
 	unsigned long flags = 0;
 	spin_lock_irqsave(&vpu_lock, flags);
 	
-	vpu_mode = get_vpu_mode(vmod);
-	if (vpu_mode < VPU_MODE_MAX) {
-		vpu_clk = vpu_clk_setting[vpu_clk_vmod[vpu_mode]][0];
+	vpu_mod = get_vpu_mod(vmod);
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod < VPU_MAX)) {
+		vpu_clk = vpu_clk_vmod[vpu_mod - VPU_MOD_START];
+		vpu_clk = vpu_clk_setting[vpu_clk][0];
 	}
 	else {
 		vpu_clk = 0;
-		printk("unsupport vomd\n");
+		printk("unsupport vmod\n");
 	}
 	
 	spin_unlock_irqrestore(&vpu_lock, flags);
@@ -273,11 +286,11 @@ unsigned int get_vpu_clk_vmod(unsigned int vmod)
  *      ret = request_vpu_clk_vomd(300000000, VPU_MODE_VIDEO | VPU_MODE_BIT_MASK);
  *
 */
-int request_vpu_clk_vomd(unsigned int vclk, unsigned int vmod)
+int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod)
 {
 	int ret = 0;
 	unsigned clk_level;
-	unsigned vpu_mode;
+	unsigned vpu_mod;
 	unsigned long flags = 0;
 	spin_lock_irqsave(&vpu_lock, flags);
 	
@@ -294,9 +307,9 @@ int request_vpu_clk_vomd(unsigned int vclk, unsigned int vmod)
 		goto request_vpu_clk_limit;
 	}
 	
-	vpu_mode = get_vpu_mode(vmod);
-	vpu_clk_vmod[vpu_mode] = clk_level;
-	printk("request vpu clk holdings: %s %uHz\n", vpu_vmod_table[vpu_mode], vpu_clk_setting[clk_level][0]);
+	vpu_mod = get_vpu_mod(vmod);
+	vpu_clk_vmod[vpu_mod - VPU_MOD_START] = clk_level;
+	printk("request vpu clk holdings: %s %uHz\n", vpu_mod_table[vpu_mod - VPU_MOD_START], vpu_clk_setting[clk_level][0]);
 #ifdef CONFIG_VPU_DYNAMIC_ADJ
 	clk_level = get_vpu_clk_level_max_vmod();
 	if (clk_level > vpu_config.clk_level) {
@@ -304,6 +317,8 @@ int request_vpu_clk_vomd(unsigned int vclk, unsigned int vmod)
 		vpu_config.clk_level = clk_level;
 		printk("set vpu clk: %uHz, readback: %uHz(0x%x)\n", vpu_clk_setting[clk_level][0], get_vpu_clk(), (aml_read_reg32(P_HHI_VPU_CLK_CNTL)));
 	}
+	if (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 8) & 1) == 0)
+		aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 8, 1);
 #endif
 
 request_vpu_clk_limit:
@@ -331,18 +346,18 @@ request_vpu_clk_limit:
  *      ret = release_vpu_clk_vomd(VPU_MODE_VIDEO | VPU_MODE_BIT_MASK);
  *
 */
-int release_vpu_clk_vomd(unsigned int vmod)
+int release_vpu_clk_vmod(unsigned int vmod)
 {
 	unsigned clk_level;
-	unsigned vpu_mode;
+	unsigned vpu_mod;
 	unsigned long flags = 0;
 	spin_lock_irqsave(&vpu_lock, flags);
 	
 	clk_level = 0;
 	
-	vpu_mode = get_vpu_mode(vmod);
-	vpu_clk_vmod[vpu_mode] = clk_level;
-	printk("release vpu clk holdings: %s\n", vpu_vmod_table[vpu_mode]);
+	vpu_mod = get_vpu_mod(vmod);
+	vpu_clk_vmod[vpu_mod - VPU_MOD_START] = clk_level;
+	printk("release vpu clk holdings: %s\n", vpu_mod_table[vpu_mod - VPU_MOD_START]);
 #ifdef CONFIG_VPU_DYNAMIC_ADJ
 	clk_level = get_vpu_clk_level_max_vmod();
 	if (clk_level > vpu_config.clk_level) {
@@ -350,18 +365,77 @@ int release_vpu_clk_vomd(unsigned int vmod)
 		vpu_config.clk_level = clk_level;
 		printk("set vpu clk: %uHz, readback: %uHz(0x%x)\n", vpu_clk_setting[clk_level][0], get_vpu_clk(), (aml_read_reg32(P_HHI_VPU_CLK_CNTL)));
 	}
+	if (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 8) & 1) == 0)
+		aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 8, 1);
 #endif
 	spin_unlock_irqrestore(&vpu_lock, flags);
 	return 0;
 }
 
 //***********************************************//
+#define VPU_MEM_PD_MASK		0x3
+/*
+ *  Function: switch_vpu_mem_pd_vmod
+ *      switch vpu memory power down by specified vmod
+ *
+ *	Parameters:
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *      flag - int, on/off switch flag, must be one of the following constants:
+ *                 VPU_MEM_POWER_ON
+ *                 VPU_MEM_POWER_DOWN
+ * 
+ *	Example:
+ *      switch_vpu_mem_pd_vmod(VMODE_720P, VPU_MEM_POWER_ON);
+ *      switch_vpu_mem_pd_vmod(VPU_VIU_OSD1, VPU_MEM_POWER_DOWN);
+ *
+*/
+void switch_vpu_mem_pd_vmod(unsigned int vmod, int flag)
+{
+	unsigned vpu_mod;
+	unsigned vpu_mem_bit = 0;
+	unsigned long flags = 0;
+	spin_lock_irqsave(&vpu_mem_lock, flags);
+	
+	flag = (flag > 0) ? 1 : 0;
+	
+	vpu_mod = get_vpu_mod(vmod);
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod <= VPU_DI_POST)) {
+		vpu_mem_bit = (vpu_mod - VPU_MOD_START) * 2;
+		if (flag)
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		else
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, 0, vpu_mem_bit, 2);
+	}
+	else if ((vpu_mod >= VPU_VIU2_OSD1) && (vpu_mod <= VPU_VIU2_OSD_SCALE)) {
+		vpu_mem_bit = (vpu_mod - VPU_VIU2_OSD1) * 2;
+		if (flag)
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		else
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, vpu_mem_bit, 2);
+	}
+	else if ((vpu_mod >= VPU_VENCP) && (vpu_mod < VPU_MAX)) {
+		vpu_mem_bit = (vpu_mod - VPU_VENCP + 10) * 2;
+		if (flag) {
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		}
+		else {
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, vpu_mem_bit, 2);
+		}
+	}
+	else {
+		printk("switch_vpu_mem_pd: unsupport vpu mod\n");
+	}
+	printk("switch_vpu_mem_pd: %s %s\n", vpu_mod_table[vpu_mod - VPU_MOD_START], ((flag > 0) ? "OFF" : "ON"));
+	spin_unlock_irqrestore(&vpu_mem_lock, flags);
+}
 static const char * vpu_usage_str =
 {"Usage:\n"
 "	echo get > clk ; print current vpu clk\n"
 "	echo set <vclk> > clk ; force to set vpu clk\n"
 "	echo dump [vmod] > clk ; dump vpu clk by vmod, [vmod] is unnecessary\n"
-"	echo request <vclk> <vmod> > clk ; request vpu clk holding by vomd\n"
+"	echo request <vclk> <vmod> > clk ; request vpu clk holding by vmod\n"
 "	echo release <vmod> > clk ; release vpu clk holding by vmod\n"
 "\n"
 "	request & release will change vpu clk if the max level in all vmod vpu clk holdings is unequal to current vpu clk level.\n" 
@@ -402,28 +476,28 @@ static ssize_t vpu_debug(struct class *class, struct class_attribute *attr, cons
 		case 'r':
 			if (buf[2] == 'q') {	//request
 				tmp[0] = 0;
-				tmp[1] = VPU_MODE_NONE;
+				tmp[1] = VPU_MAX;
 				ret = sscanf(buf, "request %u %u", &tmp[0], &tmp[1]);
-				request_vpu_clk_vomd(tmp[0], tmp[1]);
+				request_vpu_clk_vmod(tmp[0], tmp[1]);
 			}
 			else if (buf[2] == 'l') {	//release
-				tmp[0] = VPU_MODE_NONE;
+				tmp[0] = VPU_MAX;
 				ret = sscanf(buf, "release %u", &tmp[0]);
-				release_vpu_clk_vomd(tmp[0]);
+				release_vpu_clk_vmod(tmp[0]);
 			}
 			break;
 		case 'd':
-			tmp[0] = VPU_MODE_NONE;
+			tmp[0] = VPU_MAX;
 			ret = sscanf(buf, "dump %u", &tmp[0]);
-			tmp[1] = get_vpu_mode(tmp[0]);
+			tmp[1] = get_vpu_mod(tmp[0]);
 			printk("vpu clk holdings:\n");
-			if (tmp[1] == VPU_MODE_MAX) {
-				for (i=0; i<VPU_MODE_MAX; i++) {
-					printk("%s:		%uHz(%u)\n", vpu_vmod_table[i], vpu_clk_setting[vpu_clk_vmod[i]][0], vpu_clk_vmod[i]);
+			if (tmp[1] == VPU_MAX) {
+				for (i=VPU_MOD_START; i<VPU_MAX; i++) {
+					printk("%s:		%uHz(%u)\n", vpu_mod_table[i - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[i - VPU_MOD_START]][0], vpu_clk_vmod[i - VPU_MOD_START]);
 				}
 			}
 			else {
-				printk("%s:		%uHz(%u)\n", vpu_vmod_table[tmp[1]], vpu_clk_setting[vpu_clk_vmod[tmp[1]]][0], vpu_clk_vmod[tmp[1]]);
+				printk("%s:		%uHz(%u)\n", vpu_mod_table[tmp[1] - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[tmp[1] - VPU_MOD_START]][0], vpu_clk_vmod[tmp[1] - VPU_MOD_START]);
 			}
 			break;
 		default:
@@ -457,20 +531,14 @@ static void vpu_driver_init(void)
 	//VPU MEM_PD, need to modify
 	aml_write_reg32(P_HHI_VPU_MEM_PD_REG0, 0x00000000);
     aml_write_reg32(P_HHI_VPU_MEM_PD_REG1, 0x00000000);
-
-    aml_write_reg32(P_VPU_MEM_PD_REG0, 0x00000000);
-    aml_write_reg32(P_VPU_MEM_PD_REG1, 0x00000000);
 }
 
 static void vpu_driver_disable(void)
 {
-    aml_write_reg32(P_VPU_MEM_PD_REG0, 0xffffffff);
-    aml_write_reg32(P_VPU_MEM_PD_REG1, 0xffffffff);
-	
 	aml_write_reg32(P_HHI_VPU_MEM_PD_REG0, 0xffffffff);
     aml_write_reg32(P_HHI_VPU_MEM_PD_REG1, 0xffffffff);
 	
-	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 8, 0);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 0, 8, 1);
 }
 
 #ifdef CONFIG_PM
@@ -535,6 +603,7 @@ static int vpu_probe(struct platform_device *pdev)
 	int ret;
 	
 	spin_lock_init(&vpu_lock);
+	spin_lock_init(&vpu_mem_lock);
 	
 	printk("VPU driver version: %s\n", VPU_VERION);
 	get_vpu_config(pdev);
diff --git a/drivers/amlogic/display/vout/aml_lcd.dtd b/drivers/amlogic/display/vout/aml_lcd.dtd
index f0ea615f1f05..0dc06740974a 100755
--- a/drivers/amlogic/display/vout/aml_lcd.dtd
+++ b/drivers/amlogic/display/vout/aml_lcd.dtd
@@ -1,5 +1,4 @@
 #ifdef CONFIG_AM_LCD_OUTPUT
-#ifdef CONFIG_ARCH_MESON8
 //$$ DEVICE="lcd"
 //$$ L2 PROP_STR = "status"
 
@@ -23,7 +22,7 @@
 //$$ L2 PROP_U32 = "clock_spread_spectrum"
 //$$ L2 PROP_U32 = "clock_auto_generation"
 //$$ L2 PROP_U32 3 = "clk_pll_div_clk_ctrl"
-//$$ L2 PROP_U32 = "phy_ctrl"
+//$$ L2 PROP_U32 = "lvds_vswing"
 //$$ L2 PROP_U32 2 = "lvds_user_repack"
 //$$ L2 PROP_U32 3 = "edp_user_link_rate_lane_count"
 //$$ L2 PROP_U32 2 = "edp_link_adaptive_vswing"
@@ -112,7 +111,7 @@
 		clock_spread_spectrum=<0>;	/** ss_level(0=disable, 1=0.5%, 2=1%, 3=2%, 4=3%, 5=4%, 6=5%) */
 		clock_auto_generation=<1>;	/** clk_auto_generation(0 for using customer clock parameters, as clk_pll_div_clk_ctrl defined, 1 for auto generate clock parameters by lcd_clock) */
 		clk_pll_div_clk_ctrl=<0x1000038 0x918803 0x44003101>;	/** pll_ctrl, div_ctrl, clk_ctrl : (only valid when clk_auto_generation=0) */
-		phy_ctrl=<0xaf40>; /** phy ctrl */
+		lvds_vswing=<1>;	/** lvds_vswing_level(default level=1, support level 0,1,2,3,4) */
 		lvds_user_repack=<0 0>;	/** lvds_repack_user(0 for auto setting, 1 for user define), lvds_repack(0 for JEIDA data mapping, 1 for VESA data mapping. only valid when lvds_repack_user=1) */
 		edp_user_link_rate_lane_count=<1 1 4>;	/** edp_user(0 for auto setting, 1 for user define), link_rate(0 for 1.62G, 1 for 2.7G, only valid when edp_user=1), lane_count(support 1,2,4, only valid when edp_user=1) */
 		edp_link_adaptive_vswing=<0 0>;	/** adaptive(0 for fixed user defined vswing, 1 for auto setting vswing by training), vswing(support level 0,1,2,3, user defined vswing, only valid when adaptive=0) */
@@ -297,6 +296,4 @@
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0 for negative, 1 for positive) */
 	};
 
-
 #endif
-#endif
\ No newline at end of file
diff --git a/drivers/amlogic/display/vout/edp_drv.c b/drivers/amlogic/display/vout/edp_drv.c
index b3de912af06c..bef28308ea1c 100755
--- a/drivers/amlogic/display/vout/edp_drv.c
+++ b/drivers/amlogic/display/vout/edp_drv.c
@@ -67,9 +67,9 @@ unsigned char preset_vswing_tx, preset_vswing_rx;
 unsigned char preset_preemp_tx, preset_preemp_rx;
 unsigned char adj_req_lane01, adj_req_lane23;
 
-static inline void trdp_wait(unsigned ms)
+static inline void trdp_wait(unsigned n)
 {
-	mdelay(ms);
+	mdelay(n);
 }
 
 static EDP_Link_Config_t *dptx_get_link_config(void)
diff --git a/drivers/amlogic/display/vout/edp_drv.h b/drivers/amlogic/display/vout/edp_drv.h
index 27e1cb564b97..9ba95cfef1f3 100755
--- a/drivers/amlogic/display/vout/edp_drv.h
+++ b/drivers/amlogic/display/vout/edp_drv.h
@@ -115,11 +115,11 @@
 
 // Link training constants
 #define VAL_EDP_MAX_TRAINING_ATTEMPTS				5
-#define VAL_EDP_CLOCK_REC_TIMEOUT					100 // in microseconds
-#define VAL_EDP_CHAN_EQ_TIMEOUT						400 // in microseconds
+#define VAL_EDP_CLOCK_REC_TIMEOUT					1 // in microseconds
+#define VAL_EDP_CHAN_EQ_TIMEOUT						4 // in microseconds
 #define VAL_EDP_MAX_DEFER_COUNT						7
 #define VAL_EDP_MAX_TIMEOUT_COUNT					5
-#define VAL_EDP_MAX_DELAY_CYCLES					10000 // 10us delay
+#define VAL_EDP_MAX_DELAY_CYCLES					10 // 10us delay
 
 // Link training state constants
 #define VAL_EDP_TS_CLOCK_REC						0x01
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 25cedf1d837e..d8efac36cddd 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -108,6 +108,7 @@ static DSI_Config_t lcd_mipi_config = {
 };
 
 static LVDS_Config_t lcd_lvds_config = {
+	.lvds_vswing = 1,
 	.lvds_repack_user = 0,
 	.lvds_repack = 0,
 	.pn_swap = 0,
@@ -1901,13 +1902,35 @@ static void set_control_mlvds(Lcd_Config_t *pConf)
 
 static void init_phy_lvds(Lcd_Config_t *pConf)
 {
+    unsigned swing_ctrl;
     DBG_PRINT("%s\n", __FUNCTION__);
 	
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
     WRITE_LCD_REG(LVDS_PHY_CNTL3, 0xee1);
     WRITE_LCD_REG(LVDS_PHY_CNTL4 ,0);
 
-	WRITE_LCD_REG(LVDS_PHY_CNTL5, pConf->lcd_control.dphy_config->phy_ctrl);
+	//WRITE_LCD_REG(LVDS_PHY_CNTL5, pConf->lcd_control.dphy_config->phy_ctrl);
+	switch (pConf->lcd_control.lvds_config->lvds_vswing) {
+		case 0:
+			swing_ctrl = 0xaf20;
+			break;
+		case 1:
+			swing_ctrl = 0xaf40;
+			break;
+		case 2:
+			swing_ctrl = 0xa840;
+			break;
+		case 3:
+			swing_ctrl = 0xa880;
+			break;
+		case 4:
+			swing_ctrl = 0xa8c0;
+			break;
+		default:
+			swing_ctrl = 0xaf40;
+			break;
+	}
+	WRITE_LCD_REG(LVDS_PHY_CNTL5, swing_ctrl);
 
 	WRITE_LCD_REG(LVDS_PHY_CNTL0,0x001f);
 	WRITE_LCD_REG(LVDS_PHY_CNTL1,0xffff);
@@ -1922,7 +1945,28 @@ static void init_phy_lvds(Lcd_Config_t *pConf)
     WRITE_LCD_REG(LVDS_PHY_CNTL1, 0xff00);
 	WRITE_LCD_REG(LVDS_PHY_CNTL4, 0x007f);
 	
-	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, 0x00000348);
+	//WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, 0x00000348);
+	switch (pConf->lcd_control.lvds_config->lvds_vswing) {
+		case 0:
+			swing_ctrl = 0x328;
+			break;
+		case 1:
+			swing_ctrl = 0x348;
+			break;
+		case 2:
+			swing_ctrl = 0x388;
+			break;
+		case 3:
+			swing_ctrl = 0x3c8;
+			break;
+		case 4:
+			swing_ctrl = 0x3f8;
+			break;
+		default:
+			swing_ctrl = 0x348;
+			break;
+	}
+	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, swing_ctrl);
 	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL2, 0x004665b7);
 	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL3, 0x84070000);
 #endif
@@ -2640,6 +2684,7 @@ static void _init_lcd_driver(Lcd_Config_t *pConf)	//before power on lcd
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 	switch_lcd_gates(lcd_type);
 #elif (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+	switch_vpu_mem_pd_vmod(pDev->lcd_info.mode, VPU_MEM_POWER_ON);
 	switch_lcd_gates(ON);
 #endif
 	
@@ -2771,6 +2816,7 @@ static void _disable_lcd_driver(Lcd_Config_t *pConf)	//after power off lcd
 	switch_mod_gate_by_name("lvds", 0);
 #elif (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 	switch_lcd_gates(OFF);
+	switch_vpu_mem_pd_vmod(pDev->lcd_info.mode, VPU_MEM_POWER_DOWN);
 #endif	
 	printk("disable lcd display driver.\n");
 }
@@ -2846,7 +2892,7 @@ static int lcd_set_current_vmode(vmode_t mode)
 	WRITE_LCD_REG(VPP_POSTBLEND_H_SIZE, pDev->lcd_info.width);
 
 	if( !(mode&VMODE_LOGO_BIT_MASK) ){
-		request_vpu_clk_vomd(pDev->lcd_info.video_clk, pDev->lcd_info.mode);
+		request_vpu_clk_vmod(pDev->lcd_info.video_clk, pDev->lcd_info.mode);
 		_lcd_module_enable();
 	}
 	if (VMODE_INIT_NULL == pDev->lcd_info.mode)
@@ -2868,7 +2914,7 @@ static int lcd_set_current_vmode2(vmode_t mode)
 
     WRITE_LCD_REG(VPP2_POSTBLEND_H_SIZE, pDev->lcd_info.width);
 	
-	request_vpu_clk_vomd(pDev->lcd_info.video_clk, pDev->lcd_info.mode);
+	request_vpu_clk_vmod(pDev->lcd_info.video_clk, pDev->lcd_info.mode);
     _lcd_module_enable();
     if (VMODE_INIT_NULL == pDev->lcd_info.mode)
         pDev->lcd_info.mode = VMODE_LCD;
@@ -2898,7 +2944,7 @@ static int lcd_vout_disable(vmode_t cur_vmod)
 	mutex_lock(&lcd_vout_mutex);
 	_disable_backlight();
 	_lcd_module_disable();
-	release_vpu_clk_vomd(pDev->lcd_info.mode);
+	release_vpu_clk_vmod(pDev->lcd_info.mode);
 	mutex_unlock(&lcd_vout_mutex);
 	return 0;
 }
@@ -4127,13 +4173,21 @@ static inline int _get_lcd_default_config(struct platform_device *pdev)
 				printk("pll_ctrl = 0x%x, div_ctrl = 0x%x, clk_ctrl=0x%x\n", pDev->pConf->lcd_timing.pll_ctrl, pDev->pConf->lcd_timing.div_ctrl, (pDev->pConf->lcd_timing.clk_ctrl & 0xffff));
 			}
 		}
-		ret = of_property_read_u32(pdev->dev.of_node,"phy_ctrl",&val);
+		// ret = of_property_read_u32(pdev->dev.of_node,"phy_ctrl",&val);
+		// if(ret){
+			// printk("don't find to match phy_ctrl, use default setting.\n");
+		// }
+		// else {
+			// pDev->pConf->lcd_control.dphy_config->phy_ctrl = val;
+			// DBG_PRINT("phy_ctrl = 0x%x\n", pDev->pConf->lcd_control.dphy_config->phy_ctrl);
+		// }
+		ret = of_property_read_u32(pdev->dev.of_node,"lvds_vswing",&val);
 		if(ret){
-			printk("don't find to match phy_ctrl, use default setting.\n");
+			printk("don't find to match lvds_vswing, use default setting.\n");
 		}
 		else {
-			pDev->pConf->lcd_control.dphy_config->phy_ctrl = val;
-			DBG_PRINT("phy_ctrl = 0x%x\n", pDev->pConf->lcd_control.dphy_config->phy_ctrl);
+			pDev->pConf->lcd_control.lvds_config->lvds_vswing = val;
+			DBG_PRINT("lvds_vswing = %u\n", pDev->pConf->lcd_control.lvds_config->lvds_vswing = val);
 		}
 		ret = of_property_read_u32_array(pdev->dev.of_node,"lvds_user_repack",&lcd_para[0], 2);
 		if(ret){
diff --git a/drivers/amlogic/display/vout/tvconf.c b/drivers/amlogic/display/vout/tvconf.c
index 3c5705aae34d..b61754776493 100755
--- a/drivers/amlogic/display/vout/tvconf.c
+++ b/drivers/amlogic/display/vout/tvconf.c
@@ -334,7 +334,7 @@ static int tv_set_current_vmode(vmode_t mod)
 	info->vinfo = &tv_info[mod & VMODE_MODE_BIT_MASK];
 	if(mod&VMODE_LOGO_BIT_MASK)  return 0;
 	
-	request_vpu_clk_vomd(info->vinfo->video_clk, info->vinfo->mode);
+	request_vpu_clk_vmod(info->vinfo->video_clk, info->vinfo->mode);
 	tvoutc_setmode(vmode_tvmode_tab[mod]);
 //	change_vdac_setting(get_current_vdac_setting(),mod);
 	return 0;
@@ -364,7 +364,7 @@ static int tv_vmode_is_supported(vmode_t mode)
 static int tv_module_disable(vmode_t cur_vmod)
 {
 	if (info->vinfo)
-		release_vpu_clk_vomd(info->vinfo->mode);
+		release_vpu_clk_vmod(info->vinfo->mode);
 	//video_dac_disable();
 	return 0;
 }
diff --git a/include/linux/amlogic/vout/lcdoutc.h b/include/linux/amlogic/vout/lcdoutc.h
index b5110ad3c93c..2012cf5a76f2 100755
--- a/include/linux/amlogic/vout/lcdoutc.h
+++ b/include/linux/amlogic/vout/lcdoutc.h
@@ -438,6 +438,7 @@ typedef struct DSI_Config_s{
 }DSI_Config_t;
 
 typedef struct {
+	unsigned lvds_vswing;
 	unsigned lvds_repack_user;
 	unsigned lvds_repack;
 	unsigned pn_swap;
-- 
2.19.0

