From fe1d73c58c6ec339cd71feabcd520fde72f846f5 Mon Sep 17 00:00:00 2001
From: "chunxue.yu" <chunxue.yu@amlogic.com>
Date: Thu, 31 Oct 2013 20:29:23 +0800
Subject: [PATCH 1566/5965] touch: merge from amlogic-3.8-bringup branch

---
 .../amlogic/input/touchscreen/gt9xx/Makefile  |   2 +-
 .../amlogic/input/touchscreen/gt9xx/gt9xx.c   |  43 ++---
 .../amlogic/input/touchscreen/gt9xx/gt9xx.h   |   4 +-
 .../input/touchscreen/gt9xx/gt9xx_tool.c      | 164 ++++++++++--------
 4 files changed, 113 insertions(+), 100 deletions(-)

diff --git a/drivers/amlogic/input/touchscreen/gt9xx/Makefile b/drivers/amlogic/input/touchscreen/gt9xx/Makefile
index f51e30570179..7607b65e0094 100755
--- a/drivers/amlogic/input/touchscreen/gt9xx/Makefile
+++ b/drivers/amlogic/input/touchscreen/gt9xx/Makefile
@@ -3,4 +3,4 @@
 #
 
 # Each configuration option enables a list of files.
-obj-$(CONFIG_GOODIX_GT9XX_CAPACITIVE_TOUCHSCREEN)	+= gt9xx.o
\ No newline at end of file
+obj-$(CONFIG_GOODIX_GT9XX_CAPACITIVE_TOUCHSCREEN)	+= gt9xx.o gt9xx_tool.o gt9xx_update.o
\ No newline at end of file
diff --git a/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.c b/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.c
index 272c8a6de7e8..07898238b7de 100755
--- a/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.c
+++ b/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.c
@@ -38,7 +38,7 @@
 #if GTP_ICS_SLOT_REPORT
     #include <linux/input/mt.h>
 #endif
-
+u8 *config_info = NULL;
 static const char *goodix_ts_name = "Goodix Capacitive TouchScreen";
 static struct workqueue_struct *goodix_wq;
 static struct i2c_client * i2c_connect_client = NULL; 
@@ -547,13 +547,13 @@ void gtp_reset_guitar(struct i2c_client *client, s32 ms)
     msleep(ms);
     GTP_GPIO_OUTPUT(GTP_INT_PORT, client->addr == 0x14);
 
-    msleep(2);
+    mdelay(2);
     GTP_GPIO_OUTPUT(GTP_RST_PORT, 1);
     
-    msleep(6);                          //must > 3ms
+    mdelay(6);                          //must > 3ms
     GTP_GPIO_AS_INPUT(GTP_RST_PORT);    //end select I2C slave addr
     
-    gtp_int_sync(50);
+    gtp_int_sync(40);
 }
 
 /*******************************************************
@@ -607,32 +607,33 @@ static s8 gtp_wakeup_sleep(struct goodix_ts_data * ts)
 
     GTP_DEBUG_FUNC();
 
+#if GTP_POWER_CTRL_SLEEP
+    while(retry++ < 5)
+    {
+        gtp_reset_guitar(ts->client, 10);
+        ret = gtp_send_cfg(ts->client);
+        if (ret > 0)
+        {
+            GTP_DEBUG("Wakeup sleep send config success.");
+            return ret;
+        }
+    }
+#else
     while(retry++ < 10)
     {
         GTP_GPIO_OUTPUT(GTP_INT_PORT, 1);
         msleep(5);
-        
+
         ret = gtp_i2c_test(ts->client);
         if (ret > 0)
         {
             GTP_DEBUG("GTP wakeup sleep.");
-            
+
             gtp_int_sync(25);
             return ret;
         }
         gtp_reset_guitar(ts->client, 20);
     }
-#if GTP_POWER_CTRL_SLEEP
-	while(retry++ < 5)
-    {
-        gtp_reset_guitar(ts->client, 20);
-        ret = gtp_send_cfg(ts->client);
-        if (ret > 0)
-        {
-            GTP_DEBUG("Wakeup sleep send config success.");
-            return ret;
-        }
-    }
 #endif
 
     GTP_ERROR("GTP wakeup sleep failed.");
@@ -1024,17 +1025,11 @@ static void gt9xx_read_version(char* ver)
 {
 	int ret = 0;
 	u16 version_info;
-	struct goodix_ts_data *ts;
-
-	ts = i2c_get_clientdata(i2c_connect_client);
-	if(ts==NULL)
-		return;
 
-	ret = gtp_read_version(ts, &version_info);
+	ret = gtp_read_version(i2c_connect_client, &version_info);
 	if(ret <= 0)
 	{
 		printk(KERN_INFO"Read version data failed!\n");
-		vfree(version_info);
 		return;
 	}
 
diff --git a/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.h b/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.h
index a8a79383e5ce..bc57472df9a3 100755
--- a/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.h
+++ b/drivers/amlogic/input/touchscreen/gt9xx/gt9xx.h
@@ -56,7 +56,7 @@ extern u16 total_len;
 #define GTP_AUTO_UPDATE       0
 #define GTP_CHANGE_X2Y        0
 #define GTP_ESD_PROTECT       0
-#define GTP_CREATE_WR_NODE    0
+#define GTP_CREATE_WR_NODE    1
 #define GTP_ICS_SLOT_REPORT   1
 
 #define GUP_USE_HEADER_FILE   0
@@ -192,7 +192,7 @@ a sample config, send this config should cause the chip cannot work normally*/
 
 //*****************************End of Part III********************************
 extern struct touch_pdata *ts_com;
-u8 *config_info = NULL;
+extern u8 *config_info;
 #define READ_COUNT  5
 static int goodix_get_config(void)
 {
diff --git a/drivers/amlogic/input/touchscreen/gt9xx/gt9xx_tool.c b/drivers/amlogic/input/touchscreen/gt9xx/gt9xx_tool.c
index 311dddb191fa..9d29f535d1e0 100755
--- a/drivers/amlogic/input/touchscreen/gt9xx/gt9xx_tool.c
+++ b/drivers/amlogic/input/touchscreen/gt9xx/gt9xx_tool.c
@@ -62,8 +62,8 @@ static struct i2c_client *gt_client = NULL;
 
 static struct proc_dir_entry *goodix_proc_entry;
 
-static s32 goodix_tool_write(struct file *filp, const char __user *buff, unsigned long len, void *data);
-static s32 goodix_tool_read( char *page, char **start, off_t off, int count, int *eof, void *data );
+//static s32 goodix_tool_write(struct file *filp, const char __user *buff, unsigned long len, void *data);
+//static s32 goodix_tool_read( char *page, char **start, off_t off, int count, int *eof, void *data );
 static s32 (*tool_i2c_read)(u8 *, u16);
 static s32 (*tool_i2c_write)(u8 *, u16);
 
@@ -175,66 +175,6 @@ static void unregister_i2c_func(void)
     GTP_INFO("I2C function: unregister i2c transfer function!");
 }
 
-
-s32 init_wr_node(struct i2c_client *client)
-{
-    s32 i;
-
-    gt_client = client;
-    memset(&cmd_head, 0, sizeof(cmd_head));
-    cmd_head.data = NULL;
-
-    i = 5;
-    while ((!cmd_head.data) && i)
-    {
-        cmd_head.data = kzalloc(i * DATA_LENGTH_UINT, GFP_KERNEL);
-        if (NULL != cmd_head.data)
-        {
-            break;
-        }
-        i--;
-    }
-    if (i)
-    {
-        DATA_LENGTH = i * DATA_LENGTH_UINT + GTP_ADDR_LENGTH;
-        GTP_INFO("Applied memory size:%d.", DATA_LENGTH);
-    }
-    else
-    {
-        GTP_ERROR("Apply for memory failed.");
-        return FAIL;
-    }
-
-    cmd_head.addr_len = 2;
-    cmd_head.retry = 5;
-
-    register_i2c_func();
-
-    //goodix_proc_entry = create_proc_entry(GOODIX_ENTRY_NAME, 0666, NULL);
-    goodix_proc_entry = proc_create(GOODIX_ENTRY_NAME, 0666, NULL, NULL);
-    if (goodix_proc_entry == NULL)
-    {
-        GTP_ERROR("Couldn't create proc entry!");
-        return FAIL;
-    }
-    else
-    {
-        GTP_INFO("Create proc entry success!");
-        goodix_proc_entry->write_proc = goodix_tool_write;
-        goodix_proc_entry->read_proc = goodix_tool_read;
-    }
-
-    return SUCCESS;
-}
-
-void uninit_wr_node(void)
-{
-    kfree(cmd_head.data);
-    cmd_head.data = NULL;
-    unregister_i2c_func();
-    remove_proc_entry(GOODIX_ENTRY_NAME, NULL);
-}
-
 static u8 relation(u8 src, u8 dst, u8 rlt)
 {
     u8 ret = 0;
@@ -325,7 +265,7 @@ Input:
 Output:
 	Return write length.
 ********************************************************/
-static s32 goodix_tool_write(struct file *filp, const char __user *buff, unsigned long len, void *data)
+static ssize_t goodix_tool_write(struct file *filp, const char __user *buff, size_t len, loff_t *offset)
 {
     s32 ret = 0;
     GTP_DEBUG_FUNC();
@@ -480,7 +420,7 @@ Input:
 Output:
 	Return read length.
 ********************************************************/
-static s32 goodix_tool_read( char *page, char **start, off_t off, int count, int *eof, void *data )
+static ssize_t goodix_tool_read(struct file *file, char __user *buf, size_t count, loff_t *offset)
 {
     GTP_DEBUG_FUNC();
     
@@ -535,11 +475,11 @@ static s32 goodix_tool_read( char *page, char **start, off_t off, int count, int
                 GTP_ERROR("[READ]Read data failed!");
                 return FAIL;
             }
-            memcpy(&page[loc], &cmd_head.data[GTP_ADDR_LENGTH], len);
+            memcpy(&buf[loc], &cmd_head.data[GTP_ADDR_LENGTH], len);
             loc += len;
 
             GTP_DEBUG_ARRAY(&cmd_head.data[GTP_ADDR_LENGTH], len);
-            GTP_DEBUG_ARRAY(page, len);
+            GTP_DEBUG_ARRAY(buf, len);
         }
     }
     else if (2 == cmd_head.wr)
@@ -548,16 +488,16 @@ static s32 goodix_tool_read( char *page, char **start, off_t off, int count, int
        // memcpy(page, "GT818", 5);
       //  page[5] = 0;
 
-        GTP_DEBUG("Return ic type:%s len:%d.", page, (s32)cmd_head.data_len);
+        GTP_DEBUG("Return ic type:%s len:%d.", buf, (s32)cmd_head.data_len);
         return cmd_head.data_len;
         //return sizeof(IC_TYPE_NAME);
     }
     else if (4 == cmd_head.wr)
     {
-        page[0] = show_len >> 8;
-        page[1] = show_len & 0xff;
-        page[2] = total_len >> 8;
-        page[3] = total_len & 0xff;
+        buf[0] = show_len >> 8;
+        buf[1] = show_len & 0xff;
+        buf[2] = total_len >> 8;
+        buf[3] = total_len & 0xff;
 
         return cmd_head.data_len;
     }
@@ -570,9 +510,87 @@ static s32 goodix_tool_read( char *page, char **start, off_t off, int count, int
        // memcpy(page, GTP_DRIVER_VERSION, strlen(GTP_DRIVER_VERSION));
        s32 tmp_len;
        tmp_len = strlen(GTP_DRIVER_VERSION);
-       memcpy(page, GTP_DRIVER_VERSION, tmp_len);
-       page[tmp_len] = 0;
+       memcpy(buf, GTP_DRIVER_VERSION, tmp_len);
+       buf[tmp_len] = 0;
     }
 
     return cmd_head.data_len;
 }
+
+static int goodix_ts_open(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static int goodix_ts_close(struct inode *inode, struct file *file)
+{
+	return 0;
+}
+
+static struct file_operations goodix_ts_fops = {
+	.owner = THIS_MODULE,
+	.open = goodix_ts_open,
+	.release = goodix_ts_close,
+	.write = goodix_tool_write,
+	.read = goodix_tool_read,
+};
+
+
+s32 init_wr_node(struct i2c_client *client)
+{
+    s32 i;
+
+    gt_client = client;
+    memset(&cmd_head, 0, sizeof(cmd_head));
+    cmd_head.data = NULL;
+
+    i = 5;
+    while ((!cmd_head.data) && i)
+    {
+        cmd_head.data = kzalloc(i * DATA_LENGTH_UINT, GFP_KERNEL);
+        if (NULL != cmd_head.data)
+        {
+            break;
+        }
+        i--;
+    }
+    if (i)
+    {
+        DATA_LENGTH = i * DATA_LENGTH_UINT + GTP_ADDR_LENGTH;
+        GTP_INFO("Applied memory size:%d.", DATA_LENGTH);
+    }
+    else
+    {
+        GTP_ERROR("Apply for memory failed.");
+        return FAIL;
+    }
+
+    cmd_head.addr_len = 2;
+    cmd_head.retry = 5;
+
+    register_i2c_func();
+
+    //goodix_proc_entry = create_proc_entry(GOODIX_ENTRY_NAME, 0666, NULL);
+    goodix_proc_entry = proc_create(GOODIX_ENTRY_NAME, 0666, NULL, &goodix_ts_fops);
+    if (goodix_proc_entry == NULL)
+    {
+        GTP_ERROR("Couldn't create proc entry!");
+        return FAIL;
+    }
+//    else
+//    {
+//        GTP_INFO("Create proc entry success!");
+//        goodix_proc_entry->write_proc = goodix_tool_write;
+//        goodix_proc_entry->read_proc = goodix_tool_read;
+//    }
+
+    return SUCCESS;
+}
+
+void uninit_wr_node(void)
+{
+    kfree(cmd_head.data);
+    cmd_head.data = NULL;
+    unregister_i2c_func();
+    remove_proc_entry(GOODIX_ENTRY_NAME, NULL);
+}
-- 
2.19.0

