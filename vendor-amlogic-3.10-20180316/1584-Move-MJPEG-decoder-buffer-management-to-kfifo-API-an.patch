From f63f5b51c25261c7f1dbb4861ae05c5e9ae220fa Mon Sep 17 00:00:00 2001
From: timyao <tim.yao@amlogic.com>
Date: Wed, 30 Oct 2013 17:40:09 -0700
Subject: [PATCH 1584/5965] Move MJPEG decoder buffer management to kfifo API
 and support buffer recycling re-order (cherry picked from commit
 9e6fee6fe2000fe001dca200a873ccff33f2448d)

---
 drivers/amlogic/amports/vmjpeg.c | 135 ++++++++++++++++---------------
 1 file changed, 72 insertions(+), 63 deletions(-)

diff --git a/drivers/amlogic/amports/vmjpeg.c b/drivers/amlogic/amports/vmjpeg.c
index 1dbb99c17ed4..192cd12ce01c 100755
--- a/drivers/amlogic/amports/vmjpeg.c
+++ b/drivers/amlogic/amports/vmjpeg.c
@@ -24,6 +24,7 @@
 #include <linux/errno.h>
 #include <linux/interrupt.h>
 #include <linux/timer.h>
+#include <linux/kfifo.h>
 #include <linux/platform_device.h>
 #include <mach/am_regs.h>
 #include <plat/io.h>
@@ -73,11 +74,10 @@ MODULE_AMLOG(LOG_LEVEL_ERROR, 0, LOG_LEVEL_DESC, LOG_DEFAULT_MASK_DESC);
 #define PICINFO_INTERLACE_AVI1_BOT  0x0010
 #define PICINFO_INTERLACE_FIRST     0x0010
 
-#define VF_POOL_SIZE        12
+#define VF_POOL_SIZE          16
+#define DECODE_BUFFER_NUM_MAX 4
 #define PUT_INTERVAL        HZ/100
 
-#define INCPTR(p) ptr_atomic_wrap_inc(&p)
-
 #define STAT_TIMER_INIT     0x01
 #define STAT_MC_LOAD        0x02
 #define STAT_ISR_REG        0x04
@@ -113,10 +113,13 @@ static const struct vframe_operations_s vmjpeg_vf_provider = {
 };
 static struct vframe_provider_s vmjpeg_vf_prov;
 
+static DECLARE_KFIFO(newframe_q, vframe_t *, VF_POOL_SIZE);
+static DECLARE_KFIFO(display_q, vframe_t *, VF_POOL_SIZE);
+static DECLARE_KFIFO(recycle_q, vframe_t *, VF_POOL_SIZE);
+
 static struct vframe_s vfpool[VF_POOL_SIZE];
-static u32 vfpool_idx[VF_POOL_SIZE];
-static s32 vfbuf_use[4];
-static s32 fill_ptr, get_ptr, putting_ptr, put_ptr;
+static s32 vfbuf_use[DECODE_BUFFER_NUM_MAX];
+
 static u32 frame_width, frame_height, frame_dur;
 static struct timer_list recycle_timer;
 static u32 stat;
@@ -149,19 +152,6 @@ static inline u32 index2canvas1(u32 index)
     return canvas_tab[index];
 }
 
-static inline void ptr_atomic_wrap_inc(u32 *ptr)
-{
-    u32 i = *ptr;
-
-    i++;
-
-    if (i >= VF_POOL_SIZE) {
-        i = 0;
-    }
-
-    *ptr = i;
-}
-
 static void set_frame_info(vframe_t *vf)
 {
     vf->width  = frame_width;
@@ -174,7 +164,7 @@ static void set_frame_info(vframe_t *vf)
 static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
 {
     u32 reg, offset, pts, pts_valid = 0;
-    vframe_t *vf;
+    vframe_t *vf = NULL;
 
     WRITE_VREG(ASSIST_MBOX1_CLR_REG, 1);
 
@@ -190,11 +180,19 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
         if ((reg & PICINFO_INTERLACE) == 0) {
             u32 index = ((reg & PICINFO_BUF_IDX_MASK) - 1) & 3;
 
-            vfpool_idx[fill_ptr] = index;
-            vf = &vfpool[fill_ptr];
+            if (index >= DECODE_BUFFER_NUM_MAX) {
+                printk("fatal error, invalid buffer index.");
+                return IRQ_HANDLED;
+            }
+
+            if (kfifo_get(&newframe_q, &vf) == 0) {
+                printk("fatal error, no available buffer slot.");
+                return IRQ_HANDLED;
+            }
 
             set_frame_info(vf);
 
+            vf->index = index;
 #ifdef NV21
             vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD | VIDTYPE_VIU_NV21;
 #else
@@ -205,17 +203,26 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
 			vf->orientation = 0 ;
             vfbuf_use[index]++;
 
-            INCPTR(fill_ptr);
+            kfifo_put(&display_q, (const vframe_t **)&vf);
+
             vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);               
 
         } else {
             u32 index = ((reg & PICINFO_BUF_IDX_MASK) - 1) & 3;
 
-            vfpool_idx[fill_ptr] = index;
-            vf = &vfpool[fill_ptr];
+            if (index >= DECODE_BUFFER_NUM_MAX) {
+                printk("fatal error, invalid buffer index.");
+                return IRQ_HANDLED;
+            }
+
+            if (kfifo_get(&newframe_q, &vf) == 0) {
+                printk("fatal error, no available buffer slot.");
+                return IRQ_HANDLED;
+            }
 
             set_frame_info(vf);
 
+            vf->index = index;
 #if 0
             if (reg & PICINFO_AVI1) {
                 /* AVI1 format */
@@ -247,7 +254,7 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
 
             vfbuf_use[index]++;
 
-            INCPTR(fill_ptr);
+            kfifo_put(&display_q, (const vframe_t **)&vf);
 #else
             /* send whole frame by weaving top & bottom field */
 #ifdef NV21
@@ -266,8 +273,9 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
 
             vfbuf_use[index]++;
 
-            INCPTR(fill_ptr);
-		vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);            
+            kfifo_put(&display_q, (const vframe_t **)&vf);
+            
+		    vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);            
 #endif
         }
 
@@ -279,31 +287,29 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
 
 static vframe_t *vmjpeg_vf_peek(void* op_arg)
 {
-    if (get_ptr == fill_ptr) {
-        return NULL;
+    vframe_t *vf;
+
+    if (kfifo_peek(&display_q, &vf)) {
+        return vf;
     }
 
-    return &vfpool[get_ptr];
+    return NULL;
 }
 
 static vframe_t *vmjpeg_vf_get(void* op_arg)
 {
     vframe_t *vf;
 
-    if (get_ptr == fill_ptr) {
-        return NULL;
+    if (kfifo_get(&display_q, &vf)) {
+        return vf;
     }
 
-    vf = &vfpool[get_ptr];
-
-    INCPTR(get_ptr);
-
-    return vf;
+    return NULL;
 }
 
 static void vmjpeg_vf_put(vframe_t *vf, void* op_arg)
 {
-    INCPTR(putting_ptr);
+    kfifo_put(&recycle_q, (const vframe_t **)&vf);
 }
 
 static int vmjpeg_event_cb(int type, void *data, void *private_data)
@@ -328,24 +334,16 @@ static int vmjpeg_event_cb(int type, void *data, void *private_data)
 
 static int  vmjpeg_vf_states(vframe_states_t *states, void* op_arg)
 {
-    int i;
     unsigned long flags;
     spin_lock_irqsave(&lock, flags);
 
     states->vf_pool_size = VF_POOL_SIZE;
-    i = put_ptr - fill_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_free_num = i;
-    
-    i = putting_ptr - put_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_recycle_num = i;
-    
-    i = fill_ptr - get_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_avail_num = i;
+    states->buf_free_num = kfifo_len(&newframe_q);
+    states->buf_avail_num = kfifo_len(&display_q);
+    states->buf_recycle_num = kfifo_len(&recycle_q);
 
     spin_unlock_irqrestore(&lock, flags);
+
     return 0;
 }
 
@@ -353,14 +351,17 @@ static void vmjpeg_put_timer_func(unsigned long arg)
 {
     struct timer_list *timer = (struct timer_list *)arg;
 
-    while ((putting_ptr != put_ptr) && (READ_VREG(MREG_TO_AMRISC) == 0)) {
-        u32 index = vfpool_idx[put_ptr];
+    while (!kfifo_is_empty(&recycle_q) &&
+           (READ_VREG(MREG_TO_AMRISC) == 0)) {
+        vframe_t *vf;
+        if (kfifo_get(&recycle_q, &vf)) {
+            if ((vf->index >= 0) && (--vfbuf_use[vf->index] == 0)) {
+                WRITE_VREG(MREG_TO_AMRISC, vf->index + 1);
+                vf->index = -1;
+            }
 
-        if (--vfbuf_use[index] == 0) {
-            WRITE_VREG(MREG_TO_AMRISC, index + 1);
+            kfifo_put(&newframe_q, (const vframe_t **)&vf);
         }
-
-        INCPTR(put_ptr);
     }
 
     timer->expires = jiffies + PUT_INTERVAL;
@@ -589,17 +590,25 @@ static void vmjpeg_local_init(void)
 {
     int i;
 
-    fill_ptr = get_ptr = put_ptr = putting_ptr = 0;
-
     frame_width = vmjpeg_amstream_dec_info.width;
     frame_height = vmjpeg_amstream_dec_info.height;
     frame_dur = vmjpeg_amstream_dec_info.rate;
 
     amlog_level(LOG_LEVEL_INFO, "mjpegdec: w(%d), h(%d), dur(%d)\n", frame_width, frame_height, frame_dur);
 
-    for (i = 0; i < 4; i++) {
+    for (i = 0; i < DECODE_BUFFER_NUM_MAX; i++) {
         vfbuf_use[i] = 0;
     }
+
+    INIT_KFIFO(display_q);
+    INIT_KFIFO(recycle_q);
+    INIT_KFIFO(newframe_q);
+
+    for (i=0; i<VF_POOL_SIZE; i++) {
+        const vframe_t *vf = &vfpool[i];
+        vfpool[i].index = -1;
+        kfifo_put(&newframe_q, &vf);
+    }
 }
 
 static s32 vmjpeg_init(void)
@@ -637,14 +646,14 @@ static s32 vmjpeg_init(void)
 
     stat |= STAT_ISR_REG;
 
- #ifdef CONFIG_POST_PROCESS_MANAGER
+#ifdef CONFIG_POST_PROCESS_MANAGER
     vf_provider_init(&vmjpeg_vf_prov, PROVIDER_NAME, &vmjpeg_vf_provider, NULL);
     vf_reg_provider(&vmjpeg_vf_prov);
     vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_START,NULL);               
- #else 
+#else 
     vf_provider_init(&vmjpeg_vf_prov, PROVIDER_NAME, &vmjpeg_vf_provider, NULL);
     vf_reg_provider(&vmjpeg_vf_prov);
- #endif 
+#endif 
 
     stat |= STAT_VF_HOOK;
 
-- 
2.19.0

