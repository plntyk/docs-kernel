From faa0d75e3db155abf65b2311c146fc243862a813 Mon Sep 17 00:00:00 2001
From: "xiaoyu.yuan" <xiaoyu.yuan@droid05.amlogic.com>
Date: Fri, 1 Nov 2013 14:02:06 +0800
Subject: [PATCH 1587/5965] update ov5647 && config parse from 3.8

---
 customer                                      |  2 +-
 drivers/amlogic/camera/common/config_parser.c |  8 ++--
 drivers/amlogic/camera/common/config_parser.h |  5 ++-
 drivers/amlogic/camera/ov5647.c               | 41 ++++++++-----------
 4 files changed, 24 insertions(+), 32 deletions(-)

diff --git a/customer b/customer
index c6ccfb45b672..0eb29b752be9 160000
--- a/customer
+++ b/customer
@@ -1 +1 @@
-Subproject commit c6ccfb45b6728ffcdebfd3ed4ce1dfde47b24dc0
+Subproject commit 0eb29b752be9456fe305ab7355533af2ad428d86
diff --git a/drivers/amlogic/camera/common/config_parser.c b/drivers/amlogic/camera/common/config_parser.c
index 5938466f48e7..7514aa02f7e2 100755
--- a/drivers/amlogic/camera/common/config_parser.c
+++ b/drivers/amlogic/camera/common/config_parser.c
@@ -783,7 +783,7 @@ int parse_scene(buffer_para_t *buf_para,int *remained,int *offset){
 
         iter = strstr(iter,"export");
         iter += 7;
-        for(i=0;i<194;i++){
+        for(i=0;i<SCENE_MAX;i++){
             sscanf(iter,"%x",&(cf->scene.scene[check].export[i]));
             //printk("scene:%x\n",(cf->scene.scene[check].export[i]));
             iter = strstr(iter,",");
@@ -1131,9 +1131,9 @@ int generate_para(cam_parameter_t *para,para_index_t pindex){
             return 	-ENOMEM;
         }
         scene = para->xml_scenes;
-        memcpy(&(scene->ae),cf->scene.scene[pindex.scenes_index].export,93*sizeof(unsigned int));
-        memcpy(&(scene->awb),cf->scene.scene[pindex.scenes_index].export + 93,100*sizeof(unsigned int));
-        memcpy(&(scene->af),cf->scene.scene[pindex.scenes_index].export + 193,1*sizeof(unsigned int));
+        memcpy(&(scene->ae),cf->scene.scene[pindex.scenes_index].export,97*sizeof(unsigned int));
+        memcpy(&(scene->awb),cf->scene.scene[pindex.scenes_index].export + 97,104*sizeof(unsigned int));
+        memcpy(&(scene->af),cf->scene.scene[pindex.scenes_index].export + 201,1*sizeof(unsigned int));
     }else{
         para->xml_scenes = NULL;
     }
diff --git a/drivers/amlogic/camera/common/config_parser.h b/drivers/amlogic/camera/common/config_parser.h
index 818972a603a0..ec2c8ec4c815 100755
--- a/drivers/amlogic/camera/common/config_parser.h
+++ b/drivers/amlogic/camera/common/config_parser.h
@@ -6,7 +6,7 @@
 #include <linux/mm.h>
 #include <linux/i2c.h>
 #include <linux/string.h>
-#include <linux/amlogic/tvin/tvin_v4l2.h>
+#include <linux/tvin/tvin_v4l2.h>
 
 #define EFFECT_MAX 16
 #define AET_MAX 16
@@ -14,6 +14,7 @@
 #define WB_MAX 9
 #define CAPTURE_MAX 5
 #define GAMMA_MAX 257
+#define SCENE_MAX 202
 #define BUFFER_SIZE 1024
 
 enum error_code {
@@ -68,7 +69,7 @@ typedef struct{
 typedef struct{
     int num;
     char name[40];
-    int export[194];
+    int export[SCENE_MAX];
 }scene_type;
 
 typedef struct{
diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index 73eecde6a4c1..cbb8b2a4fb95 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -36,6 +36,8 @@
 
 #include <linux/i2c.h>
 #include <media/v4l2-chip-ident.h>
+#include <media/v4l2-i2c-drv.h>
+#include <media/amlogic/aml_camera.h>
 
 #include <linux/amlogic/camera/aml_cam_info.h>
 
@@ -45,6 +47,7 @@
 //#include <media/amlogic/656in.h>
 #include "common/plat_ctrl.h"
 #include "common/vmapi.h"
+#include <linux/tvin/tvin_v4l2.h>
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 #include <mach/mod_gate.h>
 #endif
@@ -81,12 +84,12 @@ static unsigned debug;
 //module_param(debug, uint, 0644);
 //MODULE_PARM_DESC(debug, "activates debug info");
 
-static unsigned int vid_limit = 16;
+static unsigned int vid_limit = 32;
 //module_param(vid_limit, uint, 0644);
 //MODULE_PARM_DESC(vid_limit, "capture memory limit in megabytes");
 
-static int ov5647_h_active=800;
-static int ov5647_v_active=600;
+static int ov5647_h_active = 800;
+static int ov5647_v_active = 600;
 static struct v4l2_fract ov5647_frmintervals_active = {
     .numerator = 1,
     .denominator = 15,
@@ -253,7 +256,7 @@ static struct v4l2_frmivalenum ov5647_frmivalenum[]={
                 {
                         .discrete	={
                                 .numerator	= 1,
-                                .denominator	= 25,
+                                .denominator	= 30,
                         }
                 }
         },{
@@ -510,7 +513,7 @@ struct ov5647_dmaqueue {
 };
 
 typedef enum resulution_size_type{
-	//SIZE_NULL = 0,
+	SIZE_NULL_TYPE = 0,
 	SIZE_CIF_352X288,
 	SIZE_VGA_640X480,
 	SIZE_720P_1280X720,
@@ -1432,13 +1435,7 @@ static resolution_param_t  prev_resolution_array[] = {
 		.active_fps			= 15,
 		.size_type			= SIZE_1080P_1920X1080,
 		.reg_script			= OV5647_preview_1080P_script,
-	},{
-		.frmsize			= {2592, 1944},
-		.active_frmsize		= {2592, 1944},
-		.active_fps			= 7.5,
-		.size_type			= SIZE_H1080P_2592X1944,
-		.reg_script			= OV5647_capture_5M_script,
-	},
+	}
 };
 	
 
@@ -2148,7 +2145,7 @@ static int set_flip(struct ov5647_device *dev)
 
 static resulution_size_type_t get_size_type(int width, int height)
 {
-    resulution_size_type_t rv = SIZE_NULL;
+    resulution_size_type_t rv = SIZE_NULL_TYPE;
     if (width * height >= 2500 * 1900)
         rv = SIZE_H1080P_2592X1944;
     else if (width * height >= 1900 * 1000)
@@ -2195,9 +2192,9 @@ static resolution_param_t* get_resolution_param(struct ov5647_device *dev, int i
     int i = 0;
     int arry_size = 0;
     resolution_param_t* tmp_resolution_param = NULL;
-    resulution_size_type_t res_type = SIZE_NULL;
+    resulution_size_type_t res_type = SIZE_NULL_TYPE;
     res_type = get_size_type(width, height);
-    if (res_type == SIZE_NULL)
+    if (res_type == SIZE_NULL_TYPE)
         return NULL;
     if (is_capture == 1) {
         tmp_resolution_param = capture_resolution_array;
@@ -2206,7 +2203,6 @@ static resolution_param_t* get_resolution_param(struct ov5647_device *dev, int i
         tmp_resolution_param = prev_resolution_array;
         arry_size = ARRAY_SIZE(prev_resolution_array);
     }
-
     for (i = 0; i < arry_size; i++) {
         if (tmp_resolution_param[i].size_type == res_type)
             return &tmp_resolution_param[i];
@@ -2914,7 +2910,6 @@ char *res_size[]={
 	"720p",
 	"960p",
 	"1080p",
-	"5m",	
 };
 static int get_index(char *res){
 	int i = 0;
@@ -2991,7 +2986,7 @@ static int vidioc_enum_framesizes(struct file *file, void *fh,struct v4l2_frmsiz
                               "   before fsize->index== %d\n",fsize->index);//potti
               if (fsize->index >= ARRAY_SIZE(prev_resolution_array))
                       return -EINVAL;
-              frmsize = &prev_resolution_array[fsize->index].frmsize;
+              frmsize = &prev_resolution_array[fsize->index].active_frmsize;
               printk("ov5647_prev_resolution[fsize->index]"
                               "   after fsize->index== %d\n",fsize->index);
               fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
@@ -3414,7 +3409,7 @@ static int ov5647_probe(struct i2c_client *client,
 	sd = &t->sd;
 	v4l2_i2c_subdev_init(sd, client, &ov5647_ops);
 
-	plat_dat = (aml_cam_info_t*)client->dev.platform_data;
+	plat_dat = (aml_plat_cam_data_t*)client->dev.platform_data;
 
 	/* Now create a video4linux device */
 	mutex_init(&t->mutex);
@@ -3469,14 +3464,10 @@ static const struct i2c_device_id ov5647_id[] = {
 };
 MODULE_DEVICE_TABLE(i2c, ov5647_id);
 
-static struct i2c_driver ov5647_i2c_driver = {
-	.driver = {
-		.name = "ov5647",
-	},
+static struct v4l2_i2c_driver_data v4l2_i2c_data = {
+	.name = "ov5647",
 	.probe = ov5647_probe,
 	.remove = ov5647_remove,
 	.id_table = ov5647_id,
 };
 
-module_i2c_driver(ov5647_i2c_driver);
-
-- 
2.19.0

