From 39562d4f5fb714e888f80d184d67b070ce3b872d Mon Sep 17 00:00:00 2001
From: "Matthew.Shyu" <matthew.shyu@amlogic.com>
Date: Fri, 1 Nov 2013 16:17:48 +0800
Subject: [PATCH 1612/5965] 73323-2 - enable hdcp2 on nand secure storage

---
 arch/arm/configs/meson8_defconfig   |  5 ++++
 drivers/amlogic/securitykeys/core.c | 38 ++++++++++++++++++++++++++++-
 2 files changed, 42 insertions(+), 1 deletion(-)
 mode change 100755 => 100644 drivers/amlogic/securitykeys/core.c

diff --git a/arch/arm/configs/meson8_defconfig b/arch/arm/configs/meson8_defconfig
index f83604cfffd8..37112126350b 100755
--- a/arch/arm/configs/meson8_defconfig
+++ b/arch/arm/configs/meson8_defconfig
@@ -330,3 +330,8 @@ CONFIG_CMA_SIZE_MBYTES=64
 CONFIG_CMA_SIZE_SEL_MBYTES=y
 CONFIG_CMA_ALIGNMENT=8
 CONFIG_CMA_AREAS=7
+CONFIG_SECURITYKEY=y
+CONFIG_AML_NAND_KEY=y
+CONFIG_NAND_KEY_BLOCK_NUM=8
+CONFIG_AML_EMMC_KEY=y
+
diff --git a/drivers/amlogic/securitykeys/core.c b/drivers/amlogic/securitykeys/core.c
old mode 100755
new mode 100644
index e7781f5b8ac5..ee298a0506a5
--- a/drivers/amlogic/securitykeys/core.c
+++ b/drivers/amlogic/securitykeys/core.c
@@ -623,7 +623,7 @@ core_show_return:
         kfree(dec_data);
     return n;
 }
-#define KEY_READ_ATTR  (S_IRUSR|S_IRGRP|S_IROTH)
+#define KEY_READ_ATTR  (S_IRUSR|S_IRGRP)
 #define KEY_WRITE_ATTR (S_IWUSR|S_IWGRP)
 
 
@@ -1253,6 +1253,11 @@ static ssize_t key_name_store(struct device *dev, struct device_attribute *attr,
 	return count;
 }
 //DEVICE_ATTR(key_name, 0660, key_name_show, key_name_store);
+static ssize_t hdcp_store(struct device *dev, struct device_attribute *attr,
+		const char *buf, size_t count)
+{
+	return key_name_store(dev, attr, buf, count);
+}
 
 #if 0
 static ssize_t key_write_show(struct device *dev, struct device_attribute *attr,
@@ -1290,6 +1295,21 @@ static ssize_t key_read_show(struct device *dev, struct device_attribute *attr,
 	err = key_core_show(dev, (struct device_attribute*)curkey,buf);
 	return err;
 }
+
+static ssize_t hdcp_show(struct device *dev, struct device_attribute *attr,
+                            char *buf)
+{
+	int err;
+	if((curkey == NULL)||(curkey->name[0] == 0)){
+		printk("unkown current key-name,%s:%d\n",__func__,__LINE__);
+		return -EINVAL;
+	}
+	if (!strncmp(curkey->name, "hdcp2lc128", sizeof("hdcp2lc128")) || !strncmp(curkey->name, "hdcp2key", sizeof("hdcp2key")))
+		err = key_core_show(dev, (struct device_attribute*)curkey,buf);
+	else
+		err = -EINVAL;
+	return err;
+}
 #if 0
 static ssize_t key_read_store(struct device *dev, struct device_attribute *attr,
                              const char *buf, size_t count)
@@ -1304,6 +1324,7 @@ static ssize_t key_read_store(struct device *dev, struct device_attribute *attr,
 #define MAC_KEY_NAME	"mac"
 #define MAC_BT_KEY_NAME "mac_bt"
 #define MAC_WIFI_KEY_NAME "mac_wifi"
+#define HDCP_KEY_NAME "hdcp"
 
 static char twoASCByteToByte(char c1, char c2)
 {
@@ -1406,6 +1427,9 @@ static struct key_new_node key_node_name[]={
 	[4]={
 		.name = USID_KEY_NAME,
 	},
+	[5]={
+		.name = HDCP_KEY_NAME,
+	},
 };
 static ssize_t key_node_set(struct device *dev)
 {
@@ -1473,6 +1497,18 @@ static ssize_t key_node_set(struct device *dev)
         printk("%s:%d\n", __FILE__, __LINE__);
         return -EINVAL;
     }
+    i=5;
+	mode = KEY_READ_ATTR | KEY_WRITE_ATTR;
+	key_new[i].attr.show = hdcp_show;
+	key_new[i].attr.store = hdcp_store;
+	key_new[i].attr.attr.name = &key_new[i].name[0];
+	key_new[i].attr.attr.mode = mode;
+    ret = device_create_file(dev, (const struct device_attribute *) &key_new[i].attr);
+    if (ret < 0)
+    {
+        printk("%s:%d\n", __FILE__, __LINE__);
+        return -EINVAL;
+    }
     return 0;
 }
 
-- 
2.19.0

