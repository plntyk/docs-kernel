From e5af7668bb8f8a44a721d679d94a017db9c264df Mon Sep 17 00:00:00 2001
From: "shi.liu" <shi.liu@amlogic.com>
Date: Tue, 5 Nov 2013 10:53:14 +0800
Subject: [PATCH 1703/5965] cpufreq state: modify state module for virtual
 addree conlict

---
 drivers/amlogic/cpufreq/meson-cpufreq.c |  2 +-
 drivers/cpufreq/cpufreq_stats.c         | 26 +++++++++++++++++++++----
 2 files changed, 23 insertions(+), 5 deletions(-)
 mode change 100644 => 100755 drivers/cpufreq/cpufreq_stats.c

diff --git a/drivers/amlogic/cpufreq/meson-cpufreq.c b/drivers/amlogic/cpufreq/meson-cpufreq.c
index f8a571dd79f5..e99c02cf11e1 100755
--- a/drivers/amlogic/cpufreq/meson-cpufreq.c
+++ b/drivers/amlogic/cpufreq/meson-cpufreq.c
@@ -269,7 +269,7 @@ static int meson_cpufreq_init(struct cpufreq_policy *policy)
 	if(policy->max > policy->cpuinfo.max_freq)
 		policy->max = policy->cpuinfo.max_freq;
 
-	policy->cur = clk_get_rate(cpufreq.armclk) / 1000;
+	policy->cur =  clk_round_rate(cpufreq.armclk, clk_get_rate(cpufreq.armclk)) / 1000;;
 
 	/* FIXME: what's the actual transition time? */
     policy->cpuinfo.transition_latency = 200 * 1000;
diff --git a/drivers/cpufreq/cpufreq_stats.c b/drivers/cpufreq/cpufreq_stats.c
old mode 100644
new mode 100755
index 6c287ae7bbba..cf147a3b1f77
--- a/drivers/cpufreq/cpufreq_stats.c
+++ b/drivers/cpufreq/cpufreq_stats.c
@@ -53,10 +53,12 @@ static int cpufreq_stats_update(unsigned int cpu)
 	cur_time = get_jiffies_64();
 	spin_lock(&cpufreq_stats_lock);
 	stat = per_cpu(cpufreq_stats_table, cpu);
-	if (stat->time_in_state)
-		stat->time_in_state[stat->last_index] +=
-			cur_time - stat->last_time;
-	stat->last_time = cur_time;
+	if (stat->last_index != -1) {
+		if (stat->time_in_state)
+			stat->time_in_state[stat->last_index] +=
+				cur_time - stat->last_time;
+		stat->last_time = cur_time;
+	}
 	spin_unlock(&cpufreq_stats_lock);
 	return 0;
 }
@@ -257,6 +259,22 @@ static int cpufreq_stats_create_table(struct cpufreq_policy *policy,
 	spin_lock(&cpufreq_stats_lock);
 	stat->last_time = get_jiffies_64();
 	stat->last_index = freq_table_get_index(stat, policy->cur);
+
+	/**
+	 *  Force last_index to 0 if the frequency cannot be found in the
+	 *  frequency table to avoid
+	 *
+	 *      * stat->time_in_state[-1]
+	 *      * cpufreq_stat_notifier_trans() not running
+	 *
+	 *  It can happen if the CPU is booted with a frequency not listed
+	 *  in the frequency table.
+	 *
+	 *  Simply set the last_index to 0 in this case to avoid corruption
+	 */
+	if (stat->last_index == -1)
+		stat->last_index = 0;
+
 	spin_unlock(&cpufreq_stats_lock);
 	cpufreq_cpu_put(data);
 	return 0;
-- 
2.19.0

