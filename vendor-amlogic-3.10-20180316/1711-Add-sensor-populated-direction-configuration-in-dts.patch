From 1b4abfa89d8746f6905747b9d6e1fc4361d43f98 Mon Sep 17 00:00:00 2001
From: "Chris.Sun" <qiuwei.sun@amlogic.com>
Date: Tue, 5 Nov 2013 16:55:50 +0800
Subject: [PATCH 1711/5965] Add sensor populated-direction configuration in
 dts.

---
 arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd |   2 +
 arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd |   2 +
 drivers/amlogic/camera/gc2035.c              |   5 +-
 drivers/amlogic/input/sensor/bma222.c        |   8 +-
 drivers/amlogic/input/sensor/bma250.c        |   6 +-
 drivers/amlogic/input/sensor/common.c        | 196 +++++++++++--------
 drivers/amlogic/input/sensor/dmard06.c       |   6 +-
 drivers/amlogic/input/sensor/dmt10.c         |  12 +-
 drivers/amlogic/input/sensor/kionix_accel.c  |  21 +-
 drivers/amlogic/input/sensor/lis3dh_acc.c    |   5 +-
 drivers/amlogic/input/sensor/lsm303d.c       |  11 +-
 drivers/amlogic/input/sensor/mc32x0.c        |   9 +-
 drivers/amlogic/input/sensor/mm3a310.c       |   6 +-
 drivers/amlogic/input/sensor/mma7660.c       |   7 +-
 drivers/amlogic/input/sensor/mma8452.c       |   7 +-
 drivers/amlogic/input/sensor/mma865x.c       |  30 ++-
 drivers/amlogic/input/sensor/mxc622x.c       |   7 +-
 drivers/amlogic/input/sensor/stk831x.c       |   6 +-
 include/linux/sensor/sensor_common.h         |  23 +++
 19 files changed, 220 insertions(+), 149 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
index 2e2a9f064e11..8fb3753b2926 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
@@ -1166,6 +1166,7 @@ sdio{
             status = "okay";
             address = <0x1c>;
             i2c_bus = "i2c_bus_b";
+            acc_dir = <0x0101>;
         };
 
 //$$ DEVICE="mma865x"
@@ -1177,6 +1178,7 @@ sdio{
             status = "okay";
             address = <0x1d>;
             i2c_bus = "i2c_bus_b";
+            acc_dir = <0x1111>;
         };
 
 //$$ DEVICE="afa750"
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
index 22423e74f630..8b5d7f0232a4 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
@@ -1172,6 +1172,7 @@ sdio{
             status = "okay";
             address = <0x1c>;
             i2c_bus = "i2c_bus_b";
+            acc_dir = <0x0101>;
         };
 
 //$$ DEVICE="mma865x"
@@ -1183,6 +1184,7 @@ sdio{
             status = "okay";
             address = <0x1d>;
             i2c_bus = "i2c_bus_b";
+            acc_dir = <0x1111>;
         };
 
 //$$ DEVICE="afa750"
diff --git a/drivers/amlogic/camera/gc2035.c b/drivers/amlogic/camera/gc2035.c
index 937dd8042d60..195346994ec4 100755
--- a/drivers/amlogic/camera/gc2035.c
+++ b/drivers/amlogic/camera/gc2035.c
@@ -2960,9 +2960,12 @@ static int gc2035_open(struct file *file)
 	int retval = 0;
 
 #if CONFIG_CMA
-    retval = vm_init_buf(16*SZ_1M);
+    retval = vm_init_buf(32*SZ_1M);
     if(retval <0)
+    {
+        pr_err("%s : Allocation from CMA failed\n", __func__);
         return -1;
+    }
 #endif
 
 #ifdef CONFIG_ARCH_MESON6
diff --git a/drivers/amlogic/input/sensor/bma222.c b/drivers/amlogic/input/sensor/bma222.c
index 73345a5f197e..e5877c37bced 100644
--- a/drivers/amlogic/input/sensor/bma222.c
+++ b/drivers/amlogic/input/sensor/bma222.c
@@ -2094,15 +2094,15 @@ static void bma222_work_func(struct work_struct *work)
 	bma222_read_accel_xyz(bma222->bma222_client, &acc);
 	//printk("%s:::x:%d,y:%d,z:%d\n",__FUNCTION__,acc.x,acc.y,acc.z);
 	if(!pdata){
-		input_report_abs(bma222->input, ABS_X, acc.x);
-		input_report_abs(bma222->input, ABS_Y, acc.y);
-		input_report_abs(bma222->input, ABS_Z, acc.z);
+
+        aml_sensor_report_acc(bma222->bma222_client, bma222->input, acc.x, acc.y, acc.z);
+
 	}else{
 		input_report_abs(bma222->input, ABS_X, acc.x * pdata->rotator[0] + acc.y * pdata->rotator[1]+acc.z * pdata->rotator[2]);
 		input_report_abs(bma222->input, ABS_Y, acc.x * pdata->rotator[3] + acc.y * pdata->rotator[4]+acc.z * pdata->rotator[5]);
 		input_report_abs(bma222->input, ABS_Z, acc.x * pdata->rotator[6] + acc.y * pdata->rotator[7]+acc.z * pdata->rotator[8]);
+        input_sync(bma222->input);
 	}	
-	input_sync(bma222->input);
 	mutex_lock(&bma222->value_mutex);
 	bma222->value = acc;
 	mutex_unlock(&bma222->value_mutex);
diff --git a/drivers/amlogic/input/sensor/bma250.c b/drivers/amlogic/input/sensor/bma250.c
index 7f725290d04c..d01910f1b064 100644
--- a/drivers/amlogic/input/sensor/bma250.c
+++ b/drivers/amlogic/input/sensor/bma250.c
@@ -2073,10 +2073,8 @@ static void bma250_work_func(struct work_struct *work)
 	unsigned long delay = msecs_to_jiffies(atomic_read(&bma250->delay));
 
 	bma250_read_accel_xyz(bma250->bma250_client, &acc);
-	input_report_abs(bma250->input, ABS_X, acc.x);
-	input_report_abs(bma250->input, ABS_Y, acc.y);
-	input_report_abs(bma250->input, ABS_Z, acc.z);
-	input_sync(bma250->input);
+
+    aml_sensor_report_acc(bma250->bma250_client, bma250->input, acc.x, acc.y, acc.z);
 	mutex_lock(&bma250->value_mutex);
 	bma250->value = acc;
 	mutex_unlock(&bma250->value_mutex);
diff --git a/drivers/amlogic/input/sensor/common.c b/drivers/amlogic/input/sensor/common.c
index d25d7d9f8c85..3897f9a28a1c 100644
--- a/drivers/amlogic/input/sensor/common.c
+++ b/drivers/amlogic/input/sensor/common.c
@@ -2,94 +2,92 @@
 #include <linux/of.h>
 #include <linux/amlogic/aml_gpio_consumer.h>
 #include <linux/amlogic/input/common.h>
+#include <linux/sensor/sensor_common.h>
 
 
-int sensor_setup_i2c_dev(struct i2c_board_info *i2c_info, int *i2c_bus_nr, int *gpio)
-{
-    int ret = -1;
-    struct device_node *node = of_find_node_by_name(NULL, i2c_info->type);
+#define MAX_SENSOR_ONBOARD  6
+static sensor_pdata_t sensor_pdata[MAX_SENSOR_ONBOARD];
+static int curr_idx;
 
-    if(node)
+void aml_sensor_report_acc(struct i2c_client *client, struct input_dev *dev, int x, int y, int z)
+{
+    int i;
+    for(i = 0; i < curr_idx; i++)
     {
-        int r;
-        int irq;
-        const char *status;
-
-        ret = 0;
-		r = of_property_read_string(node, "status", &status);
-        if(r< 0){
-            printk("%s: Failed to read status from device tree for dev %s\n", __func__, i2c_info->type);
-            return -1;
-        }
-
-
-        if(strncmp("ok", status, 2) == 0)
-        {
-            u32 addr;
-            char *str;
-
-            ret = 0;
-            r = of_property_read_u32(node, "address",&addr);
-            if(r < 0)
+        if(sensor_pdata[i].client && sensor_pdata[i].client == client)
+        { 
+            if(sensor_pdata[i].acc_swap_xy)
             {
-                printk("%s: faild to get i2c address for dev %s\n", __func__, i2c_info->type);
-                return -1;
-            }
-
-            i2c_info->addr = addr;
-
-
-            r = of_property_read_string(node, "i2c_bus", &str);
-            if (r) {
-                printk("%s: faild to get i2c_bus str for dev %s\n", __func__, i2c_info->type);
-                *i2c_bus_nr = AML_I2C_BUS_B;
-            } else {
-                if (!strncmp(str, "i2c_bus_a", 9))
-                    *i2c_bus_nr = AML_I2C_BUS_A;
-                else if (!strncmp(str, "i2c_bus_b", 9))
-                    *i2c_bus_nr = AML_I2C_BUS_B;
-                else if (!strncmp(str, "i2c_bus_ao", 9))
-                    *i2c_bus_nr = AML_I2C_BUS_AO;
-                else
-                    *i2c_bus_nr = AML_I2C_BUS_B;
+                int temp = x;
+                x = y; 
+                y = temp;
             }
+            x *= sensor_pdata[i].acc_negate_x ? -1 : 1;
+            y *= sensor_pdata[i].acc_negate_y ? -1 : 1;
+            z *= sensor_pdata[i].acc_negate_z ? -1 : 1;
+
+            input_report_abs(dev, ABS_X, x);
+            input_report_abs(dev, ABS_Y, y);
+            input_report_abs(dev, ABS_Z, z);
+            input_sync(dev);
+            return;
+        }
+    }
+}
 
+void aml_sensor_report_mag(struct i2c_client *client, struct input_dev *dev, int x, int y, int z)
+{
+    int i;
+    for(i = 0; i < curr_idx; i++)
+    {
+        if(sensor_pdata[i].client && sensor_pdata[i].client == client)
+        { 
 
-            if(gpio) 
+            if(sensor_pdata[i].mag_swap_xy)
             {
-                r = of_property_read_u32(node, "irq",&irq);
-                if(r < 0 || i2c_info->irq <= 0)
-                {
-                    i2c_info->irq = 0;
-                }
-                else
-                {
-                    const char *gpio_str;
-                    i2c_info->irq = irq;
-                    r = of_property_read_string(node, "gpio",&gpio_str);
-                    if(r < 0)
-                    {
-                        printk("%s: faild to get gpio str for dev %s\n", __func__, i2c_info->type);
-                        *gpio = -1; 
-                    }
-                    else
-                    {
-                        *gpio = amlogic_gpio_name_map_num(gpio_str);
-                    }
-                }
+                int temp = x;
+                x = y; 
+                y = temp;
             }
-            else
+            x *= sensor_pdata[i].mag_negate_x ? -1 : 1;
+            y *= sensor_pdata[i].mag_negate_y ? -1 : 1;
+            z *= sensor_pdata[i].mag_negate_z ? -1 : 1;
+
+            input_report_abs(dev, ABS_X, x);
+            input_report_abs(dev, ABS_Y, y);
+            input_report_abs(dev, ABS_Z, z);
+            input_sync(dev);
+            return;
+       }
+   }
+}
+
+void aml_sensor_report_gyr(struct i2c_client *client, struct input_dev *dev, int x, int y, int z)
+{
+    int i;
+    for(i = 0; i < curr_idx; i++)
+    {
+        if(sensor_pdata[i].client && sensor_pdata[i].client == client)
+        { 
+            if(sensor_pdata[i].gyr_swap_xy)
             {
-                i2c_info->irq = 0;
+                int temp = x;
+                x = y; 
+                y = temp;
             }
-        }
+            x *= sensor_pdata[i].gyr_negate_x ? -1 : 1;
+            y *= sensor_pdata[i].gyr_negate_y ? -1 : 1;
+            z *= sensor_pdata[i].gyr_negate_z ? -1 : 1;
+
+            input_report_abs(dev, ABS_X, x);
+            input_report_abs(dev, ABS_Y, y);
+            input_report_abs(dev, ABS_Z, z);
+            input_sync(dev);
+            return;
+         }
     }
-    
-    return ret;
 }
 
-struct platform_device *sensor_dev;
-
 int dt_sensor_setup_i2c_dev(struct device_node *node,  struct i2c_board_info *i2c_info, int *i2c_bus_nr, int *gpio)
 {
         int ret = -1;
@@ -97,7 +95,7 @@ int dt_sensor_setup_i2c_dev(struct device_node *node,  struct i2c_board_info *i2
         int r;
         int irq;
         const char *status;
-
+        u32 acc_dir, mag_dir, gyr_dir;
 
 		r = of_property_read_string(node, "status", &status);
         if(r< 0){
@@ -145,7 +143,33 @@ int dt_sensor_setup_i2c_dev(struct device_node *node,  struct i2c_board_info *i2
                     *i2c_bus_nr = AML_I2C_BUS_B;
             }
 
+            r = of_property_read_u32(node, "acc_dir",&acc_dir);
+            if(!r)
+            {
+                sensor_pdata[curr_idx].acc_negate_x = acc_dir & 0x0001;
+                sensor_pdata[curr_idx].acc_negate_y = acc_dir & 0x0010;
+                sensor_pdata[curr_idx].acc_negate_z = acc_dir & 0x0100;
+                sensor_pdata[curr_idx].acc_swap_xy = acc_dir & 0x1000;
+            }
+
+            r = of_property_read_u32(node, "mag_dir",&mag_dir);
+            if(!r)
+            {
+                sensor_pdata[curr_idx].mag_negate_x = mag_dir & 0x0001;
+                sensor_pdata[curr_idx].mag_negate_y = mag_dir & 0x0010;
+                sensor_pdata[curr_idx].mag_negate_z = mag_dir & 0x0100;
+                sensor_pdata[curr_idx].mag_swap_xy = mag_dir & 0x1000;
+            }
 
+            r = of_property_read_u32(node, "gyo_dir",&gyr_dir);
+            if(!r)
+            {
+                sensor_pdata[curr_idx].gyr_negate_x = gyr_dir & 0x0001;
+                sensor_pdata[curr_idx].gyr_negate_y = gyr_dir & 0x0010;
+                sensor_pdata[curr_idx].gyr_negate_z = gyr_dir & 0x0100;
+                sensor_pdata[curr_idx].gyr_swap_xy = gyr_dir & 0x1000;
+            }
+           
             r = of_property_read_u32(node, "irq",&irq);
             if(r < 0 || irq <= 0)
             {
@@ -175,16 +199,17 @@ int dt_sensor_setup_i2c_dev(struct device_node *node,  struct i2c_board_info *i2
 
 static int aml_sensor_probe(struct platform_device *pdev)
 {
-	printk("##############aml_sensor_probe start############\n");
 	
-	struct device_node* node = pdev->dev.of_node;
 	struct device_node* child;
 	struct i2c_board_info i2c_info;
 	struct i2c_adapter *adapter;
+	struct i2c_client *client;
     int i2c_bus_nr; 
     int gpio;
 
-	sensor_dev = pdev;
+	struct device_node* node = pdev->dev.of_node;
+
+	printk("##############aml_sensor_probe start############\n");
 
 	for_each_child_of_node(node, child) {
 
@@ -201,7 +226,20 @@ static int aml_sensor_probe(struct platform_device *pdev)
             {
                 /* get gpio and set up isr */
             }
-            i2c_new_device(adapter, &i2c_info);
+            sensor_pdata[curr_idx++].client = i2c_new_device(adapter, &i2c_info);
+            if(sensor_pdata[curr_idx-1].client == 0)
+            {
+                pr_err("chris failed to create new i2c dev %s\n", i2c_info.type);
+            }
+            else
+            {
+                pr_info("chris creating i2c dev %s\n", i2c_info.type);
+            }
+            if(curr_idx>=MAX_SENSOR_ONBOARD)
+            {
+               pr_err("%s: Warning!!! Not enough slots in sensor_pdata array\n", __func__);
+               return -1;
+            }
         }
 	}
 	return 0;
@@ -209,7 +247,7 @@ static int aml_sensor_probe(struct platform_device *pdev)
 
 static int aml_sensor_remove(struct platform_device *pdev)
 {
-
+   return 0; 
 }
 
 static const struct of_device_id sensor_prober_dt_match[]={
diff --git a/drivers/amlogic/input/sensor/dmard06.c b/drivers/amlogic/input/sensor/dmard06.c
index e521c36e531a..8e7b1573658f 100644
--- a/drivers/amlogic/input/sensor/dmard06.c
+++ b/drivers/amlogic/input/sensor/dmard06.c
@@ -323,11 +323,7 @@ static void dmard06_report_value(struct i2c_client *client, struct dmard06_axis
 
 	/* Report acceleration sensor information */
 
-	input_report_abs(dmard06->input_dev, ABS_X, axis->x);
-	input_report_abs(dmard06->input_dev, ABS_Y, axis->y);
-
-	input_report_abs(dmard06->input_dev, ABS_Z, axis->z);
-	input_sync(dmard06->input_dev);
+	aml_sensor_report_acc(client, dmard06->input_dev, axis->x, axis->y, axis->z);
 }
 
 #define RawDataLength 4
diff --git a/drivers/amlogic/input/sensor/dmt10.c b/drivers/amlogic/input/sensor/dmt10.c
index a3420e3e8440..2421fe194ab4 100644
--- a/drivers/amlogic/input/sensor/dmt10.c
+++ b/drivers/amlogic/input/sensor/dmt10.c
@@ -578,10 +578,7 @@ static long device_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 				dmtprintk("%s:copy_from_user(&intBuf, (int*)arg, sizeof(intBuf)) ERROR, -EFAULT\n",__func__);			
 				return -EFAULT;
 			}
-			input_report_abs(devdata.input, ABS_X, intBuf[0]);
-			input_report_abs(devdata.input, ABS_Y, intBuf[1]);
-			input_report_abs(devdata.input, ABS_Z, intBuf[2]);
-			input_sync(devdata.input);
+            aml_sensor_report_acc(devdata.client, devdata.input, intBuf[0], intBuf[1], intBuf[2]);
 			dmtprintk(KERN_INFO "%s:SENSOR_SETYPR OK! x=%d,y=%d,z=%d\n",__func__,intBuf[0],intBuf[1],intBuf[2]);
 			return 1;
 		case SENSOR_GET_OPEN_STATUS:
@@ -698,10 +695,9 @@ static void DMT_work_func(struct work_struct *fakework)
 
 	PRINT_X_Y_Z(xyz[0], xyz[1], xyz[2]);
 	PRINT_X_Y_Z(offset.u.x, offset.u.y, offset.u.z);
-	input_report_abs(devdata.input, ABS_X, xyz[0]);
-	input_report_abs(devdata.input, ABS_Y, -xyz[1]);
-	input_report_abs(devdata.input, ABS_Z, -xyz[2]);
-	input_sync(devdata.input);
+
+
+	aml_sensor_report_acc(devdata.client, devdata.input, xyz[0], xyz[1], xyz[2]);
 		
 	if(dmt_delay<1)
 		dmt_delay=1;
diff --git a/drivers/amlogic/input/sensor/kionix_accel.c b/drivers/amlogic/input/sensor/kionix_accel.c
index 0e985e0f6ac6..bb05ed82767c 100644
--- a/drivers/amlogic/input/sensor/kionix_accel.c
+++ b/drivers/amlogic/input/sensor/kionix_accel.c
@@ -383,15 +383,23 @@ static void kionix_accel_grp1_report_accel_data(struct kionix_accel_driver *acce
 				y = ((s16) le16_to_cpu(((s16)(accel_data[acceld->axis_map_y] >> 2)) - 32)) << 6;
 				z = ((s16) le16_to_cpu(((s16)(accel_data[acceld->axis_map_z] >> 2)) - 32)) << 6;
 
+                acceld->accel_data[x] = x;
+                acceld->accel_data[y] = y;
+                acceld->accel_data[z] = z;
+                
+                #if 0
 				acceld->accel_data[acceld->axis_map_x] = (acceld->negate_x ? -x : x) + acceld->accel_cali[acceld->axis_map_x];
 				acceld->accel_data[acceld->axis_map_y] = (acceld->negate_y ? -y : y) + acceld->accel_cali[acceld->axis_map_y];
 				acceld->accel_data[acceld->axis_map_z] = (acceld->negate_z ? -z : z) + acceld->accel_cali[acceld->axis_map_z];
-
+                #endif
 				if(atomic_read(&acceld->accel_input_event) > 0) {
+                    aml_sensor_report_acc(acceld->client, acceld->input_dev, x, y, z);
+                    #if 0
 					input_report_abs(acceld->input_dev, ABS_X, acceld->accel_data[acceld->axis_map_x]);
 					input_report_abs(acceld->input_dev, ABS_Y, acceld->accel_data[acceld->axis_map_y]);
 					input_report_abs(acceld->input_dev, ABS_Z, acceld->accel_data[acceld->axis_map_z]);
 					input_sync(acceld->input_dev);
+                    #endif
 				}
 
 				write_unlock(&acceld->rwlock_accel_data);
@@ -540,16 +548,23 @@ static void kionix_accel_grp2_report_accel_data(struct kionix_accel_driver *acce
 				x = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_x])) >> acceld->shift;
 				y = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_y])) >> acceld->shift;
 				z = ((s16) le16_to_cpu(accel_data.accel_data_s16[acceld->axis_map_z])) >> acceld->shift;
-
+#if 0
 				acceld->accel_data[acceld->axis_map_x] = (acceld->negate_x ? -x : x) + acceld->accel_cali[acceld->axis_map_x];
 				acceld->accel_data[acceld->axis_map_y] = (acceld->negate_y ? -y : y) + acceld->accel_cali[acceld->axis_map_y];
 				acceld->accel_data[acceld->axis_map_z] = (acceld->negate_z ? -z : z) + acceld->accel_cali[acceld->axis_map_z];
-
+#endif
+                acceld->accel_data[0] = x;
+                acceld->accel_data[1] = y;
+                acceld->accel_data[2] = z;
+                
 				if(atomic_read(&acceld->accel_input_event) > 0) {
+                    aml_sensor_report_acc(acceld->client, acceld->input_dev, x, y, z);
+                #if 0
 					input_report_abs(acceld->input_dev, ABS_X, acceld->accel_data[acceld->axis_map_x]);
 					input_report_abs(acceld->input_dev, ABS_Y, acceld->accel_data[acceld->axis_map_y]);
 					input_report_abs(acceld->input_dev, ABS_Z, acceld->accel_data[acceld->axis_map_z]);
 					input_sync(acceld->input_dev);
+                #endif
 				}
 
 				write_unlock(&acceld->rwlock_accel_data);
diff --git a/drivers/amlogic/input/sensor/lis3dh_acc.c b/drivers/amlogic/input/sensor/lis3dh_acc.c
index a8f1778a7d33..21157536adb6 100644
--- a/drivers/amlogic/input/sensor/lis3dh_acc.c
+++ b/drivers/amlogic/input/sensor/lis3dh_acc.c
@@ -778,10 +778,7 @@ static void lis3dh_acc_report_values(struct lis3dh_acc_status *stat,
      if(stat->debug_flag)
 	      printk("%s read x=%d, y=%d, z=%d\n", LIS3DH_ACC_DEV_NAME, xyz[0], xyz[1], xyz[2]);
 
-	input_report_abs(stat->input_dev, ABS_X, -xyz[1]);
-	input_report_abs(stat->input_dev, ABS_Y, -xyz[0]);
-	input_report_abs(stat->input_dev, ABS_Z, -xyz[2]);
-	input_sync(stat->input_dev);
+    aml_sensor_report_acc(stat->client, stat->input_dev, xyz[0], xyz[1], xyz[2]);
 }
 
 static int lis3dh_acc_enable(struct lis3dh_acc_status *stat)
diff --git a/drivers/amlogic/input/sensor/lsm303d.c b/drivers/amlogic/input/sensor/lsm303d.c
index 5b4f9d9029ad..1ee6fb960edc 100644
--- a/drivers/amlogic/input/sensor/lsm303d.c
+++ b/drivers/amlogic/input/sensor/lsm303d.c
@@ -1595,19 +1595,12 @@ static int lsm303d_mag_get_data(struct lsm303d_status *stat, int *xyz)
 
 static void lsm303d_acc_report_values(struct lsm303d_status *stat, int *xyz)
 {
-	input_report_abs(stat->input_dev_acc, ABS_X, xyz[0]);
-	input_report_abs(stat->input_dev_acc, ABS_Y, xyz[1]);
-	input_report_abs(stat->input_dev_acc, ABS_Z, xyz[2]);
-	input_sync(stat->input_dev_acc);
-
+    aml_sensor_report_acc(stat->client, stat->input_dev_acc, xyz[0], xyz[1], xyz[2]);
 }
 
 static void lsm303d_mag_report_values(struct lsm303d_status *stat, int *xyz)
 {
-	input_report_abs(stat->input_dev_mag, ABS_X, xyz[0]);
-	input_report_abs(stat->input_dev_mag, ABS_Y, xyz[1]);
-	input_report_abs(stat->input_dev_mag, ABS_Z, xyz[2]);
-	input_sync(stat->input_dev_mag);
+    aml_sensor_report_acc(stat->client, stat->input_dev_mag, xyz[0], xyz[1], xyz[2]);
 }
 
 static void lsm303d_acc_input_work_func(struct work_struct *work)
diff --git a/drivers/amlogic/input/sensor/mc32x0.c b/drivers/amlogic/input/sensor/mc32x0.c
index 3a25c31aaca5..ee70c8df7572 100644
--- a/drivers/amlogic/input/sensor/mc32x0.c
+++ b/drivers/amlogic/input/sensor/mc32x0.c
@@ -417,15 +417,8 @@ static void report_abs(void)
 	for(i=0; i<3; i++)
 		mc32x0_read_xyz(i, &xyz[i]);
 
-	y = -xyz[0];
-	x = xyz[1];
-	z = xyz[2];
 
-
-	input_report_abs(mc32x0_idev->input, ABS_X, x);
-	input_report_abs(mc32x0_idev->input, ABS_Y, y);
-	input_report_abs(mc32x0_idev->input, ABS_Z, z);
-	input_sync(mc32x0_idev->input);
+    aml_sensor_report_acc(mc32x0_i2c_client, mc32x0_idev->input, x, y, z);
 	mutex_unlock(&sensor_lock);
 
 }
diff --git a/drivers/amlogic/input/sensor/mm3a310.c b/drivers/amlogic/input/sensor/mm3a310.c
index 94ae61f45d99..8123ce9612cf 100644
--- a/drivers/amlogic/input/sensor/mm3a310.c
+++ b/drivers/amlogic/input/sensor/mm3a310.c
@@ -1585,10 +1585,8 @@ static void report_abs(void)
     input_sync(mm3a310_idev->input);
 
 #else
-   input_report_abs(mm3a310_idev->input, ABS_X, x);
-    input_report_abs(mm3a310_idev->input, ABS_Y, y);
-    input_report_abs(mm3a310_idev->input, ABS_Z, z);
-    input_sync(mm3a310_idev->input); //Synchronous
+
+    aml_sensor_report_acc(mm3a310_i2c_client, mm3a310_idev->input, x, y, z);
 
 #endif
 
diff --git a/drivers/amlogic/input/sensor/mma7660.c b/drivers/amlogic/input/sensor/mma7660.c
index 84098fd6a325..1c8b1e3cc350 100644
--- a/drivers/amlogic/input/sensor/mma7660.c
+++ b/drivers/amlogic/input/sensor/mma7660.c
@@ -797,11 +797,10 @@ static void report_abs(void)
 	}
 
 #endif
-        input_report_abs(mma7660_idev->input, ABS_X, data.x);
-        input_report_abs(mma7660_idev->input, ABS_Y, data.y);
-        input_report_abs(mma7660_idev->input, ABS_Z, data.z);
+
+
         
-        input_sync(mma7660_idev->input);
+        aml_sensor_report_acc(mma7660_i2c_client, mma7660_idev->input, data.x, data.y, data.z);
 
         if(dbg_level)
             printk(KERN_INFO"case 2: mma7660 sensor data (%d, %d, %d)\n", data.x, data.y, data.z);
diff --git a/drivers/amlogic/input/sensor/mma8452.c b/drivers/amlogic/input/sensor/mma8452.c
index 14db267f12e0..a710e4861a6f 100644
--- a/drivers/amlogic/input/sensor/mma8452.c
+++ b/drivers/amlogic/input/sensor/mma8452.c
@@ -198,10 +198,9 @@ static void mma8452_work_func(struct work_struct *work)
 	unsigned long delay = msecs_to_jiffies(atomic_read(&mma8452->delay));
 
 	if (mma8452_read_accel_xyz(mma8452->mma8452_client, &acc) == 0) {
-		input_report_abs(mma8452->input, ABS_X, acc.x);
-		input_report_abs(mma8452->input, ABS_Y, acc.y);
-		input_report_abs(mma8452->input, ABS_Z, acc.z);
-		input_sync(mma8452->input);
+
+        aml_sensor_report_acc(mma8452->mma8452_client, mma8452->input, acc.x, acc.y, acc.z);    
+
 		mutex_lock(&mma8452->value_mutex);
 		mma8452->value = acc;
 		mutex_unlock(&mma8452->value_mutex);
diff --git a/drivers/amlogic/input/sensor/mma865x.c b/drivers/amlogic/input/sensor/mma865x.c
index 939ba573b440..96f2ca76018b 100644
--- a/drivers/amlogic/input/sensor/mma865x.c
+++ b/drivers/amlogic/input/sensor/mma865x.c
@@ -160,6 +160,26 @@ static int mma865x_position_setting[8][3][3] =
 
 static int mma865x_data_convert(struct mma865x_data* pdata,struct mma865x_data_axis *axis_data)
 {
+#if 0
+    int flag;
+    short temp;
+
+    sensor_pdata_t *p = pdata->client->dev.platform_data;
+    if(!p)
+    {
+       return 0;
+    }
+    if(p->acc_swap_xy)
+    {
+        temp = axis_data->x;
+        axis_data->x = axis_data->y; 
+        axis_data->y = temp;
+    }
+    axis_data->x *= p->acc_negate_x ? -1 : 1;
+    axis_data->y *= p->acc_negate_y ? -1 : 1;
+    axis_data->z *= p->acc_negate_z ? -1 : 1;
+   
+#else
    short rawdata[3],data[3];
    int i,j;
    int position = pdata->position ;
@@ -175,6 +195,7 @@ static int mma865x_data_convert(struct mma865x_data* pdata,struct mma865x_data_a
    axis_data->x = data[0];
    axis_data->y = data[1];
    axis_data->z = data[2];
+#endif
    return 0;
 }
 static char * mma865x_id2name(u8 id){
@@ -245,15 +266,13 @@ static void mma865x_report_data(struct mma865x_data* pdata)
 	if (mma865x_read_data(pdata->client,&data) != 0)
 		goto out;
     mma865x_data_convert(pdata,&data);
-	input_report_abs(poll_dev->input, ABS_X, data.x);
-	input_report_abs(poll_dev->input, ABS_Y, data.y);
-	input_report_abs(poll_dev->input, ABS_Z, data.z);
+
+    aml_sensor_report_acc(pdata->client,poll_dev->input, data.x, data.y, data.z);
 
 	if (enable_dbg) {
 			printk("xyz(%d,%d,%d)\n", data.x, data.y, data.z);
 	}
 
-	input_sync(poll_dev->input);
 out:
 	mutex_unlock(&pdata->data_lock);
 }
@@ -415,6 +434,9 @@ static int mma865x_probe(struct i2c_client *client,
 	struct mma865x_data *pdata;
 	struct i2c_adapter *adapter;
 	struct input_polled_dev *poll_dev;
+
+
+    pr_info(" ######################### chris probing 865x");
 	adapter = to_i2c_adapter(client->dev.parent);
 	result = i2c_check_functionality(adapter,
 					 I2C_FUNC_SMBUS_BYTE |
diff --git a/drivers/amlogic/input/sensor/mxc622x.c b/drivers/amlogic/input/sensor/mxc622x.c
index 1c261a3d7bab..d1baafdb5a85 100644
--- a/drivers/amlogic/input/sensor/mxc622x.c
+++ b/drivers/amlogic/input/sensor/mxc622x.c
@@ -40,6 +40,7 @@
 #endif
 
 #include <linux/sensor/mxc622x.h>
+#include <linux/sensor/sensor_common.h>
 
 #define WHOAMI_MXC622X_ACC	0x25	/*	Expctd content for WAI	*/
 
@@ -275,10 +276,8 @@ static int mxc622x_acc_get_acceleration_data(struct mxc622x_acc_data *acc,
 
 static void mxc622x_acc_report_values(struct mxc622x_acc_data *acc, int *xyz)
 {
-	input_report_abs(acc->input_dev, ABS_X, xyz[0]);
-	input_report_abs(acc->input_dev, ABS_Y, xyz[1]);
-	input_report_abs(acc->input_dev, ABS_Z, xyz[2]);
-	input_sync(acc->input_dev);
+
+	aml_sensor_report_acc(acc->client, acc->input_dev, xyz[0], xyz[1], xyz[2]);
 }
 
 static int mxc622x_acc_enable(struct mxc622x_acc_data *acc)
diff --git a/drivers/amlogic/input/sensor/stk831x.c b/drivers/amlogic/input/sensor/stk831x.c
index 8c4931da57d1..c0600fc489c9 100644
--- a/drivers/amlogic/input/sensor/stk831x.c
+++ b/drivers/amlogic/input/sensor/stk831x.c
@@ -36,6 +36,7 @@
 #include <linux/workqueue.h>
 #include <linux/fcntl.h>
 #include <linux/syscalls.h>
+#include <linux/sensor/sensor_common.h>
 //#include <linux/time.h>
 
 //#define CONFIG_GRAVITY_STK8312
@@ -945,10 +946,7 @@ static int STK831x_ReportValue(struct stk831x_data *stk)
 	printk(KERN_INFO "%s:%4d,%4d,%4d\n", __func__, stk->raw_data[0], 
 		stk->raw_data[1], stk->raw_data[2]);	
 #endif	
-	input_report_abs(stk->input_dev, ABS_X, stk->raw_data[0]);  
-	input_report_abs(stk->input_dev, ABS_Y, stk->raw_data[1]);
-	input_report_abs(stk->input_dev, ABS_Z, stk->raw_data[2]);
-	input_sync(stk->input_dev);
+	aml_sensor_report_acc(this_client, stk->input_dev, stk->raw_data[0], stk->raw_data[1],stk->raw_data[2] );  
 	return 0;
 }
 
diff --git a/include/linux/sensor/sensor_common.h b/include/linux/sensor/sensor_common.h
index 96c30e73f66f..aabc745152f7 100644
--- a/include/linux/sensor/sensor_common.h
+++ b/include/linux/sensor/sensor_common.h
@@ -5,4 +5,27 @@
 
 int sensor_setup_i2c_dev(struct i2c_board_info *i2c_info, int *i2c_bus_nr, int *gpio);
 
+typedef struct _pdata
+{
+    struct i2c_client *client;
+    int acc_negate_x;
+    int acc_negate_y;
+    int acc_negate_z;
+    int acc_swap_xy;
+
+    int mag_negate_x;
+    int mag_negate_y;
+    int mag_negate_z;
+    int mag_swap_xy;
+
+    int gyr_negate_x;
+    int gyr_negate_y;
+    int gyr_negate_z;
+    int gyr_swap_xy;
+}sensor_pdata_t;
+
+void aml_sensor_report_acc(struct i2c_client *client, struct input_dev *dev, int x, int y, int z);
+void aml_sensor_report_mag(struct i2c_client *client, struct input_dev *dev, int x, int y, int z);
+void aml_sensor_report_gyr(struct i2c_client *client, struct input_dev *dev, int x, int y, int z);
+
 #endif
-- 
2.19.0

