From 0d544165a5532e6256dc3683f40257b74664de9a Mon Sep 17 00:00:00 2001
From: "chunhai.guo" <chunhai.guo@amlogic.com>
Date: Tue, 5 Nov 2013 21:23:25 +0800
Subject: [PATCH 1718/5965] 1. add card_type configuration in dt. 2. fix emmc
 resume crc7 error problem.

---
 arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd |   8 +-
 arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd |   4 +
 arch/arm/boot/dts/amlogic/meson8_k200_1G.dtd |   4 +
 arch/arm/boot/dts/amlogic/meson8_k200_v1.dtd |   4 +
 arch/arm/boot/dts/amlogic/meson8_skt.dtd     |   6 +-
 arch/arm/mach-meson8/include/mach/sd.h       |  16 +++
 drivers/amlogic/mmc/aml.dtd                  |   8 +-
 drivers/amlogic/mmc/aml_sdio.c               | 142 +++++++++++++------
 drivers/amlogic/mmc/amlsd_of.c               |   1 +
 9 files changed, 147 insertions(+), 46 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
index 89c8fc10e5d2..1dca27792832 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
@@ -406,6 +406,7 @@ sdio{
 //$$ L2 PROP_STR = "gpio_cd"
 //$$ L2 PROP_U32 = "irq_in"
 //$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
         sd{
             status = "okay";
             port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -420,6 +421,7 @@ sdio{
             gpio_cd = "CARD_6";
             irq_in = <3>;
             irq_out = <5>;
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="emmc"
@@ -433,6 +435,7 @@ sdio{
 //$$ L3 PROP_U32 = "f_max_w"
 //$$ L3 PROP_U32 = "max_req_size"
 //$$ L2 PROP_STR = "gpio_dat3"       	
+//$$ L2 PROP_U32 = "card_type"
         emmc{
             status = "ok";
             port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -444,6 +447,7 @@ sdio{
             f_max_w = <50000000>;
             max_req_size = <0x20000>;          /**128KB*/
             gpio_dat3 = "BOOT_3";
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="sdio"
@@ -454,7 +458,8 @@ sdio{
 //$$ L2 PROP_STR 4 = "caps"
 //$$ L3 PROP_U32 = "f_min"
 //$$ L3 PROP_U32 = "f_max"
-//$$ L3 PROP_U32 = "max_req_size"        
+//$$ L3 PROP_U32 = "max_req_size"    
+//$$ L2 PROP_U32 = "card_type"    
         sdio{
           status = "okay";
           port = <0>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -464,6 +469,7 @@ sdio{
           f_min = <300000>;
           f_max = <30000000>;
           max_req_size = <0x20000>;          /**128KB*/
+          card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
     };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
index 52a0864b3fb6..ed076d4fa4d7 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
@@ -371,6 +371,7 @@ sdio{
 //$$ L2 PROP_STR = "gpio_cd"
 //$$ L2 PROP_U32 = "irq_in"
 //$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
         sd{
             status = "okay";
             port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -385,6 +386,7 @@ sdio{
             gpio_cd = "CARD_6";
             irq_in = <3>;
             irq_out = <5>;
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="emmc"
@@ -398,6 +400,7 @@ sdio{
 //$$ L3 PROP_U32 = "f_max_w"
 //$$ L3 PROP_U32 = "max_req_size"
 //$$ L2 PROP_STR = "gpio_dat3"       	
+//$$ L2 PROP_U32 = "card_type"
         emmc{
             status = "ok";
             port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -409,6 +412,7 @@ sdio{
             f_max_w = <50000000>;
             max_req_size = <0x20000>;          /**128KB*/
             gpio_dat3 = "BOOT_3";
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
     };
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k200_1G.dtd
index 3308f8fedc2c..d16070d95e6e 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200_1G.dtd
@@ -382,6 +382,7 @@ sdio{
 //$$ L2 PROP_STR = "gpio_cd"
 //$$ L2 PROP_U32 = "irq_in"
 //$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
         sd{
             status = "okay";
             port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -396,6 +397,7 @@ sdio{
             gpio_cd = "CARD_6";
             irq_in = <3>;
             irq_out = <5>;
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="emmc"
@@ -409,6 +411,7 @@ sdio{
 //$$ L3 PROP_U32 = "f_max_w"
 //$$ L3 PROP_U32 = "max_req_size"
 //$$ L2 PROP_STR = "gpio_dat3"       	
+//$$ L2 PROP_U32 = "card_type"
         emmc{
             status = "ok";
             port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -420,6 +423,7 @@ sdio{
             f_max_w = <50000000>;
             max_req_size = <0x20000>;          /**128KB*/
             gpio_dat3 = "BOOT_3";
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
     };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k200_v1.dtd
index cf9931397a42..916c929389b5 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200_v1.dtd
@@ -381,6 +381,7 @@ sdio{
 //$$ L2 PROP_STR = "gpio_cd"
 //$$ L2 PROP_U32 = "irq_in"
 //$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
         sd{
             status = "okay";
             port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -395,6 +396,7 @@ sdio{
             gpio_cd = "CARD_6";
             irq_in = <3>;
             irq_out = <5>;
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="emmc"
@@ -408,6 +410,7 @@ sdio{
 //$$ L3 PROP_U32 = "f_max_w"
 //$$ L3 PROP_U32 = "max_req_size"
 //$$ L2 PROP_STR = "gpio_dat3"       	
+//$$ L2 PROP_U32 = "card_type"
         emmc{
             status = "ok";
             port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -419,6 +422,7 @@ sdio{
             f_max_w = <50000000>;
             max_req_size = <0x20000>;          /**128KB*/
             gpio_dat3 = "BOOT_3";
+            card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
     };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_skt.dtd b/arch/arm/boot/dts/amlogic/meson8_skt.dtd
index 02416686dfff..effe33d830cf 100755
--- a/arch/arm/boot/dts/amlogic/meson8_skt.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_skt.dtd
@@ -361,6 +361,7 @@ void root_func(){
 //$$ L2 PROP_STR = "gpio_cd"
 //$$ L2 PROP_U32 = "irq_in"
 //$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
         sd{
             status = "okay";
             port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -376,6 +377,7 @@ void root_func(){
             gpio_cd = "CARD_6";
             irq_in = <3>;
             irq_out = <5>;
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="emmc"
@@ -388,7 +390,8 @@ void root_func(){
 //$$ L3 PROP_U32 = "f_max"
 //$$ L3 PROP_U32 = "f_max_w"
 //$$ L3 PROP_U32 = "max_req_size"
-//$$ L2 PROP_STR = "gpio_dat3"       	
+//$$ L2 PROP_STR = "gpio_dat3"
+//$$ L2 PROP_U32 = "card_type"
         emmc{
             status = "ok";
             port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -400,6 +403,7 @@ void root_func(){
             f_max_w = <50000000>;
             max_req_size = <0x20000>;          /**128KB*/
             gpio_dat3 = "BOOT_3";
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
     };
 
diff --git a/arch/arm/mach-meson8/include/mach/sd.h b/arch/arm/mach-meson8/include/mach/sd.h
index 381c2061531c..5fd4a65afda5 100755
--- a/arch/arm/mach-meson8/include/mach/sd.h
+++ b/arch/arm/mach-meson8/include/mach/sd.h
@@ -77,6 +77,22 @@ struct amlsd_platform {
     unsigned int gpio_dat3;
     unsigned int jtag_pin;
     int is_sduart;
+
+    /* we used this flag to filter some unnecessary cmd before initialized flow */
+    bool is_fir_init; // has been initialized for the first time
+    unsigned int card_type; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+#define CARD_TYPE_UNKNOWN           0        /* unknown */
+#define CARD_TYPE_MMC               1        /* MMC card */
+#define CARD_TYPE_SD                2        /* SD card */
+#define CARD_TYPE_SDIO              3        /* SDIO card */
+#define CARD_TYPE_SD_COMBO          4        /* SD combo (IO+mem) card */
+#define CARD_TYPE_NON_SDIO          5        /* NON sdio device (means SD/MMC card) */
+#define aml_card_type_unknown(c)    ((c)->card_type == CARD_TYPE_UNKNOWN)
+#define aml_card_type_mmc(c)        ((c)->card_type == CARD_TYPE_MMC)
+#define aml_card_type_sd(c)         ((c)->card_type == CARD_TYPE_SD)
+#define aml_card_type_sdio(c)       ((c)->card_type == CARD_TYPE_SDIO)
+#define aml_card_type_non_sdio(c)   ((c)->card_type == CARD_TYPE_NON_SDIO)
+
     // struct pinctrl *uart_ao_pinctrl;
 	void (*irq_init)(struct amlsd_platform* pdata);
 
diff --git a/drivers/amlogic/mmc/aml.dtd b/drivers/amlogic/mmc/aml.dtd
index 5262843ec4d1..3040f6086952 100755
--- a/drivers/amlogic/mmc/aml.dtd
+++ b/drivers/amlogic/mmc/aml.dtd
@@ -40,6 +40,7 @@ sdio{
 //$$ L2 PROP_STR = "gpio_cd"
 //$$ L2 PROP_U32 = "irq_in"
 //$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
         sd{
             status = "okay";
             port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -55,6 +56,7 @@ sdio{
             gpio_cd = "CARD_6";
             irq_in = <3>;
             irq_out = <5>;
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="emmc"
@@ -68,6 +70,7 @@ sdio{
 //$$ L3 PROP_U32 = "f_max_w"
 //$$ L3 PROP_U32 = "max_req_size"
 //$$ L2 PROP_STR = "gpio_dat3"       	
+//$$ L2 PROP_U32 = "card_type"
         emmc{
             status = "ok";
             port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -79,6 +82,7 @@ sdio{
             f_max_w = <50000000>;
             max_req_size = <0x20000>;          /**128KB*/
             gpio_dat3 = "BOOT_3";
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
 
 //$$ DEVICE="sdio"
@@ -89,7 +93,8 @@ sdio{
 //$$ L2 PROP_STR 4 = "caps"
 //$$ L3 PROP_U32 = "f_min"
 //$$ L3 PROP_U32 = "f_max"
-//$$ L3 PROP_U32 = "max_req_size"        
+//$$ L3 PROP_U32 = "max_req_size"    
+//$$ L2 PROP_U32 = "card_type"    
         sdio{
           status = "okay";
           port = <0>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
@@ -99,6 +104,7 @@ sdio{
           f_min = <300000>;
           f_max = <30000000>;
           max_req_size = <0x20000>;          /**128KB*/
+          card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         };
     };
 #endif
diff --git a/drivers/amlogic/mmc/aml_sdio.c b/drivers/amlogic/mmc/aml_sdio.c
index 8ace964288a2..ee88e02fc658 100755
--- a/drivers/amlogic/mmc/aml_sdio.c
+++ b/drivers/amlogic/mmc/aml_sdio.c
@@ -16,6 +16,7 @@
 #include <linux/mmc/host.h>
 #include <linux/io.h>
 #include <linux/mmc/mmc.h>
+#include <linux/mmc/sd.h>
 #include <linux/mmc/sdio.h>
 #include <linux/highmem.h>
 #include <linux/slab.h>
@@ -289,6 +290,33 @@ void aml_sdio_request_done(struct mmc_host *mmc, struct mmc_request *mrq)
     mmc_request_done(host->mmc, mrq);
 }
 
+static void aml_sdio_print_err (struct amlsd_host *host, char *msg)
+{
+    struct amlsd_platform * pdata = mmc_priv(host->mmc);
+    u32 virqs = readl(host->base + SDIO_IRQS);
+    u32 virqc = readl(host->base + SDIO_IRQC);
+    u32 vconf = readl(host->base + SDIO_CONF);
+    struct sdio_config* conf = (void*)&vconf;
+
+    sdio_err("%s: %s, Cmd%d arg %08x Xfer %d Bytes, "
+            "host->xfer_step=%d, host->cmd_is_stop=%d, pdata->port=%d, "
+            "virqs=%#0x, virqc=%#0x, conf->cmd_clk_divide=%#x, pdata->clkc=%d, "
+            "conf->bus_width=%d, pdata->width=%d\n",
+            mmc_hostname(host->mmc),
+            msg,
+            host->mrq->cmd->opcode,
+            host->mrq->cmd->arg,
+            host->mrq->data?host->mrq->data->blksz*host->mrq->data->blocks:0,
+            host->xfer_step,
+            host->cmd_is_stop,
+            pdata->port,
+            virqs, virqc,
+            conf->cmd_clk_divide,
+            pdata->clkc,
+            conf->bus_width,
+            pdata->width);    
+}
+
 /*setup delayed workstruct in aml_sdio_request*/
 static void aml_sdio_timeout(struct work_struct *data)
 {
@@ -300,9 +328,6 @@ static void aml_sdio_timeout(struct work_struct *data)
     struct sdio_status_irq* irqs = (void*)&virqs;
     u32 virqc =readl(host->base + SDIO_IRQC);
     struct sdio_irq_config* irqc = (void*)&virqc;
-    struct amlsd_platform * pdata = mmc_priv(host->mmc);
-    u32 vconf;
-    struct sdio_config* conf;
 
     spin_lock_irqsave(&host->mrq_lock, flags);
 	if(host->xfer_step == XFER_FINISHED){
@@ -328,36 +353,19 @@ static void aml_sdio_timeout(struct work_struct *data)
     irqc->arc_cmd_int_en = 0;   // disable cmd irq
     writel(virqc, host->base + SDIO_IRQC);
 
-    vconf = readl(host->base + SDIO_CONF);
-    conf = (void*)&vconf;
-    sdio_err("%s: Timeout Cmd%d arg %08x Xfer %d Bytes, "
-            "host->xfer_step=%d, host->cmd_is_stop=%d, pdata->port=%d, "
-            "virqs=%#0x, virqc=%#0x, conf->cmd_clk_divide=%#x, pdata->clkc=%d, "
-            "conf->bus_width=%d, pdata->width=%d\n",
-            mmc_hostname(host->mmc),
-            host->mrq->cmd->opcode,
-            host->mrq->cmd->arg,
-            host->mrq->data?host->mrq->data->blksz*host->mrq->data->blocks:0,
-            host->xfer_step,
-            host->cmd_is_stop,
-            pdata->port,
-            virqs, virqc,
-            conf->cmd_clk_divide,
-            pdata->clkc,
-            conf->bus_width,
-            pdata->width);
+    aml_sdio_print_err(host, "Timeout error");
     // if (pdata->port == MESON_SDIO_PORT_A) {
         // sdio_err("power_on_pin=%d\n",
                 // amlogic_get_value(185, "sdio_wifi")); // G24-113, G33-185
     // }
-    if (pdata->port == MESON_SDIO_PORT_B) {
-#ifdef CONFIG_ARCH_MESON6
-        if ((pdata->port == MESON_SDIO_PORT_B) && (pdata->gpio_power != 0))
-            sdio_err("power_on_pin=%d\n", amlogic_get_value(pdata->gpio_power, MODULE_NAME));
-#endif
-        aml_dbg_print_pinmux();
-        aml_sdio_print_reg(host);
-    }
+    // if (pdata->port == MESON_SDIO_PORT_B) {
+// #ifdef CONFIG_ARCH_MESON6
+        // if ((pdata->port == MESON_SDIO_PORT_B) && (pdata->gpio_power != 0))
+            // sdio_err("power_on_pin=%d\n", amlogic_get_value(pdata->gpio_power, MODULE_NAME));
+// #endif
+        // aml_dbg_print_pinmux();
+        // aml_sdio_print_reg(host);
+    // }
 
     host->xfer_step = XFER_TIMEDOUT;
 
@@ -382,21 +390,69 @@ static void aml_sdio_timeout(struct work_struct *data)
 	// sdio_err("Timeout out func\n");
 }
 
-#define     PORT_SDIO           PORT_SDIO_A // SDIO devices(for SDIO-WIFI)
-#define     PORT_BLOCK          PORT_SDIO_B // Block devices(for SD/MMC card)
-#define     PORT_BASE           PORT_SDIO_C // Base block device (for TSD/eMMC)
+
+int aml_cmd_invalid (struct mmc_host* mmc, struct mmc_request* mrq)
+{
+	// struct amlsd_platform * pdata = mmc_priv(mmc);
+
+    // sdio_err("%s: filter cmd%d, card_type=%d\n", mmc_hostname(mmc), mrq->cmd->opcode, pdata->card_type);
+    mrq->cmd->error = -EINVAL;
+    mmc_request_done(mmc, mrq);
+
+    return -EINVAL;
+}
+
 /*sdio controller does not support wifi now, return*/
 int aml_sdio_check_unsupport_cmd(struct mmc_host* mmc, struct mmc_request* mrq)
 {
 	struct amlsd_platform * pdata = mmc_priv(mmc);
 
-    if ((pdata->port != PORT_SDIO) && (mrq->cmd->opcode == SD_IO_SEND_OP_COND ||
-        mrq->cmd->opcode == SD_IO_RW_DIRECT ||
-        mrq->cmd->opcode == SD_IO_RW_EXTENDED)) {
-        mrq->cmd->error = -EINVAL;
-        mmc_request_done(mmc, mrq);
-        return -EINVAL;
+    // if ((pdata->port != PORT_SDIO) && (mrq->cmd->opcode == SD_IO_SEND_OP_COND ||
+    // mrq->cmd->opcode == SD_IO_RW_DIRECT ||
+    // mrq->cmd->opcode == SD_IO_RW_EXTENDED)) {
+    // mrq->cmd->error = -EINVAL;
+    // mmc_request_done(mmc, mrq);
+    // return -EINVAL;
+    // } 
+
+    if (mrq->cmd->opcode == 3) { // CMD3 means the first time initialized flow is running
+		pdata->is_fir_init = false;
+    }
+
+    if ((pdata->is_fir_init) && (mmc->caps & MMC_CAP_NONREMOVABLE)) { // init for the first time
+        if (aml_card_type_sdio(pdata)) {
+            if (mrq->cmd->opcode == SD_IO_RW_DIRECT
+                    || mrq->cmd->opcode == SD_IO_RW_EXTENDED
+                    || mrq->cmd->opcode == SD_SEND_IF_COND) { // filter cmd 52/53/8 for a sdio device before init
+                return aml_cmd_invalid(mmc, mrq);
+            }
+        } else if (aml_card_type_mmc(pdata)) {
+            if (mrq->cmd->opcode == SD_IO_SEND_OP_COND
+                    || mrq->cmd->opcode == SD_IO_RW_DIRECT
+                    || mrq->cmd->opcode == SD_IO_RW_EXTENDED
+                    || mrq->cmd->opcode == SD_SEND_IF_COND
+                    || mrq->cmd->opcode == MMC_APP_CMD) { // filter cmd 5/52/53/8/55 for an mmc device before init
+                return aml_cmd_invalid(mmc, mrq);
+            }
+        } else if (aml_card_type_sd(pdata) || aml_card_type_non_sdio(pdata)) {
+            if (mrq->cmd->opcode == SD_IO_SEND_OP_COND
+                    || mrq->cmd->opcode == SD_IO_RW_DIRECT
+                    || mrq->cmd->opcode == SD_IO_RW_EXTENDED) { // filter cmd 5/52/53 for a sd card before init
+                return aml_cmd_invalid(mmc, mrq);
+            }
+        }
+    } else {
+        // filter cmd 5/52/53 for a non-sdio & nonremovable device
+        if (!(mmc->caps & MMC_CAP_NONREMOVABLE) 
+                && (!aml_card_type_sdio(pdata) && !aml_card_type_unknown(pdata))) {
+            if (mrq->cmd->opcode == SD_IO_SEND_OP_COND
+                    || mrq->cmd->opcode == SD_IO_RW_DIRECT
+                    || mrq->cmd->opcode == SD_IO_RW_EXTENDED) {
+                return aml_cmd_invalid(mmc, mrq);
+            }
+        }
     }
+    // sdio_err("%s: cmd%d, card_type=%d\n", mmc_hostname(mmc), mrq->cmd->opcode, pdata->card_type);
     return 0;
 }
 
@@ -588,8 +644,7 @@ irqreturn_t aml_sdio_irq_thread(int irq, void *data)
             mrq->cmd->error = 0;
         else {
             mrq->cmd->error = -EILSEQ;
-            sdio_err("%s CMD%u, arg %08x, cmd crc7 error\n",
-                    mmc_hostname(host->mmc), host->mrq->cmd->opcode, host->arg);
+            aml_sdio_print_err(host, "cmd crc7 error");
         }
 		spin_unlock_irqrestore(&host->mrq_lock, flags);
         aml_sdio_request_done(host->mmc, mrq);
@@ -598,8 +653,7 @@ irqreturn_t aml_sdio_irq_thread(int irq, void *data)
             mrq->cmd->error = 0;
         else {
             mrq->cmd->error = -EILSEQ;
-            sdio_err("%s CMD%u, arg %08x, data crc16 error\n",
-                    mmc_hostname(host->mmc), host->mrq->cmd->opcode, host->arg);
+            aml_sdio_print_err(host, "data crc16 error");
         }
         mrq->data->bytes_xfered = mrq->data->blksz*mrq->data->blocks;
 		spin_unlock_irqrestore(&host->mrq_lock, flags);
@@ -851,7 +905,8 @@ static int aml_sdio_resume(struct platform_device *pdev)
 
 	printk("***Entered %s:%s\n", __FILE__,__func__);
 	list_for_each_entry(pdata, &host->sibling, sibling){
-        if(pdata->port == MESON_SDIO_PORT_A) { // sdio_wifi
+        // if(pdata->port == MESON_SDIO_PORT_A) { // sdio_wifi
+        if(aml_card_type_sdio(pdata)) {
             wifi_setup_dt();
         }
 		mmc = pdata->mmc;
@@ -966,6 +1021,7 @@ static int aml_sdio_probe(struct platform_device *pdev)
         // host->pdata = pdata; // should not do this here, it will conflict with aml_sdio_request
         // host->mmc = mmc;
 		pdata->mmc = mmc;
+		pdata->is_fir_init = true;
 
 		mmc->index = i;
 		mmc->ops = &aml_sdio_ops;
diff --git a/drivers/amlogic/mmc/amlsd_of.c b/drivers/amlogic/mmc/amlsd_of.c
index 7c398390d991..2a869f67bbf4 100755
--- a/drivers/amlogic/mmc/amlsd_of.c
+++ b/drivers/amlogic/mmc/amlsd_of.c
@@ -178,6 +178,7 @@ int amlsd_get_platform_data(struct platform_device* pdev,
         SD_PARSE_GPIO_NUM_PROP(child, "gpio_dat3", str, pdata->gpio_dat3);
 		SD_PARSE_STRING_PROP(child, "pinname", str, pdata->pinname);
         SD_PARSE_GPIO_NUM_PROP(child, "jtag_pin", str, pdata->jtag_pin);
+		SD_PARSE_U32_PROP(child, "card_type", prop, pdata->card_type);
 
 		pdata->port_init = of_amlsd_init;
 		pdata->pwr_pre = of_amlsd_pwr_prepare;
-- 
2.19.0

