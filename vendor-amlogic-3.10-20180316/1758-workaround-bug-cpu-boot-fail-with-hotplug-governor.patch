From 85f10d8cec84cfb548deb0f8fc1325c222d46b51 Mon Sep 17 00:00:00 2001
From: "yan.wang" <yan.wang@amlogic.com>
Date: Thu, 7 Nov 2013 16:23:24 +0800
Subject: [PATCH 1758/5965] workaround bug: cpu boot fail with hotplug governor

---
 arch/arm/mach-meson8/board-meson8-common.c |  3 ++
 arch/arm/mach-meson8/smp.c                 | 34 ++++++++++++++++++++++
 2 files changed, 37 insertions(+)

diff --git a/arch/arm/mach-meson8/board-meson8-common.c b/arch/arm/mach-meson8/board-meson8-common.c
index e03482974fc0..f9971afede4c 100755
--- a/arch/arm/mach-meson8/board-meson8-common.c
+++ b/arch/arm/mach-meson8/board-meson8-common.c
@@ -48,6 +48,7 @@ static void meson_map_board_io(void);
 extern unsigned long long aml_reserved_start;
 extern unsigned long long aml_reserved_end;
 extern void __init meson_timer_init(void);
+void backup_cpu_entry_code(void);
 
 static __init void meson8_reserve(void)
 {
@@ -95,6 +96,7 @@ static __init void meson_init_machine_devicetree(void)
 #ifdef CONFIG_OF_LM
 	of_lm_populate(NULL,m8_of_lm_bus_ids,NULL,NULL);
 #endif
+
 }
 
 int meson_cache_of_init(void);
@@ -120,6 +122,7 @@ static __init void meson_init_early(void)
 static void __init meson_init_irq(void)
 {
 	meson_init_gic_irq();
+	backup_cpu_entry_code();
 }
 static const char *m8_common_board_compat[] __initdata = {
 	"AMLOGIC,8726_M8",
diff --git a/arch/arm/mach-meson8/smp.c b/arch/arm/mach-meson8/smp.c
index 3417e191aaf6..befeff2d65bf 100755
--- a/arch/arm/mach-meson8/smp.c
+++ b/arch/arm/mach-meson8/smp.c
@@ -29,11 +29,44 @@
 
 static DEFINE_SPINLOCK(boot_lock);
 
+static unsigned int cpu_entry_code[16];
 /*
  * Write pen_release in a way that is guaranteed to be visible to all
  * observers, irrespective of whether they're taking part in coherency
  * or not.  This is necessary for the hotplug code to work reliably.
  */
+void __init backup_cpu_entry_code(void)
+{
+	unsigned int* p = 0xc0000000;
+	unsigned int i;
+	unsigned int count = sizeof(cpu_entry_code)/sizeof(cpu_entry_code[0]);
+	for(i=0; i<count; i++)
+		cpu_entry_code[i] = p[i];
+}
+
+static void check_and_rewrite_cpu_entry(void)
+{
+	unsigned int i;
+	unsigned int *p=0xc0000000;
+	int changed=0;
+	unsigned int count=sizeof(cpu_entry_code)/sizeof(cpu_entry_code[0]);
+	for(i=0; i<count; i++){
+		if(cpu_entry_code[i] != p[i]){
+			changed=1;
+			break;
+		}
+	}
+	if(changed != 0){
+		printk("!!!CPU boot warning: cpu entry code has been changed!\n");
+		for(i=0, p=0xc0000000; i<count; i++)
+			p[i]=cpu_entry_code[i];
+
+		smp_wmb();
+		__cpuc_flush_dcache_area((void *)p, sizeof(cpu_entry_code));
+		outer_clean_range(__pa(p), __pa(p+count));
+	}
+}
+
 static void write_pen_release(int val)
 {
 	pen_release = val;
@@ -97,6 +130,7 @@ int __cpuinit meson_boot_secondary(unsigned int cpu, struct task_struct *idle)
 	printk("write pen_release: %d\n",cpu_logical_map(cpu));
 	write_pen_release(cpu_logical_map(cpu));
 
+	check_and_rewrite_cpu_entry();
 	meson_set_cpu_power_ctrl(cpu, 1);
 	meson_secondary_set(cpu);
 	dsb_sev();
-- 
2.19.0

