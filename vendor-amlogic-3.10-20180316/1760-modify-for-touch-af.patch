From 35653e29e72586886aa2136d81f44c908937a8f7 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Thu, 7 Nov 2013 17:32:22 +0800
Subject: [PATCH 1760/5965] modify for touch af.

---
 drivers/amlogic/tvin/isp/isp_drv.c |  8 ++++----
 drivers/amlogic/tvin/isp/isp_drv.h |  3 ++-
 drivers/amlogic/tvin/isp/isp_hw.c  |  3 ++-
 drivers/amlogic/tvin/isp/isp_sm.c  | 15 ++++++++-------
 4 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index e7650890bffa..f5f53a96857b 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -866,10 +866,10 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 		        break;
                 case CAM_COMMAND_TOUCH_WINDOW:
 			devp->isp_af_parm = &param->xml_scenes->af;
-			x0 = devp->isp_af_parm->x - devp->isp_af_parm->radius>>1;
-			y0 = devp->isp_af_parm->y - devp->isp_af_parm->radius>>1;
-			x1 = x0 + devp->isp_af_parm->radius;
-			y1 = y0 + devp->isp_af_parm->radius;
+			x0 = devp->isp_af_parm->x>devp->isp_af_parm->radius?devp->isp_af_parm->x-devp->isp_af_parm->radius:0;
+			y0 = devp->isp_af_parm->y>devp->isp_af_parm->radius?devp->isp_af_parm->y>devp->isp_af_parm->radius:0;
+			x1 = devp->isp_af_parm->x + devp->isp_af_parm->radius;
+			y1 = devp->isp_af_parm->y + devp->isp_af_parm->radius;
 			isp_set_blenr_stat(x0,y0,x1,y1);
 			devp->flag |= (ISP_FLAG_AF|ISP_FLAG_TOUCH_AF);
 			af_sm_init(devp);
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index dea4fb5f2d18..85ba8d0285bd 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -28,7 +28,7 @@
 #include "isp_hw.h"
 #include "../tvin_frontend.h"
 
-#define ISP_VER					"2013.11.07a"
+#define ISP_VER					"2013.11.07b"
 #define ISP_NUM					1
 #define DEVICE_NAME 			        "isp"
 
@@ -92,6 +92,7 @@ typedef struct af_debug_test_s {
 } af_debug_test_t;
 
 typedef struct isp_af_info_s {
+	unsigned int flag_bk;
 	unsigned int great_step;
 	unsigned int cur_step;
 	unsigned int cur_index;
diff --git a/drivers/amlogic/tvin/isp/isp_hw.c b/drivers/amlogic/tvin/isp/isp_hw.c
index bf1a6ea1aefb..e6455f410cb7 100755
--- a/drivers/amlogic/tvin/isp/isp_hw.c
+++ b/drivers/amlogic/tvin/isp/isp_hw.c
@@ -270,7 +270,8 @@ void isp_set_blenr_stat(unsigned int x0,unsigned int y0,unsigned int x1,unsigned
 	}
 	#endif
 	/*set lpf according to sd or hd*/
-	if((y1-y0) > 720)
+	WR_BITS(ISP_BLNR_CTRL,0,BLNR_STATISTICS_EN_BIT,BLNR_STATISTICS_EN_WID);
+	if(abs(y1-y0) > 720)
 		WR_BITS(ISP_BLNR_CTRL,3,BLNR_LPF_MODE_BIT,BLNR_LPF_MODE_WID);
 	else
 		WR_BITS(ISP_BLNR_CTRL,1,BLNR_LPF_MODE_BIT,BLNR_LPF_MODE_WID);
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index cfc0824d3bf6..9ecab922006d 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -128,6 +128,7 @@ void isp_sm_init(isp_dev_t *devp)
 	sm_state.isp_ae_parm.isp_ae_enh_state = AE_ENH_INIT;
 	sm_state.isp_awb_parm.isp_awb_state = AWB_INIT;
 	sm_state.env = ENV_NULL;
+	sm_state.ae_down = true;
 	/*init for af*/
 	/*init for wave*/
 	sm_state.cap_sm.fr_time = devp->wave->flash_rising_time;
@@ -137,6 +138,8 @@ void isp_sm_init(isp_dev_t *devp)
 void af_sm_init(isp_dev_t *devp)
 {
 	/*init for af*/
+	if(sm_state.af_state)
+		devp->flag |= devp->af_info.flag_bk;
 	if(devp->flag & ISP_FLAG_TOUCH_AF){
     	sm_state.af_state = AF_INIT;
 		devp->af_info.f = devp->af_info.af_data;
@@ -144,7 +147,6 @@ void af_sm_init(isp_dev_t *devp)
 		sm_state.af_state = AF_DETECT_INIT;
 		devp->af_info.f = devp->af_info.af_detect;
 	}
-	
 	devp->af_info.fv_aft_af = 0;
 	devp->af_info.fv_bf_af = 0;
 }
@@ -996,7 +998,6 @@ void isp_af_sm(isp_dev_t *devp)
 	struct xml_algorithm_af_s *af_alg = devp->isp_af_parm;
 	struct isp_af_info_s *af_info = &devp->af_info;
 	struct isp_af_sm_s *sm = &sm_state.af_sm;
-	static unsigned int flag = 0;
 	unsigned long long fv_delta;
 	af_delay++;
 	
@@ -1004,9 +1005,9 @@ void isp_af_sm(isp_dev_t *devp)
 		case AF_INIT:
 			if((devp->flag&ISP_FLAG_AE)&&(sm_state.ae_down)){
 			/*awb brake,ae brake*/
-			flag = (devp->flag&ISP_FLAG_AWB)+(devp->flag&ISP_FLAG_AE);
+			af_info->flag_bk = (devp->flag&ISP_FLAG_AWB)+(devp->flag&ISP_FLAG_AE);
 			if(af_sm_dg&0x1)
-				pr_info("%s:ae,awb flag status 0x%x.\n",__func__,flag);
+				pr_info("%s:ae,awb flag status 0x%x.\n",__func__,af_info->flag_bk);
 			devp->flag &=(~ISP_FLAG_AWB);
 			devp->flag &=(~ISP_FLAG_AE);
 			af_info->f = af_info->af_data;
@@ -1072,13 +1073,13 @@ void isp_af_sm(isp_dev_t *devp)
 					pr_info("[af_sm..]:fv_delta %llu,fv_bf_af %llu.\n",fv_delta,af_info->fv_bf_af);
 				}
 				if((fv_delta > af_info->fv_bf_af)&&(af_alg->af_retry_cnt++ < af_alg->af_retry_max)){
-					sm_state.af_state = AF_INIT;
+					sm_state.af_state = AF_GET_OLD_FV;
 					if(af_sm_dg&0x4)
 						pr_info("[af_sm..]:fail ratio %u,%u times,return to af init retry.\n",af_alg->af_fail_ratio,af_alg->af_retry_cnt);
 				} else if((fv_delta > af_info->fv_bf_af)&&(af_alg->af_retry_cnt > af_alg->af_retry_max)){
 		        	/*af failed over max times,force to step 0*/
 		                        /*enable awb,enable af*/
-				        devp->flag |=flag;
+				        devp->flag |= af_info->flag_bk;
 					af_info->cur_step = 0;
 					atomic_set(&af_info->writeable,1);
 					if(af_sm_dg&0x4)
@@ -1087,7 +1088,7 @@ void isp_af_sm(isp_dev_t *devp)
 					sm_state.af_state = AF_NULL;
 				} else {/*af success*/
 					/*enable awb,enable af*/
-				        devp->flag |=flag;
+				        devp->flag |= af_info->flag_bk;
 					af_alg->af_retry_cnt = 0;
 					sm_state.af_state = AF_NULL;
 				}
-- 
2.19.0

