From 7899f40c00a36c8449b236595029f6a50d3ed4d8 Mon Sep 17 00:00:00 2001
From: "qi.duan" <qi.duan@amlogic.com>
Date: Fri, 8 Nov 2013 15:23:21 +0800
Subject: [PATCH 1778/5965] add wake_lock when gadget is connected

---
 .../usb/dwc_otg/310/dwc_otg_pcd_linux.c       |  2 --
 drivers/usb/gadget/android.c                  | 30 +++++++++++++++++++
 drivers/usb/gadget/composite.c                |  5 ++--
 include/linux/usb/composite.h                 |  4 ++-
 include/linux/usb/gadget.h                    |  1 +
 5 files changed, 37 insertions(+), 5 deletions(-)
 mode change 100644 => 100755 drivers/usb/gadget/android.c
 mode change 100644 => 100755 drivers/usb/gadget/composite.c
 mode change 100644 => 100755 include/linux/usb/composite.h
 mode change 100644 => 100755 include/linux/usb/gadget.h

diff --git a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_pcd_linux.c b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_pcd_linux.c
index f6e490ba4bb4..33438da11e40 100755
--- a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_pcd_linux.c
+++ b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_pcd_linux.c
@@ -1327,12 +1327,10 @@ void pcd_remove(
 #ifdef CONFIG_HAS_EARLYSUSPEND
 int get_pcd_ums_state(dwc_otg_pcd_t *pcd)
 {
-#if 0
 	if(gadget_wrapper &&
 		(pcd == gadget_wrapper->pcd) &&
 		gadget_wrapper->gadget.priv_data)
 		return *(int *)gadget_wrapper->gadget.priv_data;
-#endif
 	return 0;
 }
 #endif
diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
old mode 100644
new mode 100755
index d0ec54b810c1..7354202dea38
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -150,6 +150,31 @@ static struct usb_configuration android_config_driver = {
 	.MaxPower	= 500, /* 500ma */
 };
 
+/* adjust the wake_lock to change action for system suspend */
+static void adjust_gadget_wake_lock(struct wake_lock *pwake_lock, int islock)
+{
+	struct usb_composite_dev *cdev = container_of(pwake_lock,struct usb_composite_dev,wake_lock);
+
+	/* if disconnect to pc, we should unlock the android lock */
+	if(islock == -1){
+		pr_info("%s unlock\n",__func__);
+		cdev->is_lock = 0;
+		wake_unlock(pwake_lock);
+		return;
+	}
+
+	if(!islock && cdev->is_lock && !--cdev->is_lock){
+		pr_info("%s unlock\n",__func__);
+		wake_unlock(pwake_lock);
+	}
+	else if(islock){
+		pr_info("%s lock\n",__func__);
+		wake_lock(pwake_lock);
+		cdev->is_lock++;
+	}
+}
+
+
 static void android_work(struct work_struct *data)
 {
 	struct android_dev *dev = container_of(data, struct android_dev, work);
@@ -166,6 +191,11 @@ static void android_work(struct work_struct *data)
 	else if (dev->connected != dev->sw_connected)
 		uevent_envp = dev->connected ? connected : disconnected;
 	dev->sw_connected = dev->connected;
+	if(!dev->connected)
+		adjust_gadget_wake_lock(&cdev->wake_lock,-1);
+	else if(uevent_envp == configured)
+		adjust_gadget_wake_lock(&cdev->wake_lock, 1);
+
 	spin_unlock_irqrestore(&cdev->lock, flags);
 
 	if (uevent_envp) {
diff --git a/drivers/usb/gadget/composite.c b/drivers/usb/gadget/composite.c
old mode 100644
new mode 100755
index f9e397556669..7d27bc1f4664
--- a/drivers/usb/gadget/composite.c
+++ b/drivers/usb/gadget/composite.c
@@ -1532,7 +1532,7 @@ static void __composite_unbind(struct usb_gadget *gadget, bool unbind_driver)
 		cdev->driver->unbind(cdev);
 
 	composite_dev_cleanup(cdev);
-
+	wake_lock_destroy(&cdev->wake_lock);
 	kfree(cdev->def_manufacturer);
 	kfree(cdev);
 	set_gadget_data(gadget, NULL);
@@ -1653,13 +1653,14 @@ static int composite_bind(struct usb_gadget *gadget,
 	cdev = kzalloc(sizeof *cdev, GFP_KERNEL);
 	if (!cdev)
 		return status;
-
+        gadget->priv_data = &cdev->is_lock;
 	spin_lock_init(&cdev->lock);
 	cdev->gadget = gadget;
 	set_gadget_data(gadget, cdev);
 	INIT_LIST_HEAD(&cdev->configs);
 	INIT_LIST_HEAD(&cdev->gstrings);
 
+       wake_lock_init(&cdev->wake_lock, WAKE_LOCK_SUSPEND,  "usb_composite");
 	status = composite_dev_prepare(composite, cdev);
 	if (status)
 		goto fail;
diff --git a/include/linux/usb/composite.h b/include/linux/usb/composite.h
old mode 100644
new mode 100755
index 5e61589fc166..37f38d27ce38
--- a/include/linux/usb/composite.h
+++ b/include/linux/usb/composite.h
@@ -40,7 +40,7 @@
 #include <linux/usb/gadget.h>
 #include <linux/log2.h>
 #include <linux/configfs.h>
-
+#include <linux/wakelock_android.h>
 /*
  * USB function drivers should return USB_GADGET_DELAYED_STATUS if they
  * wish to delay the data/status stages of the control transfer till they
@@ -394,6 +394,8 @@ struct usb_composite_dev {
 
 	/* protects deactivations and delayed_status counts*/
 	spinlock_t			lock;
+	int is_lock;
+	struct wake_lock wake_lock;
 };
 
 extern int usb_string_id(struct usb_composite_dev *c);
diff --git a/include/linux/usb/gadget.h b/include/linux/usb/gadget.h
old mode 100644
new mode 100755
index f1b0dca60f12..3efa0c2c1f80
--- a/include/linux/usb/gadget.h
+++ b/include/linux/usb/gadget.h
@@ -537,6 +537,7 @@ struct usb_gadget {
 	struct device			dev;
 	unsigned			out_epnum;
 	unsigned			in_epnum;
+	void *   priv_data;
 };
 
 static inline void set_gadget_data(struct usb_gadget *gadget, void *data)
-- 
2.19.0

