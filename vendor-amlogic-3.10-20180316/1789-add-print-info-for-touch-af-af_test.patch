From ab0079801b256ea6a3bb3a3a8c2c0c26978873c3 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Fri, 8 Nov 2013 19:42:24 +0800
Subject: [PATCH 1789/5965] add print info for touch af&af_test.

---
 drivers/amlogic/tvin/isp/isp_drv.c | 36 ++++++++++++++----------------
 drivers/amlogic/tvin/isp/isp_drv.h |  2 +-
 drivers/amlogic/tvin/isp/isp_sm.c  | 20 ++++++++++++-----
 3 files changed, 32 insertions(+), 26 deletions(-)

diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index 0dcbbd38d743..ba20bf83b44e 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -51,7 +51,7 @@ static unsigned int ae_enable = 1;
 static unsigned int awb_enable = 1;
 static unsigned int af_enable = 1;
 static unsigned int af_pr = 0;
-
+static unsigned int ioctl_debug = 0;
 static volatile unsigned int ae_flag = 0;
 static volatile unsigned int ae_new_step = 60;
 extern struct isp_ae_to_sensor_s ae_sens;
@@ -239,24 +239,15 @@ static ssize_t af_debug_store(struct device *dev,struct device_attribute *attr,
 		devp->flag |= ISP_TEST_FOR_AF_WIN;
 	}else if(!strcmp(parm[0],"af_print")){
 		int i = 0;
-		/*unsigned long long sum_ac,sum_dc;
-		pr_info("sum_ac sum_dc win0_dc win1_dc win2_dc win3_dc win4_dc win5_dc\n");
-		for(i=0;i<devp->af_test.cnt;i++){
-			sum_ac  = (unsigned long long)devp->af_test.af_bl[i].ac[0];
-			sum_ac += (unsigned long long)devp->af_test.af_bl[i].ac[1];
-			sum_ac += (unsigned long long)devp->af_test.af_bl[i].ac[2];
-			sum_ac += (unsigned long long)devp->af_test.af_bl[i].ac[3];
-			sum_dc  = (unsigned long long)devp->af_test.af_bl[i].dc[0];
-			sum_dc  = (unsigned long long)devp->af_test.af_bl[i].dc[0];
-			sum_dc += (unsigned long long)devp->af_test.af_bl[i].dc[1];
-			sum_dc += (unsigned long long)devp->af_test.af_bl[i].dc[2];
-			sum_dc += (unsigned long long)devp->af_test.af_bl[i].dc[3];
-			pr_info("%llu %llu %u %u %u %u %u\n",sum_ac,sum_dc,devp->af_test.af_win[i].luma_win[0],
-					devp->af_test.af_win[i].luma_win[2],devp->af_test.af_win[i].luma_win[4],devp->af_test.af_win[i].luma_win[6],
-					devp->af_test.af_win[i].luma_win[8]);
-		}*/
+		unsigned long long sum_ac,sum_dc;
+		pr_info("ac0 ac1 ac2 ac3 dc0 dc1 dc2 dc3 ");
 		pr_info("win0 win1 win2 win3 win4 win5 win6 win7 win8 win9 win10 win11 win12 win13 win14 win15\n");
 		for(i=0;i<devp->af_test.cnt;i++){
+			pr_info("%u %u %u %u %u %u %u %u ", devp->af_test.af_bl[i].ac[0],
+					devp->af_test.af_bl[i].ac[1],devp->af_test.af_bl[i].ac[2],
+					devp->af_test.af_bl[i].ac[3],devp->af_test.af_bl[i].dc[0],
+					devp->af_test.af_bl[i].dc[1],devp->af_test.af_bl[i].dc[2],
+					devp->af_test.af_bl[i].dc[3]);
 			pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u\n",devp->af_test.ae_win[i].luma_win[0],
 				devp->af_test.ae_win[i].luma_win[1],devp->af_test.ae_win[i].luma_win[2],
 				devp->af_test.ae_win[i].luma_win[3],devp->af_test.ae_win[i].luma_win[4],
@@ -266,6 +257,7 @@ static ssize_t af_debug_store(struct device *dev,struct device_attribute *attr,
 				devp->af_test.ae_win[i].luma_win[11],devp->af_test.ae_win[i].luma_win[12],
 				devp->af_test.ae_win[i].luma_win[13],devp->af_test.ae_win[i].luma_win[14],
 				devp->af_test.ae_win[i].luma_win[15]);
+			msleep(1);
 		}
 		kfree(devp->af_test.af_bl);
 		kfree(devp->af_test.af_win);
@@ -819,7 +811,7 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
         }
 	cmd = param->cam_command;
 	devp->cam_param = param;
-	if(isp_debug)	 	
+	if(ioctl_debug)	 	
 	 	pr_info("[%s..]%s:cmd: %s .\n",DEVICE_NAME,__func__,cam_cmd_to_str(cmd));	 
 	switch(cmd) {
                 case CAM_COMMAND_INIT:
@@ -871,9 +863,12 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
                 case CAM_COMMAND_TOUCH_WINDOW:
 			devp->isp_af_parm = &param->xml_scenes->af;
 			x0 = devp->isp_af_parm->x>devp->isp_af_parm->radius?devp->isp_af_parm->x-devp->isp_af_parm->radius:0;
-			y0 = devp->isp_af_parm->y>devp->isp_af_parm->radius?devp->isp_af_parm->y>devp->isp_af_parm->radius:0;
+			y0 = devp->isp_af_parm->y>devp->isp_af_parm->radius?devp->isp_af_parm->y-devp->isp_af_parm->radius:0;
 			x1 = devp->isp_af_parm->x + devp->isp_af_parm->radius;
 			y1 = devp->isp_af_parm->y + devp->isp_af_parm->radius;
+			if(ioctl_debug)
+				pr_info("focus win: center(%u,%u) left(%u %u) right(%u,%u).\n",devp->isp_af_parm->x,
+					devp->isp_af_parm->y,x0,y0,x1,y1);
 			isp_set_blenr_stat(x0,y0,x1,y1);
 			devp->flag |= (ISP_FLAG_AF|ISP_FLAG_TOUCH_AF);
 			af_sm_init(devp);
@@ -1201,6 +1196,9 @@ MODULE_PARM_DESC(af_pr,"\n debug flag for af print.\n");
 module_param(ae_new_step,uint,0664);
 MODULE_PARM_DESC(ae_new_step,"\n debug flag for ae_new_step.\n");
 
+module_param(ioctl_debug,uint,0664);
+MODULE_PARM_DESC(ioctl_debug,"\n debug ioctl function.\n");
+
 MODULE_VERSION(ISP_VER);
 module_init(isp_init_module);
 module_exit(isp_exit_module);
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index 85ba8d0285bd..94f4d124bc96 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -28,7 +28,7 @@
 #include "isp_hw.h"
 #include "../tvin_frontend.h"
 
-#define ISP_VER					"2013.11.07b"
+#define ISP_VER					"2013.11.08a"
 #define ISP_NUM					1
 #define DEVICE_NAME 			        "isp"
 
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index 9ecab922006d..c90192afee9b 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -90,9 +90,9 @@ MODULE_PARM_DESC(awb_debug4,"\n debug flag for awb.\n");
 #define AF_FLAG_AE			0x00000002
 #define AF_FLAG_AWB			0x00000004
 
+static unsigned int best_step_debug = 0;
+
 static unsigned int af_sm_dg = 0;
-module_param(af_sm_dg,uint,0664);
-MODULE_PARM_DESC(af_sm_dg,"\n debug flag for auto focus.\n");
 
 
 volatile struct isp_ae_to_sensor_s ae_sens;
@@ -854,14 +854,16 @@ unsigned int get_best_step(isp_blnr_stat_t *blnr,unsigned int *step)
         unsigned int i = 0, cur_grid = 0, max_grid = 0, best_step = 0;
         unsigned long long sum_ac = 0, sum_dc = 0, mul_ac = 0, fv[FOCUS_GRIDS], max_fv = 0, moment = 0, sum_fv = 0;
 
+		if(best_step_debug)				
+			pr_info("%s ac[0] ac[1] ac[2] ac[3] dc[0] dc[1] dc[2] dc[3]\n", __func__);
         for (i = 0; i < FOCUS_GRIDS; i++){
                 if (i && (step[i]==0)){
                         break;
                 }
                 max_grid = i;
                 fv[i] = get_fv_base_blnr(&blnr[i]);
-	        if(af_sm_dg&0x1)
-                        pr_info("%s ac:%u %u %u %u dc:%u %u %u %u\n", __func__, blnr[i].ac[0], blnr[i].ac[1], blnr[i].ac[2], blnr[i].ac[3], blnr[i].dc[0], blnr[i].dc[1], blnr[i].dc[2], blnr[i].dc[3]);
+	        if(best_step_debug)
+                        pr_info("%s %u %u %u %u %u %u %u %u\n", __func__, blnr[i].ac[0], blnr[i].ac[1], blnr[i].ac[2], blnr[i].ac[3], blnr[i].dc[0], blnr[i].dc[1], blnr[i].dc[2], blnr[i].dc[3]);
                 if (max_fv < fv[i]){
 		        max_fv = fv[i];
 		        cur_grid = i;
@@ -899,6 +901,8 @@ unsigned int get_best_step(isp_blnr_stat_t *blnr,unsigned int *step)
                 sum_fv += fv[cur_grid + 2];
                 best_step = (unsigned int)div64(moment,sum_fv);
 	}
+	if(best_step_debug)
+		pr_info("%s:get best step %u.\n",__func__,best_step);
 	return best_step;
 }
 static unsigned int jitter = 5;
@@ -1040,8 +1044,6 @@ void isp_af_sm(isp_dev_t *devp)
 		case AF_CALC_GREAT:
 			af_info->great_step = get_best_step(af_info->af_data,af_alg->step);
 			af_info->cur_step = af_info->great_step - af_alg->jump_offset;
-			if(af_sm_dg&0x1)
-				pr_info("%s:get best step %u.\n",__func__,af_info->great_step);
 			atomic_set(&af_info->writeable,1);
 			af_delay = 0;
 			sm_state.af_state = AF_GET_FINE_INFO;
@@ -1659,4 +1661,10 @@ void isp_awb_sm(isp_dev_t *devp)
 		isp_awb_base_sm(devp);
 }
 
+module_param(best_step_debug,uint,0664);
+MODULE_PARM_DESC(best_step_debug,"\n debug flag for calc best focus position.\n");
+
+module_param(af_sm_dg,uint,0664);
+MODULE_PARM_DESC(af_sm_dg,"\n debug flag for auto focus.\n");
+
 
-- 
2.19.0

