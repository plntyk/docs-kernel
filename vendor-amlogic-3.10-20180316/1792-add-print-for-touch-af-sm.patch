From 2a473046baf8c66fb150b83d3030bb577247f9c6 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Fri, 8 Nov 2013 23:03:35 +0800
Subject: [PATCH 1792/5965] add print for touch af sm.

---
 drivers/amlogic/camera/ov5647.c    |  2 +-
 drivers/amlogic/tvin/isp/isp_drv.c | 32 ++++++++++++++++--------------
 drivers/amlogic/tvin/isp/isp_sm.c  | 18 ++++++++++++-----
 3 files changed, 31 insertions(+), 21 deletions(-)

diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index 9381f0ed4819..35bab940c050 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -2266,7 +2266,7 @@ static int set_focus_zone(struct ov5647_device *dev, int value)
 	
 	dev->cam_para->xml_scenes->af.x = tx;
 	dev->cam_para->xml_scenes->af.y = ty;	
-	dev->cam_para->xml_scenes->af.radius = 40;
+	dev->cam_para->xml_scenes->af.radius = (ov5647_v_active>>5);
 	dev->cam_para->xml_scenes->af.detect_step = 16;
 	dev->cam_para->xml_scenes->af.deta_ave_ratio = 10;
 	dev->cam_para->xml_scenes->af.af_fail_ratio = 20;
diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index ba20bf83b44e..8d01c2a3e7ab 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -240,23 +240,25 @@ static ssize_t af_debug_store(struct device *dev,struct device_attribute *attr,
 	}else if(!strcmp(parm[0],"af_print")){
 		int i = 0;
 		unsigned long long sum_ac,sum_dc;
-		pr_info("ac0 ac1 ac2 ac3 dc0 dc1 dc2 dc3 ");
+		pr_info("ac0 ac1 ac2 ac3 dc0 dc1 dc2 dc3\n");
+		for(i=0;i<devp->af_test.cnt;i++){
+			pr_info("%u %u %u %u %u %u %u %u\n", devp->af_test.af_bl[i].ac[0],
+				devp->af_test.af_bl[i].ac[1],devp->af_test.af_bl[i].ac[2],
+				devp->af_test.af_bl[i].ac[3],devp->af_test.af_bl[i].dc[0],
+				devp->af_test.af_bl[i].dc[1],devp->af_test.af_bl[i].dc[2],
+				devp->af_test.af_bl[i].dc[3]);
+		}		
 		pr_info("win0 win1 win2 win3 win4 win5 win6 win7 win8 win9 win10 win11 win12 win13 win14 win15\n");
 		for(i=0;i<devp->af_test.cnt;i++){
-			pr_info("%u %u %u %u %u %u %u %u ", devp->af_test.af_bl[i].ac[0],
-					devp->af_test.af_bl[i].ac[1],devp->af_test.af_bl[i].ac[2],
-					devp->af_test.af_bl[i].ac[3],devp->af_test.af_bl[i].dc[0],
-					devp->af_test.af_bl[i].dc[1],devp->af_test.af_bl[i].dc[2],
-					devp->af_test.af_bl[i].dc[3]);
-			pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u\n",devp->af_test.ae_win[i].luma_win[0],
-				devp->af_test.ae_win[i].luma_win[1],devp->af_test.ae_win[i].luma_win[2],
-				devp->af_test.ae_win[i].luma_win[3],devp->af_test.ae_win[i].luma_win[4],
-				devp->af_test.ae_win[i].luma_win[5],devp->af_test.ae_win[i].luma_win[6],
-				devp->af_test.ae_win[i].luma_win[7],devp->af_test.ae_win[i].luma_win[8],
-				devp->af_test.ae_win[i].luma_win[9],devp->af_test.ae_win[i].luma_win[10],
-				devp->af_test.ae_win[i].luma_win[11],devp->af_test.ae_win[i].luma_win[12],
-				devp->af_test.ae_win[i].luma_win[13],devp->af_test.ae_win[i].luma_win[14],
-				devp->af_test.ae_win[i].luma_win[15]);
+			pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u\n",
+				devp->af_test.ae_win[i].luma_win[0],devp->af_test.ae_win[i].luma_win[1],
+				devp->af_test.ae_win[i].luma_win[2],devp->af_test.ae_win[i].luma_win[3],
+				devp->af_test.ae_win[i].luma_win[4],devp->af_test.ae_win[i].luma_win[5],
+				devp->af_test.ae_win[i].luma_win[6],devp->af_test.ae_win[i].luma_win[7],
+				devp->af_test.ae_win[i].luma_win[8],devp->af_test.ae_win[i].luma_win[9],
+				devp->af_test.ae_win[i].luma_win[10],devp->af_test.ae_win[i].luma_win[11],
+				devp->af_test.ae_win[i].luma_win[12],devp->af_test.ae_win[i].luma_win[13],
+				devp->af_test.ae_win[i].luma_win[14],devp->af_test.ae_win[i].luma_win[15]);
 			msleep(1);
 		}
 		kfree(devp->af_test.af_bl);
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index b86ace74e499..255645f21728 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -1005,7 +1005,7 @@ void isp_af_sm(isp_dev_t *devp)
 		case AF_INIT:
 			if((devp->flag&ISP_FLAG_AE)&&(sm_state.ae_down)){
 			/*awb brake,ae brake*/
-			af_info->flag_bk = (devp->flag&ISP_FLAG_AWB)+(devp->flag&ISP_FLAG_AE);
+			af_info->flag_bk = (devp->flag&ISP_FLAG_AWB)|(devp->flag&ISP_FLAG_AE);
 			if(af_sm_dg&0x1)
 				pr_info("%s:ae,awb flag status 0x%x.\n",__func__,af_info->flag_bk);
 			devp->flag &=(~ISP_FLAG_AWB);
@@ -1021,6 +1021,9 @@ void isp_af_sm(isp_dev_t *devp)
 			break;
 		case AF_GET_OLD_FV:
 			af_info->fv_bf_af = get_fv_base_blnr(&af_info->af_data[af_info->cur_index]);
+			if(af_sm_dg&0x1){
+				pr_info("[af_sm..]:fv_bf_af %llu.\n",af_info->fv_bf_af);
+			}
 			af_info->cur_index = 0;
 			af_info->cur_step = af_alg->step[af_info->cur_index];
 			atomic_set(&af_info->writeable,1);
@@ -1030,6 +1033,7 @@ void isp_af_sm(isp_dev_t *devp)
 		case AF_GET_COARSE_INFO:
 			if((af_info->cur_index >= FOCUS_GRIDS)||(af_alg->step[af_info->cur_index]==0)){
 				sm_state.af_state = AF_CALC_GREAT;
+				af_info->cur_index = 0;
 			} else if((atomic_read(&af_info->writeable) <= 0)&&(af_delay >= af_alg->field_delay)){
 				af_info->cur_step = af_alg->step[af_info->cur_index];
 				af_info->cur_index++;
@@ -1067,12 +1071,12 @@ void isp_af_sm(isp_dev_t *devp)
 				fv_delta = fv_delta*100;
 				fv_delta = div64(fv_delta,af_alg->af_fail_ratio);
 				/*af failed return to af init,retry*/
-				if(af_sm_dg&0x4){
-					pr_info("[af_sm..]:fv_delta %llu,fv_bf_af %llu.\n",fv_delta,af_info->fv_bf_af);
+				if(af_sm_dg&0x1){
+					pr_info("[af_sm..]:fv_delta %llu,fv_aft_af %llu.\n",fv_delta,af_info->fv_aft_af);
 				}
 				if((fv_delta > af_info->fv_bf_af)&&(af_alg->af_retry_cnt++ < af_alg->af_retry_max)){
 					sm_state.af_state = AF_GET_OLD_FV;
-					if(af_sm_dg&0x4)
+					if(af_sm_dg&0x1)
 						pr_info("[af_sm..]:fail ratio %u,%u times,return to af init retry.\n",af_alg->af_fail_ratio,af_alg->af_retry_cnt);
 				} else if((fv_delta > af_info->fv_bf_af)&&(af_alg->af_retry_cnt > af_alg->af_retry_max)){
 		        	/*af failed over max times,force to step 0*/
@@ -1080,14 +1084,18 @@ void isp_af_sm(isp_dev_t *devp)
 				        devp->flag |= af_info->flag_bk;
 					af_info->cur_step = 0;
 					atomic_set(&af_info->writeable,1);
-					if(af_sm_dg&0x4)
+					if(af_sm_dg&0x1)
 						pr_info("[af_sm..]:fail ratio %u over,force to step 0.\n",af_alg->af_fail_ratio);
 					af_alg->af_retry_cnt = 0;
+					devp->flag &=(~ISP_FLAG_AF);
+					devp->flag &=(~ISP_FLAG_TOUCH_AF);
 					sm_state.af_state = AF_NULL;
 				} else {/*af success*/
 					/*enable awb,enable af*/
 				        devp->flag |= af_info->flag_bk;
 					af_alg->af_retry_cnt = 0;
+					devp->flag &=(~ISP_FLAG_AF);
+					devp->flag &=(~ISP_FLAG_TOUCH_AF);
 					sm_state.af_state = AF_NULL;
 				}
 			}
-- 
2.19.0

