From ee417d9b8fa54c356df516f33af70b5bf50e8150 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Sat, 9 Nov 2013 14:59:39 +0800
Subject: [PATCH 1796/5965] modify af parameters name.

---
 drivers/amlogic/camera/ov5647.c        |  2 +-
 drivers/amlogic/tvin/isp/isp_drv.c     |  4 +--
 drivers/amlogic/tvin/isp/isp_drv.h     |  1 +
 drivers/amlogic/tvin/isp/isp_sm.c      | 22 ++++++-------
 include/linux/amlogic/tvin/tvin_v4l2.h | 44 +++++++++++---------------
 5 files changed, 33 insertions(+), 40 deletions(-)

diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index fa0184f251ea..2104dd7c4b8f 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -2273,7 +2273,7 @@ static int set_focus_zone(struct ov5647_device *dev, int value)
 	dev->cam_para->xml_scenes->af.x = tx;
 	dev->cam_para->xml_scenes->af.y = ty;	
 	dev->cam_para->xml_scenes->af.radius = (ov5647_v_active>>5);
-	dev->cam_para->xml_scenes->af.detect_step = 16;
+	dev->cam_para->xml_scenes->af.valid_step_cnt = 16;
 	dev->cam_para->xml_scenes->af.deta_ave_ratio = 10;
 	dev->cam_para->xml_scenes->af.af_fail_ratio = 20;
 	dev->cam_para->xml_scenes->af.af_retry_max = 2;
diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index fa90e24eaff2..ef7758fdb97a 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -727,11 +727,11 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 		isp_set_def_config(devp->cam_param->xml_regs_map,info->fe_port,info->h_active,info->v_active);
 		devp->isp_af_parm = kmalloc(sizeof(xml_algorithm_af_t),GFP_KERNEL);
 		memset(devp->isp_af_parm,0,sizeof(xml_algorithm_af_t));
-		devp->isp_af_parm->detect_step = 16;
+		devp->isp_af_parm->valid_step_cnt = 16;
 		devp->isp_af_parm->deta_ave_ratio = ratio;
 		devp->isp_af_parm->af_fail_ratio = 20;
 		devp->isp_af_parm->af_retry_max = 3;
-		devp->af_info.af_detect = kmalloc(sizeof(isp_blnr_stat_t)*devp->isp_af_parm->detect_step,GFP_KERNEL);
+		devp->af_info.af_detect = kmalloc(sizeof(isp_blnr_stat_t)*devp->isp_af_parm->valid_step_cnt,GFP_KERNEL);
 		devp->isp_af_parm->step[0] = 100;
 		devp->isp_af_parm->step[1] = 150;
 		devp->isp_af_parm->step[2] = 200;
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index 57a90776662f..695e5a7df724 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -98,6 +98,7 @@ typedef struct isp_af_info_s {
 	unsigned int great_step;
 	unsigned int cur_step;
 	unsigned int cur_index;
+	unsigned int af_retry_cnt;
 	unsigned long long fv_aft_af;
 	unsigned long long fv_bf_af;
 	unsigned int last_ave_ac;
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index 6ed34a12d589..a6bae53eada0 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -930,11 +930,11 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 	unsigned long long *fv,sum_fv=0,ave_fv=0,delta_fv=0;
 	unsigned int i=0,step_cnt=0;
 	bool ret = false;
-	fv = kmalloc(sizeof(unsigned long long)*(af_alg->detect_step),GFP_KERNEL);
+	fv = kmalloc(sizeof(unsigned long long)*(af_alg->valid_step_cnt),GFP_KERNEL);
 
-	memset(fv,0,sizeof(unsigned long long)*(af_alg->detect_step));
+	memset(fv,0,sizeof(unsigned long long)*(af_alg->valid_step_cnt));
 	
-	for(i=0;i<af_alg->detect_step;i++){
+	for(i=0;i<af_alg->valid_step_cnt;i++){
 		fv[i] = get_fv_base_blnr(&af_info->af_detect[i]);
 		sum_fv += fv[i];
 		if(af_sm_dg&0x2){
@@ -946,7 +946,7 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 			pr_info("fv=%llu.\n",fv[i]);
 		}
 	}
-	step_cnt = af_alg->detect_step;
+	step_cnt = af_alg->valid_step_cnt;
 	ave_fv = div64(sum_fv,step_cnt);
 	if(af_sm_dg&0x1)
 		pr_info("ave_fv %llu.\n",ave_fv);
@@ -981,7 +981,7 @@ void isp_af_detect(isp_dev_t *devp)
 			break;
 		case AF_GET_STEPS_INFO:	
 			if(sm_state.status == ISP_AE_STATUS_STABLE){
-				if(af_info->cur_index++ >= af_alg->detect_step){
+				if(af_info->cur_index++ >= af_alg->valid_step_cnt){
 					af_info->cur_index = 0;
 					sm_state.af_state = AF_GET_STATUS;
 					pr_info("%s state get_status.\n",__func__);
@@ -999,7 +999,7 @@ void isp_af_detect(isp_dev_t *devp)
 					pr_info("[af_sm]:lost focus.\n");
 			}
 			af_info->cur_index++;
-			if(af_info->cur_index >= af_alg->detect_step){
+			if(af_info->cur_index >= af_alg->valid_step_cnt){
 				af_info->cur_index = 0;
 			}
 			break;
@@ -1090,11 +1090,11 @@ void isp_af_sm(isp_dev_t *devp)
 				if(af_sm_dg&0x1){
 					pr_info("[af_sm..]:fv_delta %llu,fv_aft_af %llu.\n",fv_delta,af_info->fv_aft_af);
 				}
-				if((fv_delta > af_info->fv_bf_af)&&(af_alg->af_retry_cnt++ < af_alg->af_retry_max)){
+				if((fv_delta > af_info->fv_bf_af)&&(af_info->af_retry_cnt++ < af_alg->af_retry_max)){
 					sm_state.af_state = AF_GET_OLD_FV;
 					if(af_sm_dg&0x1)
-						pr_info("[af_sm..]:fail ratio %u,%u times,return to af init retry.\n",af_alg->af_fail_ratio,af_alg->af_retry_cnt);
-				} else if((fv_delta > af_info->fv_bf_af)&&(af_alg->af_retry_cnt > af_alg->af_retry_max)){
+						pr_info("[af_sm..]:fail ratio %u,%u times,return to af init retry.\n",af_alg->af_fail_ratio,af_info->af_retry_cnt);
+				} else if((fv_delta > af_info->fv_bf_af)&&(af_info->af_retry_cnt > af_alg->af_retry_max)){
 		        	/*af failed over max times,force to step 0*/
 		                        /*enable awb,enable af*/
 				        devp->flag |= af_info->flag_bk;
@@ -1102,14 +1102,14 @@ void isp_af_sm(isp_dev_t *devp)
 					atomic_set(&af_info->writeable,1);
 					if(af_sm_dg&0x1)
 						pr_info("[af_sm..]:fail ratio %u over,force to step 0.\n",af_alg->af_fail_ratio);
-					af_alg->af_retry_cnt = 0;
+					af_info->af_retry_cnt = 0;
 					devp->flag &=(~ISP_FLAG_AF);
 					devp->flag &=(~ISP_FLAG_TOUCH_AF);
 					sm_state.af_state = AF_NULL;
 				} else {/*af success*/
 					/*enable awb,enable af*/
 				        devp->flag |= af_info->flag_bk;
-					af_alg->af_retry_cnt = 0;
+					af_info->af_retry_cnt = 0;
 					devp->flag &=(~ISP_FLAG_AF);
 					devp->flag &=(~ISP_FLAG_TOUCH_AF);
 					sm_state.af_state = AF_NULL;
diff --git a/include/linux/amlogic/tvin/tvin_v4l2.h b/include/linux/amlogic/tvin/tvin_v4l2.h
index 16f913a63d80..6fc8dc2dfd25 100755
--- a/include/linux/amlogic/tvin/tvin_v4l2.h
+++ b/include/linux/amlogic/tvin/tvin_v4l2.h
@@ -272,15 +272,15 @@ typedef struct wave_s {
 	unsigned int torch_rising_time; 
 	unsigned int flash_rising_time; 
 	unsigned int torch_flash_ratio; 
-    unsigned int wave_clock_div;     // u16
-    unsigned int pulse_init_time;    // u11
-    unsigned int pulse_high_time;    // u11
-    unsigned int pulse_low_time;     // u11
-    unsigned int time_to_latch;      // u26
-    unsigned int latch_time;         // u26
-    unsigned int latch_time_timeout; // u26
-    unsigned int time_to_off;        // u11
-    unsigned int pulse_qty_max;      // u8
+        unsigned int wave_clock_div;     // u16
+        unsigned int pulse_init_time;    // u11
+        unsigned int pulse_high_time;    // u11
+        unsigned int pulse_low_time;     // u11
+        unsigned int time_to_latch;      // u26
+        unsigned int latch_time;         // u26
+        unsigned int latch_time_timeout; // u26
+        unsigned int time_to_off;        // u11
+        unsigned int pulse_qty_max;      // u8
 } wave_t;
 
 
@@ -297,7 +297,7 @@ typedef struct xml_algorithm_ae_s {
         unsigned int  ae_statistics[3];   //0: false, 1: true
         unsigned int  ae_exp[3];          //0: false, 1: true
         unsigned int  ae_ag[3];           //0: false, 1: true
-		unsigned int  ae_skip[3];         //0: false, 1: true
+	unsigned int  ae_skip[3];         //0: false, 1: true
         unsigned int  ratio_winl;      //0 ~ 1024
         unsigned int  ratio_winr;      //0 ~ 1024
         unsigned int  ratio_wint;      //0 ~ 1024
@@ -403,7 +403,7 @@ typedef struct xml_algorithm_awb_s {
         unsigned int           thr_yl_h;          // 0 ~ 255
         unsigned int           thr_yl_m;          // 0 ~ 255
         unsigned int           thr_yl_l;          // 0 ~ 255
-		/*********************awb_enh****************/
+	/*********************awb_enh****************/
     	unsigned int           ratio_yuv;    
         unsigned int           slow_lpfcoef;    // 0 ~ 255
         unsigned int           fast_lpfcoef;    // 0 ~ 255
@@ -421,29 +421,21 @@ typedef struct xml_algorithm_awb_s {
 
 #define AF_PARM_NUM			19
 
-#define FOCUS_GRIDS 16
+#define FOCUS_GRIDS 11
 
 typedef struct xml_algorithm_af_s {
+	/*for lose focus*/
+	unsigned int           deta_ave_ratio;//10bits/1024
+	unsigned int	       deta_last_ave;//10bits/1024
+
     /*for climbing algorithm*/
 	unsigned int           step[FOCUS_GRIDS];
-	unsigned int 	       af_retry_cnt;
+	unsigned int	       valid_step_cnt;
 	unsigned int	       af_retry_max;
-	unsigned int	       step_min;
-	unsigned int	       step_max;
-	unsigned int           f_thr_p;
-	unsigned int 	       f_thr_n;
-	unsigned int 	       step_coarse;
-	unsigned int	       step_fine;
 	unsigned int 	       jump_offset;
 	unsigned int	       field_delay;
-	unsigned int	       detect_step;
-	unsigned int           deta_ave_ratio;//10bits/1024
-	unsigned int	       deta_last_ave;//10bits/1024
 	unsigned int           af_fail_ratio;//x/100
-	unsigned int	       window_l_ratio;//10bits/1024
-	unsigned int	       window_r_ratio;//10bits/1024
-	unsigned int	       window_t_ratio;//10bits/1024
-	unsigned int	       window_b_ratio;//10bits/1024
+	/*window for touch focus*/
 	unsigned int	       x;//x coord of touch focus win
 	unsigned int	       y;//y coord of touch focus win
 	unsigned int           radius;//radius of touch focus win
-- 
2.19.0

