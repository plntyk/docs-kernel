From c20479e5b6ee55e15d09ca8332cf1d1e6a4eb0d2 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Sat, 9 Nov 2013 22:34:33 +0800
Subject: [PATCH 1799/5965] add lost focus tell.

---
 drivers/amlogic/tvin/isp/isp_drv.c     | 41 +++++++++---
 drivers/amlogic/tvin/isp/isp_drv.h     | 12 ++--
 drivers/amlogic/tvin/isp/isp_hw.c      |  2 -
 drivers/amlogic/tvin/isp/isp_hw.h      |  2 -
 drivers/amlogic/tvin/isp/isp_sm.c      | 92 ++++++++++++++++++--------
 include/linux/amlogic/tvin/tvin_v4l2.h |  8 ++-
 6 files changed, 107 insertions(+), 50 deletions(-)

diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index ef7758fdb97a..8d88f481b019 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -690,9 +690,13 @@ static int isp_support(struct tvin_frontend_s *fe, enum tvin_port_e port)
         else
                 return -1;
 }
-static unsigned int ratio = 200;
-module_param(ratio,uint,0664);
-MODULE_PARM_DESC(ratio,"\n debug flag for ae.\n");
+static unsigned int dc_move_ratio = 50;
+module_param(dc_move_ratio,uint,0664);
+MODULE_PARM_DESC(dc_move_ratio,"\n debug flag for af.\n");
+
+static unsigned int fv_ratio = 200;
+module_param(fv_ratio,uint,0664);
+MODULE_PARM_DESC(fv_ratio,"\n debug flag for af.\n");
 
 static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 {        
@@ -703,6 +707,7 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 	info->fe_port = parm->isp_fe_port;
 	info->h_active = parm->h_active;
 	info->v_active = parm->v_active;
+	info->frame_rate = parm->frame_rate;
 	info->skip_cnt = 0;
 	devp->isp_fe = tvin_get_frontend(info->fe_port, 0);		
 	if(devp->isp_fe && devp->isp_fe->dec_ops) {			
@@ -728,10 +733,8 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 		devp->isp_af_parm = kmalloc(sizeof(xml_algorithm_af_t),GFP_KERNEL);
 		memset(devp->isp_af_parm,0,sizeof(xml_algorithm_af_t));
 		devp->isp_af_parm->valid_step_cnt = 16;
-		devp->isp_af_parm->deta_ave_ratio = ratio;
 		devp->isp_af_parm->af_fail_ratio = 20;
 		devp->isp_af_parm->af_retry_max = 3;
-		devp->af_info.af_detect = kmalloc(sizeof(isp_blnr_stat_t)*devp->isp_af_parm->valid_step_cnt,GFP_KERNEL);
 		devp->isp_af_parm->step[0] = 100;
 		devp->isp_af_parm->step[1] = 150;
 		devp->isp_af_parm->step[2] = 200;
@@ -750,6 +753,15 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 		devp->isp_af_parm->step[15] = 550;
 		devp->isp_af_parm->jump_offset = 100;
 		devp->isp_af_parm->field_delay = 1;
+		
+		/*init for auto lose focus tell*/
+		devp->isp_af_parm->detect_step_cnt = 16;
+		devp->isp_af_parm->enter_move_ratio = dc_move_ratio;
+		devp->isp_af_parm->enter_static_ratio = 30;
+		devp->isp_af_parm->deta_ave_ratio = fv_ratio;
+		devp->af_info.af_detect = kmalloc(sizeof(isp_blnr_stat_t)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
+		devp->af_info.fv = kmalloc(sizeof(unsigned long long)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
+		devp->af_info.v_dc = kmalloc(sizeof(unsigned long long)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
 		if((info->h_active==2592)||(info->v_active==1944))
 			devp->flag |= ISP_FLAG_SKIP_BUF;
 	}
@@ -759,6 +771,14 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 static void isp_fe_close(struct tvin_frontend_s *fe)
 {        
         isp_dev_t *devp = container_of(fe,isp_dev_t,frontend);
+		if(devp->af_info.af_detect)
+			kfree(devp->af_info.af_detect);
+		if(devp->af_info.fv)
+			kfree(devp->af_info.fv);
+		if(devp->af_info.v_dc)
+			kfree(devp->af_info.v_dc);
+		if(devp->isp_af_parm)
+			kfree(devp->isp_af_parm);
 	if(devp->isp_fe)
 		devp->isp_fe->dec_ops->close(devp->isp_fe);
 	switch_vpu_mem_pd_vmod(VPU_ISP,VPU_MEM_POWER_DOWN);
@@ -790,7 +810,6 @@ static void isp_fe_start(struct tvin_frontend_s *fe, enum tvin_sig_fmt_e fmt)
 	start_isp_thread(devp);
 	
         devp->flag |= ISP_FLAG_START;
-	
 	return;
 }
 static void isp_fe_stop(struct tvin_frontend_s *fe, enum tvin_port_e port)
@@ -824,7 +843,7 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
                 case CAM_COMMAND_SCENES:
 		        devp->isp_ae_parm = &param->xml_scenes->ae;
 		        devp->isp_awb_parm = &param->xml_scenes->awb;
-		        devp->isp_af_parm = &param->xml_scenes->af;
+		        //devp->isp_af_parm = &param->xml_scenes->af;
 		        devp->capture_parm = param->xml_capture;
 		        devp->flag |= ISP_FLAG_SET_SCENES;
 		        break;
@@ -866,7 +885,10 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 			devp->capture_parm->af_mode = CAM_SCANMODE_FULL;
 		        break;
                 case CAM_COMMAND_TOUCH_WINDOW:
-			devp->isp_af_parm = &param->xml_scenes->af;
+			//devp->isp_af_parm = &param->xml_scenes->af;
+			devp->isp_af_parm->x = param->xml_scenes->af.x;
+			devp->isp_af_parm->y = param->xml_scenes->af.y;
+			devp->isp_af_parm->radius = param->xml_scenes->af.radius;
 			x0 = devp->isp_af_parm->x>devp->isp_af_parm->radius?devp->isp_af_parm->x-devp->isp_af_parm->radius:0;
 			y0 = devp->isp_af_parm->y>devp->isp_af_parm->radius?devp->isp_af_parm->y-devp->isp_af_parm->radius:0;
 			x1 = devp->isp_af_parm->x + devp->isp_af_parm->radius;
@@ -901,7 +923,7 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 		        break;
 	        default:
 		        break;
-	}
+	}	
 	return 0;
 }
 static int isp_fe_isr(struct tvin_frontend_s *fe, unsigned int hcnt64)
@@ -978,7 +1000,6 @@ static int isp_fe_isr(struct tvin_frontend_s *fe, unsigned int hcnt64)
 		if(isr_debug)
 			pr_info("%s isp skip cnt %u %s 40.\n",__func__,devp->info.skip_cnt,devp->info.skip_cnt>40?">":"<");
 	}
-	
 	tasklet_schedule(&devp->isp_task);
         return ret;        
 }
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index 695e5a7df724..097662e9499f 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -28,7 +28,7 @@
 #include "isp_hw.h"
 #include "../tvin_frontend.h"
 
-#define ISP_VER					"2013.11.08a"
+#define ISP_VER					"2013.11.09a"
 #define ISP_NUM					1
 #define DEVICE_NAME 			        "isp"
 
@@ -52,6 +52,7 @@ typedef struct isp_info_s {
 	tvin_port_t fe_port;
 	unsigned int h_active;
 	unsigned int v_active;
+	unsigned int frame_rate;
 	unsigned int skip_cnt;
 } isp_info_t;
 /*config in bsp*/
@@ -94,15 +95,18 @@ typedef struct af_debug_test_s {
 } af_debug_test_t;
 
 typedef struct isp_af_info_s {
+	unsigned int cur_index;
+	/*for lose focus*/
+	unsigned int *fv;
+	unsigned int *v_dc;
+	isp_blnr_stat_t last_blnr;
+	/*for climbing algorithm*/
 	unsigned int flag_bk;
 	unsigned int great_step;
 	unsigned int cur_step;
-	unsigned int cur_index;
 	unsigned int af_retry_cnt;
 	unsigned long long fv_aft_af;
 	unsigned long long fv_bf_af;
-	unsigned int last_ave_ac;
-	unsigned int last_ave_dc;
 	isp_blnr_stat_t *f;
 	isp_blnr_stat_t *af_detect;
 	isp_blnr_stat_t af_data[FOCUS_GRIDS];
diff --git a/drivers/amlogic/tvin/isp/isp_hw.c b/drivers/amlogic/tvin/isp/isp_hw.c
index 79387385fed1..679eead60f3b 100755
--- a/drivers/amlogic/tvin/isp/isp_hw.c
+++ b/drivers/amlogic/tvin/isp/isp_hw.c
@@ -679,8 +679,6 @@ void isp_get_af_stat(isp_af_stat_t * af_stat)
 void isp_get_blnr_stat(isp_blnr_stat_t *blnr_stat)
 {
 	int i = 0;
-	blnr_stat->ac_len = 4;
-	blnr_stat->dc_len = 4;
 	for(i=0;i<4;i++){
 		blnr_stat->dc[i] = isp_rd(ISP_RO_BLNR_GRBG_DCSUM0+i);
 		blnr_stat->ac[i] = isp_rd(ISP_RO_BLNR_GRBG_ACSUM0+i);
diff --git a/drivers/amlogic/tvin/isp/isp_hw.h b/drivers/amlogic/tvin/isp/isp_hw.h
index 22e9635d8a72..6a9b1762d4d5 100755
--- a/drivers/amlogic/tvin/isp/isp_hw.h
+++ b/drivers/amlogic/tvin/isp/isp_hw.h
@@ -69,8 +69,6 @@ typedef struct isp_awb_gain_s {
 } isp_awb_gain_t;
 
 typedef struct isp_blnr_stat_s {
-	unsigned int ac_len;
-	unsigned int dc_len;
 	unsigned int ac[4];//G0 R1 B2 G3
 	unsigned int dc[4];//G0 R1 B2 G3
 } isp_blnr_stat_t;
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index a6bae53eada0..ff70a3c755d0 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -144,8 +144,8 @@ void af_sm_init(isp_dev_t *devp)
     	sm_state.af_state = AF_INIT;
 		devp->af_info.f = devp->af_info.af_data;
 	}else{
-		sm_state.af_state = AF_DETECT_INIT;
-		devp->af_info.f = devp->af_info.af_detect;
+		sm_state.af_state = AF_INIT;
+		devp->af_info.f = devp->af_info.af_data;
 	}
 	devp->af_info.fv_aft_af = 0;
 	devp->af_info.fv_bf_af = 0;
@@ -843,6 +843,7 @@ unsigned long long div64(unsigned long long n, unsigned long long d) // n for nu
     }
     return q;
 }
+
 static unsigned long long get_fv_base_blnr(isp_blnr_stat_t *blnr)
 {
 	unsigned long long sum_ac = 0, sum_dc = 0, mul_ac = 0;
@@ -928,16 +929,47 @@ MODULE_PARM_DESC(delta,"\n debug flag for ae.\n");
 static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 {
 	unsigned long long *fv,sum_fv=0,ave_fv=0,delta_fv=0;
-	unsigned int i=0,step_cnt=0;
-	bool ret = false;
-	fv = kmalloc(sizeof(unsigned long long)*(af_alg->valid_step_cnt),GFP_KERNEL);
-
-	memset(fv,0,sizeof(unsigned long long)*(af_alg->valid_step_cnt));
-	
+	unsigned long long *v_dc,sum_vdc=0,ave_vdc=0,delta_dc=0,tmp_vdc1=0,tmp_vdc2=0;
+	unsigned int i=0,dc0,dc1,dc2,dc3;
+	bool ret=false,is_move=false,is_static=false;
+	fv = af_info->fv;
+	v_dc = af_info->v_dc;
+	/*calc v dc*/
+	dc0 = af_info->last_blnr.dc[0];
+	dc1 = af_info->last_blnr.dc[1];
+	dc2 = af_info->last_blnr.dc[2];
+	dc3 = af_info->last_blnr.dc[3];
+	for(i=0;i<af_alg->detect_step_cnt;i++){
+		delta_dc = dc0>af_info->af_detect[i].dc[0]?dc0-af_info->af_detect[i].dc[0]:af_info->af_detect[i].dc[0]-dc0;
+		v_dc[i]  = div64((unsigned long long)delta_dc*1024,dc0);
+		delta_dc = dc1>af_info->af_detect[i].dc[1]?dc1-af_info->af_detect[i].dc[1]:af_info->af_detect[i].dc[1]-dc1;
+		v_dc[i] += div64((unsigned long long)delta_dc*1024,dc1);
+		delta_dc = dc2>af_info->af_detect[i].dc[2]?dc2-af_info->af_detect[i].dc[2]:af_info->af_detect[i].dc[2]-dc2;
+		v_dc[i] += div64((unsigned long long)delta_dc*1024,dc2);
+		delta_dc = dc3>af_info->af_detect[i].dc[3]?dc3-af_info->af_detect[i].dc[3]:af_info->af_detect[i].dc[3]-dc3;
+		v_dc[i] += div64((unsigned long long)delta_dc*1024,dc3);
+		sum_vdc += v_dc[i];
+		if(af_sm_dg&0x2)
+			pr_info("v_dc[%u]=%llu.\n",i,v_dc[i]);
+	}
+	ave_vdc = div64(sum_vdc,af_alg->detect_step_cnt);
+	for(i=0;i<af_alg->detect_step_cnt;i++){
+		delta_dc = v_dc[i]>ave_vdc?v_dc[i]-ave_vdc:ave_vdc-v_dc[i];
+		tmp_vdc1 = div64(delta_dc*1024,af_alg->enter_move_ratio);
+		tmp_vdc2 = div64(delta_dc*1024,af_alg->enter_static_ratio);
+		if(tmp_vdc1 > ave_vdc){
+			is_move = true;
+			break;
+		}
+	}
+	/*enter static view,calc fv*/
+	if(!is_move && i>= af_alg->detect_step_cnt)
+		return false;
+	sum_fv = 0;
 	for(i=0;i<af_alg->valid_step_cnt;i++){
 		fv[i] = get_fv_base_blnr(&af_info->af_detect[i]);
 		sum_fv += fv[i];
-		if(af_sm_dg&0x2){
+		if(af_sm_dg&0x4){
 			pr_info("step[%u]:ac0=%u ac1=%u ac2=%u ac3=%u ",i,
 					af_info->af_detect[i].ac[0],af_info->af_detect[i].ac[1],af_info->af_detect[i].ac[2],
 					af_info->af_detect[i].ac[3]);
@@ -946,8 +978,7 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 			pr_info("fv=%llu.\n",fv[i]);
 		}
 	}
-	step_cnt = af_alg->valid_step_cnt;
-	ave_fv = div64(sum_fv,step_cnt);
+	ave_fv = div64(sum_fv,af_alg->valid_step_cnt);
 	if(af_sm_dg&0x1)
 		pr_info("ave_fv %llu.\n",ave_fv);
 	delta_fv = ave_fv>af_info->fv_aft_af?(ave_fv-af_info->fv_aft_af):(af_info->fv_aft_af-ave_fv);
@@ -962,7 +993,6 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 			pr_info("2 delta_fv*1024/ave_ratio=%llu,last_ave_fv=%llu.\n",delta_fv,af_info->fv_aft_af);
 	}
 
-	kfree(fv);
 
 	return ret;
 	
@@ -980,16 +1010,12 @@ void isp_af_detect(isp_dev_t *devp)
 			sm_state.af_state = AF_GET_STEPS_INFO;
 			break;
 		case AF_GET_STEPS_INFO:	
-			if(sm_state.status == ISP_AE_STATUS_STABLE){
-				if(af_info->cur_index++ >= af_alg->valid_step_cnt){
+			if(af_info->cur_index >= af_alg->detect_step_cnt){
 					af_info->cur_index = 0;
 					sm_state.af_state = AF_GET_STATUS;
-					pr_info("%s state get_status.\n",__func__);
-				}
-			}else{
-				sm_state.af_state = AF_DETECT_INIT;
-				if(af_sm_dg&0x1)
-					pr_info("%s ae unstable return to af init.\n",__func__);
+					pr_info("%s get info end.\n",__func__);
+			} else {
+				af_info->cur_index++;
 			}
 			break;
 		case AF_GET_STATUS:
@@ -998,9 +1024,10 @@ void isp_af_detect(isp_dev_t *devp)
 				if(af_sm_dg)
 					pr_info("[af_sm]:lost focus.\n");
 			}
-			af_info->cur_index++;
-			if(af_info->cur_index >= af_alg->valid_step_cnt){
+			if(af_info->cur_index >= af_alg->detect_step_cnt){
 				af_info->cur_index = 0;
+			}else{
+				af_info->cur_index++;
 			}
 			break;
 		default:
@@ -1047,7 +1074,7 @@ void isp_af_sm(isp_dev_t *devp)
 			sm_state.af_state = AF_GET_COARSE_INFO;
 			break;
 		case AF_GET_COARSE_INFO:
-			if((af_info->cur_index >= FOCUS_GRIDS)||(af_alg->step[af_info->cur_index]==0)){
+			if((af_info->cur_index >= af_alg->valid_step_cnt)||(af_alg->step[af_info->cur_index]==0)){
 				sm_state.af_state = AF_CALC_GREAT;
 				af_info->cur_index = 0;
 			} else if((atomic_read(&af_info->writeable) <= 0)&&(af_delay >= af_alg->field_delay)){
@@ -1074,10 +1101,19 @@ void isp_af_sm(isp_dev_t *devp)
 			break;
 		case AF_SUCCESS:
 			if(af_delay >= 2){
+				/*get last blnr*/
+				af_info->last_blnr.ac[0] = af_info->af_data[af_info->cur_index].ac[0];
+				af_info->last_blnr.ac[1] = af_info->af_data[af_info->cur_index].ac[1];
+				af_info->last_blnr.ac[2] = af_info->af_data[af_info->cur_index].ac[2];
+				af_info->last_blnr.ac[3] = af_info->af_data[af_info->cur_index].ac[3];
+				af_info->last_blnr.dc[0] = af_info->af_data[af_info->cur_index].dc[0];
+				af_info->last_blnr.dc[1] = af_info->af_data[af_info->cur_index].dc[1];
+				af_info->last_blnr.dc[2] = af_info->af_data[af_info->cur_index].dc[2];
+				af_info->last_blnr.dc[3] = af_info->af_data[af_info->cur_index].dc[3];
 		                /* get last fv */
 		                af_info->fv_aft_af = get_fv_base_blnr(&af_info->af_data[af_info->cur_index]);
 			        if(af_sm_dg&0x2){
-				        pr_info("%s:ac0=%u ac1=%u ac2=%u ac3=%u dc0=%u dc1=%u dc2=%u dc3=%u fv=%llu.\n",__func__,
+				        pr_info("[af] last blnr:ac0=%u ac1=%u ac2=%u ac3=%u dc0=%u dc1=%u dc2=%u dc3=%u fv=%llu.\n",
 				                af_info->af_data[af_info->cur_index].ac[0],af_info->af_data[af_info->cur_index].ac[1],
 				                af_info->af_data[af_info->cur_index].ac[2],af_info->af_data[af_info->cur_index].ac[3],
 					        af_info->af_data[af_info->cur_index].dc[0],af_info->af_data[af_info->cur_index].dc[1],
@@ -1103,16 +1139,14 @@ void isp_af_sm(isp_dev_t *devp)
 					if(af_sm_dg&0x1)
 						pr_info("[af_sm..]:fail ratio %u over,force to step 0.\n",af_alg->af_fail_ratio);
 					af_info->af_retry_cnt = 0;
-					devp->flag &=(~ISP_FLAG_AF);
 					devp->flag &=(~ISP_FLAG_TOUCH_AF);
-					sm_state.af_state = AF_NULL;
+					sm_state.af_state = AF_DETECT_INIT;
 				} else {/*af success*/
 					/*enable awb,enable af*/
 				        devp->flag |= af_info->flag_bk;
 					af_info->af_retry_cnt = 0;
-					devp->flag &=(~ISP_FLAG_AF);
 					devp->flag &=(~ISP_FLAG_TOUCH_AF);
-					sm_state.af_state = AF_NULL;
+					sm_state.af_state = AF_DETECT_INIT;
 				}
 			}
 			break;
@@ -1349,7 +1383,7 @@ int isp_capture_sm(isp_dev_t *devp)
 			break;
 		case CAPTURE_SINGLE:
 			if(cap_sm->adj_cnt < parm->sigle_count){
-				for(j=0;j<devp->blnr_stat.ac_len;j++)
+				for(j=0;j<4;j++)
 					cur_ac += devp->blnr_stat.ac[j];
 				if(cur_ac > cap_sm->max_ac_sum){
 					cap_sm->max_ac_sum = cur_ac;
diff --git a/include/linux/amlogic/tvin/tvin_v4l2.h b/include/linux/amlogic/tvin/tvin_v4l2.h
index 6fc8dc2dfd25..e1ff608c39b2 100755
--- a/include/linux/amlogic/tvin/tvin_v4l2.h
+++ b/include/linux/amlogic/tvin/tvin_v4l2.h
@@ -421,13 +421,15 @@ typedef struct xml_algorithm_awb_s {
 
 #define AF_PARM_NUM			19
 
-#define FOCUS_GRIDS 11
+#define FOCUS_GRIDS 16
 
 typedef struct xml_algorithm_af_s {
 	/*for lose focus*/
+	unsigned int	       enter_move_ratio;//10bit/1024
+	unsigned int	       enter_static_ratio;//10bit/1024
+	unsigned int	       detect_step_cnt;
+	unsigned int           fv_fail_ratio;//10bits/1024
 	unsigned int           deta_ave_ratio;//10bits/1024
-	unsigned int	       deta_last_ave;//10bits/1024
-
     /*for climbing algorithm*/
 	unsigned int           step[FOCUS_GRIDS];
 	unsigned int	       valid_step_cnt;
-- 
2.19.0

