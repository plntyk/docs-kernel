From f5b4118a9a45b19d772ba40710163fb1b3196151 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Sun, 10 Nov 2013 18:05:29 +0800
Subject: [PATCH 1803/5965] modify for lose focus auto detection.

---
 drivers/amlogic/camera/ov5647.c        | 23 ----------
 drivers/amlogic/tvin/isp/isp_drv.c     | 26 ++++++-----
 drivers/amlogic/tvin/isp/isp_drv.h     |  9 +++-
 drivers/amlogic/tvin/isp/isp_parm.c    | 38 +++++++---------
 drivers/amlogic/tvin/isp/isp_sm.c      | 63 ++++++++++++++++++++------
 include/linux/amlogic/tvin/tvin_v4l2.h | 42 ++++-------------
 6 files changed, 98 insertions(+), 103 deletions(-)

diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index d082522ac2aa..7284530e5d66 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -2701,29 +2701,6 @@ static int set_focus_zone(struct ov5647_device *dev, int value)
 	dev->cam_para->xml_scenes->af.x = tx;
 	dev->cam_para->xml_scenes->af.y = ty;	
 	dev->cam_para->xml_scenes->af.radius = (ov5647_v_active>>5);
-	dev->cam_para->xml_scenes->af.valid_step_cnt = 16;
-	dev->cam_para->xml_scenes->af.deta_ave_ratio = 10;
-	dev->cam_para->xml_scenes->af.af_fail_ratio = 20;
-	dev->cam_para->xml_scenes->af.af_retry_max = 2;
-	dev->cam_para->xml_scenes->af.step[0] = 100;
-	dev->cam_para->xml_scenes->af.step[1] = 150;
-	dev->cam_para->xml_scenes->af.step[2] = 200;
-	dev->cam_para->xml_scenes->af.step[3] = 250;
-	dev->cam_para->xml_scenes->af.step[4] = 290;
-	dev->cam_para->xml_scenes->af.step[5] = 330;
-	dev->cam_para->xml_scenes->af.step[6] = 370;
-	dev->cam_para->xml_scenes->af.step[7] = 400;		
-	dev->cam_para->xml_scenes->af.step[8] = 430;		
-	dev->cam_para->xml_scenes->af.step[9] = 460;
-	dev->cam_para->xml_scenes->af.step[10] = 480;		
-    dev->cam_para->xml_scenes->af.step[11] = 500;
-    dev->cam_para->xml_scenes->af.step[12] = 520;
-    dev->cam_para->xml_scenes->af.step[13] = 530;
-    dev->cam_para->xml_scenes->af.step[14] = 540;
-    dev->cam_para->xml_scenes->af.step[15] = 550;
-	dev->cam_para->xml_scenes->af.jump_offset = 100;
-	dev->cam_para->xml_scenes->af.field_delay = 1;
-	
 	dev->cam_para->cam_command = CAM_COMMAND_TOUCH_WINDOW;
 	dev->fe_arg.port = TVIN_PORT_ISP;
 	dev->fe_arg.index = 0;
diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index 8d88f481b019..f6f1b4d88109 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -690,13 +690,6 @@ static int isp_support(struct tvin_frontend_s *fe, enum tvin_port_e port)
         else
                 return -1;
 }
-static unsigned int dc_move_ratio = 50;
-module_param(dc_move_ratio,uint,0664);
-MODULE_PARM_DESC(dc_move_ratio,"\n debug flag for af.\n");
-
-static unsigned int fv_ratio = 200;
-module_param(fv_ratio,uint,0664);
-MODULE_PARM_DESC(fv_ratio,"\n debug flag for af.\n");
 
 static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 {        
@@ -756,14 +749,25 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 		
 		/*init for auto lose focus tell*/
 		devp->isp_af_parm->detect_step_cnt = 16;
-		devp->isp_af_parm->enter_move_ratio = dc_move_ratio;
-		devp->isp_af_parm->enter_static_ratio = 30;
-		devp->isp_af_parm->deta_ave_ratio = fv_ratio;
+		devp->isp_af_parm->enter_move_ratio = 55;
+		devp->isp_af_parm->enter_static_ratio = 35;
+		devp->isp_af_parm->ave_vdc_thr = 100;
+		devp->isp_af_parm->delta_fv_ratio = 0;
+		devp->isp_af_parm->af_duration_time = 1;//0.5s
+		/*window for full scan & detect*/
+		devp->isp_af_parm->win_ratio = 4;
+		devp->af_info.x0 = info->h_active/devp->isp_af_parm->win_ratio;
+		devp->af_info.y0 = info->v_active/devp->isp_af_parm->win_ratio;
+		devp->af_info.x1 = info->h_active - devp->af_info.x0;
+		devp->af_info.y1 = info->v_active - devp->af_info.y0;
 		devp->af_info.af_detect = kmalloc(sizeof(isp_blnr_stat_t)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
 		devp->af_info.fv = kmalloc(sizeof(unsigned long long)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
 		devp->af_info.v_dc = kmalloc(sizeof(unsigned long long)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
-		if((info->h_active==2592)||(info->v_active==1944))
+		/*patch for capture*/
+		if((info->h_active==2592)||(info->v_active==1944)){
 			devp->flag |= ISP_FLAG_SKIP_BUF;
+			devp->flag &= (~ISP_FLAG_AF);
+		}
 	}
         return 0;
 }
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index 097662e9499f..be97683c1b27 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -28,7 +28,7 @@
 #include "isp_hw.h"
 #include "../tvin_frontend.h"
 
-#define ISP_VER					"2013.11.09a"
+#define ISP_VER					"2013.11.10a"
 #define ISP_NUM					1
 #define DEVICE_NAME 			        "isp"
 
@@ -99,6 +99,8 @@ typedef struct isp_af_info_s {
 	/*for lose focus*/
 	unsigned int *fv;
 	unsigned int *v_dc;
+	unsigned int adj_duration_cnt;//fields count
+        bool	     last_move;
 	isp_blnr_stat_t last_blnr;
 	/*for climbing algorithm*/
 	unsigned int flag_bk;
@@ -113,6 +115,11 @@ typedef struct isp_af_info_s {
 	isp_af_stat_t af_wind[FOCUS_GRIDS];
 	//unsigned char af_delay;
 	atomic_t writeable;
+	/*window for full scan&detect*/
+	unsigned int x0;
+	unsigned int y0;
+	unsigned int x1;
+	unsigned int y1;
 }isp_af_info_t;
 
 /*for debug cmd*/
diff --git a/drivers/amlogic/tvin/isp/isp_parm.c b/drivers/amlogic/tvin/isp/isp_parm.c
index 43918c12f6c3..a5941e05158f 100755
--- a/drivers/amlogic/tvin/isp/isp_parm.c
+++ b/drivers/amlogic/tvin/isp/isp_parm.c
@@ -217,27 +217,23 @@ void set_af_parm(xml_algorithm_af_t *af_sw,char **parm)
 {
 	int len = AF_PARM_NUM;		
 	isp_param_t af[AF_PARM_NUM]={
-        #if 0
-		{"f0_coef0",      &af_sw->f0_coef0,      1, ISP_U32},
-		{"f0_coef1",      &af_sw->f0_coef1,      1, ISP_U32},
-		{"f0_coef2",      &af_sw->f0_coef2,      1, ISP_U32},
-		{"f0_coef3",      &af_sw->f0_coef3,      1, ISP_U32},
-		{"f0_coef4",      &af_sw->f0_coef4,      1, ISP_U32},
-		{"f0_coef5",      &af_sw->f0_coef5,      1, ISP_U32},
-		{"f0_coef6",      &af_sw->f0_coef6,      1, ISP_U32},
-		{"f0_coef7",      &af_sw->f0_coef7,      1, ISP_U32},		
-		{"f1_coef0",      &af_sw->f1_coef0,      1, ISP_U32},
-		{"f1_coef1",      &af_sw->f1_coef1,      1, ISP_U32},
-		{"f1_coef2",      &af_sw->f1_coef2,      1, ISP_U32},
-		{"f1_coef3",      &af_sw->f1_coef3,      1, ISP_U32},
-		{"f1_coef4",      &af_sw->f1_coef4,      1, ISP_U32},
-		{"f1_coef5",      &af_sw->f1_coef5,      1, ISP_U32},
-		{"f1_coef6",      &af_sw->f1_coef6,      1, ISP_U32},
-		{"f1_coef7",      &af_sw->f1_coef7,      1, ISP_U32},
-		{"f0_coef",       &af_sw->f0_coef,       1, ISP_U32},
-		{"f1_coef",       &af_sw->f1_coef,       1, ISP_U32},		
-		{"adapting_time", &af_sw->adapting_time, 1, ISP_U32},
-        #endif 
+		{"enter_move_ratio",      &af_sw->enter_move_ratio,        1, ISP_U32},
+		{"enter_static_ratio",    &af_sw->enter_static_ratio,      1, ISP_U32},
+		{"detect_step_cnt",       &af_sw->detect_step_cnt,         1, ISP_U32},
+		{"ave_vdc_thr",		  &af_sw->ave_vdc_thr,		   		   1, ISP_U32},
+		{"delta_fv_ratio",        &af_sw->delta_fv_ratio,          1, ISP_U32},
+		{"af_duration_time",	  &af_sw->af_duration_time, 	   1, ISP_U32},
+		{"af_duration_cnt",	  &af_sw->af_duration_cnt,	       1, ISP_U32},
+		{"win_ratio", 	  	  &af_sw->win_ratio,		   1, ISP_U32},
+		{"step",      		  &af_sw->step,           FOCUS_GRIDS, ISP_U32},
+		{"valid_step_cnt",        &af_sw->valid_step_cnt,          1, ISP_U32},
+		{"af_retry_max",          &af_sw->af_retry_max,            1, ISP_U32},		
+		{"jump_offset",           &af_sw->jump_offset,             1, ISP_U32},
+		{"field_delay",           &af_sw->field_delay,             1, ISP_U32},
+		{"af_fail_ratio",         &af_sw->af_fail_ratio,           1, ISP_U32},
+		{"x",                     &af_sw->x,      			       1, ISP_U32},
+		{"y",                     &af_sw->y,      			       1, ISP_U32},
+		{"radius",                &af_sw->radius,     		       1, ISP_U32},
 	};
 	
 	if(!strcmp(parm[0],"show")){
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index 4d6daf56dafc..85168faa21d0 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -137,6 +137,7 @@ void isp_sm_init(isp_dev_t *devp)
 
 void af_sm_init(isp_dev_t *devp)
 {
+	unsigned int tmp = 0 ;
 	/*init for af*/
 	if(sm_state.af_state)
 		devp->flag |= devp->af_info.flag_bk;
@@ -149,6 +150,10 @@ void af_sm_init(isp_dev_t *devp)
 	}
 	devp->af_info.fv_aft_af = 0;
 	devp->af_info.fv_bf_af = 0;
+	devp->af_info.adj_duration_cnt = 0;
+	/*calc duration for detect lose focus*/
+	tmp = devp->isp_af_parm->af_duration_time*devp->info.frame_rate;
+	devp->isp_af_parm->af_duration_cnt = tmp/10;
 }
 void isp_ae_low_gain()
 {
@@ -932,7 +937,7 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 {
 	unsigned long long *fv,sum_fv=0,ave_fv=0,delta_fv=0;
 	unsigned long long *v_dc,sum_vdc=0,ave_vdc=0,delta_dc=0,tmp_vdc1=0,tmp_vdc2=0;
-	unsigned int i=0,dc0,dc1,dc2,dc3;
+	unsigned int i=0,dc0,dc1,dc2,dc3,static_cnt;
 	bool ret=false,is_move=false,is_static=false;
 	fv = af_info->fv;
 	v_dc = af_info->v_dc;
@@ -955,18 +960,39 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 			pr_info("v_dc[%u]=%llu.\n",i,v_dc[i]);
 	}
 	ave_vdc = div64(sum_vdc,af_alg->detect_step_cnt);
+	
+	static_cnt = 0;
 	for(i=0;i<af_alg->detect_step_cnt;i++){
 		delta_dc = v_dc[i]>ave_vdc?v_dc[i]-ave_vdc:ave_vdc-v_dc[i];
 		tmp_vdc1 = div64(delta_dc*1024,af_alg->enter_move_ratio);
 		tmp_vdc2 = div64(delta_dc*1024,af_alg->enter_static_ratio);
 		if(tmp_vdc1 > ave_vdc){
-			is_move = true;
+			if(ave_vdc > af_alg->ave_vdc_thr){
+			        is_move = true;
+			} else{
+                                if(af_sm_dg&0x1)
+				        pr_info("static ave_vdc=%llu.\n",ave_vdc);
 			break;
+		}else if(tmp_vdc2 < ave_vdc){
+			if(++static_cnt >= af_alg->detect_step_cnt)
+				is_static = true;
 		}
 	}
-	/*enter static view,calc fv*/
-	if(!is_move && i>= af_alg->detect_step_cnt)
+	/* enter move from static */
+	if(is_move){
+		if(af_sm_dg&0x1)
+			pr_info("0->1\n");
+		af_info->last_move = true;
+		return false;
+	/* during hysteresis ,still last state*/
+	}else if((!is_static&&!is_move)||!af_info->last_move){
 		return false;
+	}
+	if(af_sm_dg&0x1)
+		pr_info("1->0\n");
+	/*enter static from move,calc fv to telll if trigger full scan*/
+	if(af_alg->delta_fv_ratio == 0)
+		return true;
 	sum_fv = 0;
 	for(i=0;i<af_alg->valid_step_cnt;i++){
 		fv[i] = get_fv_base_blnr(&af_info->af_detect[i]);
@@ -983,16 +1009,15 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 	ave_fv = div64(sum_fv,af_alg->valid_step_cnt);
 	if(af_sm_dg&0x1)
 		pr_info("ave_fv %llu.\n",ave_fv);
-	delta_fv = ave_fv>af_info->fv_aft_af?(ave_fv-af_info->fv_aft_af):(af_info->fv_aft_af-ave_fv);
-	delta_fv = delta_fv*(unsigned long long)1024;
-	delta_fv = div64(delta_fv,af_alg->deta_ave_ratio);
-	if(delta_fv > af_info->fv_aft_af){
-		pr_info("1 delta_fv*1024/ave_ratio=%llu,last_ave_fv=%llu.\n",delta_fv,af_info->fv_aft_af);
+	delta_fv = af_info->fv_aft_af*af_alg->delta_fv_ratio;
+	delta_fv = div64(delta_fv,100);
+	if(ave_fv < delta_fv){
+		pr_info("true: delta_fv=%llu,last_fv=%llu.\n",delta_fv,af_info->fv_aft_af);
 		ret = true;
 	}else{
 		ret = false;
 		if(af_sm_dg&0x1)
-			pr_info("2 delta_fv*1024/ave_ratio=%llu,last_ave_fv=%llu.\n",delta_fv,af_info->fv_aft_af);
+			pr_info("false: delta_fv=%llu,last_fv=%llu.\n",delta_fv,af_info->fv_aft_af);
 	}
 
 
@@ -1007,17 +1032,21 @@ void isp_af_detect(isp_dev_t *devp)
 	
 	switch(sm_state.af_state){
 		case AF_DETECT_INIT:
+			isp_set_blenr_stat(af_info->x0,af_info->y0,af_info->x1,af_info->y1);
 			af_info->f = af_info->af_detect;
 			af_info->cur_index = 0;
 			sm_state.af_state = AF_GET_STEPS_INFO;
 			break;
 		case AF_GET_STEPS_INFO:	
-			if(af_info->cur_index >= af_alg->detect_step_cnt){
+			if(af_info->adj_duration_cnt++ >= af_alg->af_duration_cnt){
+				af_info->adj_duration_cnt = af_alg->af_duration_cnt;
+				if(af_info->cur_index >= af_alg->detect_step_cnt){
 					af_info->cur_index = 0;
 					sm_state.af_state = AF_GET_STATUS;
-					pr_info("%s get info end.\n",__func__);
-			} else {
-				af_info->cur_index++;
+					pr_info("%s get info end duration cnt %u.\n",__func__,af_info->adj_duration_cnt);
+				} else {
+					af_info->cur_index++;
+				}
 			}
 			break;
 		case AF_GET_STATUS:
@@ -1141,14 +1170,20 @@ void isp_af_sm(isp_dev_t *devp)
 					if(af_sm_dg&0x1)
 						pr_info("[af_sm..]:fail ratio %u over,force to step 0.\n",af_alg->af_fail_ratio);
 					af_info->af_retry_cnt = 0;
+					af_info->adj_duration_cnt = 0;
+					af_info->last_move = false;
 					devp->flag &=(~ISP_FLAG_TOUCH_AF);
 					sm_state.af_state = AF_DETECT_INIT;
+					isp_set_blenr_stat(af_info->x0,af_info->y0,af_info->x1,af_info->y1);
 				} else {/*af success*/
 					/*enable awb,enable af*/
 				        devp->flag |= af_info->flag_bk;
 					af_info->af_retry_cnt = 0;
+					af_info->adj_duration_cnt = 0;
+					af_info->last_move = false;
 					devp->flag &=(~ISP_FLAG_TOUCH_AF);
 					sm_state.af_state = AF_DETECT_INIT;
+					isp_set_blenr_stat(af_info->x0,af_info->y0,af_info->x1,af_info->y1);
 				}
 			}
 			break;
diff --git a/include/linux/amlogic/tvin/tvin_v4l2.h b/include/linux/amlogic/tvin/tvin_v4l2.h
index 201695b8dbfa..7a46513d17b8 100755
--- a/include/linux/amlogic/tvin/tvin_v4l2.h
+++ b/include/linux/amlogic/tvin/tvin_v4l2.h
@@ -419,17 +419,21 @@ typedef struct xml_algorithm_awb_s {
         unsigned int           thr_v[20];       // 0 ~ 255
 } xml_algorithm_awb_t;
 
-#define AF_PARM_NUM			19
+#define AF_PARM_NUM			16
 
-#define FOCUS_GRIDS 16
+#define FOCUS_GRIDS 17
 
 typedef struct xml_algorithm_af_s {
 	/*for lose focus*/
 	unsigned int	       enter_move_ratio;//10bit/1024
 	unsigned int	       enter_static_ratio;//10bit/1024
 	unsigned int	       detect_step_cnt;
-	unsigned int           fv_fail_ratio;//10bits/1024
-	unsigned int           deta_ave_ratio;//10bits/1024
+	unsigned int           ave_vdc_thr;//the threshold of enter move
+	unsigned int           delta_fv_ratio;//100
+	unsigned int	       af_duration_time;// 0.1s
+	unsigned int	       af_duration_cnt;// calc base on duration time
+	/*full scan & detect window ratio*/
+	unsigned int	       win_ratio;//cut 4 border in top bottom left right widht=1/ratio
     /*for climbing algorithm*/
 	unsigned int           step[FOCUS_GRIDS];
 	unsigned int	       valid_step_cnt;
@@ -688,16 +692,6 @@ typedef enum bt_path_e {
 	BT_PATH_CSI2,
 } bt_path_t;
 
-typedef enum clk_channel_e {
-	CLK_CHANNEL_A=0,
-	CLK_CHANNEL_B,
-}clk_channel_t;
-
-typedef enum cam_interface_e {
-	CAM_DVP=0,
-	CAM_MIPI,
-}cam_interface_t;
-
 // ***************************************************************************
 // *** IOCTL command definitions *****************************************
 // ***************************************************************************
@@ -712,23 +706,7 @@ typedef enum cam_interface_e {
 #define CAMERA_IOC_START_CAPTURE_PARA     _IOR(CAMERA_IOC_MAGIC, 0x05, struct camera_info_s)
 #define CAMERA_IOC_STOP_CAPTURE_PARA     _IOR(CAMERA_IOC_MAGIC, 0x06, struct camera_info_s)
 
-typedef struct csi_parm_s {
-        //am_csi2_hw_t            *hw_info;
-        unsigned char lanes;
-        unsigned char channel;
-        unsigned char mode;
-        unsigned char clock_lane_mode; // 0 clock gate 1: always on
-        unsigned active_pixel;
-        unsigned active_line;
-        unsigned frame_size;
-        unsigned ui_val; //ns
-        unsigned hs_freq; //hz
-        unsigned urgent;
-
-        clk_channel_t           clk_channel;
-        unsigned int            skip_frames;
-        tvin_color_fmt_t        csi_ofmt;
-}csi_parm_t;
+
 
 //add for vdin called by backend driver
 typedef struct vdin_parm_s {
@@ -752,8 +730,6 @@ typedef struct vdin_parm_s {
 	unsigned short  dest_hactive;//for vdin scale down
 	unsigned short  dest_vactive;
 	unsigned short	skip_count;//for skip frame
-
-        struct csi_parm_s csi_hw_info;
 	/*for reserved*/
         unsigned int    reserved;
 } vdin_parm_t;
-- 
2.19.0

