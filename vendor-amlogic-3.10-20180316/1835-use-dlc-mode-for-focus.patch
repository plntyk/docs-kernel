From 13fa3356b4b293647cc854bbde02582fc42ec3ba Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Tue, 12 Nov 2013 15:50:43 +0800
Subject: [PATCH 1835/5965] use dlc mode for focus.

---
 drivers/amlogic/camera/ov5647.c        | 49 +++++++++++++++++----
 drivers/amlogic/tvin/isp/isp_drv.c     | 11 ++---
 drivers/amlogic/tvin/isp/isp_drv.h     |  4 +-
 drivers/amlogic/tvin/isp/isp_parm.c    |  2 +-
 drivers/amlogic/tvin/isp/isp_sm.c      | 60 ++++++++++++--------------
 include/linux/amlogic/tvin/tvin_v4l2.h |  2 +-
 6 files changed, 80 insertions(+), 48 deletions(-)

diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index 7284530e5d66..7bd32a499ef0 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -1991,12 +1991,9 @@ static bool OV5647_check_mains_freq(void){// when the fr change,we need to chang
 bool OV5647_set_af_new_step(unsigned int af_step){
     struct i2c_adapter *adapter;
     char buf[3];
-    unsigned int diff = 0;
-    int codes;
-    unsigned int vcm_data = 0;
-    unsigned char byte_h, byte_l;
     if(af_step == last_af_step)
         return true;
+	/*
     diff = (af_step > last_af_step) ? af_step - last_af_step : last_af_step - af_step;
     last_af_step = af_step;
     if(diff < 256){
@@ -2009,9 +2006,10 @@ bool OV5647_set_af_new_step(unsigned int af_step){
     vcm_data |= (last_af_step << 4);  // bit[4:13]
     byte_h  = (vcm_data >> 8) & 0x000000ff;
     byte_l  = (vcm_data >> 0) & 0x000000ff;
-
-    buf[0] = byte_h;
-    buf[1] = byte_l;
+*/
+	last_af_step = af_step;
+    buf[0] = (af_step>>4)&0xff;
+    buf[1] = (af_step<<4)&0xff;
     adapter = i2c_get_adapter(4);
     my_i2c_put_byte_add8(adapter,0x0c,buf,2);
     return true;
@@ -2272,6 +2270,40 @@ void OV5647_init_regs(struct ov5647_device *dev)
 	
 	return;
 }
+/*init for vcm  mode0:LSC mode1:DLC*/
+static void dw9714_init(unsigned char mode)
+{
+	char buf[3];
+	unsigned short dlc[4] = {
+		0xeca3,0xf248,0xa10d,0xdc51
+	};
+	struct i2c_adapter *adapter;
+	adapter = i2c_get_adapter(4);
+	if(mode){
+		buf[0]=dlc[0]>>8&&0xff;
+		buf[1]=dlc[0]&&0xff;
+    	        my_i2c_put_byte_add8(adapter,0x0c,buf,2);
+		buf[0]=dlc[1]>>8&&0xff;
+		buf[1]=dlc[1]&&0xff;
+    	        my_i2c_put_byte_add8(adapter,0x0c,buf,2);
+		buf[0]=dlc[2]>>8&&0xff;
+		buf[1]=dlc[2]&&0xff;
+    	        my_i2c_put_byte_add8(adapter,0x0c,buf,2);
+		buf[0]=dlc[3]>>8&&0xff;
+		buf[1]=dlc[3]&&0xff;
+    	        my_i2c_put_byte_add8(adapter,0x0c,buf,2);
+	}
+}
+/* power down for dw9714*/
+static void dw9714_uninit(void)
+{
+        char buf[3];
+	struct i2c_adapter *adapter;
+	buf[0] = 0x80;
+	buf[1] = 0x0;
+	adapter = i2c_get_adapter(4);
+	my_i2c_put_byte_add8(adapter,0x0c,buf,2);
+}
 /*************************************************************************
 * FUNCTION
 *    OV5647_set_param_wb
@@ -2700,7 +2732,6 @@ static int set_focus_zone(struct ov5647_device *dev, int value)
 	
 	dev->cam_para->xml_scenes->af.x = tx;
 	dev->cam_para->xml_scenes->af.y = ty;	
-	dev->cam_para->xml_scenes->af.radius = (ov5647_v_active>>5);
 	dev->cam_para->cam_command = CAM_COMMAND_TOUCH_WINDOW;
 	dev->fe_arg.port = TVIN_PORT_ISP;
 	dev->fe_arg.index = 0;
@@ -3632,6 +3663,7 @@ static int ov5647_open(struct file *file)
     }
     OV5647_init_regs(dev);
     msleep(40);
+    dw9714_init(1);
     mutex_lock(&dev->mutex);
     dev->users++;
     if (dev->users > 1) {
@@ -3787,6 +3819,7 @@ static int ov5647_close(struct file *file)
     //ov5647_frmintervals_active.numerator = 1;
     //ov5647_frmintervals_active.denominator = 15;
     power_down_ov5647(dev);
+    dw9714_uninit();
     msleep(10);
 
     aml_cam_uninit(&dev->cam_info);
diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index 21f90fccbe5f..a43f9184552b 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -755,11 +755,13 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 		devp->isp_af_parm->delta_fv_ratio = 0;
 		devp->isp_af_parm->af_duration_time = 1;//0.5s
 		/*window for full scan & detect*/
+		devp->isp_af_parm->radius_ratio = 8;
 		devp->isp_af_parm->win_ratio = 4;
 		devp->af_info.x0 = info->h_active/devp->isp_af_parm->win_ratio;
 		devp->af_info.y0 = info->v_active/devp->isp_af_parm->win_ratio;
 		devp->af_info.x1 = info->h_active - devp->af_info.x0;
 		devp->af_info.y1 = info->v_active - devp->af_info.y0;
+		devp->af_info.radius = info->h_active/devp->isp_af_parm->radius_ratio;
 		devp->af_info.af_detect = kmalloc(sizeof(isp_blnr_stat_t)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
 		devp->af_info.fv = kmalloc(sizeof(unsigned long long)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
 		devp->af_info.v_dc = kmalloc(sizeof(unsigned long long)*devp->isp_af_parm->detect_step_cnt,GFP_KERNEL);
@@ -892,11 +894,10 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 			//devp->isp_af_parm = &param->xml_scenes->af;
 			devp->isp_af_parm->x = param->xml_scenes->af.x;
 			devp->isp_af_parm->y = param->xml_scenes->af.y;
-			devp->isp_af_parm->radius = param->xml_scenes->af.radius;
-			x0 = devp->isp_af_parm->x>devp->isp_af_parm->radius?devp->isp_af_parm->x-devp->isp_af_parm->radius:0;
-			y0 = devp->isp_af_parm->y>devp->isp_af_parm->radius?devp->isp_af_parm->y-devp->isp_af_parm->radius:0;
-			x1 = devp->isp_af_parm->x + devp->isp_af_parm->radius;
-			y1 = devp->isp_af_parm->y + devp->isp_af_parm->radius;
+			x0 = devp->isp_af_parm->x>devp->af_info.radius?devp->isp_af_parm->x-devp->af_info.radius:0;
+			y0 = devp->isp_af_parm->y>devp->af_info.radius?devp->isp_af_parm->y-devp->af_info.radius:0;
+			x1 = devp->isp_af_parm->x + devp->af_info.radius;
+			y1 = devp->isp_af_parm->y + devp->af_info.radius;
 			if(ioctl_debug)
 				pr_info("focus win: center(%u,%u) left(%u %u) right(%u,%u).\n",devp->isp_af_parm->x,
 					devp->isp_af_parm->y,x0,y0,x1,y1);
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index 3c138dad71e4..2c6d22a7e8cd 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -28,7 +28,7 @@
 #include "isp_hw.h"
 #include "../tvin_frontend.h"
 
-#define ISP_VER					"2013.11.11a"
+#define ISP_VER					"2013.11.12a"
 #define ISP_NUM					1
 #define DEVICE_NAME 			        "isp"
 
@@ -118,6 +118,8 @@ typedef struct isp_af_info_s {
 	unsigned int y0;
 	unsigned int x1;
 	unsigned int y1;
+	/*touch window radius*/
+	unsigned int radius;
 	/* blnr tmp for isr*/
 	isp_blnr_stat_t isr_af_data;
 }isp_af_info_t;
diff --git a/drivers/amlogic/tvin/isp/isp_parm.c b/drivers/amlogic/tvin/isp/isp_parm.c
index a5941e05158f..218de3bfe687 100755
--- a/drivers/amlogic/tvin/isp/isp_parm.c
+++ b/drivers/amlogic/tvin/isp/isp_parm.c
@@ -233,7 +233,7 @@ void set_af_parm(xml_algorithm_af_t *af_sw,char **parm)
 		{"af_fail_ratio",         &af_sw->af_fail_ratio,           1, ISP_U32},
 		{"x",                     &af_sw->x,      			       1, ISP_U32},
 		{"y",                     &af_sw->y,      			       1, ISP_U32},
-		{"radius",                &af_sw->radius,     		       1, ISP_U32},
+		{"radius_ratio",          &af_sw->radius_ratio,     		       1, ISP_U32},
 	};
 	
 	if(!strcmp(parm[0],"show")){
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index d8c52dcdce2f..a8b97f68b324 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -872,21 +872,22 @@ static unsigned int max_vibrate = 2000;
 module_param(max_vibrate,uint,0664);
 MODULE_PARM_DESC(max_vibrate,"\n threshold for vibrate sum.\n");
 
-static unsigned int get_best_step(isp_blnr_stat_t *blnr,unsigned int *step)
+static unsigned int get_best_step(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 {
-        unsigned int i = 0, cur_grid = 0, max_grid = 0, best_step = 0;
-        unsigned long long sum_ac = 0, sum_dc = 0, mul_ac = 0, fv[FOCUS_GRIDS], max_fv = 0, min_fv = 0xffffffffffffffff, sum_fv = 0,moment = 0;
+        unsigned int i = 0, j = 0,cur_grid = 0, max_grid = 0, best_step = 0;
+        unsigned long long sum_ac = 0, sum_pixel=0,sum_dc = 0, ave_dc = 0,mul_ac = 0, fv[FOCUS_GRIDS], max_fv = 0, min_fv = 0xffffffffffffffff, sum_fv = 0,moment = 0;
 		unsigned long long fv_diff_sum=0,fv_ave=0,fv_sum=0,diff_fv_parm;
 		if(best_step_debug&0x2)				
 			pr_info("%s ac[0] ac[1] ac[2] ac[3] dc[0] dc[1] dc[2] dc[3]\n", __func__);
-        for (i = 0; i < FOCUS_GRIDS; i++){
-                if (i && (step[i]==0)){
+        for (i = 0; i < af_alg->valid_step_cnt; i++){
+                if (i && (af_alg->step[i]==0)){
                         break;
                 }
                 max_grid = i;
-                fv[i] = get_fv_base_blnr(&blnr[i]);
+                fv[i] = get_fv_base_blnr(&af_info->af_data[i]);
 	        if(best_step_debug&0x2)
-                        pr_info("%s %u %u %u %u %u %u %u %u\n", __func__, blnr[i].ac[0], blnr[i].ac[1], blnr[i].ac[2], blnr[i].ac[3], blnr[i].dc[0], blnr[i].dc[1], blnr[i].dc[2], blnr[i].dc[3]);
+                        pr_info("%s %u %u %u %u %u %u %u %u\n", __func__, af_info->af_data[i].ac[0], af_info->af_data[i].ac[1], af_info->af_data[i].ac[2], 
+                        af_info->af_data[i].ac[3], af_info->af_data[i].dc[0], af_info->af_data[i].dc[1], af_info->af_data[i].dc[2], af_info->af_data[i].dc[3]);
                 if (max_fv < fv[i]){
 		        max_fv = fv[i];
 		        cur_grid = i;
@@ -895,10 +896,14 @@ static unsigned int get_best_step(isp_blnr_stat_t *blnr,unsigned int *step)
 			min_fv = fv[i];
 		if(i>=1)
 			fv_diff_sum += isp_abs64(fv[i-1],fv[i]);
+		for(j=0;j<4;j++)
+			sum_dc += af_info->af_data[i].dc[j];
         }
+		sum_pixel = (af_info->radius*af_info->radius)<<2;
+		ave_dc = div64(sum_dc,sum_pixel);
 		diff_fv_parm = div64((fv_diff_sum*1024),(max_fv-min_fv));
 		if(best_step_debug)
-			pr_info("%s diff_fv_parm %llu,fv_diff_sum %llu,fv_fall %llu.\n",__func__,diff_fv_parm,fv_diff_sum,(max_fv-min_fv));
+			pr_info("%s ave_dc=%llu,sum_pixel=%u,sum_dc=%llu.\n",__func__,ave_dc,sum_pixel,sum_dc);
 		if(diff_fv_parm > max_vibrate){
 			pr_info("%s diff_fv_parm %llu>%u, return 0.\n",__func__,diff_fv_parm,max_vibrate);
 			return 0;
@@ -909,13 +914,13 @@ static unsigned int get_best_step(isp_blnr_stat_t *blnr,unsigned int *step)
         }
         // too much stroke
         else if (cur_grid == max_grid){
-	        best_step = step[max_grid];
+	        best_step = af_alg->step[max_grid];
 	}
 	// work out best step with 3 grids
 	else if ((cur_grid == 1) || (cur_grid == max_grid - 1)){
-                moment += fv[cur_grid - 1]*(unsigned long long)step[cur_grid - 1];
-                moment += fv[cur_grid    ]*(unsigned long long)step[cur_grid    ];
-                moment += fv[cur_grid + 1]*(unsigned long long)step[cur_grid + 1];
+                moment += fv[cur_grid - 1]*(unsigned long long)af_alg->step[cur_grid - 1];
+                moment += fv[cur_grid    ]*(unsigned long long)af_alg->step[cur_grid    ];
+                moment += fv[cur_grid + 1]*(unsigned long long)af_alg->step[cur_grid + 1];
                 sum_fv += fv[cur_grid - 1];
                 sum_fv += fv[cur_grid    ];
                 sum_fv += fv[cur_grid + 1];
@@ -923,11 +928,11 @@ static unsigned int get_best_step(isp_blnr_stat_t *blnr,unsigned int *step)
 	}
 	// work out best step with 5 grids
         else {
-                moment += (unsigned long long)fv[cur_grid - 2]*(unsigned long long)step[cur_grid - 2];
-                moment += (unsigned long long)fv[cur_grid - 1]*(unsigned long long)step[cur_grid - 1];
-                moment += (unsigned long long)fv[cur_grid    ]*(unsigned long long)step[cur_grid    ];
-                moment += (unsigned long long)fv[cur_grid + 1]*(unsigned long long)step[cur_grid + 1];
-                moment += (unsigned long long)fv[cur_grid + 2]*(unsigned long long)step[cur_grid + 2];
+                moment += (unsigned long long)fv[cur_grid - 2]*(unsigned long long)af_alg->step[cur_grid - 2];
+                moment += (unsigned long long)fv[cur_grid - 1]*(unsigned long long)af_alg->step[cur_grid - 1];
+                moment += (unsigned long long)fv[cur_grid    ]*(unsigned long long)af_alg->step[cur_grid    ];
+                moment += (unsigned long long)fv[cur_grid + 1]*(unsigned long long)af_alg->step[cur_grid + 1];
+                moment += (unsigned long long)fv[cur_grid + 2]*(unsigned long long)af_alg->step[cur_grid + 2];
                 sum_fv += fv[cur_grid - 2];
                 sum_fv += fv[cur_grid - 1];
                 sum_fv += fv[cur_grid    ];
@@ -977,7 +982,7 @@ static bool is_lost_focus(isp_af_info_t *af_info,xml_algorithm_af_t *af_alg)
 	
 	static_cnt = 0;
 	for(i=0;i<af_alg->detect_step_cnt;i++){
-		delta_dc = v_dc[i]>ave_vdc?v_dc[i]-ave_vdc:ave_vdc-v_dc[i];
+		delta_dc = isp_abs64(v_dc[i],ave_vdc);
 		tmp_vdc1 = div64(delta_dc*1024,af_alg->enter_move_ratio);
 		tmp_vdc2 = div64(delta_dc*1024,af_alg->enter_static_ratio);
 		if(tmp_vdc1 > ave_vdc){
@@ -1067,8 +1072,7 @@ void isp_af_detect(isp_dev_t *devp)
 				sm_state.af_state = AF_INIT;
 				if(af_sm_dg)
 					pr_info("[af_sm]:lost focus.\n");
-			}
-			if(++af_info->cur_index >= af_alg->detect_step_cnt){
+			}else if(++af_info->cur_index >= af_alg->detect_step_cnt){
 				af_info->cur_index = 0;
 			}
 			break;
@@ -1129,7 +1133,7 @@ void isp_af_sm(isp_dev_t *devp)
 			} 
 			break;
 		case AF_CALC_GREAT:
-			af_info->great_step = get_best_step(af_info->af_data,af_alg->step);
+			af_info->great_step = get_best_step(af_info,af_alg);
 			af_info->cur_step = af_info->great_step - af_alg->jump_offset;
 			atomic_set(&af_info->writeable,1);
 			af_delay = 0;
@@ -1146,16 +1150,9 @@ void isp_af_sm(isp_dev_t *devp)
 		case AF_SUCCESS:
 			if(af_delay >= 2){
 				/*get last blnr*/
-				af_info->last_blnr.ac[0] = af_info->af_data[af_info->cur_index].ac[0];
-				af_info->last_blnr.ac[1] = af_info->af_data[af_info->cur_index].ac[1];
-				af_info->last_blnr.ac[2] = af_info->af_data[af_info->cur_index].ac[2];
-				af_info->last_blnr.ac[3] = af_info->af_data[af_info->cur_index].ac[3];
-				af_info->last_blnr.dc[0] = af_info->af_data[af_info->cur_index].dc[0];
-				af_info->last_blnr.dc[1] = af_info->af_data[af_info->cur_index].dc[1];
-				af_info->last_blnr.dc[2] = af_info->af_data[af_info->cur_index].dc[2];
-				af_info->last_blnr.dc[3] = af_info->af_data[af_info->cur_index].dc[3];
+				memcpy(&af_info->last_blnr,&af_info->isr_af_data,sizeof(isp_blnr_stat_t));
 		                /* get last fv */
-		                af_info->fv_aft_af = get_fv_base_blnr(&af_info->af_data[af_info->cur_index]);
+		                af_info->fv_aft_af = get_fv_base_blnr(&af_info->last_blnr);
 			        if(af_sm_dg&0x2){
 				        pr_info("[af] last blnr:ac0=%u ac1=%u ac2=%u ac3=%u dc0=%u dc1=%u dc2=%u dc3=%u fv=%llu.\n",
 				                af_info->af_data[af_info->cur_index].ac[0],af_info->af_data[af_info->cur_index].ac[1],
@@ -1163,8 +1160,7 @@ void isp_af_sm(isp_dev_t *devp)
 					        af_info->af_data[af_info->cur_index].dc[0],af_info->af_data[af_info->cur_index].dc[1],
 					        af_info->af_data[af_info->cur_index].dc[2],af_info->af_data[af_info->cur_index].dc[3],af_info->fv_aft_af);
 				}
-				fv_delta = af_info->fv_aft_af>af_info->fv_bf_af?(af_info->fv_aft_af-af_info->fv_bf_af):(af_info->fv_bf_af-af_info->fv_aft_af);
-				fv_delta = fv_delta*100;
+				fv_delta = af_info->fv_bf_af*100;
 				fv_delta = div64(fv_delta,af_alg->af_fail_ratio);
 				/*af failed return to af init,retry*/
 				if(af_sm_dg&0x1){
diff --git a/include/linux/amlogic/tvin/tvin_v4l2.h b/include/linux/amlogic/tvin/tvin_v4l2.h
index 27219e95362d..2a7bebee073c 100755
--- a/include/linux/amlogic/tvin/tvin_v4l2.h
+++ b/include/linux/amlogic/tvin/tvin_v4l2.h
@@ -444,7 +444,7 @@ typedef struct xml_algorithm_af_s {
 	/*window for touch focus*/
 	unsigned int	       x;//x coord of touch focus win
 	unsigned int	       y;//y coord of touch focus win
-	unsigned int           radius;//radius of touch focus win
+	unsigned int           radius_ratio;//radius of touch focus win
 } xml_algorithm_af_t;
 
 #define XML_LUT_LS 1024 // 32*32 32-bit
-- 
2.19.0

