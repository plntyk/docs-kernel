From 2f50a22ed2fb074b5c5d67719d3ab9ba207d61f8 Mon Sep 17 00:00:00 2001
From: "frank.zhao" <frank.zhao@amlogic.com>
Date: Thu, 14 Nov 2013 12:19:21 +0800
Subject: [PATCH 1943/5965] modify lens-shading debug function.

---
 drivers/amlogic/tvin/isp/isp_drv.c | 63 +++++++++++++++---------------
 drivers/amlogic/tvin/isp/isp_hw.c  | 31 ++++++++-------
 2 files changed, 49 insertions(+), 45 deletions(-)

diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index 2c7b2ac3c0a2..7bcb83c4f777 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -623,28 +623,27 @@ static ssize_t gamma_store(struct class *cls,
 
 static DEVICE_ATTR(gamma, 0664, gamma_show, gamma_store);
 
-
-static ssize_t ls_show(struct class *cls,struct class_attribute *attr,char *buf)
+static ssize_t ls_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
-	pr_info("Usage:");
-	pr_info("	echo psize_v2h ocenter_c2l ocenter_c2t gain_0db curvature_gr curvature_r curvature_b curvature_gb force_enable > ...\n");
-	pr_info("Notes:");
-	pr_info(" Path: /sys/class/isp/isp0/lens");
-	pr_info("Example:");
-	pr_info(" echo 100 50 50 128 120 120 120 120 1 > /sys/class/isp/isp0/lens \n");
-	
-	return 0;
+    ssize_t len = 0;
+    
+    len += sprintf(buf+len," command format:\n");
+    len += sprintf(buf+len," echo psize_v2h ocenter_c2l ocenter_c2t gain_0db curvature_gr curvature_r curvature_b curvature_gb force_enable > ... \n");
+
+    len += sprintf(buf+len," Example:\n");
+    len += sprintf(buf+len," echo enable 100 50 50 0 120 120 120 120 1 > /sys/class/isp/isp0/lens \n");
+     
+    return len;	
 }
 
-static ssize_t ls_store(struct class *cls,
-			 struct class_attribute *attr,
-			 const char *buffer, size_t count)
+static ssize_t ls_store(struct device *dev,struct device_attribute *attr,const char *buf, size_t len)
 {
-
 	int n = 0;
 	char *buf_orig, *ps, *token;
-	char *parm[12] = {NULL};
-	int i = 0;
+	char *parm[10] = {NULL};
+    isp_dev_t *devp;
+	devp = dev_get_drvdata(dev);
+	isp_info_t *info = &devp->info;
     unsigned int psize_v2h,hactive,vactive,ocenter_c2l,ocenter_c2t,gain_0db, curvature_gr,curvature_r; 
     unsigned int curvature_b,curvature_gb; 
     bool force_enable;
@@ -652,7 +651,10 @@ static ssize_t ls_store(struct class *cls,
 	/* to avoid the bellow warning message while compiling:
 	 * warning: the frame size of 1576 bytes is larger than 1024 bytes
 	 */
-	buf_orig = kstrdup(buffer, GFP_KERNEL);
+    if(!buf)
+        return len;
+
+	buf_orig = kstrdup(buf, GFP_KERNEL);
 	ps = buf_orig;
 	while (1) {
 		token = strsep(&ps, " \n");
@@ -664,26 +666,25 @@ static ssize_t ls_store(struct class *cls,
 	}
 	if(!strcmp(parm[0],"enable")) {
 	    psize_v2h = simple_strtoul(     parm[1],NULL,10);
-	    hactive = simple_strtoul(       parm[2],NULL,10);
-	    vactive = simple_strtoul(       parm[3],NULL,10);
-	    ocenter_c2l = simple_strtoul(   parm[4],NULL,10);
-	    ocenter_c2t = simple_strtoul(   parm[5],NULL,10);
-	    gain_0db = simple_strtoul(      parm[6],NULL,10); 
-	    curvature_gr = simple_strtoul(  parm[7],NULL,10);
-	    curvature_r = simple_strtoul(   parm[8],NULL,10); 
-        curvature_b = simple_strtoul(   parm[9],NULL,10);
-        curvature_gb = simple_strtoul(  parm[10],NULL,10);   
-        force_enable = simple_strtoul(  parm[11],NULL,10);
+	    ocenter_c2l = simple_strtoul(   parm[2],NULL,10);
+	    ocenter_c2t = simple_strtoul(   parm[3],NULL,10);
+	    gain_0db = simple_strtoul(      parm[4],NULL,10); 
+	    curvature_gr = simple_strtoul(  parm[5],NULL,10);
+	    curvature_r = simple_strtoul(   parm[6],NULL,10); 
+        curvature_b = simple_strtoul(   parm[7],NULL,10);
+        curvature_gb = simple_strtoul(  parm[8],NULL,10);   
+        force_enable = simple_strtoul(  parm[9],NULL,10);
         
-        pr_info("psize_v2h:%u hactive:%u vactive:%u ocenter_c2l:%u :ocenter_c2t:%u :gain_0db:%u curvature_gr:%u ;curvature_r:%u curvature_b:%u curvature_gb:%u force_enable:%u \n", psize_v2h,hactive,vactive,ocenter_c2l,ocenter_c2t,gain_0db, \
-            curvature_gr,curvature_r, curvature_b,curvature_gb,force_enable);
+        pr_info("psize_v2h:%u hactive:%u vactive:%u ocenter_c2l:%u ocenter_c2t:%u gain_0db:%u curvature_gr:%u curvature_r:%u curvature_b:%u curvature_gb:%u force_enable:%u \n", \
+            psize_v2h,info->h_active,info->v_active,ocenter_c2l,ocenter_c2t,gain_0db, \
+            curvature_gr,curvature_r, curvature_b,curvature_gb,force_enable);        
             
-        isp_ls_curve(psize_v2h,hactive,vactive,ocenter_c2l,ocenter_c2t,gain_0db, \
+        isp_ls_curve(psize_v2h,info->h_active,info->v_active,ocenter_c2l,ocenter_c2t,gain_0db, \
             curvature_gr,curvature_r, curvature_b,curvature_gb,force_enable);
     }
 	kfree(buf_orig);
 
-	return count;
+	return len;
 }
 
 static DEVICE_ATTR(lens, 0664, ls_show, ls_store);
diff --git a/drivers/amlogic/tvin/isp/isp_hw.c b/drivers/amlogic/tvin/isp/isp_hw.c
index 790eff01f780..3aa5006c3129 100755
--- a/drivers/amlogic/tvin/isp/isp_hw.c
+++ b/drivers/amlogic/tvin/isp/isp_hw.c
@@ -877,15 +877,18 @@ void isp_ls_curve(unsigned int psize_v2h,    // pixel_size_percentage_vertical_t
     unsigned int i = 0, j = 0, dx = 0, dy = 0, data = 0, control = READ_VCBUS_REG(0x2d28);
   
     // validation
-    if ((!psize_v2h) || (psize_v2h > 100))
+    if ((psize_v2h < 50) || (psize_v2h > 200))
     {
         psize_v2h = 100;
+        pr_info(" pixel size too narrow!!!!! \n");
     }
+#if 0
     if ((!hactive) || (!vactive))
     {
         hactive = 1920;
         vactive = 1080;
-    }
+    }  
+#endif
     if ((!ocenter_c2l) || (ocenter_c2l > 100))
     {
         ocenter_c2l = 50;
@@ -937,13 +940,16 @@ void isp_ls_curve(unsigned int psize_v2h,    // pixel_size_percentage_vertical_t
     {
         yscale = 0x00000fff;
     }
+#if 0
     pr_info("hmax:%u vmax:%u hcenter:%u vcenter:%u rradium:%u xscale:%u yscale:%u \n", 
              hmax,vmax,hcenter,vcenter,rradium,xscale,yscale);
+#endif
     for (i = 0; i < 32; i++)
     {
         haxis[i] = (i*256*32*2 + xscale)/(xscale + xscale);
         vaxis[i] = (i*256*32*2 + yscale)/(yscale + yscale);
     }
+#if 0
     pr_info(" haxis----\n");
     pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u \n", \
          haxis[0], haxis[1], haxis[2], haxis[3], haxis[4], haxis[5], haxis[6], haxis[7], haxis[8], haxis[9], \
@@ -956,6 +962,7 @@ void isp_ls_curve(unsigned int psize_v2h,    // pixel_size_percentage_vertical_t
         vaxis[10],vaxis[11],vaxis[12],vaxis[13],vaxis[14],vaxis[15],vaxis[16],vaxis[17],vaxis[18],vaxis[19],\
         vaxis[20],vaxis[21],vaxis[22],vaxis[23],vaxis[24],vaxis[25],vaxis[26],vaxis[27],vaxis[28],vaxis[29],\
         vaxis[30],vaxis[31]);
+#endif
     // write lut
     WRITE_VCBUS_REG(0x2d28, control&0xefffffff); // disable lens shielding
     WRITE_VCBUS_REG(0x2d29, (xscale << 16)|
@@ -993,36 +1000,32 @@ void isp_ls_curve(unsigned int psize_v2h,    // pixel_size_percentage_vertical_t
         WRITE_VCBUS_REG_BITS(0x2d28, 0, LNS_CMOP_ENABLE_BIT, LNS_CMOP_ENABLE_WID);
     }
     pr_info(" Gb----\n");
-    for (i = 0; i < 32; i++)
-    {
-        pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u \n", \
+    for (i = 0; i < 32; i++) {
+        pr_info("%3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %u %3u %3u \n", \
          curve[i][0]&0xff, curve[i][1]&0xff, curve[i][2]&0xff, curve[i][3]&0xff, curve[i][4]&0xff, curve[i][5]&0xff, curve[i][6]&0xff, curve[i][7]&0xff, curve[i][8]&0xff, curve[i][9]&0xff, \
         curve[i][10]&0xff,curve[i][11]&0xff,curve[i][12]&0xff,curve[i][13]&0xff,curve[i][14]&0xff,curve[i][15]&0xff,curve[i][16]&0xff,curve[i][17]&0xff,curve[i][18]&0xff,curve[i][19]&0xff,\
         curve[i][20]&0xff,curve[i][21]&0xff,curve[i][22]&0xff,curve[i][23]&0xff,curve[i][24]&0xff,curve[i][25]&0xff,curve[i][26]&0xff,curve[i][27]&0xff,curve[i][28]&0xff,curve[i][29]&0xff,\
         curve[i][30]&0xff,curve[i][31]&0xff);
     }
     pr_info(" B----\n");
-        for (i = 0; i < 32; i++)
-    {
-        pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u \n", \
+    for (i = 0; i < 32; i++) {
+        pr_info("%3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %u %3u %3u \n", \
         ( curve[i][0]>>8)&0xff,( curve[i][1]>>8)&0xff,( curve[i][2]>>8)&0xff,( curve[i][3]>>8)&0xff,( curve[i][4]>>8)&0xff,( curve[i][5]>>8)&0xff,( curve[i][6]>>8)&0xff,( curve[i][7]>>8)&0xff,( curve[i][8]>>8)&0xff,( curve[i][9]>>8)&0xff, \
         (curve[i][10]>>8)&0xff,(curve[i][11]>>8)&0xff,(curve[i][12]>>8)&0xff,(curve[i][13]>>8)&0xff,(curve[i][14]>>8)&0xff,(curve[i][15]>>8)&0xff,(curve[i][16]>>8)&0xff,(curve[i][17]>>8)&0xff,(curve[i][18]>>8)&0xff,(curve[i][19]>>8)&0xff,\
         (curve[i][20]>>8)&0xff,(curve[i][21]>>8)&0xff,(curve[i][22]>>8)&0xff,(curve[i][23]>>8)&0xff,(curve[i][24]>>8)&0xff,(curve[i][25]>>8)&0xff,(curve[i][26]>>8)&0xff,(curve[i][27]>>8)&0xff,(curve[i][28]>>8)&0xff,(curve[i][29]>>8)&0xff,\
         (curve[i][30]>>8)&0xff,(curve[i][31]>>8)&0xff);
     }
     pr_info(" R----\n");
-        for (i = 0; i < 32; i++)
-    {
-        pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u \n", \
+    for (i = 0; i < 32; i++) {
+        pr_info("%3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %u %3u %3u \n", \
         ( curve[i][0]>>16)&0xff,( curve[i][1]>>16)&0xff,( curve[i][2]>>16)&0xff,( curve[i][3]>>16)&0xff,( curve[i][4]>>16)&0xff,( curve[i][5]>>16)&0xff,( curve[i][6]>>16)&0xff,( curve[i][7]>>16)&0xff,( curve[i][8]>>16)&0xff,( curve[i][9]>>16)&0xff, \
         (curve[i][10]>>16)&0xff,(curve[i][11]>>16)&0xff,(curve[i][12]>>16)&0xff,(curve[i][13]>>16)&0xff,(curve[i][14]>>16)&0xff,(curve[i][15]>>16)&0xff,(curve[i][16]>>16)&0xff,(curve[i][17]>>16)&0xff,(curve[i][18]>>16)&0xff,(curve[i][19]>>16)&0xff,\
         (curve[i][20]>>16)&0xff,(curve[i][21]>>16)&0xff,(curve[i][22]>>16)&0xff,(curve[i][23]>>16)&0xff,(curve[i][24]>>16)&0xff,(curve[i][25]>>16)&0xff,(curve[i][26]>>16)&0xff,(curve[i][27]>>16)&0xff,(curve[i][28]>>16)&0xff,(curve[i][29]>>16)&0xff,\
         (curve[i][30]>>16)&0xff,(curve[i][31]>>16)&0xff);
     }
     pr_info(" Gr----\n");
-        for (i = 0; i < 32; i++)
-    {
-        pr_info("%u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u %u \n", \
+    for (i = 0; i < 32; i++) {
+        pr_info("%3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %3u %u %3u %3u \n", \
         ( curve[i][0]>>24)&0xff,( curve[i][1]>>24)&0xff,( curve[i][2]>>24)&0xff,( curve[i][3]>>24)&0xff,( curve[i][4]>>24)&0xff,( curve[i][5]>>24)&0xff,( curve[i][6]>>24)&0xff,( curve[i][7]>>24)&0xff,( curve[i][8]>>24)&0xff,( curve[i][9]>>24)&0xff, \
         (curve[i][10]>>24)&0xff,(curve[i][11]>>24)&0xff,(curve[i][12]>>24)&0xff,(curve[i][13]>>24)&0xff,(curve[i][14]>>24)&0xff,(curve[i][15]>>24)&0xff,(curve[i][16]>>24)&0xff,(curve[i][17]>>24)&0xff,(curve[i][18]>>24)&0xff,(curve[i][19]>>24)&0xff,\
         (curve[i][20]>>24)&0xff,(curve[i][21]>>24)&0xff,(curve[i][22]>>24)&0xff,(curve[i][23]>>24)&0xff,(curve[i][24]>>24)&0xff,(curve[i][25]>>24)&0xff,(curve[i][26]>>24)&0xff,(curve[i][27]>>24)&0xff,(curve[i][28]>>24)&0xff,(curve[i][29]>>24)&0xff,\
-- 
2.19.0

