From b1e5d2824a40bbad4021a9f3f6435bdc4ae53963 Mon Sep 17 00:00:00 2001
From: "chunhai.guo" <chunhai.guo@amlogic.com>
Date: Mon, 18 Nov 2013 21:11:29 +0800
Subject: [PATCH 1974/5965] 1. PD81302: mmc: minimize pinctrl operations to
 reduce request handle time. 2. PD81917: fix cmd1 timeout problem when resume
 on K200-B.

---
 arch/arm/mach-meson8/include/mach/sd.h |   5 +-
 drivers/amlogic/mmc/aml_sdio.c         |  49 +++++----
 drivers/amlogic/mmc/amlsd.c            | 141 +++++++++++++++++++------
 drivers/amlogic/mmc/amlsd.h            |   2 +
 drivers/amlogic/mmc/amlsd_of.c         |   2 +-
 5 files changed, 142 insertions(+), 57 deletions(-)

diff --git a/arch/arm/mach-meson8/include/mach/sd.h b/arch/arm/mach-meson8/include/mach/sd.h
index 34147b91ee8f..9335a2f87735 100755
--- a/arch/arm/mach-meson8/include/mach/sd.h
+++ b/arch/arm/mach-meson8/include/mach/sd.h
@@ -181,13 +181,16 @@ struct amlsd_host {
 
     u32			opcode; // add by gch for debug
 	u32			arg; // add by gch for debug
-    u32         time_req_sta; // request start time
     
 #ifdef      CONFIG_MMC_AML_DEBUG
     u32         req_cnt;
+    u32         trans_size;
+    u32         time_req_sta; // request start time
 #endif
     
     struct pinctrl *pinctrl;
+    char pinctrl_name[30];
+
     int storage_flag; // used for judging if there is a tsd/emmc
 
     int         version; // bit[7-0]--minor version, bit[31-8]--major version
diff --git a/drivers/amlogic/mmc/aml_sdio.c b/drivers/amlogic/mmc/aml_sdio.c
index 7aa6d6115106..c6c733f708b1 100755
--- a/drivers/amlogic/mmc/aml_sdio.c
+++ b/drivers/amlogic/mmc/aml_sdio.c
@@ -304,10 +304,12 @@ static void aml_sdio_print_err (struct amlsd_host *host, char *msg)
     u32 virqc = readl(host->base + SDIO_IRQC);
     u32 vconf = readl(host->base + SDIO_CONF);
     struct sdio_config* conf = (void*)&vconf;
+    struct clk* clk_src = clk_get_sys("clk81", NULL);
+    u32 clk_rate = clk_get_rate(clk_src)/2;
 
     sdio_err("%s: %s, Cmd%d arg %08x Xfer %d Bytes, "
             "host->xfer_step=%d, host->cmd_is_stop=%d, pdata->port=%d, "
-            "virqs=%#0x, virqc=%#0x, conf->cmd_clk_divide=%#x, pdata->clkc=%d, "
+            "virqs=%#0x, virqc=%#0x, conf->cmd_clk_divide=%d, pdata->clkc=%d, "
             "conf->bus_width=%d, pdata->width=%d, clock=%d\n",
             mmc_hostname(host->mmc),
             msg,
@@ -322,15 +324,16 @@ static void aml_sdio_print_err (struct amlsd_host *host, char *msg)
             pdata->clkc,
             conf->bus_width,
             pdata->width,
-            pdata->mmc->actual_clock);    
+            clk_rate / (pdata->clkc + 1));    
 }
 
 /*setup delayed workstruct in aml_sdio_request*/
 static void aml_sdio_timeout(struct work_struct *data)
 {
+    static int timeout_cnt = 0;
+    unsigned long flags;
     //struct amlsd_host* host = (void*)data;
     struct amlsd_host *host = container_of(data, struct amlsd_host, timeout);
-    unsigned long flags;
     // struct mmc_request *mrq = host->mrq;
     u32 virqs = readl(host->base + SDIO_IRQS);
     struct sdio_status_irq* irqs = (void*)&virqs;
@@ -351,12 +354,18 @@ static void aml_sdio_timeout(struct work_struct *data)
         //mod_timer(&host->timeout_tlist, jiffies + 10);
         schedule_delayed_work(&host->timeout, 10);
         spin_unlock_irqrestore(&host->mrq_lock, flags);
-        if(irqs->sdio_cmd_int)
+        if(irqs->sdio_cmd_int) {
+            timeout_cnt++;
+            if (timeout_cnt > 100)
+                goto timeout_handle;
             sdio_err("%s: irq have been occured\n", mmc_hostname(host->mmc));
+        }
         else
             sdio_err("%s: isr have been run\n",  mmc_hostname(host->mmc));
 		return;
 	}
+timeout_handle:
+    timeout_cnt = 0;
 
     if (!(irqc->arc_cmd_int_en)) {
         sdio_err("%s: arc_cmd_int_en is not enable\n",  mmc_hostname(host->mmc));
@@ -499,6 +508,12 @@ void aml_sdio_request(struct mmc_host *mmc, struct mmc_request *mrq)
     if(aml_sdio_check_unsupport_cmd(mmc, mrq))
         return;
 
+	if(pdata->eject){
+        mrq->cmd->error = -ENOMEDIUM;
+        mmc_request_done(mmc, mrq);
+		return;
+	}
+
 #ifdef      CONFIG_MMC_AML_DEBUG
     if (host->req_cnt) {
         sdio_err("Reentry error! host->req_cnt=%d\n", host->req_cnt);
@@ -506,12 +521,6 @@ void aml_sdio_request(struct mmc_host *mmc, struct mmc_request *mrq)
 	host->req_cnt++;
 #endif
 
-	if(pdata->eject){
-        mrq->cmd->error = -ENOMEDIUM;
-        mmc_request_done(mmc, mrq);
-		return;
-	}
-
 	sdio_dbg(AMLSD_DBG_REQ ,"%s: starting CMD%u arg %08x flags %08x\n",
 		mmc_hostname(mmc), mrq->cmd->opcode,
 		mrq->cmd->arg, mrq->cmd->flags);
@@ -538,10 +547,10 @@ void aml_sdio_request(struct mmc_host *mmc, struct mmc_request *mrq)
 #endif
 
 	if(!mrq->data)
-		timeout = 100; //mod_timer(&host->timeout_tlist, jiffies + 100);
+		timeout = 100; //mod_timer(&host->timeout_tlist, jiffies + 100); // 1s
 	else
 		timeout = 500;//mod_timer(&host->timeout_tlist,
-				//jiffies + 500/*10*nsecs_to_jiffies(mrq->data->timeout_ns)*/);
+				//jiffies + 500/*10*nsecs_to_jiffies(mrq->data->timeout_ns)*/); // 5s
 
 	schedule_delayed_work(&host->timeout, timeout);
 
@@ -919,7 +928,7 @@ static irqreturn_t aml_irq_cdout_thread(int irq, void *data)
 
 static int aml_sdio_suspend(struct platform_device *pdev, pm_message_t state)
 {
-    int ret;
+    int ret = 0;
     int i;
 	struct amlsd_host *host = platform_get_drvdata(pdev);
 	struct mmc_host* mmc;
@@ -957,7 +966,7 @@ static int aml_sdio_suspend(struct platform_device *pdev, pm_message_t state)
 
 static int aml_sdio_resume(struct platform_device *pdev)
 {
-    int ret;
+    int ret = 0;
 	struct amlsd_host *host = platform_get_drvdata(pdev);
 	struct mmc_host* mmc;
 	struct amlsd_platform* pdata;
@@ -1026,6 +1035,7 @@ static struct amlsd_host* aml_sdio_init_host(void)
 
 #ifdef      CONFIG_MMC_AML_DEBUG
 	host->req_cnt = 0;
+    sdio_err("CONFIG_MMC_AML_DEBUG is on!\n");
 #endif
 	return host;
 }
@@ -1111,13 +1121,7 @@ static int aml_sdio_probe(struct platform_device *pdev)
        //init sdio reg here
         aml_sdio_init_param(pdata);
 
-        if (((pdata->port == MESON_SDIO_PORT_B) || (pdata->port == MESON_SDIO_PORT_XC_B)) && aml_is_sduart(pdata)){
-            if(pdata->caps & MMC_CAP_4_BIT_DATA) {
-                pdata->mmc->caps &= ~MMC_CAP_4_BIT_DATA;
-                aml_uart_switch(pdata, 1);
-                printk("\033[0;40;35m [%s] uart in, make sd card 1 bit bus width \033[0m\n", __FUNCTION__);
-            }
-        }
+        aml_sduart_detect(pdata);
 
 		ret = mmc_add_host(mmc);
 		if (ret) {
@@ -1187,6 +1191,9 @@ int aml_sdio_remove(struct platform_device *pdev)
 		mmc_remove_host(mmc);
 		mmc_free_host(mmc);
 	}
+    
+    aml_devm_pinctrl_put(host);
+
     kfree(host);
 	return 0;
 }
diff --git a/drivers/amlogic/mmc/amlsd.c b/drivers/amlogic/mmc/amlsd.c
index 93870bd2b304..4c44234d161d 100755
--- a/drivers/amlogic/mmc/amlsd.c
+++ b/drivers/amlogic/mmc/amlsd.c
@@ -688,6 +688,46 @@ int of_amlsd_init(struct amlsd_platform* pdata)
 	return 0;
 }
 
+int aml_devm_pinctrl_put (struct amlsd_host* host)
+{
+    if (host->pinctrl) {
+        devm_pinctrl_put(host->pinctrl);
+        host->pinctrl = NULL;
+        // sdio_err("Put Pinctrl\n");
+    }
+}
+
+static struct pinctrl * __must_check aml_devm_pinctrl_get_select (
+					struct amlsd_host* host, const char *name)
+{
+	struct pinctrl *p = host->pinctrl;
+	struct pinctrl_state *s;
+	int ret;
+
+    if (!p) {
+        p = devm_pinctrl_get(&host->pdev->dev);
+        if (IS_ERR(p)) {
+            return p;
+        }
+        host->pinctrl = p;
+        // sdio_err("switch %s\n", name);
+    }
+	
+	s = pinctrl_lookup_state(p, name);
+	if (IS_ERR(s)) {
+		devm_pinctrl_put(p);
+		return ERR_CAST(s);
+	}
+	
+	ret = pinctrl_select_state(p, s);
+	if (ret < 0) {
+		devm_pinctrl_put(p);
+		return ERR_PTR(ret);
+	}
+	
+	return p;
+}
+
 void of_amlsd_xfer_pre(struct amlsd_platform* pdata)
 {
     char pinctrl[30];
@@ -710,33 +750,43 @@ void of_amlsd_xfer_pre(struct amlsd_platform* pdata)
     } else { // MMC_CS_HIGH
         snprintf(p, sizeof(pinctrl)-size, "%s_clk_cmd_pins", pdata->pinname);
     }
+    
+    // if pinmux setting is changed (pinctrl_name is different)
+    if (strncmp(pdata->host->pinctrl_name, pinctrl, sizeof(pdata->host->pinctrl_name))) {
+        if (strlcpy(pdata->host->pinctrl_name, pinctrl, sizeof(pdata->host->pinctrl_name)) 
+                >= sizeof(pdata->host->pinctrl_name)) {
+            sdio_err("Pinctrl name is too long!\n");
+			return;
+		}
 
-    for (i = 0; i < 100; i++) {
-        ppin = devm_pinctrl_get_select(&pdata->host->pdev->dev, pinctrl);
-        if(!IS_ERR(ppin)) {
-            pdata->host->pinctrl = ppin;
-            break;
+        for (i = 0; i < 100; i++) {
+            // ppin = devm_pinctrl_get_select(&pdata->host->pdev->dev, p);
+            ppin = aml_devm_pinctrl_get_select(pdata->host, pinctrl);
+            if(!IS_ERR(ppin)) {
+                // pdata->host->pinctrl = ppin;
+                break;
+            }
+            /* else -> aml_irq_cdin_thread() should be using one of the GPIO of card,
+             * then we should wait here until the GPIO is free,
+             * otherwise something must be wrong.
+             */
+            mdelay(1);
         }
-        /* else -> aml_irq_cdin_thread() should be using one of the GPIO of card,
-         * then we should wait here until the GPIO is free,
-         * otherwise something must be wrong.
-         */
-        mdelay(1);
-    }
-    if (i == 100) {
-        sdhc_err("CMD%d: get pinctrl fail.\n", pdata->host->opcode);
+        if (i == 100) {
+            sdhc_err("CMD%d: get pinctrl fail.\n", pdata->host->opcode);
+        }
+        //printk("pre pinctrl %x, %s, ppin %x\n", pdata->host->pinctrl, p, ppin);
     }
-    //printk("pre pinctrl %x, %s, ppin %x\n", pdata->host->pinctrl, p, ppin);
 }
 
 void of_amlsd_xfer_post(struct amlsd_platform* pdata)
 {
-    if (pdata->host->pinctrl) {
-        devm_pinctrl_put(pdata->host->pinctrl);
-        pdata->host->pinctrl = NULL;
-    } else {
-        sdhc_err("CMD%d: pdata->host->pinctrl = NULL\n", pdata->host->opcode);
-    }
+    // if (pdata->host->pinctrl) {
+        // devm_pinctrl_put(pdata->host->pinctrl);
+        // pdata->host->pinctrl = NULL;
+    // } else {
+        // sdhc_err("CMD%d: pdata->host->pinctrl = NULL\n", pdata->host->opcode);
+    // }
     // printk(KERN_ERR "CMD%d: put pinctrl\n", pdata->host->opcode);
     // aml_dbg_print_pinmux(); // for debug
 }
@@ -780,7 +830,7 @@ void aml_cs_high (struct amlsd_platform * pdata) // chip select high
 	 */
     if ((pdata->mmc->ios.chip_select == MMC_CS_HIGH) && (pdata->gpio_dat3 != 0)
         && (pdata->jtag_pin == 0)) { // is NOT sd card
-
+        aml_devm_pinctrl_put(pdata->host);
         ret = amlogic_gpio_request_one(pdata->gpio_dat3, GPIOF_OUT_INIT_HIGH, MODULE_NAME);
         CHECK_RET(ret);
         if (ret == 0) {
@@ -832,20 +882,25 @@ int aml_is_sduart(struct amlsd_platform * pdata)
     if(pdata->is_sduart)
         return 1;
 
-    if (pdata->gpio_dat3 != 0){
-        ret = amlogic_gpio_request_one(pdata->gpio_dat3, GPIOF_IN, MODULE_NAME);
-        if(ret){
-            printk("DAT3 pinmux used, return no uart\n");
-            return 0;
-        }
-        CHECK_RET(ret);
-        dat3 = amlogic_get_value(pdata->gpio_dat3, MODULE_NAME);
-        // print_tmp("sd gpio_dat3=%d\n", amlogic_get_value(pdata->gpio_dat3, MODULE_NAME));
-        amlogic_gpio_free(pdata->gpio_dat3, MODULE_NAME);
-        if(dat3 == 0){
-            return 1;
-        }
+    dat3 = aml_get_reg32_bits(P_PREG_PAD_GPIO0_I,26,1);
+    if(dat3 == 0){
+        return 1;
     }
+
+    // if (pdata->gpio_dat3 != 0){
+        // ret = amlogic_gpio_request_one(pdata->gpio_dat3, GPIOF_IN, MODULE_NAME);
+        // if(ret){
+            // printk("DAT3 pinmux used, return no uart\n");
+            // return 0;
+        // }
+        // CHECK_RET(ret);
+        // dat3 = amlogic_get_value(pdata->gpio_dat3, MODULE_NAME);
+        // // print_tmp("sd gpio_dat3=%d\n", amlogic_get_value(pdata->gpio_dat3, MODULE_NAME));
+        // amlogic_gpio_free(pdata->gpio_dat3, MODULE_NAME);
+        // if(dat3 == 0){
+            // return 1;
+        // }
+    // }
     return 0;
 }
 
@@ -914,6 +969,24 @@ int aml_uart_switch(struct amlsd_platform* pdata, bool on)
 #endif
 }
 
+void aml_sduart_detect (struct amlsd_platform* pdata)
+{
+#ifdef CONFIG_ARCH_MESON8
+    if (((pdata->port == MESON_SDIO_PORT_B) || (pdata->port == MESON_SDIO_PORT_XC_B))) {
+        // clear pinmux of CARD_4 and make it as a gpio
+        CLEAR_CBUS_REG_MASK(PERIPHS_PIN_MUX_2, 0x00001040);
+        CLEAR_CBUS_REG_MASK(PERIPHS_PIN_MUX_8, 0x00000400);
+        if (aml_is_sduart(pdata)) {
+            if(pdata->caps & MMC_CAP_4_BIT_DATA) {
+                pdata->mmc->caps &= ~MMC_CAP_4_BIT_DATA;
+                aml_uart_switch(pdata, 1);
+                printk("\033[0;40;35m [%s] uart in, make sd card 1 bit bus width \033[0m\n", __FUNCTION__);
+            }
+        }
+    }
+#endif
+}
+
 /*-------------------debug---------------------*/
 
 unsigned int sdhc_debug=0x0; // 0xffffffff;
diff --git a/drivers/amlogic/mmc/amlsd.h b/drivers/amlogic/mmc/amlsd.h
index b85916bea98c..334004d9b5e9 100755
--- a/drivers/amlogic/mmc/amlsd.h
+++ b/drivers/amlogic/mmc/amlsd.h
@@ -114,8 +114,10 @@ void aml_cs_dont_care (struct amlsd_platform * pdata); // chip select don't care
 int aml_is_sdjtag(struct amlsd_platform * pdata);
 int aml_is_sduart(struct amlsd_platform * pdata);
 int aml_uart_switch(struct amlsd_platform* pdata, bool on);
+void aml_sduart_detect(struct amlsd_platform* pdata);
 bool is_emmc_exist (struct amlsd_host* host); // is eMMC/tSD exist
 void aml_dbg_print_pinmux (void);
+int aml_devm_pinctrl_put (struct amlsd_host* host);
 // void of_init_pins (struct amlsd_platform* pdata);
 
 #ifdef      CONFIG_MMC_AML_DEBUG
diff --git a/drivers/amlogic/mmc/amlsd_of.c b/drivers/amlogic/mmc/amlsd_of.c
index 2a869f67bbf4..6fe2c30785cb 100755
--- a/drivers/amlogic/mmc/amlsd_of.c
+++ b/drivers/amlogic/mmc/amlsd_of.c
@@ -175,10 +175,10 @@ int amlsd_get_platform_data(struct platform_device* pdev,
 		SD_PARSE_GPIO_NUM_PROP(child, "gpio_ro", str, pdata->gpio_ro);
 		SD_PARSE_GPIO_NUM_PROP(child, "gpio_power", str, pdata->gpio_power);
 
-        SD_PARSE_GPIO_NUM_PROP(child, "gpio_dat3", str, pdata->gpio_dat3);
 		SD_PARSE_STRING_PROP(child, "pinname", str, pdata->pinname);
         SD_PARSE_GPIO_NUM_PROP(child, "jtag_pin", str, pdata->jtag_pin);
 		SD_PARSE_U32_PROP(child, "card_type", prop, pdata->card_type);
+        SD_PARSE_GPIO_NUM_PROP(child, "gpio_dat3", str, pdata->gpio_dat3);
 
 		pdata->port_init = of_amlsd_init;
 		pdata->pwr_pre = of_amlsd_pwr_prepare;
-- 
2.19.0

