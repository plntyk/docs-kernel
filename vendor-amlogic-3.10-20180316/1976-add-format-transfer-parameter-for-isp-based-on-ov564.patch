From 4fcf1bc408ece9b5561c96026ea2dd7cd502cf0a Mon Sep 17 00:00:00 2001
From: "xiaoyu.yuan" <xiaoyu.yuan@droid05.amlogic.com>
Date: Tue, 19 Nov 2013 14:34:17 +0800
Subject: [PATCH 1976/5965] add format transfer parameter for isp based on
 ov5647

---
 drivers/amlogic/camera/common/config_parser.c | 20 ++++++++++++-------
 drivers/amlogic/camera/common/config_parser.h | 12 +++++++----
 drivers/amlogic/camera/ov5647.c               |  6 +++---
 3 files changed, 24 insertions(+), 14 deletions(-)

diff --git a/drivers/amlogic/camera/common/config_parser.c b/drivers/amlogic/camera/common/config_parser.c
index 1557c3dde90d..65bec4306b8a 100755
--- a/drivers/amlogic/camera/common/config_parser.c
+++ b/drivers/amlogic/camera/common/config_parser.c
@@ -397,6 +397,9 @@ int parse_aet_element_info(char **iter,sensor_aet_info_t *info){
     sscanf(*iter,"%x",&(info->tbl_min_gain));
     *iter = strstr(*iter,",");
     *iter += 1;
+    sscanf(*iter,"%x",&(info->format_transfer_parameter));
+    *iter = strstr(*iter,",");
+    *iter += 1;
     return 0;
 
 }
@@ -495,7 +498,6 @@ int parse_aet(buffer_para_t *buf_para,int *remained,int *offset){
         return -HEAD_FAILED;
     }
     cf->aet.sum = sum;
-
     /**parser body***/
     for(i = 0;i < sum; i++){
         if((cf->aet.aet[i].info = (sensor_aet_info_t *)kmalloc(sizeof(sensor_aet_info_t),0)) == NULL){
@@ -506,7 +508,7 @@ int parse_aet(buffer_para_t *buf_para,int *remained,int *offset){
         }
     } //alloc head
     check = 0;
-    while(check < sum && iter != NULL){
+    while(check < sum){
         iter = search_string(buf_para,offset,remained,"aet","aet");
         if(iter == NULL){
             printk("aet wrong config format\n");
@@ -518,7 +520,6 @@ int parse_aet(buffer_para_t *buf_para,int *remained,int *offset){
             ret = -HEAD_FAILED;
             goto clean;
         } 
-
         ret = parse_aet_element_info(&iter,cf->aet.aet[check].info);
         if(ret != 0){
             ret = -BODY_ELEMENT_FAILED;
@@ -713,7 +714,7 @@ int parse_capture(buffer_para_t *buf_para,int *remained,int *offset){
         //printk("name:%s\n",cf->capture.capture[check].name);
         iter = strstr(iter,"export");
         iter += 7;
-        for(i=0;i<10;i++){
+        for(i=0;i<CAPTURE_MAX;i++){
             sscanf(iter,"%x",&(cf->capture.capture[check].export[i]));
            // printk("capture:%x\n",cf->capture.capture[check].export[i]);
             iter = strstr(iter,",");
@@ -739,7 +740,7 @@ int parse_wave(buffer_para_t *buf_para,int *remained,int *offset){
     /***parser head***/
     iter = strstr(iter,"export");
     iter += 7;
-    for(i=0;i<12;i++){
+    for(i=0;i<WAVE_MAX;i++){
         sscanf(iter,"%x",&(cf->wave.export[i]));
         //printk("wave:%x\n",cf->wave.export[i]);
         iter = strstr(iter,",");
@@ -1211,8 +1212,13 @@ int generate_para(cam_parameter_t *para,para_index_t pindex){
         }
         scene = para->xml_scenes;
         memcpy(&(scene->ae),cf->scene.scene[pindex.scenes_index].export,97*sizeof(unsigned int));
-        memcpy(&(scene->awb),cf->scene.scene[pindex.scenes_index].export + 97,104*sizeof(unsigned int));
-       // memcpy(&(scene->af),cf->scene.scene[pindex.scenes_index].export + 201,1*sizeof(unsigned int));
+        if(cf->aet_valid == 1){
+        	cf->scene.scene[pindex.scenes_index].export[97] = sensor_aet_info->format_transfer_parameter;
+        }
+        else
+        	cf->scene.scene[pindex.scenes_index].export[97] = 0;
+        memcpy(&(scene->awb),cf->scene.scene[pindex.scenes_index].export + 98*sizeof(unsigned int),104*sizeof(unsigned int));
+        // memcpy(&(scene->af),cf->scene.scene[pindex.scenes_index].export + 201,1*sizeof(unsigned int));
     }else{
         para->xml_scenes = NULL;
     }
diff --git a/drivers/amlogic/camera/common/config_parser.h b/drivers/amlogic/camera/common/config_parser.h
index cad53f6a86b0..8e5dcbcab5b5 100755
--- a/drivers/amlogic/camera/common/config_parser.h
+++ b/drivers/amlogic/camera/common/config_parser.h
@@ -16,6 +16,9 @@
 #define GAMMA_MAX 257
 #define SCENE_MAX 203
 #define WB_SENSOR_MAX 4
+#define CAPTURE_MAX 8
+#define LENC_MAX 1024
+#define WAVE_MAX 12
 #define BUFFER_SIZE 1024
 
 enum error_code {
@@ -81,7 +84,7 @@ typedef struct{
 typedef struct{
 	int num;
 	char name[40];
-	int export[10];	
+	int export[CAPTURE_MAX];	
 }capture_type;
 
 typedef struct{
@@ -108,6 +111,7 @@ typedef struct sensor_aet_info_s {
     unsigned int tbl_rated_step;
     unsigned int tbl_max_gain;
     unsigned int tbl_min_gain;
+    unsigned int format_transfer_parameter;
 } sensor_aet_info_t;
 
 
@@ -125,11 +129,11 @@ typedef struct{
 }aet_struct;
 
 typedef struct{
-	int export[12];	
+	int export[WAVE_MAX];	
 }wave_struct;
 
 typedef struct{
-	int export[1024];
+	int export[LENC_MAX];
 }lenc_struct;
 
 typedef struct{
@@ -145,7 +149,7 @@ typedef struct{
 typedef struct{
     char date[40];
     char module[30];
-    char version[20];		
+    char version[30];		
 }version_struct;
 
 typedef struct{
diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index e5ad552e0401..4d636c20a842 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -2327,9 +2327,9 @@ static ssize_t version_info_show(struct class *cls,struct class_attribute *attr,
     if(cf->version_info_valid == 0)
         printk("verion info envalid\n");
     else{
-        printk("Date %s\n",cf->version.date);
-        printk("Module %s\n",cf->version.module);
-        printk("Version %s\n",cf->version.version);	
+        printk("Date %s",cf->version.date);
+        printk("Module %s",cf->version.module);
+        printk("Version %s",cf->version.version);	
     }
     return len;
 }
-- 
2.19.0

