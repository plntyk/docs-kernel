From d4127e07a5d22ac08e7e7c9eea1aebf2dfc4890f Mon Sep 17 00:00:00 2001
From: "jiyu.yang" <jiyu.yang@amlogic.com>
Date: Tue, 19 Nov 2013 17:11:00 +0800
Subject: [PATCH 1980/5965] Squashed commit of the following:

commit 9b5f5aa827258a350b06e9803360cf902e3dfd9f
Author: jiyu.yang <jiyu.yang@amlogic.com>
Date:   Mon Nov 18 15:02:38 2013 +0800

    add soft watch dog for csi

commit c8f89738427d8f2925ec9cab20f8d69df8b027ef
Author: jiyu.yang <jiyu.yang@amlogic.com>
Date:   Fri Nov 15 23:58:16 2013 +0800

    5647 1080p@30fps for preview
---
 drivers/amlogic/camera/common/vm.c |   2 +-
 drivers/amlogic/camera/ov5647.c    |   8 +-
 drivers/amlogic/tvin/csi/csi.c     | 161 +++++++++++++++++++++++++----
 drivers/amlogic/tvin/csi/csi.h     |   9 ++
 drivers/amlogic/tvin/csi/mipi_hw.c |  11 +-
 5 files changed, 160 insertions(+), 31 deletions(-)

diff --git a/drivers/amlogic/camera/common/vm.c b/drivers/amlogic/camera/common/vm.c
index 009fe8525cf2..234c05b65450 100755
--- a/drivers/amlogic/camera/common/vm.c
+++ b/drivers/amlogic/camera/common/vm.c
@@ -533,7 +533,7 @@ static int get_input_format(vframe_t* vf)
                 }
         }
         if (1==print_ifmt) {
-                printk("VIDTYPE_VIU_NV21=%x, vf->type=%x, format=%x\n", VIDTYPE_VIU_NV21, vf->type, format);
+                printk("VIDTYPE_VIU_NV21=%x, vf->type=%x, format=%x, w=%d, h=%d\n", VIDTYPE_VIU_NV21, vf->type, format, vf->width, vf->height);
                 print_ifmt = 0;
         }
         return format;
diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index 130a33eb1d73..a2116020c968 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -3762,6 +3762,9 @@ static int ov5647_open(struct file *file)
     fh->height   = 480;
     fh->stream_on = 0 ;
     fh->f_flags  = file->f_flags;
+    if( CAM_MIPI == dev->cam_info.interface){ //deprecated; this added for there is no 960p output for mipi
+        i_index = 2;
+    }
     /* Resets frame counters */
     dev->jiffies = jiffies;
     videobuf_queue_vmalloc_init(&fh->vb_vidq, &ov5647_video_qops,
@@ -4018,7 +4021,6 @@ static ssize_t cam_info_store(struct device *dev,struct device_attribute *attr,c
         char *buf_orig, *ps, *token;
         char *parm[3] = {NULL};
 
-        printk("buf=%p", buf);
         if(!buf)
 		return len;
         buf_orig = kstrdup(buf, GFP_KERNEL);
@@ -4041,10 +4043,10 @@ static ssize_t cam_info_store(struct device *dev,struct device_attribute *attr,c
 
         if ( 0 == strcmp(parm[0],"interface")){
                 t->cam_info.interface = simple_strtol(parm[1],NULL,16);
-                printk("interface =%s", t->cam_info.interface?"dvp":"mipi");
+                printk("substitude with %s interface\n", t->cam_info.interface?"mipi":"dvp");
         }else if ( 0 == strcmp(parm[0],"clk")){
                 t->cam_info.clk_channel = simple_strtol(parm[1],NULL,16);
-                printk("clk channel =%s", t->cam_info.interface?"clkA":"clkB");
+                printk("clk channel =%s\n", t->cam_info.interface?"clkB":"clkA");
         }
 
         kfree(buf_orig);
diff --git a/drivers/amlogic/tvin/csi/csi.c b/drivers/amlogic/tvin/csi/csi.c
index 588027879a2b..348fc7407174 100755
--- a/drivers/amlogic/tvin/csi/csi.c
+++ b/drivers/amlogic/tvin/csi/csi.c
@@ -54,6 +54,7 @@
 /* Per-device (per-bank) structure */
 static dev_t amcsi_devno;
 static struct class *amcsi_clsp;
+static void csi2_timer_func(unsigned long arg);
 
 static void init_csi_dec_parameter(struct amcsi_dev_s *devp)
 {
@@ -63,7 +64,7 @@ static void init_csi_dec_parameter(struct amcsi_dev_s *devp)
         fmt_info_p = tvin_get_fmt_info(fmt);
 
         if(!fmt_info_p) {
-                printk("[amcsi..]%s:invaild fmt %d.\n",__func__, fmt);
+                DPRINT("[amcsi..]%s:invaild fmt %d.\n",__func__, fmt);
                 return;
         }
 
@@ -80,7 +81,7 @@ static void init_csi_dec_parameter(struct amcsi_dev_s *devp)
 
 static void reset_btcsi_module(void)
 {
-        printk("%s, %d\n", __func__, __LINE__);
+        DPRINT("%s, %d\n", __func__, __LINE__);
         return;
 }
 
@@ -89,7 +90,7 @@ static void reset_btcsi_module(void)
    */
 static void reinit_csi_dec(struct amcsi_dev_s *devp)
 {
-        printk("%s, %d\n", __func__, __LINE__);
+        DPRINT("%s, %d\n", __func__, __LINE__);
         return;
 }
 
@@ -97,7 +98,7 @@ static void start_amvdec_csi(struct amcsi_dev_s *devp)
 {
         enum tvin_port_e port =  devp->para.port;
         if(devp->dec_status & TVIN_AMCSI_RUNNING){
-                printk("[csi..] %s csi have started alreadly.\n",__func__);
+                DPRINT("[csi..] %s csi have started alreadly.\n",__func__);
                 return;
         }
         devp->dec_status = TVIN_AMCSI_RUNNING;
@@ -109,7 +110,7 @@ static void start_amvdec_csi(struct amcsi_dev_s *devp)
         {
                 devp->para.fmt  = TVIN_SIG_FMT_NULL;
                 devp->para.port = TVIN_PORT_NULL;
-                printk("[csi..]%s: input is not selected, please try again. \n",__func__);
+                DPRINT("[csi..]%s: input is not selected, please try again. \n",__func__);
                 return;
         }
         devp->dec_status = TVIN_AMCSI_RUNNING;
@@ -123,7 +124,7 @@ static void stop_amvdec_csi(struct amcsi_dev_s *devp)
                 devp->dec_status = TVIN_AMCSI_STOP;
         }
         else{
-                printk("[csi..] %s device is not started yet. \n",__func__);
+                DPRINT("[csi..] %s device is not started yet. \n",__func__);
         }
         return;
 }
@@ -147,7 +148,7 @@ static bool amcsi_check_skip_frame(struct tvin_frontend_s * fe)
 int amcsi_support(struct tvin_frontend_s *fe, enum tvin_port_e port)
 {
         if((port != TVIN_PORT_MIPI)) {
-                printk("error 1\n");
+                DPRINT("this is not MIPI port\n");
                 return -1;
         } else {
                 return 0;
@@ -190,7 +191,7 @@ static void amcsi_stop(struct tvin_frontend_s * fe, enum tvin_port_e port)
 {
         struct amcsi_dev_s *devp = container_of(fe, amcsi_dev_t, frontend);
         if((port != TVIN_PORT_MIPI)){
-                printk("%s:invaild port %d.\n",__func__, port);
+                DPRINT("%s:invaild port %d.\n",__func__, port);
                 return;
         }
         stop_amvdec_csi(devp);
@@ -199,8 +200,10 @@ static void amcsi_get_sig_propery(struct tvin_frontend_s *fe, struct tvin_sig_pr
 {
         struct amcsi_dev_s *devp = container_of(fe, amcsi_dev_t, frontend);
         prop->color_format = devp->para.cfmt;//devp->csi_parm.csi_ofmt;
-        //prop->dest_cfmt = devp->para.cfmt;
-        printk("csi_ofmt=%d, cfmt=%d\n", devp->csi_parm.csi_ofmt, devp->para.cfmt );
+        prop->dest_cfmt = devp->para.dfmt;
+        printk("TVIN_NV21=%d, TVIN_YUV422=%d, devp->para.cfmt=%d, devp->para.dfmt=%d\n",
+                        TVIN_NV21, TVIN_YUV422, devp->para.cfmt, devp->para.dfmt);
+        prop->dest_cfmt =TVIN_NV21;
         prop->pixel_repeat = 0;
 }
 
@@ -227,10 +230,12 @@ int amcsi_isr(struct tvin_frontend_s *fe, unsigned int hcnt)
                 devp->overflow_cnt ++;
                 aml_write_reg32( P_CSI2_ERR_STAT0, 0);
         }
-        if( devp->overflow_cnt > 20){
-                printk("should reset mipi\n");
+        if( devp->overflow_cnt > 4){
+                DPRINT("should reset mipi\n");
                 devp->overflow_cnt = 0;
+                return 0;
         }
+        devp->reset = 0;
 
         return 0;
 }
@@ -242,6 +247,10 @@ static ssize_t csi_attr_show(struct device *dev, struct device_attribute *attr,
         int i;
 
         csi_devp = dev_get_drvdata(dev);
+        if(csi_devp->dec_status != TVIN_AMCSI_RUNNING){
+                len += sprintf(buf+len, "csi does not start\n");
+                return len;
+        }
 
         len += sprintf(buf+len, "csi parameters below\n");
         len += sprintf(buf+len, "\tlanes=%d, channel=%d, clk_channel=%d\n"
@@ -259,12 +268,19 @@ static ssize_t csi_attr_show(struct device *dev, struct device_attribute *attr,
                         csi_devp->csi_parm.ui_val, //ns
                         csi_devp->csi_parm.hs_freq, //hz
                         csi_devp->csi_parm.urgent);
+        len += sprintf(buf+len, "\treset=%d, left jiffies=%ld, reset_count=%d\n"
+                                "\tcsi_devp->t.data=%p, csi_devp=%p\n"
+                                "\tcsi_devp->t.function=%p, csi2_timer_func=%p\n",
+                                 csi_devp->reset, csi_devp->t.expires - jiffies,
+                                 csi_devp->reset_count,
+                                 csi_devp->t.data, csi_devp,
+                                 csi_devp->t.function, csi2_timer_func);
 
         len += sprintf(buf+len, "csi adapter register below\n");
         for( i = CSI_ADPT_START_REG; i <= CSI_ADPT_END_REG; i ++ )
         {
                 len += sprintf(buf+len, "\t[0x%04x]=0x%08x\n",
-                                i, READ_CSI_ADPT_REG(i));
+                               i-CSI_ADPT_START_REG, READ_CSI_ADPT_REG(i));
         }
 
         len += sprintf(buf+len, "csi phy register below\n");
@@ -317,8 +333,9 @@ static ssize_t csi_attr_store(struct device *dev,struct device_attribute *attr,c
         if ( 0 == strcmp(parm[0],"reset")){
                 printk("reset\n");
                 am_mipi_csi2_init(&csi_devp->csi_parm);
-        } else {
-                printk("other\n");
+        } else if ( 0 == strcmp(parm[0],"init")){
+                printk("init mipi measure clock\n");
+                init_am_mipi_csi2_clock();// init mipi csi measure clock
         }
 
         kfree(buf_orig);
@@ -326,6 +343,66 @@ static ssize_t csi_attr_store(struct device *dev,struct device_attribute *attr,c
 }
 
 static DEVICE_ATTR(hw_info, 0664, csi_attr_show, csi_attr_store);
+#if 0
+static irqreturn_t csi_hst_isr(int irq, void *arg)
+{
+        amcsi_dev_t *csi_devp = (amcsi_dev_t *)arg;
+        int ret = 0;
+
+        if(!csi_devp)
+                return IRQ_HANDLED;
+
+        //DPRINT("host isr MIPI_CSI2_HOST_ERR1=%x, MIPI_CSI2_HOST_ERR2=%x\n",
+        //        READ_CSI_HST_REG(MIPI_CSI2_HOST_ERR1), READ_CSI_HST_REG(MIPI_CSI2_HOST_ERR2));
+#if 0
+        if (irq == INT_CSI2_HOST){
+                ret = READ_CSI_HST_REG(MIPI_CSI2_HOST_ERR1);//, READ_CSI_HST_REG(MIPI_CSI2_HOST_ERR2));
+        } else {
+                ret = READ_CSI_HST_REG(MIPI_CSI2_HOST_ERR2);//, READ_CSI_HST_REG(MIPI_CSI2_HOST_ERR2));
+        }
+#else
+        if (irq == INT_MIPI_PHY){
+                ret = READ_CSI_PHY_REG(MIPI_PHY_INT_STS);
+        }
+#endif
+        printk("line:%d, irq=%d, state=%x\n", __LINE__, irq, ret);
+
+        if ( 0 == (ret & 0x0330))
+        {
+#if 0
+                if ( 0 == (ret & 0x1111000))
+                {
+                        printk("other, ret=%x\n",ret);
+                }else{
+                        printk("0x100, 0x10\n");
+                }
+#endif
+                return IRQ_HANDLED;
+        }
+        if (csi_devp->reset){
+                printk("already request\n");
+                return IRQ_HANDLED;
+        }
+        csi_devp->reset = 1;
+        csi_devp->t.expires = jiffies + 10; //reset after 50ms=5jiffies
+        add_timer(&csi_devp->t);
+
+	return IRQ_HANDLED;
+}
+#endif
+
+static void csi2_timer_func(unsigned long arg)
+{
+        struct amcsi_dev_s *csi_devp = (struct amcsi_dev_s *) arg;
+        if(1 == csi_devp->reset){ //= 0;
+                printk("reset csi\n");
+                am_mipi_csi2_init(&csi_devp->csi_parm);
+                csi_devp->reset_count ++;
+        }
+        csi_devp->t.expires = jiffies + 10; //reset after 50ms=5jiffies
+        add_timer(&csi_devp->t);
+        csi_devp->reset = 1;
+}
 /*
  *power on mipi module&init the parameters,such as color fmt...,will be used by vdin
  */
@@ -333,14 +410,16 @@ static int amcsi_feopen(struct tvin_frontend_s *fe, enum tvin_port_e port)
 {
         struct amcsi_dev_s *csi_devp = container_of(fe, amcsi_dev_t, frontend);
         struct vdin_parm_s *parm = fe->private_data;
+        csi_parm_t *p = &csi_devp->csi_parm;
+        int ret;
 
         if((port != TVIN_PORT_MIPI)){
-                printk("[mipi..]%s:invaild port %d.\n",__func__, port);
+                DPRINT("[mipi..]%s:invaild port %d.\n",__func__, port);
                 return -1;
         }
         /*copy the param from vdin to csi*/
         if(!memcpy(&csi_devp->para, parm, sizeof(vdin_parm_t))){
-                printk("[mipi..]%s memcpy error.\n",__func__);
+                DPRINT("[mipi..]%s memcpy error.\n",__func__);
                 return -1;
         }
 
@@ -350,6 +429,32 @@ static int amcsi_feopen(struct tvin_frontend_s *fe, enum tvin_port_e port)
         memcpy( &csi_devp->csi_parm, &parm->csi_hw_info, sizeof( csi_parm_t));
         csi_devp->csi_parm.skip_frames = parm->skip_count;
 
+        csi_devp->reset = 0;
+        csi_devp->reset_count = 0;
+
+#if 0
+        csi_devp->irq_num = INT_MIPI_PHY; //INT_CSI2_HOST;
+        ret = request_irq(csi_devp->irq_num, csi_hst_isr, IRQF_SHARED, "csi-hst1"/*devp->irq_name*/, csi_devp);
+        //SET_CSI_HST_REG_MASK(MIPI_CSI2_HOST_MASK1, ~((1<< p->lanes) - 1));
+        //WRITE_CSI_HST_REG_BITS(MIPI_CSI2_HOST_MASK1, 0, 28, 1); // enable err_ecc_double
+
+        //SET_CSI_HST_REG_MASK(MIPI_CSI2_HOST_MASK1, ~((1<< p->lanes) - 1));
+        DPRINT("INT_CSI2_HOST = %d, INT_CSI2_HOST_2=%d\n", INT_CSI2_HOST, INT_CSI2_HOST_2)
+        DPRINT("mask1=%x\n", ~((1<< p->lanes) - 1));
+#if 0
+        csi_devp->irq_num = INT_CSI2_HOST_2;
+        ret = request_irq(csi_devp->irq_num, csi_hst_isr, IRQF_SHARED, "csi-hst2"/*devp->irq_name*/, csi_devp);
+#endif
+        if( ret < 0 ){
+                printk("failed to request csi_adapter irq \n");
+        }
+#endif
+
+        init_timer (&csi_devp->t);
+        csi_devp->t.data = csi_devp;
+        csi_devp->t.function = csi2_timer_func;
+        csi_devp->t.expires = jiffies + 10; //reset after 50ms=5jiffies
+        add_timer(&csi_devp->t);
         am_mipi_csi2_init(&csi_devp->csi_parm);
         return 0;
         //csi_devp->skip_vdin_frame_count = parm->reserved;
@@ -363,10 +468,22 @@ static void amcsi_feclose(struct tvin_frontend_s *fe)
         enum tvin_port_e port = devp->para.port;
 
         if((port != TVIN_PORT_MIPI)){
-                printk("[mipi..]%s:invaild port %d.\n",__func__, port);
+                DPRINT("[mipi..]%s:invaild port %d.\n",__func__, port);
                 return;
         }
 
+#if 0
+        devp->irq_num = INT_MIPI_PHY; //INT_CSI2_HOST;
+        free_irq(devp->irq_num, (void *)devp);
+#if 0
+        devp->irq_num = INT_CSI2_HOST_2;
+        free_irq(devp->irq_num, (void *)devp);
+#endif
+#endif
+        devp->reset = 0;
+        devp->reset_count = 0;
+
+        del_timer_sync(&devp->t);
         am_mipi_csi2_uninit();
 
         memset(&devp->para, 0, sizeof(vdin_parm_t));
@@ -495,13 +612,13 @@ static int __init amvdec_csi_init_module(void)
 {
         int ret = 0;
         struct platform_device *pdev;
-        printk("amvdec_csi module: init.\n");
+        DPRINT("amvdec_csi module: init.\n");
         ret=alloc_chrdev_region(&amcsi_devno, 0, CSI_MAX_DEVS, DEV_NAME);
         if(ret<0){
                 printk("%s:failed to alloc major number\n",__func__);
                 goto fail_alloc_cdev_region;
         }
-        printk("%s:major %d\n",__func__,MAJOR(amcsi_devno));
+        DPRINT("%s:major %d\n",__func__,MAJOR(amcsi_devno));
         amcsi_clsp=class_create(THIS_MODULE,CLS_NAME);
         if(IS_ERR(amcsi_clsp)){
                 ret=PTR_ERR(amcsi_clsp);
@@ -522,7 +639,7 @@ static int __init amvdec_csi_init_module(void)
                 goto fail_pdrv_register;
         }
 
-        printk("amvdec_csi module: init. ok\n");
+        DPRINT("amvdec_csi module: init. ok\n");
         return 0;
 fail_pdrv_register:
         platform_device_unregister(pdev);
@@ -541,7 +658,7 @@ fail_alloc_cdev_region:
 static void __exit amvdec_csi_exit_module(void)
 {
         printk("amvdec_csi module remove.\n");
-        printk("%s, %d\n", __func__, __LINE__);
+        DPRINT("%s, %d\n", __func__, __LINE__);
         class_destroy(amcsi_clsp);
         unregister_chrdev_region(amcsi_devno, CSI_MAX_DEVS);
         platform_driver_unregister(&amvdec_csi_driver);
diff --git a/drivers/amlogic/tvin/csi/csi.h b/drivers/amlogic/tvin/csi/csi.h
index 03fa853beebe..47f6911f47ea 100755
--- a/drivers/amlogic/tvin/csi/csi.h
+++ b/drivers/amlogic/tvin/csi/csi.h
@@ -19,6 +19,11 @@
 #include <linux/amlogic/mipi/am_mipi_csi2.h>
 #include "../tvin_frontend.h"
 #include "../tvin_global.h"
+#ifdef PRINT_DEBUG_INFO
+#define DPRINT(...)		printk(__VA_ARGS__)
+#else
+#define DPRINT(...)
+#endif
 
 enum amcsi_status_e{
         TVIN_AMCSI_STOP,
@@ -35,6 +40,10 @@ typedef struct amcsi_dev_s{
         enum amcsi_status_e     dec_status;
         struct vdin_parm_s      para;
         csi_parm_t              csi_parm;
+        unsigned char           reset;
+        unsigned int            reset_count;
+        unsigned int            irq_num;
         struct tvin_frontend_s  frontend; 
+        struct timer_list       t;
 }amcsi_dev_t;
 #endif
diff --git a/drivers/amlogic/tvin/csi/mipi_hw.c b/drivers/amlogic/tvin/csi/mipi_hw.c
index b3341df1b6b8..84d817b920ff 100755
--- a/drivers/amlogic/tvin/csi/mipi_hw.c
+++ b/drivers/amlogic/tvin/csi/mipi_hw.c
@@ -19,6 +19,7 @@
 #include <mach/mipi_phy_reg.h>
 #include <linux/amlogic/mipi/am_mipi_csi2.h>
 #include <linux/amlogic/tvin/tvin_v4l2.h>
+#include "csi.h"
 
 void init_am_mipi_csi2_clock(void)
 {
@@ -85,7 +86,7 @@ static int init_am_mipi_csi2_adapter(csi_parm_t* info)
                 WRITE_CSI_ADPT_REG(CSI2_DDR_START_ADDR, info->frame->ddr_address);
                 WRITE_CSI_ADPT_REG(CSI2_DDR_END_ADDR, info->frame->ddr_address+info->frame_size);
         }else{
-                printk("info->frame=%p\n", info->frame);
+                DPRINT("info->frame=%p\n", info->frame);
         }
 #endif
 
@@ -108,9 +109,9 @@ static void init_am_mipi_phy(csi_parm_t* info)
         u32 cycle_time = 5;//5 ns
         u32 settle = (85 + 145 + (16*info->ui_val))/2;
         settle = settle/cycle_time;
-        printk("(85 + 145 + (16*%d))/2/5.4945 == settle=%d\n", info->ui_val, settle);
-        printk("%s, %d\n", __func__, __LINE__);
-        printk("settle=%d\n", settle);
+        DPRINT("(85 + 145 + (16*%d))/2/5.4945 == settle=%d\n", info->ui_val, settle);
+        DPRINT("%s, %d\n", __func__, __LINE__);
+        DPRINT("settle=%d\n", settle);
         settle = 25;
         //mipi_dbg("[mipi_hw]:init_am_mipi_phy ---- mipi cycle:%d ns, hs settle:%d ns,\n",cycle_time,(settle*cycle_time));
 
@@ -140,7 +141,7 @@ static void init_am_mipi_phy(csi_parm_t* info)
         WRITE_CSI_PHY_REG(MIPI_PHY_AN_CTRL1,0xcf25); //MIPI_CHCTL1<15:0>=<1100,1111,0010,0101> 
         WRITE_CSI_PHY_REG(MIPI_PHY_AN_CTRL2,0x0667); //MIPI_CHCTL2<15:0>=<0000,0110,0110,0111> 
 #else
-        printk("HHI_GCLK_MPEG1=%x, csi2_dig_clkin=%d\n", READ_CBUS_REG(HHI_GCLK_MPEG1), (READ_CBUS_REG(HHI_GCLK_MPEG1) >> 18)&0x1); 
+        DPRINT("HHI_GCLK_MPEG1=%x, csi2_dig_clkin=%d\n", READ_CBUS_REG(HHI_GCLK_MPEG1), (READ_CBUS_REG(HHI_GCLK_MPEG1) >> 18)&0x1);
         WRITE_CBUS_REG(HHI_CSI_PHY_CNTL0, 0xfdc1 << 16 | 0xfd01); 
         WRITE_CBUS_REG(HHI_CSI_PHY_CNTL1, 0x3f << 16 | 0xffff); 
         temp_data = READ_CBUS_REG(HHI_CSI_PHY_CNTL2);//
-- 
2.19.0

