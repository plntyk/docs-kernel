From e66bb592b1609462a364c8cac5f3d27e83419b2a Mon Sep 17 00:00:00 2001
From: "brian.zhu" <brian.zhu@amlogic.com>
Date: Thu, 21 Nov 2013 00:17:39 +0800
Subject: [PATCH 2004/5965] add half hw encode ucode for cts

---
 drivers/amlogic/amports/encoder.c             | 257 +++++++++++-------
 drivers/amlogic/amports/encoder_mc.h          |   3 +-
 .../amlogic/amports/m8/ucode/encoder/Makefile |   2 +-
 .../amports/m8/ucode/encoder/encoder_mc.c     | 199 ++------------
 .../m8/ucode/encoder/full_encoder_linux.h     | 178 ++++++++++++
 .../m8/ucode/encoder/half_encoder_linux.h     | 143 ++++++++++
 6 files changed, 501 insertions(+), 281 deletions(-)
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h

diff --git a/drivers/amlogic/amports/encoder.c b/drivers/amlogic/amports/encoder.c
index a439c5a0d812..bfbaf56b8b1c 100755
--- a/drivers/amlogic/amports/encoder.c
+++ b/drivers/amlogic/amports/encoder.c
@@ -111,6 +111,7 @@ static u32 ie_me_mode  = 0;
 static u32 me_start_position = 0;
 static u32 ie_pippeline_block = 3;
 static u32 ie_cur_ref_sel = 0;
+static u32 half_ucode_mode = 0;
 #endif
 static int encode_inited = 0;
 static int encode_opened = 0;
@@ -791,7 +792,49 @@ static void avc_prot_init(void)
     WRITE_HREG(QDCT_MB_CONTROL,
                 (1<<9) | // mb_info_soft_reset
                 (1<<0)); // mb read buffer soft reset
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8              
+    if(half_ucode_mode == 0){
+        WRITE_HREG(QDCT_MB_CONTROL,
+                  (0<<28) | // ignore_t_p8x8
+                  (0<<27) | // zero_mc_out_null_non_skipped_mb
+                  (0<<26) | // no_mc_out_null_non_skipped_mb
+                  (0<<25) | // mc_out_even_skipped_mb
+                  (0<<24) | // mc_out_wait_cbp_ready
+                  (0<<23) | // mc_out_wait_mb_type_ready
+                  (1<<29) | // ie_start_int_enable
+                  (1<<19) | // i_pred_enable
+                  (1<<20) | // ie_sub_enable
+                  (1<<18) | // iq_enable
+                  (1<<17) | // idct_enable
+                  (1<<14) | // mb_pause_enable
+                  (1<<13) | // q_enable
+                  (1<<12) | // dct_enable
+                  (1<<10) | // mb_info_en
+                  (0<<3) | // endian
+                  (0<<1) | // mb_read_en
+                  (0<<0));   // soft reset
+    }else{
+        WRITE_HREG(QDCT_MB_CONTROL,
+                  (0<<28) | // ignore_t_p8x8
+                  (0<<27) | // zero_mc_out_null_non_skipped_mb
+                  (0<<26) | // no_mc_out_null_non_skipped_mb
+                  (0<<25) | // mc_out_even_skipped_mb
+                  (0<<24) | // mc_out_wait_cbp_ready
+                  (0<<23) | // mc_out_wait_mb_type_ready
+                  (1<<22) | // i_pred_int_enable
+                  (1<<19) | // i_pred_enable
+                  (1<<20) | // ie_sub_enable
+                  (1<<18) | // iq_enable
+                  (1<<17) | // idct_enable
+                  (1<<14) | // mb_pause_enable
+                  (1<<13) | // q_enable
+                  (1<<12) | // dct_enable
+                  (1<<10) | // mb_info_en
+                  (avc_endian<<3) | // endian
+                  (1<<1) | // mb_read_en
+                  (0<<0));   // soft reset
+    }
+#else
     WRITE_HREG(QDCT_MB_CONTROL,
               (0<<28) | // ignore_t_p8x8
               (0<<27) | // zero_mc_out_null_non_skipped_mb
@@ -799,11 +842,7 @@ static void avc_prot_init(void)
               (0<<25) | // mc_out_even_skipped_mb
               (0<<24) | // mc_out_wait_cbp_ready
               (0<<23) | // mc_out_wait_mb_type_ready
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-              (1<<29) | // ie_start_int_enable
-#else
               (1<<22) | // i_pred_int_enable
-#endif
               (1<<19) | // i_pred_enable
               (1<<20) | // ie_sub_enable
               (1<<18) | // iq_enable
@@ -812,89 +851,86 @@ static void avc_prot_init(void)
               (1<<13) | // q_enable
               (1<<12) | // dct_enable
               (1<<10) | // mb_info_en
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-              (0<<3) | // endian
-              (0<<1) | // mb_read_en
-#else
               (avc_endian<<3) | // endian
               (1<<1) | // mb_read_en
-#endif
               (0<<0));   // soft reset
-
+#endif
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    WRITE_HREG(SAD_CONTROL,
-              (0<<3) | // ie_result_buff_enable
-              (1<<2) | // ie_result_buff_soft_reset
-              (0<<1) | // sad_enable
-              (1<<0));   // sad soft reset
-
-    WRITE_HREG(IE_RESULT_BUFFER, 0);
-
-    WRITE_HREG(SAD_CONTROL,
-              (1<<3) | // ie_result_buff_enable
-              (0<<2) | // ie_result_buff_soft_reset
-              (1<<1) | // sad_enable
-              (0<<0));   // sad soft reset
-
-    WRITE_HREG(IE_CONTROL,
-              (0<<1) | // ie_enable
-              (1<<0));   // ie soft reset
-
-    WRITE_HREG(IE_CONTROL,
-              (0<<1) | // ie_enable
-              (0<<0)); // ie soft reset
-
-    WRITE_HREG(ME_SAD_ENOUGH_01,
-              (0x18<<12) | // me_sad_enough_1
-              (0x10<<0) | // me_sad_enough_0
-              (0<<12) | // me_sad_enough_1
-              (0<<0));   // me_sad_enough_0
-
-    WRITE_HREG(ME_SAD_ENOUGH_23,
-              (0x20<<0) | // me_sad_enough_2
-              (0<<12) | // me_sad_enough_3
-              (0<<0));   // me_sad_enough_2
-
-    WRITE_HREG(ME_STEP0_CLOSE_MV,
-              (0x100 << 10) | // me_step0_big_sad -- two MV sad diff bigger will use use 1
-              (2<<5) | // me_step0_close_mv_y
-              (2<<0));   // me_step0_close_mv_x
-
-    WRITE_HREG(ME_SKIP_LINE,
-              ( 4 << 24) |  // step_3_skip_line
-              ( 4 << 18) |  // step_2_skip_line
-              ( 2 << 12) |  // step_1_skip_line
-              ( 0 << 6) |  // step_0_skip_line
-              //(8 <<0); // read 8*2 less line to save bandwidth
-              (0 <<0)); // read 8*2 less line to save bandwidth
-
-    WRITE_HREG(ME_F_SKIP_SAD,
-              ( 0x40 << 24) |  // force_skip_sad_3
-              ( 0x40 << 16) |  // force_skip_sad_2
-              ( 0x30 << 8)  |  // force_skip_sad_1
-              ( 0x10 << 0));    // force_skip_sad_0
-
-    WRITE_HREG(ME_F_SKIP_WEIGHT,
-              ( 0x18 << 24) |  // force_skip_weight_3
-              ( 0x18 << 16) |  // force_skip_weight_2
-              ( 0x18 << 8)  |  // force_skip_weight_1
-              ( 0x18 << 0));    // force_skip_weight_0
-
-    WRITE_HREG(IE_DATA_FEED_BUFF_INFO,0);
+    if(half_ucode_mode == 0){
+        WRITE_HREG(SAD_CONTROL,
+                  (0<<3) | // ie_result_buff_enable
+                  (1<<2) | // ie_result_buff_soft_reset
+                  (0<<1) | // sad_enable
+                  (1<<0));   // sad soft reset
+
+        WRITE_HREG(IE_RESULT_BUFFER, 0);
+
+        WRITE_HREG(SAD_CONTROL,  
+                  (1<<3) | // ie_result_buff_enable
+                  (0<<2) | // ie_result_buff_soft_reset
+                  (1<<1) | // sad_enable
+                  (0<<0));   // sad soft reset
+
+        WRITE_HREG(IE_CONTROL, 
+                  (0<<1) | // ie_enable
+                  (1<<0));   // ie soft reset
+
+        WRITE_HREG(IE_CONTROL,
+                  (0<<1) | // ie_enable
+                  (0<<0)); // ie soft reset
+
+        WRITE_HREG(ME_SAD_ENOUGH_01,
+                  (0x18<<12) | // me_sad_enough_1
+                  (0x10<<0) | // me_sad_enough_0
+                  (0<<12) | // me_sad_enough_1
+                  (0<<0));   // me_sad_enough_0
+
+        WRITE_HREG(ME_SAD_ENOUGH_23, 
+                  (0x20<<0) | // me_sad_enough_2
+                  (0<<12) | // me_sad_enough_3
+                  (0<<0));   // me_sad_enough_2
+
+        WRITE_HREG(ME_STEP0_CLOSE_MV, 
+                  (0x100 << 10) | // me_step0_big_sad -- two MV sad diff bigger will use use 1
+                  (2<<5) | // me_step0_close_mv_y
+                  (2<<0));   // me_step0_close_mv_x
+
+        WRITE_HREG(ME_SKIP_LINE, 
+                  ( 4 << 24) |  // step_3_skip_line
+                  ( 4 << 18) |  // step_2_skip_line
+                  ( 2 << 12) |  // step_1_skip_line
+                  ( 0 << 6) |  // step_0_skip_line
+                  //(8 <<0); // read 8*2 less line to save bandwidth
+                  (0 <<0)); // read 8*2 less line to save bandwidth
+
+        WRITE_HREG(ME_F_SKIP_SAD, 
+                  ( 0x40 << 24) |  // force_skip_sad_3
+                  ( 0x40 << 16) |  // force_skip_sad_2
+                  ( 0x30 << 8)  |  // force_skip_sad_1
+                  ( 0x10 << 0));    // force_skip_sad_0
+
+        WRITE_HREG(ME_F_SKIP_WEIGHT, 
+                  ( 0x18 << 24) |  // force_skip_weight_3
+                  ( 0x18 << 16) |  // force_skip_weight_2
+                  ( 0x18 << 8)  |  // force_skip_weight_1
+                  ( 0x18 << 0));    // force_skip_weight_0
+
+        WRITE_HREG(IE_DATA_FEED_BUFF_INFO,0);
+    }
 #endif
 
     WRITE_HREG(HCODEC_CURR_CANVAS_CTRL,0);
     //debug_level(0,"current endian is %d \n" , avc_endian);
     data32 = READ_HREG(VLC_CONFIG);
     data32 = data32 | (1<<0); // set pop_coeff_even_all_zero
-    WRITE_HREG(VLC_CONFIG , data32);
-
+    WRITE_HREG(VLC_CONFIG , data32);	
+    
         /* clear mailbox interrupt */
     WRITE_HREG(HCODEC_ASSIST_MBOX2_CLR_REG, 1);
 
     /* enable mailbox interrupt */
     WRITE_HREG(HCODEC_ASSIST_MBOX2_MASK, 1);
-
+    
 }
 
 void amvenc_reset(void)
@@ -1068,24 +1104,29 @@ static s32 avc_poweroff(void)
 static s32 avc_init(void)
 {
     int r;
+    const u32 * p = full_encoder_mc;
     avc_poweron();
     avc_canvas_init();
     WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
     debug_level(1,"start to load microcode\n");
-    if (amvenc_loadmc(encoder_mc) < 0) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if(half_ucode_mode == 1)
+        p = half_encoder_mc;
+#endif
+    if (amvenc_loadmc(p) < 0) {
         //amvdec_disable();
         return -EBUSY;
-    }
+    }	
     debug_level(1,"succeed to load microcode\n");
     //avc_canvas_init();
     frame_start = 0;
-    idr_pic_id = 0 ;
+    idr_pic_id = 0 ;	
     frame_number = 0 ;
     process_irq = 0;
     pic_order_cnt_lsb = 0 ;
     encoder_status = ENCODER_IDLE ;
     amvenc_reset();
-    avc_init_encoder();
+    avc_init_encoder(); 
     avc_init_input_buffer();  //dct buffer setting
     avc_init_output_buffer();  //output stream buffer
     avc_prot_init();
@@ -1094,7 +1135,8 @@ static s32 avc_init(void)
     avc_init_reference_buffer(ref_buf_canvas); //reference  buffer , need set before each frame start
     avc_init_assit_buffer(); //assitant buffer for microcode
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    avc_init_ie_me_parameter();
+    if(half_ucode_mode == 0)
+        avc_init_ie_me_parameter();
 #endif
     WRITE_HREG(ENCODER_STATUS , ENCODER_IDLE);
     amvenc_start();
@@ -1105,7 +1147,7 @@ static s32 avc_init(void)
 void amvenc_avc_start_cmd(int cmd, unsigned* input_info)
 {
 	if((cmd == ENCODER_IDR)||(cmd == ENCODER_SEQUENCE)){
-		pic_order_cnt_lsb = 0;
+		pic_order_cnt_lsb = 0;	
 		frame_number = 0;
 	}
 
@@ -1113,14 +1155,14 @@ void amvenc_avc_start_cmd(int cmd, unsigned* input_info)
 		frame_number = 0;
 	}
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-	if((idr_pic_id == 0)&&(cmd == ENCODER_IDR))
+	if((idr_pic_id == 0)&&(cmd == ENCODER_IDR)&&(half_ucode_mode == 0))
 		frame_start = 1;
 #endif
 
 	if(frame_start){
 		frame_start = 0;
 		encoder_status = ENCODER_IDLE ;
-		//WRITE_HREG(HENC_SCRATCH_3,0);  //mb count
+		//WRITE_HREG(HENC_SCRATCH_3,0);  //mb count 
 		//WRITE_HREG(VLC_TOTAL_BYTES ,0); //offset in bitstream buffer
 		amvenc_reset();
 		avc_init_encoder();
@@ -1131,18 +1173,20 @@ void amvenc_avc_start_cmd(int cmd, unsigned* input_info)
 			idr_pic_id = 0;
 		}
 		avc_init_input_buffer();
-		avc_init_output_buffer();
+		avc_init_output_buffer();		
 		avc_prot_init();
-		avc_init_assit_buffer();
+		avc_init_assit_buffer(); 
 		debug_level(0,"begin to new frame\n");
 	}
-	avc_init_dblk_buffer(dblk_buf_canvas);
-	avc_init_reference_buffer(ref_buf_canvas);
+	avc_init_dblk_buffer(dblk_buf_canvas);   
+	avc_init_reference_buffer(ref_buf_canvas); 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-	if((cmd == ENCODER_IDR)||(cmd == ENCODER_NON_IDR)){
-		set_input_format((amvenc_mem_type)input_info[0], (amvenc_frame_fmt)input_info[1], input_info[2], input_info[3], input_info[4],(unsigned char)input_info[5]);
+	if(half_ucode_mode == 0){
+		if((cmd == ENCODER_IDR)||(cmd == ENCODER_NON_IDR)){
+			set_input_format((amvenc_mem_type)input_info[0], (amvenc_frame_fmt)input_info[1], input_info[2], input_info[3], input_info[4],(unsigned char)input_info[5]);
+		}
+		avc_init_ie_me_parameter();
 	}
-	avc_init_ie_me_parameter();
 #endif
 	encoder_status = cmd;
 	WRITE_HREG(ENCODER_STATUS , cmd);
@@ -1216,26 +1260,30 @@ static long amvenc_avc_ioctl(struct file *file,
 		if((ref_buf_canvas & 0xff) == (ENC_CANVAS_OFFSET)){
 			 *((unsigned*)arg)  = 1;
 		}else{
-			 *((unsigned*)arg)  = 2;
+			 *((unsigned*)arg)  = 2;	
 		}
 		break;
 	case AMVENC_AVC_IOC_INPUT_UPDATE:
 		offset  = (unsigned*)arg ;
 		WRITE_HREG(QDCT_MB_WR_PTR, (dct_buff_start_addr+ *offset));
-		break;
+		break;    
 	case AMVENC_AVC_IOC_NEW_CMD:
 		amrisc_cmd = *((unsigned*)arg) ;
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-		addr_info = (unsigned*)arg;
-		amvenc_avc_start_cmd(amrisc_cmd, &addr_info[1]);
+		if(half_ucode_mode == 0){
+			addr_info = (unsigned*)arg;
+			amvenc_avc_start_cmd(amrisc_cmd, &addr_info[1]);
+		}else{
+			amvenc_avc_start_cmd(amrisc_cmd, NULL);
+		}
 #else
 		amvenc_avc_start_cmd(amrisc_cmd, NULL);
 #endif
 		break;
 	case AMVENC_AVC_IOC_GET_STAGE:
 		*((unsigned*)arg)  = encoder_status;
-		break;
-	case AMVENC_AVC_IOC_GET_OUTPUT_SIZE:
+		break; 
+	case AMVENC_AVC_IOC_GET_OUTPUT_SIZE:	
 		*((unsigned*)arg) = READ_HREG(VLC_TOTAL_BYTES);
 		break;
 	case AMVENC_AVC_IOC_SET_QUANT:
@@ -1252,10 +1300,17 @@ static long amvenc_avc_ioctl(struct file *file,
 		    *((unsigned*)arg) = gAmvencbuff.bufspec->max_height;
 		else
 		    encoder_height = *((unsigned*)arg) ;
-		break;
+		break;	
 	case AMVENC_AVC_IOC_CONFIG_INIT:
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+		if((encoder_width<640)&&(encoder_height<480))
+			half_ucode_mode = 1;
+		else
+			half_ucode_mode = 0;
+		debug_level(1,"avc init as mode %d\n",half_ucode_mode);
+#endif
 		avc_init();
-		break;
+		break;		
 	case AMVENC_AVC_IOC_FLUSH_CACHE:
 		addr_info  = (unsigned*)arg ;
 		switch(addr_info[0]){
@@ -1295,7 +1350,7 @@ static long amvenc_avc_ioctl(struct file *file,
 			default:
 			buf_start = dct_buff_start_addr;
 			break;
-		}
+		}	    
 		cache_flush(buf_start + addr_info[1] ,addr_info[2] - addr_info[1]);
 		break;
 	case AMVENC_AVC_IOC_GET_BUFFINFO:
@@ -1368,13 +1423,13 @@ int  init_avc_device(void)
 {
     int  r =0;
     r =register_chrdev(0,DEVICE_NAME,&amvenc_avc_fops);
-    if(r<=0)
+    if(r<=0) 
     {
         amlog_level(LOG_LEVEL_HIGH,"register amvenc_avc device error\r\n");
         return  r  ;
     }
     avc_device_major= r ;
-
+    
     amvenc_avc_class = class_create(THIS_MODULE, DEVICE_NAME);
 
     amvenc_avc_dev = device_create(amvenc_avc_class, NULL,
@@ -1388,7 +1443,7 @@ int uninit_avc_device(void)
 
     class_destroy(amvenc_avc_class);
 
-    unregister_chrdev(avc_device_major, DEVICE_NAME);
+    unregister_chrdev(avc_device_major, DEVICE_NAME);	
     return 0;
 }
 
@@ -1473,7 +1528,7 @@ static int __init amvenc_avc_driver_init_module(void)
 static void __exit amvenc_avc_driver_remove_module(void)
 {
     amlog_level(LOG_LEVEL_INFO, "amvenc_avc module remove.\n");
-
+	
     platform_driver_unregister(&amvenc_avc_driver);
 }
 
diff --git a/drivers/amlogic/amports/encoder_mc.h b/drivers/amlogic/amports/encoder_mc.h
index 6bfce2cd3886..69c4453e13a1 100755
--- a/drivers/amlogic/amports/encoder_mc.h
+++ b/drivers/amlogic/amports/encoder_mc.h
@@ -8,6 +8,7 @@
 #ifndef ENCODER_MC_H
 #define ENCODER_MC_H
 
-extern const u32 encoder_mc[];
+extern const u32 full_encoder_mc[];
+extern const u32 half_encoder_mc[];
 
 #endif /* ENCODER_MC_H */
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/Makefile b/drivers/amlogic/amports/m8/ucode/encoder/Makefile
index d3a045fdc40f..fb2033b368dd 100755
--- a/drivers/amlogic/amports/m8/ucode/encoder/Makefile
+++ b/drivers/amlogic/amports/m8/ucode/encoder/Makefile
@@ -1,2 +1,2 @@
 
-obj-y				+= encoder_mc.o
+obj-y				+= encoder_mc.o 
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
index f9a3ce961edc..c7271abae469 100755
--- a/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
@@ -1,187 +1,30 @@
 /*
- * AMLOGIC  AVC encoder driver.
+ * AMLOGIC Audio/Video streaming port driver.
  *
- * Author:  Simon Zheng <simon.zheng@amlogic.com>
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the named License,
+ * or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
+ *
+ * Author:  Brian Zhu <brian.zhu@amlogic.com>
  *
  */
 
 #include <linux/types.h>
 
-const u32 encoder_mc[] __attribute__((aligned(8))) = {
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc013f40,0x0000000,
-	0xc000e80,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x69fffe2,0x6c01c22,
-	0xc780e40,0x0000000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0xc792940,0x0000000,0xc78ccc0,0x64d3008,0xc780900,0x0000000,0xc792980,
-	0x0000000,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
-	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
-	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c003c8,
-	0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,
-	0x0000000,0xa614022,0x0000000,0x6696022,0x69fffe2,0x6c01c22,0x44018a2,0x64ac021,
-	0xaae4021,0xaa34061,0xa60c0a1,0xc7816c0,0x0000000,0xa60c121,0xc784dc0,0x0000000,
-	0xa6100e1,0x0000000,0xc782980,0x0000000,0xc7ffb40,0x0000000,0xc07f480,0x0000000,
-	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
-	0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
-	0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07f380,0x80d2100,
-	0x7800148,0x4404208,0xc07f280,0x60d2108,0xc07f200,0x80d2100,0x7800108,0x4404208,
-	0xc07f100,0x60d2108,0xc07f080,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,
-	0x5804208,0x4401208,0x7c00308,0xc07ee40,0x60d2108,0x9210209,0x400f208,0x5804208,
-	0x4401208,0x7c00348,0xc07ec80,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,
-	0x6810e09,0xa803248,0xc7802c0,0x80d1f20,0x80d1f30,0xc07e9c0,0x80d2100,0xc07e940,
-	0x80d2100,0xc07e8c0,0x80d2100,0xc07e840,0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,
-	0x60d1f08,0x0000000,0x80ac007,0x8007801,0xc7fe740,0x0000000,0xc07e080,0x0000000,
-	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
-	0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
-	0xc07e100,0x80d2100,0xc07e080,0x80d2100,0x80d1f20,0x80d1f20,0xc07df80,0x80d2100,
-	0xc07df00,0x80d2100,0xc07de80,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,0xc007d40,
-	0x441a208,0xc07dcc0,0x60d2108,0xc007c40,0x6800008,0xc07dbc0,0x60d2108,0xc07db40,
-	0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
-	0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,
-	0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0x8007801,0xc7fd2c0,0x0000000,
-	0xc010400,0x0000000,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,0x9c08748,
-	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc010840,
-	0x0000000,0xc00ff40,0x0000000,0xc07c740,0x0000000,0x64ac408,0x4001208,0x60ac408,
-	0x64f4908,0x9c08048,0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
-	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,
-	0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,
-	0x9210208,0xc07c4c0,0x60d2108,0xc07c440,0x80d2107,0x64d3109,0x9010209,0x400f208,
-	0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
-	0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,
-	0x2008308,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,
-	0x98087c8,0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07bb80,0x80d2100,
-	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,
-	0xc07b900,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,
-	0x60d1f09,0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc005580,0x2408248,
-	0xc07b500,0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc0055c0,0x0000000,0x680d703,
-	0x68133c4,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,
-	0x9c08188,0x9c081c8,0x60d0008,0x64acf08,0x60f4808,0x6800289,0x78003c8,0x9485248,
-	0x60f4009,0x80ac005,0x8007801,0xc7faf80,0x0000000,0xc00eac0,0x0000000,0x64f4008,
-	0x9c08048,0x60f4008,0xc00df80,0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,
-	0x6401108,0x9808748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,
-	0x6001008,0xc00e3c0,0x0000000,0xc00dac0,0x0000000,0xc07a2c0,0x0000000,0x64f4308,
-	0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,0x9c08448,
-	0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808488,
-	0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,0x98086c8,
-	0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,0x9808008,0x60f4908,
-	0x78003c9,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,0x9808788,0x9808748,
-	0x9808688,0x9808648,0x9808608,0x9808288,0x9c08248,0x98081c8,0x9808088,0x9808048,
-	0x60f4908,0x4801249,0xaa10049,0x0000000,0xc781640,0x0000000,0x6800c08,0x6800809,
-	0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x60f5608,0x6800008,0x6800009,
-	0x9508209,0x60f5708,0x680c0c8,0x6c00008,0x60f5808,0x68000c8,0x68000c9,0x9484209,
-	0x68000c9,0x9504209,0x6800049,0x9581209,0x6800009,0x95a1209,0x6800049,0x95c5209,
-	0x60f5908,0x6800388,0x6800489,0x9508209,0x6800149,0x9604209,0x68000c9,0x9684209,
-	0x6800109,0x9704209,0x6800089,0x9704209,0x60f5a08,0x6800008,0x6800009,0x9508209,
-	0x6800809,0x9608209,0x6801409,0x9708209,0x60f5b08,0x6801008,0x6800009,0x9508209,
-	0x6801809,0x9608209,0x6803009,0x9708209,0x60f5c08,0x6800608,0x6801409,0x9508209,
-	0x6800809,0x9608209,0x6801809,0x9708209,0x60f5d08,0x68000c8,0x6801809,0x948c209,
-	0x6800249,0x9607209,0x6800009,0x96e1209,0x6800c09,0x9708209,0x60f5e08,0x68000c8,
-	0x6800009,0x9461209,0x6800049,0x9481209,0x6800009,0x94a2209,0x6803009,0x950c209,
-	0x6801c09,0x968c209,0x60f5f08,0xc7807c0,0x0000000,0x6804008,0x68000c9,0x9586209,
-	0x6800089,0x9646209,0x9808608,0x9808648,0x9808688,0x98086c8,0x9808708,0x9808748,
-	0x9808788,0x98087c8,0x60f5508,0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,
-	0x6801009,0x9708209,0x60f5608,0x6800c08,0x6801009,0x9508209,0x60f5708,0x680c0c8,
-	0x6c0c0c8,0x60f5808,0x64acc09,0x60f4a09,0x64d3109,0x9010209,0x400f208,0x5804208,
-	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
-	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x6bc0008,0x60d1f08,0x64d1e08,
-	0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,
-	0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077340,
-	0x60d2108,0xc0772c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,
-	0x60d3208,0x7800348,0x960f248,0x60f1e09,0xc077000,0x80d2100,0x7800148,0x7800189,
-	0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,
-	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64f1d08,
-	0x9206208,0x7800049,0xc000a80,0x2408248,0xc076a00,0x60d2108,0x80d3d00,0x80d5300,
-	0x64acd08,0x60f4208,0xc001840,0x0000000,0x68101c3,0x6813c44,0x6800008,0x6c00448,
-	0x60d3008,0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,
-	0x9808008,0x9808048,0x9808088,0x98080c8,0x9808148,0x9808188,0x98081c8,0x60d0008,
-	0x6800048,0x7800309,0x948c209,0x60f4b08,0x80ac005,0x8007801,0xc7f62c0,0x0000000,
-	0x0800000,0x7800008,0xc7f59c0,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,
-	0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffda,0x6c0001a,0x6800009,0x680001b,
-	0x6c0001b,0x400071b,0x680000b,0x680c00e,0x680100f,0x740039a,0x400138e,0x7400389,
-	0x400138e,0x740039b,0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,
-	0x6c0000e,0x200e30e,0x680000f,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
-	0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffd00,
-	0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,
-	0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d371a,0x60d391b,0x60d381a,
-	0x60d3a1b,0xcc00000,0x0000000,0x8098002,0x8098000,0x6a0001d,0x6d0001d,0x6a0001e,
-	0x6d0001e,0x6a0001f,0x6d0001f,0x6a00020,0x6d00020,0x690000a,0x680001b,0x6c0001b,
-	0x400071b,0x6800009,0x680c00e,0x680064f,0x740039b,0x400138e,0x7400389,0x400138e,
-	0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,
-	0x740039f,0x400138e,0x740038a,0x400138e,0x74003a0,0x400138e,0x740038a,0x400138e,
-	0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x6803e8d,
-	0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,
-	0xb611e8f,0x6807d0d,0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,
-	0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,
-	0x60d391b,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x60d4a1d,0x60d4a1d,0x60d3a1b,
-	0x60d4e1d,0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,0x0000000,0xaa10008,0x64d370e,
-	0xcb80003,0x64d390f,0xc7f33c0,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,
-	0x60d391b,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,
-	0xaa1c249,0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,
-	0x80d3603,0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0x680c10a,0x7800289,
-	0xa814248,0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,
-	0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,
-	0x78002c9,0xb40d248,0x7800309,0xb40b248,0x700029a,0x400128a,0x700028e,0x961068e,
-	0x400128a,0x700029b,0x400128a,0x700028f,0xc7f2540,0x96106cf,0x908c210,0x7800289,
-	0x2409248,0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,
-	0x64d3609,0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,
-	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,
-	0x6c0000e,0x200e30e,0x780028f,0x54033cf,0x200e3ce,0x603510e,0x680400d,0x603520d,
-	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb830248,0x4001208,0x920c210,0x7800349,
-	0xb82c248,0x6800008,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,
-	0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,
-	0xbefc108,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,
-	0x80ac009,0x8007801,0xc7f0fc0,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,
-	0x690000e,0x6c0000e,0x200e30e,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,
-	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
-	0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fe1c0,0x680c00a,0x64d4a11,
-	0x64d4b12,0x64d4c13,0x64d4d14,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x64d3510,
-	0x908c250,0xa62c009,0x60d391b,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,
-	0x60d5109,0x6800009,0x6c00009,0x60d3a09,0x80d5201,0x80d3607,0x80d3601,0x80d3608,
-	0x80d3609,0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0xaa10008,0x680bfca,
-	0xc000ec0,0x4401208,0x908c210,0x7800309,0xb82b248,0x0000000,0x64d0009,0x9384249,
-	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x920c290,0x7800349,0xb80c24a,
-	0x0000000,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
-	0x0000000,0xc7fe040,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,
-	0xc0006c0,0x7800308,0xc000e40,0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001740,
-	0x680c00a,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0xc780280,0x680c28a,0x401528a,
-	0x908c210,0x4002208,0x78002c9,0xb004248,0xc0009c0,0x908c450,0x680c50a,0xc001340,
-	0x0000000,0xc7ef200,0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,
-	0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,
-	0x400128a,0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,
-	0x400128a,0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,
-	0x5810514,0xcc00000,0x7400294,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x540434f,
-	0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,
-	0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,
-	0x200e30e,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
-	0x580f34d,0xbef804d,0xcc00000,0x0000000,0x40006dc,0x700029c,0x400128a,0x7000289,
-	0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,
-	0x400128a,0x7000289,0x9610789,0x400128a,0x700029f,0x400128a,0x7000289,0x96107c9,
-	0x400128a,0x70002a0,0x400128a,0x7000289,0xcc00000,0x9610809,0x64d1602,0x9162082,
-	0xaa0c002,0xc7fff40,0x0000000,0xc7ed780,0x0000000,0xcb80004,0x64f1f08,0x9361248,
-	0xaa10009,0x9042248,0xc7ed5c0,0x0000000,0xaa14009,0x680324a,0xaa0c049,0x680348a,
-	0x680390a,0x7800088,0x7800309,0xb806248,0x4001208,0x6800008,0x78000c9,0x4001249,
-	0x7c000c9,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,
-	0x980a58a,0x78000c8,0xa60c008,0x60f4108,0x980a54a,0x980a7ca,0x60f1f0a,0xc7ece80,
-	0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7ecd00,0x0000000,0x920c248,
-	0x780034a,0xb408289,0x4001249,0x960c209,0x60f4a08,0x6800048,0x7800309,0x948c209,
-	0x60f4b08,0xc7eca00,0x0000000,0x64ac10c,0x680c008,0x6094008,0x6803009,0x6804008,
-	0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,
-	0xc000a00,0x0000000,0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,
-	0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,
-	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,
-	0x200a30a,0x609440a,0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,
-	0xc0005c0,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,
-	0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,
-	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,
-	0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,
-	0x440128a,0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-};
-
-
+#define MicroCode full_encoder_mc
+#include "full_encoder_linux.h"
 
+#undef MicroCode
+#define MicroCode half_encoder_mc
+#include "half_encoder_linux.h"
 
-                   
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h b/drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h
new file mode 100755
index 000000000000..2914925e67c1
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h
@@ -0,0 +1,178 @@
+const u32 MicroCode[] __attribute__((aligned(8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc013f40,0x0000000,
+	0xc000e80,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x69fffe2,0x6c01c22,
+	0xc780e40,0x0000000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0xc792940,0x0000000,0xc78ccc0,0x64d3008,0xc780900,0x0000000,0xc792980,
+	0x0000000,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
+	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
+	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c003c8,
+	0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,
+	0x0000000,0xa614022,0x0000000,0x6696022,0x69fffe2,0x6c01c22,0x44018a2,0x64ac021,
+	0xaae4021,0xaa34061,0xa60c0a1,0xc7816c0,0x0000000,0xa60c121,0xc784dc0,0x0000000,
+	0xa6100e1,0x0000000,0xc782980,0x0000000,0xc7ffb40,0x0000000,0xc07f480,0x0000000,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07f380,0x80d2100,
+	0x7800148,0x4404208,0xc07f280,0x60d2108,0xc07f200,0x80d2100,0x7800108,0x4404208,
+	0xc07f100,0x60d2108,0xc07f080,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,
+	0x5804208,0x4401208,0x7c00308,0xc07ee40,0x60d2108,0x9210209,0x400f208,0x5804208,
+	0x4401208,0x7c00348,0xc07ec80,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,
+	0x6810e09,0xa803248,0xc7802c0,0x80d1f20,0x80d1f30,0xc07e9c0,0x80d2100,0xc07e940,
+	0x80d2100,0xc07e8c0,0x80d2100,0xc07e840,0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,
+	0x60d1f08,0x0000000,0x80ac007,0x8007801,0xc7fe740,0x0000000,0xc07e080,0x0000000,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0xc07e100,0x80d2100,0xc07e080,0x80d2100,0x80d1f20,0x80d1f20,0xc07df80,0x80d2100,
+	0xc07df00,0x80d2100,0xc07de80,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,0xc007d40,
+	0x441a208,0xc07dcc0,0x60d2108,0xc007c40,0x6800008,0xc07dbc0,0x60d2108,0xc07db40,
+	0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
+	0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,
+	0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0x8007801,0xc7fd2c0,0x0000000,
+	0xc010400,0x0000000,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,0x9c08748,
+	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc010840,
+	0x0000000,0xc00ff40,0x0000000,0xc07c740,0x0000000,0x64ac408,0x4001208,0x60ac408,
+	0x64f4908,0x9c08048,0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,
+	0x9210208,0xc07c4c0,0x60d2108,0xc07c440,0x80d2107,0x64d3109,0x9010209,0x400f208,
+	0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
+	0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,
+	0x2008308,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,
+	0x98087c8,0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07bb80,0x80d2100,
+	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,
+	0xc07b900,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc005580,0x2408248,
+	0xc07b500,0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc0055c0,0x0000000,0x680d703,
+	0x68133c4,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,
+	0x9c08188,0x9c081c8,0x60d0008,0x64acf08,0x60f4808,0x6800289,0x78003c8,0x9485248,
+	0x60f4009,0x80ac005,0x8007801,0xc7faf80,0x0000000,0xc00eac0,0x0000000,0x64f4008,
+	0x9c08048,0x60f4008,0xc00df80,0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,
+	0x6401108,0x9808748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,
+	0x6001008,0xc00e3c0,0x0000000,0xc00dac0,0x0000000,0xc07a2c0,0x0000000,0x64f4308,
+	0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,0x9c08448,
+	0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808488,
+	0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,0x98086c8,
+	0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,0x9808008,0x60f4908,
+	0x78003c9,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,0x9808788,0x9808748,
+	0x9808688,0x9808648,0x9808608,0x9808288,0x9c08248,0x98081c8,0x9808088,0x9808048,
+	0x60f4908,0x4801249,0xaa10049,0x0000000,0xc781640,0x0000000,0x6800c08,0x6800809,
+	0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x60f5608,0x6800008,0x6800009,
+	0x9508209,0x60f5708,0x680c0c8,0x6c00008,0x60f5808,0x68000c8,0x68000c9,0x9484209,
+	0x68000c9,0x9504209,0x6800049,0x9581209,0x6800009,0x95a1209,0x6800049,0x95c5209,
+	0x60f5908,0x6800388,0x6800489,0x9508209,0x6800149,0x9604209,0x68000c9,0x9684209,
+	0x6800109,0x9704209,0x6800089,0x9704209,0x60f5a08,0x6800008,0x6800009,0x9508209,
+	0x6800809,0x9608209,0x6801409,0x9708209,0x60f5b08,0x6801008,0x6800009,0x9508209,
+	0x6801809,0x9608209,0x6803009,0x9708209,0x60f5c08,0x6800608,0x6801409,0x9508209,
+	0x6800809,0x9608209,0x6801809,0x9708209,0x60f5d08,0x68000c8,0x6801809,0x948c209,
+	0x6800249,0x9607209,0x6800009,0x96e1209,0x6800c09,0x9708209,0x60f5e08,0x68000c8,
+	0x6800009,0x9461209,0x6800049,0x9481209,0x6800009,0x94a2209,0x6803009,0x950c209,
+	0x6801c09,0x968c209,0x60f5f08,0xc7807c0,0x0000000,0x6804008,0x68000c9,0x9586209,
+	0x6800089,0x9646209,0x9808608,0x9808648,0x9808688,0x98086c8,0x9808708,0x9808748,
+	0x9808788,0x98087c8,0x60f5508,0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,
+	0x6801009,0x9708209,0x60f5608,0x6800c08,0x6801009,0x9508209,0x60f5708,0x680c0c8,
+	0x6c0c0c8,0x60f5808,0x64acc09,0x60f4a09,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
+	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x6bc0008,0x60d1f08,0x64d1e08,
+	0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,
+	0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077340,
+	0x60d2108,0xc0772c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,
+	0x60d3208,0x7800348,0x960f248,0x60f1e09,0xc077000,0x80d2100,0x7800148,0x7800189,
+	0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64f1d08,
+	0x9206208,0x7800049,0xc000a80,0x2408248,0xc076a00,0x60d2108,0x80d3d00,0x80d5300,
+	0x64acd08,0x60f4208,0xc001840,0x0000000,0x68101c3,0x6813c44,0x6800008,0x6c00448,
+	0x60d3008,0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,
+	0x9808008,0x9808048,0x9808088,0x98080c8,0x9808148,0x9808188,0x98081c8,0x60d0008,
+	0x6800048,0x7800309,0x948c209,0x60f4b08,0x80ac005,0x8007801,0xc7f62c0,0x0000000,
+	0x0800000,0x7800008,0xc7f59c0,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,
+	0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffda,0x6c0001a,0x6800009,0x680001b,
+	0x6c0001b,0x400071b,0x680000b,0x680c00e,0x680100f,0x740039a,0x400138e,0x7400389,
+	0x400138e,0x740039b,0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,
+	0x6c0000e,0x200e30e,0x680000f,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffd00,
+	0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,
+	0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d371a,0x60d391b,0x60d381a,
+	0x60d3a1b,0xcc00000,0x0000000,0x8098002,0x8098000,0x6a0001d,0x6d0001d,0x6a0001e,
+	0x6d0001e,0x6a0001f,0x6d0001f,0x6a00020,0x6d00020,0x690000a,0x680001b,0x6c0001b,
+	0x400071b,0x6800009,0x680c00e,0x680064f,0x740039b,0x400138e,0x7400389,0x400138e,
+	0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,
+	0x740039f,0x400138e,0x740038a,0x400138e,0x74003a0,0x400138e,0x740038a,0x400138e,
+	0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x6803e8d,
+	0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,
+	0xb611e8f,0x6807d0d,0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,
+	0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,
+	0x60d391b,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x60d4a1d,0x60d4a1d,0x60d3a1b,
+	0x60d4e1d,0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,0x0000000,0xaa10008,0x64d370e,
+	0xcb80003,0x64d390f,0xc7f33c0,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,
+	0x60d391b,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,
+	0xaa1c249,0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,
+	0x80d3603,0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0x680c10a,0x7800289,
+	0xa814248,0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,
+	0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,
+	0x78002c9,0xb40d248,0x7800309,0xb40b248,0x700029a,0x400128a,0x700028e,0x961068e,
+	0x400128a,0x700029b,0x400128a,0x700028f,0xc7f2540,0x96106cf,0x908c210,0x7800289,
+	0x2409248,0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,
+	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,
+	0x6c0000e,0x200e30e,0x780028f,0x54033cf,0x200e3ce,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb830248,0x4001208,0x920c210,0x7800349,
+	0xb82c248,0x6800008,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,
+	0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,
+	0xbefc108,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,
+	0x80ac009,0x8007801,0xc7f0fc0,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,
+	0x690000e,0x6c0000e,0x200e30e,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
+	0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fe1c0,0x680c00a,0x64d4a11,
+	0x64d4b12,0x64d4c13,0x64d4d14,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x64d3510,
+	0x908c250,0xa62c009,0x60d391b,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,
+	0x60d5109,0x6800009,0x6c00009,0x60d3a09,0x80d5201,0x80d3607,0x80d3601,0x80d3608,
+	0x80d3609,0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0xaa10008,0x680bfca,
+	0xc000ec0,0x4401208,0x908c210,0x7800309,0xb82b248,0x0000000,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x920c290,0x7800349,0xb80c24a,
+	0x0000000,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
+	0x0000000,0xc7fe040,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,
+	0xc0006c0,0x7800308,0xc000e40,0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001740,
+	0x680c00a,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0xc780280,0x680c28a,0x401528a,
+	0x908c210,0x4002208,0x78002c9,0xb004248,0xc0009c0,0x908c450,0x680c50a,0xc001340,
+	0x0000000,0xc7ef200,0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,
+	0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,
+	0x400128a,0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,
+	0x400128a,0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,
+	0x5810514,0xcc00000,0x7400294,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x540434f,
+	0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,
+	0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,
+	0x200e30e,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
+	0x580f34d,0xbef804d,0xcc00000,0x0000000,0x40006dc,0x700029c,0x400128a,0x7000289,
+	0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,
+	0x400128a,0x7000289,0x9610789,0x400128a,0x700029f,0x400128a,0x7000289,0x96107c9,
+	0x400128a,0x70002a0,0x400128a,0x7000289,0xcc00000,0x9610809,0x64d1602,0x9162082,
+	0xaa0c002,0xc7fff40,0x0000000,0xc7ed780,0x0000000,0xcb80004,0x64f1f08,0x9361248,
+	0xaa10009,0x9042248,0xc7ed5c0,0x0000000,0xaa14009,0x680324a,0xaa0c049,0x680348a,
+	0x680390a,0x7800088,0x7800309,0xb806248,0x4001208,0x6800008,0x78000c9,0x4001249,
+	0x7c000c9,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,
+	0x980a58a,0x78000c8,0xa60c008,0x60f4108,0x980a54a,0x980a7ca,0x60f1f0a,0xc7ece80,
+	0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7ecd00,0x0000000,0x920c248,
+	0x780034a,0xb408289,0x4001249,0x960c209,0x60f4a08,0x6800048,0x7800309,0x948c209,
+	0x60f4b08,0xc7eca00,0x0000000,0x64ac10c,0x680c008,0x6094008,0x6803009,0x6804008,
+	0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,
+	0xc000a00,0x0000000,0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,
+	0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,
+	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,
+	0x200a30a,0x609440a,0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,
+	0xc0005c0,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,
+	0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,
+	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,
+	0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,
+	0x440128a,0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
+
+
+
+
+                   
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h b/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
new file mode 100755
index 000000000000..561fdc470f02
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
@@ -0,0 +1,143 @@
+const u32 MicroCode[] __attribute__((aligned(8))) ={
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc00fb00,0x0000000,
+	0xc000e00,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x69fffe2,0x6c01c22,
+	0xc780dc0,0x0000000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0xc78ea00,0x0000000,0xc788d80,0x64d3008,0xc780880,0x0000000,0xc78ea40,
+	0x64f1f08,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
+	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
+	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0xcc00000,0x0000000,
+	0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,0xa614022,
+	0x0000000,0x6696022,0x69fffe2,0x6c01c22,0x44018a2,0x64ac021,0xaae4021,0xaa34061,
+	0xa60c0a1,0xc7816c0,0x0000000,0xa60c121,0xc784080,0x0000000,0xa6100e1,0x0000000,
+	0xc782280,0x0000000,0xc7ffb40,0x0000000,0xc07f500,0x0000000,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,
+	0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07f380,0x80d2100,0x7800148,0x4404208,
+	0xc07f280,0x60d2108,0xc07f200,0x80d2100,0x7800108,0x4404208,0xc07f100,0x60d2108,
+	0xc07f080,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0xc07ee40,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
+	0xc07ec80,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,
+	0xc7802c0,0x80d1f20,0x80d1f30,0xc07e9c0,0x80d2100,0xc07e940,0x80d2100,0xc07e8c0,
+	0x80d2100,0xc07e840,0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,
+	0x80ac007,0x8007801,0xc7fe740,0x0000000,0xc07e100,0x0000000,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e100,0x80d2100,
+	0xc07e080,0x80d2100,0x80d1f20,0x80d1f20,0xc07df80,0x80d2100,0xc07df00,0x80d2100,
+	0xc07de80,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,0xc003f00,0x441a208,0xc07dcc0,
+	0x60d2108,0xc003e00,0x6800008,0xc07dbc0,0x60d2108,0xc07db40,0x80d2100,0x80d1f20,
+	0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac008,0x8007801,
+	0xc7fd9c0,0x0000000,0xc00c740,0x0000000,0x6490b08,0x9c08608,0x9c08648,0x6090b08,
+	0xc00cdc0,0x0000000,0xc00c4c0,0x0000000,0xc07d100,0x0000000,0x64ac408,0x4001208,
+	0x60ac408,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x9210208,0xc07cec0,
+	0x60d2108,0xc07ce40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,0x7c00248,
+	0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x2008308,0x60f2008,
+	0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,
+	0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07c580,0x80d2100,0x7800148,0x7800189,
+	0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07c300,0x60d2108,
+	0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,
+	0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc002140,0x2408248,0xc07bf00,0x60d2108,
+	0x80d3d00,0xc002200,0x0000000,0x68097c3,0x80d300f,0x64d0008,0x9808008,0x9808048,
+	0x9808088,0x60d0008,0x80ac005,0x8007801,0xc7fbcc0,0x0000000,0xc00aa40,0x0000000,
+	0x6490b08,0x9808608,0x9c08648,0x6090b08,0xc00b0c0,0x0000000,0xc00a7c0,0x0000000,
+	0xc07b400,0x0000000,0x64f1508,0x9c08508,0x9c084c8,0x9c08588,0x9c08448,0x9c08488,
+	0x60f1508,0x9808488,0x9808448,0x98085c8,0x9808608,0x98086c8,0x60f1508,0x64d3109,
+	0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,
+	0x4401208,0x7c00348,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
+	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,
+	0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc07ad80,0x60d2108,0xc07ad00,0x80d2105,
+	0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x7800309,0x7800348,
+	0x960f248,0x60f1e09,0xc07aa00,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
+	0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64f1d08,0x9206208,0x7800049,
+	0xc000640,0x2408248,0xc07a400,0x60d2108,0x80d3d00,0x80d5300,0xc001480,0x0000000,
+	0x680c283,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9808008,0x9808048,0x9808088,
+	0x60d0008,0x80ac005,0x8007801,0xc7fa100,0x0000000,0x0800000,0x7800008,0xc7f9880,
+	0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,
+	0x5401209,0x6bfffda,0x6c0001a,0x6800009,0x680001b,0x6c0001b,0x400071b,0x680000b,
+	0x680c00e,0x680100f,0x740039a,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
+	0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e30e,0x680000f,
+	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffd00,0x200e34e,0x64d330d,0x900834d,
+	0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,
+	0x44013cf,0x7c002cf,0x60d371a,0x60d391b,0x60d381a,0x60d3a1b,0xcc00000,0x0000000,
+	0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x6a0001f,0x6d0001f,0x6a00020,0x6d00020,
+	0x690000a,0x680001b,0x6c0001b,0x400071b,0x6800009,0x680c00e,0x680064f,0x740039b,
+	0x400138e,0x7400389,0x400138e,0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,
+	0x400138e,0x740038a,0x400138e,0x740039f,0x400138e,0x740038a,0x400138e,0x74003a0,
+	0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e30e,
+	0x680000f,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffd00,0x200e34e,0x64d330d,
+	0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,
+	0x7c0028e,0x44013cf,0x7c002cf,0x60d391b,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,
+	0x60d4a1d,0x60d4a1d,0x60d3a1b,0x60d4e1d,0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,
+	0x0000000,0xaa10008,0x64d370e,0xcb80003,0x64d390f,0xc7f7300,0x0000000,0x60d371a,
+	0x64d3510,0x908c250,0xa620009,0x60d391b,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,
+	0x6c00009,0x60d3a09,0x9004250,0xaa1c249,0x80d3601,0x80d3603,0x80d3605,0x80d3606,
+	0xc780200,0x80d360f,0x80d3602,0x80d3603,0x80d3604,0x80d3605,0x80d3606,0x80d360f,
+	0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,0x680c00a,
+	0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,0x700029a,
+	0x400128a,0x700028e,0x961068e,0x400128a,0x700029b,0x400128a,0x700028f,0xc7f6480,
+	0x96106cf,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,0x64d390f,
+	0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,
+	0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x54033cf,0x200e3ce,
+	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb830248,
+	0x4001208,0x920c210,0x7800349,0xb82c248,0x6800008,0x80d3000,0x80d1f30,0x6bc0008,
+	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
+	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x7800188,0x4001208,0x7c00188,
+	0x7800208,0x4002208,0x7c00208,0x80ac009,0x8007801,0xc7f4f00,0x0000000,0x7c00288,
+	0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,0x200e30e,0x200e20e,0x680400f,
+	0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,
+	0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0xc7fe1c0,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x60d4a1d,0x60d4b1e,
+	0x60d4c1f,0x60d4d20,0x64d3510,0x908c250,0xa62c009,0x60d391b,0x6a00009,0x6d00009,
+	0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6800009,0x6c00009,0x60d3a09,0x80d5201,
+	0x80d3607,0x80d3601,0x80d3608,0x80d3609,0x80d3604,0x80d3605,0x80d3606,0x80d360f,
+	0x908c210,0xaa10008,0x680bfca,0xc000ec0,0x4401208,0x908c210,0x7800309,0xb82b248,
+	0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
+	0x920c290,0x7800349,0xb80c24a,0x0000000,0x64d5309,0xaa1c009,0x0000000,0x60d2109,
+	0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fe040,0x0000000,0x64d390f,0x64d4a11,
+	0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,0x6800011,0x6a00014,
+	0x6d00014,0x60d4d14,0xc001740,0x680c00a,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,
+	0xc780280,0x680c28a,0x401528a,0x908c210,0x4002208,0x78002c9,0xb004248,0xc0009c0,
+	0x908c450,0x680c50a,0xc001340,0x0000000,0xc7f3140,0x0000000,0x7800289,0x240a248,
+	0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,
+	0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,0x400128a,0x7400292,
+	0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,0x58104d3,0x7400293,
+	0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,0x690000e,0x6c0000e,
+	0x200e30e,0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,
+	0x603520d,0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,
+	0x2008248,0x690000e,0x6c0000e,0x200e30e,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
+	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x40006dc,
+	0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,
+	0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,0x9610789,0x400128a,0x700029f,
+	0x400128a,0x7000289,0x96107c9,0x400128a,0x70002a0,0x400128a,0x7000289,0xcc00000,
+	0x9610809,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7f16c0,0x0000000,
+	0x93e1248,0xaa10009,0x9042248,0xc7f1580,0x0000000,0xaa14009,0x680324a,0xaa0c049,
+	0x680348a,0x680390a,0x7800088,0x7800309,0xb806248,0x4001208,0x6800008,0x78000c9,
+	0x4001249,0x7c000c9,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,
+	0x0000000,0x980a58a,0x78000c8,0xa60c008,0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,
+	0xc7f0e40,0x0000000,0x64ac10c,0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,
+	0x6094108,0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000a00,
+	0x0000000,0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,
+	0x54042ca,0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,
+	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a30a,
+	0x609440a,0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,0xc0005c0,
+	0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,0x683ffc9,
+	0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,
+	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,
+	0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,
+	0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
+
+
+
+                   
-- 
2.19.0

