From 56cbaf39c5d0e4af740cddb7cde046b74abf21bf Mon Sep 17 00:00:00 2001
From: timyao <tim.yao@amlogic.com>
Date: Fri, 22 Nov 2013 00:07:03 -0800
Subject: [PATCH 2059/5965] PD #82705. Use VPU clock rate to control both
 horizontal and vertical line skip.

---
 arch/arm/mach-meson8/include/mach/vpu.h |  1 +
 arch/arm/mach-meson8/vpu.c              |  2 +-
 drivers/amlogic/amports/video.c         | 18 ++++--
 drivers/amlogic/amports/vpp.c           | 77 +++++++++++++++----------
 drivers/amlogic/amports/vpp.h           |  5 ++
 5 files changed, 65 insertions(+), 38 deletions(-)

diff --git a/arch/arm/mach-meson8/include/mach/vpu.h b/arch/arm/mach-meson8/include/mach/vpu.h
index 6872e25e2c69..bab52c1bd2b4 100755
--- a/arch/arm/mach-meson8/include/mach/vpu.h
+++ b/arch/arm/mach-meson8/include/mach/vpu.h
@@ -38,6 +38,7 @@ typedef enum {
 #define VPU_MEM_POWER_ON		0
 #define VPU_MEM_POWER_DOWN		1
 
+extern unsigned int get_vpu_clk(void);
 extern unsigned int get_vpu_clk_vmod(unsigned int vmod);
 extern int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod);
 extern int release_vpu_clk_vmod(unsigned int vmod);
diff --git a/arch/arm/mach-meson8/vpu.c b/arch/arm/mach-meson8/vpu.c
index 86c1d820ad8b..f0235cfb24cf 100755
--- a/arch/arm/mach-meson8/vpu.c
+++ b/arch/arm/mach-meson8/vpu.c
@@ -199,7 +199,7 @@ static unsigned int get_vpu_clk_level(unsigned int video_clk)
 	return clk_level;
 }
 
-static unsigned int get_vpu_clk(void)
+unsigned int get_vpu_clk(void)
 {
 	unsigned int clk_freq;
 	unsigned int clk_source, clk_div;
diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index b3fc80bcaed5..108ead392678 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -687,7 +687,7 @@ static void vpp_settings_v(vpp_frame_par_t *framePtr)
                    vpp_filter->vpp_vsc_start_phase_step);
 }
 
-static void zoom_display_horz(void)
+static void zoom_display_horz(int hscale)
 {
     VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_X0 + cur_dev->viu_off,
                    (zoom_start_x_lines << VDIF_PIC_START_BIT) |
@@ -706,8 +706,8 @@ static void zoom_display_horz(void)
                    (zoom_end_x_lines / 2   << VDIF_PIC_END_BIT));
 
     VSYNC_WR_MPEG_REG(VIU_VD1_FMT_W + cur_dev->viu_off,
-                   ((zoom_end_x_lines - zoom_start_x_lines + 1) << VD1_FMT_LUMA_WIDTH_BIT) |
-                   ((zoom_end_x_lines / 2 - zoom_start_x_lines / 2 + 1) << VD1_FMT_CHROMA_WIDTH_BIT));
+                   (((zoom_end_x_lines - zoom_start_x_lines + 1) >> hscale) << VD1_FMT_LUMA_WIDTH_BIT) |
+                   (((zoom_end_x_lines / 2 - zoom_start_x_lines / 2 + 1) >> hscale) << VD1_FMT_CHROMA_WIDTH_BIT));
 
     VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_X0,
                    (zoom_start_x_lines << VDIF_PIC_START_BIT) |
@@ -726,8 +726,8 @@ static void zoom_display_horz(void)
                    (zoom_end_x_lines / 2   << VDIF_PIC_END_BIT));
 
     VSYNC_WR_MPEG_REG(VIU_VD2_FMT_W + cur_dev->viu_off,
-                   ((zoom_end_x_lines - zoom_start_x_lines + 1) << VD1_FMT_LUMA_WIDTH_BIT) |
-                   ((zoom_end_x_lines / 2 - zoom_start_x_lines / 2 + 1) << VD1_FMT_CHROMA_WIDTH_BIT));
+                   (((zoom_end_x_lines - zoom_start_x_lines + 1) >> hscale) << VD1_FMT_LUMA_WIDTH_BIT) |
+                   (((zoom_end_x_lines / 2 - zoom_start_x_lines / 2 + 1) >> hscale) << VD1_FMT_CHROMA_WIDTH_BIT));
 }
 
 static void zoom_display_vert(void)
@@ -1049,6 +1049,11 @@ static void viu_set_dcu(vpp_frame_par_t *frame_par, vframe_t *vf)
         r &= 0xffffffbf;
     }
 #endif
+
+    if (frame_par->hscale_skip_count) {
+        r |= VDIF_CHROMA_HZ_AVG | VDIF_LUMA_HZ_AVG;
+    }
+
     VSYNC_WR_MPEG_REG(VD1_IF0_GEN_REG + cur_dev->viu_off, r);
     VSYNC_WR_MPEG_REG(VD2_IF0_GEN_REG, r);
 
@@ -1943,6 +1948,7 @@ SET_FILTER:
         u32 vin_type = cur_dispbuf->type & VIDTYPE_TYPEMASK;
 
         {
+            if (frame_par_ready_to_set)
             viu_set_dcu(cur_frame_par, cur_dispbuf);
         }
 
@@ -1997,7 +2003,7 @@ SET_FILTER:
 
             zoom_start_x_lines = cur_frame_par->VPP_hd_start_lines_;
             zoom_end_x_lines   = cur_frame_par->VPP_hd_end_lines_;
-            zoom_display_horz();
+            zoom_display_horz(cur_frame_par->hscale_skip_count);
 
             zoom_start_y_lines = zoom_start_y;
             zoom_end_y_lines   = zoom_end_y;
diff --git a/drivers/amlogic/amports/vpp.c b/drivers/amlogic/amports/vpp.c
index ce6e41d02242..6312d4560e26 100755
--- a/drivers/amlogic/amports/vpp.c
+++ b/drivers/amlogic/amports/vpp.c
@@ -23,6 +23,9 @@
 #include <linux/err.h>
 #include <linux/amlogic/vout/vinfo.h>
 #include <mach/am_regs.h>
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#include <mach/vpu.h>
+#endif
 #include <linux/amlogic/amports/vframe.h>
 #include "video.h"
 #include "vpp.h"
@@ -53,7 +56,7 @@
 #define MAX_NONLINEAR_FACTOR    0x40
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-#define VPP_SPEED_FACTOR 1296
+#define VPP_SPEED_FACTOR 0x110ULL
 #endif
 
 const u32 vpp_filter_coefs_bicubic_sharp[] = {
@@ -277,31 +280,32 @@ vpp_process_speed_check(u32 width_in,
                         const vinfo_t *vinfo)
 {
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    // processing line numbers (height_in)
-    // output screen hight (height_out) vs. screen height (height_screen) ratio, output frame rate
-
-    // if (((height_in/1296) * (height_screen / height_out) * ((vinfo->sync_duration_num/vinfo->sync_duration_den)/60)) > 1) {
-    if (!get_prot_on() && ((height_in * height_screen * vinfo->sync_duration_num) > (VPP_SPEED_FACTOR * height_out * vinfo->sync_duration_den * 60))) {
-        // @60hz output, vpp can process 1296 lines when output window fully running, it's a measured result and can be adjustable
-        return 1;
+    if (height_in > height_out) {
+        if (div_u64(VPP_SPEED_FACTOR * width_in * height_in * vinfo->sync_duration_num * height_screen,
+                    height_out * vinfo->sync_duration_den * 256) > get_vpu_clk()) {
+            return SPEED_CHECK_VSKIP;
+        } else {
+            return SPEED_CHECK_DONE;
+        }
+    } else if (next_frame_par->hscale_skip_count== 0) {
+        if (div_u64(VPP_SPEED_FACTOR * width_in * vinfo->sync_duration_num * height_screen,
+                    vinfo->sync_duration_den * 256) > get_vpu_clk()) {
+            return SPEED_CHECK_HSKIP;
+        } else {
+            return SPEED_CHECK_DONE;
+        }
     }
 
-    // no skip
-    return 0;
+    return SPEED_CHECK_DONE;
 
 #else
-
-   if((height_in > 1080)&&(next_frame_par->vscale_skip_count== 0 )){
-   		return 1;
-   }
-
     if (video_speed_check_width * video_speed_check_height * height_out > height_screen * width_in * height_in) {
-        return 0;
+        return SPEED_CHECK_DONE;
     }
 
     amlog_mask(LOG_MASK_VPP, "vpp_process_speed_check failed\n");
 
-    return 1;
+    return SPEED_CHECK_VSKIP;
 #endif
 }
 
@@ -346,6 +350,7 @@ vpp_set_filters2(u32 width_in,
 #endif
 
     next_frame_par->vscale_skip_count = 0;
+    next_frame_par->hscale_skip_count = 0;
 
     if (vpp_flags & VPP_FLAG_INTERLACE_IN) {
         next_frame_par->vscale_skip_count++;
@@ -542,7 +547,6 @@ RESTART:
                            vpp_flags & VPP_FLAG_INTERLACE_OUT);
 
     /* horizontal */
-
     filter->vpp_hf_start_phase_slope = 0;
     filter->vpp_hf_end_phase_slope   = 0;
     filter->vpp_hf_start_phase_step  = ratio_x << 6;
@@ -627,24 +631,35 @@ RESTART:
      * if we need skip half resolution on source side for progressive
      * frames.
      */
-    if ((next_frame_par->vscale_skip_count < 4)&&(!(vpp_flags & VPP_FLAG_VSCALE_DISABLE))&&
-        vpp_process_speed_check(next_frame_par->VPP_hd_end_lines_ - next_frame_par->VPP_hd_start_lines_ + 1,
-                                (next_frame_par->VPP_vd_end_lines_ - next_frame_par->VPP_vd_start_lines_ + 1) / (next_frame_par->vscale_skip_count + 1) ,
-                                next_frame_par->VPP_vsc_endp - next_frame_par->VPP_vsc_startp,
-                                height_out >> ((vpp_flags & VPP_FLAG_INTERLACE_OUT) ? 1 : 0),
-                                next_frame_par,
-                                vinfo)) {
-        if (vpp_flags & VPP_FLAG_INTERLACE_IN) {
-            next_frame_par->vscale_skip_count += 2;
-        } else {
-            next_frame_par->vscale_skip_count++;
-        }
+    if ((next_frame_par->vscale_skip_count < 4)&&(!(vpp_flags & VPP_FLAG_VSCALE_DISABLE))) {
+        int skip = vpp_process_speed_check(
+                       (next_frame_par->VPP_hd_end_lines_ - next_frame_par->VPP_hd_start_lines_ + 1) / (next_frame_par->hscale_skip_count + 1),
+                       (next_frame_par->VPP_vd_end_lines_ - next_frame_par->VPP_vd_start_lines_ + 1) / (next_frame_par->vscale_skip_count + 1),
+                       next_frame_par->VPP_vsc_endp - next_frame_par->VPP_vsc_startp,
+                       height_out >> ((vpp_flags & VPP_FLAG_INTERLACE_OUT) ? 1 : 0),
+                       next_frame_par,
+                       vinfo);
+
+        if (skip == SPEED_CHECK_VSKIP) {
+            if (vpp_flags & VPP_FLAG_INTERLACE_IN) {
+                next_frame_par->vscale_skip_count += 2;
+            } else {
+                next_frame_par->vscale_skip_count++;
+            }
+            goto RESTART;
 
-        goto RESTART;
+        } else if (skip == SPEED_CHECK_HSKIP) {
+            next_frame_par->hscale_skip_count = 1;
+        }
     }
 
     filter->vpp_hsc_start_phase_step = ratio_x << 6;
 
+    if (next_frame_par->hscale_skip_count) {
+        filter->vpp_hf_start_phase_step >>= 1;
+        next_frame_par->VPP_line_in_length_ >>= 1;
+    }
+
     next_frame_par->VPP_hf_ini_phase_ = vpp_zoom_center_x & 0xff;
 }
 
diff --git a/drivers/amlogic/amports/vpp.h b/drivers/amlogic/amports/vpp.h
index 944ef7e027db..7939560c51ad 100755
--- a/drivers/amlogic/amports/vpp.h
+++ b/drivers/amlogic/amports/vpp.h
@@ -39,6 +39,10 @@
 #define ASPECT_4_3      ((3<<8)/4)
 #define ASPECT_16_9     ((9<<8)/16)
 
+#define SPEED_CHECK_DONE	0
+#define SPEED_CHECK_HSKIP	1
+#define SPEED_CHECK_VSKIP	2
+
 typedef enum {
     F2V_IT2IT = 0,
     F2V_IB2IB,
@@ -104,6 +108,7 @@ typedef struct {
 
     u32 VPP_postproc_misc_;
     u32 vscale_skip_count;
+    u32 hscale_skip_count;
 } vpp_frame_par_t;
 
 extern void
-- 
2.19.0

