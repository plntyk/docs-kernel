From b5a281593cc888e9394ecf88e2b8481e1832aca5 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Sat, 23 Nov 2013 22:59:34 +0800
Subject: [PATCH 2063/5965] PD #82698:disable delay 30ms in isp thread. get aet
 max everytime,disable 3a on capture

---
 drivers/amlogic/tvin/isp/isp_drv.c | 55 +++++++++++++++++-------------
 drivers/amlogic/tvin/isp/isp_drv.h |  2 +-
 drivers/amlogic/tvin/isp/isp_sm.c  |  3 ++
 3 files changed, 35 insertions(+), 25 deletions(-)

diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index feb92af175ca..556ce76bda30 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -760,9 +760,8 @@ static int isp_thread(isp_dev_t *devp) {
 			func->set_af_new_step(devp->af_info.cur_step);
 		}
 	}
-    if(kthread_should_stop())
-        break;
-	msleep(30);
+        if(kthread_should_stop())
+                break;
 	}
 }
 
@@ -956,7 +955,7 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 	cmd = param->cam_command;
 	devp->cam_param = param;
 	if(ioctl_debug)
-	 	pr_info("[%s..]%s:cmd: %s .\n",DEVICE_NAME,__func__,cam_cmd_to_str(cmd));
+	 	pr_info("[%s..]%s:cmd: %s run mode %u.\n",DEVICE_NAME,__func__,cam_cmd_to_str(cmd),devp->cam_param->cam_mode);
 	switch(cmd) {
                 case CAM_COMMAND_INIT:
 		        break;
@@ -974,7 +973,9 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 	                devp->flag |= ISP_FLAG_SET_EFFECT;
 		        break;
                 case CAM_COMMAND_AWB:
-	                devp->flag |= ISP_FLAG_AWB;
+			if(!(devp->flag & ISP_FLAG_CAPTURE)){
+	               	        devp->flag |= ISP_FLAG_AWB;
+			}
 		        break;
 		case CAM_COMMAND_MWB:
 			devp->flag &= (~ISP_FLAG_AWB);
@@ -990,8 +991,10 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 			break;
                 // ae related
                 case CAM_COMMAND_AE_ON:
-		        isp_sm_init(devp);
-		        devp->flag |= ISP_FLAG_AE;
+			if(!(devp->flag & ISP_FLAG_CAPTURE)){
+		        	isp_sm_init(devp);
+		        	devp->flag |= ISP_FLAG_AE;
+			}
 		        break;
                 case CAM_COMMAND_AE_OFF:
 		        devp->flag &= (~ISP_FLAG_AE);
@@ -1011,26 +1014,30 @@ static int isp_fe_ioctl(struct tvin_frontend_s *fe, void *arg)
 			af_sm_init(devp);
 		        break;
                 case CAM_COMMAND_TOUCH_FOCUS:
-			//devp->isp_af_parm = &param->xml_scenes->af;
-			devp->isp_af_parm->x = param->xml_scenes->af.x;
-			devp->isp_af_parm->y = param->xml_scenes->af.y;
-			x0 = devp->isp_af_parm->x>devp->af_info.radius?devp->isp_af_parm->x-devp->af_info.radius:0;
-			y0 = devp->isp_af_parm->y>devp->af_info.radius?devp->isp_af_parm->y-devp->af_info.radius:0;
-			x1 = devp->isp_af_parm->x + devp->af_info.radius;
-			y1 = devp->isp_af_parm->y + devp->af_info.radius;
-			if(x1 >= devp->info.h_active)
-				x1 = devp->info.h_active - 1;
-			if(y1 >= devp->info.v_active)
-				y1 = devp->info.v_active - 1;
-			if(ioctl_debug)
-				pr_info("focus win: center(%u,%u) left(%u %u) right(%u,%u).\n",devp->isp_af_parm->x,
+			if(!(devp->flag & ISP_FLAG_CAPTURE)){
+			        //devp->isp_af_parm = &param->xml_scenes->af;
+			        devp->isp_af_parm->x = param->xml_scenes->af.x;
+			        devp->isp_af_parm->y = param->xml_scenes->af.y;
+			        x0 = devp->isp_af_parm->x>devp->af_info.radius?devp->isp_af_parm->x-devp->af_info.radius:0;
+			        y0 = devp->isp_af_parm->y>devp->af_info.radius?devp->isp_af_parm->y-devp->af_info.radius:0;
+			        x1 = devp->isp_af_parm->x + devp->af_info.radius;
+			        y1 = devp->isp_af_parm->y + devp->af_info.radius;
+			        if(x1 >= devp->info.h_active)
+				        x1 = devp->info.h_active - 1;
+			        if(y1 >= devp->info.v_active)
+				        y1 = devp->info.v_active - 1;
+			        if(ioctl_debug)
+				        pr_info("focus win: center(%u,%u) left(%u %u) right(%u,%u).\n",devp->isp_af_parm->x,
 					devp->isp_af_parm->y,x0,y0,x1,y1);
-			isp_set_af_scan_stat(x0,y0,x1,y1);
-			devp->flag |= ISP_FLAG_TOUCH_AF;
-			af_sm_init(devp);
+			        isp_set_af_scan_stat(x0,y0,x1,y1);
+			        devp->flag |= ISP_FLAG_TOUCH_AF;
+			        af_sm_init(devp);
+			}
 		        break;
                 case CAM_COMMAND_CONTINUOUS_FOCUS_ON:
-			devp->flag |= ISP_FLAG_AF;
+			if(!(devp->flag & ISP_FLAG_CAPTURE)){
+			        devp->flag |= ISP_FLAG_AF;
+			}
 		        break;
                 case CAM_COMMAND_CONTINUOUS_FOCUS_OFF:
 			devp->flag &= (~ISP_FLAG_AF);
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index 683898eb5a42..62717c4e4899 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -28,7 +28,7 @@
 #include "isp_hw.h"
 #include "../tvin_frontend.h"
 
-#define ISP_VER					"2013.11.20a"
+#define ISP_VER					"2013.11.23a"
 #define ISP_NUM					1
 #define DEVICE_NAME 			        "isp"
 
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index 5f19ec6e044a..2b38fbd33fc1 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -239,6 +239,7 @@ unsigned int isp_ae_cal_new_para(isp_dev_t *devp)
     struct isp_ae_sm_s *aepa = &sm_state.isp_ae_parm;
     struct cam_function_s *func = &devp->cam_param->cam_function;
 
+    aepa->max_step = func->get_aet_max_step();
     format_gain_new = devp->isp_ae_parm->aet_fmt_gain;
     aet_gain_new = ((aet_gain_pre * format_gain_pre) / format_gain_new);
     ae_sens.new_step = find_step(func, 0, aepa->max_step, aet_gain_new);
@@ -272,6 +273,8 @@ unsigned int isp_tune_exposure(isp_dev_t *devp)
 int isp_ae_save_current_para(isp_dev_t *devp)
 {
     struct cam_function_s *func = &devp->cam_param->cam_function;
+    struct isp_ae_sm_s *aepa = &sm_state.isp_ae_parm;
+    aepa->max_step = func->get_aet_max_step();
 
     if (func && func->get_aet_gain_by_step)
         aet_gain_pre = func->get_aet_gain_by_step(ae_sens.new_step);
-- 
2.19.0

