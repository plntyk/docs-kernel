From 7949c9531dda596e4ac1c40b1959b57828d56d87 Mon Sep 17 00:00:00 2001
From: Kasin <kasin.li@amlogic.com>
Date: Wed, 27 Nov 2013 15:55:52 +0800
Subject: [PATCH 2078/5965] PD #80764: sync: Optimize sync_fence merges

There is no need to copy sync_points that already have signalled.

When actively using sync_fence_merge a fence can collect a number of
points from different timelines over time. Processing, and copying a
large amount of points that signalled a long time ago is unnecessary.
This patch prunes off signaled fences when merging, keeping only active
fences.

In the case where all sync_points have signalled, the first sync_point
will be copied to the new fence to ensure the fence always have at least
one sync point.
---
 drivers/staging/android/sync.c | 82 +++++++++++++---------------------
 1 file changed, 32 insertions(+), 50 deletions(-)
 mode change 100644 => 100755 drivers/staging/android/sync.c

diff --git a/drivers/staging/android/sync.c b/drivers/staging/android/sync.c
old mode 100644
new mode 100755
index 3893a3574769..67508e08a61e
--- a/drivers/staging/android/sync.c
+++ b/drivers/staging/android/sync.c
@@ -313,66 +313,39 @@ EXPORT_SYMBOL(sync_fence_create);
 
 static int sync_fence_copy_pts(struct sync_fence *dst, struct sync_fence *src)
 {
-	struct list_head *pos;
+	struct list_head *pos, *test_pos;
 
 	list_for_each(pos, &src->pt_list_head) {
 		struct sync_pt *orig_pt =
 			container_of(pos, struct sync_pt, pt_list);
-		struct sync_pt *new_pt = sync_pt_dup(orig_pt);
-
-		if (new_pt == NULL)
-			return -ENOMEM;
-
-		new_pt->fence = dst;
-		list_add(&new_pt->pt_list, &dst->pt_list_head);
-	}
-
-	return 0;
-}
-
-static int sync_fence_merge_pts(struct sync_fence *dst, struct sync_fence *src)
-{
-	struct list_head *src_pos, *dst_pos, *n;
-
-	list_for_each(src_pos, &src->pt_list_head) {
-		struct sync_pt *src_pt =
-			container_of(src_pos, struct sync_pt, pt_list);
-		bool collapsed = false;
-
-		list_for_each_safe(dst_pos, n, &dst->pt_list_head) {
-			struct sync_pt *dst_pt =
-				container_of(dst_pos, struct sync_pt, pt_list);
-			/* collapse two sync_pts on the same timeline
-			 * to a single sync_pt that will signal at
-			 * the later of the two
-			 */
-			if (dst_pt->parent == src_pt->parent) {
-				if (dst_pt->parent->ops->compare(dst_pt, src_pt)
-						 == -1) {
-					struct sync_pt *new_pt =
-						sync_pt_dup(src_pt);
-					if (new_pt == NULL)
-						return -ENOMEM;
-
-					new_pt->fence = dst;
-					list_replace(&dst_pt->pt_list,
-						     &new_pt->pt_list);
-					sync_pt_free(dst_pt);
+		struct sync_pt *new_pt;
+
+		/* Skip already signaled points */
+		if (1 == orig_pt->status)
+			continue;
+
+		list_for_each(test_pos, &src->pt_list_head) {
+			struct sync_pt *test_pt =
+				container_of(pos, struct sync_pt, pt_list);
+			if (orig_pt->parent == test_pt->parent) {
+				int diff;
+				diff = orig_pt->parent->ops->compare(orig_pt, test_pt);
+				if (diff == -1) {
+					/* Skip orig_pt; another point will
+					 * signal after it */
+					continue;
 				}
-				collapsed = true;
 				break;
 			}
 		}
 
-		if (!collapsed) {
-			struct sync_pt *new_pt = sync_pt_dup(src_pt);
+		new_pt = sync_pt_dup(orig_pt);
 
-			if (new_pt == NULL)
-				return -ENOMEM;
+		if (new_pt == NULL)
+			return -ENOMEM;
 
-			new_pt->fence = dst;
-			list_add(&new_pt->pt_list, &dst->pt_list_head);
-		}
+		new_pt->fence = dst;
+		list_add(&new_pt->pt_list, &dst->pt_list_head);
 	}
 
 	return 0;
@@ -463,10 +436,19 @@ struct sync_fence *sync_fence_merge(const char *name,
 	if (err < 0)
 		goto err;
 
-	err = sync_fence_merge_pts(fence, b);
+	err = sync_fence_copy_pts(fence, b);
 	if (err < 0)
 		goto err;
 
+	/* Make sure there is at least one point in the fence */
+	if (list_empty(&fence->pt_list_head)) {
+		struct sync_pt *orig_pt = list_first_entry(&a->pt_list_head, struct sync_pt, pt_list);
+		struct sync_pt *new_pt = sync_pt_dup(orig_pt);
+
+		new_pt->fence = fence;
+		list_add(&new_pt->pt_list, &fence->pt_list_head);
+	}
+
 	list_for_each(pos, &fence->pt_list_head) {
 		struct sync_pt *pt =
 			container_of(pos, struct sync_pt, pt_list);
-- 
2.19.0

