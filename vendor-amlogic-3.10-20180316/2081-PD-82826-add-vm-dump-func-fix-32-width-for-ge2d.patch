From c7ce1c1450216510e7a81c1dab2dfb400a7666b0 Mon Sep 17 00:00:00 2001
From: "jiyu.yang" <jiyu.yang@amlogic.com>
Date: Tue, 26 Nov 2013 18:40:08 +0800
Subject: [PATCH 2081/5965] PD#82826 add vm dump func & fix 32 width for ge2d

commit 9f65229a9ef786c254bf7426f51e1b92abeb0409
Author: jiyu.yang <jiyu.yang@amlogic.com>
Date:   Tue Nov 26 11:17:35 2013 +0800

    PD#82826 add NV21 and YV12 32byte align

commit 29c4fcdcd3191183af9647e2fdfcf7532d20b269
Author: jiyu.yang <jiyu.yang@amlogic.com>
Date:   Mon Nov 25 18:40:55 2013 +0800

    PD#82826 fixed error of align

commit ec94490739016839a33b037a40e731d10829eb21
Author: jiyu.yang <jiyu.yang@amlogic.com>
Date:   Mon Nov 25 16:34:00 2013 +0800

    add dump func for vm & fix 32 byte width for ge2d
---
 drivers/amlogic/camera/common/vm.c |  38 ++++++++++
 drivers/amlogic/camera/common/vm.h |   7 ++
 drivers/amlogic/camera/gc2035.c    | 108 ++++++++++++++++++++++++-----
 drivers/amlogic/camera/ov5640.c    |   6 +-
 drivers/amlogic/camera/ov5647.c    |   6 ++
 5 files changed, 146 insertions(+), 19 deletions(-)

diff --git a/drivers/amlogic/camera/common/vm.c b/drivers/amlogic/camera/common/vm.c
index 9dccd7f90457..290e377732fb 100755
--- a/drivers/amlogic/camera/common/vm.c
+++ b/drivers/amlogic/camera/common/vm.c
@@ -814,6 +814,32 @@ int get_canvas_index_res(int ext_canvas, int v4l2_format, int *depth, int width,
 	return canvas;
 }
 
+static void vm_dump_mem(char *path, vm_output_para_t* para)
+{
+        struct file *filp = NULL;
+        loff_t pos = 0;
+        void * buf = NULL;
+        int i = 0;
+        unsigned int size = para->width * para->height * 3;
+
+        mm_segment_t old_fs = get_fs();
+        set_fs(KERNEL_DS);
+        filp = filp_open(path,O_RDWR|O_CREAT,0666);
+
+        if(IS_ERR(filp)){
+                printk(KERN_ERR"create %s error.\n",path);
+                return;
+        }
+
+
+        buf = phys_to_virt(para->vaddr);
+        vfs_write(filp,buf, size, &pos);
+
+        vfs_fsync(filp, 0);
+        filp_close(filp,NULL);
+        set_fs(old_fs);
+}
+
 int vm_fill_buffer(struct videobuf_buffer* vb , vm_output_para_t* para)
 {
 	//vm_contig_memory_t *mem = NULL;
@@ -1019,7 +1045,11 @@ int vm_ge2d_pre_process(vframe_t* vf, ge2d_context_t *context,config_para_ex_t*
 		ge2d_config->dst_planes[0].w = cd.width;
 		ge2d_config->dst_planes[0].h = cd.height;
 		ge2d_config->dst_para.canvas_index=(output_para.index>>8)&0xff;
+#ifndef GE2D_NV
 		ge2d_config->dst_para.format=GE2D_FORMAT_S8_CB|GE2D_LITTLE_ENDIAN;
+#else
+		ge2d_config->dst_para.format=GE2D_FORMAT_S8_CR|GE2D_LITTLE_ENDIAN;
+#endif
 		ge2d_config->dst_para.width = output_para.width/2;
 		ge2d_config->dst_para.height = output_para.height/2;
 		ge2d_config->dst_xy_swap = 0;
@@ -1109,7 +1139,11 @@ int vm_ge2d_pre_process(vframe_t* vf, ge2d_context_t *context,config_para_ex_t*
 		ge2d_config->dst_planes[0].w = cd.width;
 		ge2d_config->dst_planes[0].h = cd.height;
 		ge2d_config->dst_para.canvas_index=(output_para.index>>16)&0xff;
+#ifndef GE2D_NV
 		ge2d_config->dst_para.format=GE2D_FORMAT_S8_CR|GE2D_LITTLE_ENDIAN;
+#else
+		ge2d_config->dst_para.format=GE2D_FORMAT_S8_CB|GE2D_LITTLE_ENDIAN;
+#endif
 		ge2d_config->dst_para.width = output_para.width/2;
 		ge2d_config->dst_para.height = output_para.height/2;
 		ge2d_config->dst_xy_swap = 0;
@@ -1275,7 +1309,11 @@ int vm_sw_post_process(int canvas , int addr)
 		offset = canvas_work_v.addr - canvas_work_y.addr;
 		buffer_v_start = io_mapping_map_atomic_wc( mapping_wc, offset );
 
+#ifndef GE2D_NV
 		if(output_para.v4l2_format == V4L2_PIX_FMT_YUV420){
+#else
+		if(output_para.v4l2_format == V4L2_PIX_FMT_YVU420){
+#endif
 			for(i=uv_height;i>0;i--) { /* copy y */
 				memcpy((void *)(addr+poss),(void *)(buffer_u_start+posd),uv_width);
 				poss+=uv_width;
diff --git a/drivers/amlogic/camera/common/vm.h b/drivers/amlogic/camera/common/vm.h
index aa11225ef84c..97359dea5cf3 100755
--- a/drivers/amlogic/camera/common/vm.h
+++ b/drivers/amlogic/camera/common/vm.h
@@ -61,4 +61,11 @@ extern int vm_buffer_init(void);
 extern void vm_local_init(void) ;
 static DEFINE_MUTEX(vm_mutex);
 
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TV
+#define CANVAS_WIDTH_ALIGN 32
+#else
+#define CANVAS_WIDTH_ALIGN 8
+#endif
+
 #endif /* _VM_INCLUDE__ */
diff --git a/drivers/amlogic/camera/gc2035.c b/drivers/amlogic/camera/gc2035.c
index 262fa6dbf83b..d0460f4edbde 100755
--- a/drivers/amlogic/camera/gc2035.c
+++ b/drivers/amlogic/camera/gc2035.c
@@ -29,7 +29,7 @@
 #include <linux/kthread.h>
 #include <linux/highmem.h>
 #include <linux/freezer.h>
-#include <media/videobuf-vmalloc.h>
+#include <media/videobuf-res.h>
 #include <media/v4l2-device.h>
 #include <media/v4l2-ioctl.h>
 #include <linux/wakelock.h>
@@ -38,6 +38,7 @@
 #include <media/v4l2-chip-ident.h>
 #include <linux/amlogic/camera/aml_cam_info.h>
 #include <linux/amlogic/vmapi.h>
+#include "common/vm.h"
 
 #include <mach/am_regs.h>
 #include <mach/pinmux.h>
@@ -46,6 +47,8 @@
 #include <mach/mod_gate.h>
 
 #define gc2035_CAMERA_MODULE_NAME "gc2035"
+#define MAGIC_RE_MEM 0x123039dc
+#define GC2035_RES0_CANVAS_INDEX CAMERA_USER_CANVAS_INDEX
 
 /* Wake up at about 30 fps */
 #define WAKE_NUMERATOR 30
@@ -247,6 +250,8 @@ struct gc2035_buffer {
 	struct videobuf_buffer vb;
 
 	struct gc2035_fmt        *fmt;
+
+	unsigned int canvas_id;
 };
 
 struct gc2035_dmaqueue {
@@ -306,6 +311,7 @@ struct gc2035_fh {
 	unsigned int               width, height;
 	struct videobuf_queue      vb_vidq;
 
+	struct videobuf_res_privdata res;
 	enum v4l2_buf_type         type;
 	int			   input; 	/* Input Number on bars */
 	int  stream_on;
@@ -2130,6 +2136,38 @@ unsigned char v4l_2_gc2035(int val)
 	else return 0;
 }
 
+static int convert_canvas_index(unsigned int v4l2_format, unsigned int start_canvas)
+{
+	int canvas = start_canvas;
+
+	switch(v4l2_format){
+	case V4L2_PIX_FMT_RGB565X:
+	case V4L2_PIX_FMT_VYUY:
+		canvas = start_canvas;
+		break;
+	case V4L2_PIX_FMT_YUV444:
+	case V4L2_PIX_FMT_BGR24:
+	case V4L2_PIX_FMT_RGB24:
+		canvas = start_canvas;
+		break; 
+	case V4L2_PIX_FMT_NV12:
+	case V4L2_PIX_FMT_NV21: 
+		canvas = start_canvas | ((start_canvas+1)<<8);
+		break;
+	case V4L2_PIX_FMT_YVU420:
+	case V4L2_PIX_FMT_YUV420:
+		if(V4L2_PIX_FMT_YUV420 == v4l2_format){
+			canvas = start_canvas|((start_canvas+1)<<8)|((start_canvas+2)<<16);
+		}else{
+			canvas = start_canvas|((start_canvas+2)<<8)|((start_canvas+1)<<16);
+		}
+		break;
+	default:
+		break;
+	}
+	return canvas;
+}
+
 static int gc2035_setting(struct gc2035_device *dev,int PROP_ID,int value )
 {
 	//printk("----------- %s \n",__func__);
@@ -2245,18 +2283,25 @@ static void gc2035_fillbuff(struct gc2035_fh *fh, struct gc2035_buffer *buf)
 	//printk("----------- %s \n",__func__);
 
 	struct gc2035_device *dev = fh->dev;
-	void *vbuf = videobuf_to_vmalloc(&buf->vb);
+	//void *vbuf = videobuf_to_vmalloc(&buf->vb);
+        void *vbuf = (void *)videobuf_to_res(&buf->vb);
 	vm_output_para_t para = {0};
 	dprintk(dev,1,"%s\n", __func__);
 	if (!vbuf)
 		return;
  /*  0x18221223 indicate the memory type is MAGIC_VMAL_MEM*/
+        if(buf->canvas_id == 0)
+           buf->canvas_id = convert_canvas_index(fh->fmt->fourcc, GC2035_RES0_CANVAS_INDEX+buf->vb.i*3);
 	para.mirror = gc2035_qctrl[5].default_value&3;// not set
 	para.v4l2_format = fh->fmt->fourcc;
-	para.v4l2_memory = 0x18221223;
+	//para.v4l2_memory = 0x18221223;
+        para.v4l2_memory = MAGIC_RE_MEM;
 	para.zoom = gc2035_qctrl[7].default_value;
 	para.angle = gc2035_qctrl[8].default_value;
 	para.vaddr = (unsigned)vbuf;
+        para.ext_canvas = buf->canvas_id;
+        para.width = buf->vb.width;
+        para.height = buf->vb.height;
 	vm_fill_buffer(&buf->vb,&para);
 	buf->vb.state = VIDEOBUF_DONE;
 }
@@ -2409,10 +2454,14 @@ buffer_setup(struct videobuf_queue *vq, unsigned int *count, unsigned int *size)
 {
 	//printk("----------- %s \n",__func__);
 
-	struct gc2035_fh  *fh = vq->priv_data;
+        struct videobuf_res_privdata *res = vq->priv_data;
+        struct gc2035_fh *fh  = container_of(res, struct gc2035_fh, res);
 	struct gc2035_device *dev  = fh->dev;
     //int bytes = fh->fmt->depth >> 3 ;
-	*size = (fh->width*fh->height*fh->fmt->depth)>>3;
+       int height = fh->height;
+       if(height==1080)
+                   height = 1088;
+       *size = (fh->width*height*fh->fmt->depth)>>3;
 	if (0 == *count)
 		*count = 32;
 
@@ -2429,7 +2478,8 @@ static void free_buffer(struct videobuf_queue *vq, struct gc2035_buffer *buf)
 {
 	//printk("----------- %s \n",__func__);
 
-	struct gc2035_fh  *fh = vq->priv_data;
+        struct videobuf_res_privdata *res = vq->priv_data;
+        struct gc2035_fh *fh  = container_of(res, struct gc2035_fh, res);
 	struct gc2035_device *dev  = fh->dev;
 
 	dprintk(dev, 1, "%s, state: %i\n", __func__, buf->vb.state);
@@ -2437,7 +2487,8 @@ static void free_buffer(struct videobuf_queue *vq, struct gc2035_buffer *buf)
 	if (in_interrupt())
 		BUG();
 
-	videobuf_vmalloc_free(&buf->vb);
+       videobuf_res_free(vq, &buf->vb);
+
 	dprintk(dev, 1, "free_buffer: freed\n");
 	buf->vb.state = VIDEOBUF_NEEDS_INIT;
 }
@@ -2471,7 +2522,8 @@ buffer_prepare(struct videobuf_queue *vq, struct videobuf_buffer *vb,
 {
 	//printk("----------- %s \n",__func__);
 
-	struct gc2035_fh     *fh  = vq->priv_data;
+        struct videobuf_res_privdata *res = vq->priv_data;
+        struct gc2035_fh *fh  = container_of(res, struct gc2035_fh, res);
 	struct gc2035_device    *dev = fh->dev;
 	struct gc2035_buffer *buf = container_of(vb, struct gc2035_buffer, vb);
 	int rc;
@@ -2517,7 +2569,9 @@ buffer_queue(struct videobuf_queue *vq, struct videobuf_buffer *vb)
 	//printk("----------- %s \n",__func__);
 
 	struct gc2035_buffer    *buf  = container_of(vb, struct gc2035_buffer, vb);
-	struct gc2035_fh        *fh   = vq->priv_data;
+        struct videobuf_res_privdata *res = vq->priv_data;
+        struct gc2035_fh *fh  = container_of(res, struct gc2035_fh, res);
+
 	struct gc2035_device       *dev  = fh->dev;
 	struct gc2035_dmaqueue *vidq = &dev->vidq;
 
@@ -2559,7 +2613,7 @@ static int vidioc_querycap(struct file *file, void  *priv,
 	struct gc2035_device *dev = fh->dev;
 
 	strcpy(cap->driver, "gc2035");
-	strcpy(cap->card, "gc2035");
+	strcpy(cap->card, "gc2035.canvas");
 	strlcpy(cap->bus_info, dev->v4l2_dev.name, sizeof(cap->bus_info));
 	cap->version = gc2035_CAMERA_VERSION;
 	cap->capabilities =	V4L2_CAP_VIDEO_CAPTURE |
@@ -2673,6 +2727,11 @@ static int vidioc_s_fmt_vid_cap(struct file *file, void *priv,
 	struct videobuf_queue *q = &fh->vb_vidq;
 	struct gc2035_device *dev = fh->dev;
 
+        f->fmt.pix.width = (f->fmt.pix.width + (CANVAS_WIDTH_ALIGN-1) ) & (~(CANVAS_WIDTH_ALIGN-1));
+	if ((f->fmt.pix.pixelformat==V4L2_PIX_FMT_YVU420) ||
+            (f->fmt.pix.pixelformat==V4L2_PIX_FMT_YUV420)){
+                f->fmt.pix.width = (f->fmt.pix.width + (CANVAS_WIDTH_ALIGN*2-1) ) & (~(CANVAS_WIDTH_ALIGN*2-1));
+        }
 	int ret = vidioc_try_fmt_vid_cap(file, fh, f);
 	if (ret < 0)
 		return ret;
@@ -2686,7 +2745,7 @@ static int vidioc_s_fmt_vid_cap(struct file *file, void *priv,
 	}
 
 	fh->fmt           = get_format(f);
-	fh->width         = f->fmt.pix.width;
+        fh->width         = f->fmt.pix.width;
 	fh->height        = f->fmt.pix.height;
 	fh->vb_vidq.field = f->fmt.pix.field;
 	fh->type          = f->type;
@@ -2721,7 +2780,15 @@ static int vidioc_querybuf(struct file *file, void *priv, struct v4l2_buffer *p)
 
 	struct gc2035_fh  *fh = priv;
 
-	return (videobuf_querybuf(&fh->vb_vidq, p));
+        int ret = videobuf_querybuf(&fh->vb_vidq, p);
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
+                if(ret == 0){
+                            p->reserved  = convert_canvas_index(fh->fmt->fourcc, GC2035_RES0_CANVAS_INDEX + p->index*3);
+                        }else{
+                                    p->reserved = 0;
+                                }
+#endif
+        return ret;
 }
 
 static int vidioc_qbuf(struct file *file, void *priv, struct v4l2_buffer *p)
@@ -2758,7 +2825,6 @@ static int vidioc_streamon(struct file *file, void *priv, enum v4l2_buf_type i)
 	struct gc2035_device *dev = fh->dev;
 	vdin_parm_t para;
 	int ret = 0 ;
-	printk(KERN_INFO " vidioc_streamon+++ \n ");
 	
 	if (fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
 		return -EINVAL;
@@ -2775,6 +2841,7 @@ static int vidioc_streamon(struct file *file, void *priv, enum v4l2_buf_type i)
 	para.hs_bp = 0;
 	para.vs_bp = 2;
 	para.cfmt = TVIN_YUV422;
+        para.dfmt = TVIN_NV21;
 	para.scan_mode = TVIN_SCAN_MODE_PROGRESSIVE;	
 	para.skip_count = 4; //skip_num
 	para.bt_path = dev->cam_info.bt_path;
@@ -2791,7 +2858,6 @@ static int vidioc_streamoff(struct file *file, void *priv, enum v4l2_buf_type i)
 	struct gc2035_fh  *fh = priv;
 
 	int ret = 0 ;
-	printk(KERN_INFO " vidioc_streamoff+++ \n ");
 	if (fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
 		return -EINVAL;
 	if (i != fh->type)
@@ -2958,6 +3024,8 @@ static int gc2035_open(struct file *file)
 	struct gc2035_device *dev = video_drvdata(file);
 	struct gc2035_fh *fh = NULL;
 	int retval = 0;
+        resource_size_t mem_start = 0;
+        unsigned int mem_size = 0;
 
 #if CONFIG_CMA
     retval = vm_init_buf(16*SZ_1M);
@@ -3018,10 +3086,14 @@ static int gc2035_open(struct file *file)
 //    TVIN_SIG_FMT_CAMERA_1024X768P_30Hz, // 190
 //    TVIN_SIG_FMT_CAMERA_1920X1080P_30Hz,
 //    TVIN_SIG_FMT_CAMERA_1280X720P_30Hz,
-
-	videobuf_queue_vmalloc_init(&fh->vb_vidq, &gc2035_video_qops,
-			NULL, &dev->slock, fh->type, V4L2_FIELD_INTERLACED,
-			sizeof(struct gc2035_buffer), fh,NULL);
+	get_vm_buf_info(&mem_start, &mem_size, NULL);
+	fh->res.start = mem_start;
+	fh->res.end = mem_start+mem_size-1;
+	fh->res.magic = MAGIC_RE_MEM;
+	fh->res.priv = NULL;
+	videobuf_queue_res_init(&fh->vb_vidq, &gc2035_video_qops,
+					NULL, &dev->slock, fh->type, V4L2_FIELD_INTERLACED,
+					sizeof(struct gc2035_buffer), (void*)&fh->res, NULL);
 
 	gc2035_start_thread(fh);
     //msleep(50);  // added james
diff --git a/drivers/amlogic/camera/ov5640.c b/drivers/amlogic/camera/ov5640.c
index 22a00605b90f..b5a9f8841119 100755
--- a/drivers/amlogic/camera/ov5640.c
+++ b/drivers/amlogic/camera/ov5640.c
@@ -3126,7 +3126,6 @@ static int ov5640_setting(struct ov5640_device *dev,int PROP_ID,int value )
 		}
 		break;
 	case V4L2_CID_FOCUS_ABSOLUTE:
-		printk("V4L2_CID_FOCUS_ABSOLUTE\n");
 		if(ov5640_qctrl[12].default_value!=value){
 			ov5640_qctrl[12].default_value=value;
 			printk(" set camera  focus zone =%d. \n ",value);
@@ -3563,6 +3562,11 @@ static int vidioc_s_fmt_vid_cap(struct file *file, void *priv,
 	//unsigned char gain = 0, exposurelow = 0, exposuremid = 0, exposurehigh = 0;
 	int cap_fps, pre_fps;
 
+        f->fmt.pix.width = (f->fmt.pix.width + (CANVAS_WIDTH_ALIGN-1) ) & (~(CANVAS_WIDTH_ALIGN-1));
+	if ((f->fmt.pix.pixelformat==V4L2_PIX_FMT_YVU420) ||
+            (f->fmt.pix.pixelformat==V4L2_PIX_FMT_YUV420)){
+                f->fmt.pix.width = (f->fmt.pix.width + (CANVAS_WIDTH_ALIGN*2-1) ) & (~(CANVAS_WIDTH_ALIGN*2-1));
+        }
 	int ret = vidioc_try_fmt_vid_cap(file, fh, f);
 	if (ret < 0)
     	return ret;
diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index 495e8722361f..2aa9e28e40c4 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -3527,6 +3527,12 @@ static int vidioc_s_fmt_vid_cap(struct file *file, void *priv,
 	struct videobuf_queue *q = &fh->vb_vidq;
 	struct ov5647_device *dev = fh->dev;
 	resolution_param_t* res_param = NULL;
+
+        f->fmt.pix.width = (f->fmt.pix.width + (CANVAS_WIDTH_ALIGN-1) ) & (~(CANVAS_WIDTH_ALIGN-1));
+	if ((f->fmt.pix.pixelformat==V4L2_PIX_FMT_YVU420) ||
+            (f->fmt.pix.pixelformat==V4L2_PIX_FMT_YUV420)){
+                f->fmt.pix.width = (f->fmt.pix.width + (CANVAS_WIDTH_ALIGN*2-1) ) & (~(CANVAS_WIDTH_ALIGN*2-1));
+        }
 	int ret = vidioc_try_fmt_vid_cap(file, fh, f);
 	if (ret < 0)
 		return ret;
-- 
2.19.0

