From 1481619784156c77d7e3d9f9a81228d172a75ea1 Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Thu, 28 Nov 2013 21:03:46 +0800
Subject: [PATCH 2085/5965] PD #83440: add ae load old value,add reconfigure
 for isp.

---
 drivers/amlogic/camera/ov5647.c    |   2 +-
 drivers/amlogic/tvin/isp/isp_drv.c |  33 ++++++++--
 drivers/amlogic/tvin/isp/isp_drv.h |   9 ++-
 drivers/amlogic/tvin/isp/isp_hw.c  |  58 ++++++++++++++++-
 drivers/amlogic/tvin/isp/isp_hw.h  |   4 +-
 drivers/amlogic/tvin/isp/isp_sm.c  | 100 ++++++++++++++++-------------
 6 files changed, 154 insertions(+), 52 deletions(-)

diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index 64b0343c85ca..c2ebcf68fa96 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -3704,7 +3704,7 @@ static int vidioc_streamon(struct file *file, void *priv, enum v4l2_buf_type i)
     para.h_active = ov5647_h_active;
     para.v_active = ov5647_v_active;
     if(ov5647_work_mode != CAMERA_CAPTURE){
-	    para.skip_count = 2;
+	para.skip_count = 8;
         para.dest_hactive = dest_hactive;
         para.dest_vactive = dest_vactive;
     }else{
diff --git a/drivers/amlogic/tvin/isp/isp_drv.c b/drivers/amlogic/tvin/isp/isp_drv.c
index ac130781249a..d66f8ea618a6 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.c
+++ b/drivers/amlogic/tvin/isp/isp_drv.c
@@ -57,7 +57,7 @@ static volatile unsigned int ae_flag = 0;
 static volatile unsigned int ae_new_step = 60;
 extern struct isp_ae_to_sensor_s ae_sens;
 static unsigned int af_ave_step_en = 1;
-
+static unsigned int def_config = 0;
 static void parse_param(char *buf_orig,char **parm)
 {
 	char *ps, *token;
@@ -110,7 +110,7 @@ static ssize_t debug_store(struct device *dev,struct device_attribute *attr, con
 		unsigned int width,height;
 		width = simple_strtol(parm[1],NULL,10);
 		height = simple_strtol(parm[2],NULL,10);
-		isp_set_init(width,height,width+26,height+16);
+		isp_test_pattern(width,height,width+26,height+16);
 	} else if(!strcmp(parm[0],"rgb")){
         unsigned int b,r,g;
         b = RD_BITS(ISP_GAIN_GRBG23, GAIN_GRBG2_BIT, GAIN_GRBG2_WID);
@@ -135,7 +135,8 @@ static ssize_t debug_store(struct device *dev,struct device_attribute *attr, con
 		for(i=0;i<4;i++)
 		pr_info("awb->yuv_mid[%d].sum=%d,count=%d\n",i,awb->yuv_mid[i].sum,awb->yuv_mid[i].count);
 		for(i=0;i<4;i++)
-		pr_info("awb->yuv_high[%d].sum=%d,count=%d\n",i,awb->yuv_high[i].sum,awb->yuv_high[i].count);	
+		pr_info("awb->yuv_high[%d].sum=%d,count=%d\n",i,awb->yuv_high[i].sum,awb->yuv_high[i].count);
+		//echo wb_test 1 >/sys/class/isp/isp0/debug --disable 3a,disable gamma correction,lensd
 	}else if(!strcmp(parm[0],"wb_test")){
 		unsigned int flag = simple_strtol(parm[1],NULL,10);
 		if(flag)
@@ -143,6 +144,20 @@ static ssize_t debug_store(struct device *dev,struct device_attribute *attr, con
 		else
 			devp->flag &= (~ISP_FLAG_TEST_WB);
 		pr_info("%s wb test.\n",flag?"start":"stop");
+	//echo reconfigure h w bayer_fmt >/sys/class/isp/isp0/debug
+	}else if(!strcmp(parm[0],"reconfigure")){
+		unsigned int width,height,bayer;
+		if(parm[1] && parm[2] && parm[3]){
+			width = simple_strtol(parm[1],NULL,10);//width
+			height = simple_strtol(parm[2],NULL,10);//height
+			bayer = simple_strtol(parm[3],NULL,10);//bayer fmt 0:BGGR 1:RGGB 2:GBRG 3:GRBG
+			devp->flag |= ISP_FLAG_RECONFIG;
+			isp_load_def_setting(width,height,bayer);
+			pr_info("default setting:%ux%u bayer=%u.\n",width,height,bayer);
+		}else{
+			devp->flag &= (~ISP_FLAG_RECONFIG);
+			pr_info("config according to configure file.\n");
+		}
 	}
 	return len;
 }
@@ -824,19 +839,23 @@ static int isp_fe_open(struct tvin_frontend_s *fe, enum tvin_port_e port)
 	switch_vpu_mem_pd_vmod(VPU_ISP,VPU_MEM_POWER_ON);
         devp->cam_param = (cam_parameter_t*)parm->reserved;
 	if(IS_ERR_OR_NULL(devp->cam_param)){
-		pr_err("[%s..]%s camera parameter error use default 720x480 test pattern config.\n",DEVICE_NAME,__func__);
-		isp_set_init(720,480,746,496);
+		pr_err("[%s..] camera parameter error use default config.\n",__func__);
+		isp_load_def_setting(info->h_active,info->v_active,0);
 	} else {
 		devp->isp_ae_parm = &devp->cam_param->xml_scenes->ae;
 		devp->isp_awb_parm = &devp->cam_param->xml_scenes->awb;
 		//devp->isp_af_parm = &devp->cam_param->xml_scenes->af;
 		devp->capture_parm = devp->cam_param->xml_capture;
 		devp->wave = devp->cam_param->xml_wave;
+		isp_hw_enable(false);
 		isp_set_def_config(devp->cam_param->xml_regs_map,info->fe_port,info->h_active,info->v_active);
 		isp_set_manual_wb(devp->cam_param->xml_wb_manual);
 		/*test for wb test disable gamma & lens*/
 		if(devp->flag & ISP_FLAG_TEST_WB)
 			disable_gc_lns(false);
+		/*enable isp hw*/
+		isp_hw_enable(true);
+		
 		devp->isp_af_parm = kmalloc(sizeof(xml_algorithm_af_t),GFP_KERNEL);
 		memset(devp->isp_af_parm,0,sizeof(xml_algorithm_af_t));
 		devp->isp_af_parm->valid_step_cnt = 8;
@@ -905,6 +924,7 @@ static void isp_fe_close(struct tvin_frontend_s *fe)
 		devp->isp_fe->dec_ops->close(devp->isp_fe);
         memset(&devp->info,0,sizeof(isp_info_t));
 	/*power down isp hw*/
+	isp_hw_enable(false);
 	switch_vpu_mem_pd_vmod(VPU_ISP,VPU_MEM_POWER_DOWN);
 
 }
@@ -1082,6 +1102,9 @@ static int isp_fe_isr(struct tvin_frontend_s *fe, unsigned int hcnt64)
 	if(IS_ERR_OR_NULL(devp->cam_param)){
 		pr_info("%s:null pointer error.\n",__func__);
 	}
+	if(devp->flag & ISP_FLAG_RECONFIG)
+		return ret;
+	
 	if(awb_enable){
                 isp_get_awb_stat(&devp->isp_awb);
 	}
diff --git a/drivers/amlogic/tvin/isp/isp_drv.h b/drivers/amlogic/tvin/isp/isp_drv.h
index 2fc4755246e0..ac7e3fb4dab4 100755
--- a/drivers/amlogic/tvin/isp/isp_drv.h
+++ b/drivers/amlogic/tvin/isp/isp_drv.h
@@ -28,7 +28,7 @@
 #include "isp_hw.h"
 #include "../tvin_frontend.h"
 
-#define ISP_VER					"2013.11.26a"
+#define ISP_VER					"2013.11.28a"
 #define ISP_NUM					1
 #define DEVICE_NAME 			        "isp"
 
@@ -49,9 +49,16 @@
 #define ISP_FLAG_TOUCH_AF			0x00002000
 #define ISP_FLAG_SKIP_BUF			0x00004000
 #define ISP_FLAG_TEST_WB			0x00008000
+#define ISP_FLAG_RECONFIG                       0x00010000
 
 #define ISP_AF_SM_MASK				ISP_FLAG_AF|ISP_FLAG_TOUCH_AF
 
+typedef enum bayer_fmt_e {
+	RAW_BGGR = 0,
+	RAW_RGGB,
+	RAW_GBRG,
+	RAW_GRBG,//3
+} bayer_fmt_t;
 typedef struct isp_info_s {
 	tvin_port_t fe_port;
 	tvin_color_fmt_t dfmt;
diff --git a/drivers/amlogic/tvin/isp/isp_hw.c b/drivers/amlogic/tvin/isp/isp_hw.c
index eb55261a81b9..26f5c3065adc 100755
--- a/drivers/amlogic/tvin/isp/isp_hw.c
+++ b/drivers/amlogic/tvin/isp/isp_hw.c
@@ -572,6 +572,8 @@ void disable_gc_lns(bool flag)
 void isp_set_def_config(xml_default_regs_t *regs,tvin_port_t fe_port,unsigned int w,unsigned int h)
 {
 	unsigned int mux = 0;
+
+	
 	switch(fe_port){
 		case TVIN_PORT_CAMERA:
 			mux = 1;
@@ -584,6 +586,7 @@ void isp_set_def_config(xml_default_regs_t *regs,tvin_port_t fe_port,unsigned in
 			break;
 	}
 	WR_BITS(VPU_MISC_CTRL,mux,ISP_IN_SEL_BIT,ISP_IN_SEL_WID);
+	
 	isp_top_init(&regs->top,w,h);
 	isp_set_test_pattern(&regs->tp);
 	isp_set_clamp_gain(&regs->cg);
@@ -602,12 +605,27 @@ void isp_set_def_config(xml_default_regs_t *regs,tvin_port_t fe_port,unsigned in
 	isp_set_lnsd(&regs->lnsd);
 	isp_set_lnsd_test(w,h);
 	isp_set_gamma_table(&regs->lut_gc);
+	//enable isp
+	WR_BITS(ISP_FRM_SOFT_RST,0,0,1);
+	WR_BITS(ISP_TIMING_MODE,0,5,1);
 	pr_info("[%s..]%s: init ok(w:%d,h:%d).\n",DEVICE_NAME,__func__,w,h);
 }
+
+void isp_hw_enable(bool flag)
+{
+	if(flag){
+		WR_BITS(ISP_FRM_SOFT_RST,0,0,1);
+		WR_BITS(ISP_TIMING_MODE,0,5,1);
+	}else{
+		WR_BITS(ISP_TIMING_MODE,1,5,1);
+		WR_BITS(ISP_FRM_SOFT_RST,1,0,1);
+	}
+		
+}
 /*
 *just enable test pattern
 */
-void isp_set_init(unsigned int hsize,unsigned int vsize,unsigned int htotal,unsigned int vtotal)
+void isp_test_pattern(unsigned int hsize,unsigned int vsize,unsigned int htotal,unsigned int vtotal)
 {
         // pat gen
         WRITE_VCBUS_REG(ISP_PAT_GEN_CTRL, 0x0);
@@ -655,6 +673,44 @@ void isp_set_init(unsigned int hsize,unsigned int vsize,unsigned int htotal,unsi
         WRITE_VCBUS_REG(ISP_RST_DLY_NUM,htotal*6);
         WRITE_VCBUS_REG_BITS(ISP_PAT_GEN_CTRL,1,28,1);
 }
+/*
+*just enable demosaicing,matrix
+*/
+void isp_load_def_setting(unsigned int w,unsigned int h,unsigned char bayer_fmt)
+{
+	//reset isp
+	WR_BITS(ISP_TIMING_MODE,1,5,1);
+	WR_BITS(ISP_FRM_SOFT_RST,1,0,1);
+	//disable pattern generator
+	WR_BITS(ISP_PAT_GEN_CTRL,0,ISP_PAT_ENABLE_BIT,ISP_PAT_ENABLE_WID);
+	//disable gamma & lnsd
+	disable_gc_lns(false);
+	//disable nr,pk
+	WR_BITS(ISP_PKNR_ENABLE,0,ISP_NR_EN_BIT,ISP_NR_EN_WID);
+	WR_BITS(ISP_PKNR_ENABLE,0,ISP_PK_EN_BIT,ISP_PK_EN_WID);
+	//disable defect pixel
+	WR_BITS(ISP_DFT_CTRL,0,ISP_DFT_ENABLE_BIT,ISP_DFT_ENABLE_WID);
+	WR_BITS(ISP_DFT_CTRL,0,DFTMAP_CORRECT_MODE_BIT,DFTMAP_CORRECT_MODE_WID);
+	//disable clamp gain
+	WR(ISP_CLAMPGAIN_CTRL,bayer_fmt<<24);
+	WR(ISP_GAIN_BSCORE_GRBG,0x3000000);
+	WR(ISP_CLAMP_GRBG01,0x0);
+	WR(ISP_CLAMP_GRBG23,0x0);
+	WR(ISP_GAIN_GRBG01, 0x1000100);
+	WR(ISP_GAIN_GRBG23, 0x1000100);
+	
+	WR(ISP_HV_SIZE,w<<REG_HSIZE_BIT|h);
+        WR(ISP_HBLANK, w<<REG_TOTAL_W_BIT|10);
+	// demosaicing
+        WR(ISP_DMS_CTRL0, bayer_fmt<<24);
+        WR(ISP_DMS_CTRL1, 0x00120510);
+	//matrix
+	isp_set_matrix(NULL,h);
+	//enable
+	WR_BITS(ISP_FRM_SOFT_RST,0,0,1);
+	WR_BITS(ISP_TIMING_MODE,0,5,1);
+	
+}
 
 /*
 *wave init
diff --git a/drivers/amlogic/tvin/isp/isp_hw.h b/drivers/amlogic/tvin/isp/isp_hw.h
index 7f218631fad7..1d14c91b9001 100755
--- a/drivers/amlogic/tvin/isp/isp_hw.h
+++ b/drivers/amlogic/tvin/isp/isp_hw.h
@@ -93,7 +93,8 @@ extern void isp_set_blenr_stat(unsigned int x0,unsigned int y0,unsigned int x1,u
 extern void isp_set_dbg(xml_dbg_t *dbg);
 extern void isp_set_lnsd_mode(unsigned int mode);
 extern void isp_set_def_config(xml_default_regs_t *regs,tvin_port_t fe_port,unsigned int w,unsigned int h);
-extern void isp_set_init(unsigned int hsize,unsigned int vsize,unsigned int htotal,unsigned int vtotal);
+extern void isp_load_def_setting(unsigned int hsize,unsigned int vsize,unsigned char bayer_fmt);
+extern void isp_test_pattern(unsigned int hsize,unsigned int vsize,unsigned int htotal,unsigned int vtotal);
 extern void isp_set_manual_wb(xml_wb_manual_t *wb);
 extern void isp_get_awb_stat(isp_awb_stat_t *awb_stat);
 extern void isp_get_ae_stat(isp_ae_stat_t *ae_stat);
@@ -109,6 +110,7 @@ extern void flash_on(bool mode_pol_inv,bool led1_pol_inv,bool pin_mux_inv,wave_t
 extern void torch_level(bool mode_pol_inv,bool led1_pol_inv,bool pin_mux_inv,bool torch_pol_inv,wave_t *wave_param,unsigned int level);
 extern void wave_power_manage(bool enable);
 extern void isp_hw_reset(void);
+extern void isp_hw_enable(bool enable);
 extern void isp_awb_set_gain(unsigned int r, unsigned int g, unsigned int b);
 extern void isp_awb_get_gain(isp_awb_gain_t *awb_gain);
 extern void set_isp_gamma_table(unsigned short *gamma,unsigned int type);
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index 2621f5a7136a..718ad92c89af 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -154,6 +154,54 @@ static inline int find_step(cam_function_t *func, unsigned int low, unsigned int
 	return (mid + 1);
 }
 
+static unsigned int aet_gain_pre = 0, format_gain_pre = 0;
+
+static unsigned int isp_ae_cal_new_para(isp_dev_t *devp)
+{
+    struct isp_ae_sm_s *aepa = &sm_state.isp_ae_parm;
+    struct cam_function_s *func = &devp->cam_param->cam_function;
+    unsigned int aet_gain_new = 0, format_gain_new = 0;
+
+    aepa->max_step = func->get_aet_max_step();
+    format_gain_new = devp->isp_ae_parm->aet_fmt_gain;
+    aet_gain_new = ((aet_gain_pre * format_gain_pre) / format_gain_new);
+    if (aet_gain_new == 0) {
+        pr_info("[isp] %s: cal ae error, aet_gain_pre:%d, format_gain_pre:%d ... ...\n", __func__, \
+                aet_gain_pre, format_gain_pre);
+        return 0;
+    }
+    ae_sens.new_step = find_step(func, 0, aepa->max_step, aet_gain_new);
+    ae_sens.shutter = 1;
+    ae_sens.gain = 1;
+    pr_info("[isp] %s: format_gain_new:%d, aet_gain_new:%d new_step:%d... ...\n", __func__, \
+            format_gain_new, aet_gain_new, ae_sens.new_step);
+
+    if (func && func->set_aet_new_step) {
+        func->set_aet_new_step(ae_sens.new_step, ae_sens.shutter, ae_sens.gain);
+        pr_info("[isp] %s: write new step to sensor... ...\n", __func__);
+    }
+
+    return 0;
+}
+
+static struct isp_awb_gain_s awb_gain, awb_gain_pre;
+
+unsigned int isp_awb_load_pre_para(isp_dev_t *devp)
+{
+    if ((awb_gain_pre.r_val == 0) &&
+        (awb_gain_pre.r_val == 0) &&
+        (awb_gain_pre.r_val == 0)) {
+        pr_info("[isp] %s cal awb error, r:%d g:%d b:%d ... ...\n",
+                    __func__, awb_gain.r_val, awb_gain.g_val,awb_gain.b_val);
+        return 0;
+    }
+    memcpy(&awb_gain, &awb_gain_pre, sizeof(struct isp_awb_gain_s));
+    isp_awb_set_gain(awb_gain.r_val, awb_gain.g_val,awb_gain.b_val);
+    pr_info("[isp] %s r:%d g:%d b:%d ... ...\n",
+                __func__, awb_gain.r_val, awb_gain.g_val,awb_gain.b_val);
+
+    return 0;
+}
 void isp_sm_init(isp_dev_t *devp)
 {
 	sm_state.isp_ae_parm.tf_ratio = devp->wave->torch_flash_ratio;
@@ -169,6 +217,8 @@ void isp_sm_init(isp_dev_t *devp)
 	sm_state.cap_sm.tr_time = devp->wave->torch_rising_time;
 	/*init for wave*/
 	sm_state.flash = ISP_FLASH_STATUS_NULL;
+    isp_ae_cal_new_para(devp);     // cal and set new ae value
+    isp_awb_load_pre_para(devp);  // cal and set new awb value
 }
 
 void isp_set_manual_exposure(isp_dev_t *devp)
@@ -232,26 +282,17 @@ void isp_ae_low_gain()
 	sm_state.isp_ae_parm.isp_ae_state = AE_LOW_GAIN;
 }
 
-static unsigned int aet_gain_new = 0, format_gain_new = 0, aet_gain_pre = 0, format_gain_pre = 0;
-
-unsigned int isp_ae_cal_new_para(isp_dev_t *devp)
+int isp_ae_save_current_para(isp_dev_t *devp)
 {
-    struct isp_ae_sm_s *aepa = &sm_state.isp_ae_parm;
     struct cam_function_s *func = &devp->cam_param->cam_function;
-
+    struct isp_ae_sm_s *aepa = &sm_state.isp_ae_parm;
     aepa->max_step = func->get_aet_max_step();
-    format_gain_new = devp->isp_ae_parm->aet_fmt_gain;
-    aet_gain_new = ((aet_gain_pre * format_gain_pre) / format_gain_new);
-    ae_sens.new_step = find_step(func, 0, aepa->max_step, aet_gain_new);
-    ae_sens.shutter = 1;
-    ae_sens.gain = 1;
-    pr_info("[isp] %s: format_gain_new:%d, aet_gain_new:%d new_step:%d... ...\n", __func__, \
-            format_gain_new, aet_gain_new, ae_sens.new_step);
 
-    if (func && func->set_aet_new_step) {
-        func->set_aet_new_step(ae_sens.new_step, ae_sens.shutter, ae_sens.gain);
-        pr_info("[isp] %s: write new step to sensor... ...\n", __func__);
-    }
+    if (func && func->get_aet_gain_by_step)
+        aet_gain_pre = func->get_aet_gain_by_step(ae_sens.new_step);
+    format_gain_pre = devp->isp_ae_parm->aet_fmt_gain;
+    pr_info("[isp] %s format_gain_pre:%d aet_gain_pre:%d ... ...\n",
+                __func__, format_gain_pre, aet_gain_pre);
 
     return 0;
 }
@@ -270,21 +311,6 @@ unsigned int isp_tune_exposure(isp_dev_t *devp)
 	return new_step;
 }
 
-int isp_ae_save_current_para(isp_dev_t *devp)
-{
-    struct cam_function_s *func = &devp->cam_param->cam_function;
-    struct isp_ae_sm_s *aepa = &sm_state.isp_ae_parm;
-    aepa->max_step = func->get_aet_max_step();
-
-    if (func && func->get_aet_gain_by_step)
-        aet_gain_pre = func->get_aet_gain_by_step(ae_sens.new_step);
-    format_gain_pre = devp->isp_ae_parm->aet_fmt_gain;
-    pr_info("[isp] %s format_gain_pre:%d aet_gain_pre:%d ... ...\n",
-                __func__, format_gain_pre, aet_gain_pre);
-
-    return 0;
-}
-
 void isp_ae_base_sm(isp_dev_t *devp)
 {
 	struct isp_ae_stat_s *ae = &devp->isp_ae;
@@ -687,18 +713,6 @@ static inline int matrix_yuv709_rgb_b(unsigned int y, unsigned int u, unsigned i
 //static unsigned int g_val = 390;//256;
 //static unsigned int b_val = 256;
 
-static struct isp_awb_gain_s awb_gain, awb_gain_pre;
-
-unsigned int isp_awb_load_pre_para(isp_dev_t *devp)
-{
-    memcpy(&awb_gain, &awb_gain_pre, sizeof(struct isp_awb_gain_s));
-    isp_awb_set_gain(awb_gain.r_val, awb_gain.g_val,awb_gain.b_val);
-    pr_info("[isp] %s r:%d g:%d b:%d ... ...\n",
-                __func__, awb_gain.r_val, awb_gain.g_val,awb_gain.b_val);
-
-    return 0;
-}
-
 int isp_awb_save_current_para(isp_dev_t *devp)
 {
     isp_awb_get_gain(&awb_gain_pre);
-- 
2.19.0

