From e6bf7293feafdd1cf2c1068de7240eb5642ec4bb Mon Sep 17 00:00:00 2001
From: jiwei chen <jiwei.chen@amlogic.com>
Date: Thu, 5 Dec 2013 14:14:44 +0800
Subject: [PATCH 2372/5965] PD #83910: isp,increase some port for debug.

---
 drivers/amlogic/tvin/isp/isp_hw.c    | 36 +++++++++++++++++++++++++++-
 drivers/amlogic/tvin/isp/isp_regs.h  |  2 +-
 drivers/amlogic/tvin/isp/isp_sm.c    | 18 ++++++++++----
 drivers/amlogic/tvin/vdin/vdin_ctl.c |  6 +++++
 drivers/amlogic/tvin/vdin/vdin_ctl.h |  1 +
 drivers/amlogic/tvin/vdin/vdin_drv.c |  3 +++
 6 files changed, 60 insertions(+), 6 deletions(-)

diff --git a/drivers/amlogic/tvin/isp/isp_hw.c b/drivers/amlogic/tvin/isp/isp_hw.c
index 939b555f0cc3..80d6afcac1ec 100755
--- a/drivers/amlogic/tvin/isp/isp_hw.c
+++ b/drivers/amlogic/tvin/isp/isp_hw.c
@@ -302,12 +302,13 @@ void isp_set_demosaicing(xml_dm_t *dms)
 */
 void isp_set_matrix(xml_csc_t *csc, unsigned int height)
 {
-	unsigned int isp_matrix_lup[2][9]=
+	unsigned int isp_matrix_lup[3][9]=
 	{
 		{0x0,0x10000,0x840102,0x3203b4,0x36b00e1,0xe10344,0x3dc,0x400200,0x200},
 		//rgb->601
 		{0x0,0x10000,0x5e013a,0x2003cc,0x35300e1,0xe10334,0x3ec,0x400200,0x200},
 		//rgb->709
+		{0x0,0x00000,0x1000100,0x1000100,0x1000100,0x1000100,0x100,0x0,0x0},
 	};
 	unsigned int i=0, *start;
 	if(csc){
@@ -317,9 +318,23 @@ void isp_set_matrix(xml_csc_t *csc, unsigned int height)
 		for(i=0;i<XML_CSC;i++)
 		        WR(ISP_MATRIX_PRE_OFST0_1+i, *(start+i));
 	} else {
+	    if(height==0)
+	    {
+			printk("isp_set_matrix2\n");
+			start = isp_matrix_lup[2];
+			for(i=0;i<XML_CSC;i++)
+			{
+			        WR(ISP_MATRIX_PRE_OFST0_1+i, *(start+i));
+					printk("xxx=%x,%x\n",RD(ISP_MATRIX_PRE_OFST0_1+i),*(start+i));
+			}
+			printk("xxx=%x\n",RD(ISP_MATRIX_COEF00_01));
+	    }
+		else
+		{
 		start = (height>720)?isp_matrix_lup[1]:isp_matrix_lup[0];
 		for(i=0;i<XML_CSC;i++)
 		        WR(ISP_MATRIX_PRE_OFST0_1+i, *(start+i));
+		}
 	}
 }
 /*
@@ -568,6 +583,25 @@ void disable_gc_lns(bool flag)
 	}
 }
 
+void isp_bypass_all()
+{
+	WR_BITS(ISP_PAT_GEN_CTRL,0,ISP_PAT_ENABLE_BIT,ISP_PAT_ENABLE_WID);
+	WR_BITS(ISP_CLAMP_GRBG01,0,CLAMP_GRBG0_BIT,CLAMP_GRBG0_WID);
+	WR_BITS(ISP_CLAMP_GRBG01,0,CLAMP_GRBG1_BIT,CLAMP_GRBG1_WID);
+	WR_BITS(ISP_CLAMP_GRBG23,0,CLAMP_GRBG2_BIT,CLAMP_GRBG2_WID);
+	WR_BITS(ISP_CLAMP_GRBG23,0,CLAMP_GRBG3_BIT,CLAMP_GRBG3_WID);
+	WR_BITS(ISP_GAIN_GRBG01,0x100,GAIN_GRBG0_BIT,GAIN_GRBG0_WID);
+	WR_BITS(ISP_GAIN_GRBG01,0x100,GAIN_GRBG1_BIT,GAIN_GRBG1_WID);
+	WR_BITS(ISP_GAIN_GRBG23,0x100,GAIN_GRBG2_BIT,GAIN_GRBG2_WID);
+	WR_BITS(ISP_GAIN_GRBG23,0x100,GAIN_GRBG3_BIT,GAIN_GRBG3_WID);	
+	WR_BITS(ISP_LNS_CTRL,0,LNS_CMOP_ENABLE_BIT,LNS_CMOP_ENABLE_WID);
+	WR_BITS(ISP_GMR0_CTRL,0,GMR_CORRECT_ENABLE_BIT,GMR_CORRECT_ENABLE_WID);
+	WR_BITS(ISP_DFT_CTRL,0,ISP_DFT_ENABLE_BIT,ISP_DFT_ENABLE_WID);
+	WR_BITS(ISP_DMS_CTRL0,7,ISP_DMS_BYPASS_BIT,ISP_DMS_BYPASS_WID);
+	isp_set_matrix(NULL,0);
+	WR_BITS(ISP_PKNR_ENABLE,0,ISP_NR_EN_BIT,ISP_NR_EN_WID);
+	WR_BITS(ISP_PKNR_ENABLE,0,ISP_PK_EN_BIT,ISP_PK_EN_WID);	
+}
 /*
 *
 */
diff --git a/drivers/amlogic/tvin/isp/isp_regs.h b/drivers/amlogic/tvin/isp/isp_regs.h
index 8d47051025ab..114e9a50e4f7 100755
--- a/drivers/amlogic/tvin/isp/isp_regs.h
+++ b/drivers/amlogic/tvin/isp/isp_regs.h
@@ -457,7 +457,7 @@
 #define ISP_CLAMP_GRBG23                    0x2d23  
 //Bit 31:26, reserved
 #define CLAMP_GRBG2_BIT			    16
-#define CLAMP_GRBGd_WID			    10
+#define CLAMP_GRBG2_WID			    10
 //Bit 25:16, reg_isp_clamp_grbg2         clamping offset to raw data blue (phase2) channel, -512~511.   default= 0
 //Bit 15:10, reserved
 #define CLAMP_GRBG3_BIT			    0
diff --git a/drivers/amlogic/tvin/isp/isp_sm.c b/drivers/amlogic/tvin/isp/isp_sm.c
index 1923bfce625d..3ee0596d4ce4 100755
--- a/drivers/amlogic/tvin/isp/isp_sm.c
+++ b/drivers/amlogic/tvin/isp/isp_sm.c
@@ -81,6 +81,16 @@ static unsigned int ae_ratio4 = 40;   //high
 module_param(ae_ratio4,uint,0664);
 MODULE_PARM_DESC(ae_ratio4,"\n debug flag for ae.\n");
 
+static unsigned int ae_min_diff = 50;   //high
+
+module_param(ae_min_diff,uint,0664);
+MODULE_PARM_DESC(ae_min_diff,"\n debug flag for ae.\n");
+
+static unsigned int ae_max_diff = 15;   //high
+
+module_param(ae_max_diff,uint,0664);
+MODULE_PARM_DESC(ae_max_diff,"\n debug flag for ae.\n");
+
 static unsigned int awb_debug = 0;
 
 module_param(awb_debug,uint,0664);
@@ -538,15 +548,15 @@ void isp_ae_base_sm(isp_dev_t *devp)
 							{
 								temp = 2;
 								aepa->targ--;
-								if(aepa->targ<(aep->targetmid-50))
-									aepa->targ = aep->targetmid-50;
+								if(aepa->targ<(aep->targetmid-ae_min_diff))
+									aepa->targ = aep->targetmid-ae_min_diff;
 							}
 							else if((sum < aepa->max_lumasum1)||((sum < aepa->max_lumasum2)&&(temp==0)))
 							{
 								temp = 0;
 								aepa->targ++;
-								if(aepa->targ>(aep->targetmid+15))
-									aepa->targ = aep->targetmid+15;
+								if(aepa->targ>(aep->targetmid+ae_max_diff))
+									aepa->targ = aep->targetmid+ae_max_diff;
 							}
 							else 
 							{
diff --git a/drivers/amlogic/tvin/vdin/vdin_ctl.c b/drivers/amlogic/tvin/vdin/vdin_ctl.c
index 4d4d30f85b20..dcc91242984c 100755
--- a/drivers/amlogic/tvin/vdin/vdin_ctl.c
+++ b/drivers/amlogic/tvin/vdin/vdin_ctl.c
@@ -1955,6 +1955,12 @@ inline void vdin_wr_reverse(unsigned int offset, bool hreverse, bool vreverse)
 #endif
 }
 
+void vdin_bypass_isp(unsigned int offset)
+{
+	WR_BITS(VDIN_CM_BRI_CON_CTRL, 0,CM_TOP_EN_BIT, CM_TOP_EN_WID);
+	WR_BITS(VDIN_MATRIX_CTRL, 0, VDIN_MATRIX_EN_BIT, VDIN_MATRIX_EN_WID);
+	WR_BITS(VDIN_MATRIX_CTRL, 0, VDIN_MATRIX1_EN_BIT, VDIN_MATRIX1_EN_WID);
+}
 void set_chroma_regs(unsigned int offset, unsigned int h_active,unsigned int v_active)
 {
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
diff --git a/drivers/amlogic/tvin/vdin/vdin_ctl.h b/drivers/amlogic/tvin/vdin/vdin_ctl.h
index a5e5ba775d52..fac817392cb9 100755
--- a/drivers/amlogic/tvin/vdin/vdin_ctl.h
+++ b/drivers/amlogic/tvin/vdin/vdin_ctl.h
@@ -169,4 +169,5 @@ extern void vdin_wr_reverse(unsigned int offset, bool hreverse, bool vreverse);
 extern void vdin_set_hvscale(struct vdin_dev_s *devp);
 extern void set_chroma_regs(unsigned int offset, unsigned int h_active,unsigned int v_active);
 extern void vdin_set_cm2(unsigned int offset,unsigned int index);
+extern void vdin_bypass_isp(unsigned int offset);
 #endif
diff --git a/drivers/amlogic/tvin/vdin/vdin_drv.c b/drivers/amlogic/tvin/vdin/vdin_drv.c
index e22254ffa398..67414deb7526 100755
--- a/drivers/amlogic/tvin/vdin/vdin_drv.c
+++ b/drivers/amlogic/tvin/vdin/vdin_drv.c
@@ -1990,6 +1990,9 @@ static ssize_t vdin_attr_store(struct device *dev,struct device_attribute *attr,
 		if(devp->cycle)
 			fps = (VDIN_CRYSTAL + (devp->cycle>>3))/devp->cycle;
                 pr_info("%u f/s\n",fps);
+        }else if(!strcmp(parm[0], "bypass_isp")){
+        vdin_bypass_isp(devp->addr_offset);
+        pr_info("vdin bypass isp.\n");
         }
         else if(!strcmp(parm[0],"capture")){
 		if(parm[3] != NULL){
-- 
2.19.0

