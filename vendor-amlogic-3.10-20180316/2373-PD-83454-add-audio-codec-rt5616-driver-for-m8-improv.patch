From e44e983f441d1e7a85d591444c3f59df52701bfd Mon Sep 17 00:00:00 2001
From: "chengshun.wang" <chengshun.wang@amlogic.com>
Date: Thu, 5 Dec 2013 17:22:56 +0800
Subject: [PATCH 2373/5965] PD# 83454: add audio codec rt5616 driver for m8,
 improve mic record noise

---
 arch/arm/configs/meson8_defconfig             |    1 +
 include/linux/amlogic/aml_audio_codec_probe.h |    3 +
 sound/soc/aml/Kconfig                         |    6 +-
 sound/soc/aml/Makefile                        |    3 +
 sound/soc/aml/aml_audio_hw.c                  |   11 +-
 sound/soc/aml/aml_audio_hw.h                  |    2 +-
 sound/soc/aml/aml_i2s.c                       |   17 +-
 sound/soc/aml/aml_i2s_dai.c                   |   14 +-
 sound/soc/aml/aml_m8.c                        |   30 +-
 sound/soc/aml/aml_m8.h                        |   36 +
 sound/soc/aml/aml_m8_rt5616.c                 |  704 ++++++
 sound/soc/codecs/Kconfig                      |    3 +
 sound/soc/codecs/Makefile                     |    2 +
 .../soc/codecs/common/aml_audio_codec_probe.c |  176 +-
 sound/soc/codecs/rt5616.c                     | 1771 +++++++++++++++
 sound/soc/codecs/rt5616.h                     | 1911 +++++++++++++++++
 16 files changed, 4563 insertions(+), 127 deletions(-)
 mode change 100644 => 100755 include/linux/amlogic/aml_audio_codec_probe.h
 create mode 100755 sound/soc/aml/aml_m8.h
 create mode 100755 sound/soc/aml/aml_m8_rt5616.c
 create mode 100755 sound/soc/codecs/rt5616.c
 create mode 100755 sound/soc/codecs/rt5616.h

diff --git a/arch/arm/configs/meson8_defconfig b/arch/arm/configs/meson8_defconfig
index f5c3fbf7428d..cb31084a729a 100755
--- a/arch/arm/configs/meson8_defconfig
+++ b/arch/arm/configs/meson8_defconfig
@@ -247,6 +247,7 @@ CONFIG_SND_SOC=y
 CONFIG_SND_AML_SOC=y
 CONFIG_SND_AML_M_DUMMY_CODEC=y
 CONFIG_SND_AML_M8=y
+CONFIG_SND_AML_M8_RT5616=y
 CONFIG_SND_AML_M8_PCM=y
 CONFIG_UHID=y
 CONFIG_SND_USB=y
diff --git a/include/linux/amlogic/aml_audio_codec_probe.h b/include/linux/amlogic/aml_audio_codec_probe.h
old mode 100644
new mode 100755
index 34a86da474e2..15e534cdccff
--- a/include/linux/amlogic/aml_audio_codec_probe.h
+++ b/include/linux/amlogic/aml_audio_codec_probe.h
@@ -6,6 +6,9 @@
 #define AML_I2C_BUS_AO 0
 #define AML_I2C_BUS_A 1
 #define AML_I2C_BUS_B 2
+#define AML_I2C_BUS_C 3
+#define AML_I2C_BUS_D 4
+
 
 typedef int(*aml_audio_codec_probe_fun_t)(struct i2c_adapter *);
 
diff --git a/sound/soc/aml/Kconfig b/sound/soc/aml/Kconfig
index e6344064d40f..f8a3b5c22f8c 100755
--- a/sound/soc/aml/Kconfig
+++ b/sound/soc/aml/Kconfig
@@ -121,4 +121,8 @@ config SND_AML_M8
 config SND_AML_M8_PCM
 	tristate "M8 evaluation board with PCM2BT"
 	depends on SND_AML_SOC
-	select SND_SOC_PCM2BT if SND_AML_M8_PCM
\ No newline at end of file
+	select SND_SOC_PCM2BT if SND_AML_M8_PCM
+config SND_AML_M8_RT5616
+tristate "M8 evaluation board with RT5616"
+depends on SND_AML_SOC
+select SND_SOC_RT5616 if SND_AML_M8_RT5616
diff --git a/sound/soc/aml/Makefile b/sound/soc/aml/Makefile
index 749904bb052d..2819d2cc76fc 100755
--- a/sound/soc/aml/Makefile
+++ b/sound/soc/aml/Makefile
@@ -91,3 +91,6 @@ obj-$(CONFIG_SND_AML_SOC) += snd-soc-aml-spdif-codec.o
 snd-soc-aml-m8-objs := aml_m8.o
 obj-$(CONFIG_SND_AML_M8) += snd-soc-aml-m8.o
 
+#AML M8 Machine support
+snd-soc-aml-m8-rt5616-objs := aml_m8_rt5616.o
+obj-$(CONFIG_SND_AML_M8_RT5616) += snd-soc-aml-m8-rt5616.o
diff --git a/sound/soc/aml/aml_audio_hw.c b/sound/soc/aml/aml_audio_hw.c
index 6bee95fab332..0cab6c0f3c62 100755
--- a/sound/soc/aml/aml_audio_hw.c
+++ b/sound/soc/aml/aml_audio_hw.c
@@ -256,9 +256,12 @@ void audio_set_958outbuf(u32 addr, u32 size,int flag)
 /*
 i2s mode 0: master 1: slave
 */
-static void i2sin_fifo0_set_buf(u32 addr, u32 size,u32 i2s_mode)
+static void i2sin_fifo0_set_buf(u32 addr, u32 size,u32 i2s_mode,u32 i2s_sync)
 {
 	unsigned char  mode = 0;
+    unsigned int sync_mode = 0;
+    if(i2s_sync)
+        sync_mode = i2s_sync;
 	if(i2s_mode &I2SIN_SLAVE_MODE)
 		mode = 1;
 	WRITE_MPEG_REG(AUDIN_FIFO0_START, addr & 0xffffffc0);
@@ -289,7 +292,7 @@ static void i2sin_fifo0_set_buf(u32 addr, u32 size,u32 i2s_mode)
 									 (3<<I2SIN_SIZE)
 									|(1<<I2SIN_CHAN_EN)		/*bit10~13*/ //2 channel
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TV
-									|(0<<I2SIN_POS_SYNC)
+									|(sync_mode<<I2SIN_POS_SYNC)
 #else
 									|(1<<I2SIN_POS_SYNC)
 #endif
@@ -323,10 +326,10 @@ static void spdifin_fifo1_set_buf(u32 addr, u32 size)
 				  );
 	WRITE_MPEG_REG(AUDIN_FIFO1_CTRL1,0xc);
 }
-void audio_in_i2s_set_buf(u32 addr, u32 size,u32 i2s_mode)
+void audio_in_i2s_set_buf(u32 addr, u32 size,u32 i2s_mode, u32 i2s_sync)
 {
 	printk("i2sin_fifo0_set_buf \n");		
-	i2sin_fifo0_set_buf(addr,size,i2s_mode);
+	i2sin_fifo0_set_buf(addr,size,i2s_mode,i2s_sync);
 	audio_in_buf_ready = 1;
 }
 void audio_in_spdif_set_buf(u32 addr, u32 size)
diff --git a/sound/soc/aml/aml_audio_hw.h b/sound/soc/aml/aml_audio_hw.h
index 587b9c7f75a3..398cb559435e 100755
--- a/sound/soc/aml/aml_audio_hw.h
+++ b/sound/soc/aml/aml_audio_hw.h
@@ -105,7 +105,7 @@ extern unsigned I2S_MODE;
 
 void audio_set_aiubuf(u32 addr, u32 size, unsigned int channel);
 void audio_set_958outbuf(u32 addr, u32 size, int flag);
-void audio_in_i2s_set_buf(u32 addr, u32 size,u32 i2s_mode);
+void audio_in_i2s_set_buf(u32 addr, u32 size,u32 i2s_mode, u32 i2s_sync);
 void audio_in_spdif_set_buf(u32 addr, u32 size);
 void audio_in_i2s_enable(int flag);
 void audio_in_spdif_enable(int flag);
diff --git a/sound/soc/aml/aml_i2s.c b/sound/soc/aml/aml_i2s.c
index 6de450895e1b..807102ddddd9 100755
--- a/sound/soc/aml/aml_i2s.c
+++ b/sound/soc/aml/aml_i2s.c
@@ -438,7 +438,7 @@ static void aml_i2s_timer_callback(unsigned long data)
 	}
 }
 
-
+static int num_clk_gate = 0;
 static int aml_i2s_open(struct snd_pcm_substream *substream)
 {
 	ALSA_TRACE();
@@ -496,11 +496,14 @@ static int aml_i2s_open(struct snd_pcm_substream *substream)
 	s= &prtd->s;
 	WRITE_MPEG_REG_BITS( HHI_MPLL_CNTL9, 1,14, 1);
 	mutex_lock(&gate_mutex);
-	if(audio_gate_status == 0){
-		audio_aiu_pg_enable(1);
-		ALSA_DEBUG("aml_pcm_open  device type %x \n", s->device_type);
-		
-	}
+	if(!num_clk_gate){
+        num_clk_gate = 1;
+    	if(audio_gate_status == 0){
+    		audio_aiu_pg_enable(1);
+    		ALSA_DEBUG("aml_pcm_open  device type %x \n", s->device_type);
+    		
+    	}
+    }
 	audio_gate_status  |= s->device_type;
 	mutex_unlock(&gate_mutex);		
  out:
@@ -516,7 +519,7 @@ static int aml_i2s_close(struct snd_pcm_substream *substream)
 	audio_gate_status  &= ~s->device_type;	
 	if(audio_gate_status == 0){
 		ALSA_DEBUG("aml_pcm_close  device type %x \n", s->device_type);		
-		audio_aiu_pg_enable(0);
+		//audio_aiu_pg_enable(0);
 	}
 	mutex_unlock(&gate_mutex);		
 //	if(s->device_type == AML_AUDIO_SPDIFOUT)
diff --git a/sound/soc/aml/aml_i2s_dai.c b/sound/soc/aml/aml_i2s_dai.c
index 9bf499e581fb..3e4ff4206145 100755
--- a/sound/soc/aml/aml_i2s_dai.c
+++ b/sound/soc/aml/aml_i2s_dai.c
@@ -27,6 +27,7 @@
 #include <linux/of.h>
 
 static aml_dai_info_t dai_info[3] = {{0}};
+static int i2s_pos_sync = 0;
 #define AML_DAI_DEBUG
 //#define AML_DAI_PCM_SUPPORT 
 
@@ -163,7 +164,7 @@ static int aml_dai_i2s_prepare(struct snd_pcm_substream *substream,
 	if(substream->stream == SNDRV_PCM_STREAM_CAPTURE)
 	{
 		s->i2s_mode = dai_info[dai->id].i2s_mode;
-		audio_in_i2s_set_buf(runtime->dma_addr, runtime->dma_bytes*2,0);
+		audio_in_i2s_set_buf(runtime->dma_addr, runtime->dma_bytes*2,0,i2s_pos_sync);
 		memset((void*)runtime->dma_area,0,runtime->dma_bytes*2);
 		{
 			int * ppp = (int*)(runtime->dma_area+runtime->dma_bytes*2-8);
@@ -243,6 +244,17 @@ static int aml_dai_set_i2s_fmt(struct snd_soc_dai *dai,
 #endif
 	if(fmt&SND_SOC_DAIFMT_CBS_CFS)//slave mode 
 		dai_info[dai->id].i2s_mode = I2S_SLAVE_MODE;
+    
+    switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+    case SND_SOC_DAIFMT_NB_NF:
+         i2s_pos_sync = 0;
+        break;
+    case SND_SOC_DAIFMT_IB_NF:
+         i2s_pos_sync = 1;
+        break;
+    default:
+        return -EINVAL;
+    }
 	return 0;
 }
 
diff --git a/sound/soc/aml/aml_m8.c b/sound/soc/aml/aml_m8.c
index ac82ff977340..084f7cf39776 100755
--- a/sound/soc/aml/aml_m8.c
+++ b/sound/soc/aml/aml_m8.c
@@ -35,6 +35,7 @@
 
 #include "aml_i2s_dai.h"
 #include "aml_i2s.h"
+#include "aml_m8.h"
 #include "aml_audio_hw.h"
 #include "../codecs/aml_m8_codec.h"
 #include <mach/register.h>
@@ -51,35 +52,6 @@
 #define USE_EXTERNAL_DAC 0
 #define DRV_NAME "aml_snd_m8"
 #define HP_DET                  1
-struct aml_audio_private_data {
-    int bias_level;
-    int clock_en;
-	int gpio_hp_det;
-	bool det_pol_inv;
-	int gpio_mute;
-	bool mute_inv;
-	struct pinctrl *pin_ctl;
-    int hp_last_state;
-    unsigned int hp_val_h;
-    unsigned int hp_val_l;
-    unsigned int mic_val;
-    unsigned int hp_detal;
-    unsigned int hp_adc_ch;
-
-    bool mic_det;
-    
-
-    int timer_en;
-    int detect_flag;
-    struct timer_list timer;
-    struct work_struct work;
-    struct mutex lock;
-    struct snd_soc_jack jack;
-    void* data;
-
-	struct switch_dev sdev; // for android
-	struct switch_dev mic_sdev; // for android
-};
 
 static void aml_set_clock(int enable)
 {
diff --git a/sound/soc/aml/aml_m8.h b/sound/soc/aml/aml_m8.h
new file mode 100755
index 000000000000..3c8de59673cf
--- /dev/null
+++ b/sound/soc/aml/aml_m8.h
@@ -0,0 +1,36 @@
+#ifndef AML_M8_H
+#define AML_M8_H
+
+struct aml_audio_private_data {
+    int bias_level;
+    int clock_en;
+	int gpio_hp_det;
+	bool det_pol_inv;
+	int gpio_mute;
+	bool mute_inv;
+	struct pinctrl *pin_ctl;
+    int hp_last_state;
+    unsigned int hp_val_h;
+    unsigned int hp_val_l;
+    unsigned int mic_val;
+    unsigned int hp_detal;
+    unsigned int hp_adc_ch;
+
+    bool mic_det;
+    
+
+    int timer_en;
+    int detect_flag;
+    struct timer_list timer;
+    struct work_struct work;
+    struct mutex lock;
+    struct snd_soc_jack jack;
+    void* data;
+
+	struct switch_dev sdev; // for android
+	struct switch_dev mic_sdev; // for android
+};
+
+
+#endif
+
diff --git a/sound/soc/aml/aml_m8_rt5616.c b/sound/soc/aml/aml_m8_rt5616.c
new file mode 100755
index 000000000000..09d85632a622
--- /dev/null
+++ b/sound/soc/aml/aml_m8_rt5616.c
@@ -0,0 +1,704 @@
+/*
+ * aml_m8.c  --  SoC audio for AML M8
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version.
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/clk.h>
+#include <linux/timer.h>
+#include <linux/workqueue.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/i2c.h>
+#include <linux/delay.h>
+
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/jack.h>
+
+
+#include <asm/mach-types.h>
+#include <mach/hardware.h>
+
+#include <linux/switch.h>
+#include <linux/amlogic/saradc.h>
+
+#include "aml_i2s_dai.h"
+#include "aml_i2s.h"
+#include "aml_audio_hw.h"
+#include "aml_m8.h"
+
+#include <mach/register.h>
+
+#ifdef CONFIG_USE_OF
+#include <linux/of.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/of_gpio.h>
+#include <mach/pinmux.h>
+#include <plat/io.h>
+#endif
+
+#define USE_EXTERNAL_DAC 1
+#define DRV_NAME "aml_m8_rt5616"
+#define HP_DET                  1
+
+int spk_gpio_mute;
+
+static void aml_set_clock(int enable)
+{
+    /* set clock gating */
+    //p_aml_audio->clock_en = enable;
+
+    return ;
+}
+
+#if HP_DET
+static void aml_audio_start_timer(struct aml_audio_private_data *p_aml_audio, unsigned long delay)
+{
+    p_aml_audio->timer.expires = jiffies + delay;
+    p_aml_audio->timer.data = (unsigned long)p_aml_audio;
+    p_aml_audio->detect_flag = -1;
+    add_timer(&p_aml_audio->timer);
+    p_aml_audio->timer_en = 1;
+}
+
+static void aml_audio_stop_timer(struct aml_audio_private_data *p_aml_audio)
+{
+    del_timer_sync(&p_aml_audio->timer);
+    cancel_work_sync(&p_aml_audio->work);
+    p_aml_audio->timer_en = 0;
+    p_aml_audio->detect_flag = -1;
+}
+
+static int hp_det_adc_value(struct aml_audio_private_data *p_aml_audio)
+{
+    int ret,hp_value,hp_val_sum,loop_num;
+    hp_val_sum = 0;
+    loop_num = 0;
+    unsigned int mic_ret = 0;
+    
+    while(loop_num < 8){
+        hp_value = get_adc_sample(p_aml_audio->hp_adc_ch);
+        if(hp_value <0){
+            printk("hp detect get error adc value!\n");
+            continue;
+        }
+        hp_val_sum += hp_value;
+        loop_num ++;
+        msleep(15);
+    }
+    hp_val_sum = hp_val_sum >> 3;
+
+    if(hp_val_sum >= p_aml_audio->hp_val_h){
+        ret = 0;
+    }else if((hp_val_sum <= (p_aml_audio->hp_val_l))&& hp_val_sum >=0){
+        ret = 1;
+        if(p_aml_audio->mic_det){
+            if(hp_val_sum <=  p_aml_audio->mic_val){
+                mic_ret = 8;
+                ret |= mic_ret;
+            }
+        }
+    }else{
+        ret = 2;
+        if(p_aml_audio->mic_det){
+            ret = 0;
+            mic_ret = 8;
+            ret |= mic_ret; 
+        }
+            
+    }
+    
+    return ret;
+}
+
+
+static int aml_audio_hp_detect(struct aml_audio_private_data *p_aml_audio)
+{
+       // return 0;
+   int loop_num = 0;
+   int ret;
+
+    mutex_lock(&p_aml_audio->lock);
+
+    while(loop_num < 2){
+        ret = hp_det_adc_value(p_aml_audio);
+        if(p_aml_audio->hp_last_state != ret){
+            loop_num = 0;
+            msleep(30);
+            if(ret < 0){
+                ret = p_aml_audio->hp_last_state;
+            }else {
+                p_aml_audio->hp_last_state = ret;
+            }
+        }else{
+            msleep(30);
+            loop_num = loop_num + 1;
+        }
+    }
+ 
+    mutex_unlock(&p_aml_audio->lock);
+
+    return ret; 
+}
+
+
+static void aml_asoc_work_func(struct work_struct *work)
+{
+    struct aml_audio_private_data *p_aml_audio = NULL;
+    struct snd_soc_card *card = NULL;
+    int jack_type = 0;
+    int flag = -1;
+    int status = SND_JACK_HEADPHONE;
+    p_aml_audio = container_of(work, struct aml_audio_private_data, work);
+    card = (struct snd_soc_card *)p_aml_audio->data;
+
+    flag = aml_audio_hp_detect(p_aml_audio);
+
+    if(p_aml_audio->detect_flag != flag) {
+
+        p_aml_audio->detect_flag = flag;
+        
+        if (flag & 0x1) {
+            //amlogic_set_value(p_aml_audio->gpio_mute, 0, "mute_spk");
+            switch_set_state(&p_aml_audio->sdev, 2);  // 1 :have mic ;  2 no mic
+            //adac_wr_reg (71, 0x0101); // use board mic
+            printk(KERN_INFO "aml aduio hp pluged 3 jack_type: %d\n", SND_JACK_HEADPHONE);
+            snd_soc_jack_report(&p_aml_audio->jack, status, SND_JACK_HEADPHONE);
+
+           // mic port detect
+           if(p_aml_audio->mic_det){
+               if(flag & 0x8){
+                  switch_set_state(&p_aml_audio->mic_sdev, 1);
+                 // adac_wr_reg (71, 0x0005); // use hp mic
+                  printk(KERN_INFO "aml aduio mic pluged jack_type: %d\n", SND_JACK_MICROPHONE);
+                  snd_soc_jack_report(&p_aml_audio->jack, status, SND_JACK_HEADPHONE);
+              }
+           }
+
+        } else if(flag & 0x2){
+            //amlogic_set_value(p_aml_audio->gpio_mute, 0, "mute_spk");
+            switch_set_state(&p_aml_audio->sdev, 1);  // 1 :have mic ;  2 no mic
+           // adac_wr_reg (71, 0x0005); // use hp mic
+            printk(KERN_INFO "aml aduio hp pluged 4 jack_type: %d\n", SND_JACK_HEADSET);
+            snd_soc_jack_report(&p_aml_audio->jack, status, SND_JACK_HEADPHONE);
+        } else {
+            printk(KERN_INFO "aml audio hp unpluged\n");
+           // amlogic_set_value(p_aml_audio->gpio_mute, 1, "mute_spk");
+//            adac_wr_reg (71, 0x0101); // use board mic
+            switch_set_state(&p_aml_audio->sdev, 0);
+            snd_soc_jack_report(&p_aml_audio->jack, 0, SND_JACK_HEADPHONE);
+
+            // mic port detect
+            if(p_aml_audio->mic_det){
+                if(flag & 0x8){
+                   switch_set_state(&p_aml_audio->mic_sdev, 1);
+                   //adac_wr_reg (71, 0x0005); // use hp mic
+                   printk(KERN_INFO "aml aduio mic pluged jack_type: %d\n", SND_JACK_MICROPHONE);
+                   snd_soc_jack_report(&p_aml_audio->jack, status, SND_JACK_HEADPHONE);
+               }
+            }
+        }
+        
+    }
+}
+
+
+static void aml_asoc_timer_func(unsigned long data)
+{
+    struct aml_audio_private_data *p_aml_audio = (struct aml_audio_private_data *)data;
+    unsigned long delay = msecs_to_jiffies(200);
+
+    schedule_work(&p_aml_audio->work);
+    mod_timer(&p_aml_audio->timer, jiffies + delay);
+}
+#endif
+
+static int aml_asoc_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_dai *codec_dai = rtd->codec_dai;
+    struct snd_soc_dai *cpu_dai = rtd->cpu_dai;
+    int ret;
+
+    printk(KERN_DEBUG "enter %s stream: %s rate: %d format: %d\n", __func__, (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) ? "playback" : "capture", params_rate(params), params_format(params));
+
+    /* set codec DAI configuration */
+    ret = snd_soc_dai_set_fmt(codec_dai, SND_SOC_DAIFMT_I2S |
+        SND_SOC_DAIFMT_NB_NF | SND_SOC_DAIFMT_CBS_CFS);
+    if (ret < 0) {
+        printk(KERN_ERR "%s: set codec dai fmt failed!\n", __func__);
+        return ret;
+    }
+
+    /* set cpu DAI configuration */
+    ret = snd_soc_dai_set_fmt(cpu_dai, SND_SOC_DAIFMT_I2S |
+        SND_SOC_DAIFMT_IB_NF | SND_SOC_DAIFMT_CBM_CFM);
+    if (ret < 0) {
+        printk(KERN_ERR "%s: set cpu dai fmt failed!\n", __func__);
+        return ret;
+    }
+#if 1
+    /* set codec DAI clock */
+    ret = snd_soc_dai_set_sysclk(codec_dai, 0, params_rate(params) * 256, SND_SOC_CLOCK_IN);
+    if (ret < 0) {
+        printk(KERN_ERR "%s: set codec dai sysclk failed (rate: %d)!\n", __func__, params_rate(params));
+        return ret;
+    }
+
+    /* set cpu DAI clock */
+    ret = snd_soc_dai_set_sysclk(cpu_dai, 0, params_rate(params) * 256, SND_SOC_CLOCK_OUT);
+    if (ret < 0) {
+        printk(KERN_ERR "%s: set cpu dai sysclk failed (rate: %d)!\n", __func__, params_rate(params));
+        return ret;
+    }
+#endif
+    return 0;
+}
+
+static struct snd_soc_ops aml_asoc_ops = {
+    .hw_params = aml_asoc_hw_params,
+};
+
+
+//static struct aml_audio_private_data *p_audio;
+
+static int aml_m8_spk_enabled;
+
+static int aml_m8_set_spk(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+    return 0;
+    aml_m8_spk_enabled = ucontrol->value.integer.value[0];
+    printk(KERN_INFO "aml_m8_set_spk: aml_m8_spk_enabled=%d\n",aml_m8_spk_enabled);
+
+    msleep(10);
+    amlogic_set_value(spk_gpio_mute, aml_m8_spk_enabled, "mute_spk");
+
+    if(aml_m8_spk_enabled ==1)
+        msleep(100);
+
+    return 0;
+}
+
+static int aml_m8_get_spk(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+    //printk(KERN_INFO"aml_m8_get_spk:aml_m8_spk_enabled=%d\n",aml_m8_spk_enabled);
+    ucontrol->value.integer.value[0] = aml_m8_spk_enabled;
+    return 0;
+}
+
+
+static int aml_set_bias_level(struct snd_soc_card *card,
+        struct snd_soc_dapm_context *dapm, enum snd_soc_bias_level level)
+{
+    int ret = 0;
+    struct aml_audio_private_data * p_aml_audio;
+    p_aml_audio = snd_soc_card_get_drvdata(card);
+    printk(KERN_DEBUG "enter %s level: %d\n", __func__, level);
+
+    int hp_state = p_aml_audio->detect_flag;
+    if (p_aml_audio->bias_level == (int)level)
+        return 0;
+
+    switch (level) {
+    case SND_SOC_BIAS_ON:
+        break;
+    case SND_SOC_BIAS_PREPARE:
+        /* clock enable */
+        if (!p_aml_audio->clock_en) {
+            aml_set_clock(1);
+        }
+        break;
+
+    case SND_SOC_BIAS_OFF:
+        if (p_aml_audio->clock_en) {
+            aml_set_clock(0);
+        }
+
+        break;
+    case SND_SOC_BIAS_STANDBY:
+        /* clock disable */
+        if (p_aml_audio->clock_en) {
+            aml_set_clock(0);
+        }
+
+        break;
+    default:
+        return ret;
+    }
+
+    p_aml_audio->bias_level = (int)level;
+
+    return ret;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int aml_suspend_pre(struct snd_soc_card *card)
+{
+    printk(KERN_DEBUG "enter %s\n", __func__);
+#if HP_DET
+
+#endif
+    return 0;
+}
+
+static int aml_suspend_post(struct snd_soc_card *card)
+{
+    printk(KERN_DEBUG "enter %s\n", __func__);
+    return 0;
+}
+
+static int aml_resume_pre(struct snd_soc_card *card)
+{
+    printk(KERN_DEBUG "enter %s\n", __func__);
+    return 0;
+}
+
+static int aml_resume_post(struct snd_soc_card *card)
+{
+    printk(KERN_DEBUG "enter %s\n", __func__);
+    return 0;
+}
+#else
+#define aml_suspend_pre  NULL
+#define aml_suspend_post NULL
+#define aml_resume_pre   NULL
+#define aml_resume_post  NULL
+#endif
+
+static const struct snd_kcontrol_new aml_m8_controls[] = {
+
+    SOC_SINGLE_BOOL_EXT("Amp Spk enable", 0,
+        aml_m8_get_spk,
+        aml_m8_set_spk),
+};
+
+static const struct snd_soc_dapm_widget aml_asoc_dapm_widgets[] = {
+    SND_SOC_DAPM_SPK("Ext Spk", NULL),
+    SND_SOC_DAPM_HP("HP", NULL),
+    SND_SOC_DAPM_MIC("MAIN MIC", NULL),
+    SND_SOC_DAPM_MIC("HEADSET MIC", NULL),
+};
+
+
+static struct snd_soc_jack_pin jack_pins[] = {
+    {
+        .pin = "HP",
+        .mask = SND_JACK_HEADPHONE,
+    }
+};
+
+
+
+
+static int aml_asoc_init(struct snd_soc_pcm_runtime *rtd)
+{
+    struct snd_soc_card *card = rtd->card;
+    struct snd_soc_codec *codec = rtd->codec;
+    struct snd_soc_dapm_context *dapm = &codec->dapm;
+    struct aml_audio_private_data * p_aml_audio;
+    int ret = 0;
+    int hp_paraments[5];
+    
+    printk(KERN_DEBUG "enter %s \n", __func__);
+    p_aml_audio = snd_soc_card_get_drvdata(card);
+    ret = snd_soc_add_card_controls(codec->card, aml_m8_controls,
+                ARRAY_SIZE(aml_m8_controls));
+    if (ret)
+       return ret;
+
+    /* Add specific widgets */
+    snd_soc_dapm_new_controls(dapm, aml_asoc_dapm_widgets,
+                  ARRAY_SIZE(aml_asoc_dapm_widgets));
+    if (ret)
+        return ret;
+    ret = snd_soc_jack_new(codec, "hp switch", SND_JACK_HEADPHONE, &p_aml_audio->jack);
+    if (ret < 0) {
+        printk(KERN_WARNING "Failed to alloc resource for hp switch\n");
+    } else {
+        ret = snd_soc_jack_add_pins(&p_aml_audio->jack, ARRAY_SIZE(jack_pins), jack_pins);
+        if (ret < 0) {
+            printk(KERN_WARNING "Failed to setup hp pins\n");
+        }
+    }
+
+#if HP_DET
+    p_aml_audio->mic_det = of_property_read_bool(card->dev->of_node,"mic_det");
+
+    printk("entern %s : mic_det=%d \n",__func__,p_aml_audio->mic_det);
+    ret = of_property_read_u32_array(card->dev->of_node, "hp_paraments", &hp_paraments[0], 5);
+    if(ret){
+        printk("falied to get hp detect paraments from dts file\n");
+    }else{
+        p_aml_audio->hp_val_h  = hp_paraments[0];  // hp adc value higher base, hp unplugged
+        p_aml_audio->hp_val_l  = hp_paraments[1];  // hp adc value low base, 3 section hp plugged.
+        p_aml_audio->mic_val   = hp_paraments[2];  // hp adc value mic detect value.
+        p_aml_audio->hp_detal  = hp_paraments[3];  // hp adc value test toerance
+        p_aml_audio->hp_adc_ch = hp_paraments[4];  // get adc value from which adc port for hp detect
+
+        printk("hp detect paraments: h=%d,l=%d,mic=%d,det=%d,ch=%d \n",p_aml_audio->hp_val_h,p_aml_audio->hp_val_l,
+            p_aml_audio->mic_val,p_aml_audio->hp_detal,p_aml_audio->hp_adc_ch);
+    }
+    init_timer(&p_aml_audio->timer);
+    p_aml_audio->timer.function = aml_asoc_timer_func;
+    p_aml_audio->timer.data = (unsigned long)p_aml_audio;
+    p_aml_audio->data= (void*)card;
+
+    INIT_WORK(&p_aml_audio->work, aml_asoc_work_func);
+    mutex_init(&p_aml_audio->lock);
+
+    mutex_lock(&p_aml_audio->lock);
+    if (!p_aml_audio->timer_en) {
+        aml_audio_start_timer(p_aml_audio, msecs_to_jiffies(100));
+    }
+    mutex_unlock(&p_aml_audio->lock);
+
+#endif
+
+    return 0;
+}
+
+static struct snd_soc_dai_link aml_codec_dai_link[] = {
+    {
+        .name = "SND_M8_RT5616",
+        .stream_name = "AML PCM",
+        .cpu_dai_name = "aml-i2s-dai.0",
+        .init = aml_asoc_init,
+        .platform_name = "aml-i2s.0",
+        .codec_name = "rt5616.4-001b",
+        .ops = &aml_asoc_ops,
+    }, 
+    #ifdef CONFIG_SND_SOC_PCM2BT
+    {
+        .name = "BT Voice",
+        .stream_name = "Voice PCM",
+        .cpu_dai_name = "aml-pcm-dai.0",
+        .codec_dai_name = "pcm2bt-pcm",
+        .platform_name = "aml-pcm.0",
+        .codec_name = "pcm2bt.0",
+        //.ops = &voice_soc_ops,
+    },
+#endif
+
+    {
+        .name = "AML-SPDIF",
+        .stream_name = "SPDIF PCM",
+        .cpu_dai_name = "aml-spdif-dai.0",
+        .codec_dai_name = "dit-hifi",
+        .init = NULL,
+        .platform_name = "aml-i2s.0",
+        .codec_name = "spdif-dit.0",
+        .ops = NULL,      
+    }, 
+
+};
+
+static struct snd_soc_card aml_snd_soc_card = {
+    .driver_name = "SOC-Audio",
+    .dai_link = &aml_codec_dai_link[0],
+    .num_links = ARRAY_SIZE(aml_codec_dai_link),
+    .set_bias_level = aml_set_bias_level,
+#ifdef CONFIG_PM_SLEEP
+    .suspend_pre    = aml_suspend_pre,
+    .suspend_post   = aml_suspend_post,
+    .resume_pre     = aml_resume_pre,
+    .resume_post    = aml_resume_post,
+#endif
+};
+
+static void aml_m8_pinmux_init(struct snd_soc_card *card)
+{
+    struct aml_audio_private_data *p_aml_audio;
+    const char *str=NULL;
+    int ret;
+    p_aml_audio = snd_soc_card_get_drvdata(card);   
+    p_aml_audio->pin_ctl = devm_pinctrl_get_select(card->dev, "aml_snd_m8");
+    
+    
+        
+ #if USE_EXTERNAL_DAC
+    aml_write_reg32(P_AO_SECURE_REG1,0x00000000);
+ #endif
+    ret = of_property_read_string(card->dev->of_node, "mute_gpio", &str);
+    if (ret < 0) {
+        printk("aml_snd_m8: faild to get mute_gpio!\n");
+    }else{
+        p_aml_audio->gpio_mute = amlogic_gpio_name_map_num(str);
+        p_aml_audio->mute_inv = of_property_read_bool(card->dev->of_node,"mute_inv");
+        amlogic_gpio_request_one(p_aml_audio->gpio_mute,GPIOF_OUT_INIT_HIGH,"mute_spk");
+        amlogic_set_value(p_aml_audio->gpio_mute, 0, "mute_spk");
+      
+        spk_gpio_mute = p_aml_audio->gpio_mute;
+        printk(KERN_INFO"pinmux set : spk_gpio_mute=%d\n",spk_gpio_mute);
+    }
+
+    printk("=%s==,aml_m8_pinmux_init done,---%d\n",__func__,p_aml_audio->det_pol_inv);
+}
+
+static void aml_m8_pinmux_deinit(struct snd_soc_card *card)
+{
+    struct aml_audio_private_data *p_aml_audio;
+
+    p_aml_audio = snd_soc_card_get_drvdata(card);
+    if(p_aml_audio->gpio_hp_det)
+        amlogic_gpio_free(p_aml_audio->gpio_hp_det,"hp_det");
+    if(p_aml_audio->gpio_mute)
+        amlogic_gpio_free(p_aml_audio->gpio_mute,"mute_spk"); 
+    if(p_aml_audio->pin_ctl)
+        devm_pinctrl_put(p_aml_audio->pin_ctl);
+}
+static int aml_m8_audio_probe(struct platform_device *pdev)
+{
+    //struct device_node *np = pdev->dev.of_node;
+    struct snd_soc_card *card = &aml_snd_soc_card;
+    struct aml_audio_private_data *p_aml_audio;
+    int ret = 0;
+
+    printk(KERN_DEBUG "enter %s\n", __func__);
+
+#ifdef CONFIG_USE_OF
+    p_aml_audio = devm_kzalloc(&pdev->dev,
+            sizeof(struct aml_audio_private_data), GFP_KERNEL);
+    if (!p_aml_audio) {
+        dev_err(&pdev->dev, "Can't allocate aml_audio_private_data\n");
+        ret = -ENOMEM;
+        goto err;
+    }
+
+    card->dev = &pdev->dev;
+    platform_set_drvdata(pdev, card);
+    snd_soc_card_set_drvdata(card, p_aml_audio);
+    if (!(pdev->dev.of_node)) {
+        dev_err(&pdev->dev, "Must be instantiated using device tree\n");
+        ret = -EINVAL;
+        goto err;
+    }
+
+    ret = snd_soc_of_parse_card_name(card, "aml,sound_card");
+    if (ret)
+        goto err;
+    
+    ret = of_property_read_string_index(pdev->dev.of_node, "aml,codec_dai",
+            0, &aml_codec_dai_link[0].codec_dai_name);
+    if (ret)
+        goto err;
+
+    ret = snd_soc_of_parse_audio_routing(card, "aml,audio-routing");
+    if (ret)
+      goto err;
+
+//  aml_codec_dai_link[0].codec_of_node = of_parse_phandle(
+//          pdev->dev.of_node, "aml,audio-codec", 0);
+
+    ret = snd_soc_register_card(card);
+    if (ret) {
+        dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n",
+            ret);
+        goto err;
+    }
+
+    aml_m8_pinmux_init(card);
+
+    p_aml_audio->sdev.name = "h2w";//for report headphone to android
+    ret = switch_dev_register(&p_aml_audio->sdev);
+    if (ret < 0){
+        printk(KERN_ERR "ASoC: register hp switch dev failed\n");
+        goto err;
+    }
+
+    p_aml_audio->mic_sdev.name = "mic_dev";//for micphone detect
+    ret = switch_dev_register(&p_aml_audio->mic_sdev);
+    if (ret < 0){
+        printk(KERN_ERR "ASoC: register mic switch dev failed\n");
+        goto err;
+    }
+
+    return 0;
+#endif
+
+err:
+    kfree(p_aml_audio);
+    return ret;
+}
+
+static int aml_m8_audio_remove(struct platform_device *pdev)
+{
+    int ret = 0;
+    struct snd_soc_card *card = platform_get_drvdata(pdev);
+    struct aml_audio_private_data *p_aml_audio;
+
+    p_aml_audio = snd_soc_card_get_drvdata(card);
+    snd_soc_unregister_card(card);
+#if HP_DET
+    /* stop timer */
+    mutex_lock(&p_aml_audio->lock);
+    if (p_aml_audio->timer_en) {
+        aml_audio_stop_timer(p_aml_audio);
+    }
+    mutex_unlock(&p_aml_audio->lock);
+#endif
+
+    aml_m8_pinmux_deinit(card);
+    kfree(p_aml_audio);
+    return ret;
+}
+
+#ifdef CONFIG_USE_OF
+static const struct of_device_id amlogic_audio_dt_match[]={
+    { .compatible = "sound_card, aml_m8_rt5616", },
+    {},
+};
+#else
+#define amlogic_audio_dt_match NULL
+#endif
+
+static struct platform_driver aml_m8_audio_driver = {
+    .probe  = aml_m8_audio_probe,
+    .remove = aml_m8_audio_remove,
+    .driver = {
+        .name = DRV_NAME,
+        .owner = THIS_MODULE,
+        .pm = &snd_soc_pm_ops,
+        .of_match_table = amlogic_audio_dt_match,
+    },
+};
+
+static int __init aml_m8_audio_init(void)
+{
+    return platform_driver_register(&aml_m8_audio_driver);
+}
+
+static void __exit aml_m8_audio_exit(void)
+{
+    platform_driver_unregister(&aml_m8_audio_driver);
+}
+
+#ifdef CONFIG_DEFERRED_MODULE_INIT
+deferred_module_init(aml_m8_audio_init);
+#else
+module_init(aml_m8_audio_init);
+#endif
+module_exit(aml_m8_audio_exit);
+
+/* Module information */
+MODULE_AUTHOR("AMLogic, Inc.");
+MODULE_DESCRIPTION("AML_M8 audio machine Asoc driver");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:" DRV_NAME);
+MODULE_DEVICE_TABLE(of, amlogic_audio_dt_match);
+
diff --git a/sound/soc/codecs/Kconfig b/sound/soc/codecs/Kconfig
index 1d5b2d26d2dc..895b9dc7c200 100755
--- a/sound/soc/codecs/Kconfig
+++ b/sound/soc/codecs/Kconfig
@@ -56,6 +56,7 @@ config SND_SOC_ALL_CODECS
 	select SND_SOC_OMAP_HDMI_CODEC if OMAP4_DSS_HDMI
 	select SND_SOC_PCM3008
 	select SND_SOC_RT5631 if I2C
+        select SND_SOC_RT5616 if I2C
 	select SND_SOC_SGTL5000 if I2C
 	select SND_SOC_SI476X if MFD_SI476X_CORE
 	select SND_SOC_SN95031 if INTEL_SCU_IPC
@@ -294,6 +295,8 @@ config SND_SOC_OMAP_HDMI_CODEC
 
 config SND_SOC_PCM3008
        tristate
+config SND_SOC_RT5616
+	tristate
 
 config SND_SOC_RT5631
 	tristate
diff --git a/sound/soc/codecs/Makefile b/sound/soc/codecs/Makefile
index d57ed07b1aa5..d80510eec2f8 100755
--- a/sound/soc/codecs/Makefile
+++ b/sound/soc/codecs/Makefile
@@ -44,6 +44,7 @@ snd-soc-ml26124-objs := ml26124.o
 snd-soc-omap-hdmi-codec-objs := omap-hdmi.o
 snd-soc-pcm3008-objs := pcm3008.o
 snd-soc-rt5631-objs := rt5631.o
+snd-soc-rt5616-objs := rt5616.o
 snd-soc-sgtl5000-objs := sgtl5000.o
 snd-soc-alc5623-objs := alc5623.o
 snd-soc-alc5632-objs := alc5632.o
@@ -175,6 +176,7 @@ obj-$(CONFIG_SND_SOC_ML26124)	+= snd-soc-ml26124.o
 obj-$(CONFIG_SND_SOC_OMAP_HDMI_CODEC) += snd-soc-omap-hdmi-codec.o
 obj-$(CONFIG_SND_SOC_PCM3008)	+= snd-soc-pcm3008.o
 obj-$(CONFIG_SND_SOC_RT5631)	+= snd-soc-rt5631.o
+obj-$(CONFIG_SND_SOC_RT5616)    += snd-soc-rt5616.o
 obj-$(CONFIG_SND_SOC_SGTL5000)  += snd-soc-sgtl5000.o
 obj-$(CONFIG_SND_SOC_SIGMADSP)	+= snd-soc-sigmadsp.o
 obj-$(CONFIG_SND_SOC_SI476X)	+= snd-soc-si476x.o
diff --git a/sound/soc/codecs/common/aml_audio_codec_probe.c b/sound/soc/codecs/common/aml_audio_codec_probe.c
index 79840f2dedd0..0296a3b564f7 100755
--- a/sound/soc/codecs/common/aml_audio_codec_probe.c
+++ b/sound/soc/codecs/common/aml_audio_codec_probe.c
@@ -25,21 +25,22 @@
 
 
 extern struct i2c_client * i2c_new_device(struct i2c_adapter *adap,
-			struct i2c_board_info const *info);
+            struct i2c_board_info const *info);
 
 
 static struct platform_device* audio_codec_pdev = NULL;
 
 bool is_rt5631;
 bool is_wm8960;
+bool is_rt5616;
 
 static int regist_codec_info(struct device_node* p_node, aml_audio_codec_info_t* audio_codec_dev)
 {
     int ret = 0;
     ret = of_property_read_string(p_node, "codec_name", &audio_codec_dev->name);
-	if (ret) {
-		printk("get audio codec name failed!\n");
-	}
+    if (ret) {
+        printk("get audio codec name failed!\n");
+    }
     ret = of_property_read_string(p_node, "status", &audio_codec_dev->status);
     if(ret){
         printk("%s:this audio codec is disabled!\n",audio_codec_dev->name);
@@ -48,25 +49,27 @@ static int regist_codec_info(struct device_node* p_node, aml_audio_codec_info_t*
         is_rt5631 = true;
     }else if(strcmp(audio_codec_dev->name, "wm8960") && strcmp(audio_codec_dev->status,"okay")){
         is_wm8960 = true;
+    }else if(strcmp(audio_codec_dev->name, "rt5616") && strcmp(audio_codec_dev->status,"okay")){
+        is_rt5616 = true;
     }
 
-    printk("*********is_rt5631=%d,is_wm8960=%d*\n",is_rt5631,is_wm8960);
+    printk("*********is_rt5631=%d,is_wm8960=%d,is_rt5616=%d*\n",is_rt5631,is_wm8960,is_rt5616);
     return 0;
 }
 
 
 static int get_audio_codec_i2c_info(struct device_node* p_node, aml_audio_codec_info_t* audio_codec_dev)
 {
-	const char* str;
-	int ret = 0;
+    const char* str;
+    int ret = 0;
     unsigned i2c_addr;
-	struct i2c_adapter *adapter;
+    struct i2c_adapter *adapter;
 
     ret = of_property_read_string(p_node, "codec_name", &audio_codec_dev->name);
-	if (ret) {
-		printk("get audio codec name failed!\n");
-		goto err_out;
-	}
+    if (ret) {
+        printk("get audio codec name failed!\n");
+        goto err_out;
+    }
 
     ret = of_property_match_string(p_node,"status","okay");
     if(ret){
@@ -75,77 +78,80 @@ static int get_audio_codec_i2c_info(struct device_node* p_node, aml_audio_codec_
     }
     printk("use audio codec %s\n",audio_codec_dev->name);
 
-	ret = of_property_read_u32(p_node,"capless",&audio_codec_dev->capless);
+    ret = of_property_read_u32(p_node,"capless",&audio_codec_dev->capless);
     if(ret){
         printk("don't find audio codec capless mode!\n");
     }
 
-	ret = of_property_read_string(p_node, "i2c_bus", &str);
-	if (ret) {
-		printk("%s: faild to get i2c_bus str,use default i2c bus!\n", audio_codec_dev->name);
-		audio_codec_dev->i2c_bus_type = AML_I2C_BUS_B;
-	} else {
-		if (!strncmp(str, "i2c_bus_a", 9))
-			audio_codec_dev->i2c_bus_type = AML_I2C_BUS_A;
-		else if (!strncmp(str, "i2c_bus_b", 9))
-			audio_codec_dev->i2c_bus_type = AML_I2C_BUS_B;
-		else if (!strncmp(str, "i2c_bus_ao", 10))
-			audio_codec_dev->i2c_bus_type = AML_I2C_BUS_AO;
-		else
-			audio_codec_dev->i2c_bus_type = AML_I2C_BUS_B;
-	}
-
-	ret = of_property_read_u32(p_node,"i2c_addr",&i2c_addr);
+    ret = of_property_read_string(p_node, "i2c_bus", &str);
+    if (ret) {
+        printk("%s: faild to get i2c_bus str,use default i2c bus!\n", audio_codec_dev->name);
+        audio_codec_dev->i2c_bus_type = AML_I2C_BUS_D;
+    } else {
+        if (!strncmp(str, "i2c_bus_a", 9))
+            audio_codec_dev->i2c_bus_type = AML_I2C_BUS_A;
+        else if (!strncmp(str, "i2c_bus_b", 9))
+            audio_codec_dev->i2c_bus_type = AML_I2C_BUS_B;
+        else if (!strncmp(str, "i2c_bus_c", 9))
+            audio_codec_dev->i2c_bus_type = AML_I2C_BUS_C;
+        else if (!strncmp(str, "i2c_bus_d", 9))
+            audio_codec_dev->i2c_bus_type = AML_I2C_BUS_D;
+        else if (!strncmp(str, "i2c_bus_ao", 10))
+            audio_codec_dev->i2c_bus_type = AML_I2C_BUS_AO;
+        else
+            audio_codec_dev->i2c_bus_type = AML_I2C_BUS_D;
+    }
+
+    ret = of_property_read_u32(p_node,"i2c_addr",&i2c_addr);
     if(ret){
         printk("don't find i2c adress capless,use default!\n");
-        audio_codec_dev->i2c_addr = 0x1A;
+        audio_codec_dev->i2c_addr = 0x1B;
     }else{
         audio_codec_dev->i2c_addr = i2c_addr;
     }
-	printk("audio codec addr: 0x%x\n", audio_codec_dev->i2c_addr);
-	printk("audio codec i2c bus: %d\n", audio_codec_dev->i2c_bus_type);
-
-	/* test if the camera is exist */
-	adapter = i2c_get_adapter(audio_codec_dev->i2c_bus_type);
-	if (!adapter) {
-		printk("can not do probe function\n");
-		ret = -1;
-		goto err_out;
-	}
-	ret = 0;
+    printk("audio codec addr: 0x%x\n", audio_codec_dev->i2c_addr);
+    printk("audio codec i2c bus: %d\n", audio_codec_dev->i2c_bus_type);
+
+    /* test if the camera is exist */
+    adapter = i2c_get_adapter(audio_codec_dev->i2c_bus_type);
+    if (!adapter) {
+        printk("can not do probe function\n");
+        ret = -1;
+        goto err_out;
+    }
+    ret = 0;
 
 err_out:
-	return ret;
+    return ret;
 }
 
 
 static int aml_audio_codec_probe(struct platform_device *pdev)
 {
-	struct device_node* audio_codec_node = pdev->dev.of_node;
-	struct device_node* child;
-	struct i2c_board_info board_info;
-	struct i2c_adapter *adapter;
-	aml_audio_codec_info_t temp_audio_codec;
-	audio_codec_pdev = pdev;
+    struct device_node* audio_codec_node = pdev->dev.of_node;
+    struct device_node* child;
+    struct i2c_board_info board_info;
+    struct i2c_adapter *adapter;
+    aml_audio_codec_info_t temp_audio_codec;
+    audio_codec_pdev = pdev;
     is_rt5631 = false;
     is_wm8960 = false;
-	for_each_child_of_node(audio_codec_node, child) {
-
-		memset(&temp_audio_codec, 0, sizeof(aml_audio_codec_info_t));
-		regist_codec_info(child,&temp_audio_codec);
-		if (get_audio_codec_i2c_info(child, &temp_audio_codec)) {
-			continue;
-		}
-		//printk("***********board_info************\n");
-		memset(&board_info, 0, sizeof(board_info));
-		strncpy(board_info.type, temp_audio_codec.name, I2C_NAME_SIZE);
-		adapter = i2c_get_adapter(temp_audio_codec.i2c_bus_type);
-		board_info.addr = temp_audio_codec.i2c_addr;
-		board_info.platform_data = &temp_audio_codec;
-        //printk("***********i2c_new_device*******adapter=%d*****\n",adapter);
-		i2c_new_device(adapter, &board_info);
-	}
-	return 0;
+    is_rt5616 = false;
+    for_each_child_of_node(audio_codec_node, child) {
+
+        memset(&temp_audio_codec, 0, sizeof(aml_audio_codec_info_t));
+        regist_codec_info(child,&temp_audio_codec);
+        if (get_audio_codec_i2c_info(child, &temp_audio_codec)) {
+            continue;
+        }
+        memset(&board_info, 0, sizeof(board_info));
+        strncpy(board_info.type, temp_audio_codec.name, I2C_NAME_SIZE);
+        adapter = i2c_get_adapter(temp_audio_codec.i2c_bus_type);
+        board_info.addr = temp_audio_codec.i2c_addr;
+        board_info.platform_data = &temp_audio_codec;
+        i2c_new_device(adapter, &board_info);
+    }
+    return 0;
 }
 
 
@@ -153,42 +159,44 @@ static int aml_audio_codec_remove(struct platform_device *pdev)
 {
     is_rt5631 = false;
     is_wm8960 = false;
+    is_rt5616 = false;
+
     return 0;
 }
 
 static const struct of_device_id aml_audio_codec_probe_dt_match[]={
-	{
-		.compatible = "amlogic,audio_codec",
-	},
-	{},
+    {
+        .compatible = "amlogic,audio_codec",
+    },
+    {},
 };
 
 static  struct platform_driver aml_audio_codec_probe_driver = {
-	.probe		= aml_audio_codec_probe,
-	.remove		= aml_audio_codec_remove,
-	.driver		= {
-		.name	= "aml_audio_codec_probe",
-		.owner	= THIS_MODULE,
-		.of_match_table = aml_audio_codec_probe_dt_match,
-	},
+    .probe      = aml_audio_codec_probe,
+    .remove     = aml_audio_codec_remove,
+    .driver     = {
+        .name   = "aml_audio_codec_probe",
+        .owner  = THIS_MODULE,
+        .of_match_table = aml_audio_codec_probe_dt_match,
+    },
 };
 
 static int __init aml_audio_codec_probe_init(void)
 {
-	int ret;
+    int ret;
 
-	ret = platform_driver_register(&aml_audio_codec_probe_driver);
-	if (ret){
-		printk(KERN_ERR"aml_audio_codec_probre_driver register failed\n");
-		return ret;
-	}
+    ret = platform_driver_register(&aml_audio_codec_probe_driver);
+    if (ret){
+        printk(KERN_ERR"aml_audio_codec_probre_driver register failed\n");
+        return ret;
+    }
 
-	return ret;
+    return ret;
 }
 
 static void __exit aml_audio_codec_probe_exit(void)
 {
-	platform_driver_unregister(&aml_audio_codec_probe_driver);
+    platform_driver_unregister(&aml_audio_codec_probe_driver);
 }
 
 module_init(aml_audio_codec_probe_init);
diff --git a/sound/soc/codecs/rt5616.c b/sound/soc/codecs/rt5616.c
new file mode 100755
index 000000000000..02b7720f575e
--- /dev/null
+++ b/sound/soc/codecs/rt5616.c
@@ -0,0 +1,1771 @@
+/*
+ * rt5616.c  --  RT5616 ALSA SoC audio codec driver
+ *
+ * Copyright 2012 Realtek Semiconductor Corp.
+ * Author: Bard Liao <bardliao@realtek.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/init.h>
+#include <linux/delay.h>
+#include <linux/pm.h>
+#include <linux/i2c.h>
+#include <linux/platform_device.h>
+#include <linux/spi/spi.h>
+#include <sound/core.h>
+#include <sound/pcm.h>
+#include <sound/pcm_params.h>
+#include <sound/soc.h>
+#include <sound/soc-dapm.h>
+#include <sound/initval.h>
+#include <sound/tlv.h>
+
+
+#include "rt5616.h"
+
+#ifdef CONFIG_USE_OF
+#include <linux/of.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/of_gpio.h>
+#include <mach/pinmux.h>
+#include <plat/io.h>
+#endif
+
+
+#define POWER_ON_MICBIAS1
+
+extern int spk_gpio_mute;
+static unsigned int spk_mute_num = 0;
+
+struct rt5616_init_reg {
+    u8 reg;
+    u16 val;
+};
+
+static struct rt5616_init_reg init_list[] = {
+    {RT5616_D_MISC      , 0x0011},
+    {RT5616_PRIV_INDEX  , 0x003d},
+    {RT5616_PRIV_DATA   , 0x3e00},
+    {RT5616_PRIV_INDEX  , 0x0025}, //PR-25 = 6110
+    {RT5616_PRIV_DATA   , 0x6110},
+    /*Playback*/
+    {RT5616_STO_DAC_MIXER   , 0x1212},
+    /*HP*/
+    //{RT5616_HPO_MIXER , 0x2000}, //DAC -> HPO
+    {RT5616_HPO_MIXER   , 0x4000}, //HPVOL -> HPO
+    {RT5616_HP_VOL      , 0x8888}, //unmute HPVOL
+    {RT5616_OUT_L3_MIXER    , 0x0378}, //DACL1 -> OUTMIXL
+    {RT5616_OUT_R3_MIXER    , 0x0378}, //DACR1 -> OUTMIXR
+    /*LOUT*/
+    {RT5616_LOUT_MIXER  , 0xc000}, //3000
+    {RT5616_LOUT_CTRL1      , 0x8e8e}, //9f9f
+    {RT5616_LOUT_CTRL2      , 0x0000}, //L/R output
+    /*Capture*/
+    //{RT5616_REC_L2_MIXER  , 0x006d}, //MIC1 -> RECMIXL
+    //{RT5616_REC_R2_MIXER  , 0x006d}, //MIC1 -> RECMIXR
+    {RT5616_REC_L2_MIXER    , 0x006b}, //MIC2 -> RECMIXL
+    {RT5616_REC_R2_MIXER    , 0x006b}, //MIC2 -> RECMIXR
+    {RT5616_ADC_DIG_VOL , 0xafaf}, //mute adc for pop noise
+    /*MIC*/
+    {RT5616_STO1_ADC_MIXER  , 0x3802},
+    {RT5616_IN1_IN2       , 0x4400}, //35db
+    {RT5616_ADC_DIG_VOL     , 0xbfbf},
+    //{RT5616_ALC_1      , 0xe206},
+    {RT5616_ALC_1      , 0xe2a6},
+    {RT5616_ALC_2      , 0x1f00},
+    //{RT5616_ALC_3      , 0x0100},
+    {RT5616_ALC_3      , 0x0172},
+};
+#define RT5616_INIT_REG_LEN ARRAY_SIZE(init_list)
+
+static int rt5616_reg_init(struct snd_soc_codec *codec)
+{
+    int i;
+
+    for (i = 0; i < RT5616_INIT_REG_LEN; i++)
+        snd_soc_write(codec, init_list[i].reg, init_list[i].val);
+
+    return 0;
+}
+
+static int rt5616_index_sync(struct snd_soc_codec *codec)
+{
+    int i;
+
+    for (i = 0; i < RT5616_INIT_REG_LEN; i++)
+        if (RT5616_PRIV_INDEX == init_list[i].reg ||
+            RT5616_PRIV_DATA == init_list[i].reg)
+            snd_soc_write(codec, init_list[i].reg,
+                    init_list[i].val);
+    return 0;
+}
+
+static const u16 rt5616_reg[RT5616_DEVICE_ID + 1] = {
+    [RT5616_RESET] = 0x0020,
+    [RT5616_HP_VOL] = 0xc8c8,
+    [RT5616_LOUT_CTRL1] = 0xc8c8,
+    [RT5616_INL1_INR1_VOL] = 0x0808,
+    [RT5616_DAC1_DIG_VOL] = 0xafaf,
+    [RT5616_ADC_DIG_VOL] = 0x2f2f,
+    [RT5616_STO1_ADC_MIXER] = 0x7860,
+    [RT5616_AD_DA_MIXER] = 0x8080,
+    [RT5616_STO_DAC_MIXER] = 0x5252,
+    [RT5616_REC_L2_MIXER] = 0x006f,
+    [RT5616_REC_R2_MIXER] = 0x006f,
+    [RT5616_HPO_MIXER] = 0x6000,
+    [RT5616_OUT_L3_MIXER] = 0x0279,
+    [RT5616_OUT_R3_MIXER] = 0x0279,
+    [RT5616_LOUT_MIXER] = 0xf000,
+    [RT5616_PWR_ANLG1] = 0x00c0,
+    [RT5616_I2S1_SDP] = 0x8000,
+    [RT5616_ADDA_CLK1] = 0x1104,
+    [RT5616_ADDA_CLK2] = 0x0c00,
+    [RT5616_HP_OVCD] = 0x0600,
+    [RT5616_DEPOP_M1] = 0x0004,
+    [RT5616_DEPOP_M2] = 0x1100,
+    [RT5616_MICBIAS] = 0xa000,  //micbias = 0.75*micvdd
+    [RT5616_A_JD_CTL1] = 0x0200,
+    [RT5616_EQ_CTRL1] = 0x2080,
+    [RT5616_ALC_1] = 0x2206,
+    [RT5616_ALC_2] = 0x1f00,
+    [RT5616_GPIO_CTRL1] = 0x0400,
+    [RT5616_BASE_BACK] = 0x0013,
+    [RT5616_MP3_PLUS1] = 0x0680,
+    [RT5616_MP3_PLUS2] = 0x1c17,
+    [RT5616_ADJ_HPF_CTRL1] = 0xb320,
+    [RT5616_SV_ZCD1] = 0x0809,
+    [RT5616_D_MISC] = 0x0010,
+    [RT5616_VENDOR_ID] = 0x10ec,
+    [RT5616_DEVICE_ID] = 0x6281,
+};
+
+static int rt5616_reset(struct snd_soc_codec *codec)
+{
+    return snd_soc_write(codec, RT5616_RESET, 0);
+}
+
+/**
+ * rt5616_index_write - Write private register.
+ * @codec: SoC audio codec device.
+ * @reg: Private register index.
+ * @value: Private register Data.
+ *
+ * Modify private register for advanced setting. It can be written through
+ * private index (0x6a) and data (0x6c) register.
+ *
+ * Returns 0 for success or negative error code.
+ */
+static int rt5616_index_write(struct snd_soc_codec *codec,
+        unsigned int reg, unsigned int value)
+{
+    int ret;
+
+    ret = snd_soc_write(codec, RT5616_PRIV_INDEX, reg);
+    if (ret < 0) {
+        dev_err(codec->dev, "Failed to set private addr: %d\n", ret);
+        goto err;
+    }
+    ret = snd_soc_write(codec, RT5616_PRIV_DATA, value);
+    if (ret < 0) {
+        dev_err(codec->dev, "Failed to set private value: %d\n", ret);
+        goto err;
+    }
+    return 0;
+
+err:
+    return ret;
+}
+
+/**
+ * rt5616_index_read - Read private register.
+ * @codec: SoC audio codec device.
+ * @reg: Private register index.
+ *
+ * Read advanced setting from private register. It can be read through
+ * private index (0x6a) and data (0x6c) register.
+ *
+ * Returns private register value or negative error code.
+ */
+static unsigned int rt5616_index_read(
+    struct snd_soc_codec *codec, unsigned int reg)
+{
+    int ret;
+
+    ret = snd_soc_write(codec, RT5616_PRIV_INDEX, reg);
+    if (ret < 0) {
+        dev_err(codec->dev, "Failed to set private addr: %d\n", ret);
+        return ret;
+    }
+    return snd_soc_read(codec, RT5616_PRIV_DATA);
+}
+
+/**
+ * rt5616_index_update_bits - update private register bits
+ * @codec: audio codec
+ * @reg: Private register index.
+ * @mask: register mask
+ * @value: new value
+ *
+ * Writes new register value.
+ *
+ * Returns 1 for change, 0 for no change, or negative error code.
+ */
+static int rt5616_index_update_bits(struct snd_soc_codec *codec,
+    unsigned int reg, unsigned int mask, unsigned int value)
+{
+    unsigned int old, new;
+    int change, ret;
+
+    ret = rt5616_index_read(codec, reg);
+    if (ret < 0) {
+        dev_err(codec->dev, "Failed to read private reg: %d\n", ret);
+        goto err;
+    }
+
+    old = ret;
+    new = (old & ~mask) | (value & mask);
+    change = old != new;
+    if (change) {
+        ret = rt5616_index_write(codec, reg, new);
+        if (ret < 0) {
+            dev_err(codec->dev,
+                "Failed to write private reg: %d\n", ret);
+            goto err;
+        }
+    }
+    return change;
+
+err:
+    return ret;
+}
+
+static int rt5616_volatile_register(
+    struct snd_soc_codec *codec, unsigned int reg)
+{
+    switch (reg) {
+    case RT5616_RESET:
+    case RT5616_PRIV_DATA:
+    case RT5616_EQ_CTRL1:
+    case RT5616_ALC_1:
+    case RT5616_IRQ_CTRL2:
+    case RT5616_INT_IRQ_ST:
+    case RT5616_PGM_REG_ARR1:
+    case RT5616_PGM_REG_ARR3:
+    case RT5616_VENDOR_ID:
+    case RT5616_DEVICE_ID:
+        return 1;
+    default:
+        return 0;
+    }
+}
+
+static int rt5616_readable_register(
+    struct snd_soc_codec *codec, unsigned int reg)
+{
+    switch (reg) {
+    case RT5616_RESET:
+    case RT5616_VERSION_ID:
+    case RT5616_VENDOR_ID:
+    case RT5616_DEVICE_ID:
+    case RT5616_HP_VOL:
+    case RT5616_LOUT_CTRL1:
+    case RT5616_LOUT_CTRL2:
+    case RT5616_IN1_IN2:
+    case RT5616_INL1_INR1_VOL:
+    case RT5616_DAC1_DIG_VOL:
+    case RT5616_ADC_DIG_VOL:
+    case RT5616_ADC_BST_VOL:
+    case RT5616_STO1_ADC_MIXER:
+    case RT5616_AD_DA_MIXER:
+    case RT5616_STO_DAC_MIXER:
+    case RT5616_REC_L1_MIXER:
+    case RT5616_REC_L2_MIXER:
+    case RT5616_REC_R1_MIXER:
+    case RT5616_REC_R2_MIXER:
+    case RT5616_HPO_MIXER:
+    case RT5616_OUT_L1_MIXER:
+    case RT5616_OUT_L2_MIXER:
+    case RT5616_OUT_L3_MIXER:
+    case RT5616_OUT_R1_MIXER:
+    case RT5616_OUT_R2_MIXER:
+    case RT5616_OUT_R3_MIXER:
+    case RT5616_LOUT_MIXER:
+    case RT5616_PWR_DIG1:
+    case RT5616_PWR_DIG2:
+    case RT5616_PWR_ANLG1:
+    case RT5616_PWR_ANLG2:
+    case RT5616_PWR_MIXER:
+    case RT5616_PWR_VOL:
+    case RT5616_PRIV_INDEX:
+    case RT5616_PRIV_DATA:
+    case RT5616_I2S1_SDP:
+    case RT5616_ADDA_CLK1:
+    case RT5616_ADDA_CLK2:
+    case RT5616_GLB_CLK:
+    case RT5616_PLL_CTRL1:
+    case RT5616_PLL_CTRL2:
+    case RT5616_HP_OVCD:
+    case RT5616_DEPOP_M1:
+    case RT5616_DEPOP_M2:
+    case RT5616_DEPOP_M3:
+    case RT5616_CHARGE_PUMP:
+    case RT5616_PV_DET_SPK_G:
+    case RT5616_MICBIAS:
+    case RT5616_A_JD_CTL1:
+    case RT5616_A_JD_CTL2:
+    case RT5616_EQ_CTRL1:
+    case RT5616_EQ_CTRL2:
+    case RT5616_WIND_FILTER :
+    case RT5616_ALC_1:
+    case RT5616_ALC_2:
+    case RT5616_ALC_3:
+    case RT5616_SVOL_ZC:
+    case RT5616_JD_CTRL1:
+    case RT5616_JD_CTRL2:
+    case RT5616_IRQ_CTRL1:
+    case RT5616_IRQ_CTRL2:
+    case RT5616_INT_IRQ_ST:
+    case RT5616_GPIO_CTRL1:
+    case RT5616_GPIO_CTRL2:
+    case RT5616_GPIO_CTRL3:
+    case RT5616_PGM_REG_ARR1:
+    case RT5616_PGM_REG_ARR2:
+    case RT5616_PGM_REG_ARR3:
+    case RT5616_PGM_REG_ARR4:
+    case RT5616_PGM_REG_ARR5:
+    case RT5616_SCB_FUNC:
+    case RT5616_SCB_CTRL:
+    case RT5616_BASE_BACK:
+    case RT5616_MP3_PLUS1:
+    case RT5616_MP3_PLUS2:
+    case RT5616_ADJ_HPF_CTRL1:
+    case RT5616_ADJ_HPF_CTRL2:
+    case RT5616_HP_CALIB_AMP_DET:
+    case RT5616_HP_CALIB2:
+    case RT5616_SV_ZCD1:
+    case RT5616_SV_ZCD2:
+    case RT5616_D_MISC:
+    case RT5616_DUMMY2:
+    case RT5616_DUMMY3:
+        return 1;
+    default:
+        return 0;
+    }
+}
+
+/**
+ * rt5616_headset_detect - Detect headset.
+ * @codec: SoC audio codec device.
+ * @jack_insert: Jack insert or not.
+ *
+ * Detect whether is headset or not when jack inserted.
+ *
+ * Returns detect status.
+ */
+ /*
+int rt5616_headset_detect(struct snd_soc_codec *codec, int jack_insert)
+{
+    int jack_type;
+    int sclk_src;
+
+    if(jack_insert) {
+        if (SND_SOC_BIAS_OFF == codec->dapm.bias_level) {
+            snd_soc_write(codec, RT5616_PWR_ANLG1, 0x2004);
+            snd_soc_write(codec, RT5616_MICBIAS, 0x3830);
+            snd_soc_write(codec, RT5616_DUMMY1 , 0x3701);
+        }
+        sclk_src = snd_soc_read(codec, RT5616_GLB_CLK) &
+            RT5616_SCLK_SRC_MASK;
+        snd_soc_update_bits(codec, RT5616_GLB_CLK,
+            RT5616_SCLK_SRC_MASK, 0x3 << RT5616_SCLK_SRC_SFT);
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+            RT5616_PWR_LDO, RT5616_PWR_LDO);
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG2,
+            RT5616_PWR_MB1, RT5616_PWR_MB1);
+        snd_soc_update_bits(codec, RT5616_MICBIAS,
+            RT5616_MIC1_OVCD_MASK | RT5616_MIC1_OVTH_MASK |
+            RT5616_PWR_CLK25M_MASK | RT5616_PWR_MB_MASK,
+            RT5616_MIC1_OVCD_EN | RT5616_MIC1_OVTH_600UA |
+            RT5616_PWR_MB_PU | RT5616_PWR_CLK25M_PU);
+        snd_soc_update_bits(codec, RT5616_DUMMY1,
+            0x1, 0x1);
+        msleep(100);
+        if (snd_soc_read(codec, RT5616_IRQ_CTRL2) & 0x8)
+            jack_type = RT5616_HEADPHO_DET;
+        else
+            jack_type = RT5616_HEADSET_DET;
+        snd_soc_update_bits(codec, RT5616_IRQ_CTRL2,
+            RT5616_MB1_OC_CLR, 0);
+        snd_soc_update_bits(codec, RT5616_GLB_CLK,
+            RT5616_SCLK_SRC_MASK, sclk_src);
+    } else {
+        snd_soc_update_bits(codec, RT5616_MICBIAS,
+            RT5616_MIC1_OVCD_MASK,
+            RT5616_MIC1_OVCD_DIS);
+
+        jack_type = RT5616_NO_JACK;
+    }
+
+    return jack_type;
+}
+EXPORT_SYMBOL(rt5616_headset_detect);
+*/
+
+static const DECLARE_TLV_DB_SCALE(out_vol_tlv, -4650, 150, 0);
+static const DECLARE_TLV_DB_SCALE(dac_vol_tlv, -65625, 375, 0);
+static const DECLARE_TLV_DB_SCALE(in_vol_tlv, -3450, 150, 0);
+static const DECLARE_TLV_DB_SCALE(adc_vol_tlv, -17625, 375, 0);
+static const DECLARE_TLV_DB_SCALE(adc_bst_tlv, 0, 1200, 0);
+
+/* {0, +20, +24, +30, +35, +40, +44, +50, +52} dB */
+static unsigned int bst_tlv[] = {
+    TLV_DB_RANGE_HEAD(7),
+    0, 0, TLV_DB_SCALE_ITEM(0, 0, 0),
+    1, 1, TLV_DB_SCALE_ITEM(2000, 0, 0),
+    2, 2, TLV_DB_SCALE_ITEM(2400, 0, 0),
+    3, 5, TLV_DB_SCALE_ITEM(3000, 500, 0),
+    6, 6, TLV_DB_SCALE_ITEM(4400, 0, 0),
+    7, 7, TLV_DB_SCALE_ITEM(5000, 0, 0),
+    8, 8, TLV_DB_SCALE_ITEM(5200, 0, 0),
+};
+
+/* IN1/IN2 Input Type */
+static const char *rt5616_input_mode[] = {
+    "Single ended", "Differential"};
+
+static const SOC_ENUM_SINGLE_DECL(
+    rt5616_in1_mode_enum, RT5616_IN1_IN2,
+    RT5616_IN_SFT1, rt5616_input_mode);
+
+static const SOC_ENUM_SINGLE_DECL(
+    rt5616_in2_mode_enum, RT5616_IN1_IN2,
+    RT5616_IN_SFT2, rt5616_input_mode);
+
+
+static int rt5616_vol_rescale_get(struct snd_kcontrol *kcontrol,
+        struct snd_ctl_elem_value *ucontrol)
+{
+    struct soc_mixer_control *mc =
+        (struct soc_mixer_control *)kcontrol->private_value;
+    struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+    unsigned int val = snd_soc_read(codec, mc->reg);
+
+    ucontrol->value.integer.value[0] = RT5616_VOL_RSCL_MAX -
+        ((val & RT5616_L_VOL_MASK) >> mc->shift);
+    ucontrol->value.integer.value[1] = RT5616_VOL_RSCL_MAX -
+        (val & RT5616_R_VOL_MASK);
+
+    return 0;
+}
+
+static int rt5616_vol_rescale_put(struct snd_kcontrol *kcontrol,
+        struct snd_ctl_elem_value *ucontrol)
+{
+    struct soc_mixer_control *mc =
+        (struct soc_mixer_control *)kcontrol->private_value;
+    struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
+    unsigned int val, val2;
+
+    val = RT5616_VOL_RSCL_MAX - ucontrol->value.integer.value[0];
+    val2 = RT5616_VOL_RSCL_MAX - ucontrol->value.integer.value[1];
+    return snd_soc_update_bits_locked(codec, mc->reg, RT5616_L_VOL_MASK |
+            RT5616_R_VOL_MASK, val << mc->shift | val2);
+}
+
+
+static const struct snd_kcontrol_new rt5616_snd_controls[] = {
+    /* Headphone Output Volume */
+    SOC_DOUBLE("HP Playback Switch", RT5616_HP_VOL,
+        RT5616_L_MUTE_SFT, RT5616_R_MUTE_SFT, 1, 1),
+    SOC_DOUBLE_EXT_TLV("HP Playback Volume", RT5616_HP_VOL,
+        RT5616_L_VOL_SFT, RT5616_R_VOL_SFT, RT5616_VOL_RSCL_RANGE, 0,
+        rt5616_vol_rescale_get, rt5616_vol_rescale_put, out_vol_tlv),
+    /* OUTPUT Control */
+    SOC_DOUBLE("OUT Playback Switch", RT5616_LOUT_CTRL1,
+        RT5616_L_MUTE_SFT, RT5616_R_MUTE_SFT, 1, 1),
+    SOC_DOUBLE("OUT Channel Switch", RT5616_LOUT_CTRL1,
+        RT5616_VOL_L_SFT, RT5616_VOL_R_SFT, 1, 1),
+    SOC_DOUBLE_TLV("OUT Playback Volume", RT5616_LOUT_CTRL1,
+        RT5616_L_VOL_SFT, RT5616_R_VOL_SFT, 39, 1, out_vol_tlv),
+
+    /* DAC Digital Volume */
+    SOC_DOUBLE_TLV("DAC1 Playback Volume", RT5616_DAC1_DIG_VOL,
+            RT5616_L_VOL_SFT, RT5616_R_VOL_SFT,
+            175, 0, dac_vol_tlv),
+    /* IN1/IN2 Control */
+    SOC_ENUM("IN1 Mode Control",  rt5616_in1_mode_enum),
+    SOC_SINGLE_TLV("IN1 Boost", RT5616_IN1_IN2,
+        RT5616_BST_SFT1, 8, 0, bst_tlv),
+    SOC_ENUM("IN2 Mode Control", rt5616_in2_mode_enum),
+    SOC_SINGLE_TLV("IN2 Boost", RT5616_IN1_IN2,
+        RT5616_BST_SFT2, 8, 0, bst_tlv),
+    /* INL/INR Volume Control */
+    SOC_DOUBLE_TLV("IN Capture Volume", RT5616_INL1_INR1_VOL,
+            RT5616_INL_VOL_SFT, RT5616_INR_VOL_SFT,
+            31, 1, in_vol_tlv),
+    /* ADC Digital Volume Control */
+    SOC_DOUBLE("ADC Capture Switch", RT5616_ADC_DIG_VOL,
+        RT5616_L_MUTE_SFT, RT5616_R_MUTE_SFT, 1, 1),
+    SOC_DOUBLE_TLV("ADC Capture Volume", RT5616_ADC_DIG_VOL,
+            RT5616_L_VOL_SFT, RT5616_R_VOL_SFT,
+            127, 0, adc_vol_tlv),
+
+    /* ADC Boost Volume Control */
+    SOC_DOUBLE_TLV("ADC Boost Gain", RT5616_ADC_BST_VOL,
+            RT5616_ADC_L_BST_SFT, RT5616_ADC_R_BST_SFT,
+            3, 0, adc_bst_tlv),
+};
+
+static int check_sysclk1_source(struct snd_soc_dapm_widget *source,
+             struct snd_soc_dapm_widget *sink)
+{
+    unsigned int val;
+
+    val = snd_soc_read(source->codec, RT5616_GLB_CLK);
+    val &= RT5616_SCLK_SRC_MASK;
+    if (val == RT5616_SCLK_SRC_PLL1)
+        return 1;
+    else
+        return 0;
+}
+
+/* Digital Mixer */
+static const struct snd_kcontrol_new rt5616_sto1_adc_l_mix[] = {
+    SOC_DAPM_SINGLE("ADC1 Switch", RT5616_STO1_ADC_MIXER,
+            RT5616_M_STO1_ADC_L1_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_sto1_adc_r_mix[] = {
+    SOC_DAPM_SINGLE("ADC1 Switch", RT5616_STO1_ADC_MIXER,
+            RT5616_M_STO1_ADC_R1_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_dac_l_mix[] = {
+    SOC_DAPM_SINGLE("Stereo ADC Switch", RT5616_AD_DA_MIXER,
+            RT5616_M_ADCMIX_L_SFT, 1, 1),
+    SOC_DAPM_SINGLE("INF1 Switch", RT5616_AD_DA_MIXER,
+            RT5616_M_IF1_DAC_L_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_dac_r_mix[] = {
+    SOC_DAPM_SINGLE("Stereo ADC Switch", RT5616_AD_DA_MIXER,
+            RT5616_M_ADCMIX_R_SFT, 1, 1),
+    SOC_DAPM_SINGLE("INF1 Switch", RT5616_AD_DA_MIXER,
+            RT5616_M_IF1_DAC_R_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_sto_dac_l_mix[] = {
+    SOC_DAPM_SINGLE("DAC L1 Switch", RT5616_STO_DAC_MIXER,
+            RT5616_M_DAC_L1_MIXL_SFT, 1, 1),
+    SOC_DAPM_SINGLE("DAC R1 Switch", RT5616_STO_DAC_MIXER,
+            RT5616_M_DAC_R1_MIXL_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_sto_dac_r_mix[] = {
+    SOC_DAPM_SINGLE("DAC R1 Switch", RT5616_STO_DAC_MIXER,
+            RT5616_M_DAC_R1_MIXR_SFT, 1, 1),
+    SOC_DAPM_SINGLE("DAC L1 Switch", RT5616_STO_DAC_MIXER,
+            RT5616_M_DAC_L1_MIXR_SFT, 1, 1),
+};
+
+/* Analog Input Mixer */
+static const struct snd_kcontrol_new rt5616_rec_l_mix[] = {
+    SOC_DAPM_SINGLE("INL1 Switch", RT5616_REC_L2_MIXER,
+            RT5616_M_IN1_L_RM_L_SFT, 1, 1),
+    SOC_DAPM_SINGLE("BST2 Switch", RT5616_REC_L2_MIXER,
+            RT5616_M_BST2_RM_L_SFT, 1, 1),
+    SOC_DAPM_SINGLE("BST1 Switch", RT5616_REC_L2_MIXER,
+            RT5616_M_BST1_RM_L_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_rec_r_mix[] = {
+    SOC_DAPM_SINGLE("INR1 Switch", RT5616_REC_R2_MIXER,
+            RT5616_M_IN1_R_RM_R_SFT, 1, 1),
+    SOC_DAPM_SINGLE("BST2 Switch", RT5616_REC_R2_MIXER,
+            RT5616_M_BST2_RM_R_SFT, 1, 1),
+    SOC_DAPM_SINGLE("BST1 Switch", RT5616_REC_R2_MIXER,
+            RT5616_M_BST1_RM_R_SFT, 1, 1),
+};
+
+/* Analog Output Mixer */
+
+static const struct snd_kcontrol_new rt5616_out_l_mix[] = {
+    SOC_DAPM_SINGLE("BST1 Switch", RT5616_OUT_L3_MIXER,
+            RT5616_M_BST1_OM_L_SFT, 1, 1),
+    SOC_DAPM_SINGLE("BST2 Switch", RT5616_OUT_L3_MIXER,
+            RT5616_M_BST2_OM_L_SFT, 1, 1),
+    SOC_DAPM_SINGLE("INL1 Switch", RT5616_OUT_L3_MIXER,
+            RT5616_M_IN1_L_OM_L_SFT, 1, 1),
+    SOC_DAPM_SINGLE("REC MIXL Switch", RT5616_OUT_L3_MIXER,
+            RT5616_M_RM_L_OM_L_SFT, 1, 1),
+    SOC_DAPM_SINGLE("DAC L1 Switch", RT5616_OUT_L3_MIXER,
+            RT5616_M_DAC_L1_OM_L_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_out_r_mix[] = {
+    SOC_DAPM_SINGLE("BST2 Switch", RT5616_OUT_R3_MIXER,
+            RT5616_M_BST2_OM_R_SFT, 1, 1),
+    SOC_DAPM_SINGLE("BST1 Switch", RT5616_OUT_R3_MIXER,
+            RT5616_M_BST1_OM_R_SFT, 1, 1),
+    SOC_DAPM_SINGLE("INR1 Switch", RT5616_OUT_R3_MIXER,
+            RT5616_M_IN1_R_OM_R_SFT, 1, 1),
+    SOC_DAPM_SINGLE("REC MIXR Switch", RT5616_OUT_R3_MIXER,
+            RT5616_M_RM_R_OM_R_SFT, 1, 1),
+    SOC_DAPM_SINGLE("DAC R1 Switch", RT5616_OUT_R3_MIXER,
+            RT5616_M_DAC_R1_OM_R_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_hpo_mix[] = {
+    SOC_DAPM_SINGLE("DAC1 Switch", RT5616_HPO_MIXER,
+            RT5616_M_DAC1_HM_SFT, 1, 1),
+    SOC_DAPM_SINGLE("HPVOL Switch", RT5616_HPO_MIXER,
+            RT5616_M_HPVOL_HM_SFT, 1, 1),
+};
+
+static const struct snd_kcontrol_new rt5616_lout_mix[] = {
+    SOC_DAPM_SINGLE("DAC L1 Switch", RT5616_LOUT_MIXER,
+            RT5616_M_DAC_L1_LM_SFT, 1, 1),
+    SOC_DAPM_SINGLE("DAC R1 Switch", RT5616_LOUT_MIXER,
+            RT5616_M_DAC_R1_LM_SFT, 1, 1),
+    SOC_DAPM_SINGLE("OUTVOL L Switch", RT5616_LOUT_MIXER,
+            RT5616_M_OV_L_LM_SFT, 1, 1),
+    SOC_DAPM_SINGLE("OUTVOL R Switch", RT5616_LOUT_MIXER,
+            RT5616_M_OV_R_LM_SFT, 1, 1),
+};
+
+static int rt5616_adc_event(struct snd_soc_dapm_widget *w,
+    struct snd_kcontrol *kcontrol, int event)
+{
+    printk(KERN_INFO"enter %s : event=0x%x\n",__func__,event);
+    struct snd_soc_codec *codec = w->codec;
+    unsigned int val, mask;
+    
+    switch (event) {
+    case SND_SOC_DAPM_POST_PMU:
+        msleep(20);   // mute po sound in record begin
+        snd_soc_update_bits(codec, RT5616_ADC_DIG_VOL, RT5616_L_MUTE | RT5616_R_MUTE, 0);
+        break;
+
+    case SND_SOC_DAPM_POST_PMD:
+        snd_soc_update_bits(codec, RT5616_ADC_DIG_VOL, RT5616_L_MUTE | RT5616_R_MUTE, RT5616_L_MUTE | RT5616_R_MUTE);
+        break;
+
+    default:
+        return 0;
+    }
+
+    return 0;
+}
+
+void hp_amp_power(struct snd_soc_codec *codec, int on)
+{
+    static int hp_amp_power_count;
+
+    if(on) {
+        if(hp_amp_power_count <= 0) {
+            /* depop parameters */
+            snd_soc_update_bits(codec, RT5616_DEPOP_M2,
+                RT5616_DEPOP_MASK, RT5616_DEPOP_MAN);
+            snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+                RT5616_HP_CP_MASK | RT5616_HP_SG_MASK | RT5616_HP_CB_MASK,
+                RT5616_HP_CP_PU | RT5616_HP_SG_DIS | RT5616_HP_CB_PU);
+            rt5616_index_write(codec, RT5616_HP_DCC_INT1, 0x9f00);
+            /* headphone amp power on */
+            snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+                RT5616_PWR_FV1 | RT5616_PWR_FV2 , 0);
+            
+            snd_soc_update_bits(codec, RT5616_PWR_VOL,
+                RT5616_PWR_HV_L | RT5616_PWR_HV_R,
+                RT5616_PWR_HV_L | RT5616_PWR_HV_R);
+            snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+                RT5616_PWR_HP_L | RT5616_PWR_HP_R | RT5616_PWR_HA,
+                RT5616_PWR_HP_L | RT5616_PWR_HP_R | RT5616_PWR_HA);
+            msleep(50);
+            snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+                RT5616_PWR_FV1 | RT5616_PWR_FV2,
+                RT5616_PWR_FV1 | RT5616_PWR_FV2);
+            snd_soc_update_bits(codec, RT5616_CHARGE_PUMP,
+                RT5616_PM_HP_MASK, RT5616_PM_HP_HV);
+            rt5616_index_update_bits(codec, RT5616_CHOP_DAC_ADC, 0x0200, 0x0200);
+            snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+                RT5616_HP_CO_MASK | RT5616_HP_SG_MASK,
+                RT5616_HP_CO_EN | RT5616_HP_SG_EN);
+        }
+        hp_amp_power_count++;
+    } else {
+        hp_amp_power_count--;
+        if(hp_amp_power_count <= 0) {
+            rt5616_index_update_bits(codec, RT5616_CHOP_DAC_ADC, 0x0200, 0x0);
+            snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+                RT5616_HP_SG_MASK | RT5616_HP_L_SMT_MASK |
+                RT5616_HP_R_SMT_MASK, RT5616_HP_SG_DIS |
+                RT5616_HP_L_SMT_DIS | RT5616_HP_R_SMT_DIS);
+            /* headphone amp power down */
+            snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+                RT5616_SMT_TRIG_MASK | RT5616_HP_CD_PD_MASK |
+                RT5616_HP_CO_MASK | RT5616_HP_CP_MASK |
+                RT5616_HP_SG_MASK | RT5616_HP_CB_MASK,
+                RT5616_SMT_TRIG_DIS | RT5616_HP_CD_PD_EN |
+                RT5616_HP_CO_DIS | RT5616_HP_CP_PD |
+                RT5616_HP_SG_EN | RT5616_HP_CB_PD);
+            snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+                RT5616_PWR_HP_L | RT5616_PWR_HP_R | RT5616_PWR_HA,
+                0);
+        }
+    }
+}
+
+static void rt5616_pmu_depop(struct snd_soc_codec *codec)
+{
+    hp_amp_power(codec, 1);
+
+    /* headphone unmute sequence */
+    snd_soc_update_bits(codec, RT5616_DEPOP_M3,
+        RT5616_CP_FQ1_MASK | RT5616_CP_FQ2_MASK | RT5616_CP_FQ3_MASK,
+        (RT5616_CP_FQ_192_KHZ << RT5616_CP_FQ1_SFT) |
+        (RT5616_CP_FQ_12_KHZ << RT5616_CP_FQ2_SFT) |
+        (RT5616_CP_FQ_192_KHZ << RT5616_CP_FQ3_SFT));
+    rt5616_index_write(codec, RT5616_MAMP_INT_REG2, 0xfc00);
+    snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+        RT5616_SMT_TRIG_MASK, RT5616_SMT_TRIG_EN);
+    snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+        RT5616_RSTN_MASK, RT5616_RSTN_EN);
+    snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+        RT5616_RSTN_MASK | RT5616_HP_L_SMT_MASK | RT5616_HP_R_SMT_MASK,
+        RT5616_RSTN_DIS | RT5616_HP_L_SMT_EN | RT5616_HP_R_SMT_EN);
+/*  snd_soc_update_bits(codec, RT5616_HP_VOL,
+        RT5616_L_MUTE | RT5616_R_MUTE, 0);
+        */
+    msleep(100);
+    snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+        RT5616_HP_SG_MASK | RT5616_HP_L_SMT_MASK |
+        RT5616_HP_R_SMT_MASK, RT5616_HP_SG_DIS |
+        RT5616_HP_L_SMT_DIS | RT5616_HP_R_SMT_DIS);
+    msleep(20);
+	/*snd_soc_update_bits(codec, RT5616_HP_CALIB_AMP_DET,
+		RT5616_HPD_PS_MASK, RT5616_HPD_PS_EN);*/
+}
+
+static void rt5616_pmd_depop(struct snd_soc_codec *codec)
+{
+    /* headphone mute sequence */
+    snd_soc_update_bits(codec, RT5616_DEPOP_M3,
+        RT5616_CP_FQ1_MASK | RT5616_CP_FQ2_MASK | RT5616_CP_FQ3_MASK,
+        (RT5616_CP_FQ_96_KHZ << RT5616_CP_FQ1_SFT) |
+        (RT5616_CP_FQ_12_KHZ << RT5616_CP_FQ2_SFT) |
+        (RT5616_CP_FQ_96_KHZ << RT5616_CP_FQ3_SFT));
+    rt5616_index_write(codec, RT5616_MAMP_INT_REG2, 0xfc00);
+    snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+        RT5616_HP_SG_MASK, RT5616_HP_SG_EN);
+    snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+        RT5616_RSTP_MASK, RT5616_RSTP_EN);
+    snd_soc_update_bits(codec, RT5616_DEPOP_M1,
+        RT5616_RSTP_MASK | RT5616_HP_L_SMT_MASK |
+        RT5616_HP_R_SMT_MASK, RT5616_RSTP_DIS |
+        RT5616_HP_L_SMT_EN | RT5616_HP_R_SMT_EN);
+    /*snd_soc_update_bits(codec, RT5616_LOUT_CTRL1, 
+        RT5616_L_MUTE | RT5616_R_MUTE,
+        RT5616_L_MUTE | RT5616_R_MUTE);*/
+	/*snd_soc_update_bits(codec, RT5616_HP_CALIB_AMP_DET,
+		RT5616_HPD_PS_MASK, RT5616_HPD_PS_DIS);*/
+    msleep(90);
+    snd_soc_update_bits(codec, RT5616_HP_VOL,
+        RT5616_L_MUTE | RT5616_R_MUTE, RT5616_L_MUTE | RT5616_R_MUTE);
+    msleep(30);
+
+    hp_amp_power(codec, 0);
+
+}
+
+static int rt5616_hp_event(struct snd_soc_dapm_widget *w,
+    struct snd_kcontrol *kcontrol, int event)
+{
+    struct snd_soc_codec *codec = w->codec;
+
+    switch (event) {
+    case SND_SOC_DAPM_POST_PMU:
+        rt5616_pmu_depop(codec);
+        break;
+
+    case SND_SOC_DAPM_PRE_PMD:
+        rt5616_pmd_depop(codec);
+        break;
+
+    default:
+        return 0;
+    }
+
+    return 0;
+}
+
+static int rt5616_lout_event(struct snd_soc_dapm_widget *w,
+    struct snd_kcontrol *kcontrol, int event)
+{
+    printk(KERN_DEBUG"enter %s : event=0x%x \n",__func__,event);
+    struct snd_soc_codec *codec = w->codec;
+    int ret;
+    switch (event) {
+    case SND_SOC_DAPM_POST_PMU:
+        hp_amp_power(codec,1);
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+            RT5616_PWR_LM, RT5616_PWR_LM);
+        /*snd_soc_update_bits(codec, RT5616_HP_VOL,
+            RT5616_L_MUTE | RT5616_R_MUTE,
+            RT5616_L_MUTE | RT5616_R_MUTE);*/
+        /*snd_soc_update_bits(codec, RT5616_LOUT_CTRL1,
+            RT5616_L_MUTE | RT5616_R_MUTE, 0);
+            */
+        if(!spk_mute_num){
+            spk_mute_num = 1;
+            amlogic_set_value(spk_gpio_mute, 1, "mute_spk");
+            msleep(100);
+        }
+        break;
+
+    case SND_SOC_DAPM_PRE_PMD:
+        snd_soc_update_bits(codec, RT5616_LOUT_CTRL1,
+            RT5616_L_MUTE | RT5616_R_MUTE,
+            RT5616_L_MUTE | RT5616_R_MUTE);
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+            RT5616_PWR_LM, 0);
+        hp_amp_power(codec,0);
+        break;
+
+    default:
+        return 0;
+    }
+
+    return 0;
+}
+
+static int rt5616_bst1_event(struct snd_soc_dapm_widget *w,
+    struct snd_kcontrol *kcontrol, int event)
+{
+    struct snd_soc_codec *codec = w->codec;
+
+    switch (event) {
+    case SND_SOC_DAPM_POST_PMU:
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG2,
+            RT5616_PWR_BST1_OP2, RT5616_PWR_BST1_OP2);
+        break;
+
+    case SND_SOC_DAPM_PRE_PMD:
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG2,
+            RT5616_PWR_BST1_OP2, 0);
+        break;
+
+    default:
+        return 0;
+    }
+
+    return 0;
+}
+
+static int rt5616_bst2_event(struct snd_soc_dapm_widget *w,
+    struct snd_kcontrol *kcontrol, int event)
+{
+    struct snd_soc_codec *codec = w->codec;
+
+    switch (event) {
+    case SND_SOC_DAPM_POST_PMU:
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG2,
+            RT5616_PWR_BST2_OP2, RT5616_PWR_BST2_OP2);
+        break;
+
+    case SND_SOC_DAPM_PRE_PMD:
+        snd_soc_update_bits(codec, RT5616_PWR_ANLG2,
+            RT5616_PWR_BST2_OP2, 0);
+        break;
+
+    default:
+        return 0;
+    }
+
+    return 0;
+}
+
+static int mic_bias_event(struct snd_soc_dapm_widget *w,
+    struct snd_kcontrol *kcontrol, int event)
+{
+    struct snd_soc_codec *codec = w->codec;
+    unsigned int mask = 1<<w->shift;
+    snd_soc_update_bits(codec, RT5616_PWR_ANLG2, mask, mask);
+    return 0;
+}
+
+
+static const struct snd_soc_dapm_widget rt5616_dapm_widgets[] = {
+    SND_SOC_DAPM_SUPPLY("PLL1", RT5616_PWR_ANLG2,
+            RT5616_PWR_PLL_BIT, 0, NULL, 0),
+    /* Input Side */
+    /* micbias */
+    SND_SOC_DAPM_SUPPLY("LDO", RT5616_PWR_ANLG1,
+            RT5616_PWR_LDO_BIT, 0, NULL, 0),
+#ifdef POWER_ON_MICBIAS1
+//  SND_SOC_DAPM_SUPPLY("micbias1", RT5616_PWR_ANLG2,
+//          RT5616_PWR_MB1_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_SUPPLY("micbias1", SND_SOC_NOPM,
+            RT5616_PWR_MB1_BIT, 0, mic_bias_event, 0),
+  
+#else
+    SND_SOC_DAPM_MICBIAS("micbias1", RT5616_PWR_ANLG2,
+            RT5616_PWR_MB1_BIT, 0),
+#endif
+    /* Input Lines */
+    SND_SOC_DAPM_INPUT("MIC1"),
+    SND_SOC_DAPM_INPUT("MIC2"),
+
+
+    SND_SOC_DAPM_INPUT("IN1P"),
+    SND_SOC_DAPM_INPUT("IN2P"),
+    SND_SOC_DAPM_INPUT("IN2N"),
+
+    /* Boost */
+    SND_SOC_DAPM_PGA_E("BST1", RT5616_PWR_ANLG2,
+        RT5616_PWR_BST1_BIT, 0, NULL, 0, rt5616_bst1_event,
+        SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMU),
+    SND_SOC_DAPM_PGA_E("BST2", RT5616_PWR_ANLG2,
+        RT5616_PWR_BST2_BIT, 0, NULL, 0, rt5616_bst2_event,
+        SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMU),
+    /* Input Volume */
+    SND_SOC_DAPM_PGA("INL1 VOL", RT5616_PWR_VOL,
+        RT5616_PWR_IN1_L_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("INR1 VOL", RT5616_PWR_VOL,
+        RT5616_PWR_IN1_R_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("INL2 VOL", RT5616_PWR_VOL,
+        RT5616_PWR_IN2_L_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("INR2 VOL", RT5616_PWR_VOL,
+        RT5616_PWR_IN2_R_BIT, 0, NULL, 0),
+
+    /* REC Mixer */
+    SND_SOC_DAPM_MIXER("RECMIXL", RT5616_PWR_MIXER, RT5616_PWR_RM_L_BIT, 0,
+            rt5616_rec_l_mix, ARRAY_SIZE(rt5616_rec_l_mix)),
+    SND_SOC_DAPM_MIXER("RECMIXR", RT5616_PWR_MIXER, RT5616_PWR_RM_R_BIT, 0,
+            rt5616_rec_r_mix, ARRAY_SIZE(rt5616_rec_r_mix)),
+    /* ADCs */
+    SND_SOC_DAPM_ADC_E("ADC L", NULL, RT5616_PWR_DIG1,
+        RT5616_PWR_ADC_L_BIT, 0, rt5616_adc_event,
+        SND_SOC_DAPM_POST_PMD | SND_SOC_DAPM_POST_PMU),
+    SND_SOC_DAPM_ADC_E("ADC R", NULL, RT5616_PWR_DIG1,
+        RT5616_PWR_ADC_R_BIT, 0, rt5616_adc_event,
+        SND_SOC_DAPM_POST_PMD | SND_SOC_DAPM_POST_PMU),
+
+    /* ADC Mixer */
+    SND_SOC_DAPM_SUPPLY("stereo1 filter", RT5616_PWR_DIG2,
+        RT5616_PWR_ADC_STO1_F_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_MIXER("Stereo1 ADC MIXL", SND_SOC_NOPM, 0, 0,
+        rt5616_sto1_adc_l_mix, ARRAY_SIZE(rt5616_sto1_adc_l_mix)),
+    SND_SOC_DAPM_MIXER("Stereo1 ADC MIXR", SND_SOC_NOPM, 0, 0,
+        rt5616_sto1_adc_r_mix, ARRAY_SIZE(rt5616_sto1_adc_r_mix)),
+
+    /* Digital Interface */
+    SND_SOC_DAPM_SUPPLY("I2S1", RT5616_PWR_DIG1,
+        RT5616_PWR_I2S1_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("IF1 DAC", SND_SOC_NOPM, 0, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("IF1 DAC1 L", SND_SOC_NOPM, 0, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("IF1 DAC1 R", SND_SOC_NOPM, 0, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("IF1 ADC1", SND_SOC_NOPM, 0, 0, NULL, 0),
+
+    /* Digital Interface Select */
+
+    /* Audio Interface */
+    SND_SOC_DAPM_AIF_IN("AIF1RX", "AIF1 Playback", 0, SND_SOC_NOPM, 0, 0),
+    SND_SOC_DAPM_AIF_OUT("AIF1TX", "AIF1 Capture", 0, SND_SOC_NOPM, 0, 0),
+
+    /* Audio DSP */
+    SND_SOC_DAPM_PGA("Audio DSP", SND_SOC_NOPM, 0, 0, NULL, 0),
+
+    /* Output Side */
+    /* DAC mixer before sound effect  */
+    SND_SOC_DAPM_MIXER("DAC MIXL", SND_SOC_NOPM, 0, 0,
+        rt5616_dac_l_mix, ARRAY_SIZE(rt5616_dac_l_mix)),
+    SND_SOC_DAPM_MIXER("DAC MIXR", SND_SOC_NOPM, 0, 0,
+        rt5616_dac_r_mix, ARRAY_SIZE(rt5616_dac_r_mix)),
+
+    SND_SOC_DAPM_SUPPLY("Stero1 DAC Power", RT5616_PWR_DIG2,
+            RT5616_PWR_DAC_STO1_F_BIT, 0, NULL, 0),
+
+    /* DAC Mixer */
+    SND_SOC_DAPM_MIXER("Stereo DAC MIXL", SND_SOC_NOPM, 0, 0,
+        rt5616_sto_dac_l_mix, ARRAY_SIZE(rt5616_sto_dac_l_mix)),
+    SND_SOC_DAPM_MIXER("Stereo DAC MIXR", SND_SOC_NOPM, 0, 0,
+        rt5616_sto_dac_r_mix, ARRAY_SIZE(rt5616_sto_dac_r_mix)),
+
+    /* DACs */
+    SND_SOC_DAPM_DAC("DAC L1", NULL, RT5616_PWR_DIG1,
+            RT5616_PWR_DAC_L1_BIT, 0),
+    SND_SOC_DAPM_DAC("DAC R1", NULL, RT5616_PWR_DIG1,
+            RT5616_PWR_DAC_R1_BIT, 0),
+    /* OUT Mixer */
+    SND_SOC_DAPM_MIXER("OUT MIXL", RT5616_PWR_MIXER, RT5616_PWR_OM_L_BIT,
+        0, rt5616_out_l_mix, ARRAY_SIZE(rt5616_out_l_mix)),
+    SND_SOC_DAPM_MIXER("OUT MIXR", RT5616_PWR_MIXER, RT5616_PWR_OM_R_BIT,
+        0, rt5616_out_r_mix, ARRAY_SIZE(rt5616_out_r_mix)),
+    /* Ouput Volume */
+    SND_SOC_DAPM_PGA("OUTVOL L", RT5616_PWR_VOL,
+        RT5616_PWR_OV_L_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("OUTVOL R", RT5616_PWR_VOL,
+        RT5616_PWR_OV_R_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("HPOVOL L", RT5616_PWR_VOL,
+        RT5616_PWR_HV_L_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("HPOVOL R", RT5616_PWR_VOL,
+        RT5616_PWR_HV_R_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("DAC 1", SND_SOC_NOPM,
+        0, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("DAC 2", SND_SOC_NOPM,
+        0, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("HPOVOL", SND_SOC_NOPM,
+        0, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("INL1", RT5616_PWR_VOL,
+        RT5616_PWR_IN1_L_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("INR1", RT5616_PWR_VOL,
+        RT5616_PWR_IN1_R_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("INL2", RT5616_PWR_VOL,
+        RT5616_PWR_IN2_L_BIT, 0, NULL, 0),
+    SND_SOC_DAPM_PGA("INR2", RT5616_PWR_VOL,
+        RT5616_PWR_IN2_R_BIT, 0, NULL, 0),
+    /* HPO/LOUT/Mono Mixer */
+    SND_SOC_DAPM_MIXER("HPO MIX", SND_SOC_NOPM, 0, 0,
+        rt5616_hpo_mix, ARRAY_SIZE(rt5616_hpo_mix)),
+    SND_SOC_DAPM_MIXER("LOUT MIX", SND_SOC_NOPM, 0, 0,
+        rt5616_lout_mix, ARRAY_SIZE(rt5616_lout_mix)),
+
+    SND_SOC_DAPM_PGA_S("HP amp", 1, SND_SOC_NOPM, 0, 0,
+        rt5616_hp_event, SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMU),
+    SND_SOC_DAPM_PGA_S("LOUT amp", 1, SND_SOC_NOPM, 0, 0,
+        rt5616_lout_event, SND_SOC_DAPM_PRE_PMD | SND_SOC_DAPM_POST_PMU),
+
+    /* Output Lines */
+    SND_SOC_DAPM_OUTPUT("HPOL"),
+    SND_SOC_DAPM_OUTPUT("HPOR"),
+    SND_SOC_DAPM_OUTPUT("LOUTL"),
+    SND_SOC_DAPM_OUTPUT("LOUTR"),
+};
+
+static const struct snd_soc_dapm_route rt5616_dapm_routes[] = {
+    {"IN1P", NULL, "LDO"},
+    {"IN2P", NULL, "LDO"},
+
+    {"IN1P", NULL, "MIC1"},
+    {"IN2P", NULL, "MIC2"},
+    {"IN2N", NULL, "MIC2"},
+
+    {"BST1", NULL, "IN1P"},
+    {"BST2", NULL, "IN2P"},
+    {"BST2", NULL, "IN2N"},
+#ifdef POWER_ON_MICBIAS1
+    {"BST1", NULL, "micbias1"},
+    {"BST2", NULL, "micbias1"},
+#endif
+
+    {"INL1 VOL", NULL, "IN2P"},
+    {"INR1 VOL", NULL, "IN2N"},
+
+    {"RECMIXL", "INL1 Switch", "INL1 VOL"},
+    {"RECMIXL", "BST2 Switch", "BST2"},
+    {"RECMIXL", "BST1 Switch", "BST1"},
+
+    {"RECMIXR", "INR1 Switch", "INR1 VOL"},
+    {"RECMIXR", "BST2 Switch", "BST2"},
+    {"RECMIXR", "BST1 Switch", "BST1"},
+
+    {"ADC L", NULL, "RECMIXL"},
+    {"ADC R", NULL, "RECMIXR"},
+
+    {"Stereo1 ADC MIXL", "ADC1 Switch", "ADC L"},
+    {"Stereo1 ADC MIXL", NULL, "stereo1 filter"},
+    {"stereo1 filter", NULL, "PLL1", check_sysclk1_source},
+
+    {"Stereo1 ADC MIXR", "ADC1 Switch", "ADC R"},
+    {"Stereo1 ADC MIXR", NULL, "stereo1 filter"},
+    {"stereo1 filter", NULL, "PLL1", check_sysclk1_source},
+
+    {"IF1 ADC1", NULL, "Stereo1 ADC MIXL"},
+    {"IF1 ADC1", NULL, "Stereo1 ADC MIXR"},
+    {"IF1 ADC1", NULL, "I2S1"},
+
+    {"AIF1TX", NULL, "IF1 ADC1"},
+
+    {"IF1 DAC", NULL, "AIF1RX"},
+    {"IF1 DAC", NULL, "I2S1"},
+
+    {"IF1 DAC1 L", NULL, "IF1 DAC"},
+    {"IF1 DAC1 R", NULL, "IF1 DAC"},
+
+    {"DAC MIXL", "Stereo ADC Switch", "Stereo1 ADC MIXL"},
+    {"DAC MIXL", "INF1 Switch", "IF1 DAC1 L"},
+    {"DAC MIXR", "Stereo ADC Switch", "Stereo1 ADC MIXR"},
+    {"DAC MIXR", "INF1 Switch", "IF1 DAC1 R"},
+
+    {"Audio DSP", NULL, "DAC MIXL"},
+    {"Audio DSP", NULL, "DAC MIXR"},
+
+    {"Stereo DAC MIXL", "DAC L1 Switch", "Audio DSP"},
+    {"Stereo DAC MIXL", "DAC R1 Switch", "DAC MIXR"},
+    {"Stereo DAC MIXL", NULL, "Stero1 DAC Power"},
+    {"Stereo DAC MIXR", "DAC R1 Switch", "Audio DSP"},
+    {"Stereo DAC MIXR", "DAC L1 Switch", "DAC MIXL"},
+    {"Stereo DAC MIXR", NULL, "Stero1 DAC Power"},
+
+    {"DAC L1", NULL, "Stereo DAC MIXL"},
+    {"DAC L1", NULL, "PLL1", check_sysclk1_source},
+    {"DAC R1", NULL, "Stereo DAC MIXR"},
+    {"DAC R1", NULL, "PLL1", check_sysclk1_source},
+
+    {"OUT MIXL", "BST1 Switch", "BST1"},
+    {"OUT MIXL", "BST2 Switch", "BST2"},
+    {"OUT MIXL", "INL1 Switch", "INL1 VOL"},
+    {"OUT MIXL", "REC MIXL Switch", "RECMIXL"},
+    {"OUT MIXL", "DAC L1 Switch", "DAC L1"},
+
+    {"OUT MIXR", "BST2 Switch", "BST2"},
+    {"OUT MIXR", "BST1 Switch", "BST1"},
+    {"OUT MIXR", "INR1 Switch", "INR1 VOL"},
+    {"OUT MIXR", "REC MIXR Switch", "RECMIXR"},
+    {"OUT MIXR", "DAC R1 Switch", "DAC R1"},
+
+    {"HPOVOL L", NULL, "OUT MIXL"},
+    {"HPOVOL R", NULL, "OUT MIXR"},
+    {"OUTVOL L", NULL, "OUT MIXL"},
+    {"OUTVOL R", NULL, "OUT MIXR"},
+
+    {"DAC 1", NULL, "DAC L1"},
+    {"DAC 1", NULL, "DAC R1"},
+    {"HPOVOL", NULL, "HPOVOL L"},
+    {"HPOVOL", NULL, "HPOVOL R"},
+    {"HPO MIX", "DAC1 Switch", "DAC 1"},
+    {"HPO MIX", "HPVOL Switch", "HPOVOL"},
+
+    {"LOUT MIX", "DAC L1 Switch", "DAC L1"},
+    {"LOUT MIX", "DAC R1 Switch", "DAC R1"},
+    {"LOUT MIX", "OUTVOL L Switch", "OUTVOL L"},
+    {"LOUT MIX", "OUTVOL R Switch", "OUTVOL R"},
+
+    {"HP amp", NULL, "HPO MIX"},
+    {"HPOL", NULL, "HP amp"},
+    {"HPOR", NULL, "HP amp"},
+
+    {"LOUT amp", NULL, "LOUT MIX"},
+    {"LOUTL", NULL, "LOUT amp"},
+    {"LOUTR", NULL, "LOUT amp"},
+
+};
+
+static int rt5616_codec_digital_mute(struct snd_soc_dai *dai, int mute)
+{
+    int ret;
+    printk(KERN_INFO"rt5616_codec_digital_mute : mute=%d\n",mute);
+    unsigned int reg_value;
+    struct snd_soc_codec *codec = dai->codec;
+    
+    if(mute){
+        msleep(20);
+        snd_soc_update_bits(codec, RT5616_LOUT_CTRL1,
+            RT5616_L_MUTE | RT5616_R_MUTE,
+            RT5616_L_MUTE | RT5616_R_MUTE);
+        snd_soc_update_bits(codec, RT5616_HP_VOL,
+            RT5616_L_MUTE | RT5616_R_MUTE,
+            RT5616_L_MUTE | RT5616_R_MUTE);
+    }else{
+        msleep(50);
+        snd_soc_update_bits(codec, RT5616_LOUT_CTRL1,
+            RT5616_L_MUTE | RT5616_R_MUTE, 0);
+        snd_soc_update_bits(codec, RT5616_HP_VOL,
+            RT5616_L_MUTE | RT5616_R_MUTE, 0);
+    }
+    
+    return 0;
+}
+
+
+static int get_clk_info(int sclk, int rate)
+{
+    int i, pd[] = {1, 2, 3, 4, 6, 8, 12, 16};
+
+    if (sclk <= 0 || rate <= 0)
+        return -EINVAL;
+
+    rate = rate << 8;
+    for (i = 0; i < ARRAY_SIZE(pd); i++)
+        if (sclk == rate * pd[i])
+            return i;
+
+    return -EINVAL;
+}
+
+static int rt5616_hw_params(struct snd_pcm_substream *substream,
+    struct snd_pcm_hw_params *params, struct snd_soc_dai *dai)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_codec *codec = rtd->codec;
+    struct rt5616_priv *rt5616 = snd_soc_codec_get_drvdata(codec);
+    unsigned int val_len = 0, val_clk, mask_clk;
+    int pre_div, bclk_ms, frame_size;
+
+    rt5616->lrck[dai->id] = params_rate(params);
+    pre_div = get_clk_info(rt5616->sysclk, rt5616->lrck[dai->id]);
+
+    if (pre_div < 0) {
+        dev_err(codec->dev, "Unsupported clock setting\n");
+        return -EINVAL;
+    }
+    frame_size = snd_soc_params_to_frame_size(params);
+    if (frame_size < 0) {
+        dev_err(codec->dev, "Unsupported frame size: %d\n", frame_size);
+        return -EINVAL;
+    }
+    bclk_ms = frame_size > 32 ? 1 : 0;
+    rt5616->bclk[dai->id] = rt5616->lrck[dai->id] * (32 << bclk_ms);
+
+    dev_dbg(dai->dev, "bclk is %dHz and lrck is %dHz\n",
+        rt5616->bclk[dai->id], rt5616->lrck[dai->id]);
+    dev_dbg(dai->dev, "bclk_ms is %d and pre_div is %d for iis %d\n",
+                bclk_ms, pre_div, dai->id);
+
+    switch (params_format(params)) {
+    case SNDRV_PCM_FORMAT_S16_LE:
+        break;
+    case SNDRV_PCM_FORMAT_S20_3LE:
+        val_len |= RT5616_I2S_DL_20;
+        break;
+    case SNDRV_PCM_FORMAT_S24_LE:
+        val_len |= RT5616_I2S_DL_24;
+        break;
+    case SNDRV_PCM_FORMAT_S8:
+        val_len |= RT5616_I2S_DL_8;
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    mask_clk = RT5616_I2S_PD1_MASK;
+    val_clk = pre_div << RT5616_I2S_PD1_SFT;
+    snd_soc_update_bits(codec, RT5616_I2S1_SDP,
+        RT5616_I2S_DL_MASK, val_len);
+    snd_soc_update_bits(codec, RT5616_ADDA_CLK1, mask_clk, val_clk);
+
+
+    return 0;
+}
+
+static int rt5616_prepare(struct snd_pcm_substream *substream,
+                struct snd_soc_dai *dai)
+{
+    struct snd_soc_pcm_runtime *rtd = substream->private_data;
+    struct snd_soc_codec *codec = rtd->codec;
+    struct rt5616_priv *rt5616 = snd_soc_codec_get_drvdata(codec);
+
+    rt5616->aif_pu = dai->id;
+    return 0;
+}
+
+static int rt5616_set_dai_fmt(struct snd_soc_dai *dai, unsigned int fmt)
+{
+    struct snd_soc_codec *codec = dai->codec;
+    struct rt5616_priv *rt5616 = snd_soc_codec_get_drvdata(codec);
+    unsigned int reg_val = 0;
+
+    switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
+    case SND_SOC_DAIFMT_CBM_CFM:
+        rt5616->master[dai->id] = 1;
+        break;
+    case SND_SOC_DAIFMT_CBS_CFS:
+        reg_val |= RT5616_I2S_MS_S;
+        rt5616->master[dai->id] = 0;
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    switch (fmt & SND_SOC_DAIFMT_INV_MASK) {
+    case SND_SOC_DAIFMT_NB_NF:
+        break;
+    case SND_SOC_DAIFMT_IB_NF:
+        reg_val |= RT5616_I2S_BP_INV;
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    switch (fmt & SND_SOC_DAIFMT_FORMAT_MASK) {
+    case SND_SOC_DAIFMT_I2S:
+        break;
+    case SND_SOC_DAIFMT_LEFT_J:
+        reg_val |= RT5616_I2S_DF_LEFT;
+        break;
+    case SND_SOC_DAIFMT_DSP_A:
+        reg_val |= RT5616_I2S_DF_PCM_A;
+        break;
+    case SND_SOC_DAIFMT_DSP_B:
+        reg_val |= RT5616_I2S_DF_PCM_B;
+        break;
+    default:
+        return -EINVAL;
+    }
+
+    snd_soc_update_bits(codec, RT5616_I2S1_SDP,
+        RT5616_I2S_MS_MASK | RT5616_I2S_BP_MASK |
+        RT5616_I2S_DF_MASK, reg_val);
+
+
+    return 0;
+}
+
+static int rt5616_set_dai_sysclk(struct snd_soc_dai *dai,
+        int clk_id, unsigned int freq, int dir)
+{
+    struct snd_soc_codec *codec = dai->codec;
+    struct rt5616_priv *rt5616 = snd_soc_codec_get_drvdata(codec);
+    unsigned int reg_val = 0;
+
+    if (freq == rt5616->sysclk && clk_id == rt5616->sysclk_src)
+        return 0;
+
+    switch (clk_id) {
+    case RT5616_SCLK_S_MCLK:
+        reg_val |= RT5616_SCLK_SRC_MCLK;
+        break;
+    case RT5616_SCLK_S_PLL1:
+        reg_val |= RT5616_SCLK_SRC_PLL1;
+        break;
+    default:
+        dev_err(codec->dev, "Invalid clock id (%d)\n", clk_id);
+        return -EINVAL;
+    }
+    snd_soc_update_bits(codec, RT5616_GLB_CLK,
+        RT5616_SCLK_SRC_MASK, reg_val);
+    rt5616->sysclk = freq;
+    rt5616->sysclk_src = clk_id;
+
+    dev_dbg(dai->dev, "Sysclk is %dHz and clock id is %d\n", freq, clk_id);
+
+    return 0;
+}
+
+/**
+ * rt5616_pll_calc - Calcualte PLL M/N/K code.
+ * @freq_in: external clock provided to codec.
+ * @freq_out: target clock which codec works on.
+ * @pll_code: Pointer to structure with M, N, K and bypass flag.
+ *
+ * Calcualte M/N/K code to configure PLL for codec. And K is assigned to 2
+ * which make calculation more efficiently.
+ *
+ * Returns 0 for success or negative error code.
+ */
+static int rt5616_pll_calc(const unsigned int freq_in,
+    const unsigned int freq_out, struct rt5616_pll_code *pll_code)
+{
+    int max_n = RT5616_PLL_N_MAX, max_m = RT5616_PLL_M_MAX;
+    int k, n, m, red, n_t, m_t, in_t, out_t, red_t = abs(freq_out - freq_in);
+    bool bypass = false;
+
+    if (RT5616_PLL_INP_MAX < freq_in || RT5616_PLL_INP_MIN > freq_in)
+        return -EINVAL;
+
+    k=100000000/freq_out-2;
+    if(k>31)
+        k = 31;
+    for (n_t = 0; n_t <= max_n; n_t++) {
+        in_t = (freq_in >> 1) + (freq_in >> 2) * n_t;
+        if (in_t < 0)
+            continue;
+        if (in_t == freq_out) {
+            bypass = true;
+            n = n_t;
+            goto code_find;
+        }
+        red = abs(in_t - freq_out); //m bypass
+        if (red < red_t) {
+            bypass = true;
+            n = n_t;
+            m = m_t;
+            if (red == 0)
+                goto code_find;
+            red_t = red;
+        }
+        for (m_t = 0; m_t <= max_m; m_t++) {
+            out_t = in_t / (m_t + 2);
+            red = abs(out_t - freq_out);
+            if (red < red_t) {
+                bypass = false;
+                n = n_t;
+                m = m_t;
+                if (red == 0)
+                    goto code_find;
+                red_t = red;
+            }
+        }
+    }
+    pr_debug("Only get approximation about PLL\n");
+
+code_find:
+
+    pll_code->m_bp = bypass;
+    pll_code->m_code = m;
+    pll_code->n_code = n;
+    pll_code->k_code = k;
+    return 0;
+}
+
+static int rt5616_set_dai_pll(struct snd_soc_dai *dai, int pll_id, int source,
+            unsigned int freq_in, unsigned int freq_out)
+{
+    struct snd_soc_codec *codec = dai->codec;
+    struct rt5616_priv *rt5616 = snd_soc_codec_get_drvdata(codec);
+    struct rt5616_pll_code pll_code;
+    int ret;
+
+    if (source == rt5616->pll_src && freq_in == rt5616->pll_in &&
+        freq_out == rt5616->pll_out)
+        return 0;
+
+    if (!freq_in || !freq_out) {
+        dev_dbg(codec->dev, "PLL disabled\n");
+
+        rt5616->pll_in = 0;
+        rt5616->pll_out = 0;
+        snd_soc_update_bits(codec, RT5616_GLB_CLK,
+            RT5616_SCLK_SRC_MASK, RT5616_SCLK_SRC_MCLK);
+        return 0;
+    }
+
+    switch (source) {
+    case RT5616_PLL1_S_MCLK:
+        snd_soc_update_bits(codec, RT5616_GLB_CLK,
+            RT5616_PLL1_SRC_MASK, RT5616_PLL1_SRC_MCLK);
+        break;
+    case RT5616_PLL1_S_BCLK1:
+    case RT5616_PLL1_S_BCLK2:
+
+        snd_soc_update_bits(codec, RT5616_GLB_CLK,
+            RT5616_PLL1_SRC_MASK, RT5616_PLL1_SRC_BCLK1);
+
+
+        break;
+    default:
+        dev_err(codec->dev, "Unknown PLL source %d\n", source);
+        return -EINVAL;
+    }
+
+    ret = rt5616_pll_calc(freq_in, freq_out, &pll_code);
+    if (ret < 0) {
+        dev_err(codec->dev, "Unsupport input clock %d\n", freq_in);
+        return ret;
+    }
+
+    dev_dbg(codec->dev, "bypass=%d m=%d n=%d k=%d\n", pll_code.m_bp,
+        (pll_code.m_bp ? 0 : pll_code.m_code), pll_code.n_code, pll_code.k_code);
+
+    snd_soc_write(codec, RT5616_PLL_CTRL1,
+        pll_code.n_code << RT5616_PLL_N_SFT | pll_code.k_code);
+    snd_soc_write(codec, RT5616_PLL_CTRL2,
+        (pll_code.m_bp ? 0 : pll_code.m_code) << RT5616_PLL_M_SFT |
+        pll_code.m_bp << RT5616_PLL_M_BP_SFT);
+
+    rt5616->pll_in = freq_in;
+    rt5616->pll_out = freq_out;
+    rt5616->pll_src = source;
+
+    return 0;
+}
+
+/**
+ * rt5616_index_show - Dump private registers.
+ * @dev: codec device.
+ * @attr: device attribute.
+ * @buf: buffer for display.
+ *
+ * To show non-zero values of all private registers.
+ *
+ * Returns buffer length.
+ */
+static ssize_t rt5616_index_show(struct device *dev,
+    struct device_attribute *attr, char *buf)
+{
+    struct i2c_client *client = to_i2c_client(dev);
+    struct rt5616_priv *rt5616 = i2c_get_clientdata(client);
+    struct snd_soc_codec *codec = rt5616->codec;
+    unsigned int val;
+    int cnt = 0, i;
+
+    cnt += sprintf(buf, "RT5616 index register\n");
+    for (i = 0; i < 0xb4; i++) {
+        if (cnt + RT5616_REG_DISP_LEN >= PAGE_SIZE)
+            break;
+        val = rt5616_index_read(codec, i);
+        if (!val)
+            continue;
+        cnt += snprintf(buf + cnt, RT5616_REG_DISP_LEN,
+                "%02x: %04x\n", i, val);
+    }
+
+    if (cnt >= PAGE_SIZE)
+        cnt = PAGE_SIZE - 1;
+
+    return cnt;
+}
+static DEVICE_ATTR(index_reg, 0444, rt5616_index_show, NULL);
+
+static int rt5616_set_bias_level(struct snd_soc_codec *codec,
+            enum snd_soc_bias_level level)
+{
+   printk(KERN_INFO"rt5616_set_bias_level : level=%d\n",level);
+    switch (level) {
+    case SND_SOC_BIAS_ON:
+        break;
+
+    case SND_SOC_BIAS_PREPARE:
+        snd_soc_write(codec,RT5616_PWR_ANLG2,
+            snd_soc_read(codec,RT5616_PWR_ANLG2)| 0x0800);
+        break;
+
+    case SND_SOC_BIAS_STANDBY:
+        if (SND_SOC_BIAS_OFF == codec->dapm.bias_level) {
+            snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+                RT5616_PWR_VREF1 | RT5616_PWR_MB |
+                RT5616_PWR_BG | RT5616_PWR_VREF2,
+                RT5616_PWR_VREF1 | RT5616_PWR_MB |
+                RT5616_PWR_BG | RT5616_PWR_VREF2);
+            msleep(10);
+            snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+                RT5616_PWR_FV1 | RT5616_PWR_FV2,
+                RT5616_PWR_FV1 | RT5616_PWR_FV2);
+			snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+		        RT5616_PWR_LDO_DVO_MASK, 
+		        RT5616_PWR_LDO_DVO_1_3V);//set LDO after resume
+            codec->cache_only = false;
+            codec->cache_sync = 1;
+            snd_soc_cache_sync(codec);
+            rt5616_index_sync(codec);
+            snd_soc_write(codec, RT5616_D_MISC, 0x0011);
+        }
+        break;
+
+    case SND_SOC_BIAS_OFF:
+        snd_soc_write(codec, RT5616_D_MISC, 0x0010);
+        snd_soc_write(codec, RT5616_PWR_DIG1, 0x0000);
+        snd_soc_write(codec, RT5616_PWR_DIG2, 0x0000);
+        snd_soc_write(codec, RT5616_PWR_VOL, 0x0000);
+        snd_soc_write(codec, RT5616_PWR_MIXER, 0x0000);
+        snd_soc_write(codec, RT5616_PWR_ANLG1, 0x0000);
+        snd_soc_write(codec, RT5616_PWR_ANLG2, 0x0000);
+        break;
+
+    default:
+        break;
+    }
+    codec->dapm.bias_level = level;
+
+    return 0;
+}
+
+static int rt5616_probe(struct snd_soc_codec *codec)
+{
+    struct rt5616_priv *rt5616 = snd_soc_codec_get_drvdata(codec);
+    int ret;
+    printk("enter %s\n",__func__);
+    ret = snd_soc_codec_set_cache_io(codec, 8, 16, SND_SOC_I2C);
+    if (ret != 0) {
+        dev_err(codec->dev, "Failed to set cache I/O: %d\n", ret);
+        return ret;
+    }
+
+    rt5616_reset(codec);
+    snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+        RT5616_PWR_VREF1 | RT5616_PWR_MB |
+        RT5616_PWR_BG | RT5616_PWR_VREF2,
+        RT5616_PWR_VREF1 | RT5616_PWR_MB |
+        RT5616_PWR_BG | RT5616_PWR_VREF2);
+    msleep(10);
+    snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+        RT5616_PWR_FV1 | RT5616_PWR_FV2,
+        RT5616_PWR_FV1 | RT5616_PWR_FV2);
+    rt5616_reg_init(codec);
+    snd_soc_update_bits(codec, RT5616_PWR_ANLG1,
+        RT5616_PWR_LDO_DVO_MASK, RT5616_PWR_LDO_DVO_1_3V);
+
+    codec->dapm.bias_level = SND_SOC_BIAS_STANDBY;
+    rt5616->codec = codec;
+/*
+    snd_soc_add_controls(codec, rt5616_snd_controls,
+            ARRAY_SIZE(rt5616_snd_controls));
+    snd_soc_dapm_new_controls(&codec->dapm, rt5616_dapm_widgets,
+            ARRAY_SIZE(rt5616_dapm_widgets));
+    snd_soc_dapm_add_routes(&codec->dapm, rt5616_dapm_routes,
+            ARRAY_SIZE(rt5616_dapm_routes));
+*/
+    ret = device_create_file(codec->dev, &dev_attr_index_reg);
+    if (ret != 0) {
+        dev_err(codec->dev,
+            "Failed to create index_reg sysfs files: %d\n", ret);
+        return ret;
+    }
+
+    return 0;
+}
+
+static int rt5616_remove(struct snd_soc_codec *codec)
+{
+    rt5616_set_bias_level(codec, SND_SOC_BIAS_OFF);
+    return 0;
+}
+
+#ifdef CONFIG_PM
+static int rt5616_suspend(struct snd_soc_codec *codec, pm_message_t state)
+{
+    amlogic_set_value(spk_gpio_mute, 0, "mute_spk");
+    spk_mute_num = 0;
+    rt5616_set_bias_level(codec, SND_SOC_BIAS_OFF);
+    return 0;
+}
+
+static int rt5616_resume(struct snd_soc_codec *codec)
+{
+    rt5616_set_bias_level(codec, SND_SOC_BIAS_STANDBY);
+    return 0;
+}
+#else
+#define rt5616_suspend NULL
+#define rt5616_resume NULL
+#endif
+
+#define RT5616_STEREO_RATES SNDRV_PCM_RATE_8000_96000
+#define RT5616_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | SNDRV_PCM_FMTBIT_S20_3LE | \
+            SNDRV_PCM_FMTBIT_S24_LE | SNDRV_PCM_FMTBIT_S8)
+
+
+struct snd_soc_dai_ops rt5616_aif_dai_ops = {
+    .hw_params = rt5616_hw_params,
+    .prepare = rt5616_prepare,
+    .set_fmt = rt5616_set_dai_fmt,
+    .set_sysclk = rt5616_set_dai_sysclk,
+    .set_pll = rt5616_set_dai_pll,
+    .digital_mute = rt5616_codec_digital_mute,
+};
+
+struct snd_soc_dai_driver rt5616_dai[] = {
+    {
+        .name = "rt5616-aif1",
+        .id = RT5616_AIF1,
+        .playback = {
+            .stream_name = "AIF1 Playback",
+            .channels_min = 1,
+            .channels_max = 2,
+            .rates = RT5616_STEREO_RATES,
+            .formats = RT5616_FORMATS,
+        },
+        .capture = {
+            .stream_name = "AIF1 Capture",
+            .channels_min = 1,
+            .channels_max = 2,
+            .rates = RT5616_STEREO_RATES,
+            .formats = RT5616_FORMATS,
+        },
+        .ops = &rt5616_aif_dai_ops,
+    },
+};
+
+static struct snd_soc_codec_driver soc_codec_dev_rt5616 = {
+    .probe = rt5616_probe,
+    .remove = rt5616_remove,
+    .suspend = rt5616_suspend,
+    .resume = rt5616_resume,
+    .set_bias_level = rt5616_set_bias_level,
+    .controls = rt5616_snd_controls,
+    .num_controls = ARRAY_SIZE(rt5616_snd_controls),
+    .dapm_widgets = rt5616_dapm_widgets,
+    .num_dapm_widgets = ARRAY_SIZE(rt5616_dapm_widgets),
+    .dapm_routes = rt5616_dapm_routes,
+    .num_dapm_routes = ARRAY_SIZE(rt5616_dapm_routes),
+    .reg_cache_size = RT5616_DEVICE_ID + 1,
+    .reg_word_size = sizeof(u16),
+    .reg_cache_default = rt5616_reg,
+    .volatile_register = rt5616_volatile_register,
+    .readable_register = rt5616_readable_register,
+    .reg_cache_step = 1,
+};
+
+static const struct i2c_device_id rt5616_i2c_id[] = {
+    { "rt5616", 0 },
+    { }
+};
+MODULE_DEVICE_TABLE(i2c, rt5616_i2c_id);
+
+static int rt5616_i2c_probe(struct i2c_client *i2c,
+            const struct i2c_device_id *id)
+{
+    struct rt5616_priv *rt5616;
+    int ret;
+    printk("enter %s\n",__func__);
+
+    rt5616 = kzalloc(sizeof(struct rt5616_priv), GFP_KERNEL);
+    if (NULL == rt5616)
+        return -ENOMEM;
+
+    i2c_set_clientdata(i2c, rt5616);
+
+    ret = snd_soc_register_codec(&i2c->dev, &soc_codec_dev_rt5616,
+            rt5616_dai, ARRAY_SIZE(rt5616_dai));
+    if (ret < 0)
+        kfree(rt5616);
+
+    return ret;
+}
+
+static int rt5616_i2c_remove(struct i2c_client *i2c)
+{
+    snd_soc_unregister_codec(&i2c->dev);
+    kfree(i2c_get_clientdata(i2c));
+    return 0;
+}
+
+static int rt5616_i2c_shutdown(struct i2c_client *client)
+{
+    struct rt5616_priv *rt5616 = i2c_get_clientdata(client);
+    struct snd_soc_codec *codec = rt5616->codec;
+    amlogic_set_value(spk_gpio_mute, 0, "mute_spk");
+    spk_mute_num = 0;
+    if (codec != NULL)
+    {
+        snd_soc_write(codec, RT5616_HP_VOL, 0xc8c8);
+        snd_soc_write(codec, RT5616_LOUT_CTRL1, 0xc8c8);
+        rt5616_set_bias_level(codec, SND_SOC_BIAS_OFF);
+    }
+
+    return 0;
+}
+
+struct i2c_driver rt5616_i2c_driver = {
+    .driver = {
+        .name = "rt5616",
+        .owner = THIS_MODULE,
+    },
+    .probe = rt5616_i2c_probe,
+    .remove   = rt5616_i2c_remove,
+    .shutdown = rt5616_i2c_shutdown,
+    .id_table = rt5616_i2c_id,
+};
+
+static int __init rt5616_modinit(void)
+{
+    printk("enter %s\n",__func__);
+    return i2c_add_driver(&rt5616_i2c_driver);
+}
+module_init(rt5616_modinit);
+
+static void __exit rt5616_modexit(void)
+{
+    i2c_del_driver(&rt5616_i2c_driver);
+}
+module_exit(rt5616_modexit);
+
+MODULE_DESCRIPTION("ASoC RT5616 driver");
+MODULE_AUTHOR("Johnny Hsu <johnnyhsu@realtek.com>");
+MODULE_LICENSE("GPL");
diff --git a/sound/soc/codecs/rt5616.h b/sound/soc/codecs/rt5616.h
new file mode 100755
index 000000000000..cdd4e204604c
--- /dev/null
+++ b/sound/soc/codecs/rt5616.h
@@ -0,0 +1,1911 @@
+/*
+ * rt5616.h  --  RT5616 ALSA SoC audio driver
+ *
+ * Copyright 2011 Realtek Microelectronics
+ * Author: Johnny Hsu <johnnyhsu@realtek.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __RT5616_H__
+#define __RT5616_H__
+
+/* Info */
+#define RT5616_RESET				0x00
+#define RT5616_VERSION_ID			0xfd
+#define RT5616_VENDOR_ID			0xfe
+#define RT5616_DEVICE_ID			0xff
+/*  I/O - Output */
+#define RT5616_HP_VOL				0x02
+#define RT5616_LOUT_CTRL1			0x03
+#define RT5616_LOUT_CTRL2			0x05
+/* I/O - Input */
+#define RT5616_IN1_IN2				0x0d
+#define RT5616_INL1_INR1_VOL			0x0f
+/* I/O - ADC/DAC/DMIC */
+#define RT5616_DAC1_DIG_VOL			0x19
+#define RT5616_ADC_DIG_VOL			0x1c
+#define RT5616_ADC_BST_VOL			0x1e
+/* Mixer - D-D */
+#define RT5616_STO1_ADC_MIXER			0x27
+#define RT5616_AD_DA_MIXER			0x29
+#define RT5616_STO_DAC_MIXER			0x2a
+
+/* Mixer - ADC */
+#define RT5616_REC_L1_MIXER			0x3b
+#define RT5616_REC_L2_MIXER			0x3c
+#define RT5616_REC_R1_MIXER			0x3d
+#define RT5616_REC_R2_MIXER			0x3e
+/* Mixer - DAC */
+#define RT5616_HPO_MIXER			0x45
+#define RT5616_OUT_L1_MIXER			0x4d
+#define RT5616_OUT_L2_MIXER			0x4e
+#define RT5616_OUT_L3_MIXER			0x4f
+#define RT5616_OUT_R1_MIXER			0x50
+#define RT5616_OUT_R2_MIXER			0x51
+#define RT5616_OUT_R3_MIXER			0x52
+#define RT5616_LOUT_MIXER			0x53
+/* Power */
+#define RT5616_PWR_DIG1				0x61
+#define RT5616_PWR_DIG2				0x62
+#define RT5616_PWR_ANLG1			0x63
+#define RT5616_PWR_ANLG2			0x64
+#define RT5616_PWR_MIXER			0x65
+#define RT5616_PWR_VOL				0x66
+/* Private Register Control */
+#define RT5616_PRIV_INDEX			0x6a
+#define RT5616_PRIV_DATA			0x6c
+/* Format - ADC/DAC */
+#define RT5616_I2S1_SDP				0x70
+#define RT5616_ADDA_CLK1			0x73
+#define RT5616_ADDA_CLK2			0x74
+
+/* Function - Analog */
+#define RT5616_GLB_CLK				0x80
+#define RT5616_PLL_CTRL1			0x81
+#define RT5616_PLL_CTRL2			0x82
+#define RT5616_HP_OVCD				0x8b
+#define RT5616_DEPOP_M1				0x8e
+#define RT5616_DEPOP_M2				0x8f
+#define RT5616_DEPOP_M3				0x90
+#define RT5616_CHARGE_PUMP			0x91
+#define RT5616_PV_DET_SPK_G			0x92
+#define RT5616_MICBIAS				0x93
+#define RT5616_A_JD_CTL1			0x94
+#define RT5616_A_JD_CTL2			0x95
+/* Function - Digital */
+#define RT5616_EQ_CTRL1				0xb0
+#define RT5616_EQ_CTRL2				0xb1
+#define RT5616_WIND_FILTER			0xb2
+#define RT5616_ALC_1				0xb4
+#define RT5616_ALC_2				0xb5
+#define RT5616_ALC_3				0xb6
+#define RT5616_SVOL_ZC				0xb7
+#define RT5616_JD_CTRL1				0xbb
+#define RT5616_JD_CTRL2				0xbc
+#define RT5616_IRQ_CTRL1			0xbd
+#define RT5616_IRQ_CTRL2			0xbe
+#define RT5616_INT_IRQ_ST			0xbf
+#define RT5616_GPIO_CTRL1			0xc0
+#define RT5616_GPIO_CTRL2			0xc1
+#define RT5616_GPIO_CTRL3			0xc2
+#define RT5616_PGM_REG_ARR1			0xc8
+#define RT5616_PGM_REG_ARR2			0xc9
+#define RT5616_PGM_REG_ARR3			0xca
+#define RT5616_PGM_REG_ARR4			0xcb
+#define RT5616_PGM_REG_ARR5			0xcc
+#define RT5616_SCB_FUNC				0xcd
+#define RT5616_SCB_CTRL				0xce
+#define RT5616_BASE_BACK			0xcf
+#define RT5616_MP3_PLUS1			0xd0
+#define RT5616_MP3_PLUS2			0xd1
+#define RT5616_ADJ_HPF_CTRL1			0xd3
+#define RT5616_ADJ_HPF_CTRL2			0xd4
+#define RT5616_HP_CALIB_AMP_DET			0xd6
+#define RT5616_HP_CALIB2			0xd7
+#define RT5616_SV_ZCD1				0xd9
+#define RT5616_SV_ZCD2				0xda
+#define RT5616_D_MISC				0xfa
+/* Dummy Register */
+#define RT5616_DUMMY2				0xfb
+#define RT5616_DUMMY3				0xfc
+
+
+/* Index of Codec Private Register definition */
+#define RT5616_BIAS_CUR1			0x12
+#define RT5616_BIAS_CUR3			0x14
+#define RT5616_CLSD_INT_REG1			0x1c
+#define RT5616_MAMP_INT_REG2			0x37
+#define RT5616_CHOP_DAC_ADC			0x3d
+#define RT5616_3D_SPK				0x63
+#define RT5616_WND_1				0x6c
+#define RT5616_WND_2				0x6d
+#define RT5616_WND_3				0x6e
+#define RT5616_WND_4				0x6f
+#define RT5616_WND_5				0x70
+#define RT5616_WND_8				0x73
+#define RT5616_DIP_SPK_INF			0x75
+#define RT5616_HP_DCC_INT1			0x77
+#define RT5616_EQ_BW_LOP			0xa0
+#define RT5616_EQ_GN_LOP			0xa1
+#define RT5616_EQ_FC_BP1			0xa2
+#define RT5616_EQ_BW_BP1			0xa3
+#define RT5616_EQ_GN_BP1			0xa4
+#define RT5616_EQ_FC_BP2			0xa5
+#define RT5616_EQ_BW_BP2			0xa6
+#define RT5616_EQ_GN_BP2			0xa7
+#define RT5616_EQ_FC_BP3			0xa8
+#define RT5616_EQ_BW_BP3			0xa9
+#define RT5616_EQ_GN_BP3			0xaa
+#define RT5616_EQ_FC_BP4			0xab
+#define RT5616_EQ_BW_BP4			0xac
+#define RT5616_EQ_GN_BP4			0xad
+#define RT5616_EQ_FC_HIP1			0xae
+#define RT5616_EQ_GN_HIP1			0xaf
+#define RT5616_EQ_FC_HIP2			0xb0
+#define RT5616_EQ_BW_HIP2			0xb1
+#define RT5616_EQ_GN_HIP2			0xb2
+#define RT5616_EQ_PRE_VOL			0xb3
+#define RT5616_EQ_PST_VOL			0xb4
+
+
+/* global definition */
+#define RT5616_L_MUTE				(0x1 << 15)
+#define RT5616_L_MUTE_SFT			15
+#define RT5616_VOL_L_MUTE			(0x1 << 14)
+#define RT5616_VOL_L_SFT			14
+#define RT5616_R_MUTE				(0x1 << 7)
+#define RT5616_R_MUTE_SFT			7
+#define RT5616_VOL_R_MUTE			(0x1 << 6)
+#define RT5616_VOL_R_SFT			6
+#define RT5616_L_VOL_MASK			(0x3f << 8)
+#define RT5616_L_VOL_SFT			8
+#define RT5616_R_VOL_MASK			(0x3f)
+#define RT5616_R_VOL_SFT			0
+
+/* LOUT Control 2(0x05) */
+#define RT5616_EN_DFO				(0x1 << 15)
+
+/* IN1 and IN2 Control (0x0d) */
+/* IN3 and IN4 Control (0x0e) */
+#define RT5616_BST_MASK1			(0xf<<12)
+#define RT5616_BST_SFT1				12
+#define RT5616_BST_MASK2			(0xf<<8)
+#define RT5616_BST_SFT2				8
+#define RT5616_IN_DF1				(0x1 << 7)
+#define RT5616_IN_SFT1				7
+#define RT5616_IN_DF2				(0x1 << 6)
+#define RT5616_IN_SFT2				6
+
+/* INL1 and INR1 Volume Control (0x0f) */
+#define RT5616_INL_VOL_MASK			(0x1f << 8)
+#define RT5616_INL_VOL_SFT			8
+#define RT5616_INR_SEL_MASK			(0x1 << 7)
+#define RT5616_INR_SEL_SFT			7
+#define RT5616_INR_SEL_IN4N			(0x0 << 7)
+#define RT5616_INR_SEL_MONON			(0x1 << 7)
+#define RT5616_INR_VOL_MASK			(0x1f)
+#define RT5616_INR_VOL_SFT			0
+
+/* DAC1 Digital Volume (0x19) */
+#define RT5616_DAC_L1_VOL_MASK			(0xff << 8)
+#define RT5616_DAC_L1_VOL_SFT			8
+#define RT5616_DAC_R1_VOL_MASK			(0xff)
+#define RT5616_DAC_R1_VOL_SFT			0
+
+/* DAC2 Digital Volume (0x1a) */
+#define RT5616_DAC_L2_VOL_MASK			(0xff << 8)
+#define RT5616_DAC_L2_VOL_SFT			8
+#define RT5616_DAC_R2_VOL_MASK			(0xff)
+#define RT5616_DAC_R2_VOL_SFT			0
+
+/* ADC Digital Volume Control (0x1c) */
+#define RT5616_ADC_L_VOL_MASK			(0x7f << 8)
+#define RT5616_ADC_L_VOL_SFT			8
+#define RT5616_ADC_R_VOL_MASK			(0x7f)
+#define RT5616_ADC_R_VOL_SFT			0
+
+/* Mono ADC Digital Volume Control (0x1d) */
+#define RT5616_M_MONO_ADC_L			(0x1 << 15)
+#define RT5616_M_MONO_ADC_L_SFT			15
+#define RT5616_MONO_ADC_L_VOL_MASK		(0x7f << 8)
+#define RT5616_MONO_ADC_L_VOL_SFT		8
+#define RT5616_M_MONO_ADC_R			(0x1 << 7)
+#define RT5616_M_MONO_ADC_R_SFT			7
+#define RT5616_MONO_ADC_R_VOL_MASK		(0x7f)
+#define RT5616_MONO_ADC_R_VOL_SFT		0
+
+/* ADC Boost Volume Control (0x1e) */
+#define RT5616_ADC_L_BST_MASK			(0x3 << 14)
+#define RT5616_ADC_L_BST_SFT			14
+#define RT5616_ADC_R_BST_MASK			(0x3 << 12)
+#define RT5616_ADC_R_BST_SFT			12
+#define RT5616_ADC_COMP_MASK			(0x3 << 10)
+#define RT5616_ADC_COMP_SFT			10
+
+/* Stereo ADC1 Mixer Control (0x27) */
+#define RT5616_M_STO1_ADC_L1			(0x1 << 14)
+#define RT5616_M_STO1_ADC_L1_SFT		14
+#define RT5616_M_STO1_ADC_R1			(0x1 << 6)
+#define RT5616_M_STO1_ADC_R1_SFT		6
+
+/* ADC Mixer to DAC Mixer Control (0x29) */
+#define RT5616_M_ADCMIX_L			(0x1 << 15)
+#define RT5616_M_ADCMIX_L_SFT			15
+#define RT5616_M_IF1_DAC_L			(0x1 << 14)
+#define RT5616_M_IF1_DAC_L_SFT			14
+#define RT5616_M_ADCMIX_R			(0x1 << 7)
+#define RT5616_M_ADCMIX_R_SFT			7
+#define RT5616_M_IF1_DAC_R			(0x1 << 6)
+#define RT5616_M_IF1_DAC_R_SFT			6
+
+/* Stereo DAC Mixer Control (0x2a) */
+#define RT5616_M_DAC_L1_MIXL			(0x1 << 14)
+#define RT5616_M_DAC_L1_MIXL_SFT		14
+#define RT5616_DAC_L1_STO_L_VOL_MASK		(0x1 << 13)
+#define RT5616_DAC_L1_STO_L_VOL_SFT		13
+#define RT5616_M_DAC_R1_MIXL			(0x1 << 9)
+#define RT5616_M_DAC_R1_MIXL_SFT		9
+#define RT5616_DAC_R1_STO_L_VOL_MASK		(0x1 << 8)
+#define RT5616_DAC_R1_STO_L_VOL_SFT		8
+#define RT5616_M_DAC_R1_MIXR			(0x1 << 6)
+#define RT5616_M_DAC_R1_MIXR_SFT		6
+#define RT5616_DAC_R1_STO_R_VOL_MASK		(0x1 << 5)
+#define RT5616_DAC_R1_STO_R_VOL_SFT		5
+#define RT5616_M_DAC_L1_MIXR			(0x1 << 1)
+#define RT5616_M_DAC_L1_MIXR_SFT		1
+#define RT5616_DAC_L1_STO_R_VOL_MASK		(0x1)
+#define RT5616_DAC_L1_STO_R_VOL_SFT		0
+
+/* DD Mixer Control (0x2b) */
+#define RT5616_M_STO_DD_L1			(0x1 << 14)
+#define RT5616_M_STO_DD_L1_SFT			14
+#define RT5616_STO_DD_L1_VOL_MASK		(0x1 << 13)
+#define RT5616_DAC_DD_L1_VOL_SFT		13
+#define RT5616_M_STO_DD_L2			(0x1 << 12)
+#define RT5616_M_STO_DD_L2_SFT			12
+#define RT5616_STO_DD_L2_VOL_MASK		(0x1 << 11)
+#define RT5616_STO_DD_L2_VOL_SFT		11
+#define RT5616_M_STO_DD_R2_L			(0x1 << 10)
+#define RT5616_M_STO_DD_R2_L_SFT		10
+#define RT5616_STO_DD_R2_L_VOL_MASK		(0x1 << 9)
+#define RT5616_STO_DD_R2_L_VOL_SFT		9
+#define RT5616_M_STO_DD_R1			(0x1 << 6)
+#define RT5616_M_STO_DD_R1_SFT			6
+#define RT5616_STO_DD_R1_VOL_MASK		(0x1 << 5)
+#define RT5616_STO_DD_R1_VOL_SFT		5
+#define RT5616_M_STO_DD_R2			(0x1 << 4)
+#define RT5616_M_STO_DD_R2_SFT			4
+#define RT5616_STO_DD_R2_VOL_MASK		(0x1 << 3)
+#define RT5616_STO_DD_R2_VOL_SFT		3
+#define RT5616_M_STO_DD_L2_R			(0x1 << 2)
+#define RT5616_M_STO_DD_L2_R_SFT		2
+#define RT5616_STO_DD_L2_R_VOL_MASK		(0x1 << 1)
+#define RT5616_STO_DD_L2_R_VOL_SFT		1
+
+/* Digital Mixer Control (0x2c) */
+#define RT5616_M_STO_L_DAC_L			(0x1 << 15)
+#define RT5616_M_STO_L_DAC_L_SFT		15
+#define RT5616_STO_L_DAC_L_VOL_MASK		(0x1 << 14)
+#define RT5616_STO_L_DAC_L_VOL_SFT		14
+#define RT5616_M_DAC_L2_DAC_L			(0x1 << 13)
+#define RT5616_M_DAC_L2_DAC_L_SFT		13
+#define RT5616_DAC_L2_DAC_L_VOL_MASK		(0x1 << 12)
+#define RT5616_DAC_L2_DAC_L_VOL_SFT		12
+#define RT5616_M_STO_R_DAC_R			(0x1 << 11)
+#define RT5616_M_STO_R_DAC_R_SFT		11
+#define RT5616_STO_R_DAC_R_VOL_MASK		(0x1 << 10)
+#define RT5616_STO_R_DAC_R_VOL_SFT		10
+#define RT5616_M_DAC_R2_DAC_R			(0x1 << 9)
+#define RT5616_M_DAC_R2_DAC_R_SFT		9
+#define RT5616_DAC_R2_DAC_R_VOL_MASK		(0x1 << 8)
+#define RT5616_DAC_R2_DAC_R_VOL_SFT		8
+
+/* DSP Path Control 1 (0x2d) */
+#define RT5616_RXDP_SRC_MASK			(0x1 << 15)
+#define RT5616_RXDP_SRC_SFT			15
+#define RT5616_RXDP_SRC_NOR			(0x0 << 15)
+#define RT5616_RXDP_SRC_DIV3			(0x1 << 15)
+#define RT5616_TXDP_SRC_MASK			(0x1 << 14)
+#define RT5616_TXDP_SRC_SFT			14
+#define RT5616_TXDP_SRC_NOR			(0x0 << 14)
+#define RT5616_TXDP_SRC_DIV3			(0x1 << 14)
+
+/* DSP Path Control 2 (0x2e) */
+#define RT5616_DAC_L2_SEL_MASK			(0x3 << 14)
+#define RT5616_DAC_L2_SEL_SFT			14
+#define RT5616_DAC_L2_SEL_IF2			(0x0 << 14)
+#define RT5616_DAC_L2_SEL_IF3			(0x1 << 14)
+#define RT5616_DAC_L2_SEL_TXDC			(0x2 << 14)
+#define RT5616_DAC_L2_SEL_BASS			(0x3 << 14)
+#define RT5616_DAC_R2_SEL_MASK			(0x3 << 12)
+#define RT5616_DAC_R2_SEL_SFT			12
+#define RT5616_DAC_R2_SEL_IF2			(0x0 << 12)
+#define RT5616_DAC_R2_SEL_IF3			(0x1 << 12)
+#define RT5616_DAC_R2_SEL_TXDC			(0x2 << 12)
+#define RT5616_IF2_ADC_L_SEL_MASK		(0x1 << 11)
+#define RT5616_IF2_ADC_L_SEL_SFT		11
+#define RT5616_IF2_ADC_L_SEL_TXDP		(0x0 << 11)
+#define RT5616_IF2_ADC_L_SEL_PASS		(0x1 << 11)
+#define RT5616_IF2_ADC_R_SEL_MASK		(0x1 << 10)
+#define RT5616_IF2_ADC_R_SEL_SFT		10
+#define RT5616_IF2_ADC_R_SEL_TXDP		(0x0 << 10)
+#define RT5616_IF2_ADC_R_SEL_PASS		(0x1 << 10)
+#define RT5616_RXDC_SEL_MASK			(0x3 << 8)
+#define RT5616_RXDC_SEL_SFT			8
+#define RT5616_RXDC_SEL_NOR			(0x0 << 8)
+#define RT5616_RXDC_SEL_L2R			(0x1 << 8)
+#define RT5616_RXDC_SEL_R2L			(0x2 << 8)
+#define RT5616_RXDC_SEL_SWAP			(0x3 << 8)
+#define RT5616_RXDP_SEL_MASK			(0x3 << 6)
+#define RT5616_RXDP_SEL_SFT			6
+#define RT5616_RXDP_SEL_NOR			(0x0 << 6)
+#define RT5616_RXDP_SEL_L2R			(0x1 << 6)
+#define RT5616_RXDP_SEL_R2L			(0x2 << 6)
+#define RT5616_RXDP_SEL_SWAP			(0x3 << 6)
+#define RT5616_TXDC_SEL_MASK			(0x3 << 4)
+#define RT5616_TXDC_SEL_SFT			4
+#define RT5616_TXDC_SEL_NOR			(0x0 << 4)
+#define RT5616_TXDC_SEL_L2R			(0x1 << 4)
+#define RT5616_TXDC_SEL_R2L			(0x2 << 4)
+#define RT5616_TXDC_SEL_SWAP			(0x3 << 4)
+#define RT5616_TXDP_SEL_MASK			(0x3 << 2)
+#define RT5616_TXDP_SEL_SFT			2
+#define RT5616_TXDP_SEL_NOR			(0x0 << 2)
+#define RT5616_TXDP_SEL_L2R			(0x1 << 2)
+#define RT5616_TXDP_SEL_R2L			(0x2 << 2)
+#define RT5616_TRXDP_SEL_SWAP			(0x3 << 2)
+
+/* REC Left Mixer Control 1 (0x3b) */
+#define RT5616_G_LN_L2_RM_L_MASK		(0x7 << 13)
+#define RT5616_G_IN_L2_RM_L_SFT			13
+#define RT5616_G_LN_L1_RM_L_MASK		(0x7 << 10)
+#define RT5616_G_IN_L1_RM_L_SFT			10
+#define RT5616_G_BST3_RM_L_MASK			(0x7 << 4)
+#define RT5616_G_BST3_RM_L_SFT			4
+#define RT5616_G_BST2_RM_L_MASK			(0x7 << 1)
+#define RT5616_G_BST2_RM_L_SFT			1
+
+/* REC Left Mixer Control 2 (0x3c) */
+#define RT5616_G_BST1_RM_L_MASK			(0x7 << 13)
+#define RT5616_G_BST1_RM_L_SFT			13
+#define RT5616_G_OM_L_RM_L_MASK			(0x7 << 10)
+#define RT5616_G_OM_L_RM_L_SFT			10
+#define RT5616_M_IN2_L_RM_L			(0x1 << 6)
+#define RT5616_M_IN2_L_RM_L_SFT			6
+#define RT5616_M_IN1_L_RM_L			(0x1 << 5)
+#define RT5616_M_IN1_L_RM_L_SFT			5
+#define RT5616_M_BST3_RM_L			(0x1 << 3)
+#define RT5616_M_BST3_RM_L_SFT			3
+#define RT5616_M_BST2_RM_L			(0x1 << 2)
+#define RT5616_M_BST2_RM_L_SFT			2
+#define RT5616_M_BST1_RM_L			(0x1 << 1)
+#define RT5616_M_BST1_RM_L_SFT			1
+#define RT5616_M_OM_L_RM_L			(0x1)
+#define RT5616_M_OM_L_RM_L_SFT			0
+
+/* REC Right Mixer Control 1 (0x3d) */
+#define RT5616_G_IN2_R_RM_R_MASK		(0x7 << 13)
+#define RT5616_G_IN2_R_RM_R_SFT			13
+#define RT5616_G_IN1_R_RM_R_MASK		(0x7 << 10)
+#define RT5616_G_IN1_R_RM_R_SFT			10
+#define RT5616_G_BST3_RM_R_MASK			(0x7 << 4)
+#define RT5616_G_BST3_RM_R_SFT			4
+#define RT5616_G_BST2_RM_R_MASK			(0x7 << 1)
+#define RT5616_G_BST2_RM_R_SFT			1
+
+/* REC Right Mixer Control 2 (0x3e) */
+#define RT5616_G_BST1_RM_R_MASK			(0x7 << 13)
+#define RT5616_G_BST1_RM_R_SFT			13
+#define RT5616_G_OM_R_RM_R_MASK			(0x7 << 10)
+#define RT5616_G_OM_R_RM_R_SFT			10
+#define RT5616_M_IN2_R_RM_R			(0x1 << 6)
+#define RT5616_M_IN2_R_RM_R_SFT			6
+#define RT5616_M_IN1_R_RM_R			(0x1 << 5)
+#define RT5616_M_IN1_R_RM_R_SFT			5
+#define RT5616_M_BST3_RM_R			(0x1 << 3)
+#define RT5616_M_BST3_RM_R_SFT			3
+#define RT5616_M_BST2_RM_R			(0x1 << 2)
+#define RT5616_M_BST2_RM_R_SFT			2
+#define RT5616_M_BST1_RM_R			(0x1 << 1)
+#define RT5616_M_BST1_RM_R_SFT			1
+#define RT5616_M_OM_R_RM_R			(0x1)
+#define RT5616_M_OM_R_RM_R_SFT			0
+
+/* HPMIX Control (0x45) */
+#define RT5616_M_DAC1_HM			(0x1 << 14)
+#define RT5616_M_DAC1_HM_SFT			14
+#define RT5616_M_HPVOL_HM			(0x1 << 13)
+#define RT5616_M_HPVOL_HM_SFT			13
+#define RT5616_G_HPOMIX_MASK			(0x1 << 12)
+#define RT5616_G_HPOMIX_SFT			12
+
+/* SPK Left Mixer Control (0x46) */
+#define RT5616_G_RM_L_SM_L_MASK			(0x3 << 14)
+#define RT5616_G_RM_L_SM_L_SFT			14
+#define RT5616_G_IN_L_SM_L_MASK			(0x3 << 12)
+#define RT5616_G_IN_L_SM_L_SFT			12
+#define RT5616_G_DAC_L1_SM_L_MASK		(0x3 << 10)
+#define RT5616_G_DAC_L1_SM_L_SFT		10
+#define RT5616_G_DAC_L2_SM_L_MASK		(0x3 << 8)
+#define RT5616_G_DAC_L2_SM_L_SFT		8
+#define RT5616_G_OM_L_SM_L_MASK			(0x3 << 6)
+#define RT5616_G_OM_L_SM_L_SFT			6
+#define RT5616_M_RM_L_SM_L			(0x1 << 5)
+#define RT5616_M_RM_L_SM_L_SFT			5
+#define RT5616_M_IN_L_SM_L			(0x1 << 4)
+#define RT5616_M_IN_L_SM_L_SFT			4
+#define RT5616_M_DAC_L1_SM_L			(0x1 << 3)
+#define RT5616_M_DAC_L1_SM_L_SFT		3
+#define RT5616_M_DAC_L2_SM_L			(0x1 << 2)
+#define RT5616_M_DAC_L2_SM_L_SFT		2
+#define RT5616_M_OM_L_SM_L			(0x1 << 1)
+#define RT5616_M_OM_L_SM_L_SFT			1
+
+/* SPK Right Mixer Control (0x47) */
+#define RT5616_G_RM_R_SM_R_MASK			(0x3 << 14)
+#define RT5616_G_RM_R_SM_R_SFT			14
+#define RT5616_G_IN_R_SM_R_MASK			(0x3 << 12)
+#define RT5616_G_IN_R_SM_R_SFT			12
+#define RT5616_G_DAC_R1_SM_R_MASK		(0x3 << 10)
+#define RT5616_G_DAC_R1_SM_R_SFT		10
+#define RT5616_G_DAC_R2_SM_R_MASK		(0x3 << 8)
+#define RT5616_G_DAC_R2_SM_R_SFT		8
+#define RT5616_G_OM_R_SM_R_MASK			(0x3 << 6)
+#define RT5616_G_OM_R_SM_R_SFT			6
+#define RT5616_M_RM_R_SM_R			(0x1 << 5)
+#define RT5616_M_RM_R_SM_R_SFT			5
+#define RT5616_M_IN_R_SM_R			(0x1 << 4)
+#define RT5616_M_IN_R_SM_R_SFT			4
+#define RT5616_M_DAC_R1_SM_R			(0x1 << 3)
+#define RT5616_M_DAC_R1_SM_R_SFT		3
+#define RT5616_M_DAC_R2_SM_R			(0x1 << 2)
+#define RT5616_M_DAC_R2_SM_R_SFT		2
+#define RT5616_M_OM_R_SM_R			(0x1 << 1)
+#define RT5616_M_OM_R_SM_R_SFT			1
+
+/* SPOLMIX Control (0x48) */
+#define RT5616_M_DAC_R1_SPM_L			(0x1 << 15)
+#define RT5616_M_DAC_R1_SPM_L_SFT		15
+#define RT5616_M_DAC_L1_SPM_L			(0x1 << 14)
+#define RT5616_M_DAC_L1_SPM_L_SFT		14
+#define RT5616_M_SV_R_SPM_L			(0x1 << 13)
+#define RT5616_M_SV_R_SPM_L_SFT			13
+#define RT5616_M_SV_L_SPM_L			(0x1 << 12)
+#define RT5616_M_SV_L_SPM_L_SFT			12
+#define RT5616_M_BST1_SPM_L			(0x1 << 11)
+#define RT5616_M_BST1_SPM_L_SFT			11
+
+/* SPORMIX Control (0x49) */
+#define RT5616_M_DAC_R1_SPM_R			(0x1 << 13)
+#define RT5616_M_DAC_R1_SPM_R_SFT		13
+#define RT5616_M_SV_R_SPM_R			(0x1 << 12)
+#define RT5616_M_SV_R_SPM_R_SFT			12
+#define RT5616_M_BST1_SPM_R			(0x1 << 11)
+#define RT5616_M_BST1_SPM_R_SFT			11
+
+/* SPOLMIX / SPORMIX Ratio Control (0x4a) */
+#define RT5616_SPO_CLSD_RATIO_MASK		(0x7)
+#define RT5616_SPO_CLSD_RATIO_SFT		0
+
+/* Mono Output Mixer Control (0x4c) */
+#define RT5616_M_DAC_R2_MM			(0x1 << 15)
+#define RT5616_M_DAC_R2_MM_SFT			15
+#define RT5616_M_DAC_L2_MM			(0x1 << 14)
+#define RT5616_M_DAC_L2_MM_SFT			14
+#define RT5616_M_OV_R_MM			(0x1 << 13)
+#define RT5616_M_OV_R_MM_SFT			13
+#define RT5616_M_OV_L_MM			(0x1 << 12)
+#define RT5616_M_OV_L_MM_SFT			12
+#define RT5616_M_BST1_MM			(0x1 << 11)
+#define RT5616_M_BST1_MM_SFT			11
+#define RT5616_G_MONOMIX_MASK			(0x1 << 10)
+#define RT5616_G_MONOMIX_SFT			10
+
+/* Output Left Mixer Control 1 (0x4d) */
+#define RT5616_G_BST2_OM_L_MASK			(0x7 << 10)
+#define RT5616_G_BST2_OM_L_SFT			10
+#define RT5616_G_BST1_OM_L_MASK			(0x7 << 7)
+#define RT5616_G_BST1_OM_L_SFT			7
+#define RT5616_G_IN1_L_OM_L_MASK		(0x7 << 4)
+#define RT5616_G_IN1_L_OM_L_SFT			4
+#define RT5616_G_RM_L_OM_L_MASK			(0x7 << 1)
+#define RT5616_G_RM_L_OM_L_SFT			1
+
+/* Output Left Mixer Control 2 (0x4e) */
+#define RT5616_G_DAC_L1_OM_L_MASK		(0x7 << 7)
+#define RT5616_G_DAC_L1_OM_L_SFT		7
+#define RT5616_G_IN2_L_OM_L_MASK		(0x7 << 4)
+#define RT5616_G_IN2_L_OM_L_SFT			4
+
+/* Output Left Mixer Control 3 (0x4f) */
+#define RT5616_M_IN2_L_OM_L			(0x1 << 9)
+#define RT5616_M_IN2_L_OM_L_SFT			9
+#define RT5616_M_BST2_OM_L			(0x1 << 6)
+#define RT5616_M_BST2_OM_L_SFT			6
+#define RT5616_M_BST1_OM_L			(0x1 << 5)
+#define RT5616_M_BST1_OM_L_SFT			5
+#define RT5616_M_IN1_L_OM_L			(0x1 << 4)
+#define RT5616_M_IN1_L_OM_L_SFT			4
+#define RT5616_M_RM_L_OM_L			(0x1 << 3)
+#define RT5616_M_RM_L_OM_L_SFT			3
+#define RT5616_M_DAC_L1_OM_L			(0x1)
+#define RT5616_M_DAC_L1_OM_L_SFT		0
+
+/* Output Right Mixer Control 1 (0x50) */
+#define RT5616_G_BST2_OM_R_MASK			(0x7 << 10)
+#define RT5616_G_BST2_OM_R_SFT			10
+#define RT5616_G_BST1_OM_R_MASK			(0x7 << 7)
+#define RT5616_G_BST1_OM_R_SFT			7
+#define RT5616_G_IN1_R_OM_R_MASK		(0x7 << 4)
+#define RT5616_G_IN1_R_OM_R_SFT			4
+#define RT5616_G_RM_R_OM_R_MASK			(0x7 << 1)
+#define RT5616_G_RM_R_OM_R_SFT			1
+
+/* Output Right Mixer Control 2 (0x51) */
+#define RT5616_G_DAC_R1_OM_R_MASK		(0x7 << 7)
+#define RT5616_G_DAC_R1_OM_R_SFT		7
+#define RT5616_G_IN2_R_OM_R_MASK		(0x7 << 4)
+#define RT5616_G_IN2_R_OM_R_SFT			4
+
+/* Output Right Mixer Control 3 (0x52) */
+#define RT5616_M_IN2_R_OM_R			(0x1 << 9)
+#define RT5616_M_IN2_R_OM_R_SFT			9
+#define RT5616_M_BST2_OM_R			(0x1 << 6)
+#define RT5616_M_BST2_OM_R_SFT			6
+#define RT5616_M_BST1_OM_R			(0x1 << 5)
+#define RT5616_M_BST1_OM_R_SFT			5
+#define RT5616_M_IN1_R_OM_R			(0x1 << 4)
+#define RT5616_M_IN1_R_OM_R_SFT			4
+#define RT5616_M_RM_R_OM_R			(0x1 << 3)
+#define RT5616_M_RM_R_OM_R_SFT			3
+#define RT5616_M_DAC_R1_OM_R			(0x1)
+#define RT5616_M_DAC_R1_OM_R_SFT		0
+
+/* LOUT Mixer Control (0x53) */
+#define RT5616_M_DAC_L1_LM			(0x1 << 15)
+#define RT5616_M_DAC_L1_LM_SFT			15
+#define RT5616_M_DAC_R1_LM			(0x1 << 14)
+#define RT5616_M_DAC_R1_LM_SFT			14
+#define RT5616_M_OV_L_LM			(0x1 << 13)
+#define RT5616_M_OV_L_LM_SFT			13
+#define RT5616_M_OV_R_LM			(0x1 << 12)
+#define RT5616_M_OV_R_LM_SFT			12
+#define RT5616_G_LOUTMIX_MASK			(0x1 << 11)
+#define RT5616_G_LOUTMIX_SFT			11
+
+/* Power Management for Digital 1 (0x61) */
+#define RT5616_PWR_I2S1				(0x1 << 15)
+#define RT5616_PWR_I2S1_BIT			15
+#define RT5616_PWR_I2S2				(0x1 << 14)
+#define RT5616_PWR_I2S2_BIT			14
+#define RT5616_PWR_DAC_L1			(0x1 << 12)
+#define RT5616_PWR_DAC_L1_BIT			12
+#define RT5616_PWR_DAC_R1			(0x1 << 11)
+#define RT5616_PWR_DAC_R1_BIT			11
+#define RT5616_PWR_ADC_L			(0x1 << 2)
+#define RT5616_PWR_ADC_L_BIT			2
+#define RT5616_PWR_ADC_R			(0x1 << 1)
+#define RT5616_PWR_ADC_R_BIT			1
+
+/* Power Management for Digital 2 (0x62) */
+#define RT5616_PWR_ADC_STO1_F			(0x1 << 15)
+#define RT5616_PWR_ADC_STO1_F_BIT		15
+#define RT5616_PWR_DAC_STO1_F			(0x1 << 11)
+#define RT5616_PWR_DAC_STO1_F_BIT		11
+
+/* Power Management for Analog 1 (0x63) */
+#define RT5616_PWR_VREF1			(0x1 << 15)
+#define RT5616_PWR_VREF1_BIT			15
+#define RT5616_PWR_FV1				(0x1 << 14)
+#define RT5616_PWR_FV1_BIT			14
+#define RT5616_PWR_MB				(0x1 << 13)
+#define RT5616_PWR_MB_BIT			13
+#define RT5616_PWR_LM				(0x1 << 12)
+#define RT5616_PWR_LM_BIT			12
+#define RT5616_PWR_BG				(0x1 << 11)
+#define RT5616_PWR_BG_BIT			11
+#define RT5616_PWR_HP_L				(0x1 << 7)
+#define RT5616_PWR_HP_L_BIT			7
+#define RT5616_PWR_HP_R				(0x1 << 6)
+#define RT5616_PWR_HP_R_BIT			6
+#define RT5616_PWR_HA				(0x1 << 5)
+#define RT5616_PWR_HA_BIT			5
+#define RT5616_PWR_VREF2			(0x1 << 4)
+#define RT5616_PWR_VREF2_BIT			4
+#define RT5616_PWR_FV2				(0x1 << 3)
+#define RT5616_PWR_FV2_BIT			3
+#define RT5616_PWR_LDO				(0x1 << 2)
+#define RT5616_PWR_LDO_BIT			2
+#define RT5616_PWR_LDO_DVO_MASK			(0x3)
+#define RT5616_PWR_LDO_DVO_1_0V			0
+#define RT5616_PWR_LDO_DVO_1_1V			1
+#define RT5616_PWR_LDO_DVO_1_2V			2
+#define RT5616_PWR_LDO_DVO_1_3V			3
+
+/* Power Management for Analog 2 (0x64) */
+#define RT5616_PWR_BST1				(0x1 << 15)
+#define RT5616_PWR_BST1_BIT			15
+#define RT5616_PWR_BST2				(0x1 << 14)
+#define RT5616_PWR_BST2_BIT			14
+#define RT5616_PWR_MB1				(0x1 << 11)
+#define RT5616_PWR_MB1_BIT			11
+#define RT5616_PWR_PLL				(0x1 << 9)
+#define RT5616_PWR_PLL_BIT			9
+#define RT5616_PWR_BST1_OP2			(0x1 << 5)
+#define RT5616_PWR_BST1_OP2_BIT			5
+#define RT5616_PWR_BST2_OP2			(0x1 << 4)
+#define RT5616_PWR_BST2_OP2_BIT			4
+#define RT5616_PWR_BST3_OP2			(0x1 << 3)
+#define RT5616_PWR_BST3_OP2_BIT			3
+#define RT5616_PWR_JD_M				(0x1 << 2)
+#define RT5616_PWM_JD_M_BIT			2
+#define RT5616_PWR_JD2				(0x1 << 1)
+#define RT5616_PWM_JD2_BIT			1
+#define RT5616_PWR_JD3				(0x1)
+#define RT5616_PWM_JD3_BIT			0
+
+/* Power Management for Mixer (0x65) */
+#define RT5616_PWR_OM_L				(0x1 << 15)
+#define RT5616_PWR_OM_L_BIT			15
+#define RT5616_PWR_OM_R				(0x1 << 14)
+#define RT5616_PWR_OM_R_BIT			14
+#define RT5616_PWR_RM_L				(0x1 << 11)
+#define RT5616_PWR_RM_L_BIT			11
+#define RT5616_PWR_RM_R				(0x1 << 10)
+#define RT5616_PWR_RM_R_BIT			10
+
+/* Power Management for Volume (0x66) */
+#define RT5616_PWR_OV_L				(0x1 << 13)
+#define RT5616_PWR_OV_L_BIT			13
+#define RT5616_PWR_OV_R				(0x1 << 12)
+#define RT5616_PWR_OV_R_BIT			12
+#define RT5616_PWR_HV_L				(0x1 << 11)
+#define RT5616_PWR_HV_L_BIT			11
+#define RT5616_PWR_HV_R				(0x1 << 10)
+#define RT5616_PWR_HV_R_BIT			10
+#define RT5616_PWR_IN1_L			(0x1 << 9)
+#define RT5616_PWR_IN1_L_BIT			9
+#define RT5616_PWR_IN1_R			(0x1 << 8)
+#define RT5616_PWR_IN1_R_BIT			8
+#define RT5616_PWR_IN2_L			(0x1 << 7)
+#define RT5616_PWR_IN2_L_BIT			7
+#define RT5616_PWR_IN2_R			(0x1 << 6)
+#define RT5616_PWR_IN2_R_BIT			6
+
+/* I2S1/2/3 Audio Serial Data Port Control (0x70 0x71) */
+#define RT5616_I2S_MS_MASK			(0x1 << 15)
+#define RT5616_I2S_MS_SFT			15
+#define RT5616_I2S_MS_M				(0x0 << 15)
+#define RT5616_I2S_MS_S				(0x1 << 15)
+#define RT5616_I2S_O_CP_MASK			(0x3 << 10)
+#define RT5616_I2S_O_CP_SFT			10
+#define RT5616_I2S_O_CP_OFF			(0x0 << 10)
+#define RT5616_I2S_O_CP_U_LAW			(0x1 << 10)
+#define RT5616_I2S_O_CP_A_LAW			(0x2 << 10)
+#define RT5616_I2S_I_CP_MASK			(0x3 << 8)
+#define RT5616_I2S_I_CP_SFT			8
+#define RT5616_I2S_I_CP_OFF			(0x0 << 8)
+#define RT5616_I2S_I_CP_U_LAW			(0x1 << 8)
+#define RT5616_I2S_I_CP_A_LAW			(0x2 << 8)
+#define RT5616_I2S_BP_MASK			(0x1 << 7)
+#define RT5616_I2S_BP_SFT			7
+#define RT5616_I2S_BP_NOR			(0x0 << 7)
+#define RT5616_I2S_BP_INV			(0x1 << 7)
+#define RT5616_I2S_DL_MASK			(0x3 << 2)
+#define RT5616_I2S_DL_SFT			2
+#define RT5616_I2S_DL_16			(0x0 << 2)
+#define RT5616_I2S_DL_20			(0x1 << 2)
+#define RT5616_I2S_DL_24			(0x2 << 2)
+#define RT5616_I2S_DL_8				(0x3 << 2)
+#define RT5616_I2S_DF_MASK			(0x3)
+#define RT5616_I2S_DF_SFT			0
+#define RT5616_I2S_DF_I2S			(0x0)
+#define RT5616_I2S_DF_LEFT			(0x1)
+#define RT5616_I2S_DF_PCM_A			(0x2)
+#define RT5616_I2S_DF_PCM_B			(0x3)
+
+/* ADC/DAC Clock Control 1 (0x73) */
+#define RT5616_I2S_PD1_MASK			(0x7 << 12)
+#define RT5616_I2S_PD1_SFT			12
+#define RT5616_I2S_PD1_1			(0x0 << 12)
+#define RT5616_I2S_PD1_2			(0x1 << 12)
+#define RT5616_I2S_PD1_3			(0x2 << 12)
+#define RT5616_I2S_PD1_4			(0x3 << 12)
+#define RT5616_I2S_PD1_6			(0x4 << 12)
+#define RT5616_I2S_PD1_8			(0x5 << 12)
+#define RT5616_I2S_PD1_12			(0x6 << 12)
+#define RT5616_I2S_PD1_16			(0x7 << 12)
+#define RT5616_I2S_BCLK_MS2_MASK		(0x1 << 11)
+#define RT5616_DAC_OSR_MASK			(0x3 << 2)
+#define RT5616_DAC_OSR_SFT			2
+#define RT5616_DAC_OSR_128			(0x0 << 2)
+#define RT5616_DAC_OSR_64			(0x1 << 2)
+#define RT5616_DAC_OSR_32			(0x2 << 2)
+#define RT5616_DAC_OSR_128_3			(0x3 << 2)
+#define RT5616_ADC_OSR_MASK			(0x3)
+#define RT5616_ADC_OSR_SFT			0
+#define RT5616_ADC_OSR_128			(0x0)
+#define RT5616_ADC_OSR_64			(0x1)
+#define RT5616_ADC_OSR_32			(0x2)
+#define RT5616_ADC_OSR_128_3			(0x3)
+
+/* ADC/DAC Clock Control 2 (0x74) */
+#define RT5616_DAHPF_EN				(0x1 << 11)
+#define RT5616_DAHPF_EN_SFT			11
+#define RT5616_ADHPF_EN				(0x1 << 10)
+#define RT5616_ADHPF_EN_SFT			10
+
+/* TDM Control 1 (0x77) */
+#define RT5616_TDM_INTEL_SEL_MASK		(0x1 << 15)
+#define RT5616_TDM_INTEL_SEL_SFT		15
+#define RT5616_TDM_INTEL_SEL_64			(0x0 << 15)
+#define RT5616_TDM_INTEL_SEL_50			(0x1 << 15)
+#define RT5616_TDM_MODE_SEL_MASK		(0x1 << 14)
+#define RT5616_TDM_MODE_SEL_SFT			14
+#define RT5616_TDM_MODE_SEL_NOR			(0x0 << 14)
+#define RT5616_TDM_MODE_SEL_TDM			(0x1 << 14)
+#define RT5616_TDM_CH_NUM_SEL_MASK		(0x3 << 12)
+#define RT5616_TDM_CH_NUM_SEL_SFT		12
+#define RT5616_TDM_CH_NUM_SEL_2			(0x0 << 12)
+#define RT5616_TDM_CH_NUM_SEL_4			(0x1 << 12)
+#define RT5616_TDM_CH_NUM_SEL_6			(0x2 << 12)
+#define RT5616_TDM_CH_NUM_SEL_8			(0x3 << 12)
+#define RT5616_TDM_CH_LEN_SEL_MASK		(0x3 << 10)
+#define RT5616_TDM_CH_LEN_SEL_SFT		10
+#define RT5616_TDM_CH_LEN_SEL_16		(0x0 << 10)
+#define RT5616_TDM_CH_LEN_SEL_20		(0x1 << 10)
+#define RT5616_TDM_CH_LEN_SEL_24		(0x2 << 10)
+#define RT5616_TDM_CH_LEN_SEL_32		(0x3 << 10)
+#define RT5616_TDM_ADC_SEL_MASK			(0x1 << 9)
+#define RT5616_TDM_ADC_SEL_SFT			9
+#define RT5616_TDM_ADC_SEL_NOR			(0x0 << 9)
+#define RT5616_TDM_ADC_SEL_SWAP			(0x1 << 9)
+#define RT5616_TDM_ADC_START_SEL_MASK		(0x1 << 8)
+#define RT5616_TDM_ADC_START_SEL_SFT		8
+#define RT5616_TDM_ADC_START_SEL_SL0		(0x0 << 8)
+#define RT5616_TDM_ADC_START_SEL_SL4		(0x1 << 8)
+#define RT5616_TDM_I2S_CH2_SEL_MASK		(0x3 << 6)
+#define RT5616_TDM_I2S_CH2_SEL_SFT		6
+#define RT5616_TDM_I2S_CH2_SEL_LR		(0x0 << 6)
+#define RT5616_TDM_I2S_CH2_SEL_RL		(0x1 << 6)
+#define RT5616_TDM_I2S_CH2_SEL_LL		(0x2 << 6)
+#define RT5616_TDM_I2S_CH2_SEL_RR		(0x3 << 6)
+#define RT5616_TDM_I2S_CH4_SEL_MASK		(0x3 << 4)
+#define RT5616_TDM_I2S_CH4_SEL_SFT		4
+#define RT5616_TDM_I2S_CH4_SEL_LR		(0x0 << 4)
+#define RT5616_TDM_I2S_CH4_SEL_RL		(0x1 << 4)
+#define RT5616_TDM_I2S_CH4_SEL_LL		(0x2 << 4)
+#define RT5616_TDM_I2S_CH4_SEL_RR		(0x3 << 4)
+#define RT5616_TDM_I2S_CH6_SEL_MASK		(0x3 << 2)
+#define RT5616_TDM_I2S_CH6_SEL_SFT		2
+#define RT5616_TDM_I2S_CH6_SEL_LR		(0x0 << 2)
+#define RT5616_TDM_I2S_CH6_SEL_RL		(0x1 << 2)
+#define RT5616_TDM_I2S_CH6_SEL_LL		(0x2 << 2)
+#define RT5616_TDM_I2S_CH6_SEL_RR		(0x3 << 2)
+#define RT5616_TDM_I2S_CH8_SEL_MASK		(0x3)
+#define RT5616_TDM_I2S_CH8_SEL_SFT		0
+#define RT5616_TDM_I2S_CH8_SEL_LR		(0x0)
+#define RT5616_TDM_I2S_CH8_SEL_RL		(0x1)
+#define RT5616_TDM_I2S_CH8_SEL_LL		(0x2)
+#define RT5616_TDM_I2S_CH8_SEL_RR		(0x3)
+
+/* TDM Control 2 (0x78) */
+#define RT5616_TDM_LRCK_POL_SEL_MASK		(0x1 << 15)
+#define RT5616_TDM_LRCK_POL_SEL_SFT		15
+#define RT5616_TDM_LRCK_POL_SEL_NOR		(0x0 << 15)
+#define RT5616_TDM_LRCK_POL_SEL_INV		(0x1 << 15)
+#define RT5616_TDM_CH_VAL_SEL_MASK		(0x1 << 14)
+#define RT5616_TDM_CH_VAL_SEL_SFT		14
+#define RT5616_TDM_CH_VAL_SEL_CH01		(0x0 << 14)
+#define RT5616_TDM_CH_VAL_SEL_CH0123		(0x1 << 14)
+#define RT5616_TDM_CH_VAL_EN			(0x1 << 13)
+#define RT5616_TDM_CH_VAL_SFT			13
+#define RT5616_TDM_LPBK_EN			(0x1 << 12)
+#define RT5616_TDM_LPBK_SFT			12
+#define RT5616_TDM_LRCK_PULSE_SEL_MASK		(0x1 << 11)
+#define RT5616_TDM_LRCK_PULSE_SEL_SFT		11
+#define RT5616_TDM_LRCK_PULSE_SEL_BCLK		(0x0 << 11)
+#define RT5616_TDM_LRCK_PULSE_SEL_CH		(0x1 << 11)
+#define RT5616_TDM_END_EDGE_SEL_MASK		(0x1 << 10)
+#define RT5616_TDM_END_EDGE_SEL_SFT		10
+#define RT5616_TDM_END_EDGE_SEL_POS		(0x0 << 10)
+#define RT5616_TDM_END_EDGE_SEL_NEG		(0x1 << 10)
+#define RT5616_TDM_END_EDGE_EN			(0x1 << 9)
+#define RT5616_TDM_END_EDGE_EN_SFT		9
+#define RT5616_TDM_TRAN_EDGE_SEL_MASK		(0x1 << 8)
+#define RT5616_TDM_TRAN_EDGE_SEL_SFT		8
+#define RT5616_TDM_TRAN_EDGE_SEL_POS		(0x0 << 8)
+#define RT5616_TDM_TRAN_EDGE_SEL_NEG		(0x1 << 8)
+#define RT5616_M_TDM2_L				(0x1 << 7)
+#define RT5616_M_TDM2_L_SFT			7
+#define RT5616_M_TDM2_R				(0x1 << 6)
+#define RT5616_M_TDM2_R_SFT			6
+#define RT5616_M_TDM4_L				(0x1 << 5)
+#define RT5616_M_TDM4_L_SFT			5
+#define RT5616_M_TDM4_R				(0x1 << 4)
+#define RT5616_M_TDM4_R_SFT			4
+
+/* TDM Control 3 (0x79) */
+#define RT5616_CH2_L_SEL_MASK			(0x7 << 12)
+#define RT5616_CH2_L_SEL_SFT			12
+#define RT5616_CH2_L_SEL_SL0			(0x0 << 12)
+#define RT5616_CH2_L_SEL_SL1			(0x1 << 12)
+#define RT5616_CH2_L_SEL_SL2			(0x2 << 12)
+#define RT5616_CH2_L_SEL_SL3			(0x3 << 12)
+#define RT5616_CH2_L_SEL_SL4			(0x4 << 12)
+#define RT5616_CH2_L_SEL_SL5			(0x5 << 12)
+#define RT5616_CH2_L_SEL_SL6			(0x6 << 12)
+#define RT5616_CH2_L_SEL_SL7			(0x7 << 12)
+#define RT5616_CH2_R_SEL_MASK			(0x7 << 8)
+#define RT5616_CH2_R_SEL_SFT			8
+#define RT5616_CH2_R_SEL_SL0			(0x0 << 8)
+#define RT5616_CH2_R_SEL_SL1			(0x1 << 8)
+#define RT5616_CH2_R_SEL_SL2			(0x2 << 8)
+#define RT5616_CH2_R_SEL_SL3			(0x3 << 8)
+#define RT5616_CH2_R_SEL_SL4			(0x4 << 8)
+#define RT5616_CH2_R_SEL_SL5			(0x5 << 8)
+#define RT5616_CH2_R_SEL_SL6			(0x6 << 8)
+#define RT5616_CH2_R_SEL_SL7			(0x7 << 8)
+#define RT5616_CH2_L_SEL_MASK			(0x7 << 4)
+#define RT5616_CH4_L_SEL_SFT			4
+#define RT5616_CH4_L_SEL_SL0			(0x0 << 4)
+#define RT5616_CH4_L_SEL_SL1			(0x1 << 4)
+#define RT5616_CH4_L_SEL_SL2			(0x2 << 4)
+#define RT5616_CH4_L_SEL_SL3			(0x3 << 4)
+#define RT5616_CH4_L_SEL_SL4			(0x4 << 4)
+#define RT5616_CH4_L_SEL_SL5			(0x5 << 4)
+#define RT5616_CH4_L_SEL_SL6			(0x6 << 4)
+#define RT5616_CH4_L_SEL_SL7			(0x7 << 4)
+#define RT5616_CH4_R_SEL_MASK			(0x7)
+#define RT5616_CH4_R_SEL_SFT			0
+#define RT5616_CH4_R_SEL_SL0			(0x0)
+#define RT5616_CH4_R_SEL_SL1			(0x1)
+#define RT5616_CH4_R_SEL_SL2			(0x2)
+#define RT5616_CH4_R_SEL_SL3			(0x3)
+#define RT5616_CH4_R_SEL_SL4			(0x4)
+#define RT5616_CH4_R_SEL_SL5			(0x5)
+#define RT5616_CH4_R_SEL_SL6			(0x6)
+#define RT5616_CH4_R_SEL_SL7			(0x7)
+
+/* Global Clock Control (0x80) */
+#define RT5616_SCLK_SRC_MASK			(0x3 << 14)
+#define RT5616_SCLK_SRC_SFT			14
+#define RT5616_SCLK_SRC_MCLK			(0x0 << 14)
+#define RT5616_SCLK_SRC_PLL1			(0x1 << 14)
+#define RT5616_PLL1_SRC_MASK			(0x3 << 12)
+#define RT5616_PLL1_SRC_SFT			12
+#define RT5616_PLL1_SRC_MCLK			(0x0 << 12)
+#define RT5616_PLL1_SRC_BCLK1			(0x1 << 12)
+#define RT5616_PLL1_SRC_BCLK2			(0x2 << 12)
+#define RT5616_PLL1_PD_MASK			(0x1 << 3)
+#define RT5616_PLL1_PD_SFT			3
+#define RT5616_PLL1_PD_1			(0x0 << 3)
+#define RT5616_PLL1_PD_2			(0x1 << 3)
+
+#define RT5616_PLL_INP_MAX			40000000
+#define RT5616_PLL_INP_MIN			256000
+/* PLL M/N/K Code Control 1 (0x81) */
+#define RT5616_PLL_N_MAX			0x1ff
+#define RT5616_PLL_N_MASK			(RT5616_PLL_N_MAX << 7)
+#define RT5616_PLL_N_SFT			7
+#define RT5616_PLL_K_MAX			0x1f
+#define RT5616_PLL_K_MASK			(RT5616_PLL_K_MAX)
+#define RT5616_PLL_K_SFT			0
+
+/* PLL M/N/K Code Control 2 (0x82) */
+#define RT5616_PLL_M_MAX			0xf
+#define RT5616_PLL_M_MASK			(RT5616_PLL_M_MAX << 12)
+#define RT5616_PLL_M_SFT			12
+#define RT5616_PLL_M_BP				(0x1 << 11)
+#define RT5616_PLL_M_BP_SFT			11
+
+/* PLL tracking mode 1 (0x83) */
+#define RT5616_STO1_T_MASK			(0x1 << 15)
+#define RT5616_STO1_T_SFT			15
+#define RT5616_STO1_T_SCLK			(0x0 << 15)
+#define RT5616_STO1_T_LRCK1			(0x1 << 15)
+#define RT5616_STO2_T_MASK			(0x1 << 12)
+#define RT5616_STO2_T_SFT			12
+#define RT5616_STO2_T_I2S2			(0x0 << 12)
+#define RT5616_STO2_T_LRCK2			(0x1 << 12)
+#define RT5616_ASRC2_REF_MASK			(0x1 << 11)
+#define RT5616_ASRC2_REF_SFT			11
+#define RT5616_ASRC2_REF_LRCK2			(0x0 << 11)
+#define RT5616_ASRC2_REF_LRCK1			(0x1 << 11)
+#define RT5616_DMIC_1_M_MASK			(0x1 << 9)
+#define RT5616_DMIC_1_M_SFT			9
+#define RT5616_DMIC_1_M_NOR			(0x0 << 9)
+#define RT5616_DMIC_1_M_ASYN			(0x1 << 9)
+
+/* PLL tracking mode 2 (0x84) */
+#define RT5616_STO1_ASRC_EN			(0x1 << 15)
+#define RT5616_STO1_ASRC_EN_SFT			15
+#define RT5616_STO2_ASRC_EN			(0x1 << 14)
+#define RT5616_STO2_ASRC_EN_SFT			14
+#define RT5616_STO1_DAC_M_MASK			(0x1 << 13)
+#define RT5616_STO1_DAC_M_SFT			13
+#define RT5616_STO1_DAC_M_NOR			(0x0 << 13)
+#define RT5616_STO1_DAC_M_ASRC			(0x1 << 13)
+#define RT5616_STO2_DAC_M_MASK			(0x1 << 12)
+#define RT5616_STO2_DAC_M_SFT			12
+#define RT5616_STO2_DAC_M_NOR			(0x0 << 12)
+#define RT5616_STO2_DAC_M_ASRC			(0x1 << 12)
+#define RT5616_ADC_M_MASK			(0x1 << 11)
+#define RT5616_ADC_M_SFT			11
+#define RT5616_ADC_M_NOR			(0x0 << 11)
+#define RT5616_ADC_M_ASRC			(0x1 << 11)
+#define RT5616_I2S1_R_D_MASK			(0x1 << 4)
+#define RT5616_I2S1_R_D_SFT			4
+#define RT5616_I2S1_R_D_DIS			(0x0 << 4)
+#define RT5616_I2S1_R_D_EN			(0x1 << 4)
+#define RT5616_I2S2_R_D_MASK			(0x1 << 3)
+#define RT5616_I2S2_R_D_SFT			3
+#define RT5616_I2S2_R_D_DIS			(0x0 << 3)
+#define RT5616_I2S2_R_D_EN			(0x1 << 3)
+#define RT5616_PRE_SCLK_MASK			(0x3)
+#define RT5616_PRE_SCLK_SFT			0
+#define RT5616_PRE_SCLK_512			(0x0)
+#define RT5616_PRE_SCLK_1024			(0x1)
+#define RT5616_PRE_SCLK_2048			(0x2)
+
+/* PLL tracking mode 3 (0x85) */
+#define RT5616_I2S1_RATE_MASK			(0xf << 12)
+#define RT5616_I2S1_RATE_SFT			12
+#define RT5616_I2S2_RATE_MASK			(0xf << 8)
+#define RT5616_I2S2_RATE_SFT			8
+#define RT5616_G_ASRC_LP_MASK			(0x1 << 3)
+#define RT5616_G_ASRC_LP_SFT			3
+#define RT5616_ASRC_LP_F_M			(0x1 << 2)
+#define RT5616_ASRC_LP_F_SFT			2
+#define RT5616_ASRC_LP_F_NOR			(0x0 << 2)
+#define RT5616_ASRC_LP_F_SB			(0x1 << 2)
+#define RT5616_FTK_PH_DET_MASK			(0x3)
+#define RT5616_FTK_PH_DET_SFT			0
+#define RT5616_FTK_PH_DET_DIV1			(0x0)
+#define RT5616_FTK_PH_DET_DIV2			(0x1)
+#define RT5616_FTK_PH_DET_DIV4			(0x2)
+#define RT5616_FTK_PH_DET_DIV8			(0x3)
+
+/*PLL tracking mode 6 (0x89) */
+#define RT5616_I2S1_PD_MASK			(0x7 << 12)
+#define RT5616_I2S1_PD_SFT			12
+#define RT5616_I2S2_PD_MASK			(0x7 << 8)
+#define RT5616_I2S2_PD_SFT			8
+
+/*PLL tracking mode 7 (0x8a) */
+#define RT5616_FSI1_RATE_MASK			(0xf << 12)
+#define RT5616_FSI1_RATE_SFT			12
+#define RT5616_FSI2_RATE_MASK			(0xf << 8)
+#define RT5616_FSI2_RATE_SFT			8
+
+/* HPOUT Over Current Detection (0x8b) */
+#define RT5616_HP_OVCD_MASK			(0x1 << 10)
+#define RT5616_HP_OVCD_SFT			10
+#define RT5616_HP_OVCD_DIS			(0x0 << 10)
+#define RT5616_HP_OVCD_EN			(0x1 << 10)
+#define RT5616_HP_OC_TH_MASK			(0x3 << 8)
+#define RT5616_HP_OC_TH_SFT			8
+#define RT5616_HP_OC_TH_90			(0x0 << 8)
+#define RT5616_HP_OC_TH_105			(0x1 << 8)
+#define RT5616_HP_OC_TH_120			(0x2 << 8)
+#define RT5616_HP_OC_TH_135			(0x3 << 8)
+
+/* Depop Mode Control 1 (0x8e) */
+#define RT5616_SMT_TRIG_MASK			(0x1 << 15)
+#define RT5616_SMT_TRIG_SFT			15
+#define RT5616_SMT_TRIG_DIS			(0x0 << 15)
+#define RT5616_SMT_TRIG_EN			(0x1 << 15)
+#define RT5616_HP_L_SMT_MASK			(0x1 << 9)
+#define RT5616_HP_L_SMT_SFT			9
+#define RT5616_HP_L_SMT_DIS			(0x0 << 9)
+#define RT5616_HP_L_SMT_EN			(0x1 << 9)
+#define RT5616_HP_R_SMT_MASK			(0x1 << 8)
+#define RT5616_HP_R_SMT_SFT			8
+#define RT5616_HP_R_SMT_DIS			(0x0 << 8)
+#define RT5616_HP_R_SMT_EN			(0x1 << 8)
+#define RT5616_HP_CD_PD_MASK			(0x1 << 7)
+#define RT5616_HP_CD_PD_SFT			7
+#define RT5616_HP_CD_PD_DIS			(0x0 << 7)
+#define RT5616_HP_CD_PD_EN			(0x1 << 7)
+#define RT5616_RSTN_MASK			(0x1 << 6)
+#define RT5616_RSTN_SFT				6
+#define RT5616_RSTN_DIS				(0x0 << 6)
+#define RT5616_RSTN_EN				(0x1 << 6)
+#define RT5616_RSTP_MASK			(0x1 << 5)
+#define RT5616_RSTP_SFT				5
+#define RT5616_RSTP_DIS				(0x0 << 5)
+#define RT5616_RSTP_EN				(0x1 << 5)
+#define RT5616_HP_CO_MASK			(0x1 << 4)
+#define RT5616_HP_CO_SFT			4
+#define RT5616_HP_CO_DIS			(0x0 << 4)
+#define RT5616_HP_CO_EN				(0x1 << 4)
+#define RT5616_HP_CP_MASK			(0x1 << 3)
+#define RT5616_HP_CP_SFT			3
+#define RT5616_HP_CP_PD				(0x0 << 3)
+#define RT5616_HP_CP_PU				(0x1 << 3)
+#define RT5616_HP_SG_MASK			(0x1 << 2)
+#define RT5616_HP_SG_SFT			2
+#define RT5616_HP_SG_DIS			(0x0 << 2)
+#define RT5616_HP_SG_EN				(0x1 << 2)
+#define RT5616_HP_DP_MASK			(0x1 << 1)
+#define RT5616_HP_DP_SFT			1
+#define RT5616_HP_DP_PD				(0x0 << 1)
+#define RT5616_HP_DP_PU				(0x1 << 1)
+#define RT5616_HP_CB_MASK			(0x1)
+#define RT5616_HP_CB_SFT			0
+#define RT5616_HP_CB_PD				(0x0)
+#define RT5616_HP_CB_PU				(0x1)
+
+/* Depop Mode Control 2 (0x8f) */
+#define RT5616_DEPOP_MASK			(0x1 << 13)
+#define RT5616_DEPOP_SFT			13
+#define RT5616_DEPOP_AUTO			(0x0 << 13)
+#define RT5616_DEPOP_MAN			(0x1 << 13)
+#define RT5616_RAMP_MASK			(0x1 << 12)
+#define RT5616_RAMP_SFT				12
+#define RT5616_RAMP_DIS				(0x0 << 12)
+#define RT5616_RAMP_EN				(0x1 << 12)
+#define RT5616_BPS_MASK				(0x1 << 11)
+#define RT5616_BPS_SFT				11
+#define RT5616_BPS_DIS				(0x0 << 11)
+#define RT5616_BPS_EN				(0x1 << 11)
+#define RT5616_FAST_UPDN_MASK			(0x1 << 10)
+#define RT5616_FAST_UPDN_SFT			10
+#define RT5616_FAST_UPDN_DIS			(0x0 << 10)
+#define RT5616_FAST_UPDN_EN			(0x1 << 10)
+#define RT5616_MRES_MASK			(0x3 << 8)
+#define RT5616_MRES_SFT				8
+#define RT5616_MRES_15MO			(0x0 << 8)
+#define RT5616_MRES_25MO			(0x1 << 8)
+#define RT5616_MRES_35MO			(0x2 << 8)
+#define RT5616_MRES_45MO			(0x3 << 8)
+#define RT5616_VLO_MASK				(0x1 << 7)
+#define RT5616_VLO_SFT				7
+#define RT5616_VLO_3V				(0x0 << 7)
+#define RT5616_VLO_32V				(0x1 << 7)
+#define RT5616_DIG_DP_MASK			(0x1 << 6)
+#define RT5616_DIG_DP_SFT			6
+#define RT5616_DIG_DP_DIS			(0x0 << 6)
+#define RT5616_DIG_DP_EN			(0x1 << 6)
+#define RT5616_DP_TH_MASK			(0x3 << 4)
+#define RT5616_DP_TH_SFT			4
+
+/* Depop Mode Control 3 (0x90) */
+#define RT5616_CP_SYS_MASK			(0x7 << 12)
+#define RT5616_CP_SYS_SFT			12
+#define RT5616_CP_FQ1_MASK			(0x7 << 8)
+#define RT5616_CP_FQ1_SFT			8
+#define RT5616_CP_FQ2_MASK			(0x7 << 4)
+#define RT5616_CP_FQ2_SFT			4
+#define RT5616_CP_FQ3_MASK			(0x7)
+#define RT5616_CP_FQ3_SFT			0
+#define RT5616_CP_FQ_1_5_KHZ			0
+#define RT5616_CP_FQ_3_KHZ			1
+#define RT5616_CP_FQ_6_KHZ			2
+#define RT5616_CP_FQ_12_KHZ			3
+#define RT5616_CP_FQ_24_KHZ			4
+#define RT5616_CP_FQ_48_KHZ			5
+#define RT5616_CP_FQ_96_KHZ			6
+#define RT5616_CP_FQ_192_KHZ			7
+
+/* HPOUT charge pump (0x91) */
+#define RT5616_OSW_L_MASK			(0x1 << 11)
+#define RT5616_OSW_L_SFT			11
+#define RT5616_OSW_L_DIS			(0x0 << 11)
+#define RT5616_OSW_L_EN				(0x1 << 11)
+#define RT5616_OSW_R_MASK			(0x1 << 10)
+#define RT5616_OSW_R_SFT			10
+#define RT5616_OSW_R_DIS			(0x0 << 10)
+#define RT5616_OSW_R_EN				(0x1 << 10)
+#define RT5616_PM_HP_MASK			(0x3 << 8)
+#define RT5616_PM_HP_SFT			8
+#define RT5616_PM_HP_LV				(0x0 << 8)
+#define RT5616_PM_HP_MV				(0x1 << 8)
+#define RT5616_PM_HP_HV				(0x2 << 8)
+#define RT5616_IB_HP_MASK			(0x3 << 6)
+#define RT5616_IB_HP_SFT			6
+#define RT5616_IB_HP_125IL			(0x0 << 6)
+#define RT5616_IB_HP_25IL			(0x1 << 6)
+#define RT5616_IB_HP_5IL			(0x2 << 6)
+#define RT5616_IB_HP_1IL			(0x3 << 6)
+
+/* Micbias Control (0x93) */
+#define RT5616_MIC1_BS_MASK			(0x1 << 15)
+#define RT5616_MIC1_BS_SFT			15
+#define RT5616_MIC1_BS_9AV			(0x0 << 15)
+#define RT5616_MIC1_BS_75AV			(0x1 << 15)
+#define RT5616_MIC1_CLK_MASK			(0x1 << 13)
+#define RT5616_MIC1_CLK_SFT			13
+#define RT5616_MIC1_CLK_DIS			(0x0 << 13)
+#define RT5616_MIC1_CLK_EN			(0x1 << 13)
+#define RT5616_MIC1_OVCD_MASK			(0x1 << 11)
+#define RT5616_MIC1_OVCD_SFT			11
+#define RT5616_MIC1_OVCD_DIS			(0x0 << 11)
+#define RT5616_MIC1_OVCD_EN			(0x1 << 11)
+#define RT5616_MIC1_OVTH_MASK			(0x3 << 9)
+#define RT5616_MIC1_OVTH_SFT			9
+#define RT5616_MIC1_OVTH_600UA			(0x0 << 9)
+#define RT5616_MIC1_OVTH_1500UA			(0x1 << 9)
+#define RT5616_MIC1_OVTH_2000UA			(0x2 << 9)
+#define RT5616_PWR_MB_MASK			(0x1 << 5)
+#define RT5616_PWR_MB_SFT			5
+#define RT5616_PWR_MB_PD			(0x0 << 5)
+#define RT5616_PWR_MB_PU			(0x1 << 5)
+#define RT5616_PWR_CLK12M_MASK			(0x1 << 4)
+#define RT5616_PWR_CLK12M_SFT			4
+#define RT5616_PWR_CLK12M_PD			(0x0 << 4)
+#define RT5616_PWR_CLK12M_PU			(0x1 << 4)
+
+/* Analog JD Control 1 (0x94) */
+#define RT5616_JD2_CMP_MASK			(0x7 << 12)
+#define RT5616_JD2_CMP_SFT			12
+#define RT5616_JD_PU				(0x1 << 11)
+#define RT5616_JD_PU_SFT			11
+#define RT5616_JD_PD				(0x1 << 10)
+#define RT5616_JD_PD_SFT			10
+#define RT5616_JD_MODE_SEL_MASK			(0x3 << 8)
+#define RT5616_JD_MODE_SEL_SFT			8
+#define RT5616_JD_MODE_SEL_M0			(0x0 << 8)
+#define RT5616_JD_MODE_SEL_M1			(0x1 << 8)
+#define RT5616_JD_MODE_SEL_M2			(0x2 << 8)
+#define RT5616_JD_M_CMP				(0x7 << 4)
+#define RT5616_JD_M_CMP_SFT			4
+#define RT5616_JD_M_PU				(0x1 << 3)
+#define RT5616_JD_M_PU_SFT			3
+#define RT5616_JD_M_PD				(0x1 << 2)
+#define RT5616_JD_M_PD_SFT			2
+#define RT5616_JD_M_MODE_SEL_MASK		(0x3)
+#define RT5616_JD_M_MODE_SEL_SFT		0
+#define RT5616_JD_M_MODE_SEL_M0			(0x0)
+#define RT5616_JD_M_MODE_SEL_M1			(0x1)
+#define RT5616_JD_M_MODE_SEL_M2			(0x2)
+
+/* Analog JD Control 2 (0x95) */
+#define RT5616_JD3_CMP_MASK			(0x7 << 12)
+#define RT5616_JD3_CMP_SFT			12
+
+/* EQ Control 1 (0xb0) */
+#define RT5616_EQ_SRC_MASK			(0x1 << 15)
+#define RT5616_EQ_SRC_SFT			15
+#define RT5616_EQ_SRC_DAC			(0x0 << 15)
+#define RT5616_EQ_SRC_ADC			(0x1 << 15)
+#define RT5616_EQ_UPD				(0x1 << 14)
+#define RT5616_EQ_UPD_BIT			14
+#define RT5616_EQ_CD_MASK			(0x1 << 13)
+#define RT5616_EQ_CD_SFT			13
+#define RT5616_EQ_CD_DIS			(0x0 << 13)
+#define RT5616_EQ_CD_EN				(0x1 << 13)
+#define RT5616_EQ_DITH_MASK			(0x3 << 8)
+#define RT5616_EQ_DITH_SFT			8
+#define RT5616_EQ_DITH_NOR			(0x0 << 8)
+#define RT5616_EQ_DITH_LSB			(0x1 << 8)
+#define RT5616_EQ_DITH_LSB_1			(0x2 << 8)
+#define RT5616_EQ_DITH_LSB_2			(0x3 << 8)
+#define RT5616_EQ_CD_F				(0x1 << 7)
+#define RT5616_EQ_CD_F_BIT			7
+#define RT5616_EQ_STA_HP2			(0x1 << 6)
+#define RT5616_EQ_STA_HP2_BIT			6
+#define RT5616_EQ_STA_HP1			(0x1 << 5)
+#define RT5616_EQ_STA_HP1_BIT			5
+#define RT5616_EQ_STA_BP4			(0x1 << 4)
+#define RT5616_EQ_STA_BP4_BIT			4
+#define RT5616_EQ_STA_BP3			(0x1 << 3)
+#define RT5616_EQ_STA_BP3_BIT			3
+#define RT5616_EQ_STA_BP2			(0x1 << 2)
+#define RT5616_EQ_STA_BP2_BIT			2
+#define RT5616_EQ_STA_BP1			(0x1 << 1)
+#define RT5616_EQ_STA_BP1_BIT			1
+#define RT5616_EQ_STA_LP			(0x1)
+#define RT5616_EQ_STA_LP_BIT			0
+
+/* EQ Control 2 (0xb1) */
+#define RT5616_EQ_HPF1_M_MASK			(0x1 << 8)
+#define RT5616_EQ_HPF1_M_SFT			8
+#define RT5616_EQ_HPF1_M_HI			(0x0 << 8)
+#define RT5616_EQ_HPF1_M_1ST			(0x1 << 8)
+#define RT5616_EQ_LPF1_M_MASK			(0x1 << 7)
+#define RT5616_EQ_LPF1_M_SFT			7
+#define RT5616_EQ_LPF1_M_LO			(0x0 << 7)
+#define RT5616_EQ_LPF1_M_1ST			(0x1 << 7)
+#define RT5616_EQ_HPF2_MASK			(0x1 << 6)
+#define RT5616_EQ_HPF2_SFT			6
+#define RT5616_EQ_HPF2_DIS			(0x0 << 6)
+#define RT5616_EQ_HPF2_EN			(0x1 << 6)
+#define RT5616_EQ_HPF1_MASK			(0x1 << 5)
+#define RT5616_EQ_HPF1_SFT			5
+#define RT5616_EQ_HPF1_DIS			(0x0 << 5)
+#define RT5616_EQ_HPF1_EN			(0x1 << 5)
+#define RT5616_EQ_BPF4_MASK			(0x1 << 4)
+#define RT5616_EQ_BPF4_SFT			4
+#define RT5616_EQ_BPF4_DIS			(0x0 << 4)
+#define RT5616_EQ_BPF4_EN			(0x1 << 4)
+#define RT5616_EQ_BPF3_MASK			(0x1 << 3)
+#define RT5616_EQ_BPF3_SFT			3
+#define RT5616_EQ_BPF3_DIS			(0x0 << 3)
+#define RT5616_EQ_BPF3_EN			(0x1 << 3)
+#define RT5616_EQ_BPF2_MASK			(0x1 << 2)
+#define RT5616_EQ_BPF2_SFT			2
+#define RT5616_EQ_BPF2_DIS			(0x0 << 2)
+#define RT5616_EQ_BPF2_EN			(0x1 << 2)
+#define RT5616_EQ_BPF1_MASK			(0x1 << 1)
+#define RT5616_EQ_BPF1_SFT			1
+#define RT5616_EQ_BPF1_DIS			(0x0 << 1)
+#define RT5616_EQ_BPF1_EN			(0x1 << 1)
+#define RT5616_EQ_LPF_MASK			(0x1)
+#define RT5616_EQ_LPF_SFT			0
+#define RT5616_EQ_LPF_DIS			(0x0)
+#define RT5616_EQ_LPF_EN			(0x1)
+#define RT5616_EQ_CTRL_MASK			(0x7f)
+
+/* Memory Test (0xb2) */
+#define RT5616_MT_MASK				(0x1 << 15)
+#define RT5616_MT_SFT				15
+#define RT5616_MT_DIS				(0x0 << 15)
+#define RT5616_MT_EN				(0x1 << 15)
+
+/* ALC Control 1 (0xb4) */
+#define RT5616_ALC_P_MASK			(0x1 << 15)
+#define RT5616_ALC_P_SFT			15
+#define RT5616_ALC_P_DAC			(0x0 << 15)
+#define RT5616_ALC_P_ADC			(0x1 << 15)
+#define RT5616_ALC_MASK				(0x1 << 14)
+#define RT5616_ALC_SFT				14
+#define RT5616_ALC_DIS				(0x0 << 14)
+#define RT5616_ALC_EN				(0x1 << 14)
+#define RT5616_ALC_UPD				(0x1 << 13)
+#define RT5616_ALC_UPD_BIT			13
+#define RT5616_ALC_AR_MASK			(0x1f << 8)
+#define RT5616_ALC_AR_SFT			8
+#define RT5616_ALC_R_MASK			(0x7 << 5)
+#define RT5616_ALC_R_SFT			5
+#define RT5616_ALC_R_48K			(0x1 << 5)
+#define RT5616_ALC_R_96K			(0x2 << 5)
+#define RT5616_ALC_R_192K			(0x3 << 5)
+#define RT5616_ALC_R_441K			(0x5 << 5)
+#define RT5616_ALC_R_882K			(0x6 << 5)
+#define RT5616_ALC_R_1764K			(0x7 << 5)
+#define RT5616_ALC_RC_MASK			(0x1f)
+#define RT5616_ALC_RC_SFT			0
+
+/* ALC Control 2 (0xb5) */
+#define RT5616_ALC_POB_MASK			(0x3f << 8)
+#define RT5616_ALC_POB_SFT			8
+#define RT5616_ALC_DRC_MASK			(0x1 << 7)
+#define RT5616_ALC_DRC_SFT			7
+#define RT5616_ALC_DRC_DIS			(0x0 << 7)
+#define RT5616_ALC_DRC_EN			(0x1 << 7)
+#define RT5616_ALC_CPR_MASK			(0x3 << 5)
+#define RT5616_ALC_CPR_SFT			5
+#define RT5616_ALC_CPR_1_1			(0x0 << 5)
+#define RT5616_ALC_CPR_1_2			(0x1 << 5)
+#define RT5616_ALC_CPR_1_4			(0x2 << 5)
+#define RT5616_ALC_CPR_1_8			(0x3 << 5)
+#define RT5616_ALC_PRB_MASK			(0x1f)
+#define RT5616_ALC_PRB_SFT			0
+
+/* ALC Control 3 (0xb6) */
+#define RT5616_ALC_NGB_MASK			(0xf << 12)
+#define RT5616_ALC_NGB_SFT			12
+#define RT5616_ALC_TAR_MASK			(0x1f << 7)
+#define RT5616_ALC_TAR_SFT			7
+#define RT5616_ALC_NG_MASK			(0x1 << 6)
+#define RT5616_ALC_NG_SFT			6
+#define RT5616_ALC_NG_DIS			(0x0 << 6)
+#define RT5616_ALC_NG_EN			(0x1 << 6)
+#define RT5616_ALC_NGH_MASK			(0x1 << 5)
+#define RT5616_ALC_NGH_SFT			5
+#define RT5616_ALC_NGH_DIS			(0x0 << 5)
+#define RT5616_ALC_NGH_EN			(0x1 << 5)
+#define RT5616_ALC_NGT_MASK			(0x1f)
+#define RT5616_ALC_NGT_SFT			0
+
+/* Jack Detect Control 1 (0xbb) */
+#define RT5616_JD_MASK				(0x7 << 13)
+#define RT5616_JD_SFT				13
+#define RT5616_JD_DIS				(0x0 << 13)
+#define RT5616_JD_GPIO1				(0x1 << 13)
+#define RT5616_JD_GPIO2				(0x2 << 13)
+#define RT5616_JD_GPIO3				(0x3 << 13)
+#define RT5616_JD_GPIO4				(0x4 << 13)
+#define RT5616_JD_GPIO5				(0x5 << 13)
+#define RT5616_JD_GPIO6				(0x6 << 13)
+#define RT5616_JD_HP_MASK			(0x1 << 11)
+#define RT5616_JD_HP_SFT			11
+#define RT5616_JD_HP_DIS			(0x0 << 11)
+#define RT5616_JD_HP_EN				(0x1 << 11)
+#define RT5616_JD_HP_TRG_MASK			(0x1 << 10)
+#define RT5616_JD_HP_TRG_SFT			10
+#define RT5616_JD_HP_TRG_LO			(0x0 << 10)
+#define RT5616_JD_HP_TRG_HI			(0x1 << 10)
+#define RT5616_JD_SPL_MASK			(0x1 << 9)
+#define RT5616_JD_SPL_SFT			9
+#define RT5616_JD_SPL_DIS			(0x0 << 9)
+#define RT5616_JD_SPL_EN			(0x1 << 9)
+#define RT5616_JD_SPL_TRG_MASK			(0x1 << 8)
+#define RT5616_JD_SPL_TRG_SFT			8
+#define RT5616_JD_SPL_TRG_LO			(0x0 << 8)
+#define RT5616_JD_SPL_TRG_HI			(0x1 << 8)
+#define RT5616_JD_SPR_MASK			(0x1 << 7)
+#define RT5616_JD_SPR_SFT			7
+#define RT5616_JD_SPR_DIS			(0x0 << 7)
+#define RT5616_JD_SPR_EN			(0x1 << 7)
+#define RT5616_JD_SPR_TRG_MASK			(0x1 << 6)
+#define RT5616_JD_SPR_TRG_SFT			6
+#define RT5616_JD_SPR_TRG_LO			(0x0 << 6)
+#define RT5616_JD_SPR_TRG_HI			(0x1 << 6)
+#define RT5616_JD_LO_MASK			(0x1 << 3)
+#define RT5616_JD_LO_SFT			3
+#define RT5616_JD_LO_DIS			(0x0 << 3)
+#define RT5616_JD_LO_EN				(0x1 << 3)
+#define RT5616_JD_LO_TRG_MASK			(0x1 << 2)
+#define RT5616_JD_LO_TRG_SFT			2
+#define RT5616_JD_LO_TRG_LO			(0x0 << 2)
+#define RT5616_JD_LO_TRG_HI			(0x1 << 2)
+
+/* Jack Detect Control 2 (0xbc) */
+#define RT5616_JD_TRG_SEL_MASK			(0x7 << 9)
+#define RT5616_JD_TRG_SEL_SFT			9
+#define RT5616_JD_TRG_SEL_GPIO			(0x0 << 9)
+#define RT5616_JD_TRG_SEL_JD1_1			(0x1 << 9)
+#define RT5616_JD_TRG_SEL_JD1_2			(0x2 << 9)
+#define RT5616_JD_TRG_SEL_JD2			(0x3 << 9)
+#define RT5616_JD_TRG_SEL_JD3			(0x4 << 9)
+#define RT5616_JD3_IRQ_EN			(0x1 << 8)
+#define RT5616_JD3_IRQ_EN_SFT			8
+#define RT5616_JD3_EN_STKY			(0x1 << 7)
+#define RT5616_JD3_EN_STKY_SFT			7
+#define RT5616_JD3_INV				(0x1 << 6)
+#define RT5616_JD3_INV_SFT			6
+
+/* IRQ Control 1 (0xbd) */
+#define RT5616_IRQ_JD_MASK			(0x1 << 15)
+#define RT5616_IRQ_JD_SFT			15
+#define RT5616_IRQ_JD_BP			(0x0 << 15)
+#define RT5616_IRQ_JD_NOR			(0x1 << 15)
+#define RT5616_JD_STKY_MASK			(0x1 << 13)
+#define RT5616_JD_STKY_SFT			13
+#define RT5616_JD_STKY_DIS			(0x0 << 13)
+#define RT5616_JD_STKY_EN			(0x1 << 13)
+#define RT5616_JD_P_MASK			(0x1 << 11)
+#define RT5616_JD_P_SFT				11
+#define RT5616_JD_P_NOR				(0x0 << 11)
+#define RT5616_JD_P_INV				(0x1 << 11)
+#define RT5616_JD1_1_IRQ_EN			(0x1 << 9)
+#define RT5616_JD1_1_IRQ_EN_SFT			9
+#define RT5616_JD1_1_EN_STKY			(0x1 << 8)
+#define RT5616_JD1_1_EN_STKY_SFT			8
+#define RT5616_JD1_1_INV			(0x1 << 7)
+#define RT5616_JD1_1_INV_SFT			7
+#define RT5616_JD1_2_IRQ_EN			(0x1 << 6)
+#define RT5616_JD1_2_IRQ_EN_SFT			6
+#define RT5616_JD1_2_EN_STKY			(0x1 << 5)
+#define RT5616_JD1_2_EN_STKY_SFT			5
+#define RT5616_JD1_2_INV			(0x1 << 4)
+#define RT5616_JD1_2_INV_SFT			4
+#define RT5616_JD2_IRQ_EN			(0x1 << 3)
+#define RT5616_JD2_IRQ_EN_SFT			3
+#define RT5616_JD2_EN_STKY			(0x1 << 2)
+#define RT5616_JD2_EN_STKY_SFT			2
+#define RT5616_JD2_INV				(0x1 << 1)
+#define RT5616_JD2_INV_SFT			1
+
+/* IRQ Control 2 (0xbe) */
+#define RT5616_IRQ_MB1_OC_MASK			(0x1 << 15)
+#define RT5616_IRQ_MB1_OC_SFT			15
+#define RT5616_IRQ_MB1_OC_BP			(0x0 << 15)
+#define RT5616_IRQ_MB1_OC_NOR			(0x1 << 15)
+#define RT5616_MB1_OC_STKY_MASK			(0x1 << 11)
+#define RT5616_MB1_OC_STKY_SFT			11
+#define RT5616_MB1_OC_STKY_DIS			(0x0 << 11)
+#define RT5616_MB1_OC_STKY_EN			(0x1 << 11)
+#define RT5616_MB1_OC_P_MASK			(0x1 << 7)
+#define RT5616_MB1_OC_P_SFT			7
+#define RT5616_MB1_OC_P_NOR			(0x0 << 7)
+#define RT5616_MB1_OC_P_INV			(0x1 << 7)
+#define RT5616_MB2_OC_P_MASK			(0x1 << 6)
+#define RT5616_MB1_OC_CLR			(0x1 << 3)
+#define RT5616_MB1_OC_CLR_SFT			3
+#define RT5616_STA_GPIO8			(0x1)
+#define RT5616_STA_GPIO8_BIT			0
+
+/* Internal Status and GPIO status (0xbf) */
+#define RT5616_STA_JD3				(0x1 << 15)
+#define RT5616_STA_JD3_BIT			15
+#define RT5616_STA_JD2				(0x1 << 14)
+#define RT5616_STA_JD2_BIT			14
+#define RT5616_STA_JD1_2			(0x1 << 13)
+#define RT5616_STA_JD1_2_BIT			13
+#define RT5616_STA_JD1_1			(0x1 << 12)
+#define RT5616_STA_JD1_1_BIT			12
+#define RT5616_STA_GP7				(0x1 << 11)
+#define RT5616_STA_GP7_BIT			11
+#define RT5616_STA_GP6				(0x1 << 10)
+#define RT5616_STA_GP6_BIT			10
+#define RT5616_STA_GP5				(0x1 << 9)
+#define RT5616_STA_GP5_BIT			9
+#define RT5616_STA_GP1				(0x1 << 8)
+#define RT5616_STA_GP1_BIT			8
+#define RT5616_STA_GP2				(0x1 << 7)
+#define RT5616_STA_GP2_BIT			7
+#define RT5616_STA_GP3				(0x1 << 6)
+#define RT5616_STA_GP3_BIT			6
+#define RT5616_STA_GP4				(0x1 << 5)
+#define RT5616_STA_GP4_BIT			5
+#define RT5616_STA_GP_JD			(0x1 << 4)
+#define RT5616_STA_GP_JD_BIT			4
+
+/* GPIO Control 1 (0xc0) */
+#define RT5616_GP1_PIN_MASK			(0x1 << 15)
+#define RT5616_GP1_PIN_SFT			15
+#define RT5616_GP1_PIN_GPIO1			(0x0 << 15)
+#define RT5616_GP1_PIN_IRQ			(0x1 << 15)
+#define RT5616_GP2_PIN_MASK			(0x1 << 14)
+#define RT5616_GP2_PIN_SFT			14
+#define RT5616_GP2_PIN_GPIO2			(0x0 << 14)
+#define RT5616_GP2_PIN_DMIC1_SCL		(0x1 << 14)
+#define RT5616_GPIO_M_MASK			(0x1 << 9)
+#define RT5616_GPIO_M_SFT			9
+#define RT5616_GPIO_M_FLT			(0x0 << 9)
+#define RT5616_GPIO_M_PH			(0x1 << 9)
+#define RT5616_I2S2_SEL_MASK			(0x1 << 8)
+#define RT5616_I2S2_SEL_SFT			8
+#define RT5616_I2S2_SEL_I2S			(0x0 << 8)
+#define RT5616_I2S2_SEL_GPIO			(0x1 << 8)
+#define RT5616_GP5_PIN_MASK			(0x1 << 7)
+#define RT5616_GP5_PIN_SFT			7
+#define RT5616_GP5_PIN_GPIO5			(0x0 << 7)
+#define RT5616_GP5_PIN_IRQ			(0x1 << 7)
+#define RT5616_GP6_PIN_MASK			(0x1 << 6)
+#define RT5616_GP6_PIN_SFT			6
+#define RT5616_GP6_PIN_GPIO6			(0x0 << 6)
+#define RT5616_GP6_PIN_DMIC_SDA			(0x1 << 6)
+#define RT5616_GP7_PIN_MASK			(0x1 << 5)
+#define RT5616_GP7_PIN_SFT			5
+#define RT5616_GP7_PIN_GPIO7			(0x0 << 5)
+#define RT5616_GP7_PIN_IRQ			(0x1 << 5)
+#define RT5616_GP8_PIN_MASK			(0x1 << 4)
+#define RT5616_GP8_PIN_SFT			4
+#define RT5616_GP8_PIN_GPIO8			(0x0 << 4)
+#define RT5616_GP8_PIN_DMIC_SDA			(0x1 << 4)
+#define RT5616_GPIO_PDM_SEL_MASK		(0x1 << 3)
+#define RT5616_GPIO_PDM_SEL_SFT			3
+#define RT5616_GPIO_PDM_SEL_GPIO		(0x0 << 3)
+#define RT5616_GPIO_PDM_SEL_PDM			(0x1 << 3)
+
+/* GPIO Control 2 (0xc1) */
+#define RT5616_GP5_DR_MASK			(0x1 << 14)
+#define RT5616_GP5_DR_SFT			14
+#define RT5616_GP5_DR_IN			(0x0 << 14)
+#define RT5616_GP5_DR_OUT			(0x1 << 14)
+#define RT5616_GP5_OUT_MASK			(0x1 << 13)
+#define RT5616_GP5_OUT_SFT			13
+#define RT5616_GP5_OUT_LO			(0x0 << 13)
+#define RT5616_GP5_OUT_HI			(0x1 << 13)
+#define RT5616_GP5_P_MASK			(0x1 << 12)
+#define RT5616_GP5_P_SFT			12
+#define RT5616_GP5_P_NOR			(0x0 << 12)
+#define RT5616_GP5_P_INV			(0x1 << 12)
+#define RT5616_GP4_DR_MASK			(0x1 << 11)
+#define RT5616_GP4_DR_SFT			11
+#define RT5616_GP4_DR_IN			(0x0 << 11)
+#define RT5616_GP4_DR_OUT			(0x1 << 11)
+#define RT5616_GP4_OUT_MASK			(0x1 << 10)
+#define RT5616_GP4_OUT_SFT			10
+#define RT5616_GP4_OUT_LO			(0x0 << 10)
+#define RT5616_GP4_OUT_HI			(0x1 << 10)
+#define RT5616_GP4_P_MASK			(0x1 << 9)
+#define RT5616_GP4_P_SFT			9
+#define RT5616_GP4_P_NOR			(0x0 << 9)
+#define RT5616_GP4_P_INV			(0x1 << 9)
+#define RT5616_GP3_DR_MASK			(0x1 << 8)
+#define RT5616_GP3_DR_SFT			8
+#define RT5616_GP3_DR_IN			(0x0 << 8)
+#define RT5616_GP3_DR_OUT			(0x1 << 8)
+#define RT5616_GP3_OUT_MASK			(0x1 << 7)
+#define RT5616_GP3_OUT_SFT			7
+#define RT5616_GP3_OUT_LO			(0x0 << 7)
+#define RT5616_GP3_OUT_HI			(0x1 << 7)
+#define RT5616_GP3_P_MASK			(0x1 << 6)
+#define RT5616_GP3_P_SFT			6
+#define RT5616_GP3_P_NOR			(0x0 << 6)
+#define RT5616_GP3_P_INV			(0x1 << 6)
+#define RT5616_GP2_DR_MASK			(0x1 << 5)
+#define RT5616_GP2_DR_SFT			5
+#define RT5616_GP2_DR_IN			(0x0 << 5)
+#define RT5616_GP2_DR_OUT			(0x1 << 5)
+#define RT5616_GP2_OUT_MASK			(0x1 << 4)
+#define RT5616_GP2_OUT_SFT			4
+#define RT5616_GP2_OUT_LO			(0x0 << 4)
+#define RT5616_GP2_OUT_HI			(0x1 << 4)
+#define RT5616_GP2_P_MASK			(0x1 << 3)
+#define RT5616_GP2_P_SFT			3
+#define RT5616_GP2_P_NOR			(0x0 << 3)
+#define RT5616_GP2_P_INV			(0x1 << 3)
+#define RT5616_GP1_DR_MASK			(0x1 << 2)
+#define RT5616_GP1_DR_SFT			2
+#define RT5616_GP1_DR_IN			(0x0 << 2)
+#define RT5616_GP1_DR_OUT			(0x1 << 2)
+#define RT5616_GP1_OUT_MASK			(0x1 << 1)
+#define RT5616_GP1_OUT_SFT			1
+#define RT5616_GP1_OUT_LO			(0x0 << 1)
+#define RT5616_GP1_OUT_HI			(0x1 << 1)
+#define RT5616_GP1_P_MASK			(0x1)
+#define RT5616_GP1_P_SFT			0
+#define RT5616_GP1_P_NOR			(0x0)
+#define RT5616_GP1_P_INV			(0x1)
+
+/* GPIO Control 3 (0xc2) */
+#define RT5616_GP8_DR_MASK			(0x1 << 8)
+#define RT5616_GP8_DR_SFT			8
+#define RT5616_GP8_DR_IN			(0x0 << 8)
+#define RT5616_GP8_DR_OUT			(0x1 << 8)
+#define RT5616_GP8_OUT_MASK			(0x1 << 7)
+#define RT5616_GP8_OUT_SFT			7
+#define RT5616_GP8_OUT_LO			(0x0 << 7)
+#define RT5616_GP8_OUT_HI			(0x1 << 7)
+#define RT5616_GP8_P_MASK			(0x1 << 6)
+#define RT5616_GP8_P_SFT			6
+#define RT5616_GP8_P_NOR			(0x0 << 6)
+#define RT5616_GP8_P_INV			(0x1 << 6)
+#define RT5616_GP7_DR_MASK			(0x1 << 5)
+#define RT5616_GP7_DR_SFT			5
+#define RT5616_GP7_DR_IN			(0x0 << 5)
+#define RT5616_GP7_DR_OUT			(0x1 << 5)
+#define RT5616_GP7_OUT_MASK			(0x1 << 4)
+#define RT5616_GP7_OUT_SFT			4
+#define RT5616_GP7_OUT_LO			(0x0 << 4)
+#define RT5616_GP7_OUT_HI			(0x1 << 4)
+#define RT5616_GP7_P_MASK			(0x1 << 3)
+#define RT5616_GP7_P_SFT			3
+#define RT5616_GP7_P_NOR			(0x0 << 3)
+#define RT5616_GP7_P_INV			(0x1 << 3)
+#define RT5616_GP6_DR_MASK			(0x1 << 2)
+#define RT5616_GP6_DR_SFT			2
+#define RT5616_GP6_DR_IN			(0x0 << 2)
+#define RT5616_GP6_DR_OUT			(0x1 << 2)
+#define RT5616_GP6_OUT_MASK			(0x1 << 1)
+#define RT5616_GP6_OUT_SFT			1
+#define RT5616_GP6_OUT_LO			(0x0 << 1)
+#define RT5616_GP6_OUT_HI			(0x1 << 1)
+#define RT5616_GP6_P_MASK			(0x1)
+#define RT5616_GP6_P_SFT			0
+#define RT5616_GP6_P_NOR			(0x0)
+#define RT5616_GP6_P_INV			(0x1)
+
+/* Scramble Control (0xce) */
+#define RT5616_SCB_SWAP_MASK			(0x1 << 15)
+#define RT5616_SCB_SWAP_SFT			15
+#define RT5616_SCB_SWAP_DIS			(0x0 << 15)
+#define RT5616_SCB_SWAP_EN			(0x1 << 15)
+#define RT5616_SCB_MASK				(0x1 << 14)
+#define RT5616_SCB_SFT				14
+#define RT5616_SCB_DIS				(0x0 << 14)
+#define RT5616_SCB_EN				(0x1 << 14)
+
+/* Baseback Control (0xcf) */
+#define RT5616_BB_MASK				(0x1 << 15)
+#define RT5616_BB_SFT				15
+#define RT5616_BB_DIS				(0x0 << 15)
+#define RT5616_BB_EN				(0x1 << 15)
+#define RT5616_BB_CT_MASK			(0x7 << 12)
+#define RT5616_BB_CT_SFT			12
+#define RT5616_BB_CT_A				(0x0 << 12)
+#define RT5616_BB_CT_B				(0x1 << 12)
+#define RT5616_BB_CT_C				(0x2 << 12)
+#define RT5616_BB_CT_D				(0x3 << 12)
+#define RT5616_M_BB_L_MASK			(0x1 << 9)
+#define RT5616_M_BB_L_SFT			9
+#define RT5616_M_BB_R_MASK			(0x1 << 8)
+#define RT5616_M_BB_R_SFT			8
+#define RT5616_M_BB_HPF_L_MASK			(0x1 << 7)
+#define RT5616_M_BB_HPF_L_SFT			7
+#define RT5616_M_BB_HPF_R_MASK			(0x1 << 6)
+#define RT5616_M_BB_HPF_R_SFT			6
+#define RT5616_G_BB_BST_MASK			(0x3f)
+#define RT5616_G_BB_BST_SFT			0
+
+/* MP3 Plus Control 1 (0xd0) */
+#define RT5616_M_MP3_L_MASK			(0x1 << 15)
+#define RT5616_M_MP3_L_SFT			15
+#define RT5616_M_MP3_R_MASK			(0x1 << 14)
+#define RT5616_M_MP3_R_SFT			14
+#define RT5616_M_MP3_MASK			(0x1 << 13)
+#define RT5616_M_MP3_SFT			13
+#define RT5616_M_MP3_DIS			(0x0 << 13)
+#define RT5616_M_MP3_EN				(0x1 << 13)
+#define RT5616_EG_MP3_MASK			(0x1f << 8)
+#define RT5616_EG_MP3_SFT			8
+#define RT5616_MP3_HLP_MASK			(0x1 << 7)
+#define RT5616_MP3_HLP_SFT			7
+#define RT5616_MP3_HLP_DIS			(0x0 << 7)
+#define RT5616_MP3_HLP_EN			(0x1 << 7)
+#define RT5616_M_MP3_ORG_L_MASK			(0x1 << 6)
+#define RT5616_M_MP3_ORG_L_SFT			6
+#define RT5616_M_MP3_ORG_R_MASK			(0x1 << 5)
+#define RT5616_M_MP3_ORG_R_SFT			5
+
+/* MP3 Plus Control 2 (0xd1) */
+#define RT5616_MP3_WT_MASK			(0x1 << 13)
+#define RT5616_MP3_WT_SFT			13
+#define RT5616_MP3_WT_1_4			(0x0 << 13)
+#define RT5616_MP3_WT_1_2			(0x1 << 13)
+#define RT5616_OG_MP3_MASK			(0x1f << 8)
+#define RT5616_OG_MP3_SFT			8
+#define RT5616_HG_MP3_MASK			(0x3f)
+#define RT5616_HG_MP3_SFT			0
+
+/* 3D HP Control 1 (0xd2) */
+#define RT5616_3D_CF_MASK			(0x1 << 15)
+#define RT5616_3D_CF_SFT			15
+#define RT5616_3D_CF_DIS			(0x0 << 15)
+#define RT5616_3D_CF_EN				(0x1 << 15)
+#define RT5616_3D_HP_MASK			(0x1 << 14)
+#define RT5616_3D_HP_SFT			14
+#define RT5616_3D_HP_DIS			(0x0 << 14)
+#define RT5616_3D_HP_EN				(0x1 << 14)
+#define RT5616_3D_BT_MASK			(0x1 << 13)
+#define RT5616_3D_BT_SFT			13
+#define RT5616_3D_BT_DIS			(0x0 << 13)
+#define RT5616_3D_BT_EN				(0x1 << 13)
+#define RT5616_3D_1F_MIX_MASK			(0x3 << 11)
+#define RT5616_3D_1F_MIX_SFT			11
+#define RT5616_3D_HP_M_MASK			(0x1 << 10)
+#define RT5616_3D_HP_M_SFT			10
+#define RT5616_3D_HP_M_SUR			(0x0 << 10)
+#define RT5616_3D_HP_M_FRO			(0x1 << 10)
+#define RT5616_M_3D_HRTF_MASK			(0x1 << 9)
+#define RT5616_M_3D_HRTF_SFT			9
+#define RT5616_M_3D_D2H_MASK			(0x1 << 8)
+#define RT5616_M_3D_D2H_SFT			8
+#define RT5616_M_3D_D2R_MASK			(0x1 << 7)
+#define RT5616_M_3D_D2R_SFT			7
+#define RT5616_M_3D_REVB_MASK			(0x1 << 6)
+#define RT5616_M_3D_REVB_SFT			6
+
+/* Adjustable high pass filter control 1 (0xd3) */
+#define RT5616_2ND_HPF_MASK			(0x1 << 15)
+#define RT5616_2ND_HPF_SFT			15
+#define RT5616_2ND_HPF_DIS			(0x0 << 15)
+#define RT5616_2ND_HPF_EN			(0x1 << 15)
+#define RT5616_HPF_CF_L_MASK			(0x7 << 12)
+#define RT5616_HPF_CF_L_SFT			12
+#define RT5616_HPF_CF_R_MASK			(0x7 << 8)
+#define RT5616_HPF_CF_R_SFT			8
+#define RT5616_ZD_T_MASK			(0x3 << 6)
+#define RT5616_ZD_T_SFT				6
+#define RT5616_ZD_F_MASK			(0x3 << 4)
+#define RT5616_ZD_F_SFT				4
+#define RT5616_ZD_F_IM				(0x0 << 4)
+#define RT5616_ZD_F_ZC_IM			(0x1 << 4)
+#define RT5616_ZD_F_ZC_IOD			(0x2 << 4)
+#define RT5616_ZD_F_UN				(0x3 << 4)
+
+/* Adjustable high pass filter control 2 (0xd4) */
+#define RT5616_HPF_CF_L_NUM_MASK		(0x3f << 8)
+#define RT5616_HPF_CF_L_NUM_SFT			8
+#define RT5616_HPF_CF_R_NUM_MASK		(0x3f)
+#define RT5616_HPF_CF_R_NUM_SFT			0
+
+/* HP calibration control and Amp detection (0xd6) */
+#define RT5616_SI_DAC_MASK			(0x1 << 11)
+#define RT5616_SI_DAC_SFT			11
+#define RT5616_SI_DAC_AUTO			(0x0 << 11)
+#define RT5616_SI_DAC_TEST			(0x1 << 11)
+#define RT5616_DC_CAL_M_MASK			(0x1 << 10)
+#define RT5616_DC_CAL_M_SFT			10
+#define RT5616_DC_CAL_M_NOR			(0x0 << 10)
+#define RT5616_DC_CAL_M_CAL			(0x1 << 10)
+#define RT5616_DC_CAL_MASK			(0x1 << 9)
+#define RT5616_DC_CAL_SFT			9
+#define RT5616_DC_CAL_DIS			(0x0 << 9)
+#define RT5616_DC_CAL_EN			(0x1 << 9)
+#define RT5616_HPD_RCV_MASK			(0x7 << 6)
+#define RT5616_HPD_RCV_SFT			6
+#define RT5616_HPD_PS_MASK			(0x1 << 5)
+#define RT5616_HPD_PS_SFT			5
+#define RT5616_HPD_PS_DIS			(0x0 << 5)
+#define RT5616_HPD_PS_EN			(0x1 << 5)
+#define RT5616_CAL_M_MASK			(0x1 << 4)
+#define RT5616_CAL_M_SFT			4
+#define RT5616_CAL_M_DEP			(0x0 << 4)
+#define RT5616_CAL_M_CAL			(0x1 << 4)
+#define RT5616_CAL_MASK				(0x1 << 3)
+#define RT5616_CAL_SFT				3
+#define RT5616_CAL_DIS				(0x0 << 3)
+#define RT5616_CAL_EN				(0x1 << 3)
+#define RT5616_CAL_TEST_MASK			(0x1 << 2)
+#define RT5616_CAL_TEST_SFT			2
+#define RT5616_CAL_TEST_DIS			(0x0 << 2)
+#define RT5616_CAL_TEST_EN			(0x1 << 2)
+#define RT5616_CAL_P_MASK			(0x3)
+#define RT5616_CAL_P_SFT			0
+#define RT5616_CAL_P_NONE			(0x0)
+#define RT5616_CAL_P_CAL			(0x1)
+#define RT5616_CAL_P_DAC_CAL			(0x2)
+
+/* Soft volume and zero cross control 1 (0xd9) */
+#define RT5616_SV_MASK				(0x1 << 15)
+#define RT5616_SV_SFT				15
+#define RT5616_SV_DIS				(0x0 << 15)
+#define RT5616_SV_EN				(0x1 << 15)
+#define RT5616_OUT_SV_MASK			(0x1 << 13)
+#define RT5616_OUT_SV_SFT			13
+#define RT5616_OUT_SV_DIS			(0x0 << 13)
+#define RT5616_OUT_SV_EN			(0x1 << 13)
+#define RT5616_HP_SV_MASK			(0x1 << 12)
+#define RT5616_HP_SV_SFT			12
+#define RT5616_HP_SV_DIS			(0x0 << 12)
+#define RT5616_HP_SV_EN				(0x1 << 12)
+#define RT5616_ZCD_DIG_MASK			(0x1 << 11)
+#define RT5616_ZCD_DIG_SFT			11
+#define RT5616_ZCD_DIG_DIS			(0x0 << 11)
+#define RT5616_ZCD_DIG_EN			(0x1 << 11)
+#define RT5616_ZCD_MASK				(0x1 << 10)
+#define RT5616_ZCD_SFT				10
+#define RT5616_ZCD_PD				(0x0 << 10)
+#define RT5616_ZCD_PU				(0x1 << 10)
+#define RT5616_M_ZCD_MASK			(0x3f << 4)
+#define RT5616_M_ZCD_SFT			4
+#define RT5616_M_ZCD_OM_L			(0x1 << 7)
+#define RT5616_M_ZCD_OM_R			(0x1 << 6)
+#define RT5616_M_ZCD_RM_L			(0x1 << 5)
+#define RT5616_M_ZCD_RM_R			(0x1 << 4)
+#define RT5616_SV_DLY_MASK			(0xf)
+#define RT5616_SV_DLY_SFT			0
+
+/* Soft volume and zero cross control 2 (0xda) */
+#define RT5616_ZCD_HP_MASK			(0x1 << 15)
+#define RT5616_ZCD_HP_SFT			15
+#define RT5616_ZCD_HP_DIS			(0x0 << 15)
+#define RT5616_ZCD_HP_EN			(0x1 << 15)
+
+/* Digital Misc Control (0xfa) */
+#define RT5616_I2S2_MS_SP_MASK			(0x1 << 8)
+#define RT5616_I2S2_MS_SP_SEL			8
+#define RT5616_I2S2_MS_SP_64			(0x0 << 8)
+#define RT5616_I2S2_MS_SP_50			(0x1 << 8)
+#define RT5616_CLK_DET_EN			(0x1 << 3)
+#define RT5616_CLK_DET_EN_SFT			3
+#define RT5616_AMP_DET_EN			(0x1 << 1)
+#define RT5616_AMP_DET_EN_SFT			1
+#define RT5616_D_GATE_EN			(0x1)
+#define RT5616_D_GATE_EN_SFT			0
+
+/* Codec Private Register definition */
+/* 3D Speaker Control (0x63) */
+#define RT5616_3D_SPK_MASK			(0x1 << 15)
+#define RT5616_3D_SPK_SFT			15
+#define RT5616_3D_SPK_DIS			(0x0 << 15)
+#define RT5616_3D_SPK_EN			(0x1 << 15)
+#define RT5616_3D_SPK_M_MASK			(0x3 << 13)
+#define RT5616_3D_SPK_M_SFT			13
+#define RT5616_3D_SPK_CG_MASK			(0x1f << 8)
+#define RT5616_3D_SPK_CG_SFT			8
+#define RT5616_3D_SPK_SG_MASK			(0x1f)
+#define RT5616_3D_SPK_SG_SFT			0
+
+/* Wind Noise Detection Control 1 (0x6c) */
+#define RT5616_WND_MASK				(0x1 << 15)
+#define RT5616_WND_SFT				15
+#define RT5616_WND_DIS				(0x0 << 15)
+#define RT5616_WND_EN				(0x1 << 15)
+
+/* Wind Noise Detection Control 2 (0x6d) */
+#define RT5616_WND_FC_NW_MASK			(0x3f << 10)
+#define RT5616_WND_FC_NW_SFT			10
+#define RT5616_WND_FC_WK_MASK			(0x3f << 4)
+#define RT5616_WND_FC_WK_SFT			4
+
+/* Wind Noise Detection Control 3 (0x6e) */
+#define RT5616_HPF_FC_MASK			(0x3f << 6)
+#define RT5616_HPF_FC_SFT			6
+#define RT5616_WND_FC_ST_MASK			(0x3f)
+#define RT5616_WND_FC_ST_SFT			0
+
+/* Wind Noise Detection Control 4 (0x6f) */
+#define RT5616_WND_TH_LO_MASK			(0x3ff)
+#define RT5616_WND_TH_LO_SFT			0
+
+/* Wind Noise Detection Control 5 (0x70) */
+#define RT5616_WND_TH_HI_MASK			(0x3ff)
+#define RT5616_WND_TH_HI_SFT			0
+
+/* Wind Noise Detection Control 8 (0x73) */
+#define RT5616_WND_WIND_MASK			(0x1 << 13) /* Read-Only */
+#define RT5616_WND_WIND_SFT			13
+#define RT5616_WND_STRONG_MASK			(0x1 << 12) /* Read-Only */
+#define RT5616_WND_STRONG_SFT			12
+enum {
+	RT5616_NO_WIND,
+	RT5616_BREEZE,
+	RT5616_STORM,
+};
+
+/* Dipole Speaker Interface (0x75) */
+#define RT5616_DP_ATT_MASK			(0x3 << 14)
+#define RT5616_DP_ATT_SFT			14
+#define RT5616_DP_SPK_MASK			(0x1 << 10)
+#define RT5616_DP_SPK_SFT			10
+#define RT5616_DP_SPK_DIS			(0x0 << 10)
+#define RT5616_DP_SPK_EN			(0x1 << 10)
+
+/* EQ Pre Volume Control (0xb3) */
+#define RT5616_EQ_PRE_VOL_MASK			(0xffff)
+#define RT5616_EQ_PRE_VOL_SFT			0
+
+/* EQ Post Volume Control (0xb4) */
+#define RT5616_EQ_PST_VOL_MASK			(0xffff)
+#define RT5616_EQ_PST_VOL_SFT			0
+
+/* Vendor ID (0xfd) */
+#define RT5616_VER_C				0x2
+#define RT5616_VER_D				0x3
+
+
+/* Volume Rescale */
+#define RT5616_VOL_RSCL_MAX 0x27
+#define RT5616_VOL_RSCL_RANGE 0x1F
+/* Debug String Length */
+#define RT5616_REG_DISP_LEN 10
+
+#define RT5616_NO_JACK		BIT(0)
+#define RT5616_HEADSET_DET	BIT(1)
+#define RT5616_HEADPHO_DET	BIT(2)
+
+int rt5616_headset_detect(struct snd_soc_codec *codec, int jack_insert);
+
+
+/* System Clock Source */
+enum {
+	RT5616_SCLK_S_MCLK,
+	RT5616_SCLK_S_PLL1,
+};
+
+/* PLL1 Source */
+enum {
+	RT5616_PLL1_S_MCLK,
+	RT5616_PLL1_S_BCLK1,
+	RT5616_PLL1_S_BCLK2,
+	RT5616_PLL1_S_BCLK3,
+};
+
+enum {
+	RT5616_AIF1,
+	RT5616_AIF2,
+	RT5616_AIF3,
+	RT5616_AIFS,
+};
+
+#define RT5616_U_IF1 (0x1)
+#define RT5616_U_IF2 (0x1 << 1)
+#define RT5616_U_IF3 (0x1 << 2)
+
+
+struct rt5616_pll_code {
+	bool m_bp; /* Indicates bypass m code or not. */
+	int m_code;
+	int n_code;
+	int k_code;
+};
+
+struct rt5616_priv {
+	struct snd_soc_codec *codec;
+	struct delayed_work patch_work;
+
+	int aif_pu;
+	int sysclk;
+	int sysclk_src;
+	int lrck[RT5616_AIFS];
+	int bclk[RT5616_AIFS];
+	int master[RT5616_AIFS];
+
+	int pll_src;
+	int pll_in;
+	int pll_out;
+
+	int dmic_en;
+};
+#endif /* __RT5616_H__ */
-- 
2.19.0

