From 6426b8bfeb60e7baea4e0eafc3f6d0422c043c5d Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Fri, 6 Dec 2013 22:03:08 +0800
Subject: [PATCH 2380/5965] PD #82377: add edp link rate adjust function in lcd
 driver

Squashed commit of the following:

commit 275260956439abe2a05308f2b3959ece28188e62
Author: Evoke Zhang <evoke.zhang@amlogic.com>
Date:   Fri Dec 6 11:24:07 2013 +0800

    add delay after edp training for power sequence

commit a2cf55b6a2dc3d60d279312cbc236db931d43708
Author: Evoke Zhang <evoke.zhang@amlogic.com>
Date:   Tue Dec 3 19:00:08 2013 +0800

    PD #82377: add edp link rate adjust function in lcd driver

commit 81dda99a11a7c4d4eb76a45a2c4bb888d05493a1
Author: Evoke Zhang <evoke.zhang@amlogic.com>
Date:   Fri Nov 22 19:22:22 2013 +0800

    PD #82377: update edp link adaptive function in lcd driver
---
 drivers/amlogic/display/vout/edp_drv.c | 610 ++++++++++++-------------
 drivers/amlogic/display/vout/edp_drv.h |  15 +-
 drivers/amlogic/display/vout/lcdoutc.c | 197 ++++++--
 include/linux/amlogic/vout/lcdoutc.h   |   4 +-
 4 files changed, 463 insertions(+), 363 deletions(-)

diff --git a/drivers/amlogic/display/vout/edp_drv.c b/drivers/amlogic/display/vout/edp_drv.c
index bef28308ea1c..5ea3b8aa1835 100755
--- a/drivers/amlogic/display/vout/edp_drv.c
+++ b/drivers/amlogic/display/vout/edp_drv.c
@@ -5,21 +5,14 @@
  *
  */
 
-#include <linux/init.h>
 #include <linux/version.h>
 #include <linux/types.h>
-#include <linux/slab.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
 #include <linux/string.h>
 #include <linux/kernel.h>
-#include <linux/interrupt.h>
-#include <linux/amlogic/logo/logo.h>
 #include <mach/am_regs.h>
-#include <mach/clock.h>
-#include <asm/fiq.h>
 #include <linux/delay.h>
-#include <plat/regops.h>
 #include <mach/am_regs.h>
 #include <linux/amlogic/vout/lcd_reg.h>
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
@@ -61,7 +54,23 @@ static const char *dpcd_strings[] =
     "5.4 Gbps"         // 15
 };
 
-static EDP_Link_Config_t lconfig;
+static EDP_Link_Config_t lconfig = {
+	.max_lane_count = 4,
+	.max_link_rate = VAL_EDP_TX_LINK_BW_SET_270,
+	.enhanced_framing_en = 0,
+	.lane_count = 4,
+	.link_rate = VAL_EDP_TX_LINK_BW_SET_270,	
+	.vswing = VAL_EDP_TX_PHY_VSWING_0,
+	.preemphasis = VAL_EDP_TX_PHY_PREEMPHASIS_0,
+	.ss_level = 0,
+	.link_update = 0,
+	.training_settings = 0,
+	.main_stream_enable = 0,
+	.use_dpcd_caps = 0,
+	.link_adaptive = 0,
+	.link_rate_adjust_en = 1,	//enable adjust link rate
+	.bit_rate = 0,
+};
 
 unsigned char preset_vswing_tx, preset_vswing_rx;
 unsigned char preset_preemp_tx, preset_preemp_rx;
@@ -96,6 +105,35 @@ static int dptx_wait_phy_ready(void)
 		return VAL_EDP_TX_OPERATION_FAILED;
 }
 
+static void dptx_dump_link_config(void)
+{
+	EDP_Link_Config_t *link_config = dptx_get_link_config();
+	
+	DPRINT("********************************************\n");
+	DPRINT(" Link Config:\n"
+           "    Link Rate               : 0x%02x\n"
+           "    Lane Count              : %u\n"
+           "    Vswing                  : 0x%02x\n"
+           "    Preemphasis             : 0x%02x\n"
+           "    Spread Spectrum level   : %u\n"
+		   "    Use DPCD Caps           : %u\n"
+           "    Training Settings       : %u\n"
+           "    Link Rate Adjust        : %u\n"
+           "    Link Adaptive           : %u\n"
+		   "    Main Stream Enable      : %u\n",
+           READ_DPTX_REG(EDP_TX_LINK_BW_SET),
+           READ_DPTX_REG(EDP_TX_LINK_COUNT_SET),
+           READ_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_0),
+           READ_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_0),
+           READ_DPTX_REG(EDP_TX_DOWNSPREAD_CTRL),
+           link_config->use_dpcd_caps,
+           link_config->training_settings,
+           link_config->link_rate_adjust_en,
+           link_config->link_adaptive,
+           READ_DPTX_REG(EDP_TX_MAIN_STREAM_ENABLE));
+	DPRINT("********************************************\n");
+}
+
 static void dptx_dump_MSA(void)
 {
 	DPRINT("********************************************\n");
@@ -135,20 +173,6 @@ static void dptx_dump_MSA(void)
 	DPRINT("********************************************\n");
 }
 
-static unsigned dptx_get_HPD_state(void)
-{
-	//return (READ_DPTX_REG(EDP_TX_AUX_STATE) & 1);
-	return 1;
-}
-
-static void dptx_test(void)
-{
-	unsigned reg_val;
-	
-	reg_val = READ_DPTX_REG(EDP_TX_USER_CONTROL_STATUS);
-	DBG_PRINT("DE_pol=%u, HS_pol=%u, VS_pol=%u\n", (reg_val >> 2) & 0x1, (reg_val >> 1) & 0x1, (reg_val >> 0) & 0x1);
-}
-
 static int dptx_set_link_rate(unsigned char link_rate)
 {
 	int status = 0;
@@ -169,7 +193,6 @@ static int dptx_set_link_rate(unsigned char link_rate)
 		WRITE_DPTX_REG(EDP_TX_PHY_RESET, 0xf);	//reset the PHY
 		mdelay(10);
 		
-		edp_clk_config_update(link_rate);
 		WRITE_DPTX_REG(EDP_TX_LINK_BW_SET, link_rate);
 		
 		WRITE_DPTX_REG(EDP_TX_PHY_RESET, 0);
@@ -266,8 +289,6 @@ static void dptx_set_video_mode(EDP_Video_Mode_t *vm)
 	//WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_USER_PIXEL_WIDTH, 2);
 	//mdelay(5);
     WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_USER_PIXEL_WIDTH, vm->ppc);
-	
-	dptx_test();
 }
 
 static int dptx_init_lane_config(unsigned char link_rate, unsigned char lane_count)
@@ -348,9 +369,10 @@ static char *dptx_explain_reply_code(int status)
 	}
 }
 
+#define EDP_AUX_OPERATION_RETRY
 // Read EDPTX
 // Read N-bytes from Aux-Channel -- upto 16bytes
-#if 1
+#ifdef EDP_AUX_OPERATION_RETRY
 //retry
 static int trdp_AUXRead(unsigned long address, unsigned long byte_count, unsigned char *data)
 {
@@ -418,7 +440,7 @@ static int trdp_AUXRead(unsigned long address, unsigned long byte_count, unsigne
 }
 #else
 //no retry
-static int trdp_AUXRead(unsigned long address, unsigned long byte_count, unsigned long* data)
+static int trdp_AUXRead(unsigned long address, unsigned long byte_count, unsigned long *data)
 {
     int i;
     unsigned status;
@@ -426,7 +448,7 @@ static int trdp_AUXRead(unsigned long address, unsigned long byte_count, unsigne
     //check for transmitter ready state
 	do {
 		status = READ_DPTX_REG(EDP_TX_AUX_STATE);
-	}while(statue & VAL_EDP_TX_AUX_STATE_REQUEST_IN_PROGRESS);
+	}while(status & VAL_EDP_TX_AUX_STATE_REQUEST_IN_PROGRESS);
 	
 	WRITE_DPTX_REG(EDP_TX_AUX_ADDRESS, address);
     WRITE_DPTX_REG(EDP_TX_AUX_COMMAND, (VAL_EDP_TX_AUX_CMD_READ | ((byte_count-1) & 0xF)));
@@ -438,13 +460,14 @@ static int trdp_AUXRead(unsigned long address, unsigned long byte_count, unsigne
 			DPRINT("AUXRead timeout\n");
 			return VAL_EDP_TX_AUX_OPERATION_TIMEOUT;
 		}
+		udelay(VAL_EDP_TX_AUX_WAIT_TIME);
 	}while((status & VAL_EDP_TX_AUX_STATE_RECEIVED) == 0);
 	
 	status = READ_DPTX_REG(EDP_TX_AUX_REPLY_CODE);
 	switch (status) {
 		case VAL_EDP_TX_AUX_REPLY_CODE_ACK:
 			status = VAL_EDP_TX_AUX_OPERATION_SUCCESS;
-			brea;
+			break;
 		case VAL_EDP_TX_AUX_REPLY_CODE_NACK:
 			DPRINT("AUXRead failed\n");
 			status = VAL_EDP_TX_AUX_OPERATION_FAILED;
@@ -469,7 +492,7 @@ static int trdp_AUXRead(unsigned long address, unsigned long byte_count, unsigne
 #endif
 
 // Write N-bytes to Aux-Channel -- upto 16bytes
-#if 1
+#ifdef EDP_AUX_OPERATION_RETRY
 //retry
 static int trdp_AUXWrite(unsigned long address, unsigned long byte_count, unsigned char *data)
 {
@@ -540,7 +563,7 @@ static int trdp_AUXWrite(unsigned long address, unsigned long byte_count, unsign
 	//check for transmitter ready state
 	do {
 		status = READ_DPTX_REG(EDP_TX_AUX_STATE);
-	}while(statue & VAL_EDP_TX_AUX_STATE_REQUEST_IN_PROGRESS);
+	}while(status & VAL_EDP_TX_AUX_STATE_REQUEST_IN_PROGRESS);
 	
 	//write AUX command
 	WRITE_DPTX_REG(EDP_TX_AUX_ADDRESS, address);
@@ -556,13 +579,14 @@ static int trdp_AUXWrite(unsigned long address, unsigned long byte_count, unsign
 			DPRINT("AUXWrite timeout\n");
 			return VAL_EDP_TX_AUX_OPERATION_TIMEOUT;
 		}
+		udelay(VAL_EDP_TX_AUX_WAIT_TIME);
 	}while((status & VAL_EDP_TX_AUX_STATE_RECEIVED) == 0);
 	
 	status = READ_DPTX_REG(EDP_TX_AUX_REPLY_CODE);
 	switch (status) {
 		case VAL_EDP_TX_AUX_REPLY_CODE_ACK:
 			status = VAL_EDP_TX_AUX_OPERATION_SUCCESS;
-			brea;
+			break;
 		case VAL_EDP_TX_AUX_REPLY_CODE_NACK:
 			DPRINT("AUXWrite failed\n");
 			status = VAL_EDP_TX_AUX_OPERATION_FAILED;
@@ -765,12 +789,12 @@ static int trdp_dump_DPCD_training_status(void)
 		return status;
 	}
 	DPRINT("Displayport DPCD training status:\n"
-           "   Lane 0/1 Status			: 0x%02x\n"
-           "   Lane 2/3 Status			: 0x%02x\n"
-           "   Lane Align Status			: 0x%02x\n"
-           "   Sink Status				: 0x%02x\n"
-           "   Adjustment Request 0/1		: 0x%02x\n"
-           "   Adjustment Request 2/3		: 0x%02x\n\n",
+           "   Lane 0/1 Status          : 0x%02x\n"
+           "   Lane 2/3 Status          : 0x%02x\n"
+           "   Lane Align Status        : 0x%02x\n"
+           "   Sink Status              : 0x%02x\n"
+           "   Adjustment Request 0/1   : 0x%02x\n"
+           "   Adjustment Request 2/3   : 0x%02x\n\n",
             aux_data[2],
             aux_data[3],
             aux_data[4],
@@ -784,14 +808,14 @@ static int trdp_dump_DPCD_training_status(void)
 		return status;
 	}
 	DPRINT("  Training Config:\n"
-           "      Link Bandwidth Setup		: 0x%02x\n"
-           "      Lane Count Set			: 0x%02x\n"
-           "      Training Pattern Set		: 0x%02x\n"
-           "      Training Lane 0 Set		: 0x%02x\n"
-           "      Training Lane 1 Set		: 0x%02x\n"        
-           "      Training Lane 2 Set		: 0x%02x\n"
-           "      Training Lane 3 Set		: 0x%02x\n"
-           "      Downspread Ctrl			: 0x%02x\n",
+           "      Link Bandwidth Setup  : 0x%02x\n"
+           "      Lane Count Set        : 0x%02x\n"
+           "      Training Pattern Set  : 0x%02x\n"
+           "      Training Lane 0 Set   : 0x%02x\n"
+           "      Training Lane 1 Set   : 0x%02x\n"
+           "      Training Lane 2 Set   : 0x%02x\n"
+           "      Training Lane 3 Set   : 0x%02x\n"
+           "      Downspread Ctrl       : 0x%02x\n",
             aux_data[0],
             aux_data[1],
             aux_data[2],
@@ -805,13 +829,61 @@ static int trdp_dump_DPCD_training_status(void)
 	return VAL_EDP_TX_AUX_OPERATION_SUCCESS;
 }
 
+static unsigned char trdp_select_edp_lane_count(unsigned char link_rate)
+{
+	unsigned int bit_rate, lane_capacity;
+	unsigned char lane_count;
+	EDP_Link_Config_t *link_config = dptx_get_link_config();
+	
+	lane_count = link_config->lane_count;
+	switch (link_rate) {
+		case VAL_EDP_TX_LINK_BW_SET_162:
+		case VAL_EDP_TX_LINK_BW_SET_270:
+			link_config->link_rate = link_rate;
+			bit_rate = edp_clk_config_update(link_rate);
+			break;
+		default:
+			lane_count = 0;
+			break;
+	}
+	
+	if (lane_count > 0) {
+		switch (link_rate) {
+			case VAL_EDP_TX_LINK_BW_SET_162:
+				lane_capacity = EDP_TX_LINK_CAPACITY_162;
+				break;
+			case VAL_EDP_TX_LINK_BW_SET_270:
+				lane_capacity = EDP_TX_LINK_CAPACITY_270;
+				break;
+			case VAL_EDP_TX_LINK_BW_SET_540:
+				lane_capacity = EDP_TX_LINK_CAPACITY_540;
+				break;
+			default:
+				lane_capacity = EDP_TX_LINK_CAPACITY_162;
+				break;
+		}
+		
+		if (bit_rate < lane_capacity * 1)
+			lane_count = 1;
+		else if (bit_rate < lane_capacity * 2)
+			lane_count = 2;
+		else if (bit_rate < lane_capacity * 4)
+			lane_count = 4;
+		else
+			lane_count = 0;
+
+		link_config->lane_count = lane_count;
+	}
+	return lane_count;
+}
+
 static int trdp_set_link_rate(unsigned char link_rate)
 {
 	int status = VAL_EDP_TX_AUX_OPERATION_SUCCESS;
 	
 	DBG_PRINT("set link rate\n");	
 	if (link_rate != READ_DPTX_REG(EDP_TX_LINK_BW_SET)) {	
-		status = dptx_set_link_rate(link_rate);
+		WRITE_DPTX_REG(EDP_TX_LINK_BW_SET, link_rate);
 		if (status)
 			return status;
 		
@@ -842,7 +914,7 @@ static int trdp_set_lane_count(unsigned char lane_count)
 			enhance_framing_mode = (READ_DPTX_REG(EDP_TX_ENHANCED_FRAME_EN) & 0x01);
 			if (enhance_framing_mode)
 				lane_count |= (1 << 7);
-			dptx_set_lane_count(lane_count);
+			WRITE_DPTX_REG(EDP_TX_LINK_COUNT_SET, lane_count);
 			status = trdp_AUXWrite(EDP_DPCD_LANE_COUNT_SET, 1, &lane_count);
 			break;
 		default:
@@ -867,96 +939,6 @@ static int trdp_set_downspread(unsigned char ss_enable)
 	return status;
 }
 
-static int trdp_set_lane_config(unsigned char link_rate, unsigned char lane_count)
-{
-	unsigned char aux_data[2];
-	unsigned enhance_framing_mode;
-	int status = 0;
-
-	switch (link_rate) {
-		case VAL_EDP_TX_LINK_BW_SET_162:
-		case VAL_EDP_TX_LINK_BW_SET_270:
-			aux_data[0] = link_rate;
-			break;
-		default:
-			status = VAL_EDP_TX_AUX_INVALID_PARAMETER;
-			break;
-	}
-	switch (lane_count) {
-		case 1:			
-		case 2:			
-		case 4:
-			enhance_framing_mode = (READ_DPTX_REG(EDP_TX_ENHANCED_FRAME_EN) & 0x01);
-			if (enhance_framing_mode)
-				lane_count |= (1 << 7);
-			aux_data[1] = lane_count;
-			break;
-		default:
-			status = VAL_EDP_TX_AUX_INVALID_PARAMETER;
-			break;
-	}
-	if (status == 0) {
-		status = trdp_AUXWrite(EDP_DPCD_LINK_BANDWIDTH_SET, 2, aux_data);
-		if (status)
-			DPRINT("set lane config failed\n");
-	}
-	else {
-		DPRINT("error parameters\n");
-	}
-	return status;
-}
-
-static int trdp_set_link_config(EDP_Link_Config_t *link_config)
-{
-	int status = 0;
-	unsigned char aux_data[4];
-	unsigned vswing = link_config->vswing & 0xff;
-	unsigned preemphasis = link_config->preemphasis & 0xff;
-	
-	//preset voltage swing levels
-	switch (vswing) {
-		case VAL_EDP_TX_PHY_VSWING_0:
-		case VAL_EDP_TX_PHY_VSWING_1:
-		case VAL_EDP_TX_PHY_VSWING_2:
-		case VAL_EDP_TX_PHY_VSWING_3:
-			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_0, vswing);
-			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_1, vswing);
-			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_2, vswing);
-			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_3, vswing);
-			break;
-		default:
-			status = VAL_EDP_TX_OPERATION_FAILED;
-			break;
-	}
-	
-	//preset preemphasis
-	switch (preemphasis) {
-		case VAL_EDP_TX_PHY_PREEMPHASIS_0:
-		case VAL_EDP_TX_PHY_PREEMPHASIS_1:
-		case VAL_EDP_TX_PHY_PREEMPHASIS_2:
-		case VAL_EDP_TX_PHY_PREEMPHASIS_3:
-			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_0, preemphasis);
-			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_1, preemphasis);
-			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_2, preemphasis);
-			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_3, preemphasis);
-			break;
-		default:
-			status = VAL_EDP_TX_OPERATION_FAILED;
-			break;
-	}
-	
-	//write the preset values to the sink device
-	if (status == VAL_EDP_TX_OPERATION_SUCCESS) {
-		aux_data[0] = (preemphasis << 3) | vswing;
-		aux_data[1] = (preemphasis << 3) | vswing;
-		aux_data[2] = (preemphasis << 3) | vswing;
-		aux_data[3] = (preemphasis << 3) | vswing;
-		status = trdp_AUXWrite(EDP_DPCD_TRAINING_LANE0_SET, 4, aux_data);
-	}
-	
-	return status;
-}
-
 static int trdp_verify_training_config(void)
 {
 	int status = VAL_EDP_CONFIG_VALID;
@@ -985,9 +967,6 @@ static int trdp_verify_training_config(void)
 			break;
 	}
 	
-	if (dptx_get_HPD_state() != 0x01)
-		status = VAL_EDP_CONFIG_HPD_DEASSERTED;
-	
 	return status;
 }
 
@@ -1131,16 +1110,22 @@ static int trdp_select_training_settings(unsigned training_settings)
 	return status;
 }
 
-extern void edp_phy_config_update(unsigned char vswing_tx, unsigned char preemp_tx);
 static int trdp_set_training_values(void)
 {
 	int status = 0;
 	EDP_Link_Config_t *link_config = dptx_get_link_config();
 	unsigned char aux_data[4];
 	
+	if (link_config->link_update)
+		return status;
+	
 	link_config->vswing = preset_vswing_tx;
 	link_config->preemphasis = preset_preemp_tx;
 	
+	//set edp phy config
+	edp_phy_config_update(preset_vswing_tx, preset_preemp_tx);
+	link_config->link_update = 1;
+	
 	WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_0, preset_vswing_tx);
 	WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_1, preset_vswing_tx);
 	WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_2, preset_vswing_tx);
@@ -1158,9 +1143,6 @@ static int trdp_set_training_values(void)
 	
 	status = trdp_AUXWrite(EDP_DPCD_TRAINING_LANE0_SET, 4, aux_data);
 
-	//set edp phy config
-	//edp_phy_config_update(preset_vswing_tx, preset_preemp_tx);
-
 	return status;
 }
 
@@ -1184,6 +1166,7 @@ static int trdp_run_training_adjustment(void)
 	int status = 0;
 	unsigned training_set = 0;
 	unsigned char vswing_level[4], preemp_level[4];
+	EDP_Link_Config_t *link_config = dptx_get_link_config();
 	
 	vswing_level[0] = (adj_req_lane01 & 0x03);
 	preemp_level[0] = ((adj_req_lane01 >> 2) & 0x03);
@@ -1207,6 +1190,8 @@ static int trdp_run_training_adjustment(void)
 	training_set += preemp_level[0];	//get (vswing+preemphasis) training level
 	
 	status = trdp_select_training_settings(training_set);
+	
+	link_config->link_update = 0;	//need to update
 	return status;
 }
 
@@ -1297,7 +1282,7 @@ static int trdp_run_channel_equalization(void)
 				status = VAL_EDP_TX_OPERATION_FAILED;
 		}		
 	}
-	
+
 	return status;
 }
 
@@ -1310,7 +1295,8 @@ static int trdp_run_clock_recovery_loop(unsigned max_iterations, unsigned adapti
 	trdp_set_training_pattern(VAL_EDP_TRAINING_PATTERN_1);	//set training pattern
 	
 	while (!done) {
-		trdp_set_training_values();	//set lane vswing & preemphasis
+		if (adaptive == 1)
+			trdp_set_training_values();	//set lane vswing & preemphasis
 		
 		status = trdp_run_clock_recovery();
 		switch (status) {
@@ -1319,7 +1305,7 @@ static int trdp_run_clock_recovery_loop(unsigned max_iterations, unsigned adapti
 				break;
 			case VAL_EDP_TX_OPERATION_FAILED:
 				if (adaptive == 1) {
-					if ((preset_vswing_rx & 0x07) != 0x07)
+					if ((preset_vswing_rx & 0x07) != 0x07)	//check for max vswing level
 						trdp_run_training_adjustment();
 					else
 						done = 1;
@@ -1347,7 +1333,8 @@ static int trdp_run_channel_equalization_loop(unsigned max_iterations, unsigned
 	
 	//channel equalization & symbol lock loop
 	while (!done) {
-		trdp_set_training_values();
+		if (adaptive == 1)
+			trdp_set_training_values();
 		
 		status = trdp_run_channel_equalization();
 		switch (status) {
@@ -1363,8 +1350,6 @@ static int trdp_run_channel_equalization_loop(unsigned max_iterations, unsigned
 			case VAL_EDP_TX_OPERATION_FAILED:
 				if (adaptive == 1)
 					trdp_run_training_adjustment();
-				else
-					done = 1;
 				break;
 			default:
 				break;
@@ -1471,12 +1456,21 @@ static int trdp_run_training_loop(unsigned training_settings, unsigned link_rate
 				lanes = READ_DPTX_REG(EDP_TX_LINK_COUNT_SET);
 				
 				if (link_speed != VAL_EDP_TX_LINK_BW_SET_162) {
-					trdp_set_lane_count(lanes);
-					if (link_speed == VAL_EDP_TX_LINK_BW_SET_270)
-						trdp_set_link_rate(VAL_EDP_TX_LINK_BW_SET_162);
-					else
-						trdp_set_link_rate(VAL_EDP_TX_LINK_BW_SET_270);
-					
+					if (link_speed == VAL_EDP_TX_LINK_BW_SET_270) {
+						link_speed = VAL_EDP_TX_LINK_BW_SET_162;
+					}
+					else {
+						link_speed = VAL_EDP_TX_LINK_BW_SET_270;
+					}
+					lanes = trdp_select_edp_lane_count(link_speed);
+					if (lanes > 0) {
+						trdp_set_link_rate(link_speed);
+						trdp_set_lane_count(lanes);
+					}
+					else {
+						DPRINT("couldn't reduce link rate\n");
+						done = 1;
+					}
 					training_state = VAL_EDP_TS_CLOCK_REC;
 				}
 				else {
@@ -1489,29 +1483,105 @@ static int trdp_run_training_loop(unsigned training_settings, unsigned link_rate
 	trdp_set_training_pattern(VAL_EDP_TRAINING_PATTERN_OFF);
 	WRITE_DPTX_REG(EDP_TX_SCRAMBLING_DISABLE, 0x00);	//turn on scrambling after training
 	
-	if (status == VAL_EDP_TX_OPERATION_SUCCESS)
+	//if (status == VAL_EDP_TX_OPERATION_SUCCESS)
 		status = trdp_update_status();
-		
+
 	return status;
 }
 
-static void dplpm_set_default_link_config(void)
+static int trdp_set_link_config(unsigned char link_rate, unsigned char lane_count)
 {
-	EDP_Link_Config_t *link_config = dptx_get_link_config();
+	unsigned char aux_data[2];
+	unsigned enhance_framing_mode;
+	int status = 0;
+
+	switch (link_rate) {
+		case VAL_EDP_TX_LINK_BW_SET_162:
+		case VAL_EDP_TX_LINK_BW_SET_270:
+			aux_data[0] = link_rate;
+			break;
+		default:
+			status = VAL_EDP_TX_AUX_INVALID_PARAMETER;
+			break;
+	}
+	switch (lane_count) {
+		case 1:			
+		case 2:			
+		case 4:
+			enhance_framing_mode = (READ_DPTX_REG(EDP_TX_ENHANCED_FRAME_EN) & 0x01);
+			if (enhance_framing_mode)
+				lane_count |= (1 << 7);
+			aux_data[1] = lane_count;
+			break;
+		default:
+			status = VAL_EDP_TX_AUX_INVALID_PARAMETER;
+			break;
+	}
+	if (status == 0) {
+		status = trdp_AUXWrite(EDP_DPCD_LINK_BANDWIDTH_SET, 2, aux_data);
+		if (status)
+			DPRINT("set lane config failed\n");
+	}
+	else {
+		DPRINT("error parameters\n");
+	}
+	return status;
+}
+
+static int trdp_set_data_lane_config(EDP_Link_Config_t *link_config)
+{
+	int status = 0;
+	unsigned char aux_data[4];
+	unsigned vswing = link_config->vswing & 0xff;
+	unsigned preemphasis = link_config->preemphasis & 0xff;
+	unsigned char vswing_rx, preemp_rx;
+	
+	//preset voltage swing levels
+	switch (vswing) {
+		case VAL_EDP_TX_PHY_VSWING_0:
+		case VAL_EDP_TX_PHY_VSWING_1:
+		case VAL_EDP_TX_PHY_VSWING_2:
+		case VAL_EDP_TX_PHY_VSWING_3:
+			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_0, vswing);
+			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_1, vswing);
+			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_2, vswing);
+			WRITE_DPTX_REG(EDP_TX_PHY_VOLTAGE_DIFF_LANE_3, vswing);
+			break;
+		default:
+			status = VAL_EDP_TX_OPERATION_FAILED;
+			break;
+	}
 	
-	link_config->max_lane_count = 4;
-	link_config->max_link_rate = VAL_EDP_TX_LINK_BW_SET_270;
-	link_config->enhanced_framing_en = 0;
-	link_config->lane_count = 4;
-	link_config->link_rate = VAL_EDP_TX_LINK_BW_SET_270;	
-	link_config->vswing = VAL_EDP_TX_PHY_VSWING_0;
-	link_config->preemphasis = VAL_EDP_TX_PHY_PREEMPHASIS_0;
-	link_config->ss_level = 0;
-	link_config->link_update = 0;
-	link_config->training_settings = 0;
-	link_config->main_stream_enable = 0;
-	link_config->use_dpcd_caps = 0;
-	link_config->auto_detection_enable = 1;
+	//preset preemphasis
+	switch (preemphasis) {
+		case VAL_EDP_TX_PHY_PREEMPHASIS_0:
+		case VAL_EDP_TX_PHY_PREEMPHASIS_1:
+		case VAL_EDP_TX_PHY_PREEMPHASIS_2:
+		case VAL_EDP_TX_PHY_PREEMPHASIS_3:
+			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_0, preemphasis);
+			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_1, preemphasis);
+			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_2, preemphasis);
+			WRITE_DPTX_REG(EDP_TX_PHY_PRE_EMPHASIS_LANE_3, preemphasis);
+			break;
+		default:
+			status = VAL_EDP_TX_OPERATION_FAILED;
+			break;
+	}
+
+	//write the preset values to the sink device
+	vswing_rx = trdp_DPCD_vswing_for_value(vswing);
+	preemp_rx = trdp_DPCD_preemphasis_for_value(preemphasis, vswing);
+	if (status == VAL_EDP_TX_OPERATION_SUCCESS) {
+		aux_data[0] = (preemp_rx << 3) | vswing_rx;
+		aux_data[1] = (preemp_rx << 3) | vswing_rx;
+		aux_data[2] = (preemp_rx << 3) | vswing_rx;
+		aux_data[3] = (preemp_rx << 3) | vswing_rx;
+		status = trdp_AUXWrite(EDP_DPCD_TRAINING_LANE0_SET, 4, aux_data);
+	}
+	
+	link_config->link_update = 1;
+	
+	return status;
 }
 
 static void dplpm_get_training_status_string(int status, char *status_string)
@@ -1538,6 +1608,9 @@ static void dplpm_get_training_status_string(int status, char *status_string)
 		case VAL_EDP_TX_OPERATION_SUCCESS:
 			sprintf(status_string, "displayport training: Success");
 			break;
+		case VAL_EDP_LPM_STATUS_RETRAIN:
+			sprintf(status_string, "displayport training: Retrain");
+			break;
 		default:
 			sprintf(status_string, "displayport training: Error 0x%08x", status);
 			break;
@@ -1560,138 +1633,65 @@ static void dplpm_main_stream_enable(unsigned enable)
 	DBG_PRINT("displayport main stream %s\n", enable ? "enable" : "disable");
 }
 
-static int dplpm_configure_link(void)
-{
-	int status = 0;
-	EDP_Link_Config_t *link_config = dptx_get_link_config();
-	TRDP_DPCDData_t dpcd_data;
-	
-	if (dptx_get_HPD_state() == 0)
-		return VAL_EDP_LPM_STATUS_NOT_CONNECTED;
-	
-	dplpm_main_stream_enable(0);
-	
-	if (link_config->use_dpcd_caps) {
-		status = trdp_get_sink_caps(&dpcd_data);
-		
-		if (status == VAL_EDP_TX_AUX_OPERATION_SUCCESS) {
-			link_config->max_lane_count = (dpcd_data.max_lane_count & 0x07);
-			link_config->max_link_rate = ((dpcd_data.max_link_rate > VAL_EDP_TX_LINK_BW_SET_270) ? VAL_EDP_TX_LINK_BW_SET_270 : dpcd_data.max_link_rate);
-		}
-		else {
-			link_config->max_lane_count = 4;
-			link_config->max_link_rate = VAL_EDP_TX_LINK_BW_SET_270;
-		}
-	}
-	link_config->lane_count = (link_config->lane_count <= link_config->max_lane_count) ? link_config->lane_count : link_config->max_lane_count;
-	link_config->link_rate = (link_config->link_rate <= link_config->max_link_rate) ? link_config->link_rate : link_config->max_link_rate;	
-	
-	// Set enhanced_framing_mode directly in the TX. SetLaneCount() will pick it up and act appropriately
-	WRITE_DPTX_REG(EDP_TX_ENHANCED_FRAME_EN, link_config->enhanced_framing_en);
-	
-	status = trdp_set_link_rate(link_config->link_rate);
-	if (status)
-		DPRINT("set link rate error\n");
-	
-	status = trdp_set_lane_count(link_config->lane_count);
-	if (status)
-		DPRINT("set lane count error\n");
-	
-	status = trdp_set_downspread(link_config->ss_level);
-	
-	link_config->link_update = 1;	//flag for link update
-	
-	return status;
-}
-
 static int dplpm_verify_link_status(void)
 {
 	int status = 0;
 	unsigned link_ok = 0;
 	unsigned char aux_data[8];
 	
-	if (dptx_get_HPD_state() == 0) {
-		dplpm_main_stream_enable(0);
-		status = VAL_EDP_LPM_STATUS_NOT_CONNECTED;
+	status = trdp_AUXRead(EDP_DPCD_SINK_COUNT, 8, aux_data);
+	if (!status)
+		status = (((aux_data[4] & 0x01) << 16) | (aux_data[3] << 8) | aux_data[2]);
+
+	switch (READ_DPTX_REG(EDP_TX_LINK_COUNT_SET)) {
+		case 0:	// Lane count not set
+			link_ok = VAL_EDP_TX_LANE_STATUS_OK_NONE;
+			break;
+		case 1:
+			link_ok = VAL_EDP_TX_LANE_STATUS_OK_1;
+			break;
+		case 2:
+			link_ok = VAL_EDP_TX_LANE_STATUS_OK_2;
+			break;
+		case 4:
+			link_ok = VAL_EDP_TX_LANE_STATUS_OK_4;
+			break;
 	}
-	else {
-		status = trdp_AUXRead(EDP_DPCD_SINK_COUNT, 8, aux_data);
-		if (!status)
-			status = (((aux_data[4] & 0x01) << 16) | (aux_data[3] << 8) | aux_data[2]);
 
-		switch (READ_DPTX_REG(EDP_TX_LINK_COUNT_SET)) {
-			case 0:	// Lane count not set
-				link_ok = VAL_EDP_TX_LANE_STATUS_OK_NONE;
-				break;
-			case 1:
-				link_ok = VAL_EDP_TX_LANE_STATUS_OK_1;
-				break;
-			case 2:
-				link_ok = VAL_EDP_TX_LANE_STATUS_OK_2;
-				break;
-			case 4:
-				link_ok = VAL_EDP_TX_LANE_STATUS_OK_4;
-				break;
-		}
+	if ((status & link_ok) == link_ok)
+		status = VAL_EDP_LPM_STATUS_TRAINING_SUCCESS;
+	else
+		status = VAL_EDP_LPM_STATUS_RETRAIN;
 
-		if ((status & link_ok) == link_ok)
-			status = VAL_EDP_LPM_STATUS_TRAINING_SUCCESS;
-		else
-			status = VAL_EDP_LPM_STATUS_RETRAIN;
-	}
 	DBG_PRINT("%s: %s\n",__FUNCTION__, (status == VAL_EDP_LPM_STATUS_TRAINING_SUCCESS) ? "training success" : "retrain");
 	return status;
 }
 
-static int dplpm_train_link(unsigned training_settings, unsigned link_rate_adjust_en)
-{
-	int status = 0;
-	EDP_Link_Config_t *link_config = dptx_get_link_config();
-	
-	//dplpm_main_stream_enable(0);	
-	status = trdp_run_training_loop(training_settings, link_rate_adjust_en, link_config->link_adaptive);
-	
-	return status;
-}
-
 static int dplpm_maintain_link(void)
 {
 	unsigned max_training_attempts = VAL_EDP_MAX_TRAINING_ATTEMPTS;
 	unsigned training_successful = 0, retrain = 0;
-	int status = VAL_EDP_TX_OPERATION_SUCCESS;
+	int status = VAL_EDP_LPM_STATUS_RETRAIN;
 	EDP_Link_Config_t *link_config = dptx_get_link_config();
 	char training_string[80];
 	
-	//read and verify link status
 	//status = dplpm_verify_link_status();
-	status = VAL_EDP_LPM_STATUS_RETRAIN;
-	
-	if (status == VAL_EDP_LPM_STATUS_NOT_CONNECTED) {
-		dplpm_main_stream_enable(0);
-		return status;
-	}
-	else if (status == VAL_EDP_LPM_STATUS_RETRAIN) {
+	if (status == VAL_EDP_LPM_STATUS_RETRAIN) {
 		dplpm_main_stream_enable(0);
 		retrain = 1;
 	}
-	
+
 	if (retrain == 1) {
-		// status = dplpm_configure_link();
-		// if (status)
-			// DPRINT("dplpm_configure_link status = 0x%08x\n", status);
-		// if (READ_DPTX_REG(EDP_TX_LINK_BW_SET) == 0)
-			// DPRINT("dplpm_configure_link failed to set link rate\n");
-		
 		while ((max_training_attempts > 0) && (training_successful != 1)) {
-			status = dplpm_train_link(link_config->training_settings, 0);	//disable link_rate_adjust
+			status = trdp_run_training_loop(link_config->training_settings, link_config->link_rate_adjust_en, link_config->link_adaptive);
 			status = dplpm_verify_link_status();
 			if (status == VAL_EDP_TX_OPERATION_SUCCESS) {
 				training_successful = 1;
-				link_config->link_update = 1;
 				dplpm_main_stream_enable(1);
 			}
 			else {
 				max_training_attempts--;
+				link_config->link_update = 0;
 			}
 		}
 	}
@@ -1705,20 +1705,6 @@ static int dplpm_maintain_link(void)
 	return status;
 }
 
-static int dplm_run_loop(void)
-{
-	int status = 0;
-	
-	status = dplpm_maintain_link();
-
-#ifdef PRINT_DEBUG_INFO
-	trdp_dump_DPCD();
-	trdp_dump_DPCD_training_status();
-#endif
-	
-	return status;
-}
-
 static int dplpm_link_init(EDP_Link_Config_t *link_config)
 {
 	unsigned status = 0;	
@@ -1758,7 +1744,7 @@ static int dplpm_link_init(EDP_Link_Config_t *link_config)
 		WRITE_DPTX_REG(EDP_TX_TRANSMITTER_OUTPUT_ENABLE, 1);
 		WRITE_DPTX_REG(EDP_TX_AUX_INTERRUPT_MASK, 0xf);	//mask the interrupt, use polling mode
 		
-		status = trdp_set_lane_config(link_rate, lane_count);
+		status = trdp_set_link_config(link_rate, lane_count);
 		if (status)
 			return VAL_EDP_TX_OPERATION_FAILED;
 		
@@ -1766,7 +1752,7 @@ static int dplpm_link_init(EDP_Link_Config_t *link_config)
 		if (status)
 			return VAL_EDP_TX_OPERATION_FAILED;
 			
-		status = trdp_set_link_config(link_config);
+		status = trdp_set_data_lane_config(link_config);	//set vswing & preemphasis
 		if (status)
 			return VAL_EDP_TX_OPERATION_FAILED;
 			
@@ -1789,41 +1775,45 @@ int dplpm_link_policy_maker(EDP_Link_Config_t *mlconfig, EDP_Video_Mode_t *vm)
 	int status = 0;
 	EDP_Link_Config_t *link_config = dptx_get_link_config();
 	
-	dplpm_set_default_link_config();
-	
 	link_config->max_lane_count = mlconfig->max_lane_count;
 	link_config->max_link_rate = mlconfig->max_link_rate;
 	link_config->lane_count = mlconfig->lane_count;
 	link_config->link_rate = mlconfig->link_rate;
-	link_config->link_adaptive = mlconfig->link_adaptive;
 	link_config->vswing = mlconfig->vswing;
 	link_config->preemphasis = mlconfig->preemphasis;
 	link_config->ss_level = mlconfig->ss_level;
-	link_config->training_settings = 0;
+	link_config->link_adaptive = mlconfig->link_adaptive;
+	link_config->bit_rate = mlconfig->bit_rate;
 	
 	status = dplpm_link_init(link_config);
 	
 	if (status == VAL_EDP_TX_OPERATION_SUCCESS) {
-		status = dplm_run_loop();
+		status = dplpm_maintain_link();
+#ifdef PRINT_DEBUG_INFO
+		trdp_dump_DPCD();
+		trdp_dump_DPCD_training_status();
+#endif
 		dptx_set_video_mode(vm);
 		WRITE_LCD_REG(ENCL_VIDEO_EN, 1);
 		dplpm_main_stream_enable(1);
-		
-		//feedback link config to lcd driver
-		mlconfig->max_lane_count = link_config->max_lane_count;
-		mlconfig->max_link_rate = link_config->max_link_rate;
-		mlconfig->lane_count = link_config->lane_count;
-		mlconfig->link_rate = link_config->link_rate;
-		mlconfig->vswing = link_config->vswing;
-		mlconfig->preemphasis = link_config->preemphasis;
 	}
 	else {
 		DPRINT("displayport initial failed\n");
 		status = VAL_EDP_TX_OPERATION_FAILED;
 	}
 #ifdef PRINT_DEBUG_INFO
+	dptx_dump_link_config();
 	dptx_dump_MSA();
 #endif
+	
+	//feedback link config to lcd driver
+	mlconfig->max_lane_count = link_config->max_lane_count;
+	mlconfig->max_link_rate = link_config->max_link_rate;
+	mlconfig->lane_count = link_config->lane_count;
+	mlconfig->link_rate = link_config->link_rate;
+	mlconfig->vswing = link_config->vswing;
+	mlconfig->preemphasis = link_config->preemphasis;
+
 	return status;
 }
 
@@ -1857,6 +1847,7 @@ static const char * edp_usage_str =
 "    echo write <value> tx <addr> > debug ; write edp tx reg with value\n"
 "    echo read rx <addr> <reg_count> > debug ; read edp DPCD reg value\n"
 "    echo write <value> rx <addr> > debug ; write edp DPCD reg with value\n"
+"    echo link > debug ; print edp link config information\n"
 "    echo msa > debug ; print edp main stream attributes information\n"
 "    echo dpcd > debug ; print edp DPCD information\n"
 "    echo status > debug ; print edp link training status information\n"
@@ -1882,16 +1873,18 @@ static ssize_t edp_debug(struct class *class, struct class_attribute *attr, cons
 			num = 1;
 			ret = sscanf(buf, "read %s %x %u", s, &t[0], &num);
 			if (s[0] == 't') {	//tx
+				DPRINT("read edp tx reg:\n");
 				for (i=0; i<num; i++) {
-					DPRINT("read edp tx reg 0x%04x = 0x%08x\n", t[0]+i, READ_DPTX_REG(t[0]+i*4));
+					DPRINT("  0x%04x = 0x%08x\n", t[0]+i, READ_DPTX_REG(t[0]+i*4));
 				}
 			}
 			else if (s[0] == 'r') {	//rx -- aux --dpcd
 				num = (num < 16) ? num : 16;
 				status = trdp_AUXRead(t[0], num, aux_data);
 				if (status == VAL_EDP_TX_OPERATION_SUCCESS) {
+					DPRINT("read edp DPCD reg:\n");
 					for (i=0; i<num; i++) {
-						DPRINT("read edp DPCD reg 0x%04x = 0x%02x\n", t[0]+i, aux_data[i]);
+						DPRINT("  0x%04x = 0x%02x\n", t[0]+i, aux_data[i]);
 					}
 				}
 				else {
@@ -1922,14 +1915,14 @@ static ssize_t edp_debug(struct class *class, struct class_attribute *attr, cons
 			}
 			break;
 		case 't':
-			if (buf[1] == 'c') {
+			if (buf[1] == 'c') {	//tc
 				DPRINT("Training clock recovery\n");
 				WRITE_DPTX_REG(EDP_TX_SCRAMBLING_DISABLE, 0x01);
 				trdp_run_clock_recovery_loop(5, 0);
 				trdp_set_training_pattern(VAL_EDP_TRAINING_PATTERN_OFF);
 				WRITE_DPTX_REG(EDP_TX_SCRAMBLING_DISABLE, 0x00);
 			}
-			else {
+			else {	//te
 				DPRINT("Training channel equalization\n");
 				WRITE_DPTX_REG(EDP_TX_SCRAMBLING_DISABLE, 0x01);
 				trdp_run_channel_equalization_loop(5, 0);
@@ -1937,6 +1930,9 @@ static ssize_t edp_debug(struct class *class, struct class_attribute *attr, cons
 				WRITE_DPTX_REG(EDP_TX_SCRAMBLING_DISABLE, 0x00);
 			}
 			break;
+		case 'l':
+			dptx_dump_link_config();
+			break;		
 		case 'm':
 			dptx_dump_MSA();
 			break;
@@ -1974,8 +1970,6 @@ void edp_probe(void)
 {
 	int ret;
 	
-	dplpm_set_default_link_config();
-	
 	ret = class_register(&aml_edp_debug_class);
 	if(ret){
 		DPRINT("class register aml_edp_debug_class fail!\n");
diff --git a/drivers/amlogic/display/vout/edp_drv.h b/drivers/amlogic/display/vout/edp_drv.h
index 1db5bdb7bcb0..3654d64c2c0d 100755
--- a/drivers/amlogic/display/vout/edp_drv.h
+++ b/drivers/amlogic/display/vout/edp_drv.h
@@ -115,8 +115,8 @@
 
 // Link training constants
 #define VAL_EDP_MAX_TRAINING_ATTEMPTS				5
-#define VAL_EDP_CLOCK_REC_TIMEOUT					1//ms //100 // in microseconds
-#define VAL_EDP_CHAN_EQ_TIMEOUT						4//ms //400 // in microseconds
+#define VAL_EDP_CLOCK_REC_TIMEOUT					1//ms //100 //us
+#define VAL_EDP_CHAN_EQ_TIMEOUT						4//ms //400 //us
 #define VAL_EDP_MAX_DEFER_COUNT						7
 #define VAL_EDP_MAX_TIMEOUT_COUNT					5
 #define VAL_EDP_MAX_DELAY_CYCLES					10 // 10us delay
@@ -228,7 +228,7 @@ typedef struct {
 	unsigned char max_link_rate;
 	unsigned char enhanced_framing_en;
 	unsigned char lane_count;
-	unsigned char link_rate;	
+	unsigned char link_rate;
 	unsigned char vswing;
 	unsigned char preemphasis;
 	unsigned char ss_level;
@@ -236,17 +236,22 @@ typedef struct {
 	unsigned char training_settings;
 	unsigned char main_stream_enable;
 	unsigned char use_dpcd_caps;
-	unsigned char auto_detection_enable;
+	unsigned char link_rate_adjust_en;
 	unsigned char link_adaptive;
+	unsigned int bit_rate;	//Mbps
 } EDP_Link_Config_t;
 
+#define EDP_TX_LINK_CAPACITY_162	1296	//Mbps
+#define EDP_TX_LINK_CAPACITY_270	2160	//Mbps
+#define EDP_TX_LINK_CAPACITY_540	4320	//Mbps
+
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 extern int dplpm_link_policy_maker(EDP_Link_Config_t *mlconfig, EDP_Video_Mode_t *vm);
 extern int dplpm_link_off(void);
 extern void edp_probe(void);
 extern void edp_remove(void);
 
-extern int edp_clk_config_update(unsigned char link_rate);
+extern unsigned edp_clk_config_update(unsigned char link_rate);
 extern void edp_phy_config_update(unsigned char vswing_tx, unsigned char preemp_tx);
 #endif
 
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index d5508781b5b5..85859a63c35f 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -71,7 +71,7 @@ extern unsigned int clk_util_clk_msr(unsigned int clk_mux);
 #endif
 
 #define PANEL_NAME		"panel"
-#define DRIVER_DATE		"20131111"
+#define DRIVER_DATE		"20131203"
 #define DRIVER_VER		"310"
 
 //#define LCD_DEBUG_INFO
@@ -1763,31 +1763,50 @@ static void set_control_lvds(Lcd_Config_t *pConf)
 //**************************************************//
 // for edp link maintain control
 //**************************************************//
-int edp_clk_config_update(unsigned char link_rate)
+static void generate_clk_parameter(Lcd_Config_t *pConf);
+static void lcd_sync_duration(Lcd_Config_t *pConf);
+unsigned edp_clk_config_update(unsigned char link_rate)
 {
-	//to do
-	return 0;
+	unsigned bit_rate;
+	
+	pDev->pConf->lcd_control.edp_config->link_rate = link_rate;
+	generate_clk_parameter(pDev->pConf);
+	lcd_sync_duration(pDev->pConf);
+	
+	bit_rate = (pDev->pConf->lcd_timing.lcd_clk / 1000) * pDev->pConf->lcd_basic.lcd_bits * 3 / 1000;	//Mbps
+	pDev->pConf->lcd_control.edp_config->bit_rate = bit_rate;
+	
+	//update lcd_info
+	pDev->lcd_info.sync_duration_num = pDev->pConf->lcd_timing.sync_duration_num;
+	pDev->lcd_info.sync_duration_den = pDev->pConf->lcd_timing.sync_duration_den;
+	pDev->lcd_info.video_clk = pDev->pConf->lcd_timing.lcd_clk;
+	
+	request_vpu_clk_vmod(pDev->lcd_info.video_clk, pDev->lcd_info.mode);
+	
+	set_pll_lcd(pDev->pConf);	//real change the clk
+	
+	return bit_rate;
 }
 
 void edp_phy_config_update(unsigned char vswing_tx, unsigned char preemp_tx)
 {
-	unsigned vswing, preemphasis;
+	unsigned vswing_ctrl, preemphasis_ctrl;
 	
 	switch (vswing_tx) {
 		case VAL_EDP_TX_PHY_VSWING_0:	//0.4V
-			vswing = 0x8038;
+			vswing_ctrl = 0x8018;	//0x8038;
 			break;
 		case VAL_EDP_TX_PHY_VSWING_1:	//0.6V
-			vswing = 0x8088;
+			vswing_ctrl = 0x8088;
 			break;
 		case VAL_EDP_TX_PHY_VSWING_2:	//0.8V
-			vswing = 0x80c8;
+			vswing_ctrl = 0x80c8;
 			break;
 		case VAL_EDP_TX_PHY_VSWING_3:	//1.2V
-			vswing = 0x80f8;
+			vswing_ctrl = 0x80f8;
 			break;
 		default:
-			vswing = 0x80f8;
+			vswing_ctrl = 0x80f8;
 			break;
 	}
 	
@@ -1797,16 +1816,18 @@ void edp_phy_config_update(unsigned char vswing_tx, unsigned char preemp_tx)
 		case VAL_EDP_TX_PHY_PREEMPHASIS_2:	//6db
 		case VAL_EDP_TX_PHY_PREEMPHASIS_3:	//9.5db
 		default:
-			preemphasis = 0x0;	//to do
+			preemphasis_ctrl = 0x0;	//to do
 			break;
 	}
 	
-	//WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, vswing_tx);
+	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, vswing_ctrl);
+	printk("edp link adaptive: vswing=0x%02x, preemphasis=0x%02x\n", vswing_tx, preemp_tx);
 }
 //**************************************************//
 
-static void set_control_edp(Lcd_Config_t *pConf)
+static int set_control_edp(Lcd_Config_t *pConf)
 {
+	int ret = 0;
 	EDP_Video_Mode_t  vm;
 	EDP_Link_Config_t link_config;
 	
@@ -1820,6 +1841,7 @@ static void set_control_edp(Lcd_Config_t *pConf)
 	link_config.link_adaptive = pConf->lcd_control.edp_config->link_adaptive;
 	link_config.vswing = pConf->lcd_control.edp_config->vswing;
 	link_config.preemphasis = pConf->lcd_control.edp_config->preemphasis;
+	link_config.bit_rate = pConf->lcd_control.edp_config->bit_rate;
 	
 	//edp main stream attribute
 	vm.h_active = pConf->lcd_basic.h_active;
@@ -1840,13 +1862,16 @@ static void set_control_edp(Lcd_Config_t *pConf)
 	vm.bpc = pConf->lcd_basic.lcd_bits;	//bits per color
 	
 	//edp link maintain
-	dplpm_link_policy_maker(&link_config, &vm);
-	
+	ret = dplpm_link_policy_maker(&link_config, &vm);
+
 	//save feedback config by edp link maintain
 	pConf->lcd_control.edp_config->link_rate = link_config.link_rate;
 	pConf->lcd_control.edp_config->lane_count = link_config.lane_count;
 	pConf->lcd_control.edp_config->vswing = link_config.vswing;
 	pConf->lcd_control.edp_config->preemphasis = link_config.preemphasis;
+	pConf->lcd_control.edp_config->bit_rate = link_config.bit_rate;
+	
+	return ret;
 }
 #endif
 
@@ -2024,7 +2049,28 @@ static void init_phy_lvds(Lcd_Config_t *pConf)
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 static void init_phy_edp(Lcd_Config_t *pConf)
 {
-	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, 0x8018);//[7:4]swing b:800mv, step 50mv
+	unsigned swing_ctrl;
+	DBG_PRINT("%s\n", __FUNCTION__);
+	
+	switch (pConf->lcd_control.edp_config->vswing) {
+		case VAL_EDP_TX_PHY_VSWING_0:	//0.4V
+			swing_ctrl = 0x8018;
+			break;
+		case VAL_EDP_TX_PHY_VSWING_1:	//0.6V
+			swing_ctrl = 0x8088;
+			break;
+		case VAL_EDP_TX_PHY_VSWING_2:	//0.8V
+			swing_ctrl = 0x80c8;
+			break;
+		case VAL_EDP_TX_PHY_VSWING_3:	//1.2V
+			swing_ctrl = 0x80f8;
+			break;
+		default:
+			swing_ctrl = 0x8018;
+			break;
+	}
+	
+	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, swing_ctrl);//[7:4]swing b:800mv, step 50mv
 	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL2, ((0x6 << 16) | (0xf5d7 << 0)));
 	WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL3, ((0xc2b2 << 16) | (0x600 << 0)));//0xd2b0fe00);
 }
@@ -2382,8 +2428,13 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
 		pConf->lcd_timing.clk_ctrl = (tmp | ((crt_xd << CLK_CTRL_XD) | (pll_level << CLK_CTRL_LEVEL) | (pll_frac << CLK_CTRL_FRAC)));
 	}
 	else {
-		pConf->lcd_timing.pll_ctrl = 0x10220;
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
+		pConf->lcd_timing.pll_ctrl = (1 << PLL_CTRL_OD) | (1 << PLL_CTRL_N) | (32 << PLL_CTRL_M);
 		pConf->lcd_timing.div_ctrl = 0x18803;
+#elif (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+		pConf->lcd_timing.pll_ctrl = (1 << PLL_CTRL_OD) | (1 << PLL_CTRL_N) | (50 << PLL_CTRL_M);
+		pConf->lcd_timing.div_ctrl = 0x18803 | (0 << DIV_CTRL_EDP_DIV1) | (0 << DIV_CTRL_EDP_DIV0) | (1 << DIV_CTRL_DIV_PRE);
+#endif
 		pConf->lcd_timing.clk_ctrl = (pConf->lcd_timing.clk_ctrl & ~(0xf << CLK_CTRL_XD)) | (7 << CLK_CTRL_XD);
 		printk("Out of clock range, reset to default setting!\n");
 	}
@@ -2539,6 +2590,7 @@ static void select_edp_link_config(Lcd_Config_t *pConf)
 	unsigned bit_rate;
 	unsigned link_rate;
 	bit_rate = (pConf->lcd_timing.lcd_clk / 1000) * pConf->lcd_basic.lcd_bits * 3 / 1000;	//Mbps
+	pConf->lcd_control.edp_config->bit_rate = bit_rate;
 	
 	if (pConf->lcd_control.edp_config->link_user == 0) {
 		if (bit_rate < EDP_TX_LINK_CAPACITY_162 * 1) {
@@ -2572,7 +2624,20 @@ static void select_edp_link_config(Lcd_Config_t *pConf)
 		}
 	}
 	else {
-		pConf->lcd_control.edp_config->link_rate = (pConf->lcd_control.edp_config->link_rate == 0) ? VAL_EDP_TX_LINK_BW_SET_162 : VAL_EDP_TX_LINK_BW_SET_270;
+		//pConf->lcd_control.edp_config->link_rate = (pConf->lcd_control.edp_config->link_rate == 0) ? VAL_EDP_TX_LINK_BW_SET_162 : VAL_EDP_TX_LINK_BW_SET_270;
+		switch (pConf->lcd_control.edp_config->link_rate) {
+			case VAL_EDP_TX_LINK_BW_SET_162:
+			case 0:
+				pConf->lcd_control.edp_config->link_rate = VAL_EDP_TX_LINK_BW_SET_162;
+				break;
+			case VAL_EDP_TX_LINK_BW_SET_270:
+			case 1:
+				pConf->lcd_control.edp_config->link_rate = VAL_EDP_TX_LINK_BW_SET_270;
+				break;
+			default:
+				pConf->lcd_control.edp_config->link_rate = VAL_EDP_TX_LINK_BW_SET_270;
+				break;
+		}
 		link_rate=(pConf->lcd_control.edp_config->link_rate==VAL_EDP_TX_LINK_BW_SET_162)?EDP_TX_LINK_CAPACITY_162:EDP_TX_LINK_CAPACITY_270;
 		if (bit_rate > link_rate*pConf->lcd_control.edp_config->lane_count){
 			if(pConf->lcd_basic.lcd_bits == 8){
@@ -2717,8 +2782,6 @@ static void lcd_control_config(Lcd_Config_t *pConf)
 
 static void lcd_config_init(Lcd_Config_t *pConf)
 {
-	lcd_control_config(pConf);
-	
 	if (pConf->lcd_timing.clk_ctrl & (1 << CLK_CTRL_AUTO)) {
 		printk("\nAuto generate clock parameters.\n");
 		generate_clk_parameter(pConf);
@@ -2730,6 +2793,7 @@ static void lcd_config_init(Lcd_Config_t *pConf)
 	}
 	lcd_sync_duration(pConf);
 	lcd_tcon_config(pConf);
+	lcd_control_config(pConf);
 }
 
 static void set_video_adjust(Lcd_Config_t *pConf)
@@ -2845,14 +2909,17 @@ static void _init_lcd_driver(Lcd_Config_t *pConf)	//before power on lcd
 	printk("%s finished.\n", __FUNCTION__);
 }
 
-static void _init_lcd_driver_post(Lcd_Config_t *pConf)	//after power on lcd
+static int _init_lcd_driver_post(Lcd_Config_t *pConf)	//after power on lcd
 {
+	int ret = 0;
+	
 	switch(pConf->lcd_basic.lcd_type){
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 		case LCD_DIGITAL_MIPI:
 			break;
 		case LCD_DIGITAL_EDP:
-			set_control_edp(pConf);
+			ret = set_control_edp(pConf);
+			mdelay(200);
 			break;
 #endif
 		case LCD_DIGITAL_LVDS:
@@ -2861,13 +2928,13 @@ static void _init_lcd_driver_post(Lcd_Config_t *pConf)	//after power on lcd
 		default:
 			break;
 	}
-	data_status = ON;
 	printk("%s finished.\n", __FUNCTION__);
+	
+	return ret;
 }
 
 static void _disable_lcd_driver_pre(Lcd_Config_t *pConf)	//before power off lcd
 {
-	data_status = OFF;
 	switch(pConf->lcd_basic.lcd_type){
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 		case LCD_DIGITAL_MIPI:
@@ -2952,6 +3019,8 @@ void _disable_backlight(void)
 static DEFINE_MUTEX(lcd_init_mutex);
 static void _lcd_module_enable(void)
 {
+	int ret = 0;
+	
 	//unsigned long flags = 0;
 	mutex_lock(&lcd_init_mutex);
 	//spin_lock_irqsave(&lcd_init_lock, flags);
@@ -2959,8 +3028,21 @@ static void _lcd_module_enable(void)
 
 	_init_lcd_driver(pDev->pConf);
 	lcd_power_ctrl(ON);
-	_init_lcd_driver_post(pDev->pConf);
-
+	ret = _init_lcd_driver_post(pDev->pConf);
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+	if (pDev->pConf->lcd_basic.lcd_type == LCD_DIGITAL_EDP) {
+		if (ret > 0) {
+			_disable_lcd_driver_pre(pDev->pConf);
+			lcd_power_ctrl(OFF);
+			_disable_lcd_driver(pDev->pConf);
+			mdelay(30);
+			_init_lcd_driver(pDev->pConf);
+			lcd_power_ctrl(ON);
+			_init_lcd_driver_post(pDev->pConf);
+		}
+	}
+#endif
+	data_status = ON;
 	_enable_vsync_interrupt();
 	//spin_unlock_irqrestore(&lcd_init_lock, flags);
 	mutex_unlock(&lcd_init_mutex);
@@ -2972,6 +3054,7 @@ static void _lcd_module_disable(void)
 	mutex_lock(&lcd_init_mutex);
 	//spin_lock_irqsave(&lcd_init_lock, flags);
 	BUG_ON(pDev==NULL);
+	data_status = OFF;
 	_disable_lcd_driver_pre(pDev->pConf);
 	lcd_power_ctrl(OFF);
 	_disable_lcd_driver(pDev->pConf);
@@ -3437,7 +3520,7 @@ static Lcd_Timing_t temp_lcd_timing;
 static unsigned short temp_dith_user, temp_dith_ctrl;
 static unsigned int temp_vadj_brightness, temp_vadj_contrast, temp_vadj_saturation;
 static int temp_lvds_repack, temp_pn_swap, temp_lvds_phy_ctrl;
-static unsigned char temp_edp_link_rate, temp_edp_lane_count;
+static unsigned char temp_edp_link_rate, temp_edp_lane_count, temp_edp_vswing, temp_edp_preemphasis;
 static unsigned short last_h_active, last_v_active;
 
 static const char * lcd_usage_str =
@@ -3496,6 +3579,7 @@ static void read_current_lcd_config(Lcd_Config_t *pConf)
 {	
 	unsigned lcd_clk;
 	int h_adj, v_adj;
+	unsigned char vswing_level;
 	
 	lcd_clk = (pConf->lcd_timing.lcd_clk / 1000);
 	h_adj = ((pConf->lcd_timing.h_offset >> 31) & 1);
@@ -3526,7 +3610,24 @@ static void read_current_lcd_config(Lcd_Config_t *pConf)
 			break;
 		case LCD_DIGITAL_EDP:
 			printk("link_rate	%s\nlane_count	%u\n", (pConf->lcd_control.edp_config->link_rate == VAL_EDP_TX_LINK_BW_SET_162) ? "1.62G" : "2.7G", pConf->lcd_control.edp_config->lane_count);
-			printk("link_adaptive	%u\nvswing		%u\n", pConf->lcd_control.edp_config->link_adaptive, pConf->lcd_control.edp_config->vswing);
+			switch (pConf->lcd_control.edp_config->vswing) {
+				case VAL_EDP_TX_PHY_VSWING_0:
+					vswing_level = 0;
+					break;
+				case VAL_EDP_TX_PHY_VSWING_1:
+					vswing_level = 1;
+					break;
+				case VAL_EDP_TX_PHY_VSWING_2:
+					vswing_level = 2;
+					break;
+				case VAL_EDP_TX_PHY_VSWING_3:
+					vswing_level = 3;
+					break;
+				default:
+					vswing_level = 0;
+					break;
+			}
+			printk("link_adaptive	%u\nvswing		%u\n", pConf->lcd_control.edp_config->link_adaptive, vswing_level);
 			break;
 #endif
 		default:
@@ -3593,6 +3694,8 @@ static void save_lcd_config(Lcd_Config_t *pConf)
 	
 	temp_edp_link_rate = pConf->lcd_control.edp_config->link_rate;
 	temp_edp_lane_count = pConf->lcd_control.edp_config->lane_count;
+	temp_edp_vswing = pConf->lcd_control.edp_config->vswing;
+	temp_edp_preemphasis = pConf->lcd_control.edp_config->preemphasis;
 	
 	temp_dith_user = pConf->lcd_effect.dith_user;
 	temp_dith_ctrl = pConf->lcd_effect.dith_cntl_addr;
@@ -3640,9 +3743,6 @@ static void reset_lcd_config(Lcd_Config_t *pConf)
 	pConf->lcd_control.lvds_config->pn_swap = temp_pn_swap;
 	pConf->lcd_control.dphy_config->phy_ctrl = temp_lvds_phy_ctrl;
 	
-	pConf->lcd_control.edp_config->link_rate = temp_edp_link_rate;
-	pConf->lcd_control.edp_config->lane_count = temp_edp_lane_count;
-	
 	pConf->lcd_effect.dith_user = temp_dith_user;
 	pConf->lcd_effect.dith_cntl_addr = temp_dith_ctrl;
 	pConf->lcd_effect.vadj_brightness = temp_vadj_brightness;
@@ -3650,6 +3750,12 @@ static void reset_lcd_config(Lcd_Config_t *pConf)
 	pConf->lcd_effect.vadj_saturation = temp_vadj_saturation;
 	
 	lcd_config_init(pDev->pConf);
+	//restore edp link config, for they are translate from user value to reg value
+	pConf->lcd_control.edp_config->link_rate = temp_edp_link_rate;
+	pConf->lcd_control.edp_config->lane_count = temp_edp_lane_count;
+	pConf->lcd_control.edp_config->vswing = temp_edp_vswing;
+	pConf->lcd_control.edp_config->preemphasis = temp_edp_preemphasis;
+	
 	_lcd_module_enable();
 	
 	pDev->lcd_info.sync_duration_num = pDev->pConf->lcd_timing.sync_duration_num;
@@ -3877,9 +3983,9 @@ static ssize_t lcd_debug(struct class *class, struct class_attribute *attr, cons
 				t[1] = 4;
 				ret = sscanf(buf, "edp %u %u", &t[0], &t[1]);
 				if (t[0] == 0)
-					pDev->pConf->lcd_control.edp_config->link_rate = VAL_EDP_TX_LINK_BW_SET_162;
+					pDev->pConf->lcd_control.edp_config->link_rate = 0;
 				else
-					pDev->pConf->lcd_control.edp_config->link_rate = VAL_EDP_TX_LINK_BW_SET_270;
+					pDev->pConf->lcd_control.edp_config->link_rate = 1;
 				switch (t[1]) {
 					case 1:
 					case 2:
@@ -3889,7 +3995,7 @@ static ssize_t lcd_debug(struct class *class, struct class_attribute *attr, cons
 						pDev->pConf->lcd_control.edp_config->lane_count = 4;
 						break;
 				}
-				printk("set edp link_rate = %sGbps, lane_count = %u\n", ((pDev->pConf->lcd_control.edp_config->link_rate == VAL_EDP_TX_LINK_BW_SET_162) ? "1.62" : "2.70"), pDev->pConf->lcd_control.edp_config->lane_count);
+				printk("set edp link_rate = %sGbps, lane_count = %u\n", ((pDev->pConf->lcd_control.edp_config->link_rate == 0) ? "1.62" : "2.70"), pDev->pConf->lcd_control.edp_config->lane_count);
 			}
 			break;
 		default:
@@ -4613,21 +4719,18 @@ static int lcd_probe(struct platform_device *pdev)
 #endif
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 	switch (pDev->pConf->lcd_basic.lcd_type) {
-                case LCD_DIGITAL_MIPI :
-                        dsi_probe(pDev->pConf);
-                        break;
-                case LCD_DIGITAL_EDP :
-                        edp_probe();
-                        break;
-                default:
-                        break;
-        }
+		case LCD_DIGITAL_MIPI :
+			dsi_probe(pDev->pConf);
+			break;
+		case LCD_DIGITAL_EDP :
+			edp_probe();
+			break;
+		default:
+			break;
+    }
 #endif
 	printk("LCD probe ok\n");
-#if 0
-	_disable_backlight();
-	_lcd_module_disable();
-#endif
+
 	return 0;
 }
 
diff --git a/include/linux/amlogic/vout/lcdoutc.h b/include/linux/amlogic/vout/lcdoutc.h
index 4cea911c2f2f..583ebb932e25 100755
--- a/include/linux/amlogic/vout/lcdoutc.h
+++ b/include/linux/amlogic/vout/lcdoutc.h
@@ -203,9 +203,6 @@
 	/* clk max error */
 	#define MAX_ERROR				(2 * 1000)
 
-#define EDP_TX_LINK_CAPACITY_162	1296	//Mbps
-#define EDP_TX_LINK_CAPACITY_270	2160	//Mbps
-
 #define CRT_VID_DIV_MAX				15
 #define OD_SEL_MAX				4
 #define DIV_PRE_SEL_MAX				6
@@ -450,6 +447,7 @@ typedef struct {
 	unsigned char link_adaptive;
 	unsigned char vswing;
 	unsigned char preemphasis;
+	unsigned int bit_rate;
 } EDP_Config_t;
 
 typedef struct {
-- 
2.19.0

