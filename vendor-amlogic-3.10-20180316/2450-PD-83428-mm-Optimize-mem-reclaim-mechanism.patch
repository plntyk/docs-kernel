From 6bc9925afd0fdf98788d23d417ed820ac1edd073 Mon Sep 17 00:00:00 2001
From: "shi.liu" <shi.liu@amlogic.com>
Date: Thu, 5 Dec 2013 17:12:15 +0800
Subject: [PATCH 2450/5965] PD  #83428: mm : Optimize mem reclaim mechanism

---
 include/linux/mmzone.h | 4 ++--
 mm/page_alloc.c        | 9 +++++++--
 2 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index 5c76737d836b..fb73d93ed238 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -786,7 +786,7 @@ extern int init_currently_empty_zone(struct zone *zone, unsigned long start_pfn,
 				     enum memmap_context context);
 
 extern void lruvec_init(struct lruvec *lruvec);
-
+#define START_KSWAPD_FREE_PAGE_THRESH 32768
 static inline struct zone *lruvec_zone(struct lruvec *lruvec)
 {
 #ifdef CONFIG_MEMCG
@@ -849,7 +849,7 @@ static inline int is_normal_idx(enum zone_type idx)
 }
 
 /**
- * is_highmem - helper function to quickly check if a struct zone is a 
+ * is_highmem - helper function to quickly check if a struct zone is a
  *              highmem zone or not.  This is an attempt to keep references
  *              to ZONE_{DMA/NORMAL/HIGHMEM/etc} in general code to a minimum.
  * @zone - pointer to struct zone variable
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 63858c4522b3..b21acf4a8212 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -2647,6 +2647,11 @@ retry_cpuset:
 	if (allocflags_to_migratetype(gfp_mask) == MIGRATE_MOVABLE)
 		alloc_flags |= ALLOC_CMA;
 #endif
+	if(global_page_state(NR_FREE_PAGES) < START_KSWAPD_FREE_PAGE_THRESH){
+		if (!(gfp_mask & __GFP_NO_KSWAPD))
+			wake_all_kswapd(order, zonelist, high_zoneidx,
+							zone_idx(preferred_zone));
+	}
 	/* First allocation attempt */
 	page = get_page_from_freelist(gfp_mask|__GFP_HARDWALL, nodemask, order,
 			zonelist, high_zoneidx, alloc_flags,
@@ -5472,11 +5477,11 @@ int __meminit init_per_zone_wmark_min(void)
 module_init(init_per_zone_wmark_min)
 
 /*
- * min_free_kbytes_sysctl_handler - just a wrapper around proc_dointvec() so 
+ * min_free_kbytes_sysctl_handler - just a wrapper around proc_dointvec() so
  *	that we can call two helper functions whenever min_free_kbytes
  *	changes.
  */
-int min_free_kbytes_sysctl_handler(ctl_table *table, int write, 
+int min_free_kbytes_sysctl_handler(ctl_table *table, int write,
 	void __user *buffer, size_t *length, loff_t *ppos)
 {
 	proc_dointvec(table, write, buffer, length, ppos);
-- 
2.19.0

