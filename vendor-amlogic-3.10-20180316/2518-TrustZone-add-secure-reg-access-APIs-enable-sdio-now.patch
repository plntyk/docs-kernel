From c9af60a15d5be38133eb9d57399a4b6740ff7a2a Mon Sep 17 00:00:00 2001
From: Peifu Jiang <peifu.jiang@amlogic.com>
Date: Thu, 12 Dec 2013 19:17:17 +0800
Subject: [PATCH 2518/5965] TrustZone: add secure reg access APIs, enable sdio
 now.

---
 .../boot/dts/amlogic/meson8_k200_v1_tee.dtd   |   2 +-
 .../mach-meson8/include/mach/meson-secure.h   |   4 +-
 arch/arm/mach-meson8/include/mach/sd.h        |  11 ++
 arch/arm/mach-meson8/meson-secure.c           | 132 ++++++++++++------
 4 files changed, 102 insertions(+), 47 deletions(-)
 mode change 100755 => 100644 arch/arm/mach-meson8/meson-secure.c

diff --git a/arch/arm/boot/dts/amlogic/meson8_k200_v1_tee.dtd b/arch/arm/boot/dts/amlogic/meson8_k200_v1_tee.dtd
index cc1046ec1dea..0c63e46d8068 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200_v1_tee.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200_v1_tee.dtd
@@ -368,7 +368,7 @@ void root_func(){
 //$$ L2 PROP_CHOICE "sdio_pin_5_match" = "pinctrl-5"
 //$$ L2 PROP_CHOICE "sdio_pin_6_match" = "pinctrl-6"
 sdio{
-        compatible = "amlogic,aml_sdio-disable";
+        compatible = "amlogic,aml_sdio";
         dev_name = "aml_sdio.0";
         status = "okay";
         reg = <0xc1108c20 0x20>;
diff --git a/arch/arm/mach-meson8/include/mach/meson-secure.h b/arch/arm/mach-meson8/include/mach/meson-secure.h
index 0a6343f57287..0b0b06166920 100755
--- a/arch/arm/mach-meson8/include/mach/meson-secure.h
+++ b/arch/arm/mach-meson8/include/mach/meson-secure.h
@@ -11,7 +11,7 @@
 /*
  * Secure Definition
  *
- * Copyright (C) 2012 Amlogic, Inc.
+ * Copyright (C) 2013 Amlogic, Inc.
  *
  * Author: Platform-SH@amlogic.com
  *
@@ -72,6 +72,8 @@ extern u32 meson_read_corestatus(u32 cpu);
 extern u32 meson_modify_corestatus(u32 cpu, u32 arg);
 extern void meson_auxcoreboot_addr(u32 arg1, u32 arg2);
 extern void meson_suspend_firmware(void);
+extern uint32_t meson_secure_reg_read(uint32_t addr);
+extern uint32_t meson_secure_reg_write(uint32_t addr, uint32_t val);
 
 // efuse HAL_API arg
 struct efuse_hal_api_arg{
diff --git a/arch/arm/mach-meson8/include/mach/sd.h b/arch/arm/mach-meson8/include/mach/sd.h
index e27e6a6ebaf0..db8591f8b05c 100755
--- a/arch/arm/mach-meson8/include/mach/sd.h
+++ b/arch/arm/mach-meson8/include/mach/sd.h
@@ -610,6 +610,7 @@ extern void amlsd_init_debugfs(struct mmc_host *host);
 		printk("[%s] " fmt, __FUNCTION__, ##args);	\
 }while(0)
 
+#ifndef CONFIG_MESON_TRUSTZONE
 // P_AO_SECURE_REG1 is "Secure Register 1" in <M8-Secure-AHB-Registers.doc>
 #define aml_jtag_gpioao() do{\
     writel(0x102, (u32 *)P_AO_SECURE_REG1); \
@@ -618,6 +619,16 @@ extern void amlsd_init_debugfs(struct mmc_host *host);
 #define aml_jtag_sd() do{\
     writel(0x220, (u32 *)P_AO_SECURE_REG1); \
 }while(0)
+#else
+/* Secure REG can only be accessed in Secure World if TrustZone enabled.*/
+#include <mach/meson-secure.h>
+#define aml_jtag_gpioao() do {\
+	meson_secure_reg_write(P_AO_SECURE_REG1, 0x102); \
+} while(0)
+#define aml_jtag_sd() do {\
+	meson_secure_reg_write(P_AO_SECURE_REG1, 0x220); \
+} while(0)
+#endif /* CONFIG_MESON_TRUSTZONE */
 
 #define aml_uart_pinctrl() do {\
     \
diff --git a/arch/arm/mach-meson8/meson-secure.c b/arch/arm/mach-meson8/meson-secure.c
old mode 100755
new mode 100644
index a0aa9de0eaf9..34df3c73cbe1
--- a/arch/arm/mach-meson8/meson-secure.c
+++ b/arch/arm/mach-meson8/meson-secure.c
@@ -1,15 +1,23 @@
 /*
- * Meson secure APIs file.
- *
  *  Copyright (C) 2002 ARM Ltd.
  *  All Rights Reserved
  *  Copyright (c) 2010, Code Aurora Forum. All rights reserved.
  *
- * This program is free software,you can redistribute it and/or modify
+ * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
 
+/*
+ * Meson secure APIs.
+ *
+ * Copyright (C) 2013 Amlogic, Inc.
+ *
+ * Author: Platform-SH@amlogic.com
+ *         Platform-BJ@amlogic.com
+ *
+ */
+
 #include <linux/module.h>
 #include <linux/kernel.h>
 #include <linux/init.h>
@@ -20,63 +28,73 @@
 #include <asm/cacheflush.h>
 #include <asm/hardware/cache-l2x0.h>
 #include <linux/dma-mapping.h>
-#ifdef  CONFIG_MESON_TRUSTZONE
+
+#ifdef CONFIG_MESON_TRUSTZONE
 #include <mach/meson-secure.h>
 #endif
 
+#define MESON_SECURE_DEBUG 1
+#ifdef MESON_SECURE_DEBUG
+#define TZDBG(fmt, args...) printk("meson-secure: " fmt, ## args);
+#else
+#define TZDBG(fmt, args...)
+#endif
+
 /*
 int meson_secure_memblock(unsigned startaddr, unsigned endaddr, struct secure_memblock_ctrl* pctrl)
 {
 	int ret;
 	struct secure_memblock_info memblock_info;
-	
+
 	if(!pctrl)
-		return -1;	
+		return -1;
 	if(((startaddr & 0xffff) != 0) || ((endaddr&0xffff)!=0xffff)){
 		printk("secure memory block must be 16 bits align!\n");
 		return -1;
 	}
-	
+
 	memblock_info.startaddr = startaddr;
 	memblock_info.endaddr = endaddr;
-	memcpy(&(memblock_info.memblock_ctrl), pctrl, sizeof(memblock_info.memblock_ctrl));	
+	memcpy(&(memblock_info.memblock_ctrl), pctrl, sizeof(memblock_info.memblock_ctrl));
 	__cpuc_flush_dcache_area((void*)&memblock_info, sizeof(memblock_info));
 	outer_clean_range(__pa(&memblock_info), __pa(&memblock_info+1));
-	
-	ret = meson_smc_internal_api(INTERNAL_API_MEMBLOCK_CONFIG, __pa(&memblock_info));	
-	return ret;	
+
+	ret = meson_smc_internal_api(INTERNAL_API_MEMBLOCK_CONFIG, __pa(&memblock_info));
+	return ret;
 }
 */
-struct memconfig memsecure[MEMCONFIG_NUM]={0};
+
+struct memconfig memsecure[MEMCONFIG_NUM] = {0};
 int meson_trustzone_memconfig()
 {
 	int ret;
 	struct memconfig_hal_api_arg arg;
 	arg.memconfigbuf_phy_addr = __pa(memsecure);
 	arg.memconfigbuf_count = MEMCONFIG_NUM;
-	
+
 	__cpuc_flush_dcache_area(memsecure, sizeof(memsecure));
-	outer_clean_range(__pa(memsecure), (__pa(memsecure+MEMCONFIG_NUM)));
+	outer_clean_range(__pa(memsecure), (__pa(memsecure + MEMCONFIG_NUM)));
 	__cpuc_flush_dcache_area(&arg, sizeof(arg));
-	outer_clean_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg))+1);
-	
-	ret=meson_smc_hal_api(TRUSTZONE_HAL_API_MEMCONFIG, __pa(&arg));
-	
-	outer_inv_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg))+1);
+	outer_clean_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
+
+	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_MEMCONFIG, __pa(&arg));
+
+	outer_inv_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
 	dmac_unmap_area(&arg, sizeof(arg), DMA_FROM_DEVICE);
-	outer_inv_range(__pa(memsecure), __pa(memsecure+MEMCONFIG_NUM));
+	outer_inv_range(__pa(memsecure), __pa(memsecure + MEMCONFIG_NUM));
 	dmac_unmap_area(memsecure, sizeof(memsecure), DMA_FROM_DEVICE);
-	
+
 	return ret;
 }
 
 unsigned int meson_trustzone_getmemsecure_size()
 {
-	unsigned int size=0;
+	unsigned int size = 0;
 	int i;
-	for(i=0; i<MEMCONFIG_NUM; i++){
-		if((memsecure[i].start_phy_addr!=0) && (memsecure[i].end_phy_addr!=0))
-			size += memsecure[i].end_phy_addr-memsecure[i].start_phy_addr+1;
+	for (i = 0; i < MEMCONFIG_NUM; i++) {
+		if ((memsecure[i].start_phy_addr != 0) && (memsecure[i].end_phy_addr != 0)) {
+			size += memsecure[i].end_phy_addr - memsecure[i].start_phy_addr + 1;
+		}
 	}
 	return size;
 }
@@ -84,43 +102,67 @@ unsigned int meson_trustzone_getmemsecure_size()
 int meson_trustzone_getmemconfig(unsigned char* name, unsigned int* startphyaddr, unsigned int* endphyaddr)
 {
 	unsigned int i;
-	for(i=0; i<MEMCONFIG_NUM; i++){
-		if(strcmp(name, memsecure[i].name) == 0)
+	for (i = 0; i < MEMCONFIG_NUM; i++) {
+		if (strcmp(name, memsecure[i].name) == 0) {
 			break;
+		}
 	}
-	if(i==MEMCONFIG_NUM)
+	if (i == MEMCONFIG_NUM) {
 		return -1;
-	if((memsecure[i].start_phy_addr == 0) || (memsecure[i].end_phy_addr == 0))
+	}
+	if ((memsecure[i].start_phy_addr == 0) || (memsecure[i].end_phy_addr == 0)) {
 		return -1;
-			
+	}
+
 	*startphyaddr = memsecure[i].start_phy_addr;
 	*endphyaddr = memsecure[i].end_phy_addr;
-	return 0;	
+	return 0;
 }
 
 int meson_trustzone_efuse(struct efuse_hal_api_arg* arg)
 {
 	int ret;
-	if(!arg)
+	if (!arg) {
 		return -1;
-	
+	}
+
 	__cpuc_flush_dcache_area(__va(arg->buffer_phy), arg->size);
-	outer_clean_range((arg->buffer_phy), (arg->buffer_phy+arg->size));
-	
+	outer_clean_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
+
 	__cpuc_flush_dcache_area(__va(arg->retcnt_phy), sizeof(unsigned int));
-	outer_clean_range(arg->retcnt_phy, (arg->retcnt_phy+sizeof(unsigned int)));
-	
+	outer_clean_range(arg->retcnt_phy, (arg->retcnt_phy + sizeof(unsigned int)));
+
 	__cpuc_flush_dcache_area((void*)arg, sizeof(struct efuse_hal_api_arg));
-	outer_clean_range(__pa(arg), __pa(arg+1));
-	
-	ret=meson_smc_hal_api(TRUSTZONE_HAL_API_EFUSE, __pa(arg));
+	outer_clean_range(__pa(arg), __pa(arg + 1));
+
+	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_EFUSE, __pa(arg));
 
-	if(arg->cmd == EFUSE_HAL_API_READ){
-		outer_inv_range((arg->buffer_phy), (arg->buffer_phy+arg->size));		
+	if (arg->cmd == EFUSE_HAL_API_READ) {
+		outer_inv_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
 		dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
 	}
-	outer_inv_range((arg->retcnt_phy),(arg->retcnt_phy+sizeof(unsigned int)));
+	outer_inv_range((arg->retcnt_phy), (arg->retcnt_phy + sizeof(unsigned int)));
 	dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
-		
-	return ret;	
+
+	return ret;
+}
+
+uint32_t meson_secure_reg_read(uint32_t addr)
+{
+	int ret;
+
+	ret = meson_smc2(addr);
+	TZDBG("read [0x%x]=%x\n");
+
+	return ret;
+}
+
+uint32_t meson_secure_reg_write(uint32_t addr, uint32_t val)
+{
+	int ret;
+
+	ret = meson_smc3(addr, val);
+	TZDBG("write [0x%x 0x%x]=%x\n", addr, val, ret);
+
+	return ret;
 }
-- 
2.19.0

