From 9d24da62ed3604a0ad01502ae57b13267ec70697 Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Fri, 13 Dec 2013 19:33:38 +0800
Subject: [PATCH 2535/5965] PD #84332: add brightness parameters for backlight
 control in dtd

---
 arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd  |  8 +-
 arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd  |  8 +-
 arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd  | 12 ++-
 drivers/amlogic/display/backlight/aml.dtd     | 10 ++-
 drivers/amlogic/display/backlight/aml_bl.c    | 73 ++++++++++++++-----
 .../amlogic/display/backlight/aml_lcd_bl.h    |  2 +-
 drivers/amlogic/display/vout/lcdoutc.c        |  1 -
 7 files changed, 83 insertions(+), 31 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
index a912eb91a209..fbd364de346e 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
@@ -784,7 +784,9 @@ sdio{
 //$$ DEVICE="backlight"
 //$$ L2 PROP_STR = "status"
 //$$ L2 PROP_CHOICE "Bl_pin_0_match" = "pinctrl-0"
-//$$ L2 PROP_U32 = "bl_level_default"
+//$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
+//$$ L2 PROP_U32 2= "bl_level_middle_mapping"
+//$$ L2 PROP_U32 2= "bl_level_max_min"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -798,7 +800,9 @@ sdio{
 		pinctrl-names = "default";
 		pinctrl-0 = <&lcd_backlight_pins>;	/** pwm pinmux */
 		
-		bl_level_default=<102>;	/** default brightness level */
+		bl_level_default_uboot_kernel=<20 128>;	/** default brightness level for uboot & kernel */
+		bl_level_middle_mapping=<102 70>;	/** brightness middle level mapping to a new level*/
+		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
index 76f31e06e99c..989dabd9f475 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_v1.dtd
@@ -796,7 +796,9 @@ sdio{
 //$$ DEVICE="backlight"
 //$$ L2 PROP_STR = "status"
 //$$ L2 PROP_CHOICE "Bl_pin_0_match" = "pinctrl-0"
-//$$ L2 PROP_U32 = "bl_level_default"
+//$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
+//$$ L2 PROP_U32 2= "bl_level_middle_mapping"
+//$$ L2 PROP_U32 2= "bl_level_max_min"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -810,7 +812,9 @@ sdio{
 		pinctrl-names = "default";
 		pinctrl-0 = <&lcd_backlight_pins>;	/** pwm pinmux */
 		
-		bl_level_default=<102>;	/** default brightness level */
+		bl_level_default_uboot_kernel=<20 128>;	/** default brightness level for uboot & kernel */
+		bl_level_middle_mapping=<102 70>;	/** brightness middle level mapping to a new level*/
+		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
index 429fed3f970d..7c0602e4883e 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
@@ -762,7 +762,9 @@ sdio{
 //$$ DEVICE="backlight"
 //$$ L2 PROP_STR = "status"
 //$$ L2 PROP_CHOICE "Bl_pin_0_match" = "pinctrl-0"
-//$$ L2 PROP_U32 = "bl_level_default"
+//$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
+//$$ L2 PROP_U32 2= "bl_level_middle_mapping"
+//$$ L2 PROP_U32 2= "bl_level_max_min"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -775,9 +777,11 @@ sdio{
 		status = "okay";
 		pinctrl-names = "default";
 		pinctrl-0 = <&lcd_backlight_pins>;	/** pwm pinmux */
-
-		bl_level_default=<102>;	/** default brightness level */
-
+		
+		bl_level_default_uboot_kernel=<20 128>;	/** default brightness level for uboot & kernel */
+		bl_level_middle_mapping=<128 102>;	/** brightness middle level mapping to a new level*/
+		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
+		
 		/* backlight power ctrl */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
 		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
diff --git a/drivers/amlogic/display/backlight/aml.dtd b/drivers/amlogic/display/backlight/aml.dtd
index 5fc94ffe3445..749a65d95fab 100755
--- a/drivers/amlogic/display/backlight/aml.dtd
+++ b/drivers/amlogic/display/backlight/aml.dtd
@@ -2,7 +2,9 @@
 //$$ DEVICE="backlight"
 //$$ L2 PROP_STR = "status"
 //$$ L2 PROP_CHOICE "Bl_pin_0_match" = "pinctrl-0"
-//$$ L2 PROP_U32 = "bl_level_default"
+//$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
+//$$ L2 PROP_U32 2= "bl_level_middle_mapping"
+//$$ L2 PROP_U32 2= "bl_level_max_min"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -16,7 +18,9 @@
 		pinctrl-names = "default";
 		pinctrl-0 = <&lcd_backlight_pins>;	/** pwm pinmux */
 		
-		bl_level_default=<102>;	/** default brightness level */
+		bl_level_default_uboot_kernel=<20 128>;	/** default brightness level for uboot & kernel */
+		bl_level_middle_mapping=<102 76>;	/** brightness middle level mapping to a new level*/
+		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
@@ -24,6 +28,6 @@
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<1000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
-		bl_pwm_duty_max_min=<100 20>;	/** brightness diminig duty_max, duty_min : (unit: %, positive logic, only for pwm control method) */
+		bl_pwm_duty_max_min=<100 25>;	/** brightness diminig duty_max, duty_min : (unit: %, positive logic, only for pwm control method) */
 	};
 #endif
\ No newline at end of file
diff --git a/drivers/amlogic/display/backlight/aml_bl.c b/drivers/amlogic/display/backlight/aml_bl.c
index ec0ee1fef228..1067ad186cc7 100755
--- a/drivers/amlogic/display/backlight/aml_bl.c
+++ b/drivers/amlogic/display/backlight/aml_bl.c
@@ -16,7 +16,9 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
  *
  * Author:  Wang Han <han.wang@amlogic.com>
- *
+ *  
+ * Modify:  Evoke Zhang <evoke.zhang@amlogic.com>
+ * compatible dts
  */
 
 #include <linux/init.h>
@@ -58,6 +60,10 @@
 #ifdef LCD_BACKLIGHT_SUPPORT
 typedef struct {
 	unsigned level_default;
+	unsigned level_mid;
+	unsigned level_mid_mapping;
+	unsigned level_min;
+	unsigned level_max;
     unsigned char method;
 	int gpio;
 	unsigned dim_max;
@@ -147,7 +153,8 @@ void bl_power_on(int bl_flag)
 		}
 	}
 	bl_real_status = 1;
-
+	printk("backlight power on\n");
+	
 exit_bl_power_on:
 	mutex_unlock(&bl_power_mutex);
 }
@@ -187,6 +194,7 @@ void bl_power_off(int bl_flag)
 		}
 	}
 	bl_real_status = 0;
+	printk("backlight power off\n");
 	mutex_unlock(&bl_power_mutex);
 }
 
@@ -194,28 +202,29 @@ static DEFINE_MUTEX(bl_level_mutex);
 static void set_backlight_level(unsigned level)
 {
 	unsigned pwm_hi = 0, pwm_lo = 0;
-	
+
 	mutex_lock(&bl_level_mutex);
 	
 	DPRINT("set_backlight_level: %u, last level: %u\n", level, bl_level);
-	level = (level > BL_LEVEL_MAX ? BL_LEVEL_MAX : (level < BL_LEVEL_MIN ? (level < BL_LEVEL_OFF ? 0 : BL_LEVEL_MIN) : level));
+	level = (level > bl_config.level_max ? bl_config.level_max : (level < bl_config.level_min ? (level < BL_LEVEL_OFF ? 0 : bl_config.level_min) : level));
 	bl_level = level;
 
 	if ((level == 0) && (bl_status == 1)) {
 		bl_power_off(DRV_BL_FLAG);
 	}
-	else {		
-		if (level > BL_LEVEL_MID)
-			level = ((level - BL_LEVEL_MID) * (BL_LEVEL_MAX - BL_LEVEL_MAPPED_MID)) / (BL_LEVEL_MAX - BL_LEVEL_MID) + BL_LEVEL_MAPPED_MID;
+	else {
+		//mapping
+		if (level > bl_config.level_mid)
+			level = ((level - bl_config.level_mid) * (bl_config.level_max - bl_config.level_mid_mapping)) / (bl_config.level_max - bl_config.level_mid) + bl_config.level_mid_mapping;
 		else
-			level = ((level - BL_LEVEL_MIN) * (BL_LEVEL_MAPPED_MID - BL_LEVEL_MIN)) / (BL_LEVEL_MID - BL_LEVEL_MIN) + BL_LEVEL_MIN;
-		
+			level = ((level - bl_config.level_min) * (bl_config.level_mid_mapping - bl_config.level_min)) / (bl_config.level_mid - bl_config.level_min) + bl_config.level_min;
+		DPRINT("level mapping=%u\n", level);
 		if (bl_config.method == BL_CTL_GPIO) {
-			level = bl_config.dim_min - ((level - BL_LEVEL_MIN) * (bl_config.dim_min - bl_config.dim_max)) / (BL_LEVEL_MAX - BL_LEVEL_MIN);
+			level = bl_config.dim_min - ((level - bl_config.level_min) * (bl_config.dim_min - bl_config.dim_max)) / (bl_config.level_max - bl_config.level_min);
 			aml_set_reg32_bits(P_LED_PWM_REG0, level, 0, 4);
 		}
 		else {
-			level = (bl_config.pwm_max - bl_config.pwm_min) * (level - BL_LEVEL_MIN) / (BL_LEVEL_MAX - BL_LEVEL_MIN) + bl_config.pwm_min;
+			level = (bl_config.pwm_max - bl_config.pwm_min) * (level - bl_config.level_min) / (bl_config.level_max - bl_config.level_min) + bl_config.pwm_min;
 			if (bl_config.method == BL_CTL_PWM_NEGATIVE) {
 				pwm_hi = bl_config.pwm_cnt - level;
 				pwm_lo = level;
@@ -237,7 +246,7 @@ static void set_backlight_level(unsigned level)
 				aml_write_reg32(P_PWM_PWM_D, (pwm_hi << 16) | (pwm_lo));
 			}
 		}
-		if (bl_status == 1)
+		if ((bl_status == 1) && (bl_real_status == 0))
 			bl_power_on(DRV_BL_FLAG);	
 	}
 	mutex_unlock(&bl_level_mutex);
@@ -358,14 +367,38 @@ static inline int _get_backlight_config(struct platform_device *pdev)
 	int i;
 	
 	if (pdev->dev.of_node) {
-		ret = of_property_read_u32(pdev->dev.of_node,"bl_level_default", &val);
+		ret = of_property_read_u32_array(pdev->dev.of_node,"bl_level_default_uboot_kernel", &bl_para[0], 2);
 		if(ret){
-			printk("faild to get bl_level_default\n");
+			printk("faild to get bl_level_default_uboot_kernel\n");
 			bl_config.level_default = BL_LEVEL_DEFAULT;
 		}
 		else {
-			bl_config.level_default = val;
+			bl_config.level_default = bl_para[1];
+		}
+		DPRINT("bl level default kernel=%u\n", bl_config.level_default);
+		ret = of_property_read_u32_array(pdev->dev.of_node, "bl_level_middle_mapping", &bl_para[0], 2);
+		if (ret) {
+			printk("faild to get bl_level_middle_mapping!\n");
+			bl_config.level_mid = BL_LEVEL_MID;
+			bl_config.level_mid_mapping = BL_LEVEL_MID_MAPPED;
+		}
+		else {
+			bl_config.level_mid = bl_para[0];
+			bl_config.level_mid_mapping = bl_para[1];
 		}
+		DPRINT("bl level mid=%u, mid_mapping=%u\n", bl_config.level_mid, bl_config.level_mid_mapping);
+		ret = of_property_read_u32_array(pdev->dev.of_node,"bl_level_max_min", &bl_para[0],2);
+		if(ret){
+			printk("faild to get bl_level_max_min\n");
+			bl_config.level_min = BL_LEVEL_MIN;
+			bl_config.level_max = BL_LEVEL_MAX;
+		}
+		else {
+			bl_config.level_max = bl_para[0];
+			bl_config.level_min = bl_para[1];
+		}
+		DPRINT("bl level max=%u, min=%u\n", bl_config.level_max, bl_config.level_min);
+		
 		ret = of_property_read_u32(pdev->dev.of_node, "bl_ctrl_method", &val);
 		if (ret) {
 			printk("faild to get bl_ctrl_method!\n");
@@ -505,7 +538,7 @@ static int aml_bl_probe(struct platform_device *pdev)
     }
 
 #ifdef CONFIG_USE_OF
-	_get_backlight_config(pdev);	
+	_get_backlight_config(pdev);
 #endif
 	
     amlbl->pdata = pdata;
@@ -519,7 +552,11 @@ static int aml_bl_probe(struct platform_device *pdev)
     DPRINT("%s() pdata->dft_brightness=%d\n", __FUNCTION__, pdata->dft_brightness);
 
     memset(&props, 0, sizeof(struct backlight_properties));
-    props.max_brightness = (pdata->max_brightness > 0 ? pdata->max_brightness : 255);
+#ifdef CONFIG_USE_OF
+	props.max_brightness = (bl_config.level_max > 0 ? bl_config.level_max : BL_LEVEL_MAX);
+#else
+    props.max_brightness = (pdata->max_brightness > 0 ? pdata->max_brightness : BL_LEVEL_MAX);
+#endif
     props.type = BACKLIGHT_RAW;
     bldev = backlight_device_register("aml-bl", &pdev->dev, amlbl, &aml_bl_ops, &props);
     if (IS_ERR(bldev)) {
@@ -535,7 +572,7 @@ static int aml_bl_probe(struct platform_device *pdev)
     bldev->props.power = FB_BLANK_UNBLANK;
 #ifdef CONFIG_USE_OF
 	bldev->props.brightness = (bl_config.level_default > 0 ? bl_config.level_default : BL_LEVEL_DEFAULT);
-#else	
+#else
     bldev->props.brightness = (pdata->dft_brightness > 0 ? pdata->dft_brightness : BL_LEVEL_DEFAULT);
 #endif
 
diff --git a/drivers/amlogic/display/backlight/aml_lcd_bl.h b/drivers/amlogic/display/backlight/aml_lcd_bl.h
index 7af509b3475e..cadcbf32bffd 100755
--- a/drivers/amlogic/display/backlight/aml_lcd_bl.h
+++ b/drivers/amlogic/display/backlight/aml_lcd_bl.h
@@ -1 +1 @@
-/* * AMLOGIC lcd driver header file for backlight driver. * * * Author:  Evoke Zhang <evoke.zhang@amlogic.com> * */#ifndef __AML_LCD_BACKLIGHT_H#define __AML_LCD_BACKLIGHT_H#define LCD_BACKLIGHT_SUPPORT#define	DRV_BL_FLAG		0#define LCD_BL_FLAG		1/* for lcd backlight power */#define BL_CTL_GPIO				0#define BL_CTL_PWM_NEGATIVE		1#define BL_CTL_PWM_POSITIVE		2#define BL_PWM_A				0#define BL_PWM_B				1#define BL_PWM_C				2#define BL_PWM_D				3#define BL_LEVEL_MAX    		255#define BL_LEVEL_MIN    		10#define BL_LEVEL_OFF			1#define BL_LEVEL_MID    		128#define BL_LEVEL_MAPPED_MID		102extern void bl_power_on(int bl_flag);extern void bl_power_off(int bl_flag);#endif
\ No newline at end of file
+/* * AMLOGIC lcd driver header file for backlight driver. * * * Author:  Evoke Zhang <evoke.zhang@amlogic.com> * */#ifndef __AML_LCD_BACKLIGHT_H#define __AML_LCD_BACKLIGHT_H#define LCD_BACKLIGHT_SUPPORT#define	DRV_BL_FLAG		0#define LCD_BL_FLAG		1/* for lcd backlight power */#define BL_CTL_GPIO				0#define BL_CTL_PWM_NEGATIVE		1#define BL_CTL_PWM_POSITIVE		2#define BL_PWM_A				0#define BL_PWM_B				1#define BL_PWM_C				2#define BL_PWM_D				3#define BL_LEVEL_MAX    		255#define BL_LEVEL_MIN    		10#define BL_LEVEL_OFF			1#define BL_LEVEL_MID    		128#define BL_LEVEL_MID_MAPPED		102extern void bl_power_on(int bl_flag);extern void bl_power_off(int bl_flag);#endif
\ No newline at end of file
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 85859a63c35f..0ee804c2248a 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -386,7 +386,6 @@ static void backlight_power_ctrl(Bool_t status)
 		bl_power_off(LCD_BL_FLAG);
 	}
 	bl_status = status;
-	printk("%s(): %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_power_ctrl(Bool_t status)
-- 
2.19.0

