From 83159d46de24ed7e11fbf83d228934e8db12c3da Mon Sep 17 00:00:00 2001
From: "shuai.cao" <shuai.cao@amlogic.com>
Date: Mon, 16 Dec 2013 15:30:25 +0800
Subject: [PATCH 2538/5965] PD#: 83748 ionvideo buffers limit

---
 drivers/amlogic/ionvideo/ionvideo.c | 213 ++++------------------------
 drivers/amlogic/ionvideo/ionvideo.h |  34 +----
 drivers/amlogic/ionvideo/ppmgr2.c   |   9 +-
 3 files changed, 37 insertions(+), 219 deletions(-)

diff --git a/drivers/amlogic/ionvideo/ionvideo.c b/drivers/amlogic/ionvideo/ionvideo.c
index 3134eff4fc85..9bbf45ffa58a 100755
--- a/drivers/amlogic/ionvideo/ionvideo.c
+++ b/drivers/amlogic/ionvideo/ionvideo.c
@@ -30,7 +30,7 @@ static unsigned int vid_limit = 16;
 module_param(vid_limit, uint, 0644);
 MODULE_PARM_DESC(vid_limit, "capture memory limit in megabytes");
 
-static struct ionvideo_fmt formats[] = {
+static const struct ionvideo_fmt formats[] = {
     {
         .name = "RGB32 (LE)",
         .fourcc = V4L2_PIX_FMT_RGB32, /* argb */
@@ -73,13 +73,14 @@ static struct ionvideo_fmt formats[] = {
     }
 };
 
-static struct ionvideo_fmt *get_format(struct v4l2_format *f) {
-    struct ionvideo_fmt *fmt;
+static const struct ionvideo_fmt *__get_format(u32 pixelformat)
+{
+    const struct ionvideo_fmt *fmt;
     unsigned int k;
 
     for (k = 0; k < ARRAY_SIZE(formats); k++) {
         fmt = &formats[k];
-        if (fmt->fourcc == f->fmt.pix.pixelformat)
+        if (fmt->fourcc == pixelformat)
             break;
     }
 
@@ -89,6 +90,11 @@ static struct ionvideo_fmt *get_format(struct v4l2_format *f) {
     return &formats[k];
 }
 
+static const struct ionvideo_fmt *get_format(struct v4l2_format *f)
+{
+    return __get_format(f->fmt.pix.pixelformat);
+}
+
 static LIST_HEAD (ionvideo_devlist);
 
 /* ------------------------------------------------------------------
@@ -150,14 +156,14 @@ static void ionvideo_thread_tick(struct ionvideo_dev *dev) {
     /* video seekTo clear list */
 
     if (!vf_peek(RECEIVER_NAME)) {
-        msleep(10);
+        msleep(5);
         return;
     }
     spin_lock_irqsave(&dev->slock, flags);
     if (list_empty(&dma_q->active)) {
         dprintk(dev, 3, "No active queue to serve\n");
         spin_unlock_irqrestore(&dev->slock, flags);
-        msleep(10);
+        msleep(5);
         return;
     }
     buf = list_entry(dma_q->active.next, struct ionvideo_buffer, list);
@@ -224,7 +230,6 @@ static int ionvideo_start_generating(struct ionvideo_dev *dev) {
 
     /* Resets frame counters */
     dev->ms = 0;
-    dev->mv_count = 0;
     //dev->jiffies = jiffies;
 
     dma_q->frame = 0;
@@ -285,7 +290,7 @@ static int queue_setup(struct vb2_queue *vq, const struct v4l2_format *fmt, unsi
     if (0 == *nbuffers)
         *nbuffers = 32;
 
-    while (size * *nbuffers > vid_limit * 1024 * 1024)
+    while (size * *nbuffers > vid_limit * MAX_WIDTH * MAX_HEIGHT)
         (*nbuffers)--;
 
     *nplanes = 1;
@@ -304,8 +309,7 @@ static int queue_setup(struct vb2_queue *vq, const struct v4l2_format *fmt, unsi
 
 static int buffer_prepare(struct vb2_buffer *vb) {
     struct ionvideo_dev *dev = vb2_get_drv_priv(vb->vb2_queue);
-    struct ionvideo_buffer
-    *buf = container_of(vb, struct ionvideo_buffer, vb);
+    struct ionvideo_buffer *buf = container_of(vb, struct ionvideo_buffer, vb);
     unsigned long size;
 
     dprintk(dev, 2, "%s, field=%d\n", __func__, vb->v4l2_buf.field);
@@ -331,16 +335,12 @@ static int buffer_prepare(struct vb2_buffer *vb) {
 
     buf->fmt = dev->fmt;
 
-    //precalculate_bars(dev);
-    //precalculate_line(dev);
-
     return 0;
 }
 
 static void buffer_queue(struct vb2_buffer *vb) {
     struct ionvideo_dev *dev = vb2_get_drv_priv(vb->vb2_queue);
-    struct ionvideo_buffer
-    *buf = container_of(vb, struct ionvideo_buffer, vb);
+    struct ionvideo_buffer *buf = container_of(vb, struct ionvideo_buffer, vb);
     struct ionvideo_dmaqueue *vidq = &dev->vidq;
     unsigned long flags = 0;
 
@@ -378,7 +378,7 @@ static void ionvideo_unlock(struct vb2_queue *vq) {
     mutex_unlock(&dev->mutex);
 }
 
-static struct vb2_ops ionvideo_video_qops = {
+static const struct vb2_ops ionvideo_video_qops = {
     .queue_setup = queue_setup,
     .buf_prepare = buffer_prepare,
     .buf_queue = buffer_queue,
@@ -420,7 +420,7 @@ static int vidioc_querycap(struct file *file, void *priv, struct v4l2_capability
 }
 
 static int vidioc_enum_fmt_vid_cap(struct file *file, void *priv, struct v4l2_fmtdesc *f) {
-    struct ionvideo_fmt *fmt;
+    const struct ionvideo_fmt *fmt;
 
     if (f->index >= ARRAY_SIZE(formats))
         return -EINVAL;
@@ -450,7 +450,7 @@ static int vidioc_g_fmt_vid_cap(struct file *file, void *priv, struct v4l2_forma
 
 static int vidioc_try_fmt_vid_cap(struct file *file, void *priv, struct v4l2_format *f) {
     struct ionvideo_dev *dev = video_drvdata(file);
-    struct ionvideo_fmt *fmt;
+    const struct ionvideo_fmt *fmt;
 
     fmt = get_format(f);
     if (!fmt) {
@@ -507,29 +507,28 @@ static int vidioc_enum_framesizes(struct file *file, void *fh, struct v4l2_frmsi
 }
 
 static int vidioc_qbuf(struct file *file, void *priv, struct v4l2_buffer *p) {
-
     struct ionvideo_dev *dev = video_drvdata(file);
-    struct vb2_queue *q;
     struct ppmgr2_device* ppmgr2_dev = &(dev->ppmgr2_dev);
     int ret = 0;
 
     ret = vb2_ioctl_qbuf(file, priv, p);
     if (ret != 0) { return ret; }
 
-    q = dev->vdev.queue;
-    if (ppmgr2_dev->inited_canvas < q->num_buffers){
+    if (!ppmgr2_dev->phy_addr[p->index]){
         struct vb2_buffer *vb;
+        struct vb2_queue *q;
         void* phy_addr = NULL;
+        q = dev->vdev.queue;
         vb = q->bufs[p->index];
         phy_addr = vb2_plane_cookie(vb, 0);
-        if (phy_addr && !ppmgr2_canvas_config(ppmgr2_dev, dev->width, dev->height, dev->fmt->fourcc, phy_addr, p->index)) {
-            ppmgr2_dev->inited_canvas += 1;
+        if (phy_addr) {
+            ret = ppmgr2_canvas_config(ppmgr2_dev, dev->width, dev->height, dev->fmt->fourcc, phy_addr, p->index);
         } else {
             return -ENOMEM;
         }
     }
 
-    return 0;
+    return ret;
 }
 
 #define NUM_INPUTS 10
@@ -560,134 +559,12 @@ static int vidioc_s_input(struct file *file, void *priv, unsigned int i) {
         return 0;
 
     dev->input = i;
-    //precalculate_bars(dev);
-    //precalculate_line(dev);
-    return 0;
-}
-
-/* --- controls ---------------------------------------------- */
-
-static int ionvideo_g_volatile_ctrl(struct v4l2_ctrl *ctrl) {
-    //struct ionvideo_dev
-    //*dev = container_of(ctrl->handler, struct ionvideo_dev, ctrl_handler);
-
-    //if (ctrl == dev->autogain)
-    //    dev->gain->val = jiffies & 0xff;
-    return 0;
-}
-
-
-#define IONVIDEO_CID_CUSTOM_BASE    (V4L2_CID_USER_BASE | 0xf000)
-
-static int ionvideo_s_ctrl(struct v4l2_ctrl *ctrl) {
-    struct ionvideo_dev
-    *dev = container_of(ctrl->handler, struct ionvideo_dev, ctrl_handler);
-
-    switch (ctrl->id) {
-    case V4L2_CID_ALPHA_COMPONENT:
-        dev->alpha_component = ctrl->val;
-        break;
-    default:
-        if (ctrl == dev->button)
-            dev->button_pressed = 30;
-        break;
-    }
     return 0;
 }
 
 /* ------------------------------------------------------------------
  File operations for the device
  ------------------------------------------------------------------*/
-
-static const struct v4l2_ctrl_ops ionvideo_ctrl_ops = {
-    .g_volatile_ctrl = ionvideo_g_volatile_ctrl,
-    .s_ctrl = ionvideo_s_ctrl,
-};
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_button = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 0,
-    .name = "Button",
-    .type = V4L2_CTRL_TYPE_BUTTON,
-};
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_boolean = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 1,
-    .name = "Boolean",
-    .type = V4L2_CTRL_TYPE_BOOLEAN,
-    .min = 0,
-    .max = 1,
-    .step = 1,
-    .def = 1,
-};
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_int32 = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 2,
-    .name = "Integer 32 Bits",
-    .type = V4L2_CTRL_TYPE_INTEGER,
-    .min = 0x80000000,
-    .max = 0x7fffffff,
-    .step = 1,
-};
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_int64 = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 3,
-    .name = "Integer 64 Bits",
-    .type = V4L2_CTRL_TYPE_INTEGER64,
-};
-
-static const char * const ionvideo_ctrl_menu_strings[] = { "Menu Item 0 (Skipped)", "Menu Item 1", "Menu Item 2 (Skipped)", "Menu Item 3", "Menu Item 4", "Menu Item 5 (Skipped)", NULL, };
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_menu = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 4,
-    .name = "Menu",
-    .type = V4L2_CTRL_TYPE_MENU,
-    .min = 1,
-    .max = 4,
-    .def = 3,
-    .menu_skip_mask = 0x04,
-    .qmenu = ionvideo_ctrl_menu_strings,
-};
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_string = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 5,
-    .name = "String",
-    .type = V4L2_CTRL_TYPE_STRING,
-    .min = 2,
-    .max = 4,
-    .step = 1,
-};
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_bitmask = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 6,
-    .name = "Bitmask",
-    .type = V4L2_CTRL_TYPE_BITMASK,
-    .def = 0x80002000,
-    .min = 0,
-    .max = 0x80402010,
-    .step = 0,
-};
-
-static const s64 ionvideo_ctrl_int_menu_values[] = { 1, 1, 2, 3, 5, 8, 13, 21, 42, };
-
-static const struct v4l2_ctrl_config ionvideo_ctrl_int_menu = {
-    .ops = &ionvideo_ctrl_ops,
-    .id = IONVIDEO_CID_CUSTOM_BASE + 7,
-    .name = "Integer menu",
-    .type = V4L2_CTRL_TYPE_INTEGER_MENU,
-    .min = 1,
-    .max = 8,
-    .def = 4,
-    .menu_skip_mask = 0x02,
-    .qmenu_int = ionvideo_ctrl_int_menu_values,
-};
-
 static const struct v4l2_file_operations ionvideo_fops = {
     .owner = THIS_MODULE,
     .open = vidioc_open,
@@ -721,7 +598,7 @@ static const struct v4l2_ioctl_ops ionvideo_ioctl_ops = {
     .vidioc_unsubscribe_event = v4l2_event_unsubscribe,
 };
 
-static struct video_device ionvideo_template = {
+static const struct video_device ionvideo_template = {
     .name = "ionvideo",
     .fops = &ionvideo_fops,
     .ioctl_ops = &ionvideo_ioctl_ops,
@@ -744,7 +621,6 @@ static int ionvideo_release(void) {
         v4l2_info(&dev->v4l2_dev, "unregistering %s\n", video_device_node_name(&dev->vdev));
         video_unregister_device(&dev->vdev);
         v4l2_device_unregister(&dev->v4l2_dev);
-        v4l2_ctrl_handler_free(&dev->ctrl_handler);
         kfree(dev);
     }
     //vb2_dma_contig_cleanup_ctx(ionvideo_dma_ctx);
@@ -771,7 +647,6 @@ static int __init ionvideo_create_instance(int inst)
 {
     struct ionvideo_dev *dev;
     struct video_device *vfd;
-    struct v4l2_ctrl_handler *hdl;
     struct vb2_queue *q;
     int ret;
 
@@ -789,38 +664,6 @@ static int __init ionvideo_create_instance(int inst)
     dev->width = 640;
     dev->height = 480;
     dev->pixelsize = dev->fmt->depth;
-    hdl = &dev->ctrl_handler;
-    v4l2_ctrl_handler_init(hdl, 11);
-    dev->volume = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_AUDIO_VOLUME, 0, 255, 1, 200);
-    dev->brightness = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_BRIGHTNESS, 0, 255, 1, 127);
-    dev->contrast = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_CONTRAST, 0, 255, 1, 16);
-    dev->saturation = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_SATURATION, 0, 255, 1, 127);
-    dev->hue = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_HUE, -128, 127, 1, 0);
-    dev->autogain = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_AUTOGAIN, 0, 1, 1, 1);
-    dev->gain = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_GAIN, 0, 255, 1, 100);
-    dev->alpha = v4l2_ctrl_new_std(hdl, &ionvideo_ctrl_ops,
-            V4L2_CID_ALPHA_COMPONENT, 0, 255, 1, 0);
-    dev->button = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_button, NULL);
-    dev->int32 = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_int32, NULL);
-    dev->int64 = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_int64, NULL);
-    dev->boolean = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_boolean, NULL);
-    dev->menu = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_menu, NULL);
-    dev->string = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_string, NULL);
-    dev->bitmask = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_bitmask, NULL);
-    dev->int_menu = v4l2_ctrl_new_custom(hdl, &ionvideo_ctrl_int_menu, NULL);
-    if (hdl->error) {
-        ret = hdl->error;
-        goto unreg_dev;
-    }
-    v4l2_ctrl_auto_cluster(2, &dev->autogain, 0, true);
-    dev->v4l2_dev.ctrl_handler = hdl;
 
     /* initialize locks */
     spin_lock_init(&dev->slock);
@@ -832,9 +675,8 @@ static int __init ionvideo_create_instance(int inst)
     q->drv_priv = dev;
     q->buf_struct_size = sizeof(struct ionvideo_buffer);
     q->ops = &ionvideo_video_qops;
-    q->mem_ops = &vb2_ion_memops; //vb2_dma_contig_memops;//vb2_vmalloc_memops;
-    //ionvideo_dma_ctx = vb2_dma_contig_init_ctx(dev);
-    //q->mem_ops = &vb2_dma_contig_memops;
+    q->mem_ops = &vb2_ion_memops;
+    q->timestamp_type = V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC;
 
     ret = vb2_queue_init(q);
     if (ret)
@@ -873,7 +715,6 @@ static int __init ionvideo_create_instance(int inst)
     return 0;
 
 unreg_dev:
-    v4l2_ctrl_handler_free(hdl);
     v4l2_device_unregister(&dev->v4l2_dev);
 free_dev:
     kfree(dev);
diff --git a/drivers/amlogic/ionvideo/ionvideo.h b/drivers/amlogic/ionvideo/ionvideo.h
index 58529fe06a1e..fff245bfd7a6 100755
--- a/drivers/amlogic/ionvideo/ionvideo.h
+++ b/drivers/amlogic/ionvideo/ionvideo.h
@@ -74,7 +74,7 @@ struct ionvideo_buffer {
     /* common v4l buffer stuff -- must be first */
     struct vb2_buffer vb;
     struct list_head list;
-    struct ionvideo_fmt *fmt;
+    const struct ionvideo_fmt *fmt;
 };
 
 struct ionvideo_dmaqueue {
@@ -95,7 +95,6 @@ struct ppmgr2_device {
     int canvas_id[PPMGR2_MAX_CANVAS];
     void* phy_addr[PPMGR2_MAX_CANVAS];
     int phy_size;
-    int inited_canvas;
 
     ge2d_context_t* context;
     config_para_ex_t ge2d_config;
@@ -108,30 +107,8 @@ struct ppmgr2_device {
 struct ionvideo_dev {
     struct list_head ionvideo_devlist;
     struct v4l2_device v4l2_dev;
-    struct v4l2_ctrl_handler ctrl_handler;
     struct video_device vdev;
 
-    /* controls */
-    struct v4l2_ctrl *brightness;
-    struct v4l2_ctrl *contrast;
-    struct v4l2_ctrl *saturation;
-    struct v4l2_ctrl *hue;
-    struct {
-        /* autogain/gain cluster */
-        struct v4l2_ctrl *autogain;
-        struct v4l2_ctrl *gain;
-    };
-    struct v4l2_ctrl *volume;
-    struct v4l2_ctrl *alpha;
-    struct v4l2_ctrl *button;
-    struct v4l2_ctrl *boolean;
-    struct v4l2_ctrl *int32;
-    struct v4l2_ctrl *int64;
-    struct v4l2_ctrl *menu;
-    struct v4l2_ctrl *string;
-    struct v4l2_ctrl *bitmask;
-    struct v4l2_ctrl *int_menu;
-
     spinlock_t slock;
     struct mutex mutex;
 
@@ -140,27 +117,20 @@ struct ionvideo_dev {
     /* Several counters */
     unsigned ms;
     unsigned long jiffies;
-    unsigned button_pressed;
-
-    int mv_count; /* Controls bars movement */
 
     /* Input Number */
     int input;
 
     /* video capture */
-    struct ionvideo_fmt *fmt;
+    const struct ionvideo_fmt *fmt;
     unsigned int width, height;
     struct vb2_queue vb_vidq;
     unsigned int field_count;
 
-    u8 bars[9][3];
-    u8 line[MAX_WIDTH * 8];
     unsigned int pixelsize;
-    u8 alpha_component;
 
     struct ppmgr2_device ppmgr2_dev;
     struct vframe_receiver_s video_vf_receiver;
-    u8 clear_list;
     u64 pts;
     u8 receiver_register;
 };
diff --git a/drivers/amlogic/ionvideo/ppmgr2.c b/drivers/amlogic/ionvideo/ppmgr2.c
index f9c187bbe76d..e57387843d04 100755
--- a/drivers/amlogic/ionvideo/ppmgr2.c
+++ b/drivers/amlogic/ionvideo/ppmgr2.c
@@ -232,6 +232,7 @@ static inline void ge2d_angle_config(int dst_angle, config_para_ex_t* ge2d_confi
  * phy_addr, buffer_size, canvas_number.
  */
 int ppmgr2_init(struct ppmgr2_device *ppd) {
+    int i = 0;
     switch_mod_gate_by_name("ge2d", 1);
     ppd->context = create_ge2d_work_queue();
     if (!ppd->context) {
@@ -242,7 +243,13 @@ int ppmgr2_init(struct ppmgr2_device *ppd) {
     ppd->paint_mode = 0;
     ppd->angle = 0;
     ppd->mirror = 0;
-    ppd->inited_canvas = 0;
+    ppd->ge2d_fmt = 0;
+    ppd->dst_width = 0;
+    ppd->dst_height = 0;
+    for (i = 0; i < PPMGR2_MAX_CANVAS; i++) {
+        ppd->phy_addr[i] = NULL;
+        ppd->canvas_id[i] = -1;
+    }
     return 0;
 }
 
-- 
2.19.0

