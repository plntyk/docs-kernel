From 0a499f9e6ddc63086ad15efcdcd60131fbdbf634 Mon Sep 17 00:00:00 2001
From: "brian.zhu" <brian.zhu@amlogic.com>
Date: Thu, 19 Dec 2013 16:23:27 +0800
Subject: [PATCH 2555/5965] PD #84534, 1 change half hw encode ucode, neeed not
 encode a idr to push out the SPS and PPS. 2. use 1088 not 1080 to config
 sensor canvas for encode. 3 remove vm warning

---
 drivers/amlogic/amports/encoder.c             |  72 +++--
 .../m8/ucode/encoder/half_encoder_linux.h     | 279 +++++++++---------
 drivers/amlogic/camera/common/vm.c            |  86 +++---
 drivers/amlogic/camera/ov5640.c               |   2 +-
 drivers/amlogic/camera/ov5647.c               |   2 +-
 5 files changed, 225 insertions(+), 216 deletions(-)

diff --git a/drivers/amlogic/amports/encoder.c b/drivers/amlogic/amports/encoder.c
index 88b0b26c85dd..851600caa7e1 100755
--- a/drivers/amlogic/amports/encoder.c
+++ b/drivers/amlogic/amports/encoder.c
@@ -28,6 +28,7 @@
 #include <linux/amlogic/amports/vframe_receiver.h>
 #include "vdec_reg.h"
 #include <linux/delay.h>
+#include <linux/poll.h>
 #include <linux/of.h>
 #include <linux/of_fdt.h>
 
@@ -118,6 +119,12 @@ static u32 half_ucode_mode = 0;
 #endif
 static int encode_inited = 0;
 static int encode_opened = 0;
+static int encoder_status = 0;
+static int avc_endian = 6;
+
+static wait_queue_head_t avc_wait;
+atomic_t avc_ready = ATOMIC_INIT(0);
+static struct tasklet_struct encode_tasklet;
 
 static const char avc_dec_id[] = "avc-dev";
 
@@ -603,21 +610,26 @@ static int  set_input_format (amvenc_mem_type type, amvenc_frame_fmt fmt, unsign
 }
 #endif
 
-/*
-static void init_scaler(void)
+static void encode_isr_tasklet(ulong data)
 {
+    int temp_canvas;
+    temp_canvas = dblk_buf_canvas;
+    dblk_buf_canvas = ref_buf_canvas;
+    ref_buf_canvas = temp_canvas;   //current dblk buffer as next reference buffer
+    frame_start = 1;
+    frame_number ++;
+    pic_order_cnt_lsb += 2;
+    debug_level(0,"encoder is done %d\n",encoder_status);
+    if(((encoder_status == ENCODER_IDR_DONE)
+	||(encoder_status == ENCODER_NON_IDR_DONE))&&(process_irq)){
+        atomic_inc(&avc_ready);
+        wake_up_interruptible(&avc_wait);
+    }
 }
 
-static void avc_local_init(void)
-{
-
-}
-*/
-
-static int encoder_status;
 static irqreturn_t enc_isr(int irq, void *dev_id)
 {
-	int temp_canvas;
+
 	WRITE_HREG(HCODEC_ASSIST_MBOX2_CLR_REG, 1);
 	encoder_status  = READ_HREG(ENCODER_STATUS);
 	if((encoder_status == ENCODER_IDR_DONE)
@@ -628,18 +640,12 @@ static irqreturn_t enc_isr(int irq, void *dev_id)
 	}
 	if(((encoder_status == ENCODER_IDR_DONE)
 	||(encoder_status == ENCODER_NON_IDR_DONE))&&(!process_irq)){
-		temp_canvas = dblk_buf_canvas;
-		dblk_buf_canvas = ref_buf_canvas;
-		ref_buf_canvas = temp_canvas;   //current dblk buffer as next reference buffer
-		frame_start = 1;
-		frame_number ++;
-		pic_order_cnt_lsb += 2;
 		process_irq = 1;
-		debug_level(0,"encoder is done %d\n",encoder_status);
+		tasklet_schedule(&encode_tasklet);
 	}
 	return IRQ_HANDLED;
 }
-int avc_endian = 6;
+
 static void avc_prot_init(void)
 {
 	unsigned int data32;
@@ -1167,10 +1173,9 @@ void amvenc_avc_start_cmd(int cmd, unsigned* input_info)
 	if(frame_number > 65535){
 		frame_number = 0;
 	}
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-	if((idr_pic_id == 0)&&(cmd == ENCODER_IDR)&&(half_ucode_mode == 0))
+
+	if((idr_pic_id == 0)&&(cmd == ENCODER_IDR))
 		frame_start = 1;
-#endif
 
 	if(frame_start){
 		frame_start = 0;
@@ -1211,7 +1216,6 @@ void amvenc_avc_start_cmd(int cmd, unsigned* input_info)
 
 void amvenc_avc_stop(void)
 {
-	//WRITE_HREG(HCODEC_MPSR, 0);
 	amvenc_stop();
 	avc_poweroff();
 	debug_level(1,"amvenc_avc_stop\n");
@@ -1224,14 +1228,10 @@ static int amvenc_avc_open(struct inode *inode, struct file *file)
         amlog_level(LOG_LEVEL_ERROR, "amvenc_avc open busy.\n");
         return -EBUSY;
     }
+    init_waitqueue_head(&avc_wait);
+    atomic_set(&avc_ready, 0);
+    tasklet_init(&encode_tasklet, encode_isr_tasklet, 0);
     encode_opened++;
-#if 0
-    if (avc_poweron() < 0) {
-        amlog_level(LOG_LEVEL_ERROR, "amvenc_avc init failed.\n");
-        encode_opened--;
-        return -ENODEV;
-    }
-#endif
     return r;
 }
 
@@ -1425,12 +1425,26 @@ static int avc_mmap(struct file *filp, struct vm_area_struct *vma)
 
 }
 
+static unsigned int amvenc_avc_poll(struct file *file, poll_table *wait_table)
+{
+    if(((encoder_status != ENCODER_IDR_DONE)&&(encoder_status != ENCODER_NON_IDR_DONE))||(process_irq!=1))
+        poll_wait(file, &avc_wait, wait_table);
+
+    if (atomic_read(&avc_ready)) {
+        atomic_dec(&avc_ready);
+        return POLLIN | POLLRDNORM;
+    }
+
+    return 0;
+}
+
 const static struct file_operations amvenc_avc_fops = {
     .owner    = THIS_MODULE,
     .open     = amvenc_avc_open,
     .mmap     = avc_mmap,
     .release  = amvenc_avc_release,
     .unlocked_ioctl    = amvenc_avc_ioctl,
+    .poll     = amvenc_avc_poll,
 };
 
 int  init_avc_device(void)
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h b/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
index 561fdc470f02..bfa820952e56 100755
--- a/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
@@ -1,141 +1,144 @@
-const u32 MicroCode[] __attribute__((aligned(8))) ={
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc00fb00,0x0000000,
-	0xc000e00,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x69fffe2,0x6c01c22,
-	0xc780dc0,0x0000000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0xc78ea00,0x0000000,0xc788d80,0x64d3008,0xc780880,0x0000000,0xc78ea40,
-	0x64f1f08,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
-	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
-	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0xcc00000,0x0000000,
-	0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,0xa614022,
-	0x0000000,0x6696022,0x69fffe2,0x6c01c22,0x44018a2,0x64ac021,0xaae4021,0xaa34061,
-	0xa60c0a1,0xc7816c0,0x0000000,0xa60c121,0xc784080,0x0000000,0xa6100e1,0x0000000,
-	0xc782280,0x0000000,0xc7ffb40,0x0000000,0xc07f500,0x0000000,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,
-	0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07f380,0x80d2100,0x7800148,0x4404208,
-	0xc07f280,0x60d2108,0xc07f200,0x80d2100,0x7800108,0x4404208,0xc07f100,0x60d2108,
-	0xc07f080,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0xc07ee40,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
-	0xc07ec80,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,
-	0xc7802c0,0x80d1f20,0x80d1f30,0xc07e9c0,0x80d2100,0xc07e940,0x80d2100,0xc07e8c0,
-	0x80d2100,0xc07e840,0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,
-	0x80ac007,0x8007801,0xc7fe740,0x0000000,0xc07e100,0x0000000,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e100,0x80d2100,
-	0xc07e080,0x80d2100,0x80d1f20,0x80d1f20,0xc07df80,0x80d2100,0xc07df00,0x80d2100,
-	0xc07de80,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,0xc003f00,0x441a208,0xc07dcc0,
-	0x60d2108,0xc003e00,0x6800008,0xc07dbc0,0x60d2108,0xc07db40,0x80d2100,0x80d1f20,
-	0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac008,0x8007801,
-	0xc7fd9c0,0x0000000,0xc00c740,0x0000000,0x6490b08,0x9c08608,0x9c08648,0x6090b08,
-	0xc00cdc0,0x0000000,0xc00c4c0,0x0000000,0xc07d100,0x0000000,0x64ac408,0x4001208,
-	0x60ac408,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x9210208,0xc07cec0,
-	0x60d2108,0xc07ce40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,0x7c00248,
-	0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x2008308,0x60f2008,
-	0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,
-	0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07c580,0x80d2100,0x7800148,0x7800189,
-	0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07c300,0x60d2108,
-	0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,
-	0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc002140,0x2408248,0xc07bf00,0x60d2108,
-	0x80d3d00,0xc002200,0x0000000,0x68097c3,0x80d300f,0x64d0008,0x9808008,0x9808048,
-	0x9808088,0x60d0008,0x80ac005,0x8007801,0xc7fbcc0,0x0000000,0xc00aa40,0x0000000,
-	0x6490b08,0x9808608,0x9c08648,0x6090b08,0xc00b0c0,0x0000000,0xc00a7c0,0x0000000,
-	0xc07b400,0x0000000,0x64f1508,0x9c08508,0x9c084c8,0x9c08588,0x9c08448,0x9c08488,
-	0x60f1508,0x9808488,0x9808448,0x98085c8,0x9808608,0x98086c8,0x60f1508,0x64d3109,
-	0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,
-	0x4401208,0x7c00348,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
-	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,
-	0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc07ad80,0x60d2108,0xc07ad00,0x80d2105,
-	0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x7800309,0x7800348,
-	0x960f248,0x60f1e09,0xc07aa00,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
-	0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
-	0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64f1d08,0x9206208,0x7800049,
-	0xc000640,0x2408248,0xc07a400,0x60d2108,0x80d3d00,0x80d5300,0xc001480,0x0000000,
-	0x680c283,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9808008,0x9808048,0x9808088,
-	0x60d0008,0x80ac005,0x8007801,0xc7fa100,0x0000000,0x0800000,0x7800008,0xc7f9880,
-	0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,
-	0x5401209,0x6bfffda,0x6c0001a,0x6800009,0x680001b,0x6c0001b,0x400071b,0x680000b,
-	0x680c00e,0x680100f,0x740039a,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
-	0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e30e,0x680000f,
-	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
-	0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffd00,0x200e34e,0x64d330d,0x900834d,
-	0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,
-	0x44013cf,0x7c002cf,0x60d371a,0x60d391b,0x60d381a,0x60d3a1b,0xcc00000,0x0000000,
-	0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x6a0001f,0x6d0001f,0x6a00020,0x6d00020,
-	0x690000a,0x680001b,0x6c0001b,0x400071b,0x6800009,0x680c00e,0x680064f,0x740039b,
-	0x400138e,0x7400389,0x400138e,0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,
-	0x400138e,0x740038a,0x400138e,0x740039f,0x400138e,0x740038a,0x400138e,0x74003a0,
-	0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e30e,
-	0x680000f,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,
-	0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffd00,0x200e34e,0x64d330d,
-	0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,
-	0x7c0028e,0x44013cf,0x7c002cf,0x60d391b,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,
-	0x60d4a1d,0x60d4a1d,0x60d3a1b,0x60d4e1d,0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,
-	0x0000000,0xaa10008,0x64d370e,0xcb80003,0x64d390f,0xc7f7300,0x0000000,0x60d371a,
-	0x64d3510,0x908c250,0xa620009,0x60d391b,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,
-	0x6c00009,0x60d3a09,0x9004250,0xaa1c249,0x80d3601,0x80d3603,0x80d3605,0x80d3606,
-	0xc780200,0x80d360f,0x80d3602,0x80d3603,0x80d3604,0x80d3605,0x80d3606,0x80d360f,
-	0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,0x680c00a,
-	0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
-	0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,0x700029a,
-	0x400128a,0x700028e,0x961068e,0x400128a,0x700029b,0x400128a,0x700028f,0xc7f6480,
-	0x96106cf,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,0x64d0009,
-	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,0x64d390f,
-	0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,
-	0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x54033cf,0x200e3ce,
-	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb830248,
-	0x4001208,0x920c210,0x7800349,0xb82c248,0x6800008,0x80d3000,0x80d1f30,0x6bc0008,
-	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
-	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
-	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x7800188,0x4001208,0x7c00188,
-	0x7800208,0x4002208,0x7c00208,0x80ac009,0x8007801,0xc7f4f00,0x0000000,0x7c00288,
-	0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,0x200e30e,0x200e20e,0x680400f,
-	0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,
-	0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0xc7fe1c0,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x60d4a1d,0x60d4b1e,
-	0x60d4c1f,0x60d4d20,0x64d3510,0x908c250,0xa62c009,0x60d391b,0x6a00009,0x6d00009,
-	0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6800009,0x6c00009,0x60d3a09,0x80d5201,
-	0x80d3607,0x80d3601,0x80d3608,0x80d3609,0x80d3604,0x80d3605,0x80d3606,0x80d360f,
-	0x908c210,0xaa10008,0x680bfca,0xc000ec0,0x4401208,0x908c210,0x7800309,0xb82b248,
-	0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
-	0x920c290,0x7800349,0xb80c24a,0x0000000,0x64d5309,0xaa1c009,0x0000000,0x60d2109,
-	0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fe040,0x0000000,0x64d390f,0x64d4a11,
-	0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,0x6800011,0x6a00014,
-	0x6d00014,0x60d4d14,0xc001740,0x680c00a,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,
-	0xc780280,0x680c28a,0x401528a,0x908c210,0x4002208,0x78002c9,0xb004248,0xc0009c0,
-	0x908c450,0x680c50a,0xc001340,0x0000000,0xc7f3140,0x0000000,0x7800289,0x240a248,
-	0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,
-	0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,0x400128a,0x7400292,
-	0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,0x58104d3,0x7400293,
-	0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,0x690000e,0x6c0000e,
-	0x200e30e,0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,
-	0x603520d,0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,
-	0x2008248,0x690000e,0x6c0000e,0x200e30e,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
-	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x40006dc,
-	0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,
-	0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,0x9610789,0x400128a,0x700029f,
-	0x400128a,0x7000289,0x96107c9,0x400128a,0x70002a0,0x400128a,0x7000289,0xcc00000,
-	0x9610809,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7f16c0,0x0000000,
-	0x93e1248,0xaa10009,0x9042248,0xc7f1580,0x0000000,0xaa14009,0x680324a,0xaa0c049,
-	0x680348a,0x680390a,0x7800088,0x7800309,0xb806248,0x4001208,0x6800008,0x78000c9,
-	0x4001249,0x7c000c9,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,
-	0x0000000,0x980a58a,0x78000c8,0xa60c008,0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,
-	0xc7f0e40,0x0000000,0x64ac10c,0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,
-	0x6094108,0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000a00,
-	0x0000000,0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,
-	0x54042ca,0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,
-	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a30a,
-	0x609440a,0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,0xc0005c0,
-	0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,0x683ffc9,
-	0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,
-	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,
-	0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,
-	0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+const u32 MicroCode[] __attribute__((aligned(8))) ={
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc010200,0x0000000,
+	0xc000e00,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x69fffe2,0x6c01c22,
+	0xc780dc0,0x0000000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0xc78f100,0x0000000,0xc789480,0x64d3008,0xc780880,0x0000000,0xc78f140,
+	0x64f1f08,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
+	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
+	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0xcc00000,0x0000000,
+	0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,0xa614022,
+	0x0000000,0x6696022,0x69fffe2,0x6c01c22,0x44018a2,0x64ac021,0xaae4021,0xaa34061,
+	0xa60c0a1,0xc7816c0,0x0000000,0xa60c121,0xc784780,0x0000000,0xa6100e1,0x0000000,
+	0xc782980,0x0000000,0xc7ffb40,0x0000000,0xc07f500,0x0000000,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,
+	0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07f380,0x80d2100,0x7800148,0x4404208,
+	0xc07f280,0x60d2108,0xc07f200,0x80d2100,0x7800108,0x4404208,0xc07f100,0x60d2108,
+	0xc07f080,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0xc07ee40,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
+	0xc07ec80,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,
+	0xc7802c0,0x80d1f20,0x80d1f30,0xc07e9c0,0x80d2100,0xc07e940,0x80d2100,0xc07e8c0,
+	0x80d2100,0xc07e840,0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,
+	0x80ac007,0x8007801,0xc7fe740,0x0000000,0xc07e100,0x0000000,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e100,0x80d2100,
+	0xc07e080,0x80d2100,0x80d1f20,0x80d1f20,0xc07df80,0x80d2100,0xc07df00,0x80d2100,
+	0xc07de80,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,0xc004600,0x441a208,0xc07dcc0,
+	0x60d2108,0xc004500,0x6800008,0xc07dbc0,0x60d2108,0xc07db40,0x80d2100,0x80d1f20,
+	0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,
+	0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,
+	0xbefc108,0x0000000,0x80ac008,0x8007801,0xc7fd2c0,0x0000000,0xc00c740,0x0000000,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0xc00cdc0,0x0000000,0xc00c4c0,0x0000000,
+	0xc07ca00,0x0000000,0x64ac408,0x4001208,0x60ac408,0x6bc0008,0x60d1f08,0x64d1e08,
+	0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,
+	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
+	0x9108248,0x7c000c9,0x9210208,0xc07c7c0,0x60d2108,0xc07c740,0x80d2107,0x64d3109,
+	0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,
+	0x4401208,0x7c00348,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
+	0x6940008,0x6c00008,0x2008308,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,
+	0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,
+	0xc07be80,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x78001c8,0xc07bc00,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,
+	0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,
+	0xc002140,0x2408248,0xc07b800,0x60d2108,0x80d3d00,0xc002200,0x0000000,0x6809ec3,
+	0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x60d0008,0x80ac005,0x8007801,
+	0xc7fb5c0,0x0000000,0xc00aa40,0x0000000,0x6490b08,0x9808608,0x9c08648,0x6090b08,
+	0xc00b0c0,0x0000000,0xc00a7c0,0x0000000,0xc07ad00,0x0000000,0x64f1508,0x9c08508,
+	0x9c084c8,0x9c08588,0x9c08448,0x9c08488,0x60f1508,0x9808488,0x9808448,0x98085c8,
+	0x9808608,0x98086c8,0x60f1508,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,
+	0xc07a680,0x60d2108,0xc07a600,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
+	0x946d209,0x60d3208,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07a300,0x80d2100,
+	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,
+	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
+	0x80d1f20,0x64f1d08,0x9206208,0x7800049,0xc000640,0x2408248,0xc079d00,0x60d2108,
+	0x80d3d00,0x80d5300,0xc001480,0x0000000,0x680c983,0x6800008,0x6c00448,0x60d3008,
+	0x64d0008,0x9808008,0x9808048,0x9808088,0x60d0008,0x80ac005,0x8007801,0xc7f9a00,
+	0x0000000,0x0800000,0x7800008,0xc7f9180,0x6030408,0x6800009,0xb005248,0x2409209,
+	0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffda,0x6c0001a,0x6800009,
+	0x680001b,0x6c0001b,0x400071b,0x680000b,0x680c00e,0x680100f,0x740039a,0x400138e,
+	0x7400389,0x400138e,0x740039b,0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,
+	0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x680400d,0x603520d,0x6a0c00d,
+	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,
+	0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,
+	0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d371a,0x60d391b,
+	0x60d381a,0x60d3a1b,0xcc00000,0x0000000,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,
+	0x6a0001f,0x6d0001f,0x6a00020,0x6d00020,0x690000a,0x680001b,0x6c0001b,0x400071b,
+	0x6800009,0x680c00e,0x680064f,0x740039b,0x400138e,0x7400389,0x400138e,0x740039d,
+	0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0x740039f,
+	0x400138e,0x740038a,0x400138e,0x74003a0,0x400138e,0x740038a,0x400138e,0xaeb004f,
+	0x44013cf,0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x6803e8d,0x603520d,
+	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,
+	0x6807d0d,0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,
+	0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d391b,
+	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x60d4a1d,0x60d4a1d,0x60d3a1b,0x60d4e1d,
+	0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,0x0000000,0xaa10008,0x64d370e,0xcb80003,
+	0x64d390f,0xc7f6c00,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,0x60d391b,
+	0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,
+	0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,
+	0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0x680c10a,0x7800289,0xa814248,
+	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
+	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
+	0xb40d248,0x7800309,0xb40b248,0x700029a,0x400128a,0x700028e,0x961068e,0x400128a,
+	0x700029b,0x400128a,0x700028f,0xc7f5d80,0x96106cf,0x908c210,0x7800289,0x2409248,
+	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
+	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
+	0x200e30e,0x780028f,0x54033cf,0x200e3ce,0x603510e,0x680400d,0x603520d,0x6a0c00d,
+	0x603500d,0x908c210,0x7800309,0xb830248,0x4001208,0x920c210,0x7800349,0xb82c248,
+	0x6800008,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,
+	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
+	0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80ac009,
+	0x8007801,0xc7f4800,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,
+	0x6c0000e,0x200e30e,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fe1c0,0x680c00a,0x64d4a11,0x64d4b12,
+	0x64d4c13,0x64d4d14,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x64d3510,0x908c250,
+	0xa62c009,0x60d391b,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
+	0x6800009,0x6c00009,0x60d3a09,0x80d5201,0x80d3607,0x80d3601,0x80d3608,0x80d3609,
+	0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0xaa10008,0x680bfca,0xc000ec0,
+	0x4401208,0x908c210,0x7800309,0xb82b248,0x0000000,0x64d0009,0x9384249,0xa6f8009,
+	0x0000000,0x64d3609,0xa6ec009,0x0000000,0x920c290,0x7800349,0xb80c24a,0x0000000,
+	0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,
+	0xc7fe040,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,
+	0x7800308,0xc000e40,0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001740,0x680c00a,
+	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0xc780280,0x680c28a,0x401528a,0x908c210,
+	0x4002208,0x78002c9,0xb004248,0xc0009c0,0x908c450,0x680c50a,0xc001340,0x0000000,
+	0xc7f2a40,0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,
+	0x200a289,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,
+	0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,
+	0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,
+	0xcc00000,0x7400294,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x540434f,0x54023cf,
+	0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x7c00291,
+	0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,0x200e30e,
+	0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,
+	0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,
+	0xbef804d,0xcc00000,0x0000000,0x40006dc,0x700029c,0x400128a,0x7000289,0x9610709,
+	0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,
+	0x7000289,0x9610789,0x400128a,0x700029f,0x400128a,0x7000289,0x96107c9,0x400128a,
+	0x70002a0,0x400128a,0x7000289,0xcc00000,0x9610809,0x64d1602,0x9162082,0xaa0c002,
+	0xc7fff40,0x0000000,0xc7f0fc0,0x0000000,0x93e1248,0xaa10009,0x9042248,0xc7f0e80,
+	0x0000000,0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,
+	0xb806248,0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x7c00088,0x950c288,
+	0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,0xa60c008,
+	0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7f0740,0x0000000,0x64ac10c,0x680c008,
+	0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0xc000a00,0x0000000,0x780034a,0x400128a,0x40002ca,
+	0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,
+	0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
+	0x6090b0a,0x698000a,0x6c0000a,0x200a30a,0x609440a,0x6a0000a,0x6c0000a,0x200a30a,
+	0x609450a,0xcc00000,0x0000000,0xc0005c0,0x0000000,0x8095003,0x8095000,0x6820889,
+	0x6c00209,0xcc00000,0x6095109,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,
+	0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,
+	0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,
+	0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x0000000,0x0000000,
 };
 
 
diff --git a/drivers/amlogic/camera/common/vm.c b/drivers/amlogic/camera/common/vm.c
index a45c311560f5..5bb1328ff15a 100755
--- a/drivers/amlogic/camera/common/vm.c
+++ b/drivers/amlogic/camera/common/vm.c
@@ -820,7 +820,6 @@ static void vm_dump_mem(char *path, void *phy_addr, vm_output_para_t* para)
         struct file *filp = NULL;
         loff_t pos = 0;
         void * buf = NULL;
-        int i = 0;
         unsigned int size = para->bytesperline * para->height;
 
         mm_segment_t old_fs = get_fs();
@@ -833,7 +832,7 @@ static void vm_dump_mem(char *path, void *phy_addr, vm_output_para_t* para)
         }
 
 
-        buf = phys_to_virt(phy_addr);
+        buf = phys_to_virt((unsigned long)phy_addr);
         vfs_write(filp,buf, size, &pos);
 
         vfs_fsync(filp, 0);
@@ -1311,10 +1310,11 @@ int vm_sw_post_process(int canvas , int addr)
 		buffer_v_start = io_mapping_map_atomic_wc( mapping_wc, offset );
 
 #ifndef GE2D_NV
-		if(output_para.v4l2_format == V4L2_PIX_FMT_YUV420){
+		if(output_para.v4l2_format == V4L2_PIX_FMT_YUV420)
 #else
-		if(output_para.v4l2_format == V4L2_PIX_FMT_YVU420){
+		if(output_para.v4l2_format == V4L2_PIX_FMT_YVU420)
 #endif
+		{
 			for(i=uv_height;i>0;i--) { /* copy y */
 				memcpy((void *)(addr+poss),(void *)(buffer_u_start+posd),uv_width);
 				poss+=uv_width;
@@ -1354,8 +1354,8 @@ static int vm_task(void *data) {
 	vframe_t *vf;
 	int src_canvas;
 	int timer_count = 0 ;
-    vm_device_t *devp = (vm_device_t*) data;
-struct sched_param param = {.sched_priority = MAX_RT_PRIO - 1 };
+	vm_device_t *devp = (vm_device_t*) data;
+	struct sched_param param = {.sched_priority = MAX_RT_PRIO - 1 };
 	ge2d_context_t *context=create_ge2d_work_queue();
 	config_para_ex_t ge2d_config;
 
@@ -1367,23 +1367,23 @@ struct sched_param param = {.sched_priority = MAX_RT_PRIO - 1 };
 
 	memset(&ge2d_config,0,sizeof(config_para_ex_t));
 	amlog_level(LOG_LEVEL_HIGH,"vm task is running\n ");
-    sched_setscheduler(current, SCHED_FIFO, &param);
-    allow_signal(SIGTERM);
+	sched_setscheduler(current, SCHED_FIFO, &param);
+	allow_signal(SIGTERM);
 	while(1) {
 		ret = down_interruptible(&vb_start_sema);
 		timer_count = 0;
-        if (kthread_should_stop()){
-            up(&vb_done_sema);
-            break;
-        }
+		if (kthread_should_stop()){
+			up(&vb_done_sema);
+			break;
+		}
 
 		/* wait for frame from 656 provider until 500ms runs out */
 		vf = local_vf_peek();
 		while((vf == NULL) && (timer_count < 200)) {
 			if(!task_running){
-	            up(&vb_done_sema);
-	            goto vm_exit;
-	            break;
+				up(&vb_done_sema);
+				goto vm_exit;
+				break;
 			}
 			vf = local_vf_peek();
 			timer_count++;
@@ -1401,10 +1401,10 @@ struct sched_param param = {.sched_priority = MAX_RT_PRIO - 1 };
 			/* step1 convert 422 format to other format.*/
 			if (is_need_ge2d_pre_process())
 				src_canvas = vm_ge2d_pre_process(vf,context,&ge2d_config);
-                        if (devp->dump == 2) {
-                                vm_dump_mem(devp->dump_path, output_para.vaddr, &output_para);
-                                devp->dump = 0;
-                        }
+			if (devp->dump == 2) {
+				vm_dump_mem(devp->dump_path, (void *)output_para.vaddr, &output_para);
+				devp->dump = 0;
+			}
 			local_vf_put(vf);
 #ifdef CONFIG_AMLCAP_LOG_TIME_USEFORFRAMES
 			do_gettimeofday(&end);
@@ -1424,22 +1424,22 @@ struct sched_param param = {.sched_priority = MAX_RT_PRIO - 1 };
 			printk("step 2, memcpy use: %ldms\n", time_use);
 #endif
 		}
-        if (kthread_should_stop()){
-            up(&vb_done_sema);
-            break;
-        }
+		if (kthread_should_stop()){
+			up(&vb_done_sema);
+			break;
+		}
 		up(&vb_done_sema);
 	}
 vm_exit:
 	destroy_ge2d_work_queue(context);
-    while(!kthread_should_stop()){
+	while(!kthread_should_stop()){
 	/* 	   may not call stop, wait..
                    it is killed by SIGTERM,eixt on down_interruptible
 		   if not call stop,this thread may on do_exit and
 		   kthread_stop may not work good;
 	*/
-	    msleep(10);
-    }
+		msleep(10);
+	}
 	return ret;
 }
 
@@ -1610,7 +1610,7 @@ void set_vm_buf_info(resource_size_t start,unsigned int size) {
 }
 
 
-void unset_vm_buf_info()
+void unset_vm_buf_info(void)
 {
     if(vm_device.mapping)
     {
@@ -1711,7 +1711,6 @@ static ssize_t vm_attr_show(struct device *dev, struct device_attribute *attr, c
 {
         ssize_t len = 0;
         vm_device_t *devp;
-        int i;
 
         devp = dev_get_drvdata(dev);
         if (0 == devp->task_running){
@@ -1719,7 +1718,7 @@ static ssize_t vm_attr_show(struct device *dev, struct device_attribute *attr, c
                 return len;
         }
 
-        len += sprintf(buf+len, "vm parameters below\n");
+        len += sprintf((char *)buf+len, "vm parameters below\n");
 
         return len;
 }
@@ -1727,10 +1726,7 @@ static ssize_t vm_attr_show(struct device *dev, struct device_attribute *attr, c
 static ssize_t vm_attr_store(struct device *dev,struct device_attribute *attr,const char *buf, size_t len)
 {
         vm_device_t *devp;
-
-        unsigned int n=0, fps=0;
-
-        unsigned char ret=0;
+        unsigned int n=0;
         char *buf_orig, *ps, *token;
         char *parm[6] = {NULL};
 
@@ -1741,7 +1737,7 @@ static ssize_t vm_attr_store(struct device *dev,struct device_attribute *attr,co
         //printk(KERN_INFO "input cmd : %s",buf_orig);
         devp = dev_get_drvdata(dev);
         if (0 == devp->task_running){
-                len += sprintf(buf+len, "vm does not start\n");
+                len += sprintf((char *)buf+len, "vm does not start\n");
                 return len;
         }
 
@@ -1800,12 +1796,12 @@ int init_vm_device(void)
 		goto unregister_dev;
 	}
 
-    //dump func
-    device_create_file( vm_device.dev, &dev_attr_dump);
-    vm_device.dump = 0;
+	//dump func
+	device_create_file( vm_device.dev, &dev_attr_dump);
+	vm_device.dump = 0;
 
-    dev_set_drvdata( vm_device.dev,  &vm_device);
-    platform_set_drvdata( vm_device.pdev,  &vm_device);
+	dev_set_drvdata( vm_device.dev,  &vm_device);
+	platform_set_drvdata( vm_device.pdev,  &vm_device);
 
 	if(vm_buffer_init()<0) goto unregister_dev;
 #ifndef CONFIG_AMLOGIC_VM_DISABLE_VIDEOLAYER
@@ -1838,9 +1834,8 @@ int uninit_vm_device(void)
 
 
 #ifdef CONFIG_CMA
-
 void set_vm_buf_info(resource_size_t start,unsigned int size);
-void unset_vm_buf_info();
+void unset_vm_buf_info(void);
 
 static dma_addr_t vm_buf_phys = ~0;
 static void *vm_buf_virt;
@@ -1850,17 +1845,17 @@ int vm_init_buf(size_t size)
 {
 
     if(size ==0)
-        return;
+        return -1;
 
     if(vm_buf_phys != ~0)
     {
-        pr_info("phys already in use phys %p, virt %p, size %d\n", vm_buf_phys, vm_buf_virt, size/1024);
+        //pr_info("phys already in use phys %p, virt %p, size %d\n", vm_buf_phys, vm_buf_virt, size/1024);
         dma_free_coherent(&vm_plat_dev.dev, vm_buf_size, vm_buf_virt, vm_buf_phys); 
     }
 
     vm_buf_virt = dma_alloc_coherent(&vm_plat_dev.dev, size, &vm_buf_phys, GFP_KERNEL);
 
-    pr_info("%s: allocating virt %p, phys %p, size %dk\n", __func__, vm_buf_virt, vm_buf_phys, size/1024);
+    //pr_info("%s: allocating virt %p, phys %p, size %dk\n", __func__, vm_buf_virt, vm_buf_phys, size/1024);
     if(vm_buf_virt == 0)
     {
         pr_err("CMA failed to allocate dma buffer\n");
@@ -1931,11 +1926,8 @@ static int vm_driver_probe(struct platform_device *pdev)
 	}
 	set_vm_buf_info(mem->start,buf_size);
 #endif
-
 	vm_device.pdev = pdev;
 	init_vm_device();
-
-
 	return 0;
 }
 
diff --git a/drivers/amlogic/camera/ov5640.c b/drivers/amlogic/camera/ov5640.c
index b5a9f8841119..099625036823 100755
--- a/drivers/amlogic/camera/ov5640.c
+++ b/drivers/amlogic/camera/ov5640.c
@@ -3176,7 +3176,7 @@ static void ov5640_fillbuff(struct ov5640_fh *fh, struct ov5640_buffer *buf)
 	para.vaddr = (unsigned)vbuf;
 	para.ext_canvas = buf->canvas_id;
 	para.width = buf->vb.width;
-	para.height = buf->vb.height;
+	para.height = (buf->vb.height==1080)?1088:buf->vb.height;
 	vm_fill_buffer(&buf->vb,&para);
 	buf->vb.state = VIDEOBUF_DONE;
 }
diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index bde6a536206f..f1c2dd94a178 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -3202,7 +3202,7 @@ static void ov5647_fillbuff(struct ov5647_fh *fh, struct ov5647_buffer *buf)
 	para.vaddr = (unsigned)vbuf;
 	para.ext_canvas = buf->canvas_id;
 	para.width = buf->vb.width;
-	para.height = buf->vb.height;
+	para.height = (buf->vb.height==1080)?1088:buf->vb.height;
 	vm_fill_buffer(&buf->vb,&para);
 	buf->vb.state = VIDEOBUF_DONE;
 }
-- 
2.19.0

