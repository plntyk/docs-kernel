From 92e4d929fac3696f36de26c89a933fecd181ff6e Mon Sep 17 00:00:00 2001
From: timyao <tim.yao@amlogic.com>
Date: Mon, 16 Dec 2013 14:48:08 -0800
Subject: [PATCH 2558/5965] PD #81588. Fix video prot canvas settings for last
 frame keeping. Skipping memory clear during FFFB for optimization. When keep
 last frames, switch data address for both set of RDMA canvas.

---
 drivers/amlogic/amports/vh264.c  |  9 +++-
 drivers/amlogic/amports/video.c  | 74 +++++++++++++++++++++++---------
 drivers/amlogic/amports/vmpeg4.c | 19 ++++++--
 drivers/amlogic/amports/vreal.c  | 17 ++++++--
 4 files changed, 90 insertions(+), 29 deletions(-)

diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index 25dca33174dc..75904dde4c3f 100755
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -126,6 +126,8 @@ typedef struct {
      ((x)->u_canvas_index << 8)  | \
      ((x)->y_canvas_index << 0))
 
+extern int query_video_status(int type, int *value);
+
 static vframe_t *vh264_vf_peek(void*);
 static vframe_t *vh264_vf_get(void*);
 static void vh264_vf_put(vframe_t *, void*);
@@ -1427,6 +1429,7 @@ static void vh264_local_init(void)
 
 static s32 vh264_init(void)
 {
+    int trickmode_fffb = 0;
     void __iomem *p = ioremap_nocache(DEF_BUF_START_BASE, V_BUF_ADDR_START - DEF_BUF_START_ADDR);
     void __iomem *p1 = (void __iomem *)((ulong)(p) + MEM_HEADER_CPU_BASE - DEF_BUF_START_BASE);
 
@@ -1444,7 +1447,11 @@ static s32 vh264_init(void)
 
     vh264_local_init();
 
-    memset(p, 0, V_BUF_ADDR_START - DEF_BUF_START_ADDR);
+    query_video_status(0, &trickmode_fffb);
+
+    if (!trickmode_fffb) {
+        memset(p, 0, V_BUF_ADDR_START - DEF_BUF_START_ADDR);
+    }
 
     amvdec_enable();
 
diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 9cca68b193e0..fc48f7b2bcc9 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -858,9 +858,11 @@ static void vsync_toggle_frame(vframe_t *vf)
             video_prot_axis(&video_prot, video_angle, prot_parms.VPP_hd_start_lines_, prot_parms.VPP_hd_end_lines_, prot_parms.VPP_vd_start_lines_, prot_parms.VPP_vd_end_lines_);
             prot_axis_changed = 0x2;
         }
+#if 0
         if (video_prot.status) {
             video_prot_set_canvas(vf);
         }
+#endif
     }
     frame_count++;
     if(debug_flag& DEBUG_FLAG_PRINT_TOGGLE_FRAME){
@@ -974,29 +976,36 @@ static void vsync_toggle_frame(vframe_t *vf)
         canvas_copy((vf->canvas1Addr >> 16) & 0xff, disp_canvas_index[rdma_canvas_id][5]);
 
 	VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off, disp_canvas[rdma_canvas_id][0]);
-        //if(cur_frame_par && (cur_frame_par->vpp_2pic_mode == 1))
-	    VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off, disp_canvas[rdma_canvas_id][0]);
-	    //else
-	    //VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off, disp_canvas[rdma_canvas_id][1]);
+	VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off, disp_canvas[rdma_canvas_id][0]);
 	VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0, disp_canvas[rdma_canvas_id][1]);
 	VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1, disp_canvas[rdma_canvas_id][1]);
-
         next_rdma_canvas_id = rdma_canvas_id?0:1;
+
+        if (use_prot && video_prot.status) {
+             VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, disp_canvas[rdma_canvas_id][0] & 0xff, 0, 8);
+             if (!(vf->type & VIDTYPE_VIU_444)) {
+                 VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, (disp_canvas[rdma_canvas_id][0] >> 8) & 0xff, 0, 8);
+             }
+        }
 #else
-    canvas_copy(vf->canvas0Addr & 0xff, disp_canvas_index[0]);
-    canvas_copy((vf->canvas0Addr >> 8) & 0xff, disp_canvas_index[1]);
-    canvas_copy((vf->canvas0Addr >> 16) & 0xff, disp_canvas_index[2]);
-    canvas_copy(vf->canvas1Addr & 0xff, disp_canvas_index[3]);
-    canvas_copy((vf->canvas1Addr >> 8) & 0xff, disp_canvas_index[4]);
-    canvas_copy((vf->canvas1Addr >> 16) & 0xff, disp_canvas_index[5]);
-
-    VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off, disp_canvas[0]);
-	    //if(cur_frame_par && (cur_frame_par->vpp_2pic_mode == 1))
-	        VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off, disp_canvas[0]);
-	    //else
-        //VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off, disp_canvas[1]);
-	    VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0, disp_canvas[1]);
-	    VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1, disp_canvas[1]);
+        canvas_copy(vf->canvas0Addr & 0xff, disp_canvas_index[0]);
+        canvas_copy((vf->canvas0Addr >> 8) & 0xff, disp_canvas_index[1]);
+        canvas_copy((vf->canvas0Addr >> 16) & 0xff, disp_canvas_index[2]);
+        canvas_copy(vf->canvas1Addr & 0xff, disp_canvas_index[3]);
+        canvas_copy((vf->canvas1Addr >> 8) & 0xff, disp_canvas_index[4]);
+        canvas_copy((vf->canvas1Addr >> 16) & 0xff, disp_canvas_index[5]);
+
+        VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off, disp_canvas[0]);
+        VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off, disp_canvas[0]);
+        VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0, disp_canvas[1]);
+        VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1, disp_canvas[1]);
+
+        if (use_prot && video_prot.status) {
+             VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, disp_canvas_index[0], 0, 8);
+             if (!(vf->type & VIDTYPE_VIU_444)) {
+                 VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, disp_canvas_index[1], 0, 8);
+             }
+        }
 #endif
     }
     /* set video PTS */
@@ -2652,7 +2661,6 @@ unsigned int vf_keep_current(void)
         return 0;
     }
 
-
     if (!keep_y_addr_remap) {
         //if (alloc_keep_buffer())
         return -1;
@@ -2676,7 +2684,12 @@ unsigned int vf_keep_current(void)
         }
         if (keep_phy_addr(keep_y_addr) != canvas_get_addr(y_index) &&
             canvas_dup(keep_y_addr_remap, canvas_get_addr(y_index), (cd.width)*(cd.height))) {
+#ifdef CONFIG_VSYNC_RDMA
+            canvas_update_addr(disp_canvas_index[0][0], keep_phy_addr(keep_y_addr));
+            canvas_update_addr(disp_canvas_index[1][0], keep_phy_addr(keep_y_addr));
+#else
             canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
+#endif
             if(debug_flag& DEBUG_FLAG_BLACKOUT){
                 printk("%s: VIDTYPE_VIU_422\n", __func__);
             }
@@ -2690,7 +2703,12 @@ unsigned int vf_keep_current(void)
         }
         if (keep_phy_addr(keep_y_addr) != canvas_get_addr(y_index) &&
             canvas_dup(keep_y_addr_remap, canvas_get_addr(y_index), (cd.width)*(cd.height))){
+#ifdef CONFIG_VSYNC_RDMA
+            canvas_update_addr(disp_canvas_index[0][0], keep_phy_addr(keep_y_addr));
+            canvas_update_addr(disp_canvas_index[1][0], keep_phy_addr(keep_y_addr));
+#else
             canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
+#endif
             if(debug_flag& DEBUG_FLAG_BLACKOUT){
                 printk("%s: VIDTYPE_VIU_444\n", __func__);
             }
@@ -2706,8 +2724,15 @@ unsigned int vf_keep_current(void)
         if (keep_phy_addr(keep_y_addr) != canvas_get_addr(y_index) &&
             canvas_dup(keep_y_addr_remap, canvas_get_addr(y_index), (cs0.width *cs0.height)) &&
             canvas_dup(keep_u_addr_remap, canvas_get_addr(u_index), (cs1.width *cs1.height))){
+#ifdef CONFIG_VSYNC_RDMA
+            canvas_update_addr(disp_canvas_index[0][0], keep_phy_addr(keep_y_addr));
+            canvas_update_addr(disp_canvas_index[1][0], keep_phy_addr(keep_y_addr));
+            canvas_update_addr(disp_canvas_index[0][1], keep_phy_addr(keep_u_addr));
+            canvas_update_addr(disp_canvas_index[1][1], keep_phy_addr(keep_u_addr));
+#else
             canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
             canvas_update_addr(u_index, keep_phy_addr(keep_u_addr));
+#endif
             if(debug_flag& DEBUG_FLAG_BLACKOUT){
                 printk("%s: VIDTYPE_VIU_NV21\n", __func__);
             }
@@ -2729,9 +2754,18 @@ unsigned int vf_keep_current(void)
             canvas_dup(keep_y_addr_remap, canvas_get_addr(y_index), (cs0.width *cs0.height)) &&
             canvas_dup(keep_u_addr_remap, canvas_get_addr(u_index), (cs1.width *cs1.height)) &&
             canvas_dup(keep_v_addr_remap, canvas_get_addr(v_index), (cs2.width *cs2.height))) {
+#ifdef CONFIG_VSYNC_RDMA
+            canvas_update_addr(disp_canvas_index[0][0], keep_phy_addr(keep_y_addr));
+            canvas_update_addr(disp_canvas_index[1][0], keep_phy_addr(keep_y_addr));
+            canvas_update_addr(disp_canvas_index[0][1], keep_phy_addr(keep_u_addr));
+            canvas_update_addr(disp_canvas_index[1][1], keep_phy_addr(keep_u_addr));
+            canvas_update_addr(disp_canvas_index[0][2], keep_phy_addr(keep_v_addr));
+            canvas_update_addr(disp_canvas_index[1][2], keep_phy_addr(keep_v_addr));
+#else
             canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
             canvas_update_addr(u_index, keep_phy_addr(keep_u_addr));
             canvas_update_addr(v_index, keep_phy_addr(keep_v_addr));
+#endif
             if(debug_flag& DEBUG_FLAG_BLACKOUT){
                 printk("%s: VIDTYPE_VIU_420\n", __func__);
             }
diff --git a/drivers/amlogic/amports/vmpeg4.c b/drivers/amlogic/amports/vmpeg4.c
index 68548a523b0a..8e6164dee8ec 100755
--- a/drivers/amlogic/amports/vmpeg4.c
+++ b/drivers/amlogic/amports/vmpeg4.c
@@ -125,6 +125,9 @@ static void vmpeg4_local_init(void);
 static const char vmpeg4_dec_id[] = "vmpeg4-dev";
 
 #define PROVIDER_NAME   "decoder.mpeg4"
+
+extern int query_video_status(int type, int *value);
+
 static const struct vframe_operations_s vmpeg_vf_provider = {
     .peek = vmpeg_vf_peek,
     .get = vmpeg_vf_get,
@@ -769,12 +772,17 @@ static void vmpeg4_local_init(void)
 
 static s32 vmpeg4_init(void)
 {
+    int trickmode_fffb = 0;
     dma_addr_t buf_start_map;
 
-    memset(phys_to_virt(buf_start), 0, buf_size);
+    query_video_status(0, &trickmode_fffb);
+
+    if (!trickmode_fffb) {
+        memset(phys_to_virt(buf_start), 0, buf_size);
+
+        buf_start_map = dma_map_single(NULL, phys_to_virt(buf_start), buf_size, DMA_TO_DEVICE);
+    }
 
-    buf_start_map = dma_map_single(NULL, phys_to_virt(buf_start), buf_size, DMA_TO_DEVICE);
-    
     amlog_level(LOG_LEVEL_INFO, "vmpeg4_init\n");
     init_timer(&recycle_timer);
 
@@ -820,9 +828,12 @@ static s32 vmpeg4_init(void)
         amlog_level(LOG_LEVEL_ERROR, "not supported MPEG4 format\n");
     }
 
-    dma_unmap_single(NULL, buf_start_map, buf_size, DMA_TO_DEVICE);
     stat |= STAT_MC_LOAD;
 
+    if (!trickmode_fffb) {
+        dma_unmap_single(NULL, buf_start_map, buf_size, DMA_TO_DEVICE);
+    }
+
     /* enable AMRISC side protocol */
     vmpeg4_prot_init();
 
diff --git a/drivers/amlogic/amports/vreal.c b/drivers/amlogic/amports/vreal.c
index 52fea9a57652..510a10a6c4a8 100755
--- a/drivers/amlogic/amports/vreal.c
+++ b/drivers/amlogic/amports/vreal.c
@@ -118,6 +118,9 @@ static void vreal_local_init(void);
 static const char vreal_dec_id[] = "vreal-dev";
 
 #define PROVIDER_NAME   "decoder.real"
+
+extern int query_video_status(int type, int *value);
+
 static const struct vframe_operations_s vreal_vf_provider = {
     .peek = vreal_vf_peek,
     .get = vreal_vf_get,
@@ -694,15 +697,18 @@ static void load_block_data(unsigned int dest, unsigned int count)
 
 s32 vreal_init(void)
 {
+    int trickmode_fffb = 0;
     int r;
     dma_addr_t buf_start_map;
 
     printk("vreal_init\n");
 
-    memset(phys_to_virt(buf_start), 0, buf_size);
+    if (!trickmode_fffb) {
+        memset(phys_to_virt(buf_start), 0, buf_size);
+
+        buf_start_map = dma_map_single(NULL, phys_to_virt(buf_start), buf_size, DMA_TO_DEVICE);
+    }
 
-    buf_start_map = dma_map_single(NULL, phys_to_virt(buf_start), buf_size, DMA_TO_DEVICE);
-    
     init_timer(&recycle_timer);
 
     stat |= STAT_TIMER_INIT;
@@ -747,9 +753,12 @@ s32 vreal_init(void)
         printk("unsurpported real format\n");
     }
 
-    dma_unmap_single(NULL, buf_start_map, buf_size, DMA_TO_DEVICE);
     stat |= STAT_MC_LOAD;
 
+    if (!trickmode_fffb) {
+        dma_unmap_single(NULL, buf_start_map, buf_size, DMA_TO_DEVICE);
+    }
+
     /* enable AMRISC side protocol */
     vreal_prot_init();
 
-- 
2.19.0

