From ceaff77ae3a371dbc1e4ee0b987488bdeebca7a3 Mon Sep 17 00:00:00 2001
From: "zhancai.yang" <zhancai.yang@amlogic.com>
Date: Mon, 23 Dec 2013 22:20:05 +0800
Subject: [PATCH 2647/5965] PD #84698: change sdio wifi clock to get higher
 throughput,sdio pinmux problem.

commit 852902699d9dbe2c397d1fa0c66a6a74ba66c314
Author: zhancai.yang <zhancai.yang@amlogic.com>
Date:   Wed Dec 18 17:11:39 2013 +0800

    support higher than sdio clk @50M

commit bc61dd3c0682115881ed887333ef48fcb2262dc9
Author: chunhai.guo <chunhai.guo@amlogic.com>
Date:   Wed Dec 18 15:45:08 2013 +0800

    switch pinmux in the most save time way for sd/sdio
---
 drivers/amlogic/mmc/aml_sdio.c | 51 +++++++++++++-----
 drivers/amlogic/mmc/amlsd.c    | 98 ++++++++++++++++++++--------------
 drivers/amlogic/mmc/amlsd.h    |  2 +-
 drivers/amlogic/mmc/amlsd_of.c |  2 +-
 4 files changed, 98 insertions(+), 55 deletions(-)

diff --git a/drivers/amlogic/mmc/aml_sdio.c b/drivers/amlogic/mmc/aml_sdio.c
index ec07fd7090c5..33f2a788ae99 100755
--- a/drivers/amlogic/mmc/aml_sdio.c
+++ b/drivers/amlogic/mmc/aml_sdio.c
@@ -49,14 +49,12 @@ static void aml_sdio_soft_reset(struct amlsd_host* host)
 /*
  * init sdio reg
  */
-static void aml_sdio_init_param(struct amlsd_platform* pdata)
+static void aml_sdio_init_param(struct amlsd_host* host)
 {
-	struct amlsd_host* host = pdata->host;
     struct sdio_status_irq irqs={0};
     struct sdio_config conf={0};
 
-    writel(pdata->port, host->base + SDIO_MULT);
-    aml_sdio_soft_reset(host);
+    // aml_sdio_soft_reset(host);
 
     /*write 1 clear bit8,9*/
     irqs.sdio_if_int = 1;
@@ -147,6 +145,20 @@ void aml_sdio_set_port_ios(struct mmc_host* mmc)
     u32 vconf = readl(host->base + SDIO_CONF);
     struct sdio_config* conf = (void*)&vconf;
 
+        if(aml_card_type_sdio(pdata) && (pdata->mmc->actual_clock > 50000000))
+        { // if > 50MHz  
+            conf->data_latch_at_negedge = 1; //[19] //0     
+            conf->do_not_delay_data = 1; //[18]        
+            conf->cmd_out_at_posedge =0; //[11]    
+        } 
+        else 
+        { 
+            conf->data_latch_at_negedge = 0; //[19] //0       
+            conf->do_not_delay_data = 0; //[18]       
+            conf->cmd_out_at_posedge =0; //[11]    
+        }
+        writel(vconf, host->base+SDIO_CONF);
+
     if ((conf->cmd_clk_divide == pdata->clkc) && (conf->bus_width == pdata->width))
         return ;
 
@@ -310,7 +322,7 @@ static void aml_sdio_print_err (struct amlsd_host *host, char *msg)
     sdio_err("%s: %s, Cmd%d arg %08x Xfer %d Bytes, "
             "host->xfer_step=%d, host->cmd_is_stop=%d, pdata->port=%d, "
             "virqs=%#0x, virqc=%#0x, conf->cmd_clk_divide=%d, pdata->clkc=%d, "
-            "conf->bus_width=%d, pdata->width=%d, clock=%d\n",
+            "conf->bus_width=%d, pdata->width=%d, conf=%#x, clock=%d\n",
             mmc_hostname(host->mmc),
             msg,
             host->mrq->cmd->opcode,
@@ -324,15 +336,17 @@ static void aml_sdio_print_err (struct amlsd_host *host, char *msg)
             pdata->clkc,
             conf->bus_width,
             pdata->width,
+            vconf,
             clk_rate / (pdata->clkc + 1));    
 }
 
 /*setup delayed workstruct in aml_sdio_request*/
 static void aml_sdio_timeout(struct work_struct *data)
 {
+    static int timeout_cnt = 0;
+    unsigned long flags;
     //struct amlsd_host* host = (void*)data;
     struct amlsd_host *host = container_of(data, struct amlsd_host, timeout);
-    unsigned long flags;
     // struct mmc_request *mrq = host->mrq;
     u32 virqs = readl(host->base + SDIO_IRQS);
     struct sdio_status_irq* irqs = (void*)&virqs;
@@ -353,12 +367,18 @@ static void aml_sdio_timeout(struct work_struct *data)
         //mod_timer(&host->timeout_tlist, jiffies + 10);
         schedule_delayed_work(&host->timeout, 10);
         spin_unlock_irqrestore(&host->mrq_lock, flags);
-        if(irqs->sdio_cmd_int)
+        if(irqs->sdio_cmd_int) {
+            timeout_cnt++;
+            if (timeout_cnt > 100)
+                goto timeout_handle;
             sdio_err("%s: irq have been occured\n", mmc_hostname(host->mmc));
+        }
         else
             sdio_err("%s: isr have been run\n",  mmc_hostname(host->mmc));
 		return;
 	}
+timeout_handle:
+    timeout_cnt = 0;
 
     if (!(irqc->arc_cmd_int_en)) {
         sdio_err("%s: arc_cmd_int_en is not enable\n",  mmc_hostname(host->mmc));
@@ -742,6 +762,11 @@ static void aml_sdio_set_clk_rate(struct amlsd_platform* pdata, u32 clk_ios)
 	/*0: dont set it, 1:div2, 2:div3, 3:div4...*/
 	clk_div = clk_rate / clk_ios - !(clk_rate%clk_ios);
 
+   if(aml_card_type_sdio(pdata) && (pdata->f_max > 50000000)) // if > 50MHz
+          clk_div = 0;
+       
+
+
     conf->cmd_clk_divide = clk_div;
     pdata->clkc = clk_div;
     pdata->mmc->actual_clock = clk_rate / (clk_div + 1);
@@ -958,6 +983,7 @@ static struct amlsd_host* aml_sdio_init_host(void)
     
     host->version = AML_MMC_VERSION;
     host->storage_flag = storage_flag;
+    host->pinctrl = NULL;
 
 #ifdef      CONFIG_MMC_AML_DEBUG
 	host->req_cnt = 0;
@@ -983,6 +1009,9 @@ static int aml_sdio_probe(struct platform_device *pdev)
 
 	if(amlsd_get_reg_base(pdev, host))
 		goto fail_init_host;
+    
+    //init sdio reg here
+    aml_sdio_init_param(host);
 
 	host->pdev = pdev;
 	for(i=0;i<MMC_MAX_DEVICE;i++){
@@ -1047,11 +1076,6 @@ static int aml_sdio_probe(struct platform_device *pdev)
 		if(pdata->port_init)
 			pdata->port_init(pdata);
 
-        if (i == 0) {
-            //init sdio reg here
-            aml_sdio_init_param(pdata);
-        }
-
         aml_sduart_pre(pdata);
 
 		ret = mmc_add_host(mmc);
@@ -1122,6 +1146,9 @@ int aml_sdio_remove(struct platform_device *pdev)
 		mmc_remove_host(mmc);
 		mmc_free_host(mmc);
 	}
+    
+    aml_devm_pinctrl_put(host);
+
     kfree(host);
 	return 0;
 }
diff --git a/drivers/amlogic/mmc/amlsd.c b/drivers/amlogic/mmc/amlsd.c
index dee67f236fa0..873c21b22fe3 100755
--- a/drivers/amlogic/mmc/amlsd.c
+++ b/drivers/amlogic/mmc/amlsd.c
@@ -714,6 +714,8 @@ void aml_devm_pinctrl_put (struct amlsd_host* host)
     if (host->pinctrl) {
         devm_pinctrl_put(host->pinctrl);
         host->pinctrl = NULL;
+
+        host->pinctrl_name[0]='\0'; // clear the pinctrl_name
         // sdio_err("Put Pinctrl\n");
     }
 }
@@ -756,6 +758,10 @@ void of_amlsd_xfer_pre(struct amlsd_platform* pdata)
     int i, size=0;
     struct pinctrl* ppin;
 
+    if (pdata->port == PORT_SDIO_C) { // to avoid emmc platform autoreboot issue
+        udelay(65);
+    }
+
     if (pdata->port > PORT_SDIO_C) { // so it should be PORT_SDHC_X
         strncpy(p, "sdhc_", sizeof(pinctrl));
         size = strlen(p);
@@ -763,7 +769,7 @@ void of_amlsd_xfer_pre(struct amlsd_platform* pdata)
     }
 
     if (pdata->mmc->ios.chip_select == MMC_CS_DONTCARE) {
-        if(pdata->mmc->caps & MMC_CAP_4_BIT_DATA){
+        if ((pdata->mmc->caps & MMC_CAP_4_BIT_DATA) || (pdata->port != MESON_SDIO_PORT_B)) {
             snprintf(p, sizeof(pinctrl)-size, "%s_all_pins", pdata->pinname);
         }else{
             snprintf(p, sizeof(pinctrl)-size, "%s_1bit_pins", pdata->pinname);
@@ -771,33 +777,43 @@ void of_amlsd_xfer_pre(struct amlsd_platform* pdata)
     } else { // MMC_CS_HIGH
         snprintf(p, sizeof(pinctrl)-size, "%s_clk_cmd_pins", pdata->pinname);
     }
+    
+    // if pinmux setting is changed (pinctrl_name is different)
+    if (strncmp(pdata->host->pinctrl_name, pinctrl, sizeof(pdata->host->pinctrl_name))) {
+        if (strlcpy(pdata->host->pinctrl_name, pinctrl, sizeof(pdata->host->pinctrl_name)) 
+                >= sizeof(pdata->host->pinctrl_name)) {
+            sdio_err("Pinctrl name is too long!\n");
+			return;
+		}
 
-    for (i = 0; i < 100; i++) {
-        ppin = devm_pinctrl_get_select(&pdata->host->pdev->dev, pinctrl);
-        if(!IS_ERR(ppin)) {
-            pdata->host->pinctrl = ppin;
-            break;
+        for (i = 0; i < 100; i++) {
+            // ppin = devm_pinctrl_get_select(&pdata->host->pdev->dev, p);
+            ppin = aml_devm_pinctrl_get_select(pdata->host, pinctrl);
+            if(!IS_ERR(ppin)) {
+                // pdata->host->pinctrl = ppin;
+                break;
+            }
+            /* else -> aml_irq_cdin_thread() should be using one of the GPIO of card,
+             * then we should wait here until the GPIO is free,
+             * otherwise something must be wrong.
+             */
+            mdelay(1);
         }
-        /* else -> aml_irq_cdin_thread() should be using one of the GPIO of card,
-         * then we should wait here until the GPIO is free,
-         * otherwise something must be wrong.
-         */
-        mdelay(1);
-    }
-    if (i == 100) {
-        sdhc_err("CMD%d: get pinctrl fail.\n", pdata->host->opcode);
+        if (i == 100) {
+            sdhc_err("CMD%d: get pinctrl %s fail.\n", pdata->host->opcode, pinctrl);
+        }
+        //printk("pre pinctrl %x, %s, ppin %x\n", pdata->host->pinctrl, p, ppin);
     }
-    //printk("pre pinctrl %x, %s, ppin %x\n", pdata->host->pinctrl, p, ppin);
 }
 
 void of_amlsd_xfer_post(struct amlsd_platform* pdata)
 {
-    if (pdata->host->pinctrl) {
-        devm_pinctrl_put(pdata->host->pinctrl);
-        pdata->host->pinctrl = NULL;
-    } else {
-        sdhc_err("CMD%d: pdata->host->pinctrl = NULL\n", pdata->host->opcode);
-    }
+    // if (pdata->host->pinctrl) {
+        // devm_pinctrl_put(pdata->host->pinctrl);
+        // pdata->host->pinctrl = NULL;
+    // } else {
+        // sdhc_err("CMD%d: pdata->host->pinctrl = NULL\n", pdata->host->opcode);
+    // }
     // printk(KERN_ERR "CMD%d: put pinctrl\n", pdata->host->opcode);
     // aml_dbg_print_pinmux(); // for debug
 }
@@ -851,7 +867,7 @@ void aml_cs_high (struct amlsd_platform * pdata) // chip select high
 	 */
     if ((pdata->mmc->ios.chip_select == MMC_CS_HIGH) && (pdata->gpio_dat3 != 0)
         && (pdata->jtag_pin == 0)) { // is NOT sd card
-
+        aml_devm_pinctrl_put(pdata->host);
         ret = amlogic_gpio_request_one(pdata->gpio_dat3, GPIOF_OUT_INIT_HIGH, MODULE_NAME);
         CHECK_RET(ret);
         if (ret == 0) {
@@ -915,30 +931,30 @@ static int aml_is_sdjtag(struct amlsd_platform * pdata)
 
 static int aml_is_sduart(struct amlsd_platform * pdata)
 {
-    int ret, dat3;
+    int dat3;
 
     if(pdata->is_sduart)
         return 1;
 
-    // dat3 = aml_get_reg32_bits(P_PREG_PAD_GPIO0_I,26,1);
-    // if(dat3 == 0){
-        // return 1;
-    // }
-
-    if (pdata->gpio_dat3 != 0){
-        ret = amlogic_gpio_request_one(pdata->gpio_dat3, GPIOF_IN, MODULE_NAME);
-        if(ret){
-            printk("DAT3 pinmux used, return no uart\n");
-            return 0;
-        }
-        CHECK_RET(ret);
-        dat3 = amlogic_get_value(pdata->gpio_dat3, MODULE_NAME);
-        // print_tmp("sd gpio_dat3=%d\n", amlogic_get_value(pdata->gpio_dat3, MODULE_NAME));
-        amlogic_gpio_free(pdata->gpio_dat3, MODULE_NAME);
-        if(dat3 == 0){
-            return 1;
-        }
+    dat3 = aml_get_reg32_bits(P_PREG_PAD_GPIO0_I,26,1);
+    if(dat3 == 0){
+        return 1;
     }
+
+    // if (pdata->gpio_dat3 != 0){
+        // ret = amlogic_gpio_request_one(pdata->gpio_dat3, GPIOF_IN, MODULE_NAME);
+        // if(ret){
+            // printk("DAT3 pinmux used, return no uart\n");
+            // return 0;
+        // }
+        // CHECK_RET(ret);
+        // dat3 = amlogic_get_value(pdata->gpio_dat3, MODULE_NAME);
+        // // print_tmp("sd gpio_dat3=%d\n", amlogic_get_value(pdata->gpio_dat3, MODULE_NAME));
+        // amlogic_gpio_free(pdata->gpio_dat3, MODULE_NAME);
+        // if(dat3 == 0){
+            // return 1;
+        // }
+    // }
     return 0;
 }
 
diff --git a/drivers/amlogic/mmc/amlsd.h b/drivers/amlogic/mmc/amlsd.h
index 85cdf8a753ed..01b3b03621f8 100755
--- a/drivers/amlogic/mmc/amlsd.h
+++ b/drivers/amlogic/mmc/amlsd.h
@@ -7,7 +7,7 @@
 #define AML_MMC_MAJOR_VERSION   1
 #define AML_MMC_MINOR_VERSION   01
 #define AML_MMC_VERSION         ((AML_MMC_MAJOR_VERSION << 8) | AML_MMC_MINOR_VERSION)
-#define AML_MMC_VER_MESSAGE     "2013-11-28: revert pinctrl modification"
+#define AML_MMC_VER_MESSAGE     "2013-12-12: switch pinmux in the most save time way for sd/sdio"
 
 extern unsigned sdhc_debug;
 extern unsigned sdio_debug;
diff --git a/drivers/amlogic/mmc/amlsd_of.c b/drivers/amlogic/mmc/amlsd_of.c
index 8d87c5d3b99c..4c7d7024c1e2 100755
--- a/drivers/amlogic/mmc/amlsd_of.c
+++ b/drivers/amlogic/mmc/amlsd_of.c
@@ -175,10 +175,10 @@ int amlsd_get_platform_data(struct platform_device* pdev,
 		SD_PARSE_GPIO_NUM_PROP(child, "gpio_ro", str, pdata->gpio_ro);
 		SD_PARSE_GPIO_NUM_PROP(child, "gpio_power", str, pdata->gpio_power);
 
-        SD_PARSE_GPIO_NUM_PROP(child, "gpio_dat3", str, pdata->gpio_dat3);
 		SD_PARSE_STRING_PROP(child, "pinname", str, pdata->pinname);
         SD_PARSE_GPIO_NUM_PROP(child, "jtag_pin", str, pdata->jtag_pin);
 		SD_PARSE_U32_PROP(child, "card_type", prop, pdata->card_type);
+        SD_PARSE_GPIO_NUM_PROP(child, "gpio_dat3", str, pdata->gpio_dat3);
 
 		pdata->port_init = of_amlsd_init;
 		pdata->pwr_pre = of_amlsd_pwr_prepare;
-- 
2.19.0

