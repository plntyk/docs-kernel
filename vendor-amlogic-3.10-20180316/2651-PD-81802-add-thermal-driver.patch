From a07d16cc2f7e2c9a79ae6dc4ac48f84e68f4a954 Mon Sep 17 00:00:00 2001
From: xu xing <xing.xu@amlogic.com>
Date: Sat, 21 Dec 2013 22:41:12 +0800
Subject: [PATCH 2651/5965] PD #81802:add thermal driver

---
 arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd |  11 +
 arch/arm/configs/meson8_defconfig            |   1 +
 drivers/amlogic/Kconfig                      |   2 +
 drivers/amlogic/Makefile                     |   3 +-
 drivers/amlogic/efuse/efuse_hw.c             |   7 +-
 drivers/amlogic/input/saradc/saradc.c        |  50 +-
 drivers/amlogic/thermal/Kconfig              |  10 +
 drivers/amlogic/thermal/Makefile             |   6 +
 drivers/amlogic/thermal/amlogic_thermal.c    | 590 +++++++++++++++++++
 drivers/thermal/cpu_cooling.c                |  10 +-
 drivers/thermal/step_wise.c                  |  18 +-
 drivers/thermal/thermal_core.c               |   1 +
 include/linux/amlogic/saradc.h               |   2 +-
 13 files changed, 695 insertions(+), 16 deletions(-)
 create mode 100644 drivers/amlogic/thermal/Kconfig
 create mode 100644 drivers/amlogic/thermal/Makefile
 create mode 100755 drivers/amlogic/thermal/amlogic_thermal.c

diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
index 7c0602e4883e..2f592c122f30 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_v1.dtd
@@ -1558,6 +1558,17 @@ sdio{
 		usid-min = <8>; /*reserved*/
 		usid-max = <31>; /*reserved*/
 	};
+	thermal{
+		compatible = "amlogic-thermal";
+		#thermal-cells=<3>;
+		dev_name = "aml_thermal";
+		trip_point=<30 1200000 1200000
+			    70  800000 800000
+			    110 0xffffffff 0xffffffff>;
+		cpu_cali_a=<0>;
+		idle_interval=<1000>;
+
+	};
 
 /// ***************************************************************************************
 ///	-	HDMI
diff --git a/arch/arm/configs/meson8_defconfig b/arch/arm/configs/meson8_defconfig
index e8d70a77aa88..2048a5fc625b 100755
--- a/arch/arm/configs/meson8_defconfig
+++ b/arch/arm/configs/meson8_defconfig
@@ -331,3 +331,4 @@ CONFIG_DEBUG_INFO=y
 CONFIG_CRC_T10DIF=y
 CONFIG_CRC7=y
 CONFIG_DEBUG_FS=y
+CONFIG_AMLOGIC_THERMAL=y
diff --git a/drivers/amlogic/Kconfig b/drivers/amlogic/Kconfig
index da52095238f6..7297a819ef63 100755
--- a/drivers/amlogic/Kconfig
+++ b/drivers/amlogic/Kconfig
@@ -32,6 +32,8 @@ source "drivers/amlogic/efuse/Kconfig"
 #source "drivers/amlogic/boot_monitor/Kconfig"
 #source "drivers/amlogic/aml_watchdog/Kconfig"
 #source "drivers/amlogic/spi/Kconfig"
+source "drivers/amlogic/thermal/Kconfig"
+
 #
 #	Block devices
 #
diff --git a/drivers/amlogic/Makefile b/drivers/amlogic/Makefile
index 1abc50d68a7f..f327795a7854 100755
--- a/drivers/amlogic/Makefile
+++ b/drivers/amlogic/Makefile
@@ -52,6 +52,7 @@ obj-$(CONFIG_I2C) += i2c/
 
 #obj-y += extern_io/
 
+obj-$(CONFIG_EFUSE)+=efuse/
 obj-y += input/
 
 obj-$(CONFIG_AMLOGIC_SPI_NOR) += spi_nor/
@@ -74,7 +75,7 @@ obj-y += power/
 obj-y += tvin_v4l2/
 obj-y += tvin/
 
-obj-$(CONFIG_EFUSE)+=efuse/
+obj-y += thermal/
 
 
 #obj-$(CONFIG_BOOT_MONITOR) += boot_monitor/
diff --git a/drivers/amlogic/efuse/efuse_hw.c b/drivers/amlogic/efuse/efuse_hw.c
index 4ed9efba0b76..1bce5c02d0de 100755
--- a/drivers/amlogic/efuse/efuse_hw.c
+++ b/drivers/amlogic/efuse/efuse_hw.c
@@ -8,6 +8,7 @@
 #include <linux/platform_device.h>
 #include <mach/am_regs.h>
 #include <plat/io.h>
+#include <mach/power_gate.h>
 
 #include <linux/amlogic/efuse.h>
 #include "efuse_regs.h"
@@ -83,6 +84,7 @@ static void __efuse_write_byte( unsigned long addr, unsigned long data )
 	unsigned int byte_sel;
 #endif
 
+	CLK_GATE_ON(EFUSE);
 	//set efuse PD=0
 	aml_set_reg32_bits( P_EFUSE_CNTL1, 0, 27, 1);
 
@@ -140,6 +142,7 @@ static void __efuse_write_byte( unsigned long addr, unsigned long data )
 
 	//set efuse PD=1
 	aml_set_reg32_bits( P_EFUSE_CNTL1, 1, 27, 1);
+	CLK_GATE_OFF(EFUSE);
 	//printk(KERN_INFO "__efuse_write_byte: addr=%ld, data=0x%ld\n", addr, data);
 }
 
@@ -218,6 +221,7 @@ static ssize_t __efuse_read( char *buf, size_t count, loff_t *ppos )
 	if (count > EFUSE_BYTES)
 		return -EFAULT;
 	
+	CLK_GATE_ON(EFUSE);
 	aml_set_reg32_bits( P_EFUSE_CNTL1, CNTL1_AUTO_RD_ENABLE_ON,
 		CNTL1_AUTO_RD_ENABLE_BIT, CNTL1_AUTO_RD_ENABLE_SIZE );
 		
@@ -233,6 +237,7 @@ static ssize_t __efuse_read( char *buf, size_t count, loff_t *ppos )
 	aml_set_reg32_bits( P_EFUSE_CNTL1, CNTL1_AUTO_RD_ENABLE_OFF,
 			CNTL1_AUTO_RD_ENABLE_BIT, CNTL1_AUTO_RD_ENABLE_SIZE );
 		
+	CLK_GATE_OFF(EFUSE);
 	tmp_p = (char*)contents;
     tmp_p += *ppos;                           
 
@@ -924,7 +929,7 @@ int efuse_read_intlItem(char *intl_item,char *buf,int size)
 			break;
 		case EFUSE_SOC_CHIP_M8:
 			if(strcmp(intl_item,"temperature") == 0){
-				pos = 510;
+				pos = 502;
 				len = 2;
 				if(size <= 0){
 					printk("input size:%d is error\n",size);
diff --git a/drivers/amlogic/input/saradc/saradc.c b/drivers/amlogic/input/saradc/saradc.c
index f64fe0e5aae5..0f787ef778a9 100755
--- a/drivers/amlogic/input/saradc/saradc.c
+++ b/drivers/amlogic/input/saradc/saradc.c
@@ -9,6 +9,7 @@
 #ifdef CONFIG_MESON_CPU_TEMP_SENSOR
 #include <mach/cpu.h>
 #endif
+#include <linux/amlogic/efuse.h>
 //#define ENABLE_CALIBRATION
 #ifndef CONFIG_OF
 #define CONFIG_OF
@@ -17,7 +18,11 @@ struct saradc {
 	spinlock_t lock;
 	struct calibration *cal;
 	int cal_num;
-
+#ifdef CONFIG_ARCH_MESON8
+	int flag;
+	int trimming;
+	int adc_efuse;
+#endif
 };
 
 static struct saradc *gp_saradc;
@@ -134,6 +139,7 @@ static int saradc_get_cal_value(struct calibration *cal, int num, int val)
 
 static int last_value[] = {-1,-1,-1,-1,-1 ,-1,-1 ,-1};
 static u8 print_flag = 0; //(1<<CHAN_4)
+
 int get_adc_sample(int chan)
 {
 	int count;
@@ -413,6 +419,18 @@ static struct class saradc_class = {
     .class_attrs = saradc_class_attrs,
 };
 
+int get_cpu_temp()
+{
+	int ret=-1,tempa;
+	if(gp_saradc->flag){
+		ret=get_adc_sample(6);
+		if(ret>=0){
+			tempa=(18*(ret-gp_saradc->adc_efuse)*10000)/1024/10/85+27;
+			return tempa;
+		}
+	}
+	return ret;
+}
 static int saradc_probe(struct platform_device *pdev)
 {
 	int err;
@@ -452,6 +470,36 @@ static int saradc_probe(struct platform_device *pdev)
 			}
 		}
 	}
+#endif
+#ifdef CONFIG_ARCH_MESON8
+	char buf[2]={0};
+	int temp=-1,TS_C=-1,flag=0;
+	err=efuse_read_intlItem("temperature",buf,2);
+	if(err>=0){
+		printk("buf[0]=%x,buf[1]=%x,err=%d\n",buf[0],buf[1],err);
+		temp=0;TS_C=0;
+		temp=buf[1];
+		temp=(temp<<8)|buf[0];
+		TS_C=temp&0xf;
+		flag=0;
+		flag=(temp&0x8000)>>15;
+		temp=(temp&0x7fff)>>4;
+		printk("adc=%d,TS_C=%d,flag=%d\n",temp,TS_C,flag);
+		saradc->flag=flag;
+		saradc->trimming=TS_C;
+		saradc->adc_efuse=temp;
+	}
+	else{
+		saradc->flag=flag;
+		saradc->trimming=TS_C;
+		saradc->adc_efuse=temp;
+	}
+	if(gp_saradc->flag){
+		select_temp();
+		set_trimming(gp_saradc->trimming);
+		enable_temp();
+		enable_temp__();
+	}
 #endif
 	set_cal_voltage(7);
 	spin_lock_init(&saradc->lock);	
diff --git a/drivers/amlogic/thermal/Kconfig b/drivers/amlogic/thermal/Kconfig
new file mode 100644
index 000000000000..a1e25057d424
--- /dev/null
+++ b/drivers/amlogic/thermal/Kconfig
@@ -0,0 +1,10 @@
+# Amlogic Thermal
+
+
+config AMLOGIC_THERMAL
+    bool "amlogic thermal support"
+    select THERMAL
+    select CPU_THERMAL
+    default n
+    help
+      This is the Amlogic Thermal interface driver
diff --git a/drivers/amlogic/thermal/Makefile b/drivers/amlogic/thermal/Makefile
new file mode 100644
index 000000000000..1d24bbff4c2c
--- /dev/null
+++ b/drivers/amlogic/thermal/Makefile
@@ -0,0 +1,6 @@
+#
+#Makefile for the thermal dirver
+#
+obj-$(CONFIG_AMLOGIC_THERMAL)+= amlogic_thermal.o
+
+
diff --git a/drivers/amlogic/thermal/amlogic_thermal.c b/drivers/amlogic/thermal/amlogic_thermal.c
new file mode 100755
index 000000000000..78361c20832a
--- /dev/null
+++ b/drivers/amlogic/thermal/amlogic_thermal.c
@@ -0,0 +1,590 @@
+/*
+ * amlogic_thermal.c - Samsung amlogic thermal (Thermal Management Unit)
+ *
+ *  Copyright (C) 2011 Samsung Electronics
+ *  Donggeun Kim <dg77.kim@samsung.com>
+ *  Amit Daniel Kachhap <amit.kachhap@linaro.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/platform_device.h>
+#include <linux/interrupt.h>
+#include <linux/clk.h>
+#include <linux/workqueue.h>
+#include <linux/sysfs.h>
+#include <linux/kobject.h>
+#include <linux/io.h>
+#include <linux/mutex.h>
+#include <linux/thermal.h>
+#include <linux/cpufreq.h>
+#include <linux/cpu_cooling.h>
+#include <linux/of.h>
+#include <linux/amlogic/saradc.h>
+#include <plat/cpu.h>
+#include <linux/random.h>
+struct freq_trip_table {
+	unsigned int freq_state;
+};
+struct temp_trip{
+	unsigned int temperature;
+	unsigned int upper_freq;
+	unsigned int lower_freq;
+	int upper_level;
+	int lower_level;
+	
+};
+#define TMP_TRIP_COUNT 4
+struct amlogic_thermal_platform_data {
+	char *name;
+	struct temp_trip tmp_trip[TMP_TRIP_COUNT];
+	unsigned int temp_trip_count;
+	unsigned int critical_temp;
+	unsigned int idle_interval;
+	struct thermal_zone_device *therm_dev;
+	struct thermal_cooling_device *cool_dev;
+	enum thermal_device_mode mode;
+	struct mutex lock;
+};
+struct temp_level{
+	unsigned int temperature;
+	int high_freq;
+	int low_freq;
+};
+
+/* CPU Zone information */
+#define PANIC_ZONE      4
+#define WARN_ZONE       3
+#define MONITOR_ZONE    2
+#define SAFE_ZONE       1
+
+#define GET_ZONE(trip) (trip + 2)
+#define GET_TRIP(zone) (zone - 2)
+
+static void amlogic_unregister_thermal(struct amlogic_thermal_platform_data *pdata);
+static int amlogic_register_thermal(struct amlogic_thermal_platform_data *pdata);
+
+/* Get mode callback functions for thermal zone */
+static int amlogic_get_mode(struct thermal_zone_device *thermal,
+			enum thermal_device_mode *mode)
+{
+	struct  amlogic_thermal_platform_data *pdata= thermal->devdata;
+	
+	if (pdata)
+		*mode = pdata->mode;
+	return 0;
+}
+
+/* Set mode callback functions for thermal zone */
+static int amlogic_set_mode(struct thermal_zone_device *thermal,
+			enum thermal_device_mode mode)
+{
+	struct  amlogic_thermal_platform_data *pdata= thermal->devdata;
+	
+	if(!pdata)
+		return -EINVAL;
+	
+	//mutex_lock(&pdata->therm_dev->lock);
+	
+	if (mode == THERMAL_DEVICE_ENABLED)
+		pdata->therm_dev->polling_delay = pdata->idle_interval;
+	else
+		pdata->therm_dev->polling_delay = 0;
+
+	//mutex_unlock(&pdata->therm_dev->lock);
+
+	pdata->mode = mode;
+	thermal_zone_device_update(pdata->therm_dev);
+	pr_info("thermal polling set for duration=%d msec\n",
+				pdata->therm_dev->polling_delay);
+	return 0;
+}
+
+
+/* Get trip type callback functions for thermal zone */
+static int amlogic_get_trip_type(struct thermal_zone_device *thermal, int trip,
+				 enum thermal_trip_type *type)
+{
+	switch (GET_ZONE(trip)) {
+	case MONITOR_ZONE:
+	case WARN_ZONE:
+		*type = THERMAL_TRIP_ACTIVE;
+		break;
+	case PANIC_ZONE:
+		*type = THERMAL_TRIP_CRITICAL;
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+/* Get trip temperature callback functions for thermal zone */
+static int amlogic_get_trip_temp(struct thermal_zone_device *thermal, int trip,
+				unsigned long *temp)
+{
+	struct  amlogic_thermal_platform_data *pdata= thermal->devdata;
+	
+	if(trip > pdata->temp_trip_count ||trip<0)
+		return  -EINVAL;
+	mutex_lock(&pdata->lock);
+	*temp =pdata->tmp_trip[trip].temperature;
+	/* convert the temperature into millicelsius */
+	mutex_unlock(&pdata->lock);
+
+	return 0;
+}
+
+static int amlogic_set_trip_temp(struct thermal_zone_device *thermal, int trip,
+				unsigned long temp)
+{
+	struct  amlogic_thermal_platform_data *pdata= thermal->devdata;
+	
+	if(trip > pdata->temp_trip_count ||trip<0)
+		return  -EINVAL;
+	mutex_lock(&pdata->lock);
+	pdata->tmp_trip[trip].temperature=temp;
+	/* convert the temperature into millicelsius */
+	mutex_unlock(&pdata->lock);
+	return 0;
+}
+
+/* Get critical temperature callback functions for thermal zone */
+static int amlogic_get_crit_temp(struct thermal_zone_device *thermal,
+				unsigned long *temp)
+{
+	int ret;
+	/* Panic zone */
+	ret =amlogic_get_trip_temp(thermal, GET_TRIP(PANIC_ZONE), temp);
+	
+	return ret;
+}
+
+
+/* Bind callback functions for thermal zone */
+static int amlogic_bind(struct thermal_zone_device *thermal,
+			struct thermal_cooling_device *cdev)
+{
+	int ret = 0, i;
+	struct  amlogic_thermal_platform_data *pdata= thermal->devdata;
+	if(cdev !=pdata->cool_dev){
+		ret = -EINVAL;
+		goto out;
+	}
+	/* Bind the thermal zone to the cpufreq cooling device */
+	for (i = 0; i < pdata->temp_trip_count; i++) {
+		if (thermal_zone_bind_cooling_device(thermal, i, cdev,
+							pdata->tmp_trip[i].upper_level,
+							pdata->tmp_trip[i].lower_level)) {
+			pr_err("error binding cdev inst %d\n", i);
+			ret = -EINVAL;
+			goto out;
+		}
+	}
+	pr_info("%s bind %s okay !\n",thermal->type,cdev->type);
+	return ret;
+out:
+	return ret;
+}
+
+/* Unbind callback functions for thermal zone */
+static int amlogic_unbind(struct thermal_zone_device *thermal,
+			struct thermal_cooling_device *cdev)
+{
+	int i;
+	if(thermal && cdev){
+		struct  amlogic_thermal_platform_data *pdata= thermal->devdata;
+		for (i = 0; i < pdata->temp_trip_count; i++) {
+			if (thermal_zone_unbind_cooling_device(thermal, i, cdev)) {
+				pr_err("error binding cdev inst %d\n", i);
+				return -EINVAL;
+			}
+			return 0;
+		}
+	}else{
+		return -EINVAL;
+	}
+	return -EINVAL;
+}
+/* Get temperature callback functions for thermal zone */
+int aa=50;
+int trend=1;
+static int amlogic_get_temp(struct thermal_zone_device *thermal,
+			unsigned long *temp)
+{
+#if 0
+	if(aa>=100)
+		trend=1;
+	else if (aa<=40)
+		trend=0;
+	
+	if(trend)
+		aa=aa-5;
+	else
+		aa=aa+5;
+	//get_random_bytes(&aa,4);
+	printk("========  temp=%d\n",aa);
+	*temp=aa;
+#else
+	*temp = get_cpu_temp();
+	printk("========  temp=%d\n",*temp);
+#endif
+	return 0;
+}
+
+/* Get the temperature trend */
+static int amlogic_get_trend(struct thermal_zone_device *thermal,
+			int trip, enum thermal_trend *trend)
+{
+	return 1;
+}
+/* Operation callback functions for thermal zone */
+static struct thermal_zone_device_ops const amlogic_dev_ops = {
+	.bind = amlogic_bind,
+	.unbind = amlogic_unbind,
+	.get_temp = amlogic_get_temp,
+	.get_trend = amlogic_get_trend,
+	.get_mode = amlogic_get_mode,
+	.set_mode = amlogic_set_mode,
+	.get_trip_type = amlogic_get_trip_type,
+	.get_trip_temp = amlogic_get_trip_temp,
+	.set_trip_temp = amlogic_set_trip_temp,
+	.get_crit_temp = amlogic_get_crit_temp,
+};
+
+
+
+/* Register with the in-kernel thermal management */
+static int amlogic_register_thermal(struct amlogic_thermal_platform_data *pdata)
+{
+	int ret=0;
+	struct cpumask mask_val;
+
+	cpumask_set_cpu(0, &mask_val);
+	pdata->cool_dev= cpufreq_cooling_register(&mask_val);
+	if (IS_ERR(pdata->cool_dev)) {
+		pr_err("Failed to register cpufreq cooling device\n");
+		ret = -EINVAL;
+		goto err_unregister;
+	}
+
+	pdata->therm_dev = thermal_zone_device_register(pdata->name,
+			pdata->temp_trip_count, 7, pdata, &amlogic_dev_ops, NULL, 0,
+			pdata->idle_interval);
+
+	if (IS_ERR(pdata->therm_dev)) {
+		pr_err("Failed to register thermal zone device\n");
+		ret = -EINVAL;
+		goto err_unregister;
+	}
+
+	pr_info("amlogic: Kernel Thermal management registered\n");
+
+	return 0;
+
+err_unregister:
+	amlogic_unregister_thermal(pdata);
+	return ret;
+}
+
+/* Un-Register with the in-kernel thermal management */
+static void amlogic_unregister_thermal(struct amlogic_thermal_platform_data *pdata)
+{
+	if (pdata->therm_dev)
+		thermal_zone_device_unregister(pdata->therm_dev);
+	if (pdata->cool_dev)
+		cpufreq_cooling_unregister(pdata->cool_dev);
+
+	pr_info("amlogic: Kernel Thermal management unregistered\n");
+}
+
+struct amlogic_thermal_platform_data Pdata={
+	.name="amlogic, theraml",
+	.tmp_trip[0]={
+		.temperature=50,
+		.upper_freq=1296000,
+		.lower_freq=912000,
+	},
+	.tmp_trip[1]={
+		.temperature=100,
+		.upper_freq=816000,
+		.lower_freq=312000,
+	},
+	.tmp_trip[2]={
+		.temperature=110,
+	},
+	.temp_trip_count=3,
+	.idle_interval=1000,
+	.therm_dev=NULL,
+	.cool_dev=NULL,
+};
+
+static  struct  amlogic_thermal_platform_data *amlogic_get_driver_data(
+			struct platform_device *pdev)
+{
+	struct amlogic_thermal_platform_data *pdata=&Pdata;
+	return pdata;
+}
+int get_desend(void)
+{
+	int i;
+	unsigned int freq = CPUFREQ_ENTRY_INVALID;
+	int descend = -1;
+	struct cpufreq_frequency_table *table =
+					cpufreq_frequency_get_table(0);
+
+	if (!table)
+		return -EINVAL;
+
+	for (i = 0; table[i].frequency != CPUFREQ_TABLE_END; i++) {
+		/* ignore invalid entries */
+		if (table[i].frequency == CPUFREQ_ENTRY_INVALID)
+			continue;
+
+		/* ignore duplicate entry */
+		if (freq == table[i].frequency)
+			continue;
+
+		/* get the frequency order */
+		if (freq != CPUFREQ_ENTRY_INVALID && descend == -1){
+			descend = !!(freq > table[i].frequency);
+			break;
+		}
+
+		freq = table[i].frequency;
+	}
+	return descend;
+}
+int fix_to_freq(int freqold,int descend)
+{
+	int i;
+	unsigned int freq = CPUFREQ_ENTRY_INVALID;
+	struct cpufreq_frequency_table *table =
+					cpufreq_frequency_get_table(0);
+
+	if (!table)
+		return -EINVAL;
+
+	for (i = 0; table[i].frequency != CPUFREQ_TABLE_END; i++) {
+		/* ignore invalid entry */
+		if (table[i].frequency == CPUFREQ_ENTRY_INVALID)
+			continue;
+
+		/* ignore duplicate entry */
+		if (freq == table[i].frequency)
+			continue;
+		freq = table[i].frequency;
+		if(descend){
+			if(freqold>=table[i+1].frequency && freqold<=table[i].frequency)
+				return table[i+1].frequency;
+		}
+		else{
+			if(freqold>=table[i].frequency && freqold<=table[i+1].frequency)
+				return table[i].frequency;
+		}
+	}
+	return -EINVAL;
+}
+static struct amlogic_thermal_platform_data * amlogic_thermal_init_from_dts(struct platform_device *pdev)
+{
+	int i=0,ret=-1,val=0,cells,descend;
+	struct property *prop;
+	struct temp_level *tmp_level=NULL;
+	struct amlogic_thermal_platform_data *pdata=NULL;
+	if(!of_property_read_u32(pdev->dev.of_node, "trip_point", &val)){
+		//INIT FROM DTS
+		pdata=kzalloc(sizeof(*pdata),GFP_KERNEL);
+		if(!pdata){
+			goto err;
+		}
+		memset((void* )pdata,0,sizeof(*pdata));
+		ret=of_property_read_u32(pdev->dev.of_node, "#thermal-cells", &val);
+		if(ret){
+			dev_err(&pdev->dev, "dt probe #thermal-cells failed: %d\n", ret);
+			goto err;
+		}
+		printk("#thermal-cells=%d\n",val);
+		cells=val;
+		prop = of_find_property(pdev->dev.of_node, "trip_point", &val);
+		if (!prop){
+			dev_err(&pdev->dev, "read %s length error\n","trip_point");
+			goto err;
+		}
+		pdata->temp_trip_count=val/cells/sizeof(u32);
+		printk("pdata->temp_trip_count=%d\n",pdata->temp_trip_count);
+		tmp_level=kzalloc(sizeof(*tmp_level)*pdata->temp_trip_count,GFP_KERNEL);
+		if(!tmp_level){
+			goto err;
+		}
+		ret=of_property_read_u32_array(pdev->dev.of_node,"trip_point",(u32 *)tmp_level,val/sizeof(u32));
+		if (ret){
+			dev_err(&pdev->dev, "read %s data error\n","trip_point");
+			goto err;
+		}
+		descend=get_desend();
+		for (i = 0; i < pdata->temp_trip_count; i++) {
+			printk("temperature=%d on trip point=%d\n",tmp_level[i].temperature,i);
+			pdata->tmp_trip[i].temperature=tmp_level[i].temperature;
+			printk("fixing high_freq=%d to ",tmp_level[i].high_freq);
+			tmp_level[i].high_freq=fix_to_freq(tmp_level[i].high_freq,descend);
+			pdata->tmp_trip[i].lower_level=cpufreq_cooling_get_level(0,tmp_level[i].high_freq);
+			printk("%d at trip point %d,level=%d\n",tmp_level[i].high_freq,i,pdata->tmp_trip[i].lower_level);	
+			
+			printk("fixing low_freq=%d to ",tmp_level[i].low_freq);
+			tmp_level[i].low_freq=fix_to_freq(tmp_level[i].low_freq,descend);
+			pdata->tmp_trip[i].upper_level=cpufreq_cooling_get_level(0,tmp_level[i].low_freq);
+			printk("%d at trip point %d,level=%d\n",tmp_level[i].low_freq,i,pdata->tmp_trip[i].upper_level);	
+		}
+		
+		ret= of_property_read_u32(pdev->dev.of_node, "idle_interval", &val);
+		if (ret){
+			dev_err(&pdev->dev, "read %s  error\n","idle_interval");
+			goto err;
+		}
+		pdata->idle_interval=val;
+		printk("idle interval=%d\n",pdata->idle_interval);
+		ret=of_property_read_string(pdev->dev.of_node,"dev_name",&pdata->name);
+		if (ret){
+			dev_err(&pdev->dev, "read %s  error\n","dev_name");
+			goto err;
+		}
+		printk("pdata->name:%s\n",pdata->name);
+		if(tmp_level)
+			kfree(tmp_level);
+		return pdata;
+	}	
+err:
+	if(tmp_level)
+		kfree(tmp_level);
+	if(pdata)
+		kfree(pdata);
+	pdata= NULL;
+	return pdata;
+}
+static struct amlogic_thermal_platform_data * amlogic_thermal_initialize(struct platform_device *pdev)
+{
+	int i=0;
+	struct amlogic_thermal_platform_data *pdata=NULL;
+	pdata=amlogic_thermal_init_from_dts(pdev);
+	if(!pdata){
+		pdata=amlogic_get_driver_data(pdev);
+		// Get level
+		for (i = 0; i < pdata->temp_trip_count; i++) {
+			pdata->tmp_trip[i].upper_level=cpufreq_cooling_get_level(0,pdata->tmp_trip[i].lower_freq);
+			pdata->tmp_trip[i].lower_level=cpufreq_cooling_get_level(0,pdata->tmp_trip[i].upper_freq);
+			printk("pdata->tmp_trip[%d].upper_level=%d\n",i,pdata->tmp_trip[i].upper_level);
+			printk("pdata->tmp_trip[%d].lower_level=%d\n",i,pdata->tmp_trip[i].lower_level);
+		}
+	}
+	
+	return pdata;
+}
+
+static const struct of_device_id amlogic_thermal_match[] = {
+	{
+		.compatible = "amlogic-thermal",
+	},
+};
+static int amlogic_thermal_probe(struct platform_device *pdev)
+{
+	int ret;
+	struct amlogic_thermal_platform_data *pdata=NULL;
+	//pdata = amlogic_get_driver_data(pdev);
+	ret=get_cpu_temp();
+	if(ret<0){
+		printk("cpu sensor not ready!!!!!!\n");
+		return ret;
+	}
+	dev_info(&pdev->dev, "amlogic thermal probe start\n");
+	pdata = amlogic_thermal_initialize(pdev);
+	if (!pdata) {
+		dev_err(&pdev->dev, "Failed to initialize thermal\n");
+		goto err;
+	}
+	mutex_init(&pdata->lock);
+	pdev->dev.platform_data=pdata;
+	platform_set_drvdata(pdev, pdata);
+	ret = amlogic_register_thermal(pdata);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to register thermal interface\n");
+		goto err;
+	}
+	dev_info(&pdev->dev, "amlogic thermal probe done\n");
+	return 0;
+err:
+	platform_set_drvdata(pdev, NULL);
+	return ret;
+}
+
+static int amlogic_thermal_remove(struct platform_device *pdev)
+{
+	struct amlogic_thermal_platform_data *pdata = platform_get_drvdata(pdev);
+
+	amlogic_unregister_thermal(pdata);
+
+	platform_set_drvdata(pdev, NULL);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int amlogic_thermal_suspend(struct device *dev)
+{
+	return 0;
+}
+
+static int amlogic_thermal_resume(struct device *dev)
+{
+	return 0;
+}
+
+static SIMPLE_DEV_PM_OPS(amlogic_thermal_pm,
+			 amlogic_thermal_suspend, amlogic_thermal_resume);
+#define amlogic_thermal_PM	(&amlogic_thermal_pm)
+#else
+#define amlogic_thermal_PM	NULL
+#endif
+
+static struct platform_driver amlogic_thermal_driver = {
+	.driver = {
+		.name   = "amlogic-thermal",
+		.owner  = THIS_MODULE,
+		.pm     = amlogic_thermal_PM,
+		.of_match_table = of_match_ptr(amlogic_thermal_match),
+	},
+	.probe = amlogic_thermal_probe,
+	.remove	= amlogic_thermal_remove,
+};
+static int __init amlogic_thermal_driver_init(void) 
+{ 
+	return platform_driver_register(&(amlogic_thermal_driver)); 
+} 
+late_initcall(amlogic_thermal_driver_init); 
+static void __exit amlogic_thermal_driver_exit(void) 
+{ 
+	platform_driver_unregister(&(amlogic_thermal_driver) ); 
+} 
+module_exit(amlogic_thermal_driver_exit);
+
+MODULE_DESCRIPTION("amlogic thermal Driver");
+MODULE_AUTHOR("Amlogic SH platform team");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:amlogic-thermal");
+
diff --git a/drivers/thermal/cpu_cooling.c b/drivers/thermal/cpu_cooling.c
index d17902886c3f..2155a7056943 100644
--- a/drivers/thermal/cpu_cooling.c
+++ b/drivers/thermal/cpu_cooling.c
@@ -276,7 +276,7 @@ static int cpufreq_apply_cooling(struct cpufreq_cooling_device *cpufreq_device,
 	struct cpumask *mask = &cpufreq_device->allowed_cpus;
 	unsigned int cpu = cpumask_any(mask);
 
-
+	printk("cpufreq_device->cpufreq_state=%d,cooling_state=%d\n",cpufreq_device->cpufreq_state,cooling_state);
 	/* Check if the old cooling action is same as new cooling action */
 	if (cpufreq_device->cpufreq_state == cooling_state)
 		return 0;
@@ -284,16 +284,13 @@ static int cpufreq_apply_cooling(struct cpufreq_cooling_device *cpufreq_device,
 	clip_freq = get_cpu_frequency(cpu, cooling_state);
 	if (!clip_freq)
 		return -EINVAL;
-
 	cpufreq_device->cpufreq_state = cooling_state;
 	cpufreq_device->cpufreq_val = clip_freq;
 	notify_device = cpufreq_device;
-
 	for_each_cpu(cpuid, mask) {
 		if (is_cpufreq_valid(cpuid))
 			cpufreq_update_policy(cpuid);
 	}
-
 	notify_device = NOTIFY_INVALID;
 
 	return 0;
@@ -324,14 +321,13 @@ static int cpufreq_thermal_notifier(struct notifier_block *nb,
 		max_freq = notify_device->cpufreq_val;
 	else
 		return 0;
-
+	printk("policy->max=%d,max_freq=%d\n",policy->max,max_freq);
 	/* Never exceed user_policy.max */
 	if (max_freq > policy->user_policy.max)
 		max_freq = policy->user_policy.max;
-
 	if (policy->max != max_freq)
 		cpufreq_verify_within_limits(policy, 0, max_freq);
-
+	printk("policy->max=%d\n",policy->max);
 	return 0;
 }
 
diff --git a/drivers/thermal/step_wise.c b/drivers/thermal/step_wise.c
index d89e781b0a18..7f725205d8d2 100644
--- a/drivers/thermal/step_wise.c
+++ b/drivers/thermal/step_wise.c
@@ -50,8 +50,8 @@ static unsigned long get_target_state(struct thermal_instance *instance,
 				enum thermal_trend trend, bool throttle)
 {
 	struct thermal_cooling_device *cdev = instance->cdev;
-	unsigned long cur_state;
-	unsigned long next_target;
+	int cur_state;
+	int next_target;
 
 	/*
 	 * We keep this instance the way it is by default.
@@ -60,7 +60,7 @@ static unsigned long get_target_state(struct thermal_instance *instance,
 	 */
 	cdev->ops->get_cur_state(cdev, &cur_state);
 	next_target = instance->target;
-
+	
 	switch (trend) {
 	case THERMAL_TREND_RAISING:
 		if (throttle) {
@@ -75,7 +75,7 @@ static unsigned long get_target_state(struct thermal_instance *instance,
 			next_target = instance->upper;
 		break;
 	case THERMAL_TREND_DROPPING:
-		if (cur_state == instance->lower) {
+		if (cur_state <= instance->lower) {
 			if (!throttle)
 				next_target = THERMAL_NO_TARGET;
 		} else {
@@ -85,7 +85,7 @@ static unsigned long get_target_state(struct thermal_instance *instance,
 		}
 		break;
 	case THERMAL_TREND_DROP_FULL:
-		if (cur_state == instance->lower) {
+		if (cur_state <= instance->lower) {
 			if (!throttle)
 				next_target = THERMAL_NO_TARGET;
 		} else
@@ -95,6 +95,14 @@ static unsigned long get_target_state(struct thermal_instance *instance,
 		break;
 	}
 
+	printk("instance:%s,trend=%d,throttle=%d,instace->target=%d,cur_state=%d,next_target=%d\n",
+		instance->name,
+		trend,
+		throttle,
+		instance->target,
+		cur_state,
+		next_target);
+
 	return next_target;
 }
 
diff --git a/drivers/thermal/thermal_core.c b/drivers/thermal/thermal_core.c
index d755440791b7..54dd1dc70e24 100644
--- a/drivers/thermal/thermal_core.c
+++ b/drivers/thermal/thermal_core.c
@@ -1446,6 +1446,7 @@ void thermal_cdev_update(struct thermal_cooling_device *cdev)
 			continue;
 		if (instance->target > target)
 			target = instance->target;
+		printk("instance->target=%d,target=%d\n",instance->target,target);
 	}
 	mutex_unlock(&cdev->lock);
 	cdev->ops->set_cur_state(cdev, target);
diff --git a/include/linux/amlogic/saradc.h b/include/linux/amlogic/saradc.h
index 70a9368cdd50..815cb773d5c8 100755
--- a/include/linux/amlogic/saradc.h
+++ b/include/linux/amlogic/saradc.h
@@ -46,5 +46,5 @@ enum {
 
 extern int get_adc_sample(int chan);
 extern int saradc_ts_service(int cmd);
-
+extern int  get_cpu_temp();
 #endif
-- 
2.19.0

