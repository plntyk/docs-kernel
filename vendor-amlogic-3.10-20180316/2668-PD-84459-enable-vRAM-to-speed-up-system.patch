From efd53c270fc0e86be49d6cfbf0060c00a1b6fd18 Mon Sep 17 00:00:00 2001
From: "wei.wang" <wei.wang@amlogic.com>
Date: Thu, 26 Dec 2013 15:31:02 +0800
Subject: [PATCH 2668/5965] PD #84459: enable vRAM to speed up system

---
 arch/arm/configs/meson8_defconfig |  8 +++++++-
 drivers/staging/zram/zram_drv.c   |  4 ++--
 fs/block_dev.c                    | 27 ++++++++++++++++-----------
 mm/vmscan.c                       | 12 ++++++++++--
 4 files changed, 35 insertions(+), 16 deletions(-)

diff --git a/arch/arm/configs/meson8_defconfig b/arch/arm/configs/meson8_defconfig
index 6dde10482ce9..fba59b441c21 100755
--- a/arch/arm/configs/meson8_defconfig
+++ b/arch/arm/configs/meson8_defconfig
@@ -22,7 +22,9 @@ CONFIG_SMP=y
 CONFIG_PREEMPT=y
 CONFIG_AEABI=y
 CONFIG_HIGHMEM=y
-# CONFIG_COMPACTION is not set
+CONFIG_COMPACTION=y
+#CONFIG_KSM=y
+#CONFIG_DEBUG_KMEMLEAK=y
 CONFIG_CPU_FREQ=y
 CONFIG_CPU_FREQ_GOV_ONDEMAND=y
 CONFIG_CPU_FREQ_GOV_INTERACTIVE=y
@@ -290,6 +292,10 @@ CONFIG_UIO_PDRV=y
 CONFIG_UIO_PDRV_GENIRQ=y
 CONFIG_STAGING=y
 CONFIG_ANDROID=y
+CONFIG_ZSMALLOC=y
+CONFIG_ZRAM=y
+CONFIG_ZRAM_DEBUG=y
+CONFIG_KSM=y
 CONFIG_ANDROID_BINDER_IPC=y
 CONFIG_ASHMEM=y
 CONFIG_ANDROID_LOGGER=y
diff --git a/drivers/staging/zram/zram_drv.c b/drivers/staging/zram/zram_drv.c
index a333d44d0cff..284cf1ca1a9f 100644
--- a/drivers/staging/zram/zram_drv.c
+++ b/drivers/staging/zram/zram_drv.c
@@ -587,9 +587,9 @@ static void zram_slot_free_notify(struct block_device *bdev,
 	struct zram *zram;
 
 	zram = bdev->bd_disk->private_data;
-	down_write(&zram->lock);
+	//down_write(&zram->lock);
 	zram_free_page(zram, index);
-	up_write(&zram->lock);
+	//up_write(&zram->lock);
 	zram_stat64_inc(zram, &zram->stats.notify_free);
 }
 
diff --git a/fs/block_dev.c b/fs/block_dev.c
index 85f5c85ec91c..2abe67e33b21 100644
--- a/fs/block_dev.c
+++ b/fs/block_dev.c
@@ -29,6 +29,7 @@
 #include <linux/cleancache.h>
 #include <linux/aio.h>
 #include <asm/uaccess.h>
+#include <linux/syscalls.h>
 #include "internal.h"
 
 struct bdev_inode {
@@ -88,7 +89,7 @@ void kill_bdev(struct block_device *bdev)
 
 	invalidate_bh_lrus();
 	truncate_inode_pages(mapping, 0);
-}	
+}
 EXPORT_SYMBOL(kill_bdev);
 
 /* Invalidate clean unused buffers and pagecache. */
@@ -360,13 +361,13 @@ out:
 	mutex_unlock(&bd_inode->i_mutex);
 	return retval;
 }
-	
+
 int blkdev_fsync(struct file *filp, loff_t start, loff_t end, int datasync)
 {
 	struct inode *bd_inode = filp->f_mapping->host;
 	struct block_device *bdev = I_BDEV(bd_inode);
 	int error;
-	
+
 	error = filemap_write_and_wait_range(filp->f_mapping, start, end);
 	if (error)
 		return error;
@@ -579,7 +580,7 @@ void bdput(struct block_device *bdev)
 }
 
 EXPORT_SYMBOL(bdput);
- 
+
 static struct block_device *bd_acquire(struct inode *inode)
 {
 	struct block_device *bdev;
@@ -651,17 +652,22 @@ void bd_forget(struct inode *inode)
 static bool bd_may_claim(struct block_device *bdev, struct block_device *whole,
 			 void *holder)
 {
+	if(bdev->bd_holder == sys_swapon)
+		return true;
+
 	if (bdev->bd_holder == holder)
 		return true;	 /* already a holder */
-	else if (bdev->bd_holder != NULL)
+	else if (bdev->bd_holder != NULL){
 		return false; 	 /* held by someone else */
+	}
 	else if (bdev->bd_contains == bdev)
 		return true;  	 /* is a whole device which isn't held */
 
 	else if (whole->bd_holder == bd_may_claim)
 		return true; 	 /* is a partition of a device that is being partitioned */
-	else if (whole->bd_holder != NULL)
+	else if (whole->bd_holder != NULL){
 		return false;	 /* is a partition of a held device */
+	}
 	else
 		return true;	 /* is a partition of an un-held device */
 }
@@ -1251,7 +1257,6 @@ int blkdev_get(struct block_device *bdev, fmode_t mode, void *holder)
 	}
 
 	res = __blkdev_get(bdev, mode, 0);
-
 	if (whole) {
 		struct gendisk *disk = whole->bd_disk;
 
@@ -1325,13 +1330,13 @@ struct block_device *blkdev_get_by_path(const char *path, fmode_t mode,
 	int err;
 
 	bdev = lookup_bdev(path);
-	if (IS_ERR(bdev))
+	if (IS_ERR(bdev)){
 		return bdev;
-
+	}
 	err = blkdev_get(bdev, mode, holder);
-	if (err)
+	if (err){
 		return ERR_PTR(err);
-
+	}
 	if ((mode & FMODE_WRITE) && bdev_read_only(bdev)) {
 		blkdev_put(bdev, mode);
 		return ERR_PTR(-EACCES);
diff --git a/mm/vmscan.c b/mm/vmscan.c
index 80c0b17373f7..3df5eb61a3f9 100644
--- a/mm/vmscan.c
+++ b/mm/vmscan.c
@@ -49,6 +49,9 @@
 #include <asm/div64.h>
 
 #include <linux/swapops.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/register.h>
 
 #include "internal.h"
 
@@ -1523,7 +1526,9 @@ static void shrink_active_list(unsigned long nr_to_scan,
 	spin_unlock_irq(&zone->lru_lock);
 
 	while (!list_empty(&l_hold)) {
+
 		cond_resched();
+
 		page = lru_to_page(&l_hold);
 		list_del(&page->lru);
 
@@ -1772,11 +1777,12 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
 	 * There is enough inactive page cache, do not reclaim
 	 * anything from the anonymous working set right now.
 	 */
+#if 0
 	if (!inactive_file_is_low(lruvec)) {
 		scan_balance = SCAN_FILE;
 		goto out;
 	}
-
+#endif
 	scan_balance = SCAN_FRACT;
 
 	/*
@@ -1823,6 +1829,7 @@ static void get_scan_count(struct lruvec *lruvec, struct scan_control *sc,
 	fraction[0] = ap;
 	fraction[1] = fp;
 	denominator = ap + fp + 1;
+	//denominator = 1;
 out:
 	for_each_evictable_lru(lru) {
 		int file = is_file_lru(lru);
@@ -1831,6 +1838,7 @@ out:
 
 		size = get_lru_size(lruvec, lru);
 		scan = size >> sc->priority;
+		//scan = size;// >> sc->priority;
 
 		if (!scan && force_scan)
 			scan = min(size, SWAP_CLUSTER_MAX);
@@ -1871,12 +1879,12 @@ static void shrink_lruvec(struct lruvec *lruvec, struct scan_control *sc)
 	unsigned long nr_reclaimed = 0;
 	unsigned long nr_to_reclaim = sc->nr_to_reclaim;
 	struct blk_plug plug;
-
 	get_scan_count(lruvec, sc, nr);
 
 	blk_start_plug(&plug);
 	while (nr[LRU_INACTIVE_ANON] || nr[LRU_ACTIVE_FILE] ||
 					nr[LRU_INACTIVE_FILE]) {
+		//cond_resched();
 		for_each_evictable_lru(lru) {
 			if (nr[lru]) {
 				nr_to_scan = min(nr[lru], SWAP_CLUSTER_MAX);
-- 
2.19.0

