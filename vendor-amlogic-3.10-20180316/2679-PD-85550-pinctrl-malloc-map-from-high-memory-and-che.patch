From b4ab88385602d93af6ae964f35bdb11a7f677127 Mon Sep 17 00:00:00 2001
From: xu xing <xing.xu@amlogic.com>
Date: Mon, 30 Dec 2013 16:06:07 +0800
Subject: [PATCH 2679/5965] PD #85550 : pinctrl: malloc map from high
 memory,and check the parameter

---
 drivers/amlogic/pinctrl/pinctrl-amlogic.c | 14 ++++++----
 drivers/pinctrl/core.c                    | 32 +++++++++++++++++------
 2 files changed, 33 insertions(+), 13 deletions(-)

diff --git a/drivers/amlogic/pinctrl/pinctrl-amlogic.c b/drivers/amlogic/pinctrl/pinctrl-amlogic.c
index 919978af203b..e4cb49656b03 100755
--- a/drivers/amlogic/pinctrl/pinctrl-amlogic.c
+++ b/drivers/amlogic/pinctrl/pinctrl-amlogic.c
@@ -22,6 +22,8 @@
 #include <linux/amlogic/pinctrl-amlogic.h>
 #include <linux/pinctrl/pinctrl-state.h>
 #include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/vmalloc.h>
+
 //#define AML_PIN_DEBUG_GUP
 const char *pctdev_name;
 //#define debug
@@ -80,7 +82,7 @@ void amlogic_pinctrl_dt_free_map(struct pinctrl_dev *pctldev,
 		if (map[i].type == PIN_MAP_TYPE_CONFIGS_GROUP)
 			kfree(map[i].data.configs.configs);
 	}
-	kfree(map);
+	vfree(map);
 }
 
 
@@ -89,7 +91,7 @@ int amlogic_pinctrl_dt_node_to_map(struct pinctrl_dev *pctldev,
 				 struct device_node *np,
 				 struct pinctrl_map **map, unsigned *num_maps)
 {
-	struct pinctrl_map *new_map;
+	struct pinctrl_map *new_map=NULL;
 	unsigned new_num = 1;
 	unsigned long config = 0;
 	unsigned long *pconfig;
@@ -118,9 +120,11 @@ int amlogic_pinctrl_dt_node_to_map(struct pinctrl_dev *pctldev,
 	if (!purecfg&&config)
 		new_num =2;
 
-	new_map = kzalloc(sizeof(*new_map) * new_num, GFP_KERNEL);
-	if (!new_map)
+	new_map = vmalloc(sizeof(*new_map) * new_num);
+	if (!new_map){
+		printk("vmalloc map fail\n");
 		return -ENOMEM;
+	}
 
 	if (config) {
 		pconfig = kmemdup(&config, sizeof(config), GFP_KERNEL);
@@ -148,7 +152,7 @@ int amlogic_pinctrl_dt_node_to_map(struct pinctrl_dev *pctldev,
 	return 0;
 
 free_group:
-	kfree(new_map);
+	vfree(new_map);
 	return ret;
 }
 #else
diff --git a/drivers/pinctrl/core.c b/drivers/pinctrl/core.c
index 6d777d4e920e..1298357b614f 100755
--- a/drivers/pinctrl/core.c
+++ b/drivers/pinctrl/core.c
@@ -48,6 +48,9 @@ static bool pinctrl_dummy_state;
 /* Mutex taken by all entry points */
 DEFINE_MUTEX(pinctrl_mutex);
 
+/* Mutex taken to protect pinctrl_maps */
+DEFINE_MUTEX(pinctrl_maps_mutex);
+
 /* Global list of pin control devices (struct pinctrl_dev) */
 LIST_HEAD(pinctrldev_list);
 
@@ -686,7 +689,7 @@ static struct pinctrl *create_pinctrl(struct device *dev)
 	}
 
 	devname = dev_name(dev);
-
+	mutex_lock(&pinctrl_maps_mutex);
 	/* Iterate over the pin control maps to locate the right ones */
 	for_each_maps(maps_node, i, map) {
 		/* Map must be for this device */
@@ -696,10 +699,11 @@ static struct pinctrl *create_pinctrl(struct device *dev)
 		ret = add_setting(p, map);
 		if (ret < 0) {
 			pinctrl_put_locked(p, false);
+			mutex_unlock(&pinctrl_maps_mutex);
 			return ERR_PTR(ret);
 		}
 	}
-
+	mutex_unlock(&pinctrl_maps_mutex);
 	/* Add the pinctrl handle to the global list */
 	list_add_tail(&p->node, &pinctrl_list);
 
@@ -710,8 +714,11 @@ static struct pinctrl *pinctrl_get_locked(struct device *dev)
 {
 	struct pinctrl *p;
 
-	if (WARN_ON(!dev))
+	if ((unsigned int )dev<PAGE_OFFSET){
+		printk("dev paramter error,%p\n",dev);
+		dump_stack();
 		return ERR_PTR(-EINVAL);
+		}
 
 	p = find_pinctrl(dev);
 	if (p != NULL) {
@@ -787,6 +794,12 @@ static struct pinctrl_state *pinctrl_lookup_state_locked(struct pinctrl *p,
 							 const char *name)
 {
 	struct pinctrl_state *state;
+	if((unsigned int )p<PAGE_OFFSET || (unsigned int)name < PAGE_OFFSET)
+	{
+		printk("p=%p,name=%p\n",p,name);
+		dump_stack();
+		return ERR_PTR(-ENODEV);
+	}
 
 	state = find_state(p, name);
 	if (!state) {
@@ -1023,10 +1036,10 @@ int pinctrl_register_map(struct pinctrl_map const *maps, unsigned num_maps,
 	}
 
 	if (!locked)
-		mutex_lock(&pinctrl_mutex);
+		mutex_lock(&pinctrl_maps_mutex);
 	list_add_tail(&maps_node->node, &pinctrl_maps);
 	if (!locked)
-		mutex_unlock(&pinctrl_mutex);
+		mutex_unlock(&pinctrl_maps_mutex);
 
 	return 0;
 }
@@ -1047,14 +1060,17 @@ int pinctrl_register_mappings(struct pinctrl_map const *maps,
 void pinctrl_unregister_map(struct pinctrl_map const *map)
 {
 	struct pinctrl_maps *maps_node;
-
+	
+	mutex_lock(&pinctrl_maps_mutex);
 	list_for_each_entry(maps_node, &pinctrl_maps, node) {
 		if (maps_node->maps == map) {
 			list_del(&maps_node->node);
 			kfree(maps_node);
+			mutex_unlock(&pinctrl_maps_mutex);
 			return;
 		}
 	}
+	mutex_unlock(&pinctrl_maps_mutex);
 }
 
 #ifdef CONFIG_DEBUG_FS
@@ -1210,7 +1226,7 @@ static int pinctrl_maps_show(struct seq_file *s, void *what)
 
 	seq_puts(s, "Pinctrl maps:\n");
 
-	mutex_lock(&pinctrl_mutex);
+	mutex_lock(&pinctrl_maps_mutex);
 
 	for_each_maps(maps_node, i, map) {
 		seq_printf(s, "device %s\nstate %s\ntype %s (%d)\n",
@@ -1236,7 +1252,7 @@ static int pinctrl_maps_show(struct seq_file *s, void *what)
 		seq_printf(s, "\n");
 	}
 
-	mutex_unlock(&pinctrl_mutex);
+	mutex_unlock(&pinctrl_maps_mutex);
 
 	return 0;
 }
-- 
2.19.0

