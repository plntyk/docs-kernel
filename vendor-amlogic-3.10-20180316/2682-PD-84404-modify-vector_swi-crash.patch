From 4ddd8079e630d153f0b16c7b679f1a3c940e83c5 Mon Sep 17 00:00:00 2001
From: "shi.liu" <shi.liu@amlogic.com>
Date: Fri, 27 Dec 2013 10:07:22 +0800
Subject: [PATCH 2682/5965] PD:#84404:modify vector_swi crash

---
 arch/arm/mm/fault.c | 124 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 124 insertions(+)
 mode change 100644 => 100755 arch/arm/mm/fault.c

diff --git a/arch/arm/mm/fault.c b/arch/arm/mm/fault.c
old mode 100644
new mode 100755
index b835c9e3b770..4d36e39005b4
--- a/arch/arm/mm/fault.c
+++ b/arch/arm/mm/fault.c
@@ -56,6 +56,90 @@ static inline int notify_page_fault(struct pt_regs *regs, unsigned int fsr)
  * This is useful to dump out the page tables associated with
  * 'addr' in mm 'mm'.
  */
+int fixup_pte(struct mm_struct *mm, struct vm_area_struct *vma, unsigned long addr, unsigned int fsr)
+{
+	pgd_t *pgd;
+	struct page *page = NULL;
+	unsigned long time;
+	int ret = 1;
+
+	if (!mm)
+		mm = &init_mm;
+
+	printk(KERN_ALERT "pgd = %p\n", mm->pgd);
+	pgd = pgd_offset(mm, addr);
+	printk(KERN_ALERT "[%08lx] *pgd=%08llx",
+			addr, (long long)pgd_val(*pgd));
+
+	do {
+		pud_t *pud;
+		pmd_t *pmd;
+		pte_t *pte;
+		pte_t entry;
+		spinlock_t *ptl;
+
+		if (pgd_none(*pgd))
+			break;
+
+		if (pgd_bad(*pgd)) {
+			printk("(bad)");
+			break;
+		}
+
+		pud = pud_offset(pgd, addr);
+		if (PTRS_PER_PUD != 1)
+			printk(", *pud=%08llx", (long long)pud_val(*pud));
+
+		if (pud_none(*pud))
+			break;
+
+		if (pud_bad(*pud)) {
+			printk("(bad)");
+			break;
+		}
+
+		pmd = pmd_offset(pud, addr);
+		if (PTRS_PER_PMD != 1)
+			printk(", *pmd=%08llx", (long long)pmd_val(*pmd));
+
+		if (pmd_none(*pmd))
+			break;
+
+		if (pmd_bad(*pmd)) {
+			printk("(bad)");
+			break;
+		}
+
+		/* We must not map this if we have highmem enabled */
+		if (PageHighMem(pfn_to_page(pmd_val(*pmd) >> PAGE_SHIFT)))
+			break;
+		pte = pte_offset_map(pmd, addr);
+		printk(", *pte=%08llx", (long long)pte_val(*pte));
+#ifndef CONFIG_ARM_LPAE
+		printk(", *ppte=%08llx",
+		       (long long)pte_val(pte[PTE_HWTABLE_PTRS]));
+#endif
+		entry = *pte;
+		if(pte_present(entry) && !(fsr & FSR_WRITE) && (fsr_fs(fsr) == 7)){
+			ret = 0;
+			if(!pte_young(entry)){
+				ptl = pte_lockptr(mm, pmd);
+				spin_lock(ptl);
+
+				entry = pte_mkyoung(entry);
+				ptep_set_access_flags(vma, addr, pte, entry, 0);
+
+				pte_unmap_unlock(pte, ptl);
+				break;
+			}
+		}
+
+		pte_unmap(pte);
+	} while(0);
+	printk("\n");
+
+	return ret;
+}
 void show_pte(struct mm_struct *mm, unsigned long addr)
 {
 	pgd_t *pgd;
@@ -125,6 +209,8 @@ void show_pte(struct mm_struct *mm, unsigned long addr)
 { }
 #endif					/* CONFIG_MMU */
 
+static int __kprobes
+do_user_fault_inatomic(struct mm_struct *mm, unsigned long addr, unsigned int fsr);
 /*
  * Oops.  The kernel tried to access some page that wasn't present.
  */
@@ -132,12 +218,17 @@ static void
 __do_kernel_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr,
 		  struct pt_regs *regs)
 {
+	int ret;
+
 	/*
 	 * Are we prepared to handle this kernel fault?
 	 */
 	if (fixup_exception(regs))
 		return;
 
+	ret = do_user_fault_inatomic(mm, addr, fsr);
+	if(ret == 0)
+		return;
 	/*
 	 * No handler, we'll have to terminate things with extreme prejudice.
 	 */
@@ -220,6 +311,39 @@ static inline bool access_error(unsigned int fsr, struct vm_area_struct *vma)
 	return vma->vm_flags & mask ? false : true;
 }
 
+static int __kprobes
+do_user_fault_inatomic(struct mm_struct *mm, unsigned long addr, unsigned int fsr)
+{
+	struct vm_area_struct *vma;
+	int fault;
+
+	vma = find_vma(mm, addr);
+	fault = VM_FAULT_BADMAP;
+	if (unlikely(!vma))
+		goto out;
+	if (unlikely(vma->vm_start > addr))
+		goto check_stack;
+
+	/*
+	 * Ok, we have a good vm_area for this
+	 * memory access, so we can handle it.
+	 */
+good_area:
+	if (access_error(fsr, vma)) {
+		fault = VM_FAULT_BADACCESS;
+		goto out;
+	}
+
+	return fixup_pte(mm, vma, addr & PAGE_MASK, fsr);
+
+check_stack:
+	/* Don't allow expansion below FIRST_USER_ADDRESS */
+	if (vma->vm_flags & VM_GROWSDOWN &&
+	    addr >= FIRST_USER_ADDRESS && !expand_stack(vma, addr))
+		goto good_area;
+out:
+	return fault;
+}
 static int __kprobes
 __do_page_fault(struct mm_struct *mm, unsigned long addr, unsigned int fsr,
 		unsigned int flags, struct task_struct *tsk)
-- 
2.19.0

