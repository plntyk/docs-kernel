From c116532d3372a22275258f003fe5be4af6464957 Mon Sep 17 00:00:00 2001
From: xu xing <xing.xu@amlogic.com>
Date: Tue, 3 Dec 2013 18:38:20 +0800
Subject: [PATCH 2855/5965] Remove M6 build warning

---
 arch/arm/mach-meson6/gpio.c                | 14 ++++++++++++++
 arch/arm/mach-meson6/include/mach/nand.h   |  4 ++--
 arch/arm/mach-meson6/include/mach/system.h |  4 ++--
 arch/arm/mach-meson6/pm.c                  |  2 ++
 arch/arm/mach-meson6/usbclock.c            |  4 ++--
 drivers/amlogic/early_init/early_init.c    |  2 +-
 drivers/amlogic/gpio/gpio-amlogic.c        |  2 +-
 drivers/amlogic/of/lm.c                    |  3 ++-
 drivers/amlogic/pinctrl/pinctrl-amlogic.c  |  2 +-
 drivers/amlogic/secure/aes_api.c           |  8 +++-----
 drivers/amlogic/uart/uart/meson_uart.c     |  7 +++----
 11 files changed, 33 insertions(+), 19 deletions(-)
 mode change 100644 => 100755 arch/arm/mach-meson6/gpio.c
 mode change 100644 => 100755 arch/arm/mach-meson6/include/mach/nand.h
 mode change 100644 => 100755 arch/arm/mach-meson6/include/mach/system.h
 mode change 100644 => 100755 arch/arm/mach-meson6/pm.c
 mode change 100644 => 100755 arch/arm/mach-meson6/usbclock.c

diff --git a/arch/arm/mach-meson6/gpio.c b/arch/arm/mach-meson6/gpio.c
old mode 100644
new mode 100755
index 5e66b281e99d..16d4de3fa73b
--- a/arch/arm/mach-meson6/gpio.c
+++ b/arch/arm/mach-meson6/gpio.c
@@ -688,6 +688,20 @@ static int amlogic_gpio_probe(struct platform_device *pdev)
 	gpiochip_add(&amlogic_gpio_chip);
 	pullup_ops.meson_set_pullup=NULL;
 	dev_info(&pdev->dev, "Probed amlogic GPIO driver\n");
+#ifdef gpio_dump
+	int i;
+	for(i=0;i<GPIO_MAX;i++)
+		printk("%s,amlogic_pins[%d]=%d,%d,out en reg=%x,bit=%d,out val reg=%x,bit=%d,input reg=%x,bit=%d\n",
+		amlogic_pins[i].name,i,amlogic_pins[i].num,
+		gpio_amlogic_name_to_num(amlogic_pins[i].name),
+		(p_gpio_oen_addr[GPIO_REG(amlogic_pins[i].out_en_reg_bit)]&0xffff)>>2,
+		GPIO_BIT(amlogic_pins[i].out_en_reg_bit),
+		(p_gpio_output_addr[GPIO_REG(amlogic_pins[i].out_value_reg_bit)]&0xffff)>>2,
+		GPIO_BIT(amlogic_pins[i].out_value_reg_bit),
+		(p_gpio_input_addr[GPIO_REG(amlogic_pins[i].input_value_reg_bit)]&0xffff)>>2,
+		GPIO_BIT(amlogic_pins[i].input_value_reg_bit)
+	);
+#endif
 	return 0;
 }
 
diff --git a/arch/arm/mach-meson6/include/mach/nand.h b/arch/arm/mach-meson6/include/mach/nand.h
old mode 100644
new mode 100755
index b3d6b011f096..34fba9fd914c
--- a/arch/arm/mach-meson6/include/mach/nand.h
+++ b/arch/arm/mach-meson6/include/mach/nand.h
@@ -689,7 +689,7 @@ struct aml_nand_device {
 	struct notifier_block nb;
 };
 
-
+#if 0
 static pinmux_item_t nand_set_pins[] = {
     {
         .reg = PINMUX_REG(2),
@@ -728,7 +728,7 @@ static pinmux_set_t nand_clear = {
     .chip_select = nand_chip_select,
     .pinmux = &nand_clr_pins[0]
 };
-
+#endif
 extern void aml_pinmux_set(const char *name);
 extern void aml_pinmux_clr();
 static void inline  nand_get_chip(void )
diff --git a/arch/arm/mach-meson6/include/mach/system.h b/arch/arm/mach-meson6/include/mach/system.h
old mode 100644
new mode 100755
index 5fbd08418eff..4727558b2d8b
--- a/arch/arm/mach-meson6/include/mach/system.h
+++ b/arch/arm/mach-meson6/include/mach/system.h
@@ -33,13 +33,13 @@ static inline void arch_idle(void)
      */
     cpu_do_idle();
 }
-#define WATCHDOG_ENABLE_BIT  (1<<22)
+//#define WATCHDOG_ENABLE_BIT  (1<<22)
 #define  DUAL_CORE_RESET		  (3<<24)
 static inline void arch_reset(char mode, const char *cmd)
 {
     WRITE_MPEG_REG(VENC_VDAC_SETTING, 0xf);
     WRITE_MPEG_REG(WATCHDOG_RESET, 0);
-    WRITE_MPEG_REG(WATCHDOG_TC, DUAL_CORE_RESET| WATCHDOG_ENABLE_BIT | 100);
+    WRITE_MPEG_REG(WATCHDOG_TC, DUAL_CORE_RESET| (1<<WATCHDOG_ENABLE_BIT) | 100);
     while(1)
         arch_idle();
 }
diff --git a/arch/arm/mach-meson6/pm.c b/arch/arm/mach-meson6/pm.c
old mode 100644
new mode 100755
index 8e350caa5b4d..ae6c3b9cc089
--- a/arch/arm/mach-meson6/pm.c
+++ b/arch/arm/mach-meson6/pm.c
@@ -488,6 +488,7 @@ void early_clk_switch(int flag)
 }
 EXPORT_SYMBOL(early_clk_switch);
 #if 1
+#if 0
 #define PLL_COUNT 3
 //static char pll_flag[PLL_COUNT];
 static unsigned plls[PLL_COUNT] = {
@@ -503,6 +504,7 @@ static char plls_name[PLL_COUNT][32] = {
 //    "HHI_AUD_PLL_CNTL",
     "HHI_MPLL_CNTL",
 };
+#endif
 #define EARLY_PLL_COUNT 0
 static char early_pll_flag[EARLY_PLL_COUNT];
 static unsigned early_pll_settings[EARLY_PLL_COUNT][4];
diff --git a/arch/arm/mach-meson6/usbclock.c b/arch/arm/mach-meson6/usbclock.c
old mode 100644
new mode 100755
index 6fb1a3d21719..12472cbda80d
--- a/arch/arm/mach-meson6/usbclock.c
+++ b/arch/arm/mach-meson6/usbclock.c
@@ -55,7 +55,7 @@ int clk_enable_usb(struct clk *clk)
 	usb_peri_reg_t * peri_a,* peri_b,*peri;
 	usb_config_data_t config;
 	usb_ctrl_data_t control;
-	usb_dbg_uart_data_t uart;
+	//usb_dbg_uart_data_t uart;
 	int clk_sel,clk_div,clk_src;
 	int time_dly = 500; //usec
 	
@@ -138,7 +138,7 @@ int clk_disable_usb(struct clk *clk)
 {
 	char * clk_name;
 	usb_peri_reg_t * peri_a,* peri_b,*peri;
-	usb_dbg_uart_data_t uart;
+	//usb_dbg_uart_data_t uart;
 	
 	if(!clk)
 		return -1;
diff --git a/drivers/amlogic/early_init/early_init.c b/drivers/amlogic/early_init/early_init.c
index 5bac9a5d3d57..f9a4b98bf1fc 100755
--- a/drivers/amlogic/early_init/early_init.c
+++ b/drivers/amlogic/early_init/early_init.c
@@ -32,7 +32,7 @@
 
 static int early_init_dt_probe(struct platform_device *pdev)
 {
-	char *str;
+	const char *str;
 	int ret;
 	int pin;
 	printk("-------%s:%d----------\n",__func__,__LINE__);
diff --git a/drivers/amlogic/gpio/gpio-amlogic.c b/drivers/amlogic/gpio/gpio-amlogic.c
index a97d02512d0b..4c5ed4fd5db2 100755
--- a/drivers/amlogic/gpio/gpio-amlogic.c
+++ b/drivers/amlogic/gpio/gpio-amlogic.c
@@ -153,7 +153,7 @@ EXPORT_SYMBOL(amlogic_gpio_direction_output);
 const char * amlogic_cat_gpio_owner(unsigned int pin)
 {
 	if(gpio_range_check(pin))
-		return -1;
+		return NULL;
 	return amlogic_pins[pin].gpio_owner;
 }
 EXPORT_SYMBOL(amlogic_cat_gpio_owner);
diff --git a/drivers/amlogic/of/lm.c b/drivers/amlogic/of/lm.c
index ab54abae30b7..86def2b5ac75 100755
--- a/drivers/amlogic/of/lm.c
+++ b/drivers/amlogic/of/lm.c
@@ -123,7 +123,8 @@ static struct lm_device *of_lm_device_create(struct device_node *node,
 	struct lm_device *dev;
 	const void *prop;
 //	struct resource *res, temp_res;
-	int ret,id,irq;
+	//int ret,id,irq;
+	int ret,id;
 
 	pr_debug("Creating of lm device %s\n", node->full_name);
 	if (!of_device_is_available(node))
diff --git a/drivers/amlogic/pinctrl/pinctrl-amlogic.c b/drivers/amlogic/pinctrl/pinctrl-amlogic.c
index e4cb49656b03..61492896877f 100755
--- a/drivers/amlogic/pinctrl/pinctrl-amlogic.c
+++ b/drivers/amlogic/pinctrl/pinctrl-amlogic.c
@@ -203,7 +203,7 @@ static void amlogic_pmx_disable(struct pinctrl_dev *pctldev, unsigned selector,
 	int i;
 	struct amlogic_pin_group *pin_group=&apmx->soc->groups[group];
 	struct amlogic_reg_mask *setmask=pin_group->setmask;
-	struct amlogic_reg_mask *clrmask=pin_group->clearmask;
+	//struct amlogic_reg_mask *clrmask=pin_group->clearmask;
 #if 0
 	for(i=0;i<pin_group->num_clearmask;i++){
 		aml_set_reg32_mask(p_pin_mux_reg_addr[clrmask[i].reg],clrmask[i].mask);
diff --git a/drivers/amlogic/secure/aes_api.c b/drivers/amlogic/secure/aes_api.c
index 3754759f967c..6be603f77442 100755
--- a/drivers/amlogic/secure/aes_api.c
+++ b/drivers/amlogic/secure/aes_api.c
@@ -45,19 +45,17 @@ int do_aes_internal(unsigned char bEncryptFlag,unsigned char * pIN, int nINLen,
 {
 	int nRet = -1;
 	int nAESblkLen=16;
+	aes256_ctx_t ctx;
+	unsigned char blk_buf[64];	
+	int nLoadLen = nAESblkLen;
 	//check
 	if(!pIN || !nINLen || !pOUT || !pOUTLen)
 		return nRet;
 
 	//clear memory first?
 	memset(pOUT,0,nINLen);
-	
-	aes256_ctx_t ctx;
 	memset(&ctx,0,sizeof(ctx));	
-	unsigned char blk_buf[64];		
 	memcpy(ctx.key,g_AESkey,14*sizeof(aes_roundkey_t));	
-	
-	int nLoadLen = nAESblkLen;	
 	*pOUTLen = 0;
 	do{
 		memset(blk_buf,0,sizeof(blk_buf));
diff --git a/drivers/amlogic/uart/uart/meson_uart.c b/drivers/amlogic/uart/uart/meson_uart.c
index 94b48ad41e70..39ffe2ba506e 100755
--- a/drivers/amlogic/uart/uart/meson_uart.c
+++ b/drivers/amlogic/uart/uart/meson_uart.c
@@ -652,7 +652,6 @@ static void meson_uart_start_port(struct meson_uart_port *mup)
 
 	//tasklet_init(&mup->tlet, meson_uart_tasklet_action,
 	// (unsigned long)mup);
-	printk("P_AO_RTI_PIN_MUX_REG:%x\n",readl(P_AO_RTI_PIN_MUX_REG));
 	if(of_get_property(mup->pdev->dev.of_node, "pinctrl-names", NULL)){
 		mup->p=devm_pinctrl_get_select_default(&mup->pdev->dev);
 		if (IS_ERR(mup->p)){
@@ -660,8 +659,8 @@ static void meson_uart_start_port(struct meson_uart_port *mup)
 		}
 		/* set pinmux here */
 		printk("set %s pinmux use pinctrl subsystem\n",mup->aup->port_name[index]);
+		printk("P_AO_RTI_PIN_MUX_REG:%x\n",aml_read_reg32(P_AO_RTI_PIN_MUX_REG));
 	}
-	printk("P_AO_RTI_PIN_MUX_REG:%x\n",readl(P_AO_RTI_PIN_MUX_REG));
 	// need put pinctrl      
 	aml_set_reg32_mask((uint32_t)&uart->mode, UART_RXRST);
 	aml_clr_reg32_mask((uint32_t)&uart->mode, UART_RXRST);
@@ -911,7 +910,7 @@ static struct platform_device_id meson_uart_driver_ids[] = {
 	{},
 };
 MODULE_DEVICE_TABLE(platform, meson_uart_driver_ids);
-
+#if 0
 static struct ktermios meson_std_termios = {	
 	.c_iflag = ICRNL | IXON,
 	.c_oflag = OPOST | ONLCR,
@@ -922,7 +921,7 @@ static struct ktermios meson_std_termios = {
 	.c_ispeed = 115200,
 	.c_ospeed = 115200
 };
-
+#endif
 static struct uart_driver meson_uart_driver = {
 	.owner		= THIS_MODULE,
 	.driver_name	= "serial",
-- 
2.19.0

