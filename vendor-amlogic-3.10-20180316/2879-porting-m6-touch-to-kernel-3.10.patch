From 0d559957732d2984e37d48bc50f07922bdbaba08 Mon Sep 17 00:00:00 2001
From: "chunxue.yu" <chunxue.yu@amlogic.com>
Date: Wed, 11 Dec 2013 15:44:49 +0800
Subject: [PATCH 2879/5965] porting m6 touch to kernel 3.10

---
 .../input/touchscreen/ct36x_ts/amlchip.h      |   2 +-
 .../input/touchscreen/ct36x_ts/ct365.c        |  11 +-
 .../input/touchscreen/ct36x_ts/tscore.c       |  30 +--
 .../input/touchscreen/focaltech_5x06.c        | 106 ++++----
 .../amlogic/input/touchscreen/goodix_gt81xx.c | 234 +++++++++---------
 drivers/amlogic/input/touchscreen/gslx680.c   |  69 +++---
 6 files changed, 231 insertions(+), 221 deletions(-)

diff --git a/drivers/amlogic/input/touchscreen/ct36x_ts/amlchip.h b/drivers/amlogic/input/touchscreen/ct36x_ts/amlchip.h
index 687af8f28cd6..52acdd3decdc 100755
--- a/drivers/amlogic/input/touchscreen/ct36x_ts/amlchip.h
+++ b/drivers/amlogic/input/touchscreen/ct36x_ts/amlchip.h
@@ -19,7 +19,7 @@ void ct36x_platform_put_resource(struct ct36x_ts_info *ct36x_ts);
 void ct36x_platform_hw_reset(struct ct36x_ts_info *ct36x_ts);
 void ct36x_hw_reset(struct touch_pdata *pdata);
 void ct36x_upgrade_touch(void);
-void ct36x_late_upgrade(void);
+int ct36x_late_upgrade(void *p);
 void ct36x_read_version(char* ver);
 #else
 void ct36x_platform_hw_reset(struct ct36x_platform_data *pdata);
diff --git a/drivers/amlogic/input/touchscreen/ct36x_ts/ct365.c b/drivers/amlogic/input/touchscreen/ct36x_ts/ct365.c
index 8045afe4e307..b691a420f42a 100755
--- a/drivers/amlogic/input/touchscreen/ct36x_ts/ct365.c
+++ b/drivers/amlogic/input/touchscreen/ct36x_ts/ct365.c
@@ -179,7 +179,7 @@ static int ct36x_chip_write_firmware(struct i2c_client *client, unsigned char *b
 static int ct36x_chip_read_infoblk(struct i2c_client *client)
 {
 	unsigned char buf[20] = {0};
-	unsigned char i;
+//	unsigned char i;
 	if ( CT36X_TS_CHIP_DEBUG )
 	printk(">>>>> %s() called <<<<< \n", __FUNCTION__);
 
@@ -233,7 +233,7 @@ static int ct36x_chip_write_infoblk(struct i2c_client *client)
 {
 	//int ret = -1;
 	unsigned char buf[20]={0};
-	int sec, cod;
+	int cod;
 	unsigned int flash_addr;
 
 	if ( CT36X_TS_CHIP_DEBUG )
@@ -480,7 +480,7 @@ void ct36x_upgrade_touch(void)
 
 	while (offset < file_size) {
     touch_read_fw(offset, READ_COUNT, &tmp[0]);
-    i_ret = sscanf(&tmp[0],"0x%x,",binary_data + count);
+    i_ret = sscanf(&tmp[0],"0x%x,",(int *)(binary_data + count));
     if (i_ret == 1) {
 			count++;
 		}
@@ -536,7 +536,7 @@ void ct36x_upgrade_touch(void)
 	}
 }
 #ifdef LATE_UPGRADE
-void ct36x_late_upgrade(void)
+int ct36x_late_upgrade(void *p)
 {
 	int file_size;
 //	static int count;
@@ -555,7 +555,8 @@ void ct36x_late_upgrade(void)
 	ct36x_check_trim(ct36x_ts.client);
 #endif
 	enable_irq(ct36x_ts.irq);
-	do_exit(0);
+	//do_exit(0);
+	return 0;
 }
 #endif
 void ct36x_read_version(char* ver)
diff --git a/drivers/amlogic/input/touchscreen/ct36x_ts/tscore.c b/drivers/amlogic/input/touchscreen/ct36x_ts/tscore.c
index 3302fa1e8df1..85b4bce4405d 100755
--- a/drivers/amlogic/input/touchscreen/ct36x_ts/tscore.c
+++ b/drivers/amlogic/input/touchscreen/ct36x_ts/tscore.c
@@ -161,7 +161,7 @@ static ssize_t ct36x_ts_write(struct file *file, const char __user *buffer, size
 
 static ssize_t ct36x_ts_read(struct file *file, char __user *buf, size_t count, loff_t *offset)
 {
-	int err = -1;
+//	int err = -1;
 	
 	if ( CT36X_TS_CORE_DEBUG ) {
 	printk(">>>>> %s() called <<<<< \n", __FUNCTION__);
@@ -307,18 +307,18 @@ static void ct36x_ts_workfunc(struct work_struct *work)
 
 }
 
-static void ct36x_ts_adapter(int state)
-{
-	if ( CT36X_TS_CORE_DEBUG )
-	printk(">>>>> %s() called <<<<< \n", __FUNCTION__);
-
-	if ( ct36x_ts.state == CT36X_STATE_NORMAL ) {
-		if ( state )
-		ct36x_chip_set_adapter_on(ct36x_ts.client, ct36x_ts.data.buf);
-		else
-		ct36x_chip_set_adapter_off(ct36x_ts.client, ct36x_ts.data.buf);
-	}
-}
+//static void ct36x_ts_adapter(int state)
+//{
+//	if ( CT36X_TS_CORE_DEBUG )
+//	printk(">>>>> %s() called <<<<< \n", __FUNCTION__);
+//
+//	if ( ct36x_ts.state == CT36X_STATE_NORMAL ) {
+//		if ( state )
+//		ct36x_chip_set_adapter_on(ct36x_ts.client, ct36x_ts.data.buf);
+//		else
+//		ct36x_chip_set_adapter_off(ct36x_ts.client, ct36x_ts.data.buf);
+//	}
+//}
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static void ct36x_early_suspend(struct early_suspend *handler)
@@ -349,7 +349,7 @@ static void ct36x_early_resume(struct early_suspend *handler)
 int ct36x_ts_probe(struct i2c_client *client, const struct i2c_device_id *id)
 {
 	int err = -1;
-	int binchksum, fwchksum;
+	int binchksum;
 	int updcnt;
 	struct ct36x_ts_info *ts;
 	struct device *dev;
@@ -431,7 +431,7 @@ int ct36x_ts_probe(struct i2c_client *client, const struct i2c_device_id *id)
 
 	updcnt = 5;
 	while (updcnt--) {
-		if (ct36x_test_read(client, client->addr, &binchksum, 1) == 1) 
+		if (ct36x_test_read(client, client->addr, (char *)&binchksum, 1) == 1) 
 			break;
 	}
 	if (updcnt <= 0) {
diff --git a/drivers/amlogic/input/touchscreen/focaltech_5x06.c b/drivers/amlogic/input/touchscreen/focaltech_5x06.c
index 854505bb5440..4ccae1f86b8e 100755
--- a/drivers/amlogic/input/touchscreen/focaltech_5x06.c
+++ b/drivers/amlogic/input/touchscreen/focaltech_5x06.c
@@ -230,7 +230,7 @@ static int ft5x0x_read_reg(u8 addr, u8 *pdata)
 	int ret;
 	u8 buf[2] = {0};
 
-	buf[0] = addr;
+
 	struct i2c_msg msgs[] = {
 		{
 			.addr	= this_client->addr,
@@ -245,7 +245,7 @@ static int ft5x0x_read_reg(u8 addr, u8 *pdata)
 			.buf	= buf,
 		},
 	};
-
+	buf[0] = addr;
     //msleep(1);
 	ret = i2c_transfer(this_client->adapter, msgs, 2);
 	if (ret < 0)
@@ -317,42 +317,42 @@ Input	:	fw
 Output	:
 function	:	read fw size
 ***********************************************************************************************/
-static int touch_read_fw_Size(char *fw)
-{
-	char tmp[5];
-	int file_size, i, count=0;
-	u8 size[4];
-
-	file_size = touch_open_fw(fw);
-	if(file_size < 0)
-	{
-		printk("%s: no fw file\n", ts_com->owner);
-		return -1;
-	}
-
-	for (i=0; i<50; i++) {
-		touch_read_fw(file_size-5-i, 5, &tmp[0]);
-		if(sscanf(&tmp[0],"0x%c%c,",&size[0],&size[1]) == 2) {
-			count++;
-		}
-		if (count == 7) {
-			if (size[1] == ',')
-				sscanf(&tmp[0],"0x%x, ", (uint *)&size[3]);
-		   else
-				sscanf(&tmp[0],"0x%x,", (uint *)&size[3]);
-		}
-		if (count == 8) {
-			if (size[1] == ',')
-				sscanf(&tmp[0],"0x%x, ", (uint *)&size[4]);
-		   else
-				sscanf(&tmp[0],"0x%x,", (uint *)&size[4]);
-		}
-
-	}
-	touch_close_fw();
-	//printk("FWSize: 0x%x\n", size[4]<<8 | size[3]);
-	return size[4]<<8 | size[3];
-}
+//static int touch_read_fw_Size(char *fw)
+//{
+//	char tmp[5];
+//	int file_size, i, count=0;
+//	u8 size[4];
+//
+//	file_size = touch_open_fw(fw);
+//	if(file_size < 0)
+//	{
+//		printk("%s: no fw file\n", ts_com->owner);
+//		return -1;
+//	}
+//
+//	for (i=0; i<50; i++) {
+//		touch_read_fw(file_size-5-i, 5, &tmp[0]);
+//		if(sscanf(&tmp[0],"0x%c%c,",&size[0],&size[1]) == 2) {
+//			count++;
+//		}
+//		if (count == 7) {
+//			if (size[1] == ',')
+//				sscanf(&tmp[0],"0x%x, ", (uint *)&size[3]);
+//		   else
+//				sscanf(&tmp[0],"0x%x,", (uint *)&size[3]);
+//		}
+//		if (count == 8) {
+//			if (size[1] == ',')
+//				sscanf(&tmp[0],"0x%x, ", (uint *)&size[4]);
+//		   else
+//				sscanf(&tmp[0],"0x%x,", (uint *)&size[4]);
+//		}
+//
+//	}
+//	touch_close_fw();
+//	//printk("FWSize: 0x%x\n", size[4]<<8 | size[3]);
+//	return size[4]<<8 | size[3];
+//}
 
 #define CONFIG_FOCALTECH_TOUCHSCREEN_CODE_UPG
 
@@ -788,21 +788,21 @@ E_UPGRADE_ERR_TYPE fts_ctpm_fw_upgrade(void)
 
 
 
-static int is_tp_key(struct tp_key *tp_key, int key_num, int x, int y)
-{
-	int i;
-	
-	if (tp_key && key_num) {
-		for (i=0; i<key_num; i++) {
-			if ((x > tp_key->x1) && (x < tp_key->x2)
-			&& (y > tp_key->y1) && (y < tp_key->y2)) {
-				return tp_key->key;
-			}
-			tp_key++;
-		}
-	}
-	return 0;
-}
+//static int is_tp_key(struct tp_key *tp_key, int key_num, int x, int y)
+//{
+//	int i;
+//
+//	if (tp_key && key_num) {
+//		for (i=0; i<key_num; i++) {
+//			if ((x > tp_key->x1) && (x < tp_key->x2)
+//			&& (y > tp_key->y1) && (y < tp_key->y2)) {
+//				return tp_key->key;
+//			}
+//			tp_key++;
+//		}
+//	}
+//	return 0;
+//}
 
 #ifdef CONFIG_FOCALTECH_TOUCHSCREEN_CODE_UPG
 void fts_ctpm_fw_upgrade_with_i_file(void)
diff --git a/drivers/amlogic/input/touchscreen/goodix_gt81xx.c b/drivers/amlogic/input/touchscreen/goodix_gt81xx.c
index 6914856df326..ef03f28c6c1f 100755
--- a/drivers/amlogic/input/touchscreen/goodix_gt81xx.c
+++ b/drivers/amlogic/input/touchscreen/goodix_gt81xx.c
@@ -42,7 +42,7 @@ int g_enter_isp = 0;
 
 static struct workqueue_struct *goodix_wq;
 static struct i2c_client * i2c_connect_client = NULL;
-static struct proc_dir_entry *goodix_proc_entry;
+//static struct proc_dir_entry *goodix_proc_entry;
 static struct kobject *goodix_debug_kobj;
 
 /*******************************************************
@@ -152,6 +152,31 @@ static int goodix_init_panel(struct goodix_ts_data *ts)
 	uint8_t rd_cfg_buf[7] = {0x66,};
 	u32 offset = 0,count = 0;
 #ifdef DRIVER_SEND_CFG
+#ifdef CONFIG_OF
+	uint8_t *cfg_info_group1 = NULL;
+#else
+	uint8_t cfg_info_group1[] = {0x65,
+							0x03,0x04,0x00,0x03,0x00,0x0A,0x21,0x1E,0xE7,0x32,0x02,0x05,0x10,0x4C,0x4F,0x4F,
+							0x20,0x07,0x00,0x80,0x80,0x3C,0x5A,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,
+							0x05,0x04,0x03,0x02,0x01,0x00,0x1D,0x1C,0x1B,0x1A,0x19,0x18,0x17,0x16,0x15,0x14,
+							0x13,0x12,0x11,0x10,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+							0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+							0x00,0x00,0x00,0x00,0x00};
+#endif
+	uint8_t cfg_info_group2[] = {
+	//TODO puts your group2 config info here,if need.
+	};
+	uint8_t cfg_info_group3[] = {
+	//TODO puts your group3 config info here,if need.
+	};
+	uint8_t cfg_info_group4[] = {
+	//TODO puts your group4 config info here,if need.
+	};
+	uint8_t * send_cfg_buf[4] = {cfg_info_group1, cfg_info_group2, cfg_info_group3, cfg_info_group4};
+	uint8_t cfg_info_len[4] = {count,
+							   sizeof(cfg_info_group2)/sizeof(cfg_info_group2[0]),
+							   sizeof(cfg_info_group3)/sizeof(cfg_info_group3[0]),
+							   sizeof(cfg_info_group4)/sizeof(cfg_info_group4[0])};
 
 #ifdef CONFIG_OF
 	int file_size;
@@ -174,7 +199,7 @@ static int goodix_init_panel(struct goodix_ts_data *ts)
 
 	while (offset < file_size) {
     touch_read_fw(offset, READ_COUNT, &tmp[0]);
-    i_ret = sscanf(&tmp[0],"0x%x,",config_info + count);
+    i_ret = sscanf(&tmp[0],"0x%x,",(int *)(config_info + count));
     if (i_ret == 1) {
 			count++;
 		}
@@ -183,7 +208,7 @@ static int goodix_init_panel(struct goodix_ts_data *ts)
 
 	touch_close_fw();
 
-	uint8_t *cfg_info_group1 = config_info;
+	cfg_info_group1 = config_info;
 
 	printk("cfg_info_len1 = %d\n",count);
 //	int i=0;
@@ -191,39 +216,17 @@ static int goodix_init_panel(struct goodix_ts_data *ts)
 //		printk("%x ", cfg_info_group1[i]);
 //	}
 //	printk("\n");
-	
-#else
-	uint8_t cfg_info_group1[] = {0x65,
-							0x03,0x04,0x00,0x03,0x00,0x0A,0x21,0x1E,0xE7,0x32,0x02,0x05,0x10,0x4C,0x4F,0x4F,
-							0x20,0x07,0x00,0x80,0x80,0x3C,0x5A,0x0E,0x0D,0x0C,0x0B,0x0A,0x09,0x08,0x07,0x06,
-							0x05,0x04,0x03,0x02,0x01,0x00,0x1D,0x1C,0x1B,0x1A,0x19,0x18,0x17,0x16,0x15,0x14,
-							0x13,0x12,0x11,0x10,0x0F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-							0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
-							0x00,0x00,0x00,0x00,0x00};
-	count	= sizeof(cfg_info_group1)/sizeof(cfg_info_group1[0]);
-#endif
-	uint8_t cfg_info_group2[] = {
-	//TODO puts your group2 config info here,if need.
-	};
-	uint8_t cfg_info_group3[] = {
-	//TODO puts your group3 config info here,if need.
-	};
-	uint8_t cfg_info_group4[] = {
-	//TODO puts your group4 config info here,if need.
-	};
-
 	cfg_info_group1[2] = g_pdata->xres >> 8;
 	cfg_info_group1[3] = g_pdata->xres & 0xff;
 	cfg_info_group1[4] = g_pdata->yres >> 8;
 	cfg_info_group1[5] = g_pdata->yres & 0xff;
 	cfg_info_group1[6] = g_pdata->max_num;
 	cfg_info_group1[7] = (g_pdata->irq_edge & 0x1) | (cfg_info_group1[7] & ~0x03);
-
-	uint8_t * send_cfg_buf[4] = {cfg_info_group1, cfg_info_group2, cfg_info_group3, cfg_info_group4};
-	uint8_t cfg_info_len[4] = {count,
-							   sizeof(cfg_info_group2)/sizeof(cfg_info_group2[0]),
-							   sizeof(cfg_info_group3)/sizeof(cfg_info_group3[0]),
-							   sizeof(cfg_info_group4)/sizeof(cfg_info_group4[0])};
+	send_cfg_buf[0] = cfg_info_group1;
+#else
+	count	= sizeof(cfg_info_group1)/sizeof(cfg_info_group1[0]);
+#endif
+	cfg_info_len[0] = count;
 	printk("len1=%d,len2=%d,len3=%d,len4=%d\n", cfg_info_len[0],cfg_info_len[1],cfg_info_len[2],cfg_info_len[3]);
 	if((!cfg_info_len[1])&&(!cfg_info_len[2])&&(!cfg_info_len[3]))
 	{
@@ -519,13 +522,13 @@ Parameter:
 return:
 	Timer work mode. HRTIMER_NORESTART---not restart mode
 *******************************************************/
-static enum hrtimer_restart goodix_ts_timer_func(struct hrtimer *timer)
-{
-	struct goodix_ts_data *ts = container_of(timer, struct goodix_ts_data, timer);
-	queue_work(goodix_wq, &ts->work);
-	hrtimer_start(&ts->timer, ktime_set(0, (POLL_TIME+6)*1000000), HRTIMER_MODE_REL);
-	return HRTIMER_NORESTART;
-}
+//static enum hrtimer_restart goodix_ts_timer_func(struct hrtimer *timer)
+//{
+//	struct goodix_ts_data *ts = container_of(timer, struct goodix_ts_data, timer);
+//	queue_work(goodix_wq, &ts->work);
+//	hrtimer_start(&ts->timer, ktime_set(0, (POLL_TIME+6)*1000000), HRTIMER_MODE_REL);
+//	return HRTIMER_NORESTART;
+//}
 
 /*******************************************************
 Description:
@@ -677,70 +680,70 @@ Parameter:
 return:
 	Executive outcomes. 0---failed.
 *******************************************************/
-static ssize_t goodix_debug_diffdata_show(struct device *dev,
-			struct device_attribute *attr, char *buf)
-{
-	//char diff_data[300];
-	unsigned char diff_data[2241] = {00,};
-	int ret = -1;
-	char diff_data_cmd[2] = {80, 202};
-	int i;
-	int short_tmp;
-	struct goodix_ts_data *ts = i2c_get_clientdata(i2c_connect_client);
-//	int INT_PORT  = pdata->gpio_irq;
-
-
-	disable_irq(ts->client->irq);
-	//memset(diff_data, 0, sizeof(diff_data));
-	int_wakeup_green(ts, 0);
-	ret = i2c_write_bytes(ts->client, diff_data_cmd, 2);
-	if(ret != 1)
-	{
-		dev_info(&ts->client->dev, "Write diff data cmd failed!\n");
-		enable_irq(ts->client->irq);
-		return 0;
-	}
-
-#ifdef CONFIG_OF
-	aml_gpio_direction_input(g_pdata->gpio_interrupt);
-	while(aml_get_value(g_pdata->gpio_interrupt))
-#else
-	while(gpio_in_get(g_pdata->gpio_interrupt))
-#endif
-		msleep(1);
-	ret = i2c_read_bytes(ts->client, diff_data, sizeof(diff_data));
-	if(ret <= 0)
-	{
-		dev_info(&ts->client->dev, "Read diff data failed!\n");
-		enable_irq(ts->client->irq);
-		return 0;
-	}
-	for(i=1; i<sizeof(diff_data); i+=2)
-	{
-		short_tmp = diff_data[i] + (diff_data[i+1]<<8);
-		if(short_tmp&0x8000)
-			short_tmp -= 65535;
-		if(short_tmp == 512)continue;
-		sprintf(buf+strlen(buf)," %d",short_tmp);
-		//printk(" %d\n", short_tmp);
-	}
-
-	diff_data_cmd[1] = 0;
-	ret = i2c_write_bytes(ts->client, diff_data_cmd, 2);
-	if(ret != 1)
-	{
-		dev_info(&ts->client->dev, "Write diff data cmd failed!\n");
-		enable_irq(ts->client->irq);
-		return 0;
-	}
-	enable_irq(ts->client->irq);
-	/*for (i=0; i<1024; i++)
-	{
-		sprintf(buf+strlen(buf)," %d",i);
-	}*/
-
-	return strlen(buf);
-}
+//static ssize_t goodix_debug_diffdata_show(struct device *dev,
+//			struct device_attribute *attr, char *buf)
+//{
+//	//char diff_data[300];
+//	unsigned char diff_data[2241] = {00,};
+//	int ret = -1;
+//	char diff_data_cmd[2] = {80, 202};
+//	int i;
+//	int short_tmp;
+//	struct goodix_ts_data *ts = i2c_get_clientdata(i2c_connect_client);
+////	int INT_PORT  = pdata->gpio_irq;
+//
+//
+//	disable_irq(ts->client->irq);
+//	//memset(diff_data, 0, sizeof(diff_data));
+//	int_wakeup_green(ts, 0);
+//	ret = i2c_write_bytes(ts->client, diff_data_cmd, 2);
+//	if(ret != 1)
+//	{
+//		dev_info(&ts->client->dev, "Write diff data cmd failed!\n");
+//		enable_irq(ts->client->irq);
+//		return 0;
+//	}
+//
+//#ifdef CONFIG_OF
+//	aml_gpio_direction_input(g_pdata->gpio_interrupt);
+//	while(aml_get_value(g_pdata->gpio_interrupt))
+//#else
+//	while(gpio_in_get(g_pdata->gpio_interrupt))
+//#endif
+//		msleep(1);
+//	ret = i2c_read_bytes(ts->client, diff_data, sizeof(diff_data));
+//	if(ret <= 0)
+//	{
+//		dev_info(&ts->client->dev, "Read diff data failed!\n");
+//		enable_irq(ts->client->irq);
+//		return 0;
+//	}
+//	for(i=1; i<sizeof(diff_data); i+=2)
+//	{
+//		short_tmp = diff_data[i] + (diff_data[i+1]<<8);
+//		if(short_tmp&0x8000)
+//			short_tmp -= 65535;
+//		if(short_tmp == 512)continue;
+//		sprintf(buf+strlen(buf)," %d",short_tmp);
+//		//printk(" %d\n", short_tmp);
+//	}
+//
+//	diff_data_cmd[1] = 0;
+//	ret = i2c_write_bytes(ts->client, diff_data_cmd, 2);
+//	if(ret != 1)
+//	{
+//		dev_info(&ts->client->dev, "Write diff data cmd failed!\n");
+//		enable_irq(ts->client->irq);
+//		return 0;
+//	}
+//	enable_irq(ts->client->irq);
+//	/*for (i=0; i<1024; i++)
+//	{
+//		sprintf(buf+strlen(buf)," %d",i);
+//	}*/
+//
+//	return strlen(buf);
+//}
 
 
 /*******************************************************
@@ -782,7 +785,7 @@ static ssize_t goodix_debug_calibration_store(struct device *dev,
 
 static DEVICE_ATTR(version, S_IRUGO, goodix_debug_version_show, NULL);
 static DEVICE_ATTR(resolution, S_IRUGO, goodix_debug_resolution_show, NULL);
-static DEVICE_ATTR(diffdata, S_IRUGO, goodix_debug_diffdata_show, NULL);
+//static DEVICE_ATTR(diffdata, S_IRUGO, goodix_debug_diffdata_show, NULL);
 static DEVICE_ATTR(calibration, S_IWUSR , NULL, goodix_debug_calibration_store);
 
 
@@ -818,12 +821,12 @@ static int goodix_debug_sysfs_init(void)
 		printk(KERN_ERR "%s: sysfs_create_calibration_file failed\n", __func__);
 		return ret;
 	}
-	ret = sysfs_create_file(goodix_debug_kobj, &dev_attr_diffdata.attr);
-	if (ret)
-	{
-		printk(KERN_ERR "%s: sysfs_create_diffdata_file failed\n", __func__);
-		return ret;
-	}
+//	ret = sysfs_create_file(goodix_debug_kobj, &dev_attr_diffdata.attr);
+//	if (ret)
+//	{
+//		printk(KERN_ERR "%s: sysfs_create_diffdata_file failed\n", __func__);
+//		return ret;
+//	}
 	ret = sysfs_create_file(goodix_debug_kobj, &dev_attr_resolution.attr);
 	if (ret) {
 		printk(KERN_ERR "%s: sysfs_create_resolution_file failed\n", __func__);
@@ -837,7 +840,7 @@ static void goodix_debug_sysfs_deinit(void)
 {
 	sysfs_remove_file(goodix_debug_kobj, &dev_attr_version.attr);
 	sysfs_remove_file(goodix_debug_kobj, &dev_attr_resolution.attr);
-	sysfs_remove_file(goodix_debug_kobj, &dev_attr_diffdata.attr);
+//	sysfs_remove_file(goodix_debug_kobj, &dev_attr_diffdata.attr);
 	sysfs_remove_file(goodix_debug_kobj, &dev_attr_calibration.attr);
 	kobject_del(goodix_debug_kobj);
 }
@@ -913,7 +916,7 @@ static void gt81xx_upgrade_touch(void)
 	}
 }
 #ifdef LATE_UPGRADE
-static void gt81xx_late_upgrade(void)
+static int gt81xx_late_upgrade(void *p)
 {
 	int file_size;
 	struct goodix_ts_data *ts;
@@ -932,7 +935,8 @@ static void gt81xx_late_upgrade(void)
 	printk("%s :first load firmware\n", g_pdata->owner);
 	if(ts->use_irq)
 		enable_irq(i2c_connect_client->irq);
-	do_exit(0);
+	return 0;	
+	//do_exit(0);
 }
 #endif
 static int goodix_ts_probe(struct i2c_client *client, const struct i2c_device_id *id)
@@ -1024,7 +1028,7 @@ static int goodix_ts_probe(struct i2c_client *client, const struct i2c_device_id
 		goto err_i2c_failed;
 	}
 #ifdef LATE_UPGRADE
-	g_pdata->upgrade_task = kthread_run(gt81xx_late_upgrade, NULL, "gt81xx_late_upgrade");
+	g_pdata->upgrade_task = kthread_run(gt81xx_late_upgrade,(void *) NULL, "gt81xx_late_upgrade");
 	if (!g_pdata->upgrade_task) {
 		printk("%s creat upgrade process failed\n", __func__);
 		goto err_init_goodix_ts;
@@ -1127,7 +1131,7 @@ static int goodix_ts_probe(struct i2c_client *client, const struct i2c_device_id
 		}
 	}
 
-works_in_polling_mode:
+//works_in_polling_mode:
 
 	if (!ts->use_irq)
 	{
@@ -1185,7 +1189,7 @@ works_in_polling_mode:
 	create_init(client->dev, g_pdata);
 	return 0;
 
-err_create_proc_entry:
+//err_create_proc_entry:
 #ifdef CONFIG_HAS_EARLYSUSPEND
     unregister_early_suspend(&ts->early_suspend);
 #endif
@@ -1209,7 +1213,7 @@ err_i2c_failed:
 	kfree(ts);
 err_goodix_is_not_exist:
 	free_touch_gpio(g_pdata);
-err_alloc_data_failed:
+//err_alloc_data_failed:
 err_check_functionality_failed:
 	ts_com->owner = NULL;
 	return ret;
diff --git a/drivers/amlogic/input/touchscreen/gslx680.c b/drivers/amlogic/input/touchscreen/gslx680.c
index 0ca605d964a8..d4f767043b72 100755
--- a/drivers/amlogic/input/touchscreen/gslx680.c
+++ b/drivers/amlogic/input/touchscreen/gslx680.c
@@ -205,27 +205,27 @@ static inline u16 join_bytes(u8 a, u8 b)
 	return ab;
 }
 
-static u32 gsl_read_interface(struct i2c_client *client, u8 reg, u8 *buf, u32 num)
-{
-	struct i2c_msg xfer_msg[2];
-
-	xfer_msg[0].addr = client->addr;
-	xfer_msg[0].len = 1;
-	xfer_msg[0].flags = client->flags & I2C_M_TEN;
-	xfer_msg[0].buf = &reg;
-
-	xfer_msg[1].addr = client->addr;
-	xfer_msg[1].len = num;
-	xfer_msg[1].flags |= I2C_M_RD;
-	xfer_msg[1].buf = buf;
-
-	if (reg < 0x80) {
-		i2c_transfer(client->adapter, xfer_msg, ARRAY_SIZE(xfer_msg));
-		msleep(5);
-	}
-
-	return i2c_transfer(client->adapter, xfer_msg, ARRAY_SIZE(xfer_msg)) == ARRAY_SIZE(xfer_msg) ? 0 : -EFAULT;
-}
+//static u32 gsl_read_interface(struct i2c_client *client, u8 reg, u8 *buf, u32 num)
+//{
+//	struct i2c_msg xfer_msg[2];
+//
+//	xfer_msg[0].addr = client->addr;
+//	xfer_msg[0].len = 1;
+//	xfer_msg[0].flags = client->flags & I2C_M_TEN;
+//	xfer_msg[0].buf = &reg;
+//
+//	xfer_msg[1].addr = client->addr;
+//	xfer_msg[1].len = num;
+//	xfer_msg[1].flags |= I2C_M_RD;
+//	xfer_msg[1].buf = buf;
+//
+//	if (reg < 0x80) {
+//		i2c_transfer(client->adapter, xfer_msg, ARRAY_SIZE(xfer_msg));
+//		msleep(5);
+//	}
+//
+//	return i2c_transfer(client->adapter, xfer_msg, ARRAY_SIZE(xfer_msg)) == ARRAY_SIZE(xfer_msg) ? 0 : -EFAULT;
+//}
 
 static u32 gsl_write_interface(struct i2c_client *client, const u8 reg, u8 *buf, u32 num)
 {
@@ -281,7 +281,7 @@ static void gsl_load_fw(struct i2c_client *client)
 		while (send_flag < DMA_TRANS_LEN+1) {
 			if (offset >= file_size) break;
 			touch_read_fw(offset, READ_COUNT, &tmp[0]);
-			ret = sscanf(&tmp[0],"{0x%x,0x%lx},",&(fw_d->offset),&(fw_d->val));
+			ret = sscanf(&tmp[0],"{0x%x,0x%lx},",(int *)&(fw_d->offset),(long *)&(fw_d->val));
 			if (ret != 2) {
 				offset ++;
 				continue;
@@ -608,6 +608,7 @@ static void filter_point(u16 x, u16 y , u8 id)
 }
 #endif
 
+#ifndef FILTER_POINT
 static void record_point(u16 x, u16 y , u8 id)
 {
 	u16 x_err =0;
@@ -660,7 +661,7 @@ static void record_point(u16 x, u16 y , u8 id)
 	}
 	
 }
-
+#endif
 #ifdef HAVE_TOUCH_KEY
 static void report_key(struct gsl_ts *ts, u16 x, u16 y)
 {
@@ -904,7 +905,7 @@ static void gsl_timer_handle(unsigned long data)
 static int gsl_ts_init_ts(struct i2c_client *client, struct gsl_ts *ts)
 {
 	struct input_dev *input_device;
-	int i, rc = 0;
+	int rc = 0;
 	
 	printk("[GSLX680] Enter %s\n", __func__);
 
@@ -1010,8 +1011,8 @@ static void do_download(struct work_struct *work)
 
 static int gsl_ts_suspend(struct i2c_client *client, pm_message_t mesg)
 {
-	struct gsl_ts *ts = dev_get_drvdata(&(client->dev));
-	int rc = 0;
+//	struct gsl_ts *ts = dev_get_drvdata(&(client->dev));
+//	int rc = 0;
 
 	//printk("gsl1680 call func start%s\n", __func__);
 		   
@@ -1025,7 +1026,7 @@ static int gsl_ts_suspend(struct i2c_client *client, pm_message_t mesg)
 static int gsl_ts_resume(struct i2c_client *client)
 {
 	struct gsl_ts *ts = dev_get_drvdata(&(client->dev));
-	int rc = 0;
+//	int rc = 0;
 
   	//printk("gsl1680 call func start%s\n", __func__);
 	
@@ -1056,10 +1057,13 @@ static void gsl_ts_early_suspend(struct early_suspend *h)
 static void gsl_ts_late_resume(struct early_suspend *h)
 {
 	struct gsl_ts *ts = container_of(h, struct gsl_ts, early_suspend);
-	printk("gsl1680 call func start%s\n", __func__);
 	int need_delay = 0;
+	printk("gsl1680 call func start%s\n", __func__);
 	if (ts->dl_fw) {
-		down_interruptible(&ts->fw_sema);
+		if (down_interruptible(&ts->fw_sema))
+		{
+			printk("fail get fw_sema!\n");
+		}
 		ts->dl_fw = 0;
 		need_delay = 1;
 	} else {
@@ -1095,7 +1099,7 @@ static void gslx680_upgrade_touch(void)
 }
 
 #ifdef LATE_UPGRADE
-static void gslx680_late_upgrade(void)
+static int gslx680_late_upgrade(void *p)
 {
 	int file_size;
 //static int count;
@@ -1111,7 +1115,8 @@ static void gslx680_late_upgrade(void)
 	gslx680_upgrade_touch();
 	printk("%s first load firmware\n", g_pdata->owner);
 	enable_irq(this_client->irq);
-	do_exit(0);
+	//do_exit(0);
+	return 0;
 }
 #endif
 static void gslx680_test_i2c(char *ver)
@@ -1125,7 +1130,7 @@ static int gsl_ts_probe(struct i2c_client *client,
 			const struct i2c_device_id *id)
 {
 	struct gsl_ts *ts;
-	int rc;
+	int rc = 0;
 
 	printk("GSLX680 Enter %s\n", __func__);
 	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
-- 
2.19.0

