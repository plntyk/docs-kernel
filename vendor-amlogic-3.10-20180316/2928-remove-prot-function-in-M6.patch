From 268b03d957778a8e33b9fec790935fda062ff802 Mon Sep 17 00:00:00 2001
From: "shuai.cao" <shuai.cao@amlogic.com>
Date: Tue, 7 Jan 2014 16:43:31 +0800
Subject: [PATCH 2928/5965] remove prot function in M6

Conflicts:

	drivers/amlogic/amports/video.c
---
 arch/arm/configs/meson6_defconfig    |  2 +-
 drivers/amlogic/amports/video.c      | 31 +++++++++++++++++++-----
 drivers/amlogic/amports/video_prot.c |  2 ++
 drivers/amlogic/amports/vpp.c        | 36 ++++++++++------------------
 drivers/amlogic/ppmgr/ppmgr_drv.c    |  4 ++++
 5 files changed, 45 insertions(+), 30 deletions(-)

diff --git a/arch/arm/configs/meson6_defconfig b/arch/arm/configs/meson6_defconfig
index 722fcfa752a5..127816dfa471 100755
--- a/arch/arm/configs/meson6_defconfig
+++ b/arch/arm/configs/meson6_defconfig
@@ -129,7 +129,7 @@ CONFIG_IP6_NF_TARGET_NPT=y
 CONFIG_BRIDGE=y
 # CONFIG_BRIDGE_IGMP_SNOOPING is not set
 CONFIG_VSYNC_RDMA=y
-#CONFIG_AM_VIDEO=y
+CONFIG_AM_VIDEO=y
 CONFIG_FB_AM=y
 CONFIG_FB_OSD2_CURSOR=y
 CONFIG_AM_GE2D=y
diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 8b926622ee9f..2436ddb188c0 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -387,14 +387,16 @@ static int content_top = 0, content_left = 0, content_w = 0, content_h = 0;
 static int scaler_pos_changed = 0;
 #endif
 
-static u32 use_prot = 0;
 static video_prot_t video_prot;
 static u32 video_angle = 0;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+static u32 use_prot = 0;
 u32 get_prot_status(void) { return video_prot.status; }
 EXPORT_SYMBOL(get_prot_status);
 u32 get_video_angle(void) { return video_angle; }
 EXPORT_SYMBOL(get_video_angle);
 extern void prot_get_parameter(u32 wide_mode, vframe_t * vf, vpp_frame_par_t * next_frame_par, const vinfo_t *vinfo);
+#endif
 
 #ifdef CONFIG_AM_VIDEO2
 void set_clone_frame_rate(unsigned int frame_rate, unsigned int delay);
@@ -867,9 +869,11 @@ static void vsync_toggle_frame(vframe_t *vf)
     u32 first_picture = 0;
     unsigned long flags;
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     if (use_prot) {
         video_prot_revert_vframe(&video_prot, vf);
     }
+#endif
     frame_count++;
     if(debug_flag& DEBUG_FLAG_PRINT_TOGGLE_FRAME){
         printk("%s()\n", __func__);
@@ -986,13 +990,14 @@ static void vsync_toggle_frame(vframe_t *vf)
 	VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0, disp_canvas[rdma_canvas_id][1]);
 	VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1, disp_canvas[rdma_canvas_id][1]);
         next_rdma_canvas_id = rdma_canvas_id?0:1;
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
         if (use_prot && video_prot.status) {
              VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, disp_canvas[rdma_canvas_id][0] & 0xff, 0, 8);
              if (!(vf->type & VIDTYPE_VIU_444)) {
                  VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, (disp_canvas[rdma_canvas_id][0] >> 8) & 0xff, 0, 8);
              }
         }
+#endif
 #else
         canvas_copy(vf->canvas0Addr & 0xff, disp_canvas_index[0]);
         canvas_copy((vf->canvas0Addr >> 8) & 0xff, disp_canvas_index[1]);
@@ -1005,13 +1010,14 @@ static void vsync_toggle_frame(vframe_t *vf)
         VSYNC_WR_MPEG_REG(VD1_IF0_CANVAS1 + cur_dev->viu_off, disp_canvas[0]);
         VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0, disp_canvas[1]);
         VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1, disp_canvas[1]);
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
         if (use_prot && video_prot.status) {
              VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, disp_canvas_index[0], 0, 8);
              if (!(vf->type & VIDTYPE_VIU_444)) {
                  VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, disp_canvas_index[1], 0, 8);
              }
         }
+#endif
 #endif
     }
     /* set video PTS */
@@ -1067,12 +1073,15 @@ static void vsync_toggle_frame(vframe_t *vf)
                    vf->ratio_control);
         next_frame_par = (&frame_parms[0] == next_frame_par) ?
                          &frame_parms[1] : &frame_parms[0];
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
         if (use_prot && video_prot.status) {
             static vpp_frame_par_t prot_parms;
             prot_get_parameter(wide_setting, vf, &prot_parms, vinfo);
             video_prot_axis(&video_prot, prot_parms.VPP_hd_start_lines_, prot_parms.VPP_hd_end_lines_, prot_parms.VPP_vd_start_lines_, prot_parms.VPP_vd_end_lines_);
         }
+#endif
         vpp_set_filters(wide_setting, vf, next_frame_par, vinfo);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
         if (use_prot && video_prot.status) {
             u32 tmp_line_in_length_ = next_frame_par->VPP_hd_end_lines_ - next_frame_par->VPP_hd_start_lines_ + 1;
             u32 tmp_pic_in_height_ = next_frame_par->VPP_vd_end_lines_ - next_frame_par->VPP_vd_start_lines_ + 1;
@@ -1089,6 +1098,7 @@ static void vsync_toggle_frame(vframe_t *vf)
                 next_frame_par->VPP_vd_end_lines_ = tmp_pic_in_height_ - 1;
             }
         }
+#endif
         /* apply new vpp settings */
         frame_par_ready_to_set = 1;
 
@@ -1159,11 +1169,12 @@ static void viu_set_dcu(vpp_frame_par_t *frame_par, vframe_t *vf)
             r |= VDIF_FORMAT_RGB888_YUV444 | VDIF_DEMUX_MODE_RGB_444;
         }
     }
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     if (video_prot.status && use_prot) {
         r |= VDIF_DEMUX_MODE | VDIF_LAST_LINE | 3 << VDIF_BURSTSIZE_Y_BIT | 1 << VDIF_BURSTSIZE_CB_BIT | 1 << VDIF_BURSTSIZE_CR_BIT;
         r &= 0xffffffbf;
     }
-
+#endif
     if (frame_par->hscale_skip_count) {
         r |= VDIF_CHROMA_HZ_AVG | VDIF_LUMA_HZ_AVG;
     }
@@ -1177,6 +1188,7 @@ static void viu_set_dcu(vpp_frame_par_t *frame_par, vframe_t *vf)
     } else {
         VSYNC_WR_MPEG_REG_BITS(VD1_IF0_GEN_REG2 + cur_dev->viu_off, 0,0,1);
     }
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     if (use_prot) {
         if (video_prot.angle == 2) {
             VSYNC_WR_MPEG_REG_BITS(VD1_IF0_GEN_REG2 + cur_dev->viu_off, 0xf, 2, 4);
@@ -1184,6 +1196,7 @@ static void viu_set_dcu(vpp_frame_par_t *frame_par, vframe_t *vf)
             VSYNC_WR_MPEG_REG_BITS(VD1_IF0_GEN_REG2 + cur_dev->viu_off, 0, 2, 4);
         }
     }
+#endif
 #endif
 
     /* chroma formatter */
@@ -1250,13 +1263,13 @@ static void viu_set_dcu(vpp_frame_par_t *frame_par, vframe_t *vf)
                        (((vf->type & VIDTYPE_VIU_422) ? 0x10 : 0x08) << VFORMATTER_PHASE_BIT) |
                        VFORMATTER_EN);
     }
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     if (video_prot.status && use_prot) {
         VSYNC_WR_MPEG_REG_BITS(VIU_VD1_FMT_CTRL + cur_dev->viu_off, 0, VFORMATTER_INIPHASE_BIT, 4);
         VSYNC_WR_MPEG_REG_BITS(VIU_VD1_FMT_CTRL + cur_dev->viu_off, 0, 16, 1);
         VSYNC_WR_MPEG_REG_BITS(VIU_VD1_FMT_CTRL + cur_dev->viu_off, 1, 17, 1);
     }
-
+#endif
     /* LOOP/SKIP pattern */
     pat = vpat[frame_par->vscale_skip_count];
 
@@ -1892,6 +1905,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
         dispbuf_to_put_num = 0;
     }
 #endif
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     if (use_prot) {
         if (video_prot.power_down) {
             video_prot_set_angle(&video_prot, 0);
@@ -1909,6 +1923,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
             video_property_changed = 1;
         }
     }
+#endif
     if (osd_prov && osd_prov->ops && osd_prov->ops->get){
         vf = osd_prov->ops->get(osd_prov->op_arg);
         if(vf){
@@ -1984,6 +1999,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
             vf = video_vf_get();
             if (!vf) break;
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
             use_prot = get_use_prot();
             if (use_prot && (video_prot.video_started || video_prot.src_vframe_width != vf->width || video_prot.src_vframe_height != vf->height)) {
                 video_prot_init(&video_prot, vf);
@@ -1995,6 +2011,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
                 PROT_MEM_POWER_OFF();
                 video_property_changed = true;
             }
+#endif
             force_blackout = 0;
 
 #ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
@@ -2053,6 +2070,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
                 vf = video_vf_get();
                 if (!vf) break;
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
                 use_prot = get_use_prot();
                 if (use_prot && (video_prot.video_started || video_prot.src_vframe_width != vf->width || video_prot.src_vframe_height != vf->height)) {
                     video_prot_init(&video_prot, vf);
@@ -2064,6 +2082,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
                     PROT_MEM_POWER_OFF();
                     video_property_changed = true;
                 }
+#endif
                 vsync_toggle_frame(vf);
                 frame_repeat_count = 0;
 
diff --git a/drivers/amlogic/amports/video_prot.c b/drivers/amlogic/amports/video_prot.c
index 1855d02f8054..ed1b7b87c8c4 100755
--- a/drivers/amlogic/amports/video_prot.c
+++ b/drivers/amlogic/amports/video_prot.c
@@ -239,6 +239,7 @@ void video_prot_revert_vframe(video_prot_t* video_prot, vframe_t *vf) {
                 vf->ratio_control &= ~DISP_RATIO_ASPECT_RATIO_MASK;
                 vf->ratio_control |= (0x10000 / video_prot->src_vframe_ratio) << DISP_RATIO_ASPECT_RATIO_BIT;
             }
+            vf->ratio_control |= DISP_RATIO_PORTRAIT_MODE;
         } else if (angle_orientation == 0 || angle_orientation == 2) {
             vf->width = video_prot->src_vframe_width;
             vf->height = video_prot->src_vframe_height;
@@ -246,6 +247,7 @@ void video_prot_revert_vframe(video_prot_t* video_prot, vframe_t *vf) {
                 vf->ratio_control &= ~DISP_RATIO_ASPECT_RATIO_MASK;
                 vf->ratio_control |= video_prot->src_vframe_ratio << DISP_RATIO_ASPECT_RATIO_BIT;
             }
+            vf->ratio_control &= ~DISP_RATIO_PORTRAIT_MODE;
         }
     }
 }
diff --git a/drivers/amlogic/amports/vpp.c b/drivers/amlogic/amports/vpp.c
index b1f365f2d95f..9a7e2267fc48 100755
--- a/drivers/amlogic/amports/vpp.c
+++ b/drivers/amlogic/amports/vpp.c
@@ -29,9 +29,9 @@
 #include <linux/amlogic/amports/vframe.h>
 #include "video.h"
 #include "vpp.h"
-#include <linux/amlogic/amports/video_prot.h>
 
 #include <linux/amlogic/amports/vframe_provider.h>
+#include <linux/amlogic/amports/video_prot.h>
 
 #ifdef CONFIG_AM_DEINTERLACE
 #include "deinterlace.h"
@@ -371,31 +371,17 @@ RESTART:
 
     /* keep 8 bits resolution for aspect conversion */
     if (wide_mode == VIDEO_WIDEOPTION_4_3) {
-        if (get_prot_status()) {
-            if(vpp_flags & VPP_FLAG_PORTRAIT_MODE)
-                aspect_factor = 0xc0;
-            else
-                aspect_factor = 0x155;
-        } else {
-            if(vpp_flags & VPP_FLAG_PORTRAIT_MODE)
-                aspect_factor = 0x155;
-            else
-                aspect_factor = 0xc0;
-        }
+        if (vpp_flags & VPP_FLAG_PORTRAIT_MODE)
+            aspect_factor = 0x155;
+        else
+            aspect_factor = 0xc0;
         wide_mode = VIDEO_WIDEOPTION_NORMAL;
     }
     else if (wide_mode == VIDEO_WIDEOPTION_16_9) {
-        if (get_prot_status()) {
-            if(vpp_flags & VPP_FLAG_PORTRAIT_MODE)
-                aspect_factor = 0x90;
-            else
-                aspect_factor = 0x1c7;
-        } else {
-            if(vpp_flags & VPP_FLAG_PORTRAIT_MODE)
-                aspect_factor = 0x1c7;
-            else
-                aspect_factor = 0x90;
-        }
+        if (vpp_flags & VPP_FLAG_PORTRAIT_MODE)
+            aspect_factor = 0x1c7;
+        else
+            aspect_factor = 0x90;
         wide_mode = VIDEO_WIDEOPTION_NORMAL;
     }
 
@@ -681,6 +667,7 @@ RESTART:
     }
 
     next_frame_par->VPP_hf_ini_phase_ = vpp_zoom_center_x & 0xff;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     if (get_prot_status()){
         s32 tmp_height = (((s32)next_frame_par->VPP_vd_end_lines_ + 1) << 18) / tmp_ratio_y;
         s32 tmp_top = 0;
@@ -716,6 +703,7 @@ RESTART:
         //printk("vf2 %d %d %d %d\n", next_frame_par->VPP_hd_start_lines_, next_frame_par->VPP_hd_end_lines_,
         //        next_frame_par->VPP_vd_start_lines_, next_frame_par->VPP_vd_end_lines_);
     }
+#endif
 }
 
 void
@@ -787,6 +775,7 @@ vpp_set_filters(u32 wide_mode,
     vpp_set_filters2(src_width, src_height, vinfo, vpp_flags, next_frame_par);
 }
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 void
 prot_get_parameter(u32 wide_mode,
                 vframe_t *vf,
@@ -855,6 +844,7 @@ prot_get_parameter(u32 wide_mode,
 
     vpp_set_filters2(src_width, src_height, vinfo, vpp_flags, next_frame_par);
 }
+#endif
 
 void vpp_set_osd_layer_preblend(u32 *enable)
 {
diff --git a/drivers/amlogic/ppmgr/ppmgr_drv.c b/drivers/amlogic/ppmgr/ppmgr_drv.c
index 28e664107c35..b65f57260d66 100755
--- a/drivers/amlogic/ppmgr/ppmgr_drv.c
+++ b/drivers/amlogic/ppmgr/ppmgr_drv.c
@@ -1139,7 +1139,11 @@ int  init_ppmgr_device(void)
     if(ppmgr_buffer_init(0) < 0) goto unregister_dev;
     //if(start_vpp_task()<0) return -1;
     ppmgr_device.use_prot = 1;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     ppmgr_device.disable_prot = 0;
+#else
+    ppmgr_device.disable_prot = 1;
+#endif
     ppmgr_device.global_angle = 0;
     ppmgr_device.started = 0;
     return 0;
-- 
2.19.0

