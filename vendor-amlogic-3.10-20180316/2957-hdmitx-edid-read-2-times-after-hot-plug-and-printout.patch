From 712f8926e3115a88e345e1f4b29a6442362560c7 Mon Sep 17 00:00:00 2001
From: Zongdong Jiao <zongdong.jiao@amlogic.com>
Date: Fri, 10 Jan 2014 13:41:40 +0800
Subject: [PATCH 2957/5965] hdmitx: edid: read 2 times after hot-plug and
 printout

---
 arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c  | 47 ++++++----
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c        | 67 +++++++++++---
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_edid.c   | 88 +++++++++++++++++++
 .../linux/amlogic/hdmi_tx/hdmi_tx_module.h    |  7 +-
 4 files changed, 180 insertions(+), 29 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
index c6949c522250..46ed75ddc1e4 100644
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
@@ -162,11 +162,9 @@ static irqreturn_t intr_handler(int irq, void *dev_instance)
         // If HPD asserts, then start DDC transaction
         if (hdmi_rd_reg(TX_HDCP_ST_EDID_STATUS) & (1<<1)) {
             // Start DDC transaction
-            hdmi_wr_reg(TX_HDCP_EDID_CONFIG, hdmi_rd_reg(TX_HDCP_EDID_CONFIG) & (~(1<<6))); // Assert sys_trigger_config
             hdmitx_device->cur_edid_block=0;
             hdmitx_device->cur_phy_block_ptr=0;
             hdmitx_device->hpd_event = 1;
-            hdmi_wr_reg(TX_HDCP_EDID_CONFIG, hdmi_rd_reg(TX_HDCP_EDID_CONFIG) | (1<<6)); // Assert sys_trigger_config
         // Error if HPD deasserts
         } else {
             hdmi_print(ERR, HPD "HPD deasserts!\n");
@@ -1537,7 +1535,7 @@ static void hdmi_hw_reset(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t *par
     //tmp_add_data[1]   = 8'b0 ;  //forced_vsync_polarity 
     //tmp_add_data[0]   = 8'b0 ;  //forced_hsync_polarity
     tmp_add_data = 0x40;
-    hdmi_wr_reg(TX_HDCP_MODE, (hdmi_rd_reg(TX_HDCP_MODE) | tmp_add_data)&0xf0);
+    hdmi_wr_reg(TX_HDCP_MODE, tmp_add_data);
 
     if(param->cc == CC_ITU709){
         hdmi_wr_reg(TX_VIDEO_CSC_COEFF_B0, 0x7b);
@@ -1835,7 +1833,7 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t
         param->color_depth = COLOR_36BIT;
     else if(color_depth_f==48)
         param->color_depth = COLOR_48BIT;
-    hdmi_print(1,"set mode VIC %d (cd%d,cs%d,pm%d,vd%d,%x) \n",param->VIC, color_depth_f, color_space_f,power_mode,power_off_vdac_flag,serial_reg_val);
+    hdmi_print(INF, SYS "set mode VIC %d (cd%d,cs%d,pm%d,vd%d,%x) \n",param->VIC, color_depth_f, color_space_f,power_mode,power_off_vdac_flag,serial_reg_val);
     if(color_space_f != 0){
         param->color = color_space_f;
     }
@@ -2750,18 +2748,32 @@ static void hdmitx_debug(hdmitx_dev_t* hdmitx_device, const char* buf)
     }
 }
 
-static void hdmitx_getediddata(hdmitx_dev_t* hdmitx_device)
+static void hdmitx_getediddata(hdmitx_dev_t* hdmitx_device, unsigned int blk_idx)
 {
     int ii, jj;
+
     if((hdmitx_device->cur_edid_block+2)<=EDID_MAX_BLOCK){
-        for(jj=0;jj<2;jj++){
-            for(ii=0;ii<128;ii++){
-                hdmitx_device->EDID_buf[hdmitx_device->cur_edid_block*128+ii]
-                    =hdmi_rd_reg(TX_RX_EDID_OFFSET+hdmitx_device->cur_phy_block_ptr*128+ii);
+        if(blk_idx == 0) {
+            for(jj=0;jj<2;jj++){
+                for(ii=0;ii<128;ii++){
+                    hdmitx_device->EDID_buf[hdmitx_device->cur_edid_block*128+ii]
+                        =hdmi_rd_reg(TX_RX_EDID_OFFSET+hdmitx_device->cur_phy_block_ptr*128+ii);
+                }
+                hdmitx_device->cur_edid_block++;
+                hdmitx_device->cur_phy_block_ptr++;
+                hdmitx_device->cur_phy_block_ptr=hdmitx_device->cur_phy_block_ptr&0x3;
+            }
+        }
+        else {
+            for(jj=0;jj<2;jj++){
+                for(ii=0;ii<128;ii++){
+                    hdmitx_device->EDID_buf1[hdmitx_device->cur_edid_block*128+ii]
+                        =hdmi_rd_reg(TX_RX_EDID_OFFSET+hdmitx_device->cur_phy_block_ptr*128+ii);
+                }
+                hdmitx_device->cur_edid_block++;
+                hdmitx_device->cur_phy_block_ptr++;
+                hdmitx_device->cur_phy_block_ptr=hdmitx_device->cur_phy_block_ptr&0x3;
             }
-            hdmitx_device->cur_edid_block++;
-            hdmitx_device->cur_phy_block_ptr++;
-            hdmitx_device->cur_phy_block_ptr=hdmitx_device->cur_phy_block_ptr&0x3;
         }
     }
 }    
@@ -2778,6 +2790,7 @@ static int hdmitx_cntl_ddc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned a
 
     switch(cmd) {
     case DDC_RESET_EDID:
+        hdmi_set_reg_bits(TX_HDCP_EDID_CONFIG, 0, 6, 1);
         hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 1, 1, 1);
         hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 0, 1, 1);
         break;
@@ -2788,7 +2801,7 @@ static int hdmitx_cntl_ddc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned a
         hdmi_set_reg_bits(TX_HDCP_EDID_CONFIG, 1, 6, 1);     // Assert sys_trigger_config
         break;
     case DDC_EDID_GET_DATA:
-        hdmitx_getediddata(hdmitx_device);
+        hdmitx_getediddata(hdmitx_device, argv);
         break;
     case DDC_PIN_MUX_OP:
         if(argv == PIN_MUX) {
@@ -2882,10 +2895,14 @@ static int hdmitx_cntl_config(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigne
         break;
     case CONF_VIDEO_BLANK_OP:
         if(argv == VIDEO_BLANK) {
-//            aml_write_reg32(P_VPU_HDMI_DATA_OVR, (0x1 << 31));    // todo
+// todo later
+            return 0;
+            aml_write_reg32(P_VPU_HDMI_DATA_OVR, (0x200 << 20) | (0x0 << 10) | (0x200 << 0));   // set blank CrYCb as 0x200 0x0 0x200
+            aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 5, 2);        // Output data map: CrYCb
+            aml_set_reg32_bits(P_VPU_HDMI_DATA_OVR, 1, 31, 1);      // Enable HDMI data override
         }
         if(argv == VIDEO_UNBLANK) {
-            aml_set_reg32_bits(P_VPU_HDMI_DATA_OVR, 0, 31, 1);    // 
+            aml_write_reg32(P_VPU_HDMI_DATA_OVR, 0);    // Disable HDMI data override
         }
         break;
     case CONF_CLR_AVI_PACKET:
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index b16b28055c58..3547dd99f8a0 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -571,6 +571,20 @@ static ssize_t store_edid(struct device * dev, struct device_attribute *attr, co
             printk("\n");
         }
     }
+    if(buf[0]=='e'){
+        int ii,jj;
+        int block_idx;
+        block_idx=simple_strtoul(buf+1,NULL,16);
+        if(block_idx<EDID_MAX_BLOCK){
+            for(ii=0;ii<8;ii++){
+                for(jj=0;jj<16;jj++){
+                    printk("%02x ",hdmitx_device.EDID_buf1[block_idx*128+ii*16+jj]);
+                }
+                printk("\n");
+            }
+            printk("\n");
+        }
+    }
     return 16;
 }
 
@@ -775,6 +789,8 @@ static ssize_t show_hdcp_ksv_info(struct device * dev, struct device_attribute *
 static ssize_t show_hpd_state(struct device * dev, struct device_attribute *attr, char * buf)
 {
     int pos=0;
+
+    hdmitx_device.hpd_state = hdmitx_device.HWOp.CntlMisc(&hdmitx_device, MISC_HPD_GPI_ST, 0);
     pos += snprintf(buf+pos, PAGE_SIZE,"%d", hdmitx_device.hpd_state);
     return pos;
 }
@@ -1042,10 +1058,8 @@ static int hdmi_task_handle(void *data)
 {
     extern void hdmitx_edid_ram_buffer_clear(hdmitx_dev_t*);
     hdmitx_dev_t* hdmitx_device = (hdmitx_dev_t*)data;
-    hdmitx_init_parameters(&hdmitx_device->hdmi_info);
 
-    HDMITX_Meson_Init(hdmitx_device);
-    sdev.state = !!(hdmitx_device->HWOp.GetState(hdmitx_device, STAT_VIDEO_VIC, 0));
+    sdev.state = !!(hdmitx_device->HWOp.CntlMisc(hdmitx_device, MISC_HPD_GPI_ST, 0));
     hdmitx_device->hpd_state = sdev.state;
 
     //When init hdmi, clear the hdmitx module edid ram and edid buffer.
@@ -1104,24 +1118,51 @@ static int hdmi_task_handle(void *data)
         if (hdmitx_device->hpd_event == 1)
         {
             hdmitx_device->hpd_event = 0;
-            // todo READ EDID AT LEAST TWICE
-            msleep(500);
             hdmitx_device->hpd_state = 1;
+            hdmitx_edid_ram_buffer_clear(hdmitx_device);
             hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_PIN_MUX_OP, PIN_MUX);
             hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_RESET_EDID, 0);
-            hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_READ_DATA, 0);
+            hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_READ_DATA, 0);      // start reading edid frist time
+            msleep(200);    // wait 200ms to read edid
 
-            if(hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_GET_DATA, 0)){
+            if(!(hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_IS_EDID_DATA_READY, 0))) {   // hardware i2c read fail
+                hdmi_print(ERR, EDID "edid failed\n");
+                hdmitx_device->tv_no_edid = 1;
+                // read edid again
+                hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_RESET_EDID, 0);
+                hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_READ_DATA, 0);      // start reading edid second time
+                if(!(hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_IS_EDID_DATA_READY, 0))) {
+                    hdmi_print(ERR, EDID "edid failed\n");
+                    hdmitx_device->tv_no_edid = 1;
+                }
+                else {
+                    goto edid_op;
+                }
+            }
+            else {
+edid_op:
+                hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_GET_DATA, 1);   // save edid raw data to EDID_buf1[]
                 hdmi_print(IMP, EDID "edid ready\n");
+                // read edid again
+                hdmitx_device->cur_edid_block=0;
+                hdmitx_device->cur_phy_block_ptr=0;
+                hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_RESET_EDID, 0);
+                hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_READ_DATA, 0);      // start reading edid second time
+                msleep(200);
+                if(hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_IS_EDID_DATA_READY, 0)) {
+                    hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_GET_DATA, 0);   // save edid raw data to EDID_buf[]
+                    hdmi_print(IMP, EDID "edid ready\n");
+                }
+                else {
+                    hdmi_print(ERR, EDID "edid failed\n");
+                    hdmitx_device->tv_no_edid = 1;
+                }
+                // compare EDID_buf & EDID_buf1
+                hdmitx_edid_buf_compare_print(hdmitx_device);
                 hdmitx_edid_clear(hdmitx_device);
                 hdmitx_edid_parse(hdmitx_device);
                 hdmitx_device->tv_no_edid = 0;
             }
-            else{
-                hdmi_print(ERR, EDID "edid bad\n");
-                hdmitx_device->tv_no_edid = 1;
-                hdmi_print(INF, CEC "test:aml_read_reg32(P_AO_DEBUG_REG0)%x\n", aml_read_reg32(P_AO_DEBUG_REG0));
-            }
             set_disp_mode_auto();
             switch_set_state(&sdev, 1);
             cec_node_init(hdmitx_device);
@@ -1534,6 +1575,8 @@ static int amhdmitx_probe(struct platform_device *pdev)
     switch_dev_register(&sdev);
     switch_dev_register(&lang_dev);
     switch_dev_register(&hdcp_dev);
+    hdmitx_init_parameters(&hdmitx_device.hdmi_info);
+    HDMITX_Meson_Init(&hdmitx_device);
     hdmitx_device.task = kthread_run(hdmi_task_handle, &hdmitx_device, "kthread_hdmi");
     hdmitx_device.task_monitor = kthread_run(hdmi_task_monitor_handle, &hdmitx_device, "kthread_hdmi_monitor");
 
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_edid.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_edid.c
index bf3c477cfc84..fd8835764a04 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_edid.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_edid.c
@@ -1409,6 +1409,94 @@ void hdmitx_edid_clear(hdmitx_dev_t* hdmitx_device)
     memset(&hdmitx_device->EDID_hash[0], 0, sizeof(hdmitx_device->EDID_hash));
 }
 
+/*
+ * print one block data of edid
+ */
+static void hdmitx_edid_blk_print(unsigned char *blk, unsigned int blk_idx)
+{
+    unsigned int i;
+    hdmi_print(INF, EDID "blk%d raw data\n", blk_idx);
+    for(i = 0; i < 128; i++) {
+        printk("%02x", blk[i]);
+        if(((i+1) & 0x1f) == 0)     // print 32bytes a line
+            printk("\n");
+    }
+    printk("\n");
+}
+
+/*
+ * check EDID buf contains valid block numbers
+ */
+static unsigned int hdmitx_edid_check_valid_blocks(unsigned char *buf)
+{
+    unsigned int valid_blk_no = 0;
+    unsigned int i = 0, j = 0;
+    unsigned int tmp_chksum = 0;
+    for(j = 0; j < EDID_MAX_BLOCK; j++) {
+        for(i = 0; i < 128; i++) {
+            tmp_chksum += buf[i + j*128];
+        }
+        if(tmp_chksum !=0) {
+            valid_blk_no ++;
+            if((tmp_chksum & 0xff) == 0) {
+                hdmi_print(INF, EDID "check sum valid\n");
+            }
+            else {
+                hdmi_print(INF, EDID "check sum invalid\n");
+            }
+        }
+        tmp_chksum = 0;
+    }
+    return valid_blk_no;
+}
+
+/*
+ * suppose DDC read EDID two times successfully,
+ * then compare EDID_buf and EDID_buf1.
+ * if same, just print out EDID_buf raw data, else print out 2 buffers
+ */
+void hdmitx_edid_buf_compare_print(hdmitx_dev_t* hdmitx_device)
+{
+    unsigned int i = 0;
+    unsigned int err_no = 0;
+    unsigned char *buf0 = hdmitx_device->EDID_buf;
+    unsigned char *buf1 = hdmitx_device->EDID_buf1;
+    unsigned int valid_blk_no = 0;
+    unsigned int blk_idx = 0;
+
+    for(i = 0; i < EDID_MAX_BLOCK*128; i++) {
+        if(buf0[i] != buf1[i]) {
+            err_no ++;
+        }
+    }
+
+    if(err_no == 0) {
+        // calculate valid edid block numbers
+        valid_blk_no = hdmitx_edid_check_valid_blocks(buf0);
+
+        if(valid_blk_no == 0) {
+            hdmi_print(ERR, EDID "raw data are all zeroes\n");
+        }
+        else {
+            for(blk_idx = 0; blk_idx < valid_blk_no; blk_idx++) {
+                hdmitx_edid_blk_print(&buf0[blk_idx*128], blk_idx);
+            }
+        }
+    }
+    else {
+        hdmi_print(ERR, EDID "%d errors between two reading\n", err_no);
+        valid_blk_no = hdmitx_edid_check_valid_blocks(buf0);
+        for(blk_idx = 0; blk_idx < valid_blk_no; blk_idx++) {
+            hdmitx_edid_blk_print(&buf0[blk_idx*128], blk_idx);
+        }
+
+        valid_blk_no = hdmitx_edid_check_valid_blocks(buf1);
+        for(blk_idx = 0; blk_idx < valid_blk_no; blk_idx++) {
+            hdmitx_edid_blk_print(&buf1[blk_idx*128], blk_idx);
+        }
+    }
+}
+
 int hdmitx_edid_dump(hdmitx_dev_t* hdmitx_device, char* buffer, int buffer_len)
 {
     int i,pos=0;
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
index 39a9c3bdbfc2..e66921cc5948 100644
--- a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
@@ -56,8 +56,8 @@ typedef struct rx_cap_
 }rx_cap_t;
 
 
-#define EDID_MAX_BLOCK  20       //4
-#define HDMI_TMP_BUF_SIZE            1024
+#define EDID_MAX_BLOCK              4
+#define HDMI_TMP_BUF_SIZE           1024
 typedef struct hdmi_tx_dev_s {
     struct cdev cdev;             /* The cdev structure */
     struct proc_dir_entry *proc_file;
@@ -87,6 +87,7 @@ typedef struct hdmi_tx_dev_s {
     unsigned cur_edid_block;
     unsigned cur_phy_block_ptr;
     unsigned char EDID_buf[EDID_MAX_BLOCK*128];
+    unsigned char EDID_buf1[EDID_MAX_BLOCK*128];    // for second read
     unsigned char EDID_hash[20];
     rx_cap_t RXCap;
     int vic_count;
@@ -216,6 +217,8 @@ extern int hdmitx_edid_dump(hdmitx_dev_t* hdmitx_device, char* buffer, int buffe
 
 extern void hdmitx_edid_clear(hdmitx_dev_t* hdmitx_device);
 
+extern void hdmitx_edid_buf_compare_print(hdmitx_dev_t* hdmitx_device);
+
 extern char* hdmitx_edid_get_native_VIC(hdmitx_dev_t* hdmitx_device);
 
 extern int hdmitx_set_display(hdmitx_dev_t* hdmitx_device, HDMI_Video_Codes_t VideoCode);
-- 
2.19.0

