From 31ffc50b1740d381fb8172cea1d50c20827b3113 Mon Sep 17 00:00:00 2001
From: Sandy lUo <sandy.luo@amlogic.com>
Date: Thu, 16 Jan 2014 15:21:52 +0800
Subject: [PATCH 3060/5965] It cause many HDMI bug

Revert "PD #86420: optimize lcd clock gate ON/OFF controlling, use system API to get protection"

This reverts commit a353bca0f677d79ea3f2466f349bd664bbfd56b8.
---
 arch/arm/mach-meson8/include/mach/mod_gate.h |   4 +-
 arch/arm/mach-meson8/power_gate.c            |  31 +---
 drivers/amlogic/display/vout/lcdoutc.c       | 165 +++++++++----------
 include/linux/amlogic/vout/lcdoutc.h         |  29 ++--
 4 files changed, 99 insertions(+), 130 deletions(-)

diff --git a/arch/arm/mach-meson8/include/mach/mod_gate.h b/arch/arm/mach-meson8/include/mach/mod_gate.h
index 9a8b334fe572..9a338986714c 100755
--- a/arch/arm/mach-meson8/include/mach/mod_gate.h
+++ b/arch/arm/mach-meson8/include/mach/mod_gate.h
@@ -9,8 +9,7 @@ typedef enum {
     MOD_HDMI,
     MOD_VENC,
     MOD_TCON,
-    //MOD_LVDS,
-    MOD_LCD,
+    MOD_LVDS,
     MOD_SPI,
     MOD_UART0,
     MOD_UART1,
@@ -51,6 +50,5 @@ typedef enum {
 extern void switch_mod_gate_by_type(mod_type_t type, int flag);
 extern void switch_mod_gate_by_name(const char* mod_name, int flag);
 extern void power_gate_init(void);
-extern void switch_lcd_mod_gate(int flag);
 
 #endif /* __MOD_GATE_H */
diff --git a/arch/arm/mach-meson8/power_gate.c b/arch/arm/mach-meson8/power_gate.c
index 92d432e7b7f8..113752e9c77e 100755
--- a/arch/arm/mach-meson8/power_gate.c
+++ b/arch/arm/mach-meson8/power_gate.c
@@ -62,8 +62,8 @@ static mod_record_t mod_records[MOD_MAX_NUM + 1] = {
 		.dc_en = 0,
 		.no_share = 1,
 	},{
-		.name = "lcd",
-		.type = MOD_LCD,
+		.name = "lvds",
+		.type = MOD_LVDS,
 		.ref = 0,
 		.flag = 1,
 		.dc_en = 0,
@@ -306,15 +306,11 @@ static int _switch_gate(mod_type_t type, int flag)
 			__CLK_GATE_OFF(VCLK2_ENCT);
 		}
 		break;
-	case MOD_LCD:
-		PRINT_INFO("turn %s lcd module\n", flag?"on":"off");
+	case MOD_LVDS:
+		PRINT_INFO("turn %s lvds module\n", flag?"on":"off");
 		if (flag) {
 			__CLK_GATE_ON(VCLK2_ENCL);
-			__CLK_GATE_ON(VCLK2_VENCL);
-			__CLK_GATE_ON(EDP_CLK);
 		} else {
-			__CLK_GATE_OFF(EDP_CLK);
-			__CLK_GATE_OFF(VCLK2_VENCL);
 			__CLK_GATE_OFF(VCLK2_ENCL);
 		}
 		break;
@@ -560,25 +556,6 @@ void switch_mod_gate_by_name(const char* mod_name, int flag)
 }
 EXPORT_SYMBOL(switch_mod_gate_by_name);
 
-void switch_lcd_mod_gate(int flag)
-{
-	unsigned long flags;
-	
-	spin_lock_irqsave(&gate_lock, flags);
-	PRINT_INFO("turn %s lcd module\n", flag?"on":"off");
-	if (flag) {
-		__CLK_GATE_ON(VCLK2_ENCL);
-		__CLK_GATE_ON(VCLK2_VENCL);
-		__CLK_GATE_ON(EDP_CLK);
-	} else {
-		__CLK_GATE_OFF(EDP_CLK);
-		__CLK_GATE_OFF(VCLK2_VENCL);
-		__CLK_GATE_OFF(VCLK2_ENCL);
-	}
-	spin_unlock_irqrestore(&gate_lock, flags);
-}
-EXPORT_SYMBOL(switch_lcd_mod_gate);
-
 void power_gate_init(void)
 {
 	GATE_INIT(DDR);
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 84dd11a0155e..26d629fc1ffd 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -34,31 +34,30 @@
 #include <linux/kernel.h>
 #include <linux/interrupt.h>
 #include <linux/amlogic/logo/logo.h>
-#include <plat/regops.h>
 #include <mach/am_regs.h>
 #include <linux/amlogic/vout/lcd_reg.h>
 #include <linux/amlogic/vout/lcdoutc.h>
 #include <linux/amlogic/vout/lcd_aml.h>
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
+#include <mach/mlvds_regs.h>
+#endif
 #include <mach/clock.h>
+#include <mach/cpu.h>
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #include <mach/vpu.h>
 #endif
-#include <mach/mod_gate.h>
 #include <asm/fiq.h>
 #include <linux/delay.h>
+#include <plat/regops.h>
+#include <mach/am_regs.h>
 #include <linux/notifier.h>
 #include <linux/reboot.h>
 #include <linux/of.h>
 #include <linux/amlogic/aml_gpio_consumer.h>
 #include <linux/pinctrl/consumer.h>
 #include "../backlight/aml_lcd_bl.h"
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
-#include <mach/mlvds_regs.h>
-#endif
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 #include "edp_drv.h"
 #include "mipi_dsi_util.h"
-#endif
 #ifdef CONFIG_AML_LCD_EXTERN
 #include <linux/amlogic/vout/aml_lcd_extern.h>
 #endif
@@ -66,6 +65,8 @@
 #include <linux/amlogic/aml_pmu_common.h>
 #endif
 
+extern unsigned int clk_util_clk_msr(unsigned int clk_mux);
+
 #define VPP_OUT_SATURATE	(1 << 0)
 
 #define FIQ_VSYNC
@@ -87,7 +88,6 @@
 #endif
 
 unsigned int vpp2_sel = 0; /*0,vpp; 1, vpp2 */
-static unsigned char lcd_status_flag = 1; /* 0=disable; 1=enable */
 
 typedef struct {
 	Lcd_Config_t *pConf;
@@ -96,6 +96,7 @@ typedef struct {
 } lcd_dev_t;
 
 static lcd_dev_t *pDev = NULL;
+//static spinlock_t lcd_init_lock;
 static spinlock_t gamma_write_lock;
 static spinlock_t lcd_clk_lock;
 
@@ -108,11 +109,17 @@ static inline void lcd_mdelay(int n)
 static Bool_t data_status = ON;
 int bl_status = 1;
 
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 static DSI_Config_t lcd_mipi_config = {
 	//to do
 };
 
+static LVDS_Config_t lcd_lvds_config = {
+	.lvds_vswing = 1,
+	.lvds_repack_user = 0,
+	.lvds_repack = 0,
+	.pn_swap = 0,
+};
+
 static EDP_Config_t lcd_edp_config = {
 	.link_user = 0,
 	.link_rate = VAL_EDP_TX_LINK_BW_SET_270,
@@ -121,20 +128,16 @@ static EDP_Config_t lcd_edp_config = {
 	.vswing = VAL_EDP_TX_PHY_VSWING_0,
 	.preemphasis = VAL_EDP_TX_PHY_PREEMPHASIS_0,
 };
-#endif
-
-static LVDS_Config_t lcd_lvds_config = {
-	.lvds_vswing = 1,
-	.lvds_repack_user = 0,
-	.lvds_repack = 0,
-	.pn_swap = 0,
-};
 
 static TTL_Config_t lcd_ttl_config = {
 	.rb_swap = 0,
 	.bit_swap = 0,
 };
 
+static DPHY_Config_t lcd_dphy_config = {
+	.phy_ctrl = 0xaf40,
+};
+
 static Lcd_Config_t lcd_config = {
 	.lcd_timing = {
 		.lcd_clk = 40000000,
@@ -161,12 +164,11 @@ static Lcd_Config_t lcd_config = {
 		.gamma_b_coeff = 100,
 	},
 	.lcd_control = {
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 		.mipi_config = &lcd_mipi_config,
-		.edp_config = &lcd_edp_config,
-#endif
 		.lvds_config = &lcd_lvds_config,
+		.edp_config = &lcd_edp_config,
 		.ttl_config = &lcd_ttl_config,
+		.dphy_config = &lcd_dphy_config,
 	},
 	.lcd_power_ctrl = {
 		.power_on_step = 0,
@@ -683,27 +685,26 @@ static void set_tcon_lcd(Lcd_Config_t *pConf)
 		;
 	}
 	else {
-		WRITE_LCD_REG(L_POL_CNTL_ADDR,   ((1 << LCD_TCON_DE_SEL) | (1 << LCD_TCON_VS_SEL) | (1 << LCD_TCON_HS_SEL))); //enable tcon DE, Hsync, Vsync
+		WRITE_LCD_REG(L_POL_CNTL_ADDR,   ((1 << LCD_TCON_DE_SEL) | (1 << LCD_TCON_VS_SEL) | (1 << LCD_TCON_HS_SEL))); //enable tcon DE, Hsync, Vsync 
 		SET_LCD_REG_MASK(L_POL_CNTL_ADDR, ((0 << LCD_DE_POL) | (vs_pol << LCD_VS_POL) | (hs_pol << LCD_HS_POL)));	//adjust hvsync pol
+		//DE signal
+		WRITE_LCD_REG(L_DE_HS_ADDR,		tcon_adr->oeh_hs_addr);
+		WRITE_LCD_REG(L_DE_HE_ADDR,		tcon_adr->oeh_he_addr);
+		WRITE_LCD_REG(L_DE_VS_ADDR,		tcon_adr->oeh_vs_addr);
+		WRITE_LCD_REG(L_DE_VE_ADDR,		tcon_adr->oeh_ve_addr);
+	
+		//Hsync signal
+		WRITE_LCD_REG(L_HSYNC_HS_ADDR,	tcon_adr->sth1_hs_addr);
+		WRITE_LCD_REG(L_HSYNC_HE_ADDR,	tcon_adr->sth1_he_addr);
+		WRITE_LCD_REG(L_HSYNC_VS_ADDR,	tcon_adr->sth1_vs_addr);
+		WRITE_LCD_REG(L_HSYNC_VE_ADDR,	tcon_adr->sth1_ve_addr);
+	
+		//Vsync signal
+		WRITE_LCD_REG(L_VSYNC_HS_ADDR,	tcon_adr->stv1_hs_addr);
+		WRITE_LCD_REG(L_VSYNC_HE_ADDR,	tcon_adr->stv1_he_addr);
+		WRITE_LCD_REG(L_VSYNC_VS_ADDR,	tcon_adr->stv1_vs_addr);
+		WRITE_LCD_REG(L_VSYNC_VE_ADDR,	tcon_adr->stv1_ve_addr);
 	}
-	
-	//DE signal
-	WRITE_LCD_REG(L_DE_HS_ADDR,		tcon_adr->oeh_hs_addr);
-	WRITE_LCD_REG(L_DE_HE_ADDR,		tcon_adr->oeh_he_addr);
-	WRITE_LCD_REG(L_DE_VS_ADDR,		tcon_adr->oeh_vs_addr);
-	WRITE_LCD_REG(L_DE_VE_ADDR,		tcon_adr->oeh_ve_addr);
-	
-	//Hsync signal
-	WRITE_LCD_REG(L_HSYNC_HS_ADDR,	tcon_adr->sth1_hs_addr);
-	WRITE_LCD_REG(L_HSYNC_HE_ADDR,	tcon_adr->sth1_he_addr);
-	WRITE_LCD_REG(L_HSYNC_VS_ADDR,	tcon_adr->sth1_vs_addr);
-	WRITE_LCD_REG(L_HSYNC_VE_ADDR,	tcon_adr->sth1_ve_addr);
-	
-	//Vsync signal
-	WRITE_LCD_REG(L_VSYNC_HS_ADDR,	tcon_adr->stv1_hs_addr);
-	WRITE_LCD_REG(L_VSYNC_HE_ADDR,	tcon_adr->stv1_he_addr);
-	WRITE_LCD_REG(L_VSYNC_VS_ADDR,	tcon_adr->stv1_vs_addr);
-	WRITE_LCD_REG(L_VSYNC_VE_ADDR,	tcon_adr->stv1_ve_addr);
 
 	if(vpp2_sel)
 		CLR_LCD_REG_MASK(VPP2_MISC, (VPP_OUT_SATURATE));
@@ -1788,6 +1789,8 @@ static void set_control_lvds(Lcd_Config_t *pConf)
 				   
     WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 1, 0, 1);  //fifo enable
 	//WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 1, 3, 1);  //enable fifo
+	
+	//DBG_PRINT("lvds fifo clk = %d.\n", clk_util_clk_msr(LVDS_FIFO_CLK));
 }
 
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
@@ -2014,6 +2017,7 @@ static void init_phy_lvds(Lcd_Config_t *pConf)
     WRITE_LCD_REG(LVDS_PHY_CNTL3, 0xee1);
     WRITE_LCD_REG(LVDS_PHY_CNTL4 ,0);
 
+	//WRITE_LCD_REG(LVDS_PHY_CNTL5, pConf->lcd_control.dphy_config->phy_ctrl);
 	switch (pConf->lcd_control.lvds_config->lvds_vswing) {
 		case 0:
 			swing_ctrl = 0xaf20;
@@ -2693,10 +2697,7 @@ static void select_edp_link_config(Lcd_Config_t *pConf)
 
 static void lcd_control_config(Lcd_Config_t *pConf)
 {
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 	DSI_Config_t *cfg = pDev->pConf->lcd_control.mipi_config;
-#endif	
-	
 	switch (pConf->lcd_basic.lcd_type) {
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 		case LCD_DIGITAL_MIPI:
@@ -2799,6 +2800,7 @@ static void set_video_adjust(Lcd_Config_t *pConf)
 }
 
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
+#include <mach/mod_gate.h>
 static void switch_lcd_gates(Lcd_Type_t lcd_type)
 {
 	switch(lcd_type){
@@ -2846,8 +2848,7 @@ static void _init_lcd_driver(Lcd_Config_t *pConf)	//before power on lcd
 	switch_lcd_gates(lcd_type);
 #elif (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 	switch_vpu_mem_pd_vmod(pDev->lcd_info.mode, VPU_MEM_POWER_ON);
-	//switch_lcd_gates(ON);
-	switch_lcd_mod_gate(ON);
+	switch_lcd_gates(ON);
 #endif
 	
 	printk("Init LCD mode: %s(%u) %ubit, %ux%u@%u.%uHz, ss_level=%u(%s)\n", lcd_type_table[lcd_type], lcd_type, pConf->lcd_basic.lcd_bits, pConf->lcd_basic.h_active, pConf->lcd_basic.v_active, (pConf->lcd_timing.sync_duration_num / 10), (pConf->lcd_timing.sync_duration_num % 10), ss_level, lcd_ss_level_table[ss_level]);
@@ -2980,8 +2981,7 @@ static void _disable_lcd_driver(Lcd_Config_t *pConf)	//after power off lcd
 	switch_mod_gate_by_name("tcon", 0);
 	switch_mod_gate_by_name("lvds", 0);
 #elif (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
-	//switch_lcd_gates(OFF);
-	switch_lcd_mod_gate(OFF);
+	switch_lcd_gates(OFF);
 	switch_vpu_mem_pd_vmod(pDev->lcd_info.mode, VPU_MEM_POWER_DOWN);
 #endif	
 	printk("disable lcd display driver.\n");
@@ -3015,13 +3015,9 @@ static void _lcd_module_enable(void)
 {
 	int ret = 0;
 	
+	//unsigned long flags = 0;
 	mutex_lock(&lcd_init_mutex);
-	
-	if (lcd_status_flag == 1) {
-		mutex_unlock(&lcd_init_mutex);
-		return;
-	}
-	
+	//spin_lock_irqsave(&lcd_init_lock, flags);
 	BUG_ON(pDev==NULL);
 
 	_init_lcd_driver(pDev->pConf);
@@ -3041,28 +3037,22 @@ static void _lcd_module_enable(void)
 	}
 #endif
 	data_status = ON;
-	lcd_status_flag = 1;
 	_enable_vsync_interrupt();
-
+	//spin_unlock_irqrestore(&lcd_init_lock, flags);
 	mutex_unlock(&lcd_init_mutex);
 }
 
 static void _lcd_module_disable(void)
 {
+	//unsigned long flags = 0;
 	mutex_lock(&lcd_init_mutex);
-	
-	if (lcd_status_flag == 0) {
-		mutex_unlock(&lcd_init_mutex);
-		return;
-	}
-	
+	//spin_lock_irqsave(&lcd_init_lock, flags);
 	BUG_ON(pDev==NULL);
 	data_status = OFF;
 	_disable_lcd_driver_pre(pDev->pConf);
 	lcd_power_ctrl(OFF);
 	_disable_lcd_driver(pDev->pConf);
-	lcd_status_flag = 0;
-	
+	//spin_unlock_irqrestore(&lcd_init_lock, flags);
 	mutex_unlock(&lcd_init_mutex);
 }
 
@@ -3226,7 +3216,6 @@ static void _lcd_init(Lcd_Config_t *pConf)
 {
 	//logo_object_t  *init_logo_obj=NULL;
 	_init_vout(pDev);
-	lcd_status_flag = 1;
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 	request_vpu_clk_vmod(pDev->lcd_info.video_clk, pDev->lcd_info.mode);
 #endif
@@ -3238,11 +3227,8 @@ static void _lcd_init(Lcd_Config_t *pConf)
 static int lcd_reboot_notifier(struct notifier_block *nb, unsigned long state, void *cmd)
  {
 	printk("[%s]: %lu\n", __FUNCTION__, state);
-	
-	if (lcd_status_flag == 1) {
-		_disable_backlight();
-		_lcd_module_disable();
-	}
+	_disable_backlight();
+	_lcd_module_disable();
 
     return NOTIFY_DONE;
 }
@@ -3535,10 +3521,8 @@ static Lcd_Basic_t temp_lcd_basic;
 static Lcd_Timing_t temp_lcd_timing;
 static unsigned short temp_dith_user, temp_dith_ctrl;
 static unsigned int temp_vadj_brightness, temp_vadj_contrast, temp_vadj_saturation;
-static int temp_lvds_repack, temp_pn_swap;
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+static int temp_lvds_repack, temp_pn_swap, temp_lvds_phy_ctrl;
 static unsigned char temp_edp_link_rate, temp_edp_lane_count, temp_edp_vswing, temp_edp_preemphasis;
-#endif
 static unsigned short last_h_active, last_v_active;
 
 static const char * lcd_usage_str =
@@ -3564,6 +3548,7 @@ static const char * lcd_usage_str =
 "    echo mdsi dsi_clk_min dsi_clk_max > debug ; write dsi_clk to config dsi_clk_min dsi_clk_max\n"
 #endif
 "\n"
+//"    echo phy <phy_ctrl> > debug ; write lvds phy config\n"
 "data format:\n"
 "    <xx_swap>      : 0=normal, 1=swap\n"
 "    <vswing_level> : support 5 levels such as 0,1,2,3,4. Default is 1\n"
@@ -3572,6 +3557,7 @@ static const char * lcd_usage_str =
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 "    <link_rate>    : 0=1.62G, 1=2.7G\n"
 #endif
+//"    <phy_ctrl>   : lvds phy control in Hex\n"
 "\n"
 "    echo offset <h_sign> <h_offset> <v_sign> <v_offset> > debug ; write ttl display offset\n"
 "    echo video <video_on_pixel> <video_on_line> > debug ; write video on pixel/line config\n"
@@ -3626,6 +3612,7 @@ static void read_current_lcd_config(Lcd_Config_t *pConf)
 			break;
 		case LCD_DIGITAL_LVDS:
 			printk("vswing_level	%u\nlvds_repack	%u\npn_swap	%u\n", pConf->lcd_control.lvds_config->lvds_vswing, pConf->lcd_control.lvds_config->lvds_repack, pConf->lcd_control.lvds_config->pn_swap);
+			//printk("phy_ctrl	0x%x\n", pConf->lcd_control.dphy_config->phy_ctrl);
 			break;
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 		case LCD_DIGITAL_MIPI:
@@ -3713,13 +3700,12 @@ static void save_lcd_config(Lcd_Config_t *pConf)
 	
 	temp_lvds_repack = pConf->lcd_control.lvds_config->lvds_repack;
 	temp_pn_swap = pConf->lcd_control.lvds_config->pn_swap;
-
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)	
+	temp_lvds_phy_ctrl = pConf->lcd_control.dphy_config->phy_ctrl;
+	
 	temp_edp_link_rate = pConf->lcd_control.edp_config->link_rate;
 	temp_edp_lane_count = pConf->lcd_control.edp_config->lane_count;
 	temp_edp_vswing = pConf->lcd_control.edp_config->vswing;
 	temp_edp_preemphasis = pConf->lcd_control.edp_config->preemphasis;
-#endif
 	
 	temp_dith_user = pConf->lcd_effect.dith_user;
 	temp_dith_ctrl = pConf->lcd_effect.dith_cntl_addr;
@@ -3765,6 +3751,7 @@ static void reset_lcd_config(Lcd_Config_t *pConf)
 	
 	pConf->lcd_control.lvds_config->lvds_repack = temp_lvds_repack;
 	pConf->lcd_control.lvds_config->pn_swap = temp_pn_swap;
+	pConf->lcd_control.dphy_config->phy_ctrl = temp_lvds_phy_ctrl;
 	
 	pConf->lcd_effect.dith_user = temp_dith_user;
 	pConf->lcd_effect.dith_cntl_addr = temp_dith_ctrl;
@@ -3773,13 +3760,11 @@ static void reset_lcd_config(Lcd_Config_t *pConf)
 	pConf->lcd_effect.vadj_saturation = temp_vadj_saturation;
 	
 	lcd_config_init(pDev->pConf);
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 	//restore edp link config, for they are translate from user value to reg value
 	pConf->lcd_control.edp_config->link_rate = temp_edp_link_rate;
 	pConf->lcd_control.edp_config->lane_count = temp_edp_lane_count;
 	pConf->lcd_control.edp_config->vswing = temp_edp_vswing;
 	pConf->lcd_control.edp_config->preemphasis = temp_edp_preemphasis;
-#endif
 	
 	_lcd_module_enable();
 	
@@ -3854,21 +3839,21 @@ static ssize_t lcd_debug(struct class *class, struct class_attribute *attr, cons
 						break;
 					case 1:
 						WRITE_LCD_REG(venc_video_mode, 0);
-						WRITE_LCD_REG((venc_test_base+1), 1);
-						WRITE_LCD_REG((venc_test_base+5), pDev->pConf->lcd_basic.h_active / 8);
-						WRITE_LCD_REG((venc_test_base+6), pDev->pConf->lcd_basic.h_active / 8);
+						WRITE_LCD_REG(venc_test_base+1, 1);
+						WRITE_LCD_REG(venc_test_base+5, pDev->pConf->lcd_basic.h_active / 8);
+						WRITE_LCD_REG(venc_test_base+6, pDev->pConf->lcd_basic.h_active / 8);
 						WRITE_LCD_REG(venc_test_base, 1);
 						printk("show bist pattern 1\n");
 						break;
 					case 2:
 						WRITE_LCD_REG(venc_video_mode, 0);
-						WRITE_LCD_REG((venc_test_base+1), 2);
+						WRITE_LCD_REG(venc_test_base+1, 2);
 						WRITE_LCD_REG(venc_test_base, 1);
 						printk("show bist pattern 2\n");
 						break;
 					case 3:
 						WRITE_LCD_REG(venc_video_mode, 0);
-						WRITE_LCD_REG((venc_test_base+1), 3);
+						WRITE_LCD_REG(venc_test_base+1, 3);
 						WRITE_LCD_REG(venc_test_base, 1);
 						printk("show bist pattern 3\n");
 						break;
@@ -3985,6 +3970,12 @@ static ssize_t lcd_debug(struct class *class, struct class_attribute *attr, cons
        }
 			break;
 #endif
+		// case 'p':
+			// t[0] = 0xaf40;
+			// ret = sscanf(buf, "phy %d", &t[0]);
+			// pDev->pConf->lcd_control.dphy_config->phy_ctrl = t[0];
+			// printk("lvds phy_ctrl = 0x%x\n", t[0]);
+			// break;
 		case 'd':
 			if (buf[2] == 't') {
 				t[0] = 0;
@@ -4222,7 +4213,7 @@ static inline int _get_lcd_model_timing(struct platform_device *pdev)
         }
         DBG_PRINT("denominator= %d, numerator=%d\n",  cfg->denominator, cfg->numerator);
 
-     }
+                }
 #endif
 /////////////////////////////////////
    }
@@ -4418,6 +4409,14 @@ static inline int _get_lcd_default_config(struct platform_device *pdev)
 				printk("pll_ctrl = 0x%x, div_ctrl = 0x%x, clk_ctrl=0x%x\n", pDev->pConf->lcd_timing.pll_ctrl, pDev->pConf->lcd_timing.div_ctrl, (pDev->pConf->lcd_timing.clk_ctrl & 0xffff));
 			}
 		}
+		// ret = of_property_read_u32(pdev->dev.of_node,"phy_ctrl",&val);
+		// if(ret){
+			// printk("don't find to match phy_ctrl, use default setting.\n");
+		// }
+		// else {
+			// pDev->pConf->lcd_control.dphy_config->phy_ctrl = val;
+			// DBG_PRINT("phy_ctrl = 0x%x\n", pDev->pConf->lcd_control.dphy_config->phy_ctrl);
+		// }
 		ret = of_property_read_u32(pdev->dev.of_node,"lvds_vswing",&val);
 		if(ret){
 			printk("don't find to match lvds_vswing, use default setting.\n");
@@ -4448,7 +4447,6 @@ static inline int _get_lcd_default_config(struct platform_device *pdev)
 				DBG_PRINT("lvds_repack_user = %u, lvds_repack = %u\n", pDev->pConf->lcd_control.lvds_config->lvds_repack_user, pDev->pConf->lcd_control.lvds_config->lvds_repack);
 			}
 		}
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 		ret = of_property_read_u32_array(pdev->dev.of_node,"edp_user_link_rate_lane_count",&lcd_para[0], 3);
 		if(ret){
 			pDev->pConf->lcd_control.edp_config->link_user = 0;
@@ -4491,7 +4489,6 @@ static inline int _get_lcd_default_config(struct platform_device *pdev)
 				DBG_PRINT("edp link_adaptive = %u, swing_level = %u\n", pDev->pConf->lcd_control.edp_config->link_adaptive, pDev->pConf->lcd_control.edp_config->vswing);
 			}
 		}
-#endif
 		ret = of_property_read_u32_array(pdev->dev.of_node,"rgb_base_coeff",&lcd_para[0], 2);
 		if(ret){
 			printk("don't find to match rgb_base_coeff, use default setting.\n");
diff --git a/include/linux/amlogic/vout/lcdoutc.h b/include/linux/amlogic/vout/lcdoutc.h
index 1213171999e0..e8309404a15e 100755
--- a/include/linux/amlogic/vout/lcdoutc.h
+++ b/include/linux/amlogic/vout/lcdoutc.h
@@ -380,7 +380,6 @@ typedef struct {
 	u16 GammaTableB[256];
 } Lcd_Effect_t;
 
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 typedef struct {
 	int channel_num;
 	int hv_sel;
@@ -403,9 +402,7 @@ typedef struct {
 	int TL080_phase;
 	int scan_function;
 } MLVDS_Config_t;
-#endif
 
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 typedef struct DSI_Config_s{
         unsigned int    dsi_clk_div;
         unsigned int    dsi_clk_max;
@@ -436,6 +433,13 @@ typedef struct DSI_Config_s{
         unsigned char   is_rgb;        //whether dpi color type is rgb
 }DSI_Config_t;
 
+typedef struct {
+	unsigned lvds_vswing;
+	unsigned lvds_repack_user;
+	unsigned lvds_repack;
+	unsigned pn_swap;
+} LVDS_Config_t;
+
 typedef struct {
 	unsigned char link_user;
 	unsigned char lane_count;
@@ -445,14 +449,6 @@ typedef struct {
 	unsigned char preemphasis;
 	unsigned int bit_rate;
 } EDP_Config_t;
-#endif
-
-typedef struct {
-	unsigned lvds_vswing;
-	unsigned lvds_repack_user;
-	unsigned lvds_repack;
-	unsigned pn_swap;
-} LVDS_Config_t;
 
 typedef struct {
 	unsigned char rb_swap;
@@ -460,16 +456,17 @@ typedef struct {
 } TTL_Config_t;
 
 typedef struct {
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+	unsigned phy_ctrl;
+} DPHY_Config_t;
+
+typedef struct {
 	DSI_Config_t *mipi_config;
-	EDP_Config_t *edp_config;
-#endif
 	LVDS_Config_t *lvds_config;
+	EDP_Config_t *edp_config;
 	TTL_Config_t *ttl_config;
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 	MLVDS_Config_t *mlvds_config;
 	MLVDS_Tcon_Config_t *mlvds_tcon_config;
-#endif
+	DPHY_Config_t *dphy_config;
 } Lcd_Control_Config_t;
 
 typedef enum {
-- 
2.19.0

