From 489152e2e5f397bf155faac5a1c8aa6a360749db Mon Sep 17 00:00:00 2001
From: "qiufang.dai" <qiufang.dai@amlogic.com>
Date: Thu, 16 Jan 2014 22:02:49 +0800
Subject: [PATCH 3067/5965] PD #81821: detect gpio wakeup key at pm.c to fix
 loss wakeup key

---
 arch/arm/mach-meson8/pm.c                    | 148 +++----------------
 drivers/amlogic/input/gpio_key/aml_gpiokey.c |  33 ++++-
 kernel/power/suspend.c                       |   4 +
 3 files changed, 54 insertions(+), 131 deletions(-)

diff --git a/arch/arm/mach-meson8/pm.c b/arch/arm/mach-meson8/pm.c
index e4a0dabeba58..5f5b7d7abe5b 100755
--- a/arch/arm/mach-meson8/pm.c
+++ b/arch/arm/mach-meson8/pm.c
@@ -48,127 +48,7 @@ static int early_suspend_flag = 0;
 #define OFF 0
 
 static struct meson_pm_config *pdata;
-#if 0
-#define GATE_OFFs(_MOD) do {power_gate_flag[GCLK_IDX_##_MOD] = IS_CLK_GATE_ON(_MOD);CLK_GATE_OFF(_MOD);} while(0)
-#define GATE_ONs(_MOD) do {if (power_gate_flag[GCLK_IDX_##_MOD]) CLK_GATE_ON(_MOD);} while(0)
-#define GATE_SWITCH(flag, _MOD) do {if (flag) GATE_ONs(_MOD); else GATE_OFFs(_MOD);} while(0)
-static int power_gate_flag[GCLK_IDX_MAX];
-
-
-void power_gate_switch(int flag)
-{
-    //GATE_SWITCH(flag, DDR);
-    GATE_SWITCH(flag, DOS);
-    GATE_SWITCH(flag,MIPI_APB_CLK);
-    GATE_SWITCH(flag,MIPI_SYS_CLK);
-    //GATE_SWITCH(flag, AHB_BRIDGE);
-    //GATE_SWITCH(flag, ISA);
-    //GATE_SWITCH(flag, APB_CBUS);
-    //GATE_SWITCH(flag, _1200XXX);
-    GATE_SWITCH(flag, SPICC);
-    GATE_SWITCH(flag, I2C);
-    GATE_SWITCH(flag, SAR_ADC);
-    GATE_SWITCH(flag, SMART_CARD_MPEG_DOMAIN);
-    GATE_SWITCH(flag, RANDOM_NUM_GEN);
-    GATE_SWITCH(flag, UART0);
-    GATE_SWITCH(flag, SDHC);
-    GATE_SWITCH(flag, STREAM);
-    GATE_SWITCH(flag, ASYNC_FIFO);
-    GATE_SWITCH(flag, SDIO);
-    GATE_SWITCH(flag, AUD_BUF);
-    //GATE_SWITCH(flag, HIU_PARSER);
-    //GATE_SWITCH(flag, AMRISC);
-    GATE_SWITCH(flag, BT656_IN);
-    //GATE_SWITCH(flag, ASSIST_MISC);
-    //GATE_SWITCH(flag, VI_CORE);
-    GATE_SWITCH(flag, SPI2);
-    //GATE_SWITCH(flag, MDEC_CLK_ASSIST);
-    //GATE_SWITCH(flag, MDEC_CLK_PSC);
-    GATE_SWITCH(flag, SPI1);
-    //GATE_SWITCH(flag, AUD_IN);
-    GATE_SWITCH(flag, ETHERNET);
-    GATE_SWITCH(flag, AIU_AI_TOP_GLUE);
-    GATE_SWITCH(flag, AIU_IEC958);
-    GATE_SWITCH(flag, AIU_I2S_OUT);
-    GATE_SWITCH(flag, AIU_AMCLK_MEASURE);
-    GATE_SWITCH(flag, AIU_AIFIFO2);
-    GATE_SWITCH(flag, AIU_AUD_MIXER);
-    GATE_SWITCH(flag, AIU_MIXER_REG);
-    GATE_SWITCH(flag, AIU_ADC);
-    GATE_SWITCH(flag, BLK_MOV);
-    //GATE_SWITCH(flag, UART1);
-    GATE_SWITCH(flag, VGHL_PWM);
-    GATE_SWITCH(flag, GE2D);
-    GATE_SWITCH(flag, USB0);
-    GATE_SWITCH(flag, USB1);
-    //GATE_SWITCH(flag, RESET);
-    GATE_SWITCH(flag, NAND);
-    GATE_SWITCH(flag, HIU_PARSER_TOP);
-    //GATE_SWITCH(flag, MDEC_CLK_DBLK);
-    GATE_SWITCH(flag, MIPI_PHY);
-    GATE_SWITCH(flag, VIDEO_IN);
-    //GATE_SWITCH(flag, AHB_ARB0);
-    GATE_SWITCH(flag, EFUSE);
-    GATE_SWITCH(flag, ROM_CLK);
-    //GATE_SWITCH(flag, AHB_DATA_BUS);
-    //GATE_SWITCH(flag, AHB_CONTROL_BUS);
-    GATE_SWITCH(flag, MISC_USB1_TO_DDR);
-    GATE_SWITCH(flag, MISC_USB0_TO_DDR);
-    //GATE_SWITCH(flag, AIU_PCLK);
-    //GATE_SWITCH(flag, MMC_PCLK);
-    GATE_SWITCH(flag, UART2);
-    GATE_SWITCH(flag, DAC_CLK);
-    GATE_SWITCH(flag, AIU_AOCLK);
-    GATE_SWITCH(flag, AIU_AMCLK);
-    GATE_SWITCH(flag, AIU_ICE958_AMCLK);
-    GATE_SWITCH(flag, AIU_AUDIN_SCLK);
-    GATE_SWITCH(flag, DEMUX);
-}
-EXPORT_SYMBOL(power_gate_switch);
 
-void early_power_gate_switch(int flag)
-{
-    //GATE_SWITCH(flag, AMRISC);
-    //GATE_SWITCH(flag, AUD_IN);
-    GATE_SWITCH(flag, BLK_MOV);
-    GATE_SWITCH(flag, VENC_I_TOP);
-    GATE_SWITCH(flag, VENC_P_TOP);
-    //GATE_SWITCH(flag, VENC_T_TOP);
-    GATE_SWITCH(flag, VENC_DAC);
-    GATE_SWITCH(flag, MISC_DVIN);
-    GATE_SWITCH(flag, MISC_RDMA);
-    GATE_SWITCH(flag, VENCI_INT);
-    //GATE_SWITCH(flag, VIU2);
-    GATE_SWITCH(flag, VENCP_INT);
-    //GATE_SWITCH(flag, VENCT_INT);
-    //GATE_SWITCH(flag, VENCL_INT);
-    //GATE_SWITCH(flag, VENC_L_TOP);
-    GATE_SWITCH(flag, VCLK2_VENCI);
-    GATE_SWITCH(flag, VCLK2_VENCI1);
-    GATE_SWITCH(flag, VCLK2_VENCP);
-    GATE_SWITCH(flag, VCLK2_VENCP1);
-    GATE_SWITCH(flag, VCLK2_VENCT);
-    GATE_SWITCH(flag, VCLK2_VENCT1);
-    GATE_SWITCH(flag, VCLK2_OTHER);
-    GATE_SWITCH(flag, VCLK2_ENCI);
-    GATE_SWITCH(flag, VCLK2_ENCP);
-    
-    GATE_SWITCH(flag, ENC480P);
-    //GATE_SWITCH(flag, VCLK2_ENCT);
-    //GATE_SWITCH(flag, VCLK2_ENCL);
-    GATE_SWITCH(flag, VCLK2_VENCL);
-    GATE_SWITCH(flag, VCLK2_OTHER1);
-    //GATE_SWITCH(flag, LED_PWM);
-    //GATE_SWITCH(flag, GE2D);
-    //GATE_SWITCH(flag, VIDEO_IN);
-    GATE_SWITCH(flag, VI_CORE);
-    
-    GATE_SWITCH(flag, HDMI_INTR_SYNC);
-    GATE_SWITCH(flag, HDMI_PCLK);
-    GATE_SWITCH(flag, VCLK1_HDMI);
-}
-EXPORT_SYMBOL(early_power_gate_switch);
-#endif
 #define CLK(addr)  \
 { \
 	.clk_name=#addr, \
@@ -357,6 +237,10 @@ static void meson_system_late_resume(struct early_suspend *h)
 	}
 }
 #endif
+
+extern int det_pwr_key(void);
+extern void clr_pwr_key(void);
+
 static void meson_pm_suspend(void)
 {
 	printk(KERN_INFO "enter meson_pm_suspend!\n");
@@ -376,19 +260,26 @@ static void meson_pm_suspend(void)
 	//switch A9 clock to xtal 24MHz
 	aml_clr_reg32_mask(P_HHI_SYS_CPU_CLK_CNTL, 1 << 7);
 	aml_clr_reg32_mask(P_HHI_SYS_PLL_CNTL, 1 << 30);//disable sys pll
+
+	if(det_pwr_key())//get pwr key and wakeup im
+	{
+		clr_pwr_key();
+		WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x1234abcd);
+	}else{
 #ifdef CONFIG_MESON_SUSPEND
-	meson_power_suspend();
+		meson_power_suspend();
 #else
 #if 0
-	//k101 power key
-	aml_set_reg32_mask(P_AO_GPIO_O_EN_N, (1 << 3));
-	aml_set_reg32_mask(P_AO_RTI_PULL_UP_REG, (1 << 3)|(1<<19));
-	do{
-		udelay(1000);
-	}while((aml_read_reg32(P_AO_GPIO_I)&(1<<3)));
+		//k101 power key
+		aml_set_reg32_mask(P_AO_GPIO_O_EN_N, (1 << 3));
+		aml_set_reg32_mask(P_AO_RTI_PULL_UP_REG, (1 << 3)|(1<<19));
+		do{
+			udelay(1000);
+		}while((aml_read_reg32(P_AO_GPIO_I)&(1<<3)));
 #endif
-	WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x1234abcd);
+		WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x1234abcd);
 #endif
+	}
 	aml_set_reg32_mask(P_HHI_SYS_PLL_CNTL, (1 << 30)); //enable sys pll
 	printk(KERN_INFO "... wake up\n");
 	WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x1234abcd);
@@ -526,3 +417,4 @@ static int __init meson_pm_init(void)
 	return platform_driver_probe(&meson_pm_driver, meson_pm_probe);
 }
 late_initcall(meson_pm_init);
+
diff --git a/drivers/amlogic/input/gpio_key/aml_gpiokey.c b/drivers/amlogic/input/gpio_key/aml_gpiokey.c
index 2ec8ec379e00..b6d118d1bf99 100755
--- a/drivers/amlogic/input/gpio_key/aml_gpiokey.c
+++ b/drivers/amlogic/input/gpio_key/aml_gpiokey.c
@@ -123,6 +123,28 @@ static void update_work_func(struct work_struct *work)
     kp_work(kp_data);
 }
 
+/***What we do here is just for loss wakeup key when suspend. 
+	In suspend routine, the intr is disable.			*******/
+//we need do more things to adapt the gpio change.
+int det_pwr_key(void)
+{
+	return (readl(P_AO_IRQ_STAT) & (1<<8));
+}
+/*Enable gpio interrupt for AO domain interrupt*/
+void set_pwr_key(void)
+{
+	writel(readl(P_AO_IRQ_GPIO_REG) | (1<<18) | (1<<16) | (0x3<<0),P_AO_IRQ_GPIO_REG);
+	writel(readl(P_AO_IRQ_MASK_FIQ_SEL) | (1<<8),P_AO_IRQ_MASK_FIQ_SEL);
+	writel(1<<8,P_AO_IRQ_STAT_CLR); //clear intr
+}
+
+void clr_pwr_key(void)
+{
+	writel(1<<8,P_AO_IRQ_STAT_CLR); //clear intr
+}
+
+extern int deep_suspend_flag;
+
 
 #ifdef USE_IRQ
 
@@ -130,6 +152,9 @@ static irqreturn_t kp_isr(int irq, void *data)
 {
     struct kp *kp_data=(struct kp *)data;
     schedule_work(&(kp_data->work_update));
+
+	if(!deep_suspend_flag)
+		clr_pwr_key();
     return IRQ_HANDLED;
 }
 
@@ -361,6 +386,7 @@ static int gpio_key_probe(struct platform_device *pdev)
 		    state = -EINVAL;
 		    goto get_key_param_failed;
     }
+	set_pwr_key();
     printk("gpio keypad register input device completed.\r\n");
     register_keypad_dev(gp_kp);
     kfree(key_param);
@@ -415,6 +441,10 @@ static int gpio_key_resume(struct platform_device *dev)
         input_sync(gp_kp->input);	
 
         WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0);
+
+		deep_suspend_flag = 0;
+
+		clr_pwr_key();
     }
     return 0;
 }
@@ -459,6 +489,3 @@ MODULE_AUTHOR("Frank Chen");
 MODULE_DESCRIPTION("GPIO Keypad Driver");
 MODULE_LICENSE("GPL");
 
-
-
-
diff --git a/kernel/power/suspend.c b/kernel/power/suspend.c
index fc8a0a3b4f57..05b28657a746 100755
--- a/kernel/power/suspend.c
+++ b/kernel/power/suspend.c
@@ -133,6 +133,9 @@ static int suspend_test(int level)
  * hibernation).  Run suspend notifiers, allocate the "suspend" console and
  * freeze processes.
  */
+ 
+int deep_suspend_flag;
+
 static int suspend_prepare(suspend_state_t state)
 {
 	int error;
@@ -146,6 +149,7 @@ static int suspend_prepare(suspend_state_t state)
 	if (error)
 		goto Finish;
 
+	deep_suspend_flag=1;
 	error = suspend_freeze_processes();
 	if (!error)
 		return 0;
-- 
2.19.0

