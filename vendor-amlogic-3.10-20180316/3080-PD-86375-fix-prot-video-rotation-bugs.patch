From a97f9fff30bae4dab2b05da9116fc7c5ab97b88b Mon Sep 17 00:00:00 2001
From: "shuai.cao" <shuai.cao@amlogic.com>
Date: Fri, 17 Jan 2014 22:27:22 +0800
Subject: [PATCH 3080/5965] PD# 86375: fix prot video rotation bugs.

---
 drivers/amlogic/amports/video.c            | 240 ++++++++++++---------
 drivers/amlogic/amports/video_prot.c       |  22 +-
 drivers/amlogic/ppmgr/ppmgr_vpp.c          |   2 +-
 include/linux/amlogic/amports/video_prot.h |   4 +-
 4 files changed, 168 insertions(+), 100 deletions(-)

diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index d437b7f0ea72..4304c5ffe9ef 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -224,17 +224,27 @@ static int video_onoff_state = VIDEO_ENABLE_STATE_IDLE;
         video_onoff_state = VIDEO_ENABLE_STATE_OFF_REQ; \
         spin_unlock_irqrestore(&video_onoff_lock, flags); \
     } while (0)
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define EnableVideoLayer()  \
     do { \
-         VD1_MEM_POWER_ON(); \
          if (video_prot.power_on == 0) { \
-             video_prot.angle_changed = 1; \
+             video_prot.enable_layer = 1; \
+             video_prot.angle_changed |= 0x1; \
              video_prot.power_on = 1; \
+             PROT_MEM_POWER_ON(); \
+         } \
+         if (!use_prot) { \
+             VD1_MEM_POWER_ON(); \
+             VIDEO_LAYER_ON(); \
          } \
+    } while (0)
+#else
+#define EnableVideoLayer()  \
+    do { \
+         VD1_MEM_POWER_ON(); \
          VIDEO_LAYER_ON(); \
     } while (0)
-
+#endif
 #define EnableVideoLayer2()  \
     do { \
          VD2_MEM_POWER_ON(); \
@@ -249,29 +259,18 @@ static int video_onoff_state = VIDEO_ENABLE_STATE_IDLE;
            VPP_VD2_PREBLEND | (0x1ff << VPP_VD2_ALPHA_BIT)); \
     } while (0)
 
-#ifdef USE_PROT
-#define DisableVideoLayer() \
-    do { \
-         VIDEO_LAYER_OFF(); \
-         VD1_MEM_POWER_OFF(); \
-         video_prot.power_down = 1; \
-         if(debug_flag& DEBUG_FLAG_BLACKOUT){  \
-            printk("DisableVideoLayer()\n"); \
-         } \
-    } while (0)
-#else
 #define DisableVideoLayer() \
     do { \
          CLEAR_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, \
            VPP_VD1_PREBLEND|VPP_VD2_PREBLEND|VPP_VD2_POSTBLEND|VPP_VD1_POSTBLEND ); \
          VD1_MEM_POWER_OFF(); \
+         VIDEO_LAYER_OFF(); \
+         video_prot.power_down = 1; \
          if(debug_flag& DEBUG_FLAG_BLACKOUT){  \
             printk("DisableVideoLayer()\n"); \
          } \
     } while (0)
 
-#endif
-
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define DisableVideoLayer_NoDelay() \
     do { \
@@ -874,11 +873,6 @@ static void vsync_toggle_frame(vframe_t *vf)
     u32 first_picture = 0;
     unsigned long flags;
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    if (use_prot) {
-        video_prot_revert_vframe(&video_prot, vf);
-    }
-#endif
     frame_count++;
     if(debug_flag& DEBUG_FLAG_PRINT_TOGGLE_FRAME){
         printk("%s()\n", __func__);
@@ -1079,30 +1073,36 @@ static void vsync_toggle_frame(vframe_t *vf)
         next_frame_par = (&frame_parms[0] == next_frame_par) ?
                          &frame_parms[1] : &frame_parms[0];
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-        if (use_prot && video_prot.status) {
-            static vpp_frame_par_t prot_parms;
-            prot_get_parameter(wide_setting, vf, &prot_parms, vinfo);
-            video_prot_axis(&video_prot, prot_parms.VPP_hd_start_lines_, prot_parms.VPP_hd_end_lines_, prot_parms.VPP_vd_start_lines_, prot_parms.VPP_vd_end_lines_);
-        }
-#endif
-        vpp_set_filters(wide_setting, vf, next_frame_par, vinfo);
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-        if (use_prot && video_prot.status) {
-            u32 tmp_line_in_length_ = next_frame_par->VPP_hd_end_lines_ - next_frame_par->VPP_hd_start_lines_ + 1;
-            u32 tmp_pic_in_height_ = next_frame_par->VPP_vd_end_lines_ - next_frame_par->VPP_vd_start_lines_ + 1;
-            if (tmp_line_in_length_ < vf->width) {
-                next_frame_par->VPP_line_in_length_ = tmp_line_in_length_ / (next_frame_par->hscale_skip_count + 1);
-                next_frame_par->VPP_hd_start_lines_ = 0;
-                next_frame_par->VPP_hf_ini_phase_ = 0;
-                next_frame_par->VPP_hd_end_lines_ = tmp_line_in_length_ - 1;
+        if (use_prot) {
+            video_prot_revert_vframe(&video_prot, vf);
+            if (video_prot.status) {
+                static vpp_frame_par_t prot_parms;
+                prot_get_parameter(wide_setting, vf, &prot_parms, vinfo);
+                video_prot_axis(&video_prot, prot_parms.VPP_hd_start_lines_, prot_parms.VPP_hd_end_lines_, prot_parms.VPP_vd_start_lines_, prot_parms.VPP_vd_end_lines_);
             }
-            if (tmp_pic_in_height_ < vf->height) {
-                next_frame_par->VPP_pic_in_height_ = tmp_pic_in_height_ / (next_frame_par->vscale_skip_count + 1);
-                next_frame_par->VPP_vd_start_lines_ = 0;
-                next_frame_par->VPP_hf_ini_phase_ = 0;
-                next_frame_par->VPP_vd_end_lines_ = tmp_pic_in_height_ - 1;
+            vpp_set_filters(wide_setting, vf, next_frame_par, vinfo);
+            if (video_prot.status) {
+                u32 tmp_line_in_length_ = next_frame_par->VPP_hd_end_lines_ - next_frame_par->VPP_hd_start_lines_ + 1;
+                u32 tmp_pic_in_height_ = next_frame_par->VPP_vd_end_lines_ - next_frame_par->VPP_vd_start_lines_ + 1;
+                //video_prot_axis(&video_prot, next_frame_par->VPP_hd_start_lines_, next_frame_par->VPP_hd_end_lines_, next_frame_par->VPP_vd_start_lines_, next_frame_par->VPP_vd_end_lines_);
+                if (tmp_line_in_length_ < vf->width) {
+                    next_frame_par->VPP_line_in_length_ = tmp_line_in_length_ / (next_frame_par->hscale_skip_count + 1);
+                    next_frame_par->VPP_hd_start_lines_ = 0;
+                    next_frame_par->VPP_hf_ini_phase_ = 0;
+                    next_frame_par->VPP_hd_end_lines_ = tmp_line_in_length_ - 1;
+                }
+                if (tmp_pic_in_height_ < vf->height) {
+                    next_frame_par->VPP_pic_in_height_ = tmp_pic_in_height_ / (next_frame_par->vscale_skip_count + 1);
+                    next_frame_par->VPP_vd_start_lines_ = 0;
+                    next_frame_par->VPP_hf_ini_phase_ = 0;
+                    next_frame_par->VPP_vd_end_lines_ = tmp_pic_in_height_ - 1;
+                }
             }
+        } else {
+            vpp_set_filters(wide_setting, vf, next_frame_par, vinfo);
         }
+#else
+        vpp_set_filters(wide_setting, vf, next_frame_par, vinfo);
 #endif
         /* apply new vpp settings */
         frame_par_ready_to_set = 1;
@@ -1737,7 +1737,7 @@ void vsync_rdma_process(void)
 }
 #endif
 
-static vmode_t old_vmode = VMODE_MAX;
+static vmode_t old_vmode = VMODE_MAX;
 #ifdef FIQ_VSYNC
 void vsync_fisr(void)
 #else
@@ -1778,11 +1778,11 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
             printk("Change to video 1\n");
         }
     }
-    vinfo_t *check_vinfo = get_current_vinfo();
-    if((check_vinfo != NULL) && (old_vmode != check_vinfo->mode)){
-    	first_picture = 1;
-    	old_vmode = check_vinfo->mode;	
-    }
+    vinfo_t *check_vinfo = get_current_vinfo();
+    if((check_vinfo != NULL) && (old_vmode != check_vinfo->mode)){
+    	first_picture = 1;
+    	old_vmode = check_vinfo->mode;
+    }
 
     if((dev_id_s[dev_id_len-1] == '2' && cur_dev_idx == 0) ||
         (dev_id_s[dev_id_len-1] != '2' && cur_dev_idx != 0)){
@@ -1791,7 +1791,6 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
     //printk("%s: %s\n", __func__, dev_id_s);
 #endif
 
-
 #ifdef CONFIG_AM_VIDEO_LOG
     toggle_cnt = 0;
 #endif
@@ -1849,7 +1848,101 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 #endif
     vout_type = detect_vout_type();
     hold_line = calc_hold_line();
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    static int wait_count = 0;
+    use_prot = get_use_prot();
+#if 0
+    if (use_prot) {
+        if (video_prot.power_down) {
+            video_prot_set_angle(&video_prot, 0);
+            video_prot_gate(0);
+            PROT_MEM_POWER_OFF();
+            video_prot.power_down = 0;
+            video_prot.power_on = 0;
+            video_prot_clear(&video_prot);
+        }
+    } else
+#endif
+    if (!use_prot && video_prot.enable_layer) {
+        video_prot_set_angle(&video_prot, 0);
+        video_prot_gate(0);
+        PROT_MEM_POWER_OFF();
+        video_prot_clear(&video_prot);
+        video_prot.power_down = 0;
+        video_prot.power_on = 0;
+        video_prot.angle_changed = 0;
+    }
+    if (use_prot && video_prot.power_down) {
+        video_prot_set_angle(&video_prot, 0);
+        video_prot_gate(0);
+        PROT_MEM_POWER_OFF();
+        video_prot_clear(&video_prot);
+        video_property_changed = true;
+        video_prot.power_down = 0;
+        video_prot.power_on = 0;
+        video_prot.angle_changed = 0;
+        video_prot.status = 0;
+    }
+    vf = video_vf_peek();
+    if (use_prot && vf) {//video_prot.video_started ||
+        if (video_prot.src_vframe_width != vf->width || video_prot.src_vframe_height != vf->height) {
+            video_prot_init(&video_prot, vf);
+            //video_prot.angle_changed = 1;
+            video_prot.video_started = 0;
+            u32 angle_orientation = (video_angle + video_prot.src_vframe_orientation) % 4;
+            video_prot_set_angle(&video_prot, angle_orientation);
+        }
+        u32 angle_orientation = (video_angle + video_prot.src_vframe_orientation) % 4;
+        u32 last_angle_orientation = (video_prot.angle + video_prot.src_vframe_orientation) % 4;
+        if (angle_orientation != last_angle_orientation || video_prot.enable_layer) {
+            if (angle_orientation % 2) {
+                if (video_prot.angle_changed & 0x1) {
+                    video_prot.angle_changed = 0x2;
+                    video_prot_set_angle(&video_prot, 0);
+                    video_prot_gate(0);
+                    video_prot_set_angle(&video_prot, 0);
+                    wait_count = 20;
+                    return IRQ_HANDLED;
+                } else if (video_prot.angle_changed & 0x2) {
+                    if (wait_count-- > 0) {
+                        return IRQ_HANDLED;
+                    }
+                    VD1_MEM_POWER_ON();
+                    VIDEO_LAYER_ON();
+                    video_prot.angle = angle_orientation;
+                    video_prot.status = angle_orientation % 2;
+                    video_prot_set_angle(&video_prot, angle_orientation);
+                    video_prot_gate(video_prot.status);
+                    video_property_changed = 1;
+                    video_prot.angle_changed = 0;
+                    video_prot.enable_layer = 0;
+                }
+            } else {
+                if (video_prot.angle_changed & 0x1) {
+                    video_prot.angle = angle_orientation;
+                    video_prot.status = angle_orientation % 2;
+                    video_prot_set_angle(&video_prot, angle_orientation);
+                    video_prot_gate(video_prot.status);
+                    video_property_changed = 1;
+                    video_prot.angle_changed = 0;
+                }
+            }
 
+        } else {
+            video_prot.angle_changed = 0;
+        }
+        if (video_prot.enable_layer) {
+            wait_count = 20;
+            VD1_MEM_POWER_ON();
+            VIDEO_LAYER_ON();
+            video_prot.enable_layer = 0;
+            return IRQ_HANDLED;
+        }
+        if (wait_count-- > 0) {
+            return IRQ_HANDLED;
+        }
+    }
+#endif
     if (vsync_pts_inc_upint) {
         if (vsync_pts_inc_adj) {
             //printk("adj %d, org %d\n", vsync_pts_inc_adj, vsync_pts_inc);
@@ -1916,25 +2009,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
         dispbuf_to_put_num = 0;
     }
 #endif
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    if (use_prot) {
-        if (video_prot.power_down) {
-            video_prot_set_angle(&video_prot, 0);
-            video_prot_gate(0);
-            PROT_MEM_POWER_OFF();
-            video_prot.power_down = 0;
-            video_prot.power_on = 0;
-        }
-        if (video_prot.angle_changed) {
-            u32 angle_orientation = (video_angle + video_prot.src_vframe_orientation) % 4;
-            video_prot.angle_changed = 0;
-            PROT_MEM_POWER_ON();
-            video_prot_set_angle(&video_prot, angle_orientation);
-            video_prot_gate(video_prot.status);
-            video_property_changed = 1;
-        }
-    }
-#endif
+
     if (osd_prov && osd_prov->ops && osd_prov->ops->get){
         vf = osd_prov->ops->get(osd_prov->op_arg);
         if(vf){
@@ -2005,20 +2080,6 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 
             vf = video_vf_get();
             if (!vf) break;
-
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-            use_prot = get_use_prot();
-            if (use_prot && (video_prot.video_started || video_prot.src_vframe_width != vf->width || video_prot.src_vframe_height != vf->height)) {
-                video_prot_init(&video_prot, vf);
-                video_prot.angle_changed = 1;
-                video_prot.video_started = 0;
-            } else if (!use_prot && video_prot.status) {
-                video_prot_set_angle(&video_prot, 0);
-                video_prot_gate(0);
-                PROT_MEM_POWER_OFF();
-                video_property_changed = true;
-            }
-#endif
             force_blackout = 0;
 
 #ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
@@ -2077,19 +2138,6 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
                 vf = video_vf_get();
                 if (!vf) break;
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-                use_prot = get_use_prot();
-                if (use_prot && (video_prot.video_started || video_prot.src_vframe_width != vf->width || video_prot.src_vframe_height != vf->height)) {
-                    video_prot_init(&video_prot, vf);
-                    video_prot.angle_changed = 1;
-                    video_prot.video_started = 0;
-                } else if (!use_prot && video_prot.status) {
-                    video_prot_set_angle(&video_prot, 0);
-                    video_prot_gate(0);
-                    PROT_MEM_POWER_OFF();
-                    video_property_changed = true;
-                }
-#endif
                 vsync_toggle_frame(vf);
                 frame_repeat_count = 0;
 
diff --git a/drivers/amlogic/amports/video_prot.c b/drivers/amlogic/amports/video_prot.c
index ed1b7b87c8c4..8666e789d831 100755
--- a/drivers/amlogic/amports/video_prot.c
+++ b/drivers/amlogic/amports/video_prot.c
@@ -209,6 +209,26 @@ void video_prot_init(video_prot_t* video_prot, vframe_t *vf) {
 
 }
 
+void video_prot_clear(video_prot_t* video_prot) {
+
+    video_prot->is_4k2k = 0;
+    video_prot->y_step = 0;
+    video_prot->pat_val = 0x0;
+    video_prot->src_vframe_ratio = 0;
+    video_prot->src_vframe_width = 0;
+    video_prot->src_vframe_height = 0;
+    video_prot->x_start = 0;
+    video_prot->y_start = 0;
+    video_prot->x_end = 0;
+    video_prot->y_end = 0;
+    video_prot->viu_type = 0;
+    video_prot->src_vframe_orientation = 0;
+    video_prot->angle_changed = 0;
+    video_prot->angle = 0;
+    video_prot->status = 0;
+    video_prot->enable_layer = 0;
+}
+
 void video_prot_set_angle(video_prot_t* video_prot, u32 angle_orientation) {
     if (video_prot->viu_type & VIDTYPE_VIU_NV21) {
         set_prot_NV21(video_prot->x_start, video_prot->x_end, video_prot->y_start, video_prot->y_end, video_prot->y_step, angle_orientation, video_prot->pat_val);
@@ -219,8 +239,6 @@ void video_prot_set_angle(video_prot_t* video_prot, u32 angle_orientation) {
     } else {
         set_prot_NV21(0, video_prot->x_end, 0, video_prot->y_end, video_prot->y_step, 0, video_prot->pat_val);
     }
-    video_prot->angle = angle_orientation;
-    video_prot->status = angle_orientation % 2;
 }
 
 void video_prot_revert_vframe(video_prot_t* video_prot, vframe_t *vf) {
diff --git a/drivers/amlogic/ppmgr/ppmgr_vpp.c b/drivers/amlogic/ppmgr/ppmgr_vpp.c
index 8c8cfe0c98ad..9a5841391332 100755
--- a/drivers/amlogic/ppmgr/ppmgr_vpp.c
+++ b/drivers/amlogic/ppmgr/ppmgr_vpp.c
@@ -2361,7 +2361,7 @@ static int ppmgr_task(void *data)
                     ppmgr_device.angle = 0;
                     ppmgr_device.videoangle = (ppmgr_device.angle + ppmgr_device.orientation) % 4;
                     set_property_change(1);
-                    set_video_angle(ppmgr_device.global_angle);
+                    //set_video_angle(ppmgr_device.global_angle);
                 }
                 ppmgr_device.started = 0;
             }
diff --git a/include/linux/amlogic/amports/video_prot.h b/include/linux/amlogic/amports/video_prot.h
index 9c61696b262b..e9e7deada83f 100755
--- a/include/linux/amlogic/amports/video_prot.h
+++ b/include/linux/amlogic/amports/video_prot.h
@@ -17,7 +17,7 @@
 #define  PAT_VAL        0x00000000
 #define  PAT_START_PTR  1
 #define  PAT_END_PTR    1
-#define  HOLD_LINES     14
+#define  HOLD_LINES     4
 #define  LITTLE_ENDIAN  0
 
 typedef struct {
@@ -36,6 +36,7 @@ typedef struct {
     u32 is_4k2k;
     u32 angle;
     u32 angle_changed;
+    u32 enable_layer;
     u32 src_vframe_width;
     u32 src_vframe_height;
     u32 src_vframe_ratio;
@@ -44,6 +45,7 @@ typedef struct {
 
 //extern void early_init_prot();
 void video_prot_init(video_prot_t* video_prot, vframe_t *vf);
+void video_prot_clear(video_prot_t* video_prot);
 void video_prot_set_angle(video_prot_t* video_prot, u32 angle_orientation);
 void video_prot_revert_vframe(video_prot_t* video_prot, vframe_t *vf);
 void video_prot_set_canvas(vframe_t *vf);
-- 
2.19.0

