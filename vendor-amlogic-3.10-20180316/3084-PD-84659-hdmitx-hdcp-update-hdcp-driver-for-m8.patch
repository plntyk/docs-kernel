From d3d2fc81a88d37dec25bca62aaf35f7ba8c8be82 Mon Sep 17 00:00:00 2001
From: "zongdong.jiao" <zongdong.jiao@amlogic.com>
Date: Wed, 15 Jan 2014 22:05:06 +0800
Subject: [PATCH 3084/5965] PD #84659: hdmitx: hdcp: update hdcp driver for m8

Conflicts:

	drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
---
 arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c  |  13 +-
 drivers/amlogic/hdmi/Kconfig                  |  11 +-
 drivers/amlogic/hdmi/hdmi_tx/Makefile         |   2 +-
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c        | 135 ++----------------
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_hdcp.c   | 123 +++++++++++++++-
 .../linux/amlogic/hdmi_tx/hdmi_info_global.h  |  51 ++++---
 .../linux/amlogic/hdmi_tx/hdmi_tx_module.h    |   5 +
 7 files changed, 187 insertions(+), 153 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
index ebbef85f2798..afa0c88f3b95 100644
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
@@ -1224,7 +1224,7 @@ void hdmi_hw_init(hdmitx_dev_t* hdmitx_device)
     //tmp_add_data[7:0]   = 0xa ; // time_divider[7:0] for DDC I2C bus clock
     //tmp_add_data = 0xa; //800k
     //tmp_add_data = 0x3f; //190k
-    tmp_add_data = 0x30 - 1; //50k     // hdmi system clock change to XTAL 24MHz
+    tmp_add_data = 0x18 - 1; //50k     // hdmi system clock change to XTAL 24MHz
     hdmi_wr_reg(TX_HDCP_CONFIG3, tmp_add_data);
 
     //tmp_add_data[15:8] = 0;
@@ -1384,7 +1384,7 @@ static void hdmi_hw_reset(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t *par
     tmp_add_data = 0x0c; // for hdcp, can not use 0x0e 
     hdmi_wr_reg(TX_HDCP_EDID_CONFIG, tmp_add_data);
     
-    hdmi_wr_reg(TX_HDCP_CONFIG0,      1<<3);  //set TX rom_encrypt_off=1
+    hdmi_wr_reg(TX_HDCP_CONFIG0,      0x3<<3);  //set TX rom_encrypt_off=1
     hdmi_wr_reg(TX_HDCP_MEM_CONFIG,   0<<3);  //set TX read_decrypt=0
     hdmi_wr_reg(TX_HDCP_ENCRYPT_BYTE, 0);     //set TX encrypt_byte=0x00
 
@@ -2563,6 +2563,11 @@ static void hdmitx_debug(hdmitx_dev_t* hdmitx_device, const char* buf)
         hdmitx_dump_tvenc_reg(hdmitx_device->cur_VIC, 1);
         return;
     }
+    else if(strncmp(tmpbuf, "ss", 2) == 0) {
+        printk("hdmitx_device->output_blank_flag: 0x%x\n", hdmitx_device->output_blank_flag);
+        printk("hdmitx_device->hpd_state: 0x%x\n", hdmitx_device->hpd_state);
+        printk("hdmitx_device->cur_VIC: 0x%x\n", hdmitx_device->cur_VIC);
+    }
     else if(strncmp(tmpbuf, "hpd_lock", 8) == 0) {
         if(tmpbuf[8] == '1') {
             hdmitx_device->hpd_lock = 1;
@@ -2896,10 +2901,8 @@ static int hdmitx_cntl_config(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigne
         break;
     case CONF_VIDEO_BLANK_OP:
         if(argv == VIDEO_BLANK) {
-// todo later
-            return 0;
             aml_write_reg32(P_VPU_HDMI_DATA_OVR, (0x200 << 20) | (0x0 << 10) | (0x200 << 0));   // set blank CrYCb as 0x200 0x0 0x200
-            aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 5, 2);        // Output data map: CrYCb
+            aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 5, 3);        // Output data map: CrYCb
             aml_set_reg32_bits(P_VPU_HDMI_DATA_OVR, 1, 31, 1);      // Enable HDMI data override
         }
         if(argv == VIDEO_UNBLANK) {
diff --git a/drivers/amlogic/hdmi/Kconfig b/drivers/amlogic/hdmi/Kconfig
index c3d4202177d3..9f6d9ad49d35 100755
--- a/drivers/amlogic/hdmi/Kconfig
+++ b/drivers/amlogic/hdmi/Kconfig
@@ -1,7 +1,5 @@
-
 menu "HDMI TX Support"
 
-
 config AML_HDMI_TX
         bool "HDMI Output Enable"
         default y
@@ -9,4 +7,13 @@ config AML_HDMI_TX
         select AM_DISPLAY_MODULE
         help  
                 hdmi output enable,It should be enalbe if board have hdmi out interface
+
+if AML_HDMI_TX
+config AML_HDMI_TX_HDCP
+        bool "HDMI HDCP Enable"
+        default n
+        help
+                hdmitx hdcp enable, it should be enalbe if board burned hdmitx hdcp keys
+endif
+
 endmenu
diff --git a/drivers/amlogic/hdmi/hdmi_tx/Makefile b/drivers/amlogic/hdmi/hdmi_tx/Makefile
index 64395d7ec758..5d423d04dc4c 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/Makefile
+++ b/drivers/amlogic/hdmi/hdmi_tx/Makefile
@@ -1,5 +1,5 @@
 obj-$(CONFIG_AML_HDMI_TX)		+= hdmitx.o
 
-hdmitx-objs := hdmi_tx.o hdmi_tx_cec.o hdmi_cec_key.o hdmi_tx_video.o hdmi_tx_audio.o hdmi_tx_edid.o hdmi_tx_audio.o hdmi_tx_hdcp.o \
+hdmitx-objs := hdmi_tx.o hdmi_tx_cec.o hdmi_cec_key.o hdmi_tx_video.o hdmi_tx_audio.o hdmi_tx_edid.o hdmi_tx_audio.o hdmi_tx_hdcp.o
 
 #EXTRA_CFLAGS += -O2
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index 74e1c9ec8181..dad258aad9bb 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -68,10 +68,6 @@ static hdmitx_dev_t hdmitx_device;
 static struct switch_dev sdev = {      // android ics switch device
        .name = "hdmi",
        };
-static struct switch_dev hdcp_dev = {  // android ics switch device
-       .name = "hdcp",
-       };
-
 #ifdef CONFIG_HAS_EARLYSUSPEND
 #include <linux/earlysuspend.h>
 static void hdmitx_early_suspend(struct early_suspend *h)
@@ -81,6 +77,10 @@ static void hdmitx_early_suspend(struct early_suspend *h)
     if (info && (strncmp(info->name, "panel", 5) == 0 || strncmp(info->name, "null", 4) == 0))
         return;
     phdmi->HWOp.Cntl((hdmitx_dev_t *)h->param, HDMITX_EARLY_SUSPEND_RESUME_CNTL, HDMITX_EARLY_SUSPEND);
+    phdmi->cur_VIC = HDMI_Unkown;
+    phdmi->output_blank_flag = 0;
+    phdmi->HWOp.CntlDDC(phdmi, DDC_HDCP_OP, HDCP_OFF);
+    phdmi->HWOp.CntlDDC(phdmi, DDC_HDCP_OP, DDC_RESET_HDCP);
     hdmi_print(IMP, SYS "HDMITX: early suspend\n");
 }
 
@@ -136,16 +136,6 @@ static int force_vout_index = 0;
 static int hdmi_prbs_mode = 0xffff; /* 0xffff=disable; 0=PRBS 11; 1=PRBS 15; 2=PRBS 7; 3=PRBS 31*/
 static int hdmi_480p_force_clk = 0; /* 200, 225, 250, 270 */
 
-// For most cases, we don't use HDCP
-// If using HDCP, need add follow command in boot/init.rc and recovery/boot/init.rc
-// write /sys/module/hdmitx/parameters/hdmi_output_force 0
-static int hdmi_output_force = 1;
-
-static int hdmi_authenticated = -1;
-static int hdmi_hdcp_process = 1;   // default hdcp is on, if aksv is 0, then disable
-static int hdmi_hdcp_status = 1;
-static int hdmi_hdcp_reset = 0;
-
 static int debug_level = INF;     // 1: error  2: important  3: normal  4: detailed
 
 /*****************************
@@ -266,11 +256,8 @@ static  int  set_disp_mode(const char *mode)
     ret = hdmitx_set_display(&hdmitx_device, vic);
     if(ret>=0){
         hdmitx_device.HWOp.Cntl(&hdmitx_device, HDMITX_AVMUTE_CNTL, AVMUTE_CLEAR);
-        if(hdmi_hdcp_status == 1)       // this means before action, hdcp fuction is needed
-            hdmi_hdcp_reset = 1;
         hdmitx_device.cur_VIC = vic;
         hdmitx_device.audio_param_update_flag = 1;
-        hdmi_authenticated = -1;
         hdmitx_device.auth_process_timer = AUTH_PROCESS_TIME;
         hdmitx_device.internal_mode_change = 0;
         set_test_mode();
@@ -297,7 +284,6 @@ static void hdmitx_pre_display_init(void)
     hdmitx_device.HWOp.CntlConfig(&hdmitx_device, CONF_VIDEO_BLANK_OP, VIDEO_BLANK);
     hdmitx_device.HWOp.CntlConfig(&hdmitx_device, CONF_AUDIO_MUTE_OP, AUDIO_MUTE);
     hdmitx_device.HWOp.CntlDDC(&hdmitx_device, DDC_HDCP_OP, HDCP_OFF);
-    hdmi_authenticated = 0;
     //msleep(10);
     hdmitx_device.HWOp.CntlMisc(&hdmitx_device, MISC_TMDS_PHY_OP, TMDS_PHY_DISABLE);
 //    hdmitx_device.HWOp.Cntl(&hdmitx_device, HDMITX_INTR_MASKN_CNTL, INTR_MASKN_ENABLE);
@@ -380,6 +366,7 @@ static int set_disp_mode_auto(void)
     if((vic_ready != HDMI_Unkown) && (vic_ready == vic)) {
         hdmi_print(IMP, SYS "[%s] ALREADY init VIC = %d\n", __func__, vic);
         hdmitx_device.cur_VIC = vic;
+        hdmitx_device.output_blank_flag = 1;
         return 1;
     }
     else {
@@ -390,11 +377,8 @@ static int set_disp_mode_auto(void)
     ret = hdmitx_set_display(&hdmitx_device, vic); //if vic is HDMI_Unkown, hdmitx_set_display will disable HDMI
     if(ret>=0){
         hdmitx_device.HWOp.Cntl(&hdmitx_device, HDMITX_AVMUTE_CNTL, AVMUTE_CLEAR);
-        if(hdmi_hdcp_status == 1)       // this means before action, hdcp fuction is needed
-            hdmi_hdcp_reset = 1;
         hdmitx_device.cur_VIC = vic;
         hdmitx_device.audio_param_update_flag = 1;
-        hdmi_authenticated = -1;
         hdmitx_device.auth_process_timer = AUTH_PROCESS_TIME;
         hdmitx_device.internal_mode_change = 0;
         set_test_mode();
@@ -409,6 +393,7 @@ static int set_disp_mode_auto(void)
             hdmitx_device.HWOp.Cntl(&hdmitx_device, HDMITX_HWCMD_TURNOFF_HDMIHW, (hpdmode==2)?1:0);
         }
     }
+    hdmitx_device.output_blank_flag = 1;
     return ret;
 }
 #if 0
@@ -1028,31 +1013,6 @@ static int hdmitx_notify_callback_a(struct notifier_block *block, unsigned long
 /******************************
 *  hdmitx kernel task
 *******************************/
-static struct timer_list hdcp_monitor_timer;
-static void hdcp_monitor_func(unsigned long arg)
-{
-    //static int hdcp_auth_flag = 0;
-    hdmitx_dev_t* hdmitx_device = (hdmitx_dev_t* )hdcp_monitor_timer.data;
-    if((hdmitx_device->HWOp.Cntl) && (hdmitx_device->log & (HDMI_LOG_HDCP))){
-        hdmitx_device->HWOp.Cntl(hdmitx_device, HDMITX_HDCP_MONITOR, 1);
-    }
-
-    mod_timer(&hdcp_monitor_timer, jiffies + 2 * HZ);
-}
-
-static int hdmi_task_monitor_handle(void *data)
-{
-    init_timer(&hdcp_monitor_timer);
-    hdcp_monitor_timer.data = (ulong) data;
-    hdcp_monitor_timer.function = hdcp_monitor_func;
-    hdcp_monitor_timer.expires = jiffies + HZ;
-    add_timer(&hdcp_monitor_timer);
-
-    while(1) {
-        msleep(2000);
-    }
-    return 0;
-}
 
 static int hdmi_task_handle(void *data)
 {
@@ -1169,9 +1129,9 @@ edid_op:
         }
         if(hdmitx_device->hpd_event == 2)
         {
-            if(hdmi_hdcp_status == 1){
-                hdmi_hdcp_reset = 1;
-            }
+            hdmitx_device->hpd_event = 0;
+            hdmitx_device->hpd_state = 0;
+            hdmitx_device->cur_VIC = HDMI_Unkown;
             hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_CLR_AVI_PACKET, 0);
             hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_CLR_VSDB_PACKET, 0);
             // if VIID PLL is using, then disable HPLL
@@ -1192,73 +1152,10 @@ edid_op:
                     hdmitx_device->HWOp.Cntl(hdmitx_device, HDMITX_HWCMD_TURNOFF_HDMIHW, (hpdmode!=0)?1:0);
                 }
             }
-            hdmitx_device->cur_VIC = HDMI_Unkown;
             hdmitx_device->tv_cec_support = 0;
-            hdmi_authenticated = -1;
             switch_set_state(&sdev, 0);
-            if(hdmitx_device->hpd_event == 2)
-                hdmitx_device->hpd_event = 0;
-            hdmitx_device->hpd_state = 0;
             hdmitx_device->vic_count = 0;
-            if(hdmi_hdcp_status == 1){
-                hdmi_hdcp_reset = 1;
-            }
-            switch_set_state(&hdcp_dev, 0);
-#ifdef CONFIG_ARCH_MESON6
-
-            aml_set_reg32_bits(P_MEDIA_CPU_IRQ_IN2_INTR_STAT_CLR, 1, 0, 1); // Write 1 to clear int for cec fiq.
-#endif
         }
-#if 0
-        /* authentication process */
-        if((hdmitx_device->cur_VIC != HDMI_Unkown) && (hdmitx_device->hpd_state == 1)){
-            if(hdmitx_device->auth_process_timer>0){
-                if(hdmitx_device->auth_process_timer == 60)
-                    hdmitx_device->HWOp.Cntl(hdmitx_device, HDMITX_AVMUTE_CNTL, AVMUTE_OFF);
-                hdmitx_device->auth_process_timer--;
-                goto next;
-            }
-            {
-                hdmitx_device->HWOp.Cntl(hdmitx_device, HDMITX_AVMUTE_CNTL, AVMUTE_OFF);
-                if(hdmi_hdcp_process == 0){    // 0: stop hdcp
-                    hdmi_hdcp_process = -1;
-                    hdmi_hdcp_status = 0;
-                    hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_HDCP_OP, HDCP_OFF);
-                }
-                if(hdmi_hdcp_process == 1){    // 1: start hdcp
-                    hdmi_hdcp_process = -1;
-                    hdmi_hdcp_status = 1;
-                    hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_HDCP_OP, HDCP_ON);
-                }
-                if(hdmi_hdcp_reset == 1){
-                    hdmi_hdcp_reset = 0;
-                    hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_RESET_HDCP, 0);
-                }
-                hdmi_authenticated = hdmitx_device->HWOp.Cntl(hdmitx_device, DDC_HDCP_GET_AUTH, 0);
-                switch_set_state(&hdcp_dev, hdmi_authenticated);
-                if(hdmi_output_force == 1) {
-                    hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_VIDEO_BLANK_OP, VIDEO_UNBLANK);
-                    hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_AUDIO_MUTE_OP,  AUDIO_UNMUTE);
-                }
-                else {
-                    hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_VIDEO_BLANK_OP, hdmi_authenticated ? VIDEO_UNBLANK: VIDEO_BLANK);
-                    hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_AUDIO_MUTE_OP, hdmi_authenticated ? AUDIO_UNMUTE : AUDIO_MUTE);
-                }
-            }
-        }
-        {
-            // If current mode is PANEL, we should output normally.
-            const vinfo_t *info = get_current_vinfo();
-            if((info != NULL) && (strncmp(info->name, "panel", 5) == 0)) {
-                hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_VIDEO_BLANK_OP, VIDEO_UNBLANK);
-            }
-        }
-        if(hdmi_output_force == 1) {
-            hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_VIDEO_BLANK_OP, VIDEO_UNBLANK);
-            hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_AUDIO_MUTE_OP, AUDIO_UNMUTE);
-        }
-#endif
-        /**/
 next:
         msleep(100);
     }
@@ -1312,6 +1209,7 @@ const static struct file_operations amhdmitx_fops = {
     .release  = amhdmitx_release,
 //    .ioctl    = amhdmitx_ioctl,
 };
+
 hdmitx_dev_t * get_hdmitx_device(void)
 {
     return &hdmitx_device;
@@ -1579,11 +1477,10 @@ static int amhdmitx_probe(struct platform_device *pdev)
 #endif
     switch_dev_register(&sdev);
     switch_dev_register(&lang_dev);
-    switch_dev_register(&hdcp_dev);
+
     hdmitx_init_parameters(&hdmitx_device.hdmi_info);
     HDMITX_Meson_Init(&hdmitx_device);
     hdmitx_device.task = kthread_run(hdmi_task_handle, &hdmitx_device, "kthread_hdmi");
-    hdmitx_device.task_monitor = kthread_run(hdmi_task_monitor_handle, &hdmitx_device, "kthread_hdmi_monitor");
 
     if (r < 0){
         hdmi_print(INF, SYS "register switch dev failed\n");
@@ -1595,7 +1492,6 @@ static int amhdmitx_probe(struct platform_device *pdev)
 static int amhdmitx_remove(struct platform_device *pdev)
 {
     switch_dev_unregister(&sdev);
-    switch_dev_unregister(&hdcp_dev);
 
     if(hdmitx_device.HWOp.UnInit){
         hdmitx_device.HWOp.UnInit(&hdmitx_device);
@@ -1868,14 +1764,5 @@ module_param(hdmi_480p_force_clk, int, 0664);
 MODULE_PARM_DESC(hdmi_prbs_mode, "\n hdmi_prbs_mode \n");
 module_param(hdmi_prbs_mode, int, 0664);
 
-MODULE_PARM_DESC(hdmi_authenticated, "\n hdmi_authenticated \n");
-module_param(hdmi_authenticated, int, S_IRUGO);
-
-MODULE_PARM_DESC(hdmi_hdcp_process, "\n hdmi_hdcp_process \n");
-module_param(hdmi_hdcp_process, int, 0664);
-
-MODULE_PARM_DESC(hdmi_output_force, "\n hdmi_output_force \n");
-module_param(hdmi_output_force, int, 0664);
-
 MODULE_PARM_DESC(debug_level, "\n debug_level \n");
 module_param(debug_level, int, 0664);
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_hdcp.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_hdcp.c
index f1d834599416..8553425e1436 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_hdcp.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_hdcp.c
@@ -1,7 +1,11 @@
 #include <linux/version.h>
 #include <linux/module.h>
+#include <linux/irq.h>
 #include <linux/types.h>
+#include <linux/input.h>
 #include <linux/kernel.h>
+#include <linux/kthread.h>
+#include <linux/delay.h>
 #include <linux/interrupt.h>
 #include <linux/fs.h>
 #include <linux/init.h>
@@ -11,7 +15,15 @@
 #include <linux/platform_device.h>
 #include <linux/mutex.h>
 #include <linux/cdev.h>
-//#include <linux/amports/canvas.h>
+#include <asm/irq.h>
+#include <asm/io.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include <linux/list.h>
+#include <linux/spinlock.h>
+#include <linux/spinlock_types.h>
+#include <linux/switch.h>
 #include <asm/uaccess.h>
 #include <mach/am_regs.h>
 #include <linux/amlogic/hdmi_tx/hdmi_info_global.h>
@@ -20,9 +32,20 @@
 #include "hdmi_tx_hdcp.h"
 /*
     hdmi_tx_hdcp.c
-    version 1.0
+    version 1.1
 */
 
+static struct switch_dev hdcp_dev = {  // android ics switch device
+       .name = "hdcp",
+};
+
+// For most cases, we don't use HDCP
+// If using HDCP, need add follow command in boot/init.rc and recovery/boot/init.rc
+// write /sys/module/hdmitx/parameters/hdmi_output_force 0
+static int hdmi_output_force = 1;
+static int hdmi_authenticated = -1;
+static int hdmi_hdcp_process = 1;   // default hdcp is on, if aksv is 0, then disable
+
 // Notic: the HDCP key setting has been moved to uboot
 // On MBX project, it is too late for HDCP get from 
 // other devices
@@ -43,3 +66,99 @@ int hdcp_ksv_valid(unsigned char * dat)
     return (one_num == 20);
 }
 
+static struct timer_list hdcp_monitor_timer;
+static void hdcp_monitor_func(unsigned long arg)
+{
+    //static int hdcp_auth_flag = 0;
+    hdmitx_dev_t* hdmitx_device = (hdmitx_dev_t* )hdcp_monitor_timer.data;
+    if((hdmitx_device->HWOp.Cntl) && (hdmitx_device->log & (HDMI_LOG_HDCP))){
+        hdmitx_device->HWOp.Cntl(hdmitx_device, HDMITX_HDCP_MONITOR, 1);
+    }
+
+    mod_timer(&hdcp_monitor_timer, jiffies + 2 * HZ);
+}
+
+static int hdmitx_hdcp_task(void *data)
+{
+    static int err_cnt = 0;
+    static int time_cnt = 0;
+    hdmitx_dev_t *hdmitx_device = (hdmitx_dev_t*)data;
+
+    init_timer(&hdcp_monitor_timer);
+    hdcp_monitor_timer.data = (ulong) data;
+    hdcp_monitor_timer.function = hdcp_monitor_func;
+    hdcp_monitor_timer.expires = jiffies + HZ;
+    add_timer(&hdcp_monitor_timer);
+
+    while(hdmitx_device->hpd_event != 0xff) {
+        if((hdmitx_device->output_blank_flag == 1) && (hdmitx_device->hpd_state == 1) && (hdmitx_device->cur_VIC != HDMI_Unkown)) {
+            err_cnt = 0;
+            time_cnt = 1;
+            hdmitx_device->output_blank_flag = 0;
+#ifdef CONFIG_AML_HDMI_TX_HDCP
+            hdmi_print(INF, HDCP "start hdcp\n");
+            hdmitx_device->HWOp.CntlDDC(hdmitx_device, AVMUTE_OFF, 0);
+            hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_RESET_EDID, 0);
+            hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_EDID_READ_DATA, 0);
+            hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_RESET_HDCP, 0);
+            hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_HDCP_OP, HDCP_ON);
+            msleep(100);
+            while((hdmitx_device->hpd_state == 1) && (hdmitx_device->cur_VIC != HDMI_Unkown)) {
+                hdmi_authenticated = hdmitx_device->HWOp.CntlDDC(hdmitx_device, DDC_HDCP_GET_AUTH, 0);
+                switch_set_state(&hdcp_dev, hdmi_authenticated);
+                hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_VIDEO_BLANK_OP, hdmi_authenticated ? VIDEO_UNBLANK: VIDEO_BLANK);
+                hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_AUDIO_MUTE_OP, hdmi_authenticated ? AUDIO_UNMUTE : AUDIO_MUTE);
+                if( !hdmi_authenticated ) {
+                    err_cnt ++;
+                    if(err_cnt & (3 << time_cnt)) {
+                        time_cnt ++;
+                        hdmi_print(ERR, HDCP "authenticated failed\n");
+                    }
+                }
+                msleep(20);
+                if(hdmitx_device->output_blank_flag == 1)
+                    break;
+            }
+#else
+            hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_VIDEO_BLANK_OP, VIDEO_UNBLANK);
+            hdmitx_device->HWOp.CntlConfig(hdmitx_device, CONF_AUDIO_MUTE_OP, AUDIO_UNMUTE);
+#endif
+        }
+        msleep(100);
+    }
+
+    return 0;
+}
+
+static int __init hdmitx_hdcp_init(void)
+{
+    hdmitx_dev_t *hdmitx_device = get_hdmitx_device();
+
+    switch_dev_register(&hdcp_dev);
+
+    hdmitx_device->task = kthread_run(hdmitx_hdcp_task, (void*)hdmitx_device, "kthread_hdcp");
+
+    return 0;
+}
+
+static void __exit hdmitx_hdcp_exit(void)
+{
+    switch_dev_unregister(&hdcp_dev);
+}
+
+
+MODULE_PARM_DESC(hdmi_authenticated, "\n hdmi_authenticated \n");
+module_param(hdmi_authenticated, int, S_IRUGO);
+
+MODULE_PARM_DESC(hdmi_hdcp_process, "\n hdmi_hdcp_process \n");
+module_param(hdmi_hdcp_process, int, 0664);
+
+MODULE_PARM_DESC(hdmi_output_force, "\n hdmi_output_force \n");
+module_param(hdmi_output_force, int, 0664);
+
+
+module_init(hdmitx_hdcp_init);
+//device_initcall_sync(hdmitx_hdcp_init);
+module_exit(hdmitx_hdcp_exit);
+MODULE_DESCRIPTION("AMLOGIC HDMI TX HDCP driver");
+MODULE_LICENSE("GPL");
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_info_global.h b/include/linux/amlogic/hdmi_tx/hdmi_info_global.h
index 9cf42e755374..4f60758f7bbf 100644
--- a/include/linux/amlogic/hdmi_tx/hdmi_info_global.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_info_global.h
@@ -317,6 +317,19 @@ typedef struct
     unsigned                                    CTS;
 } Hdmi_rx_audio_info_t;
 
+#define HDMI_E_NONE         0x0
+// HPD Event & Status
+#define E_HPD_PULG_IN       0x1
+#define E_HPD_PLUG_OUT      0x2
+#define S_HPD_PLUG_IN       0x1
+#define S_HPD_PLUG_OUT      0x0
+
+#define E_HDCP_CHK_BKSV      0x1
+
+typedef struct {
+    unsigned int event;
+    unsigned int stat;
+}hdmi_mo_s;
 
 //-----------------------HDMI AUDIO END----------------------------------------
 
@@ -325,6 +338,25 @@ typedef struct
 // HDCP keys from Efuse are encrypted by default, in this test HDCP keys are written by CPU with encryption manually added
 #define ENCRYPT_KEY                                 0xbe
 
+typedef enum {
+     HDCP_NO_AUTH						         = 0,
+     HDCP_NO_DEVICE_WITH_SLAVE_ADDR	,
+     HDCP_BCAP_ERROR						    ,
+     HDCP_BKSV_ERROR						    ,
+     HDCP_R0S_ARE_MISSMATCH				  ,
+     HDCP_RIS_ARE_MISSMATCH				   ,
+     HDCP_REAUTHENTATION_REQ				 ,
+     HDCP_REQ_AUTHENTICATION				 ,
+     HDCP_NO_ACK_FROM_DEV			       ,
+     HDCP_NO_RSEN							       ,
+     HDCP_AUTHENTICATED					     ,
+     HDCP_REPEATER_AUTH_REQ				   ,
+     HDCP_REQ_SHA_CALC					     ,
+     HDCP_REQ_SHA_HW_CALC					   ,
+     HDCP_FAILED_ViERROR					    ,
+     HDCP_MAX
+} hdcp_auth_state_t;
+
 
 
 //-----------------------HDCP END----------------------------------------
@@ -432,25 +464,6 @@ typedef enum {
 }hdmi_tx_display_type_t;
 
 
-typedef enum {
-     HDCP_NO_AUTH						         = 0,
-     HDCP_NO_DEVICE_WITH_SLAVE_ADDR	,
-     HDCP_BCAP_ERROR						    ,
-     HDCP_BKSV_ERROR						    ,
-     HDCP_R0S_ARE_MISSMATCH				  ,
-     HDCP_RIS_ARE_MISSMATCH				   ,
-     HDCP_REAUTHENTATION_REQ				 ,
-     HDCP_REQ_AUTHENTICATION				 ,
-     HDCP_NO_ACK_FROM_DEV			       ,
-     HDCP_NO_RSEN							       ,
-     HDCP_AUTHENTICATED					     ,
-     HDCP_REPEATER_AUTH_REQ				   ,
-     HDCP_REQ_SHA_CALC					     ,
-     HDCP_REQ_SHA_HW_CALC					   ,
-     HDCP_FAILED_ViERROR					    ,
-     HDCP_MAX
-} hdcp_auth_state_t;
-
 
          //0b000 = MCLK is 128*Fs
         //0b001 = MCLK is 256*Fs  (recommanded)
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
index e66921cc5948..db5b7ef6096c 100644
--- a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
@@ -63,6 +63,7 @@ typedef struct hdmi_tx_dev_s {
     struct proc_dir_entry *proc_file;
     struct task_struct *task;
     struct task_struct *task_monitor;
+    struct task_struct *task_hdcp;
     struct {
         void (*SetPacket)(int type, unsigned char* DB, unsigned char* HB);
         void (*SetAudioInfoFrame)(unsigned char* AUD_DB, unsigned char* CHAN_STAT_BUF);
@@ -116,6 +117,9 @@ typedef struct hdmi_tx_dev_s {
     unsigned int  tv_cec_support;
     unsigned int  tv_no_edid;           // For some un-well-known TVs, no edid at all
     unsigned int  hpd_lock;
+    unsigned int  output_blank_flag;    // if equals to 1, means current video & audio output are blank
+    hdmi_mo_s hpd;
+    hdmi_mo_s hdcp;
 }hdmitx_dev_t;
 
 #define CMD_DDC_OFFSET          (0x10 << 24)
@@ -227,6 +231,7 @@ extern int hdmi_set_3d(hdmitx_dev_t* hdmitx_device, int type, unsigned int param
 
 extern int hdmitx_set_audio(hdmitx_dev_t* hdmitx_device, Hdmi_tx_audio_para_t* audio_param, int hdmi_ch);
 
+extern hdmitx_dev_t * get_hdmitx_device(void);
 
 extern  int hdmi_print_buf(char* buf, int len);
 
-- 
2.19.0

