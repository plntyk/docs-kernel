From 4f0eb086e101edaae106aadb40ea8c5391cb49ed Mon Sep 17 00:00:00 2001
From: "zhenfei.li" <zhenfei.li@amlogic>
Date: Thu, 23 Jan 2014 13:49:51 +0800
Subject: [PATCH 3105/5965] PD #86813: For camera cts crash.

---
 drivers/amlogic/camera/ar0543.c             | 98 ++++++++++++++-------
 drivers/amlogic/camera/ar0833.c             | 87 +++++++++++-------
 drivers/amlogic/camera/common/cam_prober.c  |  8 +-
 drivers/amlogic/camera/gc2035.c             |  2 +-
 drivers/amlogic/camera/hm2057.c             |  2 +-
 drivers/amlogic/camera/hm5065.c             |  8 +-
 drivers/amlogic/camera/ov5640.c             | 20 +++--
 drivers/amlogic/camera/ov5642.c             | 26 ++++--
 drivers/amlogic/camera/ov5647.c             | 24 ++++-
 include/linux/amlogic/camera/aml_cam_info.h |  8 +-
 10 files changed, 192 insertions(+), 91 deletions(-)

diff --git a/drivers/amlogic/camera/ar0543.c b/drivers/amlogic/camera/ar0543.c
index bdbf6d9ec111..7cb2fb3ba0a3 100755
--- a/drivers/amlogic/camera/ar0543.c
+++ b/drivers/amlogic/camera/ar0543.c
@@ -590,21 +590,11 @@ struct ar0543_dmaqueue {
 	int                        ini_jiffies;
 };
 
-typedef enum resulution_size_type{
-	SIZE_NULL_TYPE = 0,
-	SIZE_CIF_352X288,
-	SIZE_VGA_640X480,
-	SIZE_720P_1280X720,
-	SIZE_960P_1280X960,
-	SIZE_1080P_1920X1080,
-	SIZE_H1080P_2592X1944
-} resulution_size_type_t;
-
 typedef struct resolution_param {
 	struct v4l2_frmsize_discrete frmsize;
 	struct v4l2_frmsize_discrete active_frmsize;
 	int active_fps;
-	resulution_size_type_t size_type;
+	resolution_size_t size_type;
 	cam_i2c_msg_t* reg_script[2];
 } resolution_param_t;
 
@@ -1375,31 +1365,52 @@ static cam_i2c_msg_t AR0543_5M_script_mipi[] = {
 
 static resolution_param_t  prev_resolution_array[] = {
 	{
+		.frmsize			= {176, 144},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_176X144,
+		.reg_script[0]		= AR0543_preview_VGA_script,
+		.reg_script[1]		= AR0543_VGA_script_mipi,
+	},{
+		.frmsize			= {320, 240},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_320X240,
+		.reg_script[0]		= AR0543_preview_VGA_script,
+		.reg_script[1]		= AR0543_VGA_script_mipi,
+	},{
+		.frmsize			= {352, 288},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_352X288,
+		.reg_script[0]		= AR0543_preview_VGA_script,
+		.reg_script[1]		= AR0543_VGA_script_mipi,
+	}, {
 		.frmsize			= {640, 480},
 		.active_frmsize		= {640, 480},
 		.active_fps			= 30,
-		.size_type			= SIZE_VGA_640X480,
+		.size_type			= SIZE_640X480,
 		.reg_script[0]		= AR0543_preview_VGA_script,
 		.reg_script[1]		= AR0543_VGA_script_mipi,
 	}, {
 		.frmsize			= {1280, 720},
 		.active_frmsize		= {1280, 720},
 		.active_fps			= 30,
-		.size_type			= SIZE_720P_1280X720,
+		.size_type			= SIZE_1280X720,
 		.reg_script[0]		= AR0543_preview_720P_script,
 		.reg_script[1]		= AR0543_720P_script_mipi,
 	}, {
 		.frmsize			= {1280, 960},
 		.active_frmsize		= {1280, 960},
 		.active_fps			= 30,
-		.size_type			= SIZE_960P_1280X960,
+		.size_type			= SIZE_1280X960,
 		.reg_script[0]		= AR0543_preview_960P_script,
 		.reg_script[1]		= AR0543_960P_script_mipi,
 	}, {
 		.frmsize			= {1920, 1080},
 		.active_frmsize		= {1920, 1080},
 		.active_fps			= 15,
-		.size_type			= SIZE_1080P_1920X1080,
+		.size_type			= SIZE_1920X1080,
 		.reg_script[0]		= AR0543_preview_1080P_script,
 		.reg_script[1]		= AR0543_1080P_script_mipi,
 	}
@@ -1407,38 +1418,59 @@ static resolution_param_t  prev_resolution_array[] = {
 
 static resolution_param_t  debug_prev_resolution_array[] = {
 	{
+		.frmsize			= {176, 144},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_176X144,
+		.reg_script[0]		= AR0543_preview_VGA_script,
+		.reg_script[1]		= AR0543_VGA_script_mipi,
+	},{
+		.frmsize			= {320, 240},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_320X240,
+		.reg_script[0]		= AR0543_preview_VGA_script,
+		.reg_script[1]		= AR0543_VGA_script_mipi,
+	},{
+		.frmsize			= {352, 288},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_352X288,
+		.reg_script[0]		= AR0543_preview_VGA_script,
+		.reg_script[1]		= AR0543_VGA_script_mipi,
+	}, {
 		.frmsize			= {640, 480},
 		.active_frmsize		= {640, 480},
 		.active_fps			= 30,
-		.size_type			= SIZE_VGA_640X480,
+		.size_type			= SIZE_640X480,
 		.reg_script[0]		= AR0543_preview_VGA_script,
 		.reg_script[1]		= AR0543_VGA_script_mipi,
 	}, {
 		.frmsize			= {1280, 720},
 		.active_frmsize		= {1280, 720},
 		.active_fps			= 30,
-		.size_type			= SIZE_720P_1280X720,
+		.size_type			= SIZE_1280X720,
 		.reg_script[0]		= AR0543_preview_720P_script,
 		.reg_script[1]		= AR0543_720P_script_mipi,
 	}, {
 		.frmsize			= {1280, 960},
 		.active_frmsize		= {1280, 960},
 		.active_fps			= 30,
-		.size_type			= SIZE_960P_1280X960,
+		.size_type			= SIZE_1280X960,
 		.reg_script[0]		= AR0543_preview_960P_script,
 		.reg_script[1]		= AR0543_960P_script_mipi,
 	}, {
 		.frmsize			= {1920, 1080},
 		.active_frmsize		= {1920, 1080},
 		.active_fps			= 15,
-		.size_type			= SIZE_1080P_1920X1080,
+		.size_type			= SIZE_1920X1080,
 		.reg_script[0]		= AR0543_preview_1080P_script,
 		.reg_script[1]		= AR0543_1080P_script_mipi,
 	},{
 		.frmsize			= {2592, 1944},
 		.active_frmsize		= {2592, 1944},
 		.active_fps			= 7.5,
-		.size_type			= SIZE_H1080P_2592X1944,
+		.size_type			= SIZE_2592X1944,
 		.reg_script[0]		= AR0543_capture_5M_script,
 		.reg_script[1]		= AR0543_5M_script_mipi,
 	},
@@ -1449,7 +1481,7 @@ static resolution_param_t  capture_resolution_array[] = {
 		.frmsize			= {2592, 1944},
 		.active_frmsize		= {2592, 1944},
 		.active_fps			= 7.5,
-		.size_type			= SIZE_H1080P_2592X1944,
+		.size_type			= SIZE_2592X1944,
 		.reg_script[0]			= AR0543_capture_5M_script,
 		.reg_script[1]			= AR0543_5M_script_mipi,
 	},
@@ -2126,19 +2158,25 @@ static int set_flip(struct ar0543_device *dev)
 }
 
 
-static resulution_size_type_t get_size_type(int width, int height)
+static resolution_size_t get_size_type(int width, int height)
 {
-    resulution_size_type_t rv = SIZE_NULL_TYPE;
+    resolution_size_t rv = SIZE_NULL;
     if (width * height >= 2500 * 1900)
-        rv = SIZE_H1080P_2592X1944;
+        rv = SIZE_2592X1944;
     else if (width * height >= 1900 * 1000)
-        rv = SIZE_1080P_1920X1080;
+        rv = SIZE_1920X1080;
     else if (width * height >= 1200 * 900)
-        rv = SIZE_960P_1280X960;
+        rv = SIZE_1280X960;
     else if (width * height >= 1200 * 700)
-        rv = SIZE_720P_1280X720;
+        rv = SIZE_1280X720;
     else if (width * height >= 600 * 400)
-        rv = SIZE_VGA_640X480;
+        rv = SIZE_640X480;
+    else if (width * height >= 352 * 288)
+        rv = SIZE_352X288;
+    else if (width * height >= 320 * 240)
+        rv = SIZE_320X240;
+    else if (width * height >= 176 * 144)
+        rv = SIZE_176X144;
     return rv;
 }
 
@@ -2173,10 +2211,10 @@ static resolution_param_t* get_resolution_param(struct ar0543_device *dev, int a
     int i = 0;
     int arry_size = 0;
     resolution_param_t* tmp_resolution_param = NULL;
-    resulution_size_type_t res_type = SIZE_NULL_TYPE;
+    resolution_size_t res_type = SIZE_NULL;
     printk("target resolution is %dX%d\n", width, height);
     res_type = get_size_type(width, height);
-    if (res_type == SIZE_NULL_TYPE)
+    if (res_type == SIZE_NULL)
         return NULL;
     if (ar0543_work_mode == CAMERA_CAPTURE) {
         tmp_resolution_param = capture_resolution_array;
diff --git a/drivers/amlogic/camera/ar0833.c b/drivers/amlogic/camera/ar0833.c
index 8aedcdbe40b1..5d209d640857 100755
--- a/drivers/amlogic/camera/ar0833.c
+++ b/drivers/amlogic/camera/ar0833.c
@@ -585,23 +585,11 @@ struct ar0833_dmaqueue {
 	int                        ini_jiffies;
 };
 
-typedef enum resulution_size_type{
-	SIZE_NULL_TYPE = 0,
-	SIZE_CIF_352X288,
-	SIZE_VGA_640X480,
-	SIZE_720P_1280X720,
-	SIZE_960P_1280X960,
-	SIZE_1080P_1920X1080,
-	SIZE_H1080P_2592X1944,
-	SIZE_6M_3264X1836,
-	SIZE_8M_3264X2448,
-} resulution_size_type_t;
-
 typedef struct resolution_param {
 	struct v4l2_frmsize_discrete frmsize;
 	struct v4l2_frmsize_discrete active_frmsize;
 	int active_fps;
-	resulution_size_type_t size_type;
+	resolution_size_t size_type;
 	cam_i2c_msg_t* reg_script[2];
 } resolution_param_t;
 
@@ -3506,31 +3494,52 @@ static cam_i2c_msg_t AR0833_6M_script_mipi[] = {
 
 static resolution_param_t  prev_resolution_array[] = {
 	{
+		.frmsize			= {176, 144},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_176X144,
+		.reg_script[0]		= AR0833_preview_VGA_script,
+		.reg_script[1]		= AR0833_VGA_script_mipi,
+	},{
+		.frmsize			= {320, 240},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_320X240,
+		.reg_script[0]		= AR0833_preview_VGA_script,
+		.reg_script[1]		= AR0833_VGA_script_mipi,
+	},{
+		.frmsize			= {352, 288},
+		.active_frmsize		= {640, 480},
+		.active_fps			= 30,
+		.size_type			= SIZE_352X288,
+		.reg_script[0]		= AR0833_preview_VGA_script,
+		.reg_script[1]		= AR0833_VGA_script_mipi,
+	},{
 		.frmsize			= {640, 480},
 		.active_frmsize		= {640, 480},
 		.active_fps			= 30,
-		.size_type			= SIZE_VGA_640X480,
+		.size_type			= SIZE_640X480,
 		.reg_script[0]		= AR0833_preview_VGA_script,
 		.reg_script[1]		= AR0833_VGA_script_mipi,
 	}, {
 		.frmsize			= {1280, 720},
 		.active_frmsize		= {1280, 720},
 		.active_fps			= 30,
-		.size_type			= SIZE_720P_1280X720,
+		.size_type			= SIZE_1280X720,
 		.reg_script[0]		= AR0833_preview_720P_script,
 		.reg_script[1]		= AR0833_720P_script_mipi,
 	}, {
 		.frmsize			= {1280, 960},
 		.active_frmsize		= {1280, 720},
 		.active_fps			= 30,
-		.size_type			= SIZE_960P_1280X960,
+		.size_type			= SIZE_1280X960,
 		.reg_script[0]		= AR0833_preview_960P_script,
 		.reg_script[1]		= AR0833_960P_script_mipi,
 	}, {
 		.frmsize			= {1920, 1080},
 		.active_frmsize		= {1920, 1080},
 		.active_fps			= 15,
-		.size_type			= SIZE_1080P_1920X1080,
+		.size_type			= SIZE_1920X1080,
 		.reg_script[0]		= AR0833_preview_1080P_script,
 		.reg_script[1]		= AR0833_1080P_script_mipi, //AR0833_1080P_script_mipi,
 	}
@@ -3541,42 +3550,42 @@ static resolution_param_t  debug_prev_resolution_array[] = {
 		.frmsize			= {640, 480},
 		.active_frmsize		= {640, 480},
 		.active_fps			= 30,
-		.size_type			= SIZE_VGA_640X480,
+		.size_type			= SIZE_640X480,
 		.reg_script[0]		= AR0833_preview_VGA_script,
 		.reg_script[1]		= AR0833_VGA_script_mipi,
 	}, {
 		.frmsize			= {1280, 720},
 		.active_frmsize		= {1280, 720},
 		.active_fps			= 30,
-		.size_type			= SIZE_720P_1280X720,
+		.size_type			= SIZE_1280X720,
 		.reg_script[0]		= AR0833_preview_720P_script,
 		.reg_script[1]		= AR0833_720P_script_mipi,
 	}, {
 		.frmsize			= {1280, 960},
 		.active_frmsize		= {1280, 720},
 		.active_fps			= 30,
-		.size_type			= SIZE_960P_1280X960,
+		.size_type			= SIZE_1280X960,
 		.reg_script[0]		= AR0833_preview_960P_script,
 		.reg_script[1]		= AR0833_960P_script_mipi,
 	}, {
 		.frmsize			= {1920, 1080},
 		.active_frmsize		= {1920, 1080},
 		.active_fps			= 15,
-		.size_type			= SIZE_1080P_1920X1080,
+		.size_type			= SIZE_1920X1080,
 		.reg_script[0]		= AR0833_preview_1080P_script,
 		.reg_script[1]		= AR0833_1080P_script_mipi, //AR0833_1080P_script_mipi,
 	}, {
 		.frmsize			= {3264, 1836},
 		.active_frmsize		= {3264, 1836},
 		.active_fps			= 15,
-		.size_type			= SIZE_6M_3264X1836,
+		.size_type			= SIZE_3264X1836,
 		.reg_script[0]		= AR0833_preview_6M_script,
 		.reg_script[1]		= AR0833_6M_script_mipi, //AR0833_1080P_script_mipi,
 	}, {
 		.frmsize			= {3264, 2448},
 		.active_frmsize		= {3264, 2448},
 		.active_fps			= 15,
-		.size_type			= SIZE_8M_3264X2448,
+		.size_type			= SIZE_3264X2448,
 		.reg_script[0]		= AR0833_preview_8M_script,
 		.reg_script[1]		= AR0833_8M_script_mipi, //AR0833_1080P_script_mipi,
 	}
@@ -3587,7 +3596,7 @@ static resolution_param_t  capture_resolution_array[] = {
 		.frmsize			= {2592, 1944},
 		.active_frmsize		= {2592, 1944},
 		.active_fps			= 7.5,
-		.size_type			= SIZE_H1080P_2592X1944,
+		.size_type			= SIZE_2592X1944,
 		.reg_script[0]		= AR0833_capture_8M_script,
 		.reg_script[1]		= AR0833_8M_script_mipi,
 	},
@@ -4229,19 +4238,29 @@ static int set_flip(struct ar0833_device *dev)
 }
 
 
-static resulution_size_type_t get_size_type(int width, int height)
+static resolution_size_t get_size_type(int width, int height)
 {
-    resulution_size_type_t rv = SIZE_NULL_TYPE;
-    if (width * height >= 2500 * 1900)
-        rv = SIZE_H1080P_2592X1944;
+    resolution_size_t rv = SIZE_NULL;
+    if (width * height >= 3200 * 2400)
+        rv = SIZE_3264X2448;
+    else if (width * height >= 3200 * 1800)
+        rv = SIZE_3264X1836;
+    else if (width * height >= 2500 * 1900)
+        rv = SIZE_2592X1944;
     else if (width * height >= 1900 * 1000)
-        rv = SIZE_1080P_1920X1080;
+        rv = SIZE_1920X1080;
     else if (width * height >= 1200 * 900)
-        rv = SIZE_960P_1280X960;
+        rv = SIZE_1280X960;
     else if (width * height >= 1200 * 700)
-        rv = SIZE_720P_1280X720;
+        rv = SIZE_1280X720;
     else if (width * height >= 600 * 400)
-        rv = SIZE_VGA_640X480;
+        rv = SIZE_640X480;
+    else if (width * height >= 352 * 288)
+        rv = SIZE_352X288;
+    else if (width * height >= 320 * 240)
+        rv = SIZE_320X240;
+    else if (width * height >= 176 * 144)
+        rv = SIZE_176X144;
     return rv;
 }
 
@@ -4276,10 +4295,10 @@ static resolution_param_t* get_resolution_param(struct ar0833_device *dev, int i
     int i = 0;
     int arry_size = 0;
     resolution_param_t* tmp_resolution_param = NULL;
-    resulution_size_type_t res_type = SIZE_NULL_TYPE;
+    resolution_size_t res_type = SIZE_NULL;
     printk("target resolution is %dX%d\n", width, height);
     res_type = get_size_type(width, height);
-    if (res_type == SIZE_NULL_TYPE)
+    if (res_type == SIZE_NULL)
         return NULL;
     if (ar0833_work_mode == CAMERA_CAPTURE) {
         tmp_resolution_param = capture_resolution_array;
diff --git a/drivers/amlogic/camera/common/cam_prober.c b/drivers/amlogic/camera/common/cam_prober.c
index d938f4bcb815..9c7fb4be6c5a 100755
--- a/drivers/amlogic/camera/common/cam_prober.c
+++ b/drivers/amlogic/camera/common/cam_prober.c
@@ -473,7 +473,7 @@ typedef struct {
 	unsigned char addr;
 	char* name;
 	unsigned char pwdn;
-	resulution_size_t max_cap_size;
+	resolution_size_t max_cap_size;
 	aml_cam_probe_fun_t probe_func;
 }aml_cam_dev_info_t;
 
@@ -709,7 +709,7 @@ static aml_cam_dev_info_t* get_cam_info_by_name(const char* name)
 }
 
 struct res_item {
-	resulution_size_t size;
+	resolution_size_t size;
 	char* name;
 };
 
@@ -758,9 +758,9 @@ struct res_item res_item_array[] = {
 };
 
 
-static resulution_size_t get_res_size(const char* res_str)
+static resolution_size_t get_res_size(const char* res_str)
 {
-	resulution_size_t ret = SIZE_NULL;
+	resolution_size_t ret = SIZE_NULL;
 	struct res_item* item;
 	int i;
 	if (!res_str)
diff --git a/drivers/amlogic/camera/gc2035.c b/drivers/amlogic/camera/gc2035.c
index bf51aee6f782..b21958b0e5b6 100755
--- a/drivers/amlogic/camera/gc2035.c
+++ b/drivers/amlogic/camera/gc2035.c
@@ -423,7 +423,7 @@ static struct v4l2_frmsize_discrete gc2035_pic_resolution[]=
 	{2592, 1944},
 };
 
-static int get_total_pic_size(resulution_size_t max_size)
+static int get_total_pic_size(resolution_size_t max_size)
 {
 	int ret = 2;
 	if (max_size >= SIZE_2592X1944)
diff --git a/drivers/amlogic/camera/hm2057.c b/drivers/amlogic/camera/hm2057.c
index 2cf8e3e0d4eb..963c6e678200 100755
--- a/drivers/amlogic/camera/hm2057.c
+++ b/drivers/amlogic/camera/hm2057.c
@@ -419,7 +419,7 @@ static struct v4l2_frmsize_discrete hm2057_pic_resolution[]=
 	{2592, 1944},
 };
 
-static int get_total_pic_size(resulution_size_t max_size)
+static int get_total_pic_size(resolution_size_t max_size)
 {
 	int ret = 2;
 	if (max_size >= SIZE_2592X1944)
diff --git a/drivers/amlogic/camera/hm5065.c b/drivers/amlogic/camera/hm5065.c
index 8223f385423e..3e99e9f33528 100755
--- a/drivers/amlogic/camera/hm5065.c
+++ b/drivers/amlogic/camera/hm5065.c
@@ -513,7 +513,7 @@ typedef struct resolution_param {
 	struct v4l2_frmsize_discrete frmsize;
 	struct v4l2_frmsize_discrete active_frmsize;
 	int active_fps;
-	resulution_size_t size_type;
+	resolution_size_t size_type;
 	struct aml_camera_i2c_fig_s* reg_script;
 } resolution_param_t;
 
@@ -1079,9 +1079,9 @@ static int HM5065_FlashCtrl(struct hm5065_device *dev, int flash_mode)
 
 }    /* HM5065_FlashCtrl */
 
-static resulution_size_t get_size_type(int width, int height)
+static resolution_size_t get_size_type(int width, int height)
 {
-	resulution_size_t rv = SIZE_NULL;
+	resolution_size_t rv = SIZE_NULL;
 	if (width * height >= 2500 * 1900)
 		rv = SIZE_2592X1944;
 	else if (width * height >= 2000 * 1500)
@@ -1132,7 +1132,7 @@ static resolution_param_t* get_resolution_param(struct hm5065_device *dev, int i
 	int i = 0;
 	int arry_size = 0;
 	resolution_param_t* tmp_resolution_param = NULL;
-	resulution_size_t res_type = SIZE_NULL;
+	resolution_size_t res_type = SIZE_NULL;
 	res_type = get_size_type(width, height);
 	if (res_type == SIZE_NULL)
 		return NULL;
diff --git a/drivers/amlogic/camera/ov5640.c b/drivers/amlogic/camera/ov5640.c
index 497d3b571aec..89b53f2276ad 100755
--- a/drivers/amlogic/camera/ov5640.c
+++ b/drivers/amlogic/camera/ov5640.c
@@ -506,7 +506,7 @@ typedef struct resolution_param {
 	struct v4l2_frmsize_discrete frmsize;
 	struct v4l2_frmsize_discrete active_frmsize;
 	int active_fps;
-	resulution_size_t size_type;
+	resolution_size_t size_type;
 	struct aml_camera_i2c_fig_s* reg_script;
 } resolution_param_t;
 
@@ -2512,8 +2512,14 @@ static resolution_param_t  prev_resolution_array[] = {
 		.frmsize			= {352, 288},
 		.active_frmsize			= {1280, 958},
 		.active_fps			= 30,
-		.size_type			= SIZE_320X240,
+		.size_type			= SIZE_352X288,
 		.reg_script			= OV5640_preview_960P_30HZ_script,
+	},{
+		.frmsize			= {176, 144},
+		.active_frmsize			= {640, 478},
+		.active_fps			= 30,
+		.size_type			= SIZE_176X144,
+		.reg_script			= OV5640_preview_VGA_script,
 	},
 };
 
@@ -3233,9 +3239,9 @@ static int OV5640_FlashCtrl(struct ov5640_device *dev, int flash_mode)
 
 }    /* OV5640_FlashCtrl */
 
-static resulution_size_t get_size_type(int width, int height)
+static resolution_size_t get_size_type(int width, int height)
 {
-	resulution_size_t rv = SIZE_NULL;
+	resolution_size_t rv = SIZE_NULL;
 	if (width * height >= 2500 * 1900)
 		rv = SIZE_2592X1944;
 	else if (width * height >= 2000 * 1500)
@@ -3254,8 +3260,12 @@ static resulution_size_t get_size_type(int width, int height)
 		rv = SIZE_800X600;
 	else if (width * height >= 600 * 400)
 		rv = SIZE_640X480;
+	else if (width * height >= 352 * 288)
+		rv = SIZE_352X288;
 	else if (width * height >= 300 * 200)
 		rv = SIZE_320X240;
+	else if (width * height >= 170 * 140)
+		rv = SIZE_176X144;
 	return rv;
 }
 
@@ -3286,7 +3296,7 @@ static resolution_param_t* get_resolution_param(struct ov5640_device *dev, int i
 	int i = 0;
 	int arry_size = 0;
 	resolution_param_t* tmp_resolution_param = NULL;
-	resulution_size_t res_type = SIZE_NULL;
+	resolution_size_t res_type = SIZE_NULL;
 	res_type = get_size_type(width, height);
 	if (res_type == SIZE_NULL)
 		return NULL;
diff --git a/drivers/amlogic/camera/ov5642.c b/drivers/amlogic/camera/ov5642.c
index 05d382d63aa7..c55f7a7b25b5 100755
--- a/drivers/amlogic/camera/ov5642.c
+++ b/drivers/amlogic/camera/ov5642.c
@@ -403,7 +403,7 @@ typedef struct resolution_param {
 	struct v4l2_frmsize_discrete frmsize;
 	struct v4l2_frmsize_discrete active_frmsize;
 	int active_fps;
-	resulution_size_t size_type;
+	resolution_size_t size_type;
 	struct aml_camera_i2c_fig_s* reg_script;
 } resolution_param_t;
 
@@ -1406,6 +1406,18 @@ static resolution_param_t  prev_resolution_array[] = {
 		.active_fps			= 236,
 		.size_type			= SIZE_320X240,
 		.reg_script			= OV5642_preview_QVGA_script,
+	},{
+		.frmsize			= {352, 288},
+		.active_frmsize			= {320, 240},
+		.active_fps			= 236,
+		.size_type			= SIZE_352X288,
+		.reg_script			= OV5642_preview_QVGA_script,
+	},{
+		.frmsize			= {176, 144},
+		.active_frmsize			= {320, 240},
+		.active_fps			= 236,
+		.size_type			= SIZE_176X144,
+		.reg_script			= OV5642_preview_QVGA_script,
 	},
 };
 
@@ -2101,9 +2113,9 @@ static int OV5642_FlashCtrl(struct ov5642_device *dev, int flash_mode)
 
 }    /* OV5642_FlashCtrl */
 
-static resulution_size_t get_size_type(int width, int height)
+static resolution_size_t get_size_type(int width, int height)
 {
-	resulution_size_t rv = SIZE_NULL;
+	resolution_size_t rv = SIZE_NULL;
 	if (width * height >= 2500 * 1900)
 		rv = SIZE_2592X1944;
 	else if (width * height >= 2000 * 1500)
@@ -2112,8 +2124,12 @@ static resulution_size_t get_size_type(int width, int height)
 		rv = SIZE_1600X1200;
 	else if (width * height >= 600 * 400)
 		rv = SIZE_640X480;
-	else if (width * height >= 300 * 200)
+	else if (width * height >= 352 * 288)
+		rv = SIZE_352X288;
+	else if (width * height >= 320 * 240)
 		rv = SIZE_320X240;
+	else if (width * height >= 176 * 144)
+		rv = SIZE_176X144;
 	return rv;
 }
 
@@ -2143,7 +2159,7 @@ get_resolution_param(struct ov5642_device *dev,int is_capture,
 	int i = 0;
 	int arry_size = 0;
 	resolution_param_t* tmp_resolution_param = NULL;
-	resulution_size_t res_type = SIZE_NULL;
+	resolution_size_t res_type = SIZE_NULL;
 	res_type = get_size_type(width, height);
 	if (res_type == SIZE_NULL)
 		return NULL;
diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index a4f108e93fc2..ce9b4515acf7 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -580,7 +580,7 @@ typedef struct resolution_param {
 	struct v4l2_frmsize_discrete frmsize;
 	struct v4l2_frmsize_discrete active_frmsize;
 	int active_fps;
-	resulution_size_t size_type;
+	resolution_size_t size_type;
 	struct aml_camera_i2c_fig_s *reg_script[2]; //0:dvp, 1:mipi
 } resolution_param_t;
 
@@ -1975,6 +1975,13 @@ struct aml_camera_i2c_fig_s OV5647_capture_5M_script[] = {
 
 static resolution_param_t  debug_prev_resolution_array[] = {
 	{
+		.frmsize			= {176, 144},
+		.active_frmsize		= {1280, 960},
+		.active_fps			= 30,
+		.size_type			= SIZE_176X144,
+		.reg_script[0]			= OV5647_preview_960P_script,
+		.reg_script[1]			= OV5647_VGA_script_mipi,
+	},{
 		.frmsize			= {352, 288},
 		.active_frmsize		= {1280, 960},
 		.active_fps			= 30,
@@ -2029,6 +2036,13 @@ static resolution_param_t  debug_prev_resolution_array[] = {
 
 static resolution_param_t  prev_resolution_array[] = {
 	{
+		.frmsize			= {176, 144},
+		.active_frmsize		= {1280, 960},
+		.active_fps			= 30,
+		.size_type			= SIZE_176X144,
+		.reg_script[0]			= OV5647_preview_960P_script,
+		.reg_script[1]			= OV5647_VGA_script_mipi,
+	},{
 		.frmsize			= {352, 288},
 		.active_frmsize		= {1280, 960},
 		.active_fps			= 30,
@@ -2885,9 +2899,9 @@ static int set_flip(struct ov5647_device *dev)
         return 0;
 }
 
-static resulution_size_t get_size_type(int width, int height)
+static resolution_size_t get_size_type(int width, int height)
 {
-	resulution_size_t rv = SIZE_NULL;
+	resolution_size_t rv = SIZE_NULL;
 	if (width * height >= 2500 * 1900)
 		rv = SIZE_2592X1944;
 	else if (width * height >= 2048 * 1536)
@@ -2910,6 +2924,8 @@ static resulution_size_t get_size_type(int width, int height)
 		rv = SIZE_352X288;
 	else if (width * height >= 320 * 240)
 		rv = SIZE_320X240;
+	else if (width * height >= 176 * 144)
+		rv = SIZE_176X144;
 	return rv;
 }
 
@@ -2944,7 +2960,7 @@ static resolution_param_t* get_resolution_param(struct ov5647_device *dev, int o
     int i = 0;
     int arry_size = 0;
     resolution_param_t* tmp_resolution_param = NULL;
-    resulution_size_t res_type = SIZE_NULL;
+    resolution_size_t res_type = SIZE_NULL;
     printk("target resolution is %dX%d\n", width, height);
     res_type = get_size_type(width, height);
     if (res_type == SIZE_NULL)
diff --git a/include/linux/amlogic/camera/aml_cam_info.h b/include/linux/amlogic/camera/aml_cam_info.h
index 3937ee0ec3d9..51900076320b 100755
--- a/include/linux/amlogic/camera/aml_cam_info.h
+++ b/include/linux/amlogic/camera/aml_cam_info.h
@@ -11,8 +11,9 @@
 #define FRONT_CAM	0
 #define BACK_CAM	1
 
-typedef enum resulution_size {
+typedef enum resolution_size {
 	SIZE_NULL = 0,
+	SIZE_176X144,	//4:3
 	SIZE_320X240,	//4:3
 	SIZE_352X288,   //4:3
 	SIZE_640X480,	//0.3M	4:3
@@ -38,6 +39,7 @@ typedef enum resulution_size {
 	SIZE_2592X1944,	//5M	4:3
 	SIZE_3072X1728,	//5M	16:9
 	SIZE_2816X2112,	//6M	4:3
+	SIZE_3264X1836, //6m    16:9 
 	SIZE_3072X2304,	//7M	4:3
 	SIZE_3200X2400,	//7.5M	4:3
 	SIZE_3264X2448,	//8M	4:3
@@ -54,7 +56,7 @@ typedef enum resulution_size {
 	SIZE_5120X2880,	//15M	16:9
 	SIZE_5120X3840,	//20M	4:3
 	SIZE_6400X4800,	//30M	4:3
-} resulution_size_t;
+} resolution_size_t;
 
 typedef int(*aml_cam_probe_fun_t)(struct i2c_adapter *);
 
@@ -80,7 +82,7 @@ typedef struct {
 	gpio_t pwdn_pin;
 	gpio_t rst_pin;
 	gpio_t flash_ctrl_pin;
-	resulution_size_t max_cap_size;
+	resolution_size_t max_cap_size;
 	tvin_color_fmt_t bayer_fmt;
 	char* config;
 }aml_cam_info_t;
-- 
2.19.0

