From afe18fac8aa5db4dd63483c59baea55d4584257e Mon Sep 17 00:00:00 2001
From: "wenjie.li" <wenjie.li@amlogic.com>
Date: Fri, 17 Jan 2014 18:44:54 +0800
Subject: [PATCH 3108/5965] PD#85581 add new mipi panel LD070WX4,and update
 mipi_dsi_driver and solve conflict on android4.4

---
 arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd  | 11 ++-
 arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd  | 11 ++-
 arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd  | 77 ++++++++++++++++---
 arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd  | 28 ++++---
 .../mach-meson8/include/mach/mipi_dsi_reg.h   |  0
 drivers/amlogic/display/vout/lcdoutc.c        | 76 ++++++++++++++----
 drivers/amlogic/display/vout/mipi_dsi_util.c  | 52 ++++++++-----
 drivers/amlogic/display/vout/mipi_dsi_util.h  |  8 +-
 include/linux/amlogic/vout/lcdoutc.h          |  8 +-
 9 files changed, 202 insertions(+), 69 deletions(-)
 rename drivers/amlogic/display/vout/mipi_dsi_phy_reg.h => arch/arm/mach-meson8/include/mach/mipi_dsi_reg.h (100%)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
index ad82e7393343..446a1585d9de 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
@@ -1070,8 +1070,9 @@ sdio{
 //$$ L2 PROP_U32 2 = "hsync_width_backporch"
 //$$ L2 PROP_U32 2 = "vsync_width_backporch"
 //$$ L2 PROP_U32 2 = "pol_hsync_vsync"
-//$$ L2 PROP_U32 = "lane_num"
-//$$ L2 PROP_U32 = "dsi_clk_min_max"
+//$$ L2 PROP_U32 = "dsi_lane_num"
+//$$ L2 PROP_U32 = "dsi_bit_rate_min_max"
+//$$ L2 PROP_U32 = "dsi_sleep_out_display_on_delay"
 	lcd_B080XAN01:lcd_B080XAN01{	//k101
 		model_name="B080XAN01";	/** lcd model name */
 		interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
@@ -1085,8 +1086,10 @@ sdio{
 		hsync_width_backporch=<64 56>;	/** hsync_width, hsync_backporch(include hsync_width) */
 		vsync_width_backporch=<50 30>;	/** vsync_width, vsync_backporch(include vsync_width) */
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
-                lane_num=<4>;//lane num
-    dsi_clk_min_max=<500 600>;/*area of bit rate of one lane:(dsi_clk_min=500, dsi_clk_max=600)*/
+		
+    dsi_lane_num=<4>;/** mipi dsi data lane number */
+    dsi_bit_rate_min_max=<500 600>;/** range of mipi dsi data lane bit rate(unit: MHz) */
+    dsi_sleep_out_display_on_delay=<20 20>; /** mipi dsi basic delay: (unit: ms) */
 	};
 
 //$$ MATCH "lcd_model_config_match" = <&lcd_CLAP070NJ02>
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
index 05d72f2b4ca1..194b3ce5a699 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
@@ -1072,8 +1072,9 @@ sdio{
 //$$ L2 PROP_U32 2 = "hsync_width_backporch"
 //$$ L2 PROP_U32 2 = "vsync_width_backporch"
 //$$ L2 PROP_U32 2 = "pol_hsync_vsync"
-//$$ L2 PROP_U32 = "lane_num"
-//$$ L2 PROP_U32 = "dsi_clk_min_max"
+//$$ L2 PROP_U32 = "dsi_lane_num"
+//$$ L2 PROP_U32 = "dsi_bit_rate_min_max"
+//$$ L2 PROP_U32 = "dsi_sleep_out_display_on_delay"
 	lcd_B080XAN01:lcd_B080XAN01{	//k101
 		model_name="B080XAN01";	/** lcd model name */
 		interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
@@ -1087,8 +1088,10 @@ sdio{
 		hsync_width_backporch=<64 56>;	/** hsync_width, hsync_backporch(include hsync_width) */
 		vsync_width_backporch=<50 30>;	/** vsync_width, vsync_backporch(include vsync_width) */
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
-                lane_num=<4>;//lane num
-    dsi_clk_min_max=<500 600>;/*area of bit rate of one lane:(dsi_clk_min=500, dsi_clk_max=600)*/
+		
+    dsi_lane_num=<4>;/** mipi dsi data lane number */
+    dsi_bit_rate_min_max=<500 600>;/** range of mipi dsi data lane bit rate(unit: MHz) */
+    dsi_sleep_out_display_on_delay=<20 20>; /** mipi dsi basic delay: (unit: ms) */
 	};
 
 //$$ MATCH "lcd_model_config_match" = <&lcd_CLAP070NJ02>
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
index 01a24cde4c60..469b70b2ca76 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
@@ -936,7 +936,7 @@ sdio{
 
 		/* recommend settings, you can modify them if needed. */
 		valid_hvsync_de=<1 1>;	/** hvsync_signal_valid, DE_signal_valid : (0=disable signal, 1=enable signal) */
-		hsign_hoffset_vsign_voffset=<1 0 1 0>;	/** hsign, hoffset, vsign, voffset :("sign-offset" is a pair. sign: 0 for negative, 1 for positive) */
+		hsign_hoffset_vsign_voffset=<1 0 1 0>;	/** hsign, hoffset, vsign, voffset :("sign-offset" is a pair. sign: 0 for positive, 1 for negative) */
 
 		dither_user_ctrl=<0 0x000>;	/**  dither_user(0=auto setting, 1=user define), dither_ctrl(user defined dither control, only valid when user_define=1) */
 		vadj_brightness_contrast_saturation=<0x0 0x80 0x100>;	/** video adjust brightness, contrast, saturation */
@@ -1039,8 +1039,9 @@ sdio{
 //$$ L2 PROP_U32 2 = "hsync_width_backporch"
 //$$ L2 PROP_U32 2 = "vsync_width_backporch"
 //$$ L2 PROP_U32 2 = "pol_hsync_vsync"
-//$$ L2 PROP_U32 = "lane_num"
-//$$ L2 PROP_U32 2 = "dsi_clk_min_max"
+//$$ L2 PROP_U32 = "dsi_lane_num"
+//$$ L2 PROP_U32 = "dsi_bit_rate_min_max"
+//$$ L2 PROP_U32 = "dsi_sleep_out_display_on_delay"
 	lcd_B080XAN01:lcd_B080XAN01{	//k101
 		model_name="B080XAN01";	/** lcd model name */
 		interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
@@ -1054,10 +1055,61 @@ sdio{
 		hsync_width_backporch=<64 120>;	/** hsync_width, hsync_backporch(include hsync_width) */
 		vsync_width_backporch=<50 80>;	/** vsync_width, vsync_backporch(include vsync_width) */
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
-    lane_num=<4>;//lane num
-    dsi_clk_min_max=<500 600>;/*area of bit rate of one lane:(dsi_clk_min=500, dsi_clk_max=600)*/
+		
+    dsi_lane_num=<4>;/** mipi dsi data lane number */
+    dsi_bit_rate_min_max=<500 600>;/** range of mipi dsi data lane bit rate(unit: MHz) */
+    dsi_sleep_out_display_on_delay=<20 20>; /** mipi dsi basic delay: (unit: ms) */
+	};
+
+//$$ MATCH "lcd_model_config_match" = <&lcd_LD070WX4>
+//$$ L2 PROP_STR = "model_name"
+//$$ L2 PROP_STR = "interface"
+//$$ L2 PROP_U32 2 = "active_area"
+//$$ L2 PROP_U32 2 = "lcd_bits_option"
+//$$ L2 PROP_U32 2 = "resolution"
+//$$ L2 PROP_U32 2 = "period"
+//$$ L2 PROP_U32 2 = "clock_hz_pol"
+//$$ L2 PROP_U32 2 = "hsync_width_backporch"
+//$$ L2 PROP_U32 2 = "vsync_width_backporch"
+//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
+//$$ L2 PROP_U32 = "vsync_horizontal_phase"
+//$$ L2 PROP_U32 = "dsi_lane_num"
+//$$ L2 PROP_U32 2 = "dsi_bit_rate_min_max"
+//$$ L2 PROP_U32 2 = "dsi_transfer_mode"
+//$$ L2 PROP_U32 2 = "dsi_power_on_cmd"
+//$$ L2 PROP_U32 2 = "dsi_sleep_out_display_on_delay"
+lcd_LD070WX4:lcd_LD070WX4{
+		model_name="LD070WX4";	/** lcd model name */
+		interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
+		active_area=<94 151>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
+		lcd_bits_option=<8 0>;		/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */
+
+		resolution=<800 1280>;	/** horizontal resolution, vertical resolution */
+		period=<864 1315>;		/** horizontal period(htotal), vertical period(vtotal) */
+
+		clock_hz_pol=<56800000 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
+		hsync_width_backporch=<4 48>;	/** hsync_width, hsync_backporch(include hsync_width) */
+		vsync_width_backporch=<2 23>;	/** vsync_width, vsync_backporch(include vsync_width) */
+		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
+		vsync_horizontal_phase=<1 4>; /** adj_sign(0=positive, 1=negative), adj_value. default is <0 0> */
+		
+		dsi_lane_num=<4>;/** mipi dsi data lane number */
+		dsi_bit_rate_min_max=<400 500>;/** range of mipi dsi data lane bit rate(unit: MHz) */
+		dsi_transfer_mode=<0>;/** mipi dsi transfer mode: (0=command mode, 1=video mode) */
+		dsi_power_on_cmd =<  0x01  0x0
+										 0xFF  0x20     
+										 0xAE  0x0B 
+										 0xEE  0xEA 
+										 0xEF  0x5F 
+										 0xF2  0x68 
+										 0xEE  0x0 
+										 0xEF  0x0 
+										 0xFF  0xFF
+           				>;/** special power on command, 2 data is a pair(reg, value), if the first valu is 0xff, second value is delay time(unit: ms), ending flag is 0xff,0xff.*/
+   dsi_sleep_out_display_on_delay=<200 100>; /** mipi dsi basic delay: (unit: ms) */
 	};
 
+
 //$$ MATCH "lcd_model_config_match" = <&lcd_CLAP070NJ02>
 //$$ L2 PROP_STR = "model_name"
 //$$ L2 PROP_STR = "interface"
@@ -1147,10 +1199,10 @@ sdio{
 //$$ L2 PROP_U32 2 = "hsync_width_backporch"
 //$$ L2 PROP_U32 2 = "vsync_width_backporch"
 //$$ L2 PROP_U32 2 = "pol_hsync_vsync"
-//$$ L2 PROP_U32 = "lane_num"
-//$$ L2 PROP_U32 2 = "pclk_div_lanebyteclk"
-//$$ L2 PROP_U32 2 = "dsi_clk_min_max"     	
-lcd_CLAA101FP05XG:lcd_CLAA101FP05XG{	//k101
+//$$ L2 PROP_U32 = "dsi_lane_num"
+//$$ L2 PROP_U32 2 = "pclk_lanebyteclk_factor"
+//$$ L2 PROP_U32 2 = "dsi_bit_rate_min_max"
+	lcd_CLAA101FP05XG:lcd_CLAA101FP05XG{
 		model_name="CLAA101FP05XG";	/** lcd model name */
 		interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
 		active_area=<216 135>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
@@ -1163,9 +1215,10 @@ lcd_CLAA101FP05XG:lcd_CLAA101FP05XG{	//k101
 		hsync_width_backporch=<32 80>;	/** hsync_width, hsync_backporch(include hsync_width) */
 		vsync_width_backporch=<6 26>;	/** vsync_width, vsync_backporch(include vsync_width) */
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
-    lane_num=<4>;//lane num
-    pclk_div_lanebyteclk =<15>;/**(pix_clk/lane_byte_clk)*10 */                                    
-	  dsi_clk_min_max=<900 1000>;/*area of bit rate of one lane:(dsi_clk_min=900, dsi_clk_max=1000)*/  
+		
+    dsi_lane_num=<4>;/** mipi dsi data lane number */
+    dsi_bit_rate_min_max=<900 1000>;/** range of mipi dsi data lane bit rate(unit: MHz) */
+    pclk_lanebyteclk_factor =<15>;/** special adjust, default is 0 */
 	};
 
 //$$ DEVICE="lcd_extern"
diff --git a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
index 2d0d6a293375..499adad6e92d 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
@@ -1057,8 +1057,9 @@ sdio{
 //$$ L2 PROP_U32 2 = "hsync_width_backporch"
 //$$ L2 PROP_U32 2 = "vsync_width_backporch"
 //$$ L2 PROP_U32 2 = "pol_hsync_vsync"
-//$$ L2 PROP_U32 = "lane_num"
-//$$ L2 PROP_U32 2 = "factor"
+//$$ L2 PROP_U32 = "dsi_lane_num"
+//$$ L2 PROP_U32 = "dsi_bit_rate_min_max"
+//$$ L2 PROP_U32 = "dsi_sleep_out_display_on_delay"
 	lcd_B080XAN01:lcd_B080XAN01{	//k101
 		model_name="B080XAN01";	/** lcd model name */
 		interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
@@ -1069,11 +1070,13 @@ sdio{
 		period=<948 1140>;		/** horizontal period(htotal), vertical period(vtotal) */
 
 		clock_hz_pol=<64843200 0>;	/** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
-		hsync_width_backporch=<64 120>;	/** hsync_width, hsync_backporch(include hsync_width) */
-		vsync_width_backporch=<50 80>;	/** vsync_width, vsync_backporch(include vsync_width) */
+		hsync_width_backporch=<64 56>;	/** hsync_width, hsync_backporch(include hsync_width) */
+		vsync_width_backporch=<50 30>;	/** vsync_width, vsync_backporch(include vsync_width) */
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
-    lane_num=<4>;//lane num
-
+		
+    dsi_lane_num=<4>;/** mipi dsi data lane number */
+    dsi_bit_rate_min_max=<500 600>;/** range of mipi dsi data lane bit rate(unit: MHz) */
+    dsi_sleep_out_display_on_delay=<20 20>; /** mipi dsi basic delay: (unit: ms) */
 	};
 
 //$$ MATCH "lcd_model_config_match" = <&lcd_CLAP070NJ02>
@@ -1165,9 +1168,10 @@ sdio{
 //$$ L2 PROP_U32 2 = "hsync_width_backporch"
 //$$ L2 PROP_U32 2 = "vsync_width_backporch"
 //$$ L2 PROP_U32 2 = "pol_hsync_vsync"
-//$$ L2 PROP_U32 = "lane_num"
-//$$ L2 PROP_U32 2 = "factor"
-	lcd_CLAA101FP05XG:lcd_CLAA101FP05XG{	//k101
+//$$ L2 PROP_U32 = "dsi_lane_num"
+//$$ L2 PROP_U32 2 = "pclk_lanebyteclk_factor"
+//$$ L2 PROP_U32 2 = "dsi_bit_rate_min_max"
+	lcd_CLAA101FP05XG:lcd_CLAA101FP05XG{
 		model_name="CLAA101FP05XG";	/** lcd model name */
 		interface="mipi";		/** lcd_interface(mipi, lvds, edp, ttl) */
 		active_area=<216 135>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
@@ -1180,8 +1184,10 @@ sdio{
 		hsync_width_backporch=<32 80>;	/** hsync_width, hsync_backporch(include hsync_width) */
 		vsync_width_backporch=<6 26>;	/** vsync_width, vsync_backporch(include vsync_width) */
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
-    factor = < 2 3 >;
-    lane_num=<4>;//lane num
+		
+    dsi_lane_num=<4>;/** mipi dsi data lane number */
+    dsi_bit_rate_min_max=<900 1000>;/** range of mipi dsi data lane bit rate(unit: MHz) */
+    pclk_lanebyteclk_factor =<15>;/** special adjust, default is 0 */
 	};
 
 //$$ DEVICE="lcd_extern"
diff --git a/drivers/amlogic/display/vout/mipi_dsi_phy_reg.h b/arch/arm/mach-meson8/include/mach/mipi_dsi_reg.h
similarity index 100%
rename from drivers/amlogic/display/vout/mipi_dsi_phy_reg.h
rename to arch/arm/mach-meson8/include/mach/mipi_dsi_reg.h
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 26d629fc1ffd..96e69ccff05e 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -2561,7 +2561,7 @@ static void lcd_tcon_config(Lcd_Config_t *pConf)
 {
 	unsigned short hstart, hend, vstart, vend;
 	unsigned short h_delay = 0;
-	unsigned short h_offset = 0, v_offset = 0;
+	unsigned short h_offset = 0, v_offset = 0, vsync_h_phase=0;
 	
 	switch (pConf->lcd_basic.lcd_type) {
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
@@ -2601,13 +2601,18 @@ static void lcd_tcon_config(Lcd_Config_t *pConf)
 	pConf->lcd_timing.sth1_vs_addr = 0;
 	pConf->lcd_timing.sth1_ve_addr = pConf->lcd_basic.v_period - 1;
 	
+	vsync_h_phase = (pConf->lcd_timing.vsync_h_phase & 0xffff);
+	if ((pConf->lcd_timing.vsync_h_phase >> 31) & 1) //negative
+		vsync_h_phase = (hstart + pConf->lcd_basic.h_period - vsync_h_phase) % pConf->lcd_basic.h_period;
+	else	//positive
+		vsync_h_phase = (hstart + pConf->lcd_basic.h_period + vsync_h_phase) % pConf->lcd_basic.h_period;
+	pConf->lcd_timing.stv1_hs_addr = vsync_h_phase;
+	pConf->lcd_timing.stv1_he_addr = vsync_h_phase;
 	vstart = (pConf->lcd_timing.de_vstart + pConf->lcd_basic.v_period - pConf->lcd_timing.vsync_bp) % pConf->lcd_basic.v_period;
 	vend = (pConf->lcd_timing.de_vstart + pConf->lcd_basic.v_period - pConf->lcd_timing.vsync_bp + pConf->lcd_timing.vsync_width) % pConf->lcd_basic.v_period;
 	pConf->lcd_timing.stv1_vs_addr = vstart;
 	pConf->lcd_timing.stv1_ve_addr = vend;
-	pConf->lcd_timing.stv1_hs_addr = hstart;
-	pConf->lcd_timing.stv1_he_addr = hstart;
-	
+
 	pConf->lcd_timing.de_hstart = pConf->lcd_timing.de_hstart;
 	pConf->lcd_timing.de_vstart = pConf->lcd_timing.de_vstart;
 	
@@ -2708,10 +2713,13 @@ static void lcd_control_config(Lcd_Config_t *pConf)
 							cfg->dpi_color_type  = 5;
 							cfg->venc_color_type = 1;
 					}
-				cfg->trans_mode = 1;
-        cfg->venc_fmt = TV_ENC_LCD768x1024p;
+				cfg->dsi_clk_div  =1;
 				cfg->dpi_chroma_subsamp = 0;
 				cfg->lane_num=cfg->lane_num-1;
+				if((pDev->pConf->lcd_basic.h_period !=240)&&(pDev->pConf->lcd_basic.h_period !=768)&&(pDev->pConf->lcd_basic.h_period !=1920)&&(pDev->pConf->lcd_basic.h_period !=2560))
+        		cfg->venc_fmt=TV_ENC_LCD1280x720;
+        else
+        		cfg->venc_fmt=TV_ENC_LCD768x1024p;
 			break;
 		case LCD_DIGITAL_EDP:
 			select_edp_link_config(pConf);
@@ -2858,9 +2866,9 @@ static void _init_lcd_driver(Lcd_Config_t *pConf)	//before power on lcd
 		case LCD_DIGITAL_MIPI:
 			set_pll_lcd(pConf);
 			init_dphy(pConf); //analog
-			set_control_mipi(pConf); //2step
 			set_venc_lcd(pConf);
 			set_tcon_lcd(pConf);
+      set_control_mipi(pConf); //2step
 			break;
 		case LCD_DIGITAL_EDP:
 			set_pll_lcd(pConf);
@@ -4017,6 +4025,7 @@ static ssize_t lcd_debug(struct class *class, struct class_attribute *attr, cons
 				if (pDev->pConf->lcd_basic.lcd_type != LCD_DIGITAL_TTL) {
 					init_phy_lvds(pDev->pConf);	
 				}
+				_init_lcd_driver(pDev->pConf);
 				lcd_power_ctrl(ON);
 				_enable_backlight();
 			}
@@ -4179,23 +4188,33 @@ static inline int _get_lcd_model_timing(struct platform_device *pdev)
 			pDev->pConf->lcd_timing.pol_cntl_addr = (pDev->pConf->lcd_timing.pol_cntl_addr & ~((1 << LCD_HS_POL) | (1 << LCD_VS_POL))) | ((lcd_para[0] << LCD_HS_POL) | (lcd_para[1] << LCD_VS_POL));
 		}
 		DBG_PRINT("pol hsync = %u, vsync = %u\n", (pDev->pConf->lcd_timing.pol_cntl_addr >> LCD_HS_POL) & 1, (pDev->pConf->lcd_timing.pol_cntl_addr >> LCD_VS_POL) & 1);
+		ret = of_property_read_u32_array(lcd_model_node,"vsync_horizontal_phase",&lcd_para[0], 2);
+    if(ret){
+			printk("faild to get vsync_horizontal_phase\n");
+			pDev->pConf->lcd_timing.vsync_h_phase = 0;
+        } else {
+            pDev->pConf->lcd_timing.vsync_h_phase  = ((lcd_para[1] << 0) | ((lcd_para[0] & 0xffff) << 31));
+        }
+		if (lcd_para[0] == 0)
+			DBG_PRINT("vsync_horizontal_phase= %d\n", lcd_para[1]);
+		else
+			DBG_PRINT("vsync_horizontal_phase= -%d\n", lcd_para[1]);
 /////////////////////////////////////
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 		if (LCD_DIGITAL_MIPI == pDev->pConf->lcd_basic.lcd_type) {
 
         DSI_Config_t *cfg = pDev->pConf->lcd_control.mipi_config;
-        ret = of_property_read_u32_array(lcd_model_node,"lane_num",&lcd_para[0], 1);
+        ret = of_property_read_u32_array(lcd_model_node,"dsi_lane_num",&lcd_para[0], 1);
         if(ret){
                 printk("faild to get lane num\n");
                 cfg->lane_num = 4;
         } else {
                 cfg->lane_num = lcd_para[0];
         }
-        DBG_PRINT("lane num= %d\n",  cfg->lane_num);
-				cfg->dsi_clk_div  =1;
- 				ret = of_property_read_u32_array(lcd_model_node,"dsi_clk_min_max",&lcd_para[0], 2);
+        DBG_PRINT("dsi_lane_num= %d\n",  cfg->lane_num);
+ 				ret = of_property_read_u32_array(lcd_model_node,"dsi_bit_rate_min_max",&lcd_para[0], 2);
         if(ret){
-        					printk("faild to get dsi_clk_min_max\n");
+        					printk("faild to get dsi_bit_rate_min_max\n");
         					cfg->dsi_clk_min  = 900;
         					cfg->dsi_clk_max  = 1000;
         		} 
@@ -4203,17 +4222,44 @@ static inline int _get_lcd_model_timing(struct platform_device *pdev)
         					cfg->dsi_clk_min  = lcd_para[0];
         					cfg->dsi_clk_max  = lcd_para[1];
 				    }
+				DBG_PRINT("dsi_bit_rate_min_max_div= %d %d\n", cfg->dsi_clk_min,cfg->dsi_clk_max);
 				cfg->denominator = 10;
-        ret = of_property_read_u32_array(lcd_model_node,"pclk_div_lanebyteclk",&lcd_para[0], 2);
+        ret = of_property_read_u32_array(lcd_model_node,"pclk_lanebyteclk_factor",&lcd_para[0], 1);
         if(ret){
-                printk("faild to get pclk_div_lanebyteclk\n");
+                printk("faild to get pclk_lanebyteclk_factor\n");
                 cfg->numerator  = 0; //calculator
         } else {
-                cfg->numerator  = lcd_para[1]; //calculator
+                cfg->numerator  = lcd_para[0]; //calculator
         }
         DBG_PRINT("denominator= %d, numerator=%d\n",  cfg->denominator, cfg->numerator);
+        ret = of_property_read_u32_array(lcd_model_node,"dsi_transfer_mode",&lcd_para[0], 1);
+        if(ret){
+                printk("faild to get dsi_transfer_mode\n");
+                cfg->trans_mode  = 1; //calculator
+        } else {
+                cfg->trans_mode  = lcd_para[0]; //calculator
+        }
+        DBG_PRINT("trans_mode= %d\n",  cfg->trans_mode);
 
+        ret = of_property_read_u32_array(lcd_model_node,"dsi_power_on_cmd",&cfg->mipi_init[0], 20);
+        if(ret){
+                printk("faild to get dsi_power_on_cmd\n");
+                cfg->mipi_init_flag  = 0; 
+        } else {
+                cfg->mipi_init_flag  = 1;
                 }
+        DBG_PRINT("mipi_init_reg= %d\n",  cfg->mipi_init_flag);
+        ret = of_property_read_u32_array(lcd_model_node,"dsi_sleep_out_display_on_delay",&lcd_para[0], 2);
+        if(ret){
+                printk("faild to get dsi_sleep_out_display_on_delay\n");
+                cfg->sleep_out_delay  =100; 
+                cfg->display_on_delay  =100;
+        } else {
+                cfg->sleep_out_delay  =lcd_para[0]; 
+                cfg->display_on_delay  =lcd_para[1];
+        }
+        DBG_PRINT("sleep_out_delay= %d, display_on_delay=%d\n",  cfg->sleep_out_delay,cfg->display_on_delay);
+     }
 #endif
 /////////////////////////////////////
    }
diff --git a/drivers/amlogic/display/vout/mipi_dsi_util.c b/drivers/amlogic/display/vout/mipi_dsi_util.c
index c2a24b2f341c..f76498382adb 100755
--- a/drivers/amlogic/display/vout/mipi_dsi_util.c
+++ b/drivers/amlogic/display/vout/mipi_dsi_util.c
@@ -5,7 +5,7 @@
 #include <linux/amlogic/vout/lcdoutc.h>
 #include <linux/kernel.h>
 #include "mipi_dsi_util.h"
-#include "mipi_dsi_phy_reg.h"
+#include <mach/mipi_dsi_reg.h>
 #include <linux/amlogic/vout/lcd_reg.h>
 
 //#include <asm/arch/io.h>
@@ -36,8 +36,6 @@ void init_mipi_dsi_phy(Lcd_Config_t *p)
         DSI_Config_t *cfg= p->lcd_control.mipi_config;
 
         div = cfg->dsi_clk_div;
-     //   clk_min = cfg->dsi_clk_min;
-      //  clk_max = cfg->dsi_clk_max;
 
         switch (div){
                 case 1:
@@ -663,13 +661,15 @@ extern void wait_bta_ack()
 // Function: wait_cmd_fifo_empty
 // Poll to check if the generic command fifo is empty
 // ----------------------------------------------------------------------------
-extern void wait_cmd_fifo_empty()
+extern void wait_cmd_fifo_empty(void)
 {
         unsigned int cmd_status;
-
+				unsigned int i= 10000;
         do {
+        				i--;
+        				udelay(10);
                 cmd_status = READ_LCD_REG( MIPI_DSI_DWC_CMD_PKT_STATUS_OS);
-        } while(((cmd_status >> BIT_GEN_CMD_EMPTY) & 0x1) != 0x1);
+        } while((((cmd_status >> BIT_GEN_CMD_EMPTY) & 0x1) != 0x1)&&i!=0);
 }
 
 // ----------------------------------------------------------------------------
@@ -1064,7 +1064,7 @@ void powerup_mipi_analog()
 
 void init_phy_mipi(Lcd_Config_t *pConf)
 {
-    powerup_mipi_analog();
+    //powerup_mipi_analog();
     DPRINT("%s, %d\n", __func__, __LINE__);
     mdelay( 10 );
     // Power up MIPI_DSI/DPHY, startup must be ahead of init
@@ -1161,7 +1161,7 @@ void lcd_ports_ctrl_mipi(Lcd_Config_t *p, Bool_t status)
         unsigned int        is_rgb;
         unsigned int        dith10_en, dith8_en, dith5_en;
         unsigned char       trans_mode;
- //       unsigned char       refresh_rate; //available only for 2560x1600
+				int i=0, ending_flag=0;
 
         if(OFF == status){
 
@@ -1202,17 +1202,32 @@ void lcd_ports_ctrl_mipi(Lcd_Config_t *p, Bool_t status)
         mipi_dsi_dpi_color_type = pConf->mipi_config->dpi_color_type;
         lane_num                = pConf->mipi_config->lane_num;
         chroma_subsamp          = pConf->mipi_config->dpi_chroma_subsamp;
-    //    refresh_rate            = pConf->mipi_config->refresh_rate;
-
+        
+				powerup_mipi_analog();
         startup_transfer_video();
-
+        
+				if (pConf->mipi_config->mipi_init_flag ==1) {        	
+        	while(ending_flag == 0) {
+						if(pConf->mipi_config->mipi_init[i]==0xff) {
+							if(pConf->mipi_config->mipi_init[i+1]==0xff)
+								ending_flag = 1;
+							else
+								mdelay(pConf->mipi_config->mipi_init[i+1]);
+						}
+						else {
+							DCS_write_short_packet_1_para(DT_DCS_SHORT_WR_1,vcid,pConf->mipi_config->mipi_init[i], pConf->mipi_config->mipi_init[i+1],req_ack);
+						}
+						i += 2;
+        	}
+        }
+        
         DPRINT("send exit sleep mode\n");
         DCS_write_short_packet_0_para(DT_DCS_SHORT_WR_0,                       // DSI Data Type
                         vcid,                                    // Virtual ID
                         DCS_EXIT_SLEEP_MODE,                     // DCS Command Type
                         req_ack);                                // If need wait ack
 
-        mdelay(10);
+        mdelay(pConf->mipi_config->sleep_out_delay);
 
         DPRINT("send display on\n");
         DCS_write_short_packet_0_para(DT_DCS_SHORT_WR_0,                       // DSI Data Type
@@ -1220,7 +1235,7 @@ void lcd_ports_ctrl_mipi(Lcd_Config_t *p, Bool_t status)
                         DCS_SET_DISPLAY_ON,                      // DCS Command Type
                         req_ack);                                // If need wait ack
         DPRINT("DCS_SET_DISPLAY_ON Test Passed\n");
-        mdelay(10);
+        mdelay(pConf->mipi_config->display_on_delay);
 
         trans_mode = TRANS_VIDEO_MODE;
         set_mipi_dsi_host_to_video_mode(lane_num,                        // Lane number
@@ -1271,15 +1286,14 @@ void dsi_probe( Lcd_Config_t *pConf)
                         cfg->denominator, cfg->numerator, cfg->denominator/cfg->numerator);
         }
 
-        cfg->hline = (basic->h_period*cfg->denominator + cfg->numerator - 1) / cfg->numerator;  // Rounded. Applicable for Period(pixclk)/Period(bytelaneclk)=9/16
-        cfg->hsa   = (t->hsync_width*cfg->denominator + cfg->numerator - 1) / cfg->numerator;
-        cfg->hbp   = (t->hsync_bp * cfg->denominator + cfg->numerator - 1) / cfg->numerator;
+				cfg->hline =(basic->h_period*cfg->denominator + cfg->numerator - 1) / cfg->numerator;  // Rounded. Applicable for Period(pixclk)/Period(bytelaneclk)=9/16
+        cfg->hsa   =(t->hsync_width*cfg->denominator + cfg->numerator - 1) / cfg->numerator;
+        cfg->hbp   =((t->hsync_bp-t->hsync_width) * cfg->denominator + cfg->numerator - 1) / cfg->numerator;
 
         cfg->vsa   = t->vsync_width;
-        cfg->vbp   = t->vsync_bp;
-        cfg->vfp   = t->video_on_line - t->vsync_width - t->vsync_bp;
+        cfg->vbp   = t->vsync_bp -t->vsync_width;
+        cfg->vfp   = basic->v_period  - t->vsync_bp-basic->v_active;
         cfg->vact  = basic->v_active;
-
 }
 #if 0
 int do_dsi(cmd_tbl_t * cmdtp, int flag, int argc, char *argv[])
diff --git a/drivers/amlogic/display/vout/mipi_dsi_util.h b/drivers/amlogic/display/vout/mipi_dsi_util.h
index 65c4b64377ad..9241361daee0 100755
--- a/drivers/amlogic/display/vout/mipi_dsi_util.h
+++ b/drivers/amlogic/display/vout/mipi_dsi_util.h
@@ -4,11 +4,17 @@
 //#include <asm/arch/register.h>
 #include <mach/register.h>
 #include <mach/cpu.h>
-#include "mipi_dsi_phy_reg.h"
+#include <mach/mipi_dsi_reg.h>
 #include <linux/amlogic/vout/lcdoutc.h>
 //#include <asm/arch/lcdoutc.h>
 
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+//#define PRINT_DEBUG_INFO
+#ifdef PRINT_DEBUG_INFO
+#define DPRINT(...)		printk(__VA_ARGS__)
+#else
+#define DPRINT(...)
+#endif
 // --------------------------------------------------------
 // MIPI DSI Data Type/ MIPI DCS Command Type Definitions
 // --------------------------------------------------------
diff --git a/include/linux/amlogic/vout/lcdoutc.h b/include/linux/amlogic/vout/lcdoutc.h
index e8309404a15e..0a9db9d8274d 100755
--- a/include/linux/amlogic/vout/lcdoutc.h
+++ b/include/linux/amlogic/vout/lcdoutc.h
@@ -322,7 +322,7 @@ typedef struct {
 	u16 de_valid;
 	u32 h_offset;
 	u32 v_offset;
-
+	u32 vsync_h_phase;
 	u16 sth1_hs_addr;
 	u16 sth1_he_addr;
 	u16 sth1_vs_addr;
@@ -407,10 +407,9 @@ typedef struct DSI_Config_s{
         unsigned int    dsi_clk_div;
         unsigned int    dsi_clk_max;
         unsigned int    dsi_clk_min; //2^32 = 4294967296 = 4.2G
-
         unsigned int    denominator; //
         unsigned int    numerator;//default 10000
-
+				unsigned int    mipi_init_flag;
         unsigned int    hline;
         unsigned int    hsa;
         unsigned int    hbp;
@@ -431,6 +430,9 @@ typedef struct DSI_Config_s{
         unsigned char   tear_switch;
 
         unsigned char   is_rgb;        //whether dpi color type is rgb
+        unsigned char   mipi_init[20];
+        unsigned int 		sleep_out_delay;
+        unsigned int 		display_on_delay;
 }DSI_Config_t;
 
 typedef struct {
-- 
2.19.0

