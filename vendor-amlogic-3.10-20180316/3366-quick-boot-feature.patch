From 30bdf0dc440c16c4fbcb1decc8d44dc6e4da57a5 Mon Sep 17 00:00:00 2001
From: "jianping.zheng" <jianping.zheng@amlogic.com>
Date: Thu, 23 Jan 2014 12:43:42 +0800
Subject: [PATCH 3366/5965] quick boot feature

---
 drivers/amlogic/input/gpio_key/aml_gpiokey.c | 137 +++++++++++++++++--
 drivers/amlogic/power/ricoh/rn5t618-sply.c   |   2 +-
 2 files changed, 127 insertions(+), 12 deletions(-)

diff --git a/drivers/amlogic/input/gpio_key/aml_gpiokey.c b/drivers/amlogic/input/gpio_key/aml_gpiokey.c
index b6d118d1bf99..f986b2c60a28 100755
--- a/drivers/amlogic/input/gpio_key/aml_gpiokey.c
+++ b/drivers/amlogic/input/gpio_key/aml_gpiokey.c
@@ -45,9 +45,10 @@
 #include <asm/uaccess.h>
 #include <linux/of.h>
 #include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/switch.h>
 
 #define MOD_NAME       "gpio_key"
-#define USE_IRQ     1
+//#define USE_IRQ     1
 
 struct gpio_key{
 	int code;	  /* input key code */
@@ -89,6 +90,13 @@ static struct kp *gp_kp=NULL;
 
 static int timer_count = 0;
 
+static int quick_boot_mode = 0;
+
+static struct switch_dev powerkey_data;
+
+#define PWRKEY_UP_VALUE 0
+#define PWRKEY_DOWN_VALUE 1
+
 static void kp_work(struct kp *kp)
 {
 	struct gpio_key *key;
@@ -101,14 +109,28 @@ static void kp_work(struct kp *kp)
 		//printk("get gpio key status %s(%d)\n",key->name, io_status);
 		if(io_status != key->status ){
 			if (io_status) {
+				//printk("key %d up, quick_boot_mode:%d\n", key->code, quick_boot_mode);
 				printk("key %d up\n", key->code);
-				input_report_key(kp->input, key->code, 0);
-				input_sync(kp->input);
+				if( quick_boot_mode == 0 ) {
+					input_report_key(kp->input, key->code, 0);
+					input_sync(kp->input);
+				} else {
+					if( KEY_POWER == key->code ) {
+						switch_set_state((struct switch_dev *)&powerkey_data, PWRKEY_UP_VALUE );
+					}
+				}
 			}
 			else {
+				//printk("key %d down, quick_boot_mode:%d\n", key->code, quick_boot_mode);
 				printk("key %d down\n", key->code);
-				input_report_key(kp->input, key->code, 1);
-				input_sync(kp->input);
+				if( quick_boot_mode == 0 ) {
+					input_report_key(kp->input, key->code, 1);
+					input_sync(kp->input);
+				} else {
+					if( KEY_POWER == key->code ) {	
+						switch_set_state((struct switch_dev *)&powerkey_data, PWRKEY_DOWN_VALUE );
+					}
+				}
 			}
 			key->status = io_status;
 		}
@@ -202,6 +224,66 @@ static int register_keypad_dev(struct kp  *kp)
     return ret;
 }
 
+static ssize_t set_quick_boot_mode(struct device_driver *ddri, const char *buf, size_t count)
+{
+        unsigned int value;
+
+        if ( (sscanf(buf, "%u", &value) != 1) || ( value != 1 && value != 0 ) ) {
+                printk("set_quick_boot_mode: Invalid values\n");
+                return -EINVAL;
+        }
+
+        quick_boot_mode = value;
+        printk("set_quick_boot_mode, quick_boot_mode=%d \n",quick_boot_mode);
+
+        return count;
+}
+
+
+static DRIVER_ATTR(quick_boot_mode, S_IWUSR | S_IRUGO, NULL, set_quick_boot_mode );
+
+static struct driver_attribute *gpiokey_attr_list[] = {
+        &driver_attr_quick_boot_mode,        
+};
+
+static int gpiokey_create_attr(struct device_driver *driver) 
+{
+        int idx, err = 0;
+        int num = (int)(sizeof(gpiokey_attr_list)/sizeof(gpiokey_attr_list[0]));
+        if (driver == NULL)
+        {
+                return -EINVAL;
+        }
+
+        for(idx = 0; idx < num; idx++)
+        {
+                if((err = driver_create_file(driver, gpiokey_attr_list[idx])))
+                {            
+                        printk("driver_create_file (%s) = %d\n", gpiokey_attr_list[idx]->attr.name, err);
+                        break;
+                }
+        }    
+        return err;
+}
+
+static int gpiokey_delete_attr(struct device_driver *driver)
+{
+        int idx ,err = 0;
+        int num = (int)(sizeof(gpiokey_attr_list)/sizeof(gpiokey_attr_list[0]));
+
+        if(driver == NULL)
+        {
+                return -EINVAL;
+        }
+        
+        for(idx = 0; idx < num; idx++)
+        {
+                driver_remove_file(driver, gpiokey_attr_list[idx]);
+        }
+
+        return err;
+}
+
 static int gpio_key_probe(struct platform_device *pdev)
 {
 	const char* str;
@@ -434,11 +516,14 @@ static int gpio_key_resume(struct platform_device *dev)
 {
     printk("gpio_key_resume");
     if (READ_AOBUS_REG(AO_RTI_STATUS_REG2) == 0x1234abcd) {
-        // power button, not alarm
-        input_report_key(gp_kp->input, KEY_POWER, 0);
-        input_sync(gp_kp->input);
-        input_report_key(gp_kp->input, KEY_POWER, 1);
-        input_sync(gp_kp->input);	
+	if( quick_boot_mode == 0 ) { 
+        	// power button, not alarm
+		//printk("gpio_key_resume send KEY_POWER\n");
+        	input_report_key(gp_kp->input, KEY_POWER, 0);
+        	input_sync(gp_kp->input);
+        	input_report_key(gp_kp->input, KEY_POWER, 1);
+        	input_sync(gp_kp->input);
+	}	
 
         WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0);
 
@@ -473,12 +558,42 @@ static struct platform_driver gpio_driver = {
 static int __init gpio_key_init(void)
 {
     printk(KERN_INFO "GPIO Keypad Driver init.\n");
-    return platform_driver_register(&gpio_driver);
+
+    int ret = 0;
+
+    ret = platform_driver_register(&gpio_driver);
+
+    if( gpiokey_create_attr(&gpio_driver.driver) != 0 )
+    {
+        printk("create attribute error\n");
+    }
+
+    powerkey_data.name = "powerkey";
+    powerkey_data.index = 0;
+    powerkey_data.state = 0;
+			
+    ret = switch_dev_register(&powerkey_data);
+    if(ret)
+    {
+	printk("switch_dev_register returned:%d!\n", ret);
+	return 1;
+    }
+
+    return ret;
 }
 
 static void __exit gpio_key_exit(void)
 {
     printk(KERN_INFO "GPIO Keypad Driver exit.\n");
+   
+    switch_dev_unregister(&powerkey_data);
+ 
+    int nRet = 0;
+    if((nRet = gpiokey_delete_attr(&gpio_driver.driver)))
+    {
+        printk("delete attribute err = %d\n", nRet);
+    }
+
     platform_driver_unregister(&gpio_driver);
 }
 
diff --git a/drivers/amlogic/power/ricoh/rn5t618-sply.c b/drivers/amlogic/power/ricoh/rn5t618-sply.c
index 6ebb5d55fabc..b0772ada3486 100755
--- a/drivers/amlogic/power/ricoh/rn5t618-sply.c
+++ b/drivers/amlogic/power/ricoh/rn5t618-sply.c
@@ -1651,7 +1651,7 @@ static int rn5t618_suspend(struct platform_device *dev, pm_message_t state)
                   __func__, early_power_status, supply->aml_charger.ext_valid);
         input_report_key(rn5t618_power_key, KEY_POWER, 1);              // assume power key pressed 
         input_sync(rn5t618_power_key);
-        return -1;
+        return 0;
     }
     in_early_suspend = 0;
 #endif
-- 
2.19.0

