From ec40c898c478a1f1c19d0b6b281a55a22adb9cf2 Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Fri, 21 Feb 2014 17:07:10 +0800
Subject: [PATCH 3423/5965] PD#86914:optimize backlight power  delay after
 power on lcd

---
 arch/arm/boot/dts/amlogic/meson6_g24.dtd      |  4 +-
 arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd   |  5 +-
 arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd  |  2 +
 arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd  |  2 +
 .../arm/boot/dts/amlogic/meson8_k101_512M.dtd |  2 +
 arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd  |  5 +-
 drivers/amlogic/display/backlight/aml.dtd     |  2 +
 drivers/amlogic/display/backlight/aml_bl.c    | 78 ++++++++++++++-----
 drivers/amlogic/display/vout/lcdoutc.c        | 17 ++--
 .../linux/amlogic}/aml_lcd_bl.h               |  0
 10 files changed, 87 insertions(+), 30 deletions(-)
 rename {drivers/amlogic/display/backlight => include/linux/amlogic}/aml_lcd_bl.h (100%)

diff --git a/arch/arm/boot/dts/amlogic/meson6_g24.dtd b/arch/arm/boot/dts/amlogic/meson6_g24.dtd
index 556616074632..364d87a2df37 100755
--- a/arch/arm/boot/dts/amlogic/meson6_g24.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6_g24.dtd
@@ -445,7 +445,9 @@
 		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
+		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<0>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
+		
 		bl_gpio_port="GPIOD_1";	/** backlight control gpio port */
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_D","0";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
@@ -523,7 +525,7 @@
 		power_on_step_13="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_on_step_14="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_on_step_15="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_delay=<20 20 200 0 0 0 0 0 0 0 0 0 0 0 0>;	/** power on delay after each step */
+		power_on_delay=<20 20 20 0 0 0 0 0 0 0 0 0 0 0 0>;	/** power on delay after each step */
 		power_off_step_1="signal","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_off_step_2="pmu","GPIO3","2";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_off_step_3="cpu","GPIOA_27","0";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
diff --git a/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd b/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd
index f2684c46089d..bc15dfac7ed4 100755
--- a/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd
@@ -785,6 +785,7 @@ void root_func(){
 //$$ L2 PROP_STR = "status"
 //$$ L2 PROP_CHOICE "Bl_pin_0_match" = "pinctrl-0"
 //$$ L2 PROP_U32 = "bl_level_default"
+//$$ L2 PROP_U32 = "bl_power_on_delay"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -803,7 +804,9 @@ void root_func(){
 		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
+		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<0>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
+		
 		bl_gpio_port="GPIOD_1";	/** backlight control gpio port */
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_D","0";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
@@ -945,7 +948,7 @@ void root_func(){
 		power_on_step_13="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_on_step_14="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_on_step_15="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_delay=<0 10 20 10 200 0 0 0 0 0 0 0 0 0 0>;	/** power on delay after each step */
+		power_on_delay=<0 10 20 10 20 0 0 0 0 0 0 0 0 0 0>;	/** power on delay after each step */
 		power_off_step_1="signal";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_off_step_2="pmu","GPIO3","2";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_off_step_3="cpu","GPIOD_8","0";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
index 1f3f6f57ce9f..6066dacc698f 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
@@ -840,6 +840,7 @@ sdio{
 //$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
 //$$ L2 PROP_U32 2= "bl_level_middle_mapping"
 //$$ L2 PROP_U32 2= "bl_level_max_min"
+//$$ L2 PROP_U32 = "bl_power_on_delay"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -864,6 +865,7 @@ sdio{
 		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
+		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. decided by hardware design) */
 		
 		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
index 1d964d4e4812..d893de198344 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
@@ -853,6 +853,7 @@ sdio{
 //$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
 //$$ L2 PROP_U32 2= "bl_level_middle_mapping"
 //$$ L2 PROP_U32 2= "bl_level_max_min"
+//$$ L2 PROP_U32 = "bl_power_on_delay"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -877,6 +878,7 @@ sdio{
 		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
+		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. decided by hardware design) */
 		
 		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
index 3c4362a8fe2f..b668196d3c1e 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
@@ -806,6 +806,7 @@ sdio{
 //$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
 //$$ L2 PROP_U32 2= "bl_level_middle_mapping"
 //$$ L2 PROP_U32 2= "bl_level_max_min"
+//$$ L2 PROP_U32 = "bl_power_on_delay"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -830,6 +831,7 @@ sdio{
 		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
+		bl_power_on_delay=<100>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<3>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. decided by hardware design) */
 		
 		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
index 00d0f44a513c..16e19ca39ce2 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
@@ -841,6 +841,7 @@ sdio{
 //$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
 //$$ L2 PROP_U32 2= "bl_level_middle_mapping"
 //$$ L2 PROP_U32 2= "bl_level_max_min"
+//$$ L2 PROP_U32 = "bl_power_on_delay"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -865,7 +866,9 @@ sdio{
 		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
-		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. decided by hardware design) */
+		bl_power_on_delay=<100>; /** delay time before backlight power on(unit: ms) */
+		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
+		
 		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
diff --git a/drivers/amlogic/display/backlight/aml.dtd b/drivers/amlogic/display/backlight/aml.dtd
index acb46fec9324..c73ca018a7f4 100755
--- a/drivers/amlogic/display/backlight/aml.dtd
+++ b/drivers/amlogic/display/backlight/aml.dtd
@@ -6,6 +6,7 @@
 //$$ L2 PROP_U32 2= "bl_level_default_uboot_kernel"
 //$$ L2 PROP_U32 2= "bl_level_middle_mapping"
 //$$ L2 PROP_U32 2= "bl_level_max_min"
+//$$ L2 PROP_U32 = "bl_power_on_delay"
 //$$ L2 PROP_U32 = "bl_ctrl_method"
 //$$ L2 PROP_STR = "bl_gpio_port"
 //$$ L2 PROP_U32 2 = "bl_gpio_dim_max_min"
@@ -30,6 +31,7 @@
 		bl_level_max_min=<255 10>;	/** brightness level max & min, must match the rootfs setting*/
 		
 		/* backlight power ctrl */
+		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. 3=pwm_combo. decided by hardware design) */
 		
 		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
diff --git a/drivers/amlogic/display/backlight/aml_bl.c b/drivers/amlogic/display/backlight/aml_bl.c
index dcdc9d47bcbb..0f26a07f0116 100755
--- a/drivers/amlogic/display/backlight/aml_bl.c
+++ b/drivers/amlogic/display/backlight/aml_bl.c
@@ -31,6 +31,7 @@
 #include <linux/backlight.h>
 #include <linux/slab.h>
 #include <linux/amlogic/aml_bl.h>
+#include <linux/workqueue.h>
 #include <mach/power_gate.h>
 #ifdef CONFIG_ARCH_MESON6    
 #include <mach/mod_gate.h>
@@ -38,6 +39,7 @@
 #include <linux/amlogic/aml_gpio_consumer.h>
 #include <linux/pinctrl/consumer.h>
 #include <linux/delay.h>
+#include <linux/amlogic/aml_lcd_bl.h>
 
 //#define MESON_BACKLIGHT_DEBUG
 #ifdef MESON_BACKLIGHT_DEBUG
@@ -57,7 +59,6 @@
 #define bl_gpio_get_value(gpio) 			amlogic_get_value(gpio, BL_NAME)
 #define bl_gpio_set_value(gpio,val) 		amlogic_set_value(gpio, val, BL_NAME)
 
-#include "aml_lcd_bl.h"
 #ifdef LCD_BACKLIGHT_SUPPORT
 /* for lcd backlight power */
 typedef enum {
@@ -90,6 +91,7 @@ typedef struct {
 	unsigned level_mid_mapping;
 	unsigned level_min;
 	unsigned level_max;
+	unsigned short power_on_delay;
     unsigned char method;
 	int gpio;
 	unsigned dim_max;
@@ -116,6 +118,8 @@ typedef struct {
 	unsigned combo_low_duty_min;
 	
 	struct pinctrl *p;
+	struct workqueue_struct *workqueue;
+	struct delayed_work bl_delayed_work;
 } Lcd_Bl_Config_t;
 
 static Lcd_Bl_Config_t bl_config;
@@ -126,18 +130,15 @@ static int bl_real_status = 1;
 #define FIN_FREQ				(24 * 1000)
 
 static DEFINE_MUTEX(bl_power_mutex);
-void bl_power_on(int bl_flag)
+static void power_on_bl(void)
 {
 	struct pinctrl_state *s;
 	int ret;
-
-	mutex_lock(&bl_power_mutex);
-	if (bl_flag == LCD_BL_FLAG)
-		bl_status = 1;
 	
-	DPRINT("%s(bl_flag=%s): bl_level=%u, bl_status=%s, bl_real_status=%s\n", __FUNCTION__, (bl_flag ? "LCD_BL_FLAG" : "DRV_BL_FLAG"), bl_level, (bl_status ? "ON" : "OFF"), (bl_real_status ? "ON" : "OFF"));
-	if ((bl_level == 0) || (bl_real_status == 1)) {
-		goto exit_bl_power_on;
+	mutex_lock(&bl_power_mutex);
+	DPRINT("%s: bl_level=%u, bl_status=%s, bl_real_status=%s\n", __FUNCTION__, bl_level, (bl_status ? "ON" : "OFF"), (bl_real_status ? "ON" : "OFF"));
+	if ((bl_level == 0) || (bl_status == 0)) {
+		goto exit_power_on_bl;
 	}
 	
 	if (bl_config.method == BL_CTL_GPIO) {
@@ -177,20 +178,20 @@ void bl_power_on(int bl_flag)
 	
 		if (IS_ERR(bl_config.p)) {
 			printk("set backlight pinmux error.\n");
-			goto exit_bl_power_on;
+			goto exit_power_on_bl;
 		}
 		s = pinctrl_lookup_state(bl_config.p, "default");	//select pinctrl
 		if (IS_ERR(s)) {
 			printk("set backlight pinmux error.\n");
 			devm_pinctrl_put(bl_config.p);
-			goto exit_bl_power_on;
+			goto exit_power_on_bl;
 		}
 	
 		ret = pinctrl_select_state(bl_config.p, s);	//set pinmux and lock pins
 		if (ret < 0) {
 			printk("set backlight pinmux error.\n");
 			devm_pinctrl_put(bl_config.p);
-			goto exit_bl_power_on;
+			goto exit_power_on_bl;
 		}
 		mdelay(20);
 		if (bl_config.pwm_gpio_used) {
@@ -258,33 +259,51 @@ void bl_power_on(int bl_flag)
 	
 		if (IS_ERR(bl_config.p)) {
 			printk("set backlight pinmux error.\n");
-			goto exit_bl_power_on;
+			goto exit_power_on_bl;
 		}
 		s = pinctrl_lookup_state(bl_config.p, "pwm_combo");	//select pinctrl	
 		if (IS_ERR(s)) {
 			printk("set backlight pinmux error.\n");
 			devm_pinctrl_put(bl_config.p);
-			goto exit_bl_power_on;
+			goto exit_power_on_bl;
 		}
 	
 		ret = pinctrl_select_state(bl_config.p, s);	//set pinmux and lock pins
 		if (ret < 0) {
 			printk("set backlight pinmux error.\n");
 			devm_pinctrl_put(bl_config.p);
-			goto exit_bl_power_on;
+			goto exit_power_on_bl;
 		}
 	}
 	else {
 		printk("Wrong backlight control method\n");
-		goto exit_bl_power_on;
+		goto exit_power_on_bl;
 	}
 	bl_real_status = 1;
 	printk("backlight power on\n");
 	
-exit_bl_power_on:
+exit_power_on_bl:
 	mutex_unlock(&bl_power_mutex);
 }
 
+void bl_power_on(int bl_flag)
+{
+	mutex_lock(&bl_power_mutex);
+	if (bl_flag == LCD_BL_FLAG)
+		bl_status = 1;
+	
+	DPRINT("%s(bl_flag=%s): bl_level=%u, bl_status=%s, bl_real_status=%s\n", __FUNCTION__, (bl_flag ? "LCD_BL_FLAG" : "DRV_BL_FLAG"), bl_level, (bl_status ? "ON" : "OFF"), (bl_real_status ? "ON" : "OFF"));
+	if ((bl_level == 0) || (bl_real_status == 1)) {
+		mutex_unlock(&bl_power_mutex);
+		return;
+	}
+	
+	mutex_unlock(&bl_power_mutex);
+	queue_delayed_work(bl_config.workqueue, &bl_config.bl_delayed_work, msecs_to_jiffies(bl_config.power_on_delay)); 
+	
+	DPRINT("bl_power_on...\n");
+}
+
 void bl_power_off(int bl_flag)
 {
 	mutex_lock(&bl_power_mutex);
@@ -678,9 +697,19 @@ static inline int _get_backlight_config(struct platform_device *pdev)
 		}
 		DPRINT("bl level max=%u, min=%u\n", bl_config.level_max, bl_config.level_min);
 		
+		ret = of_property_read_u32(pdev->dev.of_node, "bl_power_on_delay", &val);
+		if (ret) {
+			printk("faild to get bl_power_on_delay\n");
+			bl_config.power_on_delay = 100;
+		}
+		else {
+			val = val & 0xffff;
+			bl_config.power_on_delay = (unsigned short)val;
+		}
+		DPRINT("bl power_on_delay: %ums\n", bl_config.power_on_delay);
 		ret = of_property_read_u32(pdev->dev.of_node, "bl_ctrl_method", &val);
 		if (ret) {
-			printk("faild to get bl_ctrl_method!\n");
+			printk("faild to get bl_ctrl_method\n");
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 			bl_config.method = BL_CTL_GPIO;
 #elif (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
@@ -692,6 +721,7 @@ static inline int _get_backlight_config(struct platform_device *pdev)
 			bl_config.method = (unsigned char)val;
 		}
 		DPRINT("bl control_method: %s(%u)\n", bl_ctrl_method_table[bl_config.method], bl_config.method);
+		
 		ret = of_property_read_string_index(pdev->dev.of_node, "bl_pwm_port_gpio_used", 1, &str);
 		if (ret) {
 			printk("faild to get bl_pwm_port_gpio_used!\n");
@@ -990,6 +1020,14 @@ static int aml_bl_probe(struct platform_device *pdev)
     if (pdata->set_bl_level)
         pdata->set_bl_level(bldev->props.brightness);
 	
+	//init workqueue	
+	INIT_DELAYED_WORK(&bl_config.bl_delayed_work, power_on_bl);
+	//bl_config.workqueue = create_singlethread_workqueue("bl_power_on_queue");
+	bl_config.workqueue = create_workqueue("bl_power_on_queue");
+	if (bl_config.workqueue == NULL) {
+		printk("can't create bl work queue\n");
+	}
+	
 	printk("aml bl probe OK.\n");
     return 0;
 
@@ -1003,6 +1041,10 @@ static int __exit aml_bl_remove(struct platform_device *pdev)
     struct aml_bl *amlbl = platform_get_drvdata(pdev);
 
     DTRACE();
+	
+	if (bl_config.workqueue)
+		destroy_workqueue(bl_config.workqueue);
+	
     backlight_device_unregister(amlbl->bldev);
     platform_set_drvdata(pdev, NULL);
     kfree(amlbl);
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 0ce6f858ba85..9c999b4e7cee 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -49,13 +49,13 @@
 #include <linux/notifier.h>
 #include <linux/reboot.h>
 #include <linux/of.h>
-#include <linux/amlogic/aml_gpio_consumer.h>
-#include <linux/pinctrl/consumer.h>
-#include "../backlight/aml_lcd_bl.h"
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/amlogic/aml_lcd_bl.h>
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 #include <mach/mlvds_regs.h>
 #endif
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 #include "edp_drv.h"
 #include "mipi_dsi_util.h"
 #endif
@@ -2838,17 +2838,13 @@ static void switch_lcd_gates(Lcd_Type_t lcd_type)
 {
 	switch(lcd_type){
 		case LCD_DIGITAL_TTL:
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 			switch_mod_gate_by_name("tcon", 1);
 			switch_mod_gate_by_name("lvds", 0);
-#endif
 			break;
 		case LCD_DIGITAL_LVDS:
 		case LCD_DIGITAL_MINILVDS:
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 			switch_mod_gate_by_name("lvds", 1);
 			switch_mod_gate_by_name("tcon", 0);
-#endif
 			break;
 		default:
 			break;
@@ -2947,12 +2943,13 @@ static int _init_lcd_driver_post(Lcd_Config_t *pConf)	//after power on lcd
 			break;
 		case LCD_DIGITAL_EDP:
 			ret = set_control_edp(pConf);
-			mdelay(200);
 			break;
 #endif
 		case LCD_DIGITAL_LVDS:
 		case LCD_DIGITAL_TTL:
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 		case LCD_DIGITAL_MINILVDS:
+#endif
 		default:
 			break;
 	}
@@ -2974,7 +2971,9 @@ static void _disable_lcd_driver_pre(Lcd_Config_t *pConf)	//before power off lcd
 #endif
 		case LCD_DIGITAL_LVDS:
 		case LCD_DIGITAL_TTL:
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 		case LCD_DIGITAL_MINILVDS:
+#endif
 		default:
 			break;
 	}
diff --git a/drivers/amlogic/display/backlight/aml_lcd_bl.h b/include/linux/amlogic/aml_lcd_bl.h
similarity index 100%
rename from drivers/amlogic/display/backlight/aml_lcd_bl.h
rename to include/linux/amlogic/aml_lcd_bl.h
-- 
2.19.0

