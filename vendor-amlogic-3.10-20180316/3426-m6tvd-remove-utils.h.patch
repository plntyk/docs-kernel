From cf2766301033db18d48c55c490f2b65c7c1f9817 Mon Sep 17 00:00:00 2001
From: "bo.yang" <bo.yang@amlogic.com>
Date: Sun, 16 Feb 2014 15:07:42 +0800
Subject: [PATCH 3426/5965] m6tvd: remove utils.h

linux/utils.h and mach/utils.h are removed.
---
 drivers/amlogic/display/osd/osd_hw.c  |   9 +-
 drivers/amlogic/display/vout/tvoutc.c |  27 ++-
 include/linux/utils.h                 | 257 --------------------------
 sound/soc/aml/m6/aml_audio_hw.c       |  49 +++--
 4 files changed, 40 insertions(+), 302 deletions(-)
 delete mode 100755 include/linux/utils.h
 mode change 100644 => 100755 sound/soc/aml/m6/aml_audio_hw.c

diff --git a/drivers/amlogic/display/osd/osd_hw.c b/drivers/amlogic/display/osd/osd_hw.c
index 88038cc143bf..6ed9e10fcd0e 100755
--- a/drivers/amlogic/display/osd/osd_hw.c
+++ b/drivers/amlogic/display/osd/osd_hw.c
@@ -39,7 +39,6 @@
 #include <linux/amlogic/amports/vframe_receiver.h>
 #include "osd_hw_def.h"
 #include "osd_prot.h"
-//#include <mach/utils.h>
 #include "osd_antiflicker.h"
 
 #ifdef CONFIG_AML_VSYNC_FIQ_ENABLE
@@ -1679,7 +1678,7 @@ static   void  osd1_update_color_mode(void)
 		data32 |= osd_hw.fb_gem[OSD1].canvas_idx << 16 ;
 		if(!osd_hw.rotate[OSD1].on_off)
 		data32 |= OSD_DATA_LITTLE_ENDIAN	 <<15 ;
-		
+
 		data32 |= osd_hw.color_info[OSD1]->hw_colormat<< 2;
 		if(osd_hw.color_info[OSD1]->color_index < COLOR_INDEX_YUV_422)
 			data32 |= 1                      << 7; /* rgb enable */
@@ -1700,7 +1699,7 @@ static   void  osd2_update_color_mode(void)
 		data32 |= osd_hw.fb_gem[OSD2].canvas_idx << 16 ;
 		if(!osd_hw.rotate[OSD1].on_off)
 		data32 |= OSD_DATA_LITTLE_ENDIAN	 <<15 ;
-		
+
 		data32 |= osd_hw.color_info[OSD2]->hw_colormat<< 2;
 		if(osd_hw.color_info[OSD2]->color_index < COLOR_INDEX_YUV_422)
 			data32 |= 1                      << 7; /* rgb enable */
@@ -1924,7 +1923,7 @@ static void osd2_update_disp_osd_rotate(void)
 	  case 1:
 	  y_rev=1;
 	  break;
-	  case 2://anti-clockwise  
+	  case 2://anti-clockwise
 	  x_rev=1;
           break;
 	  case 3://anti-clockwise H flip(dst)
@@ -1932,7 +1931,7 @@ static void osd2_update_disp_osd_rotate(void)
 	  y_rev=1;
 	  break;
 	}
-	
+
 	x_start = osd_hw.rotation_pandata[OSD2].x_start;
 	x_end = osd_hw.rotation_pandata[OSD2].x_end;
 	y_start = osd_hw.rotation_pandata[OSD2].y_start;
diff --git a/drivers/amlogic/display/vout/tvoutc.c b/drivers/amlogic/display/vout/tvoutc.c
index ff6a6413e040..c6e1ee44d0c4 100755
--- a/drivers/amlogic/display/vout/tvoutc.c
+++ b/drivers/amlogic/display/vout/tvoutc.c
@@ -25,7 +25,6 @@
 #include <linux/errno.h>
 #include <linux/kernel.h>
 #include <linux/delay.h>
-#include <linux/utils.h>
 #include <mach/am_regs.h>
 
 #include <linux/amlogic/vout/vinfo.h>
@@ -49,8 +48,8 @@ static const unsigned int  signal_set[SIGNAL_SET_MAX][3]=
 	},
 	{
 		VIDEO_SIGNAL_TYPE_CVBS,            	//cvbs&svideo
-		VIDEO_SIGNAL_TYPE_SVIDEO_LUMA,    
-    	VIDEO_SIGNAL_TYPE_SVIDEO_CHROMA,   
+		VIDEO_SIGNAL_TYPE_SVIDEO_LUMA,
+    	VIDEO_SIGNAL_TYPE_SVIDEO_CHROMA,
 	},
 	{	VIDEO_SIGNAL_TYPE_PROGRESSIVE_Y,     //progressive.
 		VIDEO_SIGNAL_TYPE_PROGRESSIVE_PB,
@@ -79,7 +78,7 @@ static  const  char*   signal_table[]={
          "PROGEESSIVE_R",   /**< Progressive R signal */
          "PROGEESSIVE_G",   /**< Progressive G signal */
          "PROGEESSIVE_B",   /**< Progressive B signal */
-		
+
 	};
 int 	 get_current_vdac_setting(void)
 {
@@ -102,7 +101,7 @@ void  change_vdac_setting(unsigned int  vdec_setting,vmode_t  mode)
 		break;
 		case VMODE_480CVBS:
 		case VMODE_576CVBS:
-		signal_set_index=1;	
+		signal_set_index=1;
 		bit=2;
 		break;
 		case VMODE_SVGA:
@@ -132,7 +131,7 @@ static void enable_vsync_interrupt(void)
     printk("enable_vsync_interrupt\n");
 
     CLEAR_CBUS_REG_MASK(HHI_MPEG_CLK_CNTL, 1<<11);
-	
+
     if (READ_MPEG_REG(ENCP_VIDEO_EN) & 1) {
         WRITE_MPEG_REG(VENC_INTCTRL, 0x200);
 
@@ -210,7 +209,7 @@ int tvoutc_setclk(tvmode_t mode)
 		}
 	else
 		{
-		printk(KERN_WARNING "UNsupport xtal setting for vidoe xtal=%d,default to 24M\n",xtal);	
+		printk(KERN_WARNING "UNsupport xtal setting for vidoe xtal=%d,default to 24M\n",xtal);
 		xtal=0;
 		}
 	switch(mode)
@@ -236,7 +235,7 @@ int tvoutc_setclk(tvmode_t mode)
 			  }
 			  break;
 		default:
-			printk(KERN_ERR "unsupport tv mode,video clk is not set!!\n");	
+			printk(KERN_ERR "unsupport tv mode,video clk is not set!!\n");
 	}
 
 	return 0 ;
@@ -258,7 +257,7 @@ static int uboot_display_already(tvmode_t mode)
     tvmode_t source = vmode_to_tvmode(get_resolution_vmode());
     if(source == mode)
         return 1;
-    else 
+    else
         return 0;
     /*
     const  reg_t *s = tvregsTab[mode];
@@ -303,7 +302,7 @@ int tvoutc_setmode(tvmode_t mode)
 #endif
 
     printk("TV mode %s selected.\n", tvinfoTab[mode].id);
-   
+
     s = tvregsTab[mode];
 
     if(uboot_display_flag) {
@@ -316,7 +315,7 @@ int tvoutc_setmode(tvmode_t mode)
     while (MREG_END_MARKER != s->reg)
         setreg(s++);
     printk("%s[%d]\n", __func__, __LINE__);
-    
+
     if(mode >= TVMODE_VGA || mode <= TVMODE_SXGA){
         aml_write_reg32(P_PERIPHS_PIN_MUX_0,aml_read_reg32(P_PERIPHS_PIN_MUX_0)|(3<<20));
     }else{
@@ -355,12 +354,12 @@ int tvoutc_setmode(tvmode_t mode)
         aml_set_reg32_bits(P_VPU_VIU_VENC_MUX_CTRL, 2, 0, 2); //reg0x271a, select ENCP to VIU1
         aml_set_reg32_bits(P_VPU_VIU_VENC_MUX_CTRL, 2, 4, 4); //reg0x271a, Select encP clock to VDIN
         aml_set_reg32_bits(P_VPU_VIU_VENC_MUX_CTRL, 2, 8, 4); //reg0x271a,Enable VIU of ENC_P domain to VDIN;
-        break;		    
+        break;
 		default:
-			printk(KERN_ERR "unsupport tv mode,video clk is not set!!\n");	
+			printk(KERN_ERR "unsupport tv mode,video clk is not set!!\n");
 	}
 #endif
-    
+
     aml_write_reg32(P_VPP_POSTBLEND_H_SIZE, tvinfoTab[mode].xres);
 
 #ifdef CONFIG_ARCH_MESON3
diff --git a/include/linux/utils.h b/include/linux/utils.h
deleted file mode 100755
index c40f8e47d4d2..000000000000
--- a/include/linux/utils.h
+++ /dev/null
@@ -1,257 +0,0 @@
-/*
- *
- * arch/arm/mach-meson3/include/mach/am_regs.h
- *
- *  Copyright (C) 2011 AMLOGIC, INC.
- *
- * License terms: GNU General Public License (GPL) version 2
- * Basic register address definitions in physical memory and
- * some block defintions for core devices like the timer.
- */
-
-#ifndef __MACH_MESSON6_UTILS_H
-#define __MACH_MESSON6_UTILS_H
-/**
- * Some driver use different name or set a alias name of MACRO
- * Please put that into this file
- */
-
-
-/**
- * UART Section
- */
-
-#define UART_AO    0
-#define UART_A     1
-#define UART_B     2
-#define UART_C     3
-#define UART_D     4
-
-#define MAX_PORT_NUM 5
-#define UART_FIFO_CNTS	64,128,64,64,64
-#define UART_ADDRS      ((void *)P_AO_UART_WFIFO),((void *)P_UART0_WFIFO), \
-						((void *)P_UART1_WFIFO),((void *)P_UART2_WFIFO),   \
-						((void *)P_UART3_WFIFO)
-#define UART_INTS		INT_UART_AO, INT_UART_0, INT_UART_1, INT_UART_2    \
-						, INT_UART_3
-
-/*canvas MACRO */
-
-#define CANVAS_ADDR_LMASK       0x1fffffff
-#define CANVAS_WIDTH_LMASK      0x7
-#define CANVAS_WIDTH_LWID       3
-#define CANVAS_WIDTH_LBIT       29
-//#define DC_CAV_LUT_DATAH          0x1328
-#define CANVAS_WIDTH_HMASK      0x1ff
-#define CANVAS_WIDTH_HBIT       0
-#define CANVAS_HEIGHT_MASK      0x1fff
-#define CANVAS_HEIGHT_BIT       9
-#define CANVAS_YWRAP            (1<<23)
-#define CANVAS_XWRAP            (1<<22)
-#define CANVAS_ADDR_NOWRAP      0x00
-#define CANVAS_ADDR_WRAPX       0x01
-#define CANVAS_ADDR_WRAPY       0x02
-#define CANVAS_BLKMODE_MASK     3
-#define CANVAS_BLKMODE_BIT      24
-#define CANVAS_BLKMODE_LINEAR   0x00
-#define CANVAS_BLKMODE_32X32    0x01
-#define CANVAS_BLKMODE_64X32    0x02
-//#define DC_CAV_LUT_ADDR           0x132c
-#define CANVAS_LUT_INDEX_BIT    0
-#define CANVAS_LUT_INDEX_MASK   0x7
-#define CANVAS_LUT_WR_EN        (0x2 << 8)
-#define CANVAS_LUT_RD_EN        (0x1 << 8)
-//#define DC_CAV_LVL3_MODE          0x1330
-/*OSD relative MACRO*/
-// Bit 28   color management enable
-// Bit 27,  if true, vd2 use viu2 output as the input, otherwise use normal vd2 from memory 
-// Bit 26:18, vd2 alpha
-// Bit 17, osd2 enable for preblend
-// Bit 16, osd1 enable for preblend
-// Bit 15, vd2 enable for preblend
-// Bit 14, vd1 enable for preblend
-// Bit 13, osd2 enable for postblend
-// Bit 12, osd1 enable for postblend
-// Bit 11, vd2 enable for postblend
-// Bit 10, vd1 enable for postblend
-// Bit 9,  if true, osd1 is alpha premultipiled 
-// Bit 8,  if true, osd2 is alpha premultipiled 
-// Bit 7,  postblend module enable
-// Bit 6,  preblend module enable
-// Bit 5,  if true, osd2 foreground compared with osd1 in preblend
-// Bit 4,  if true, osd2 foreground compared with osd1 in postblend
-// Bit 3,  
-// Bit 2,  if true, disable resetting async fifo every vsync, otherwise every vsync
-//			 the aync fifo will be reseted.
-// Bit 1,	  
-// Bit 0	if true, the output result of VPP is saturated
-    #define VPP_VD2_ALPHA_WID           9
-    #define VPP_VD2_ALPHA_MASK          0x1ff
-    #define VPP_VD2_ALPHA_BIT           18
-    #define VPP_OSD2_PREBLEND           (1 << 17)
-    #define VPP_OSD1_PREBLEND           (1 << 16)
-    #define VPP_VD2_PREBLEND            (1 << 15)
-    #define VPP_VD1_PREBLEND            (1 << 14)
-    #define VPP_OSD2_POSTBLEND          (1 << 13)
-    #define VPP_OSD1_POSTBLEND          (1 << 12)
-    #define VPP_VD2_POSTBLEND           (1 << 11)
-    #define VPP_VD1_POSTBLEND           (1 << 10)
-    #define VPP_OSD1_ALPHA              (1 << 9)
-    #define VPP_OSD2_ALPHA              (1 << 8)
-    #define VPP_POSTBLEND_EN            (1 << 7)
-    #define VPP_PREBLEND_EN             (1 << 6)
-    #define VPP_PRE_FG_SEL_MASK         (1 << 5)
-    #define VPP_PRE_FG_OSD2             (1 << 5)
-    #define VPP_PRE_FG_OSD1             (0 << 5)
-    #define VPP_POST_FG_SEL_MASK        (1 << 4)
-    #define VPP_POST_FG_OSD2            (1 << 4)
-    #define VPP_POST_FG_OSD1            (0 << 4)
-    #define VPP_FIFO_RESET_DE           (1 << 2)
-    #define VPP_OUT_SATURATE            (1 << 0)
-/*tv relative part*/
-#define VFIFO2VD_CTL                          0x1b58
-#define VFIFO2VD_PIXEL_START                  0x1b59
-#define VFIFO2VD_PIXEL_END                    0x1b5a
-#define VFIFO2VD_LINE_TOP_START               0x1b5b
-#define VFIFO2VD_LINE_TOP_END                 0x1b5c
-#define VFIFO2VD_LINE_BOT_START               0x1b5d
-#define VFIFO2VD_LINE_BOT_END                 0x1b5e
-
-/* AUDIO */
-	#define SPDIF_EN                31
-    #define SPDIF_INT_EN            30
-    #define SPDIF_BURST_PRE_INT_EN  29
-    #define SPDIF_TIE_0             24
-    #define SPDIF_SAMPLE_SEL        23
-    #define SPDIF_REVERSE_EN        22
-    #define SPDIF_BIT_ORDER         20
-    #define SPDIF_CHNL_ORDER        19
-    #define SPDIF_DATA_TYPE_SEL     18
-    #define SPDIF_XTDCLK_UPD_ITVL   14   //16:14
-    #define SPDIF_CLKNUM_54U        0     //13:0 
-    
-	#define SPDIF_CLKNUM_192K  24     //29:24 
-    #define SPDIF_CLKNUM_96K   18     //23:18 
-    #define SPDIF_CLKNUM_48K   12     //17:12 
-    #define SPDIF_CLKNUM_44K   6     // 11:6
-    #define SPDIF_CLKNUM_32K   0     // 5:0
-    
-    #define I2SIN_DIR       0    // I2S CLK and LRCLK direction. 0 : input 1 : output.
-    #define I2SIN_CLK_SEL    1    // I2S clk selection : 0 : from pad input. 1 : from AIU.
-    #define I2SIN_LRCLK_SEL 2
-    #define I2SIN_POS_SYNC  3
-    #define I2SIN_LRCLK_SKEW 4    // 6:4
-    #define I2SIN_LRCLK_INVT 7
-    #define I2SIN_SIZE       8    //9:8 : 0 16 bit. 1 : 18 bits 2 : 20 bits 3 : 24bits.
-    #define I2SIN_CHAN_EN   10    //13:10. 
-    #define I2SIN_EN        15
-    
-    #define AUDIN_FIFO0_EN       0
-    #define AUDIN_FIFO0_RST      1
-    #define AUDIN_FIFO0_LOAD     2    //write 1 to load address to AUDIN_FIFO0.
-         
-    #define AUDIN_FIFO0_DIN_SEL  3
-            // 0     spdifIN
-            // 1     i2Sin
-            // 2     PCMIN
-            // 3     HDMI in
-            // 4     DEMODULATOR IN
-    #define AUDIN_FIFO0_ENDIAN   8    //10:8   data endian control.
-    #define AUDIN_FIFO0_CHAN     11    //14:11   channel number.  in M1 suppose there's only 1 channel and 2 channel.
-    #define AUDIN_FIFO0_UG       15    // urgent request enable.
-    #define AUDIN_FIFO0_HOLD0_EN  19  
-    #define AUDIN_FIFO0_HOLD1_EN  20
-    #define AUDIN_FIFO0_HOLD2_EN  21
-    #define AUDIN_FIFO0_HOLD0_SEL 22   // 23:22
-    #define AUDIN_FIFO0_HOLD1_SEL 24   // 25:24
-    #define AUDIN_FIFO0_HOLD2_SEL 26   // 27:26
-    #define AUDIN_FIFO0_HOLD_LVL  28   // 27:26
-    
-    #define AUDIN_FIFO1_EN       0
-    #define AUDIN_FIFO1_RST      1
-    #define AUDIN_FIFO1_LOAD     2    //write 1 to load address to AUDIN_FIFO0.
-         
-    #define AUDIN_FIFO1_DIN_SEL  3
-            // 0     spdifIN
-            // 1     i2Sin
-            // 2     PCMIN
-            // 3     HDMI in
-            // 4     DEMODULATOR IN
-    #define AUDIN_FIFO1_ENDIAN   8    //10:8   data endian control.
-    #define AUDIN_FIFO1_CHAN     11    //14:11   channel number.  in M1 suppose there's only 1 channel and 2 channel.
-    #define AUDIN_FIFO1_UG       15    // urgent request enable.
-    #define AUDIN_FIFO1_HOLD0_EN  19  
-    #define AUDIN_FIFO1_HOLD1_EN  20
-    #define AUDIN_FIFO1_HOLD2_EN  21
-    #define AUDIN_FIFO1_HOLD0_SEL 22   // 23:22
-    #define AUDIN_FIFO1_HOLD1_SEL 24   // 25:24
-    #define AUDIN_FIFO1_HOLD2_SEL 26   // 27:26
-    #define AUDIN_FIFO1_HOLD_LVL  28   // 27:26
-    
-
-/*BT656 MACRO */
-//#define BT_CTRL 0x2240 	///../ucode/register.h
-    #define BT_SYSCLOCK_RESET    30      //Sync fifo soft  reset_n at system clock domain.     Level reset. 0 = reset. 1 : normal mode.
-    #define BT_656CLOCK_RESET    29      //Sync fifo soft reset_n at bt656 clock domain.   Level reset.  0 = reset.  1 : normal mode.
-    #define BT_VSYNC_SEL              25      //25:26 VDIN VS selection.   00 :  SOF.  01: EOF.   10: vbi start point.  11 : vbi end point.
-    #define BT_HSYNC_SEL              23      //24:23 VDIN HS selection.  00 : EAV.  01: SAV.    10:  EOL.  11: SOL
-    #define BT_CAMERA_MODE        22      // Camera_mode
-    #define BT_CLOCK_ENABLE        7	// 1: enable bt656 clock. 0: disable bt656 clock.
-
-//#define BT_PORT_CTRL 0x2249 	///../ucode/register.h
-    #define BT_VSYNC_MODE      23  //1: use  vsync  as the VBI start point. 0: use the regular vref.
-    #define BT_HSYNC_MODE      22  //1: use hsync as the active video start point.  0. Use regular sav and eav. 
-    #define BT_SOFT_RESET           31	// Soft reset
-    #define BT_JPEG_START           30
-    #define BT_JPEG_IGNORE_BYTES    18	//20:18
-    #define BT_JPEG_IGNORE_LAST     17
-    #define BT_UPDATE_ST_SEL        16
-    #define BT_COLOR_REPEAT         15
-    #define BT_VIDEO_MODE           13	// 14:13
-    #define BT_AUTO_FMT             12
-    #define BT_PROG_MODE            11
-    #define BT_JPEG_MODE            10
-    #define BT_XCLK27_EN_BIT        9	// 1 : xclk27 is input.     0 : xclk27 is output.
-    #define BT_FID_EN_BIT           8	// 1 : enable use FID port.
-    #define BT_CLK27_SEL_BIT        7	// 1 : external xclk27      0 : internal clk27.
-    #define BT_CLK27_PHASE_BIT      6	// 1 : no inverted          0 : inverted.
-    #define BT_ACE_MODE_BIT         5	// 1 : auto cover error by hardware.
-    #define BT_SLICE_MODE_BIT       4	// 1 : no ancillay flag     0 : with ancillay flag.
-    #define BT_FMT_MODE_BIT         3	// 1 : ntsc                 0 : pal.
-    #define BT_REF_MODE_BIT         2	// 1 : from bit stream.     0 : from ports.
-    #define BT_MODE_BIT             1	// 1 : BT656 model          0 : SAA7118 mode.
-    #define BT_EN_BIT               0	// 1 : enable.
-    #define BT_VSYNC_PHASE      0
-    #define BT_HSYNC_PHASE      1
-    #define BT_VSYNC_PULSE      2
-    #define BT_HSYNC_PULSE      3
-    #define BT_FID_PHASE        4
-    #define BT_FID_HSVS         5
-    #define BT_IDQ_EN           6
-    #define BT_IDQ_PHASE        7
-    #define BT_D8B              8
-    #define BT_10BTO8B          9
-    #define BT_FID_DELAY       10	//12:10
-    #define BT_VSYNC_DELAY     13	//
-    #define BT_HSYNC_DELAY     16
-/***
- * HDMI
- */
-#define  P_HDMI_CNTL_PORT P_HDMI_CTRL_PORT
-/**
- * LVDS
- */
-   #define     LVDS_blank_data_reserved 30  // 31:30
-   #define     LVDS_blank_data_r        20  // 29:20
-   #define     LVDS_blank_data_g        10  // 19:10
-   #define     LVDS_blank_data_b         0  //  9:0
-   #define     LVDS_USE_TCON    7
-   #define     LVDS_DUAL        6
-   #define     PN_SWP           5
-   #define     LSB_FIRST        4
-   #define     LVDS_RESV        3
-   #define     ODD_EVEN_SWP     2
-   #define     LVDS_REPACK      0
-
-
-#endif //__MACH_MESSON3_REGS_H
diff --git a/sound/soc/aml/m6/aml_audio_hw.c b/sound/soc/aml/m6/aml_audio_hw.c
old mode 100644
new mode 100755
index 90df8bc52a8d..4cc8cb0a6b1f
--- a/sound/soc/aml/m6/aml_audio_hw.c
+++ b/sound/soc/aml/m6/aml_audio_hw.c
@@ -5,9 +5,6 @@
 #include <mach/am_regs.h>
 #include <linux/clk.h>
 #include <linux/module.h>
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-//#include <mach/utils.h>
-#endif
 
 #include "aml_audio_hw.h"
 
@@ -97,13 +94,13 @@ int audio_clock_config_table[][12][2]=
 	//256
 #if OVERCLOCK == 0
 		{0x0004f880, (50-1)},  // 32
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8	
-		{0x0005e965, (40-1)}, //44.1	
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+		{0x0005e965, (40-1)}, //44.1
 		{0x0004c9a0,	(50-1)},	//48K
-#else		
+#else
 		{0x0004cdf3, (42-1)},  // 44.1
 		{0x0007c4e6, (23-1)},  // 48
-#endif	
+#endif
 		{0x0006d0a4, (13-1)},  // 96
 		{0x0004e15a, (9 -1)},   // 192
 		{0x0007f400, (125-1)}, // 8k
@@ -199,7 +196,7 @@ void audio_set_aiubuf(u32 addr, u32 size, unsigned int channel)
     WRITE_MPEG_REG(AIU_MEM_I2S_START_PTR, addr & 0xffffffc0);
     WRITE_MPEG_REG(AIU_MEM_I2S_RD_PTR, addr & 0xffffffc0);
     if(channel == 8)
-		WRITE_MPEG_REG(AIU_MEM_I2S_END_PTR, (addr & 0xffffffc0) + (size & 0xffffffc0) - 256); 
+		WRITE_MPEG_REG(AIU_MEM_I2S_END_PTR, (addr & 0xffffffc0) + (size & 0xffffffc0) - 256);
 	else
     WRITE_MPEG_REG(AIU_MEM_I2S_END_PTR, (addr & 0xffffffc0) + (size & 0xffffffc0) - 64);   //this is for 16bit 2 channel
 
@@ -214,7 +211,7 @@ void audio_set_aiubuf(u32 addr, u32 size, unsigned int channel)
 								(0xff << 8) |	// [15: 8] chan_mem_mask. Each bit indicates which channels exist in memory
 								(0xff << 0));	// [ 7: 0] chan_rd_mask.  Each bit indicates which channels are READ from memory
 		}
-	else 
+	else
 	WRITE_MPEG_REG(AIU_MEM_I2S_MASKS,		(24 << 16) |	// [31:16] IRQ block.
 								(0x3 << 8) |	// [15: 8] chan_mem_mask. Each bit indicates which channels exist in memory
 								(0x3 << 0));	// [ 7: 0] chan_rd_mask.  Each bit indicates which channels are READ from memory
@@ -326,13 +323,13 @@ static void spdifin_fifo1_set_buf(u32 addr, u32 size)
 void audio_in_i2s_set_buf(u32 addr, u32 size,u32 i2s_mode)
 {
 	if(i2s_mode&SPDIFIN_MODE){ //spdif in ,use fifo1
-		printk("spdifin_fifo1_set_buf \n");			
+		printk("spdifin_fifo1_set_buf \n");
 		spdifin_fifo1_set_buf(addr,size);
 	}
 	else{
-		printk("i2sin_fifo0_set_buf \n");		
+		printk("i2sin_fifo0_set_buf \n");
 		i2sin_fifo0_set_buf(addr,size,i2s_mode);
-	}	
+	}
        audio_in_buf_ready = 1;
 
 }
@@ -361,7 +358,7 @@ reset_again:
 			WRITE_MPEG_REG_BITS(AUDIN_I2SIN_CTRL, 1, I2SIN_EN, 1);
 
 	}else{
-		if(audioin_mode == 	SPDIFIN_MODE)	
+		if(audioin_mode == 	SPDIFIN_MODE)
 			WRITE_MPEG_REG(AUDIN_SPDIF_MODE, READ_MPEG_REG(AUDIN_SPDIF_MODE)& ~(1<<31));
 		else
 			WRITE_MPEG_REG_BITS(AUDIN_I2SIN_CTRL, 0, I2SIN_EN, 1);
@@ -379,7 +376,7 @@ void audio_in_spdif_enable(int flag)
 
 	if(flag){
 reset_again:
-#if 0	
+#if 0
 	     WRITE_MPEG_REG_BITS(AUDIN_FIFO1_CTRL, 1, 1, 1); // reset FIFO 0
             WRITE_MPEG_REG(AUDIN_FIFO1_PTR, 0);
             rd = READ_MPEG_REG(AUDIN_FIFO1_PTR);
@@ -388,10 +385,10 @@ reset_again:
               printk("error %08x, %08x !!!!!!!!!!!!!!!!!!!!!!!!\n", rd, start);
               goto reset_again;
             }
-#endif			
-		WRITE_MPEG_REG(AUDIN_SPDIF_MODE, READ_MPEG_REG(AUDIN_SPDIF_MODE)| (1<<31));		
+#endif
+		WRITE_MPEG_REG(AUDIN_SPDIF_MODE, READ_MPEG_REG(AUDIN_SPDIF_MODE)| (1<<31));
 	}else{
-		WRITE_MPEG_REG(AUDIN_SPDIF_MODE, READ_MPEG_REG(AUDIN_SPDIF_MODE)& ~(1<<31));				
+		WRITE_MPEG_REG(AUDIN_SPDIF_MODE, READ_MPEG_REG(AUDIN_SPDIF_MODE)& ~(1<<31));
 	}
 }
 unsigned int audio_in_i2s_rd_ptr(void)
@@ -498,7 +495,7 @@ void audio_util_set_dac_958_format(unsigned format)
 }
 
 void audio_util_set_dac_i2s_format(unsigned format)
-{	
+{
 	WRITE_MPEG_REG_BITS(AIU_CLK_CTRL,1,6,1);//invert aoclk
 	WRITE_MPEG_REG_BITS(AIU_CLK_CTRL,1,7,1);//invert lrclk
 	WRITE_MPEG_REG_BITS(AIU_CLK_CTRL,1,8,2);// alrclk skew: 1=alrclk transitions on the cycle before msb is sent
@@ -508,7 +505,7 @@ void audio_util_set_dac_i2s_format(unsigned format)
 	WRITE_MPEG_REG_BITS(AIU_CLK_CTRL,2,2,2); // i2s divisor: 0=no div; 1=div by 2; 2=div by 4; 3=div by 8.
 #endif
 	WRITE_MPEG_REG_BITS(AIU_CLK_CTRL,1,0,1);// enable I2S clock
-	
+
     if (format == AUDIO_ALGOUT_DAC_FORMAT_DSP) {
         WRITE_MPEG_REG_BITS(AIU_CLK_CTRL, 1, 8, 2);
     } else if (format == AUDIO_ALGOUT_DAC_FORMAT_LEFT_JUSTIFY) {
@@ -518,7 +515,7 @@ void audio_util_set_dac_i2s_format(unsigned format)
     	WRITE_MPEG_REG(AIU_I2S_DAC_CFG, 	0x000f);	// Payload 24-bit, Msb first, alrclk = aoclk/64.mute const 0x800000
     else
     	WRITE_MPEG_REG(AIU_I2S_DAC_CFG, 	0x0007);	// Payload 24-bit, Msb first, alrclk = aoclk/64
-	WRITE_MPEG_REG(AIU_I2S_SOURCE_DESC, 0x0001);	// four 2-channel	
+	WRITE_MPEG_REG(AIU_I2S_SOURCE_DESC, 0x0001);	// four 2-channel
 }
 
 extern unsigned int get_ddr_pll_clk(void);
@@ -828,7 +825,7 @@ void audio_set_i2s_clk(unsigned freq, unsigned fs_config)
     // gate the clock off
     WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 8));
 	WRITE_MPEG_REG(AIU_CLK_CTRL_MORE, 0);
-	
+
 	//Set filter register
 	//WRITE_MPEG_REG(HHI_MPLL_CNTL3, 0x26e1250);
 
@@ -844,7 +841,7 @@ void audio_set_i2s_clk(unsigned freq, unsigned fs_config)
 	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, audio_clock_config[index][1], 0, 8);
 
 	WRITE_MPEG_REG_BITS(AIU_CODEC_DAC_LRCLK_CTRL, 64-1, 0, 12);//set codec dac ratio---lrclk--64fs
-	
+
 	// delay 5uS
 	//udelay(5);
 	for (i = 0; i < 500000; i++) ;
@@ -853,7 +850,7 @@ void audio_set_i2s_clk(unsigned freq, unsigned fs_config)
 
 	//Audio DAC Clock enable
 	WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) |(1<<23));
-	
+
 	/* ---ADC clock  configuration--- */
 	// Disable mclk
 	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 0, 8, 1);
@@ -947,7 +944,7 @@ void audio_set_958_clk(unsigned freq, unsigned fs_config)
     // gate the clock off
     WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 8));
 	//WRITE_MPEG_REG(AIU_CLK_CTRL_MORE, 0);
-	
+
 	//Set filter register
 	//WRITE_MPEG_REG(HHI_MPLL_CNTL3, 0x26e1250);
 
@@ -1110,8 +1107,8 @@ void audio_set_958_mode(unsigned mode, _aiu_958_raw_setting_t * set)
 {
     if(mode == AIU_958_MODE_PCM_RAW){
     	mode = AIU_958_MODE_PCM16; //use 958 raw pcm mode
-       WRITE_MPEG_REG(AIU_958_VALID_CTRL,3);//enable 958 invalid bit	
-    } 
+       WRITE_MPEG_REG(AIU_958_VALID_CTRL,3);//enable 958 invalid bit
+    }
     else
 	WRITE_MPEG_REG(AIU_958_VALID_CTRL,0);
     if (mode == AIU_958_MODE_RAW) {
-- 
2.19.0

