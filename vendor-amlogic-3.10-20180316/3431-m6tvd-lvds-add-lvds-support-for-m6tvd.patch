From 5a188482075a89daf0f9896c638a8f711a2667e0 Mon Sep 17 00:00:00 2001
From: "bo.yang" <bo.yang@amlogic.com>
Date: Sun, 16 Feb 2014 19:34:46 +0800
Subject: [PATCH 3431/5965] m6tvd:lvds: add lvds support for m6tvd

by lei.yang@amlogic.com
---
 arch/arm/boot/dts/amlogic/meson6tv_ref.dtd    |   13 +-
 arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd   |   19 +-
 arch/arm/configs/meson6tvd_defconfig          |   13 +-
 .../mach-meson6tv/include/mach/mlvds_regs.h   |  200 +++
 arch/arm/mach-meson6tv/include/mach/tvregs.h  | 1192 +++++++++++++++++
 .../arm/mach-meson6tvd/include/mach/am_regs.h |    1 +
 arch/arm/mach-meson6tvd/include/mach/canvas.h |   48 +
 drivers/amlogic/display/lcd/aml_lcd.c         |  559 +++++---
 drivers/amlogic/display/osd/osd_hw.c          |    6 +-
 drivers/amlogic/display/vout/Makefile         |    4 +-
 drivers/amlogic/display/vout/tvconf.c         |    2 +-
 include/linux/amlogic/panel.h                 |   57 +
 include/linux/amlogic/vout/lcd.h              |  264 ++++
 include/linux/amlogic/vout/lcd_aml.h          |    2 +-
 include/linux/amlogic/vout/vinfo.h            |    7 +-
 15 files changed, 2189 insertions(+), 198 deletions(-)
 create mode 100755 arch/arm/mach-meson6tv/include/mach/mlvds_regs.h
 create mode 100755 arch/arm/mach-meson6tv/include/mach/tvregs.h
 create mode 100755 arch/arm/mach-meson6tvd/include/mach/canvas.h
 create mode 100755 include/linux/amlogic/panel.h
 create mode 100755 include/linux/amlogic/vout/lcd.h

diff --git a/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd b/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
index 17e67e7a9261..1156d7dcd59f 100755
--- a/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
@@ -90,6 +90,14 @@
 		dev_name = "uart_3";
 	};
 
+	lvds {
+		compatible = "amlogic,lvds";
+		status = "okay";
+		basic_setting = <1920 1080 2200 1125 16 9 127 203 2 8>; /**  hactive,vactive,hperiod,vperiod,hstart,vstart, */
+		/**  hratio,vratio,screen_width,screen_height,lvd_type,lcd bit */
+		delay_setting = <500 50 20 20 50 0 0 200>;  /** CLK ON/OFF,PWM ON/OFF,PANEL_PWR ON/OFF,BL ON/OFF delay */
+	};
+
 	mesonvout {
 		compatible = "amlogic,mesonvout";
 		dev_name = "mesonvout";
@@ -143,11 +151,6 @@
 	};
 
 
-	lvds {
-		compatible = "amlogic,lvds";
-		status = "okay";
-	};
-
 	audio {
 		compatible = "amlogic,aml-audio";
 		dev_name = "aml-audio.0";
diff --git a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
index dcb727b3ac3b..0131669c49e4 100755
--- a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
@@ -90,6 +90,15 @@
 		dev_name = "uart_3";
 	};
 
+	lvds {
+		compatible = "amlogic,lvds";
+		status = "okay";
+		basic_setting = <1920 1080 2200 1125 16 9 127 203 2 8>; /**  hactive,vactive,hperiod,vperiod,hstart,vstart, */
+		/**  hratio,vratio,screen_width,screen_height,lvd_type,lcd bit */
+		delay_setting = <500 50 20 20 50 0 0 200>;  /** CLK ON/OFF,PWM ON/OFF,PANEL_PWR ON/OFF,BL ON/OFF delay */
+
+	};
+
 	mesonvout {
 		compatible = "amlogic,mesonvout";
 		dev_name = "mesonvout";
@@ -142,16 +151,6 @@
 		#size-cells = <0>;
 	};
 
-
-	lvds {
-		compatible = "amlogic,lvds";
-		status = "okay";
-		basic_setting = <1920 1080 2200 1125 16 9 127 203 2 8>; /**  hactive,vactive,hperiod,vperiod,hstart,vstart, */
-		                                             /**  hratio,vratio,screen_width,screen_height,lvd_type,lcd bit */
-		delay_setting = <500 50 20 20 50 0 0 200>;  /** CLK ON/OFF,PWM ON/OFF,PANEL_PWR ON/OFF,BL ON/OFF delay */
-
-	};
-
 	audio {
 		compatible = "amlogic,aml-audio";
 		dev_name = "aml-audio.0";
diff --git a/arch/arm/configs/meson6tvd_defconfig b/arch/arm/configs/meson6tvd_defconfig
index 6c2e1194d003..ec22c1b4eaa6 100755
--- a/arch/arm/configs/meson6tvd_defconfig
+++ b/arch/arm/configs/meson6tvd_defconfig
@@ -33,8 +33,17 @@ CONFIG_AM_REMOTE=m
 # CONFIG_AMLOGIC_BOARD_HAS_PMU is not set
 CONFIG_MMC_AML=y
 # CONFIG_AMAUDIO is not set
-# CONFIG_AM_CANVAS is not set
-# CONFIG_AM_DISPLAY_MODULE is not set
+# CONFIG_AM_LCD_OUTPUT is not set
+CONFIG_AML_TV_LCD=y
+CONFIG_FB_AM=y
+CONFIG_FB_OSD1_DEFAULT_BITS_PER_PIXEL=32
+CONFIG_FB_OSD1_DEFAULT_WIDTH=1920
+CONFIG_FB_OSD1_DEFAULT_HEIGHT=1080
+CONFIG_FB_OSD1_DEFAULT_WIDTH_VIRTUAL=1920
+CONFIG_FB_OSD1_DEFAULT_HEIGHT_VIRTUAL=2160
+# CONFIG_AMLOGIC_BACKLIGHT is not set
+CONFIG_AM_GE2D=y
+CONFIG_AM_LOGO=y
 # CONFIG_AML_HDMI_TX is not set
 CONFIG_MALI400=y
 CONFIG_MALI400_DEBUG=y
diff --git a/arch/arm/mach-meson6tv/include/mach/mlvds_regs.h b/arch/arm/mach-meson6tv/include/mach/mlvds_regs.h
new file mode 100755
index 000000000000..76d7eea780fa
--- /dev/null
+++ b/arch/arm/mach-meson6tv/include/mach/mlvds_regs.h
@@ -0,0 +1,200 @@
+#ifndef __MLVDS_REGS_H
+#define __MLVDS_REGS_H
+
+#define MLVDS_TCON0 0
+#define MLVDS_TCON1 1
+#define MLVDS_TCON2 2
+#define MLVDS_TCON3 3
+#define MLVDS_TCON4 4
+#define MLVDS_TCON5 5
+#define MLVDS_TCON6 6
+#define MLVDS_TCON7 7
+
+//the following register function is a little different as before
+//but the address is same
+//MTCON0-3 is full function, and MTCON4-7 is reduced.
+#define MTCON0_1ST_HS_ADDR                         0x1410  //L_STH1_HS_ADDR
+#define P_MTCON0_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON0_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON0_1ST_HE_ADDR                         0x1411  //L_STH1_HE_ADDR
+#define P_MTCON0_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON0_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON0_1ST_VS_ADDR                         0x1412  //L_STH1_VS_ADDR
+#define P_MTCON0_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON0_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON0_1ST_VE_ADDR                         0x1413  //L_STH1_VE_ADDR
+#define P_MTCON0_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON0_1ST_VE_ADDR) 	///../ucode/register.h
+#define MTCON0_2ND_HS_ADDR                         0x1414  //L_STH2_HS_ADDR
+#define P_MTCON0_2ND_HS_ADDR 		CBUS_REG_ADDR(MTCON0_2ND_HS_ADDR) 	///../ucode/register.h
+#define MTCON0_2ND_HE_ADDR                         0x1415  //L_STH2_HE_ADDR
+#define P_MTCON0_2ND_HE_ADDR 		CBUS_REG_ADDR(MTCON0_2ND_HE_ADDR) 	///../ucode/register.h
+#define MTCON0_2ND_VS_ADDR                         0x1416  //L_STH2_VS_ADDR
+#define P_MTCON0_2ND_VS_ADDR 		CBUS_REG_ADDR(MTCON0_2ND_VS_ADDR) 	///../ucode/register.h
+#define MTCON0_2ND_VE_ADDR                         0x1417  //L_STH2_VE_ADDR
+#define P_MTCON0_2ND_VE_ADDR 		CBUS_REG_ADDR(MTCON0_2ND_VE_ADDR) 	///../ucode/register.h
+
+#define MTCON1_1ST_HS_ADDR                         0x141f  //L_CPV1_HS_ADDR
+#define P_MTCON1_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON1_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON1_1ST_HE_ADDR                         0x1420  //L_CPV1_HE_ADDR
+#define P_MTCON1_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON1_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON1_1ST_VS_ADDR                         0x1421  //L_CPV1_VS_ADDR
+#define P_MTCON1_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON1_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON1_1ST_VE_ADDR                         0x1422  //L_CPV1_VE_ADDR
+#define P_MTCON1_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON1_1ST_VE_ADDR) 	///../ucode/register.h
+#define MTCON1_2ND_HS_ADDR                         0x1423  //L_CPV2_HS_ADDR
+#define P_MTCON1_2ND_HS_ADDR 		CBUS_REG_ADDR(MTCON1_2ND_HS_ADDR) 	///../ucode/register.h
+#define MTCON1_2ND_HE_ADDR                         0x1424  //L_CPV2_HE_ADDR
+#define P_MTCON1_2ND_HE_ADDR 		CBUS_REG_ADDR(MTCON1_2ND_HE_ADDR) 	///../ucode/register.h
+#define MTCON1_2ND_VS_ADDR                         0x1425  //L_CPV2_VS_ADDR
+#define P_MTCON1_2ND_VS_ADDR 		CBUS_REG_ADDR(MTCON1_2ND_VS_ADDR) 	///../ucode/register.h
+#define MTCON1_2ND_VE_ADDR                         0x1426  //L_CPV2_VE_ADDR
+#define P_MTCON1_2ND_VE_ADDR 		CBUS_REG_ADDR(MTCON1_2ND_VE_ADDR) 	///../ucode/register.h
+
+#define MTCON2_1ST_HS_ADDR                         0x1427  //L_STV1_HS_ADDR
+#define P_MTCON2_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON2_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON2_1ST_HE_ADDR                         0x1428  //L_STV1_HE_ADDR
+#define P_MTCON2_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON2_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON2_1ST_VS_ADDR                         0x1429  //L_STV1_VS_ADDR
+#define P_MTCON2_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON2_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON2_1ST_VE_ADDR                         0x142a  //L_STV1_VE_ADDR
+#define P_MTCON2_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON2_1ST_VE_ADDR) 	///../ucode/register.h
+#define MTCON2_2ND_HS_ADDR                         0x142b  //L_STV2_HS_ADDR
+#define P_MTCON2_2ND_HS_ADDR 		CBUS_REG_ADDR(MTCON2_2ND_HS_ADDR) 	///../ucode/register.h
+#define MTCON2_2ND_HE_ADDR                         0x142c  //L_STV2_HE_ADDR
+#define P_MTCON2_2ND_HE_ADDR 		CBUS_REG_ADDR(MTCON2_2ND_HE_ADDR) 	///../ucode/register.h
+#define MTCON2_2ND_VS_ADDR                         0x142d  //L_STV2_VS_ADDR
+#define P_MTCON2_2ND_VS_ADDR 		CBUS_REG_ADDR(MTCON2_2ND_VS_ADDR) 	///../ucode/register.h
+#define MTCON2_2ND_VE_ADDR                         0x142e  //L_STV2_VE_ADDR
+#define P_MTCON2_2ND_VE_ADDR 		CBUS_REG_ADDR(MTCON2_2ND_VE_ADDR) 	///../ucode/register.h
+
+#define MTCON3_1ST_HS_ADDR                         0x142f  //L_OEV1_HS_ADDR
+#define P_MTCON3_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON3_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON3_1ST_HE_ADDR                         0x1430  //L_OEV1_HE_ADDR
+#define P_MTCON3_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON3_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON3_1ST_VS_ADDR                         0x1431  //L_OEV1_VS_ADDR
+#define P_MTCON3_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON3_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON3_1ST_VE_ADDR                         0x1432  //L_OEV1_VE_ADDR
+#define P_MTCON3_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON3_1ST_VE_ADDR) 	///../ucode/register.h
+#define MTCON3_2ND_HS_ADDR                         0x1433  //L_OEV2_HS_ADDR
+#define P_MTCON3_2ND_HS_ADDR 		CBUS_REG_ADDR(MTCON3_2ND_HS_ADDR) 	///../ucode/register.h
+#define MTCON3_2ND_HE_ADDR                         0x1434  //L_OEV2_HE_ADDR
+#define P_MTCON3_2ND_HE_ADDR 		CBUS_REG_ADDR(MTCON3_2ND_HE_ADDR) 	///../ucode/register.h
+#define MTCON3_2ND_VS_ADDR                         0x1435  //L_OEV2_VS_ADDR
+#define P_MTCON3_2ND_VS_ADDR 		CBUS_REG_ADDR(MTCON3_2ND_VS_ADDR) 	///../ucode/register.h
+#define MTCON3_2ND_VE_ADDR                         0x1436  //L_OEV2_VE_ADDR
+#define P_MTCON3_2ND_VE_ADDR 		CBUS_REG_ADDR(MTCON3_2ND_VE_ADDR) 	///../ucode/register.h
+
+#define MTCON4_1ST_HS_ADDR                         0x1455  //L_HSYNC_HS_ADDR
+#define P_MTCON4_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON4_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON4_1ST_HE_ADDR                         0x1456  //L_HSYNC_HE_ADDR
+#define P_MTCON4_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON4_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON4_1ST_VS_ADDR                         0x1457  //L_HSYNC_VS_ADDR
+#define P_MTCON4_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON4_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON4_1ST_VE_ADDR                         0x1458  //L_HSYNC_VE_ADDR
+#define P_MTCON4_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON4_1ST_VE_ADDR) 	///../ucode/register.h
+
+#define MTCON5_1ST_HS_ADDR                         0x1459  //L_VSYNC_HS_ADDR
+#define P_MTCON5_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON5_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON5_1ST_HE_ADDR                         0x145a  //L_VSYNC_HE_ADDR
+#define P_MTCON5_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON5_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON5_1ST_VS_ADDR                         0x145b  //L_VSYNC_VS_ADDR
+#define P_MTCON5_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON5_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON5_1ST_VE_ADDR                         0x145c  //L_VSYNC_VE_ADDR
+#define P_MTCON5_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON5_1ST_VE_ADDR) 	///../ucode/register.h
+
+#define MTCON6_1ST_HS_ADDR                         0x1418  //L_OEH_HS_ADDR
+#define P_MTCON6_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON6_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON6_1ST_HE_ADDR                         0x1419  //L_OEH_HE_ADDR
+#define P_MTCON6_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON6_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON6_1ST_VS_ADDR                         0x141a  //L_OEH_VS_ADDR
+#define P_MTCON6_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON6_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON6_1ST_VE_ADDR                         0x141b  //L_OEH_VE_ADDR
+#define P_MTCON6_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON6_1ST_VE_ADDR) 	///../ucode/register.h
+
+#define MTCON7_1ST_HS_ADDR                         0x1437  //L_OEV3_HS_ADDR
+#define P_MTCON7_1ST_HS_ADDR 		CBUS_REG_ADDR(MTCON7_1ST_HS_ADDR) 	///../ucode/register.h
+#define MTCON7_1ST_HE_ADDR                         0x1438  //L_OEV3_HE_ADDR
+#define P_MTCON7_1ST_HE_ADDR 		CBUS_REG_ADDR(MTCON7_1ST_HE_ADDR) 	///../ucode/register.h
+#define MTCON7_1ST_VS_ADDR                         0x1439  //L_OEV3_VS_ADDR
+#define P_MTCON7_1ST_VS_ADDR 		CBUS_REG_ADDR(MTCON7_1ST_VS_ADDR) 	///../ucode/register.h
+#define MTCON7_1ST_VE_ADDR                         0x143a  //L_OEV3_VE_ADDR
+#define P_MTCON7_1ST_VE_ADDR 		CBUS_REG_ADDR(MTCON7_1ST_VE_ADDR) 	///../ucode/register.h
+
+//#define MLVDS_CONTROL                              0x14c3
+   #define     mLVDS_RESERVED  15    // 15
+   #define     mLVDS_double_pattern  14    // 14
+   #define     mLVDS_ins_reset  8    // 13:8  // each channel has one bit
+   #define     mLVDS_dual_gate  7
+   #define     mLVDS_bit_num    6    // 0-6Bits, 1-8Bits
+   #define     mLVDS_pair_num   5    // 0-3Pairs, 1-6Pairs
+   #define     mLVDS_msb_first  4
+   #define     mLVDS_PORT_SWAP  3
+   #define     mLVDS_MLSB_SWAP  2
+   #define     mLVDS_PN_SWAP    1
+   #define     mLVDS_en         0
+
+//#define MLVDS_CONFIG_HI                            0x14c7
+//#define MLVDS_CONFIG_LO                            0x14c8
+   #define     mLVDS_reset_offset         29 // Bit 31:29
+   #define     mLVDS_reset_length         23 // Bit 28:23
+   #define     mLVDS_config_reserved      20 // Bit 22:20
+   #define     mLVDS_reset_start_bit12    19 // Bit 19
+   #define     mLVDS_data_write_toggle    18
+   #define     mLVDS_data_write_ini       17
+   #define     mLVDS_data_latch_1_toggle  16
+   #define     mLVDS_data_latch_1_ini     15
+   #define     mLVDS_data_latch_0_toggle  14
+   #define     mLVDS_data_latch_0_ini     13
+   #define     mLVDS_reset_1_select       12 // 0 - same as reset_0, 1 - 1 clock delay of reset_0
+   #define     mLVDS_reset_start           0 // Bit 11:0
+
+//#define TCON_DOUBLE_CTL                            0x14c9
+   #define     tcon_double_ini          8 // Bit 7:0
+   #define     tcon_double_inv          0 // Bit 7:0
+//#define TCON_PATTERN_HI                            0x14ca
+//#define TCON_PATTERN_LO                            0x14cb
+   #define     tcon_pattern_loop_data     16 // Bit 15:0
+   #define     tcon_pattern_loop_start    12 // Bit 3:0
+   #define     tcon_pattern_loop_end       8 // Bit 3:0
+   #define     tcon_pattern_enable         0 // Bit 7:0
+//#define TCON_CONTROL_HI                            0x14cc
+//#define TCON_CONTROL_LO                            0x14cd
+   #define     tcon_pclk_enable           26 // Bit 5:0 (enable pclk on TCON channel 7 to 2)
+   #define     tcon_pclk_div              24 // Bit 1:0 (control phy clok divide 2,4,6,8)
+   #define     tcon_delay                  0 // Bit 23:0 (3 bit for each channel)
+
+//#define MLVDS_DUAL_GATE_CTL_HI                     0x14fb
+//#define MLVDS_DUAL_GATE_CTL_LO                     0x14fc
+   #define     mlvds_tcon_field_en        24 // Bit 7:0
+   #define     mlvds_dual_gate_reserved   21 // Bit 2:0
+   #define     mlvds_scan_mode_start_line_bit12 20 // Bit 0
+   #define     mlvds_scan_mode_odd        16 // Bit 3:0
+   #define     mlvds_scan_mode_even       12 // Bit 3:0
+   #define     mlvds_scan_mode_start_line  0 // Bit 11:0
+//#define MLVDS_RESET_CONFIG_HI                      0x14fd
+//#define MLVDS_RESET_CONFIG_LO                      0x14fe
+   #define     mLVDS_reset_range_enable   31 // Bit 0
+   #define     mLVDS_reset_range_inv      30 // Bit 0
+   #define     mLVDS_reset_config_res1    29 // Bit 0
+   #define     mLVDS_reset_range_line_0   16 // Bit 11:0
+   #define     mLVDS_reset_config_res3    13 // Bit 2:0
+   #define     mLVDS_reset_range_line_1    0 // Bit 11:0
+
+//#define MLVDS_CLK_CTL_HI                           0x14f4
+//#define MLVDS_CLK_CTL_LO                           0x14f5
+   #define     mlvds_clk_pattern_reserved 31 // Bit 31
+   #define     mpclk_dly                  28 // Bit 2:0
+   #define     mpclk_div                  26 // Bit 1:0 (control phy clok divide 2,4,6,8)
+   #define     use_mpclk                  25 // Bit 0
+   #define     mlvds_clk_half_delay       24 // Bit 0
+   #define     mlvds_clk_pattern           0 // Bit 23:0
+//#define MLVDS_DUAL_GATE_WR_START                   0x14f6
+   #define     mlvds_dual_gate_wr_start    0 // Bit 12:0
+//#define MLVDS_DUAL_GATE_WR_END                     0x14f7
+   #define     mlvds_dual_gate_wr_end      0 // Bit 12:0
+//#define MLVDS_DUAL_GATE_RD_START                   0x14f8
+   #define     mlvds_dual_gate_rd_start    0 // Bit 12:0
+//#define MLVDS_DUAL_GATE_RD_END                     0x14f9
+   #define     mlvds_dual_gate_rd_end      0 // Bit 12:0
+//#define MLVDS_SECOND_RESET_CTL                     0x14fa
+   #define     mLVDS_2nd_reset_start       0 // Bit 12:0
+
+#endif
+
diff --git a/arch/arm/mach-meson6tv/include/mach/tvregs.h b/arch/arm/mach-meson6tv/include/mach/tvregs.h
new file mode 100755
index 000000000000..09649a15726e
--- /dev/null
+++ b/arch/arm/mach-meson6tv/include/mach/tvregs.h
@@ -0,0 +1,1192 @@
+/*
+ * Amlogic Apollo
+ * frame buffer driver
+ *
+ * Copyright (C) 2009 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the named License,
+ * or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
+ *
+ * Author:  Tim Yao <timyao@amlogic.com>
+ *
+ */
+
+#ifndef TVREGS_H
+#define TVREGS_H
+#include <mach/register.h>
+#define MREG_END_MARKER 0xffff
+
+
+	#define VIDEO_CLOCK_HD_25	0x00101529
+	#define VIDEO_CLOCK_SD_25	0x00500a6c
+	#define VIDEO_CLOCK_HD_24	0x00140863
+	#define VIDEO_CLOCK_SD_24	0x0050042d
+
+
+typedef struct reg_s {
+    uint reg;
+    uint val;
+} reg_t;
+
+typedef struct tvinfo_s {
+    uint xres;
+    uint yres;
+    const char *id;
+} tvinfo_t;
+/*
+24M
+25M
+*/
+static const  reg_t tvreg_vclk_sd[]={
+	{HHI_VID_PLL_CNTL,VIDEO_CLOCK_SD_24},//SD.24
+    {HHI_VID_PLL_CNTL,VIDEO_CLOCK_SD_25},//SD,25
+};
+
+static const  reg_t tvreg_vclk_hd[]={
+    {HHI_VID_PLL_CNTL,VIDEO_CLOCK_HD_24},//HD,24
+    {HHI_VID_PLL_CNTL,VIDEO_CLOCK_HD_25},//HD,25
+};
+
+static const  reg_t tvregs_720p[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+
+    {HHI_VID_CLK_CNTL,           0x0,},
+
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+     {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {HHI_HDMI_AFC_CNTL,          0x8c0000c3},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x4040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {ENCP_VIDEO_YFP1_HTIME,      648,   },
+    {ENCP_VIDEO_YFP2_HTIME,      3207,  },
+    {ENCP_VIDEO_MAX_PXCNT,       3299,  },
+    {ENCP_VIDEO_HSPULS_BEGIN,    80,    },
+    {ENCP_VIDEO_HSPULS_END,      240,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    688,   },
+    {ENCP_VIDEO_VSPULS_END,      3248,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    4,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    8,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    4,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    8,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     648,   },
+    {ENCP_VIDEO_HAVON_END,       3207,  },
+    {ENCP_VIDEO_VAVON_BLINE,     29,    },
+    {ENCP_VIDEO_VAVON_ELINE,     748,   },
+    {ENCP_VIDEO_HSO_BEGIN,       256    },
+    {ENCP_VIDEO_HSO_END,         168,   },
+    {ENCP_VIDEO_VSO_BEGIN,       168,   },
+    {ENCP_VIDEO_VSO_END,         256,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {ENCP_VIDEO_MAX_LNCNT,       749,   },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VENC_UPSAMPLE_CTRL0,        0x9061,},
+    {VENC_UPSAMPLE_CTRL1,        0xa061,},
+    {VENC_UPSAMPLE_CTRL2,        0xb061,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {ENCP_VIDEO_EN,              1,     },
+    {ENCI_VIDEO_EN,              0,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const  reg_t tvregs_720p_50hz[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+
+    {VENC_DVI_SETTING,           0x202d,},
+    {ENCP_VIDEO_MAX_PXCNT,       3959,  },
+    {ENCP_VIDEO_MAX_LNCNT,       749,   },
+
+     //analog vidoe position in horizontal
+    {ENCP_VIDEO_HSPULS_BEGIN,    80,    },
+    {ENCP_VIDEO_HSPULS_END,      240,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+
+    //DE position in horizontal
+    {ENCP_VIDEO_HAVON_BEGIN,     648,   },
+    {ENCP_VIDEO_HAVON_END,       3207,  },
+
+    //ditital hsync positon in horizontal
+    {ENCP_VIDEO_HSO_BEGIN,       128 ,},
+    {ENCP_VIDEO_HSO_END,         208 , },
+
+    /* vsync horizontal timing */
+    {ENCP_VIDEO_VSPULS_BEGIN,    688,   },
+    {ENCP_VIDEO_VSPULS_END,      3248,  },
+
+    /* vertical timing settings */
+    {ENCP_VIDEO_VSPULS_BLINE,    4,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    8,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    4,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    8,     },
+
+    //DE position in vertical
+    {ENCP_VIDEO_VAVON_BLINE,     29,    },
+    {ENCP_VIDEO_VAVON_ELINE,     748,   },
+
+    //adjust the vsync start point and end point
+    {ENCP_VIDEO_VSO_BEGIN,       128,},  //168,   },
+    {ENCP_VIDEO_VSO_END,         128, },  //256,   },
+
+    //adjust the vsync start line and end line
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    /* filter & misc settings */
+    {ENCP_VIDEO_YFP1_HTIME,      648,   },
+    {ENCP_VIDEO_YFP2_HTIME,      3207,  },
+
+
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {ENCP_VIDEO_MODE,            0x4040,},  //Enable Hsync and equalization pulse switch in center
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},//bit6:swap PbPr; bit4:YPBPR gain as HDTV type;
+                                                 //bit3:Data input from VFIFO;bit[2}0]:repreat pixel a time
+
+     {ENCP_VIDEO_SYNC_MODE,       0x407,  },//Video input Synchronization mode ( bit[7:0] -- 4:Slave mode, 7:Master mode)
+                                                 //bit[15:6] -- adjust the vsync vertical position
+    {ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {ENCP_VIDEO_EN,              1,     },
+    {ENCI_VIDEO_EN,              0,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_480i[] = {
+    {VENC_VDAC_SETTING,            0xff,  },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,              0x12,},
+    {ENCI_CFILT_CTRL2,              0x12,},
+    {VENC_DVI_SETTING,             0,     },
+    {ENCI_VIDEO_MODE,              0,     },
+    {ENCI_VIDEO_MODE_ADV,          0,     },
+    {ENCI_SYNC_HSO_BEGIN,          5,     },
+    {ENCI_SYNC_HSO_END,            129,   },
+    {ENCI_SYNC_VSO_EVNLN,          0x0003 },
+    {ENCI_SYNC_VSO_ODDLN,          0x0104 },
+    {ENCI_MACV_MAX_AMP,            0x810b },
+    {VENC_VIDEO_PROG_MODE,         0xf0   },
+    {ENCI_VIDEO_MODE,              0x08   },
+    {ENCI_VIDEO_MODE_ADV,          0x26,  },
+    {ENCI_VIDEO_SCH,               0x20,  },
+    {ENCI_SYNC_MODE,               0x07,  },
+    {ENCI_YC_DELAY,                0x353, },
+    {ENCI_VFIFO2VD_PIXEL_START,    0xf3,  },
+    {ENCI_VFIFO2VD_PIXEL_END,      0x0693,},
+    {ENCI_VFIFO2VD_LINE_TOP_START, 0x12,  },
+    {ENCI_VFIFO2VD_LINE_TOP_END,   0x102, },
+    {ENCI_VFIFO2VD_LINE_BOT_START, 0x13,  },
+    {ENCI_VFIFO2VD_LINE_BOT_END,   0x103, },
+    {VENC_SYNC_ROUTE,              0,     },
+    {ENCI_DBG_PX_RST,              0,     },
+    {VENC_INTCTRL,                 0x2,   },
+    {ENCI_VFIFO2VD_CTL,            0x4e01,},
+    {VENC_VDAC_SETTING,            0,     },
+    {VENC_UPSAMPLE_CTRL0,          0x0061,},
+    {VENC_UPSAMPLE_CTRL1,          0x4061,},
+    {VENC_UPSAMPLE_CTRL2,          0x5061,},
+    {VENC_VDAC_DACSEL0,            0x0000,},
+    {VENC_VDAC_DACSEL1,            0x0000,},
+    {VENC_VDAC_DACSEL2,            0x0000,},
+    {VENC_VDAC_DACSEL3,            0x0000,},
+    {VENC_VDAC_DACSEL4,            0x0000,},
+    {VENC_VDAC_DACSEL5,            0x0000,},
+    {VPU_VIU_VENC_MUX_CTRL,        0x0005,},
+    {VENC_VDAC_FIFO_CTRL,          0x2000,},
+    {ENCI_DACSEL_0,                0x6405 },
+    {ENCI_DACSEL_1,                0x87   },
+    {ENCP_VIDEO_EN,                0,     },
+    {ENCI_VIDEO_EN,                1,     },
+    {MREG_END_MARKER,              0      }
+};
+
+static const reg_t tvregs_480cvbs[] = {
+     {VENC_VDAC_SETTING,            0xff,  },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,              0x12,},
+    {ENCI_CFILT_CTRL2,              0x12,},
+    {VENC_DVI_SETTING,             0,     },
+    {ENCI_VIDEO_MODE,              0,     },
+    {ENCI_VIDEO_MODE_ADV,          0,     },
+    {ENCI_SYNC_HSO_BEGIN,          5,     },
+    {ENCI_SYNC_HSO_END,            129,   },
+    {ENCI_SYNC_VSO_EVNLN,          0x0003 },
+    {ENCI_SYNC_VSO_ODDLN,          0x0104 },
+    {ENCI_MACV_MAX_AMP,            0x810b },
+    {VENC_VIDEO_PROG_MODE,         0xf0   },
+    {ENCI_VIDEO_MODE,              0x08   },
+    {ENCI_VIDEO_MODE_ADV,          0x26,  },
+    {ENCI_VIDEO_SCH,               0x20,  },
+    {ENCI_SYNC_MODE,               0x07,  },
+    {ENCI_YC_DELAY,                0x353, },
+    {ENCI_VFIFO2VD_PIXEL_START,    0xf3,  },
+    {ENCI_VFIFO2VD_PIXEL_END,      0x0693,},
+    {ENCI_VFIFO2VD_LINE_TOP_START, 0x12,  },
+    {ENCI_VFIFO2VD_LINE_TOP_END,   0x102, },
+    {ENCI_VFIFO2VD_LINE_BOT_START, 0x13,  },
+    {ENCI_VFIFO2VD_LINE_BOT_END,   0x103, },
+    {VENC_SYNC_ROUTE,              0,     },
+    {ENCI_DBG_PX_RST,              0,     },
+    {VENC_INTCTRL,                 0x2,   },
+    {ENCI_VFIFO2VD_CTL,            0x4e01,},
+    {VENC_VDAC_SETTING,            0,     },
+    {VENC_UPSAMPLE_CTRL0,          0x0061,},
+    {VENC_UPSAMPLE_CTRL1,          0x4061,},
+    {VENC_UPSAMPLE_CTRL2,          0x5061,},
+    {VENC_VDAC_DACSEL0,            0x0000,},
+    {VENC_VDAC_DACSEL1,            0x0000,},
+    {VENC_VDAC_DACSEL2,            0x0000,},
+    {VENC_VDAC_DACSEL3,            0x0000,},
+    {VENC_VDAC_DACSEL4,            0x0000,},
+    {VENC_VDAC_DACSEL5,            0x0000,},
+    {VPU_VIU_VENC_MUX_CTRL,        0x0005,},
+    {VENC_VDAC_FIFO_CTRL,          0x2000,},
+    {ENCI_DACSEL_0,                0x1111 },
+    {ENCI_DACSEL_1,                0x11   },
+    {ENCP_VIDEO_EN,                0,     },
+    {ENCI_VIDEO_EN,                1,     },
+    {MREG_END_MARKER,              0      }
+};
+
+static const reg_t tvregs_480p[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    //{HHI_VID_CLK_DIV,            0x01000100,},
+    {ENCP_VIDEO_FILT_CTRL,       0x2052,},
+    {VENC_DVI_SETTING,           0x21,  },
+    {ENCP_VIDEO_MODE,            0x4000,},
+    {ENCP_VIDEO_MODE_ADV,        9,     },
+    {ENCP_VIDEO_YFP1_HTIME,      244,   },
+    {ENCP_VIDEO_YFP2_HTIME,      1630,  },
+    {ENCP_VIDEO_YC_DLY,          0,     },
+    {ENCP_VIDEO_MAX_PXCNT,       1715,  },
+    {ENCP_VIDEO_MAX_LNCNT,       524,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0x22,  },
+    {ENCP_VIDEO_HSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0,     },
+    {ENCP_VIDEO_VSPULS_END,      1589   },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     249,   },
+    {ENCP_VIDEO_HAVON_END,       1689,  },
+    {ENCP_VIDEO_VAVON_BLINE,     42,    },
+    {ENCP_VIDEO_VAVON_ELINE,     521,   },
+    {ENCP_VIDEO_SYNC_MODE,       0x07,  },
+    {VENC_VIDEO_PROG_MODE,       0x0,   },
+    {VENC_VIDEO_EXSRC,           0x0,   },
+    {ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_HSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_VSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },  //added by JZD. Switch Panel to 480p first time, movie video flicks if not set this to 0
+    {ENCP_VIDEO_SY_VAL,          8,     },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VENC_UPSAMPLE_CTRL0,        0x9061,},
+    {VENC_UPSAMPLE_CTRL1,        0xa061,},
+    {VENC_UPSAMPLE_CTRL2,        0xb061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_576i[] = {
+    {VENC_VDAC_SETTING,               0xff,      },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,                 0x12,    },
+    {ENCI_CFILT_CTRL2,                 0x12,    },
+    {VENC_DVI_SETTING,                0,         },
+    {ENCI_VIDEO_MODE,                 0,         },
+    {ENCI_VIDEO_MODE_ADV,             0,         },
+    {ENCI_SYNC_HSO_BEGIN,             3,         },
+    {ENCI_SYNC_HSO_END,               129,       },
+    {ENCI_SYNC_VSO_EVNLN,             0x0003     },
+    {ENCI_SYNC_VSO_ODDLN,             0x0104     },
+    {ENCI_MACV_MAX_AMP,               0x8107     },
+    {VENC_VIDEO_PROG_MODE,            0xff       },
+    {ENCI_VIDEO_MODE,                 0x13       },
+    {ENCI_VIDEO_MODE_ADV,             0x26,      },
+    {ENCI_VIDEO_SCH,                  0x28,      },
+    {ENCI_SYNC_MODE,                  0x07,      },
+    {ENCI_YC_DELAY,                   0x353,     },
+    {ENCI_VFIFO2VD_PIXEL_START,       0x010b     },
+    {ENCI_VFIFO2VD_PIXEL_END,         0x06ab     },
+    {ENCI_VFIFO2VD_LINE_TOP_START,    0x0016     },
+    {ENCI_VFIFO2VD_LINE_TOP_END,      0x0136     },
+    {ENCI_VFIFO2VD_LINE_BOT_START,    0x0017     },
+    {ENCI_VFIFO2VD_LINE_BOT_END,      0x0137     },
+    {VENC_SYNC_ROUTE,                 0,         },
+    {ENCI_DBG_PX_RST,                 0,         },
+    {VENC_INTCTRL,                    0x2,       },
+    {ENCI_VFIFO2VD_CTL,               0x4e01,    },
+    {VENC_VDAC_SETTING,               0,         },
+    {VENC_UPSAMPLE_CTRL0,             0x0061,    },
+    {VENC_UPSAMPLE_CTRL1,             0x4061,    },
+    {VENC_UPSAMPLE_CTRL2,             0x5061,    },
+    {VENC_VDAC_DACSEL0,               0x0000,    },
+    {VENC_VDAC_DACSEL1,               0x0000,    },
+    {VENC_VDAC_DACSEL2,               0x0000,    },
+    {VENC_VDAC_DACSEL3,               0x0000,    },
+    {VENC_VDAC_DACSEL4,               0x0000,    },
+    {VENC_VDAC_DACSEL5,               0x0000,    },
+    {VPU_VIU_VENC_MUX_CTRL,           0x0005,    },
+    {VENC_VDAC_FIFO_CTRL,             0x2000,    },
+    {ENCI_DACSEL_0,                   0x6405     },
+    {ENCI_DACSEL_1,                   0x87       },
+    {ENCP_VIDEO_EN,                   0,         },
+    {ENCI_VIDEO_EN,                   1,         },
+    {MREG_END_MARKER,                 0          }
+};
+
+static const reg_t tvregs_576cvbs[] = {
+{VENC_VDAC_SETTING,               0xff,      },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,                 0x12,    },
+    {ENCI_CFILT_CTRL2,                 0x12,    },
+    {VENC_DVI_SETTING,                0,         },
+    {ENCI_VIDEO_MODE,                 0,         },
+    {ENCI_VIDEO_MODE_ADV,             0,         },
+    {ENCI_SYNC_HSO_BEGIN,             3,         },
+    {ENCI_SYNC_HSO_END,               129,       },
+    {ENCI_SYNC_VSO_EVNLN,             0x0003     },
+    {ENCI_SYNC_VSO_ODDLN,             0x0104     },
+    {ENCI_MACV_MAX_AMP,               0x8107     },
+    {VENC_VIDEO_PROG_MODE,            0xff       },
+    {ENCI_VIDEO_MODE,                 0x13       },
+    {ENCI_VIDEO_MODE_ADV,             0x26,      },
+    {ENCI_VIDEO_SCH,                  0x28,      },
+    {ENCI_SYNC_MODE,                  0x07,      },
+    {ENCI_YC_DELAY,                   0x353,     },
+    {ENCI_VFIFO2VD_PIXEL_START,       0x010b     },
+    {ENCI_VFIFO2VD_PIXEL_END,         0x06ab     },
+    {ENCI_VFIFO2VD_LINE_TOP_START,    0x0016     },
+    {ENCI_VFIFO2VD_LINE_TOP_END,      0x0136     },
+    {ENCI_VFIFO2VD_LINE_BOT_START,    0x0017     },
+    {ENCI_VFIFO2VD_LINE_BOT_END,      0x0137     },
+    {VENC_SYNC_ROUTE,                 0,         },
+    {ENCI_DBG_PX_RST,                 0,         },
+    {VENC_INTCTRL,                    0x2,       },
+    {ENCI_VFIFO2VD_CTL,               0x4e01,    },
+    {VENC_VDAC_SETTING,               0,         },
+    {VENC_UPSAMPLE_CTRL0,             0x0061,    },
+    {VENC_UPSAMPLE_CTRL1,             0x4061,    },
+    {VENC_UPSAMPLE_CTRL2,             0x5061,    },
+    {VENC_VDAC_DACSEL0,               0x0000,    },
+    {VENC_VDAC_DACSEL1,               0x0000,    },
+    {VENC_VDAC_DACSEL2,               0x0000,    },
+    {VENC_VDAC_DACSEL3,               0x0000,    },
+    {VENC_VDAC_DACSEL4,               0x0000,    },
+    {VENC_VDAC_DACSEL5,               0x0000,    },
+    {VPU_VIU_VENC_MUX_CTRL,           0x0005,    },
+    {VENC_VDAC_FIFO_CTRL,             0x2000,    },
+    {ENCI_DACSEL_0,                   0x1111     },
+    {ENCI_DACSEL_1,                   0x11       },
+    {ENCP_VIDEO_EN,                   0,         },
+    {ENCI_VIDEO_EN,                   1,         },
+    {MREG_END_MARKER,                 0          }
+};
+
+static const reg_t tvregs_576p[] = {
+    {VENC_VDAC_SETTING,          0xff,      },
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {HHI_HDMI_AFC_CNTL,          0x8c0000c3,},
+    {ENCP_VIDEO_FILT_CTRL,       0x52,      },
+    {VENC_DVI_SETTING,           0x21,      },
+    {ENCP_VIDEO_MODE,            0x4000,    },
+    {ENCP_VIDEO_MODE_ADV,        9,         },
+    {ENCP_VIDEO_YFP1_HTIME,      235,       },
+    {ENCP_VIDEO_YFP2_HTIME,      1674,      },
+    {ENCP_VIDEO_YC_DLY,          0xf,       },
+    {ENCP_VIDEO_MAX_PXCNT,       1727,      },
+    {ENCP_VIDEO_MAX_LNCNT,       624,       },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,         },
+    {ENCP_VIDEO_HSPULS_END,      0x80,      },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,        },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0,         },
+    {ENCP_VIDEO_VSPULS_END,      1599       },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,         },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,         },
+    {ENCP_VIDEO_HAVON_BEGIN,     235,       },
+    {ENCP_VIDEO_HAVON_END,       1674,      },
+    {ENCP_VIDEO_VAVON_BLINE,     44,        },
+    {ENCP_VIDEO_VAVON_ELINE,     619,       },
+    {ENCP_VIDEO_SYNC_MODE,       0x07,      },
+    {VENC_VIDEO_PROG_MODE,       0x0,       },
+    {VENC_VIDEO_EXSRC,           0x0,       },
+    {ENCP_VIDEO_HSO_BEGIN,       0x80,      },
+    {ENCP_VIDEO_HSO_END,         0x0,       },
+    {ENCP_VIDEO_VSO_BEGIN,       0x0,       },
+    {ENCP_VIDEO_VSO_END,         0x5,       },
+    {ENCP_VIDEO_VSO_BLINE,       0,         },
+    {ENCP_VIDEO_SY_VAL,          8,         },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8,     },
+    {VENC_SYNC_ROUTE,            0,         },
+    {VENC_INTCTRL,               0x200,     },
+    {VFIFO2VD_CTL,               0,         },
+    {VENC_VDAC_SETTING,          0,         },
+    {VENC_UPSAMPLE_CTRL0,        0x9061,    },
+    {VENC_UPSAMPLE_CTRL1,        0xa061,    },
+    {VENC_UPSAMPLE_CTRL2,        0xb061,    },
+    {VENC_VDAC_DACSEL0,          0xf003,    },
+    {VENC_VDAC_DACSEL1,          0xf003,    },
+    {VENC_VDAC_DACSEL2,          0xf003,    },
+    {VENC_VDAC_DACSEL3,          0xf003,    },
+    {VENC_VDAC_DACSEL4,          0xf003,    },
+    {VENC_VDAC_DACSEL5,          0xf003,    },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,    },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,    },
+    {ENCP_DACSEL_0,              0x3102,    },
+    {ENCP_DACSEL_1,              0x0054,    },
+    {ENCI_VIDEO_EN,              0          },
+    {ENCP_VIDEO_EN,              1          },
+    {MREG_END_MARKER,            0          }
+};
+
+static const reg_t tvregs_1080i[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+//	{VCLK_HD},
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MAX_PXCNT,       4399,  },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    {ENCP_VIDEO_HSPULS_BEGIN,    88,    },
+    {ENCP_VIDEO_HSPULS_END,      264,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {ENCP_VIDEO_HAVON_BEGIN,     516,   },
+    {ENCP_VIDEO_HAVON_END,       4355,  },
+    {ENCP_VIDEO_HSO_BEGIN,       264,   },
+    {ENCP_VIDEO_HSO_END,         176,   },
+    {ENCP_VIDEO_EQPULS_BEGIN,    2288,  },
+    {ENCP_VIDEO_EQPULS_END,      2464,  },
+    {ENCP_VIDEO_VSPULS_BEGIN,    440,   },
+    {ENCP_VIDEO_VSPULS_END,      2200,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    4,     },
+    {ENCP_VIDEO_VAVON_BLINE,     20,    },
+    {ENCP_VIDEO_VAVON_ELINE,     559,   },
+    {ENCP_VIDEO_VSO_BEGIN,       88,    },
+    {ENCP_VIDEO_VSO_END,         88,    },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {ENCP_VIDEO_YFP1_HTIME,      516,   },
+    {ENCP_VIDEO_YFP2_HTIME,      4355,  },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {ENCP_VIDEO_OFLD_VOAV_OFST,  0x11   },
+    {ENCP_VIDEO_MODE,            0x5ffc,},
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {ENCP_VIDEO_SYNC_MODE,       0x207, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {VENC_VDAC_SETTING,          0,     },
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080i_50hz[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+//	{VCLK_HD},
+	    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+
+    {VENC_DVI_SETTING,           0x202d,},
+    {ENCP_VIDEO_MAX_PXCNT,       5279,  },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+
+    //analog vidoe position in horizontal
+    {ENCP_VIDEO_HSPULS_BEGIN,    88,    },
+    {ENCP_VIDEO_HSPULS_END,      264,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+
+    //DE position in horizontal
+    {ENCP_VIDEO_HAVON_BEGIN,     526,   },
+    {ENCP_VIDEO_HAVON_END,       4365,  },
+
+    //ditital hsync positon in horizontal
+    {ENCP_VIDEO_HSO_BEGIN,       142,   },
+    {ENCP_VIDEO_HSO_END,         230,   },
+
+    /* vsync horizontal timing */
+    {ENCP_VIDEO_EQPULS_BEGIN,    2728,  },
+    {ENCP_VIDEO_EQPULS_END,      2904,  },
+    {ENCP_VIDEO_VSPULS_BEGIN,    440,   },
+    {ENCP_VIDEO_VSPULS_END,      2200,  },
+
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    4,     },
+
+    //DE position in vertical
+    {ENCP_VIDEO_VAVON_BLINE,     20,    },
+    {ENCP_VIDEO_VAVON_ELINE,     559,   },
+
+    //adjust vsync start point and end point
+    {ENCP_VIDEO_VSO_BEGIN,       142,    },
+    {ENCP_VIDEO_VSO_END,         142,    },
+
+    //adjust the vsync start line and end line
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    /* filter & misc settings */
+    {ENCP_VIDEO_YFP1_HTIME,      526,   },
+    {ENCP_VIDEO_YFP2_HTIME,      4365,  },
+
+    {VENC_VIDEO_PROG_MODE,       0x100, },  // Select clk108 as DAC clock, progressive mode
+    {ENCP_VIDEO_OFLD_VOAV_OFST,  0x11   },//bit[15:12]: Odd field VSO  offset begin,
+                                                        //bit[11:8]: Odd field VSO  offset end,
+                                                        //bit[7:4]: Odd field VAVON offset begin,
+                                                        //bit[3:0]: Odd field VAVON offset end,
+    {ENCP_VIDEO_MODE,            0x5ffc,},//Enable Hsync and equalization pulse switch in center
+    {ENCP_VIDEO_MODE_ADV,        0x0019,}, //bit6:swap PbPr; bit4:YPBPR gain as HDTV type;
+                                                 //bit3:Data input from VFIFO;bit[2}0]:repreat pixel a time
+    {ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {VENC_VDAC_SETTING,          0,     },
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080p[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+
+     {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+     {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+
+    {ENCP_VIDEO_FILT_CTRL,       0x1052,},
+    {VENC_DVI_SETTING,           0x0001,},
+    {ENCP_VIDEO_MODE,            0x4040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0018,},
+    {ENCP_VIDEO_YFP1_HTIME,      140,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2060,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2199,  },
+    {ENCP_VIDEO_HSPULS_BEGIN,    2156,  },//1980
+    {ENCP_VIDEO_HSPULS_END,      44,    },
+    {ENCP_VIDEO_HSPULS_SWITCH,   44,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    140,   },
+    {ENCP_VIDEO_VSPULS_END,      2059,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
+    {ENCP_VIDEO_HAVON_BEGIN,     148,   },
+    {ENCP_VIDEO_HAVON_END,       2067,  },
+    {ENCP_VIDEO_VAVON_BLINE,     41,    },
+    {ENCP_VIDEO_VAVON_ELINE,     1120,  },
+    {ENCP_VIDEO_HSO_BEGIN,       44,    },
+    {ENCP_VIDEO_HSO_END,         2156,  },
+    {ENCP_VIDEO_VSO_BEGIN,       2100,  },
+    {ENCP_VIDEO_VSO_END,         2164,  },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},      //New Add. If not set, when system boots up, switch panel to HDMI 1080P, nothing on TV.
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080p_50hz[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x1052,},
+
+    // bit 13    1          (delayed prog_vs)
+    // bit 5:4:  2          (pixel[0])
+    // bit 3:    1          invert vsync or not
+    // bit 2:    1          invert hsync or not
+    // bit1:     1          (select viu sync)
+    // bit0:     1          (progressive)
+    {VENC_DVI_SETTING,           0x000d,},
+    {ENCP_VIDEO_MAX_PXCNT,       2639,  },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    /* horizontal timing settings */
+    {ENCP_VIDEO_HSPULS_BEGIN,    44,  },//1980
+    {ENCP_VIDEO_HSPULS_END,      132,    },
+    {ENCP_VIDEO_HSPULS_SWITCH,   44,    },
+
+    //DE position in horizontal
+    {ENCP_VIDEO_HAVON_BEGIN,     271,   },
+    {ENCP_VIDEO_HAVON_END,       2190,  },
+
+    //ditital hsync positon in horizontal
+    {ENCP_VIDEO_HSO_BEGIN,       79 ,    },
+    {ENCP_VIDEO_HSO_END,         123,  },
+
+    /* vsync horizontal timing */
+    {ENCP_VIDEO_VSPULS_BEGIN,    220,   },
+    {ENCP_VIDEO_VSPULS_END,      2140,  },
+
+    /* vertical timing settings */
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    4,     },//35
+    {ENCP_VIDEO_VAVON_BLINE,     41,    },
+    {ENCP_VIDEO_VAVON_ELINE,     1120,  },
+
+    //adjust the hsync & vsync start point and end point
+    {ENCP_VIDEO_VSO_BEGIN,       79,  },
+    {ENCP_VIDEO_VSO_END,         79,  },
+
+    //adjust the vsync start line and end line
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    {ENCP_VIDEO_YFP1_HTIME,      271,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2190,  },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0018,},
+
+    {ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
+
+    {ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
+
+    {ENCP_VIDEO_RGB_CTRL, 2,},       // enable sync on B
+
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {VENC_VDAC_SETTING,          0,     },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+static const reg_t tvregs_vga_640x480[] = { // 25.17mhz 800 *525
+     {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042a,},//50
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x1052,},
+    //{HHI_VID_CLK_DIV,            0x01000100,},
+    {ENCP_VIDEO_FILT_CTRL,       0x2052,},
+    {VENC_DVI_SETTING,           0x21,  },
+    {ENCP_VIDEO_MODE,            0,     },
+    {ENCP_VIDEO_MODE_ADV,        0x009,     },
+    {ENCP_VIDEO_YFP1_HTIME,      244,   },
+    {ENCP_VIDEO_YFP2_HTIME,      1630,  },
+    {ENCP_VIDEO_YC_DLY,          0,     },
+    {ENCP_VIDEO_MAX_PXCNT,       1599,  },
+    {ENCP_VIDEO_MAX_LNCNT,       525,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0x60,  },
+    {ENCP_VIDEO_HSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0,     },
+    {ENCP_VIDEO_VSPULS_END,      1589   },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     153,   },
+    {ENCP_VIDEO_HAVON_END,       1433,  },
+    {ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {ENCP_VIDEO_VAVON_ELINE,     540,   },
+    {ENCP_VIDEO_SYNC_MODE,       0x07,  },
+    {VENC_VIDEO_PROG_MODE,       0x100,   },
+    {VENC_VIDEO_EXSRC,           0x0,   },
+    {ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_HSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_VSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_SY_VAL,          8,     },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    /////////////////////////////
+    {ENCP_VIDEO_RGB_CTRL,		 0,},
+    {VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {ENCP_DACSEL_0,              0x0543,},
+    {ENCP_DACSEL_1,              0x0000,},
+
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+/////////////////////////////////////
+};
+static const reg_t tvregs_svga_800x600[]={ //39.5mhz 1056 *628
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x00010422,},//79
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2112,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2111,  },
+    {ENCP_VIDEO_MAX_LNCNT,       628,   },//628
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {ENCP_VIDEO_HSPULS_END,      230,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0x58,   },
+    {ENCP_VIDEO_VSPULS_END,      0x80,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     267,   },//59
+    {ENCP_VIDEO_HAVON_END,       1866,  },//1659
+    {ENCP_VIDEO_VAVON_BLINE,    59,    },//59
+    {ENCP_VIDEO_VAVON_ELINE,     658,   },//659
+    {ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {ENCP_VIDEO_HSO_END,         260,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {ENCP_VIDEO_VSO_END,         2200,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_VIDEO_EXSRC,           0x0,   },
+    {ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_HSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_VSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_SY_VAL,          8,     },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    //////////////////////////
+    {ENCP_VIDEO_RGB_CTRL,		 0,},
+    {VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {ENCP_DACSEL_0,              0x0543,},
+    {ENCP_DACSEL_1,              0x0000,},
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+	//////////////////////////////
+ };
+static const reg_t tvregs_xga_1024x768[] = {
+   /* {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0009,},
+    {ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2500,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2531,  },
+    {ENCP_VIDEO_MAX_LNCNT,       804,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {ENCP_VIDEO_HSPULS_END,      230,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0x22,   },
+    {ENCP_VIDEO_VSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     59,   },
+    {ENCP_VIDEO_HAVON_END,       2106,  },
+    {ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {ENCP_VIDEO_VAVON_ELINE,     827,   },//827
+    {ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {ENCP_VIDEO_HSO_END,         260,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {ENCP_VIDEO_VSO_END,         2200,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },*/
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x00010436,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0009,},
+    {ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2500,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2691,  },
+    {ENCP_VIDEO_MAX_LNCNT,       806,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {ENCP_VIDEO_HSPULS_END,      230,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0x22,   },
+    {ENCP_VIDEO_VSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     315,   },
+    {ENCP_VIDEO_HAVON_END,       2362,  },
+    {ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {ENCP_VIDEO_VAVON_ELINE,     827,   },//827
+    {ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {ENCP_VIDEO_HSO_END,         260,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {ENCP_VIDEO_VSO_END,         2200,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    ////////////////////////
+    {ENCP_VIDEO_RGB_CTRL,		 0,},
+    {VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {ENCP_DACSEL_0,              0x0543,},
+    {ENCP_DACSEL_1,              0x0000,},
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+	///////////////////////////////////
+
+};
+
+/* The sequence of register tables items must match the enum define in tvmode.h */
+static const reg_t *tvregsTab[] = {
+    tvregs_480i,
+    tvregs_480cvbs,
+    tvregs_480p,
+    tvregs_576i,
+    tvregs_576cvbs,
+    tvregs_576p,
+    tvregs_720p,
+    tvregs_1080i,       //Adjust tvregs_* sequences and match the enum define in tvmode.h
+    tvregs_1080p,
+    tvregs_720p_50hz,
+    tvregs_1080i_50hz,
+    tvregs_1080p_50hz,
+    tvregs_vga_640x480,
+    tvregs_svga_800x600,
+    tvregs_xga_1024x768
+};
+
+static const tvinfo_t tvinfoTab[] = {
+    {.xres =  720, .yres =  480, .id = "480i"},
+    {.xres =  720, .yres =  480, .id = "480cvbs"},
+    {.xres =  720, .yres =  480, .id = "480p"},
+    {.xres =  720, .yres =  576, .id = "576i"},
+    {.xres =  720, .yres =  576, .id = "576cvbs"},
+    {.xres =  720, .yres =  576, .id = "576p"},
+    {.xres = 1280, .yres =  720, .id = "720p"},
+    {.xres = 1920, .yres = 1080, .id = "1080i"},
+    {.xres = 1920, .yres = 1080, .id = "1080p"},
+    {.xres = 1280, .yres =  720, .id = "720p50hz"},
+    {.xres = 1920, .yres = 1080, .id = "1080i50hz"},
+    {.xres = 1920, .yres = 1080, .id = "1080p50hz"},
+    {.xres = 640, .yres = 480, .id = "vga"},
+    {.xres = 800, .yres = 600, .id = "svga"},
+    {.xres = 1024, .yres = 768, .id = "xga"},
+};
+
+static inline void setreg(const reg_t *r)
+{
+    aml_write_reg32(CBUS_REG_ADDR(r->reg), r->val);
+    printk("[0x%x] = 0x%x\n", r->reg, r->val);
+}
+
+#endif /* TVREGS_H */
+
diff --git a/arch/arm/mach-meson6tvd/include/mach/am_regs.h b/arch/arm/mach-meson6tvd/include/mach/am_regs.h
index 0508108017a0..057f71ee9c4d 100755
--- a/arch/arm/mach-meson6tvd/include/mach/am_regs.h
+++ b/arch/arm/mach-meson6tvd/include/mach/am_regs.h
@@ -32,5 +32,6 @@
 #include "c_stb_define.h"
 #include "cpu.h"
 #include "io.h"
+#include "canvas.h"
 
 #endif /* __MACH_MESON6TVD_AM_REGS_H */
diff --git a/arch/arm/mach-meson6tvd/include/mach/canvas.h b/arch/arm/mach-meson6tvd/include/mach/canvas.h
new file mode 100755
index 000000000000..ee84b75c14b3
--- /dev/null
+++ b/arch/arm/mach-meson6tvd/include/mach/canvas.h
@@ -0,0 +1,48 @@
+#ifndef __CANVAS_H__
+#define __CANVAS_H__
+
+#define CANVAS_ADDR_LMASK       0x1fffffff
+#define CANVAS_WIDTH_LMASK      0x7
+#define CANVAS_WIDTH_LWID       3
+#define CANVAS_WIDTH_LBIT       29
+
+#define CANVAS_WIDTH_HMASK      0x1ff
+#define CANVAS_WIDTH_HBIT       0
+#define CANVAS_HEIGHT_MASK      0x1fff
+#define CANVAS_HEIGHT_BIT       9
+#define CANVAS_YWRAP            (1<<23)
+#define CANVAS_XWRAP            (1<<22)
+#define CANVAS_ADDR_NOWRAP      0x00
+#define CANVAS_ADDR_WRAPX       0x01
+#define CANVAS_ADDR_WRAPY       0x02
+#define CANVAS_BLKMODE_MASK     3
+#define CANVAS_BLKMODE_BIT      24
+#define CANVAS_BLKMODE_LINEAR   0x00
+#define CANVAS_BLKMODE_32X32    0x01
+#define CANVAS_BLKMODE_64X32    0x02
+
+#define CANVAS_LUT_INDEX_BIT    0
+#define CANVAS_LUT_INDEX_MASK   0x7
+#define CANVAS_LUT_WR_EN        (0x2 << 8)
+#define CANVAS_LUT_RD_EN        (0x1 << 8)
+
+#define MMC_PHY_CTRL              0x1380
+
+/****************logo relative part *************************************************/
+#define ASSIST_MBOX1_CLR_REG VDEC_ASSIST_MBOX1_CLR_REG
+#define ASSIST_MBOX1_MASK VDEC_ASSIST_MBOX1_MASK
+#define RESET_PSCALE        (1<<4)
+#define RESET_IQIDCT        (1<<2)
+#define RESET_MC            (1<<3)
+#define MEM_BUFCTRL_MANUAL		(1<<1)
+#define MEM_BUFCTRL_INIT		(1<<0)
+#define MEM_LEVEL_CNT_BIT       18
+#define MEM_FIFO_CNT_BIT        16
+#define MEM_FILL_ON_LEVEL		(1<<10)
+#define MEM_CTRL_EMPTY_EN		(1<<2)
+#define MEM_CTRL_FILL_EN		(1<<1)
+#define MEM_CTRL_INIT			(1<<0)
+#define CANVAS_WRITE(x...)		   WRITE_APB_REG(x)
+#define CANVAS_READ(x...)                  READ_APB_REG(x)
+#endif
+
diff --git a/drivers/amlogic/display/lcd/aml_lcd.c b/drivers/amlogic/display/lcd/aml_lcd.c
index 1cff516ea0f7..d944e756007d 100755
--- a/drivers/amlogic/display/lcd/aml_lcd.c
+++ b/drivers/amlogic/display/lcd/aml_lcd.c
@@ -16,12 +16,14 @@
 #include <linux/module.h>
 #include <linux/platform_device.h>
 #include <linux/string.h>
-#include <linux/panel/lcd.h>
-#include <linux/vout/vinfo.h>
-#include <linux/vout/vout_notify.h>
+#include <linux/amlogic/vout/lcd.h>
+#include <linux/amlogic/vout/vinfo.h>
+#include <linux/amlogic/vout/vout_notify.h>
+#include <linux/amlogic/vout/lcd_aml.h>
+
 #include <linux/kernel.h>
 #include <linux/interrupt.h>
-#include <linux/logo/logo.h>
+//#include <linux/logo/logo.h>
 #include <mach/am_regs.h>
 #include <mach/mlvds_regs.h>
 #include <mach/clock.h>
@@ -32,14 +34,62 @@
 #include <linux/notifier.h>
 #include <linux/reboot.h>
 
-#include <mach/gpio.h>
-#include <mach/gpio_data.h>
-#include <mach/panel.h>
-#include <linux/amlogic/vout/lcd_aml.h>
+#include <linux/gpio.h>
+#include <linux/amlogic/panel.h>
+
+#include <linux/of.h>
 
 extern unsigned int clk_util_clk_msr(unsigned int clk_mux);
 
 static struct class *aml_lcd_clsp;
+#define CLOCK_ENABLE_DELAY  500
+#define CLOCK_DISABLE_DELAY  50
+
+#define PWM_ENABLE_DELAY     20
+#define PWM_DISABLE_DELAY    20
+
+#define PANEL_POWER_ON_DELAY   50
+#define PANEL_POWER_OFF_DELAY   0
+
+#define BACKLIGHT_POWER_ON_DELAY  0
+#define BACKLIGHT_POWER_OFF_DELAY  200
+
+#define H_ACTIVE        1920
+#define V_ACTIVE        1080
+#define H_PERIOD        2200
+#define V_PERIOD        1125
+#define VIDEO_ON_PIXEL      148
+#define VIDEO_ON_LINE       41
+
+
+#define LVDS_blank_data_reserved	30	// 31:30
+#define LVDS_blank_data_r		20	// 29:20
+#define LVDS_blank_data_g		10	// 19:10
+#define LVDS_blank_data_b		0	//  9:0
+#define LVDS_USE_TCON			7
+#define LVDS_DUAL			6
+#define PN_SWP				5
+#define LSB_FIRST			4
+#define LVDS_RESV			3
+#define ODD_EVEN_SWP			2
+#define LVDS_REPACK			0
+
+
+void panel_power_on(void)
+{
+	//gpio_set_status(PAD_GPIOZ_5, gpio_status_out);
+	//gpio_out(PAD_GPIOZ_5, 0);
+	//gpio_direction_output(PAD_GPIOZ_5, 1);
+	pr_info("%s\n", __func__);
+	printk("\n\n panel_power_on %d",__LINE__);
+}
+void panel_power_off(void)
+{
+	//gpio_set_status(PAD_GPIOZ_5, gpio_status_out);
+	//gpio_out(PAD_GPIOZ_5, 1);
+	//gpio_direction_output(PAD_GPIOZ_5, 0);
+	pr_info("%s\n", __func__);
+}
 
 
 //M6 PLL control value
@@ -64,7 +114,7 @@ static struct class *aml_lcd_clsp;
 #ifdef PRINT_DEBUG_INFO
 #define PRINT_INFO(...)        printk(__VA_ARGS__)
 #else
-#define PRINT_INFO(...)    
+#define PRINT_INFO(...)
 #endif
 
 typedef struct {
@@ -202,26 +252,26 @@ void vpp_set_matrix_ycbcr2rgb (int vd1_or_vd2_or_post, int mode)
       aml_set_reg32_bits (P_VPP_MATRIX_CTRL, 1, 5, 1);
       aml_set_reg32_bits (P_VPP_MATRIX_CTRL, 1, 8, 2);
    }
-   else if (vd1_or_vd2_or_post == 1) //vd2 
+   else if (vd1_or_vd2_or_post == 1) //vd2
    {
       aml_set_reg32_bits (P_VPP_MATRIX_CTRL, 1, 4, 1);
       aml_set_reg32_bits (P_VPP_MATRIX_CTRL, 2, 8, 2);
    }
-   else 
+   else
    {
       aml_set_reg32_bits (P_VPP_MATRIX_CTRL, 1, 0, 1);
       aml_set_reg32_bits (P_VPP_MATRIX_CTRL, 0, 8, 2);
       if (mode == 0)
       {
-        aml_set_reg32_bits(P_VPP_MATRIX_CTRL, 1, 1, 2);  
+        aml_set_reg32_bits(P_VPP_MATRIX_CTRL, 1, 1, 2);
       }
       else if (mode == 1)
       {
-        aml_set_reg32_bits(P_VPP_MATRIX_CTRL, 0, 1, 2);  
+        aml_set_reg32_bits(P_VPP_MATRIX_CTRL, 0, 1, 2);
       }
    }
 
-   if (mode == 0) //ycbcr not full range, 601 conversion 
+   if (mode == 0) //ycbcr not full range, 601 conversion
    {
         aml_write_reg32(P_VPP_MATRIX_PRE_OFFSET0_1, 0x7c00600);
         aml_write_reg32(P_VPP_MATRIX_PRE_OFFSET2, 0x0600);
@@ -235,12 +285,12 @@ void vpp_set_matrix_ycbcr2rgb (int vd1_or_vd2_or_post, int mode)
                             0x4a8);
         aml_write_reg32(P_VPP_MATRIX_COEF11_12, (0x1e6f << 16) |
                             0x1cbf);
-        aml_write_reg32(P_VPP_MATRIX_COEF20_21, (0x4a8 << 16) | 
+        aml_write_reg32(P_VPP_MATRIX_COEF20_21, (0x4a8 << 16) |
                             0x811);
         aml_write_reg32(P_VPP_MATRIX_COEF22, 0x0);
         aml_write_reg32(P_VPP_MATRIX_OFFSET0_1, 0x0);
         aml_write_reg32(P_VPP_MATRIX_OFFSET2, 0x0);
-   } 
+   }
    else if (mode == 1) //ycbcr full range, 601 conversion
    {
 
@@ -256,7 +306,7 @@ void vpp_set_matrix_ycbcr2rgb (int vd1_or_vd2_or_post, int mode)
                             0x400);
         aml_write_reg32(P_VPP_MATRIX_COEF11_12, (0x1ea0 << 16) |
                             0x1d25);
-        aml_write_reg32(P_VPP_MATRIX_COEF20_21, (0x400 << 16) | 
+        aml_write_reg32(P_VPP_MATRIX_COEF20_21, (0x400 << 16) |
                             0x717);
         aml_write_reg32(P_VPP_MATRIX_COEF22, 0x0);
         aml_write_reg32(P_VPP_MATRIX_OFFSET0_1, 0x0);
@@ -267,7 +317,7 @@ void vpp_set_matrix_ycbcr2rgb (int vd1_or_vd2_or_post, int mode)
 static void set_tcon_ttl(Lcd_Config_t *pConf)
 {
     Lcd_Timing_t *tcon_adr = &(pConf->lcd_timing);
-    
+
     //set_lcd_gamma_table_ttl(pConf->lcd_effect.GammaTableR, LCD_H_SEL_R);
     //set_lcd_gamma_table_ttl(pConf->lcd_effect.GammaTableG, LCD_H_SEL_G);
     //set_lcd_gamma_table_ttl(pConf->lcd_effect.GammaTableB, LCD_H_SEL_B);
@@ -322,7 +372,7 @@ static void set_tcon_ttl(Lcd_Config_t *pConf)
 static void set_tcon_lvds(Lcd_Config_t *pConf)
 {
     //Lcd_Timing_t *tcon_adr = &(pConf->lcd_timing);
-    
+
     vpp_set_matrix_ycbcr2rgb(2, 0);
     aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL, 3);
     aml_write_reg32(P_L_RGB_BASE_ADDR, 0);
@@ -462,19 +512,19 @@ static void set_tcon_mlvds(Lcd_Config_t *pConf)
     aml_write_reg32(P_L_TCON_DOUBLE_CTL,
                    (1<<(mlvds_tconfig_l[3].channel_num))   // invert CPV
                   );
-				  
+
 	// for channel 4-7, set second setting same as first
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6	
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
     aml_write_reg32(P_L_DE_HS_ADDR, (0x3 << 14) | ext_pixel);   // 0x3 -- enable double_tcon fir channel7:6
     aml_write_reg32(P_L_DE_HE_ADDR, (0x3 << 14) | ext_pixel);   // 0x3 -- enable double_tcon fir channel5:4
     aml_write_reg32(P_L_DE_VS_ADDR, (0x3 << 14) | 0);	// 0x3 -- enable double_tcon fir channel3:2
     aml_write_reg32(P_L_DE_VE_ADDR, (0x3 << 14) | 0);	// 0x3 -- enable double_tcon fir channel1:0
-#else	
+#else
     aml_write_reg32(P_L_DE_HS_ADDR, (0xf << 12) | ext_pixel);   // 0xf -- enable double_tcon fir channel7:4
     aml_write_reg32(P_L_DE_HE_ADDR, (0xf << 12) | ext_pixel);   // 0xf -- enable double_tcon fir channel3:0
     aml_write_reg32(P_L_DE_VS_ADDR, 0);
     aml_write_reg32(P_L_DE_VE_ADDR, 0);
-#endif	
+#endif
 
     dual_wr_rd_start = 0x5d;
     aml_write_reg32(P_MLVDS_DUAL_GATE_WR_START, dual_wr_rd_start);
@@ -499,7 +549,7 @@ static void set_tcon_mlvds(Lcd_Config_t *pConf)
 }
 
 static void set_video_spread_spectrum(int video_pll_sel, int video_ss_level)
-{ 
+{
     if (video_pll_sel){
 		switch (video_ss_level)
 		{
@@ -522,7 +572,7 @@ static void set_video_spread_spectrum(int video_pll_sel, int video_ss_level)
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL2, 0x16110696);
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL3, 0x1d425012);
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL4, 0x130);
-				break;		
+				break;
 			case 4:  //about 4%
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL2, 0x16110696);
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL3, 0x0d125012);
@@ -532,11 +582,11 @@ static void set_video_spread_spectrum(int video_pll_sel, int video_ss_level)
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL2, 0x16110696);
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL3, 0x0e425012);
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL4, 0x130);
-				break;	
+				break;
 			default:  //disable ss
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL2, 0x814d3928);
 				aml_write_reg32(P_HHI_VIID_PLL_CNTL3, 0x6b425012);
-				aml_write_reg32(P_HHI_VIID_PLL_CNTL4, 0x110);		
+				aml_write_reg32(P_HHI_VIID_PLL_CNTL4, 0x110);
 		}
 	}
 	else{
@@ -561,7 +611,7 @@ static void set_video_spread_spectrum(int video_pll_sel, int video_ss_level)
 				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x16110696);
 				aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x1d425012);
 				aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x130);
-				break;		
+				break;
 			case 4:  //about 4%
 				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x16110696);
 				aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x0d125012);
@@ -571,14 +621,14 @@ static void set_video_spread_spectrum(int video_pll_sel, int video_ss_level)
 				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x16110696);
 				aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x0e425012);
 				aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x130);
-				break;	
+				break;
 			default:  //disable ss
 				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x814d3928);
 				aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x6b425012);
-				aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x110);		
-		}	
+				aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x110);
+		}
 	}
-	//PRINT_INFO("set video spread spectrum %d%%.\n", video_ss_level);	
+	//PRINT_INFO("set video spread spectrum %d%%.\n", video_ss_level);
 }
 
 static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_sel, unsigned long pll_reg, unsigned long vid_div_reg, unsigned int xd)
@@ -591,17 +641,17 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
     PRINT_INFO("setup lcd clk.\n");
     vid_div_reg |= (1 << 16) ; // turn clock gate on
     vid_div_reg |= (pll_sel << 15); // vid_div_clk_sel
-   
+
     if(vclk_sel) {
-      aml_write_reg32(P_HHI_VIID_CLK_CNTL, aml_read_reg32(P_HHI_VIID_CLK_CNTL) & ~(1 << 19) );     //disable clk_div0 
+      aml_write_reg32(P_HHI_VIID_CLK_CNTL, aml_read_reg32(P_HHI_VIID_CLK_CNTL) & ~(1 << 19) );     //disable clk_div0
     }
     else {
-      aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) & ~(1 << 19) );     //disable clk_div0 
-      aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) & ~(1 << 20) );     //disable clk_div1 
-    } 
+      aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) & ~(1 << 19) );     //disable clk_div0
+      aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) & ~(1 << 20) );     //disable clk_div1
+    }
 
     // delay 2uS to allow the sync mux to switch over
-    //aml_write_reg32(P_ISA_TIMERE, 0); while( aml_read_reg32(P_ISA_TIMERE) < 2 ) {}    
+    //aml_write_reg32(P_ISA_TIMERE, 0); while( aml_read_reg32(P_ISA_TIMERE) < 2 ) {}
     udelay(2);
 
     if(pll_sel){
@@ -609,7 +659,7 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
 		aml_write_reg32(P_HHI_VIID_PLL_CNTL, pll_reg );
 #elif MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 		M6_PLL_RESET(P_HHI_VIID_PLL_CNTL);
-		aml_write_reg32(P_HHI_VIID_PLL_CNTL, pll_reg|(1<<29) );            
+		aml_write_reg32(P_HHI_VIID_PLL_CNTL, pll_reg|(1<<29) );
 		aml_write_reg32(P_HHI_VIID_PLL_CNTL2, 0x814d3928 );
 		aml_write_reg32(P_HHI_VIID_PLL_CNTL3, 0x6b425012 );
 		aml_write_reg32(P_HHI_VIID_PLL_CNTL4, 0x110 );
@@ -621,7 +671,7 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
 		aml_write_reg32(P_HHI_VIID_PLL_CNTL3, 0x9649a941 );
 		aml_write_reg32(P_HHI_VIID_PLL_CNTL, pll_reg );
 #endif
-    }    
+    }
     else{
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TV
 		aml_write_reg32(P_HHI_VID_PLL_CNTL, pll_reg );
@@ -640,8 +690,8 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
 		aml_write_reg32(P_HHI_VID_PLL_CNTL, pll_reg );
 #endif
     }
-	
-    if(pll_div_sel ){	
+
+    if(pll_div_sel ){
         aml_write_reg32(P_HHI_VIID_DIVIDER_CNTL,   vid_div_reg);
     }
     else{
@@ -650,34 +700,34 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
 
     if(vclk_sel)
         aml_write_reg32(P_HHI_VIID_CLK_DIV, (aml_read_reg32(P_HHI_VIID_CLK_DIV) & ~(0xFF << 0)) | (xd-1) );   // setup the XD divider value
-    else 
+    else
         aml_write_reg32(P_HHI_VID_CLK_DIV, (aml_read_reg32(P_HHI_VID_CLK_DIV) & ~(0xFF << 0)) | (xd-1) );   // setup the XD divider value
 
     // delay 5uS
-    //aml_write_reg32(P_ISA_TIMERE, 0); while( aml_read_reg32(P_ISA_TIMERE) < 5 ) {}    
+    //aml_write_reg32(P_ISA_TIMERE, 0); while( aml_read_reg32(P_ISA_TIMERE) < 5 ) {}
     udelay(5);
-       
+
 	if(vclk_sel) {
 		if(pll_div_sel) aml_set_reg32_bits (P_HHI_VIID_CLK_CNTL, 4, 16, 3);  // Bit[18:16] - v2_cntl_clk_in_sel
 		else aml_set_reg32_bits (P_HHI_VIID_CLK_CNTL, 0, 16, 3);  // Bit[18:16] - cntl_clk_in_sel
-		//aml_write_reg32(P_HHI_VIID_CLK_CNTL, aml_read_reg32(P_HHI_VIID_CLK_CNTL) |  (1 << 19) );     //enable clk_div0 
+		//aml_write_reg32(P_HHI_VIID_CLK_CNTL, aml_read_reg32(P_HHI_VIID_CLK_CNTL) |  (1 << 19) );     //enable clk_div0
 		aml_set_reg32_mask(P_HHI_VIID_CLK_CNTL, (1 << 19) );     //enable clk_div0
 	}
 	else {
 		if(pll_div_sel) aml_set_reg32_bits (P_HHI_VID_CLK_CNTL, 4, 16, 3);  // Bit[18:16] - v2_cntl_clk_in_sel
 		else aml_set_reg32_bits (P_HHI_VID_CLK_CNTL, 0, 16, 3);  // Bit[18:16] - cntl_clk_in_sel
-		//aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) |  (1 << 19) );     //enable clk_div0 
-		aml_set_reg32_mask(P_HHI_VID_CLK_CNTL, (1 << 19) );     //enable clk_div0 
-		//aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) |  (1 << 20) );     //enable clk_div1 
-		aml_set_reg32_mask(P_HHI_VID_CLK_CNTL, (1 << 20) );     //enable clk_div1 
+		//aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) |  (1 << 19) );     //enable clk_div0
+		aml_set_reg32_mask(P_HHI_VID_CLK_CNTL, (1 << 19) );     //enable clk_div0
+		//aml_write_reg32(P_HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) |  (1 << 20) );     //enable clk_div1
+		aml_set_reg32_mask(P_HHI_VID_CLK_CNTL, (1 << 20) );     //enable clk_div1
 	}
-    
+
     // delay 2uS
-    //aml_write_reg32(P_ISA_TIMERE, 0); while( aml_read_reg32(P_ISA_TIMERE) < 2 ) {}    
+    //aml_write_reg32(P_ISA_TIMERE, 0); while( aml_read_reg32(P_ISA_TIMERE) < 2 ) {}
     udelay(2);
-    
+
     // set tcon_clko setting
-    aml_set_reg32_bits (P_HHI_VID_CLK_CNTL, 
+    aml_set_reg32_bits (P_HHI_VID_CLK_CNTL,
                     (
                     (0 << 11) |     //clk_div1_sel
                     (1 << 10) |     //clk_inv
@@ -685,7 +735,7 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
                     (0 << 5)  |     //tcon high_thresh
                     (0 << 1)  |     //tcon low_thresh
                     (1 << 0)        //cntl_clk_en1
-                    ), 
+                    ),
                     20, 12);
 
     if(lcd_type == LCD_DIGITAL_TTL){
@@ -697,22 +747,22 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
 		{
 			aml_set_reg32_bits (P_HHI_VID_CLK_DIV, 0, 20, 4); // [23:20] enct_clk_sel, select v1_clk_div1
 		}
-		
+
 	}
 	else {
 #ifdef NO_ENCT
-			aml_set_reg32_bits (P_HHI_VIID_CLK_DIV, 
-						 0, 	 // select clk_div1 
-						 12, 4); // [23:20] encl_clk_sel 
+			aml_set_reg32_bits (P_HHI_VIID_CLK_DIV,
+						 0, 	 // select clk_div1
+						 12, 4); // [23:20] encl_clk_sel
 #else
-			aml_set_reg32_bits (P_HHI_VID_CLK_DIV, 
-						 0, 	 // select clk_div1 
-						 20, 4); // [23:20] enct_clk_sel 
-#endif	
+			aml_set_reg32_bits (P_HHI_VID_CLK_DIV,
+						 0, 	 // select clk_div1
+						 20, 4); // [23:20] enct_clk_sel
+#endif
 	}
-	
+
     if(vclk_sel) {
-      aml_set_reg32_bits (P_HHI_VIID_CLK_CNTL, 
+      aml_set_reg32_bits (P_HHI_VIID_CLK_CNTL,
                    (1<<0),  // Enable cntl_div1_en
                    0, 1    // cntl_div1_en
                    );
@@ -720,13 +770,13 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
       aml_set_reg32_bits (P_HHI_VIID_CLK_CNTL, 0, 15, 1);  //release soft reset
     }
     else {
-      aml_set_reg32_bits (P_HHI_VID_CLK_CNTL, 
+      aml_set_reg32_bits (P_HHI_VID_CLK_CNTL,
                    (1<<0),  // Enable cntl_div1_en
                    0, 1    // cntl_div1_en
                    );
       aml_set_reg32_bits (P_HHI_VID_CLK_CNTL, 1, 15, 1);  //soft reset
       aml_set_reg32_bits (P_HHI_VID_CLK_CNTL, 0, 15, 1);  //release soft reset
-    }    
+    }
 
     //PRINT_INFO("video pl1 clk = %d\n", clk_util_clk_msr(6));
 	//PRINT_INFO("video2 pl1 clk = %d\n", clk_util_clk_msr(12));
@@ -741,23 +791,23 @@ static void vclk_set_lcd(int lcd_type, int pll_sel, int pll_div_sel, int vclk_se
 }
 
 static void set_pll_ttl(Lcd_Config_t *pConf)
-{            
-    unsigned pll_reg, div_reg, xd;    
+{
+    unsigned pll_reg, div_reg, xd;
     int pll_sel, pll_div_sel, vclk_sel;
 	int lcd_type, ss_level;
-    
+
     pll_reg = pConf->lcd_timing.pll_ctrl;
-    div_reg = pConf->lcd_timing.div_ctrl | 0x3; 
-	ss_level = ((pConf->lcd_timing.clk_ctrl) >>16) & 0xf;      
+    div_reg = pConf->lcd_timing.div_ctrl | 0x3;
+	ss_level = ((pConf->lcd_timing.clk_ctrl) >>16) & 0xf;
     pll_sel = ((pConf->lcd_timing.clk_ctrl) >>12) & 0x1;
     pll_div_sel = ((pConf->lcd_timing.clk_ctrl) >>8) & 0x1;
-    vclk_sel = ((pConf->lcd_timing.clk_ctrl) >>4) & 0x1;        
+    vclk_sel = ((pConf->lcd_timing.clk_ctrl) >>4) & 0x1;
 	xd = pConf->lcd_timing.clk_ctrl & 0xf;
-	
+
 	lcd_type = pConf->lcd_basic.lcd_type;
-    
+
     printk("ss_level=%d, pll_sel=%d, pll_div_sel=%d, vclk_sel=%d, pll_reg=0x%x, div_reg=0x%x, xd=%d.\n", ss_level, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);
-    vclk_set_lcd(lcd_type, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd); 
+    vclk_set_lcd(lcd_type, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);
 	set_video_spread_spectrum(pll_sel, ss_level);
 }
 
@@ -785,29 +835,29 @@ static void set_pll_lvds(Lcd_Config_t *pConf)
     unsigned pll_reg, div_reg, xd;
     int pll_sel, pll_div_sel, vclk_sel;
 	int lcd_type;
-	
+
     PRINT_INFO("%s\n", __FUNCTION__);
 #ifdef NO_2ND_PLL
 	pll_sel = 0;
-#endif	
+#endif
 	pll_reg = pConf->lcd_timing.pll_ctrl;//pll_sel ? 0x001514d0 : 0x001514d0;
 	pll_div_sel = 1;
     vclk_sel = 0;//((pConf->lcd_timing.clk_ctrl) >>4) & 0x1;
 	//xd = pConf->lcd_timing.clk_ctrl & 0xf;
 	xd = 1;
-	
+
 	lcd_type = pConf->lcd_basic.lcd_type;
-	
+
     pll_div_post = 7;
 
     phy_clk_div2 = 0;
-	
+
 	div_reg = pConf->lcd_timing.div_ctrl | 0x3; //0x00010803;//(div_reg | (1 << 8) | (1 << 11) | ((pll_div_post-1) << 12) | (phy_clk_div2 << 10));
 	//printk("pll_sel=%d, pll_div_sel=%d, vclk_sel=%d, pll_reg=0x%x, div_reg=0x%x, xd=%d.\n", pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);
-    vclk_set_lcd(lcd_type, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);	
+    vclk_set_lcd(lcd_type, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);
 	aml_write_reg32( P_HHI_VIID_DIVIDER_CNTL, ((aml_read_reg32(P_HHI_VIID_DIVIDER_CNTL) & ~(0x7 << 8)) | (2 << 8) | (0<<10)) );
 	//set_video_spread_spectrum(pll_sel, ss_level);
-	
+
 	//clk_util_lvds_set_clk_div(2, pll_div_post, phy_clk_div2);//test code //
     //    lvds_gen_cntl       <= {10'h0,      // [15:4] unused
     //                            2'h1,       // [5:4] divide by 7 in the PHY
@@ -816,7 +866,7 @@ static void set_pll_lvds(Lcd_Config_t *pConf)
     //                            2'b00};     // [1:0] fifo_wr mode
     //rd_data = aml_read_reg32(P_LVDS_GEN_CNTL);
     //rd_data = rd_data | (1 << 3) | (3<< 0);
-    aml_write_reg32(P_LVDS_GEN_CNTL, (aml_read_reg32(P_LVDS_GEN_CNTL)| (1 << 3) | (3<< 0)));	
+    aml_write_reg32(P_LVDS_GEN_CNTL, (aml_read_reg32(P_LVDS_GEN_CNTL)| (1 << 3) | (3<< 0)));
 }
 
 static void set_pll_mlvds(Lcd_Config_t *pConf)
@@ -839,10 +889,10 @@ static void set_pll_mlvds(Lcd_Config_t *pConf)
     unsigned pll_reg, div_reg, xd;
     int pll_sel, pll_div_sel, vclk_sel;
 	int lcd_type, ss_level;
-	
+
     PRINT_INFO("%s\n", __FUNCTION__);
     pll_reg = pConf->lcd_timing.pll_ctrl;
-    div_reg = pConf->lcd_timing.div_ctrl | 0x3;    
+    div_reg = pConf->lcd_timing.div_ctrl | 0x3;
 	ss_level = ((pConf->lcd_timing.clk_ctrl) >>16) & 0xf;
     pll_sel = ((pConf->lcd_timing.clk_ctrl) >>12) & 0x1;
     //pll_div_sel = ((pConf->lcd_timing.clk_ctrl) >>8) & 0x1;
@@ -850,7 +900,7 @@ static void set_pll_mlvds(Lcd_Config_t *pConf)
     vclk_sel = ((pConf->lcd_timing.clk_ctrl) >>4) & 0x1;
 	//xd = pConf->lcd_timing.clk_ctrl & 0xf;
 	xd = 1;
-	
+
 	lcd_type = pConf->lcd_basic.lcd_type;
 
     switch(pConf->lvds_mlvds_config.mlvds_config->TL080_phase)
@@ -900,14 +950,14 @@ static void set_pll_mlvds(Lcd_Config_t *pConf)
                       ) ;
 
     phy_clk_div2 = (test_pair_num != 3);
-	
+
 	div_reg = (div_reg | (1 << 8) | (1 << 11) | ((pll_div_post-1) << 12) | (phy_clk_div2 << 10));
 	printk("ss_level=%d, pll_sel=%d, pll_div_sel=%d, vclk_sel=%d, pll_reg=0x%x, div_reg=0x%x, xd=%d.\n", ss_level, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);
-    vclk_set_lcd(lcd_type, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);	  					 
+    vclk_set_lcd(lcd_type, pll_sel, pll_div_sel, vclk_sel, pll_reg, div_reg, xd);
 	set_video_spread_spectrum(pll_sel, ss_level);
-	
-	clk_util_lvds_set_clk_div(1, pll_div_post, phy_clk_div2);	
-	
+
+	clk_util_lvds_set_clk_div(1, pll_div_post, phy_clk_div2);
+
 	//enable v2_clk div
     // aml_write_reg32(P_ HHI_VIID_CLK_CNTL, aml_read_reg32(P_HHI_VIID_CLK_CNTL) | (0xF << 0) );
     // aml_write_reg32(P_ HHI_VID_CLK_CNTL, aml_read_reg32(P_HHI_VID_CLK_CNTL) | (0xF << 0) );
@@ -1024,7 +1074,7 @@ static void set_pll_mlvds(Lcd_Config_t *pConf)
 		aml_write_reg32(P_HHI_VID_DIVIDER_CNTL, aml_read_reg32(P_HHI_VID_DIVIDER_CNTL) | 0x00002);
 		// Release Soft Reset vid_pll_div_pre
 		aml_write_reg32(P_HHI_VID_DIVIDER_CNTL, aml_read_reg32(P_HHI_VID_DIVIDER_CNTL) & 0x1fff7);
-    }	
+    }
 }
 
 static void venc_set_ttl(Lcd_Config_t *pConf)
@@ -1034,10 +1084,10 @@ static void venc_set_ttl(Lcd_Config_t *pConf)
     aml_write_reg32(P_VPU_VIU_VENC_MUX_CTRL,
        (3<<0) |    // viu1 select enct
        (3<<2)      // viu2 select enct
-    );    
+    );
     aml_write_reg32(P_ENCT_VIDEO_MODE,        0);
-    aml_write_reg32(P_ENCT_VIDEO_MODE_ADV,    0x0418);  
-	  
+    aml_write_reg32(P_ENCT_VIDEO_MODE_ADV,    0x0418);
+
 	// bypass filter
     aml_write_reg32(P_ENCT_VIDEO_FILT_CTRL,    0x1000);
     aml_write_reg32(P_VENC_DVI_SETTING,        0x11);
@@ -1056,8 +1106,8 @@ static void venc_set_ttl(Lcd_Config_t *pConf)
     aml_write_reg32(P_ENCT_VIDEO_VSO_BEGIN,    15);
     aml_write_reg32(P_ENCT_VIDEO_VSO_END,      31);
     aml_write_reg32(P_ENCT_VIDEO_VSO_BLINE,    0);
-    aml_write_reg32(P_ENCT_VIDEO_VSO_ELINE,    2);    
-    
+    aml_write_reg32(P_ENCT_VIDEO_VSO_ELINE,    2);
+
     // enable enct
     aml_write_reg32(P_ENCT_VIDEO_EN,           1);
 }
@@ -1076,13 +1126,13 @@ static void venc_set_lvds(Lcd_Config_t *pConf)
     aml_write_reg32(P_VPU_VIU_VENC_MUX_CTRL,
        (0<<0) |    // viu1 select encl
        (0<<2)      // viu2 select encl
-       );	
+       );
 	aml_write_reg32(P_ENCL_VIDEO_MODE,         0); // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
 	aml_write_reg32(P_ENCL_VIDEO_MODE_ADV,     0x0418); // Sampling rate: 1
 
 	// bypass filter
  	aml_write_reg32(P_ENCL_VIDEO_FILT_CTRL	,0x1000);
-	
+
 	aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT,	pConf->lcd_basic.h_period - 1);
 if(cur_lvds_index)
 	aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT,	1350 - 1);
@@ -1100,9 +1150,9 @@ else
 	aml_write_reg32(P_ENCL_VIDEO_VSO_END,	pConf->lcd_timing.stv1_he_addr);//20);
 	aml_write_reg32(P_ENCL_VIDEO_VSO_BLINE,	pConf->lcd_timing.stv1_vs_addr);//2);
 	aml_write_reg32(P_ENCL_VIDEO_VSO_ELINE,	pConf->lcd_timing.stv1_ve_addr);//4);
-		
+
 	aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL, 	0);
-    	
+
 	// enable encl
     aml_write_reg32(P_ENCL_VIDEO_EN,           1);
 }
@@ -1127,10 +1177,10 @@ static void venc_set_mlvds(Lcd_Config_t *pConf)
 
 	aml_write_reg32(P_ENCL_VIDEO_MODE,             0x0040 | (1<<14)); // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
 	aml_write_reg32(P_ENCL_VIDEO_MODE_ADV,         0x0008); // Sampling rate: 1
-	
+
 	// bypass filter
  	aml_write_reg32(P_ENCL_VIDEO_FILT_CTRL,	0x1000);
-	
+
 	aml_write_reg32(P_ENCL_VIDEO_YFP1_HTIME,       active_h_start);
 	aml_write_reg32(P_ENCL_VIDEO_YFP2_HTIME,       active_h_start + width);
 
@@ -1149,7 +1199,7 @@ static void venc_set_mlvds(Lcd_Config_t *pConf)
 	aml_write_reg32(P_ENCL_VIDEO_VSO_BLINE,        1);
 	aml_write_reg32(P_ENCL_VIDEO_VSO_ELINE,        3);
 
-	aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL, 	0); 	
+	aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL, 	0);
 
 	// enable encl
     aml_write_reg32(P_ENCL_VIDEO_EN,           1);
@@ -1157,21 +1207,21 @@ static void venc_set_mlvds(Lcd_Config_t *pConf)
 
 static void set_control_lvds(Lcd_Config_t *pConf)
 {
-	
-	//int lvds_repack, port_reverse, pn_swap, bit_num, dual_port;  
+
+	//int lvds_repack, port_reverse, pn_swap, bit_num, dual_port;
     PRINT_INFO("%s\n", __FUNCTION__);
 #if 0//MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TV
     data32 = (0x00 << LVDS_blank_data_r) |
              (0x00 << LVDS_blank_data_g) |
-             (0x00 << LVDS_blank_data_b) ; 
+             (0x00 << LVDS_blank_data_b) ;
     aml_write_reg32(P_LVDS_BLANK_DATA_HI,  (data32 >> 16));
     aml_write_reg32(P_LVDS_BLANK_DATA_LO, (data32 & 0xffff));
-	
+
 	aml_write_reg32(P_LVDS_PHY_CNTL0, 0xffff );
 	aml_write_reg32(P_LVDS_PHY_CNTL1, 0xff00 );
 #endif
-	
-	//aml_write_reg32(P_ENCL_VIDEO_EN,           1);	
+
+	//aml_write_reg32(P_ENCL_VIDEO_EN,           1);
 	if(lvds_repack_flag)
 	lvds_repack = (pConf->lvds_mlvds_config.lvds_config->lvds_repack) & 0x1;
 	pn_swap = (pConf->lvds_mlvds_config.lvds_config->pn_swap) & 0x1;
@@ -1199,9 +1249,9 @@ static void set_control_lvds(Lcd_Config_t *pConf)
 				break;
 			}
     	}
-	aml_write_reg32(P_MLVDS_CONTROL,  (aml_read_reg32(P_MLVDS_CONTROL) & ~(1 << 0)));  //disable mlvds	
-    
-	aml_write_reg32(P_LVDS_PACK_CNTL_ADDR, 
+	aml_write_reg32(P_MLVDS_CONTROL,  (aml_read_reg32(P_MLVDS_CONTROL) & ~(1 << 0)));  //disable mlvds
+
+	aml_write_reg32(P_LVDS_PACK_CNTL_ADDR,
 					( lvds_repack<<0 ) | // repack
 					( port_reverse?(0<<2):(1<<2)) | // odd_even
 					( 0<<3 ) | // reserve
@@ -1212,15 +1262,15 @@ static void set_control_lvds(Lcd_Config_t *pConf)
 					( bit_num<<8 ) | // 0:10bits, 1:8bits, 2:6bits, 3:4bits.
 					( 0<<10 ) | //r_select  //0:R, 1:G, 2:B, 3:0
 					( 1<<12 ) | //g_select  //0:R, 1:G, 2:B, 3:0
-					( 2<<14 ));  //b_select  //0:R, 1:G, 2:B, 3:0; 
+					( 2<<14 ));  //b_select  //0:R, 1:G, 2:B, 3:0;
     //aml_write_reg32(P_LVDS_GEN_CNTL, (aml_read_reg32(P_LVDS_GEN_CNTL) | (1 << 3))); // enable fifo
-	
-	//PRINT_INFO("lvds fifo clk = %d.\n", clk_util_clk_msr(LVDS_FIFO_CLK));	
+
+	//PRINT_INFO("lvds fifo clk = %d.\n", clk_util_clk_msr(LVDS_FIFO_CLK));
 }
 
 static void set_control_mlvds(Lcd_Config_t *pConf)
 {
-	
+
 	int test_bit_num = pConf->lcd_basic.lcd_bits;
     int test_pair_num = pConf->lvds_mlvds_config.mlvds_config->test_pair_num;
     int test_dual_gate = pConf->lvds_mlvds_config.mlvds_config->test_dual_gate;
@@ -1230,7 +1280,7 @@ static void set_control_mlvds(Lcd_Config_t *pConf)
     unsigned int reset_length;
 
     unsigned long data32;
-    
+
     PRINT_INFO("%s\n", __FUNCTION__);
     mlvds_insert_start = test_dual_gate ?
                            ((test_bit_num == 8) ? ((test_pair_num == 6) ? 0x9f : 0xa9) :
@@ -1314,8 +1364,8 @@ static void init_lvds_phy(Lcd_Config_t *pConf)
     aml_write_reg32( P_LVDS_PHY_CNTL1, 0xff00 );
 	aml_write_reg32( P_LVDS_PHY_CNTL3, 0x0ee1 );
     aml_write_reg32( P_LVDS_PHY_CNTL4, 0x3fff );
-	aml_write_reg32( P_LVDS_PHY_CNTL5, 0xac24 );//ac24	
-    //aml_write_reg32(P_LVDS_PHY_CNTL4, aml_read_reg32(P_LVDS_PHY_CNTL4) | (0x7f<<0));  //enable LVDS phy port..	
+	aml_write_reg32( P_LVDS_PHY_CNTL5, 0xac24 );//ac24
+    //aml_write_reg32(P_LVDS_PHY_CNTL4, aml_read_reg32(P_LVDS_PHY_CNTL4) | (0x7f<<0));  //enable LVDS phy port..
 }
 
 #include <mach/mod_gate.h>
@@ -1325,15 +1375,15 @@ static void switch_lcd_gates(Lcd_Type_t lcd_type)
     switch(lcd_type){
         case LCD_DIGITAL_TTL:
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-            switch_mod_gate_by_name("tcon", 1);
-            switch_mod_gate_by_name("lvds", 0);
+            //switch_mod_gate_by_name("tcon", 1);
+            //switch_mod_gate_by_name("lvds", 0);
 #endif
             break;
         case LCD_DIGITAL_LVDS:
         case LCD_DIGITAL_MINILVDS:
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-            switch_mod_gate_by_name("lvds", 1);
-            switch_mod_gate_by_name("tcon", 0);
+            //switch_mod_gate_by_name("lvds", 1);
+            //switch_mod_gate_by_name("tcon", 0);
 #endif
             break;
         default:
@@ -1342,7 +1392,7 @@ static void switch_lcd_gates(Lcd_Type_t lcd_type)
 }
 
 static inline void _init_display_driver(Lcd_Config_t *pConf)
-{ 
+{
     int lcd_type;
 	const char* lcd_type_table[]={
 		"NULL",
@@ -1350,33 +1400,33 @@ static inline void _init_display_driver(Lcd_Config_t *pConf)
 		"LVDS",
 		"miniLVDS",
 		"invalid",
-	}; 
-	
+	};
+
 	lcd_type = pDev->conf.lcd_basic.lcd_type;
 	printk("\nInit LCD type: %s.\n", lcd_type_table[lcd_type]);
 	//printk("lcd frame rate=%d/%d.\n", pDev->conf.lcd_timing.sync_duration_num, pDev->conf.lcd_timing.sync_duration_den);
-	
+
     switch_lcd_gates(lcd_type);
 
 	switch(lcd_type){
         case LCD_DIGITAL_TTL:
             set_pll_ttl(pConf);
             venc_set_ttl(pConf);
-			set_tcon_ttl(pConf);    
+			set_tcon_ttl(pConf);
             break;
         case LCD_DIGITAL_LVDS:
-        	set_pll_lvds(pConf);        	
-            venc_set_lvds(pConf);        	
-        	set_control_lvds(pConf);        	
+        	set_pll_lvds(pConf);
+            venc_set_lvds(pConf);
+        	set_control_lvds(pConf);
         	init_lvds_phy(pConf);
-			set_tcon_lvds(pConf);  	
+			set_tcon_lvds(pConf);
             break;
         case LCD_DIGITAL_MINILVDS:
 			set_pll_mlvds(pConf);
 			venc_set_mlvds(pConf);
 			set_control_mlvds(pConf);
 			init_lvds_phy(pConf);
-			set_tcon_mlvds(pConf);  	
+			set_tcon_mlvds(pConf);
             break;
         default:
             printk("Invalid LCD type.\n");
@@ -1385,23 +1435,23 @@ static inline void _init_display_driver(Lcd_Config_t *pConf)
 }
 
 static inline void _disable_display_driver(void)
-{	
-    int pll_sel, vclk_sel;	    
-    
+{
+    int pll_sel, vclk_sel;
+
     pll_sel = 0;//((pConf->lcd_timing.clk_ctrl) >>12) & 0x1;
-    vclk_sel = 0;//((pConf->lcd_timing.clk_ctrl) >>4) & 0x1;	
-	
+    vclk_sel = 0;//((pConf->lcd_timing.clk_ctrl) >>4) & 0x1;
+
 	aml_set_reg32_bits(P_HHI_VIID_DIVIDER_CNTL, 0, 11, 1);	//close lvds phy clk gate: 0x104c[11]
-	
+
 	aml_write_reg32(P_ENCT_VIDEO_EN, 0);	//disable enct
 	aml_write_reg32(P_ENCL_VIDEO_EN, 0);	//disable encl
-	
+
 	if (vclk_sel)
 		aml_set_reg32_bits(P_HHI_VIID_CLK_CNTL, 0, 0, 5);		//close vclk2 gate: 0x104b[4:0]
 	else
 		aml_set_reg32_bits(P_HHI_VID_CLK_CNTL, 0, 0, 5);		//close vclk1 gate: 0x105f[4:0]
-	
-	if (pll_sel){	
+
+	if (pll_sel){
 		aml_set_reg32_bits(P_HHI_VIID_DIVIDER_CNTL, 0, 16, 1);	//close vid2_pll gate: 0x104c[16]
 		aml_set_reg32_bits(P_HHI_VIID_PLL_CNTL, 1, 30, 1);		//power down vid2_pll: 0x1047[30]
 	}
@@ -1457,11 +1507,11 @@ static inline void _enable_vsync_interrupt(void)
 }
 static void _lcd_module_enable(void)
 {
-    BUG_ON(pDev==NULL);    
+    BUG_ON(pDev==NULL);
 
 	_init_display_driver(&pDev->conf);
 	//pDev->conf.lcd_power_ctrl.power_ctrl?pDev->conf.lcd_power_ctrl.power_ctrl(ON):0;
-    
+
     _enable_vsync_interrupt();
 }
 
@@ -1472,12 +1522,14 @@ static const vinfo_t *lcd_get_current_info(void)
     	pDev->lcd_info.name = "lvds1080p50hz";
 		pDev->lcd_info.mode = VMODE_LVDS_1080P_50HZ;
 		pDev->lcd_info.sync_duration_num = 50;
+		pDev->lcd_info.sync_duration_den = 1;
     	}
 	else
 		{
     	pDev->lcd_info.name = "lvds1080p";
 		pDev->lcd_info.mode = VMODE_LVDS_1080P;
 		pDev->lcd_info.sync_duration_num = 60;
+		pDev->lcd_info.sync_duration_den = 1;
 		}
     return &pDev->lcd_info;
 }
@@ -1485,7 +1537,7 @@ static const vinfo_t *lcd_get_current_info(void)
 static int lcd_set_current_vmode(vmode_t mode)
 {
     if ((mode != VMODE_LCD)&&(mode != VMODE_LVDS_1080P)&&(mode != VMODE_LVDS_1080P_50HZ))
-        return -EINVAL;   
+        return -EINVAL;
 	if(VMODE_LVDS_1080P_50HZ==(mode&VMODE_MODE_BIT_MASK))
 		cur_lvds_index = 1;
 	else
@@ -1534,50 +1586,50 @@ static int lcd_suspend(void)
     PRINT_INFO("lcd_suspend \n");
     //_disable_backlight();
 
-    backlight_power_off();
-    mdelay(backlight_power_off_delay);
+    //backlight_power_off();
+    //mdelay(backlight_power_off_delay);
 
     // pDev->conf.lcd_power_ctrl.power_ctrl?pDev->conf.lcd_power_ctrl.power_ctrl(OFF):0;
     _disable_display_driver();
-    mdelay(clock_disable_delay);
-    pwm_disable();
-    mdelay(pwm_disable_delay);
-    panel_power_off();
+   // mdelay(clock_disable_delay);
+   // pwm_disable();
+   // mdelay(pwm_disable_delay);
+   // panel_power_off();
     return 0;
 }
 static int lcd_resume(void)
 {
     PRINT_INFO("lcd_resume\n");
 
-    panel_power_on();
-    mdelay(panel_power_on_delay);
-    pwm_enable();
-    mdelay(pwm_enable_delay);
+    //panel_power_on();
+   // mdelay(panel_power_on_delay);
+    //pwm_enable();
+   // mdelay(pwm_enable_delay);
     _lcd_module_enable();
     //_enable_backlight(BL_MAX_LEVEL);
 
-    mdelay(clock_enable_delay);
+   // mdelay(clock_enable_delay);
 
-    backlight_power_on();
+   // backlight_power_on();
     return 0;
 }
 #endif
 static vout_server_t lcd_vout_server={
     .name = "lcd_vout_server",
-    .op = {    
+    .op = {
         .get_vinfo = lcd_get_current_info,
         .set_vmode = lcd_set_current_vmode,
         .validate_vmode = lcd_validate_vmode,
         .vmode_is_supported=lcd_vmode_is_supported,
         .disable=lcd_module_disable,
-#ifdef  CONFIG_PM  
+#ifdef  CONFIG_PM
         .vout_suspend=lcd_suspend,
         .vout_resume=lcd_resume,
 #endif
     },
 };
 static void _init_vout(lcd_dev_t *pDev)
-{	
+{
     pDev->lcd_info.name = "lvds1080p";
     pDev->lcd_info.mode = VMODE_LVDS_1080P;
     pDev->lcd_info.width = pDev->conf.lcd_basic.h_active;
@@ -1589,18 +1641,18 @@ static void _init_vout(lcd_dev_t *pDev)
     pDev->lcd_info.screen_real_height= pDev->conf.lcd_basic.screen_actual_height;
     pDev->lcd_info.sync_duration_num = pDev->conf.lcd_timing.sync_duration_num;
     pDev->lcd_info.sync_duration_den = pDev->conf.lcd_timing.sync_duration_den;
-       
+
     //add lcd actual active area size
     //printk("lcd actual active area size: %d %d (mm).\n", pDev->conf.lcd_basic.screen_actual_width, pDev->conf.lcd_basic.screen_actual_height);
-    vout_register_server(&lcd_vout_server);  
+    vout_register_server(&lcd_vout_server);
 }
 
 static void _lcd_init(Lcd_Config_t *pConf)
 {
     //logo_object_t  *init_logo_obj=NULL;
-    
+
     _init_vout(pDev);
-    //init_logo_obj = get_current_logo_obj();    
+    //init_logo_obj = get_current_logo_obj();
     //if(NULL==init_logo_obj ||!init_logo_obj->para.loaded)
         //_lcd_module_enable();
 }
@@ -1608,7 +1660,7 @@ static void _lcd_init(Lcd_Config_t *pConf)
 static int lcd_reboot_notifier(struct notifier_block *nb, unsigned long state, void *cmd)
  {
     if (state == SYS_RESTART)
-	{	
+	{
 		printk("shut down lcd...\n");
 		//_disable_backlight();
 		//pDev->conf.lcd_power_ctrl.power_ctrl?pDev->conf.lcd_power_ctrl.power_ctrl(OFF):0;
@@ -1626,11 +1678,11 @@ static ssize_t power_show(struct class *cls,
 	bool status = false;
 	int value;
 
-	status = gpio_get_status(PAD_GPIOZ_5);
+	status = true;//gpio_get_status(PAD_GPIOZ_5);
 	ret = sprintf(buf, "PAD_GPIOZ_5 gpio_get_status %s\n", (status?"true":"false"));
 	ret = sprintf(buf, "\n");
 
-	value = gpio_in_get(PAD_GPIOZ_5);
+	value = 0;//gpio_in_get(PAD_GPIOZ_5);
 	ret = sprintf(buf, "PAD_GPIOZ_5 gpio_in_get %d\n", value);
 	ret = sprintf(buf, "\n");
 
@@ -1655,6 +1707,161 @@ static ssize_t power_store(struct class *cls, struct class_attribute *attr,
 	}
 	return ret;
 }
+// Define LVDS physical PREM SWING VCM REF
+static Lvds_Phy_Control_t lcd_lvds_phy_control = {
+    .lvds_prem_ctl  = 0x4,
+    .lvds_swing_ctl = 0x2,
+    .lvds_vcm_ctl   = 0x4,
+    .lvds_ref_ctl   = 0x15,
+    .lvds_phy_ctl0  = 0x0002,
+    .lvds_fifo_wr_mode = 0x3,
+};
+
+//Define LVDS data mapping, pn swap.
+static Lvds_Config_t lcd_lvds_config = {
+    .lvds_repack    = 1,   //data mapping  //0:JEDIA mode, 1:VESA mode
+    .pn_swap    = 0,       //0:normal, 1:swap
+    .dual_port  = 1,
+    .port_reverse   = 1,
+};
+
+static inline int _get_lcd_default_config(struct platform_device *pdev)
+{
+	//Lcd_Config_t lcd_cfg_t;
+	int ret = 0;
+	unsigned int lvds_para[10];
+	if (!pdev->dev.of_node){
+		printk("\n can't get dev node---error----%s----%d",__FUNCTION__,__LINE__);
+	}
+
+
+	ret = of_property_read_u32_array(pdev->dev.of_node,"basic_setting",&lvds_para[0], 10);
+	if(ret){
+		printk("don't find to match basic_setting, use default setting.\n");
+	}else{
+		printk("get basic_setting ok.\n");
+		pDev->conf.lcd_basic.h_active = lvds_para[0];
+		pDev->conf.lcd_basic.v_active = lvds_para[1];
+		pDev->conf.lcd_basic.h_period= lvds_para[2];
+		pDev->conf.lcd_basic.v_period= lvds_para[3];
+		pDev->conf.lcd_basic.screen_ratio_width = lvds_para[4];
+		pDev->conf.lcd_basic.screen_ratio_height = lvds_para[5];
+		pDev->conf.lcd_basic.screen_actual_width = lvds_para[6];
+		pDev->conf.lcd_basic.screen_actual_height = lvds_para[7];
+		pDev->conf.lcd_basic.lcd_type = lvds_para[8];
+		pDev->conf.lcd_basic.lcd_bits = lvds_para[9];
+	}
+	ret = of_property_read_u32_array(pdev->dev.of_node,"delay_setting",&lvds_para[0], 8);
+	if(ret){
+		printk("don't find to match delay_setting, use default setting.\n");
+	}else{
+		pDev->conf.lcd_sequence.clock_enable_delay = lvds_para[0];
+		pDev->conf.lcd_sequence.clock_disable_delay = lvds_para[1];
+		pDev->conf.lcd_sequence.pwm_enable_delay= lvds_para[2];
+		pDev->conf.lcd_sequence.pwm_disable_delay= lvds_para[3];
+		pDev->conf.lcd_sequence.panel_power_on_delay = lvds_para[4];
+		pDev->conf.lcd_sequence.panel_power_off_delay = lvds_para[5];
+		pDev->conf.lcd_sequence.backlight_power_on_delay = lvds_para[6];
+		pDev->conf.lcd_sequence.backlight_power_off_delay = lvds_para[7];
+	}
+	return ret;
+}
+
+static Lcd_Config_t m6tv_lvds_config = {
+    // Refer to LCD Spec
+    .lcd_basic = {
+        .h_active = H_ACTIVE,
+        .v_active = V_ACTIVE,
+        .h_period = H_PERIOD,
+        .v_period = V_PERIOD,
+        .screen_ratio_width   = 16,
+        .screen_ratio_height  = 9,
+        .screen_actual_width  = 127, //this is value for 160 dpi please set real value according to spec.
+        .screen_actual_height = 203, //
+        .lcd_type = LCD_DIGITAL_LVDS,   //LCD_DIGITAL_TTL  //LCD_DIGITAL_LVDS  //LCD_DIGITAL_MINILVDS
+        .lcd_bits = 8,  //8  //6
+    },
+
+    .lcd_timing = {
+        .pll_ctrl = 0x40050c82,//0x400514d0, //
+        .div_ctrl = 0x00010803,
+        .clk_ctrl = 0x1111,  //[19:16]ss_ctrl, [12]pll_sel, [8]div_sel, [4]vclk_sel, [3:0]xd
+        //.sync_duration_num = 501,
+        //.sync_duration_den = 10,
+
+        .video_on_pixel = VIDEO_ON_PIXEL,
+        .video_on_line  = VIDEO_ON_LINE,
+
+        .sth1_hs_addr = 44,
+        .sth1_he_addr = 2156,
+        .sth1_vs_addr = 0,
+        .sth1_ve_addr = V_PERIOD - 1,
+        .stv1_hs_addr = 2100,
+        .stv1_he_addr = 2164,
+        .stv1_vs_addr = 3,
+        .stv1_ve_addr = 5,
+
+        .pol_cntl_addr = (0x0 << LCD_CPH1_POL) |(0x0 << LCD_HS_POL) | (0x1 << LCD_VS_POL),
+        .inv_cnt_addr = (0<<LCD_INV_EN) | (0<<LCD_INV_CNT),
+        .tcon_misc_sel_addr = (1<<LCD_STV1_SEL) | (1<<LCD_STV2_SEL),
+        .dual_port_cntl_addr = (1<<LCD_TTL_SEL) | (1<<LCD_ANALOG_SEL_CPH3) | (1<<LCD_ANALOG_3PHI_CLK_SEL) | (0<<LCD_RGB_SWP) | (0<<LCD_BIT_SWP),
+    },
+
+    .lcd_sequence = {
+        .clock_enable_delay        = CLOCK_ENABLE_DELAY,
+		.clock_disable_delay       = CLOCK_DISABLE_DELAY,
+		.pwm_enable_delay          = PWM_ENABLE_DELAY,
+		.pwm_disable_delay         = PWM_DISABLE_DELAY,
+		.panel_power_on_delay      = PANEL_POWER_ON_DELAY,
+		.panel_power_off_delay     = PANEL_POWER_OFF_DELAY,
+		.backlight_power_on_delay  = BACKLIGHT_POWER_ON_DELAY,
+		.backlight_power_off_delay = BACKLIGHT_POWER_OFF_DELAY,
+    },
+
+    .lvds_mlvds_config = {
+        .lvds_config = &lcd_lvds_config,
+        .lvds_phy_control = &lcd_lvds_phy_control,
+    },
+};
+
+
+#ifdef CONFIG_USE_OF
+static struct aml_lcd_platform m6tv_lvds_device = {
+    .lcd_conf = &m6tv_lvds_config,
+};
+
+#define AMLOGIC_LVDS_DRV_DATA ((kernel_ulong_t)&m6tv_lvds_device)
+
+static const struct of_device_id lvds_dt_match[]={
+	{	.compatible = "amlogic,lvds",
+		.data		= (void *)AMLOGIC_LVDS_DRV_DATA
+	},
+	{},
+};
+#else
+#define lvds_dt_match NULL
+#endif
+#ifdef CONFIG_USE_OF
+static inline struct aml_lcd_platform *lvds_get_driver_data(struct platform_device *pdev)
+{
+	const struct of_device_id *match;
+
+	if(pdev->dev.of_node) {
+		//DBG_PRINT("***of_device: get lcd driver data.***\n");
+		match = of_match_node(lvds_dt_match, pdev->dev.of_node);
+		return (struct aml_lcd_platform *)match->data;
+	}else
+		printk("\n ERROR get data %d",__LINE__);
+	return NULL;
+}
+
+
+
+
+
+
+#endif
+
 
 static CLASS_ATTR(power, S_IWUSR | S_IRUGO, power_show, power_store);
 
@@ -1662,7 +1869,11 @@ static int lcd_probe(struct platform_device *pdev)
 {
 	struct aml_lcd_platform *pdata;
 	int err;
+#ifdef 	CONFIG_USE_OF
+	pdata = lvds_get_driver_data(pdev);
+#else
 	pdata = pdev->dev.platform_data;
+#endif
 	pDev = (lcd_dev_t *)kmalloc(sizeof(lcd_dev_t), GFP_KERNEL);
 
 	if (!pDev) {
@@ -1671,9 +1882,14 @@ static int lcd_probe(struct platform_device *pdev)
 	}
 
 	//    extern Lcd_Config_t m6skt_lcd_config;
-	//    pDev->conf = m6skt_lcd_config;
+	//pDev->conf = m6tv_lvds_config;
+
 	pDev->conf = *(Lcd_Config_t *)(pdata->lcd_conf);        //*(Lcd_Config_t *)(s->start);
 
+#ifdef CONFIG_USE_OF
+	_get_lcd_default_config(pdev);
+#endif
+
 	printk("LCD probe ok\n");
 
 	_lcd_init(&pDev->conf);
@@ -1691,7 +1907,7 @@ static int lcd_remove(struct platform_device *pdev)
 {
     unregister_reboot_notifier(&lcd_reboot_nb);
     kfree(pDev);
-    
+
     return 0;
 }
 
@@ -1718,6 +1934,7 @@ static struct platform_driver lcd_driver = {
     .remove     = lcd_remove,
     .driver     = {
         .name   = "mesonlcd",    // removed "tcon-dev"
+        .of_match_table = lvds_dt_match,
     },
 #ifdef CONFIG_PM
     .suspend    = lcd_drv_suspend,
diff --git a/drivers/amlogic/display/osd/osd_hw.c b/drivers/amlogic/display/osd/osd_hw.c
index 6ed9e10fcd0e..abdbc009316d 100755
--- a/drivers/amlogic/display/osd/osd_hw.c
+++ b/drivers/amlogic/display/osd/osd_hw.c
@@ -2346,14 +2346,14 @@ void osd_init_hw(u32  logo_loaded)
 	osd_hw.updated[OSD1]=0;
 	osd_hw.updated[OSD2]=0;
 	//here we will init default value ,these value only set once .
-#ifdef CONFIG_ARCH_MESON6TV
+#if defined(CONFIG_ARCH_MESON6TVD)||(defined(CONFIG_ARCH_MESON6TV))
 	aml_set_reg32_mask(P_VPU_OSD1_MMC_CTRL, 1<<12); // set OSD to vdisp2
 	aml_write_reg32(P_MMC_CHAN4_CTRL, 0xc01f); // adjust vdisp weight and age limit
 #endif
 	if(!logo_loaded)
 	{
 		data32 = 1;          // Set DDR request priority to be urgent
-		#ifdef CONFIG_ARCH_MESON6TV
+#if defined(CONFIG_ARCH_MESON6TVD)||(defined(CONFIG_ARCH_MESON6TV))
 		data32 |= 18  << 5;  // hold_fifo_lines
 		#else
 		data32 |= 4   << 5;  // hold_fifo_lines
@@ -2368,7 +2368,7 @@ void osd_init_hw(u32  logo_loaded)
 		aml_clr_reg32_mask(P_VPP_MISC, VPP_PREBLEND_EN);
 		aml_clr_reg32_mask(P_VPP_MISC,VPP_OSD1_POSTBLEND|VPP_OSD2_POSTBLEND );
 		// just disable osd to avoid booting hang up
-		#ifdef CONFIG_ARCH_MESON6TV
+		#if defined(CONFIG_ARCH_MESON6TVD)||(defined(CONFIG_ARCH_MESON6TV))
 		data32 = 0x0 << 0; // osd_blk_enable
 		#else
 		data32 = 0x1 << 0;
diff --git a/drivers/amlogic/display/vout/Makefile b/drivers/amlogic/display/vout/Makefile
index 68bf8c2f9e23..17deac493918 100755
--- a/drivers/amlogic/display/vout/Makefile
+++ b/drivers/amlogic/display/vout/Makefile
@@ -1,6 +1,6 @@
 obj-y 	+=display.o
-display-objs=vout_notify.o  vout_serve.o vdac_switch.o
-
+display-objs=vout_notify.o  vout_serve.o
+display-objs-$(CONFIG_AM_LCD_OUTPUT)  += vdac_switch.o
 
 
 obj-$(CONFIG_AM_TV_OUTPUT)  += am_tvout.o
diff --git a/drivers/amlogic/display/vout/tvconf.c b/drivers/amlogic/display/vout/tvconf.c
index 86062e12c741..e5e79c431f9b 100755
--- a/drivers/amlogic/display/vout/tvconf.c
+++ b/drivers/amlogic/display/vout/tvconf.c
@@ -39,7 +39,7 @@
 #include <linux/ctype.h>
 #include <linux/amlogic/vout/vinfo.h>
 #include <mach/am_regs.h>
-#include <mach/cpu.h>
+
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #include <mach/vpu.h>
 #endif
diff --git a/include/linux/amlogic/panel.h b/include/linux/amlogic/panel.h
new file mode 100755
index 000000000000..59f564cb6b0b
--- /dev/null
+++ b/include/linux/amlogic/panel.h
@@ -0,0 +1,57 @@
+/*
+ * TV Panel
+ * arch/arm/mach-meson6tv/include/mach/panel.h
+ *
+ * Author: Bobby Yang <bo.yang@amlogic.com>
+ *
+ * Copyright (C) 2013 Amlogic Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __MACH_MESON6TV_PANEL_H
+#define __MACH_MESON6TV_PANEL_H
+
+/*
+ * NOTES: the following function or variable must be defined
+ *        in board-xxx-panel.c
+ *
+ */
+
+#define PANEL_POWER_ON		1
+#define PANEL_POWER_OFF		0
+
+#define BL_POWER_ON		0
+#define BL_POWER_OFF		1
+
+#define LED_LIGHT_ON 	0
+#define LED_LIGHT_OFF 	1
+
+
+extern unsigned int panel_power_on_delay;
+extern unsigned int panel_power_off_delay;
+extern unsigned int backlight_power_on_delay;
+extern unsigned int backlight_power_off_delay;
+
+extern unsigned int clock_disable_delay;
+extern unsigned int clock_enable_delay;
+
+extern unsigned int pwm_enable_delay;
+extern unsigned int pwm_disable_delay;
+
+extern void panel_power_on(void);
+extern void panel_power_off(void);
+extern void backlight_power_on(void);
+extern void backlight_power_off(void);
+
+extern void pwm_enable(void);
+extern void pwm_disable(void);
+extern void led_light_off(void);
+extern void led_light_on(void);
+
+
+
+#endif //__MACH_MESON6TV_PANEL_H
+
diff --git a/include/linux/amlogic/vout/lcd.h b/include/linux/amlogic/vout/lcd.h
new file mode 100755
index 000000000000..6e58d52776d2
--- /dev/null
+++ b/include/linux/amlogic/vout/lcd.h
@@ -0,0 +1,264 @@
+/*
+ * LCD Panel
+ *
+ * Author: Bobby Yang <bo.yang@amlogic.com>
+ *
+ * Copyright (C) 2012 Amlogic Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __AML_PANEL_LCD_H
+#define __AML_PANEL_LCD_H
+
+/* for POL_CNTL_ADDR */
+   #define LCD_DCLK_SEL             14    //FOR DCLK OUTPUT
+   #define LCD_TCON_VSYNC_SEL_DVI   11	 // FOR RGB format DVI output
+   #define LCD_TCON_HSYNC_SEL_DVI   10	 // FOR RGB format DVI output
+   #define LCD_TCON_DE_SEL_DVI      9	 // FOR RGB format DVI output
+   #define LCD_CPH3_POL             8
+   #define LCD_CPH2_POL             7
+   #define LCD_CPH1_POL             6
+   #define LCD_TCON_DE_SEL          5
+   #define LCD_TCON_VS_SEL          4
+   #define LCD_TCON_HS_SEL          3
+   #define LCD_DE_POL               2
+   #define LCD_VS_POL               1
+   #define LCD_HS_POL               0
+
+/* for DITH_CNTL_ADDR */
+   #define LCD_DITH10_EN            10
+   #define LCD_DITH8_EN             9
+   #define LCD_DITH_MD              8
+   /// 7:4
+   #define LCD_DITH10_CNTL_MSB      7
+   /// 7:4
+   #define LCD_DITH10_CNTL          4
+   /// 3:0
+   #define LCD_DITH8_CNTL_MSB       3
+   /// 3:0
+   #define LCD_DITH8_CNTL           0
+
+/* for INV_CNT_ADDR */
+   #define LCD_INV_EN               4
+   #define LCD_INV_CNT_MSB          3
+   #define LCD_INV_CNT              0
+
+/* for TCON_MISC_SEL_ADDR */
+   #define LCD_STH2_SEL             12
+   #define LCD_STH1_SEL             11
+   #define LCD_OEH_SEL              10
+   #define LCD_VCOM_SEL             9
+   #define LCD_DB_LINE_SW           8
+   #define LCD_CPV2_SEL             7
+   #define LCD_CPV1_SEL             6
+   #define LCD_STV2_SEL             5
+   #define LCD_STV1_SEL             4
+   #define LCD_OEV_UNITE            3
+   #define LCD_OEV3_SEL             2
+   #define LCD_OEV2_SEL             1
+   #define LCD_OEV1_SEL             0
+
+/* for DUAL_PORT_CNTL_ADDR */
+   #define LCD_ANALOG_SEL_CPH3      8
+   #define LCD_ANALOG_3PHI_CLK_SEL  7
+   #define LCD_LVDS_SEL54           6
+   #define LCD_LVDS_SEL27           5
+   #define LCD_TTL_SEL              4
+   #define LCD_DUAL_PIXEL           3
+   #define LCD_PORT_SWP             2
+   #define LCD_RGB_SWP              1
+   #define LCD_BIT_SWP              0
+
+/* for LVDS_PACK_CNTL_ADDR */
+   #define LCD_LD_CNT_MSB           7
+   #define LCD_LD_CNT               5
+   #define LCD_PN_SWP               4
+   #define LCD_RES                  3
+   #define LCD_LVDS_PORT_SWP        2
+   #define LCD_PACK_RVS             1
+   #define LCD_PACK_LITTLE          0
+
+typedef enum
+{
+    LCD_NULL = 0,
+    LCD_DIGITAL_TTL,
+    LCD_DIGITAL_LVDS,
+    LCD_DIGITAL_MINILVDS,
+    LCD_TYPE_MAX,
+} Lcd_Type_t;
+
+typedef struct {
+    int channel_num;
+    int hv_sel;
+    int tcon_1st_hs_addr;
+    int tcon_1st_he_addr;
+    int tcon_1st_vs_addr;
+    int tcon_1st_ve_addr;
+    int tcon_2nd_hs_addr;
+    int tcon_2nd_he_addr;
+    int tcon_2nd_vs_addr;
+    int tcon_2nd_ve_addr;
+} Mlvds_Tcon_Config_t;
+
+typedef struct {
+    unsigned int lvds_prem_ctl;
+    unsigned int lvds_swing_ctl;
+    unsigned int lvds_vcm_ctl;
+    unsigned int lvds_ref_ctl;
+	unsigned int lvds_phy_ctl0;
+	unsigned int lvds_fifo_wr_mode;
+} Lvds_Phy_Control_t;
+
+typedef struct {
+    int mlvds_insert_start;
+    int total_line_clk;
+    int test_dual_gate;
+    //int test_bit_num;
+    int test_pair_num;
+//    int set_mlvds_pinmux;
+    int phase_select;
+    int TL080_phase;
+    //Mlvds_Tcon_Config_t *mlvds_tcon_config;    //Point to TCON0~7
+    //Lvds_Phy_Control_t *lvds_phy_control;
+    int scan_function;
+} Mlvds_Config_t;
+
+typedef struct {
+    int lvds_repack;
+    int pn_swap;
+    int dual_port;
+    int port_reverse;
+    //int bit_num;
+    //Lvds_Phy_Control_t *lvds_phy_control;
+} Lvds_Config_t;
+
+// Refer to LCD Spec
+typedef struct {
+    u16 h_active;   	// Horizontal display area
+    u16 v_active;     	// Vertical display area
+    u16 h_period;       // Horizontal total period time
+    u16 v_period;       // Vertical total period time
+    u16 screen_ratio_width;      // screen aspect ratio width
+    u16 screen_ratio_height;     // screen aspect ratio height
+    u32 screen_actual_width;/* screen physical width in "mm" unit */
+    u32 screen_actual_height;/* screen physical height in "mm" unit */
+
+    Lcd_Type_t lcd_type;  // only support 3 kinds of digital panel, not include analog I/F
+    u16 lcd_bits;         // 6 or 8 bits
+}Lcd_Basic_t;
+
+typedef struct {
+	//u16 clk_source;		 /*video pll clock, must be multiple of 12, from 384~744*/
+    u32 pll_ctrl;        /* video PLL settings */
+    u32 div_ctrl;        /* video pll div settings */
+    u32 clk_ctrl;        /* video clock settings */  //[19:16]ss_ctrl, [12]pll_sel, [8]div_sel, [4]vclk_sel, [3:0]xd
+    u16 sync_duration_num;
+    u16 sync_duration_den;
+
+    u16 video_on_pixel;
+    u16 video_on_line;
+
+    u16 sth1_hs_addr;
+    u16 sth1_he_addr;
+    u16 sth1_vs_addr;
+    u16 sth1_ve_addr;
+
+    u16 oeh_hs_addr;
+    u16 oeh_he_addr;
+    u16 oeh_vs_addr;
+    u16 oeh_ve_addr;
+
+    u16 vcom_hswitch_addr;
+    u16 vcom_vs_addr;
+    u16 vcom_ve_addr;
+
+    u16 cpv1_hs_addr;
+    u16 cpv1_he_addr;
+    u16 cpv1_vs_addr;
+    u16 cpv1_ve_addr;
+
+    u16 stv1_hs_addr;
+    u16 stv1_he_addr;
+    u16 stv1_vs_addr;
+    u16 stv1_ve_addr;
+
+    u16 oev1_hs_addr;
+    u16 oev1_he_addr;
+    u16 oev1_vs_addr;
+    u16 oev1_ve_addr;
+
+    u16 pol_cntl_addr;
+    u16 inv_cnt_addr;
+    u16 tcon_misc_sel_addr;
+    u16 dual_port_cntl_addr;
+} Lcd_Timing_t;
+
+typedef struct {
+    u16 clock_enable_delay;
+    u16 clock_disable_delay;
+    u16 pwm_enable_delay;
+    u16 pwm_disable_delay;
+    u16 panel_power_on_delay;
+    u16 panel_power_off_delay;
+    u16 backlight_power_on_delay;
+    u16 backlight_power_off_delay;
+} Lcd_Sequence_t;
+
+typedef struct {
+    Lvds_Config_t *lvds_config;
+    Mlvds_Config_t *mlvds_config;
+    Mlvds_Tcon_Config_t *mlvds_tcon_config;    //Point to TCON0~7
+    Lvds_Phy_Control_t *lvds_phy_control;
+} Lvds_Mlvds_Config_t;
+
+typedef struct {
+    Lcd_Basic_t lcd_basic;
+    Lcd_Timing_t lcd_timing;
+    Lcd_Sequence_t lcd_sequence;
+    Lvds_Mlvds_Config_t lvds_mlvds_config;
+} Lcd_Config_t;
+
+typedef struct Ext_Lcd_Config_s{
+	u16 h_active;
+	u16 v_active;
+	u16 h_period;
+	u16 v_period;
+	u16 video_on_pixel;
+	u16 video_on_line;
+
+	u16 lcd_bits;
+	u16 lvds_repack_ctl;
+	u16 pn_swap;
+	u16 dual_port;
+	u16 port_reverse;
+
+	u16 lvds_prem_ctl;
+	u16 lvds_swing_ctl;
+	u16 lvds_vcm_ctl;
+	u16 lvds_ref_ctl;
+	u16 lvds_phy_ctl0;
+	u16 lvds_fifo_wr_mode;
+
+	u32 pll_ctrl;
+	u32 div_ctrl;
+
+	u16 sth1_hs_val;
+	u16 sth1_he_val;
+	u16 stv1_hs_val;
+	u16 stv1_he_val;
+	u16 stv1_vs_val;
+	u16 stv1_ve_val;
+
+	u16 clock_enable_delay;
+	u16 clock_disable_delay;
+	u16 pwm_enable_delay;
+	u16 pwm_disable_delay;
+	u16 panel_power_on_delay;
+	u16 panel_power_off_delay;
+	u16 backlight_power_on_delay;
+	u16 backlight_power_off_delay;
+} Ext_Lcd_Config_t;
+#endif /* __AML_PANEL_LCD_H */
diff --git a/include/linux/amlogic/vout/lcd_aml.h b/include/linux/amlogic/vout/lcd_aml.h
index 1e9dd5b6c1c6..a0d34486f8dd 100755
--- a/include/linux/amlogic/vout/lcd_aml.h
+++ b/include/linux/amlogic/vout/lcd_aml.h
@@ -20,7 +20,7 @@
 #define _MACH_AML_LCD_H
 
 #include <plat/platform_data.h>
-#include <linux/amlogic/vout/lcdoutc.h>
+//#include <linux/amlogic/vout/lcdoutc.h>
 
 struct aml_lcd_platform {
 	plat_data_public_t public;
diff --git a/include/linux/amlogic/vout/vinfo.h b/include/linux/amlogic/vout/vinfo.h
index 92f087f940bd..19d87d2c56f9 100755
--- a/include/linux/amlogic/vout/vinfo.h
+++ b/include/linux/amlogic/vout/vinfo.h
@@ -25,11 +25,11 @@
 #ifndef VINFO_H
 #define VINFO_H
 //the MSB is represent vmode set by logo
-#define	VMODE_LOGO_BIT_MASK	0x8000	
-#define	VMODE_MODE_BIT_MASK	0xff		
+#define	VMODE_LOGO_BIT_MASK	0x8000
+#define	VMODE_MODE_BIT_MASK	0xff
 typedef enum {
     VMODE_480I  = 0,
-    VMODE_480CVBS,		
+    VMODE_480CVBS,
     VMODE_480P  ,
     VMODE_576I   ,
     VMODE_576CVBS   ,
@@ -52,6 +52,7 @@ typedef enum {
     VMODE_LCD	,
 	VMODE_LVDS_1080P,
 	VMODE_LVDS_1080P_50HZ,
+	VMODE_LVDS_768P,
     VMODE_MAX,
     VMODE_INIT_NULL,
     VMODE_MASK = 0xFF,
-- 
2.19.0

