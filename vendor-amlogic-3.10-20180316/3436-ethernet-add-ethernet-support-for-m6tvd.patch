From 3a3e931b06e77003a6f2d96c7585d28ce97e26e2 Mon Sep 17 00:00:00 2001
From: "bo.yang" <bo.yang@amlogic.com>
Date: Sun, 16 Feb 2014 21:06:34 +0800
Subject: [PATCH 3436/5965] ethernet: add ethernet support for m6tvd

add Internal phy for ethernent & add Internal phy driver for phylib.

add this funtion ctl hardware reset:
	1. about phy suspend hardware power down ; phy power on need hardware reset.
	2. If you use this funtion, you can config aml.dtd enable phy hardware reset and contorl reset delay time

by baoqi.wang@amlogic.com
---
 arch/arm/boot/dts/amlogic/meson6tv_ref.dtd    |   8 +
 arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd   |   8 +
 arch/arm/configs/meson6tv_defconfig           | 107 ++++
 arch/arm/configs/meson6tvd_defconfig          | 115 ++++-
 .../mach-meson6tv/include/mach/am_eth_reg.h   | 198 ++++++++
 .../mach-meson6tvd/include/mach/am_eth_reg.h  | 198 ++++++++
 drivers/amlogic/ethernet/am_mdio.c            |   5 +
 drivers/amlogic/ethernet/am_net8218.c         | 462 +++++++++++++-----
 drivers/amlogic/ethernet/am_net8218.h         |   2 +-
 drivers/amlogic/ethernet/aml.dtd              |   3 +
 drivers/net/phy/Kconfig                       |   7 +-
 drivers/net/phy/Makefile                      |   1 +
 drivers/net/phy/amlogic.c                     | 315 ++++++++++++
 13 files changed, 1301 insertions(+), 128 deletions(-)
 create mode 100755 arch/arm/mach-meson6tv/include/mach/am_eth_reg.h
 create mode 100755 arch/arm/mach-meson6tvd/include/mach/am_eth_reg.h
 mode change 100644 => 100755 drivers/amlogic/ethernet/am_mdio.c
 mode change 100644 => 100755 drivers/net/phy/Kconfig
 mode change 100644 => 100755 drivers/net/phy/Makefile
 create mode 100755 drivers/net/phy/amlogic.c

diff --git a/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd b/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
index 1156d7dcd59f..b1da4466c98a 100755
--- a/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
@@ -212,6 +212,14 @@
 		pinctrl-0 = <&remote_pins>;
 	};
 
+	meson-eth {
+		compatible = "amlogic,meson-eth";
+		dev_name = "meson-eth";
+		status = "okay";
+		ethbaseaddr = <0xf3610000>;
+		interruptnum = <40>;
+	};
+
 	gpio:gpio {
 		compatible = "amlogic,m6tv-gpio";
 		dev_name = "gpio";
diff --git a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
index feba0af19360..388c6104ca6a 100755
--- a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
@@ -390,6 +390,14 @@
 		pinctrl-0 = <&remote_pins>;
 	};
 
+	meson-eth {
+		compatible = "amlogic,meson-eth";
+		dev_name = "meson-eth";
+		status = "okay";
+		ethbaseaddr = <0xf3610000>;
+		interruptnum = <40>;
+	};
+
 	gpio:gpio {
 		compatible = "amlogic,m6tv-gpio";
 		dev_name = "gpio";
diff --git a/arch/arm/configs/meson6tv_defconfig b/arch/arm/configs/meson6tv_defconfig
index 97d386bfb027..2bd9f64efff6 100755
--- a/arch/arm/configs/meson6tv_defconfig
+++ b/arch/arm/configs/meson6tv_defconfig
@@ -26,6 +26,113 @@ CONFIG_HIGHMEM=y
 CONFIG_VFP=y
 CONFIG_NEON=y
 CONFIG_BINFMT_MISC=y
+CONFIG_WAKELOCK=y
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=y
+CONFIG_NET_KEY=y
+CONFIG_INET=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_INET_ESP=y
+CONFIG_IPV6=y
+CONFIG_IPV6_PRIVACY=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=y
+CONFIG_INET6_ESP=y
+CONFIG_INET6_IPCOMP=y
+CONFIG_IPV6_MIP6=y
+CONFIG_IPV6_TUNNEL=y
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CT_PROTO_DCCP=y
+CONFIG_NF_CT_PROTO_SCTP=y
+CONFIG_NF_CT_PROTO_UDPLITE=y
+CONFIG_NF_CONNTRACK_AMANDA=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_H323=y
+CONFIG_NF_CONNTRACK_IRC=y
+CONFIG_NF_CONNTRACK_NETBIOS_NS=y
+CONFIG_NF_CONNTRACK_PPTP=y
+CONFIG_NF_CONNTRACK_SANE=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_TARGET_MARK=y
+CONFIG_NETFILTER_XT_TARGET_NFLOG=y
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
+CONFIG_NETFILTER_XT_TARGET_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_MATCH_COMMENT=y
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_HELPER=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_LENGTH=y
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
+CONFIG_NETFILTER_XT_MATCH_QTAGUID=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y
+CONFIG_NETFILTER_XT_MATCH_SOCKET=y
+CONFIG_NETFILTER_XT_MATCH_STATE=y
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
+CONFIG_NETFILTER_XT_MATCH_STRING=y
+CONFIG_NETFILTER_XT_MATCH_TIME=y
+CONFIG_NETFILTER_XT_MATCH_U32=y
+CONFIG_NF_CONNTRACK_IPV4=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=y
+CONFIG_IP_NF_MATCH_TTL=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_TARGET_REJECT_SKERR=y
+CONFIG_NF_NAT_IPV4=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_NETMAP=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_RAW=y
+CONFIG_IP_NF_ARPTABLES=y
+CONFIG_IP_NF_ARPFILTER=y
+CONFIG_IP_NF_ARP_MANGLE=y
+CONFIG_NF_CONNTRACK_IPV6=y
+CONFIG_IP6_NF_IPTABLES=y
+CONFIG_IP6_NF_FILTER=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+CONFIG_IP6_NF_TARGET_REJECT_SKERR=y
+CONFIG_IP6_NF_MANGLE=y
+CONFIG_IP6_NF_RAW=y
+CONFIG_NF_NAT_IPV6=y
+CONFIG_IP6_NF_TARGET_MASQUERADE=y
+CONFIG_IP6_NF_TARGET_NPT=y
+CONFIG_BRIDGE=y
+# CONFIG_BRIDGE_IGMP_SNOOPING is not set
+CONFIG_PHONET=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_INGRESS=y
+CONFIG_NET_CLS_U32=y
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_NET_ACT_MIRRED=y
 # CONFIG_OF_LM is not set
 # CONFIG_AML_RTC is not set
 CONFIG_AM_REMOTE=y
diff --git a/arch/arm/configs/meson6tvd_defconfig b/arch/arm/configs/meson6tvd_defconfig
index 557b6c1816c9..45e2d945b16f 100755
--- a/arch/arm/configs/meson6tvd_defconfig
+++ b/arch/arm/configs/meson6tvd_defconfig
@@ -25,13 +25,120 @@ CONFIG_HIGHMEM=y
 CONFIG_VFP=y
 CONFIG_NEON=y
 CONFIG_BINFMT_MISC=y
+CONFIG_WAKELOCK=y
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=y
+CONFIG_NET_KEY=y
+CONFIG_INET=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_INET_ESP=y
+CONFIG_IPV6=y
+CONFIG_IPV6_PRIVACY=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=y
+CONFIG_INET6_ESP=y
+CONFIG_INET6_IPCOMP=y
+CONFIG_IPV6_MIP6=y
+CONFIG_IPV6_TUNNEL=y
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CT_PROTO_DCCP=y
+CONFIG_NF_CT_PROTO_SCTP=y
+CONFIG_NF_CT_PROTO_UDPLITE=y
+CONFIG_NF_CONNTRACK_AMANDA=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_H323=y
+CONFIG_NF_CONNTRACK_IRC=y
+CONFIG_NF_CONNTRACK_NETBIOS_NS=y
+CONFIG_NF_CONNTRACK_PPTP=y
+CONFIG_NF_CONNTRACK_SANE=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_TARGET_MARK=y
+CONFIG_NETFILTER_XT_TARGET_NFLOG=y
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
+CONFIG_NETFILTER_XT_TARGET_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_MATCH_COMMENT=y
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_HELPER=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_LENGTH=y
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
+CONFIG_NETFILTER_XT_MATCH_QTAGUID=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y
+CONFIG_NETFILTER_XT_MATCH_SOCKET=y
+CONFIG_NETFILTER_XT_MATCH_STATE=y
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
+CONFIG_NETFILTER_XT_MATCH_STRING=y
+CONFIG_NETFILTER_XT_MATCH_TIME=y
+CONFIG_NETFILTER_XT_MATCH_U32=y
+CONFIG_NF_CONNTRACK_IPV4=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=y
+CONFIG_IP_NF_MATCH_TTL=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_TARGET_REJECT_SKERR=y
+CONFIG_NF_NAT_IPV4=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_NETMAP=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_RAW=y
+CONFIG_IP_NF_ARPTABLES=y
+CONFIG_IP_NF_ARPFILTER=y
+CONFIG_IP_NF_ARP_MANGLE=y
+CONFIG_NF_CONNTRACK_IPV6=y
+CONFIG_IP6_NF_IPTABLES=y
+CONFIG_IP6_NF_FILTER=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+CONFIG_IP6_NF_TARGET_REJECT_SKERR=y
+CONFIG_IP6_NF_MANGLE=y
+CONFIG_IP6_NF_RAW=y
+CONFIG_NF_NAT_IPV6=y
+CONFIG_IP6_NF_TARGET_MASQUERADE=y
+CONFIG_IP6_NF_TARGET_NPT=y
+CONFIG_BRIDGE=y
+# CONFIG_BRIDGE_IGMP_SNOOPING is not set
+CONFIG_PHONET=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_INGRESS=y
+CONFIG_NET_CLS_U32=y
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_NET_ACT_MIRRED=y
 # CONFIG_AML_RTC is not set
 CONFIG_AM_REMOTE=m
 # CONFIG_MESON_NEW_INPUT_REMOTE is not set
 # CONFIG_MESON_INPUT_KEYBOARD is not set
 # CONFIG_AMLOGIC_BOARD_HAS_PMU is not set
-CONFIG_AMLOGIC_USB
 CONFIG_MMC_AML=y
+CONFIG_AM_ETHERNET=y
 # CONFIG_AMAUDIO is not set
 CONFIG_VSYNC_RDMA=y
 CONFIG_AM_VIDEO=y
@@ -68,6 +175,11 @@ CONFIG_SCSI=y
 CONFIG_BLK_DEV_SD=y
 CONFIG_BLK_DEV_SR=y
 CONFIG_SCSI_MULTI_LUN=y
+CONFIG_NETDEVICES=y
+CONFIG_PHYLIB=y
+CONFIG_MARVELL_PHY=y
+CONFIG_AMLOGIC_PHY=y
+CONFIG_SMSC_PHY=y
 CONFIG_INPUT_POLLDEV=y
 CONFIG_INPUT_EVDEV=y
 CONFIG_INPUT_MISC=y
@@ -135,4 +247,3 @@ CONFIG_RCU_CPU_STALL_TIMEOUT=60
 # CONFIG_FTRACE is not set
 CONFIG_CRC_T10DIF=y
 CONFIG_CRC7=y
-
diff --git a/arch/arm/mach-meson6tv/include/mach/am_eth_reg.h b/arch/arm/mach-meson6tv/include/mach/am_eth_reg.h
new file mode 100755
index 000000000000..821d9736dc9a
--- /dev/null
+++ b/arch/arm/mach-meson6tv/include/mach/am_eth_reg.h
@@ -0,0 +1,198 @@
+/*******************************************************************
+ *
+ *  Copyright C 2013 by Amlogic, Inc. All Rights Reserved.
+ *
+ *  Author: baoqi
+ *  Created: 2013-12-31
+ *
+ *******************************************************************/
+#ifndef __ETH_REG_H_
+#define __ETH_REG_H_
+#define ETH_DMA_0_Bus_Mode                  (0x1000)
+#define ETH_DMA_1_Tr_Poll_Demand        (0x1004)
+#define ETH_DMA_2_Re_Poll_Demand        (0x1008)
+#define ETH_DMA_3_Re_Descriptor_List_Addr   (0x100C)
+#define ETH_DMA_4_Tr_Descriptor_List_Addr   (0x1010)
+#define ETH_DMA_5_Status            (0x1014)
+#define ETH_DMA_6_Operation_Mode        (0x1018)
+#define ETH_DMA_7_Interrupt_Enable      (0x101C)
+#define ETH_DMA_8_Missed_Frame_and_Overflow (0x1020)
+#define ETH_DMA_9_Reserved          (0x1024)
+#define ETH_DMA_10_Reserved         (0x1028)
+#define ETH_DMA_11_Reserved         (0x102c)
+#define ETH_DMA_12_Reserved         (0x1030)
+#define ETH_DMA_13_Reserved         (0x1034)
+#define ETH_DMA_14_Reserved         (0x1038)
+#define ETH_DMA_15_Reserved         (0x103c)
+#define ETH_DMA_16_Reserved         (0x1040)
+#define ETH_DMA_17_Reserved         (0x1044)
+#define ETH_DMA_18_Curr_Host_Tr_Descriptor  (0x1048)
+#define ETH_DMA_19_Curr_Host_Re_Descriptor  (0x104C)
+#define ETH_DMA_20_Curr_Host_Tr_Buffer_Addr (0x1050)
+#define ETH_DMA_21_Curr_Host_Re_Buffer_Addr (0x1054)
+#define ETH_MAC_0_Configuration         (0x0000)
+#define ETH_MAC_1_Frame_Filter          (0x0004)
+#define ETH_MAC_2_Hash_Table_High       (0x0008)
+#define ETH_MAC_3_Hash_Table_Low        (0x000C)
+#define ETH_MAC_4_GMII_Addr         (0x0010)
+#define ETH_MAC_5_GMII_Data         (0x0014)
+#define ETH_MAC_6_Flow_Control          (0x0018)
+#define ETH_MAC_7_VLAN_Tag          (0x001C)
+#define ETH_MAC_8_Version           (0x0020)
+#define ETH_MAC_9_Reserved          (0x0024)
+#define ETH_MAC_Remote_Wake_Up_Frame_Filter (0x0028)
+#define ETH_MAC_PMT_Control_and_Status      (0x002C)
+#define ETH_MAC_12_Reserved         (0x0030)
+#define ETH_MAC_13_Reserved         (0x0034)
+#define ETH_MAC_Interrupt           (0x0038)
+#define ETH_MAC_Interrupt_Mask          (0x003C)
+#define ETH_MAC_Addr0_High          (0x0040)
+#define ETH_MAC_Addr0_Low           (0x0044)
+#define ETH_MAC_Addr1_High          (0x0048)
+#define ETH_MAC_Addr1_Low           (0x004C)
+#define ETH_MAC_Addr2_High          (0x0050)
+#define ETH_MAC_Addr2_Low           (0x0054)
+#define ETH_MAC_Addr3_High          (0x0058)
+#define ETH_MAC_Addr3_Low           (0x005C)
+#define ETH_MAC_Addr4_High          (0x0060)
+#define ETH_MAC_Addr4_Low           (0x0064)
+#define ETH_MAC_Addr5_High          (0x0068)
+#define ETH_MAC_Addr5_Low           (0x006C)
+#define ETH_MAC_Addr6_High          (0x0070)
+#define ETH_MAC_Addr6_Low           (0x0074)
+#define ETH_MAC_Addr7_High          (0x0078)
+#define ETH_MAC_Addr7_Low           (0x007C)
+#define ETH_MAC_Addr8_High          (0x0080)
+#define ETH_MAC_Addr8_Low           (0x0084)
+#define ETH_MAC_Addr9_High          (0x0088)
+#define ETH_MAC_Addr9_Low           (0x008C)
+#define ETH_MAC_Addr10_High         (0x0090)
+#define ETH_MAC_Addr10_Low          (0x0094)
+#define ETH_MAC_Addr11_High         (0x0098)
+#define ETH_MAC_Addr11_Low          (0x009C)
+#define ETH_MAC_Addr12_High         (0x00A0)
+#define ETH_MAC_Addr12_Low          (0x00A4)
+#define ETH_MAC_Addr13_High         (0x00A8)
+#define ETH_MAC_Addr13_Low          (0x00AC)
+#define ETH_MAC_Addr14_High         (0x00B0)
+#define ETH_MAC_Addr14_Low          (0x00B4)
+#define ETH_MAC_Addr15_High         (0x00B8)
+#define ETH_MAC_Addr15_Low          (0x00BC)
+#define ETH_MAC_48_AN_Control           (0x00C0)
+#define ETH_MAC_49_AN_Status            (0x00C4)
+#define ETH_MAC_50_AN_Advertisement     (0x00C8)
+#define ETH_MAC_51_AN_Link_Partner_Ability  (0x00CC)
+#define ETH_MAC_52_AN_Expansion         (0x00D0)
+#define ETH_MAC_53_TBI_Extended_Status      (0x00D4)
+#define ETH_MAC_54_SGMII_RGMII_Status       (0x00D8)
+#define ETH_MAC_55_Reserved         (0x00DC)
+#define ETH_MAC_56_Reserved         (0x00E0)
+#define ETH_MAC_57_Reserved         (0x00E4)
+#define ETH_MAC_58_Reserved         (0x00E8)
+#define ETH_MAC_59_Reserved         (0x00EC)
+#define ETH_MAC_60_Reserved         (0x00F0)
+#define ETH_MAC_61_Reserved         (0x00F4)
+#define ETH_MAC_62_Reserved         (0x00F8)
+#define ETH_MAC_63_Reserved         (0x00FC)
+#define ETH_MMC_cntrl               (0x0100)
+#define ETH_MMC_intr_rx             (0x0104)
+#define ETH_MMC_intr_tx             (0x0108)
+#define ETH_MMC_intr_mask_rx            (0x010C)
+#define ETH_MMC_intr_mask_tx            (0x0110)
+#define ETH_MMC_txoctetcount_gb         (0x0114)
+#define ETH_MMC_txframecount_gb         (0x0118)
+#define ETH_MMC_txbroadcastframes_g     (0x011C)
+#define ETH_MMC_txmulticastframes_g     (0x0120)
+#define ETH_MMC_tx64octets_gb           (0x0124)
+#define ETH_MMC_tx65to127octets_gb      (0x0128)
+#define ETH_MMC_tx128to255octets_gb     (0x012C)
+#define ETH_MMC_tx256to511octets_gb     (0x0130)
+#define ETH_MMC_tx512to1023octets_gb        (0x0134)
+#define ETH_MMC_tx1024tomaxoctets_gb        (0x0138)
+#define ETH_MMC_txunicastframes_gb      (0x013C)
+#define ETH_MMC_txmulticastframes_gb        (0x0140)
+#define ETH_MMC_txbroadcastframes_gb        (0x0144)
+#define ETH_MMC_txunderflowerror        (0x0148)
+#define ETH_MMC_txsinglecol_g           (0x014C)
+#define ETH_MMC_txmulticol_g            (0x0150)
+#define ETH_MMC_txdeferred          (0x0154)
+#define ETH_MMC_txlatecol           (0x0158)
+#define ETH_MMC_txexesscol          (0x015C)
+#define ETH_MMC_txcarriererror          (0x0160)
+#define ETH_MMC_txoctetcount_g          (0x0164)
+#define ETH_MMC_txframecount_g          (0x0168)
+#define ETH_MMC_txexcessdef         (0x016C)
+#define ETH_MMC_txpauseframes           (0x0170)
+#define ETH_MMC_txvlanframes_g          (0x0174)
+#define ETH_MMC_94_Reserved         (0x0178)
+#define ETH_MMC_95_Reserved         (0x017C)
+#define ETH_MMC_rxframecount_gb         (0x0180)
+#define ETH_MMC_rxoctetcount_gb         (0x0184)
+#define ETH_MMC_rxoctetcount_g          (0x0188)
+#define ETH_MMC_rxbroadcastframes_g     (0x018C)
+#define ETH_MMC_rxmulticastframes_g     (0x0190)
+#define ETH_MMC_rxcrcerror          (0x0194)
+#define ETH_MMC_rxalignmenterror        (0x0198)
+#define ETH_MMC_rxrunterror         (0x019C)
+#define ETH_MMC_rxjabbererror           (0x01A0)
+#define ETH_MMC_rxundersize_g           (0x01A4)
+#define ETH_MMC_rxoversize_g            (0x01A8)
+#define ETH_MMC_rx64octets_gb           (0x01AC)
+#define ETH_MMC_rx65to127octets_gb      (0x01B0)
+#define ETH_MMC_rx128to255octets_gb     (0x01B4)
+#define ETH_MMC_rx256to511octets_gb     (0x01B8)
+#define ETH_MMC_rx512to1023octets_gb        (0x01BC)
+#define ETH_MMC_rx1024tomaxoctets_gb        (0x01C0)
+#define ETH_MMC_rxunicastframes_g       (0x01C4)
+#define ETH_MMC_rxlengtherror           (0x01C8)
+#define ETH_MMC_rxoutofrangetype        (0x01CC)
+#define ETH_MMC_rxpauseframes           (0x01D0)
+#define ETH_MMC_rxfifooverflow          (0x01D4)
+#define ETH_MMC_rxvlanframes_gb         (0x01D8)
+#define ETH_MMC_rxwatchdogerror         (0x01DC)
+#define ETH_MMC_120_Reserved            (0x01E0)
+#define ETH_MMC_121_Reserved            (0x01E4)
+#define ETH_MMC_122_Reserved            (0x01E8)
+#define ETH_MMC_123_Reserved            (0x01EC)
+#define ETH_MMC_124_Reserved            (0x01F0)
+#define ETH_MMC_125_Reserved            (0x01F4)
+#define ETH_MMC_126_Reserved            (0x01F8)
+#define ETH_MMC_127_Reserved            (0x01FC)
+#define ETH_MMC_ipc_intr_mask_rx        (0x0200)
+#define ETH_MMC_129_Reserved            (0x0204)
+#define ETH_MMC_ipc_intr_rx         (0x0208)
+#define ETH_MMC_131_Reserved            (0x020C)
+#define ETH_MMC_rxipv4_gd_frms          (0x0210)
+#define ETH_MMC_rxipv4_hdrerr_frms      (0x0214)
+#define ETH_MMC_rxipv4_nopay_frms       (0x0218)
+#define ETH_MMC_rxipv4_frag_frms        (0x021C)
+#define ETH_MMC_rxipv4_udsbl_frms       (0x0220)
+#define ETH_MMC_rxipv6_gd_frms          (0x0224)
+#define ETH_MMC_rxipv6_hdrerr_frms      (0x0228)
+#define ETH_MMC_rxipv6_nopay_frms       (0x022C)
+#define ETH_MMC_rxudp_gd_frms           (0x0230)
+#define ETH_MMC_rxudp_err_frms          (0x0234)
+#define ETH_MMC_rxtcp_gd_frms           (0x0238)
+#define ETH_MMC_rxtcp_err_frms          (0x023C)
+#define ETH_MMC_rxicmp_gd_frms          (0x0240)
+#define ETH_MMC_rxicmp_err_frms         (0x0244)
+#define ETH_MMC_146_Reserved            (0x0248)
+#define ETH_MMC_147_Reserved            (0x024C)
+#define ETH_MMC_rxipv4_gd_octets        (0x0250)
+#define ETH_MMC_rxipv4_hdrerr_octets        (0x0254)
+#define ETH_MMC_rxipv4_nopay_octets     (0x0258)
+#define ETH_MMC_rxipv4_frag_octets      (0x025C)
+#define ETH_MMC_rxipv4_udsbl_octets     (0x0260)
+#define ETH_MMC_rxipv6_gd_octets        (0x0264)
+#define ETH_MMC_rxipv6_hdrerr_octets        (0x0268)
+#define ETH_MMC_rxipv6_nopay_octets     (0x026C)
+#define ETH_MMC_rxudp_gd_octets         (0x0270)
+#define ETH_MMC_rxudp_err_octets        (0x0274)
+#define ETH_MMC_rxtcp_gd_octets         (0x0278)
+#define ETH_MMC_rxtcp_err_octets        (0x027C)
+#define ETH_MMC_rxicmp_gd_octets        (0x0280)
+#define ETH_MMC_rxicmp_err_octets       (0x0284)
+
+
+#endif
+
diff --git a/arch/arm/mach-meson6tvd/include/mach/am_eth_reg.h b/arch/arm/mach-meson6tvd/include/mach/am_eth_reg.h
new file mode 100755
index 000000000000..821d9736dc9a
--- /dev/null
+++ b/arch/arm/mach-meson6tvd/include/mach/am_eth_reg.h
@@ -0,0 +1,198 @@
+/*******************************************************************
+ *
+ *  Copyright C 2013 by Amlogic, Inc. All Rights Reserved.
+ *
+ *  Author: baoqi
+ *  Created: 2013-12-31
+ *
+ *******************************************************************/
+#ifndef __ETH_REG_H_
+#define __ETH_REG_H_
+#define ETH_DMA_0_Bus_Mode                  (0x1000)
+#define ETH_DMA_1_Tr_Poll_Demand        (0x1004)
+#define ETH_DMA_2_Re_Poll_Demand        (0x1008)
+#define ETH_DMA_3_Re_Descriptor_List_Addr   (0x100C)
+#define ETH_DMA_4_Tr_Descriptor_List_Addr   (0x1010)
+#define ETH_DMA_5_Status            (0x1014)
+#define ETH_DMA_6_Operation_Mode        (0x1018)
+#define ETH_DMA_7_Interrupt_Enable      (0x101C)
+#define ETH_DMA_8_Missed_Frame_and_Overflow (0x1020)
+#define ETH_DMA_9_Reserved          (0x1024)
+#define ETH_DMA_10_Reserved         (0x1028)
+#define ETH_DMA_11_Reserved         (0x102c)
+#define ETH_DMA_12_Reserved         (0x1030)
+#define ETH_DMA_13_Reserved         (0x1034)
+#define ETH_DMA_14_Reserved         (0x1038)
+#define ETH_DMA_15_Reserved         (0x103c)
+#define ETH_DMA_16_Reserved         (0x1040)
+#define ETH_DMA_17_Reserved         (0x1044)
+#define ETH_DMA_18_Curr_Host_Tr_Descriptor  (0x1048)
+#define ETH_DMA_19_Curr_Host_Re_Descriptor  (0x104C)
+#define ETH_DMA_20_Curr_Host_Tr_Buffer_Addr (0x1050)
+#define ETH_DMA_21_Curr_Host_Re_Buffer_Addr (0x1054)
+#define ETH_MAC_0_Configuration         (0x0000)
+#define ETH_MAC_1_Frame_Filter          (0x0004)
+#define ETH_MAC_2_Hash_Table_High       (0x0008)
+#define ETH_MAC_3_Hash_Table_Low        (0x000C)
+#define ETH_MAC_4_GMII_Addr         (0x0010)
+#define ETH_MAC_5_GMII_Data         (0x0014)
+#define ETH_MAC_6_Flow_Control          (0x0018)
+#define ETH_MAC_7_VLAN_Tag          (0x001C)
+#define ETH_MAC_8_Version           (0x0020)
+#define ETH_MAC_9_Reserved          (0x0024)
+#define ETH_MAC_Remote_Wake_Up_Frame_Filter (0x0028)
+#define ETH_MAC_PMT_Control_and_Status      (0x002C)
+#define ETH_MAC_12_Reserved         (0x0030)
+#define ETH_MAC_13_Reserved         (0x0034)
+#define ETH_MAC_Interrupt           (0x0038)
+#define ETH_MAC_Interrupt_Mask          (0x003C)
+#define ETH_MAC_Addr0_High          (0x0040)
+#define ETH_MAC_Addr0_Low           (0x0044)
+#define ETH_MAC_Addr1_High          (0x0048)
+#define ETH_MAC_Addr1_Low           (0x004C)
+#define ETH_MAC_Addr2_High          (0x0050)
+#define ETH_MAC_Addr2_Low           (0x0054)
+#define ETH_MAC_Addr3_High          (0x0058)
+#define ETH_MAC_Addr3_Low           (0x005C)
+#define ETH_MAC_Addr4_High          (0x0060)
+#define ETH_MAC_Addr4_Low           (0x0064)
+#define ETH_MAC_Addr5_High          (0x0068)
+#define ETH_MAC_Addr5_Low           (0x006C)
+#define ETH_MAC_Addr6_High          (0x0070)
+#define ETH_MAC_Addr6_Low           (0x0074)
+#define ETH_MAC_Addr7_High          (0x0078)
+#define ETH_MAC_Addr7_Low           (0x007C)
+#define ETH_MAC_Addr8_High          (0x0080)
+#define ETH_MAC_Addr8_Low           (0x0084)
+#define ETH_MAC_Addr9_High          (0x0088)
+#define ETH_MAC_Addr9_Low           (0x008C)
+#define ETH_MAC_Addr10_High         (0x0090)
+#define ETH_MAC_Addr10_Low          (0x0094)
+#define ETH_MAC_Addr11_High         (0x0098)
+#define ETH_MAC_Addr11_Low          (0x009C)
+#define ETH_MAC_Addr12_High         (0x00A0)
+#define ETH_MAC_Addr12_Low          (0x00A4)
+#define ETH_MAC_Addr13_High         (0x00A8)
+#define ETH_MAC_Addr13_Low          (0x00AC)
+#define ETH_MAC_Addr14_High         (0x00B0)
+#define ETH_MAC_Addr14_Low          (0x00B4)
+#define ETH_MAC_Addr15_High         (0x00B8)
+#define ETH_MAC_Addr15_Low          (0x00BC)
+#define ETH_MAC_48_AN_Control           (0x00C0)
+#define ETH_MAC_49_AN_Status            (0x00C4)
+#define ETH_MAC_50_AN_Advertisement     (0x00C8)
+#define ETH_MAC_51_AN_Link_Partner_Ability  (0x00CC)
+#define ETH_MAC_52_AN_Expansion         (0x00D0)
+#define ETH_MAC_53_TBI_Extended_Status      (0x00D4)
+#define ETH_MAC_54_SGMII_RGMII_Status       (0x00D8)
+#define ETH_MAC_55_Reserved         (0x00DC)
+#define ETH_MAC_56_Reserved         (0x00E0)
+#define ETH_MAC_57_Reserved         (0x00E4)
+#define ETH_MAC_58_Reserved         (0x00E8)
+#define ETH_MAC_59_Reserved         (0x00EC)
+#define ETH_MAC_60_Reserved         (0x00F0)
+#define ETH_MAC_61_Reserved         (0x00F4)
+#define ETH_MAC_62_Reserved         (0x00F8)
+#define ETH_MAC_63_Reserved         (0x00FC)
+#define ETH_MMC_cntrl               (0x0100)
+#define ETH_MMC_intr_rx             (0x0104)
+#define ETH_MMC_intr_tx             (0x0108)
+#define ETH_MMC_intr_mask_rx            (0x010C)
+#define ETH_MMC_intr_mask_tx            (0x0110)
+#define ETH_MMC_txoctetcount_gb         (0x0114)
+#define ETH_MMC_txframecount_gb         (0x0118)
+#define ETH_MMC_txbroadcastframes_g     (0x011C)
+#define ETH_MMC_txmulticastframes_g     (0x0120)
+#define ETH_MMC_tx64octets_gb           (0x0124)
+#define ETH_MMC_tx65to127octets_gb      (0x0128)
+#define ETH_MMC_tx128to255octets_gb     (0x012C)
+#define ETH_MMC_tx256to511octets_gb     (0x0130)
+#define ETH_MMC_tx512to1023octets_gb        (0x0134)
+#define ETH_MMC_tx1024tomaxoctets_gb        (0x0138)
+#define ETH_MMC_txunicastframes_gb      (0x013C)
+#define ETH_MMC_txmulticastframes_gb        (0x0140)
+#define ETH_MMC_txbroadcastframes_gb        (0x0144)
+#define ETH_MMC_txunderflowerror        (0x0148)
+#define ETH_MMC_txsinglecol_g           (0x014C)
+#define ETH_MMC_txmulticol_g            (0x0150)
+#define ETH_MMC_txdeferred          (0x0154)
+#define ETH_MMC_txlatecol           (0x0158)
+#define ETH_MMC_txexesscol          (0x015C)
+#define ETH_MMC_txcarriererror          (0x0160)
+#define ETH_MMC_txoctetcount_g          (0x0164)
+#define ETH_MMC_txframecount_g          (0x0168)
+#define ETH_MMC_txexcessdef         (0x016C)
+#define ETH_MMC_txpauseframes           (0x0170)
+#define ETH_MMC_txvlanframes_g          (0x0174)
+#define ETH_MMC_94_Reserved         (0x0178)
+#define ETH_MMC_95_Reserved         (0x017C)
+#define ETH_MMC_rxframecount_gb         (0x0180)
+#define ETH_MMC_rxoctetcount_gb         (0x0184)
+#define ETH_MMC_rxoctetcount_g          (0x0188)
+#define ETH_MMC_rxbroadcastframes_g     (0x018C)
+#define ETH_MMC_rxmulticastframes_g     (0x0190)
+#define ETH_MMC_rxcrcerror          (0x0194)
+#define ETH_MMC_rxalignmenterror        (0x0198)
+#define ETH_MMC_rxrunterror         (0x019C)
+#define ETH_MMC_rxjabbererror           (0x01A0)
+#define ETH_MMC_rxundersize_g           (0x01A4)
+#define ETH_MMC_rxoversize_g            (0x01A8)
+#define ETH_MMC_rx64octets_gb           (0x01AC)
+#define ETH_MMC_rx65to127octets_gb      (0x01B0)
+#define ETH_MMC_rx128to255octets_gb     (0x01B4)
+#define ETH_MMC_rx256to511octets_gb     (0x01B8)
+#define ETH_MMC_rx512to1023octets_gb        (0x01BC)
+#define ETH_MMC_rx1024tomaxoctets_gb        (0x01C0)
+#define ETH_MMC_rxunicastframes_g       (0x01C4)
+#define ETH_MMC_rxlengtherror           (0x01C8)
+#define ETH_MMC_rxoutofrangetype        (0x01CC)
+#define ETH_MMC_rxpauseframes           (0x01D0)
+#define ETH_MMC_rxfifooverflow          (0x01D4)
+#define ETH_MMC_rxvlanframes_gb         (0x01D8)
+#define ETH_MMC_rxwatchdogerror         (0x01DC)
+#define ETH_MMC_120_Reserved            (0x01E0)
+#define ETH_MMC_121_Reserved            (0x01E4)
+#define ETH_MMC_122_Reserved            (0x01E8)
+#define ETH_MMC_123_Reserved            (0x01EC)
+#define ETH_MMC_124_Reserved            (0x01F0)
+#define ETH_MMC_125_Reserved            (0x01F4)
+#define ETH_MMC_126_Reserved            (0x01F8)
+#define ETH_MMC_127_Reserved            (0x01FC)
+#define ETH_MMC_ipc_intr_mask_rx        (0x0200)
+#define ETH_MMC_129_Reserved            (0x0204)
+#define ETH_MMC_ipc_intr_rx         (0x0208)
+#define ETH_MMC_131_Reserved            (0x020C)
+#define ETH_MMC_rxipv4_gd_frms          (0x0210)
+#define ETH_MMC_rxipv4_hdrerr_frms      (0x0214)
+#define ETH_MMC_rxipv4_nopay_frms       (0x0218)
+#define ETH_MMC_rxipv4_frag_frms        (0x021C)
+#define ETH_MMC_rxipv4_udsbl_frms       (0x0220)
+#define ETH_MMC_rxipv6_gd_frms          (0x0224)
+#define ETH_MMC_rxipv6_hdrerr_frms      (0x0228)
+#define ETH_MMC_rxipv6_nopay_frms       (0x022C)
+#define ETH_MMC_rxudp_gd_frms           (0x0230)
+#define ETH_MMC_rxudp_err_frms          (0x0234)
+#define ETH_MMC_rxtcp_gd_frms           (0x0238)
+#define ETH_MMC_rxtcp_err_frms          (0x023C)
+#define ETH_MMC_rxicmp_gd_frms          (0x0240)
+#define ETH_MMC_rxicmp_err_frms         (0x0244)
+#define ETH_MMC_146_Reserved            (0x0248)
+#define ETH_MMC_147_Reserved            (0x024C)
+#define ETH_MMC_rxipv4_gd_octets        (0x0250)
+#define ETH_MMC_rxipv4_hdrerr_octets        (0x0254)
+#define ETH_MMC_rxipv4_nopay_octets     (0x0258)
+#define ETH_MMC_rxipv4_frag_octets      (0x025C)
+#define ETH_MMC_rxipv4_udsbl_octets     (0x0260)
+#define ETH_MMC_rxipv6_gd_octets        (0x0264)
+#define ETH_MMC_rxipv6_hdrerr_octets        (0x0268)
+#define ETH_MMC_rxipv6_nopay_octets     (0x026C)
+#define ETH_MMC_rxudp_gd_octets         (0x0270)
+#define ETH_MMC_rxudp_err_octets        (0x0274)
+#define ETH_MMC_rxtcp_gd_octets         (0x0278)
+#define ETH_MMC_rxtcp_err_octets        (0x027C)
+#define ETH_MMC_rxicmp_gd_octets        (0x0280)
+#define ETH_MMC_rxicmp_err_octets       (0x0284)
+
+
+#endif
+
diff --git a/drivers/amlogic/ethernet/am_mdio.c b/drivers/amlogic/ethernet/am_mdio.c
old mode 100644
new mode 100755
index 22f64411f482..ef149221d1f7
--- a/drivers/amlogic/ethernet/am_mdio.c
+++ b/drivers/amlogic/ethernet/am_mdio.c
@@ -105,6 +105,11 @@ int aml_mdio_register(struct net_device *ndev)
 				phydev->irq = PHY_POLL;
 				irqlist[addr] = PHY_POLL;
 			}
+			if (phydev->phy_id  != 0) {
+				//priv->phydev->addr = addr;
+				priv->phy_addr = addr;
+				irqlist[addr] = PHY_POLL;
+			}
 			pr_info("%s: PHY ID %08x at %d IRQ %d (%s)%s\n",
 					ndev->name, phydev->phy_id, addr,
 					phydev->irq, dev_name(&phydev->dev),
diff --git a/drivers/amlogic/ethernet/am_net8218.c b/drivers/amlogic/ethernet/am_net8218.c
index 847fb26ad59b..8e4e4a8ef9bb 100755
--- a/drivers/amlogic/ethernet/am_net8218.c
+++ b/drivers/amlogic/ethernet/am_net8218.c
@@ -1,6 +1,6 @@
 /*
  * Amlogic Ethernet Driver
- *
+ * h
  * Copyright (C) 2012 Amlogic, Inc.
  *
  * This program is free software; you can redistribute it and/or modify
@@ -41,9 +41,11 @@
 #include <mach/pinmux.h>
 #include <mach/gpio.h>
 #include <asm/delay.h>
-
+#include <linux/delay.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
 #include <linux/of_platform.h>
-#include <linux/kthread.h> 
+#include <linux/kthread.h>
 #include "am_net8218.h"
 #include <mach/mod_gate.h>
 
@@ -52,10 +54,12 @@
 
 #define DRV_NAME	DRIVER_NAME
 #define DRV_VERSION	"v2.0.0"
+
 #ifdef CONFIG_HAS_EARLYSUSPEND
 #include <linux/earlysuspend.h>
 static struct early_suspend early_suspend;
 #endif
+
 MODULE_DESCRIPTION("Amlogic Ethernet Driver");
 MODULE_AUTHOR("Platform-BJ@amlogic.com>");
 MODULE_LICENSE("GPL");
@@ -74,8 +78,12 @@ static unsigned int g_tx_cnt = 0;
 static unsigned int g_rx_cnt = 0;
 static int g_mdcclk = 2;
 static unsigned int ethbaseaddr = ETHBASE;
+static unsigned int savepowermode = 0;
 static int interruptnum = ETH_INTERRUPT;
-static int savepowermode = 0;
+static int reset_delay = 0;
+static int reset_pin_num = 0;
+static int reset_pin_enable = 0;
+static char *reset_pin;
 static unsigned int MDCCLK = ETH_MAC_4_GMII_Addr_CR_100_150;
 
 module_param_named(amlog_level, g_debug, int, 0664);
@@ -106,7 +114,7 @@ static int ethernet_reset(struct net_device *dev);
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  data_dump 
+ * @brief  data_dump
  *
  * @param  p
  * @param  len
@@ -130,7 +138,7 @@ static void data_dump(unsigned char *p, int len)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  tx_data_dump 
+ * @brief  tx_data_dump
  *
  * @param  p
  * @param  len
@@ -149,7 +157,7 @@ static void tx_data_dump(unsigned char *p, int len)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  rx_data_dump 
+ * @brief  rx_data_dump
  *
  * @param  p
  * @param  len
@@ -168,13 +176,13 @@ static void rx_data_dump(unsigned char *p, int len)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  netdev_ioctl 
+ * @brief  netdev_ioctl
  *
  * @param  dev
  * @param  rq
  * @param  cmd
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int netdev_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
@@ -197,11 +205,11 @@ static int netdev_ioctl(struct net_device *dev, struct ifreq *rq, int cmd)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  init_rxtx_rings 
+ * @brief  init_rxtx_rings
  *
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 int init_rxtx_rings(struct net_device *dev)
@@ -283,11 +291,11 @@ int init_rxtx_rings(struct net_device *dev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  alloc_ringdesc 
+ * @brief  alloc_ringdesc
  *
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int alloc_ringdesc(struct net_device *dev)
@@ -329,11 +337,11 @@ static int alloc_ringdesc(struct net_device *dev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  free_ringdesc 
+ * @brief  free_ringdesc
  *
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int free_ringdesc(struct net_device *dev)
@@ -384,13 +392,13 @@ static int free_ringdesc(struct net_device *dev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  update_status 
+ * @brief  update_status
  *
  * @param  dev
  * @param  status
  * @param  mask
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static inline int update_status(struct net_device *dev, unsigned long status,
@@ -492,7 +500,7 @@ static inline int update_status(struct net_device *dev, unsigned long status,
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  print_rx_error_log 
+ * @brief  print_rx_error_log
  *
  * @param  status
  */
@@ -541,7 +549,7 @@ static void inline print_rx_error_log(unsigned long status)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  net_tasklet 
+ * @brief  net_tasklet
  *
  * @param  dev_instance
  */
@@ -661,7 +669,7 @@ void net_tasklet(unsigned long dev_instance)
 					printk("NET skb pointer error!!!\n");
 					break;
 				}
-				
+
 				if (rx->buf_dma != 0) {
 					dma_unmap_single(&dev->dev, rx->buf_dma,/* np->rx_buf_sz*/len, DMA_FROM_DEVICE);
 				}
@@ -749,12 +757,12 @@ release:
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  intr_handler 
+ * @brief  intr_handler
  *
  * @param  irq
  * @param  dev_instance
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static irqreturn_t intr_handler(int irq, void *dev_instance)
@@ -843,11 +851,11 @@ static int mac_pmt_enable(unsigned int enable)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  phy_reset 
+ * @brief  phy_reset
  *
  * @param  ndev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 #ifdef CONFIG_AML_NAND_KEY
@@ -883,7 +891,7 @@ static int aml_mac_init(struct net_device *ndev)
 	}
 	memcpy(ndev->dev_addr, mac, ETH_ALEN);
 	}
-#endif	
+#endif
 	printk("--2--write mac add to:");
 	data_dump(ndev->dev_addr, 6);
 	write_mac_addr(ndev, ndev->dev_addr);
@@ -924,11 +932,16 @@ static void aml_adjust_link(struct net_device *dev)
 	struct phy_device *phydev = priv->phydev;
 	unsigned long flags;
 	int new_state = 0;
+	int val;
 
-	if (phydev == NULL) 
+	if (phydev == NULL)
 		return;
 
 	spin_lock_irqsave(&priv->lock, flags);
+	if(phydev->phy_id == INTERNALPHY_ID){
+		val = (8<<27)|(7 << 24)|(1<<16)|(1<<15)|(1 << 13)|(1 << 12)|(4 << 4)|(0 << 1);
+		PERIPHS_SET_BITS(P_PREG_ETHERNET_ADDR0, val);
+	}
 	if (phydev->link) {
 		u32 ctrl = readl((void*)(priv->base_addr + ETH_MAC_0_Configuration));
 
@@ -936,9 +949,9 @@ static void aml_adjust_link(struct net_device *dev)
 		 * If not, we operate in half-duplex mode. */
 		if (phydev->duplex != priv->oldduplex) {
 			new_state = 1;
-			if (!(phydev->duplex)) 
+			if (!(phydev->duplex))
 				ctrl &= ~(1 << 11);
-			else 
+			else
 				ctrl |= (1 << 11);
 
 			priv->oldduplex = phydev->duplex;
@@ -957,6 +970,10 @@ static void aml_adjust_link(struct net_device *dev)
 				case 10:
 					ctrl &= ~(1 << 14);
 					PERIPHS_CLEAR_BITS(P_PREG_ETHERNET_ADDR0, (1 << 1));
+					if(phydev->phy_id == INTERNALPHY_ID){
+						val =0x4100b040;
+						WRITE_CBUS_REG(P_PREG_ETHERNET_ADDR0, val);
+					}
 					break;
 				default:
 					printk("%s: Speed (%d) is not 10"
@@ -981,13 +998,13 @@ static void aml_adjust_link(struct net_device *dev)
 
 	}
 
-	if (new_state) 
+	if (new_state)
 		phy_print_status(phydev);
 
 	spin_unlock_irqrestore(&priv->lock, flags);
 
 #ifdef LOOP_BACK_TEST
-#ifdef PHY_LOOPBACK_TEST 
+#ifdef PHY_LOOPBACK_TEST
 	mdio_write(priv->mii, priv->phy_addr, MII_BMCR, BMCR_LOOPBACK | BMCR_SPEED100 | BMCR_FULLDPLX);
 #endif
 	start_test(priv->dev);
@@ -1017,8 +1034,8 @@ static int aml_phy_init(struct net_device *dev)
         snprintf(phy_id, MII_BUS_ID_SIZE + 3, PHY_ID_FMT, bus_id,
                  priv->phy_addr);
         printk("aml_phy_init:  trying to attach to %s\n", phy_id);
-	if(priv->phydev && savepowermode)
-		 priv->phydev->drv->resume(priv->phydev);
+        if(priv->phydev && savepowermode)
+            priv->phydev->drv->resume(priv->phydev);
         phydev = phy_connect(dev, phy_id, &aml_adjust_link, priv->phy_interface);
 
         if (IS_ERR(phydev)) {
@@ -1049,11 +1066,11 @@ static int aml_phy_init(struct net_device *dev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  ethernet_reset 
+ * @brief  ethernet_reset
  *
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int ethernet_reset(struct net_device *dev)
@@ -1088,11 +1105,11 @@ out_err:
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  netdev_open 
+ * @brief  netdev_open
  *
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int netdev_open(struct net_device *dev)
@@ -1139,11 +1156,11 @@ out_err:
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  netdev_close 
+ * @brief  netdev_close
  *
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int netdev_close(struct net_device *dev)
@@ -1155,8 +1172,9 @@ static int netdev_close(struct net_device *dev)
 		return 0;
 	}
 
-	if (np->phydev && savepowermode) 
+	if (np->phydev && savepowermode) {
 		np->phydev->drv->suspend(np->phydev);
+	}
 	if (np->phydev) {
 		phy_stop(np->phydev);
 		phy_disconnect(np->phydev);
@@ -1184,17 +1202,21 @@ static int netdev_close(struct net_device *dev)
 	if (g_debug > 0) {
 		printk(KERN_DEBUG "%s: closed\n", dev->name);
 	}
+	np->refcnt--;
+	if(np->refcnt == 0){
+//		switch_mod_gate_by_name("ethernet",0);
+	}
 	return 0;
 }
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  start_tx 
+ * @brief  start_tx
  *
  * @param  skb
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int start_tx(struct sk_buff *skb, struct net_device *dev)
@@ -1262,7 +1284,7 @@ static int start_tx(struct sk_buff *skb, struct net_device *dev)
 		//ETH_DMA_1_Tr_Poll_Demand
 		writel(1,(void*)(np->base_addr + ETH_DMA_1_Tr_Poll_Demand));
 	}
-	writel(np->irq_mask, (void*)(np->base_addr + ETH_DMA_7_Interrupt_Enable));	
+	writel(np->irq_mask, (void*)(np->base_addr + ETH_DMA_7_Interrupt_Enable));
 	spin_unlock_irqrestore(&np->lock, flags);
 	tasklet_enable(&np->rx_tasklet);
 	return NETDEV_TX_OK;
@@ -1279,7 +1301,7 @@ err:
 #ifdef LOOP_BACK_TEST
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  test_loop_back 
+ * @brief  test_loop_back
  *
  * @param  dev
  */
@@ -1338,7 +1360,7 @@ static void force_speed100_duplex_set(struct am_net_private *np)
 }
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  start_test 
+ * @brief  start_test
  *
  * @param  dev
  */
@@ -1367,7 +1389,7 @@ static struct net_device_stats *get_stats(struct net_device *dev) {
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  tx_timeout 
+ * @brief  tx_timeout
  *
  * @param  dev
  */
@@ -1394,7 +1416,7 @@ static void tx_timeout(struct net_device *dev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  write_mac_addr 
+ * @brief  write_mac_addr
  *
  * @param  dev
  * @param  macaddr
@@ -1405,7 +1427,7 @@ static void tx_timeout(struct net_device *dev)
 	int ret;
 	int use_nand_mac=0;
 	u8 mac[ETH_ALEN];
-	
+
 	extenal_api_key_set_version("nand3");
 	ret = get_aml_key_kernel("mac_wifi", print_buff, 0);
 	printk("ret = %d\nprint_buff=%s\n", ret, print_buff);
@@ -1441,11 +1463,11 @@ static void write_mac_addr(struct net_device *dev, char *macaddr)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  chartonum 
+ * @brief  chartonum
  *
  * @param  c
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static unsigned char inline chartonum(char c)
@@ -1465,7 +1487,7 @@ static unsigned char inline chartonum(char c)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  config_mac_addr 
+ * @brief  config_mac_addr
  *
  * @param  dev
  * @param  mac
@@ -1473,21 +1495,21 @@ static unsigned char inline chartonum(char c)
 /* --------------------------------------------------------------------------*/
 static void config_mac_addr(struct net_device *dev, void *mac)
 {
-	if(g_mac_addr_setup) 
+	if(g_mac_addr_setup)
 		memcpy(dev->dev_addr, mac, 6);
 	else
-		random_ether_addr(dev->dev_addr);	
+		random_ether_addr(dev->dev_addr);
 
 	write_mac_addr(dev, dev->dev_addr);
 }
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  mac_addr_set 
+ * @brief  mac_addr_set
  *
  * @param  line
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int __init mac_addr_set(char *line)
@@ -1511,11 +1533,11 @@ __setup("mac=", mac_addr_set);
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  phy_mc_hash 
+ * @brief  phy_mc_hash
  *
  * @param  addr
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static inline int phy_mc_hash(__u8 *addr)
@@ -1525,7 +1547,7 @@ static inline int phy_mc_hash(__u8 *addr)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  set_multicast_list 
+ * @brief  set_multicast_list
  *
  * @param  dev
  */
@@ -1618,11 +1640,11 @@ static const struct net_device_ops am_netdev_ops = {
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  setup_net_device 
+ * @brief  setup_net_device
  *
  * @param  dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int setup_net_device(struct net_device *dev)
@@ -1654,11 +1676,11 @@ static int setup_net_device(struct net_device *dev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  probe_init 
+ * @brief  probe_init
  *
  * @param  ndev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int probe_init(struct net_device *ndev)
@@ -1700,7 +1722,7 @@ static int probe_init(struct net_device *ndev)
 	return 0;
 
 out_unregister:
-	unregister_netdev(ndev);	
+	unregister_netdev(ndev);
 error0:
 	return res;
 }
@@ -1708,9 +1730,46 @@ error0:
 /*
  * Ethernet debug
  */
+
+static void initTSTMODE(void)
+{
+	struct am_net_private *np = netdev_priv(my_ndev);
+	mdio_write(np->mii, np->phy_addr, 20, 0x0400);
+	mdio_write(np->mii, np->phy_addr, 20, 0x0000);
+	mdio_write(np->mii, np->phy_addr, 20, 0x0400);
+
+}
+
+static void closeTSTMODE(void)
+{
+	struct am_net_private *np = netdev_priv(my_ndev);
+	mdio_write(np->mii, np->phy_addr, 20, 0x0000);
+}
+
+static void tstcntl_dump_phyreg(void)
+{
+	int rd_addr = 0;
+	int rd_data = 0;
+	int rd_data_hi =0;
+	struct am_net_private *np = netdev_priv(my_ndev);
+
+	if ((np == NULL) || (np->dev == NULL))
+		return;
+
+	printk("========== ETH TST PHY regs ==========\n");
+	for (rd_addr = 0; rd_addr < 32; rd_addr++) {
+		mdio_write(np->mii, np->phy_addr,20,((1 << 15) | (1 << 10) | ((rd_addr & 0x1f) << 5)));
+		rd_data = mdio_read(np->mii, np->phy_addr, 21);
+		rd_data_hi = mdio_read(np->mii, np->phy_addr, 22);
+		rd_data = ((rd_data_hi & 0xffff) << 16) | rd_data;
+		printk("tstcntl phy [reg_%d] 0x%x\n", rd_addr, rd_data);
+	}
+}
+
+
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_dump_phyreg 
+ * @brief  am_net_dump_phyreg
  */
 /* --------------------------------------------------------------------------*/
 static void am_net_dump_phyreg(void)
@@ -1731,12 +1790,12 @@ static void am_net_dump_phyreg(void)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_read_phyreg 
+ * @brief  am_net_read_phyreg
  *
  * @param  argc
  * @param  argv
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int am_net_read_phyreg(int argc, char **argv)
@@ -1765,12 +1824,12 @@ static int am_net_read_phyreg(int argc, char **argv)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_write_phyreg 
+ * @brief  am_net_write_phyreg
  *
  * @param  argc
  * @param  argv
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int am_net_write_phyreg(int argc, char **argv)
@@ -1799,6 +1858,72 @@ static int am_net_write_phyreg(int argc, char **argv)
 	return 0;
 }
 
+
+static int readTSTCNTLRegister( int argc, char **argv){
+	int rd_data =0;
+	int rd_data_hi = 0;
+	int rd_addr;
+	struct am_net_private *np = netdev_priv(my_ndev);
+
+	if ((np == NULL) || (np->dev == NULL))
+		return -1;
+
+	if (argc < 2 || (argv == NULL) || (argv[0] == NULL) || (argv[1] == NULL)) {
+		printk("Invalid syntax\n");
+		return -1;
+	}
+	rd_addr = simple_strtol(argv[1], NULL, 16);
+	if (rd_addr >= 0 && rd_addr <= 31) {
+		mdio_write(np->mii, np->phy_addr,20,((1 << 15) | (1 << 10) | ((rd_addr & 0x1f) << 5)));
+		rd_data = mdio_read(np->mii, np->phy_addr, 21);
+		rd_data_hi = mdio_read(np->mii, np->phy_addr, 22);
+		rd_data = ((rd_data_hi & 0xffff) << 16) | rd_data;
+		printk("read tstcntl phy [reg_%d] 0x%x\n", rd_addr, rd_data);
+	} else {
+		printk("Invalid parameter\n");
+	}
+	return rd_data;
+}
+int returnwriteval(int rd_addr)
+{
+	int rd_data =0;
+	int rd_data_hi = 0;
+	struct am_net_private *np = netdev_priv(my_ndev);
+	mdio_write(np->mii, np->phy_addr,20,((1 << 15) | (1 << 10) | ((rd_addr & 0x1f) << 5)));
+	rd_data = mdio_read(np->mii, np->phy_addr, 21);
+	rd_data_hi = mdio_read(np->mii, np->phy_addr, 22);
+	rd_data = ((rd_data_hi & 0xffff) << 16) | rd_data;
+	return rd_data;
+}
+
+int writeTSTCNTLRegister( int argc, char **argv) {
+	int wr_addr = 0;
+	int wr_data = 0;
+	struct am_net_private *np = netdev_priv(my_ndev);
+	if ((np == NULL) || (np->dev == NULL))
+		return -1;
+
+	if (argc < 3 || (argv == NULL) || (argv[0] == NULL)
+			|| (argv[1] == NULL) || (argv[2] == NULL)) {
+		printk("Invalid syntax\n");
+		return -1;
+	}
+	wr_addr = simple_strtol(argv[1], NULL, 16);
+	wr_data = simple_strtol(argv[2], NULL, 16);
+	if (wr_addr >=0 && wr_addr <=31) {
+		mdio_write(np->mii, np->phy_addr, 23, (wr_data & 0xffff));
+		mdio_write(np->mii, np->phy_addr, 20, ((1 << 14) | (1 << 10) | ((wr_addr << 0) & 0x1f)));
+		printk("write phy tstcntl [reg_%d] 0x%x, 0x%x\n", wr_addr, wr_data, returnwriteval( wr_addr));
+	} else {
+		printk("Invalid parameter\n");
+	}
+
+	return 0;
+}
+
+
+
+
 static const char *g_phyreg_help = {
 	"Usage:\n"
 	"    echo d > phyreg;            //dump ethernet phy reg\n"
@@ -1808,13 +1933,13 @@ static const char *g_phyreg_help = {
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_phyreg_help 
+ * @brief  eth_phyreg_help
  *
  * @param  class
  * @param  attr
  * @param  buf
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_phyreg_help(struct class *class, struct class_attribute *attr, char *buf)
@@ -1822,16 +1947,59 @@ static ssize_t eth_phyreg_help(struct class *class, struct class_attribute *attr
 	return sprintf(buf, "%s\n", g_phyreg_help);
 }
 
+unsigned char adc_data[32*32];
+unsigned char adc_freq[64];
+
+static void adc_show(void)
+{
+	int rd_data =0;
+	int rd_data_hi = 0;
+	int i,j;
+	struct am_net_private *np = netdev_priv(my_ndev);
+	initTSTMODE();
+	for (i=0;i<32*32;i++){
+		mdio_write(np->mii, np->phy_addr,20,((1 << 15) | (1 << 10) | ((16 & 0x1f) << 5)));
+		rd_data = mdio_read(np->mii, np->phy_addr, 21);
+		rd_data_hi = mdio_read(np->mii, np->phy_addr, 22);
+		adc_data[i] = rd_data & 0x3f;
+	}
+	closeTSTMODE();
+	for (i=0;i<32;i++){
+		for (j=0;j<32;j++){
+			printk("%02x ", adc_data[i*32+j]);
+		}
+		printk("\n");
+	}
+	for (i=0;i<64;i++)
+		adc_freq[i]=0;
+	for (i=0;i<32;i++){
+		for (j=0;j<32;j++){
+			if (adc_data[i*32+j]>31) adc_freq[adc_data[i*32+j]-32]++;
+			else adc_freq[32+adc_data[i*32+j]]++;
+			printk("%02x ", adc_data[i*32+j]);
+		}
+		printk("\n");
+	}
+	for (i=0;i<64;i++){
+		printk("%d:\t",i-32);
+		if (adc_freq[i]>128) adc_freq[i]=128;
+		for (j=0;j<adc_freq[i];j++)
+			printk("#");
+		printk("\n");
+	}
+}
+
+
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_phyreg_func 
+ * @brief  eth_phyreg_func
  *
  * @param  class
  * @param  attr
  * @param  buf
  * @param  count
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_phyreg_func(struct class *class, struct class_attribute *attr,
@@ -1867,6 +2035,25 @@ static ssize_t eth_phyreg_func(struct class *class, struct class_attribute *attr
 	case 'D':
 		am_net_dump_phyreg();
 		break;
+		case 't':
+		case 'T':
+			initTSTMODE();
+			if((argv[0][1] == 'w')||(argv[0][1] == 'W'))
+			{
+				writeTSTCNTLRegister(argc, argv);
+			}
+			if((argv[0][1] == 'r')||(argv[0][1] == 'R'))
+			{
+				readTSTCNTLRegister(argc, argv);
+			}
+			if((argv[0][1] == 'd')||(argv[0][1] == 'D'))
+				tstcntl_dump_phyreg();
+			closeTSTMODE();
+			break;
+		case 'c':
+		case 'C':
+			adc_show();
+			break;
 	default:
 		goto end;
 	}
@@ -1880,7 +2067,7 @@ end:
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_dump_macreg 
+ * @brief  am_net_dump_macreg
  */
 /* --------------------------------------------------------------------------*/
 static void am_net_dump_macreg(void)
@@ -1907,12 +2094,12 @@ static void am_net_dump_macreg(void)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_read_macreg 
+ * @brief  am_net_read_macreg
  *
  * @param  argc
  * @param  argv
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int am_net_read_macreg(int argc, char **argv)
@@ -1941,12 +2128,12 @@ static int am_net_read_macreg(int argc, char **argv)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_write_macreg 
+ * @brief  am_net_write_macreg
  *
  * @param  argc
  * @param  argv
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int am_net_write_macreg(int argc, char **argv)
@@ -1984,13 +2171,13 @@ static const char *g_macreg_help = {
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_macreg_help 
+ * @brief  eth_macreg_help
  *
  * @param  class
  * @param  attr
  * @param  buf
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_macreg_help(struct class *class, struct class_attribute *attr, char *buf)
@@ -2000,14 +2187,14 @@ static ssize_t eth_macreg_help(struct class *class, struct class_attribute *attr
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_macreg_func 
+ * @brief  eth_macreg_func
  *
  * @param  class
  * @param  attr
  * @param  buf
  * @param  count
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_macreg_func(struct class *class, struct class_attribute *attr,
@@ -2064,13 +2251,13 @@ static const char *g_mdcclk_help = {
 };
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_mdcclk_show 
+ * @brief  eth_mdcclk_show
  *
  * @param  class
  * @param  attr
  * @param  buf
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_mdcclk_show(struct class *class, struct class_attribute *attr, char *buf)
@@ -2083,14 +2270,14 @@ static ssize_t eth_mdcclk_show(struct class *class, struct class_attribute *attr
 }
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_mdcclk_store 
+ * @brief  eth_mdcclk_store
  *
  * @param  class
  * @param  attr
  * @param  buf
  * @param  count
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_mdcclk_store(struct class *class, struct class_attribute *attr, const char *buf, size_t count)
@@ -2112,7 +2299,7 @@ static ssize_t eth_mdcclk_store(struct class *class, struct class_attribute *att
 		case 2:
 		MDCCLK = ETH_MAC_4_GMII_Addr_CR_100_150;
 		break;
-		case 3: 
+		case 3:
 		MDCCLK = ETH_MAC_4_GMII_Addr_CR_20_35;
 		break;
 		case 4:
@@ -2123,9 +2310,9 @@ static ssize_t eth_mdcclk_store(struct class *class, struct class_attribute *att
 		break;
 		case 6:
 		MDCCLK = ETH_MAC_4_GMII_Addr_CR_250_300;
-		break; 
+		break;
 		default:
-		break;	
+		break;
 	}
 
 	return count;
@@ -2143,13 +2330,13 @@ static const char *g_debug_help = {
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_debug_show 
+ * @brief  eth_debug_show
  *
  * @param  class
  * @param  attr
  * @param  buf
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_debug_show(struct class *class, struct class_attribute *attr, char *buf)
@@ -2163,14 +2350,14 @@ static ssize_t eth_debug_show(struct class *class, struct class_attribute *attr,
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_debug_store 
+ * @brief  eth_debug_store
  *
  * @param  class
  * @param  attr
  * @param  buf
  * @param  count
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_debug_store(struct class *class, struct class_attribute *attr, const char *buf, size_t count)
@@ -2190,13 +2377,13 @@ static ssize_t eth_debug_store(struct class *class, struct class_attribute *attr
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_count_show 
+ * @brief  eth_count_show
  *
  * @param  class
  * @param  attr
  * @param  buf
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_count_show(struct class *class, struct class_attribute *attr, char *buf)
@@ -2209,14 +2396,14 @@ static ssize_t eth_count_show(struct class *class, struct class_attribute *attr,
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  eth_count_store 
+ * @brief  eth_count_store
  *
  * @param  class
  * @param  attr
  * @param  buf
  * @param  count
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static ssize_t eth_count_store(struct class *class, struct class_attribute *attr, const char *buf, size_t count)
@@ -2301,9 +2488,9 @@ static CLASS_ATTR(linkspeed, S_IWUSR | S_IRUGO, eth_linkspeed_show, NULL);
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_eth_class_init 
+ * @brief  am_eth_class_init
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int __init am_eth_class_init(void)
@@ -2322,33 +2509,42 @@ static int __init am_eth_class_init(void)
 
 	return ret;
 }
-
+#define OWNER_NAME "meson-eth"
+void hardware_reset_phy(void){
+	if(reset_pin_enable){
+		amlogic_gpio_direction_output(reset_pin_num, 0, OWNER_NAME);
+		mdelay(reset_delay);
+		amlogic_gpio_direction_output(reset_pin_num, 1, OWNER_NAME);
+	}
+}
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static int ethernet_early_suspend(struct early_suspend *dev)
 {
 	printk("ethernet_early_suspend!\n");
 	netdev_close(my_ndev);
+	switch_mod_gate_by_name("ethernet",0);
 	return 0;
 }
 static int ethernet_late_resume(struct early_suspend *dev)
 {
 	int res = 0;
 	printk("ethernet_late_resume()\n");
+	hardware_reset_phy();
 	res = netdev_open(my_ndev);
 	if (res != 0) {
 		printk("nono, it can not be true!\n");
 	}
-	
+
 	return 0;
 }
 #endif
 /* --------------------------------------------------------------------------*/
 /**
- * @brief ethernet_probe 
+ * @brief ethernet_probe
  *
  * @param pdev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int ethernet_probe(struct platform_device *pdev)
@@ -2375,6 +2571,21 @@ static int ethernet_probe(struct platform_device *pdev)
 	if (ret) {
 		printk("Please config savepowermode.\n");
 	}
+	ret = of_property_read_u32(pdev->dev.of_node,"reset_pin_enable",&reset_pin_enable);
+	if (ret) {
+		printk("Please config reset_pin_enable.\n");
+	}
+	ret = of_property_read_u32(pdev->dev.of_node,"reset_delay",&reset_delay);
+	if (ret) {
+		printk("Please config reset_delay.\n");
+	}
+	ret = of_property_read_string(pdev->dev.of_node,"reset_pin",&reset_pin);
+	if (ret) {
+		printk("Please config reset_pin.\n");
+	}
+	if(reset_pin_enable)
+		reset_pin_num = amlogic_gpio_name_map_num(reset_pin);
+
 #endif
 	printk(DRV_NAME "init(dbg[%p]=%d)\n", (&g_debug), g_debug);
 	switch_mod_gate_by_name("ethernet",1);
@@ -2390,9 +2601,9 @@ static int ethernet_probe(struct platform_device *pdev)
        register_early_suspend(&early_suspend);
 #endif
 	res = probe_init(my_ndev);
-	if (res != 0) 
+	if (res != 0)
 		free_netdev(my_ndev);
-	else 
+	else
 		res = am_eth_class_init();
 
 	eth_pdata = (struct aml_eth_platdata *)pdev->dev.platform_data;
@@ -2400,21 +2611,22 @@ static int ethernet_probe(struct platform_device *pdev)
 	if(np->phydev && savepowermode)
 		np->phydev->drv->suspend(np->phydev);
 	switch_mod_gate_by_name("ethernet",0);
-	if (!eth_pdata) {
-		printk("\nethernet pm ops resource undefined.\n");
-		return -EFAULT;
-	}
+
+	//if (!eth_pdata) {
+	//	printk("\nethernet pm ops resource undefined.\n");
+	//	return -EFAULT;
+	//}
 
 	return 0;
 }
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief ethernet_remove 
+ * @brief ethernet_remove
  *
  * @param pdev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int ethernet_remove(struct platform_device *pdev)
@@ -2429,40 +2641,42 @@ static int ethernet_remove(struct platform_device *pdev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief ethernet_suspend 
+ * @brief ethernet_suspend
  *
  * @param dev
  * @param event
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int ethernet_suspend(struct platform_device *dev, pm_message_t event)
 {
 	printk("ethernet_suspend!\n");
-	netdev_close(my_ndev);	
+	netdev_close(my_ndev);
+	switch_mod_gate_by_name("ethernet",0);
 	return 0;
 }
 
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief ethernet_resume 
+ * @brief ethernet_resume
  *
  * @param dev
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int ethernet_resume(struct platform_device *dev)
 {
 	int res = 0;
 	printk("ethernet_resume()\n");
+	hardware_reset_phy();
 	res = netdev_open(my_ndev);
 	if (res != 0) {
 		printk("nono, it can not be true!\n");
 	}
-	
+
 	return 0;
 }
 #ifdef CONFIG_OF
@@ -2477,8 +2691,8 @@ static const struct of_device_id eth_dt_match[]={
 
 static struct platform_driver ethernet_driver = {
 	.probe   = ethernet_probe,
-	.remove  = ethernet_remove, 
-#ifdef  CONFIG_PM      
+	.remove  = ethernet_remove,
+#ifdef  CONFIG_PM
 	.suspend = ethernet_suspend,
 	.resume  = ethernet_resume,
 #endif
@@ -2489,13 +2703,13 @@ static struct platform_driver ethernet_driver = {
 };
 
 
- 
+
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_init 
+ * @brief  am_net_init
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static int __init am_net_init(void)
@@ -2512,7 +2726,7 @@ static int __init am_net_init(void)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_free 
+ * @brief  am_net_free
  *
  * @param  ndev
  */
@@ -2525,15 +2739,15 @@ static void am_net_free(struct net_device *ndev)
 
 /* --------------------------------------------------------------------------*/
 /**
- * @brief  am_net_exit 
+ * @brief  am_net_exit
  *
- * @return 
+ * @return
  */
 /* --------------------------------------------------------------------------*/
 static void __exit am_net_exit(void)
 {
 	printk(DRV_NAME "exit\n");
-	
+
 	am_net_free(my_ndev);
 	free_netdev(my_ndev);
 	aml_mdio_unregister(my_ndev);
diff --git a/drivers/amlogic/ethernet/am_net8218.h b/drivers/amlogic/ethernet/am_net8218.h
index 7708bfa2ef0a..06acdab948ad 100755
--- a/drivers/amlogic/ethernet/am_net8218.h
+++ b/drivers/amlogic/ethernet/am_net8218.h
@@ -68,7 +68,7 @@
 #define TX_BUF_UN_EN 1<<2
 #define RX_INTR_EN  1<<6
 #define EARLY_RX_INTR_EN 1<<14
-
+#define INTERNALPHY_ID 79898963
 enum mii_reg_bits {
 	MDIO_ShiftClk = 0x10000, MDIO_DataIn = 0x80000, MDIO_DataOut = 0x20000,
 	MDIO_EnbOutput = 0x40000, MDIO_EnbIn = 0x00000,
diff --git a/drivers/amlogic/ethernet/aml.dtd b/drivers/amlogic/ethernet/aml.dtd
index 8ae2122fb737..cf0e25621fcb 100755
--- a/drivers/amlogic/ethernet/aml.dtd
+++ b/drivers/amlogic/ethernet/aml.dtd
@@ -8,5 +8,8 @@
 		ethbaseaddr = <0xfe0c0000>;
 		interruptnum = <40>;
 		savepowermode = <0>;
+		reset_pin_enable = <0>;
+		reset_pin = "GPIOY_15";
+		reset_delay = <100>;
 	};
 #endif
diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
old mode 100644
new mode 100755
index 1e11f2bfd9ce..e9e2812419f2
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -28,7 +28,12 @@ config MARVELL_PHY
 	tristate "Drivers for Marvell PHYs"
 	---help---
 	  Currently has a driver for the 88E1011S
-	
+
+config AMLOGIC_PHY
+	tristate "Drivers for AMLOGIC PHY"
+	---help---
+	  Currently has a driver for the AMLOGIC INTERNAL PHY
+
 config DAVICOM_PHY
 	tristate "Drivers for Davicom PHYs"
 	---help---
diff --git a/drivers/net/phy/Makefile b/drivers/net/phy/Makefile
old mode 100644
new mode 100755
index 9645e389a58d..ed4cd1d32e11
--- a/drivers/net/phy/Makefile
+++ b/drivers/net/phy/Makefile
@@ -9,6 +9,7 @@ obj-$(CONFIG_CICADA_PHY)	+= cicada.o
 obj-$(CONFIG_LXT_PHY)		+= lxt.o
 obj-$(CONFIG_QSEMI_PHY)		+= qsemi.o
 obj-$(CONFIG_SMSC_PHY)		+= smsc.o
+obj-$(CONFIG_AMLOGIC_PHY)       += amlogic.o
 obj-$(CONFIG_VITESSE_PHY)	+= vitesse.o
 obj-$(CONFIG_BROADCOM_PHY)	+= broadcom.o
 obj-$(CONFIG_BCM63XX_PHY)	+= bcm63xx.o
diff --git a/drivers/net/phy/amlogic.c b/drivers/net/phy/amlogic.c
new file mode 100755
index 000000000000..04e3ee6def74
--- /dev/null
+++ b/drivers/net/phy/amlogic.c
@@ -0,0 +1,315 @@
+/*
+ * drivers/net/phy/amlogic.c
+ *
+ * Driver for AMLOGIC PHY
+ *
+ * Author: Baoqi wang
+ *
+ *
+ * This program is free software; you can redistribute  it and/or modify it
+ * under  the terms of  the GNU General  Public License as published by the
+ * Free Software Foundation;  either version 2 of the  License, or (at your
+ * option) any later version.
+ *
+ * Support added for Amlogic Internal Phy by baoqi.wang@amlogic.com
+ *
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/mii.h>
+#include <linux/ethtool.h>
+#include <linux/phy.h>
+#include <linux/netdevice.h>
+
+#define  SMI_ADDR_TSTCNTL     20
+#define  SMI_ADDR_TSTREAD1    21
+#define  SMI_ADDR_TSTREAD2    22
+#define  SMI_ADDR_TSTWRITE    23
+
+#define  WR_ADDR_A1CFG        0x12
+#define  WR_ADDR_A2CFG        0x13
+#define  WR_ADDR_A3CFG        0x14
+#define  WR_ADDR_A4CFG        0x15
+#define  WR_ADDR_A5CFG        0x16
+#define  WR_ADDR_A6CFG        0x17
+#define  WR_ADDR_A7CFG        0x18
+#define  WR_ADDR_A8CFG        0x1a
+#define  WR_ADDR_A9CFG        0x1b
+#define  WR_ADDR_A10CFG       0x1c
+#define  WR_ADDR_A11CFG       0x1d
+
+#define  RD_ADDR_A3CFG        (0x14 << 5)
+#define  RD_ADDR_A4CFG        (0x15 << 5)
+#define  RD_ADDR_A5CFG        (0x16 << 5)
+#define  RD_ADDR_A6CFG        (0x17 << 5)
+
+#define  TSTCNTL_RD           ((1 << 15) | (1 << 10))
+#define  TSTCNTL_WR           ((1 << 14) | (1 << 10))
+
+#define MII_INTERNAL_ISF 29 /* Interrupt Source Flags */
+#define MII_INTERNAL_IM  30 /* Interrupt Mask */
+#define MII_INTERNAL_CTRL_STATUS 17 /* Mode/Status Register */
+#define MII_INTERNAL_SPECIAL_MODES 18 /* Special Modes Register */
+
+#define MII_INTERNAL_ISF_INT1 (1<<1) /* Auto-Negotiation Page Received */
+#define MII_INTERNAL_ISF_INT2 (1<<2) /* Parallel Detection Fault */
+#define MII_INTERNAL_ISF_INT3 (1<<3) /* Auto-Negotiation LP Ack */
+#define MII_INTERNAL_ISF_INT4 (1<<4) /* Link Down */
+#define MII_INTERNAL_ISF_INT5 (1<<5) /* Remote Fault Detected */
+#define MII_INTERNAL_ISF_INT6 (1<<6) /* Auto-Negotiation complete */
+#define MII_INTERNAL_ISF_INT7 (1<<7) /* ENERGYON */
+
+#define MII_INTERNAL_ISF_INT_ALL (0x0e)
+
+#define MII_INTERNAL_ISF_INT_PHYLIB_EVENTS \
+	(MII_INTERNAL_ISF_INT6 | MII_INTERNAL_ISF_INT4 | \
+	 MII_INTERNAL_ISF_INT7)
+
+#define MII_INTERNAL_EDPWRDOWN (1 << 13) /* EDPWRDOWN */
+#define MII_INTERNAL_ENERGYON  (1 << 1)  /* ENERGYON */
+
+#define MII_INTERNAL_MODE_MASK      0xE0
+#define MII_INTERNAL_MODE_POWERDOWN 0xC0 /* Power Down mode */
+#define MII_INTERNAL_MODE_ALL       0xE0 /* All capable mode */
+static void initTSTMODE(struct phy_device *phydev)
+{
+        phy_write(phydev, SMI_ADDR_TSTCNTL, 0x0400);
+        phy_write(phydev, SMI_ADDR_TSTCNTL, 0x0000);
+        phy_write(phydev, SMI_ADDR_TSTCNTL, 0x0400);
+
+}
+
+static void closeTSTMODE(struct phy_device *phydev)
+{
+	phy_write(phydev, SMI_ADDR_TSTCNTL, 0x0000);
+
+}
+
+
+static void init_internal_phy(struct phy_device *phydev)
+{
+        initTSTMODE(phydev);
+        // write tstcntl addr val
+        phy_write(phydev,SMI_ADDR_TSTWRITE,0x1354);//write val
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR);//write addr 0
+        phy_write(phydev,SMI_ADDR_TSTWRITE,0x3e01);//write val
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A2CFG);//write addr 0x13
+        phy_write(phydev,SMI_ADDR_TSTWRITE,0x8900);//write val
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A3CFG);//write addr 0x14
+        phy_write(phydev,SMI_ADDR_TSTWRITE,0x3412);//write val
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A4CFG);//write addr 0x15
+        phy_write(phydev,SMI_ADDR_TSTWRITE,0x2636);//write val
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A5CFG);//write addr 0x16
+        phy_write(phydev,SMI_ADDR_TSTWRITE,3);//write val
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A7CFG);//write addr 0x18
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x108);
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A9CFG);//write addr 0x1b
+        phy_write(phydev,SMI_ADDR_TSTWRITE,0xda00);//write val
+        phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A11CFG);//write addr 0x1d
+        closeTSTMODE(phydev);
+}
+
+
+void init_internal_phy_10B(struct phy_device *phydev)
+{
+
+	initTSTMODE(phydev);
+	// write tstcntl addr val
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x0000);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR);//write addr 0
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x3e01);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A2CFG);//write addr 0x13
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x8900);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A3CFG);//write addr 0x14
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x3412);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A4CFG);//write addr 0x15
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x2236);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A5CFG);//write addr 0x16
+	phy_write(phydev,SMI_ADDR_TSTWRITE,3);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A7CFG);//write addr 0x18
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x108);//write val by chandle (2)
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A9CFG);//write addr 0x1b
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0xda06);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A11CFG);//write addr 0x1d
+	closeTSTMODE(phydev);
+}
+
+void init_internal_phy_100B(struct phy_device *phydev)
+{
+
+	initTSTMODE(phydev);
+	// write tstcntl addr val
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x9354);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|0x00);//write addr 0x00
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x3e00);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A2CFG);//write addr 0x13
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x8900);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A3CFG);//write addr 0x14
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x3412);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A4CFG);//write addr 0x15
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0xa406);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A5CFG);//write addr 0x16
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x0003);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A7CFG);//write addr 0x18
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0x00a6);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A9CFG);//write addr 0x1b
+	phy_write(phydev,SMI_ADDR_TSTWRITE,0xda06);//write val
+	phy_write(phydev,SMI_ADDR_TSTCNTL,TSTCNTL_WR|WR_ADDR_A11CFG);//write addr 0x1d
+	closeTSTMODE(phydev);
+}
+
+static int amlogic_phy_config_intr(struct phy_device *phydev)
+{
+	int rc = phy_write (phydev, MII_INTERNAL_IM,
+			((PHY_INTERRUPT_ENABLED == phydev->interrupts)
+			? MII_INTERNAL_ISF_INT_PHYLIB_EVENTS
+			: 0));
+
+	return rc < 0 ? rc : 0;
+}
+
+static int amlogic_phy_ack_interrupt(struct phy_device *phydev)
+{
+	int rc = phy_read (phydev, MII_INTERNAL_ISF);
+
+	return rc < 0 ? rc : 0;
+}
+
+static int amlogic_phy_config_init(struct phy_device *phydev)
+{
+	int rc = phy_read(phydev, MII_INTERNAL_SPECIAL_MODES);
+	if (rc < 0)
+		return rc;
+	init_internal_phy(phydev);
+	/* If the SMSC PHY is in power down mode, then set it
+	 * in all capable mode before using it.
+	 */
+	if ((rc & MII_INTERNAL_MODE_MASK) == MII_INTERNAL_MODE_POWERDOWN) {
+		int timeout = 50000;
+
+		/* set "all capable" mode and reset the phy */
+		rc |= MII_INTERNAL_MODE_ALL;
+		phy_write(phydev, MII_INTERNAL_SPECIAL_MODES, rc);
+		phy_write(phydev, MII_BMCR, BMCR_RESET);
+
+		/* wait end of reset (max 500 ms) */
+		do {
+			udelay(10);
+			if (timeout-- == 0)
+				return -1;
+			rc = phy_read(phydev, MII_BMCR);
+		} while (rc & BMCR_RESET);
+	}
+
+	rc = phy_read(phydev, MII_INTERNAL_CTRL_STATUS);
+	if (rc < 0)
+		return rc;
+
+	/* Enable energy detect mode for this SMSC Transceivers */
+	rc = phy_write(phydev, MII_INTERNAL_CTRL_STATUS,
+		       rc | MII_INTERNAL_EDPWRDOWN);
+	if (rc < 0)
+		return rc;
+
+	return amlogic_phy_ack_interrupt (phydev);
+}
+
+/*
+ * This workaround will manually toggle the PHY on/off upon calls to read_status
+ * in order to generate link test pulses if the link is down.  If a link partner
+ * is present, it will respond to the pulses, which will cause the ENERGYON bit
+ * to be set and will cause the EDPD mode to be exited.
+ */
+static int internal_read_status(struct phy_device *phydev)
+{
+	int err = genphy_read_status(phydev);
+	if(phydev->speed == SPEED_10){
+		init_internal_phy_10B(phydev);
+	}
+	if(phydev->speed == SPEED_100){
+		init_internal_phy_100B(phydev);
+	}
+	if (!phydev->link) {
+		/* Disable EDPD to wake up PHY */
+		int rc = phy_read(phydev, MII_INTERNAL_CTRL_STATUS);
+		if (rc < 0)
+			return rc;
+
+		rc = phy_write(phydev, MII_INTERNAL_CTRL_STATUS,
+			       rc & ~MII_INTERNAL_EDPWRDOWN);
+		if (rc < 0)
+			return rc;
+
+		/* Sleep 64 ms to allow ~5 link test pulses to be sent */
+		msleep(64);
+
+		/* Re-enable EDPD */
+		rc = phy_read(phydev, MII_INTERNAL_CTRL_STATUS);
+		if (rc < 0)
+			return rc;
+
+		rc = phy_write(phydev, MII_INTERNAL_CTRL_STATUS,
+			       rc | MII_INTERNAL_EDPWRDOWN);
+		if (rc < 0)
+			return rc;
+	}
+
+	return err;
+}
+
+
+int amlogic_phy_config_aneg(struct phy_device *phydev){
+
+	genphy_config_aneg(phydev);
+}
+static struct phy_driver amlogic_phy_driver[] = {
+ {
+	.phy_id		= 0x79898963,
+	.phy_id_mask	= 0xffffffff,
+	.name		= "AMLOGIC internal phy",
+
+	.features	= (PHY_BASIC_FEATURES | SUPPORTED_Pause
+				| SUPPORTED_Asym_Pause),
+	.flags		= PHY_HAS_INTERRUPT | PHY_HAS_MAGICANEG,
+
+	/* basic functions */
+	.config_aneg	= &amlogic_phy_config_aneg,
+	.read_status	= &internal_read_status,
+	.config_init	= &amlogic_phy_config_init,
+
+	/* IRQ related */
+	.ack_interrupt	= &amlogic_phy_ack_interrupt,
+	.config_intr	= &amlogic_phy_config_intr,
+
+	.suspend	= genphy_suspend,
+	.resume		= genphy_resume,
+
+	.driver		= { .owner = THIS_MODULE, }
+} };
+
+static int __init amlogic_init(void)
+{
+	return phy_drivers_register(amlogic_phy_driver,
+		ARRAY_SIZE(amlogic_phy_driver));
+}
+
+static void __exit amlogic_exit(void)
+{
+	return phy_drivers_unregister(amlogic_phy_driver,
+		ARRAY_SIZE(amlogic_phy_driver));
+}
+
+MODULE_DESCRIPTION("Amlogic PHY driver");
+MODULE_AUTHOR("Baoqi wang");
+MODULE_LICENSE("GPL");
+
+module_init(amlogic_init);
+module_exit(amlogic_exit);
+
+static struct mdio_device_id __maybe_unused amlogic_tbl[] = {
+	{ 0x79898963, 0xffffffff },
+	{ }
+};
+
+MODULE_DEVICE_TABLE(mdio, amlogic_tbl);
-- 
2.19.0

