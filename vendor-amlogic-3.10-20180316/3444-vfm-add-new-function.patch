From 0695ee6225f6baeb018991cbfa46eeb68619a005 Mon Sep 17 00:00:00 2001
From: "bo.yang" <bo.yang@amlogic.com>
Date: Tue, 18 Feb 2014 17:14:21 +0800
Subject: [PATCH 3444/5965] vfm: add new function

add new function:
	vf_get_receiver_by_name()
	vf_notify_receiver_by_name()

these function are used in deinterlace module.

merged from amlogic-3.0-mxtv0921
by rain.zhang@amlogic.com
---
 drivers/amlogic/vfm/vframe_receiver.c | 47 ++++++++++++++++++++++++---
 1 file changed, 43 insertions(+), 4 deletions(-)

diff --git a/drivers/amlogic/vfm/vframe_receiver.c b/drivers/amlogic/vfm/vframe_receiver.c
index 95124346486a..ffe9593a107c 100755
--- a/drivers/amlogic/vfm/vframe_receiver.c
+++ b/drivers/amlogic/vfm/vframe_receiver.c
@@ -68,12 +68,35 @@ struct vframe_receiver_s * vf_get_receiver(const char *provider_name)
         }
         if(i == MAX_RECEIVER_NUM){
             r = NULL;
-        } 
+        }
     }
     return r;
 }
 EXPORT_SYMBOL(vf_get_receiver);
 
+struct vframe_provider_s * vf_get_receiver_by_name(const char *receiver_name)
+{
+    struct vframe_receiver_s *r = NULL;
+    int i;
+    if(receiver_name){
+        for(i=0; i<MAX_RECEIVER_NUM; i++){
+            r = receiver_table[i];
+            if(r){
+                if(vfm_debug_flag&2){
+                    printk("%s: r: %s\n", __func__, r->name);
+                }
+                if (!strcmp(r->name, receiver_name)) {
+                        break;
+                }
+            }
+        }
+        if(i == MAX_RECEIVER_NUM){
+            r = NULL;
+        }
+    }
+    return r;
+}
+
 int vf_notify_receiver(const char* provider_name, int event_type, void* data)
 {
     int ret = -1;
@@ -92,6 +115,22 @@ int vf_notify_receiver(const char* provider_name, int event_type, void* data)
 }
 EXPORT_SYMBOL(vf_notify_receiver);
 
+int vf_notify_receiver_by_name(const char* receiver_name, int event_type, void* data)
+{
+    int ret = -1;
+    vframe_receiver_t* receiver = NULL;
+
+    receiver = vf_get_receiver_by_name(receiver_name);
+    if(receiver){
+        if(receiver->ops && receiver->ops->event_cb){
+            ret = receiver->ops->event_cb(event_type, data, receiver->op_arg);
+        }
+    }
+    return ret;
+}
+EXPORT_SYMBOL(vf_notify_receiver_by_name);
+
+
 void vf_receiver_init(struct vframe_receiver_s *recv,
     const char *name, const struct vframe_receiver_op_s *ops, void* op_arg)
 {
@@ -112,7 +151,7 @@ int vf_reg_receiver(struct vframe_receiver_s *recv)
     if (!recv)
         return -1;
 
-    for(i=0; i<MAX_RECEIVER_NUM; i++){ 
+    for(i=0; i<MAX_RECEIVER_NUM; i++){
         r = receiver_table[i];
         if(r){
             if (!strcmp(r->name, recv->name)) {
@@ -122,7 +161,7 @@ int vf_reg_receiver(struct vframe_receiver_s *recv)
     }
     for(i=0; i<MAX_RECEIVER_NUM; i++){
         if(receiver_table[i] == NULL){
-           receiver_table[i] = recv; 
+           receiver_table[i] = recv;
            break;
         }
     }
@@ -136,7 +175,7 @@ void vf_unreg_receiver(struct vframe_receiver_s *recv)
     int i;
     if (!recv)
         return;
-    for(i=0; i<MAX_RECEIVER_NUM; i++){ 
+    for(i=0; i<MAX_RECEIVER_NUM; i++){
         r = receiver_table[i];
         if(r){
             if (!strcmp(r->name, recv->name)) {
-- 
2.19.0

