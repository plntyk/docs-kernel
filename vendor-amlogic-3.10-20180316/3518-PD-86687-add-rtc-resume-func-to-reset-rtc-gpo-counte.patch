From 2d7a575e413ee0da13558de34a3f748b99238158 Mon Sep 17 00:00:00 2001
From: xu xing <xing.xu@amlogic.com>
Date: Wed, 19 Feb 2014 14:29:28 +0800
Subject: [PATCH 3518/5965] PD 86687:add rtc resume func to reset rtc gpo
 counter addr reg. and clean previous added code in driver/rtc/interface.c

---
 drivers/amlogic/rtc/aml_rtc.c | 13 +++++++++++++
 drivers/rtc/interface.c       |  8 ++++----
 2 files changed, 17 insertions(+), 4 deletions(-)

diff --git a/drivers/amlogic/rtc/aml_rtc.c b/drivers/amlogic/rtc/aml_rtc.c
index f2f3908adefb..1fba79814533 100755
--- a/drivers/amlogic/rtc/aml_rtc.c
+++ b/drivers/amlogic/rtc/aml_rtc.c
@@ -132,6 +132,7 @@ struct aml_rtc_priv{
 };
 
 static void reset_gpo_work(struct work_struct *work);
+static int get_gpo_flag(void);
 
 static void delay_us(int us)
 {
@@ -631,6 +632,17 @@ static int aml_rtc_suspend(struct platform_device *pdev, pm_message_t state)
 #endif /* CONFIG_MESON_SUSPEND_TEST */
 	return 0;
 }
+int aml_rtc_resume(struct platform_device *pdev)
+{	
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6	
+		ser_access_write(RTC_GPO_COUNTER_ADDR,0x500000);
+#else		
+		ser_access_write(RTC_GPO_COUNTER_ADDR,0x100000);
+#endif						
+	
+	printk("resume reset gpo !\n");
+	return 0;
+}
 
 static char *rtc_reg[8]={
 	"RTC_COUNTER    ",
@@ -854,6 +866,7 @@ struct platform_driver aml_rtc_driver = {
 //	.remove = __devexit_p(aml_rtc_remove),
 	.remove = (aml_rtc_remove),
 	.suspend = aml_rtc_suspend,
+	.resume=aml_rtc_resume,
 	.shutdown = aml_rtc_shutdown,
 };
 
diff --git a/drivers/rtc/interface.c b/drivers/rtc/interface.c
index 9c45d61546f6..b1f7b62400d0 100755
--- a/drivers/rtc/interface.c
+++ b/drivers/rtc/interface.c
@@ -355,7 +355,7 @@ static int __rtc_set_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 
 	return err;
 }
-
+#if 0
 static int rtc_disable_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 {
 	int err = 0;
@@ -372,16 +372,16 @@ static int rtc_disable_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 	printk("exit %s\n", __FUNCTION__);
 	return err;
 }
-
+#endif
 int rtc_set_alarm(struct rtc_device *rtc, struct rtc_wkalrm *alarm)
 {
 	int err;
-
+#if 0
 	if(!alarm->enabled) {
 		err = rtc_disable_alarm(rtc, alarm);
 		return err;
 	}
-
+#endif
 	err = rtc_valid_tm(&alarm->time);
 	if (err != 0)
 		return err;
-- 
2.19.0

