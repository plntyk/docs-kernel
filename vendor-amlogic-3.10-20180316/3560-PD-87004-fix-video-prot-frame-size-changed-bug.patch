From 78920c46ed4c23db00a68480f1cabe332ef042be Mon Sep 17 00:00:00 2001
From: "shuai.cao" <shuai.cao@amlogic.com>
Date: Thu, 27 Feb 2014 12:38:00 +0800
Subject: [PATCH 3560/5965] PD# 87004:fix video prot frame size changed bug

---
 drivers/amlogic/amports/video.c            | 232 +++++++--------------
 drivers/amlogic/amports/video_prot.c       |  54 +++--
 include/linux/amlogic/amports/video_prot.h |   6 +-
 3 files changed, 118 insertions(+), 174 deletions(-)

diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index a8819d4dd622..187422751bf2 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -227,18 +227,16 @@ static int video_onoff_state = VIDEO_ENABLE_STATE_IDLE;
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define EnableVideoLayer()  \
     do { \
-         if (video_prot.power_on == 0) { \
-             video_prot.enable_layer = 1; \
-             video_prot.angle_changed |= 0x1; \
-             video_prot.power_on = 1; \
-             PROT_MEM_POWER_ON(); \
-         } \
-         if (!use_prot) { \
-             VD1_MEM_POWER_ON(); \
-             VIDEO_LAYER_ON(); \
-         } else {\
-             VD1_MEM_POWER_ON(); \
-         } \
+        if(get_vpu_mem_pd_vmod(VPU_VIU_VD1) == VPU_MEM_POWER_DOWN || \
+                get_vpu_mem_pd_vmod(VPU_PIC_ROT2) == VPU_MEM_POWER_DOWN || \
+                aml_read_reg32(P_VPU_PROT3_CLK_GATE) == 0) { \
+            PROT_MEM_POWER_ON(); \
+            VD1_MEM_POWER_ON(); \
+            video_prot_gate_on(); \
+            video_prot.video_started = 1; \
+            video_prot.angle_changed = 1; \
+        } \
+        VIDEO_LAYER_ON(); \
     } while (0)
 #else
 #define EnableVideoLayer()  \
@@ -265,9 +263,11 @@ static int video_onoff_state = VIDEO_ENABLE_STATE_IDLE;
     do { \
          CLEAR_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, \
            VPP_VD1_PREBLEND|VPP_VD2_PREBLEND|VPP_VD2_POSTBLEND|VPP_VD1_POSTBLEND ); \
-         VD1_MEM_POWER_OFF(); \
+         video_prot_gate_off(); \
          VIDEO_LAYER_OFF(); \
-         video_prot.power_down = 1; \
+         VD1_MEM_POWER_OFF(); \
+         PROT_MEM_POWER_OFF(); \
+         video_prot.video_started = 0; \
          if(debug_flag& DEBUG_FLAG_BLACKOUT){  \
             printk("DisableVideoLayer()\n"); \
          } \
@@ -998,11 +998,11 @@ static void vsync_toggle_frame(vframe_t *vf)
 	VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1, disp_canvas[rdma_canvas_id][1]);
         next_rdma_canvas_id = rdma_canvas_id?0:1;
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-        if (use_prot && video_prot.status) {
-             VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, disp_canvas[rdma_canvas_id][0] & 0xff, 0, 8);
-             if (!(vf->type & VIDTYPE_VIU_444)) {
-                 VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, (disp_canvas[rdma_canvas_id][0] >> 8) & 0xff, 0, 8);
-             }
+        if (use_prot) {
+            video_prot.prot2_canvas = disp_canvas[rdma_canvas_id][0] & 0xff;
+            video_prot.prot3_canvas = (disp_canvas[rdma_canvas_id][0] >> 8) & 0xff;
+             VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, video_prot.prot2_canvas, 0, 8);
+             VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, video_prot.prot3_canvas, 0, 8);
         }
 #endif
 #else
@@ -1018,11 +1018,11 @@ static void vsync_toggle_frame(vframe_t *vf)
         VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS0, disp_canvas[1]);
         VSYNC_WR_MPEG_REG(VD2_IF0_CANVAS1, disp_canvas[1]);
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-        if (use_prot && video_prot.status) {
-             VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, disp_canvas_index[0], 0, 8);
-             if (!(vf->type & VIDTYPE_VIU_444)) {
-                 VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, disp_canvas_index[1], 0, 8);
-             }
+        if (use_prot) {
+            video_prot.prot2_canvas = disp_canvas_index[0];
+            video_prot.prot3_canvas = disp_canvas_index[1];
+             VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_DDR, video_prot.prot2_canvas, 0, 8);
+             VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_DDR, video_prot.prot3_canvas, 0, 8);
         }
 #endif
 #endif
@@ -1068,7 +1068,11 @@ static void vsync_toggle_frame(vframe_t *vf)
         (cur_dispbuf->ratio_control != vf->ratio_control) ||
         ((cur_dispbuf->type_backup & VIDTYPE_INTERLACE) !=
          (vf->type_backup & VIDTYPE_INTERLACE)) ||
-         (cur_dispbuf->type != vf->type)) {
+         (cur_dispbuf->type != vf->type)
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+         || video_prot.angle_changed
+#endif
+         ) {
         amlog_mask(LOG_MASK_FRAMEINFO,
                    "%s %dx%d ar=0x%x\n",
                    ((vf->type & VIDTYPE_TYPEMASK) == VIDTYPE_INTERLACE_TOP) ?
@@ -1083,30 +1087,39 @@ static void vsync_toggle_frame(vframe_t *vf)
                          &frame_parms[1] : &frame_parms[0];
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
         if (use_prot) {
-            video_prot_revert_vframe(&video_prot, vf);
+            vframe_t tmp_vf = *vf;
+            if (video_prot.angle_changed || cur_dispbuf->width != vf->width || cur_dispbuf->height != vf->height) {
+                u32 angle_orientation = 0;
+                video_prot_init(&video_prot, &tmp_vf);
+                angle_orientation = (video_angle + video_prot.src_vframe_orientation) % 4;
+                video_prot_set_angle(&video_prot, angle_orientation);
+                video_prot.angle = angle_orientation;
+                video_prot.status = angle_orientation % 2;
+                video_prot.angle_changed = 0;
+            }
+            video_prot_revert_vframe(&video_prot, &tmp_vf);
             if (video_prot.status) {
                 static vpp_frame_par_t prot_parms;
-                prot_get_parameter(wide_setting, vf, &prot_parms, vinfo);
+                prot_get_parameter(wide_setting, &tmp_vf, &prot_parms, vinfo);
                 video_prot_axis(&video_prot, prot_parms.VPP_hd_start_lines_, prot_parms.VPP_hd_end_lines_, prot_parms.VPP_vd_start_lines_, prot_parms.VPP_vd_end_lines_);
-            }
-            vpp_set_filters(wide_setting, vf, next_frame_par, vinfo);
-            if (video_prot.status) {
-                u32 tmp_line_in_length_ = next_frame_par->VPP_hd_end_lines_ - next_frame_par->VPP_hd_start_lines_ + 1;
-                u32 tmp_pic_in_height_ = next_frame_par->VPP_vd_end_lines_ - next_frame_par->VPP_vd_start_lines_ + 1;
-                //video_prot_axis(&video_prot, next_frame_par->VPP_hd_start_lines_, next_frame_par->VPP_hd_end_lines_, next_frame_par->VPP_vd_start_lines_, next_frame_par->VPP_vd_end_lines_);
-                if (tmp_line_in_length_ < vf->width) {
-                    next_frame_par->VPP_line_in_length_ = tmp_line_in_length_ / (next_frame_par->hscale_skip_count + 1);
-                    next_frame_par->VPP_hd_start_lines_ = 0;
-                    next_frame_par->VPP_hf_ini_phase_ = 0;
-                    next_frame_par->VPP_hd_end_lines_ = tmp_line_in_length_ - 1;
-                }
-                if (tmp_pic_in_height_ < vf->height) {
-                    next_frame_par->VPP_pic_in_height_ = tmp_pic_in_height_ / (next_frame_par->vscale_skip_count + 1);
-                    next_frame_par->VPP_vd_start_lines_ = 0;
-                    next_frame_par->VPP_hf_ini_phase_ = 0;
-                    next_frame_par->VPP_vd_end_lines_ = tmp_pic_in_height_ - 1;
+                if (video_prot.status) {
+                    u32 tmp_line_in_length_ = next_frame_par->VPP_hd_end_lines_ - next_frame_par->VPP_hd_start_lines_ + 1;
+                    u32 tmp_pic_in_height_ = next_frame_par->VPP_vd_end_lines_ - next_frame_par->VPP_vd_start_lines_ + 1;
+                    if (tmp_line_in_length_ < tmp_vf.width) {
+                        next_frame_par->VPP_line_in_length_ = tmp_line_in_length_ / (next_frame_par->hscale_skip_count + 1);
+                        next_frame_par->VPP_hd_start_lines_ = 0;
+                        next_frame_par->VPP_hf_ini_phase_ = 0;
+                        next_frame_par->VPP_hd_end_lines_ = tmp_line_in_length_ - 1;
+                    }
+                    if (tmp_pic_in_height_ < tmp_vf.height) {
+                        next_frame_par->VPP_pic_in_height_ = tmp_pic_in_height_ / (next_frame_par->vscale_skip_count + 1);
+                        next_frame_par->VPP_vd_start_lines_ = 0;
+                        next_frame_par->VPP_hf_ini_phase_ = 0;
+                        next_frame_par->VPP_vd_end_lines_ = tmp_pic_in_height_ - 1;
+                    }
                 }
             }
+            vpp_set_filters(wide_setting, &tmp_vf, next_frame_par, vinfo);
         } else {
             vpp_set_filters(wide_setting, vf, next_frame_par, vinfo);
         }
@@ -1746,7 +1759,9 @@ void vsync_rdma_process(void)
 }
 #endif
 
+#ifdef CONFIG_SUPPORT_VIDEO_ON_VPP2
 static vmode_t old_vmode = VMODE_MAX;
+#endif
 #ifdef FIQ_VSYNC
 void vsync_fisr(void)
 #else
@@ -1857,110 +1872,6 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 #endif
     vout_type = detect_vout_type();
     hold_line = calc_hold_line();
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    static int wait_count = 0;
-    use_prot = get_use_prot();
-#if 0
-    if (use_prot) {
-        if (video_prot.power_down) {
-            video_prot_set_angle(&video_prot, 0);
-            video_prot_gate(0);
-            PROT_MEM_POWER_OFF();
-            video_prot.power_down = 0;
-            video_prot.power_on = 0;
-            video_prot_clear(&video_prot);
-        }
-    } else
-#endif
-    if (!use_prot && video_prot.enable_layer) {
-        video_prot_set_angle(&video_prot, 0);
-        video_prot_gate(0);
-        PROT_MEM_POWER_OFF();
-        video_prot_clear(&video_prot);
-        video_prot.power_down = 0;
-        //video_prot.power_on = 0;
-        video_prot.angle_changed = 0;
-        video_prot.enable_layer = 0;
-        video_property_changed = true;
-    }
-    if (use_prot && video_prot.power_down) {
-        video_prot_set_angle(&video_prot, 0);
-        video_prot_gate(0);
-        PROT_MEM_POWER_OFF();
-        video_prot_clear(&video_prot);
-        video_property_changed = true;
-        video_prot.power_down = 0;
-        video_prot.power_on = 0;
-        video_prot.angle_changed = 0;
-        video_prot.status = 0;
-    }
-    vf = video_vf_peek();
-    if (use_prot && vf) {//video_prot.video_started ||
-        if (video_prot.src_vframe_width != vf->width || video_prot.src_vframe_height != vf->height) {
-            video_prot_init(&video_prot, vf);
-            //video_prot.angle_changed = 1;
-            video_prot.video_started = 0;
-            u32 angle_orientation = (video_angle + video_prot.src_vframe_orientation) % 4;
-            video_prot_set_angle(&video_prot, angle_orientation);
-        }
-        u32 angle_orientation = (video_angle + video_prot.src_vframe_orientation) % 4;
-        u32 last_angle_orientation = video_prot.angle;
-        if (video_prot.enable_layer || get_vpu_mem_pd_vmod(VPU_PIC_ROT2) == VPU_MEM_POWER_DOWN) {
-            if (angle_orientation % 2) {
-                if (video_prot.angle_changed & 0x1) {
-                    video_prot.angle_changed = 0x2;
-                    video_prot_set_angle(&video_prot, 0);
-                    video_prot_gate(0);
-                    video_prot_set_angle(&video_prot, 0);
-                    wait_count = 50;
-                    return IRQ_HANDLED;
-                } else if (video_prot.angle_changed & 0x2) {
-                    if (wait_count-- > 0) {
-                        return IRQ_HANDLED;
-                    }
-                    VIDEO_LAYER_ON();
-                    video_prot.angle = angle_orientation;
-                    video_prot.status = angle_orientation % 2;
-                    video_prot_set_angle(&video_prot, angle_orientation);
-                    video_prot_gate(video_prot.status);
-                    video_property_changed = 1;
-                    video_prot.angle_changed = 0;
-                    video_prot.enable_layer = 0;
-                }
-            } else {
-                if (video_prot.angle_changed & 0x1) {
-                    video_prot.angle = angle_orientation;
-                    video_prot.status = angle_orientation % 2;
-                    video_prot_set_angle(&video_prot, angle_orientation);
-                    video_prot_gate(video_prot.status);
-                    video_property_changed = 1;
-                    video_prot.angle_changed = 0;
-                }
-            }
-        } else if (angle_orientation != last_angle_orientation) {
-            if (video_prot.angle_changed & 0x1) {
-                video_prot.angle = angle_orientation;
-                video_prot.status = angle_orientation % 2;
-                video_prot_set_angle(&video_prot, angle_orientation);
-                video_prot_gate(video_prot.status);
-                video_property_changed = 1;
-                video_prot.angle_changed = 0;
-            }
-        } else {
-            video_prot.angle_changed = 0;
-        }
-        if (video_prot.enable_layer) {
-            wait_count = 20;
-            //VD1_MEM_POWER_ON();
-            VIDEO_LAYER_ON();
-            video_prot.enable_layer = 0;
-            return IRQ_HANDLED;
-        }
-        if (wait_count-- > 0) {
-            return IRQ_HANDLED;
-        }
-    }
-#endif
     if (vsync_pts_inc_upint) {
         if (vsync_pts_inc_adj) {
             //printk("adj %d, org %d\n", vsync_pts_inc_adj, vsync_pts_inc);
@@ -2027,7 +1938,13 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
         dispbuf_to_put_num = 0;
     }
 #endif
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    use_prot = get_use_prot();
+    if (video_prot.video_started) {
+        video_prot.video_started = 0;
+        return IRQ_HANDLED;
+    }
+#endif
     if (osd_prov && osd_prov->ops && osd_prov->ops->get){
         vf = osd_prov->ops->get(osd_prov->op_arg);
         if(vf){
@@ -2339,7 +2256,6 @@ SET_FILTER:
 
         vpp_settings_h(cur_frame_par);
         vpp_settings_v(cur_frame_par);
-
         frame_par_ready_to_set = 0;
         frame_par_force_to_set = 0;
     } /* VPP one time settings */
@@ -2684,7 +2600,6 @@ static void video_vf_unreg_provider(void)
     video_prot.video_started = 0;
     spin_unlock_irqrestore(&lock, flags);
     atomic_set(&video_unreg_flag, 0);
-
     enable_video_discontinue_report = 1;
 }
 
@@ -2706,7 +2621,18 @@ static void video_vf_light_unreg_provider(void)
         vf_local = *cur_dispbuf;
         cur_dispbuf = &vf_local;
     }
-    video_prot.video_started = 1;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if(get_vpu_mem_pd_vmod(VPU_VIU_VD1) == VPU_MEM_POWER_DOWN ||
+            get_vpu_mem_pd_vmod(VPU_PIC_ROT2) == VPU_MEM_POWER_DOWN ||
+            aml_read_reg32(P_VPU_PROT3_CLK_GATE) == 0) {
+        PROT_MEM_POWER_ON();
+        VD1_MEM_POWER_ON();
+        video_prot_gate_on();
+        video_prot.video_started = 1;
+        video_prot.angle_changed = 1;
+    }
+#endif
+
     spin_unlock_irqrestore(&lock, flags);
 }
 
@@ -4006,7 +3932,7 @@ static ssize_t frame_rate_show(struct class *cla, struct class_attribute* attr,
     u32 tmp = time;
     u32 rate = 0;
     u32 vsync_rate;
-    size_t ret;
+    ssize_t ret = 0;
     time -= last_frame_time;
     last_frame_time = tmp;
     last_frame_count = frame_count;
diff --git a/drivers/amlogic/amports/video_prot.c b/drivers/amlogic/amports/video_prot.c
index 797b76ec55cd..8b5e33b34536 100755
--- a/drivers/amlogic/amports/video_prot.c
+++ b/drivers/amlogic/amports/video_prot.c
@@ -9,7 +9,7 @@
  */
 #include <linux/amlogic/amports/video_prot.h>
 
-static int set_prot_NV21(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_step, u32 angle, u32 pat_val) {
+static int set_prot_NV21(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_step, u32 angle, u32 pat_val, u32 prot2_canvas, u32 prot3_canvas) {
 
     u32 data32;
     if (angle == 0 || angle == 2) {
@@ -17,7 +17,7 @@ static int set_prot_NV21(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_s
            VSYNC_WR_MPEG_REG(VPU_PROT2_GEN_CNTL, data32);
            data32 = (HOLD_LINES << 8) | (LITTLE_ENDIAN << 7) | (0 << 6) | (1 << 4) | (0 << 3) | (0 << 2) | (0 << 0);
            VSYNC_WR_MPEG_REG(VPU_PROT3_GEN_CNTL, data32);
-
+           VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, 0);
            return 0;
     } else {
         u32 x_start_uv = x_start >> 1;
@@ -50,8 +50,9 @@ static int set_prot_NV21(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_s
         VSYNC_WR_MPEG_REG(VPU_PROT3_RPT_LOOP, data32);
         VSYNC_WR_MPEG_REG(VPU_PROT2_RPT_PAT, pat_val);
         VSYNC_WR_MPEG_REG(VPU_PROT3_RPT_PAT, pat_val);
-        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8);
+        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8) | prot2_canvas;
         VSYNC_WR_MPEG_REG(VPU_PROT2_DDR, data32);
+        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8) | prot3_canvas;
         VSYNC_WR_MPEG_REG(VPU_PROT3_DDR, data32);
         data32 = (REQ_ONOFF_EN << 31) | (REQ_OFF_MIN << 16) | (REQ_ON_MAX << 0);
         VSYNC_WR_MPEG_REG(VPU_PROT2_REQ_ONOFF, data32);
@@ -68,11 +69,12 @@ static int set_prot_NV21(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_s
             data32 = (HOLD_LINES << 8) | (LITTLE_ENDIAN << 7) | (0 << 6) | (1 << 4) | (0 << 3) | (1 << 2) | (1 << 0);
             VSYNC_WR_MPEG_REG(VPU_PROT3_GEN_CNTL, data32);
         }
+        VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, 1 << 31 | 1080 << 16 | 1080);
     }
     return 0;
 }
 
-static int set_prot_422(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_step, u32 angle, u32 pat_val) {
+static int set_prot_422(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_step, u32 angle, u32 pat_val, u32 prot2_canvas, u32 prot3_canvas) {
 
     u32 data32;
 
@@ -81,7 +83,7 @@ static int set_prot_422(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_st
            VSYNC_WR_MPEG_REG(VPU_PROT2_GEN_CNTL, data32);
            data32 = (HOLD_LINES << 8) | (LITTLE_ENDIAN << 7) | (0 << 6) | (1 << 4) | (0 << 3) | (0 << 2) | (0 << 0);
            VSYNC_WR_MPEG_REG(VPU_PROT3_GEN_CNTL, data32);
-
+           VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, 0);
            return 0;
     } else {
         u32 x_start_uv = x_start >> 1;
@@ -114,8 +116,9 @@ static int set_prot_422(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_st
         VSYNC_WR_MPEG_REG(VPU_PROT3_RPT_LOOP, data32);
         VSYNC_WR_MPEG_REG(VPU_PROT2_RPT_PAT, pat_val);
         VSYNC_WR_MPEG_REG(VPU_PROT3_RPT_PAT, pat_val);
-        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8);
+        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8) | prot2_canvas;
         VSYNC_WR_MPEG_REG(VPU_PROT2_DDR, data32);
+        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8) | prot3_canvas;
         VSYNC_WR_MPEG_REG(VPU_PROT3_DDR, data32);
         data32 = (REQ_ONOFF_EN << 31) | (REQ_OFF_MIN << 16) | (REQ_ON_MAX << 0);
         VSYNC_WR_MPEG_REG(VPU_PROT2_REQ_ONOFF, data32);
@@ -132,18 +135,19 @@ static int set_prot_422(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_st
             data32 = (HOLD_LINES << 8) | (LITTLE_ENDIAN << 7) | (0 << 6) | (1 << 4) | (0 << 3) | (1 << 2) | (1 << 0);
             VSYNC_WR_MPEG_REG(VPU_PROT3_GEN_CNTL, data32);
         }
+        VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, 1 << 31 | 1080 << 16 | 1080);
     }
     return 0;
 }
 
-static int set_prot_444(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_step, u32 angle, u32 pat_val) {
+static int set_prot_444(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_step, u32 angle, u32 pat_val, u32 prot2_canvas) {
 
     u32 data32;
 
     if (angle == 0 || angle == 2) {
            data32 = (HOLD_LINES << 8) | (LITTLE_ENDIAN << 7) | (0 << 6) | (0 << 4) | (0 << 3) | (0 << 2) | (0 << 0);
            VSYNC_WR_MPEG_REG(VPU_PROT2_GEN_CNTL, data32);
-
+           VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, 0);
            return 0;
     } else {
         u32 y_len = (y_end - y_start) / (y_step + 1);
@@ -160,7 +164,7 @@ static int set_prot_444(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_st
         data32 = (PAT_START_PTR << 4) | (PAT_END_PTR << 0);
         VSYNC_WR_MPEG_REG(VPU_PROT2_RPT_LOOP, data32);
         VSYNC_WR_MPEG_REG(VPU_PROT2_RPT_PAT, pat_val);
-        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8);
+        data32 = (CUGT << 20) | (CID_MODE << 16) | (CID_VALUE << 8) | prot2_canvas;
         VSYNC_WR_MPEG_REG(VPU_PROT2_DDR, data32);
         data32 = (REQ_ONOFF_EN << 31) | (REQ_OFF_MIN << 16) | (REQ_ON_MAX << 0);
         VSYNC_WR_MPEG_REG(VPU_PROT2_REQ_ONOFF, data32);
@@ -172,18 +176,28 @@ static int set_prot_444(u32 x_start, u32 x_end, u32 y_start, u32 y_end, u32 y_st
             data32 = (HOLD_LINES << 8) | (LITTLE_ENDIAN << 7) | (0 << 6) | (0 << 4) | (0 << 3) | (1 << 2) | (1 << 0);
             VSYNC_WR_MPEG_REG(VPU_PROT2_GEN_CNTL, data32);
         }
+        VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, 1 << 31 | 1080 << 16 | 1080);
     }
     return 0;
 }
 
-void video_prot_gate(u32 on) {
-
-    VSYNC_WR_MPEG_REG(VPU_PROT2_CLK_GATE, on);
-    VSYNC_WR_MPEG_REG(VPU_PROT3_CLK_GATE, on);
-    VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, on << 31 | 1080 << 16 | 1080);
-    VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_MMC_CTRL, on, 12, 3);
-    VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_MMC_CTRL, on, 12, 3);
+void video_prot_gate_on(void) {
+    VSYNC_WR_MPEG_REG(VPU_PROT2_CLK_GATE, 1);
+    VSYNC_WR_MPEG_REG(VPU_PROT3_CLK_GATE, 1);
+    VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_MMC_CTRL, 1, 12, 3);
+    VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_MMC_CTRL, 1, 12, 3);
+    VSYNC_WR_MPEG_REG(VPU_PROT2_GEN_CNTL, 0);
+    VSYNC_WR_MPEG_REG(VPU_PROT3_GEN_CNTL, 0);
+}
 
+void video_prot_gate_off(void) {
+    VSYNC_WR_MPEG_REG(VD1_IF0_PROT_CNTL, 0);
+    VSYNC_WR_MPEG_REG(VPU_PROT2_GEN_CNTL, 0);
+    VSYNC_WR_MPEG_REG(VPU_PROT3_GEN_CNTL, 0);
+    VSYNC_WR_MPEG_REG(VPU_PROT2_CLK_GATE, 0);
+    VSYNC_WR_MPEG_REG(VPU_PROT3_CLK_GATE, 0);
+    VSYNC_WR_MPEG_REG_BITS(VPU_PROT2_MMC_CTRL, 0, 12, 3);
+    VSYNC_WR_MPEG_REG_BITS(VPU_PROT3_MMC_CTRL, 0, 12, 3);
 }
 
 void video_prot_init(video_prot_t* video_prot, vframe_t *vf) {
@@ -232,13 +246,13 @@ void video_prot_clear(video_prot_t* video_prot) {
 
 void video_prot_set_angle(video_prot_t* video_prot, u32 angle_orientation) {
     if (video_prot->viu_type & VIDTYPE_VIU_NV21) {
-        set_prot_NV21(video_prot->x_start, video_prot->x_end, video_prot->y_start, video_prot->y_end, video_prot->y_step, angle_orientation, video_prot->pat_val);
+        set_prot_NV21(video_prot->x_start, video_prot->x_end, video_prot->y_start, video_prot->y_end, video_prot->y_step, angle_orientation, video_prot->pat_val, video_prot->prot2_canvas, video_prot->prot3_canvas);
     } else if (video_prot->viu_type & VIDTYPE_VIU_422) {
-        set_prot_422(video_prot->x_start, video_prot->x_end, video_prot->y_start, video_prot->y_end, video_prot->y_step, angle_orientation, video_prot->pat_val);
+        set_prot_422(video_prot->x_start, video_prot->x_end, video_prot->y_start, video_prot->y_end, video_prot->y_step, angle_orientation, video_prot->pat_val, video_prot->prot2_canvas, video_prot->prot3_canvas);
     } else if (video_prot->viu_type & VIDTYPE_VIU_444) {
-        set_prot_444(video_prot->x_start, video_prot->x_end, video_prot->y_start, video_prot->y_end, video_prot->y_step, angle_orientation, video_prot->pat_val);
+        set_prot_444(video_prot->x_start, video_prot->x_end, video_prot->y_start, video_prot->y_end, video_prot->y_step, angle_orientation, video_prot->pat_val, video_prot->prot2_canvas);
     } else {
-        set_prot_NV21(0, video_prot->x_end, 0, video_prot->y_end, video_prot->y_step, 0, video_prot->pat_val);
+        set_prot_NV21(0, video_prot->x_end, 0, video_prot->y_end, video_prot->y_step, 0, video_prot->pat_val, video_prot->prot2_canvas, video_prot->prot3_canvas);
     }
 }
 
diff --git a/include/linux/amlogic/amports/video_prot.h b/include/linux/amlogic/amports/video_prot.h
index 70e5872ca41f..2bc83fe27a99 100755
--- a/include/linux/amlogic/amports/video_prot.h
+++ b/include/linux/amlogic/amports/video_prot.h
@@ -34,9 +34,12 @@ typedef struct {
     u32 y_end;
     u32 y_step;
     u32 pat_val;
+    u32 prot2_canvas;
+    u32 prot3_canvas;
     u32 is_4k2k;
     u32 angle;
     u32 angle_changed;
+    u32 size_changed;
     u32 enable_layer;
     u32 src_vframe_width;
     u32 src_vframe_height;
@@ -50,7 +53,8 @@ void video_prot_clear(video_prot_t* video_prot);
 void video_prot_set_angle(video_prot_t* video_prot, u32 angle_orientation);
 void video_prot_revert_vframe(video_prot_t* video_prot, vframe_t *vf);
 void video_prot_set_canvas(vframe_t *vf);
-void video_prot_gate(u32 on);
+void video_prot_gate_on(void);
+void video_prot_gate_off(void);
 u32 get_video_angle(void);
 u32 get_prot_status(void);
 void set_video_angle(u32 s_value);
-- 
2.19.0

