From 1e05a69aaaff8bc230210c63fd322400e0d04409 Mon Sep 17 00:00:00 2001
From: "bo.yang" <bo.yang@amlogic.com>
Date: Wed, 26 Feb 2014 23:42:36 +0800
Subject: [PATCH 3579/5965] dvb: update demod for m6tvd

sync from amlogic-pd-00005:

by shijie.rong@amlogic.com
---
 drivers/amlogic/dvb_tv/aml_dmx.c              |   2 +-
 drivers/amlogic/dvb_tv/aml_dvb.c              |   4 +-
 drivers/amlogic/dvb_tv/amldemod/amlfrontend.c |  37 ++-
 drivers/amlogic/dvb_tv/amldemod/demod_func.c  |   8 +-
 drivers/amlogic/dvb_tv/amldemod/demod_func.h  |  12 +
 drivers/amlogic/dvb_tv/amldemod/dvbc_func.c   | 276 ++++++++++++++++++
 drivers/media/dvb-core/dvb_frontend.c         |  15 +-
 7 files changed, 333 insertions(+), 21 deletions(-)

diff --git a/drivers/amlogic/dvb_tv/aml_dmx.c b/drivers/amlogic/dvb_tv/aml_dmx.c
index 1467245bd3a8..c0b507704923 100755
--- a/drivers/amlogic/dvb_tv/aml_dmx.c
+++ b/drivers/amlogic/dvb_tv/aml_dmx.c
@@ -2031,7 +2031,7 @@ static int alloc_subtitle_pes_buffer(struct aml_dmx * dmx)
 		WRITE_MPEG_REG(PARSER_SUB_RP, start_ptr);
 		goto exit;
 	}
-	//rsj//sbuff=get_stream_buffer(BUF_TYPE_SUBTITLE);
+	sbuff=get_stream_buffer(BUF_TYPE_SUBTITLE);
 	if(sbuff)
 	{
 		 phy_addr = sbuff->buf_start;
diff --git a/drivers/amlogic/dvb_tv/aml_dvb.c b/drivers/amlogic/dvb_tv/aml_dvb.c
index c353df685ef2..b64ce3f656e3 100755
--- a/drivers/amlogic/dvb_tv/aml_dvb.c
+++ b/drivers/amlogic/dvb_tv/aml_dvb.c
@@ -1211,7 +1211,7 @@ static int aml_dvb_probe(struct platform_device *pdev)
 		goto error;
 	}
 
-	//rsj//tsdemux_set_ops(&aml_tsdemux_ops);
+	tsdemux_set_ops(&aml_tsdemux_ops);
 
 	return ret;
 error:
@@ -1240,7 +1240,7 @@ static int aml_dvb_remove(struct platform_device *pdev)
 	struct aml_dvb *advb = (struct aml_dvb*)dev_get_drvdata(&pdev->dev);
 	int i;
 
-//rsj//	tsdemux_set_ops(NULL);
+	tsdemux_set_ops(NULL);
 
 	aml_unregist_dmx_class();
 	class_unregister(&aml_stb_class);
diff --git a/drivers/amlogic/dvb_tv/amldemod/amlfrontend.c b/drivers/amlogic/dvb_tv/amldemod/amlfrontend.c
index 8729207229ab..7a7de0abaec2 100755
--- a/drivers/amlogic/dvb_tv/amldemod/amlfrontend.c
+++ b/drivers/amlogic/dvb_tv/amldemod/amlfrontend.c
@@ -52,6 +52,7 @@ module_param(debug_aml, int, S_IRUGO);
 
 static int last_lock=-1;
 #define DEMOD_DEVICE_NAME  "m6_demod"
+static int cci_thread=0;
 
 
 static int freq_dvbc=0;
@@ -531,7 +532,7 @@ static int M6_Demod_Dvbc_Init(struct aml_fe_dev *dev,int mode)
     	sys.demod_clk=Demod_Clk_72M;
 		demod_status.tmp=Cry_mode;
 	}
-	demod_status.ch_if=Si2176_5M_If*1000;
+	demod_status.ch_if=Si2176_6M_If*1000;
 	pr_dbg("[%s]adc_clk is %d,demod_clk is %d\n",__func__,sys.adc_clk,sys.demod_clk);
 	autoFlagsTrig = 1;
 	demod_set_sys(&demod_status, &i2c, &sys);
@@ -938,6 +939,7 @@ static int m6_demod_dtmb_read_status(struct dvb_frontend *fe, fe_status_t * stat
 //	if(s==1)
 	s = dtmb_read_snr();
 	s = amdemod_dtmb_stat_islock(dev);
+//	s=1;
 	if(s==1)
 	{
 		ilock=1;
@@ -965,6 +967,9 @@ static int m6_demod_dtmb_read_ber(struct dvb_frontend *fe, u32 * ber)
 //	struct aml_demod_sta demod_sta;
 
 // check_atsc_fsm_status();
+	int fec_bch_add;
+	fec_bch_add = dtmb_read_reg(0xdf);
+	*ber=fec_bch_add;
 	return 0;
 }
 
@@ -979,14 +984,17 @@ static int m6_demod_dtmb_read_signal_strength(struct dvb_frontend *fe, u16 *stre
 
 static int m6_demod_dtmb_read_snr(struct dvb_frontend *fe, u16 * snr)
 {
-//	struct aml_fe *afe = fe->demodulator_priv;
-//	struct aml_fe_dev *dev = afe->dtv_demod;
-
-//	struct aml_demod_sts demod_sts;
-//	struct aml_demod_i2c demod_i2c;
-//	struct aml_demod_sta demod_sta;
+	struct aml_fe *afe = fe->demodulator_priv;
+	struct aml_fe_dev *dev = afe->dtv_demod;
 
-//	* snr=check_atsc_fsm_status();
+	int tmp,snr_avg;
+	tmp=snr_avg=0;
+	tmp=dtmb_read_reg(0x0e3);
+	snr_avg = (tmp >> 13) & 0xfff;
+		if(snr_avg >= 2048)
+			snr_avg = snr_avg - 4096;
+		snr_avg = snr_avg / 32;
+	*snr = snr_avg;
 	return 0;
 }
 
@@ -1063,8 +1071,8 @@ static int m6_demod_dtmb_get_frontend(struct dvb_frontend *fe)
 {//these content will be writed into eeprom .
 	struct dtv_frontend_properties *c = &fe->dtv_property_cache;
 	struct aml_fe *afe = fe->demodulator_priv;
-	printk("p->frequency is %d\n",c->frequency);
 	*c = afe->params;
+	pr_dbg("[get frontend]c->frequency is %d\n",c->frequency);
 	return 0;
 }
 
@@ -1179,7 +1187,7 @@ static int m6_demod_fe_get_ops(struct aml_fe_dev *dev, int mode, void *ops)
 	}else if(mode == AM_FE_DTMB){
 
 	fe_ops->info.frequency_min = 51000000;
-	fe_ops->info.frequency_max = 858000000;
+	fe_ops->info.frequency_max = 710000000;
 	fe_ops->info.frequency_stepsize = 0;
 	fe_ops->info.frequency_tolerance = 0;
 	fe_ops->info.caps = FE_CAN_FEC_1_2 | FE_CAN_FEC_2_3 | FE_CAN_FEC_3_4 |
@@ -1230,11 +1238,20 @@ static int m6_demod_fe_enter_mode(struct aml_fe *fe, int mode)
 	}else if (fe->mode==AM_FE_ATSC){
 		M6_Demod_Atsc_Init(dev);
 	}*/
+	//dvbc_timer_init();
+	if(cci_thread){
+		if(dvbc_get_cci_task()==1)
+			dvbc_create_cci_task();
+	}
 	return 0;
 }
 
 static int m6_demod_fe_leave_mode(struct aml_fe *fe, int mode)
 {
+//	dvbc_timer_exit();
+	if(cci_thread){
+		dvbc_kill_cci_task();
+	}
 	return 0;
 }
 
diff --git a/drivers/amlogic/dvb_tv/amldemod/demod_func.c b/drivers/amlogic/dvb_tv/amldemod/demod_func.c
index 712dcab182b2..a9cd12c9668b 100755
--- a/drivers/amlogic/dvb_tv/amldemod/demod_func.c
+++ b/drivers/amlogic/dvb_tv/amldemod/demod_func.c
@@ -865,6 +865,9 @@ void dtmb_initial(struct aml_demod_sta *demod_sta)
 	dtmb_write_reg(0x047, 0x33202);  //20 bits, 1 - fpga. 0 - m6tvd
 	dtmb_write_reg(0xd, 0x141a0320); // increase interleaver0 waiting time.
     dtmb_write_reg(0xc, 0x41444400); // shorten che waiting time.
+    dtmb_write_reg(0x18,0x000a1316); // shorten mobile detect time.
+    dtmb_write_reg(0x15,0x0199999A); // shift -5M.
+	dtmb_write_reg(0x2f,0x13064263); // speed up src
 #if 0
 	int i;
 	  for (i=0; list_dtmb_v1[i].adr != 0; i++) {
@@ -971,7 +974,7 @@ int dtmb_read_snr(void){
 		            pr_dbg("*************** local_state = %d ************ \n", local_state);
 
 		            if(SC_mode == 0 && fbe_in_num > 30 && fec_ldpc_it_avg > 640/*2.5*256*/) { // switch to time_eq mode
-		                ddc_phase  = dtmb_read_reg(0x15) & 0xffffff;
+		                ddc_phase  = dtmb_read_reg(0x15) & 0x1ffffff;
 		                icfo_phase = dtmb_read_reg(0xe0) & 0xfffff;
 		                fcfo_phase = dtmb_read_reg(0xe1) & 0xfffff;
 
@@ -1001,6 +1004,7 @@ int dtmb_read_snr(void){
 		                local_state = 8;
 		                pr_dbg("*************** local_state = %d ************ \n", local_state);
 		                dtmb_reset();
+						msleep(300);
 	                        }
 	                    }
 	                }else if(time_cnt >=10) // don't sync, all reset
@@ -1015,6 +1019,8 @@ int dtmb_read_snr(void){
                             dtmb_write_reg(0xc, 0x41444400); // shorten che waiting time.
                             dtmb_write_reg(0x47,0x33202);
 							dtmb_write_reg(0x18,0x000a1316); // shorten mobile detect time.
+				            dtmb_write_reg(0x15,0x0199999A); // shift -5M.
+				            dtmb_write_reg(0x2f,0x13064263); // speed up src
                         }
 
 		 }
diff --git a/drivers/amlogic/dvb_tv/amldemod/demod_func.h b/drivers/amlogic/dvb_tv/amldemod/demod_func.h
index 99fd37f22727..04bbc896b77a 100755
--- a/drivers/amlogic/dvb_tv/amldemod/demod_func.h
+++ b/drivers/amlogic/dvb_tv/amldemod/demod_func.h
@@ -106,6 +106,18 @@ void dvbc_isr(struct aml_demod_sta *demod_sta);
 u32 dvbc_set_qam_mode(unsigned char mode);
 u32 dvbc_get_status(void);
 u32 dvbc_set_auto_symtrack(void);
+int  dvbc_timer_init(void);
+void  dvbc_timer_exit(void);
+void dvbc_cci_task(void);
+int dvbc_get_cci_task(void);
+void dvbc_create_cci_task(void);
+void dvbc_kill_cci_task(void);
+
+
+
+
+
+
 
 
 
diff --git a/drivers/amlogic/dvb_tv/amldemod/dvbc_func.c b/drivers/amlogic/dvb_tv/amldemod/dvbc_func.c
index b1216c668b46..225cb21f20ec 100755
--- a/drivers/amlogic/dvb_tv/amldemod/dvbc_func.c
+++ b/drivers/amlogic/dvb_tv/amldemod/dvbc_func.c
@@ -3,6 +3,281 @@
 #include <linux/delay.h>
 #include "aml_demod.h"
 #include "demod_func.h"
+#include <linux/kthread.h>
+
+
+
+static struct task_struct *cci_task;
+int cciflag=0;
+struct timer_list mytimer;
+static void dvbc_cci_timer(unsigned long data)
+{
+	printk("%s\n", (char *)data);
+
+#if 1
+	int count=100;
+	int maxCCI_p,re,im,j,i,times,maxCCI,sum,sum1,reg_0xf0,tmp1,tmp,tmp2,reg_0xa8,reg_0xac;
+//	while(1){
+		    // search cci((si2176_get_strength()-256)<(-85))
+		if((((apb_read_reg(QAM_BASE+0x18))&0x1)==1)){
+				printk("[cci]lock ");
+				if(cciflag==0){
+					  apb_write_reg(QAM_BASE+0xa8, 0);
+
+					  cciflag=0;
+				}
+				 printk("\n");
+				 mdelay(500);
+			mod_timer(&mytimer, jiffies + 2*HZ);
+			return 0;
+		}
+		 if(cciflag==1){
+		 	printk("[cci]cciflag is 1,wait 20\n");
+			mdelay(20000);
+		}
+	   		times = 300;
+		    tmp = 0x2be2be3; //0x2ae4772;  IF = 6M, fs = 35M, dec2hex(round(8*IF/fs*2^25))
+		    tmp2 = 0x2000;
+		    tmp1 = 8;
+		    int reg_0xa8_t, reg_0xac_t;
+		    reg_0xa8 = 0xc0000000; // bypass CCI
+		    reg_0xac = 0xc0000000; // bypass CCI
+
+		    maxCCI = 0;
+    		maxCCI_p = 0;
+			for(i = 0; i < times; i++) {
+		         //reg_0xa8 = app_apb_read_reg(0xa8);
+		         reg_0xa8_t = reg_0xa8 + tmp + i * tmp2;
+	       		 apb_write_reg(QAM_BASE+0xa8, reg_0xa8_t);
+		         reg_0xac_t = reg_0xac + tmp - i * tmp2;
+	        	 apb_write_reg(QAM_BASE+0xac, reg_0xac_t);
+	       		 sum = 0;
+	        	 sum1 = 0;
+		          for(j = 0; j < tmp1; j++) {
+		              	// msleep(1);
+		              	// mdelay(1);
+			             reg_0xf0 = apb_read_reg(QAM_BASE+0xf0);
+			             re = (reg_0xf0 >> 24) & 0xff;
+			             im = (reg_0xf0 >> 16) & 0xff;
+			             if(re > 127)
+			                 //re = re - 256;
+			                 re = 256 - re;
+			             if(im > 127)
+			                 //im = im - 256;
+			                 im = 256 - im;
+
+			             sum += re + im;
+			             re = (reg_0xf0 >> 8) & 0xff;
+			             im = (reg_0xf0 >> 0) & 0xff;
+			             if(re > 127)
+			                 //re = re - 256;
+			                 re = 256 - re;
+			             if(im > 127)
+			                 //im = im - 256;
+			                 im = 256 - im;
+
+			             sum1 += re + im;
+
+			     }
+		         sum = sum / tmp1;
+		         sum1 = sum1 /tmp1;
+		         if(sum1 > sum) {
+		             sum = sum1;
+		             reg_0xa8_t = reg_0xac_t;
+		         }
+				// printk("0xa8 = %x, sum = %d i is %d\n", reg_0xa8_t, sum,i);
+		         if(sum > maxCCI) {
+		              maxCCI = sum;
+		              if(maxCCI > 24) {
+		                  maxCCI_p = reg_0xa8_t & 0x7fffffff;
+		              }
+		              printk("[cci]maxCCI = %d, maxCCI_p = %x i is %d, sum is %d\n", maxCCI, maxCCI_p,i,sum);
+		         }
+		         if((sum < 24) && (maxCCI_p > 0))
+		             break;  // stop CCI detect.
+	     }
+
+	     if(maxCCI_p > 0) {
+	         printk("[cci]--------- find CCI, loc = %x, value = %d ---------- \n", maxCCI_p, maxCCI);
+	         apb_write_reg(QAM_BASE+0xa8, maxCCI_p & 0x7fffffff); // enable CCI
+	         apb_write_reg(QAM_BASE+0xac, maxCCI_p & 0x7fffffff); // enable CCI
+	    //     if(dvbc.mode == 4) // 256QAM
+	             apb_write_reg(QAM_BASE+0x54, 0xa25705fa); //
+	             cciflag=1;
+	             mdelay(1000);
+	     }
+	     else{
+	         printk("[cci] ------------  find NO CCI ------------------- \n");
+			 cciflag = 0;
+	     }
+
+
+		printk("[cci][%s]--------------------------\n",__func__);
+		mod_timer(&mytimer, jiffies + 2*HZ);
+		return 0;
+//	}
+#endif
+}
+int  dvbc_timer_init(void)
+{
+	printk("%s\n",__func__);
+	setup_timer(&mytimer, dvbc_cci_timer, (unsigned long)"Hello, world!");
+	mytimer.expires = jiffies + 2*HZ;
+	add_timer(&mytimer);
+	return 0;
+}
+void  dvbc_timer_exit(void)
+{
+	printk("%s\n",__func__);
+	del_timer(&mytimer);
+}
+
+void dvbc_cci_task(void)
+{
+	int count=100;
+	int maxCCI_p,re,im,j,i,times,maxCCI,sum,sum1,reg_0xf0,tmp1,tmp,tmp2,reg_0xa8,reg_0xac;
+	while(1){
+			msleep(200);
+		    // search cci((si2176_get_strength()-256)<(-85))
+		if((((apb_read_reg(QAM_BASE+0x18))&0x1)==1)){
+				printk("[cci]lock ");
+				if(cciflag==0){
+					  apb_write_reg(QAM_BASE+0xa8, 0);
+					  apb_write_reg(QAM_BASE+0xac, 0);
+					  printk("no cci ");
+					  cciflag=0;
+				}
+				 printk("\n");
+				 msleep(500);
+			continue;
+		}
+
+		 if(cciflag==1){
+		 	printk("[cci]cciflag is 1,wait 20\n");
+			msleep(20000);
+		}
+	   		times = 300;
+		    tmp = 0x2be2be3; //0x2ae4772;  IF = 6M, fs = 35M, dec2hex(round(8*IF/fs*2^25))
+		    tmp2 = 0x2000;
+		    tmp1 = 8;
+		    int reg_0xa8_t, reg_0xac_t;
+		    reg_0xa8 = 0xc0000000; // bypass CCI
+		    reg_0xac = 0xc0000000; // bypass CCI
+
+		    maxCCI = 0;
+    		maxCCI_p = 0;
+			for(i = 0; i < times; i++) {
+		         //reg_0xa8 = app_apb_read_reg(0xa8);
+		         reg_0xa8_t = reg_0xa8 + tmp + i * tmp2;
+	       		 apb_write_reg(QAM_BASE+0xa8, reg_0xa8_t);
+		         reg_0xac_t = reg_0xac + tmp - i * tmp2;
+	        	 apb_write_reg(QAM_BASE+0xac, reg_0xac_t);
+	       		 sum = 0;
+	        	 sum1 = 0;
+		          for(j = 0; j < tmp1; j++) {
+		              //	 msleep(1);
+			             reg_0xf0 = apb_read_reg(QAM_BASE+0xf0);
+			             re = (reg_0xf0 >> 24) & 0xff;
+			             im = (reg_0xf0 >> 16) & 0xff;
+			             if(re > 127)
+			                 //re = re - 256;
+			                 re = 256 - re;
+			             if(im > 127)
+			                 //im = im - 256;
+			                 im = 256 - im;
+
+			             sum += re + im;
+
+			             re = (reg_0xf0 >> 8) & 0xff;
+			             im = (reg_0xf0 >> 0) & 0xff;
+			             if(re > 127)
+			                 //re = re - 256;
+			                 re = 256 - re;
+			             if(im > 127)
+			                 //im = im - 256;
+			                 im = 256 - im;
+
+			             sum1 += re + im;
+
+
+			     }
+		         sum = sum / tmp1;
+		         sum1 = sum1 /tmp1;
+		         if(sum1 > sum) {
+		             sum = sum1;
+		             reg_0xa8_t = reg_0xac_t;
+		         }
+				// printk("0xa8 = %x, sum = %d i is %d\n", reg_0xa8_t, sum,i);
+		         if(sum > maxCCI) {
+		              maxCCI = sum;
+		              if(maxCCI > 24) {
+		                  maxCCI_p = reg_0xa8_t & 0x7fffffff;
+		              }
+		              printk("[cci]maxCCI = %d, maxCCI_p = %x i is %d, sum is %d\n", maxCCI, maxCCI_p,i,sum);
+		         }
+
+		         if((sum < 24) && (maxCCI_p > 0))
+		             break;  // stop CCI detect.
+	     }
+
+	     if(maxCCI_p > 0) {
+	         printk("[cci]--------- find CCI, loc = %x, value = %d ---------- \n", maxCCI_p, maxCCI);
+	         apb_write_reg(QAM_BASE+0xa8, maxCCI_p & 0x7fffffff); // enable CCI
+	         apb_write_reg(QAM_BASE+0xac, maxCCI_p & 0x7fffffff); // enable CCI
+	    //     if(dvbc.mode == 4) // 256QAM
+	             apb_write_reg(QAM_BASE+0x54, 0xa25705fa); //
+	             cciflag=1;
+	             msleep(1000);
+	     }
+	     else{
+	         printk("[cci] ------------  find NO CCI ------------------- \n");
+			 cciflag = 0;
+	     }
+
+
+		printk("[cci][%s]--------------------------\n",__func__);
+	}
+
+}
+
+int dvbc_get_cci_task(void)
+{
+	if(cci_task)
+		return 0;
+	else
+		return 1;
+
+}
+
+void dvbc_create_cci_task(void)
+{
+
+	int i,ret;
+	//apb_write_reg(QAM_BASE+0xa8, 0x42b2ebe3); // enable CCI
+    // apb_write_reg(QAM_BASE+0xac, 0x42b2ebe3); // enable CCI
+//     if(dvbc.mode == 4) // 256QAM
+    // apb_write_reg(QAM_BASE+0x54, 0xa25705fa); //
+	cci_task=kthread_create(dvbc_cci_task,NULL,"cci_task");
+	if(ret!=0)
+	{
+		printk ("[%s]Create cci kthread error!\n",__func__);
+		cci_task=NULL;
+		return 0;
+	}
+	wake_up_process(cci_task);
+	printk ("[%s]Create cci kthread and wake up!\n",__func__);
+}
+
+void dvbc_kill_cci_task(void)
+{
+	if(cci_task){
+                kthread_stop(cci_task);
+                cci_task = NULL;
+				printk ("[%s]kill cci kthread !\n",__func__);
+     }
+}
+
+
 
 
 u32 dvbc_set_qam_mode(unsigned char mode)
@@ -313,6 +588,7 @@ static void dvbc_reg_initial(struct aml_demod_sta *demod_sta)
     ch_if     = demod_sta->ch_if    ; // kHz
     ch_bw     = demod_sta->ch_bw    ; // kHz
     symb_rate = demod_sta->symb_rate; // k/sec
+    ch_mode=4;
     printk("in dvbc_func, clk_freq is %d, adc_freq is %d,ch_mode is %d,ch_if is %d\n", clk_freq, adc_freq,ch_mode,ch_if);
 //	apb_write_reg(DEMOD_CFG_BASE,0x00000007);
     // disable irq
diff --git a/drivers/media/dvb-core/dvb_frontend.c b/drivers/media/dvb-core/dvb_frontend.c
index 62d99291a121..52c7e9c181d6 100755
--- a/drivers/media/dvb-core/dvb_frontend.c
+++ b/drivers/media/dvb-core/dvb_frontend.c
@@ -234,7 +234,7 @@ static void dvb_frontend_add_event(struct dvb_frontend *fe, fe_status_t status)
 
 	dev_dbg(fe->dvb->device, "%s:\n", __func__);
 
-	if ((status & FE_HAS_LOCK) && has_get_frontend(fe))
+	if (/*(status & FE_HAS_LOCK) && */has_get_frontend(fe))
 		dtv_get_frontend(fe, &fepriv->parameters_out);
 
 	mutex_lock(&events->mtx);
@@ -248,7 +248,7 @@ static void dvb_frontend_add_event(struct dvb_frontend *fe, fe_status_t status)
 	e = &events->events[events->eventw];
 	e->status = status;
 	e->parameters = fepriv->parameters_out;
-
+	printk("[get frontend2] freq is %d\n",e->parameters.frequency);
 	events->eventw = wp;
 
 	mutex_unlock(&events->mtx);
@@ -290,6 +290,7 @@ static int dvb_frontend_get_event(struct dvb_frontend *fe,
 	mutex_lock(&events->mtx);
 	*event = events->events[events->eventr];
 	events->eventr = (events->eventr + 1) % MAX_EVENT;
+	printk("[get frontend1] freq is %d\n",event->parameters.frequency);
 	mutex_unlock(&events->mtx);
 
 	return 0;
@@ -1580,7 +1581,7 @@ static int dtv_property_legacy_params_sync(struct dvb_frontend *fe,
 
 	p->frequency = c->frequency;
 	p->inversion = c->inversion;
-
+	printk("[get frontend]p is %d\n",p->frequency);
 	switch (dvbv3_type(c->delivery_system)) {
 	case DVBV3_UNKNOWN:
 		dev_err(fe->dvb->device,
@@ -2562,16 +2563,16 @@ static int dtv_set_frontend(struct dvb_frontend *fe)
 		case SYS_DVBC_ANNEX_A:
 		case SYS_DVBC_ANNEX_C:
 			fepriv->min_delay = HZ / 20;
-			fepriv->step_size = c->symbol_rate / 16000;
-			fepriv->max_drift = c->symbol_rate / 2000;
+			fepriv->step_size = 0;
+			fepriv->max_drift = 0;
 			break;
 		case SYS_DVBT:
 		case SYS_DVBT2:
 		case SYS_ISDBT:
 		case SYS_DTMB:
 			fepriv->min_delay = HZ / 20;
-			fepriv->step_size = fe->ops.info.frequency_stepsize * 2;
-			fepriv->max_drift = (fe->ops.info.frequency_stepsize * 2) + 1;
+			fepriv->step_size = 0;//fe->ops.info.frequency_stepsize * 2;
+			fepriv->max_drift = 0;//(fe->ops.info.frequency_stepsize * 2) + 1;
 			break;
 		default:
 			/*
-- 
2.19.0

