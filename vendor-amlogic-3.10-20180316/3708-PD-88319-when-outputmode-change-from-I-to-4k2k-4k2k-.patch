From 2db4919a5a1f69827a4292491e2afebf05418c79 Mon Sep 17 00:00:00 2001
From: "wei.nie" <wei.nie@amlogic.com>
Date: Thu, 6 Mar 2014 20:33:26 +0800
Subject: [PATCH 3708/5965] PD# 88319:when outputmode change from I to 4k2k,
 4k2k display shaking

---
 drivers/amlogic/display/osd/osd_antiflicker.c | 276 +++++++++---------
 drivers/amlogic/display/osd/osd_hw.c          |   1 +
 2 files changed, 141 insertions(+), 136 deletions(-)

diff --git a/drivers/amlogic/display/osd/osd_antiflicker.c b/drivers/amlogic/display/osd/osd_antiflicker.c
index 380209996131..31dc62ef3d96 100755
--- a/drivers/amlogic/display/osd/osd_antiflicker.c
+++ b/drivers/amlogic/display/osd/osd_antiflicker.c
@@ -19,7 +19,7 @@
  *
  * Author: Platform-BJ@amlogic.com
  *
- */
+ */
 
 #include <linux/kernel.h>
 #include <linux/types.h>
@@ -40,58 +40,60 @@
 #include <mach/am_regs.h>
 #include <mach/mod_gate.h>
 
-#include "osd_antiflicker.h"
-
+#include "osd_antiflicker.h"
+
 typedef struct {
-	bool inited;
-	u32 yoffset;
-	u32 yres;
+	bool inited;
+	u32 yoffset;
+	u32 yres;
 	config_para_ex_t ge2d_config;
 	ge2d_context_t *ge2d_context;
-} osd_antiflicker_t;
-
-static DEFINE_MUTEX(osd_antiflicker_mutex);
-static osd_antiflicker_t ge2d_osd_antiflicker;
-
-void osd_antiflicker_enable(u32 enable)
+} osd_antiflicker_t;
+
+static DEFINE_MUTEX(osd_antiflicker_mutex);
+static osd_antiflicker_t ge2d_osd_antiflicker;
+
+#ifdef OSD_GE2D_ANTIFLICKER_SUPPORT
+void osd_antiflicker_enable(u32 enable)
 {
-	ge2d_antiflicker_enable(ge2d_osd_antiflicker.ge2d_context, enable);
-}
-
-#if 0
-static void osd_antiflicker_process(void)
+	ge2d_antiflicker_enable(ge2d_osd_antiflicker.ge2d_context, enable);
+}
+#endif
+
+#if 0
+static void osd_antiflicker_process(void)
 {
 	canvas_t cs, cd;
 	u32 x0 = 0;
 	u32 y0 = 0;
 	u32 y1 = 0;
-
-	config_para_ex_t *ge2d_config = &ge2d_osd_antiflicker.ge2d_config;
-	ge2d_context_t *context = ge2d_osd_antiflicker.ge2d_context;
+
+	config_para_ex_t *ge2d_config = &ge2d_osd_antiflicker.ge2d_config;
+	ge2d_context_t *context = ge2d_osd_antiflicker.ge2d_context;
 
 	canvas_read(OSD1_CANVAS_INDEX, &cs);
-	canvas_read(OSD2_CANVAS_INDEX, &cd);
+	canvas_read(OSD2_CANVAS_INDEX, &cd);
 
-	if (ge2d_osd_antiflicker.pan == 1) {
+	if (ge2d_osd_antiflicker.pan == 1) {
 		y0 = cs.height/2;
-		//y1 = cd.height/2;
-	}
+		//y1 = cd.height/2;
+	}
 
 	memset(ge2d_config, 0, sizeof(config_para_ex_t));
 	ge2d_config->alu_const_color = 0;
 	ge2d_config->bitmask_en = 0;
-	ge2d_config->src1_gb_alpha = 0;
+	ge2d_config->src1_gb_alpha = 0;
 
 	ge2d_config->src_planes[0].addr = cs.addr;
 	ge2d_config->src_planes[0].w = cs.width/4;
-	ge2d_config->src_planes[0].h = cs.height;
+	ge2d_config->src_planes[0].h = cs.height;
 
 	ge2d_config->dst_planes[0].addr = cd.addr;
 	ge2d_config->dst_planes[0].w = cd.width/4;
 	ge2d_config->dst_planes[0].h = cd.height;
 
 	ge2d_config->src_para.canvas_index = OSD1_CANVAS_INDEX;
-	ge2d_config->src_para.mem_type = CANVAS_OSD0;
+	ge2d_config->src_para.mem_type = CANVAS_OSD0;
 	ge2d_config->dst_para.format = GE2D_FORMAT_S32_ARGB;
 	ge2d_config->src_para.fill_color_en = 0;
 	ge2d_config->src_para.fill_mode = 0;
@@ -101,10 +103,10 @@ static void osd_antiflicker_process(void)
 	ge2d_config->src_para.top = 0;
 	ge2d_config->src_para.left = 0;
 	ge2d_config->src_para.width = cs.width/4;
-	ge2d_config->src_para.height = cs.height;
+	ge2d_config->src_para.height = cs.height;
 
-	ge2d_config->dst_para.canvas_index = OSD2_CANVAS_INDEX;
-	ge2d_config->dst_para.mem_type = CANVAS_OSD1;
+	ge2d_config->dst_para.canvas_index = OSD2_CANVAS_INDEX;
+	ge2d_config->dst_para.mem_type = CANVAS_OSD1;
 	ge2d_config->dst_para.format = GE2D_FORMAT_S32_ARGB;
 	ge2d_config->dst_para.top = 0;
 	ge2d_config->dst_para.left = 0;
@@ -112,40 +114,40 @@ static void osd_antiflicker_process(void)
 	ge2d_config->dst_para.height = cd.height;
 	ge2d_config->dst_para.fill_color_en = 0;
 	ge2d_config->dst_para.fill_mode = 0;
-	ge2d_config->dst_para.color = 0;
-	ge2d_config->dst_para.x_rev = 0;
-	ge2d_config->dst_para.y_rev = 0;
-	ge2d_config->dst_xy_swap = 0;
-
+	ge2d_config->dst_para.color = 0;
+	ge2d_config->dst_para.x_rev = 0;
+	ge2d_config->dst_para.y_rev = 0;
+	ge2d_config->dst_xy_swap = 0;
+
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		printk("++ osd antiflicker ge2d config error.\n");
+		printk("++ osd antiflicker ge2d config error.\n");
 		return;
 	}
-	stretchblt(context, x0, y0, cs.width/4, cs.height/2, x0, y1, cd.width/4, cd.height);
-}
-
-static void osd_antiflicker_process_2(void)
+	stretchblt(context, x0, y0, cs.width/4, cs.height/2, x0, y1, cd.width/4, cd.height);
+}
+
+static void osd_antiflicker_process_2(void)
 {
 	canvas_t cs, cd;
 	u32 x0 = 0;
 	u32 y0 = 0;
 	u32 y1 = 0;
-
-	config_para_ex_t *ge2d_config = &ge2d_osd_antiflicker.ge2d_config;
-	ge2d_context_t *context = ge2d_osd_antiflicker.ge2d_context;
 
-	canvas_read(OSD2_CANVAS_INDEX, &cs);
-	canvas_read(OSD1_CANVAS_INDEX, &cd);
+	config_para_ex_t *ge2d_config = &ge2d_osd_antiflicker.ge2d_config;
+	ge2d_context_t *context = ge2d_osd_antiflicker.ge2d_context;
+
+	canvas_read(OSD2_CANVAS_INDEX, &cs);
+	canvas_read(OSD1_CANVAS_INDEX, &cd);
 
-	if (ge2d_osd_antiflicker.pan == 1) {
-		//y0 = cs.height/2;
-		y1 = cd.height/2;
-	}
+	if (ge2d_osd_antiflicker.pan == 1) {
+		//y0 = cs.height/2;
+		y1 = cd.height/2;
+	}
 
 	memset(ge2d_config, 0, sizeof(config_para_ex_t));
 	ge2d_config->alu_const_color = 0;
 	ge2d_config->bitmask_en = 0;
-	ge2d_config->src1_gb_alpha = 0;
+	ge2d_config->src1_gb_alpha = 0;
 
 	ge2d_config->src_planes[0].addr = cs.addr;
 	ge2d_config->src_planes[0].w = cs.width/4;
@@ -153,10 +155,10 @@ static void osd_antiflicker_process_2(void)
 
 	ge2d_config->dst_planes[0].addr = cd.addr;
 	ge2d_config->dst_planes[0].w = cd.width/4;
-	ge2d_config->dst_planes[0].h = cd.height;
+	ge2d_config->dst_planes[0].h = cd.height;
 
-	ge2d_config->src_para.canvas_index = OSD2_CANVAS_INDEX;
-	ge2d_config->src_para.mem_type = CANVAS_OSD1;
+	ge2d_config->src_para.canvas_index = OSD2_CANVAS_INDEX;
+	ge2d_config->src_para.mem_type = CANVAS_OSD1;
 	ge2d_config->dst_para.format = GE2D_FORMAT_S32_ARGB;
 	ge2d_config->src_para.fill_color_en = 0;
 	ge2d_config->src_para.fill_mode = 0;
@@ -168,63 +170,63 @@ static void osd_antiflicker_process_2(void)
 	ge2d_config->src_para.width = cs.width/4;
 	ge2d_config->src_para.height = cs.height;
 
-	ge2d_config->dst_para.canvas_index = OSD1_CANVAS_INDEX;
-	ge2d_config->dst_para.mem_type = CANVAS_OSD0;
+	ge2d_config->dst_para.canvas_index = OSD1_CANVAS_INDEX;
+	ge2d_config->dst_para.mem_type = CANVAS_OSD0;
 	ge2d_config->dst_para.format = GE2D_FORMAT_S32_ARGB;
 	ge2d_config->dst_para.top = 0;
 	ge2d_config->dst_para.left = 0;
 	ge2d_config->dst_para.width = cd.width/4;
-	ge2d_config->dst_para.height = cd.height;
+	ge2d_config->dst_para.height = cd.height;
 	ge2d_config->dst_para.fill_color_en = 0;
 	ge2d_config->dst_para.fill_mode = 0;
-	ge2d_config->dst_para.color = 0;
-	ge2d_config->dst_para.x_rev = 0;
-	ge2d_config->dst_para.y_rev = 0;
-	ge2d_config->dst_xy_swap = 0;
-
+	ge2d_config->dst_para.color = 0;
+	ge2d_config->dst_para.x_rev = 0;
+	ge2d_config->dst_para.y_rev = 0;
+	ge2d_config->dst_xy_swap = 0;
+
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		printk("++ osd antiflicker ge2d config error.\n");
+		printk("++ osd antiflicker ge2d config error.\n");
 		return;
 	}
-	stretchblt(context, x0, y0, cs.width/4, cs.height, x0, y1, cd.width/4, cd.height/2);
-}
-#endif
-
-static void osd_antiflicker_process(void)
+	stretchblt(context, x0, y0, cs.width/4, cs.height, x0, y1, cd.width/4, cd.height/2);
+}
+#endif
+
+static void osd_antiflicker_process(void)
 {
 	canvas_t cs, cd;
 	u32 x0 = 0;
 	u32 y0 = 0;
 	u32 y1 = 0;
-	u32 yres = 0;
-
-	config_para_ex_t *ge2d_config = &ge2d_osd_antiflicker.ge2d_config;
-	ge2d_context_t *context = ge2d_osd_antiflicker.ge2d_context;
-
-	canvas_read(OSD1_CANVAS_INDEX, &cs);
-	canvas_read(OSD1_CANVAS_INDEX, &cd);
-
-	if (ge2d_osd_antiflicker.yoffset > 0) {
-		y0 = ge2d_osd_antiflicker.yoffset;
-		y1 = ge2d_osd_antiflicker.yoffset;
-	}
-
-	yres = cs.height/ge2d_osd_antiflicker.yres;
+	u32 yres = 0;
+
+	config_para_ex_t *ge2d_config = &ge2d_osd_antiflicker.ge2d_config;
+	ge2d_context_t *context = ge2d_osd_antiflicker.ge2d_context;
+
+	canvas_read(OSD1_CANVAS_INDEX, &cs);
+	canvas_read(OSD1_CANVAS_INDEX, &cd);
+
+	if (ge2d_osd_antiflicker.yoffset > 0) {
+		y0 = ge2d_osd_antiflicker.yoffset;
+		y1 = ge2d_osd_antiflicker.yoffset;
+	}
+
+	yres = cs.height/ge2d_osd_antiflicker.yres;
 	memset(ge2d_config, 0, sizeof(config_para_ex_t));
 	ge2d_config->alu_const_color = 0;
 	ge2d_config->bitmask_en = 0;
-	ge2d_config->src1_gb_alpha = 0;
+	ge2d_config->src1_gb_alpha = 0;
 
 	ge2d_config->src_planes[0].addr = cs.addr;
 	ge2d_config->src_planes[0].w = cs.width/4;
-	ge2d_config->src_planes[0].h = cs.height;
+	ge2d_config->src_planes[0].h = cs.height;
 
 	ge2d_config->dst_planes[0].addr = cd.addr;
 	ge2d_config->dst_planes[0].w = cd.width/4;
-	ge2d_config->dst_planes[0].h = cd.height;
+	ge2d_config->dst_planes[0].h = cd.height;
 
-	ge2d_config->src_para.canvas_index = OSD1_CANVAS_INDEX;
-	ge2d_config->src_para.mem_type = CANVAS_OSD0;
+	ge2d_config->src_para.canvas_index = OSD1_CANVAS_INDEX;
+	ge2d_config->src_para.mem_type = CANVAS_OSD0;
 	ge2d_config->dst_para.format = GE2D_FORMAT_S32_ARGB;
 	ge2d_config->src_para.fill_color_en = 0;
 	ge2d_config->src_para.fill_mode = 0;
@@ -234,81 +236,83 @@ static void osd_antiflicker_process(void)
 	ge2d_config->src_para.top = 0;
 	ge2d_config->src_para.left = 0;
 	ge2d_config->src_para.width = cs.width/4;
-	ge2d_config->src_para.height = cs.height;
+	ge2d_config->src_para.height = cs.height;
 
-	ge2d_config->dst_para.canvas_index = OSD1_CANVAS_INDEX;
-	ge2d_config->dst_para.mem_type = CANVAS_OSD0;
+	ge2d_config->dst_para.canvas_index = OSD1_CANVAS_INDEX;
+	ge2d_config->dst_para.mem_type = CANVAS_OSD0;
 	ge2d_config->dst_para.format = GE2D_FORMAT_S32_ARGB;
 	ge2d_config->dst_para.top = 0;
 	ge2d_config->dst_para.left = 0;
 	ge2d_config->dst_para.width = cd.width/4;
-	ge2d_config->dst_para.height = cd.height;
+	ge2d_config->dst_para.height = cd.height;
 	ge2d_config->dst_para.fill_color_en = 0;
 	ge2d_config->dst_para.fill_mode = 0;
-	ge2d_config->dst_para.color = 0;
-	ge2d_config->dst_para.x_rev = 0;
-	ge2d_config->dst_para.y_rev = 0;
-	ge2d_config->dst_xy_swap = 0;
-
+	ge2d_config->dst_para.color = 0;
+	ge2d_config->dst_para.x_rev = 0;
+	ge2d_config->dst_para.y_rev = 0;
+	ge2d_config->dst_xy_swap = 0;
+
 	if (ge2d_context_config_ex(context, ge2d_config) < 0) {
-		printk("++ osd antiflicker ge2d config ex error.\n");
+		printk("++ osd antiflicker ge2d config ex error.\n");
 		return;
 	}
-	stretchblt(context, x0, y0, cs.width/4, (cs.height/yres), x0, y1, cd.width/4, (cd.height/yres));
-}
-
-void osd_antiflicker_update_pan(u32 yoffset, u32 yres)
+	stretchblt(context, x0, y0, cs.width/4, (cs.height/yres), x0, y1, cd.width/4, (cd.height/yres));
+}
+
+#ifdef OSD_GE2D_ANTIFLICKER_SUPPORT
+void osd_antiflicker_update_pan(u32 yoffset, u32 yres)
 {
-	if (!ge2d_osd_antiflicker.inited)
+	if (!ge2d_osd_antiflicker.inited)
 		return;
 
-	mutex_lock(&osd_antiflicker_mutex);
-	ge2d_osd_antiflicker.yoffset= yoffset;
-	ge2d_osd_antiflicker.yres = yres;
-	mutex_unlock(&osd_antiflicker_mutex);
-#if 0
-	osd_antiflicker_process();
-	osd_antiflicker_process_2();
-#endif
-	osd_antiflicker_process();
-}
-
-int osd_antiflicker_task_start(void)
+	mutex_lock(&osd_antiflicker_mutex);
+	ge2d_osd_antiflicker.yoffset= yoffset;
+	ge2d_osd_antiflicker.yres = yres;
+	mutex_unlock(&osd_antiflicker_mutex);
+#if 0
+	osd_antiflicker_process();
+	osd_antiflicker_process_2();
+#endif
+	osd_antiflicker_process();
+}
+
+int osd_antiflicker_task_start(void)
 {
-	if (ge2d_osd_antiflicker.inited) {
-		printk("osd_antiflicker_task already started.\n");
+	if (ge2d_osd_antiflicker.inited) {
+		printk("osd_antiflicker_task already started.\n");
 		return 0;
 	}
 
-	printk("osd_antiflicker_task start.\n");
+	printk("osd_antiflicker_task start.\n");
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 	switch_mod_gate_by_name("ge2d", 1);
 #endif
-	if (ge2d_osd_antiflicker.ge2d_context == NULL){
-		ge2d_osd_antiflicker.ge2d_context = create_ge2d_work_queue();
-	}
+	if (ge2d_osd_antiflicker.ge2d_context == NULL){
+		ge2d_osd_antiflicker.ge2d_context = create_ge2d_work_queue();
+	}
 
-	memset(&ge2d_osd_antiflicker.ge2d_config, 0, sizeof(config_para_ex_t));
-	ge2d_osd_antiflicker.inited = true;
+	memset(&ge2d_osd_antiflicker.ge2d_config, 0, sizeof(config_para_ex_t));
+	ge2d_osd_antiflicker.inited = true;
 
 	return 0;
-}
-
-void osd_antiflicker_task_stop(void)
+}
+
+void osd_antiflicker_task_stop(void)
 {
-	if (!ge2d_osd_antiflicker.inited) {
-		printk("osd_antiflicker_task already stopped.\n");
+	if (!ge2d_osd_antiflicker.inited) {
+		printk("osd_antiflicker_task already stopped.\n");
 		return;
 	}
 
-	printk("osd_antiflicker_task stop.\n");
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-	switch_mod_gate_by_name("ge2d", 0);
-#endif
-	if (ge2d_osd_antiflicker.ge2d_context) {
-		destroy_ge2d_work_queue(ge2d_osd_antiflicker.ge2d_context);
-		ge2d_osd_antiflicker.ge2d_context = NULL;
+	printk("osd_antiflicker_task stop.\n");
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	switch_mod_gate_by_name("ge2d", 0);
+#endif
+	if (ge2d_osd_antiflicker.ge2d_context) {
+		destroy_ge2d_work_queue(ge2d_osd_antiflicker.ge2d_context);
+		ge2d_osd_antiflicker.ge2d_context = NULL;
 	}
-	ge2d_osd_antiflicker.inited = false;
-}
-
+	ge2d_osd_antiflicker.inited = false;
+}
+#endif
+
diff --git a/drivers/amlogic/display/osd/osd_hw.c b/drivers/amlogic/display/osd/osd_hw.c
index 2302dcd77ce2..d3575ef94d25 100755
--- a/drivers/amlogic/display/osd/osd_hw.c
+++ b/drivers/amlogic/display/osd/osd_hw.c
@@ -502,6 +502,7 @@ void osd_set_scan_mode(int index)
 					osd_hw.scale_workaround = 1;
 				}
 			}
+			osd_hw.field_out_en = 0;
 		break;
 		default:
 			if(osd_hw.free_scale_mode[index]){
-- 
2.19.0

