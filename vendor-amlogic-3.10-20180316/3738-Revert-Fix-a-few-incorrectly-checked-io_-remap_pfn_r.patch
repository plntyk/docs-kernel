From 158919308fbdcf450544766f527e63e4c5fe5496 Mon Sep 17 00:00:00 2001
From: Jerry Cao <jerry.cao@amlogic.com>
Date: Fri, 14 Mar 2014 13:06:33 -0700
Subject: [PATCH 3738/5965] Revert "Fix a few incorrectly checked
 [io_]remap_pfn_range() calls"

Temporarily revert 3.10 UIO change before fixing audio driver.

This reverts commit c79c7ad9d1398787f907f85afc44cf7d6623027d.
---
 drivers/uio/uio.c        | 17 ++---------------
 drivers/video/au1100fb.c | 26 +++++++++++++++++++++++++-
 drivers/video/au1200fb.c | 23 ++++++++++++++++++++++-
 3 files changed, 49 insertions(+), 17 deletions(-)

diff --git a/drivers/uio/uio.c b/drivers/uio/uio.c
index 2d57a00dc173..bcdcb4c2132c 100644
--- a/drivers/uio/uio.c
+++ b/drivers/uio/uio.c
@@ -654,29 +654,16 @@ static int uio_mmap_physical(struct vm_area_struct *vma)
 {
 	struct uio_device *idev = vma->vm_private_data;
 	int mi = uio_find_mem_index(vma);
-	struct uio_mem *mem;
 	if (mi < 0)
 		return -EINVAL;
-	mem = idev->info->mem + mi;
-
-	if (vma->vm_end - vma->vm_start > mem->size)
-		return -EINVAL;
 
 	vma->vm_ops = &uio_physical_vm_ops;
+
 	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
 
-	/*
-	 * We cannot use the vm_iomap_memory() helper here,
-	 * because vma->vm_pgoff is the map index we looked
-	 * up above in uio_find_mem_index(), rather than an
-	 * actual page offset into the mmap.
-	 *
-	 * So we just do the physical mmap without a page
-	 * offset.
-	 */
 	return remap_pfn_range(vma,
 			       vma->vm_start,
-			       mem->addr >> PAGE_SHIFT,
+			       idev->info->mem[mi].addr >> PAGE_SHIFT,
 			       vma->vm_end - vma->vm_start,
 			       vma->vm_page_prot);
 }
diff --git a/drivers/video/au1100fb.c b/drivers/video/au1100fb.c
index bdc515f5e979..ebeb9715f061 100644
--- a/drivers/video/au1100fb.c
+++ b/drivers/video/au1100fb.c
@@ -361,13 +361,37 @@ void au1100fb_fb_rotate(struct fb_info *fbi, int angle)
 int au1100fb_fb_mmap(struct fb_info *fbi, struct vm_area_struct *vma)
 {
 	struct au1100fb_device *fbdev;
+	unsigned int len;
+	unsigned long start=0, off;
 
 	fbdev = to_au1100fb_device(fbi);
 
+	if (vma->vm_pgoff > (~0UL >> PAGE_SHIFT)) {
+		return -EINVAL;
+	}
+
+	start = fbdev->fb_phys & PAGE_MASK;
+	len = PAGE_ALIGN((start & ~PAGE_MASK) + fbdev->fb_len);
+
+	off = vma->vm_pgoff << PAGE_SHIFT;
+
+	if ((vma->vm_end - vma->vm_start + off) > len) {
+		return -EINVAL;
+	}
+
+	off += start;
+	vma->vm_pgoff = off >> PAGE_SHIFT;
+
 	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
 	pgprot_val(vma->vm_page_prot) |= (6 << 9); //CCA=6
 
-	return vm_iomap_memory(vma, fbdev->fb_phys, fbdev->fb_len);
+	if (io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT,
+				vma->vm_end - vma->vm_start,
+				vma->vm_page_prot)) {
+		return -EAGAIN;
+	}
+
+	return 0;
 }
 
 static struct fb_ops au1100fb_ops =
diff --git a/drivers/video/au1200fb.c b/drivers/video/au1200fb.c
index 1d02897d17f2..301224ecc950 100644
--- a/drivers/video/au1200fb.c
+++ b/drivers/video/au1200fb.c
@@ -1233,13 +1233,34 @@ static int au1200fb_fb_blank(int blank_mode, struct fb_info *fbi)
  * method mainly to allow the use of the TLB streaming flag (CCA=6)
  */
 static int au1200fb_fb_mmap(struct fb_info *info, struct vm_area_struct *vma)
+
 {
+	unsigned int len;
+	unsigned long start=0, off;
 	struct au1200fb_device *fbdev = info->par;
 
+	if (vma->vm_pgoff > (~0UL >> PAGE_SHIFT)) {
+		return -EINVAL;
+	}
+
+	start = fbdev->fb_phys & PAGE_MASK;
+	len = PAGE_ALIGN((start & ~PAGE_MASK) + fbdev->fb_len);
+
+	off = vma->vm_pgoff << PAGE_SHIFT;
+
+	if ((vma->vm_end - vma->vm_start + off) > len) {
+		return -EINVAL;
+	}
+
+	off += start;
+	vma->vm_pgoff = off >> PAGE_SHIFT;
+
 	vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
 	pgprot_val(vma->vm_page_prot) |= _CACHE_MASK; /* CCA=7 */
 
-	return vm_iomap_memory(vma, fbdev->fb_phys, fbdev->fb_len);
+	return io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT,
+				  vma->vm_end - vma->vm_start,
+				  vma->vm_page_prot);
 }
 
 static void set_global(u_int cmd, struct au1200_lcd_global_regs_t *pdata)
-- 
2.19.0

