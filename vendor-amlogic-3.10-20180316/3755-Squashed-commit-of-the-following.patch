From df26cdc45e0745bf0c9974067a26168634ad8927 Mon Sep 17 00:00:00 2001
From: "zongdong.jiao" <zongdong.jiao@amlogic.com>
Date: Mon, 17 Mar 2014 11:14:08 +0800
Subject: [PATCH 3755/5965] Squashed commit of the following:

commit eb5b47b8c0cd695e0d686020fdcde225b2ff1e64
Author: zongdong.jiao <zongdong.jiao@amlogic.com>
Date:   Fri Mar 14 18:26:22 2014 +0800

    PD #88789: hdmitx: audio: fix a auc_cap error

commit 946be9d4c3a43f0d7fbf92a4227e14a04876be14
Author: zongdong.jiao <zongdong.jiao@amlogic.com>
Date:   Fri Mar 14 14:51:18 2014 +0800

    PD #88789: hdmitx: audio: optimize hdmitx_notify_callback_a()
---
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c        | 207 +++++++-----------
 .../linux/amlogic/hdmi_tx/hdmi_info_global.h  |  27 ++-
 2 files changed, 99 insertions(+), 135 deletions(-)

diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index 362b076533bb..5ebff3c02b02 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -698,7 +698,7 @@ static ssize_t show_disp_cap_3d(struct device * dev, struct device_attribute *at
 static ssize_t show_aud_cap(struct device * dev, struct device_attribute *attr, char * buf)
 {
     int i,pos=0, j;
-    const char* aud_coding_type[] =  {"ReferToStreamHeader", "PCM", "AC-3", "MPEG1", "MP3", "MPEG2", "AAC", "DTS_ATRAC",
+    const char* aud_coding_type[] =  {"ReferToStreamHeader", "PCM", "AC-3", "MPEG1", "MP3", "MPEG2", "AAC", "DTS", "ATRAC",
                 "OneBitAudio", "Dobly_Digital+", "DTS-HD", "MAT", "DST", "WMA_Pro", "Reserved", NULL};
     const char* aud_sampling_frequency[] = {"ReferToStreamHeader", "32", "44.1", "48", "88.2", "96", "176.4", "192", NULL};
     const char* aud_sample_size[] = {"ReferToStreamHeader", "16", "20", "24", NULL};
@@ -893,6 +893,72 @@ static struct notifier_block hdmitx_notifier_nb_v2 = {
 #include <sound/initval.h>
 #include <sound/control.h>
 
+static struct rate_map_fs map_fs[] = {
+    {0,      FS_REFER_TO_STREAM},
+    {32000,  FS_32K},
+    {44100,  FS_44K1},
+    {48000,  FS_48K},
+    {88200,  FS_88K2},
+    {96000,  FS_96K},
+    {176400, FS_176K4},
+    {192000, FS_192K},
+};
+
+static audio_fs_t aud_samp_rate_map(unsigned int rate)
+{
+    int i = 0;
+
+    for(i = 0; i < ARRAY_SIZE(map_fs); i++) {
+        if(map_fs[i].rate == rate) {
+            hdmi_print(IMP, AUD "aout notify rate %d\n", rate);
+            return map_fs[i].fs;
+        }
+    }
+    hdmi_print(IMP, AUD "get FS_MAX\n");
+    return FS_MAX;
+}
+
+static unsigned char *aud_type_string[] = {
+    "CT_REFER_TO_STREAM",
+    "CT_PCM",
+    "CT_AC_3",
+    "CT_MPEG1",
+    "CT_MP3",
+    "CT_MPEG2",
+    "CT_AAC",
+    "CT_DTS",
+    "CT_ATRAC",
+    "CT_ONE_BIT_AUDIO",
+    "CT_DOLBY_D",
+    "CT_DTS_HD",
+    "CT_MAT",
+    "CT_DST",
+    "CT_WMA",
+    "CT_MAX",
+};
+
+static struct size_map_ss aud_size_map_ss[] = {
+    {0,     SS_REFER_TO_STREAM},
+    {16,    SS_16BITS},
+    {20,    SS_20BITS},
+    {24,    SS_24BITS},
+    {32,    SS_MAX},
+};
+
+static audio_sample_size_t aud_size_map(unsigned int bits)
+{
+    int i;
+
+    for(i = 0; i < ARRAY_SIZE(aud_size_map_ss); i ++) {
+        if(bits == aud_size_map_ss[i].sample_bits) {
+            hdmi_print(IMP, AUD "aout notify size %d\n", bits);
+            return aud_size_map_ss[i].ss;
+        }
+    }
+    hdmi_print(IMP, AUD "get SS_MAX\n");
+    return SS_MAX;
+}
+
 extern int aout_register_client(struct notifier_block * ) ;
 extern int aout_unregister_client(struct notifier_block * ) ;
 static int hdmitx_notify_callback_a(struct notifier_block *block, unsigned long cmd , void *para);
@@ -903,134 +969,25 @@ static int hdmitx_notify_callback_a(struct notifier_block *block, unsigned long
 {
     struct snd_pcm_substream *substream =(struct snd_pcm_substream*)para;
     Hdmi_tx_audio_para_t* audio_param = &(hdmitx_device.cur_audio_param);
+    audio_fs_t n_rate = aud_samp_rate_map(substream->runtime->rate);
+    audio_sample_size_t n_size = aud_size_map(substream->runtime->sample_bits);
 
     hdmitx_device.audio_param_update_flag = 0;
-    switch (substream->runtime->rate) {
-        case 192000:
-            audio_param->sample_rate = FS_192K;
-            break;
-        case 176400:
-            audio_param->sample_rate = FS_176K4;
-            break;
-        case 96000:
-            audio_param->sample_rate = FS_96K;
-            break;
-        case 88200:
-            audio_param->sample_rate = FS_88K2;
-            break;
-        case 48000:
-            if(audio_param->sample_rate != FS_48K) {
-                audio_param->sample_rate = FS_48K; 
-                hdmitx_device.audio_param_update_flag = 1;
-            }
-            break;
-        case 44100:
-            if(audio_param->sample_rate != FS_44K1) {
-                audio_param->sample_rate = FS_44K1;
-                hdmitx_device.audio_param_update_flag = 1;
-            }
-            break;
-        case 32000:
-            audio_param->sample_rate = FS_32K;
-            break;
-        default:
-            hdmi_print(ERR, AUD "unknown audio frequence %d\n", substream->runtime->rate);
-            break;
+
+    if(audio_param->sample_rate != n_rate) {
+        audio_param->sample_rate = n_rate;
+        hdmitx_device.audio_param_update_flag = 1;
     }
-    hdmi_print(INF, AUD "aout notify rate %d\n", substream->runtime->rate);
 
-    switch (cmd){
-    case AOUT_EVENT_IEC_60958_PCM:
-        if(audio_param->type != CT_PCM) {
-            audio_param->type = CT_PCM;
-            hdmitx_device.audio_param_update_flag = 1;
-        }
-        if(audio_param->sample_size != SS_16BITS) {
-            audio_param->sample_size = SS_16BITS;
-            hdmitx_device.audio_param_update_flag = 1;
-        }
-        hdmi_print(INF, AUD "aout notify format PCM\n");
-        break;
-    case AOUT_EVENT_RAWDATA_AC_3:
-        if(audio_param->type != CT_AC_3) {
-            audio_param->type = CT_AC_3;
-            hdmitx_device.audio_param_update_flag = 1;
-        }
-        if(audio_param->sample_size = SS_16BITS ) {
-            audio_param->sample_size = SS_16BITS;
-            hdmitx_device.audio_param_update_flag = 1;
-        }
-        hdmi_print(INF, AUD "aout notify format AC-3\n");
-        break;
-    case AOUT_EVENT_RAWDATA_MPEG1:
-        audio_param->type = CT_MPEG1;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format MPEG1(Layer1 2)\n");
-        break;
-    case AOUT_EVENT_RAWDATA_MP3:
-        audio_param->type = CT_MP3;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format MP3(MPEG1 Layer3)\n");
-        break;
-    case AOUT_EVENT_RAWDATA_MPEG2:
-        audio_param->type = CT_MPEG2;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format MPEG2\n");
-        break;
-    case AOUT_EVENT_RAWDATA_AAC:
-        audio_param->type = CT_AAC;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format AAC\n");
-        break;
-    case AOUT_EVENT_RAWDATA_DTS:
-        audio_param->type = CT_DTS;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format DTS\n");
-        break;
-    case AOUT_EVENT_RAWDATA_ATRAC:
-        audio_param->type = CT_ATRAC;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format ATRAC\n");
-        break;
-    case AOUT_EVENT_RAWDATA_ONE_BIT_AUDIO:
-        audio_param->type = CT_ONE_BIT_AUDIO;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format One Bit Audio\n");
-        break;
-    case AOUT_EVENT_RAWDATA_DOBLY_DIGITAL_PLUS:
-        if(audio_param->type != CT_DOLBY_D) {
-            audio_param->type = CT_DOLBY_D;
-            hdmitx_device.audio_param_update_flag = 1;
-        }
-        if(audio_param->sample_size != SS_16BITS) {
-            audio_param->sample_size = SS_16BITS;
-            hdmitx_device.audio_param_update_flag = 1;
-        }
-        //audio_param->sample_rate = FS_48K;//192K;      // FS_48K;       //
-        hdmi_print(INF, AUD "aout notify format Dobly Digital +\n");
-        break;
-    case AOUT_EVENT_RAWDATA_DTS_HD:
-        audio_param->type = CT_DTS_HD;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format DTS-HD\n");
-        break;
-    case AOUT_EVENT_RAWDATA_MAT_MLP:
-        audio_param->type = CT_MAT;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format MAT(MLP)\n");
-        break;
-    case AOUT_EVENT_RAWDATA_DST:
-        audio_param->type = CT_DST;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format DST\n");
-        break;
-    case AOUT_EVENT_RAWDATA_WMA_PRO:
-        audio_param->type = CT_WMA;
-        audio_param->sample_size = SS_16BITS;
-        hdmi_print(INF, AUD "aout notify format WMA Pro\n");
-        break;
-    default:
-        break;
+    if(audio_param->type != cmd) {
+        audio_param->type = cmd;
+        hdmi_print(INF, AUD "aout notify format %s\n", aud_type_string[audio_param->type]);
+        hdmitx_device.audio_param_update_flag = 1;
+    }
+
+    if(audio_param->sample_size != n_size) {
+        audio_param->sample_size = n_size;
+        hdmitx_device.audio_param_update_flag = 1;
     }
 
     if(audio_param->channel_num != (substream->runtime->channels - 1)) {
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_info_global.h b/include/linux/amlogic/hdmi_tx/hdmi_info_global.h
index 4f60758f7bbf..81ab4b38994d 100644
--- a/include/linux/amlogic/hdmi_tx/hdmi_info_global.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_info_global.h
@@ -200,18 +200,21 @@ typedef enum
 
 //Sampling Freq Fs:0 - Refer to Stream Header; 1 - 32KHz; 2 - 44.1KHz; 3 - 48KHz; 4 - 88.2KHz...
 typedef enum {
-	FS_REFER_TO_STREAM = 0,
-	FS_32K   = 1,
-	FS_44K1  = 2,
-	FS_48K   = 3,
-	FS_88K2  = 4,
-	FS_96K   = 5,
-	FS_176K4 = 6,
-	FS_192K  = 7,
-        FS_MAX,
+    FS_REFER_TO_STREAM = 0,
+    FS_32K   = 1,
+    FS_44K1  = 2,
+    FS_48K   = 3,
+    FS_88K2  = 4,
+    FS_96K   = 5,
+    FS_176K4 = 6,
+    FS_192K  = 7,
+    FS_MAX,
 }audio_fs_t;
 
-
+struct rate_map_fs {
+    unsigned int rate;
+    audio_fs_t fs;
+};
 
 typedef enum {
     SS_REFER_TO_STREAM = 0,
@@ -221,6 +224,10 @@ typedef enum {
     SS_MAX
 }audio_sample_size_t;
 
+struct size_map_ss {
+    unsigned int sample_bits;
+    audio_sample_size_t ss;
+};
 
 //FL-- Front Left
 //FC --Front Center
-- 
2.19.0

