From 82d40b4bfe31bf7a3bc7893c26b0c824b35236d3 Mon Sep 17 00:00:00 2001
From: Victor Wan <victor.wan@amlogic.com>
Date: Mon, 10 Feb 2014 14:55:19 +0800
Subject: [PATCH 3787/5965] meson8b: compile ok

---
 arch/arm/Makefile                             |     1 +
 arch/arm/configs/meson8b_defconfig            |   283 +
 arch/arm/mach-meson8b/Kconfig                 |    23 +
 arch/arm/mach-meson8b/Kconfig.boards          |     6 +
 arch/arm/mach-meson8b/Makefile                |    43 +
 arch/arm/mach-meson8b/Makefile.boot           |     4 +
 arch/arm/mach-meson8b/aml_gpio.dtd            |     8 +
 arch/arm/mach-meson8b/aml_pin.dtd             |   433 +
 arch/arm/mach-meson8b/aml_pm.dtd              |     9 +
 arch/arm/mach-meson8b/board-meson8b-common.c  |   147 +
 arch/arm/mach-meson8b/cache.c                 |    39 +
 arch/arm/mach-meson8b/clock.c                 |  1752 ++
 arch/arm/mach-meson8b/cpu.c                   |    60 +
 arch/arm/mach-meson8b/gpio.c                  |   687 +
 arch/arm/mach-meson8b/hdmi_tx_hw/Makefile     |     1 +
 .../mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c  |   338 +
 arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c |  3082 ++++
 .../arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_reg.c |   124 +
 arch/arm/mach-meson8b/hdmi_tx_hw/tvenc_conf.h |   231 +
 arch/arm/mach-meson8b/headsmp.S               |    35 +
 arch/arm/mach-meson8b/hotplug-asm.S           |    73 +
 arch/arm/mach-meson8b/hotplug.c               |    60 +
 .../mach-meson8b/include/mach/am_eth_reg.h    |   198 +
 arch/arm/mach-meson8b/include/mach/am_regs.h  |    17 +
 .../mach-meson8b/include/mach/avosstyle_io.h  |   105 +
 arch/arm/mach-meson8b/include/mach/canvas.h   |    48 +
 arch/arm/mach-meson8b/include/mach/card_io.h  |   247 +
 arch/arm/mach-meson8b/include/mach/clock.h    |   160 +
 arch/arm/mach-meson8b/include/mach/cpu.h      |    33 +
 .../mach-meson8b/include/mach/edp_tx_reg.h    |   178 +
 arch/arm/mach-meson8b/include/mach/efuse.h    |     9 +
 arch/arm/mach-meson8b/include/mach/gpio.h     |   171 +
 arch/arm/mach-meson8b/include/mach/gpio_old.h |   978 ++
 arch/arm/mach-meson8b/include/mach/hardware.h |     5 +
 .../include/mach/hdmi_parameter.h             |   870 +
 .../mach-meson8b/include/mach/hdmi_tx_reg.h   |   454 +
 arch/arm/mach-meson8b/include/mach/io.h       |   168 +
 arch/arm/mach-meson8b/include/mach/irqs.h     |   200 +
 arch/arm/mach-meson8b/include/mach/memory.h   |    30 +
 .../mach-meson8b/include/mach/mipi_dsi_reg.h  |   101 +
 .../mach-meson8b/include/mach/mipi_phy_reg.h  |   190 +
 arch/arm/mach-meson8b/include/mach/misc.h     |   143 +
 arch/arm/mach-meson8b/include/mach/mod_gate.h |    54 +
 arch/arm/mach-meson8b/include/mach/pinmux.h   |    76 +
 .../mach-meson8b/include/mach/pinmux_queue.h  |     2 +
 arch/arm/mach-meson8b/include/mach/pm.h       |    32 +
 .../mach-meson8b/include/mach/power_gate.h    |   889 +
 arch/arm/mach-meson8b/include/mach/register.h | 13978 ++++++++++++++++
 arch/arm/mach-meson8b/include/mach/regs.h     |   131 +
 arch/arm/mach-meson8b/include/mach/sd.h       |   658 +
 arch/arm/mach-meson8b/include/mach/smp.h      |    19 +
 arch/arm/mach-meson8b/include/mach/spi_nor.h  |   104 +
 arch/arm/mach-meson8b/include/mach/system.h   |    47 +
 arch/arm/mach-meson8b/include/mach/timex.h    |    27 +
 arch/arm/mach-meson8b/include/mach/tvregs.h   |  1476 ++
 arch/arm/mach-meson8b/include/mach/uart.h     |    32 +
 .../mach-meson8b/include/mach/uncompress.h    |    56 +
 arch/arm/mach-meson8b/include/mach/usb.h      |    27 +
 arch/arm/mach-meson8b/include/mach/usbclock.h |   213 +
 .../mach-meson8b/include/mach/vdac_switch.h   |    39 +
 arch/arm/mach-meson8b/include/mach/vpu.h      |    48 +
 arch/arm/mach-meson8b/iomapping.c             |   176 +
 arch/arm/mach-meson8b/pinctrl.c               |   376 +
 arch/arm/mach-meson8b/pm.c                    |   426 +
 arch/arm/mach-meson8b/power_gate.c            |   723 +
 arch/arm/mach-meson8b/power_suspend.c         |   126 +
 arch/arm/mach-meson8b/sd_pad.c                |   358 +
 arch/arm/mach-meson8b/smp.c                   |   295 +
 arch/arm/mach-meson8b/time.c                  |   567 +
 arch/arm/mach-meson8b/tool/genregs.awk        |   167 +
 arch/arm/mach-meson8b/tool/genregs.sh         |    14 +
 arch/arm/mach-meson8b/tool/m8_gpio.csv        |   141 +
 arch/arm/mach-meson8b/tool/m8genpintab.awk    |   401 +
 arch/arm/mach-meson8b/tool/meson8_syspll.c    |   239 +
 arch/arm/mach-meson8b/tool/syspll.sh          |    36 +
 arch/arm/mach-meson8b/usbclock.c              |   159 +
 arch/arm/mach-meson8b/vpu.c                   |   762 +
 arch/arm/plat-meson/Kconfig                   |    24 +-
 arch/arm/plat-meson/include/plat/cpu.h        |     1 +
 mk_m8b.sh                                     |    20 +
 80 files changed, 34662 insertions(+), 1 deletion(-)
 create mode 100644 arch/arm/configs/meson8b_defconfig
 create mode 100644 arch/arm/mach-meson8b/Kconfig
 create mode 100644 arch/arm/mach-meson8b/Kconfig.boards
 create mode 100644 arch/arm/mach-meson8b/Makefile
 create mode 100644 arch/arm/mach-meson8b/Makefile.boot
 create mode 100644 arch/arm/mach-meson8b/aml_gpio.dtd
 create mode 100644 arch/arm/mach-meson8b/aml_pin.dtd
 create mode 100644 arch/arm/mach-meson8b/aml_pm.dtd
 create mode 100644 arch/arm/mach-meson8b/board-meson8b-common.c
 create mode 100644 arch/arm/mach-meson8b/cache.c
 create mode 100644 arch/arm/mach-meson8b/clock.c
 create mode 100644 arch/arm/mach-meson8b/cpu.c
 create mode 100644 arch/arm/mach-meson8b/gpio.c
 create mode 100644 arch/arm/mach-meson8b/hdmi_tx_hw/Makefile
 create mode 100644 arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
 create mode 100644 arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
 create mode 100644 arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_reg.c
 create mode 100644 arch/arm/mach-meson8b/hdmi_tx_hw/tvenc_conf.h
 create mode 100644 arch/arm/mach-meson8b/headsmp.S
 create mode 100644 arch/arm/mach-meson8b/hotplug-asm.S
 create mode 100644 arch/arm/mach-meson8b/hotplug.c
 create mode 100644 arch/arm/mach-meson8b/include/mach/am_eth_reg.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/am_regs.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/avosstyle_io.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/canvas.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/card_io.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/clock.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/cpu.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/edp_tx_reg.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/efuse.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/gpio.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/gpio_old.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/hardware.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/hdmi_parameter.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/hdmi_tx_reg.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/io.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/irqs.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/memory.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/mipi_dsi_reg.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/mipi_phy_reg.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/misc.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/mod_gate.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/pinmux.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/pinmux_queue.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/pm.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/power_gate.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/register.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/regs.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/sd.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/smp.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/spi_nor.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/system.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/timex.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/tvregs.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/uart.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/uncompress.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/usb.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/usbclock.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/vdac_switch.h
 create mode 100644 arch/arm/mach-meson8b/include/mach/vpu.h
 create mode 100644 arch/arm/mach-meson8b/iomapping.c
 create mode 100644 arch/arm/mach-meson8b/pinctrl.c
 create mode 100644 arch/arm/mach-meson8b/pm.c
 create mode 100644 arch/arm/mach-meson8b/power_gate.c
 create mode 100644 arch/arm/mach-meson8b/power_suspend.c
 create mode 100644 arch/arm/mach-meson8b/sd_pad.c
 create mode 100644 arch/arm/mach-meson8b/smp.c
 create mode 100644 arch/arm/mach-meson8b/time.c
 create mode 100644 arch/arm/mach-meson8b/tool/genregs.awk
 create mode 100644 arch/arm/mach-meson8b/tool/genregs.sh
 create mode 100644 arch/arm/mach-meson8b/tool/m8_gpio.csv
 create mode 100644 arch/arm/mach-meson8b/tool/m8genpintab.awk
 create mode 100644 arch/arm/mach-meson8b/tool/meson8_syspll.c
 create mode 100644 arch/arm/mach-meson8b/tool/syspll.sh
 create mode 100644 arch/arm/mach-meson8b/usbclock.c
 create mode 100644 arch/arm/mach-meson8b/vpu.c
 create mode 100644 mk_m8b.sh

diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index 4d8c58e835a9..b84ef5c98be8 100755
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -160,6 +160,7 @@ machine-$(CONFIG_ARCH_MESON6)           += meson6
 machine-$(CONFIG_ARCH_MESON6TV)		+= meson6tv
 machine-$(CONFIG_ARCH_MESON6TVD)	+= meson6tvd
 machine-$(CONFIG_ARCH_MESON8)           += meson8
+machine-$(CONFIG_ARCH_MESON8B)          += meson8b
 machine-$(CONFIG_ARCH_MMP)		+= mmp
 machine-$(CONFIG_ARCH_MSM)		+= msm
 machine-$(CONFIG_ARCH_MV78XX0)		+= mv78xx0
diff --git a/arch/arm/configs/meson8b_defconfig b/arch/arm/configs/meson8b_defconfig
new file mode 100644
index 000000000000..c080f6aafc3e
--- /dev/null
+++ b/arch/arm/configs/meson8b_defconfig
@@ -0,0 +1,283 @@
+CONFIG_KERNEL_LZO=y
+CONFIG_SYSVIPC=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_IKCONFIG=y
+CONFIG_LOG_BUF_SHIFT=19
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_RD_XZ=y
+CONFIG_RD_LZO=y
+CONFIG_KALLSYMS_ALL=y
+CONFIG_EMBEDDED=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_ARCH_MESON8B=y
+CONFIG_MESON_LEGACY_REGISTER_API=y
+CONFIG_ARM_ERRATA_751472=y
+CONFIG_ARM_ERRATA_754322=y
+CONFIG_ARM_ERRATA_764369=y
+CONFIG_SMP=y
+CONFIG_PREEMPT=y
+CONFIG_AEABI=y
+CONFIG_HIGHMEM=y
+CONFIG_KSM=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_INTERACTIVE=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_VFP=y
+CONFIG_NEON=y
+CONFIG_BINFMT_MISC=y
+CONFIG_WAKELOCK=y
+CONFIG_PM_RUNTIME=y
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=y
+CONFIG_NET_KEY=y
+CONFIG_INET=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_INET_ESP=y
+CONFIG_IPV6=y
+CONFIG_IPV6_PRIVACY=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=y
+CONFIG_INET6_ESP=y
+CONFIG_INET6_IPCOMP=y
+CONFIG_IPV6_MIP6=y
+CONFIG_IPV6_TUNNEL=y
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CT_PROTO_DCCP=y
+CONFIG_NF_CT_PROTO_SCTP=y
+CONFIG_NF_CT_PROTO_UDPLITE=y
+CONFIG_NF_CONNTRACK_AMANDA=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_H323=y
+CONFIG_NF_CONNTRACK_IRC=y
+CONFIG_NF_CONNTRACK_NETBIOS_NS=y
+CONFIG_NF_CONNTRACK_PPTP=y
+CONFIG_NF_CONNTRACK_SANE=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_TARGET_MARK=y
+CONFIG_NETFILTER_XT_TARGET_NFLOG=y
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
+CONFIG_NETFILTER_XT_TARGET_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_MATCH_COMMENT=y
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_HELPER=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_LENGTH=y
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
+CONFIG_NETFILTER_XT_MATCH_QTAGUID=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y
+CONFIG_NETFILTER_XT_MATCH_SOCKET=y
+CONFIG_NETFILTER_XT_MATCH_STATE=y
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
+CONFIG_NETFILTER_XT_MATCH_STRING=y
+CONFIG_NETFILTER_XT_MATCH_TIME=y
+CONFIG_NETFILTER_XT_MATCH_U32=y
+CONFIG_NF_CONNTRACK_IPV4=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=y
+CONFIG_IP_NF_MATCH_TTL=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_TARGET_REJECT_SKERR=y
+CONFIG_NF_NAT_IPV4=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_NETMAP=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_RAW=y
+CONFIG_IP_NF_ARPTABLES=y
+CONFIG_IP_NF_ARPFILTER=y
+CONFIG_IP_NF_ARP_MANGLE=y
+CONFIG_NF_CONNTRACK_IPV6=y
+CONFIG_IP6_NF_IPTABLES=y
+CONFIG_IP6_NF_FILTER=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+CONFIG_IP6_NF_TARGET_REJECT_SKERR=y
+CONFIG_IP6_NF_MANGLE=y
+CONFIG_IP6_NF_RAW=y
+CONFIG_NF_NAT_IPV6=y
+CONFIG_IP6_NF_TARGET_MASQUERADE=y
+CONFIG_IP6_NF_TARGET_NPT=y
+CONFIG_BRIDGE=y
+# CONFIG_BRIDGE_IGMP_SNOOPING is not set
+CONFIG_PHONET=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_INGRESS=y
+CONFIG_NET_CLS_U32=y
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_NET_ACT_MIRRED=y
+CONFIG_BT=y
+CONFIG_BT_RFCOMM=y
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=y
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=y
+CONFIG_BT_HCIUART=y
+CONFIG_BT_HCIUART_H4=y
+CONFIG_CFG80211=y
+CONFIG_MAC80211=y
+CONFIG_RFKILL=y
+CONFIG_I2C_AML=y
+CONFIG_SARADC_AM=y
+# CONFIG_MESON_INPUT_REMOTE is not set
+CONFIG_NEW_AM_REMOTE=y
+CONFIG_NEW_AM_IR_TX=y
+CONFIG_ADC_KEYPADS_AM=y
+CONFIG_AML_GPIO_KEY=y
+CONFIG_RICOH_PMU=y
+CONFIG_SECURITYKEY=y
+CONFIG_EFUSE=y
+CONFIG_AMLOGIC_THERMAL=y
+CONFIG_AMLOGIC_USB=y
+CONFIG_MMC_AML=y
+CONFIG_AML_NAND_KEY=y
+CONFIG_AML_NEXT_GEN_NAND=y
+CONFIG_AM_ETHERNET=y
+CONFIG_AM_WIFI=y
+CONFIG_AM_WIFI_SD_MMC=y
+CONFIG_AM_WIFI_USB=y
+CONFIG_SDIO_DHD_CDC_WIFI_40181_MODULE=m
+CONFIG_BCMDHD_POWER_OFF_IN_SUSPEND=y
+CONFIG_RTL8188EU=m
+CONFIG_RTL8188EU_MP=m
+CONFIG_BT_DEVICE=y
+# CONFIG_AMAUDIO is not set
+# CONFIG_AM_LCD_OUTPUT is not set
+CONFIG_FB_AM=y
+# CONFIG_AMLOGIC_BACKLIGHT is not set
+CONFIG_AM_GE2D=y
+CONFIG_AM_LOGO=y
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_MTD=y
+CONFIG_MTD_BLOCK=y
+CONFIG_PROC_DEVICETREE=y
+CONFIG_OF_SELFTEST=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_SCSI=y
+CONFIG_BLK_DEV_SD=y
+CONFIG_BLK_DEV_SR=y
+CONFIG_SCSI_MULTI_LUN=y
+CONFIG_NETDEVICES=y
+CONFIG_TUN=y
+CONFIG_SMSC_PHY=y
+CONFIG_ICPLUS_PHY=y
+CONFIG_PPP=y
+CONFIG_PPP_BSDCOMP=y
+CONFIG_PPP_DEFLATE=y
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MPPE=y
+CONFIG_PPP_MULTILINK=y
+CONFIG_PPPOLAC=y
+CONFIG_PPPOPNS=y
+CONFIG_PPP_ASYNC=y
+CONFIG_PPP_SYNC_TTY=y
+CONFIG_USB_USBNET=y
+CONFIG_INPUT_POLLDEV=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_UINPUT=y
+CONFIG_DEVPTS_MULTIPLE_INSTANCES=y
+CONFIG_SPI=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=y
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_SOC=y
+CONFIG_SND_AML_M8_SOC=y
+CONFIG_SND_AML_M8=y
+CONFIG_UHID=y
+CONFIG_USB=y
+CONFIG_USB_ACM=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_OPTION=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_DWC_OTG=y
+CONFIG_MMC_DEBUG=y
+CONFIG_UIO=y
+CONFIG_UIO_PDRV=y
+CONFIG_UIO_PDRV_GENIRQ=y
+CONFIG_STAGING=y
+CONFIG_ZSMALLOC=y
+CONFIG_ZRAM=y
+CONFIG_ZRAM_DEBUG=y
+CONFIG_ANDROID=y
+CONFIG_ANDROID_BINDER_IPC=y
+CONFIG_ASHMEM=y
+CONFIG_ANDROID_LOGGER=y
+CONFIG_ANDROID_LOW_MEMORY_KILLER=y
+CONFIG_ANDROID_INTF_ALARM_DEV=y
+CONFIG_SYNC=y
+CONFIG_EXT2_FS=y
+CONFIG_EXT3_FS=y
+CONFIG_EXT3_FS_POSIX_ACL=y
+CONFIG_EXT3_FS_SECURITY=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_EXT4_DEBUG=y
+CONFIG_QUOTA=y
+CONFIG_QFMT_V2=y
+CONFIG_FUSE_FS=y
+CONFIG_ISO9660_FS=y
+CONFIG_JOLIET=y
+CONFIG_ZISOFS=y
+CONFIG_UDF_FS=y
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_TMPFS=y
+CONFIG_CONFIGFS_FS=y
+CONFIG_CRAMFS=y
+CONFIG_CIFS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_UTF8=y
+CONFIG_PRINTK_TIME=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_READABLE_ASM=y
+CONFIG_DEBUG_FS=y
+CONFIG_DEBUG_SECTION_MISMATCH=y
+CONFIG_SCHEDSTATS=y
+CONFIG_TIMER_STATS=y
+CONFIG_DEBUG_INFO=y
+CONFIG_CRC_T10DIF=y
+CONFIG_CRC7=y
diff --git a/arch/arm/mach-meson8b/Kconfig b/arch/arm/mach-meson8b/Kconfig
new file mode 100644
index 000000000000..305866ceee18
--- /dev/null
+++ b/arch/arm/mach-meson8b/Kconfig
@@ -0,0 +1,23 @@
+if ARCH_MESON8B
+
+config CLKTREE_DEBUG
+	bool "New clock tree debug support"
+	default y
+	help
+		Create a node /sys/class/meson_clocktree/clkTree to get/set clocks
+
+config MESON_CPU_TEMP_SENSOR
+	bool "meson temperature sensor cpu interface support"
+	default n
+	help
+		/sys/class/saradc/temperature can got the celius . 
+
+config MESON_SUSPEND_FIRMWARE_BASE
+        hex
+        default 0x04f00000
+        depends on MESON_SUSPEND
+        help
+          The base address of 1MB of memory reserved for suspend firmware.
+endif # ARCH_MESON8
+
+
diff --git a/arch/arm/mach-meson8b/Kconfig.boards b/arch/arm/mach-meson8b/Kconfig.boards
new file mode 100644
index 000000000000..1825fc0f0345
--- /dev/null
+++ b/arch/arm/mach-meson8b/Kconfig.boards
@@ -0,0 +1,6 @@
+config MACH_MESON8B_COMMON_BOARD
+	depends on ARCH_MESON8B
+	bool "Meson8 baby common board"
+	default y 
+	help
+      Support for Amlogic Meson8 baby common development platform.
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/Makefile b/arch/arm/mach-meson8b/Makefile
new file mode 100644
index 000000000000..4551418f1e08
--- /dev/null
+++ b/arch/arm/mach-meson8b/Makefile
@@ -0,0 +1,43 @@
+#
+# Makefile for the linux kernel.
+#
+
+# Common support
+
+
+obj-y := cpu.o clock.o time.o iomapping.o vpu.o
+obj-y += power_gate.o
+obj-m :=
+obj-n :=
+obj-  :=
+
+# Board support
+obj-$(CONFIG_MACH_MESON8B_COMMON_BOARD)	+= board-meson8b-common.o
+
+# Cache config
+obj-$(CONFIG_CACHE_L2X0) += cache.o
+
+# Power Management
+obj-$(CONFIG_SUSPEND)		+= pm.o
+
+obj-$(CONFIG_HOTPLUG_CPU) += hotplug.o hotplug-asm.o
+obj-$(CONFIG_SMP) += headsmp.o smp.o
+
+obj-$(CONFIG_AMLOGIC_USB) += usbclock.o
+
+# gpio support
+obj-$(CONFIG_GPIO_AMLOGIC) += gpio.o
+
+#pinctrl support
+obj-$(CONFIG_PINCTRL_AMLOGIC) += pinctrl.o
+
+obj-$(CONFIG_CARDREADER)	+= sd_pad.o
+#obj-$(CONFIG_CARDREADER)	+= gpio.o
+
+obj-$(CONFIG_MESON_SUSPEND) += power_suspend.o
+#ifneq ($(CONFIG_MESON_SUSPEND),y)
+#obj-$(CONFIG_SUSPEND) += sleep.o
+#endif
+
+obj-$(CONFIG_AML_HDMI_TX) +=  hdmi_tx_hw/
+
diff --git a/arch/arm/mach-meson8b/Makefile.boot b/arch/arm/mach-meson8b/Makefile.boot
new file mode 100644
index 000000000000..c7e75acfe6c9
--- /dev/null
+++ b/arch/arm/mach-meson8b/Makefile.boot
@@ -0,0 +1,4 @@
+   zreladdr-y	:= 0x00008000
+params_phys-y	:= 0x00000100
+initrd_phys-y	:= 0x00800000
+
diff --git a/arch/arm/mach-meson8b/aml_gpio.dtd b/arch/arm/mach-meson8b/aml_gpio.dtd
new file mode 100644
index 000000000000..a2a5c3f3e2e2
--- /dev/null
+++ b/arch/arm/mach-meson8b/aml_gpio.dtd
@@ -0,0 +1,8 @@
+#ifdef CONFIG_GPIO_AMLOGIC
+//$$ DEVICE="m8-gpio"
+	gpio:gpio{
+		compatible = "amlogic,m8-gpio";
+		dev_name = "gpio";
+		#gpio-cells=<2>;
+	};
+#endif
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/aml_pin.dtd b/arch/arm/mach-meson8b/aml_pin.dtd
new file mode 100644
index 000000000000..cdf982b94b15
--- /dev/null
+++ b/arch/arm/mach-meson8b/aml_pin.dtd
@@ -0,0 +1,433 @@
+#ifdef CONFIG_PINCTRL_AMLOGIC
+//$$ DEVICE="pinmux-m8"
+    pinmux{ 
+		compatible = "amlogic,pinmux-m8";
+		dev_name = "pinmux";
+		#pinmux-cells=<2>;    
+    
+//$$ MATCH "uart_ao_pin_match" = "&ao_uart_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"
+        ao_uart_pins:ao_uart{
+			amlogic,setmask=<10 0x1800>;
+			amlogic,pins="GPIOAO_0", "GPIOAO_1";
+		};
+		
+//$$ MATCH "uart_0_pin_match" = "&a_uart_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR 4 = "amlogic,pins"
+		a_uart_pins:a_uart{
+			amlogic,setmask=<4 0x3c00>;
+			amlogic,pins="GPIOX_12", "GPIOX_13", "GPIOX_14", "GPIOX_15";
+		};
+		
+//$$ MATCH "Nand_pin_0_match" = "&nand_input_state"
+//$$ MATCH "Nand_pin_1_match" = "&nand_input_state"
+//$$ L2 PROP_STR 18 = "amlogic,pins"
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+		nand_input_state:nand_input{
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4",
+						"BOOT_5","BOOT_6","BOOT_7","BOOT_12","BOOT_13",
+						"BOOT_8","BOOT_9","BOOT_10","BOOT_11",
+						"BOOT_14","BOOT_15","BOOT_16","BOOT_17";
+			amlogic,enable-output=<1>;
+		};
+		
+//$$ MATCH "Nand_pin_0_match" = "&conf_nand_state"
+//$$ MATCH "Nand_pin_1_match" = "&conf_nand_state"
+//$$ L2 PROP_STR 9 = "amlogic,pins"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+		conf_nand_state: conf_nand{
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4",
+						"BOOT_5","BOOT_6","BOOT_7","BOOT_15";
+			amlogic,pullup=<0>;
+		};
+		
+//$$ MATCH "Nand_pin_0_match" = "&nand_base"
+//$$ MATCH "Nand_pin_1_match" = "&nand_base"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 17 = "amlogic,pins"
+		nand_base: nand{
+			amlogic,setmask=<2 0x7fe0000>;
+			amlogic,clrmask=<	5 0xe
+							6 0x3f000000
+							4 0x7c000000>;
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4",
+						"BOOT_5","BOOT_6","BOOT_7","BOOT_8","BOOT_9",
+						"BOOT_10","BOOT_12","BOOT_13",
+						"BOOT_14","BOOT_15","BOOT_16","BOOT_17";
+		};
+		
+//$$ MATCH "Card_pin_0_match" = "&sdhc_b_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdhc_b_pins:sdhc_b_pin{
+			amlogic,setmask=<2 0xfc00>;
+			amlogic,clrmask=<2 0xf0 8 0x600>;
+			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+		};
+
+//$$ MATCH "Card_pin_1_match" = "&sdhc_c_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdhc_c_pins:sdhc_c_pin{
+			amlogic,setmask=<6 0x3f000000>;
+			amlogic,clrmask=<4 0x6c000000 2 0x4c00000>;
+			amlogic,pins="BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_10","BOOT_11";
+            amlogic,enable-output=<1>; /* 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+		};
+
+//$$ MATCH "Card_pin_2_match" = "&sdhc_a_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"	
+		sdhc_a_pins:sdhc_a_pin{
+			amlogic,setmask=<8 0x3f>;
+			amlogic,clrmask=<5 0x6c00 >;
+			amlogic,pins="GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+		};
+
+//$$ MATCH "sdio_pin_5_match" = "&sdio_all_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"	
+        sdio_all_pins:sdio_all_pins{
+            amlogic,setmask=<8 0x0000003f>;         /*sdio a*/
+            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+                                2 0x0000fc00        /*sdio b*/
+                                5 0x00006c00>;      /*sdhc a*/
+            amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        
+//$$ MATCH "sdio_pin_4_match" = "&sdio_clk_cmd_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"
+        sdio_clk_cmd_pins:sdio_clk_cmd_pins{
+            amlogic,setmask=<8 0x00000003>;         /*sdio a*/
+            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+                                2 0x0000fc00        /*sdio b*/
+                                5 0x00006c00>;      /*sdhc a*/
+            amlogic,pins = "GPIOX_8","GPIOX_9"; /** GPIOX_8:CLK, GPIOX_9:CMD */
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+
+//$$ MATCH "sdio_pin_1_match" = "&sd_all_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"
+        sd_all_pins:sd_all_pins{
+            amlogic,setmask=<2 0x0000fc00>;         /*sdio b*/
+            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+                                8 0x0000063f        /*sdio a, UART*/
+                                2 0x000000f0>;      /*sdhc b*/
+            amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+            amlogic,enable-output=<1>; /* 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        
+//$$ MATCH "sdio_pin_6_match" = "&sd_1bit_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"
+        sd_1bit_pins:sd_1bit_pins{
+            amlogic,setmask=<2 0x00008c00>;         /*sdio b*/
+            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+                                8 0x0000003f        /*sdio a*/
+                                2 0x000000f0>;      /*sdhc b*/
+            amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+            amlogic,enable-output=<1>; /* 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        
+//$$ MATCH "sdio_pin_0_match" = "&sd_clk_cmd_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"
+        sd_clk_cmd_pins:sd_clk_cmd_pins{
+            amlogic,setmask=<2 0x00000c00>;         /*sdio b*/
+            amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+                                8 0x0000003f        /*sdio a*/
+                                2 0x000000f0>;      /*sdhc b*/
+            amlogic,pins = "CARD_2","CARD_3"; /** CARD_2:CLK, CARD_3:CMD */
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        
+//$$ MATCH "sdio_pin_3_match" = "&emmc_all_pins"  
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"      
+        emmc_all_pins:emmc_all_pins{
+            amlogic,setmask=<6 0x3f000000>;         /*sdio c*/
+            amlogic,clrmask=<2 0x04c0fc00           /*sdio b & nand*/
+                                8 0x0000003f        /*sdio a*/
+                                4 0x6c000000>;        /*sdhc c*/
+            amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_16","BOOT_17";
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        
+//$$ MATCH "sdio_pin_2_match" = "&emmc_clk_cmd_pins" 
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"	
+//$$ L2 PROP_U32 = "amlogic,enable-output"
+//$$ L2 PROP_U32 = "amlogic,pullup"
+//$$ L2 PROP_U32 = "amlogic,pullupen"
+        emmc_clk_cmd_pins:emmc_clk_cmd_pins{
+            amlogic,setmask=<6 0x03000000>;         /*bit[24-25] */
+            amlogic,clrmask=<2 0x04c0fc00           /*sdio b & nand*/
+                                8 0x0000003f        /*sdio a*/
+                                4 0x6c000000>;        /*sdhc c*/
+            amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+
+//$$ MATCH "Camera_pin_0_match" = "&aml_cam_gpio_pins"
+//$$ L2 PROP_U32 4 = "amlogic,setmask"
+//$$ L2 PROP_STR 10 = "amlogic,pins"	
+        aml_cam_gpio_pins: aml_cam_gpio_pins{
+			amlogic,setmask=<3 0x80000
+					         9 0x37c>;
+			amlogic,pins = "GPIOH_9","GPIOY_6","GPIOY_7","GPIOY_8","GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14";
+		};
+		
+//$$ MATCH "Camera_pin_1_match" = "&aml_cam_csi_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR = "amlogic,pins"	
+		aml_cam_csi_pins: aml_cam_csi_pins{
+			amlogic,setmask=<3 0x80000>;
+			amlogic,pins = "GPIOH_9";
+		};
+
+//$$ MATCH "I2C_AO_pin_match" = "&ao_i2c_master"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"
+		ao_i2c_master:ao_i2c{
+			amlogic,setmask=<10 0x60>;
+			amlogic,clrmask=<10 0x1800006>;
+			amlogic,pins="GPIOAO_4","GPIOAO_5";
+		};
+		
+//$$ MATCH "I2C_A_pin_match" = "&a_i2c_master"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"
+		a_i2c_master:a_i2c{
+//			amlogic,setmask=<5 0xc0000000>;
+//			amlogic,clrmask=<9 0x58000 7 3000000>;
+//			amlogic,pins="GPIOZ_0","GPIOZ_1";
+
+//			amlogic,setmask=<5 0x300>;
+//			amlogic,clrmask=<6 0x900 8 11000>;
+//			amlogic,pins="GPIOZ_9","GPIOZ_10";
+
+			amlogic,setmask=<5 0xc0>;
+			amlogic,clrmask=<6 0xc0 8 0xc000>;
+			amlogic,pins="GPIOZ_11","GPIOZ_12";
+		};
+		
+//$$ MATCH "I2C_B_pin_match" = "&b_i2c_master"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"
+		b_i2c_master:b_i2c{
+			amlogic,setmask=<5 0xc000000>;
+			amlogic,pins="GPIOZ_2","GPIOZ_3";
+		};
+		
+// MATCH "I2C_C_pin_match" = "&c_i2c_master"
+// L2 PROP_U32 2 = "amlogic,setmask"
+// L2 PROP_U32 2 = "amlogic,clrmask"
+// L2 PROP_STR 2 = "amlogic,pins"		
+//		c_i2c_master:c_i2c{
+//			amlogic,setmask=<5 0x3000000>;
+//			amlogic,clrmask=<6 0xc000>;
+//			amlogic,pins="GPIOZ_4","GPIOZ_5";
+
+//			amlogic,setmask=<1 0xc000>;
+//			amlogic,clrmask=<1 0xc0400 3 0x6 9 0x300>;
+//			amlogic,pins="GPIOY_0","GPIOY_1";
+//		};
+
+//$$ MATCH "I2C_D_pin_match" = "&d_i2c_master"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"
+		d_i2c_master:d_i2c{
+			amlogic,setmask=<4 0xc>;
+			amlogic,pins="GPIOH_7","GPIOH_8";
+		};
+		
+//$$ MATCH "Bl_pin_0_match" = "&lcd_backlight_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+//$$ L2 PROP_STR = "amlogic,pins"	
+		lcd_backlight_pins:lcd_backlight{
+			amlogic,setmask=<3 0x1000000>;
+			amlogic,clrmask=<0 0x48 7 0x10000200>;
+			amlogic,pins = "GPIODV_9";
+		};
+		
+//$$ MATCH "Bl_pin_1_match" = "&lcd_backlight_combo_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+//$$ L2 PROP_STR 2 = "amlogic,pins"
+		lcd_backlight_combo_pins:lcd_backlight_pwm_combo{
+			amlogic,setmask=<3 0x5000000>;
+			amlogic,clrmask=<0 0x48 7 0x18000200>;
+			amlogic,pins = "GPIODV_9","GPIODV_28";
+		};
+		
+		lcd_ttl_hvsync_pins_on:lcd_ttl_hvsync_on{
+			amlogic,setmask=<8 0x1800000>;
+			amlogic,clrmask=<0 0x3c0300 6 0xc00000>;
+			amlogic,pins = "GPIODV_24","GPIODV_25";
+		};
+		
+		lcd_ttl_hvsync_pins_off:lcd_ttl_hvsync_off{
+			amlogic,clrmask=<0 0x3c0300 6 0xc00000 8 0x1800000>;
+			amlogic,pins = "GPIODV_24","GPIODV_25";
+			amlogic,enable-output=<1>;
+		};
+		
+		lcd_ttl_de_pins_on:lcd_ttl_de_on{
+			amlogic,setmask=<8 0x10000000>;
+			amlogic,clrmask=<0 0x400 6 0x100000 8 0x80000>;
+			amlogic,pins = "GPIODV_27";
+		};
+		
+		lcd_ttl_de_pins_off:lcd_ttl_de_off{
+			amlogic,clrmask=<0 0x400 6 0x100000 8 0x10080000>;
+			amlogic,pins = "GPIODV_27";
+			amlogic,enable-output=<1>;
+		};
+		
+		lcd_ttl_clk_pins_on:lcd_ttl_clk_on{
+			amlogic,setmask=<8 0x400000>;
+			amlogic,clrmask=<0 0x80 6 0x200000 8 0x300000>;
+			amlogic,pins = "GPIODV_26";
+		};
+		
+		lcd_ttl_clk_pins_off:lcd_ttl_clk_off{
+			amlogic,clrmask=<0 0x80 6 0x200000 8 0x700000>;
+			amlogic,pins = "GPIODV_26";
+			amlogic,enable-output=<1>;
+		};
+		
+		lcd_ttl_rgb_8bit_pins_on:lcd_ttl_rgb_8bit_on{
+			amlogic,setmask=<0 0x3f>;
+			amlogic,clrmask=<0 0x40 3 0x1000000 7 0x1003ffff 8 0xe000000>;
+			amlogic,pins = "GPIODV_0","GPIODV_1","GPIODV_2","GPIODV_3","GPIODV_4","GPIODV_5","GPIODV_6","GPIODV_7",		//R0~R7
+						"GPIODV_8","GPIODV_9","GPIODV_10","GPIODV_11","GPIODV_12","GPIODV_13","GPIODV_14","GPIODV_15",	//G0~G7
+						"GPIODV_16","GPIODV_17","GPIODV_18","GPIODV_19","GPIODV_20","GPIODV_21","GPIODV_22","GPIODV_23";//B0~B7
+		};
+		
+		lcd_ttl_rgb_8bit_pins_off:lcd_ttl_rgb_8bit_off{
+			amlogic,clrmask=<0 0x7f 3 0x1000000 7 0x1003ffff 8 0xe000000>;
+			amlogic,pins = "GPIODV_0","GPIODV_1","GPIODV_2","GPIODV_3","GPIODV_4","GPIODV_5","GPIODV_6","GPIODV_7",		//R0~R7
+						"GPIODV_8","GPIODV_9","GPIODV_10","GPIODV_11","GPIODV_12","GPIODV_13","GPIODV_14","GPIODV_15",	//G0~G7
+						"GPIODV_16","GPIODV_17","GPIODV_18","GPIODV_19","GPIODV_20","GPIODV_21","GPIODV_22","GPIODV_23";//B0~B7
+			amlogic,enable-output=<1>;
+		};
+		
+		lcd_ttl_rgb_6bit_pins_on:lcd_ttl_rgb_6bit_on{
+			amlogic,setmask=<0 0x15>;
+			amlogic,clrmask=<0 0x40 7 0xfcfc>;
+			amlogic,pins = "GPIODV_2","GPIODV_3","GPIODV_4","GPIODV_5","GPIODV_6","GPIODV_7",		//R2~R7
+						"GPIODV_10","GPIODV_11","GPIODV_12","GPIODV_13","GPIODV_14","GPIODV_15",	//G2~G7
+						"GPIODV_18","GPIODV_19","GPIODV_20","GPIODV_21","GPIODV_22","GPIODV_23";	//B2~B7
+		};
+		
+		lcd_ttl_rgb_6bit_pins_off:lcd_ttl_rgb_6bit_off{
+			amlogic,clrmask=<0 0x55 7 0xfcfc>;
+			amlogic,pins = "GPIODV_2","GPIODV_3","GPIODV_4","GPIODV_5","GPIODV_6","GPIODV_7",		//R2~R7
+						"GPIODV_10","GPIODV_11","GPIODV_12","GPIODV_13","GPIODV_14","GPIODV_15",	//G2~G7
+						"GPIODV_18","GPIODV_19","GPIODV_20","GPIODV_21","GPIODV_22","GPIODV_23";	//B2~B7
+			amlogic,enable-output=<1>;
+        };
+
+//$$ MATCH "remote_pin_0_match" = "&remote_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR = "amlogic,pins"
+        remote_pins:remote_pin{
+			amlogic,setmask=<10 0x1>;
+			amlogic,pins="GPIOAO_7";
+		};
+
+//$$ MATCH "Audio_pin_0_match" = "&audio_pins"
+//$$ L2 PROP_U32 4 = "amlogic,setmask"
+//$$ L2 PROP_U32 10 = "amlogic,clrmask"
+//$$ L2 PROP_STR 6 = "amlogic,pins"
+        audio_pins:audio_pin{
+            amlogic,setmask=<1 0x80
+                             1 0x75>;
+            amlogic,clrmask=<1 0x10000
+                             1 0x0a
+                             3 0x389
+                             4 0x3c00000
+                             9 0xd>;
+            amlogic,pins = "GPIOY_3","GPIOY_4","GPIOY_5","GPIOY_6","GPIOY_7","GPIOY_8";
+        };
+
+//$$ MATCH "Spi_pin_0_match" = "&aml_spi_nor_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+//$$ L2 PROP_STR 4 = "amlogic,pins"
+		aml_spi_nor_pins: aml_spi_nor_pins{
+			amlogic,setmask=<5 0xf>;
+			amlogic,clrmask=<2 0x380000>;
+			amlogic,pins = "BOOT_11","BOOT_12","BOOT_13","BOOT_18";
+		};
+        
+	};
+#endif
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/aml_pm.dtd b/arch/arm/mach-meson8b/aml_pm.dtd
new file mode 100644
index 000000000000..ff5357b05090
--- /dev/null
+++ b/arch/arm/mach-meson8b/aml_pm.dtd
@@ -0,0 +1,9 @@
+#ifdef CONFIG_SUSPEND
+//$$ DEVICE="amvenc_avc"
+//$$ L2 PROP_STR = "status"
+    aml_pm{
+		compatible = "amlogic,pm-m8";
+		dev_name = "aml_pm_m8";
+		status = "okay";
+	};
+#endif
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/board-meson8b-common.c b/arch/arm/mach-meson8b/board-meson8b-common.c
new file mode 100644
index 000000000000..6a95585f63f5
--- /dev/null
+++ b/arch/arm/mach-meson8b/board-meson8b-common.c
@@ -0,0 +1,147 @@
+/*
+ * arch/arm/mach-meson8b/board-meson8b-common.c
+ *
+ * Copyright (C) 2011-2013 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/mm.h>
+#include <linux/memblock.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/dma-mapping.h>
+#include <linux/device.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/amlogic/of_lm.h>
+#include <linux/reboot.h>
+#include <plat/irq.h>
+#include <plat/lm.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+#include <asm/system_info.h>
+#include <mach/io.h>
+#ifdef CONFIG_SMP
+#include <mach/smp.h>
+#endif
+#include <linux/syscore_ops.h>
+#include <mach/am_regs.h>
+
+#include <linux/amlogic/vmapi.h>
+
+static void meson_map_board_io(void);
+extern unsigned long long aml_reserved_start;
+extern unsigned long long aml_reserved_end;
+extern void __init meson_timer_init(void);
+void backup_cpu_entry_code(void);
+
+static __init void meson8b_reserve(void)
+{
+
+    /* 
+      * Reserved memory for hotplug: 
+      *   start address: PHYS_OFFSET, size 0x4000, 
+      *   toprevent other getting logical address 0xc0000000 and 
+      *   flushing valid data on "zero address"
+      */
+    memblock_reserve(PHYS_OFFSET,__pa(swapper_pg_dir) - PHYS_OFFSET);
+}
+
+__initdata struct map_desc meson_board_io_desc[1];
+
+static __init void meson_map_board_io(void)
+{
+	meson_board_io_desc[0].virtual = PAGE_ALIGN(__phys_to_virt(aml_reserved_start)),
+	meson_board_io_desc[0].pfn = __phys_to_pfn(aml_reserved_start),
+	meson_board_io_desc[0].length     = aml_reserved_end - aml_reserved_start + 1,
+	meson_board_io_desc[0].type       = MT_MEMORY_NONCACHED,
+	iotable_init(meson_board_io_desc,ARRAY_SIZE(meson_board_io_desc));
+}
+static void __init meson_map_io(void)
+{
+	meson_map_default_io();
+	meson_map_board_io();
+}
+
+static struct of_device_id m8_of_platform_bus_ids[] = {
+		{.compatible = "simple-bus",},  
+		{},
+};
+static struct of_device_id m8_of_lm_bus_ids[] = {
+		{.compatible = "logicmodule-bus",},  
+		{},
+};
+
+static __init void meson_init_machine_devicetree(void)
+{
+	struct device *parent;	
+	parent = get_device(&platform_bus);
+	
+	of_platform_populate(NULL,m8_of_platform_bus_ids,NULL,parent);
+#ifdef CONFIG_OF_LM
+	of_lm_populate(NULL,m8_of_lm_bus_ids,NULL,NULL);
+#endif
+
+}
+
+int meson_cache_of_init(void);
+static __init void meson_init_early(void)
+{
+	int rev;
+	
+	meson_cpu_version_init();
+	/*
+	 * Mali or some USB devices allocate their coherent buffers from atomic
+	 * context. Increase size of atomic coherent pool to make sure such
+	 * the allocations won't fail.
+	 */
+	init_dma_coherent_pool_size(SZ_4M);
+
+	rev = get_meson_cpu_version(MESON_CPU_VERSION_LVL_MAJOR);
+	rev <<= 24;
+	system_serial_high = rev;
+	rev = get_meson_cpu_version(MESON_CPU_VERSION_LVL_MINOR);
+	system_rev = rev;
+}
+
+static void __init meson_init_irq(void)
+{
+	meson_init_gic_irq();
+	backup_cpu_entry_code();
+}
+static const char *m8_common_board_compat[] __initdata = {
+	"AMLOGIC,8726_M8B",
+	NULL,
+};
+
+DT_MACHINE_START(AML8726_M8, "Amlogic Meson8B platform")
+	.reserve	= meson8b_reserve,
+//.nr_irqs	= 
+	.smp		= smp_ops(meson_smp_ops),
+	.map_io		= meson_map_io,/// dt - 1
+	.init_early	= meson_init_early,/// dt -2
+	.init_irq		= meson_init_irq,/// dt - 3
+	.init_time		= meson_timer_init, /// dt - 4
+//	.handle_irq	= gic_handle_irq,
+	.init_machine	= meson_init_machine_devicetree,
+//.restart	= 
+	.dt_compat	= m8_common_board_compat,
+MACHINE_END
diff --git a/arch/arm/mach-meson8b/cache.c b/arch/arm/mach-meson8b/cache.c
new file mode 100644
index 000000000000..f42cec9a8d21
--- /dev/null
+++ b/arch/arm/mach-meson8b/cache.c
@@ -0,0 +1,39 @@
+/*
+ * arch/arm/mach-meson8b/cache.c
+ *
+ * Copyright (C) 2013 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <linux/printk.h>
+#include <linux/string.h>
+#include <asm/hardware/cache-l2x0.h>
+
+static int __init meson_cache_of_init(void)
+{
+	int aux = 0;
+	/*
+		put some default aux setting here
+	*/
+	
+	l2x0_of_init(aux,~0);
+	return 0;
+}
+early_initcall(meson_cache_of_init);
diff --git a/arch/arm/mach-meson8b/clock.c b/arch/arm/mach-meson8b/clock.c
new file mode 100644
index 000000000000..c7f45013c7eb
--- /dev/null
+++ b/arch/arm/mach-meson8b/clock.c
@@ -0,0 +1,1752 @@
+/*
+ * arch/arm/mach-meson8b/clock.c
+ *
+ * Copyright (C) 2011-2012 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+///#define DEBUG
+///#define CONFIG_CPU_FREQ_DEBUG		1
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/spinlock.h>
+#include <linux/delay.h>
+#include <linux/sysfs.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/cpu.h>
+
+#include <linux/clkdev.h>
+#include <linux/printk.h>
+#include <plat/io.h>
+#include <plat/cpufreq.h>
+#include <mach/am_regs.h>
+#include <mach/clock.h>
+#ifdef CONFIG_AMLOGIC_USB
+#include <mach/usbclock.h>
+#endif
+//#include <mach/hardware.h>
+//#include <mach/clk_set.h>
+//#include <mach/power_gate.h>
+static DEFINE_SPINLOCK(clockfw_lock);
+static DEFINE_MUTEX(clock_ops_lock);
+
+/**************** SYS PLL**************************/
+#define SYS_PLL_TABLE_MIN	 24000000
+#define SYS_PLL_TABLE_MAX	2112000000
+
+#define CPU_FREQ_LIMIT 1488000000
+
+struct sys_pll_s {
+    unsigned int freq;
+    unsigned int cntl0;
+    unsigned int latency;
+
+};
+typedef union latency_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned apb_div:4;	/* 0 */
+	unsigned peri_div:4;	/* 4 */
+	unsigned axi_div:4;	/* 8 */
+	unsigned l2_div:4;		/* 12 */
+	unsigned ext_div_n:8;	/* 16 */
+	unsigned afc_dsel_bp_en:1; /* 24 */
+	unsigned afc_dsel_bp_in: 1; /* 25 */
+	unsigned reserved:6;	/* 26 */
+    } b;
+} latency_data_t;
+
+static unsigned sys_pll_settings[][3] = {
+                {   24, 0x40020238, 0x01063546 }, /* fvco 1344, / 4, /14 */
+                {   48, 0x40020240, 0x01033546 }, /* fvco 1536, / 4, / 8 */
+                {   72, 0x40020248, 0x01023546 }, /* fvco 1728, / 4, / 6 */
+                {   96, 0x40020240, 0x01013546 }, /* fvco 1536, / 4, / 4 */
+                {  120, 0x40020250, 0x03013546 }, /* fvco 1920, / 4, / 4 */
+                {  144, 0x40020260, 0x03013546 }, /* fvco 2304, / 4, / 4 */
+                {  168, 0x40010238, 0x01013546 }, /* fvco 1344, / 2, / 4 */
+                {  192, 0x40010240, 0x01013546 }, /* fvco 1536, / 2, / 4 */
+                {  216, 0x40010248, 0x01013546 }, /* fvco 1728, / 2, / 4 */
+                {  240, 0x40010250, 0x03013546 }, /* fvco 1920, / 2, / 4 */
+                {  264, 0x40010258, 0x03013546 }, /* fvco 2112, / 2, / 4 */
+                {  288, 0x40010260, 0x03013546 }, /* fvco 2304, / 2, / 4 */
+                {  312, 0x40020234, 0x01003546 }, /* fvco 1248, / 4, / 1 */
+                {  336, 0x40020238, 0x01003546 }, /* fvco 1344, / 4, / 1 */
+                {  360, 0x4002023C, 0x01003546 }, /* fvco 1440, / 4, / 1 */
+                {  384, 0x40020240, 0x01003546 }, /* fvco 1536, / 4, / 1 */
+                {  408, 0x40020244, 0x01003546 }, /* fvco 1632, / 4, / 1 */
+                {  432, 0x40020248, 0x01003546 }, /* fvco 1728, / 4, / 1 */
+                {  456, 0x4002024C, 0x01003546 }, /* fvco 1824, / 4, / 1 */
+                {  480, 0x40020250, 0x03003546 }, /* fvco 1920, / 4, / 1 */
+                {  504, 0x40020254, 0x03003546 }, /* fvco 2016, / 4, / 1 */
+                {  528, 0x40020258, 0x03003546 }, /* fvco 2112, / 4, / 1 */
+                {  552, 0x4002025C, 0x03003546 }, /* fvco 2208, / 4, / 1 */
+                {  576, 0x40020260, 0x03003546 }, /* fvco 2304, / 4, / 1 */
+                {  600, 0x40010232, 0x01003546 }, /* fvco 1200, / 2, / 1 */
+                {  624, 0x40010234, 0x01003546 }, /* fvco 1248, / 2, / 1 */
+                {  648, 0x40010236, 0x01003546 }, /* fvco 1296, / 2, / 1 */
+                {  672, 0x40010238, 0x01003546 }, /* fvco 1344, / 2, / 1 */
+                {  696, 0x4001023A, 0x01003546 }, /* fvco 1392, / 2, / 1 */
+                {  720, 0x4001023C, 0x01003546 }, /* fvco 1440, / 2, / 1 */
+                {  744, 0x4001023E, 0x01003546 }, /* fvco 1488, / 2, / 1 */
+                {  768, 0x40010240, 0x01003546 }, /* fvco 1536, / 2, / 1 */
+                {  792, 0x40010242, 0x01003546 }, /* fvco 1584, / 2, / 1 */
+                {  816, 0x40010244, 0x01003546 }, /* fvco 1632, / 2, / 1 */
+                {  840, 0x40010246, 0x01003546 }, /* fvco 1680, / 2, / 1 */
+                {  864, 0x40010248, 0x01003546 }, /* fvco 1728, / 2, / 1 */
+                {  888, 0x4001024A, 0x01003546 }, /* fvco 1776, / 2, / 1 */
+                {  912, 0x4001024C, 0x01003546 }, /* fvco 1824, / 2, / 1 */
+                {  936, 0x4001024E, 0x01003546 }, /* fvco 1872, / 2, / 1 */
+                {  960, 0x40010250, 0x03003546 }, /* fvco 1920, / 2, / 1 */
+                {  984, 0x40010252, 0x03003546 }, /* fvco 1968, / 2, / 1 */
+                { 1008, 0x40010254, 0x03003546 }, /* fvco 2016, / 2, / 1 */
+                { 1032, 0x40010256, 0x03003546 }, /* fvco 2064, / 2, / 1 */
+                { 1056, 0x40010258, 0x03003546 }, /* fvco 2112, / 2, / 1 */
+                { 1080, 0x4001025A, 0x03003546 }, /* fvco 2160, / 2, / 1 */
+                { 1104, 0x4001025C, 0x03003546 }, /* fvco 2208, / 2, / 1 */
+                { 1128, 0x4001025E, 0x03003546 }, /* fvco 2256, / 2, / 1 */
+                { 1152, 0x40010260, 0x03003546 }, /* fvco 2304, / 2, / 1 */
+                { 1176, 0x40010262, 0x03003546 }, /* fvco 2352, / 2, / 1 */
+                { 1200, 0x40000232, 0x01003546 }, /* fvco 1200, / 1, / 1 */
+                { 1224, 0x40000233, 0x01003546 }, /* fvco 1224, / 1, / 1 */
+                { 1248, 0x40000234, 0x01003546 }, /* fvco 1248, / 1, / 1 */
+                { 1272, 0x40000235, 0x01003546 }, /* fvco 1272, / 1, / 1 */
+                { 1296, 0x40000236, 0x01003546 }, /* fvco 1296, / 1, / 1 */
+                { 1320, 0x40000237, 0x01003546 }, /* fvco 1320, / 1, / 1 */
+                { 1344, 0x40000238, 0x01003546 }, /* fvco 1344, / 1, / 1 */
+                { 1368, 0x40000239, 0x01003546 }, /* fvco 1368, / 1, / 1 */
+                { 1392, 0x4000023A, 0x01003546 }, /* fvco 1392, / 1, / 1 */
+                { 1416, 0x4000023B, 0x01003546 }, /* fvco 1416, / 1, / 1 */
+                { 1440, 0x4000023C, 0x01003546 }, /* fvco 1440, / 1, / 1 */
+                { 1464, 0x4000023D, 0x01003546 }, /* fvco 1464, / 1, / 1 */
+                { 1488, 0x4000023E, 0x01003546 }, /* fvco 1488, / 1, / 1 */
+                { 1512, 0x4000023F, 0x01003546 }, /* fvco 1512, / 1, / 1 */
+                { 1536, 0x40000240, 0x01003546 }, /* fvco 1536, / 1, / 1 */
+                { 1560, 0x40000241, 0x01003546 }, /* fvco 1560, / 1, / 1 */
+                { 1584, 0x40000242, 0x01003546 }, /* fvco 1584, / 1, / 1 */
+                { 1608, 0x40000243, 0x01003546 }, /* fvco 1608, / 1, / 1 */
+                { 1632, 0x40000244, 0x01003546 }, /* fvco 1632, / 1, / 1 */
+                { 1656, 0x40004244, 0x01003546 }, /* fvco 1656, / 1, / 1 */
+                { 1680, 0x40008244, 0x01003546 }, /* fvco 1680, / 1, / 1 */
+                { 1704, 0x4000c244, 0x01003546 }, /* fvco 1704, / 1, / 1 */
+                { 1728, 0x40000245, 0x01003546 }, /* fvco 1728, / 1, / 1 */
+                { 1752, 0x40004245, 0x01003546 }, /* fvco 1752, / 1, / 1 */
+                { 1776, 0x40008245, 0x01003546 }, /* fvco 1776, / 1, / 1 */
+                { 1800, 0x4000c245, 0x01003546 }, /* fvco 1800, / 1, / 1 */
+                { 1824, 0x40000246, 0x01003546 }, /* fvco 1824, / 1, / 1 */
+                { 1848, 0x40004246, 0x01003546 }, /* fvco 1848, / 1, / 1 */
+                { 1872, 0x40008246, 0x01003546 }, /* fvco 1872, / 1, / 1 */
+                { 1896, 0x4000c246, 0x01003546 }, /* fvco 1896, / 1, / 1 */
+                { 1920, 0x40000247, 0x01003546 }, /* fvco 1920, / 1, / 1 */
+                { 1944, 0x40004247, 0x01003546 }, /* fvco 1944, / 1, / 1 */
+                { 1968, 0x40008247, 0x01003546 }, /* fvco 1968, / 1, / 1 */
+                { 1992, 0x4000c247, 0x01003546 }, /* fvco 1992, / 1, / 1 */
+                { 2016, 0x40000248, 0x01003546 }, /* fvco 2016, / 1, / 1 */
+                { 2040, 0x40004248, 0x01003546 }, /* fvco 2040, / 1, / 1 */
+                { 2064, 0x40008248, 0x01003546 }, /* fvco 2064, / 1, / 1 */
+                { 2088, 0x4000c248, 0x01003546 }, /* fvco 2088, / 1, / 1 */
+                { 2112, 0x40000249, 0x01003546 }, /* fvco 2112, / 1, / 1 */
+};
+static unsigned setup_a9_clk_max = CPU_FREQ_LIMIT;
+static unsigned setup_a9_clk_min =    24000000;
+
+
+static unsigned int freq_limit = 1;
+
+static int set_sys_pll(struct clk *clk,  unsigned long dst);
+
+#define IS_CLK_ERR(a)  (IS_ERR(a) || a == 0)
+
+static unsigned long clk_get_rate_a9(struct clk * clkdev);
+
+#ifndef CONFIG_CLK_MSR_NEW
+static unsigned int clk_util_clk_msr(unsigned int clk_mux)
+{
+	unsigned int  msr;
+	unsigned int regval = 0;
+	aml_write_reg32(P_MSR_CLK_REG0,0);
+    // Set the measurement gate to 64uS
+	clrsetbits_le32(P_MSR_CLK_REG0,0xffff,64-1);
+    // Disable continuous measurement
+    // disable interrupts
+    clrbits_le32(P_MSR_CLK_REG0,((1 << 18) | (1 << 17)));
+	clrsetbits_le32(P_MSR_CLK_REG0,(0x1f<<20),(clk_mux<<20)|(1<<19)|(1<<16));
+
+	aml_read_reg32(P_MSR_CLK_REG0); 
+    // Wait for the measurement to be done
+      do {
+        regval = aml_read_reg32(P_MSR_CLK_REG0);
+    } while (regval & (1 << 31));
+    // disable measuring
+	clrbits_le32(P_MSR_CLK_REG0,(1 << 16));
+	 msr=(aml_read_reg32(P_MSR_CLK_REG2)+31)&0x000FFFFF;
+    // Return value in MHz*measured_val
+    return (msr>>6)*1000000;
+
+}
+#else
+static  unsigned int clk_util_clk_msr(unsigned int clk_mux)
+{
+    unsigned int regval = 0;
+    /// Set the measurement gate to 64uS
+    clrsetbits_le32(P_MSR_CLK_REG0,0xffff,121);///122us
+    
+    // Disable continuous measurement
+    // disable interrupts
+    clrsetbits_le32(P_MSR_CLK_REG0,
+        ((1 << 18) | (1 << 17)|(0x1f << 20)),///clrbits
+        (clk_mux << 20) |                    /// Select MUX
+        (1 << 19) |                          /// enable the clock
+        (1 << 16));
+    // Wait for the measurement to be done
+    regval = aml_read_reg32(P_MSR_CLK_REG0);
+    do {
+        regval = aml_read_reg32(P_MSR_CLK_REG0);
+    } while (regval & (1 << 31));
+
+    // disable measuring
+    clrbits_le32(P_MSR_CLK_REG0, (1 << 16));
+    regval = (aml_read_reg32(P_MSR_CLK_REG2)) & 0x000FFFFF;
+    regval += (regval/10000) * 6;
+    // Return value in MHz*measured_val
+    return (regval << 13);
+}
+
+#endif
+
+int    clk_measure(char  index )
+{
+	const char* clk_table[]={
+	" CTS_MIPI_CSI_CFG_CLK(63)",
+	" VID2_PLL_CLK(62)",
+	" GPIO_CLK(61)",
+	" USB_32K_ALT(60)",
+	" CTS_HCODEC_CLK(59)",
+	" Reserved(58)",
+	" Reserved(57)",
+	" Reserved(56)",
+	" Reserved(55)",
+	" Reserved(54)",
+	" Reserved(53)",
+	" Reserved(52)",
+	" Reserved(51)",
+	" Reserved(50)",	
+	" CTS_PWM_E_CLK(49)",	
+	" CTS_PWM_F_CLK(48)",	
+	" DDR_DPLL_PT_CLK(47)",	
+	" CTS_PCM2_SCLK(46)",		
+	" CTS_PWM_A_CLK(45)",
+	" CTS_PWM_B_CLK(44)",
+	" CTS_PWM_C_CLK(43)",
+	" CTS_PWM_D_CLK(42)",
+	" CTS_ETH_RX_TX(41)",
+	" CTS_PCM_MCLK(40)",
+	" CTS_PCM_SCLK(39)",
+	" CTS_VDIN_MEAS_CLK(38)",
+	" Reserved(37)",
+	" CTS_HDMI_TX_PIXEL_CLK(36)",
+	" CTS_MALI_CLK (35)",
+	" CTS_SDHC_SDCLK(34)",
+	" CTS_SDHC_RXCLK(33)",
+	" CTS_VDAC_CLK(32)",
+	" CTS_AUDAC_CLKPI(31)",
+	" MPLL_CLK_TEST_OUT(30)",
+	" Reserved(29)",
+	" CTS_SAR_ADC_CLK(28)",
+	" Reserved(27)",
+	" SC_CLK_INT(26)",
+	" Reserved(25)",
+	" LVDS_FIFO_CLK(24)",
+	" HDMI_CH0_TMDSCLK(23)",
+	" CLK_RMII_FROM_PAD (22)",
+	" I2S_CLK_IN_SRC0(21)",
+	" RTC_OSC_CLK_OUT(20)",
+	" CTS_HDMI_SYS_CLK(19)",
+	" A9_CLK_DIV16(18)",
+	" Reserved(17)",
+	" CTS_FEC_CLK_2(16)",
+	" CTS_FEC_CLK_1 (15)",
+	" CTS_FEC_CLK_0 (14)",
+	" CTS_AMCLK(13)",
+	" Reserved(12)",
+	" CTS_ETH_RMII(11)",
+	" Reserved(10)",
+	" CTS_ENCL_CLK(9)",
+	" CTS_ENCP_CLK(8)",
+	" CLK81 (7)",
+	" VID_PLL_CLK(6)",
+	" Reserved (5)",
+	" Reserved (4)",
+	" A9_RING_OSC_CLK(3)",
+	" AM_RING_OSC_CLK_OUT_EE2(2)",
+	" AM_RING_OSC_CLK_OUT_EE1(1)",
+	" AM_RING_OSC_CLK_OUT_EE0(0)",
+	};   
+	int  i;
+	int len = sizeof(clk_table)/sizeof(char*) - 1;
+	if (index  == 0xff)
+	{
+	 	for(i = 0;i < len;i++)
+		{
+			printk("[%10d]%s\n",clk_util_clk_msr(i),clk_table[len-i]);
+		}
+		return 0;
+	}	
+	printk("[%10d]%s\n",clk_util_clk_msr(index),clk_table[len-index]);
+	return 0;
+}
+
+long clk_round_rate_sys(struct clk *clk, unsigned long rate)
+{
+	int idx,dst;
+	if (clk == NULL || IS_ERR(clk))
+		return -EINVAL;
+	
+	dst = rate;
+	if (rate < SYS_PLL_TABLE_MIN) 
+		dst = SYS_PLL_TABLE_MIN;
+	else if (rate > SYS_PLL_TABLE_MAX) 
+		dst = SYS_PLL_TABLE_MAX;
+
+	if(dst < setup_a9_clk_min)
+		dst = setup_a9_clk_min;
+	else if(dst > setup_a9_clk_max)
+		dst = setup_a9_clk_max;
+ 	 
+	idx = ((dst - SYS_PLL_TABLE_MIN) / 1000000) / 24;
+	//printk("sys round rate: %d -- %d\n",rate,sys_pll_settings[idx][0]);
+	rate = sys_pll_settings[idx][0] * 1000000;
+	
+	return rate;
+}
+long clk_round_rate(struct clk *clk, unsigned long rate)
+{
+	if (clk == NULL || IS_ERR(clk))
+		return -EINVAL;
+	if(clk->round_rate)
+		return clk->round_rate(clk,rate);
+
+	if (rate < clk->min)
+		return clk->min;
+
+	if (rate > clk->max)
+		return clk->max;
+
+	return rate;
+}
+EXPORT_SYMBOL(clk_round_rate);
+
+unsigned long clk_get_rate(struct clk *clk)
+{
+	if (clk == NULL || IS_ERR(clk))
+		return -EINVAL;
+
+    if (clk->get_rate)
+		return clk->get_rate(clk);
+	else
+		return clk->rate;
+}
+EXPORT_SYMBOL(clk_get_rate);
+
+int on_parent_changed(struct clk *clk, int rate, int before,int failed)
+{
+	struct clk_ops* pops = clk->clk_ops;
+	while(pops){
+		if(before == 1){
+				if(pops->clk_ratechange_before)
+					pops->clk_ratechange_before(rate,pops->privdata);
+		}
+		else{
+				if(pops->clk_ratechange_after)
+					pops->clk_ratechange_after(rate,pops->privdata,failed);			
+		}
+		pops = pops->next;
+	}
+	return 0;
+}
+
+int meson_notify_childs_changed(struct clk *clk,int before,int failed)
+{
+	struct clk* p;
+	if(IS_CLK_ERR(clk))
+		return 0;
+	p = (struct clk*)(clk->child.next);
+	if (p) {
+		unsigned long flags;
+
+		int rate = clk_get_rate(p);
+		spin_lock_irqsave(&clockfw_lock, flags);
+		on_parent_changed(p,rate,before,failed);
+		spin_unlock_irqrestore(&clockfw_lock, flags);
+
+		meson_notify_childs_changed(p,before,failed);
+
+		p = (struct clk*)p->sibling.next;
+		while(p){
+		  spin_lock_irqsave(&clockfw_lock, flags);
+			on_parent_changed(p,rate,before,failed);
+			spin_unlock_irqrestore(&clockfw_lock, flags);
+
+			meson_notify_childs_changed(p,before,failed);
+
+			p = (struct clk*)p->sibling.next;
+		}
+	}
+	return 0;
+}
+
+//flow. self -> child -> child slibling
+int meson_clk_set_rate(struct clk *clk, unsigned long rate)
+{
+	unsigned long flags=0;
+	int ret;
+	int ops_run_count;
+	struct clk_ops *p;
+	
+	if(clk->set_rate == NULL || IS_CLK_ERR(clk))
+			return 0;
+	//post message before clk change.
+	{
+			ret = 0;
+			ops_run_count = 0;
+			p = clk->clk_ops;	
+			while(p){
+				ops_run_count++;
+				if(p->clk_ratechange_before)
+					ret = p->clk_ratechange_before(rate, p->privdata);
+				if(ret != 0)
+					break;
+				p = p->next;
+			}
+			meson_notify_childs_changed(clk,1,ret);
+	}		
+	
+
+	if(ret == 0){		
+	  if (!clk->open_irq)
+	      spin_lock_irqsave(&clockfw_lock, flags);
+	  else
+	      spin_lock(&clockfw_lock);
+//		printk(KERN_INFO "%s() clk=%p rate=%lu\n", __FUNCTION__, clk, rate);
+	  if(clk->set_rate)
+	  	ret = clk->set_rate(clk, rate) ;
+	  if (!clk->open_irq)
+	      spin_unlock_irqrestore(&clockfw_lock, flags);
+	  else
+	      spin_unlock(&clockfw_lock);
+	}
+
+	//post message after clk change.
+	{
+			int idx = 0;
+			p = clk->clk_ops;
+			while(p){
+				idx++;
+				if(idx > ops_run_count)
+					break;
+				if(p->clk_ratechange_after)
+						p->clk_ratechange_after(rate, p->privdata,ret);
+				p = p->next;
+			}			
+	}		
+	
+	meson_notify_childs_changed(clk,0,ret);
+ 
+  return ret;
+}
+
+int clk_set_rate(struct clk *clk, unsigned long rate)
+{
+	int ret=0;
+	int parent_rate = 0;
+	if(IS_CLK_ERR(clk))
+		return 0;
+	if(clk_get_rate(clk) == rate){
+			return 0;			
+	}
+		
+	if(clk->need_parent_changed){
+		unsigned long flags;
+	  spin_lock_irqsave(&clockfw_lock, flags);	
+		parent_rate = clk->need_parent_changed(clk, rate);
+	  spin_unlock_irqrestore(&clockfw_lock, flags);
+	}
+		
+	if(parent_rate != 0)
+		clk_set_rate(clk->parent,parent_rate);
+	else{
+		mutex_lock(&clock_ops_lock);
+		//printk(KERN_INFO "%s() clk=%p rate=%lu\n", __FUNCTION__, clk, rate);
+		ret = meson_clk_set_rate(clk,rate);
+	 	mutex_unlock(&clock_ops_lock);
+	}
+	return ret;
+}
+EXPORT_SYMBOL(clk_set_rate);
+
+unsigned long long clkparse(const char *ptr, char **retptr)
+{
+    char *endptr;   /* local pointer to end of parsed string */
+
+    unsigned long long ret = simple_strtoull(ptr, &endptr, 0);
+
+    switch (*endptr) {
+    case 'G':
+    case 'g':
+        ret *= 1000;
+    case 'M':
+    case 'm':
+        ret *= 1000;
+    case 'K':
+    case 'k':
+        ret *= 1000;
+        endptr++;
+    default:
+        break;
+    }
+
+    if (retptr) {
+        *retptr = endptr;
+    }
+
+    return ret;
+}
+
+int meson_enable(struct clk *clk)
+{
+	if (IS_CLK_ERR(clk))
+		return 0;
+
+	if (clk_get_status(clk) == 1)
+		return 0;
+
+	if (meson_enable(clk->parent) == 0) {
+			struct clk_ops *p;
+			int idx;
+			int ops_run_count = 0;
+			int ret = 0;
+			p = clk->clk_ops;
+			while(p){
+					ops_run_count++;
+					if(p->clk_enable_before)
+						ret = p->clk_enable_before(p->privdata);
+					if(ret == 1)
+						break;
+					p = p->next;
+			}
+	
+			if(ret == 0){	
+				if(clk->enable)
+					ret = clk->enable(clk);
+				else if(clk->clk_gate_reg_adr != 0)
+					aml_set_reg32_mask(clk->clk_gate_reg_adr,clk->clk_gate_reg_mask);
+					ret = 0;
+			}
+				
+			p = clk->clk_ops;
+			idx = 0;
+			while(p){
+				idx++;
+				if(idx > ops_run_count)
+					break;
+				if(p->clk_enable_after)
+					 p->clk_enable_after(p->privdata,ret);
+				p = p->next;
+			}
+			
+			return ret;
+		}
+		else
+			return 1;
+}
+int clk_enable(struct clk *clk)
+{
+		int ret;
+		mutex_lock(&clock_ops_lock);
+		ret = meson_enable(clk);
+		mutex_unlock(&clock_ops_lock);
+		return ret;
+}
+EXPORT_SYMBOL(clk_enable);
+
+int  meson_clk_disable(struct clk *clk)
+{
+		int ret = 0;
+		int ops_run_count = 0;
+		if(IS_CLK_ERR(clk))
+			return 0;
+		if(clk_get_status(clk) == 0)
+			return 0;
+
+		if(clk->child.next){
+			struct clk* pchild = (struct clk*)(clk->child.next);
+			if(meson_clk_disable(pchild) != 0)
+				return 1;
+			pchild = (struct clk*)pchild->sibling.next;
+			while(pchild){
+				if(meson_clk_disable(pchild) != 0)
+					return 1;
+				pchild = (struct clk*)pchild->sibling.next;
+			}
+		}
+
+		//do clk disable
+		//post message before clk disable.
+		{
+			struct clk_ops *p;
+			ret = 0;
+			p = clk->clk_ops;
+			while(p){
+				ops_run_count++;
+				if(p->clk_disable_before)
+					ret = p->clk_disable_before(p->privdata);
+				if(ret != 0)
+					break;
+				p = p->next;
+			}
+		}
+		
+		//do clock gate disable
+		if(ret == 0){
+			if(clk->disable)
+				ret = clk->disable(clk);
+			else if(clk->clk_gate_reg_adr != 0){
+					aml_clr_reg32_mask(clk->clk_gate_reg_adr,clk->clk_gate_reg_mask);
+					ret = 0;
+			}
+		}
+		
+		//post message after clk disable.
+		{
+			struct clk_ops *p;
+			int idx = 0;
+			p = clk->clk_ops;
+			while(p){
+				idx++;
+				if(idx > ops_run_count)
+					break;
+				if(p->clk_disable_after)
+						p->clk_disable_after(p->privdata,ret);																	
+				p = p->next;
+			}
+		}
+		
+		return ret;
+}
+
+void clk_disable(struct clk *clk)
+{
+		mutex_lock(&clock_ops_lock);
+		meson_clk_disable(clk);
+		mutex_unlock(&clock_ops_lock);
+}
+EXPORT_SYMBOL(clk_disable);
+
+/**
+ * Section all get rate functions
+ */
+static unsigned long clk_msr_get(struct clk * clk)
+{
+	uint32_t temp;
+	uint32_t cnt = 0;
+	
+	if(clk->rate > 0)
+	{
+		return clk->rate;
+	}
+	if(clk->msr>0)
+	{
+		clk->rate = clk_util_clk_msr(clk->msr);
+	}else if (clk->parent){
+		cnt=clk_get_rate(clk->parent);
+		cnt /= 1000000;
+		clk->msr_mul=clk->msr_mul?clk->msr_mul:1;
+		clk->msr_div=clk->msr_div?clk->msr_div:1;
+		temp=cnt*clk->msr_mul;
+		clk->rate=temp/clk->msr_div;
+		clk->rate *= 1000000;
+	}
+	return clk->rate;
+}
+
+static unsigned long clk_get_rate_xtal(struct clk * clkdev)
+{
+	unsigned long clk;
+	clk = aml_get_reg32_bits(P_PREG_CTLREG0_ADDR, 4, 6);
+	clk = clk * 1000 * 1000;
+	return clk;
+}
+
+static unsigned long clk_get_rate_sys(struct clk * clkdev)
+{
+	unsigned long clk;
+	if (clkdev && clkdev->rate)
+		clk = clkdev->rate;
+	else {
+		//using measure sys div3 to get sys pll clock. (25)
+		unsigned long mul, div, od, temp;
+		unsigned long long result;
+		clk = clk_get_rate_xtal(NULL);
+		temp = aml_read_reg32(P_HHI_SYS_PLL_CNTL);
+		mul=temp&((1<<9)-1);
+		div=(temp>>9)&0x3f;
+		od=(temp>>16)&3;
+		result=((u64)clk)*((u64)mul);
+		do_div(result,div);
+		clk = (unsigned long)(result>>od);
+	}
+	return clk;
+}
+
+static unsigned long clk_get_rate_a9(struct clk * clkdev)
+{
+	unsigned long clk = 0;
+	unsigned int sysclk_cntl;
+
+	if (clkdev && clkdev->rate)
+		return clkdev->rate;
+
+	sysclk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+	if((sysclk_cntl & (1<<7)) == 0)
+		clk = clk_get_rate_xtal(NULL);
+	else{
+		unsigned long parent_clk = 0;
+		unsigned int pll_sel = sysclk_cntl&3;
+		if(pll_sel == 0)
+			parent_clk = clk_get_rate_xtal(NULL);
+		else if(pll_sel == 1)
+			parent_clk = clk_get_rate_sys(clkdev->parent);
+		else
+			printk(KERN_INFO "Error : A9 parent pll selection incorrect!\n");
+		if(parent_clk > 0){
+			unsigned int N = (aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL1) >> 20) & 0x3FF;
+			unsigned int div = 1;
+			unsigned sel = (sysclk_cntl >> 2) & 3;
+			if(sel == 1)
+				div = 2;
+			else if(sel == 2)
+				div = 3;
+			else if(sel == 3)
+				div = 2 * N;
+			clk = parent_clk / div;
+		}
+	}
+	if (clk == 0) {
+		pr_info("clk_get_rate_a9 measured clk=0 sysclk_cntl=%#x\n", sysclk_cntl);
+	}
+
+	return clk;
+}
+
+/**
+ * udelay will delay depending on lpj.  lpj is adjusted before|after
+ * cpu freq is changed, so udelay could take longer or shorter than
+ * expected. This function scales the udelay value to get a more
+ * accurate delay during cpu freq changes.
+ * lpj is adjust elsewhere, so drivers don't need to worry about this.
+ */
+static inline void udelay_scaled(unsigned long usecs, unsigned int oldMHz,
+                                 unsigned int newMHz)
+{
+	udelay(usecs * newMHz / oldMHz);
+}
+
+/**
+ *  Internal CPU clock rate setting function.
+ *
+ *  MUST be called with proper protection.
+ */
+static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long gpu)
+{
+	unsigned long parent = 0;
+	unsigned long oldcpu = clk_get_rate_a9(clk);
+	unsigned int cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+	
+//	if ((cpu_clk_cntl & 3) == 1) {
+	{
+		parent = clk_get_rate_sys(clk->parent);
+		// CPU switch to xtal 
+		aml_write_reg32(P_HHI_SYS_CPU_CLK_CNTL, cpu_clk_cntl & ~(1 << 7));
+		if (oldcpu <= cpu) {
+			// when increasing frequency, lpj has already been adjusted
+			udelay_scaled(10, cpu / 1000000, 24 /*clk_get_rate_xtal*/);
+		} else {
+			// when decreasing frequency, lpj has not yet been adjusted
+			udelay_scaled(10, oldcpu / 1000000, 24 /*clk_get_rate_xtal*/);
+		}
+		set_sys_pll(clk->parent, cpu);
+
+		// Read CBUS for short delay, then CPU switch to sys pll
+		cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+		aml_write_reg32(P_HHI_SYS_CPU_CLK_CNTL, (cpu_clk_cntl) | (1 << 7));
+		if (oldcpu <= cpu) {
+			// when increasing frequency, lpj has already been adjusted
+			udelay(100);
+		} else {
+			// when decreasing frequency, lpj has not yet been adjusted
+			udelay_scaled(100, oldcpu / 1000000, cpu / 1000000);
+		}
+
+		// CPU switch to sys pll
+		//cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+		//aml_set_reg32_mask(P_HHI_SYS_CPU_CLK_CNTL, (1 << 7));
+ 	}
+
+	clk->rate = cpu; 
+ 
+#ifdef CONFIG_CPU_FREQ_DEBUG
+	pr_debug("(CTS_CPU_CLK) CPU %ld.%ldMHz\n", clk_get_rate_a9(clk) / 1000000, clk_get_rate_a9(clk)%1000000);
+#endif /* CONFIG_CPU_FREQ_DEBUG */
+
+	return 0;
+}
+
+#ifdef CONFIG_SMP
+#define USE_ON_EACH_CPU 0
+struct clk_change_info{
+  int cpu;
+  struct clk * clk;
+  unsigned long rate;
+  int err;
+};
+
+#define MESON_CPU_STATUS(cpu) aml_read_reg32(MESON_CPU_STATUS_REG(cpu))
+#define MESON_CPU_SET_STATUS(status) aml_write_reg32(MESON_CPU_STATUS_REG(smp_processor_id()),status)
+
+void meson_set_cpu_power_ctrl(uint32_t cpu,int is_power_on)
+{
+	BUG_ON(cpu == 0);
+
+	if(is_power_on){
+		/* SCU Power on CPU */
+		aml_set_reg32_bits(MESON_CPU_POWER_CTRL_REG, 0x0 ,(cpu << 3),2);
+
+#ifndef CONFIG_MESON_CPU_EMULATOR
+		/* Reset enable*/
+		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 1 , (cpu + 24), 1);
+		/* Power on*/
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL1, 0x0, ((cpu +1) << 1 ), 2);
+		udelay(10);
+		/* Isolation disable */
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL0, 0x0, cpu, 1);
+		/* Reset disable */
+		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0 , (cpu + 24), 1);
+#endif
+	}else{
+		aml_set_reg32_bits(MESON_CPU_POWER_CTRL_REG,0x3,(cpu << 3),2);
+
+#ifndef CONFIG_MESON_CPU_EMULATOR
+		/* Isolation enable */
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL0, 0x1, cpu, 1);
+		udelay(10);
+		/* Power off */
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL1, 0x3, ((cpu +1) << 1 ), 2);
+#endif
+	}
+	dsb();
+	dmb();
+
+	pr_debug("----CPU %d\n",cpu);
+	pr_debug("----MESON_CPU_POWER_CTRL_REG(%08x) = %08x\n",MESON_CPU_POWER_CTRL_REG,aml_read_reg32(MESON_CPU_POWER_CTRL_REG));
+	pr_debug("----P_AO_RTI_PWR_A9_CNTL0(%08x)    = %08x\n",P_AO_RTI_PWR_A9_CNTL0,aml_read_reg32(P_AO_RTI_PWR_A9_CNTL0));
+	pr_debug("----P_AO_RTI_PWR_A9_CNTL1(%08x)    = %08x\n",P_AO_RTI_PWR_A9_CNTL1,aml_read_reg32(P_AO_RTI_PWR_A9_CNTL1));
+
+}
+
+void meson_set_cpu_ctrl_reg(int cpu,int is_on)
+{
+	spin_lock(&clockfw_lock);
+	aml_set_reg32_bits(MESON_CPU_CONTROL_REG,is_on,cpu,1);
+	aml_set_reg32_bits(MESON_CPU_CONTROL_REG,1,0,1);
+	spin_unlock(&clockfw_lock);
+}
+void meson_set_cpu_ctrl_addr(uint32_t cpu, const uint32_t addr)
+{
+	spin_lock(&clockfw_lock);
+	aml_write_reg32((MESON_CPU1_CONTROL_ADDR_REG + ((cpu-1) << 2)), addr);
+	spin_unlock(&clockfw_lock);	
+}
+
+static inline unsigned long meson_smp_wait_others(unsigned status)
+{
+	unsigned long count = 0;
+	int mask;
+	int cpu = 0, my = smp_processor_id();
+
+	mask = (((1 << nr_cpu_ids) - 1) & (~(1 << my)));
+	do {
+		__asm__ __volatile__ ("wfe" : : : "memory");
+		for_each_online_cpu(cpu) {
+
+			if (cpu != my && MESON_CPU_STATUS(cpu) == status) {
+				count++;
+				mask &= ~(1 << cpu);
+			}
+		}
+
+	} while (mask);
+
+	return count;
+}
+
+static inline void meson_smp_init_transaction(void)
+{
+    int cpu;
+
+    aml_write_reg32(MESON_CPU_CONTROL_REG, 0);
+
+    for_each_online_cpu(cpu) {
+        aml_write_reg32(MESON_CPU_STATUS_REG(cpu), 0);
+    }
+}
+
+#endif /* CONFIG_SMP */
+
+static int clk_set_rate_a9(struct clk *clk, unsigned long rate)
+{
+	int ret;	
+	unsigned long irq_flags;
+
+	//printk("clk_set_rate_a9() clk: %d\n",rate);
+
+	if(rate > CPU_FREQ_LIMIT)
+		rate = CPU_FREQ_LIMIT;
+
+	irq_flags = arch_local_irq_save();
+	preempt_disable();
+
+	ret = _clk_set_rate_cpu(clk, rate, 0);
+
+	preempt_enable();
+	arch_local_irq_restore(irq_flags);
+
+	return ret;
+}
+static unsigned long clk_get_rate_vid(struct clk * clkdev)
+{
+
+	unsigned long clk;
+	unsigned int vid_cntl = aml_read_reg32(P_HHI_VID_PLL_CNTL);
+	unsigned long parent_clk;
+	unsigned od,M,N;
+	parent_clk = clk_get_rate(clkdev->parent);
+	parent_clk /= 1000000;
+	od = (vid_cntl>>16)&3;
+	M = vid_cntl&0x1FF;
+	N = (vid_cntl>>9)&0x1F;
+	if(od == 0)
+		od = 1;
+	else if(od == 1)
+		od = 2;
+	else if(od == 2)
+		od = 4;
+	clk = parent_clk * M / N;
+	clk /= od;
+	clk *= 1000000;
+	return clk;
+}
+
+static unsigned long clk_get_rate_fixed(struct clk * clkdev)
+{
+
+	unsigned long clk;
+	unsigned int fixed_cntl = aml_read_reg32(P_HHI_MPLL_CNTL);
+	unsigned long parent_clk;
+	unsigned od,M,N;
+	parent_clk = clk_get_rate(clkdev->parent);
+	parent_clk /= 1000000;
+	od = (fixed_cntl>>16)&3;
+	M = fixed_cntl&0x1FF;
+	N = (fixed_cntl>>9)&0x1F;
+	if(od == 0)
+		od = 1;
+	else if(od == 1)
+		od = 2;
+	else if(od == 2)
+		od = 4;
+	clk = parent_clk * M / N;
+	clk /= od;
+	clk *= 1000000;
+	return clk;
+}
+
+static unsigned long clk_get_rate_hpll(struct clk * clkdev)
+{
+	printk("TODO: clk_get_rate_hpll() is not implement in M8 now\n");
+	return 0;
+/*
+	unsigned long clk;
+	unsigned int vid_cntl = aml_read_reg32(P_HHI_VID_PLL_CNTL);
+	unsigned long parent_clk;
+	unsigned od_fb,od_hdmi,od_ldvs,M,N;
+	parent_clk = clk_get_rate(clkdev->parent);
+	parent_clk /= 1000000;
+	od_ldvs = (vid_cntl>>16)&3;
+	od_hdmi = (vid_cntl>>18)&3;
+	od_fb = (vid_cntl>>20)&3;
+	M = vid_cntl&0x3FF;
+	N = (vid_cntl>>10)&0x1F;
+	if(od_hdmi == 0)
+		od_hdmi = 1;
+	else if(od_hdmi == 1)
+		od_hdmi = 2;
+	else if(od_hdmi == 2)
+		od_hdmi = 4;
+	if(od_fb == 0)
+		od_fb = 1;
+	else if(od_fb == 1)
+		od_fb = 2;
+	else if(od_fb == 2)
+		od_fb = 4;
+printk("N=%d, od_hdmi=%d vid_cntl=0x%x\n",N,od_hdmi,vid_cntl);
+	clk = parent_clk * M * od_fb / N;
+	clk /= od_hdmi;
+	clk *= 1000000;
+	return clk;
+	*/
+}
+
+static unsigned long clk_get_rate_clk81(struct clk * clkdev)
+{
+	unsigned long parent_clk;
+	unsigned long fixed_div_src;
+
+	parent_clk = clk_get_rate(clkdev->parent);
+	fixed_div_src = (aml_read_reg32(P_HHI_MPEG_CLK_CNTL) >> 12) & 0x7;
+
+	if(7 == fixed_div_src)
+		parent_clk/=5;
+	else if(6 == fixed_div_src)
+		parent_clk/=3;
+	else if(5 == fixed_div_src)
+		parent_clk/=4;
+	else{
+		printk("Error: clk81 not in fixed_pll seleting.\n");
+		return 0;
+	}
+
+	parent_clk/=((aml_read_reg32(P_HHI_MPEG_CLK_CNTL) & 0x3f))+1;
+	
+	return parent_clk;	
+}
+#define CLK_DEFINE(devid,conid,msr_id,setrate,getrate,en,dis,privdata)  \
+    static struct clk clk_##devid={                                     \
+        .set_rate=setrate,.get_rate=getrate,.enable=en,.disable=dis,    \
+        .priv=privdata,.parent=&clk_##conid ,.msr=msr_id                \
+    };                                                                  \
+    static struct clk_lookup clk_lookup_##devid={                       \
+        .dev_id=#devid,.con_id=#conid,.clk=&clk_##devid                 \
+    };clkdev_add(&clk_lookup_##devid)
+
+///TOP level
+static struct clk clk_xtal = {
+	.rate		= -1,
+	.get_rate	= clk_get_rate_xtal,
+};
+
+static struct clk_lookup clk_lookup_xtal = {
+	.dev_id		= "xtal",
+	.con_id		= NULL,
+	.clk		= &clk_xtal
+};
+
+
+static int __init a9_clk_max(char *str)
+{
+    unsigned long  clk=clkparse(str, 0);
+    if(clk<SYS_PLL_TABLE_MIN || clk>SYS_PLL_TABLE_MAX)
+        return 0;
+    setup_a9_clk_max=clk-(clk%24000000);
+    BUG_ON(setup_a9_clk_min>setup_a9_clk_max);
+    return 0;
+}
+early_param("a9_clk_max", a9_clk_max);
+static int __init a9_clk_min(char *str)
+{
+    unsigned long  clk = clkparse(str, 0);
+    if (clk < SYS_PLL_TABLE_MIN || clk > SYS_PLL_TABLE_MAX)
+        return 0;
+    setup_a9_clk_min = clk - (clk % 24000000);
+    BUG_ON(setup_a9_clk_min>setup_a9_clk_max);
+    return 0;
+}
+
+early_param("a9_clk_min", a9_clk_min);
+static int set_sys_pll(struct clk *clk,  unsigned long dst)
+{
+	int idx,loop,scale_mhz;
+	static int only_once = 0;
+	unsigned int curr_cntl = aml_read_reg32(P_HHI_SYS_PLL_CNTL);
+	unsigned int cpu_clk_cntl = 0;
+	unsigned int cntl;
+	latency_data_t latency;
+
+	if (dst < SYS_PLL_TABLE_MIN) dst = SYS_PLL_TABLE_MIN;
+	if (dst > SYS_PLL_TABLE_MAX) dst = SYS_PLL_TABLE_MAX;
+ 
+	idx = ((dst - SYS_PLL_TABLE_MIN) / 1000000) / 24;
+	cpu_clk_cntl = sys_pll_settings[idx][1];
+	latency.d32 =  sys_pll_settings[idx][2];
+
+	printk(KERN_DEBUG"CTS_CPU_CLK %4ld --> %4ld (MHz)\n",
+									clk->rate / 1000000, dst / 1000000);
+	pr_debug("CTS_CPU_CLK old_cntl=0x%x new_cntl=0x%x, latency: %x\n", 
+									curr_cntl, cpu_clk_cntl, latency.d32);
+
+	if (cpu_clk_cntl != curr_cntl) {
+SETPLL:
+		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL1,latency.b.ext_div_n,20,10);
+		if(latency.b.ext_div_n)
+			aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 3, 2, 2);
+		else
+			aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0, 2, 2);
+		aml_write_reg32(P_HHI_SYS_PLL_CNTL,  cpu_clk_cntl | (1 << 29));
+		if(only_once == 99){
+			only_once = 1;
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL2, M8_SYS_PLL_CNTL_2);
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL3, M8_SYS_PLL_CNTL_3);
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL4, M8_SYS_PLL_CNTL_4);
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL5, M8_SYS_PLL_CNTL_5);
+		}
+		aml_set_reg32_bits(P_HHI_SYS_PLL_CNTL2,latency.b.afc_dsel_bp_in,12,1);
+		aml_set_reg32_bits(P_HHI_SYS_PLL_CNTL2,latency.b.afc_dsel_bp_en,13,1);
+
+		aml_write_reg32(P_HHI_SYS_PLL_CNTL,  cpu_clk_cntl);
+
+		if (clk->old_rate <= dst) 
+			/* when increasing frequency, lpj has already been adjusted */
+			scale_mhz = dst / 1000000;// 
+		else
+			/* when decreasing frequency, lpj has not yet been adjusted */
+			scale_mhz = clk->rate / 1000000;
+
+		loop=0;
+		cntl = aml_read_reg32(P_HHI_SYS_PLL_CNTL);
+		while((cntl & (1<<31)) == 0){
+			udelay_scaled(100, dst / 1000000, 24 /*clk_get_rate_xtal*/);
+			cntl = aml_read_reg32(P_HHI_SYS_PLL_CNTL);
+			if(loop++ > 10000){
+				printk(KERN_ERR"CPU freq: %ld MHz, syspll (%x) can't lock: \n",dst/1000000,cntl);
+				printk(KERN_ERR"  [10c0..10c4]%08x, %08x, %08x, %08x, %08x: [10a5]%08x, [10c7]%08x \n",
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL),
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL2),	
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL3),
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL4),	
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL5),	
+					aml_read_reg32(P_HHI_MPLL_CNTL6),
+					aml_read_reg32(P_HHI_DPLL_TOP_1)
+				);
+				if(!(aml_read_reg32(P_HHI_DPLL_TOP_1) & 0x2)){
+					printk(KERN_ERR"  SYS_TDC_CAL_DONE triggered, disable TDC_CAL_EN\n");
+					aml_set_reg32_bits(P_HHI_SYS_PLL_CNTL4, 0, 10, 1);
+					printk(KERN_ERR"  HHI_SYS_PLL_CNTL4: %08x\n", 
+						aml_read_reg32(P_HHI_SYS_PLL_CNTL4));
+				}
+				printk(KERN_ERR"  Try again!\n");
+				goto SETPLL;
+			}
+		};
+
+	}else {
+		//printk(KERN_INFO "(CTS_CPU_CLK) No Change (0x%x)\n", cpu_clk_cntl);
+	}
+
+	if (clk)
+		clk->rate = (idx * 24000000) + SYS_PLL_TABLE_MIN;
+
+	return idx;
+}
+
+static int set_hpll_pll(struct clk * clk, unsigned long dst)
+{
+	printk("TODO: set_hpll_pll not implement\n");
+	return 1;
+}
+static int set_fixed_pll(struct clk * clk, unsigned long dst)
+{
+	if(dst == 2000000000){
+		//fixed pll = xtal * M(0:8) * OD_FB(4) /N(9:13) /OD(16:17)
+		//M: 0~511  OD_FB:0~1 + 1, N:0~32 + 1 OD:0~3 + 1
+		//recommend this pll is fixed as 2G.
+		unsigned long xtal = 24000000;
+		unsigned cntl = aml_read_reg32(P_HHI_MPLL_CNTL);
+		unsigned m = cntl&0x1FF;
+		unsigned n = ((cntl>>9)&0x1F);
+		unsigned od = ((cntl >>16)&3) + 1;
+		unsigned od_fb = ((aml_read_reg32(P_HHI_MPLL_CNTL4)>>4)&1) + 1;
+		unsigned long rate;
+		if(clk->parent)
+			xtal = clk_get_rate(clk->parent);
+		xtal /= 1000000;
+		rate = xtal * m * od_fb;
+		rate /= n;
+		rate /= od;
+		rate *= 1000000;
+		if(dst != rate){
+			M8_PLL_RESET(P_HHI_MPLL_CNTL);
+			aml_write_reg32(P_HHI_MPLL_CNTL2, M8_MPLL_CNTL_2 );
+			aml_write_reg32(P_HHI_MPLL_CNTL3, M8_MPLL_CNTL_3 );
+			aml_write_reg32(P_HHI_MPLL_CNTL4, M8_MPLL_CNTL_4 );
+			aml_write_reg32(P_HHI_MPLL_CNTL5, M8_MPLL_CNTL_5 );
+			aml_write_reg32(P_HHI_MPLL_CNTL6, M8_MPLL_CNTL_6 );
+			aml_write_reg32(P_HHI_MPLL_CNTL7, M8_MPLL_CNTL_7 );
+			aml_write_reg32(P_HHI_MPLL_CNTL8, M8_MPLL_CNTL_8 );
+			aml_write_reg32(P_HHI_MPLL_CNTL9, M8_MPLL_CNTL_9 );
+			aml_write_reg32(P_HHI_MPLL_CNTL, M8_MPLL_CNTL );
+			M8_PLL_WAIT_FOR_LOCK(P_HHI_MPLL_CNTL);
+		}
+	}
+	else
+		return -1;
+	return 0;
+}
+
+static int set_vid_pll(struct clk * clk, unsigned long dst)
+{
+	printk("TODO: set_vid_pll not implement\n");
+	return 1;
+}
+
+//------------------------------------
+//return 0:not in the clock tree, 1:in the clock tree
+static int clk_in_clocktree(struct clk *clktree, struct clk *clk)
+{
+	struct clk *p;
+	int ret = 0;
+	if(IS_CLK_ERR(clk) || IS_CLK_ERR(clktree))
+		return 0;
+	if(clktree == clk)
+		return 1;
+	p = (struct clk*)clktree->sibling.next;
+	while(p){
+		if(p == clk){
+			ret = 1;
+			break;
+		}
+		p = (struct clk*)p->sibling.next;
+	}
+	if(ret == 1)
+		return ret;
+	return clk_in_clocktree((struct clk*)clktree->child.next, clk);
+}
+
+//return 0:ok, 1:fail
+static int meson_clk_register(struct clk* clk, struct clk* parent)
+{
+	if (clk_in_clocktree(parent,clk))
+			return 0;
+	mutex_lock(&clock_ops_lock);
+	clk->parent = parent;
+	if (parent->child.next == NULL) {
+		parent->child.next = (struct list_head*)clk;
+		clk->sibling.next = NULL;
+		clk->sibling.prev = NULL;
+	}
+	else {
+		struct clk* p = (       struct clk*)(parent->child.next);
+		while(p->sibling.next != NULL)
+			p = (       struct clk*)(p->sibling.next);
+		p->sibling.next = (struct list_head*)clk;
+		clk->sibling.prev = (struct list_head*)p;
+		clk->sibling.next = NULL;
+	}
+	mutex_unlock(&clock_ops_lock);
+	return 0;
+}
+
+int clk_register(struct clk *clk,const char *parent)
+{
+	struct clk* p = clk_get_sys(parent,0);
+	if(!IS_CLK_ERR(p))
+		return meson_clk_register(clk,p);
+	return 1;
+}
+EXPORT_SYMBOL(clk_register);
+
+void clk_unregister(struct clk *clk)
+{
+		if(IS_CLK_ERR(clk))
+			return;
+		mutex_lock(&clock_ops_lock);
+		if(clk->sibling.next){
+				struct clk* pnext = (struct clk*)(clk->sibling.next);
+				pnext->sibling.prev = clk->sibling.prev;
+				if(clk->sibling.prev)
+					((struct clk*)(clk->sibling.prev))->sibling.next = (struct list_head*)pnext;
+				else
+					clk->parent->child.next = (struct list_head*)pnext;
+				
+		}
+		else if(clk->sibling.prev){
+				struct clk* prev = (struct clk*)(clk->sibling.prev);
+				prev->sibling.next = clk->sibling.next;
+				if(clk->sibling.next)
+					((struct clk*)(clk->sibling.next))->sibling.prev =(struct list_head*) prev;
+		}
+		else{
+			struct clk* parent = clk->parent;
+			if(parent)
+				parent->child.next = NULL;
+		}
+		clk->sibling.next = NULL;
+		clk->sibling.prev = NULL;
+		mutex_unlock(&clock_ops_lock);
+}
+EXPORT_SYMBOL(clk_unregister);
+
+/**
+ *  Check clock status.
+ *
+ *  0 -- Disabled
+ *  1 -- Enabled
+ *  2 -- Unknown
+ */
+int clk_get_status(struct clk *clk)
+{
+	int ret = 2;
+	unsigned long flags;
+
+	spin_lock_irqsave(&clockfw_lock, flags);
+	if (clk->status)
+		ret = clk->status(clk);
+	else if (clk->clk_gate_reg_adr != 0)
+		ret = ((aml_read_reg32(clk->clk_gate_reg_adr) & clk->clk_gate_reg_mask) ? 1 : 0);
+	spin_unlock_irqrestore(&clockfw_lock, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL(clk_get_status);
+
+//return: 0:success  1: fail
+int clk_ops_register(struct clk *clk, struct clk_ops *ops)
+{
+	int found = 0;
+	struct clk_ops *p;
+
+	mutex_lock(&clock_ops_lock);
+	ops->next = NULL;
+	p = clk->clk_ops;
+	while(p != NULL){
+		if(p == ops){
+			found = 1;
+			break;
+		}
+		p = p->next;
+	}
+
+	if(found == 0){
+		if(clk->clk_ops	== NULL)
+			clk->clk_ops = ops;
+		else{
+			struct clk_ops* p = clk->clk_ops;
+			while(p->next)
+				p = p->next;
+			p->next = ops;
+		}
+	}
+	mutex_unlock(&clock_ops_lock);
+	return 0;
+}
+EXPORT_SYMBOL(clk_ops_register);
+
+//return: 0:success  1: fail
+int clk_ops_unregister(struct clk *clk, struct clk_ops *ops)
+{
+	if(ops == NULL || IS_CLK_ERR(clk))
+		return 0;
+		
+	mutex_lock(&clock_ops_lock);
+	
+	if(clk->clk_ops == ops){
+		if(clk->clk_ops->next == NULL)
+			clk->clk_ops = NULL;
+		else
+			clk->clk_ops = clk->clk_ops->next;
+	}
+	else if(clk->clk_ops){
+		struct clk_ops *p, *p1;
+		p = clk->clk_ops->next;
+		p1 = clk->clk_ops;
+		while(p != NULL && p != ops){
+			p1 = p;
+			p = p->next;
+		}
+		if(p == ops)
+			p1->next = p->next;
+	}
+	ops->next = NULL;
+	mutex_unlock(&clock_ops_lock);
+	return 0;
+}
+EXPORT_SYMBOL(clk_ops_unregister);
+
+///FIXME add data later
+#define PLL_CLK_DEFINE(name,msr)    		\
+	static unsigned pll_##name##_data[10];	\
+    CLK_DEFINE(pll_##name,xtal,msr,set_##name##_pll, \
+    		clk_msr_get,NULL,NULL,&pll_##name##_data)
+_Pragma("GCC diagnostic ignored \"-Wdeclaration-after-statement\"");
+#define PLL_RELATION_DEF(child,parent) meson_clk_register(&clk_pll_##child,&clk_##parent)
+#define CLK_PLL_CHILD_DEF(child,parent) meson_clk_register(&clk_##child,&clk_pll_##parent)
+
+
+#ifdef CONFIG_CLKTREE_DEBUG
+
+extern struct clk_lookup * lookup_clk(struct clk* clk);
+void print_clk_name(struct clk* clk)
+{
+		printk("Todo: we have not lookup_clk in 3.7 kernel!\n");
+		//struct clk_lookup * p = lookup_clk(clk);
+		//if(p)
+		//	printk("  %s  \n",p->dev_id);
+		//else
+		//	printk(" unknown \n");
+}
+
+void dump_child(int nlevel, struct clk* clk)
+{
+		if(!IS_CLK_ERR(clk)){
+			int i;
+			for(i = 0; i < nlevel; i++)
+				printk("  ");
+			print_clk_name(clk);
+			dump_child(nlevel+6,(struct clk*)(clk->child.next));
+			{
+				struct clk * p = (struct clk*)(clk->sibling.prev);
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)(p->sibling.prev);
+				}
+				
+				p = (struct clk*)(clk->sibling.next);
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)(p->sibling.next);
+				}
+			}
+		}
+}
+
+void dump_clock_tree(struct clk* clk)
+{
+	printk("========= dump clock tree==============\n");
+	mutex_lock(&clock_ops_lock);
+
+	int nlevel = 0;
+	if(!IS_CLK_ERR(clk)){
+		print_clk_name(clk);
+		dump_child(nlevel + 6,(struct clk*)(clk->child.next));
+			{	int i;
+				struct clk * p = (struct clk*)clk->sibling.prev;
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)clk->sibling.prev;
+				}
+				
+				p = (struct clk*)clk->sibling.next;
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)clk->sibling.next;
+				}
+			}
+	}
+	mutex_unlock(&clock_ops_lock);
+	printk("========= dump clock tree end ==============\n");
+}
+
+static ssize_t  clock_tree_store(struct class *cla, struct class_attribute *attr, const char *buf,size_t count)
+{
+	char* p = (char *)buf;
+	char cmd;
+	char name[20];
+	unsigned long rate = 0;
+	int idx = 0;
+	if(count < 1)
+		return -1;
+	while((idx < count) && ((*p == ' ') || (*p == '\t')|| (*p == '\r') || (*p == '\n'))){
+		 p++;
+		 idx++;
+	}
+	
+	if(idx <= count){
+		int i;
+		cmd = *p;
+		p++;
+		while((idx < count) && ((*p == ' ') || (*p == '\t')|| (*p == '\r') || (*p == '\n'))){
+		 p++;
+		 idx++;
+		}
+		i = 0;
+		while((idx < count) && (*p != ' ') && (*p != '\t') && (*p != '\r') && (*p != '\n')){
+			name[i++] = *p;
+			p++;
+			idx++;
+		}	
+		name[i] = '\0';
+		p++;
+		while((idx < count) && ((*p == ' ') || (*p == '\t')|| (*p == '\r') || (*p == '\n'))){
+		 p++;
+		 idx++;
+		}
+		if(idx < count){
+			int val;
+			sscanf(p, "%d", &val);
+			rate = val;
+		}
+				
+		if(cmd == 'r'){
+			if(strcmp(name,"tree") == 0){
+				struct clk* clk = clk_get_sys("xtal",NULL);
+				if(!IS_CLK_ERR(clk))
+					dump_clock_tree(clk);
+			}
+			else{
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+					clk->rate = 0; //enforce update rate 
+					printk("%s : %lu\n",name,clk_get_rate(clk));
+				}
+				else
+					printk("no %s in tree.\n",name);
+			}
+		}	
+		else if(cmd == 'w'){		
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+					if(rate < 1000000 || rate >1512000000)
+						printk("Invalid rate : %lu\n",rate);
+					else{
+						if(clk_set_rate(clk,rate) ==0)
+							printk("%s = %lu\n",name,rate);
+						else
+							printk("set %s = %lu failed.\n",name,rate);
+					}
+				}
+				else
+					printk("no %s in tree.\n",name);			
+		}	
+		else if(cmd == 'o'){
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+					if(clk_enable(clk) ==0)
+							printk("%s gate on\n",name);
+					else
+							printk("gate on %s failed.\n",name);
+				}
+				else
+					printk("no %s in tree.\n",name);			
+			
+		}
+		else if(cmd == 'f'){
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+						clk_disable(clk);
+						printk("gate off %s.\n",name);
+				}
+				else
+					printk("no %s in tree.\n",name);						
+		}
+		else
+			printk("command:%c invalid.\n",cmd);
+	}
+
+	return count;
+}
+
+static ssize_t  clock_tree_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+	printk("Usage:\n");
+	printk("1. echo r tree >clkTree       ,display the clock tree.\n");
+	printk("2. echo r clockname >clkTree  ,display the clock rate.\n");
+	printk("3. echo w clockname rate >clkTree  ,modify the clock rate.\n");
+	printk("4. echo o clockname >clkTree  ,gate on clock.\n");
+	printk("5. echo f clockname >clkTree  ,gate off clock.\n");
+	
+	printk("Example:\n");
+	printk("1. display the clock tree.\n");
+	printk("   echo r tree >clkTree\n");
+	printk("2. display clk81 rate.\n");
+	printk("   echo r clk81 >clkTree\n");
+	printk("3. modify sys pll as 792M.\n");
+	printk("   echo w pll_sys 792000000 >clkTree\n");
+	return 0;
+}
+
+static struct class_attribute clktree_class_attrs[] = {
+
+
+	__ATTR(clkTree, S_IRWXU, clock_tree_show, clock_tree_store),
+	__ATTR_NULL,
+};
+
+static struct class meson_clktree_class = {    
+	.name = "meson_clocktree",
+	.class_attrs = clktree_class_attrs,
+};
+#endif
+
+// -------------------- frequency limit sysfs ---------------------
+static ssize_t freq_limit_store(struct class *cla, struct class_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+	freq_limit = input;
+	return count;
+}
+static ssize_t freq_limit_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+	printk("%u\n", freq_limit);
+	return sprintf(buf, "%d\n", freq_limit);
+}
+
+
+static struct class_attribute freq_limit_class_attrs[] = {
+	__ATTR(limit, S_IRWXU, freq_limit_show, freq_limit_store),
+	__ATTR_NULL,
+};
+
+static struct class meson_freq_limit_class = {
+	.name = "freq_limit",
+	.class_attrs = freq_limit_class_attrs,
+};
+
+static int __init meson_clock_init(void)
+{
+#if 1
+	clkdev_add(&clk_lookup_xtal);
+	CLK_DEFINE(pll_ddr,xtal,-1/*=47??*/,NULL,NULL/*clk_msr_get*/,NULL,NULL,NULL);
+	PLL_CLK_DEFINE(sys,(unsigned long)-1);
+	PLL_CLK_DEFINE(vid,6);
+	PLL_CLK_DEFINE(fixed,-1);
+	PLL_CLK_DEFINE(hpll,19);///19 is right?
+	clk_pll_fixed.msr_mul = 425 * 24; //This value just let get fixed_pll = 2.55G
+	clk_pll_fixed.msr_div = 4;
+	clk_pll_sys.get_rate = clk_get_rate_sys;
+	clk_pll_vid.get_rate = clk_get_rate_vid;
+	clk_pll_fixed.get_rate = clk_get_rate_fixed;
+	clk_pll_hpll.get_rate = clk_get_rate_hpll;
+
+	clk_pll_vid.max = 3000000000U;//3.0G
+	clk_pll_vid.min = 1200000000U;//1.2G
+	clk_pll_hpll.max = 3000000000U;//3.0G
+	clk_pll_hpll.min = 1200000000U;//1.2G
+	clk_pll_sys.max = 2500000000U;//2.5G
+	clk_pll_sys.min = 1200000000U;//1.2G
+	clk_pll_ddr.max = 1512000000U;//1.5G
+	clk_pll_ddr.min = 750000000U;//750M
+	clk_pll_fixed.max = 2550000000U;//2.55G
+	clk_pll_fixed.min = 2550000000U;//2.55G
+
+	//create pll tree
+	PLL_RELATION_DEF(sys,xtal);
+	PLL_RELATION_DEF(ddr,xtal);
+	PLL_RELATION_DEF(vid,xtal);
+	PLL_RELATION_DEF(fixed,xtal);
+	PLL_RELATION_DEF(hpll,xtal);
+
+
+	// Add clk81
+	if(((aml_read_reg32(P_HHI_MPEG_CLK_CNTL) >> 12) & 0x7) >= 5)
+	{
+		CLK_DEFINE(clk81, pll_fixed, -1, NULL, clk_get_rate_clk81, NULL, NULL, NULL);
+
+		// Add clk81 as pll_fixed's child
+	    //CLK_PLL_CHILD_DEF(clk81, fixed);
+	    clk_clk81.clk_gate_reg_adr = P_HHI_MPEG_CLK_CNTL;
+	    clk_clk81.clk_gate_reg_mask = (1<<7);
+		clk_clk81.open_irq = 1;
+	}else{
+		printk("Error: clk81 not be selected at fixed_pll.\n");
+	}
+
+	// Add CPU clock
+	CLK_DEFINE(a9_clk, pll_sys, -1, clk_set_rate_a9, clk_get_rate_a9, NULL, NULL, NULL);
+	clk_a9_clk.min = setup_a9_clk_min;
+	clk_a9_clk.max = setup_a9_clk_max;
+	clk_a9_clk.round_rate = clk_round_rate_sys;
+	//clk_a9_clk.open_irq = 1;
+	CLK_PLL_CHILD_DEF(a9_clk,sys);
+
+
+#ifdef CONFIG_AMLOGIC_USB
+    // Add clk usb0
+    CLK_DEFINE(usb0,xtal,4,NULL,clk_msr_get,clk_enable_usb,clk_disable_usb,"usb0");
+    meson_clk_register(&clk_usb0,&clk_xtal);
+    clk_usb0.clk_gate_reg_adr = P_USB_ADDR0;
+    clk_usb0.clk_gate_reg_mask = (1<<0);
+    
+    // Add clk usb1
+    CLK_DEFINE(usb1,xtal,5,NULL,clk_msr_get,clk_enable_usb,clk_disable_usb,"usb1");
+    meson_clk_register(&clk_usb1,&clk_xtal);
+    clk_usb1.clk_gate_reg_adr = P_USB_ADDR8;
+    clk_usb1.clk_gate_reg_mask = (1<<0);
+#endif
+		
+	{
+		// Dump clocks
+		char *clks[] = { 
+				"xtal",
+				"pll_sys",
+				"pll_fixed",
+				"pll_vid",
+				"pll_hpll",
+				"pll_ddr",
+				"a9_clk",
+				"clk81",
+		};
+		int i;
+		int count = ARRAY_SIZE(clks);
+		struct clk *clk;
+
+		for (i = 0; i < count; i++) {
+			char *clk_name = clks[i];
+
+			clk = clk_get_sys(clk_name, NULL);
+			if (!IS_CLK_ERR(clk))
+				printk("clkrate [ %s \t] : %lu\n", clk_name, clk_get_rate(clk));
+		}
+	}
+		
+#ifdef CONFIG_CLKTREE_DEBUG
+	class_register(&meson_clktree_class);
+#endif
+	class_register(&meson_freq_limit_class);
+#endif
+	return 0;
+}
+
+/* initialize clocking early to be available later in the boot */
+core_initcall(meson_clock_init);
diff --git a/arch/arm/mach-meson8b/cpu.c b/arch/arm/mach-meson8b/cpu.c
new file mode 100644
index 000000000000..8529a9c9a58a
--- /dev/null
+++ b/arch/arm/mach-meson8b/cpu.c
@@ -0,0 +1,60 @@
+/*
+ * arch/arm/mach-meson8b/cpu.c
+ *
+ * Copyright (C) 2013 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <plat/io.h>
+#include <plat/cpu.h>
+#include <mach/io.h>
+#include <mach/am_regs.h>
+#include <linux/printk.h>
+#include <linux/string.h>
+
+static int meson_cpu_version[MESON_CPU_VERSION_LVL_MAX];
+int __init meson_cpu_version_init(void)
+{
+	unsigned int  *version_map;	
+	unsigned int version;	
+
+	meson_cpu_version[MESON_CPU_VERSION_LVL_MAJOR] = 
+		aml_read_reg32(P_ASSIST_HW_REV);
+
+	version_map = (unsigned int *)IO_BOOTROM_BASE;
+	version = version_map[1];
+	printk(KERN_INFO "chip version=%x\n", version);	
+	switch (version) {		
+		/*case 0x000025e2:			
+			meson_cpu_version[MESON_CPU_VERSION_LVL_MINOR] = 0xA;		
+			break;	*/	
+		default:/*changed?*/			
+			meson_cpu_version[MESON_CPU_VERSION_LVL_MINOR] = 0xA;
+			break;
+	}	
+
+	return 0;
+}
+EXPORT_SYMBOL(meson_cpu_version_init);
+int get_meson_cpu_version(int level)
+{
+	if(level >= 0 && level <= MESON_CPU_VERSION_LVL_MAX)
+		return meson_cpu_version[level];
+	return 0;
+}
+EXPORT_SYMBOL(get_meson_cpu_version);
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/gpio.c b/arch/arm/mach-meson8b/gpio.c
new file mode 100644
index 000000000000..8128a8c8dc50
--- /dev/null
+++ b/arch/arm/mach-meson8b/gpio.c
@@ -0,0 +1,687 @@
+
+/*
+ * Driver for the AMLOGIC  GPIO
+ *
+ * Copyright (c) AMLOGIC CORPORATION.  All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms and conditions of the GNU General Public License,
+ * version 2, as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ */
+
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/pinctrl/machine.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/pinctrl/pinmux.h>
+#include <linux/pinctrl/pinconf.h>
+#include <linux/pinctrl/consumer.h>
+#include <mach/am_regs.h>
+#include <plat/io.h>
+#include <linux/of.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/gpio.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/amlogic/gpio-amlogic.h>
+unsigned p_gpio_oen_addr[]={
+	P_PREG_PAD_GPIO0_EN_N,
+	P_PREG_PAD_GPIO1_EN_N,
+	P_PREG_PAD_GPIO2_EN_N,
+	P_PREG_PAD_GPIO3_EN_N,
+	P_AO_GPIO_O_EN_N,
+};
+static unsigned p_gpio_output_addr[]={
+	P_PREG_PAD_GPIO0_O,
+	P_PREG_PAD_GPIO1_O,
+	P_PREG_PAD_GPIO2_O,
+	P_PREG_PAD_GPIO3_O,
+	P_AO_GPIO_O_EN_N,
+};
+static unsigned p_gpio_input_addr[]={
+	P_PREG_PAD_GPIO0_I,
+	P_PREG_PAD_GPIO1_I,
+	P_PREG_PAD_GPIO2_I,
+	P_PREG_PAD_GPIO3_I,
+	P_AO_GPIO_I,
+};
+extern int m8_pin_to_pullup(unsigned int pin ,unsigned int *reg,unsigned int *bit,unsigned int *bit_en);
+
+extern struct amlogic_set_pullup pullup_ops;
+extern unsigned p_pull_up_addr[];
+extern unsigned p_pull_upen_addr[];
+extern unsigned int p_pin_mux_reg_addr[];
+extern int gpio_irq;
+extern int gpio_flag;
+#define NONE 0xffffffff
+//#define debug
+#ifdef debug
+	#define gpio_print(...) printk(__VA_ARGS__)
+#else 
+	#define gpio_print(...)
+#endif
+//gpio subsystem set pictrl subsystem gpio owner
+enum gpio_reg_type
+{
+	INPUT_REG,
+	OUTPUT_REG,
+	OUTPUTEN_REG
+};
+
+#define PIN_MAP(pin,reg,bit) \
+{ \
+	.num=pin, \
+	.name=#pin, \
+	.out_en_reg_bit=GPIO_REG_BIT(reg,bit), \
+	.out_value_reg_bit=GPIO_REG_BIT(reg,bit), \
+	.input_value_reg_bit=GPIO_REG_BIT(reg,bit), \
+}
+#define PIN_AOMAP(pin,en_reg,en_bit,out_reg,out_bit,in_reg,in_bit) \
+{ \
+	.num=pin, \
+	.name=#pin, \
+	.out_en_reg_bit=GPIO_REG_BIT(en_reg,en_bit), \
+	.out_value_reg_bit=GPIO_REG_BIT(out_reg,out_bit), \
+	.input_value_reg_bit=GPIO_REG_BIT(in_reg,in_bit), \
+	.gpio_owner=NULL, \
+}
+
+#define P_PIN_MUX_REG(reg,bit) ((reg<<5)|bit)
+static unsigned int gpio_to_pin[][5]={
+	[GPIOAO_0]={P_PIN_MUX_REG(10,26),P_PIN_MUX_REG(10,12),NONE,NONE,NONE,},
+	[GPIOAO_1]={P_PIN_MUX_REG(10,25),P_PIN_MUX_REG(10,11),NONE,NONE,NONE,},
+	[GPIOAO_2]={P_PIN_MUX_REG(10,10),NONE,NONE,NONE,NONE,},
+	[GPIOAO_3]={P_PIN_MUX_REG(10,9),NONE,NONE,NONE,NONE,},
+	[GPIOAO_4]={P_PIN_MUX_REG(10,2),P_PIN_MUX_REG(10,24),P_PIN_MUX_REG(10,6),NONE,NONE,},
+	[GPIOAO_5]={P_PIN_MUX_REG(10,23),P_PIN_MUX_REG(10,5),P_PIN_MUX_REG(10,1),NONE,NONE,},
+	[GPIOAO_6]={P_PIN_MUX_REG(10,18),NONE,NONE,NONE,NONE,},
+	[GPIOAO_7]={P_PIN_MUX_REG(10,0),NONE,NONE,NONE,NONE,},
+	[GPIOAO_8]={P_PIN_MUX_REG(10,30),NONE,NONE,NONE,NONE,},
+	[GPIOAO_9]={P_PIN_MUX_REG(10,29),NONE,NONE,NONE,NONE,},
+	[GPIOAO_10]={P_PIN_MUX_REG(10,28),NONE,NONE,NONE,NONE,},
+	[GPIOAO_11]={P_PIN_MUX_REG(10,27),NONE,NONE,NONE,NONE,},
+	[GPIOAO_12]={P_PIN_MUX_REG(10,17),NONE,NONE,NONE,NONE,},
+	[GPIOAO_13]={P_PIN_MUX_REG(10,31),NONE,NONE,NONE,NONE,},
+	[GPIOZ_0]={P_PIN_MUX_REG(5,31),P_PIN_MUX_REG(9,18),P_PIN_MUX_REG(7,25),P_PIN_MUX_REG(9,16),NONE,},
+	[GPIOZ_1]={P_PIN_MUX_REG(9,15),P_PIN_MUX_REG(5,30),P_PIN_MUX_REG(7,24),NONE,NONE,},
+	[GPIOZ_2]={P_PIN_MUX_REG(5,27),NONE,NONE,NONE,NONE,},
+	[GPIOZ_3]={P_PIN_MUX_REG(5,26),NONE,NONE,NONE,NONE,},
+	[GPIOZ_4]={P_PIN_MUX_REG(5,25),P_PIN_MUX_REG(6,15),NONE,NONE,NONE,},
+	[GPIOZ_5]={P_PIN_MUX_REG(5,24),P_PIN_MUX_REG(6,14),NONE,NONE,NONE,},
+	[GPIOZ_6]={P_PIN_MUX_REG(6,13),P_PIN_MUX_REG(3,21),P_PIN_MUX_REG(3,21),NONE,NONE,},
+	[GPIOZ_7]={P_PIN_MUX_REG(6,12),P_PIN_MUX_REG(2,0),P_PIN_MUX_REG(7,23),NONE,NONE,},
+	[GPIOZ_8]={P_PIN_MUX_REG(2,1),P_PIN_MUX_REG(6,9),P_PIN_MUX_REG(6,10),P_PIN_MUX_REG(7,22),NONE,},
+	[GPIOZ_9]={P_PIN_MUX_REG(5,9),P_PIN_MUX_REG(6,11),P_PIN_MUX_REG(8,16),NONE,NONE,},
+	[GPIOZ_10]={P_PIN_MUX_REG(6,8),P_PIN_MUX_REG(5,8),P_PIN_MUX_REG(8,12),NONE,NONE,},
+	[GPIOZ_11]={P_PIN_MUX_REG(6,7),P_PIN_MUX_REG(8,15),P_PIN_MUX_REG(5,7),NONE,NONE,},
+	[GPIOZ_12]={P_PIN_MUX_REG(6,6),P_PIN_MUX_REG(5,6),P_PIN_MUX_REG(8,14),NONE,NONE,},
+	[GPIOZ_13]={P_PIN_MUX_REG(6,5),P_PIN_MUX_REG(8,13),NONE,NONE,NONE,},
+	[GPIOZ_14]={P_PIN_MUX_REG(9,17),P_PIN_MUX_REG(8,17),NONE,NONE,NONE,},
+	[GPIOH_0]={P_PIN_MUX_REG(1,26),NONE,NONE,NONE,NONE,},
+	[GPIOH_1]={P_PIN_MUX_REG(1,25),NONE,NONE,NONE,NONE,},
+	[GPIOH_2]={P_PIN_MUX_REG(1,24),NONE,NONE,NONE,NONE,},
+	[GPIOH_3]={P_PIN_MUX_REG(9,13),P_PIN_MUX_REG(1,23),NONE,NONE,NONE,},
+	[GPIOH_4]={P_PIN_MUX_REG(9,12),NONE,NONE,NONE,NONE,},
+	[GPIOH_5]={P_PIN_MUX_REG(9,11),NONE,NONE,NONE,NONE,},
+	[GPIOH_6]={P_PIN_MUX_REG(9,10),NONE,NONE,NONE,NONE,},
+	[GPIOH_7]={P_PIN_MUX_REG(4,3),NONE,NONE,NONE,NONE,},
+	[GPIOH_8]={P_PIN_MUX_REG(4,2),NONE,NONE,NONE,NONE,},
+	[GPIOH_9]={P_PIN_MUX_REG(4,1),P_PIN_MUX_REG(4,1),NONE,NONE,NONE,},
+	[BOOT_0]={P_PIN_MUX_REG(4,30),P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(6,29),NONE,NONE,},
+	[BOOT_1]={P_PIN_MUX_REG(4,29),P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(6,28),NONE,NONE,},
+	[BOOT_2]={P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(6,27),P_PIN_MUX_REG(4,29),NONE,NONE,},
+	[BOOT_3]={P_PIN_MUX_REG(4,29),P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(6,26),NONE,NONE,},
+	[BOOT_4]={P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(4,28),NONE,NONE,NONE,},
+	[BOOT_5]={P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(4,28),NONE,NONE,NONE,},
+	[BOOT_6]={P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(4,28),NONE,NONE,NONE,},
+	[BOOT_7]={P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(4,28),NONE,NONE,NONE,},
+	[BOOT_8]={P_PIN_MUX_REG(2,25),NONE,NONE,NONE,NONE,},
+	[BOOT_9]={P_PIN_MUX_REG(2,24),NONE,NONE,NONE,NONE,},
+	[BOOT_10]={P_PIN_MUX_REG(2,17),NONE,NONE,NONE,NONE,},
+	[BOOT_11]={P_PIN_MUX_REG(2,21),P_PIN_MUX_REG(5,1),NONE,NONE,NONE,},
+	[BOOT_12]={P_PIN_MUX_REG(2,20),P_PIN_MUX_REG(5,3),NONE,NONE,NONE,},
+	[BOOT_13]={P_PIN_MUX_REG(2,19),P_PIN_MUX_REG(5,2),NONE,NONE,NONE,},
+	[BOOT_14]={P_PIN_MUX_REG(2,18),NONE,NONE,NONE,NONE,},
+	[BOOT_15]={P_PIN_MUX_REG(2,27),NONE,NONE,NONE,NONE,},
+	[BOOT_16]={P_PIN_MUX_REG(6,25),P_PIN_MUX_REG(2,23),P_PIN_MUX_REG(4,27),NONE,NONE,},
+	[BOOT_17]={P_PIN_MUX_REG(2,22),P_PIN_MUX_REG(4,26),P_PIN_MUX_REG(6,24),NONE,NONE,},
+	[BOOT_18]={P_PIN_MUX_REG(5,0),NONE,NONE,NONE,NONE,},	
+	[CARD_0]={P_PIN_MUX_REG(2,14),P_PIN_MUX_REG(2,6),NONE,NONE,NONE,},
+	[CARD_1]={P_PIN_MUX_REG(2,7),P_PIN_MUX_REG(2,15),NONE,NONE,NONE,},
+	[CARD_2]={P_PIN_MUX_REG(2,11),P_PIN_MUX_REG(2,5),NONE,NONE,NONE,},
+	[CARD_3]={P_PIN_MUX_REG(2,4),P_PIN_MUX_REG(2,10),NONE,NONE,NONE,},
+	[CARD_4]={P_PIN_MUX_REG(2,6),P_PIN_MUX_REG(2,12),P_PIN_MUX_REG(8,10),NONE,NONE,},
+	[CARD_5]={P_PIN_MUX_REG(2,13),P_PIN_MUX_REG(8,9),P_PIN_MUX_REG(2,6),NONE,NONE,},
+	[CARD_6]={NONE,NONE,NONE,NONE,NONE,},
+	[GPIODV_0]={P_PIN_MUX_REG(8,27),P_PIN_MUX_REG(7,0),P_PIN_MUX_REG(0,1),P_PIN_MUX_REG(0,6),NONE,},
+	[GPIODV_1]={P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,1),P_PIN_MUX_REG(0,1),NONE,NONE,},
+	[GPIODV_2]={P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,2),P_PIN_MUX_REG(0,0),NONE,NONE,},
+	[GPIODV_3]={P_PIN_MUX_REG(0,0),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,3),NONE,NONE,},
+	[GPIODV_4]={P_PIN_MUX_REG(0,0),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,4),NONE,NONE,},
+	[GPIODV_5]={P_PIN_MUX_REG(7,5),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(0,0),NONE,NONE,},
+	[GPIODV_6]={P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,6),P_PIN_MUX_REG(0,0),NONE,NONE,},
+	[GPIODV_7]={P_PIN_MUX_REG(0,0),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,7),NONE,NONE,},
+	[GPIODV_8]={P_PIN_MUX_REG(8,26),P_PIN_MUX_REG(0,3),P_PIN_MUX_REG(7,8),P_PIN_MUX_REG(0,6),NONE,},
+	[GPIODV_9]={P_PIN_MUX_REG(7,28),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,9),P_PIN_MUX_REG(0,3),P_PIN_MUX_REG(3,24),},
+	[GPIODV_10]={P_PIN_MUX_REG(7,10),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(0,2),NONE,NONE,},
+	[GPIODV_11]={P_PIN_MUX_REG(7,11),P_PIN_MUX_REG(0,2),P_PIN_MUX_REG(0,6),NONE,NONE,},
+	[GPIODV_12]={P_PIN_MUX_REG(0,2),P_PIN_MUX_REG(7,12),P_PIN_MUX_REG(0,6),NONE,NONE,},
+	[GPIODV_13]={P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,13),P_PIN_MUX_REG(0,2),NONE,NONE,},
+	[GPIODV_14]={P_PIN_MUX_REG(7,14),P_PIN_MUX_REG(0,2),P_PIN_MUX_REG(0,6),NONE,NONE,},
+	[GPIODV_15]={P_PIN_MUX_REG(7,15),P_PIN_MUX_REG(0,2),P_PIN_MUX_REG(0,6),NONE,NONE,},
+	[GPIODV_16]={P_PIN_MUX_REG(0,5),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(8,25),P_PIN_MUX_REG(7,16),NONE,},
+	[GPIODV_17]={P_PIN_MUX_REG(7,17),P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(0,5),NONE,NONE,},
+	[GPIODV_18]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
+	[GPIODV_19]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
+	[GPIODV_20]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
+	[GPIODV_21]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
+	[GPIODV_22]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
+	[GPIODV_23]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
+	[GPIODV_24]={P_PIN_MUX_REG(0,9),P_PIN_MUX_REG(0,19),P_PIN_MUX_REG(0,21),P_PIN_MUX_REG(6,23),P_PIN_MUX_REG(8,24),},
+	[GPIODV_25]={P_PIN_MUX_REG(6,22),P_PIN_MUX_REG(0,20),P_PIN_MUX_REG(0,8),P_PIN_MUX_REG(8,23),P_PIN_MUX_REG(0,18),},
+	[GPIODV_26]={P_PIN_MUX_REG(6,21),P_PIN_MUX_REG(8,21),P_PIN_MUX_REG(0,7),P_PIN_MUX_REG(8,22),P_PIN_MUX_REG(8,20),},
+	[GPIODV_27]={P_PIN_MUX_REG(0,10),P_PIN_MUX_REG(6,20),P_PIN_MUX_REG(8,28),P_PIN_MUX_REG(8,19),NONE,},
+	[GPIODV_28]={P_PIN_MUX_REG(7,27),P_PIN_MUX_REG(3,26),NONE,NONE,NONE,},
+	[GPIODV_29]={P_PIN_MUX_REG(7,26),P_PIN_MUX_REG(3,25),NONE,NONE,NONE,},
+	[GPIOY_0]={P_PIN_MUX_REG(1,19),P_PIN_MUX_REG(1,10),P_PIN_MUX_REG(3,2),P_PIN_MUX_REG(9,9),P_PIN_MUX_REG(1,15),},
+	[GPIOY_1]={P_PIN_MUX_REG(9,8),P_PIN_MUX_REG(3,1),P_PIN_MUX_REG(1,18),P_PIN_MUX_REG(1,14),P_PIN_MUX_REG(1,19),},
+	[GPIOY_2]={P_PIN_MUX_REG(3,18),P_PIN_MUX_REG(1,8),P_PIN_MUX_REG(1,17),NONE,NONE,},
+	[GPIOY_3]={P_PIN_MUX_REG(1,16),P_PIN_MUX_REG(1,7),NONE,NONE,NONE,},
+	[GPIOY_4]={P_PIN_MUX_REG(4,25),P_PIN_MUX_REG(3,3),P_PIN_MUX_REG(1,6),NONE,NONE,},
+	[GPIOY_5]={P_PIN_MUX_REG(4,24),P_PIN_MUX_REG(3,15),P_PIN_MUX_REG(1,5),P_PIN_MUX_REG(9,7),NONE,},
+	[GPIOY_6]={P_PIN_MUX_REG(4,23),P_PIN_MUX_REG(3,16),P_PIN_MUX_REG(1,3),P_PIN_MUX_REG(1,4),P_PIN_MUX_REG(9,6),},
+	[GPIOY_7]={P_PIN_MUX_REG(4,22),P_PIN_MUX_REG(1,2),P_PIN_MUX_REG(9,5),P_PIN_MUX_REG(1,1),P_PIN_MUX_REG(3,17),},
+	[GPIOY_8]={P_PIN_MUX_REG(3,0),P_PIN_MUX_REG(1,0),P_PIN_MUX_REG(9,4),NONE,NONE,},
+	[GPIOY_9]={P_PIN_MUX_REG(1,11),P_PIN_MUX_REG(9,3),P_PIN_MUX_REG(3,4),NONE,NONE,},
+	[GPIOY_10]={P_PIN_MUX_REG(3,5),P_PIN_MUX_REG(9,3),NONE,NONE,NONE,},
+	[GPIOY_11]={P_PIN_MUX_REG(9,3),P_PIN_MUX_REG(3,5),NONE,NONE,NONE,},
+	[GPIOY_12]={P_PIN_MUX_REG(9,3),P_PIN_MUX_REG(3,5),NONE,NONE,NONE,},
+	[GPIOY_13]={P_PIN_MUX_REG(3,5),P_PIN_MUX_REG(9,3),NONE,NONE,NONE,},
+	[GPIOY_14]={P_PIN_MUX_REG(9,2),P_PIN_MUX_REG(3,5),NONE,NONE,NONE,},
+	[GPIOY_15]={P_PIN_MUX_REG(9,1),P_PIN_MUX_REG(3,5),NONE,NONE,NONE,},
+	[GPIOY_16]={P_PIN_MUX_REG(9,0),P_PIN_MUX_REG(3,5),P_PIN_MUX_REG(9,14),P_PIN_MUX_REG(7,29),NONE,},
+	[GPIOX_0]={P_PIN_MUX_REG(8,5),P_PIN_MUX_REG(5,14),NONE,NONE,NONE,},
+	[GPIOX_1]={P_PIN_MUX_REG(5,13),P_PIN_MUX_REG(8,4),NONE,NONE,NONE,},
+	[GPIOX_2]={P_PIN_MUX_REG(8,3),P_PIN_MUX_REG(5,13),NONE,NONE,NONE,},
+	[GPIOX_3]={P_PIN_MUX_REG(8,2),P_PIN_MUX_REG(5,13),NONE,NONE,NONE,},
+	[GPIOX_4]={P_PIN_MUX_REG(5,12),P_PIN_MUX_REG(3,30),P_PIN_MUX_REG(4,17),NONE,NONE,},
+	[GPIOX_5]={P_PIN_MUX_REG(3,29),P_PIN_MUX_REG(5,12),P_PIN_MUX_REG(4,16),NONE,NONE,},
+	[GPIOX_6]={P_PIN_MUX_REG(5,12),P_PIN_MUX_REG(4,15),P_PIN_MUX_REG(3,28),NONE,NONE,},
+	[GPIOX_7]={P_PIN_MUX_REG(5,12),P_PIN_MUX_REG(4,14),P_PIN_MUX_REG(3,27),NONE,NONE,},
+	[GPIOX_8]={P_PIN_MUX_REG(8,1),P_PIN_MUX_REG(5,11),NONE,NONE,NONE,},
+	[GPIOX_9]={P_PIN_MUX_REG(5,10),P_PIN_MUX_REG(8,0),NONE,NONE,NONE,},
+	[GPIOX_10]={P_PIN_MUX_REG(7,31),P_PIN_MUX_REG(3,22),P_PIN_MUX_REG(9,19),NONE,NONE,},
+	[GPIOX_11]={P_PIN_MUX_REG(3,14),P_PIN_MUX_REG(7,30),P_PIN_MUX_REG(2,3),P_PIN_MUX_REG(3,23),P_PIN_MUX_REG(3,23),},
+	[GPIOX_12]={P_PIN_MUX_REG(3,13),P_PIN_MUX_REG(4,13),NONE,NONE,NONE,},
+	[GPIOX_13]={P_PIN_MUX_REG(4,12),P_PIN_MUX_REG(3,12),NONE,NONE,NONE,},
+	[GPIOX_14]={P_PIN_MUX_REG(3,12),P_PIN_MUX_REG(4,11),NONE,NONE,NONE,},
+	[GPIOX_15]={P_PIN_MUX_REG(3,12),P_PIN_MUX_REG(4,10),NONE,NONE,NONE,},
+	[GPIOX_16]={P_PIN_MUX_REG(4,9),P_PIN_MUX_REG(4,21),P_PIN_MUX_REG(3,12),P_PIN_MUX_REG(4,5),NONE,},
+	[GPIOX_17]={P_PIN_MUX_REG(3,12),P_PIN_MUX_REG(4,8),P_PIN_MUX_REG(4,4),P_PIN_MUX_REG(4,20),NONE,},
+	[GPIOX_18]={P_PIN_MUX_REG(4,7),P_PIN_MUX_REG(4,19),P_PIN_MUX_REG(3,12),NONE,NONE,},
+	[GPIOX_19]={P_PIN_MUX_REG(4,18),P_PIN_MUX_REG(4,6),P_PIN_MUX_REG(3,12),NONE,NONE,},
+	[GPIOX_20]={NONE,NONE,NONE,NONE,NONE,},
+	[GPIOX_21]={NONE,NONE,NONE,NONE,NONE,},
+	[GPIO_BSD_EN]={NONE,NONE,NONE,NONE,NONE,},
+	[GPIO_TEST_N]={P_PIN_MUX_REG(9,19),NONE,NONE,NONE,NONE,},
+};
+struct amlogic_gpio_desc amlogic_pins[]=
+{
+	PIN_AOMAP(GPIOAO_0,4,0,4,16,4,0),
+	PIN_AOMAP(GPIOAO_1,4,1,4,17,4,1),
+	PIN_AOMAP(GPIOAO_2,4,2,4,18,4,2),
+	PIN_AOMAP(GPIOAO_3,4,3,4,19,4,3),
+	PIN_AOMAP(GPIOAO_4,4,4,4,20,4,4),
+	PIN_AOMAP(GPIOAO_5,4,5,4,21,4,5),
+	PIN_AOMAP(GPIOAO_6,4,6,4,22,4,6),
+	PIN_AOMAP(GPIOAO_7,4,7,4,23,4,7),
+	PIN_AOMAP(GPIOAO_8,4,8,4,24,4,8),
+	PIN_AOMAP(GPIOAO_9,4,9,4,25,4,9),
+	PIN_AOMAP(GPIOAO_10,4,10,4,26,4,10),
+	PIN_AOMAP(GPIOAO_11,4,11,4,27,4,11),
+	PIN_AOMAP(GPIOAO_12,4,12,4,28,4,12),
+	PIN_AOMAP(GPIOAO_13,4,13,4,29,4,13),
+	PIN_MAP(GPIOZ_0,1,17),
+	PIN_MAP(GPIOZ_1,1,18),
+	PIN_MAP(GPIOZ_2,1,19),
+	PIN_MAP(GPIOZ_3,1,20),
+	PIN_MAP(GPIOZ_4,1,21),
+	PIN_MAP(GPIOZ_5,1,22),
+	PIN_MAP(GPIOZ_6,1,23),
+	PIN_MAP(GPIOZ_7,1,24),
+	PIN_MAP(GPIOZ_8,1,25),
+	PIN_MAP(GPIOZ_9,1,26),
+	PIN_MAP(GPIOZ_10,1,27),
+	PIN_MAP(GPIOZ_11,1,28),
+	PIN_MAP(GPIOZ_12,1,29),
+	PIN_MAP(GPIOZ_13,1,30),
+	PIN_MAP(GPIOZ_14,1,31),
+	PIN_MAP(GPIOH_0,3,19),
+	PIN_MAP(GPIOH_1,3,20),
+	PIN_MAP(GPIOH_2,3,21),
+	PIN_MAP(GPIOH_3,3,22),
+	PIN_MAP(GPIOH_4,3,23),
+	PIN_MAP(GPIOH_5,3,24),
+	PIN_MAP(GPIOH_6,3,25),
+	PIN_MAP(GPIOH_7,3,26),
+	PIN_MAP(GPIOH_8,3,27),
+	PIN_MAP(GPIOH_9,3,28),
+	PIN_MAP(BOOT_0,3,0),
+	PIN_MAP(BOOT_1,3,1),
+	PIN_MAP(BOOT_2,3,2),
+	PIN_MAP(BOOT_3,3,3),
+	PIN_MAP(BOOT_4,3,4),
+	PIN_MAP(BOOT_5,3,5),
+	PIN_MAP(BOOT_6,3,6),
+	PIN_MAP(BOOT_7,3,7),
+	PIN_MAP(BOOT_8,3,8),
+	PIN_MAP(BOOT_9,3,9),
+	PIN_MAP(BOOT_10,3,10),
+	PIN_MAP(BOOT_11,3,11),
+	PIN_MAP(BOOT_12,3,12),
+	PIN_MAP(BOOT_13,3,13),
+	PIN_MAP(BOOT_14,3,14),
+	PIN_MAP(BOOT_15,3,15),
+	PIN_MAP(BOOT_16,3,16),
+	PIN_MAP(BOOT_17,3,17),
+	PIN_MAP(BOOT_18,3,18),
+	PIN_MAP(CARD_0,0,22),
+	PIN_MAP(CARD_1,0,23),
+	PIN_MAP(CARD_2,0,24),
+	PIN_MAP(CARD_3,0,25),
+	PIN_MAP(CARD_4,0,26),
+	PIN_MAP(CARD_5,0,27),
+	PIN_MAP(CARD_6,0,28),
+	PIN_MAP(GPIODV_0,2,0),
+	PIN_MAP(GPIODV_1,2,1),
+	PIN_MAP(GPIODV_2,2,2),
+	PIN_MAP(GPIODV_3,2,3),
+	PIN_MAP(GPIODV_4,2,4),
+	PIN_MAP(GPIODV_5,2,5),
+	PIN_MAP(GPIODV_6,2,6),
+	PIN_MAP(GPIODV_7,2,7),
+	PIN_MAP(GPIODV_8,2,8),
+	PIN_MAP(GPIODV_9,2,9),
+	PIN_MAP(GPIODV_10,2,10),
+	PIN_MAP(GPIODV_11,2,11),
+	PIN_MAP(GPIODV_12,2,12),
+	PIN_MAP(GPIODV_13,2,13),
+	PIN_MAP(GPIODV_14,2,14),
+	PIN_MAP(GPIODV_15,2,15),
+	PIN_MAP(GPIODV_16,2,16),
+	PIN_MAP(GPIODV_17,2,17),
+	PIN_MAP(GPIODV_18,2,18),
+	PIN_MAP(GPIODV_19,2,19),
+	PIN_MAP(GPIODV_20,2,20),
+	PIN_MAP(GPIODV_21,2,21),
+	PIN_MAP(GPIODV_22,2,22),
+	PIN_MAP(GPIODV_23,2,23),
+	PIN_MAP(GPIODV_24,2,24),
+	PIN_MAP(GPIODV_25,2,25),
+	PIN_MAP(GPIODV_26,2,26),
+	PIN_MAP(GPIODV_27,2,27),
+	PIN_MAP(GPIODV_28,2,28),
+	PIN_MAP(GPIODV_29,2,29),
+	PIN_MAP(GPIOY_0,1,0),
+	PIN_MAP(GPIOY_1,1,1),
+	PIN_MAP(GPIOY_2,1,2),
+	PIN_MAP(GPIOY_3,1,3),
+	PIN_MAP(GPIOY_4,1,4),
+	PIN_MAP(GPIOY_5,1,5),
+	PIN_MAP(GPIOY_6,1,6),
+	PIN_MAP(GPIOY_7,1,7),
+	PIN_MAP(GPIOY_8,1,8),
+	PIN_MAP(GPIOY_9,1,9),
+	PIN_MAP(GPIOY_10,1,10),
+	PIN_MAP(GPIOY_11,1,11),
+	PIN_MAP(GPIOY_12,1,12),
+	PIN_MAP(GPIOY_13,1,13),
+	PIN_MAP(GPIOY_14,1,14),
+	PIN_MAP(GPIOY_15,1,15),
+	PIN_MAP(GPIOY_16,1,16),
+	PIN_MAP(GPIOX_0,0,0),
+	PIN_MAP(GPIOX_1,0,1),
+	PIN_MAP(GPIOX_2,0,2),
+	PIN_MAP(GPIOX_3,0,3),
+	PIN_MAP(GPIOX_4,0,4),
+	PIN_MAP(GPIOX_5,0,5),
+	PIN_MAP(GPIOX_6,0,6),
+	PIN_MAP(GPIOX_7,0,7),
+	PIN_MAP(GPIOX_8,0,8),
+	PIN_MAP(GPIOX_9,0,9),
+	PIN_MAP(GPIOX_10,0,10),
+	PIN_MAP(GPIOX_11,0,11),
+	PIN_MAP(GPIOX_12,0,12),
+	PIN_MAP(GPIOX_13,0,13),
+	PIN_MAP(GPIOX_14,0,14),
+	PIN_MAP(GPIOX_15,0,15),
+	PIN_MAP(GPIOX_16,0,16),
+	PIN_MAP(GPIOX_17,0,17),
+	PIN_MAP(GPIOX_18,0,18),
+	PIN_MAP(GPIOX_19,0,19),
+	PIN_MAP(GPIOX_20,0,20),
+	PIN_MAP(GPIOX_21,0,21),
+	PIN_AOMAP(GPIO_BSD_EN,0,30,0,31,0,0x1f),
+	PIN_AOMAP(GPIO_TEST_N,0,0,4,31,0,0),
+};
+int gpio_amlogic_requst(struct gpio_chip *chip,unsigned offset)
+{
+	int ret;
+	unsigned int i,reg,bit;
+	unsigned int *gpio_reg=&gpio_to_pin[offset][0];
+	ret=pinctrl_request_gpio(offset);
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	if(!ret){
+		for(i=0;i<sizeof(gpio_to_pin[offset])/sizeof(gpio_to_pin[offset][0]);i++){
+			if(gpio_reg[i]!=NONE)
+			{
+				reg=GPIO_REG(gpio_reg[i]);
+				bit=GPIO_BIT(gpio_reg[i]);
+				aml_clr_reg32_mask(p_pin_mux_reg_addr[reg],1<<bit);
+				gpio_print("clr reg=%d,bit =%d\n",reg,bit);
+			}
+		}
+	}
+	return ret;
+}
+/* amlogic request gpio interface*/
+
+void	 gpio_amlogic_free(struct gpio_chip *chip,unsigned offset)
+{	
+	 pinctrl_free_gpio(offset);
+	return;
+}
+int gpio_amlogic_to_irq(struct gpio_chip *chip,unsigned offset)
+{
+	unsigned reg,start_bit;
+	unsigned irq_bank=gpio_flag&0x7;
+	unsigned filter=(gpio_flag>>8)&0x7;
+	unsigned irq_type=(gpio_flag>>16)&0x3;
+	unsigned type[]={0x0, 	/*GPIO_IRQ_HIGH*/
+				0x10000, /*GPIO_IRQ_LOW*/
+				0x1,  	/*GPIO_IRQ_RISING*/
+				0x10001, /*GPIO_IRQ_FALLING*/
+				};
+	 /*set trigger type*/
+	if(offset>GPIO_MAX)
+		return -1;
+	aml_clrset_reg32_bits(P_GPIO_INTR_EDGE_POL,0x10001<<irq_bank,type[irq_type]<<irq_bank);
+	printk(" reg:%x,clearmask=%x,setmask=%x\n",(P_GPIO_INTR_EDGE_POL&0xffff)>>2,0x10001<<irq_bank,(aml_read_reg32(P_GPIO_INTR_EDGE_POL)>>irq_bank)&0x10001);
+	/*select pin*/
+	reg=irq_bank<4?P_GPIO_INTR_GPIO_SEL0:P_GPIO_INTR_GPIO_SEL1;
+	start_bit=(irq_bank&3)*8;
+	aml_clrset_reg32_bits(reg,0xff<<start_bit,amlogic_pins[offset].num<<start_bit);
+	printk("reg:%x,clearmask=%x,set pin=%d\n",(reg&0xffff)>>2,0xff<<start_bit,(aml_read_reg32(reg)>>start_bit)&0xff);
+	/*set filter*/
+	start_bit=(irq_bank)*4;
+	aml_clrset_reg32_bits(P_GPIO_INTR_FILTER_SEL0,0x7<<start_bit,filter<<start_bit);
+	printk("reg:%x,clearmask=%x,setmask=%x\n",(P_GPIO_INTR_FILTER_SEL0&0xffff)>>2,0x7<<start_bit,(aml_read_reg32(P_GPIO_INTR_FILTER_SEL0)>>start_bit)&0x7);
+	return 0;
+}
+
+int gpio_amlogic_direction_input(struct gpio_chip *chip,unsigned offset)
+{
+	unsigned int reg,bit;
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	reg=GPIO_REG(amlogic_pins[offset].out_en_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].out_en_reg_bit);
+	aml_set_reg32_mask(p_gpio_oen_addr[reg],1<<bit);
+	return 0;
+}
+
+int gpio_amlogic_get(struct gpio_chip *chip,unsigned offset)
+{
+	unsigned int reg,bit;
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	reg=GPIO_REG(amlogic_pins[offset].input_value_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].input_value_reg_bit);
+	return aml_get_reg32_bits(p_gpio_input_addr[reg],bit,1);
+}
+
+int gpio_amlogic_direction_output(struct gpio_chip *chip,unsigned offset, int value)
+{
+	unsigned int reg,bit;
+	if(offset==GPIO_BSD_EN){
+		aml_clr_reg32_mask(P_PREG_PAD_GPIO0_O,1<<29);
+		aml_set_reg32_mask(P_AO_SECURE_REG0,1<<0);
+		if(value)
+			aml_set_reg32_mask(P_PREG_PAD_GPIO0_O,1<<31);//out put high
+		else
+			aml_clr_reg32_mask(P_PREG_PAD_GPIO0_O,1<<31);//out put low
+		aml_clr_reg32_mask(P_PREG_PAD_GPIO0_O,1<<30);//out put enable
+		return 0;
+	}
+	if(offset==GPIO_TEST_N){
+		if(value)
+			aml_set_reg32_mask(P_AO_GPIO_O_EN_N,1<<31);//out put high
+		else
+			aml_clr_reg32_mask(P_AO_GPIO_O_EN_N,1<<31);//out put low
+		aml_set_reg32_mask(P_AO_SECURE_REG0,1);// out put enable
+		return 0;
+	}
+	if(value){
+		reg=GPIO_REG(amlogic_pins[offset].out_value_reg_bit);
+		bit=GPIO_BIT(amlogic_pins[offset].out_value_reg_bit);
+		aml_set_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+		gpio_print("out reg=%x,value=%x\n",p_gpio_output_addr[reg],aml_read_reg32(p_gpio_output_addr[reg]));
+	}
+	else{
+		reg=GPIO_REG(amlogic_pins[offset].out_value_reg_bit);
+		bit=GPIO_BIT(amlogic_pins[offset].out_value_reg_bit);
+		aml_clr_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+		gpio_print("out reg=%x,value=%x\n",p_gpio_output_addr[reg],aml_read_reg32(p_gpio_output_addr[reg]));
+	}
+	reg=GPIO_REG(amlogic_pins[offset].out_en_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].out_en_reg_bit);
+	aml_clr_reg32_mask(p_gpio_oen_addr[reg],1<<bit);
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	gpio_print("oen reg=%x,value=%x\n",p_gpio_oen_addr[reg],aml_read_reg32(p_gpio_oen_addr[reg]));
+	gpio_print("value=%d\n",value);
+	return 0;
+}
+void	gpio_amlogic_set(struct gpio_chip *chip,unsigned offset, int value)
+{
+	unsigned int reg,bit;
+	reg=GPIO_REG(amlogic_pins[offset].out_value_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].out_value_reg_bit);
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	if(value)
+		aml_set_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+	else
+		aml_clr_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+}
+int gpio_amlogic_name_to_num(const char *name)
+{
+	int i,tmp=100,num=0;
+	int len=0;
+	char *p=NULL;
+	char *start=NULL;
+	if(!name)
+		return -1;
+	if(!strcmp(name,"GPIO_BSD_EN"))
+		return GPIO_BSD_EN;
+	if(!strcmp(name,"GPIO_TEST_N"))
+		return GPIO_TEST_N;
+	len=strlen(name);
+	p=kzalloc(len+1,GFP_KERNEL);
+	start=p;
+	if(!p)
+	{
+		printk("%s:malloc error\n",__func__);
+		return -1;
+	}
+	p=strcpy(p,name);
+	for(i=0;i<len;p++,i++){		
+		if(*p=='_'){
+			*p='\0';
+			tmp=i;
+		}
+		if(i>tmp&&*p>='0'&&*p<='9')
+			num=num*10+*p-'0';
+	}
+	p=start;
+	if(!strcmp(p,"GPIOAO"))
+		num=num+0;
+	else if(!strcmp(p,"GPIOZ"))
+		num=num+14;
+	else if(!strcmp(p,"GPIOH"))
+		num=num+29;
+	else if(!strcmp(p,"BOOT"))
+		num=num+39;
+	else if(!strcmp(p,"CARD"))
+		num=num+58;
+	else if(!strcmp(p,"GPIODV"))
+		num=num+65;
+	else if(!strcmp(p,"GPIOY"))
+		num=num+95;
+	else if(!strcmp(p,"GPIOX"))
+		num=num+112;
+	else
+		num= -1;	
+	kzfree(start);
+	return num;
+}
+
+static struct gpio_chip amlogic_gpio_chip={
+	.request=gpio_amlogic_requst,
+	.free=gpio_amlogic_free,
+	.direction_input=gpio_amlogic_direction_input,
+	.get=gpio_amlogic_get,
+	.direction_output=gpio_amlogic_direction_output,
+	.set=gpio_amlogic_set,
+	.to_irq=gpio_amlogic_to_irq,
+};
+
+
+static const struct of_device_id amlogic_gpio_match[] = 
+{
+	{
+	.compatible = "amlogic,m8-gpio",
+	},
+	{ },
+};
+struct amlogic_gpio_platform_data
+{
+	unsigned int base;
+	unsigned ngpios;
+	struct device_node	*of_node; /* associated device tree node */
+};
+
+static int m8_set_pullup(unsigned int pin,unsigned int val,unsigned int pullen)
+{
+	unsigned int reg=0,bit=0,bit_en=0,ret;
+	ret=m8_pin_to_pullup(pin,&reg,&bit,&bit_en);
+	if(!ret)
+	{
+		if(pullen){
+			if(!ret)
+			{
+				if(val)
+					aml_set_reg32_mask(p_pull_up_addr[reg],1<<bit);
+				else
+					aml_clr_reg32_mask(p_pull_up_addr[reg],1<<bit);
+			}
+			aml_set_reg32_mask(p_pull_upen_addr[reg],1<<bit_en);
+		}
+		else
+			aml_clr_reg32_mask(p_pull_upen_addr[reg],1<<bit_en);
+	}
+	return ret;
+}
+
+//#define gpio_dump
+//#define pull_dump
+//#define dire_dump
+static int amlogic_gpio_probe(struct platform_device *pdev)
+{
+#ifdef CONFIG_OF_GPIO
+		amlogic_gpio_chip.of_node = pdev->dev.of_node;
+#endif
+
+	amlogic_gpio_chip.base=0;
+	amlogic_gpio_chip.ngpio=ARRAY_SIZE(amlogic_pins);
+	gpiochip_add(&amlogic_gpio_chip);
+	pullup_ops.meson_set_pullup=m8_set_pullup;
+	dev_info(&pdev->dev, "Probed amlogic GPIO driver\n");
+#ifdef gpio_dump
+	int i;
+	for(i=0;i<GPIO_TEST_N;i++)
+		printk("%s,amlogic_pins[%d]=%d,%d,out en reg=%x,bit=%d,out val reg=%x,bit=%d,input reg=%x,bit=%d\n",
+		amlogic_pins[i].name,i,amlogic_pins[i].num,
+		gpio_amlogic_name_to_num(amlogic_pins[i].name),
+		(p_gpio_oen_addr[GPIO_REG(amlogic_pins[i].out_en_reg_bit)]&0xffff)>>2,
+		GPIO_BIT(amlogic_pins[i].out_en_reg_bit),
+		(p_gpio_output_addr[GPIO_REG(amlogic_pins[i].out_value_reg_bit)]&0xffff)>>2,
+		GPIO_BIT(amlogic_pins[i].out_value_reg_bit),
+		(p_gpio_input_addr[GPIO_REG(amlogic_pins[i].input_value_reg_bit)]&0xffff)>>2,
+		GPIO_BIT(amlogic_pins[i].input_value_reg_bit)
+	);
+#endif
+#ifdef irq_dump
+	for(i=GPIO_IRQ0;i<GPIO_IRQ7+1;i++){
+		gpio_flag=AML_GPIO_IRQ(i,FILTER_NUM7,GPIO_IRQ_HIGH);
+		gpio_amlogic_to_irq(NULL,50);
+	}
+	for(i=GPIO_IRQ_HIGH;i<GPIO_IRQ_FALLING+1;i++){
+		gpio_flag=AML_GPIO_IRQ(GPIO_IRQ0,FILTER_NUM7,i);
+		gpio_amlogic_to_irq(NULL,50);
+	}
+	
+#endif
+#ifdef pull_dump
+
+	int reg,bit,enbit,i;
+	for(i=0;i<GPIO_TEST_N;i++){
+		m8_pin_to_pullup(i,&reg,&bit,&enbit);
+		printk("%s \t,pull up en reg:%x \t,enbit:%d \t,==,pull up reg:%x \t,bit:%d \t\n",
+			amlogic_pins[i].name,
+			(p_pull_upen_addr[reg]&0xffff)>>2,
+			enbit,
+			(p_pull_up_addr[reg]&0xffff)>>2,
+			bit);
+	}
+#endif
+#ifdef dire_dump
+extern int m8_pin_map_to_direction(unsigned int pin,unsigned int *reg,unsigned int *bit);
+	int reg,bit,i;
+	for(i=0;i<GPIO_TEST_N;i++){
+		m8_pin_map_to_direction(i,&reg,&bit);
+		printk("%s \t,output en reg:%x \t,enbit:%d \t\n",
+			amlogic_pins[i].name,
+			(p_gpio_oen_addr[reg]&0xffff)>>2,
+			bit);
+	}
+#endif
+	return 0;
+}
+
+
+
+static struct platform_driver amlogic_gpio_driver = {
+	.probe		= amlogic_gpio_probe,
+	.driver		= {
+		.name	= "amlogic_gpio",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(amlogic_gpio_match),
+	},
+};
+
+/*
+ * gpio driver register needs to be done before
+ * machine_init functions access gpio APIs.
+ * Hence amlogic_gpio_drv_reg() is a postcore_initcall.
+ */
+static int __init amlogic_gpio_drv_reg(void)
+{
+	return platform_driver_register(&amlogic_gpio_driver);
+}
+postcore_initcall(amlogic_gpio_drv_reg);
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/Makefile b/arch/arm/mach-meson8b/hdmi_tx_hw/Makefile
new file mode 100644
index 000000000000..64b17e5a7a9d
--- /dev/null
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/Makefile
@@ -0,0 +1 @@
+obj-y		+= hdmi_tx_hw.o hdmi_tx_reg.o hdmi_tx_cec_hw.o
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
new file mode 100644
index 000000000000..d67fb6544028
--- /dev/null
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -0,0 +1,338 @@
+#include <linux/irq.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/cdev.h>
+#include <linux/spinlock.h>
+#include <linux/spinlock_types.h>
+#include <asm/delay.h>
+#include <mach/am_regs.h>
+#include <mach/power_gate.h>
+#include <linux/amlogic/tvin/tvin.h>
+
+#include <mach/gpio.h>
+#include <linux/amlogic/hdmi_tx/hdmi_info_global.h>
+#include <linux/amlogic/hdmi_tx/hdmi_tx_module.h>
+#include <linux/amlogic/hdmi_tx/hdmi_tx_cec.h>
+#include <mach/hdmi_tx_reg.h>
+#include <mach/hdmi_parameter.h> 
+
+static DEFINE_MUTEX(cec_mutex);
+
+void cec_arbit_bit_time_set(unsigned bit_set, unsigned time_set, unsigned flag);
+
+extern int cec_msg_dbg_en;
+void cec_disable_irq(void)
+{
+    // disable all AO_CEC interrupt sources
+    aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x0, 0, 3);
+    hdmi_print(INF, CEC "disable:int mask:0x%x\n", aml_read_reg32(P_AO_CEC_INTR_MASKN));
+}
+void cec_enable_irq(void)
+{
+    aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x6, 0, 3);
+    hdmi_print(INF, CEC "enable:int mask:0x%x\n", aml_read_reg32(P_AO_CEC_INTR_MASKN));
+}
+
+void cec_hw_reset(void)
+{
+    //unsigned long data32;
+    // Assert SW reset AO_CEC
+    //data32  = 0;
+    //data32 |= 0 << 1;   // [2:1]    cntl_clk: 0=Disable clk (Power-off mode); 1=Enable gated clock (Normal mode); 2=Enable free-run clk (Debug mode).
+    //data32 |= 1 << 0;   // [0]      sw_reset: 1=Reset
+    aml_write_reg32(P_AO_CEC_GEN_CNTL, 0x1);
+    // Enable gated clock (Normal mode).
+    aml_set_reg32_bits(P_AO_CEC_GEN_CNTL, 1, 1, 1);
+    // Release SW reset
+    aml_set_reg32_bits(P_AO_CEC_GEN_CNTL, 0, 0, 1);
+
+    // Enable all AO_CEC interrupt sources
+    aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x6, 0, 3);
+
+    aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | cec_global_info.my_node_index);
+
+    //Cec arbitration 3/5/7 bit time set.
+    cec_arbit_bit_time_set(3, 0x118, 0);
+    cec_arbit_bit_time_set(5, 0x000, 0);
+    cec_arbit_bit_time_set(7, 0x2aa, 0);
+
+    hdmi_print(INF, CEC "hw reset :logical addr:0x%x\n", aocec_rd_reg(CEC_LOGICAL_ADDR0));
+
+}
+
+int cec_ll_rx( unsigned char *msg, unsigned char *len)
+{
+    unsigned char i;
+    unsigned char rx_status;
+    unsigned char data;
+    unsigned char msg_log_buf[128];
+    int pos;
+    unsigned char n;
+    unsigned char *msg_start = msg;
+    int rx_msg_length;
+
+    if(RX_DONE != aocec_rd_reg(CEC_RX_MSG_STATUS)){
+        aocec_wr_reg(CEC_RX_MSG_CMD,  RX_ACK_CURRENT);
+        aocec_wr_reg(CEC_RX_MSG_CMD,  RX_NO_OP);
+        return -1;
+    }
+    if(1 != aocec_rd_reg(CEC_RX_NUM_MSG)){
+        aocec_wr_reg(CEC_RX_MSG_CMD,  RX_ACK_CURRENT);
+        aocec_wr_reg(CEC_RX_MSG_CMD,  RX_NO_OP);
+        return -1;
+    }
+    rx_msg_length = aocec_rd_reg(CEC_RX_MSG_LENGTH) + 1;
+
+    aocec_wr_reg(CEC_RX_MSG_CMD,  RX_ACK_CURRENT);
+
+    for (i = 0; i < rx_msg_length && i < MAX_MSG; i++) {
+        data = aocec_rd_reg(CEC_RX_MSG_0_HEADER +i);
+        *msg = data;
+        msg++;
+    }
+    *len = rx_msg_length;
+    rx_status = aocec_rd_reg(CEC_RX_MSG_STATUS);
+
+    aocec_wr_reg(CEC_RX_MSG_CMD, RX_NO_OP);
+    aml_write_reg32(P_AO_CEC_INTR_CLR, aml_read_reg32(P_AO_CEC_INTR_CLR) | (1 << 2));
+
+    if(cec_msg_dbg_en  == 1){
+        pos = 0;
+        pos += sprintf(msg_log_buf + pos, "CEC: rx msg len: %d   dat: ", rx_msg_length);
+        for(n = 0; n < rx_msg_length; n++) {
+            pos += sprintf(msg_log_buf + pos, "%02x ", msg_start[n]);
+        }
+        pos += sprintf(msg_log_buf + pos, "\n");
+        msg_log_buf[pos] = '\0';
+        hdmi_print(INF, CEC "%s", msg_log_buf);
+    }
+    return rx_status;
+}
+
+
+/*************************** cec arbitration cts code ******************************/
+// using the cec pin as fiq gpi to assist the bus arbitration
+static unsigned char msg_log_buf[128] = { 0 };
+// return value: 1: successful      0: error
+static int cec_ll_tx_once(const unsigned char *msg, unsigned char len)
+{
+    int i;
+    unsigned int ret = 0xf;
+    unsigned int n;
+    unsigned int cnt = 30;
+    int pos;
+
+    while(aocec_rd_reg(CEC_TX_MSG_STATUS) || aocec_rd_reg(CEC_RX_MSG_STATUS)){
+        msleep(5);
+        if(TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS)){
+            //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+            aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+            //cec_hw_reset();
+            break;
+        }
+        if(!(cnt--)){
+            hdmi_print(INF, CEC "tx busy time out.\n");
+            aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+            aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+        }
+    }
+    for (i = 0; i < len; i++)
+    {
+        aocec_wr_reg(CEC_TX_MSG_0_HEADER + i, msg[i]);
+    }
+    aocec_wr_reg(CEC_TX_MSG_LENGTH, len-1);
+    aocec_wr_reg(CEC_TX_MSG_CMD, RX_ACK_CURRENT);
+
+    if(cec_msg_dbg_en  == 1) {
+        pos = 0;
+        pos += sprintf(msg_log_buf + pos, "CEC: tx msg len: %d   dat: ", len);
+        for(n = 0; n < len; n++) {
+            pos += sprintf(msg_log_buf + pos, "%02x ", msg[n]);
+        }
+        pos += sprintf(msg_log_buf + pos, "\n");
+
+        msg_log_buf[pos] = '\0';
+        printk("%s", msg_log_buf);
+    }
+    return ret;
+}
+
+int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
+{
+    int i;
+    unsigned int ret = 0xf;
+    unsigned int n;
+	unsigned int j = 30;
+    int pos;
+
+    aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x0, 1, 1);
+    for (i = 0; i < len; i++)
+    {
+        aocec_wr_reg(CEC_TX_MSG_0_HEADER + i, msg[i]);
+    }
+    aocec_wr_reg(CEC_TX_MSG_LENGTH, len-1);
+    aocec_wr_reg(CEC_TX_MSG_CMD, RX_ACK_CURRENT);
+
+    while((TX_DONE != aocec_rd_reg(CEC_TX_MSG_STATUS)) && (j--)){
+		msleep(5);
+	}
+
+    ret = aocec_rd_reg(CEC_TX_MSG_STATUS);
+
+    if(ret == TX_DONE)
+        ret = 1;
+    else
+        ret = 0;
+    aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+    aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 1, 1, 1);
+
+    if(cec_msg_dbg_en  == 1) {
+        pos = 0;
+        pos += sprintf(msg_log_buf + pos, "CEC: tx msg len: %d   dat: ", len);
+        for(n = 0; n < len; n++) {
+            pos += sprintf(msg_log_buf + pos, "%02x ", msg[n]);
+        }
+        pos += sprintf(msg_log_buf + pos, "\nCEC: tx state: %d\n", ret);
+        msg_log_buf[pos] = '\0';
+        printk("%s", msg_log_buf);
+    }
+    return ret;
+}
+
+void tx_irq_handle(void){
+    unsigned tx_status = aocec_rd_reg(CEC_TX_MSG_STATUS);
+    switch(tx_status){
+    case TX_DONE:
+      aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+      break;
+    case TX_BUSY:
+        aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+        aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+        break;
+    case TX_ERROR:
+        cec_hw_reset();
+        //aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+        break;
+    default:
+        break;
+    }
+    aml_write_reg32(P_AO_CEC_INTR_CLR, aml_read_reg32(P_AO_CEC_INTR_CLR) | (1 << 1));
+    //aml_write_reg32(P_AO_CEC_INTR_MASKN, aml_read_reg32(P_AO_CEC_INTR_MASKN) | (1 << 2));
+
+}
+
+// Return value: 0: fail    1: success
+int cec_ll_tx(const unsigned char *msg, unsigned char len)
+{
+    int ret = 0;
+    
+    mutex_lock(&cec_mutex);
+    //aml_write_reg32(P_AO_CEC_INTR_MASKN, aml_read_reg32(P_AO_CEC_INTR_MASKN) & ~(1 << 2));
+    cec_ll_tx_once(msg, len);
+
+    mutex_unlock(&cec_mutex);
+    
+    return ret;
+}
+
+void cec_polling_online_dev(int log_addr, int *bool)
+{
+    unsigned long r;
+    unsigned char msg[1];
+
+    cec_global_info.my_node_index = log_addr;
+    msg[0] = (log_addr<<4) | log_addr;
+
+    aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | 0xf);
+    hdmi_print(INF, CEC "CEC_LOGICAL_ADDR0:0x%lx\n",aocec_rd_reg(CEC_LOGICAL_ADDR0));
+    r = cec_ll_tx_polling(msg, 1);
+    cec_hw_reset();
+
+    if (r == 0) {
+        *bool = 0;
+    }else{
+        memset(&(cec_global_info.cec_node_info[log_addr]), 0, sizeof(cec_node_info_t));
+        cec_global_info.cec_node_info[log_addr].dev_type = cec_log_addr_to_dev_type(log_addr);
+    	  *bool = 1;
+    }
+    if(*bool == 0) {
+        aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | log_addr);
+    }
+    hdmi_print(INF, CEC "CEC: poll online logic device: 0x%x BOOL: %d\n", log_addr, *bool);
+
+}
+
+
+//--------------------------------------------------------------------------
+// AO CEC0 config
+//--------------------------------------------------------------------------
+void ao_cec_init(void)
+{
+    unsigned long data32;
+    // Assert SW reset AO_CEC
+    data32  = 0;
+    data32 |= 0 << 1;   // [2:1]    cntl_clk: 0=Disable clk (Power-off mode); 1=Enable gated clock (Normal mode); 2=Enable free-run clk (Debug mode).
+    data32 |= 1 << 0;   // [0]      sw_reset: 1=Reset
+    aml_write_reg32(P_AO_CEC_GEN_CNTL, data32);
+    // Enable gated clock (Normal mode).
+    aml_set_reg32_bits(P_AO_CEC_GEN_CNTL, 1, 1, 1);
+    // Release SW reset
+    aml_set_reg32_bits(P_AO_CEC_GEN_CNTL, 0, 0, 1);
+
+    // Enable all AO_CEC interrupt sources
+    aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x6, 0, 3);
+
+    // Device 0 config
+    aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | 0x4);
+}
+
+
+void cec_arbit_bit_time_read(void){//11bit:bit[10:0]
+    //3 bit
+    hdmi_print(INF, CEC "read 3 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_4BIT_BIT10_8),aocec_rd_reg(AO_CEC_TXTIME_4BIT_BIT7_0));
+    //5 bit
+    hdmi_print(INF, CEC "read 5 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_2BIT_BIT10_8), aocec_rd_reg(AO_CEC_TXTIME_2BIT_BIT7_0));
+    //7 bit
+    hdmi_print(INF, CEC "read 7 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_17MS_BIT10_8), aocec_rd_reg(AO_CEC_TXTIME_17MS_BIT7_0));
+}
+
+void cec_arbit_bit_time_set(unsigned bit_set, unsigned time_set, unsigned flag){//11bit:bit[10:0]
+    if(flag)
+        hdmi_print(INF, CEC "bit_set:0x%x;time_set:0x%x \n", bit_set, time_set);
+    switch(bit_set){
+    case 3:
+        //3 bit
+        if(flag)
+            hdmi_print(INF, CEC "read 3 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_4BIT_BIT10_8),aocec_rd_reg(AO_CEC_TXTIME_4BIT_BIT7_0));
+        aocec_wr_reg(AO_CEC_TXTIME_4BIT_BIT7_0, time_set & 0xff);
+        aocec_wr_reg(AO_CEC_TXTIME_4BIT_BIT10_8, (time_set >> 8) & 0x7);
+        if(flag)
+            hdmi_print(INF, CEC "write 3 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_4BIT_BIT10_8),aocec_rd_reg(AO_CEC_TXTIME_4BIT_BIT7_0));
+        break;
+        //5 bit
+    case 5:
+        if(flag)
+            hdmi_print(INF, CEC "read 5 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_2BIT_BIT10_8), aocec_rd_reg(AO_CEC_TXTIME_2BIT_BIT7_0));
+        aocec_wr_reg(AO_CEC_TXTIME_2BIT_BIT7_0, time_set & 0xff);
+        aocec_wr_reg(AO_CEC_TXTIME_2BIT_BIT10_8, (time_set >> 8) & 0x7);
+        if(flag)
+            hdmi_print(INF, CEC "write 5 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_2BIT_BIT10_8), aocec_rd_reg(AO_CEC_TXTIME_2BIT_BIT7_0));
+        //7 bit
+	case 7:
+        if(flag)
+            hdmi_print(INF, CEC "read 7 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_17MS_BIT10_8), aocec_rd_reg(AO_CEC_TXTIME_17MS_BIT7_0));
+        aocec_wr_reg(AO_CEC_TXTIME_17MS_BIT7_0, time_set & 0xff);
+        aocec_wr_reg(AO_CEC_TXTIME_17MS_BIT10_8, (time_set >> 8) & 0x7);
+        if(flag)
+            hdmi_print(INF, CEC "write 7 bit:0x%x%x \n", aocec_rd_reg(AO_CEC_TXTIME_17MS_BIT10_8), aocec_rd_reg(AO_CEC_TXTIME_17MS_BIT7_0));
+        break;
+    default:
+        break;
+    }
+}
+
+// DELETE LATER, TEST ONLY
+void cec_test_(unsigned int cmd)
+{
+    
+}
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
new file mode 100644
index 000000000000..7617b9f38982
--- /dev/null
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
@@ -0,0 +1,3082 @@
+/*
+ * Amlogic Meson HDMI Transmitter Driver
+ * Copyright (C) 2010 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the named License,
+ * or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/interrupt.h>
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/mm.h>
+#include <linux/major.h>
+#include <linux/platform_device.h>
+#include <linux/mutex.h>
+#include <linux/cdev.h>
+#include <linux/slab.h>
+//#include <linux/amports/canvas.h>
+#include <asm/uaccess.h>
+#include <asm/delay.h>
+#include <mach/am_regs.h>
+#include <mach/clock.h>
+#include <mach/power_gate.h>
+#include <linux/clk.h>
+#include <mach/clock.h>
+#include <linux/amlogic/vout/vinfo.h>
+#include <linux/amlogic/vout/enc_clk_config.h>
+#include <mach/io.h>
+#include <mach/register.h>
+#ifdef CONFIG_PANEL_IT6681
+#include <linux/it6681.h>
+#endif
+#include <linux/amlogic/hdmi_tx/hdmi_info_global.h>
+#include <linux/amlogic/hdmi_tx/hdmi_tx_module.h>
+#include <linux/amlogic/hdmi_tx/hdmi_tx_cec.h>
+
+#if 0   //todo
+#include "../hdmi_tx_hdcp.h"
+#include "../hdmi_tx_compliance.h"
+#endif
+#include <mach/hdmi_tx_reg.h>
+#include "tvenc_conf.h"
+#ifdef Wr
+#undef Wr
+#endif
+#ifdef Rd
+#undef Rd
+#endif
+#define Wr(reg,val) WRITE_MPEG_REG(reg,val)
+#define Rd(reg)   READ_MPEG_REG(reg)
+#define Wr_reg_bits(reg, val, start, len) \
+  Wr(reg, (Rd(reg) & ~(((1L<<(len))-1)<<(start)))|((unsigned int)(val) << (start)))
+
+#define EDID_RAM_ADDR_SIZE      (4*128)
+
+static void hdmi_audio_init(unsigned char spdif_flag);
+static void hdmitx_dump_tvenc_reg(int cur_VIC, int printk_flag);
+
+static void hdmi_phy_suspend(void);
+static void hdmi_phy_wakeup(void);
+
+unsigned char hdmi_pll_mode = 0; /* 1, use external clk as hdmi pll source */
+static unsigned char aud_para = 0x49;
+
+#define HSYNC_POLARITY      1                       // HSYNC polarity: active high 
+#define VSYNC_POLARITY      1                       // VSYNC polarity: active high
+#define TX_INPUT_COLOR_DEPTH    0                   // Pixel bit width: 0=24-bit; 1=30-bit; 2=36-bit; 3=48-bit.
+#define TX_INPUT_COLOR_FORMAT   1                   // Pixel format: 0=RGB444; 1=YCbCr444; 2=Rsrv; 3=YCbCr422.
+#define TX_INPUT_COLOR_RANGE    0                   // Pixel range: 0=16-235/240; 1=16-240; 2=1-254; 3=0-255.
+
+
+#define TX_OUTPUT_COLOR_RANGE   0                   // Pixel range: 0=16-235/240; 1=16-240; 2=1-254; 3=0-255.
+
+#if 1
+//spdif
+#define TX_I2S_SPDIF        0                       // 0=SPDIF; 1=I2S.
+#define TX_I2S_8_CHANNEL    0                       // 0=I2S 2-channel; 1=I2S 4 x 2-channel.
+#else
+//i2s 8 channel
+#define TX_I2S_SPDIF        1                       // 0=SPDIF; 1=I2S.
+#define TX_I2S_8_CHANNEL    1                       // 0=I2S 2-channel; 1=I2S 4 x 2-channel.
+#endif
+
+//static struct tasklet_struct EDID_tasklet;
+static unsigned delay_flag = 0;
+static unsigned serial_reg_val=0x1; //0x22;
+static unsigned char i2s_to_spdif_flag=1;   // if current channel number is larger than 2ch, using i2s
+static unsigned color_depth_f=0;
+static unsigned color_space_f=0;
+static unsigned char new_reset_sequence_flag=1;
+static unsigned char power_mode=1;
+static unsigned char power_off_vdac_flag=0;
+    /* 0, do not use fixed tvenc val for all mode; 1, use fixed tvenc val mode for 480i; 2, use fixed tvenc val mode for all modes */
+static unsigned char use_tvenc_conf_flag=1;
+
+static unsigned char cur_vout_index = 1; //CONFIG_AM_TV_OUTPUT2
+
+static unsigned long modulo(unsigned long a, unsigned long b)
+{
+    if (a >= b) {
+        return(a-b);
+    } else {
+        return(a);
+    }
+}
+        
+static signed int to_signed(unsigned int a)
+{
+    if (a <= 7) {
+        return(a);
+    } else {
+        return(a-16);
+    }
+}
+
+static void delay_us (int us)
+{
+    //udelay(us);
+    if(delay_flag&0x1)
+        mdelay((us+999)/1000);
+    else
+    udelay(us);
+} /* delay_us */
+
+static irqreturn_t intr_handler(int irq, void *dev_instance)
+{
+    unsigned int data32;
+    hdmitx_dev_t* hdmitx_device = (hdmitx_dev_t*)dev_instance;
+    data32 = hdmi_rd_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT); 
+    hdmi_print(IMP, SYS "irq %x\n", data32);
+    if(hdmitx_device->hpd_lock == 1) {
+        hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR, 0xf);
+        hdmi_print(IMP, HPD "HDMI hpd locked\n");
+        return IRQ_HANDLED;
+    }
+    if(hdmitx_device->internal_mode_change == 1){     // if the irq from the internal mode change, just do nothing and return
+        hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR, 0x7);
+        hdmi_print(IMP, SYS "hdmitx: ignore irq\n");
+        return IRQ_HANDLED;
+    }
+
+    WRITE_MPEG_REG(HHI_GCLK_MPEG2, READ_MPEG_REG(HHI_GCLK_MPEG2) | (1<<4));     //Enable HDMI PCLK
+    
+    if (data32 & (1 << 1)) { //HPD falling
+        hdmitx_device->vic_count = 0;
+        hdmi_wr_only_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR,  1 << 1); //clear HPD falling interrupt in hdmi module 
+        hdmitx_device->hpd_event = 2;
+    }
+    if (data32 & (1 << 0)) {  //HPD rising
+        hdmi_wr_only_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR,  1 << 0); //clear HPD rising interrupt in hdmi module
+        // If HPD asserts, then start DDC transaction
+        if (hdmi_rd_reg(TX_HDCP_ST_EDID_STATUS) & (1<<1)) {
+            // Start DDC transaction
+            hdmitx_device->cur_edid_block=0;
+            hdmitx_device->cur_phy_block_ptr=0;
+            hdmitx_device->hpd_event = 1;
+        // Error if HPD deasserts
+        } else {
+            hdmi_print(ERR, HPD "HPD deasserts!\n");
+        }
+    }
+    if (data32 & (1 << 2)) { //TX EDID interrupt
+        if((hdmitx_device->cur_edid_block+2)<=EDID_MAX_BLOCK){
+            int ii, jj;
+            for(jj=0;jj<2;jj++){
+                for(ii=0;ii<128;ii++){
+                    hdmitx_device->EDID_buf[hdmitx_device->cur_edid_block*128+ii]
+                        =hdmi_rd_reg(0x600+hdmitx_device->cur_phy_block_ptr*128+ii);
+                }
+                hdmitx_device->cur_edid_block++;
+                hdmitx_device->cur_phy_block_ptr++;
+                hdmitx_device->cur_phy_block_ptr=hdmitx_device->cur_phy_block_ptr&0x3;
+            }
+        }        
+//#ifndef AML_A3
+//        /*walkaround: manually clear EDID interrupt*/
+//        hdmi_wr_reg(TX_HDCP_EDID_CONFIG, hdmi_rd_reg(TX_HDCP_EDID_CONFIG) | (1<<1)); 
+//        hdmi_wr_reg(TX_HDCP_EDID_CONFIG, hdmi_rd_reg(TX_HDCP_EDID_CONFIG) & ~(1<<1)); 
+//        /**/
+//#endif        
+        //tasklet_schedule(&EDID_tasklet);
+        hdmi_wr_only_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR,  1 << 2); //clear EDID rising interrupt in hdmi module 
+    }
+    if (!((data32 == 1) || (data32 == 2) || (data32 == 4))) {
+        hdmi_print(ERR, SYS "Unkown HDMI Interrupt Source\n");
+        hdmi_wr_only_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR,  data32); //clear unkown interrupt in hdmi module 
+    }
+//#ifdef AML_A3
+    hdmi_rd_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR); // A read to allow the interrupt cleared in hdmi_module before next action
+    hdmi_wr_only_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR, 0xf); //clear HPD falling interrupt in hdmi module
+//#endif
+
+    //aml_write_reg32(P_SYS_CPU_0_IRQ_IN1_INTR_STAT_CLR, 1 << 25);  //clear hdmi_tx interrupt
+    return IRQ_HANDLED;
+}
+
+static void hdmi_tvenc1080i_set(Hdmi_tx_video_para_t* param)
+{
+    unsigned long VFIFO2VD_TO_HDMI_LATENCY = 2; // Annie 01Sep2011: Change value from 3 to 2, due to video encoder path delay change.
+    unsigned long TOTAL_PIXELS, PIXEL_REPEAT_HDMI, PIXEL_REPEAT_VENC, ACTIVE_PIXELS;
+    unsigned FRONT_PORCH = 88, HSYNC_PIXELS, ACTIVE_LINES = 0, INTERLACE_MODE, TOTAL_LINES, SOF_LINES, VSYNC_LINES;
+    unsigned LINES_F0, LINES_F1 = 563,BACK_PORCH, EOF_LINES = 2, TOTAL_FRAMES;
+
+    unsigned long total_pixels_venc ;
+    unsigned long active_pixels_venc;
+    unsigned long front_porch_venc  ;
+    unsigned long hsync_pixels_venc ;
+
+    unsigned long de_h_begin, de_h_end;
+    unsigned long de_v_begin_even, de_v_end_even, de_v_begin_odd, de_v_end_odd;
+    unsigned long hs_begin, hs_end;
+    unsigned long vs_adjust;
+    unsigned long vs_bline_evn, vs_eline_evn, vs_bline_odd, vs_eline_odd;
+    unsigned long vso_begin_evn, vso_begin_odd;
+    
+    if(param->VIC==HDMI_1080i60){
+         INTERLACE_MODE     = 1;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 0;                   
+         ACTIVE_PIXELS  =     (1920*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (1080/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 562;                 
+         LINES_F1           = 563;                 
+         FRONT_PORCH        = 88;                  
+         HSYNC_PIXELS       = 44;                  
+         BACK_PORCH         = 148;                  
+         EOF_LINES          = 2;                   
+         VSYNC_LINES        = 5;                   
+         SOF_LINES          = 15;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    else if(param->VIC==HDMI_1080i50){
+         INTERLACE_MODE     = 1;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 0;                   
+         ACTIVE_PIXELS  =     (1920*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (1080/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 562;                 
+         LINES_F1           = 563;                 
+         FRONT_PORCH        = 528;                  
+         HSYNC_PIXELS       = 44;                  
+         BACK_PORCH         = 148;                  
+         EOF_LINES          = 2;                   
+         VSYNC_LINES        = 5;                   
+         SOF_LINES          = 15;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    TOTAL_PIXELS =(FRONT_PORCH+HSYNC_PIXELS+BACK_PORCH+ACTIVE_PIXELS); // Number of total pixels per line.
+    TOTAL_LINES  =(LINES_F0+(LINES_F1*INTERLACE_MODE));                // Number of total lines per frame.
+
+    total_pixels_venc = (TOTAL_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 2200 / 1 * 2 = 4400
+    active_pixels_venc= (ACTIVE_PIXELS / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 1920 / 1 * 2 = 3840
+    front_porch_venc  = (FRONT_PORCH   / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 88   / 1 * 2 = 176
+    hsync_pixels_venc = (HSYNC_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 44   / 1 * 2 = 88
+
+    aml_write_reg32(P_ENCP_VIDEO_MODE, aml_read_reg32(P_ENCP_VIDEO_MODE)|(1<<14)); // cfg_de_v = 1
+
+    // Program DE timing
+    de_h_begin = modulo(aml_read_reg32(P_ENCP_VIDEO_HAVON_BEGIN) + VFIFO2VD_TO_HDMI_LATENCY,  total_pixels_venc); // (383 + 3) % 4400 = 386
+    de_h_end   = modulo(de_h_begin + active_pixels_venc,                        total_pixels_venc); // (386 + 3840) % 4400 = 4226
+    aml_write_reg32(P_ENCP_DE_H_BEGIN, de_h_begin);    // 386
+    aml_write_reg32(P_ENCP_DE_H_END,   de_h_end);      // 4226
+    // Program DE timing for even field
+    de_v_begin_even = aml_read_reg32(P_ENCP_VIDEO_VAVON_BLINE);       // 20
+    de_v_end_even   = de_v_begin_even + ACTIVE_LINES;   // 20 + 540 = 560
+    aml_write_reg32(P_ENCP_DE_V_BEGIN_EVEN,de_v_begin_even);   // 20
+    aml_write_reg32(P_ENCP_DE_V_END_EVEN,  de_v_end_even);     // 560
+    // Program DE timing for odd field if needed
+    if (INTERLACE_MODE) {
+        // Calculate de_v_begin_odd according to enc480p_timing.v:
+        //wire[10:0]    cfg_ofld_vavon_bline    = {{7{ofld_vavon_ofst1 [3]}},ofld_vavon_ofst1 [3:0]} + cfg_video_vavon_bline    + ofld_line;
+        de_v_begin_odd  = to_signed((aml_read_reg32(P_ENCP_VIDEO_OFLD_VOAV_OFST) & 0xf0)>>4) + de_v_begin_even + (TOTAL_LINES-1)/2; // 1 + 20 + (1125-1)/2 = 583
+        de_v_end_odd    = de_v_begin_odd + ACTIVE_LINES;    // 583 + 540 = 1123
+        aml_write_reg32(P_ENCP_DE_V_BEGIN_ODD, de_v_begin_odd);// 583
+        aml_write_reg32(P_ENCP_DE_V_END_ODD,   de_v_end_odd);  // 1123
+    }
+
+    // Program Hsync timing
+    if (de_h_end + front_porch_venc >= total_pixels_venc) {
+        hs_begin    = de_h_end + front_porch_venc - total_pixels_venc; // 4226 + 176 - 4400 = 2
+
+
+
+
+
+        vs_adjust   = 1;
+    } else {
+        hs_begin    = de_h_end + front_porch_venc;
+        vs_adjust   = 0;
+    }
+    hs_end  = modulo(hs_begin + hsync_pixels_venc,   total_pixels_venc); // (2 + 88) % 4400 = 90
+    aml_write_reg32(P_ENCP_DVI_HSO_BEGIN,  hs_begin);  // 2
+    aml_write_reg32(P_ENCP_DVI_HSO_END,    hs_end);    // 90
+    
+    // Program Vsync timing for even field
+    if (de_v_begin_even >= SOF_LINES + VSYNC_LINES + (1-vs_adjust)) {
+        vs_bline_evn = de_v_begin_even - SOF_LINES - VSYNC_LINES - (1-vs_adjust); // 20 - 15 - 5 - 0 = 0
+    } else {
+        vs_bline_evn = TOTAL_LINES + de_v_begin_even - SOF_LINES - VSYNC_LINES - (1-vs_adjust);
+    }
+    vs_eline_evn = modulo(vs_bline_evn + VSYNC_LINES, TOTAL_LINES); // (0 + 5) % 1125 = 5
+    aml_write_reg32(P_ENCP_DVI_VSO_BLINE_EVN, vs_bline_evn);   // 0
+    aml_write_reg32(P_ENCP_DVI_VSO_ELINE_EVN, vs_eline_evn);   // 5
+    vso_begin_evn = hs_begin; // 2
+    aml_write_reg32(P_ENCP_DVI_VSO_BEGIN_EVN, vso_begin_evn);  // 2
+    aml_write_reg32(P_ENCP_DVI_VSO_END_EVN,   vso_begin_evn);  // 2
+    // Program Vsync timing for odd field if needed
+    if (INTERLACE_MODE) {
+        vs_bline_odd = de_v_begin_odd-1 - SOF_LINES - VSYNC_LINES;  // 583-1 - 15 - 5   = 562
+        vs_eline_odd = de_v_begin_odd-1 - SOF_LINES;                // 583-1 - 15       = 567
+        vso_begin_odd   = modulo(hs_begin + (total_pixels_venc>>1), total_pixels_venc); // (2 + 4400/2) % 4400 = 2202
+        aml_write_reg32(P_ENCP_DVI_VSO_BLINE_ODD, vs_bline_odd);   // 562
+        aml_write_reg32(P_ENCP_DVI_VSO_ELINE_ODD, vs_eline_odd);   // 567
+        aml_write_reg32(P_ENCP_DVI_VSO_BEGIN_ODD, vso_begin_odd);  // 2202
+        aml_write_reg32(P_ENCP_DVI_VSO_END_ODD,   vso_begin_odd);  // 2202
+    }
+
+    // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
+    aml_write_reg32(P_VPU_HDMI_SETTING, (0                                 << 0) | // [    0] src_sel_enci
+                         (0                                 << 1) | // [    1] src_sel_encp
+                         (HSYNC_POLARITY                    << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
+                         (VSYNC_POLARITY                    << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
+                         (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
+                         (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                                                                    //                          0=output CrYCb(BRG);
+                                                                    //                          1=output YCbCr(RGB);
+                                                                    //                          2=output YCrCb(RBG);
+                                                                    //                          3=output CbCrY(GBR);
+                                                                    //                          4=output CbYCr(GRB);
+                                                                    //                          5=output CrCbY(BGR);
+                                                                    //                          6,7=Rsrv.
+#ifdef DOUBLE_CLK_720P_1080I
+                         (0                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+#else                         
+                         (1                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+#endif                         
+                         (0                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
+    );
+    aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 1, 1);  // [    1] src_sel_encp: Enable ENCP output to HDMI
+
+}    
+
+static void hdmi_tvenc4k2k_set(Hdmi_tx_video_para_t* param)
+{
+    unsigned long VFIFO2VD_TO_HDMI_LATENCY = 2; // Annie 01Sep2011: Change value from 3 to 2, due to video encoder path delay change.
+    unsigned long TOTAL_PIXELS = 4400, PIXEL_REPEAT_HDMI, PIXEL_REPEAT_VENC, ACTIVE_PIXELS = 3840;
+    unsigned FRONT_PORCH = 1020, HSYNC_PIXELS, ACTIVE_LINES = 2160, INTERLACE_MODE, TOTAL_LINES, SOF_LINES, VSYNC_LINES;
+    unsigned LINES_F0 = 2250, LINES_F1 = 2250,BACK_PORCH, EOF_LINES = 8, TOTAL_FRAMES;
+
+    unsigned long total_pixels_venc ;
+    unsigned long active_pixels_venc;
+    unsigned long front_porch_venc  ;
+    unsigned long hsync_pixels_venc ;
+
+    unsigned long de_h_begin, de_h_end;
+    unsigned long de_v_begin_even, de_v_end_even, de_v_begin_odd, de_v_end_odd;
+    unsigned long hs_begin, hs_end;
+    unsigned long vs_adjust;
+    unsigned long vs_bline_evn, vs_eline_evn, vs_bline_odd, vs_eline_odd;
+    unsigned long vso_begin_evn, vso_begin_odd;
+
+    if(param->VIC==HDMI_4k2k_30){
+         INTERLACE_MODE     = 0;
+         PIXEL_REPEAT_VENC  = 0;
+         PIXEL_REPEAT_HDMI  = 0;
+         ACTIVE_PIXELS  =     (3840*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (2160/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 2250;
+         LINES_F1           = 2250;
+         FRONT_PORCH        = 176;
+         HSYNC_PIXELS       = 88;
+         BACK_PORCH         = 296;
+         EOF_LINES          = 8 + 1;
+         VSYNC_LINES        = 10;
+         SOF_LINES          = 72 + 1;
+         TOTAL_FRAMES       = 3;
+    }
+    else if(param->VIC==HDMI_4k2k_25){
+         INTERLACE_MODE     = 0;
+         PIXEL_REPEAT_VENC  = 0;
+         PIXEL_REPEAT_HDMI  = 0;
+         ACTIVE_PIXELS  =     (3840*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (2160/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 2250;
+         LINES_F1           = 2250;
+         FRONT_PORCH        = 1056;
+         HSYNC_PIXELS       = 88;
+         BACK_PORCH         = 296;
+         EOF_LINES          = 8 + 1;
+         VSYNC_LINES        = 10;
+         SOF_LINES          = 72 + 1;
+         TOTAL_FRAMES       = 3;
+    }
+    else if(param->VIC==HDMI_4k2k_24){
+         INTERLACE_MODE     = 0;
+         PIXEL_REPEAT_VENC  = 0;
+         PIXEL_REPEAT_HDMI  = 0;
+         ACTIVE_PIXELS  =     (3840*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (2160/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 2250;
+         LINES_F1           = 2250;
+         FRONT_PORCH        = 1276;
+         HSYNC_PIXELS       = 88;
+         BACK_PORCH         = 296;
+         EOF_LINES          = 8 + 1;
+         VSYNC_LINES        = 10;
+         SOF_LINES          = 72 + 1;
+         TOTAL_FRAMES       = 3;
+    }
+    else if(param->VIC==HDMI_4k2k_smpte_24){
+         INTERLACE_MODE     = 0;
+         PIXEL_REPEAT_VENC  = 0;
+         PIXEL_REPEAT_HDMI  = 0;
+         ACTIVE_PIXELS  =     (4096*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (2160/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 2250;
+         LINES_F1           = 2250;
+         FRONT_PORCH        = 1020;
+         HSYNC_PIXELS       = 88;
+         BACK_PORCH         = 296;
+         EOF_LINES          = 8 + 1;
+         VSYNC_LINES        = 10;
+         SOF_LINES          = 72 + 1;
+         TOTAL_FRAMES       = 3;
+    }
+    else {
+        // nothing
+    }
+
+    TOTAL_PIXELS       = (FRONT_PORCH+HSYNC_PIXELS+BACK_PORCH+ACTIVE_PIXELS); // Number of total pixels per line.
+    TOTAL_LINES        = (LINES_F0+(LINES_F1*INTERLACE_MODE));                // Number of total lines per frame.
+
+    total_pixels_venc = (TOTAL_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC);
+    active_pixels_venc= (ACTIVE_PIXELS / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC);
+    front_porch_venc  = (FRONT_PORCH   / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC);
+    hsync_pixels_venc = (HSYNC_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC);
+
+    de_h_begin = modulo(aml_read_reg32(P_ENCP_VIDEO_HAVON_BEGIN) + VFIFO2VD_TO_HDMI_LATENCY,  total_pixels_venc);
+    de_h_end   = modulo(de_h_begin + active_pixels_venc,                        total_pixels_venc);
+    aml_write_reg32(P_ENCP_DE_H_BEGIN, de_h_begin);
+    aml_write_reg32(P_ENCP_DE_H_END,   de_h_end);
+    // Program DE timing for even field
+    de_v_begin_even = aml_read_reg32(P_ENCP_VIDEO_VAVON_BLINE);
+    de_v_end_even   = modulo(de_v_begin_even + ACTIVE_LINES, TOTAL_LINES);
+    aml_write_reg32(P_ENCP_DE_V_BEGIN_EVEN,de_v_begin_even);
+    aml_write_reg32(P_ENCP_DE_V_END_EVEN,  de_v_end_even);
+    // Program DE timing for odd field if needed
+    if (INTERLACE_MODE) {
+        // Calculate de_v_begin_odd according to enc480p_timing.v:
+        //wire[10:0]    cfg_ofld_vavon_bline    = {{7{ofld_vavon_ofst1 [3]}},ofld_vavon_ofst1 [3:0]} + cfg_video_vavon_bline    + ofld_line;
+        de_v_begin_odd  = to_signed((aml_read_reg32(P_ENCP_VIDEO_OFLD_VOAV_OFST) & 0xf0)>>4) + de_v_begin_even + (TOTAL_LINES-1)/2;
+        de_v_end_odd    = modulo(de_v_begin_odd + ACTIVE_LINES, TOTAL_LINES);
+        aml_write_reg32(P_ENCP_DE_V_BEGIN_ODD, de_v_begin_odd);
+        aml_write_reg32(P_ENCP_DE_V_END_ODD,   de_v_end_odd);
+    }
+
+    // Program Hsync timing
+    if (de_h_end + front_porch_venc >= total_pixels_venc) {
+        hs_begin    = de_h_end + front_porch_venc - total_pixels_venc;
+        vs_adjust   = 1;
+    } else {
+        hs_begin    = de_h_end + front_porch_venc;
+        vs_adjust   = 0;
+    }
+    hs_end  = modulo(hs_begin + hsync_pixels_venc,   total_pixels_venc);
+    aml_write_reg32(P_ENCP_DVI_HSO_BEGIN,  hs_begin);
+    aml_write_reg32(P_ENCP_DVI_HSO_END,    hs_end);
+    
+    // Program Vsync timing for even field
+    if (de_v_begin_even >= SOF_LINES + VSYNC_LINES + (1-vs_adjust)) {
+        vs_bline_evn = de_v_begin_even - SOF_LINES - VSYNC_LINES - (1-vs_adjust);
+    } else {
+        vs_bline_evn = TOTAL_LINES + de_v_begin_even - SOF_LINES - VSYNC_LINES - (1-vs_adjust);
+    }
+    vs_eline_evn = modulo(vs_bline_evn + VSYNC_LINES, TOTAL_LINES);
+    aml_write_reg32(P_ENCP_DVI_VSO_BLINE_EVN, vs_bline_evn);
+    aml_write_reg32(P_ENCP_DVI_VSO_ELINE_EVN, vs_eline_evn);
+    vso_begin_evn = hs_begin;
+    aml_write_reg32(P_ENCP_DVI_VSO_BEGIN_EVN, vso_begin_evn);
+    aml_write_reg32(P_ENCP_DVI_VSO_END_EVN,   vso_begin_evn);
+    // Program Vsync timing for odd field if needed
+    if (INTERLACE_MODE) {
+        vs_bline_odd = de_v_begin_odd-1 - SOF_LINES - VSYNC_LINES;
+        vs_eline_odd = de_v_begin_odd-1 - SOF_LINES;
+        vso_begin_odd   = modulo(hs_begin + (total_pixels_venc>>1), total_pixels_venc);
+        aml_write_reg32(P_ENCP_DVI_VSO_BLINE_ODD, vs_bline_odd);
+        aml_write_reg32(P_ENCP_DVI_VSO_ELINE_ODD, vs_eline_odd);
+        aml_write_reg32(P_ENCP_DVI_VSO_BEGIN_ODD, vso_begin_odd);
+        aml_write_reg32(P_ENCP_DVI_VSO_END_ODD,   vso_begin_odd);
+    }
+    aml_write_reg32(P_VPU_HDMI_SETTING, (0                                 << 0) | // [    0] src_sel_enci
+                         (0                                 << 1) | // [    1] src_sel_encp
+                         (HSYNC_POLARITY                    << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
+                         (VSYNC_POLARITY                    << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
+                         (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
+                         (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                                                                    //                          0=output CrYCb(BRG);
+                                                                    //                          1=output YCbCr(RGB);
+                                                                    //                          2=output YCrCb(RBG);
+                                                                    //                          3=output CbCrY(GBR);
+                                                                    //                          4=output CbYCr(GRB);
+                                                                    //                          5=output CrCbY(BGR);
+                                                                    //                          6,7=Rsrv.
+                         (0                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+                         (0                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
+    );
+    aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 1, 1);  // [    1] src_sel_encp: Enable ENCP output to HDMI
+    aml_write_reg32(P_ENCP_VIDEO_EN, 1); // Enable VENC
+}
+
+static void hdmi_tvenc480i_set(Hdmi_tx_video_para_t* param)
+{
+    unsigned long VFIFO2VD_TO_HDMI_LATENCY = 1; // Annie 01Sep2011: Change value from 2 to 1, due to video encoder path delay change.
+    unsigned long TOTAL_PIXELS, PIXEL_REPEAT_HDMI, PIXEL_REPEAT_VENC, ACTIVE_PIXELS;
+    unsigned FRONT_PORCH = 38, HSYNC_PIXELS = 124, ACTIVE_LINES = 0, INTERLACE_MODE, TOTAL_LINES, SOF_LINES, VSYNC_LINES;
+    unsigned LINES_F0 = 262, LINES_F1 = 263, BACK_PORCH = 114, EOF_LINES = 2, TOTAL_FRAMES;
+
+    unsigned long total_pixels_venc ;
+    unsigned long active_pixels_venc;
+    unsigned long front_porch_venc  ;
+    unsigned long hsync_pixels_venc ;
+
+    unsigned long de_h_begin, de_h_end;
+    unsigned long de_v_begin_even, de_v_end_even, de_v_begin_odd, de_v_end_odd;
+    unsigned long hs_begin, hs_end;
+    unsigned long vs_adjust;
+    unsigned long vs_bline_evn, vs_eline_evn, vs_bline_odd, vs_eline_odd;
+    unsigned long vso_begin_evn, vso_begin_odd;
+
+    if((param->VIC==HDMI_480i60)||(param->VIC==HDMI_480i60_16x9)){
+         INTERLACE_MODE     = 1;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 1;                   
+         ACTIVE_PIXELS  =     (720*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (480/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 262;                 
+         LINES_F1           = 263;                 
+         FRONT_PORCH        = 38;                  
+         HSYNC_PIXELS       = 124;                  
+         BACK_PORCH         = 114;                  
+         EOF_LINES          = 4;                   
+         VSYNC_LINES        = 3;                   
+         SOF_LINES          = 15;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    else if((param->VIC==HDMI_576i50)||(param->VIC==HDMI_576i50_16x9)){
+         INTERLACE_MODE     = 1;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 1;                   
+         ACTIVE_PIXELS  =     (720*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES   =     (576/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 312;                 
+         LINES_F1           = 313;                 
+         FRONT_PORCH        = 24;                  
+         HSYNC_PIXELS       = 126;                  
+         BACK_PORCH         = 138;                  
+         EOF_LINES          = 2;                   
+         VSYNC_LINES        = 3;                   
+         SOF_LINES          = 19;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    TOTAL_PIXELS =(FRONT_PORCH+HSYNC_PIXELS+BACK_PORCH+ACTIVE_PIXELS); // Number of total pixels per line.
+    TOTAL_LINES  =(LINES_F0+(LINES_F1*INTERLACE_MODE));                // Number of total lines per frame.
+
+    total_pixels_venc = (TOTAL_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 1716 / 2 * 2 = 1716
+    active_pixels_venc= (ACTIVE_PIXELS / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 1440 / 2 * 2 = 1440
+    front_porch_venc  = (FRONT_PORCH   / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 38   / 2 * 2 = 38
+    hsync_pixels_venc = (HSYNC_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 124  / 2 * 2 = 124
+
+    // Annie 01Sep2011: Comment out the following 2 lines. Because ENCP is not used for 480i and 576i.
+    //Wr(ENCP_VIDEO_MODE,Rd(ENCP_VIDEO_MODE)|(1<<14)); // cfg_de_v = 1
+
+    // Program DE timing
+    // Annie 01Sep2011: for 480/576i, replace VFIFO2VD_PIXEL_START with ENCI_VFIFO2VD_PIXEL_START.
+    de_h_begin = modulo(aml_read_reg32(P_ENCI_VFIFO2VD_PIXEL_START) + VFIFO2VD_TO_HDMI_LATENCY,   total_pixels_venc); // (233 + 2) % 1716 = 235
+    de_h_end   = modulo(de_h_begin + active_pixels_venc,                            total_pixels_venc); // (235 + 1440) % 1716 = 1675
+    aml_write_reg32(P_ENCI_DE_H_BEGIN, de_h_begin);    // 235
+    aml_write_reg32(P_ENCI_DE_H_END,   de_h_end);      // 1675
+
+    // Annie 01Sep2011: for 480/576i, replace VFIFO2VD_LINE_TOP/BOT_START with ENCI_VFIFO2VD_LINE_TOP/BOT_START.
+    de_v_begin_even = aml_read_reg32(P_ENCI_VFIFO2VD_LINE_TOP_START);      // 17
+    de_v_end_even   = de_v_begin_even + ACTIVE_LINES;   // 17 + 240 = 257
+    de_v_begin_odd  = aml_read_reg32(P_ENCI_VFIFO2VD_LINE_BOT_START);      // 18
+    de_v_end_odd    = de_v_begin_odd + ACTIVE_LINES;    // 18 + 480/2 = 258
+    aml_write_reg32(P_ENCI_DE_V_BEGIN_EVEN,de_v_begin_even);   // 17
+    aml_write_reg32(P_ENCI_DE_V_END_EVEN,  de_v_end_even);     // 257
+    aml_write_reg32(P_ENCI_DE_V_BEGIN_ODD, de_v_begin_odd);    // 18
+    aml_write_reg32(P_ENCI_DE_V_END_ODD,   de_v_end_odd);      // 258
+
+    // Program Hsync timing
+    if (de_h_end + front_porch_venc >= total_pixels_venc) {
+        hs_begin    = de_h_end + front_porch_venc - total_pixels_venc;
+        vs_adjust   = 1;
+    } else {
+        hs_begin    = de_h_end + front_porch_venc; // 1675 + 38 = 1713
+        vs_adjust   = 0;
+    }
+    hs_end  = modulo(hs_begin + hsync_pixels_venc,   total_pixels_venc); // (1713 + 124) % 1716 = 121
+    aml_write_reg32(P_ENCI_DVI_HSO_BEGIN,  hs_begin);  // 1713
+    aml_write_reg32(P_ENCI_DVI_HSO_END,    hs_end);    // 121
+    
+    // Program Vsync timing for even field
+    if (de_v_end_odd-1 + EOF_LINES + vs_adjust >= LINES_F1) {
+        vs_bline_evn = de_v_end_odd-1 + EOF_LINES + vs_adjust - LINES_F1;
+        vs_eline_evn = vs_bline_evn + VSYNC_LINES;
+        aml_write_reg32(P_ENCI_DVI_VSO_BLINE_EVN, vs_bline_evn);
+        //vso_bline_evn_reg_wr_cnt ++;
+        aml_write_reg32(P_ENCI_DVI_VSO_ELINE_EVN, vs_eline_evn);
+        //vso_eline_evn_reg_wr_cnt ++;
+        aml_write_reg32(P_ENCI_DVI_VSO_BEGIN_EVN, hs_begin);
+        aml_write_reg32(P_ENCI_DVI_VSO_END_EVN,   hs_begin);
+    } else {
+        vs_bline_odd = de_v_end_odd-1 + EOF_LINES + vs_adjust; // 258-1 + 4 + 0 = 261
+        aml_write_reg32(P_ENCI_DVI_VSO_BLINE_ODD, vs_bline_odd); // 261
+        //vso_bline_odd_reg_wr_cnt ++;
+        aml_write_reg32(P_ENCI_DVI_VSO_BEGIN_ODD, hs_begin);  // 1713
+        if (vs_bline_odd + VSYNC_LINES >= LINES_F1) {
+            vs_eline_evn = vs_bline_odd + VSYNC_LINES - LINES_F1; // 261 + 3 - 263 = 1
+            aml_write_reg32(P_ENCI_DVI_VSO_ELINE_EVN, vs_eline_evn);   // 1
+            //vso_eline_evn_reg_wr_cnt ++;
+            aml_write_reg32(P_ENCI_DVI_VSO_END_EVN,   hs_begin);       // 1713
+        } else {
+            vs_eline_odd = vs_bline_odd + VSYNC_LINES;
+            aml_write_reg32(P_ENCI_DVI_VSO_ELINE_ODD, vs_eline_odd);
+            //vso_eline_odd_reg_wr_cnt ++;
+            aml_write_reg32(P_ENCI_DVI_VSO_END_ODD,   hs_begin);
+        }
+    }
+    // Program Vsync timing for odd field
+    if (de_v_end_even-1 + EOF_LINES + 1 >= LINES_F0) {
+        vs_bline_odd = de_v_end_even-1 + EOF_LINES + 1 - LINES_F0;
+        vs_eline_odd = vs_bline_odd + VSYNC_LINES;
+        aml_write_reg32(P_ENCI_DVI_VSO_BLINE_ODD, vs_bline_odd);
+        //vso_bline_odd_reg_wr_cnt ++;
+        aml_write_reg32(P_ENCI_DVI_VSO_ELINE_ODD, vs_eline_odd);
+        //vso_eline_odd_reg_wr_cnt ++;
+        vso_begin_odd   = modulo(hs_begin + (total_pixels_venc>>1), total_pixels_venc);
+        aml_write_reg32(P_ENCI_DVI_VSO_BEGIN_ODD, vso_begin_odd);
+        aml_write_reg32(P_ENCI_DVI_VSO_END_ODD,   vso_begin_odd);
+    } else {
+        vs_bline_evn = de_v_end_even-1 + EOF_LINES + 1; // 257-1 + 4 + 1 = 261
+        aml_write_reg32(P_ENCI_DVI_VSO_BLINE_EVN, vs_bline_evn); // 261
+        //vso_bline_evn_reg_wr_cnt ++;
+        vso_begin_evn   = modulo(hs_begin + (total_pixels_venc>>1), total_pixels_venc);   // (1713 + 1716/2) % 1716 = 855
+        aml_write_reg32(P_ENCI_DVI_VSO_BEGIN_EVN, vso_begin_evn);  // 855
+        if (vs_bline_evn + VSYNC_LINES >= LINES_F0) {
+            vs_eline_odd = vs_bline_evn + VSYNC_LINES - LINES_F0; // 261 + 3 - 262 = 2
+            aml_write_reg32(P_ENCI_DVI_VSO_ELINE_ODD, vs_eline_odd);   // 2
+            //vso_eline_odd_reg_wr_cnt ++;
+            aml_write_reg32(P_ENCI_DVI_VSO_END_ODD,   vso_begin_evn);  // 855
+        } else {
+            vs_eline_evn = vs_bline_evn + VSYNC_LINES;
+            aml_write_reg32(P_ENCI_DVI_VSO_ELINE_EVN, vs_eline_evn);
+            //vso_eline_evn_reg_wr_cnt ++;
+            aml_write_reg32(P_ENCI_DVI_VSO_END_EVN,   vso_begin_evn);
+        }
+    }
+
+    // Check if there are duplicate or missing timing settings
+    //if ((vso_bline_evn_reg_wr_cnt != 1) || (vso_bline_odd_reg_wr_cnt != 1) ||
+    //    (vso_eline_evn_reg_wr_cnt != 1) || (vso_eline_odd_reg_wr_cnt != 1)) {
+        //stimulus_print("[TEST.C] Error: Multiple or missing timing settings on reg ENCI_DVI_VSO_B(E)LINE_EVN(ODD)!\n");
+        //stimulus_finish_fail(1);
+    //}
+
+    // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
+    aml_write_reg32(P_VPU_HDMI_SETTING, (0                                 << 0) | // [    0] src_sel_enci
+                         (0                                 << 1) | // [    1] src_sel_encp
+                         (0                                 << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
+                         (0                                 << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
+                         (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
+                         (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                                                                    //                          0=output CrYCb(BRG);
+                                                                    //                          1=output YCbCr(RGB);
+                                                                    //                          2=output YCrCb(RBG);
+                                                                    //                          3=output CbCrY(GBR);
+                                                                    //                          4=output CbYCr(GRB);
+                                                                    //                          5=output CrCbY(BGR);
+                                                                    //                          6,7=Rsrv.
+                         (1                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+                         (1                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
+    );
+    aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 0, 1);  // [    0] src_sel_enci: Enable ENCI output to HDMI
+
+}    
+
+static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
+{
+    unsigned long VFIFO2VD_TO_HDMI_LATENCY = 2; // Annie 01Sep2011: Change value from 3 to 2, due to video encoder path delay change.
+    unsigned long TOTAL_PIXELS, PIXEL_REPEAT_HDMI, PIXEL_REPEAT_VENC, ACTIVE_PIXELS;
+    unsigned FRONT_PORCH, HSYNC_PIXELS, ACTIVE_LINES, INTERLACE_MODE, TOTAL_LINES, SOF_LINES, VSYNC_LINES;
+    unsigned LINES_F0, LINES_F1,BACK_PORCH, EOF_LINES, TOTAL_FRAMES;
+
+    unsigned long total_pixels_venc ;
+    unsigned long active_pixels_venc;
+    unsigned long front_porch_venc  ;
+    unsigned long hsync_pixels_venc ;
+
+    unsigned long de_h_begin, de_h_end;
+    unsigned long de_v_begin_even, de_v_end_even, de_v_begin_odd, de_v_end_odd;
+    unsigned long hs_begin, hs_end;
+    unsigned long vs_adjust;
+    unsigned long vs_bline_evn, vs_eline_evn, vs_bline_odd, vs_eline_odd;
+    unsigned long vso_begin_evn, vso_begin_odd;
+
+    if((param->VIC==HDMI_480p60)||(param->VIC==HDMI_480p60_16x9)){
+         INTERLACE_MODE     = 0;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 0;                   
+         ACTIVE_PIXELS      = (720*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES       = (480/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 525;                 
+         LINES_F1           = 525;                 
+         FRONT_PORCH        = 16;                  
+         HSYNC_PIXELS       = 62;                  
+         BACK_PORCH         = 60;                  
+         EOF_LINES          = 9;                   
+         VSYNC_LINES        = 6;                   
+         SOF_LINES          = 30;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    else if((param->VIC==HDMI_576p50)||(param->VIC==HDMI_576p50_16x9)){
+         INTERLACE_MODE     = 0;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 0;                   
+         ACTIVE_PIXELS      = (720*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES       = (576/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 625;                 
+         LINES_F1           = 625;                 
+         FRONT_PORCH        = 12;                  
+         HSYNC_PIXELS       = 64;                  
+         BACK_PORCH         = 68;                  
+         EOF_LINES          = 5;                   
+         VSYNC_LINES        = 5;                   
+         SOF_LINES          = 39;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    else if(param->VIC==HDMI_720p60){
+         INTERLACE_MODE     = 0;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 0;                   
+         ACTIVE_PIXELS      = (1280*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES       = (720/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 750;                 
+         LINES_F1           = 750;                 
+         FRONT_PORCH        = 110;                  
+         HSYNC_PIXELS       = 40;                  
+         BACK_PORCH         = 220;                  
+         EOF_LINES          = 5;                   
+         VSYNC_LINES        = 5;                   
+         SOF_LINES          = 20;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    else if(param->VIC==HDMI_720p50){
+         INTERLACE_MODE     = 0;                   
+         PIXEL_REPEAT_VENC  = 1;                   
+         PIXEL_REPEAT_HDMI  = 0;                   
+         ACTIVE_PIXELS      = (1280*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES       = (720/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0           = 750;                 
+         LINES_F1           = 750;                 
+         FRONT_PORCH        = 440;                  
+         HSYNC_PIXELS       = 40;                  
+         BACK_PORCH         = 220;                  
+         EOF_LINES          = 5;                   
+         VSYNC_LINES        = 5;                   
+         SOF_LINES          = 20;                  
+         TOTAL_FRAMES       = 4;                   
+    }
+    else if(param->VIC==HDMI_1080p50){
+         INTERLACE_MODE      =0;              
+         PIXEL_REPEAT_VENC   =0;              
+         PIXEL_REPEAT_HDMI   =0;              
+         ACTIVE_PIXELS       =(1920*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES        =(1080/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0            =1125;           
+         LINES_F1            =1125;           
+         FRONT_PORCH         =528;             
+         HSYNC_PIXELS        =44;             
+         BACK_PORCH          =148;            
+         EOF_LINES           =4;              
+         VSYNC_LINES         =5;              
+         SOF_LINES           =36;             
+         TOTAL_FRAMES        =4;              
+    }
+    else if(param->VIC==HDMI_1080p24){//1080p24 support
+         INTERLACE_MODE      =0;              
+         PIXEL_REPEAT_VENC   =0;              
+         PIXEL_REPEAT_HDMI   =0;              
+         ACTIVE_PIXELS       =(1920*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES        =(1080/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0            =1125;           
+         LINES_F1            =1125;           
+         FRONT_PORCH         =638;             
+         HSYNC_PIXELS        =44;             
+         BACK_PORCH          =148;            
+         EOF_LINES           =4;              
+         VSYNC_LINES         =5;              
+         SOF_LINES           =36;             
+         TOTAL_FRAMES        =4;    
+    }
+    else{ //HDMI_1080p60, HDMI_1080p30
+         INTERLACE_MODE      =0;              
+         PIXEL_REPEAT_VENC   =0;              
+         PIXEL_REPEAT_HDMI   =0;              
+         ACTIVE_PIXELS       =(1920*(1+PIXEL_REPEAT_HDMI)); // Number of active pixels per line.
+         ACTIVE_LINES        =(1080/(1+INTERLACE_MODE));    // Number of active lines per field.
+         LINES_F0            =1125;           
+         LINES_F1            =1125;           
+         FRONT_PORCH         =88;             
+         HSYNC_PIXELS        =44;             
+         BACK_PORCH          =148;            
+         EOF_LINES           =4;              
+         VSYNC_LINES         =5;              
+         SOF_LINES           =36;             
+         TOTAL_FRAMES        =4;              
+    }
+
+    TOTAL_PIXELS       = (FRONT_PORCH+HSYNC_PIXELS+BACK_PORCH+ACTIVE_PIXELS); // Number of total pixels per line.
+    TOTAL_LINES        = (LINES_F0+(LINES_F1*INTERLACE_MODE));                // Number of total lines per frame.
+
+    total_pixels_venc = (TOTAL_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 858 / 1 * 2 = 1716
+    active_pixels_venc= (ACTIVE_PIXELS / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 720 / 1 * 2 = 1440
+    front_porch_venc  = (FRONT_PORCH   / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 16   / 1 * 2 = 32
+    hsync_pixels_venc = (HSYNC_PIXELS  / (1+PIXEL_REPEAT_HDMI)) * (1+PIXEL_REPEAT_VENC); // 62   / 1 * 2 = 124
+
+    aml_write_reg32(P_ENCP_VIDEO_MODE,aml_read_reg32(P_ENCP_VIDEO_MODE)|(1<<14)); // cfg_de_v = 1
+    // Program DE timing
+    de_h_begin = modulo(aml_read_reg32(P_ENCP_VIDEO_HAVON_BEGIN) + VFIFO2VD_TO_HDMI_LATENCY,  total_pixels_venc); // (217 + 3) % 1716 = 220
+    de_h_end   = modulo(de_h_begin + active_pixels_venc,                        total_pixels_venc); // (220 + 1440) % 1716 = 1660
+    aml_write_reg32(P_ENCP_DE_H_BEGIN, de_h_begin);    // 220
+    aml_write_reg32(P_ENCP_DE_H_END,   de_h_end);      // 1660
+    // Program DE timing for even field
+    de_v_begin_even = aml_read_reg32(P_ENCP_VIDEO_VAVON_BLINE);       // 42
+    de_v_end_even   = de_v_begin_even + ACTIVE_LINES;   // 42 + 480 = 522
+    aml_write_reg32(P_ENCP_DE_V_BEGIN_EVEN,de_v_begin_even);   // 42
+    aml_write_reg32(P_ENCP_DE_V_END_EVEN,  de_v_end_even);     // 522
+    // Program DE timing for odd field if needed
+    if (INTERLACE_MODE) {
+        // Calculate de_v_begin_odd according to enc480p_timing.v:
+        //wire[10:0]    cfg_ofld_vavon_bline    = {{7{ofld_vavon_ofst1 [3]}},ofld_vavon_ofst1 [3:0]} + cfg_video_vavon_bline    + ofld_line;
+        de_v_begin_odd  = to_signed((aml_read_reg32(P_ENCP_VIDEO_OFLD_VOAV_OFST) & 0xf0)>>4) + de_v_begin_even + (TOTAL_LINES-1)/2;
+        de_v_end_odd    = de_v_begin_odd + ACTIVE_LINES;
+        aml_write_reg32(P_ENCP_DE_V_BEGIN_ODD, de_v_begin_odd);
+        aml_write_reg32(P_ENCP_DE_V_END_ODD,   de_v_end_odd);
+    }
+
+    // Program Hsync timing
+    if (de_h_end + front_porch_venc >= total_pixels_venc) {
+        hs_begin    = de_h_end + front_porch_venc - total_pixels_venc;
+        vs_adjust   = 1;
+    } else {
+        hs_begin    = de_h_end + front_porch_venc; // 1660 + 32 = 1692
+        vs_adjust   = 0;
+    }
+    hs_end  = modulo(hs_begin + hsync_pixels_venc,   total_pixels_venc); // (1692 + 124) % 1716 = 100
+    aml_write_reg32(P_ENCP_DVI_HSO_BEGIN,  hs_begin);  // 1692
+    aml_write_reg32(P_ENCP_DVI_HSO_END,    hs_end);    // 100
+    
+    // Program Vsync timing for even field
+    if (de_v_begin_even >= SOF_LINES + VSYNC_LINES + (1-vs_adjust)) {
+        vs_bline_evn = de_v_begin_even - SOF_LINES - VSYNC_LINES - (1-vs_adjust); // 42 - 30 - 6 - 1 = 5
+    } else {
+        vs_bline_evn = TOTAL_LINES + de_v_begin_even - SOF_LINES - VSYNC_LINES - (1-vs_adjust);
+    }
+    vs_eline_evn = modulo(vs_bline_evn + VSYNC_LINES, TOTAL_LINES); // (5 + 6) % 525 = 11
+    aml_write_reg32(P_ENCP_DVI_VSO_BLINE_EVN, vs_bline_evn);   // 5
+    aml_write_reg32(P_ENCP_DVI_VSO_ELINE_EVN, vs_eline_evn);   // 11
+    vso_begin_evn = hs_begin; // 1692
+    aml_write_reg32(P_ENCP_DVI_VSO_BEGIN_EVN, vso_begin_evn);  // 1692
+    aml_write_reg32(P_ENCP_DVI_VSO_END_EVN,   vso_begin_evn);  // 1692
+    // Program Vsync timing for odd field if needed
+    if (INTERLACE_MODE) {
+        vs_bline_odd = de_v_begin_odd-1 - SOF_LINES - VSYNC_LINES;
+        vs_eline_odd = de_v_begin_odd-1 - SOF_LINES;
+        vso_begin_odd   = modulo(hs_begin + (total_pixels_venc>>1), total_pixels_venc);
+        aml_write_reg32(P_ENCP_DVI_VSO_BLINE_ODD, vs_bline_odd);
+        aml_write_reg32(P_ENCP_DVI_VSO_ELINE_ODD, vs_eline_odd);
+        aml_write_reg32(P_ENCP_DVI_VSO_BEGIN_ODD, vso_begin_odd);
+        aml_write_reg32(P_ENCP_DVI_VSO_END_ODD,   vso_begin_odd);
+    }
+    // Annie 01Sep2011: Remove the following line as register VENC_DVI_SETTING_MORE is no long valid, use VPU_HDMI_SETTING instead.
+    //Wr(VENC_DVI_SETTING_MORE, (TX_INPUT_COLOR_FORMAT==0)? 1 : 0); // [0] 0=Map data pins from Venc to Hdmi Tx as CrYCb mode;
+
+    switch(param->VIC)
+    {
+        case HDMI_480p60:
+        case HDMI_480p60_16x9:
+        case HDMI_576p50:
+        case HDMI_576p50_16x9:
+//Note: Hsync & Vsync polarity should be negative.
+//Refer to HDMI CTS 1.4A Page 169
+            // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
+            aml_write_reg32(P_VPU_HDMI_SETTING, (0                                 << 0) | // [    0] src_sel_enci
+                                 (0                                 << 1) | // [    1] src_sel_encp
+                                 (0                                 << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
+                                 (0                                 << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
+                                 (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
+                                 (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                                                                            //                          0=output CrYCb(BRG);
+                                                                            //                          1=output YCbCr(RGB);
+                                                                            //                          2=output YCrCb(RBG);
+                                                                            //                          3=output CbCrY(GBR);
+                                                                            //                          4=output CbYCr(GRB);
+                                                                            //                          5=output CrCbY(BGR);
+                                                                            //                          6,7=Rsrv.
+                                 (1                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+                                 (0                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
+            );
+            break;
+        case HDMI_720p60:
+        case HDMI_720p50:
+            // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
+            aml_write_reg32(P_VPU_HDMI_SETTING, (0                                 << 0) | // [    0] src_sel_enci
+                                 (0                                 << 1) | // [    1] src_sel_encp
+                                 (HSYNC_POLARITY                    << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
+                                 (VSYNC_POLARITY                    << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
+                                 (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
+                                 (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                                                                            //                          0=output CrYCb(BRG);
+                                                                            //                          1=output YCbCr(RGB);
+                                                                            //                          2=output YCrCb(RBG);
+                                                                            //                          3=output CbCrY(GBR);
+                                                                            //                          4=output CbYCr(GRB);
+                                                                            //                          5=output CrCbY(BGR);
+                                                                            //                          6,7=Rsrv.
+#ifdef DOUBLE_CLK_720P_1080I
+                                 (0                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+#else
+                                 (1                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+#endif                             
+                                 (0                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
+            );
+            break;
+        default:
+            // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
+            aml_write_reg32(P_VPU_HDMI_SETTING, (0                                 << 0) | // [    0] src_sel_enci
+                                 (0                                 << 1) | // [    1] src_sel_encp
+                                 (HSYNC_POLARITY                    << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
+                                 (VSYNC_POLARITY                    << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
+                                 (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
+                                 (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                                                                            //                          0=output CrYCb(BRG);
+                                                                            //                          1=output YCbCr(RGB);
+                                                                            //                          2=output YCrCb(RBG);
+                                                                            //                          3=output CbCrY(GBR);
+                                                                            //                          4=output CbYCr(GRB);
+                                                                            //                          5=output CrCbY(BGR);
+                                                                            //                          6,7=Rsrv.
+                                 (0                                 << 8) | // [11: 8] wr_rate. 0=A write every clk1; 1=A write every 2 clk1; ...; 15=A write every 16 clk1.
+                                 (0                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
+            );
+    }
+
+    // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
+    aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 1, 1);  // [    1] src_sel_encp: Enable ENCP output to HDMI
+}    
+
+/*
+hdmi on/off
+*/
+static int is_hpd_muxed(void)
+{
+    int ret;
+    ret = !!(aml_read_reg32(P_PERIPHS_PIN_MUX_1)&(1<<26));
+    return ret; 
+}    
+
+static void mux_hpd(void)
+{
+    aml_write_reg32(P_PERIPHS_PIN_MUX_1, aml_read_reg32(P_PERIPHS_PIN_MUX_1)|(1 << 26));
+}
+
+static void unmux_hpd(void)
+{
+    aml_write_reg32(P_PERIPHS_PIN_MUX_1, aml_read_reg32(P_PERIPHS_PIN_MUX_1)&~(1 << 26));
+    aml_write_reg32(P_PREG_PAD_GPIO3_EN_N, aml_read_reg32(P_PREG_PAD_GPIO3_EN_N) | (1 << 19)); //GPIOH_0 as input
+}
+
+extern int read_hpd_gpio(void);
+int read_hpd_gpio(void)
+{
+    int level;
+
+    level = !!(aml_read_reg32(P_PREG_PAD_GPIO3_I)&(1<<19)); //read GPIOH_0
+    return level;
+}
+EXPORT_SYMBOL(read_hpd_gpio);
+
+#if 0
+static unsigned long clk81_rate = 100000000;
+
+static void clk81_set(void)
+{
+    struct clk *clk_tmp;
+
+    clk_tmp = clk_get_sys("clk81", NULL);
+    if (clk_tmp)
+    {
+        clk81_rate = clk_get_rate(clk_tmp);
+        clk_set_rate(clk_tmp, 168000000);
+        CLEAR_AOBUS_REG_MASK(AO_UART_CONTROL, (1 << 19) | 0xFFF);
+        WRITE_AOBUS_REG_BITS(AO_UART_CONTROL, ((168000000 / (115200 * 4)) - 1) & 0xfff, 0, 12);
+    }
+    msleep(2);  //Waiting some time
+    //printk("%s clk81_rate: %d\n", __FUNCTION__, clk81_rate);
+}
+
+static void clk81_resume(void)
+{
+    struct clk *clk_tmp;
+    
+    clk_tmp = clk_get_sys("clk81", NULL);
+    if (clk_tmp)
+    {
+        clk_set_rate(clk_tmp, clk81_rate);
+        CLEAR_AOBUS_REG_MASK(AO_UART_CONTROL, (1 << 19) | 0xFFF);
+        WRITE_AOBUS_REG_BITS(AO_UART_CONTROL, ((clk81_rate / (115200 * 4)) - 1) & 0xfff, 0, 12);
+    }
+    msleep(2);  //Waiting some time
+    //printk("%s clk81_rate: %d\n", __FUNCTION__, clk81_rate);
+}
+#endif
+
+static void digital_clk_off(unsigned char flag)
+{
+//    clk81_resume();
+    if(flag&1){
+//#ifdef AML_A3
+    /* off hdmi audio clock */
+//        hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1,  hdmi_rd_reg(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1)&(~(1<<13))); //
+//        hdmi_wr_reg(TX_AUDIO_FORMAT, hdmi_rd_reg(TX_AUDIO_FORMAT)|(1<<7));
+//        hdmi_wr_reg(TX_AUDIO_I2S, hdmi_rd_reg(TX_AUDIO_I2S)|(1<<1));
+//#endif    
+    }
+
+    if(flag&2){
+        /* off hdmi pixel clock */
+//        Wr(HHI_GCLK_MPEG2, Rd(HHI_GCLK_MPEG2)&(~(1<<4))); //disable pixel clock, set cbus reg HHI_GCLK_MPEG2 bit [4] = 0
+        aml_write_reg32(P_HHI_GCLK_OTHER, aml_read_reg32(P_HHI_GCLK_OTHER)&(~(1<<17))); //disable VCLK1_HDMI GATE, set cbus reg HHI_GCLK_OTHER bit [17] = 0
+        aml_write_reg32(P_VENC_DVI_SETTING, (aml_read_reg32(P_VENC_DVI_SETTING)&(~(7<<4)))|(5<<4)); //set cbus reg VENC_DVI_SETTING bit[6:4] = 0x5
+    // Second turn off gate.
+        aml_write_reg32(P_HHI_GCLK_MPEG2, aml_read_reg32(P_HHI_GCLK_MPEG2) & (~(1<<4)));     //Disable HDMI PCLK
+    }
+    if(flag&4){
+        /* off hdmi sys clock */
+        aml_write_reg32(P_HHI_HDMI_CLK_CNTL, aml_read_reg32(P_HHI_HDMI_CLK_CNTL)&(~(1<<8))); // off hdmi sys clock gate
+    }
+}
+
+static void digital_clk_on(unsigned char flag)
+{
+//    clk81_set();
+    if(flag&4){
+        /* on hdmi sys clock */
+        // -----------------------------------------
+        // HDMI (90Mhz)
+        // -----------------------------------------
+        //         .clk_div            ( hi_hdmi_clk_cntl[6:0] ),
+        //         .clk_en             ( hi_hdmi_clk_cntl[8]   ),
+        //         .clk_sel            ( hi_hdmi_clk_cntl[11:9]),
+        aml_set_reg32_bits(P_HHI_HDMI_CLK_CNTL, 0, 0, 7);    // Divide the "other" PLL output by 1
+        aml_set_reg32_bits(P_HHI_HDMI_CLK_CNTL, 0, 9, 3);    // select "XTAL" PLL
+        aml_set_reg32_bits(P_HHI_HDMI_CLK_CNTL, 1, 8, 1);    // Enable gated clock
+//        Wr( HHI_HDMI_CLK_CNTL,  ((2 << 9)  |   // select "misc" PLL
+//                                 (1 << 8)  |   // Enable gated clock
+//                                 (5 << 0)) );  // Divide the "other" PLL output by 6
+    }
+    if(flag&2){
+        /* on hdmi pixel clock */
+        aml_write_reg32(P_HHI_GCLK_MPEG2, aml_read_reg32(P_HHI_GCLK_MPEG2) | (1<<4));     //Enable HDMI PCLK
+//        Wr(HHI_GCLK_MPEG2, Rd(HHI_GCLK_MPEG2)|(1<<4)); //enable pixel clock, set cbus reg HHI_GCLK_MPEG2 bit [4] = 1
+        aml_write_reg32(P_HHI_GCLK_OTHER, aml_read_reg32(P_HHI_GCLK_OTHER)|(1<<17)); //enable VCLK1_HDMI GATE, set cbus reg HHI_GCLK_OTHER bit [17] = 1
+    }
+    if(flag&1){
+    }  
+}
+
+static void phy_pll_off(void)
+{
+    hdmi_phy_suspend();
+}
+
+/**/
+void hdmi_hw_set_powermode(hdmitx_dev_t* hdmitx_device)
+{
+    int vic = hdmitx_device->cur_VIC;
+
+    switch(vic) {
+    case HDMI_480i60:
+    case HDMI_480i60_16x9:
+    case HDMI_576p50:
+    case HDMI_576p50_16x9:
+    case HDMI_576i50:
+    case HDMI_576i50_16x9:
+    case HDMI_480p60:
+    case HDMI_480p60_16x9:
+    case HDMI_720p50:
+    case HDMI_720p60:
+    case HDMI_1080i50:
+    case HDMI_1080i60:
+    case HDMI_1080p24://1080p24 support
+    case HDMI_1080p50:
+    case HDMI_1080p60:
+    default:
+        aml_write_reg32(P_HHI_HDMI_PHY_CNTL0, 0x08c38d0b);
+    }
+    aml_write_reg32(P_HHI_HDMI_PHY_CNTL1, 2);
+}
+
+void hdmi_hw_init(hdmitx_dev_t* hdmitx_device)
+{
+    unsigned int tmp_add_data;
+    HDMI_Video_Codes_t vic;
+    
+    digital_clk_on(7);
+
+    aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0x00, 8, 8);    //disable HDMI memory PD  TODO: set in suspend/resume
+
+    aml_write_reg32(P_HHI_HDMI_AFC_CNTL, aml_read_reg32(P_HHI_HDMI_AFC_CNTL) | 0x3);
+
+    vic = hdmitx_device->HWOp.GetState(hdmitx_device, STAT_VIDEO_VIC, 0);
+    if(vic != HDMI_Unkown) {
+        hdmi_print(IMP, SYS "ALREADY init VIC = %d\n", vic);
+        hdmitx_device->cur_VIC = vic;
+        return;
+    }
+    hdmi_phy_suspend();
+    //todo
+    aml_set_reg32_bits(P_PERIPHS_PIN_MUX_1, 0xf, 23, 4); //Enable reg1[23:24]:HDMI SDA(5v)/SCL(5V)
+#ifdef CONFIG_PANEL_IT6681
+    aml_set_reg32_bits(P_PERIPHS_PIN_MUX_1, 0, 23, 3); //disable reg1[23:25]:HDMI CEC/SCL(5v)/SDA(5V)
+#endif
+    hdmi_print(IMP, SYS "hw init\n");
+
+    hdmi_wr_reg(0x017, 0x1d);   //1d for power-up Band-gap and main-bias ,00 is power down 
+    if(serial_reg_val<0x20){
+        hdmi_wr_reg(0x018, 0x24);
+    }
+    else{
+        hdmi_wr_reg(0x018, serial_reg_val);   //Serializer Internal clock setting ,please fix to vaue 24 ,other setting is only for debug  
+    }
+    hdmi_wr_reg(0x01a, 0xfb);   //bit[2:0]=011 ,CK channel output TMDS CLOCK ,bit[2:0]=101 ,ck channel output PHYCLCK 
+
+    hdmi_hw_set_powermode(hdmitx_device);
+
+    hdmi_wr_reg(0x0F7, 0x0F);   // Termination resistor calib value
+
+    // --------------------------------------------------------
+    // Program core_pin_mux to enable HDMI pins
+    // --------------------------------------------------------
+    //wire            pm_hdmi_cec_en              = pin_mux_reg0[2];
+    //wire            pm_hdmi_hpd_5v_en           = pin_mux_reg0[1];
+    //wire            pm_hdmi_i2c_5v_en           = pin_mux_reg0[0];
+
+    // Enable these interrupts: [2] tx_edit_int_rise [1] tx_hpd_int_fall [0] tx_hpd_int_rise
+    hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_MASKN, 0x0);
+    // HPD glitch filter
+    hdmi_wr_reg(TX_HDCP_HPD_FILTER_L, 0xa0);
+    hdmi_wr_reg(TX_HDCP_HPD_FILTER_H, 0xa0);
+
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x90); //bit5,6 is converted
+    delay_us(10);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+    delay_us(10);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
+    delay_us(10);
+
+    /**/
+
+    // Enable software controlled DDC transaction
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7]   = 1'b0 ;  // forced_sys_trigger
+    //tmp_add_data[6]   = 1'b0 ;  // sys_trigger_config
+    //tmp_add_data[5]   = 1'b0 ;  // mem_acc_seq_mode
+    //tmp_add_data[4]   = 1'b0 ;  // mem_acc_seq_start
+    //tmp_add_data[3]   = 1'b1 ;  // forced_mem_copy_done
+    //tmp_add_data[2]   = 1'b1 ;  // mem_copy_done_config
+    //tmp_add_data[1]   = 1'b1 ;  // sys_trigger_config_semi_manu
+    //tmp_add_data[0]   = 1'b0 ;  // Rsrv
+    hdmi_wr_reg(TX_HDCP_EDID_CONFIG, 0x0c); //// for hdcp, can not use 0x0e
+    hdmi_wr_reg(TX_CORE_EDID_CONFIG_MORE, (1 << 0));    // [1]: keep_edid_error
+                                                        // [0]: sys_trigger_config_semi_manu
+                                                        
+    hdmi_wr_reg(TX_PACKET_ALLOC_ACTIVE_1, 0);
+    hdmi_wr_reg(TX_PACKET_CONTROL_2, 2);
+    
+    hdmi_wr_reg(TX_HDCP_CONFIG0,      1<<3);  //set TX rom_encrypt_off=1
+    hdmi_wr_reg(TX_HDCP_MEM_CONFIG,   0<<3);  //set TX read_decrypt=0
+    hdmi_wr_reg(TX_HDCP_ENCRYPT_BYTE, 0);     //set TX encrypt_byte=0x00
+
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7] = 1'b0;       // Force packet timing
+    //tmp_add_data[6] = 1'b0;       // PACKET ALLOC MODE
+    //tmp_add_data[5:0] = 6'd47 ;   // PACKET_START_LATENCY
+    //tmp_add_data = 47;
+    tmp_add_data = 58;
+    hdmi_wr_reg(TX_PACKET_CONTROL_1, tmp_add_data); //this register should be set to ensure the first hdcp succeed
+
+    //tmp_add_data[7] = 1'b0;      // cp_desired
+    //tmp_add_data[6] = 1'b0;      // ess_config
+    //tmp_add_data[5] = 1'b0;      // set_avmute
+    //tmp_add_data[4] = 1'b1;      // clear_avmute
+    //tmp_add_data[3] = 1'b0;      // hdcp_1_1
+    //tmp_add_data[2] = 1'b0;      // Vsync/Hsync forced_polarity_select
+    //tmp_add_data[1] = 1'b0;      // forced_vsync_polarity
+    //tmp_add_data[0] = 1'b0;      // forced_hsync_polarity
+    //tmp_add_data = 0x10;
+    tmp_add_data = 0x0; //rain
+    hdmi_wr_reg(TX_HDCP_MODE, tmp_add_data);
+    //config_hdmi(1);
+
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7:0]   = 0xa ; // time_divider[7:0] for DDC I2C bus clock
+    //tmp_add_data = 0xa; //800k
+    //tmp_add_data = 0x3f; //190k
+    tmp_add_data = 0x18 - 1; //50k     // hdmi system clock change to XTAL 24MHz
+    hdmi_wr_reg(TX_HDCP_CONFIG3, tmp_add_data);
+
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7]   = 8'b1 ;  //cp_desired 
+    //tmp_add_data[6]   = 8'b1 ;  //ess_config 
+    //tmp_add_data[5]   = 8'b0 ;  //set_avmute 
+    //tmp_add_data[4]   = 8'b0 ;  //clear_avmute 
+    //tmp_add_data[3]   = 8'b1 ;  //hdcp_1_1 
+    //tmp_add_data[2]   = 8'b0 ;  //forced_polarity 
+    //tmp_add_data[1]   = 8'b0 ;  //forced_vsync_polarity 
+    //tmp_add_data[0]   = 8'b0 ;  //forced_hsync_polarity
+    tmp_add_data = 0x40;
+    hdmi_wr_reg(TX_HDCP_MODE, tmp_add_data);
+    
+    hdmi_wr_reg(TX_AUDIO_CONTROL_MORE, 1);
+
+    hdmi_hw_set_powermode(hdmitx_device);
+
+    // --------------------------------------------------------
+    // Release TX out of reset
+    // --------------------------------------------------------
+    //new reset sequence, 2010Sep09, rain
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 1<<6); // Release resets all other TX digital clock domain, except tmds_clk
+    delay_us(10);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00); // Final release reset on tmds_clk domain
+    delay_us(10);        
+
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x68);        
+    delay_us(10);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);        
+    delay_us(10);
+}    
+
+#ifdef CONFIG_ARCH_MESON6
+// TODO, need test in m8
+// When 1080p50hz output, we shall manually configure
+// bolow register to get stable Video Timing.
+static void hdmi_reconfig_packet_setting(void)
+{
+    hdmi_wr_reg(TX_PACKET_ALLOC_ACTIVE_1, 0x01);
+    hdmi_wr_reg(TX_PACKET_ALLOC_ACTIVE_2, 0x12);
+    hdmi_wr_reg(TX_PACKET_ALLOC_EOF_1, 0x10);
+    hdmi_wr_reg(TX_PACKET_ALLOC_EOF_2, 0x12);
+    hdmi_wr_reg(TX_PACKET_ALLOC_SOF_1, 0xb6);
+    hdmi_wr_reg(TX_PACKET_ALLOC_SOF_2, 0x11);
+    hdmi_wr_reg(TX_PACKET_CONTROL_1, (hdmi_rd_reg(TX_PACKET_CONTROL_1)) | (1 << 7));    // bit[7]: forced_packet_timing
+}
+#endif
+
+static void hdmi_hw_reset(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t *param)
+{
+    unsigned int tmp_add_data;
+    unsigned long TX_OUTPUT_COLOR_FORMAT;
+
+    hdmi_print(IMP, SYS "hw reset\n");
+    
+    digital_clk_on(7);
+
+    if(param->color==COLOR_SPACE_YUV444){
+        TX_OUTPUT_COLOR_FORMAT=1;
+    }
+    else if(param->color==COLOR_SPACE_YUV422){
+        TX_OUTPUT_COLOR_FORMAT=3;
+    }
+    else{
+        TX_OUTPUT_COLOR_FORMAT=0;
+    }
+
+    if(delay_flag&2)
+        delay_us(1000*100);
+    //printk("delay 100ms\n");
+
+    aml_write_reg32(P_HHI_HDMI_AFC_CNTL, aml_read_reg32(P_HHI_HDMI_AFC_CNTL) | 0x3);
+
+    hdmi_wr_reg(0x017, 0x1d);   //1d for power-up Band-gap and main-bias ,00 is power down 
+    if(new_reset_sequence_flag==0){
+        if(serial_reg_val==0){
+            if((param->VIC==HDMI_1080p30)||(param->VIC==HDMI_720p60)||(param->VIC==HDMI_1080i60)
+                ||(param->VIC==HDMI_1080p24)){
+                hdmi_wr_reg(0x018, 0x22);   
+            }
+            else{
+                hdmi_wr_reg(0x018, 0x24);   
+            }
+        }
+        else if(serial_reg_val==1){
+            if((param->VIC==HDMI_480p60)||(param->VIC==HDMI_480p60_16x9)
+                ||(param->VIC==HDMI_576p50)||(param->VIC==HDMI_576p50_16x9)
+                ||(param->VIC==HDMI_480i60)||(param->VIC==HDMI_480i60_16x9)
+                ||(param->VIC==HDMI_576i50)||(param->VIC==HDMI_576i50_16x9)){
+                hdmi_wr_reg(0x018, 0x24);   
+            }
+            else{
+                hdmi_wr_reg(0x018, 0x22);   
+            }
+        }
+        else{
+            hdmi_wr_reg(0x018, serial_reg_val);
+        }
+        if((param->VIC==HDMI_1080p60)&&(param->color_depth==COLOR_30BIT)&&(hdmi_rd_reg(0x018)==0x22)){
+            hdmi_wr_reg(0x018,0x12);
+        }
+    }
+    hdmi_wr_reg(0x01a, 0xfb);   //bit[2:0]=011 ,CK channel output TMDS CLOCK ,bit[2:0]=101 ,ck channel output PHYCLCK 
+
+    hdmi_hw_set_powermode(hdmitx_device);
+
+    hdmi_wr_reg(0x0F7, 0x0F);   // Termination resistor calib value
+
+    // delay 1000uS, then check HPLL_LOCK
+    delay_us(1000);
+    //while ( (Rd(HHI_VID_PLL_CNTL3) & (1<<31)) != (1<<31) );
+ 
+//////////////////////////////reset    
+    if(new_reset_sequence_flag){
+
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x90);
+        delay_us(10);
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+        delay_us(10);
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
+        delay_us(10);
+    }
+    else{
+        // Keep TX (except register I/F) in reset, while programming the registers:
+        tmp_add_data  = 0;
+        tmp_add_data |= 1 << 7; // tx_pixel_rstn
+        tmp_add_data |= 1 << 6; // tx_tmds_rstn
+        tmp_add_data |= 1 << 5; // tx_audio_master_rstn
+        tmp_add_data |= 1 << 4; // tx_audio_sample_rstn
+        tmp_add_data |= 1 << 3; // tx_i2s_reset_rstn
+        tmp_add_data |= 1 << 2; // tx_dig_reset_n_ch2
+        tmp_add_data |= 1 << 1; // tx_dig_reset_n_ch1
+        tmp_add_data |= 1 << 0; // tx_dig_reset_n_ch0
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, tmp_add_data);
+    
+        tmp_add_data  = 0;
+        tmp_add_data |= 1 << 7; // HDMI_CH3_RST_IN
+        tmp_add_data |= 1 << 6; // HDMI_CH2_RST_IN
+        tmp_add_data |= 1 << 5; // HDMI_CH1_RST_IN
+        tmp_add_data |= 1 << 4; // HDMI_CH0_RST_IN
+        tmp_add_data |= 1 << 3; // HDMI_SR_RST
+        tmp_add_data |= 1 << 0; // tx_dig_reset_n_ch3
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, tmp_add_data);
+    }
+    // Enable software controlled DDC transaction
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7]   = 1'b0 ;  // forced_sys_trigger
+    //tmp_add_data[6]   = 1'b0 ;  // sys_trigger_config
+    //tmp_add_data[5]   = 1'b0 ;  // mem_acc_seq_mode
+    //tmp_add_data[4]   = 1'b0 ;  // mem_acc_seq_start
+    //tmp_add_data[3]   = 1'b1 ;  // forced_mem_copy_done
+    //tmp_add_data[2]   = 1'b1 ;  // mem_copy_done_config
+    //tmp_add_data[1]   = 1'b1 ;  // sys_trigger_config_semi_manu
+    //tmp_add_data[0]   = 1'b0 ;  // Rsrv
+
+    tmp_add_data = 0x0c; // for hdcp, can not use 0x0e 
+    hdmi_wr_reg(TX_HDCP_EDID_CONFIG, tmp_add_data);
+    
+    hdmi_wr_reg(TX_HDCP_CONFIG0,      0x3<<3);  //set TX rom_encrypt_off=1
+    hdmi_wr_reg(TX_HDCP_MEM_CONFIG,   0<<3);  //set TX read_decrypt=0
+    hdmi_wr_reg(TX_HDCP_ENCRYPT_BYTE, 0);     //set TX encrypt_byte=0x00
+
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7] = 1'b0;      // Force DTV timing (Auto)
+    //tmp_add_data[6] = 1'b0;      // Force Video Scan, only if [7]is set
+    //tmp_add_data[5] = 1'b0 ;     // Force Video field, only if [7]is set
+    //tmp_add_data[4:0] = 5'b00 ;  // Rsrv
+    if(hdmitx_device->cur_VIC == 39)
+        tmp_add_data = 0;
+    else
+        tmp_add_data = (1<<4);
+    hdmi_wr_reg(TX_VIDEO_DTV_TIMING, tmp_add_data);
+    
+    tmp_add_data  = 0;
+    tmp_add_data |= 0                       << 7; // [7]   forced_default_phase
+    tmp_add_data |= 0                       << 2; // [6:2] Rsrv
+    tmp_add_data |= param->color_depth      << 0; // [1:0] Color_depth:0=24-bit pixel; 1=30-bit pixel; 2=36-bit pixel; 3=48-bit pixel
+    hdmi_wr_reg(TX_VIDEO_DTV_MODE, tmp_add_data); // 0x00
+    
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7] = 1'b0;       // Force packet timing
+    //tmp_add_data[6] = 1'b0;       // PACKET ALLOC MODE
+    //tmp_add_data[5:0] = 6'd47 ;   // PACKET_START_LATENCY
+    //tmp_add_data = 47;
+    tmp_add_data = 58;
+    hdmi_wr_reg(TX_PACKET_CONTROL_1, tmp_add_data);
+
+    // For debug: disable packets of audio_request, acr_request, deep_color_request, and avmute_request
+    //hdmi_wr_reg(TX_PACKET_CONTROL_2, hdmi_rd_reg(TX_PACKET_CONTROL_2) | 0x0f);
+    
+    //HDMI CT 7-19 GCP PB1 through PB6 not equal to 0 | 720 3 0 37 72 16367911819.90 31822 General Control Packet (GCP) 
+    //PACKET_CONTROL[~deep_color_request_enable]
+    //0: horizontal GC packet transport enabled
+    //1: horizontal GC packet masked
+    hdmi_wr_reg(TX_PACKET_CONTROL_2, hdmi_rd_reg(TX_PACKET_CONTROL_2) | (0x1<<1));
+    
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7:6] = 2'b0;     // audio_source_select[1:0]
+    //tmp_add_data[5] = 1'b0;       // external_packet_enable
+    //tmp_add_data[4] = 1'b1 ;      // internal_packet_enable
+    //tmp_add_data[3:2] = 2'b0;     // afe_fifo_source_select_lane_1[1:0]
+    //tmp_add_data[1:0] = 2'b0 ;    // afe_fifo_source_select_lane_0[1:0]
+    tmp_add_data = 0x10;
+    hdmi_wr_reg(TX_CORE_DATA_CAPTURE_2, tmp_add_data);
+    
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7]   = 1'b0;     // monitor_lane_1
+    //tmp_add_data[6:4] = 3'd0;     // monitor_select_lane_1[2:0]
+    //tmp_add_data[3]   = 1'b1 ;    // monitor_lane_0
+    //tmp_add_data[2:0] = 3'd7;     // monitor_select_lane_0[2:0]
+    tmp_add_data = 0xf;
+    hdmi_wr_reg(TX_CORE_DATA_MONITOR_1, tmp_add_data);
+    
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7:3] = 5'b0;     // Rsrv
+    //tmp_add_data[2:0] = 3'd2;     // monitor_select[2:0]
+    tmp_add_data = 0x2;
+    hdmi_wr_reg(TX_CORE_DATA_MONITOR_2, tmp_add_data);
+    
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7] = 1'b1;     // forced_hdmi
+    //tmp_add_data[6] = 1'b1;     // hdmi_config
+    //tmp_add_data[5:4] = 2'b0;   // Rsrv
+    //tmp_add_data[3] = 1'b0;     // bit_swap.
+    //tmp_add_data[2:0] = 3'd0;   // channel_swap[2:0]
+    tmp_add_data = 0xc0;
+    hdmi_wr_reg(TX_TMDS_MODE, tmp_add_data);
+    
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7] = 1'b0;  // Rsrv
+    //tmp_add_data[6] = 1'b0;  // TX_CONNECT_SEL: 0=use lower channel data[29:0]; 1=use upper channel data[59:30]
+    //tmp_add_data[5:0] = 'h0;  // Rsrv
+    tmp_add_data = 0x0;
+    hdmi_wr_reg(TX_SYS4_CONNECT_SEL_1, tmp_add_data);
+    
+    // Normally it makes sense to synch 3 channel output with clock channel's rising edge,
+    // as HDMI's serializer is LSB out first, invert tmds_clk pattern from "1111100000" to
+    // "0000011111" actually enable data synch with clock rising edge.
+    //if((param->VIC==HDMI_1080p30)||(param->VIC==HDMI_720p60)||(param->VIC==HDMI_1080i60)){
+    //    hdmi_wr_reg(TX_SYS4_CK_INV_VIDEO, 0xf0);
+    //}
+    //else{
+        tmp_add_data = 1 << 4; // Set tmds_clk pattern to be "0000011111" before being sent to AFE clock channel
+        hdmi_wr_reg(TX_SYS4_CK_INV_VIDEO, tmp_add_data);
+    //}            
+    
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7] = 1'b0;  // Rsrv
+    //tmp_add_data[6] = 1'b0;  // TX_AFE_FIFO channel 2 bypass=0
+    //tmp_add_data[5] = 1'b0;  // TX_AFE_FIFO channel 1 bypass=0
+    //tmp_add_data[4] = 1'b0;  // TX_AFE_FIFO channel 0 bypass=0
+    //tmp_add_data[3] = 1'b1;  // output enable of clk channel (channel 3)
+    //tmp_add_data[2] = 1'b1;  // TX_AFE_FIFO channel 2 enable
+    //tmp_add_data[1] = 1'b1;  // TX_AFE_FIFO channel 1 enable
+    //tmp_add_data[0] = 1'b1;  // TX_AFE_FIFO channel 0 enable
+    tmp_add_data = 0x0f;
+    hdmi_wr_reg(TX_SYS5_FIFO_CONFIG, tmp_add_data);
+    
+    tmp_add_data  = 0;
+    tmp_add_data |= TX_OUTPUT_COLOR_FORMAT  << 6; // [7:6] output_color_format: 0=RGB444; 1=YCbCr444; 2=Rsrv; 3=YCbCr422.
+    tmp_add_data |= TX_INPUT_COLOR_FORMAT   << 4; // [5:4] input_color_format:  0=RGB444; 1=YCbCr444; 2=Rsrv; 3=YCbCr422.
+    tmp_add_data |= param->color_depth   << 2; // [3:2] output_color_depth:  0=24-b; 1=30-b; 2=36-b; 3=48-b.
+    tmp_add_data |= TX_INPUT_COLOR_DEPTH    << 0; // [1:0] input_color_depth:   0=24-b; 1=30-b; 2=36-b; 3=48-b.
+    hdmi_wr_reg(TX_VIDEO_DTV_OPTION_L, tmp_add_data); // 0x50
+
+    tmp_add_data  = 0;
+    tmp_add_data |= 0                       << 4; // [7:4] Rsrv
+    tmp_add_data |= TX_OUTPUT_COLOR_RANGE   << 2; // [3:2] output_color_range:  0=16-235/240; 1=16-240; 2=1-254; 3=0-255.
+    tmp_add_data |= TX_INPUT_COLOR_RANGE    << 0; // [1:0] input_color_range:   0=16-235/240; 1=16-240; 2=1-254; 3=0-255.
+    hdmi_wr_reg(TX_VIDEO_DTV_OPTION_H, tmp_add_data); // 0x00
+    
+    if(!hdmi_audio_off_flag){
+#if 1
+        hdmi_audio_init(i2s_to_spdif_flag);
+#else
+        hdmi_wr_reg(TX_AUDIO_PACK, 0x00); // disable audio sample packets
+#endif
+    }
+    hdmi_wr_reg(TX_AUDIO_CONTROL_MORE, 1);
+    //tmp_add_data[7] = 1'b0;      // cp_desired
+    //tmp_add_data[6] = 1'b0;      // ess_config
+    //tmp_add_data[5] = 1'b0;      // set_avmute
+    //tmp_add_data[4] = 1'b1;      // clear_avmute
+    //tmp_add_data[3] = 1'b0;      // hdcp_1_1
+    //tmp_add_data[2] = 1'b0;      // Vsync/Hsync forced_polarity_select
+    //tmp_add_data[1] = 1'b0;      // forced_vsync_polarity
+    //tmp_add_data[0] = 1'b0;      // forced_hsync_polarity
+    //tmp_add_data = 0x10;
+    tmp_add_data = 0x0; //rain
+//    hdmi_wr_reg(TX_HDCP_MODE, tmp_add_data);
+    //config_hdmi(1);
+
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7:0]   = 0xa ; // time_divider[7:0] for DDC I2C bus clock
+    
+    //tmp_add_data = 0xa; //800k
+    //tmp_add_data = 0x3f; //190k
+    tmp_add_data = 0x30 - 1; //50k     // hdmi system clock change to XTAL 24MHz
+    hdmi_wr_reg(TX_HDCP_CONFIG3, tmp_add_data);
+
+    //tmp_add_data[15:8] = 0;
+    //tmp_add_data[7]   = 8'b1 ;  //cp_desired 
+    //tmp_add_data[6]   = 8'b1 ;  //ess_config 
+    //tmp_add_data[5]   = 8'b0 ;  //set_avmute 
+    //tmp_add_data[4]   = 8'b0 ;  //clear_avmute 
+    //tmp_add_data[3]   = 8'b1 ;  //hdcp_1_1 
+    //tmp_add_data[2]   = 8'b0 ;  //forced_polarity 
+    //tmp_add_data[1]   = 8'b0 ;  //forced_vsync_polarity 
+    //tmp_add_data[0]   = 8'b0 ;  //forced_hsync_polarity
+    tmp_add_data = 0x40;
+    hdmi_wr_reg(TX_HDCP_MODE, tmp_add_data);
+
+    if(param->cc == CC_ITU709){
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_B0, 0x7b);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_B1, 0x12);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_R0, 0x6c);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_R1, 0x36);
+
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CB0, 0xf2);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CB1, 0x2f);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CR0, 0xd4);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CR1, 0x77);
+    }
+    else{
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_B0, 0x2f);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_B1, 0x1d);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_R0, 0x8b);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_R1, 0x4c);
+
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CB0, 0x18);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CB1, 0x58);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CR0, 0xd0);
+        hdmi_wr_reg(TX_VIDEO_CSC_COEFF_CR1, 0xb6);
+    }    
+
+    hdmi_hw_set_powermode(hdmitx_device);
+    
+    // --------------------------------------------------------
+    // Release TX out of reset
+    // --------------------------------------------------------
+    if(new_reset_sequence_flag){
+        //new reset sequence, 2010Sep09, rain
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 1<<6); // Release resets all other TX digital clock domain, except tmds_clk
+        delay_us(10);
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00); // Final release reset on tmds_clk domain
+        delay_us(10);
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x68);        
+        delay_us(10);
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);        
+        delay_us(10);
+        /* select serial*/
+        if(serial_reg_val==0){
+            if((param->VIC==HDMI_1080p30)||(param->VIC==HDMI_720p60)||(param->VIC==HDMI_1080i60)
+                ||(param->VIC==HDMI_1080p24)){
+                hdmi_wr_reg(0x018, 0x22);   
+            }
+            else{
+                hdmi_wr_reg(0x018, 0x24);   
+            }
+        }
+        else if(serial_reg_val==1){
+            if((param->VIC==HDMI_480p60)||(param->VIC==HDMI_480p60_16x9)
+                ||(param->VIC==HDMI_576p50)||(param->VIC==HDMI_576p50_16x9)
+                ||(param->VIC==HDMI_480i60)||(param->VIC==HDMI_480i60_16x9)
+                ||(param->VIC==HDMI_576i50)||(param->VIC==HDMI_576i50_16x9)){
+                hdmi_wr_reg(0x018, 0x24);   
+            }
+            else{
+                hdmi_wr_reg(0x018, 0x22);   
+            }
+        }
+        else{
+            hdmi_wr_reg(0x018, serial_reg_val);
+        }
+        if((param->VIC==HDMI_1080p60)&&(param->color_depth==COLOR_30BIT)&&(hdmi_rd_reg(0x018)==0x22)){
+            hdmi_wr_reg(0x018,0x12);
+        }
+        
+    }
+    else{
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x01); // Release serializer resets
+        delay_us(10);
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x00); // Release reset on TX digital clock channel
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 1<<6); // Release resets all other TX digital clock domain, except tmds_clk
+        delay_us(10);
+    
+        hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00); // Final release reset on tmds_clk domain
+        
+        tmp_add_data = hdmi_rd_reg(0x018);
+        if((tmp_add_data==0x22)||(tmp_add_data==0x12)){
+            hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x08);        
+            delay_us(10);
+            hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x00);        
+        }
+    }
+#ifdef CONFIG_ARCH_MESON6       //todo
+    if(param->VIC == HDMI_1080p50) {
+        hdmi_reconfig_packet_setting();  // For 1080p50hz only
+    }
+#endif
+}
+
+static void hdmi_audio_init(unsigned char spdif_flag)
+{
+    unsigned tmp_add_data;
+
+    /* If TX_AUDIO_FORMAT is set as 0, "Channel Status" will not be sent out correctly */
+    /* TX_AUDIO_CONTROL[bit 0] should be 1, otherwise no sound??? */
+    unsigned char tx_i2s_spdif;
+    unsigned char tx_i2s_8_channel;
+    
+    hdmi_print(IMP, AUD "%s\n", spdif_flag ? "SPDIF" : "I2S");
+    
+    if(spdif_flag){
+        tx_i2s_spdif=0;
+    }
+    else{
+        tx_i2s_spdif=1;
+    }
+    tx_i2s_8_channel = ((i2s_to_spdif_flag == 1)? 0:1 );
+
+    tmp_add_data  = 0;
+    tmp_add_data |= tx_i2s_spdif    << 7; // [7]    I2S or SPDIF
+    tmp_add_data |= tx_i2s_8_channel<< 6; // [6]    8 or 2ch
+    tmp_add_data |= 2               << 4; // [5:4]  Serial Format: I2S format
+    tmp_add_data |= 3               << 2; // [3:2]  Bit Width: 24-bit
+    tmp_add_data |= 0               << 1; // [1]    WS Polarity: 0=WS high is right
+    tmp_add_data |= 1               << 0; // [0]    For I2S: 0=one-bit audio; 1=I2S;
+                                          //        For SPDIF: 0= channel status from input data; 1=from register
+    hdmi_wr_reg(TX_AUDIO_FORMAT, tmp_add_data); // 0x2f
+
+    //tmp_add_data  = 0;
+    //tmp_add_data |= 0x4 << 4; // [7:4]  FIFO Depth=512
+    //tmp_add_data |= 0x2 << 2; // [3:2]  Critical threshold=Depth/16
+    //tmp_add_data |= 0x1 << 0; // [1:0]  Normal threshold=Depth/8
+    //hdmi_wr_reg(TX_AUDIO_FIFO, tmp_add_data); // 0x49
+    hdmi_wr_reg(TX_AUDIO_FIFO, aud_para); // 0x49
+
+    hdmi_wr_reg(TX_AUDIO_LIPSYNC, 0); // [7:0] Normalized lip-sync param: 0 means S(lipsync) = S(total)/2
+
+    tmp_add_data  = 0;
+    tmp_add_data |= 0   << 7; // [7]    forced_audio_fifo_clear
+    tmp_add_data |= 1   << 6; // [6]    auto_audio_fifo_clear
+    tmp_add_data |= 0x0 << 4; // [5:4]  audio_packet_type: 0=audio sample packet; 1=one bit audio; 2=HBR audio packet; 3=DST audio packet.
+    tmp_add_data |= 0   << 3; // [3]    Rsrv
+    tmp_add_data |= 0   << 2; // [2]    Audio sample packet's valid bit: 0=valid bit is 0 for I2S, is input data for SPDIF; 1=valid bit from register
+    tmp_add_data |= 0   << 1; // [1]    Audio sample packet's user bit: 0=user bit is 0 for I2S, is input data for SPDIF; 1=user bit from register
+    tmp_add_data |= 0   << 0; // [0]    0=Audio sample packet's sample_flat bit is 1; 1=sample_flat is 0.
+    hdmi_wr_reg(TX_AUDIO_CONTROL, tmp_add_data); // 0x40
+
+    tmp_add_data  = 0;
+    tmp_add_data |= tx_i2s_8_channel<< 7; // [7]    Audio sample packet's header layout bit: 0=layout0; 1=layout1
+    tmp_add_data |= 0               << 6; // [6]    Set normal_double bit in DST packet header.
+    tmp_add_data |= 0               << 0; // [5:0]  Rsrv
+    hdmi_wr_reg(TX_AUDIO_HEADER, tmp_add_data); // 0x00
+
+    tmp_add_data  = tx_i2s_8_channel ? 0xff : 0x03;
+    hdmi_wr_reg(TX_AUDIO_SAMPLE, tmp_add_data); // Channel valid for up to 8 channels, 1 bit per channel.
+
+    hdmi_wr_reg(TX_AUDIO_PACK, 0x01); // Enable audio sample packets
+
+    // Set N = 4096 (N is not measured, N must be configured so as to be a reference to clock_meter)
+    hdmi_wr_reg(TX_SYS1_ACR_N_0, 0x00); // N[7:0]
+    hdmi_wr_reg(TX_SYS1_ACR_N_1, 0x18 /*0x10*/); // N[15:8]
+
+    tmp_add_data  = 0;
+    tmp_add_data |= 0xa << 4;    // [7:4] Meas Tolerance
+    tmp_add_data |= 0x0 << 0;    // [3:0] N[19:16]
+    hdmi_wr_reg(TX_SYS1_ACR_N_2, tmp_add_data); // 0xa0
+
+    hdmi_wr_reg(TX_AUDIO_CONTROL,   hdmi_rd_reg(TX_AUDIO_CONTROL)|0x1); 
+}
+
+static void enable_audio_spdif(void)
+{    
+    hdmi_print(INF, AUD "Enable audio spdif to HDMI\n");
+
+    /* enable audio*/        
+    hdmi_wr_reg(TX_AUDIO_I2S,   0x0 );  // Address  0x5A=0x0    TX_AUDIO_I2S
+
+    hdmi_wr_reg(TX_AUDIO_SPDIF, 1); // TX AUDIO SPDIF Enable
+}
+
+static void enable_audio_i2s(void)
+{
+    hdmi_print(INF, AUD "Enable audio i2s to HDMI\n");
+    hdmi_wr_reg(TX_AUDIO_I2S,   0x1 );  // Address  0x5A=0x0    TX_AUDIO_I2S
+    hdmi_wr_reg(TX_AUDIO_SPDIF, 0); // TX AUDIO SPDIF Enable
+}    
+
+/************************************
+*    hdmitx hardware level interface
+*************************************/
+
+static void hdmitx_dump_tvenc_reg(int cur_VIC, int printk_flag) 
+{
+    int i,j;
+    for(i=0;hdmi_tvenc_configs[i].vic!=HDMI_Unkown;i++){
+        if(cur_VIC==hdmi_tvenc_configs[i].vic){
+            reg_t* reg_set=hdmi_tvenc_configs[i].reg_set;
+            hdmi_print(printk_flag, "------dump tevenc reg for mode %d----\n", cur_VIC);
+            for(j=0;reg_set[j].reg;j++){
+                hdmi_print(printk_flag, "[%08x]=%08x\n",reg_set[j].reg,aml_read_reg32(CBUS_REG_ADDR(reg_set[j].reg)));
+            }
+            hdmi_print(printk_flag, "------------------\n");
+            break;
+        }
+    }
+}    
+
+static void hdmitx_config_tvenc_reg(int vic, unsigned reg, unsigned val)
+{
+    int i,j;
+    for(i=0;hdmi_tvenc_configs[i].vic!=HDMI_Unkown;i++){
+        if(vic==hdmi_tvenc_configs[i].vic){
+            reg_t* reg_set=hdmi_tvenc_configs[i].reg_set;
+            for(j=0;reg_set[j].reg;j++){
+                if(reg_set[j].reg==reg){
+                    reg_set[j].val = val;    
+                    hdmi_print(INF, SYS "set [%08x]=%08x\n",reg_set[j].reg, reg_set[j].val);
+                    break;
+                }
+            }
+            if(reg_set[j].reg == 0){
+                hdmi_print(INF, SYS "no [%08x] in config\n", reg);
+            }
+            break;
+        }
+    }
+}
+
+static void hdmitx_set_pll(Hdmi_tx_video_para_t *param)
+{
+    hdmi_print(IMP, SYS "set pll\n");
+    hdmi_print(IMP, SYS "param->VIC:%d\n", param->VIC);
+    
+    cur_vout_index = get_cur_vout_index();
+    switch(param->VIC)
+    {
+        case HDMI_480p60:
+        case HDMI_480p60_16x9:
+            set_vmode_clk(VMODE_480P);
+            break;
+        case HDMI_576p50:
+        case HDMI_576p50_16x9:
+            set_vmode_clk(VMODE_576P);
+            break;
+        case HDMI_480i60:
+        case HDMI_480i60_16x9:
+            set_vmode_clk(VMODE_480I);
+            break;
+        case HDMI_576i50:
+        case HDMI_576i50_16x9:
+            set_vmode_clk(VMODE_576I);
+            break;
+        case HDMI_1080p24://1080p24 support
+            set_vmode_clk(VMODE_1080P_24HZ);
+            break;
+        case HDMI_1080p30:
+
+        case HDMI_720p60:
+        case HDMI_720p50:
+            set_vmode_clk(VMODE_720P);
+            break;
+        case HDMI_1080i60:
+        case HDMI_1080i50:
+            set_vmode_clk(VMODE_1080I);
+            break;
+        case HDMI_1080p60:
+        case HDMI_1080p50:
+            set_vmode_clk(VMODE_1080P);
+            break;
+        case HDMI_4k2k_30:
+        case HDMI_4k2k_25:
+        case HDMI_4k2k_24:
+        case HDMI_4k2k_smpte_24:
+            set_vmode_clk(VMODE_4K2K_24HZ);
+        default:
+            break;
+    }
+}
+
+static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t *param)
+{
+    if(param == NULL){ //disable HDMI
+        return 0;
+    }
+    else if((param->VIC!=HDMI_480p60)&&(param->VIC!=HDMI_480p60_16x9)
+        &&(param->VIC!=HDMI_576p50)&&(param->VIC!=HDMI_576p50_16x9)
+        &&(param->VIC!=HDMI_480i60)&&(param->VIC!=HDMI_480i60_16x9)
+        &&(param->VIC!=HDMI_576i50)&&(param->VIC!=HDMI_576i50_16x9)
+        &&(param->VIC!=HDMI_1080p30)
+        &&(param->VIC!=HDMI_1080p24)
+        &&(param->VIC!=HDMI_1080p60)&&(param->VIC!=HDMI_1080p50)
+        &&(param->VIC!=HDMI_720p60)&&(param->VIC!=HDMI_720p50)
+        &&(param->VIC!=HDMI_4k2k_30)&&(param->VIC!=HDMI_4k2k_25)&&(param->VIC!=HDMI_4k2k_24)&&(param->VIC!=HDMI_4k2k_smpte_24)
+        &&(param->VIC!=HDMI_1080i60)&&(param->VIC!=HDMI_1080i50)){
+        return -1;
+    }
+
+    if(color_depth_f==24)
+        param->color_depth = COLOR_24BIT;
+    else if(color_depth_f==30)
+        param->color_depth = COLOR_30BIT;
+    else if(color_depth_f==36)
+        param->color_depth = COLOR_36BIT;
+    else if(color_depth_f==48)
+        param->color_depth = COLOR_48BIT;
+    hdmi_print(INF, SYS "set mode VIC %d (cd%d,cs%d,pm%d,vd%d,%x) \n",param->VIC, color_depth_f, color_space_f,power_mode,power_off_vdac_flag,serial_reg_val);
+    if(color_space_f != 0){
+        param->color = color_space_f;
+    }
+
+    hdmi_hw_reset(hdmitx_device, param);    
+    hdmitx_set_pll(param);
+
+    if((param->VIC==HDMI_720p60)||(param->VIC==HDMI_720p50)||
+        (param->VIC==HDMI_1080i60)||(param->VIC==HDMI_1080i50)){
+        aml_write_reg32(P_ENCP_VIDEO_HAVON_BEGIN,  aml_read_reg32(P_ENCP_VIDEO_HAVON_BEGIN)-1);     
+        aml_write_reg32(P_ENCP_VIDEO_HAVON_END,  aml_read_reg32(P_ENCP_VIDEO_HAVON_END)-1);     
+    }
+
+    switch(param->VIC){
+        case HDMI_480i60:
+        case HDMI_480i60_16x9:
+        case HDMI_576i50:
+        case HDMI_576i50_16x9:
+            hdmi_tvenc480i_set(param);
+            break;
+        case HDMI_1080i60:
+        case HDMI_1080i50:
+            hdmi_tvenc1080i_set(param);
+            break;
+        case HDMI_4k2k_30:
+        case HDMI_4k2k_25:
+        case HDMI_4k2k_24:
+        case HDMI_4k2k_smpte_24:
+            hdmi_tvenc4k2k_set(param);
+            break;
+        default:
+            hdmi_tvenc_set(param);
+        }
+    hdmitx_dump_tvenc_reg(param->VIC, 0);
+
+//todo     hdmitx_special_handler_video(hdmitx_device);
+
+    // reset TX_SYS5_TX_SOFT_RESET_1/2 twice
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x9f);
+    mdelay(5);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+    mdelay(5);
+
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x9f);
+    mdelay(5);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+    mdelay(5);
+
+    return 0;
+}    
+
+
+static void hdmitx_set_packet(int type, unsigned char* DB, unsigned char* HB)
+{
+    // AVI frame
+    int i ;
+    unsigned char ucData ;
+    unsigned int pkt_reg_base=TX_PKT_REG_AVI_INFO_BASE_ADDR;
+    int pkt_data_len=0;
+    
+    switch(type)
+    {
+        case HDMI_PACKET_AVI:
+            pkt_reg_base=TX_PKT_REG_AVI_INFO_BASE_ADDR; 
+            pkt_data_len=13;
+            break;
+        case HDMI_PACKET_VEND:
+            pkt_reg_base=TX_PKT_REG_VEND_INFO_BASE_ADDR;
+            pkt_data_len=6;
+            break;
+        case HDMI_AUDIO_INFO:
+            pkt_reg_base=TX_PKT_REG_AUDIO_INFO_BASE_ADDR;
+            pkt_data_len=9;
+            break;
+        case HDMI_SOURCE_DESCRIPTION:
+            pkt_reg_base=TX_PKT_REG_SPD_INFO_BASE_ADDR;
+            pkt_data_len=25;
+        default:
+            break;
+    }
+    
+    if(DB){
+        for(i=0;i<pkt_data_len;i++){
+            hdmi_wr_reg(pkt_reg_base+i+1, DB[i]);  
+        }
+    
+        for(i = 0,ucData = 0; i < pkt_data_len ; i++)
+        {
+            ucData -= DB[i] ;
+        }
+        for(i=0; i<3; i++){
+            ucData -= HB[i];
+        }
+        hdmi_wr_reg(pkt_reg_base+0x00, ucData);  
+    
+        hdmi_wr_reg(pkt_reg_base+0x1C, HB[0]);        
+        hdmi_wr_reg(pkt_reg_base+0x1D, HB[1]);        
+        hdmi_wr_reg(pkt_reg_base+0x1E, HB[2]);        
+        hdmi_wr_reg(pkt_reg_base+0x1F, 0x00ff);        // Enable packet generation
+    }
+    else{
+        hdmi_wr_reg(pkt_reg_base+0x1F, 0x0);        // disable packet generation
+    }
+}
+
+
+static void hdmitx_setaudioinfoframe(unsigned char* AUD_DB, unsigned char* CHAN_STAT_BUF)
+{
+    int i ;
+    unsigned char AUD_HB[3]={0x84, 0x1, 0xa};
+    hdmitx_set_packet(HDMI_AUDIO_INFO, AUD_DB, AUD_HB);    
+    //channel status
+    if(CHAN_STAT_BUF){
+        for(i=0;i<24;i++){
+            hdmi_wr_reg(TX_IEC60958_SUB1_OFFSET+i, CHAN_STAT_BUF[i]);        
+            hdmi_wr_reg(TX_IEC60958_SUB2_OFFSET+i, CHAN_STAT_BUF[24+i]);
+        }
+    }
+}
+
+
+//------------------------------------------------------------------------------
+// set_hdmi_audio_source(unsigned int src)
+//
+// Description:
+// Select HDMI audio clock source, and I2S input data source.
+//
+// Parameters:
+//  src -- 0=no audio clock to HDMI; 1=pcmout to HDMI; 2=Aiu I2S out to HDMI.
+//------------------------------------------------------------------------------
+static void set_hdmi_audio_source(unsigned int src)
+{
+    unsigned long data32;
+    unsigned int i;
+
+    // Disable HDMI audio clock input and its I2S input
+    data32  = 0;
+    data32 |= 0     << 4;   // [5:4]    hdmi_data_sel: 00=disable hdmi i2s input; 01=Select pcm data; 10=Select AIU I2S data; 11=Not allowed.
+    data32 |= 0     << 0;   // [1:0]    hdmi_clk_sel: 00=Disable hdmi audio clock input; 01=Select pcm clock; 10=Select AIU aoclk; 11=Not allowed.
+//    Wr(AIU_HDMI_CLK_DATA_CTRL, data32);
+    aml_write_reg32(P_AIU_HDMI_CLK_DATA_CTRL, data32);
+
+    switch(src)
+    {
+        case 0:
+            hdmi_print(ERR, AUD "No audio clock to HDMI\n");
+            break;
+        case 1:
+            hdmi_print(IMP, AUD "PCM out to HDMI\n");//SPDIF
+            // Enable HDMI audio clock from the selected source
+            data32  = 0;
+            data32 |= 0      << 4;  // [5:4]    hdmi_data_sel: 00=disable hdmi i2s input; 01=Select pcm data; 10=Select AIU I2S data; 11=Not allowed.
+            data32 |= 2      << 0;  // [1:0]    hdmi_clk_sel: 00=Disable hdmi audio clock input; 01=Select pcm clock; 10=Select AIU aoclk; 11=Not allowed.
+            aml_write_reg32(P_AIU_HDMI_CLK_DATA_CTRL, data32);
+
+            // Wait until clock change is settled
+            i = 0;
+            while ( (((aml_read_reg32(P_AIU_HDMI_CLK_DATA_CTRL))>>8)&0x3) != 0x2 ) {
+            //    if (i > 255) {
+            //        //stimulus_print("[TEST.C] Error: set_hdmi_audio_source timeout!\n");
+            //        //stimulus_finish_fail(10);
+            //    }
+                i ++;
+                if(i>100000)
+                    break;
+            }
+            if(i>100000)
+                hdmi_print(ERR, AUD "Time out: AIU_HDMI_CLK_DATA_CTRL\n");
+           break;
+        case 2:
+            hdmi_print(INF, AUD "I2S out to HDMI\n");//I2S
+            // Enable HDMI audio clock from the selected source
+            data32  = 0;
+            data32 |= 0      << 4;  // [5:4]    hdmi_data_sel: 00=disable hdmi i2s input; 01=Select pcm data; 10=Select AIU I2S data; 11=Not allowed.
+            data32 |= 2      << 0;  // [1:0]    hdmi_clk_sel: 00=Disable hdmi audio clock input; 01=Select pcm clock; 10=Select AIU aoclk; 11=Not allowed.
+            aml_write_reg32(P_AIU_HDMI_CLK_DATA_CTRL, data32);
+
+            // Wait until clock change is settled
+            i = 0;
+            while ( (((aml_read_reg32(P_AIU_HDMI_CLK_DATA_CTRL))>>8)&0x3) != 0x2 ) {
+            //    if (i > 255) {
+            //        //stimulus_print("[TEST.C] Error: set_hdmi_audio_source timeout!\n");
+            //        //stimulus_finish_fail(10);
+            //    }
+                i ++;
+                if(i>100000)
+                    break;
+            }
+            if(i>100000)
+            hdmi_print(ERR, AUD "Time out: AIU_HDMI_CLK_DATA_CTRL !\n");
+            // Enable HDMI I2S input from the selected source
+            data32  = 0;
+            data32 |= 2   << 4;   // [5:4]    hdmi_data_sel: 00=disable hdmi i2s input; 01=Select pcm data; 10=Select AIU I2S data; 11=Not allowed.
+            data32 |= 2   << 0;   // [1:0]    hdmi_clk_sel: 00=Disable hdmi audio clock input; 01=Select pcm clock; 10=Select AIU aoclk; 11=Not allowed.
+            aml_write_reg32(P_AIU_HDMI_CLK_DATA_CTRL, data32);
+
+            // Wait until data change is settled
+            i = 0;
+            while ((((aml_read_reg32(P_AIU_HDMI_CLK_DATA_CTRL))>>12)&0x3) != 0x2 ) {
+                i++;
+                if(i>100000)
+                    break;
+            }
+            if(i>100000)
+                hdmi_print(ERR, AUD "Time out: AIU_HDMI_CLK_DATA_CTRL...\n");
+            break;
+        default:
+            hdmi_print(ERR, AUD "Audio Src clock to HDMI Error\n");
+            break;
+    }
+} /* set_hdmi_audio_source */
+
+static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio_para_t* audio_param)
+{
+    unsigned int audio_N_para = 6272;
+    unsigned int audio_N_tolerance = 3;
+//    unsigned int audio_CTS = 30000;
+    
+    hdmi_print(INF, AUD "audio channel num is %d\n", hdmitx_device->cur_audio_param.channel_num);
+
+    if(!hdmi_audio_off_flag){
+        hdmi_audio_init(i2s_to_spdif_flag);
+    }
+    else {
+        hdmi_wr_reg(TX_AUDIO_PACK, 0x00); // disable audio sample packets
+    }
+
+//Refer to HDMI SPEC V1.4 Page 137
+    hdmi_print(INF, AUD "current VIC: %d\n", hdmitx_device->cur_VIC);
+    hdmi_print(INF, AUD "audio sample rate: %d\n", audio_param->sample_rate);
+    switch(hdmitx_device->cur_VIC)
+    {
+        //TMDS Clock:27MHz
+        case HDMI_480p60:
+        case HDMI_480p60_16x9:
+        case HDMI_576p50:
+        case HDMI_576p50_16x9:
+        case HDMI_480i60:
+        case HDMI_480i60_16x9:
+        case HDMI_576i50:
+        case HDMI_576i50_16x9:
+            switch(audio_param->sample_rate)
+            {
+                case FS_32K:
+                    audio_N_para = 4096;
+                    break;
+                case FS_44K1:
+                    audio_N_para = 6272;
+                    break;
+                case FS_88K2:
+                    audio_N_para = 12544;
+                    break;
+                case FS_176K4:
+                    audio_N_para = 25088;
+                    break;
+                case FS_48K:
+                    audio_N_para = 6144;
+                    break;
+                case FS_96K:
+                    audio_N_para = 12288;
+                    break;
+                case FS_192K:
+                    audio_N_para = 24576;
+                    break;
+                default:
+                    break;
+            }
+            break;
+        //TMDS Clock:74.176MHz
+        case HDMI_720p60:
+        case HDMI_720p50:
+        case HDMI_1080i60:
+        case HDMI_1080i50:
+        case HDMI_1080p30:
+        case HDMI_1080p24:
+            switch(audio_param->sample_rate)
+            {
+                case FS_32K:
+                    audio_N_para = 4096;
+                    break;
+                case FS_44K1:
+                    audio_N_para = 6272;
+                    break;
+                case FS_88K2:
+                    audio_N_para = 12544;
+                    break;
+                case FS_176K4:
+                    audio_N_para = 25088;
+                    break;
+                case FS_48K:
+                    audio_N_para = 6144;
+                    break;
+                case FS_96K:
+                    audio_N_para = 12288;
+                    break;
+                case FS_192K:
+                    audio_N_para = 24576;
+                    break;
+                default:
+                    break;
+            }
+            break;
+        //TMDS Clock:148.5MHz
+        case HDMI_1080p50:
+        case HDMI_1080p60:
+            switch(audio_param->sample_rate)
+            {
+                case FS_32K:
+                    audio_N_para = 4096;
+                    break;
+                case FS_44K1:
+                    audio_N_para = 6272;
+                    break;
+                case FS_88K2:
+                    audio_N_para = 12544;
+                    break;
+                case FS_176K4:
+                    audio_N_para = 25088;
+                    break;
+                case FS_48K:
+                    audio_N_para = 6144;
+                    break;
+                case FS_96K:
+                    audio_N_para = 12288;
+                    break;
+                case FS_192K:
+                    audio_N_para = 24576;
+                    break;
+                default:
+                    break;
+            }
+            break;
+        default:
+            break;
+    }    
+
+    hdmi_print(INF, AUD "reset audio N para\n");
+    switch(audio_param->sample_rate){
+        case FS_44K1:
+            audio_N_para = 6272 * 2;
+            break;
+        case FS_48K:
+            audio_N_para = 6144 * 2;
+            break;
+        default:
+            break;
+    }
+
+    //TODO. Different audio type, maybe have different settings
+    switch(audio_param->type){
+        case CT_PCM:
+            break;
+        case CT_AC_3:
+            break;
+        case CT_MPEG1:
+            break;
+        case CT_MP3:
+            break;
+        case CT_MPEG2:
+            break;
+        case CT_AAC:
+            break;
+        case CT_DTS:
+            break;
+        case CT_ATRAC:
+            break;
+        case CT_ONE_BIT_AUDIO:
+            break;
+        case CT_DOLBY_D:
+            audio_N_para *= 4;
+            break;
+        case CT_DTS_HD:
+            break;
+        case CT_MAT:
+            break;
+        case CT_DST:
+            break;
+        case CT_WMA:
+            break;
+        default:
+            break;
+    }
+
+    hdmi_wr_reg(TX_SYS1_ACR_N_0, (audio_N_para&0xff)); // N[7:0]
+    hdmi_wr_reg(TX_SYS1_ACR_N_1, (audio_N_para>>8)&0xff); // N[15:8]
+    hdmi_wr_reg(TX_SYS1_ACR_N_2, (audio_N_tolerance<<4)|((audio_N_para>>16)&0xf)); // N[19:16]
+    hdmi_wr_reg(TX_AUDIO_CONTROL,   hdmi_rd_reg(TX_AUDIO_CONTROL)|0x1); 
+
+    hdmi_wr_reg(TX_SYS0_ACR_CTS_0, 0);      //audio_CTS & 0xff);
+    hdmi_wr_reg(TX_SYS0_ACR_CTS_1, 0);      //(audio_CTS>>8) & 0xff);
+    hdmi_wr_reg(TX_SYS0_ACR_CTS_2, 1 << 5);      // set bit[5] force_arc_stable to 1
+    
+    set_hdmi_audio_source(i2s_to_spdif_flag ? 1 : 2);
+    
+    hdmi_print(INF, AUD "i2s_to_spdif_flag:%d \n", i2s_to_spdif_flag);
+    if(i2s_to_spdif_flag)
+        enable_audio_spdif();
+    else
+        enable_audio_i2s();
+
+    if((i2s_to_spdif_flag == 1) && (hdmitx_device->cur_audio_param.type != CT_PCM)) {
+        hdmi_wr_reg(TX_AUDIO_FORMAT, (hdmi_rd_reg(TX_AUDIO_FORMAT) & 0xfe));        // clear bit0, use channel status bit from input data
+    }
+
+//todo    hdmitx_special_handler_audio(hdmitx_device);
+
+    return 0;
+}    
+    
+static void hdmitx_setupirq(hdmitx_dev_t* hdmitx_device)
+{
+   int r;
+   r = request_irq(INT_HDMI_TX, &intr_handler,
+                    IRQF_SHARED, "amhdmitx",
+                    (void *)hdmitx_device);
+}    
+
+
+#if 1
+
+//Expect 8*10-Bit shift pattern data:
+//
+//0x2e3   = 1011100011
+//0x245   = 1001000101
+//0x1cb   = 0111001011
+//0x225   = 1000100101
+//0x2da   = 1011011010
+//0x3e0   = 1111100000
+//0x367   = 1101100111
+//0x000   = 0000000000
+
+static void turn_on_shift_pattern (void)
+{
+    unsigned int tmp_add_data;
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_0, 0x00);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_1, 0x6c);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_2, 0xfe);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_3, 0x41);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_4, 0x5b);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_5, 0x91);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_6, 0x3a);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_7, 0x9d);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_8, 0x68);
+    hdmi_wr_reg(TX_SYS0_BIST_DATA_9, 0xc7);
+
+    //tmp_add_data[7:6] = 2'b0;     // audio_source_select[1:0]
+    //tmp_add_data[5] = 1'b0;       // external_packet_enable
+    //tmp_add_data[4] = 1'b1 ;      // internal_packet_enable
+    //tmp_add_data[3:2] = 2'b0;     // afe_fifo_source_select_lane_1[1:0]
+    //tmp_add_data[1:0] = 2'd3 ;    // afe_fifo_source_select_lane_0[1:0] : 0=data path; 1=injected on lane 0; 2=inject on lane 1; 3=BIST.
+    tmp_add_data = 0x13;
+    hdmi_wr_reg(TX_CORE_DATA_CAPTURE_2, tmp_add_data);
+
+    hdmi_wr_reg(TX_SYS0_BIST_CONTROL, 0x00); // Reset BIST
+    hdmi_wr_reg(TX_SYS0_BIST_CONTROL, 0xc0); // Enable shift pattern BIST
+}
+
+static void turn_off_shift_pattern (void)
+{
+    unsigned int tmp_add_data;
+    hdmi_wr_reg(TX_SYS0_BIST_CONTROL, 0x00); // Reset BIST
+
+    //tmp_add_data[7:6] = 2'b0;     // audio_source_select[1:0]
+    //tmp_add_data[5] = 1'b0;       // external_packet_enable
+    //tmp_add_data[4] = 1'b1 ;      // internal_packet_enable
+    //tmp_add_data[3:2] = 2'b0;     // afe_fifo_source_select_lane_1[1:0]
+    //tmp_add_data[1:0] = 2'd0 ;    // afe_fifo_source_select_lane_0[1:0] : 0=data path; 1=injected on lane 0; 2=inject on lane 1; 3=BIST.
+    tmp_add_data = 0x10;
+    hdmi_wr_reg(TX_CORE_DATA_CAPTURE_2, tmp_add_data);
+}
+
+static void turn_on_prbs_mode(int prbs_mode)
+{
+    unsigned int tmp_add_data;
+   tmp_add_data     = 0;
+    tmp_add_data    |= 0    << 6;   // [7:6] audio_source_select[1:0]
+    tmp_add_data    |= 0    << 5;   //   [5] external_packet_enable
+    tmp_add_data    |= 0    << 4;   //   [4] internal_packet_enable
+    tmp_add_data    |= 0    << 2;   // [3:2] afe_fifo_source_select_lane_1[1:0]: 0=DATA_PATH; 1=TMDS_LANE_0; 2=TMDS_LANE_1; 3=BIST_PATTERN
+    tmp_add_data    |= 3    << 0;   // [1:0] afe_fifo_source_select_lane_0[1:0]: 0=DATA_PATH; 1=TMDS_LANE_0; 2=TMDS_LANE_1; 3=BIST_PATTERN
+    hdmi_wr_reg(TX_CORE_DATA_CAPTURE_2, tmp_add_data); // 0x03
+
+    tmp_add_data     = 0;
+    tmp_add_data    |= 0    << 7;   //   [7] monitor_lane_1
+    tmp_add_data    |= 0    << 4;   // [6:4] monitor_select_lane_1[2:0]
+    tmp_add_data    |= 1    << 3;   //   [3] monitor_lane_0
+    tmp_add_data    |= 7    << 0;   // [2:0] monitor_select_lane_0[2:0]: 7=TMDS_ENCODE
+    hdmi_wr_reg(TX_CORE_DATA_MONITOR_1, tmp_add_data); // 0x0f
+
+    // Program PRBS_MODE
+    hdmi_wr_reg(TX_SYS1_PRBS_DATA, prbs_mode); // 0=PRBS 11; 1=PRBS 15; 2=PRBS 7; 3=PRBS 31.
+    // Program PRBS BIST
+
+    tmp_add_data     = 0;
+    tmp_add_data    |= 1    << 7;   //   [7] afe_bist_enable
+    tmp_add_data    |= 0    << 6;   //   [6] tmds_shift_pattern_select
+    tmp_add_data    |= 3    << 4;   // [5:4] tmds_prbs_pattern_select[1:0]:
+                                    //       0=output all 0; 1=output 8-bit pattern;
+                                    //       2=output 1-bit differential pattern; 3=output 10-bit pattern
+    tmp_add_data    |= 0    << 3;   //   [3] Rsrv
+    tmp_add_data    |= 0    << 0;   // [2:0] tmds_repeat_bist_pattern[2:0]
+    hdmi_wr_reg(TX_SYS0_BIST_CONTROL, tmp_add_data); // 0xb0
+
+    hdmi_print(INF, SYS "PRBS mode %d On\n", prbs_mode);
+}
+    
+#endif
+
+static void hdmitx_uninit(hdmitx_dev_t* hdmitx_device)
+{
+    //aml_read_reg32(P_SYS_CPU_0_IRQ_IN1_INTR_STAT_CLR);
+    //aml_write_reg32(P_SYS_CPU_0_IRQ_IN1_INTR_MASK, aml_read_reg32(P_SYS_CPU_0_IRQ_IN1_INTR_MASK)&(~(1 << 25)));
+    free_irq(INT_HDMI_TX, (void *)hdmitx_device);
+    hdmi_print(1,"power off hdmi, unmux hpd\n");
+    
+    phy_pll_off();
+    digital_clk_off(7); //off sys clk
+    unmux_hpd();
+}    
+
+static char hdcp_log_buf[HDMITX_HDCP_MONITOR_BUF_SIZE] = { 0 };
+const static hdcp_sub_t hdcp_monitor_array[] = {
+    {"Aksv_shw", TX_HDCP_SHW_AKSV_0, 5},
+    {"Bksv    ", TX_HDCP_SHW_BKSV_0, 5},
+    {"Ainfo   ", TX_HDCP_SHW_AINFO , 1},
+    {"An      ", TX_HDCP_SHW_AN_0 ,  8},
+    {"Bcaps   ", TX_HDCP_SHW_BCAPS,  1},
+    {"Bstatus ", TX_HDCP_SHW_BSTATUS_0, 2},
+    {"Km      ", 0x148,              7},
+    {"Ri      ", 0x150,              2},
+    {"Ri'     ", TX_HDCP_SHW_RI1_0 , 2},
+    {"Pj      ", 0x14f,              1},
+    {"Pj'     ", TX_HDCP_SHW_PJ1   , 1},
+    {"AuthSt  ", TX_HDCP_ST_AUTHENTICATION, 1},
+    {"EncrySt0", TX_HDCP_ST_STATUS_0, 1},
+    {"EncrySt1", TX_HDCP_ST_STATUS_1, 1},
+    {"EncrySt2", TX_HDCP_ST_STATUS_2, 1},
+    {"EncrySt3", TX_HDCP_ST_STATUS_3, 1},
+    {"FramCnt ", TX_HDCP_ST_FRAME_COUNT, 1},
+    {"EDIDStat", TX_HDCP_ST_EDID_STATUS, 1},
+    {"MEMStat ", TX_HDCP_ST_MEM_STATUS, 1},
+    {"EDID_Ext", 0x198, 1},
+    {"EDDC_SEG", 0x199, 1},
+    {"EDDC_ST ", 0x19a, 1},
+    {"HDCP_RSV", 0x19b, 4},
+    {"EDDC_SEG", 0x19c, 1},
+    {"HDCPMODE", TX_HDCP_ST_ST_MODE, 1},
+    {"TmdsMod ", TX_TMDS_MODE, 1},
+};
+
+static int hdmitx_cntl(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned argv)
+{
+    if(cmd == HDMITX_AVMUTE_CNTL) {
+        if(argv == AVMUTE_SET) {
+            hdmi_wr_reg(TX_HDCP_MODE, hdmi_rd_reg(TX_HDCP_MODE)&(~(1<<4)));
+            hdmi_wr_reg(TX_HDCP_MODE, hdmi_rd_reg(TX_HDCP_MODE)|(1<<5));
+        }
+        if(argv == AVMUTE_CLEAR) {
+            hdmi_wr_reg(TX_HDCP_MODE, hdmi_rd_reg(TX_HDCP_MODE)&(~(1<<5)));
+            hdmi_wr_reg(TX_HDCP_MODE, hdmi_rd_reg(TX_HDCP_MODE)|(1<<4));
+        }
+        if(argv == AVMUTE_OFF) {
+            hdmi_wr_reg(TX_HDCP_MODE, hdmi_rd_reg(TX_HDCP_MODE)&(~(1<<4)));
+            hdmi_wr_reg(TX_HDCP_MODE, hdmi_rd_reg(TX_HDCP_MODE)&(~(1<<5)));
+        }
+        return 0;
+    }
+    else if(cmd == HDMITX_SW_INTERNAL_HPD_TRIG){
+        if(argv == 1)   // soft trig rising
+            hdmi_wr_reg(OTHER_BASE_ADDR+HDMI_OTHER_INTR_STAT, 1);
+        else            // soft trig falling
+            hdmi_wr_reg(OTHER_BASE_ADDR+HDMI_OTHER_INTR_STAT, 2);
+    }
+    else if(cmd == HDMITX_EARLY_SUSPEND_RESUME_CNTL) {
+        if(argv == HDMITX_EARLY_SUSPEND) {
+            aml_set_reg32_bits(P_HHI_VID_PLL_CNTL, 0, 30, 1);
+            hdmi_phy_suspend();
+        }
+        if(argv == HDMITX_LATE_RESUME) {
+            aml_set_reg32_bits(P_HHI_VID_PLL_CNTL, 1, 30, 1);
+            hdmi_phy_wakeup();
+        }
+        return 0;
+    }
+    else if(cmd == HDMITX_HDCP_MONITOR) {
+        int i, len, st;
+        int array = sizeof(hdcp_monitor_array) / sizeof(hdcp_sub_t);
+
+        int pos;
+
+        if(!(hdmitx_device->log & HDMI_LOG_HDCP))
+            return 0;
+
+        memset(hdcp_log_buf, 0, HDMITX_HDCP_MONITOR_BUF_SIZE);
+        hdmi_print(INF, HDCP "\n\nMonitor HDCP start\n");
+        pos = 0;
+        for(i = 0; i < array; i ++){
+            len = hdcp_monitor_array[i].hdcp_sub_len;
+            st  = hdcp_monitor_array[i].hdcp_sub_addr_start;
+            pos += sprintf(hdcp_log_buf + pos, "   %s: ", hdcp_monitor_array[i].hdcp_sub_name);
+            do {
+                pos += sprintf(hdcp_log_buf + pos, "%02x", (unsigned)hdmi_rd_reg(st+len-1));
+            }while(--len);
+            pos += sprintf(hdcp_log_buf + pos, "\n");
+        }
+        pos += sprintf(hdcp_log_buf + pos, "HDCP %s",
+                                            ((hdmi_rd_reg(TX_HDCP_ST_STATUS_3)&0xa0)==0xa0)
+                                            ? "OK\n" : "BAD\n"
+                       );
+        printk("%s", hdcp_log_buf);
+        hdmi_print(INF, HDCP "Monitor HDCP end\n");
+        return 0;
+    }
+    else if(cmd == HDMITX_IP_SW_RST){
+        return 0;    //TODO
+        aml_write_reg32(P_HDMI_CTRL_PORT, aml_read_reg32(P_HDMI_CTRL_PORT)|(1<<16));
+        hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_CTRL0, hdmi_rd_reg(OTHER_BASE_ADDR + HDMI_OTHER_CTRL0) | (argv));
+        hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_CTRL0, hdmi_rd_reg(OTHER_BASE_ADDR + HDMI_OTHER_CTRL0) & (~(argv)));
+        aml_write_reg32(P_HDMI_CTRL_PORT, aml_read_reg32(P_HDMI_CTRL_PORT)&(~(1<<16)));
+        hdmi_print(INF, SYS "reset IP: 0x%x\n", argv);
+        return 0;
+    }
+    else if(cmd == HDMITX_CBUS_RST) {
+        return 0;//todo
+        aml_set_reg32_bits(P_RESET2_REGISTER, 1, 15, 1);
+        msleep(50);
+        hdmi_wr_reg(OTHER_BASE_ADDR+HDMI_OTHER_INTR_STAT_CLR, 0x7);
+        return 0;
+    }
+    else if(cmd == HDMITX_INTR_MASKN_CNTL) {
+        if(argv == INTR_MASKN_ENABLE) {
+            hdmi_wr_reg(OTHER_BASE_ADDR+HDMI_OTHER_INTR_MASKN, 0);
+        }
+        if(argv == INTR_MASKN_DISABLE) {
+            hdmi_wr_reg(OTHER_BASE_ADDR+HDMI_OTHER_INTR_MASKN, 0x7);
+        }
+        if(argv == INTR_CLEAR) {
+            hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_STAT_CLR, 0x7);
+        }
+        return 0;
+    }
+    else if(cmd == HDMITX_IP_INTR_MASN_RST){
+        hdmi_print(INF, SYS "reset intr mask\n");
+        hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_MASKN, 0);
+        msleep(2);
+        hdmi_wr_reg(OTHER_BASE_ADDR + HDMI_OTHER_INTR_MASKN, 0x7);
+    }
+    else if(cmd == HDMITX_HWCMD_MUX_HPD_IF_PIN_HIGH){
+        /* turnon digital module if gpio is high */
+        if(is_hpd_muxed() == 0){
+            if(read_hpd_gpio()){
+                hdmitx_device->internal_mode_change = 0;
+                msleep(500);
+                if(read_hpd_gpio()){
+                hdmi_print(IMP, HPD "mux hpd\n");
+                digital_clk_on(4);
+                delay_us(1000*100);
+                mux_hpd();
+                }
+            }
+        }
+    }
+    else if(cmd == HDMITX_HWCMD_MUX_HPD){
+         mux_hpd();
+    } 
+// For test only. 
+    else if(cmd == HDMITX_HWCMD_TURNOFF_HDMIHW){
+        int unmux_hpd_flag = argv;
+//        WRITE_MPEG_REG(VENC_DVI_SETTING, READ_MPEG_REG(VENC_DVI_SETTING)&(~(1<<13))); //bit 13 is used by HDMI only
+//        digital_clk_on(4); //enable sys clk so that hdmi registers can be accessed when calling phy_pll_off/digit_clk_off
+        if(unmux_hpd_flag){
+            hdmi_print(IMP, SYS "power off hdmi, unmux hpd\n");
+            phy_pll_off();
+            digital_clk_off(4); //off sys clk
+            unmux_hpd();
+        }
+        else{
+            hdmi_print(IMP, SYS "power off hdmi\n");
+            digital_clk_on(6);
+            phy_pll_off();      //should call digital_clk_on(), otherwise hdmi_rd/wr_reg will hungup
+            digital_clk_off(3); //do not off sys clk
+        }
+#ifdef CONFIG_HDMI_TX_PHY
+    digital_clk_off(7);
+#endif
+    }
+    else if(cmd == HDMITX_HWCMD_TURN_ON_PRBS){
+        turn_on_prbs_mode(argv);    
+    }
+    return 0;           
+}
+
+static void hdmitx_print_info(hdmitx_dev_t* hdmitx_device, int printk_flag)
+{
+    hdmi_print(INF, "------------------\nHdmitx driver version: %s\nSerial %x\nColor Depth %d\n", HDMITX_VER, serial_reg_val, color_depth_f);
+    hdmi_print(INF, "current vout index %d\n", cur_vout_index);
+    hdmi_print(INF, "reset sequence %d\n", new_reset_sequence_flag);
+    hdmi_print(INF, "power mode %d\n", power_mode);
+    hdmi_print(INF, "%spowerdown when unplug\n",hdmitx_device->unplug_powerdown?"":"do not ");
+    hdmi_print(INF, "use_tvenc_conf_flag=%d\n",use_tvenc_conf_flag); 
+    hdmi_print(INF, "vdac %s\n", power_off_vdac_flag?"off":"on");
+    hdmi_print(INF, "hdmi audio %s\n", hdmi_audio_off_flag?"off":"on");
+    if(!hdmi_audio_off_flag){
+        hdmi_print(INF, "audio out type %s\n", i2s_to_spdif_flag?"spdif":"i2s");
+    }
+    hdmi_print(INF, "delay flag %d\n", delay_flag);
+    hdmi_print(INF, "------------------\n");
+}
+
+static void hdmitx_debug(hdmitx_dev_t* hdmitx_device, const char* buf)
+{
+    char tmpbuf[128];
+    int i=0;
+    unsigned int adr;
+    unsigned int value=0;
+    while((buf[i])&&(buf[i]!=',')&&(buf[i]!=' ')){
+        tmpbuf[i]=buf[i];
+        i++;    
+    }
+    tmpbuf[i]=0;
+    if((strncmp(tmpbuf, "dumpreg", 7)==0) || (strncmp(tmpbuf, "dumptvencreg", 12)==0)){
+        hdmitx_dump_tvenc_reg(hdmitx_device->cur_VIC, 1);
+        return;
+    }
+    else if(strncmp(tmpbuf, "ss", 2) == 0) {
+        printk("hdmitx_device->output_blank_flag: 0x%x\n", hdmitx_device->output_blank_flag);
+        printk("hdmitx_device->hpd_state: 0x%x\n", hdmitx_device->hpd_state);
+        printk("hdmitx_device->cur_VIC: 0x%x\n", hdmitx_device->cur_VIC);
+    }
+    else if(strncmp(tmpbuf, "hpd_lock", 8) == 0) {
+        if(tmpbuf[8] == '1') {
+            hdmitx_device->hpd_lock = 1;
+            hdmi_print(INF, HPD "hdmitx: lock hpd\n");
+        }
+        else {
+            hdmitx_device->hpd_lock = 0;
+            hdmi_print(INF, HPD "hdmitx: unlock hpd\n");
+        }
+        return ;
+    }
+    else if(strncmp(tmpbuf, "vic", 3)==0) {
+        printk("hdmi vic count = %d\n", hdmitx_device->vic_count);
+        if((tmpbuf[3] >= '0') && (tmpbuf[3] <= '9')){
+            hdmitx_device->vic_count = tmpbuf[3] - '0';
+            hdmi_print(INF, SYS "set hdmi vic count = %d\n", hdmitx_device->vic_count);
+        }
+    }
+    else if(strncmp(tmpbuf, "cec", 3)==0) {
+        extern void cec_test_(unsigned int cmd);
+        cec_test_(tmpbuf[3] - '0');
+    }
+    else if(strncmp(tmpbuf, "dumphdmireg", 11)==0){
+        unsigned char reg_val = 0;
+        unsigned int reg_adr = 0;
+        for (reg_adr = 0; reg_adr < 0x800; reg_adr ++){        //HDMI Regs address range: 0 ~ 0x7ff
+            reg_val = hdmi_rd_reg(reg_adr);
+            hdmi_print(INF, "HDMI[0x%x]: 0x%x\n", reg_adr, reg_val);
+        }
+        return ;
+    }
+    else if(strncmp(tmpbuf, "dumpcecreg",10) == 0){
+        unsigned char cec_val = 0;
+        unsigned int cec_adr =0;
+        //HDMI CEC Regs address range:0xc000~0xc01c;0xc080~0xc094
+        for(cec_adr = 0xc000; cec_adr < 0xc01d; cec_adr ++){
+            cec_val = hdmi_rd_reg(cec_adr);
+            hdmi_print(INF, "HDMI CEC Regs[0x%x]: 0x%x\n",cec_adr,cec_val);             
+        }
+         for(cec_adr = 0xc080; cec_adr < 0xc095; cec_adr ++){
+            cec_val = hdmi_rd_reg(cec_adr);
+            hdmi_print(INF, "HDMI CEC Regs[0x%x]: 0x%x\n",cec_adr,cec_val);             
+        }
+        return;      
+    }
+    else if(strncmp(tmpbuf, "dumpcbusreg", 11)==0){
+        unsigned j;
+        adr=simple_strtoul(tmpbuf+11, NULL, 16);  //CBUS Start addr
+        value=simple_strtoul(buf+i+1, NULL, 16); //CBUS End addr
+        for(j = 0 ; j < value-adr+1 ; j++){
+//            printk("CBUS[0x%x]: 0x%x\n", adr+j, READ_MPEG_REG(adr+j));
+            hdmi_print(INF, "CBUS[0x%x]: 0x%x\n", adr+j, aml_read_reg32(CBUS_REG_ADDR(adr+j)));
+            
+        }
+    }
+    else if(strncmp(tmpbuf, "log", 3)==0){
+        if(strncmp(tmpbuf+3, "hdcp", 4)==0){
+            static unsigned int i = 1;
+            if(i & 1){
+                hdmitx_device->log |= HDMI_LOG_HDCP;
+            }
+            else{
+                hdmitx_device->log &= ~HDMI_LOG_HDCP;
+            }
+            i ++;
+        }
+        return ;
+    }
+    else if(strncmp(tmpbuf, "pllcalc", 7)==0){
+        clk_measure(0xff);
+        return;
+    }
+    else if(strncmp(tmpbuf, "hdmiaudio", 9)==0){
+        value=simple_strtoul(tmpbuf+9, NULL, 16);
+        if(value == 1){
+            hdmi_audio_off_flag = 0;
+            hdmi_audio_init(i2s_to_spdif_flag);
+        }
+        else if(value == 0){
+            hdmi_wr_reg(TX_AUDIO_PACK, 0x00); // disable audio sample packets
+        }
+        return;
+    }
+    else if(strncmp(tmpbuf, "cfgreg", 6)==0){
+        adr=simple_strtoul(tmpbuf+6, NULL, 16);
+        value=simple_strtoul(buf+i+1, NULL, 16);
+        hdmitx_config_tvenc_reg(hdmitx_device->cur_VIC, adr, value);
+        return;
+    }
+    else if(strncmp(tmpbuf, "tvenc_flag", 10)==0){
+        use_tvenc_conf_flag = tmpbuf[10]-'0';
+        hdmi_print(INF, "set use_tvenc_conf_flag = %d\n", use_tvenc_conf_flag);
+    }
+    else if(strncmp(tmpbuf, "reset", 5)==0){
+        if(tmpbuf[5]=='0')
+            new_reset_sequence_flag=0;
+        else 
+            new_reset_sequence_flag=1;
+        return;
+    }
+    else if(strncmp(tmpbuf, "delay_flag", 10)==0){
+        delay_flag = tmpbuf[10]-'0';    
+    }
+    else if(tmpbuf[0]=='v'){
+        hdmitx_print_info(hdmitx_device, 1);
+        return;    
+    }
+    else if(tmpbuf[0]=='s'){
+        serial_reg_val=simple_strtoul(tmpbuf+1,NULL,16);
+        return;
+    }
+    else if(tmpbuf[0]=='c'){
+        if(tmpbuf[1]=='d'){
+            color_depth_f=simple_strtoul(tmpbuf+2,NULL,10);
+            if((color_depth_f!=24)&&(color_depth_f!=30)&&(color_depth_f!=36)){
+                printk("Color depth %d is not supported\n", color_depth_f);
+                color_depth_f=0;
+            }
+            return;
+        }
+        else if(tmpbuf[1]=='s'){
+            color_space_f=simple_strtoul(tmpbuf+2,NULL,10);
+            if(color_space_f>2){
+                printk("Color space %d is not supported\n", color_space_f);
+                color_space_f=0;
+            }
+        }
+    }
+    else if(strncmp(tmpbuf,"i2s",2)==0){
+        if(strncmp(tmpbuf+3,"off",3)==0)
+            i2s_to_spdif_flag=1;
+        else   
+            i2s_to_spdif_flag=0;
+    }
+    else if(strncmp(tmpbuf, "pattern_on", 10)==0){
+        turn_on_shift_pattern();
+        hdmi_print(INF, "Shift Pattern On\n");
+        return;        
+    }
+    else if(strncmp(tmpbuf, "pattern_off", 11)==0){
+        turn_off_shift_pattern();
+        hdmi_print(INF, "Shift Pattern Off\n");
+        return;        
+    }
+    else if(strncmp(tmpbuf, "prbs", 4)==0){
+        int prbs_mode =simple_strtoul(tmpbuf+4, NULL, 10);
+        turn_on_prbs_mode(prbs_mode);
+        return;
+    }
+    else if(tmpbuf[0]=='w'){
+        unsigned read_back = 0;
+        adr=simple_strtoul(tmpbuf+2, NULL, 16);
+        value=simple_strtoul(buf+i+1, NULL, 16);
+        if(buf[1]=='h'){
+            hdmi_wr_reg(adr, value);
+            read_back = hdmi_rd_reg(adr);
+        }
+        else if(buf[1]=='c'){
+            aml_write_reg32(CBUS_REG_ADDR(adr), value);
+            read_back = aml_read_reg32(CBUS_REG_ADDR(adr));
+            
+        }
+        else if(buf[1]=='p'){
+            aml_write_reg32(APB_REG_ADDR(adr), value);
+            read_back = aml_read_reg32(APB_REG_ADDR(adr));
+        }
+        hdmi_print(INF, "write %x to %s reg[%x]\n",value,buf[1]=='p'?"APB":(buf[1]=='h'?"HDMI":"CBUS"), adr);
+        //Add read back function in order to judge writting is OK or NG.
+        hdmi_print(INF, "Read Back %s reg[%x]=%x\n",buf[1]=='p'?"APB":(buf[1]=='h'?"HDMI":"CBUS"), adr, read_back);
+    }
+    else if(tmpbuf[0]=='r'){
+        adr=simple_strtoul(tmpbuf+2, NULL, 16);
+        if(buf[1]=='h'){
+            value = hdmi_rd_reg(adr);
+            
+        }
+        else if(buf[1]=='c'){
+            value = aml_read_reg32(CBUS_REG_ADDR(adr));
+        }
+        else if(buf[1]=='p'){
+            value = aml_read_reg32(APB_REG_ADDR(adr));
+        }
+        hdmi_print(INF, "%s reg[%x]=%x\n",buf[1]=='p'?"APB":(buf[1]=='h'?"HDMI":"CBUS"), adr, value);
+    }
+}
+
+static void hdmitx_getediddata(hdmitx_dev_t* hdmitx_device, unsigned int blk_idx)
+{
+    int ii, jj;
+
+#ifdef CONFIG_PANEL_IT6681
+    hdmitx_device->cur_edid_block = 0;
+    it6681_read_edid(0, &hdmitx_device->EDID_buf[hdmitx_device->cur_edid_block*128], 256);
+    hdmitx_device->cur_edid_block += 2;
+    printk("%s: get edid from MHL buffer(cur_edid_block=%d)\n", __func__, hdmitx_device->cur_edid_block);
+#else
+    if((hdmitx_device->cur_edid_block+2)<=EDID_MAX_BLOCK){
+        if(blk_idx == 0) {
+            for(jj=0;jj<2;jj++){
+                for(ii=0;ii<128;ii++){
+                    hdmitx_device->EDID_buf[hdmitx_device->cur_edid_block*128+ii]
+                        =hdmi_rd_reg(TX_RX_EDID_OFFSET+hdmitx_device->cur_phy_block_ptr*128+ii);
+                }
+                hdmitx_device->cur_edid_block++;
+                hdmitx_device->cur_phy_block_ptr++;
+                hdmitx_device->cur_phy_block_ptr=hdmitx_device->cur_phy_block_ptr&0x3;
+            }
+        }
+        else {
+            for(jj=0;jj<2;jj++){
+                for(ii=0;ii<128;ii++){
+                    hdmitx_device->EDID_buf1[hdmitx_device->cur_edid_block*128+ii]
+                        =hdmi_rd_reg(TX_RX_EDID_OFFSET+hdmitx_device->cur_phy_block_ptr*128+ii);
+                }
+                hdmitx_device->cur_edid_block++;
+                hdmitx_device->cur_phy_block_ptr++;
+                hdmitx_device->cur_phy_block_ptr=hdmitx_device->cur_phy_block_ptr&0x3;
+            }
+        }
+    }
+#endif
+}    
+
+static int hdmitx_cntl_ddc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned argv)
+{
+    int i = 0;
+    unsigned char *tmp_char = NULL;
+    
+    if(!(cmd & CMD_DDC_OFFSET))
+        hdmi_print(ERR, "ddc: " "w: invalid cmd 0x%x\n", cmd);
+    else
+        hdmi_print(LOW, "ddc: " "cmd 0x%x\n", cmd);
+
+    switch(cmd) {
+    case DDC_RESET_EDID:
+        hdmi_set_reg_bits(TX_HDCP_EDID_CONFIG, 0, 6, 1);
+        hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 1, 1, 1);
+        hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 0, 1, 1);
+        break;
+    case DDC_IS_EDID_DATA_READY:
+        return !!(hdmi_rd_reg(TX_HDCP_ST_EDID_STATUS) & (1<<4));
+        break;
+    case DDC_EDID_READ_DATA:
+        hdmi_set_reg_bits(TX_HDCP_EDID_CONFIG, 1, 6, 1);     // Assert sys_trigger_config
+        break;
+    case DDC_EDID_GET_DATA:
+        hdmitx_getediddata(hdmitx_device, argv);
+        break;
+    case DDC_PIN_MUX_OP:
+        if(argv == PIN_MUX) {
+            aml_set_reg32_bits(P_PERIPHS_PIN_MUX_1, 0x3, 24, 2);    // Mux HDMI SDA(5v)/SCL(5V)
+        }
+        if(argv == PIN_UNMUX) {
+            aml_set_reg32_bits(P_PERIPHS_PIN_MUX_1, 0x0, 24, 2);    // unMux HDMI SDA(5v)/SCL(5V)
+        }
+        break;
+    case DDC_EDID_CLEAR_RAM:
+        for(i = 0; i < EDID_RAM_ADDR_SIZE; i++) {
+            hdmi_wr_reg(TX_RX_EDID_OFFSET + i, 0);
+        }
+        break;
+    case DDC_RESET_HDCP:
+        hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 1, 2, 1);
+        hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 0, 2, 1);
+        break;
+    case DDC_HDCP_OP:
+        if(argv == HDCP_ON) {
+            hdmi_set_reg_bits(TX_HDCP_MODE, 1, 7, 1);
+        }
+        if(argv == HDCP_OFF) {
+            hdmi_set_reg_bits(TX_HDCP_MODE, 0, 7, 1);
+        }
+        break;
+    case DDC_IS_HDCP_ON:
+        argv = !!((hdmi_rd_reg(TX_HDCP_MODE)) & (1 << 7));
+        break;
+    case DDC_HDCP_GET_AKSV:
+        tmp_char = (unsigned char *) argv;
+        for(i = 0; i < 5; i++) {
+            tmp_char[i] = (unsigned char)hdmi_rd_reg(TX_HDCP_AKSV_SHADOW + 4 - i);
+        }
+        break;
+    case DDC_HDCP_GET_BKSV:
+        tmp_char = (unsigned char *) argv;
+        for(i = 0; i < 5; i++) {
+            tmp_char[i] = (unsigned char)hdmi_rd_reg(TX_HDCP_BKSV_SHADOW + 4 - i);
+        }
+        break;
+    case DDC_HDCP_GET_AUTH:
+        if((hdmi_rd_reg(TX_HDCP_ST_STATUS_3)&0xa0)==0xa0) {
+            return 1;
+        }
+        else {
+            return 0;
+        }
+        break;
+    default:
+        hdmi_print(INF, "ddc: " "unknown cmd: 0x%x\n", cmd);
+    }
+    return 1;
+}
+
+// clear hdmi packet configure registers
+static void hdmitx_clr_sub_packet(unsigned int reg_base)
+{
+    int i = 0;
+    for(i = 0; i < 0x20; i++) {
+        hdmi_wr_reg(reg_base + i, 0x00);
+    }
+}
+
+static int hdmitx_cntl_config(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned argv)
+{
+    if(!(cmd & CMD_CONF_OFFSET))
+        hdmi_print(ERR, "config: " "hdmitx: w: invalid cmd 0x%x\n", cmd);
+    else
+        hdmi_print(LOW, "config: " "hdmitx: conf cmd 0x%x\n", cmd);
+
+    switch(cmd) {
+    case CONF_HDMI_DVI_MODE:
+        if(argv == HDMI_MODE) {
+            hdmi_set_reg_bits(TX_TMDS_MODE, 0x3, 6, 2);
+        }
+        if(argv == DVI_MODE) {
+            hdmi_set_reg_bits(TX_TMDS_MODE, 0x2, 6, 2);
+        }
+        break;
+    case CONF_SYSTEM_ST:
+        return (hdmi_rd_reg(TX_HDCP_ST_EDID_STATUS) >> 6);
+        break;
+    case CONF_AUDIO_MUTE_OP:
+        if(argv == AUDIO_MUTE) {
+            hdmi_wr_reg(TX_AUDIO_PACK, 0x00); // disable audio sample packets
+        }
+        if(argv == AUDIO_UNMUTE) {
+            hdmi_wr_reg(TX_AUDIO_PACK, 0x01); // disable audio sample packets
+        }
+        break;
+    case CONF_VIDEO_BLANK_OP:
+        if(argv == VIDEO_BLANK) {
+            aml_write_reg32(P_VPU_HDMI_DATA_OVR, (0x200 << 20) | (0x0 << 10) | (0x200 << 0));   // set blank CrYCb as 0x200 0x0 0x200
+            aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 5, 3);        // Output data map: CrYCb
+            aml_set_reg32_bits(P_VPU_HDMI_DATA_OVR, 1, 31, 1);      // Enable HDMI data override
+        }
+        if(argv == VIDEO_UNBLANK) {
+            aml_write_reg32(P_VPU_HDMI_DATA_OVR, 0);    // Disable HDMI data override
+        }
+        break;
+    case CONF_CLR_AVI_PACKET:
+        hdmitx_clr_sub_packet(TX_PKT_REG_AVI_INFO_BASE_ADDR);
+        break;
+    case CONF_CLR_VSDB_PACKET:
+        hdmitx_clr_sub_packet(TX_PKT_REG_VEND_INFO_BASE_ADDR);
+        break;
+    case CONF_CLR_AUDINFO_PACKET:
+        hdmitx_clr_sub_packet(TX_PKT_REG_AUDIO_INFO_BASE_ADDR);
+        break;
+    default:
+        hdmi_print(ERR, "config: ""hdmitx: unknown cmd: 0x%x\n", cmd);
+    }
+    return 1;
+}
+
+static int hdmitx_cntl_misc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned argv)
+{
+    if(!(cmd & CMD_MISC_OFFSET))
+        hdmi_print(ERR, "misc: " "hdmitx: w: invalid cmd 0x%x\n", cmd);
+    else
+        hdmi_print(LOW, "misc: " "hdmitx: misc cmd 0x%x\n", cmd);
+
+    switch(cmd) {
+    case MISC_HPD_MUX_OP:
+        if(argv == PIN_MUX) {
+            aml_set_reg32_bits(P_PERIPHS_PIN_MUX_1, 0x1, 26, 1);    // Mux HPD
+        }
+        if(argv == PIN_UNMUX) {
+            aml_set_reg32_bits(P_PERIPHS_PIN_MUX_1, 0x0, 26, 1);    // unMux HPD
+        }
+        break;
+    case MISC_HPD_GPI_ST:
+        return read_hpd_gpio();
+        break;
+    case MISC_HPLL_OP:
+        if(argv == HPLL_ENABLE) {
+            aml_set_reg32_bits(P_HHI_VID_PLL_CNTL, 1, 30, 1);   // disable hpll
+        }
+        if(argv == HPLL_DISABLE) {
+            aml_set_reg32_bits(P_HHI_VID_PLL_CNTL, 0, 30, 1);   // disable hpll
+        }
+        break;
+    case MISC_TMDS_PHY_OP:
+        if(argv == TMDS_PHY_ENABLE) {
+            hdmi_phy_wakeup();  // TODO
+        }
+        if(argv == TMDS_PHY_DISABLE) {
+            hdmi_phy_suspend();
+        }
+        break;
+    case MISC_VIID_IS_USING:
+        return !!(aml_read_reg32(P_HHI_VID2_PLL_CNTL) & (1 << 30));     // bit30: enable
+        break;
+    default:
+        hdmi_print(ERR, "misc: " "hdmitx: unknown cmd: 0x%x\n", cmd);
+    }
+    return 1;
+}
+
+static int hdmitx_get_state(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned argv)
+{
+    if(!(cmd & CMD_STAT_OFFSET))
+        hdmi_print(ERR, "stat: " "hdmitx: w: invalid cmd 0x%x\n", cmd);
+    else
+        hdmi_print(LOW, "stat: " "hdmitx: misc cmd 0x%x\n", cmd);
+
+    switch(cmd) {
+    case STAT_VIDEO_VIC:
+        {
+            /*
+             * get current video vic directly from VIC packet or VSDB packet
+             */
+            HDMI_Video_Codes_t vic = HDMI_Unkown;
+            vic = (HDMI_Video_Codes_t)hdmi_rd_reg(TX_PKT_REG_AVI_INFO_BASE_ADDR + 4);
+            if(vic == HDMI_Unkown) {
+                vic = (HDMI_Video_Codes_t)hdmi_rd_reg(TX_PKT_REG_VEND_INFO_BASE_ADDR + 5);
+                if(vic == 1) {
+                    vic = HDMI_4k2k_30;
+                } else if(vic == 2) {
+                    vic = HDMI_4k2k_25;
+                } else if(vic == 3) {
+                    vic = HDMI_4k2k_24;
+                } else if(vic == 4) {
+                    vic = HDMI_4k2k_smpte_24;
+                } else {
+                }
+            }
+            return (int)vic;
+        }
+        break;
+    case STAT_VIDEO_CLK:
+        break;
+    default:
+        break;
+    }
+    return 0;
+}
+
+void HDMITX_Meson_Init(hdmitx_dev_t* hdmitx_device)
+{
+    hdmitx_device->HWOp.SetPacket = hdmitx_set_packet;
+    hdmitx_device->HWOp.SetAudioInfoFrame = hdmitx_setaudioinfoframe;
+    hdmitx_device->HWOp.SetDispMode = hdmitx_set_dispmode;
+    hdmitx_device->HWOp.SetAudMode = hdmitx_set_audmode;
+    hdmitx_device->HWOp.SetupIRQ = hdmitx_setupirq;
+    hdmitx_device->HWOp.DebugFun = hdmitx_debug;
+    hdmitx_device->HWOp.UnInit = hdmitx_uninit;
+    hdmitx_device->HWOp.Cntl = hdmitx_cntl;             // todo
+    hdmitx_device->HWOp.CntlDDC = hdmitx_cntl_ddc;
+    hdmitx_device->HWOp.GetState = hdmitx_get_state;
+    hdmitx_device->HWOp.CntlPacket = hdmitx_cntl;
+    hdmitx_device->HWOp.CntlConfig = hdmitx_cntl_config;
+    hdmitx_device->HWOp.CntlMisc = hdmitx_cntl_misc;
+                                                                  //     1=Map data pins from Venc to Hdmi Tx as RGB mode.
+    // --------------------------------------------------------
+    // Configure HDMI TX analog, and use HDMI PLL to generate TMDS clock
+    // --------------------------------------------------------
+    // Enable APB3 fail on error
+//    WRITE_APB_REG(HDMI_CNTL_PORT, READ_APB_REG(HDMI_CNTL_PORT)|(1<<15)); //APB3 err_en
+//\\ TODO
+    aml_set_reg32_bits(P_PAD_PULL_UP_EN_REG1, 0, 16, 1);       // Disable GPIOH_0 internal pull-up register
+    aml_write_reg32(P_HHI_HDMI_CLK_CNTL, aml_read_reg32(P_HHI_HDMI_CLK_CNTL)| (1 << 8));
+    aml_write_reg32(P_HDMI_CTRL_PORT, aml_read_reg32(P_HDMI_CTRL_PORT)|(1<<15)); //APB3 err_en
+    hdmi_wr_reg(0x10, 0xff);
+
+    /**/    
+    hdmi_hw_init(hdmitx_device);
+}    
+
+void hdmi_set_audio_para(int para)
+{
+    aud_para = para;
+
+}
+
+// The following two functions should move to 
+// static struct platform_driver amhdmitx_driver.suspend & .wakeup
+// For tempelet use only.
+// Later will change it.
+typedef struct 
+{
+    unsigned long reg;
+    unsigned long val_sleep;
+    unsigned long val_save;
+}hdmi_phy_t;
+
+static unsigned int hdmi_phy_save = 0x08930e9b;     // Default setting
+
+static void hdmi_phy_suspend(void)
+{
+    hdmi_phy_save = aml_read_reg32(P_HHI_HDMI_PHY_CNTL0);
+    aml_write_reg32(P_HHI_HDMI_PHY_CNTL0, 0x08418d00);
+    //hdmi_print(INF, SYS "phy suspend\n");
+}
+
+static void hdmi_phy_wakeup(void)
+{
+    aml_write_reg32(P_HHI_HDMI_PHY_CNTL0, hdmi_phy_save);
+    //hdmi_print(INF, SYS "phy wakeup\n");
+}
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_reg.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_reg.c
new file mode 100644
index 000000000000..e3d965f01cd8
--- /dev/null
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_reg.c
@@ -0,0 +1,124 @@
+/*
+ * Amlogic Meson HDMI Transmitter Driver
+ * frame buffer driver-----------HDMI_TX
+ * Copyright (C) 2010 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the named License,
+ * or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <linux/version.h>
+#include <linux/module.h>
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/interrupt.h>
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/mm.h>
+#include <linux/major.h>
+#include <linux/platform_device.h>
+#include <linux/mutex.h>
+#include <linux/cdev.h>
+#include <asm/uaccess.h>
+#include <mach/am_regs.h>
+
+#include <mach/hdmi_tx_reg.h>
+static DEFINE_SPINLOCK(reg_lock);
+static DEFINE_SPINLOCK(reg_lock2);
+// if the following bits are 0, then access HDMI IP Port will cause system hungup
+#define GATE_NUM    2
+Hdmi_Gate_s hdmi_gate[GATE_NUM] =   {   {HHI_HDMI_CLK_CNTL, 8},
+                                        {HHI_GCLK_MPEG2   , 4},
+                                    };
+
+// In order to prevent system hangup, add check_cts_hdmi_sys_clk_status() to check 
+static void check_cts_hdmi_sys_clk_status(void)
+{
+    int i;
+
+    for(i = 0; i < GATE_NUM; i++){
+        if(!(aml_read_reg32(CBUS_REG_ADDR(hdmi_gate[i].cbus_addr)) & (1<<hdmi_gate[i].gate_bit))){
+            aml_set_reg32_bits(CBUS_REG_ADDR(hdmi_gate[i].cbus_addr), 1, hdmi_gate[i].gate_bit, 1);
+        }
+    }
+}
+
+unsigned int hdmi_rd_reg(unsigned int addr)
+{
+    unsigned int data;
+
+    unsigned long flags, fiq_flag;
+
+    spin_lock_irqsave(&reg_lock, flags);
+    raw_local_save_flags(fiq_flag);
+    local_fiq_disable();
+
+    check_cts_hdmi_sys_clk_status();
+    aml_write_reg32(P_HDMI_ADDR_PORT, addr);
+    aml_write_reg32(P_HDMI_ADDR_PORT, addr);
+    data = aml_read_reg32(P_HDMI_DATA_PORT);
+
+    raw_local_irq_restore(fiq_flag);
+    spin_unlock_irqrestore(&reg_lock, flags);
+    return (data);
+}
+
+void hdmi_wr_reg(unsigned int addr, unsigned int data)
+{
+    unsigned long flags, fiq_flag;
+    spin_lock_irqsave(&reg_lock, flags);
+    raw_local_save_flags(fiq_flag);
+    local_fiq_disable();
+
+    check_cts_hdmi_sys_clk_status();
+    aml_write_reg32(P_HDMI_ADDR_PORT, addr);
+    aml_write_reg32(P_HDMI_ADDR_PORT, addr);
+    aml_write_reg32(P_HDMI_DATA_PORT, data);
+    raw_local_irq_restore(fiq_flag);
+    spin_unlock_irqrestore(&reg_lock, flags);
+}
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#define waiting_aocec_free()    while(aml_read_reg32(P_AO_CEC_RW_REG) & (1<<23))
+unsigned long aocec_rd_reg (unsigned long addr)
+{
+    unsigned long data32;
+    unsigned long flags;
+    waiting_aocec_free();
+    spin_lock_irqsave(&reg_lock2, flags);
+    data32  = 0;
+    data32 |= 0     << 16;  // [16]     cec_reg_wr
+    data32 |= 0     << 8;   // [15:8]   cec_reg_wrdata
+    data32 |= addr  << 0;   // [7:0]    cec_reg_addr
+    aml_write_reg32(P_AO_CEC_RW_REG, data32);
+
+    waiting_aocec_free();
+    data32 = ((aml_read_reg32(P_AO_CEC_RW_REG)) >> 24) & 0xff;
+    spin_unlock_irqrestore(&reg_lock2, flags);
+    return (data32);
+} /* aocec_rd_reg */
+
+void aocec_wr_reg (unsigned long addr, unsigned long data)
+{
+    unsigned long data32;
+    unsigned long flags;
+    waiting_aocec_free();
+    spin_lock_irqsave(&reg_lock2, flags);
+    data32  = 0;
+    data32 |= 1     << 16;  // [16]     cec_reg_wr
+    data32 |= data  << 8;   // [15:8]   cec_reg_wrdata
+    data32 |= addr  << 0;   // [7:0]    cec_reg_addr
+    aml_write_reg32(P_AO_CEC_RW_REG, data32);
+    spin_unlock_irqrestore(&reg_lock2, flags);
+    waiting_aocec_free();
+    //waiting_aocec_free();
+} /* aocec_wr_only_reg */
+#endif
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/tvenc_conf.h b/arch/arm/mach-meson8b/hdmi_tx_hw/tvenc_conf.h
new file mode 100644
index 000000000000..0be2cfe625b3
--- /dev/null
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/tvenc_conf.h
@@ -0,0 +1,231 @@
+typedef struct reg_s {
+    uint reg;
+    uint val;
+} reg_t;
+
+static  reg_t hdmi_tvenc_regs_480i[] = {
+    /*1st col: recommmended, but eof/sof/vs_lines +/- 1 from spec; 2nd col: from simu */
+    {ENCP_VIDEO_MODE,             0      /*0     */  },
+    {ENCI_DE_H_BEGIN,             229    /*0xeb  */  },
+    {ENCI_DE_H_END,               1669   /*0x68b */  },
+    {ENCI_DE_V_BEGIN_EVEN,        18     /*0x11  */  },
+    {ENCI_DE_V_END_EVEN,          258    /*0x101 */  },
+    {ENCI_DE_V_BEGIN_ODD,         19     /*0x12  */  },
+    {ENCI_DE_V_END_ODD,           259    /*0x102 */  },
+    {ENCI_DVI_HSO_BEGIN,          1707   /*0x6b1 */  },
+    {ENCI_DVI_HSO_END,            115    /*0x79  */  },
+    {ENCI_DVI_VSO_BLINE_EVN,      0      /*0x105 */  },
+    {ENCI_DVI_VSO_ELINE_EVN,      2      /*0x1   */  },
+    {ENCI_DVI_VSO_BEGIN_EVN,      1707   /*0x357 */  },
+    {ENCI_DVI_VSO_END_EVN,        1707   /*0x6b1 */  },
+    {ENCI_DVI_VSO_BLINE_ODD,      0      /*0x105 */  },
+    {ENCI_DVI_VSO_BEGIN_ODD,      849    /*0x6b1 */  },
+    {ENCI_DVI_VSO_ELINE_ODD,      3      /*0x2   */  },
+    {ENCI_DVI_VSO_END_ODD,        849    /*0x357 */  },
+    {VENC_DVI_SETTING,            0x809c /*0x809c*/  },
+    {VENC_DVI_SETTING_MORE,       0x0    /*0x0   */  },
+    {0,0}
+};
+
+static  reg_t hdmi_tvenc_regs_576i[] = {
+    {ENCP_VIDEO_MODE,                    0x00004000},
+    {ENCI_DE_H_BEGIN,                    0x000000f9},
+    {ENCI_DE_H_END,                      0x00000699},
+    {ENCI_DE_V_BEGIN_EVEN,               0x00000015},
+    {ENCI_DE_V_END_EVEN,                 0x00000135},
+    {ENCI_DE_V_BEGIN_ODD,                0x00000016},
+    {ENCI_DE_V_END_ODD,                  0x00000136},
+    {ENCI_DVI_HSO_BEGIN,                 0x000006b1},
+    {ENCI_DVI_HSO_END,                   0x0000006f},
+    {ENCI_DVI_VSO_BLINE_EVN,             0x00000137},
+    {ENCI_DVI_VSO_ELINE_EVN,             0x00000001},
+    {ENCI_DVI_VSO_BEGIN_EVN,             0x00000351},
+    {ENCI_DVI_VSO_END_EVN,               0x000006b1},
+    {ENCI_DVI_VSO_BLINE_ODD,             0x00000137},
+    {ENCI_DVI_VSO_BEGIN_ODD,             0x000006b1},
+    {ENCI_DVI_VSO_ELINE_ODD,             0x00000002},
+    {ENCI_DVI_VSO_END_ODD,               0x00000351},
+    {VENC_DVI_SETTING,                   0x0000809c},
+    {VENC_DVI_SETTING_MORE,              0x00000000},
+    {0,0}
+};
+
+static  reg_t hdmi_tvenc_regs_1080i[] = {
+    {ENCP_VIDEO_MODE,                    0x00005ffc},
+    {ENCP_DE_H_BEGIN,                    0x00000210},
+    {ENCP_DE_H_END,                      0x00001110},
+    {ENCP_DE_V_BEGIN_EVEN,               0x00000014},
+    {ENCP_DE_V_END_EVEN,                 0x00000230},
+    {ENCP_DE_V_BEGIN_ODD,                0x00000247},
+    {ENCP_DE_V_END_ODD,                  0x00000463},
+    {ENCP_DVI_HSO_BEGIN,                 0x00000090},
+    {ENCP_DVI_HSO_END,                   0x000000e8},
+    {ENCP_DVI_VSO_BLINE_EVN,             0x00000000},
+    {ENCP_DVI_VSO_ELINE_EVN,             0x00000005},
+    {ENCP_DVI_VSO_BEGIN_EVN,             0x00000090},
+    {ENCP_DVI_VSO_END_EVN,               0x00000090},
+    {ENCP_DVI_VSO_BLINE_ODD,             0x00000232},
+    {ENCP_DVI_VSO_ELINE_ODD,             0x00000237},
+    {ENCP_DVI_VSO_BEGIN_ODD,             0x00000928},
+    {ENCP_DVI_VSO_END_ODD,               0x00000928},
+    {VENC_DVI_SETTING,                   0x000080ad},
+    {VENC_DVI_SETTING_MORE,              0x00000000}, 
+    {0,0}
+};    
+
+static  reg_t hdmi_tvenc_regs_1080i50[] = {
+    {ENCP_VIDEO_MODE,                    0x00005ffc},
+    {ENCP_DE_H_BEGIN,                    0x00000210},
+    {ENCP_DE_H_END,                      0x00001110},
+    {ENCP_DE_V_BEGIN_EVEN,               0x00000014},
+    {ENCP_DE_V_END_EVEN,                 0x00000230},
+    {ENCP_DE_V_BEGIN_ODD,                0x00000247},
+    {ENCP_DE_V_END_ODD,                  0x00000463},
+    {ENCP_DVI_HSO_BEGIN,                 0x00000090},
+    {ENCP_DVI_HSO_END,                   0x000000e8},
+    {ENCP_DVI_VSO_BLINE_EVN,             0x00000000},
+    {ENCP_DVI_VSO_ELINE_EVN,             0x00000005},
+    {ENCP_DVI_VSO_BEGIN_EVN,             0x00000090},
+    {ENCP_DVI_VSO_END_EVN,               0x00000090},
+    {ENCP_DVI_VSO_BLINE_ODD,             0x00000232},
+    {ENCP_DVI_VSO_ELINE_ODD,             0x00000237},
+    {ENCP_DVI_VSO_BEGIN_ODD,             0x00000ae0},
+    {ENCP_DVI_VSO_END_ODD,               0x00000ae0},
+    {VENC_DVI_SETTING,                   0x000080ad},
+    {VENC_DVI_SETTING_MORE,              0x00000000}, 
+    {0,0}
+};    
+
+static  reg_t hdmi_tvenc_regs_480p[] = {
+    {ENCP_VIDEO_MODE,                   /*0x4000 */ 0x00004000},
+    {ENCP_DE_H_BEGIN,                   /*0xdc   */ 0x000000d7},
+    {ENCP_DE_H_END,                     /*0x67c  */ 0x00000677},
+    {ENCP_DE_V_BEGIN_EVEN,              /*0x2a   */ 0x0000002b},
+    {ENCP_DE_V_END_EVEN,                /*0x2a   */ 0x0000020b},
+    {ENCP_DVI_HSO_BEGIN,                /*0x69c  */ 0x00000697},
+    {ENCP_DVI_HSO_END,                  /*0x64   */ 0x0000005f},
+    {ENCP_DVI_VSO_BLINE_EVN,            /*0x5    */ 0x00000006},
+    {ENCP_DVI_VSO_ELINE_EVN,            /*0xb    */ 0x0000000c},
+    {ENCP_DVI_VSO_BEGIN_EVN,            /*0x69c  */ 0x00000697},
+    {ENCP_DVI_VSO_END_EVN,              /*0x69c  */ 0x00000697},
+    {VENC_DVI_SETTING_MORE,             /*0x0    */ 0x00000000},
+    {VENC_DVI_SETTING,                  /*0x80ad */ 0x000080ad},
+    {0,0}
+};    
+
+static  reg_t hdmi_tvenc_regs_576p[] = {
+    {ENCP_VIDEO_MODE,                    0x00004000},
+    {ENCP_DE_H_BEGIN,                    0x000000ef},
+    {ENCP_DE_H_END,                      0x0000068f},
+    {ENCP_DE_V_BEGIN_EVEN,               0x0000002d},
+    {ENCP_DE_V_END_EVEN,                 0x0000026d},
+    {ENCP_DVI_HSO_BEGIN,                 0x000006a7},
+    {ENCP_DVI_HSO_END,                   0x00000067},
+    {ENCP_DVI_VSO_BLINE_EVN,             0x00000000},
+    {ENCP_DVI_VSO_ELINE_EVN,             0x00000005},
+    {ENCP_DVI_VSO_BEGIN_EVN,             0x000006a7},
+    {ENCP_DVI_VSO_END_EVN,               0x000006a7},
+    {VENC_DVI_SETTING_MORE,              0x00000000},
+    {VENC_DVI_SETTING,                   0x000080ad},
+    {0,0}
+};    
+
+static  reg_t hdmi_tvenc_regs_720p[] = {
+    {ENCP_VIDEO_MODE,                    0x00004040},
+    {ENCP_DE_H_BEGIN,                    0x0000028a},
+    {ENCP_DE_H_END,                      0x00000c8a},
+    {ENCP_DE_V_BEGIN_EVEN,               0x0000001d},
+    {ENCP_DE_V_END_EVEN,                 0x000002ed},
+    {ENCP_DVI_HSO_BEGIN,                 0x00000082},
+    {ENCP_DVI_HSO_END,                   0x000000d2},
+    {ENCP_DVI_VSO_BLINE_EVN,             0x00000004},
+    {ENCP_DVI_VSO_ELINE_EVN,             0x00000009},
+    {ENCP_DVI_VSO_BEGIN_EVN,             0x00000082},
+    {ENCP_DVI_VSO_END_EVN,               0x00000082},
+    {VENC_DVI_SETTING_MORE,              0x00000000},
+    {VENC_DVI_SETTING,                   0x000080ad},
+    {0,0}
+};    
+
+static  reg_t hdmi_tvenc_regs_1080p[] = {
+    {ENCP_VIDEO_MODE,                    0x00004040},
+    {ENCP_DE_H_BEGIN,                    0x00000112},
+    {ENCP_DE_H_END,                      0x00000892},
+    {ENCP_DE_V_BEGIN_EVEN,               0x00000029},
+    {ENCP_DE_V_END_EVEN,                 0x00000461},
+    {ENCP_DVI_HSO_BEGIN,                 0x00000052},
+    {ENCP_DVI_HSO_END,                   0x0000007e},
+    {ENCP_DVI_VSO_BLINE_EVN,             0x00000000},
+    {ENCP_DVI_VSO_ELINE_EVN,             0x00000005},
+    {ENCP_DVI_VSO_BEGIN_EVN,             0x00000052},
+    {ENCP_DVI_VSO_END_EVN,               0x00000052},
+    {VENC_DVI_SETTING_MORE,              0x00000000},
+    {VENC_DVI_SETTING,                   0x0000809d},
+    {0,0}
+};    
+
+static  reg_t hdmi_tvenc_regs_720p50[] = {
+    {ENCP_VIDEO_MODE,                    0x00004040},
+    {ENCP_DE_H_BEGIN,                    0x0000028a},
+    {ENCP_DE_H_END,                      0x00000c8a},
+    {ENCP_DE_V_BEGIN_EVEN,               0x0000001d},
+    {ENCP_DE_V_END_EVEN,                 0x000002ed},
+    {ENCP_DVI_HSO_BEGIN,                 0x00000082},
+    {ENCP_DVI_HSO_END,                   0x000000d2},
+    {ENCP_DVI_VSO_BLINE_EVN,             0x00000004},
+    {ENCP_DVI_VSO_ELINE_EVN,             0x00000009},
+    {ENCP_DVI_VSO_BEGIN_EVN,             0x00000082},
+    {ENCP_DVI_VSO_END_EVN,               0x00000082},
+    {VENC_DVI_SETTING_MORE,              0x00000000},
+    {VENC_DVI_SETTING,                   0x000080ad},
+    {0,0}
+};    
+
+static  reg_t hdmi_tvenc_regs_1080p50[] = {
+    {ENCP_VIDEO_MODE,                    0x00004040},
+    {ENCP_DE_H_BEGIN,                    0x00000112},
+    {ENCP_DE_H_END,                      0x00000892},
+    {ENCP_DE_V_BEGIN_EVEN,               0x00000029},
+    {ENCP_DE_V_END_EVEN,                 0x00000461},
+    {ENCP_DVI_HSO_BEGIN,                 0x00000052},
+    {ENCP_DVI_HSO_END,                   0x0000007e},
+    {ENCP_DVI_VSO_BLINE_EVN,             0x00000000},
+    {ENCP_DVI_VSO_ELINE_EVN,             0x00000005},
+    {ENCP_DVI_VSO_BEGIN_EVN,             0x00000052},
+    {ENCP_DVI_VSO_END_EVN,               0x00000052},
+    {VENC_DVI_SETTING_MORE,              0x00000000},
+    {VENC_DVI_SETTING,                   0x0000809d},
+    {0,0}
+};    
+
+typedef struct hdmi_tvenc_config_
+{
+    int vic;
+    reg_t* reg_set;
+}hdmi_tvenc_config_t;
+
+static const hdmi_tvenc_config_t hdmi_tvenc_configs[] = {
+    {HDMI_640x480p60  ,          NULL          },
+    {HDMI_480p60,                hdmi_tvenc_regs_480p},
+    {HDMI_480p60_16x9,           hdmi_tvenc_regs_480p},
+    {HDMI_720p60,                hdmi_tvenc_regs_720p},
+    {HDMI_1080i60,               hdmi_tvenc_regs_1080i},
+    {HDMI_480i60,                hdmi_tvenc_regs_480i},
+    {HDMI_480i60_16x9,           hdmi_tvenc_regs_480i},
+    {HDMI_1440x480p60  ,         NULL          },
+    {HDMI_1440x480p60_16x9  ,    NULL          },
+    {HDMI_1080p60 ,              hdmi_tvenc_regs_1080p},
+    {HDMI_576p50,                hdmi_tvenc_regs_576p},
+    {HDMI_576p50_16x9,           hdmi_tvenc_regs_576p},
+    {HDMI_720p50,                hdmi_tvenc_regs_720p50},
+    {HDMI_1080i50,               hdmi_tvenc_regs_1080i50},
+    {HDMI_576i50,                hdmi_tvenc_regs_576i},
+    {HDMI_576i50_16x9,           hdmi_tvenc_regs_576i},
+    {HDMI_1080p50 ,              hdmi_tvenc_regs_1080p50},
+    {HDMI_1080p24,               hdmi_tvenc_regs_1080p},
+    {HDMI_1080p25,               hdmi_tvenc_regs_1080p},
+    {HDMI_1080p30,               hdmi_tvenc_regs_1080p},
+    {HDMI_Unkown,               NULL},
+};
+
+
diff --git a/arch/arm/mach-meson8b/headsmp.S b/arch/arm/mach-meson8b/headsmp.S
new file mode 100644
index 000000000000..58b71f1c2fc9
--- /dev/null
+++ b/arch/arm/mach-meson8b/headsmp.S
@@ -0,0 +1,35 @@
+/*
+ *  linux/arch/arm/mach-realview/headsmp.S
+ *
+ *  Copyright (c) 2003 ARM Limited
+ *  All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/linkage.h>
+#include <linux/init.h>
+
+	__CPUINIT
+
+ENTRY(meson_secondary_startup)
+	mrc	p15, 0, r0, c0, c0, 5		@Read MPIDR
+	and	r0, r0, #15							@Mask CPUID
+	adr	r4, 1f
+	ldmia	r4, {r5, r6}
+	sub	r4, r4, r5
+	add	r6, r6, r4
+pen:	ldr	r7, [r6]
+	cmp	r7, r0
+	bne	pen
+
+	/*
+	 * we've been released from the holding pen: secondary_stack
+	 * should now contain the SVC stack for this core
+	 */
+	b	secondary_startup
+
+	.align
+1:	.long	.
+	.long	pen_release
diff --git a/arch/arm/mach-meson8b/hotplug-asm.S b/arch/arm/mach-meson8b/hotplug-asm.S
new file mode 100644
index 000000000000..9d322fcec5e3
--- /dev/null
+++ b/arch/arm/mach-meson8b/hotplug-asm.S
@@ -0,0 +1,73 @@
+#include <linux/linkage.h>
+
+#include <asm/assembler.h>
+#include <asm/cache.h>
+#include <asm/cp15.h>
+#include <asm/hardware/cache-l2x0.h>
+
+.macro cpu_id, rd
+	mrc	p15, 0, \rd, c0, c0, 5
+	and	\rd, \rd, #0xF
+.endm
+
+.macro mov32, reg, val
+	movw	\reg, #:lower16:\val
+	movt	\reg, #:upper16:\val
+.endm
+
+.macro exit_smp, tmp1, tmp2
+	mrc	p15, 0, \tmp1, c1, c0, 1	@ ACTLR
+	bic	\tmp1, \tmp1, #(1<<6) | (1<<0)	@ clear ACTLR.SMP | ACTLR.FW
+	mcr	p15, 0, \tmp1, c1, c0, 1	@ ACTLR
+	isb
+	cpu_id	\tmp1
+	mov	\tmp1, \tmp1, lsl #2
+	mov	\tmp2, #0xf
+	mov	\tmp2, \tmp2, lsl \tmp1
+	mov32	\tmp1, 0xFE00100C
+	str	\tmp2, [\tmp1]			@ invalidate SCU tags for CPU
+	dsb
+.endm
+
+ENTRY(meson_cleanup)
+	stmfd	sp!, {r0-r11, lr}
+	
+	@ disable interrupt
+	mrs r4, cpsr
+	orr r5, r4, #0xc0
+	msr cpsr_c, r5
+	
+	@ icache disable
+	mrc p15, 0, r4, c1, c0, 0
+	bic r4, r4, #(CR_I)
+	mcr p15, 0, r4, c1, c0, 0
+	
+	@ invalid i-cache
+	mov r4, #0
+	mcr p15, 0, r4, c7, c5, 6 @invalid BTAC
+	mcr p15, 0, r4, c7, c5, 0 @invalid icache
+	dsb
+	nop
+	nop
+	isb
+	
+	@ dcache disable
+	mrc p15, 0, r4, c1, c0, 0
+	bic r4, r4, #CR_C
+	mcr p15, 0, r4, c1, c0, 0
+	dsb
+	isb
+	
+	/* Flush the D-cache */
+	bl	v7_flush_dcache_louis
+	
+	mov r4, #0
+	mcr p15, 0, r4, c7, c10, 4
+	dsb 
+	isb
+	
+	/* Trun off coherency */
+	exit_smp r4, r5
+		
+	ldmfd	sp!, {r0-r11, pc}
+ENDPROC(meson_cleanup)
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/hotplug.c b/arch/arm/mach-meson8b/hotplug.c
new file mode 100644
index 000000000000..62a5cd2cf1f2
--- /dev/null
+++ b/arch/arm/mach-meson8b/hotplug.c
@@ -0,0 +1,60 @@
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/jiffies.h>
+#include <linux/smp.h>
+#include <linux/io.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/cpu.h>
+#include <asm/smp_scu.h>
+#include <asm/hardware/gic.h>
+#include <asm/smp_plat.h>
+#include <asm/smp_scu.h>
+#include <asm/cacheflush.h>
+#include <asm/mach-types.h>
+#include <asm/cp15.h>
+
+extern void meson_cleanup(void);
+
+int meson_cpu_kill(unsigned int cpu)
+{
+	unsigned int value;
+	unsigned int offset=(cpu<<3);
+	do{
+		udelay(10);
+		value=aml_read_reg32(MESON_CPU_POWER_CTRL_REG);
+	}while((value&(3<<offset)) != (3<<offset));
+
+	udelay(10);
+	meson_set_cpu_power_ctrl(cpu, 0);
+	return 1;
+}
+
+
+void meson_cpu_die(unsigned int cpu)
+{
+	meson_set_cpu_ctrl_reg(cpu, 0);
+	flush_cache_all();
+	dsb();
+	dmb();	
+
+	meson_cleanup();
+	aml_set_reg32_bits(MESON_CPU_POWER_CTRL_REG,0x3,(cpu << 3),2);
+	asm volatile(
+		"dsb\n"
+		"wfi\n"
+	);
+	BUG();
+}
+
+int meson_cpu_disable(unsigned int cpu)
+{
+	/*
+	 * we don't allow CPU 0 to be shutdown (it is still too special
+	 * e.g. clock tick interrupts)
+	 */
+	return cpu == 0 ? -EPERM : 0;
+}
+
diff --git a/arch/arm/mach-meson8b/include/mach/am_eth_reg.h b/arch/arm/mach-meson8b/include/mach/am_eth_reg.h
new file mode 100644
index 000000000000..cd2e47dc9f52
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/am_eth_reg.h
@@ -0,0 +1,198 @@
+/*******************************************************************
+ *
+ *  Copyright C 2013 by Amlogic, Inc. All Rights Reserved.
+ *
+ *  Author: beijing-platform
+ *  Created: 2013-9-7
+ *
+ *******************************************************************/
+#ifndef __ETH_REG_H_
+#define __ETH_REG_H_
+#define ETH_DMA_0_Bus_Mode                  (0x1000)
+#define ETH_DMA_1_Tr_Poll_Demand        (0x1004)
+#define ETH_DMA_2_Re_Poll_Demand        (0x1008)
+#define ETH_DMA_3_Re_Descriptor_List_Addr   (0x100C)
+#define ETH_DMA_4_Tr_Descriptor_List_Addr   (0x1010)
+#define ETH_DMA_5_Status            (0x1014)
+#define ETH_DMA_6_Operation_Mode        (0x1018)
+#define ETH_DMA_7_Interrupt_Enable      (0x101C)
+#define ETH_DMA_8_Missed_Frame_and_Overflow (0x1020)
+#define ETH_DMA_9_Reserved          (0x1024)
+#define ETH_DMA_10_Reserved         (0x1028)
+#define ETH_DMA_11_Reserved         (0x102c)
+#define ETH_DMA_12_Reserved         (0x1030)
+#define ETH_DMA_13_Reserved         (0x1034)
+#define ETH_DMA_14_Reserved         (0x1038)
+#define ETH_DMA_15_Reserved         (0x103c)
+#define ETH_DMA_16_Reserved         (0x1040)
+#define ETH_DMA_17_Reserved         (0x1044)
+#define ETH_DMA_18_Curr_Host_Tr_Descriptor  (0x1048)
+#define ETH_DMA_19_Curr_Host_Re_Descriptor  (0x104C)
+#define ETH_DMA_20_Curr_Host_Tr_Buffer_Addr (0x1050)
+#define ETH_DMA_21_Curr_Host_Re_Buffer_Addr (0x1054)
+#define ETH_MAC_0_Configuration         (0x0000)
+#define ETH_MAC_1_Frame_Filter          (0x0004)
+#define ETH_MAC_2_Hash_Table_High       (0x0008)
+#define ETH_MAC_3_Hash_Table_Low        (0x000C)
+#define ETH_MAC_4_GMII_Addr         (0x0010)
+#define ETH_MAC_5_GMII_Data         (0x0014)
+#define ETH_MAC_6_Flow_Control          (0x0018)
+#define ETH_MAC_7_VLAN_Tag          (0x001C)
+#define ETH_MAC_8_Version           (0x0020)
+#define ETH_MAC_9_Reserved          (0x0024)
+#define ETH_MAC_Remote_Wake_Up_Frame_Filter (0x0028)
+#define ETH_MAC_PMT_Control_and_Status      (0x002C)
+#define ETH_MAC_12_Reserved         (0x0030)
+#define ETH_MAC_13_Reserved         (0x0034)
+#define ETH_MAC_Interrupt           (0x0038)
+#define ETH_MAC_Interrupt_Mask          (0x003C)
+#define ETH_MAC_Addr0_High          (0x0040)
+#define ETH_MAC_Addr0_Low           (0x0044)
+#define ETH_MAC_Addr1_High          (0x0048)
+#define ETH_MAC_Addr1_Low           (0x004C)
+#define ETH_MAC_Addr2_High          (0x0050)
+#define ETH_MAC_Addr2_Low           (0x0054)
+#define ETH_MAC_Addr3_High          (0x0058)
+#define ETH_MAC_Addr3_Low           (0x005C)
+#define ETH_MAC_Addr4_High          (0x0060)
+#define ETH_MAC_Addr4_Low           (0x0064)
+#define ETH_MAC_Addr5_High          (0x0068)
+#define ETH_MAC_Addr5_Low           (0x006C)
+#define ETH_MAC_Addr6_High          (0x0070)
+#define ETH_MAC_Addr6_Low           (0x0074)
+#define ETH_MAC_Addr7_High          (0x0078)
+#define ETH_MAC_Addr7_Low           (0x007C)
+#define ETH_MAC_Addr8_High          (0x0080)
+#define ETH_MAC_Addr8_Low           (0x0084)
+#define ETH_MAC_Addr9_High          (0x0088)
+#define ETH_MAC_Addr9_Low           (0x008C)
+#define ETH_MAC_Addr10_High         (0x0090)
+#define ETH_MAC_Addr10_Low          (0x0094)
+#define ETH_MAC_Addr11_High         (0x0098)
+#define ETH_MAC_Addr11_Low          (0x009C)
+#define ETH_MAC_Addr12_High         (0x00A0)
+#define ETH_MAC_Addr12_Low          (0x00A4)
+#define ETH_MAC_Addr13_High         (0x00A8)
+#define ETH_MAC_Addr13_Low          (0x00AC)
+#define ETH_MAC_Addr14_High         (0x00B0)
+#define ETH_MAC_Addr14_Low          (0x00B4)
+#define ETH_MAC_Addr15_High         (0x00B8)
+#define ETH_MAC_Addr15_Low          (0x00BC)
+#define ETH_MAC_48_AN_Control           (0x00C0)
+#define ETH_MAC_49_AN_Status            (0x00C4)
+#define ETH_MAC_50_AN_Advertisement     (0x00C8)
+#define ETH_MAC_51_AN_Link_Partner_Ability  (0x00CC)
+#define ETH_MAC_52_AN_Expansion         (0x00D0)
+#define ETH_MAC_53_TBI_Extended_Status      (0x00D4)
+#define ETH_MAC_54_SGMII_RGMII_Status       (0x00D8)
+#define ETH_MAC_55_Reserved         (0x00DC)
+#define ETH_MAC_56_Reserved         (0x00E0)
+#define ETH_MAC_57_Reserved         (0x00E4)
+#define ETH_MAC_58_Reserved         (0x00E8)
+#define ETH_MAC_59_Reserved         (0x00EC)
+#define ETH_MAC_60_Reserved         (0x00F0)
+#define ETH_MAC_61_Reserved         (0x00F4)
+#define ETH_MAC_62_Reserved         (0x00F8)
+#define ETH_MAC_63_Reserved         (0x00FC)
+#define ETH_MMC_cntrl               (0x0100)
+#define ETH_MMC_intr_rx             (0x0104)
+#define ETH_MMC_intr_tx             (0x0108)
+#define ETH_MMC_intr_mask_rx            (0x010C)
+#define ETH_MMC_intr_mask_tx            (0x0110)
+#define ETH_MMC_txoctetcount_gb         (0x0114)
+#define ETH_MMC_txframecount_gb         (0x0118)
+#define ETH_MMC_txbroadcastframes_g     (0x011C)
+#define ETH_MMC_txmulticastframes_g     (0x0120)
+#define ETH_MMC_tx64octets_gb           (0x0124)
+#define ETH_MMC_tx65to127octets_gb      (0x0128)
+#define ETH_MMC_tx128to255octets_gb     (0x012C)
+#define ETH_MMC_tx256to511octets_gb     (0x0130)
+#define ETH_MMC_tx512to1023octets_gb        (0x0134)
+#define ETH_MMC_tx1024tomaxoctets_gb        (0x0138)
+#define ETH_MMC_txunicastframes_gb      (0x013C)
+#define ETH_MMC_txmulticastframes_gb        (0x0140)
+#define ETH_MMC_txbroadcastframes_gb        (0x0144)
+#define ETH_MMC_txunderflowerror        (0x0148)
+#define ETH_MMC_txsinglecol_g           (0x014C)
+#define ETH_MMC_txmulticol_g            (0x0150)
+#define ETH_MMC_txdeferred          (0x0154)
+#define ETH_MMC_txlatecol           (0x0158)
+#define ETH_MMC_txexesscol          (0x015C)
+#define ETH_MMC_txcarriererror          (0x0160)
+#define ETH_MMC_txoctetcount_g          (0x0164)
+#define ETH_MMC_txframecount_g          (0x0168)
+#define ETH_MMC_txexcessdef         (0x016C)
+#define ETH_MMC_txpauseframes           (0x0170)
+#define ETH_MMC_txvlanframes_g          (0x0174)
+#define ETH_MMC_94_Reserved         (0x0178)
+#define ETH_MMC_95_Reserved         (0x017C)
+#define ETH_MMC_rxframecount_gb         (0x0180)
+#define ETH_MMC_rxoctetcount_gb         (0x0184)
+#define ETH_MMC_rxoctetcount_g          (0x0188)
+#define ETH_MMC_rxbroadcastframes_g     (0x018C)
+#define ETH_MMC_rxmulticastframes_g     (0x0190)
+#define ETH_MMC_rxcrcerror          (0x0194)
+#define ETH_MMC_rxalignmenterror        (0x0198)
+#define ETH_MMC_rxrunterror         (0x019C)
+#define ETH_MMC_rxjabbererror           (0x01A0)
+#define ETH_MMC_rxundersize_g           (0x01A4)
+#define ETH_MMC_rxoversize_g            (0x01A8)
+#define ETH_MMC_rx64octets_gb           (0x01AC)
+#define ETH_MMC_rx65to127octets_gb      (0x01B0)
+#define ETH_MMC_rx128to255octets_gb     (0x01B4)
+#define ETH_MMC_rx256to511octets_gb     (0x01B8)
+#define ETH_MMC_rx512to1023octets_gb        (0x01BC)
+#define ETH_MMC_rx1024tomaxoctets_gb        (0x01C0)
+#define ETH_MMC_rxunicastframes_g       (0x01C4)
+#define ETH_MMC_rxlengtherror           (0x01C8)
+#define ETH_MMC_rxoutofrangetype        (0x01CC)
+#define ETH_MMC_rxpauseframes           (0x01D0)
+#define ETH_MMC_rxfifooverflow          (0x01D4)
+#define ETH_MMC_rxvlanframes_gb         (0x01D8)
+#define ETH_MMC_rxwatchdogerror         (0x01DC)
+#define ETH_MMC_120_Reserved            (0x01E0)
+#define ETH_MMC_121_Reserved            (0x01E4)
+#define ETH_MMC_122_Reserved            (0x01E8)
+#define ETH_MMC_123_Reserved            (0x01EC)
+#define ETH_MMC_124_Reserved            (0x01F0)
+#define ETH_MMC_125_Reserved            (0x01F4)
+#define ETH_MMC_126_Reserved            (0x01F8)
+#define ETH_MMC_127_Reserved            (0x01FC)
+#define ETH_MMC_ipc_intr_mask_rx        (0x0200)
+#define ETH_MMC_129_Reserved            (0x0204)
+#define ETH_MMC_ipc_intr_rx         (0x0208)
+#define ETH_MMC_131_Reserved            (0x020C)
+#define ETH_MMC_rxipv4_gd_frms          (0x0210)
+#define ETH_MMC_rxipv4_hdrerr_frms      (0x0214)
+#define ETH_MMC_rxipv4_nopay_frms       (0x0218)
+#define ETH_MMC_rxipv4_frag_frms        (0x021C)
+#define ETH_MMC_rxipv4_udsbl_frms       (0x0220)
+#define ETH_MMC_rxipv6_gd_frms          (0x0224)
+#define ETH_MMC_rxipv6_hdrerr_frms      (0x0228)
+#define ETH_MMC_rxipv6_nopay_frms       (0x022C)
+#define ETH_MMC_rxudp_gd_frms           (0x0230)
+#define ETH_MMC_rxudp_err_frms          (0x0234)
+#define ETH_MMC_rxtcp_gd_frms           (0x0238)
+#define ETH_MMC_rxtcp_err_frms          (0x023C)
+#define ETH_MMC_rxicmp_gd_frms          (0x0240)
+#define ETH_MMC_rxicmp_err_frms         (0x0244)
+#define ETH_MMC_146_Reserved            (0x0248)
+#define ETH_MMC_147_Reserved            (0x024C)
+#define ETH_MMC_rxipv4_gd_octets        (0x0250)
+#define ETH_MMC_rxipv4_hdrerr_octets        (0x0254)
+#define ETH_MMC_rxipv4_nopay_octets     (0x0258)
+#define ETH_MMC_rxipv4_frag_octets      (0x025C)
+#define ETH_MMC_rxipv4_udsbl_octets     (0x0260)
+#define ETH_MMC_rxipv6_gd_octets        (0x0264)
+#define ETH_MMC_rxipv6_hdrerr_octets        (0x0268)
+#define ETH_MMC_rxipv6_nopay_octets     (0x026C)
+#define ETH_MMC_rxudp_gd_octets         (0x0270)
+#define ETH_MMC_rxudp_err_octets        (0x0274)
+#define ETH_MMC_rxtcp_gd_octets         (0x0278)
+#define ETH_MMC_rxtcp_err_octets        (0x027C)
+#define ETH_MMC_rxicmp_gd_octets        (0x0280)
+#define ETH_MMC_rxicmp_err_octets       (0x0284)
+
+
+#endif
+
diff --git a/arch/arm/mach-meson8b/include/mach/am_regs.h b/arch/arm/mach-meson8b/include/mach/am_regs.h
new file mode 100644
index 000000000000..7c13eba9caba
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/am_regs.h
@@ -0,0 +1,17 @@
+/*
+ * mach/am_regs.h
+ *
+ */
+
+#ifndef __AM_REGS_H_
+#define __AM_REGS_H_
+
+#include <linux/io.h>
+#include <plat/io.h>
+#include "io.h"
+#include "register.h"
+#include "cpu.h"
+#include "canvas.h"
+#include "misc.h"
+
+#endif /* AM_REGS_H_ */
diff --git a/arch/arm/mach-meson8b/include/mach/avosstyle_io.h b/arch/arm/mach-meson8b/include/mach/avosstyle_io.h
new file mode 100644
index 000000000000..b79e23983711
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/avosstyle_io.h
@@ -0,0 +1,105 @@
+/*
+ *
+ * arch/arm/mach-meson8b/include/mach/am_regs.h
+ *
+ *  Copyright (C) 2011-2013 AMLOGIC, INC.
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ * Basic register address definitions in physical memory and
+ * some block defintions for core devices like the timer.
+ */
+
+#ifndef __MACH_MESSON8B_AVOSSTYL_IO_H
+#define __MACH_MESSON8B_AVOSSTYL_IO_H
+
+#ifndef __ASSEMBLY__
+#define WRITE_REG(bus,reg, val) aml_write_reg32( bus##_REG_ADDR(reg),val)
+#define READ_REG(bus,reg) (aml_read_reg32(bus##_REG_ADDR(reg)))
+#define WRITE_REG_BITS(bus,reg, val, start, len) \
+    aml_set_reg32_bits(bus##_REG_ADDR(reg),	val,start,len)
+#define READ_REG_BITS(bus,reg, start, len) \
+     aml_get_reg32_bits(bus##_REG_ADDR(reg),start,len)
+#define CLEAR_REG_MASK(bus,reg, mask)   aml_clr_reg32_mask(bus##_REG_ADDR(reg), (mask))
+#define SET_REG_MASK(bus,reg, mask)     aml_set_reg32_mask(bus##_REG_ADDR(reg), (mask))
+
+#ifndef CONFIG_DISABLE_VCBUS_IO_FUNC
+///VCBUS BUS io operation
+#define WRITE_VCBUS_REG(a...)        WRITE_REG(VCBUS,a) 
+#define READ_VCBUS_REG(a...)         READ_REG(VCBUS,a)
+#define WRITE_VCBUS_REG_BITS(a...)   WRITE_REG_BITS(VCBUS,a)
+#define READ_VCBUS_REG_BITS(a...)    READ_REG_BITS(VCBUS,a)
+#define CLEAR_VCBUS_REG_MASK(a...)   CLEAR_REG_MASK(VCBUS,a)
+#define SET_VCBUS_REG_MASK(a...)     SET_REG_MASK(VCBUS,a)
+#endif
+#ifndef CONFIG_DISABLE_CBUS_IO_FUNC
+///CBUS BUS io operation
+#define WRITE_CBUS_REG(a...)        WRITE_REG(CBUS,a) 
+#define READ_CBUS_REG(a...)         READ_REG(CBUS,a)
+#define WRITE_CBUS_REG_BITS(a...)   WRITE_REG_BITS(CBUS,a)
+#define READ_CBUS_REG_BITS(a...)    READ_REG_BITS(CBUS,a)
+#define CLEAR_CBUS_REG_MASK(a...)   CLEAR_REG_MASK(CBUS,a)
+#define SET_CBUS_REG_MASK(a...)     SET_REG_MASK(CBUS,a)
+#endif
+#ifndef CONFIG_DISABLE_AXI_IO_FUNC
+///AXI BUS io operation
+#define WRITE_AXI_REG(a...)         WRITE_REG(AXI,a) 
+#define READ_AXI_REG(a...)          READ_REG(AXI,a)
+#define WRITE_AXI_REG_BITS(a...)    WRITE_REG_BITS(AXI,a)
+#define READ_AXI_REG_BITS(a...)     READ_REG_BITS(AXI,a)
+#define CLEAR_AXI_REG_MASK(a...)    CLEAR_REG_MASK(AXI,a)
+#define SET_AXI_REG_MASK(a...)      SET_REG_MASK(AXI,a)
+#endif
+#ifndef CONFIG_DISABLE_AHB_IO_FUNC
+///AHB BUS io operation
+#define WRITE_AHB_REG(a...)         WRITE_REG(AHB,a) 
+#define READ_AHB_REG(a...)          READ_REG(AHB,a)
+#define WRITE_AHB_REG_BITS(a...)    WRITE_REG_BITS(AHB,a)
+#define READ_AHB_REG_BITS(a...)     READ_REG_BITS(AHB,a)
+#define CLEAR_AHB_REG_MASK(a...)    CLEAR_REG_MASK(AHB,a)
+#define SET_AHB_REG_MASK(a...)      SET_REG_MASK(AHB,a)
+#endif
+#ifndef CONFIG_DISABLE_APB_IO_FUNC
+///APB BUS io operation
+#define WRITE_APB_REG(a...)         WRITE_REG(APB,a) 
+#define READ_APB_REG(a...)          READ_REG(APB,a)
+#define WRITE_APB_REG_BITS(a...)    WRITE_REG_BITS(APB,a)
+#define READ_APB_REG_BITS(a...)     READ_REG_BITS(APB,a)
+#define CLEAR_APB_REG_MASK(a...)    CLEAR_REG_MASK(APB,a)
+#define SET_APB_REG_MASK(a...)      SET_REG_MASK(APB,a)
+#endif
+
+#ifndef CONFIG_DISABLE_MMC_IO_FUNC
+///APB BUS io operation
+#define WRITE_MMC_REG(a...)         WRITE_REG(MMC,a) 
+#define READ_MMC_REG(a...)          READ_REG(MMC,a)
+#define WRITE_MMC_REG_BITS(a...)    WRITE_REG_BITS(MMC,a)
+#define READ_MMC_REG_BITS(a...)     READ_REG_BITS(MMC,a)
+#define CLEAR_MMC_REG_MASK(a...)    CLEAR_REG_MASK(MMC,a)
+#define SET_MMC_REG_MASK(a...)      SET_REG_MASK(MMC,a)
+#endif
+
+#ifndef CONFIG_DISABLE_AOBUS_IO_FUNC
+///AOBUS BUS io operation
+#define WRITE_AOBUS_REG(a...)         WRITE_REG(AOBUS,a) 
+#define READ_AOBUS_REG(a...)          READ_REG(AOBUS,a)
+#define WRITE_AOBUS_REG_BITS(a...)    WRITE_REG_BITS(AOBUS,a)
+#define READ_AOBUS_REG_BITS(a...)     READ_REG_BITS(AOBUS,a)
+#define CLEAR_AOBUS_REG_MASK(a...)    CLEAR_REG_MASK(AOBUS,a)
+#define SET_AOBUS_REG_MASK(a...)      SET_REG_MASK(AOBUS,a)
+#endif
+#ifndef CONFIG_DISABLE_MPEG_IO_FUNC
+///MPEG BUS io operation
+#define WRITE_MPEG_REG      WRITE_CBUS_REG 
+#define READ_MPEG_REG       READ_CBUS_REG
+#define WRITE_MPEG_REG_BITS WRITE_CBUS_REG_BITS
+#define READ_MPEG_REG_BITS  READ_CBUS_REG_BITS
+#define CLEAR_MPEG_REG_MASK CLEAR_CBUS_REG_MASK
+#define SET_MPEG_REG_MASK   SET_CBUS_REG_MASK
+#endif
+
+
+#endif
+
+
+
+#endif //__MACH_MESSON8_REGS_H
diff --git a/arch/arm/mach-meson8b/include/mach/canvas.h b/arch/arm/mach-meson8b/include/mach/canvas.h
new file mode 100644
index 000000000000..7370ad4bd087
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/canvas.h
@@ -0,0 +1,48 @@
+#ifndef __CANVAS_H__
+#define __CANVAS_H__
+
+#define CANVAS_ADDR_LMASK       0x1fffffff
+#define CANVAS_WIDTH_LMASK      0x7
+#define CANVAS_WIDTH_LWID       3
+#define CANVAS_WIDTH_LBIT       29
+
+#define CANVAS_WIDTH_HMASK      0x1ff
+#define CANVAS_WIDTH_HBIT       0
+#define CANVAS_HEIGHT_MASK      0x1fff
+#define CANVAS_HEIGHT_BIT       9
+#define CANVAS_YWRAP            (1<<23)
+#define CANVAS_XWRAP            (1<<22)
+#define CANVAS_ADDR_NOWRAP      0x00
+#define CANVAS_ADDR_WRAPX       0x01
+#define CANVAS_ADDR_WRAPY       0x02
+#define CANVAS_BLKMODE_MASK     3
+#define CANVAS_BLKMODE_BIT      24
+#define CANVAS_BLKMODE_LINEAR   0x00
+#define CANVAS_BLKMODE_32X32    0x01
+#define CANVAS_BLKMODE_64X32    0x02
+
+#define CANVAS_LUT_INDEX_BIT    0
+#define CANVAS_LUT_INDEX_MASK   0x7
+#define CANVAS_LUT_WR_EN        (0x2 << 8)
+#define CANVAS_LUT_RD_EN        (0x1 << 8)
+
+#define MMC_PHY_CTRL              0x1380
+
+/****************logo relative part *************************************************/
+#define ASSIST_MBOX1_CLR_REG VDEC_ASSIST_MBOX1_CLR_REG
+#define ASSIST_MBOX1_MASK VDEC_ASSIST_MBOX1_MASK
+#define RESET_PSCALE        (1<<4)
+#define RESET_IQIDCT        (1<<2)
+#define RESET_MC            (1<<3)
+#define MEM_BUFCTRL_MANUAL		(1<<1)
+#define MEM_BUFCTRL_INIT		(1<<0)
+#define MEM_LEVEL_CNT_BIT       18
+#define MEM_FIFO_CNT_BIT        16
+#define MEM_FILL_ON_LEVEL		(1<<10)
+#define MEM_CTRL_EMPTY_EN		(1<<2)
+#define MEM_CTRL_FILL_EN		(1<<1)
+#define MEM_CTRL_INIT			(1<<0)
+#define CANVAS_WRITE(x...)	      WRITE_MMC_REG(x)
+#define CANVAS_READ(x...)             READ_MMC_REG(x)
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/card_io.h b/arch/arm/mach-meson8b/include/mach/card_io.h
new file mode 100644
index 000000000000..298ff2835cc3
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/card_io.h
@@ -0,0 +1,247 @@
+#ifndef __CARD_IO_H
+#define __CARD_IO_H
+
+#include <mach/am_regs.h>
+#include <linux/types.h>
+
+/**
+ * @file card_io.h
+ * @addtogroup Card
+ */
+/*@{*/
+
+/** Card module */
+typedef enum _Card_Module {
+    CARD_MODULE_CF,
+    CARD_MODULE_SD_MMC,
+    CARD_MODULE_INAND,
+    CARD_MODULE_MS_MSPRO,
+    CARD_MODULE_MS2,
+    CARD_MODULE_XD,
+    CARD_MODULE_SM
+} Card_Module_t;
+
+#define MAX_CARD_UNIT       (CARD_MODULE_SM+1)
+/** Card config */
+typedef struct _Card_Config {
+    int cf_enabled;
+    int sd_mmc_enabled;
+    int inand_enabled;
+    int ms_mspro_enabled;
+    int ms2_enabled;
+    int xd_enabled;
+    int sm_enabled;
+    int sd_wifi_enable;
+} Card_Config_t;
+
+typedef enum _SDIO_Pad_Type {
+	
+	SDHC_CARD_0_5,	//SDHC-B
+	SDHC_BOOT_0_11,	//SDHC-C
+	SDHC_GPIOX_0_9,	//SDHC-A
+
+	SDXC_CARD_0_5,	//SDXC-B
+	SDXC_BOOT_0_11,	//SDXC-C
+	SDXC_GPIOX_0_9	//SDXC-A
+} SDIO_Pad_Type_t;
+
+typedef enum _Card_Work_Mode {
+    CARD_HW_MODE,
+    CARD_SW_MODE
+} Card_Work_Mode_t;
+
+struct aml_card_info {
+    char *name;         /* card name  */
+    Card_Work_Mode_t work_mode; /* work mode select*/
+    SDIO_Pad_Type_t  io_pad_type;   /* hw io pin pad */
+    unsigned card_ins_en_reg;
+    unsigned card_ins_en_mask;
+    unsigned card_ins_input_reg;
+    unsigned card_ins_input_mask;
+    unsigned card_power_en_reg;
+    unsigned card_power_en_mask;
+    unsigned card_power_output_reg;
+    unsigned card_power_output_mask;
+    unsigned char card_power_en_lev;
+    unsigned card_wp_en_reg;
+    unsigned card_wp_en_mask;
+    unsigned card_wp_input_reg;
+    unsigned card_wp_input_mask;
+    void (*card_extern_init)(void);
+    /*for inand partition: struct mtd_partition, easy porting from nand*/
+    struct mtd_partition    *partitions;
+    unsigned int           nr_partitions;
+};
+
+struct aml_card_platform {
+    u8 card_num;
+    struct aml_card_info *card_info;
+};
+
+struct card_partition {
+    char *name;         /* identifier string */
+    uint64_t size;          /* partition size */
+    uint64_t offset;        /* offset within the memory card space */
+    uint32_t mask_flags;        /* master card flags to mask out for this partition */
+};
+
+#define CARD_PIN_MUX_0                  PERIPHS_PIN_MUX_0
+
+/// Muxing contorl
+#define CARD_PIN_MUX_1                  PERIPHS_PIN_MUX_1
+
+/// Muxing contorl
+#define CARD_PIN_MUX_2                  PERIPHS_PIN_MUX_2
+
+/// Muxing contorl
+#define CARD_PIN_MUX_3                  PERIPHS_PIN_MUX_3
+
+/// Muxing contorl
+#define CARD_PIN_MUX_4                  PERIPHS_PIN_MUX_4
+#define CARD_PIN_MUX_5                  PERIPHS_PIN_MUX_5
+#define CARD_PIN_MUX_6                  PERIPHS_PIN_MUX_6
+#define CARD_PIN_MUX_7                  PERIPHS_PIN_MUX_7
+#define CARD_PIN_MUX_8                  PERIPHS_PIN_MUX_8
+#define CARD_PIN_MUX_9                  PERIPHS_PIN_MUX_9
+#define CARD_PIN_MUX_10                 PERIPHS_PIN_MUX_10
+#define CARD_PIN_MUX_11                 PERIPHS_PIN_MUX_11
+#define CARD_PIN_MUX_12                 PERIPHS_PIN_MUX_12
+
+#define CARD_GPIO_ENABLE            CBUS_REG_ADDR(PREG_PAD_GPIO0_EN_N)
+#define CARD_GPIO_OUTPUT            CBUS_REG_ADDR(PREG_PAD_GPIO0_O)
+#define CARD_GPIO_INPUT             CBUS_REG_ADDR(PREG_PAD_GPIO0_I)
+
+#define BOOT_GPIO_ENABLE            CBUS_REG_ADDR(PREG_PAD_GPIO3_EN_N)
+#define BOOT_GPIO_OUTPUT            CBUS_REG_ADDR(PREG_PAD_GPIO3_O)
+#define BOOT_GPIO_INPUT             CBUS_REG_ADDR(PREG_PAD_GPIO3_I)
+
+#define EGPIO_GPIOA_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO0_EN_N)
+#define EGPIO_GPIOA_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO0_O)
+#define EGPIO_GPIOA_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO0_I)
+
+#define EGPIO_GPIOB_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO1_EN_N)
+#define EGPIO_GPIOB_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO1_O)
+#define EGPIO_GPIOB_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO1_I)
+
+#define EGPIO_GPIOC_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO2_EN_N)
+#define EGPIO_GPIOC_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO2_O)
+#define EGPIO_GPIOC_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO2_I)
+
+#define EGPIO_GPIOD_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO2_EN_N)
+#define EGPIO_GPIOD_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO2_O)
+#define EGPIO_GPIOD_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO2_I)
+
+#define EGPIO_GPIOE_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO6_EN_N)
+#define EGPIO_GPIOE_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO6_O)
+#define EGPIO_GPIOE_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO6_I)
+
+#define EGPIO_GPIOXL_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO0_EN_N)
+#define EGPIO_GPIOXL_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO0_O)
+#define EGPIO_GPIOXL_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO0_I)
+
+#define EGPIO_GPIOXH_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO3_EN_N)
+#define EGPIO_GPIOXH_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO3_O)
+#define EGPIO_GPIOXH_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO3_I)
+
+#define EGPIO_GPIOY_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO5_EN_N)
+#define EGPIO_GPIOY_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO5_O)
+#define EGPIO_GPIOY_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO5_I)
+
+#define EGPIO_GPIOZ_ENABLE			CBUS_REG_ADDR(PREG_PAD_GPIO6_EN_N)
+#define EGPIO_GPIOZ_OUTPUT			CBUS_REG_ADDR(PREG_PAD_GPIO6_O)
+#define EGPIO_GPIOZ_INPUT			CBUS_REG_ADDR(PREG_PAD_GPIO6_I)
+
+#define EGPIO_GPIOAO_ENABLE			AOBUS_REG_ADDR(AO_GPIO_O_EN_N)
+#define EGPIO_GPIOAO_OUTPUT			AOBUS_REG_ADDR(AO_GPIO_O_EN_N)
+#define EGPIO_GPIOAO_INPUT			AOBUS_REG_ADDR(AO_GPIO_I)
+
+//JTAG group
+#define JTAG_GPIO_ENABLE                CBUS_REG_ADDR(PREG_JTAG_GPIO_ADDR)
+#define JTAG_GPIO_OUTPUT                CBUS_REG_ADDR(PREG_JTAG_GPIO_ADDR)
+#define JTAG_GPIO_INPUT                 CBUS_REG_ADDR(PREG_JTAG_GPIO_ADDR)
+
+#define TMS_MASK_ENABLE                 0x00000002L
+#define TDI_MASK_ENABLE                 0x00000004L
+#define TCK_MASK_ENABLE                 0x00000001L
+#define TDO_MASK_ENABLE                 0x00000008L
+#define TEST_N_MASK_ENABLE              0x00010000L
+#define TMS_MASK_OUTPUT                 0x00000020L
+#define TDI_MASK_OUTPUT                 0x00000040L
+#define TCK_MASK_OUTPUT                 0x00000010L
+#define TDO_MASK_OUTPUT                 0x00000080L
+#define TEST_N_MASK_OUTPUT              0x00100000L
+#define TMS_MASK_INPUT                  0x00000200L
+#define TDI_MASK_INPUT                  0x00000400L
+#define TCK_MASK_INPUT                  0x00000100L
+#define TDO_MASK_INPUT                  0x00000800L
+
+
+#define PREG_IO_0_MASK                  0x00000001L
+#define PREG_IO_1_MASK                  0x00000002L
+#define PREG_IO_2_MASK                  0x00000004L
+#define PREG_IO_3_MASK                  0x00000008L
+#define PREG_IO_4_MASK                  0x00000010L
+#define PREG_IO_5_MASK                  0x00000020L
+#define PREG_IO_6_MASK                  0x00000040L
+#define PREG_IO_7_MASK                  0x00000080L
+#define PREG_IO_8_MASK                  0x00000100L
+#define PREG_IO_9_MASK                  0x00000200L
+#define PREG_IO_10_MASK                 0x00000400L
+#define PREG_IO_11_MASK                 0x00000800L
+#define PREG_IO_12_MASK                 0x00001000L
+#define PREG_IO_13_MASK                 0x00002000L
+#define PREG_IO_14_MASK                 0x00004000L
+#define PREG_IO_15_MASK                 0x00008000L
+#define PREG_IO_16_MASK                 0x00010000L
+#define PREG_IO_17_MASK                 0x00020000L
+#define PREG_IO_18_MASK                 0x00040000L
+#define PREG_IO_19_MASK                 0x00080000L
+#define PREG_IO_20_MASK                 0x00100000L
+#define PREG_IO_21_MASK                 0x00200000L
+#define PREG_IO_22_MASK                 0x00400000L
+#define PREG_IO_23_MASK                 0x00800000L
+#define PREG_IO_24_MASK                 0x01000000L
+#define PREG_IO_25_MASK                 0x02000000L
+#define PREG_IO_26_MASK                 0x04000000L
+#define PREG_IO_27_MASK                 0x08000000L
+#define PREG_IO_28_MASK                 0x10000000L
+#define PREG_IO_29_MASK                 0x20000000L
+#define PREG_IO_30_MASK                 0x40000000L
+#define PREG_IO_31_MASK                 0x80000000L
+
+#define PREG_IO_0_3_MASK                0x0000000FL
+#define PREG_IO_2_5_MASK                0x0000003CL
+#define PREG_IO_4_7_MASK                0x000000F0L
+#define PREG_IO_0_7_MASK                0x000000FFL
+#define PREG_IO_8_11_MASK               0x00000F00L
+#define PREG_IO_8_15_MASK               0x0000FF00L
+#define PREG_IO_9_16_MASK               0x0001FE00L
+#define PREG_IO_10_13_MASK              0x00003c00L
+#define PREG_IO_12_15_MASK              0x0000F000L
+#define PREG_IO_13_16_MASK              0x0001E000L
+#define PREG_IO_14_17_MASK              0x0003C000L
+#define PREG_IO_17_20_MASK              0x001E0000L
+#define PREG_IO_22_25_MASK              0x03C00000L
+#define PREG_IO_23_26_MASK              0x07800000L
+#define PREG_IO_2223_2627_MASK          0x0CC00000L
+#define PREG_IO_24_27_MASK              0x0F000000L
+#define PREG_IO_22_29_MASK              0x3FC00000L
+
+#define CARD_HW_MODE                    0
+#define CARD_SW_MODE                    1
+#define XD_NAND_MODE                    2
+
+#define CARD_SLOT_4_1                   0
+#define CARD_SLOT_DISJUNCT              1
+
+#define ATA_DEV_SLEEP                   0
+#define ATA_DEV_RECOVER                 1
+
+#define SDIO_NO_INT                   0
+#define SDIO_IF_INT                   1
+#define SDIO_CMD_INT                  2
+#define SDIO_SOFT_INT                 3
+#define SDIO_TIMEOUT_INT              4
+
+#endif //__CARD_IO_H
+
diff --git a/arch/arm/mach-meson8b/include/mach/clock.h b/arch/arm/mach-meson8b/include/mach/clock.h
new file mode 100644
index 000000000000..273b801fc5aa
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/clock.h
@@ -0,0 +1,160 @@
+/*
+ *  arch/arm/mach-meson/include/mach/clock.h
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef __ARCH_ARM_MESON8_CLOCK_H
+#define __ARCH_ARM_MESON8_CLOCK_H
+#include <linux/types.h>
+#include <linux/list.h>
+
+struct clk_ops {
+	//return: 0:success  1:fail
+	int (*clk_ratechange_before)(unsigned long newrate,void* privdata);
+	//return: 0:success  1:fail
+	int (*clk_ratechange_after)(unsigned long newrate,void* privdata,int failed);
+	//return: 0:success  1:fail
+	int (*clk_enable_before)(void* privdata);
+	//return: 0:success  1:fail
+	int (*clk_enable_after)(void* privdata,int failed);
+	//return: 0:success  1:fail
+	int (*clk_disable_before)(void* privdata);
+	//return: 0:success  1:fail.
+	int (*clk_disable_after)(void* privdata,int failed);	
+	void* privdata;
+	struct clk_ops* next;
+};
+
+struct clk {
+    #define CLK_RATE_UNKNOWN (-1)
+    unsigned long rate;///0xffffffff(-1) means unknown 
+    
+    unsigned long(*get_rate)(struct clk *);
+    int (*set_rate)(struct clk *, unsigned long);
+    long (*round_rate)(struct clk *, unsigned long);
+    int (*enable)(struct clk *);///disable my self
+    int (*disable)(struct clk *);///enable my self
+    bool (*status)(struct clk *);
+    int (*on_parent_changed)(struct clk *clk, int rate);
+    int (*need_parent_changed)(struct clk *clk, int rate);
+    int msr;
+    unsigned long msr_mul;
+    unsigned long msr_div;
+    unsigned long min;
+    unsigned long max;
+
+    unsigned clk_gate_reg_adr;
+    unsigned clk_gate_reg_mask;
+    
+    int  open_irq;
+
+    struct list_head child;
+    struct list_head sibling;
+    struct clk * parent;
+    struct clk_ops*  clk_ops;
+    void * priv;
+
+    unsigned long old_rate;//Just for store old cpu freq for set_sys_pll()
+};
+int  clk_register(struct clk *clk,const char *parent);
+void clk_unregister(struct clk *clk);
+int  clk_measure(char  index );
+
+//return: 0:disabed. 1:enabled. 2:unknown
+int  clk_get_status(struct clk * clk);
+
+//return: 0:success  1: fail
+int clk_ops_register(struct clk *clk, struct clk_ops *ops);
+//return: 0:success  1: fail
+int clk_ops_unregister(struct clk *clk, struct clk_ops *ops);
+
+
+//M8 all pll controler use bit 29 as reset bit
+#define M8_PLL_RESET(pll) aml_set_reg32_mask(pll,(1<<29));
+
+//wait for pll lock
+//must wait first (100us+) then polling lock bit to check
+#define M8_PLL_WAIT_FOR_LOCK(pll) \
+	do{\
+		udelay(1000);\
+	}while((aml_read_reg32(pll)&0x80000000)==0);
+
+//M6 PLL control value 
+#define M8_PLL_CNTL_CST2 (0x814d3928)
+#define M8_PLL_CNTL_CST3 (0x6b425012)
+#define M8_PLL_CNTL_CST4 (0x110)
+
+#define M8_PLL_CNTL_CST12 (0x04294000)
+#define M8_PLL_CNTL_CST13 (0x026b4250)
+#define M8_PLL_CNTL_CST14 (0x06278410)
+#define M8_PLL_CNTL_CST15 (0x1e1)
+#define M8_PLL_CNTL_CST16 (0xacac10ac)
+#define M8_PLL_CNTL_CST17 (0x0108e000)
+
+
+//DDR PLL
+#define M8_DDR_PLL_CNTL_2 (M8_PLL_CNTL_CST2)
+#define M8_DDR_PLL_CNTL_3 (M8_PLL_CNTL_CST3)
+#define M8_DDR_PLL_CNTL_4 (M8_PLL_CNTL_CST4)
+
+//SYS PLL
+/* ROMBOOT Ref
+#define M8_SYS_PLL_CNTL_2 (0x69c8c000)
+#define M8_SYS_PLL_CNTL_3 (0x0a57c221)
+#define M8_SYS_PLL_CNTL_4 (0x0001d407)
+#define M8_SYS_PLL_CNTL_5 (0x00000870)
+*/
+/* V1.0
+#define M8_SYS_PLL_CNTL_2 (0x59e8ce00)
+#define M8_SYS_PLL_CNTL_3 (0xca4b8823)
+#define M8_SYS_PLL_CNTL_4 (0x0286a027)
+#define M8_SYS_PLL_CNTL_5 (0x00003800)
+*/
+#define M8_SYS_PLL_CNTL_2 (0x59C88000)
+#define M8_SYS_PLL_CNTL_3 (0xCA45B823)
+#define M8_SYS_PLL_CNTL_4 (0x0001D407)
+#define M8_SYS_PLL_CNTL_5 (0x00000870)
+
+//VIID PLL
+#define M8_VIID_PLL_CNTL_2 (M8_PLL_CNTL_CST2)
+#define M8_VIID_PLL_CNTL_3 (M8_PLL_CNTL_CST3)
+#define M8_VIID_PLL_CNTL_4 (M8_PLL_CNTL_CST4)
+//Wr(HHI_VIID_PLL_CNTL,  0x20242 );	 //0x1047
+
+
+//VID PLL
+#define M8_VID_PLL_CNTL_2 (M8_PLL_CNTL_CST2)
+#define M8_VID_PLL_CNTL_3 (M8_PLL_CNTL_CST3)
+#define M8_VID_PLL_CNTL_4 (M8_PLL_CNTL_CST4)
+//Wr(HHI_VID_PLL_CNTL,  0xb0442 ); //0x109c
+
+//FIXED PLL/Multi-phase PLL
+#define M8_MPLL_CNTL     (0xc00009a9)
+#define M8_MPLL_CNTL_2 (0xadc80000)
+#define M8_MPLL_CNTL_3 (0x0a57ca21)
+#define M8_MPLL_CNTL_4 (0x00010006)
+#define M8_MPLL_CNTL_5 (0xa5500e1a)
+#define M8_MPLL_CNTL_6 (0xf4454545)
+#define M8_MPLL_CNTL_7 (0x00000000)
+#define M8_MPLL_CNTL_8 (0x00000000)
+#define M8_MPLL_CNTL_9 (0x00000000)
+
+extern unsigned long mali_clock_gating_lock(void);
+extern void mali_clock_gating_unlock(unsigned long flags);
+
+#endif //__ARCH_ARM_MESON3_CLOCK_H
diff --git a/arch/arm/mach-meson8b/include/mach/cpu.h b/arch/arm/mach-meson8b/include/mach/cpu.h
new file mode 100644
index 000000000000..ed061f738d5a
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/cpu.h
@@ -0,0 +1,33 @@
+/*
+ * mach/cpu.h
+ *
+ */
+
+#ifndef __MACH_MESON8_CPU_H_
+#define __MACH_MESON8_CPU_H_
+
+#include <plat/cpu.h>
+
+extern int (*get_cpu_temperature_celius)(void);
+int get_cpu_temperature(void);
+
+#define MESON_CPU_TYPE	MESON_CPU_TYPE_MESON8B
+
+#define MESON_CPU_CONTROL_REG (IO_SRAM_BASE + 0x1ff80)
+#define MESON_CPU1_CONTROL_ADDR_REG (IO_SRAM_BASE + 0x1ff84)
+#define MESON_CPU_STATUS_REG(cpu) (IO_SRAM_BASE + 0x1ff90 +(cpu<<2))
+
+#define MESON_CPU_POWER_CTRL_REG (IO_A9_PERIPH_BASE + 0x8)
+
+#define MESON_CPU_SLEEP		1
+#define MESON_CPU_WAKEUP	2
+
+extern int meson_cpu_kill(unsigned int cpu);
+extern void meson_cpu_die(unsigned int cpu);
+extern int meson_cpu_disable(unsigned int cpu);
+extern void meson_secondary_startup(void);
+extern void meson_set_cpu_ctrl_reg(int cpu,int is_on);
+extern void meson_set_cpu_ctrl_addr(uint32_t cpu, const uint32_t addr);
+extern void meson_set_cpu_power_ctrl(uint32_t cpu,int is_power_on);
+
+#endif /* __MACH_MESON6_CPU_H_ */
diff --git a/arch/arm/mach-meson8b/include/mach/edp_tx_reg.h b/arch/arm/mach-meson8b/include/mach/edp_tx_reg.h
new file mode 100644
index 000000000000..8d8a35808f3e
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/edp_tx_reg.h
@@ -0,0 +1,178 @@
+#ifndef EDP_TX_REG_H
+#define EDP_TX_REG_H
+
+#define EDP_TX_LINK_BW_SET								0x0000
+#define EDP_TX_LINK_COUNT_SET							0x0004
+#define EDP_TX_ENHANCED_FRAME_EN						0x0008
+#define EDP_TX_TRAINING_PATTERN_SET						0x000c
+#define EDP_TX_LINK_QUAL_PATTERN_SET					0x0010
+#define EDP_TX_SCRAMBLING_DISABLE						0x0014
+#define EDP_TX_DOWNSPREAD_CTRL							0x0018
+#define EDP_TX_ALTERNATE_SCRAMBLER_RESET				0x001c
+#define EDP_TX_PANEL_SELF_REFRESH						0x0020
+
+#define EDP_TX_TRANSMITTER_OUTPUT_ENABLE				0x0080
+#define EDP_TX_MAIN_STREAM_ENABLE						0x0084
+#define EDP_TX_SECONDARY_STREAM_ENABLE					0x0088
+#define EDP_TX_FORCE_SCRAMBLER_RESET					0x00c0
+#define EDP_TX_USER_CONTROL_STATUS						0x00c4
+
+#define EDP_TX_CORE_CAPBILITIES							0x00f8
+#define EDP_TX_CORE_ID									0x00fc
+
+#define EDP_TX_AUX_COMMAND								0x0100
+#define EDP_TX_AUX_WRITE_FIFO							0x0104
+#define EDP_TX_AUX_ADDRESS								0x0108
+#define EDP_TX_AUX_CLOCK_DIVIDER						0x010c
+#define EDP_TX_AUX_STATE								0x0130
+#define EDP_TX_AUX_REPLY_DATA							0x0134
+#define EDP_TX_AUX_REPLY_CODE							0x0138
+#define EDP_TX_AUX_REPLY_COUNT							0x013c
+#define EDP_TX_AUX_INTERRUPT_STATUS						0x0140
+#define EDP_TX_AUX_INTERRUPT_MASK						0x0144
+#define EDP_TX_AUX_REPLY_DATA_COUNT						0x0148
+#define EDP_TX_AUX_STATUS								0x014c
+#define EDP_TX_AUX_REPLY_CLOCK_WIDTH					0x0150
+
+#define EDP_TX_MAIN_STREAM_HTOTAL						0x0180
+#define EDP_TX_MAIN_STREAM_VTOTAL						0x0184
+#define EDP_TX_MAIN_STREAM_POLARITY						0x0188
+#define EDP_TX_MAIN_STREAM_HSWIDTH						0x018c
+#define EDP_TX_MAIN_STREAM_VSWIDTH						0x0190
+#define EDP_TX_MAIN_STREAM_HRES							0x0194
+#define EDP_TX_MAIN_STREAM_VRES							0x0198
+#define EDP_TX_MAIN_STREAM_HSTART						0x019c
+#define EDP_TX_MAIN_STREAM_VSTART						0x01a0
+#define EDP_TX_MAIN_STREAM_MISC0						0x01a4
+#define EDP_TX_MAIN_STREAM_MISC1						0x01a8
+#define EDP_TX_MAIN_STREAM_M_VID						0x01ac
+#define EDP_TX_MAIN_STREAM_TRANSFER_UNIT_SIZE			0x01b0
+#define EDP_TX_MAIN_STREAM_N_VID						0x01b4
+#define EDP_TX_MAIN_STREAM_USER_PIXEL_WIDTH				0x01b8
+#define EDP_TX_MAIN_STREAM_DATA_COUNT_PER_LANE			0x01bc
+#define EDP_TX_MAIN_STREAM_INTERLACED					0x01c0
+#define EDP_TX_MAIN_STREAM_USER_SYNC_POLARITY			0x01c4
+
+#define EDP_TX_PHY_RESET								0x0200
+#define EDP_TX_PHY_PRE_EMPHASIS_LANE_0					0x0210
+#define EDP_TX_PHY_PRE_EMPHASIS_LANE_1					0x0214
+#define EDP_TX_PHY_PRE_EMPHASIS_LANE_2					0x0218
+#define EDP_TX_PHY_PRE_EMPHASIS_LANE_3					0x021c
+#define EDP_TX_PHY_VOLTAGE_DIFF_LANE_0					0x0220
+#define EDP_TX_PHY_VOLTAGE_DIFF_LANE_1					0x0224
+#define EDP_TX_PHY_VOLTAGE_DIFF_LANE_2					0x0228
+#define EDP_TX_PHY_VOLTAGE_DIFF_LANE_3					0x022c
+#define EDP_TX_PHY_TRANSMIT_PRBS7						0x0230
+#define EDP_TX_PHY_POWER_DOWN							0x0238
+#define EDP_TX_PHY_POST_EMPHASIS_LANE_0					0x0240
+#define EDP_TX_PHY_POST_EMPHASIS_LANE_1					0x0244
+#define EDP_TX_PHY_POST_EMPHASIS_LANE_2					0x024c
+#define EDP_TX_PHY_POST_EMPHASIS_LANE_3					0x024c
+#define EDP_TX_PHY_STATUS								0x0280
+
+#define EDP_TX_HDCP_ENABLE								0x0400
+#define EDP_TX_HDCP_KM_LOWER							0x0410
+#define EDP_TX_HDCP_KM_UPPER							0x0414
+#define EDP_TX_HDCP_AN_LOWER							0x0418
+#define EDP_TX_HDCP_AN_UPPER							0x041c
+#define EDP_TX_HDCP_AUTO_AN_VALUE_LOWER					0x0420
+#define EDP_TX_HDCP_AUTO_AN_VALUE_UPPER					0x0424
+#define EDP_TX_HDCP_STATUS								0x0428
+
+
+//***************************************************************************************************//
+//******note: below address are not eDP Tx core register's, but eDP sink device DPCD register's******//
+//***************************************************************************************************//
+//AUX offset address
+//DPCD information
+//***************************************************************************************************//
+#define EDP_DPCD_REVISION							0x0000
+#define EDP_DPCD_MAX_LINK_RATE						0x0001
+#define EDP_DPCD_MAX_LANE_COUNT						0x0002
+#define EDP_DPCD_MAX_DOWNSPREAD						0x0003
+#define EDP_DPCD_NUM_RX_PORTS						0x0004
+#define EDP_DPCD_DOWNSTREAM_PORTS_PRESENT			0x0005
+#define EDP_DPCD_MAIN_LINK_CODING					0x0006
+#define EDP_DPCD_NUM_DOWNSTREAM_PORTS				0x0007
+#define EDP_DPCD_RX_PORT0_CAPS_0					0x0008
+#define EDP_DPCD_RX_PORT0_CAPS_1					0x0009
+#define EDP_DPCD_RX_PORT1_CAPS_0					0x000A
+#define EDP_DPCD_RX_PORT1_CAPS_1					0x000B
+#define EDP_DPCD_I2C_SPEED_CAP						0x000C	//v1.2? 
+#define EDP_DPCD_CONFIGURATION_CAP					0x000D	//v1.2? 
+#define EDP_DPCD_TRAINING_AUX_RD_INTERVAL			0x000E	//v1.2?
+#define EDP_DPCD_MUTI_STREAM_TRANSPORT_CAP			0x0021	//v1.2
+#define EDP_DPCD_PSR_SUPPORT						0x0070	//v1.2?
+#define EDP_DPCD_PSR_CAPS							0x0071	//v1.2?
+#define EDP_DPCD_DOWNSTREAM_PORT_CAPS				0x0080 // Downstream Port 0 - 15 Capabilities
+
+#define EDP_DPCD_LINK_BANDWIDTH_SET					0x0100
+#define EDP_DPCD_LANE_COUNT_SET						0x0101
+#define EDP_DPCD_TRAINING_PATTERN_SET				0x0102
+#define EDP_DPCD_TRAINING_LANE0_SET					0x0103
+#define EDP_DPCD_TRAINING_LANE1_SET					0x0104
+#define EDP_DPCD_TRAINING_LANE2_SET					0x0105
+#define EDP_DPCD_TRAINING_LANE3_SET					0x0106
+#define EDP_DPCD_DOWNSPREAD_CONTROL					0x0107
+#define EDP_DPCD_MAIN_LINK_CODING_SET				0x0108
+#define EDP_DPCD_CONFIGURATION_SET					0x010A
+
+#define EDP_DPCD_SINK_COUNT							0x0200
+#define EDP_DPCD_DEVICE_SERVICE_IRQ					0x0201
+#define EDP_DPCD_STATUS_LANE_0_1					0x0202
+#define EDP_DPCD_STATUS_LANE_2_3					0x0203
+#define EDP_DPCD_LANE_ALIGNMENT_STATUS_UPDATED		0x0204
+#define EDP_DPCD_SINK_STATUS						0x0205
+#define EDP_DPCD_ADJUST_REQUEST_LANE_0_1			0x0206
+#define EDP_DPCD_ADJUST_REQUEST_LANE_2_3			0x0207
+#define EDP_DPCD_TRAINING_SCORE_LANE_0				0x0208
+#define EDP_DPCD_TRAINING_SCORE_LANE_1				0x0209
+#define EDP_DPCD_TRAINING_SCORE_LANE_2				0x020A
+#define EDP_DPCD_TRAINING_SCORE_LANE_3				0x020B
+
+#define EDP_DPCD_SYMBOL_ERROR_COUNT_LANE_0			0x0210
+#define EDP_DPCD_SYMBOL_ERROR_COUNT_LANE_1			0x0212 
+#define EDP_DPCD_SYMBOL_ERROR_COUNT_LANE_2			0x0214
+#define EDP_DPCD_SYMBOL_ERROR_COUNT_LANE_3			0x0216
+
+#define EDP_DPCD_TEST_REQUEST						0x0218
+#define EDP_DPCD_TEST_LINK_RATE						0x0219
+#define EDP_DPCD_TEST_LANE_COUNT					0x0220
+#define EDP_DPCD_TEST_PATTERN						0x0221
+#define EDP_DPCD_TEST_RESPONSE						0x0260
+#define EDP_DPCD_TEST_EDID_CHECKSUM					0x0261
+
+// Source Device-Specific Field 0x0303 - 0x003FF : Reserved for vendor-specific usage
+#define EDP_DPCD_SOURCE_IEEE_OUI_0					0x0300 // Source IEEE OUI 7:0
+#define EDP_DPCD_SOURCE_IEEE_OUI_1					0x0301 // Source IEEE OUI 15:8
+#define EDP_DPCD_SOURCE_IEEE_OUI_2					0x0302 // Source IEEE OUI 23:16
+
+// Sink Device-Specific Field    0x0403 - 0x004FF : Reserved for vendor-specific usage
+#define EDP_DPCD_SINK_IEEE_OUT_0					0x0400 // Sink IEEE OUI 7:0
+#define EDP_DPCD_SINK_IEEE_OUT_1					0x0401 // Sink IEEE OUI 15:8
+#define EDP_DPCD_SINK_IEEE_OUT_2					0x0402 // Sink IEEE OUI 23:16 
+
+// Branch Device-Specific Field  0x0503 - 0x005FF : Reserved for vendor-specific usage
+#define EDP_DPCD_BRANCH_DEVICE_IEEE_OUI_0			0x0500 // Branch Device IEEE OUI 7:0
+#define EDP_DPCD_BRANCH_DEVICE_IEEE_OUI_1			0x0501 // Branch Device IEEE OUI 15:8
+#define EDP_DPCD_BRANCH_DEVICE_IEEE_OUI_2			0x0502 // Branch Device IEEE OUI 23:16
+#define EDP_DPCD_SET_POWER							0x0600 // Set Power
+
+//HDCP field in DPCD
+#define EDP_DPCD_HDCP_BKSV							0x68000
+#define EDP_DPCD_HDCP_ROPRIME						0x68005
+#define EDP_DPCD_HDCP_AKSV							0x68007
+#define EDP_DPCD_HDCP_AN							0x6800c
+#define EDP_DPCD_HDCP_VPRIME_H1						0x68014
+#define EDP_DPCD_HDCP_VPRIME_H2						0x68018
+#define EDP_DPCD_HDCP_VPRIME_H3						0x6801c
+#define EDP_DPCD_HDCP_VPRIME_H4						0x68020
+#define EDP_DPCD_HDCP_VPRIME_H5						0x68024
+#define EDP_DPCD_HDCP_BCAPS							0x68028
+#define EDP_DPCD_HDCP_BSTATUS						0x68029
+#define EDP_DPCD_HDCP_BINFO							0x6802a
+#define EDP_DPCD_HDCP_KSVFIFO						0x6802c
+#define EDP_DPCD_HDCP_RESERVED						0x6803b
+#define EDP_DPCD_HDCP_DEBUG							0x680c0
+
+#endif
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/include/mach/efuse.h b/arch/arm/mach-meson8b/include/mach/efuse.h
new file mode 100644
index 000000000000..55707556a62f
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/efuse.h
@@ -0,0 +1,9 @@
+#ifndef __MESON_EFUSE_H
+#define __MESON_EFUSE_H
+
+#define EFUSE_BITS             4096
+#define EFUSE_BYTES            512  //(EFUSE_BITS/8)
+#define EFUSE_DWORDS            128  //(EFUSE_BITS/32)
+
+#endif
+
diff --git a/arch/arm/mach-meson8b/include/mach/gpio.h b/arch/arm/mach-meson8b/include/mach/gpio.h
new file mode 100644
index 000000000000..33141be1a05f
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/gpio.h
@@ -0,0 +1,171 @@
+#ifndef __ARCH_MACH_GPIO_H__
+#define __ARCH_MACH_GPIO_H__
+typedef enum {
+	GPIOAO_0=0,
+	GPIOAO_1=1,
+	GPIOAO_2=2,
+	GPIOAO_3=3,
+	GPIOAO_4=4,
+	GPIOAO_5=5,
+	GPIOAO_6=6,
+	GPIOAO_7=7,
+	GPIOAO_8=8,
+	GPIOAO_9=9,
+	GPIOAO_10=10,
+	GPIOAO_11=11,
+	GPIOAO_12=12,
+	GPIOAO_13=13,
+	GPIOZ_0=14,
+	GPIOZ_1=15,
+	GPIOZ_2=16,
+	GPIOZ_3=17,
+	GPIOZ_4=18,
+	GPIOZ_5=19,
+	GPIOZ_6=20,
+	GPIOZ_7=21,
+	GPIOZ_8=22,
+	GPIOZ_9=23,
+	GPIOZ_10=24,
+	GPIOZ_11=25,
+	GPIOZ_12=26,
+	GPIOZ_13=27,
+	GPIOZ_14=28,
+	GPIOH_0=29,
+	GPIOH_1=30,
+	GPIOH_2=31,
+	GPIOH_3=32,
+	GPIOH_4=33,
+	GPIOH_5=34,
+	GPIOH_6=35,
+	GPIOH_7=36,
+	GPIOH_8=37,
+	GPIOH_9=38,
+	BOOT_0=39,
+	BOOT_1=40,
+	BOOT_2=41,
+	BOOT_3=42,
+	BOOT_4=43,
+	BOOT_5=44,
+	BOOT_6=45,
+	BOOT_7=46,
+	BOOT_8=47,
+	BOOT_9=48,
+	BOOT_10=49,
+	BOOT_11=50,
+	BOOT_12=51,
+	BOOT_13=52,
+	BOOT_14=53,
+	BOOT_15=54,
+	BOOT_16=55,
+	BOOT_17=56,
+	BOOT_18=57,
+	CARD_0=58,
+	CARD_1=59,
+	CARD_2=60,
+	CARD_3=61,
+	CARD_4=62,
+	CARD_5=63,
+	CARD_6=64,
+	GPIODV_0=65,
+	GPIODV_1=66,
+	GPIODV_2=67,
+	GPIODV_3=68,
+	GPIODV_4=69,
+	GPIODV_5=70,
+	GPIODV_6=71,
+	GPIODV_7=72,
+	GPIODV_8=73,
+	GPIODV_9=74,
+	GPIODV_10=75,
+	GPIODV_11=76,
+	GPIODV_12=77,
+	GPIODV_13=78,
+	GPIODV_14=79,
+	GPIODV_15=80,
+	GPIODV_16=81,
+	GPIODV_17=82,
+	GPIODV_18=83,
+	GPIODV_19=84,
+	GPIODV_20=85,
+	GPIODV_21=86,
+	GPIODV_22=87,
+	GPIODV_23=88,
+	GPIODV_24=89,
+	GPIODV_25=90,
+	GPIODV_26=91,
+	GPIODV_27=92,
+	GPIODV_28=93,
+	GPIODV_29=94,
+	GPIOY_0=95,
+	GPIOY_1=96,
+	GPIOY_2=97,
+	GPIOY_3=98,
+	GPIOY_4=99,
+	GPIOY_5=100,
+	GPIOY_6=101,
+	GPIOY_7=102,
+	GPIOY_8=103,
+	GPIOY_9=104,
+	GPIOY_10=105,
+	GPIOY_11=106,
+	GPIOY_12=107,
+	GPIOY_13=108,
+	GPIOY_14=109,
+	GPIOY_15=110,
+	GPIOY_16=111,
+	GPIOX_0=112,
+	GPIOX_1=113,
+	GPIOX_2=114,
+	GPIOX_3=115,
+	GPIOX_4=116,
+	GPIOX_5=117,
+	GPIOX_6=118,
+	GPIOX_7=119,
+	GPIOX_8=120,
+	GPIOX_9=121,
+	GPIOX_10=122,
+	GPIOX_11=123,
+	GPIOX_12=124,
+	GPIOX_13=125,
+	GPIOX_14=126,
+	GPIOX_15=127,
+	GPIOX_16=128,
+	GPIOX_17=129,
+	GPIOX_18=130,
+	GPIOX_19=131,
+	GPIOX_20=132,
+	GPIOX_21=133,
+	GPIO_BSD_EN=134,
+	GPIO_TEST_N=135,
+	GPIO_MAX=136,
+}gpio_t;
+	
+enum {
+	GPIO_IRQ0=0,
+	GPIO_IRQ1,
+	GPIO_IRQ2,
+	GPIO_IRQ3,
+	GPIO_IRQ4,
+	GPIO_IRQ5,
+	GPIO_IRQ6,
+	GPIO_IRQ7,
+};
+
+enum {
+	GPIO_IRQ_HIGH=0,
+	GPIO_IRQ_LOW,
+	GPIO_IRQ_RISING,
+	GPIO_IRQ_FALLING,
+};
+
+enum {
+	FILTER_NUM0=0,
+	FILTER_NUM1,
+	FILTER_NUM2,
+	FILTER_NUM3,
+	FILTER_NUM4,
+	FILTER_NUM5,
+	FILTER_NUM6,
+	FILTER_NUM7,
+};
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/gpio_old.h b/arch/arm/mach-meson8b/include/mach/gpio_old.h
new file mode 100644
index 000000000000..6f35812901c1
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/gpio_old.h
@@ -0,0 +1,978 @@
+/* this file is automatic generate . Please do not edit it
+       ./genpintab.awk gpio_pinmux.csv > <this file name> can generate this file*/
+#define AOBUS_REG_ADDR_MASK(a)   AOBUS_REG_ADDR(((a)&0xffff))
+#define REG (0x202c)
+#define AO_REG (0x14)
+#define P_GPIO_OEN_0 CBUS_REG_ADDR(0x200c)
+#define P_GPIO_OEN_1 CBUS_REG_ADDR(0x200f)
+#define P_GPIO_OUT_0 CBUS_REG_ADDR(0x200d)
+#define P_GPIO_OUT_1 CBUS_REG_ADDR(0x2010)
+#define P_GPIO_IN_0 CBUS_REG_ADDR(0x200e)
+#define P_GPIO_IN_1 CBUS_REG_ADDR(0x2011)
+#define P_GPIO_OEN_2 CBUS_REG_ADDR(0x2013)
+#define P_GPIO_OUT_2 CBUS_REG_ADDR(0x2014)
+#define P_GPIO_IN_2 CBUS_REG_ADDR(0x2015)
+#define P_GPIO_OEN_3 CBUS_REG_ADDR(0x2015)
+#define P_GPIO_OUT_3 CBUS_REG_ADDR(0x2016)
+#define P_GPIO_IN_3 CBUS_REG_ADDR(0x2017)
+#define P_GPIO_OEN_AO AOBUS_REG_ADDR_MASK(0xc8100024)
+#define P_GPIO_OUT_AO AOBUS_REG_ADDR_MASK(0xc8100026)
+#define P_GPIO_IN_AO AOBUS_REG_ADDR_MASK(0xc8100028)
+#define REG0 (REG+0)
+#define P_PIN_MUX_REG_0 CBUS_REG_ADDR(REG0)
+#define REG1 (REG+1)
+#define P_PIN_MUX_REG_1 CBUS_REG_ADDR(REG1)
+#define REG2 (REG+2)
+#define P_PIN_MUX_REG_2 CBUS_REG_ADDR(REG2)
+#define REG3 (REG+3)
+#define P_PIN_MUX_REG_3 CBUS_REG_ADDR(REG3)
+#define REG4 (REG+4)
+#define P_PIN_MUX_REG_4 CBUS_REG_ADDR(REG4)
+#define REG5 (REG+5)
+#define P_PIN_MUX_REG_5 CBUS_REG_ADDR(REG5)
+#define REG6 (REG+6)
+#define P_PIN_MUX_REG_6 CBUS_REG_ADDR(REG6)
+#define REG7 (REG+7)
+#define P_PIN_MUX_REG_7 CBUS_REG_ADDR(REG7)
+#define REG8 (REG+8)
+#define P_PIN_MUX_REG_8 CBUS_REG_ADDR(REG8)
+#define REG9 (REG+9)
+#define P_PIN_MUX_REG_9 CBUS_REG_ADDR(REG9)
+#define P_PIN_MUX_REG_AO AOBUS_REG_ADDR(AO_REG)
+#define P_PIN_MUX_REG(base,bit) (bit+(base<<5))
+#define P_PIN_MUX_REG_NUM (sizeof(p_pin_mux_reg_addr)/sizeof(p_pin_mux_reg_addr[0]))
+static unsigned p_pin_mux_reg_addr[]={
+	P_PIN_MUX_REG_0,
+	P_PIN_MUX_REG_1,
+	P_PIN_MUX_REG_2,
+	P_PIN_MUX_REG_3,
+	P_PIN_MUX_REG_4,
+	P_PIN_MUX_REG_5,
+	P_PIN_MUX_REG_6,
+	P_PIN_MUX_REG_7,
+	P_PIN_MUX_REG_8,
+	P_PIN_MUX_REG_9,
+	P_PIN_MUX_REG_AO,
+};
+#define P_GPIO_IN(base,bit) (bit+(base<<5))
+#define P_GPIO_IN_NUM (sizeof(p_gpio_in_addr)/sizeof(p_gpio_in_addr[0]))
+static unsigned p_gpio_in_addr[]={
+	P_GPIO_IN_0,
+	P_GPIO_IN_1,
+	P_GPIO_IN_2,
+	P_GPIO_IN_3,
+	P_GPIO_IN_AO,
+};
+#define P_GPIO_OUT(base,bit) (bit+(base<<5))
+#define P_GPIO_OUT_NUM (sizeof(p_gpio_out_addr)/sizeof(p_gpio_out_addr[0]))
+static unsigned p_gpio_out_addr[]={
+	P_GPIO_OUT_0,
+	P_GPIO_OUT_1,
+	P_GPIO_OUT_2,
+	P_GPIO_OUT_3,
+	P_GPIO_OUT_AO,
+};
+#define P_GPIO_OEN(base,bit) (bit+(base<<5))
+#define P_GPIO_OEN_NUM (sizeof(p_gpio_oen_addr)/sizeof(p_gpio_oen_addr[0]))
+static unsigned p_gpio_oen_addr[]={
+	P_GPIO_OEN_0,
+	P_GPIO_OEN_1,
+	P_GPIO_OEN_2,
+	P_GPIO_OEN_3,
+	P_GPIO_OEN_AO,
+};
+#define NOT_EXIST -1
+struct pad_sig {pad_t pad;sig_t sig;unsigned enable; unsigned disable;};
+#define foreach_pad_sig_start(pad,sig) {int __i;for(__i=0;__i<sizeof(pad_sig_tab)/sizeof(pad_sig_tab[0]);__i++){ unsigned __pad=pad,__sig=sig;  
+#define case_pad_equal(enable,disable) if(pad_sig_tab[__i].pad==__pad&&pad_sig_tab[__i].sig!=__sig){ enable=pad_sig_tab[__i].enable;disable=pad_sig_tab[__i].disable
+#define case_sig_equal(enable,disable) if(pad_sig_tab[__i].pad!=__pad&&pad_sig_tab[__i].sig==__sig){enable=pad_sig_tab[__i].enable;disable=pad_sig_tab[__i].disable
+#define case_both_equal(enable,disable) if(pad_sig_tab[__i].pad==__pad&&pad_sig_tab[__i].sig==__sig){enable=pad_sig_tab[__i].enable;disable=pad_sig_tab[__i].disable
+#define case_end };
+#define foreach_pad_sig_end };}
+static struct pad_sig pad_sig_tab[]={
+	{.pad=PAD_GPIODV_2,.sig=SIG_DVIN_R2,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_27,.sig=SIG_DVIN_DE,.enable=P_PIN_MUX_REG(0,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_3,.sig=SIG_UART_RTS_C,.enable=P_PIN_MUX_REG(1,16),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_6,.sig=SIG_SDXC_D6_A,.enable=P_PIN_MUX_REG(5,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_24,.sig=SIG_DVIN_VS,.enable=P_PIN_MUX_REG(0,9),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_9,.sig=SIG_NAND_IO_CE1,.enable=P_PIN_MUX_REG(2,24),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_6,.sig=SIG_ETH_TXD1,.enable=P_PIN_MUX_REG(6,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_5,.sig=SIG_PCM_IN_B,.enable=P_PIN_MUX_REG(4,24),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_16,.sig=SIG_DVP_D7,.enable=P_PIN_MUX_REG(9,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_16,.sig=SIG_UART_TX_B,.enable=P_PIN_MUX_REG(4,9),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_21,.sig=SIG_LCD_B5,.enable=P_PIN_MUX_REG(0,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_1,.sig=SIG_PWM_B,.enable=P_PIN_MUX_REG(9,15),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_15,.sig=SIG_ENC_15,.enable=P_PIN_MUX_REG(7,15),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_6,.sig=SIG_CLK_32K_INCLK_32K_OUT,.enable=P_PIN_MUX_REG(10,18),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_0,.sig=SIG_SDXC_D0_C,.enable=P_PIN_MUX_REG(4,30),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_7,.sig=SIG_SDXC_D7_A,.enable=P_PIN_MUX_REG(5,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_9,.sig=SIG_I2S_OUT_78,.enable=P_PIN_MUX_REG(1,11),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_7,.sig=SIG_PCM_CLK_B,.enable=P_PIN_MUX_REG(4,22),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_3,.sig=SIG_UART_RTS_AO_A,.enable=P_PIN_MUX_REG(10,9),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_8,.sig=SIG_SD_CLK_A,.enable=P_PIN_MUX_REG(8,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_0,.sig=SIG_SD_D0_A,.enable=P_PIN_MUX_REG(8,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_8,.sig=SIG_TCON_VCOM,.enable=P_PIN_MUX_REG(8,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_4,.sig=SIG_SPI_MISO,.enable=P_PIN_MUX_REG(9,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_4,.sig=SIG_SDXC_D4_A,.enable=P_PIN_MUX_REG(5,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_13,.sig=SIG_DVIN_G5,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_17,.sig=SIG_NAND_CE3,.enable=P_PIN_MUX_REG(2,22),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_12,.sig=SIG_ETH_MDIO,.enable=P_PIN_MUX_REG(6,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_7,.sig=SIG_I2C_SDA_D,.enable=P_PIN_MUX_REG(4,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_8,.sig=SIG_I2S_AM_CLK_OUT,.enable=P_PIN_MUX_REG(10,30),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_14,.sig=SIG_isp_led_en2,.enable=P_PIN_MUX_REG(9,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_26,.sig=SIG_UART_CTS_B,.enable=P_PIN_MUX_REG(6,21),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_15,.sig=SIG_DVP_D6,.enable=P_PIN_MUX_REG(9,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_1,.sig=SIG_SDXC_D1_A,.enable=P_PIN_MUX_REG(5,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_7,.sig=SIG_LCD_R7,.enable=P_PIN_MUX_REG(0,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_20,.sig=SIG_LCD_B4,.enable=P_PIN_MUX_REG(0,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_5,.sig=SIG_TSout_SOP,.enable=P_PIN_MUX_REG(3,15),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_16,.sig=SIG_TSin_D7_A,.enable=P_PIN_MUX_REG(3,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_1,.sig=SIG_DVIN_R1,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_10,.sig=SIG_ETH_RXD1,.enable=P_PIN_MUX_REG(6,8),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_11,.sig=SIG_TSout_CLK,.enable=P_PIN_MUX_REG(3,14),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_17,.sig=SIG_SDXC_CLK_C,.enable=P_PIN_MUX_REG(4,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_7,.sig=SIG_DVIN_R7,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_12,.sig=SIG_DVP_D3,.enable=P_PIN_MUX_REG(9,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_8,.sig=SIG_TSin_CLK_A,.enable=P_PIN_MUX_REG(3,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_6,.sig=SIG_CLK_24M_OUT,.enable=P_PIN_MUX_REG(3,21),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_13,.sig=SIG_TSin_D4_A,.enable=P_PIN_MUX_REG(3,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_4,.sig=SIG_LCD_R4,.enable=P_PIN_MUX_REG(0,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_11,.sig=SIG_I2S_OUT_01,.enable=P_PIN_MUX_REG(10,27),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_14,.sig=SIG_END_14,.enable=P_PIN_MUX_REG(7,14),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_26,.sig=SIG_TCON_CPH2,.enable=P_PIN_MUX_REG(8,21),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_11,.sig=SIG_ENC_11,.enable=P_PIN_MUX_REG(7,11),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_16,.sig=SIG_ISO7816_DET,.enable=P_PIN_MUX_REG(4,21),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_2,.sig=SIG_TSout_CLK,.enable=P_PIN_MUX_REG(3,18),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_0,.sig=SIG_UART_TX_C,.enable=P_PIN_MUX_REG(1,19),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_2,.sig=SIG_NAND_IO_2,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_10,.sig=SIG_TSin_D1_A,.enable=P_PIN_MUX_REG(3,5),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_14,.sig=SIG_NAND_REN_CLK,.enable=P_PIN_MUX_REG(2,18),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_16,.sig=SIG_SD_CMD_C,.enable=P_PIN_MUX_REG(6,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_18,.sig=SIG_UART_CTS_B,.enable=P_PIN_MUX_REG(4,7),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_8,.sig=SIG_I2S_AM_CLK,.enable=P_PIN_MUX_REG(1,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_1,.sig=SIG_HDMI_SDA,.enable=P_PIN_MUX_REG(1,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_1,.sig=SIG_ENC_1,.enable=P_PIN_MUX_REG(7,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_0,.sig=SIG_UART_TX_AO_B,.enable=P_PIN_MUX_REG(10,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_11,.sig=SIG_DVP_D2,.enable=P_PIN_MUX_REG(9,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_4,.sig=SIG_PCM_OUT_A,.enable=P_PIN_MUX_REG(3,30),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_6,.sig=SIG_NAND_IO_6,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_3,.sig=SIG_LCD_R3,.enable=P_PIN_MUX_REG(0,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_11,.sig=SIG_TSin_D2_A,.enable=P_PIN_MUX_REG(3,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_15,.sig=SIG_LCD_G7,.enable=P_PIN_MUX_REG(0,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_10,.sig=SIG_ENC_10,.enable=P_PIN_MUX_REG(7,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_6,.sig=SIG_PCM_FS_B,.enable=P_PIN_MUX_REG(4,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_19,.sig=SIG_ISO7816_DATA,.enable=P_PIN_MUX_REG(4,18),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_12,.sig=SIG_I2C_SCK_A,.enable=P_PIN_MUX_REG(5,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_19,.sig=SIG_LCD_B3,.enable=P_PIN_MUX_REG(0,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_6,.sig=SIG_TSout_D_VALID,.enable=P_PIN_MUX_REG(3,16),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_9,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,28),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_16,.sig=SIG_PWM_A,.enable=P_PIN_MUX_REG(9,14),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_6,.sig=SIG_RVIN_R6,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_0,.sig=SIG_TCON_OEV,.enable=P_PIN_MUX_REG(8,27),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_26,.sig=SIG_DVIN_CLK,.enable=P_PIN_MUX_REG(0,7),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_6,.sig=SIG_I2S_LR_CLK_IN,.enable=P_PIN_MUX_REG(1,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_2,.sig=SIG_ENC_2,.enable=P_PIN_MUX_REG(7,2),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_3,.sig=SIG_SDXC_CMD_B,.enable=P_PIN_MUX_REG(2,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_25,.sig=SIG_UART_RX_B,.enable=P_PIN_MUX_REG(6,22),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_12,.sig=SIG_LCD_G4,.enable=P_PIN_MUX_REG(0,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_4,.sig=SIG_I2C_SDA_C,.enable=P_PIN_MUX_REG(5,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_16,.sig=SIG_LCD_B0,.enable=P_PIN_MUX_REG(0,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_7,.sig=SIG_I2S_AO_CLK_OUT,.enable=P_PIN_MUX_REG(1,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_9,.sig=SIG_SDXC_CMD_A,.enable=P_PIN_MUX_REG(5,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_2,.sig=SIG_LCD_R2,.enable=P_PIN_MUX_REG(0,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_13,.sig=SIG_UART_RX_A,.enable=P_PIN_MUX_REG(4,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_16,.sig=SIG_DVIN_B0,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_5,.sig=SIG_ENC_5,.enable=P_PIN_MUX_REG(7,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_24,.sig=SIG_LCD_VS,.enable=P_PIN_MUX_REG(0,19),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_15,.sig=SIG_DVIN_G7,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_0,.sig=SIG_HDMI_HPD,.enable=P_PIN_MUX_REG(1,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_0,.sig=SIG_I2C_SDA_A,.enable=P_PIN_MUX_REG(5,31),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_9,.sig=SIG_DVIN_G1,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_5,.sig=SIG_I2C_SCK_C,.enable=P_PIN_MUX_REG(5,24),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_16,.sig=SIG_NAND_CE2,.enable=P_PIN_MUX_REG(2,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_7,.sig=SIG_ETH_TXD0,.enable=P_PIN_MUX_REG(6,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_11,.sig=SIG_LCD_G3,.enable=P_PIN_MUX_REG(0,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_0,.sig=SIG_I2S_OUT_45,.enable=P_PIN_MUX_REG(1,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_24,.sig=SIG_VGA_VS,.enable=P_PIN_MUX_REG(0,21),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_3,.sig=SIG_SPI_SS0,.enable=P_PIN_MUX_REG(9,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_3,.sig=SIG_DVIN_R3,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_28,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,27),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_4,.sig=SIG_PCM_OUT_B,.enable=P_PIN_MUX_REG(4,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_8,.sig=SIG_I2C_SCL_D,.enable=P_PIN_MUX_REG(4,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_15,.sig=SIG_TSout_D3,.enable=P_PIN_MUX_REG(3,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_5,.sig=SIG_UART_RX_AO_B,.enable=P_PIN_MUX_REG(10,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_6,.sig=SIG_ENC_6,.enable=P_PIN_MUX_REG(7,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_1,.sig=SIG_I2C_SCK_A,.enable=P_PIN_MUX_REG(5,30),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_2,.sig=SIG_SPDIF_IN,.enable=P_PIN_MUX_REG(1,8),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_11,.sig=SIG_NAND_ALE,.enable=P_PIN_MUX_REG(2,21),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_3,.sig=SIG_SD_D3_A,.enable=P_PIN_MUX_REG(8,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_7,.sig=SIG_DVP_D7,.enable=P_PIN_MUX_REG(9,5),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_0,.sig=SIG_NAND_IO_0,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_4,.sig=SIG_TSin_FAIL_A,.enable=P_PIN_MUX_REG(3,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_20,.sig=SIG_DVIN_B4,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_0,.sig=SIG_SD_D1_B,.enable=P_PIN_MUX_REG(2,14),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_4,.sig=SIG_SDXC_D3_B,.enable=P_PIN_MUX_REG(2,6),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_4,.sig=SIG_SD_D3_B,.enable=P_PIN_MUX_REG(2,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_27,.sig=SIG_UART_RTS_B,.enable=P_PIN_MUX_REG(6,20),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_9,.sig=SIG_ENC_9,.enable=P_PIN_MUX_REG(7,9),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_12,.sig=SIG_NAND_CLE,.enable=P_PIN_MUX_REG(2,20),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_25,.sig=SIG_VGA_HS,.enable=P_PIN_MUX_REG(0,20),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_2,.sig=SIG_SD_CLK_B,.enable=P_PIN_MUX_REG(2,11),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_1,.sig=SIG_SDXC_D0_B,.enable=P_PIN_MUX_REG(2,7),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_27,.sig=SIG_TCON_OEH,.enable=P_PIN_MUX_REG(8,28),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_4,.sig=SIG_NAND_IO_4,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_5,.sig=SIG_PCM_IN_A,.enable=P_PIN_MUX_REG(3,29),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_11,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,30),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_11,.sig=SIG_ETH_RXD0,.enable=P_PIN_MUX_REG(6,7),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_2,.sig=SIG_SD_D2_A,.enable=P_PIN_MUX_REG(8,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_12,.sig=SIG_TSout_D0,.enable=P_PIN_MUX_REG(3,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_3,.sig=SIG_SPDIF_OUT,.enable=P_PIN_MUX_REG(1,7),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_13,.sig=SIG_ETH_MDC,.enable=P_PIN_MUX_REG(6,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_0,.sig=SIG_isp_led_en1,.enable=P_PIN_MUX_REG(9,18),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_10,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,31),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_5,.sig=SIG_SPI_MOSI,.enable=P_PIN_MUX_REG(9,11),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_15,.sig=SIG_NAND_DQS,.enable=P_PIN_MUX_REG(2,27),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_10,.sig=SIG_XTAL_32K_OUT,.enable=P_PIN_MUX_REG(3,22),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_7,.sig=SIG_I2S_AO_CLK_IN,.enable=P_PIN_MUX_REG(1,1),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_6,.sig=SIG_SDXC_D6_C,.enable=P_PIN_MUX_REG(4,28),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_19,.sig=SIG_UART_RTS_B,.enable=P_PIN_MUX_REG(4,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_1,.sig=SIG_DVP_VS,.enable=P_PIN_MUX_REG(9,8),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_1,.sig=SIG_SD_D1_A,.enable=P_PIN_MUX_REG(8,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_11,.sig=SIG_SPI_SCLK,.enable=P_PIN_MUX_REG(8,15),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_25,.sig=SIG_DVIN_HS,.enable=P_PIN_MUX_REG(0,8),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_3,.sig=SIG_SDXC_D3_C,.enable=P_PIN_MUX_REG(4,29),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_9,.sig=SIG_I2C_SDA_A,.enable=P_PIN_MUX_REG(5,9),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_11,.sig=SIG_DVIN_G3,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_17,.sig=SIG_TSout_D5,.enable=P_PIN_MUX_REG(3,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_7,.sig=SIG_PWM_A,.enable=P_PIN_MUX_REG(2,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_25,.sig=SIG_TCON_STH1,.enable=P_PIN_MUX_REG(8,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_9,.sig=SIG_DVP_D0,.enable=P_PIN_MUX_REG(9,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_23,.sig=SIG_LCD_B7,.enable=P_PIN_MUX_REG(0,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_10,.sig=SIG_I2C_SCK_A,.enable=P_PIN_MUX_REG(5,8),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_17,.sig=SIG_ENC_17,.enable=P_PIN_MUX_REG(7,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_7,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_6,.sig=SIG_CLK_12M_OUT,.enable=P_PIN_MUX_REG(3,21),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_4,.sig=SIG_SDXC_D4_C,.enable=P_PIN_MUX_REG(4,28),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_11,.sig=SIG_PWM_B,.enable=P_PIN_MUX_REG(2,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_8,.sig=SIG_PWM_C,.enable=P_PIN_MUX_REG(2,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_5,.sig=SIG_DVIN_R5,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_13,.sig=SIG_NAND_WEN_CLK,.enable=P_PIN_MUX_REG(2,19),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_9,.sig=SIG_SD_CMD_A,.enable=P_PIN_MUX_REG(8,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_9,.sig=SIG_LCD_G1,.enable=P_PIN_MUX_REG(0,3),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_1,.sig=SIG_SDXC_D1_C,.enable=P_PIN_MUX_REG(4,29),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_1,.sig=SIG_SD_D0_B,.enable=P_PIN_MUX_REG(2,15),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_5,.sig=SIG_SD_D2_B,.enable=P_PIN_MUX_REG(2,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_6,.sig=SIG_UART_CTS_A,.enable=P_PIN_MUX_REG(4,15),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_14,.sig=SIG_TSout_D2,.enable=P_PIN_MUX_REG(3,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_8,.sig=SIG_DVP_CLK,.enable=P_PIN_MUX_REG(9,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_5,.sig=SIG_SDXC_D5_A,.enable=P_PIN_MUX_REG(5,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_13,.sig=SIG_REMOTE_OUTPUT,.enable=P_PIN_MUX_REG(10,31),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_18,.sig=SIG_ISO7816_CLK,.enable=P_PIN_MUX_REG(4,19),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_11,.sig=SIG_XTAL_24M_OUT,.enable=P_PIN_MUX_REG(3,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_5,.sig=SIG_I2S_IN_01,.enable=P_PIN_MUX_REG(1,5),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_3,.sig=SIG_NAND_IO_3,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_2,.sig=SIG_UART_CTS_AO_A,.enable=P_PIN_MUX_REG(10,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_0,.sig=SIG_TSin_D_VALID_A,.enable=P_PIN_MUX_REG(3,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_2,.sig=SIG_SDXC_D2_A,.enable=P_PIN_MUX_REG(5,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_6,.sig=SIG_PCM_FS_A,.enable=P_PIN_MUX_REG(3,28),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_5,.sig=SIG_UART_RX_A,.enable=P_PIN_MUX_REG(4,16),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_11,.sig=SIG_XTAL/2,.enable=P_PIN_MUX_REG(3,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_10,.sig=SIG_DVIN_G2,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_17,.sig=SIG_DVIN_B1,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_8,.sig=SIG_LCD_G0,.enable=P_PIN_MUX_REG(0,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_4,.sig=SIG_ETH_TX_CLK_50M,.enable=P_PIN_MUX_REG(6,15),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_14,.sig=SIG_DVP_D5,.enable=P_PIN_MUX_REG(9,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_6,.sig=SIG_LCD_R6,.enable=P_PIN_MUX_REG(0,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_11,.sig=SIG_I2C_SDA_A,.enable=P_PIN_MUX_REG(5,7),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_24,.sig=SIG_UART_TX_B,.enable=P_PIN_MUX_REG(6,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_4,.sig=SIG_I2S_OUT_01,.enable=P_PIN_MUX_REG(1,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_9,.sig=SIG_CLK_24M_OUT,.enable=P_PIN_MUX_REG(4,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_6,.sig=SIG_I2S_LR_CLK_OUT,.enable=P_PIN_MUX_REG(1,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_13,.sig=SIG_ENC_13,.enable=P_PIN_MUX_REG(7,13),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_5,.sig=SIG_UART_RX_AO_A,.enable=P_PIN_MUX_REG(8,9),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_7,.sig=SIG_NAND_IO_7,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_26,.sig=SIG_TCON_CPH1,.enable=P_PIN_MUX_REG(8,22),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_14,.sig=SIG_TSin_D5_A,.enable=P_PIN_MUX_REG(3,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_3,.sig=SIG_I2C_SCK_B,.enable=P_PIN_MUX_REG(5,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_3,.sig=SIG_SDXC_D3_A,.enable=P_PIN_MUX_REG(5,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_19,.sig=SIG_TSout_D7,.enable=P_PIN_MUX_REG(3,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_10,.sig=SIG_PWM_E,.enable=P_PIN_MUX_REG(9,19),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_1,.sig=SIG_TSin_SOP_A,.enable=P_PIN_MUX_REG(3,1),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_5,.sig=SIG_SDXC_D2_B,.enable=P_PIN_MUX_REG(2,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_12,.sig=SIG_UART_TX_A,.enable=P_PIN_MUX_REG(4,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_4,.sig=SIG_DVIN_R4,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_0,.sig=SIG_SDXC_D0_A,.enable=P_PIN_MUX_REG(5,14),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_14,.sig=SIG_UART_CTS_A,.enable=P_PIN_MUX_REG(4,11),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_0,.sig=SIG_UART_TX_AO_A,.enable=P_PIN_MUX_REG(10,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_13,.sig=SIG_DVP_D4,.enable=P_PIN_MUX_REG(9,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_15,.sig=SIG_TSin_D6_A,.enable=P_PIN_MUX_REG(3,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_9,.sig=SIG_ETH_RX_DV,.enable=P_PIN_MUX_REG(6,11),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_6,.sig=SIG_SPI_SCLK,.enable=P_PIN_MUX_REG(9,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_5,.sig=SIG_LCD_R5,.enable=P_PIN_MUX_REG(0,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_4,.sig=SIG_I2C_SLAVE_SCK_AO,.enable=P_PIN_MUX_REG(10,2),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_16,.sig=SIG_SDXC_CMD_C,.enable=P_PIN_MUX_REG(4,27),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_10,.sig=SIG_NAND_IO_RB0,.enable=P_PIN_MUX_REG(2,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_12,.sig=SIG_ENC_12,.enable=P_PIN_MUX_REG(7,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_12,.sig=SIG_TSin_D3_A,.enable=P_PIN_MUX_REG(3,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_21,.sig=SIG_DVIN_B5,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_10,.sig=SIG_I2S_LR_CLK_OUT,.enable=P_PIN_MUX_REG(10,28),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_17,.sig=SIG_UART_RX_B,.enable=P_PIN_MUX_REG(4,8),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_0,.sig=SIG_ENC_0,.enable=P_PIN_MUX_REG(7,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_10,.sig=SIG_DVP_D1,.enable=P_PIN_MUX_REG(9,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_16,.sig=SIG_TSout_D4,.enable=P_PIN_MUX_REG(3,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_26,.sig=SIG_TCON_CPH3,.enable=P_PIN_MUX_REG(8,20),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_14,.sig=SIG_LCD_G6,.enable=P_PIN_MUX_REG(0,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_8,.sig=SIG_ETH_RX_CLK_OUT,.enable=P_PIN_MUX_REG(6,9),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_18,.sig=SIG_LCD_B2,.enable=P_PIN_MUX_REG(0,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_4,.sig=SIG_UART_TX_AO_B,.enable=P_PIN_MUX_REG(10,24),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_0,.sig=SIG_SDXC_D1_B,.enable=P_PIN_MUX_REG(2,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_14,.sig=SIG_SPI_SS2,.enable=P_PIN_MUX_REG(8,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_29,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,26),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_12,.sig=SIG_NOR_Q,.enable=P_PIN_MUX_REG(5,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_3,.sig=SIG_ENC_3,.enable=P_PIN_MUX_REG(7,3),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_0,.sig=SIG_DVP_HS,.enable=P_PIN_MUX_REG(9,9),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_7,.sig=SIG_TSout_FAIL,.enable=P_PIN_MUX_REG(3,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_2,.sig=SIG_UART_CTS_C,.enable=P_PIN_MUX_REG(1,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_3,.sig=SIG_HDMI_CEC,.enable=P_PIN_MUX_REG(1,23),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_12,.sig=SIG_HDMI_CEC,.enable=P_PIN_MUX_REG(10,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_1,.sig=SIG_LCD_R1,.enable=P_PIN_MUX_REG(0,1),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_1,.sig=SIG_NAND_IO_1,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_27,.sig=SIG_TCON_VCOM,.enable=P_PIN_MUX_REG(8,19),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_13,.sig=SIG_LCD_G5,.enable=P_PIN_MUX_REG(0,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_7,.sig=SIG_REMOTE_INPUT,.enable=P_PIN_MUX_REG(10,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_13,.sig=SIG_TSout_D1,.enable=P_PIN_MUX_REG(3,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_16,.sig=SIG_I2C_SDA_D,.enable=P_PIN_MUX_REG(4,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_17,.sig=SIG_LCD_B1,.enable=P_PIN_MUX_REG(0,5),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_3,.sig=SIG_SD_D3_C,.enable=P_PIN_MUX_REG(6,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_12,.sig=SIG_DVIN_G4,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_17,.sig=SIG_SD_CLK_C,.enable=P_PIN_MUX_REG(6,24),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_19,.sig=SIG_DVIN_B3,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_13,.sig=SIG_NOR_C,.enable=P_PIN_MUX_REG(5,2),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_4,.sig=SIG_ENC_4,.enable=P_PIN_MUX_REG(7,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_2,.sig=SIG_HDMI_SCL,.enable=P_PIN_MUX_REG(1,24),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_10,.sig=SIG_LCD_G2,.enable=P_PIN_MUX_REG(0,2),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_5,.sig=SIG_NAND_IO_5,.enable=P_PIN_MUX_REG(2,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_9,.sig=SIG_TSin_D0_A,.enable=P_PIN_MUX_REG(3,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_0,.sig=SIG_I2C_SDA_C,.enable=P_PIN_MUX_REG(1,15),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_1,.sig=SIG_UART_RX_C,.enable=P_PIN_MUX_REG(1,18),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_5,.sig=SIG_I2C_MST_SDA_AO,.enable=P_PIN_MUX_REG(10,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_7,.sig=SIG_UART_RTS_A,.enable=P_PIN_MUX_REG(4,14),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_0,.sig=SIG_LCD_R0,.enable=P_PIN_MUX_REG(0,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_0,.sig=SIG_DVIN_R0,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_1,.sig=SIG_UART_RX_AO_B,.enable=P_PIN_MUX_REG(10,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_17,.sig=SIG_I2C_SCK_D,.enable=P_PIN_MUX_REG(4,4),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_2,.sig=SIG_SD_D2_C,.enable=P_PIN_MUX_REG(6,27),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_18,.sig=SIG_NOR_CS,.enable=P_PIN_MUX_REG(5,0),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_7,.sig=SIG_ENC_7,.enable=P_PIN_MUX_REG(7,7),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_3,.sig=SIG_SD_CMD_B,.enable=P_PIN_MUX_REG(2,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_18,.sig=SIG_TSout_D6,.enable=P_PIN_MUX_REG(3,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_17,.sig=SIG_ISO7816_RESET,.enable=P_PIN_MUX_REG(4,20),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_9,.sig=SIG_I2S_AO_CLK_OUT,.enable=P_PIN_MUX_REG(10,29),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_6,.sig=SIG_DVP_D6,.enable=P_PIN_MUX_REG(9,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_1,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,24),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_16,.sig=SIG_TCON_CPV,.enable=P_PIN_MUX_REG(8,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_8,.sig=SIG_ETH_RX_CLK_IN,.enable=P_PIN_MUX_REG(6,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_1,.sig=SIG_UART_RX_AO_A,.enable=P_PIN_MUX_REG(10,11),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_1,.sig=SIG_I2C_SCK_C,.enable=P_PIN_MUX_REG(1,14),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_1,.sig=SIG_I2S_OUT_23,.enable=P_PIN_MUX_REG(1,19),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_11,.sig=SIG_NOR_D,.enable=P_PIN_MUX_REG(5,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_29,.sig=SIG_PWM_C,.enable=P_PIN_MUX_REG(3,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_12,.sig=SIG_SPI_MOSI,.enable=P_PIN_MUX_REG(8,14),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_0,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,25),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_23,.sig=SIG_DVIN_B7,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_1,.sig=SIG_SD_D1_C,.enable=P_PIN_MUX_REG(6,28),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_28,.sig=SIG_PWM_D,.enable=P_PIN_MUX_REG(3,26),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_8,.sig=SIG_ENC_8,.enable=P_PIN_MUX_REG(7,8),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_18,.sig=SIG_DVIN_B2,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_8,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,22),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_5,.sig=SIG_ETH_TX_EN,.enable=P_PIN_MUX_REG(6,14),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_5,.sig=SIG_DVP_D5,.enable=P_PIN_MUX_REG(9,7),.disable=NOT_EXIST},
+	{.pad=PAD_GPOAO_14,.sig=SIG_PWM_F,.enable=P_PIN_MUX_REG(10,19),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_8,.sig=SIG_NAND_IO_CE0,.enable=P_PIN_MUX_REG(2,25),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_7,.sig=SIG_SDXC_D7_C,.enable=P_PIN_MUX_REG(4,28),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_25,.sig=SIG_LCD_HS,.enable=P_PIN_MUX_REG(0,18),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_15,.sig=SIG_UART_RTS_A,.enable=P_PIN_MUX_REG(4,10),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_0,.sig=SIG_SD_D0_C,.enable=P_PIN_MUX_REG(6,29),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_2,.sig=SIG_SDXC_CLK_B,.enable=P_PIN_MUX_REG(2,5),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_4,.sig=SIG_UART_TX_A,.enable=P_PIN_MUX_REG(4,17),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_7,.sig=SIG_PCM_CLK_A,.enable=P_PIN_MUX_REG(3,27),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_24,.sig=SIG_TCON_STV1,.enable=P_PIN_MUX_REG(8,24),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_10,.sig=SIG_SPI_SS1,.enable=P_PIN_MUX_REG(8,12),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOY_16,.sig=SIG_PWM_VS,.enable=P_PIN_MUX_REG(7,29),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOX_8,.sig=SIG_SDXC_CLK_A,.enable=P_PIN_MUX_REG(5,11),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_4,.sig=SIG_I2C_MST_SCK_AO,.enable=P_PIN_MUX_REG(10,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_9,.sig=SIG_PWM_C,.enable=P_PIN_MUX_REG(3,24),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOH_9,.sig=SIG_CLK_12M_OUT,.enable=P_PIN_MUX_REG(4,1),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_14,.sig=SIG_DVIN_G6,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_5,.sig=SIG_SDXC_D5_C,.enable=P_PIN_MUX_REG(4,28),.disable=NOT_EXIST},
+	{.pad=PAD_CARD_4,.sig=SIG_UART_TX_AO_A,.enable=P_PIN_MUX_REG(8,10),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_2,.sig=SIG_I2C_SDA_B,.enable=P_PIN_MUX_REG(5,27),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_22,.sig=SIG_LCD_B6,.enable=P_PIN_MUX_REG(0,4),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_22,.sig=SIG_DVIN_B6,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_9,.sig=SIG_SPI_SS0,.enable=P_PIN_MUX_REG(8,16),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_0,.sig=SIG_PWM_A,.enable=P_PIN_MUX_REG(9,16),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_8,.sig=SIG_DVIN_G0,.enable=P_PIN_MUX_REG(0,6),.disable=NOT_EXIST},
+	{.pad=PAD_GPIODV_16,.sig=SIG_ENC_16,.enable=P_PIN_MUX_REG(7,16),.disable=NOT_EXIST},
+	{.pad=PAD_BOOT_2,.sig=SIG_SDXC_D2_C,.enable=P_PIN_MUX_REG(4,29),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOZ_13,.sig=SIG_SPI_MISO,.enable=P_PIN_MUX_REG(8,13),.disable=NOT_EXIST},
+	{.pad=PAD_GPIOAO_5,.sig=SIG_I2C_SLAVE_SDA_AO,.enable=P_PIN_MUX_REG(10,1),.disable=NOT_EXIST},
+};
+static const char * pad_name[]={
+	[122]="GPIOAO_2",
+	[123]="GPIOAO_3",
+	[124]="GPIOAO_4",
+	[125]="GPIOAO_5",
+	[126]="GPIOAO_6",
+	[127]="GPIOAO_7",
+	[128]="GPIOAO_8",
+	[39]="GPIODV_0",
+	[129]="GPIOAO_9",
+	[40]="GPIODV_1",
+	[41]="GPIODV_2",
+	[42]="GPIODV_3",
+	[43]="GPIODV_4",
+	[44]="GPIODV_5",
+	[45]="GPIODV_6",
+	[46]="GPIODV_7",
+	[47]="GPIODV_8",
+	[48]="GPIODV_9",
+	[0]="GPIOX_0",
+	[10]="GPIOX_10",
+	[130]="GPIOAO_10",
+	[1]="GPIOX_1",
+	[11]="GPIOX_11",
+	[131]="GPIOAO_11",
+	[2]="GPIOX_2",
+	[12]="GPIOX_12",
+	[132]="GPIOAO_12",
+	[3]="GPIOX_3",
+	[13]="GPIOX_13",
+	[133]="GPIOAO_13",
+	[4]="GPIOX_4",
+	[14]="GPIOX_14",
+	[5]="GPIOX_5",
+	[15]="GPIOX_15",
+	[6]="GPIOX_6",
+	[16]="GPIOX_16",
+	[17]="GPIOX_17",
+	[7]="GPIOX_7",
+	[18]="GPIOX_18",
+	[8]="GPIOX_8",
+	[19]="GPIOX_19",
+	[9]="GPIOX_9",
+	[49]="GPIODV_10",
+	[50]="GPIODV_11",
+	[51]="GPIODV_12",
+	[52]="GPIODV_13",
+	[53]="GPIODV_14",
+	[32]="GPIOY_10",
+	[54]="GPIODV_15",
+	[33]="GPIOY_11",
+	[55]="GPIODV_16",
+	[34]="GPIOY_12",
+	[56]="GPIODV_17",
+	[35]="GPIOY_13",
+	[57]="GPIODV_18",
+	[36]="GPIOY_14",
+	[58]="GPIODV_19",
+	[37]="GPIOY_15",
+	[38]="GPIOY_16",
+	[22]="GPIOY_0",
+	[23]="GPIOY_1",
+	[24]="GPIOY_2",
+	[25]="GPIOY_3",
+	[26]="GPIOY_4",
+	[27]="GPIOY_5",
+	[28]="GPIOY_6",
+	[29]="GPIOY_7",
+	[30]="GPIOY_8",
+	[31]="GPIOY_9",
+	[115]="GPIOZ_10",
+	[116]="GPIOZ_11",
+	[117]="GPIOZ_12",
+	[118]="GPIOZ_13",
+	[119]="GPIOZ_14",
+	[95]="GPIOH_0",
+	[96]="GPIOH_1",
+	[97]="GPIOH_2",
+	[98]="GPIOH_3",
+	[76]="BOOT_0",
+	[99]="GPIOH_4",
+	[77]="BOOT_1",
+	[100]="GPIOH_5",
+	[78]="BOOT_2",
+	[101]="GPIOH_6",
+	[79]="BOOT_3",
+	[102]="GPIOH_7",
+	[80]="BOOT_4",
+	[103]="GPIOH_8",
+	[81]="BOOT_5",
+	[104]="GPIOH_9",
+	[82]="BOOT_6",
+	[20]="GPIOX_20",
+	[83]="BOOT_7",
+	[21]="GPIOX_21",
+	[84]="BOOT_8",
+	[85]="BOOT_9",
+	[86]="BOOT_10",
+	[105]="GPIOZ_0",
+	[87]="BOOT_11",
+	[106]="GPIOZ_1",
+	[88]="BOOT_12",
+	[107]="GPIOZ_2",
+	[89]="BOOT_13",
+	[69]="CARD_0",
+	[59]="GPIODV_20",
+	[108]="GPIOZ_3",
+	[90]="BOOT_14",
+	[70]="CARD_1",
+	[60]="GPIODV_21",
+	[109]="GPIOZ_4",
+	[91]="BOOT_15",
+	[71]="CARD_2",
+	[61]="GPIODV_22",
+	[110]="GPIOZ_5",
+	[92]="BOOT_16",
+	[72]="CARD_3",
+	[62]="GPIODV_23",
+	[111]="GPIOZ_6",
+	[93]="BOOT_17",
+	[73]="CARD_4",
+	[63]="GPIODV_24",
+	[112]="GPIOZ_7",
+	[94]="BOOT_18",
+	[74]="CARD_5",
+	[64]="GPIODV_25",
+	[113]="GPIOZ_8",
+	[75]="CARD_6",
+	[65]="GPIODV_26",
+	[114]="GPIOZ_9",
+	[66]="GPIODV_27",
+	[67]="GPIODV_28",
+	[68]="GPIODV_29",
+	[120]="GPIOAO_0",
+	[134]="GPOAO_14",
+	[121]="GPIOAO_1",
+	[PAD_MAX_PADS]=NULL
+};
+static const char * sig_name[]={
+	[216]="SDXC_D7_C",
+	[90]="TSin_D3_A",
+	[12]="PCM_IN_A",
+	[66]="PCM_IN_B",
+	[52]="DVP_HS",
+	[10]="UART_TX_A",
+	[101]="ENC_0",
+	[95]="TSin_D6_A",
+	[35]="UART_TX_B",
+	[104]="ENC_1",
+	[68]="TSout_SOP",
+	[64]="I2S_OUT_01",
+	[49]="UART_TX_C",
+	[170]="DVIN_VS",
+	[107]="ENC_2",
+	[173]="TCON_STH1",
+	[110]="ENC_3",
+	[97]="PWM_A",
+	[20]="SD_CLK_A",
+	[187]="SD_CLK_B",
+	[113]="ENC_4",
+	[30]="PWM_B",
+	[24]="XTAL_32K_OUT",
+	[233]="SD_CLK_C",
+	[130]="PWM_C",
+	[116]="ENC_5",
+	[217]="NAND_IO_CE0",
+	[182]="PWM_D",
+	[119]="ENC_6",
+	[218]="NAND_IO_CE1",
+	[196]="UART_RX_AO_A",
+	[168]="LCD_VS",
+	[122]="ENC_7",
+	[26]="PWM_E",
+	[15]="PCM_FS_A",
+	[277]="PWM_F",
+	[266]="UART_RX_AO_B",
+	[126]="ENC_8",
+	[70]="PCM_FS_B",
+	[254]="ETH_TXD0",
+	[224]="NAND_WEN_CLK",
+	[129]="ENC_9",
+	[18]="PCM_CLK_A",
+	[253]="ETH_TXD1",
+	[75]="PCM_CLK_B",
+	[55]="I2S_OUT_23",
+	[244]="CLK_24M_OUT",
+	[45]="ISO7816_CLK",
+	[274]="REMOTE_INPUT",
+	[242]="SPI_SCLK",
+	[197]="NAND_IO_0",
+	[200]="NAND_IO_1",
+	[65]="TSin_FAIL_A",
+	[203]="NAND_IO_2",
+	[81]="TSin_CLK_A",
+	[51]="TSin_D_VALID_A",
+	[206]="NAND_IO_3",
+	[268]="UART_RTS_AO_A",
+	[209]="NAND_IO_4",
+	[211]="NAND_IO_5",
+	[56]="TSin_SOP_A",
+	[50]="I2S_OUT_45",
+	[213]="NAND_IO_6",
+	[175]="VGA_HS",
+	[215]="NAND_IO_7",
+	[16]="UART_CTS_A",
+	[43]="UART_CTS_B",
+	[59]="UART_CTS_C",
+	[151]="DVIN_B0",
+	[82]="DVP_CLK",
+	[154]="DVIN_B1",
+	[0]="SD_D0_A",
+	[185]="SD_D0_B",
+	[157]="DVIN_B2",
+	[5]="SDXC_D2_A",
+	[199]="SD_D0_C",
+	[195]="SDXC_D2_B",
+	[159]="DVIN_B3",
+	[27]="XTAL_24M_OUT",
+	[204]="SDXC_D2_C",
+	[161]="DVIN_B4",
+	[163]="DVIN_B5",
+	[149]="LCD_B0",
+	[77]="I2S_AO_CLK_OUT",
+	[176]="TCON_CPH1",
+	[165]="DVIN_B6",
+	[153]="LCD_B1",
+	[71]="I2S_LR_CLK_IN",
+	[6]="SD_D3_A",
+	[191]="SD_D3_B",
+	[177]="TCON_CPH2",
+	[167]="DVIN_B7",
+	[156]="LCD_B2",
+	[11]="SDXC_D5_A",
+	[208]="SD_D3_C",
+	[178]="TCON_CPH3",
+	[158]="LCD_B3",
+	[212]="SDXC_D5_C",
+	[160]="LCD_B4",
+	[162]="LCD_B5",
+	[86]="TSin_D1_A",
+	[251]="ETH_TX_CLK_50M",
+	[164]="LCD_B6",
+	[67]="I2S_IN_01",
+	[166]="LCD_B7",
+	[80]="I2S_AM_CLK",
+	[133]="ENC_10",
+	[92]="TSin_D4_A",
+	[246]="I2C_SDA_A",
+	[136]="ENC_11",
+	[267]="UART_CTS_AO_A",
+	[249]="I2C_SDA_B",
+	[139]="ENC_12",
+	[142]="ENC_13",
+	[53]="I2C_SDA_C",
+	[38]="I2C_SDA_D",
+	[148]="ENC_15",
+	[96]="TSin_D7_A",
+	[152]="ENC_16",
+	[155]="ENC_17",
+	[48]="ISO7816_DATA",
+	[72]="I2S_LR_CLK_OUT",
+	[57]="DVP_VS",
+	[222]="NAND_CLE",
+	[150]="TCON_CPV",
+	[234]="NOR_CS",
+	[273]="CLK_32K_INCLK_32K_OUT",
+	[181]="DVIN_DE",
+	[169]="TCON_STV1",
+	[239]="SPI_SS0",
+	[258]="SPI_SS1",
+	[179]="DVIN_CLK",
+	[62]="SPDIF_OUT",
+	[263]="SPI_SS2",
+	[235]="HDMI_HPD",
+	[237]="HDMI_SCL",
+	[227]="NAND_DQS",
+	[252]="ETH_TX_EN",
+	[226]="NAND_REN_CLK",
+	[118]="RVIN_R6",
+	[1]="SDXC_D0_A",
+	[186]="SDXC_D0_B",
+	[198]="SDXC_D0_C",
+	[261]="ETH_MDIO",
+	[255]="ETH_RX_CLK_IN",
+	[245]="CLK_12M_OUT",
+	[228]="NAND_CE2",
+	[171]="VGA_VS",
+	[2]="SD_D1_A",
+	[231]="NAND_CE3",
+	[183]="SD_D1_B",
+	[145]="END_14",
+	[7]="SDXC_D3_A",
+	[202]="SD_D1_C",
+	[192]="SDXC_D3_B",
+	[248]="I2C_SCK_A",
+	[207]="SDXC_D3_C",
+	[13]="UART_RX_A",
+	[257]="ETH_RX_DV",
+	[250]="I2C_SCK_B",
+	[39]="UART_RX_B",
+	[58]="I2C_SCK_C",
+	[54]="UART_RX_C",
+	[41]="ISO7816_RESET",
+	[256]="ETH_RX_CLK_OUT",
+	[42]="I2C_SCK_D",
+	[14]="SDXC_D6_A",
+	[19]="UART_RTS_A",
+	[46]="UART_RTS_B",
+	[214]="SDXC_D6_C",
+	[85]="DVP_D0",
+	[61]="UART_RTS_C",
+	[225]="NOR_C",
+	[88]="TSin_D2_A",
+	[87]="DVP_D1",
+	[23]="SDXC_CMD_A",
+	[247]="isp_led_en1",
+	[221]="NOR_D",
+	[190]="SDXC_CMD_B",
+	[89]="DVP_D2",
+	[264]="isp_led_en2",
+	[229]="SDXC_CMD_C",
+	[180]="TCON_OEH",
+	[174]="DVIN_HS",
+	[100]="DVIN_R0",
+	[91]="DVP_D3",
+	[240]="SPI_MISO",
+	[103]="DVIN_R1",
+	[93]="DVP_D4",
+	[260]="ETH_RXD0",
+	[106]="DVIN_R2",
+	[69]="DVP_D5",
+	[259]="ETH_RXD1",
+	[109]="DVIN_R3",
+	[94]="TSin_D5_A",
+	[74]="DVP_D6",
+	[219]="NAND_IO_RB0",
+	[112]="DVIN_R4",
+	[79]="DVP_D7",
+	[241]="SPI_MOSI",
+	[172]="LCD_HS",
+	[115]="DVIN_R5",
+	[98]="LCD_R0",
+	[102]="LCD_R1",
+	[124]="TCON_VCOM",
+	[121]="DVIN_R7",
+	[105]="LCD_R2",
+	[220]="NAND_ALE",
+	[108]="LCD_R3",
+	[111]="LCD_R4",
+	[276]="REMOTE_OUTPUT",
+	[114]="LCD_R5",
+	[117]="LCD_R6",
+	[269]="I2C_MST_SCK_AO",
+	[223]="NOR_Q",
+	[120]="LCD_R7",
+	[76]="I2S_AO_CLK_IN",
+	[78]="TSout_FAIL",
+	[270]="I2C_SLAVE_SCK_AO",
+	[99]="TCON_OEV",
+	[28]="XTAL/2",
+	[84]="I2S_OUT_78",
+	[31]="TSout_D0",
+	[32]="TSout_D1",
+	[33]="TSout_D2",
+	[34]="TSout_D3",
+	[36]="TSout_D4",
+	[40]="TSout_D5",
+	[275]="I2S_AM_CLK_OUT",
+	[44]="TSout_D6",
+	[47]="TSout_D7",
+	[37]="ISO7816_DET",
+	[22]="SD_CMD_A",
+	[262]="ETH_MDC",
+	[189]="SD_CMD_B",
+	[271]="I2C_MST_SDA_AO",
+	[230]="SD_CMD_C",
+	[125]="DVIN_G0",
+	[21]="SDXC_CLK_A",
+	[25]="PWM_VS",
+	[188]="SDXC_CLK_B",
+	[128]="DVIN_G1",
+	[272]="I2C_SLAVE_SDA_AO",
+	[232]="SDXC_CLK_C",
+	[132]="DVIN_G2",
+	[9]="PCM_OUT_A",
+	[29]="TSout_CLK",
+	[135]="DVIN_G3",
+	[63]="PCM_OUT_B",
+	[138]="DVIN_G4",
+	[60]="SPDIF_IN",
+	[3]="SDXC_D1_A",
+	[184]="SDXC_D1_B",
+	[141]="DVIN_G5",
+	[123]="LCD_G0",
+	[201]="SDXC_D1_C",
+	[144]="DVIN_G6",
+	[127]="LCD_G1",
+	[193]="UART_TX_AO_A",
+	[147]="DVIN_G7",
+	[131]="LCD_G2",
+	[265]="UART_TX_AO_B",
+	[134]="LCD_G3",
+	[4]="SD_D2_A",
+	[194]="SD_D2_B",
+	[137]="LCD_G4",
+	[73]="TSout_D_VALID",
+	[8]="SDXC_D4_A",
+	[238]="HDMI_CEC",
+	[236]="HDMI_SDA",
+	[205]="SD_D2_C",
+	[140]="LCD_G5",
+	[210]="SDXC_D4_C",
+	[143]="LCD_G6",
+	[146]="LCD_G7",
+	[83]="TSin_D0_A",
+	[243]="I2C_SCL_D",
+	[17]="SDXC_D7_A",
+	[SIG_GPIOIN]="GPIOIN",
+	[SIG_GPIOOUT]="GPIOOUT",
+	[SIG_MAX_SIGS]=NULL
+};
+/* GPIO operation part */
+static unsigned pad_gpio_bit[]={
+	[PAD_GPIODV_7]=P_GPIO_OEN(2,7),
+	[PAD_BOOT_11]=P_GPIO_OEN(3,11),
+	[PAD_BOOT_9]=P_GPIO_OEN(3,9),
+	[PAD_GPIOAO_2]=P_GPIO_OEN(4,2),
+	[PAD_GPIOY_5]=P_GPIO_OEN(1,5),
+	[PAD_GPIODV_10]=P_GPIO_OEN(2,10),
+	[PAD_GPIODV_0]=P_GPIO_OEN(2,0),
+	[PAD_GPIOY_13]=P_GPIO_OEN(1,13),
+	[PAD_GPIOX_11]=P_GPIO_OEN(0,11),
+	[PAD_BOOT_2]=P_GPIO_OEN(3,2),
+	[PAD_GPIOZ_4]=P_GPIO_OEN(1,21),
+	[PAD_GPIOH_7]=P_GPIO_OEN(3,26),
+	[PAD_CARD_1]=P_GPIO_OEN(0,23),
+	[PAD_GPIODV_29]=P_GPIO_OEN(2,29),
+	[PAD_BOOT_15]=P_GPIO_OEN(3,15),
+	[PAD_GPIOAO_6]=P_GPIO_OEN(4,6),
+	[PAD_GPIOH_0]=P_GPIO_OEN(3,19),
+	[PAD_GPIODV_14]=P_GPIO_OEN(2,14),
+	[PAD_GPIOY_9]=P_GPIO_OEN(1,9),
+	[PAD_GPIODV_22]=P_GPIO_OEN(2,22),
+	[PAD_GPIOX_3]=P_GPIO_OEN(0,3),
+	[PAD_GPIODV_4]=P_GPIO_OEN(2,4),
+	[PAD_GPIOX_15]=P_GPIO_OEN(0,15),
+	[PAD_BOOT_6]=P_GPIO_OEN(3,6),
+	[PAD_GPIOAO_12]=P_GPIO_OEN(4,12),
+	[PAD_GPIOZ_8]=P_GPIO_OEN(1,25),
+	[PAD_GPIOZ_12]=P_GPIO_OEN(1,29),
+	[PAD_GPIOY_2]=P_GPIO_OEN(1,2),
+	[PAD_CARD_5]=P_GPIO_OEN(0,27),
+	[PAD_GPIOY_10]=P_GPIO_OEN(1,10),
+	[PAD_GPIOZ_1]=P_GPIO_OEN(1,18),
+	[PAD_GPIOH_4]=P_GPIO_OEN(3,23),
+	[PAD_GPIODV_18]=P_GPIO_OEN(2,18),
+	[PAD_GPIOX_7]=P_GPIO_OEN(0,7),
+	[PAD_GPIODV_26]=P_GPIO_OEN(2,26),
+	[PAD_GPIODV_8]=P_GPIO_OEN(2,8),
+	[PAD_GPIOX_19]=P_GPIO_OEN(0,19),
+	[PAD_BOOT_12]=P_GPIO_OEN(3,12),
+	[PAD_GPIOAO_3]=P_GPIO_OEN(4,3),
+	[PAD_GPIODV_11]=P_GPIO_OEN(2,11),
+	[PAD_GPIOY_6]=P_GPIO_OEN(1,6),
+	[PAD_GPIOY_14]=P_GPIO_OEN(1,14),
+	[PAD_GPIOX_0]=P_GPIO_OEN(0,0),
+	[PAD_GPIODV_1]=P_GPIO_OEN(2,1),
+	[PAD_GPIOX_12]=P_GPIO_OEN(0,12),
+	[PAD_BOOT_3]=P_GPIO_OEN(3,3),
+	[PAD_GPIOX_20]=P_GPIO_OEN(0,20),
+	[PAD_GPIOZ_5]=P_GPIO_OEN(1,22),
+	[PAD_GPIOH_8]=P_GPIO_OEN(3,27),
+	[PAD_CARD_2]=P_GPIO_OEN(0,24),
+	[PAD_BOOT_16]=P_GPIO_OEN(3,16),
+	[PAD_GPIOAO_7]=P_GPIO_OEN(4,7),
+	[PAD_GPIOH_1]=P_GPIO_OEN(3,20),
+	[PAD_GPIODV_15]=P_GPIO_OEN(2,15),
+	[PAD_GPIOX_4]=P_GPIO_OEN(0,4),
+	[PAD_GPIODV_23]=P_GPIO_OEN(2,23),
+	[PAD_GPIODV_5]=P_GPIO_OEN(2,5),
+	[PAD_GPIOX_16]=P_GPIO_OEN(0,16),
+	[PAD_BOOT_7]=P_GPIO_OEN(3,7),
+	[PAD_GPIOAO_13]=P_GPIO_OEN(4,13),
+	[PAD_GPIOAO_0]=P_GPIO_OEN(4,0),
+	[PAD_GPIOZ_9]=P_GPIO_OEN(1,26),
+	[PAD_GPIOY_3]=P_GPIO_OEN(1,3),
+	[PAD_GPIOZ_13]=P_GPIO_OEN(1,30),
+	[PAD_GPIOY_11]=P_GPIO_OEN(1,11),
+	[PAD_CARD_6]=P_GPIO_OEN(0,28),
+	[PAD_BOOT_0]=P_GPIO_OEN(3,0),
+	[PAD_GPIOZ_2]=P_GPIO_OEN(1,19),
+	[PAD_GPIOH_5]=P_GPIO_OEN(3,24),
+	[PAD_GPIODV_19]=P_GPIO_OEN(2,19),
+	[PAD_GPIOX_8]=P_GPIO_OEN(0,8),
+	[PAD_GPIODV_27]=P_GPIO_OEN(2,27),
+	[PAD_GPIODV_9]=P_GPIO_OEN(2,9),
+	[PAD_BOOT_13]=P_GPIO_OEN(3,13),
+	[PAD_GPIOAO_4]=P_GPIO_OEN(4,4),
+	[PAD_GPIODV_12]=P_GPIO_OEN(2,12),
+	[PAD_GPIOY_7]=P_GPIO_OEN(1,7),
+	[PAD_GPIOX_1]=P_GPIO_OEN(0,1),
+	[PAD_GPIODV_20]=P_GPIO_OEN(2,20),
+	[PAD_GPIOY_15]=P_GPIO_OEN(1,15),
+	[PAD_GPIOX_13]=P_GPIO_OEN(0,13),
+	[PAD_BOOT_4]=P_GPIO_OEN(3,4),
+	[PAD_GPIOX_21]=P_GPIO_OEN(0,21),
+	[PAD_GPIODV_2]=P_GPIO_OEN(2,2),
+	[PAD_GPIOAO_10]=P_GPIO_OEN(4,10),
+	[PAD_GPIOZ_6]=P_GPIO_OEN(1,23),
+	[PAD_GPIOY_0]=P_GPIO_OEN(1,0),
+	[PAD_GPIOZ_10]=P_GPIO_OEN(1,27),
+	[PAD_GPIOH_9]=P_GPIO_OEN(3,28),
+	[PAD_BOOT_17]=P_GPIO_OEN(3,17),
+	[PAD_CARD_3]=P_GPIO_OEN(0,25),
+	[PAD_GPIOAO_8]=P_GPIO_OEN(4,8),
+	[PAD_GPIOH_2]=P_GPIO_OEN(3,21),
+	[PAD_GPIODV_16]=P_GPIO_OEN(2,16),
+	[PAD_GPIOX_5]=P_GPIO_OEN(0,5),
+	[PAD_GPIODV_24]=P_GPIO_OEN(2,24),
+	[PAD_GPIODV_6]=P_GPIO_OEN(2,6),
+	[PAD_GPIOX_17]=P_GPIO_OEN(0,17),
+	[PAD_BOOT_10]=P_GPIO_OEN(3,10),
+	[PAD_BOOT_8]=P_GPIO_OEN(3,8),
+	[PAD_GPIOAO_1]=P_GPIO_OEN(4,1),
+	[PAD_GPIOY_4]=P_GPIO_OEN(1,4),
+	[PAD_GPIOZ_14]=P_GPIO_OEN(1,31),
+	[PAD_GPIOY_12]=P_GPIO_OEN(1,12),
+	[PAD_GPIOX_10]=P_GPIO_OEN(0,10),
+	[PAD_BOOT_1]=P_GPIO_OEN(3,1),
+	[PAD_GPIOZ_3]=P_GPIO_OEN(1,20),
+	[PAD_GPIOH_6]=P_GPIO_OEN(3,25),
+	[PAD_GPIODV_28]=P_GPIO_OEN(2,28),
+	[PAD_BOOT_14]=P_GPIO_OEN(3,14),
+	[PAD_CARD_0]=P_GPIO_OEN(0,22),
+	[PAD_GPIOX_9]=P_GPIO_OEN(0,9),
+	[PAD_GPIOAO_5]=P_GPIO_OEN(4,5),
+	[PAD_GPIOY_8]=P_GPIO_OEN(1,8),
+	[PAD_GPIODV_13]=P_GPIO_OEN(2,13),
+	[PAD_GPIOX_2]=P_GPIO_OEN(0,2),
+	[PAD_GPIODV_21]=P_GPIO_OEN(2,21),
+	[PAD_GPIODV_3]=P_GPIO_OEN(2,3),
+	[PAD_GPIOY_16]=P_GPIO_OEN(1,16),
+	[PAD_GPIOX_14]=P_GPIO_OEN(0,14),
+	[PAD_BOOT_5]=P_GPIO_OEN(3,5),
+	[PAD_GPIOAO_11]=P_GPIO_OEN(4,11),
+	[PAD_GPIOZ_7]=P_GPIO_OEN(1,24),
+	[PAD_GPOAO_14]=P_GPIO_OEN(4,14),
+	[PAD_GPIOY_1]=P_GPIO_OEN(1,1),
+	[PAD_GPIOZ_11]=P_GPIO_OEN(1,28),
+	[PAD_CARD_4]=P_GPIO_OEN(0,26),
+	[PAD_BOOT_18]=P_GPIO_OEN(3,18),
+	[PAD_GPIOAO_9]=P_GPIO_OEN(4,9),
+	[PAD_GPIOZ_0]=P_GPIO_OEN(1,17),
+	[PAD_GPIOH_3]=P_GPIO_OEN(3,22),
+	[PAD_GPIODV_17]=P_GPIO_OEN(2,17),
+	[PAD_GPIODV_25]=P_GPIO_OEN(2,25),
+	[PAD_GPIOX_18]=P_GPIO_OEN(0,18),
+	[PAD_GPIOX_6]=P_GPIO_OEN(0,6)
+};
diff --git a/arch/arm/mach-meson8b/include/mach/hardware.h b/arch/arm/mach-meson8b/include/mach/hardware.h
new file mode 100644
index 000000000000..2fb4be4e8a1d
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/hardware.h
@@ -0,0 +1,5 @@
+/*
+ * arch/arm/mach-meson8b/include/mach/hardware.h
+ */
+#include <asm/sizes.h>
+#include <mach/io.h>
diff --git a/arch/arm/mach-meson8b/include/mach/hdmi_parameter.h b/arch/arm/mach-meson8b/include/mach/hdmi_parameter.h
new file mode 100644
index 000000000000..ef9afa3aac52
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/hdmi_parameter.h
@@ -0,0 +1,870 @@
+#ifndef  HDMI_PARAMETER_DEFINE_H
+#define  HDMI_PARAMETER_DEFINE_H
+
+//inside chip
+// tx base addr  : 0x00000 ~ 0x03fff
+// rx base addr  : 0x04000 ~ 0x07fff
+// other base addr : 0x08000 ~ 0x0bfff
+// cec0 base addr : 0x0c000 ~ 0x0c0ff
+//external module
+// tx base addr  : 0x10000 ~ 0x13fff
+// rx base addr  : 0x14000 ~ 0x17fff
+// sim base addr : 0x18000 ~ 0x1bfff
+// cec0 base addr : 0x1c000 ~ 0x1c0ff
+// cec1 base addr : 0x1c100 ~ 0x1c1ff
+
+#define TX_BASE_ADDR                0x00000 // Base address for on-chip HDMI TX
+#define RX_BASE_ADDR                0x04000 // Base address for on-chip HDMI RX
+
+#define EXT_HDMI_TRX_ADDR_OFFSET    0x10000 // For simulation only: add the offset for accessing off-chip HDMI TX and/or RX
+
+//#ifdef STIMULUS_HAVE_HDMI_TX
+//#define TX_BASE_ADDR     0x10000        //outside chip
+//#else
+//#define TX_BASE_ADDR     0x00000        //inside chip
+//#endif
+//
+//#ifdef STIMULUS_HAVE_HDMI_RX
+//#define RX_BASE_ADDR     0x14000        //outside chip
+//#else
+//#define RX_BASE_ADDR     0x04000        //inside chip
+//#endif
+
+#define SIM_BASE_ADDR    0x18000        //outside chip
+#define CEC0_BASE_ADDR    0x0c000       //inside chip
+#define CEC1_BASE_ADDR    0x1c100       //outside chip
+
+#define OTHER_BASE_ADDR  0x08000        //inside chip
+
+//********** OTHER BASE related **********//
+#define HDMI_OTHER_CTRL0                    0x0
+#define HDMI_OTHER_CTRL1                    0x1
+#define HDMI_OTHER_STATUS0                  0x2
+#define HDMI_OTHER_CTRL2                    0x3
+#define HDMI_OTHER_INTR_MASKN               0x4
+#define HDMI_OTHER_INTR_STAT                0x5
+#define HDMI_OTHER_INTR_STAT_CLR            0x6
+// Reserved                                 0x7
+#define HDMI_OTHER_AVI_INTR_MASKN0          0x8
+#define HDMI_OTHER_AVI_INTR_MASKN1          0x9
+#define HDMI_OTHER_RX_AINFO_INTR_MASKN0     0xa
+#define HDMI_OTHER_RX_AINFO_INTR_MASKN1     0xb
+#define HDMI_OTHER_RX_PACKET_INTR_CLR       0xc
+
+//********** TX related **********//
+#define TX_HDCP_DKEY_OFFSET             TX_BASE_ADDR+0x400
+#define TX_RX_EDID_OFFSET               TX_BASE_ADDR+0x600
+#define TX_HDCP_SHADOW_OFFSET           TX_BASE_ADDR+0x100
+
+#define TX_IEC60958_SUB1_OFFSET         TX_BASE_ADDR+0x0B0
+#define TX_IEC60958_SUB2_OFFSET         TX_BASE_ADDR+0x0C8
+
+#define TX_IEC60958_ST_SUB1_OFFSET      TX_BASE_ADDR+0x1B0
+#define TX_IEC60958_ST_SUB2_OFFSET      TX_BASE_ADDR+0x1C8
+
+// System config 0
+#define TX_SYS0_AFE_SIGNAL        TX_BASE_ADDR+0x000
+#define TX_SYS0_AFE_LOOP          TX_BASE_ADDR+0x001
+#define TX_SYS0_ACR_CTS_0         TX_BASE_ADDR+0x002
+#define TX_SYS0_ACR_CTS_1         TX_BASE_ADDR+0x003
+#define TX_SYS0_ACR_CTS_2         TX_BASE_ADDR+0x004
+#define TX_SYS0_BIST_CONTROL      TX_BASE_ADDR+0x005
+#define TX_SYS0_BIST_DATA_0       TX_BASE_ADDR+0x006
+#define TX_SYS0_BIST_DATA_1       TX_BASE_ADDR+0x007
+#define TX_SYS0_BIST_DATA_2       TX_BASE_ADDR+0x008
+#define TX_SYS0_BIST_DATA_3       TX_BASE_ADDR+0x009
+#define TX_SYS0_BIST_DATA_4       TX_BASE_ADDR+0x00A
+#define TX_SYS0_BIST_DATA_5       TX_BASE_ADDR+0x00B
+#define TX_SYS0_BIST_DATA_6       TX_BASE_ADDR+0x00C
+#define TX_SYS0_BIST_DATA_7       TX_BASE_ADDR+0x00D
+#define TX_SYS0_BIST_DATA_8       TX_BASE_ADDR+0x00E
+#define TX_SYS0_BIST_DATA_9       TX_BASE_ADDR+0x00F
+// system config 1
+#define TX_SYS1_ACR_N_0           TX_BASE_ADDR+0x01C
+#define TX_SYS1_ACR_N_1           TX_BASE_ADDR+0x01D
+#define TX_SYS1_ACR_N_2           TX_BASE_ADDR+0x01E
+#define TX_SYS1_PRBS_DATA         TX_BASE_ADDR+0x01F
+// system config 4
+#define TX_SYS4_TX_CKI_DDR        TX_BASE_ADDR+0x0A0
+#define TX_SYS4_TX_CKO_DDR        TX_BASE_ADDR+0x0A1
+#define TX_SYS4_RX_CKI_DDR        TX_BASE_ADDR+0x0A2
+#define TX_SYS4_RX_CKO_DDR        TX_BASE_ADDR+0x0A3
+#define TX_SYS4_CONNECT_SEL_0     TX_BASE_ADDR+0x0A4
+#define TX_SYS4_CONNECT_SEL_1     TX_BASE_ADDR+0x0A5
+#define TX_SYS4_CONNECT_SEL_2     TX_BASE_ADDR+0x0A6
+#define TX_SYS4_CONNECT_SEL_3     TX_BASE_ADDR+0x0A7
+#define TX_SYS4_CK_INV_VIDEO      TX_BASE_ADDR+0x0A8
+#define TX_SYS4_CK_INV_AUDIO      TX_BASE_ADDR+0x0A9
+#define TX_SYS4_CK_INV_AFE        TX_BASE_ADDR+0x0AA
+#define TX_SYS4_CK_INV_CH01       TX_BASE_ADDR+0x0AB
+#define TX_SYS4_CK_INV_CH2        TX_BASE_ADDR+0x0AC
+#define TX_SYS4_CK_CEC            TX_BASE_ADDR+0x0AD
+#define TX_SYS4_CK_SOURCE_1       TX_BASE_ADDR+0x0AE
+#define TX_SYS4_CK_SOURCE_2       TX_BASE_ADDR+0x0AF
+// system config 5
+#define TX_SYS5_TX_SOFT_RESET_1   TX_BASE_ADDR+0x0E0
+#define TX_SYS5_TX_SOFT_RESET_2   TX_BASE_ADDR+0x0E1
+#define TX_SYS5_RX_SOFT_RESET_1   TX_BASE_ADDR+0x0E2
+#define TX_SYS5_RX_SOFT_RESET_2   TX_BASE_ADDR+0x0E3
+#define TX_SYS5_RX_SOFT_RESET_3   TX_BASE_ADDR+0x0E4
+#define TX_SYS5_SSTL_BIDIR_IN     TX_BASE_ADDR+0x0E5
+#define TX_SYS5_SSTL_IN           TX_BASE_ADDR+0x0E6
+#define TX_SYS5_SSTL_DIFF_IN      TX_BASE_ADDR+0x0E7
+#define TX_SYS5_FIFO_CONFIG       TX_BASE_ADDR+0x0E8
+#define TX_SYS5_FIFO_SAMP01_CFG   TX_BASE_ADDR+0x0E9
+#define TX_SYS5_FIFO_SAMP23_CFG   TX_BASE_ADDR+0x0EA
+#define TX_SYS5_CONNECT_FIFO_CFG  TX_BASE_ADDR+0x0EB
+#define TX_SYS5_IO_CALIB_CONTROL  TX_BASE_ADDR+0x0EC
+#define TX_SYS5_SSTL_BIDIR_OUT    TX_BASE_ADDR+0x0ED
+#define TX_SYS5_SSTL_OUT          TX_BASE_ADDR+0x0EE
+#define TX_SYS5_SSTL_DIFF_OUT     TX_BASE_ADDR+0x0EF
+
+// HDCP CONFIG
+#define TX_HDCP_ECC_CONFIG        TX_BASE_ADDR+0x024
+#define TX_HDCP_CRC_CONFIG        TX_BASE_ADDR+0x025
+#define TX_HDCP_EDID_CONFIG       TX_BASE_ADDR+0x026
+#define TX_HDCP_MEM_CONFIG        TX_BASE_ADDR+0x027
+#define TX_HDCP_HPD_FILTER_L      TX_BASE_ADDR+0x028
+#define TX_HDCP_HPD_FILTER_H      TX_BASE_ADDR+0x029
+#define TX_HDCP_ENCRYPT_BYTE      TX_BASE_ADDR+0x02A
+#define TX_HDCP_CONFIG0           TX_BASE_ADDR+0x02B
+#define TX_HDCP_CONFIG1           TX_BASE_ADDR+0x02C
+#define TX_HDCP_CONFIG2           TX_BASE_ADDR+0x02D
+#define TX_HDCP_CONFIG3           TX_BASE_ADDR+0x02E
+#define TX_HDCP_MODE              TX_BASE_ADDR+0x02F
+
+// Video config, part 1
+#define TX_VIDEO_ACTIVE_PIXELS_0  TX_BASE_ADDR+0x030
+#define TX_VIDEO_ACTIVE_PIXELS_1  TX_BASE_ADDR+0x031
+#define TX_VIDEO_FRONT_PIXELS     TX_BASE_ADDR+0x032
+#define TX_VIDEO_HSYNC_PIXELS     TX_BASE_ADDR+0x033
+#define TX_VIDEO_BACK_PIXELS      TX_BASE_ADDR+0x034
+#define TX_VIDEO_ACTIVE_LINES_0   TX_BASE_ADDR+0x035
+#define TX_VIDEO_ACTIVE_LINES_1   TX_BASE_ADDR+0x036
+#define TX_VIDEO_EOF_LINES        TX_BASE_ADDR+0x037
+#define TX_VIDEO_VSYNC_LINES      TX_BASE_ADDR+0x038
+#define TX_VIDEO_SOF_LINES        TX_BASE_ADDR+0x039
+#define TX_VIDEO_DTV_TIMING       TX_BASE_ADDR+0x03A
+#define TX_VIDEO_DTV_MODE         TX_BASE_ADDR+0x03B
+#define TX_VIDEO_DTV_FORMAT0      TX_BASE_ADDR+0x03C
+#define TX_VIDEO_DTV_FORMAT1      TX_BASE_ADDR+0x03D
+#define TX_VIDEO_EXTENSION_4K2K   TX_BASE_ADDR+0x03E
+#define TX_VIDEO_PIXEL_PACK       TX_BASE_ADDR+0x03F
+// video config, part 2
+#define TX_VIDEO_CSC_COEFF_B0     TX_BASE_ADDR+0x040
+#define TX_VIDEO_CSC_COEFF_B1     TX_BASE_ADDR+0x041
+#define TX_VIDEO_CSC_COEFF_R0     TX_BASE_ADDR+0x042
+#define TX_VIDEO_CSC_COEFF_R1     TX_BASE_ADDR+0x043
+#define TX_VIDEO_CSC_COEFF_CB0    TX_BASE_ADDR+0x044
+#define TX_VIDEO_CSC_COEFF_CB1    TX_BASE_ADDR+0x045
+#define TX_VIDEO_CSC_COEFF_CR0    TX_BASE_ADDR+0x046
+#define TX_VIDEO_CSC_COEFF_CR1    TX_BASE_ADDR+0x047
+#define TX_VIDEO_DTV_OPTION_L     TX_BASE_ADDR+0x048
+#define TX_VIDEO_DTV_OPTION_H     TX_BASE_ADDR+0x049
+#define TX_VIDEO_DTV_FILTER       TX_BASE_ADDR+0x04A
+#define TX_VIDEO_DTV_DITHER       TX_BASE_ADDR+0x04B
+#define TX_VIDEO_DTV_DEDITHER     TX_BASE_ADDR+0x04C
+#define TX_VIDEO_PROC_CONFIG0     TX_BASE_ADDR+0x04E
+#define TX_VIDEO_PROC_CONFIG1     TX_BASE_ADDR+0x04F
+
+// Audio config
+#define TX_AUDIO_FORMAT           TX_BASE_ADDR+0x058
+#define TX_AUDIO_SPDIF            TX_BASE_ADDR+0x059
+#define TX_AUDIO_I2S              TX_BASE_ADDR+0x05A
+#define TX_AUDIO_FIFO             TX_BASE_ADDR+0x05B
+#define TX_AUDIO_LIPSYNC          TX_BASE_ADDR+0x05C
+#define TX_AUDIO_CONTROL          TX_BASE_ADDR+0x05D
+#define TX_AUDIO_HEADER           TX_BASE_ADDR+0x05E
+#define TX_AUDIO_SAMPLE           TX_BASE_ADDR+0x05F
+#define TX_AUDIO_VALID            TX_BASE_ADDR+0x060
+#define TX_AUDIO_USER             TX_BASE_ADDR+0x061
+#define TX_AUDIO_PACK             TX_BASE_ADDR+0x062
+#define TX_AUDIO_CLOCK_METER      TX_BASE_ADDR+0x063
+#define TX_AUDIO_CONTROL_MORE     TX_BASE_ADDR+0x064
+
+// tmds config
+#define TX_TMDS_MODE              TX_BASE_ADDR+0x068
+#define TX_TMDS_CONFIG0           TX_BASE_ADDR+0x06C
+#define TX_TMDS_CONFIG1           TX_BASE_ADDR+0x06D
+
+// packet config
+#define TX_PACKET_ALLOC_ACTIVE_1  TX_BASE_ADDR+0x078
+#define TX_PACKET_ALLOC_ACTIVE_2  TX_BASE_ADDR+0x079
+#define TX_PACKET_ALLOC_EOF_1     TX_BASE_ADDR+0x07A
+#define TX_PACKET_ALLOC_EOF_2     TX_BASE_ADDR+0x07B
+#define TX_PACKET_ALLOC_SOF_1     TX_BASE_ADDR+0x07C
+#define TX_PACKET_ALLOC_SOF_2     TX_BASE_ADDR+0x07D
+#define TX_PACKET_CONTROL_1       TX_BASE_ADDR+0x07E
+#define TX_PACKET_CONTROL_2       TX_BASE_ADDR+0x07F
+
+#define TX_EDID_CONFIG_MORE       TX_BASE_ADDR+0x080
+#define TX_ALLOC_VSYNC_1          TX_BASE_ADDR+0x081
+#define TX_ALLOC_VSYNC_2          TX_BASE_ADDR+0x082
+#define TX_ALLOC_VSYNC_3          TX_BASE_ADDR+0x083
+#define TX_MEM_PD_REG0            TX_BASE_ADDR+0x084
+
+// core config
+#define TX_CORE_DATA_CAPTURE_1    TX_BASE_ADDR+0x0F0
+#define TX_CORE_DATA_CAPTURE_2    TX_BASE_ADDR+0x0F1
+#define TX_CORE_DATA_MONITOR_1    TX_BASE_ADDR+0x0F2
+#define TX_CORE_DATA_MONITOR_2    TX_BASE_ADDR+0x0F3
+#define TX_CORE_CALIB_MODE        TX_BASE_ADDR+0x0F4
+#define TX_CORE_CALIB_SAMPLE_DELAY  TX_BASE_ADDR+0x0F5
+#define TX_CORE_CALIB_VALUE_AUTO  TX_BASE_ADDR+0x0F6
+#define TX_CORE_CALIB_VALUE       TX_BASE_ADDR+0x0F7
+
+// HDCP shadow register
+#define TX_HDCP_SHW_BKSV_0        TX_BASE_ADDR+0x100
+#define TX_HDCP_SHW_BKSV_1        TX_BASE_ADDR+0x101
+#define TX_HDCP_SHW_BKSV_2        TX_BASE_ADDR+0x102
+#define TX_HDCP_SHW_BKSV_3        TX_BASE_ADDR+0x103
+#define TX_HDCP_SHW_BKSV_4        TX_BASE_ADDR+0x104
+#define TX_HDCP_SHW_RI1_0         TX_BASE_ADDR+0x108
+#define TX_HDCP_SHW_RI1_1         TX_BASE_ADDR+0x109
+#define TX_HDCP_SHW_PJ1           TX_BASE_ADDR+0x10A
+#define TX_HDCP_SHW_AKSV_0        TX_BASE_ADDR+0x110
+#define TX_HDCP_SHW_AKSV_1        TX_BASE_ADDR+0x111
+#define TX_HDCP_SHW_AKSV_2        TX_BASE_ADDR+0x112
+#define TX_HDCP_SHW_AKSV_3        TX_BASE_ADDR+0x113
+#define TX_HDCP_SHW_AKSV_4        TX_BASE_ADDR+0x114
+#define TX_HDCP_SHW_AINFO         TX_BASE_ADDR+0x115
+#define TX_HDCP_SHW_AN_0          TX_BASE_ADDR+0x118
+#define TX_HDCP_SHW_AN_1          TX_BASE_ADDR+0x119
+#define TX_HDCP_SHW_AN_2          TX_BASE_ADDR+0x11A
+#define TX_HDCP_SHW_AN_3          TX_BASE_ADDR+0x11B
+#define TX_HDCP_SHW_AN_4          TX_BASE_ADDR+0x11C
+#define TX_HDCP_SHW_AN_5          TX_BASE_ADDR+0x11D
+#define TX_HDCP_SHW_AN_6          TX_BASE_ADDR+0x11E
+#define TX_HDCP_SHW_AN_7          TX_BASE_ADDR+0x11F
+#define TX_HDCP_SHW_V1_H0_0       TX_BASE_ADDR+0x120
+#define TX_HDCP_SHW_V1_H0_1       TX_BASE_ADDR+0x121
+#define TX_HDCP_SHW_V1_H0_2       TX_BASE_ADDR+0x122
+#define TX_HDCP_SHW_V1_H0_3       TX_BASE_ADDR+0x123
+#define TX_HDCP_SHW_V1_H1_0       TX_BASE_ADDR+0x124
+#define TX_HDCP_SHW_V1_H1_1       TX_BASE_ADDR+0x125
+#define TX_HDCP_SHW_V1_H1_2       TX_BASE_ADDR+0x126
+#define TX_HDCP_SHW_V1_H1_3       TX_BASE_ADDR+0x127
+#define TX_HDCP_SHW_V1_H2_0       TX_BASE_ADDR+0x128
+#define TX_HDCP_SHW_V1_H2_1       TX_BASE_ADDR+0x129
+#define TX_HDCP_SHW_V1_H2_2       TX_BASE_ADDR+0x12A
+#define TX_HDCP_SHW_V1_H2_3       TX_BASE_ADDR+0x12B
+#define TX_HDCP_SHW_V1_H3_0       TX_BASE_ADDR+0x12C
+#define TX_HDCP_SHW_V1_H3_1       TX_BASE_ADDR+0x12D
+#define TX_HDCP_SHW_V1_H3_2       TX_BASE_ADDR+0x12E
+#define TX_HDCP_SHW_V1_H3_3       TX_BASE_ADDR+0x12F
+#define TX_HDCP_SHW_V1_H4_0       TX_BASE_ADDR+0x130
+#define TX_HDCP_SHW_V1_H4_1       TX_BASE_ADDR+0x131
+#define TX_HDCP_SHW_V1_H4_2       TX_BASE_ADDR+0x132
+#define TX_HDCP_SHW_V1_H4_3       TX_BASE_ADDR+0x133
+#define TX_HDCP_SHW_BCAPS         TX_BASE_ADDR+0x140
+#define TX_HDCP_SHW_BSTATUS_0     TX_BASE_ADDR+0x141
+#define TX_HDCP_SHW_BSTATUS_1     TX_BASE_ADDR+0x142
+#define TX_HDCP_SHW_KSV_FIFO      TX_BASE_ADDR+0x143
+
+// system status 0
+#define TX_SYSST0_CONNECT_FIFO    TX_BASE_ADDR+0x180
+#define TX_SYSST0_PLL_MONITOR     TX_BASE_ADDR+0x181
+#define TX_SYSST0_AFE_FIFO        TX_BASE_ADDR+0x182
+#define TX_SYSST0_ROM_STATUS      TX_BASE_ADDR+0x18F
+
+// system status 1
+#define TX_SYSST1_CALIB_BIT_RESULT_0     TX_BASE_ADDR+0x1E0
+#define TX_SYSST1_CALIB_BIT_RESULT_1     TX_BASE_ADDR+0x1E1
+#define TX_SYSST1_CALIB_BIT_RESULT_2     TX_BASE_ADDR+0x1E2
+#define TX_SYSST1_CALIB_BIT_RESULT_3     TX_BASE_ADDR+0x1E3
+#define TX_SYSST1_CALIB_BIT_RESULT_4     TX_BASE_ADDR+0x1E4
+#define TX_SYSST1_CALIB_BIT_RESULT_5     TX_BASE_ADDR+0x1E5
+#define TX_SYSST1_CALIB_BIT_RESULT_6     TX_BASE_ADDR+0x1E6
+#define TX_SYSST1_CALIB_BIT_RESULT_7     TX_BASE_ADDR+0x1E7
+#define TX_SYSST1_CALIB_BUS_RESULT_0     TX_BASE_ADDR+0x1E8
+#define TX_SYSST1_CALIB_BUS_RESULT_1     TX_BASE_ADDR+0x1E9
+#define TX_SYSST1_CALIB_BUS_RESULT_2     TX_BASE_ADDR+0x1EA
+#define TX_SYSST1_CALIB_BUS_RESULT_3     TX_BASE_ADDR+0x1EB
+#define TX_SYSST1_CALIB_BUS_RESULT_4     TX_BASE_ADDR+0x1EC
+#define TX_SYSST1_CALIB_BUS_RESULT_5     TX_BASE_ADDR+0x1ED
+#define TX_SYSST1_CALIB_BUS_RESULT_6     TX_BASE_ADDR+0x1EE
+#define TX_SYSST1_CALIB_BUS_RESULT_7     TX_BASE_ADDR+0x1EF
+
+// hdcp status
+#define TX_HDCP_ST_AUTHENTICATION        TX_BASE_ADDR+0x190
+#define TX_HDCP_ST_FRAME_COUNT           TX_BASE_ADDR+0x191
+#define TX_HDCP_ST_STATUS_0              TX_BASE_ADDR+0x192
+#define TX_HDCP_ST_STATUS_1              TX_BASE_ADDR+0x193
+#define TX_HDCP_ST_STATUS_2              TX_BASE_ADDR+0x194
+#define TX_HDCP_ST_STATUS_3              TX_BASE_ADDR+0x195
+#define TX_HDCP_ST_EDID_STATUS           TX_BASE_ADDR+0x196
+#define TX_HDCP_ST_MEM_STATUS            TX_BASE_ADDR+0x197
+#define TX_HDCP_ST_ST_MODE               TX_BASE_ADDR+0x19F
+
+// video status
+#define TX_VIDEO_ST_ACTIVE_PIXELS_1      TX_BASE_ADDR+0x1A0
+#define TX_VIDEO_ST_ACTIVE_PIXELS_2      TX_BASE_ADDR+0x1A1
+#define TX_VIDEO_ST_FRONT_PIXELS         TX_BASE_ADDR+0x1A2
+#define TX_VIDEO_ST_HSYNC_PIXELS         TX_BASE_ADDR+0x1A3
+#define TX_VIDEO_ST_BACK_PIXELS          TX_BASE_ADDR+0x1A4
+#define TX_VIDEO_ST_ACTIVE_LINES_1       TX_BASE_ADDR+0x1A5
+#define TX_VIDEO_ST_ACTIVE_LINES_2       TX_BASE_ADDR+0x1A6
+#define TX_VIDEO_ST_EOF_LINES            TX_BASE_ADDR+0x1A7
+#define TX_VIDEO_ST_VSYNC_LINES          TX_BASE_ADDR+0x1A8
+#define TX_VIDEO_ST_SOF_LINES            TX_BASE_ADDR+0x1A9
+#define TX_VIDEO_ST_DTV_TIMING           TX_BASE_ADDR+0x1AA
+#define TX_VIDEO_ST_DTV_MODE             TX_BASE_ADDR+0x1AB
+// audio status
+#define TX_VIDEO_ST_AUDIO_STATUS         TX_BASE_ADDR+0x1AC
+#define TX_AFE_STATUS_0                  TX_BASE_ADDR+0x1AE
+#define TX_AFE_STATUS_1                  TX_BASE_ADDR+0x1AF
+
+// Packet status
+#define TX_PACKET_ST_REQUEST_STATUS_1    TX_BASE_ADDR+0x1F0
+#define TX_PACKET_ST_REQUEST_STATUS_2    TX_BASE_ADDR+0x1F1
+#define TX_PACKET_ST_REQUEST_MISSED_1    TX_BASE_ADDR+0x1F2
+#define TX_PACKET_ST_REQUEST_MISSED_2    TX_BASE_ADDR+0x1F3
+#define TX_PACKET_ST_ENCODE_STATUS_0     TX_BASE_ADDR+0x1F4
+#define TX_PACKET_ST_ENCODE_STATUS_1     TX_BASE_ADDR+0x1F5
+#define TX_PACKET_ST_ENCODE_STATUS_2     TX_BASE_ADDR+0x1F6
+#define TX_PACKET_ST_TIMER_STATUS        TX_BASE_ADDR+0x1F7
+
+// tmds status
+#define TX_TMDS_ST_CLOCK_METER_1         TX_BASE_ADDR+0x1F8
+#define TX_TMDS_ST_CLOCK_METER_2         TX_BASE_ADDR+0x1F9
+#define TX_TMDS_ST_CLOCK_METER_3         TX_BASE_ADDR+0x1FA
+#define TX_TMDS_ST_TMDS_STATUS_1         TX_BASE_ADDR+0x1FC
+#define TX_TMDS_ST_TMDS_STATUS_2         TX_BASE_ADDR+0x1FD
+#define TX_TMDS_ST_TMDS_STATUS_3         TX_BASE_ADDR+0x1FE
+#define TX_TMDS_ST_TMDS_STATUS_4         TX_BASE_ADDR+0x1FF
+
+
+// Packet register
+#define TX_PKT_REG_SPD_INFO_BASE_ADDR     TX_BASE_ADDR+0x200
+#define TX_PKT_REG_VEND_INFO_BASE_ADDR    TX_BASE_ADDR+0x220
+#define TX_PKT_REG_MPEG_INFO_BASE_ADDR    TX_BASE_ADDR+0x240
+#define TX_PKT_REG_AVI_INFO_BASE_ADDR     TX_BASE_ADDR+0x260
+#define TX_PKT_REG_AUDIO_INFO_BASE_ADDR   TX_BASE_ADDR+0x280
+#define TX_PKT_REG_ACP_INFO_BASE_ADDR     TX_BASE_ADDR+0x2A0
+#define TX_PKT_REG_ISRC1_BASE_ADDR        TX_BASE_ADDR+0x2C0
+#define TX_PKT_REG_ISRC2_BASE_ADDR        TX_BASE_ADDR+0x2E0
+#define TX_PKT_REG_EXCEPT0_BASE_ADDR      TX_BASE_ADDR+0x300
+#define TX_PKT_REG_EXCEPT1_BASE_ADDR      TX_BASE_ADDR+0x320
+#define TX_PKT_REG_EXCEPT2_BASE_ADDR      TX_BASE_ADDR+0x340
+#define TX_PKT_REG_EXCEPT3_BASE_ADDR      TX_BASE_ADDR+0x360
+#define TX_PKT_REG_EXCEPT4_BASE_ADDR      TX_BASE_ADDR+0x380
+#define TX_PKT_REG_GAMUT_P0_BASE_ADDR     TX_BASE_ADDR+0x3A0
+#define TX_PKT_REG_GAMUT_P1_1_BASE_ADDR   TX_BASE_ADDR+0x3C0
+#define TX_PKT_REG_GAMUT_P1_2_BASE_ADDR   TX_BASE_ADDR+0x3E0
+
+
+
+
+
+//************ RX related ************//
+#define RX_HDCP_DKEY_OFFSET             RX_BASE_ADDR+0x400
+#define RX_EDID_OFFSET                  RX_BASE_ADDR+0x600
+
+#define RX_IEC60958_SUB1_OFFSET         RX_BASE_ADDR+0x0B0
+#define RX_IEC60958_SUB2_OFFSET         RX_BASE_ADDR+0x0C8
+
+#define RX_IEC60958_ST_SUB1_OFFSET      RX_BASE_ADDR+0x1B0
+#define RX_IEC60958_ST_SUB2_OFFSET      RX_BASE_ADDR+0x1C8
+
+
+// System config 0
+#define RX_SYS0_CDR_0_1_BYPASS          RX_BASE_ADDR+0x006
+#define RX_SYS0_CDR_2_3_BYPASS          RX_BASE_ADDR+0x007
+#define RX_SYS0_EQ_MASK_CH0_0           RX_BASE_ADDR+0x008
+#define RX_SYS0_EQ_MASK_CH0_1           RX_BASE_ADDR+0x009
+#define RX_SYS0_EQ_MASK_CH1_0           RX_BASE_ADDR+0x00A
+#define RX_SYS0_EQ_MASK_CH1_1           RX_BASE_ADDR+0x00B
+#define RX_SYS0_EQ_MASK_CH2_0           RX_BASE_ADDR+0x00C
+#define RX_SYS0_EQ_MASK_CH2_1           RX_BASE_ADDR+0x00D
+#define RX_SYS0_EQ_MASK_CH3_0           RX_BASE_ADDR+0x00E
+#define RX_SYS0_EQ_MASK_CH3_1           RX_BASE_ADDR+0x00F
+// System config 1
+#define RX_SYS1_CLOCK_CONTROL_M_EXP_0   RX_BASE_ADDR+0x010
+#define RX_SYS1_CLOCK_CONTROL_M_EXP_1   RX_BASE_ADDR+0x011
+#define RX_SYS1_CLOCK_CONTROL_M_EXP_2   RX_BASE_ADDR+0x012
+#define RX_SYS1_CLOCK_CONTROL_N_EXP_0   RX_BASE_ADDR+0x013
+#define RX_SYS1_CLOCK_CONTROL_N_EXP_1   RX_BASE_ADDR+0x014
+#define RX_SYS1_CLOCK_CONTROL_N_EXP_2   RX_BASE_ADDR+0x015
+#define RX_SYS1_CLOCK_CONTROL_K1_IN_0   RX_BASE_ADDR+0x016
+#define RX_SYS1_CLOCK_CONTROL_K1_IN_1   RX_BASE_ADDR+0x017
+#define RX_SYS1_CLOCK_CONTROL_K1_IN_2   RX_BASE_ADDR+0x018
+#define RX_SYS1_CLOCK_CONTROL_K1_IN_3   RX_BASE_ADDR+0x019
+#define RX_SYS1_CLOCK_CONTROL_K1_IN_4   RX_BASE_ADDR+0x01A
+#define RX_SYS1_CLOCK_CONTROL_K1_IN_5   RX_BASE_ADDR+0x01B
+#define RX_SYS1_CLOCK_CONTROL_K1_IN_6   RX_BASE_ADDR+0x01C
+#define RX_SYS1_CLOCK_CONTROL_TIMER_0   RX_BASE_ADDR+0x01D
+#define RX_SYS1_CLOCK_CONTROL_TIMER_1   RX_BASE_ADDR+0x01E
+#define RX_SYS1_CLOCK_CONTROL_FSM       RX_BASE_ADDR+0x01F
+// system config 2
+#define RX_SYS2_CDR0_BYPASS_CNTRL       RX_BASE_ADDR+0x080
+#define RX_SYS2_CDR0_EN_CNTRL           RX_BASE_ADDR+0x081
+#define RX_SYS2_CDR1_BYPASS_CNTRL       RX_BASE_ADDR+0x082
+#define RX_SYS2_CDR1_EN_CNTRL           RX_BASE_ADDR+0x083
+#define RX_SYS2_CDR2_BYPASS_CNTRL       RX_BASE_ADDR+0x084
+#define RX_SYS2_CDR2_EN_CNTRL           RX_BASE_ADDR+0x085
+#define RX_SYS2_CDR3_BYPASS_CNTRL       RX_BASE_ADDR+0x086
+#define RX_SYS2_CDR3_EN_CNTRL           RX_BASE_ADDR+0x087
+#define RX_SYS2_PRBS0_CNTRL             RX_BASE_ADDR+0x088
+#define RX_SYS2_PRBS1_CNTRL             RX_BASE_ADDR+0x089
+#define RX_SYS2_PRBS2_CNTRL             RX_BASE_ADDR+0x08A
+#define RX_SYS2_PRBS3_CNTRL             RX_BASE_ADDR+0x08B
+#define RX_SYS2_PRBS_ERR_THR            RX_BASE_ADDR+0x08C
+#define RX_SYS2_PRBS_TIME_WINDOW0       RX_BASE_ADDR+0x08D
+#define RX_SYS2_PRBS_TIME_WINDOW1       RX_BASE_ADDR+0x08E
+// system config 3
+#define RX_SYS3_RX_ACR_0                RX_BASE_ADDR+0x09C
+#define RX_SYS3_RX_ACR_1                RX_BASE_ADDR+0x09D
+// system config 4
+#define RX_SYS4_OSC_EXT_CLK_CNTL_0      RX_BASE_ADDR+0x0AD
+#define RX_SYS4_OSC_EXT_CLK_CNTL_1      RX_BASE_ADDR+0x0AE
+
+// HDCP CONFIG
+#define RX_HDCP_I2C_MASTER_CONFIG_0     RX_BASE_ADDR+0x020
+#define RX_HDCP_I2C_MASTER_CONFIG_1     RX_BASE_ADDR+0x021
+#define RX_HDCP_I2C_MASTER_CONFIG_2     RX_BASE_ADDR+0x022
+#define RX_HDCP_ECC_CONFIG              RX_BASE_ADDR+0x024
+#define RX_HDCP_CRC_CONFIG              RX_BASE_ADDR+0x025
+#define RX_HDCP_EDID_CONFIG             RX_BASE_ADDR+0x026
+#define RX_HDCP_MEM_CONFIG              RX_BASE_ADDR+0x027
+#define RX_HDCP_HPD_FILTER_L            RX_BASE_ADDR+0x028
+#define RX_HDCP_HPD_FILTER_H            RX_BASE_ADDR+0x029
+#define RX_HDCP_BCAPS                   RX_BASE_ADDR+0x02A
+#define RX_HDCP_CONFIG0                 RX_BASE_ADDR+0x02B
+#define RX_HDCP_CONFIG1                 RX_BASE_ADDR+0x02C
+#define RX_HDCP_CONFIG2                 RX_BASE_ADDR+0x02D
+#define RX_HDCP_CONFIG3                 RX_BASE_ADDR+0x02E
+#define RX_HDCP_MODE                    RX_BASE_ADDR+0x02F
+
+// Video config, part 1
+#define RX_VIDEO_ACTIVE_PIXELS_0        RX_BASE_ADDR+0x030
+#define RX_VIDEO_ACTIVE_PIXELS_1        RX_BASE_ADDR+0x031
+#define RX_VIDEO_FRONT_PIXELS           RX_BASE_ADDR+0x032
+#define RX_VIDEO_HSYNC_PIXELS           RX_BASE_ADDR+0x033
+#define RX_VIDEO_BACK_PIXELS            RX_BASE_ADDR+0x034
+#define RX_VIDEO_ACTIVE_LINES_0         RX_BASE_ADDR+0x035
+#define RX_VIDEO_ACTIVE_LINES_1         RX_BASE_ADDR+0x036
+#define RX_VIDEO_EOF_LINES              RX_BASE_ADDR+0x037
+#define RX_VIDEO_VSYNC_LINES            RX_BASE_ADDR+0x038
+#define RX_VIDEO_SOF_LINES              RX_BASE_ADDR+0x039
+#define RX_VIDEO_DTV_TIMING             RX_BASE_ADDR+0x03A
+#define RX_VIDEO_DTV_MODE               RX_BASE_ADDR+0x03B
+#define RX_VIDEO_DTV_FORMAT0            RX_BASE_ADDR+0x03C
+#define RX_VIDEO_DTV_FORMAT1            RX_BASE_ADDR+0x03D
+#define RX_VIDEO_PIXEL_PACK             RX_BASE_ADDR+0x03F
+// video config, part 2
+#define RX_VIDEO_CSC_COEFF_B0           RX_BASE_ADDR+0x040
+#define RX_VIDEO_CSC_COEFF_B1           RX_BASE_ADDR+0x041
+#define RX_VIDEO_CSC_COEFF_R0           RX_BASE_ADDR+0x042
+#define RX_VIDEO_CSC_COEFF_R1           RX_BASE_ADDR+0x043
+#define RX_VIDEO_CSC_COEFF_CB0          RX_BASE_ADDR+0x044
+#define RX_VIDEO_CSC_COEFF_CB1          RX_BASE_ADDR+0x045
+#define RX_VIDEO_CSC_COEFF_CR0          RX_BASE_ADDR+0x046
+#define RX_VIDEO_CSC_COEFF_CR1          RX_BASE_ADDR+0x047
+#define RX_VIDEO_DTV_OPTION_L           RX_BASE_ADDR+0x048
+#define RX_VIDEO_DTV_OPTION_H           RX_BASE_ADDR+0x049
+#define RX_VIDEO_DTV_FILTER             RX_BASE_ADDR+0x04A
+#define RX_VIDEO_DTV_DITHER             RX_BASE_ADDR+0x04B
+#define RX_VIDEO_PROC_CONFIG0           RX_BASE_ADDR+0x04E
+#define RX_VIDEO_PROC_CONFIG1           RX_BASE_ADDR+0x04F
+
+// Reserved config
+#define RX_AUDIO_EQ_INDEX_CH3           RX_BASE_ADDR+0x056
+#define RX_AUDIO_EQ_CNTRL_CH3           RX_BASE_ADDR+0x057
+// VIC and color depth control and interrupts
+#define RX_VIC_COLOR_DEPTH              RX_BASE_ADDR+0x063
+// Audio config
+#define RX_AUDIO_FORMAT                 RX_BASE_ADDR+0x058
+#define RX_AUDIO_SPDIF                  RX_BASE_ADDR+0x059
+#define RX_AUDIO_I2S                    RX_BASE_ADDR+0x05A
+#define RX_AUDIO_FIFO                   RX_BASE_ADDR+0x05B
+#define RX_AUDIO_SOFT_MUTE              RX_BASE_ADDR+0x05C
+#define RX_AUDIO_CONTROL                RX_BASE_ADDR+0x05D
+#define RX_AUDIO_RSV1                   RX_BASE_ADDR+0x05E
+#define RX_AUDIO_SAMPLE                 RX_BASE_ADDR+0x05F
+#define RX_AUDIO_RSV2                   RX_BASE_ADDR+0x060
+// tmds config
+#define RX_TMDS_MODE                    RX_BASE_ADDR+0x07E
+#define RX_TMDS_PACKET_CONTROL          RX_BASE_ADDR+0x07F
+
+// core config
+#define RX_CORE_DATA_CAPTURE_1          RX_BASE_ADDR+0x0F0
+#define RX_CORE_DATA_CAPTURE_2          RX_BASE_ADDR+0x0F1
+#define RX_CORE_DATA_MONITOR_1          RX_BASE_ADDR+0x0F2
+#define RX_CORE_DATA_MONITOR_2          RX_BASE_ADDR+0x0F3
+#define RX_CORE_CALIB_MODE              RX_BASE_ADDR+0x0F4
+#define RX_CORE_WAIT_START              RX_BASE_ADDR+0x0F5
+#define RX_CORE_WAIT_NEXT               RX_BASE_ADDR+0x0F6
+#define RX_CORE_CALIB_VALUE             RX_BASE_ADDR+0x0F7
+#define RX_CORE_INTERRUPT_CLEAR_0       RX_BASE_ADDR+0x0F8
+#define RX_CORE_INTERRUPT_CLEAR_1       RX_BASE_ADDR+0x0F9
+#define RX_CORE_INTERRUPT_CLEAR_2       RX_BASE_ADDR+0x0FA
+#define RX_CORE_EQ_INDEX_CH0            RX_BASE_ADDR+0x0FB
+#define RX_CORE_EQ_INDEX_CH1            RX_BASE_ADDR+0x0FC
+#define RX_CORE_EQ_INDEX_CH2            RX_BASE_ADDR+0x0FD
+#define RX_CORE_EQ_CNTRL_0              RX_BASE_ADDR+0x0FE
+#define RX_CORE_EQ_CNTRL_1              RX_BASE_ADDR+0x0FF
+// HDCP shadow register
+#define RX_HDCP_SHW_BKSV_0              RX_BASE_ADDR+0x100
+#define RX_HDCP_SHW_BKSV_1              RX_BASE_ADDR+0x101
+#define RX_HDCP_SHW_BKSV_2              RX_BASE_ADDR+0x102
+#define RX_HDCP_SHW_BKSV_3              RX_BASE_ADDR+0x103
+#define RX_HDCP_SHW_BKSV_4              RX_BASE_ADDR+0x104
+#define RX_HDCP_SHW_RI1_0               RX_BASE_ADDR+0x108
+#define RX_HDCP_SHW_RI1_1               RX_BASE_ADDR+0x109
+#define RX_HDCP_SHW_PJ1                 RX_BASE_ADDR+0x10A
+#define RX_HDCP_SHW_AKSV_0              RX_BASE_ADDR+0x110
+#define RX_HDCP_SHW_AKSV_1              RX_BASE_ADDR+0x111
+#define RX_HDCP_SHW_AKSV_2              RX_BASE_ADDR+0x112
+#define RX_HDCP_SHW_AKSV_3              RX_BASE_ADDR+0x113
+#define RX_HDCP_SHW_AKSV_4              RX_BASE_ADDR+0x114
+#define RX_HDCP_SHW_AINFO               RX_BASE_ADDR+0x115
+#define RX_HDCP_SHW_AN_0                RX_BASE_ADDR+0x118
+#define RX_HDCP_SHW_AN_1                RX_BASE_ADDR+0x119
+#define RX_HDCP_SHW_AN_2                RX_BASE_ADDR+0x11A
+#define RX_HDCP_SHW_AN_3                RX_BASE_ADDR+0x11B
+#define RX_HDCP_SHW_AN_4                RX_BASE_ADDR+0x11C
+#define RX_HDCP_SHW_AN_5                RX_BASE_ADDR+0x11D
+#define RX_HDCP_SHW_AN_6                RX_BASE_ADDR+0x11E
+#define RX_HDCP_SHW_AN_7                RX_BASE_ADDR+0x11F
+#define RX_HDCP_SHW_V1_H0_0             RX_BASE_ADDR+0x120
+#define RX_HDCP_SHW_V1_H0_1             RX_BASE_ADDR+0x121
+#define RX_HDCP_SHW_V1_H0_2             RX_BASE_ADDR+0x122
+#define RX_HDCP_SHW_V1_H0_3             RX_BASE_ADDR+0x123
+#define RX_HDCP_SHW_V1_H1_0             RX_BASE_ADDR+0x124
+#define RX_HDCP_SHW_V1_H1_1             RX_BASE_ADDR+0x125
+#define RX_HDCP_SHW_V1_H1_2             RX_BASE_ADDR+0x126
+#define RX_HDCP_SHW_V1_H1_3             RX_BASE_ADDR+0x127
+#define RX_HDCP_SHW_V1_H2_0             RX_BASE_ADDR+0x128
+#define RX_HDCP_SHW_V1_H2_1             RX_BASE_ADDR+0x129
+#define RX_HDCP_SHW_V1_H2_2             RX_BASE_ADDR+0x12A
+#define RX_HDCP_SHW_V1_H2_3             RX_BASE_ADDR+0x12B
+#define RX_HDCP_SHW_V1_H3_0             RX_BASE_ADDR+0x12C
+#define RX_HDCP_SHW_V1_H3_1             RX_BASE_ADDR+0x12D
+#define RX_HDCP_SHW_V1_H3_2             RX_BASE_ADDR+0x12E
+#define RX_HDCP_SHW_V1_H3_3             RX_BASE_ADDR+0x12F
+#define RX_HDCP_SHW_V1_H4_0             RX_BASE_ADDR+0x130
+#define RX_HDCP_SHW_V1_H4_1             RX_BASE_ADDR+0x131
+#define RX_HDCP_SHW_V1_H4_2             RX_BASE_ADDR+0x132
+#define RX_HDCP_SHW_V1_H4_3             RX_BASE_ADDR+0x133
+#define RX_HDCP_SHW_BCAPS               RX_BASE_ADDR+0x140
+#define RX_HDCP_SHW_BSTATUS_0           RX_BASE_ADDR+0x141
+#define RX_HDCP_SHW_BSTATUS_1           RX_BASE_ADDR+0x142
+#define RX_HDCP_SHW_KSV_FIFO            RX_BASE_ADDR+0x143
+#define RX_HDCP_SHW_KM_0                RX_BASE_ADDR+0x148
+#define RX_HDCP_SHW_KM_1                RX_BASE_ADDR+0x149
+#define RX_HDCP_SHW_KM_2                RX_BASE_ADDR+0x14A
+#define RX_HDCP_SHW_KM_3                RX_BASE_ADDR+0x14B
+#define RX_HDCP_SHW_KM_4                RX_BASE_ADDR+0x14C
+#define RX_HDCP_SHW_KM_5                RX_BASE_ADDR+0x14D
+#define RX_HDCP_SHW_KM_6                RX_BASE_ADDR+0x14E
+// system status extension
+#define RX_SYSST_EXT_CDR0_MONITOR_0     RX_BASE_ADDR+0x160
+#define RX_SYSST_EXT_CDR0_MONITOR_1     RX_BASE_ADDR+0x161
+#define RX_SYSST_EXT_CDR1_MONITOR_0     RX_BASE_ADDR+0x162
+#define RX_SYSST_EXT_CDR1_MONITOR_1     RX_BASE_ADDR+0x163
+#define RX_SYSST_EXT_CDR2_MONITOR_0     RX_BASE_ADDR+0x164
+#define RX_SYSST_EXT_CDR2_MONITOR_1     RX_BASE_ADDR+0x165
+#define RX_SYSST_EXT_CDR3_MONITOR_0     RX_BASE_ADDR+0x166
+#define RX_SYSST_EXT_CDR3_MONITOR_1     RX_BASE_ADDR+0x167
+#define RX_SYSST_EXT_PRBS_BER_METER_0   RX_BASE_ADDR+0x168
+#define RX_SYSST_EXT_PRBS_BER_METER_1   RX_BASE_ADDR+0x169
+#define RX_SYSST_EXT_PRBS_BER_METER_2   RX_BASE_ADDR+0x16A
+#define RX_SYSST_EXT_PRBS_STATUS        RX_BASE_ADDR+0x16B
+#define RX_SYSST_EXT_RCALIB_STATUS_0    RX_BASE_ADDR+0x16D
+#define RX_SYSST_EXT_RCALIB_STATUS_1    RX_BASE_ADDR+0x16E
+#define RX_SYSST_EXT_RX_FIFO_STATUS     RX_BASE_ADDR+0x16F
+// Error Correction status
+#define RX_ERRST_ECC_STATUS_0           RX_BASE_ADDR+0x170
+#define RX_ERRST_ECC_STATUS_1           RX_BASE_ADDR+0x171
+#define RX_ERRST_ECC_STATUS_2           RX_BASE_ADDR+0x172
+#define RX_ERRST_ECC_STATUS_3           RX_BASE_ADDR+0x173
+#define RX_ERRST_ECC_STATUS_4           RX_BASE_ADDR+0x174
+#define RX_ERRST_PACKET_CONTENTS        RX_BASE_ADDR+0x175
+#define RX_ERRST_ERROR_LOCATION_0       RX_BASE_ADDR+0x176
+#define RX_ERRST_ERROR_LOCATION_1       RX_BASE_ADDR+0x177
+#define RX_ERRST_ERROR_LOCATION_2       RX_BASE_ADDR+0x178
+#define RX_ERRST_ERROR_LOCATION_3       RX_BASE_ADDR+0x179
+#define RX_ERRST_ERROR_LOCATION_4       RX_BASE_ADDR+0x17A
+#define RX_ERRST_ERROR_LOCATION_5       RX_BASE_ADDR+0x17B
+#define RX_ERRST_ERROR_LOCATION_6       RX_BASE_ADDR+0x17C
+#define RX_ERRST_ERROR_LOCATION_7       RX_BASE_ADDR+0x17D
+#define RX_ERRST_ERROR_LOCATION_8       RX_BASE_ADDR+0x17E
+#define RX_ERRST_ERROR_LOCATION_9       RX_BASE_ADDR+0x17F
+
+// system status 0
+#define RX_SYSST0_AFE_REV_ID            RX_BASE_ADDR+0x180
+#define RX_SYSST0_PWR_STATUS            RX_BASE_ADDR+0x189
+#define RX_SYSST0_CTS_STATUS_L          RX_BASE_ADDR+0x18A
+#define RX_SYSST0_CTS_STATUS_H          RX_BASE_ADDR+0x18B
+#define RX_SYSST0_NCTS_STATUS           RX_BASE_ADDR+0x18C
+#define RX_SYSST0_N_STATUS_L            RX_BASE_ADDR+0x18D
+#define RX_SYSST0_N_STATUS_H            RX_BASE_ADDR+0x18E
+#define RX_SYSST0_ROM_STATUS            RX_BASE_ADDR+0x18F
+// system status 1
+#define RX_SYSST1_CLOCK_CONTROL_M_ACT_0         RX_BASE_ADDR+0x1E0
+#define RX_SYSST1_CLOCK_CONTROL_M_ACT_1         RX_BASE_ADDR+0x1E1
+#define RX_SYSST1_CLOCK_CONTROL_M_ACT_2         RX_BASE_ADDR+0x1E2
+#define RX_SYSST1_CLOCK_CONTROL_N_ACT_0         RX_BASE_ADDR+0x1E3
+#define RX_SYSST1_CLOCK_CONTROL_N_ACT_1         RX_BASE_ADDR+0x1E4
+#define RX_SYSST1_CLOCK_CONTROL_N_ACT_2         RX_BASE_ADDR+0x1E5
+#define RX_SYSST1_CLOCK_CONTROL_K1_OUT_0        RX_BASE_ADDR+0x1E6
+#define RX_SYSST1_CLOCK_CONTROL_K1_OUT_1        RX_BASE_ADDR+0x1E7
+#define RX_SYSST1_CLOCK_CONTROL_K1_OUT_2        RX_BASE_ADDR+0x1E8
+#define RX_SYSST1_CLOCK_CONTROL_K1_OUT_3        RX_BASE_ADDR+0x1E9
+#define RX_SYSST1_CLOCK_CONTROL_K1_OUT_4        RX_BASE_ADDR+0x1EA
+#define RX_SYSST1_CLOCK_CONTROL_K1_OUT_5        RX_BASE_ADDR+0x1EB
+#define RX_SYSST1_CLOCK_CONTROL_DIV_PRE_0       RX_BASE_ADDR+0x1EC
+#define RX_SYSST1_CLOCK_CONTROL_DIV_PRE_1       RX_BASE_ADDR+0x1ED
+#define RX_SYSST1_CLOCK_CONTROL_DIV_MAIN_0      RX_BASE_ADDR+0x1EE
+#define RX_SYSST1_CLOCK_CONTROL_DIV_MAIN_1      RX_BASE_ADDR+0x1EF
+
+// hdcp status
+#define RX_HDCP_ST_AUTHENTICATION               RX_BASE_ADDR+0x190
+#define RX_HDCP_ST_FRAME_COUNT                  RX_BASE_ADDR+0x191
+#define RX_HDCP_ST_STATUS_0                     RX_BASE_ADDR+0x192
+#define RX_HDCP_ST_STATUS_1                     RX_BASE_ADDR+0x193
+#define RX_HDCP_ST_STATUS_2                     RX_BASE_ADDR+0x194
+#define RX_HDCP_ST_STATUS_3                     RX_BASE_ADDR+0x195
+#define RX_HDCP_ST_EDID_STATUS                  RX_BASE_ADDR+0x196
+#define RX_HDCP_ST_MEM_STATUS                   RX_BASE_ADDR+0x197
+#define RX_HDCP_ST_EDID_EXTENSIONS              RX_BASE_ADDR+0x198
+#define RX_HDCP_ST_EDDC_MASTER_SEGMENT          RX_BASE_ADDR+0x199
+#define RX_HDCP_ST_EDDC_MASTER_STATE            RX_BASE_ADDR+0x19A
+#define RX_HDCP_ST_EDDC_SLAVE_SEGMENT           RX_BASE_ADDR+0x19B
+#define RX_HDCP_ST_EDDC_SLAVE_STATE             RX_BASE_ADDR+0x19C
+#define RX_HDCP_ST_CRC_STATUS                   RX_BASE_ADDR+0x19D
+#define RX_HDCP_ST_REPEATER                     RX_BASE_ADDR+0x19E
+#define RX_HDCP_ST_ST_MODE                      RX_BASE_ADDR+0x19F
+
+// video status
+#define RX_VIDEO_ST_ACTIVE_PIXELS_1     RX_BASE_ADDR+0x1A0
+#define RX_VIDEO_ST_ACTIVE_PIXELS_2     RX_BASE_ADDR+0x1A1
+#define RX_VIDEO_ST_FRONT_PIXELS        RX_BASE_ADDR+0x1A2
+#define RX_VIDEO_ST_HSYNC_PIXELS        RX_BASE_ADDR+0x1A3
+#define RX_VIDEO_ST_BACK_PIXELS         RX_BASE_ADDR+0x1A4
+#define RX_VIDEO_ST_ACTIVE_LINES_1      RX_BASE_ADDR+0x1A5
+#define RX_VIDEO_ST_ACTIVE_LINES_2      RX_BASE_ADDR+0x1A6
+#define RX_VIDEO_ST_EOF_LINES           RX_BASE_ADDR+0x1A7
+#define RX_VIDEO_ST_VSYNC_LINES         RX_BASE_ADDR+0x1A8
+#define RX_VIDEO_ST_SOF_LINES           RX_BASE_ADDR+0x1A9
+#define RX_VIDEO_ST_DTV_TIMING          RX_BASE_ADDR+0x1AA
+#define RX_VIDEO_ST_DTV_MODE            RX_BASE_ADDR+0x1AB
+// audio status
+#define RX_AUDIOST_AUDIO_STATUS         RX_BASE_ADDR+0x1AC
+#define RX_AUDIOST_AUDIO_HEADER         RX_BASE_ADDR+0x1AD
+#define RX_AUDIOST_AUDIO_FIFO_LEVEL     RX_BASE_ADDR+0x1AE
+#define RX_AUDIOST_CALIB_STATUS         RX_BASE_ADDR+0x1AF
+// core status
+#define RX_COREST_INTERRUPT_STATUS_0    RX_BASE_ADDR+0x1F0
+#define RX_COREST_INTERRUPT_STATUS_1    RX_BASE_ADDR+0x1F1
+#define RX_COREST_INTERRUPT_STATUS_2    RX_BASE_ADDR+0x1F2
+#define RX_COREST_EQ_MEAS_STATUS        RX_BASE_ADDR+0x1F3
+#define RX_COREST_TMDS_MEAS_STATUS_0    RX_BASE_ADDR+0x1F4
+#define RX_COREST_TMDS_MEAS_STATUS_1    RX_BASE_ADDR+0x1F5
+#define RX_COREST_TMDS_MEAS_STATUS_2    RX_BASE_ADDR+0x1F6
+#define RX_COREST_TMDS_MEAS_STATUS_3    RX_BASE_ADDR+0x1F7
+// tmds status
+#define RX_TMDSST_ALIGN_STATUS_0        RX_BASE_ADDR+0x1F8
+#define RX_TMDSST_ALIGN_STATUS_1        RX_BASE_ADDR+0x1F9
+#define RX_TMDSST_ALIGN_STATUS_2        RX_BASE_ADDR+0x1FA
+#define RX_TMDSST_ALIGN_STATUS_3        RX_BASE_ADDR+0x1FB
+#define RX_TMDSST_HDMI_STATUS           RX_BASE_ADDR+0x1FC
+#define RX_TMDSST_EQ_STATUS_CH0         RX_BASE_ADDR+0x1FD
+#define RX_TMDSST_EQ_STATUS_CH1         RX_BASE_ADDR+0x1FE
+#define RX_TMDSST_EQ_STATUS_CH2         RX_BASE_ADDR+0x1FF
+
+// Packet register
+#define RX_PKT_REG_SPD_INFO_BASE_ADDR           RX_BASE_ADDR+0x200
+#define RX_PKT_REG_VEND_INFO_BASE_ADDR          RX_BASE_ADDR+0x220
+#define RX_PKT_REG_MPEG_INFO_BASE_ADDR          RX_BASE_ADDR+0x240
+#define RX_PKT_REG_AVI_INFO_BASE_ADDR           RX_BASE_ADDR+0x260
+#define RX_PKT_REG_AUDIO_INFO_BASE_ADDR         RX_BASE_ADDR+0x280
+#define RX_PKT_REG_ACP_INFO_BASE_ADDR           RX_BASE_ADDR+0x2A0
+#define RX_PKT_REG_ISRC1_BASE_ADDR              RX_BASE_ADDR+0x2C0
+#define RX_PKT_REG_ISRC2_BASE_ADDR              RX_BASE_ADDR+0x2E0
+#define RX_PKT_REG_EXCEPT0_BASE_ADDR            RX_BASE_ADDR+0x300
+#define RX_PKT_REG_EXCEPT1_BASE_ADDR            RX_BASE_ADDR+0x320
+#define RX_PKT_REG_EXCEPT2_BASE_ADDR            RX_BASE_ADDR+0x340
+#define RX_PKT_REG_EXCEPT3_BASE_ADDR            RX_BASE_ADDR+0x360
+#define RX_PKT_REG_GAMUT_P0_BASE_ADDR           RX_BASE_ADDR+0x380
+#define RX_PKT_REG_GAMUT_P1_2_BASE_ADDR         RX_BASE_ADDR+0x3A0
+#define RX_PKT_REG_GAMUT_P1_3_BASE_ADDR         RX_BASE_ADDR+0x3C0
+#define RX_PKT_REG_GAMUT_P1_4_BASE_ADDR         RX_BASE_ADDR+0x3E0
+
+
+//********** CEC related **********//
+//read/write
+#define CEC_TX_MSG_0_HEADER        0x00
+#define CEC_TX_MSG_1_OPCODE        0x01
+#define CEC_TX_MSG_2_OP1           0x02
+#define CEC_TX_MSG_3_OP2           0x03
+#define CEC_TX_MSG_4_OP3           0x04
+#define CEC_TX_MSG_5_OP4           0x05
+#define CEC_TX_MSG_6_OP5           0x06
+#define CEC_TX_MSG_7_OP6           0x07
+#define CEC_TX_MSG_8_OP7           0x08
+#define CEC_TX_MSG_9_OP8           0x09
+#define CEC_TX_MSG_A_OP9           0x0A
+#define CEC_TX_MSG_B_OP10          0x0B
+#define CEC_TX_MSG_C_OP11          0x0C
+#define CEC_TX_MSG_D_OP12          0x0D
+#define CEC_TX_MSG_E_OP13          0x0E
+#define CEC_TX_MSG_F_OP14          0x0F
+
+//read/write
+#define CEC_TX_MSG_LENGTH          0x10
+#define CEC_TX_MSG_CMD             0x11
+#define CEC_TX_WRITE_BUF           0x12
+#define CEC_TX_CLEAR_BUF           0x13
+#define CEC_RX_MSG_CMD             0x14
+#define CEC_RX_CLEAR_BUF           0x15
+#define CEC_LOGICAL_ADDR0          0x16
+#define CEC_LOGICAL_ADDR1          0x17
+#define CEC_LOGICAL_ADDR2          0x18
+#define CEC_LOGICAL_ADDR3          0x19
+#define CEC_LOGICAL_ADDR4          0x1A
+#define CEC_CLOCK_DIV_H            0x1B
+#define CEC_CLOCK_DIV_L            0x1C
+
+// The following registers are for fine tuning CEC bit timing parameters.
+// They are only valid in AO CEC, NOT valid in HDMITX CEC.
+// The AO CEC's timing parameters are already set default to work with 32768Hz clock, so hopefully
+// SW never need to program these registers. The timing registers are made programmable just in case.
+#define AO_CEC_QUIESCENT_25MS_BIT7_0            0x20
+#define AO_CEC_QUIESCENT_25MS_BIT11_8           0x21
+#define AO_CEC_STARTBITMINL2H_3MS5_BIT7_0       0x22
+#define AO_CEC_STARTBITMINL2H_3MS5_BIT8         0x23
+#define AO_CEC_STARTBITMAXL2H_3MS9_BIT7_0       0x24
+#define AO_CEC_STARTBITMAXL2H_3MS9_BIT8         0x25
+#define AO_CEC_STARTBITMINH_0MS6_BIT7_0         0x26
+#define AO_CEC_STARTBITMINH_0MS6_BIT8           0x27
+#define AO_CEC_STARTBITMAXH_1MS0_BIT7_0         0x28
+#define AO_CEC_STARTBITMAXH_1MS0_BIT8           0x29
+#define AO_CEC_STARTBITMINTOTAL_4MS3_BIT7_0     0x2A
+#define AO_CEC_STARTBITMINTOTAL_4MS3_BIT9_8     0x2B
+#define AO_CEC_STARTBITMAXTOTAL_4MS7_BIT7_0     0x2C
+#define AO_CEC_STARTBITMAXTOTAL_4MS7_BIT9_8     0x2D
+#define AO_CEC_LOGIC1MINL2H_0MS4_BIT7_0         0x2E
+#define AO_CEC_LOGIC1MINL2H_0MS4_BIT8           0x2F
+#define AO_CEC_LOGIC1MAXL2H_0MS8_BIT7_0         0x30
+#define AO_CEC_LOGIC1MAXL2H_0MS8_BIT8           0x31
+#define AO_CEC_LOGIC0MINL2H_1MS3_BIT7_0         0x32
+#define AO_CEC_LOGIC0MINL2H_1MS3_BIT8           0x33
+#define AO_CEC_LOGIC0MAXL2H_1MS7_BIT7_0         0x34
+#define AO_CEC_LOGIC0MAXL2H_1MS7_BIT8           0x35
+#define AO_CEC_LOGICMINTOTAL_2MS05_BIT7_0       0x36
+#define AO_CEC_LOGICMINTOTAL_2MS05_BIT9_8       0x37
+#define AO_CEC_LOGICMAXHIGH_2MS8_BIT7_0         0x38
+#define AO_CEC_LOGICMAXHIGH_2MS8_BIT8           0x39
+#define AO_CEC_LOGICERRLOW_3MS4_BIT7_0          0x3A
+#define AO_CEC_LOGICERRLOW_3MS4_BIT8            0x3B
+#define AO_CEC_NOMSMPPOINT_1MS05                0x3C
+#define AO_CEC_DELCNTR_LOGICERR                 0x3E
+#define AO_CEC_TXTIME_17MS_BIT7_0               0x40
+#define AO_CEC_TXTIME_17MS_BIT10_8              0x41
+#define AO_CEC_TXTIME_2BIT_BIT7_0               0x42
+#define AO_CEC_TXTIME_2BIT_BIT10_8              0x43
+#define AO_CEC_TXTIME_4BIT_BIT7_0               0x44
+#define AO_CEC_TXTIME_4BIT_BIT10_8              0x45
+#define AO_CEC_STARTBITNOML2H_3MS7_BIT7_0       0x46
+#define AO_CEC_STARTBITNOML2H_3MS7_BIT8         0x47
+#define AO_CEC_STARTBITNOMH_0MS8_BIT7_0         0x48
+#define AO_CEC_STARTBITNOMH_0MS8_BIT8           0x49
+#define AO_CEC_LOGIC1NOML2H_0MS6_BIT7_0         0x4A
+#define AO_CEC_LOGIC1NOML2H_0MS6_BIT8           0x4B
+#define AO_CEC_LOGIC0NOML2H_1MS5_BIT7_0         0x4C
+#define AO_CEC_LOGIC0NOML2H_1MS5_BIT8           0x4D
+#define AO_CEC_LOGIC1NOMH_1MS8_BIT7_0           0x4E
+#define AO_CEC_LOGIC1NOMH_1MS8_BIT8             0x4F
+#define AO_CEC_LOGIC0NOMH_0MS9_BIT7_0           0x50
+#define AO_CEC_LOGIC0NOMH_0MS9_BIT8             0x51
+#define AO_CEC_LOGICERRLOW_3MS6_BIT7_0          0x52
+#define AO_CEC_LOGICERRLOW_3MS6_BIT8            0x53
+#define AO_CEC_CHKCONTENTION_0MS1               0x54
+#define AO_CEC_PREPARENXTBIT_0MS05_BIT7_0       0x56
+#define AO_CEC_PREPARENXTBIT_0MS05_BIT8         0x57
+#define AO_CEC_NOMSMPACKPOINT_0MS45             0x58
+#define AO_CEC_ACK0NOML2H_1MS5_BIT7_0           0x5A
+#define AO_CEC_ACK0NOML2H_1MS5_BIT8             0x5B
+
+#define CEC_TXTIME_17MS_BIT7_0                  0x40
+#define CEC_TXTIME_17MS_BIT10_8                 0x41
+#define CEC_TXTIME_2BIT_BIT7_0                  0x42
+#define CEC_TXTIME_2BIT_BIT10_8                 0x43
+#define CEC_TXTIME_4BIT_BIT7_0                  0x44
+#define CEC_TXTIME_4BIT_BIT10_8                 0x45
+#define CEC_BUGFIX_DISABLE_0                    0x60
+#define CEC_BUGFIX_DISABLE_1                    0x61
+
+//read only
+#define CEC_RX_MSG_0_HEADER        0x80
+#define CEC_RX_MSG_1_OPCODE        0x81
+#define CEC_RX_MSG_2_OP1           0x82
+#define CEC_RX_MSG_3_OP2           0x83
+#define CEC_RX_MSG_4_OP3           0x84
+#define CEC_RX_MSG_5_OP4           0x85
+#define CEC_RX_MSG_6_OP5           0x86
+#define CEC_RX_MSG_7_OP6           0x87
+#define CEC_RX_MSG_8_OP7           0x88
+#define CEC_RX_MSG_9_OP8           0x89
+#define CEC_RX_MSG_A_OP9           0x8A
+#define CEC_RX_MSG_B_OP10          0x8B
+#define CEC_RX_MSG_C_OP11          0x8C
+#define CEC_RX_MSG_D_OP12          0x8D
+#define CEC_RX_MSG_E_OP13          0x8E
+#define CEC_RX_MSG_F_OP14          0x8F
+
+//read only
+#define CEC_RX_MSG_LENGTH          0x90
+#define CEC_RX_MSG_STATUS          0x91
+#define CEC_RX_NUM_MSG             0x92
+#define CEC_TX_MSG_STATUS          0x93
+#define CEC_TX_NUM_MSG             0x94
+
+// tx_msg_cmd definition
+#define TX_NO_OP                0  // No transaction
+#define TX_REQ_CURRENT          1  // Transmit earliest message in buffer
+#define TX_ABORT                2  // Abort transmitting earliest message
+#define TX_REQ_NEXT             3  // Overwrite earliest message in buffer and transmit next message
+
+// tx_msg_status definition
+#define TX_IDLE                 0  // No transaction
+#define TX_BUSY                 1  // Transmitter is busy
+#define TX_DONE                 2  // Message has been successfully transmitted
+#define TX_ERROR                3  // Message has been transmitted with error
+
+// rx_msg_cmd
+#define RX_NO_OP                0  // No transaction
+#define RX_ACK_CURRENT          1  // Read earliest message in buffer
+#define RX_DISABLE              2  // Disable receiving latest message
+#define RX_ACK_NEXT             3  // Clear earliest message from buffer and read next message
+
+// rx_msg_status
+#define RX_IDLE                 0  // No transaction
+#define RX_BUSY                 1  // Receiver is busy
+#define RX_DONE                 2  // Message has been received successfully
+#define RX_ERROR                3  // Message has been received with error
+
+
+
+//************ SIM related *************//
+#define SIM_MYREG_BASE_ADDR             SIM_BASE_ADDR+0x0000
+#define SIM_CLKS_BASE_ADDR              SIM_BASE_ADDR+0x0800
+#define SIM_SDI2HDMI_BASE_ADDR          SIM_BASE_ADDR+0x1000
+#define SIM_VIDEOGEN_BASE_ADDR          SIM_BASE_ADDR+0x1800
+#define SIM_VIDEO_ANALYZE_BASE_ADDR     SIM_BASE_ADDR+0x2000
+#define SIM_AUDIOGEN_BASE_ADDR          SIM_BASE_ADDR+0x2800
+
+#define SIM_MYREG_RESET                 SIM_MYREG_BASE_ADDR+0x0020
+
+#define SIM_MYREG_TX_I2S_SPDIF          SIM_MYREG_BASE_ADDR+0x00F0
+#define SIM_MYREG_RX_I2S_SPDIF          SIM_MYREG_BASE_ADDR+0x00F1
+
+#define SIM_MYREG_CPU_PRINT_CHAR        SIM_MYREG_BASE_ADDR+0x00FB
+#define SIM_MYREG_CMD_CNT               SIM_MYREG_BASE_ADDR+0x00FC
+#define SIM_MYREG_CPU_PRINT             SIM_MYREG_BASE_ADDR+0x00FD
+#define SIM_MYREG_END_SIM               SIM_MYREG_BASE_ADDR+0x00FE
+#define SIM_MYREG_CONFIGEND             SIM_MYREG_BASE_ADDR+0x00FF
+
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/hdmi_tx_reg.h b/arch/arm/mach-meson8b/include/mach/hdmi_tx_reg.h
new file mode 100644
index 000000000000..96f6919272a4
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/hdmi_tx_reg.h
@@ -0,0 +1,454 @@
+#ifndef _HDMI_TX_REG_H
+#define _HDMI_TX_REG_H
+
+//wait for pll lock
+//must wait first (100us+) then polling lock bit to check
+/*
+#define M6_PLL_WAIT_FOR_LOCK(pll) \
+	do{\
+		__udelay(1000);\
+	}while((aml_read_reg32(pll)&0x80000000)==0);
+*/
+#ifdef CONFIG_ARCH_MESON6
+//M6 PLL control value 
+#define M6_PLL_CNTL_CST2 (0x814d3928)
+#define M6_PLL_CNTL_CST3 (0x6b425012)
+#define M6_PLL_CNTL_CST4 (0x110)
+
+//VID PLL
+#define M6_VID_PLL_CNTL_2 (M6_PLL_CNTL_CST2)
+#define M6_VID_PLL_CNTL_3 (M6_PLL_CNTL_CST3)
+#define M6_VID_PLL_CNTL_4 (M6_PLL_CNTL_CST4)
+#endif
+unsigned int hdmi_rd_reg(unsigned int addr);
+
+#define hdmi_wr_only_reg(addr, data)   hdmi_wr_reg(addr, data)
+
+void hdmi_wr_reg(unsigned int addr, unsigned int data);
+
+#define hdmi_set_reg_bits(reg, val, start, len) \
+  hdmi_wr_reg(reg, (hdmi_rd_reg(reg) & ~(((1L<<(len))-1)<<(start)))|((unsigned int)(val) << (start)))
+
+unsigned long aocec_rd_reg(unsigned long addr);
+void aocec_wr_reg(unsigned long addr, unsigned long data);
+
+typedef struct {
+    unsigned short cbus_addr;
+    unsigned char gate_bit;
+}Hdmi_Gate_s;
+
+
+//inside chip
+// tx base addr  : 0x00000 ~ 0x03fff
+// rx base addr  : 0x04000 ~ 0x07fff
+// sim base addr : 0x08000 ~ 0x0bfff
+// cec0 base addr : 0x0c000 ~ 0x0c0ff
+//external module
+// tx base addr  : 0x10000 ~ 0x13fff
+// rx base addr  : 0x14000 ~ 0x17fff
+// sim base addr : 0x18000 ~ 0x1bfff
+// cec0 base addr : 0x1c000 ~ 0x1c0ff
+// cec1 base addr : 0x1c100 ~ 0x1c1ff
+
+#define TX_BASE_ADDR     0x00000        //inside chip
+
+#define CEC0_BASE_ADDR    0x0c000       //inside chip 
+#define CEC1_BASE_ADDR    0x1c100       //outside chip 
+
+#define OTHER_BASE_ADDR  0x08000        //inside chip
+
+//********** OTHER BASE related **********//
+#define HDMI_OTHER_CTRL0            0x0
+#define HDMI_OTHER_CTRL1            0x1
+#define HDMI_OTHER_STATUS0          0x2
+#define HDMI_OTHER_CTRL2            0x3
+#define HDMI_OTHER_INTR_MASKN       0x4
+#define HDMI_OTHER_INTR_STAT        0x5
+#define HDMI_OTHER_INTR_STAT_CLR    0x6
+
+//********** TX related **********//
+#define TX_RX_EDID_OFFSET               TX_BASE_ADDR+0x600 
+#define TX_HDCP_SHADOW_OFFSET           TX_BASE_ADDR+0x100
+#define TX_HDCP_BKSV_SHADOW             TX_HDCP_SHADOW_OFFSET
+#define TX_HDCP_AKSV_SHADOW             TX_HDCP_SHADOW_OFFSET + 0x10
+
+#define TX_IEC60958_SUB1_OFFSET         TX_BASE_ADDR+0x0B0 
+#define TX_IEC60958_SUB2_OFFSET         TX_BASE_ADDR+0x0C8 
+
+#define TX_IEC60958_ST_SUB1_OFFSET      TX_BASE_ADDR+0x1B0 
+#define TX_IEC60958_ST_SUB2_OFFSET      TX_BASE_ADDR+0x1C8 
+
+// System config 0
+#define TX_SYS0_AFE_SIGNAL        TX_BASE_ADDR+0x000 
+#define TX_SYS0_AFE_LOOP          TX_BASE_ADDR+0x001 
+#define TX_SYS0_ACR_CTS_0         TX_BASE_ADDR+0x002 
+#define TX_SYS0_ACR_CTS_1         TX_BASE_ADDR+0x003 
+#define TX_SYS0_ACR_CTS_2         TX_BASE_ADDR+0x004 
+#define TX_SYS0_BIST_CONTROL      TX_BASE_ADDR+0x005 
+#define TX_SYS0_BIST_DATA_0       TX_BASE_ADDR+0x006 
+#define TX_SYS0_BIST_DATA_1       TX_BASE_ADDR+0x007 
+#define TX_SYS0_BIST_DATA_2       TX_BASE_ADDR+0x008 
+#define TX_SYS0_BIST_DATA_3       TX_BASE_ADDR+0x009 
+#define TX_SYS0_BIST_DATA_4       TX_BASE_ADDR+0x00A 
+#define TX_SYS0_BIST_DATA_5       TX_BASE_ADDR+0x00B 
+#define TX_SYS0_BIST_DATA_6       TX_BASE_ADDR+0x00C 
+#define TX_SYS0_BIST_DATA_7       TX_BASE_ADDR+0x00D 
+#define TX_SYS0_BIST_DATA_8       TX_BASE_ADDR+0x00E 
+#define TX_SYS0_BIST_DATA_9       TX_BASE_ADDR+0x00F 
+
+#define TX_SYS1_ACR_N_0           TX_BASE_ADDR+0x01C 
+#define TX_SYS1_ACR_N_1           TX_BASE_ADDR+0x01D 
+#define TX_SYS1_ACR_N_2           TX_BASE_ADDR+0x01E 
+#define TX_SYS1_PRBS_DATA         TX_BASE_ADDR+0x01F 
+// system config 4
+#define TX_SYS4_TX_CKI_DDR        TX_BASE_ADDR+0x0A0 
+#define TX_SYS4_TX_CKO_DDR        TX_BASE_ADDR+0x0A1 
+#define TX_SYS4_RX_CKI_DDR        TX_BASE_ADDR+0x0A2 
+#define TX_SYS4_RX_CKO_DDR        TX_BASE_ADDR+0x0A3 
+#define TX_SYS4_CONNECT_SEL_0     TX_BASE_ADDR+0x0A4 
+#define TX_SYS4_CONNECT_SEL_1     TX_BASE_ADDR+0x0A5 
+#define TX_SYS4_CONNECT_SEL_2     TX_BASE_ADDR+0x0A6 
+#define TX_SYS4_CONNECT_SEL_3     TX_BASE_ADDR+0x0A7 
+#define TX_SYS4_CK_INV_VIDEO      TX_BASE_ADDR+0x0A8 
+#define TX_SYS4_CK_INV_AUDIO      TX_BASE_ADDR+0x0A9 
+#define TX_SYS4_CK_INV_AFE        TX_BASE_ADDR+0x0AA 
+#define TX_SYS4_CK_INV_CH01       TX_BASE_ADDR+0x0AB 
+#define TX_SYS4_CK_INV_CH2        TX_BASE_ADDR+0x0AC 
+#define TX_SYS4_CK_CEC            TX_BASE_ADDR+0x0AD 
+#define TX_SYS4_CK_SOURCE_1       TX_BASE_ADDR+0x0AE 
+#define TX_SYS4_CK_SOURCE_2       TX_BASE_ADDR+0x0AF 
+// system config 5
+#define TX_SYS5_TX_SOFT_RESET_1   TX_BASE_ADDR+0x0E0 
+#define TX_SYS5_TX_SOFT_RESET_2   TX_BASE_ADDR+0x0E1 
+#define TX_SYS5_RX_SOFT_RESET_1   TX_BASE_ADDR+0x0E2 
+#define TX_SYS5_RX_SOFT_RESET_2   TX_BASE_ADDR+0x0E3 
+#define TX_SYS5_RX_SOFT_RESET_3   TX_BASE_ADDR+0x0E4 
+#define TX_SYS5_SSTL_BIDIR_IN     TX_BASE_ADDR+0x0E5 
+#define TX_SYS5_SSTL_IN           TX_BASE_ADDR+0x0E6 
+#define TX_SYS5_SSTL_DIFF_IN      TX_BASE_ADDR+0x0E7 
+#define TX_SYS5_FIFO_CONFIG       TX_BASE_ADDR+0x0E8 
+#define TX_SYS5_FIFO_SAMP01_CFG   TX_BASE_ADDR+0x0E9 
+#define TX_SYS5_FIFO_SAMP23_CFG   TX_BASE_ADDR+0x0EA 
+#define TX_SYS5_CONNECT_FIFO_CFG  TX_BASE_ADDR+0x0EB 
+#define TX_SYS5_IO_CALIB_CONTROL  TX_BASE_ADDR+0x0EC 
+#define TX_SYS5_SSTL_BIDIR_OUT    TX_BASE_ADDR+0x0ED 
+#define TX_SYS5_SSTL_OUT          TX_BASE_ADDR+0x0EE 
+#define TX_SYS5_SSTL_DIFF_OUT     TX_BASE_ADDR+0x0EF 
+
+// HDCP CONFIG
+#define TX_HDCP_ECC_CONFIG        TX_BASE_ADDR+0x024 
+#define TX_HDCP_CRC_CONFIG        TX_BASE_ADDR+0x025 
+#define TX_HDCP_EDID_CONFIG       TX_BASE_ADDR+0x026 
+#define TX_HDCP_MEM_CONFIG        TX_BASE_ADDR+0x027 
+#define TX_HDCP_HPD_FILTER_L      TX_BASE_ADDR+0x028 
+#define TX_HDCP_HPD_FILTER_H      TX_BASE_ADDR+0x029 
+#define TX_HDCP_ENCRYPT_BYTE      TX_BASE_ADDR+0x02A 
+#define TX_HDCP_CONFIG0           TX_BASE_ADDR+0x02B 
+#define TX_HDCP_CONFIG1           TX_BASE_ADDR+0x02C 
+#define TX_HDCP_CONFIG2           TX_BASE_ADDR+0x02D 
+#define TX_HDCP_CONFIG3           TX_BASE_ADDR+0x02E 
+#define TX_HDCP_MODE              TX_BASE_ADDR+0x02F 
+
+// Video config, part 1
+#define TX_VIDEO_ACTIVE_PIXELS_0  TX_BASE_ADDR+0x030 
+#define TX_VIDEO_ACTIVE_PIXELS_1  TX_BASE_ADDR+0x031 
+#define TX_VIDEO_FRONT_PIXELS     TX_BASE_ADDR+0x032 
+#define TX_VIDEO_HSYNC_PIXELS     TX_BASE_ADDR+0x033 
+#define TX_VIDEO_BACK_PIXELS      TX_BASE_ADDR+0x034 
+#define TX_VIDEO_ACTIVE_LINES_0   TX_BASE_ADDR+0x035 
+#define TX_VIDEO_ACTIVE_LINES_1   TX_BASE_ADDR+0x036 
+#define TX_VIDEO_EOF_LINES        TX_BASE_ADDR+0x037 
+#define TX_VIDEO_VSYNC_LINES      TX_BASE_ADDR+0x038 
+#define TX_VIDEO_SOF_LINES        TX_BASE_ADDR+0x039 
+#define TX_VIDEO_DTV_TIMING       TX_BASE_ADDR+0x03A 
+#define TX_VIDEO_DTV_MODE         TX_BASE_ADDR+0x03B 
+#define TX_VIDEO_DTV_FORMAT0      TX_BASE_ADDR+0x03C 
+#define TX_VIDEO_DTV_FORMAT1      TX_BASE_ADDR+0x03D 
+#define TX_VIDEO_PIXEL_PACK       TX_BASE_ADDR+0x03F 
+// video config, part 2
+#define TX_VIDEO_CSC_COEFF_B0     TX_BASE_ADDR+0x040 
+#define TX_VIDEO_CSC_COEFF_B1     TX_BASE_ADDR+0x041 
+#define TX_VIDEO_CSC_COEFF_R0     TX_BASE_ADDR+0x042 
+#define TX_VIDEO_CSC_COEFF_R1     TX_BASE_ADDR+0x043 
+#define TX_VIDEO_CSC_COEFF_CB0    TX_BASE_ADDR+0x044 
+#define TX_VIDEO_CSC_COEFF_CB1    TX_BASE_ADDR+0x045 
+#define TX_VIDEO_CSC_COEFF_CR0    TX_BASE_ADDR+0x046 
+#define TX_VIDEO_CSC_COEFF_CR1    TX_BASE_ADDR+0x047 
+#define TX_VIDEO_DTV_OPTION_L     TX_BASE_ADDR+0x048 
+#define TX_VIDEO_DTV_OPTION_H     TX_BASE_ADDR+0x049 
+#define TX_VIDEO_DTV_FILTER       TX_BASE_ADDR+0x04A 
+#define TX_VIDEO_DTV_DITHER       TX_BASE_ADDR+0x04B 
+#define TX_VIDEO_DTV_DEDITHER     TX_BASE_ADDR+0x04C 
+#define TX_VIDEO_PROC_CONFIG0     TX_BASE_ADDR+0x04E 
+#define TX_VIDEO_PROC_CONFIG1     TX_BASE_ADDR+0x04F 
+
+// Audio config
+#define TX_AUDIO_FORMAT           TX_BASE_ADDR+0x058 
+#define TX_AUDIO_SPDIF            TX_BASE_ADDR+0x059 
+#define TX_AUDIO_I2S              TX_BASE_ADDR+0x05A 
+#define TX_AUDIO_FIFO             TX_BASE_ADDR+0x05B 
+#define TX_AUDIO_LIPSYNC          TX_BASE_ADDR+0x05C 
+#define TX_AUDIO_CONTROL          TX_BASE_ADDR+0x05D 
+#define TX_AUDIO_HEADER           TX_BASE_ADDR+0x05E 
+#define TX_AUDIO_SAMPLE           TX_BASE_ADDR+0x05F 
+#define TX_AUDIO_VALID            TX_BASE_ADDR+0x060 
+#define TX_AUDIO_USER             TX_BASE_ADDR+0x061 
+#define TX_AUDIO_PACK             TX_BASE_ADDR+0x062 
+#define TX_AUDIO_CONTROL_MORE     TX_BASE_ADDR+0x064
+
+// tmds config
+#define TX_TMDS_MODE              TX_BASE_ADDR+0x068 
+#define TX_TMDS_CONFIG0           TX_BASE_ADDR+0x06C 
+#define TX_TMDS_CONFIG1           TX_BASE_ADDR+0x06D 
+
+// packet config
+#define TX_PACKET_ALLOC_ACTIVE_1  TX_BASE_ADDR+0x078 
+#define TX_PACKET_ALLOC_ACTIVE_2  TX_BASE_ADDR+0x079 
+#define TX_PACKET_ALLOC_EOF_1     TX_BASE_ADDR+0x07A 
+#define TX_PACKET_ALLOC_EOF_2     TX_BASE_ADDR+0x07B 
+#define TX_PACKET_ALLOC_SOF_1     TX_BASE_ADDR+0x07C 
+#define TX_PACKET_ALLOC_SOF_2     TX_BASE_ADDR+0x07D 
+#define TX_PACKET_CONTROL_1       TX_BASE_ADDR+0x07E 
+#define TX_PACKET_CONTROL_2       TX_BASE_ADDR+0x07F 
+
+// core config
+#define TX_CORE_DATA_CAPTURE_1    TX_BASE_ADDR+0x0F0 
+#define TX_CORE_DATA_CAPTURE_2    TX_BASE_ADDR+0x0F1 
+#define TX_CORE_DATA_MONITOR_1    TX_BASE_ADDR+0x0F2 
+#define TX_CORE_DATA_MONITOR_2    TX_BASE_ADDR+0x0F3 
+#define TX_CORE_CALIB_MODE        TX_BASE_ADDR+0x0F4 
+#define TX_CORE_CALIB_SAMPLE_DELAY  TX_BASE_ADDR+0x0F5 
+#define TX_CORE_CALIB_VALUE_AUTO  TX_BASE_ADDR+0x0F6 
+#define TX_CORE_CALIB_VALUE       TX_BASE_ADDR+0x0F7 
+
+#define TX_CORE_EDID_CONFIG_MORE  TX_BASE_ADDR+0x080
+
+// HDCP shadow register
+#define TX_HDCP_SHW_BKSV_0        TX_BASE_ADDR+0x100 
+#define TX_HDCP_SHW_BKSV_1        TX_BASE_ADDR+0x101 
+#define TX_HDCP_SHW_BKSV_2        TX_BASE_ADDR+0x102 
+#define TX_HDCP_SHW_BKSV_3        TX_BASE_ADDR+0x103 
+#define TX_HDCP_SHW_BKSV_4        TX_BASE_ADDR+0x104 
+#define TX_HDCP_SHW_RI1_0         TX_BASE_ADDR+0x108 
+#define TX_HDCP_SHW_RI1_1         TX_BASE_ADDR+0x109 
+#define TX_HDCP_SHW_PJ1           TX_BASE_ADDR+0x10A 
+#define TX_HDCP_SHW_AKSV_0        TX_BASE_ADDR+0x110 
+#define TX_HDCP_SHW_AKSV_1        TX_BASE_ADDR+0x111 
+#define TX_HDCP_SHW_AKSV_2        TX_BASE_ADDR+0x112 
+#define TX_HDCP_SHW_AKSV_3        TX_BASE_ADDR+0x113 
+#define TX_HDCP_SHW_AKSV_4        TX_BASE_ADDR+0x114 
+#define TX_HDCP_SHW_AINFO         TX_BASE_ADDR+0x115 
+#define TX_HDCP_SHW_AN_0          TX_BASE_ADDR+0x118 
+#define TX_HDCP_SHW_AN_1          TX_BASE_ADDR+0x119 
+#define TX_HDCP_SHW_AN_2          TX_BASE_ADDR+0x11A 
+#define TX_HDCP_SHW_AN_3          TX_BASE_ADDR+0x11B 
+#define TX_HDCP_SHW_AN_4          TX_BASE_ADDR+0x11C 
+#define TX_HDCP_SHW_AN_5          TX_BASE_ADDR+0x11D 
+#define TX_HDCP_SHW_AN_6          TX_BASE_ADDR+0x11E 
+#define TX_HDCP_SHW_AN_7          TX_BASE_ADDR+0x11F 
+#define TX_HDCP_SHW_V1_H0_0       TX_BASE_ADDR+0x120 
+#define TX_HDCP_SHW_V1_H0_1       TX_BASE_ADDR+0x121 
+#define TX_HDCP_SHW_V1_H0_2       TX_BASE_ADDR+0x122 
+#define TX_HDCP_SHW_V1_H0_3       TX_BASE_ADDR+0x123 
+#define TX_HDCP_SHW_V1_H1_0       TX_BASE_ADDR+0x124 
+#define TX_HDCP_SHW_V1_H1_1       TX_BASE_ADDR+0x125 
+#define TX_HDCP_SHW_V1_H1_2       TX_BASE_ADDR+0x126 
+#define TX_HDCP_SHW_V1_H1_3       TX_BASE_ADDR+0x127 
+#define TX_HDCP_SHW_V1_H2_0       TX_BASE_ADDR+0x128 
+#define TX_HDCP_SHW_V1_H2_1       TX_BASE_ADDR+0x129 
+#define TX_HDCP_SHW_V1_H2_2       TX_BASE_ADDR+0x12A 
+#define TX_HDCP_SHW_V1_H2_3       TX_BASE_ADDR+0x12B 
+#define TX_HDCP_SHW_V1_H3_0       TX_BASE_ADDR+0x12C 
+#define TX_HDCP_SHW_V1_H3_1       TX_BASE_ADDR+0x12D 
+#define TX_HDCP_SHW_V1_H3_2       TX_BASE_ADDR+0x12E 
+#define TX_HDCP_SHW_V1_H3_3       TX_BASE_ADDR+0x12F 
+#define TX_HDCP_SHW_V1_H4_0       TX_BASE_ADDR+0x130 
+#define TX_HDCP_SHW_V1_H4_1       TX_BASE_ADDR+0x131 
+#define TX_HDCP_SHW_V1_H4_2       TX_BASE_ADDR+0x132 
+#define TX_HDCP_SHW_V1_H4_3       TX_BASE_ADDR+0x133 
+#define TX_HDCP_SHW_BCAPS         TX_BASE_ADDR+0x140 
+#define TX_HDCP_SHW_BSTATUS_0     TX_BASE_ADDR+0x141 
+#define TX_HDCP_SHW_BSTATUS_1     TX_BASE_ADDR+0x142 
+#define TX_HDCP_SHW_KSV_FIFO      TX_BASE_ADDR+0x143 
+
+// system status 0
+#define TX_SYSST0_CONNECT_FIFO    TX_BASE_ADDR+0x180 
+#define TX_SYSST0_PLL_MONITOR     TX_BASE_ADDR+0x181 
+#define TX_SYSST0_AFE_FIFO        TX_BASE_ADDR+0x182 
+#define TX_SYSST0_ROM_STATUS      TX_BASE_ADDR+0x18F 
+
+// system status 1
+#define TX_SYSST1_CALIB_BIT_RESULT_0     TX_BASE_ADDR+0x1E0 
+#define TX_SYSST1_CALIB_BIT_RESULT_1     TX_BASE_ADDR+0x1E1 
+//HDMI_STATUS_OUT[7:0]
+#define TX_HDMI_PHY_READBACK_0           TX_BASE_ADDR+0x1E2 
+//HDMI_COMP_OUT[4]
+//HDMI_STATUS_OUT[11:8]
+#define TX_HDMI_PHY_READBACK_1           TX_BASE_ADDR+0x1E3 
+#define TX_SYSST1_CALIB_BIT_RESULT_4     TX_BASE_ADDR+0x1E4 
+#define TX_SYSST1_CALIB_BIT_RESULT_5     TX_BASE_ADDR+0x1E5 
+#define TX_SYSST1_CALIB_BIT_RESULT_6     TX_BASE_ADDR+0x1E6 
+#define TX_SYSST1_CALIB_BIT_RESULT_7     TX_BASE_ADDR+0x1E7 
+#define TX_SYSST1_CALIB_BUS_RESULT_0     TX_BASE_ADDR+0x1E8 
+#define TX_SYSST1_CALIB_BUS_RESULT_1     TX_BASE_ADDR+0x1E9 
+#define TX_SYSST1_CALIB_BUS_RESULT_2     TX_BASE_ADDR+0x1EA 
+#define TX_SYSST1_CALIB_BUS_RESULT_3     TX_BASE_ADDR+0x1EB 
+#define TX_SYSST1_CALIB_BUS_RESULT_4     TX_BASE_ADDR+0x1EC 
+#define TX_SYSST1_CALIB_BUS_RESULT_5     TX_BASE_ADDR+0x1ED 
+#define TX_SYSST1_CALIB_BUS_RESULT_6     TX_BASE_ADDR+0x1EE 
+#define TX_SYSST1_CALIB_BUS_RESULT_7     TX_BASE_ADDR+0x1EF 
+
+// hdcp status
+#define TX_HDCP_ST_AUTHENTICATION        TX_BASE_ADDR+0x190 
+#define TX_HDCP_ST_FRAME_COUNT           TX_BASE_ADDR+0x191 
+#define TX_HDCP_ST_STATUS_0              TX_BASE_ADDR+0x192 
+#define TX_HDCP_ST_STATUS_1              TX_BASE_ADDR+0x193 
+#define TX_HDCP_ST_STATUS_2              TX_BASE_ADDR+0x194 
+#define TX_HDCP_ST_STATUS_3              TX_BASE_ADDR+0x195 
+#define TX_HDCP_ST_EDID_STATUS           TX_BASE_ADDR+0x196 
+#define TX_HDCP_ST_MEM_STATUS            TX_BASE_ADDR+0x197 
+#define TX_HDCP_ST_ST_MODE               TX_BASE_ADDR+0x19F 
+
+// video status
+#define TX_VIDEO_ST_ACTIVE_PIXELS_1      TX_BASE_ADDR+0x1A0 
+#define TX_VIDEO_ST_ACTIVE_PIXELS_2      TX_BASE_ADDR+0x1A1 
+#define TX_VIDEO_ST_FRONT_PIXELS         TX_BASE_ADDR+0x1A2 
+#define TX_VIDEO_ST_HSYNC_PIXELS         TX_BASE_ADDR+0x1A3 
+#define TX_VIDEO_ST_BACK_PIXELS          TX_BASE_ADDR+0x1A4 
+#define TX_VIDEO_ST_ACTIVE_LINES_1       TX_BASE_ADDR+0x1A5 
+#define TX_VIDEO_ST_ACTIVE_LINES_2       TX_BASE_ADDR+0x1A6 
+#define TX_VIDEO_ST_EOF_LINES            TX_BASE_ADDR+0x1A7 
+#define TX_VIDEO_ST_VSYNC_LINES          TX_BASE_ADDR+0x1A8 
+#define TX_VIDEO_ST_SOF_LINES            TX_BASE_ADDR+0x1A9 
+#define TX_VIDEO_ST_DTV_TIMING           TX_BASE_ADDR+0x1AA 
+#define TX_VIDEO_ST_DTV_MODE             TX_BASE_ADDR+0x1AB 
+// audio status
+#define TX_VIDEO_ST_AUDIO_STATUS         TX_BASE_ADDR+0x1AC 
+#define TX_AFE_STATUS_0                  TX_BASE_ADDR+0x1AE 
+#define TX_AFE_STATUS_1                  TX_BASE_ADDR+0x1AF 
+
+// Packet status
+#define TX_PACKET_ST_REQUEST_STATUS_1    TX_BASE_ADDR+0x1F0 
+#define TX_PACKET_ST_REQUEST_STATUS_2    TX_BASE_ADDR+0x1F1 
+#define TX_PACKET_ST_REQUEST_MISSED_1    TX_BASE_ADDR+0x1F2 
+#define TX_PACKET_ST_REQUEST_MISSED_2    TX_BASE_ADDR+0x1F3 
+#define TX_PACKET_ST_ENCODE_STATUS_0     TX_BASE_ADDR+0x1F4 
+#define TX_PACKET_ST_ENCODE_STATUS_1     TX_BASE_ADDR+0x1F5 
+#define TX_PACKET_ST_ENCODE_STATUS_2     TX_BASE_ADDR+0x1F6 
+#define TX_PACKET_ST_TIMER_STATUS        TX_BASE_ADDR+0x1F7 
+
+// tmds status
+#define TX_TMDS_ST_CLOCK_METER_1         TX_BASE_ADDR+0x1F8 
+#define TX_TMDS_ST_CLOCK_METER_2         TX_BASE_ADDR+0x1F9 
+#define TX_TMDS_ST_CLOCK_METER_3         TX_BASE_ADDR+0x1FA 
+#define TX_TMDS_ST_TMDS_STATUS_1         TX_BASE_ADDR+0x1FC 
+#define TX_TMDS_ST_TMDS_STATUS_2         TX_BASE_ADDR+0x1FD 
+#define TX_TMDS_ST_TMDS_STATUS_3         TX_BASE_ADDR+0x1FE 
+#define TX_TMDS_ST_TMDS_STATUS_4         TX_BASE_ADDR+0x1FF 
+
+
+// Packet register
+#define TX_PKT_REG_SPD_INFO_BASE_ADDR     TX_BASE_ADDR+0x200 
+#define TX_PKT_REG_VEND_INFO_BASE_ADDR    TX_BASE_ADDR+0x220 
+#define TX_PKT_REG_MPEG_INFO_BASE_ADDR    TX_BASE_ADDR+0x240 
+#define TX_PKT_REG_AVI_INFO_BASE_ADDR     TX_BASE_ADDR+0x260 
+#define TX_PKT_REG_AUDIO_INFO_BASE_ADDR   TX_BASE_ADDR+0x280 
+#define TX_PKT_REG_ACP_INFO_BASE_ADDR     TX_BASE_ADDR+0x2A0 
+#define TX_PKT_REG_ISRC1_BASE_ADDR        TX_BASE_ADDR+0x2C0 
+#define TX_PKT_REG_ISRC2_BASE_ADDR        TX_BASE_ADDR+0x2E0 
+#define TX_PKT_REG_EXCEPT0_BASE_ADDR      TX_BASE_ADDR+0x300 
+#define TX_PKT_REG_EXCEPT1_BASE_ADDR      TX_BASE_ADDR+0x320 
+#define TX_PKT_REG_EXCEPT2_BASE_ADDR      TX_BASE_ADDR+0x340 
+#define TX_PKT_REG_EXCEPT3_BASE_ADDR      TX_BASE_ADDR+0x360 
+#define TX_PKT_REG_EXCEPT4_BASE_ADDR      TX_BASE_ADDR+0x380 
+#define TX_PKT_REG_GAMUT_P0_BASE_ADDR     TX_BASE_ADDR+0x3A0 
+#define TX_PKT_REG_GAMUT_P1_1_BASE_ADDR   TX_BASE_ADDR+0x3C0 
+#define TX_PKT_REG_GAMUT_P1_2_BASE_ADDR   TX_BASE_ADDR+0x3E0 
+
+
+
+//********** CEC related **********//
+//read/write
+#define CEC_TX_MSG_0_HEADER        0x00 
+#define CEC_TX_MSG_1_OPCODE        0x01 
+#define CEC_TX_MSG_2_OP1           0x02 
+#define CEC_TX_MSG_3_OP2           0x03 
+#define CEC_TX_MSG_4_OP3           0x04 
+#define CEC_TX_MSG_5_OP4           0x05 
+#define CEC_TX_MSG_6_OP5           0x06 
+#define CEC_TX_MSG_7_OP6           0x07 
+#define CEC_TX_MSG_8_OP7           0x08 
+#define CEC_TX_MSG_9_OP8           0x09 
+#define CEC_TX_MSG_A_OP9           0x0A 
+#define CEC_TX_MSG_B_OP10          0x0B 
+#define CEC_TX_MSG_C_OP11          0x0C 
+#define CEC_TX_MSG_D_OP12          0x0D 
+#define CEC_TX_MSG_E_OP13          0x0E 
+#define CEC_TX_MSG_F_OP14          0x0F 
+
+//read only
+#define CEC_TX_MSG_LENGTH          0x10 
+#define CEC_TX_MSG_CMD             0x11 
+#define CEC_TX_WRITE_BUF           0x12 
+#define CEC_TX_CLEAR_BUF           0x13 
+#define CEC_RX_MSG_CMD             0x14 
+#define CEC_RX_CLEAR_BUF           0x15 
+#define CEC_LOGICAL_ADDR0          0x16 
+#define CEC_LOGICAL_ADDR1          0x17 
+#define CEC_LOGICAL_ADDR2          0x18 
+#define CEC_LOGICAL_ADDR3          0x19 
+#define CEC_LOGICAL_ADDR4          0x1A 
+#define CEC_CLOCK_DIV_H            0x1B 
+#define CEC_CLOCK_DIV_L            0x1C 
+
+//read/write
+#define CEC_RX_MSG_0_HEADER        0x80 
+#define CEC_RX_MSG_1_OPCODE        0x81 
+#define CEC_RX_MSG_2_OP1           0x82 
+#define CEC_RX_MSG_3_OP2           0x83 
+#define CEC_RX_MSG_4_OP3           0x84 
+#define CEC_RX_MSG_5_OP4           0x85 
+#define CEC_RX_MSG_6_OP5           0x86 
+#define CEC_RX_MSG_7_OP6           0x87 
+#define CEC_RX_MSG_8_OP7           0x88 
+#define CEC_RX_MSG_9_OP8           0x89 
+#define CEC_RX_MSG_A_OP9           0x8A 
+#define CEC_RX_MSG_B_OP10          0x8B 
+#define CEC_RX_MSG_C_OP11          0x8C 
+#define CEC_RX_MSG_D_OP12          0x8D 
+#define CEC_RX_MSG_E_OP13          0x8E 
+#define CEC_RX_MSG_F_OP14          0x8F 
+
+//read only
+#define CEC_RX_MSG_LENGTH          0x90 
+#define CEC_RX_MSG_STATUS          0x91 
+#define CEC_RX_NUM_MSG             0x92 
+#define CEC_TX_MSG_STATUS          0x93 
+#define CEC_TX_NUM_MSG             0x94 
+
+// tx_msg_cmd definition
+#define TX_NO_OP                0  // No transaction
+#define TX_REQ_CURRENT          1  // Transmit earliest message in buffer
+#define TX_ABORT                2  // Abort transmitting earliest message
+#define TX_REQ_NEXT             3  // Overwrite earliest message in buffer and transmit next message
+
+// tx_msg_status definition
+#define TX_IDLE                 0  // No transaction
+#define TX_BUSY                 1  // Transmitter is busy
+#define TX_DONE                 2  // Message has been successfully transmitted
+#define TX_ERROR                3  // Message has been transmitted with error
+
+// rx_msg_cmd
+#define RX_NO_OP                0  // No transaction
+#define RX_ACK_CURRENT          1  // Read earliest message in buffer
+#define RX_DISABLE              2  // Disable receiving latest message
+#define RX_ACK_NEXT             3  // Clear earliest message from buffer and read next message
+
+// rx_msg_status
+#define RX_IDLE                 0  // No transaction
+#define RX_BUSY                 1  // Receiver is busy
+#define RX_DONE                 2  // Message has been received successfully
+#define RX_ERROR                3  // Message has been received with error
+
+#endif
+
diff --git a/arch/arm/mach-meson8b/include/mach/io.h b/arch/arm/mach-meson8b/include/mach/io.h
new file mode 100644
index 000000000000..fad122e534fb
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/io.h
@@ -0,0 +1,168 @@
+/*
+ *
+ * arch/arm/mach-meson8b/include/mach/io.h
+ *
+ *  Copyright (C) 2011-2013 AMLOGIC, INC.
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ * Basic register address definitions in physical memory and
+ * some block defintions for core devices like the timer.
+ */
+
+#ifndef __MACH_MESSON8B_IO_H
+#define __MACH_MESSON8B_IO_H
+
+///amlogic old style driver porting
+#if (defined CONFIG_MESON_LEGACY_REGISTER_API) && CONFIG_MESON_LEGACY_REGISTER_API
+#include "avosstyle_io.h"
+#else
+#warning "You should replace the register operation with \n" 	\
+	"writel/readl/setbits_le32/clrbits_le32/clrsetbits_le32.\n" \
+	"the register name must be replace with P_REG_NAME . \n"	\
+	"REG_NAME is the old stlye reg name . 	"
+#endif
+//#define IO_SPACE_LIMIT 0xffffffff
+
+//#define __io(a)     __typesafe_io(a)
+#define __mem_pci(a)    (a)
+
+
+/**
+ * U boot style operation
+ */
+
+
+#define clrbits_le32 aml_clr_reg32_mask
+#define setbits_le32 aml_set_reg32_mask
+#define clrsetbits_le32 aml_clrset_reg32_bits
+/**
+ * PHY IO MEMORY BASE
+ */
+#define IO_PHY_BASE             0xc0000000  ///value from vlsi team
+#define IO_CBUS_PHY_BASE        0xc1100000  ///2M
+#define IO_AXI_BUS_PHY_BASE     0xc1300000  ///1M
+#define IO_PL310_PHY_BASE       0xc4200000  ///4k
+#define IO_A9_PERIPH_PHY_BASE      0xc4300000  ///4k
+#define IO_MMC_PHY_BASE     0xc8000000  ///32k
+
+#define IO_AOBUS_PHY_BASE       0xc8100000  ///1M
+#define IO_USB_A_PHY_BASE       0xc9040000  ///256k
+#define IO_USB_B_PHY_BASE       0xc90C0000  ///256k
+#define IO_ETH_PHY_BASE         0xc9410000  ///64k
+#define IO_SPIMEM_PHY_BASE      0xcc000000  ///64M
+#define IO_APB_BUS_PHY_BASE      0xd0000000  ///2M
+	#define IO_HDMI_PHY_BASE  0xd0042000
+	#define IO_AUDAC_PHY_BASE   0xd0044000  ///112k
+	#define IO_DOS_BUS_PHY_BASE     0xd0050000  ///64k
+	#define IO_MALI_APB_PHY_BASE    0xd00c0000  ///128k
+#define IO_SRAM_PHY_BASE         0xd9000000  ///128k
+#define IO_BOOTROM_PHY_BASE     0xd9040000  ///64k
+#define IO_SECBUS_PHY_BASE      0xda000000
+#define IO_EFUSE_PHY_BASE       0xda000000  ///4k
+#define IO_SECURE_PHY_BASE      (IO_SECBUS_PHY_BASE+0x2000)  ///16k
+
+#ifdef CONFIG_VMSPLIT_3G
+
+#define IO_REGS_BASE		0xFE000000
+#define IO_PL310_BASE		(IO_REGS_BASE + 0x000000) // 4k
+#define IO_A9_PERIPH_BASE	(IO_REGS_BASE + 0x001000) // 16k
+#define IO_RESERVED_1		(IO_REGS_BASE + 0x005000) // 20K
+#define IO_MMC_BUS_BASE	(IO_REGS_BASE + 0x008000) // 32K
+#define IO_BOOTROM_BASE	(IO_REGS_BASE + 0x010000) // 64K
+#define IO_SRAM_BASE		(IO_REGS_BASE + 0x020000) // 128K
+#define IO_USB_A_BASE		(IO_REGS_BASE + 0x040000) // 256K
+#define IO_USB_B_BASE		(IO_REGS_BASE + 0x080000) // 256K
+#define IO_ETH_BASE			(IO_REGS_BASE + 0x0C0000) // 64K
+#define IO_SECBUS_BASE		(IO_REGS_BASE + 0x0D0000) // 32k
+#define IO_RESERVED_2		(IO_REGS_BASE + 0x0D8000) // 160K
+#define IO_CBUS_BASE		(IO_REGS_BASE + 0x100000) // 1M
+#define IO_AXI_BUS_BASE		(IO_REGS_BASE + 0x200000) // 2M
+#define IO_APB_BUS_BASE	(IO_REGS_BASE + 0x400000) // 2M
+#define IO_AOBUS_BASE		(IO_REGS_BASE + 0x600000) // 1M
+#define IO_REGS_END			(IO_REGS_BASE + 0xF00000 - 1) // Total 15M 
+
+#define IO_SPI_BASE			(IO_REGS_BASE - 0x4000000)
+#define IO_SPIMEM_BASE		(IO_SPI_BASE + 0x0000000)
+#define IO_SPI_END			(IO_SPI_BASE + 0x4000000 - 1) // Total 64M
+
+/* Quick reference */
+#define IO_HDMI_BUS_BASE	(IO_APB_BUS_BASE +  0x40000)
+#define IO_AUDAC_BASE   	(IO_APB_BUS_BASE +  0x44000)
+#define IO_DOS_BUS_BASE	(IO_APB_BUS_BASE +  0x50000)
+#define IO_HDEC_BUS_BASE	(IO_APB_BUS_BASE +  0x54000)
+#define IO_NAND_BASE		(IO_APB_BUS_BASE +  0x48600)
+#define IO_MALI_APB_BASE	(IO_APB_BUS_BASE +  0xC0000)
+#define IO_VPU_BUS_BASE	(IO_APB_BUS_BASE + 0x100000)
+#define IO_MIPI_HOST_BASE	(IO_APB_BUS_BASE + 0x140000)
+#define IO_MIPI_PHY_BASE	(IO_APB_BUS_BASE + 0x142000)
+#define IO_MIPI_DSI_BASE	(IO_APB_BUS_BASE + 0x150000)
+#define IO_EDP_TX_BASE		(IO_APB_BUS_BASE + 0x160000)
+#define IO_EFUSE_BASE		IO_SECBUS_BASE
+#define IO_PERIPH_BASE		IO_A9_PERIPH_BASE
+
+#endif
+
+#ifdef CONFIG_VMSPLIT_2G
+
+#define IO_CBUS_BASE        IO_CBUS_PHY_BASE       ///2M
+#define IO_AXI_BUS_BASE     IO_AXI_BUS_PHY_BASE    ///1M
+#define IO_PL310_BASE       IO_PL310_PHY_BASE      ///4k
+#define IO_PERIPH_BASE      IO_PERIPH_PHY_BASE     ///4k
+#define IO_APB_BUS_BASE     IO_APB_BUS_PHY_BASE    ///8k
+#define IO_DOS_BUS_BASE     IO_DOS_BUS_PHY_BASE    ///64k
+#define IO_AOBUS_BASE       IO_AOBUS_PHY_BASE      ///1M
+#define IO_USB_A_BASE       IO_USB_A_PHY_BASE      ///256k
+#define IO_USB_B_BASE       IO_USB_B_PHY_BASE      ///256k
+#define IO_WIFI_BASE        IO_WIFI_PHY_BASE       ///1M
+#define IO_SATA_BASE        IO_SATA_PHY_BASE       ///64k
+#define IO_ETH_BASE         IO_ETH_PHY_BASE        ///64k
+#define IO_SPIMEM_BASE      IO_SPIMEM_PHY_BASE     ///64M
+#define IO_A9_APB_BASE      IO_A9_APB_PHY_BASE     ///256k
+#define IO_DEMOD_APB_BASE   IO_DEMOD_APB_PHY_BASE  ///112k
+#define IO_MALI_APB_BASE    IO_MALI_APB_PHY_BASE   ///128k
+#define IO_APB2_BUS_BASE    IO_APB2_BUS_PHY_BASE 
+#define IO_AHB_BASE         IO_AHB_PHY_BASE        ///128k
+#define IO_AHB_BUS_BASE         IO_AHB_BUS_PHY_BASE        ///128k
+
+#define IO_BOOTROM_BASE     IO_BOOTROM_PHY_BASE    ///64k
+#define IO_SECBUS_BASE      IO_SECBUS_PHY_BASE   
+#define IO_EFUSE_BASE       IO_EFUSE_PHY_BASE      ///4k
+#define IO_SECURE_BASE      IO_SECURE_PHY_BASE     ///16k
+#endif
+#ifdef CONFIG_VMSPLIT_1G
+#error Unsupported Memory Split Type
+#endif
+
+
+#define MESON_PERIPHS1_VIRT_BASE    (IO_AOBUS_BASE+0x4c0)
+#define MESON_PERIPHS1_PHYS_BASE    (IO_AOBUS_PHY_BASE+0x4c0)
+
+
+#define CBUS_REG_OFFSET(reg) ((reg) << 2)
+#define CBUS_REG_ADDR(reg)	 (IO_CBUS_BASE + CBUS_REG_OFFSET(reg))
+
+#define VCBUS_REG_ADDR(reg) (IO_APB_BUS_BASE + 0x100000 +CBUS_REG_OFFSET(reg))
+
+#define DOS_REG_ADDR(reg)	 (IO_DOS_BUS_BASE + CBUS_REG_OFFSET(reg))
+
+#define HDEC_REG_ADDR(reg)       (IO_HDEC_BUS_BASE + CBUS_REG_OFFSET(reg))
+#define MMC_REG_ADDR(reg)	(IO_MMC_BUS_BASE + (reg))
+
+#define AXI_REG_OFFSET(reg)  ((reg) << 2)
+#define AXI_REG_ADDR(reg)	 (IO_AXI_BUS_BASE + AXI_REG_OFFSET(reg))
+
+#define APB_REG_OFFSET(reg)     (reg&0xfffff)
+#define APB_REG_ADDR(reg)	    (IO_APB_BUS_BASE + APB_REG_OFFSET(reg))
+#define APB_REG_ADDR_VALID(reg) (((unsigned long)(reg) & 3) == 0)
+
+#define AOBUS_REG_OFFSET(reg)   ((reg) )
+#define AOBUS_REG_ADDR(reg)	    (IO_AOBUS_BASE + AOBUS_REG_OFFSET(reg))
+
+#define SECBUS_REG_OFFSET(reg)   ((reg) <<2)
+#define SECBUS_REG_ADDR(reg)     (IO_SECBUS_BASE+SECBUS_REG_OFFSET(reg))
+#define SECBUS2_REG_ADDR(reg)       (IO_SECBUS_BASE+0x4000+SECBUS_REG_OFFSET(reg))
+#define SECBUS3_REG_ADDR(reg)       (IO_SECBUS_BASE+0x6000+SECBUS_REG_OFFSET(reg))
+
+void meson_map_default_io(void);
+
+#endif //__MACH_MESSON8_IO_H
diff --git a/arch/arm/mach-meson8b/include/mach/irqs.h b/arch/arm/mach-meson8b/include/mach/irqs.h
new file mode 100644
index 000000000000..f552c922a94d
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/irqs.h
@@ -0,0 +1,200 @@
+/*
+ *  arch/arm/mach-meson8b/include/mach/irqs.h
+ *
+ *  Copyright (C) 2010-2013 AMLOGIC, INC.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#ifndef __ASM_ARCH_MESON8B_IRQS_H
+#define __ASM_ARCH_MESON8B_IRQS_H
+
+#define IRQ_BIT(irq)            ((irq) & 0x1f)
+#define IRQ_INDEX(irq)          ((irq) >> 5)
+
+#define BASE_IRQ 32
+#define NR_IRQS         256
+
+
+#define AM_IRQ(reg)   (reg + BASE_IRQ)
+
+#define INT_WATCHDOG                AM_IRQ(0)
+#define INT_MAILBOX                 AM_IRQ(1)
+#define INT_VIU_HSYNC               AM_IRQ(2)
+#define INT_VIU_VSYNC               AM_IRQ(3)
+#define INT_DEMUX_1                 AM_IRQ(5)
+#define INT_TIMER_C                 AM_IRQ(6)
+#define INT_AUDIO_IN                AM_IRQ(7)
+#define INT_ETHERNET                AM_IRQ(8)
+#define INT_TIMER_A                 AM_IRQ(10)
+#define INT_TIMER_B                 AM_IRQ(11)
+#define INT_VIU2_HSYNC              AM_IRQ(12)
+#define INT_VIU2_VSYNC              AM_IRQ(13)
+#define INT_MIPI_PHY                AM_IRQ(14)
+#define INT_REMOTE                  AM_IRQ(15)
+#define INT_ABUF_WR                 AM_IRQ(16)
+#define INT_ABUF_RD                 AM_IRQ(17)
+#define INT_ASYNC_FIFO_FILL         AM_IRQ(18)
+#define INT_ASYNC_FIFO_FLUSH        AM_IRQ(19)
+#define INT_BT656                   AM_IRQ(20)
+#define INT_I2C_MASTER0             AM_IRQ(21)
+#define INT_ENCODER                 AM_IRQ(22)
+#define INT_DEMUX                   AM_IRQ(23)
+#define INT_ASYNC_FIFO2_FILL        AM_IRQ(24)
+#define INT_ASYNC_FIFO2_FLUSH       AM_IRQ(25)
+#define INT_UART_0                  AM_IRQ(26)
+#define INT_MIPI_DSI_PHY            AM_IRQ(27)
+#define INT_SDIO                    AM_IRQ(28)
+#define INT_TIMER_D                 AM_IRQ(29)
+#define INT_USB_A                   AM_IRQ(30)
+#define INT_USB_B                   AM_IRQ(31)
+
+#define INT_PARSER                  AM_IRQ(32)
+#define INT_VIFF_EMPTY              AM_IRQ(33)
+#define INT_NAND                    AM_IRQ(34)
+#define INT_SPDIF                   AM_IRQ(35)
+#define INT_NDMA                    AM_IRQ(36)
+#define INT_SMART_CARD              AM_IRQ(37)
+#define INT_UART_AO_2               AM_IRQ(38)
+#define INT_I2C_MASTER3             AM_IRQ(39)
+#define INT_DOS_MAILBOX_0           AM_IRQ(43)
+#define INT_DOS_MAILBOX_1           AM_IRQ(44)
+#define INT_DOS_MAILBOX_2           AM_IRQ(45)
+#define INT_DEINTERLACE	            AM_IRQ(46)
+#define INT_AIU_CRC                 AM_IRQ(47)
+#define INT_I2S_DDR                 AM_IRQ(48)
+#define INT_IEC958_DDR	            AM_IRQ(49)
+#define INT_AI_IEC958               AM_IRQ(50)
+#define INT_DMC_SEC                 AM_IRQ(51)
+#define INT_DMC                     AM_IRQ(52)
+#define INT_DEMUX_2                 AM_IRQ(53)
+#define INT_HDMI_CEC                AM_IRQ(55)
+#define INT_HDMI_TX                 AM_IRQ(57)
+#define INT_TIMER_F                 AM_IRQ(60)
+#define INT_TIMER_G                 AM_IRQ(61)
+#define INT_TIMER_H                 AM_IRQ(62)
+#define INT_TIMER_I                 AM_IRQ(63)
+
+#define INT_GPIO_0                  AM_IRQ(64)
+#define INT_GPIO_1                  AM_IRQ(65)
+#define INT_GPIO_2                  AM_IRQ(66)
+#define INT_GPIO_3                  AM_IRQ(67)
+#define INT_GPIO_4                  AM_IRQ(68)
+#define INT_GPIO_5                  AM_IRQ(69)
+#define INT_GPIO_6                  AM_IRQ(70)
+#define INT_GPIO_7                  AM_IRQ(71)
+#define INT_RTC                     AM_IRQ(72)
+#define INT_SAR_ADC                 AM_IRQ(73)
+#define INT_CSI2_HOST               AM_IRQ(74)
+#define INT_UART_1                  AM_IRQ(75)
+#define INT_ACODEC_LEVEL            AM_IRQ(77)
+#define INT_SDHC                    AM_IRQ(78)
+#define INT_VIDEO_0_WR              AM_IRQ(79)
+#define INT_SPI                     AM_IRQ(80)
+#define INT_SPI_2                   AM_IRQ(81)
+#define INT_VDIN0_HSYNC             AM_IRQ(82)
+#define INT_VDIN0_VSYNC             AM_IRQ(83)
+#define INT_VDIN1_HSYNC             AM_IRQ(84)
+#define INT_VDIN1_VSYNC             AM_IRQ(85)
+#define INT_VIDEO_1_WR              AM_IRQ(86)
+#define INT_CSI2_HOST_2             AM_IRQ(87)
+#define INT_I2S_CBUS                AM_IRQ(88)
+#define INT_RDMA                    AM_IRQ(89)
+#define INT_UART_AO                 AM_IRQ(90)
+#define INT_I2C_SLAVE_AO            AM_IRQ(91)
+#define INT_I2C_MASTER_AO           AM_IRQ(92)
+#define INT_UART_2                  AM_IRQ(93)
+#define INT_UART_3                  AM_IRQ(94)
+#define INT_CSI2_ADAPTER            AM_IRQ(95)
+
+/*
+#define INT_AMRISC_DC_PCMLAST       AM_IRQ3(0)
+#define INT_AMRISC_VIU_VSYNC        AM_IRQ3(1)
+#define INT_AMRISC_H2TMR            AM_IRQ3(3)
+#define INT_AMRISC_H2CPAR           AM_IRQ3(4)
+#define INT_AMRISC_HI_ABX           AM_IRQ3(5)
+#define INT_AMRISC_H2CMD            AM_IRQ3(6)
+#define INT_AMRISC_AI_IEC958        AM_IRQ3(7)
+#define INT_AMRISC_VL_CP            AM_IRQ3(8)
+#define INT_AMRISC_DC_MBDONE        AM_IRQ3(9)
+#define INT_AMRISC_VIU_HSYNC        AM_IRQ3(10)
+#define INT_AMRISC_R2C              AM_IRQ3(11)
+#define INT_AMRISC_AIFIFO           AM_IRQ3(13)
+#define INT_AMRISC_HST_INTP         AM_IRQ3(14)
+#define INT_AMRISC_CPU1_STOP        AM_IRQ3(16)
+#define INT_AMRISC_CPU2_STOP        AM_IRQ3(17)
+#define INT_AMRISC_VENC_INT         AM_IRQ3(19)
+#define INT_AMRISC_TIMER0           AM_IRQ3(26)
+#define INT_AMRISC_TIMER1           AM_IRQ3(27)
+*/
+
+#define INT_I2C_MASTER1             AM_IRQ(128)
+#define INT_I2C_MASTER2             AM_IRQ(129)
+#define INT_MMC	                    AM_IRQ(130)
+#define INT_MIPI_DSI_ERR            AM_IRQ(133)
+#define INT_MIPI_DSI_TE	            AM_IRQ(134)
+#define INT_IR_BLASTER_AO           AM_IRQ(135)
+#define INT_A9_PMU0                 AM_IRQ(137)
+#define INT_A9_PMU1                 AM_IRQ(138)
+#define INT_A9_DBG_COMTX0           AM_IRQ(139)
+#define INT_A9_DBG_COMTX1           AM_IRQ(140)
+#define INT_A9_DBG_COMRX0           AM_IRQ(141)
+#define INT_A9_DBG_COMRX1           AM_IRQ(142)
+#define INT_L2_CACHE                AM_IRQ(143)
+#define INT_ASSIST_MBOX0            AM_IRQ(145)
+#define INT_ASSIST_MBOX1            AM_IRQ(146)
+#define INT_ASSIST_MBOX2            AM_IRQ(147)
+#define INT_ASSIST_MBOX3            AM_IRQ(148)
+#define INT_CUSAD                   AM_IRQ(149)
+#define INT_GE2D                    AM_IRQ(150)
+#define INT_AO_CEC                  AM_IRQ(151)
+#define INT_VIU1_LINE_N             AM_IRQ(152)
+#define INT_A9_PMU2                 AM_IRQ(153)
+#define INT_A9_PMU3                 AM_IRQ(154)
+#define INT_A9_DBG_COMTX2           AM_IRQ(155)
+#define INT_A9_DBG_COMTX3           AM_IRQ(156)
+#define INT_A9_DBG_COMRX2           AM_IRQ(157)
+#define INT_A9_DBG_COMRX3           AM_IRQ(158)
+#define INT_VIU2_LINE_N             AM_IRQ(159)
+
+#define INT_MALI_GP                 AM_IRQ(160)
+#define INT_MALI_GP_MMU             AM_IRQ(161)
+#define INT_MALI_PP                 AM_IRQ(162)
+#define INT_MALI_PMU                AM_IRQ(163)
+#define INT_MALI_PP0                AM_IRQ(164)
+#define INT_MALI_PP0_MMU            AM_IRQ(165)
+#define INT_MALI_PP1                AM_IRQ(166)
+#define INT_MALI_PP1_MMU            AM_IRQ(167)
+#define INT_MALI_PP2                AM_IRQ(168)
+#define INT_MALI_PP2_MMU            AM_IRQ(169)
+#define INT_MALI_PP3                AM_IRQ(170)
+#define INT_MALI_PP3_MMU            AM_IRQ(171)
+#define INT_MALI_PP4                AM_IRQ(172)
+#define INT_MALI_PP4_MMU            AM_IRQ(173)
+#define INT_MALI_PP5                AM_IRQ(174)
+#define INT_MALI_PP5_MMU            AM_IRQ(175)
+#define INT_MALI_PP6                AM_IRQ(176)
+#define INT_MALI_PP6_MMU            AM_IRQ(177)
+#define INT_MALI_PP7	            AM_IRQ(178)
+#define INT_MALI_PP7_MMU            AM_IRQ(179)
+
+
+
+/* All interrupts are FIQ capable */
+#define FIQ_START                   AM_IRQ0(0)
+extern void request_fiq(unsigned fiq, void (*isr)(void));
+extern void free_fiq(unsigned fiq, void (*isr)(void));
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/memory.h b/arch/arm/mach-meson8b/include/mach/memory.h
new file mode 100644
index 000000000000..84ac9227dbd1
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/memory.h
@@ -0,0 +1,30 @@
+/*
+ *  arch/arm/mach-meson/include/mach/memory.h
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#ifndef __ASM_ARCH_MEMORY_H
+#define __ASM_ARCH_MEMORY_H
+
+/*
+ * Physical DRAM offset.
+ */
+#define PHYS_OFFSET     UL(0x00000000)
+
+#define BOOT_PARAMS_OFFSET  (PHYS_OFFSET + 0x100)
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/mipi_dsi_reg.h b/arch/arm/mach-meson8b/include/mach/mipi_dsi_reg.h
new file mode 100644
index 000000000000..a6c2c5688cfe
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/mipi_dsi_reg.h
@@ -0,0 +1,101 @@
+#ifndef MIPI_DSI_PHY_REG
+#define MIPI_DSI_PHY_REG
+#define MIPI_DSI_PHY_START      0xd0150000
+#define MIPI_DSI_PHY_END        0xd015ffff
+
+#define MIPI_DSI_PHY_CTRL       0x0
+  //bit 31.  soft reset for the phy. 1 = reset. 0 = dessert the reset.
+  //bit 30.  clock lane soft reset.
+  //bit 29.  data byte lane 3 soft reset.
+  //bit 28.  data byte lane 2 soft reset.
+  //bit 27.  data byte lane 1 soft reset.
+  //bit 26.  data byte lane 0 soft reset.
+  //bit 25.   mipi dsi pll clock selection.   1:  clock from fixed 850Mhz clock source. 0: from VID2 PLL.
+  //bit 12.   mipi HSbyteclk enable.
+  //bit 11.   mipi divider clk selection.  1: select the mipi DDRCLKHS from clock divider.  0: from PLL clock.
+  //bit 10.   mipi clock divider control. 1 : /4. 0: /2.
+  //bit 9.    mipi divider output enable.
+  //bit 8.    mipi divider counter enable.
+  //bit 7.   PLL clock enable.
+  //bit 5.   LPDT data endian.  1 = transfer the high bit first. 0 : transfer the low bit first.
+  //bit 4.   HS data endian.
+  //bit 3.  force data byte lane in stop mode.
+  //bit 2.  force data byte lane 0 in reciever mode.
+  //bit 1. write 1 to sync the txclkesc input. the internal logic have to use txclkesc to decide Txvalid and Txready.
+  //bit 0.  enalbe the MIPI DSI PHY TxDDRClk.
+
+#define MIPI_DSI_CHAN_CTRL      0x1
+  //bit 31.   clk lane tx_hs_en control selection.  1 = from register. 0 use clk lane state machine.
+  //bit 30.   register bit for clock lane tx_hs_en.
+  //bit 29.  clk lane tx_lp_en contrl selection.  1 = from register. 0 from clk lane state machine.
+  //bit 28.  register bit for clock lane tx_lp_en.
+  //bit 27.  chan0 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 26.  register bit for chan0 tx_hs_en.
+  //bit 25.  chan0 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 24. register bit from chan0 tx_lp_en.
+  //bit 23.  chan0 rx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 22. register bit from chan0 rx_lp_en.
+  //bit 21.  chan0 contention detection enable control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 20. register bit from chan0 contention dectection enable.
+  //bit 19.  chan1 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 18.  register bit for chan1 tx_hs_en.
+  //bit 17.  chan1 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 16. register bit from chan1 tx_lp_en.
+  //bit 15.  chan2 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 14.  register bit for chan2 tx_hs_en.
+  //bit 13.  chan2 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 12. register bit from chan2 tx_lp_en.
+  //bit 11. chan3 tx_hs_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 10. register bit for chan3 tx_hs_en.
+  //bit 9.  chan3 tx_lp_en control selection. 1 = from register. 0 from chan0 state machine.
+  //bit 8. register bit from chan3 tx_lp_en.
+  //bit 4.  clk chan power down. this bit is also used as the power down of the whole MIPI_DSI_PHY.
+  //bit 3.  chan3 power down.
+  //bit 2.  chan2 power down.
+  //bit 1.  chan1 power down.
+  //bit 0.  chan0 power down.
+#define MIPI_DSI_CHAN_STS       0x2
+ //bit 24.     rx turn watch dog triggered.
+ //bit 23      rx esc watchdog  triggered.
+  // bit 22    mbias ready.
+  //bit 21     txclkesc  synced and ready.
+ //bit 20:17  clk lane state. {mbias_ready, tx_stop, tx_ulps, tx_hs_active}
+ //bit 16:13 chan3 state{0, tx_stop, tx_ulps, tx_hs_active}
+  //bit 12:9 chan2 state.{0, tx_stop, tx_ulps, tx_hs_active}
+ //bit 8:5  chan1 state. {0, tx_stop, tx_ulps, tx_hs_active}
+ //bit 4:0  chan0 state. {TX_STOP, tx_ULPS, hs_active, direction, rxulpsesc}
+#define MIPI_DSI_CLK_TIM        0x3
+  //bit 31:24. TCLK_PREPARE.
+  //bit 23:16. TCLK_ZERO.
+  //bit 15:8.  TCLK_POST.
+  //bit 7:0.   TCLK_TRAIL.
+#define MIPI_DSI_HS_TIM         0x4
+  //bit 31:24. THS_PREPARE.
+  //bit 23:16. THS_ZERO.
+  //bit 15:8.  THS_TRAIL.
+  //bit 7:0.   THS_EXIT.
+#define MIPI_DSI_LP_TIM         0x5
+  //bit 31:24. tTA_GET.
+  //bit 23:16. tTA_GO.
+  //bit 15:8.  tTA_SURE.
+  //bit 7:0.   tLPX.
+#define MIPI_DSI_ANA_UP_TIM     0x6
+  //wait time to  MIPI DIS analog ready.
+#define MIPI_DSI_INIT_TIM       0x7
+  // TINIT.
+#define MIPI_DSI_WAKEUP_TIM     0x8
+  //TWAKEUP.
+#define MIPI_DSI_LPOK_TIM       0x9
+  //when in RxULPS check state, after the the logic enable the analog, how long we should wait to check the lP state .
+#define MIPI_DSI_LP_WCHDOG      0xa
+  //Watchdog for RX low power state no finished.
+#define MIPI_DSI_ANA_CTRL       0xb
+  //tMBIAS,  after send power up signals to analog, how long we should wait for analog powered up.
+#define MIPI_DSI_CLK_TIM1       0xc
+  //bit 31:8.  reserved for future.
+  //bit 7:0.   tCLK_PRE.
+#define MIPI_DSI_TURN_WCHDOG    0xd
+   //watchdog for turn around waiting time.
+#define MIPI_DSI_ULPS_CHECK     0xe
+   //When in RxULPS state, how frequency we should to check if the TX side out of ULPS state.
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/mipi_phy_reg.h b/arch/arm/mach-meson8b/include/mach/mipi_phy_reg.h
new file mode 100644
index 000000000000..fe4cef7f8da2
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/mipi_phy_reg.h
@@ -0,0 +1,190 @@
+#ifndef MIPI_PHY_REG
+#define MIPI_PHY_REG
+#include <mach/io.h>
+
+#define MIPI_PHY_BASE                  IO_MIPI_PHY_BASE
+#define mipi_phy_reg_wr(addr, data) *(volatile unsigned long *) (MIPI_PHY_BASE + (addr << 2) )=data
+#define mipi_phy_reg_rd(addr) *(volatile unsigned long *) (MIPI_PHY_BASE + (addr << 2) )
+
+#define MIPI_PHY_CTRL    		0x00
+  //31:   soft reset.  set 1 will reset the MIPI phy cil_scnn and cil_sfen modules.
+          // set 0 will release the reset.  it's level signal.
+  //20:   if set, all analog control signals will directly from the related register bit.
+  //19:18  mipi hs clock to pad selection.
+           //2'b00 :  no output.
+           //2'b01 :  output /2 clock.
+           //2'b10 :  output /4 clock.
+           //2'b11 :  output /8 clock.
+  //17:15  mipi analog signal to pad selection.
+           //3'b000: no output.
+           //3'b001:  clock lane.
+           //3'b010:  data lane 0.
+           //3'b011:  data lane 1.
+           //3'b100:  data lane 2.
+           //3'b101:  data lane 3.
+  //13     ddr to reg.   enalbe this bit the 8 interface DFFs result will be latch to
+           // MIPI_PHY_DDR_STS registers.
+  //12     enable this bit : all analog output signal will be latched to
+           // MIPI_PHY_ANA_STS   registers.
+  //11     not used. reserved for future..
+  //10     force analog MBIAS enable.
+  // 9:5    mipi_chpu  to analog.
+  // 4      shut down digital clock lane.
+  // 3      Shut down digital data lane 3.
+  // 2      Shut down digital data lane 2.
+  // 1      Shut down digital data lane 1.
+  // 0      Shut down digital data lane 0.
+
+#define MIPI_PHY_CLK_LANE_CTRL		0x01
+  //11     force clock lane TH check enable.
+  //10     force clock lane LP enable.
+  //9      force clock lane HS RECEIVER enable  this signal is not used by analog.
+  //8      force clock lane terminator enable
+  //7       if set, will dislabe clock lane LPEN if clock lane is in HS mode.
+            // if not set,  the LPEN is always enabled until in ULPS state.
+  //6       force clock TCLK_ZERO check when in clock lane HS mode.
+  //5:3     TCLK_ZERO timing check. check with the hs clock counter.
+          //  000:  hs clock itself.
+          //  001:   hs clock /2
+          //  010:   hs clock /4
+          //  011:   hs clock /8
+          //  100:   hs clock /16
+  // 1      force clock lane come out of ulps
+  // 0      force clock lane enter ULPS state.
+
+
+
+#define MIPI_PHY_DATA_LANE_CTRL		0x02
+  //15 :   force data lane 3 THEN  enable.
+  //14 :   force data lane 3 LP receiver enable.
+  //13 :   force data lane 3 HS receiver enable.
+  //12  :  force data lane 3 terminator enable.
+  //11 :   force data lane 2 THEN  enable.
+  //10 :   force data lane 2 LP receiver enable.
+  //9 :    force data lane 2 HS receiver enable.
+  //8 :    force data lane 2 terminator enable.
+  //7 :    force data lane 1 THEN  enable.
+  //6 :    force data lane 1 LP receiver enable.
+  //5 :    force data lane 1 HS receiver enable.
+  //4 :    force data lane 1 terminator enable.
+  //3 :    force data lane 0 THEN  enable.
+  //2 :    force data lane 0 LP receiver enable.
+  //1 :    force data lane 0 HS receiver enable. // this bit is not used to control analog.
+  //0 :    force data lane 0 terminator enable.
+
+#define MIPI_PHY_DATA_LANE_CTRL1	0x03
+   //12  LP data bit order.
+   //11:10. HS data bit order.  2'b00.  low bit input early.
+   //9:7    data pipe sel. output data use with pipe line data.
+   //6:2.   these addition 5 pipe line to same the high speed data.
+           //each bit for one pipe line.
+   // 1    if set enable the hs_sync error bit check.
+   // 0:   for CSI2, only ULPS command accepted. if set this bit, all other command will insert the            //ErrEsc signal.
+
+#define MIPI_PHY_TCLK_MISS		0x04
+#define MIPI_PHY_TCLK_SETTLE		0x05
+#define MIPI_PHY_THS_EXIT		0x06
+#define MIPI_PHY_THS_SKIP		0x07
+#define MIPI_PHY_THS_SETTLE		0x08
+#define MIPI_PHY_TINIT			0x09
+#define MIPI_PHY_TULPS_C		0x0a
+#define MIPI_PHY_TULPS_S		0x0b
+#define MIPI_PHY_TMBIAS		        0x0c
+   // how many cycles need to wait for analog MBIAS stable after MIPI_MBIAS_EN is inserted.
+#define MIPI_PHY_TLP_EN_W		0x0d
+   // how many cycles need to wait for analog LP receiver stable output after LPEN is inserted.
+#define MIPI_PHY_TLPOK    		0x0e
+   // how many cycles need to wait for analog LP receiver stable output after LPEN is inserted.
+#define MIPI_PHY_TWD_INIT               0x0f
+   // watch dog for init.
+#define MIPI_PHY_TWD_HS                 0x10
+   // watch dog for hs speed transfer.
+#define MIPI_PHY_AN_CTRL0		0x11
+#define MIPI_PHY_AN_CTRL1		0x12
+#define MIPI_PHY_AN_CTRL2		0x13
+#define MIPI_PHY_CLK_LANE_STS		0x14
+  //3:0 clock lane states.
+       // 4'h0 : Power_down state.
+       // 4'h1 : POWER_UP state. //waiting for TINIT and MBIAS ready.
+       // 4'h2 : INIT state  //waiting the input to STOP.
+       // 4'h3 : STOP state.
+       // 4'h4 : ULPS request state. after receiver the ulps request, waiting everything setlled.
+       // 4'h5 : ULPS state.
+       // 4'h6 : ULPS exit state. checked ULPS exit request and waiting for input in STOP.
+       // 4'h7 : HS data transfer request state. LP = 2'b01:
+       // 4'h8 : HS bridge state.     LP = 2'b00:
+       // 4'h9 : HS CLK ZERO state.   enable the HS reciever in this stage the input clock is zero.
+       // 4'ha : HS transfer state.
+       // 4'hb : HS TRAIL state.  if detected no clock edge , the state machine will try to go to stop state.
+
+#define MIPI_PHY_DATA_LANE0_STS		0x15
+   //6:4 : data lane 0 HS sub state.  because this is across clock domain state. this is only for static debug.
+   //3:0  data lane 0 state.
+         //4'h0 : POWER_DOWN State.
+         //4'h1 : POWER UP state.
+         //4'h2 : INIT state.
+         //4'h3 : STOP state.
+         //4'h4 : HS REQUST state.
+         //4'h5 : HS PREPARE state.
+         //4'h6 : HS transfer state.
+         //4'h7 : HS exit state.
+         //4'h8 : ESC request state.
+         //4'h9 : ESC bridge 0 state.
+         //4'ha : ESC bridge 1 state.
+         //4'hb : ESC command state.
+         //4'hc : ESC EXIT state.
+         //4'hd : LP data transfer state.
+         //4'he : ULPS state.
+         //4'hf : ULPS exit state.
+#define MIPI_PHY_DATA_LANE1_STS		0x16
+   //6:4 : data lane 0 HS sub state.  because this is across clock domain state. this is only for static debug.
+   //3:0 : data lane 0 state.
+
+#define MIPI_PHY_DATA_LANE2_STS		0x17
+#define MIPI_PHY_DATA_LANE3_STS		0x18
+#define MIPI_PHY_ESC_CMD		0x19
+#define MIPI_PHY_INT_CTRL		0x1a
+   //24:  read to clear the INT_STS.  when this bit is set, read MIPI_PHY_INT_STS will clean all interupt status bits.
+   //18:0  each bit to enable related interrupt generate. if this bit is set, it will generate a interrupt to cpu when the interrupt source is triggered..
+          // otherwise only change the status bit.
+#define MIPI_PHY_INT_STS		0x1b
+   //18    clock lane ulps exit interupt
+   //17    clock lane ulps enter interrupt
+   //16    clock lane initilization watch dog interrupt.
+   //15    data  lane 3 initiliaztion watch dog interrupt.
+   //14    data  lane 2 initiliaztion watch dog interrupt.
+   //13    data  lane 1 initiliaztion watch dog interrupt.
+   //12    data  lane 0 initiliaztion watch dog interrupt.
+   //11    data  lane 3 HS transfer watch dog interrupt.
+   //10    data  lane 2 HS transfer watch dog interrupt.
+   //9     data  lane 1 HS transfer watch dog interrupt.
+   //8     data  lane 0 HS transfer watch dog interrupt.
+   //7     data  lane 3 HS transfer sync error interrupt.
+   //6     data  lane 2 HS transfer sync error interrupt.
+   //5     data  lane 1 HS transfer sync error interrupt.
+   //4     data  lane 0 HS transfer sync error interrupt.
+   //3     data  lane 3 ESC command ready interrupt.
+   //2     data  lane 2 ESC command ready interrupt.
+   //1     data  lane 1 ESC command ready interrupt.
+   //0     data  lane 0 ESC command ready interrupt.
+
+#define MIPI_PHY_ANA_STS                0x1c
+#define MIPI_PHY_DDR_STS                0x1d
+
+// MIPI-CSI2 host registers
+#define MIPI_CSI2_HOST_VERSION          (0x000)
+#define MIPI_CSI2_HOST_N_LANES          (0x001)
+#define MIPI_CSI2_HOST_PHY_SHUTDOWNZ    (0x002)
+#define MIPI_CSI2_HOST_DPHY_RSTZ        (0x003)
+#define MIPI_CSI2_HOST_CSI2_RESETN      (0x004)
+#define MIPI_CSI2_HOST_PHY_STATE        (0x005)
+#define MIPI_CSI2_HOST_DATA_IDS_1       (0x006)
+#define MIPI_CSI2_HOST_DATA_IDS_2       (0x007)
+#define MIPI_CSI2_HOST_ERR1             (0x008)
+#define MIPI_CSI2_HOST_ERR2             (0x009)
+#define MIPI_CSI2_HOST_MASK1            (0x00A)
+#define MIPI_CSI2_HOST_MASK2            (0x00B)
+#define MIPI_CSI2_HOST_PHY_TST_CTRL0    (0x00C)
+#define MIPI_CSI2_HOST_PHY_TST_CTRL1    (0x00D)
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/misc.h b/arch/arm/mach-meson8b/include/mach/misc.h
new file mode 100644
index 000000000000..483abff2f1fd
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/misc.h
@@ -0,0 +1,143 @@
+/*
+ *
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ * Basic register address definitions in physical memory and
+ * some block defintions for core devices like the timer.
+ * copy from linux kernel
+ */
+
+/*
+ * Temp solution file for M6 define
+*/
+#ifndef __MACH_MESSON_FIRM_REGS_H
+#define __MACH_MESSON_FIRM_REGS_H
+
+#define IO_CBUS_BASE2  0xc1100000
+
+#define NAND_CMD  ((0xc1108600-IO_CBUS_BASE2)>>2)
+#define NAND_CFG  ((0xc1108604-IO_CBUS_BASE2)>>2)
+#define NAND_DADR ((0xc1108608-IO_CBUS_BASE2)>>2)
+#define NAND_IADR ((0xc110860c-IO_CBUS_BASE2)>>2)
+#define NAND_BUF  ((0xc1108610-IO_CBUS_BASE2)>>2)
+#define NAND_INFO ((0xc1108614-IO_CBUS_BASE2)>>2)
+#define NAND_DC   ((0xc1108618-IO_CBUS_BASE2)>>2)
+#define NAND_ADR  ((0xc110861c-IO_CBUS_BASE2)>>2)
+#define NAND_DL   ((0xc1108620-IO_CBUS_BASE2)>>2)
+#define NAND_DH   ((0xc1108624-IO_CBUS_BASE2)>>2)
+#define NAND_CADR ((0xc1108628-IO_CBUS_BASE2)>>2)
+#define NAND_SADR ((0xc110862c-IO_CBUS_BASE2)>>2)
+
+#define P_NAND_CMD                                CBUS_REG_ADDR(NAND_CMD)
+#define P_NAND_CFG                                CBUS_REG_ADDR(NAND_CFG)
+#define P_NAND_DADR                               CBUS_REG_ADDR(NAND_DADR)
+#define P_NAND_IADR                               CBUS_REG_ADDR(NAND_IADR)
+#define P_NAND_BUF                                CBUS_REG_ADDR(NAND_BUF)
+#define P_NAND_INFO                               CBUS_REG_ADDR(NAND_INFO)
+#define P_NAND_DC                                 CBUS_REG_ADDR(NAND_DC)
+#define P_NAND_ADR                                CBUS_REG_ADDR(NAND_ADR)
+#define P_NAND_DL                                 CBUS_REG_ADDR(NAND_DL)
+#define P_NAND_DH                                 CBUS_REG_ADDR(NAND_DH)
+#define P_NAND_CADR                               CBUS_REG_ADDR(NAND_CADR)
+#define P_NAND_SADR                               CBUS_REG_ADDR(NAND_SADR)
+
+#define VPP_OSD2_PREBLEND           (1 << 17)
+#define VPP_OSD1_PREBLEND           (1 << 16)
+#define VPP_VD2_PREBLEND            (1 << 15)
+#define VPP_VD1_PREBLEND            (1 << 14)
+#define VPP_OSD2_POSTBLEND          (1 << 13)
+#define VPP_OSD1_POSTBLEND          (1 << 12)
+#define VPP_VD2_POSTBLEND           (1 << 11)
+#define VPP_VD1_POSTBLEND           (1 << 10)
+#define VPP_POSTBLEND_EN			(1 << 7)
+#define VPP_PRE_FG_OSD2             (1 << 5)
+#define VPP_PREBLEND_EN             (1 << 6)
+#define VPP_POST_FG_OSD2            (1 << 4)
+
+#define I2SIN_DIR       0    // I2S CLK and LRCLK direction. 0 : input 1 : output.
+#define I2SIN_CLK_SEL    1    // I2S clk selection : 0 : from pad input. 1 : from AIU.
+#define I2SIN_LRCLK_SEL 2
+#define I2SIN_POS_SYNC  3
+#define I2SIN_LRCLK_SKEW 4    // 6:4
+#define I2SIN_LRCLK_INVT 7
+#define I2SIN_SIZE       8    //9:8 : 0 16 bit. 1 : 18 bits 2 : 20 bits 3 : 24bits.
+#define I2SIN_CHAN_EN   10    //13:10. 
+#define I2SIN_EN        15
+
+#define AUDIN_FIFO0_EN       0
+#define AUDIN_FIFO0_LOAD     2    //write 1 to load address to AUDIN_FIFO0.
+         
+#define AUDIN_FIFO0_DIN_SEL  3
+            // 0     spdifIN
+            // 1     i2Sin
+            // 2     PCMIN
+            // 3     HDMI in
+            // 4     DEMODULATOR IN
+#define AUDIN_FIFO0_ENDIAN   8    //10:8   data endian control.
+#define AUDIN_FIFO0_CHAN     11    //14:11   channel number.  in M1 suppose there's only 1 channel and 2 channel.
+#define AUDIN_FIFO0_UG       15    // urgent request enable.
+
+#define AUDIN_FIFO1_EN       0
+#define AUDIN_FIFO1_LOAD     2    //write 1 to load address to AUDIN_FIFO0.
+         
+#define AUDIN_FIFO1_DIN_SEL  3
+            // 0     spdifIN
+            // 1     i2Sin
+            // 2     PCMIN
+            // 3     HDMI in
+            // 4     DEMODULATOR IN
+#define AUDIN_FIFO1_ENDIAN   8    //10:8   data endian control.
+#define AUDIN_FIFO1_CHAN     11    //14:11   channel number.  in M1 suppose there's only 1 channel and 2 channel.
+#define AUDIN_FIFO1_UG       15    // urgent request enable.
+
+/*BT656 MACRO */
+//#define BT_CTRL 0x2240 	///../ucode/register.h
+#define BT_SYSCLOCK_RESET    30      //Sync fifo soft  reset_n at system clock domain.     Level reset. 0 = reset. 1 : normal mode.
+#define BT_656CLOCK_RESET    29      //Sync fifo soft reset_n at bt656 clock domain.   Level reset.  0 = reset.  1 : normal mode.
+//    #define BT_VSYNC_SEL              25      //25:26 VDIN VS selection.   00 :  SOF.  01: EOF.   10: vbi start point.  11 : vbi end point.
+//    #define BT_HSYNC_SEL              23      //24:23 VDIN HS selection.  00 : EAV.  01: SAV.    10:  EOL.  11: SOL
+#define BT_CAMERA_MODE        22      // Camera_mode
+#define BT_CLOCK_ENABLE        7	// 1: enable bt656 clock. 0: disable bt656 clock.
+
+//#define BT_PORT_CTRL 0x2249 	///../ucode/register.h
+//    #define BT_VSYNC_MODE      23  //1: use  vsync  as the VBI start point. 0: use the regular vref.
+//    #define BT_HSYNC_MODE      22  //1: use hsync as the active video start point.  0. Use regular sav and eav. 
+#define BT_SOFT_RESET           31	// Soft reset
+//    #define BT_JPEG_START           30
+//    #define BT_JPEG_IGNORE_BYTES    18	//20:18
+//    #define BT_JPEG_IGNORE_LAST     17
+#define BT_UPDATE_ST_SEL        16
+#define BT_COLOR_REPEAT         15
+//    #define BT_VIDEO_MODE           13	// 14:13
+#define BT_AUTO_FMT             12
+#define BT_PROG_MODE            11
+//    #define BT_JPEG_MODE            10
+#define BT_XCLK27_EN_BIT        9	// 1 : xclk27 is input.     0 : xclk27 is output.
+#define BT_FID_EN_BIT           8	// 1 : enable use FID port.
+#define BT_CLK27_SEL_BIT        7	// 1 : external xclk27      0 : internal clk27.
+//    #define BT_CLK27_PHASE_BIT      6	// 1 : no inverted          0 : inverted.
+//    #define BT_ACE_MODE_BIT         5	// 1 : auto cover error by hardware.
+#define BT_SLICE_MODE_BIT       4	// 1 : no ancillay flag     0 : with ancillay flag.
+#define BT_FMT_MODE_BIT         3	// 1 : ntsc                 0 : pal.
+#define BT_REF_MODE_BIT         2	// 1 : from bit stream.     0 : from ports.
+#define BT_MODE_BIT             1	// 1 : BT656 model          0 : SAA7118 mode.
+#define BT_EN_BIT               0	// 1 : enable.
+#define BT_VSYNC_PHASE      0
+#define BT_HSYNC_PHASE      1
+//    #define BT_VSYNC_PULSE      2
+//    #define BT_HSYNC_PULSE      3
+//    #define BT_FID_PHASE        4
+#define BT_FID_HSVS         5
+#define BT_IDQ_EN           6
+#define BT_IDQ_PHASE        7
+#define BT_D8B              8
+//    #define BT_10BTO8B          9
+#define BT_FID_DELAY       10	//12:10
+#define BT_VSYNC_DELAY     13	//
+#define BT_HSYNC_DELAY     16
+
+
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/mod_gate.h b/arch/arm/mach-meson8b/include/mach/mod_gate.h
new file mode 100644
index 000000000000..9a338986714c
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/mod_gate.h
@@ -0,0 +1,54 @@
+#ifndef __MOD_GATE_H
+#define __MOD_GATE_H
+
+#include <mach/power_gate.h>
+
+typedef enum {
+    MOD_VDEC = 0,
+    MOD_AUDIO,
+    MOD_HDMI,
+    MOD_VENC,
+    MOD_TCON,
+    MOD_LVDS,
+    MOD_SPI,
+    MOD_UART0,
+    MOD_UART1,
+    MOD_UART2,
+    MOD_UART3,
+    MOD_ROM,
+    MOD_EFUSE,
+    MOD_RANDOM_NUM_GEN,
+    MOD_ETHERNET,
+    MOD_MEDIA_CPU,
+    MOD_GE2D,
+    MOD_AHB,
+    MOD_DEMUX,
+    MOD_SMART_CARD,
+    MOD_SDHC,
+    MOD_STREAM,
+    MOD_BLK_MOV,
+    MOD_MISC_DVIN,
+    MOD_USB0,
+    MOD_USB1,
+    MOD_SDIO,
+    MOD_MAX_NUM,
+}mod_type_t;
+
+#define GATE_ON(_MOD) \
+    do{                     \
+            if (0) printk(KERN_INFO "gate on %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+            SET_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+    }while(0)
+
+
+#define GATE_OFF(_MOD) \
+    do{                             \
+            if (0) printk(KERN_INFO "gate off %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+            CLEAR_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+    }while(0)
+
+extern void switch_mod_gate_by_type(mod_type_t type, int flag);
+extern void switch_mod_gate_by_name(const char* mod_name, int flag);
+extern void power_gate_init(void);
+
+#endif /* __MOD_GATE_H */
diff --git a/arch/arm/mach-meson8b/include/mach/pinmux.h b/arch/arm/mach-meson8b/include/mach/pinmux.h
new file mode 100644
index 000000000000..283a28584be9
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/pinmux.h
@@ -0,0 +1,76 @@
+//      pinmux.h
+//      
+//      Copyright 2011 Unknown <jerry.yu@jerryyu-Lenovo>
+//      
+//      This program is free software; you can redistribute it and/or modify
+//      it under the terms of the GNU General Public License as published by
+//      the Free Software Foundation; either version 2 of the License, or
+//      (at your option) any later version.
+//      
+//      This program is distributed in the hope that it will be useful,
+//      but WITHOUT ANY WARRANTY; without even the implied warranty of
+//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//      GNU General Public License for more details.
+//      
+//      You should have received a copy of the GNU General Public License
+//      along with this program; if not, write to the Free Software
+//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+//      MA 02110-1301, USA.
+//      
+//      
+#ifndef __INCLUDE_MACH_MESON3_H_
+#define __INCLUDE_MACH_MESON3_H_
+#include <linux/types.h>
+#define AO				10
+#define PINMUX_REG(n)	n
+#define PINMUX_END_ITEM {.reg=0xffffffff}
+
+
+
+/**
+ * structure and data type
+ */
+typedef struct __pinmux_item{
+	uint32_t reg;
+	uint32_t clrmask;
+	uint32_t setmask;
+}pinmux_item_t;
+struct __pinmux_set_s{
+	bool (* chip_select)(bool);///@todo implement it later .
+	pinmux_item_t * pinmux;
+};
+
+typedef struct __pinmux_set_s pinmux_set_t;
+
+/**
+ * UTIL interface  
+ * these function can be implement in a tools
+ */
+ /**
+  * @return NULL is fail
+  * 		errno NOTAVAILABLE , 
+  * 			  SOMEPIN IS LOCKED
+  */
+pinmux_set_t* pinmux_cacl_str(char * pad,char * sig ,...);
+pinmux_set_t* pinmux_cacl_int(uint32_t pad,uint32_t sig ,...);
+pinmux_set_t* pinmux_cacl(char * str);///formate is "pad=sig pad=sig "
+char ** pin_get_list(void);
+char ** sig_get_list(void);
+char * pin_getname(uint32_t pin);
+char * sig_getname(uint32_t sig);
+uint32_t pins_num(void);
+/**
+ * Util Get status function
+ */
+uint32_t pin_sig(uint32_t pin);
+uint32_t sig_pin(uint32_t sig);
+/**
+ * pinmux set function
+ * @return 0, success , 
+ * 		   SOMEPIN IS LOCKED, some pin is locked to the specail feature . You can not change it
+ * 		   NOTAVAILABLE, not available .
+ */
+int32_t pinmux_set(pinmux_set_t *);
+int32_t pinmux_clr(pinmux_set_t *);
+int32_t pinmux_set_locktable(pinmux_set_t*);
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/pinmux_queue.h b/arch/arm/mach-meson8b/include/mach/pinmux_queue.h
new file mode 100644
index 000000000000..97dca1a0a0ba
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/pinmux_queue.h
@@ -0,0 +1,2 @@
+#include <linux/mutex.h>
+extern struct mutex spi_nand_mutex;
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/include/mach/pm.h b/arch/arm/mach-meson8b/include/mach/pm.h
new file mode 100644
index 000000000000..a4095866e2da
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/pm.h
@@ -0,0 +1,32 @@
+#ifndef _MACH_MESON_PM_H
+#define _MACH_MESON_PM_H
+
+/*
+ * Caution: Assembly code in sleep.S makes assumtion on the order
+ * of the members of this structure.
+ */
+struct meson_pm_config {
+    void __iomem *pctl_reg_base;
+    void __iomem *mmc_reg_base;
+    void __iomem *hiu_reg_base;
+    unsigned power_key;
+    unsigned ddr_clk;
+    void __iomem *ddr_reg_backup;
+    unsigned core_voltage_adjust;
+    int sleepcount;
+    void (*set_vccx2)(int power_on);
+    void (*set_exgpio_early_suspend)(int power_on);
+};
+
+extern unsigned int meson_cpu_suspend_sz;
+extern void meson_cpu_suspend(struct meson_pm_config *);
+extern void power_gate_switch(int flag);
+extern void clk_switch(int flag);
+//extern void pll_switch(int flag);
+extern void early_power_gate_switch(int flag);
+extern void early_clk_switch(int flag);
+//extern void early_pll_switch(int flag);
+#ifdef CONFIG_MESON_SUSPEND
+extern int meson_power_suspend(void);
+#endif /*CONFIG_MESON_SUSPEND*/
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/power_gate.h b/arch/arm/mach-meson8b/include/mach/power_gate.h
new file mode 100644
index 000000000000..8dcf9e248ca2
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/power_gate.h
@@ -0,0 +1,889 @@
+#ifndef __POWER_MGR_HEADER_
+#define __POWER_MGR_HEADER_
+
+#include <mach/am_regs.h>
+#include <mach/clock.h>
+#include <linux/spinlock.h>
+/* clock gate control */
+
+#define __CLK_GATE_ON(_MOD) \
+	do{                     \
+		if(GCLK_ref[GCLK_IDX_##_MOD]++ == 0){ \
+			if (0) printk(KERN_INFO "gate on %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+			SET_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+		} \
+	}while(0)
+
+
+#define __CLK_GATE_OFF(_MOD) \
+	do{                             \
+		if(--GCLK_ref[GCLK_IDX_##_MOD] <= 0){ \
+			if (0) printk(KERN_INFO "gate off %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+			CLEAR_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+			GCLK_ref[GCLK_IDX_##_MOD] = 0; \
+		} \
+	}while(0)
+
+#define IS_CLK_GATE_ON(_MOD) (READ_CBUS_REG(GCLK_REG_##_MOD) & (GCLK_MASK_##_MOD))
+#define GATE_INIT(_MOD) GCLK_ref[GCLK_IDX_##_MOD] = IS_CLK_GATE_ON(_MOD)?1:0
+	
+extern spinlock_t gate_lock;
+
+#define CLK_GATE_ON(_MOD) \
+	do{                     \
+		int flags; \
+		spin_lock_irqsave(&gate_lock, flags); \
+		__CLK_GATE_ON(_MOD); \
+		spin_unlock_irqrestore(&gate_lock, flags); \
+	}while(0)
+	
+#define CLK_GATE_OFF(_MOD) \
+	do{                     \
+		int flags; \
+		spin_lock_irqsave(&gate_lock, flags); \
+		__CLK_GATE_OFF(_MOD); \
+		spin_unlock_irqrestore(&gate_lock, flags); \
+	}while(0)
+
+#define GCLK_IDX_DDR         0
+#define GCLK_NAME_DDR      "DDR"
+#define GCLK_DEV_DDR      "CLKGATE_DDR"
+#define GCLK_REG_DDR      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_DDR      (1<<0)
+
+#define GCLK_IDX_DOS         1
+#define GCLK_NAME_DOS      "DOS"
+#define GCLK_DEV_DOS      "CLKGATE_DOS"
+#define GCLK_REG_DOS      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_DOS      (1<<1)
+
+#define GCLK_IDX_RESERVED0         2
+#define GCLK_NAME_RESERVED0      "RESERVED0"
+#define GCLK_DEV_RESERVED0      "CLKGATE_RESERVED0"
+#define GCLK_REG_RESERVED0      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED0      (1<<2)
+
+#define GCLK_IDX_RESERVED1         3
+#define GCLK_NAME_RESERVED1      "RESERVED1"
+#define GCLK_DEV_RESERVED1      "CLKGATE_RESERVED1"
+#define GCLK_REG_RESERVED1      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED1      (1<<3)
+
+#define GCLK_IDX_AHB_BRIDGE         4
+#define GCLK_NAME_AHB_BRIDGE      "AHB_BRIDGE"
+#define GCLK_DEV_AHB_BRIDGE      "CLKGATE_AHB_BRIDGE"
+#define GCLK_REG_AHB_BRIDGE      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_AHB_BRIDGE      (1<<4)
+
+#define GCLK_IDX_ISA         5
+#define GCLK_NAME_ISA      "ISA"
+#define GCLK_DEV_ISA      "CLKGATE_ISA"
+#define GCLK_REG_ISA      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_ISA      (1<<5)
+
+//NEW ADD
+#define GCLK_IDX_PL310_CBUS         6
+#define GCLK_NAME_PL310_CBUS      "PL310_CBUS"
+#define GCLK_DEV_PL310_CBUS      "CLKGATE_PL310_CBUS"
+#define GCLK_REG_PL310_CBUS      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_PL310_CBUS      (1<<6)
+
+#define GCLK_IDX__1200XXX       7
+#define GCLK_NAME__1200XXX      "_1200XXX"
+#define GCLK_DEV__1200XXX      "CLKGATE__1200XXX"
+#define GCLK_REG__1200XXX      (HHI_GCLK_MPEG0)
+#define GCLK_MASK__1200XXX      (1<<7)
+
+#define GCLK_IDX_SPICC         8
+#define GCLK_NAME_SPICC      "SPICC"
+#define GCLK_DEV_SPICC      "CLKGATE_SPICC"
+#define GCLK_REG_SPICC      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_SPICC      (1<<8)
+
+#define GCLK_IDX_I2C         9
+#define GCLK_NAME_I2C      "I2C"
+#define GCLK_DEV_I2C      "CLKGATE_I2C"
+#define GCLK_REG_I2C      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_I2C      (1<<9)
+
+#define GCLK_IDX_SAR_ADC         10
+#define GCLK_NAME_SAR_ADC      "SAR_ADC"
+#define GCLK_DEV_SAR_ADC      "CLKGATE_SAR_ADC"
+#define GCLK_REG_SAR_ADC      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_SAR_ADC      (1<<10)
+
+#define GCLK_IDX_SMART_CARD_MPEG_DOMAIN         11
+#define GCLK_NAME_SMART_CARD_MPEG_DOMAIN      "SMART_CARD_MPEG_DOMAIN"
+#define GCLK_DEV_SMART_CARD_MPEG_DOMAIN      "CLKGATE_SMART_CARD_MPEG_DOMAIN"
+#define GCLK_REG_SMART_CARD_MPEG_DOMAIN      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_SMART_CARD_MPEG_DOMAIN      (1<<11)
+
+#define GCLK_IDX_RANDOM_NUM_GEN         12
+#define GCLK_NAME_RANDOM_NUM_GEN      "RANDOM_NUM_GEN"
+#define GCLK_DEV_RANDOM_NUM_GEN      "CLKGATE_RANDOM_NUM_GEN"
+#define GCLK_REG_RANDOM_NUM_GEN      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RANDOM_NUM_GEN      (1<<12)
+
+#define GCLK_IDX_UART0         13
+#define GCLK_NAME_UART0      "UART0"
+#define GCLK_DEV_UART0      "CLKGATE_UART0"
+#define GCLK_REG_UART0      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_UART0      (1<<13)
+
+#define GCLK_IDX_SDHC         14
+#define GCLK_NAME_SDHC      "SDHC"
+#define GCLK_DEV_SDHC      "CLKGATE_SDHC"
+#define GCLK_REG_SDHC      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_SDHC      (1<<14)
+
+#define GCLK_IDX_STREAM         15
+#define GCLK_NAME_STREAM      "STREAM"
+#define GCLK_DEV_STREAM      "CLKGATE_STREAM"
+#define GCLK_REG_STREAM      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_STREAM      (1<<15)
+
+#define GCLK_IDX_ASYNC_FIFO         16
+#define GCLK_NAME_ASYNC_FIFO      "ASYNC_FIFO"
+#define GCLK_DEV_ASYNC_FIFO      "CLKGATE_ASYNC_FIFO"
+#define GCLK_REG_ASYNC_FIFO      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_ASYNC_FIFO      (1<<16)
+
+#define GCLK_IDX_SDIO         17
+#define GCLK_NAME_SDIO      "SDIO"
+#define GCLK_DEV_SDIO      "CLKGATE_SDIO"
+#define GCLK_REG_SDIO      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_SDIO      (1<<17)
+
+#define GCLK_IDX_AUD_BUF         18
+#define GCLK_NAME_AUD_BUF      "AUD_BUF"
+#define GCLK_DEV_AUD_BUF      "CLKGATE_AUD_BUF"
+#define GCLK_REG_AUD_BUF      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_AUD_BUF      (1<<18)
+
+#define GCLK_IDX_HIU_PARSER         19
+#define GCLK_NAME_HIU_PARSER      "HIU_PARSER"
+#define GCLK_DEV_HIU_PARSER      "CLKGATE_HIU_PARSER"
+#define GCLK_REG_HIU_PARSER      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_HIU_PARSER      (1<<19)
+
+#define GCLK_IDX_RESERVED2         20
+#define GCLK_NAME_RESERVED2      "RESERVED2"
+#define GCLK_DEV_RESERVED2      "CLKGATE_RESERVED2"
+#define GCLK_REG_RESERVED2      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED2      (1<<20)
+
+//NEW ADD
+#define GCLK_IDX_HDMI_RX         21
+#define GCLK_NAME_HDMI_RX      "HDMI_RX "
+#define GCLK_DEV_HDMI_RX      "CLKGATE_HDMI_RX "
+#define GCLK_REG_HDMI_RX      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_HDMI_RX      (1<<21)
+
+#define GCLK_IDX_RESERVED3         22
+#define GCLK_NAME_RESERVED3      "RESERVED3"
+#define GCLK_DEV_RESERVED3      "CLKGATE_RESERVED3"
+#define GCLK_REG_RESERVED3      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED3      (1<<22)
+
+#define GCLK_IDX_ASSIST_MISC         23
+#define GCLK_NAME_ASSIST_MISC      "ASSIST_MISC"
+#define GCLK_DEV_ASSIST_MISC      "CLKGATE_ASSIST_MISC"
+#define GCLK_REG_ASSIST_MISC      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_ASSIST_MISC      (1<<23)
+
+
+#define GCLK_IDX_RESERVED4         24
+#define GCLK_NAME_RESERVED4      "RESERVED4"
+#define GCLK_DEV_RESERVED4     "CLKGATE_RESERVED4"
+#define GCLK_REG_RESERVED4      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED4      (1<<24)
+
+#define GCLK_IDX_RESERVED5         25
+#define GCLK_NAME_RESERVED5      "RESERVED5"
+#define GCLK_DEV_RESERVED5      "CLKGATE_RESERVED5"
+#define GCLK_REG_RESERVED5      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED5      (1<<25)
+
+#define GCLK_IDX_RESERVED6         26
+#define GCLK_NAME_RESERVED6      "RESERVED6"
+#define GCLK_DEV_RESERVED6      "CLKGATE_RESERVED6"
+#define GCLK_REG_RESERVED6      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED6      (1<<26)
+
+#define GCLK_IDX_RESERVED7         27
+#define GCLK_NAME_RESERVED7      "RESERVED7"
+#define GCLK_DEV_RESERVED7      "CLKGATE_RESERVED7"
+#define GCLK_REG_RESERVED7      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED7      (1<<27)
+
+#define GCLK_IDX_RESERVED8         28
+#define GCLK_NAME_RESERVED8      "RESERVED8"
+#define GCLK_DEV_RESERVED8      "CLKGATE_RESERVED8"
+#define GCLK_REG_RESERVED8      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED8      (1<<28)
+
+#define GCLK_IDX_RESERVED9         29
+#define GCLK_NAME_RESERVED9      "RESERVED9"
+#define GCLK_DEV_RESERVED9      "CLKGATE_RESERVED9"
+#define GCLK_REG_RESERVED9      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED9      (1<<29)
+
+#define GCLK_IDX_SPI         30
+#define GCLK_NAME_SPI      "SPI"
+#define GCLK_DEV_SPI      "CLKGATE_SPI"
+#define GCLK_REG_SPI      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_SPI      (1<<30)
+
+#define GCLK_IDX_RESERVED10         31
+#define GCLK_NAME_RESERVED10      "RESERVED10"
+#define GCLK_DEV_RESERVED10      "CLKGATE_RESERVED10"
+#define GCLK_REG_RESERVED10      (HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED10      (1<<31)
+
+#define GCLK_IDX_RESERVED11         32
+#define GCLK_NAME_RESERVED11      "RESERVED11"
+#define GCLK_DEV_RESERVED11      "CLKGATE_RESERVED11"
+#define GCLK_REG_RESERVED11      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED11      (1<<0)
+
+
+#define GCLK_IDX_RESERVED12         33
+#define GCLK_NAME_RESERVED12      "RESERVED12"
+#define GCLK_DEV_RESERVED12      "CLKGATE_RESERVED12"
+#define GCLK_REG_RESERVED12      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED12      (1<<1)
+
+
+#define GCLK_IDX_AUD_IN         34
+#define GCLK_NAME_AUD_IN      "AUD_IN"
+#define GCLK_DEV_AUD_IN      "CLKGATE_AUD_IN"
+#define GCLK_REG_AUD_IN      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AUD_IN      (1<<2)
+
+#define GCLK_IDX_ETHERNET         35
+#define GCLK_NAME_ETHERNET      "ETHERNET"
+#define GCLK_DEV_ETHERNET      "CLKGATE_ETHERNET"
+#define GCLK_REG_ETHERNET      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_ETHERNET      (1<<3)
+
+#define GCLK_IDX_DEMUX         36
+#define GCLK_NAME_DEMUX      "DEMUX"
+#define GCLK_DEV_DEMUX      "CLKGATE_DEMUX"
+#define GCLK_REG_DEMUX      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_DEMUX      (1<<4)
+
+#define GCLK_IDX_RESERVED13         37
+#define GCLK_NAME_RESERVED13      "RESERVED13"
+#define GCLK_DEV_RESERVED13      "CLKGATE_RESERVED13"
+#define GCLK_REG_RESERVED13      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED13      (1<<5)
+
+#define GCLK_IDX_AIU_AI_TOP_GLUE         38
+#define GCLK_NAME_AIU_AI_TOP_GLUE      "AIU_AI_TOP_GLUE"
+#define GCLK_DEV_AIU_AI_TOP_GLUE      "CLKGATE_AIU_AI_TOP_GLUE"
+#define GCLK_REG_AIU_AI_TOP_GLUE      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AI_TOP_GLUE      (1<<6)
+
+#define GCLK_IDX_AIU_IEC958         39
+#define GCLK_NAME_AIU_IEC958      "AIU_IEC958"
+#define GCLK_DEV_AIU_IEC958      "CLKGATE_AIU_IEC958"
+#define GCLK_REG_AIU_IEC958      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_IEC958      (1<<7)
+
+#define GCLK_IDX_AIU_I2S_OUT         40
+#define GCLK_NAME_AIU_I2S_OUT      "AIU_I2S_OUT"
+#define GCLK_DEV_AIU_I2S_OUT      "CLKGATE_AIU_I2S_OUT"
+#define GCLK_REG_AIU_I2S_OUT      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_I2S_OUT      (1<<8)
+
+#define GCLK_IDX_AIU_AMCLK_MEASURE         41
+#define GCLK_NAME_AIU_AMCLK_MEASURE      "AIU_AMCLK_MEASURE"
+#define GCLK_DEV_AIU_AMCLK_MEASURE      "CLKGATE_AIU_AMCLK_MEASURE"
+#define GCLK_REG_AIU_AMCLK_MEASURE      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AMCLK_MEASURE      (1<<9)
+
+#define GCLK_IDX_AIU_AIFIFO2         42
+#define GCLK_NAME_AIU_AIFIFO2      "AIU_AIFIFO2"
+#define GCLK_DEV_AIU_AIFIFO2      "CLKGATE_AIU_AIFIFO2"
+#define GCLK_REG_AIU_AIFIFO2      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AIFIFO2      (1<<10)
+
+#define GCLK_IDX_AIU_AUD_MIXER         43
+#define GCLK_NAME_AIU_AUD_MIXER      "AIU_AUD_MIXER"
+#define GCLK_DEV_AIU_AUD_MIXER      "CLKGATE_AIU_AUD_MIXER"
+#define GCLK_REG_AIU_AUD_MIXER      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AUD_MIXER      (1<<11)
+
+#define GCLK_IDX_AIU_MIXER_REG         44
+#define GCLK_NAME_AIU_MIXER_REG      "AIU_MIXER_REG"
+#define GCLK_DEV_AIU_MIXER_REG      "CLKGATE_AIU_MIXER_REG"
+#define GCLK_REG_AIU_MIXER_REG      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_MIXER_REG      (1<<12)
+
+#define GCLK_IDX_AIU_ADC         45
+#define GCLK_NAME_AIU_ADC      "AIU_ADC"
+#define GCLK_DEV_AIU_ADC      "CLKGATE_AIU_ADC"
+#define GCLK_REG_AIU_ADC      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_ADC      (1<<13)
+
+#define GCLK_IDX_BLK_MOV         46
+#define GCLK_NAME_BLK_MOV      "BLK_MOV"
+#define GCLK_DEV_BLK_MOV      "CLKGATE_BLK_MOV"
+#define GCLK_REG_BLK_MOV      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_BLK_MOV      (1<<14)
+
+//NEW ADD
+#define GCLK_IDX_AIU_TOP_LEVEL         47
+#define GCLK_NAME_AIU_TOP_LEVEL      "AIU_TOP_LEVEL"
+#define GCLK_DEV_AIU_TOP_LEVEL      "CLKGATE_AIU_TOP_LEVEL"
+#define GCLK_REG_AIU_TOP_LEVEL      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_TOP_LEVEL      (1<<15)
+
+#define GCLK_IDX_UART1         48
+#define GCLK_NAME_UART1      "UART1"
+#define GCLK_DEV_UART1      "CLKGATE_UART1"
+#define GCLK_REG_UART1      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_UART1      (1<<16)
+
+#define GCLK_IDX_RESERVED14         49
+#define GCLK_NAME_RESERVED14      "RESERVED14"
+#define GCLK_DEV_RESERVED14      "CLKGATE_RESERVED14"
+#define GCLK_REG_RESERVED14      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED14      (1<<17)
+
+//NEW ADD 
+#define GCLK_IDX_CSI_DIG_CLKIN         50
+#define GCLK_NAME_CSI_DIG_CLKIN      "CSI_DIG_CLKIN"
+#define GCLK_DEV_CSI_DIG_CLKIN      "CLKGATE_CSI_DIG_CLKIN"
+#define GCLK_REG_CSI_DIG_CLKIN      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_CSI_DIG_CLKIN      (1<<18)
+
+#define GCLK_IDX_RESERVED15         51
+#define GCLK_NAME_RESERVED15      "RESERVED15"
+#define GCLK_DEV_RESERVED15      "CLKGATE_RESERVED15"
+#define GCLK_REG_RESERVED15      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED15      (1<<19)
+
+#define GCLK_IDX_GE2D         52
+#define GCLK_NAME_GE2D      "GE2D"
+#define GCLK_DEV_GE2D      "CLKGATE_GE2D"
+#define GCLK_REG_GE2D      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_GE2D      (1<<20)
+
+#define GCLK_IDX_USB0         53
+#define GCLK_NAME_USB0      "USB0"
+#define GCLK_DEV_USB0      "CLKGATE_USB0"
+#define GCLK_REG_USB0      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_USB0      (1<<21)
+
+#define GCLK_IDX_USB1         54
+#define GCLK_NAME_USB1      "USB1"
+#define GCLK_DEV_USB1      "CLKGATE_USB1"
+#define GCLK_REG_USB1      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_USB1      (1<<22)
+
+#define GCLK_IDX_RESET         55
+#define GCLK_NAME_RESET      "RESET"
+#define GCLK_DEV_RESET      "CLKGATE_RESET"
+#define GCLK_REG_RESET      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESET      (1<<23)
+
+#define GCLK_IDX_NAND         56
+#define GCLK_NAME_NAND      "NAND"
+#define GCLK_DEV_NAND      "CLKGATE_NAND"
+#define GCLK_REG_NAND      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_NAND      (1<<24)
+
+#define GCLK_IDX_HIU_PARSER_TOP         57
+#define GCLK_NAME_HIU_PARSER_TOP      "HIU_PARSER_TOP"
+#define GCLK_DEV_HIU_PARSER_TOP      "CLKGATE_HIU_PARSER_TOP"
+#define GCLK_REG_HIU_PARSER_TOP      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_HIU_PARSER_TOP      (1<<25)
+
+//NEW ADD 
+#define GCLK_IDX_USB_GENERAL         58
+#define GCLK_NAME_USB_GENERAL      "USB_GENERAL"
+#define GCLK_DEV_USB_GENERAL      "CLKGATE_USB_GENERAL"
+#define GCLK_REG_USB_GENERAL      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_USB_GENERAL      (1<<26)
+
+#define GCLK_IDX_RESERVED16         59
+#define GCLK_NAME_RESERVED16      "RESERVED16"
+#define GCLK_DEV_RESERVED16      "CLKGATE_RESERVED16"
+#define GCLK_REG_RESERVED16      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED16      (1<<27)
+
+#define GCLK_IDX_RESERVED17         60
+#define GCLK_NAME_RESERVED17      "RESERVED17"
+#define GCLK_DEV_RESERVED17      "CLKGATE_RESERVED17"
+#define GCLK_REG_RESERVED17      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED17      (1<<28)
+
+#define GCLK_IDX_AHB_ARB0         61
+#define GCLK_NAME_AHB_ARB0      "AHB_ARB0"
+#define GCLK_DEV_AHB_ARB0      "CLKGATE_AHB_ARB0"
+#define GCLK_REG_AHB_ARB0      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_AHB_ARB0      (1<<29)
+
+#define GCLK_IDX_EFUSE         62
+#define GCLK_NAME_EFUSE      "EFUSE"
+#define GCLK_DEV_EFUSE      "CLKGATE_EFUSE"
+#define GCLK_REG_EFUSE      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_EFUSE      (1<<30)
+
+#define GCLK_IDX_ROM_CLK         63
+#define GCLK_NAME_ROM_CLK      "ROM_CLK"
+#define GCLK_DEV_ROM_CLK      "CLKGATE_ROM_CLK"
+#define GCLK_REG_ROM_CLK      (HHI_GCLK_MPEG1)
+#define GCLK_MASK_ROM_CLK      (1<<31)
+
+/**************************************************************/
+
+#define GCLK_IDX_RESERVED18         64
+#define GCLK_NAME_RESERVED18      "RESERVED18"
+#define GCLK_DEV_RESERVED18      "CLKGATE_RESERVED18"
+#define GCLK_REG_RESERVED18      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED18      (1<<0)
+
+#define GCLK_IDX_AHB_DATA_BUS         65
+#define GCLK_NAME_AHB_DATA_BUS      "AHB_DATA_BUS"
+#define GCLK_DEV_AHB_DATA_BUS      "CLKGATE_AHB_DATA_BUS"
+#define GCLK_REG_AHB_DATA_BUS      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_AHB_DATA_BUS      (1<<1)
+
+#define GCLK_IDX_AHB_CONTROL_BUS         66
+#define GCLK_NAME_AHB_CONTROL_BUS      "AHB_CONTROL_BUS"
+#define GCLK_DEV_AHB_CONTROL_BUS      "CLKGATE_AHB_CONTROL_BUS"
+#define GCLK_REG_AHB_CONTROL_BUS      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_AHB_CONTROL_BUS      (1<<2)
+
+#define GCLK_IDX_HDMI_INTR_SYNC         67
+#define GCLK_NAME_HDMI_INTR_SYNC      "HDMI_INTR_SYNC"
+#define GCLK_DEV_HDMI_INTR_SYNC      "CLKGATE_HDMI_INTR_SYNC"
+#define GCLK_REG_HDMI_INTR_SYNC      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_HDMI_INTR_SYNC      (1<<3)
+
+#define GCLK_IDX_HDMI_PCLK         68
+#define GCLK_NAME_HDMI_PCLK      "HDMI_PCLK"
+#define GCLK_DEV_HDMI_PCLK      "CLKGATE_HDMI_PCLK"
+#define GCLK_REG_HDMI_PCLK      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_HDMI_PCLK      (1<<4)
+
+#define GCLK_IDX_RESERVED19         69
+#define GCLK_NAME_RESERVED19      "RESERVED19"
+#define GCLK_DEV_RESERVED19      "CLKGATE_RESERVED19"
+#define GCLK_REG_RESERVED19      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED19      (1<<5)
+
+#define GCLK_IDX_RESERVED20         70
+#define GCLK_NAME_RESERVED20      "RESERVED20"
+#define GCLK_DEV_RESERVED20      "CLKGATE_RESERVED20"
+#define GCLK_REG_RESERVED20      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED20      (1<<6)
+
+#define GCLK_IDX_RESERVED21         71
+#define GCLK_NAME_RESERVED21      "RESERVED21"
+#define GCLK_DEV_RESERVED21      "CLKGATE_RESERVED21"
+#define GCLK_REG_RESERVED21      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED21      (1<<7)
+
+#define GCLK_IDX_MISC_USB1_TO_DDR         72
+#define GCLK_NAME_MISC_USB1_TO_DDR      "MISC_USB1_TO_DDR"
+#define GCLK_DEV_MISC_USB1_TO_DDR      "CLKGATE_MISC_USB1_TO_DDR"
+#define GCLK_REG_MISC_USB1_TO_DDR      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_MISC_USB1_TO_DDR      (1<<8)
+
+#define GCLK_IDX_MISC_USB0_TO_DDR         73
+#define GCLK_NAME_MISC_USB0_TO_DDR      "MISC_USB0_TO_DDR"
+#define GCLK_DEV_MISC_USB0_TO_DDR      "CLKGATE_MISC_USB0_TO_DDR"
+#define GCLK_REG_MISC_USB0_TO_DDR      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_MISC_USB0_TO_DDR      (1<<9)
+
+#define GCLK_IDX_AIU_PCLK        74
+#define GCLK_NAME_AIU_PCLK      "AIU_PCLK"
+#define GCLK_DEV_AIU_PCLK      "CLKGATE_AIU_PCLK"
+#define GCLK_REG_AIU_PCLK      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_AIU_PCLK      (1<<10)
+
+#define GCLK_IDX_MMC_PCLK         75
+#define GCLK_NAME_MMC_PCLK      "MMC_PCLK"
+#define GCLK_DEV_MMC_PCLK      "CLKGATE_MMC_PCLK"
+#define GCLK_REG_MMC_PCLK      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_MMC_PCLK      (1<<11)
+
+#define GCLK_IDX_MISC_DVIN         76
+#define GCLK_NAME_MISC_DVIN      "MISC_DVIN"
+#define GCLK_DEV_MISC_DVIN      "CLKGATE_MISC_DVIN"
+#define GCLK_REG_MISC_DVIN      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_MISC_DVIN      (1<<12)
+
+#define GCLK_IDX_RESERVED22         77
+#define GCLK_NAME_RESERVED22      "RESERVED22"
+#define GCLK_DEV_RESERVED22      "CLKGATE_RESERVED22"
+#define GCLK_REG_RESERVED22      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED22      (1<<13)
+
+#define GCLK_IDX_RESERVED23         78
+#define GCLK_NAME_RESERVED23      "RESERVED23"
+#define GCLK_DEV_RESERVED23      "CLKGATE_RESERVED23"
+#define GCLK_REG_RESERVED23      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED23      (1<<14)
+
+#define GCLK_IDX_UART2         79
+#define GCLK_NAME_UART2      "UART2"
+#define GCLK_DEV_UART2      "CLKGATE_UART2"
+#define GCLK_REG_UART2      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_UART2      (1<<15)
+
+#define GCLK_IDX_RESERVED24         80
+#define GCLK_NAME_RESERVED24      "RESERVED24"
+#define GCLK_DEV_RESERVED24      "CLKGATE_RESERVED24"
+#define GCLK_REG_RESERVED24      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED24      (1<<16)
+
+#define GCLK_IDX_RESERVED25         81
+#define GCLK_NAME_RESERVED25      "RESERVED25"
+#define GCLK_DEV_RESERVED25      "CLKGATE_RESERVED25"
+#define GCLK_REG_RESERVED25      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED25      (1<<17)
+
+#define GCLK_IDX_RESERVED26         82
+#define GCLK_NAME_RESERVED26      "RESERVED26"
+#define GCLK_DEV_RESERVED26      "CLKGATE_RESERVED26"
+#define GCLK_REG_RESERVED26      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED26      (1<<18)
+
+#define GCLK_IDX_RESERVED27         83
+#define GCLK_NAME_RESERVED27      "RESERVED27"
+#define GCLK_DEV_RESERVED27      "CLKGATE_RESERVED27"
+#define GCLK_REG_RESERVED27      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED27      (1<<19)
+
+#define GCLK_IDX_RESERVED28         84
+#define GCLK_NAME_RESERVED28      "RESERVED28"
+#define GCLK_DEV_RESERVED28      "CLKGATE_RESERVED28"
+#define GCLK_REG_RESERVED28      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED28      (1<<20)
+
+#define GCLK_IDX_RESERVED29         85
+#define GCLK_NAME_RESERVED29      "RESERVED29"
+#define GCLK_DEV_RESERVED29      "CLKGATE_RESERVED29"
+#define GCLK_REG_RESERVED29      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED29      (1<<21)
+
+#define GCLK_IDX_UART3        86
+#define GCLK_NAME_UART3      "UART3"
+#define GCLK_DEV_UART3      "CLKGATE_UART3"
+#define GCLK_REG_UART3      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_UART3      (1<<22)
+
+#define GCLK_IDX_RESERVED30        87
+#define GCLK_NAME_RESERVED30      "RESERVED30"
+#define GCLK_DEV_RESERVED30      "CLKGATE_RESERVED30"
+#define GCLK_REG_RESERVED30      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED30      (1<<23)
+
+#define GCLK_IDX_RESERVED31        88
+#define GCLK_NAME_RESERVED31      "RESERVED31"
+#define GCLK_DEV_RESERVED31      "CLKGATE_RESERVED31"
+#define GCLK_REG_RESERVED31      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED31      (1<<24)
+
+#define GCLK_IDX_VPU_INTR        89
+#define GCLK_NAME_VPU_INTR      "VPU_INTR"
+#define GCLK_DEV_VPU_INTR      "CLKGATE_VPU_INTR"
+#define GCLK_REG_VPU_INTR      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_VPU_INTR      (1<<25)
+
+#define GCLK_IDX_SECURE_AHP_APB3        90
+#define GCLK_NAME_SECURE_AHP_APB3      "SECURE_AHP_APB3"
+#define GCLK_DEV_SECURE_AHP_APB3      "CLKGATE_SECURE_AHP_APB3"
+#define GCLK_REG_SECURE_AHP_APB3      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_SECURE_AHP_APB3      (1<<26)
+
+#define GCLK_IDX_RESERVED32        91
+#define GCLK_NAME_RESERVED32      "RESERVED32"
+#define GCLK_DEV_RESERVED32      "CLKGATE_RESERVED32"
+#define GCLK_REG_RESERVED32      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED32      (1<<27)
+
+#define GCLK_IDX_RESERVED33        92
+#define GCLK_NAME_RESERVED33      "RESERVED33"
+#define GCLK_DEV_RESERVED33      "CLKGATE_RESERVED33"
+#define GCLK_REG_RESERVED33      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED33      (1<<28)
+
+#define GCLK_IDX_CLK81_TO_A9        93
+#define GCLK_NAME_CLK81_TO_A9      "CLK81_TO_A9"
+#define GCLK_DEV_CLK81_TO_A9      "CLKGATE_CLK81_TO_A9"
+#define GCLK_REG_CLK81_TO_A9      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_CLK81_TO_A9      (1<<29)
+
+#define GCLK_IDX_RESERVED34        94
+#define GCLK_NAME_RESERVED34      "RESERVED34"
+#define GCLK_DEV_RESERVED34      "CLKGATE_RESERVED34"
+#define GCLK_REG_RESERVED34      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED34      (1<<30)
+
+#define GCLK_IDX_RESERVED35        95
+#define GCLK_NAME_RESERVED35      "RESERVED35"
+#define GCLK_DEV_RESERVED35      "CLKGATE_RESERVED35"
+#define GCLK_REG_RESERVED35      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED35      (1<<31)
+
+/**************************************************************/
+
+#define GCLK_IDX_RESERVED36        96
+#define GCLK_NAME_RESERVED36      "RESERVED36"
+#define GCLK_DEV_RESERVED36      "CLKGATE_RESERVED36"
+#define GCLK_REG_RESERVED36      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED36      (1<<0)
+
+#define GCLK_IDX_VCLK2_VENCI         97
+#define GCLK_NAME_VCLK2_VENCI      "VCLK2_VENCI"
+#define GCLK_DEV_VCLK2_VENCI      "CLKGATE_VCLK2_VENCI"
+#define GCLK_REG_VCLK2_VENCI      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCI      (1<<1)
+
+#define GCLK_IDX_VCLK2_VENCI1         98
+#define GCLK_NAME_VCLK2_VENCI1      "VCLK2_VENCI1"
+#define GCLK_DEV_VCLK2_VENCI1      "CLKGATE_VCLK2_VENCI1"
+#define GCLK_REG_VCLK2_VENCI1      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCI1      (1<<2)
+
+#define GCLK_IDX_VCLK2_VENCP         99
+#define GCLK_NAME_VCLK2_VENCP      "VCLK2_VENCP"
+#define GCLK_DEV_VCLK2_VENCP      "CLKGATE_VCLK2_VENCP"
+#define GCLK_REG_VCLK2_VENCP      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCP      (1<<3)
+
+#define GCLK_IDX_VCLK2_VENCP1         100
+#define GCLK_NAME_VCLK2_VENCP1      "VCLK2_VENCP1"
+#define GCLK_DEV_VCLK2_VENCP1      "CLKGATE_VCLK2_VENCP1"
+#define GCLK_REG_VCLK2_VENCP1      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCP1      (1<<4)
+
+#define GCLK_IDX_VCLK2_VENCT         101
+#define GCLK_NAME_VCLK2_VENCT      "VCLK2_VENCT"
+#define GCLK_DEV_VCLK2_VENCT      "CLKGATE_VCLK2_VENCT"
+#define GCLK_REG_VCLK2_VENCT      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCT      (1<<5)
+
+#define GCLK_IDX_VCLK2_VENCT1         102
+#define GCLK_NAME_VCLK2_VENCT1      "VCLK2_VENCT1"
+#define GCLK_DEV_VCLK2_VENCT1      "CLKGATE_VCLK2_VENCT1"
+#define GCLK_REG_VCLK2_VENCT1      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCT1      (1<<6)
+
+#define GCLK_IDX_VCLK2_OTHER         103
+#define GCLK_NAME_VCLK2_OTHER      "VCLK2_OTHER"
+#define GCLK_DEV_VCLK2_OTHER      "CLKGATE_VCLK2_OTHER"
+#define GCLK_REG_VCLK2_OTHER      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_OTHER      (1<<7)
+
+#define GCLK_IDX_VCLK2_ENCI         104
+#define GCLK_NAME_VCLK2_ENCI      "VCLK2_ENCI"
+#define GCLK_DEV_VCLK2_ENCI      "CLKGATE_VCLK2_ENCI"
+#define GCLK_REG_VCLK2_ENCI      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_ENCI      (1<<8)
+
+#define GCLK_IDX_VCLK2_ENCP         105
+#define GCLK_NAME_VCLK2_ENCP      "VCLK2_ENCP"
+#define GCLK_DEV_VCLK2_ENCP      "CLKGATE_VCLK2_ENCP"
+#define GCLK_REG_VCLK2_ENCP      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_ENCP      (1<<9)
+
+#define GCLK_IDX_DAC_CLK         106
+#define GCLK_NAME_DAC_CLK      "DAC_CLK"
+#define GCLK_DEV_DAC_CLK      "CLKGATE_DAC_CLK"
+#define GCLK_REG_DAC_CLK      (HHI_GCLK_OTHER)
+#define GCLK_MASK_DAC_CLK      (1<<10)
+
+#define GCLK_IDX_RESERVED37        107
+#define GCLK_NAME_RESERVED37      "RESERVED37"
+#define GCLK_DEV_RESERVED37      "CLKGATE_RESERVED37"
+#define GCLK_REG_RESERVED37      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED37      (1<<11)
+
+#define GCLK_IDX_RESERVED38        108
+#define GCLK_NAME_RESERVED38      "RESERVED38"
+#define GCLK_DEV_RESERVED38      "CLKGATE_RESERVED38"
+#define GCLK_REG_RESERVED38      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED38      (1<<12)
+
+#define GCLK_IDX_RESERVED39        109
+#define GCLK_NAME_RESERVED39      "RESERVED39"
+#define GCLK_DEV_RESERVED39      "CLKGATE_RESERVED39"
+#define GCLK_REG_RESERVED39      (HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED39      (1<<13)
+
+#define GCLK_IDX_AIU_AOCLK         110
+#define GCLK_NAME_AIU_AOCLK      "AIU_AOCLK"
+#define GCLK_DEV_AIU_AOCLK      "CLKGATE_AIU_AOCLK"
+#define GCLK_REG_AIU_AOCLK      (HHI_GCLK_OTHER)
+#define GCLK_MASK_AIU_AOCLK      (1<<14)
+
+#define GCLK_IDX_RESERVED40         111
+#define GCLK_NAME_RESERVED40      "RESERVED40"
+#define GCLK_DEV_RESERVED40      "CLKGATE_RESERVED40"
+#define GCLK_REG_RESERVED40      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED40      (1<<15)
+
+#define GCLK_IDX_AIU_ICE958_AMCLK         112
+#define GCLK_NAME_AIU_ICE958_AMCLK      "AIU_ICE958_AMCLK"
+#define GCLK_DEV_AIU_ICE958_AMCLK      "CLKGATE_AIU_ICE958_AMCLK"
+#define GCLK_REG_AIU_ICE958_AMCLK      (HHI_GCLK_OTHER)
+#define GCLK_MASK_AIU_ICE958_AMCLK      (1<<16)
+
+#define GCLK_IDX_RESERVED41         113
+#define GCLK_NAME_RESERVED41      "RESERVED41"
+#define GCLK_DEV_RESERVED41      "CLKGATE_RESERVED41"
+#define GCLK_REG_RESERVED41      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED41      (1<<17)
+
+#define GCLK_IDX_RESERVED42         114
+#define GCLK_NAME_RESERVED42      "RESERVED42"
+#define GCLK_DEV_RESERVED42      "CLKGATE_RESERVED42"
+#define GCLK_REG_RESERVED42      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED42      (1<<18)
+
+#define GCLK_IDX_RESERVED43         115
+#define GCLK_NAME_RESERVED43      "RESERVED43"
+#define GCLK_DEV_RESERVED43      "CLKGATE_RESERVED43"
+#define GCLK_REG_RESERVED43      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED43      (1<<19)
+
+#define GCLK_IDX_ENC480P         116
+#define GCLK_NAME_ENC480P      "ENC480P"
+#define GCLK_DEV_ENC480P      "CLKGATE_ENC480P"
+#define GCLK_REG_ENC480P      (HHI_GCLK_OTHER)
+#define GCLK_MASK_ENC480P      (1<<20)
+
+#define GCLK_IDX_RANDOM_NUM_GEN1         117
+#define GCLK_NAME_RANDOM_NUM_GEN1      "RANDOM_NUM_GEN1"
+#define GCLK_DEV_RANDOM_NUM_GEN1      "CLKGATE_RANDOM_NUM_GEN1"
+#define GCLK_REG_RANDOM_NUM_GEN1      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RANDOM_NUM_GEN1      (1<<21)
+
+#define GCLK_IDX_VCLK2_ENCT         118
+#define GCLK_NAME_VCLK2_ENCT      "VCLK2_ENCT"
+#define GCLK_DEV_VCLK2_ENCT      "CLKGATE_VCLK2_ENCT"
+#define GCLK_REG_VCLK2_ENCT      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_ENCT      (1<<22)
+
+#define GCLK_IDX_VCLK2_ENCL         119
+#define GCLK_NAME_VCLK2_ENCL      "VCLK2_ENCL"
+#define GCLK_DEV_VCLK2_ENCL      "CLKGATE_VCLK2_ENCL"
+#define GCLK_REG_VCLK2_ENCL      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_ENCL      (1<<23)
+
+#define GCLK_IDX_MMC_CLK         120
+#define GCLK_NAME_MMC_CLK      "MMC_CLK"
+#define GCLK_DEV_MMC_CLK      "CLKGATE_MMC_CLK"
+#define GCLK_REG_MMC_CLK      (HHI_GCLK_OTHER)
+#define GCLK_MASK_MMC_CLK      (1<<24)
+
+#define GCLK_IDX_VCLK2_VENCL         121
+#define GCLK_NAME_VCLK2_VENCL      "VCLK2_VENCL"
+#define GCLK_DEV_VCLK2_VENCL      "CLKGATE_VCLK2_VENCL"
+#define GCLK_REG_VCLK2_VENCL      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCL      (1<<25)
+
+#define GCLK_IDX_VCLK2_OTHER1         122
+#define GCLK_NAME_VCLK2_OTHER1      "VCLK2_OTHER1"
+#define GCLK_DEV_VCLK2_OTHER1      "CLKGATE_VCLK2_OTHER1"
+#define GCLK_REG_VCLK2_OTHER1      (HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_OTHER1      (1<<26)
+
+#define GCLK_IDX_RESERVED44         123
+#define GCLK_NAME_RESERVED44      "RESERVED44"
+#define GCLK_DEV_RESERVED44      "CLKGATE_RESERVED44"
+#define GCLK_REG_RESERVED44      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED44      (1<<27)
+
+#define GCLK_IDX_RESERVED45         124
+#define GCLK_NAME_RESERVED45      "RESERVED45"
+#define GCLK_DEV_RESERVED45      "CLKGATE_RESERVED45"
+#define GCLK_REG_RESERVED45      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED45      (1<<28)
+
+#define GCLK_IDX_RESERVED46         125
+#define GCLK_NAME_RESERVED46      "RESERVED46"
+#define GCLK_DEV_RESERVED46      "CLKGATE_RESERVED46"
+#define GCLK_REG_RESERVED46      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED46      (1<<29)
+
+#define GCLK_IDX_RESERVED47         126
+#define GCLK_NAME_RESERVED47      "RESERVED47"
+#define GCLK_DEV_RESERVED47      "CLKGATE_RESERVED47"
+#define GCLK_REG_RESERVED47      (HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED47      (1<<30)
+
+#define GCLK_IDX_EDP_CLK         127
+#define GCLK_NAME_EDP_CLK      "EDP_CLK"
+#define GCLK_DEV_EDP_CLK      "CLKGATE_EDP_CLK"
+#define GCLK_REG_EDP_CLK      (HHI_GCLK_OTHER)
+#define GCLK_MASK_EDP_CLK      (1<<31)
+
+/**************************************************************/
+
+#define GCLK_IDX_MEDIA_CPU         128
+#define GCLK_NAME_MEDIA_CPU      "MEDIA_CPU"
+#define GCLK_DEV_MEDIA_CPU      "CLKGATE_MEDIA_CPU"
+#define GCLK_REG_MEDIA_CPU      (HHI_GCLK_AO)
+#define GCLK_MASK_MEDIA_CPU      (1<<0)
+
+#define GCLK_IDX_AHB_SRAM         129
+#define GCLK_NAME_AHB_SRAM      "AHB_SRAM"
+#define GCLK_DEV_AHB_SRAM      "CLKGATE_AHB_SRAM"
+#define GCLK_REG_AHB_SRAM      (HHI_GCLK_AO)
+#define GCLK_MASK_AHB_SRAM      (1<<1)
+
+#define GCLK_IDX_AHB_BUS         130
+#define GCLK_NAME_AHB_BUS      "AHB_BUS"
+#define GCLK_DEV_AHB_BUS      "CLKGATE_AHB_BUS"
+#define GCLK_REG_AHB_BUS      (HHI_GCLK_AO)
+#define GCLK_MASK_AHB_BUS      (1<<2)
+
+#define GCLK_IDX_AO_REGS         131
+#define GCLK_NAME_AO_REGS      "AO_REGS"
+#define GCLK_DEV_AO_REGS      "CLKGATE_AO_REGS"
+#define GCLK_REG_AO_REGS      (HHI_GCLK_AO)
+#define GCLK_MASK_AO_REGS      (1<<3)
+
+#define GCLK_IDX_MAX 132
+extern unsigned char GCLK_ref[GCLK_IDX_MAX];
+
+#define REGISTER_CLK(_MOD) \
+static struct clk CLK_##_MOD = {            \
+	.name       = GCLK_NAME_##_MOD,             \
+	.clock_index = GCLK_IDX_##_MOD,          \
+	.clock_gate_reg_adr = GCLK_REG_##_MOD,  \
+	.clock_gate_reg_mask = GCLK_MASK_##_MOD,    \
+}
+
+#define CLK_LOOKUP_ITEM(_MOD) \
+	{           \
+		.dev_id = GCLK_DEV_##_MOD, \
+		.con_id = GCLK_NAME_##_MOD, \
+		.clk    = &CLK_##_MOD,   \
+	}
+
+
+
+/**********************/
+/* internal audio dac control */
+#define ADAC_RESET                      (0x5000+0x00*4)
+#define ADAC_LATCH                      (0x5000+0x01*4)
+#define ADAC_POWER_CTRL_REG1            (0x5000+0x10*4)
+#define ADAC_POWER_CTRL_REG2            (0x5000+0x11*4)
+
+extern int audio_internal_dac_disable(void);
+
+/* video dac control */
+extern int  video_dac_enable(unsigned char enable_mask);
+
+extern int  video_dac_disable(void);
+
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/register.h b/arch/arm/mach-meson8b/include/mach/register.h
new file mode 100644
index 000000000000..f2a8ecef8d2d
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/register.h
@@ -0,0 +1,13978 @@
+/**
+ * This file is automaticly generated by genregs.awk. Please do not edit it 
+ * Base files are ../ucode/register.h ../ucode/dos_register.h 
+ *   ../ucode/c_always_on_pointer.h ../ucode/ddr3_reg.h 
+ *   ../ucode/dmc_reg.h 
+ *   ../ucode/c_stb_define.h ../ucode/secure_apb.h from VLSI team
+ * Sat Feb  8 16:58:10 CST 2014 
+ */
+#ifndef __MACH_MESON8_REG_ADDR_H_
+#define __MACH_MESON8_REG_ADDR_H_
+#define STB_TOP_CONFIG 0x16f0 	///../ucode/register.h:68
+#define P_STB_TOP_CONFIG 		CBUS_REG_ADDR(STB_TOP_CONFIG)
+#define TS_TOP_CONFIG 0x16f1 	///../ucode/register.h:81
+#define P_TS_TOP_CONFIG 		CBUS_REG_ADDR(TS_TOP_CONFIG)
+#define TS_FILE_CONFIG 0x16f2 	///../ucode/register.h:87
+#define P_TS_FILE_CONFIG 		CBUS_REG_ADDR(TS_FILE_CONFIG)
+#define TS_PL_PID_INDEX 0x16f3 	///../ucode/register.h:91
+#define P_TS_PL_PID_INDEX 		CBUS_REG_ADDR(TS_PL_PID_INDEX)
+#define TS_PL_PID_DATA 0x16f4 	///../ucode/register.h:94
+#define P_TS_PL_PID_DATA 		CBUS_REG_ADDR(TS_PL_PID_DATA)
+#define COMM_DESC_KEY0 0x16f5 	///../ucode/register.h:95
+#define P_COMM_DESC_KEY0 		CBUS_REG_ADDR(COMM_DESC_KEY0)
+#define COMM_DESC_KEY1 0x16f6 	///../ucode/register.h:96
+#define P_COMM_DESC_KEY1 		CBUS_REG_ADDR(COMM_DESC_KEY1)
+#define COMM_DESC_KEY_RW 0x16f7 	///../ucode/register.h:97
+#define P_COMM_DESC_KEY_RW 		CBUS_REG_ADDR(COMM_DESC_KEY_RW)
+#define CIPLUS_KEY0 0x16f8 	///../ucode/register.h:100
+#define P_CIPLUS_KEY0 		CBUS_REG_ADDR(CIPLUS_KEY0)
+#define CIPLUS_KEY1 0x16f9 	///../ucode/register.h:102
+#define P_CIPLUS_KEY1 		CBUS_REG_ADDR(CIPLUS_KEY1)
+#define CIPLUS_KEY2 0x16fa 	///../ucode/register.h:104
+#define P_CIPLUS_KEY2 		CBUS_REG_ADDR(CIPLUS_KEY2)
+#define CIPLUS_KEY3 0x16fb 	///../ucode/register.h:106
+#define P_CIPLUS_KEY3 		CBUS_REG_ADDR(CIPLUS_KEY3)
+#define CIPLUS_KEY_WR 0x16fc 	///../ucode/register.h:113
+#define P_CIPLUS_KEY_WR 		CBUS_REG_ADDR(CIPLUS_KEY_WR)
+#define CIPLUS_CONFIG 0x16fd 	///../ucode/register.h:119
+#define P_CIPLUS_CONFIG 		CBUS_REG_ADDR(CIPLUS_CONFIG)
+#define CIPLUS_ENDIAN 0x16fe 	///../ucode/register.h:128
+#define P_CIPLUS_ENDIAN 		CBUS_REG_ADDR(CIPLUS_ENDIAN)
+#define PREG_CTLREG0_ADDR 0x2000 	///../ucode/register.h:366
+#define P_PREG_CTLREG0_ADDR 		CBUS_REG_ADDR(PREG_CTLREG0_ADDR)
+#define PREG_PAD_GPIO6_EN_N 0x2008 	///../ucode/register.h:368
+#define P_PREG_PAD_GPIO6_EN_N 		CBUS_REG_ADDR(PREG_PAD_GPIO6_EN_N)
+#define PREG_PAD_GPIO6_O 0x2009 	///../ucode/register.h:369
+#define P_PREG_PAD_GPIO6_O 		CBUS_REG_ADDR(PREG_PAD_GPIO6_O)
+#define PREG_PAD_GPIO6_I 0x200a 	///../ucode/register.h:370
+#define P_PREG_PAD_GPIO6_I 		CBUS_REG_ADDR(PREG_PAD_GPIO6_I)
+#define PREG_JTAG_GPIO_ADDR 0x200b 	///../ucode/register.h:373
+#define P_PREG_JTAG_GPIO_ADDR 		CBUS_REG_ADDR(PREG_JTAG_GPIO_ADDR)
+#define PREG_PAD_GPIO0_EN_N 0x200c 	///../ucode/register.h:377
+#define P_PREG_PAD_GPIO0_EN_N 		CBUS_REG_ADDR(PREG_PAD_GPIO0_EN_N)
+#define PREG_PAD_GPIO0_O 0x200d 	///../ucode/register.h:378
+#define P_PREG_PAD_GPIO0_O 		CBUS_REG_ADDR(PREG_PAD_GPIO0_O)
+#define PREG_PAD_GPIO0_I 0x200e 	///../ucode/register.h:379
+#define P_PREG_PAD_GPIO0_I 		CBUS_REG_ADDR(PREG_PAD_GPIO0_I)
+#define PREG_PAD_GPIO1_EN_N 0x200f 	///../ucode/register.h:381
+#define P_PREG_PAD_GPIO1_EN_N 		CBUS_REG_ADDR(PREG_PAD_GPIO1_EN_N)
+#define PREG_PAD_GPIO1_O 0x2010 	///../ucode/register.h:382
+#define P_PREG_PAD_GPIO1_O 		CBUS_REG_ADDR(PREG_PAD_GPIO1_O)
+#define PREG_PAD_GPIO1_I 0x2011 	///../ucode/register.h:383
+#define P_PREG_PAD_GPIO1_I 		CBUS_REG_ADDR(PREG_PAD_GPIO1_I)
+#define PREG_PAD_GPIO2_EN_N 0x2012 	///../ucode/register.h:385
+#define P_PREG_PAD_GPIO2_EN_N 		CBUS_REG_ADDR(PREG_PAD_GPIO2_EN_N)
+#define PREG_PAD_GPIO2_O 0x2013 	///../ucode/register.h:386
+#define P_PREG_PAD_GPIO2_O 		CBUS_REG_ADDR(PREG_PAD_GPIO2_O)
+#define PREG_PAD_GPIO2_I 0x2014 	///../ucode/register.h:387
+#define P_PREG_PAD_GPIO2_I 		CBUS_REG_ADDR(PREG_PAD_GPIO2_I)
+#define PREG_PAD_GPIO3_EN_N 0x2015 	///../ucode/register.h:389
+#define P_PREG_PAD_GPIO3_EN_N 		CBUS_REG_ADDR(PREG_PAD_GPIO3_EN_N)
+#define PREG_PAD_GPIO3_O 0x2016 	///../ucode/register.h:390
+#define P_PREG_PAD_GPIO3_O 		CBUS_REG_ADDR(PREG_PAD_GPIO3_O)
+#define PREG_PAD_GPIO3_I 0x2017 	///../ucode/register.h:391
+#define P_PREG_PAD_GPIO3_I 		CBUS_REG_ADDR(PREG_PAD_GPIO3_I)
+#define PREG_PAD_GPIO4_EN_N 0x2018 	///../ucode/register.h:393
+#define P_PREG_PAD_GPIO4_EN_N 		CBUS_REG_ADDR(PREG_PAD_GPIO4_EN_N)
+#define PREG_PAD_GPIO4_O 0x2019 	///../ucode/register.h:394
+#define P_PREG_PAD_GPIO4_O 		CBUS_REG_ADDR(PREG_PAD_GPIO4_O)
+#define PREG_PAD_GPIO4_I 0x201a 	///../ucode/register.h:395
+#define P_PREG_PAD_GPIO4_I 		CBUS_REG_ADDR(PREG_PAD_GPIO4_I)
+#define PREG_PAD_GPIO5_EN_N 0x201b 	///../ucode/register.h:397
+#define P_PREG_PAD_GPIO5_EN_N 		CBUS_REG_ADDR(PREG_PAD_GPIO5_EN_N)
+#define PREG_PAD_GPIO5_O 0x201c 	///../ucode/register.h:398
+#define P_PREG_PAD_GPIO5_O 		CBUS_REG_ADDR(PREG_PAD_GPIO5_O)
+#define PREG_PAD_GPIO5_I 0x201d 	///../ucode/register.h:399
+#define P_PREG_PAD_GPIO5_I 		CBUS_REG_ADDR(PREG_PAD_GPIO5_I)
+#define A9_STATUS1 0x201f 	///../ucode/register.h:403
+#define P_A9_STATUS1 		CBUS_REG_ADDR(A9_STATUS1)
+#define A9_CFG0 0x2020 	///../ucode/register.h:404
+#define P_A9_CFG0 		CBUS_REG_ADDR(A9_CFG0)
+#define A9_CFG1 0x2021 	///../ucode/register.h:405
+#define P_A9_CFG1 		CBUS_REG_ADDR(A9_CFG1)
+#define A9_CFG2 0x2022 	///../ucode/register.h:406
+#define P_A9_CFG2 		CBUS_REG_ADDR(A9_CFG2)
+#define A9_PERIPH_BASE 0x2023 	///../ucode/register.h:407
+#define P_A9_PERIPH_BASE 		CBUS_REG_ADDR(A9_PERIPH_BASE)
+#define A9_L2_REG_BASE 0x2024 	///../ucode/register.h:408
+#define P_A9_L2_REG_BASE 		CBUS_REG_ADDR(A9_L2_REG_BASE)
+#define A9_L2_STATUS 0x2025 	///../ucode/register.h:409
+#define P_A9_L2_STATUS 		CBUS_REG_ADDR(A9_L2_STATUS)
+#define A9_POR_CFG 0x2026 	///../ucode/register.h:410
+#define P_A9_POR_CFG 		CBUS_REG_ADDR(A9_POR_CFG)
+#define A9_STATUS2 0x2027 	///../ucode/register.h:411
+#define P_A9_STATUS2 		CBUS_REG_ADDR(A9_STATUS2)
+#define AXI_REG_EN 0x2028 	///../ucode/register.h:412
+#define P_AXI_REG_EN 		CBUS_REG_ADDR(AXI_REG_EN)
+#define A9_CFG3 0x2029 	///../ucode/register.h:413
+#define P_A9_CFG3 		CBUS_REG_ADDR(A9_CFG3)
+#define A9_CFG4 0x202a 	///../ucode/register.h:414
+#define P_A9_CFG4 		CBUS_REG_ADDR(A9_CFG4)
+#define A9_STATUS3 0x202b 	///../ucode/register.h:415
+#define P_A9_STATUS3 		CBUS_REG_ADDR(A9_STATUS3)
+#define PERIPHS_PIN_MUX_0 0x202c 	///../ucode/register.h:419
+#define P_PERIPHS_PIN_MUX_0 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_0)
+#define PERIPHS_PIN_MUX_1 0x202d 	///../ucode/register.h:420
+#define P_PERIPHS_PIN_MUX_1 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_1)
+#define PERIPHS_PIN_MUX_2 0x202e 	///../ucode/register.h:421
+#define P_PERIPHS_PIN_MUX_2 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_2)
+#define PERIPHS_PIN_MUX_3 0x202f 	///../ucode/register.h:422
+#define P_PERIPHS_PIN_MUX_3 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_3)
+#define PERIPHS_PIN_MUX_4 0x2030 	///../ucode/register.h:423
+#define P_PERIPHS_PIN_MUX_4 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_4)
+#define PERIPHS_PIN_MUX_5 0x2031 	///../ucode/register.h:424
+#define P_PERIPHS_PIN_MUX_5 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_5)
+#define PERIPHS_PIN_MUX_6 0x2032 	///../ucode/register.h:425
+#define P_PERIPHS_PIN_MUX_6 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_6)
+#define PERIPHS_PIN_MUX_7 0x2033 	///../ucode/register.h:426
+#define P_PERIPHS_PIN_MUX_7 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_7)
+#define PERIPHS_PIN_MUX_8 0x2034 	///../ucode/register.h:427
+#define P_PERIPHS_PIN_MUX_8 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_8)
+#define PERIPHS_PIN_MUX_9 0x2035 	///../ucode/register.h:428
+#define P_PERIPHS_PIN_MUX_9 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_9)
+#define PERIPHS_PIN_MUX_10 0x2036 	///../ucode/register.h:429
+#define P_PERIPHS_PIN_MUX_10 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_10)
+#define PERIPHS_PIN_MUX_11 0x2037 	///../ucode/register.h:430
+#define P_PERIPHS_PIN_MUX_11 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_11)
+#define PERIPHS_PIN_MUX_12 0x2038 	///../ucode/register.h:431
+#define P_PERIPHS_PIN_MUX_12 		CBUS_REG_ADDR(PERIPHS_PIN_MUX_12)
+#define PAD_PULL_UP_REG6 0x2039 	///../ucode/register.h:435
+#define P_PAD_PULL_UP_REG6 		CBUS_REG_ADDR(PAD_PULL_UP_REG6)
+#define PAD_PULL_UP_REG0 0x203a 	///../ucode/register.h:436
+#define P_PAD_PULL_UP_REG0 		CBUS_REG_ADDR(PAD_PULL_UP_REG0)
+#define PAD_PULL_UP_REG1 0x203b 	///../ucode/register.h:437
+#define P_PAD_PULL_UP_REG1 		CBUS_REG_ADDR(PAD_PULL_UP_REG1)
+#define PAD_PULL_UP_REG2 0x203c 	///../ucode/register.h:438
+#define P_PAD_PULL_UP_REG2 		CBUS_REG_ADDR(PAD_PULL_UP_REG2)
+#define PAD_PULL_UP_REG3 0x203d 	///../ucode/register.h:439
+#define P_PAD_PULL_UP_REG3 		CBUS_REG_ADDR(PAD_PULL_UP_REG3)
+#define PAD_PULL_UP_REG4 0x203e 	///../ucode/register.h:440
+#define P_PAD_PULL_UP_REG4 		CBUS_REG_ADDR(PAD_PULL_UP_REG4)
+#define PAD_PULL_UP_REG5 0x203f 	///../ucode/register.h:441
+#define P_PAD_PULL_UP_REG5 		CBUS_REG_ADDR(PAD_PULL_UP_REG5)
+#define RAND64_ADDR0 0x2040 	///../ucode/register.h:445
+#define P_RAND64_ADDR0 		CBUS_REG_ADDR(RAND64_ADDR0)
+#define RAND64_ADDR1 0x2041 	///../ucode/register.h:446
+#define P_RAND64_ADDR1 		CBUS_REG_ADDR(RAND64_ADDR1)
+#define PREG_ETHERNET_ADDR0 0x2042 	///../ucode/register.h:450
+#define P_PREG_ETHERNET_ADDR0 		CBUS_REG_ADDR(PREG_ETHERNET_ADDR0)
+#define PREG_AM_ANALOG_ADDR 0x2043 	///../ucode/register.h:454
+#define P_PREG_AM_ANALOG_ADDR 		CBUS_REG_ADDR(PREG_AM_ANALOG_ADDR)
+#define PREG_MALI_BYTE_CNTL 0x2044 	///../ucode/register.h:458
+#define P_PREG_MALI_BYTE_CNTL 		CBUS_REG_ADDR(PREG_MALI_BYTE_CNTL)
+#define PREG_WIFI_CNTL 0x2045 	///../ucode/register.h:462
+#define P_PREG_WIFI_CNTL 		CBUS_REG_ADDR(PREG_WIFI_CNTL)
+#define PAD_PULL_UP_EN_REG0 0x2048 	///../ucode/register.h:463
+#define P_PAD_PULL_UP_EN_REG0 		CBUS_REG_ADDR(PAD_PULL_UP_EN_REG0)
+#define PAD_PULL_UP_EN_REG1 0x2049 	///../ucode/register.h:464
+#define P_PAD_PULL_UP_EN_REG1 		CBUS_REG_ADDR(PAD_PULL_UP_EN_REG1)
+#define PAD_PULL_UP_EN_REG2 0x204a 	///../ucode/register.h:465
+#define P_PAD_PULL_UP_EN_REG2 		CBUS_REG_ADDR(PAD_PULL_UP_EN_REG2)
+#define PAD_PULL_UP_EN_REG3 0x204b 	///../ucode/register.h:466
+#define P_PAD_PULL_UP_EN_REG3 		CBUS_REG_ADDR(PAD_PULL_UP_EN_REG3)
+#define PAD_PULL_UP_EN_REG4 0x204c 	///../ucode/register.h:467
+#define P_PAD_PULL_UP_EN_REG4 		CBUS_REG_ADDR(PAD_PULL_UP_EN_REG4)
+#define PAD_PULL_UP_EN_REG5 0x204d 	///../ucode/register.h:468
+#define P_PAD_PULL_UP_EN_REG5 		CBUS_REG_ADDR(PAD_PULL_UP_EN_REG5)
+#define PAD_PULL_UP_EN_REG6 0x204e 	///../ucode/register.h:469
+#define P_PAD_PULL_UP_EN_REG6 		CBUS_REG_ADDR(PAD_PULL_UP_EN_REG6)
+#define PREG_ETH_REG0 0x2050 	///../ucode/register.h:473
+#define P_PREG_ETH_REG0 		CBUS_REG_ADDR(PREG_ETH_REG0)
+#define PREG_ETH_REG1 0x2051 	///../ucode/register.h:474
+#define P_PREG_ETH_REG1 		CBUS_REG_ADDR(PREG_ETH_REG1)
+#define PROD_TEST_REG0 0x2068 	///../ucode/register.h:482
+#define P_PROD_TEST_REG0 		CBUS_REG_ADDR(PROD_TEST_REG0)
+#define PROD_TEST_REG1 0x2067 	///../ucode/register.h:483
+#define P_PROD_TEST_REG1 		CBUS_REG_ADDR(PROD_TEST_REG1)
+#define METAL_REVISION 0x206a 	///../ucode/register.h:487
+#define P_METAL_REVISION 		CBUS_REG_ADDR(METAL_REVISION)
+#define ADC_TOP_MISC 0x206b 	///../ucode/register.h:488
+#define P_ADC_TOP_MISC 		CBUS_REG_ADDR(ADC_TOP_MISC)
+#define DPLL_TOP_MISC 0x206c 	///../ucode/register.h:489
+#define P_DPLL_TOP_MISC 		CBUS_REG_ADDR(DPLL_TOP_MISC)
+#define ANALOG_TOP_MISC 0x206d 	///../ucode/register.h:490
+#define P_ANALOG_TOP_MISC 		CBUS_REG_ADDR(ANALOG_TOP_MISC)
+#define AM_ANALOG_TOP_REG0 0x206e 	///../ucode/register.h:491
+#define P_AM_ANALOG_TOP_REG0 		CBUS_REG_ADDR(AM_ANALOG_TOP_REG0)
+#define AM_ANALOG_TOP_REG1 0x206f 	///../ucode/register.h:492
+#define P_AM_ANALOG_TOP_REG1 		CBUS_REG_ADDR(AM_ANALOG_TOP_REG1)
+#define PREG_STICKY_REG0 0x207c 	///../ucode/register.h:496
+#define P_PREG_STICKY_REG0 		CBUS_REG_ADDR(PREG_STICKY_REG0)
+#define PREG_STICKY_REG1 0x207d 	///../ucode/register.h:497
+#define P_PREG_STICKY_REG1 		CBUS_REG_ADDR(PREG_STICKY_REG1)
+#define PREG_WRITE_ONCE_REG 0x207e 	///../ucode/register.h:498
+#define P_PREG_WRITE_ONCE_REG 		CBUS_REG_ADDR(PREG_WRITE_ONCE_REG)
+#define AM_RING_OSC_REG0 0x207f 	///../ucode/register.h:502
+#define P_AM_RING_OSC_REG0 		CBUS_REG_ADDR(AM_RING_OSC_REG0)
+#define SMARTCARD_REG0 0x2110 	///../ucode/register.h:532
+#define P_SMARTCARD_REG0 		CBUS_REG_ADDR(SMARTCARD_REG0)
+#define SMARTCARD_REG1 0x2111 	///../ucode/register.h:533
+#define P_SMARTCARD_REG1 		CBUS_REG_ADDR(SMARTCARD_REG1)
+#define SMARTCARD_REG2 0x2112 	///../ucode/register.h:534
+#define P_SMARTCARD_REG2 		CBUS_REG_ADDR(SMARTCARD_REG2)
+#define SMARTCARD_STATUS 0x2113 	///../ucode/register.h:535
+#define P_SMARTCARD_STATUS 		CBUS_REG_ADDR(SMARTCARD_STATUS)
+#define SMARTCARD_INTR 0x2114 	///../ucode/register.h:536
+#define P_SMARTCARD_INTR 		CBUS_REG_ADDR(SMARTCARD_INTR)
+#define SMARTCARD_REG5 0x2115 	///../ucode/register.h:537
+#define P_SMARTCARD_REG5 		CBUS_REG_ADDR(SMARTCARD_REG5)
+#define SMARTCARD_REG6 0x2116 	///../ucode/register.h:538
+#define P_SMARTCARD_REG6 		CBUS_REG_ADDR(SMARTCARD_REG6)
+#define SMARTCARD_FIFO 0x2117 	///../ucode/register.h:539
+#define P_SMARTCARD_FIFO 		CBUS_REG_ADDR(SMARTCARD_FIFO)
+#define SMARTCARD_REG8 0x2118 	///../ucode/register.h:540
+#define P_SMARTCARD_REG8 		CBUS_REG_ADDR(SMARTCARD_REG8)
+#define IR_DEC_LDR_ACTIVE 0x2120 	///../ucode/register.h:544
+#define P_IR_DEC_LDR_ACTIVE 		CBUS_REG_ADDR(IR_DEC_LDR_ACTIVE)
+#define IR_DEC_LDR_IDLE 0x2121 	///../ucode/register.h:545
+#define P_IR_DEC_LDR_IDLE 		CBUS_REG_ADDR(IR_DEC_LDR_IDLE)
+#define IR_DEC_LDR_REPEAT 0x2122 	///../ucode/register.h:546
+#define P_IR_DEC_LDR_REPEAT 		CBUS_REG_ADDR(IR_DEC_LDR_REPEAT)
+#define IR_DEC_BIT_0 0x2123 	///../ucode/register.h:547
+#define P_IR_DEC_BIT_0 		CBUS_REG_ADDR(IR_DEC_BIT_0)
+#define IR_DEC_REG0 0x2124 	///../ucode/register.h:548
+#define P_IR_DEC_REG0 		CBUS_REG_ADDR(IR_DEC_REG0)
+#define IR_DEC_FRAME 0x2125 	///../ucode/register.h:549
+#define P_IR_DEC_FRAME 		CBUS_REG_ADDR(IR_DEC_FRAME)
+#define IR_DEC_STATUS 0x2126 	///../ucode/register.h:550
+#define P_IR_DEC_STATUS 		CBUS_REG_ADDR(IR_DEC_STATUS)
+#define IR_DEC_REG1 0x2127 	///../ucode/register.h:551
+#define P_IR_DEC_REG1 		CBUS_REG_ADDR(IR_DEC_REG1)
+#define DEMOD_ADC_SAMPLING 0x212d 	///../ucode/register.h:555
+#define P_DEMOD_ADC_SAMPLING 		CBUS_REG_ADDR(DEMOD_ADC_SAMPLING)
+#define UART0_WFIFO 0x2130 	///../ucode/register.h:564
+#define P_UART0_WFIFO 		CBUS_REG_ADDR(UART0_WFIFO)
+#define UART0_RFIFO 0x2131 	///../ucode/register.h:565
+#define P_UART0_RFIFO 		CBUS_REG_ADDR(UART0_RFIFO)
+#define UART0_CONTROL 0x2132 	///../ucode/register.h:566
+#define P_UART0_CONTROL 		CBUS_REG_ADDR(UART0_CONTROL)
+#define UART0_STATUS 0x2133 	///../ucode/register.h:567
+#define P_UART0_STATUS 		CBUS_REG_ADDR(UART0_STATUS)
+#define UART0_MISC 0x2134 	///../ucode/register.h:568
+#define P_UART0_MISC 		CBUS_REG_ADDR(UART0_MISC)
+#define UART0_REG5 0x2135 	///../ucode/register.h:569
+#define P_UART0_REG5 		CBUS_REG_ADDR(UART0_REG5)
+#define UART1_WFIFO 0x2137 	///../ucode/register.h:573
+#define P_UART1_WFIFO 		CBUS_REG_ADDR(UART1_WFIFO)
+#define UART1_RFIFO 0x2138 	///../ucode/register.h:574
+#define P_UART1_RFIFO 		CBUS_REG_ADDR(UART1_RFIFO)
+#define UART1_CONTROL 0x2139 	///../ucode/register.h:575
+#define P_UART1_CONTROL 		CBUS_REG_ADDR(UART1_CONTROL)
+#define UART1_STATUS 0x213a 	///../ucode/register.h:576
+#define P_UART1_STATUS 		CBUS_REG_ADDR(UART1_STATUS)
+#define UART1_MISC 0x213b 	///../ucode/register.h:577
+#define P_UART1_MISC 		CBUS_REG_ADDR(UART1_MISC)
+#define UART1_REG5 0x213c 	///../ucode/register.h:578
+#define P_UART1_REG5 		CBUS_REG_ADDR(UART1_REG5)
+#define I2C_M_0_CONTROL_REG 0x2140 	///../ucode/register.h:582
+#define P_I2C_M_0_CONTROL_REG 		CBUS_REG_ADDR(I2C_M_0_CONTROL_REG)
+#define I2C_M_0_SLAVE_ADDR 0x2141 	///../ucode/register.h:598
+#define P_I2C_M_0_SLAVE_ADDR 		CBUS_REG_ADDR(I2C_M_0_SLAVE_ADDR)
+#define I2C_M_0_TOKEN_LIST0 0x2142 	///../ucode/register.h:599
+#define P_I2C_M_0_TOKEN_LIST0 		CBUS_REG_ADDR(I2C_M_0_TOKEN_LIST0)
+#define I2C_M_0_TOKEN_LIST1 0x2143 	///../ucode/register.h:600
+#define P_I2C_M_0_TOKEN_LIST1 		CBUS_REG_ADDR(I2C_M_0_TOKEN_LIST1)
+#define I2C_M_0_WDATA_REG0 0x2144 	///../ucode/register.h:601
+#define P_I2C_M_0_WDATA_REG0 		CBUS_REG_ADDR(I2C_M_0_WDATA_REG0)
+#define I2C_M_0_WDATA_REG1 0x2145 	///../ucode/register.h:602
+#define P_I2C_M_0_WDATA_REG1 		CBUS_REG_ADDR(I2C_M_0_WDATA_REG1)
+#define I2C_M_0_RDATA_REG0 0x2146 	///../ucode/register.h:603
+#define P_I2C_M_0_RDATA_REG0 		CBUS_REG_ADDR(I2C_M_0_RDATA_REG0)
+#define I2C_M_0_RDATA_REG1 0x2147 	///../ucode/register.h:604
+#define P_I2C_M_0_RDATA_REG1 		CBUS_REG_ADDR(I2C_M_0_RDATA_REG1)
+#define I2C_S_CONTROL_REG 0x2150 	///../ucode/register.h:608
+#define P_I2C_S_CONTROL_REG 		CBUS_REG_ADDR(I2C_S_CONTROL_REG)
+#define I2C_S_SEND_REG 0x2151 	///../ucode/register.h:609
+#define P_I2C_S_SEND_REG 		CBUS_REG_ADDR(I2C_S_SEND_REG)
+#define I2C_S_RECV_REG 0x2152 	///../ucode/register.h:610
+#define P_I2C_S_RECV_REG 		CBUS_REG_ADDR(I2C_S_RECV_REG)
+#define I2C_S_CNTL1_REG 0x2153 	///../ucode/register.h:611
+#define P_I2C_S_CNTL1_REG 		CBUS_REG_ADDR(I2C_S_CNTL1_REG)
+#define PWM_PWM_A 0x2154 	///../ucode/register.h:615
+#define P_PWM_PWM_A 		CBUS_REG_ADDR(PWM_PWM_A)
+#define PWM_PWM_B 0x2155 	///../ucode/register.h:616
+#define P_PWM_PWM_B 		CBUS_REG_ADDR(PWM_PWM_B)
+#define PWM_MISC_REG_AB 0x2156 	///../ucode/register.h:617
+#define P_PWM_MISC_REG_AB 		CBUS_REG_ADDR(PWM_MISC_REG_AB)
+#define PWM_DELTA_SIGMA_AB 0x2157 	///../ucode/register.h:618
+#define P_PWM_DELTA_SIGMA_AB 		CBUS_REG_ADDR(PWM_DELTA_SIGMA_AB)
+#define ATAPI_IDEREG0 0x2160 	///../ucode/register.h:632
+#define P_ATAPI_IDEREG0 		CBUS_REG_ADDR(ATAPI_IDEREG0)
+#define ATAPI_IDEREG1 0x2161 	///../ucode/register.h:645
+#define P_ATAPI_IDEREG1 		CBUS_REG_ADDR(ATAPI_IDEREG1)
+#define ATAPI_IDEREG2 0x2162 	///../ucode/register.h:646
+#define P_ATAPI_IDEREG2 		CBUS_REG_ADDR(ATAPI_IDEREG2)
+#define ATAPI_CYCTIME 0x2163 	///../ucode/register.h:649
+#define P_ATAPI_CYCTIME 		CBUS_REG_ADDR(ATAPI_CYCTIME)
+#define ATAPI_IDETIME 0x2164 	///../ucode/register.h:650
+#define P_ATAPI_IDETIME 		CBUS_REG_ADDR(ATAPI_IDETIME)
+#define ATAPI_PIO_TIMING 0x2165 	///../ucode/register.h:651
+#define P_ATAPI_PIO_TIMING 		CBUS_REG_ADDR(ATAPI_PIO_TIMING)
+#define ATAPI_TABLE_ADD_REG 0x2166 	///../ucode/register.h:652
+#define P_ATAPI_TABLE_ADD_REG 		CBUS_REG_ADDR(ATAPI_TABLE_ADD_REG)
+#define ATAPI_IDEREG3 0x2167 	///../ucode/register.h:653
+#define P_ATAPI_IDEREG3 		CBUS_REG_ADDR(ATAPI_IDEREG3)
+#define ATAPI_UDMA_REG0 0x2168 	///../ucode/register.h:654
+#define P_ATAPI_UDMA_REG0 		CBUS_REG_ADDR(ATAPI_UDMA_REG0)
+#define ATAPI_UDMA_REG1 0x2169 	///../ucode/register.h:655
+#define P_ATAPI_UDMA_REG1 		CBUS_REG_ADDR(ATAPI_UDMA_REG1)
+#define TRANS_PWMA_REG0 0x2170 	///../ucode/register.h:657
+#define P_TRANS_PWMA_REG0 		CBUS_REG_ADDR(TRANS_PWMA_REG0)
+#define TRANS_PWMA_REG1 0x2171 	///../ucode/register.h:658
+#define P_TRANS_PWMA_REG1 		CBUS_REG_ADDR(TRANS_PWMA_REG1)
+#define TRANS_PWMA_MUX0 0x2172 	///../ucode/register.h:659
+#define P_TRANS_PWMA_MUX0 		CBUS_REG_ADDR(TRANS_PWMA_MUX0)
+#define TRANS_PWMA_MUX1 0x2173 	///../ucode/register.h:660
+#define P_TRANS_PWMA_MUX1 		CBUS_REG_ADDR(TRANS_PWMA_MUX1)
+#define TRANS_PWMA_MUX2 0x2174 	///../ucode/register.h:661
+#define P_TRANS_PWMA_MUX2 		CBUS_REG_ADDR(TRANS_PWMA_MUX2)
+#define TRANS_PWMA_MUX3 0x2175 	///../ucode/register.h:662
+#define P_TRANS_PWMA_MUX3 		CBUS_REG_ADDR(TRANS_PWMA_MUX3)
+#define TRANS_PWMA_MUX4 0x2176 	///../ucode/register.h:663
+#define P_TRANS_PWMA_MUX4 		CBUS_REG_ADDR(TRANS_PWMA_MUX4)
+#define TRANS_PWMA_MUX5 0x2177 	///../ucode/register.h:664
+#define P_TRANS_PWMA_MUX5 		CBUS_REG_ADDR(TRANS_PWMA_MUX5)
+#define TRANS_PWMB_REG0 0x2178 	///../ucode/register.h:665
+#define P_TRANS_PWMB_REG0 		CBUS_REG_ADDR(TRANS_PWMB_REG0)
+#define TRANS_PWMB_REG1 0x2179 	///../ucode/register.h:666
+#define P_TRANS_PWMB_REG1 		CBUS_REG_ADDR(TRANS_PWMB_REG1)
+#define TRANS_PWMB_MUX0 0x217a 	///../ucode/register.h:667
+#define P_TRANS_PWMB_MUX0 		CBUS_REG_ADDR(TRANS_PWMB_MUX0)
+#define TRANS_PWMB_MUX1 0x217b 	///../ucode/register.h:668
+#define P_TRANS_PWMB_MUX1 		CBUS_REG_ADDR(TRANS_PWMB_MUX1)
+#define TRANS_PWMB_MUX2 0x217c 	///../ucode/register.h:669
+#define P_TRANS_PWMB_MUX2 		CBUS_REG_ADDR(TRANS_PWMB_MUX2)
+#define TRANS_PWMB_MUX3 0x217d 	///../ucode/register.h:670
+#define P_TRANS_PWMB_MUX3 		CBUS_REG_ADDR(TRANS_PWMB_MUX3)
+#define TRANS_PWMB_MUX4 0x217e 	///../ucode/register.h:671
+#define P_TRANS_PWMB_MUX4 		CBUS_REG_ADDR(TRANS_PWMB_MUX4)
+#define TRANS_PWMB_MUX5 0x217f 	///../ucode/register.h:672
+#define P_TRANS_PWMB_MUX5 		CBUS_REG_ADDR(TRANS_PWMB_MUX5)
+#define NAND_START 0x2180 	///../ucode/register.h:676
+#define P_NAND_START 		CBUS_REG_ADDR(NAND_START)
+#define NAND_ADR_CMD 0x218a 	///../ucode/register.h:677
+#define P_NAND_ADR_CMD 		CBUS_REG_ADDR(NAND_ADR_CMD)
+#define NAND_ADR_STS 0x218b 	///../ucode/register.h:678
+#define P_NAND_ADR_STS 		CBUS_REG_ADDR(NAND_ADR_STS)
+#define NAND_END 0x218f 	///../ucode/register.h:679
+#define P_NAND_END 		CBUS_REG_ADDR(NAND_END)
+#define PWM_PWM_C 0x2194 	///../ucode/register.h:683
+#define P_PWM_PWM_C 		CBUS_REG_ADDR(PWM_PWM_C)
+#define PWM_PWM_D 0x2195 	///../ucode/register.h:684
+#define P_PWM_PWM_D 		CBUS_REG_ADDR(PWM_PWM_D)
+#define PWM_MISC_REG_CD 0x2196 	///../ucode/register.h:685
+#define P_PWM_MISC_REG_CD 		CBUS_REG_ADDR(PWM_MISC_REG_CD)
+#define PWM_DELTA_SIGMA_CD 0x2197 	///../ucode/register.h:686
+#define P_PWM_DELTA_SIGMA_CD 		CBUS_REG_ADDR(PWM_DELTA_SIGMA_CD)
+#define ISP_LED_CTRL 0x2198 	///../ucode/register.h:703
+#define P_ISP_LED_CTRL 		CBUS_REG_ADDR(ISP_LED_CTRL)
+#define ISP_LED_TIMING1 0x2199 	///../ucode/register.h:707
+#define P_ISP_LED_TIMING1 		CBUS_REG_ADDR(ISP_LED_TIMING1)
+#define ISP_LED_TIMING2 0x219a 	///../ucode/register.h:711
+#define P_ISP_LED_TIMING2 		CBUS_REG_ADDR(ISP_LED_TIMING2)
+#define ISP_LED_TIMING3 0x219b 	///../ucode/register.h:714
+#define P_ISP_LED_TIMING3 		CBUS_REG_ADDR(ISP_LED_TIMING3)
+#define ISP_LED_TIMING4 0x219c 	///../ucode/register.h:716
+#define P_ISP_LED_TIMING4 		CBUS_REG_ADDR(ISP_LED_TIMING4)
+#define ISP_LED_TIMING5 0x219d 	///../ucode/register.h:719
+#define P_ISP_LED_TIMING5 		CBUS_REG_ADDR(ISP_LED_TIMING5)
+#define ISP_LED_TIMING6 0x219e 	///../ucode/register.h:722
+#define P_ISP_LED_TIMING6 		CBUS_REG_ADDR(ISP_LED_TIMING6)
+#define SAR_ADC_REG0 0x21a0 	///../ucode/register.h:726
+#define P_SAR_ADC_REG0 		CBUS_REG_ADDR(SAR_ADC_REG0)
+#define SAR_ADC_CHAN_LIST 0x21a1 	///../ucode/register.h:727
+#define P_SAR_ADC_CHAN_LIST 		CBUS_REG_ADDR(SAR_ADC_CHAN_LIST)
+#define SAR_ADC_AVG_CNTL 0x21a2 	///../ucode/register.h:728
+#define P_SAR_ADC_AVG_CNTL 		CBUS_REG_ADDR(SAR_ADC_AVG_CNTL)
+#define SAR_ADC_REG3 0x21a3 	///../ucode/register.h:729
+#define P_SAR_ADC_REG3 		CBUS_REG_ADDR(SAR_ADC_REG3)
+#define SAR_ADC_DELAY 0x21a4 	///../ucode/register.h:730
+#define P_SAR_ADC_DELAY 		CBUS_REG_ADDR(SAR_ADC_DELAY)
+#define SAR_ADC_LAST_RD 0x21a5 	///../ucode/register.h:731
+#define P_SAR_ADC_LAST_RD 		CBUS_REG_ADDR(SAR_ADC_LAST_RD)
+#define SAR_ADC_FIFO_RD 0x21a6 	///../ucode/register.h:732
+#define P_SAR_ADC_FIFO_RD 		CBUS_REG_ADDR(SAR_ADC_FIFO_RD)
+#define SAR_ADC_AUX_SW 0x21a7 	///../ucode/register.h:733
+#define P_SAR_ADC_AUX_SW 		CBUS_REG_ADDR(SAR_ADC_AUX_SW)
+#define SAR_ADC_CHAN_10_SW 0x21a8 	///../ucode/register.h:734
+#define P_SAR_ADC_CHAN_10_SW 		CBUS_REG_ADDR(SAR_ADC_CHAN_10_SW)
+#define SAR_ADC_DETECT_IDLE_SW 0x21a9 	///../ucode/register.h:735
+#define P_SAR_ADC_DETECT_IDLE_SW 		CBUS_REG_ADDR(SAR_ADC_DETECT_IDLE_SW)
+#define SAR_ADC_DELTA_10 0x21aa 	///../ucode/register.h:736
+#define P_SAR_ADC_DELTA_10 		CBUS_REG_ADDR(SAR_ADC_DELTA_10)
+#define PWM_PWM_E 0x21b0 	///../ucode/register.h:740
+#define P_PWM_PWM_E 		CBUS_REG_ADDR(PWM_PWM_E)
+#define PWM_PWM_F 0x21b1 	///../ucode/register.h:741
+#define P_PWM_PWM_F 		CBUS_REG_ADDR(PWM_PWM_F)
+#define PWM_MISC_REG_EF 0x21b2 	///../ucode/register.h:742
+#define P_PWM_MISC_REG_EF 		CBUS_REG_ADDR(PWM_MISC_REG_EF)
+#define PWM_DELTA_SIGMA_EF 0x21b3 	///../ucode/register.h:743
+#define P_PWM_DELTA_SIGMA_EF 		CBUS_REG_ADDR(PWM_DELTA_SIGMA_EF)
+#define UART2_WFIFO 0x21c0 	///../ucode/register.h:747
+#define P_UART2_WFIFO 		CBUS_REG_ADDR(UART2_WFIFO)
+#define UART2_RFIFO 0x21c1 	///../ucode/register.h:748
+#define P_UART2_RFIFO 		CBUS_REG_ADDR(UART2_RFIFO)
+#define UART2_CONTROL 0x21c2 	///../ucode/register.h:749
+#define P_UART2_CONTROL 		CBUS_REG_ADDR(UART2_CONTROL)
+#define UART2_STATUS 0x21c3 	///../ucode/register.h:750
+#define P_UART2_STATUS 		CBUS_REG_ADDR(UART2_STATUS)
+#define UART2_MISC 0x21c4 	///../ucode/register.h:751
+#define P_UART2_MISC 		CBUS_REG_ADDR(UART2_MISC)
+#define UART2_REG5 0x21c5 	///../ucode/register.h:752
+#define P_UART2_REG5 		CBUS_REG_ADDR(UART2_REG5)
+#define UART3_WFIFO 0x21c8 	///../ucode/register.h:756
+#define P_UART3_WFIFO 		CBUS_REG_ADDR(UART3_WFIFO)
+#define UART3_RFIFO 0x21c9 	///../ucode/register.h:757
+#define P_UART3_RFIFO 		CBUS_REG_ADDR(UART3_RFIFO)
+#define UART3_CONTROL 0x21ca 	///../ucode/register.h:758
+#define P_UART3_CONTROL 		CBUS_REG_ADDR(UART3_CONTROL)
+#define UART3_STATUS 0x21cb 	///../ucode/register.h:759
+#define P_UART3_STATUS 		CBUS_REG_ADDR(UART3_STATUS)
+#define UART3_MISC 0x21cc 	///../ucode/register.h:760
+#define P_UART3_MISC 		CBUS_REG_ADDR(UART3_MISC)
+#define UART3_REG5 0x21cd 	///../ucode/register.h:761
+#define P_UART3_REG5 		CBUS_REG_ADDR(UART3_REG5)
+#define RTC_ADDR0 0x21d0 	///../ucode/register.h:765
+#define P_RTC_ADDR0 		CBUS_REG_ADDR(RTC_ADDR0)
+#define RTC_ADDR1 0x21d1 	///../ucode/register.h:766
+#define P_RTC_ADDR1 		CBUS_REG_ADDR(RTC_ADDR1)
+#define RTC_ADDR2 0x21d2 	///../ucode/register.h:767
+#define P_RTC_ADDR2 		CBUS_REG_ADDR(RTC_ADDR2)
+#define RTC_ADDR3 0x21d3 	///../ucode/register.h:768
+#define P_RTC_ADDR3 		CBUS_REG_ADDR(RTC_ADDR3)
+#define RTC_ADDR4 0x21d4 	///../ucode/register.h:769
+#define P_RTC_ADDR4 		CBUS_REG_ADDR(RTC_ADDR4)
+#define MSR_CLK_DUTY 0x21d6 	///../ucode/register.h:773
+#define P_MSR_CLK_DUTY 		CBUS_REG_ADDR(MSR_CLK_DUTY)
+#define MSR_CLK_REG0 0x21d7 	///../ucode/register.h:774
+#define P_MSR_CLK_REG0 		CBUS_REG_ADDR(MSR_CLK_REG0)
+#define MSR_CLK_REG1 0x21d8 	///../ucode/register.h:775
+#define P_MSR_CLK_REG1 		CBUS_REG_ADDR(MSR_CLK_REG1)
+#define MSR_CLK_REG2 0x21d9 	///../ucode/register.h:776
+#define P_MSR_CLK_REG2 		CBUS_REG_ADDR(MSR_CLK_REG2)
+#define MSR_CLK_REG3 0x21da 	///../ucode/register.h:777
+#define P_MSR_CLK_REG3 		CBUS_REG_ADDR(MSR_CLK_REG3)
+#define MSR_CLK_REG4 0x21db 	///../ucode/register.h:778
+#define P_MSR_CLK_REG4 		CBUS_REG_ADDR(MSR_CLK_REG4)
+#define MSR_CLK_REG5 0x21de 	///../ucode/register.h:779
+#define P_MSR_CLK_REG5 		CBUS_REG_ADDR(MSR_CLK_REG5)
+#define I2C_M_1_CONTROL_REG 0x21f0 	///../ucode/register.h:803
+#define P_I2C_M_1_CONTROL_REG 		CBUS_REG_ADDR(I2C_M_1_CONTROL_REG)
+#define I2C_M_1_SLAVE_ADDR 0x21f1 	///../ucode/register.h:804
+#define P_I2C_M_1_SLAVE_ADDR 		CBUS_REG_ADDR(I2C_M_1_SLAVE_ADDR)
+#define I2C_M_1_TOKEN_LIST0 0x21f2 	///../ucode/register.h:805
+#define P_I2C_M_1_TOKEN_LIST0 		CBUS_REG_ADDR(I2C_M_1_TOKEN_LIST0)
+#define I2C_M_1_TOKEN_LIST1 0x21f3 	///../ucode/register.h:806
+#define P_I2C_M_1_TOKEN_LIST1 		CBUS_REG_ADDR(I2C_M_1_TOKEN_LIST1)
+#define I2C_M_1_WDATA_REG0 0x21f4 	///../ucode/register.h:807
+#define P_I2C_M_1_WDATA_REG0 		CBUS_REG_ADDR(I2C_M_1_WDATA_REG0)
+#define I2C_M_1_WDATA_REG1 0x21f5 	///../ucode/register.h:808
+#define P_I2C_M_1_WDATA_REG1 		CBUS_REG_ADDR(I2C_M_1_WDATA_REG1)
+#define I2C_M_1_RDATA_REG0 0x21f6 	///../ucode/register.h:809
+#define P_I2C_M_1_RDATA_REG0 		CBUS_REG_ADDR(I2C_M_1_RDATA_REG0)
+#define I2C_M_1_RDATA_REG1 0x21f7 	///../ucode/register.h:810
+#define P_I2C_M_1_RDATA_REG1 		CBUS_REG_ADDR(I2C_M_1_RDATA_REG1)
+#define I2C_M_2_CONTROL_REG 0x21f8 	///../ucode/register.h:814
+#define P_I2C_M_2_CONTROL_REG 		CBUS_REG_ADDR(I2C_M_2_CONTROL_REG)
+#define I2C_M_2_SLAVE_ADDR 0x21f9 	///../ucode/register.h:815
+#define P_I2C_M_2_SLAVE_ADDR 		CBUS_REG_ADDR(I2C_M_2_SLAVE_ADDR)
+#define I2C_M_2_TOKEN_LIST0 0x21fa 	///../ucode/register.h:816
+#define P_I2C_M_2_TOKEN_LIST0 		CBUS_REG_ADDR(I2C_M_2_TOKEN_LIST0)
+#define I2C_M_2_TOKEN_LIST1 0x21fb 	///../ucode/register.h:817
+#define P_I2C_M_2_TOKEN_LIST1 		CBUS_REG_ADDR(I2C_M_2_TOKEN_LIST1)
+#define I2C_M_2_WDATA_REG0 0x21fc 	///../ucode/register.h:818
+#define P_I2C_M_2_WDATA_REG0 		CBUS_REG_ADDR(I2C_M_2_WDATA_REG0)
+#define I2C_M_2_WDATA_REG1 0x21fd 	///../ucode/register.h:819
+#define P_I2C_M_2_WDATA_REG1 		CBUS_REG_ADDR(I2C_M_2_WDATA_REG1)
+#define I2C_M_2_RDATA_REG0 0x21fe 	///../ucode/register.h:820
+#define P_I2C_M_2_RDATA_REG0 		CBUS_REG_ADDR(I2C_M_2_RDATA_REG0)
+#define I2C_M_2_RDATA_REG1 0x21ff 	///../ucode/register.h:821
+#define P_I2C_M_2_RDATA_REG1 		CBUS_REG_ADDR(I2C_M_2_RDATA_REG1)
+#define USB_ADDR0 0x2200 	///../ucode/register.h:828
+#define P_USB_ADDR0 		CBUS_REG_ADDR(USB_ADDR0)
+#define USB_ADDR1 0x2201 	///../ucode/register.h:829
+#define P_USB_ADDR1 		CBUS_REG_ADDR(USB_ADDR1)
+#define USB_ADDR2 0x2202 	///../ucode/register.h:830
+#define P_USB_ADDR2 		CBUS_REG_ADDR(USB_ADDR2)
+#define USB_ADDR3 0x2203 	///../ucode/register.h:831
+#define P_USB_ADDR3 		CBUS_REG_ADDR(USB_ADDR3)
+#define USB_ADDR4 0x2204 	///../ucode/register.h:832
+#define P_USB_ADDR4 		CBUS_REG_ADDR(USB_ADDR4)
+#define USB_ADDR5 0x2205 	///../ucode/register.h:833
+#define P_USB_ADDR5 		CBUS_REG_ADDR(USB_ADDR5)
+#define USB_ADDR6 0x2206 	///../ucode/register.h:834
+#define P_USB_ADDR6 		CBUS_REG_ADDR(USB_ADDR6)
+#define USB_ADDR7 0x2207 	///../ucode/register.h:835
+#define P_USB_ADDR7 		CBUS_REG_ADDR(USB_ADDR7)
+#define USB_ADDR8 0x2208 	///../ucode/register.h:836
+#define P_USB_ADDR8 		CBUS_REG_ADDR(USB_ADDR8)
+#define USB_ADDR9 0x2209 	///../ucode/register.h:837
+#define P_USB_ADDR9 		CBUS_REG_ADDR(USB_ADDR9)
+#define USB_ADDR10 0x220a 	///../ucode/register.h:838
+#define P_USB_ADDR10 		CBUS_REG_ADDR(USB_ADDR10)
+#define USB_ADDR11 0x220b 	///../ucode/register.h:839
+#define P_USB_ADDR11 		CBUS_REG_ADDR(USB_ADDR11)
+#define USB_ADDR12 0x220c 	///../ucode/register.h:840
+#define P_USB_ADDR12 		CBUS_REG_ADDR(USB_ADDR12)
+#define USB_ADDR13 0x220d 	///../ucode/register.h:841
+#define P_USB_ADDR13 		CBUS_REG_ADDR(USB_ADDR13)
+#define USB_ADDR14 0x220e 	///../ucode/register.h:842
+#define P_USB_ADDR14 		CBUS_REG_ADDR(USB_ADDR14)
+#define USB_ADDR15 0x220f 	///../ucode/register.h:843
+#define P_USB_ADDR15 		CBUS_REG_ADDR(USB_ADDR15)
+#define USB_ADDR16 0x2210 	///../ucode/register.h:844
+#define P_USB_ADDR16 		CBUS_REG_ADDR(USB_ADDR16)
+#define USB_ADDR17 0x2211 	///../ucode/register.h:845
+#define P_USB_ADDR17 		CBUS_REG_ADDR(USB_ADDR17)
+#define USB_ADDR18 0x2212 	///../ucode/register.h:846
+#define P_USB_ADDR18 		CBUS_REG_ADDR(USB_ADDR18)
+#define USB_ADDR19 0x2213 	///../ucode/register.h:847
+#define P_USB_ADDR19 		CBUS_REG_ADDR(USB_ADDR19)
+#define USB_ADDR20 0x2214 	///../ucode/register.h:848
+#define P_USB_ADDR20 		CBUS_REG_ADDR(USB_ADDR20)
+#define USB_ADDR21 0x2215 	///../ucode/register.h:849
+#define P_USB_ADDR21 		CBUS_REG_ADDR(USB_ADDR21)
+#define USB_ADDR22 0x2216 	///../ucode/register.h:850
+#define P_USB_ADDR22 		CBUS_REG_ADDR(USB_ADDR22)
+#define USB_ADDR23 0x2217 	///../ucode/register.h:851
+#define P_USB_ADDR23 		CBUS_REG_ADDR(USB_ADDR23)
+#define USB_ADDR24 0x2218 	///../ucode/register.h:852
+#define P_USB_ADDR24 		CBUS_REG_ADDR(USB_ADDR24)
+#define USB_ADDR25 0x2219 	///../ucode/register.h:853
+#define P_USB_ADDR25 		CBUS_REG_ADDR(USB_ADDR25)
+#define USB_ADDR26 0x221a 	///../ucode/register.h:854
+#define P_USB_ADDR26 		CBUS_REG_ADDR(USB_ADDR26)
+#define USB_ADDR27 0x221b 	///../ucode/register.h:855
+#define P_USB_ADDR27 		CBUS_REG_ADDR(USB_ADDR27)
+#define USB_ADDR28 0x221c 	///../ucode/register.h:856
+#define P_USB_ADDR28 		CBUS_REG_ADDR(USB_ADDR28)
+#define USB_ADDR29 0x221d 	///../ucode/register.h:857
+#define P_USB_ADDR29 		CBUS_REG_ADDR(USB_ADDR29)
+#define USB_ADDR30 0x221e 	///../ucode/register.h:858
+#define P_USB_ADDR30 		CBUS_REG_ADDR(USB_ADDR30)
+#define USB_ADDR31 0x221f 	///../ucode/register.h:859
+#define P_USB_ADDR31 		CBUS_REG_ADDR(USB_ADDR31)
+#define SANA_STREAM_CONTROL 0x2220 	///../ucode/register.h:871
+#define P_SANA_STREAM_CONTROL 		CBUS_REG_ADDR(SANA_STREAM_CONTROL)
+#define SANA_STREAM_START_ADDR 0x2221 	///../ucode/register.h:872
+#define P_SANA_STREAM_START_ADDR 		CBUS_REG_ADDR(SANA_STREAM_START_ADDR)
+#define SANA_STREAM_END_ADDR 0x2222 	///../ucode/register.h:873
+#define P_SANA_STREAM_END_ADDR 		CBUS_REG_ADDR(SANA_STREAM_END_ADDR)
+#define SANA_STREAM_WR_PTR 0x2223 	///../ucode/register.h:875
+#define P_SANA_STREAM_WR_PTR 		CBUS_REG_ADDR(SANA_STREAM_WR_PTR)
+#define SANA_STREAM_RD_PTR 0x2224 	///../ucode/register.h:876
+#define P_SANA_STREAM_RD_PTR 		CBUS_REG_ADDR(SANA_STREAM_RD_PTR)
+#define SANA_STREAM_LEVEL 0x2225 	///../ucode/register.h:878
+#define P_SANA_STREAM_LEVEL 		CBUS_REG_ADDR(SANA_STREAM_LEVEL)
+#define SANA_STREAM_FIFO_CTL 0x2226 	///../ucode/register.h:886
+#define P_SANA_STREAM_FIFO_CTL 		CBUS_REG_ADDR(SANA_STREAM_FIFO_CTL)
+#define SANA_SHIFT_CONTROL 0x2227 	///../ucode/register.h:897
+#define P_SANA_SHIFT_CONTROL 		CBUS_REG_ADDR(SANA_SHIFT_CONTROL)
+#define SANA_SHIFT_STARTCODE 0x2228 	///../ucode/register.h:899
+#define P_SANA_SHIFT_STARTCODE 		CBUS_REG_ADDR(SANA_SHIFT_STARTCODE)
+#define SANA_SHIFT_EMULATECODE 0x2229 	///../ucode/register.h:901
+#define P_SANA_SHIFT_EMULATECODE 		CBUS_REG_ADDR(SANA_SHIFT_EMULATECODE)
+#define SANA_SHIFT_STATUS 0x222a 	///../ucode/register.h:906
+#define P_SANA_SHIFT_STATUS 		CBUS_REG_ADDR(SANA_SHIFT_STATUS)
+#define SANA_SHIFTED_DATA 0x222b 	///../ucode/register.h:908
+#define P_SANA_SHIFTED_DATA 		CBUS_REG_ADDR(SANA_SHIFTED_DATA)
+#define SANA_SHIFT_BYTE_COUNT 0x222c 	///../ucode/register.h:910
+#define P_SANA_SHIFT_BYTE_COUNT 		CBUS_REG_ADDR(SANA_SHIFT_BYTE_COUNT)
+#define SANA_SHIFT_COMMAND 0x222d 	///../ucode/register.h:918
+#define P_SANA_SHIFT_COMMAND 		CBUS_REG_ADDR(SANA_SHIFT_COMMAND)
+#define SANA_ELEMENT_RESULT 0x222e 	///../ucode/register.h:922
+#define P_SANA_ELEMENT_RESULT 		CBUS_REG_ADDR(SANA_ELEMENT_RESULT)
+#define ATOM_LOCK 0x222f 	///../ucode/register.h:927
+#define P_ATOM_LOCK 		CBUS_REG_ADDR(ATOM_LOCK)
+#define NDMA_CNTL_REG0 0x2270 	///../ucode/register.h:931
+#define P_NDMA_CNTL_REG0 		CBUS_REG_ADDR(NDMA_CNTL_REG0)
+#define NDMA_TABLE_ADD_REG 0x2272 	///../ucode/register.h:939
+#define P_NDMA_TABLE_ADD_REG 		CBUS_REG_ADDR(NDMA_TABLE_ADD_REG)
+#define NDMA_TDES_KEY_LO 0x2273 	///../ucode/register.h:940
+#define P_NDMA_TDES_KEY_LO 		CBUS_REG_ADDR(NDMA_TDES_KEY_LO)
+#define NDMA_TDES_KEY_HI 0x2274 	///../ucode/register.h:941
+#define P_NDMA_TDES_KEY_HI 		CBUS_REG_ADDR(NDMA_TDES_KEY_HI)
+#define NDMA_TDES_CONTROL 0x2275 	///../ucode/register.h:942
+#define P_NDMA_TDES_CONTROL 		CBUS_REG_ADDR(NDMA_TDES_CONTROL)
+#define NDMA_RIJNDAEL_CONTROL 0x2276 	///../ucode/register.h:943
+#define P_NDMA_RIJNDAEL_CONTROL 		CBUS_REG_ADDR(NDMA_RIJNDAEL_CONTROL)
+#define NDMA_RIJNDAEL_RK_FIFO 0x2277 	///../ucode/register.h:944
+#define P_NDMA_RIJNDAEL_RK_FIFO 		CBUS_REG_ADDR(NDMA_RIJNDAEL_RK_FIFO)
+#define NDMA_CRC_OUT 0x2278 	///../ucode/register.h:945
+#define P_NDMA_CRC_OUT 		CBUS_REG_ADDR(NDMA_CRC_OUT)
+#define NDMA_THREAD_REG 0x2279 	///../ucode/register.h:946
+#define P_NDMA_THREAD_REG 		CBUS_REG_ADDR(NDMA_THREAD_REG)
+#define NDMA_THREAD_TABLE_START0 0x2280 	///../ucode/register.h:947
+#define P_NDMA_THREAD_TABLE_START0 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START0)
+#define NDMA_THREAD_TABLE_CURR0 0x2281 	///../ucode/register.h:948
+#define P_NDMA_THREAD_TABLE_CURR0 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR0)
+#define NDMA_THREAD_TABLE_END0 0x2282 	///../ucode/register.h:949
+#define P_NDMA_THREAD_TABLE_END0 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END0)
+#define NDMA_THREAD_TABLE_START1 0x2283 	///../ucode/register.h:950
+#define P_NDMA_THREAD_TABLE_START1 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START1)
+#define NDMA_THREAD_TABLE_CURR1 0x2284 	///../ucode/register.h:951
+#define P_NDMA_THREAD_TABLE_CURR1 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR1)
+#define NDMA_THREAD_TABLE_END1 0x2285 	///../ucode/register.h:952
+#define P_NDMA_THREAD_TABLE_END1 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END1)
+#define NDMA_THREAD_TABLE_START2 0x2286 	///../ucode/register.h:953
+#define P_NDMA_THREAD_TABLE_START2 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START2)
+#define NDMA_THREAD_TABLE_CURR2 0x2287 	///../ucode/register.h:954
+#define P_NDMA_THREAD_TABLE_CURR2 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR2)
+#define NDMA_THREAD_TABLE_END2 0x2288 	///../ucode/register.h:955
+#define P_NDMA_THREAD_TABLE_END2 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END2)
+#define NDMA_THREAD_TABLE_START3 0x2289 	///../ucode/register.h:956
+#define P_NDMA_THREAD_TABLE_START3 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START3)
+#define NDMA_THREAD_TABLE_CURR3 0x228a 	///../ucode/register.h:957
+#define P_NDMA_THREAD_TABLE_CURR3 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR3)
+#define NDMA_THREAD_TABLE_END3 0x228b 	///../ucode/register.h:958
+#define P_NDMA_THREAD_TABLE_END3 		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END3)
+#define NDMA_CNTL_REG1 0x228c 	///../ucode/register.h:959
+#define P_NDMA_CNTL_REG1 		CBUS_REG_ADDR(NDMA_CNTL_REG1)
+#define NDMA_AES_KEY_0 0x2290 	///../ucode/register.h:960
+#define P_NDMA_AES_KEY_0 		CBUS_REG_ADDR(NDMA_AES_KEY_0)
+#define NDMA_AES_KEY_1 0x2291 	///../ucode/register.h:961
+#define P_NDMA_AES_KEY_1 		CBUS_REG_ADDR(NDMA_AES_KEY_1)
+#define NDMA_AES_KEY_2 0x2292 	///../ucode/register.h:962
+#define P_NDMA_AES_KEY_2 		CBUS_REG_ADDR(NDMA_AES_KEY_2)
+#define NDMA_AES_KEY_3 0x2293 	///../ucode/register.h:963
+#define P_NDMA_AES_KEY_3 		CBUS_REG_ADDR(NDMA_AES_KEY_3)
+#define NDMA_AES_KEY_4 0x2294 	///../ucode/register.h:964
+#define P_NDMA_AES_KEY_4 		CBUS_REG_ADDR(NDMA_AES_KEY_4)
+#define NDMA_AES_KEY_5 0x2295 	///../ucode/register.h:965
+#define P_NDMA_AES_KEY_5 		CBUS_REG_ADDR(NDMA_AES_KEY_5)
+#define NDMA_AES_KEY_6 0x2296 	///../ucode/register.h:966
+#define P_NDMA_AES_KEY_6 		CBUS_REG_ADDR(NDMA_AES_KEY_6)
+#define NDMA_AES_KEY_7 0x2297 	///../ucode/register.h:967
+#define P_NDMA_AES_KEY_7 		CBUS_REG_ADDR(NDMA_AES_KEY_7)
+#define NDMA_AES_IV_0 0x2298 	///../ucode/register.h:968
+#define P_NDMA_AES_IV_0 		CBUS_REG_ADDR(NDMA_AES_IV_0)
+#define NDMA_AES_IV_1 0x2299 	///../ucode/register.h:969
+#define P_NDMA_AES_IV_1 		CBUS_REG_ADDR(NDMA_AES_IV_1)
+#define NDMA_AES_IV_2 0x229a 	///../ucode/register.h:970
+#define P_NDMA_AES_IV_2 		CBUS_REG_ADDR(NDMA_AES_IV_2)
+#define NDMA_AES_IV_3 0x229b 	///../ucode/register.h:971
+#define P_NDMA_AES_IV_3 		CBUS_REG_ADDR(NDMA_AES_IV_3)
+#define NDMA_AES_REG0 0x229c 	///../ucode/register.h:972
+#define P_NDMA_AES_REG0 		CBUS_REG_ADDR(NDMA_AES_REG0)
+#define STREAM_EVENT_INFO 0x2300 	///../ucode/register.h:988
+#define P_STREAM_EVENT_INFO 		CBUS_REG_ADDR(STREAM_EVENT_INFO)
+#define STREAM_OUTPUT_CONFIG 0x2301 	///../ucode/register.h:995
+#define P_STREAM_OUTPUT_CONFIG 		CBUS_REG_ADDR(STREAM_OUTPUT_CONFIG)
+#define C_D_BUS_CONTROL 0x2302 	///../ucode/register.h:1008
+#define P_C_D_BUS_CONTROL 		CBUS_REG_ADDR(C_D_BUS_CONTROL)
+#define C_DATA 0x2303 	///../ucode/register.h:1010
+#define P_C_DATA 		CBUS_REG_ADDR(C_DATA)
+#define STREAM_BUS_CONFIG 0x2304 	///../ucode/register.h:1017
+#define P_STREAM_BUS_CONFIG 		CBUS_REG_ADDR(STREAM_BUS_CONFIG)
+#define STREAM_DATA_IN_CONFIG 0x2305 	///../ucode/register.h:1034
+#define P_STREAM_DATA_IN_CONFIG 		CBUS_REG_ADDR(STREAM_DATA_IN_CONFIG)
+#define STREAM_WAIT_IRQ_CONFIG 0x2306 	///../ucode/register.h:1047
+#define P_STREAM_WAIT_IRQ_CONFIG 		CBUS_REG_ADDR(STREAM_WAIT_IRQ_CONFIG)
+#define STREAM_EVENT_CTL 0x2307 	///../ucode/register.h:1052
+#define P_STREAM_EVENT_CTL 		CBUS_REG_ADDR(STREAM_EVENT_CTL)
+#define CMD_ARGUMENT 0x2308 	///../ucode/register.h:1058
+#define P_CMD_ARGUMENT 		CBUS_REG_ADDR(CMD_ARGUMENT)
+#define CMD_SEND 0x2309 	///../ucode/register.h:1068
+#define P_CMD_SEND 		CBUS_REG_ADDR(CMD_SEND)
+#define SDIO_CONFIG 0x230a 	///../ucode/register.h:1079
+#define P_SDIO_CONFIG 		CBUS_REG_ADDR(SDIO_CONFIG)
+#define SDIO_STATUS_IRQ 0x230b 	///../ucode/register.h:1094
+#define P_SDIO_STATUS_IRQ 		CBUS_REG_ADDR(SDIO_STATUS_IRQ)
+#define SDIO_IRQ_CONFIG 0x230c 	///../ucode/register.h:1110
+#define P_SDIO_IRQ_CONFIG 		CBUS_REG_ADDR(SDIO_IRQ_CONFIG)
+#define SDIO_MULT_CONFIG 0x230d 	///../ucode/register.h:1125
+#define P_SDIO_MULT_CONFIG 		CBUS_REG_ADDR(SDIO_MULT_CONFIG)
+#define SDIO_M_ADDR 0x230e 	///../ucode/register.h:1127
+#define P_SDIO_M_ADDR 		CBUS_REG_ADDR(SDIO_M_ADDR)
+#define SDIO_EXTENSION 0x230f 	///../ucode/register.h:1132
+#define P_SDIO_EXTENSION 		CBUS_REG_ADDR(SDIO_EXTENSION)
+#define ASYNC_FIFO_REG0 0x2310 	///../ucode/register.h:1136
+#define P_ASYNC_FIFO_REG0 		CBUS_REG_ADDR(ASYNC_FIFO_REG0)
+#define ASYNC_FIFO_REG1 0x2311 	///../ucode/register.h:1137
+#define P_ASYNC_FIFO_REG1 		CBUS_REG_ADDR(ASYNC_FIFO_REG1)
+#define ASYNC_FIFO_REG2 0x2312 	///../ucode/register.h:1150
+#define P_ASYNC_FIFO_REG2 		CBUS_REG_ADDR(ASYNC_FIFO_REG2)
+#define ASYNC_FIFO_REG3 0x2313 	///../ucode/register.h:1160
+#define P_ASYNC_FIFO_REG3 		CBUS_REG_ADDR(ASYNC_FIFO_REG3)
+#define ASYNC_FIFO2_REG0 0x2314 	///../ucode/register.h:1166
+#define P_ASYNC_FIFO2_REG0 		CBUS_REG_ADDR(ASYNC_FIFO2_REG0)
+#define ASYNC_FIFO2_REG1 0x2315 	///../ucode/register.h:1167
+#define P_ASYNC_FIFO2_REG1 		CBUS_REG_ADDR(ASYNC_FIFO2_REG1)
+#define ASYNC_FIFO2_REG2 0x2316 	///../ucode/register.h:1168
+#define P_ASYNC_FIFO2_REG2 		CBUS_REG_ADDR(ASYNC_FIFO2_REG2)
+#define ASYNC_FIFO2_REG3 0x2317 	///../ucode/register.h:1169
+#define P_ASYNC_FIFO2_REG3 		CBUS_REG_ADDR(ASYNC_FIFO2_REG3)
+#define SDIO_AHB_CBUS_CTRL 0x2318 	///../ucode/register.h:1181
+#define P_SDIO_AHB_CBUS_CTRL 		CBUS_REG_ADDR(SDIO_AHB_CBUS_CTRL)
+#define SDIO_AHB_CBUS_M_DATA 0x2319 	///../ucode/register.h:1184
+#define P_SDIO_AHB_CBUS_M_DATA 		CBUS_REG_ADDR(SDIO_AHB_CBUS_M_DATA)
+#define SPI_FLASH_CMD 0x2320 	///../ucode/register.h:1188
+#define P_SPI_FLASH_CMD 		CBUS_REG_ADDR(SPI_FLASH_CMD)
+#define SPI_FLASH_ADDR 0x2321 	///../ucode/register.h:1209
+#define P_SPI_FLASH_ADDR 		CBUS_REG_ADDR(SPI_FLASH_ADDR)
+#define SPI_FLASH_CTRL 0x2322 	///../ucode/register.h:1212
+#define P_SPI_FLASH_CTRL 		CBUS_REG_ADDR(SPI_FLASH_CTRL)
+#define SPI_FLASH_CTRL1 0x2323 	///../ucode/register.h:1222
+#define P_SPI_FLASH_CTRL1 		CBUS_REG_ADDR(SPI_FLASH_CTRL1)
+#define SPI_FLASH_STATUS 0x2324 	///../ucode/register.h:1223
+#define P_SPI_FLASH_STATUS 		CBUS_REG_ADDR(SPI_FLASH_STATUS)
+#define SPI_FLASH_CTRL2 0x2325 	///../ucode/register.h:1224
+#define P_SPI_FLASH_CTRL2 		CBUS_REG_ADDR(SPI_FLASH_CTRL2)
+#define SPI_FLASH_CLOCK 0x2326 	///../ucode/register.h:1225
+#define P_SPI_FLASH_CLOCK 		CBUS_REG_ADDR(SPI_FLASH_CLOCK)
+#define SPI_FLASH_USER 0x2327 	///../ucode/register.h:1226
+#define P_SPI_FLASH_USER 		CBUS_REG_ADDR(SPI_FLASH_USER)
+#define SPI_FLASH_USER1 0x2328 	///../ucode/register.h:1227
+#define P_SPI_FLASH_USER1 		CBUS_REG_ADDR(SPI_FLASH_USER1)
+#define SPI_FLASH_USER2 0x2329 	///../ucode/register.h:1228
+#define P_SPI_FLASH_USER2 		CBUS_REG_ADDR(SPI_FLASH_USER2)
+#define SPI_FLASH_USER3 0x232a 	///../ucode/register.h:1229
+#define P_SPI_FLASH_USER3 		CBUS_REG_ADDR(SPI_FLASH_USER3)
+#define SPI_FLASH_USER4 0x232b 	///../ucode/register.h:1230
+#define P_SPI_FLASH_USER4 		CBUS_REG_ADDR(SPI_FLASH_USER4)
+#define SPI_FLASH_SLAVE 0x232c 	///../ucode/register.h:1231
+#define P_SPI_FLASH_SLAVE 		CBUS_REG_ADDR(SPI_FLASH_SLAVE)
+#define SPI_FLASH_SLAVE1 0x232d 	///../ucode/register.h:1232
+#define P_SPI_FLASH_SLAVE1 		CBUS_REG_ADDR(SPI_FLASH_SLAVE1)
+#define SPI_FLASH_SLAVE2 0x232e 	///../ucode/register.h:1233
+#define P_SPI_FLASH_SLAVE2 		CBUS_REG_ADDR(SPI_FLASH_SLAVE2)
+#define SPI_FLASH_SLAVE3 0x232f 	///../ucode/register.h:1234
+#define P_SPI_FLASH_SLAVE3 		CBUS_REG_ADDR(SPI_FLASH_SLAVE3)
+#define SPI_FLASH_C0 0x2330 	///../ucode/register.h:1235
+#define P_SPI_FLASH_C0 		CBUS_REG_ADDR(SPI_FLASH_C0)
+#define SPI_FLASH_C1 0x2331 	///../ucode/register.h:1236
+#define P_SPI_FLASH_C1 		CBUS_REG_ADDR(SPI_FLASH_C1)
+#define SPI_FLASH_C2 0x2332 	///../ucode/register.h:1237
+#define P_SPI_FLASH_C2 		CBUS_REG_ADDR(SPI_FLASH_C2)
+#define SPI_FLASH_C3 0x2333 	///../ucode/register.h:1238
+#define P_SPI_FLASH_C3 		CBUS_REG_ADDR(SPI_FLASH_C3)
+#define SPI_FLASH_C4 0x2334 	///../ucode/register.h:1239
+#define P_SPI_FLASH_C4 		CBUS_REG_ADDR(SPI_FLASH_C4)
+#define SPI_FLASH_C5 0x2335 	///../ucode/register.h:1240
+#define P_SPI_FLASH_C5 		CBUS_REG_ADDR(SPI_FLASH_C5)
+#define SPI_FLASH_C6 0x2336 	///../ucode/register.h:1241
+#define P_SPI_FLASH_C6 		CBUS_REG_ADDR(SPI_FLASH_C6)
+#define SPI_FLASH_C7 0x2337 	///../ucode/register.h:1242
+#define P_SPI_FLASH_C7 		CBUS_REG_ADDR(SPI_FLASH_C7)
+#define SPI_FLASH_B8 0x2338 	///../ucode/register.h:1243
+#define P_SPI_FLASH_B8 		CBUS_REG_ADDR(SPI_FLASH_B8)
+#define SPI_FLASH_B9 0x2339 	///../ucode/register.h:1244
+#define P_SPI_FLASH_B9 		CBUS_REG_ADDR(SPI_FLASH_B9)
+#define SPI_FLASH_B10 0x233a 	///../ucode/register.h:1245
+#define P_SPI_FLASH_B10 		CBUS_REG_ADDR(SPI_FLASH_B10)
+#define SPI_FLASH_B11 0x233b 	///../ucode/register.h:1246
+#define P_SPI_FLASH_B11 		CBUS_REG_ADDR(SPI_FLASH_B11)
+#define SPI_FLASH_B12 0x233c 	///../ucode/register.h:1247
+#define P_SPI_FLASH_B12 		CBUS_REG_ADDR(SPI_FLASH_B12)
+#define SPI_FLASH_B13 0x233d 	///../ucode/register.h:1248
+#define P_SPI_FLASH_B13 		CBUS_REG_ADDR(SPI_FLASH_B13)
+#define SPI_FLASH_B14 0x233e 	///../ucode/register.h:1249
+#define P_SPI_FLASH_B14 		CBUS_REG_ADDR(SPI_FLASH_B14)
+#define SPI_FLASH_B15 0x233f 	///../ucode/register.h:1250
+#define P_SPI_FLASH_B15 		CBUS_REG_ADDR(SPI_FLASH_B15)
+#define I2C_M_3_CONTROL_REG 0x2348 	///../ucode/register.h:1254
+#define P_I2C_M_3_CONTROL_REG 		CBUS_REG_ADDR(I2C_M_3_CONTROL_REG)
+#define I2C_M_3_SLAVE_ADDR 0x2349 	///../ucode/register.h:1255
+#define P_I2C_M_3_SLAVE_ADDR 		CBUS_REG_ADDR(I2C_M_3_SLAVE_ADDR)
+#define I2C_M_3_TOKEN_LIST0 0x234a 	///../ucode/register.h:1256
+#define P_I2C_M_3_TOKEN_LIST0 		CBUS_REG_ADDR(I2C_M_3_TOKEN_LIST0)
+#define I2C_M_3_TOKEN_LIST1 0x234b 	///../ucode/register.h:1257
+#define P_I2C_M_3_TOKEN_LIST1 		CBUS_REG_ADDR(I2C_M_3_TOKEN_LIST1)
+#define I2C_M_3_WDATA_REG0 0x234c 	///../ucode/register.h:1258
+#define P_I2C_M_3_WDATA_REG0 		CBUS_REG_ADDR(I2C_M_3_WDATA_REG0)
+#define I2C_M_3_WDATA_REG1 0x234d 	///../ucode/register.h:1259
+#define P_I2C_M_3_WDATA_REG1 		CBUS_REG_ADDR(I2C_M_3_WDATA_REG1)
+#define I2C_M_3_RDATA_REG0 0x234e 	///../ucode/register.h:1260
+#define P_I2C_M_3_RDATA_REG0 		CBUS_REG_ADDR(I2C_M_3_RDATA_REG0)
+#define I2C_M_3_RDATA_REG1 0x234f 	///../ucode/register.h:1261
+#define P_I2C_M_3_RDATA_REG1 		CBUS_REG_ADDR(I2C_M_3_RDATA_REG1)
+#define SPICC_RXDATA 0x2360 	///../ucode/register.h:1265
+#define P_SPICC_RXDATA 		CBUS_REG_ADDR(SPICC_RXDATA)
+#define SPICC_TXDATA 0x2361 	///../ucode/register.h:1266
+#define P_SPICC_TXDATA 		CBUS_REG_ADDR(SPICC_TXDATA)
+#define SPICC_CONREG 0x2362 	///../ucode/register.h:1267
+#define P_SPICC_CONREG 		CBUS_REG_ADDR(SPICC_CONREG)
+#define SPICC_INTREG 0x2363 	///../ucode/register.h:1268
+#define P_SPICC_INTREG 		CBUS_REG_ADDR(SPICC_INTREG)
+#define SPICC_DMAREG 0x2364 	///../ucode/register.h:1269
+#define P_SPICC_DMAREG 		CBUS_REG_ADDR(SPICC_DMAREG)
+#define SPICC_STATREG 0x2365 	///../ucode/register.h:1270
+#define P_SPICC_STATREG 		CBUS_REG_ADDR(SPICC_STATREG)
+#define SPICC_PERIODREG 0x2366 	///../ucode/register.h:1271
+#define P_SPICC_PERIODREG 		CBUS_REG_ADDR(SPICC_PERIODREG)
+#define SPICC_TESTREG 0x2367 	///../ucode/register.h:1272
+#define P_SPICC_TESTREG 		CBUS_REG_ADDR(SPICC_TESTREG)
+#define SPICC_DRADDR 0x2368 	///../ucode/register.h:1273
+#define P_SPICC_DRADDR 		CBUS_REG_ADDR(SPICC_DRADDR)
+#define SPICC_DWADDR 0x2369 	///../ucode/register.h:1274
+#define P_SPICC_DWADDR 		CBUS_REG_ADDR(SPICC_DWADDR)
+#define SD_REG0_ARGU 0x2380 	///../ucode/register.h:1278
+#define P_SD_REG0_ARGU 		CBUS_REG_ADDR(SD_REG0_ARGU)
+#define SD_REG1_SEND 0x2381 	///../ucode/register.h:1279
+#define P_SD_REG1_SEND 		CBUS_REG_ADDR(SD_REG1_SEND)
+#define SD_REG2_CNTL 0x2382 	///../ucode/register.h:1280
+#define P_SD_REG2_CNTL 		CBUS_REG_ADDR(SD_REG2_CNTL)
+#define SD_REG3_STAT 0x2383 	///../ucode/register.h:1281
+#define P_SD_REG3_STAT 		CBUS_REG_ADDR(SD_REG3_STAT)
+#define SD_REG4_CLKC 0x2384 	///../ucode/register.h:1282
+#define P_SD_REG4_CLKC 		CBUS_REG_ADDR(SD_REG4_CLKC)
+#define SD_REG5_ADDR 0x2385 	///../ucode/register.h:1283
+#define P_SD_REG5_ADDR 		CBUS_REG_ADDR(SD_REG5_ADDR)
+#define SD_REG6_PDMA 0x2386 	///../ucode/register.h:1284
+#define P_SD_REG6_PDMA 		CBUS_REG_ADDR(SD_REG6_PDMA)
+#define SD_REG7_MISC 0x2387 	///../ucode/register.h:1285
+#define P_SD_REG7_MISC 		CBUS_REG_ADDR(SD_REG7_MISC)
+#define SD_REG8_DATA 0x2388 	///../ucode/register.h:1286
+#define P_SD_REG8_DATA 		CBUS_REG_ADDR(SD_REG8_DATA)
+#define SD_REG9_ICTL 0x2389 	///../ucode/register.h:1287
+#define P_SD_REG9_ICTL 		CBUS_REG_ADDR(SD_REG9_ICTL)
+#define SD_REGA_ISTA 0x238a 	///../ucode/register.h:1288
+#define P_SD_REGA_ISTA 		CBUS_REG_ADDR(SD_REGA_ISTA)
+#define SD_REGB_SRST 0x238b 	///../ucode/register.h:1289
+#define P_SD_REGB_SRST 		CBUS_REG_ADDR(SD_REGB_SRST)
+#define SD_REGC_ESTA 0x238c 	///../ucode/register.h:1290
+#define P_SD_REGC_ESTA 		CBUS_REG_ADDR(SD_REGC_ESTA)
+#define SD_REGD_ENHC 0x238d 	///../ucode/register.h:1291
+#define P_SD_REGD_ENHC 		CBUS_REG_ADDR(SD_REGD_ENHC)
+#define SD_REGE_CLK2 0x238e 	///../ucode/register.h:1292
+#define P_SD_REGE_CLK2 		CBUS_REG_ADDR(SD_REGE_CLK2)
+#define ISA_DEBUG_REG0 0x2600 	///../ucode/register.h:1305
+#define P_ISA_DEBUG_REG0 		CBUS_REG_ADDR(ISA_DEBUG_REG0)
+#define ISA_DEBUG_REG1 0x2601 	///../ucode/register.h:1306
+#define P_ISA_DEBUG_REG1 		CBUS_REG_ADDR(ISA_DEBUG_REG1)
+#define ISA_DEBUG_REG2 0x2602 	///../ucode/register.h:1307
+#define P_ISA_DEBUG_REG2 		CBUS_REG_ADDR(ISA_DEBUG_REG2)
+#define ISA_DEBUG_REG3 0x2603 	///../ucode/register.h:1308
+#define P_ISA_DEBUG_REG3 		CBUS_REG_ADDR(ISA_DEBUG_REG3)
+#define ISA_PLL_CLK_SIM0 0x2608 	///../ucode/register.h:1309
+#define P_ISA_PLL_CLK_SIM0 		CBUS_REG_ADDR(ISA_PLL_CLK_SIM0)
+#define ISA_CNTL_REG0 0x2609 	///../ucode/register.h:1310
+#define P_ISA_CNTL_REG0 		CBUS_REG_ADDR(ISA_CNTL_REG0)
+#define AO_CPU_IRQ_IN0_INTR_STAT 0x2610 	///../ucode/register.h:1312
+#define P_AO_CPU_IRQ_IN0_INTR_STAT 		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_STAT)
+#define AO_CPU_IRQ_IN0_INTR_STAT_CLR 0x2611 	///../ucode/register.h:1313
+#define P_AO_CPU_IRQ_IN0_INTR_STAT_CLR 		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_STAT_CLR)
+#define AO_CPU_IRQ_IN0_INTR_MASK 0x2612 	///../ucode/register.h:1314
+#define P_AO_CPU_IRQ_IN0_INTR_MASK 		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_MASK)
+#define AO_CPU_IRQ_IN0_INTR_FIRQ_SEL 0x2613 	///../ucode/register.h:1315
+#define P_AO_CPU_IRQ_IN0_INTR_FIRQ_SEL 		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_FIRQ_SEL)
+#define GPIO_INTR_EDGE_POL 0x2620 	///../ucode/register.h:1330
+#define P_GPIO_INTR_EDGE_POL 		CBUS_REG_ADDR(GPIO_INTR_EDGE_POL)
+#define GPIO_INTR_GPIO_SEL0 0x2621 	///../ucode/register.h:1331
+#define P_GPIO_INTR_GPIO_SEL0 		CBUS_REG_ADDR(GPIO_INTR_GPIO_SEL0)
+#define GPIO_INTR_GPIO_SEL1 0x2622 	///../ucode/register.h:1332
+#define P_GPIO_INTR_GPIO_SEL1 		CBUS_REG_ADDR(GPIO_INTR_GPIO_SEL1)
+#define GPIO_INTR_FILTER_SEL0 0x2623 	///../ucode/register.h:1333
+#define P_GPIO_INTR_FILTER_SEL0 		CBUS_REG_ADDR(GPIO_INTR_FILTER_SEL0)
+#define MEDIA_CPU_INTR_STAT 0x2628 	///../ucode/register.h:1335
+#define P_MEDIA_CPU_INTR_STAT 		CBUS_REG_ADDR(MEDIA_CPU_INTR_STAT)
+#define MEDIA_CPU_INTR_STAT_CLR 0x2629 	///../ucode/register.h:1336
+#define P_MEDIA_CPU_INTR_STAT_CLR 		CBUS_REG_ADDR(MEDIA_CPU_INTR_STAT_CLR)
+#define MEDIA_CPU_INTR_MASK 0x262a 	///../ucode/register.h:1337
+#define P_MEDIA_CPU_INTR_MASK 		CBUS_REG_ADDR(MEDIA_CPU_INTR_MASK)
+#define MEDIA_CPU_INTR_FIRQ_SEL 0x262b 	///../ucode/register.h:1338
+#define P_MEDIA_CPU_INTR_FIRQ_SEL 		CBUS_REG_ADDR(MEDIA_CPU_INTR_FIRQ_SEL)
+#define ISA_BIST_REG0 0x2630 	///../ucode/register.h:1340
+#define P_ISA_BIST_REG0 		CBUS_REG_ADDR(ISA_BIST_REG0)
+#define ISA_BIST_REG1 0x2631 	///../ucode/register.h:1341
+#define P_ISA_BIST_REG1 		CBUS_REG_ADDR(ISA_BIST_REG1)
+#define WATCHDOG_TC 0x2640 	///../ucode/register.h:1343
+#define P_WATCHDOG_TC 		CBUS_REG_ADDR(WATCHDOG_TC)
+#define WATCHDOG_RESET 0x2641 	///../ucode/register.h:1344
+#define P_WATCHDOG_RESET 		CBUS_REG_ADDR(WATCHDOG_RESET)
+#define AHB_ARBITER_REG 0x2642 	///../ucode/register.h:1346
+#define P_AHB_ARBITER_REG 		CBUS_REG_ADDR(AHB_ARBITER_REG)
+#define AHB_ARBDEC_REG 0x2643 	///../ucode/register.h:1347
+#define P_AHB_ARBDEC_REG 		CBUS_REG_ADDR(AHB_ARBDEC_REG)
+#define AHB_ARBITER2_REG 0x264a 	///../ucode/register.h:1348
+#define P_AHB_ARBITER2_REG 		CBUS_REG_ADDR(AHB_ARBITER2_REG)
+#define DEVICE_MMCP_CNTL 0x264b 	///../ucode/register.h:1349
+#define P_DEVICE_MMCP_CNTL 		CBUS_REG_ADDR(DEVICE_MMCP_CNTL)
+#define AUDIO_MMCP_CNTL 0x264c 	///../ucode/register.h:1350
+#define P_AUDIO_MMCP_CNTL 		CBUS_REG_ADDR(AUDIO_MMCP_CNTL)
+#define ISA_TIMER_MUX 0x2650 	///../ucode/register.h:1352
+#define P_ISA_TIMER_MUX 		CBUS_REG_ADDR(ISA_TIMER_MUX)
+#define ISA_TIMERA 0x2651 	///../ucode/register.h:1353
+#define P_ISA_TIMERA 		CBUS_REG_ADDR(ISA_TIMERA)
+#define ISA_TIMERB 0x2652 	///../ucode/register.h:1354
+#define P_ISA_TIMERB 		CBUS_REG_ADDR(ISA_TIMERB)
+#define ISA_TIMERC 0x2653 	///../ucode/register.h:1355
+#define P_ISA_TIMERC 		CBUS_REG_ADDR(ISA_TIMERC)
+#define ISA_TIMERD 0x2654 	///../ucode/register.h:1356
+#define P_ISA_TIMERD 		CBUS_REG_ADDR(ISA_TIMERD)
+#define ISA_TIMERE 0x2655 	///../ucode/register.h:1357
+#define P_ISA_TIMERE 		CBUS_REG_ADDR(ISA_TIMERE)
+#define FBUF_ADDR 0x2656 	///../ucode/register.h:1358
+#define P_FBUF_ADDR 		CBUS_REG_ADDR(FBUF_ADDR)
+#define SDRAM_CTL0 0x2657 	///../ucode/register.h:1361
+#define P_SDRAM_CTL0 		CBUS_REG_ADDR(SDRAM_CTL0)
+#define SDRAM_CTL2 0x2658 	///../ucode/register.h:1362
+#define P_SDRAM_CTL2 		CBUS_REG_ADDR(SDRAM_CTL2)
+#define SDRAM_CTL4 0x265a 	///../ucode/register.h:1364
+#define P_SDRAM_CTL4 		CBUS_REG_ADDR(SDRAM_CTL4)
+#define SDRAM_CTL5 0x265b 	///../ucode/register.h:1365
+#define P_SDRAM_CTL5 		CBUS_REG_ADDR(SDRAM_CTL5)
+#define SDRAM_CTL6 0x265c 	///../ucode/register.h:1366
+#define P_SDRAM_CTL6 		CBUS_REG_ADDR(SDRAM_CTL6)
+#define SDRAM_CTL7 0x265d 	///../ucode/register.h:1367
+#define P_SDRAM_CTL7 		CBUS_REG_ADDR(SDRAM_CTL7)
+#define SDRAM_CTL8 0x265e 	///../ucode/register.h:1368
+#define P_SDRAM_CTL8 		CBUS_REG_ADDR(SDRAM_CTL8)
+#define AHB_MP4_MC_CTL 0x265f 	///../ucode/register.h:1369
+#define P_AHB_MP4_MC_CTL 		CBUS_REG_ADDR(AHB_MP4_MC_CTL)
+#define MEDIA_CPU_PCR 0x2660 	///../ucode/register.h:1370
+#define P_MEDIA_CPU_PCR 		CBUS_REG_ADDR(MEDIA_CPU_PCR)
+#define MEDIA_CPU_CTL 0x2661 	///../ucode/register.h:1371
+#define P_MEDIA_CPU_CTL 		CBUS_REG_ADDR(MEDIA_CPU_CTL)
+#define ISA_TIMER_MUX1 0x2664 	///../ucode/register.h:1372
+#define P_ISA_TIMER_MUX1 		CBUS_REG_ADDR(ISA_TIMER_MUX1)
+#define ISA_TIMERF 0x2665 	///../ucode/register.h:1373
+#define P_ISA_TIMERF 		CBUS_REG_ADDR(ISA_TIMERF)
+#define ISA_TIMERG 0x2666 	///../ucode/register.h:1374
+#define P_ISA_TIMERG 		CBUS_REG_ADDR(ISA_TIMERG)
+#define ISA_TIMERH 0x2667 	///../ucode/register.h:1375
+#define P_ISA_TIMERH 		CBUS_REG_ADDR(ISA_TIMERH)
+#define ISA_TIMERI 0x2668 	///../ucode/register.h:1376
+#define P_ISA_TIMERI 		CBUS_REG_ADDR(ISA_TIMERI)
+#define ABUF_WR_CTL0 0x2670 	///../ucode/register.h:1378
+#define P_ABUF_WR_CTL0 		CBUS_REG_ADDR(ABUF_WR_CTL0)
+#define ABUF_WR_CTL1 0x2671 	///../ucode/register.h:1384
+#define P_ABUF_WR_CTL1 		CBUS_REG_ADDR(ABUF_WR_CTL1)
+#define ABUF_WR_CTL2 0x2672 	///../ucode/register.h:1390
+#define P_ABUF_WR_CTL2 		CBUS_REG_ADDR(ABUF_WR_CTL2)
+#define ABUF_WR_CTL3 0x2673 	///../ucode/register.h:1395
+#define P_ABUF_WR_CTL3 		CBUS_REG_ADDR(ABUF_WR_CTL3)
+#define ABUF_RD_CTL0 0x2674 	///../ucode/register.h:1400
+#define P_ABUF_RD_CTL0 		CBUS_REG_ADDR(ABUF_RD_CTL0)
+#define ABUF_RD_CTL1 0x2675 	///../ucode/register.h:1401
+#define P_ABUF_RD_CTL1 		CBUS_REG_ADDR(ABUF_RD_CTL1)
+#define ABUF_RD_CTL2 0x2676 	///../ucode/register.h:1407
+#define P_ABUF_RD_CTL2 		CBUS_REG_ADDR(ABUF_RD_CTL2)
+#define ABUF_RD_CTL3 0x2677 	///../ucode/register.h:1412
+#define P_ABUF_RD_CTL3 		CBUS_REG_ADDR(ABUF_RD_CTL3)
+#define ABUF_ARB_CTL0 0x2678 	///../ucode/register.h:1418
+#define P_ABUF_ARB_CTL0 		CBUS_REG_ADDR(ABUF_ARB_CTL0)
+#define ABUF_FIFO_CTL0 0x2679 	///../ucode/register.h:1419
+#define P_ABUF_FIFO_CTL0 		CBUS_REG_ADDR(ABUF_FIFO_CTL0)
+#define AHB_BRIDGE_CNTL_WR 0x2680 	///../ucode/register.h:1425
+#define P_AHB_BRIDGE_CNTL_WR 		CBUS_REG_ADDR(AHB_BRIDGE_CNTL_WR)
+#define AHB_BRIDGE_REMAP0 0x2681 	///../ucode/register.h:1426
+#define P_AHB_BRIDGE_REMAP0 		CBUS_REG_ADDR(AHB_BRIDGE_REMAP0)
+#define AHB_BRIDGE_REMAP1 0x2682 	///../ucode/register.h:1427
+#define P_AHB_BRIDGE_REMAP1 		CBUS_REG_ADDR(AHB_BRIDGE_REMAP1)
+#define AHB_BRIDGE_REMAP2 0x2683 	///../ucode/register.h:1428
+#define P_AHB_BRIDGE_REMAP2 		CBUS_REG_ADDR(AHB_BRIDGE_REMAP2)
+#define AHB_BRIDGE_REMAP3 0x2684 	///../ucode/register.h:1429
+#define P_AHB_BRIDGE_REMAP3 		CBUS_REG_ADDR(AHB_BRIDGE_REMAP3)
+#define AHB_BRIDGE_CNTL_REG1 0x2685 	///../ucode/register.h:1430
+#define P_AHB_BRIDGE_CNTL_REG1 		CBUS_REG_ADDR(AHB_BRIDGE_CNTL_REG1)
+#define AHB_BRIDGE_CNTL_REG2 0x2686 	///../ucode/register.h:1431
+#define P_AHB_BRIDGE_CNTL_REG2 		CBUS_REG_ADDR(AHB_BRIDGE_CNTL_REG2)
+#define IQ_OM_WIDTH 0x2510 	///../ucode/register.h:1548
+#define P_IQ_OM_WIDTH 		CBUS_REG_ADDR(IQ_OM_WIDTH)
+#define DBG_ADDR_START 0x2ff0 	///../ucode/register.h:1550
+#define P_DBG_ADDR_START 		CBUS_REG_ADDR(DBG_ADDR_START)
+#define DBG_ADDR_END 0x2fff 	///../ucode/register.h:1551
+#define P_DBG_ADDR_END 		CBUS_REG_ADDR(DBG_ADDR_END)
+#define DBG_CTRL 0x2ff1 	///../ucode/register.h:1552
+#define P_DBG_CTRL 		CBUS_REG_ADDR(DBG_CTRL)
+#define DBG_LED 0x2ff2 	///../ucode/register.h:1553
+#define P_DBG_LED 		CBUS_REG_ADDR(DBG_LED)
+#define DBG_SWITCH 0x2ff3 	///../ucode/register.h:1554
+#define P_DBG_SWITCH 		CBUS_REG_ADDR(DBG_SWITCH)
+#define DBG_VERSION 0x2ff4 	///../ucode/register.h:1555
+#define P_DBG_VERSION 		CBUS_REG_ADDR(DBG_VERSION)
+#define VERSION_CTRL 0x1100 	///../ucode/register.h:1563
+#define P_VERSION_CTRL 		CBUS_REG_ADDR(VERSION_CTRL)
+#define RESET0_REGISTER 0x1101 	///../ucode/register.h:1564
+#define P_RESET0_REGISTER 		CBUS_REG_ADDR(RESET0_REGISTER)
+#define RESET1_REGISTER 0x1102 	///../ucode/register.h:1565
+#define P_RESET1_REGISTER 		CBUS_REG_ADDR(RESET1_REGISTER)
+#define RESET2_REGISTER 0x1103 	///../ucode/register.h:1566
+#define P_RESET2_REGISTER 		CBUS_REG_ADDR(RESET2_REGISTER)
+#define RESET3_REGISTER 0x1104 	///../ucode/register.h:1567
+#define P_RESET3_REGISTER 		CBUS_REG_ADDR(RESET3_REGISTER)
+#define RESET4_REGISTER 0x1105 	///../ucode/register.h:1568
+#define P_RESET4_REGISTER 		CBUS_REG_ADDR(RESET4_REGISTER)
+#define RESET5_REGISTER 0x1106 	///../ucode/register.h:1569
+#define P_RESET5_REGISTER 		CBUS_REG_ADDR(RESET5_REGISTER)
+#define RESET6_REGISTER 0x1107 	///../ucode/register.h:1570
+#define P_RESET6_REGISTER 		CBUS_REG_ADDR(RESET6_REGISTER)
+#define RESET7_REGISTER 0x1108 	///../ucode/register.h:1571
+#define P_RESET7_REGISTER 		CBUS_REG_ADDR(RESET7_REGISTER)
+#define RESET0_MASK 0x1110 	///../ucode/register.h:1572
+#define P_RESET0_MASK 		CBUS_REG_ADDR(RESET0_MASK)
+#define RESET1_MASK 0x1111 	///../ucode/register.h:1573
+#define P_RESET1_MASK 		CBUS_REG_ADDR(RESET1_MASK)
+#define RESET2_MASK 0x1112 	///../ucode/register.h:1574
+#define P_RESET2_MASK 		CBUS_REG_ADDR(RESET2_MASK)
+#define RESET3_MASK 0x1113 	///../ucode/register.h:1575
+#define P_RESET3_MASK 		CBUS_REG_ADDR(RESET3_MASK)
+#define RESET4_MASK 0x1114 	///../ucode/register.h:1576
+#define P_RESET4_MASK 		CBUS_REG_ADDR(RESET4_MASK)
+#define RESET5_MASK 0x1115 	///../ucode/register.h:1577
+#define P_RESET5_MASK 		CBUS_REG_ADDR(RESET5_MASK)
+#define RESET6_MASK 0x1116 	///../ucode/register.h:1578
+#define P_RESET6_MASK 		CBUS_REG_ADDR(RESET6_MASK)
+#define CRT_MASK 0x1117 	///../ucode/register.h:1579
+#define P_CRT_MASK 		CBUS_REG_ADDR(CRT_MASK)
+#define RESET7_MASK 0x1118 	///../ucode/register.h:1580
+#define P_RESET7_MASK 		CBUS_REG_ADDR(RESET7_MASK)
+#define RESET0_LEVEL 0x1120 	///../ucode/register.h:1581
+#define P_RESET0_LEVEL 		CBUS_REG_ADDR(RESET0_LEVEL)
+#define RESET1_LEVEL 0x1121 	///../ucode/register.h:1582
+#define P_RESET1_LEVEL 		CBUS_REG_ADDR(RESET1_LEVEL)
+#define RESET2_LEVEL 0x1122 	///../ucode/register.h:1583
+#define P_RESET2_LEVEL 		CBUS_REG_ADDR(RESET2_LEVEL)
+#define RESET3_LEVEL 0x1123 	///../ucode/register.h:1584
+#define P_RESET3_LEVEL 		CBUS_REG_ADDR(RESET3_LEVEL)
+#define RESET4_LEVEL 0x1124 	///../ucode/register.h:1585
+#define P_RESET4_LEVEL 		CBUS_REG_ADDR(RESET4_LEVEL)
+#define RESET5_LEVEL 0x1125 	///../ucode/register.h:1586
+#define P_RESET5_LEVEL 		CBUS_REG_ADDR(RESET5_LEVEL)
+#define RESET6_LEVEL 0x1126 	///../ucode/register.h:1587
+#define P_RESET6_LEVEL 		CBUS_REG_ADDR(RESET6_LEVEL)
+#define RESET7_LEVEL 0x1127 	///../ucode/register.h:1588
+#define P_RESET7_LEVEL 		CBUS_REG_ADDR(RESET7_LEVEL)
+#define SCR_HIU 0x100b 	///../ucode/register.h:1610
+#define P_SCR_HIU 		CBUS_REG_ADDR(SCR_HIU)
+#define HPG_TIMER 0x100f 	///../ucode/register.h:1611
+#define P_HPG_TIMER 		CBUS_REG_ADDR(HPG_TIMER)
+#define HARM_ASB_MB0 0x1030 	///../ucode/register.h:1612
+#define P_HARM_ASB_MB0 		CBUS_REG_ADDR(HARM_ASB_MB0)
+#define HARM_ASB_MB1 0x1031 	///../ucode/register.h:1613
+#define P_HARM_ASB_MB1 		CBUS_REG_ADDR(HARM_ASB_MB1)
+#define HARM_ASB_MB2 0x1032 	///../ucode/register.h:1614
+#define P_HARM_ASB_MB2 		CBUS_REG_ADDR(HARM_ASB_MB2)
+#define HARM_ASB_MB3 0x1033 	///../ucode/register.h:1615
+#define P_HARM_ASB_MB3 		CBUS_REG_ADDR(HARM_ASB_MB3)
+#define HASB_ARM_MB0 0x1034 	///../ucode/register.h:1616
+#define P_HASB_ARM_MB0 		CBUS_REG_ADDR(HASB_ARM_MB0)
+#define HASB_ARM_MB1 0x1035 	///../ucode/register.h:1617
+#define P_HASB_ARM_MB1 		CBUS_REG_ADDR(HASB_ARM_MB1)
+#define HASB_ARM_MB2 0x1036 	///../ucode/register.h:1618
+#define P_HASB_ARM_MB2 		CBUS_REG_ADDR(HASB_ARM_MB2)
+#define HASB_ARM_MB3 0x1037 	///../ucode/register.h:1619
+#define P_HASB_ARM_MB3 		CBUS_REG_ADDR(HASB_ARM_MB3)
+#define HHI_TIMER90K 0x103b 	///../ucode/register.h:1620
+#define P_HHI_TIMER90K 		CBUS_REG_ADDR(HHI_TIMER90K)
+#define HHI_MEM_PD_REG0 0x1040 	///../ucode/register.h:1621
+#define P_HHI_MEM_PD_REG0 		CBUS_REG_ADDR(HHI_MEM_PD_REG0)
+#define HHI_VPU_MEM_PD_REG0 0x1041 	///../ucode/register.h:1622
+#define P_HHI_VPU_MEM_PD_REG0 		CBUS_REG_ADDR(HHI_VPU_MEM_PD_REG0)
+#define HHI_VPU_MEM_PD_REG1 0x1042 	///../ucode/register.h:1623
+#define P_HHI_VPU_MEM_PD_REG1 		CBUS_REG_ADDR(HHI_VPU_MEM_PD_REG1)
+#define HHI_AUD_DAC_CTRL 0x1044 	///../ucode/register.h:1624
+#define P_HHI_AUD_DAC_CTRL 		CBUS_REG_ADDR(HHI_AUD_DAC_CTRL)
+#define HHI_VIID_CLK_DIV 0x104a 	///../ucode/register.h:1629
+#define P_HHI_VIID_CLK_DIV 		CBUS_REG_ADDR(HHI_VIID_CLK_DIV)
+#define HHI_VIID_CLK_CNTL 0x104b 	///../ucode/register.h:1630
+#define P_HHI_VIID_CLK_CNTL 		CBUS_REG_ADDR(HHI_VIID_CLK_CNTL)
+#define HHI_VIID_DIVIDER_CNTL 0x104c 	///../ucode/register.h:1631
+#define P_HHI_VIID_DIVIDER_CNTL 		CBUS_REG_ADDR(HHI_VIID_DIVIDER_CNTL)
+#define HHI_GCLK_MPEG0 0x1050 	///../ucode/register.h:1633
+#define P_HHI_GCLK_MPEG0 		CBUS_REG_ADDR(HHI_GCLK_MPEG0)
+#define HHI_GCLK_MPEG1 0x1051 	///../ucode/register.h:1634
+#define P_HHI_GCLK_MPEG1 		CBUS_REG_ADDR(HHI_GCLK_MPEG1)
+#define HHI_GCLK_MPEG2 0x1052 	///../ucode/register.h:1635
+#define P_HHI_GCLK_MPEG2 		CBUS_REG_ADDR(HHI_GCLK_MPEG2)
+#define HHI_GCLK_OTHER 0x1054 	///../ucode/register.h:1636
+#define P_HHI_GCLK_OTHER 		CBUS_REG_ADDR(HHI_GCLK_OTHER)
+#define HHI_GCLK_AO 0x1055 	///../ucode/register.h:1637
+#define P_HHI_GCLK_AO 		CBUS_REG_ADDR(HHI_GCLK_AO)
+#define HHI_SYS_CPU_CLK_CNTL1 0x1057 	///../ucode/register.h:1638
+#define P_HHI_SYS_CPU_CLK_CNTL1 		CBUS_REG_ADDR(HHI_SYS_CPU_CLK_CNTL1)
+#define HHI_VID_CLK_DIV 0x1059 	///../ucode/register.h:1640
+#define P_HHI_VID_CLK_DIV 		CBUS_REG_ADDR(HHI_VID_CLK_DIV)
+#define HHI_MPEG_CLK_CNTL 0x105d 	///../ucode/register.h:1641
+#define P_HHI_MPEG_CLK_CNTL 		CBUS_REG_ADDR(HHI_MPEG_CLK_CNTL)
+#define HHI_AUD_CLK_CNTL 0x105e 	///../ucode/register.h:1642
+#define P_HHI_AUD_CLK_CNTL 		CBUS_REG_ADDR(HHI_AUD_CLK_CNTL)
+#define HHI_VID_CLK_CNTL 0x105f 	///../ucode/register.h:1643
+#define P_HHI_VID_CLK_CNTL 		CBUS_REG_ADDR(HHI_VID_CLK_CNTL)
+#define HHI_WIFI_CLK_CNTL 0x1060 	///../ucode/register.h:1644
+#define P_HHI_WIFI_CLK_CNTL 		CBUS_REG_ADDR(HHI_WIFI_CLK_CNTL)
+#define HHI_WIFI_PLL_CNTL 0x1061 	///../ucode/register.h:1645
+#define P_HHI_WIFI_PLL_CNTL 		CBUS_REG_ADDR(HHI_WIFI_PLL_CNTL)
+#define HHI_WIFI_PLL_CNTL2 0x1062 	///../ucode/register.h:1646
+#define P_HHI_WIFI_PLL_CNTL2 		CBUS_REG_ADDR(HHI_WIFI_PLL_CNTL2)
+#define HHI_WIFI_PLL_CNTL3 0x1063 	///../ucode/register.h:1647
+#define P_HHI_WIFI_PLL_CNTL3 		CBUS_REG_ADDR(HHI_WIFI_PLL_CNTL3)
+#define HHI_AUD_CLK_CNTL2 0x1064 	///../ucode/register.h:1648
+#define P_HHI_AUD_CLK_CNTL2 		CBUS_REG_ADDR(HHI_AUD_CLK_CNTL2)
+#define HHI_VID_CLK_CNTL2 0x1065 	///../ucode/register.h:1649
+#define P_HHI_VID_CLK_CNTL2 		CBUS_REG_ADDR(HHI_VID_CLK_CNTL2)
+#define HHI_VID_DIVIDER_CNTL 0x1066 	///../ucode/register.h:1650
+#define P_HHI_VID_DIVIDER_CNTL 		CBUS_REG_ADDR(HHI_VID_DIVIDER_CNTL)
+#define HHI_SYS_CPU_CLK_CNTL 0x1067 	///../ucode/register.h:1651
+#define P_HHI_SYS_CPU_CLK_CNTL 		CBUS_REG_ADDR(HHI_SYS_CPU_CLK_CNTL)
+#define HHI_MALI_CLK_CNTL 0x106c 	///../ucode/register.h:1656
+#define P_HHI_MALI_CLK_CNTL 		CBUS_REG_ADDR(HHI_MALI_CLK_CNTL)
+#define HHI_MIPI_PHY_CLK_CNTL 0x106e 	///../ucode/register.h:1657
+#define P_HHI_MIPI_PHY_CLK_CNTL 		CBUS_REG_ADDR(HHI_MIPI_PHY_CLK_CNTL)
+#define HHI_VPU_CLK_CNTL 0x106f 	///../ucode/register.h:1658
+#define P_HHI_VPU_CLK_CNTL 		CBUS_REG_ADDR(HHI_VPU_CLK_CNTL)
+#define HHI_OTHER_PLL_CNTL 0x1070 	///../ucode/register.h:1659
+#define P_HHI_OTHER_PLL_CNTL 		CBUS_REG_ADDR(HHI_OTHER_PLL_CNTL)
+#define HHI_OTHER_PLL_CNTL2 0x1071 	///../ucode/register.h:1660
+#define P_HHI_OTHER_PLL_CNTL2 		CBUS_REG_ADDR(HHI_OTHER_PLL_CNTL2)
+#define HHI_OTHER_PLL_CNTL3 0x1072 	///../ucode/register.h:1661
+#define P_HHI_OTHER_PLL_CNTL3 		CBUS_REG_ADDR(HHI_OTHER_PLL_CNTL3)
+#define HHI_HDMI_CLK_CNTL 0x1073 	///../ucode/register.h:1662
+#define P_HHI_HDMI_CLK_CNTL 		CBUS_REG_ADDR(HHI_HDMI_CLK_CNTL)
+#define HHI_DEMOD_CLK_CNTL 0x1074 	///../ucode/register.h:1663
+#define P_HHI_DEMOD_CLK_CNTL 		CBUS_REG_ADDR(HHI_DEMOD_CLK_CNTL)
+#define HHI_SATA_CLK_CNTL 0x1075 	///../ucode/register.h:1664
+#define P_HHI_SATA_CLK_CNTL 		CBUS_REG_ADDR(HHI_SATA_CLK_CNTL)
+#define HHI_ETH_CLK_CNTL 0x1076 	///../ucode/register.h:1665
+#define P_HHI_ETH_CLK_CNTL 		CBUS_REG_ADDR(HHI_ETH_CLK_CNTL)
+#define HHI_CLK_DOUBLE_CNTL 0x1077 	///../ucode/register.h:1666
+#define P_HHI_CLK_DOUBLE_CNTL 		CBUS_REG_ADDR(HHI_CLK_DOUBLE_CNTL)
+#define HHI_VDEC_CLK_CNTL 0x1078 	///../ucode/register.h:1667
+#define P_HHI_VDEC_CLK_CNTL 		CBUS_REG_ADDR(HHI_VDEC_CLK_CNTL)
+#define HHI_VDEC2_CLK_CNTL 0x1079 	///../ucode/register.h:1668
+#define P_HHI_VDEC2_CLK_CNTL 		CBUS_REG_ADDR(HHI_VDEC2_CLK_CNTL)
+#define HHI_VDEC3_CLK_CNTL 0x107a 	///../ucode/register.h:1669
+#define P_HHI_VDEC3_CLK_CNTL 		CBUS_REG_ADDR(HHI_VDEC3_CLK_CNTL)
+#define HHI_VDEC4_CLK_CNTL 0x107b 	///../ucode/register.h:1670
+#define P_HHI_VDEC4_CLK_CNTL 		CBUS_REG_ADDR(HHI_VDEC4_CLK_CNTL)
+#define HHI_HDMI_PLL_CNTL 0x107c 	///../ucode/register.h:1676
+#define P_HHI_HDMI_PLL_CNTL 		CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL)
+#define HHI_HDMI_PLL_CNTL1 0x107d 	///../ucode/register.h:1677
+#define P_HHI_HDMI_PLL_CNTL1 		CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL1)
+#define HHI_HDMI_PLL_CNTL2 0x107e 	///../ucode/register.h:1678
+#define P_HHI_HDMI_PLL_CNTL2 		CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL2)
+#define HHI_HDMI_AFC_CNTL 0x107f 	///../ucode/register.h:1679
+#define P_HHI_HDMI_AFC_CNTL 		CBUS_REG_ADDR(HHI_HDMI_AFC_CNTL)
+#define HHI_HDMIRX_CLK_CNTL 0x1080 	///../ucode/register.h:1680
+#define P_HHI_HDMIRX_CLK_CNTL 		CBUS_REG_ADDR(HHI_HDMIRX_CLK_CNTL)
+#define HHI_HDMIRX_AUD_CLK_CNTL 0x1081 	///../ucode/register.h:1681
+#define P_HHI_HDMIRX_AUD_CLK_CNTL 		CBUS_REG_ADDR(HHI_HDMIRX_AUD_CLK_CNTL)
+#define HHI_VID_PLL_MOD_CNTL0 0x1084 	///../ucode/register.h:1682
+#define P_HHI_VID_PLL_MOD_CNTL0 		CBUS_REG_ADDR(HHI_VID_PLL_MOD_CNTL0)
+#define HHI_VID_PLL_MOD_LOW_TCNT 0x1085 	///../ucode/register.h:1683
+#define P_HHI_VID_PLL_MOD_LOW_TCNT 		CBUS_REG_ADDR(HHI_VID_PLL_MOD_LOW_TCNT)
+#define HHI_VID_PLL_MOD_HIGH_TCNT 0x1086 	///../ucode/register.h:1684
+#define P_HHI_VID_PLL_MOD_HIGH_TCNT 		CBUS_REG_ADDR(HHI_VID_PLL_MOD_HIGH_TCNT)
+#define HHI_VID_PLL_MOD_NOM_TCNT 0x1087 	///../ucode/register.h:1685
+#define P_HHI_VID_PLL_MOD_NOM_TCNT 		CBUS_REG_ADDR(HHI_VID_PLL_MOD_NOM_TCNT)
+#define HHI_USB_CLK_CNTL 0x1089 	///../ucode/register.h:1687
+#define P_HHI_USB_CLK_CNTL 		CBUS_REG_ADDR(HHI_USB_CLK_CNTL)
+#define HHI_GEN_CLK_CNTL 0x108a 	///../ucode/register.h:1688
+#define P_HHI_GEN_CLK_CNTL 		CBUS_REG_ADDR(HHI_GEN_CLK_CNTL)
+#define HHI_GEN_CLK_CNTL2 0x108b 	///../ucode/register.h:1689
+#define P_HHI_GEN_CLK_CNTL2 		CBUS_REG_ADDR(HHI_GEN_CLK_CNTL2)
+#define HHI_JTAG_CONFIG 0x108e 	///../ucode/register.h:1690
+#define P_HHI_JTAG_CONFIG 		CBUS_REG_ADDR(HHI_JTAG_CONFIG)
+#define HHI_VAFE_CLKXTALIN_CNTL 0x108f 	///../ucode/register.h:1691
+#define P_HHI_VAFE_CLKXTALIN_CNTL 		CBUS_REG_ADDR(HHI_VAFE_CLKXTALIN_CNTL)
+#define HHI_VAFE_CLKOSCIN_CNTL 0x1090 	///../ucode/register.h:1692
+#define P_HHI_VAFE_CLKOSCIN_CNTL 		CBUS_REG_ADDR(HHI_VAFE_CLKOSCIN_CNTL)
+#define HHI_VAFE_CLKIN_CNTL 0x1091 	///../ucode/register.h:1693
+#define P_HHI_VAFE_CLKIN_CNTL 		CBUS_REG_ADDR(HHI_VAFE_CLKIN_CNTL)
+#define HHI_TVFE_AUTOMODE_CLK_CNTL 0x1092 	///../ucode/register.h:1694
+#define P_HHI_TVFE_AUTOMODE_CLK_CNTL 		CBUS_REG_ADDR(HHI_TVFE_AUTOMODE_CLK_CNTL)
+#define HHI_VAFE_CLKPI_CNTL 0x1093 	///../ucode/register.h:1695
+#define P_HHI_VAFE_CLKPI_CNTL 		CBUS_REG_ADDR(HHI_VAFE_CLKPI_CNTL)
+#define HHI_VDIN_MEAS_CLK_CNTL 0x1094 	///../ucode/register.h:1696
+#define P_HHI_VDIN_MEAS_CLK_CNTL 		CBUS_REG_ADDR(HHI_VDIN_MEAS_CLK_CNTL)
+#define HHI_PCM_CLK_CNTL 0x1096 	///../ucode/register.h:1698
+#define P_HHI_PCM_CLK_CNTL 		CBUS_REG_ADDR(HHI_PCM_CLK_CNTL)
+#define HHI_NAND_CLK_CNTL 0x1097 	///../ucode/register.h:1699
+#define P_HHI_NAND_CLK_CNTL 		CBUS_REG_ADDR(HHI_NAND_CLK_CNTL)
+#define HHI_ISP_LED_CLK_CNTL 0x1098 	///../ucode/register.h:1700
+#define P_HHI_ISP_LED_CLK_CNTL 		CBUS_REG_ADDR(HHI_ISP_LED_CLK_CNTL)
+#define HHI_MPLL_CNTL 0x10a0 	///../ucode/register.h:1703
+#define P_HHI_MPLL_CNTL 		CBUS_REG_ADDR(HHI_MPLL_CNTL)
+#define HHI_MPLL_CNTL2 0x10a1 	///../ucode/register.h:1704
+#define P_HHI_MPLL_CNTL2 		CBUS_REG_ADDR(HHI_MPLL_CNTL2)
+#define HHI_MPLL_CNTL3 0x10a2 	///../ucode/register.h:1705
+#define P_HHI_MPLL_CNTL3 		CBUS_REG_ADDR(HHI_MPLL_CNTL3)
+#define HHI_MPLL_CNTL4 0x10a3 	///../ucode/register.h:1706
+#define P_HHI_MPLL_CNTL4 		CBUS_REG_ADDR(HHI_MPLL_CNTL4)
+#define HHI_MPLL_CNTL5 0x10a4 	///../ucode/register.h:1707
+#define P_HHI_MPLL_CNTL5 		CBUS_REG_ADDR(HHI_MPLL_CNTL5)
+#define HHI_MPLL_CNTL6 0x10a5 	///../ucode/register.h:1708
+#define P_HHI_MPLL_CNTL6 		CBUS_REG_ADDR(HHI_MPLL_CNTL6)
+#define HHI_MPLL_CNTL7 0x10a6 	///../ucode/register.h:1709
+#define P_HHI_MPLL_CNTL7 		CBUS_REG_ADDR(HHI_MPLL_CNTL7)
+#define HHI_MPLL_CNTL8 0x10a7 	///../ucode/register.h:1710
+#define P_HHI_MPLL_CNTL8 		CBUS_REG_ADDR(HHI_MPLL_CNTL8)
+#define HHI_MPLL_CNTL9 0x10a8 	///../ucode/register.h:1711
+#define P_HHI_MPLL_CNTL9 		CBUS_REG_ADDR(HHI_MPLL_CNTL9)
+#define HHI_MPLL_CNTL10 0x10a9 	///../ucode/register.h:1712
+#define P_HHI_MPLL_CNTL10 		CBUS_REG_ADDR(HHI_MPLL_CNTL10)
+#define HHI_ADC_PLL_CNTL 0x10aa 	///../ucode/register.h:1713
+#define P_HHI_ADC_PLL_CNTL 		CBUS_REG_ADDR(HHI_ADC_PLL_CNTL)
+#define HHI_ADC_PLL_CNTL2 0x10ab 	///../ucode/register.h:1714
+#define P_HHI_ADC_PLL_CNTL2 		CBUS_REG_ADDR(HHI_ADC_PLL_CNTL2)
+#define HHI_ADC_PLL_CNTL3 0x10ac 	///../ucode/register.h:1715
+#define P_HHI_ADC_PLL_CNTL3 		CBUS_REG_ADDR(HHI_ADC_PLL_CNTL3)
+#define HHI_ADC_PLL_CNTL4 0x10ad 	///../ucode/register.h:1716
+#define P_HHI_ADC_PLL_CNTL4 		CBUS_REG_ADDR(HHI_ADC_PLL_CNTL4)
+#define HHI_ADC_PLL_CNTL5 0x10ae 	///../ucode/register.h:1717
+#define P_HHI_ADC_PLL_CNTL5 		CBUS_REG_ADDR(HHI_ADC_PLL_CNTL5)
+#define HHI_ADC_PLL_CNTL6 0x10af 	///../ucode/register.h:1718
+#define P_HHI_ADC_PLL_CNTL6 		CBUS_REG_ADDR(HHI_ADC_PLL_CNTL6)
+#define HHI_AUDCLK_PLL_CNTL 0x10b0 	///../ucode/register.h:1719
+#define P_HHI_AUDCLK_PLL_CNTL 		CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL)
+#define HHI_AUDCLK_PLL_CNTL2 0x10b1 	///../ucode/register.h:1720
+#define P_HHI_AUDCLK_PLL_CNTL2 		CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL2)
+#define HHI_AUDCLK_PLL_CNTL3 0x10b2 	///../ucode/register.h:1721
+#define P_HHI_AUDCLK_PLL_CNTL3 		CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL3)
+#define HHI_AUDCLK_PLL_CNTL4 0x10b3 	///../ucode/register.h:1722
+#define P_HHI_AUDCLK_PLL_CNTL4 		CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL4)
+#define HHI_AUDCLK_PLL_CNTL5 0x10b4 	///../ucode/register.h:1723
+#define P_HHI_AUDCLK_PLL_CNTL5 		CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL5)
+#define HHI_AUDCLK_PLL_CNTL6 0x10b5 	///../ucode/register.h:1724
+#define P_HHI_AUDCLK_PLL_CNTL6 		CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL6)
+#define HHI_L2_DDR_CLK_CNTL 0x10b6 	///../ucode/register.h:1725
+#define P_HHI_L2_DDR_CLK_CNTL 		CBUS_REG_ADDR(HHI_L2_DDR_CLK_CNTL)
+#define HHI_VDAC_CNTL0 0x10bd 	///../ucode/register.h:1726
+#define P_HHI_VDAC_CNTL0 		CBUS_REG_ADDR(HHI_VDAC_CNTL0)
+#define HHI_VDAC_CNTL1 0x10be 	///../ucode/register.h:1727
+#define P_HHI_VDAC_CNTL1 		CBUS_REG_ADDR(HHI_VDAC_CNTL1)
+#define HHI_SYS_PLL_CNTL 0x10c0 	///../ucode/register.h:1728
+#define P_HHI_SYS_PLL_CNTL 		CBUS_REG_ADDR(HHI_SYS_PLL_CNTL)
+#define HHI_SYS_PLL_CNTL2 0x10c1 	///../ucode/register.h:1729
+#define P_HHI_SYS_PLL_CNTL2 		CBUS_REG_ADDR(HHI_SYS_PLL_CNTL2)
+#define HHI_SYS_PLL_CNTL3 0x10c2 	///../ucode/register.h:1730
+#define P_HHI_SYS_PLL_CNTL3 		CBUS_REG_ADDR(HHI_SYS_PLL_CNTL3)
+#define HHI_SYS_PLL_CNTL4 0x10c3 	///../ucode/register.h:1731
+#define P_HHI_SYS_PLL_CNTL4 		CBUS_REG_ADDR(HHI_SYS_PLL_CNTL4)
+#define HHI_SYS_PLL_CNTL5 0x10c4 	///../ucode/register.h:1732
+#define P_HHI_SYS_PLL_CNTL5 		CBUS_REG_ADDR(HHI_SYS_PLL_CNTL5)
+#define HHI_DPLL_TOP_0 0x10c6 	///../ucode/register.h:1733
+#define P_HHI_DPLL_TOP_0 		CBUS_REG_ADDR(HHI_DPLL_TOP_0)
+#define HHI_DPLL_TOP_1 0x10c7 	///../ucode/register.h:1734
+#define P_HHI_DPLL_TOP_1 		CBUS_REG_ADDR(HHI_DPLL_TOP_1)
+#define HHI_VID_PLL_CNTL 0x10c8 	///../ucode/register.h:1735
+#define P_HHI_VID_PLL_CNTL 		CBUS_REG_ADDR(HHI_VID_PLL_CNTL)
+#define HHI_VID_PLL_CNTL2 0x10c9 	///../ucode/register.h:1736
+#define P_HHI_VID_PLL_CNTL2 		CBUS_REG_ADDR(HHI_VID_PLL_CNTL2)
+#define HHI_VID_PLL_CNTL3 0x10ca 	///../ucode/register.h:1737
+#define P_HHI_VID_PLL_CNTL3 		CBUS_REG_ADDR(HHI_VID_PLL_CNTL3)
+#define HHI_VID_PLL_CNTL4 0x10cb 	///../ucode/register.h:1738
+#define P_HHI_VID_PLL_CNTL4 		CBUS_REG_ADDR(HHI_VID_PLL_CNTL4)
+#define HHI_VID_PLL_CNTL5 0x10cc 	///../ucode/register.h:1739
+#define P_HHI_VID_PLL_CNTL5 		CBUS_REG_ADDR(HHI_VID_PLL_CNTL5)
+#define HHI_VID_PLL_CNTL6 0x10cd 	///../ucode/register.h:1740
+#define P_HHI_VID_PLL_CNTL6 		CBUS_REG_ADDR(HHI_VID_PLL_CNTL6)
+#define HHI_DSI_LVDS_EDP_CNTL0 0x10d1 	///../ucode/register.h:1741
+#define P_HHI_DSI_LVDS_EDP_CNTL0 		CBUS_REG_ADDR(HHI_DSI_LVDS_EDP_CNTL0)
+#define HHI_DSI_LVDS_EDP_CNTL1 0x10d2 	///../ucode/register.h:1742
+#define P_HHI_DSI_LVDS_EDP_CNTL1 		CBUS_REG_ADDR(HHI_DSI_LVDS_EDP_CNTL1)
+#define HHI_CSI_PHY_CNTL0 0x10d3 	///../ucode/register.h:1743
+#define P_HHI_CSI_PHY_CNTL0 		CBUS_REG_ADDR(HHI_CSI_PHY_CNTL0)
+#define HHI_CSI_PHY_CNTL1 0x10d4 	///../ucode/register.h:1744
+#define P_HHI_CSI_PHY_CNTL1 		CBUS_REG_ADDR(HHI_CSI_PHY_CNTL1)
+#define HHI_CSI_PHY_CNTL2 0x10d5 	///../ucode/register.h:1745
+#define P_HHI_CSI_PHY_CNTL2 		CBUS_REG_ADDR(HHI_CSI_PHY_CNTL2)
+#define HHI_CSI_PHY_CNTL3 0x10d6 	///../ucode/register.h:1746
+#define P_HHI_CSI_PHY_CNTL3 		CBUS_REG_ADDR(HHI_CSI_PHY_CNTL3)
+#define HHI_CSI_PHY_CNTL4 0x10d7 	///../ucode/register.h:1747
+#define P_HHI_CSI_PHY_CNTL4 		CBUS_REG_ADDR(HHI_CSI_PHY_CNTL4)
+#define HHI_DIF_CSI_PHY_CNTL0 0x10d8 	///../ucode/register.h:1748
+#define P_HHI_DIF_CSI_PHY_CNTL0 		CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL0)
+#define HHI_DIF_CSI_PHY_CNTL1 0x10d9 	///../ucode/register.h:1749
+#define P_HHI_DIF_CSI_PHY_CNTL1 		CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL1)
+#define HHI_DIF_CSI_PHY_CNTL2 0x10da 	///../ucode/register.h:1750
+#define P_HHI_DIF_CSI_PHY_CNTL2 		CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL2)
+#define HHI_DIF_CSI_PHY_CNTL3 0x10db 	///../ucode/register.h:1751
+#define P_HHI_DIF_CSI_PHY_CNTL3 		CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL3)
+#define HHI_DIF_CSI_PHY_CNTL4 0x10dc 	///../ucode/register.h:1752
+#define P_HHI_DIF_CSI_PHY_CNTL4 		CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL4)
+#define HHI_DIF_CSI_PHY_CNTL5 0x10dd 	///../ucode/register.h:1753
+#define P_HHI_DIF_CSI_PHY_CNTL5 		CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL5)
+#define HHI_LVDS_TX_PHY_CNTL0 0x10de 	///../ucode/register.h:1754
+#define P_HHI_LVDS_TX_PHY_CNTL0 		CBUS_REG_ADDR(HHI_LVDS_TX_PHY_CNTL0)
+#define HHI_LVDS_TX_PHY_CNTL1 0x10df 	///../ucode/register.h:1755
+#define P_HHI_LVDS_TX_PHY_CNTL1 		CBUS_REG_ADDR(HHI_LVDS_TX_PHY_CNTL1)
+#define HHI_VID2_PLL_CNTL 0x10e0 	///../ucode/register.h:1756
+#define P_HHI_VID2_PLL_CNTL 		CBUS_REG_ADDR(HHI_VID2_PLL_CNTL)
+#define HHI_VID2_PLL_CNTL2 0x10e1 	///../ucode/register.h:1757
+#define P_HHI_VID2_PLL_CNTL2 		CBUS_REG_ADDR(HHI_VID2_PLL_CNTL2)
+#define HHI_VID2_PLL_CNTL3 0x10e2 	///../ucode/register.h:1758
+#define P_HHI_VID2_PLL_CNTL3 		CBUS_REG_ADDR(HHI_VID2_PLL_CNTL3)
+#define HHI_VID2_PLL_CNTL4 0x10e3 	///../ucode/register.h:1759
+#define P_HHI_VID2_PLL_CNTL4 		CBUS_REG_ADDR(HHI_VID2_PLL_CNTL4)
+#define HHI_VID2_PLL_CNTL5 0x10e4 	///../ucode/register.h:1760
+#define P_HHI_VID2_PLL_CNTL5 		CBUS_REG_ADDR(HHI_VID2_PLL_CNTL5)
+#define HHI_VID2_PLL_CNTL6 0x10e5 	///../ucode/register.h:1761
+#define P_HHI_VID2_PLL_CNTL6 		CBUS_REG_ADDR(HHI_VID2_PLL_CNTL6)
+#define HHI_HDMI_PHY_CNTL0 0x10e8 	///../ucode/register.h:1762
+#define P_HHI_HDMI_PHY_CNTL0 		CBUS_REG_ADDR(HHI_HDMI_PHY_CNTL0)
+#define HHI_HDMI_PHY_CNTL1 0x10e9 	///../ucode/register.h:1763
+#define P_HHI_HDMI_PHY_CNTL1 		CBUS_REG_ADDR(HHI_HDMI_PHY_CNTL1)
+#define HHI_HDMI_PHY_CNTL2 0x10ea 	///../ucode/register.h:1764
+#define P_HHI_HDMI_PHY_CNTL2 		CBUS_REG_ADDR(HHI_HDMI_PHY_CNTL2)
+#define PARSER_CONTROL 0x2960 	///../ucode/register.h:1779
+#define P_PARSER_CONTROL 		CBUS_REG_ADDR(PARSER_CONTROL)
+#define PARSER_FETCH_ADDR 0x2961 	///../ucode/register.h:1784
+#define P_PARSER_FETCH_ADDR 		CBUS_REG_ADDR(PARSER_FETCH_ADDR)
+#define PARSER_FETCH_CMD 0x2962 	///../ucode/register.h:1798
+#define P_PARSER_FETCH_CMD 		CBUS_REG_ADDR(PARSER_FETCH_CMD)
+#define PARSER_FETCH_STOP_ADDR 0x2963 	///../ucode/register.h:1800
+#define P_PARSER_FETCH_STOP_ADDR 		CBUS_REG_ADDR(PARSER_FETCH_STOP_ADDR)
+#define PARSER_FETCH_LEVEL 0x2964 	///../ucode/register.h:1802
+#define P_PARSER_FETCH_LEVEL 		CBUS_REG_ADDR(PARSER_FETCH_LEVEL)
+#define PARSER_CONFIG 0x2965 	///../ucode/register.h:1815
+#define P_PARSER_CONFIG 		CBUS_REG_ADDR(PARSER_CONFIG)
+#define PFIFO_WR_PTR 0x2966 	///../ucode/register.h:1818
+#define P_PFIFO_WR_PTR 		CBUS_REG_ADDR(PFIFO_WR_PTR)
+#define PFIFO_RD_PTR 0x2967 	///../ucode/register.h:1820
+#define P_PFIFO_RD_PTR 		CBUS_REG_ADDR(PFIFO_RD_PTR)
+#define PFIFO_DATA 0x2968 	///../ucode/register.h:1822
+#define P_PFIFO_DATA 		CBUS_REG_ADDR(PFIFO_DATA)
+#define PARSER_SEARCH_PATTERN 0x2969 	///../ucode/register.h:1824
+#define P_PARSER_SEARCH_PATTERN 		CBUS_REG_ADDR(PARSER_SEARCH_PATTERN)
+#define PARSER_SEARCH_MASK 0x296a 	///../ucode/register.h:1826
+#define P_PARSER_SEARCH_MASK 		CBUS_REG_ADDR(PARSER_SEARCH_MASK)
+#define PARSER_INT_ENABLE 0x296b 	///../ucode/register.h:1830
+#define P_PARSER_INT_ENABLE 		CBUS_REG_ADDR(PARSER_INT_ENABLE)
+#define PARSER_INT_STATUS 0x296c 	///../ucode/register.h:1840
+#define P_PARSER_INT_STATUS 		CBUS_REG_ADDR(PARSER_INT_STATUS)
+#define PARSER_SCR_CTL 0x296d 	///../ucode/register.h:1846
+#define P_PARSER_SCR_CTL 		CBUS_REG_ADDR(PARSER_SCR_CTL)
+#define PARSER_SCR 0x296e 	///../ucode/register.h:1848
+#define P_PARSER_SCR 		CBUS_REG_ADDR(PARSER_SCR)
+#define PARSER_PARAMETER 0x296f 	///../ucode/register.h:1853
+#define P_PARSER_PARAMETER 		CBUS_REG_ADDR(PARSER_PARAMETER)
+#define PARSER_INSERT_DATA 0x2970 	///../ucode/register.h:1857
+#define P_PARSER_INSERT_DATA 		CBUS_REG_ADDR(PARSER_INSERT_DATA)
+#define VAS_STREAM_ID 0x2971 	///../ucode/register.h:1862
+#define P_VAS_STREAM_ID 		CBUS_REG_ADDR(VAS_STREAM_ID)
+#define VIDEO_DTS 0x2972 	///../ucode/register.h:1864
+#define P_VIDEO_DTS 		CBUS_REG_ADDR(VIDEO_DTS)
+#define VIDEO_PTS 0x2973 	///../ucode/register.h:1866
+#define P_VIDEO_PTS 		CBUS_REG_ADDR(VIDEO_PTS)
+#define VIDEO_PTS_DTS_WR_PTR 0x2974 	///../ucode/register.h:1868
+#define P_VIDEO_PTS_DTS_WR_PTR 		CBUS_REG_ADDR(VIDEO_PTS_DTS_WR_PTR)
+#define AUDIO_PTS 0x2975 	///../ucode/register.h:1870
+#define P_AUDIO_PTS 		CBUS_REG_ADDR(AUDIO_PTS)
+#define AUDIO_PTS_WR_PTR 0x2976 	///../ucode/register.h:1872
+#define P_AUDIO_PTS_WR_PTR 		CBUS_REG_ADDR(AUDIO_PTS_WR_PTR)
+#define PARSER_ES_CONTROL 0x2977 	///../ucode/register.h:1885
+#define P_PARSER_ES_CONTROL 		CBUS_REG_ADDR(PARSER_ES_CONTROL)
+#define PFIFO_MONITOR 0x2978 	///../ucode/register.h:1887
+#define P_PFIFO_MONITOR 		CBUS_REG_ADDR(PFIFO_MONITOR)
+#define PARSER_VIDEO_START_PTR 0x2980 	///../ucode/register.h:1894
+#define P_PARSER_VIDEO_START_PTR 		CBUS_REG_ADDR(PARSER_VIDEO_START_PTR)
+#define PARSER_VIDEO_END_PTR 0x2981 	///../ucode/register.h:1895
+#define P_PARSER_VIDEO_END_PTR 		CBUS_REG_ADDR(PARSER_VIDEO_END_PTR)
+#define PARSER_VIDEO_WP 0x2982 	///../ucode/register.h:1899
+#define P_PARSER_VIDEO_WP 		CBUS_REG_ADDR(PARSER_VIDEO_WP)
+#define PARSER_VIDEO_RP 0x2983 	///../ucode/register.h:1900
+#define P_PARSER_VIDEO_RP 		CBUS_REG_ADDR(PARSER_VIDEO_RP)
+#define PARSER_VIDEO_HOLE 0x2984 	///../ucode/register.h:1901
+#define P_PARSER_VIDEO_HOLE 		CBUS_REG_ADDR(PARSER_VIDEO_HOLE)
+#define PARSER_AUDIO_START_PTR 0x2985 	///../ucode/register.h:1908
+#define P_PARSER_AUDIO_START_PTR 		CBUS_REG_ADDR(PARSER_AUDIO_START_PTR)
+#define PARSER_AUDIO_END_PTR 0x2986 	///../ucode/register.h:1909
+#define P_PARSER_AUDIO_END_PTR 		CBUS_REG_ADDR(PARSER_AUDIO_END_PTR)
+#define PARSER_AUDIO_WP 0x2987 	///../ucode/register.h:1913
+#define P_PARSER_AUDIO_WP 		CBUS_REG_ADDR(PARSER_AUDIO_WP)
+#define PARSER_AUDIO_RP 0x2988 	///../ucode/register.h:1914
+#define P_PARSER_AUDIO_RP 		CBUS_REG_ADDR(PARSER_AUDIO_RP)
+#define PARSER_AUDIO_HOLE 0x2989 	///../ucode/register.h:1915
+#define P_PARSER_AUDIO_HOLE 		CBUS_REG_ADDR(PARSER_AUDIO_HOLE)
+#define PARSER_SUB_START_PTR 0x298a 	///../ucode/register.h:1922
+#define P_PARSER_SUB_START_PTR 		CBUS_REG_ADDR(PARSER_SUB_START_PTR)
+#define PARSER_SUB_END_PTR 0x298b 	///../ucode/register.h:1923
+#define P_PARSER_SUB_END_PTR 		CBUS_REG_ADDR(PARSER_SUB_END_PTR)
+#define PARSER_SUB_WP 0x298c 	///../ucode/register.h:1927
+#define P_PARSER_SUB_WP 		CBUS_REG_ADDR(PARSER_SUB_WP)
+#define PARSER_SUB_RP 0x298d 	///../ucode/register.h:1928
+#define P_PARSER_SUB_RP 		CBUS_REG_ADDR(PARSER_SUB_RP)
+#define PARSER_SUB_HOLE 0x298e 	///../ucode/register.h:1929
+#define P_PARSER_SUB_HOLE 		CBUS_REG_ADDR(PARSER_SUB_HOLE)
+#define PARSER_FETCH_INFO 0x298f 	///../ucode/register.h:1935
+#define P_PARSER_FETCH_INFO 		CBUS_REG_ADDR(PARSER_FETCH_INFO)
+#define PARSER_STATUS 0x2990 	///../ucode/register.h:1939
+#define P_PARSER_STATUS 		CBUS_REG_ADDR(PARSER_STATUS)
+#define PARSER_AV_WRAP_COUNT 0x2991 	///../ucode/register.h:1942
+#define P_PARSER_AV_WRAP_COUNT 		CBUS_REG_ADDR(PARSER_AV_WRAP_COUNT)
+#define WRRSP_PARSER 0x2992 	///../ucode/register.h:1946
+#define P_WRRSP_PARSER 		CBUS_REG_ADDR(WRRSP_PARSER)
+#define PARSER_VIDEO2_START_PTR 0x2993 	///../ucode/register.h:1966
+#define P_PARSER_VIDEO2_START_PTR 		CBUS_REG_ADDR(PARSER_VIDEO2_START_PTR)
+#define PARSER_VIDEO2_END_PTR 0x2994 	///../ucode/register.h:1967
+#define P_PARSER_VIDEO2_END_PTR 		CBUS_REG_ADDR(PARSER_VIDEO2_END_PTR)
+#define PARSER_VIDEO2_WP 0x2995 	///../ucode/register.h:1971
+#define P_PARSER_VIDEO2_WP 		CBUS_REG_ADDR(PARSER_VIDEO2_WP)
+#define PARSER_VIDEO2_RP 0x2996 	///../ucode/register.h:1972
+#define P_PARSER_VIDEO2_RP 		CBUS_REG_ADDR(PARSER_VIDEO2_RP)
+#define PARSER_VIDEO2_HOLE 0x2997 	///../ucode/register.h:1973
+#define P_PARSER_VIDEO2_HOLE 		CBUS_REG_ADDR(PARSER_VIDEO2_HOLE)
+#define PARSER_AV2_WRAP_COUNT 0x2998 	///../ucode/register.h:1976
+#define P_PARSER_AV2_WRAP_COUNT 		CBUS_REG_ADDR(PARSER_AV2_WRAP_COUNT)
+#define DVIN_FRONT_END_CTRL 0x12e0 	///../ucode/register.h:2002
+#define P_DVIN_FRONT_END_CTRL 		CBUS_REG_ADDR(DVIN_FRONT_END_CTRL)
+#define DVIN_HS_LEAD_VS_ODD 0x12e1 	///../ucode/register.h:2009
+#define P_DVIN_HS_LEAD_VS_ODD 		CBUS_REG_ADDR(DVIN_HS_LEAD_VS_ODD)
+#define DVIN_ACTIVE_START_PIX 0x12e2 	///../ucode/register.h:2014
+#define P_DVIN_ACTIVE_START_PIX 		CBUS_REG_ADDR(DVIN_ACTIVE_START_PIX)
+#define DVIN_ACTIVE_START_LINE 0x12e3 	///../ucode/register.h:2019
+#define P_DVIN_ACTIVE_START_LINE 		CBUS_REG_ADDR(DVIN_ACTIVE_START_LINE)
+#define DVIN_DISPLAY_SIZE 0x12e4 	///../ucode/register.h:2024
+#define P_DVIN_DISPLAY_SIZE 		CBUS_REG_ADDR(DVIN_DISPLAY_SIZE)
+#define DVIN_CTRL_STAT 0x12e5 	///../ucode/register.h:2040
+#define P_DVIN_CTRL_STAT 		CBUS_REG_ADDR(DVIN_CTRL_STAT)
+#define AIU_958_BPF 0x1500 	///../ucode/register.h:2078
+#define P_AIU_958_BPF 		CBUS_REG_ADDR(AIU_958_BPF)
+#define AIU_958_BRST 0x1501 	///../ucode/register.h:2081
+#define P_AIU_958_BRST 		CBUS_REG_ADDR(AIU_958_BRST)
+#define AIU_958_LENGTH 0x1502 	///../ucode/register.h:2084
+#define P_AIU_958_LENGTH 		CBUS_REG_ADDR(AIU_958_LENGTH)
+#define AIU_958_PADDSIZE 0x1503 	///../ucode/register.h:2088
+#define P_AIU_958_PADDSIZE 		CBUS_REG_ADDR(AIU_958_PADDSIZE)
+#define AIU_958_MISC 0x1504 	///../ucode/register.h:2110
+#define P_AIU_958_MISC 		CBUS_REG_ADDR(AIU_958_MISC)
+#define AIU_958_FORCE_LEFT 0x1505 	///../ucode/register.h:2114
+#define P_AIU_958_FORCE_LEFT 		CBUS_REG_ADDR(AIU_958_FORCE_LEFT)
+#define AIU_958_DISCARD_NUM 0x1506 	///../ucode/register.h:2118
+#define P_AIU_958_DISCARD_NUM 		CBUS_REG_ADDR(AIU_958_DISCARD_NUM)
+#define AIU_958_DCU_FF_CTRL 0x1507 	///../ucode/register.h:2135
+#define P_AIU_958_DCU_FF_CTRL 		CBUS_REG_ADDR(AIU_958_DCU_FF_CTRL)
+#define AIU_958_CHSTAT_L0 0x1508 	///../ucode/register.h:2141
+#define P_AIU_958_CHSTAT_L0 		CBUS_REG_ADDR(AIU_958_CHSTAT_L0)
+#define AIU_958_CHSTAT_L1 0x1509 	///../ucode/register.h:2142
+#define P_AIU_958_CHSTAT_L1 		CBUS_REG_ADDR(AIU_958_CHSTAT_L1)
+#define AIU_958_CTRL 0x150a 	///../ucode/register.h:2165
+#define P_AIU_958_CTRL 		CBUS_REG_ADDR(AIU_958_CTRL)
+#define AIU_958_RPT 0x150b 	///../ucode/register.h:2170
+#define P_AIU_958_RPT 		CBUS_REG_ADDR(AIU_958_RPT)
+#define AIU_I2S_MUTE_SWAP 0x150c 	///../ucode/register.h:2189
+#define P_AIU_I2S_MUTE_SWAP 		CBUS_REG_ADDR(AIU_I2S_MUTE_SWAP)
+#define AIU_I2S_SOURCE_DESC 0x150d 	///../ucode/register.h:2193
+#define P_AIU_I2S_SOURCE_DESC 		CBUS_REG_ADDR(AIU_I2S_SOURCE_DESC)
+#define AIU_I2S_MED_CTRL 0x150e 	///../ucode/register.h:2198
+#define P_AIU_I2S_MED_CTRL 		CBUS_REG_ADDR(AIU_I2S_MED_CTRL)
+#define AIU_I2S_MED_THRESH 0x150f 	///../ucode/register.h:2202
+#define P_AIU_I2S_MED_THRESH 		CBUS_REG_ADDR(AIU_I2S_MED_THRESH)
+#define AIU_I2S_DAC_CFG 0x1510 	///../ucode/register.h:2220
+#define P_AIU_I2S_DAC_CFG 		CBUS_REG_ADDR(AIU_I2S_DAC_CFG)
+#define AIU_I2S_SYNC 0x1511 	///../ucode/register.h:2226
+#define P_AIU_I2S_SYNC 		CBUS_REG_ADDR(AIU_I2S_SYNC)
+#define AIU_I2S_MISC 0x1512 	///../ucode/register.h:2236
+#define P_AIU_I2S_MISC 		CBUS_REG_ADDR(AIU_I2S_MISC)
+#define AIU_I2S_OUT_CFG 0x1513 	///../ucode/register.h:2245
+#define P_AIU_I2S_OUT_CFG 		CBUS_REG_ADDR(AIU_I2S_OUT_CFG)
+#define AIU_I2S_FF_CTRL 0x1514 	///../ucode/register.h:2247
+#define P_AIU_I2S_FF_CTRL 		CBUS_REG_ADDR(AIU_I2S_FF_CTRL)
+#define AIU_RST_SOFT 0x1515 	///../ucode/register.h:2253
+#define P_AIU_RST_SOFT 		CBUS_REG_ADDR(AIU_RST_SOFT)
+#define AIU_CLK_CTRL 0x1516 	///../ucode/register.h:2282
+#define P_AIU_CLK_CTRL 		CBUS_REG_ADDR(AIU_CLK_CTRL)
+#define AIU_MIX_ADCCFG 0x1517 	///../ucode/register.h:2304
+#define P_AIU_MIX_ADCCFG 		CBUS_REG_ADDR(AIU_MIX_ADCCFG)
+#define AIU_MIX_CTRL 0x1518 	///../ucode/register.h:2332
+#define P_AIU_MIX_CTRL 		CBUS_REG_ADDR(AIU_MIX_CTRL)
+#define AIU_CLK_CTRL_MORE 0x1519 	///../ucode/register.h:2347
+#define P_AIU_CLK_CTRL_MORE 		CBUS_REG_ADDR(AIU_CLK_CTRL_MORE)
+#define AIU_958_POP 0x151a 	///../ucode/register.h:2350
+#define P_AIU_958_POP 		CBUS_REG_ADDR(AIU_958_POP)
+#define AIU_MIX_GAIN 0x151b 	///../ucode/register.h:2374
+#define P_AIU_MIX_GAIN 		CBUS_REG_ADDR(AIU_MIX_GAIN)
+#define AIU_958_SYNWORD1 0x151c 	///../ucode/register.h:2382
+#define P_AIU_958_SYNWORD1 		CBUS_REG_ADDR(AIU_958_SYNWORD1)
+#define AIU_958_SYNWORD2 0x151d 	///../ucode/register.h:2384
+#define P_AIU_958_SYNWORD2 		CBUS_REG_ADDR(AIU_958_SYNWORD2)
+#define AIU_958_SYNWORD3 0x151e 	///../ucode/register.h:2386
+#define P_AIU_958_SYNWORD3 		CBUS_REG_ADDR(AIU_958_SYNWORD3)
+#define AIU_958_SYNWORD1_MASK 0x151f 	///../ucode/register.h:2388
+#define P_AIU_958_SYNWORD1_MASK 		CBUS_REG_ADDR(AIU_958_SYNWORD1_MASK)
+#define AIU_958_SYNWORD2_MASK 0x1520 	///../ucode/register.h:2390
+#define P_AIU_958_SYNWORD2_MASK 		CBUS_REG_ADDR(AIU_958_SYNWORD2_MASK)
+#define AIU_958_SYNWORD3_MASK 0x1521 	///../ucode/register.h:2392
+#define P_AIU_958_SYNWORD3_MASK 		CBUS_REG_ADDR(AIU_958_SYNWORD3_MASK)
+#define AIU_958_FFRDOUT_THD 0x1522 	///../ucode/register.h:2396
+#define P_AIU_958_FFRDOUT_THD 		CBUS_REG_ADDR(AIU_958_FFRDOUT_THD)
+#define AIU_958_LENGTH_PER_PAUSE 0x1523 	///../ucode/register.h:2402
+#define P_AIU_958_LENGTH_PER_PAUSE 		CBUS_REG_ADDR(AIU_958_LENGTH_PER_PAUSE)
+#define AIU_958_PAUSE_NUM 0x1524 	///../ucode/register.h:2407
+#define P_AIU_958_PAUSE_NUM 		CBUS_REG_ADDR(AIU_958_PAUSE_NUM)
+#define AIU_958_PAUSE_PAYLOAD 0x1525 	///../ucode/register.h:2410
+#define P_AIU_958_PAUSE_PAYLOAD 		CBUS_REG_ADDR(AIU_958_PAUSE_PAYLOAD)
+#define AIU_958_AUTO_PAUSE 0x1526 	///../ucode/register.h:2417
+#define P_AIU_958_AUTO_PAUSE 		CBUS_REG_ADDR(AIU_958_AUTO_PAUSE)
+#define AIU_958_PAUSE_PD_LENGTH 0x1527 	///../ucode/register.h:2420
+#define P_AIU_958_PAUSE_PD_LENGTH 		CBUS_REG_ADDR(AIU_958_PAUSE_PD_LENGTH)
+#define AIU_CODEC_DAC_LRCLK_CTRL 0x1528 	///../ucode/register.h:2424
+#define P_AIU_CODEC_DAC_LRCLK_CTRL 		CBUS_REG_ADDR(AIU_CODEC_DAC_LRCLK_CTRL)
+#define AIU_CODEC_ADC_LRCLK_CTRL 0x1529 	///../ucode/register.h:2430
+#define P_AIU_CODEC_ADC_LRCLK_CTRL 		CBUS_REG_ADDR(AIU_CODEC_ADC_LRCLK_CTRL)
+#define AIU_HDMI_CLK_DATA_CTRL 0x152a 	///../ucode/register.h:2436
+#define P_AIU_HDMI_CLK_DATA_CTRL 		CBUS_REG_ADDR(AIU_HDMI_CLK_DATA_CTRL)
+#define AIU_CODEC_CLK_DATA_CTRL 0x152b 	///../ucode/register.h:2442
+#define P_AIU_CODEC_CLK_DATA_CTRL 		CBUS_REG_ADDR(AIU_CODEC_CLK_DATA_CTRL)
+#define AIU_958_CHSTAT_R0 0x1530 	///../ucode/register.h:2448
+#define P_AIU_958_CHSTAT_R0 		CBUS_REG_ADDR(AIU_958_CHSTAT_R0)
+#define AIU_958_CHSTAT_R1 0x1531 	///../ucode/register.h:2449
+#define P_AIU_958_CHSTAT_R1 		CBUS_REG_ADDR(AIU_958_CHSTAT_R1)
+#define AIU_958_VALID_CTRL 0x1532 	///../ucode/register.h:2452
+#define P_AIU_958_VALID_CTRL 		CBUS_REG_ADDR(AIU_958_VALID_CTRL)
+#define AIU_AUDIO_AMP_REG0 0x153c 	///../ucode/register.h:2456
+#define P_AIU_AUDIO_AMP_REG0 		CBUS_REG_ADDR(AIU_AUDIO_AMP_REG0)
+#define AIU_AUDIO_AMP_REG1 0x153d 	///../ucode/register.h:2457
+#define P_AIU_AUDIO_AMP_REG1 		CBUS_REG_ADDR(AIU_AUDIO_AMP_REG1)
+#define AIU_AUDIO_AMP_REG2 0x153e 	///../ucode/register.h:2458
+#define P_AIU_AUDIO_AMP_REG2 		CBUS_REG_ADDR(AIU_AUDIO_AMP_REG2)
+#define AIU_AUDIO_AMP_REG3 0x153f 	///../ucode/register.h:2459
+#define P_AIU_AUDIO_AMP_REG3 		CBUS_REG_ADDR(AIU_AUDIO_AMP_REG3)
+#define AIU_AIFIFO2_CTRL 0x1540 	///../ucode/register.h:2467
+#define P_AIU_AIFIFO2_CTRL 		CBUS_REG_ADDR(AIU_AIFIFO2_CTRL)
+#define AIU_AIFIFO2_STATUS 0x1541 	///../ucode/register.h:2471
+#define P_AIU_AIFIFO2_STATUS 		CBUS_REG_ADDR(AIU_AIFIFO2_STATUS)
+#define AIU_AIFIFO2_GBIT 0x1542 	///../ucode/register.h:2475
+#define P_AIU_AIFIFO2_GBIT 		CBUS_REG_ADDR(AIU_AIFIFO2_GBIT)
+#define AIU_AIFIFO2_CLB 0x1543 	///../ucode/register.h:2478
+#define P_AIU_AIFIFO2_CLB 		CBUS_REG_ADDR(AIU_AIFIFO2_CLB)
+#define AIU_CRC_CTRL 0x1544 	///../ucode/register.h:2485
+#define P_AIU_CRC_CTRL 		CBUS_REG_ADDR(AIU_CRC_CTRL)
+#define AIU_CRC_STATUS 0x1545 	///../ucode/register.h:2493
+#define P_AIU_CRC_STATUS 		CBUS_REG_ADDR(AIU_CRC_STATUS)
+#define AIU_CRC_SHIFT_REG 0x1546 	///../ucode/register.h:2495
+#define P_AIU_CRC_SHIFT_REG 		CBUS_REG_ADDR(AIU_CRC_SHIFT_REG)
+#define AIU_CRC_IREG 0x1547 	///../ucode/register.h:2497
+#define P_AIU_CRC_IREG 		CBUS_REG_ADDR(AIU_CRC_IREG)
+#define AIU_CRC_CAL_REG1 0x1548 	///../ucode/register.h:2500
+#define P_AIU_CRC_CAL_REG1 		CBUS_REG_ADDR(AIU_CRC_CAL_REG1)
+#define AIU_CRC_CAL_REG0 0x1549 	///../ucode/register.h:2502
+#define P_AIU_CRC_CAL_REG0 		CBUS_REG_ADDR(AIU_CRC_CAL_REG0)
+#define AIU_CRC_POLY_COEF1 0x154a 	///../ucode/register.h:2505
+#define P_AIU_CRC_POLY_COEF1 		CBUS_REG_ADDR(AIU_CRC_POLY_COEF1)
+#define AIU_CRC_POLY_COEF0 0x154b 	///../ucode/register.h:2507
+#define P_AIU_CRC_POLY_COEF0 		CBUS_REG_ADDR(AIU_CRC_POLY_COEF0)
+#define AIU_CRC_BIT_SIZE1 0x154c 	///../ucode/register.h:2510
+#define P_AIU_CRC_BIT_SIZE1 		CBUS_REG_ADDR(AIU_CRC_BIT_SIZE1)
+#define AIU_CRC_BIT_SIZE0 0x154d 	///../ucode/register.h:2512
+#define P_AIU_CRC_BIT_SIZE0 		CBUS_REG_ADDR(AIU_CRC_BIT_SIZE0)
+#define AIU_CRC_BIT_CNT1 0x154e 	///../ucode/register.h:2516
+#define P_AIU_CRC_BIT_CNT1 		CBUS_REG_ADDR(AIU_CRC_BIT_CNT1)
+#define AIU_CRC_BIT_CNT0 0x154f 	///../ucode/register.h:2518
+#define P_AIU_CRC_BIT_CNT0 		CBUS_REG_ADDR(AIU_CRC_BIT_CNT0)
+#define AIU_AMCLK_GATE_HI 0x1550 	///../ucode/register.h:2523
+#define P_AIU_AMCLK_GATE_HI 		CBUS_REG_ADDR(AIU_AMCLK_GATE_HI)
+#define AIU_AMCLK_GATE_LO 0x1551 	///../ucode/register.h:2524
+#define P_AIU_AMCLK_GATE_LO 		CBUS_REG_ADDR(AIU_AMCLK_GATE_LO)
+#define AIU_AMCLK_MSR 0x1552 	///../ucode/register.h:2525
+#define P_AIU_AMCLK_MSR 		CBUS_REG_ADDR(AIU_AMCLK_MSR)
+#define AIU_AUDAC_CTRL0 0x1553 	///../ucode/register.h:2526
+#define P_AIU_AUDAC_CTRL0 		CBUS_REG_ADDR(AIU_AUDAC_CTRL0)
+#define AIU_DELTA_SIGMA0 0x1555 	///../ucode/register.h:2549
+#define P_AIU_DELTA_SIGMA0 		CBUS_REG_ADDR(AIU_DELTA_SIGMA0)
+#define AIU_DELTA_SIGMA1 0x1556 	///../ucode/register.h:2551
+#define P_AIU_DELTA_SIGMA1 		CBUS_REG_ADDR(AIU_DELTA_SIGMA1)
+#define AIU_DELTA_SIGMA2 0x1557 	///../ucode/register.h:2553
+#define P_AIU_DELTA_SIGMA2 		CBUS_REG_ADDR(AIU_DELTA_SIGMA2)
+#define AIU_DELTA_SIGMA3 0x1558 	///../ucode/register.h:2564
+#define P_AIU_DELTA_SIGMA3 		CBUS_REG_ADDR(AIU_DELTA_SIGMA3)
+#define AIU_DELTA_SIGMA4 0x1559 	///../ucode/register.h:2568
+#define P_AIU_DELTA_SIGMA4 		CBUS_REG_ADDR(AIU_DELTA_SIGMA4)
+#define AIU_DELTA_SIGMA5 0x155a 	///../ucode/register.h:2572
+#define P_AIU_DELTA_SIGMA5 		CBUS_REG_ADDR(AIU_DELTA_SIGMA5)
+#define AIU_DELTA_SIGMA6 0x155b 	///../ucode/register.h:2577
+#define P_AIU_DELTA_SIGMA6 		CBUS_REG_ADDR(AIU_DELTA_SIGMA6)
+#define AIU_DELTA_SIGMA7 0x155c 	///../ucode/register.h:2581
+#define P_AIU_DELTA_SIGMA7 		CBUS_REG_ADDR(AIU_DELTA_SIGMA7)
+#define AIU_DELTA_SIGMA_LCNTS 0x155d 	///../ucode/register.h:2586
+#define P_AIU_DELTA_SIGMA_LCNTS 		CBUS_REG_ADDR(AIU_DELTA_SIGMA_LCNTS)
+#define AIU_DELTA_SIGMA_RCNTS 0x155e 	///../ucode/register.h:2591
+#define P_AIU_DELTA_SIGMA_RCNTS 		CBUS_REG_ADDR(AIU_DELTA_SIGMA_RCNTS)
+#define AIU_MEM_I2S_START_PTR 0x1560 	///../ucode/register.h:2596
+#define P_AIU_MEM_I2S_START_PTR 		CBUS_REG_ADDR(AIU_MEM_I2S_START_PTR)
+#define AIU_MEM_I2S_RD_PTR 0x1561 	///../ucode/register.h:2597
+#define P_AIU_MEM_I2S_RD_PTR 		CBUS_REG_ADDR(AIU_MEM_I2S_RD_PTR)
+#define AIU_MEM_I2S_END_PTR 0x1562 	///../ucode/register.h:2598
+#define P_AIU_MEM_I2S_END_PTR 		CBUS_REG_ADDR(AIU_MEM_I2S_END_PTR)
+#define AIU_MEM_I2S_MASKS 0x1563 	///../ucode/register.h:2603
+#define P_AIU_MEM_I2S_MASKS 		CBUS_REG_ADDR(AIU_MEM_I2S_MASKS)
+#define AIU_MEM_I2S_CONTROL 0x1564 	///../ucode/register.h:2621
+#define P_AIU_MEM_I2S_CONTROL 		CBUS_REG_ADDR(AIU_MEM_I2S_CONTROL)
+#define AIU_MEM_IEC958_START_PTR 0x1565 	///../ucode/register.h:2626
+#define P_AIU_MEM_IEC958_START_PTR 		CBUS_REG_ADDR(AIU_MEM_IEC958_START_PTR)
+#define AIU_MEM_IEC958_RD_PTR 0x1566 	///../ucode/register.h:2627
+#define P_AIU_MEM_IEC958_RD_PTR 		CBUS_REG_ADDR(AIU_MEM_IEC958_RD_PTR)
+#define AIU_MEM_IEC958_END_PTR 0x1567 	///../ucode/register.h:2628
+#define P_AIU_MEM_IEC958_END_PTR 		CBUS_REG_ADDR(AIU_MEM_IEC958_END_PTR)
+#define AIU_MEM_IEC958_MASKS 0x1568 	///../ucode/register.h:2632
+#define P_AIU_MEM_IEC958_MASKS 		CBUS_REG_ADDR(AIU_MEM_IEC958_MASKS)
+#define AIU_MEM_IEC958_CONTROL 0x1569 	///../ucode/register.h:2659
+#define P_AIU_MEM_IEC958_CONTROL 		CBUS_REG_ADDR(AIU_MEM_IEC958_CONTROL)
+#define AIU_MEM_AIFIFO2_START_PTR 0x156a 	///../ucode/register.h:2666
+#define P_AIU_MEM_AIFIFO2_START_PTR 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_START_PTR)
+#define AIU_MEM_AIFIFO2_CURR_PTR 0x156b 	///../ucode/register.h:2670
+#define P_AIU_MEM_AIFIFO2_CURR_PTR 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_CURR_PTR)
+#define AIU_MEM_AIFIFO2_END_PTR 0x156c 	///../ucode/register.h:2671
+#define P_AIU_MEM_AIFIFO2_END_PTR 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_END_PTR)
+#define AIU_MEM_AIFIFO2_BYTES_AVAIL 0x156d 	///../ucode/register.h:2672
+#define P_AIU_MEM_AIFIFO2_BYTES_AVAIL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_BYTES_AVAIL)
+#define AIU_MEM_AIFIFO2_CONTROL 0x156e 	///../ucode/register.h:2692
+#define P_AIU_MEM_AIFIFO2_CONTROL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_CONTROL)
+#define AIU_MEM_AIFIFO2_MAN_WP 0x156f 	///../ucode/register.h:2696
+#define P_AIU_MEM_AIFIFO2_MAN_WP 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_MAN_WP)
+#define AIU_MEM_AIFIFO2_MAN_RP 0x1570 	///../ucode/register.h:2697
+#define P_AIU_MEM_AIFIFO2_MAN_RP 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_MAN_RP)
+#define AIU_MEM_AIFIFO2_LEVEL 0x1571 	///../ucode/register.h:2698
+#define P_AIU_MEM_AIFIFO2_LEVEL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_LEVEL)
+#define AIU_MEM_AIFIFO2_BUF_CNTL 0x1572 	///../ucode/register.h:2702
+#define P_AIU_MEM_AIFIFO2_BUF_CNTL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_BUF_CNTL)
+#define AIU_MEM_I2S_MAN_WP 0x1573 	///../ucode/register.h:2706
+#define P_AIU_MEM_I2S_MAN_WP 		CBUS_REG_ADDR(AIU_MEM_I2S_MAN_WP)
+#define AIU_MEM_I2S_MAN_RP 0x1574 	///../ucode/register.h:2707
+#define P_AIU_MEM_I2S_MAN_RP 		CBUS_REG_ADDR(AIU_MEM_I2S_MAN_RP)
+#define AIU_MEM_I2S_LEVEL 0x1575 	///../ucode/register.h:2708
+#define P_AIU_MEM_I2S_LEVEL 		CBUS_REG_ADDR(AIU_MEM_I2S_LEVEL)
+#define AIU_MEM_I2S_BUF_CNTL 0x1576 	///../ucode/register.h:2713
+#define P_AIU_MEM_I2S_BUF_CNTL 		CBUS_REG_ADDR(AIU_MEM_I2S_BUF_CNTL)
+#define AIU_MEM_I2S_BUF_WRAP_COUNT 0x1577 	///../ucode/register.h:2714
+#define P_AIU_MEM_I2S_BUF_WRAP_COUNT 		CBUS_REG_ADDR(AIU_MEM_I2S_BUF_WRAP_COUNT)
+#define AIU_MEM_I2S_MEM_CTL 0x1578 	///../ucode/register.h:2718
+#define P_AIU_MEM_I2S_MEM_CTL 		CBUS_REG_ADDR(AIU_MEM_I2S_MEM_CTL)
+#define AIU_MEM_IEC958_MEM_CTL 0x1579 	///../ucode/register.h:2725
+#define P_AIU_MEM_IEC958_MEM_CTL 		CBUS_REG_ADDR(AIU_MEM_IEC958_MEM_CTL)
+#define AIU_MEM_IEC958_WRAP_COUNT 0x157a 	///../ucode/register.h:2726
+#define P_AIU_MEM_IEC958_WRAP_COUNT 		CBUS_REG_ADDR(AIU_MEM_IEC958_WRAP_COUNT)
+#define AIU_MEM_IEC958_IRQ_LEVEL 0x157b 	///../ucode/register.h:2727
+#define P_AIU_MEM_IEC958_IRQ_LEVEL 		CBUS_REG_ADDR(AIU_MEM_IEC958_IRQ_LEVEL)
+#define AIU_MEM_IEC958_MAN_WP 0x157c 	///../ucode/register.h:2728
+#define P_AIU_MEM_IEC958_MAN_WP 		CBUS_REG_ADDR(AIU_MEM_IEC958_MAN_WP)
+#define AIU_MEM_IEC958_MAN_RP 0x157d 	///../ucode/register.h:2729
+#define P_AIU_MEM_IEC958_MAN_RP 		CBUS_REG_ADDR(AIU_MEM_IEC958_MAN_RP)
+#define AIU_MEM_IEC958_LEVEL 0x157e 	///../ucode/register.h:2730
+#define P_AIU_MEM_IEC958_LEVEL 		CBUS_REG_ADDR(AIU_MEM_IEC958_LEVEL)
+#define AIU_MEM_IEC958_BUF_CNTL 0x157f 	///../ucode/register.h:2731
+#define P_AIU_MEM_IEC958_BUF_CNTL 		CBUS_REG_ADDR(AIU_MEM_IEC958_BUF_CNTL)
+#define AIU_AIFIFO_CTRL 0x1580 	///../ucode/register.h:2739
+#define P_AIU_AIFIFO_CTRL 		CBUS_REG_ADDR(AIU_AIFIFO_CTRL)
+#define AIU_AIFIFO_STATUS 0x1581 	///../ucode/register.h:2746
+#define P_AIU_AIFIFO_STATUS 		CBUS_REG_ADDR(AIU_AIFIFO_STATUS)
+#define AIU_AIFIFO_GBIT 0x1582 	///../ucode/register.h:2750
+#define P_AIU_AIFIFO_GBIT 		CBUS_REG_ADDR(AIU_AIFIFO_GBIT)
+#define AIU_AIFIFO_CLB 0x1583 	///../ucode/register.h:2753
+#define P_AIU_AIFIFO_CLB 		CBUS_REG_ADDR(AIU_AIFIFO_CLB)
+#define AIU_MEM_AIFIFO_START_PTR 0x1584 	///../ucode/register.h:2760
+#define P_AIU_MEM_AIFIFO_START_PTR 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_START_PTR)
+#define AIU_MEM_AIFIFO_CURR_PTR 0x1585 	///../ucode/register.h:2764
+#define P_AIU_MEM_AIFIFO_CURR_PTR 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_CURR_PTR)
+#define AIU_MEM_AIFIFO_END_PTR 0x1586 	///../ucode/register.h:2765
+#define P_AIU_MEM_AIFIFO_END_PTR 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_END_PTR)
+#define AIU_MEM_AIFIFO_BYTES_AVAIL 0x1587 	///../ucode/register.h:2766
+#define P_AIU_MEM_AIFIFO_BYTES_AVAIL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_BYTES_AVAIL)
+#define AIU_MEM_AIFIFO_CONTROL 0x1588 	///../ucode/register.h:2786
+#define P_AIU_MEM_AIFIFO_CONTROL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_CONTROL)
+#define AIU_MEM_AIFIFO_MAN_WP 0x1589 	///../ucode/register.h:2790
+#define P_AIU_MEM_AIFIFO_MAN_WP 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_MAN_WP)
+#define AIU_MEM_AIFIFO_MAN_RP 0x158a 	///../ucode/register.h:2791
+#define P_AIU_MEM_AIFIFO_MAN_RP 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_MAN_RP)
+#define AIU_MEM_AIFIFO_LEVEL 0x158b 	///../ucode/register.h:2792
+#define P_AIU_MEM_AIFIFO_LEVEL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_LEVEL)
+#define AIU_MEM_AIFIFO_BUF_CNTL 0x158c 	///../ucode/register.h:2796
+#define P_AIU_MEM_AIFIFO_BUF_CNTL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_BUF_CNTL)
+#define AIU_MEM_AIFIFO_BUF_WRAP_COUNT 0x158d 	///../ucode/register.h:2797
+#define P_AIU_MEM_AIFIFO_BUF_WRAP_COUNT 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_BUF_WRAP_COUNT)
+#define AIU_MEM_AIFIFO2_BUF_WRAP_COUNT 0x158e 	///../ucode/register.h:2798
+#define P_AIU_MEM_AIFIFO2_BUF_WRAP_COUNT 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_BUF_WRAP_COUNT)
+#define AIU_MEM_AIFIFO_MEM_CTL 0x158f 	///../ucode/register.h:2802
+#define P_AIU_MEM_AIFIFO_MEM_CTL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO_MEM_CTL)
+#define AIFIFO_TIME_STAMP_CNTL 0x1590 	///../ucode/register.h:2812
+#define P_AIFIFO_TIME_STAMP_CNTL 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_CNTL)
+#define AIFIFO_TIME_STAMP_SYNC_0 0x1591 	///../ucode/register.h:2814
+#define P_AIFIFO_TIME_STAMP_SYNC_0 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_SYNC_0)
+#define AIFIFO_TIME_STAMP_SYNC_1 0x1592 	///../ucode/register.h:2816
+#define P_AIFIFO_TIME_STAMP_SYNC_1 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_SYNC_1)
+#define AIFIFO_TIME_STAMP_0 0x1593 	///../ucode/register.h:2818
+#define P_AIFIFO_TIME_STAMP_0 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_0)
+#define AIFIFO_TIME_STAMP_1 0x1594 	///../ucode/register.h:2820
+#define P_AIFIFO_TIME_STAMP_1 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_1)
+#define AIFIFO_TIME_STAMP_2 0x1595 	///../ucode/register.h:2822
+#define P_AIFIFO_TIME_STAMP_2 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_2)
+#define AIFIFO_TIME_STAMP_3 0x1596 	///../ucode/register.h:2824
+#define P_AIFIFO_TIME_STAMP_3 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_3)
+#define AIFIFO_TIME_STAMP_LENGTH 0x1597 	///../ucode/register.h:2826
+#define P_AIFIFO_TIME_STAMP_LENGTH 		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_LENGTH)
+#define AIFIFO2_TIME_STAMP_CNTL 0x1598 	///../ucode/register.h:2836
+#define P_AIFIFO2_TIME_STAMP_CNTL 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_CNTL)
+#define AIFIFO2_TIME_STAMP_SYNC_0 0x1599 	///../ucode/register.h:2838
+#define P_AIFIFO2_TIME_STAMP_SYNC_0 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_SYNC_0)
+#define AIFIFO2_TIME_STAMP_SYNC_1 0x159a 	///../ucode/register.h:2840
+#define P_AIFIFO2_TIME_STAMP_SYNC_1 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_SYNC_1)
+#define AIFIFO2_TIME_STAMP_0 0x159b 	///../ucode/register.h:2842
+#define P_AIFIFO2_TIME_STAMP_0 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_0)
+#define AIFIFO2_TIME_STAMP_1 0x159c 	///../ucode/register.h:2844
+#define P_AIFIFO2_TIME_STAMP_1 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_1)
+#define AIFIFO2_TIME_STAMP_2 0x159d 	///../ucode/register.h:2846
+#define P_AIFIFO2_TIME_STAMP_2 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_2)
+#define AIFIFO2_TIME_STAMP_3 0x159e 	///../ucode/register.h:2848
+#define P_AIFIFO2_TIME_STAMP_3 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_3)
+#define AIFIFO2_TIME_STAMP_LENGTH 0x159f 	///../ucode/register.h:2850
+#define P_AIFIFO2_TIME_STAMP_LENGTH 		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_LENGTH)
+#define IEC958_TIME_STAMP_CNTL 0x15a0 	///../ucode/register.h:2860
+#define P_IEC958_TIME_STAMP_CNTL 		CBUS_REG_ADDR(IEC958_TIME_STAMP_CNTL)
+#define IEC958_TIME_STAMP_SYNC_0 0x15a1 	///../ucode/register.h:2862
+#define P_IEC958_TIME_STAMP_SYNC_0 		CBUS_REG_ADDR(IEC958_TIME_STAMP_SYNC_0)
+#define IEC958_TIME_STAMP_SYNC_1 0x15a2 	///../ucode/register.h:2864
+#define P_IEC958_TIME_STAMP_SYNC_1 		CBUS_REG_ADDR(IEC958_TIME_STAMP_SYNC_1)
+#define IEC958_TIME_STAMP_0 0x15a3 	///../ucode/register.h:2866
+#define P_IEC958_TIME_STAMP_0 		CBUS_REG_ADDR(IEC958_TIME_STAMP_0)
+#define IEC958_TIME_STAMP_1 0x15a4 	///../ucode/register.h:2868
+#define P_IEC958_TIME_STAMP_1 		CBUS_REG_ADDR(IEC958_TIME_STAMP_1)
+#define IEC958_TIME_STAMP_2 0x15a5 	///../ucode/register.h:2870
+#define P_IEC958_TIME_STAMP_2 		CBUS_REG_ADDR(IEC958_TIME_STAMP_2)
+#define IEC958_TIME_STAMP_3 0x15a6 	///../ucode/register.h:2872
+#define P_IEC958_TIME_STAMP_3 		CBUS_REG_ADDR(IEC958_TIME_STAMP_3)
+#define IEC958_TIME_STAMP_LENGTH 0x15a7 	///../ucode/register.h:2874
+#define P_IEC958_TIME_STAMP_LENGTH 		CBUS_REG_ADDR(IEC958_TIME_STAMP_LENGTH)
+#define AIU_MEM_AIFIFO2_MEM_CTL 0x15a8 	///../ucode/register.h:2878
+#define P_AIU_MEM_AIFIFO2_MEM_CTL 		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_MEM_CTL)
+#define AIU_I2S_CBUS_DDR_CNTL 0x15a9 	///../ucode/register.h:2895
+#define P_AIU_I2S_CBUS_DDR_CNTL 		CBUS_REG_ADDR(AIU_I2S_CBUS_DDR_CNTL)
+#define AIU_I2S_CBUS_DDR_WDATA 0x15aa 	///../ucode/register.h:2897
+#define P_AIU_I2S_CBUS_DDR_WDATA 		CBUS_REG_ADDR(AIU_I2S_CBUS_DDR_WDATA)
+#define AIU_I2S_CBUS_DDR_ADDR 0x15ab 	///../ucode/register.h:2899
+#define P_AIU_I2S_CBUS_DDR_ADDR 		CBUS_REG_ADDR(AIU_I2S_CBUS_DDR_ADDR)
+#define GE2D_GEN_CTRL0 0x18a0 	///../ucode/register.h:2944
+#define P_GE2D_GEN_CTRL0 		CBUS_REG_ADDR(GE2D_GEN_CTRL0)
+#define GE2D_GEN_CTRL1 0x18a1 	///../ucode/register.h:2961
+#define P_GE2D_GEN_CTRL1 		CBUS_REG_ADDR(GE2D_GEN_CTRL1)
+#define GE2D_GEN_CTRL2 0x18a2 	///../ucode/register.h:3043
+#define P_GE2D_GEN_CTRL2 		CBUS_REG_ADDR(GE2D_GEN_CTRL2)
+#define GE2D_CMD_CTRL 0x18a3 	///../ucode/register.h:3054
+#define P_GE2D_CMD_CTRL 		CBUS_REG_ADDR(GE2D_CMD_CTRL)
+#define GE2D_STATUS0 0x18a4 	///../ucode/register.h:3065
+#define P_GE2D_STATUS0 		CBUS_REG_ADDR(GE2D_STATUS0)
+#define GE2D_STATUS1 0x18a5 	///../ucode/register.h:3081
+#define P_GE2D_STATUS1 		CBUS_REG_ADDR(GE2D_STATUS1)
+#define GE2D_SRC1_DEF_COLOR 0x18a6 	///../ucode/register.h:3084
+#define P_GE2D_SRC1_DEF_COLOR 		CBUS_REG_ADDR(GE2D_SRC1_DEF_COLOR)
+#define GE2D_SRC1_CLIPX_START_END 0x18a7 	///../ucode/register.h:3089
+#define P_GE2D_SRC1_CLIPX_START_END 		CBUS_REG_ADDR(GE2D_SRC1_CLIPX_START_END)
+#define GE2D_SRC1_CLIPY_START_END 0x18a8 	///../ucode/register.h:3094
+#define P_GE2D_SRC1_CLIPY_START_END 		CBUS_REG_ADDR(GE2D_SRC1_CLIPY_START_END)
+#define GE2D_SRC1_CANVAS 0x18a9 	///../ucode/register.h:3098
+#define P_GE2D_SRC1_CANVAS 		CBUS_REG_ADDR(GE2D_SRC1_CANVAS)
+#define GE2D_SRC1_X_START_END 0x18aa 	///../ucode/register.h:3107
+#define P_GE2D_SRC1_X_START_END 		CBUS_REG_ADDR(GE2D_SRC1_X_START_END)
+#define GE2D_SRC1_Y_START_END 0x18ab 	///../ucode/register.h:3116
+#define P_GE2D_SRC1_Y_START_END 		CBUS_REG_ADDR(GE2D_SRC1_Y_START_END)
+#define GE2D_SRC1_LUT_ADDR 0x18ac 	///../ucode/register.h:3120
+#define P_GE2D_SRC1_LUT_ADDR 		CBUS_REG_ADDR(GE2D_SRC1_LUT_ADDR)
+#define GE2D_SRC1_LUT_DAT 0x18ad 	///../ucode/register.h:3125
+#define P_GE2D_SRC1_LUT_DAT 		CBUS_REG_ADDR(GE2D_SRC1_LUT_DAT)
+#define GE2D_SRC1_FMT_CTRL 0x18ae 	///../ucode/register.h:3138
+#define P_GE2D_SRC1_FMT_CTRL 		CBUS_REG_ADDR(GE2D_SRC1_FMT_CTRL)
+#define GE2D_SRC2_DEF_COLOR 0x18af 	///../ucode/register.h:3141
+#define P_GE2D_SRC2_DEF_COLOR 		CBUS_REG_ADDR(GE2D_SRC2_DEF_COLOR)
+#define GE2D_SRC2_CLIPX_START_END 0x18b0 	///../ucode/register.h:3144
+#define P_GE2D_SRC2_CLIPX_START_END 		CBUS_REG_ADDR(GE2D_SRC2_CLIPX_START_END)
+#define GE2D_SRC2_CLIPY_START_END 0x18b1 	///../ucode/register.h:3147
+#define P_GE2D_SRC2_CLIPY_START_END 		CBUS_REG_ADDR(GE2D_SRC2_CLIPY_START_END)
+#define GE2D_SRC2_X_START_END 0x18b2 	///../ucode/register.h:3150
+#define P_GE2D_SRC2_X_START_END 		CBUS_REG_ADDR(GE2D_SRC2_X_START_END)
+#define GE2D_SRC2_Y_START_END 0x18b3 	///../ucode/register.h:3153
+#define P_GE2D_SRC2_Y_START_END 		CBUS_REG_ADDR(GE2D_SRC2_Y_START_END)
+#define GE2D_DST_CLIPX_START_END 0x18b4 	///../ucode/register.h:3156
+#define P_GE2D_DST_CLIPX_START_END 		CBUS_REG_ADDR(GE2D_DST_CLIPX_START_END)
+#define GE2D_DST_CLIPY_START_END 0x18b5 	///../ucode/register.h:3160
+#define P_GE2D_DST_CLIPY_START_END 		CBUS_REG_ADDR(GE2D_DST_CLIPY_START_END)
+#define GE2D_DST_X_START_END 0x18b6 	///../ucode/register.h:3163
+#define P_GE2D_DST_X_START_END 		CBUS_REG_ADDR(GE2D_DST_X_START_END)
+#define GE2D_DST_Y_START_END 0x18b7 	///../ucode/register.h:3167
+#define P_GE2D_DST_Y_START_END 		CBUS_REG_ADDR(GE2D_DST_Y_START_END)
+#define GE2D_SRC2_DST_CANVAS 0x18b8 	///../ucode/register.h:3171
+#define P_GE2D_SRC2_DST_CANVAS 		CBUS_REG_ADDR(GE2D_SRC2_DST_CANVAS)
+#define GE2D_VSC_START_PHASE_STEP 0x18b9 	///../ucode/register.h:3174
+#define P_GE2D_VSC_START_PHASE_STEP 		CBUS_REG_ADDR(GE2D_VSC_START_PHASE_STEP)
+#define GE2D_VSC_PHASE_SLOPE 0x18ba 	///../ucode/register.h:3177
+#define P_GE2D_VSC_PHASE_SLOPE 		CBUS_REG_ADDR(GE2D_VSC_PHASE_SLOPE)
+#define GE2D_VSC_INI_CTRL 0x18bb 	///../ucode/register.h:3180
+#define P_GE2D_VSC_INI_CTRL 		CBUS_REG_ADDR(GE2D_VSC_INI_CTRL)
+#define GE2D_HSC_START_PHASE_STEP 0x18bc 	///../ucode/register.h:3183
+#define P_GE2D_HSC_START_PHASE_STEP 		CBUS_REG_ADDR(GE2D_HSC_START_PHASE_STEP)
+#define GE2D_HSC_PHASE_SLOPE 0x18bd 	///../ucode/register.h:3186
+#define P_GE2D_HSC_PHASE_SLOPE 		CBUS_REG_ADDR(GE2D_HSC_PHASE_SLOPE)
+#define GE2D_HSC_INI_CTRL 0x18be 	///../ucode/register.h:3189
+#define P_GE2D_HSC_INI_CTRL 		CBUS_REG_ADDR(GE2D_HSC_INI_CTRL)
+#define GE2D_HSC_ADV_CTRL 0x18bf 	///../ucode/register.h:3192
+#define P_GE2D_HSC_ADV_CTRL 		CBUS_REG_ADDR(GE2D_HSC_ADV_CTRL)
+#define GE2D_SC_MISC_CTRL 0x18c0 	///../ucode/register.h:3209
+#define P_GE2D_SC_MISC_CTRL 		CBUS_REG_ADDR(GE2D_SC_MISC_CTRL)
+#define GE2D_VSC_NRND_POINT 0x18c1 	///../ucode/register.h:3213
+#define P_GE2D_VSC_NRND_POINT 		CBUS_REG_ADDR(GE2D_VSC_NRND_POINT)
+#define GE2D_VSC_NRND_PHASE 0x18c2 	///../ucode/register.h:3217
+#define P_GE2D_VSC_NRND_PHASE 		CBUS_REG_ADDR(GE2D_VSC_NRND_PHASE)
+#define GE2D_HSC_NRND_POINT 0x18c3 	///../ucode/register.h:3221
+#define P_GE2D_HSC_NRND_POINT 		CBUS_REG_ADDR(GE2D_HSC_NRND_POINT)
+#define GE2D_HSC_NRND_PHASE 0x18c4 	///../ucode/register.h:3225
+#define P_GE2D_HSC_NRND_PHASE 		CBUS_REG_ADDR(GE2D_HSC_NRND_PHASE)
+#define GE2D_MATRIX_PRE_OFFSET 0x18c5 	///../ucode/register.h:3230
+#define P_GE2D_MATRIX_PRE_OFFSET 		CBUS_REG_ADDR(GE2D_MATRIX_PRE_OFFSET)
+#define GE2D_MATRIX_COEF00_01 0x18c6 	///../ucode/register.h:3233
+#define P_GE2D_MATRIX_COEF00_01 		CBUS_REG_ADDR(GE2D_MATRIX_COEF00_01)
+#define GE2D_MATRIX_COEF02_10 0x18c7 	///../ucode/register.h:3236
+#define P_GE2D_MATRIX_COEF02_10 		CBUS_REG_ADDR(GE2D_MATRIX_COEF02_10)
+#define GE2D_MATRIX_COEF11_12 0x18c8 	///../ucode/register.h:3239
+#define P_GE2D_MATRIX_COEF11_12 		CBUS_REG_ADDR(GE2D_MATRIX_COEF11_12)
+#define GE2D_MATRIX_COEF20_21 0x18c9 	///../ucode/register.h:3242
+#define P_GE2D_MATRIX_COEF20_21 		CBUS_REG_ADDR(GE2D_MATRIX_COEF20_21)
+#define GE2D_MATRIX_COEF22_CTRL 0x18ca 	///../ucode/register.h:3246
+#define P_GE2D_MATRIX_COEF22_CTRL 		CBUS_REG_ADDR(GE2D_MATRIX_COEF22_CTRL)
+#define GE2D_MATRIX_OFFSET 0x18cb 	///../ucode/register.h:3250
+#define P_GE2D_MATRIX_OFFSET 		CBUS_REG_ADDR(GE2D_MATRIX_OFFSET)
+#define GE2D_ALU_OP_CTRL 0x18cc 	///../ucode/register.h:3359
+#define P_GE2D_ALU_OP_CTRL 		CBUS_REG_ADDR(GE2D_ALU_OP_CTRL)
+#define GE2D_ALU_CONST_COLOR 0x18cd 	///../ucode/register.h:3361
+#define P_GE2D_ALU_CONST_COLOR 		CBUS_REG_ADDR(GE2D_ALU_CONST_COLOR)
+#define GE2D_SRC1_KEY 0x18ce 	///../ucode/register.h:3364
+#define P_GE2D_SRC1_KEY 		CBUS_REG_ADDR(GE2D_SRC1_KEY)
+#define GE2D_SRC1_KEY_MASK 0x18cf 	///../ucode/register.h:3367
+#define P_GE2D_SRC1_KEY_MASK 		CBUS_REG_ADDR(GE2D_SRC1_KEY_MASK)
+#define GE2D_SRC2_KEY 0x18d0 	///../ucode/register.h:3370
+#define P_GE2D_SRC2_KEY 		CBUS_REG_ADDR(GE2D_SRC2_KEY)
+#define GE2D_SRC2_KEY_MASK 0x18d1 	///../ucode/register.h:3373
+#define P_GE2D_SRC2_KEY_MASK 		CBUS_REG_ADDR(GE2D_SRC2_KEY_MASK)
+#define GE2D_DST_BITMASK 0x18d2 	///../ucode/register.h:3376
+#define P_GE2D_DST_BITMASK 		CBUS_REG_ADDR(GE2D_DST_BITMASK)
+#define GE2D_DP_ONOFF_CTRL 0x18d3 	///../ucode/register.h:3382
+#define P_GE2D_DP_ONOFF_CTRL 		CBUS_REG_ADDR(GE2D_DP_ONOFF_CTRL)
+#define GE2D_SCALE_COEF_IDX 0x18d4 	///../ucode/register.h:3393
+#define P_GE2D_SCALE_COEF_IDX 		CBUS_REG_ADDR(GE2D_SCALE_COEF_IDX)
+#define GE2D_SCALE_COEF 0x18d5 	///../ucode/register.h:3395
+#define P_GE2D_SCALE_COEF 		CBUS_REG_ADDR(GE2D_SCALE_COEF)
+#define GE2D_SRC_OUTSIDE_ALPHA 0x18d6 	///../ucode/register.h:3405
+#define P_GE2D_SRC_OUTSIDE_ALPHA 		CBUS_REG_ADDR(GE2D_SRC_OUTSIDE_ALPHA)
+#define GE2D_ANTIFLICK_CTRL0 0x18d8 	///../ucode/register.h:3411
+#define P_GE2D_ANTIFLICK_CTRL0 		CBUS_REG_ADDR(GE2D_ANTIFLICK_CTRL0)
+#define GE2D_ANTIFLICK_CTRL1 0x18d9 	///../ucode/register.h:3418
+#define P_GE2D_ANTIFLICK_CTRL1 		CBUS_REG_ADDR(GE2D_ANTIFLICK_CTRL1)
+#define GE2D_ANTIFLICK_COLOR_FILT0 0x18da 	///../ucode/register.h:3424
+#define P_GE2D_ANTIFLICK_COLOR_FILT0 		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT0)
+#define GE2D_ANTIFLICK_COLOR_FILT1 0x18db 	///../ucode/register.h:3429
+#define P_GE2D_ANTIFLICK_COLOR_FILT1 		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT1)
+#define GE2D_ANTIFLICK_COLOR_FILT2 0x18dc 	///../ucode/register.h:3434
+#define P_GE2D_ANTIFLICK_COLOR_FILT2 		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT2)
+#define GE2D_ANTIFLICK_COLOR_FILT3 0x18dd 	///../ucode/register.h:3438
+#define P_GE2D_ANTIFLICK_COLOR_FILT3 		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT3)
+#define GE2D_ANTIFLICK_ALPHA_FILT0 0x18de 	///../ucode/register.h:3444
+#define P_GE2D_ANTIFLICK_ALPHA_FILT0 		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT0)
+#define GE2D_ANTIFLICK_ALPHA_FILT1 0x18df 	///../ucode/register.h:3449
+#define P_GE2D_ANTIFLICK_ALPHA_FILT1 		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT1)
+#define GE2D_ANTIFLICK_ALPHA_FILT2 0x18e0 	///../ucode/register.h:3454
+#define P_GE2D_ANTIFLICK_ALPHA_FILT2 		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT2)
+#define GE2D_ANTIFLICK_ALPHA_FILT3 0x18e1 	///../ucode/register.h:3458
+#define P_GE2D_ANTIFLICK_ALPHA_FILT3 		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT3)
+#define GE2D_SRC1_RANGE_MAP_Y_CTRL 0x18e3 	///../ucode/register.h:3465
+#define P_GE2D_SRC1_RANGE_MAP_Y_CTRL 		CBUS_REG_ADDR(GE2D_SRC1_RANGE_MAP_Y_CTRL)
+#define GE2D_SRC1_RANGE_MAP_CB_CTRL 0x18e4 	///../ucode/register.h:3472
+#define P_GE2D_SRC1_RANGE_MAP_CB_CTRL 		CBUS_REG_ADDR(GE2D_SRC1_RANGE_MAP_CB_CTRL)
+#define GE2D_SRC1_RANGE_MAP_CR_CTRL 0x18e5 	///../ucode/register.h:3479
+#define P_GE2D_SRC1_RANGE_MAP_CR_CTRL 		CBUS_REG_ADDR(GE2D_SRC1_RANGE_MAP_CR_CTRL)
+#define GE2D_ARB_BURST_NUM 0x18e6 	///../ucode/register.h:3483
+#define P_GE2D_ARB_BURST_NUM 		CBUS_REG_ADDR(GE2D_ARB_BURST_NUM)
+#define GE2D_TID_TOKEN 0x18e7 	///../ucode/register.h:3488
+#define P_GE2D_TID_TOKEN 		CBUS_REG_ADDR(GE2D_TID_TOKEN)
+#define GE2D_GEN_CTRL3 0x18e8 	///../ucode/register.h:3527
+#define P_GE2D_GEN_CTRL3 		CBUS_REG_ADDR(GE2D_GEN_CTRL3)
+#define GE2D_STATUS2 0x18e9 	///../ucode/register.h:3530
+#define P_GE2D_STATUS2 		CBUS_REG_ADDR(GE2D_STATUS2)
+#define GE2D_GEN_CTRL4 0x18ea 	///../ucode/register.h:3532
+#define P_GE2D_GEN_CTRL4 		CBUS_REG_ADDR(GE2D_GEN_CTRL4)
+#define AUDIO_COP_CTL2 0x1f01 	///../ucode/register.h:3545
+#define P_AUDIO_COP_CTL2 		CBUS_REG_ADDR(AUDIO_COP_CTL2)
+#define OPERAND_M_CTL 0x1f02 	///../ucode/register.h:3547
+#define P_OPERAND_M_CTL 		CBUS_REG_ADDR(OPERAND_M_CTL)
+#define OPERAND1_ADDR 0x1f03 	///../ucode/register.h:3548
+#define P_OPERAND1_ADDR 		CBUS_REG_ADDR(OPERAND1_ADDR)
+#define OPERAND2_ADDR 0x1f04 	///../ucode/register.h:3549
+#define P_OPERAND2_ADDR 		CBUS_REG_ADDR(OPERAND2_ADDR)
+#define RESULT_M_CTL 0x1f05 	///../ucode/register.h:3550
+#define P_RESULT_M_CTL 		CBUS_REG_ADDR(RESULT_M_CTL)
+#define RESULT1_ADDR 0x1f06 	///../ucode/register.h:3551
+#define P_RESULT1_ADDR 		CBUS_REG_ADDR(RESULT1_ADDR)
+#define RESULT2_ADDR 0x1f07 	///../ucode/register.h:3552
+#define P_RESULT2_ADDR 		CBUS_REG_ADDR(RESULT2_ADDR)
+#define ADD_SHFT_CTL 0x1f08 	///../ucode/register.h:3553
+#define P_ADD_SHFT_CTL 		CBUS_REG_ADDR(ADD_SHFT_CTL)
+#define OPERAND_ONE_H 0x1f09 	///../ucode/register.h:3554
+#define P_OPERAND_ONE_H 		CBUS_REG_ADDR(OPERAND_ONE_H)
+#define OPERAND_ONE_L 0x1f0a 	///../ucode/register.h:3555
+#define P_OPERAND_ONE_L 		CBUS_REG_ADDR(OPERAND_ONE_L)
+#define OPERAND_TWO_H 0x1f0b 	///../ucode/register.h:3556
+#define P_OPERAND_TWO_H 		CBUS_REG_ADDR(OPERAND_TWO_H)
+#define OPERAND_TWO_L 0x1f0c 	///../ucode/register.h:3557
+#define P_OPERAND_TWO_L 		CBUS_REG_ADDR(OPERAND_TWO_L)
+#define RESULT_H 0x1f0d 	///../ucode/register.h:3558
+#define P_RESULT_H 		CBUS_REG_ADDR(RESULT_H)
+#define RESULT_M 0x1f0e 	///../ucode/register.h:3559
+#define P_RESULT_M 		CBUS_REG_ADDR(RESULT_M)
+#define RESULT_L 0x1f0f 	///../ucode/register.h:3561
+#define P_RESULT_L 		CBUS_REG_ADDR(RESULT_L)
+#define WMEM_R_PTR 0x1f10 	///../ucode/register.h:3563
+#define P_WMEM_R_PTR 		CBUS_REG_ADDR(WMEM_R_PTR)
+#define WMEM_W_PTR 0x1f11 	///../ucode/register.h:3564
+#define P_WMEM_W_PTR 		CBUS_REG_ADDR(WMEM_W_PTR)
+#define AUDIO_LAYER 0x1f20 	///../ucode/register.h:3565
+#define P_AUDIO_LAYER 		CBUS_REG_ADDR(AUDIO_LAYER)
+#define AC3_DECODING 0x1f21 	///../ucode/register.h:3566
+#define P_AC3_DECODING 		CBUS_REG_ADDR(AC3_DECODING)
+#define AC3_DYNAMIC 0x1f22 	///../ucode/register.h:3567
+#define P_AC3_DYNAMIC 		CBUS_REG_ADDR(AC3_DYNAMIC)
+#define AC3_MELODY 0x1f23 	///../ucode/register.h:3568
+#define P_AC3_MELODY 		CBUS_REG_ADDR(AC3_MELODY)
+#define AC3_VOCAL 0x1f24 	///../ucode/register.h:3569
+#define P_AC3_VOCAL 		CBUS_REG_ADDR(AC3_VOCAL)
+#define ASSIST_AMR_SCRATCH0 0x1f4f 	///../ucode/register.h:3579
+#define P_ASSIST_AMR_SCRATCH0 		CBUS_REG_ADDR(ASSIST_AMR_SCRATCH0)
+#define ASSIST_AMR_SCRATCH1 0x1f50 	///../ucode/register.h:3580
+#define P_ASSIST_AMR_SCRATCH1 		CBUS_REG_ADDR(ASSIST_AMR_SCRATCH1)
+#define ASSIST_AMR_SCRATCH2 0x1f51 	///../ucode/register.h:3581
+#define P_ASSIST_AMR_SCRATCH2 		CBUS_REG_ADDR(ASSIST_AMR_SCRATCH2)
+#define ASSIST_AMR_SCRATCH3 0x1f52 	///../ucode/register.h:3582
+#define P_ASSIST_AMR_SCRATCH3 		CBUS_REG_ADDR(ASSIST_AMR_SCRATCH3)
+#define ASSIST_HW_REV 0x1f53 	///../ucode/register.h:3583
+#define P_ASSIST_HW_REV 		CBUS_REG_ADDR(ASSIST_HW_REV)
+#define ASSIST_POR_CONFIG 0x1f55 	///../ucode/register.h:3585
+#define P_ASSIST_POR_CONFIG 		CBUS_REG_ADDR(ASSIST_POR_CONFIG)
+#define ASSIST_SPARE16_REG1 0x1f56 	///../ucode/register.h:3586
+#define P_ASSIST_SPARE16_REG1 		CBUS_REG_ADDR(ASSIST_SPARE16_REG1)
+#define ASSIST_SPARE16_REG2 0x1f57 	///../ucode/register.h:3587
+#define P_ASSIST_SPARE16_REG2 		CBUS_REG_ADDR(ASSIST_SPARE16_REG2)
+#define ASSIST_SPARE8_REG1 0x1f58 	///../ucode/register.h:3588
+#define P_ASSIST_SPARE8_REG1 		CBUS_REG_ADDR(ASSIST_SPARE8_REG1)
+#define ASSIST_SPARE8_REG2 0x1f59 	///../ucode/register.h:3589
+#define P_ASSIST_SPARE8_REG2 		CBUS_REG_ADDR(ASSIST_SPARE8_REG2)
+#define ASSIST_SPARE8_REG3 0x1f5a 	///../ucode/register.h:3592
+#define P_ASSIST_SPARE8_REG3 		CBUS_REG_ADDR(ASSIST_SPARE8_REG3)
+#define AC3_CTRL_REG1 0x1f5b 	///../ucode/register.h:3597
+#define P_AC3_CTRL_REG1 		CBUS_REG_ADDR(AC3_CTRL_REG1)
+#define AC3_CTRL_REG2 0x1f5c 	///../ucode/register.h:3598
+#define P_AC3_CTRL_REG2 		CBUS_REG_ADDR(AC3_CTRL_REG2)
+#define AC3_CTRL_REG3 0x1f5d 	///../ucode/register.h:3599
+#define P_AC3_CTRL_REG3 		CBUS_REG_ADDR(AC3_CTRL_REG3)
+#define AC3_CTRL_REG4 0x1f5e 	///../ucode/register.h:3600
+#define P_AC3_CTRL_REG4 		CBUS_REG_ADDR(AC3_CTRL_REG4)
+#define ASSIST_GEN_CNTL 0x1f68 	///../ucode/register.h:3602
+#define P_ASSIST_GEN_CNTL 		CBUS_REG_ADDR(ASSIST_GEN_CNTL)
+#define EE_ASSIST_MBOX0_IRQ_REG 0x1f70 	///../ucode/register.h:3603
+#define P_EE_ASSIST_MBOX0_IRQ_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX0_IRQ_REG)
+#define EE_ASSIST_MBOX0_CLR_REG 0x1f71 	///../ucode/register.h:3604
+#define P_EE_ASSIST_MBOX0_CLR_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX0_CLR_REG)
+#define EE_ASSIST_MBOX0_MASK 0x1f72 	///../ucode/register.h:3605
+#define P_EE_ASSIST_MBOX0_MASK 		CBUS_REG_ADDR(EE_ASSIST_MBOX0_MASK)
+#define EE_ASSIST_MBOX0_FIQ_SEL 0x1f73 	///../ucode/register.h:3606
+#define P_EE_ASSIST_MBOX0_FIQ_SEL 		CBUS_REG_ADDR(EE_ASSIST_MBOX0_FIQ_SEL)
+#define EE_ASSIST_MBOX1_IRQ_REG 0x1f74 	///../ucode/register.h:3607
+#define P_EE_ASSIST_MBOX1_IRQ_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX1_IRQ_REG)
+#define EE_ASSIST_MBOX1_CLR_REG 0x1f75 	///../ucode/register.h:3608
+#define P_EE_ASSIST_MBOX1_CLR_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX1_CLR_REG)
+#define EE_ASSIST_MBOX1_MASK 0x1f76 	///../ucode/register.h:3609
+#define P_EE_ASSIST_MBOX1_MASK 		CBUS_REG_ADDR(EE_ASSIST_MBOX1_MASK)
+#define EE_ASSIST_MBOX1_FIQ_SEL 0x1f77 	///../ucode/register.h:3610
+#define P_EE_ASSIST_MBOX1_FIQ_SEL 		CBUS_REG_ADDR(EE_ASSIST_MBOX1_FIQ_SEL)
+#define EE_ASSIST_MBOX2_IRQ_REG 0x1f78 	///../ucode/register.h:3611
+#define P_EE_ASSIST_MBOX2_IRQ_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX2_IRQ_REG)
+#define EE_ASSIST_MBOX2_CLR_REG 0x1f79 	///../ucode/register.h:3612
+#define P_EE_ASSIST_MBOX2_CLR_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX2_CLR_REG)
+#define EE_ASSIST_MBOX2_MASK 0x1f7a 	///../ucode/register.h:3613
+#define P_EE_ASSIST_MBOX2_MASK 		CBUS_REG_ADDR(EE_ASSIST_MBOX2_MASK)
+#define EE_ASSIST_MBOX2_FIQ_SEL 0x1f7b 	///../ucode/register.h:3614
+#define P_EE_ASSIST_MBOX2_FIQ_SEL 		CBUS_REG_ADDR(EE_ASSIST_MBOX2_FIQ_SEL)
+#define EE_ASSIST_MBOX3_IRQ_REG 0x1f7c 	///../ucode/register.h:3615
+#define P_EE_ASSIST_MBOX3_IRQ_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX3_IRQ_REG)
+#define EE_ASSIST_MBOX3_CLR_REG 0x1f7d 	///../ucode/register.h:3616
+#define P_EE_ASSIST_MBOX3_CLR_REG 		CBUS_REG_ADDR(EE_ASSIST_MBOX3_CLR_REG)
+#define EE_ASSIST_MBOX3_MASK 0x1f7e 	///../ucode/register.h:3617
+#define P_EE_ASSIST_MBOX3_MASK 		CBUS_REG_ADDR(EE_ASSIST_MBOX3_MASK)
+#define EE_ASSIST_MBOX3_FIQ_SEL 0x1f7f 	///../ucode/register.h:3618
+#define P_EE_ASSIST_MBOX3_FIQ_SEL 		CBUS_REG_ADDR(EE_ASSIST_MBOX3_FIQ_SEL)
+#define AUDIN_SPDIF_MODE 0x2800 	///../ucode/register.h:3625
+#define P_AUDIN_SPDIF_MODE 		CBUS_REG_ADDR(AUDIN_SPDIF_MODE)
+#define AUDIN_SPDIF_FS_CLK_RLTN 0x2801 	///../ucode/register.h:3637
+#define P_AUDIN_SPDIF_FS_CLK_RLTN 		CBUS_REG_ADDR(AUDIN_SPDIF_FS_CLK_RLTN)
+#define AUDIN_SPDIF_CHNL_STS_A 0x2802 	///../ucode/register.h:3643
+#define P_AUDIN_SPDIF_CHNL_STS_A 		CBUS_REG_ADDR(AUDIN_SPDIF_CHNL_STS_A)
+#define AUDIN_SPDIF_CHNL_STS_B 0x2803 	///../ucode/register.h:3644
+#define P_AUDIN_SPDIF_CHNL_STS_B 		CBUS_REG_ADDR(AUDIN_SPDIF_CHNL_STS_B)
+#define AUDIN_SPDIF_MISC 0x2804 	///../ucode/register.h:3645
+#define P_AUDIN_SPDIF_MISC 		CBUS_REG_ADDR(AUDIN_SPDIF_MISC)
+#define AUDIN_SPDIF_NPCM_PCPD 0x2805 	///../ucode/register.h:3646
+#define P_AUDIN_SPDIF_NPCM_PCPD 		CBUS_REG_ADDR(AUDIN_SPDIF_NPCM_PCPD)
+#define AUDIN_SPDIF_END 0x280f 	///../ucode/register.h:3647
+#define P_AUDIN_SPDIF_END 		CBUS_REG_ADDR(AUDIN_SPDIF_END)
+#define AUDIN_I2SIN_CTRL 0x2810 	///../ucode/register.h:3648
+#define P_AUDIN_I2SIN_CTRL 		CBUS_REG_ADDR(AUDIN_I2SIN_CTRL)
+#define AUDIN_SOURCE_SEL 0x2811 	///../ucode/register.h:3665
+#define P_AUDIN_SOURCE_SEL 		CBUS_REG_ADDR(AUDIN_SOURCE_SEL)
+#define AUDIN_DECODE_FORMAT 0x2812 	///../ucode/register.h:3682
+#define P_AUDIN_DECODE_FORMAT 		CBUS_REG_ADDR(AUDIN_DECODE_FORMAT)
+#define AUDIN_DECODE_CONTROL_STATUS 0x2813 	///../ucode/register.h:3692
+#define P_AUDIN_DECODE_CONTROL_STATUS 		CBUS_REG_ADDR(AUDIN_DECODE_CONTROL_STATUS)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_0 0x2814 	///../ucode/register.h:3694
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_0 		CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_0)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_1 0x2815 	///../ucode/register.h:3695
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_1 		CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_1)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_2 0x2816 	///../ucode/register.h:3696
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_2 		CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_2)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_3 0x2817 	///../ucode/register.h:3697
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_3 		CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_3)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_4 0x2818 	///../ucode/register.h:3698
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_4 		CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_4)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_5 0x2819 	///../ucode/register.h:3699
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_5 		CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_5)
+#define AUDIN_FIFO0_START 0x2820 	///../ucode/register.h:3700
+#define P_AUDIN_FIFO0_START 		CBUS_REG_ADDR(AUDIN_FIFO0_START)
+#define AUDIN_FIFO0_END 0x2821 	///../ucode/register.h:3701
+#define P_AUDIN_FIFO0_END 		CBUS_REG_ADDR(AUDIN_FIFO0_END)
+#define AUDIN_FIFO0_PTR 0x2822 	///../ucode/register.h:3702
+#define P_AUDIN_FIFO0_PTR 		CBUS_REG_ADDR(AUDIN_FIFO0_PTR)
+#define AUDIN_FIFO0_INTR 0x2823 	///../ucode/register.h:3703
+#define P_AUDIN_FIFO0_INTR 		CBUS_REG_ADDR(AUDIN_FIFO0_INTR)
+#define AUDIN_FIFO0_RDPTR 0x2824 	///../ucode/register.h:3704
+#define P_AUDIN_FIFO0_RDPTR 		CBUS_REG_ADDR(AUDIN_FIFO0_RDPTR)
+#define AUDIN_FIFO0_CTRL 0x2825 	///../ucode/register.h:3705
+#define P_AUDIN_FIFO0_CTRL 		CBUS_REG_ADDR(AUDIN_FIFO0_CTRL)
+#define AUDIN_FIFO0_CTRL1 0x2826 	///../ucode/register.h:3728
+#define P_AUDIN_FIFO0_CTRL1 		CBUS_REG_ADDR(AUDIN_FIFO0_CTRL1)
+#define AUDIN_FIFO0_LVL0 0x2827 	///../ucode/register.h:3741
+#define P_AUDIN_FIFO0_LVL0 		CBUS_REG_ADDR(AUDIN_FIFO0_LVL0)
+#define AUDIN_FIFO0_LVL1 0x2828 	///../ucode/register.h:3742
+#define P_AUDIN_FIFO0_LVL1 		CBUS_REG_ADDR(AUDIN_FIFO0_LVL1)
+#define AUDIN_FIFO0_LVL2 0x2829 	///../ucode/register.h:3743
+#define P_AUDIN_FIFO0_LVL2 		CBUS_REG_ADDR(AUDIN_FIFO0_LVL2)
+#define AUDIN_FIFO0_REQID 0x2830 	///../ucode/register.h:3744
+#define P_AUDIN_FIFO0_REQID 		CBUS_REG_ADDR(AUDIN_FIFO0_REQID)
+#define AUDIN_FIFO0_WRAP 0x2831 	///../ucode/register.h:3745
+#define P_AUDIN_FIFO0_WRAP 		CBUS_REG_ADDR(AUDIN_FIFO0_WRAP)
+#define AUDIN_FIFO1_START 0x2833 	///../ucode/register.h:3746
+#define P_AUDIN_FIFO1_START 		CBUS_REG_ADDR(AUDIN_FIFO1_START)
+#define AUDIN_FIFO1_END 0x2834 	///../ucode/register.h:3747
+#define P_AUDIN_FIFO1_END 		CBUS_REG_ADDR(AUDIN_FIFO1_END)
+#define AUDIN_FIFO1_PTR 0x2835 	///../ucode/register.h:3748
+#define P_AUDIN_FIFO1_PTR 		CBUS_REG_ADDR(AUDIN_FIFO1_PTR)
+#define AUDIN_FIFO1_INTR 0x2836 	///../ucode/register.h:3749
+#define P_AUDIN_FIFO1_INTR 		CBUS_REG_ADDR(AUDIN_FIFO1_INTR)
+#define AUDIN_FIFO1_RDPTR 0x2837 	///../ucode/register.h:3750
+#define P_AUDIN_FIFO1_RDPTR 		CBUS_REG_ADDR(AUDIN_FIFO1_RDPTR)
+#define AUDIN_FIFO1_CTRL 0x2838 	///../ucode/register.h:3751
+#define P_AUDIN_FIFO1_CTRL 		CBUS_REG_ADDR(AUDIN_FIFO1_CTRL)
+#define AUDIN_FIFO1_CTRL1 0x2839 	///../ucode/register.h:3772
+#define P_AUDIN_FIFO1_CTRL1 		CBUS_REG_ADDR(AUDIN_FIFO1_CTRL1)
+#define AUDIN_FIFO1_LVL0 0x2840 	///../ucode/register.h:3785
+#define P_AUDIN_FIFO1_LVL0 		CBUS_REG_ADDR(AUDIN_FIFO1_LVL0)
+#define AUDIN_FIFO1_LVL1 0x2841 	///../ucode/register.h:3786
+#define P_AUDIN_FIFO1_LVL1 		CBUS_REG_ADDR(AUDIN_FIFO1_LVL1)
+#define AUDIN_FIFO1_LVL2 0x2842 	///../ucode/register.h:3787
+#define P_AUDIN_FIFO1_LVL2 		CBUS_REG_ADDR(AUDIN_FIFO1_LVL2)
+#define AUDIN_FIFO1_REQID 0x2843 	///../ucode/register.h:3788
+#define P_AUDIN_FIFO1_REQID 		CBUS_REG_ADDR(AUDIN_FIFO1_REQID)
+#define AUDIN_FIFO1_WRAP 0x2844 	///../ucode/register.h:3789
+#define P_AUDIN_FIFO1_WRAP 		CBUS_REG_ADDR(AUDIN_FIFO1_WRAP)
+#define AUDIN_FIFO2_START 0x2845 	///../ucode/register.h:3790
+#define P_AUDIN_FIFO2_START 		CBUS_REG_ADDR(AUDIN_FIFO2_START)
+#define AUDIN_FIFO2_END 0x2846 	///../ucode/register.h:3791
+#define P_AUDIN_FIFO2_END 		CBUS_REG_ADDR(AUDIN_FIFO2_END)
+#define AUDIN_FIFO2_PTR 0x2847 	///../ucode/register.h:3792
+#define P_AUDIN_FIFO2_PTR 		CBUS_REG_ADDR(AUDIN_FIFO2_PTR)
+#define AUDIN_FIFO2_INTR 0x2848 	///../ucode/register.h:3793
+#define P_AUDIN_FIFO2_INTR 		CBUS_REG_ADDR(AUDIN_FIFO2_INTR)
+#define AUDIN_FIFO2_RDPTR 0x2849 	///../ucode/register.h:3794
+#define P_AUDIN_FIFO2_RDPTR 		CBUS_REG_ADDR(AUDIN_FIFO2_RDPTR)
+#define AUDIN_FIFO2_CTRL 0x284a 	///../ucode/register.h:3795
+#define P_AUDIN_FIFO2_CTRL 		CBUS_REG_ADDR(AUDIN_FIFO2_CTRL)
+#define AUDIN_FIFO2_CTRL1 0x284b 	///../ucode/register.h:3796
+#define P_AUDIN_FIFO2_CTRL1 		CBUS_REG_ADDR(AUDIN_FIFO2_CTRL1)
+#define AUDIN_FIFO2_LVL0 0x284c 	///../ucode/register.h:3797
+#define P_AUDIN_FIFO2_LVL0 		CBUS_REG_ADDR(AUDIN_FIFO2_LVL0)
+#define AUDIN_FIFO2_LVL1 0x284d 	///../ucode/register.h:3798
+#define P_AUDIN_FIFO2_LVL1 		CBUS_REG_ADDR(AUDIN_FIFO2_LVL1)
+#define AUDIN_FIFO2_LVL2 0x284e 	///../ucode/register.h:3799
+#define P_AUDIN_FIFO2_LVL2 		CBUS_REG_ADDR(AUDIN_FIFO2_LVL2)
+#define AUDIN_FIFO2_REQID 0x284f 	///../ucode/register.h:3800
+#define P_AUDIN_FIFO2_REQID 		CBUS_REG_ADDR(AUDIN_FIFO2_REQID)
+#define AUDIN_FIFO2_WRAP 0x2850 	///../ucode/register.h:3801
+#define P_AUDIN_FIFO2_WRAP 		CBUS_REG_ADDR(AUDIN_FIFO2_WRAP)
+#define AUDIN_INT_CTRL 0x2851 	///../ucode/register.h:3802
+#define P_AUDIN_INT_CTRL 		CBUS_REG_ADDR(AUDIN_INT_CTRL)
+#define AUDIN_FIFO_INT 0x2852 	///../ucode/register.h:3815
+#define P_AUDIN_FIFO_INT 		CBUS_REG_ADDR(AUDIN_FIFO_INT)
+#define PCMIN_CTRL0 0x2860 	///../ucode/register.h:3827
+#define P_PCMIN_CTRL0 		CBUS_REG_ADDR(PCMIN_CTRL0)
+#define PCMIN_CTRL1 0x2861 	///../ucode/register.h:3846
+#define P_PCMIN_CTRL1 		CBUS_REG_ADDR(PCMIN_CTRL1)
+#define PCMOUT_CTRL0 0x2870 	///../ucode/register.h:3879
+#define P_PCMOUT_CTRL0 		CBUS_REG_ADDR(PCMOUT_CTRL0)
+#define PCMOUT_CTRL1 0x2871 	///../ucode/register.h:3890
+#define P_PCMOUT_CTRL1 		CBUS_REG_ADDR(PCMOUT_CTRL1)
+#define PCMOUT_CTRL2 0x2872 	///../ucode/register.h:3900
+#define P_PCMOUT_CTRL2 		CBUS_REG_ADDR(PCMOUT_CTRL2)
+#define PCMOUT_CTRL3 0x2873 	///../ucode/register.h:3906
+#define P_PCMOUT_CTRL3 		CBUS_REG_ADDR(PCMOUT_CTRL3)
+#define AUDOUT_CTRL 0x2880 	///../ucode/register.h:3937
+#define P_AUDOUT_CTRL 		CBUS_REG_ADDR(AUDOUT_CTRL)
+#define AUDOUT_CTRL1 0x2881 	///../ucode/register.h:3953
+#define P_AUDOUT_CTRL1 		CBUS_REG_ADDR(AUDOUT_CTRL1)
+#define AUDOUT_BUF0_STA 0x2882 	///../ucode/register.h:3956
+#define P_AUDOUT_BUF0_STA 		CBUS_REG_ADDR(AUDOUT_BUF0_STA)
+#define AUDOUT_BUF0_EDA 0x2883 	///../ucode/register.h:3958
+#define P_AUDOUT_BUF0_EDA 		CBUS_REG_ADDR(AUDOUT_BUF0_EDA)
+#define AUDOUT_BUF0_WPTR 0x2884 	///../ucode/register.h:3960
+#define P_AUDOUT_BUF0_WPTR 		CBUS_REG_ADDR(AUDOUT_BUF0_WPTR)
+#define AUDOUT_BUF1_STA 0x2885 	///../ucode/register.h:3962
+#define P_AUDOUT_BUF1_STA 		CBUS_REG_ADDR(AUDOUT_BUF1_STA)
+#define AUDOUT_BUF1_EDA 0x2886 	///../ucode/register.h:3964
+#define P_AUDOUT_BUF1_EDA 		CBUS_REG_ADDR(AUDOUT_BUF1_EDA)
+#define AUDOUT_BUF1_WPTR 0x2887 	///../ucode/register.h:3966
+#define P_AUDOUT_BUF1_WPTR 		CBUS_REG_ADDR(AUDOUT_BUF1_WPTR)
+#define AUDOUT_FIFO_RPTR 0x2888 	///../ucode/register.h:3968
+#define P_AUDOUT_FIFO_RPTR 		CBUS_REG_ADDR(AUDOUT_FIFO_RPTR)
+#define AUDOUT_INTR_PTR 0x2889 	///../ucode/register.h:3970
+#define P_AUDOUT_INTR_PTR 		CBUS_REG_ADDR(AUDOUT_INTR_PTR)
+#define AUDOUT_FIFO_STS 0x288a 	///../ucode/register.h:3972
+#define P_AUDOUT_FIFO_STS 		CBUS_REG_ADDR(AUDOUT_FIFO_STS)
+#define AUDIN_HDMI_MEAS_CTRL 0x28a0 	///../ucode/register.h:3987
+#define P_AUDIN_HDMI_MEAS_CTRL 		CBUS_REG_ADDR(AUDIN_HDMI_MEAS_CTRL)
+#define AUDIN_HDMI_MEAS_CYCLES_M1 0x28a1 	///../ucode/register.h:3988
+#define P_AUDIN_HDMI_MEAS_CYCLES_M1 		CBUS_REG_ADDR(AUDIN_HDMI_MEAS_CYCLES_M1)
+#define AUDIN_HDMI_MEAS_INTR_MASKN 0x28a2 	///../ucode/register.h:3989
+#define P_AUDIN_HDMI_MEAS_INTR_MASKN 		CBUS_REG_ADDR(AUDIN_HDMI_MEAS_INTR_MASKN)
+#define AUDIN_HDMI_MEAS_INTR_STAT 0x28a3 	///../ucode/register.h:3990
+#define P_AUDIN_HDMI_MEAS_INTR_STAT 		CBUS_REG_ADDR(AUDIN_HDMI_MEAS_INTR_STAT)
+#define AUDIN_HDMI_REF_CYCLES_STAT_0 0x28a4 	///../ucode/register.h:3991
+#define P_AUDIN_HDMI_REF_CYCLES_STAT_0 		CBUS_REG_ADDR(AUDIN_HDMI_REF_CYCLES_STAT_0)
+#define AUDIN_HDMI_REF_CYCLES_STAT_1 0x28a5 	///../ucode/register.h:3992
+#define P_AUDIN_HDMI_REF_CYCLES_STAT_1 		CBUS_REG_ADDR(AUDIN_HDMI_REF_CYCLES_STAT_1)
+#define AUDIN_HDMIRX_AFIFO_STAT 0x28a6 	///../ucode/register.h:3993
+#define P_AUDIN_HDMIRX_AFIFO_STAT 		CBUS_REG_ADDR(AUDIN_HDMIRX_AFIFO_STAT)
+#define AUDIN_FIFO0_PIO_STS 0x28b0 	///../ucode/register.h:3994
+#define P_AUDIN_FIFO0_PIO_STS 		CBUS_REG_ADDR(AUDIN_FIFO0_PIO_STS)
+#define AUDIN_FIFO0_PIO_RDL 0x28b1 	///../ucode/register.h:3995
+#define P_AUDIN_FIFO0_PIO_RDL 		CBUS_REG_ADDR(AUDIN_FIFO0_PIO_RDL)
+#define AUDIN_FIFO0_PIO_RDH 0x28b2 	///../ucode/register.h:3996
+#define P_AUDIN_FIFO0_PIO_RDH 		CBUS_REG_ADDR(AUDIN_FIFO0_PIO_RDH)
+#define AUDIN_FIFO1_PIO_STS 0x28b3 	///../ucode/register.h:3997
+#define P_AUDIN_FIFO1_PIO_STS 		CBUS_REG_ADDR(AUDIN_FIFO1_PIO_STS)
+#define AUDIN_FIFO1_PIO_RDL 0x28b4 	///../ucode/register.h:3998
+#define P_AUDIN_FIFO1_PIO_RDL 		CBUS_REG_ADDR(AUDIN_FIFO1_PIO_RDL)
+#define AUDIN_FIFO1_PIO_RDH 0x28b5 	///../ucode/register.h:3999
+#define P_AUDIN_FIFO1_PIO_RDH 		CBUS_REG_ADDR(AUDIN_FIFO1_PIO_RDH)
+#define AUDIN_FIFO2_PIO_STS 0x28b6 	///../ucode/register.h:4000
+#define P_AUDIN_FIFO2_PIO_STS 		CBUS_REG_ADDR(AUDIN_FIFO2_PIO_STS)
+#define AUDIN_FIFO2_PIO_RDL 0x28b7 	///../ucode/register.h:4001
+#define P_AUDIN_FIFO2_PIO_RDL 		CBUS_REG_ADDR(AUDIN_FIFO2_PIO_RDL)
+#define AUDIN_FIFO2_PIO_RDH 0x28b8 	///../ucode/register.h:4002
+#define P_AUDIN_FIFO2_PIO_RDH 		CBUS_REG_ADDR(AUDIN_FIFO2_PIO_RDH)
+#define AUDOUT_FIFO_PIO_STS 0x28b9 	///../ucode/register.h:4003
+#define P_AUDOUT_FIFO_PIO_STS 		CBUS_REG_ADDR(AUDOUT_FIFO_PIO_STS)
+#define AUDOUT_FIFO_PIO_WRL 0x28ba 	///../ucode/register.h:4004
+#define P_AUDOUT_FIFO_PIO_WRL 		CBUS_REG_ADDR(AUDOUT_FIFO_PIO_WRL)
+#define AUDOUT_FIFO_PIO_WRH 0x28bb 	///../ucode/register.h:4006
+#define P_AUDOUT_FIFO_PIO_WRH 		CBUS_REG_ADDR(AUDOUT_FIFO_PIO_WRH)
+#define AUDIN_ADDR_END 0x28bf 	///../ucode/register.h:4013
+#define P_AUDIN_ADDR_END 		CBUS_REG_ADDR(AUDIN_ADDR_END)
+#define VDIN_SCALE_COEF_IDX 0x1200 	///../ucode/register.h:4035
+#define P_VDIN_SCALE_COEF_IDX 		VCBUS_REG_ADDR(VDIN_SCALE_COEF_IDX)
+#define VDIN_SCALE_COEF 0x1201 	///../ucode/register.h:4036
+#define P_VDIN_SCALE_COEF 		VCBUS_REG_ADDR(VDIN_SCALE_COEF)
+#define VDIN_COM_CTRL0 0x1202 	///../ucode/register.h:4051
+#define P_VDIN_COM_CTRL0 		VCBUS_REG_ADDR(VDIN_COM_CTRL0)
+#define VDIN_ACTIVE_MAX_PIX_CNT_STATUS 0x1203 	///../ucode/register.h:4054
+#define P_VDIN_ACTIVE_MAX_PIX_CNT_STATUS 		VCBUS_REG_ADDR(VDIN_ACTIVE_MAX_PIX_CNT_STATUS)
+#define VDIN_LCNT_STATUS 0x1204 	///../ucode/register.h:4057
+#define P_VDIN_LCNT_STATUS 		VCBUS_REG_ADDR(VDIN_LCNT_STATUS)
+#define VDIN_COM_STATUS0 0x1205 	///../ucode/register.h:4063
+#define P_VDIN_COM_STATUS0 		VCBUS_REG_ADDR(VDIN_COM_STATUS0)
+#define VDIN_COM_STATUS1 0x1206 	///../ucode/register.h:4073
+#define P_VDIN_COM_STATUS1 		VCBUS_REG_ADDR(VDIN_COM_STATUS1)
+#define VDIN_LCNT_SHADOW_STATUS 0x1207 	///../ucode/register.h:4076
+#define P_VDIN_LCNT_SHADOW_STATUS 		VCBUS_REG_ADDR(VDIN_LCNT_SHADOW_STATUS)
+#define VDIN_ASFIFO_CTRL0 0x1208 	///../ucode/register.h:4088
+#define P_VDIN_ASFIFO_CTRL0 		VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL0)
+#define VDIN_ASFIFO_CTRL1 0x1209 	///../ucode/register.h:4091
+#define P_VDIN_ASFIFO_CTRL1 		VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL1)
+#define VDIN_WIDTHM1I_WIDTHM1O 0x120a 	///../ucode/register.h:4094
+#define P_VDIN_WIDTHM1I_WIDTHM1O 		VCBUS_REG_ADDR(VDIN_WIDTHM1I_WIDTHM1O)
+#define VDIN_SC_MISC_CTRL 0x120b 	///../ucode/register.h:4105
+#define P_VDIN_SC_MISC_CTRL 		VCBUS_REG_ADDR(VDIN_SC_MISC_CTRL)
+#define VDIN_HSC_PHASE_STEP 0x120c 	///../ucode/register.h:4108
+#define P_VDIN_HSC_PHASE_STEP 		VCBUS_REG_ADDR(VDIN_HSC_PHASE_STEP)
+#define VDIN_HSC_INI_CTRL 0x120d 	///../ucode/register.h:4112
+#define P_VDIN_HSC_INI_CTRL 		VCBUS_REG_ADDR(VDIN_HSC_INI_CTRL)
+#define VDIN_COM_STATUS2 0x120e 	///../ucode/register.h:4120
+#define P_VDIN_COM_STATUS2 		VCBUS_REG_ADDR(VDIN_COM_STATUS2)
+#define VDIN_ASFIFO_CTRL2 0x120f 	///../ucode/register.h:4128
+#define P_VDIN_ASFIFO_CTRL2 		VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL2)
+#define VDIN_MATRIX_CTRL 0x1210 	///../ucode/register.h:4135
+#define P_VDIN_MATRIX_CTRL 		VCBUS_REG_ADDR(VDIN_MATRIX_CTRL)
+#define VDIN_MATRIX_COEF00_01 0x1211 	///../ucode/register.h:4138
+#define P_VDIN_MATRIX_COEF00_01 		VCBUS_REG_ADDR(VDIN_MATRIX_COEF00_01)
+#define VDIN_MATRIX_COEF02_10 0x1212 	///../ucode/register.h:4141
+#define P_VDIN_MATRIX_COEF02_10 		VCBUS_REG_ADDR(VDIN_MATRIX_COEF02_10)
+#define VDIN_MATRIX_COEF11_12 0x1213 	///../ucode/register.h:4144
+#define P_VDIN_MATRIX_COEF11_12 		VCBUS_REG_ADDR(VDIN_MATRIX_COEF11_12)
+#define VDIN_MATRIX_COEF20_21 0x1214 	///../ucode/register.h:4147
+#define P_VDIN_MATRIX_COEF20_21 		VCBUS_REG_ADDR(VDIN_MATRIX_COEF20_21)
+#define VDIN_MATRIX_COEF22 0x1215 	///../ucode/register.h:4148
+#define P_VDIN_MATRIX_COEF22 		VCBUS_REG_ADDR(VDIN_MATRIX_COEF22)
+#define VDIN_MATRIX_OFFSET0_1 0x1216 	///../ucode/register.h:4151
+#define P_VDIN_MATRIX_OFFSET0_1 		VCBUS_REG_ADDR(VDIN_MATRIX_OFFSET0_1)
+#define VDIN_MATRIX_OFFSET2 0x1217 	///../ucode/register.h:4153
+#define P_VDIN_MATRIX_OFFSET2 		VCBUS_REG_ADDR(VDIN_MATRIX_OFFSET2)
+#define VDIN_MATRIX_PRE_OFFSET0_1 0x1218 	///../ucode/register.h:4156
+#define P_VDIN_MATRIX_PRE_OFFSET0_1 		VCBUS_REG_ADDR(VDIN_MATRIX_PRE_OFFSET0_1)
+#define VDIN_MATRIX_PRE_OFFSET2 0x1219 	///../ucode/register.h:4158
+#define P_VDIN_MATRIX_PRE_OFFSET2 		VCBUS_REG_ADDR(VDIN_MATRIX_PRE_OFFSET2)
+#define VDIN_LFIFO_CTRL 0x121a 	///../ucode/register.h:4160
+#define P_VDIN_LFIFO_CTRL 		VCBUS_REG_ADDR(VDIN_LFIFO_CTRL)
+#define VDIN_COM_GCLK_CTRL 0x121b 	///../ucode/register.h:4161
+#define P_VDIN_COM_GCLK_CTRL 		VCBUS_REG_ADDR(VDIN_COM_GCLK_CTRL)
+#define VDIN_INTF_WIDTHM1 0x121c 	///../ucode/register.h:4163
+#define P_VDIN_INTF_WIDTHM1 		VCBUS_REG_ADDR(VDIN_INTF_WIDTHM1)
+#define VDIN_WR_CTRL2 0x121f 	///../ucode/register.h:4166
+#define P_VDIN_WR_CTRL2 		VCBUS_REG_ADDR(VDIN_WR_CTRL2)
+#define VDIN_WR_CTRL 0x1220 	///../ucode/register.h:4193
+#define P_VDIN_WR_CTRL 		VCBUS_REG_ADDR(VDIN_WR_CTRL)
+#define VDIN_WR_H_START_END 0x1221 	///../ucode/register.h:4197
+#define P_VDIN_WR_H_START_END 		VCBUS_REG_ADDR(VDIN_WR_H_START_END)
+#define VDIN_WR_V_START_END 0x1222 	///../ucode/register.h:4201
+#define P_VDIN_WR_V_START_END 		VCBUS_REG_ADDR(VDIN_WR_V_START_END)
+#define VDIN_VSC_PHASE_STEP 0x1223 	///../ucode/register.h:4204
+#define P_VDIN_VSC_PHASE_STEP 		VCBUS_REG_ADDR(VDIN_VSC_PHASE_STEP)
+#define VDIN_VSC_INI_CTRL 0x1224 	///../ucode/register.h:4209
+#define P_VDIN_VSC_INI_CTRL 		VCBUS_REG_ADDR(VDIN_VSC_INI_CTRL)
+#define VDIN_SCIN_HEIGHTM1 0x1225 	///../ucode/register.h:4211
+#define P_VDIN_SCIN_HEIGHTM1 		VCBUS_REG_ADDR(VDIN_SCIN_HEIGHTM1)
+#define VDIN_DUMMY_DATA 0x1226 	///../ucode/register.h:4215
+#define P_VDIN_DUMMY_DATA 		VCBUS_REG_ADDR(VDIN_DUMMY_DATA)
+#define VDIN_MATRIX_PROBE_COLOR 0x1228 	///../ucode/register.h:4220
+#define P_VDIN_MATRIX_PROBE_COLOR 		VCBUS_REG_ADDR(VDIN_MATRIX_PROBE_COLOR)
+#define VDIN_MATRIX_HL_COLOR 0x1229 	///../ucode/register.h:4224
+#define P_VDIN_MATRIX_HL_COLOR 		VCBUS_REG_ADDR(VDIN_MATRIX_HL_COLOR)
+#define VDIN_MATRIX_PROBE_POS 0x122a 	///../ucode/register.h:4227
+#define P_VDIN_MATRIX_PROBE_POS 		VCBUS_REG_ADDR(VDIN_MATRIX_PROBE_POS)
+#define VDIN_CHROMA_ADDR_PORT 0x122b 	///../ucode/register.h:4228
+#define P_VDIN_CHROMA_ADDR_PORT 		VCBUS_REG_ADDR(VDIN_CHROMA_ADDR_PORT)
+#define VDIN_CHROMA_DATA_PORT 0x122c 	///../ucode/register.h:4229
+#define P_VDIN_CHROMA_DATA_PORT 		VCBUS_REG_ADDR(VDIN_CHROMA_DATA_PORT)
+#define VDIN_CM_BRI_CON_CTRL 0x122d 	///../ucode/register.h:4231
+#define P_VDIN_CM_BRI_CON_CTRL 		VCBUS_REG_ADDR(VDIN_CM_BRI_CON_CTRL)
+#define VDIN_GO_LINE_CTRL 0x122f 	///../ucode/register.h:4235
+#define P_VDIN_GO_LINE_CTRL 		VCBUS_REG_ADDR(VDIN_GO_LINE_CTRL)
+#define VDIN_HIST_CTRL 0x1230 	///../ucode/register.h:4242
+#define P_VDIN_HIST_CTRL 		VCBUS_REG_ADDR(VDIN_HIST_CTRL)
+#define VDIN_HIST_H_START_END 0x1231 	///../ucode/register.h:4245
+#define P_VDIN_HIST_H_START_END 		VCBUS_REG_ADDR(VDIN_HIST_H_START_END)
+#define VDIN_HIST_V_START_END 0x1232 	///../ucode/register.h:4248
+#define P_VDIN_HIST_V_START_END 		VCBUS_REG_ADDR(VDIN_HIST_V_START_END)
+#define VDIN_HIST_MAX_MIN 0x1233 	///../ucode/register.h:4252
+#define P_VDIN_HIST_MAX_MIN 		VCBUS_REG_ADDR(VDIN_HIST_MAX_MIN)
+#define VDIN_HIST_SPL_VAL 0x1234 	///../ucode/register.h:4256
+#define P_VDIN_HIST_SPL_VAL 		VCBUS_REG_ADDR(VDIN_HIST_SPL_VAL)
+#define VDIN_HIST_SPL_PIX_CNT 0x1235 	///../ucode/register.h:4260
+#define P_VDIN_HIST_SPL_PIX_CNT 		VCBUS_REG_ADDR(VDIN_HIST_SPL_PIX_CNT)
+#define VDIN_HIST_CHROMA_SUM 0x1236 	///../ucode/register.h:4264
+#define P_VDIN_HIST_CHROMA_SUM 		VCBUS_REG_ADDR(VDIN_HIST_CHROMA_SUM)
+#define VDIN_DNLP_HIST00 0x1237 	///../ucode/register.h:4275
+#define P_VDIN_DNLP_HIST00 		VCBUS_REG_ADDR(VDIN_DNLP_HIST00)
+#define VDIN_DNLP_HIST01 0x1238 	///../ucode/register.h:4276
+#define P_VDIN_DNLP_HIST01 		VCBUS_REG_ADDR(VDIN_DNLP_HIST01)
+#define VDIN_DNLP_HIST02 0x1239 	///../ucode/register.h:4277
+#define P_VDIN_DNLP_HIST02 		VCBUS_REG_ADDR(VDIN_DNLP_HIST02)
+#define VDIN_DNLP_HIST03 0x123a 	///../ucode/register.h:4278
+#define P_VDIN_DNLP_HIST03 		VCBUS_REG_ADDR(VDIN_DNLP_HIST03)
+#define VDIN_DNLP_HIST04 0x123b 	///../ucode/register.h:4279
+#define P_VDIN_DNLP_HIST04 		VCBUS_REG_ADDR(VDIN_DNLP_HIST04)
+#define VDIN_DNLP_HIST05 0x123c 	///../ucode/register.h:4280
+#define P_VDIN_DNLP_HIST05 		VCBUS_REG_ADDR(VDIN_DNLP_HIST05)
+#define VDIN_DNLP_HIST06 0x123d 	///../ucode/register.h:4281
+#define P_VDIN_DNLP_HIST06 		VCBUS_REG_ADDR(VDIN_DNLP_HIST06)
+#define VDIN_DNLP_HIST07 0x123e 	///../ucode/register.h:4282
+#define P_VDIN_DNLP_HIST07 		VCBUS_REG_ADDR(VDIN_DNLP_HIST07)
+#define VDIN_DNLP_HIST08 0x123f 	///../ucode/register.h:4283
+#define P_VDIN_DNLP_HIST08 		VCBUS_REG_ADDR(VDIN_DNLP_HIST08)
+#define VDIN_DNLP_HIST09 0x1240 	///../ucode/register.h:4284
+#define P_VDIN_DNLP_HIST09 		VCBUS_REG_ADDR(VDIN_DNLP_HIST09)
+#define VDIN_DNLP_HIST10 0x1241 	///../ucode/register.h:4285
+#define P_VDIN_DNLP_HIST10 		VCBUS_REG_ADDR(VDIN_DNLP_HIST10)
+#define VDIN_DNLP_HIST11 0x1242 	///../ucode/register.h:4286
+#define P_VDIN_DNLP_HIST11 		VCBUS_REG_ADDR(VDIN_DNLP_HIST11)
+#define VDIN_DNLP_HIST12 0x1243 	///../ucode/register.h:4287
+#define P_VDIN_DNLP_HIST12 		VCBUS_REG_ADDR(VDIN_DNLP_HIST12)
+#define VDIN_DNLP_HIST13 0x1244 	///../ucode/register.h:4288
+#define P_VDIN_DNLP_HIST13 		VCBUS_REG_ADDR(VDIN_DNLP_HIST13)
+#define VDIN_DNLP_HIST14 0x1245 	///../ucode/register.h:4289
+#define P_VDIN_DNLP_HIST14 		VCBUS_REG_ADDR(VDIN_DNLP_HIST14)
+#define VDIN_DNLP_HIST15 0x1246 	///../ucode/register.h:4290
+#define P_VDIN_DNLP_HIST15 		VCBUS_REG_ADDR(VDIN_DNLP_HIST15)
+#define VDIN_DNLP_HIST16 0x1247 	///../ucode/register.h:4291
+#define P_VDIN_DNLP_HIST16 		VCBUS_REG_ADDR(VDIN_DNLP_HIST16)
+#define VDIN_DNLP_HIST17 0x1248 	///../ucode/register.h:4292
+#define P_VDIN_DNLP_HIST17 		VCBUS_REG_ADDR(VDIN_DNLP_HIST17)
+#define VDIN_DNLP_HIST18 0x1249 	///../ucode/register.h:4293
+#define P_VDIN_DNLP_HIST18 		VCBUS_REG_ADDR(VDIN_DNLP_HIST18)
+#define VDIN_DNLP_HIST19 0x124a 	///../ucode/register.h:4294
+#define P_VDIN_DNLP_HIST19 		VCBUS_REG_ADDR(VDIN_DNLP_HIST19)
+#define VDIN_DNLP_HIST20 0x124b 	///../ucode/register.h:4295
+#define P_VDIN_DNLP_HIST20 		VCBUS_REG_ADDR(VDIN_DNLP_HIST20)
+#define VDIN_DNLP_HIST21 0x124c 	///../ucode/register.h:4296
+#define P_VDIN_DNLP_HIST21 		VCBUS_REG_ADDR(VDIN_DNLP_HIST21)
+#define VDIN_DNLP_HIST22 0x124d 	///../ucode/register.h:4297
+#define P_VDIN_DNLP_HIST22 		VCBUS_REG_ADDR(VDIN_DNLP_HIST22)
+#define VDIN_DNLP_HIST23 0x124e 	///../ucode/register.h:4298
+#define P_VDIN_DNLP_HIST23 		VCBUS_REG_ADDR(VDIN_DNLP_HIST23)
+#define VDIN_DNLP_HIST24 0x124f 	///../ucode/register.h:4299
+#define P_VDIN_DNLP_HIST24 		VCBUS_REG_ADDR(VDIN_DNLP_HIST24)
+#define VDIN_DNLP_HIST25 0x1250 	///../ucode/register.h:4300
+#define P_VDIN_DNLP_HIST25 		VCBUS_REG_ADDR(VDIN_DNLP_HIST25)
+#define VDIN_DNLP_HIST26 0x1251 	///../ucode/register.h:4301
+#define P_VDIN_DNLP_HIST26 		VCBUS_REG_ADDR(VDIN_DNLP_HIST26)
+#define VDIN_DNLP_HIST27 0x1252 	///../ucode/register.h:4302
+#define P_VDIN_DNLP_HIST27 		VCBUS_REG_ADDR(VDIN_DNLP_HIST27)
+#define VDIN_DNLP_HIST28 0x1253 	///../ucode/register.h:4303
+#define P_VDIN_DNLP_HIST28 		VCBUS_REG_ADDR(VDIN_DNLP_HIST28)
+#define VDIN_DNLP_HIST29 0x1254 	///../ucode/register.h:4304
+#define P_VDIN_DNLP_HIST29 		VCBUS_REG_ADDR(VDIN_DNLP_HIST29)
+#define VDIN_DNLP_HIST30 0x1255 	///../ucode/register.h:4305
+#define P_VDIN_DNLP_HIST30 		VCBUS_REG_ADDR(VDIN_DNLP_HIST30)
+#define VDIN_DNLP_HIST31 0x1256 	///../ucode/register.h:4306
+#define P_VDIN_DNLP_HIST31 		VCBUS_REG_ADDR(VDIN_DNLP_HIST31)
+#define VDIN_LDIM_STTS_HIST_REGION_IDX 0x1257 	///../ucode/register.h:4315
+#define P_VDIN_LDIM_STTS_HIST_REGION_IDX 		VCBUS_REG_ADDR(VDIN_LDIM_STTS_HIST_REGION_IDX)
+#define VDIN_LDIM_STTS_HIST_SET_REGION 0x1258 	///../ucode/register.h:4338
+#define P_VDIN_LDIM_STTS_HIST_SET_REGION 		VCBUS_REG_ADDR(VDIN_LDIM_STTS_HIST_SET_REGION)
+#define VDIN_LDIM_STTS_HIST_READ_REGION 0x1259 	///../ucode/register.h:4340
+#define P_VDIN_LDIM_STTS_HIST_READ_REGION 		VCBUS_REG_ADDR(VDIN_LDIM_STTS_HIST_READ_REGION)
+#define VDIN_MEAS_CTRL0 0x125a 	///../ucode/register.h:4347
+#define P_VDIN_MEAS_CTRL0 		VCBUS_REG_ADDR(VDIN_MEAS_CTRL0)
+#define VDIN_MEAS_VS_COUNT_HI 0x125b 	///../ucode/register.h:4351
+#define P_VDIN_MEAS_VS_COUNT_HI 		VCBUS_REG_ADDR(VDIN_MEAS_VS_COUNT_HI)
+#define VDIN_MEAS_VS_COUNT_LO 0x125c 	///../ucode/register.h:4354
+#define P_VDIN_MEAS_VS_COUNT_LO 		VCBUS_REG_ADDR(VDIN_MEAS_VS_COUNT_LO)
+#define VDIN_MEAS_HS_RANGE 0x125d 	///../ucode/register.h:4362
+#define P_VDIN_MEAS_HS_RANGE 		VCBUS_REG_ADDR(VDIN_MEAS_HS_RANGE)
+#define VDIN_MEAS_HS_COUNT 0x125e 	///../ucode/register.h:4370
+#define P_VDIN_MEAS_HS_COUNT 		VCBUS_REG_ADDR(VDIN_MEAS_HS_COUNT)
+#define VDIN_BLKBAR_CTRL1 0x125f 	///../ucode/register.h:4373
+#define P_VDIN_BLKBAR_CTRL1 		VCBUS_REG_ADDR(VDIN_BLKBAR_CTRL1)
+#define VDIN_BLKBAR_CTRL0 0x1260 	///../ucode/register.h:4382
+#define P_VDIN_BLKBAR_CTRL0 		VCBUS_REG_ADDR(VDIN_BLKBAR_CTRL0)
+#define VDIN_BLKBAR_H_START_END 0x1261 	///../ucode/register.h:4387
+#define P_VDIN_BLKBAR_H_START_END 		VCBUS_REG_ADDR(VDIN_BLKBAR_H_START_END)
+#define VDIN_BLKBAR_V_START_END 0x1262 	///../ucode/register.h:4392
+#define P_VDIN_BLKBAR_V_START_END 		VCBUS_REG_ADDR(VDIN_BLKBAR_V_START_END)
+#define VDIN_BLKBAR_CNT_THRESHOLD 0x1263 	///../ucode/register.h:4395
+#define P_VDIN_BLKBAR_CNT_THRESHOLD 		VCBUS_REG_ADDR(VDIN_BLKBAR_CNT_THRESHOLD)
+#define VDIN_BLKBAR_ROW_TH1_TH2 0x1264 	///../ucode/register.h:4400
+#define P_VDIN_BLKBAR_ROW_TH1_TH2 		VCBUS_REG_ADDR(VDIN_BLKBAR_ROW_TH1_TH2)
+#define VDIN_BLKBAR_IND_LEFT_START_END 0x1265 	///../ucode/register.h:4406
+#define P_VDIN_BLKBAR_IND_LEFT_START_END 		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_LEFT_START_END)
+#define VDIN_BLKBAR_IND_RIGHT_START_END 0x1266 	///../ucode/register.h:4412
+#define P_VDIN_BLKBAR_IND_RIGHT_START_END 		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_RIGHT_START_END)
+#define VDIN_BLKBAR_IND_LEFT1_CNT 0x1267 	///../ucode/register.h:4416
+#define P_VDIN_BLKBAR_IND_LEFT1_CNT 		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_LEFT1_CNT)
+#define VDIN_BLKBAR_IND_LEFT2_CNT 0x1268 	///../ucode/register.h:4420
+#define P_VDIN_BLKBAR_IND_LEFT2_CNT 		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_LEFT2_CNT)
+#define VDIN_BLKBAR_IND_RIGHT1_CNT 0x1269 	///../ucode/register.h:4424
+#define P_VDIN_BLKBAR_IND_RIGHT1_CNT 		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_RIGHT1_CNT)
+#define VDIN_BLKBAR_IND_RIGHT2_CNT 0x126a 	///../ucode/register.h:4428
+#define P_VDIN_BLKBAR_IND_RIGHT2_CNT 		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_RIGHT2_CNT)
+#define VDIN_BLKBAR_STATUS0 0x126b 	///../ucode/register.h:4435
+#define P_VDIN_BLKBAR_STATUS0 		VCBUS_REG_ADDR(VDIN_BLKBAR_STATUS0)
+#define VDIN_BLKBAR_STATUS1 0x126c 	///../ucode/register.h:4441
+#define P_VDIN_BLKBAR_STATUS1 		VCBUS_REG_ADDR(VDIN_BLKBAR_STATUS1)
+#define VDIN_WIN_H_START_END 0x126d 	///../ucode/register.h:4444
+#define P_VDIN_WIN_H_START_END 		VCBUS_REG_ADDR(VDIN_WIN_H_START_END)
+#define VDIN_WIN_V_START_END 0x126e 	///../ucode/register.h:4447
+#define P_VDIN_WIN_V_START_END 		VCBUS_REG_ADDR(VDIN_WIN_V_START_END)
+#define VDIN_ASFIFO_CTRL3 0x126f 	///../ucode/register.h:4451
+#define P_VDIN_ASFIFO_CTRL3 		VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL3)
+#define VDIN0_SCALE_COEF_IDX ((0x00 << 2) + VDIN_SCALE_COEF_IDX )) 	///../ucode/register.h:4454
+#define P_VDIN0_SCALE_COEF_IDX 		VCBUS_REG_ADDR(VDIN0_SCALE_COEF_IDX)
+#define VDIN0_SCALE_COEF ((0x00 << 2) + VDIN_SCALE_COEF )) 	///../ucode/register.h:4455
+#define P_VDIN0_SCALE_COEF 		VCBUS_REG_ADDR(VDIN0_SCALE_COEF)
+#define VDIN0_COM_CTRL0 ((0x00 << 2) + VDIN_COM_CTRL0 )) 	///../ucode/register.h:4456
+#define P_VDIN0_COM_CTRL0 		VCBUS_REG_ADDR(VDIN0_COM_CTRL0)
+#define VDIN0_ACTIVE_MAX_PIX_CNT_STATUS ((0x00 << 2) + VDIN_ACTIVE_MAX_PIX_CNT_STATUS )) 	///../ucode/register.h:4457
+#define P_VDIN0_ACTIVE_MAX_PIX_CNT_STATUS 		VCBUS_REG_ADDR(VDIN0_ACTIVE_MAX_PIX_CNT_STATUS)
+#define VDIN0_LCNT_STATUS ((0x00 << 2) + VDIN_LCNT_STATUS )) 	///../ucode/register.h:4458
+#define P_VDIN0_LCNT_STATUS 		VCBUS_REG_ADDR(VDIN0_LCNT_STATUS)
+#define VDIN0_COM_STATUS0 ((0x00 << 2) + VDIN_COM_STATUS0 )) 	///../ucode/register.h:4459
+#define P_VDIN0_COM_STATUS0 		VCBUS_REG_ADDR(VDIN0_COM_STATUS0)
+#define VDIN0_COM_STATUS1 ((0x00 << 2) + VDIN_COM_STATUS1 )) 	///../ucode/register.h:4460
+#define P_VDIN0_COM_STATUS1 		VCBUS_REG_ADDR(VDIN0_COM_STATUS1)
+#define VDIN0_LCNT_SHADOW_STATUS ((0x00 << 2) + VDIN_LCNT_SHADOW_STATUS )) 	///../ucode/register.h:4461
+#define P_VDIN0_LCNT_SHADOW_STATUS 		VCBUS_REG_ADDR(VDIN0_LCNT_SHADOW_STATUS)
+#define VDIN0_ASFIFO_CTRL0 ((0x00 << 2) + VDIN_ASFIFO_CTRL0 )) 	///../ucode/register.h:4462
+#define P_VDIN0_ASFIFO_CTRL0 		VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL0)
+#define VDIN0_ASFIFO_CTRL1 ((0x00 << 2) + VDIN_ASFIFO_CTRL1 )) 	///../ucode/register.h:4463
+#define P_VDIN0_ASFIFO_CTRL1 		VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL1)
+#define VDIN0_WIDTHM1I_WIDTHM1O ((0x00 << 2) + VDIN_WIDTHM1I_WIDTHM1O )) 	///../ucode/register.h:4464
+#define P_VDIN0_WIDTHM1I_WIDTHM1O 		VCBUS_REG_ADDR(VDIN0_WIDTHM1I_WIDTHM1O)
+#define VDIN0_SC_MISC_CTRL ((0x00 << 2) + VDIN_SC_MISC_CTRL )) 	///../ucode/register.h:4465
+#define P_VDIN0_SC_MISC_CTRL 		VCBUS_REG_ADDR(VDIN0_SC_MISC_CTRL)
+#define VDIN0_HSC_PHASE_STEP ((0x00 << 2) + VDIN_HSC_PHASE_STEP )) 	///../ucode/register.h:4466
+#define P_VDIN0_HSC_PHASE_STEP 		VCBUS_REG_ADDR(VDIN0_HSC_PHASE_STEP)
+#define VDIN0_HSC_INI_CTRL ((0x00 << 2) + VDIN_HSC_INI_CTRL )) 	///../ucode/register.h:4467
+#define P_VDIN0_HSC_INI_CTRL 		VCBUS_REG_ADDR(VDIN0_HSC_INI_CTRL)
+#define VDIN0_COM_STATUS2 ((0x00 << 2) + VDIN_COM_STATUS2 )) 	///../ucode/register.h:4468
+#define P_VDIN0_COM_STATUS2 		VCBUS_REG_ADDR(VDIN0_COM_STATUS2)
+#define VDIN0_ASFIFO_CTRL2 ((0x00 << 2) + VDIN_ASFIFO_CTRL2 )) 	///../ucode/register.h:4469
+#define P_VDIN0_ASFIFO_CTRL2 		VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL2)
+#define VDIN0_MATRIX_CTRL ((0x00 << 2) + VDIN_MATRIX_CTRL )) 	///../ucode/register.h:4470
+#define P_VDIN0_MATRIX_CTRL 		VCBUS_REG_ADDR(VDIN0_MATRIX_CTRL)
+#define VDIN0_MATRIX_COEF00_01 ((0x00 << 2) + VDIN_MATRIX_COEF00_01 )) 	///../ucode/register.h:4471
+#define P_VDIN0_MATRIX_COEF00_01 		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF00_01)
+#define VDIN0_MATRIX_COEF02_10 ((0x00 << 2) + VDIN_MATRIX_COEF02_10 )) 	///../ucode/register.h:4472
+#define P_VDIN0_MATRIX_COEF02_10 		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF02_10)
+#define VDIN0_MATRIX_COEF11_12 ((0x00 << 2) + VDIN_MATRIX_COEF11_12 )) 	///../ucode/register.h:4473
+#define P_VDIN0_MATRIX_COEF11_12 		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF11_12)
+#define VDIN0_MATRIX_COEF20_21 ((0x00 << 2) + VDIN_MATRIX_COEF20_21 )) 	///../ucode/register.h:4474
+#define P_VDIN0_MATRIX_COEF20_21 		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF20_21)
+#define VDIN0_MATRIX_COEF22 ((0x00 << 2) + VDIN_MATRIX_COEF22 )) 	///../ucode/register.h:4475
+#define P_VDIN0_MATRIX_COEF22 		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF22)
+#define VDIN0_MATRIX_OFFSET0_1 ((0x00 << 2) + VDIN_MATRIX_OFFSET0_1 )) 	///../ucode/register.h:4476
+#define P_VDIN0_MATRIX_OFFSET0_1 		VCBUS_REG_ADDR(VDIN0_MATRIX_OFFSET0_1)
+#define VDIN0_MATRIX_OFFSET2 ((0x00 << 2) + VDIN_MATRIX_OFFSET2 )) 	///../ucode/register.h:4477
+#define P_VDIN0_MATRIX_OFFSET2 		VCBUS_REG_ADDR(VDIN0_MATRIX_OFFSET2)
+#define VDIN0_MATRIX_PRE_OFFSET0_1 ((0x00 << 2) + VDIN_MATRIX_PRE_OFFSET0_1 )) 	///../ucode/register.h:4478
+#define P_VDIN0_MATRIX_PRE_OFFSET0_1 		VCBUS_REG_ADDR(VDIN0_MATRIX_PRE_OFFSET0_1)
+#define VDIN0_MATRIX_PRE_OFFSET2 ((0x00 << 2) + VDIN_MATRIX_PRE_OFFSET2 )) 	///../ucode/register.h:4479
+#define P_VDIN0_MATRIX_PRE_OFFSET2 		VCBUS_REG_ADDR(VDIN0_MATRIX_PRE_OFFSET2)
+#define VDIN0_LFIFO_CTRL ((0x00 << 2) + VDIN_LFIFO_CTRL )) 	///../ucode/register.h:4480
+#define P_VDIN0_LFIFO_CTRL 		VCBUS_REG_ADDR(VDIN0_LFIFO_CTRL)
+#define VDIN0_COM_GCLK_CTRL ((0x00 << 2) + VDIN_COM_GCLK_CTRL )) 	///../ucode/register.h:4481
+#define P_VDIN0_COM_GCLK_CTRL 		VCBUS_REG_ADDR(VDIN0_COM_GCLK_CTRL)
+#define VDIN0_INTF_WIDTHM1 ((0x00 << 2) + VDIN_INTF_WIDTHM1 )) 	///../ucode/register.h:4482
+#define P_VDIN0_INTF_WIDTHM1 		VCBUS_REG_ADDR(VDIN0_INTF_WIDTHM1)
+#define VDIN0_WR_CTRL2 ((0x00 << 2) + VDIN_WR_CTRL2 )) 	///../ucode/register.h:4483
+#define P_VDIN0_WR_CTRL2 		VCBUS_REG_ADDR(VDIN0_WR_CTRL2)
+#define VDIN0_WR_CTRL ((0x00 << 2) + VDIN_WR_CTRL )) 	///../ucode/register.h:4484
+#define P_VDIN0_WR_CTRL 		VCBUS_REG_ADDR(VDIN0_WR_CTRL)
+#define VDIN0_WR_H_START_END ((0x00 << 2) + VDIN_WR_H_START_END )) 	///../ucode/register.h:4485
+#define P_VDIN0_WR_H_START_END 		VCBUS_REG_ADDR(VDIN0_WR_H_START_END)
+#define VDIN0_WR_V_START_END ((0x00 << 2) + VDIN_WR_V_START_END )) 	///../ucode/register.h:4486
+#define P_VDIN0_WR_V_START_END 		VCBUS_REG_ADDR(VDIN0_WR_V_START_END)
+#define VDIN0_VSC_PHASE_STEP ((0x00 << 2) + VDIN_VSC_PHASE_STEP )) 	///../ucode/register.h:4487
+#define P_VDIN0_VSC_PHASE_STEP 		VCBUS_REG_ADDR(VDIN0_VSC_PHASE_STEP)
+#define VDIN0_VSC_INI_CTRL ((0x00 << 2) + VDIN_VSC_INI_CTRL )) 	///../ucode/register.h:4488
+#define P_VDIN0_VSC_INI_CTRL 		VCBUS_REG_ADDR(VDIN0_VSC_INI_CTRL)
+#define VDIN0_SCIN_HEIGHTM1 ((0x00 << 2) + VDIN_SCIN_HEIGHTM1 )) 	///../ucode/register.h:4489
+#define P_VDIN0_SCIN_HEIGHTM1 		VCBUS_REG_ADDR(VDIN0_SCIN_HEIGHTM1)
+#define VDIN0_DUMMY_DATA ((0x00 << 2) + VDIN_DUMMY_DATA )) 	///../ucode/register.h:4490
+#define P_VDIN0_DUMMY_DATA 		VCBUS_REG_ADDR(VDIN0_DUMMY_DATA)
+#define VDIN0_MATRIX_PROBE_COLOR ((0x00 << 2) + VDIN_MATRIX_PROBE_COLOR )) 	///../ucode/register.h:4491
+#define P_VDIN0_MATRIX_PROBE_COLOR 		VCBUS_REG_ADDR(VDIN0_MATRIX_PROBE_COLOR)
+#define VDIN0_MATRIX_HL_COLOR ((0x00 << 2) + VDIN_MATRIX_HL_COLOR )) 	///../ucode/register.h:4492
+#define P_VDIN0_MATRIX_HL_COLOR 		VCBUS_REG_ADDR(VDIN0_MATRIX_HL_COLOR)
+#define VDIN0_MATRIX_PROBE_POS ((0x00 << 2) + VDIN_MATRIX_PROBE_POS )) 	///../ucode/register.h:4493
+#define P_VDIN0_MATRIX_PROBE_POS 		VCBUS_REG_ADDR(VDIN0_MATRIX_PROBE_POS)
+#define VDIN0_CHROMA_ADDR_PORT ((0x00 << 2) + VDIN_CHROMA_ADDR_PORT )) 	///../ucode/register.h:4494
+#define P_VDIN0_CHROMA_ADDR_PORT 		VCBUS_REG_ADDR(VDIN0_CHROMA_ADDR_PORT)
+#define VDIN0_CHROMA_DATA_PORT ((0x00 << 2) + VDIN_CHROMA_DATA_PORT )) 	///../ucode/register.h:4495
+#define P_VDIN0_CHROMA_DATA_PORT 		VCBUS_REG_ADDR(VDIN0_CHROMA_DATA_PORT)
+#define VDIN0_CM_BRI_CON_CTRL ((0x00 << 2) + VDIN_CM_BRI_CON_CTRL )) 	///../ucode/register.h:4496
+#define P_VDIN0_CM_BRI_CON_CTRL 		VCBUS_REG_ADDR(VDIN0_CM_BRI_CON_CTRL)
+#define VDIN0_HIST_CTRL ((0x00 << 2) + VDIN_HIST_CTRL )) 	///../ucode/register.h:4497
+#define P_VDIN0_HIST_CTRL 		VCBUS_REG_ADDR(VDIN0_HIST_CTRL)
+#define VDIN0_HIST_H_START_END ((0x00 << 2) + VDIN_HIST_H_START_END )) 	///../ucode/register.h:4498
+#define P_VDIN0_HIST_H_START_END 		VCBUS_REG_ADDR(VDIN0_HIST_H_START_END)
+#define VDIN0_HIST_V_START_END ((0x00 << 2) + VDIN_HIST_V_START_END )) 	///../ucode/register.h:4499
+#define P_VDIN0_HIST_V_START_END 		VCBUS_REG_ADDR(VDIN0_HIST_V_START_END)
+#define VDIN0_HIST_MAX_MIN ((0x00 << 2) + VDIN_HIST_MAX_MIN )) 	///../ucode/register.h:4500
+#define P_VDIN0_HIST_MAX_MIN 		VCBUS_REG_ADDR(VDIN0_HIST_MAX_MIN)
+#define VDIN0_HIST_SPL_VAL ((0x00 << 2) + VDIN_HIST_SPL_VAL )) 	///../ucode/register.h:4501
+#define P_VDIN0_HIST_SPL_VAL 		VCBUS_REG_ADDR(VDIN0_HIST_SPL_VAL)
+#define VDIN0_HIST_SPL_PIX_CNT ((0x00 << 2) + VDIN_HIST_SPL_PIX_CNT )) 	///../ucode/register.h:4502
+#define P_VDIN0_HIST_SPL_PIX_CNT 		VCBUS_REG_ADDR(VDIN0_HIST_SPL_PIX_CNT)
+#define VDIN0_HIST_CHROMA_SUM ((0x00 << 2) + VDIN_HIST_CHROMA_SUM )) 	///../ucode/register.h:4503
+#define P_VDIN0_HIST_CHROMA_SUM 		VCBUS_REG_ADDR(VDIN0_HIST_CHROMA_SUM)
+#define VDIN0_DNLP_HIST00 ((0x00 << 2) + VDIN_DNLP_HIST00 )) 	///../ucode/register.h:4504
+#define P_VDIN0_DNLP_HIST00 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST00)
+#define VDIN0_DNLP_HIST01 ((0x00 << 2) + VDIN_DNLP_HIST01 )) 	///../ucode/register.h:4505
+#define P_VDIN0_DNLP_HIST01 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST01)
+#define VDIN0_DNLP_HIST02 ((0x00 << 2) + VDIN_DNLP_HIST02 )) 	///../ucode/register.h:4506
+#define P_VDIN0_DNLP_HIST02 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST02)
+#define VDIN0_DNLP_HIST03 ((0x00 << 2) + VDIN_DNLP_HIST03 )) 	///../ucode/register.h:4507
+#define P_VDIN0_DNLP_HIST03 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST03)
+#define VDIN0_DNLP_HIST04 ((0x00 << 2) + VDIN_DNLP_HIST04 )) 	///../ucode/register.h:4508
+#define P_VDIN0_DNLP_HIST04 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST04)
+#define VDIN0_DNLP_HIST05 ((0x00 << 2) + VDIN_DNLP_HIST05 )) 	///../ucode/register.h:4509
+#define P_VDIN0_DNLP_HIST05 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST05)
+#define VDIN0_DNLP_HIST06 ((0x00 << 2) + VDIN_DNLP_HIST06 )) 	///../ucode/register.h:4510
+#define P_VDIN0_DNLP_HIST06 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST06)
+#define VDIN0_DNLP_HIST07 ((0x00 << 2) + VDIN_DNLP_HIST07 )) 	///../ucode/register.h:4511
+#define P_VDIN0_DNLP_HIST07 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST07)
+#define VDIN0_DNLP_HIST08 ((0x00 << 2) + VDIN_DNLP_HIST08 )) 	///../ucode/register.h:4512
+#define P_VDIN0_DNLP_HIST08 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST08)
+#define VDIN0_DNLP_HIST09 ((0x00 << 2) + VDIN_DNLP_HIST09 )) 	///../ucode/register.h:4513
+#define P_VDIN0_DNLP_HIST09 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST09)
+#define VDIN0_DNLP_HIST10 ((0x00 << 2) + VDIN_DNLP_HIST10 )) 	///../ucode/register.h:4514
+#define P_VDIN0_DNLP_HIST10 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST10)
+#define VDIN0_DNLP_HIST11 ((0x00 << 2) + VDIN_DNLP_HIST11 )) 	///../ucode/register.h:4515
+#define P_VDIN0_DNLP_HIST11 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST11)
+#define VDIN0_DNLP_HIST12 ((0x00 << 2) + VDIN_DNLP_HIST12 )) 	///../ucode/register.h:4516
+#define P_VDIN0_DNLP_HIST12 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST12)
+#define VDIN0_DNLP_HIST13 ((0x00 << 2) + VDIN_DNLP_HIST13 )) 	///../ucode/register.h:4517
+#define P_VDIN0_DNLP_HIST13 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST13)
+#define VDIN0_DNLP_HIST14 ((0x00 << 2) + VDIN_DNLP_HIST14 )) 	///../ucode/register.h:4518
+#define P_VDIN0_DNLP_HIST14 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST14)
+#define VDIN0_DNLP_HIST15 ((0x00 << 2) + VDIN_DNLP_HIST15 )) 	///../ucode/register.h:4519
+#define P_VDIN0_DNLP_HIST15 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST15)
+#define VDIN0_DNLP_HIST16 ((0x00 << 2) + VDIN_DNLP_HIST16 )) 	///../ucode/register.h:4520
+#define P_VDIN0_DNLP_HIST16 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST16)
+#define VDIN0_DNLP_HIST17 ((0x00 << 2) + VDIN_DNLP_HIST17 )) 	///../ucode/register.h:4521
+#define P_VDIN0_DNLP_HIST17 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST17)
+#define VDIN0_DNLP_HIST18 ((0x00 << 2) + VDIN_DNLP_HIST18 )) 	///../ucode/register.h:4522
+#define P_VDIN0_DNLP_HIST18 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST18)
+#define VDIN0_DNLP_HIST19 ((0x00 << 2) + VDIN_DNLP_HIST19 )) 	///../ucode/register.h:4523
+#define P_VDIN0_DNLP_HIST19 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST19)
+#define VDIN0_DNLP_HIST20 ((0x00 << 2) + VDIN_DNLP_HIST20 )) 	///../ucode/register.h:4524
+#define P_VDIN0_DNLP_HIST20 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST20)
+#define VDIN0_DNLP_HIST21 ((0x00 << 2) + VDIN_DNLP_HIST21 )) 	///../ucode/register.h:4525
+#define P_VDIN0_DNLP_HIST21 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST21)
+#define VDIN0_DNLP_HIST22 ((0x00 << 2) + VDIN_DNLP_HIST22 )) 	///../ucode/register.h:4526
+#define P_VDIN0_DNLP_HIST22 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST22)
+#define VDIN0_DNLP_HIST23 ((0x00 << 2) + VDIN_DNLP_HIST23 )) 	///../ucode/register.h:4527
+#define P_VDIN0_DNLP_HIST23 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST23)
+#define VDIN0_DNLP_HIST24 ((0x00 << 2) + VDIN_DNLP_HIST24 )) 	///../ucode/register.h:4528
+#define P_VDIN0_DNLP_HIST24 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST24)
+#define VDIN0_DNLP_HIST25 ((0x00 << 2) + VDIN_DNLP_HIST25 )) 	///../ucode/register.h:4529
+#define P_VDIN0_DNLP_HIST25 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST25)
+#define VDIN0_DNLP_HIST26 ((0x00 << 2) + VDIN_DNLP_HIST26 )) 	///../ucode/register.h:4530
+#define P_VDIN0_DNLP_HIST26 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST26)
+#define VDIN0_DNLP_HIST27 ((0x00 << 2) + VDIN_DNLP_HIST27 )) 	///../ucode/register.h:4531
+#define P_VDIN0_DNLP_HIST27 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST27)
+#define VDIN0_DNLP_HIST28 ((0x00 << 2) + VDIN_DNLP_HIST28 )) 	///../ucode/register.h:4532
+#define P_VDIN0_DNLP_HIST28 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST28)
+#define VDIN0_DNLP_HIST29 ((0x00 << 2) + VDIN_DNLP_HIST29 )) 	///../ucode/register.h:4533
+#define P_VDIN0_DNLP_HIST29 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST29)
+#define VDIN0_DNLP_HIST30 ((0x00 << 2) + VDIN_DNLP_HIST30 )) 	///../ucode/register.h:4534
+#define P_VDIN0_DNLP_HIST30 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST30)
+#define VDIN0_DNLP_HIST31 ((0x00 << 2) + VDIN_DNLP_HIST31 )) 	///../ucode/register.h:4535
+#define P_VDIN0_DNLP_HIST31 		VCBUS_REG_ADDR(VDIN0_DNLP_HIST31)
+#define VDIN0_LDIM_STTS_HIST_REGION_IDX ((0x00 << 2) + VDIN_LDIM_STTS_HIST_REGION_IDX )) 	///../ucode/register.h:4536
+#define P_VDIN0_LDIM_STTS_HIST_REGION_IDX 		VCBUS_REG_ADDR(VDIN0_LDIM_STTS_HIST_REGION_IDX)
+#define VDIN0_LDIM_STTS_HIST_SET_REGION ((0x00 << 2) + VDIN_LDIM_STTS_HIST_SET_REGION )) 	///../ucode/register.h:4537
+#define P_VDIN0_LDIM_STTS_HIST_SET_REGION 		VCBUS_REG_ADDR(VDIN0_LDIM_STTS_HIST_SET_REGION)
+#define VDIN0_LDIM_STTS_HIST_READ_REGION ((0x00 << 2) + VDIN_LDIM_STTS_HIST_READ_REGION )) 	///../ucode/register.h:4538
+#define P_VDIN0_LDIM_STTS_HIST_READ_REGION 		VCBUS_REG_ADDR(VDIN0_LDIM_STTS_HIST_READ_REGION)
+#define VDIN0_MEAS_CTRL0 ((0x00 << 2) + VDIN_MEAS_CTRL0 )) 	///../ucode/register.h:4539
+#define P_VDIN0_MEAS_CTRL0 		VCBUS_REG_ADDR(VDIN0_MEAS_CTRL0)
+#define VDIN0_MEAS_VS_COUNT_HI ((0x00 << 2) + VDIN_MEAS_VS_COUNT_HI )) 	///../ucode/register.h:4540
+#define P_VDIN0_MEAS_VS_COUNT_HI 		VCBUS_REG_ADDR(VDIN0_MEAS_VS_COUNT_HI)
+#define VDIN0_MEAS_VS_COUNT_LO ((0x00 << 2) + VDIN_MEAS_VS_COUNT_LO )) 	///../ucode/register.h:4541
+#define P_VDIN0_MEAS_VS_COUNT_LO 		VCBUS_REG_ADDR(VDIN0_MEAS_VS_COUNT_LO)
+#define VDIN0_MEAS_HS_RANGE ((0x00 << 2) + VDIN_MEAS_HS_RANGE )) 	///../ucode/register.h:4542
+#define P_VDIN0_MEAS_HS_RANGE 		VCBUS_REG_ADDR(VDIN0_MEAS_HS_RANGE)
+#define VDIN0_MEAS_HS_COUNT ((0x00 << 2) + VDIN_MEAS_HS_COUNT )) 	///../ucode/register.h:4543
+#define P_VDIN0_MEAS_HS_COUNT 		VCBUS_REG_ADDR(VDIN0_MEAS_HS_COUNT)
+#define VDIN0_BLKBAR_CTRL1 ((0x00 << 2) + VDIN_BLKBAR_CTRL1 )) 	///../ucode/register.h:4544
+#define P_VDIN0_BLKBAR_CTRL1 		VCBUS_REG_ADDR(VDIN0_BLKBAR_CTRL1)
+#define VDIN0_BLKBAR_CTRL0 ((0x00 << 2) + VDIN_BLKBAR_CTRL0 )) 	///../ucode/register.h:4545
+#define P_VDIN0_BLKBAR_CTRL0 		VCBUS_REG_ADDR(VDIN0_BLKBAR_CTRL0)
+#define VDIN0_BLKBAR_H_START_END ((0x00 << 2) + VDIN_BLKBAR_H_START_END )) 	///../ucode/register.h:4546
+#define P_VDIN0_BLKBAR_H_START_END 		VCBUS_REG_ADDR(VDIN0_BLKBAR_H_START_END)
+#define VDIN0_BLKBAR_V_START_END ((0x00 << 2) + VDIN_BLKBAR_V_START_END )) 	///../ucode/register.h:4547
+#define P_VDIN0_BLKBAR_V_START_END 		VCBUS_REG_ADDR(VDIN0_BLKBAR_V_START_END)
+#define VDIN0_BLKBAR_CNT_THRESHOLD ((0x00 << 2) + VDIN_BLKBAR_CNT_THRESHOLD )) 	///../ucode/register.h:4548
+#define P_VDIN0_BLKBAR_CNT_THRESHOLD 		VCBUS_REG_ADDR(VDIN0_BLKBAR_CNT_THRESHOLD)
+#define VDIN0_BLKBAR_ROW_TH1_TH2 ((0x00 << 2) + VDIN_BLKBAR_ROW_TH1_TH2 )) 	///../ucode/register.h:4549
+#define P_VDIN0_BLKBAR_ROW_TH1_TH2 		VCBUS_REG_ADDR(VDIN0_BLKBAR_ROW_TH1_TH2)
+#define VDIN0_BLKBAR_IND_LEFT_START_END ((0x00 << 2) + VDIN_BLKBAR_IND_LEFT_START_END )) 	///../ucode/register.h:4550
+#define P_VDIN0_BLKBAR_IND_LEFT_START_END 		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_LEFT_START_END)
+#define VDIN0_BLKBAR_IND_RIGHT_START_END ((0x00 << 2) + VDIN_BLKBAR_IND_RIGHT_START_END )) 	///../ucode/register.h:4551
+#define P_VDIN0_BLKBAR_IND_RIGHT_START_END 		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_RIGHT_START_END)
+#define VDIN0_BLKBAR_IND_LEFT1_CNT ((0x00 << 2) + VDIN_BLKBAR_IND_LEFT1_CNT )) 	///../ucode/register.h:4552
+#define P_VDIN0_BLKBAR_IND_LEFT1_CNT 		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_LEFT1_CNT)
+#define VDIN0_BLKBAR_IND_LEFT2_CNT ((0x00 << 2) + VDIN_BLKBAR_IND_LEFT2_CNT )) 	///../ucode/register.h:4553
+#define P_VDIN0_BLKBAR_IND_LEFT2_CNT 		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_LEFT2_CNT)
+#define VDIN0_BLKBAR_IND_RIGHT1_CNT ((0x00 << 2) + VDIN_BLKBAR_IND_RIGHT1_CNT )) 	///../ucode/register.h:4554
+#define P_VDIN0_BLKBAR_IND_RIGHT1_CNT 		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_RIGHT1_CNT)
+#define VDIN0_BLKBAR_IND_RIGHT2_CNT ((0x00 << 2) + VDIN_BLKBAR_IND_RIGHT2_CNT )) 	///../ucode/register.h:4555
+#define P_VDIN0_BLKBAR_IND_RIGHT2_CNT 		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_RIGHT2_CNT)
+#define VDIN0_BLKBAR_STATUS0 ((0x00 << 2) + VDIN_BLKBAR_STATUS0 )) 	///../ucode/register.h:4556
+#define P_VDIN0_BLKBAR_STATUS0 		VCBUS_REG_ADDR(VDIN0_BLKBAR_STATUS0)
+#define VDIN0_BLKBAR_STATUS1 ((0x00 << 2) + VDIN_BLKBAR_STATUS1 )) 	///../ucode/register.h:4557
+#define P_VDIN0_BLKBAR_STATUS1 		VCBUS_REG_ADDR(VDIN0_BLKBAR_STATUS1)
+#define VDIN0_WIN_H_START_END ((0x00 << 2) + VDIN_WIN_H_START_END )) 	///../ucode/register.h:4558
+#define P_VDIN0_WIN_H_START_END 		VCBUS_REG_ADDR(VDIN0_WIN_H_START_END)
+#define VDIN0_WIN_V_START_END ((0x00 << 2) + VDIN_WIN_V_START_END )) 	///../ucode/register.h:4559
+#define P_VDIN0_WIN_V_START_END 		VCBUS_REG_ADDR(VDIN0_WIN_V_START_END)
+#define VDIN0_ASFIFO_CTRL3 ((0x00 << 2) + VDIN_ASFIFO_CTRL3 )) 	///../ucode/register.h:4560
+#define P_VDIN0_ASFIFO_CTRL3 		VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL3)
+#define VDIN1_SCALE_COEF_IDX ((0x70 << 2) + VDIN_SCALE_COEF_IDX )) 	///../ucode/register.h:4563
+#define P_VDIN1_SCALE_COEF_IDX 		VCBUS_REG_ADDR(VDIN1_SCALE_COEF_IDX)
+#define VDIN1_SCALE_COEF ((0x70 << 2) + VDIN_SCALE_COEF )) 	///../ucode/register.h:4564
+#define P_VDIN1_SCALE_COEF 		VCBUS_REG_ADDR(VDIN1_SCALE_COEF)
+#define VDIN1_COM_CTRL0 ((0x70 << 2) + VDIN_COM_CTRL0 )) 	///../ucode/register.h:4565
+#define P_VDIN1_COM_CTRL0 		VCBUS_REG_ADDR(VDIN1_COM_CTRL0)
+#define VDIN1_ACTIVE_MAX_PIX_CNT_STATUS ((0x70 << 2) + VDIN_ACTIVE_MAX_PIX_CNT_STATUS )) 	///../ucode/register.h:4566
+#define P_VDIN1_ACTIVE_MAX_PIX_CNT_STATUS 		VCBUS_REG_ADDR(VDIN1_ACTIVE_MAX_PIX_CNT_STATUS)
+#define VDIN1_LCNT_STATUS ((0x70 << 2) + VDIN_LCNT_STATUS )) 	///../ucode/register.h:4567
+#define P_VDIN1_LCNT_STATUS 		VCBUS_REG_ADDR(VDIN1_LCNT_STATUS)
+#define VDIN1_COM_STATUS0 ((0x70 << 2) + VDIN_COM_STATUS0 )) 	///../ucode/register.h:4568
+#define P_VDIN1_COM_STATUS0 		VCBUS_REG_ADDR(VDIN1_COM_STATUS0)
+#define VDIN1_COM_STATUS1 ((0x70 << 2) + VDIN_COM_STATUS1 )) 	///../ucode/register.h:4569
+#define P_VDIN1_COM_STATUS1 		VCBUS_REG_ADDR(VDIN1_COM_STATUS1)
+#define VDIN1_LCNT_SHADOW_STATUS ((0x70 << 2) + VDIN_LCNT_SHADOW_STATUS )) 	///../ucode/register.h:4570
+#define P_VDIN1_LCNT_SHADOW_STATUS 		VCBUS_REG_ADDR(VDIN1_LCNT_SHADOW_STATUS)
+#define VDIN1_ASFIFO_CTRL0 ((0x70 << 2) + VDIN_ASFIFO_CTRL0 )) 	///../ucode/register.h:4571
+#define P_VDIN1_ASFIFO_CTRL0 		VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL0)
+#define VDIN1_ASFIFO_CTRL1 ((0x70 << 2) + VDIN_ASFIFO_CTRL1 )) 	///../ucode/register.h:4572
+#define P_VDIN1_ASFIFO_CTRL1 		VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL1)
+#define VDIN1_WIDTHM1I_WIDTHM1O ((0x70 << 2) + VDIN_WIDTHM1I_WIDTHM1O )) 	///../ucode/register.h:4573
+#define P_VDIN1_WIDTHM1I_WIDTHM1O 		VCBUS_REG_ADDR(VDIN1_WIDTHM1I_WIDTHM1O)
+#define VDIN1_SC_MISC_CTRL ((0x70 << 2) + VDIN_SC_MISC_CTRL )) 	///../ucode/register.h:4574
+#define P_VDIN1_SC_MISC_CTRL 		VCBUS_REG_ADDR(VDIN1_SC_MISC_CTRL)
+#define VDIN1_HSC_PHASE_STEP ((0x70 << 2) + VDIN_HSC_PHASE_STEP )) 	///../ucode/register.h:4575
+#define P_VDIN1_HSC_PHASE_STEP 		VCBUS_REG_ADDR(VDIN1_HSC_PHASE_STEP)
+#define VDIN1_HSC_INI_CTRL ((0x70 << 2) + VDIN_HSC_INI_CTRL )) 	///../ucode/register.h:4576
+#define P_VDIN1_HSC_INI_CTRL 		VCBUS_REG_ADDR(VDIN1_HSC_INI_CTRL)
+#define VDIN1_COM_STATUS2 ((0x70 << 2) + VDIN_COM_STATUS2 )) 	///../ucode/register.h:4577
+#define P_VDIN1_COM_STATUS2 		VCBUS_REG_ADDR(VDIN1_COM_STATUS2)
+#define VDIN1_ASFIFO_CTRL2 ((0x70 << 2) + VDIN_ASFIFO_CTRL2 )) 	///../ucode/register.h:4578
+#define P_VDIN1_ASFIFO_CTRL2 		VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL2)
+#define VDIN1_MATRIX_CTRL ((0x70 << 2) + VDIN_MATRIX_CTRL )) 	///../ucode/register.h:4579
+#define P_VDIN1_MATRIX_CTRL 		VCBUS_REG_ADDR(VDIN1_MATRIX_CTRL)
+#define VDIN1_MATRIX_COEF00_01 ((0x70 << 2) + VDIN_MATRIX_COEF00_01 )) 	///../ucode/register.h:4580
+#define P_VDIN1_MATRIX_COEF00_01 		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF00_01)
+#define VDIN1_MATRIX_COEF02_10 ((0x70 << 2) + VDIN_MATRIX_COEF02_10 )) 	///../ucode/register.h:4581
+#define P_VDIN1_MATRIX_COEF02_10 		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF02_10)
+#define VDIN1_MATRIX_COEF11_12 ((0x70 << 2) + VDIN_MATRIX_COEF11_12 )) 	///../ucode/register.h:4582
+#define P_VDIN1_MATRIX_COEF11_12 		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF11_12)
+#define VDIN1_MATRIX_COEF20_21 ((0x70 << 2) + VDIN_MATRIX_COEF20_21 )) 	///../ucode/register.h:4583
+#define P_VDIN1_MATRIX_COEF20_21 		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF20_21)
+#define VDIN1_MATRIX_COEF22 ((0x70 << 2) + VDIN_MATRIX_COEF22 )) 	///../ucode/register.h:4584
+#define P_VDIN1_MATRIX_COEF22 		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF22)
+#define VDIN1_MATRIX_OFFSET0_1 ((0x70 << 2) + VDIN_MATRIX_OFFSET0_1 )) 	///../ucode/register.h:4585
+#define P_VDIN1_MATRIX_OFFSET0_1 		VCBUS_REG_ADDR(VDIN1_MATRIX_OFFSET0_1)
+#define VDIN1_MATRIX_OFFSET2 ((0x70 << 2) + VDIN_MATRIX_OFFSET2 )) 	///../ucode/register.h:4586
+#define P_VDIN1_MATRIX_OFFSET2 		VCBUS_REG_ADDR(VDIN1_MATRIX_OFFSET2)
+#define VDIN1_MATRIX_PRE_OFFSET0_1 ((0x70 << 2) + VDIN_MATRIX_PRE_OFFSET0_1 )) 	///../ucode/register.h:4587
+#define P_VDIN1_MATRIX_PRE_OFFSET0_1 		VCBUS_REG_ADDR(VDIN1_MATRIX_PRE_OFFSET0_1)
+#define VDIN1_MATRIX_PRE_OFFSET2 ((0x70 << 2) + VDIN_MATRIX_PRE_OFFSET2 )) 	///../ucode/register.h:4588
+#define P_VDIN1_MATRIX_PRE_OFFSET2 		VCBUS_REG_ADDR(VDIN1_MATRIX_PRE_OFFSET2)
+#define VDIN1_LFIFO_CTRL ((0x70 << 2) + VDIN_LFIFO_CTRL )) 	///../ucode/register.h:4589
+#define P_VDIN1_LFIFO_CTRL 		VCBUS_REG_ADDR(VDIN1_LFIFO_CTRL)
+#define VDIN1_COM_GCLK_CTRL ((0x70 << 2) + VDIN_COM_GCLK_CTRL )) 	///../ucode/register.h:4590
+#define P_VDIN1_COM_GCLK_CTRL 		VCBUS_REG_ADDR(VDIN1_COM_GCLK_CTRL)
+#define VDIN1_INTF_WIDTHM1 ((0x70 << 2) + VDIN_INTF_WIDTHM1 )) 	///../ucode/register.h:4591
+#define P_VDIN1_INTF_WIDTHM1 		VCBUS_REG_ADDR(VDIN1_INTF_WIDTHM1)
+#define VDIN1_WR_CTRL2 ((0x70 << 2) + VDIN_WR_CTRL2 )) 	///../ucode/register.h:4592
+#define P_VDIN1_WR_CTRL2 		VCBUS_REG_ADDR(VDIN1_WR_CTRL2)
+#define VDIN1_WR_CTRL ((0x70 << 2) + VDIN_WR_CTRL )) 	///../ucode/register.h:4593
+#define P_VDIN1_WR_CTRL 		VCBUS_REG_ADDR(VDIN1_WR_CTRL)
+#define VDIN1_WR_H_START_END ((0x70 << 2) + VDIN_WR_H_START_END )) 	///../ucode/register.h:4594
+#define P_VDIN1_WR_H_START_END 		VCBUS_REG_ADDR(VDIN1_WR_H_START_END)
+#define VDIN1_WR_V_START_END ((0x70 << 2) + VDIN_WR_V_START_END )) 	///../ucode/register.h:4595
+#define P_VDIN1_WR_V_START_END 		VCBUS_REG_ADDR(VDIN1_WR_V_START_END)
+#define VDIN1_VSC_PHASE_STEP ((0x70 << 2) + VDIN_VSC_PHASE_STEP )) 	///../ucode/register.h:4596
+#define P_VDIN1_VSC_PHASE_STEP 		VCBUS_REG_ADDR(VDIN1_VSC_PHASE_STEP)
+#define VDIN1_VSC_INI_CTRL ((0x70 << 2) + VDIN_VSC_INI_CTRL )) 	///../ucode/register.h:4597
+#define P_VDIN1_VSC_INI_CTRL 		VCBUS_REG_ADDR(VDIN1_VSC_INI_CTRL)
+#define VDIN1_SCIN_HEIGHTM1 ((0x70 << 2) + VDIN_SCIN_HEIGHTM1 )) 	///../ucode/register.h:4598
+#define P_VDIN1_SCIN_HEIGHTM1 		VCBUS_REG_ADDR(VDIN1_SCIN_HEIGHTM1)
+#define VDIN1_DUMMY_DATA ((0x70 << 2) + VDIN_DUMMY_DATA )) 	///../ucode/register.h:4599
+#define P_VDIN1_DUMMY_DATA 		VCBUS_REG_ADDR(VDIN1_DUMMY_DATA)
+#define VDIN1_MATRIX_PROBE_COLOR ((0x70 << 2) + VDIN_MATRIX_PROBE_COLOR )) 	///../ucode/register.h:4600
+#define P_VDIN1_MATRIX_PROBE_COLOR 		VCBUS_REG_ADDR(VDIN1_MATRIX_PROBE_COLOR)
+#define VDIN1_MATRIX_HL_COLOR ((0x70 << 2) + VDIN_MATRIX_HL_COLOR )) 	///../ucode/register.h:4601
+#define P_VDIN1_MATRIX_HL_COLOR 		VCBUS_REG_ADDR(VDIN1_MATRIX_HL_COLOR)
+#define VDIN1_MATRIX_PROBE_POS ((0x70 << 2) + VDIN_MATRIX_PROBE_POS )) 	///../ucode/register.h:4602
+#define P_VDIN1_MATRIX_PROBE_POS 		VCBUS_REG_ADDR(VDIN1_MATRIX_PROBE_POS)
+#define VDIN1_CHROMA_ADDR_PORT ((0x70 << 2) + VDIN_CHROMA_ADDR_PORT )) 	///../ucode/register.h:4603
+#define P_VDIN1_CHROMA_ADDR_PORT 		VCBUS_REG_ADDR(VDIN1_CHROMA_ADDR_PORT)
+#define VDIN1_CHROMA_DATA_PORT ((0x70 << 2) + VDIN_CHROMA_DATA_PORT )) 	///../ucode/register.h:4604
+#define P_VDIN1_CHROMA_DATA_PORT 		VCBUS_REG_ADDR(VDIN1_CHROMA_DATA_PORT)
+#define VDIN1_CM_BRI_CON_CTRL ((0x70 << 2) + VDIN_CM_BRI_CON_CTRL )) 	///../ucode/register.h:4605
+#define P_VDIN1_CM_BRI_CON_CTRL 		VCBUS_REG_ADDR(VDIN1_CM_BRI_CON_CTRL)
+#define VDIN1_HIST_CTRL ((0x70 << 2) + VDIN_HIST_CTRL )) 	///../ucode/register.h:4606
+#define P_VDIN1_HIST_CTRL 		VCBUS_REG_ADDR(VDIN1_HIST_CTRL)
+#define VDIN1_HIST_H_START_END ((0x70 << 2) + VDIN_HIST_H_START_END )) 	///../ucode/register.h:4607
+#define P_VDIN1_HIST_H_START_END 		VCBUS_REG_ADDR(VDIN1_HIST_H_START_END)
+#define VDIN1_HIST_V_START_END ((0x70 << 2) + VDIN_HIST_V_START_END )) 	///../ucode/register.h:4608
+#define P_VDIN1_HIST_V_START_END 		VCBUS_REG_ADDR(VDIN1_HIST_V_START_END)
+#define VDIN1_HIST_MAX_MIN ((0x70 << 2) + VDIN_HIST_MAX_MIN )) 	///../ucode/register.h:4609
+#define P_VDIN1_HIST_MAX_MIN 		VCBUS_REG_ADDR(VDIN1_HIST_MAX_MIN)
+#define VDIN1_HIST_SPL_VAL ((0x70 << 2) + VDIN_HIST_SPL_VAL )) 	///../ucode/register.h:4610
+#define P_VDIN1_HIST_SPL_VAL 		VCBUS_REG_ADDR(VDIN1_HIST_SPL_VAL)
+#define VDIN1_HIST_SPL_PIX_CNT ((0x70 << 2) + VDIN_HIST_SPL_PIX_CNT )) 	///../ucode/register.h:4611
+#define P_VDIN1_HIST_SPL_PIX_CNT 		VCBUS_REG_ADDR(VDIN1_HIST_SPL_PIX_CNT)
+#define VDIN1_HIST_CHROMA_SUM ((0x70 << 2) + VDIN_HIST_CHROMA_SUM )) 	///../ucode/register.h:4612
+#define P_VDIN1_HIST_CHROMA_SUM 		VCBUS_REG_ADDR(VDIN1_HIST_CHROMA_SUM)
+#define VDIN1_DNLP_HIST00 ((0x70 << 2) + VDIN_DNLP_HIST00 )) 	///../ucode/register.h:4613
+#define P_VDIN1_DNLP_HIST00 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST00)
+#define VDIN1_DNLP_HIST01 ((0x70 << 2) + VDIN_DNLP_HIST01 )) 	///../ucode/register.h:4614
+#define P_VDIN1_DNLP_HIST01 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST01)
+#define VDIN1_DNLP_HIST02 ((0x70 << 2) + VDIN_DNLP_HIST02 )) 	///../ucode/register.h:4615
+#define P_VDIN1_DNLP_HIST02 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST02)
+#define VDIN1_DNLP_HIST03 ((0x70 << 2) + VDIN_DNLP_HIST03 )) 	///../ucode/register.h:4616
+#define P_VDIN1_DNLP_HIST03 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST03)
+#define VDIN1_DNLP_HIST04 ((0x70 << 2) + VDIN_DNLP_HIST04 )) 	///../ucode/register.h:4617
+#define P_VDIN1_DNLP_HIST04 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST04)
+#define VDIN1_DNLP_HIST05 ((0x70 << 2) + VDIN_DNLP_HIST05 )) 	///../ucode/register.h:4618
+#define P_VDIN1_DNLP_HIST05 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST05)
+#define VDIN1_DNLP_HIST06 ((0x70 << 2) + VDIN_DNLP_HIST06 )) 	///../ucode/register.h:4619
+#define P_VDIN1_DNLP_HIST06 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST06)
+#define VDIN1_DNLP_HIST07 ((0x70 << 2) + VDIN_DNLP_HIST07 )) 	///../ucode/register.h:4620
+#define P_VDIN1_DNLP_HIST07 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST07)
+#define VDIN1_DNLP_HIST08 ((0x70 << 2) + VDIN_DNLP_HIST08 )) 	///../ucode/register.h:4621
+#define P_VDIN1_DNLP_HIST08 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST08)
+#define VDIN1_DNLP_HIST09 ((0x70 << 2) + VDIN_DNLP_HIST09 )) 	///../ucode/register.h:4622
+#define P_VDIN1_DNLP_HIST09 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST09)
+#define VDIN1_DNLP_HIST10 ((0x70 << 2) + VDIN_DNLP_HIST10 )) 	///../ucode/register.h:4623
+#define P_VDIN1_DNLP_HIST10 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST10)
+#define VDIN1_DNLP_HIST11 ((0x70 << 2) + VDIN_DNLP_HIST11 )) 	///../ucode/register.h:4624
+#define P_VDIN1_DNLP_HIST11 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST11)
+#define VDIN1_DNLP_HIST12 ((0x70 << 2) + VDIN_DNLP_HIST12 )) 	///../ucode/register.h:4625
+#define P_VDIN1_DNLP_HIST12 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST12)
+#define VDIN1_DNLP_HIST13 ((0x70 << 2) + VDIN_DNLP_HIST13 )) 	///../ucode/register.h:4626
+#define P_VDIN1_DNLP_HIST13 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST13)
+#define VDIN1_DNLP_HIST14 ((0x70 << 2) + VDIN_DNLP_HIST14 )) 	///../ucode/register.h:4627
+#define P_VDIN1_DNLP_HIST14 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST14)
+#define VDIN1_DNLP_HIST15 ((0x70 << 2) + VDIN_DNLP_HIST15 )) 	///../ucode/register.h:4628
+#define P_VDIN1_DNLP_HIST15 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST15)
+#define VDIN1_DNLP_HIST16 ((0x70 << 2) + VDIN_DNLP_HIST16 )) 	///../ucode/register.h:4629
+#define P_VDIN1_DNLP_HIST16 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST16)
+#define VDIN1_DNLP_HIST17 ((0x70 << 2) + VDIN_DNLP_HIST17 )) 	///../ucode/register.h:4630
+#define P_VDIN1_DNLP_HIST17 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST17)
+#define VDIN1_DNLP_HIST18 ((0x70 << 2) + VDIN_DNLP_HIST18 )) 	///../ucode/register.h:4631
+#define P_VDIN1_DNLP_HIST18 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST18)
+#define VDIN1_DNLP_HIST19 ((0x70 << 2) + VDIN_DNLP_HIST19 )) 	///../ucode/register.h:4632
+#define P_VDIN1_DNLP_HIST19 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST19)
+#define VDIN1_DNLP_HIST20 ((0x70 << 2) + VDIN_DNLP_HIST20 )) 	///../ucode/register.h:4633
+#define P_VDIN1_DNLP_HIST20 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST20)
+#define VDIN1_DNLP_HIST21 ((0x70 << 2) + VDIN_DNLP_HIST21 )) 	///../ucode/register.h:4634
+#define P_VDIN1_DNLP_HIST21 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST21)
+#define VDIN1_DNLP_HIST22 ((0x70 << 2) + VDIN_DNLP_HIST22 )) 	///../ucode/register.h:4635
+#define P_VDIN1_DNLP_HIST22 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST22)
+#define VDIN1_DNLP_HIST23 ((0x70 << 2) + VDIN_DNLP_HIST23 )) 	///../ucode/register.h:4636
+#define P_VDIN1_DNLP_HIST23 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST23)
+#define VDIN1_DNLP_HIST24 ((0x70 << 2) + VDIN_DNLP_HIST24 )) 	///../ucode/register.h:4637
+#define P_VDIN1_DNLP_HIST24 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST24)
+#define VDIN1_DNLP_HIST25 ((0x70 << 2) + VDIN_DNLP_HIST25 )) 	///../ucode/register.h:4638
+#define P_VDIN1_DNLP_HIST25 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST25)
+#define VDIN1_DNLP_HIST26 ((0x70 << 2) + VDIN_DNLP_HIST26 )) 	///../ucode/register.h:4639
+#define P_VDIN1_DNLP_HIST26 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST26)
+#define VDIN1_DNLP_HIST27 ((0x70 << 2) + VDIN_DNLP_HIST27 )) 	///../ucode/register.h:4640
+#define P_VDIN1_DNLP_HIST27 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST27)
+#define VDIN1_DNLP_HIST28 ((0x70 << 2) + VDIN_DNLP_HIST28 )) 	///../ucode/register.h:4641
+#define P_VDIN1_DNLP_HIST28 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST28)
+#define VDIN1_DNLP_HIST29 ((0x70 << 2) + VDIN_DNLP_HIST29 )) 	///../ucode/register.h:4642
+#define P_VDIN1_DNLP_HIST29 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST29)
+#define VDIN1_DNLP_HIST30 ((0x70 << 2) + VDIN_DNLP_HIST30 )) 	///../ucode/register.h:4643
+#define P_VDIN1_DNLP_HIST30 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST30)
+#define VDIN1_DNLP_HIST31 ((0x70 << 2) + VDIN_DNLP_HIST31 )) 	///../ucode/register.h:4644
+#define P_VDIN1_DNLP_HIST31 		VCBUS_REG_ADDR(VDIN1_DNLP_HIST31)
+#define VDIN1_LDIM_STTS_HIST_REGION_IDX ((0x70 << 2) + VDIN_LDIM_STTS_HIST_REGION_IDX )) 	///../ucode/register.h:4645
+#define P_VDIN1_LDIM_STTS_HIST_REGION_IDX 		VCBUS_REG_ADDR(VDIN1_LDIM_STTS_HIST_REGION_IDX)
+#define VDIN1_LDIM_STTS_HIST_SET_REGION ((0x70 << 2) + VDIN_LDIM_STTS_HIST_SET_REGION )) 	///../ucode/register.h:4646
+#define P_VDIN1_LDIM_STTS_HIST_SET_REGION 		VCBUS_REG_ADDR(VDIN1_LDIM_STTS_HIST_SET_REGION)
+#define VDIN1_LDIM_STTS_HIST_READ_REGION ((0x70 << 2) + VDIN_LDIM_STTS_HIST_READ_REGION )) 	///../ucode/register.h:4647
+#define P_VDIN1_LDIM_STTS_HIST_READ_REGION 		VCBUS_REG_ADDR(VDIN1_LDIM_STTS_HIST_READ_REGION)
+#define VDIN1_MEAS_CTRL0 ((0x70 << 2) + VDIN_MEAS_CTRL0 )) 	///../ucode/register.h:4648
+#define P_VDIN1_MEAS_CTRL0 		VCBUS_REG_ADDR(VDIN1_MEAS_CTRL0)
+#define VDIN1_MEAS_VS_COUNT_HI ((0x70 << 2) + VDIN_MEAS_VS_COUNT_HI )) 	///../ucode/register.h:4649
+#define P_VDIN1_MEAS_VS_COUNT_HI 		VCBUS_REG_ADDR(VDIN1_MEAS_VS_COUNT_HI)
+#define VDIN1_MEAS_VS_COUNT_LO ((0x70 << 2) + VDIN_MEAS_VS_COUNT_LO )) 	///../ucode/register.h:4650
+#define P_VDIN1_MEAS_VS_COUNT_LO 		VCBUS_REG_ADDR(VDIN1_MEAS_VS_COUNT_LO)
+#define VDIN1_MEAS_HS_RANGE ((0x70 << 2) + VDIN_MEAS_HS_RANGE )) 	///../ucode/register.h:4651
+#define P_VDIN1_MEAS_HS_RANGE 		VCBUS_REG_ADDR(VDIN1_MEAS_HS_RANGE)
+#define VDIN1_MEAS_HS_COUNT ((0x70 << 2) + VDIN_MEAS_HS_COUNT )) 	///../ucode/register.h:4652
+#define P_VDIN1_MEAS_HS_COUNT 		VCBUS_REG_ADDR(VDIN1_MEAS_HS_COUNT)
+#define VDIN1_BLKBAR_CTRL1 ((0x70 << 2) + VDIN_BLKBAR_CTRL1 )) 	///../ucode/register.h:4653
+#define P_VDIN1_BLKBAR_CTRL1 		VCBUS_REG_ADDR(VDIN1_BLKBAR_CTRL1)
+#define VDIN1_BLKBAR_CTRL0 ((0x70 << 2) + VDIN_BLKBAR_CTRL0 )) 	///../ucode/register.h:4654
+#define P_VDIN1_BLKBAR_CTRL0 		VCBUS_REG_ADDR(VDIN1_BLKBAR_CTRL0)
+#define VDIN1_BLKBAR_H_START_END ((0x70 << 2) + VDIN_BLKBAR_H_START_END )) 	///../ucode/register.h:4655
+#define P_VDIN1_BLKBAR_H_START_END 		VCBUS_REG_ADDR(VDIN1_BLKBAR_H_START_END)
+#define VDIN1_BLKBAR_V_START_END ((0x70 << 2) + VDIN_BLKBAR_V_START_END )) 	///../ucode/register.h:4656
+#define P_VDIN1_BLKBAR_V_START_END 		VCBUS_REG_ADDR(VDIN1_BLKBAR_V_START_END)
+#define VDIN1_BLKBAR_CNT_THRESHOLD ((0x70 << 2) + VDIN_BLKBAR_CNT_THRESHOLD )) 	///../ucode/register.h:4657
+#define P_VDIN1_BLKBAR_CNT_THRESHOLD 		VCBUS_REG_ADDR(VDIN1_BLKBAR_CNT_THRESHOLD)
+#define VDIN1_BLKBAR_ROW_TH1_TH2 ((0x70 << 2) + VDIN_BLKBAR_ROW_TH1_TH2 )) 	///../ucode/register.h:4658
+#define P_VDIN1_BLKBAR_ROW_TH1_TH2 		VCBUS_REG_ADDR(VDIN1_BLKBAR_ROW_TH1_TH2)
+#define VDIN1_BLKBAR_IND_LEFT_START_END ((0x70 << 2) + VDIN_BLKBAR_IND_LEFT_START_END )) 	///../ucode/register.h:4659
+#define P_VDIN1_BLKBAR_IND_LEFT_START_END 		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_LEFT_START_END)
+#define VDIN1_BLKBAR_IND_RIGHT_START_END ((0x70 << 2) + VDIN_BLKBAR_IND_RIGHT_START_END )) 	///../ucode/register.h:4660
+#define P_VDIN1_BLKBAR_IND_RIGHT_START_END 		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_RIGHT_START_END)
+#define VDIN1_BLKBAR_IND_LEFT1_CNT ((0x70 << 2) + VDIN_BLKBAR_IND_LEFT1_CNT )) 	///../ucode/register.h:4661
+#define P_VDIN1_BLKBAR_IND_LEFT1_CNT 		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_LEFT1_CNT)
+#define VDIN1_BLKBAR_IND_LEFT2_CNT ((0x70 << 2) + VDIN_BLKBAR_IND_LEFT2_CNT )) 	///../ucode/register.h:4662
+#define P_VDIN1_BLKBAR_IND_LEFT2_CNT 		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_LEFT2_CNT)
+#define VDIN1_BLKBAR_IND_RIGHT1_CNT ((0x70 << 2) + VDIN_BLKBAR_IND_RIGHT1_CNT )) 	///../ucode/register.h:4663
+#define P_VDIN1_BLKBAR_IND_RIGHT1_CNT 		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_RIGHT1_CNT)
+#define VDIN1_BLKBAR_IND_RIGHT2_CNT ((0x70 << 2) + VDIN_BLKBAR_IND_RIGHT2_CNT )) 	///../ucode/register.h:4664
+#define P_VDIN1_BLKBAR_IND_RIGHT2_CNT 		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_RIGHT2_CNT)
+#define VDIN1_BLKBAR_STATUS0 ((0x70 << 2) + VDIN_BLKBAR_STATUS0 )) 	///../ucode/register.h:4665
+#define P_VDIN1_BLKBAR_STATUS0 		VCBUS_REG_ADDR(VDIN1_BLKBAR_STATUS0)
+#define VDIN1_BLKBAR_STATUS1 ((0x70 << 2) + VDIN_BLKBAR_STATUS1 )) 	///../ucode/register.h:4666
+#define P_VDIN1_BLKBAR_STATUS1 		VCBUS_REG_ADDR(VDIN1_BLKBAR_STATUS1)
+#define VDIN1_WIN_H_START_END ((0x70 << 2) + VDIN_WIN_H_START_END )) 	///../ucode/register.h:4667
+#define P_VDIN1_WIN_H_START_END 		VCBUS_REG_ADDR(VDIN1_WIN_H_START_END)
+#define VDIN1_WIN_V_START_END ((0x70 << 2) + VDIN_WIN_V_START_END )) 	///../ucode/register.h:4668
+#define P_VDIN1_WIN_V_START_END 		VCBUS_REG_ADDR(VDIN1_WIN_V_START_END)
+#define VDIN1_ASFIFO_CTRL3 ((0x70 << 2) + VDIN_ASFIFO_CTRL3 )) 	///../ucode/register.h:4669
+#define P_VDIN1_ASFIFO_CTRL3 		VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL3)
+#define VPP_DUMMY_DATA 0x1d00 	///../ucode/register.h:4689
+#define P_VPP_DUMMY_DATA 		VCBUS_REG_ADDR(VPP_DUMMY_DATA)
+#define VPP_LINE_IN_LENGTH 0x1d01 	///../ucode/register.h:4691
+#define P_VPP_LINE_IN_LENGTH 		VCBUS_REG_ADDR(VPP_LINE_IN_LENGTH)
+#define VPP_PIC_IN_HEIGHT 0x1d02 	///../ucode/register.h:4693
+#define P_VPP_PIC_IN_HEIGHT 		VCBUS_REG_ADDR(VPP_PIC_IN_HEIGHT)
+#define VPP_SCALE_COEF_IDX 0x1d03 	///../ucode/register.h:4704
+#define P_VPP_SCALE_COEF_IDX 		VCBUS_REG_ADDR(VPP_SCALE_COEF_IDX)
+#define VPP_SCALE_COEF 0x1d04 	///../ucode/register.h:4706
+#define P_VPP_SCALE_COEF 		VCBUS_REG_ADDR(VPP_SCALE_COEF)
+#define VPP_VSC_REGION12_STARTP 0x1d05 	///../ucode/register.h:4742
+#define P_VPP_VSC_REGION12_STARTP 		VCBUS_REG_ADDR(VPP_VSC_REGION12_STARTP)
+#define VPP_VSC_REGION34_STARTP 0x1d06 	///../ucode/register.h:4745
+#define P_VPP_VSC_REGION34_STARTP 		VCBUS_REG_ADDR(VPP_VSC_REGION34_STARTP)
+#define VPP_VSC_REGION4_ENDP 0x1d07 	///../ucode/register.h:4746
+#define P_VPP_VSC_REGION4_ENDP 		VCBUS_REG_ADDR(VPP_VSC_REGION4_ENDP)
+#define VPP_VSC_START_PHASE_STEP 0x1d08 	///../ucode/register.h:4750
+#define P_VPP_VSC_START_PHASE_STEP 		VCBUS_REG_ADDR(VPP_VSC_START_PHASE_STEP)
+#define VPP_VSC_REGION0_PHASE_SLOPE 0x1d09 	///../ucode/register.h:4752
+#define P_VPP_VSC_REGION0_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_VSC_REGION0_PHASE_SLOPE)
+#define VPP_VSC_REGION1_PHASE_SLOPE 0x1d0a 	///../ucode/register.h:4754
+#define P_VPP_VSC_REGION1_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_VSC_REGION1_PHASE_SLOPE)
+#define VPP_VSC_REGION3_PHASE_SLOPE 0x1d0b 	///../ucode/register.h:4756
+#define P_VPP_VSC_REGION3_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_VSC_REGION3_PHASE_SLOPE)
+#define VPP_VSC_REGION4_PHASE_SLOPE 0x1d0c 	///../ucode/register.h:4758
+#define P_VPP_VSC_REGION4_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_VSC_REGION4_PHASE_SLOPE)
+#define VPP_VSC_PHASE_CTRL 0x1d0d 	///../ucode/register.h:4769
+#define P_VPP_VSC_PHASE_CTRL 		VCBUS_REG_ADDR(VPP_VSC_PHASE_CTRL)
+#define VPP_VSC_INI_PHASE 0x1d0e 	///../ucode/register.h:4772
+#define P_VPP_VSC_INI_PHASE 		VCBUS_REG_ADDR(VPP_VSC_INI_PHASE)
+#define VPP_HSC_REGION12_STARTP 0x1d10 	///../ucode/register.h:4775
+#define P_VPP_HSC_REGION12_STARTP 		VCBUS_REG_ADDR(VPP_HSC_REGION12_STARTP)
+#define VPP_HSC_REGION34_STARTP 0x1d11 	///../ucode/register.h:4778
+#define P_VPP_HSC_REGION34_STARTP 		VCBUS_REG_ADDR(VPP_HSC_REGION34_STARTP)
+#define VPP_HSC_REGION4_ENDP 0x1d12 	///../ucode/register.h:4779
+#define P_VPP_HSC_REGION4_ENDP 		VCBUS_REG_ADDR(VPP_HSC_REGION4_ENDP)
+#define VPP_HSC_START_PHASE_STEP 0x1d13 	///../ucode/register.h:4783
+#define P_VPP_HSC_START_PHASE_STEP 		VCBUS_REG_ADDR(VPP_HSC_START_PHASE_STEP)
+#define VPP_HSC_REGION0_PHASE_SLOPE 0x1d14 	///../ucode/register.h:4785
+#define P_VPP_HSC_REGION0_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_HSC_REGION0_PHASE_SLOPE)
+#define VPP_HSC_REGION1_PHASE_SLOPE 0x1d15 	///../ucode/register.h:4787
+#define P_VPP_HSC_REGION1_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_HSC_REGION1_PHASE_SLOPE)
+#define VPP_HSC_REGION3_PHASE_SLOPE 0x1d16 	///../ucode/register.h:4789
+#define P_VPP_HSC_REGION3_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_HSC_REGION3_PHASE_SLOPE)
+#define VPP_HSC_REGION4_PHASE_SLOPE 0x1d17 	///../ucode/register.h:4791
+#define P_VPP_HSC_REGION4_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP_HSC_REGION4_PHASE_SLOPE)
+#define VPP_HSC_PHASE_CTRL 0x1d18 	///../ucode/register.h:4795
+#define P_VPP_HSC_PHASE_CTRL 		VCBUS_REG_ADDR(VPP_HSC_PHASE_CTRL)
+#define VPP_SC_MISC 0x1d19 	///../ucode/register.h:4810
+#define P_VPP_SC_MISC 		VCBUS_REG_ADDR(VPP_SC_MISC)
+#define VPP_PREBLEND_VD1_H_START_END 0x1d1a 	///../ucode/register.h:4814
+#define P_VPP_PREBLEND_VD1_H_START_END 		VCBUS_REG_ADDR(VPP_PREBLEND_VD1_H_START_END)
+#define VPP_PREBLEND_VD1_V_START_END 0x1d1b 	///../ucode/register.h:4818
+#define P_VPP_PREBLEND_VD1_V_START_END 		VCBUS_REG_ADDR(VPP_PREBLEND_VD1_V_START_END)
+#define VPP_POSTBLEND_VD1_H_START_END 0x1d1c 	///../ucode/register.h:4822
+#define P_VPP_POSTBLEND_VD1_H_START_END 		VCBUS_REG_ADDR(VPP_POSTBLEND_VD1_H_START_END)
+#define VPP_POSTBLEND_VD1_V_START_END 0x1d1d 	///../ucode/register.h:4826
+#define P_VPP_POSTBLEND_VD1_V_START_END 		VCBUS_REG_ADDR(VPP_POSTBLEND_VD1_V_START_END)
+#define VPP_BLEND_VD2_H_START_END 0x1d1e 	///../ucode/register.h:4830
+#define P_VPP_BLEND_VD2_H_START_END 		VCBUS_REG_ADDR(VPP_BLEND_VD2_H_START_END)
+#define VPP_BLEND_VD2_V_START_END 0x1d1f 	///../ucode/register.h:4834
+#define P_VPP_BLEND_VD2_V_START_END 		VCBUS_REG_ADDR(VPP_BLEND_VD2_V_START_END)
+#define VPP_PREBLEND_H_SIZE 0x1d20 	///../ucode/register.h:4836
+#define P_VPP_PREBLEND_H_SIZE 		VCBUS_REG_ADDR(VPP_PREBLEND_H_SIZE)
+#define VPP_POSTBLEND_H_SIZE 0x1d21 	///../ucode/register.h:4838
+#define P_VPP_POSTBLEND_H_SIZE 		VCBUS_REG_ADDR(VPP_POSTBLEND_H_SIZE)
+#define VPP_HOLD_LINES 0x1d22 	///../ucode/register.h:4844
+#define P_VPP_HOLD_LINES 		VCBUS_REG_ADDR(VPP_HOLD_LINES)
+#define VPP_BLEND_ONECOLOR_CTRL 0x1d23 	///../ucode/register.h:4850
+#define P_VPP_BLEND_ONECOLOR_CTRL 		VCBUS_REG_ADDR(VPP_BLEND_ONECOLOR_CTRL)
+#define VPP_PREBLEND_CURRENT_XY 0x1d24 	///../ucode/register.h:4854
+#define P_VPP_PREBLEND_CURRENT_XY 		VCBUS_REG_ADDR(VPP_PREBLEND_CURRENT_XY)
+#define VPP_POSTBLEND_CURRENT_XY 0x1d25 	///../ucode/register.h:4858
+#define P_VPP_POSTBLEND_CURRENT_XY 		VCBUS_REG_ADDR(VPP_POSTBLEND_CURRENT_XY)
+#define VPP_MISC 0x1d26 	///../ucode/register.h:4883
+#define P_VPP_MISC 		VCBUS_REG_ADDR(VPP_MISC)
+#define VPP_OFIFO_SIZE 0x1d27 	///../ucode/register.h:4892
+#define P_VPP_OFIFO_SIZE 		VCBUS_REG_ADDR(VPP_OFIFO_SIZE)
+#define VPP_FIFO_STATUS 0x1d28 	///../ucode/register.h:4897
+#define P_VPP_FIFO_STATUS 		VCBUS_REG_ADDR(VPP_FIFO_STATUS)
+#define VPP_SMOKE_CTRL 0x1d29 	///../ucode/register.h:4904
+#define P_VPP_SMOKE_CTRL 		VCBUS_REG_ADDR(VPP_SMOKE_CTRL)
+#define VPP_SMOKE1_VAL 0x1d2a 	///../ucode/register.h:4913
+#define P_VPP_SMOKE1_VAL 		VCBUS_REG_ADDR(VPP_SMOKE1_VAL)
+#define VPP_SMOKE2_VAL 0x1d2b 	///../ucode/register.h:4914
+#define P_VPP_SMOKE2_VAL 		VCBUS_REG_ADDR(VPP_SMOKE2_VAL)
+#define VPP_SMOKE3_VAL 0x1d2c 	///../ucode/register.h:4915
+#define P_VPP_SMOKE3_VAL 		VCBUS_REG_ADDR(VPP_SMOKE3_VAL)
+#define VPP_SMOKE1_H_START_END 0x1d2d 	///../ucode/register.h:4918
+#define P_VPP_SMOKE1_H_START_END 		VCBUS_REG_ADDR(VPP_SMOKE1_H_START_END)
+#define VPP_SMOKE1_V_START_END 0x1d2e 	///../ucode/register.h:4921
+#define P_VPP_SMOKE1_V_START_END 		VCBUS_REG_ADDR(VPP_SMOKE1_V_START_END)
+#define VPP_SMOKE2_H_START_END 0x1d2f 	///../ucode/register.h:4924
+#define P_VPP_SMOKE2_H_START_END 		VCBUS_REG_ADDR(VPP_SMOKE2_H_START_END)
+#define VPP_SMOKE2_V_START_END 0x1d30 	///../ucode/register.h:4927
+#define P_VPP_SMOKE2_V_START_END 		VCBUS_REG_ADDR(VPP_SMOKE2_V_START_END)
+#define VPP_SMOKE3_H_START_END 0x1d31 	///../ucode/register.h:4930
+#define P_VPP_SMOKE3_H_START_END 		VCBUS_REG_ADDR(VPP_SMOKE3_H_START_END)
+#define VPP_SMOKE3_V_START_END 0x1d32 	///../ucode/register.h:4933
+#define P_VPP_SMOKE3_V_START_END 		VCBUS_REG_ADDR(VPP_SMOKE3_V_START_END)
+#define VPP_SCO_FIFO_CTRL 0x1d33 	///../ucode/register.h:4936
+#define P_VPP_SCO_FIFO_CTRL 		VCBUS_REG_ADDR(VPP_SCO_FIFO_CTRL)
+#define VPP_HSC_PHASE_CTRL1 0x1d34 	///../ucode/register.h:4944
+#define P_VPP_HSC_PHASE_CTRL1 		VCBUS_REG_ADDR(VPP_HSC_PHASE_CTRL1)
+#define VPP_HSC_INI_PAT_CTRL 0x1d35 	///../ucode/register.h:4952
+#define P_VPP_HSC_INI_PAT_CTRL 		VCBUS_REG_ADDR(VPP_HSC_INI_PAT_CTRL)
+#define VPP_VADJ_CTRL 0x1d40 	///../ucode/register.h:4957
+#define P_VPP_VADJ_CTRL 		VCBUS_REG_ADDR(VPP_VADJ_CTRL)
+#define VPP_VADJ1_Y 0x1d41 	///../ucode/register.h:4960
+#define P_VPP_VADJ1_Y 		VCBUS_REG_ADDR(VPP_VADJ1_Y)
+#define VPP_VADJ1_MA_MB 0x1d42 	///../ucode/register.h:4964
+#define P_VPP_VADJ1_MA_MB 		VCBUS_REG_ADDR(VPP_VADJ1_MA_MB)
+#define VPP_VADJ1_MC_MD 0x1d43 	///../ucode/register.h:4965
+#define P_VPP_VADJ1_MC_MD 		VCBUS_REG_ADDR(VPP_VADJ1_MC_MD)
+#define VPP_VADJ2_Y 0x1d44 	///../ucode/register.h:4968
+#define P_VPP_VADJ2_Y 		VCBUS_REG_ADDR(VPP_VADJ2_Y)
+#define VPP_VADJ2_MA_MB 0x1d45 	///../ucode/register.h:4972
+#define P_VPP_VADJ2_MA_MB 		VCBUS_REG_ADDR(VPP_VADJ2_MA_MB)
+#define VPP_VADJ2_MC_MD 0x1d46 	///../ucode/register.h:4973
+#define P_VPP_VADJ2_MC_MD 		VCBUS_REG_ADDR(VPP_VADJ2_MC_MD)
+#define VPP_HSHARP_CTRL 0x1d50 	///../ucode/register.h:4977
+#define P_VPP_HSHARP_CTRL 		VCBUS_REG_ADDR(VPP_HSHARP_CTRL)
+#define VPP_HSHARP_LUMA_THRESH01 0x1d51 	///../ucode/register.h:4981
+#define P_VPP_HSHARP_LUMA_THRESH01 		VCBUS_REG_ADDR(VPP_HSHARP_LUMA_THRESH01)
+#define VPP_HSHARP_LUMA_THRESH23 0x1d52 	///../ucode/register.h:4985
+#define P_VPP_HSHARP_LUMA_THRESH23 		VCBUS_REG_ADDR(VPP_HSHARP_LUMA_THRESH23)
+#define VPP_HSHARP_CHROMA_THRESH01 0x1d53 	///../ucode/register.h:4988
+#define P_VPP_HSHARP_CHROMA_THRESH01 		VCBUS_REG_ADDR(VPP_HSHARP_CHROMA_THRESH01)
+#define VPP_HSHARP_CHROMA_THRESH23 0x1d54 	///../ucode/register.h:4991
+#define P_VPP_HSHARP_CHROMA_THRESH23 		VCBUS_REG_ADDR(VPP_HSHARP_CHROMA_THRESH23)
+#define VPP_HSHARP_LUMA_GAIN 0x1d55 	///../ucode/register.h:4995
+#define P_VPP_HSHARP_LUMA_GAIN 		VCBUS_REG_ADDR(VPP_HSHARP_LUMA_GAIN)
+#define VPP_HSHARP_CHROMA_GAIN 0x1d56 	///../ucode/register.h:5000
+#define P_VPP_HSHARP_CHROMA_GAIN 		VCBUS_REG_ADDR(VPP_HSHARP_CHROMA_GAIN)
+#define VPP_MATRIX_PROBE_COLOR 0x1d5c 	///../ucode/register.h:5006
+#define P_VPP_MATRIX_PROBE_COLOR 		VCBUS_REG_ADDR(VPP_MATRIX_PROBE_COLOR)
+#define VPP_MATRIX_HL_COLOR 0x1d5d 	///../ucode/register.h:5010
+#define P_VPP_MATRIX_HL_COLOR 		VCBUS_REG_ADDR(VPP_MATRIX_HL_COLOR)
+#define VPP_MATRIX_PROBE_POS 0x1d5e 	///../ucode/register.h:5013
+#define P_VPP_MATRIX_PROBE_POS 		VCBUS_REG_ADDR(VPP_MATRIX_PROBE_POS)
+#define VPP_MATRIX_CTRL 0x1d5f 	///../ucode/register.h:5023
+#define P_VPP_MATRIX_CTRL 		VCBUS_REG_ADDR(VPP_MATRIX_CTRL)
+#define VPP_MATRIX_COEF00_01 0x1d60 	///../ucode/register.h:5026
+#define P_VPP_MATRIX_COEF00_01 		VCBUS_REG_ADDR(VPP_MATRIX_COEF00_01)
+#define VPP_MATRIX_COEF02_10 0x1d61 	///../ucode/register.h:5029
+#define P_VPP_MATRIX_COEF02_10 		VCBUS_REG_ADDR(VPP_MATRIX_COEF02_10)
+#define VPP_MATRIX_COEF11_12 0x1d62 	///../ucode/register.h:5032
+#define P_VPP_MATRIX_COEF11_12 		VCBUS_REG_ADDR(VPP_MATRIX_COEF11_12)
+#define VPP_MATRIX_COEF20_21 0x1d63 	///../ucode/register.h:5035
+#define P_VPP_MATRIX_COEF20_21 		VCBUS_REG_ADDR(VPP_MATRIX_COEF20_21)
+#define VPP_MATRIX_COEF22 0x1d64 	///../ucode/register.h:5036
+#define P_VPP_MATRIX_COEF22 		VCBUS_REG_ADDR(VPP_MATRIX_COEF22)
+#define VPP_MATRIX_OFFSET0_1 0x1d65 	///../ucode/register.h:5039
+#define P_VPP_MATRIX_OFFSET0_1 		VCBUS_REG_ADDR(VPP_MATRIX_OFFSET0_1)
+#define VPP_MATRIX_OFFSET2 0x1d66 	///../ucode/register.h:5041
+#define P_VPP_MATRIX_OFFSET2 		VCBUS_REG_ADDR(VPP_MATRIX_OFFSET2)
+#define VPP_MATRIX_PRE_OFFSET0_1 0x1d67 	///../ucode/register.h:5044
+#define P_VPP_MATRIX_PRE_OFFSET0_1 		VCBUS_REG_ADDR(VPP_MATRIX_PRE_OFFSET0_1)
+#define VPP_MATRIX_PRE_OFFSET2 0x1d68 	///../ucode/register.h:5046
+#define P_VPP_MATRIX_PRE_OFFSET2 		VCBUS_REG_ADDR(VPP_MATRIX_PRE_OFFSET2)
+#define VPP_DUMMY_DATA1 0x1d69 	///../ucode/register.h:5051
+#define P_VPP_DUMMY_DATA1 		VCBUS_REG_ADDR(VPP_DUMMY_DATA1)
+#define VPP_GAINOFF_CTRL0 0x1d6a 	///../ucode/register.h:5055
+#define P_VPP_GAINOFF_CTRL0 		VCBUS_REG_ADDR(VPP_GAINOFF_CTRL0)
+#define VPP_GAINOFF_CTRL1 0x1d6b 	///../ucode/register.h:5058
+#define P_VPP_GAINOFF_CTRL1 		VCBUS_REG_ADDR(VPP_GAINOFF_CTRL1)
+#define VPP_GAINOFF_CTRL2 0x1d6c 	///../ucode/register.h:5061
+#define P_VPP_GAINOFF_CTRL2 		VCBUS_REG_ADDR(VPP_GAINOFF_CTRL2)
+#define VPP_GAINOFF_CTRL3 0x1d6d 	///../ucode/register.h:5064
+#define P_VPP_GAINOFF_CTRL3 		VCBUS_REG_ADDR(VPP_GAINOFF_CTRL3)
+#define VPP_GAINOFF_CTRL4 0x1d6e 	///../ucode/register.h:5066
+#define P_VPP_GAINOFF_CTRL4 		VCBUS_REG_ADDR(VPP_GAINOFF_CTRL4)
+#define VPP_CHROMA_ADDR_PORT 0x1d70 	///../ucode/register.h:5088
+#define P_VPP_CHROMA_ADDR_PORT 		VCBUS_REG_ADDR(VPP_CHROMA_ADDR_PORT)
+#define VPP_CHROMA_DATA_PORT 0x1d71 	///../ucode/register.h:5089
+#define P_VPP_CHROMA_DATA_PORT 		VCBUS_REG_ADDR(VPP_CHROMA_DATA_PORT)
+#define VPP_GCLK_CTRL0 0x1d72 	///../ucode/register.h:5666
+#define P_VPP_GCLK_CTRL0 		VCBUS_REG_ADDR(VPP_GCLK_CTRL0)
+#define VPP_GCLK_CTRL1 0x1d73 	///../ucode/register.h:5669
+#define P_VPP_GCLK_CTRL1 		VCBUS_REG_ADDR(VPP_GCLK_CTRL1)
+#define VPP_SC_GCLK_CTRL 0x1d74 	///../ucode/register.h:5672
+#define P_VPP_SC_GCLK_CTRL 		VCBUS_REG_ADDR(VPP_SC_GCLK_CTRL)
+#define VPP_MISC1 0x1d76 	///../ucode/register.h:5675
+#define P_VPP_MISC1 		VCBUS_REG_ADDR(VPP_MISC1)
+#define VPP_BLACKEXT_CTRL 0x1d80 	///../ucode/register.h:5680
+#define P_VPP_BLACKEXT_CTRL 		VCBUS_REG_ADDR(VPP_BLACKEXT_CTRL)
+#define VPP_DNLP_CTRL_00 0x1d81 	///../ucode/register.h:5685
+#define P_VPP_DNLP_CTRL_00 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_00)
+#define VPP_DNLP_CTRL_01 0x1d82 	///../ucode/register.h:5690
+#define P_VPP_DNLP_CTRL_01 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_01)
+#define VPP_DNLP_CTRL_02 0x1d83 	///../ucode/register.h:5695
+#define P_VPP_DNLP_CTRL_02 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_02)
+#define VPP_DNLP_CTRL_03 0x1d84 	///../ucode/register.h:5700
+#define P_VPP_DNLP_CTRL_03 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_03)
+#define VPP_DNLP_CTRL_04 0x1d85 	///../ucode/register.h:5705
+#define P_VPP_DNLP_CTRL_04 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_04)
+#define VPP_DNLP_CTRL_05 0x1d86 	///../ucode/register.h:5710
+#define P_VPP_DNLP_CTRL_05 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_05)
+#define VPP_DNLP_CTRL_06 0x1d87 	///../ucode/register.h:5715
+#define P_VPP_DNLP_CTRL_06 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_06)
+#define VPP_DNLP_CTRL_07 0x1d88 	///../ucode/register.h:5720
+#define P_VPP_DNLP_CTRL_07 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_07)
+#define VPP_DNLP_CTRL_08 0x1d89 	///../ucode/register.h:5725
+#define P_VPP_DNLP_CTRL_08 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_08)
+#define VPP_DNLP_CTRL_09 0x1d8a 	///../ucode/register.h:5730
+#define P_VPP_DNLP_CTRL_09 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_09)
+#define VPP_DNLP_CTRL_10 0x1d8b 	///../ucode/register.h:5735
+#define P_VPP_DNLP_CTRL_10 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_10)
+#define VPP_DNLP_CTRL_11 0x1d8c 	///../ucode/register.h:5740
+#define P_VPP_DNLP_CTRL_11 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_11)
+#define VPP_DNLP_CTRL_12 0x1d8d 	///../ucode/register.h:5745
+#define P_VPP_DNLP_CTRL_12 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_12)
+#define VPP_DNLP_CTRL_13 0x1d8e 	///../ucode/register.h:5750
+#define P_VPP_DNLP_CTRL_13 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_13)
+#define VPP_DNLP_CTRL_14 0x1d8f 	///../ucode/register.h:5755
+#define P_VPP_DNLP_CTRL_14 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_14)
+#define VPP_DNLP_CTRL_15 0x1d90 	///../ucode/register.h:5760
+#define P_VPP_DNLP_CTRL_15 		VCBUS_REG_ADDR(VPP_DNLP_CTRL_15)
+#define VPP_PEAKING_HGAIN 0x1d91 	///../ucode/register.h:5769
+#define P_VPP_PEAKING_HGAIN 		VCBUS_REG_ADDR(VPP_PEAKING_HGAIN)
+#define VPP_PEAKING_VGAIN 0x1d92 	///../ucode/register.h:5778
+#define P_VPP_PEAKING_VGAIN 		VCBUS_REG_ADDR(VPP_PEAKING_VGAIN)
+#define VPP_PEAKING_NLP_1 0x1d93 	///../ucode/register.h:5784
+#define P_VPP_PEAKING_NLP_1 		VCBUS_REG_ADDR(VPP_PEAKING_NLP_1)
+#define VPP_PEAKING_NLP_2 0x1d94 	///../ucode/register.h:5789
+#define P_VPP_PEAKING_NLP_2 		VCBUS_REG_ADDR(VPP_PEAKING_NLP_2)
+#define VPP_PEAKING_NLP_3 0x1d95 	///../ucode/register.h:5795
+#define P_VPP_PEAKING_NLP_3 		VCBUS_REG_ADDR(VPP_PEAKING_NLP_3)
+#define VPP_PEAKING_NLP_4 0x1d96 	///../ucode/register.h:5800
+#define P_VPP_PEAKING_NLP_4 		VCBUS_REG_ADDR(VPP_PEAKING_NLP_4)
+#define VPP_PEAKING_NLP_5 0x1d97 	///../ucode/register.h:5805
+#define P_VPP_PEAKING_NLP_5 		VCBUS_REG_ADDR(VPP_PEAKING_NLP_5)
+#define VPP_SHARP_LIMIT 0x1d98 	///../ucode/register.h:5812
+#define P_VPP_SHARP_LIMIT 		VCBUS_REG_ADDR(VPP_SHARP_LIMIT)
+#define VPP_VLTI_CTRL 0x1d99 	///../ucode/register.h:5817
+#define P_VPP_VLTI_CTRL 		VCBUS_REG_ADDR(VPP_VLTI_CTRL)
+#define VPP_HLTI_CTRL 0x1d9a 	///../ucode/register.h:5822
+#define P_VPP_HLTI_CTRL 		VCBUS_REG_ADDR(VPP_HLTI_CTRL)
+#define VPP_CTI_CTRL 0x1d9b 	///../ucode/register.h:5832
+#define P_VPP_CTI_CTRL 		VCBUS_REG_ADDR(VPP_CTI_CTRL)
+#define VPP_BLUE_STRETCH_1 0x1d9c 	///../ucode/register.h:5842
+#define P_VPP_BLUE_STRETCH_1 		VCBUS_REG_ADDR(VPP_BLUE_STRETCH_1)
+#define VPP_BLUE_STRETCH_2 0x1d9d 	///../ucode/register.h:5847
+#define P_VPP_BLUE_STRETCH_2 		VCBUS_REG_ADDR(VPP_BLUE_STRETCH_2)
+#define VPP_BLUE_STRETCH_3 0x1d9e 	///../ucode/register.h:5852
+#define P_VPP_BLUE_STRETCH_3 		VCBUS_REG_ADDR(VPP_BLUE_STRETCH_3)
+#define VPP_CCORING_CTRL 0x1da0 	///../ucode/register.h:5856
+#define P_VPP_CCORING_CTRL 		VCBUS_REG_ADDR(VPP_CCORING_CTRL)
+#define VPP_VE_ENABLE_CTRL 0x1da1 	///../ucode/register.h:5868
+#define P_VPP_VE_ENABLE_CTRL 		VCBUS_REG_ADDR(VPP_VE_ENABLE_CTRL)
+#define VPP_VE_DEMO_LEFT_TOP_SCREEN_WIDTH 0x1da2 	///../ucode/register.h:5870
+#define P_VPP_VE_DEMO_LEFT_TOP_SCREEN_WIDTH 		VCBUS_REG_ADDR(VPP_VE_DEMO_LEFT_TOP_SCREEN_WIDTH)
+#define VPP_VE_DEMO_CENTER_BAR 0x1da3 	///../ucode/register.h:5876
+#define P_VPP_VE_DEMO_CENTER_BAR 		VCBUS_REG_ADDR(VPP_VE_DEMO_CENTER_BAR)
+#define VPP_VE_H_V_SIZE 0x1da4 	///../ucode/register.h:5879
+#define P_VPP_VE_H_V_SIZE 		VCBUS_REG_ADDR(VPP_VE_H_V_SIZE)
+#define VPP_VDO_MEAS_CTRL 0x1da8 	///../ucode/register.h:5884
+#define P_VPP_VDO_MEAS_CTRL 		VCBUS_REG_ADDR(VPP_VDO_MEAS_CTRL)
+#define VPP_VDO_MEAS_VS_COUNT_HI 0x1da9 	///../ucode/register.h:5888
+#define P_VPP_VDO_MEAS_VS_COUNT_HI 		VCBUS_REG_ADDR(VPP_VDO_MEAS_VS_COUNT_HI)
+#define VPP_VDO_MEAS_VS_COUNT_LO 0x1daa 	///../ucode/register.h:5891
+#define P_VPP_VDO_MEAS_VS_COUNT_LO 		VCBUS_REG_ADDR(VPP_VDO_MEAS_VS_COUNT_LO)
+#define VPP_INPUT_CTRL 0x1dab 	///../ucode/register.h:5899
+#define P_VPP_INPUT_CTRL 		VCBUS_REG_ADDR(VPP_INPUT_CTRL)
+#define VPP_CTI_CTRL2 0x1dac 	///../ucode/register.h:5904
+#define P_VPP_CTI_CTRL2 		VCBUS_REG_ADDR(VPP_CTI_CTRL2)
+#define VPP_PEAKING_SAT_THD1 0x1dad 	///../ucode/register.h:5905
+#define P_VPP_PEAKING_SAT_THD1 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD1)
+#define VPP_PEAKING_SAT_THD2 0x1dae 	///../ucode/register.h:5906
+#define P_VPP_PEAKING_SAT_THD2 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD2)
+#define VPP_PEAKING_SAT_THD3 0x1daf 	///../ucode/register.h:5907
+#define P_VPP_PEAKING_SAT_THD3 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD3)
+#define VPP_PEAKING_SAT_THD4 0x1db0 	///../ucode/register.h:5908
+#define P_VPP_PEAKING_SAT_THD4 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD4)
+#define VPP_PEAKING_SAT_THD5 0x1db1 	///../ucode/register.h:5909
+#define P_VPP_PEAKING_SAT_THD5 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD5)
+#define VPP_PEAKING_SAT_THD6 0x1db2 	///../ucode/register.h:5910
+#define P_VPP_PEAKING_SAT_THD6 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD6)
+#define VPP_PEAKING_SAT_THD7 0x1db3 	///../ucode/register.h:5911
+#define P_VPP_PEAKING_SAT_THD7 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD7)
+#define VPP_PEAKING_SAT_THD8 0x1db4 	///../ucode/register.h:5912
+#define P_VPP_PEAKING_SAT_THD8 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD8)
+#define VPP_PEAKING_SAT_THD9 0x1db5 	///../ucode/register.h:5913
+#define P_VPP_PEAKING_SAT_THD9 		VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD9)
+#define VPP_PEAKING_GAIN_ADD1 0x1db6 	///../ucode/register.h:5914
+#define P_VPP_PEAKING_GAIN_ADD1 		VCBUS_REG_ADDR(VPP_PEAKING_GAIN_ADD1)
+#define VPP_PEAKING_GAIN_ADD2 0x1db7 	///../ucode/register.h:5915
+#define P_VPP_PEAKING_GAIN_ADD2 		VCBUS_REG_ADDR(VPP_PEAKING_GAIN_ADD2)
+#define VPP_PEAKING_DNLP 0x1db8 	///../ucode/register.h:5920
+#define P_VPP_PEAKING_DNLP 		VCBUS_REG_ADDR(VPP_PEAKING_DNLP)
+#define VPP_SHARP_DEMO_WIN_CTRL1 0x1db9 	///../ucode/register.h:5924
+#define P_VPP_SHARP_DEMO_WIN_CTRL1 		VCBUS_REG_ADDR(VPP_SHARP_DEMO_WIN_CTRL1)
+#define VPP_SHARP_DEMO_WIN_CTRL2 0x1dba 	///../ucode/register.h:5927
+#define P_VPP_SHARP_DEMO_WIN_CTRL2 		VCBUS_REG_ADDR(VPP_SHARP_DEMO_WIN_CTRL2)
+#define VPP_FRONT_HLTI_CTRL 0x1dbb 	///../ucode/register.h:5932
+#define P_VPP_FRONT_HLTI_CTRL 		VCBUS_REG_ADDR(VPP_FRONT_HLTI_CTRL)
+#define VPP_FRONT_CTI_CTRL 0x1dbc 	///../ucode/register.h:5940
+#define P_VPP_FRONT_CTI_CTRL 		VCBUS_REG_ADDR(VPP_FRONT_CTI_CTRL)
+#define VPP_FRONT_CTI_CTRL2 0x1dbd 	///../ucode/register.h:5946
+#define P_VPP_FRONT_CTI_CTRL2 		VCBUS_REG_ADDR(VPP_FRONT_CTI_CTRL2)
+#define VPP_OSD_VSC_PHASE_STEP 0x1dc0 	///../ucode/register.h:5949
+#define P_VPP_OSD_VSC_PHASE_STEP 		VCBUS_REG_ADDR(VPP_OSD_VSC_PHASE_STEP)
+#define VPP_OSD_VSC_INI_PHASE 0x1dc1 	///../ucode/register.h:5952
+#define P_VPP_OSD_VSC_INI_PHASE 		VCBUS_REG_ADDR(VPP_OSD_VSC_INI_PHASE)
+#define VPP_OSD_VSC_CTRL0 0x1dc2 	///../ucode/register.h:5963
+#define P_VPP_OSD_VSC_CTRL0 		VCBUS_REG_ADDR(VPP_OSD_VSC_CTRL0)
+#define VPP_OSD_HSC_PHASE_STEP 0x1dc3 	///../ucode/register.h:5966
+#define P_VPP_OSD_HSC_PHASE_STEP 		VCBUS_REG_ADDR(VPP_OSD_HSC_PHASE_STEP)
+#define VPP_OSD_HSC_INI_PHASE 0x1dc4 	///../ucode/register.h:5969
+#define P_VPP_OSD_HSC_INI_PHASE 		VCBUS_REG_ADDR(VPP_OSD_HSC_INI_PHASE)
+#define VPP_OSD_HSC_CTRL0 0x1dc5 	///../ucode/register.h:5979
+#define P_VPP_OSD_HSC_CTRL0 		VCBUS_REG_ADDR(VPP_OSD_HSC_CTRL0)
+#define VPP_OSD_HSC_INI_PAT_CTRL 0x1dc6 	///../ucode/register.h:5984
+#define P_VPP_OSD_HSC_INI_PAT_CTRL 		VCBUS_REG_ADDR(VPP_OSD_HSC_INI_PAT_CTRL)
+#define VPP_OSD_SC_DUMMY_DATA 0x1dc7 	///../ucode/register.h:5989
+#define P_VPP_OSD_SC_DUMMY_DATA 		VCBUS_REG_ADDR(VPP_OSD_SC_DUMMY_DATA)
+#define VPP_OSD_SC_CTRL0 0x1dc8 	///../ucode/register.h:5997
+#define P_VPP_OSD_SC_CTRL0 		VCBUS_REG_ADDR(VPP_OSD_SC_CTRL0)
+#define VPP_OSD_SCI_WH_M1 0x1dc9 	///../ucode/register.h:6000
+#define P_VPP_OSD_SCI_WH_M1 		VCBUS_REG_ADDR(VPP_OSD_SCI_WH_M1)
+#define VPP_OSD_SCO_H_START_END 0x1dca 	///../ucode/register.h:6003
+#define P_VPP_OSD_SCO_H_START_END 		VCBUS_REG_ADDR(VPP_OSD_SCO_H_START_END)
+#define VPP_OSD_SCO_V_START_END 0x1dcb 	///../ucode/register.h:6006
+#define P_VPP_OSD_SCO_V_START_END 		VCBUS_REG_ADDR(VPP_OSD_SCO_V_START_END)
+#define VPP_OSD_SCALE_COEF_IDX 0x1dcc 	///../ucode/register.h:6016
+#define P_VPP_OSD_SCALE_COEF_IDX 		VCBUS_REG_ADDR(VPP_OSD_SCALE_COEF_IDX)
+#define VPP_OSD_SCALE_COEF 0x1dcd 	///../ucode/register.h:6018
+#define P_VPP_OSD_SCALE_COEF 		VCBUS_REG_ADDR(VPP_OSD_SCALE_COEF)
+#define VPP_INT_LINE_NUM 0x1dce 	///../ucode/register.h:6020
+#define P_VPP_INT_LINE_NUM 		VCBUS_REG_ADDR(VPP_INT_LINE_NUM)
+#define VPP2_DUMMY_DATA 0x1900 	///../ucode/register.h:6041
+#define P_VPP2_DUMMY_DATA 		VCBUS_REG_ADDR(VPP2_DUMMY_DATA)
+#define VPP2_LINE_IN_LENGTH 0x1901 	///../ucode/register.h:6043
+#define P_VPP2_LINE_IN_LENGTH 		VCBUS_REG_ADDR(VPP2_LINE_IN_LENGTH)
+#define VPP2_PIC_IN_HEIGHT 0x1902 	///../ucode/register.h:6045
+#define P_VPP2_PIC_IN_HEIGHT 		VCBUS_REG_ADDR(VPP2_PIC_IN_HEIGHT)
+#define VPP2_SCALE_COEF_IDX 0x1903 	///../ucode/register.h:6056
+#define P_VPP2_SCALE_COEF_IDX 		VCBUS_REG_ADDR(VPP2_SCALE_COEF_IDX)
+#define VPP2_SCALE_COEF 0x1904 	///../ucode/register.h:6058
+#define P_VPP2_SCALE_COEF 		VCBUS_REG_ADDR(VPP2_SCALE_COEF)
+#define VPP2_VSC_REGION12_STARTP 0x1905 	///../ucode/register.h:6094
+#define P_VPP2_VSC_REGION12_STARTP 		VCBUS_REG_ADDR(VPP2_VSC_REGION12_STARTP)
+#define VPP2_VSC_REGION34_STARTP 0x1906 	///../ucode/register.h:6097
+#define P_VPP2_VSC_REGION34_STARTP 		VCBUS_REG_ADDR(VPP2_VSC_REGION34_STARTP)
+#define VPP2_VSC_REGION4_ENDP 0x1907 	///../ucode/register.h:6098
+#define P_VPP2_VSC_REGION4_ENDP 		VCBUS_REG_ADDR(VPP2_VSC_REGION4_ENDP)
+#define VPP2_VSC_START_PHASE_STEP 0x1908 	///../ucode/register.h:6102
+#define P_VPP2_VSC_START_PHASE_STEP 		VCBUS_REG_ADDR(VPP2_VSC_START_PHASE_STEP)
+#define VPP2_VSC_REGION0_PHASE_SLOPE 0x1909 	///../ucode/register.h:6104
+#define P_VPP2_VSC_REGION0_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_VSC_REGION0_PHASE_SLOPE)
+#define VPP2_VSC_REGION1_PHASE_SLOPE 0x190a 	///../ucode/register.h:6106
+#define P_VPP2_VSC_REGION1_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_VSC_REGION1_PHASE_SLOPE)
+#define VPP2_VSC_REGION3_PHASE_SLOPE 0x190b 	///../ucode/register.h:6108
+#define P_VPP2_VSC_REGION3_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_VSC_REGION3_PHASE_SLOPE)
+#define VPP2_VSC_REGION4_PHASE_SLOPE 0x190c 	///../ucode/register.h:6110
+#define P_VPP2_VSC_REGION4_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_VSC_REGION4_PHASE_SLOPE)
+#define VPP2_VSC_PHASE_CTRL 0x190d 	///../ucode/register.h:6121
+#define P_VPP2_VSC_PHASE_CTRL 		VCBUS_REG_ADDR(VPP2_VSC_PHASE_CTRL)
+#define VPP2_VSC_INI_PHASE 0x190e 	///../ucode/register.h:6124
+#define P_VPP2_VSC_INI_PHASE 		VCBUS_REG_ADDR(VPP2_VSC_INI_PHASE)
+#define VPP2_HSC_REGION12_STARTP 0x1910 	///../ucode/register.h:6127
+#define P_VPP2_HSC_REGION12_STARTP 		VCBUS_REG_ADDR(VPP2_HSC_REGION12_STARTP)
+#define VPP2_HSC_REGION34_STARTP 0x1911 	///../ucode/register.h:6130
+#define P_VPP2_HSC_REGION34_STARTP 		VCBUS_REG_ADDR(VPP2_HSC_REGION34_STARTP)
+#define VPP2_HSC_REGION4_ENDP 0x1912 	///../ucode/register.h:6131
+#define P_VPP2_HSC_REGION4_ENDP 		VCBUS_REG_ADDR(VPP2_HSC_REGION4_ENDP)
+#define VPP2_HSC_START_PHASE_STEP 0x1913 	///../ucode/register.h:6135
+#define P_VPP2_HSC_START_PHASE_STEP 		VCBUS_REG_ADDR(VPP2_HSC_START_PHASE_STEP)
+#define VPP2_HSC_REGION0_PHASE_SLOPE 0x1914 	///../ucode/register.h:6137
+#define P_VPP2_HSC_REGION0_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_HSC_REGION0_PHASE_SLOPE)
+#define VPP2_HSC_REGION1_PHASE_SLOPE 0x1915 	///../ucode/register.h:6139
+#define P_VPP2_HSC_REGION1_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_HSC_REGION1_PHASE_SLOPE)
+#define VPP2_HSC_REGION3_PHASE_SLOPE 0x1916 	///../ucode/register.h:6141
+#define P_VPP2_HSC_REGION3_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_HSC_REGION3_PHASE_SLOPE)
+#define VPP2_HSC_REGION4_PHASE_SLOPE 0x1917 	///../ucode/register.h:6143
+#define P_VPP2_HSC_REGION4_PHASE_SLOPE 		VCBUS_REG_ADDR(VPP2_HSC_REGION4_PHASE_SLOPE)
+#define VPP2_HSC_PHASE_CTRL 0x1918 	///../ucode/register.h:6147
+#define P_VPP2_HSC_PHASE_CTRL 		VCBUS_REG_ADDR(VPP2_HSC_PHASE_CTRL)
+#define VPP2_SC_MISC 0x1919 	///../ucode/register.h:6162
+#define P_VPP2_SC_MISC 		VCBUS_REG_ADDR(VPP2_SC_MISC)
+#define VPP2_PREBLEND_VD1_H_START_END 0x191a 	///../ucode/register.h:6166
+#define P_VPP2_PREBLEND_VD1_H_START_END 		VCBUS_REG_ADDR(VPP2_PREBLEND_VD1_H_START_END)
+#define VPP2_PREBLEND_VD1_V_START_END 0x191b 	///../ucode/register.h:6170
+#define P_VPP2_PREBLEND_VD1_V_START_END 		VCBUS_REG_ADDR(VPP2_PREBLEND_VD1_V_START_END)
+#define VPP2_POSTBLEND_VD1_H_START_END 0x191c 	///../ucode/register.h:6174
+#define P_VPP2_POSTBLEND_VD1_H_START_END 		VCBUS_REG_ADDR(VPP2_POSTBLEND_VD1_H_START_END)
+#define VPP2_POSTBLEND_VD1_V_START_END 0x191d 	///../ucode/register.h:6178
+#define P_VPP2_POSTBLEND_VD1_V_START_END 		VCBUS_REG_ADDR(VPP2_POSTBLEND_VD1_V_START_END)
+#define VPP2_PREBLEND_H_SIZE 0x1920 	///../ucode/register.h:6180
+#define P_VPP2_PREBLEND_H_SIZE 		VCBUS_REG_ADDR(VPP2_PREBLEND_H_SIZE)
+#define VPP2_POSTBLEND_H_SIZE 0x1921 	///../ucode/register.h:6182
+#define P_VPP2_POSTBLEND_H_SIZE 		VCBUS_REG_ADDR(VPP2_POSTBLEND_H_SIZE)
+#define VPP2_HOLD_LINES 0x1922 	///../ucode/register.h:6188
+#define P_VPP2_HOLD_LINES 		VCBUS_REG_ADDR(VPP2_HOLD_LINES)
+#define VPP2_BLEND_ONECOLOR_CTRL 0x1923 	///../ucode/register.h:6194
+#define P_VPP2_BLEND_ONECOLOR_CTRL 		VCBUS_REG_ADDR(VPP2_BLEND_ONECOLOR_CTRL)
+#define VPP2_PREBLEND_CURRENT_XY 0x1924 	///../ucode/register.h:6198
+#define P_VPP2_PREBLEND_CURRENT_XY 		VCBUS_REG_ADDR(VPP2_PREBLEND_CURRENT_XY)
+#define VPP2_POSTBLEND_CURRENT_XY 0x1925 	///../ucode/register.h:6202
+#define P_VPP2_POSTBLEND_CURRENT_XY 		VCBUS_REG_ADDR(VPP2_POSTBLEND_CURRENT_XY)
+#define VPP2_MISC 0x1926 	///../ucode/register.h:6227
+#define P_VPP2_MISC 		VCBUS_REG_ADDR(VPP2_MISC)
+#define VPP2_OFIFO_SIZE 0x1927 	///../ucode/register.h:6236
+#define P_VPP2_OFIFO_SIZE 		VCBUS_REG_ADDR(VPP2_OFIFO_SIZE)
+#define VPP2_FIFO_STATUS 0x1928 	///../ucode/register.h:6241
+#define P_VPP2_FIFO_STATUS 		VCBUS_REG_ADDR(VPP2_FIFO_STATUS)
+#define VPP2_SMOKE_CTRL 0x1929 	///../ucode/register.h:6246
+#define P_VPP2_SMOKE_CTRL 		VCBUS_REG_ADDR(VPP2_SMOKE_CTRL)
+#define VPP2_SMOKE1_VAL 0x192a 	///../ucode/register.h:6254
+#define P_VPP2_SMOKE1_VAL 		VCBUS_REG_ADDR(VPP2_SMOKE1_VAL)
+#define VPP2_SMOKE2_VAL 0x192b 	///../ucode/register.h:6255
+#define P_VPP2_SMOKE2_VAL 		VCBUS_REG_ADDR(VPP2_SMOKE2_VAL)
+#define VPP2_SMOKE1_H_START_END 0x192d 	///../ucode/register.h:6258
+#define P_VPP2_SMOKE1_H_START_END 		VCBUS_REG_ADDR(VPP2_SMOKE1_H_START_END)
+#define VPP2_SMOKE1_V_START_END 0x192e 	///../ucode/register.h:6261
+#define P_VPP2_SMOKE1_V_START_END 		VCBUS_REG_ADDR(VPP2_SMOKE1_V_START_END)
+#define VPP2_SMOKE2_H_START_END 0x192f 	///../ucode/register.h:6264
+#define P_VPP2_SMOKE2_H_START_END 		VCBUS_REG_ADDR(VPP2_SMOKE2_H_START_END)
+#define VPP2_SMOKE2_V_START_END 0x1930 	///../ucode/register.h:6267
+#define P_VPP2_SMOKE2_V_START_END 		VCBUS_REG_ADDR(VPP2_SMOKE2_V_START_END)
+#define VPP2_SCO_FIFO_CTRL 0x1933 	///../ucode/register.h:6270
+#define P_VPP2_SCO_FIFO_CTRL 		VCBUS_REG_ADDR(VPP2_SCO_FIFO_CTRL)
+#define VPP2_HSC_PHASE_CTRL1 0x1934 	///../ucode/register.h:6278
+#define P_VPP2_HSC_PHASE_CTRL1 		VCBUS_REG_ADDR(VPP2_HSC_PHASE_CTRL1)
+#define VPP2_HSC_INI_PAT_CTRL 0x1935 	///../ucode/register.h:6286
+#define P_VPP2_HSC_INI_PAT_CTRL 		VCBUS_REG_ADDR(VPP2_HSC_INI_PAT_CTRL)
+#define VPP2_VADJ_CTRL 0x1940 	///../ucode/register.h:6291
+#define P_VPP2_VADJ_CTRL 		VCBUS_REG_ADDR(VPP2_VADJ_CTRL)
+#define VPP2_VADJ1_Y 0x1941 	///../ucode/register.h:6294
+#define P_VPP2_VADJ1_Y 		VCBUS_REG_ADDR(VPP2_VADJ1_Y)
+#define VPP2_VADJ1_MA_MB 0x1942 	///../ucode/register.h:6298
+#define P_VPP2_VADJ1_MA_MB 		VCBUS_REG_ADDR(VPP2_VADJ1_MA_MB)
+#define VPP2_VADJ1_MC_MD 0x1943 	///../ucode/register.h:6299
+#define P_VPP2_VADJ1_MC_MD 		VCBUS_REG_ADDR(VPP2_VADJ1_MC_MD)
+#define VPP2_VADJ2_Y 0x1944 	///../ucode/register.h:6302
+#define P_VPP2_VADJ2_Y 		VCBUS_REG_ADDR(VPP2_VADJ2_Y)
+#define VPP2_VADJ2_MA_MB 0x1945 	///../ucode/register.h:6306
+#define P_VPP2_VADJ2_MA_MB 		VCBUS_REG_ADDR(VPP2_VADJ2_MA_MB)
+#define VPP2_VADJ2_MC_MD 0x1946 	///../ucode/register.h:6307
+#define P_VPP2_VADJ2_MC_MD 		VCBUS_REG_ADDR(VPP2_VADJ2_MC_MD)
+#define VPP2_MATRIX_PROBE_COLOR 0x195c 	///../ucode/register.h:6313
+#define P_VPP2_MATRIX_PROBE_COLOR 		VCBUS_REG_ADDR(VPP2_MATRIX_PROBE_COLOR)
+#define VPP2_MATRIX_HL_COLOR 0x195d 	///../ucode/register.h:6317
+#define P_VPP2_MATRIX_HL_COLOR 		VCBUS_REG_ADDR(VPP2_MATRIX_HL_COLOR)
+#define VPP2_MATRIX_PROBE_POS 0x195e 	///../ucode/register.h:6320
+#define P_VPP2_MATRIX_PROBE_POS 		VCBUS_REG_ADDR(VPP2_MATRIX_PROBE_POS)
+#define VPP2_MATRIX_CTRL 0x195f 	///../ucode/register.h:6330
+#define P_VPP2_MATRIX_CTRL 		VCBUS_REG_ADDR(VPP2_MATRIX_CTRL)
+#define VPP2_MATRIX_COEF00_01 0x1960 	///../ucode/register.h:6333
+#define P_VPP2_MATRIX_COEF00_01 		VCBUS_REG_ADDR(VPP2_MATRIX_COEF00_01)
+#define VPP2_MATRIX_COEF02_10 0x1961 	///../ucode/register.h:6336
+#define P_VPP2_MATRIX_COEF02_10 		VCBUS_REG_ADDR(VPP2_MATRIX_COEF02_10)
+#define VPP2_MATRIX_COEF11_12 0x1962 	///../ucode/register.h:6339
+#define P_VPP2_MATRIX_COEF11_12 		VCBUS_REG_ADDR(VPP2_MATRIX_COEF11_12)
+#define VPP2_MATRIX_COEF20_21 0x1963 	///../ucode/register.h:6342
+#define P_VPP2_MATRIX_COEF20_21 		VCBUS_REG_ADDR(VPP2_MATRIX_COEF20_21)
+#define VPP2_MATRIX_COEF22 0x1964 	///../ucode/register.h:6343
+#define P_VPP2_MATRIX_COEF22 		VCBUS_REG_ADDR(VPP2_MATRIX_COEF22)
+#define VPP2_MATRIX_OFFSET0_1 0x1965 	///../ucode/register.h:6346
+#define P_VPP2_MATRIX_OFFSET0_1 		VCBUS_REG_ADDR(VPP2_MATRIX_OFFSET0_1)
+#define VPP2_MATRIX_OFFSET2 0x1966 	///../ucode/register.h:6348
+#define P_VPP2_MATRIX_OFFSET2 		VCBUS_REG_ADDR(VPP2_MATRIX_OFFSET2)
+#define VPP2_MATRIX_PRE_OFFSET0_1 0x1967 	///../ucode/register.h:6351
+#define P_VPP2_MATRIX_PRE_OFFSET0_1 		VCBUS_REG_ADDR(VPP2_MATRIX_PRE_OFFSET0_1)
+#define VPP2_MATRIX_PRE_OFFSET2 0x1968 	///../ucode/register.h:6353
+#define P_VPP2_MATRIX_PRE_OFFSET2 		VCBUS_REG_ADDR(VPP2_MATRIX_PRE_OFFSET2)
+#define VPP2_DUMMY_DATA1 0x1969 	///../ucode/register.h:6358
+#define P_VPP2_DUMMY_DATA1 		VCBUS_REG_ADDR(VPP2_DUMMY_DATA1)
+#define VPP2_GAINOFF_CTRL0 0x196a 	///../ucode/register.h:6362
+#define P_VPP2_GAINOFF_CTRL0 		VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL0)
+#define VPP2_GAINOFF_CTRL1 0x196b 	///../ucode/register.h:6365
+#define P_VPP2_GAINOFF_CTRL1 		VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL1)
+#define VPP2_GAINOFF_CTRL2 0x196c 	///../ucode/register.h:6368
+#define P_VPP2_GAINOFF_CTRL2 		VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL2)
+#define VPP2_GAINOFF_CTRL3 0x196d 	///../ucode/register.h:6371
+#define P_VPP2_GAINOFF_CTRL3 		VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL3)
+#define VPP2_GAINOFF_CTRL4 0x196e 	///../ucode/register.h:6373
+#define P_VPP2_GAINOFF_CTRL4 		VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL4)
+#define VPP2_CHROMA_ADDR_PORT 0x1970 	///../ucode/register.h:6375
+#define P_VPP2_CHROMA_ADDR_PORT 		VCBUS_REG_ADDR(VPP2_CHROMA_ADDR_PORT)
+#define VPP2_CHROMA_DATA_PORT 0x1971 	///../ucode/register.h:6376
+#define P_VPP2_CHROMA_DATA_PORT 		VCBUS_REG_ADDR(VPP2_CHROMA_DATA_PORT)
+#define VPP2_GCLK_CTRL0 0x1972 	///../ucode/register.h:6383
+#define P_VPP2_GCLK_CTRL0 		VCBUS_REG_ADDR(VPP2_GCLK_CTRL0)
+#define VPP2_GCLK_CTRL1 0x1973 	///../ucode/register.h:6386
+#define P_VPP2_GCLK_CTRL1 		VCBUS_REG_ADDR(VPP2_GCLK_CTRL1)
+#define VPP2_SC_GCLK_CTRL 0x1974 	///../ucode/register.h:6389
+#define P_VPP2_SC_GCLK_CTRL 		VCBUS_REG_ADDR(VPP2_SC_GCLK_CTRL)
+#define VPP2_MISC1 0x1976 	///../ucode/register.h:6392
+#define P_VPP2_MISC1 		VCBUS_REG_ADDR(VPP2_MISC1)
+#define VPP2_DNLP_CTRL_00 0x1981 	///../ucode/register.h:6397
+#define P_VPP2_DNLP_CTRL_00 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_00)
+#define VPP2_DNLP_CTRL_01 0x1982 	///../ucode/register.h:6402
+#define P_VPP2_DNLP_CTRL_01 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_01)
+#define VPP2_DNLP_CTRL_02 0x1983 	///../ucode/register.h:6407
+#define P_VPP2_DNLP_CTRL_02 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_02)
+#define VPP2_DNLP_CTRL_03 0x1984 	///../ucode/register.h:6412
+#define P_VPP2_DNLP_CTRL_03 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_03)
+#define VPP2_DNLP_CTRL_04 0x1985 	///../ucode/register.h:6417
+#define P_VPP2_DNLP_CTRL_04 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_04)
+#define VPP2_DNLP_CTRL_05 0x1986 	///../ucode/register.h:6422
+#define P_VPP2_DNLP_CTRL_05 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_05)
+#define VPP2_DNLP_CTRL_06 0x1987 	///../ucode/register.h:6427
+#define P_VPP2_DNLP_CTRL_06 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_06)
+#define VPP2_DNLP_CTRL_07 0x1988 	///../ucode/register.h:6432
+#define P_VPP2_DNLP_CTRL_07 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_07)
+#define VPP2_DNLP_CTRL_08 0x1989 	///../ucode/register.h:6437
+#define P_VPP2_DNLP_CTRL_08 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_08)
+#define VPP2_DNLP_CTRL_09 0x198a 	///../ucode/register.h:6442
+#define P_VPP2_DNLP_CTRL_09 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_09)
+#define VPP2_DNLP_CTRL_10 0x198b 	///../ucode/register.h:6447
+#define P_VPP2_DNLP_CTRL_10 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_10)
+#define VPP2_DNLP_CTRL_11 0x198c 	///../ucode/register.h:6452
+#define P_VPP2_DNLP_CTRL_11 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_11)
+#define VPP2_DNLP_CTRL_12 0x198d 	///../ucode/register.h:6457
+#define P_VPP2_DNLP_CTRL_12 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_12)
+#define VPP2_DNLP_CTRL_13 0x198e 	///../ucode/register.h:6462
+#define P_VPP2_DNLP_CTRL_13 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_13)
+#define VPP2_DNLP_CTRL_14 0x198f 	///../ucode/register.h:6467
+#define P_VPP2_DNLP_CTRL_14 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_14)
+#define VPP2_DNLP_CTRL_15 0x1990 	///../ucode/register.h:6472
+#define P_VPP2_DNLP_CTRL_15 		VCBUS_REG_ADDR(VPP2_DNLP_CTRL_15)
+#define VPP2_VE_ENABLE_CTRL 0x19a1 	///../ucode/register.h:6484
+#define P_VPP2_VE_ENABLE_CTRL 		VCBUS_REG_ADDR(VPP2_VE_ENABLE_CTRL)
+#define VPP2_VE_DEMO_LEFT_TOP_SCREEN_WIDTH 0x19a2 	///../ucode/register.h:6486
+#define P_VPP2_VE_DEMO_LEFT_TOP_SCREEN_WIDTH 		VCBUS_REG_ADDR(VPP2_VE_DEMO_LEFT_TOP_SCREEN_WIDTH)
+#define VPP2_VE_DEMO_CENTER_BAR 0x19a3 	///../ucode/register.h:6492
+#define P_VPP2_VE_DEMO_CENTER_BAR 		VCBUS_REG_ADDR(VPP2_VE_DEMO_CENTER_BAR)
+#define VPP2_VE_H_V_SIZE 0x19a4 	///../ucode/register.h:6495
+#define P_VPP2_VE_H_V_SIZE 		VCBUS_REG_ADDR(VPP2_VE_H_V_SIZE)
+#define VPP2_VDO_MEAS_CTRL 0x19a8 	///../ucode/register.h:6500
+#define P_VPP2_VDO_MEAS_CTRL 		VCBUS_REG_ADDR(VPP2_VDO_MEAS_CTRL)
+#define VPP2_VDO_MEAS_VS_COUNT_HI 0x19a9 	///../ucode/register.h:6504
+#define P_VPP2_VDO_MEAS_VS_COUNT_HI 		VCBUS_REG_ADDR(VPP2_VDO_MEAS_VS_COUNT_HI)
+#define VPP2_VDO_MEAS_VS_COUNT_LO 0x19aa 	///../ucode/register.h:6507
+#define P_VPP2_VDO_MEAS_VS_COUNT_LO 		VCBUS_REG_ADDR(VPP2_VDO_MEAS_VS_COUNT_LO)
+#define VPP2_OSD_VSC_PHASE_STEP 0x19c0 	///../ucode/register.h:6510
+#define P_VPP2_OSD_VSC_PHASE_STEP 		VCBUS_REG_ADDR(VPP2_OSD_VSC_PHASE_STEP)
+#define VPP2_OSD_VSC_INI_PHASE 0x19c1 	///../ucode/register.h:6513
+#define P_VPP2_OSD_VSC_INI_PHASE 		VCBUS_REG_ADDR(VPP2_OSD_VSC_INI_PHASE)
+#define VPP2_OSD_VSC_CTRL0 0x19c2 	///../ucode/register.h:6524
+#define P_VPP2_OSD_VSC_CTRL0 		VCBUS_REG_ADDR(VPP2_OSD_VSC_CTRL0)
+#define VPP2_OSD_HSC_PHASE_STEP 0x19c3 	///../ucode/register.h:6527
+#define P_VPP2_OSD_HSC_PHASE_STEP 		VCBUS_REG_ADDR(VPP2_OSD_HSC_PHASE_STEP)
+#define VPP2_OSD_HSC_INI_PHASE 0x19c4 	///../ucode/register.h:6530
+#define P_VPP2_OSD_HSC_INI_PHASE 		VCBUS_REG_ADDR(VPP2_OSD_HSC_INI_PHASE)
+#define VPP2_OSD_HSC_CTRL0 0x19c5 	///../ucode/register.h:6540
+#define P_VPP2_OSD_HSC_CTRL0 		VCBUS_REG_ADDR(VPP2_OSD_HSC_CTRL0)
+#define VPP2_OSD_HSC_INI_PAT_CTRL 0x19c6 	///../ucode/register.h:6545
+#define P_VPP2_OSD_HSC_INI_PAT_CTRL 		VCBUS_REG_ADDR(VPP2_OSD_HSC_INI_PAT_CTRL)
+#define VPP2_OSD_SC_DUMMY_DATA 0x19c7 	///../ucode/register.h:6550
+#define P_VPP2_OSD_SC_DUMMY_DATA 		VCBUS_REG_ADDR(VPP2_OSD_SC_DUMMY_DATA)
+#define VPP2_OSD_SC_CTRL0 0x19c8 	///../ucode/register.h:6558
+#define P_VPP2_OSD_SC_CTRL0 		VCBUS_REG_ADDR(VPP2_OSD_SC_CTRL0)
+#define VPP2_OSD_SCI_WH_M1 0x19c9 	///../ucode/register.h:6561
+#define P_VPP2_OSD_SCI_WH_M1 		VCBUS_REG_ADDR(VPP2_OSD_SCI_WH_M1)
+#define VPP2_OSD_SCO_H_START_END 0x19ca 	///../ucode/register.h:6564
+#define P_VPP2_OSD_SCO_H_START_END 		VCBUS_REG_ADDR(VPP2_OSD_SCO_H_START_END)
+#define VPP2_OSD_SCO_V_START_END 0x19cb 	///../ucode/register.h:6567
+#define P_VPP2_OSD_SCO_V_START_END 		VCBUS_REG_ADDR(VPP2_OSD_SCO_V_START_END)
+#define VPP2_OSD_SCALE_COEF_IDX 0x19cc 	///../ucode/register.h:6577
+#define P_VPP2_OSD_SCALE_COEF_IDX 		VCBUS_REG_ADDR(VPP2_OSD_SCALE_COEF_IDX)
+#define VPP2_OSD_SCALE_COEF 0x19cd 	///../ucode/register.h:6579
+#define P_VPP2_OSD_SCALE_COEF 		VCBUS_REG_ADDR(VPP2_OSD_SCALE_COEF)
+#define VPP2_INT_LINE_NUM 0x19ce 	///../ucode/register.h:6581
+#define P_VPP2_INT_LINE_NUM 		VCBUS_REG_ADDR(VPP2_INT_LINE_NUM)
+#define VIU_ADDR_START 0x1a00 	///../ucode/register.h:6596
+#define P_VIU_ADDR_START 		VCBUS_REG_ADDR(VIU_ADDR_START)
+#define VIU_ADDR_END 0x1aff 	///../ucode/register.h:6597
+#define P_VIU_ADDR_END 		VCBUS_REG_ADDR(VIU_ADDR_END)
+#define VIU_SW_RESET 0x1a01 	///../ucode/register.h:6631
+#define P_VIU_SW_RESET 		VCBUS_REG_ADDR(VIU_SW_RESET)
+#define VIU_MISC_CTRL0 0x1a06 	///../ucode/register.h:6633
+#define P_VIU_MISC_CTRL0 		VCBUS_REG_ADDR(VIU_MISC_CTRL0)
+#define D2D3_INTF_LENGTH 0x1a08 	///../ucode/register.h:6634
+#define P_D2D3_INTF_LENGTH 		VCBUS_REG_ADDR(D2D3_INTF_LENGTH)
+#define D2D3_INTF_CTRL0 0x1a09 	///../ucode/register.h:6652
+#define P_D2D3_INTF_CTRL0 		VCBUS_REG_ADDR(D2D3_INTF_CTRL0)
+#define VIU_OSD1_CTRL_STAT 0x1a10 	///../ucode/register.h:6672
+#define P_VIU_OSD1_CTRL_STAT 		VCBUS_REG_ADDR(VIU_OSD1_CTRL_STAT)
+#define VIU_OSD1_CTRL_STAT2 0x1a2d 	///../ucode/register.h:6681
+#define P_VIU_OSD1_CTRL_STAT2 		VCBUS_REG_ADDR(VIU_OSD1_CTRL_STAT2)
+#define VIU_OSD1_COLOR_ADDR 0x1a11 	///../ucode/register.h:6685
+#define P_VIU_OSD1_COLOR_ADDR 		VCBUS_REG_ADDR(VIU_OSD1_COLOR_ADDR)
+#define VIU_OSD1_COLOR 0x1a12 	///../ucode/register.h:6690
+#define P_VIU_OSD1_COLOR 		VCBUS_REG_ADDR(VIU_OSD1_COLOR)
+#define VIU_OSD1_TCOLOR_AG0 0x1a17 	///../ucode/register.h:6695
+#define P_VIU_OSD1_TCOLOR_AG0 		VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG0)
+#define VIU_OSD1_TCOLOR_AG1 0x1a18 	///../ucode/register.h:6696
+#define P_VIU_OSD1_TCOLOR_AG1 		VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG1)
+#define VIU_OSD1_TCOLOR_AG2 0x1a19 	///../ucode/register.h:6697
+#define P_VIU_OSD1_TCOLOR_AG2 		VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG2)
+#define VIU_OSD1_TCOLOR_AG3 0x1a1a 	///../ucode/register.h:6698
+#define P_VIU_OSD1_TCOLOR_AG3 		VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG3)
+#define VIU_OSD1_BLK0_CFG_W0 0x1a1b 	///../ucode/register.h:6715
+#define P_VIU_OSD1_BLK0_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W0)
+#define VIU_OSD1_BLK1_CFG_W0 0x1a1f 	///../ucode/register.h:6716
+#define P_VIU_OSD1_BLK1_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W0)
+#define VIU_OSD1_BLK2_CFG_W0 0x1a23 	///../ucode/register.h:6717
+#define P_VIU_OSD1_BLK2_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W0)
+#define VIU_OSD1_BLK3_CFG_W0 0x1a27 	///../ucode/register.h:6718
+#define P_VIU_OSD1_BLK3_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W0)
+#define VIU_OSD1_BLK0_CFG_W1 0x1a1c 	///../ucode/register.h:6723
+#define P_VIU_OSD1_BLK0_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W1)
+#define VIU_OSD1_BLK1_CFG_W1 0x1a20 	///../ucode/register.h:6724
+#define P_VIU_OSD1_BLK1_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W1)
+#define VIU_OSD1_BLK2_CFG_W1 0x1a24 	///../ucode/register.h:6725
+#define P_VIU_OSD1_BLK2_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W1)
+#define VIU_OSD1_BLK3_CFG_W1 0x1a28 	///../ucode/register.h:6726
+#define P_VIU_OSD1_BLK3_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W1)
+#define VIU_OSD1_BLK0_CFG_W2 0x1a1d 	///../ucode/register.h:6731
+#define P_VIU_OSD1_BLK0_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W2)
+#define VIU_OSD1_BLK1_CFG_W2 0x1a21 	///../ucode/register.h:6732
+#define P_VIU_OSD1_BLK1_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W2)
+#define VIU_OSD1_BLK2_CFG_W2 0x1a25 	///../ucode/register.h:6733
+#define P_VIU_OSD1_BLK2_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W2)
+#define VIU_OSD1_BLK3_CFG_W2 0x1a29 	///../ucode/register.h:6734
+#define P_VIU_OSD1_BLK3_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W2)
+#define VIU_OSD1_BLK0_CFG_W3 0x1a1e 	///../ucode/register.h:6739
+#define P_VIU_OSD1_BLK0_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W3)
+#define VIU_OSD1_BLK1_CFG_W3 0x1a22 	///../ucode/register.h:6740
+#define P_VIU_OSD1_BLK1_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W3)
+#define VIU_OSD1_BLK2_CFG_W3 0x1a26 	///../ucode/register.h:6741
+#define P_VIU_OSD1_BLK2_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W3)
+#define VIU_OSD1_BLK3_CFG_W3 0x1a2a 	///../ucode/register.h:6742
+#define P_VIU_OSD1_BLK3_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W3)
+#define VIU_OSD1_BLK0_CFG_W4 0x1a13 	///../ucode/register.h:6747
+#define P_VIU_OSD1_BLK0_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W4)
+#define VIU_OSD1_BLK1_CFG_W4 0x1a14 	///../ucode/register.h:6748
+#define P_VIU_OSD1_BLK1_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W4)
+#define VIU_OSD1_BLK2_CFG_W4 0x1a15 	///../ucode/register.h:6749
+#define P_VIU_OSD1_BLK2_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W4)
+#define VIU_OSD1_BLK3_CFG_W4 0x1a16 	///../ucode/register.h:6750
+#define P_VIU_OSD1_BLK3_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W4)
+#define VIU_OSD1_FIFO_CTRL_STAT 0x1a2b 	///../ucode/register.h:6766
+#define P_VIU_OSD1_FIFO_CTRL_STAT 		VCBUS_REG_ADDR(VIU_OSD1_FIFO_CTRL_STAT)
+#define VIU_OSD1_TEST_RDDATA 0x1a2c 	///../ucode/register.h:6771
+#define P_VIU_OSD1_TEST_RDDATA 		VCBUS_REG_ADDR(VIU_OSD1_TEST_RDDATA)
+#define VIU_OSD1_PROT_CTRL 0x1a2e 	///../ucode/register.h:6774
+#define P_VIU_OSD1_PROT_CTRL 		VCBUS_REG_ADDR(VIU_OSD1_PROT_CTRL)
+#define VIU_OSD2_CTRL_STAT 0x1a30 	///../ucode/register.h:6795
+#define P_VIU_OSD2_CTRL_STAT 		VCBUS_REG_ADDR(VIU_OSD2_CTRL_STAT)
+#define VIU_OSD2_CTRL_STAT2 0x1a4d 	///../ucode/register.h:6804
+#define P_VIU_OSD2_CTRL_STAT2 		VCBUS_REG_ADDR(VIU_OSD2_CTRL_STAT2)
+#define VIU_OSD2_COLOR_ADDR 0x1a31 	///../ucode/register.h:6808
+#define P_VIU_OSD2_COLOR_ADDR 		VCBUS_REG_ADDR(VIU_OSD2_COLOR_ADDR)
+#define VIU_OSD2_COLOR 0x1a32 	///../ucode/register.h:6813
+#define P_VIU_OSD2_COLOR 		VCBUS_REG_ADDR(VIU_OSD2_COLOR)
+#define VIU_OSD2_HL1_H_START_END 0x1a33 	///../ucode/register.h:6818
+#define P_VIU_OSD2_HL1_H_START_END 		VCBUS_REG_ADDR(VIU_OSD2_HL1_H_START_END)
+#define VIU_OSD2_HL1_V_START_END 0x1a34 	///../ucode/register.h:6819
+#define P_VIU_OSD2_HL1_V_START_END 		VCBUS_REG_ADDR(VIU_OSD2_HL1_V_START_END)
+#define VIU_OSD2_HL2_H_START_END 0x1a35 	///../ucode/register.h:6820
+#define P_VIU_OSD2_HL2_H_START_END 		VCBUS_REG_ADDR(VIU_OSD2_HL2_H_START_END)
+#define VIU_OSD2_HL2_V_START_END 0x1a36 	///../ucode/register.h:6821
+#define P_VIU_OSD2_HL2_V_START_END 		VCBUS_REG_ADDR(VIU_OSD2_HL2_V_START_END)
+#define VIU_OSD2_TCOLOR_AG0 0x1a37 	///../ucode/register.h:6826
+#define P_VIU_OSD2_TCOLOR_AG0 		VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG0)
+#define VIU_OSD2_TCOLOR_AG1 0x1a38 	///../ucode/register.h:6827
+#define P_VIU_OSD2_TCOLOR_AG1 		VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG1)
+#define VIU_OSD2_TCOLOR_AG2 0x1a39 	///../ucode/register.h:6828
+#define P_VIU_OSD2_TCOLOR_AG2 		VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG2)
+#define VIU_OSD2_TCOLOR_AG3 0x1a3a 	///../ucode/register.h:6829
+#define P_VIU_OSD2_TCOLOR_AG3 		VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG3)
+#define VIU_OSD2_BLK0_CFG_W0 0x1a3b 	///../ucode/register.h:6843
+#define P_VIU_OSD2_BLK0_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W0)
+#define VIU_OSD2_BLK1_CFG_W0 0x1a3f 	///../ucode/register.h:6844
+#define P_VIU_OSD2_BLK1_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W0)
+#define VIU_OSD2_BLK2_CFG_W0 0x1a43 	///../ucode/register.h:6845
+#define P_VIU_OSD2_BLK2_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W0)
+#define VIU_OSD2_BLK3_CFG_W0 0x1a47 	///../ucode/register.h:6846
+#define P_VIU_OSD2_BLK3_CFG_W0 		VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W0)
+#define VIU_OSD2_BLK0_CFG_W1 0x1a3c 	///../ucode/register.h:6851
+#define P_VIU_OSD2_BLK0_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W1)
+#define VIU_OSD2_BLK1_CFG_W1 0x1a40 	///../ucode/register.h:6852
+#define P_VIU_OSD2_BLK1_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W1)
+#define VIU_OSD2_BLK2_CFG_W1 0x1a44 	///../ucode/register.h:6853
+#define P_VIU_OSD2_BLK2_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W1)
+#define VIU_OSD2_BLK3_CFG_W1 0x1a48 	///../ucode/register.h:6854
+#define P_VIU_OSD2_BLK3_CFG_W1 		VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W1)
+#define VIU_OSD2_BLK0_CFG_W2 0x1a3d 	///../ucode/register.h:6859
+#define P_VIU_OSD2_BLK0_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W2)
+#define VIU_OSD2_BLK1_CFG_W2 0x1a41 	///../ucode/register.h:6860
+#define P_VIU_OSD2_BLK1_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W2)
+#define VIU_OSD2_BLK2_CFG_W2 0x1a45 	///../ucode/register.h:6861
+#define P_VIU_OSD2_BLK2_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W2)
+#define VIU_OSD2_BLK3_CFG_W2 0x1a49 	///../ucode/register.h:6862
+#define P_VIU_OSD2_BLK3_CFG_W2 		VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W2)
+#define VIU_OSD2_BLK0_CFG_W3 0x1a3e 	///../ucode/register.h:6867
+#define P_VIU_OSD2_BLK0_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W3)
+#define VIU_OSD2_BLK1_CFG_W3 0x1a42 	///../ucode/register.h:6868
+#define P_VIU_OSD2_BLK1_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W3)
+#define VIU_OSD2_BLK2_CFG_W3 0x1a46 	///../ucode/register.h:6869
+#define P_VIU_OSD2_BLK2_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W3)
+#define VIU_OSD2_BLK3_CFG_W3 0x1a4a 	///../ucode/register.h:6870
+#define P_VIU_OSD2_BLK3_CFG_W3 		VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W3)
+#define VIU_OSD2_BLK0_CFG_W4 0x1a64 	///../ucode/register.h:6875
+#define P_VIU_OSD2_BLK0_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W4)
+#define VIU_OSD2_BLK1_CFG_W4 0x1a65 	///../ucode/register.h:6876
+#define P_VIU_OSD2_BLK1_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W4)
+#define VIU_OSD2_BLK2_CFG_W4 0x1a66 	///../ucode/register.h:6877
+#define P_VIU_OSD2_BLK2_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W4)
+#define VIU_OSD2_BLK3_CFG_W4 0x1a67 	///../ucode/register.h:6878
+#define P_VIU_OSD2_BLK3_CFG_W4 		VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W4)
+#define VIU_OSD2_FIFO_CTRL_STAT 0x1a4b 	///../ucode/register.h:6894
+#define P_VIU_OSD2_FIFO_CTRL_STAT 		VCBUS_REG_ADDR(VIU_OSD2_FIFO_CTRL_STAT)
+#define VIU_OSD2_TEST_RDDATA 0x1a4c 	///../ucode/register.h:6899
+#define P_VIU_OSD2_TEST_RDDATA 		VCBUS_REG_ADDR(VIU_OSD2_TEST_RDDATA)
+#define VIU_OSD2_PROT_CTRL 0x1a4e 	///../ucode/register.h:6902
+#define P_VIU_OSD2_PROT_CTRL 		VCBUS_REG_ADDR(VIU_OSD2_PROT_CTRL)
+#define VD1_IF0_GEN_REG 0x1a50 	///../ucode/register.h:6906
+#define P_VD1_IF0_GEN_REG 		VCBUS_REG_ADDR(VD1_IF0_GEN_REG)
+#define VD1_IF0_CANVAS0 0x1a51 	///../ucode/register.h:6907
+#define P_VD1_IF0_CANVAS0 		VCBUS_REG_ADDR(VD1_IF0_CANVAS0)
+#define VD1_IF0_CANVAS1 0x1a52 	///../ucode/register.h:6908
+#define P_VD1_IF0_CANVAS1 		VCBUS_REG_ADDR(VD1_IF0_CANVAS1)
+#define VD1_IF0_LUMA_X0 0x1a53 	///../ucode/register.h:6909
+#define P_VD1_IF0_LUMA_X0 		VCBUS_REG_ADDR(VD1_IF0_LUMA_X0)
+#define VD1_IF0_LUMA_Y0 0x1a54 	///../ucode/register.h:6910
+#define P_VD1_IF0_LUMA_Y0 		VCBUS_REG_ADDR(VD1_IF0_LUMA_Y0)
+#define VD1_IF0_CHROMA_X0 0x1a55 	///../ucode/register.h:6911
+#define P_VD1_IF0_CHROMA_X0 		VCBUS_REG_ADDR(VD1_IF0_CHROMA_X0)
+#define VD1_IF0_CHROMA_Y0 0x1a56 	///../ucode/register.h:6912
+#define P_VD1_IF0_CHROMA_Y0 		VCBUS_REG_ADDR(VD1_IF0_CHROMA_Y0)
+#define VD1_IF0_LUMA_X1 0x1a57 	///../ucode/register.h:6913
+#define P_VD1_IF0_LUMA_X1 		VCBUS_REG_ADDR(VD1_IF0_LUMA_X1)
+#define VD1_IF0_LUMA_Y1 0x1a58 	///../ucode/register.h:6914
+#define P_VD1_IF0_LUMA_Y1 		VCBUS_REG_ADDR(VD1_IF0_LUMA_Y1)
+#define VD1_IF0_CHROMA_X1 0x1a59 	///../ucode/register.h:6915
+#define P_VD1_IF0_CHROMA_X1 		VCBUS_REG_ADDR(VD1_IF0_CHROMA_X1)
+#define VD1_IF0_CHROMA_Y1 0x1a5a 	///../ucode/register.h:6916
+#define P_VD1_IF0_CHROMA_Y1 		VCBUS_REG_ADDR(VD1_IF0_CHROMA_Y1)
+#define VD1_IF0_RPT_LOOP 0x1a5b 	///../ucode/register.h:6917
+#define P_VD1_IF0_RPT_LOOP 		VCBUS_REG_ADDR(VD1_IF0_RPT_LOOP)
+#define VD1_IF0_LUMA0_RPT_PAT 0x1a5c 	///../ucode/register.h:6918
+#define P_VD1_IF0_LUMA0_RPT_PAT 		VCBUS_REG_ADDR(VD1_IF0_LUMA0_RPT_PAT)
+#define VD1_IF0_CHROMA0_RPT_PAT 0x1a5d 	///../ucode/register.h:6919
+#define P_VD1_IF0_CHROMA0_RPT_PAT 		VCBUS_REG_ADDR(VD1_IF0_CHROMA0_RPT_PAT)
+#define VD1_IF0_LUMA1_RPT_PAT 0x1a5e 	///../ucode/register.h:6920
+#define P_VD1_IF0_LUMA1_RPT_PAT 		VCBUS_REG_ADDR(VD1_IF0_LUMA1_RPT_PAT)
+#define VD1_IF0_CHROMA1_RPT_PAT 0x1a5f 	///../ucode/register.h:6921
+#define P_VD1_IF0_CHROMA1_RPT_PAT 		VCBUS_REG_ADDR(VD1_IF0_CHROMA1_RPT_PAT)
+#define VD1_IF0_LUMA_PSEL 0x1a60 	///../ucode/register.h:6922
+#define P_VD1_IF0_LUMA_PSEL 		VCBUS_REG_ADDR(VD1_IF0_LUMA_PSEL)
+#define VD1_IF0_CHROMA_PSEL 0x1a61 	///../ucode/register.h:6923
+#define P_VD1_IF0_CHROMA_PSEL 		VCBUS_REG_ADDR(VD1_IF0_CHROMA_PSEL)
+#define VD1_IF0_DUMMY_PIXEL 0x1a62 	///../ucode/register.h:6924
+#define P_VD1_IF0_DUMMY_PIXEL 		VCBUS_REG_ADDR(VD1_IF0_DUMMY_PIXEL)
+#define VD1_IF0_LUMA_FIFO_SIZE 0x1a63 	///../ucode/register.h:6925
+#define P_VD1_IF0_LUMA_FIFO_SIZE 		VCBUS_REG_ADDR(VD1_IF0_LUMA_FIFO_SIZE)
+#define VD1_IF0_RANGE_MAP_Y 0x1a6a 	///../ucode/register.h:6926
+#define P_VD1_IF0_RANGE_MAP_Y 		VCBUS_REG_ADDR(VD1_IF0_RANGE_MAP_Y)
+#define VD1_IF0_RANGE_MAP_CB 0x1a6b 	///../ucode/register.h:6927
+#define P_VD1_IF0_RANGE_MAP_CB 		VCBUS_REG_ADDR(VD1_IF0_RANGE_MAP_CB)
+#define VD1_IF0_RANGE_MAP_CR 0x1a6c 	///../ucode/register.h:6928
+#define P_VD1_IF0_RANGE_MAP_CR 		VCBUS_REG_ADDR(VD1_IF0_RANGE_MAP_CR)
+#define VD1_IF0_GEN_REG2 0x1a6d 	///../ucode/register.h:6929
+#define P_VD1_IF0_GEN_REG2 		VCBUS_REG_ADDR(VD1_IF0_GEN_REG2)
+#define VD1_IF0_PROT_CNTL 0x1a6e 	///../ucode/register.h:6930
+#define P_VD1_IF0_PROT_CNTL 		VCBUS_REG_ADDR(VD1_IF0_PROT_CNTL)
+#define VIU_VD1_FMT_CTRL 0x1a68 	///../ucode/register.h:6947
+#define P_VIU_VD1_FMT_CTRL 		VCBUS_REG_ADDR(VIU_VD1_FMT_CTRL)
+#define VIU_VD1_FMT_W 0x1a69 	///../ucode/register.h:6950
+#define P_VIU_VD1_FMT_W 		VCBUS_REG_ADDR(VIU_VD1_FMT_W)
+#define VD2_IF0_GEN_REG 0x1a70 	///../ucode/register.h:6954
+#define P_VD2_IF0_GEN_REG 		VCBUS_REG_ADDR(VD2_IF0_GEN_REG)
+#define VD2_IF0_CANVAS0 0x1a71 	///../ucode/register.h:6955
+#define P_VD2_IF0_CANVAS0 		VCBUS_REG_ADDR(VD2_IF0_CANVAS0)
+#define VD2_IF0_CANVAS1 0x1a72 	///../ucode/register.h:6956
+#define P_VD2_IF0_CANVAS1 		VCBUS_REG_ADDR(VD2_IF0_CANVAS1)
+#define VD2_IF0_LUMA_X0 0x1a73 	///../ucode/register.h:6957
+#define P_VD2_IF0_LUMA_X0 		VCBUS_REG_ADDR(VD2_IF0_LUMA_X0)
+#define VD2_IF0_LUMA_Y0 0x1a74 	///../ucode/register.h:6958
+#define P_VD2_IF0_LUMA_Y0 		VCBUS_REG_ADDR(VD2_IF0_LUMA_Y0)
+#define VD2_IF0_CHROMA_X0 0x1a75 	///../ucode/register.h:6959
+#define P_VD2_IF0_CHROMA_X0 		VCBUS_REG_ADDR(VD2_IF0_CHROMA_X0)
+#define VD2_IF0_CHROMA_Y0 0x1a76 	///../ucode/register.h:6960
+#define P_VD2_IF0_CHROMA_Y0 		VCBUS_REG_ADDR(VD2_IF0_CHROMA_Y0)
+#define VD2_IF0_LUMA_X1 0x1a77 	///../ucode/register.h:6961
+#define P_VD2_IF0_LUMA_X1 		VCBUS_REG_ADDR(VD2_IF0_LUMA_X1)
+#define VD2_IF0_LUMA_Y1 0x1a78 	///../ucode/register.h:6962
+#define P_VD2_IF0_LUMA_Y1 		VCBUS_REG_ADDR(VD2_IF0_LUMA_Y1)
+#define VD2_IF0_CHROMA_X1 0x1a79 	///../ucode/register.h:6963
+#define P_VD2_IF0_CHROMA_X1 		VCBUS_REG_ADDR(VD2_IF0_CHROMA_X1)
+#define VD2_IF0_CHROMA_Y1 0x1a7a 	///../ucode/register.h:6964
+#define P_VD2_IF0_CHROMA_Y1 		VCBUS_REG_ADDR(VD2_IF0_CHROMA_Y1)
+#define VD2_IF0_RPT_LOOP 0x1a7b 	///../ucode/register.h:6965
+#define P_VD2_IF0_RPT_LOOP 		VCBUS_REG_ADDR(VD2_IF0_RPT_LOOP)
+#define VD2_IF0_LUMA0_RPT_PAT 0x1a7c 	///../ucode/register.h:6966
+#define P_VD2_IF0_LUMA0_RPT_PAT 		VCBUS_REG_ADDR(VD2_IF0_LUMA0_RPT_PAT)
+#define VD2_IF0_CHROMA0_RPT_PAT 0x1a7d 	///../ucode/register.h:6967
+#define P_VD2_IF0_CHROMA0_RPT_PAT 		VCBUS_REG_ADDR(VD2_IF0_CHROMA0_RPT_PAT)
+#define VD2_IF0_LUMA1_RPT_PAT 0x1a7e 	///../ucode/register.h:6968
+#define P_VD2_IF0_LUMA1_RPT_PAT 		VCBUS_REG_ADDR(VD2_IF0_LUMA1_RPT_PAT)
+#define VD2_IF0_CHROMA1_RPT_PAT 0x1a7f 	///../ucode/register.h:6969
+#define P_VD2_IF0_CHROMA1_RPT_PAT 		VCBUS_REG_ADDR(VD2_IF0_CHROMA1_RPT_PAT)
+#define VD2_IF0_LUMA_PSEL 0x1a80 	///../ucode/register.h:6970
+#define P_VD2_IF0_LUMA_PSEL 		VCBUS_REG_ADDR(VD2_IF0_LUMA_PSEL)
+#define VD2_IF0_CHROMA_PSEL 0x1a81 	///../ucode/register.h:6971
+#define P_VD2_IF0_CHROMA_PSEL 		VCBUS_REG_ADDR(VD2_IF0_CHROMA_PSEL)
+#define VD2_IF0_DUMMY_PIXEL 0x1a82 	///../ucode/register.h:6972
+#define P_VD2_IF0_DUMMY_PIXEL 		VCBUS_REG_ADDR(VD2_IF0_DUMMY_PIXEL)
+#define VD2_IF0_LUMA_FIFO_SIZE 0x1a83 	///../ucode/register.h:6973
+#define P_VD2_IF0_LUMA_FIFO_SIZE 		VCBUS_REG_ADDR(VD2_IF0_LUMA_FIFO_SIZE)
+#define VD2_IF0_RANGE_MAP_Y 0x1a8a 	///../ucode/register.h:6974
+#define P_VD2_IF0_RANGE_MAP_Y 		VCBUS_REG_ADDR(VD2_IF0_RANGE_MAP_Y)
+#define VD2_IF0_RANGE_MAP_CB 0x1a8b 	///../ucode/register.h:6975
+#define P_VD2_IF0_RANGE_MAP_CB 		VCBUS_REG_ADDR(VD2_IF0_RANGE_MAP_CB)
+#define VD2_IF0_RANGE_MAP_CR 0x1a8c 	///../ucode/register.h:6976
+#define P_VD2_IF0_RANGE_MAP_CR 		VCBUS_REG_ADDR(VD2_IF0_RANGE_MAP_CR)
+#define VD2_IF0_GEN_REG2 0x1a8d 	///../ucode/register.h:6977
+#define P_VD2_IF0_GEN_REG2 		VCBUS_REG_ADDR(VD2_IF0_GEN_REG2)
+#define VD2_IF0_PROT_CNTL 0x1a8e 	///../ucode/register.h:6978
+#define P_VD2_IF0_PROT_CNTL 		VCBUS_REG_ADDR(VD2_IF0_PROT_CNTL)
+#define VIU_VD2_FMT_CTRL 0x1a88 	///../ucode/register.h:6992
+#define P_VIU_VD2_FMT_CTRL 		VCBUS_REG_ADDR(VIU_VD2_FMT_CTRL)
+#define VIU_VD2_FMT_W 0x1a89 	///../ucode/register.h:6995
+#define P_VIU_VD2_FMT_W 		VCBUS_REG_ADDR(VIU_VD2_FMT_W)
+#define LDIM_STTS_GCLK_CTRL0 0x1a90 	///../ucode/register.h:6997
+#define P_LDIM_STTS_GCLK_CTRL0 		VCBUS_REG_ADDR(LDIM_STTS_GCLK_CTRL0)
+#define LDIM_STTS_CTRL0 0x1a91 	///../ucode/register.h:6998
+#define P_LDIM_STTS_CTRL0 		VCBUS_REG_ADDR(LDIM_STTS_CTRL0)
+#define LDIM_STTS_WIDTHM1_HEIGHTM1 0x1a92 	///../ucode/register.h:6999
+#define P_LDIM_STTS_WIDTHM1_HEIGHTM1 		VCBUS_REG_ADDR(LDIM_STTS_WIDTHM1_HEIGHTM1)
+#define LDIM_STTS_MATRIX_COEF00_01 0x1a93 	///../ucode/register.h:7000
+#define P_LDIM_STTS_MATRIX_COEF00_01 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF00_01)
+#define LDIM_STTS_MATRIX_COEF02_10 0x1a94 	///../ucode/register.h:7001
+#define P_LDIM_STTS_MATRIX_COEF02_10 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF02_10)
+#define LDIM_STTS_MATRIX_COEF11_12 0x1a95 	///../ucode/register.h:7002
+#define P_LDIM_STTS_MATRIX_COEF11_12 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF11_12)
+#define LDIM_STTS_MATRIX_COEF20_21 0x1a96 	///../ucode/register.h:7003
+#define P_LDIM_STTS_MATRIX_COEF20_21 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF20_21)
+#define LDIM_STTS_MATRIX_COEF22 0x1a97 	///../ucode/register.h:7004
+#define P_LDIM_STTS_MATRIX_COEF22 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF22)
+#define LDIM_STTS_MATRIX_OFFSET0_1 0x1a98 	///../ucode/register.h:7005
+#define P_LDIM_STTS_MATRIX_OFFSET0_1 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_OFFSET0_1)
+#define LDIM_STTS_MATRIX_OFFSET2 0x1a99 	///../ucode/register.h:7006
+#define P_LDIM_STTS_MATRIX_OFFSET2 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_OFFSET2)
+#define LDIM_STTS_MATRIX_PRE_OFFSET0_1 0x1a9a 	///../ucode/register.h:7007
+#define P_LDIM_STTS_MATRIX_PRE_OFFSET0_1 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PRE_OFFSET0_1)
+#define LDIM_STTS_MATRIX_PRE_OFFSET2 0x1a9b 	///../ucode/register.h:7008
+#define P_LDIM_STTS_MATRIX_PRE_OFFSET2 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PRE_OFFSET2)
+#define LDIM_STTS_MATRIX_HL_COLOR 0x1a9c 	///../ucode/register.h:7009
+#define P_LDIM_STTS_MATRIX_HL_COLOR 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_HL_COLOR)
+#define LDIM_STTS_MATRIX_PROBE_POS 0x1a9d 	///../ucode/register.h:7010
+#define P_LDIM_STTS_MATRIX_PROBE_POS 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PROBE_POS)
+#define LDIM_STTS_MATRIX_PROBE_COLOR 0x1a9e 	///../ucode/register.h:7012
+#define P_LDIM_STTS_MATRIX_PROBE_COLOR 		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PROBE_COLOR)
+#define LDIM_STTS_HIST_REGION_IDX 0x1aa0 	///../ucode/register.h:7025
+#define P_LDIM_STTS_HIST_REGION_IDX 		VCBUS_REG_ADDR(LDIM_STTS_HIST_REGION_IDX)
+#define LDIM_STTS_HIST_SET_REGION 0x1aa1 	///../ucode/register.h:7048
+#define P_LDIM_STTS_HIST_SET_REGION 		VCBUS_REG_ADDR(LDIM_STTS_HIST_SET_REGION)
+#define LDIM_STTS_HIST_READ_REGION 0x1aa2 	///../ucode/register.h:7061
+#define P_LDIM_STTS_HIST_READ_REGION 		VCBUS_REG_ADDR(LDIM_STTS_HIST_READ_REGION)
+#define DI_PRE_CTRL 0x1700 	///../ucode/register.h:7066
+#define P_DI_PRE_CTRL 		VCBUS_REG_ADDR(DI_PRE_CTRL)
+#define DI_POST_CTRL 0x1701 	///../ucode/register.h:7089
+#define P_DI_POST_CTRL 		VCBUS_REG_ADDR(DI_POST_CTRL)
+#define DI_POST_SIZE 0x1702 	///../ucode/register.h:7108
+#define P_DI_POST_SIZE 		VCBUS_REG_ADDR(DI_POST_SIZE)
+#define DI_PRE_SIZE 0x1703 	///../ucode/register.h:7111
+#define P_DI_PRE_SIZE 		VCBUS_REG_ADDR(DI_PRE_SIZE)
+#define DI_EI_CTRL0 0x1704 	///../ucode/register.h:7114
+#define P_DI_EI_CTRL0 		VCBUS_REG_ADDR(DI_EI_CTRL0)
+#define DI_EI_CTRL1 0x1705 	///../ucode/register.h:7120
+#define P_DI_EI_CTRL1 		VCBUS_REG_ADDR(DI_EI_CTRL1)
+#define DI_EI_CTRL2 0x1706 	///../ucode/register.h:7125
+#define P_DI_EI_CTRL2 		VCBUS_REG_ADDR(DI_EI_CTRL2)
+#define DI_NR_CTRL0 0x1707 	///../ucode/register.h:7130
+#define P_DI_NR_CTRL0 		VCBUS_REG_ADDR(DI_NR_CTRL0)
+#define DI_NR_CTRL1 0x1708 	///../ucode/register.h:7133
+#define P_DI_NR_CTRL1 		VCBUS_REG_ADDR(DI_NR_CTRL1)
+#define DI_NR_CTRL2 0x1709 	///../ucode/register.h:7139
+#define P_DI_NR_CTRL2 		VCBUS_REG_ADDR(DI_NR_CTRL2)
+#define DI_NR_CTRL3 0x170a 	///../ucode/register.h:7144
+#define P_DI_NR_CTRL3 		VCBUS_REG_ADDR(DI_NR_CTRL3)
+#define DI_MTN_CTRL 0x170b 	///../ucode/register.h:7146
+#define P_DI_MTN_CTRL 		VCBUS_REG_ADDR(DI_MTN_CTRL)
+#define DI_MTN_CTRL1 0x170c 	///../ucode/register.h:7154
+#define P_DI_MTN_CTRL1 		VCBUS_REG_ADDR(DI_MTN_CTRL1)
+#define DI_BLEND_CTRL 0x170d 	///../ucode/register.h:7157
+#define P_DI_BLEND_CTRL 		VCBUS_REG_ADDR(DI_BLEND_CTRL)
+#define DI_BLEND_CTRL1 0x170e 	///../ucode/register.h:7177
+#define P_DI_BLEND_CTRL1 		VCBUS_REG_ADDR(DI_BLEND_CTRL1)
+#define DI_BLEND_CTRL2 0x170f 	///../ucode/register.h:7182
+#define P_DI_BLEND_CTRL2 		VCBUS_REG_ADDR(DI_BLEND_CTRL2)
+#define DI_BLEND_REG0_X 0x1710 	///../ucode/register.h:7185
+#define P_DI_BLEND_REG0_X 		VCBUS_REG_ADDR(DI_BLEND_REG0_X)
+#define DI_BLEND_REG0_Y 0x1711 	///../ucode/register.h:7188
+#define P_DI_BLEND_REG0_Y 		VCBUS_REG_ADDR(DI_BLEND_REG0_Y)
+#define DI_BLEND_REG1_X 0x1712 	///../ucode/register.h:7189
+#define P_DI_BLEND_REG1_X 		VCBUS_REG_ADDR(DI_BLEND_REG1_X)
+#define DI_BLEND_REG1_Y 0x1713 	///../ucode/register.h:7190
+#define P_DI_BLEND_REG1_Y 		VCBUS_REG_ADDR(DI_BLEND_REG1_Y)
+#define DI_BLEND_REG2_X 0x1714 	///../ucode/register.h:7191
+#define P_DI_BLEND_REG2_X 		VCBUS_REG_ADDR(DI_BLEND_REG2_X)
+#define DI_BLEND_REG2_Y 0x1715 	///../ucode/register.h:7192
+#define P_DI_BLEND_REG2_Y 		VCBUS_REG_ADDR(DI_BLEND_REG2_Y)
+#define DI_BLEND_REG3_X 0x1716 	///../ucode/register.h:7193
+#define P_DI_BLEND_REG3_X 		VCBUS_REG_ADDR(DI_BLEND_REG3_X)
+#define DI_BLEND_REG3_Y 0x1717 	///../ucode/register.h:7194
+#define P_DI_BLEND_REG3_Y 		VCBUS_REG_ADDR(DI_BLEND_REG3_Y)
+#define DI_CLKG_CTRL 0x1718 	///../ucode/register.h:7195
+#define P_DI_CLKG_CTRL 		VCBUS_REG_ADDR(DI_CLKG_CTRL)
+#define DI_EI_CTRL3 0x1719 	///../ucode/register.h:7200
+#define P_DI_EI_CTRL3 		VCBUS_REG_ADDR(DI_EI_CTRL3)
+#define DI_EI_CTRL4 0x171a 	///../ucode/register.h:7208
+#define P_DI_EI_CTRL4 		VCBUS_REG_ADDR(DI_EI_CTRL4)
+#define DI_EI_CTRL5 0x171b 	///../ucode/register.h:7217
+#define P_DI_EI_CTRL5 		VCBUS_REG_ADDR(DI_EI_CTRL5)
+#define DI_EI_CTRL6 0x171c 	///../ucode/register.h:7230
+#define P_DI_EI_CTRL6 		VCBUS_REG_ADDR(DI_EI_CTRL6)
+#define DI_EI_CTRL7 0x171d 	///../ucode/register.h:7236
+#define P_DI_EI_CTRL7 		VCBUS_REG_ADDR(DI_EI_CTRL7)
+#define DI_EI_CTRL8 0x171e 	///../ucode/register.h:7246
+#define P_DI_EI_CTRL8 		VCBUS_REG_ADDR(DI_EI_CTRL8)
+#define DI_EI_CTRL9 0x171f 	///../ucode/register.h:7258
+#define P_DI_EI_CTRL9 		VCBUS_REG_ADDR(DI_EI_CTRL9)
+#define DI_EI_CTRL10 0x1793 	///../ucode/register.h:7270
+#define P_DI_EI_CTRL10 		VCBUS_REG_ADDR(DI_EI_CTRL10)
+#define DI_EI_CTRL11 0x179e 	///../ucode/register.h:7284
+#define P_DI_EI_CTRL11 		VCBUS_REG_ADDR(DI_EI_CTRL11)
+#define DI_EI_CTRL12 0x179f 	///../ucode/register.h:7299
+#define P_DI_EI_CTRL12 		VCBUS_REG_ADDR(DI_EI_CTRL12)
+#define DI_EI_CTRL13 0x17a8 	///../ucode/register.h:7312
+#define P_DI_EI_CTRL13 		VCBUS_REG_ADDR(DI_EI_CTRL13)
+#define DI_EI_XWIN0 0x1798 	///../ucode/register.h:7318
+#define P_DI_EI_XWIN0 		VCBUS_REG_ADDR(DI_EI_XWIN0)
+#define DI_EI_XWIN1 0x1799 	///../ucode/register.h:7321
+#define P_DI_EI_XWIN1 		VCBUS_REG_ADDR(DI_EI_XWIN1)
+#define DI_MC_REG0_X 0x1720 	///../ucode/register.h:7323
+#define P_DI_MC_REG0_X 		VCBUS_REG_ADDR(DI_MC_REG0_X)
+#define DI_MC_REG0_Y 0x1721 	///../ucode/register.h:7326
+#define P_DI_MC_REG0_Y 		VCBUS_REG_ADDR(DI_MC_REG0_Y)
+#define DI_MC_REG1_X 0x1722 	///../ucode/register.h:7327
+#define P_DI_MC_REG1_X 		VCBUS_REG_ADDR(DI_MC_REG1_X)
+#define DI_MC_REG1_Y 0x1723 	///../ucode/register.h:7328
+#define P_DI_MC_REG1_Y 		VCBUS_REG_ADDR(DI_MC_REG1_Y)
+#define DI_MC_REG2_X 0x1724 	///../ucode/register.h:7329
+#define P_DI_MC_REG2_X 		VCBUS_REG_ADDR(DI_MC_REG2_X)
+#define DI_MC_REG2_Y 0x1725 	///../ucode/register.h:7330
+#define P_DI_MC_REG2_Y 		VCBUS_REG_ADDR(DI_MC_REG2_Y)
+#define DI_MC_REG3_X 0x1726 	///../ucode/register.h:7331
+#define P_DI_MC_REG3_X 		VCBUS_REG_ADDR(DI_MC_REG3_X)
+#define DI_MC_REG3_Y 0x1727 	///../ucode/register.h:7332
+#define P_DI_MC_REG3_Y 		VCBUS_REG_ADDR(DI_MC_REG3_Y)
+#define DI_MC_REG4_X 0x1728 	///../ucode/register.h:7333
+#define P_DI_MC_REG4_X 		VCBUS_REG_ADDR(DI_MC_REG4_X)
+#define DI_MC_REG4_Y 0x1729 	///../ucode/register.h:7334
+#define P_DI_MC_REG4_Y 		VCBUS_REG_ADDR(DI_MC_REG4_Y)
+#define DI_MC_32LVL0 0x172a 	///../ucode/register.h:7335
+#define P_DI_MC_32LVL0 		VCBUS_REG_ADDR(DI_MC_32LVL0)
+#define DI_MC_32LVL1 0x172b 	///../ucode/register.h:7340
+#define P_DI_MC_32LVL1 		VCBUS_REG_ADDR(DI_MC_32LVL1)
+#define DI_MC_22LVL0 0x172c 	///../ucode/register.h:7343
+#define P_DI_MC_22LVL0 		VCBUS_REG_ADDR(DI_MC_22LVL0)
+#define DI_MC_22LVL1 0x172d 	///../ucode/register.h:7346
+#define P_DI_MC_22LVL1 		VCBUS_REG_ADDR(DI_MC_22LVL1)
+#define DI_MC_22LVL2 0x172e 	///../ucode/register.h:7349
+#define P_DI_MC_22LVL2 		VCBUS_REG_ADDR(DI_MC_22LVL2)
+#define DI_MC_CTRL 0x172f 	///../ucode/register.h:7352
+#define P_DI_MC_CTRL 		VCBUS_REG_ADDR(DI_MC_CTRL)
+#define DI_INTR_CTRL 0x1730 	///../ucode/register.h:7358
+#define P_DI_INTR_CTRL 		VCBUS_REG_ADDR(DI_INTR_CTRL)
+#define DI_INFO_ADDR 0x1731 	///../ucode/register.h:7359
+#define P_DI_INFO_ADDR 		VCBUS_REG_ADDR(DI_INFO_ADDR)
+#define DI_INFO_DATA 0x1732 	///../ucode/register.h:7360
+#define P_DI_INFO_DATA 		VCBUS_REG_ADDR(DI_INFO_DATA)
+#define DI_PRE_HOLD 0x1733 	///../ucode/register.h:7361
+#define P_DI_PRE_HOLD 		VCBUS_REG_ADDR(DI_PRE_HOLD)
+#define DI_MTN_1_CTRL1 0x1740 	///../ucode/register.h:7362
+#define P_DI_MTN_1_CTRL1 		VCBUS_REG_ADDR(DI_MTN_1_CTRL1)
+#define DI_MTN_1_CTRL2 0x1741 	///../ucode/register.h:7371
+#define P_DI_MTN_1_CTRL2 		VCBUS_REG_ADDR(DI_MTN_1_CTRL2)
+#define DI_MTN_1_CTRL3 0x1742 	///../ucode/register.h:7376
+#define P_DI_MTN_1_CTRL3 		VCBUS_REG_ADDR(DI_MTN_1_CTRL3)
+#define DI_MTN_1_CTRL4 0x1743 	///../ucode/register.h:7381
+#define P_DI_MTN_1_CTRL4 		VCBUS_REG_ADDR(DI_MTN_1_CTRL4)
+#define DI_MTN_1_CTRL5 0x1744 	///../ucode/register.h:7386
+#define P_DI_MTN_1_CTRL5 		VCBUS_REG_ADDR(DI_MTN_1_CTRL5)
+#define DI_MTN_1_CTRL6 0x17a9 	///../ucode/register.h:7391
+#define P_DI_MTN_1_CTRL6 		VCBUS_REG_ADDR(DI_MTN_1_CTRL6)
+#define DI_MTN_1_CTRL7 0x17aa 	///../ucode/register.h:7396
+#define P_DI_MTN_1_CTRL7 		VCBUS_REG_ADDR(DI_MTN_1_CTRL7)
+#define DI_MTN_1_CTRL8 0x17ab 	///../ucode/register.h:7401
+#define P_DI_MTN_1_CTRL8 		VCBUS_REG_ADDR(DI_MTN_1_CTRL8)
+#define DI_MTN_1_CTRL9 0x17ac 	///../ucode/register.h:7406
+#define P_DI_MTN_1_CTRL9 		VCBUS_REG_ADDR(DI_MTN_1_CTRL9)
+#define DI_MTN_1_CTRL10 0x17ad 	///../ucode/register.h:7411
+#define P_DI_MTN_1_CTRL10 		VCBUS_REG_ADDR(DI_MTN_1_CTRL10)
+#define DI_MTN_1_CTRL11 0x17ae 	///../ucode/register.h:7416
+#define P_DI_MTN_1_CTRL11 		VCBUS_REG_ADDR(DI_MTN_1_CTRL11)
+#define DI_MTN_1_CTRL12 0x17af 	///../ucode/register.h:7421
+#define P_DI_MTN_1_CTRL12 		VCBUS_REG_ADDR(DI_MTN_1_CTRL12)
+#define DET3D_MOTN_CFG 0x1734 	///../ucode/register.h:7428
+#define P_DET3D_MOTN_CFG 		VCBUS_REG_ADDR(DET3D_MOTN_CFG)
+#define DET3D_CB_CFG 0x1735 	///../ucode/register.h:7429
+#define P_DET3D_CB_CFG 		VCBUS_REG_ADDR(DET3D_CB_CFG)
+#define DET3D_SPLT_CFG 0x1736 	///../ucode/register.h:7430
+#define P_DET3D_SPLT_CFG 		VCBUS_REG_ADDR(DET3D_SPLT_CFG)
+#define DET3D_HV_MUTE 0x1737 	///../ucode/register.h:7431
+#define P_DET3D_HV_MUTE 		VCBUS_REG_ADDR(DET3D_HV_MUTE)
+#define DET3D_MAT_STA_P1M1 0x1738 	///../ucode/register.h:7432
+#define P_DET3D_MAT_STA_P1M1 		VCBUS_REG_ADDR(DET3D_MAT_STA_P1M1)
+#define DET3D_MAT_STA_P1TH 0x1739 	///../ucode/register.h:7433
+#define P_DET3D_MAT_STA_P1TH 		VCBUS_REG_ADDR(DET3D_MAT_STA_P1TH)
+#define DET3D_MAT_STA_M1TH 0x173a 	///../ucode/register.h:7434
+#define P_DET3D_MAT_STA_M1TH 		VCBUS_REG_ADDR(DET3D_MAT_STA_M1TH)
+#define DET3D_MAT_STA_RSFT 0x173b 	///../ucode/register.h:7435
+#define P_DET3D_MAT_STA_RSFT 		VCBUS_REG_ADDR(DET3D_MAT_STA_RSFT)
+#define DET3D_MAT_SYMTC_TH 0x173c 	///../ucode/register.h:7436
+#define P_DET3D_MAT_SYMTC_TH 		VCBUS_REG_ADDR(DET3D_MAT_SYMTC_TH)
+#define DET3D_RO_DET_CB_HOR 0x173d 	///../ucode/register.h:7437
+#define P_DET3D_RO_DET_CB_HOR 		VCBUS_REG_ADDR(DET3D_RO_DET_CB_HOR)
+#define DET3D_RO_DET_CB_VER 0x173e 	///../ucode/register.h:7438
+#define P_DET3D_RO_DET_CB_VER 		VCBUS_REG_ADDR(DET3D_RO_DET_CB_VER)
+#define DET3D_RO_SPLT_HT 0x173f 	///../ucode/register.h:7439
+#define P_DET3D_RO_SPLT_HT 		VCBUS_REG_ADDR(DET3D_RO_SPLT_HT)
+#define NR2_MET_NM_CTRL 0x1745 	///../ucode/register.h:7442
+#define P_NR2_MET_NM_CTRL 		VCBUS_REG_ADDR(NR2_MET_NM_CTRL)
+#define NR2_MET_NM_YCTRL 0x1746 	///../ucode/register.h:7443
+#define P_NR2_MET_NM_YCTRL 		VCBUS_REG_ADDR(NR2_MET_NM_YCTRL)
+#define NR2_MET_NM_CCTRL 0x1747 	///../ucode/register.h:7444
+#define P_NR2_MET_NM_CCTRL 		VCBUS_REG_ADDR(NR2_MET_NM_CCTRL)
+#define NR2_MET_NM_TNR 0x1748 	///../ucode/register.h:7445
+#define P_NR2_MET_NM_TNR 		VCBUS_REG_ADDR(NR2_MET_NM_TNR)
+#define NR2_MET_NMFRM_TNR_YLEV 0x1749 	///../ucode/register.h:7446
+#define P_NR2_MET_NMFRM_TNR_YLEV 		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_YLEV)
+#define NR2_MET_NMFRM_TNR_YCNT 0x174a 	///../ucode/register.h:7447
+#define P_NR2_MET_NMFRM_TNR_YCNT 		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_YCNT)
+#define NR2_MET_NMFRM_TNR_CLEV 0x174b 	///../ucode/register.h:7448
+#define P_NR2_MET_NMFRM_TNR_CLEV 		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_CLEV)
+#define NR2_MET_NMFRM_TNR_CCNT 0x174c 	///../ucode/register.h:7449
+#define P_NR2_MET_NMFRM_TNR_CCNT 		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_CCNT)
+#define NR2_3DEN_MODE 0x174d 	///../ucode/register.h:7450
+#define P_NR2_3DEN_MODE 		VCBUS_REG_ADDR(NR2_3DEN_MODE)
+#define NR2_IIR_CTRL 0x174e 	///../ucode/register.h:7451
+#define P_NR2_IIR_CTRL 		VCBUS_REG_ADDR(NR2_IIR_CTRL)
+#define NR2_SW_EN 0x174f 	///../ucode/register.h:7452
+#define P_NR2_SW_EN 		VCBUS_REG_ADDR(NR2_SW_EN)
+#define NR2_FRM_SIZE 0x1750 	///../ucode/register.h:7453
+#define P_NR2_FRM_SIZE 		VCBUS_REG_ADDR(NR2_FRM_SIZE)
+#define NR2_SNR_SAD_CFG 0x1751 	///../ucode/register.h:7454
+#define P_NR2_SNR_SAD_CFG 		VCBUS_REG_ADDR(NR2_SNR_SAD_CFG)
+#define NR2_MATNR_SNR_OS 0x1752 	///../ucode/register.h:7455
+#define P_NR2_MATNR_SNR_OS 		VCBUS_REG_ADDR(NR2_MATNR_SNR_OS)
+#define NR2_MATNR_SNR_NRM_CFG 0x1753 	///../ucode/register.h:7456
+#define P_NR2_MATNR_SNR_NRM_CFG 		VCBUS_REG_ADDR(NR2_MATNR_SNR_NRM_CFG)
+#define NR2_MATNR_SNR_NRM_GAIN 0x1754 	///../ucode/register.h:7457
+#define P_NR2_MATNR_SNR_NRM_GAIN 		VCBUS_REG_ADDR(NR2_MATNR_SNR_NRM_GAIN)
+#define NR2_MATNR_SNR_LPF_CFG 0x1755 	///../ucode/register.h:7458
+#define P_NR2_MATNR_SNR_LPF_CFG 		VCBUS_REG_ADDR(NR2_MATNR_SNR_LPF_CFG)
+#define NR2_MATNR_SNR_USF_GAIN 0x1756 	///../ucode/register.h:7459
+#define P_NR2_MATNR_SNR_USF_GAIN 		VCBUS_REG_ADDR(NR2_MATNR_SNR_USF_GAIN)
+#define NR2_MATNR_SNR_EDGE2B 0x1757 	///../ucode/register.h:7460
+#define P_NR2_MATNR_SNR_EDGE2B 		VCBUS_REG_ADDR(NR2_MATNR_SNR_EDGE2B)
+#define NR2_MATNR_BETA_EGAIN 0x1758 	///../ucode/register.h:7461
+#define P_NR2_MATNR_BETA_EGAIN 		VCBUS_REG_ADDR(NR2_MATNR_BETA_EGAIN)
+#define NR2_MATNR_BETA_BRT 0x1759 	///../ucode/register.h:7462
+#define P_NR2_MATNR_BETA_BRT 		VCBUS_REG_ADDR(NR2_MATNR_BETA_BRT)
+#define NR2_MATNR_XBETA_CFG 0x175a 	///../ucode/register.h:7463
+#define P_NR2_MATNR_XBETA_CFG 		VCBUS_REG_ADDR(NR2_MATNR_XBETA_CFG)
+#define NR2_MATNR_YBETA_SCL 0x175b 	///../ucode/register.h:7464
+#define P_NR2_MATNR_YBETA_SCL 		VCBUS_REG_ADDR(NR2_MATNR_YBETA_SCL)
+#define NR2_MATNR_CBETA_SCL 0x175c 	///../ucode/register.h:7465
+#define P_NR2_MATNR_CBETA_SCL 		VCBUS_REG_ADDR(NR2_MATNR_CBETA_SCL)
+#define NR2_SNR_MASK 0x175d 	///../ucode/register.h:7466
+#define P_NR2_SNR_MASK 		VCBUS_REG_ADDR(NR2_SNR_MASK)
+#define NR2_SAD2NORM_LUT0 0x175e 	///../ucode/register.h:7467
+#define P_NR2_SAD2NORM_LUT0 		VCBUS_REG_ADDR(NR2_SAD2NORM_LUT0)
+#define NR2_SAD2NORM_LUT1 0x175f 	///../ucode/register.h:7468
+#define P_NR2_SAD2NORM_LUT1 		VCBUS_REG_ADDR(NR2_SAD2NORM_LUT1)
+#define NR2_SAD2NORM_LUT2 0x1760 	///../ucode/register.h:7469
+#define P_NR2_SAD2NORM_LUT2 		VCBUS_REG_ADDR(NR2_SAD2NORM_LUT2)
+#define NR2_SAD2NORM_LUT3 0x1761 	///../ucode/register.h:7470
+#define P_NR2_SAD2NORM_LUT3 		VCBUS_REG_ADDR(NR2_SAD2NORM_LUT3)
+#define NR2_EDGE2BETA_LUT0 0x1762 	///../ucode/register.h:7471
+#define P_NR2_EDGE2BETA_LUT0 		VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT0)
+#define NR2_EDGE2BETA_LUT1 0x1763 	///../ucode/register.h:7472
+#define P_NR2_EDGE2BETA_LUT1 		VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT1)
+#define NR2_EDGE2BETA_LUT2 0x1764 	///../ucode/register.h:7473
+#define P_NR2_EDGE2BETA_LUT2 		VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT2)
+#define NR2_EDGE2BETA_LUT3 0x1765 	///../ucode/register.h:7474
+#define P_NR2_EDGE2BETA_LUT3 		VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT3)
+#define NR2_MOTION2BETA_LUT0 0x1766 	///../ucode/register.h:7475
+#define P_NR2_MOTION2BETA_LUT0 		VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT0)
+#define NR2_MOTION2BETA_LUT1 0x1767 	///../ucode/register.h:7476
+#define P_NR2_MOTION2BETA_LUT1 		VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT1)
+#define NR2_MOTION2BETA_LUT2 0x1768 	///../ucode/register.h:7477
+#define P_NR2_MOTION2BETA_LUT2 		VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT2)
+#define NR2_MOTION2BETA_LUT3 0x1769 	///../ucode/register.h:7478
+#define P_NR2_MOTION2BETA_LUT3 		VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT3)
+#define NR2_MATNR_MTN_CRTL 0x176a 	///../ucode/register.h:7479
+#define P_NR2_MATNR_MTN_CRTL 		VCBUS_REG_ADDR(NR2_MATNR_MTN_CRTL)
+#define NR2_MATNR_MTN_CRTL2 0x176b 	///../ucode/register.h:7480
+#define P_NR2_MATNR_MTN_CRTL2 		VCBUS_REG_ADDR(NR2_MATNR_MTN_CRTL2)
+#define NR2_MATNR_MTN_COR 0x176c 	///../ucode/register.h:7481
+#define P_NR2_MATNR_MTN_COR 		VCBUS_REG_ADDR(NR2_MATNR_MTN_COR)
+#define NR2_MATNR_MTN_GAIN 0x176d 	///../ucode/register.h:7482
+#define P_NR2_MATNR_MTN_GAIN 		VCBUS_REG_ADDR(NR2_MATNR_MTN_GAIN)
+#define NR2_MATNR_DEGHOST 0x176e 	///../ucode/register.h:7483
+#define P_NR2_MATNR_DEGHOST 		VCBUS_REG_ADDR(NR2_MATNR_DEGHOST)
+#define NR2_MATNR_ALPHALP_LUT0 0x176f 	///../ucode/register.h:7484
+#define P_NR2_MATNR_ALPHALP_LUT0 		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT0)
+#define NR2_MATNR_ALPHALP_LUT1 0x1770 	///../ucode/register.h:7485
+#define P_NR2_MATNR_ALPHALP_LUT1 		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT1)
+#define NR2_MATNR_ALPHALP_LUT2 0x1771 	///../ucode/register.h:7486
+#define P_NR2_MATNR_ALPHALP_LUT2 		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT2)
+#define NR2_MATNR_ALPHALP_LUT3 0x1772 	///../ucode/register.h:7487
+#define P_NR2_MATNR_ALPHALP_LUT3 		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT3)
+#define NR2_MATNR_ALPHAHP_LUT0 0x1773 	///../ucode/register.h:7488
+#define P_NR2_MATNR_ALPHAHP_LUT0 		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT0)
+#define NR2_MATNR_ALPHAHP_LUT1 0x1774 	///../ucode/register.h:7489
+#define P_NR2_MATNR_ALPHAHP_LUT1 		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT1)
+#define NR2_MATNR_ALPHAHP_LUT2 0x1775 	///../ucode/register.h:7490
+#define P_NR2_MATNR_ALPHAHP_LUT2 		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT2)
+#define NR2_MATNR_ALPHAHP_LUT3 0x1776 	///../ucode/register.h:7491
+#define P_NR2_MATNR_ALPHAHP_LUT3 		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT3)
+#define NR2_MATNR_MTNB_BRT 0x1777 	///../ucode/register.h:7492
+#define P_NR2_MATNR_MTNB_BRT 		VCBUS_REG_ADDR(NR2_MATNR_MTNB_BRT)
+#define NR2_CUE_MODE 0x1778 	///../ucode/register.h:7493
+#define P_NR2_CUE_MODE 		VCBUS_REG_ADDR(NR2_CUE_MODE)
+#define NR2_CUE_CON_MOT_TH 0x1779 	///../ucode/register.h:7494
+#define P_NR2_CUE_CON_MOT_TH 		VCBUS_REG_ADDR(NR2_CUE_CON_MOT_TH)
+#define NR2_CUE_CON_DIF0 0x177a 	///../ucode/register.h:7495
+#define P_NR2_CUE_CON_DIF0 		VCBUS_REG_ADDR(NR2_CUE_CON_DIF0)
+#define NR2_CUE_CON_DIF1 0x177b 	///../ucode/register.h:7496
+#define P_NR2_CUE_CON_DIF1 		VCBUS_REG_ADDR(NR2_CUE_CON_DIF1)
+#define NR2_CUE_CON_DIF2 0x177c 	///../ucode/register.h:7497
+#define P_NR2_CUE_CON_DIF2 		VCBUS_REG_ADDR(NR2_CUE_CON_DIF2)
+#define NR2_CUE_CON_DIF3 0x177d 	///../ucode/register.h:7498
+#define P_NR2_CUE_CON_DIF3 		VCBUS_REG_ADDR(NR2_CUE_CON_DIF3)
+#define NR2_CUE_PRG_DIF 0x177e 	///../ucode/register.h:7499
+#define P_NR2_CUE_PRG_DIF 		VCBUS_REG_ADDR(NR2_CUE_PRG_DIF)
+#define NR2_CONV_MODE 0x177f 	///../ucode/register.h:7500
+#define P_NR2_CONV_MODE 		VCBUS_REG_ADDR(NR2_CONV_MODE)
+#define DET3D_RO_SPLT_HB 0x1780 	///../ucode/register.h:7504
+#define P_DET3D_RO_SPLT_HB 		VCBUS_REG_ADDR(DET3D_RO_SPLT_HB)
+#define DET3D_RO_SPLT_VL 0x1781 	///../ucode/register.h:7505
+#define P_DET3D_RO_SPLT_VL 		VCBUS_REG_ADDR(DET3D_RO_SPLT_VL)
+#define DET3D_RO_SPLT_VR 0x1782 	///../ucode/register.h:7506
+#define P_DET3D_RO_SPLT_VR 		VCBUS_REG_ADDR(DET3D_RO_SPLT_VR)
+#define DET3D_RO_MAT_LUMA_LR 0x1783 	///../ucode/register.h:7507
+#define P_DET3D_RO_MAT_LUMA_LR 		VCBUS_REG_ADDR(DET3D_RO_MAT_LUMA_LR)
+#define DET3D_RO_MAT_LUMA_TB 0x1784 	///../ucode/register.h:7508
+#define P_DET3D_RO_MAT_LUMA_TB 		VCBUS_REG_ADDR(DET3D_RO_MAT_LUMA_TB)
+#define DET3D_RO_MAT_CHRU_LR 0x1785 	///../ucode/register.h:7509
+#define P_DET3D_RO_MAT_CHRU_LR 		VCBUS_REG_ADDR(DET3D_RO_MAT_CHRU_LR)
+#define DET3D_RO_MAT_CHRU_TB 0x1786 	///../ucode/register.h:7510
+#define P_DET3D_RO_MAT_CHRU_TB 		VCBUS_REG_ADDR(DET3D_RO_MAT_CHRU_TB)
+#define DET3D_RO_MAT_CHRV_LR 0x1787 	///../ucode/register.h:7511
+#define P_DET3D_RO_MAT_CHRV_LR 		VCBUS_REG_ADDR(DET3D_RO_MAT_CHRV_LR)
+#define DET3D_RO_MAT_CHRV_TB 0x1788 	///../ucode/register.h:7512
+#define P_DET3D_RO_MAT_CHRV_TB 		VCBUS_REG_ADDR(DET3D_RO_MAT_CHRV_TB)
+#define DET3D_RO_MAT_HEDG_LR 0x1789 	///../ucode/register.h:7513
+#define P_DET3D_RO_MAT_HEDG_LR 		VCBUS_REG_ADDR(DET3D_RO_MAT_HEDG_LR)
+#define DET3D_RO_MAT_HEDG_TB 0x178a 	///../ucode/register.h:7514
+#define P_DET3D_RO_MAT_HEDG_TB 		VCBUS_REG_ADDR(DET3D_RO_MAT_HEDG_TB)
+#define DET3D_RO_MAT_VEDG_LR 0x178b 	///../ucode/register.h:7515
+#define P_DET3D_RO_MAT_VEDG_LR 		VCBUS_REG_ADDR(DET3D_RO_MAT_VEDG_LR)
+#define DET3D_RO_MAT_VEDG_TB 0x178c 	///../ucode/register.h:7516
+#define P_DET3D_RO_MAT_VEDG_TB 		VCBUS_REG_ADDR(DET3D_RO_MAT_VEDG_TB)
+#define DET3D_RO_MAT_MOTN_LR 0x178d 	///../ucode/register.h:7517
+#define P_DET3D_RO_MAT_MOTN_LR 		VCBUS_REG_ADDR(DET3D_RO_MAT_MOTN_LR)
+#define DET3D_RO_MAT_MOTN_TB 0x178e 	///../ucode/register.h:7518
+#define P_DET3D_RO_MAT_MOTN_TB 		VCBUS_REG_ADDR(DET3D_RO_MAT_MOTN_TB)
+#define DET3D_RO_FRM_MOTN 0x178f 	///../ucode/register.h:7519
+#define P_DET3D_RO_FRM_MOTN 		VCBUS_REG_ADDR(DET3D_RO_FRM_MOTN)
+#define DET3D_RAMRD_ADDR_PORT 0x179a 	///../ucode/register.h:7521
+#define P_DET3D_RAMRD_ADDR_PORT 		VCBUS_REG_ADDR(DET3D_RAMRD_ADDR_PORT)
+#define DET3D_RAMRD_DATA_PORT 0x179b 	///../ucode/register.h:7522
+#define P_DET3D_RAMRD_DATA_PORT 		VCBUS_REG_ADDR(DET3D_RAMRD_DATA_PORT)
+#define NR2_CFR_PARA_CFG0 0x179c 	///../ucode/register.h:7523
+#define P_NR2_CFR_PARA_CFG0 		VCBUS_REG_ADDR(NR2_CFR_PARA_CFG0)
+#define NR2_CFR_PARA_CFG1 0x179d 	///../ucode/register.h:7524
+#define P_NR2_CFR_PARA_CFG1 		VCBUS_REG_ADDR(NR2_CFR_PARA_CFG1)
+#define DI_NR_1_CTRL0 0x1794 	///../ucode/register.h:7526
+#define P_DI_NR_1_CTRL0 		VCBUS_REG_ADDR(DI_NR_1_CTRL0)
+#define DI_NR_1_CTRL1 0x1795 	///../ucode/register.h:7527
+#define P_DI_NR_1_CTRL1 		VCBUS_REG_ADDR(DI_NR_1_CTRL1)
+#define DI_NR_1_CTRL2 0x1796 	///../ucode/register.h:7528
+#define P_DI_NR_1_CTRL2 		VCBUS_REG_ADDR(DI_NR_1_CTRL2)
+#define DI_NR_1_CTRL3 0x1797 	///../ucode/register.h:7529
+#define P_DI_NR_1_CTRL3 		VCBUS_REG_ADDR(DI_NR_1_CTRL3)
+#define DI_CONTWR_X 0x17a0 	///../ucode/register.h:7530
+#define P_DI_CONTWR_X 		VCBUS_REG_ADDR(DI_CONTWR_X)
+#define DI_CONTWR_Y 0x17a1 	///../ucode/register.h:7531
+#define P_DI_CONTWR_Y 		VCBUS_REG_ADDR(DI_CONTWR_Y)
+#define DI_CONTWR_CTRL 0x17a2 	///../ucode/register.h:7532
+#define P_DI_CONTWR_CTRL 		VCBUS_REG_ADDR(DI_CONTWR_CTRL)
+#define DI_CONTPRD_X 0x17a3 	///../ucode/register.h:7533
+#define P_DI_CONTPRD_X 		VCBUS_REG_ADDR(DI_CONTPRD_X)
+#define DI_CONTPRD_Y 0x17a4 	///../ucode/register.h:7534
+#define P_DI_CONTPRD_Y 		VCBUS_REG_ADDR(DI_CONTPRD_Y)
+#define DI_CONTP2RD_X 0x17a5 	///../ucode/register.h:7535
+#define P_DI_CONTP2RD_X 		VCBUS_REG_ADDR(DI_CONTP2RD_X)
+#define DI_CONTP2RD_Y 0x17a6 	///../ucode/register.h:7536
+#define P_DI_CONTP2RD_Y 		VCBUS_REG_ADDR(DI_CONTP2RD_Y)
+#define DI_CONTRD_CTRL 0x17a7 	///../ucode/register.h:7537
+#define P_DI_CONTRD_CTRL 		VCBUS_REG_ADDR(DI_CONTRD_CTRL)
+#define DI_NRWR_X 0x17c0 	///../ucode/register.h:7538
+#define P_DI_NRWR_X 		VCBUS_REG_ADDR(DI_NRWR_X)
+#define DI_NRWR_Y 0x17c1 	///../ucode/register.h:7539
+#define P_DI_NRWR_Y 		VCBUS_REG_ADDR(DI_NRWR_Y)
+#define DI_NRWR_CTRL 0x17c2 	///../ucode/register.h:7540
+#define P_DI_NRWR_CTRL 		VCBUS_REG_ADDR(DI_NRWR_CTRL)
+#define DI_MTNWR_X 0x17c3 	///../ucode/register.h:7541
+#define P_DI_MTNWR_X 		VCBUS_REG_ADDR(DI_MTNWR_X)
+#define DI_MTNWR_Y 0x17c4 	///../ucode/register.h:7542
+#define P_DI_MTNWR_Y 		VCBUS_REG_ADDR(DI_MTNWR_Y)
+#define DI_MTNWR_CTRL 0x17c5 	///../ucode/register.h:7543
+#define P_DI_MTNWR_CTRL 		VCBUS_REG_ADDR(DI_MTNWR_CTRL)
+#define DI_DIWR_X 0x17c6 	///../ucode/register.h:7544
+#define P_DI_DIWR_X 		VCBUS_REG_ADDR(DI_DIWR_X)
+#define DI_DIWR_Y 0x17c7 	///../ucode/register.h:7545
+#define P_DI_DIWR_Y 		VCBUS_REG_ADDR(DI_DIWR_Y)
+#define DI_DIWR_CTRL 0x17c8 	///../ucode/register.h:7546
+#define P_DI_DIWR_CTRL 		VCBUS_REG_ADDR(DI_DIWR_CTRL)
+#define DI_MTNCRD_X 0x17c9 	///../ucode/register.h:7547
+#define P_DI_MTNCRD_X 		VCBUS_REG_ADDR(DI_MTNCRD_X)
+#define DI_MTNCRD_Y 0x17ca 	///../ucode/register.h:7548
+#define P_DI_MTNCRD_Y 		VCBUS_REG_ADDR(DI_MTNCRD_Y)
+#define DI_MTNPRD_X 0x17cb 	///../ucode/register.h:7549
+#define P_DI_MTNPRD_X 		VCBUS_REG_ADDR(DI_MTNPRD_X)
+#define DI_MTNPRD_Y 0x17cc 	///../ucode/register.h:7550
+#define P_DI_MTNPRD_Y 		VCBUS_REG_ADDR(DI_MTNPRD_Y)
+#define DI_MTNRD_CTRL 0x17cd 	///../ucode/register.h:7551
+#define P_DI_MTNRD_CTRL 		VCBUS_REG_ADDR(DI_MTNRD_CTRL)
+#define DI_INP_GEN_REG 0x17ce 	///../ucode/register.h:7552
+#define P_DI_INP_GEN_REG 		VCBUS_REG_ADDR(DI_INP_GEN_REG)
+#define DI_INP_CANVAS0 0x17cf 	///../ucode/register.h:7553
+#define P_DI_INP_CANVAS0 		VCBUS_REG_ADDR(DI_INP_CANVAS0)
+#define DI_INP_LUMA_X0 0x17d0 	///../ucode/register.h:7554
+#define P_DI_INP_LUMA_X0 		VCBUS_REG_ADDR(DI_INP_LUMA_X0)
+#define DI_INP_LUMA_Y0 0x17d1 	///../ucode/register.h:7555
+#define P_DI_INP_LUMA_Y0 		VCBUS_REG_ADDR(DI_INP_LUMA_Y0)
+#define DI_INP_CHROMA_X0 0x17d2 	///../ucode/register.h:7556
+#define P_DI_INP_CHROMA_X0 		VCBUS_REG_ADDR(DI_INP_CHROMA_X0)
+#define DI_INP_CHROMA_Y0 0x17d3 	///../ucode/register.h:7557
+#define P_DI_INP_CHROMA_Y0 		VCBUS_REG_ADDR(DI_INP_CHROMA_Y0)
+#define DI_INP_RPT_LOOP 0x17d4 	///../ucode/register.h:7558
+#define P_DI_INP_RPT_LOOP 		VCBUS_REG_ADDR(DI_INP_RPT_LOOP)
+#define DI_INP_LUMA0_RPT_PAT 0x17d5 	///../ucode/register.h:7559
+#define P_DI_INP_LUMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_INP_LUMA0_RPT_PAT)
+#define DI_INP_CHROMA0_RPT_PAT 0x17d6 	///../ucode/register.h:7560
+#define P_DI_INP_CHROMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_INP_CHROMA0_RPT_PAT)
+#define DI_INP_DUMMY_PIXEL 0x17d7 	///../ucode/register.h:7561
+#define P_DI_INP_DUMMY_PIXEL 		VCBUS_REG_ADDR(DI_INP_DUMMY_PIXEL)
+#define DI_INP_LUMA_FIFO_SIZE 0x17d8 	///../ucode/register.h:7562
+#define P_DI_INP_LUMA_FIFO_SIZE 		VCBUS_REG_ADDR(DI_INP_LUMA_FIFO_SIZE)
+#define DI_INP_RANGE_MAP_Y 0x17ba 	///../ucode/register.h:7563
+#define P_DI_INP_RANGE_MAP_Y 		VCBUS_REG_ADDR(DI_INP_RANGE_MAP_Y)
+#define DI_INP_RANGE_MAP_CB 0x17bb 	///../ucode/register.h:7564
+#define P_DI_INP_RANGE_MAP_CB 		VCBUS_REG_ADDR(DI_INP_RANGE_MAP_CB)
+#define DI_INP_RANGE_MAP_CR 0x17bc 	///../ucode/register.h:7565
+#define P_DI_INP_RANGE_MAP_CR 		VCBUS_REG_ADDR(DI_INP_RANGE_MAP_CR)
+#define DI_INP_GEN_REG2 0x1791 	///../ucode/register.h:7566
+#define P_DI_INP_GEN_REG2 		VCBUS_REG_ADDR(DI_INP_GEN_REG2)
+#define DI_INP_FMT_CTRL 0x17d9 	///../ucode/register.h:7567
+#define P_DI_INP_FMT_CTRL 		VCBUS_REG_ADDR(DI_INP_FMT_CTRL)
+#define DI_INP_FMT_W 0x17da 	///../ucode/register.h:7568
+#define P_DI_INP_FMT_W 		VCBUS_REG_ADDR(DI_INP_FMT_W)
+#define DI_MEM_GEN_REG 0x17db 	///../ucode/register.h:7569
+#define P_DI_MEM_GEN_REG 		VCBUS_REG_ADDR(DI_MEM_GEN_REG)
+#define DI_MEM_CANVAS0 0x17dc 	///../ucode/register.h:7570
+#define P_DI_MEM_CANVAS0 		VCBUS_REG_ADDR(DI_MEM_CANVAS0)
+#define DI_MEM_LUMA_X0 0x17dd 	///../ucode/register.h:7571
+#define P_DI_MEM_LUMA_X0 		VCBUS_REG_ADDR(DI_MEM_LUMA_X0)
+#define DI_MEM_LUMA_Y0 0x17de 	///../ucode/register.h:7572
+#define P_DI_MEM_LUMA_Y0 		VCBUS_REG_ADDR(DI_MEM_LUMA_Y0)
+#define DI_MEM_CHROMA_X0 0x17df 	///../ucode/register.h:7573
+#define P_DI_MEM_CHROMA_X0 		VCBUS_REG_ADDR(DI_MEM_CHROMA_X0)
+#define DI_MEM_CHROMA_Y0 0x17e0 	///../ucode/register.h:7574
+#define P_DI_MEM_CHROMA_Y0 		VCBUS_REG_ADDR(DI_MEM_CHROMA_Y0)
+#define DI_MEM_RPT_LOOP 0x17e1 	///../ucode/register.h:7575
+#define P_DI_MEM_RPT_LOOP 		VCBUS_REG_ADDR(DI_MEM_RPT_LOOP)
+#define DI_MEM_LUMA0_RPT_PAT 0x17e2 	///../ucode/register.h:7576
+#define P_DI_MEM_LUMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_MEM_LUMA0_RPT_PAT)
+#define DI_MEM_CHROMA0_RPT_PAT 0x17e3 	///../ucode/register.h:7577
+#define P_DI_MEM_CHROMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_MEM_CHROMA0_RPT_PAT)
+#define DI_MEM_DUMMY_PIXEL 0x17e4 	///../ucode/register.h:7578
+#define P_DI_MEM_DUMMY_PIXEL 		VCBUS_REG_ADDR(DI_MEM_DUMMY_PIXEL)
+#define DI_MEM_LUMA_FIFO_SIZE 0x17e5 	///../ucode/register.h:7579
+#define P_DI_MEM_LUMA_FIFO_SIZE 		VCBUS_REG_ADDR(DI_MEM_LUMA_FIFO_SIZE)
+#define DI_MEM_RANGE_MAP_Y 0x17bd 	///../ucode/register.h:7580
+#define P_DI_MEM_RANGE_MAP_Y 		VCBUS_REG_ADDR(DI_MEM_RANGE_MAP_Y)
+#define DI_MEM_RANGE_MAP_CB 0x17be 	///../ucode/register.h:7581
+#define P_DI_MEM_RANGE_MAP_CB 		VCBUS_REG_ADDR(DI_MEM_RANGE_MAP_CB)
+#define DI_MEM_RANGE_MAP_CR 0x17bf 	///../ucode/register.h:7582
+#define P_DI_MEM_RANGE_MAP_CR 		VCBUS_REG_ADDR(DI_MEM_RANGE_MAP_CR)
+#define DI_MEM_GEN_REG2 0x1792 	///../ucode/register.h:7583
+#define P_DI_MEM_GEN_REG2 		VCBUS_REG_ADDR(DI_MEM_GEN_REG2)
+#define DI_MEM_FMT_CTRL 0x17e6 	///../ucode/register.h:7584
+#define P_DI_MEM_FMT_CTRL 		VCBUS_REG_ADDR(DI_MEM_FMT_CTRL)
+#define DI_MEM_FMT_W 0x17e7 	///../ucode/register.h:7585
+#define P_DI_MEM_FMT_W 		VCBUS_REG_ADDR(DI_MEM_FMT_W)
+#define DI_IF1_GEN_REG 0x17e8 	///../ucode/register.h:7586
+#define P_DI_IF1_GEN_REG 		VCBUS_REG_ADDR(DI_IF1_GEN_REG)
+#define DI_IF1_CANVAS0 0x17e9 	///../ucode/register.h:7587
+#define P_DI_IF1_CANVAS0 		VCBUS_REG_ADDR(DI_IF1_CANVAS0)
+#define DI_IF1_LUMA_X0 0x17ea 	///../ucode/register.h:7588
+#define P_DI_IF1_LUMA_X0 		VCBUS_REG_ADDR(DI_IF1_LUMA_X0)
+#define DI_IF1_LUMA_Y0 0x17eb 	///../ucode/register.h:7589
+#define P_DI_IF1_LUMA_Y0 		VCBUS_REG_ADDR(DI_IF1_LUMA_Y0)
+#define DI_IF1_CHROMA_X0 0x17ec 	///../ucode/register.h:7590
+#define P_DI_IF1_CHROMA_X0 		VCBUS_REG_ADDR(DI_IF1_CHROMA_X0)
+#define DI_IF1_CHROMA_Y0 0x17ed 	///../ucode/register.h:7591
+#define P_DI_IF1_CHROMA_Y0 		VCBUS_REG_ADDR(DI_IF1_CHROMA_Y0)
+#define DI_IF1_RPT_LOOP 0x17ee 	///../ucode/register.h:7592
+#define P_DI_IF1_RPT_LOOP 		VCBUS_REG_ADDR(DI_IF1_RPT_LOOP)
+#define DI_IF1_LUMA0_RPT_PAT 0x17ef 	///../ucode/register.h:7593
+#define P_DI_IF1_LUMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_IF1_LUMA0_RPT_PAT)
+#define DI_IF1_CHROMA0_RPT_PAT 0x17f0 	///../ucode/register.h:7594
+#define P_DI_IF1_CHROMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_IF1_CHROMA0_RPT_PAT)
+#define DI_IF1_DUMMY_PIXEL 0x17f1 	///../ucode/register.h:7595
+#define P_DI_IF1_DUMMY_PIXEL 		VCBUS_REG_ADDR(DI_IF1_DUMMY_PIXEL)
+#define DI_IF1_LUMA_FIFO_SIZE 0x17f2 	///../ucode/register.h:7596
+#define P_DI_IF1_LUMA_FIFO_SIZE 		VCBUS_REG_ADDR(DI_IF1_LUMA_FIFO_SIZE)
+#define DI_IF1_RANGE_MAP_Y 0x17fc 	///../ucode/register.h:7597
+#define P_DI_IF1_RANGE_MAP_Y 		VCBUS_REG_ADDR(DI_IF1_RANGE_MAP_Y)
+#define DI_IF1_RANGE_MAP_CB 0x17fd 	///../ucode/register.h:7598
+#define P_DI_IF1_RANGE_MAP_CB 		VCBUS_REG_ADDR(DI_IF1_RANGE_MAP_CB)
+#define DI_IF1_RANGE_MAP_CR 0x17fe 	///../ucode/register.h:7599
+#define P_DI_IF1_RANGE_MAP_CR 		VCBUS_REG_ADDR(DI_IF1_RANGE_MAP_CR)
+#define DI_IF1_GEN_REG2 0x1790 	///../ucode/register.h:7600
+#define P_DI_IF1_GEN_REG2 		VCBUS_REG_ADDR(DI_IF1_GEN_REG2)
+#define DI_IF1_FMT_CTRL 0x17f3 	///../ucode/register.h:7601
+#define P_DI_IF1_FMT_CTRL 		VCBUS_REG_ADDR(DI_IF1_FMT_CTRL)
+#define DI_IF1_FMT_W 0x17f4 	///../ucode/register.h:7602
+#define P_DI_IF1_FMT_W 		VCBUS_REG_ADDR(DI_IF1_FMT_W)
+#define DI_CHAN2_GEN_REG 0x17f5 	///../ucode/register.h:7603
+#define P_DI_CHAN2_GEN_REG 		VCBUS_REG_ADDR(DI_CHAN2_GEN_REG)
+#define DI_CHAN2_CANVAS0 0x17f6 	///../ucode/register.h:7604
+#define P_DI_CHAN2_CANVAS0 		VCBUS_REG_ADDR(DI_CHAN2_CANVAS0)
+#define DI_CHAN2_LUMA_X0 0x17f7 	///../ucode/register.h:7605
+#define P_DI_CHAN2_LUMA_X0 		VCBUS_REG_ADDR(DI_CHAN2_LUMA_X0)
+#define DI_CHAN2_LUMA_Y0 0x17f8 	///../ucode/register.h:7606
+#define P_DI_CHAN2_LUMA_Y0 		VCBUS_REG_ADDR(DI_CHAN2_LUMA_Y0)
+#define DI_CHAN2_CHROMA_X0 0x17f9 	///../ucode/register.h:7607
+#define P_DI_CHAN2_CHROMA_X0 		VCBUS_REG_ADDR(DI_CHAN2_CHROMA_X0)
+#define DI_CHAN2_CHROMA_Y0 0x17fa 	///../ucode/register.h:7608
+#define P_DI_CHAN2_CHROMA_Y0 		VCBUS_REG_ADDR(DI_CHAN2_CHROMA_Y0)
+#define DI_CHAN2_RPT_LOOP 0x17fb 	///../ucode/register.h:7609
+#define P_DI_CHAN2_RPT_LOOP 		VCBUS_REG_ADDR(DI_CHAN2_RPT_LOOP)
+#define DI_CHAN2_LUMA0_RPT_PAT 0x17b0 	///../ucode/register.h:7610
+#define P_DI_CHAN2_LUMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_CHAN2_LUMA0_RPT_PAT)
+#define DI_CHAN2_CHROMA0_RPT_PAT 0x17b1 	///../ucode/register.h:7611
+#define P_DI_CHAN2_CHROMA0_RPT_PAT 		VCBUS_REG_ADDR(DI_CHAN2_CHROMA0_RPT_PAT)
+#define DI_CHAN2_DUMMY_PIXEL 0x17b2 	///../ucode/register.h:7612
+#define P_DI_CHAN2_DUMMY_PIXEL 		VCBUS_REG_ADDR(DI_CHAN2_DUMMY_PIXEL)
+#define DI_CHAN2_LUMA_FIFO_SIZE 0x17b3 	///../ucode/register.h:7613
+#define P_DI_CHAN2_LUMA_FIFO_SIZE 		VCBUS_REG_ADDR(DI_CHAN2_LUMA_FIFO_SIZE)
+#define DI_CHAN2_RANGE_MAP_Y 0x17b4 	///../ucode/register.h:7614
+#define P_DI_CHAN2_RANGE_MAP_Y 		VCBUS_REG_ADDR(DI_CHAN2_RANGE_MAP_Y)
+#define DI_CHAN2_RANGE_MAP_CB 0x17b5 	///../ucode/register.h:7615
+#define P_DI_CHAN2_RANGE_MAP_CB 		VCBUS_REG_ADDR(DI_CHAN2_RANGE_MAP_CB)
+#define DI_CHAN2_RANGE_MAP_CR 0x17b6 	///../ucode/register.h:7616
+#define P_DI_CHAN2_RANGE_MAP_CR 		VCBUS_REG_ADDR(DI_CHAN2_RANGE_MAP_CR)
+#define DI_CHAN2_GEN_REG2 0x17b7 	///../ucode/register.h:7617
+#define P_DI_CHAN2_GEN_REG2 		VCBUS_REG_ADDR(DI_CHAN2_GEN_REG2)
+#define DI_CHAN2_FMT_CTRL 0x17b8 	///../ucode/register.h:7618
+#define P_DI_CHAN2_FMT_CTRL 		VCBUS_REG_ADDR(DI_CHAN2_FMT_CTRL)
+#define DI_CHAN2_FMT_W 0x17b9 	///../ucode/register.h:7619
+#define P_DI_CHAN2_FMT_W 		VCBUS_REG_ADDR(DI_CHAN2_FMT_W)
+#define VIU2_ADDR_START 0x1e00 	///../ucode/register.h:7634
+#define P_VIU2_ADDR_START 		VCBUS_REG_ADDR(VIU2_ADDR_START)
+#define VIU2_ADDR_END 0x1eff 	///../ucode/register.h:7635
+#define P_VIU2_ADDR_END 		VCBUS_REG_ADDR(VIU2_ADDR_END)
+#define VIU2_SW_RESET 0x1e01 	///../ucode/register.h:7644
+#define P_VIU2_SW_RESET 		VCBUS_REG_ADDR(VIU2_SW_RESET)
+#define VIU2_OSD1_CTRL_STAT 0x1e10 	///../ucode/register.h:7664
+#define P_VIU2_OSD1_CTRL_STAT 		VCBUS_REG_ADDR(VIU2_OSD1_CTRL_STAT)
+#define VIU2_OSD1_CTRL_STAT2 0x1e2d 	///../ucode/register.h:7673
+#define P_VIU2_OSD1_CTRL_STAT2 		VCBUS_REG_ADDR(VIU2_OSD1_CTRL_STAT2)
+#define VIU2_OSD1_COLOR_ADDR 0x1e11 	///../ucode/register.h:7677
+#define P_VIU2_OSD1_COLOR_ADDR 		VCBUS_REG_ADDR(VIU2_OSD1_COLOR_ADDR)
+#define VIU2_OSD1_COLOR 0x1e12 	///../ucode/register.h:7682
+#define P_VIU2_OSD1_COLOR 		VCBUS_REG_ADDR(VIU2_OSD1_COLOR)
+#define VIU2_OSD1_TCOLOR_AG0 0x1e17 	///../ucode/register.h:7687
+#define P_VIU2_OSD1_TCOLOR_AG0 		VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG0)
+#define VIU2_OSD1_TCOLOR_AG1 0x1e18 	///../ucode/register.h:7688
+#define P_VIU2_OSD1_TCOLOR_AG1 		VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG1)
+#define VIU2_OSD1_TCOLOR_AG2 0x1e19 	///../ucode/register.h:7689
+#define P_VIU2_OSD1_TCOLOR_AG2 		VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG2)
+#define VIU2_OSD1_TCOLOR_AG3 0x1e1a 	///../ucode/register.h:7690
+#define P_VIU2_OSD1_TCOLOR_AG3 		VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG3)
+#define VIU2_OSD1_BLK0_CFG_W0 0x1e1b 	///../ucode/register.h:7707
+#define P_VIU2_OSD1_BLK0_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W0)
+#define VIU2_OSD1_BLK1_CFG_W0 0x1e1f 	///../ucode/register.h:7708
+#define P_VIU2_OSD1_BLK1_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W0)
+#define VIU2_OSD1_BLK2_CFG_W0 0x1e23 	///../ucode/register.h:7709
+#define P_VIU2_OSD1_BLK2_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W0)
+#define VIU2_OSD1_BLK3_CFG_W0 0x1e27 	///../ucode/register.h:7710
+#define P_VIU2_OSD1_BLK3_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W0)
+#define VIU2_OSD1_BLK0_CFG_W1 0x1e1c 	///../ucode/register.h:7715
+#define P_VIU2_OSD1_BLK0_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W1)
+#define VIU2_OSD1_BLK1_CFG_W1 0x1e20 	///../ucode/register.h:7716
+#define P_VIU2_OSD1_BLK1_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W1)
+#define VIU2_OSD1_BLK2_CFG_W1 0x1e24 	///../ucode/register.h:7717
+#define P_VIU2_OSD1_BLK2_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W1)
+#define VIU2_OSD1_BLK3_CFG_W1 0x1e28 	///../ucode/register.h:7718
+#define P_VIU2_OSD1_BLK3_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W1)
+#define VIU2_OSD1_BLK0_CFG_W2 0x1e1d 	///../ucode/register.h:7723
+#define P_VIU2_OSD1_BLK0_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W2)
+#define VIU2_OSD1_BLK1_CFG_W2 0x1e21 	///../ucode/register.h:7724
+#define P_VIU2_OSD1_BLK1_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W2)
+#define VIU2_OSD1_BLK2_CFG_W2 0x1e25 	///../ucode/register.h:7725
+#define P_VIU2_OSD1_BLK2_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W2)
+#define VIU2_OSD1_BLK3_CFG_W2 0x1e29 	///../ucode/register.h:7726
+#define P_VIU2_OSD1_BLK3_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W2)
+#define VIU2_OSD1_BLK0_CFG_W3 0x1e1e 	///../ucode/register.h:7731
+#define P_VIU2_OSD1_BLK0_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W3)
+#define VIU2_OSD1_BLK1_CFG_W3 0x1e22 	///../ucode/register.h:7732
+#define P_VIU2_OSD1_BLK1_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W3)
+#define VIU2_OSD1_BLK2_CFG_W3 0x1e26 	///../ucode/register.h:7733
+#define P_VIU2_OSD1_BLK2_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W3)
+#define VIU2_OSD1_BLK3_CFG_W3 0x1e2a 	///../ucode/register.h:7734
+#define P_VIU2_OSD1_BLK3_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W3)
+#define VIU2_OSD1_BLK0_CFG_W4 0x1e13 	///../ucode/register.h:7739
+#define P_VIU2_OSD1_BLK0_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W4)
+#define VIU2_OSD1_BLK1_CFG_W4 0x1e14 	///../ucode/register.h:7740
+#define P_VIU2_OSD1_BLK1_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W4)
+#define VIU2_OSD1_BLK2_CFG_W4 0x1e15 	///../ucode/register.h:7741
+#define P_VIU2_OSD1_BLK2_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W4)
+#define VIU2_OSD1_BLK3_CFG_W4 0x1e16 	///../ucode/register.h:7742
+#define P_VIU2_OSD1_BLK3_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W4)
+#define VIU2_OSD1_FIFO_CTRL_STAT 0x1e2b 	///../ucode/register.h:7758
+#define P_VIU2_OSD1_FIFO_CTRL_STAT 		VCBUS_REG_ADDR(VIU2_OSD1_FIFO_CTRL_STAT)
+#define VIU2_OSD1_TEST_RDDATA 0x1e2c 	///../ucode/register.h:7763
+#define P_VIU2_OSD1_TEST_RDDATA 		VCBUS_REG_ADDR(VIU2_OSD1_TEST_RDDATA)
+#define VIU2_OSD1_PROT_CTRL 0x1e2e 	///../ucode/register.h:7766
+#define P_VIU2_OSD1_PROT_CTRL 		VCBUS_REG_ADDR(VIU2_OSD1_PROT_CTRL)
+#define VIU2_OSD2_CTRL_STAT 0x1e30 	///../ucode/register.h:7787
+#define P_VIU2_OSD2_CTRL_STAT 		VCBUS_REG_ADDR(VIU2_OSD2_CTRL_STAT)
+#define VIU2_OSD2_CTRL_STAT2 0x1e4d 	///../ucode/register.h:7796
+#define P_VIU2_OSD2_CTRL_STAT2 		VCBUS_REG_ADDR(VIU2_OSD2_CTRL_STAT2)
+#define VIU2_OSD2_COLOR_ADDR 0x1e31 	///../ucode/register.h:7800
+#define P_VIU2_OSD2_COLOR_ADDR 		VCBUS_REG_ADDR(VIU2_OSD2_COLOR_ADDR)
+#define VIU2_OSD2_COLOR 0x1e32 	///../ucode/register.h:7805
+#define P_VIU2_OSD2_COLOR 		VCBUS_REG_ADDR(VIU2_OSD2_COLOR)
+#define VIU2_OSD2_HL1_H_START_END 0x1e33 	///../ucode/register.h:7810
+#define P_VIU2_OSD2_HL1_H_START_END 		VCBUS_REG_ADDR(VIU2_OSD2_HL1_H_START_END)
+#define VIU2_OSD2_HL1_V_START_END 0x1e34 	///../ucode/register.h:7811
+#define P_VIU2_OSD2_HL1_V_START_END 		VCBUS_REG_ADDR(VIU2_OSD2_HL1_V_START_END)
+#define VIU2_OSD2_HL2_H_START_END 0x1e35 	///../ucode/register.h:7812
+#define P_VIU2_OSD2_HL2_H_START_END 		VCBUS_REG_ADDR(VIU2_OSD2_HL2_H_START_END)
+#define VIU2_OSD2_HL2_V_START_END 0x1e36 	///../ucode/register.h:7813
+#define P_VIU2_OSD2_HL2_V_START_END 		VCBUS_REG_ADDR(VIU2_OSD2_HL2_V_START_END)
+#define VIU2_OSD2_TCOLOR_AG0 0x1e37 	///../ucode/register.h:7818
+#define P_VIU2_OSD2_TCOLOR_AG0 		VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG0)
+#define VIU2_OSD2_TCOLOR_AG1 0x1e38 	///../ucode/register.h:7819
+#define P_VIU2_OSD2_TCOLOR_AG1 		VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG1)
+#define VIU2_OSD2_TCOLOR_AG2 0x1e39 	///../ucode/register.h:7820
+#define P_VIU2_OSD2_TCOLOR_AG2 		VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG2)
+#define VIU2_OSD2_TCOLOR_AG3 0x1e3a 	///../ucode/register.h:7821
+#define P_VIU2_OSD2_TCOLOR_AG3 		VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG3)
+#define VIU2_OSD2_BLK0_CFG_W0 0x1e3b 	///../ucode/register.h:7835
+#define P_VIU2_OSD2_BLK0_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W0)
+#define VIU2_OSD2_BLK1_CFG_W0 0x1e3f 	///../ucode/register.h:7836
+#define P_VIU2_OSD2_BLK1_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W0)
+#define VIU2_OSD2_BLK2_CFG_W0 0x1e43 	///../ucode/register.h:7837
+#define P_VIU2_OSD2_BLK2_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W0)
+#define VIU2_OSD2_BLK3_CFG_W0 0x1e47 	///../ucode/register.h:7838
+#define P_VIU2_OSD2_BLK3_CFG_W0 		VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W0)
+#define VIU2_OSD2_BLK0_CFG_W1 0x1e3c 	///../ucode/register.h:7843
+#define P_VIU2_OSD2_BLK0_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W1)
+#define VIU2_OSD2_BLK1_CFG_W1 0x1e40 	///../ucode/register.h:7844
+#define P_VIU2_OSD2_BLK1_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W1)
+#define VIU2_OSD2_BLK2_CFG_W1 0x1e44 	///../ucode/register.h:7845
+#define P_VIU2_OSD2_BLK2_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W1)
+#define VIU2_OSD2_BLK3_CFG_W1 0x1e48 	///../ucode/register.h:7846
+#define P_VIU2_OSD2_BLK3_CFG_W1 		VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W1)
+#define VIU2_OSD2_BLK0_CFG_W2 0x1e3d 	///../ucode/register.h:7851
+#define P_VIU2_OSD2_BLK0_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W2)
+#define VIU2_OSD2_BLK1_CFG_W2 0x1e41 	///../ucode/register.h:7852
+#define P_VIU2_OSD2_BLK1_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W2)
+#define VIU2_OSD2_BLK2_CFG_W2 0x1e45 	///../ucode/register.h:7853
+#define P_VIU2_OSD2_BLK2_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W2)
+#define VIU2_OSD2_BLK3_CFG_W2 0x1e49 	///../ucode/register.h:7854
+#define P_VIU2_OSD2_BLK3_CFG_W2 		VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W2)
+#define VIU2_OSD2_BLK0_CFG_W3 0x1e3e 	///../ucode/register.h:7859
+#define P_VIU2_OSD2_BLK0_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W3)
+#define VIU2_OSD2_BLK1_CFG_W3 0x1e42 	///../ucode/register.h:7860
+#define P_VIU2_OSD2_BLK1_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W3)
+#define VIU2_OSD2_BLK2_CFG_W3 0x1e46 	///../ucode/register.h:7861
+#define P_VIU2_OSD2_BLK2_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W3)
+#define VIU2_OSD2_BLK3_CFG_W3 0x1e4a 	///../ucode/register.h:7862
+#define P_VIU2_OSD2_BLK3_CFG_W3 		VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W3)
+#define VIU2_OSD2_BLK0_CFG_W4 0x1e64 	///../ucode/register.h:7867
+#define P_VIU2_OSD2_BLK0_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W4)
+#define VIU2_OSD2_BLK1_CFG_W4 0x1e65 	///../ucode/register.h:7868
+#define P_VIU2_OSD2_BLK1_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W4)
+#define VIU2_OSD2_BLK2_CFG_W4 0x1e66 	///../ucode/register.h:7869
+#define P_VIU2_OSD2_BLK2_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W4)
+#define VIU2_OSD2_BLK3_CFG_W4 0x1e67 	///../ucode/register.h:7870
+#define P_VIU2_OSD2_BLK3_CFG_W4 		VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W4)
+#define VIU2_OSD2_FIFO_CTRL_STAT 0x1e4b 	///../ucode/register.h:7886
+#define P_VIU2_OSD2_FIFO_CTRL_STAT 		VCBUS_REG_ADDR(VIU2_OSD2_FIFO_CTRL_STAT)
+#define VIU2_OSD2_TEST_RDDATA 0x1e4c 	///../ucode/register.h:7891
+#define P_VIU2_OSD2_TEST_RDDATA 		VCBUS_REG_ADDR(VIU2_OSD2_TEST_RDDATA)
+#define VIU2_OSD2_PROT_CTRL 0x1e4e 	///../ucode/register.h:7894
+#define P_VIU2_OSD2_PROT_CTRL 		VCBUS_REG_ADDR(VIU2_OSD2_PROT_CTRL)
+#define VIU2_VD1_IF0_GEN_REG 0x1e50 	///../ucode/register.h:7898
+#define P_VIU2_VD1_IF0_GEN_REG 		VCBUS_REG_ADDR(VIU2_VD1_IF0_GEN_REG)
+#define VIU2_VD1_IF0_CANVAS0 0x1e51 	///../ucode/register.h:7899
+#define P_VIU2_VD1_IF0_CANVAS0 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CANVAS0)
+#define VIU2_VD1_IF0_CANVAS1 0x1e52 	///../ucode/register.h:7900
+#define P_VIU2_VD1_IF0_CANVAS1 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CANVAS1)
+#define VIU2_VD1_IF0_LUMA_X0 0x1e53 	///../ucode/register.h:7901
+#define P_VIU2_VD1_IF0_LUMA_X0 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_X0)
+#define VIU2_VD1_IF0_LUMA_Y0 0x1e54 	///../ucode/register.h:7902
+#define P_VIU2_VD1_IF0_LUMA_Y0 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_Y0)
+#define VIU2_VD1_IF0_CHROMA_X0 0x1e55 	///../ucode/register.h:7903
+#define P_VIU2_VD1_IF0_CHROMA_X0 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_X0)
+#define VIU2_VD1_IF0_CHROMA_Y0 0x1e56 	///../ucode/register.h:7904
+#define P_VIU2_VD1_IF0_CHROMA_Y0 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_Y0)
+#define VIU2_VD1_IF0_LUMA_X1 0x1e57 	///../ucode/register.h:7905
+#define P_VIU2_VD1_IF0_LUMA_X1 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_X1)
+#define VIU2_VD1_IF0_LUMA_Y1 0x1e58 	///../ucode/register.h:7906
+#define P_VIU2_VD1_IF0_LUMA_Y1 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_Y1)
+#define VIU2_VD1_IF0_CHROMA_X1 0x1e59 	///../ucode/register.h:7907
+#define P_VIU2_VD1_IF0_CHROMA_X1 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_X1)
+#define VIU2_VD1_IF0_CHROMA_Y1 0x1e5a 	///../ucode/register.h:7908
+#define P_VIU2_VD1_IF0_CHROMA_Y1 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_Y1)
+#define VIU2_VD1_IF0_RPT_LOOP 0x1e5b 	///../ucode/register.h:7909
+#define P_VIU2_VD1_IF0_RPT_LOOP 		VCBUS_REG_ADDR(VIU2_VD1_IF0_RPT_LOOP)
+#define VIU2_VD1_IF0_LUMA0_RPT_PAT 0x1e5c 	///../ucode/register.h:7910
+#define P_VIU2_VD1_IF0_LUMA0_RPT_PAT 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA0_RPT_PAT)
+#define VIU2_VD1_IF0_CHROMA0_RPT_PAT 0x1e5d 	///../ucode/register.h:7911
+#define P_VIU2_VD1_IF0_CHROMA0_RPT_PAT 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA0_RPT_PAT)
+#define VIU2_VD1_IF0_LUMA1_RPT_PAT 0x1e5e 	///../ucode/register.h:7912
+#define P_VIU2_VD1_IF0_LUMA1_RPT_PAT 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA1_RPT_PAT)
+#define VIU2_VD1_IF0_CHROMA1_RPT_PAT 0x1e5f 	///../ucode/register.h:7913
+#define P_VIU2_VD1_IF0_CHROMA1_RPT_PAT 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA1_RPT_PAT)
+#define VIU2_VD1_IF0_LUMA_PSEL 0x1e60 	///../ucode/register.h:7914
+#define P_VIU2_VD1_IF0_LUMA_PSEL 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_PSEL)
+#define VIU2_VD1_IF0_CHROMA_PSEL 0x1e61 	///../ucode/register.h:7915
+#define P_VIU2_VD1_IF0_CHROMA_PSEL 		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_PSEL)
+#define VIU2_VD1_IF0_DUMMY_PIXEL 0x1e62 	///../ucode/register.h:7916
+#define P_VIU2_VD1_IF0_DUMMY_PIXEL 		VCBUS_REG_ADDR(VIU2_VD1_IF0_DUMMY_PIXEL)
+#define VIU2_VD1_IF0_LUMA_FIFO_SIZE 0x1e63 	///../ucode/register.h:7917
+#define P_VIU2_VD1_IF0_LUMA_FIFO_SIZE 		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_FIFO_SIZE)
+#define VIU2_VD1_IF0_RANGE_MAP_Y 0x1e6a 	///../ucode/register.h:7918
+#define P_VIU2_VD1_IF0_RANGE_MAP_Y 		VCBUS_REG_ADDR(VIU2_VD1_IF0_RANGE_MAP_Y)
+#define VIU2_VD1_IF0_RANGE_MAP_CB 0x1e6b 	///../ucode/register.h:7919
+#define P_VIU2_VD1_IF0_RANGE_MAP_CB 		VCBUS_REG_ADDR(VIU2_VD1_IF0_RANGE_MAP_CB)
+#define VIU2_VD1_IF0_RANGE_MAP_CR 0x1e6c 	///../ucode/register.h:7920
+#define P_VIU2_VD1_IF0_RANGE_MAP_CR 		VCBUS_REG_ADDR(VIU2_VD1_IF0_RANGE_MAP_CR)
+#define VIU2_VD1_IF0_GEN_REG2 0x1e6d 	///../ucode/register.h:7921
+#define P_VIU2_VD1_IF0_GEN_REG2 		VCBUS_REG_ADDR(VIU2_VD1_IF0_GEN_REG2)
+#define VIU2_VD1_IF0_PROT_CNTL 0x1e6e 	///../ucode/register.h:7922
+#define P_VIU2_VD1_IF0_PROT_CNTL 		VCBUS_REG_ADDR(VIU2_VD1_IF0_PROT_CNTL)
+#define VIU2_VD1_FMT_CTRL 0x1e68 	///../ucode/register.h:7939
+#define P_VIU2_VD1_FMT_CTRL 		VCBUS_REG_ADDR(VIU2_VD1_FMT_CTRL)
+#define VIU2_VD1_FMT_W 0x1e69 	///../ucode/register.h:7942
+#define P_VIU2_VD1_FMT_W 		VCBUS_REG_ADDR(VIU2_VD1_FMT_W)
+#define ENCP_VFIFO2VD_CTL 0x1b58 	///../ucode/register.h:7959
+#define P_ENCP_VFIFO2VD_CTL 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_CTL)
+#define ENCP_VFIFO2VD_PIXEL_START 0x1b59 	///../ucode/register.h:7961
+#define P_ENCP_VFIFO2VD_PIXEL_START 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_PIXEL_START)
+#define ENCP_VFIFO2VD_PIXEL_END 0x1b5a 	///../ucode/register.h:7963
+#define P_ENCP_VFIFO2VD_PIXEL_END 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_PIXEL_END)
+#define ENCP_VFIFO2VD_LINE_TOP_START 0x1b5b 	///../ucode/register.h:7965
+#define P_ENCP_VFIFO2VD_LINE_TOP_START 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_TOP_START)
+#define ENCP_VFIFO2VD_LINE_TOP_END 0x1b5c 	///../ucode/register.h:7967
+#define P_ENCP_VFIFO2VD_LINE_TOP_END 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_TOP_END)
+#define ENCP_VFIFO2VD_LINE_BOT_START 0x1b5d 	///../ucode/register.h:7969
+#define P_ENCP_VFIFO2VD_LINE_BOT_START 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_BOT_START)
+#define ENCP_VFIFO2VD_LINE_BOT_END 0x1b5e 	///../ucode/register.h:7971
+#define P_ENCP_VFIFO2VD_LINE_BOT_END 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_BOT_END)
+#define VENC_SYNC_ROUTE 0x1b60 	///../ucode/register.h:7980
+#define P_VENC_SYNC_ROUTE 		VCBUS_REG_ADDR(VENC_SYNC_ROUTE)
+#define VENC_VIDEO_EXSRC 0x1b61 	///../ucode/register.h:7984
+#define P_VENC_VIDEO_EXSRC 		VCBUS_REG_ADDR(VENC_VIDEO_EXSRC)
+#define VENC_DVI_SETTING 0x1b62 	///../ucode/register.h:7985
+#define P_VENC_DVI_SETTING 		VCBUS_REG_ADDR(VENC_DVI_SETTING)
+#define VENC_C656_CTRL 0x1b63 	///../ucode/register.h:7986
+#define P_VENC_C656_CTRL 		VCBUS_REG_ADDR(VENC_C656_CTRL)
+#define VENC_UPSAMPLE_CTRL0 0x1b64 	///../ucode/register.h:7987
+#define P_VENC_UPSAMPLE_CTRL0 		VCBUS_REG_ADDR(VENC_UPSAMPLE_CTRL0)
+#define VENC_UPSAMPLE_CTRL1 0x1b65 	///../ucode/register.h:7988
+#define P_VENC_UPSAMPLE_CTRL1 		VCBUS_REG_ADDR(VENC_UPSAMPLE_CTRL1)
+#define VENC_UPSAMPLE_CTRL2 0x1b66 	///../ucode/register.h:7989
+#define P_VENC_UPSAMPLE_CTRL2 		VCBUS_REG_ADDR(VENC_UPSAMPLE_CTRL2)
+#define TCON_INVERT_CTL 0x1b67 	///../ucode/register.h:7993
+#define P_TCON_INVERT_CTL 		VCBUS_REG_ADDR(TCON_INVERT_CTL)
+#define VENC_VIDEO_PROG_MODE 0x1b68 	///../ucode/register.h:7994
+#define P_VENC_VIDEO_PROG_MODE 		VCBUS_REG_ADDR(VENC_VIDEO_PROG_MODE)
+#define VENC_ENCI_LINE 0x1b69 	///../ucode/register.h:7996
+#define P_VENC_ENCI_LINE 		VCBUS_REG_ADDR(VENC_ENCI_LINE)
+#define VENC_ENCI_PIXEL 0x1b6a 	///../ucode/register.h:7997
+#define P_VENC_ENCI_PIXEL 		VCBUS_REG_ADDR(VENC_ENCI_PIXEL)
+#define VENC_ENCP_LINE 0x1b6b 	///../ucode/register.h:7998
+#define P_VENC_ENCP_LINE 		VCBUS_REG_ADDR(VENC_ENCP_LINE)
+#define VENC_ENCP_PIXEL 0x1b6c 	///../ucode/register.h:7999
+#define P_VENC_ENCP_PIXEL 		VCBUS_REG_ADDR(VENC_ENCP_PIXEL)
+#define VENC_STATA 0x1b6d 	///../ucode/register.h:8001
+#define P_VENC_STATA 		VCBUS_REG_ADDR(VENC_STATA)
+#define VENC_INTCTRL 0x1b6e 	///../ucode/register.h:8003
+#define P_VENC_INTCTRL 		VCBUS_REG_ADDR(VENC_INTCTRL)
+#define VENC_INTFLAG 0x1b6f 	///../ucode/register.h:8004
+#define P_VENC_INTFLAG 		VCBUS_REG_ADDR(VENC_INTFLAG)
+#define VENC_VIDEO_TST_EN 0x1b70 	///../ucode/register.h:8006
+#define P_VENC_VIDEO_TST_EN 		VCBUS_REG_ADDR(VENC_VIDEO_TST_EN)
+#define VENC_VIDEO_TST_MDSEL 0x1b71 	///../ucode/register.h:8007
+#define P_VENC_VIDEO_TST_MDSEL 		VCBUS_REG_ADDR(VENC_VIDEO_TST_MDSEL)
+#define VENC_VIDEO_TST_Y 0x1b72 	///../ucode/register.h:8008
+#define P_VENC_VIDEO_TST_Y 		VCBUS_REG_ADDR(VENC_VIDEO_TST_Y)
+#define VENC_VIDEO_TST_CB 0x1b73 	///../ucode/register.h:8009
+#define P_VENC_VIDEO_TST_CB 		VCBUS_REG_ADDR(VENC_VIDEO_TST_CB)
+#define VENC_VIDEO_TST_CR 0x1b74 	///../ucode/register.h:8010
+#define P_VENC_VIDEO_TST_CR 		VCBUS_REG_ADDR(VENC_VIDEO_TST_CR)
+#define VENC_VIDEO_TST_CLRBAR_STRT 0x1b75 	///../ucode/register.h:8011
+#define P_VENC_VIDEO_TST_CLRBAR_STRT 		VCBUS_REG_ADDR(VENC_VIDEO_TST_CLRBAR_STRT)
+#define VENC_VIDEO_TST_CLRBAR_WIDTH 0x1b76 	///../ucode/register.h:8012
+#define P_VENC_VIDEO_TST_CLRBAR_WIDTH 		VCBUS_REG_ADDR(VENC_VIDEO_TST_CLRBAR_WIDTH)
+#define VENC_VIDEO_TST_VDCNT_STSET 0x1b77 	///../ucode/register.h:8013
+#define P_VENC_VIDEO_TST_VDCNT_STSET 		VCBUS_REG_ADDR(VENC_VIDEO_TST_VDCNT_STSET)
+#define VENC_VDAC_DACSEL0 0x1b78 	///../ucode/register.h:8015
+#define P_VENC_VDAC_DACSEL0 		VCBUS_REG_ADDR(VENC_VDAC_DACSEL0)
+#define VENC_VDAC_DACSEL1 0x1b79 	///../ucode/register.h:8016
+#define P_VENC_VDAC_DACSEL1 		VCBUS_REG_ADDR(VENC_VDAC_DACSEL1)
+#define VENC_VDAC_DACSEL2 0x1b7a 	///../ucode/register.h:8017
+#define P_VENC_VDAC_DACSEL2 		VCBUS_REG_ADDR(VENC_VDAC_DACSEL2)
+#define VENC_VDAC_DACSEL3 0x1b7b 	///../ucode/register.h:8018
+#define P_VENC_VDAC_DACSEL3 		VCBUS_REG_ADDR(VENC_VDAC_DACSEL3)
+#define VENC_VDAC_DACSEL4 0x1b7c 	///../ucode/register.h:8019
+#define P_VENC_VDAC_DACSEL4 		VCBUS_REG_ADDR(VENC_VDAC_DACSEL4)
+#define VENC_VDAC_DACSEL5 0x1b7d 	///../ucode/register.h:8020
+#define P_VENC_VDAC_DACSEL5 		VCBUS_REG_ADDR(VENC_VDAC_DACSEL5)
+#define VENC_VDAC_SETTING 0x1b7e 	///../ucode/register.h:8021
+#define P_VENC_VDAC_SETTING 		VCBUS_REG_ADDR(VENC_VDAC_SETTING)
+#define VENC_VDAC_TST_VAL 0x1b7f 	///../ucode/register.h:8022
+#define P_VENC_VDAC_TST_VAL 		VCBUS_REG_ADDR(VENC_VDAC_TST_VAL)
+#define VENC_VDAC_DAC0_GAINCTRL 0x1bf0 	///../ucode/register.h:8023
+#define P_VENC_VDAC_DAC0_GAINCTRL 		VCBUS_REG_ADDR(VENC_VDAC_DAC0_GAINCTRL)
+#define VENC_VDAC_DAC0_OFFSET 0x1bf1 	///../ucode/register.h:8024
+#define P_VENC_VDAC_DAC0_OFFSET 		VCBUS_REG_ADDR(VENC_VDAC_DAC0_OFFSET)
+#define VENC_VDAC_DAC1_GAINCTRL 0x1bf2 	///../ucode/register.h:8025
+#define P_VENC_VDAC_DAC1_GAINCTRL 		VCBUS_REG_ADDR(VENC_VDAC_DAC1_GAINCTRL)
+#define VENC_VDAC_DAC1_OFFSET 0x1bf3 	///../ucode/register.h:8026
+#define P_VENC_VDAC_DAC1_OFFSET 		VCBUS_REG_ADDR(VENC_VDAC_DAC1_OFFSET)
+#define VENC_VDAC_DAC2_GAINCTRL 0x1bf4 	///../ucode/register.h:8027
+#define P_VENC_VDAC_DAC2_GAINCTRL 		VCBUS_REG_ADDR(VENC_VDAC_DAC2_GAINCTRL)
+#define VENC_VDAC_DAC2_OFFSET 0x1bf5 	///../ucode/register.h:8028
+#define P_VENC_VDAC_DAC2_OFFSET 		VCBUS_REG_ADDR(VENC_VDAC_DAC2_OFFSET)
+#define VENC_VDAC_DAC3_GAINCTRL 0x1bf6 	///../ucode/register.h:8029
+#define P_VENC_VDAC_DAC3_GAINCTRL 		VCBUS_REG_ADDR(VENC_VDAC_DAC3_GAINCTRL)
+#define VENC_VDAC_DAC3_OFFSET 0x1bf7 	///../ucode/register.h:8030
+#define P_VENC_VDAC_DAC3_OFFSET 		VCBUS_REG_ADDR(VENC_VDAC_DAC3_OFFSET)
+#define VENC_VDAC_DAC4_GAINCTRL 0x1bf8 	///../ucode/register.h:8031
+#define P_VENC_VDAC_DAC4_GAINCTRL 		VCBUS_REG_ADDR(VENC_VDAC_DAC4_GAINCTRL)
+#define VENC_VDAC_DAC4_OFFSET 0x1bf9 	///../ucode/register.h:8032
+#define P_VENC_VDAC_DAC4_OFFSET 		VCBUS_REG_ADDR(VENC_VDAC_DAC4_OFFSET)
+#define VENC_VDAC_DAC5_GAINCTRL 0x1bfa 	///../ucode/register.h:8033
+#define P_VENC_VDAC_DAC5_GAINCTRL 		VCBUS_REG_ADDR(VENC_VDAC_DAC5_GAINCTRL)
+#define VENC_VDAC_DAC5_OFFSET 0x1bfb 	///../ucode/register.h:8034
+#define P_VENC_VDAC_DAC5_OFFSET 		VCBUS_REG_ADDR(VENC_VDAC_DAC5_OFFSET)
+#define VENC_VDAC_FIFO_CTRL 0x1bfc 	///../ucode/register.h:8035
+#define P_VENC_VDAC_FIFO_CTRL 		VCBUS_REG_ADDR(VENC_VDAC_FIFO_CTRL)
+#define ENCL_TCON_INVERT_CTL 0x1bfd 	///../ucode/register.h:8036
+#define P_ENCL_TCON_INVERT_CTL 		VCBUS_REG_ADDR(ENCL_TCON_INVERT_CTL)
+#define ENCP_VIDEO_EN 0x1b80 	///../ucode/register.h:8049
+#define P_ENCP_VIDEO_EN 		VCBUS_REG_ADDR(ENCP_VIDEO_EN)
+#define ENCP_VIDEO_SYNC_MODE 0x1b81 	///../ucode/register.h:8050
+#define P_ENCP_VIDEO_SYNC_MODE 		VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_MODE)
+#define ENCP_MACV_EN 0x1b82 	///../ucode/register.h:8051
+#define P_ENCP_MACV_EN 		VCBUS_REG_ADDR(ENCP_MACV_EN)
+#define ENCP_VIDEO_Y_SCL 0x1b83 	///../ucode/register.h:8052
+#define P_ENCP_VIDEO_Y_SCL 		VCBUS_REG_ADDR(ENCP_VIDEO_Y_SCL)
+#define ENCP_VIDEO_PB_SCL 0x1b84 	///../ucode/register.h:8053
+#define P_ENCP_VIDEO_PB_SCL 		VCBUS_REG_ADDR(ENCP_VIDEO_PB_SCL)
+#define ENCP_VIDEO_PR_SCL 0x1b85 	///../ucode/register.h:8054
+#define P_ENCP_VIDEO_PR_SCL 		VCBUS_REG_ADDR(ENCP_VIDEO_PR_SCL)
+#define ENCP_VIDEO_SYNC_SCL 0x1b86 	///../ucode/register.h:8055
+#define P_ENCP_VIDEO_SYNC_SCL 		VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_SCL)
+#define ENCP_VIDEO_MACV_SCL 0x1b87 	///../ucode/register.h:8056
+#define P_ENCP_VIDEO_MACV_SCL 		VCBUS_REG_ADDR(ENCP_VIDEO_MACV_SCL)
+#define ENCP_VIDEO_Y_OFFST 0x1b88 	///../ucode/register.h:8057
+#define P_ENCP_VIDEO_Y_OFFST 		VCBUS_REG_ADDR(ENCP_VIDEO_Y_OFFST)
+#define ENCP_VIDEO_PB_OFFST 0x1b89 	///../ucode/register.h:8058
+#define P_ENCP_VIDEO_PB_OFFST 		VCBUS_REG_ADDR(ENCP_VIDEO_PB_OFFST)
+#define ENCP_VIDEO_PR_OFFST 0x1b8a 	///../ucode/register.h:8059
+#define P_ENCP_VIDEO_PR_OFFST 		VCBUS_REG_ADDR(ENCP_VIDEO_PR_OFFST)
+#define ENCP_VIDEO_SYNC_OFFST 0x1b8b 	///../ucode/register.h:8060
+#define P_ENCP_VIDEO_SYNC_OFFST 		VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_OFFST)
+#define ENCP_VIDEO_MACV_OFFST 0x1b8c 	///../ucode/register.h:8061
+#define P_ENCP_VIDEO_MACV_OFFST 		VCBUS_REG_ADDR(ENCP_VIDEO_MACV_OFFST)
+#define ENCP_VIDEO_MODE 0x1b8d 	///../ucode/register.h:8063
+#define P_ENCP_VIDEO_MODE 		VCBUS_REG_ADDR(ENCP_VIDEO_MODE)
+#define ENCP_VIDEO_MODE_ADV 0x1b8e 	///../ucode/register.h:8064
+#define P_ENCP_VIDEO_MODE_ADV 		VCBUS_REG_ADDR(ENCP_VIDEO_MODE_ADV)
+#define ENCP_DBG_PX_RST 0x1b90 	///../ucode/register.h:8066
+#define P_ENCP_DBG_PX_RST 		VCBUS_REG_ADDR(ENCP_DBG_PX_RST)
+#define ENCP_DBG_LN_RST 0x1b91 	///../ucode/register.h:8067
+#define P_ENCP_DBG_LN_RST 		VCBUS_REG_ADDR(ENCP_DBG_LN_RST)
+#define ENCP_DBG_PX_INT 0x1b92 	///../ucode/register.h:8068
+#define P_ENCP_DBG_PX_INT 		VCBUS_REG_ADDR(ENCP_DBG_PX_INT)
+#define ENCP_DBG_LN_INT 0x1b93 	///../ucode/register.h:8069
+#define P_ENCP_DBG_LN_INT 		VCBUS_REG_ADDR(ENCP_DBG_LN_INT)
+#define ENCP_VIDEO_YFP1_HTIME 0x1b94 	///../ucode/register.h:8071
+#define P_ENCP_VIDEO_YFP1_HTIME 		VCBUS_REG_ADDR(ENCP_VIDEO_YFP1_HTIME)
+#define ENCP_VIDEO_YFP2_HTIME 0x1b95 	///../ucode/register.h:8072
+#define P_ENCP_VIDEO_YFP2_HTIME 		VCBUS_REG_ADDR(ENCP_VIDEO_YFP2_HTIME)
+#define ENCP_VIDEO_YC_DLY 0x1b96 	///../ucode/register.h:8073
+#define P_ENCP_VIDEO_YC_DLY 		VCBUS_REG_ADDR(ENCP_VIDEO_YC_DLY)
+#define ENCP_VIDEO_MAX_PXCNT 0x1b97 	///../ucode/register.h:8074
+#define P_ENCP_VIDEO_MAX_PXCNT 		VCBUS_REG_ADDR(ENCP_VIDEO_MAX_PXCNT)
+#define ENCP_VIDEO_HSPULS_BEGIN 0x1b98 	///../ucode/register.h:8075
+#define P_ENCP_VIDEO_HSPULS_BEGIN 		VCBUS_REG_ADDR(ENCP_VIDEO_HSPULS_BEGIN)
+#define ENCP_VIDEO_HSPULS_END 0x1b99 	///../ucode/register.h:8076
+#define P_ENCP_VIDEO_HSPULS_END 		VCBUS_REG_ADDR(ENCP_VIDEO_HSPULS_END)
+#define ENCP_VIDEO_HSPULS_SWITCH 0x1b9a 	///../ucode/register.h:8077
+#define P_ENCP_VIDEO_HSPULS_SWITCH 		VCBUS_REG_ADDR(ENCP_VIDEO_HSPULS_SWITCH)
+#define ENCP_VIDEO_VSPULS_BEGIN 0x1b9b 	///../ucode/register.h:8078
+#define P_ENCP_VIDEO_VSPULS_BEGIN 		VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_BEGIN)
+#define ENCP_VIDEO_VSPULS_END 0x1b9c 	///../ucode/register.h:8079
+#define P_ENCP_VIDEO_VSPULS_END 		VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_END)
+#define ENCP_VIDEO_VSPULS_BLINE 0x1b9d 	///../ucode/register.h:8080
+#define P_ENCP_VIDEO_VSPULS_BLINE 		VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_BLINE)
+#define ENCP_VIDEO_VSPULS_ELINE 0x1b9e 	///../ucode/register.h:8081
+#define P_ENCP_VIDEO_VSPULS_ELINE 		VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_ELINE)
+#define ENCP_VIDEO_EQPULS_BEGIN 0x1b9f 	///../ucode/register.h:8082
+#define P_ENCP_VIDEO_EQPULS_BEGIN 		VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_BEGIN)
+#define ENCP_VIDEO_EQPULS_END 0x1ba0 	///../ucode/register.h:8083
+#define P_ENCP_VIDEO_EQPULS_END 		VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_END)
+#define ENCP_VIDEO_EQPULS_BLINE 0x1ba1 	///../ucode/register.h:8084
+#define P_ENCP_VIDEO_EQPULS_BLINE 		VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_BLINE)
+#define ENCP_VIDEO_EQPULS_ELINE 0x1ba2 	///../ucode/register.h:8085
+#define P_ENCP_VIDEO_EQPULS_ELINE 		VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_ELINE)
+#define ENCP_VIDEO_HAVON_END 0x1ba3 	///../ucode/register.h:8086
+#define P_ENCP_VIDEO_HAVON_END 		VCBUS_REG_ADDR(ENCP_VIDEO_HAVON_END)
+#define ENCP_VIDEO_HAVON_BEGIN 0x1ba4 	///../ucode/register.h:8087
+#define P_ENCP_VIDEO_HAVON_BEGIN 		VCBUS_REG_ADDR(ENCP_VIDEO_HAVON_BEGIN)
+#define ENCP_VIDEO_VAVON_ELINE 0x1baf 	///../ucode/register.h:8088
+#define P_ENCP_VIDEO_VAVON_ELINE 		VCBUS_REG_ADDR(ENCP_VIDEO_VAVON_ELINE)
+#define ENCP_VIDEO_VAVON_BLINE 0x1ba6 	///../ucode/register.h:8089
+#define P_ENCP_VIDEO_VAVON_BLINE 		VCBUS_REG_ADDR(ENCP_VIDEO_VAVON_BLINE)
+#define ENCP_VIDEO_HSO_BEGIN 0x1ba7 	///../ucode/register.h:8090
+#define P_ENCP_VIDEO_HSO_BEGIN 		VCBUS_REG_ADDR(ENCP_VIDEO_HSO_BEGIN)
+#define ENCP_VIDEO_HSO_END 0x1ba8 	///../ucode/register.h:8091
+#define P_ENCP_VIDEO_HSO_END 		VCBUS_REG_ADDR(ENCP_VIDEO_HSO_END)
+#define ENCP_VIDEO_VSO_BEGIN 0x1ba9 	///../ucode/register.h:8092
+#define P_ENCP_VIDEO_VSO_BEGIN 		VCBUS_REG_ADDR(ENCP_VIDEO_VSO_BEGIN)
+#define ENCP_VIDEO_VSO_END 0x1baa 	///../ucode/register.h:8093
+#define P_ENCP_VIDEO_VSO_END 		VCBUS_REG_ADDR(ENCP_VIDEO_VSO_END)
+#define ENCP_VIDEO_VSO_BLINE 0x1bab 	///../ucode/register.h:8094
+#define P_ENCP_VIDEO_VSO_BLINE 		VCBUS_REG_ADDR(ENCP_VIDEO_VSO_BLINE)
+#define ENCP_VIDEO_VSO_ELINE 0x1bac 	///../ucode/register.h:8095
+#define P_ENCP_VIDEO_VSO_ELINE 		VCBUS_REG_ADDR(ENCP_VIDEO_VSO_ELINE)
+#define ENCP_VIDEO_SYNC_WAVE_CURVE 0x1bad 	///../ucode/register.h:8096
+#define P_ENCP_VIDEO_SYNC_WAVE_CURVE 		VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_WAVE_CURVE)
+#define ENCP_VIDEO_MAX_LNCNT 0x1bae 	///../ucode/register.h:8097
+#define P_ENCP_VIDEO_MAX_LNCNT 		VCBUS_REG_ADDR(ENCP_VIDEO_MAX_LNCNT)
+#define ENCP_VIDEO_SY_VAL 0x1bb0 	///../ucode/register.h:8098
+#define P_ENCP_VIDEO_SY_VAL 		VCBUS_REG_ADDR(ENCP_VIDEO_SY_VAL)
+#define ENCP_VIDEO_SY2_VAL 0x1bb1 	///../ucode/register.h:8099
+#define P_ENCP_VIDEO_SY2_VAL 		VCBUS_REG_ADDR(ENCP_VIDEO_SY2_VAL)
+#define ENCP_VIDEO_BLANKY_VAL 0x1bb2 	///../ucode/register.h:8100
+#define P_ENCP_VIDEO_BLANKY_VAL 		VCBUS_REG_ADDR(ENCP_VIDEO_BLANKY_VAL)
+#define ENCP_VIDEO_BLANKPB_VAL 0x1bb3 	///../ucode/register.h:8101
+#define P_ENCP_VIDEO_BLANKPB_VAL 		VCBUS_REG_ADDR(ENCP_VIDEO_BLANKPB_VAL)
+#define ENCP_VIDEO_BLANKPR_VAL 0x1bb4 	///../ucode/register.h:8102
+#define P_ENCP_VIDEO_BLANKPR_VAL 		VCBUS_REG_ADDR(ENCP_VIDEO_BLANKPR_VAL)
+#define ENCP_VIDEO_HOFFST 0x1bb5 	///../ucode/register.h:8103
+#define P_ENCP_VIDEO_HOFFST 		VCBUS_REG_ADDR(ENCP_VIDEO_HOFFST)
+#define ENCP_VIDEO_VOFFST 0x1bb6 	///../ucode/register.h:8104
+#define P_ENCP_VIDEO_VOFFST 		VCBUS_REG_ADDR(ENCP_VIDEO_VOFFST)
+#define ENCP_VIDEO_RGB_CTRL 0x1bb7 	///../ucode/register.h:8105
+#define P_ENCP_VIDEO_RGB_CTRL 		VCBUS_REG_ADDR(ENCP_VIDEO_RGB_CTRL)
+#define ENCP_VIDEO_FILT_CTRL 0x1bb8 	///../ucode/register.h:8106
+#define P_ENCP_VIDEO_FILT_CTRL 		VCBUS_REG_ADDR(ENCP_VIDEO_FILT_CTRL)
+#define ENCP_VIDEO_OFLD_VPEQ_OFST 0x1bb9 	///../ucode/register.h:8107
+#define P_ENCP_VIDEO_OFLD_VPEQ_OFST 		VCBUS_REG_ADDR(ENCP_VIDEO_OFLD_VPEQ_OFST)
+#define ENCP_VIDEO_OFLD_VOAV_OFST 0x1bba 	///../ucode/register.h:8108
+#define P_ENCP_VIDEO_OFLD_VOAV_OFST 		VCBUS_REG_ADDR(ENCP_VIDEO_OFLD_VOAV_OFST)
+#define ENCP_VIDEO_MATRIX_CB 0x1bbb 	///../ucode/register.h:8109
+#define P_ENCP_VIDEO_MATRIX_CB 		VCBUS_REG_ADDR(ENCP_VIDEO_MATRIX_CB)
+#define ENCP_VIDEO_MATRIX_CR 0x1bbc 	///../ucode/register.h:8110
+#define P_ENCP_VIDEO_MATRIX_CR 		VCBUS_REG_ADDR(ENCP_VIDEO_MATRIX_CR)
+#define ENCP_VIDEO_RGBIN_CTRL 0x1bbd 	///../ucode/register.h:8111
+#define P_ENCP_VIDEO_RGBIN_CTRL 		VCBUS_REG_ADDR(ENCP_VIDEO_RGBIN_CTRL)
+#define ENCP_MACV_BLANKY_VAL 0x1bc0 	///../ucode/register.h:8113
+#define P_ENCP_MACV_BLANKY_VAL 		VCBUS_REG_ADDR(ENCP_MACV_BLANKY_VAL)
+#define ENCP_MACV_MAXY_VAL 0x1bc1 	///../ucode/register.h:8114
+#define P_ENCP_MACV_MAXY_VAL 		VCBUS_REG_ADDR(ENCP_MACV_MAXY_VAL)
+#define ENCP_MACV_1ST_PSSYNC_STRT 0x1bc2 	///../ucode/register.h:8115
+#define P_ENCP_MACV_1ST_PSSYNC_STRT 		VCBUS_REG_ADDR(ENCP_MACV_1ST_PSSYNC_STRT)
+#define ENCP_MACV_PSSYNC_STRT 0x1bc3 	///../ucode/register.h:8116
+#define P_ENCP_MACV_PSSYNC_STRT 		VCBUS_REG_ADDR(ENCP_MACV_PSSYNC_STRT)
+#define ENCP_MACV_AGC_STRT 0x1bc4 	///../ucode/register.h:8117
+#define P_ENCP_MACV_AGC_STRT 		VCBUS_REG_ADDR(ENCP_MACV_AGC_STRT)
+#define ENCP_MACV_AGC_END 0x1bc5 	///../ucode/register.h:8118
+#define P_ENCP_MACV_AGC_END 		VCBUS_REG_ADDR(ENCP_MACV_AGC_END)
+#define ENCP_MACV_WAVE_END 0x1bc6 	///../ucode/register.h:8119
+#define P_ENCP_MACV_WAVE_END 		VCBUS_REG_ADDR(ENCP_MACV_WAVE_END)
+#define ENCP_MACV_STRTLINE 0x1bc7 	///../ucode/register.h:8120
+#define P_ENCP_MACV_STRTLINE 		VCBUS_REG_ADDR(ENCP_MACV_STRTLINE)
+#define ENCP_MACV_ENDLINE 0x1bc8 	///../ucode/register.h:8121
+#define P_ENCP_MACV_ENDLINE 		VCBUS_REG_ADDR(ENCP_MACV_ENDLINE)
+#define ENCP_MACV_TS_CNT_MAX_L 0x1bc9 	///../ucode/register.h:8122
+#define P_ENCP_MACV_TS_CNT_MAX_L 		VCBUS_REG_ADDR(ENCP_MACV_TS_CNT_MAX_L)
+#define ENCP_MACV_TS_CNT_MAX_H 0x1bca 	///../ucode/register.h:8123
+#define P_ENCP_MACV_TS_CNT_MAX_H 		VCBUS_REG_ADDR(ENCP_MACV_TS_CNT_MAX_H)
+#define ENCP_MACV_TIME_DOWN 0x1bcb 	///../ucode/register.h:8124
+#define P_ENCP_MACV_TIME_DOWN 		VCBUS_REG_ADDR(ENCP_MACV_TIME_DOWN)
+#define ENCP_MACV_TIME_LO 0x1bcc 	///../ucode/register.h:8125
+#define P_ENCP_MACV_TIME_LO 		VCBUS_REG_ADDR(ENCP_MACV_TIME_LO)
+#define ENCP_MACV_TIME_UP 0x1bcd 	///../ucode/register.h:8126
+#define P_ENCP_MACV_TIME_UP 		VCBUS_REG_ADDR(ENCP_MACV_TIME_UP)
+#define ENCP_MACV_TIME_RST 0x1bce 	///../ucode/register.h:8127
+#define P_ENCP_MACV_TIME_RST 		VCBUS_REG_ADDR(ENCP_MACV_TIME_RST)
+#define ENCP_VBI_CTRL 0x1bd0 	///../ucode/register.h:8129
+#define P_ENCP_VBI_CTRL 		VCBUS_REG_ADDR(ENCP_VBI_CTRL)
+#define ENCP_VBI_SETTING 0x1bd1 	///../ucode/register.h:8130
+#define P_ENCP_VBI_SETTING 		VCBUS_REG_ADDR(ENCP_VBI_SETTING)
+#define ENCP_VBI_BEGIN 0x1bd2 	///../ucode/register.h:8131
+#define P_ENCP_VBI_BEGIN 		VCBUS_REG_ADDR(ENCP_VBI_BEGIN)
+#define ENCP_VBI_WIDTH 0x1bd3 	///../ucode/register.h:8132
+#define P_ENCP_VBI_WIDTH 		VCBUS_REG_ADDR(ENCP_VBI_WIDTH)
+#define ENCP_VBI_HVAL 0x1bd4 	///../ucode/register.h:8133
+#define P_ENCP_VBI_HVAL 		VCBUS_REG_ADDR(ENCP_VBI_HVAL)
+#define ENCP_VBI_DATA0 0x1bd5 	///../ucode/register.h:8134
+#define P_ENCP_VBI_DATA0 		VCBUS_REG_ADDR(ENCP_VBI_DATA0)
+#define ENCP_VBI_DATA1 0x1bd6 	///../ucode/register.h:8135
+#define P_ENCP_VBI_DATA1 		VCBUS_REG_ADDR(ENCP_VBI_DATA1)
+#define C656_HS_ST 0x1be0 	///../ucode/register.h:8137
+#define P_C656_HS_ST 		VCBUS_REG_ADDR(C656_HS_ST)
+#define C656_HS_ED 0x1be1 	///../ucode/register.h:8138
+#define P_C656_HS_ED 		VCBUS_REG_ADDR(C656_HS_ED)
+#define C656_VS_LNST_E 0x1be2 	///../ucode/register.h:8139
+#define P_C656_VS_LNST_E 		VCBUS_REG_ADDR(C656_VS_LNST_E)
+#define C656_VS_LNST_O 0x1be3 	///../ucode/register.h:8140
+#define P_C656_VS_LNST_O 		VCBUS_REG_ADDR(C656_VS_LNST_O)
+#define C656_VS_LNED_E 0x1be4 	///../ucode/register.h:8141
+#define P_C656_VS_LNED_E 		VCBUS_REG_ADDR(C656_VS_LNED_E)
+#define C656_VS_LNED_O 0x1be5 	///../ucode/register.h:8142
+#define P_C656_VS_LNED_O 		VCBUS_REG_ADDR(C656_VS_LNED_O)
+#define C656_FS_LNST 0x1be6 	///../ucode/register.h:8143
+#define P_C656_FS_LNST 		VCBUS_REG_ADDR(C656_FS_LNST)
+#define C656_FS_LNED 0x1be7 	///../ucode/register.h:8144
+#define P_C656_FS_LNED 		VCBUS_REG_ADDR(C656_FS_LNED)
+#define ENCI_VIDEO_MODE 0x1b00 	///../ucode/register.h:8156
+#define P_ENCI_VIDEO_MODE 		VCBUS_REG_ADDR(ENCI_VIDEO_MODE)
+#define ENCI_VIDEO_MODE_ADV 0x1b01 	///../ucode/register.h:8157
+#define P_ENCI_VIDEO_MODE_ADV 		VCBUS_REG_ADDR(ENCI_VIDEO_MODE_ADV)
+#define ENCI_VIDEO_FSC_ADJ 0x1b02 	///../ucode/register.h:8158
+#define P_ENCI_VIDEO_FSC_ADJ 		VCBUS_REG_ADDR(ENCI_VIDEO_FSC_ADJ)
+#define ENCI_VIDEO_BRIGHT 0x1b03 	///../ucode/register.h:8159
+#define P_ENCI_VIDEO_BRIGHT 		VCBUS_REG_ADDR(ENCI_VIDEO_BRIGHT)
+#define ENCI_VIDEO_CONT 0x1b04 	///../ucode/register.h:8160
+#define P_ENCI_VIDEO_CONT 		VCBUS_REG_ADDR(ENCI_VIDEO_CONT)
+#define ENCI_VIDEO_SAT 0x1b05 	///../ucode/register.h:8161
+#define P_ENCI_VIDEO_SAT 		VCBUS_REG_ADDR(ENCI_VIDEO_SAT)
+#define ENCI_VIDEO_HUE 0x1b06 	///../ucode/register.h:8162
+#define P_ENCI_VIDEO_HUE 		VCBUS_REG_ADDR(ENCI_VIDEO_HUE)
+#define ENCI_VIDEO_SCH 0x1b07 	///../ucode/register.h:8163
+#define P_ENCI_VIDEO_SCH 		VCBUS_REG_ADDR(ENCI_VIDEO_SCH)
+#define ENCI_SYNC_MODE 0x1b08 	///../ucode/register.h:8164
+#define P_ENCI_SYNC_MODE 		VCBUS_REG_ADDR(ENCI_SYNC_MODE)
+#define ENCI_SYNC_CTRL 0x1b09 	///../ucode/register.h:8165
+#define P_ENCI_SYNC_CTRL 		VCBUS_REG_ADDR(ENCI_SYNC_CTRL)
+#define ENCI_SYNC_HSO_BEGIN 0x1b0a 	///../ucode/register.h:8166
+#define P_ENCI_SYNC_HSO_BEGIN 		VCBUS_REG_ADDR(ENCI_SYNC_HSO_BEGIN)
+#define ENCI_SYNC_HSO_END 0x1b0b 	///../ucode/register.h:8167
+#define P_ENCI_SYNC_HSO_END 		VCBUS_REG_ADDR(ENCI_SYNC_HSO_END)
+#define ENCI_SYNC_VSO_EVN 0x1b0c 	///../ucode/register.h:8168
+#define P_ENCI_SYNC_VSO_EVN 		VCBUS_REG_ADDR(ENCI_SYNC_VSO_EVN)
+#define ENCI_SYNC_VSO_ODD 0x1b0d 	///../ucode/register.h:8169
+#define P_ENCI_SYNC_VSO_ODD 		VCBUS_REG_ADDR(ENCI_SYNC_VSO_ODD)
+#define ENCI_SYNC_VSO_EVNLN 0x1b0e 	///../ucode/register.h:8170
+#define P_ENCI_SYNC_VSO_EVNLN 		VCBUS_REG_ADDR(ENCI_SYNC_VSO_EVNLN)
+#define ENCI_SYNC_VSO_ODDLN 0x1b0f 	///../ucode/register.h:8171
+#define P_ENCI_SYNC_VSO_ODDLN 		VCBUS_REG_ADDR(ENCI_SYNC_VSO_ODDLN)
+#define ENCI_SYNC_HOFFST 0x1b10 	///../ucode/register.h:8172
+#define P_ENCI_SYNC_HOFFST 		VCBUS_REG_ADDR(ENCI_SYNC_HOFFST)
+#define ENCI_SYNC_VOFFST 0x1b11 	///../ucode/register.h:8173
+#define P_ENCI_SYNC_VOFFST 		VCBUS_REG_ADDR(ENCI_SYNC_VOFFST)
+#define ENCI_SYNC_ADJ 0x1b12 	///../ucode/register.h:8174
+#define P_ENCI_SYNC_ADJ 		VCBUS_REG_ADDR(ENCI_SYNC_ADJ)
+#define ENCI_RGB_SETTING 0x1b13 	///../ucode/register.h:8175
+#define P_ENCI_RGB_SETTING 		VCBUS_REG_ADDR(ENCI_RGB_SETTING)
+#define ENCI_DE_H_BEGIN 0x1b16 	///../ucode/register.h:8178
+#define P_ENCI_DE_H_BEGIN 		VCBUS_REG_ADDR(ENCI_DE_H_BEGIN)
+#define ENCI_DE_H_END 0x1b17 	///../ucode/register.h:8179
+#define P_ENCI_DE_H_END 		VCBUS_REG_ADDR(ENCI_DE_H_END)
+#define ENCI_DE_V_BEGIN_EVEN 0x1b18 	///../ucode/register.h:8180
+#define P_ENCI_DE_V_BEGIN_EVEN 		VCBUS_REG_ADDR(ENCI_DE_V_BEGIN_EVEN)
+#define ENCI_DE_V_END_EVEN 0x1b19 	///../ucode/register.h:8181
+#define P_ENCI_DE_V_END_EVEN 		VCBUS_REG_ADDR(ENCI_DE_V_END_EVEN)
+#define ENCI_DE_V_BEGIN_ODD 0x1b1a 	///../ucode/register.h:8182
+#define P_ENCI_DE_V_BEGIN_ODD 		VCBUS_REG_ADDR(ENCI_DE_V_BEGIN_ODD)
+#define ENCI_DE_V_END_ODD 0x1b1b 	///../ucode/register.h:8183
+#define P_ENCI_DE_V_END_ODD 		VCBUS_REG_ADDR(ENCI_DE_V_END_ODD)
+#define ENCI_VBI_SETTING 0x1b20 	///../ucode/register.h:8184
+#define P_ENCI_VBI_SETTING 		VCBUS_REG_ADDR(ENCI_VBI_SETTING)
+#define ENCI_VBI_CCDT_EVN 0x1b21 	///../ucode/register.h:8185
+#define P_ENCI_VBI_CCDT_EVN 		VCBUS_REG_ADDR(ENCI_VBI_CCDT_EVN)
+#define ENCI_VBI_CCDT_ODD 0x1b22 	///../ucode/register.h:8186
+#define P_ENCI_VBI_CCDT_ODD 		VCBUS_REG_ADDR(ENCI_VBI_CCDT_ODD)
+#define ENCI_VBI_CC525_LN 0x1b23 	///../ucode/register.h:8187
+#define P_ENCI_VBI_CC525_LN 		VCBUS_REG_ADDR(ENCI_VBI_CC525_LN)
+#define ENCI_VBI_CC625_LN 0x1b24 	///../ucode/register.h:8188
+#define P_ENCI_VBI_CC625_LN 		VCBUS_REG_ADDR(ENCI_VBI_CC625_LN)
+#define ENCI_VBI_WSSDT 0x1b25 	///../ucode/register.h:8189
+#define P_ENCI_VBI_WSSDT 		VCBUS_REG_ADDR(ENCI_VBI_WSSDT)
+#define ENCI_VBI_WSS_LN 0x1b26 	///../ucode/register.h:8190
+#define P_ENCI_VBI_WSS_LN 		VCBUS_REG_ADDR(ENCI_VBI_WSS_LN)
+#define ENCI_VBI_CGMSDT_L 0x1b27 	///../ucode/register.h:8191
+#define P_ENCI_VBI_CGMSDT_L 		VCBUS_REG_ADDR(ENCI_VBI_CGMSDT_L)
+#define ENCI_VBI_CGMSDT_H 0x1b28 	///../ucode/register.h:8192
+#define P_ENCI_VBI_CGMSDT_H 		VCBUS_REG_ADDR(ENCI_VBI_CGMSDT_H)
+#define ENCI_VBI_CGMS_LN 0x1b29 	///../ucode/register.h:8193
+#define P_ENCI_VBI_CGMS_LN 		VCBUS_REG_ADDR(ENCI_VBI_CGMS_LN)
+#define ENCI_VBI_TTX_HTIME 0x1b2a 	///../ucode/register.h:8194
+#define P_ENCI_VBI_TTX_HTIME 		VCBUS_REG_ADDR(ENCI_VBI_TTX_HTIME)
+#define ENCI_VBI_TTX_LN 0x1b2b 	///../ucode/register.h:8195
+#define P_ENCI_VBI_TTX_LN 		VCBUS_REG_ADDR(ENCI_VBI_TTX_LN)
+#define ENCI_VBI_TTXDT0 0x1b2c 	///../ucode/register.h:8196
+#define P_ENCI_VBI_TTXDT0 		VCBUS_REG_ADDR(ENCI_VBI_TTXDT0)
+#define ENCI_VBI_TTXDT1 0x1b2d 	///../ucode/register.h:8197
+#define P_ENCI_VBI_TTXDT1 		VCBUS_REG_ADDR(ENCI_VBI_TTXDT1)
+#define ENCI_VBI_TTXDT2 0x1b2e 	///../ucode/register.h:8198
+#define P_ENCI_VBI_TTXDT2 		VCBUS_REG_ADDR(ENCI_VBI_TTXDT2)
+#define ENCI_VBI_TTXDT3 0x1b2f 	///../ucode/register.h:8199
+#define P_ENCI_VBI_TTXDT3 		VCBUS_REG_ADDR(ENCI_VBI_TTXDT3)
+#define ENCI_MACV_N0 0x1b30 	///../ucode/register.h:8200
+#define P_ENCI_MACV_N0 		VCBUS_REG_ADDR(ENCI_MACV_N0)
+#define ENCI_MACV_N1 0x1b31 	///../ucode/register.h:8201
+#define P_ENCI_MACV_N1 		VCBUS_REG_ADDR(ENCI_MACV_N1)
+#define ENCI_MACV_N2 0x1b32 	///../ucode/register.h:8202
+#define P_ENCI_MACV_N2 		VCBUS_REG_ADDR(ENCI_MACV_N2)
+#define ENCI_MACV_N3 0x1b33 	///../ucode/register.h:8203
+#define P_ENCI_MACV_N3 		VCBUS_REG_ADDR(ENCI_MACV_N3)
+#define ENCI_MACV_N4 0x1b34 	///../ucode/register.h:8204
+#define P_ENCI_MACV_N4 		VCBUS_REG_ADDR(ENCI_MACV_N4)
+#define ENCI_MACV_N5 0x1b35 	///../ucode/register.h:8205
+#define P_ENCI_MACV_N5 		VCBUS_REG_ADDR(ENCI_MACV_N5)
+#define ENCI_MACV_N6 0x1b36 	///../ucode/register.h:8206
+#define P_ENCI_MACV_N6 		VCBUS_REG_ADDR(ENCI_MACV_N6)
+#define ENCI_MACV_N7 0x1b37 	///../ucode/register.h:8207
+#define P_ENCI_MACV_N7 		VCBUS_REG_ADDR(ENCI_MACV_N7)
+#define ENCI_MACV_N8 0x1b38 	///../ucode/register.h:8208
+#define P_ENCI_MACV_N8 		VCBUS_REG_ADDR(ENCI_MACV_N8)
+#define ENCI_MACV_N9 0x1b39 	///../ucode/register.h:8209
+#define P_ENCI_MACV_N9 		VCBUS_REG_ADDR(ENCI_MACV_N9)
+#define ENCI_MACV_N10 0x1b3a 	///../ucode/register.h:8210
+#define P_ENCI_MACV_N10 		VCBUS_REG_ADDR(ENCI_MACV_N10)
+#define ENCI_MACV_N11 0x1b3b 	///../ucode/register.h:8211
+#define P_ENCI_MACV_N11 		VCBUS_REG_ADDR(ENCI_MACV_N11)
+#define ENCI_MACV_N12 0x1b3c 	///../ucode/register.h:8212
+#define P_ENCI_MACV_N12 		VCBUS_REG_ADDR(ENCI_MACV_N12)
+#define ENCI_MACV_N13 0x1b3d 	///../ucode/register.h:8213
+#define P_ENCI_MACV_N13 		VCBUS_REG_ADDR(ENCI_MACV_N13)
+#define ENCI_MACV_N14 0x1b3e 	///../ucode/register.h:8214
+#define P_ENCI_MACV_N14 		VCBUS_REG_ADDR(ENCI_MACV_N14)
+#define ENCI_MACV_N15 0x1b3f 	///../ucode/register.h:8215
+#define P_ENCI_MACV_N15 		VCBUS_REG_ADDR(ENCI_MACV_N15)
+#define ENCI_MACV_N16 0x1b40 	///../ucode/register.h:8216
+#define P_ENCI_MACV_N16 		VCBUS_REG_ADDR(ENCI_MACV_N16)
+#define ENCI_MACV_N17 0x1b41 	///../ucode/register.h:8217
+#define P_ENCI_MACV_N17 		VCBUS_REG_ADDR(ENCI_MACV_N17)
+#define ENCI_MACV_N18 0x1b42 	///../ucode/register.h:8218
+#define P_ENCI_MACV_N18 		VCBUS_REG_ADDR(ENCI_MACV_N18)
+#define ENCI_MACV_N19 0x1b43 	///../ucode/register.h:8219
+#define P_ENCI_MACV_N19 		VCBUS_REG_ADDR(ENCI_MACV_N19)
+#define ENCI_MACV_N20 0x1b44 	///../ucode/register.h:8220
+#define P_ENCI_MACV_N20 		VCBUS_REG_ADDR(ENCI_MACV_N20)
+#define ENCI_MACV_N21 0x1b45 	///../ucode/register.h:8221
+#define P_ENCI_MACV_N21 		VCBUS_REG_ADDR(ENCI_MACV_N21)
+#define ENCI_MACV_N22 0x1b46 	///../ucode/register.h:8222
+#define P_ENCI_MACV_N22 		VCBUS_REG_ADDR(ENCI_MACV_N22)
+#define ENCI_DBG_PX_RST 0x1b48 	///../ucode/register.h:8224
+#define P_ENCI_DBG_PX_RST 		VCBUS_REG_ADDR(ENCI_DBG_PX_RST)
+#define ENCI_DBG_FLDLN_RST 0x1b49 	///../ucode/register.h:8225
+#define P_ENCI_DBG_FLDLN_RST 		VCBUS_REG_ADDR(ENCI_DBG_FLDLN_RST)
+#define ENCI_DBG_PX_INT 0x1b4a 	///../ucode/register.h:8226
+#define P_ENCI_DBG_PX_INT 		VCBUS_REG_ADDR(ENCI_DBG_PX_INT)
+#define ENCI_DBG_FLDLN_INT 0x1b4b 	///../ucode/register.h:8227
+#define P_ENCI_DBG_FLDLN_INT 		VCBUS_REG_ADDR(ENCI_DBG_FLDLN_INT)
+#define ENCI_DBG_MAXPX 0x1b4c 	///../ucode/register.h:8228
+#define P_ENCI_DBG_MAXPX 		VCBUS_REG_ADDR(ENCI_DBG_MAXPX)
+#define ENCI_DBG_MAXLN 0x1b4d 	///../ucode/register.h:8229
+#define P_ENCI_DBG_MAXLN 		VCBUS_REG_ADDR(ENCI_DBG_MAXLN)
+#define ENCI_MACV_MAX_AMP 0x1b50 	///../ucode/register.h:8230
+#define P_ENCI_MACV_MAX_AMP 		VCBUS_REG_ADDR(ENCI_MACV_MAX_AMP)
+#define ENCI_MACV_PULSE_LO 0x1b51 	///../ucode/register.h:8231
+#define P_ENCI_MACV_PULSE_LO 		VCBUS_REG_ADDR(ENCI_MACV_PULSE_LO)
+#define ENCI_MACV_PULSE_HI 0x1b52 	///../ucode/register.h:8232
+#define P_ENCI_MACV_PULSE_HI 		VCBUS_REG_ADDR(ENCI_MACV_PULSE_HI)
+#define ENCI_MACV_BKP_MAX 0x1b53 	///../ucode/register.h:8233
+#define P_ENCI_MACV_BKP_MAX 		VCBUS_REG_ADDR(ENCI_MACV_BKP_MAX)
+#define ENCI_CFILT_CTRL 0x1b54 	///../ucode/register.h:8234
+#define P_ENCI_CFILT_CTRL 		VCBUS_REG_ADDR(ENCI_CFILT_CTRL)
+#define ENCI_CFILT7 0x1b55 	///../ucode/register.h:8235
+#define P_ENCI_CFILT7 		VCBUS_REG_ADDR(ENCI_CFILT7)
+#define ENCI_YC_DELAY 0x1b56 	///../ucode/register.h:8236
+#define P_ENCI_YC_DELAY 		VCBUS_REG_ADDR(ENCI_YC_DELAY)
+#define ENCI_VIDEO_EN 0x1b57 	///../ucode/register.h:8237
+#define P_ENCI_VIDEO_EN 		VCBUS_REG_ADDR(ENCI_VIDEO_EN)
+#define ENCI_DVI_HSO_BEGIN 0x1c00 	///../ucode/register.h:8251
+#define P_ENCI_DVI_HSO_BEGIN 		VCBUS_REG_ADDR(ENCI_DVI_HSO_BEGIN)
+#define ENCI_DVI_HSO_END 0x1c01 	///../ucode/register.h:8252
+#define P_ENCI_DVI_HSO_END 		VCBUS_REG_ADDR(ENCI_DVI_HSO_END)
+#define ENCI_DVI_VSO_BLINE_EVN 0x1c02 	///../ucode/register.h:8253
+#define P_ENCI_DVI_VSO_BLINE_EVN 		VCBUS_REG_ADDR(ENCI_DVI_VSO_BLINE_EVN)
+#define ENCI_DVI_VSO_BLINE_ODD 0x1c03 	///../ucode/register.h:8254
+#define P_ENCI_DVI_VSO_BLINE_ODD 		VCBUS_REG_ADDR(ENCI_DVI_VSO_BLINE_ODD)
+#define ENCI_DVI_VSO_ELINE_EVN 0x1c04 	///../ucode/register.h:8255
+#define P_ENCI_DVI_VSO_ELINE_EVN 		VCBUS_REG_ADDR(ENCI_DVI_VSO_ELINE_EVN)
+#define ENCI_DVI_VSO_ELINE_ODD 0x1c05 	///../ucode/register.h:8256
+#define P_ENCI_DVI_VSO_ELINE_ODD 		VCBUS_REG_ADDR(ENCI_DVI_VSO_ELINE_ODD)
+#define ENCI_DVI_VSO_BEGIN_EVN 0x1c06 	///../ucode/register.h:8257
+#define P_ENCI_DVI_VSO_BEGIN_EVN 		VCBUS_REG_ADDR(ENCI_DVI_VSO_BEGIN_EVN)
+#define ENCI_DVI_VSO_BEGIN_ODD 0x1c07 	///../ucode/register.h:8258
+#define P_ENCI_DVI_VSO_BEGIN_ODD 		VCBUS_REG_ADDR(ENCI_DVI_VSO_BEGIN_ODD)
+#define ENCI_DVI_VSO_END_EVN 0x1c08 	///../ucode/register.h:8259
+#define P_ENCI_DVI_VSO_END_EVN 		VCBUS_REG_ADDR(ENCI_DVI_VSO_END_EVN)
+#define ENCI_DVI_VSO_END_ODD 0x1c09 	///../ucode/register.h:8260
+#define P_ENCI_DVI_VSO_END_ODD 		VCBUS_REG_ADDR(ENCI_DVI_VSO_END_ODD)
+#define ENCI_CFILT_CTRL2 0x1c0a 	///../ucode/register.h:8266
+#define P_ENCI_CFILT_CTRL2 		VCBUS_REG_ADDR(ENCI_CFILT_CTRL2)
+#define ENCI_DACSEL_0 0x1c0b 	///../ucode/register.h:8267
+#define P_ENCI_DACSEL_0 		VCBUS_REG_ADDR(ENCI_DACSEL_0)
+#define ENCI_DACSEL_1 0x1c0c 	///../ucode/register.h:8268
+#define P_ENCI_DACSEL_1 		VCBUS_REG_ADDR(ENCI_DACSEL_1)
+#define ENCP_DACSEL_0 0x1c0d 	///../ucode/register.h:8269
+#define P_ENCP_DACSEL_0 		VCBUS_REG_ADDR(ENCP_DACSEL_0)
+#define ENCP_DACSEL_1 0x1c0e 	///../ucode/register.h:8270
+#define P_ENCP_DACSEL_1 		VCBUS_REG_ADDR(ENCP_DACSEL_1)
+#define ENCP_MAX_LINE_SWITCH_POINT 0x1c0f 	///../ucode/register.h:8271
+#define P_ENCP_MAX_LINE_SWITCH_POINT 		VCBUS_REG_ADDR(ENCP_MAX_LINE_SWITCH_POINT)
+#define ENCI_TST_EN 0x1c10 	///../ucode/register.h:8272
+#define P_ENCI_TST_EN 		VCBUS_REG_ADDR(ENCI_TST_EN)
+#define ENCI_TST_MDSEL 0x1c11 	///../ucode/register.h:8273
+#define P_ENCI_TST_MDSEL 		VCBUS_REG_ADDR(ENCI_TST_MDSEL)
+#define ENCI_TST_Y 0x1c12 	///../ucode/register.h:8274
+#define P_ENCI_TST_Y 		VCBUS_REG_ADDR(ENCI_TST_Y)
+#define ENCI_TST_CB 0x1c13 	///../ucode/register.h:8275
+#define P_ENCI_TST_CB 		VCBUS_REG_ADDR(ENCI_TST_CB)
+#define ENCI_TST_CR 0x1c14 	///../ucode/register.h:8276
+#define P_ENCI_TST_CR 		VCBUS_REG_ADDR(ENCI_TST_CR)
+#define ENCI_TST_CLRBAR_STRT 0x1c15 	///../ucode/register.h:8277
+#define P_ENCI_TST_CLRBAR_STRT 		VCBUS_REG_ADDR(ENCI_TST_CLRBAR_STRT)
+#define ENCI_TST_CLRBAR_WIDTH 0x1c16 	///../ucode/register.h:8278
+#define P_ENCI_TST_CLRBAR_WIDTH 		VCBUS_REG_ADDR(ENCI_TST_CLRBAR_WIDTH)
+#define ENCI_TST_VDCNT_STSET 0x1c17 	///../ucode/register.h:8279
+#define P_ENCI_TST_VDCNT_STSET 		VCBUS_REG_ADDR(ENCI_TST_VDCNT_STSET)
+#define ENCI_VFIFO2VD_CTL 0x1c18 	///../ucode/register.h:8284
+#define P_ENCI_VFIFO2VD_CTL 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_CTL)
+#define ENCI_VFIFO2VD_PIXEL_START 0x1c19 	///../ucode/register.h:8286
+#define P_ENCI_VFIFO2VD_PIXEL_START 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_PIXEL_START)
+#define ENCI_VFIFO2VD_PIXEL_END 0x1c1a 	///../ucode/register.h:8288
+#define P_ENCI_VFIFO2VD_PIXEL_END 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_PIXEL_END)
+#define ENCI_VFIFO2VD_LINE_TOP_START 0x1c1b 	///../ucode/register.h:8290
+#define P_ENCI_VFIFO2VD_LINE_TOP_START 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_TOP_START)
+#define ENCI_VFIFO2VD_LINE_TOP_END 0x1c1c 	///../ucode/register.h:8292
+#define P_ENCI_VFIFO2VD_LINE_TOP_END 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_TOP_END)
+#define ENCI_VFIFO2VD_LINE_BOT_START 0x1c1d 	///../ucode/register.h:8294
+#define P_ENCI_VFIFO2VD_LINE_BOT_START 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_BOT_START)
+#define ENCI_VFIFO2VD_LINE_BOT_END 0x1c1e 	///../ucode/register.h:8296
+#define P_ENCI_VFIFO2VD_LINE_BOT_END 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_BOT_END)
+#define ENCI_VFIFO2VD_CTL2 0x1c1f 	///../ucode/register.h:8297
+#define P_ENCI_VFIFO2VD_CTL2 		VCBUS_REG_ADDR(ENCI_VFIFO2VD_CTL2)
+#define ENCT_VFIFO2VD_CTL 0x1c20 	///../ucode/register.h:8302
+#define P_ENCT_VFIFO2VD_CTL 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_CTL)
+#define ENCT_VFIFO2VD_PIXEL_START 0x1c21 	///../ucode/register.h:8304
+#define P_ENCT_VFIFO2VD_PIXEL_START 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_PIXEL_START)
+#define ENCT_VFIFO2VD_PIXEL_END 0x1c22 	///../ucode/register.h:8306
+#define P_ENCT_VFIFO2VD_PIXEL_END 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_PIXEL_END)
+#define ENCT_VFIFO2VD_LINE_TOP_START 0x1c23 	///../ucode/register.h:8308
+#define P_ENCT_VFIFO2VD_LINE_TOP_START 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_TOP_START)
+#define ENCT_VFIFO2VD_LINE_TOP_END 0x1c24 	///../ucode/register.h:8310
+#define P_ENCT_VFIFO2VD_LINE_TOP_END 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_TOP_END)
+#define ENCT_VFIFO2VD_LINE_BOT_START 0x1c25 	///../ucode/register.h:8312
+#define P_ENCT_VFIFO2VD_LINE_BOT_START 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_BOT_START)
+#define ENCT_VFIFO2VD_LINE_BOT_END 0x1c26 	///../ucode/register.h:8314
+#define P_ENCT_VFIFO2VD_LINE_BOT_END 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_BOT_END)
+#define ENCT_VFIFO2VD_CTL2 0x1c27 	///../ucode/register.h:8315
+#define P_ENCT_VFIFO2VD_CTL2 		VCBUS_REG_ADDR(ENCT_VFIFO2VD_CTL2)
+#define ENCT_TST_EN 0x1c28 	///../ucode/register.h:8316
+#define P_ENCT_TST_EN 		VCBUS_REG_ADDR(ENCT_TST_EN)
+#define ENCT_TST_MDSEL 0x1c29 	///../ucode/register.h:8317
+#define P_ENCT_TST_MDSEL 		VCBUS_REG_ADDR(ENCT_TST_MDSEL)
+#define ENCT_TST_Y 0x1c2a 	///../ucode/register.h:8318
+#define P_ENCT_TST_Y 		VCBUS_REG_ADDR(ENCT_TST_Y)
+#define ENCT_TST_CB 0x1c2b 	///../ucode/register.h:8319
+#define P_ENCT_TST_CB 		VCBUS_REG_ADDR(ENCT_TST_CB)
+#define ENCT_TST_CR 0x1c2c 	///../ucode/register.h:8320
+#define P_ENCT_TST_CR 		VCBUS_REG_ADDR(ENCT_TST_CR)
+#define ENCT_TST_CLRBAR_STRT 0x1c2d 	///../ucode/register.h:8321
+#define P_ENCT_TST_CLRBAR_STRT 		VCBUS_REG_ADDR(ENCT_TST_CLRBAR_STRT)
+#define ENCT_TST_CLRBAR_WIDTH 0x1c2e 	///../ucode/register.h:8322
+#define P_ENCT_TST_CLRBAR_WIDTH 		VCBUS_REG_ADDR(ENCT_TST_CLRBAR_WIDTH)
+#define ENCT_TST_VDCNT_STSET 0x1c2f 	///../ucode/register.h:8323
+#define P_ENCT_TST_VDCNT_STSET 		VCBUS_REG_ADDR(ENCT_TST_VDCNT_STSET)
+#define ENCP_DVI_HSO_BEGIN 0x1c30 	///../ucode/register.h:8325
+#define P_ENCP_DVI_HSO_BEGIN 		VCBUS_REG_ADDR(ENCP_DVI_HSO_BEGIN)
+#define ENCP_DVI_HSO_END 0x1c31 	///../ucode/register.h:8326
+#define P_ENCP_DVI_HSO_END 		VCBUS_REG_ADDR(ENCP_DVI_HSO_END)
+#define ENCP_DVI_VSO_BLINE_EVN 0x1c32 	///../ucode/register.h:8327
+#define P_ENCP_DVI_VSO_BLINE_EVN 		VCBUS_REG_ADDR(ENCP_DVI_VSO_BLINE_EVN)
+#define ENCP_DVI_VSO_BLINE_ODD 0x1c33 	///../ucode/register.h:8328
+#define P_ENCP_DVI_VSO_BLINE_ODD 		VCBUS_REG_ADDR(ENCP_DVI_VSO_BLINE_ODD)
+#define ENCP_DVI_VSO_ELINE_EVN 0x1c34 	///../ucode/register.h:8329
+#define P_ENCP_DVI_VSO_ELINE_EVN 		VCBUS_REG_ADDR(ENCP_DVI_VSO_ELINE_EVN)
+#define ENCP_DVI_VSO_ELINE_ODD 0x1c35 	///../ucode/register.h:8330
+#define P_ENCP_DVI_VSO_ELINE_ODD 		VCBUS_REG_ADDR(ENCP_DVI_VSO_ELINE_ODD)
+#define ENCP_DVI_VSO_BEGIN_EVN 0x1c36 	///../ucode/register.h:8331
+#define P_ENCP_DVI_VSO_BEGIN_EVN 		VCBUS_REG_ADDR(ENCP_DVI_VSO_BEGIN_EVN)
+#define ENCP_DVI_VSO_BEGIN_ODD 0x1c37 	///../ucode/register.h:8332
+#define P_ENCP_DVI_VSO_BEGIN_ODD 		VCBUS_REG_ADDR(ENCP_DVI_VSO_BEGIN_ODD)
+#define ENCP_DVI_VSO_END_EVN 0x1c38 	///../ucode/register.h:8333
+#define P_ENCP_DVI_VSO_END_EVN 		VCBUS_REG_ADDR(ENCP_DVI_VSO_END_EVN)
+#define ENCP_DVI_VSO_END_ODD 0x1c39 	///../ucode/register.h:8334
+#define P_ENCP_DVI_VSO_END_ODD 		VCBUS_REG_ADDR(ENCP_DVI_VSO_END_ODD)
+#define ENCP_DE_H_BEGIN 0x1c3a 	///../ucode/register.h:8335
+#define P_ENCP_DE_H_BEGIN 		VCBUS_REG_ADDR(ENCP_DE_H_BEGIN)
+#define ENCP_DE_H_END 0x1c3b 	///../ucode/register.h:8336
+#define P_ENCP_DE_H_END 		VCBUS_REG_ADDR(ENCP_DE_H_END)
+#define ENCP_DE_V_BEGIN_EVEN 0x1c3c 	///../ucode/register.h:8337
+#define P_ENCP_DE_V_BEGIN_EVEN 		VCBUS_REG_ADDR(ENCP_DE_V_BEGIN_EVEN)
+#define ENCP_DE_V_END_EVEN 0x1c3d 	///../ucode/register.h:8338
+#define P_ENCP_DE_V_END_EVEN 		VCBUS_REG_ADDR(ENCP_DE_V_END_EVEN)
+#define ENCP_DE_V_BEGIN_ODD 0x1c3e 	///../ucode/register.h:8339
+#define P_ENCP_DE_V_BEGIN_ODD 		VCBUS_REG_ADDR(ENCP_DE_V_BEGIN_ODD)
+#define ENCP_DE_V_END_ODD 0x1c3f 	///../ucode/register.h:8340
+#define P_ENCP_DE_V_END_ODD 		VCBUS_REG_ADDR(ENCP_DE_V_END_ODD)
+#define ENCI_SYNC_LINE_LENGTH 0x1c40 	///../ucode/register.h:8343
+#define P_ENCI_SYNC_LINE_LENGTH 		VCBUS_REG_ADDR(ENCI_SYNC_LINE_LENGTH)
+#define ENCI_SYNC_PIXEL_EN 0x1c41 	///../ucode/register.h:8346
+#define P_ENCI_SYNC_PIXEL_EN 		VCBUS_REG_ADDR(ENCI_SYNC_PIXEL_EN)
+#define ENCI_SYNC_TO_LINE_EN 0x1c42 	///../ucode/register.h:8353
+#define P_ENCI_SYNC_TO_LINE_EN 		VCBUS_REG_ADDR(ENCI_SYNC_TO_LINE_EN)
+#define ENCI_SYNC_TO_PIXEL 0x1c43 	///../ucode/register.h:8355
+#define P_ENCI_SYNC_TO_PIXEL 		VCBUS_REG_ADDR(ENCI_SYNC_TO_PIXEL)
+#define ENCP_SYNC_LINE_LENGTH 0x1c44 	///../ucode/register.h:8358
+#define P_ENCP_SYNC_LINE_LENGTH 		VCBUS_REG_ADDR(ENCP_SYNC_LINE_LENGTH)
+#define ENCP_SYNC_PIXEL_EN 0x1c45 	///../ucode/register.h:8361
+#define P_ENCP_SYNC_PIXEL_EN 		VCBUS_REG_ADDR(ENCP_SYNC_PIXEL_EN)
+#define ENCP_SYNC_TO_LINE_EN 0x1c46 	///../ucode/register.h:8368
+#define P_ENCP_SYNC_TO_LINE_EN 		VCBUS_REG_ADDR(ENCP_SYNC_TO_LINE_EN)
+#define ENCP_SYNC_TO_PIXEL 0x1c47 	///../ucode/register.h:8370
+#define P_ENCP_SYNC_TO_PIXEL 		VCBUS_REG_ADDR(ENCP_SYNC_TO_PIXEL)
+#define ENCT_SYNC_LINE_LENGTH 0x1c48 	///../ucode/register.h:8373
+#define P_ENCT_SYNC_LINE_LENGTH 		VCBUS_REG_ADDR(ENCT_SYNC_LINE_LENGTH)
+#define ENCT_SYNC_PIXEL_EN 0x1c49 	///../ucode/register.h:8376
+#define P_ENCT_SYNC_PIXEL_EN 		VCBUS_REG_ADDR(ENCT_SYNC_PIXEL_EN)
+#define ENCT_SYNC_TO_LINE_EN 0x1c4a 	///../ucode/register.h:8383
+#define P_ENCT_SYNC_TO_LINE_EN 		VCBUS_REG_ADDR(ENCT_SYNC_TO_LINE_EN)
+#define ENCT_SYNC_TO_PIXEL 0x1c4b 	///../ucode/register.h:8385
+#define P_ENCT_SYNC_TO_PIXEL 		VCBUS_REG_ADDR(ENCT_SYNC_TO_PIXEL)
+#define ENCL_SYNC_LINE_LENGTH 0x1c4c 	///../ucode/register.h:8388
+#define P_ENCL_SYNC_LINE_LENGTH 		VCBUS_REG_ADDR(ENCL_SYNC_LINE_LENGTH)
+#define ENCL_SYNC_PIXEL_EN 0x1c4d 	///../ucode/register.h:8391
+#define P_ENCL_SYNC_PIXEL_EN 		VCBUS_REG_ADDR(ENCL_SYNC_PIXEL_EN)
+#define ENCL_SYNC_TO_LINE_EN 0x1c4e 	///../ucode/register.h:8398
+#define P_ENCL_SYNC_TO_LINE_EN 		VCBUS_REG_ADDR(ENCL_SYNC_TO_LINE_EN)
+#define ENCL_SYNC_TO_PIXEL 0x1c4f 	///../ucode/register.h:8400
+#define P_ENCL_SYNC_TO_PIXEL 		VCBUS_REG_ADDR(ENCL_SYNC_TO_PIXEL)
+#define ENCP_VFIFO2VD_CTL2 0x1c50 	///../ucode/register.h:8409
+#define P_ENCP_VFIFO2VD_CTL2 		VCBUS_REG_ADDR(ENCP_VFIFO2VD_CTL2)
+#define VENC_DVI_SETTING_MORE 0x1c51 	///../ucode/register.h:8415
+#define P_VENC_DVI_SETTING_MORE 		VCBUS_REG_ADDR(VENC_DVI_SETTING_MORE)
+#define VENC_VDAC_DAC4_FILT_CTRL0 0x1c54 	///../ucode/register.h:8416
+#define P_VENC_VDAC_DAC4_FILT_CTRL0 		VCBUS_REG_ADDR(VENC_VDAC_DAC4_FILT_CTRL0)
+#define VENC_VDAC_DAC4_FILT_CTRL1 0x1c55 	///../ucode/register.h:8417
+#define P_VENC_VDAC_DAC4_FILT_CTRL1 		VCBUS_REG_ADDR(VENC_VDAC_DAC4_FILT_CTRL1)
+#define VENC_VDAC_DAC5_FILT_CTRL0 0x1c56 	///../ucode/register.h:8418
+#define P_VENC_VDAC_DAC5_FILT_CTRL0 		VCBUS_REG_ADDR(VENC_VDAC_DAC5_FILT_CTRL0)
+#define VENC_VDAC_DAC5_FILT_CTRL1 0x1c57 	///../ucode/register.h:8419
+#define P_VENC_VDAC_DAC5_FILT_CTRL1 		VCBUS_REG_ADDR(VENC_VDAC_DAC5_FILT_CTRL1)
+#define VENC_VDAC_DAC0_FILT_CTRL0 0x1c58 	///../ucode/register.h:8421
+#define P_VENC_VDAC_DAC0_FILT_CTRL0 		VCBUS_REG_ADDR(VENC_VDAC_DAC0_FILT_CTRL0)
+#define VENC_VDAC_DAC0_FILT_CTRL1 0x1c59 	///../ucode/register.h:8425
+#define P_VENC_VDAC_DAC0_FILT_CTRL1 		VCBUS_REG_ADDR(VENC_VDAC_DAC0_FILT_CTRL1)
+#define VENC_VDAC_DAC1_FILT_CTRL0 0x1c5a 	///../ucode/register.h:8427
+#define P_VENC_VDAC_DAC1_FILT_CTRL0 		VCBUS_REG_ADDR(VENC_VDAC_DAC1_FILT_CTRL0)
+#define VENC_VDAC_DAC1_FILT_CTRL1 0x1c5b 	///../ucode/register.h:8431
+#define P_VENC_VDAC_DAC1_FILT_CTRL1 		VCBUS_REG_ADDR(VENC_VDAC_DAC1_FILT_CTRL1)
+#define VENC_VDAC_DAC2_FILT_CTRL0 0x1c5c 	///../ucode/register.h:8433
+#define P_VENC_VDAC_DAC2_FILT_CTRL0 		VCBUS_REG_ADDR(VENC_VDAC_DAC2_FILT_CTRL0)
+#define VENC_VDAC_DAC2_FILT_CTRL1 0x1c5d 	///../ucode/register.h:8437
+#define P_VENC_VDAC_DAC2_FILT_CTRL1 		VCBUS_REG_ADDR(VENC_VDAC_DAC2_FILT_CTRL1)
+#define VENC_VDAC_DAC3_FILT_CTRL0 0x1c5e 	///../ucode/register.h:8439
+#define P_VENC_VDAC_DAC3_FILT_CTRL0 		VCBUS_REG_ADDR(VENC_VDAC_DAC3_FILT_CTRL0)
+#define VENC_VDAC_DAC3_FILT_CTRL1 0x1c5f 	///../ucode/register.h:8443
+#define P_VENC_VDAC_DAC3_FILT_CTRL1 		VCBUS_REG_ADDR(VENC_VDAC_DAC3_FILT_CTRL1)
+#define ENCT_VIDEO_EN 0x1c60 	///../ucode/register.h:8446
+#define P_ENCT_VIDEO_EN 		VCBUS_REG_ADDR(ENCT_VIDEO_EN)
+#define ENCT_VIDEO_Y_SCL 0x1c61 	///../ucode/register.h:8447
+#define P_ENCT_VIDEO_Y_SCL 		VCBUS_REG_ADDR(ENCT_VIDEO_Y_SCL)
+#define ENCT_VIDEO_PB_SCL 0x1c62 	///../ucode/register.h:8448
+#define P_ENCT_VIDEO_PB_SCL 		VCBUS_REG_ADDR(ENCT_VIDEO_PB_SCL)
+#define ENCT_VIDEO_PR_SCL 0x1c63 	///../ucode/register.h:8449
+#define P_ENCT_VIDEO_PR_SCL 		VCBUS_REG_ADDR(ENCT_VIDEO_PR_SCL)
+#define ENCT_VIDEO_Y_OFFST 0x1c64 	///../ucode/register.h:8450
+#define P_ENCT_VIDEO_Y_OFFST 		VCBUS_REG_ADDR(ENCT_VIDEO_Y_OFFST)
+#define ENCT_VIDEO_PB_OFFST 0x1c65 	///../ucode/register.h:8451
+#define P_ENCT_VIDEO_PB_OFFST 		VCBUS_REG_ADDR(ENCT_VIDEO_PB_OFFST)
+#define ENCT_VIDEO_PR_OFFST 0x1c66 	///../ucode/register.h:8452
+#define P_ENCT_VIDEO_PR_OFFST 		VCBUS_REG_ADDR(ENCT_VIDEO_PR_OFFST)
+#define ENCT_VIDEO_MODE 0x1c67 	///../ucode/register.h:8454
+#define P_ENCT_VIDEO_MODE 		VCBUS_REG_ADDR(ENCT_VIDEO_MODE)
+#define ENCT_VIDEO_MODE_ADV 0x1c68 	///../ucode/register.h:8455
+#define P_ENCT_VIDEO_MODE_ADV 		VCBUS_REG_ADDR(ENCT_VIDEO_MODE_ADV)
+#define ENCT_DBG_PX_RST 0x1c69 	///../ucode/register.h:8457
+#define P_ENCT_DBG_PX_RST 		VCBUS_REG_ADDR(ENCT_DBG_PX_RST)
+#define ENCT_DBG_LN_RST 0x1c6a 	///../ucode/register.h:8458
+#define P_ENCT_DBG_LN_RST 		VCBUS_REG_ADDR(ENCT_DBG_LN_RST)
+#define ENCT_DBG_PX_INT 0x1c6b 	///../ucode/register.h:8459
+#define P_ENCT_DBG_PX_INT 		VCBUS_REG_ADDR(ENCT_DBG_PX_INT)
+#define ENCT_DBG_LN_INT 0x1c6c 	///../ucode/register.h:8460
+#define P_ENCT_DBG_LN_INT 		VCBUS_REG_ADDR(ENCT_DBG_LN_INT)
+#define ENCT_VIDEO_YFP1_HTIME 0x1c6d 	///../ucode/register.h:8462
+#define P_ENCT_VIDEO_YFP1_HTIME 		VCBUS_REG_ADDR(ENCT_VIDEO_YFP1_HTIME)
+#define ENCT_VIDEO_YFP2_HTIME 0x1c6e 	///../ucode/register.h:8463
+#define P_ENCT_VIDEO_YFP2_HTIME 		VCBUS_REG_ADDR(ENCT_VIDEO_YFP2_HTIME)
+#define ENCT_VIDEO_YC_DLY 0x1c6f 	///../ucode/register.h:8464
+#define P_ENCT_VIDEO_YC_DLY 		VCBUS_REG_ADDR(ENCT_VIDEO_YC_DLY)
+#define ENCT_VIDEO_MAX_PXCNT 0x1c70 	///../ucode/register.h:8465
+#define P_ENCT_VIDEO_MAX_PXCNT 		VCBUS_REG_ADDR(ENCT_VIDEO_MAX_PXCNT)
+#define ENCT_VIDEO_HAVON_END 0x1c71 	///../ucode/register.h:8466
+#define P_ENCT_VIDEO_HAVON_END 		VCBUS_REG_ADDR(ENCT_VIDEO_HAVON_END)
+#define ENCT_VIDEO_HAVON_BEGIN 0x1c72 	///../ucode/register.h:8467
+#define P_ENCT_VIDEO_HAVON_BEGIN 		VCBUS_REG_ADDR(ENCT_VIDEO_HAVON_BEGIN)
+#define ENCT_VIDEO_VAVON_ELINE 0x1c73 	///../ucode/register.h:8468
+#define P_ENCT_VIDEO_VAVON_ELINE 		VCBUS_REG_ADDR(ENCT_VIDEO_VAVON_ELINE)
+#define ENCT_VIDEO_VAVON_BLINE 0x1c74 	///../ucode/register.h:8469
+#define P_ENCT_VIDEO_VAVON_BLINE 		VCBUS_REG_ADDR(ENCT_VIDEO_VAVON_BLINE)
+#define ENCT_VIDEO_HSO_BEGIN 0x1c75 	///../ucode/register.h:8470
+#define P_ENCT_VIDEO_HSO_BEGIN 		VCBUS_REG_ADDR(ENCT_VIDEO_HSO_BEGIN)
+#define ENCT_VIDEO_HSO_END 0x1c76 	///../ucode/register.h:8471
+#define P_ENCT_VIDEO_HSO_END 		VCBUS_REG_ADDR(ENCT_VIDEO_HSO_END)
+#define ENCT_VIDEO_VSO_BEGIN 0x1c77 	///../ucode/register.h:8472
+#define P_ENCT_VIDEO_VSO_BEGIN 		VCBUS_REG_ADDR(ENCT_VIDEO_VSO_BEGIN)
+#define ENCT_VIDEO_VSO_END 0x1c78 	///../ucode/register.h:8473
+#define P_ENCT_VIDEO_VSO_END 		VCBUS_REG_ADDR(ENCT_VIDEO_VSO_END)
+#define ENCT_VIDEO_VSO_BLINE 0x1c79 	///../ucode/register.h:8474
+#define P_ENCT_VIDEO_VSO_BLINE 		VCBUS_REG_ADDR(ENCT_VIDEO_VSO_BLINE)
+#define ENCT_VIDEO_VSO_ELINE 0x1c7a 	///../ucode/register.h:8475
+#define P_ENCT_VIDEO_VSO_ELINE 		VCBUS_REG_ADDR(ENCT_VIDEO_VSO_ELINE)
+#define ENCT_VIDEO_MAX_LNCNT 0x1c7b 	///../ucode/register.h:8476
+#define P_ENCT_VIDEO_MAX_LNCNT 		VCBUS_REG_ADDR(ENCT_VIDEO_MAX_LNCNT)
+#define ENCT_VIDEO_BLANKY_VAL 0x1c7c 	///../ucode/register.h:8477
+#define P_ENCT_VIDEO_BLANKY_VAL 		VCBUS_REG_ADDR(ENCT_VIDEO_BLANKY_VAL)
+#define ENCT_VIDEO_BLANKPB_VAL 0x1c7d 	///../ucode/register.h:8478
+#define P_ENCT_VIDEO_BLANKPB_VAL 		VCBUS_REG_ADDR(ENCT_VIDEO_BLANKPB_VAL)
+#define ENCT_VIDEO_BLANKPR_VAL 0x1c7e 	///../ucode/register.h:8479
+#define P_ENCT_VIDEO_BLANKPR_VAL 		VCBUS_REG_ADDR(ENCT_VIDEO_BLANKPR_VAL)
+#define ENCT_VIDEO_HOFFST 0x1c7f 	///../ucode/register.h:8480
+#define P_ENCT_VIDEO_HOFFST 		VCBUS_REG_ADDR(ENCT_VIDEO_HOFFST)
+#define ENCT_VIDEO_VOFFST 0x1c80 	///../ucode/register.h:8481
+#define P_ENCT_VIDEO_VOFFST 		VCBUS_REG_ADDR(ENCT_VIDEO_VOFFST)
+#define ENCT_VIDEO_RGB_CTRL 0x1c81 	///../ucode/register.h:8482
+#define P_ENCT_VIDEO_RGB_CTRL 		VCBUS_REG_ADDR(ENCT_VIDEO_RGB_CTRL)
+#define ENCT_VIDEO_FILT_CTRL 0x1c82 	///../ucode/register.h:8483
+#define P_ENCT_VIDEO_FILT_CTRL 		VCBUS_REG_ADDR(ENCT_VIDEO_FILT_CTRL)
+#define ENCT_VIDEO_OFLD_VPEQ_OFST 0x1c83 	///../ucode/register.h:8484
+#define P_ENCT_VIDEO_OFLD_VPEQ_OFST 		VCBUS_REG_ADDR(ENCT_VIDEO_OFLD_VPEQ_OFST)
+#define ENCT_VIDEO_OFLD_VOAV_OFST 0x1c84 	///../ucode/register.h:8485
+#define P_ENCT_VIDEO_OFLD_VOAV_OFST 		VCBUS_REG_ADDR(ENCT_VIDEO_OFLD_VOAV_OFST)
+#define ENCT_VIDEO_MATRIX_CB 0x1c85 	///../ucode/register.h:8486
+#define P_ENCT_VIDEO_MATRIX_CB 		VCBUS_REG_ADDR(ENCT_VIDEO_MATRIX_CB)
+#define ENCT_VIDEO_MATRIX_CR 0x1c86 	///../ucode/register.h:8487
+#define P_ENCT_VIDEO_MATRIX_CR 		VCBUS_REG_ADDR(ENCT_VIDEO_MATRIX_CR)
+#define ENCT_VIDEO_RGBIN_CTRL 0x1c87 	///../ucode/register.h:8488
+#define P_ENCT_VIDEO_RGBIN_CTRL 		VCBUS_REG_ADDR(ENCT_VIDEO_RGBIN_CTRL)
+#define ENCT_MAX_LINE_SWITCH_POINT 0x1c88 	///../ucode/register.h:8489
+#define P_ENCT_MAX_LINE_SWITCH_POINT 		VCBUS_REG_ADDR(ENCT_MAX_LINE_SWITCH_POINT)
+#define ENCT_DACSEL_0 0x1c89 	///../ucode/register.h:8490
+#define P_ENCT_DACSEL_0 		VCBUS_REG_ADDR(ENCT_DACSEL_0)
+#define ENCT_DACSEL_1 0x1c8a 	///../ucode/register.h:8491
+#define P_ENCT_DACSEL_1 		VCBUS_REG_ADDR(ENCT_DACSEL_1)
+#define ENCL_VFIFO2VD_CTL 0x1c90 	///../ucode/register.h:8499
+#define P_ENCL_VFIFO2VD_CTL 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_CTL)
+#define ENCL_VFIFO2VD_PIXEL_START 0x1c91 	///../ucode/register.h:8501
+#define P_ENCL_VFIFO2VD_PIXEL_START 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_PIXEL_START)
+#define ENCL_VFIFO2VD_PIXEL_END 0x1c92 	///../ucode/register.h:8503
+#define P_ENCL_VFIFO2VD_PIXEL_END 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_PIXEL_END)
+#define ENCL_VFIFO2VD_LINE_TOP_START 0x1c93 	///../ucode/register.h:8505
+#define P_ENCL_VFIFO2VD_LINE_TOP_START 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_TOP_START)
+#define ENCL_VFIFO2VD_LINE_TOP_END 0x1c94 	///../ucode/register.h:8507
+#define P_ENCL_VFIFO2VD_LINE_TOP_END 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_TOP_END)
+#define ENCL_VFIFO2VD_LINE_BOT_START 0x1c95 	///../ucode/register.h:8509
+#define P_ENCL_VFIFO2VD_LINE_BOT_START 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_BOT_START)
+#define ENCL_VFIFO2VD_LINE_BOT_END 0x1c96 	///../ucode/register.h:8511
+#define P_ENCL_VFIFO2VD_LINE_BOT_END 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_BOT_END)
+#define ENCL_VFIFO2VD_CTL2 0x1c97 	///../ucode/register.h:8512
+#define P_ENCL_VFIFO2VD_CTL2 		VCBUS_REG_ADDR(ENCL_VFIFO2VD_CTL2)
+#define ENCL_TST_EN 0x1c98 	///../ucode/register.h:8513
+#define P_ENCL_TST_EN 		VCBUS_REG_ADDR(ENCL_TST_EN)
+#define ENCL_TST_MDSEL 0x1c99 	///../ucode/register.h:8514
+#define P_ENCL_TST_MDSEL 		VCBUS_REG_ADDR(ENCL_TST_MDSEL)
+#define ENCL_TST_Y 0x1c9a 	///../ucode/register.h:8515
+#define P_ENCL_TST_Y 		VCBUS_REG_ADDR(ENCL_TST_Y)
+#define ENCL_TST_CB 0x1c9b 	///../ucode/register.h:8516
+#define P_ENCL_TST_CB 		VCBUS_REG_ADDR(ENCL_TST_CB)
+#define ENCL_TST_CR 0x1c9c 	///../ucode/register.h:8517
+#define P_ENCL_TST_CR 		VCBUS_REG_ADDR(ENCL_TST_CR)
+#define ENCL_TST_CLRBAR_STRT 0x1c9d 	///../ucode/register.h:8518
+#define P_ENCL_TST_CLRBAR_STRT 		VCBUS_REG_ADDR(ENCL_TST_CLRBAR_STRT)
+#define ENCL_TST_CLRBAR_WIDTH 0x1c9e 	///../ucode/register.h:8519
+#define P_ENCL_TST_CLRBAR_WIDTH 		VCBUS_REG_ADDR(ENCL_TST_CLRBAR_WIDTH)
+#define ENCL_TST_VDCNT_STSET 0x1c9f 	///../ucode/register.h:8520
+#define P_ENCL_TST_VDCNT_STSET 		VCBUS_REG_ADDR(ENCL_TST_VDCNT_STSET)
+#define ENCL_VIDEO_EN 0x1ca0 	///../ucode/register.h:8523
+#define P_ENCL_VIDEO_EN 		VCBUS_REG_ADDR(ENCL_VIDEO_EN)
+#define ENCL_VIDEO_Y_SCL 0x1ca1 	///../ucode/register.h:8524
+#define P_ENCL_VIDEO_Y_SCL 		VCBUS_REG_ADDR(ENCL_VIDEO_Y_SCL)
+#define ENCL_VIDEO_PB_SCL 0x1ca2 	///../ucode/register.h:8525
+#define P_ENCL_VIDEO_PB_SCL 		VCBUS_REG_ADDR(ENCL_VIDEO_PB_SCL)
+#define ENCL_VIDEO_PR_SCL 0x1ca3 	///../ucode/register.h:8526
+#define P_ENCL_VIDEO_PR_SCL 		VCBUS_REG_ADDR(ENCL_VIDEO_PR_SCL)
+#define ENCL_VIDEO_Y_OFFST 0x1ca4 	///../ucode/register.h:8527
+#define P_ENCL_VIDEO_Y_OFFST 		VCBUS_REG_ADDR(ENCL_VIDEO_Y_OFFST)
+#define ENCL_VIDEO_PB_OFFST 0x1ca5 	///../ucode/register.h:8528
+#define P_ENCL_VIDEO_PB_OFFST 		VCBUS_REG_ADDR(ENCL_VIDEO_PB_OFFST)
+#define ENCL_VIDEO_PR_OFFST 0x1ca6 	///../ucode/register.h:8529
+#define P_ENCL_VIDEO_PR_OFFST 		VCBUS_REG_ADDR(ENCL_VIDEO_PR_OFFST)
+#define ENCL_VIDEO_MODE 0x1ca7 	///../ucode/register.h:8531
+#define P_ENCL_VIDEO_MODE 		VCBUS_REG_ADDR(ENCL_VIDEO_MODE)
+#define ENCL_VIDEO_MODE_ADV 0x1ca8 	///../ucode/register.h:8532
+#define P_ENCL_VIDEO_MODE_ADV 		VCBUS_REG_ADDR(ENCL_VIDEO_MODE_ADV)
+#define ENCL_DBG_PX_RST 0x1ca9 	///../ucode/register.h:8534
+#define P_ENCL_DBG_PX_RST 		VCBUS_REG_ADDR(ENCL_DBG_PX_RST)
+#define ENCL_DBG_LN_RST 0x1caa 	///../ucode/register.h:8535
+#define P_ENCL_DBG_LN_RST 		VCBUS_REG_ADDR(ENCL_DBG_LN_RST)
+#define ENCL_DBG_PX_INT 0x1cab 	///../ucode/register.h:8536
+#define P_ENCL_DBG_PX_INT 		VCBUS_REG_ADDR(ENCL_DBG_PX_INT)
+#define ENCL_DBG_LN_INT 0x1cac 	///../ucode/register.h:8537
+#define P_ENCL_DBG_LN_INT 		VCBUS_REG_ADDR(ENCL_DBG_LN_INT)
+#define ENCL_VIDEO_YFP1_HTIME 0x1cad 	///../ucode/register.h:8539
+#define P_ENCL_VIDEO_YFP1_HTIME 		VCBUS_REG_ADDR(ENCL_VIDEO_YFP1_HTIME)
+#define ENCL_VIDEO_YFP2_HTIME 0x1cae 	///../ucode/register.h:8540
+#define P_ENCL_VIDEO_YFP2_HTIME 		VCBUS_REG_ADDR(ENCL_VIDEO_YFP2_HTIME)
+#define ENCL_VIDEO_YC_DLY 0x1caf 	///../ucode/register.h:8541
+#define P_ENCL_VIDEO_YC_DLY 		VCBUS_REG_ADDR(ENCL_VIDEO_YC_DLY)
+#define ENCL_VIDEO_MAX_PXCNT 0x1cb0 	///../ucode/register.h:8542
+#define P_ENCL_VIDEO_MAX_PXCNT 		VCBUS_REG_ADDR(ENCL_VIDEO_MAX_PXCNT)
+#define ENCL_VIDEO_HAVON_END 0x1cb1 	///../ucode/register.h:8543
+#define P_ENCL_VIDEO_HAVON_END 		VCBUS_REG_ADDR(ENCL_VIDEO_HAVON_END)
+#define ENCL_VIDEO_HAVON_BEGIN 0x1cb2 	///../ucode/register.h:8544
+#define P_ENCL_VIDEO_HAVON_BEGIN 		VCBUS_REG_ADDR(ENCL_VIDEO_HAVON_BEGIN)
+#define ENCL_VIDEO_VAVON_ELINE 0x1cb3 	///../ucode/register.h:8545
+#define P_ENCL_VIDEO_VAVON_ELINE 		VCBUS_REG_ADDR(ENCL_VIDEO_VAVON_ELINE)
+#define ENCL_VIDEO_VAVON_BLINE 0x1cb4 	///../ucode/register.h:8546
+#define P_ENCL_VIDEO_VAVON_BLINE 		VCBUS_REG_ADDR(ENCL_VIDEO_VAVON_BLINE)
+#define ENCL_VIDEO_HSO_BEGIN 0x1cb5 	///../ucode/register.h:8547
+#define P_ENCL_VIDEO_HSO_BEGIN 		VCBUS_REG_ADDR(ENCL_VIDEO_HSO_BEGIN)
+#define ENCL_VIDEO_HSO_END 0x1cb6 	///../ucode/register.h:8548
+#define P_ENCL_VIDEO_HSO_END 		VCBUS_REG_ADDR(ENCL_VIDEO_HSO_END)
+#define ENCL_VIDEO_VSO_BEGIN 0x1cb7 	///../ucode/register.h:8549
+#define P_ENCL_VIDEO_VSO_BEGIN 		VCBUS_REG_ADDR(ENCL_VIDEO_VSO_BEGIN)
+#define ENCL_VIDEO_VSO_END 0x1cb8 	///../ucode/register.h:8550
+#define P_ENCL_VIDEO_VSO_END 		VCBUS_REG_ADDR(ENCL_VIDEO_VSO_END)
+#define ENCL_VIDEO_VSO_BLINE 0x1cb9 	///../ucode/register.h:8551
+#define P_ENCL_VIDEO_VSO_BLINE 		VCBUS_REG_ADDR(ENCL_VIDEO_VSO_BLINE)
+#define ENCL_VIDEO_VSO_ELINE 0x1cba 	///../ucode/register.h:8552
+#define P_ENCL_VIDEO_VSO_ELINE 		VCBUS_REG_ADDR(ENCL_VIDEO_VSO_ELINE)
+#define ENCL_VIDEO_MAX_LNCNT 0x1cbb 	///../ucode/register.h:8553
+#define P_ENCL_VIDEO_MAX_LNCNT 		VCBUS_REG_ADDR(ENCL_VIDEO_MAX_LNCNT)
+#define ENCL_VIDEO_BLANKY_VAL 0x1cbc 	///../ucode/register.h:8554
+#define P_ENCL_VIDEO_BLANKY_VAL 		VCBUS_REG_ADDR(ENCL_VIDEO_BLANKY_VAL)
+#define ENCL_VIDEO_BLANKPB_VAL 0x1cbd 	///../ucode/register.h:8555
+#define P_ENCL_VIDEO_BLANKPB_VAL 		VCBUS_REG_ADDR(ENCL_VIDEO_BLANKPB_VAL)
+#define ENCL_VIDEO_BLANKPR_VAL 0x1cbe 	///../ucode/register.h:8556
+#define P_ENCL_VIDEO_BLANKPR_VAL 		VCBUS_REG_ADDR(ENCL_VIDEO_BLANKPR_VAL)
+#define ENCL_VIDEO_HOFFST 0x1cbf 	///../ucode/register.h:8557
+#define P_ENCL_VIDEO_HOFFST 		VCBUS_REG_ADDR(ENCL_VIDEO_HOFFST)
+#define ENCL_VIDEO_VOFFST 0x1cc0 	///../ucode/register.h:8558
+#define P_ENCL_VIDEO_VOFFST 		VCBUS_REG_ADDR(ENCL_VIDEO_VOFFST)
+#define ENCL_VIDEO_RGB_CTRL 0x1cc1 	///../ucode/register.h:8559
+#define P_ENCL_VIDEO_RGB_CTRL 		VCBUS_REG_ADDR(ENCL_VIDEO_RGB_CTRL)
+#define ENCL_VIDEO_FILT_CTRL 0x1cc2 	///../ucode/register.h:8560
+#define P_ENCL_VIDEO_FILT_CTRL 		VCBUS_REG_ADDR(ENCL_VIDEO_FILT_CTRL)
+#define ENCL_VIDEO_OFLD_VPEQ_OFST 0x1cc3 	///../ucode/register.h:8561
+#define P_ENCL_VIDEO_OFLD_VPEQ_OFST 		VCBUS_REG_ADDR(ENCL_VIDEO_OFLD_VPEQ_OFST)
+#define ENCL_VIDEO_OFLD_VOAV_OFST 0x1cc4 	///../ucode/register.h:8562
+#define P_ENCL_VIDEO_OFLD_VOAV_OFST 		VCBUS_REG_ADDR(ENCL_VIDEO_OFLD_VOAV_OFST)
+#define ENCL_VIDEO_MATRIX_CB 0x1cc5 	///../ucode/register.h:8563
+#define P_ENCL_VIDEO_MATRIX_CB 		VCBUS_REG_ADDR(ENCL_VIDEO_MATRIX_CB)
+#define ENCL_VIDEO_MATRIX_CR 0x1cc6 	///../ucode/register.h:8564
+#define P_ENCL_VIDEO_MATRIX_CR 		VCBUS_REG_ADDR(ENCL_VIDEO_MATRIX_CR)
+#define ENCL_VIDEO_RGBIN_CTRL 0x1cc7 	///../ucode/register.h:8565
+#define P_ENCL_VIDEO_RGBIN_CTRL 		VCBUS_REG_ADDR(ENCL_VIDEO_RGBIN_CTRL)
+#define ENCL_MAX_LINE_SWITCH_POINT 0x1cc8 	///../ucode/register.h:8566
+#define P_ENCL_MAX_LINE_SWITCH_POINT 		VCBUS_REG_ADDR(ENCL_MAX_LINE_SWITCH_POINT)
+#define ENCL_DACSEL_0 0x1cc9 	///../ucode/register.h:8567
+#define P_ENCL_DACSEL_0 		VCBUS_REG_ADDR(ENCL_DACSEL_0)
+#define ENCL_DACSEL_1 0x1cca 	///../ucode/register.h:8568
+#define P_ENCL_DACSEL_1 		VCBUS_REG_ADDR(ENCL_DACSEL_1)
+#define RDMA_AHB_START_ADDR_MAN 0x1cf0 	///../ucode/register.h:8572
+#define P_RDMA_AHB_START_ADDR_MAN 		VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_MAN)
+#define RDMA_AHB_END_ADDR_MAN 0x1cf1 	///../ucode/register.h:8574
+#define P_RDMA_AHB_END_ADDR_MAN 		VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_MAN)
+#define RDMA_AHB_START_ADDR_1 0x1cf2 	///../ucode/register.h:8576
+#define P_RDMA_AHB_START_ADDR_1 		VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_1)
+#define RDMA_AHB_END_ADDR_1 0x1cf3 	///../ucode/register.h:8578
+#define P_RDMA_AHB_END_ADDR_1 		VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_1)
+#define RDMA_AHB_START_ADDR_2 0x1cf4 	///../ucode/register.h:8580
+#define P_RDMA_AHB_START_ADDR_2 		VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_2)
+#define RDMA_AHB_END_ADDR_2 0x1cf5 	///../ucode/register.h:8582
+#define P_RDMA_AHB_END_ADDR_2 		VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_2)
+#define RDMA_AHB_START_ADDR_3 0x1cf6 	///../ucode/register.h:8584
+#define P_RDMA_AHB_START_ADDR_3 		VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_3)
+#define RDMA_AHB_END_ADDR_3 0x1cf7 	///../ucode/register.h:8586
+#define P_RDMA_AHB_END_ADDR_3 		VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_3)
+#define RDMA_ACCESS_AUTO 0x1cf8 	///../ucode/register.h:8599
+#define P_RDMA_ACCESS_AUTO 		VCBUS_REG_ADDR(RDMA_ACCESS_AUTO)
+#define RDMA_ACCESS_MAN 0x1cf9 	///../ucode/register.h:8605
+#define P_RDMA_ACCESS_MAN 		VCBUS_REG_ADDR(RDMA_ACCESS_MAN)
+#define RDMA_CTRL 0x1cfa 	///../ucode/register.h:8623
+#define P_RDMA_CTRL 		VCBUS_REG_ADDR(RDMA_CTRL)
+#define RDMA_STATUS 0x1cfb 	///../ucode/register.h:8633
+#define P_RDMA_STATUS 		VCBUS_REG_ADDR(RDMA_STATUS)
+#define L_GAMMA_CNTL_PORT 0x1400 	///../ucode/register.h:8646
+#define P_L_GAMMA_CNTL_PORT 		VCBUS_REG_ADDR(L_GAMMA_CNTL_PORT)
+#define L_GAMMA_DATA_PORT 0x1401 	///../ucode/register.h:8647
+#define P_L_GAMMA_DATA_PORT 		VCBUS_REG_ADDR(L_GAMMA_DATA_PORT)
+#define L_GAMMA_ADDR_PORT 0x1402 	///../ucode/register.h:8648
+#define P_L_GAMMA_ADDR_PORT 		VCBUS_REG_ADDR(L_GAMMA_ADDR_PORT)
+#define L_GAMMA_VCOM_HSWITCH_ADDR 0x1403 	///../ucode/register.h:8649
+#define P_L_GAMMA_VCOM_HSWITCH_ADDR 		VCBUS_REG_ADDR(L_GAMMA_VCOM_HSWITCH_ADDR)
+#define L_RGB_BASE_ADDR 0x1405 	///../ucode/register.h:8650
+#define P_L_RGB_BASE_ADDR 		VCBUS_REG_ADDR(L_RGB_BASE_ADDR)
+#define L_RGB_COEFF_ADDR 0x1406 	///../ucode/register.h:8651
+#define P_L_RGB_COEFF_ADDR 		VCBUS_REG_ADDR(L_RGB_COEFF_ADDR)
+#define L_POL_CNTL_ADDR 0x1407 	///../ucode/register.h:8652
+#define P_L_POL_CNTL_ADDR 		VCBUS_REG_ADDR(L_POL_CNTL_ADDR)
+#define L_DITH_CNTL_ADDR 0x1408 	///../ucode/register.h:8653
+#define P_L_DITH_CNTL_ADDR 		VCBUS_REG_ADDR(L_DITH_CNTL_ADDR)
+#define L_GAMMA_PROBE_CTRL 0x1409 	///../ucode/register.h:8654
+#define P_L_GAMMA_PROBE_CTRL 		VCBUS_REG_ADDR(L_GAMMA_PROBE_CTRL)
+#define L_GAMMA_PROBE_COLOR_L 0x140a 	///../ucode/register.h:8656
+#define P_L_GAMMA_PROBE_COLOR_L 		VCBUS_REG_ADDR(L_GAMMA_PROBE_COLOR_L)
+#define L_GAMMA_PROBE_COLOR_H 0x140b 	///../ucode/register.h:8657
+#define P_L_GAMMA_PROBE_COLOR_H 		VCBUS_REG_ADDR(L_GAMMA_PROBE_COLOR_H)
+#define L_GAMMA_PROBE_HL_COLOR 0x140c 	///../ucode/register.h:8658
+#define P_L_GAMMA_PROBE_HL_COLOR 		VCBUS_REG_ADDR(L_GAMMA_PROBE_HL_COLOR)
+#define L_GAMMA_PROBE_POS_X 0x140d 	///../ucode/register.h:8659
+#define P_L_GAMMA_PROBE_POS_X 		VCBUS_REG_ADDR(L_GAMMA_PROBE_POS_X)
+#define L_GAMMA_PROBE_POS_Y 0x140e 	///../ucode/register.h:8660
+#define P_L_GAMMA_PROBE_POS_Y 		VCBUS_REG_ADDR(L_GAMMA_PROBE_POS_Y)
+#define L_STH1_HS_ADDR 0x1410 	///../ucode/register.h:8661
+#define P_L_STH1_HS_ADDR 		VCBUS_REG_ADDR(L_STH1_HS_ADDR)
+#define L_STH1_HE_ADDR 0x1411 	///../ucode/register.h:8662
+#define P_L_STH1_HE_ADDR 		VCBUS_REG_ADDR(L_STH1_HE_ADDR)
+#define L_STH1_VS_ADDR 0x1412 	///../ucode/register.h:8663
+#define P_L_STH1_VS_ADDR 		VCBUS_REG_ADDR(L_STH1_VS_ADDR)
+#define L_STH1_VE_ADDR 0x1413 	///../ucode/register.h:8664
+#define P_L_STH1_VE_ADDR 		VCBUS_REG_ADDR(L_STH1_VE_ADDR)
+#define L_STH2_HS_ADDR 0x1414 	///../ucode/register.h:8665
+#define P_L_STH2_HS_ADDR 		VCBUS_REG_ADDR(L_STH2_HS_ADDR)
+#define L_STH2_HE_ADDR 0x1415 	///../ucode/register.h:8666
+#define P_L_STH2_HE_ADDR 		VCBUS_REG_ADDR(L_STH2_HE_ADDR)
+#define L_STH2_VS_ADDR 0x1416 	///../ucode/register.h:8667
+#define P_L_STH2_VS_ADDR 		VCBUS_REG_ADDR(L_STH2_VS_ADDR)
+#define L_STH2_VE_ADDR 0x1417 	///../ucode/register.h:8668
+#define P_L_STH2_VE_ADDR 		VCBUS_REG_ADDR(L_STH2_VE_ADDR)
+#define L_OEH_HS_ADDR 0x1418 	///../ucode/register.h:8669
+#define P_L_OEH_HS_ADDR 		VCBUS_REG_ADDR(L_OEH_HS_ADDR)
+#define L_OEH_HE_ADDR 0x1419 	///../ucode/register.h:8670
+#define P_L_OEH_HE_ADDR 		VCBUS_REG_ADDR(L_OEH_HE_ADDR)
+#define L_OEH_VS_ADDR 0x141a 	///../ucode/register.h:8671
+#define P_L_OEH_VS_ADDR 		VCBUS_REG_ADDR(L_OEH_VS_ADDR)
+#define L_OEH_VE_ADDR 0x141b 	///../ucode/register.h:8672
+#define P_L_OEH_VE_ADDR 		VCBUS_REG_ADDR(L_OEH_VE_ADDR)
+#define L_VCOM_HSWITCH_ADDR 0x141c 	///../ucode/register.h:8673
+#define P_L_VCOM_HSWITCH_ADDR 		VCBUS_REG_ADDR(L_VCOM_HSWITCH_ADDR)
+#define L_VCOM_VS_ADDR 0x141d 	///../ucode/register.h:8674
+#define P_L_VCOM_VS_ADDR 		VCBUS_REG_ADDR(L_VCOM_VS_ADDR)
+#define L_VCOM_VE_ADDR 0x141e 	///../ucode/register.h:8675
+#define P_L_VCOM_VE_ADDR 		VCBUS_REG_ADDR(L_VCOM_VE_ADDR)
+#define L_CPV1_HS_ADDR 0x141f 	///../ucode/register.h:8676
+#define P_L_CPV1_HS_ADDR 		VCBUS_REG_ADDR(L_CPV1_HS_ADDR)
+#define L_CPV1_HE_ADDR 0x1420 	///../ucode/register.h:8677
+#define P_L_CPV1_HE_ADDR 		VCBUS_REG_ADDR(L_CPV1_HE_ADDR)
+#define L_CPV1_VS_ADDR 0x1421 	///../ucode/register.h:8678
+#define P_L_CPV1_VS_ADDR 		VCBUS_REG_ADDR(L_CPV1_VS_ADDR)
+#define L_CPV1_VE_ADDR 0x1422 	///../ucode/register.h:8679
+#define P_L_CPV1_VE_ADDR 		VCBUS_REG_ADDR(L_CPV1_VE_ADDR)
+#define L_CPV2_HS_ADDR 0x1423 	///../ucode/register.h:8680
+#define P_L_CPV2_HS_ADDR 		VCBUS_REG_ADDR(L_CPV2_HS_ADDR)
+#define L_CPV2_HE_ADDR 0x1424 	///../ucode/register.h:8681
+#define P_L_CPV2_HE_ADDR 		VCBUS_REG_ADDR(L_CPV2_HE_ADDR)
+#define L_CPV2_VS_ADDR 0x1425 	///../ucode/register.h:8682
+#define P_L_CPV2_VS_ADDR 		VCBUS_REG_ADDR(L_CPV2_VS_ADDR)
+#define L_CPV2_VE_ADDR 0x1426 	///../ucode/register.h:8683
+#define P_L_CPV2_VE_ADDR 		VCBUS_REG_ADDR(L_CPV2_VE_ADDR)
+#define L_STV1_HS_ADDR 0x1427 	///../ucode/register.h:8684
+#define P_L_STV1_HS_ADDR 		VCBUS_REG_ADDR(L_STV1_HS_ADDR)
+#define L_STV1_HE_ADDR 0x1428 	///../ucode/register.h:8685
+#define P_L_STV1_HE_ADDR 		VCBUS_REG_ADDR(L_STV1_HE_ADDR)
+#define L_STV1_VS_ADDR 0x1429 	///../ucode/register.h:8686
+#define P_L_STV1_VS_ADDR 		VCBUS_REG_ADDR(L_STV1_VS_ADDR)
+#define L_STV1_VE_ADDR 0x142a 	///../ucode/register.h:8687
+#define P_L_STV1_VE_ADDR 		VCBUS_REG_ADDR(L_STV1_VE_ADDR)
+#define L_STV2_HS_ADDR 0x142b 	///../ucode/register.h:8688
+#define P_L_STV2_HS_ADDR 		VCBUS_REG_ADDR(L_STV2_HS_ADDR)
+#define L_STV2_HE_ADDR 0x142c 	///../ucode/register.h:8689
+#define P_L_STV2_HE_ADDR 		VCBUS_REG_ADDR(L_STV2_HE_ADDR)
+#define L_STV2_VS_ADDR 0x142d 	///../ucode/register.h:8690
+#define P_L_STV2_VS_ADDR 		VCBUS_REG_ADDR(L_STV2_VS_ADDR)
+#define L_STV2_VE_ADDR 0x142e 	///../ucode/register.h:8691
+#define P_L_STV2_VE_ADDR 		VCBUS_REG_ADDR(L_STV2_VE_ADDR)
+#define L_OEV1_HS_ADDR 0x142f 	///../ucode/register.h:8692
+#define P_L_OEV1_HS_ADDR 		VCBUS_REG_ADDR(L_OEV1_HS_ADDR)
+#define L_OEV1_HE_ADDR 0x1430 	///../ucode/register.h:8693
+#define P_L_OEV1_HE_ADDR 		VCBUS_REG_ADDR(L_OEV1_HE_ADDR)
+#define L_OEV1_VS_ADDR 0x1431 	///../ucode/register.h:8694
+#define P_L_OEV1_VS_ADDR 		VCBUS_REG_ADDR(L_OEV1_VS_ADDR)
+#define L_OEV1_VE_ADDR 0x1432 	///../ucode/register.h:8695
+#define P_L_OEV1_VE_ADDR 		VCBUS_REG_ADDR(L_OEV1_VE_ADDR)
+#define L_OEV2_HS_ADDR 0x1433 	///../ucode/register.h:8696
+#define P_L_OEV2_HS_ADDR 		VCBUS_REG_ADDR(L_OEV2_HS_ADDR)
+#define L_OEV2_HE_ADDR 0x1434 	///../ucode/register.h:8697
+#define P_L_OEV2_HE_ADDR 		VCBUS_REG_ADDR(L_OEV2_HE_ADDR)
+#define L_OEV2_VS_ADDR 0x1435 	///../ucode/register.h:8698
+#define P_L_OEV2_VS_ADDR 		VCBUS_REG_ADDR(L_OEV2_VS_ADDR)
+#define L_OEV2_VE_ADDR 0x1436 	///../ucode/register.h:8699
+#define P_L_OEV2_VE_ADDR 		VCBUS_REG_ADDR(L_OEV2_VE_ADDR)
+#define L_OEV3_HS_ADDR 0x1437 	///../ucode/register.h:8700
+#define P_L_OEV3_HS_ADDR 		VCBUS_REG_ADDR(L_OEV3_HS_ADDR)
+#define L_OEV3_HE_ADDR 0x1438 	///../ucode/register.h:8701
+#define P_L_OEV3_HE_ADDR 		VCBUS_REG_ADDR(L_OEV3_HE_ADDR)
+#define L_OEV3_VS_ADDR 0x1439 	///../ucode/register.h:8702
+#define P_L_OEV3_VS_ADDR 		VCBUS_REG_ADDR(L_OEV3_VS_ADDR)
+#define L_OEV3_VE_ADDR 0x143a 	///../ucode/register.h:8703
+#define P_L_OEV3_VE_ADDR 		VCBUS_REG_ADDR(L_OEV3_VE_ADDR)
+#define L_LCD_PWR_ADDR 0x143b 	///../ucode/register.h:8704
+#define P_L_LCD_PWR_ADDR 		VCBUS_REG_ADDR(L_LCD_PWR_ADDR)
+#define L_LCD_PWM0_LO_ADDR 0x143c 	///../ucode/register.h:8705
+#define P_L_LCD_PWM0_LO_ADDR 		VCBUS_REG_ADDR(L_LCD_PWM0_LO_ADDR)
+#define L_LCD_PWM0_HI_ADDR 0x143d 	///../ucode/register.h:8706
+#define P_L_LCD_PWM0_HI_ADDR 		VCBUS_REG_ADDR(L_LCD_PWM0_HI_ADDR)
+#define L_LCD_PWM1_LO_ADDR 0x143e 	///../ucode/register.h:8707
+#define P_L_LCD_PWM1_LO_ADDR 		VCBUS_REG_ADDR(L_LCD_PWM1_LO_ADDR)
+#define L_LCD_PWM1_HI_ADDR 0x143f 	///../ucode/register.h:8708
+#define P_L_LCD_PWM1_HI_ADDR 		VCBUS_REG_ADDR(L_LCD_PWM1_HI_ADDR)
+#define L_INV_CNT_ADDR 0x1440 	///../ucode/register.h:8709
+#define P_L_INV_CNT_ADDR 		VCBUS_REG_ADDR(L_INV_CNT_ADDR)
+#define L_TCON_MISC_SEL_ADDR 0x1441 	///../ucode/register.h:8710
+#define P_L_TCON_MISC_SEL_ADDR 		VCBUS_REG_ADDR(L_TCON_MISC_SEL_ADDR)
+#define L_DUAL_PORT_CNTL_ADDR 0x1442 	///../ucode/register.h:8711
+#define P_L_DUAL_PORT_CNTL_ADDR 		VCBUS_REG_ADDR(L_DUAL_PORT_CNTL_ADDR)
+#define MLVDS_CLK_CTL1_HI 0x1443 	///../ucode/register.h:8712
+#define P_MLVDS_CLK_CTL1_HI 		VCBUS_REG_ADDR(MLVDS_CLK_CTL1_HI)
+#define MLVDS_CLK_CTL1_LO 0x1444 	///../ucode/register.h:8713
+#define P_MLVDS_CLK_CTL1_LO 		VCBUS_REG_ADDR(MLVDS_CLK_CTL1_LO)
+#define L_TCON_DOUBLE_CTL 0x1449 	///../ucode/register.h:8717
+#define P_L_TCON_DOUBLE_CTL 		VCBUS_REG_ADDR(L_TCON_DOUBLE_CTL)
+#define L_TCON_PATTERN_HI 0x144a 	///../ucode/register.h:8718
+#define P_L_TCON_PATTERN_HI 		VCBUS_REG_ADDR(L_TCON_PATTERN_HI)
+#define L_TCON_PATTERN_LO 0x144b 	///../ucode/register.h:8719
+#define P_L_TCON_PATTERN_LO 		VCBUS_REG_ADDR(L_TCON_PATTERN_LO)
+#define LDIM_BL_ADDR_PORT 0x144e 	///../ucode/register.h:8720
+#define P_LDIM_BL_ADDR_PORT 		VCBUS_REG_ADDR(LDIM_BL_ADDR_PORT)
+#define LDIM_BL_DATA_PORT 0x144f 	///../ucode/register.h:8721
+#define P_LDIM_BL_DATA_PORT 		VCBUS_REG_ADDR(LDIM_BL_DATA_PORT)
+#define L_DE_HS_ADDR 0x1451 	///../ucode/register.h:8722
+#define P_L_DE_HS_ADDR 		VCBUS_REG_ADDR(L_DE_HS_ADDR)
+#define L_DE_HE_ADDR 0x1452 	///../ucode/register.h:8723
+#define P_L_DE_HE_ADDR 		VCBUS_REG_ADDR(L_DE_HE_ADDR)
+#define L_DE_VS_ADDR 0x1453 	///../ucode/register.h:8724
+#define P_L_DE_VS_ADDR 		VCBUS_REG_ADDR(L_DE_VS_ADDR)
+#define L_DE_VE_ADDR 0x1454 	///../ucode/register.h:8725
+#define P_L_DE_VE_ADDR 		VCBUS_REG_ADDR(L_DE_VE_ADDR)
+#define L_HSYNC_HS_ADDR 0x1455 	///../ucode/register.h:8726
+#define P_L_HSYNC_HS_ADDR 		VCBUS_REG_ADDR(L_HSYNC_HS_ADDR)
+#define L_HSYNC_HE_ADDR 0x1456 	///../ucode/register.h:8727
+#define P_L_HSYNC_HE_ADDR 		VCBUS_REG_ADDR(L_HSYNC_HE_ADDR)
+#define L_HSYNC_VS_ADDR 0x1457 	///../ucode/register.h:8728
+#define P_L_HSYNC_VS_ADDR 		VCBUS_REG_ADDR(L_HSYNC_VS_ADDR)
+#define L_HSYNC_VE_ADDR 0x1458 	///../ucode/register.h:8729
+#define P_L_HSYNC_VE_ADDR 		VCBUS_REG_ADDR(L_HSYNC_VE_ADDR)
+#define L_VSYNC_HS_ADDR 0x1459 	///../ucode/register.h:8730
+#define P_L_VSYNC_HS_ADDR 		VCBUS_REG_ADDR(L_VSYNC_HS_ADDR)
+#define L_VSYNC_HE_ADDR 0x145a 	///../ucode/register.h:8731
+#define P_L_VSYNC_HE_ADDR 		VCBUS_REG_ADDR(L_VSYNC_HE_ADDR)
+#define L_VSYNC_VS_ADDR 0x145b 	///../ucode/register.h:8732
+#define P_L_VSYNC_VS_ADDR 		VCBUS_REG_ADDR(L_VSYNC_VS_ADDR)
+#define L_VSYNC_VE_ADDR 0x145c 	///../ucode/register.h:8733
+#define P_L_VSYNC_VE_ADDR 		VCBUS_REG_ADDR(L_VSYNC_VE_ADDR)
+#define L_LCD_MCU_CTL 0x145d 	///../ucode/register.h:8743
+#define P_L_LCD_MCU_CTL 		VCBUS_REG_ADDR(L_LCD_MCU_CTL)
+#define DUAL_MLVDS_CTL 0x1460 	///../ucode/register.h:8751
+#define P_DUAL_MLVDS_CTL 		VCBUS_REG_ADDR(DUAL_MLVDS_CTL)
+#define DUAL_MLVDS_LINE_START 0x1461 	///../ucode/register.h:8753
+#define P_DUAL_MLVDS_LINE_START 		VCBUS_REG_ADDR(DUAL_MLVDS_LINE_START)
+#define DUAL_MLVDS_LINE_END 0x1462 	///../ucode/register.h:8755
+#define P_DUAL_MLVDS_LINE_END 		VCBUS_REG_ADDR(DUAL_MLVDS_LINE_END)
+#define DUAL_MLVDS_PIXEL_W_START_L 0x1463 	///../ucode/register.h:8757
+#define P_DUAL_MLVDS_PIXEL_W_START_L 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_W_START_L)
+#define DUAL_MLVDS_PIXEL_W_END_L 0x1464 	///../ucode/register.h:8759
+#define P_DUAL_MLVDS_PIXEL_W_END_L 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_W_END_L)
+#define DUAL_MLVDS_PIXEL_W_START_R 0x1465 	///../ucode/register.h:8761
+#define P_DUAL_MLVDS_PIXEL_W_START_R 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_W_START_R)
+#define DUAL_MLVDS_PIXEL_W_END_R 0x1466 	///../ucode/register.h:8763
+#define P_DUAL_MLVDS_PIXEL_W_END_R 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_W_END_R)
+#define DUAL_MLVDS_PIXEL_R_START_L 0x1467 	///../ucode/register.h:8765
+#define P_DUAL_MLVDS_PIXEL_R_START_L 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_R_START_L)
+#define DUAL_MLVDS_PIXEL_R_CNT_L 0x1468 	///../ucode/register.h:8767
+#define P_DUAL_MLVDS_PIXEL_R_CNT_L 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_R_CNT_L)
+#define DUAL_MLVDS_PIXEL_R_START_R 0x1469 	///../ucode/register.h:8769
+#define P_DUAL_MLVDS_PIXEL_R_START_R 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_R_START_R)
+#define DUAL_MLVDS_PIXEL_R_CNT_R 0x146a 	///../ucode/register.h:8771
+#define P_DUAL_MLVDS_PIXEL_R_CNT_R 		VCBUS_REG_ADDR(DUAL_MLVDS_PIXEL_R_CNT_R)
+#define V_INVERSION_PIXEL 0x1470 	///../ucode/register.h:8774
+#define P_V_INVERSION_PIXEL 		VCBUS_REG_ADDR(V_INVERSION_PIXEL)
+#define V_INVERSION_LINE 0x1471 	///../ucode/register.h:8777
+#define P_V_INVERSION_LINE 		VCBUS_REG_ADDR(V_INVERSION_LINE)
+#define V_INVERSION_CONTROL 0x1472 	///../ucode/register.h:8784
+#define P_V_INVERSION_CONTROL 		VCBUS_REG_ADDR(V_INVERSION_CONTROL)
+#define MLVDS2_CONTROL 0x1474 	///../ucode/register.h:8785
+#define P_MLVDS2_CONTROL 		VCBUS_REG_ADDR(MLVDS2_CONTROL)
+#define MLVDS2_CONFIG_HI 0x1475 	///../ucode/register.h:8797
+#define P_MLVDS2_CONFIG_HI 		VCBUS_REG_ADDR(MLVDS2_CONFIG_HI)
+#define MLVDS2_CONFIG_LO 0x1476 	///../ucode/register.h:8798
+#define P_MLVDS2_CONFIG_LO 		VCBUS_REG_ADDR(MLVDS2_CONFIG_LO)
+#define MLVDS2_DUAL_GATE_WR_START 0x1477 	///../ucode/register.h:8811
+#define P_MLVDS2_DUAL_GATE_WR_START 		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_WR_START)
+#define MLVDS2_DUAL_GATE_WR_END 0x1478 	///../ucode/register.h:8813
+#define P_MLVDS2_DUAL_GATE_WR_END 		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_WR_END)
+#define MLVDS2_DUAL_GATE_RD_START 0x1479 	///../ucode/register.h:8815
+#define P_MLVDS2_DUAL_GATE_RD_START 		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_RD_START)
+#define MLVDS2_DUAL_GATE_RD_END 0x147a 	///../ucode/register.h:8817
+#define P_MLVDS2_DUAL_GATE_RD_END 		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_RD_END)
+#define MLVDS2_SECOND_RESET_CTL 0x147b 	///../ucode/register.h:8819
+#define P_MLVDS2_SECOND_RESET_CTL 		VCBUS_REG_ADDR(MLVDS2_SECOND_RESET_CTL)
+#define MLVDS2_DUAL_GATE_CTL_HI 0x147c 	///../ucode/register.h:8821
+#define P_MLVDS2_DUAL_GATE_CTL_HI 		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_CTL_HI)
+#define MLVDS2_DUAL_GATE_CTL_LO 0x147d 	///../ucode/register.h:8822
+#define P_MLVDS2_DUAL_GATE_CTL_LO 		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_CTL_LO)
+#define MLVDS2_RESET_CONFIG_HI 0x147e 	///../ucode/register.h:8829
+#define P_MLVDS2_RESET_CONFIG_HI 		VCBUS_REG_ADDR(MLVDS2_RESET_CONFIG_HI)
+#define MLVDS2_RESET_CONFIG_LO 0x147f 	///../ucode/register.h:8830
+#define P_MLVDS2_RESET_CONFIG_LO 		VCBUS_REG_ADDR(MLVDS2_RESET_CONFIG_LO)
+#define GAMMA_CNTL_PORT 0x1480 	///../ucode/register.h:8840
+#define P_GAMMA_CNTL_PORT 		VCBUS_REG_ADDR(GAMMA_CNTL_PORT)
+#define GAMMA_DATA_PORT 0x1481 	///../ucode/register.h:8849
+#define P_GAMMA_DATA_PORT 		VCBUS_REG_ADDR(GAMMA_DATA_PORT)
+#define GAMMA_ADDR_PORT 0x1482 	///../ucode/register.h:8850
+#define P_GAMMA_ADDR_PORT 		VCBUS_REG_ADDR(GAMMA_ADDR_PORT)
+#define GAMMA_VCOM_HSWITCH_ADDR 0x1483 	///../ucode/register.h:8858
+#define P_GAMMA_VCOM_HSWITCH_ADDR 		VCBUS_REG_ADDR(GAMMA_VCOM_HSWITCH_ADDR)
+#define RGB_BASE_ADDR 0x1485 	///../ucode/register.h:8859
+#define P_RGB_BASE_ADDR 		VCBUS_REG_ADDR(RGB_BASE_ADDR)
+#define RGB_COEFF_ADDR 0x1486 	///../ucode/register.h:8860
+#define P_RGB_COEFF_ADDR 		VCBUS_REG_ADDR(RGB_COEFF_ADDR)
+#define POL_CNTL_ADDR 0x1487 	///../ucode/register.h:8861
+#define P_POL_CNTL_ADDR 		VCBUS_REG_ADDR(POL_CNTL_ADDR)
+#define DITH_CNTL_ADDR 0x1488 	///../ucode/register.h:8875
+#define P_DITH_CNTL_ADDR 		VCBUS_REG_ADDR(DITH_CNTL_ADDR)
+#define GAMMA_PROBE_CTRL 0x1489 	///../ucode/register.h:8885
+#define P_GAMMA_PROBE_CTRL 		VCBUS_REG_ADDR(GAMMA_PROBE_CTRL)
+#define GAMMA_PROBE_COLOR_L 0x148a 	///../ucode/register.h:8888
+#define P_GAMMA_PROBE_COLOR_L 		VCBUS_REG_ADDR(GAMMA_PROBE_COLOR_L)
+#define GAMMA_PROBE_COLOR_H 0x148b 	///../ucode/register.h:8892
+#define P_GAMMA_PROBE_COLOR_H 		VCBUS_REG_ADDR(GAMMA_PROBE_COLOR_H)
+#define GAMMA_PROBE_HL_COLOR 0x148c 	///../ucode/register.h:8894
+#define P_GAMMA_PROBE_HL_COLOR 		VCBUS_REG_ADDR(GAMMA_PROBE_HL_COLOR)
+#define GAMMA_PROBE_POS_X 0x148d 	///../ucode/register.h:8896
+#define P_GAMMA_PROBE_POS_X 		VCBUS_REG_ADDR(GAMMA_PROBE_POS_X)
+#define GAMMA_PROBE_POS_Y 0x148e 	///../ucode/register.h:8898
+#define P_GAMMA_PROBE_POS_Y 		VCBUS_REG_ADDR(GAMMA_PROBE_POS_Y)
+#define STH1_HS_ADDR 0x1490 	///../ucode/register.h:8899
+#define P_STH1_HS_ADDR 		VCBUS_REG_ADDR(STH1_HS_ADDR)
+#define STH1_HE_ADDR 0x1491 	///../ucode/register.h:8900
+#define P_STH1_HE_ADDR 		VCBUS_REG_ADDR(STH1_HE_ADDR)
+#define STH1_VS_ADDR 0x1492 	///../ucode/register.h:8901
+#define P_STH1_VS_ADDR 		VCBUS_REG_ADDR(STH1_VS_ADDR)
+#define STH1_VE_ADDR 0x1493 	///../ucode/register.h:8902
+#define P_STH1_VE_ADDR 		VCBUS_REG_ADDR(STH1_VE_ADDR)
+#define STH2_HS_ADDR 0x1494 	///../ucode/register.h:8903
+#define P_STH2_HS_ADDR 		VCBUS_REG_ADDR(STH2_HS_ADDR)
+#define STH2_HE_ADDR 0x1495 	///../ucode/register.h:8904
+#define P_STH2_HE_ADDR 		VCBUS_REG_ADDR(STH2_HE_ADDR)
+#define STH2_VS_ADDR 0x1496 	///../ucode/register.h:8905
+#define P_STH2_VS_ADDR 		VCBUS_REG_ADDR(STH2_VS_ADDR)
+#define STH2_VE_ADDR 0x1497 	///../ucode/register.h:8906
+#define P_STH2_VE_ADDR 		VCBUS_REG_ADDR(STH2_VE_ADDR)
+#define OEH_HS_ADDR 0x1498 	///../ucode/register.h:8907
+#define P_OEH_HS_ADDR 		VCBUS_REG_ADDR(OEH_HS_ADDR)
+#define OEH_HE_ADDR 0x1499 	///../ucode/register.h:8908
+#define P_OEH_HE_ADDR 		VCBUS_REG_ADDR(OEH_HE_ADDR)
+#define OEH_VS_ADDR 0x149a 	///../ucode/register.h:8909
+#define P_OEH_VS_ADDR 		VCBUS_REG_ADDR(OEH_VS_ADDR)
+#define OEH_VE_ADDR 0x149b 	///../ucode/register.h:8910
+#define P_OEH_VE_ADDR 		VCBUS_REG_ADDR(OEH_VE_ADDR)
+#define VCOM_HSWITCH_ADDR 0x149c 	///../ucode/register.h:8911
+#define P_VCOM_HSWITCH_ADDR 		VCBUS_REG_ADDR(VCOM_HSWITCH_ADDR)
+#define VCOM_VS_ADDR 0x149d 	///../ucode/register.h:8912
+#define P_VCOM_VS_ADDR 		VCBUS_REG_ADDR(VCOM_VS_ADDR)
+#define VCOM_VE_ADDR 0x149e 	///../ucode/register.h:8913
+#define P_VCOM_VE_ADDR 		VCBUS_REG_ADDR(VCOM_VE_ADDR)
+#define CPV1_HS_ADDR 0x149f 	///../ucode/register.h:8914
+#define P_CPV1_HS_ADDR 		VCBUS_REG_ADDR(CPV1_HS_ADDR)
+#define CPV1_HE_ADDR 0x14a0 	///../ucode/register.h:8915
+#define P_CPV1_HE_ADDR 		VCBUS_REG_ADDR(CPV1_HE_ADDR)
+#define CPV1_VS_ADDR 0x14a1 	///../ucode/register.h:8916
+#define P_CPV1_VS_ADDR 		VCBUS_REG_ADDR(CPV1_VS_ADDR)
+#define CPV1_VE_ADDR 0x14a2 	///../ucode/register.h:8917
+#define P_CPV1_VE_ADDR 		VCBUS_REG_ADDR(CPV1_VE_ADDR)
+#define CPV2_HS_ADDR 0x14a3 	///../ucode/register.h:8918
+#define P_CPV2_HS_ADDR 		VCBUS_REG_ADDR(CPV2_HS_ADDR)
+#define CPV2_HE_ADDR 0x14a4 	///../ucode/register.h:8919
+#define P_CPV2_HE_ADDR 		VCBUS_REG_ADDR(CPV2_HE_ADDR)
+#define CPV2_VS_ADDR 0x14a5 	///../ucode/register.h:8920
+#define P_CPV2_VS_ADDR 		VCBUS_REG_ADDR(CPV2_VS_ADDR)
+#define CPV2_VE_ADDR 0x14a6 	///../ucode/register.h:8921
+#define P_CPV2_VE_ADDR 		VCBUS_REG_ADDR(CPV2_VE_ADDR)
+#define STV1_HS_ADDR 0x14a7 	///../ucode/register.h:8922
+#define P_STV1_HS_ADDR 		VCBUS_REG_ADDR(STV1_HS_ADDR)
+#define STV1_HE_ADDR 0x14a8 	///../ucode/register.h:8923
+#define P_STV1_HE_ADDR 		VCBUS_REG_ADDR(STV1_HE_ADDR)
+#define STV1_VS_ADDR 0x14a9 	///../ucode/register.h:8924
+#define P_STV1_VS_ADDR 		VCBUS_REG_ADDR(STV1_VS_ADDR)
+#define STV1_VE_ADDR 0x14aa 	///../ucode/register.h:8925
+#define P_STV1_VE_ADDR 		VCBUS_REG_ADDR(STV1_VE_ADDR)
+#define STV2_HS_ADDR 0x14ab 	///../ucode/register.h:8926
+#define P_STV2_HS_ADDR 		VCBUS_REG_ADDR(STV2_HS_ADDR)
+#define STV2_HE_ADDR 0x14ac 	///../ucode/register.h:8927
+#define P_STV2_HE_ADDR 		VCBUS_REG_ADDR(STV2_HE_ADDR)
+#define STV2_VS_ADDR 0x14ad 	///../ucode/register.h:8928
+#define P_STV2_VS_ADDR 		VCBUS_REG_ADDR(STV2_VS_ADDR)
+#define STV2_VE_ADDR 0x14ae 	///../ucode/register.h:8929
+#define P_STV2_VE_ADDR 		VCBUS_REG_ADDR(STV2_VE_ADDR)
+#define OEV1_HS_ADDR 0x14af 	///../ucode/register.h:8930
+#define P_OEV1_HS_ADDR 		VCBUS_REG_ADDR(OEV1_HS_ADDR)
+#define OEV1_HE_ADDR 0x14b0 	///../ucode/register.h:8931
+#define P_OEV1_HE_ADDR 		VCBUS_REG_ADDR(OEV1_HE_ADDR)
+#define OEV1_VS_ADDR 0x14b1 	///../ucode/register.h:8932
+#define P_OEV1_VS_ADDR 		VCBUS_REG_ADDR(OEV1_VS_ADDR)
+#define OEV1_VE_ADDR 0x14b2 	///../ucode/register.h:8933
+#define P_OEV1_VE_ADDR 		VCBUS_REG_ADDR(OEV1_VE_ADDR)
+#define OEV2_HS_ADDR 0x14b3 	///../ucode/register.h:8934
+#define P_OEV2_HS_ADDR 		VCBUS_REG_ADDR(OEV2_HS_ADDR)
+#define OEV2_HE_ADDR 0x14b4 	///../ucode/register.h:8935
+#define P_OEV2_HE_ADDR 		VCBUS_REG_ADDR(OEV2_HE_ADDR)
+#define OEV2_VS_ADDR 0x14b5 	///../ucode/register.h:8936
+#define P_OEV2_VS_ADDR 		VCBUS_REG_ADDR(OEV2_VS_ADDR)
+#define OEV2_VE_ADDR 0x14b6 	///../ucode/register.h:8937
+#define P_OEV2_VE_ADDR 		VCBUS_REG_ADDR(OEV2_VE_ADDR)
+#define OEV3_HS_ADDR 0x14b7 	///../ucode/register.h:8938
+#define P_OEV3_HS_ADDR 		VCBUS_REG_ADDR(OEV3_HS_ADDR)
+#define OEV3_HE_ADDR 0x14b8 	///../ucode/register.h:8939
+#define P_OEV3_HE_ADDR 		VCBUS_REG_ADDR(OEV3_HE_ADDR)
+#define OEV3_VS_ADDR 0x14b9 	///../ucode/register.h:8940
+#define P_OEV3_VS_ADDR 		VCBUS_REG_ADDR(OEV3_VS_ADDR)
+#define OEV3_VE_ADDR 0x14ba 	///../ucode/register.h:8941
+#define P_OEV3_VE_ADDR 		VCBUS_REG_ADDR(OEV3_VE_ADDR)
+#define LCD_PWR_ADDR 0x14bb 	///../ucode/register.h:8942
+#define P_LCD_PWR_ADDR 		VCBUS_REG_ADDR(LCD_PWR_ADDR)
+#define LCD_PWM0_LO_ADDR 0x14bc 	///../ucode/register.h:8947
+#define P_LCD_PWM0_LO_ADDR 		VCBUS_REG_ADDR(LCD_PWM0_LO_ADDR)
+#define LCD_PWM0_HI_ADDR 0x14bd 	///../ucode/register.h:8948
+#define P_LCD_PWM0_HI_ADDR 		VCBUS_REG_ADDR(LCD_PWM0_HI_ADDR)
+#define LCD_PWM1_LO_ADDR 0x14be 	///../ucode/register.h:8949
+#define P_LCD_PWM1_LO_ADDR 		VCBUS_REG_ADDR(LCD_PWM1_LO_ADDR)
+#define LCD_PWM1_HI_ADDR 0x14bf 	///../ucode/register.h:8950
+#define P_LCD_PWM1_HI_ADDR 		VCBUS_REG_ADDR(LCD_PWM1_HI_ADDR)
+#define INV_CNT_ADDR 0x14c0 	///../ucode/register.h:8951
+#define P_INV_CNT_ADDR 		VCBUS_REG_ADDR(INV_CNT_ADDR)
+#define TCON_MISC_SEL_ADDR 0x14c1 	///../ucode/register.h:8955
+#define P_TCON_MISC_SEL_ADDR 		VCBUS_REG_ADDR(TCON_MISC_SEL_ADDR)
+#define DUAL_PORT_CNTL_ADDR 0x14c2 	///../ucode/register.h:8969
+#define P_DUAL_PORT_CNTL_ADDR 		VCBUS_REG_ADDR(DUAL_PORT_CNTL_ADDR)
+#define MLVDS_CONTROL 0x14c3 	///../ucode/register.h:8982
+#define P_MLVDS_CONTROL 		VCBUS_REG_ADDR(MLVDS_CONTROL)
+#define MLVDS_RESET_PATTERN_HI 0x14c4 	///../ucode/register.h:8994
+#define P_MLVDS_RESET_PATTERN_HI 		VCBUS_REG_ADDR(MLVDS_RESET_PATTERN_HI)
+#define MLVDS_RESET_PATTERN_LO 0x14c5 	///../ucode/register.h:8995
+#define P_MLVDS_RESET_PATTERN_LO 		VCBUS_REG_ADDR(MLVDS_RESET_PATTERN_LO)
+#define MLVDS_RESET_PATTERN_EXT 0x14c6 	///../ucode/register.h:8997
+#define P_MLVDS_RESET_PATTERN_EXT 		VCBUS_REG_ADDR(MLVDS_RESET_PATTERN_EXT)
+#define MLVDS_CONFIG_HI 0x14c7 	///../ucode/register.h:8999
+#define P_MLVDS_CONFIG_HI 		VCBUS_REG_ADDR(MLVDS_CONFIG_HI)
+#define MLVDS_CONFIG_LO 0x14c8 	///../ucode/register.h:9000
+#define P_MLVDS_CONFIG_LO 		VCBUS_REG_ADDR(MLVDS_CONFIG_LO)
+#define TCON_DOUBLE_CTL 0x14c9 	///../ucode/register.h:9013
+#define P_TCON_DOUBLE_CTL 		VCBUS_REG_ADDR(TCON_DOUBLE_CTL)
+#define TCON_PATTERN_HI 0x14ca 	///../ucode/register.h:9016
+#define P_TCON_PATTERN_HI 		VCBUS_REG_ADDR(TCON_PATTERN_HI)
+#define TCON_PATTERN_LO 0x14cb 	///../ucode/register.h:9017
+#define P_TCON_PATTERN_LO 		VCBUS_REG_ADDR(TCON_PATTERN_LO)
+#define TCON_CONTROL_HI 0x14cc 	///../ucode/register.h:9022
+#define P_TCON_CONTROL_HI 		VCBUS_REG_ADDR(TCON_CONTROL_HI)
+#define TCON_CONTROL_LO 0x14cd 	///../ucode/register.h:9023
+#define P_TCON_CONTROL_LO 		VCBUS_REG_ADDR(TCON_CONTROL_LO)
+#define LVDS_BLANK_DATA_HI 0x14ce 	///../ucode/register.h:9027
+#define P_LVDS_BLANK_DATA_HI 		VCBUS_REG_ADDR(LVDS_BLANK_DATA_HI)
+#define LVDS_BLANK_DATA_LO 0x14cf 	///../ucode/register.h:9028
+#define P_LVDS_BLANK_DATA_LO 		VCBUS_REG_ADDR(LVDS_BLANK_DATA_LO)
+#define LVDS_PACK_CNTL_ADDR 0x14d0 	///../ucode/register.h:9033
+#define P_LVDS_PACK_CNTL_ADDR 		VCBUS_REG_ADDR(LVDS_PACK_CNTL_ADDR)
+#define DE_HS_ADDR 0x14d1 	///../ucode/register.h:9044
+#define P_DE_HS_ADDR 		VCBUS_REG_ADDR(DE_HS_ADDR)
+#define DE_HE_ADDR 0x14d2 	///../ucode/register.h:9047
+#define P_DE_HE_ADDR 		VCBUS_REG_ADDR(DE_HE_ADDR)
+#define DE_VS_ADDR 0x14d3 	///../ucode/register.h:9048
+#define P_DE_VS_ADDR 		VCBUS_REG_ADDR(DE_VS_ADDR)
+#define DE_VE_ADDR 0x14d4 	///../ucode/register.h:9049
+#define P_DE_VE_ADDR 		VCBUS_REG_ADDR(DE_VE_ADDR)
+#define HSYNC_HS_ADDR 0x14d5 	///../ucode/register.h:9050
+#define P_HSYNC_HS_ADDR 		VCBUS_REG_ADDR(HSYNC_HS_ADDR)
+#define HSYNC_HE_ADDR 0x14d6 	///../ucode/register.h:9051
+#define P_HSYNC_HE_ADDR 		VCBUS_REG_ADDR(HSYNC_HE_ADDR)
+#define HSYNC_VS_ADDR 0x14d7 	///../ucode/register.h:9052
+#define P_HSYNC_VS_ADDR 		VCBUS_REG_ADDR(HSYNC_VS_ADDR)
+#define HSYNC_VE_ADDR 0x14d8 	///../ucode/register.h:9053
+#define P_HSYNC_VE_ADDR 		VCBUS_REG_ADDR(HSYNC_VE_ADDR)
+#define VSYNC_HS_ADDR 0x14d9 	///../ucode/register.h:9054
+#define P_VSYNC_HS_ADDR 		VCBUS_REG_ADDR(VSYNC_HS_ADDR)
+#define VSYNC_HE_ADDR 0x14da 	///../ucode/register.h:9055
+#define P_VSYNC_HE_ADDR 		VCBUS_REG_ADDR(VSYNC_HE_ADDR)
+#define VSYNC_VS_ADDR 0x14db 	///../ucode/register.h:9056
+#define P_VSYNC_VS_ADDR 		VCBUS_REG_ADDR(VSYNC_VS_ADDR)
+#define VSYNC_VE_ADDR 0x14dc 	///../ucode/register.h:9057
+#define P_VSYNC_VE_ADDR 		VCBUS_REG_ADDR(VSYNC_VE_ADDR)
+#define LCD_MCU_CTL 0x14dd 	///../ucode/register.h:9067
+#define P_LCD_MCU_CTL 		VCBUS_REG_ADDR(LCD_MCU_CTL)
+#define LCD_MCU_DATA_0 0x14de 	///../ucode/register.h:9072
+#define P_LCD_MCU_DATA_0 		VCBUS_REG_ADDR(LCD_MCU_DATA_0)
+#define LCD_MCU_DATA_1 0x14df 	///../ucode/register.h:9076
+#define P_LCD_MCU_DATA_1 		VCBUS_REG_ADDR(LCD_MCU_DATA_1)
+#define LVDS_GEN_CNTL 0x14e0 	///../ucode/register.h:9078
+#define P_LVDS_GEN_CNTL 		VCBUS_REG_ADDR(LVDS_GEN_CNTL)
+#define LVDS_PHY_CNTL0 0x14e1 	///../ucode/register.h:9079
+#define P_LVDS_PHY_CNTL0 		VCBUS_REG_ADDR(LVDS_PHY_CNTL0)
+#define LVDS_PHY_CNTL1 0x14e2 	///../ucode/register.h:9080
+#define P_LVDS_PHY_CNTL1 		VCBUS_REG_ADDR(LVDS_PHY_CNTL1)
+#define LVDS_PHY_CNTL2 0x14e3 	///../ucode/register.h:9081
+#define P_LVDS_PHY_CNTL2 		VCBUS_REG_ADDR(LVDS_PHY_CNTL2)
+#define LVDS_PHY_CNTL3 0x14e4 	///../ucode/register.h:9082
+#define P_LVDS_PHY_CNTL3 		VCBUS_REG_ADDR(LVDS_PHY_CNTL3)
+#define LVDS_PHY_CNTL4 0x14e5 	///../ucode/register.h:9083
+#define P_LVDS_PHY_CNTL4 		VCBUS_REG_ADDR(LVDS_PHY_CNTL4)
+#define LVDS_PHY_CNTL5 0x14e6 	///../ucode/register.h:9084
+#define P_LVDS_PHY_CNTL5 		VCBUS_REG_ADDR(LVDS_PHY_CNTL5)
+#define LVDS_SRG_TEST 0x14e8 	///../ucode/register.h:9085
+#define P_LVDS_SRG_TEST 		VCBUS_REG_ADDR(LVDS_SRG_TEST)
+#define LVDS_BIST_MUX0 0x14e9 	///../ucode/register.h:9086
+#define P_LVDS_BIST_MUX0 		VCBUS_REG_ADDR(LVDS_BIST_MUX0)
+#define LVDS_BIST_MUX1 0x14ea 	///../ucode/register.h:9087
+#define P_LVDS_BIST_MUX1 		VCBUS_REG_ADDR(LVDS_BIST_MUX1)
+#define LVDS_BIST_FIXED0 0x14eb 	///../ucode/register.h:9088
+#define P_LVDS_BIST_FIXED0 		VCBUS_REG_ADDR(LVDS_BIST_FIXED0)
+#define LVDS_BIST_FIXED1 0x14ec 	///../ucode/register.h:9089
+#define P_LVDS_BIST_FIXED1 		VCBUS_REG_ADDR(LVDS_BIST_FIXED1)
+#define LVDS_BIST_CNTL0 0x14ed 	///../ucode/register.h:9090
+#define P_LVDS_BIST_CNTL0 		VCBUS_REG_ADDR(LVDS_BIST_CNTL0)
+#define LVDS_CLKB_CLKA 0x14ee 	///../ucode/register.h:9091
+#define P_LVDS_CLKB_CLKA 		VCBUS_REG_ADDR(LVDS_CLKB_CLKA)
+#define LVDS_PHY_CLK_CNTL 0x14ef 	///../ucode/register.h:9092
+#define P_LVDS_PHY_CLK_CNTL 		VCBUS_REG_ADDR(LVDS_PHY_CLK_CNTL)
+#define LVDS_SER_EN 0x14f0 	///../ucode/register.h:9093
+#define P_LVDS_SER_EN 		VCBUS_REG_ADDR(LVDS_SER_EN)
+#define LVDS_PHY_CNTL6 0x14f1 	///../ucode/register.h:9094
+#define P_LVDS_PHY_CNTL6 		VCBUS_REG_ADDR(LVDS_PHY_CNTL6)
+#define LVDS_PHY_CNTL7 0x14f2 	///../ucode/register.h:9095
+#define P_LVDS_PHY_CNTL7 		VCBUS_REG_ADDR(LVDS_PHY_CNTL7)
+#define LVDS_PHY_CNTL8 0x14f3 	///../ucode/register.h:9096
+#define P_LVDS_PHY_CNTL8 		VCBUS_REG_ADDR(LVDS_PHY_CNTL8)
+#define MLVDS_CLK_CTL0_HI 0x14f4 	///../ucode/register.h:9097
+#define P_MLVDS_CLK_CTL0_HI 		VCBUS_REG_ADDR(MLVDS_CLK_CTL0_HI)
+#define MLVDS_CLK_CTL0_LO 0x14f5 	///../ucode/register.h:9098
+#define P_MLVDS_CLK_CTL0_LO 		VCBUS_REG_ADDR(MLVDS_CLK_CTL0_LO)
+#define MLVDS_DUAL_GATE_WR_START 0x14f6 	///../ucode/register.h:9105
+#define P_MLVDS_DUAL_GATE_WR_START 		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_WR_START)
+#define MLVDS_DUAL_GATE_WR_END 0x14f7 	///../ucode/register.h:9107
+#define P_MLVDS_DUAL_GATE_WR_END 		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_WR_END)
+#define MLVDS_DUAL_GATE_RD_START 0x14f8 	///../ucode/register.h:9109
+#define P_MLVDS_DUAL_GATE_RD_START 		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_RD_START)
+#define MLVDS_DUAL_GATE_RD_END 0x14f9 	///../ucode/register.h:9111
+#define P_MLVDS_DUAL_GATE_RD_END 		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_RD_END)
+#define MLVDS_SECOND_RESET_CTL 0x14fa 	///../ucode/register.h:9113
+#define P_MLVDS_SECOND_RESET_CTL 		VCBUS_REG_ADDR(MLVDS_SECOND_RESET_CTL)
+#define MLVDS_DUAL_GATE_CTL_HI 0x14fb 	///../ucode/register.h:9115
+#define P_MLVDS_DUAL_GATE_CTL_HI 		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_CTL_HI)
+#define MLVDS_DUAL_GATE_CTL_LO 0x14fc 	///../ucode/register.h:9116
+#define P_MLVDS_DUAL_GATE_CTL_LO 		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_CTL_LO)
+#define MLVDS_RESET_CONFIG_HI 0x14fd 	///../ucode/register.h:9123
+#define P_MLVDS_RESET_CONFIG_HI 		VCBUS_REG_ADDR(MLVDS_RESET_CONFIG_HI)
+#define MLVDS_RESET_CONFIG_LO 0x14fe 	///../ucode/register.h:9124
+#define P_MLVDS_RESET_CONFIG_LO 		VCBUS_REG_ADDR(MLVDS_RESET_CONFIG_LO)
+#define VPU_OSD1_MMC_CTRL 0x2701 	///../ucode/register.h:9143
+#define P_VPU_OSD1_MMC_CTRL 		VCBUS_REG_ADDR(VPU_OSD1_MMC_CTRL)
+#define VPU_OSD2_MMC_CTRL 0x2702 	///../ucode/register.h:9144
+#define P_VPU_OSD2_MMC_CTRL 		VCBUS_REG_ADDR(VPU_OSD2_MMC_CTRL)
+#define VPU_VD1_MMC_CTRL 0x2703 	///../ucode/register.h:9145
+#define P_VPU_VD1_MMC_CTRL 		VCBUS_REG_ADDR(VPU_VD1_MMC_CTRL)
+#define VPU_VD2_MMC_CTRL 0x2704 	///../ucode/register.h:9146
+#define P_VPU_VD2_MMC_CTRL 		VCBUS_REG_ADDR(VPU_VD2_MMC_CTRL)
+#define VPU_DI_IF1_MMC_CTRL 0x2705 	///../ucode/register.h:9147
+#define P_VPU_DI_IF1_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_IF1_MMC_CTRL)
+#define VPU_DI_MEM_MMC_CTRL 0x2706 	///../ucode/register.h:9148
+#define P_VPU_DI_MEM_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_MEM_MMC_CTRL)
+#define VPU_DI_INP_MMC_CTRL 0x2707 	///../ucode/register.h:9149
+#define P_VPU_DI_INP_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_INP_MMC_CTRL)
+#define VPU_DI_MTNRD_MMC_CTRL 0x2708 	///../ucode/register.h:9150
+#define P_VPU_DI_MTNRD_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_MTNRD_MMC_CTRL)
+#define VPU_DI_CHAN2_MMC_CTRL 0x2709 	///../ucode/register.h:9151
+#define P_VPU_DI_CHAN2_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_CHAN2_MMC_CTRL)
+#define VPU_DI_MTNWR_MMC_CTRL 0x270a 	///../ucode/register.h:9152
+#define P_VPU_DI_MTNWR_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_MTNWR_MMC_CTRL)
+#define VPU_DI_NRWR_MMC_CTRL 0x270b 	///../ucode/register.h:9153
+#define P_VPU_DI_NRWR_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_NRWR_MMC_CTRL)
+#define VPU_DI_DIWR_MMC_CTRL 0x270c 	///../ucode/register.h:9154
+#define P_VPU_DI_DIWR_MMC_CTRL 		VCBUS_REG_ADDR(VPU_DI_DIWR_MMC_CTRL)
+#define VPU_VDIN0_MMC_CTRL 0x270d 	///../ucode/register.h:9155
+#define P_VPU_VDIN0_MMC_CTRL 		VCBUS_REG_ADDR(VPU_VDIN0_MMC_CTRL)
+#define VPU_VDIN1_MMC_CTRL 0x270e 	///../ucode/register.h:9156
+#define P_VPU_VDIN1_MMC_CTRL 		VCBUS_REG_ADDR(VPU_VDIN1_MMC_CTRL)
+#define VPU_BT656_MMC_CTRL 0x270f 	///../ucode/register.h:9157
+#define P_VPU_BT656_MMC_CTRL 		VCBUS_REG_ADDR(VPU_BT656_MMC_CTRL)
+#define VPU_TVD3D_MMC_CTRL 0x2710 	///../ucode/register.h:9158
+#define P_VPU_TVD3D_MMC_CTRL 		VCBUS_REG_ADDR(VPU_TVD3D_MMC_CTRL)
+#define VPU_TVDVBI_MMC_CTRL 0x2711 	///../ucode/register.h:9159
+#define P_VPU_TVDVBI_MMC_CTRL 		VCBUS_REG_ADDR(VPU_TVDVBI_MMC_CTRL)
+#define VPU_TVDVBI_VSLATCH_ADDR 0x2712 	///../ucode/register.h:9161
+#define P_VPU_TVDVBI_VSLATCH_ADDR 		VCBUS_REG_ADDR(VPU_TVDVBI_VSLATCH_ADDR)
+#define VPU_TVDVBI_WRRSP_ADDR 0x2713 	///../ucode/register.h:9163
+#define P_VPU_TVDVBI_WRRSP_ADDR 		VCBUS_REG_ADDR(VPU_TVDVBI_WRRSP_ADDR)
+#define VPU_VDIN_PRE_ARB_CTRL 0x2714 	///../ucode/register.h:9164
+#define P_VPU_VDIN_PRE_ARB_CTRL 		VCBUS_REG_ADDR(VPU_VDIN_PRE_ARB_CTRL)
+#define VPU_VDISP_PRE_ARB_CTRL 0x2715 	///../ucode/register.h:9165
+#define P_VPU_VDISP_PRE_ARB_CTRL 		VCBUS_REG_ADDR(VPU_VDISP_PRE_ARB_CTRL)
+#define VPU_VPUARB2_PRE_ARB_CTRL 0x2716 	///../ucode/register.h:9166
+#define P_VPU_VPUARB2_PRE_ARB_CTRL 		VCBUS_REG_ADDR(VPU_VPUARB2_PRE_ARB_CTRL)
+#define VPU_OSD3_MMC_CTRL 0x2717 	///../ucode/register.h:9167
+#define P_VPU_OSD3_MMC_CTRL 		VCBUS_REG_ADDR(VPU_OSD3_MMC_CTRL)
+#define VPU_OSD4_MMC_CTRL 0x2718 	///../ucode/register.h:9168
+#define P_VPU_OSD4_MMC_CTRL 		VCBUS_REG_ADDR(VPU_OSD4_MMC_CTRL)
+#define VPU_VD3_MMC_CTRL 0x2719 	///../ucode/register.h:9169
+#define P_VPU_VD3_MMC_CTRL 		VCBUS_REG_ADDR(VPU_VD3_MMC_CTRL)
+#define VPU_VIU_VENC_MUX_CTRL 0x271a 	///../ucode/register.h:9185
+#define P_VPU_VIU_VENC_MUX_CTRL 		VCBUS_REG_ADDR(VPU_VIU_VENC_MUX_CTRL)
+#define VPU_HDMI_SETTING 0x271b 	///../ucode/register.h:9200
+#define P_VPU_HDMI_SETTING 		VCBUS_REG_ADDR(VPU_HDMI_SETTING)
+#define ENCI_INFO_READ 0x271c 	///../ucode/register.h:9201
+#define P_ENCI_INFO_READ 		VCBUS_REG_ADDR(ENCI_INFO_READ)
+#define ENCP_INFO_READ 0x271d 	///../ucode/register.h:9202
+#define P_ENCP_INFO_READ 		VCBUS_REG_ADDR(ENCP_INFO_READ)
+#define ENCT_INFO_READ 0x271e 	///../ucode/register.h:9203
+#define P_ENCT_INFO_READ 		VCBUS_REG_ADDR(ENCT_INFO_READ)
+#define ENCL_INFO_READ 0x271f 	///../ucode/register.h:9204
+#define P_ENCL_INFO_READ 		VCBUS_REG_ADDR(ENCL_INFO_READ)
+#define VPU_SW_RESET 0x2720 	///../ucode/register.h:9209
+#define P_VPU_SW_RESET 		VCBUS_REG_ADDR(VPU_SW_RESET)
+#define VPU_D2D3_MMC_CTRL 0x2721 	///../ucode/register.h:9216
+#define P_VPU_D2D3_MMC_CTRL 		VCBUS_REG_ADDR(VPU_D2D3_MMC_CTRL)
+#define VPU_CONT_MMC_CTRL 0x2722 	///../ucode/register.h:9223
+#define P_VPU_CONT_MMC_CTRL 		VCBUS_REG_ADDR(VPU_CONT_MMC_CTRL)
+#define VPU_CLK_GATE 0x2723 	///../ucode/register.h:9231
+#define P_VPU_CLK_GATE 		VCBUS_REG_ADDR(VPU_CLK_GATE)
+#define VPU_RDMA_MMC_CTRL 0x2724 	///../ucode/register.h:9235
+#define P_VPU_RDMA_MMC_CTRL 		VCBUS_REG_ADDR(VPU_RDMA_MMC_CTRL)
+#define VPU_MEM_PD_REG0 0x2725 	///../ucode/register.h:9236
+#define P_VPU_MEM_PD_REG0 		VCBUS_REG_ADDR(VPU_MEM_PD_REG0)
+#define VPU_MEM_PD_REG1 0x2726 	///../ucode/register.h:9237
+#define P_VPU_MEM_PD_REG1 		VCBUS_REG_ADDR(VPU_MEM_PD_REG1)
+#define VPU_HDMI_DATA_OVR 0x2727 	///../ucode/register.h:9241
+#define P_VPU_HDMI_DATA_OVR 		VCBUS_REG_ADDR(VPU_HDMI_DATA_OVR)
+#define VPU_ARB4_V1_MMC_CTRL 0x272b 	///../ucode/register.h:9246
+#define P_VPU_ARB4_V1_MMC_CTRL 		VCBUS_REG_ADDR(VPU_ARB4_V1_MMC_CTRL)
+#define VPU_ARB4_V2_MMC_CTRL 0x272c 	///../ucode/register.h:9251
+#define P_VPU_ARB4_V2_MMC_CTRL 		VCBUS_REG_ADDR(VPU_ARB4_V2_MMC_CTRL)
+#define VPU_VPU_PWM_V0 0x2730 	///../ucode/register.h:9256
+#define P_VPU_VPU_PWM_V0 		VCBUS_REG_ADDR(VPU_VPU_PWM_V0)
+#define VPU_VPU_PWM_V1 0x2731 	///../ucode/register.h:9259
+#define P_VPU_VPU_PWM_V1 		VCBUS_REG_ADDR(VPU_VPU_PWM_V1)
+#define VPU_VPU_PWM_V2 0x2732 	///../ucode/register.h:9262
+#define P_VPU_VPU_PWM_V2 		VCBUS_REG_ADDR(VPU_VPU_PWM_V2)
+#define VPU_VPU_PWM_V3 0x2733 	///../ucode/register.h:9265
+#define P_VPU_VPU_PWM_V3 		VCBUS_REG_ADDR(VPU_VPU_PWM_V3)
+#define VPU_VPU_PWM_H0 0x2734 	///../ucode/register.h:9268
+#define P_VPU_VPU_PWM_H0 		VCBUS_REG_ADDR(VPU_VPU_PWM_H0)
+#define VPU_VPU_PWM_H1 0x2735 	///../ucode/register.h:9271
+#define P_VPU_VPU_PWM_H1 		VCBUS_REG_ADDR(VPU_VPU_PWM_H1)
+#define VPU_VPU_PWM_H2 0x2736 	///../ucode/register.h:9274
+#define P_VPU_VPU_PWM_H2 		VCBUS_REG_ADDR(VPU_VPU_PWM_H2)
+#define VPU_VPU_PWM_H3 0x2737 	///../ucode/register.h:9277
+#define P_VPU_VPU_PWM_H3 		VCBUS_REG_ADDR(VPU_VPU_PWM_H3)
+#define VPU_MISC_CTRL 0x2740 	///../ucode/register.h:9281
+#define P_VPU_MISC_CTRL 		VCBUS_REG_ADDR(VPU_MISC_CTRL)
+#define VPU_ISP_GCLK_CTRL0 0x2741 	///../ucode/register.h:9282
+#define P_VPU_ISP_GCLK_CTRL0 		VCBUS_REG_ADDR(VPU_ISP_GCLK_CTRL0)
+#define VPU_ISP_GCLK_CTRL1 0x2742 	///../ucode/register.h:9283
+#define P_VPU_ISP_GCLK_CTRL1 		VCBUS_REG_ADDR(VPU_ISP_GCLK_CTRL1)
+#define CSI2_CLK_RESET 0x2a00 	///../ucode/register.h:9304
+#define P_CSI2_CLK_RESET 		VCBUS_REG_ADDR(CSI2_CLK_RESET)
+#define CSI2_GEN_CTRL0 0x2a01 	///../ucode/register.h:9357
+#define P_CSI2_GEN_CTRL0 		VCBUS_REG_ADDR(CSI2_GEN_CTRL0)
+#define CSI2_FORCE_PIC_SIZE 0x2a02 	///../ucode/register.h:9364
+#define P_CSI2_FORCE_PIC_SIZE 		VCBUS_REG_ADDR(CSI2_FORCE_PIC_SIZE)
+#define CSI2_DDR_START_ADDR 0x2a03 	///../ucode/register.h:9366
+#define P_CSI2_DDR_START_ADDR 		VCBUS_REG_ADDR(CSI2_DDR_START_ADDR)
+#define CSI2_DDR_END_ADDR 0x2a04 	///../ucode/register.h:9368
+#define P_CSI2_DDR_END_ADDR 		VCBUS_REG_ADDR(CSI2_DDR_END_ADDR)
+#define CSI2_INTERRUPT_CTRL_STAT 0x2a05 	///../ucode/register.h:9379
+#define P_CSI2_INTERRUPT_CTRL_STAT 		VCBUS_REG_ADDR(CSI2_INTERRUPT_CTRL_STAT)
+#define CSI2_PIC_SIZE_STAT 0x2a06 	///../ucode/register.h:9382
+#define P_CSI2_PIC_SIZE_STAT 		VCBUS_REG_ADDR(CSI2_PIC_SIZE_STAT)
+#define CSI2_GEN_STAT0 0x2a07 	///../ucode/register.h:9391
+#define P_CSI2_GEN_STAT0 		VCBUS_REG_ADDR(CSI2_GEN_STAT0)
+#define CSI2_DDR_WRPT_STAT 0x2a08 	///../ucode/register.h:9393
+#define P_CSI2_DDR_WRPT_STAT 		VCBUS_REG_ADDR(CSI2_DDR_WRPT_STAT)
+#define CSI2_FS_EMBED_DDR_START 0x2a09 	///../ucode/register.h:9395
+#define P_CSI2_FS_EMBED_DDR_START 		VCBUS_REG_ADDR(CSI2_FS_EMBED_DDR_START)
+#define CSI2_FS_EMBED_DDR_END 0x2a0a 	///../ucode/register.h:9397
+#define P_CSI2_FS_EMBED_DDR_END 		VCBUS_REG_ADDR(CSI2_FS_EMBED_DDR_END)
+#define CSI2_FE_EMBED_DDR_START 0x2a0b 	///../ucode/register.h:9399
+#define P_CSI2_FE_EMBED_DDR_START 		VCBUS_REG_ADDR(CSI2_FE_EMBED_DDR_START)
+#define CSI2_FE_EMBED_DDR_END 0x2a0c 	///../ucode/register.h:9401
+#define P_CSI2_FE_EMBED_DDR_END 		VCBUS_REG_ADDR(CSI2_FE_EMBED_DDR_END)
+#define CSI2_MEM_PIXEL_BYTE_CNT 0x2a0d 	///../ucode/register.h:9407
+#define P_CSI2_MEM_PIXEL_BYTE_CNT 		VCBUS_REG_ADDR(CSI2_MEM_PIXEL_BYTE_CNT)
+#define CSI2_MEM_PIXEL_LINE_CNT 0x2a0e 	///../ucode/register.h:9410
+#define P_CSI2_MEM_PIXEL_LINE_CNT 		VCBUS_REG_ADDR(CSI2_MEM_PIXEL_LINE_CNT)
+#define CSI2_PIXEL_DDR_START 0x2a0f 	///../ucode/register.h:9412
+#define P_CSI2_PIXEL_DDR_START 		VCBUS_REG_ADDR(CSI2_PIXEL_DDR_START)
+#define CSI2_PIXEL_DDR_END 0x2a10 	///../ucode/register.h:9414
+#define P_CSI2_PIXEL_DDR_END 		VCBUS_REG_ADDR(CSI2_PIXEL_DDR_END)
+#define CSI2_USER_DDR_START 0x2a11 	///../ucode/register.h:9416
+#define P_CSI2_USER_DDR_START 		VCBUS_REG_ADDR(CSI2_USER_DDR_START)
+#define CSI2_USER_DDR_END 0x2a12 	///../ucode/register.h:9418
+#define P_CSI2_USER_DDR_END 		VCBUS_REG_ADDR(CSI2_USER_DDR_END)
+#define CSI2_DATA_TYPE_IN_MEM 0x2a13 	///../ucode/register.h:9429
+#define P_CSI2_DATA_TYPE_IN_MEM 		VCBUS_REG_ADDR(CSI2_DATA_TYPE_IN_MEM)
+#define CSI2_ERR_STAT0 0x2a14 	///../ucode/register.h:9448
+#define P_CSI2_ERR_STAT0 		VCBUS_REG_ADDR(CSI2_ERR_STAT0)
+#define CSI2_GEN_CTRL1 0x2a15 	///../ucode/register.h:9470
+#define P_CSI2_GEN_CTRL1 		VCBUS_REG_ADDR(CSI2_GEN_CTRL1)
+#define D2D3_GLB_CTRL 0x2b00 	///../ucode/register.h:9513
+#define P_D2D3_GLB_CTRL 		VCBUS_REG_ADDR(D2D3_GLB_CTRL)
+#define D2D3_DPG_INPIC_SIZE 0x2b01 	///../ucode/register.h:9517
+#define P_D2D3_DPG_INPIC_SIZE 		VCBUS_REG_ADDR(D2D3_DPG_INPIC_SIZE)
+#define D2D3_DBR_OUTPIC_SIZE 0x2b02 	///../ucode/register.h:9521
+#define P_D2D3_DBR_OUTPIC_SIZE 		VCBUS_REG_ADDR(D2D3_DBR_OUTPIC_SIZE)
+#define D2D3_DGEN_WIN_HOR 0x2b03 	///../ucode/register.h:9525
+#define P_D2D3_DGEN_WIN_HOR 		VCBUS_REG_ADDR(D2D3_DGEN_WIN_HOR)
+#define D2D3_DGEN_WIN_VER 0x2b04 	///../ucode/register.h:9529
+#define P_D2D3_DGEN_WIN_VER 		VCBUS_REG_ADDR(D2D3_DGEN_WIN_VER)
+#define D2D3_PRE_SCD_H 0x2b05 	///../ucode/register.h:9540
+#define P_D2D3_PRE_SCD_H 		VCBUS_REG_ADDR(D2D3_PRE_SCD_H)
+#define D2D3_SCALER_CTRL 0x2b06 	///../ucode/register.h:9558
+#define P_D2D3_SCALER_CTRL 		VCBUS_REG_ADDR(D2D3_SCALER_CTRL)
+#define D2D3_CG_THRESHOLD_1 0x2b07 	///../ucode/register.h:9563
+#define P_D2D3_CG_THRESHOLD_1 		VCBUS_REG_ADDR(D2D3_CG_THRESHOLD_1)
+#define D2D3_CG_THRESHOLD_2 0x2b08 	///../ucode/register.h:9568
+#define P_D2D3_CG_THRESHOLD_2 		VCBUS_REG_ADDR(D2D3_CG_THRESHOLD_2)
+#define D2D3_CG_PARAM_1 0x2b09 	///../ucode/register.h:9573
+#define P_D2D3_CG_PARAM_1 		VCBUS_REG_ADDR(D2D3_CG_PARAM_1)
+#define D2D3_CG_PARAM_2 0x2b0a 	///../ucode/register.h:9584
+#define P_D2D3_CG_PARAM_2 		VCBUS_REG_ADDR(D2D3_CG_PARAM_2)
+#define D2D3_PRE_SCD_V 0x2b0b 	///../ucode/register.h:9588
+#define P_D2D3_PRE_SCD_V 		VCBUS_REG_ADDR(D2D3_PRE_SCD_V)
+#define D2D3_D2P_PARAM_1 0x2b0c 	///../ucode/register.h:9611
+#define P_D2D3_D2P_PARAM_1 		VCBUS_REG_ADDR(D2D3_D2P_PARAM_1)
+#define D2D3_D2P_PARAM_2 0x2b0d 	///../ucode/register.h:9616
+#define P_D2D3_D2P_PARAM_2 		VCBUS_REG_ADDR(D2D3_D2P_PARAM_2)
+#define D2D3_D2P_PARAM_3 0x2b0e 	///../ucode/register.h:9621
+#define P_D2D3_D2P_PARAM_3 		VCBUS_REG_ADDR(D2D3_D2P_PARAM_3)
+#define D2D3_SCU18_STEP 0x2b0f 	///../ucode/register.h:9627
+#define P_D2D3_SCU18_STEP 		VCBUS_REG_ADDR(D2D3_SCU18_STEP)
+#define D2D3_DPF_LPF_CTRL 0x2b10 	///../ucode/register.h:9648
+#define P_D2D3_DPF_LPF_CTRL 		VCBUS_REG_ADDR(D2D3_DPF_LPF_CTRL)
+#define D2D3_DBLD_CG_PARAM 0x2b11 	///../ucode/register.h:9657
+#define P_D2D3_DBLD_CG_PARAM 		VCBUS_REG_ADDR(D2D3_DBLD_CG_PARAM)
+#define D2D3_DBLD_MG_PARAM 0x2b12 	///../ucode/register.h:9662
+#define P_D2D3_DBLD_MG_PARAM 		VCBUS_REG_ADDR(D2D3_DBLD_MG_PARAM)
+#define D2D3_DBLD_LG_PARAM 0x2b13 	///../ucode/register.h:9667
+#define P_D2D3_DBLD_LG_PARAM 		VCBUS_REG_ADDR(D2D3_DBLD_LG_PARAM)
+#define D2D3_DBLD_LPF_HCOEFF 0x2b14 	///../ucode/register.h:9672
+#define P_D2D3_DBLD_LPF_HCOEFF 		VCBUS_REG_ADDR(D2D3_DBLD_LPF_HCOEFF)
+#define D2D3_DBLD_LPF_VCOEFF 0x2b15 	///../ucode/register.h:9677
+#define P_D2D3_DBLD_LPF_VCOEFF 		VCBUS_REG_ADDR(D2D3_DBLD_LPF_VCOEFF)
+#define D2D3_DBLD_PATH_CTRL 0x2b16 	///../ucode/register.h:9696
+#define P_D2D3_DBLD_PATH_CTRL 		VCBUS_REG_ADDR(D2D3_DBLD_PATH_CTRL)
+#define D2D3_SCU18_INPIC_SIZE 0x2b17 	///../ucode/register.h:9700
+#define P_D2D3_SCU18_INPIC_SIZE 		VCBUS_REG_ADDR(D2D3_SCU18_INPIC_SIZE)
+#define D2D3_MBDG_CTRL 0x2b18 	///../ucode/register.h:9713
+#define P_D2D3_MBDG_CTRL 		VCBUS_REG_ADDR(D2D3_MBDG_CTRL)
+#define D2D3_MBDG_PARAM_0 0x2b19 	///../ucode/register.h:9719
+#define P_D2D3_MBDG_PARAM_0 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_0)
+#define D2D3_MBDG_PARAM_1 0x2b1a 	///../ucode/register.h:9725
+#define P_D2D3_MBDG_PARAM_1 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_1)
+#define D2D3_MBDG_PARAM_2 0x2b1b 	///../ucode/register.h:9730
+#define P_D2D3_MBDG_PARAM_2 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_2)
+#define D2D3_MBDG_PARAM_3 0x2b1c 	///../ucode/register.h:9735
+#define P_D2D3_MBDG_PARAM_3 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_3)
+#define D2D3_MBDG_PARAM_4 0x2b1d 	///../ucode/register.h:9744
+#define P_D2D3_MBDG_PARAM_4 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_4)
+#define D2D3_MBDG_PARAM_5 0x2b1e 	///../ucode/register.h:9749
+#define P_D2D3_MBDG_PARAM_5 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_5)
+#define D2D3_MBDG_PARAM_6 0x2b1f 	///../ucode/register.h:9754
+#define P_D2D3_MBDG_PARAM_6 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_6)
+#define D2D3_MBDG_PARAM_7 0x2b20 	///../ucode/register.h:9758
+#define P_D2D3_MBDG_PARAM_7 		VCBUS_REG_ADDR(D2D3_MBDG_PARAM_7)
+#define D2D3_DBG_CTRL 0x2b23 	///../ucode/register.h:9775
+#define P_D2D3_DBG_CTRL 		VCBUS_REG_ADDR(D2D3_DBG_CTRL)
+#define D2D3_DWMIF_CTRL 0x2b24 	///../ucode/register.h:9792
+#define P_D2D3_DWMIF_CTRL 		VCBUS_REG_ADDR(D2D3_DWMIF_CTRL)
+#define D2D3_DWMIF_HPOS 0x2b25 	///../ucode/register.h:9797
+#define P_D2D3_DWMIF_HPOS 		VCBUS_REG_ADDR(D2D3_DWMIF_HPOS)
+#define D2D3_DWMIF_VPOS 0x2b26 	///../ucode/register.h:9802
+#define P_D2D3_DWMIF_VPOS 		VCBUS_REG_ADDR(D2D3_DWMIF_VPOS)
+#define D2D3_DWMIF_SIZE 0x2b27 	///../ucode/register.h:9807
+#define P_D2D3_DWMIF_SIZE 		VCBUS_REG_ADDR(D2D3_DWMIF_SIZE)
+#define D2D3_DRMIF_CTRL 0x2b28 	///../ucode/register.h:9824
+#define P_D2D3_DRMIF_CTRL 		VCBUS_REG_ADDR(D2D3_DRMIF_CTRL)
+#define D2D3_DRMIF_HPOS 0x2b29 	///../ucode/register.h:9829
+#define P_D2D3_DRMIF_HPOS 		VCBUS_REG_ADDR(D2D3_DRMIF_HPOS)
+#define D2D3_DRMIF_VPOS 0x2b2a 	///../ucode/register.h:9834
+#define P_D2D3_DRMIF_VPOS 		VCBUS_REG_ADDR(D2D3_DRMIF_VPOS)
+#define D2D3_DBR_DDD_CTRL 0x2b2c 	///../ucode/register.h:9851
+#define P_D2D3_DBR_DDD_CTRL 		VCBUS_REG_ADDR(D2D3_DBR_DDD_CTRL)
+#define D2D3_DBR_DDD_DBG 0x2b2d 	///../ucode/register.h:9853
+#define P_D2D3_DBR_DDD_DBG 		VCBUS_REG_ADDR(D2D3_DBR_DDD_DBG)
+#define D2D3_DBR_LRDMX_CTRL 0x2b2f 	///../ucode/register.h:9867
+#define P_D2D3_DBR_LRDMX_CTRL 		VCBUS_REG_ADDR(D2D3_DBR_LRDMX_CTRL)
+#define D2D3_CBDG_STATUS_1 0x2b30 	///../ucode/register.h:9874
+#define P_D2D3_CBDG_STATUS_1 		VCBUS_REG_ADDR(D2D3_CBDG_STATUS_1)
+#define D2D3_MBDG_STATUS_1 0x2b31 	///../ucode/register.h:9879
+#define P_D2D3_MBDG_STATUS_1 		VCBUS_REG_ADDR(D2D3_MBDG_STATUS_1)
+#define D2D3_MBDG_STATUS_2 0x2b32 	///../ucode/register.h:9884
+#define P_D2D3_MBDG_STATUS_2 		VCBUS_REG_ADDR(D2D3_MBDG_STATUS_2)
+#define D2D3_MBDG_STATUS_3 0x2b33 	///../ucode/register.h:9889
+#define P_D2D3_MBDG_STATUS_3 		VCBUS_REG_ADDR(D2D3_MBDG_STATUS_3)
+#define D2D3_MBDG_STATUS_4 0x2b34 	///../ucode/register.h:9892
+#define P_D2D3_MBDG_STATUS_4 		VCBUS_REG_ADDR(D2D3_MBDG_STATUS_4)
+#define D2D3_MBDG_STATUS_5 0x2b35 	///../ucode/register.h:9895
+#define P_D2D3_MBDG_STATUS_5 		VCBUS_REG_ADDR(D2D3_MBDG_STATUS_5)
+#define D2D3_MBDG_STATUS_6 0x2b36 	///../ucode/register.h:9898
+#define P_D2D3_MBDG_STATUS_6 		VCBUS_REG_ADDR(D2D3_MBDG_STATUS_6)
+#define D2D3_MBDG_STATUS_7 0x2b37 	///../ucode/register.h:9901
+#define P_D2D3_MBDG_STATUS_7 		VCBUS_REG_ADDR(D2D3_MBDG_STATUS_7)
+#define D2D3_DBG_STATUS_1 0x2b38 	///../ucode/register.h:9903
+#define P_D2D3_DBG_STATUS_1 		VCBUS_REG_ADDR(D2D3_DBG_STATUS_1)
+#define D2D3_DBG_STATUS_2 0x2b39 	///../ucode/register.h:9909
+#define P_D2D3_DBG_STATUS_2 		VCBUS_REG_ADDR(D2D3_DBG_STATUS_2)
+#define D2D3_DRMIF_STATUS 0x2b3a 	///../ucode/register.h:9911
+#define P_D2D3_DRMIF_STATUS 		VCBUS_REG_ADDR(D2D3_DRMIF_STATUS)
+#define D2D3_DWMIF_STATUS 0x2b3b 	///../ucode/register.h:9915
+#define P_D2D3_DWMIF_STATUS 		VCBUS_REG_ADDR(D2D3_DWMIF_STATUS)
+#define D2D3_CBDG_STATUS_2 0x2b3c 	///../ucode/register.h:9918
+#define P_D2D3_CBDG_STATUS_2 		VCBUS_REG_ADDR(D2D3_CBDG_STATUS_2)
+#define D2D3_DBLD_STATUS 0x2b3d 	///../ucode/register.h:9921
+#define P_D2D3_DBLD_STATUS 		VCBUS_REG_ADDR(D2D3_DBLD_STATUS)
+#define D2D3_RESEV_STATUS1 0x2b3e 	///../ucode/register.h:9923
+#define P_D2D3_RESEV_STATUS1 		VCBUS_REG_ADDR(D2D3_RESEV_STATUS1)
+#define D2D3_RESEV_STATUS2 0x2b3f 	///../ucode/register.h:9925
+#define P_D2D3_RESEV_STATUS2 		VCBUS_REG_ADDR(D2D3_RESEV_STATUS2)
+#define MIPI_DSI_DWC_VERSION_OS 0x2c00 	///../ucode/register.h:9947
+#define P_MIPI_DSI_DWC_VERSION_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VERSION_OS)
+#define MIPI_DSI_DWC_PWR_UP_OS 0x2c01 	///../ucode/register.h:9948
+#define P_MIPI_DSI_DWC_PWR_UP_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PWR_UP_OS)
+#define MIPI_DSI_DWC_CLKMGR_CFG_OS 0x2c02 	///../ucode/register.h:9949
+#define P_MIPI_DSI_DWC_CLKMGR_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_CLKMGR_CFG_OS)
+#define MIPI_DSI_DWC_DPI_VCID_OS 0x2c03 	///../ucode/register.h:9950
+#define P_MIPI_DSI_DWC_DPI_VCID_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_DPI_VCID_OS)
+#define MIPI_DSI_DWC_DPI_COLOR_CODING_OS 0x2c04 	///../ucode/register.h:9951
+#define P_MIPI_DSI_DWC_DPI_COLOR_CODING_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_DPI_COLOR_CODING_OS)
+#define MIPI_DSI_DWC_DPI_CFG_POL_OS 0x2c05 	///../ucode/register.h:9952
+#define P_MIPI_DSI_DWC_DPI_CFG_POL_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_DPI_CFG_POL_OS)
+#define MIPI_DSI_DWC_DPI_LP_CMD_TIM_OS 0x2c06 	///../ucode/register.h:9953
+#define P_MIPI_DSI_DWC_DPI_LP_CMD_TIM_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_DPI_LP_CMD_TIM_OS)
+#define MIPI_DSI_DWC_PCKHDL_CFG_OS 0x2c0b 	///../ucode/register.h:9954
+#define P_MIPI_DSI_DWC_PCKHDL_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PCKHDL_CFG_OS)
+#define MIPI_DSI_DWC_GEN_VCID_OS 0x2c0c 	///../ucode/register.h:9955
+#define P_MIPI_DSI_DWC_GEN_VCID_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_GEN_VCID_OS)
+#define MIPI_DSI_DWC_MODE_CFG_OS 0x2c0d 	///../ucode/register.h:9956
+#define P_MIPI_DSI_DWC_MODE_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_MODE_CFG_OS)
+#define MIPI_DSI_DWC_VID_MODE_CFG_OS 0x2c0e 	///../ucode/register.h:9957
+#define P_MIPI_DSI_DWC_VID_MODE_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_MODE_CFG_OS)
+#define MIPI_DSI_DWC_VID_PKT_SIZE_OS 0x2c0f 	///../ucode/register.h:9958
+#define P_MIPI_DSI_DWC_VID_PKT_SIZE_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_PKT_SIZE_OS)
+#define MIPI_DSI_DWC_VID_NUM_CHUNKS_OS 0x2c10 	///../ucode/register.h:9959
+#define P_MIPI_DSI_DWC_VID_NUM_CHUNKS_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_NUM_CHUNKS_OS)
+#define MIPI_DSI_DWC_VID_NULL_SIZE_OS 0x2c11 	///../ucode/register.h:9960
+#define P_MIPI_DSI_DWC_VID_NULL_SIZE_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_NULL_SIZE_OS)
+#define MIPI_DSI_DWC_VID_HSA_TIME_OS 0x2c12 	///../ucode/register.h:9961
+#define P_MIPI_DSI_DWC_VID_HSA_TIME_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_HSA_TIME_OS)
+#define MIPI_DSI_DWC_VID_HBP_TIME_OS 0x2c13 	///../ucode/register.h:9962
+#define P_MIPI_DSI_DWC_VID_HBP_TIME_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_HBP_TIME_OS)
+#define MIPI_DSI_DWC_VID_HLINE_TIME_OS 0x2c14 	///../ucode/register.h:9963
+#define P_MIPI_DSI_DWC_VID_HLINE_TIME_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_HLINE_TIME_OS)
+#define MIPI_DSI_DWC_VID_VSA_LINES_OS 0x2c15 	///../ucode/register.h:9964
+#define P_MIPI_DSI_DWC_VID_VSA_LINES_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_VSA_LINES_OS)
+#define MIPI_DSI_DWC_VID_VBP_LINES_OS 0x2c16 	///../ucode/register.h:9965
+#define P_MIPI_DSI_DWC_VID_VBP_LINES_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_VBP_LINES_OS)
+#define MIPI_DSI_DWC_VID_VFP_LINES_OS 0x2c17 	///../ucode/register.h:9966
+#define P_MIPI_DSI_DWC_VID_VFP_LINES_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_VFP_LINES_OS)
+#define MIPI_DSI_DWC_VID_VACTIVE_LINES_OS 0x2c18 	///../ucode/register.h:9967
+#define P_MIPI_DSI_DWC_VID_VACTIVE_LINES_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_VID_VACTIVE_LINES_OS)
+#define MIPI_DSI_DWC_EDPI_CMD_SIZE_OS 0x2c19 	///../ucode/register.h:9968
+#define P_MIPI_DSI_DWC_EDPI_CMD_SIZE_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_EDPI_CMD_SIZE_OS)
+#define MIPI_DSI_DWC_CMD_MODE_CFG_OS 0x2c1a 	///../ucode/register.h:9969
+#define P_MIPI_DSI_DWC_CMD_MODE_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_CMD_MODE_CFG_OS)
+#define MIPI_DSI_DWC_GEN_HDR_OS 0x2c1b 	///../ucode/register.h:9970
+#define P_MIPI_DSI_DWC_GEN_HDR_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_GEN_HDR_OS)
+#define MIPI_DSI_DWC_GEN_PLD_DATA_OS 0x2c1c 	///../ucode/register.h:9971
+#define P_MIPI_DSI_DWC_GEN_PLD_DATA_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_GEN_PLD_DATA_OS)
+#define MIPI_DSI_DWC_CMD_PKT_STATUS_OS 0x2c1d 	///../ucode/register.h:9972
+#define P_MIPI_DSI_DWC_CMD_PKT_STATUS_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_CMD_PKT_STATUS_OS)
+#define MIPI_DSI_DWC_TO_CNT_CFG_OS 0x2c1e 	///../ucode/register.h:9973
+#define P_MIPI_DSI_DWC_TO_CNT_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_TO_CNT_CFG_OS)
+#define MIPI_DSI_DWC_HS_RD_TO_CNT_OS 0x2c1f 	///../ucode/register.h:9974
+#define P_MIPI_DSI_DWC_HS_RD_TO_CNT_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_HS_RD_TO_CNT_OS)
+#define MIPI_DSI_DWC_LP_RD_TO_CNT_OS 0x2c20 	///../ucode/register.h:9975
+#define P_MIPI_DSI_DWC_LP_RD_TO_CNT_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_LP_RD_TO_CNT_OS)
+#define MIPI_DSI_DWC_HS_WR_TO_CNT_OS 0x2c21 	///../ucode/register.h:9976
+#define P_MIPI_DSI_DWC_HS_WR_TO_CNT_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_HS_WR_TO_CNT_OS)
+#define MIPI_DSI_DWC_LP_WR_TO_CNT_OS 0x2c22 	///../ucode/register.h:9977
+#define P_MIPI_DSI_DWC_LP_WR_TO_CNT_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_LP_WR_TO_CNT_OS)
+#define MIPI_DSI_DWC_BTA_TO_CNT_OS 0x2c23 	///../ucode/register.h:9978
+#define P_MIPI_DSI_DWC_BTA_TO_CNT_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_BTA_TO_CNT_OS)
+#define MIPI_DSI_DWC_SDF_3D_OS 0x2c24 	///../ucode/register.h:9979
+#define P_MIPI_DSI_DWC_SDF_3D_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_SDF_3D_OS)
+#define MIPI_DSI_DWC_LPCLK_CTRL_OS 0x2c25 	///../ucode/register.h:9980
+#define P_MIPI_DSI_DWC_LPCLK_CTRL_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_LPCLK_CTRL_OS)
+#define MIPI_DSI_DWC_PHY_TMR_LPCLK_CFG_OS 0x2c26 	///../ucode/register.h:9981
+#define P_MIPI_DSI_DWC_PHY_TMR_LPCLK_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_TMR_LPCLK_CFG_OS)
+#define MIPI_DSI_DWC_PHY_TMR_CFG_OS 0x2c27 	///../ucode/register.h:9982
+#define P_MIPI_DSI_DWC_PHY_TMR_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_TMR_CFG_OS)
+#define MIPI_DSI_DWC_PHY_RSTZ_OS 0x2c28 	///../ucode/register.h:9983
+#define P_MIPI_DSI_DWC_PHY_RSTZ_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_RSTZ_OS)
+#define MIPI_DSI_DWC_PHY_IF_CFG_OS 0x2c29 	///../ucode/register.h:9984
+#define P_MIPI_DSI_DWC_PHY_IF_CFG_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_IF_CFG_OS)
+#define MIPI_DSI_DWC_PHY_ULPS_CTRL_OS 0x2c2a 	///../ucode/register.h:9985
+#define P_MIPI_DSI_DWC_PHY_ULPS_CTRL_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_ULPS_CTRL_OS)
+#define MIPI_DSI_DWC_PHY_TX_TRIGGERS_OS 0x2c2b 	///../ucode/register.h:9986
+#define P_MIPI_DSI_DWC_PHY_TX_TRIGGERS_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_TX_TRIGGERS_OS)
+#define MIPI_DSI_DWC_PHY_STATUS_OS 0x2c2c 	///../ucode/register.h:9987
+#define P_MIPI_DSI_DWC_PHY_STATUS_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_STATUS_OS)
+#define MIPI_DSI_DWC_PHY_TST_CTRL0_OS 0x2c2d 	///../ucode/register.h:9988
+#define P_MIPI_DSI_DWC_PHY_TST_CTRL0_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_TST_CTRL0_OS)
+#define MIPI_DSI_DWC_PHY_TST_CTRL1_OS 0x2c2e 	///../ucode/register.h:9989
+#define P_MIPI_DSI_DWC_PHY_TST_CTRL1_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_PHY_TST_CTRL1_OS)
+#define MIPI_DSI_DWC_INT_ST0_OS 0x2c2f 	///../ucode/register.h:9990
+#define P_MIPI_DSI_DWC_INT_ST0_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_INT_ST0_OS)
+#define MIPI_DSI_DWC_INT_ST1_OS 0x2c30 	///../ucode/register.h:9991
+#define P_MIPI_DSI_DWC_INT_ST1_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_INT_ST1_OS)
+#define MIPI_DSI_DWC_INT_MSK0_OS 0x2c31 	///../ucode/register.h:9992
+#define P_MIPI_DSI_DWC_INT_MSK0_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_INT_MSK0_OS)
+#define MIPI_DSI_DWC_INT_MSK1_OS 0x2c32 	///../ucode/register.h:9993
+#define P_MIPI_DSI_DWC_INT_MSK1_OS 		VCBUS_REG_ADDR(MIPI_DSI_DWC_INT_MSK1_OS)
+#define MIPI_DSI_TOP_SW_RESET 0x2cf0 	///../ucode/register.h:10002
+#define P_MIPI_DSI_TOP_SW_RESET 		VCBUS_REG_ADDR(MIPI_DSI_TOP_SW_RESET)
+#define MIPI_DSI_TOP_CLK_CNTL 0x2cf1 	///../ucode/register.h:10009
+#define P_MIPI_DSI_TOP_CLK_CNTL 		VCBUS_REG_ADDR(MIPI_DSI_TOP_CLK_CNTL)
+#define MIPI_DSI_TOP_CNTL 0x2cf2 	///../ucode/register.h:10049
+#define P_MIPI_DSI_TOP_CNTL 		VCBUS_REG_ADDR(MIPI_DSI_TOP_CNTL)
+#define MIPI_DSI_TOP_SUSPEND_CNTL 0x2cf3 	///../ucode/register.h:10057
+#define P_MIPI_DSI_TOP_SUSPEND_CNTL 		VCBUS_REG_ADDR(MIPI_DSI_TOP_SUSPEND_CNTL)
+#define MIPI_DSI_TOP_SUSPEND_LINE 0x2cf4 	///../ucode/register.h:10062
+#define P_MIPI_DSI_TOP_SUSPEND_LINE 		VCBUS_REG_ADDR(MIPI_DSI_TOP_SUSPEND_LINE)
+#define MIPI_DSI_TOP_SUSPEND_PIX 0x2cf5 	///../ucode/register.h:10067
+#define P_MIPI_DSI_TOP_SUSPEND_PIX 		VCBUS_REG_ADDR(MIPI_DSI_TOP_SUSPEND_PIX)
+#define MIPI_DSI_TOP_MEAS_CNTL 0x2cf6 	///../ucode/register.h:10079
+#define P_MIPI_DSI_TOP_MEAS_CNTL 		VCBUS_REG_ADDR(MIPI_DSI_TOP_MEAS_CNTL)
+#define MIPI_DSI_TOP_STAT 0x2cf7 	///../ucode/register.h:10085
+#define P_MIPI_DSI_TOP_STAT 		VCBUS_REG_ADDR(MIPI_DSI_TOP_STAT)
+#define MIPI_DSI_TOP_MEAS_STAT_TE0 0x2cf8 	///../ucode/register.h:10095
+#define P_MIPI_DSI_TOP_MEAS_STAT_TE0 		VCBUS_REG_ADDR(MIPI_DSI_TOP_MEAS_STAT_TE0)
+#define MIPI_DSI_TOP_MEAS_STAT_TE1 0x2cf9 	///../ucode/register.h:10098
+#define P_MIPI_DSI_TOP_MEAS_STAT_TE1 		VCBUS_REG_ADDR(MIPI_DSI_TOP_MEAS_STAT_TE1)
+#define MIPI_DSI_TOP_MEAS_STAT_VS0 0x2cfa 	///../ucode/register.h:10108
+#define P_MIPI_DSI_TOP_MEAS_STAT_VS0 		VCBUS_REG_ADDR(MIPI_DSI_TOP_MEAS_STAT_VS0)
+#define MIPI_DSI_TOP_MEAS_STAT_VS1 0x2cfb 	///../ucode/register.h:10111
+#define P_MIPI_DSI_TOP_MEAS_STAT_VS1 		VCBUS_REG_ADDR(MIPI_DSI_TOP_MEAS_STAT_VS1)
+#define MIPI_DSI_TOP_INTR_CNTL_STAT 0x2cfc 	///../ucode/register.h:10129
+#define P_MIPI_DSI_TOP_INTR_CNTL_STAT 		VCBUS_REG_ADDR(MIPI_DSI_TOP_INTR_CNTL_STAT)
+#define ISP_GAMMA_LUT_ADDR 0x2dc2 	///../ucode/register.h:10147
+#define P_ISP_GAMMA_LUT_ADDR 		VCBUS_REG_ADDR(ISP_GAMMA_LUT_ADDR)
+#define ISP_GAMMA_LUT_DATA 0x2dc3 	///../ucode/register.h:10148
+#define P_ISP_GAMMA_LUT_DATA 		VCBUS_REG_ADDR(ISP_GAMMA_LUT_DATA)
+#define ISP_DF1024_LUT_ADDR 0x2dc4 	///../ucode/register.h:10149
+#define P_ISP_DF1024_LUT_ADDR 		VCBUS_REG_ADDR(ISP_DF1024_LUT_ADDR)
+#define ISP_DF1024_LUT_DATA 0x2dc5 	///../ucode/register.h:10150
+#define P_ISP_DF1024_LUT_DATA 		VCBUS_REG_ADDR(ISP_DF1024_LUT_DATA)
+#define ISP_LNSD_LUT_ADDR 0x2dc6 	///../ucode/register.h:10151
+#define P_ISP_LNSD_LUT_ADDR 		VCBUS_REG_ADDR(ISP_LNSD_LUT_ADDR)
+#define ISP_LNSD_LUT_DATA 0x2dc7 	///../ucode/register.h:10152
+#define P_ISP_LNSD_LUT_DATA 		VCBUS_REG_ADDR(ISP_LNSD_LUT_DATA)
+#define ISP_HV_SIZE 0x2d00 	///../ucode/register.h:10153
+#define P_ISP_HV_SIZE 		VCBUS_REG_ADDR(ISP_HV_SIZE)
+#define ISP_HBLANK 0x2d01 	///../ucode/register.h:10158
+#define P_ISP_HBLANK 		VCBUS_REG_ADDR(ISP_HBLANK)
+#define ISP_TIMING_MODE 0x2d02 	///../ucode/register.h:10163
+#define P_ISP_TIMING_MODE 		VCBUS_REG_ADDR(ISP_TIMING_MODE)
+#define ISP_RST_DLY_NUM 0x2d03 	///../ucode/register.h:10177
+#define P_ISP_RST_DLY_NUM 		VCBUS_REG_ADDR(ISP_RST_DLY_NUM)
+#define ISP_OUTVS_DLY_NUM 0x2d04 	///../ucode/register.h:10179
+#define P_ISP_OUTVS_DLY_NUM 		VCBUS_REG_ADDR(ISP_OUTVS_DLY_NUM)
+#define ISP_DIN_WIND_OFST 0x2d05 	///../ucode/register.h:10181
+#define P_ISP_DIN_WIND_OFST 		VCBUS_REG_ADDR(ISP_DIN_WIND_OFST)
+#define ISP_FRM_SOFT_RST 0x2d06 	///../ucode/register.h:10186
+#define P_ISP_FRM_SOFT_RST 		VCBUS_REG_ADDR(ISP_FRM_SOFT_RST)
+#define ISP_RST_SYN_SEL 0x2d07 	///../ucode/register.h:10189
+#define P_ISP_RST_SYN_SEL 		VCBUS_REG_ADDR(ISP_RST_SYN_SEL)
+#define ISP_PAT_GEN_CTRL 0x2d08 	///../ucode/register.h:10197
+#define P_ISP_PAT_GEN_CTRL 		VCBUS_REG_ADDR(ISP_PAT_GEN_CTRL)
+#define ISP_PAT_XRAMP_SCAL 0x2d09 	///../ucode/register.h:10210
+#define P_ISP_PAT_XRAMP_SCAL 		VCBUS_REG_ADDR(ISP_PAT_XRAMP_SCAL)
+#define ISP_PAT_YRAMP_SCAL 0x2d0a 	///../ucode/register.h:10215
+#define P_ISP_PAT_YRAMP_SCAL 		VCBUS_REG_ADDR(ISP_PAT_YRAMP_SCAL)
+#define ISP_PAT_XYIDX_OFST 0x2d0b 	///../ucode/register.h:10220
+#define P_ISP_PAT_XYIDX_OFST 		VCBUS_REG_ADDR(ISP_PAT_XYIDX_OFST)
+#define ISP_PAT_XYIDX_SCAL 0x2d0c 	///../ucode/register.h:10225
+#define P_ISP_PAT_XYIDX_SCAL 		VCBUS_REG_ADDR(ISP_PAT_XYIDX_SCAL)
+#define ISP_PAT_BAR16_RED0 0x2d0d 	///../ucode/register.h:10232
+#define P_ISP_PAT_BAR16_RED0 		VCBUS_REG_ADDR(ISP_PAT_BAR16_RED0)
+#define ISP_PAT_BAR16_RED1 0x2d0e 	///../ucode/register.h:10237
+#define P_ISP_PAT_BAR16_RED1 		VCBUS_REG_ADDR(ISP_PAT_BAR16_RED1)
+#define ISP_PAT_BAR16_RED2 0x2d0f 	///../ucode/register.h:10242
+#define P_ISP_PAT_BAR16_RED2 		VCBUS_REG_ADDR(ISP_PAT_BAR16_RED2)
+#define ISP_PAT_BAR16_RED3 0x2d10 	///../ucode/register.h:10247
+#define P_ISP_PAT_BAR16_RED3 		VCBUS_REG_ADDR(ISP_PAT_BAR16_RED3)
+#define ISP_PAT_BAR16_GRN0 0x2d11 	///../ucode/register.h:10252
+#define P_ISP_PAT_BAR16_GRN0 		VCBUS_REG_ADDR(ISP_PAT_BAR16_GRN0)
+#define ISP_PAT_BAR16_GRN1 0x2d12 	///../ucode/register.h:10257
+#define P_ISP_PAT_BAR16_GRN1 		VCBUS_REG_ADDR(ISP_PAT_BAR16_GRN1)
+#define ISP_PAT_BAR16_GRN2 0x2d13 	///../ucode/register.h:10262
+#define P_ISP_PAT_BAR16_GRN2 		VCBUS_REG_ADDR(ISP_PAT_BAR16_GRN2)
+#define ISP_PAT_BAR16_GRN3 0x2d14 	///../ucode/register.h:10267
+#define P_ISP_PAT_BAR16_GRN3 		VCBUS_REG_ADDR(ISP_PAT_BAR16_GRN3)
+#define ISP_PAT_BAR16_BLU0 0x2d15 	///../ucode/register.h:10272
+#define P_ISP_PAT_BAR16_BLU0 		VCBUS_REG_ADDR(ISP_PAT_BAR16_BLU0)
+#define ISP_PAT_BAR16_BLU1 0x2d16 	///../ucode/register.h:10277
+#define P_ISP_PAT_BAR16_BLU1 		VCBUS_REG_ADDR(ISP_PAT_BAR16_BLU1)
+#define ISP_PAT_BAR16_BLU2 0x2d17 	///../ucode/register.h:10282
+#define P_ISP_PAT_BAR16_BLU2 		VCBUS_REG_ADDR(ISP_PAT_BAR16_BLU2)
+#define ISP_PAT_BAR16_BLU3 0x2d18 	///../ucode/register.h:10287
+#define P_ISP_PAT_BAR16_BLU3 		VCBUS_REG_ADDR(ISP_PAT_BAR16_BLU3)
+#define ISP_PAT_DFT_XYIDX 0x2d19 	///../ucode/register.h:10292
+#define P_ISP_PAT_DFT_XYIDX 		VCBUS_REG_ADDR(ISP_PAT_DFT_XYIDX)
+#define ISP_PAT_DFT_XYWID 0x2d1a 	///../ucode/register.h:10297
+#define P_ISP_PAT_DFT_XYWID 		VCBUS_REG_ADDR(ISP_PAT_DFT_XYWID)
+#define ISP_PAT_DFT_GAIN 0x2d1b 	///../ucode/register.h:10302
+#define P_ISP_PAT_DFT_GAIN 		VCBUS_REG_ADDR(ISP_PAT_DFT_GAIN)
+#define ISP_PAT_HVTOTAL 0x2d1c 	///../ucode/register.h:10311
+#define P_ISP_PAT_HVTOTAL 		VCBUS_REG_ADDR(ISP_PAT_HVTOTAL)
+#define ISP_PAT_VDE_SLINE 0x2d1d 	///../ucode/register.h:10314
+#define P_ISP_PAT_VDE_SLINE 		VCBUS_REG_ADDR(ISP_PAT_VDE_SLINE)
+#define ISP_OUTHS_PARA 0x2d1e 	///../ucode/register.h:10317
+#define P_ISP_OUTHS_PARA 		VCBUS_REG_ADDR(ISP_OUTHS_PARA)
+#define ISP_FRM_DONE_PARA 0x2d1f 	///../ucode/register.h:10321
+#define P_ISP_FRM_DONE_PARA 		VCBUS_REG_ADDR(ISP_FRM_DONE_PARA)
+#define ISP_CLAMPGAIN_CTRL 0x2d20 	///../ucode/register.h:10328
+#define P_ISP_CLAMPGAIN_CTRL 		VCBUS_REG_ADDR(ISP_CLAMPGAIN_CTRL)
+#define ISP_GAIN_BSCORE_GRBG 0x2d21 	///../ucode/register.h:10338
+#define P_ISP_GAIN_BSCORE_GRBG 		VCBUS_REG_ADDR(ISP_GAIN_BSCORE_GRBG)
+#define ISP_CLAMP_GRBG01 0x2d22 	///../ucode/register.h:10343
+#define P_ISP_CLAMP_GRBG01 		VCBUS_REG_ADDR(ISP_CLAMP_GRBG01)
+#define ISP_CLAMP_GRBG23 0x2d23 	///../ucode/register.h:10348
+#define P_ISP_CLAMP_GRBG23 		VCBUS_REG_ADDR(ISP_CLAMP_GRBG23)
+#define ISP_GAIN_GRBG01 0x2d24 	///../ucode/register.h:10353
+#define P_ISP_GAIN_GRBG01 		VCBUS_REG_ADDR(ISP_GAIN_GRBG01)
+#define ISP_GAIN_GRBG23 0x2d25 	///../ucode/register.h:10358
+#define P_ISP_GAIN_GRBG23 		VCBUS_REG_ADDR(ISP_GAIN_GRBG23)
+#define ISP_LNS_CTRL 0x2d28 	///../ucode/register.h:10367
+#define P_ISP_LNS_CTRL 		VCBUS_REG_ADDR(ISP_LNS_CTRL)
+#define ISP_LNS_XYSCAL 0x2d29 	///../ucode/register.h:10380
+#define P_ISP_LNS_XYSCAL 		VCBUS_REG_ADDR(ISP_LNS_XYSCAL)
+#define ISP_LNS_XYIDX_SHFT 0x2d2a 	///../ucode/register.h:10385
+#define P_ISP_LNS_XYIDX_SHFT 		VCBUS_REG_ADDR(ISP_LNS_XYIDX_SHFT)
+#define ISP_LNS_SENSOR_GAINGRBG 0x2d2b 	///../ucode/register.h:10390
+#define P_ISP_LNS_SENSOR_GAINGRBG 		VCBUS_REG_ADDR(ISP_LNS_SENSOR_GAINGRBG)
+#define ISP_LNS_POST_OFSTGRBG 0x2d2c 	///../ucode/register.h:10395
+#define P_ISP_LNS_POST_OFSTGRBG 		VCBUS_REG_ADDR(ISP_LNS_POST_OFSTGRBG)
+#define ISP_GMR0_CTRL 0x2d30 	///../ucode/register.h:10405
+#define P_ISP_GMR0_CTRL 		VCBUS_REG_ADDR(ISP_GMR0_CTRL)
+#define ISP_DFT_CTRL 0x2d31 	///../ucode/register.h:10417
+#define P_ISP_DFT_CTRL 		VCBUS_REG_ADDR(ISP_DFT_CTRL)
+#define ISP_DFT_VAR_MINMAX 0x2d33 	///../ucode/register.h:10433
+#define P_ISP_DFT_VAR_MINMAX 		VCBUS_REG_ADDR(ISP_DFT_VAR_MINMAX)
+#define ISP_DFT_THDLOW 0x2d34 	///../ucode/register.h:10438
+#define P_ISP_DFT_THDLOW 		VCBUS_REG_ADDR(ISP_DFT_THDLOW)
+#define ISP_DFT_THDHIG 0x2d35 	///../ucode/register.h:10443
+#define P_ISP_DFT_THDHIG 		VCBUS_REG_ADDR(ISP_DFT_THDHIG)
+#define ISP_DFT_CALIBRAT_REF 0x2d36 	///../ucode/register.h:10448
+#define P_ISP_DFT_CALIBRAT_REF 		VCBUS_REG_ADDR(ISP_DFT_CALIBRAT_REF)
+#define ISP_DFT_CALIBRAT_CTRL 0x2d37 	///../ucode/register.h:10453
+#define P_ISP_DFT_CALIBRAT_CTRL 		VCBUS_REG_ADDR(ISP_DFT_CALIBRAT_CTRL)
+#define ISP_DFT_DET0_MANUALTH 0x2d38 	///../ucode/register.h:10465
+#define P_ISP_DFT_DET0_MANUALTH 		VCBUS_REG_ADDR(ISP_DFT_DET0_MANUALTH)
+#define ISP_DFT_DET1_ADPTLOWTH 0x2d39 	///../ucode/register.h:10470
+#define P_ISP_DFT_DET1_ADPTLOWTH 		VCBUS_REG_ADDR(ISP_DFT_DET1_ADPTLOWTH)
+#define ISP_DFT_DET1_ADPTHIGTH 0x2d3a 	///../ucode/register.h:10475
+#define P_ISP_DFT_DET1_ADPTHIGTH 		VCBUS_REG_ADDR(ISP_DFT_DET1_ADPTHIGTH)
+#define ISP_DFT_DET1_ADPTNUM0 0x2d3b 	///../ucode/register.h:10480
+#define P_ISP_DFT_DET1_ADPTNUM0 		VCBUS_REG_ADDR(ISP_DFT_DET1_ADPTNUM0)
+#define ISP_DFT_DET1_ADPTNUM1 0x2d3c 	///../ucode/register.h:10487
+#define P_ISP_DFT_DET1_ADPTNUM1 		VCBUS_REG_ADDR(ISP_DFT_DET1_ADPTNUM1)
+#define ISP_DMS_CTRL0 0x2d40 	///../ucode/register.h:10498
+#define P_ISP_DMS_CTRL0 		VCBUS_REG_ADDR(ISP_DMS_CTRL0)
+#define ISP_DMS_CTRL1 0x2d41 	///../ucode/register.h:10510
+#define P_ISP_DMS_CTRL1 		VCBUS_REG_ADDR(ISP_DMS_CTRL1)
+#define ISP_MATRIX_PRE_OFST0_1 0x2d42 	///../ucode/register.h:10524
+#define P_ISP_MATRIX_PRE_OFST0_1 		VCBUS_REG_ADDR(ISP_MATRIX_PRE_OFST0_1)
+#define ISP_MATRIX_PRE_OFST2 0x2d43 	///../ucode/register.h:10529
+#define P_ISP_MATRIX_PRE_OFST2 		VCBUS_REG_ADDR(ISP_MATRIX_PRE_OFST2)
+#define ISP_MATRIX_COEF00_01 0x2d44 	///../ucode/register.h:10534
+#define P_ISP_MATRIX_COEF00_01 		VCBUS_REG_ADDR(ISP_MATRIX_COEF00_01)
+#define ISP_MATRIX_COEF02_10 0x2d45 	///../ucode/register.h:10539
+#define P_ISP_MATRIX_COEF02_10 		VCBUS_REG_ADDR(ISP_MATRIX_COEF02_10)
+#define ISP_MATRIX_COEF11_12 0x2d46 	///../ucode/register.h:10544
+#define P_ISP_MATRIX_COEF11_12 		VCBUS_REG_ADDR(ISP_MATRIX_COEF11_12)
+#define ISP_MATRIX_COEF20_21 0x2d47 	///../ucode/register.h:10549
+#define P_ISP_MATRIX_COEF20_21 		VCBUS_REG_ADDR(ISP_MATRIX_COEF20_21)
+#define ISP_MATRIX_COEF22 0x2d48 	///../ucode/register.h:10554
+#define P_ISP_MATRIX_COEF22 		VCBUS_REG_ADDR(ISP_MATRIX_COEF22)
+#define ISP_MATRIX_POS_OFST0_1 0x2d49 	///../ucode/register.h:10557
+#define P_ISP_MATRIX_POS_OFST0_1 		VCBUS_REG_ADDR(ISP_MATRIX_POS_OFST0_1)
+#define ISP_MATRIX_POS_OFST2 0x2d4a 	///../ucode/register.h:10562
+#define P_ISP_MATRIX_POS_OFST2 		VCBUS_REG_ADDR(ISP_MATRIX_POS_OFST2)
+#define ISP_PKNR_HVBLANK_NUM 0x2d50 	///../ucode/register.h:10569
+#define P_ISP_PKNR_HVBLANK_NUM 		VCBUS_REG_ADDR(ISP_PKNR_HVBLANK_NUM)
+#define ISP_NR_GAUSSIAN_MODE 0x2d51 	///../ucode/register.h:10574
+#define P_ISP_NR_GAUSSIAN_MODE 		VCBUS_REG_ADDR(ISP_NR_GAUSSIAN_MODE)
+#define ISP_PK_HVCON_LPF_MODE 0x2d52 	///../ucode/register.h:10579
+#define P_ISP_PK_HVCON_LPF_MODE 		VCBUS_REG_ADDR(ISP_PK_HVCON_LPF_MODE)
+#define ISP_PK_CON_BLEND_GAIN 0x2d53 	///../ucode/register.h:10596
+#define P_ISP_PK_CON_BLEND_GAIN 		VCBUS_REG_ADDR(ISP_PK_CON_BLEND_GAIN)
+#define ISP_PK_CON_2CIRHPGAIN_TH_RATE 0x2d54 	///../ucode/register.h:10605
+#define P_ISP_PK_CON_2CIRHPGAIN_TH_RATE 		VCBUS_REG_ADDR(ISP_PK_CON_2CIRHPGAIN_TH_RATE)
+#define ISP_PK_CON_2CIRHPGAIN_LIMIT 0x2d55 	///../ucode/register.h:10611
+#define P_ISP_PK_CON_2CIRHPGAIN_LIMIT 		VCBUS_REG_ADDR(ISP_PK_CON_2CIRHPGAIN_LIMIT)
+#define ISP_PK_CON_2CIRBPGAIN_TH_RATE 0x2d56 	///../ucode/register.h:10617
+#define P_ISP_PK_CON_2CIRBPGAIN_TH_RATE 		VCBUS_REG_ADDR(ISP_PK_CON_2CIRBPGAIN_TH_RATE)
+#define ISP_PK_CON_2CIRBPGAIN_LIMIT 0x2d57 	///../ucode/register.h:10623
+#define P_ISP_PK_CON_2CIRBPGAIN_LIMIT 		VCBUS_REG_ADDR(ISP_PK_CON_2CIRBPGAIN_LIMIT)
+#define ISP_PK_CON_2DRTHPGAIN_TH_RATE 0x2d58 	///../ucode/register.h:10629
+#define P_ISP_PK_CON_2DRTHPGAIN_TH_RATE 		VCBUS_REG_ADDR(ISP_PK_CON_2DRTHPGAIN_TH_RATE)
+#define ISP_PK_CON_2DRTHPGAIN_LIMIT 0x2d59 	///../ucode/register.h:10635
+#define P_ISP_PK_CON_2DRTHPGAIN_LIMIT 		VCBUS_REG_ADDR(ISP_PK_CON_2DRTHPGAIN_LIMIT)
+#define ISP_PK_CON_2DRTBPGAIN_TH_RATE 0x2d5a 	///../ucode/register.h:10641
+#define P_ISP_PK_CON_2DRTBPGAIN_TH_RATE 		VCBUS_REG_ADDR(ISP_PK_CON_2DRTBPGAIN_TH_RATE)
+#define ISP_PK_CON_2DRTBPGAIN_LIMIT 0x2d5b 	///../ucode/register.h:10647
+#define P_ISP_PK_CON_2DRTBPGAIN_LIMIT 		VCBUS_REG_ADDR(ISP_PK_CON_2DRTBPGAIN_LIMIT)
+#define ISP_PK_CIRFB_LPF_MODE 0x2d60 	///../ucode/register.h:10654
+#define P_ISP_PK_CIRFB_LPF_MODE 		VCBUS_REG_ADDR(ISP_PK_CIRFB_LPF_MODE)
+#define ISP_PK_DRTFB_LPF_MODE 0x2d61 	///../ucode/register.h:10668
+#define P_ISP_PK_DRTFB_LPF_MODE 		VCBUS_REG_ADDR(ISP_PK_DRTFB_LPF_MODE)
+#define ISP_PK_CIRFB_HP_CORING 0x2d62 	///../ucode/register.h:10682
+#define P_ISP_PK_CIRFB_HP_CORING 		VCBUS_REG_ADDR(ISP_PK_CIRFB_HP_CORING)
+#define ISP_PK_CIRFB_BP_CORING 0x2d63 	///../ucode/register.h:10689
+#define P_ISP_PK_CIRFB_BP_CORING 		VCBUS_REG_ADDR(ISP_PK_CIRFB_BP_CORING)
+#define ISP_PK_DRTFB_HP_CORING 0x2d64 	///../ucode/register.h:10696
+#define P_ISP_PK_DRTFB_HP_CORING 		VCBUS_REG_ADDR(ISP_PK_DRTFB_HP_CORING)
+#define ISP_PK_DRTFB_BP_CORING 0x2d65 	///../ucode/register.h:10703
+#define P_ISP_PK_DRTFB_BP_CORING 		VCBUS_REG_ADDR(ISP_PK_DRTFB_BP_CORING)
+#define ISP_PK_CIRFB_BLEND_GAIN 0x2d66 	///../ucode/register.h:10710
+#define P_ISP_PK_CIRFB_BLEND_GAIN 		VCBUS_REG_ADDR(ISP_PK_CIRFB_BLEND_GAIN)
+#define ISP_NR_ALPY_SSD_GAIN_OFST 0x2d68 	///../ucode/register.h:10721
+#define P_ISP_NR_ALPY_SSD_GAIN_OFST 		VCBUS_REG_ADDR(ISP_NR_ALPY_SSD_GAIN_OFST)
+#define ISP_NR_ALP0Y_ERR2CURV_TH_RATE 0x2d69 	///../ucode/register.h:10726
+#define P_ISP_NR_ALP0Y_ERR2CURV_TH_RATE 		VCBUS_REG_ADDR(ISP_NR_ALP0Y_ERR2CURV_TH_RATE)
+#define ISP_NR_ALP0Y_ERR2CURV_LIMIT 0x2d6a 	///../ucode/register.h:10733
+#define P_ISP_NR_ALP0Y_ERR2CURV_LIMIT 		VCBUS_REG_ADDR(ISP_NR_ALP0Y_ERR2CURV_LIMIT)
+#define ISP_NR_ALP0C_ERR2CURV_TH_RATE 0x2d6b 	///../ucode/register.h:10739
+#define P_ISP_NR_ALP0C_ERR2CURV_TH_RATE 		VCBUS_REG_ADDR(ISP_NR_ALP0C_ERR2CURV_TH_RATE)
+#define ISP_NR_ALP0C_ERR2CURV_LIMIT 0x2d6c 	///../ucode/register.h:10745
+#define P_ISP_NR_ALP0C_ERR2CURV_LIMIT 		VCBUS_REG_ADDR(ISP_NR_ALP0C_ERR2CURV_LIMIT)
+#define ISP_NR_ALP0_MIN_MAX 0x2d6d 	///../ucode/register.h:10750
+#define P_ISP_NR_ALP0_MIN_MAX 		VCBUS_REG_ADDR(ISP_NR_ALP0_MIN_MAX)
+#define ISP_NR_ALP1_MIERR_CORING 0x2d6e 	///../ucode/register.h:10759
+#define P_ISP_NR_ALP1_MIERR_CORING 		VCBUS_REG_ADDR(ISP_NR_ALP1_MIERR_CORING)
+#define ISP_NR_ALP1_ERR2CURV_TH_RATE 0x2d6f 	///../ucode/register.h:10766
+#define P_ISP_NR_ALP1_ERR2CURV_TH_RATE 		VCBUS_REG_ADDR(ISP_NR_ALP1_ERR2CURV_TH_RATE)
+#define ISP_NR_ALP1_ERR2CURV_LIMIT 0x2d70 	///../ucode/register.h:10772
+#define P_ISP_NR_ALP1_ERR2CURV_LIMIT 		VCBUS_REG_ADDR(ISP_NR_ALP1_ERR2CURV_LIMIT)
+#define ISP_NR_ALP1_MIN_MAX 0x2d71 	///../ucode/register.h:10778
+#define P_ISP_NR_ALP1_MIN_MAX 		VCBUS_REG_ADDR(ISP_NR_ALP1_MIN_MAX)
+#define ISP_PK_ALP2_MIERR_CORING 0x2d72 	///../ucode/register.h:10787
+#define P_ISP_PK_ALP2_MIERR_CORING 		VCBUS_REG_ADDR(ISP_PK_ALP2_MIERR_CORING)
+#define ISP_PK_ALP2_ERR2CURV_TH_RATE 0x2d73 	///../ucode/register.h:10794
+#define P_ISP_PK_ALP2_ERR2CURV_TH_RATE 		VCBUS_REG_ADDR(ISP_PK_ALP2_ERR2CURV_TH_RATE)
+#define ISP_PK_ALP2_ERR2CURV_LIMIT 0x2d74 	///../ucode/register.h:10800
+#define P_ISP_PK_ALP2_ERR2CURV_LIMIT 		VCBUS_REG_ADDR(ISP_PK_ALP2_ERR2CURV_LIMIT)
+#define ISP_PK_ALP2_MIN_MAX 0x2d75 	///../ucode/register.h:10806
+#define P_ISP_PK_ALP2_MIN_MAX 		VCBUS_REG_ADDR(ISP_PK_ALP2_MIN_MAX)
+#define ISP_PK_FINALGAIN_HP_BP 0x2d76 	///../ucode/register.h:10811
+#define P_ISP_PK_FINALGAIN_HP_BP 		VCBUS_REG_ADDR(ISP_PK_FINALGAIN_HP_BP)
+#define ISP_PK_OS_HORZ_CORE_GAIN 0x2d78 	///../ucode/register.h:10816
+#define P_ISP_PK_OS_HORZ_CORE_GAIN 		VCBUS_REG_ADDR(ISP_PK_OS_HORZ_CORE_GAIN)
+#define ISP_PK_OS_VERT_CORE_GAIN 0x2d79 	///../ucode/register.h:10821
+#define P_ISP_PK_OS_VERT_CORE_GAIN 		VCBUS_REG_ADDR(ISP_PK_OS_VERT_CORE_GAIN)
+#define ISP_PK_OS_ADPT_MISC 0x2d7a 	///../ucode/register.h:10826
+#define P_ISP_PK_OS_ADPT_MISC 		VCBUS_REG_ADDR(ISP_PK_OS_ADPT_MISC)
+#define ISP_PK_OS_STATIC 0x2d7b 	///../ucode/register.h:10831
+#define P_ISP_PK_OS_STATIC 		VCBUS_REG_ADDR(ISP_PK_OS_STATIC)
+#define ISP_PKSDE_MODE_PKGAIN 0x2d80 	///../ucode/register.h:10844
+#define P_ISP_PKSDE_MODE_PKGAIN 		VCBUS_REG_ADDR(ISP_PKSDE_MODE_PKGAIN)
+#define ISP_PKSDE_REPLACE_Y_U 0x2d81 	///../ucode/register.h:10855
+#define P_ISP_PKSDE_REPLACE_Y_U 		VCBUS_REG_ADDR(ISP_PKSDE_REPLACE_Y_U)
+#define ISP_PKSDE_REPLACE_V 0x2d82 	///../ucode/register.h:10864
+#define P_ISP_PKSDE_REPLACE_V 		VCBUS_REG_ADDR(ISP_PKSDE_REPLACE_V)
+#define ISP_PKSDE_BINARY_HIG 0x2d83 	///../ucode/register.h:10870
+#define P_ISP_PKSDE_BINARY_HIG 		VCBUS_REG_ADDR(ISP_PKSDE_BINARY_HIG)
+#define ISP_PKSDE_BINARY_LOW 0x2d84 	///../ucode/register.h:10875
+#define P_ISP_PKSDE_BINARY_LOW 		VCBUS_REG_ADDR(ISP_PKSDE_BINARY_LOW)
+#define ISP_PKNR_ENABLE 0x2d85 	///../ucode/register.h:10880
+#define P_ISP_PKNR_ENABLE 		VCBUS_REG_ADDR(ISP_PKNR_ENABLE)
+#define ISP_AWB_WIND_LR 0x2d88 	///../ucode/register.h:10888
+#define P_ISP_AWB_WIND_LR 		VCBUS_REG_ADDR(ISP_AWB_WIND_LR)
+#define ISP_AWB_WIND_TB 0x2d89 	///../ucode/register.h:10893
+#define P_ISP_AWB_WIND_TB 		VCBUS_REG_ADDR(ISP_AWB_WIND_TB)
+#define ISP_AWB_GBGRBR_THRD 0x2d8a 	///../ucode/register.h:10898
+#define P_ISP_AWB_GBGRBR_THRD 		VCBUS_REG_ADDR(ISP_AWB_GBGRBR_THRD)
+#define ISP_AWB_UVTH_YPIECE 0x2d8b 	///../ucode/register.h:10903
+#define P_ISP_AWB_UVTH_YPIECE 		VCBUS_REG_ADDR(ISP_AWB_UVTH_YPIECE)
+#define ISP_AWB_AEC_ENABLE 0x2d8c 	///../ucode/register.h:10908
+#define P_ISP_AWB_AEC_ENABLE 		VCBUS_REG_ADDR(ISP_AWB_AEC_ENABLE)
+#define ISP_AEC_THRESHOLDS 0x2d90 	///../ucode/register.h:10917
+#define P_ISP_AEC_THRESHOLDS 		VCBUS_REG_ADDR(ISP_AEC_THRESHOLDS)
+#define ISP_AEC_WIND_XYSTART 0x2d91 	///../ucode/register.h:10922
+#define P_ISP_AEC_WIND_XYSTART 		VCBUS_REG_ADDR(ISP_AEC_WIND_XYSTART)
+#define ISP_AEC_WIND_XYSTEP 0x2d92 	///../ucode/register.h:10927
+#define P_ISP_AEC_WIND_XYSTEP 		VCBUS_REG_ADDR(ISP_AEC_WIND_XYSTEP)
+#define ISP_AECRAW_WIND_LR 0x2d93 	///../ucode/register.h:10932
+#define P_ISP_AECRAW_WIND_LR 		VCBUS_REG_ADDR(ISP_AECRAW_WIND_LR)
+#define ISP_AECRAW_WIND_TB 0x2d94 	///../ucode/register.h:10937
+#define P_ISP_AECRAW_WIND_TB 		VCBUS_REG_ADDR(ISP_AECRAW_WIND_TB)
+#define ISP_AFC_FILTER_SEL 0x2d98 	///../ucode/register.h:10946
+#define P_ISP_AFC_FILTER_SEL 		VCBUS_REG_ADDR(ISP_AFC_FILTER_SEL)
+#define ISP_AFC_WIND0_LR 0x2d99 	///../ucode/register.h:10955
+#define P_ISP_AFC_WIND0_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND0_LR)
+#define ISP_AFC_WIND0_TB 0x2d9a 	///../ucode/register.h:10960
+#define P_ISP_AFC_WIND0_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND0_TB)
+#define ISP_AFC_WIND1_LR 0x2d9b 	///../ucode/register.h:10965
+#define P_ISP_AFC_WIND1_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND1_LR)
+#define ISP_AFC_WIND1_TB 0x2d9c 	///../ucode/register.h:10970
+#define P_ISP_AFC_WIND1_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND1_TB)
+#define ISP_AFC_WIND2_LR 0x2d9d 	///../ucode/register.h:10975
+#define P_ISP_AFC_WIND2_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND2_LR)
+#define ISP_AFC_WIND2_TB 0x2d9e 	///../ucode/register.h:10980
+#define P_ISP_AFC_WIND2_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND2_TB)
+#define ISP_AFC_WIND3_LR 0x2d9f 	///../ucode/register.h:10985
+#define P_ISP_AFC_WIND3_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND3_LR)
+#define ISP_AFC_WIND3_TB 0x2da0 	///../ucode/register.h:10990
+#define P_ISP_AFC_WIND3_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND3_TB)
+#define ISP_AFC_WIND4_LR 0x2da1 	///../ucode/register.h:10995
+#define P_ISP_AFC_WIND4_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND4_LR)
+#define ISP_AFC_WIND4_TB 0x2da2 	///../ucode/register.h:11000
+#define P_ISP_AFC_WIND4_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND4_TB)
+#define ISP_AFC_WIND5_LR 0x2da3 	///../ucode/register.h:11005
+#define P_ISP_AFC_WIND5_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND5_LR)
+#define ISP_AFC_WIND5_TB 0x2da4 	///../ucode/register.h:11010
+#define P_ISP_AFC_WIND5_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND5_TB)
+#define ISP_AFC_WIND6_LR 0x2da5 	///../ucode/register.h:11015
+#define P_ISP_AFC_WIND6_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND6_LR)
+#define ISP_AFC_WIND6_TB 0x2da6 	///../ucode/register.h:11020
+#define P_ISP_AFC_WIND6_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND6_TB)
+#define ISP_AFC_WIND7_LR 0x2da7 	///../ucode/register.h:11025
+#define P_ISP_AFC_WIND7_LR 		VCBUS_REG_ADDR(ISP_AFC_WIND7_LR)
+#define ISP_AFC_WIND7_TB 0x2da8 	///../ucode/register.h:11030
+#define P_ISP_AFC_WIND7_TB 		VCBUS_REG_ADDR(ISP_AFC_WIND7_TB)
+#define ISP_BLNR_CTRL 0x2dac 	///../ucode/register.h:11039
+#define P_ISP_BLNR_CTRL 		VCBUS_REG_ADDR(ISP_BLNR_CTRL)
+#define ISP_BLNR_WIND_LR 0x2dad 	///../ucode/register.h:11046
+#define P_ISP_BLNR_WIND_LR 		VCBUS_REG_ADDR(ISP_BLNR_WIND_LR)
+#define ISP_BLNR_WIND_TB 0x2dae 	///../ucode/register.h:11051
+#define P_ISP_BLNR_WIND_TB 		VCBUS_REG_ADDR(ISP_BLNR_WIND_TB)
+#define ISP_RAM_ACC_MODE 0x2daf 	///../ucode/register.h:11057
+#define P_ISP_RAM_ACC_MODE 		VCBUS_REG_ADDR(ISP_RAM_ACC_MODE)
+#define ISP_DBG_PIXEL_CTRL 0x2db0 	///../ucode/register.h:11064
+#define P_ISP_DBG_PIXEL_CTRL 		VCBUS_REG_ADDR(ISP_DBG_PIXEL_CTRL)
+#define ISP_DBG_PIXEL_POSITION 0x2db1 	///../ucode/register.h:11072
+#define P_ISP_DBG_PIXEL_POSITION 		VCBUS_REG_ADDR(ISP_DBG_PIXEL_POSITION)
+#define ISP_RO_DBG_PIXEL_GRBG0_1 0x2db2 	///../ucode/register.h:11077
+#define P_ISP_RO_DBG_PIXEL_GRBG0_1 		VCBUS_REG_ADDR(ISP_RO_DBG_PIXEL_GRBG0_1)
+#define ISP_RO_DBG_PIXEL_GRBG2_3 0x2db3 	///../ucode/register.h:11082
+#define P_ISP_RO_DBG_PIXEL_GRBG2_3 		VCBUS_REG_ADDR(ISP_RO_DBG_PIXEL_GRBG2_3)
+#define ISP_RO_DFT_LUTMEM_CTRL 0x2d32 	///../ucode/register.h:11088
+#define P_ISP_RO_DFT_LUTMEM_CTRL 		VCBUS_REG_ADDR(ISP_RO_DFT_LUTMEM_CTRL)
+#define ISP_RO_DFT_DET_NUM 0x2d3f 	///../ucode/register.h:11091
+#define P_ISP_RO_DFT_DET_NUM 		VCBUS_REG_ADDR(ISP_RO_DFT_DET_NUM)
+#define ISP_RO_INFORD_STATE 0x2db4 	///../ucode/register.h:11094
+#define P_ISP_RO_INFORD_STATE 		VCBUS_REG_ADDR(ISP_RO_INFORD_STATE)
+#define ISP_RO_DINVLD_HVCNT 0x2db5 	///../ucode/register.h:11097
+#define P_ISP_RO_DINVLD_HVCNT 		VCBUS_REG_ADDR(ISP_RO_DINVLD_HVCNT)
+#define ISP_RO_FRM_HS_STAT 0x2db6 	///../ucode/register.h:11102
+#define P_ISP_RO_FRM_HS_STAT 		VCBUS_REG_ADDR(ISP_RO_FRM_HS_STAT)
+#define ISP_RO_ADDR_PORT 0x2dc0 	///../ucode/register.h:11110
+#define P_ISP_RO_ADDR_PORT 		VCBUS_REG_ADDR(ISP_RO_ADDR_PORT)
+#define ISP_RO_DATA_PORT 0x2dc1 	///../ucode/register.h:11111
+#define P_ISP_RO_DATA_PORT 		VCBUS_REG_ADDR(ISP_RO_DATA_PORT)
+#define BT_CTRL 0x2f40 	///../ucode/register.h:11325
+#define P_BT_CTRL 		VCBUS_REG_ADDR(BT_CTRL)
+#define BT_VBISTART 0x2f41 	///../ucode/register.h:11346
+#define P_BT_VBISTART 		VCBUS_REG_ADDR(BT_VBISTART)
+#define BT_VBIEND 0x2f42 	///../ucode/register.h:11347
+#define P_BT_VBIEND 		VCBUS_REG_ADDR(BT_VBIEND)
+#define BT_FIELDSADR 0x2f43 	///../ucode/register.h:11348
+#define P_BT_FIELDSADR 		VCBUS_REG_ADDR(BT_FIELDSADR)
+#define BT_LINECTRL 0x2f44 	///../ucode/register.h:11349
+#define P_BT_LINECTRL 		VCBUS_REG_ADDR(BT_LINECTRL)
+#define BT_VIDEOSTART 0x2f45 	///../ucode/register.h:11350
+#define P_BT_VIDEOSTART 		VCBUS_REG_ADDR(BT_VIDEOSTART)
+#define BT_VIDEOEND 0x2f46 	///../ucode/register.h:11351
+#define P_BT_VIDEOEND 		VCBUS_REG_ADDR(BT_VIDEOEND)
+#define BT_SLICELINE0 0x2f47 	///../ucode/register.h:11352
+#define P_BT_SLICELINE0 		VCBUS_REG_ADDR(BT_SLICELINE0)
+#define BT_SLICELINE1 0x2f48 	///../ucode/register.h:11353
+#define P_BT_SLICELINE1 		VCBUS_REG_ADDR(BT_SLICELINE1)
+#define BT_PORT_CTRL 0x2f49 	///../ucode/register.h:11354
+#define P_BT_PORT_CTRL 		VCBUS_REG_ADDR(BT_PORT_CTRL)
+#define BT_SWAP_CTRL 0x2f4a 	///../ucode/register.h:11368
+#define P_BT_SWAP_CTRL 		VCBUS_REG_ADDR(BT_SWAP_CTRL)
+#define BT_ANCISADR 0x2f4b 	///../ucode/register.h:11369
+#define P_BT_ANCISADR 		VCBUS_REG_ADDR(BT_ANCISADR)
+#define BT_ANCIEADR 0x2f4c 	///../ucode/register.h:11370
+#define P_BT_ANCIEADR 		VCBUS_REG_ADDR(BT_ANCIEADR)
+#define BT_AFIFO_CTRL 0x2f4d 	///../ucode/register.h:11371
+#define P_BT_AFIFO_CTRL 		VCBUS_REG_ADDR(BT_AFIFO_CTRL)
+#define BT_601_CTRL0 0x2f4e 	///../ucode/register.h:11372
+#define P_BT_601_CTRL0 		VCBUS_REG_ADDR(BT_601_CTRL0)
+#define BT_601_CTRL1 0x2f4f 	///../ucode/register.h:11373
+#define P_BT_601_CTRL1 		VCBUS_REG_ADDR(BT_601_CTRL1)
+#define BT_601_CTRL2 0x2f50 	///../ucode/register.h:11374
+#define P_BT_601_CTRL2 		VCBUS_REG_ADDR(BT_601_CTRL2)
+#define BT_601_CTRL3 0x2f51 	///../ucode/register.h:11375
+#define P_BT_601_CTRL3 		VCBUS_REG_ADDR(BT_601_CTRL3)
+#define BT_FIELD_LUMA 0x2f52 	///../ucode/register.h:11376
+#define P_BT_FIELD_LUMA 		VCBUS_REG_ADDR(BT_FIELD_LUMA)
+#define BT_RAW_CTRL 0x2f53 	///../ucode/register.h:11377
+#define P_BT_RAW_CTRL 		VCBUS_REG_ADDR(BT_RAW_CTRL)
+#define BT_STATUS 0x2f54 	///../ucode/register.h:11378
+#define P_BT_STATUS 		VCBUS_REG_ADDR(BT_STATUS)
+#define BT_INT_CTRL 0x2f55 	///../ucode/register.h:11379
+#define P_BT_INT_CTRL 		VCBUS_REG_ADDR(BT_INT_CTRL)
+#define BT_ANCI_STATUS 0x2f56 	///../ucode/register.h:11380
+#define P_BT_ANCI_STATUS 		VCBUS_REG_ADDR(BT_ANCI_STATUS)
+#define BT_VLINE_STATUS 0x2f57 	///../ucode/register.h:11381
+#define P_BT_VLINE_STATUS 		VCBUS_REG_ADDR(BT_VLINE_STATUS)
+#define BT_AFIFO_PTR 0x2f58 	///../ucode/register.h:11382
+#define P_BT_AFIFO_PTR 		VCBUS_REG_ADDR(BT_AFIFO_PTR)
+#define BT_JPEGBYTENUM 0x2f59 	///../ucode/register.h:11383
+#define P_BT_JPEGBYTENUM 		VCBUS_REG_ADDR(BT_JPEGBYTENUM)
+#define BT_ERR_CNT 0x2f5a 	///../ucode/register.h:11384
+#define P_BT_ERR_CNT 		VCBUS_REG_ADDR(BT_ERR_CNT)
+#define BT_JPEG_STATUS0 0x2f5b 	///../ucode/register.h:11385
+#define P_BT_JPEG_STATUS0 		VCBUS_REG_ADDR(BT_JPEG_STATUS0)
+#define BT_JPEG_STATUS1 0x2f5c 	///../ucode/register.h:11386
+#define P_BT_JPEG_STATUS1 		VCBUS_REG_ADDR(BT_JPEG_STATUS1)
+#define BT_LCNT_STATUS 0x2f5d 	///../ucode/register.h:11387
+#define P_BT_LCNT_STATUS 		VCBUS_REG_ADDR(BT_LCNT_STATUS)
+#define BT_PCNT_STATUS 0x2f5e 	///../ucode/register.h:11388
+#define P_BT_PCNT_STATUS 		VCBUS_REG_ADDR(BT_PCNT_STATUS)
+#define BT656_ADDR_END 0x2f5f 	///../ucode/register.h:11389
+#define P_BT656_ADDR_END 		VCBUS_REG_ADDR(BT656_ADDR_END)
+#define VDEC_ASSIST_MMC_CTRL0 0x0001 	///../ucode/dos_register.h:40
+#define P_VDEC_ASSIST_MMC_CTRL0 		DOS_REG_ADDR(VDEC_ASSIST_MMC_CTRL0)
+#define VDEC_ASSIST_MMC_CTRL1 0x0002 	///../ucode/dos_register.h:41
+#define P_VDEC_ASSIST_MMC_CTRL1 		DOS_REG_ADDR(VDEC_ASSIST_MMC_CTRL1)
+#define VDEC_ASSIST_AMR1_INT0 0x0025 	///../ucode/dos_register.h:42
+#define P_VDEC_ASSIST_AMR1_INT0 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT0)
+#define VDEC_ASSIST_AMR1_INT1 0x0026 	///../ucode/dos_register.h:43
+#define P_VDEC_ASSIST_AMR1_INT1 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT1)
+#define VDEC_ASSIST_AMR1_INT2 0x0027 	///../ucode/dos_register.h:44
+#define P_VDEC_ASSIST_AMR1_INT2 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT2)
+#define VDEC_ASSIST_AMR1_INT3 0x0028 	///../ucode/dos_register.h:45
+#define P_VDEC_ASSIST_AMR1_INT3 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT3)
+#define VDEC_ASSIST_AMR1_INT4 0x0029 	///../ucode/dos_register.h:46
+#define P_VDEC_ASSIST_AMR1_INT4 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT4)
+#define VDEC_ASSIST_AMR1_INT5 0x002a 	///../ucode/dos_register.h:47
+#define P_VDEC_ASSIST_AMR1_INT5 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT5)
+#define VDEC_ASSIST_AMR1_INT6 0x002b 	///../ucode/dos_register.h:48
+#define P_VDEC_ASSIST_AMR1_INT6 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT6)
+#define VDEC_ASSIST_AMR1_INT7 0x002c 	///../ucode/dos_register.h:49
+#define P_VDEC_ASSIST_AMR1_INT7 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT7)
+#define VDEC_ASSIST_AMR1_INT8 0x002d 	///../ucode/dos_register.h:50
+#define P_VDEC_ASSIST_AMR1_INT8 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT8)
+#define VDEC_ASSIST_AMR1_INT9 0x002e 	///../ucode/dos_register.h:51
+#define P_VDEC_ASSIST_AMR1_INT9 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT9)
+#define VDEC_ASSIST_AMR1_INTA 0x002f 	///../ucode/dos_register.h:52
+#define P_VDEC_ASSIST_AMR1_INTA 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTA)
+#define VDEC_ASSIST_AMR1_INTB 0x0030 	///../ucode/dos_register.h:53
+#define P_VDEC_ASSIST_AMR1_INTB 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTB)
+#define VDEC_ASSIST_AMR1_INTC 0x0031 	///../ucode/dos_register.h:54
+#define P_VDEC_ASSIST_AMR1_INTC 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTC)
+#define VDEC_ASSIST_AMR1_INTD 0x0032 	///../ucode/dos_register.h:55
+#define P_VDEC_ASSIST_AMR1_INTD 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTD)
+#define VDEC_ASSIST_AMR1_INTE 0x0033 	///../ucode/dos_register.h:56
+#define P_VDEC_ASSIST_AMR1_INTE 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTE)
+#define VDEC_ASSIST_AMR1_INTF 0x0034 	///../ucode/dos_register.h:57
+#define P_VDEC_ASSIST_AMR1_INTF 		DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTF)
+#define VDEC_ASSIST_AMR2_INT0 0x0035 	///../ucode/dos_register.h:58
+#define P_VDEC_ASSIST_AMR2_INT0 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT0)
+#define VDEC_ASSIST_AMR2_INT1 0x0036 	///../ucode/dos_register.h:59
+#define P_VDEC_ASSIST_AMR2_INT1 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT1)
+#define VDEC_ASSIST_AMR2_INT2 0x0037 	///../ucode/dos_register.h:60
+#define P_VDEC_ASSIST_AMR2_INT2 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT2)
+#define VDEC_ASSIST_AMR2_INT3 0x0038 	///../ucode/dos_register.h:61
+#define P_VDEC_ASSIST_AMR2_INT3 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT3)
+#define VDEC_ASSIST_AMR2_INT4 0x0039 	///../ucode/dos_register.h:62
+#define P_VDEC_ASSIST_AMR2_INT4 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT4)
+#define VDEC_ASSIST_AMR2_INT5 0x003a 	///../ucode/dos_register.h:63
+#define P_VDEC_ASSIST_AMR2_INT5 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT5)
+#define VDEC_ASSIST_AMR2_INT6 0x003b 	///../ucode/dos_register.h:64
+#define P_VDEC_ASSIST_AMR2_INT6 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT6)
+#define VDEC_ASSIST_AMR2_INT7 0x003c 	///../ucode/dos_register.h:65
+#define P_VDEC_ASSIST_AMR2_INT7 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT7)
+#define VDEC_ASSIST_AMR2_INT8 0x003d 	///../ucode/dos_register.h:66
+#define P_VDEC_ASSIST_AMR2_INT8 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT8)
+#define VDEC_ASSIST_AMR2_INT9 0x003e 	///../ucode/dos_register.h:67
+#define P_VDEC_ASSIST_AMR2_INT9 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT9)
+#define VDEC_ASSIST_AMR2_INTA 0x003f 	///../ucode/dos_register.h:68
+#define P_VDEC_ASSIST_AMR2_INTA 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTA)
+#define VDEC_ASSIST_AMR2_INTB 0x0040 	///../ucode/dos_register.h:69
+#define P_VDEC_ASSIST_AMR2_INTB 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTB)
+#define VDEC_ASSIST_AMR2_INTC 0x0041 	///../ucode/dos_register.h:70
+#define P_VDEC_ASSIST_AMR2_INTC 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTC)
+#define VDEC_ASSIST_AMR2_INTD 0x0042 	///../ucode/dos_register.h:71
+#define P_VDEC_ASSIST_AMR2_INTD 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTD)
+#define VDEC_ASSIST_AMR2_INTE 0x0043 	///../ucode/dos_register.h:72
+#define P_VDEC_ASSIST_AMR2_INTE 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTE)
+#define VDEC_ASSIST_AMR2_INTF 0x0044 	///../ucode/dos_register.h:73
+#define P_VDEC_ASSIST_AMR2_INTF 		DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTF)
+#define VDEC_ASSIST_MBX_SSEL 0x0045 	///../ucode/dos_register.h:74
+#define P_VDEC_ASSIST_MBX_SSEL 		DOS_REG_ADDR(VDEC_ASSIST_MBX_SSEL)
+#define VDEC_ASSIST_TIMER0_LO 0x0060 	///../ucode/dos_register.h:75
+#define P_VDEC_ASSIST_TIMER0_LO 		DOS_REG_ADDR(VDEC_ASSIST_TIMER0_LO)
+#define VDEC_ASSIST_TIMER0_HI 0x0061 	///../ucode/dos_register.h:76
+#define P_VDEC_ASSIST_TIMER0_HI 		DOS_REG_ADDR(VDEC_ASSIST_TIMER0_HI)
+#define VDEC_ASSIST_TIMER1_LO 0x0062 	///../ucode/dos_register.h:77
+#define P_VDEC_ASSIST_TIMER1_LO 		DOS_REG_ADDR(VDEC_ASSIST_TIMER1_LO)
+#define VDEC_ASSIST_TIMER1_HI 0x0063 	///../ucode/dos_register.h:78
+#define P_VDEC_ASSIST_TIMER1_HI 		DOS_REG_ADDR(VDEC_ASSIST_TIMER1_HI)
+#define VDEC_ASSIST_DMA_INT 0x0064 	///../ucode/dos_register.h:79
+#define P_VDEC_ASSIST_DMA_INT 		DOS_REG_ADDR(VDEC_ASSIST_DMA_INT)
+#define VDEC_ASSIST_DMA_INT_MSK 0x0065 	///../ucode/dos_register.h:80
+#define P_VDEC_ASSIST_DMA_INT_MSK 		DOS_REG_ADDR(VDEC_ASSIST_DMA_INT_MSK)
+#define VDEC_ASSIST_DMA_INT2 0x0066 	///../ucode/dos_register.h:81
+#define P_VDEC_ASSIST_DMA_INT2 		DOS_REG_ADDR(VDEC_ASSIST_DMA_INT2)
+#define VDEC_ASSIST_DMA_INT_MSK2 0x0067 	///../ucode/dos_register.h:82
+#define P_VDEC_ASSIST_DMA_INT_MSK2 		DOS_REG_ADDR(VDEC_ASSIST_DMA_INT_MSK2)
+#define VDEC_ASSIST_MBOX0_IRQ_REG 0x0070 	///../ucode/dos_register.h:83
+#define P_VDEC_ASSIST_MBOX0_IRQ_REG 		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_IRQ_REG)
+#define VDEC_ASSIST_MBOX0_CLR_REG 0x0071 	///../ucode/dos_register.h:84
+#define P_VDEC_ASSIST_MBOX0_CLR_REG 		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_CLR_REG)
+#define VDEC_ASSIST_MBOX0_MASK 0x0072 	///../ucode/dos_register.h:85
+#define P_VDEC_ASSIST_MBOX0_MASK 		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_MASK)
+#define VDEC_ASSIST_MBOX0_FIQ_SEL 0x0073 	///../ucode/dos_register.h:86
+#define P_VDEC_ASSIST_MBOX0_FIQ_SEL 		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_FIQ_SEL)
+#define VDEC_ASSIST_MBOX1_IRQ_REG 0x0074 	///../ucode/dos_register.h:87
+#define P_VDEC_ASSIST_MBOX1_IRQ_REG 		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_IRQ_REG)
+#define VDEC_ASSIST_MBOX1_CLR_REG 0x0075 	///../ucode/dos_register.h:88
+#define P_VDEC_ASSIST_MBOX1_CLR_REG 		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_CLR_REG)
+#define VDEC_ASSIST_MBOX1_MASK 0x0076 	///../ucode/dos_register.h:89
+#define P_VDEC_ASSIST_MBOX1_MASK 		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_MASK)
+#define VDEC_ASSIST_MBOX1_FIQ_SEL 0x0077 	///../ucode/dos_register.h:90
+#define P_VDEC_ASSIST_MBOX1_FIQ_SEL 		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_FIQ_SEL)
+#define VDEC_ASSIST_MBOX2_IRQ_REG 0x0078 	///../ucode/dos_register.h:91
+#define P_VDEC_ASSIST_MBOX2_IRQ_REG 		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_IRQ_REG)
+#define VDEC_ASSIST_MBOX2_CLR_REG 0x0079 	///../ucode/dos_register.h:92
+#define P_VDEC_ASSIST_MBOX2_CLR_REG 		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_CLR_REG)
+#define VDEC_ASSIST_MBOX2_MASK 0x007a 	///../ucode/dos_register.h:93
+#define P_VDEC_ASSIST_MBOX2_MASK 		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_MASK)
+#define VDEC_ASSIST_MBOX2_FIQ_SEL 0x007b 	///../ucode/dos_register.h:94
+#define P_VDEC_ASSIST_MBOX2_FIQ_SEL 		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_FIQ_SEL)
+#define VDEC2_ASSIST_MMC_CTRL0 0x2001 	///../ucode/dos_register.h:101
+#define P_VDEC2_ASSIST_MMC_CTRL0 		DOS_REG_ADDR(VDEC2_ASSIST_MMC_CTRL0)
+#define VDEC2_ASSIST_MMC_CTRL1 0x2002 	///../ucode/dos_register.h:102
+#define P_VDEC2_ASSIST_MMC_CTRL1 		DOS_REG_ADDR(VDEC2_ASSIST_MMC_CTRL1)
+#define VDEC2_ASSIST_AMR1_INT0 0x2025 	///../ucode/dos_register.h:103
+#define P_VDEC2_ASSIST_AMR1_INT0 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT0)
+#define VDEC2_ASSIST_AMR1_INT1 0x2026 	///../ucode/dos_register.h:104
+#define P_VDEC2_ASSIST_AMR1_INT1 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT1)
+#define VDEC2_ASSIST_AMR1_INT2 0x2027 	///../ucode/dos_register.h:105
+#define P_VDEC2_ASSIST_AMR1_INT2 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT2)
+#define VDEC2_ASSIST_AMR1_INT3 0x2028 	///../ucode/dos_register.h:106
+#define P_VDEC2_ASSIST_AMR1_INT3 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT3)
+#define VDEC2_ASSIST_AMR1_INT4 0x2029 	///../ucode/dos_register.h:107
+#define P_VDEC2_ASSIST_AMR1_INT4 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT4)
+#define VDEC2_ASSIST_AMR1_INT5 0x202a 	///../ucode/dos_register.h:108
+#define P_VDEC2_ASSIST_AMR1_INT5 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT5)
+#define VDEC2_ASSIST_AMR1_INT6 0x202b 	///../ucode/dos_register.h:109
+#define P_VDEC2_ASSIST_AMR1_INT6 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT6)
+#define VDEC2_ASSIST_AMR1_INT7 0x202c 	///../ucode/dos_register.h:110
+#define P_VDEC2_ASSIST_AMR1_INT7 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT7)
+#define VDEC2_ASSIST_AMR1_INT8 0x202d 	///../ucode/dos_register.h:111
+#define P_VDEC2_ASSIST_AMR1_INT8 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT8)
+#define VDEC2_ASSIST_AMR1_INT9 0x202e 	///../ucode/dos_register.h:112
+#define P_VDEC2_ASSIST_AMR1_INT9 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT9)
+#define VDEC2_ASSIST_AMR1_INTA 0x202f 	///../ucode/dos_register.h:113
+#define P_VDEC2_ASSIST_AMR1_INTA 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTA)
+#define VDEC2_ASSIST_AMR1_INTB 0x2030 	///../ucode/dos_register.h:114
+#define P_VDEC2_ASSIST_AMR1_INTB 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTB)
+#define VDEC2_ASSIST_AMR1_INTC 0x2031 	///../ucode/dos_register.h:115
+#define P_VDEC2_ASSIST_AMR1_INTC 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTC)
+#define VDEC2_ASSIST_AMR1_INTD 0x2032 	///../ucode/dos_register.h:116
+#define P_VDEC2_ASSIST_AMR1_INTD 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTD)
+#define VDEC2_ASSIST_AMR1_INTE 0x2033 	///../ucode/dos_register.h:117
+#define P_VDEC2_ASSIST_AMR1_INTE 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTE)
+#define VDEC2_ASSIST_AMR1_INTF 0x2034 	///../ucode/dos_register.h:118
+#define P_VDEC2_ASSIST_AMR1_INTF 		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTF)
+#define VDEC2_ASSIST_AMR2_INT0 0x2035 	///../ucode/dos_register.h:119
+#define P_VDEC2_ASSIST_AMR2_INT0 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT0)
+#define VDEC2_ASSIST_AMR2_INT1 0x2036 	///../ucode/dos_register.h:120
+#define P_VDEC2_ASSIST_AMR2_INT1 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT1)
+#define VDEC2_ASSIST_AMR2_INT2 0x2037 	///../ucode/dos_register.h:121
+#define P_VDEC2_ASSIST_AMR2_INT2 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT2)
+#define VDEC2_ASSIST_AMR2_INT3 0x2038 	///../ucode/dos_register.h:122
+#define P_VDEC2_ASSIST_AMR2_INT3 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT3)
+#define VDEC2_ASSIST_AMR2_INT4 0x2039 	///../ucode/dos_register.h:123
+#define P_VDEC2_ASSIST_AMR2_INT4 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT4)
+#define VDEC2_ASSIST_AMR2_INT5 0x203a 	///../ucode/dos_register.h:124
+#define P_VDEC2_ASSIST_AMR2_INT5 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT5)
+#define VDEC2_ASSIST_AMR2_INT6 0x203b 	///../ucode/dos_register.h:125
+#define P_VDEC2_ASSIST_AMR2_INT6 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT6)
+#define VDEC2_ASSIST_AMR2_INT7 0x203c 	///../ucode/dos_register.h:126
+#define P_VDEC2_ASSIST_AMR2_INT7 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT7)
+#define VDEC2_ASSIST_AMR2_INT8 0x203d 	///../ucode/dos_register.h:127
+#define P_VDEC2_ASSIST_AMR2_INT8 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT8)
+#define VDEC2_ASSIST_AMR2_INT9 0x203e 	///../ucode/dos_register.h:128
+#define P_VDEC2_ASSIST_AMR2_INT9 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT9)
+#define VDEC2_ASSIST_AMR2_INTA 0x203f 	///../ucode/dos_register.h:129
+#define P_VDEC2_ASSIST_AMR2_INTA 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTA)
+#define VDEC2_ASSIST_AMR2_INTB 0x2040 	///../ucode/dos_register.h:130
+#define P_VDEC2_ASSIST_AMR2_INTB 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTB)
+#define VDEC2_ASSIST_AMR2_INTC 0x2041 	///../ucode/dos_register.h:131
+#define P_VDEC2_ASSIST_AMR2_INTC 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTC)
+#define VDEC2_ASSIST_AMR2_INTD 0x2042 	///../ucode/dos_register.h:132
+#define P_VDEC2_ASSIST_AMR2_INTD 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTD)
+#define VDEC2_ASSIST_AMR2_INTE 0x2043 	///../ucode/dos_register.h:133
+#define P_VDEC2_ASSIST_AMR2_INTE 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTE)
+#define VDEC2_ASSIST_AMR2_INTF 0x2044 	///../ucode/dos_register.h:134
+#define P_VDEC2_ASSIST_AMR2_INTF 		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTF)
+#define VDEC2_ASSIST_MBX_SSEL 0x2045 	///../ucode/dos_register.h:135
+#define P_VDEC2_ASSIST_MBX_SSEL 		DOS_REG_ADDR(VDEC2_ASSIST_MBX_SSEL)
+#define VDEC2_ASSIST_TIMER0_LO 0x2060 	///../ucode/dos_register.h:136
+#define P_VDEC2_ASSIST_TIMER0_LO 		DOS_REG_ADDR(VDEC2_ASSIST_TIMER0_LO)
+#define VDEC2_ASSIST_TIMER0_HI 0x2061 	///../ucode/dos_register.h:137
+#define P_VDEC2_ASSIST_TIMER0_HI 		DOS_REG_ADDR(VDEC2_ASSIST_TIMER0_HI)
+#define VDEC2_ASSIST_TIMER1_LO 0x2062 	///../ucode/dos_register.h:138
+#define P_VDEC2_ASSIST_TIMER1_LO 		DOS_REG_ADDR(VDEC2_ASSIST_TIMER1_LO)
+#define VDEC2_ASSIST_TIMER1_HI 0x2063 	///../ucode/dos_register.h:139
+#define P_VDEC2_ASSIST_TIMER1_HI 		DOS_REG_ADDR(VDEC2_ASSIST_TIMER1_HI)
+#define VDEC2_ASSIST_DMA_INT 0x2064 	///../ucode/dos_register.h:140
+#define P_VDEC2_ASSIST_DMA_INT 		DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT)
+#define VDEC2_ASSIST_DMA_INT_MSK 0x2065 	///../ucode/dos_register.h:141
+#define P_VDEC2_ASSIST_DMA_INT_MSK 		DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT_MSK)
+#define VDEC2_ASSIST_DMA_INT2 0x2066 	///../ucode/dos_register.h:142
+#define P_VDEC2_ASSIST_DMA_INT2 		DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT2)
+#define VDEC2_ASSIST_DMA_INT_MSK2 0x2067 	///../ucode/dos_register.h:143
+#define P_VDEC2_ASSIST_DMA_INT_MSK2 		DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT_MSK2)
+#define VDEC2_ASSIST_MBOX0_IRQ_REG 0x2070 	///../ucode/dos_register.h:144
+#define P_VDEC2_ASSIST_MBOX0_IRQ_REG 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_IRQ_REG)
+#define VDEC2_ASSIST_MBOX0_CLR_REG 0x2071 	///../ucode/dos_register.h:145
+#define P_VDEC2_ASSIST_MBOX0_CLR_REG 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_CLR_REG)
+#define VDEC2_ASSIST_MBOX0_MASK 0x2072 	///../ucode/dos_register.h:146
+#define P_VDEC2_ASSIST_MBOX0_MASK 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_MASK)
+#define VDEC2_ASSIST_MBOX0_FIQ_SEL 0x2073 	///../ucode/dos_register.h:147
+#define P_VDEC2_ASSIST_MBOX0_FIQ_SEL 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_FIQ_SEL)
+#define VDEC2_ASSIST_MBOX1_IRQ_REG 0x2074 	///../ucode/dos_register.h:148
+#define P_VDEC2_ASSIST_MBOX1_IRQ_REG 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_IRQ_REG)
+#define VDEC2_ASSIST_MBOX1_CLR_REG 0x2075 	///../ucode/dos_register.h:149
+#define P_VDEC2_ASSIST_MBOX1_CLR_REG 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_CLR_REG)
+#define VDEC2_ASSIST_MBOX1_MASK 0x2076 	///../ucode/dos_register.h:150
+#define P_VDEC2_ASSIST_MBOX1_MASK 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_MASK)
+#define VDEC2_ASSIST_MBOX1_FIQ_SEL 0x2077 	///../ucode/dos_register.h:151
+#define P_VDEC2_ASSIST_MBOX1_FIQ_SEL 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_FIQ_SEL)
+#define VDEC2_ASSIST_MBOX2_IRQ_REG 0x2078 	///../ucode/dos_register.h:152
+#define P_VDEC2_ASSIST_MBOX2_IRQ_REG 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_IRQ_REG)
+#define VDEC2_ASSIST_MBOX2_CLR_REG 0x2079 	///../ucode/dos_register.h:153
+#define P_VDEC2_ASSIST_MBOX2_CLR_REG 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_CLR_REG)
+#define VDEC2_ASSIST_MBOX2_MASK 0x207a 	///../ucode/dos_register.h:154
+#define P_VDEC2_ASSIST_MBOX2_MASK 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_MASK)
+#define VDEC2_ASSIST_MBOX2_FIQ_SEL 0x207b 	///../ucode/dos_register.h:155
+#define P_VDEC2_ASSIST_MBOX2_FIQ_SEL 		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_FIQ_SEL)
+#define HCODEC_ASSIST_MMC_CTRL0 0x1001 	///../ucode/dos_register.h:162
+#define P_HCODEC_ASSIST_MMC_CTRL0 		DOS_REG_ADDR(HCODEC_ASSIST_MMC_CTRL0)
+#define HCODEC_ASSIST_MMC_CTRL1 0x1002 	///../ucode/dos_register.h:163
+#define P_HCODEC_ASSIST_MMC_CTRL1 		DOS_REG_ADDR(HCODEC_ASSIST_MMC_CTRL1)
+#define HCODEC_MFDIN_REG0_CRST 0x1010 	///../ucode/dos_register.h:167
+#define P_HCODEC_MFDIN_REG0_CRST 		DOS_REG_ADDR(HCODEC_MFDIN_REG0_CRST)
+#define HCODEC_MFDIN_REG1_CTRL 0x1011 	///../ucode/dos_register.h:194
+#define P_HCODEC_MFDIN_REG1_CTRL 		DOS_REG_ADDR(HCODEC_MFDIN_REG1_CTRL)
+#define HCODEC_MFDIN_REG2_STAT 0x1012 	///../ucode/dos_register.h:196
+#define P_HCODEC_MFDIN_REG2_STAT 		DOS_REG_ADDR(HCODEC_MFDIN_REG2_STAT)
+#define HCODEC_MFDIN_REG3_CANV 0x1013 	///../ucode/dos_register.h:204
+#define P_HCODEC_MFDIN_REG3_CANV 		DOS_REG_ADDR(HCODEC_MFDIN_REG3_CANV)
+#define HCODEC_MFDIN_REG4_LNR0 0x1014 	///../ucode/dos_register.h:208
+#define P_HCODEC_MFDIN_REG4_LNR0 		DOS_REG_ADDR(HCODEC_MFDIN_REG4_LNR0)
+#define HCODEC_MFDIN_REG5_LNR1 0x1015 	///../ucode/dos_register.h:210
+#define P_HCODEC_MFDIN_REG5_LNR1 		DOS_REG_ADDR(HCODEC_MFDIN_REG5_LNR1)
+#define HCODEC_MFDIN_REG6_DCFG 0x1016 	///../ucode/dos_register.h:215
+#define P_HCODEC_MFDIN_REG6_DCFG 		DOS_REG_ADDR(HCODEC_MFDIN_REG6_DCFG)
+#define HCODEC_MFDIN_REG7_SCMD 0x1017 	///../ucode/dos_register.h:217
+#define P_HCODEC_MFDIN_REG7_SCMD 		DOS_REG_ADDR(HCODEC_MFDIN_REG7_SCMD)
+#define HCODEC_MFDIN_REG8_DMBL 0x1018 	///../ucode/dos_register.h:220
+#define P_HCODEC_MFDIN_REG8_DMBL 		DOS_REG_ADDR(HCODEC_MFDIN_REG8_DMBL)
+#define HCODEC_MFDIN_REG9_ENDN 0x1019 	///../ucode/dos_register.h:222
+#define P_HCODEC_MFDIN_REG9_ENDN 		DOS_REG_ADDR(HCODEC_MFDIN_REG9_ENDN)
+#define HCODEC_MFDIN_REGA_CAV1 0x101a 	///../ucode/dos_register.h:225
+#define P_HCODEC_MFDIN_REGA_CAV1 		DOS_REG_ADDR(HCODEC_MFDIN_REGA_CAV1)
+#define HCODEC_MFDIN_REGB_AMPC 0x101b 	///../ucode/dos_register.h:230
+#define P_HCODEC_MFDIN_REGB_AMPC 		DOS_REG_ADDR(HCODEC_MFDIN_REGB_AMPC)
+#define HCODEC_ASSIST_AMR1_INT0 0x1025 	///../ucode/dos_register.h:231
+#define P_HCODEC_ASSIST_AMR1_INT0 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT0)
+#define HCODEC_ASSIST_AMR1_INT1 0x1026 	///../ucode/dos_register.h:232
+#define P_HCODEC_ASSIST_AMR1_INT1 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT1)
+#define HCODEC_ASSIST_AMR1_INT2 0x1027 	///../ucode/dos_register.h:233
+#define P_HCODEC_ASSIST_AMR1_INT2 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT2)
+#define HCODEC_ASSIST_AMR1_INT3 0x1028 	///../ucode/dos_register.h:234
+#define P_HCODEC_ASSIST_AMR1_INT3 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT3)
+#define HCODEC_ASSIST_AMR1_INT4 0x1029 	///../ucode/dos_register.h:235
+#define P_HCODEC_ASSIST_AMR1_INT4 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT4)
+#define HCODEC_ASSIST_AMR1_INT5 0x102a 	///../ucode/dos_register.h:236
+#define P_HCODEC_ASSIST_AMR1_INT5 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT5)
+#define HCODEC_ASSIST_AMR1_INT6 0x102b 	///../ucode/dos_register.h:237
+#define P_HCODEC_ASSIST_AMR1_INT6 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT6)
+#define HCODEC_ASSIST_AMR1_INT7 0x102c 	///../ucode/dos_register.h:238
+#define P_HCODEC_ASSIST_AMR1_INT7 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT7)
+#define HCODEC_ASSIST_AMR1_INT8 0x102d 	///../ucode/dos_register.h:239
+#define P_HCODEC_ASSIST_AMR1_INT8 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT8)
+#define HCODEC_ASSIST_AMR1_INT9 0x102e 	///../ucode/dos_register.h:240
+#define P_HCODEC_ASSIST_AMR1_INT9 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT9)
+#define HCODEC_ASSIST_AMR1_INTA 0x102f 	///../ucode/dos_register.h:241
+#define P_HCODEC_ASSIST_AMR1_INTA 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTA)
+#define HCODEC_ASSIST_AMR1_INTB 0x1030 	///../ucode/dos_register.h:242
+#define P_HCODEC_ASSIST_AMR1_INTB 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTB)
+#define HCODEC_ASSIST_AMR1_INTC 0x1031 	///../ucode/dos_register.h:243
+#define P_HCODEC_ASSIST_AMR1_INTC 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTC)
+#define HCODEC_ASSIST_AMR1_INTD 0x1032 	///../ucode/dos_register.h:244
+#define P_HCODEC_ASSIST_AMR1_INTD 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTD)
+#define HCODEC_ASSIST_AMR1_INTE 0x1033 	///../ucode/dos_register.h:245
+#define P_HCODEC_ASSIST_AMR1_INTE 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTE)
+#define HCODEC_ASSIST_AMR1_INTF 0x1034 	///../ucode/dos_register.h:246
+#define P_HCODEC_ASSIST_AMR1_INTF 		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTF)
+#define HCODEC_ASSIST_AMR2_INT0 0x1035 	///../ucode/dos_register.h:247
+#define P_HCODEC_ASSIST_AMR2_INT0 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT0)
+#define HCODEC_ASSIST_AMR2_INT1 0x1036 	///../ucode/dos_register.h:248
+#define P_HCODEC_ASSIST_AMR2_INT1 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT1)
+#define HCODEC_ASSIST_AMR2_INT2 0x1037 	///../ucode/dos_register.h:249
+#define P_HCODEC_ASSIST_AMR2_INT2 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT2)
+#define HCODEC_ASSIST_AMR2_INT3 0x1038 	///../ucode/dos_register.h:250
+#define P_HCODEC_ASSIST_AMR2_INT3 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT3)
+#define HCODEC_ASSIST_AMR2_INT4 0x1039 	///../ucode/dos_register.h:251
+#define P_HCODEC_ASSIST_AMR2_INT4 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT4)
+#define HCODEC_ASSIST_AMR2_INT5 0x103a 	///../ucode/dos_register.h:252
+#define P_HCODEC_ASSIST_AMR2_INT5 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT5)
+#define HCODEC_ASSIST_AMR2_INT6 0x103b 	///../ucode/dos_register.h:253
+#define P_HCODEC_ASSIST_AMR2_INT6 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT6)
+#define HCODEC_ASSIST_AMR2_INT7 0x103c 	///../ucode/dos_register.h:254
+#define P_HCODEC_ASSIST_AMR2_INT7 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT7)
+#define HCODEC_ASSIST_AMR2_INT8 0x103d 	///../ucode/dos_register.h:255
+#define P_HCODEC_ASSIST_AMR2_INT8 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT8)
+#define HCODEC_ASSIST_AMR2_INT9 0x103e 	///../ucode/dos_register.h:256
+#define P_HCODEC_ASSIST_AMR2_INT9 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT9)
+#define HCODEC_ASSIST_AMR2_INTA 0x103f 	///../ucode/dos_register.h:257
+#define P_HCODEC_ASSIST_AMR2_INTA 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTA)
+#define HCODEC_ASSIST_AMR2_INTB 0x1040 	///../ucode/dos_register.h:258
+#define P_HCODEC_ASSIST_AMR2_INTB 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTB)
+#define HCODEC_ASSIST_AMR2_INTC 0x1041 	///../ucode/dos_register.h:259
+#define P_HCODEC_ASSIST_AMR2_INTC 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTC)
+#define HCODEC_ASSIST_AMR2_INTD 0x1042 	///../ucode/dos_register.h:260
+#define P_HCODEC_ASSIST_AMR2_INTD 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTD)
+#define HCODEC_ASSIST_AMR2_INTE 0x1043 	///../ucode/dos_register.h:261
+#define P_HCODEC_ASSIST_AMR2_INTE 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTE)
+#define HCODEC_ASSIST_AMR2_INTF 0x1044 	///../ucode/dos_register.h:262
+#define P_HCODEC_ASSIST_AMR2_INTF 		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTF)
+#define HCODEC_ASSIST_MBX_SSEL 0x1045 	///../ucode/dos_register.h:263
+#define P_HCODEC_ASSIST_MBX_SSEL 		DOS_REG_ADDR(HCODEC_ASSIST_MBX_SSEL)
+#define HCODEC_ASSIST_TIMER0_LO 0x1060 	///../ucode/dos_register.h:264
+#define P_HCODEC_ASSIST_TIMER0_LO 		DOS_REG_ADDR(HCODEC_ASSIST_TIMER0_LO)
+#define HCODEC_ASSIST_TIMER0_HI 0x1061 	///../ucode/dos_register.h:265
+#define P_HCODEC_ASSIST_TIMER0_HI 		DOS_REG_ADDR(HCODEC_ASSIST_TIMER0_HI)
+#define HCODEC_ASSIST_TIMER1_LO 0x1062 	///../ucode/dos_register.h:266
+#define P_HCODEC_ASSIST_TIMER1_LO 		DOS_REG_ADDR(HCODEC_ASSIST_TIMER1_LO)
+#define HCODEC_ASSIST_TIMER1_HI 0x1063 	///../ucode/dos_register.h:267
+#define P_HCODEC_ASSIST_TIMER1_HI 		DOS_REG_ADDR(HCODEC_ASSIST_TIMER1_HI)
+#define HCODEC_ASSIST_DMA_INT 0x1064 	///../ucode/dos_register.h:268
+#define P_HCODEC_ASSIST_DMA_INT 		DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT)
+#define HCODEC_ASSIST_DMA_INT_MSK 0x1065 	///../ucode/dos_register.h:269
+#define P_HCODEC_ASSIST_DMA_INT_MSK 		DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT_MSK)
+#define HCODEC_ASSIST_DMA_INT2 0x1066 	///../ucode/dos_register.h:270
+#define P_HCODEC_ASSIST_DMA_INT2 		DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT2)
+#define HCODEC_ASSIST_DMA_INT_MSK2 0x1067 	///../ucode/dos_register.h:271
+#define P_HCODEC_ASSIST_DMA_INT_MSK2 		DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT_MSK2)
+#define HCODEC_ASSIST_MBOX0_IRQ_REG 0x1070 	///../ucode/dos_register.h:272
+#define P_HCODEC_ASSIST_MBOX0_IRQ_REG 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_IRQ_REG)
+#define HCODEC_ASSIST_MBOX0_CLR_REG 0x1071 	///../ucode/dos_register.h:273
+#define P_HCODEC_ASSIST_MBOX0_CLR_REG 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_CLR_REG)
+#define HCODEC_ASSIST_MBOX0_MASK 0x1072 	///../ucode/dos_register.h:274
+#define P_HCODEC_ASSIST_MBOX0_MASK 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_MASK)
+#define HCODEC_ASSIST_MBOX0_FIQ_SEL 0x1073 	///../ucode/dos_register.h:275
+#define P_HCODEC_ASSIST_MBOX0_FIQ_SEL 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_FIQ_SEL)
+#define HCODEC_ASSIST_MBOX1_IRQ_REG 0x1074 	///../ucode/dos_register.h:276
+#define P_HCODEC_ASSIST_MBOX1_IRQ_REG 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_IRQ_REG)
+#define HCODEC_ASSIST_MBOX1_CLR_REG 0x1075 	///../ucode/dos_register.h:277
+#define P_HCODEC_ASSIST_MBOX1_CLR_REG 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_CLR_REG)
+#define HCODEC_ASSIST_MBOX1_MASK 0x1076 	///../ucode/dos_register.h:278
+#define P_HCODEC_ASSIST_MBOX1_MASK 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_MASK)
+#define HCODEC_ASSIST_MBOX1_FIQ_SEL 0x1077 	///../ucode/dos_register.h:279
+#define P_HCODEC_ASSIST_MBOX1_FIQ_SEL 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_FIQ_SEL)
+#define HCODEC_ASSIST_MBOX2_IRQ_REG 0x1078 	///../ucode/dos_register.h:280
+#define P_HCODEC_ASSIST_MBOX2_IRQ_REG 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_IRQ_REG)
+#define HCODEC_ASSIST_MBOX2_CLR_REG 0x1079 	///../ucode/dos_register.h:281
+#define P_HCODEC_ASSIST_MBOX2_CLR_REG 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_CLR_REG)
+#define HCODEC_ASSIST_MBOX2_MASK 0x107a 	///../ucode/dos_register.h:282
+#define P_HCODEC_ASSIST_MBOX2_MASK 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_MASK)
+#define HCODEC_ASSIST_MBOX2_FIQ_SEL 0x107b 	///../ucode/dos_register.h:283
+#define P_HCODEC_ASSIST_MBOX2_FIQ_SEL 		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_FIQ_SEL)
+#define MC_CTRL_REG 0x0900 	///../ucode/dos_register.h:296
+#define P_MC_CTRL_REG 		DOS_REG_ADDR(MC_CTRL_REG)
+#define MC_MB_INFO 0x0901 	///../ucode/dos_register.h:297
+#define P_MC_MB_INFO 		DOS_REG_ADDR(MC_MB_INFO)
+#define MC_PIC_INFO 0x0902 	///../ucode/dos_register.h:298
+#define P_MC_PIC_INFO 		DOS_REG_ADDR(MC_PIC_INFO)
+#define MC_HALF_PEL_ONE 0x0903 	///../ucode/dos_register.h:299
+#define P_MC_HALF_PEL_ONE 		DOS_REG_ADDR(MC_HALF_PEL_ONE)
+#define MC_HALF_PEL_TWO 0x0904 	///../ucode/dos_register.h:300
+#define P_MC_HALF_PEL_TWO 		DOS_REG_ADDR(MC_HALF_PEL_TWO)
+#define POWER_CTL_MC 0x0905 	///../ucode/dos_register.h:301
+#define P_POWER_CTL_MC 		DOS_REG_ADDR(POWER_CTL_MC)
+#define MC_CMD 0x0906 	///../ucode/dos_register.h:302
+#define P_MC_CMD 		DOS_REG_ADDR(MC_CMD)
+#define MC_CTRL0 0x0907 	///../ucode/dos_register.h:303
+#define P_MC_CTRL0 		DOS_REG_ADDR(MC_CTRL0)
+#define MC_PIC_W_H 0x0908 	///../ucode/dos_register.h:304
+#define P_MC_PIC_W_H 		DOS_REG_ADDR(MC_PIC_W_H)
+#define MC_STATUS0 0x0909 	///../ucode/dos_register.h:305
+#define P_MC_STATUS0 		DOS_REG_ADDR(MC_STATUS0)
+#define MC_STATUS1 0x090a 	///../ucode/dos_register.h:306
+#define P_MC_STATUS1 		DOS_REG_ADDR(MC_STATUS1)
+#define MC_CTRL1 0x090b 	///../ucode/dos_register.h:307
+#define P_MC_CTRL1 		DOS_REG_ADDR(MC_CTRL1)
+#define MC_MIX_RATIO0 0x090c 	///../ucode/dos_register.h:308
+#define P_MC_MIX_RATIO0 		DOS_REG_ADDR(MC_MIX_RATIO0)
+#define MC_MIX_RATIO1 0x090d 	///../ucode/dos_register.h:309
+#define P_MC_MIX_RATIO1 		DOS_REG_ADDR(MC_MIX_RATIO1)
+#define MC_DP_MB_XY 0x090e 	///../ucode/dos_register.h:310
+#define P_MC_DP_MB_XY 		DOS_REG_ADDR(MC_DP_MB_XY)
+#define MC_OM_MB_XY 0x090f 	///../ucode/dos_register.h:311
+#define P_MC_OM_MB_XY 		DOS_REG_ADDR(MC_OM_MB_XY)
+#define PSCALE_RST 0x0910 	///../ucode/dos_register.h:312
+#define P_PSCALE_RST 		DOS_REG_ADDR(PSCALE_RST)
+#define PSCALE_CTRL 0x0911 	///../ucode/dos_register.h:313
+#define P_PSCALE_CTRL 		DOS_REG_ADDR(PSCALE_CTRL)
+#define PSCALE_PICI_W 0x0912 	///../ucode/dos_register.h:314
+#define P_PSCALE_PICI_W 		DOS_REG_ADDR(PSCALE_PICI_W)
+#define PSCALE_PICI_H 0x0913 	///../ucode/dos_register.h:315
+#define P_PSCALE_PICI_H 		DOS_REG_ADDR(PSCALE_PICI_H)
+#define PSCALE_PICO_W 0x0914 	///../ucode/dos_register.h:316
+#define P_PSCALE_PICO_W 		DOS_REG_ADDR(PSCALE_PICO_W)
+#define PSCALE_PICO_H 0x0915 	///../ucode/dos_register.h:317
+#define P_PSCALE_PICO_H 		DOS_REG_ADDR(PSCALE_PICO_H)
+#define PSCALE_PICO_START_X 0x0916 	///../ucode/dos_register.h:318
+#define P_PSCALE_PICO_START_X 		DOS_REG_ADDR(PSCALE_PICO_START_X)
+#define PSCALE_PICO_START_Y 0x0917 	///../ucode/dos_register.h:319
+#define P_PSCALE_PICO_START_Y 		DOS_REG_ADDR(PSCALE_PICO_START_Y)
+#define PSCALE_DUMMY 0x0918 	///../ucode/dos_register.h:320
+#define P_PSCALE_DUMMY 		DOS_REG_ADDR(PSCALE_DUMMY)
+#define PSCALE_FILT0_COEF0 0x0919 	///../ucode/dos_register.h:321
+#define P_PSCALE_FILT0_COEF0 		DOS_REG_ADDR(PSCALE_FILT0_COEF0)
+#define PSCALE_FILT0_COEF1 0x091a 	///../ucode/dos_register.h:322
+#define P_PSCALE_FILT0_COEF1 		DOS_REG_ADDR(PSCALE_FILT0_COEF1)
+#define PSCALE_CMD_CTRL 0x091b 	///../ucode/dos_register.h:323
+#define P_PSCALE_CMD_CTRL 		DOS_REG_ADDR(PSCALE_CMD_CTRL)
+#define PSCALE_CMD_BLK_X 0x091c 	///../ucode/dos_register.h:324
+#define P_PSCALE_CMD_BLK_X 		DOS_REG_ADDR(PSCALE_CMD_BLK_X)
+#define PSCALE_CMD_BLK_Y 0x091d 	///../ucode/dos_register.h:325
+#define P_PSCALE_CMD_BLK_Y 		DOS_REG_ADDR(PSCALE_CMD_BLK_Y)
+#define PSCALE_STATUS 0x091e 	///../ucode/dos_register.h:326
+#define P_PSCALE_STATUS 		DOS_REG_ADDR(PSCALE_STATUS)
+#define PSCALE_BMEM_ADDR 0x091f 	///../ucode/dos_register.h:327
+#define P_PSCALE_BMEM_ADDR 		DOS_REG_ADDR(PSCALE_BMEM_ADDR)
+#define PSCALE_BMEM_DAT 0x0920 	///../ucode/dos_register.h:328
+#define P_PSCALE_BMEM_DAT 		DOS_REG_ADDR(PSCALE_BMEM_DAT)
+#define PSCALE_DRAM_BUF_CTRL 0x0921 	///../ucode/dos_register.h:329
+#define P_PSCALE_DRAM_BUF_CTRL 		DOS_REG_ADDR(PSCALE_DRAM_BUF_CTRL)
+#define PSCALE_MCMD_CTRL 0x0922 	///../ucode/dos_register.h:330
+#define P_PSCALE_MCMD_CTRL 		DOS_REG_ADDR(PSCALE_MCMD_CTRL)
+#define PSCALE_MCMD_XSIZE 0x0923 	///../ucode/dos_register.h:331
+#define P_PSCALE_MCMD_XSIZE 		DOS_REG_ADDR(PSCALE_MCMD_XSIZE)
+#define PSCALE_MCMD_YSIZE 0x0924 	///../ucode/dos_register.h:332
+#define P_PSCALE_MCMD_YSIZE 		DOS_REG_ADDR(PSCALE_MCMD_YSIZE)
+#define PSCALE_RBUF_START_BLKX 0x0925 	///../ucode/dos_register.h:333
+#define P_PSCALE_RBUF_START_BLKX 		DOS_REG_ADDR(PSCALE_RBUF_START_BLKX)
+#define PSCALE_RBUF_START_BLKY 0x0926 	///../ucode/dos_register.h:334
+#define P_PSCALE_RBUF_START_BLKY 		DOS_REG_ADDR(PSCALE_RBUF_START_BLKY)
+#define PSCALE_PICO_SHIFT_XY 0x0928 	///../ucode/dos_register.h:336
+#define P_PSCALE_PICO_SHIFT_XY 		DOS_REG_ADDR(PSCALE_PICO_SHIFT_XY)
+#define PSCALE_CTRL1 0x0929 	///../ucode/dos_register.h:337
+#define P_PSCALE_CTRL1 		DOS_REG_ADDR(PSCALE_CTRL1)
+#define PSCALE_SRCKEY_CTRL0 0x092a 	///../ucode/dos_register.h:345
+#define P_PSCALE_SRCKEY_CTRL0 		DOS_REG_ADDR(PSCALE_SRCKEY_CTRL0)
+#define PSCALE_SRCKEY_CTRL1 0x092b 	///../ucode/dos_register.h:348
+#define P_PSCALE_SRCKEY_CTRL1 		DOS_REG_ADDR(PSCALE_SRCKEY_CTRL1)
+#define PSCALE_CANVAS_RD_ADDR 0x092c 	///../ucode/dos_register.h:352
+#define P_PSCALE_CANVAS_RD_ADDR 		DOS_REG_ADDR(PSCALE_CANVAS_RD_ADDR)
+#define PSCALE_CANVAS_WR_ADDR 0x092d 	///../ucode/dos_register.h:356
+#define P_PSCALE_CANVAS_WR_ADDR 		DOS_REG_ADDR(PSCALE_CANVAS_WR_ADDR)
+#define PSCALE_CTRL2 0x092e 	///../ucode/dos_register.h:360
+#define P_PSCALE_CTRL2 		DOS_REG_ADDR(PSCALE_CTRL2)
+#define MC_MPORT_CTRL 0x0940 	///../ucode/dos_register.h:361
+#define P_MC_MPORT_CTRL 		DOS_REG_ADDR(MC_MPORT_CTRL)
+#define MC_MPORT_DAT 0x0941 	///../ucode/dos_register.h:362
+#define P_MC_MPORT_DAT 		DOS_REG_ADDR(MC_MPORT_DAT)
+#define MC_WT_PRED_CTRL 0x0942 	///../ucode/dos_register.h:363
+#define P_MC_WT_PRED_CTRL 		DOS_REG_ADDR(MC_WT_PRED_CTRL)
+#define MC_MBBOT_ST_EVEN_ADDR 0x0944 	///../ucode/dos_register.h:364
+#define P_MC_MBBOT_ST_EVEN_ADDR 		DOS_REG_ADDR(MC_MBBOT_ST_EVEN_ADDR)
+#define MC_MBBOT_ST_ODD_ADDR 0x0945 	///../ucode/dos_register.h:365
+#define P_MC_MBBOT_ST_ODD_ADDR 		DOS_REG_ADDR(MC_MBBOT_ST_ODD_ADDR)
+#define MC_DPDN_MB_XY 0x0946 	///../ucode/dos_register.h:366
+#define P_MC_DPDN_MB_XY 		DOS_REG_ADDR(MC_DPDN_MB_XY)
+#define MC_OMDN_MB_XY 0x0947 	///../ucode/dos_register.h:367
+#define P_MC_OMDN_MB_XY 		DOS_REG_ADDR(MC_OMDN_MB_XY)
+#define MC_HCMDBUF_H 0x0948 	///../ucode/dos_register.h:368
+#define P_MC_HCMDBUF_H 		DOS_REG_ADDR(MC_HCMDBUF_H)
+#define MC_HCMDBUF_L 0x0949 	///../ucode/dos_register.h:369
+#define P_MC_HCMDBUF_L 		DOS_REG_ADDR(MC_HCMDBUF_L)
+#define MC_HCMD_H 0x094a 	///../ucode/dos_register.h:370
+#define P_MC_HCMD_H 		DOS_REG_ADDR(MC_HCMD_H)
+#define MC_HCMD_L 0x094b 	///../ucode/dos_register.h:371
+#define P_MC_HCMD_L 		DOS_REG_ADDR(MC_HCMD_L)
+#define MC_IDCT_DAT 0x094c 	///../ucode/dos_register.h:372
+#define P_MC_IDCT_DAT 		DOS_REG_ADDR(MC_IDCT_DAT)
+#define MC_CTRL_GCLK_CTRL 0x094d 	///../ucode/dos_register.h:373
+#define P_MC_CTRL_GCLK_CTRL 		DOS_REG_ADDR(MC_CTRL_GCLK_CTRL)
+#define MC_OTHER_GCLK_CTRL 0x094e 	///../ucode/dos_register.h:374
+#define P_MC_OTHER_GCLK_CTRL 		DOS_REG_ADDR(MC_OTHER_GCLK_CTRL)
+#define MC_CTRL2 0x094f 	///../ucode/dos_register.h:379
+#define P_MC_CTRL2 		DOS_REG_ADDR(MC_CTRL2)
+#define MDEC_PIC_DC_CTRL 0x098e 	///../ucode/dos_register.h:386
+#define P_MDEC_PIC_DC_CTRL 		DOS_REG_ADDR(MDEC_PIC_DC_CTRL)
+#define MDEC_PIC_DC_STATUS 0x098f 	///../ucode/dos_register.h:387
+#define P_MDEC_PIC_DC_STATUS 		DOS_REG_ADDR(MDEC_PIC_DC_STATUS)
+#define ANC0_CANVAS_ADDR 0x0990 	///../ucode/dos_register.h:388
+#define P_ANC0_CANVAS_ADDR 		DOS_REG_ADDR(ANC0_CANVAS_ADDR)
+#define ANC1_CANVAS_ADDR 0x0991 	///../ucode/dos_register.h:389
+#define P_ANC1_CANVAS_ADDR 		DOS_REG_ADDR(ANC1_CANVAS_ADDR)
+#define ANC2_CANVAS_ADDR 0x0992 	///../ucode/dos_register.h:390
+#define P_ANC2_CANVAS_ADDR 		DOS_REG_ADDR(ANC2_CANVAS_ADDR)
+#define ANC3_CANVAS_ADDR 0x0993 	///../ucode/dos_register.h:391
+#define P_ANC3_CANVAS_ADDR 		DOS_REG_ADDR(ANC3_CANVAS_ADDR)
+#define ANC4_CANVAS_ADDR 0x0994 	///../ucode/dos_register.h:392
+#define P_ANC4_CANVAS_ADDR 		DOS_REG_ADDR(ANC4_CANVAS_ADDR)
+#define ANC5_CANVAS_ADDR 0x0995 	///../ucode/dos_register.h:393
+#define P_ANC5_CANVAS_ADDR 		DOS_REG_ADDR(ANC5_CANVAS_ADDR)
+#define ANC6_CANVAS_ADDR 0x0996 	///../ucode/dos_register.h:394
+#define P_ANC6_CANVAS_ADDR 		DOS_REG_ADDR(ANC6_CANVAS_ADDR)
+#define ANC7_CANVAS_ADDR 0x0997 	///../ucode/dos_register.h:395
+#define P_ANC7_CANVAS_ADDR 		DOS_REG_ADDR(ANC7_CANVAS_ADDR)
+#define ANC8_CANVAS_ADDR 0x0998 	///../ucode/dos_register.h:396
+#define P_ANC8_CANVAS_ADDR 		DOS_REG_ADDR(ANC8_CANVAS_ADDR)
+#define ANC9_CANVAS_ADDR 0x0999 	///../ucode/dos_register.h:397
+#define P_ANC9_CANVAS_ADDR 		DOS_REG_ADDR(ANC9_CANVAS_ADDR)
+#define ANC10_CANVAS_ADDR 0x099a 	///../ucode/dos_register.h:398
+#define P_ANC10_CANVAS_ADDR 		DOS_REG_ADDR(ANC10_CANVAS_ADDR)
+#define ANC11_CANVAS_ADDR 0x099b 	///../ucode/dos_register.h:399
+#define P_ANC11_CANVAS_ADDR 		DOS_REG_ADDR(ANC11_CANVAS_ADDR)
+#define ANC12_CANVAS_ADDR 0x099c 	///../ucode/dos_register.h:400
+#define P_ANC12_CANVAS_ADDR 		DOS_REG_ADDR(ANC12_CANVAS_ADDR)
+#define ANC13_CANVAS_ADDR 0x099d 	///../ucode/dos_register.h:401
+#define P_ANC13_CANVAS_ADDR 		DOS_REG_ADDR(ANC13_CANVAS_ADDR)
+#define ANC14_CANVAS_ADDR 0x099e 	///../ucode/dos_register.h:402
+#define P_ANC14_CANVAS_ADDR 		DOS_REG_ADDR(ANC14_CANVAS_ADDR)
+#define ANC15_CANVAS_ADDR 0x099f 	///../ucode/dos_register.h:403
+#define P_ANC15_CANVAS_ADDR 		DOS_REG_ADDR(ANC15_CANVAS_ADDR)
+#define ANC16_CANVAS_ADDR 0x09a0 	///../ucode/dos_register.h:404
+#define P_ANC16_CANVAS_ADDR 		DOS_REG_ADDR(ANC16_CANVAS_ADDR)
+#define ANC17_CANVAS_ADDR 0x09a1 	///../ucode/dos_register.h:405
+#define P_ANC17_CANVAS_ADDR 		DOS_REG_ADDR(ANC17_CANVAS_ADDR)
+#define ANC18_CANVAS_ADDR 0x09a2 	///../ucode/dos_register.h:406
+#define P_ANC18_CANVAS_ADDR 		DOS_REG_ADDR(ANC18_CANVAS_ADDR)
+#define ANC19_CANVAS_ADDR 0x09a3 	///../ucode/dos_register.h:407
+#define P_ANC19_CANVAS_ADDR 		DOS_REG_ADDR(ANC19_CANVAS_ADDR)
+#define ANC20_CANVAS_ADDR 0x09a4 	///../ucode/dos_register.h:408
+#define P_ANC20_CANVAS_ADDR 		DOS_REG_ADDR(ANC20_CANVAS_ADDR)
+#define ANC21_CANVAS_ADDR 0x09a5 	///../ucode/dos_register.h:409
+#define P_ANC21_CANVAS_ADDR 		DOS_REG_ADDR(ANC21_CANVAS_ADDR)
+#define ANC22_CANVAS_ADDR 0x09a6 	///../ucode/dos_register.h:410
+#define P_ANC22_CANVAS_ADDR 		DOS_REG_ADDR(ANC22_CANVAS_ADDR)
+#define ANC23_CANVAS_ADDR 0x09a7 	///../ucode/dos_register.h:411
+#define P_ANC23_CANVAS_ADDR 		DOS_REG_ADDR(ANC23_CANVAS_ADDR)
+#define ANC24_CANVAS_ADDR 0x09a8 	///../ucode/dos_register.h:412
+#define P_ANC24_CANVAS_ADDR 		DOS_REG_ADDR(ANC24_CANVAS_ADDR)
+#define ANC25_CANVAS_ADDR 0x09a9 	///../ucode/dos_register.h:413
+#define P_ANC25_CANVAS_ADDR 		DOS_REG_ADDR(ANC25_CANVAS_ADDR)
+#define ANC26_CANVAS_ADDR 0x09aa 	///../ucode/dos_register.h:414
+#define P_ANC26_CANVAS_ADDR 		DOS_REG_ADDR(ANC26_CANVAS_ADDR)
+#define ANC27_CANVAS_ADDR 0x09ab 	///../ucode/dos_register.h:415
+#define P_ANC27_CANVAS_ADDR 		DOS_REG_ADDR(ANC27_CANVAS_ADDR)
+#define ANC28_CANVAS_ADDR 0x09ac 	///../ucode/dos_register.h:416
+#define P_ANC28_CANVAS_ADDR 		DOS_REG_ADDR(ANC28_CANVAS_ADDR)
+#define ANC29_CANVAS_ADDR 0x09ad 	///../ucode/dos_register.h:417
+#define P_ANC29_CANVAS_ADDR 		DOS_REG_ADDR(ANC29_CANVAS_ADDR)
+#define ANC30_CANVAS_ADDR 0x09ae 	///../ucode/dos_register.h:418
+#define P_ANC30_CANVAS_ADDR 		DOS_REG_ADDR(ANC30_CANVAS_ADDR)
+#define ANC31_CANVAS_ADDR 0x09af 	///../ucode/dos_register.h:419
+#define P_ANC31_CANVAS_ADDR 		DOS_REG_ADDR(ANC31_CANVAS_ADDR)
+#define DBKR_CANVAS_ADDR 0x09b0 	///../ucode/dos_register.h:420
+#define P_DBKR_CANVAS_ADDR 		DOS_REG_ADDR(DBKR_CANVAS_ADDR)
+#define DBKW_CANVAS_ADDR 0x09b1 	///../ucode/dos_register.h:421
+#define P_DBKW_CANVAS_ADDR 		DOS_REG_ADDR(DBKW_CANVAS_ADDR)
+#define REC_CANVAS_ADDR 0x09b2 	///../ucode/dos_register.h:422
+#define P_REC_CANVAS_ADDR 		DOS_REG_ADDR(REC_CANVAS_ADDR)
+#define CURR_CANVAS_CTRL 0x09b3 	///../ucode/dos_register.h:425
+#define P_CURR_CANVAS_CTRL 		DOS_REG_ADDR(CURR_CANVAS_CTRL)
+#define MDEC_PIC_DC_THRESH 0x09b8 	///../ucode/dos_register.h:426
+#define P_MDEC_PIC_DC_THRESH 		DOS_REG_ADDR(MDEC_PIC_DC_THRESH)
+#define MDEC_PICR_BUF_STATUS 0x09b9 	///../ucode/dos_register.h:427
+#define P_MDEC_PICR_BUF_STATUS 		DOS_REG_ADDR(MDEC_PICR_BUF_STATUS)
+#define MDEC_PICW_BUF_STATUS 0x09ba 	///../ucode/dos_register.h:428
+#define P_MDEC_PICW_BUF_STATUS 		DOS_REG_ADDR(MDEC_PICW_BUF_STATUS)
+#define MCW_DBLK_WRRSP_CNT 0x09bb 	///../ucode/dos_register.h:429
+#define P_MCW_DBLK_WRRSP_CNT 		DOS_REG_ADDR(MCW_DBLK_WRRSP_CNT)
+#define MC_MBBOT_WRRSP_CNT 0x09bc 	///../ucode/dos_register.h:430
+#define P_MC_MBBOT_WRRSP_CNT 		DOS_REG_ADDR(MC_MBBOT_WRRSP_CNT)
+#define MDEC_PICW_BUF2_STATUS 0x09bd 	///../ucode/dos_register.h:431
+#define P_MDEC_PICW_BUF2_STATUS 		DOS_REG_ADDR(MDEC_PICW_BUF2_STATUS)
+#define WRRSP_FIFO_PICW_DBK 0x09be 	///../ucode/dos_register.h:432
+#define P_WRRSP_FIFO_PICW_DBK 		DOS_REG_ADDR(WRRSP_FIFO_PICW_DBK)
+#define WRRSP_FIFO_PICW_MC 0x09bf 	///../ucode/dos_register.h:433
+#define P_WRRSP_FIFO_PICW_MC 		DOS_REG_ADDR(WRRSP_FIFO_PICW_MC)
+#define AV_SCRATCH_0 0x09c0 	///../ucode/dos_register.h:434
+#define P_AV_SCRATCH_0 		DOS_REG_ADDR(AV_SCRATCH_0)
+#define AV_SCRATCH_1 0x09c1 	///../ucode/dos_register.h:435
+#define P_AV_SCRATCH_1 		DOS_REG_ADDR(AV_SCRATCH_1)
+#define AV_SCRATCH_2 0x09c2 	///../ucode/dos_register.h:436
+#define P_AV_SCRATCH_2 		DOS_REG_ADDR(AV_SCRATCH_2)
+#define AV_SCRATCH_3 0x09c3 	///../ucode/dos_register.h:437
+#define P_AV_SCRATCH_3 		DOS_REG_ADDR(AV_SCRATCH_3)
+#define AV_SCRATCH_4 0x09c4 	///../ucode/dos_register.h:438
+#define P_AV_SCRATCH_4 		DOS_REG_ADDR(AV_SCRATCH_4)
+#define AV_SCRATCH_5 0x09c5 	///../ucode/dos_register.h:439
+#define P_AV_SCRATCH_5 		DOS_REG_ADDR(AV_SCRATCH_5)
+#define AV_SCRATCH_6 0x09c6 	///../ucode/dos_register.h:440
+#define P_AV_SCRATCH_6 		DOS_REG_ADDR(AV_SCRATCH_6)
+#define AV_SCRATCH_7 0x09c7 	///../ucode/dos_register.h:441
+#define P_AV_SCRATCH_7 		DOS_REG_ADDR(AV_SCRATCH_7)
+#define AV_SCRATCH_8 0x09c8 	///../ucode/dos_register.h:442
+#define P_AV_SCRATCH_8 		DOS_REG_ADDR(AV_SCRATCH_8)
+#define AV_SCRATCH_9 0x09c9 	///../ucode/dos_register.h:443
+#define P_AV_SCRATCH_9 		DOS_REG_ADDR(AV_SCRATCH_9)
+#define AV_SCRATCH_A 0x09ca 	///../ucode/dos_register.h:444
+#define P_AV_SCRATCH_A 		DOS_REG_ADDR(AV_SCRATCH_A)
+#define AV_SCRATCH_B 0x09cb 	///../ucode/dos_register.h:445
+#define P_AV_SCRATCH_B 		DOS_REG_ADDR(AV_SCRATCH_B)
+#define AV_SCRATCH_C 0x09cc 	///../ucode/dos_register.h:446
+#define P_AV_SCRATCH_C 		DOS_REG_ADDR(AV_SCRATCH_C)
+#define AV_SCRATCH_D 0x09cd 	///../ucode/dos_register.h:447
+#define P_AV_SCRATCH_D 		DOS_REG_ADDR(AV_SCRATCH_D)
+#define AV_SCRATCH_E 0x09ce 	///../ucode/dos_register.h:448
+#define P_AV_SCRATCH_E 		DOS_REG_ADDR(AV_SCRATCH_E)
+#define AV_SCRATCH_F 0x09cf 	///../ucode/dos_register.h:449
+#define P_AV_SCRATCH_F 		DOS_REG_ADDR(AV_SCRATCH_F)
+#define AV_SCRATCH_G 0x09d0 	///../ucode/dos_register.h:450
+#define P_AV_SCRATCH_G 		DOS_REG_ADDR(AV_SCRATCH_G)
+#define AV_SCRATCH_H 0x09d1 	///../ucode/dos_register.h:451
+#define P_AV_SCRATCH_H 		DOS_REG_ADDR(AV_SCRATCH_H)
+#define AV_SCRATCH_I 0x09d2 	///../ucode/dos_register.h:452
+#define P_AV_SCRATCH_I 		DOS_REG_ADDR(AV_SCRATCH_I)
+#define AV_SCRATCH_J 0x09d3 	///../ucode/dos_register.h:453
+#define P_AV_SCRATCH_J 		DOS_REG_ADDR(AV_SCRATCH_J)
+#define AV_SCRATCH_K 0x09d4 	///../ucode/dos_register.h:454
+#define P_AV_SCRATCH_K 		DOS_REG_ADDR(AV_SCRATCH_K)
+#define AV_SCRATCH_L 0x09d5 	///../ucode/dos_register.h:455
+#define P_AV_SCRATCH_L 		DOS_REG_ADDR(AV_SCRATCH_L)
+#define AV_SCRATCH_M 0x09d6 	///../ucode/dos_register.h:456
+#define P_AV_SCRATCH_M 		DOS_REG_ADDR(AV_SCRATCH_M)
+#define AV_SCRATCH_N 0x09d7 	///../ucode/dos_register.h:457
+#define P_AV_SCRATCH_N 		DOS_REG_ADDR(AV_SCRATCH_N)
+#define WRRSP_CO_MB 0x09d8 	///../ucode/dos_register.h:461
+#define P_WRRSP_CO_MB 		DOS_REG_ADDR(WRRSP_CO_MB)
+#define WRRSP_DCAC 0x09d9 	///../ucode/dos_register.h:465
+#define P_WRRSP_DCAC 		DOS_REG_ADDR(WRRSP_DCAC)
+#define WRRSP_VLD 0x09da 	///../ucode/dos_register.h:467
+#define P_WRRSP_VLD 		DOS_REG_ADDR(WRRSP_VLD)
+#define MDEC_DOUBLEW_CFG0 0x09db 	///../ucode/dos_register.h:483
+#define P_MDEC_DOUBLEW_CFG0 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG0)
+#define MDEC_DOUBLEW_CFG1 0x09dc 	///../ucode/dos_register.h:489
+#define P_MDEC_DOUBLEW_CFG1 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG1)
+#define MDEC_DOUBLEW_CFG2 0x09dd 	///../ucode/dos_register.h:494
+#define P_MDEC_DOUBLEW_CFG2 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG2)
+#define MDEC_DOUBLEW_CFG3 0x09de 	///../ucode/dos_register.h:496
+#define P_MDEC_DOUBLEW_CFG3 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG3)
+#define MDEC_DOUBLEW_CFG4 0x09df 	///../ucode/dos_register.h:498
+#define P_MDEC_DOUBLEW_CFG4 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG4)
+#define MDEC_DOUBLEW_CFG5 0x09e0 	///../ucode/dos_register.h:501
+#define P_MDEC_DOUBLEW_CFG5 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG5)
+#define MDEC_DOUBLEW_CFG6 0x09e1 	///../ucode/dos_register.h:503
+#define P_MDEC_DOUBLEW_CFG6 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG6)
+#define MDEC_DOUBLEW_CFG7 0x09e2 	///../ucode/dos_register.h:505
+#define P_MDEC_DOUBLEW_CFG7 		DOS_REG_ADDR(MDEC_DOUBLEW_CFG7)
+#define MDEC_DOUBLEW_STATUS 0x09e3 	///../ucode/dos_register.h:509
+#define P_MDEC_DOUBLEW_STATUS 		DOS_REG_ADDR(MDEC_DOUBLEW_STATUS)
+#define DBLK_RST 0x0950 	///../ucode/dos_register.h:548
+#define P_DBLK_RST 		DOS_REG_ADDR(DBLK_RST)
+#define DBLK_CTRL 0x0951 	///../ucode/dos_register.h:549
+#define P_DBLK_CTRL 		DOS_REG_ADDR(DBLK_CTRL)
+#define DBLK_MB_WID_HEIGHT 0x0952 	///../ucode/dos_register.h:550
+#define P_DBLK_MB_WID_HEIGHT 		DOS_REG_ADDR(DBLK_MB_WID_HEIGHT)
+#define DBLK_STATUS 0x0953 	///../ucode/dos_register.h:551
+#define P_DBLK_STATUS 		DOS_REG_ADDR(DBLK_STATUS)
+#define DBLK_CMD_CTRL 0x0954 	///../ucode/dos_register.h:552
+#define P_DBLK_CMD_CTRL 		DOS_REG_ADDR(DBLK_CMD_CTRL)
+#define DBLK_MB_XY 0x0955 	///../ucode/dos_register.h:553
+#define P_DBLK_MB_XY 		DOS_REG_ADDR(DBLK_MB_XY)
+#define DBLK_QP 0x0956 	///../ucode/dos_register.h:554
+#define P_DBLK_QP 		DOS_REG_ADDR(DBLK_QP)
+#define DBLK_Y_BHFILT 0x0957 	///../ucode/dos_register.h:555
+#define P_DBLK_Y_BHFILT 		DOS_REG_ADDR(DBLK_Y_BHFILT)
+#define DBLK_Y_BHFILT_HIGH 0x0958 	///../ucode/dos_register.h:556
+#define P_DBLK_Y_BHFILT_HIGH 		DOS_REG_ADDR(DBLK_Y_BHFILT_HIGH)
+#define DBLK_Y_BVFILT 0x0959 	///../ucode/dos_register.h:557
+#define P_DBLK_Y_BVFILT 		DOS_REG_ADDR(DBLK_Y_BVFILT)
+#define DBLK_CB_BFILT 0x095a 	///../ucode/dos_register.h:558
+#define P_DBLK_CB_BFILT 		DOS_REG_ADDR(DBLK_CB_BFILT)
+#define DBLK_CR_BFILT 0x095b 	///../ucode/dos_register.h:559
+#define P_DBLK_CR_BFILT 		DOS_REG_ADDR(DBLK_CR_BFILT)
+#define DBLK_Y_HFILT 0x095c 	///../ucode/dos_register.h:560
+#define P_DBLK_Y_HFILT 		DOS_REG_ADDR(DBLK_Y_HFILT)
+#define DBLK_Y_HFILT_HIGH 0x095d 	///../ucode/dos_register.h:561
+#define P_DBLK_Y_HFILT_HIGH 		DOS_REG_ADDR(DBLK_Y_HFILT_HIGH)
+#define DBLK_Y_VFILT 0x095e 	///../ucode/dos_register.h:562
+#define P_DBLK_Y_VFILT 		DOS_REG_ADDR(DBLK_Y_VFILT)
+#define DBLK_CB_FILT 0x095f 	///../ucode/dos_register.h:563
+#define P_DBLK_CB_FILT 		DOS_REG_ADDR(DBLK_CB_FILT)
+#define DBLK_CR_FILT 0x0960 	///../ucode/dos_register.h:564
+#define P_DBLK_CR_FILT 		DOS_REG_ADDR(DBLK_CR_FILT)
+#define DBLK_BETAX_QP_SEL 0x0961 	///../ucode/dos_register.h:565
+#define P_DBLK_BETAX_QP_SEL 		DOS_REG_ADDR(DBLK_BETAX_QP_SEL)
+#define DBLK_CLIP_CTRL0 0x0962 	///../ucode/dos_register.h:566
+#define P_DBLK_CLIP_CTRL0 		DOS_REG_ADDR(DBLK_CLIP_CTRL0)
+#define DBLK_CLIP_CTRL1 0x0963 	///../ucode/dos_register.h:567
+#define P_DBLK_CLIP_CTRL1 		DOS_REG_ADDR(DBLK_CLIP_CTRL1)
+#define DBLK_CLIP_CTRL2 0x0964 	///../ucode/dos_register.h:568
+#define P_DBLK_CLIP_CTRL2 		DOS_REG_ADDR(DBLK_CLIP_CTRL2)
+#define DBLK_CLIP_CTRL3 0x0965 	///../ucode/dos_register.h:569
+#define P_DBLK_CLIP_CTRL3 		DOS_REG_ADDR(DBLK_CLIP_CTRL3)
+#define DBLK_CLIP_CTRL4 0x0966 	///../ucode/dos_register.h:570
+#define P_DBLK_CLIP_CTRL4 		DOS_REG_ADDR(DBLK_CLIP_CTRL4)
+#define DBLK_CLIP_CTRL5 0x0967 	///../ucode/dos_register.h:571
+#define P_DBLK_CLIP_CTRL5 		DOS_REG_ADDR(DBLK_CLIP_CTRL5)
+#define DBLK_CLIP_CTRL6 0x0968 	///../ucode/dos_register.h:572
+#define P_DBLK_CLIP_CTRL6 		DOS_REG_ADDR(DBLK_CLIP_CTRL6)
+#define DBLK_CLIP_CTRL7 0x0969 	///../ucode/dos_register.h:573
+#define P_DBLK_CLIP_CTRL7 		DOS_REG_ADDR(DBLK_CLIP_CTRL7)
+#define DBLK_CLIP_CTRL8 0x096a 	///../ucode/dos_register.h:574
+#define P_DBLK_CLIP_CTRL8 		DOS_REG_ADDR(DBLK_CLIP_CTRL8)
+#define DBLK_STATUS1 0x096b 	///../ucode/dos_register.h:575
+#define P_DBLK_STATUS1 		DOS_REG_ADDR(DBLK_STATUS1)
+#define DBLK_GCLK_FREE 0x096c 	///../ucode/dos_register.h:576
+#define P_DBLK_GCLK_FREE 		DOS_REG_ADDR(DBLK_GCLK_FREE)
+#define DBLK_GCLK_OFF 0x096d 	///../ucode/dos_register.h:577
+#define P_DBLK_GCLK_OFF 		DOS_REG_ADDR(DBLK_GCLK_OFF)
+#define DBLK_AVSFLAGS 0x096e 	///../ucode/dos_register.h:578
+#define P_DBLK_AVSFLAGS 		DOS_REG_ADDR(DBLK_AVSFLAGS)
+#define DBLK_CBPY 0x0970 	///../ucode/dos_register.h:580
+#define P_DBLK_CBPY 		DOS_REG_ADDR(DBLK_CBPY)
+#define DBLK_CBPY_ADJ 0x0971 	///../ucode/dos_register.h:584
+#define P_DBLK_CBPY_ADJ 		DOS_REG_ADDR(DBLK_CBPY_ADJ)
+#define DBLK_CBPC 0x0972 	///../ucode/dos_register.h:586
+#define P_DBLK_CBPC 		DOS_REG_ADDR(DBLK_CBPC)
+#define DBLK_CBPC_ADJ 0x0973 	///../ucode/dos_register.h:594
+#define P_DBLK_CBPC_ADJ 		DOS_REG_ADDR(DBLK_CBPC_ADJ)
+#define DBLK_VHMVD 0x0974 	///../ucode/dos_register.h:597
+#define P_DBLK_VHMVD 		DOS_REG_ADDR(DBLK_VHMVD)
+#define DBLK_STRONG 0x0975 	///../ucode/dos_register.h:611
+#define P_DBLK_STRONG 		DOS_REG_ADDR(DBLK_STRONG)
+#define DBLK_RV8_QUANT 0x0976 	///../ucode/dos_register.h:615
+#define P_DBLK_RV8_QUANT 		DOS_REG_ADDR(DBLK_RV8_QUANT)
+#define DBLK_CBUS_HCMD2 0x0977 	///../ucode/dos_register.h:616
+#define P_DBLK_CBUS_HCMD2 		DOS_REG_ADDR(DBLK_CBUS_HCMD2)
+#define DBLK_CBUS_HCMD1 0x0978 	///../ucode/dos_register.h:617
+#define P_DBLK_CBUS_HCMD1 		DOS_REG_ADDR(DBLK_CBUS_HCMD1)
+#define DBLK_CBUS_HCMD0 0x0979 	///../ucode/dos_register.h:618
+#define P_DBLK_CBUS_HCMD0 		DOS_REG_ADDR(DBLK_CBUS_HCMD0)
+#define DBLK_VLD_HCMD2 0x097a 	///../ucode/dos_register.h:619
+#define P_DBLK_VLD_HCMD2 		DOS_REG_ADDR(DBLK_VLD_HCMD2)
+#define DBLK_VLD_HCMD1 0x097b 	///../ucode/dos_register.h:620
+#define P_DBLK_VLD_HCMD1 		DOS_REG_ADDR(DBLK_VLD_HCMD1)
+#define DBLK_VLD_HCMD0 0x097c 	///../ucode/dos_register.h:621
+#define P_DBLK_VLD_HCMD0 		DOS_REG_ADDR(DBLK_VLD_HCMD0)
+#define DBLK_OST_YBASE 0x097d 	///../ucode/dos_register.h:622
+#define P_DBLK_OST_YBASE 		DOS_REG_ADDR(DBLK_OST_YBASE)
+#define DBLK_OST_CBCRDIFF 0x097e 	///../ucode/dos_register.h:623
+#define P_DBLK_OST_CBCRDIFF 		DOS_REG_ADDR(DBLK_OST_CBCRDIFF)
+#define DBLK_CTRL1 0x097f 	///../ucode/dos_register.h:626
+#define P_DBLK_CTRL1 		DOS_REG_ADDR(DBLK_CTRL1)
+#define MCRCC_CTL1 0x0980 	///../ucode/dos_register.h:632
+#define P_MCRCC_CTL1 		DOS_REG_ADDR(MCRCC_CTL1)
+#define MCRCC_CTL2 0x0981 	///../ucode/dos_register.h:638
+#define P_MCRCC_CTL2 		DOS_REG_ADDR(MCRCC_CTL2)
+#define MCRCC_CTL3 0x0982 	///../ucode/dos_register.h:644
+#define P_MCRCC_CTL3 		DOS_REG_ADDR(MCRCC_CTL3)
+#define GCLK_EN 0x0983 	///../ucode/dos_register.h:657
+#define P_GCLK_EN 		DOS_REG_ADDR(GCLK_EN)
+#define MDEC_SW_RESET 0x0984 	///../ucode/dos_register.h:672
+#define P_MDEC_SW_RESET 		DOS_REG_ADDR(MDEC_SW_RESET)
+#define VLD_STATUS_CTRL 0x0c00 	///../ucode/dos_register.h:689
+#define P_VLD_STATUS_CTRL 		DOS_REG_ADDR(VLD_STATUS_CTRL)
+#define MPEG1_2_REG 0x0c01 	///../ucode/dos_register.h:699
+#define P_MPEG1_2_REG 		DOS_REG_ADDR(MPEG1_2_REG)
+#define F_CODE_REG 0x0c02 	///../ucode/dos_register.h:700
+#define P_F_CODE_REG 		DOS_REG_ADDR(F_CODE_REG)
+#define PIC_HEAD_INFO 0x0c03 	///../ucode/dos_register.h:701
+#define P_PIC_HEAD_INFO 		DOS_REG_ADDR(PIC_HEAD_INFO)
+#define SLICE_VER_POS_PIC_TYPE 0x0c04 	///../ucode/dos_register.h:702
+#define P_SLICE_VER_POS_PIC_TYPE 		DOS_REG_ADDR(SLICE_VER_POS_PIC_TYPE)
+#define QP_VALUE_REG 0x0c05 	///../ucode/dos_register.h:703
+#define P_QP_VALUE_REG 		DOS_REG_ADDR(QP_VALUE_REG)
+#define MBA_INC 0x0c06 	///../ucode/dos_register.h:704
+#define P_MBA_INC 		DOS_REG_ADDR(MBA_INC)
+#define MB_MOTION_MODE 0x0c07 	///../ucode/dos_register.h:705
+#define P_MB_MOTION_MODE 		DOS_REG_ADDR(MB_MOTION_MODE)
+#define POWER_CTL_VLD 0x0c08 	///../ucode/dos_register.h:713
+#define P_POWER_CTL_VLD 		DOS_REG_ADDR(POWER_CTL_VLD)
+#define MB_WIDTH 0x0c09 	///../ucode/dos_register.h:714
+#define P_MB_WIDTH 		DOS_REG_ADDR(MB_WIDTH)
+#define SLICE_QP 0x0c0a 	///../ucode/dos_register.h:715
+#define P_SLICE_QP 		DOS_REG_ADDR(SLICE_QP)
+#define PRE_START_CODE 0x0c0b 	///../ucode/dos_register.h:717
+#define P_PRE_START_CODE 		DOS_REG_ADDR(PRE_START_CODE)
+#define SLICE_START_BYTE_01 0x0c0c 	///../ucode/dos_register.h:718
+#define P_SLICE_START_BYTE_01 		DOS_REG_ADDR(SLICE_START_BYTE_01)
+#define SLICE_START_BYTE_23 0x0c0d 	///../ucode/dos_register.h:719
+#define P_SLICE_START_BYTE_23 		DOS_REG_ADDR(SLICE_START_BYTE_23)
+#define RESYNC_MARKER_LENGTH 0x0c0e 	///../ucode/dos_register.h:720
+#define P_RESYNC_MARKER_LENGTH 		DOS_REG_ADDR(RESYNC_MARKER_LENGTH)
+#define DECODER_BUFFER_INFO 0x0c0f 	///../ucode/dos_register.h:724
+#define P_DECODER_BUFFER_INFO 		DOS_REG_ADDR(DECODER_BUFFER_INFO)
+#define FST_FOR_MV_X 0x0c10 	///../ucode/dos_register.h:725
+#define P_FST_FOR_MV_X 		DOS_REG_ADDR(FST_FOR_MV_X)
+#define FST_FOR_MV_Y 0x0c11 	///../ucode/dos_register.h:726
+#define P_FST_FOR_MV_Y 		DOS_REG_ADDR(FST_FOR_MV_Y)
+#define SCD_FOR_MV_X 0x0c12 	///../ucode/dos_register.h:727
+#define P_SCD_FOR_MV_X 		DOS_REG_ADDR(SCD_FOR_MV_X)
+#define SCD_FOR_MV_Y 0x0c13 	///../ucode/dos_register.h:728
+#define P_SCD_FOR_MV_Y 		DOS_REG_ADDR(SCD_FOR_MV_Y)
+#define FST_BAK_MV_X 0x0c14 	///../ucode/dos_register.h:729
+#define P_FST_BAK_MV_X 		DOS_REG_ADDR(FST_BAK_MV_X)
+#define FST_BAK_MV_Y 0x0c15 	///../ucode/dos_register.h:730
+#define P_FST_BAK_MV_Y 		DOS_REG_ADDR(FST_BAK_MV_Y)
+#define SCD_BAK_MV_X 0x0c16 	///../ucode/dos_register.h:731
+#define P_SCD_BAK_MV_X 		DOS_REG_ADDR(SCD_BAK_MV_X)
+#define SCD_BAK_MV_Y 0x0c17 	///../ucode/dos_register.h:732
+#define P_SCD_BAK_MV_Y 		DOS_REG_ADDR(SCD_BAK_MV_Y)
+#define VLD_DECODE_CONTROL 0x0c18 	///../ucode/dos_register.h:738
+#define P_VLD_DECODE_CONTROL 		DOS_REG_ADDR(VLD_DECODE_CONTROL)
+#define VLD_REVERVED_19 0x0c19 	///../ucode/dos_register.h:739
+#define P_VLD_REVERVED_19 		DOS_REG_ADDR(VLD_REVERVED_19)
+#define VIFF_BIT_CNT 0x0c1a 	///../ucode/dos_register.h:740
+#define P_VIFF_BIT_CNT 		DOS_REG_ADDR(VIFF_BIT_CNT)
+#define BYTE_ALIGN_PEAK_HI 0x0c1b 	///../ucode/dos_register.h:741
+#define P_BYTE_ALIGN_PEAK_HI 		DOS_REG_ADDR(BYTE_ALIGN_PEAK_HI)
+#define BYTE_ALIGN_PEAK_LO 0x0c1c 	///../ucode/dos_register.h:742
+#define P_BYTE_ALIGN_PEAK_LO 		DOS_REG_ADDR(BYTE_ALIGN_PEAK_LO)
+#define NEXT_ALIGN_PEAK 0x0c1d 	///../ucode/dos_register.h:743
+#define P_NEXT_ALIGN_PEAK 		DOS_REG_ADDR(NEXT_ALIGN_PEAK)
+#define VC1_CONTROL_REG 0x0c1e 	///../ucode/dos_register.h:759
+#define P_VC1_CONTROL_REG 		DOS_REG_ADDR(VC1_CONTROL_REG)
+#define PMV1_X 0x0c20 	///../ucode/dos_register.h:760
+#define P_PMV1_X 		DOS_REG_ADDR(PMV1_X)
+#define PMV1_Y 0x0c21 	///../ucode/dos_register.h:761
+#define P_PMV1_Y 		DOS_REG_ADDR(PMV1_Y)
+#define PMV2_X 0x0c22 	///../ucode/dos_register.h:762
+#define P_PMV2_X 		DOS_REG_ADDR(PMV2_X)
+#define PMV2_Y 0x0c23 	///../ucode/dos_register.h:763
+#define P_PMV2_Y 		DOS_REG_ADDR(PMV2_Y)
+#define PMV3_X 0x0c24 	///../ucode/dos_register.h:764
+#define P_PMV3_X 		DOS_REG_ADDR(PMV3_X)
+#define PMV3_Y 0x0c25 	///../ucode/dos_register.h:765
+#define P_PMV3_Y 		DOS_REG_ADDR(PMV3_Y)
+#define PMV4_X 0x0c26 	///../ucode/dos_register.h:766
+#define P_PMV4_X 		DOS_REG_ADDR(PMV4_X)
+#define PMV4_Y 0x0c27 	///../ucode/dos_register.h:767
+#define P_PMV4_Y 		DOS_REG_ADDR(PMV4_Y)
+#define M4_TABLE_SELECT 0x0c28 	///../ucode/dos_register.h:774
+#define P_M4_TABLE_SELECT 		DOS_REG_ADDR(M4_TABLE_SELECT)
+#define M4_CONTROL_REG 0x0c29 	///../ucode/dos_register.h:775
+#define P_M4_CONTROL_REG 		DOS_REG_ADDR(M4_CONTROL_REG)
+#define BLOCK_NUM 0x0c2a 	///../ucode/dos_register.h:776
+#define P_BLOCK_NUM 		DOS_REG_ADDR(BLOCK_NUM)
+#define PATTERN_CODE 0x0c2b 	///../ucode/dos_register.h:777
+#define P_PATTERN_CODE 		DOS_REG_ADDR(PATTERN_CODE)
+#define MB_INFO 0x0c2c 	///../ucode/dos_register.h:778
+#define P_MB_INFO 		DOS_REG_ADDR(MB_INFO)
+#define VLD_DC_PRED 0x0c2d 	///../ucode/dos_register.h:779
+#define P_VLD_DC_PRED 		DOS_REG_ADDR(VLD_DC_PRED)
+#define VLD_ERROR_MASK 0x0c2e 	///../ucode/dos_register.h:780
+#define P_VLD_ERROR_MASK 		DOS_REG_ADDR(VLD_ERROR_MASK)
+#define VLD_DC_PRED_C 0x0c2f 	///../ucode/dos_register.h:781
+#define P_VLD_DC_PRED_C 		DOS_REG_ADDR(VLD_DC_PRED_C)
+#define LAST_SLICE_MV_ADDR 0x0c30 	///../ucode/dos_register.h:782
+#define P_LAST_SLICE_MV_ADDR 		DOS_REG_ADDR(LAST_SLICE_MV_ADDR)
+#define LAST_MVX 0x0c31 	///../ucode/dos_register.h:783
+#define P_LAST_MVX 		DOS_REG_ADDR(LAST_MVX)
+#define LAST_MVY 0x0c32 	///../ucode/dos_register.h:784
+#define P_LAST_MVY 		DOS_REG_ADDR(LAST_MVY)
+#define VLD_C38 0x0c38 	///../ucode/dos_register.h:785
+#define P_VLD_C38 		DOS_REG_ADDR(VLD_C38)
+#define VLD_C39 0x0c39 	///../ucode/dos_register.h:786
+#define P_VLD_C39 		DOS_REG_ADDR(VLD_C39)
+#define VLD_STATUS 0x0c3a 	///../ucode/dos_register.h:787
+#define P_VLD_STATUS 		DOS_REG_ADDR(VLD_STATUS)
+#define VLD_SHIFT_STATUS 0x0c3b 	///../ucode/dos_register.h:788
+#define P_VLD_SHIFT_STATUS 		DOS_REG_ADDR(VLD_SHIFT_STATUS)
+#define VOFF_STATUS 0x0c3c 	///../ucode/dos_register.h:790
+#define P_VOFF_STATUS 		DOS_REG_ADDR(VOFF_STATUS)
+#define VLD_C3D 0x0c3d 	///../ucode/dos_register.h:791
+#define P_VLD_C3D 		DOS_REG_ADDR(VLD_C3D)
+#define VLD_DBG_INDEX 0x0c3e 	///../ucode/dos_register.h:792
+#define P_VLD_DBG_INDEX 		DOS_REG_ADDR(VLD_DBG_INDEX)
+#define VLD_DBG_DATA 0x0c3f 	///../ucode/dos_register.h:868
+#define P_VLD_DBG_DATA 		DOS_REG_ADDR(VLD_DBG_DATA)
+#define VLD_MEM_VIFIFO_START_PTR 0x0c40 	///../ucode/dos_register.h:875
+#define P_VLD_MEM_VIFIFO_START_PTR 		DOS_REG_ADDR(VLD_MEM_VIFIFO_START_PTR)
+#define VLD_MEM_VIFIFO_CURR_PTR 0x0c41 	///../ucode/dos_register.h:879
+#define P_VLD_MEM_VIFIFO_CURR_PTR 		DOS_REG_ADDR(VLD_MEM_VIFIFO_CURR_PTR)
+#define VLD_MEM_VIFIFO_END_PTR 0x0c42 	///../ucode/dos_register.h:880
+#define P_VLD_MEM_VIFIFO_END_PTR 		DOS_REG_ADDR(VLD_MEM_VIFIFO_END_PTR)
+#define VLD_MEM_VIFIFO_BYTES_AVAIL 0x0c43 	///../ucode/dos_register.h:881
+#define P_VLD_MEM_VIFIFO_BYTES_AVAIL 		DOS_REG_ADDR(VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define VLD_MEM_VIFIFO_CONTROL 0x0c44 	///../ucode/dos_register.h:912
+#define P_VLD_MEM_VIFIFO_CONTROL 		DOS_REG_ADDR(VLD_MEM_VIFIFO_CONTROL)
+#define VLD_MEM_VIFIFO_WP 0x0c45 	///../ucode/dos_register.h:916
+#define P_VLD_MEM_VIFIFO_WP 		DOS_REG_ADDR(VLD_MEM_VIFIFO_WP)
+#define VLD_MEM_VIFIFO_RP 0x0c46 	///../ucode/dos_register.h:917
+#define P_VLD_MEM_VIFIFO_RP 		DOS_REG_ADDR(VLD_MEM_VIFIFO_RP)
+#define VLD_MEM_VIFIFO_LEVEL 0x0c47 	///../ucode/dos_register.h:918
+#define P_VLD_MEM_VIFIFO_LEVEL 		DOS_REG_ADDR(VLD_MEM_VIFIFO_LEVEL)
+#define VLD_MEM_VIFIFO_BUF_CNTL 0x0c48 	///../ucode/dos_register.h:928
+#define P_VLD_MEM_VIFIFO_BUF_CNTL 		DOS_REG_ADDR(VLD_MEM_VIFIFO_BUF_CNTL)
+#define VLD_TIME_STAMP_CNTL 0x0c49 	///../ucode/dos_register.h:938
+#define P_VLD_TIME_STAMP_CNTL 		DOS_REG_ADDR(VLD_TIME_STAMP_CNTL)
+#define VLD_TIME_STAMP_SYNC_0 0x0c4a 	///../ucode/dos_register.h:940
+#define P_VLD_TIME_STAMP_SYNC_0 		DOS_REG_ADDR(VLD_TIME_STAMP_SYNC_0)
+#define VLD_TIME_STAMP_SYNC_1 0x0c4b 	///../ucode/dos_register.h:942
+#define P_VLD_TIME_STAMP_SYNC_1 		DOS_REG_ADDR(VLD_TIME_STAMP_SYNC_1)
+#define VLD_TIME_STAMP_0 0x0c4c 	///../ucode/dos_register.h:944
+#define P_VLD_TIME_STAMP_0 		DOS_REG_ADDR(VLD_TIME_STAMP_0)
+#define VLD_TIME_STAMP_1 0x0c4d 	///../ucode/dos_register.h:946
+#define P_VLD_TIME_STAMP_1 		DOS_REG_ADDR(VLD_TIME_STAMP_1)
+#define VLD_TIME_STAMP_2 0x0c4e 	///../ucode/dos_register.h:948
+#define P_VLD_TIME_STAMP_2 		DOS_REG_ADDR(VLD_TIME_STAMP_2)
+#define VLD_TIME_STAMP_3 0x0c4f 	///../ucode/dos_register.h:950
+#define P_VLD_TIME_STAMP_3 		DOS_REG_ADDR(VLD_TIME_STAMP_3)
+#define VLD_TIME_STAMP_LENGTH 0x0c50 	///../ucode/dos_register.h:952
+#define P_VLD_TIME_STAMP_LENGTH 		DOS_REG_ADDR(VLD_TIME_STAMP_LENGTH)
+#define VLD_MEM_VIFIFO_WRAP_COUNT 0x0c51 	///../ucode/dos_register.h:954
+#define P_VLD_MEM_VIFIFO_WRAP_COUNT 		DOS_REG_ADDR(VLD_MEM_VIFIFO_WRAP_COUNT)
+#define VLD_MEM_VIFIFO_MEM_CTL 0x0c52 	///../ucode/dos_register.h:958
+#define P_VLD_MEM_VIFIFO_MEM_CTL 		DOS_REG_ADDR(VLD_MEM_VIFIFO_MEM_CTL)
+#define VLD_MEM_VBUF_RD_PTR 0x0c53 	///../ucode/dos_register.h:959
+#define P_VLD_MEM_VBUF_RD_PTR 		DOS_REG_ADDR(VLD_MEM_VBUF_RD_PTR)
+#define VLD_MEM_VBUF2_RD_PTR 0x0c54 	///../ucode/dos_register.h:960
+#define P_VLD_MEM_VBUF2_RD_PTR 		DOS_REG_ADDR(VLD_MEM_VBUF2_RD_PTR)
+#define VLD_MEM_SWAP_ADDR 0x0c55 	///../ucode/dos_register.h:961
+#define P_VLD_MEM_SWAP_ADDR 		DOS_REG_ADDR(VLD_MEM_SWAP_ADDR)
+#define VLD_MEM_SWAP_CTL 0x0c56 	///../ucode/dos_register.h:968
+#define P_VLD_MEM_SWAP_CTL 		DOS_REG_ADDR(VLD_MEM_SWAP_CTL)
+#define VCOP_CTRL_REG 0x0e00 	///../ucode/dos_register.h:984
+#define P_VCOP_CTRL_REG 		DOS_REG_ADDR(VCOP_CTRL_REG)
+#define QP_CTRL_REG 0x0e01 	///../ucode/dos_register.h:985
+#define P_QP_CTRL_REG 		DOS_REG_ADDR(QP_CTRL_REG)
+#define INTRA_QUANT_MATRIX 0x0e02 	///../ucode/dos_register.h:986
+#define P_INTRA_QUANT_MATRIX 		DOS_REG_ADDR(INTRA_QUANT_MATRIX)
+#define NON_I_QUANT_MATRIX 0x0e03 	///../ucode/dos_register.h:987
+#define P_NON_I_QUANT_MATRIX 		DOS_REG_ADDR(NON_I_QUANT_MATRIX)
+#define DC_SCALER 0x0e04 	///../ucode/dos_register.h:988
+#define P_DC_SCALER 		DOS_REG_ADDR(DC_SCALER)
+#define DC_AC_CTRL 0x0e05 	///../ucode/dos_register.h:989
+#define P_DC_AC_CTRL 		DOS_REG_ADDR(DC_AC_CTRL)
+#define DC_AC_SCALE_MUL 0x0e06 	///../ucode/dos_register.h:991
+#define P_DC_AC_SCALE_MUL 		DOS_REG_ADDR(DC_AC_SCALE_MUL)
+#define DC_AC_SCALE_DIV 0x0e07 	///../ucode/dos_register.h:992
+#define P_DC_AC_SCALE_DIV 		DOS_REG_ADDR(DC_AC_SCALE_DIV)
+#define POWER_CTL_IQIDCT 0x0e08 	///../ucode/dos_register.h:995
+#define P_POWER_CTL_IQIDCT 		DOS_REG_ADDR(POWER_CTL_IQIDCT)
+#define RV_AI_Y_X 0x0e09 	///../ucode/dos_register.h:996
+#define P_RV_AI_Y_X 		DOS_REG_ADDR(RV_AI_Y_X)
+#define RV_AI_U_X 0x0e0a 	///../ucode/dos_register.h:997
+#define P_RV_AI_U_X 		DOS_REG_ADDR(RV_AI_U_X)
+#define RV_AI_V_X 0x0e0b 	///../ucode/dos_register.h:998
+#define P_RV_AI_V_X 		DOS_REG_ADDR(RV_AI_V_X)
+#define RV_AI_MB_COUNT 0x0e0c 	///../ucode/dos_register.h:1001
+#define P_RV_AI_MB_COUNT 		DOS_REG_ADDR(RV_AI_MB_COUNT)
+#define NEXT_INTRA_DMA_ADDRESS 0x0e0d 	///../ucode/dos_register.h:1003
+#define P_NEXT_INTRA_DMA_ADDRESS 		DOS_REG_ADDR(NEXT_INTRA_DMA_ADDRESS)
+#define IQIDCT_CONTROL 0x0e0e 	///../ucode/dos_register.h:1005
+#define P_IQIDCT_CONTROL 		DOS_REG_ADDR(IQIDCT_CONTROL)
+#define IQIDCT_DEBUG_INFO_0 0x0e0f 	///../ucode/dos_register.h:1022
+#define P_IQIDCT_DEBUG_INFO_0 		DOS_REG_ADDR(IQIDCT_DEBUG_INFO_0)
+#define DEBLK_CMD 0x0e10 	///../ucode/dos_register.h:1024
+#define P_DEBLK_CMD 		DOS_REG_ADDR(DEBLK_CMD)
+#define IQIDCT_DEBUG_IDCT 0x0e11 	///../ucode/dos_register.h:1057
+#define P_IQIDCT_DEBUG_IDCT 		DOS_REG_ADDR(IQIDCT_DEBUG_IDCT)
+#define DCAC_DMA_CTRL 0x0e12 	///../ucode/dos_register.h:1067
+#define P_DCAC_DMA_CTRL 		DOS_REG_ADDR(DCAC_DMA_CTRL)
+#define DCAC_DMA_ADDRESS 0x0e13 	///../ucode/dos_register.h:1074
+#define P_DCAC_DMA_ADDRESS 		DOS_REG_ADDR(DCAC_DMA_ADDRESS)
+#define DCAC_CPU_ADDRESS 0x0e14 	///../ucode/dos_register.h:1076
+#define P_DCAC_CPU_ADDRESS 		DOS_REG_ADDR(DCAC_CPU_ADDRESS)
+#define DCAC_CPU_DATA 0x0e15 	///../ucode/dos_register.h:1078
+#define P_DCAC_CPU_DATA 		DOS_REG_ADDR(DCAC_CPU_DATA)
+#define DCAC_MB_COUNT 0x0e16 	///../ucode/dos_register.h:1082
+#define P_DCAC_MB_COUNT 		DOS_REG_ADDR(DCAC_MB_COUNT)
+#define IQ_QUANT 0x0e17 	///../ucode/dos_register.h:1095
+#define P_IQ_QUANT 		DOS_REG_ADDR(IQ_QUANT)
+#define VC1_BITPLANE_CTL 0x0e18 	///../ucode/dos_register.h:1103
+#define P_VC1_BITPLANE_CTL 		DOS_REG_ADDR(VC1_BITPLANE_CTL)
+#define MSP 0x0300 	///../ucode/dos_register.h:1151
+#define P_MSP 		DOS_REG_ADDR(MSP)
+#define MPSR 0x0301 	///../ucode/dos_register.h:1152
+#define P_MPSR 		DOS_REG_ADDR(MPSR)
+#define MINT_VEC_BASE 0x0302 	///../ucode/dos_register.h:1153
+#define P_MINT_VEC_BASE 		DOS_REG_ADDR(MINT_VEC_BASE)
+#define MCPU_INTR_GRP 0x0303 	///../ucode/dos_register.h:1154
+#define P_MCPU_INTR_GRP 		DOS_REG_ADDR(MCPU_INTR_GRP)
+#define MCPU_INTR_MSK 0x0304 	///../ucode/dos_register.h:1155
+#define P_MCPU_INTR_MSK 		DOS_REG_ADDR(MCPU_INTR_MSK)
+#define MCPU_INTR_REQ 0x0305 	///../ucode/dos_register.h:1156
+#define P_MCPU_INTR_REQ 		DOS_REG_ADDR(MCPU_INTR_REQ)
+#define MPC_P 0x0306 	///../ucode/dos_register.h:1157
+#define P_MPC_P 		DOS_REG_ADDR(MPC_P)
+#define MPC_D 0x0307 	///../ucode/dos_register.h:1158
+#define P_MPC_D 		DOS_REG_ADDR(MPC_D)
+#define MPC_E 0x0308 	///../ucode/dos_register.h:1159
+#define P_MPC_E 		DOS_REG_ADDR(MPC_E)
+#define MPC_W 0x0309 	///../ucode/dos_register.h:1160
+#define P_MPC_W 		DOS_REG_ADDR(MPC_W)
+#define MINDEX0_REG 0x030a 	///../ucode/dos_register.h:1161
+#define P_MINDEX0_REG 		DOS_REG_ADDR(MINDEX0_REG)
+#define MINDEX1_REG 0x030b 	///../ucode/dos_register.h:1162
+#define P_MINDEX1_REG 		DOS_REG_ADDR(MINDEX1_REG)
+#define MINDEX2_REG 0x030c 	///../ucode/dos_register.h:1163
+#define P_MINDEX2_REG 		DOS_REG_ADDR(MINDEX2_REG)
+#define MINDEX3_REG 0x030d 	///../ucode/dos_register.h:1164
+#define P_MINDEX3_REG 		DOS_REG_ADDR(MINDEX3_REG)
+#define MINDEX4_REG 0x030e 	///../ucode/dos_register.h:1165
+#define P_MINDEX4_REG 		DOS_REG_ADDR(MINDEX4_REG)
+#define MINDEX5_REG 0x030f 	///../ucode/dos_register.h:1166
+#define P_MINDEX5_REG 		DOS_REG_ADDR(MINDEX5_REG)
+#define MINDEX6_REG 0x0310 	///../ucode/dos_register.h:1167
+#define P_MINDEX6_REG 		DOS_REG_ADDR(MINDEX6_REG)
+#define MINDEX7_REG 0x0311 	///../ucode/dos_register.h:1168
+#define P_MINDEX7_REG 		DOS_REG_ADDR(MINDEX7_REG)
+#define MMIN_REG 0x0312 	///../ucode/dos_register.h:1169
+#define P_MMIN_REG 		DOS_REG_ADDR(MMIN_REG)
+#define MMAX_REG 0x0313 	///../ucode/dos_register.h:1170
+#define P_MMAX_REG 		DOS_REG_ADDR(MMAX_REG)
+#define MBREAK0_REG 0x0314 	///../ucode/dos_register.h:1171
+#define P_MBREAK0_REG 		DOS_REG_ADDR(MBREAK0_REG)
+#define MBREAK1_REG 0x0315 	///../ucode/dos_register.h:1172
+#define P_MBREAK1_REG 		DOS_REG_ADDR(MBREAK1_REG)
+#define MBREAK2_REG 0x0316 	///../ucode/dos_register.h:1173
+#define P_MBREAK2_REG 		DOS_REG_ADDR(MBREAK2_REG)
+#define MBREAK3_REG 0x0317 	///../ucode/dos_register.h:1174
+#define P_MBREAK3_REG 		DOS_REG_ADDR(MBREAK3_REG)
+#define MBREAK_TYPE 0x0318 	///../ucode/dos_register.h:1175
+#define P_MBREAK_TYPE 		DOS_REG_ADDR(MBREAK_TYPE)
+#define MBREAK_CTRL 0x0319 	///../ucode/dos_register.h:1176
+#define P_MBREAK_CTRL 		DOS_REG_ADDR(MBREAK_CTRL)
+#define MBREAK_STAUTS 0x031a 	///../ucode/dos_register.h:1177
+#define P_MBREAK_STAUTS 		DOS_REG_ADDR(MBREAK_STAUTS)
+#define MDB_ADDR_REG 0x031b 	///../ucode/dos_register.h:1178
+#define P_MDB_ADDR_REG 		DOS_REG_ADDR(MDB_ADDR_REG)
+#define MDB_DATA_REG 0x031c 	///../ucode/dos_register.h:1179
+#define P_MDB_DATA_REG 		DOS_REG_ADDR(MDB_DATA_REG)
+#define MDB_CTRL 0x031d 	///../ucode/dos_register.h:1180
+#define P_MDB_CTRL 		DOS_REG_ADDR(MDB_CTRL)
+#define MSFTINT0 0x031e 	///../ucode/dos_register.h:1181
+#define P_MSFTINT0 		DOS_REG_ADDR(MSFTINT0)
+#define MSFTINT1 0x031f 	///../ucode/dos_register.h:1182
+#define P_MSFTINT1 		DOS_REG_ADDR(MSFTINT1)
+#define CSP 0x0320 	///../ucode/dos_register.h:1183
+#define P_CSP 		DOS_REG_ADDR(CSP)
+#define CPSR 0x0321 	///../ucode/dos_register.h:1184
+#define P_CPSR 		DOS_REG_ADDR(CPSR)
+#define CINT_VEC_BASE 0x0322 	///../ucode/dos_register.h:1185
+#define P_CINT_VEC_BASE 		DOS_REG_ADDR(CINT_VEC_BASE)
+#define CCPU_INTR_GRP 0x0323 	///../ucode/dos_register.h:1186
+#define P_CCPU_INTR_GRP 		DOS_REG_ADDR(CCPU_INTR_GRP)
+#define CCPU_INTR_MSK 0x0324 	///../ucode/dos_register.h:1187
+#define P_CCPU_INTR_MSK 		DOS_REG_ADDR(CCPU_INTR_MSK)
+#define CCPU_INTR_REQ 0x0325 	///../ucode/dos_register.h:1188
+#define P_CCPU_INTR_REQ 		DOS_REG_ADDR(CCPU_INTR_REQ)
+#define CPC_P 0x0326 	///../ucode/dos_register.h:1189
+#define P_CPC_P 		DOS_REG_ADDR(CPC_P)
+#define CPC_D 0x0327 	///../ucode/dos_register.h:1190
+#define P_CPC_D 		DOS_REG_ADDR(CPC_D)
+#define CPC_E 0x0328 	///../ucode/dos_register.h:1191
+#define P_CPC_E 		DOS_REG_ADDR(CPC_E)
+#define CPC_W 0x0329 	///../ucode/dos_register.h:1192
+#define P_CPC_W 		DOS_REG_ADDR(CPC_W)
+#define CINDEX0_REG 0x032a 	///../ucode/dos_register.h:1193
+#define P_CINDEX0_REG 		DOS_REG_ADDR(CINDEX0_REG)
+#define CINDEX1_REG 0x032b 	///../ucode/dos_register.h:1194
+#define P_CINDEX1_REG 		DOS_REG_ADDR(CINDEX1_REG)
+#define CINDEX2_REG 0x032c 	///../ucode/dos_register.h:1195
+#define P_CINDEX2_REG 		DOS_REG_ADDR(CINDEX2_REG)
+#define CINDEX3_REG 0x032d 	///../ucode/dos_register.h:1196
+#define P_CINDEX3_REG 		DOS_REG_ADDR(CINDEX3_REG)
+#define CINDEX4_REG 0x032e 	///../ucode/dos_register.h:1197
+#define P_CINDEX4_REG 		DOS_REG_ADDR(CINDEX4_REG)
+#define CINDEX5_REG 0x032f 	///../ucode/dos_register.h:1198
+#define P_CINDEX5_REG 		DOS_REG_ADDR(CINDEX5_REG)
+#define CINDEX6_REG 0x0330 	///../ucode/dos_register.h:1199
+#define P_CINDEX6_REG 		DOS_REG_ADDR(CINDEX6_REG)
+#define CINDEX7_REG 0x0331 	///../ucode/dos_register.h:1200
+#define P_CINDEX7_REG 		DOS_REG_ADDR(CINDEX7_REG)
+#define CMIN_REG 0x0332 	///../ucode/dos_register.h:1201
+#define P_CMIN_REG 		DOS_REG_ADDR(CMIN_REG)
+#define CMAX_REG 0x0333 	///../ucode/dos_register.h:1202
+#define P_CMAX_REG 		DOS_REG_ADDR(CMAX_REG)
+#define CBREAK0_REG 0x0334 	///../ucode/dos_register.h:1203
+#define P_CBREAK0_REG 		DOS_REG_ADDR(CBREAK0_REG)
+#define CBREAK1_REG 0x0335 	///../ucode/dos_register.h:1204
+#define P_CBREAK1_REG 		DOS_REG_ADDR(CBREAK1_REG)
+#define CBREAK2_REG 0x0336 	///../ucode/dos_register.h:1205
+#define P_CBREAK2_REG 		DOS_REG_ADDR(CBREAK2_REG)
+#define CBREAK3_REG 0x0337 	///../ucode/dos_register.h:1206
+#define P_CBREAK3_REG 		DOS_REG_ADDR(CBREAK3_REG)
+#define CBREAK_TYPE 0x0338 	///../ucode/dos_register.h:1207
+#define P_CBREAK_TYPE 		DOS_REG_ADDR(CBREAK_TYPE)
+#define CBREAK_CTRL 0x0339 	///../ucode/dos_register.h:1208
+#define P_CBREAK_CTRL 		DOS_REG_ADDR(CBREAK_CTRL)
+#define CBREAK_STAUTS 0x033a 	///../ucode/dos_register.h:1209
+#define P_CBREAK_STAUTS 		DOS_REG_ADDR(CBREAK_STAUTS)
+#define CDB_ADDR_REG 0x033b 	///../ucode/dos_register.h:1210
+#define P_CDB_ADDR_REG 		DOS_REG_ADDR(CDB_ADDR_REG)
+#define CDB_DATA_REG 0x033c 	///../ucode/dos_register.h:1211
+#define P_CDB_DATA_REG 		DOS_REG_ADDR(CDB_DATA_REG)
+#define CDB_CTRL 0x033d 	///../ucode/dos_register.h:1212
+#define P_CDB_CTRL 		DOS_REG_ADDR(CDB_CTRL)
+#define CSFTINT0 0x033e 	///../ucode/dos_register.h:1213
+#define P_CSFTINT0 		DOS_REG_ADDR(CSFTINT0)
+#define CSFTINT1 0x033f 	///../ucode/dos_register.h:1214
+#define P_CSFTINT1 		DOS_REG_ADDR(CSFTINT1)
+#define IMEM_DMA_CTRL 0x0340 	///../ucode/dos_register.h:1215
+#define P_IMEM_DMA_CTRL 		DOS_REG_ADDR(IMEM_DMA_CTRL)
+#define IMEM_DMA_ADR 0x0341 	///../ucode/dos_register.h:1216
+#define P_IMEM_DMA_ADR 		DOS_REG_ADDR(IMEM_DMA_ADR)
+#define IMEM_DMA_COUNT 0x0342 	///../ucode/dos_register.h:1217
+#define P_IMEM_DMA_COUNT 		DOS_REG_ADDR(IMEM_DMA_COUNT)
+#define WRRSP_IMEM 0x0343 	///../ucode/dos_register.h:1221
+#define P_WRRSP_IMEM 		DOS_REG_ADDR(WRRSP_IMEM)
+#define LMEM_DMA_CTRL 0x0350 	///../ucode/dos_register.h:1222
+#define P_LMEM_DMA_CTRL 		DOS_REG_ADDR(LMEM_DMA_CTRL)
+#define LMEM_DMA_ADR 0x0351 	///../ucode/dos_register.h:1223
+#define P_LMEM_DMA_ADR 		DOS_REG_ADDR(LMEM_DMA_ADR)
+#define LMEM_DMA_COUNT 0x0352 	///../ucode/dos_register.h:1224
+#define P_LMEM_DMA_COUNT 		DOS_REG_ADDR(LMEM_DMA_COUNT)
+#define WRRSP_LMEM 0x0353 	///../ucode/dos_register.h:1228
+#define P_WRRSP_LMEM 		DOS_REG_ADDR(WRRSP_LMEM)
+#define MAC_CTRL1 0x0360 	///../ucode/dos_register.h:1229
+#define P_MAC_CTRL1 		DOS_REG_ADDR(MAC_CTRL1)
+#define ACC0REG1 0x0361 	///../ucode/dos_register.h:1230
+#define P_ACC0REG1 		DOS_REG_ADDR(ACC0REG1)
+#define ACC1REG1 0x0362 	///../ucode/dos_register.h:1231
+#define P_ACC1REG1 		DOS_REG_ADDR(ACC1REG1)
+#define MAC_CTRL2 0x0370 	///../ucode/dos_register.h:1232
+#define P_MAC_CTRL2 		DOS_REG_ADDR(MAC_CTRL2)
+#define ACC0REG2 0x0371 	///../ucode/dos_register.h:1233
+#define P_ACC0REG2 		DOS_REG_ADDR(ACC0REG2)
+#define ACC1REG2 0x0372 	///../ucode/dos_register.h:1234
+#define P_ACC1REG2 		DOS_REG_ADDR(ACC1REG2)
+#define CPU_TRACE 0x0380 	///../ucode/dos_register.h:1235
+#define P_CPU_TRACE 		DOS_REG_ADDR(CPU_TRACE)
+#define HENC_SCRATCH_0 0x1ac0 	///../ucode/dos_register.h:1251
+#define P_HENC_SCRATCH_0 		DOS_REG_ADDR(HENC_SCRATCH_0)
+#define HENC_SCRATCH_1 0x1ac1 	///../ucode/dos_register.h:1252
+#define P_HENC_SCRATCH_1 		DOS_REG_ADDR(HENC_SCRATCH_1)
+#define HENC_SCRATCH_2 0x1ac2 	///../ucode/dos_register.h:1253
+#define P_HENC_SCRATCH_2 		DOS_REG_ADDR(HENC_SCRATCH_2)
+#define HENC_SCRATCH_3 0x1ac3 	///../ucode/dos_register.h:1254
+#define P_HENC_SCRATCH_3 		DOS_REG_ADDR(HENC_SCRATCH_3)
+#define HENC_SCRATCH_4 0x1ac4 	///../ucode/dos_register.h:1255
+#define P_HENC_SCRATCH_4 		DOS_REG_ADDR(HENC_SCRATCH_4)
+#define HENC_SCRATCH_5 0x1ac5 	///../ucode/dos_register.h:1256
+#define P_HENC_SCRATCH_5 		DOS_REG_ADDR(HENC_SCRATCH_5)
+#define HENC_SCRATCH_6 0x1ac6 	///../ucode/dos_register.h:1257
+#define P_HENC_SCRATCH_6 		DOS_REG_ADDR(HENC_SCRATCH_6)
+#define HENC_SCRATCH_7 0x1ac7 	///../ucode/dos_register.h:1258
+#define P_HENC_SCRATCH_7 		DOS_REG_ADDR(HENC_SCRATCH_7)
+#define HENC_SCRATCH_8 0x1ac8 	///../ucode/dos_register.h:1259
+#define P_HENC_SCRATCH_8 		DOS_REG_ADDR(HENC_SCRATCH_8)
+#define HENC_SCRATCH_9 0x1ac9 	///../ucode/dos_register.h:1260
+#define P_HENC_SCRATCH_9 		DOS_REG_ADDR(HENC_SCRATCH_9)
+#define HENC_SCRATCH_A 0x1aca 	///../ucode/dos_register.h:1261
+#define P_HENC_SCRATCH_A 		DOS_REG_ADDR(HENC_SCRATCH_A)
+#define HENC_SCRATCH_B 0x1acb 	///../ucode/dos_register.h:1262
+#define P_HENC_SCRATCH_B 		DOS_REG_ADDR(HENC_SCRATCH_B)
+#define HENC_SCRATCH_C 0x1acc 	///../ucode/dos_register.h:1263
+#define P_HENC_SCRATCH_C 		DOS_REG_ADDR(HENC_SCRATCH_C)
+#define HENC_SCRATCH_D 0x1acd 	///../ucode/dos_register.h:1264
+#define P_HENC_SCRATCH_D 		DOS_REG_ADDR(HENC_SCRATCH_D)
+#define HENC_SCRATCH_E 0x1ace 	///../ucode/dos_register.h:1265
+#define P_HENC_SCRATCH_E 		DOS_REG_ADDR(HENC_SCRATCH_E)
+#define HENC_SCRATCH_F 0x1acf 	///../ucode/dos_register.h:1266
+#define P_HENC_SCRATCH_F 		DOS_REG_ADDR(HENC_SCRATCH_F)
+#define HENC_SCRATCH_G 0x1ad0 	///../ucode/dos_register.h:1267
+#define P_HENC_SCRATCH_G 		DOS_REG_ADDR(HENC_SCRATCH_G)
+#define HENC_SCRATCH_H 0x1ad1 	///../ucode/dos_register.h:1268
+#define P_HENC_SCRATCH_H 		DOS_REG_ADDR(HENC_SCRATCH_H)
+#define HENC_SCRATCH_I 0x1ad2 	///../ucode/dos_register.h:1269
+#define P_HENC_SCRATCH_I 		DOS_REG_ADDR(HENC_SCRATCH_I)
+#define HENC_SCRATCH_J 0x1ad3 	///../ucode/dos_register.h:1270
+#define P_HENC_SCRATCH_J 		DOS_REG_ADDR(HENC_SCRATCH_J)
+#define HENC_SCRATCH_K 0x1ad4 	///../ucode/dos_register.h:1271
+#define P_HENC_SCRATCH_K 		DOS_REG_ADDR(HENC_SCRATCH_K)
+#define HENC_SCRATCH_L 0x1ad5 	///../ucode/dos_register.h:1272
+#define P_HENC_SCRATCH_L 		DOS_REG_ADDR(HENC_SCRATCH_L)
+#define HENC_SCRATCH_M 0x1ad6 	///../ucode/dos_register.h:1273
+#define P_HENC_SCRATCH_M 		DOS_REG_ADDR(HENC_SCRATCH_M)
+#define HENC_SCRATCH_N 0x1ad7 	///../ucode/dos_register.h:1274
+#define P_HENC_SCRATCH_N 		DOS_REG_ADDR(HENC_SCRATCH_N)
+#define IE_DATA_FEED_BUFF_INFO 0x1ad8 	///../ucode/dos_register.h:1276
+#define P_IE_DATA_FEED_BUFF_INFO 		DOS_REG_ADDR(IE_DATA_FEED_BUFF_INFO)
+#define VLC_STATUS_CTRL 0x1d00 	///../ucode/dos_register.h:1302
+#define P_VLC_STATUS_CTRL 		DOS_REG_ADDR(VLC_STATUS_CTRL)
+#define VLC_CONFIG 0x1d01 	///../ucode/dos_register.h:1320
+#define P_VLC_CONFIG 		DOS_REG_ADDR(VLC_CONFIG)
+#define VLC_VB_START_PTR 0x1d10 	///../ucode/dos_register.h:1324
+#define P_VLC_VB_START_PTR 		DOS_REG_ADDR(VLC_VB_START_PTR)
+#define VLC_VB_END_PTR 0x1d11 	///../ucode/dos_register.h:1325
+#define P_VLC_VB_END_PTR 		DOS_REG_ADDR(VLC_VB_END_PTR)
+#define VLC_VB_WR_PTR 0x1d12 	///../ucode/dos_register.h:1326
+#define P_VLC_VB_WR_PTR 		DOS_REG_ADDR(VLC_VB_WR_PTR)
+#define VLC_VB_RD_PTR 0x1d13 	///../ucode/dos_register.h:1328
+#define P_VLC_VB_RD_PTR 		DOS_REG_ADDR(VLC_VB_RD_PTR)
+#define VLC_VB_SW_RD_PTR 0x1d14 	///../ucode/dos_register.h:1329
+#define P_VLC_VB_SW_RD_PTR 		DOS_REG_ADDR(VLC_VB_SW_RD_PTR)
+#define VLC_VB_LEFT 0x1d15 	///../ucode/dos_register.h:1331
+#define P_VLC_VB_LEFT 		DOS_REG_ADDR(VLC_VB_LEFT)
+#define VLC_VB_CONTROL 0x1d16 	///../ucode/dos_register.h:1357
+#define P_VLC_VB_CONTROL 		DOS_REG_ADDR(VLC_VB_CONTROL)
+#define VLC_VB_MEM_CTL 0x1d17 	///../ucode/dos_register.h:1364
+#define P_VLC_VB_MEM_CTL 		DOS_REG_ADDR(VLC_VB_MEM_CTL)
+#define VLC_VB_INT_PTR 0x1d18 	///../ucode/dos_register.h:1366
+#define P_VLC_VB_INT_PTR 		DOS_REG_ADDR(VLC_VB_INT_PTR)
+#define VLC_WRRSP 0x1d19 	///../ucode/dos_register.h:1369
+#define P_VLC_WRRSP 		DOS_REG_ADDR(VLC_WRRSP)
+#define VLC_TOTAL_BYTES 0x1d1a 	///../ucode/dos_register.h:1370
+#define P_VLC_TOTAL_BYTES 		DOS_REG_ADDR(VLC_TOTAL_BYTES)
+#define VLC_VB_BUFF 0x1d1b 	///../ucode/dos_register.h:1377
+#define P_VLC_VB_BUFF 		DOS_REG_ADDR(VLC_VB_BUFF)
+#define VLC_VB_PRE_BUFF_HI 0x1d1c 	///../ucode/dos_register.h:1382
+#define P_VLC_VB_PRE_BUFF_HI 		DOS_REG_ADDR(VLC_VB_PRE_BUFF_HI)
+#define VLC_VB_PRE_BUFF_LOW 0x1d1d 	///../ucode/dos_register.h:1384
+#define P_VLC_VB_PRE_BUFF_LOW 		DOS_REG_ADDR(VLC_VB_PRE_BUFF_LOW)
+#define VLC_STREAM_BUFF 0x1d1e 	///../ucode/dos_register.h:1389
+#define P_VLC_STREAM_BUFF 		DOS_REG_ADDR(VLC_STREAM_BUFF)
+#define VLC_PUSH_STREAM 0x1d1f 	///../ucode/dos_register.h:1403
+#define P_VLC_PUSH_STREAM 		DOS_REG_ADDR(VLC_PUSH_STREAM)
+#define VLC_PUSH_ELEMENT 0x1d20 	///../ucode/dos_register.h:1407
+#define P_VLC_PUSH_ELEMENT 		DOS_REG_ADDR(VLC_PUSH_ELEMENT)
+#define VLC_ELEMENT_DATA 0x1d21 	///../ucode/dos_register.h:1408
+#define P_VLC_ELEMENT_DATA 		DOS_REG_ADDR(VLC_ELEMENT_DATA)
+#define VLC_INT_CONTROL 0x1d30 	///../ucode/dos_register.h:1445
+#define P_VLC_INT_CONTROL 		DOS_REG_ADDR(VLC_INT_CONTROL)
+#define VLC_PIC_SIZE 0x1d31 	///../ucode/dos_register.h:1448
+#define P_VLC_PIC_SIZE 		DOS_REG_ADDR(VLC_PIC_SIZE)
+#define VLC_PIC_INFO 0x1d32 	///../ucode/dos_register.h:1452
+#define P_VLC_PIC_INFO 		DOS_REG_ADDR(VLC_PIC_INFO)
+#define VLC_PIC_POSITION 0x1d33 	///../ucode/dos_register.h:1456
+#define P_VLC_PIC_POSITION 		DOS_REG_ADDR(VLC_PIC_POSITION)
+#define VLC_INPUT_STATUS 0x1d34 	///../ucode/dos_register.h:1475
+#define P_VLC_INPUT_STATUS 		DOS_REG_ADDR(VLC_INPUT_STATUS)
+#define VLC_MB_INFO 0x1d35 	///../ucode/dos_register.h:1480
+#define P_VLC_MB_INFO 		DOS_REG_ADDR(VLC_MB_INFO)
+#define VLC_ENC_PEND_CMD 0x1d36 	///../ucode/dos_register.h:1492
+#define P_VLC_ENC_PEND_CMD 		DOS_REG_ADDR(VLC_ENC_PEND_CMD)
+#define HENC_TOP_INFO_0 0x1d37 	///../ucode/dos_register.h:1496
+#define P_HENC_TOP_INFO_0 		DOS_REG_ADDR(HENC_TOP_INFO_0)
+#define HENC_LEFT_INFO_0 0x1d38 	///../ucode/dos_register.h:1497
+#define P_HENC_LEFT_INFO_0 		DOS_REG_ADDR(HENC_LEFT_INFO_0)
+#define HENC_TOP_INFO_1 0x1d39 	///../ucode/dos_register.h:1502
+#define P_HENC_TOP_INFO_1 		DOS_REG_ADDR(HENC_TOP_INFO_1)
+#define HENC_LEFT_INFO_1 0x1d3a 	///../ucode/dos_register.h:1503
+#define P_HENC_LEFT_INFO_1 		DOS_REG_ADDR(HENC_LEFT_INFO_1)
+#define VLC_IPRED_MODE_HI 0x1d3b 	///../ucode/dos_register.h:1505
+#define P_VLC_IPRED_MODE_HI 		DOS_REG_ADDR(VLC_IPRED_MODE_HI)
+#define VLC_IPRED_MODE_LO 0x1d3c 	///../ucode/dos_register.h:1506
+#define P_VLC_IPRED_MODE_LO 		DOS_REG_ADDR(VLC_IPRED_MODE_LO)
+#define VLC_DELTA_QP 0x1d3d 	///../ucode/dos_register.h:1509
+#define P_VLC_DELTA_QP 		DOS_REG_ADDR(VLC_DELTA_QP)
+#define VLC_MB_HEADER_INFO 0x1d3e 	///../ucode/dos_register.h:1514
+#define P_VLC_MB_HEADER_INFO 		DOS_REG_ADDR(VLC_MB_HEADER_INFO)
+#define VLC_P_MB_HEADER_INFO 0x1d3f 	///../ucode/dos_register.h:1517
+#define P_VLC_P_MB_HEADER_INFO 		DOS_REG_ADDR(VLC_P_MB_HEADER_INFO)
+#define VLC_COEFF_BUF_STATUS 0x1d40 	///../ucode/dos_register.h:1523
+#define P_VLC_COEFF_BUF_STATUS 		DOS_REG_ADDR(VLC_COEFF_BUF_STATUS)
+#define VLC_COEFF_RD_REQ 0x1d41 	///../ucode/dos_register.h:1526
+#define P_VLC_COEFF_RD_REQ 		DOS_REG_ADDR(VLC_COEFF_RD_REQ)
+#define VLC_COEFF 0x1d42 	///../ucode/dos_register.h:1531
+#define P_VLC_COEFF 		DOS_REG_ADDR(VLC_COEFF)
+#define VLC_COEFF_INFO 0x1d43 	///../ucode/dos_register.h:1539
+#define P_VLC_COEFF_INFO 		DOS_REG_ADDR(VLC_COEFF_INFO)
+#define VLC_DC_BUF_STATUS 0x1d44 	///../ucode/dos_register.h:1548
+#define P_VLC_DC_BUF_STATUS 		DOS_REG_ADDR(VLC_DC_BUF_STATUS)
+#define VLC_DC_RD_REQ 0x1d45 	///../ucode/dos_register.h:1552
+#define P_VLC_DC_RD_REQ 		DOS_REG_ADDR(VLC_DC_RD_REQ)
+#define VLC_DC 0x1d46 	///../ucode/dos_register.h:1557
+#define P_VLC_DC 		DOS_REG_ADDR(VLC_DC)
+#define VLC_DC_INFO 0x1d47 	///../ucode/dos_register.h:1566
+#define P_VLC_DC_INFO 		DOS_REG_ADDR(VLC_DC_INFO)
+#define VLC_MV_INDEX 0x1d48 	///../ucode/dos_register.h:1569
+#define P_VLC_MV_INDEX 		DOS_REG_ADDR(VLC_MV_INDEX)
+#define VLC_MV 0x1d49 	///../ucode/dos_register.h:1572
+#define P_VLC_MV 		DOS_REG_ADDR(VLC_MV)
+#define HENC_TOP_MV_0 0x1d4a 	///../ucode/dos_register.h:1577
+#define P_HENC_TOP_MV_0 		DOS_REG_ADDR(HENC_TOP_MV_0)
+#define HENC_TOP_MV_1 0x1d4b 	///../ucode/dos_register.h:1578
+#define P_HENC_TOP_MV_1 		DOS_REG_ADDR(HENC_TOP_MV_1)
+#define HENC_TOP_MV_2 0x1d4c 	///../ucode/dos_register.h:1579
+#define P_HENC_TOP_MV_2 		DOS_REG_ADDR(HENC_TOP_MV_2)
+#define HENC_TOP_MV_3 0x1d4d 	///../ucode/dos_register.h:1580
+#define P_HENC_TOP_MV_3 		DOS_REG_ADDR(HENC_TOP_MV_3)
+#define HENC_LEFT_MV_0 0x1d4e 	///../ucode/dos_register.h:1581
+#define P_HENC_LEFT_MV_0 		DOS_REG_ADDR(HENC_LEFT_MV_0)
+#define HENC_LEFT_MV_1 0x1d4f 	///../ucode/dos_register.h:1582
+#define P_HENC_LEFT_MV_1 		DOS_REG_ADDR(HENC_LEFT_MV_1)
+#define HENC_LEFT_MV_2 0x1d50 	///../ucode/dos_register.h:1583
+#define P_HENC_LEFT_MV_2 		DOS_REG_ADDR(HENC_LEFT_MV_2)
+#define HENC_LEFT_MV_3 0x1d51 	///../ucode/dos_register.h:1584
+#define P_HENC_LEFT_MV_3 		DOS_REG_ADDR(HENC_LEFT_MV_3)
+#define TOP_LEFT_READY 0x1d52 	///../ucode/dos_register.h:1587
+#define P_TOP_LEFT_READY 		DOS_REG_ADDR(TOP_LEFT_READY)
+#define MB_SKIP_RUN 0x1d53 	///../ucode/dos_register.h:1590
+#define P_MB_SKIP_RUN 		DOS_REG_ADDR(MB_SKIP_RUN)
+#define VLC_HCMD_CONFIG 0x1d54 	///../ucode/dos_register.h:1597
+#define P_VLC_HCMD_CONFIG 		DOS_REG_ADDR(VLC_HCMD_CONFIG)
+#define VLC_HCMD_DBLK_INFO 0x1d55 	///../ucode/dos_register.h:1599
+#define P_VLC_HCMD_DBLK_INFO 		DOS_REG_ADDR(VLC_HCMD_DBLK_INFO)
+#define VLC_DBG_IDX 0x1d56 	///../ucode/dos_register.h:1601
+#define P_VLC_DBG_IDX 		DOS_REG_ADDR(VLC_DBG_IDX)
+#define VLC_DBG_READ 0x1d57 	///../ucode/dos_register.h:1603
+#define P_VLC_DBG_READ 		DOS_REG_ADDR(VLC_DBG_READ)
+#define VLC_JPEG_CTRL 0x1d58 	///../ucode/dos_register.h:1604
+#define P_VLC_JPEG_CTRL 		DOS_REG_ADDR(VLC_JPEG_CTRL)
+#define VLC_JPEG_COEFF_BUF_STAT 0x1d59 	///../ucode/dos_register.h:1605
+#define P_VLC_JPEG_COEFF_BUF_STAT 		DOS_REG_ADDR(VLC_JPEG_COEFF_BUF_STAT)
+#define VLC_HUFFMAN_ADDR 0x1d5a 	///../ucode/dos_register.h:1606
+#define P_VLC_HUFFMAN_ADDR 		DOS_REG_ADDR(VLC_HUFFMAN_ADDR)
+#define VLC_HUFFMAN_DATA 0x1d5b 	///../ucode/dos_register.h:1607
+#define P_VLC_HUFFMAN_DATA 		DOS_REG_ADDR(VLC_HUFFMAN_DATA)
+#define VLC_ENC_MV_BITS 0x1d5c 	///../ucode/dos_register.h:1609
+#define P_VLC_ENC_MV_BITS 		DOS_REG_ADDR(VLC_ENC_MV_BITS)
+#define VLC_ENC_COEFF_BITS 0x1d5d 	///../ucode/dos_register.h:1611
+#define P_VLC_ENC_COEFF_BITS 		DOS_REG_ADDR(VLC_ENC_COEFF_BITS)
+#define QDCT_STATUS_CTRL 0x1f00 	///../ucode/dos_register.h:1628
+#define P_QDCT_STATUS_CTRL 		DOS_REG_ADDR(QDCT_STATUS_CTRL)
+#define QDCT_CONFIG 0x1f01 	///../ucode/dos_register.h:1648
+#define P_QDCT_CONFIG 		DOS_REG_ADDR(QDCT_CONFIG)
+#define IGNORE_CONFIG 0x1f02 	///../ucode/dos_register.h:1657
+#define P_IGNORE_CONFIG 		DOS_REG_ADDR(IGNORE_CONFIG)
+#define IGNORE_CONFIG_2 0x1f03 	///../ucode/dos_register.h:1663
+#define P_IGNORE_CONFIG_2 		DOS_REG_ADDR(IGNORE_CONFIG_2)
+#define QDCT_MB_START_PTR 0x1f10 	///../ucode/dos_register.h:1667
+#define P_QDCT_MB_START_PTR 		DOS_REG_ADDR(QDCT_MB_START_PTR)
+#define QDCT_MB_END_PTR 0x1f11 	///../ucode/dos_register.h:1668
+#define P_QDCT_MB_END_PTR 		DOS_REG_ADDR(QDCT_MB_END_PTR)
+#define QDCT_MB_WR_PTR 0x1f12 	///../ucode/dos_register.h:1669
+#define P_QDCT_MB_WR_PTR 		DOS_REG_ADDR(QDCT_MB_WR_PTR)
+#define QDCT_MB_RD_PTR 0x1f13 	///../ucode/dos_register.h:1670
+#define P_QDCT_MB_RD_PTR 		DOS_REG_ADDR(QDCT_MB_RD_PTR)
+#define QDCT_MB_LEVEL 0x1f14 	///../ucode/dos_register.h:1671
+#define P_QDCT_MB_LEVEL 		DOS_REG_ADDR(QDCT_MB_LEVEL)
+#define QDCT_MB_CONTROL 0x1f15 	///../ucode/dos_register.h:1702
+#define P_QDCT_MB_CONTROL 		DOS_REG_ADDR(QDCT_MB_CONTROL)
+#define QDCT_MB_MEM_CTL 0x1f16 	///../ucode/dos_register.h:1710
+#define P_QDCT_MB_MEM_CTL 		DOS_REG_ADDR(QDCT_MB_MEM_CTL)
+#define QDCT_MB_BUFF 0x1f17 	///../ucode/dos_register.h:1715
+#define P_QDCT_MB_BUFF 		DOS_REG_ADDR(QDCT_MB_BUFF)
+#define QDCT_MB_MAGIC_WORD 0x1f18 	///../ucode/dos_register.h:1717
+#define P_QDCT_MB_MAGIC_WORD 		DOS_REG_ADDR(QDCT_MB_MAGIC_WORD)
+#define QDCT_DCT_STATUS 0x1f19 	///../ucode/dos_register.h:1729
+#define P_QDCT_DCT_STATUS 		DOS_REG_ADDR(QDCT_DCT_STATUS)
+#define QDCT_Q_STATUS 0x1f1a 	///../ucode/dos_register.h:1731
+#define P_QDCT_Q_STATUS 		DOS_REG_ADDR(QDCT_Q_STATUS)
+#define QDCT_PIC_INFO 0x1f1b 	///../ucode/dos_register.h:1734
+#define P_QDCT_PIC_INFO 		DOS_REG_ADDR(QDCT_PIC_INFO)
+#define QDCT_Q_QUANT_I 0x1f1c 	///../ucode/dos_register.h:1744
+#define P_QDCT_Q_QUANT_I 		DOS_REG_ADDR(QDCT_Q_QUANT_I)
+#define QDCT_Q_QUANT_P 0x1f1d 	///../ucode/dos_register.h:1754
+#define P_QDCT_Q_QUANT_P 		DOS_REG_ADDR(QDCT_Q_QUANT_P)
+#define QDCT_MB_PAUSE_CTL 0x1f1e 	///../ucode/dos_register.h:1758
+#define P_QDCT_MB_PAUSE_CTL 		DOS_REG_ADDR(QDCT_MB_PAUSE_CTL)
+#define QDCT_TOP_CONTROL 0x1f1f 	///../ucode/dos_register.h:1772
+#define P_QDCT_TOP_CONTROL 		DOS_REG_ADDR(QDCT_TOP_CONTROL)
+#define QDCT_TOP_BASE_MEM 0x1f20 	///../ucode/dos_register.h:1774
+#define P_QDCT_TOP_BASE_MEM 		DOS_REG_ADDR(QDCT_TOP_BASE_MEM)
+#define QDCT_TOP_MEM_CTL 0x1f21 	///../ucode/dos_register.h:1779
+#define P_QDCT_TOP_MEM_CTL 		DOS_REG_ADDR(QDCT_TOP_MEM_CTL)
+#define QDCT_TOP_WRRSP 0x1f22 	///../ucode/dos_register.h:1781
+#define P_QDCT_TOP_WRRSP 		DOS_REG_ADDR(QDCT_TOP_WRRSP)
+#define QDCT_DBG_IDX 0x1f23 	///../ucode/dos_register.h:1783
+#define P_QDCT_DBG_IDX 		DOS_REG_ADDR(QDCT_DBG_IDX)
+#define QDCT_DBG_READ 0x1f24 	///../ucode/dos_register.h:1785
+#define P_QDCT_DBG_READ 		DOS_REG_ADDR(QDCT_DBG_READ)
+#define QDCT_JPEG_CTRL 0x1f25 	///../ucode/dos_register.h:1786
+#define P_QDCT_JPEG_CTRL 		DOS_REG_ADDR(QDCT_JPEG_CTRL)
+#define QDCT_JPEG_X_START_END 0x1f26 	///../ucode/dos_register.h:1787
+#define P_QDCT_JPEG_X_START_END 		DOS_REG_ADDR(QDCT_JPEG_X_START_END)
+#define QDCT_JPEG_Y_START_END 0x1f27 	///../ucode/dos_register.h:1788
+#define P_QDCT_JPEG_Y_START_END 		DOS_REG_ADDR(QDCT_JPEG_Y_START_END)
+#define QDCT_JPEG_QUANT_ADDR 0x1f28 	///../ucode/dos_register.h:1789
+#define P_QDCT_JPEG_QUANT_ADDR 		DOS_REG_ADDR(QDCT_JPEG_QUANT_ADDR)
+#define QDCT_JPEG_QUANT_DATA 0x1f29 	///../ucode/dos_register.h:1790
+#define P_QDCT_JPEG_QUANT_DATA 		DOS_REG_ADDR(QDCT_JPEG_QUANT_DATA)
+#define QDCT_JPEG_SOF_RESUME 0x1f2a 	///../ucode/dos_register.h:1791
+#define P_QDCT_JPEG_SOF_RESUME 		DOS_REG_ADDR(QDCT_JPEG_SOF_RESUME)
+#define QDCT_JPEG_DCT_STATUS0 0x1f2b 	///../ucode/dos_register.h:1792
+#define P_QDCT_JPEG_DCT_STATUS0 		DOS_REG_ADDR(QDCT_JPEG_DCT_STATUS0)
+#define QDCT_JPEG_DCT_STATUS1 0x1f2c 	///../ucode/dos_register.h:1793
+#define P_QDCT_JPEG_DCT_STATUS1 		DOS_REG_ADDR(QDCT_JPEG_DCT_STATUS1)
+#define QDCT_JPEG_DCT_COEFF01 0x1f2d 	///../ucode/dos_register.h:1794
+#define P_QDCT_JPEG_DCT_COEFF01 		DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF01)
+#define QDCT_JPEG_DCT_COEFF23 0x1f2e 	///../ucode/dos_register.h:1795
+#define P_QDCT_JPEG_DCT_COEFF23 		DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF23)
+#define QDCT_JPEG_DCT_COEFF45 0x1f2f 	///../ucode/dos_register.h:1796
+#define P_QDCT_JPEG_DCT_COEFF45 		DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF45)
+#define QDCT_JPEG_DCT_COEFF67 0x1f30 	///../ucode/dos_register.h:1797
+#define P_QDCT_JPEG_DCT_COEFF67 		DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF67)
+#define QDCT_JPEG_DCT_COEFF89 0x1f31 	///../ucode/dos_register.h:1798
+#define P_QDCT_JPEG_DCT_COEFF89 		DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF89)
+#define IE_CONTROL 0x1f40 	///../ucode/dos_register.h:1809
+#define P_IE_CONTROL 		DOS_REG_ADDR(IE_CONTROL)
+#define IE_MB_POSITION 0x1f41 	///../ucode/dos_register.h:1812
+#define P_IE_MB_POSITION 		DOS_REG_ADDR(IE_MB_POSITION)
+#define IE_ME_MB_INFO 0x1f42 	///../ucode/dos_register.h:1817
+#define P_IE_ME_MB_INFO 		DOS_REG_ADDR(IE_ME_MB_INFO)
+#define SAD_CONTROL 0x1f43 	///../ucode/dos_register.h:1822
+#define P_SAD_CONTROL 		DOS_REG_ADDR(SAD_CONTROL)
+#define IE_RESULT_BUFFER 0x1f44 	///../ucode/dos_register.h:1829
+#define P_IE_RESULT_BUFFER 		DOS_REG_ADDR(IE_RESULT_BUFFER)
+#define IE_I4_PRED_MODE_HI 0x1f45 	///../ucode/dos_register.h:1831
+#define P_IE_I4_PRED_MODE_HI 		DOS_REG_ADDR(IE_I4_PRED_MODE_HI)
+#define IE_I4_PRED_MODE_LO 0x1f46 	///../ucode/dos_register.h:1832
+#define P_IE_I4_PRED_MODE_LO 		DOS_REG_ADDR(IE_I4_PRED_MODE_LO)
+#define IE_C_PRED_MODE 0x1f47 	///../ucode/dos_register.h:1836
+#define P_IE_C_PRED_MODE 		DOS_REG_ADDR(IE_C_PRED_MODE)
+#define IE_CUR_REF_SEL 0x1f48 	///../ucode/dos_register.h:1839
+#define P_IE_CUR_REF_SEL 		DOS_REG_ADDR(IE_CUR_REF_SEL)
+#define ME_CONTROL 0x1f49 	///../ucode/dos_register.h:1860
+#define P_ME_CONTROL 		DOS_REG_ADDR(ME_CONTROL)
+#define ME_START_POSITION 0x1f4a 	///../ucode/dos_register.h:1865
+#define P_ME_START_POSITION 		DOS_REG_ADDR(ME_START_POSITION)
+#define ME_STATUS 0x1f4b 	///../ucode/dos_register.h:1874
+#define P_ME_STATUS 		DOS_REG_ADDR(ME_STATUS)
+#define ME_DEBUG 0x1f4c 	///../ucode/dos_register.h:1881
+#define P_ME_DEBUG 		DOS_REG_ADDR(ME_DEBUG)
+#define ME_SKIP_LINE 0x1f4d 	///../ucode/dos_register.h:1887
+#define P_ME_SKIP_LINE 		DOS_REG_ADDR(ME_SKIP_LINE)
+#define ME_AB_MEM_CTL 0x1f4e 	///../ucode/dos_register.h:1892
+#define P_ME_AB_MEM_CTL 		DOS_REG_ADDR(ME_AB_MEM_CTL)
+#define ME_PIC_INFO 0x1f4f 	///../ucode/dos_register.h:1896
+#define P_ME_PIC_INFO 		DOS_REG_ADDR(ME_PIC_INFO)
+#define ME_SAD_ENOUGH_01 0x1f50 	///../ucode/dos_register.h:1899
+#define P_ME_SAD_ENOUGH_01 		DOS_REG_ADDR(ME_SAD_ENOUGH_01)
+#define ME_SAD_ENOUGH_23 0x1f51 	///../ucode/dos_register.h:1902
+#define P_ME_SAD_ENOUGH_23 		DOS_REG_ADDR(ME_SAD_ENOUGH_23)
+#define ME_STEP0_CLOSE_MV 0x1f52 	///../ucode/dos_register.h:1906
+#define P_ME_STEP0_CLOSE_MV 		DOS_REG_ADDR(ME_STEP0_CLOSE_MV)
+#define ME_F_SKIP_SAD 0x1f53 	///../ucode/dos_register.h:1911
+#define P_ME_F_SKIP_SAD 		DOS_REG_ADDR(ME_F_SKIP_SAD)
+#define ME_F_SKIP_WEIGHT 0x1f54 	///../ucode/dos_register.h:1916
+#define P_ME_F_SKIP_WEIGHT 		DOS_REG_ADDR(ME_F_SKIP_WEIGHT)
+#define ME_MV_MERGE_CTL 0x1f55 	///../ucode/dos_register.h:1935
+#define P_ME_MV_MERGE_CTL 		DOS_REG_ADDR(ME_MV_MERGE_CTL)
+#define ME_MV_WEIGHT_01 0x1f56 	///../ucode/dos_register.h:1940
+#define P_ME_MV_WEIGHT_01 		DOS_REG_ADDR(ME_MV_WEIGHT_01)
+#define ME_MV_WEIGHT_23 0x1f57 	///../ucode/dos_register.h:1945
+#define P_ME_MV_WEIGHT_23 		DOS_REG_ADDR(ME_MV_WEIGHT_23)
+#define ME_SAD_RANGE_INC 0x1f58 	///../ucode/dos_register.h:1950
+#define P_ME_SAD_RANGE_INC 		DOS_REG_ADDR(ME_SAD_RANGE_INC)
+#define ME_SUB_MERGE_CTL 0x1f59 	///../ucode/dos_register.h:1964
+#define P_ME_SUB_MERGE_CTL 		DOS_REG_ADDR(ME_SUB_MERGE_CTL)
+#define ME_SUB_REF_MV_CTL 0x1f5a 	///../ucode/dos_register.h:1971
+#define P_ME_SUB_REF_MV_CTL 		DOS_REG_ADDR(ME_SUB_REF_MV_CTL)
+#define ME_SUB_ANY_WEIGHT_SAD 0x1f5b 	///../ucode/dos_register.h:1976
+#define P_ME_SUB_ANY_WEIGHT_SAD 		DOS_REG_ADDR(ME_SUB_ANY_WEIGHT_SAD)
+#define ME_SUB_FIX_SAD 0x1f5c 	///../ucode/dos_register.h:1981
+#define P_ME_SUB_FIX_SAD 		DOS_REG_ADDR(ME_SUB_FIX_SAD)
+#define ME_SUB_FIX_MIN_SAD 0x1f5d 	///../ucode/dos_register.h:1986
+#define P_ME_SUB_FIX_MIN_SAD 		DOS_REG_ADDR(ME_SUB_FIX_MIN_SAD)
+#define ME_SUB_SNAP_GLITCH 0x1f5e 	///../ucode/dos_register.h:1992
+#define P_ME_SUB_SNAP_GLITCH 		DOS_REG_ADDR(ME_SUB_SNAP_GLITCH)
+#define ME_SUB_ACT_CTL 0x1f5f 	///../ucode/dos_register.h:2002
+#define P_ME_SUB_ACT_CTL 		DOS_REG_ADDR(ME_SUB_ACT_CTL)
+#define HEVC_ASSIST_MMC_CTRL0 0x3001 	///../ucode/dos_register.h:2903
+#define P_HEVC_ASSIST_MMC_CTRL0 		DOS_REG_ADDR(HEVC_ASSIST_MMC_CTRL0)
+#define HEVC_ASSIST_MMC_CTRL1 0x3002 	///../ucode/dos_register.h:2904
+#define P_HEVC_ASSIST_MMC_CTRL1 		DOS_REG_ADDR(HEVC_ASSIST_MMC_CTRL1)
+#define HEVC_ASSIST_GCLK_EN 0x3003 	///../ucode/dos_register.h:2905
+#define P_HEVC_ASSIST_GCLK_EN 		DOS_REG_ADDR(HEVC_ASSIST_GCLK_EN)
+#define HEVC_ASSIST_SW_RESET 0x3004 	///../ucode/dos_register.h:2906
+#define P_HEVC_ASSIST_SW_RESET 		DOS_REG_ADDR(HEVC_ASSIST_SW_RESET)
+#define HEVC_ASSIST_AMR1_INT0 0x3025 	///../ucode/dos_register.h:2907
+#define P_HEVC_ASSIST_AMR1_INT0 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT0)
+#define HEVC_ASSIST_AMR1_INT1 0x3026 	///../ucode/dos_register.h:2908
+#define P_HEVC_ASSIST_AMR1_INT1 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT1)
+#define HEVC_ASSIST_AMR1_INT2 0x3027 	///../ucode/dos_register.h:2909
+#define P_HEVC_ASSIST_AMR1_INT2 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT2)
+#define HEVC_ASSIST_AMR1_INT3 0x3028 	///../ucode/dos_register.h:2910
+#define P_HEVC_ASSIST_AMR1_INT3 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT3)
+#define HEVC_ASSIST_AMR1_INT4 0x3029 	///../ucode/dos_register.h:2911
+#define P_HEVC_ASSIST_AMR1_INT4 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT4)
+#define HEVC_ASSIST_AMR1_INT5 0x302a 	///../ucode/dos_register.h:2912
+#define P_HEVC_ASSIST_AMR1_INT5 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT5)
+#define HEVC_ASSIST_AMR1_INT6 0x302b 	///../ucode/dos_register.h:2913
+#define P_HEVC_ASSIST_AMR1_INT6 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT6)
+#define HEVC_ASSIST_AMR1_INT7 0x302c 	///../ucode/dos_register.h:2914
+#define P_HEVC_ASSIST_AMR1_INT7 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT7)
+#define HEVC_ASSIST_AMR1_INT8 0x302d 	///../ucode/dos_register.h:2915
+#define P_HEVC_ASSIST_AMR1_INT8 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT8)
+#define HEVC_ASSIST_AMR1_INT9 0x302e 	///../ucode/dos_register.h:2916
+#define P_HEVC_ASSIST_AMR1_INT9 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT9)
+#define HEVC_ASSIST_AMR1_INTA 0x302f 	///../ucode/dos_register.h:2917
+#define P_HEVC_ASSIST_AMR1_INTA 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTA)
+#define HEVC_ASSIST_AMR1_INTB 0x3030 	///../ucode/dos_register.h:2918
+#define P_HEVC_ASSIST_AMR1_INTB 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTB)
+#define HEVC_ASSIST_AMR1_INTC 0x3031 	///../ucode/dos_register.h:2919
+#define P_HEVC_ASSIST_AMR1_INTC 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTC)
+#define HEVC_ASSIST_AMR1_INTD 0x3032 	///../ucode/dos_register.h:2920
+#define P_HEVC_ASSIST_AMR1_INTD 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTD)
+#define HEVC_ASSIST_AMR1_INTE 0x3033 	///../ucode/dos_register.h:2921
+#define P_HEVC_ASSIST_AMR1_INTE 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTE)
+#define HEVC_ASSIST_AMR1_INTF 0x3034 	///../ucode/dos_register.h:2922
+#define P_HEVC_ASSIST_AMR1_INTF 		DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTF)
+#define HEVC_ASSIST_AMR2_INT0 0x3035 	///../ucode/dos_register.h:2923
+#define P_HEVC_ASSIST_AMR2_INT0 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT0)
+#define HEVC_ASSIST_AMR2_INT1 0x3036 	///../ucode/dos_register.h:2924
+#define P_HEVC_ASSIST_AMR2_INT1 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT1)
+#define HEVC_ASSIST_AMR2_INT2 0x3037 	///../ucode/dos_register.h:2925
+#define P_HEVC_ASSIST_AMR2_INT2 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT2)
+#define HEVC_ASSIST_AMR2_INT3 0x3038 	///../ucode/dos_register.h:2926
+#define P_HEVC_ASSIST_AMR2_INT3 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT3)
+#define HEVC_ASSIST_AMR2_INT4 0x3039 	///../ucode/dos_register.h:2927
+#define P_HEVC_ASSIST_AMR2_INT4 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT4)
+#define HEVC_ASSIST_AMR2_INT5 0x303a 	///../ucode/dos_register.h:2928
+#define P_HEVC_ASSIST_AMR2_INT5 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT5)
+#define HEVC_ASSIST_AMR2_INT6 0x303b 	///../ucode/dos_register.h:2929
+#define P_HEVC_ASSIST_AMR2_INT6 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT6)
+#define HEVC_ASSIST_AMR2_INT7 0x303c 	///../ucode/dos_register.h:2930
+#define P_HEVC_ASSIST_AMR2_INT7 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT7)
+#define HEVC_ASSIST_AMR2_INT8 0x303d 	///../ucode/dos_register.h:2931
+#define P_HEVC_ASSIST_AMR2_INT8 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT8)
+#define HEVC_ASSIST_AMR2_INT9 0x303e 	///../ucode/dos_register.h:2932
+#define P_HEVC_ASSIST_AMR2_INT9 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT9)
+#define HEVC_ASSIST_AMR2_INTA 0x303f 	///../ucode/dos_register.h:2933
+#define P_HEVC_ASSIST_AMR2_INTA 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTA)
+#define HEVC_ASSIST_AMR2_INTB 0x3040 	///../ucode/dos_register.h:2934
+#define P_HEVC_ASSIST_AMR2_INTB 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTB)
+#define HEVC_ASSIST_AMR2_INTC 0x3041 	///../ucode/dos_register.h:2935
+#define P_HEVC_ASSIST_AMR2_INTC 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTC)
+#define HEVC_ASSIST_AMR2_INTD 0x3042 	///../ucode/dos_register.h:2936
+#define P_HEVC_ASSIST_AMR2_INTD 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTD)
+#define HEVC_ASSIST_AMR2_INTE 0x3043 	///../ucode/dos_register.h:2937
+#define P_HEVC_ASSIST_AMR2_INTE 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTE)
+#define HEVC_ASSIST_AMR2_INTF 0x3044 	///../ucode/dos_register.h:2938
+#define P_HEVC_ASSIST_AMR2_INTF 		DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTF)
+#define HEVC_ASSIST_MBX_SSEL 0x3045 	///../ucode/dos_register.h:2939
+#define P_HEVC_ASSIST_MBX_SSEL 		DOS_REG_ADDR(HEVC_ASSIST_MBX_SSEL)
+#define HEVC_ASSIST_TIMER0_LO 0x3060 	///../ucode/dos_register.h:2940
+#define P_HEVC_ASSIST_TIMER0_LO 		DOS_REG_ADDR(HEVC_ASSIST_TIMER0_LO)
+#define HEVC_ASSIST_TIMER0_HI 0x3061 	///../ucode/dos_register.h:2941
+#define P_HEVC_ASSIST_TIMER0_HI 		DOS_REG_ADDR(HEVC_ASSIST_TIMER0_HI)
+#define HEVC_ASSIST_TIMER1_LO 0x3062 	///../ucode/dos_register.h:2942
+#define P_HEVC_ASSIST_TIMER1_LO 		DOS_REG_ADDR(HEVC_ASSIST_TIMER1_LO)
+#define HEVC_ASSIST_TIMER1_HI 0x3063 	///../ucode/dos_register.h:2943
+#define P_HEVC_ASSIST_TIMER1_HI 		DOS_REG_ADDR(HEVC_ASSIST_TIMER1_HI)
+#define HEVC_ASSIST_DMA_INT 0x3064 	///../ucode/dos_register.h:2944
+#define P_HEVC_ASSIST_DMA_INT 		DOS_REG_ADDR(HEVC_ASSIST_DMA_INT)
+#define HEVC_ASSIST_DMA_INT_MSK 0x3065 	///../ucode/dos_register.h:2945
+#define P_HEVC_ASSIST_DMA_INT_MSK 		DOS_REG_ADDR(HEVC_ASSIST_DMA_INT_MSK)
+#define HEVC_ASSIST_DMA_INT2 0x3066 	///../ucode/dos_register.h:2946
+#define P_HEVC_ASSIST_DMA_INT2 		DOS_REG_ADDR(HEVC_ASSIST_DMA_INT2)
+#define HEVC_ASSIST_DMA_INT_MSK2 0x3067 	///../ucode/dos_register.h:2947
+#define P_HEVC_ASSIST_DMA_INT_MSK2 		DOS_REG_ADDR(HEVC_ASSIST_DMA_INT_MSK2)
+#define HEVC_ASSIST_MBOX0_IRQ_REG 0x3070 	///../ucode/dos_register.h:2948
+#define P_HEVC_ASSIST_MBOX0_IRQ_REG 		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_IRQ_REG)
+#define HEVC_ASSIST_MBOX0_CLR_REG 0x3071 	///../ucode/dos_register.h:2949
+#define P_HEVC_ASSIST_MBOX0_CLR_REG 		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_CLR_REG)
+#define HEVC_ASSIST_MBOX0_MASK 0x3072 	///../ucode/dos_register.h:2950
+#define P_HEVC_ASSIST_MBOX0_MASK 		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_MASK)
+#define HEVC_ASSIST_MBOX0_FIQ_SEL 0x3073 	///../ucode/dos_register.h:2951
+#define P_HEVC_ASSIST_MBOX0_FIQ_SEL 		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_FIQ_SEL)
+#define HEVC_ASSIST_MBOX1_IRQ_REG 0x3074 	///../ucode/dos_register.h:2952
+#define P_HEVC_ASSIST_MBOX1_IRQ_REG 		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_IRQ_REG)
+#define HEVC_ASSIST_MBOX1_CLR_REG 0x3075 	///../ucode/dos_register.h:2953
+#define P_HEVC_ASSIST_MBOX1_CLR_REG 		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_CLR_REG)
+#define HEVC_ASSIST_MBOX1_MASK 0x3076 	///../ucode/dos_register.h:2954
+#define P_HEVC_ASSIST_MBOX1_MASK 		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_MASK)
+#define HEVC_ASSIST_MBOX1_FIQ_SEL 0x3077 	///../ucode/dos_register.h:2955
+#define P_HEVC_ASSIST_MBOX1_FIQ_SEL 		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_FIQ_SEL)
+#define HEVC_ASSIST_MBOX2_IRQ_REG 0x3078 	///../ucode/dos_register.h:2956
+#define P_HEVC_ASSIST_MBOX2_IRQ_REG 		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_IRQ_REG)
+#define HEVC_ASSIST_MBOX2_CLR_REG 0x3079 	///../ucode/dos_register.h:2957
+#define P_HEVC_ASSIST_MBOX2_CLR_REG 		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_CLR_REG)
+#define HEVC_ASSIST_MBOX2_MASK 0x307a 	///../ucode/dos_register.h:2958
+#define P_HEVC_ASSIST_MBOX2_MASK 		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_MASK)
+#define HEVC_ASSIST_MBOX2_FIQ_SEL 0x307b 	///../ucode/dos_register.h:2959
+#define P_HEVC_ASSIST_MBOX2_FIQ_SEL 		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_FIQ_SEL)
+#define HEVC_ASSIST_SCRATCH_0 0x30c0 	///../ucode/dos_register.h:2960
+#define P_HEVC_ASSIST_SCRATCH_0 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_0)
+#define HEVC_ASSIST_SCRATCH_1 0x30c1 	///../ucode/dos_register.h:2961
+#define P_HEVC_ASSIST_SCRATCH_1 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_1)
+#define HEVC_ASSIST_SCRATCH_2 0x30c2 	///../ucode/dos_register.h:2962
+#define P_HEVC_ASSIST_SCRATCH_2 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_2)
+#define HEVC_ASSIST_SCRATCH_3 0x30c3 	///../ucode/dos_register.h:2963
+#define P_HEVC_ASSIST_SCRATCH_3 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_3)
+#define HEVC_ASSIST_SCRATCH_4 0x30c4 	///../ucode/dos_register.h:2964
+#define P_HEVC_ASSIST_SCRATCH_4 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_4)
+#define HEVC_ASSIST_SCRATCH_5 0x30c5 	///../ucode/dos_register.h:2965
+#define P_HEVC_ASSIST_SCRATCH_5 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_5)
+#define HEVC_ASSIST_SCRATCH_6 0x30c6 	///../ucode/dos_register.h:2966
+#define P_HEVC_ASSIST_SCRATCH_6 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_6)
+#define HEVC_ASSIST_SCRATCH_7 0x30c7 	///../ucode/dos_register.h:2967
+#define P_HEVC_ASSIST_SCRATCH_7 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_7)
+#define HEVC_ASSIST_SCRATCH_8 0x30c8 	///../ucode/dos_register.h:2968
+#define P_HEVC_ASSIST_SCRATCH_8 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_8)
+#define HEVC_ASSIST_SCRATCH_9 0x30c9 	///../ucode/dos_register.h:2969
+#define P_HEVC_ASSIST_SCRATCH_9 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_9)
+#define HEVC_ASSIST_SCRATCH_A 0x30ca 	///../ucode/dos_register.h:2970
+#define P_HEVC_ASSIST_SCRATCH_A 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_A)
+#define HEVC_ASSIST_SCRATCH_B 0x30cb 	///../ucode/dos_register.h:2971
+#define P_HEVC_ASSIST_SCRATCH_B 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_B)
+#define HEVC_ASSIST_SCRATCH_C 0x30cc 	///../ucode/dos_register.h:2972
+#define P_HEVC_ASSIST_SCRATCH_C 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_C)
+#define HEVC_ASSIST_SCRATCH_D 0x30cd 	///../ucode/dos_register.h:2973
+#define P_HEVC_ASSIST_SCRATCH_D 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_D)
+#define HEVC_ASSIST_SCRATCH_E 0x30ce 	///../ucode/dos_register.h:2974
+#define P_HEVC_ASSIST_SCRATCH_E 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_E)
+#define HEVC_ASSIST_SCRATCH_F 0x30cf 	///../ucode/dos_register.h:2975
+#define P_HEVC_ASSIST_SCRATCH_F 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_F)
+#define HEVC_ASSIST_SCRATCH_G 0x30d0 	///../ucode/dos_register.h:2976
+#define P_HEVC_ASSIST_SCRATCH_G 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_G)
+#define HEVC_ASSIST_SCRATCH_H 0x30d1 	///../ucode/dos_register.h:2977
+#define P_HEVC_ASSIST_SCRATCH_H 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_H)
+#define HEVC_ASSIST_SCRATCH_I 0x30d2 	///../ucode/dos_register.h:2978
+#define P_HEVC_ASSIST_SCRATCH_I 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_I)
+#define HEVC_ASSIST_SCRATCH_J 0x30d3 	///../ucode/dos_register.h:2979
+#define P_HEVC_ASSIST_SCRATCH_J 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_J)
+#define HEVC_ASSIST_SCRATCH_K 0x30d4 	///../ucode/dos_register.h:2980
+#define P_HEVC_ASSIST_SCRATCH_K 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_K)
+#define HEVC_ASSIST_SCRATCH_L 0x30d5 	///../ucode/dos_register.h:2981
+#define P_HEVC_ASSIST_SCRATCH_L 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_L)
+#define HEVC_ASSIST_SCRATCH_M 0x30d6 	///../ucode/dos_register.h:2982
+#define P_HEVC_ASSIST_SCRATCH_M 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_M)
+#define HEVC_ASSIST_SCRATCH_N 0x30d7 	///../ucode/dos_register.h:2983
+#define P_HEVC_ASSIST_SCRATCH_N 		DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_N)
+#define HEVC_PARSER_VERSION 0x3100 	///../ucode/dos_register.h:3001
+#define P_HEVC_PARSER_VERSION 		DOS_REG_ADDR(HEVC_PARSER_VERSION)
+#define HEVC_STREAM_CONTROL 0x3101 	///../ucode/dos_register.h:3010
+#define P_HEVC_STREAM_CONTROL 		DOS_REG_ADDR(HEVC_STREAM_CONTROL)
+#define HEVC_STREAM_START_ADDR 0x3102 	///../ucode/dos_register.h:3011
+#define P_HEVC_STREAM_START_ADDR 		DOS_REG_ADDR(HEVC_STREAM_START_ADDR)
+#define HEVC_STREAM_END_ADDR 0x3103 	///../ucode/dos_register.h:3012
+#define P_HEVC_STREAM_END_ADDR 		DOS_REG_ADDR(HEVC_STREAM_END_ADDR)
+#define HEVC_STREAM_WR_PTR 0x3104 	///../ucode/dos_register.h:3014
+#define P_HEVC_STREAM_WR_PTR 		DOS_REG_ADDR(HEVC_STREAM_WR_PTR)
+#define HEVC_STREAM_RD_PTR 0x3105 	///../ucode/dos_register.h:3015
+#define P_HEVC_STREAM_RD_PTR 		DOS_REG_ADDR(HEVC_STREAM_RD_PTR)
+#define HEVC_STREAM_LEVEL 0x3106 	///../ucode/dos_register.h:3017
+#define P_HEVC_STREAM_LEVEL 		DOS_REG_ADDR(HEVC_STREAM_LEVEL)
+#define HEVC_STREAM_FIFO_CTL 0x3107 	///../ucode/dos_register.h:3025
+#define P_HEVC_STREAM_FIFO_CTL 		DOS_REG_ADDR(HEVC_STREAM_FIFO_CTL)
+#define HEVC_SHIFT_CONTROL 0x3108 	///../ucode/dos_register.h:3034
+#define P_HEVC_SHIFT_CONTROL 		DOS_REG_ADDR(HEVC_SHIFT_CONTROL)
+#define HEVC_SHIFT_STARTCODE 0x3109 	///../ucode/dos_register.h:3036
+#define P_HEVC_SHIFT_STARTCODE 		DOS_REG_ADDR(HEVC_SHIFT_STARTCODE)
+#define HEVC_SHIFT_EMULATECODE 0x310a 	///../ucode/dos_register.h:3038
+#define P_HEVC_SHIFT_EMULATECODE 		DOS_REG_ADDR(HEVC_SHIFT_EMULATECODE)
+#define HEVC_SHIFT_STATUS 0x310b 	///../ucode/dos_register.h:3042
+#define P_HEVC_SHIFT_STATUS 		DOS_REG_ADDR(HEVC_SHIFT_STATUS)
+#define HEVC_SHIFTED_DATA 0x310c 	///../ucode/dos_register.h:3044
+#define P_HEVC_SHIFTED_DATA 		DOS_REG_ADDR(HEVC_SHIFTED_DATA)
+#define HEVC_SHIFT_BYTE_COUNT 0x310d 	///../ucode/dos_register.h:3046
+#define P_HEVC_SHIFT_BYTE_COUNT 		DOS_REG_ADDR(HEVC_SHIFT_BYTE_COUNT)
+#define HEVC_SHIFT_COMMAND 0x310e 	///../ucode/dos_register.h:3054
+#define P_HEVC_SHIFT_COMMAND 		DOS_REG_ADDR(HEVC_SHIFT_COMMAND)
+#define HEVC_ELEMENT_RESULT 0x310f 	///../ucode/dos_register.h:3058
+#define P_HEVC_ELEMENT_RESULT 		DOS_REG_ADDR(HEVC_ELEMENT_RESULT)
+#define HEVC_CABAC_CONTROL 0x3110 	///../ucode/dos_register.h:3066
+#define P_HEVC_CABAC_CONTROL 		DOS_REG_ADDR(HEVC_CABAC_CONTROL)
+#define HEVC_PARSER_SLICE_INFO 0x3111 	///../ucode/dos_register.h:3077
+#define P_HEVC_PARSER_SLICE_INFO 		DOS_REG_ADDR(HEVC_PARSER_SLICE_INFO)
+#define HEVC_PARSER_CMD_WRITE 0x3112 	///../ucode/dos_register.h:3080
+#define P_HEVC_PARSER_CMD_WRITE 		DOS_REG_ADDR(HEVC_PARSER_CMD_WRITE)
+#define HEVC_PARSER_CORE_CONTROL 0x3113 	///../ucode/dos_register.h:3085
+#define P_HEVC_PARSER_CORE_CONTROL 		DOS_REG_ADDR(HEVC_PARSER_CORE_CONTROL)
+#define HEVC_PARSER_CMD_FETCH 0x3114 	///../ucode/dos_register.h:3093
+#define P_HEVC_PARSER_CMD_FETCH 		DOS_REG_ADDR(HEVC_PARSER_CMD_FETCH)
+#define HEVC_PARSER_CMD_STATUS 0x3115 	///../ucode/dos_register.h:3097
+#define P_HEVC_PARSER_CMD_STATUS 		DOS_REG_ADDR(HEVC_PARSER_CMD_STATUS)
+#define HEVC_PARSER_LCU_INFO 0x3116 	///../ucode/dos_register.h:3105
+#define P_HEVC_PARSER_LCU_INFO 		DOS_REG_ADDR(HEVC_PARSER_LCU_INFO)
+#define HEVC_PARSER_HEADER_INFO 0x3117 	///../ucode/dos_register.h:3119
+#define P_HEVC_PARSER_HEADER_INFO 		DOS_REG_ADDR(HEVC_PARSER_HEADER_INFO)
+#define HEVC_PARSER_RESULT_0 0x3118 	///../ucode/dos_register.h:3120
+#define P_HEVC_PARSER_RESULT_0 		DOS_REG_ADDR(HEVC_PARSER_RESULT_0)
+#define HEVC_PARSER_RESULT_1 0x3119 	///../ucode/dos_register.h:3121
+#define P_HEVC_PARSER_RESULT_1 		DOS_REG_ADDR(HEVC_PARSER_RESULT_1)
+#define HEVC_PARSER_RESULT_2 0x311a 	///../ucode/dos_register.h:3122
+#define P_HEVC_PARSER_RESULT_2 		DOS_REG_ADDR(HEVC_PARSER_RESULT_2)
+#define HEVC_PARSER_RESULT_3 0x311b 	///../ucode/dos_register.h:3123
+#define P_HEVC_PARSER_RESULT_3 		DOS_REG_ADDR(HEVC_PARSER_RESULT_3)
+#define HEVC_CABAC_TOP_INFO 0x311c 	///../ucode/dos_register.h:3130
+#define P_HEVC_CABAC_TOP_INFO 		DOS_REG_ADDR(HEVC_CABAC_TOP_INFO)
+#define HEVC_CABAC_TOP_INFO_2 0x311d 	///../ucode/dos_register.h:3132
+#define P_HEVC_CABAC_TOP_INFO_2 		DOS_REG_ADDR(HEVC_CABAC_TOP_INFO_2)
+#define HEVC_CABAC_LEFT_INFO 0x311e 	///../ucode/dos_register.h:3139
+#define P_HEVC_CABAC_LEFT_INFO 		DOS_REG_ADDR(HEVC_CABAC_LEFT_INFO)
+#define HEVC_CABAC_LEFT_INFO_2 0x311f 	///../ucode/dos_register.h:3141
+#define P_HEVC_CABAC_LEFT_INFO_2 		DOS_REG_ADDR(HEVC_CABAC_LEFT_INFO_2)
+#define HEVC_PARSER_INT_CONTROL 0x3120 	///../ucode/dos_register.h:3158
+#define P_HEVC_PARSER_INT_CONTROL 		DOS_REG_ADDR(HEVC_PARSER_INT_CONTROL)
+#define HEVC_PARSER_INT_STATUS 0x3121 	///../ucode/dos_register.h:3164
+#define P_HEVC_PARSER_INT_STATUS 		DOS_REG_ADDR(HEVC_PARSER_INT_STATUS)
+#define HEVC_PARSER_IF_CONTROL 0x3122 	///../ucode/dos_register.h:3174
+#define P_HEVC_PARSER_IF_CONTROL 		DOS_REG_ADDR(HEVC_PARSER_IF_CONTROL)
+#define HEVC_PARSER_PICTURE_SIZE 0x3123 	///../ucode/dos_register.h:3177
+#define P_HEVC_PARSER_PICTURE_SIZE 		DOS_REG_ADDR(HEVC_PARSER_PICTURE_SIZE)
+#define HEVC_PARSER_LCU_START 0x3124 	///../ucode/dos_register.h:3182
+#define P_HEVC_PARSER_LCU_START 		DOS_REG_ADDR(HEVC_PARSER_LCU_START)
+#define HEVC_PARSER_HEADER_INFO2 0x3125 	///../ucode/dos_register.h:3189
+#define P_HEVC_PARSER_HEADER_INFO2 		DOS_REG_ADDR(HEVC_PARSER_HEADER_INFO2)
+#define HEVC_PARSER_QUANT_READ 0x3126 	///../ucode/dos_register.h:3200
+#define P_HEVC_PARSER_QUANT_READ 		DOS_REG_ADDR(HEVC_PARSER_QUANT_READ)
+#define HEVC_PARSER_RESERVED_27 0x3127 	///../ucode/dos_register.h:3201
+#define P_HEVC_PARSER_RESERVED_27 		DOS_REG_ADDR(HEVC_PARSER_RESERVED_27)
+#define HEVC_PARSER_CMD_SKIP_0 0x3128 	///../ucode/dos_register.h:3204
+#define P_HEVC_PARSER_CMD_SKIP_0 		DOS_REG_ADDR(HEVC_PARSER_CMD_SKIP_0)
+#define HEVC_PARSER_CMD_SKIP_1 0x3129 	///../ucode/dos_register.h:3209
+#define P_HEVC_PARSER_CMD_SKIP_1 		DOS_REG_ADDR(HEVC_PARSER_CMD_SKIP_1)
+#define HEVC_PARSER_CMD_SKIP_2 0x312a 	///../ucode/dos_register.h:3214
+#define P_HEVC_PARSER_CMD_SKIP_2 		DOS_REG_ADDR(HEVC_PARSER_CMD_SKIP_2)
+#define HEVC_PARSER_MANUAL_CMD 0x312b 	///../ucode/dos_register.h:3228
+#define P_HEVC_PARSER_MANUAL_CMD 		DOS_REG_ADDR(HEVC_PARSER_MANUAL_CMD)
+#define HEVC_PARSER_MEM_RD_ADDR 0x312c 	///../ucode/dos_register.h:3233
+#define P_HEVC_PARSER_MEM_RD_ADDR 		DOS_REG_ADDR(HEVC_PARSER_MEM_RD_ADDR)
+#define HEVC_PARSER_MEM_WR_ADDR 0x312d 	///../ucode/dos_register.h:3238
+#define P_HEVC_PARSER_MEM_WR_ADDR 		DOS_REG_ADDR(HEVC_PARSER_MEM_WR_ADDR)
+#define HEVC_PARSER_MEM_RW_DATA 0x312e 	///../ucode/dos_register.h:3240
+#define P_HEVC_PARSER_MEM_RW_DATA 		DOS_REG_ADDR(HEVC_PARSER_MEM_RW_DATA)
+#define HEVC_SAO_IF_STATUS 0x3130 	///../ucode/dos_register.h:3247
+#define P_HEVC_SAO_IF_STATUS 		DOS_REG_ADDR(HEVC_SAO_IF_STATUS)
+#define HEVC_SAO_IF_DATA_Y 0x3131 	///../ucode/dos_register.h:3255
+#define P_HEVC_SAO_IF_DATA_Y 		DOS_REG_ADDR(HEVC_SAO_IF_DATA_Y)
+#define HEVC_SAO_IF_DATA_U 0x3132 	///../ucode/dos_register.h:3256
+#define P_HEVC_SAO_IF_DATA_U 		DOS_REG_ADDR(HEVC_SAO_IF_DATA_U)
+#define HEVC_SAO_IF_DATA_V 0x3133 	///../ucode/dos_register.h:3257
+#define P_HEVC_SAO_IF_DATA_V 		DOS_REG_ADDR(HEVC_SAO_IF_DATA_V)
+#define HEVC_STREAM_SWAP_ADDR 0x3134 	///../ucode/dos_register.h:3258
+#define P_HEVC_STREAM_SWAP_ADDR 		DOS_REG_ADDR(HEVC_STREAM_SWAP_ADDR)
+#define HEVC_STREAM_SWAP_CTRL 0x3135 	///../ucode/dos_register.h:3267
+#define P_HEVC_STREAM_SWAP_CTRL 		DOS_REG_ADDR(HEVC_STREAM_SWAP_CTRL)
+#define HEVC_PARSER_DEBUG_IDX 0x313e 	///../ucode/dos_register.h:3269
+#define P_HEVC_PARSER_DEBUG_IDX 		DOS_REG_ADDR(HEVC_PARSER_DEBUG_IDX)
+#define HEVC_PARSER_DEBUG_DAT 0x313f 	///../ucode/dos_register.h:3271
+#define P_HEVC_PARSER_DEBUG_DAT 		DOS_REG_ADDR(HEVC_PARSER_DEBUG_DAT)
+#define HEVC_MPRED_VERSION 0x3200 	///../ucode/dos_register.h:3284
+#define P_HEVC_MPRED_VERSION 		DOS_REG_ADDR(HEVC_MPRED_VERSION)
+#define HEVC_MPRED_CTRL0 0x3201 	///../ucode/dos_register.h:3286
+#define P_HEVC_MPRED_CTRL0 		DOS_REG_ADDR(HEVC_MPRED_CTRL0)
+#define HEVC_MPRED_CTRL1 0x3202 	///../ucode/dos_register.h:3306
+#define P_HEVC_MPRED_CTRL1 		DOS_REG_ADDR(HEVC_MPRED_CTRL1)
+#define HEVC_MPRED_INT_EN 0x3203 	///../ucode/dos_register.h:3310
+#define P_HEVC_MPRED_INT_EN 		DOS_REG_ADDR(HEVC_MPRED_INT_EN)
+#define HEVC_MPRED_INT_STATUS 0x3204 	///../ucode/dos_register.h:3317
+#define P_HEVC_MPRED_INT_STATUS 		DOS_REG_ADDR(HEVC_MPRED_INT_STATUS)
+#define HEVC_MPRED_PIC_SIZE 0x3205 	///../ucode/dos_register.h:3320
+#define P_HEVC_MPRED_PIC_SIZE 		DOS_REG_ADDR(HEVC_MPRED_PIC_SIZE)
+#define HEVC_MPRED_PIC_SIZE_LCU 0x3206 	///../ucode/dos_register.h:3323
+#define P_HEVC_MPRED_PIC_SIZE_LCU 		DOS_REG_ADDR(HEVC_MPRED_PIC_SIZE_LCU)
+#define HEVC_MPRED_TILE_START 0x3207 	///../ucode/dos_register.h:3326
+#define P_HEVC_MPRED_TILE_START 		DOS_REG_ADDR(HEVC_MPRED_TILE_START)
+#define HEVC_MPRED_TILE_SIZE_LCU 0x3208 	///../ucode/dos_register.h:3329
+#define P_HEVC_MPRED_TILE_SIZE_LCU 		DOS_REG_ADDR(HEVC_MPRED_TILE_SIZE_LCU)
+#define HEVC_MPRED_REF_NUM 0x3209 	///../ucode/dos_register.h:3332
+#define P_HEVC_MPRED_REF_NUM 		DOS_REG_ADDR(HEVC_MPRED_REF_NUM)
+#define HEVC_MPRED_LT_REF 0x320a 	///../ucode/dos_register.h:3337
+#define P_HEVC_MPRED_LT_REF 		DOS_REG_ADDR(HEVC_MPRED_LT_REF)
+#define HEVC_MPRED_LT_COLREF 0x320b 	///../ucode/dos_register.h:3346
+#define P_HEVC_MPRED_LT_COLREF 		DOS_REG_ADDR(HEVC_MPRED_LT_COLREF)
+#define HEVC_MPRED_REF_EN_L0 0x320c 	///../ucode/dos_register.h:3355
+#define P_HEVC_MPRED_REF_EN_L0 		DOS_REG_ADDR(HEVC_MPRED_REF_EN_L0)
+#define HEVC_MPRED_REF_EN_L1 0x320d 	///../ucode/dos_register.h:3360
+#define P_HEVC_MPRED_REF_EN_L1 		DOS_REG_ADDR(HEVC_MPRED_REF_EN_L1)
+#define HEVC_MPRED_COLREF_EN_L0 0x320e 	///../ucode/dos_register.h:3365
+#define P_HEVC_MPRED_COLREF_EN_L0 		DOS_REG_ADDR(HEVC_MPRED_COLREF_EN_L0)
+#define HEVC_MPRED_COLREF_EN_L1 0x320f 	///../ucode/dos_register.h:3370
+#define P_HEVC_MPRED_COLREF_EN_L1 		DOS_REG_ADDR(HEVC_MPRED_COLREF_EN_L1)
+#define HEVC_MPRED_AXI_WCTRL 0x3210 	///../ucode/dos_register.h:3375
+#define P_HEVC_MPRED_AXI_WCTRL 		DOS_REG_ADDR(HEVC_MPRED_AXI_WCTRL)
+#define HEVC_MPRED_AXI_RCTRL 0x3211 	///../ucode/dos_register.h:3377
+#define P_HEVC_MPRED_AXI_RCTRL 		DOS_REG_ADDR(HEVC_MPRED_AXI_RCTRL)
+#define HEVC_MPRED_ABV_START_ADDR 0x3212 	///../ucode/dos_register.h:3379
+#define P_HEVC_MPRED_ABV_START_ADDR 		DOS_REG_ADDR(HEVC_MPRED_ABV_START_ADDR)
+#define HEVC_MPRED_MV_WPTR 0x3213 	///../ucode/dos_register.h:3380
+#define P_HEVC_MPRED_MV_WPTR 		DOS_REG_ADDR(HEVC_MPRED_MV_WPTR)
+#define HEVC_MPRED_MV_RPTR 0x3214 	///../ucode/dos_register.h:3381
+#define P_HEVC_MPRED_MV_RPTR 		DOS_REG_ADDR(HEVC_MPRED_MV_RPTR)
+#define HEVC_MPRED_MV_WR_ROW_JUMP 0x3215 	///../ucode/dos_register.h:3382
+#define P_HEVC_MPRED_MV_WR_ROW_JUMP 		DOS_REG_ADDR(HEVC_MPRED_MV_WR_ROW_JUMP)
+#define HEVC_MPRED_MV_RD_ROW_JUMP 0x3216 	///../ucode/dos_register.h:3383
+#define P_HEVC_MPRED_MV_RD_ROW_JUMP 		DOS_REG_ADDR(HEVC_MPRED_MV_RD_ROW_JUMP)
+#define HEVC_MPRED_CURR_LCU 0x3217 	///../ucode/dos_register.h:3384
+#define P_HEVC_MPRED_CURR_LCU 		DOS_REG_ADDR(HEVC_MPRED_CURR_LCU)
+#define HEVC_MPRED_L0_REF00_POC 0x3220 	///../ucode/dos_register.h:3385
+#define P_HEVC_MPRED_L0_REF00_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF00_POC)
+#define HEVC_MPRED_L0_REF01_POC 0x3221 	///../ucode/dos_register.h:3386
+#define P_HEVC_MPRED_L0_REF01_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF01_POC)
+#define HEVC_MPRED_L0_REF02_POC 0x3222 	///../ucode/dos_register.h:3387
+#define P_HEVC_MPRED_L0_REF02_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF02_POC)
+#define HEVC_MPRED_L0_REF03_POC 0x3223 	///../ucode/dos_register.h:3388
+#define P_HEVC_MPRED_L0_REF03_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF03_POC)
+#define HEVC_MPRED_L0_REF04_POC 0x3224 	///../ucode/dos_register.h:3389
+#define P_HEVC_MPRED_L0_REF04_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF04_POC)
+#define HEVC_MPRED_L0_REF05_POC 0x3225 	///../ucode/dos_register.h:3390
+#define P_HEVC_MPRED_L0_REF05_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF05_POC)
+#define HEVC_MPRED_L0_REF06_POC 0x3226 	///../ucode/dos_register.h:3391
+#define P_HEVC_MPRED_L0_REF06_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF06_POC)
+#define HEVC_MPRED_L0_REF07_POC 0x3227 	///../ucode/dos_register.h:3392
+#define P_HEVC_MPRED_L0_REF07_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF07_POC)
+#define HEVC_MPRED_L0_REF08_POC 0x3228 	///../ucode/dos_register.h:3393
+#define P_HEVC_MPRED_L0_REF08_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF08_POC)
+#define HEVC_MPRED_L0_REF09_POC 0x3229 	///../ucode/dos_register.h:3394
+#define P_HEVC_MPRED_L0_REF09_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF09_POC)
+#define HEVC_MPRED_L0_REF10_POC 0x322a 	///../ucode/dos_register.h:3395
+#define P_HEVC_MPRED_L0_REF10_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF10_POC)
+#define HEVC_MPRED_L0_REF11_POC 0x322b 	///../ucode/dos_register.h:3396
+#define P_HEVC_MPRED_L0_REF11_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF11_POC)
+#define HEVC_MPRED_L0_REF12_POC 0x322c 	///../ucode/dos_register.h:3397
+#define P_HEVC_MPRED_L0_REF12_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF12_POC)
+#define HEVC_MPRED_L0_REF13_POC 0x322d 	///../ucode/dos_register.h:3398
+#define P_HEVC_MPRED_L0_REF13_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF13_POC)
+#define HEVC_MPRED_L0_REF14_POC 0x322e 	///../ucode/dos_register.h:3399
+#define P_HEVC_MPRED_L0_REF14_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF14_POC)
+#define HEVC_MPRED_L0_REF15_POC 0x322f 	///../ucode/dos_register.h:3400
+#define P_HEVC_MPRED_L0_REF15_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_REF15_POC)
+#define HEVC_MPRED_L1_REF00_POC 0x3230 	///../ucode/dos_register.h:3401
+#define P_HEVC_MPRED_L1_REF00_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF00_POC)
+#define HEVC_MPRED_L1_REF01_POC 0x3231 	///../ucode/dos_register.h:3402
+#define P_HEVC_MPRED_L1_REF01_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF01_POC)
+#define HEVC_MPRED_L1_REF02_POC 0x3232 	///../ucode/dos_register.h:3403
+#define P_HEVC_MPRED_L1_REF02_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF02_POC)
+#define HEVC_MPRED_L1_REF03_POC 0x3233 	///../ucode/dos_register.h:3404
+#define P_HEVC_MPRED_L1_REF03_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF03_POC)
+#define HEVC_MPRED_L1_REF04_POC 0x3234 	///../ucode/dos_register.h:3405
+#define P_HEVC_MPRED_L1_REF04_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF04_POC)
+#define HEVC_MPRED_L1_REF05_POC 0x3235 	///../ucode/dos_register.h:3406
+#define P_HEVC_MPRED_L1_REF05_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF05_POC)
+#define HEVC_MPRED_L1_REF06_POC 0x3236 	///../ucode/dos_register.h:3407
+#define P_HEVC_MPRED_L1_REF06_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF06_POC)
+#define HEVC_MPRED_L1_REF07_POC 0x3237 	///../ucode/dos_register.h:3408
+#define P_HEVC_MPRED_L1_REF07_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF07_POC)
+#define HEVC_MPRED_L1_REF08_POC 0x3238 	///../ucode/dos_register.h:3409
+#define P_HEVC_MPRED_L1_REF08_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF08_POC)
+#define HEVC_MPRED_L1_REF09_POC 0x3239 	///../ucode/dos_register.h:3410
+#define P_HEVC_MPRED_L1_REF09_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF09_POC)
+#define HEVC_MPRED_L1_REF10_POC 0x323a 	///../ucode/dos_register.h:3411
+#define P_HEVC_MPRED_L1_REF10_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF10_POC)
+#define HEVC_MPRED_L1_REF11_POC 0x323b 	///../ucode/dos_register.h:3412
+#define P_HEVC_MPRED_L1_REF11_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF11_POC)
+#define HEVC_MPRED_L1_REF12_POC 0x323c 	///../ucode/dos_register.h:3413
+#define P_HEVC_MPRED_L1_REF12_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF12_POC)
+#define HEVC_MPRED_L1_REF13_POC 0x323d 	///../ucode/dos_register.h:3414
+#define P_HEVC_MPRED_L1_REF13_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF13_POC)
+#define HEVC_MPRED_L1_REF14_POC 0x323e 	///../ucode/dos_register.h:3415
+#define P_HEVC_MPRED_L1_REF14_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF14_POC)
+#define HEVC_MPRED_L1_REF15_POC 0x323f 	///../ucode/dos_register.h:3416
+#define P_HEVC_MPRED_L1_REF15_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_REF15_POC)
+#define HEVC_MPRED_L0_COLREF00_POC 0x3240 	///../ucode/dos_register.h:3417
+#define P_HEVC_MPRED_L0_COLREF00_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF00_POC)
+#define HEVC_MPRED_L0_COLREF01_POC 0x3241 	///../ucode/dos_register.h:3418
+#define P_HEVC_MPRED_L0_COLREF01_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF01_POC)
+#define HEVC_MPRED_L0_COLREF02_POC 0x3242 	///../ucode/dos_register.h:3419
+#define P_HEVC_MPRED_L0_COLREF02_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF02_POC)
+#define HEVC_MPRED_L0_COLREF03_POC 0x3243 	///../ucode/dos_register.h:3420
+#define P_HEVC_MPRED_L0_COLREF03_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF03_POC)
+#define HEVC_MPRED_L0_COLREF04_POC 0x3244 	///../ucode/dos_register.h:3421
+#define P_HEVC_MPRED_L0_COLREF04_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF04_POC)
+#define HEVC_MPRED_L0_COLREF05_POC 0x3245 	///../ucode/dos_register.h:3422
+#define P_HEVC_MPRED_L0_COLREF05_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF05_POC)
+#define HEVC_MPRED_L0_COLREF06_POC 0x3246 	///../ucode/dos_register.h:3423
+#define P_HEVC_MPRED_L0_COLREF06_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF06_POC)
+#define HEVC_MPRED_L0_COLREF07_POC 0x3247 	///../ucode/dos_register.h:3424
+#define P_HEVC_MPRED_L0_COLREF07_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF07_POC)
+#define HEVC_MPRED_L0_COLREF08_POC 0x3248 	///../ucode/dos_register.h:3425
+#define P_HEVC_MPRED_L0_COLREF08_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF08_POC)
+#define HEVC_MPRED_L0_COLREF09_POC 0x3249 	///../ucode/dos_register.h:3426
+#define P_HEVC_MPRED_L0_COLREF09_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF09_POC)
+#define HEVC_MPRED_L0_COLREF10_POC 0x324a 	///../ucode/dos_register.h:3427
+#define P_HEVC_MPRED_L0_COLREF10_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF10_POC)
+#define HEVC_MPRED_L0_COLREF11_POC 0x324b 	///../ucode/dos_register.h:3428
+#define P_HEVC_MPRED_L0_COLREF11_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF11_POC)
+#define HEVC_MPRED_L0_COLREF12_POC 0x324c 	///../ucode/dos_register.h:3429
+#define P_HEVC_MPRED_L0_COLREF12_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF12_POC)
+#define HEVC_MPRED_L0_COLREF13_POC 0x324d 	///../ucode/dos_register.h:3430
+#define P_HEVC_MPRED_L0_COLREF13_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF13_POC)
+#define HEVC_MPRED_L0_COLREF14_POC 0x324e 	///../ucode/dos_register.h:3431
+#define P_HEVC_MPRED_L0_COLREF14_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF14_POC)
+#define HEVC_MPRED_L0_COLREF15_POC 0x324f 	///../ucode/dos_register.h:3432
+#define P_HEVC_MPRED_L0_COLREF15_POC 		DOS_REG_ADDR(HEVC_MPRED_L0_COLREF15_POC)
+#define HEVC_MPRED_L1_COLREF00_POC 0x3250 	///../ucode/dos_register.h:3433
+#define P_HEVC_MPRED_L1_COLREF00_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF00_POC)
+#define HEVC_MPRED_L1_COLREF01_POC 0x3251 	///../ucode/dos_register.h:3434
+#define P_HEVC_MPRED_L1_COLREF01_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF01_POC)
+#define HEVC_MPRED_L1_COLREF02_POC 0x3252 	///../ucode/dos_register.h:3435
+#define P_HEVC_MPRED_L1_COLREF02_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF02_POC)
+#define HEVC_MPRED_L1_COLREF03_POC 0x3253 	///../ucode/dos_register.h:3436
+#define P_HEVC_MPRED_L1_COLREF03_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF03_POC)
+#define HEVC_MPRED_L1_COLREF04_POC 0x3254 	///../ucode/dos_register.h:3437
+#define P_HEVC_MPRED_L1_COLREF04_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF04_POC)
+#define HEVC_MPRED_L1_COLREF05_POC 0x3255 	///../ucode/dos_register.h:3438
+#define P_HEVC_MPRED_L1_COLREF05_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF05_POC)
+#define HEVC_MPRED_L1_COLREF06_POC 0x3256 	///../ucode/dos_register.h:3439
+#define P_HEVC_MPRED_L1_COLREF06_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF06_POC)
+#define HEVC_MPRED_L1_COLREF07_POC 0x3257 	///../ucode/dos_register.h:3440
+#define P_HEVC_MPRED_L1_COLREF07_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF07_POC)
+#define HEVC_MPRED_L1_COLREF08_POC 0x3258 	///../ucode/dos_register.h:3441
+#define P_HEVC_MPRED_L1_COLREF08_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF08_POC)
+#define HEVC_MPRED_L1_COLREF09_POC 0x3259 	///../ucode/dos_register.h:3442
+#define P_HEVC_MPRED_L1_COLREF09_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF09_POC)
+#define HEVC_MPRED_L1_COLREF10_POC 0x325a 	///../ucode/dos_register.h:3443
+#define P_HEVC_MPRED_L1_COLREF10_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF10_POC)
+#define HEVC_MPRED_L1_COLREF11_POC 0x325b 	///../ucode/dos_register.h:3444
+#define P_HEVC_MPRED_L1_COLREF11_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF11_POC)
+#define HEVC_MPRED_L1_COLREF12_POC 0x325c 	///../ucode/dos_register.h:3445
+#define P_HEVC_MPRED_L1_COLREF12_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF12_POC)
+#define HEVC_MPRED_L1_COLREF13_POC 0x325d 	///../ucode/dos_register.h:3446
+#define P_HEVC_MPRED_L1_COLREF13_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF13_POC)
+#define HEVC_MPRED_L1_COLREF14_POC 0x325e 	///../ucode/dos_register.h:3447
+#define P_HEVC_MPRED_L1_COLREF14_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF14_POC)
+#define HEVC_MPRED_L1_COLREF15_POC 0x325f 	///../ucode/dos_register.h:3448
+#define P_HEVC_MPRED_L1_COLREF15_POC 		DOS_REG_ADDR(HEVC_MPRED_L1_COLREF15_POC)
+#define HEVC_MPRED_CUR_POC 0x3260 	///../ucode/dos_register.h:3449
+#define P_HEVC_MPRED_CUR_POC 		DOS_REG_ADDR(HEVC_MPRED_CUR_POC)
+#define HEVC_MPRED_COL_POC 0x3261 	///../ucode/dos_register.h:3450
+#define P_HEVC_MPRED_COL_POC 		DOS_REG_ADDR(HEVC_MPRED_COL_POC)
+#define HEVC_MPRED_MV_RD_END_ADDR 0x3262 	///../ucode/dos_register.h:3451
+#define P_HEVC_MPRED_MV_RD_END_ADDR 		DOS_REG_ADDR(HEVC_MPRED_MV_RD_END_ADDR)
+#define HEVCD_IPP_TOP_CNTL 0x3400 	///../ucode/dos_register.h:3467
+#define P_HEVCD_IPP_TOP_CNTL 		DOS_REG_ADDR(HEVCD_IPP_TOP_CNTL)
+#define HEVCD_IPP_TOP_STATUS 0x3401 	///../ucode/dos_register.h:3471
+#define P_HEVCD_IPP_TOP_STATUS 		DOS_REG_ADDR(HEVCD_IPP_TOP_STATUS)
+#define HEVCD_IPP_TOP_FRMCONFIG 0x3402 	///../ucode/dos_register.h:3476
+#define P_HEVCD_IPP_TOP_FRMCONFIG 		DOS_REG_ADDR(HEVCD_IPP_TOP_FRMCONFIG)
+#define HEVCD_IPP_TOP_TILECONFIG1 0x3403 	///../ucode/dos_register.h:3479
+#define P_HEVCD_IPP_TOP_TILECONFIG1 		DOS_REG_ADDR(HEVCD_IPP_TOP_TILECONFIG1)
+#define HEVCD_IPP_TOP_TILECONFIG2 0x3404 	///../ucode/dos_register.h:3482
+#define P_HEVCD_IPP_TOP_TILECONFIG2 		DOS_REG_ADDR(HEVCD_IPP_TOP_TILECONFIG2)
+#define HEVCD_IPP_TOP_TILECONFIG3 0x3405 	///../ucode/dos_register.h:3485
+#define P_HEVCD_IPP_TOP_TILECONFIG3 		DOS_REG_ADDR(HEVCD_IPP_TOP_TILECONFIG3)
+#define HEVCD_IPP_TOP_LCUCONFIG 0x3406 	///../ucode/dos_register.h:3488
+#define P_HEVCD_IPP_TOP_LCUCONFIG 		DOS_REG_ADDR(HEVCD_IPP_TOP_LCUCONFIG)
+#define HEVCD_IPP_TOP_FRMCTL 0x3407 	///../ucode/dos_register.h:3490
+#define P_HEVCD_IPP_TOP_FRMCTL 		DOS_REG_ADDR(HEVCD_IPP_TOP_FRMCTL)
+#define HEVCD_IPP_CONFIG 0x3408 	///../ucode/dos_register.h:3492
+#define P_HEVCD_IPP_CONFIG 		DOS_REG_ADDR(HEVCD_IPP_CONFIG)
+#define HEVCD_IPP_LINEBUFF_BASE 0x3409 	///../ucode/dos_register.h:3496
+#define P_HEVCD_IPP_LINEBUFF_BASE 		DOS_REG_ADDR(HEVCD_IPP_LINEBUFF_BASE)
+#define HEVCD_IPP_INTR_MASK 0x340a 	///../ucode/dos_register.h:3499
+#define P_HEVCD_IPP_INTR_MASK 		DOS_REG_ADDR(HEVCD_IPP_INTR_MASK)
+#define HEVCD_IPP_SWMPREDIF_CONFIG 0x3410 	///../ucode/dos_register.h:3504
+#define P_HEVCD_IPP_SWMPREDIF_CONFIG 		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_CONFIG)
+#define HEVCD_IPP_SWMPREDIF_STATUS 0x3411 	///../ucode/dos_register.h:3507
+#define P_HEVCD_IPP_SWMPREDIF_STATUS 		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_STATUS)
+#define HEVCD_IPP_SWMPREDIF_CTBINFO 0x3412 	///../ucode/dos_register.h:3512
+#define P_HEVCD_IPP_SWMPREDIF_CTBINFO 		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_CTBINFO)
+#define HEVCD_IPP_SWMPREDIF_PUINFO0 0x3413 	///../ucode/dos_register.h:3518
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO0 		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO0)
+#define HEVCD_IPP_SWMPREDIF_PUINFO1 0x3414 	///../ucode/dos_register.h:3520
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO1 		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO1)
+#define HEVCD_IPP_SWMPREDIF_PUINFO2 0x3415 	///../ucode/dos_register.h:3522
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO2 		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO2)
+#define HEVCD_IPP_SWMPREDIF_PUINFO3 0x3416 	///../ucode/dos_register.h:3524
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO3 		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO3)
+#define HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR 0x3460 	///../ucode/dos_register.h:3532
+#define P_HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR 		DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR)
+#define HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR 0x3461 	///../ucode/dos_register.h:3534
+#define P_HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR 		DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR)
+#define HEVCD_MPP_ANC2AXI_TBL_WDATA_ADDR 0x3462 	///../ucode/dos_register.h:3538
+#define P_HEVCD_MPP_ANC2AXI_TBL_WDATA_ADDR 		DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_WDATA_ADDR)
+#define HEVCD_MPP_ANC2AXI_TBL_RDATA_ADDR 0x3463 	///../ucode/dos_register.h:3540
+#define P_HEVCD_MPP_ANC2AXI_TBL_RDATA_ADDR 		DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_RDATA_ADDR)
+#define HEVCD_MPP_WEIGHTPRED_CNTL_ADDR 0x347b 	///../ucode/dos_register.h:3542
+#define P_HEVCD_MPP_WEIGHTPRED_CNTL_ADDR 		DOS_REG_ADDR(HEVCD_MPP_WEIGHTPRED_CNTL_ADDR)
+#define HEVCD_MPP_L0_WEIGHT_FLAG_ADDR 0x347c 	///../ucode/dos_register.h:3544
+#define P_HEVCD_MPP_L0_WEIGHT_FLAG_ADDR 		DOS_REG_ADDR(HEVCD_MPP_L0_WEIGHT_FLAG_ADDR)
+#define HEVCD_MPP_L1_WEIGHT_FLAG_ADDR 0x347d 	///../ucode/dos_register.h:3547
+#define P_HEVCD_MPP_L1_WEIGHT_FLAG_ADDR 		DOS_REG_ADDR(HEVCD_MPP_L1_WEIGHT_FLAG_ADDR)
+#define HEVCD_MPP_YLOG2WGHTDENOM_ADDR 0x347e 	///../ucode/dos_register.h:3550
+#define P_HEVCD_MPP_YLOG2WGHTDENOM_ADDR 		DOS_REG_ADDR(HEVCD_MPP_YLOG2WGHTDENOM_ADDR)
+#define HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR 0x347f 	///../ucode/dos_register.h:3552
+#define P_HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR 		DOS_REG_ADDR(HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR)
+#define HEVCD_MPP_WEIGHT_ADDR 0x3480 	///../ucode/dos_register.h:3554
+#define P_HEVCD_MPP_WEIGHT_ADDR 		DOS_REG_ADDR(HEVCD_MPP_WEIGHT_ADDR)
+#define HEVCD_MPP_WEIGHT_DATA 0x3481 	///../ucode/dos_register.h:3563
+#define P_HEVCD_MPP_WEIGHT_DATA 		DOS_REG_ADDR(HEVCD_MPP_WEIGHT_DATA)
+#define HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR 0x34c0 	///../ucode/dos_register.h:3578
+#define P_HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR 		DOS_REG_ADDR(HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR)
+#define HEVCD_MPP_ANC_CANVAS_DATA_ADDR 0x34c1 	///../ucode/dos_register.h:3580
+#define P_HEVCD_MPP_ANC_CANVAS_DATA_ADDR 		DOS_REG_ADDR(HEVCD_MPP_ANC_CANVAS_DATA_ADDR)
+#define HEVCD_MCRCC_CTL1 0x34f0 	///../ucode/dos_register.h:3594
+#define P_HEVCD_MCRCC_CTL1 		DOS_REG_ADDR(HEVCD_MCRCC_CTL1)
+#define HEVCD_MCRCC_CTL2 0x34f1 	///../ucode/dos_register.h:3600
+#define P_HEVCD_MCRCC_CTL2 		DOS_REG_ADDR(HEVCD_MCRCC_CTL2)
+#define HEVCD_MCRCC_CTL3 0x34f2 	///../ucode/dos_register.h:3606
+#define P_HEVCD_MCRCC_CTL3 		DOS_REG_ADDR(HEVCD_MCRCC_CTL3)
+#define HEVC_DBLK_CFG0 0x3500 	///../ucode/dos_register.h:3620
+#define P_HEVC_DBLK_CFG0 		DOS_REG_ADDR(HEVC_DBLK_CFG0)
+#define HEVC_DBLK_CFG1 0x3501 	///../ucode/dos_register.h:3622
+#define P_HEVC_DBLK_CFG1 		DOS_REG_ADDR(HEVC_DBLK_CFG1)
+#define HEVC_DBLK_CFG2 0x3502 	///../ucode/dos_register.h:3624
+#define P_HEVC_DBLK_CFG2 		DOS_REG_ADDR(HEVC_DBLK_CFG2)
+#define HEVC_DBLK_CFG3 0x3503 	///../ucode/dos_register.h:3626
+#define P_HEVC_DBLK_CFG3 		DOS_REG_ADDR(HEVC_DBLK_CFG3)
+#define HEVC_DBLK_CFG4 0x3504 	///../ucode/dos_register.h:3628
+#define P_HEVC_DBLK_CFG4 		DOS_REG_ADDR(HEVC_DBLK_CFG4)
+#define HEVC_DBLK_CFG5 0x3505 	///../ucode/dos_register.h:3630
+#define P_HEVC_DBLK_CFG5 		DOS_REG_ADDR(HEVC_DBLK_CFG5)
+#define HEVC_DBLK_CFG6 0x3506 	///../ucode/dos_register.h:3632
+#define P_HEVC_DBLK_CFG6 		DOS_REG_ADDR(HEVC_DBLK_CFG6)
+#define HEVC_DBLK_CFG7 0x3507 	///../ucode/dos_register.h:3634
+#define P_HEVC_DBLK_CFG7 		DOS_REG_ADDR(HEVC_DBLK_CFG7)
+#define HEVC_DBLK_CFG8 0x3508 	///../ucode/dos_register.h:3636
+#define P_HEVC_DBLK_CFG8 		DOS_REG_ADDR(HEVC_DBLK_CFG8)
+#define HEVC_DBLK_CFG9 0x3509 	///../ucode/dos_register.h:3638
+#define P_HEVC_DBLK_CFG9 		DOS_REG_ADDR(HEVC_DBLK_CFG9)
+#define HEVC_DBLK_STS0 0x350a 	///../ucode/dos_register.h:3640
+#define P_HEVC_DBLK_STS0 		DOS_REG_ADDR(HEVC_DBLK_STS0)
+#define HEVC_DBLK_STS1 0x350b 	///../ucode/dos_register.h:3642
+#define P_HEVC_DBLK_STS1 		DOS_REG_ADDR(HEVC_DBLK_STS1)
+#define HEVC_SAO_VERSION 0x3600 	///../ucode/dos_register.h:3655
+#define P_HEVC_SAO_VERSION 		DOS_REG_ADDR(HEVC_SAO_VERSION)
+#define HEVC_SAO_CTRL0 0x3601 	///../ucode/dos_register.h:3657
+#define P_HEVC_SAO_CTRL0 		DOS_REG_ADDR(HEVC_SAO_CTRL0)
+#define HEVC_SAO_CTRL1 0x3602 	///../ucode/dos_register.h:3659
+#define P_HEVC_SAO_CTRL1 		DOS_REG_ADDR(HEVC_SAO_CTRL1)
+#define HEVC_SAO_INT_EN 0x3603 	///../ucode/dos_register.h:3660
+#define P_HEVC_SAO_INT_EN 		DOS_REG_ADDR(HEVC_SAO_INT_EN)
+#define HEVC_SAO_INT_STATUS 0x3604 	///../ucode/dos_register.h:3667
+#define P_HEVC_SAO_INT_STATUS 		DOS_REG_ADDR(HEVC_SAO_INT_STATUS)
+#define HEVC_SAO_PIC_SIZE 0x3605 	///../ucode/dos_register.h:3670
+#define P_HEVC_SAO_PIC_SIZE 		DOS_REG_ADDR(HEVC_SAO_PIC_SIZE)
+#define HEVC_SAO_PIC_SIZE_LCU 0x3606 	///../ucode/dos_register.h:3673
+#define P_HEVC_SAO_PIC_SIZE_LCU 		DOS_REG_ADDR(HEVC_SAO_PIC_SIZE_LCU)
+#define HEVC_SAO_TILE_START 0x3607 	///../ucode/dos_register.h:3676
+#define P_HEVC_SAO_TILE_START 		DOS_REG_ADDR(HEVC_SAO_TILE_START)
+#define HEVC_SAO_TILE_SIZE_LCU 0x3608 	///../ucode/dos_register.h:3679
+#define P_HEVC_SAO_TILE_SIZE_LCU 		DOS_REG_ADDR(HEVC_SAO_TILE_SIZE_LCU)
+#define HEVC_SAO_AXI_WCTRL 0x3609 	///../ucode/dos_register.h:3682
+#define P_HEVC_SAO_AXI_WCTRL 		DOS_REG_ADDR(HEVC_SAO_AXI_WCTRL)
+#define HEVC_SAO_AXI_RCTRL 0x360a 	///../ucode/dos_register.h:3683
+#define P_HEVC_SAO_AXI_RCTRL 		DOS_REG_ADDR(HEVC_SAO_AXI_RCTRL)
+#define HEVC_SAO_Y_START_ADDR 0x360b 	///../ucode/dos_register.h:3684
+#define P_HEVC_SAO_Y_START_ADDR 		DOS_REG_ADDR(HEVC_SAO_Y_START_ADDR)
+#define HEVC_SAO_Y_LENGTH 0x360c 	///../ucode/dos_register.h:3685
+#define P_HEVC_SAO_Y_LENGTH 		DOS_REG_ADDR(HEVC_SAO_Y_LENGTH)
+#define HEVC_SAO_C_START_ADDR 0x360d 	///../ucode/dos_register.h:3686
+#define P_HEVC_SAO_C_START_ADDR 		DOS_REG_ADDR(HEVC_SAO_C_START_ADDR)
+#define HEVC_SAO_C_LENGTH 0x360e 	///../ucode/dos_register.h:3687
+#define P_HEVC_SAO_C_LENGTH 		DOS_REG_ADDR(HEVC_SAO_C_LENGTH)
+#define HEVC_SAO_Y_WPTR 0x360f 	///../ucode/dos_register.h:3688
+#define P_HEVC_SAO_Y_WPTR 		DOS_REG_ADDR(HEVC_SAO_Y_WPTR)
+#define HEVC_SAO_C_WPTR 0x3610 	///../ucode/dos_register.h:3689
+#define P_HEVC_SAO_C_WPTR 		DOS_REG_ADDR(HEVC_SAO_C_WPTR)
+#define HEVC_SAO_ABV_START_ADDR 0x3611 	///../ucode/dos_register.h:3690
+#define P_HEVC_SAO_ABV_START_ADDR 		DOS_REG_ADDR(HEVC_SAO_ABV_START_ADDR)
+#define HEVC_SAO_VB_WR_START_ADDR 0x3612 	///../ucode/dos_register.h:3691
+#define P_HEVC_SAO_VB_WR_START_ADDR 		DOS_REG_ADDR(HEVC_SAO_VB_WR_START_ADDR)
+#define HEVC_SAO_VB_RD_START_ADDR 0x3613 	///../ucode/dos_register.h:3692
+#define P_HEVC_SAO_VB_RD_START_ADDR 		DOS_REG_ADDR(HEVC_SAO_VB_RD_START_ADDR)
+#define HEVC_SAO_ABV_WPTR 0x3614 	///../ucode/dos_register.h:3693
+#define P_HEVC_SAO_ABV_WPTR 		DOS_REG_ADDR(HEVC_SAO_ABV_WPTR)
+#define HEVC_SAO_ABV_RPTR 0x3615 	///../ucode/dos_register.h:3694
+#define P_HEVC_SAO_ABV_RPTR 		DOS_REG_ADDR(HEVC_SAO_ABV_RPTR)
+#define HEVC_SAO_VB_WPTR 0x3616 	///../ucode/dos_register.h:3695
+#define P_HEVC_SAO_VB_WPTR 		DOS_REG_ADDR(HEVC_SAO_VB_WPTR)
+#define HEVC_SAO_VB_RPTR 0x3617 	///../ucode/dos_register.h:3696
+#define P_HEVC_SAO_VB_RPTR 		DOS_REG_ADDR(HEVC_SAO_VB_RPTR)
+#define HEVC_SAO_CTRL2 0x3620 	///../ucode/dos_register.h:3697
+#define P_HEVC_SAO_CTRL2 		DOS_REG_ADDR(HEVC_SAO_CTRL2)
+#define HEVC_SAO_CTRL3 0x3621 	///../ucode/dos_register.h:3698
+#define P_HEVC_SAO_CTRL3 		DOS_REG_ADDR(HEVC_SAO_CTRL3)
+#define HEVC_SAO_CTRL4 0x3622 	///../ucode/dos_register.h:3699
+#define P_HEVC_SAO_CTRL4 		DOS_REG_ADDR(HEVC_SAO_CTRL4)
+#define HEVC_SAO_CTRL5 0x3623 	///../ucode/dos_register.h:3700
+#define P_HEVC_SAO_CTRL5 		DOS_REG_ADDR(HEVC_SAO_CTRL5)
+#define HEVC_SAO_CTRL6 0x3624 	///../ucode/dos_register.h:3701
+#define P_HEVC_SAO_CTRL6 		DOS_REG_ADDR(HEVC_SAO_CTRL6)
+#define HEVC_SAO_CTRL7 0x3625 	///../ucode/dos_register.h:3702
+#define P_HEVC_SAO_CTRL7 		DOS_REG_ADDR(HEVC_SAO_CTRL7)
+#define HEVC_IQIT_CLK_RST_CTRL 0x3700 	///../ucode/dos_register.h:3720
+#define P_HEVC_IQIT_CLK_RST_CTRL 		DOS_REG_ADDR(HEVC_IQIT_CLK_RST_CTRL)
+#define HEVC_IQIT_DEQUANT_CTRL 0x3701 	///../ucode/dos_register.h:3729
+#define P_HEVC_IQIT_DEQUANT_CTRL 		DOS_REG_ADDR(HEVC_IQIT_DEQUANT_CTRL)
+#define HEVC_IQIT_SCALELUT_WR_ADDR 0x3702 	///../ucode/dos_register.h:3732
+#define P_HEVC_IQIT_SCALELUT_WR_ADDR 		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_WR_ADDR)
+#define HEVC_IQIT_SCALELUT_RD_ADDR 0x3703 	///../ucode/dos_register.h:3735
+#define P_HEVC_IQIT_SCALELUT_RD_ADDR 		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_RD_ADDR)
+#define HEVC_IQIT_SCALELUT_DATA 0x3704 	///../ucode/dos_register.h:3737
+#define P_HEVC_IQIT_SCALELUT_DATA 		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_DATA)
+#define HEVC_IQIT_SCALELUT_IDX_4 0x3705 	///../ucode/dos_register.h:3755
+#define P_HEVC_IQIT_SCALELUT_IDX_4 		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_IDX_4)
+#define HEVC_IQIT_SCALELUT_IDX_8 0x3706 	///../ucode/dos_register.h:3767
+#define P_HEVC_IQIT_SCALELUT_IDX_8 		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_IDX_8)
+#define HEVC_IQIT_SCALELUT_IDX_16_32 0x3707 	///../ucode/dos_register.h:3784
+#define P_HEVC_IQIT_SCALELUT_IDX_16_32 		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_IDX_16_32)
+#define HEVC_IQIT_STAT_GEN0 0x3708 	///../ucode/dos_register.h:3787
+#define P_HEVC_IQIT_STAT_GEN0 		DOS_REG_ADDR(HEVC_IQIT_STAT_GEN0)
+#define HEVC_QP_WRITE 0x3709 	///../ucode/dos_register.h:3794
+#define P_HEVC_QP_WRITE 		DOS_REG_ADDR(HEVC_QP_WRITE)
+#define HEVC_IQIT_STAT_GEN1 0x370a 	///../ucode/dos_register.h:3807
+#define P_HEVC_IQIT_STAT_GEN1 		DOS_REG_ADDR(HEVC_IQIT_STAT_GEN1)
+#define DOS_SW_RESET0 0x3f00 	///../ucode/dos_register.h:3831
+#define P_DOS_SW_RESET0 		DOS_REG_ADDR(DOS_SW_RESET0)
+#define DOS_GCLK_EN0 0x3f01 	///../ucode/dos_register.h:3856
+#define P_DOS_GCLK_EN0 		DOS_REG_ADDR(DOS_GCLK_EN0)
+#define DOS_GEN_CTRL0 0x3f02 	///../ucode/dos_register.h:3857
+#define P_DOS_GEN_CTRL0 		DOS_REG_ADDR(DOS_GEN_CTRL0)
+#define DOS_APB_ERR_CTRL 0x3f03 	///../ucode/dos_register.h:3858
+#define P_DOS_APB_ERR_CTRL 		DOS_REG_ADDR(DOS_APB_ERR_CTRL)
+#define DOS_APB_ERR_STAT 0x3f04 	///../ucode/dos_register.h:3859
+#define P_DOS_APB_ERR_STAT 		DOS_REG_ADDR(DOS_APB_ERR_STAT)
+#define DOS_VDEC_INT_EN 0x3f05 	///../ucode/dos_register.h:3860
+#define P_DOS_VDEC_INT_EN 		DOS_REG_ADDR(DOS_VDEC_INT_EN)
+#define DOS_HCODEC_INT_EN 0x3f06 	///../ucode/dos_register.h:3861
+#define P_DOS_HCODEC_INT_EN 		DOS_REG_ADDR(DOS_HCODEC_INT_EN)
+#define DOS_SW_RESET1 0x3f07 	///../ucode/dos_register.h:3879
+#define P_DOS_SW_RESET1 		DOS_REG_ADDR(DOS_SW_RESET1)
+#define DOS_SW_RESET2 0x3f08 	///../ucode/dos_register.h:3894
+#define P_DOS_SW_RESET2 		DOS_REG_ADDR(DOS_SW_RESET2)
+#define DOS_GCLK_EN1 0x3f09 	///../ucode/dos_register.h:3906
+#define P_DOS_GCLK_EN1 		DOS_REG_ADDR(DOS_GCLK_EN1)
+#define DOS_VDEC2_INT_EN 0x3f0a 	///../ucode/dos_register.h:3907
+#define P_DOS_VDEC2_INT_EN 		DOS_REG_ADDR(DOS_VDEC2_INT_EN)
+#define DOS_VDIN_LCNT 0x3f0b 	///../ucode/dos_register.h:3908
+#define P_DOS_VDIN_LCNT 		DOS_REG_ADDR(DOS_VDIN_LCNT)
+#define DOS_VDIN_FCNT 0x3f0c 	///../ucode/dos_register.h:3909
+#define P_DOS_VDIN_FCNT 		DOS_REG_ADDR(DOS_VDIN_FCNT)
+#define DOS_VDIN_CCTL 0x3f0d 	///../ucode/dos_register.h:3910
+#define P_DOS_VDIN_CCTL 		DOS_REG_ADDR(DOS_VDIN_CCTL)
+#define DOS_SCRATCH0 0x3f10 	///../ucode/dos_register.h:3911
+#define P_DOS_SCRATCH0 		DOS_REG_ADDR(DOS_SCRATCH0)
+#define DOS_SCRATCH1 0x3f11 	///../ucode/dos_register.h:3912
+#define P_DOS_SCRATCH1 		DOS_REG_ADDR(DOS_SCRATCH1)
+#define DOS_SCRATCH2 0x3f12 	///../ucode/dos_register.h:3913
+#define P_DOS_SCRATCH2 		DOS_REG_ADDR(DOS_SCRATCH2)
+#define DOS_SCRATCH3 0x3f13 	///../ucode/dos_register.h:3914
+#define P_DOS_SCRATCH3 		DOS_REG_ADDR(DOS_SCRATCH3)
+#define DOS_SCRATCH4 0x3f14 	///../ucode/dos_register.h:3915
+#define P_DOS_SCRATCH4 		DOS_REG_ADDR(DOS_SCRATCH4)
+#define DOS_SCRATCH5 0x3f15 	///../ucode/dos_register.h:3916
+#define P_DOS_SCRATCH5 		DOS_REG_ADDR(DOS_SCRATCH5)
+#define DOS_SCRATCH6 0x3f16 	///../ucode/dos_register.h:3917
+#define P_DOS_SCRATCH6 		DOS_REG_ADDR(DOS_SCRATCH6)
+#define DOS_SCRATCH7 0x3f17 	///../ucode/dos_register.h:3918
+#define P_DOS_SCRATCH7 		DOS_REG_ADDR(DOS_SCRATCH7)
+#define DOS_SCRATCH8 0x3f18 	///../ucode/dos_register.h:3919
+#define P_DOS_SCRATCH8 		DOS_REG_ADDR(DOS_SCRATCH8)
+#define DOS_SCRATCH9 0x3f19 	///../ucode/dos_register.h:3920
+#define P_DOS_SCRATCH9 		DOS_REG_ADDR(DOS_SCRATCH9)
+#define DOS_SCRATCH10 0x3f1a 	///../ucode/dos_register.h:3921
+#define P_DOS_SCRATCH10 		DOS_REG_ADDR(DOS_SCRATCH10)
+#define DOS_SCRATCH11 0x3f1b 	///../ucode/dos_register.h:3922
+#define P_DOS_SCRATCH11 		DOS_REG_ADDR(DOS_SCRATCH11)
+#define DOS_SCRATCH12 0x3f1c 	///../ucode/dos_register.h:3923
+#define P_DOS_SCRATCH12 		DOS_REG_ADDR(DOS_SCRATCH12)
+#define DOS_SCRATCH13 0x3f1d 	///../ucode/dos_register.h:3924
+#define P_DOS_SCRATCH13 		DOS_REG_ADDR(DOS_SCRATCH13)
+#define DOS_SCRATCH14 0x3f1e 	///../ucode/dos_register.h:3925
+#define P_DOS_SCRATCH14 		DOS_REG_ADDR(DOS_SCRATCH14)
+#define DOS_SCRATCH15 0x3f1f 	///../ucode/dos_register.h:3926
+#define P_DOS_SCRATCH15 		DOS_REG_ADDR(DOS_SCRATCH15)
+#define DOS_SCRATCH16 0x3f20 	///../ucode/dos_register.h:3927
+#define P_DOS_SCRATCH16 		DOS_REG_ADDR(DOS_SCRATCH16)
+#define DOS_SCRATCH17 0x3f21 	///../ucode/dos_register.h:3928
+#define P_DOS_SCRATCH17 		DOS_REG_ADDR(DOS_SCRATCH17)
+#define DOS_SCRATCH18 0x3f22 	///../ucode/dos_register.h:3929
+#define P_DOS_SCRATCH18 		DOS_REG_ADDR(DOS_SCRATCH18)
+#define DOS_SCRATCH19 0x3f23 	///../ucode/dos_register.h:3930
+#define P_DOS_SCRATCH19 		DOS_REG_ADDR(DOS_SCRATCH19)
+#define DOS_SCRATCH20 0x3f24 	///../ucode/dos_register.h:3931
+#define P_DOS_SCRATCH20 		DOS_REG_ADDR(DOS_SCRATCH20)
+#define DOS_SCRATCH21 0x3f25 	///../ucode/dos_register.h:3932
+#define P_DOS_SCRATCH21 		DOS_REG_ADDR(DOS_SCRATCH21)
+#define DOS_SCRATCH22 0x3f26 	///../ucode/dos_register.h:3933
+#define P_DOS_SCRATCH22 		DOS_REG_ADDR(DOS_SCRATCH22)
+#define DOS_SCRATCH23 0x3f27 	///../ucode/dos_register.h:3934
+#define P_DOS_SCRATCH23 		DOS_REG_ADDR(DOS_SCRATCH23)
+#define DOS_SCRATCH24 0x3f28 	///../ucode/dos_register.h:3935
+#define P_DOS_SCRATCH24 		DOS_REG_ADDR(DOS_SCRATCH24)
+#define DOS_SCRATCH25 0x3f29 	///../ucode/dos_register.h:3936
+#define P_DOS_SCRATCH25 		DOS_REG_ADDR(DOS_SCRATCH25)
+#define DOS_SCRATCH26 0x3f2a 	///../ucode/dos_register.h:3937
+#define P_DOS_SCRATCH26 		DOS_REG_ADDR(DOS_SCRATCH26)
+#define DOS_SCRATCH27 0x3f2b 	///../ucode/dos_register.h:3938
+#define P_DOS_SCRATCH27 		DOS_REG_ADDR(DOS_SCRATCH27)
+#define DOS_SCRATCH28 0x3f2c 	///../ucode/dos_register.h:3939
+#define P_DOS_SCRATCH28 		DOS_REG_ADDR(DOS_SCRATCH28)
+#define DOS_SCRATCH29 0x3f2d 	///../ucode/dos_register.h:3940
+#define P_DOS_SCRATCH29 		DOS_REG_ADDR(DOS_SCRATCH29)
+#define DOS_SCRATCH30 0x3f2e 	///../ucode/dos_register.h:3941
+#define P_DOS_SCRATCH30 		DOS_REG_ADDR(DOS_SCRATCH30)
+#define DOS_SCRATCH31 0x3f2f 	///../ucode/dos_register.h:3942
+#define P_DOS_SCRATCH31 		DOS_REG_ADDR(DOS_SCRATCH31)
+#define DOS_MEM_PD_VDEC 0x3f30 	///../ucode/dos_register.h:3943
+#define P_DOS_MEM_PD_VDEC 		DOS_REG_ADDR(DOS_MEM_PD_VDEC)
+#define DOS_MEM_PD_VDEC2 0x3f31 	///../ucode/dos_register.h:3944
+#define P_DOS_MEM_PD_VDEC2 		DOS_REG_ADDR(DOS_MEM_PD_VDEC2)
+#define DOS_MEM_PD_HCODEC 0x3f32 	///../ucode/dos_register.h:3945
+#define P_DOS_MEM_PD_HCODEC 		DOS_REG_ADDR(DOS_MEM_PD_HCODEC)
+#define DOS_MEM_PD_HEVC 0x3f33 	///../ucode/dos_register.h:3946
+#define P_DOS_MEM_PD_HEVC 		DOS_REG_ADDR(DOS_MEM_PD_HEVC)
+#define DOS_SW_RESET3 0x3f34 	///../ucode/dos_register.h:3947
+#define P_DOS_SW_RESET3 		DOS_REG_ADDR(DOS_SW_RESET3)
+#define DOS_GCLK_EN3 0x3f35 	///../ucode/dos_register.h:3948
+#define P_DOS_GCLK_EN3 		DOS_REG_ADDR(DOS_GCLK_EN3)
+#define DOS_HEVC_INT_EN 0x3f36 	///../ucode/dos_register.h:3949
+#define P_DOS_HEVC_INT_EN 		DOS_REG_ADDR(DOS_HEVC_INT_EN)
+#define DOS_VDEC_MCRCC_STALL_CTRL 0x3f40 	///../ucode/dos_register.h:3955
+#define P_DOS_VDEC_MCRCC_STALL_CTRL 		DOS_REG_ADDR(DOS_VDEC_MCRCC_STALL_CTRL)
+#define DOS_VDEC_MCRCC_STALL2_CTRL 0x3f42 	///../ucode/dos_register.h:3956
+#define P_DOS_VDEC_MCRCC_STALL2_CTRL 		DOS_REG_ADDR(DOS_VDEC_MCRCC_STALL2_CTRL)
+#define DOS_VDEC2_MCRCC_STALL_CTRL 0x3f41 	///../ucode/dos_register.h:3957
+#define P_DOS_VDEC2_MCRCC_STALL_CTRL 		DOS_REG_ADDR(DOS_VDEC2_MCRCC_STALL_CTRL)
+#define DOS_VDEC2_MCRCC_STALL2_CTRL 0x3f43 	///../ucode/dos_register.h:3958
+#define P_DOS_VDEC2_MCRCC_STALL2_CTRL 		DOS_REG_ADDR(DOS_VDEC2_MCRCC_STALL2_CTRL)
+#define HCODEC_MC_CTRL_REG 0x1900 	///../ucode/dos_register.h:3971
+#define P_HCODEC_MC_CTRL_REG 		DOS_REG_ADDR(HCODEC_MC_CTRL_REG)
+#define HCODEC_MC_MB_INFO 0x1901 	///../ucode/dos_register.h:3972
+#define P_HCODEC_MC_MB_INFO 		DOS_REG_ADDR(HCODEC_MC_MB_INFO)
+#define HCODEC_MC_PIC_INFO 0x1902 	///../ucode/dos_register.h:3973
+#define P_HCODEC_MC_PIC_INFO 		DOS_REG_ADDR(HCODEC_MC_PIC_INFO)
+#define HCODEC_MC_HALF_PEL_ONE 0x1903 	///../ucode/dos_register.h:3974
+#define P_HCODEC_MC_HALF_PEL_ONE 		DOS_REG_ADDR(HCODEC_MC_HALF_PEL_ONE)
+#define HCODEC_MC_HALF_PEL_TWO 0x1904 	///../ucode/dos_register.h:3975
+#define P_HCODEC_MC_HALF_PEL_TWO 		DOS_REG_ADDR(HCODEC_MC_HALF_PEL_TWO)
+#define HCODEC_POWER_CTL_MC 0x1905 	///../ucode/dos_register.h:3976
+#define P_HCODEC_POWER_CTL_MC 		DOS_REG_ADDR(HCODEC_POWER_CTL_MC)
+#define HCODEC_MC_CMD 0x1906 	///../ucode/dos_register.h:3977
+#define P_HCODEC_MC_CMD 		DOS_REG_ADDR(HCODEC_MC_CMD)
+#define HCODEC_MC_CTRL0 0x1907 	///../ucode/dos_register.h:3978
+#define P_HCODEC_MC_CTRL0 		DOS_REG_ADDR(HCODEC_MC_CTRL0)
+#define HCODEC_MC_PIC_W_H 0x1908 	///../ucode/dos_register.h:3979
+#define P_HCODEC_MC_PIC_W_H 		DOS_REG_ADDR(HCODEC_MC_PIC_W_H)
+#define HCODEC_MC_STATUS0 0x1909 	///../ucode/dos_register.h:3980
+#define P_HCODEC_MC_STATUS0 		DOS_REG_ADDR(HCODEC_MC_STATUS0)
+#define HCODEC_MC_STATUS1 0x190a 	///../ucode/dos_register.h:3981
+#define P_HCODEC_MC_STATUS1 		DOS_REG_ADDR(HCODEC_MC_STATUS1)
+#define HCODEC_MC_CTRL1 0x190b 	///../ucode/dos_register.h:3982
+#define P_HCODEC_MC_CTRL1 		DOS_REG_ADDR(HCODEC_MC_CTRL1)
+#define HCODEC_MC_MIX_RATIO0 0x190c 	///../ucode/dos_register.h:3983
+#define P_HCODEC_MC_MIX_RATIO0 		DOS_REG_ADDR(HCODEC_MC_MIX_RATIO0)
+#define HCODEC_MC_MIX_RATIO1 0x190d 	///../ucode/dos_register.h:3984
+#define P_HCODEC_MC_MIX_RATIO1 		DOS_REG_ADDR(HCODEC_MC_MIX_RATIO1)
+#define HCODEC_MC_DP_MB_XY 0x190e 	///../ucode/dos_register.h:3985
+#define P_HCODEC_MC_DP_MB_XY 		DOS_REG_ADDR(HCODEC_MC_DP_MB_XY)
+#define HCODEC_MC_OM_MB_XY 0x190f 	///../ucode/dos_register.h:3986
+#define P_HCODEC_MC_OM_MB_XY 		DOS_REG_ADDR(HCODEC_MC_OM_MB_XY)
+#define HCODEC_PSCALE_RST 0x1910 	///../ucode/dos_register.h:3987
+#define P_HCODEC_PSCALE_RST 		DOS_REG_ADDR(HCODEC_PSCALE_RST)
+#define HCODEC_PSCALE_CTRL 0x1911 	///../ucode/dos_register.h:3988
+#define P_HCODEC_PSCALE_CTRL 		DOS_REG_ADDR(HCODEC_PSCALE_CTRL)
+#define HCODEC_PSCALE_PICI_W 0x1912 	///../ucode/dos_register.h:3989
+#define P_HCODEC_PSCALE_PICI_W 		DOS_REG_ADDR(HCODEC_PSCALE_PICI_W)
+#define HCODEC_PSCALE_PICI_H 0x1913 	///../ucode/dos_register.h:3990
+#define P_HCODEC_PSCALE_PICI_H 		DOS_REG_ADDR(HCODEC_PSCALE_PICI_H)
+#define HCODEC_PSCALE_PICO_W 0x1914 	///../ucode/dos_register.h:3991
+#define P_HCODEC_PSCALE_PICO_W 		DOS_REG_ADDR(HCODEC_PSCALE_PICO_W)
+#define HCODEC_PSCALE_PICO_H 0x1915 	///../ucode/dos_register.h:3992
+#define P_HCODEC_PSCALE_PICO_H 		DOS_REG_ADDR(HCODEC_PSCALE_PICO_H)
+#define HCODEC_PSCALE_PICO_START_X 0x1916 	///../ucode/dos_register.h:3993
+#define P_HCODEC_PSCALE_PICO_START_X 		DOS_REG_ADDR(HCODEC_PSCALE_PICO_START_X)
+#define HCODEC_PSCALE_PICO_START_Y 0x1917 	///../ucode/dos_register.h:3994
+#define P_HCODEC_PSCALE_PICO_START_Y 		DOS_REG_ADDR(HCODEC_PSCALE_PICO_START_Y)
+#define HCODEC_PSCALE_DUMMY 0x1918 	///../ucode/dos_register.h:3995
+#define P_HCODEC_PSCALE_DUMMY 		DOS_REG_ADDR(HCODEC_PSCALE_DUMMY)
+#define HCODEC_PSCALE_FILT0_COEF0 0x1919 	///../ucode/dos_register.h:3996
+#define P_HCODEC_PSCALE_FILT0_COEF0 		DOS_REG_ADDR(HCODEC_PSCALE_FILT0_COEF0)
+#define HCODEC_PSCALE_FILT0_COEF1 0x191a 	///../ucode/dos_register.h:3997
+#define P_HCODEC_PSCALE_FILT0_COEF1 		DOS_REG_ADDR(HCODEC_PSCALE_FILT0_COEF1)
+#define HCODEC_PSCALE_CMD_CTRL 0x191b 	///../ucode/dos_register.h:3998
+#define P_HCODEC_PSCALE_CMD_CTRL 		DOS_REG_ADDR(HCODEC_PSCALE_CMD_CTRL)
+#define HCODEC_PSCALE_CMD_BLK_X 0x191c 	///../ucode/dos_register.h:3999
+#define P_HCODEC_PSCALE_CMD_BLK_X 		DOS_REG_ADDR(HCODEC_PSCALE_CMD_BLK_X)
+#define HCODEC_PSCALE_CMD_BLK_Y 0x191d 	///../ucode/dos_register.h:4000
+#define P_HCODEC_PSCALE_CMD_BLK_Y 		DOS_REG_ADDR(HCODEC_PSCALE_CMD_BLK_Y)
+#define HCODEC_PSCALE_STATUS 0x191e 	///../ucode/dos_register.h:4001
+#define P_HCODEC_PSCALE_STATUS 		DOS_REG_ADDR(HCODEC_PSCALE_STATUS)
+#define HCODEC_PSCALE_BMEM_ADDR 0x191f 	///../ucode/dos_register.h:4002
+#define P_HCODEC_PSCALE_BMEM_ADDR 		DOS_REG_ADDR(HCODEC_PSCALE_BMEM_ADDR)
+#define HCODEC_PSCALE_BMEM_DAT 0x1920 	///../ucode/dos_register.h:4003
+#define P_HCODEC_PSCALE_BMEM_DAT 		DOS_REG_ADDR(HCODEC_PSCALE_BMEM_DAT)
+#define HCODEC_PSCALE_DRAM_BUF_CTRL 0x1921 	///../ucode/dos_register.h:4004
+#define P_HCODEC_PSCALE_DRAM_BUF_CTRL 		DOS_REG_ADDR(HCODEC_PSCALE_DRAM_BUF_CTRL)
+#define HCODEC_PSCALE_MCMD_CTRL 0x1922 	///../ucode/dos_register.h:4005
+#define P_HCODEC_PSCALE_MCMD_CTRL 		DOS_REG_ADDR(HCODEC_PSCALE_MCMD_CTRL)
+#define HCODEC_PSCALE_MCMD_XSIZE 0x1923 	///../ucode/dos_register.h:4006
+#define P_HCODEC_PSCALE_MCMD_XSIZE 		DOS_REG_ADDR(HCODEC_PSCALE_MCMD_XSIZE)
+#define HCODEC_PSCALE_MCMD_YSIZE 0x1924 	///../ucode/dos_register.h:4007
+#define P_HCODEC_PSCALE_MCMD_YSIZE 		DOS_REG_ADDR(HCODEC_PSCALE_MCMD_YSIZE)
+#define HCODEC_PSCALE_RBUF_START_BLKX 0x1925 	///../ucode/dos_register.h:4008
+#define P_HCODEC_PSCALE_RBUF_START_BLKX 		DOS_REG_ADDR(HCODEC_PSCALE_RBUF_START_BLKX)
+#define HCODEC_PSCALE_RBUF_START_BLKY 0x1926 	///../ucode/dos_register.h:4009
+#define P_HCODEC_PSCALE_RBUF_START_BLKY 		DOS_REG_ADDR(HCODEC_PSCALE_RBUF_START_BLKY)
+#define HCODEC_PSCALE_PICO_SHIFT_XY 0x1928 	///../ucode/dos_register.h:4011
+#define P_HCODEC_PSCALE_PICO_SHIFT_XY 		DOS_REG_ADDR(HCODEC_PSCALE_PICO_SHIFT_XY)
+#define HCODEC_PSCALE_CTRL1 0x1929 	///../ucode/dos_register.h:4012
+#define P_HCODEC_PSCALE_CTRL1 		DOS_REG_ADDR(HCODEC_PSCALE_CTRL1)
+#define HCODEC_PSCALE_SRCKEY_CTRL0 0x192a 	///../ucode/dos_register.h:4020
+#define P_HCODEC_PSCALE_SRCKEY_CTRL0 		DOS_REG_ADDR(HCODEC_PSCALE_SRCKEY_CTRL0)
+#define HCODEC_PSCALE_SRCKEY_CTRL1 0x192b 	///../ucode/dos_register.h:4023
+#define P_HCODEC_PSCALE_SRCKEY_CTRL1 		DOS_REG_ADDR(HCODEC_PSCALE_SRCKEY_CTRL1)
+#define HCODEC_PSCALE_CANVAS_RD_ADDR 0x192c 	///../ucode/dos_register.h:4027
+#define P_HCODEC_PSCALE_CANVAS_RD_ADDR 		DOS_REG_ADDR(HCODEC_PSCALE_CANVAS_RD_ADDR)
+#define HCODEC_PSCALE_CANVAS_WR_ADDR 0x192d 	///../ucode/dos_register.h:4031
+#define P_HCODEC_PSCALE_CANVAS_WR_ADDR 		DOS_REG_ADDR(HCODEC_PSCALE_CANVAS_WR_ADDR)
+#define HCODEC_PSCALE_CTRL2 0x192e 	///../ucode/dos_register.h:4035
+#define P_HCODEC_PSCALE_CTRL2 		DOS_REG_ADDR(HCODEC_PSCALE_CTRL2)
+#define HCODEC_MC_MPORT_CTRL 0x1940 	///../ucode/dos_register.h:4036
+#define P_HCODEC_MC_MPORT_CTRL 		DOS_REG_ADDR(HCODEC_MC_MPORT_CTRL)
+#define HCODEC_MC_MPORT_DAT 0x1941 	///../ucode/dos_register.h:4037
+#define P_HCODEC_MC_MPORT_DAT 		DOS_REG_ADDR(HCODEC_MC_MPORT_DAT)
+#define HCODEC_MC_WT_PRED_CTRL 0x1942 	///../ucode/dos_register.h:4038
+#define P_HCODEC_MC_WT_PRED_CTRL 		DOS_REG_ADDR(HCODEC_MC_WT_PRED_CTRL)
+#define HCODEC_MC_MBBOT_ST_EVEN_ADDR 0x1944 	///../ucode/dos_register.h:4039
+#define P_HCODEC_MC_MBBOT_ST_EVEN_ADDR 		DOS_REG_ADDR(HCODEC_MC_MBBOT_ST_EVEN_ADDR)
+#define HCODEC_MC_MBBOT_ST_ODD_ADDR 0x1945 	///../ucode/dos_register.h:4040
+#define P_HCODEC_MC_MBBOT_ST_ODD_ADDR 		DOS_REG_ADDR(HCODEC_MC_MBBOT_ST_ODD_ADDR)
+#define HCODEC_MC_DPDN_MB_XY 0x1946 	///../ucode/dos_register.h:4041
+#define P_HCODEC_MC_DPDN_MB_XY 		DOS_REG_ADDR(HCODEC_MC_DPDN_MB_XY)
+#define HCODEC_MC_OMDN_MB_XY 0x1947 	///../ucode/dos_register.h:4042
+#define P_HCODEC_MC_OMDN_MB_XY 		DOS_REG_ADDR(HCODEC_MC_OMDN_MB_XY)
+#define HCODEC_MC_HCMDBUF_H 0x1948 	///../ucode/dos_register.h:4043
+#define P_HCODEC_MC_HCMDBUF_H 		DOS_REG_ADDR(HCODEC_MC_HCMDBUF_H)
+#define HCODEC_MC_HCMDBUF_L 0x1949 	///../ucode/dos_register.h:4044
+#define P_HCODEC_MC_HCMDBUF_L 		DOS_REG_ADDR(HCODEC_MC_HCMDBUF_L)
+#define HCODEC_MC_HCMD_H 0x194a 	///../ucode/dos_register.h:4045
+#define P_HCODEC_MC_HCMD_H 		DOS_REG_ADDR(HCODEC_MC_HCMD_H)
+#define HCODEC_MC_HCMD_L 0x194b 	///../ucode/dos_register.h:4046
+#define P_HCODEC_MC_HCMD_L 		DOS_REG_ADDR(HCODEC_MC_HCMD_L)
+#define HCODEC_MC_IDCT_DAT 0x194c 	///../ucode/dos_register.h:4047
+#define P_HCODEC_MC_IDCT_DAT 		DOS_REG_ADDR(HCODEC_MC_IDCT_DAT)
+#define HCODEC_MC_CTRL_GCLK_CTRL 0x194d 	///../ucode/dos_register.h:4048
+#define P_HCODEC_MC_CTRL_GCLK_CTRL 		DOS_REG_ADDR(HCODEC_MC_CTRL_GCLK_CTRL)
+#define HCODEC_MC_OTHER_GCLK_CTRL 0x194e 	///../ucode/dos_register.h:4049
+#define P_HCODEC_MC_OTHER_GCLK_CTRL 		DOS_REG_ADDR(HCODEC_MC_OTHER_GCLK_CTRL)
+#define HCODEC_MC_CTRL2 0x194f 	///../ucode/dos_register.h:4054
+#define P_HCODEC_MC_CTRL2 		DOS_REG_ADDR(HCODEC_MC_CTRL2)
+#define HCODEC_MDEC_PIC_DC_CTRL 0x198e 	///../ucode/dos_register.h:4061
+#define P_HCODEC_MDEC_PIC_DC_CTRL 		DOS_REG_ADDR(HCODEC_MDEC_PIC_DC_CTRL)
+#define HCODEC_MDEC_PIC_DC_STATUS 0x198f 	///../ucode/dos_register.h:4062
+#define P_HCODEC_MDEC_PIC_DC_STATUS 		DOS_REG_ADDR(HCODEC_MDEC_PIC_DC_STATUS)
+#define HCODEC_ANC0_CANVAS_ADDR 0x1990 	///../ucode/dos_register.h:4063
+#define P_HCODEC_ANC0_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC0_CANVAS_ADDR)
+#define HCODEC_ANC1_CANVAS_ADDR 0x1991 	///../ucode/dos_register.h:4064
+#define P_HCODEC_ANC1_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC1_CANVAS_ADDR)
+#define HCODEC_ANC2_CANVAS_ADDR 0x1992 	///../ucode/dos_register.h:4065
+#define P_HCODEC_ANC2_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC2_CANVAS_ADDR)
+#define HCODEC_ANC3_CANVAS_ADDR 0x1993 	///../ucode/dos_register.h:4066
+#define P_HCODEC_ANC3_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC3_CANVAS_ADDR)
+#define HCODEC_ANC4_CANVAS_ADDR 0x1994 	///../ucode/dos_register.h:4067
+#define P_HCODEC_ANC4_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC4_CANVAS_ADDR)
+#define HCODEC_ANC5_CANVAS_ADDR 0x1995 	///../ucode/dos_register.h:4068
+#define P_HCODEC_ANC5_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC5_CANVAS_ADDR)
+#define HCODEC_ANC6_CANVAS_ADDR 0x1996 	///../ucode/dos_register.h:4069
+#define P_HCODEC_ANC6_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC6_CANVAS_ADDR)
+#define HCODEC_ANC7_CANVAS_ADDR 0x1997 	///../ucode/dos_register.h:4070
+#define P_HCODEC_ANC7_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC7_CANVAS_ADDR)
+#define HCODEC_ANC8_CANVAS_ADDR 0x1998 	///../ucode/dos_register.h:4071
+#define P_HCODEC_ANC8_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC8_CANVAS_ADDR)
+#define HCODEC_ANC9_CANVAS_ADDR 0x1999 	///../ucode/dos_register.h:4072
+#define P_HCODEC_ANC9_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC9_CANVAS_ADDR)
+#define HCODEC_ANC10_CANVAS_ADDR 0x199a 	///../ucode/dos_register.h:4073
+#define P_HCODEC_ANC10_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC10_CANVAS_ADDR)
+#define HCODEC_ANC11_CANVAS_ADDR 0x199b 	///../ucode/dos_register.h:4074
+#define P_HCODEC_ANC11_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC11_CANVAS_ADDR)
+#define HCODEC_ANC12_CANVAS_ADDR 0x199c 	///../ucode/dos_register.h:4075
+#define P_HCODEC_ANC12_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC12_CANVAS_ADDR)
+#define HCODEC_ANC13_CANVAS_ADDR 0x199d 	///../ucode/dos_register.h:4076
+#define P_HCODEC_ANC13_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC13_CANVAS_ADDR)
+#define HCODEC_ANC14_CANVAS_ADDR 0x199e 	///../ucode/dos_register.h:4077
+#define P_HCODEC_ANC14_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC14_CANVAS_ADDR)
+#define HCODEC_ANC15_CANVAS_ADDR 0x199f 	///../ucode/dos_register.h:4078
+#define P_HCODEC_ANC15_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC15_CANVAS_ADDR)
+#define HCODEC_ANC16_CANVAS_ADDR 0x19a0 	///../ucode/dos_register.h:4079
+#define P_HCODEC_ANC16_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC16_CANVAS_ADDR)
+#define HCODEC_ANC17_CANVAS_ADDR 0x19a1 	///../ucode/dos_register.h:4080
+#define P_HCODEC_ANC17_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC17_CANVAS_ADDR)
+#define HCODEC_ANC18_CANVAS_ADDR 0x19a2 	///../ucode/dos_register.h:4081
+#define P_HCODEC_ANC18_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC18_CANVAS_ADDR)
+#define HCODEC_ANC19_CANVAS_ADDR 0x19a3 	///../ucode/dos_register.h:4082
+#define P_HCODEC_ANC19_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC19_CANVAS_ADDR)
+#define HCODEC_ANC20_CANVAS_ADDR 0x19a4 	///../ucode/dos_register.h:4083
+#define P_HCODEC_ANC20_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC20_CANVAS_ADDR)
+#define HCODEC_ANC21_CANVAS_ADDR 0x19a5 	///../ucode/dos_register.h:4084
+#define P_HCODEC_ANC21_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC21_CANVAS_ADDR)
+#define HCODEC_ANC22_CANVAS_ADDR 0x19a6 	///../ucode/dos_register.h:4085
+#define P_HCODEC_ANC22_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC22_CANVAS_ADDR)
+#define HCODEC_ANC23_CANVAS_ADDR 0x19a7 	///../ucode/dos_register.h:4086
+#define P_HCODEC_ANC23_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC23_CANVAS_ADDR)
+#define HCODEC_ANC24_CANVAS_ADDR 0x19a8 	///../ucode/dos_register.h:4087
+#define P_HCODEC_ANC24_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC24_CANVAS_ADDR)
+#define HCODEC_ANC25_CANVAS_ADDR 0x19a9 	///../ucode/dos_register.h:4088
+#define P_HCODEC_ANC25_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC25_CANVAS_ADDR)
+#define HCODEC_ANC26_CANVAS_ADDR 0x19aa 	///../ucode/dos_register.h:4089
+#define P_HCODEC_ANC26_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC26_CANVAS_ADDR)
+#define HCODEC_ANC27_CANVAS_ADDR 0x19ab 	///../ucode/dos_register.h:4090
+#define P_HCODEC_ANC27_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC27_CANVAS_ADDR)
+#define HCODEC_ANC28_CANVAS_ADDR 0x19ac 	///../ucode/dos_register.h:4091
+#define P_HCODEC_ANC28_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC28_CANVAS_ADDR)
+#define HCODEC_ANC29_CANVAS_ADDR 0x19ad 	///../ucode/dos_register.h:4092
+#define P_HCODEC_ANC29_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC29_CANVAS_ADDR)
+#define HCODEC_ANC30_CANVAS_ADDR 0x19ae 	///../ucode/dos_register.h:4093
+#define P_HCODEC_ANC30_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC30_CANVAS_ADDR)
+#define HCODEC_ANC31_CANVAS_ADDR 0x19af 	///../ucode/dos_register.h:4094
+#define P_HCODEC_ANC31_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_ANC31_CANVAS_ADDR)
+#define HCODEC_DBKR_CANVAS_ADDR 0x19b0 	///../ucode/dos_register.h:4095
+#define P_HCODEC_DBKR_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_DBKR_CANVAS_ADDR)
+#define HCODEC_DBKW_CANVAS_ADDR 0x19b1 	///../ucode/dos_register.h:4096
+#define P_HCODEC_DBKW_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_DBKW_CANVAS_ADDR)
+#define HCODEC_REC_CANVAS_ADDR 0x19b2 	///../ucode/dos_register.h:4097
+#define P_HCODEC_REC_CANVAS_ADDR 		DOS_REG_ADDR(HCODEC_REC_CANVAS_ADDR)
+#define HCODEC_CURR_CANVAS_CTRL 0x19b3 	///../ucode/dos_register.h:4100
+#define P_HCODEC_CURR_CANVAS_CTRL 		DOS_REG_ADDR(HCODEC_CURR_CANVAS_CTRL)
+#define HCODEC_MDEC_PIC_DC_THRESH 0x19b8 	///../ucode/dos_register.h:4101
+#define P_HCODEC_MDEC_PIC_DC_THRESH 		DOS_REG_ADDR(HCODEC_MDEC_PIC_DC_THRESH)
+#define HCODEC_MDEC_PICR_BUF_STATUS 0x19b9 	///../ucode/dos_register.h:4102
+#define P_HCODEC_MDEC_PICR_BUF_STATUS 		DOS_REG_ADDR(HCODEC_MDEC_PICR_BUF_STATUS)
+#define HCODEC_MDEC_PICW_BUF_STATUS 0x19ba 	///../ucode/dos_register.h:4103
+#define P_HCODEC_MDEC_PICW_BUF_STATUS 		DOS_REG_ADDR(HCODEC_MDEC_PICW_BUF_STATUS)
+#define HCODEC_MCW_DBLK_WRRSP_CNT 0x19bb 	///../ucode/dos_register.h:4104
+#define P_HCODEC_MCW_DBLK_WRRSP_CNT 		DOS_REG_ADDR(HCODEC_MCW_DBLK_WRRSP_CNT)
+#define HCODEC_MC_MBBOT_WRRSP_CNT 0x19bc 	///../ucode/dos_register.h:4105
+#define P_HCODEC_MC_MBBOT_WRRSP_CNT 		DOS_REG_ADDR(HCODEC_MC_MBBOT_WRRSP_CNT)
+#define HCODEC_MDEC_PICW_BUF2_STATUS 0x19bd 	///../ucode/dos_register.h:4106
+#define P_HCODEC_MDEC_PICW_BUF2_STATUS 		DOS_REG_ADDR(HCODEC_MDEC_PICW_BUF2_STATUS)
+#define HCODEC_WRRSP_FIFO_PICW_DBK 0x19be 	///../ucode/dos_register.h:4107
+#define P_HCODEC_WRRSP_FIFO_PICW_DBK 		DOS_REG_ADDR(HCODEC_WRRSP_FIFO_PICW_DBK)
+#define HCODEC_WRRSP_FIFO_PICW_MC 0x19bf 	///../ucode/dos_register.h:4108
+#define P_HCODEC_WRRSP_FIFO_PICW_MC 		DOS_REG_ADDR(HCODEC_WRRSP_FIFO_PICW_MC)
+#define HCODEC_AV_SCRATCH_0 0x19c0 	///../ucode/dos_register.h:4109
+#define P_HCODEC_AV_SCRATCH_0 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_0)
+#define HCODEC_AV_SCRATCH_1 0x19c1 	///../ucode/dos_register.h:4110
+#define P_HCODEC_AV_SCRATCH_1 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_1)
+#define HCODEC_AV_SCRATCH_2 0x19c2 	///../ucode/dos_register.h:4111
+#define P_HCODEC_AV_SCRATCH_2 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_2)
+#define HCODEC_AV_SCRATCH_3 0x19c3 	///../ucode/dos_register.h:4112
+#define P_HCODEC_AV_SCRATCH_3 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_3)
+#define HCODEC_AV_SCRATCH_4 0x19c4 	///../ucode/dos_register.h:4113
+#define P_HCODEC_AV_SCRATCH_4 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_4)
+#define HCODEC_AV_SCRATCH_5 0x19c5 	///../ucode/dos_register.h:4114
+#define P_HCODEC_AV_SCRATCH_5 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_5)
+#define HCODEC_AV_SCRATCH_6 0x19c6 	///../ucode/dos_register.h:4115
+#define P_HCODEC_AV_SCRATCH_6 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_6)
+#define HCODEC_AV_SCRATCH_7 0x19c7 	///../ucode/dos_register.h:4116
+#define P_HCODEC_AV_SCRATCH_7 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_7)
+#define HCODEC_AV_SCRATCH_8 0x19c8 	///../ucode/dos_register.h:4117
+#define P_HCODEC_AV_SCRATCH_8 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_8)
+#define HCODEC_AV_SCRATCH_9 0x19c9 	///../ucode/dos_register.h:4118
+#define P_HCODEC_AV_SCRATCH_9 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_9)
+#define HCODEC_AV_SCRATCH_A 0x19ca 	///../ucode/dos_register.h:4119
+#define P_HCODEC_AV_SCRATCH_A 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_A)
+#define HCODEC_AV_SCRATCH_B 0x19cb 	///../ucode/dos_register.h:4120
+#define P_HCODEC_AV_SCRATCH_B 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_B)
+#define HCODEC_AV_SCRATCH_C 0x19cc 	///../ucode/dos_register.h:4121
+#define P_HCODEC_AV_SCRATCH_C 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_C)
+#define HCODEC_AV_SCRATCH_D 0x19cd 	///../ucode/dos_register.h:4122
+#define P_HCODEC_AV_SCRATCH_D 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_D)
+#define HCODEC_AV_SCRATCH_E 0x19ce 	///../ucode/dos_register.h:4123
+#define P_HCODEC_AV_SCRATCH_E 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_E)
+#define HCODEC_AV_SCRATCH_F 0x19cf 	///../ucode/dos_register.h:4124
+#define P_HCODEC_AV_SCRATCH_F 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_F)
+#define HCODEC_AV_SCRATCH_G 0x19d0 	///../ucode/dos_register.h:4125
+#define P_HCODEC_AV_SCRATCH_G 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_G)
+#define HCODEC_AV_SCRATCH_H 0x19d1 	///../ucode/dos_register.h:4126
+#define P_HCODEC_AV_SCRATCH_H 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_H)
+#define HCODEC_AV_SCRATCH_I 0x19d2 	///../ucode/dos_register.h:4127
+#define P_HCODEC_AV_SCRATCH_I 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_I)
+#define HCODEC_AV_SCRATCH_J 0x19d3 	///../ucode/dos_register.h:4128
+#define P_HCODEC_AV_SCRATCH_J 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_J)
+#define HCODEC_AV_SCRATCH_K 0x19d4 	///../ucode/dos_register.h:4129
+#define P_HCODEC_AV_SCRATCH_K 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_K)
+#define HCODEC_AV_SCRATCH_L 0x19d5 	///../ucode/dos_register.h:4130
+#define P_HCODEC_AV_SCRATCH_L 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_L)
+#define HCODEC_AV_SCRATCH_M 0x19d6 	///../ucode/dos_register.h:4131
+#define P_HCODEC_AV_SCRATCH_M 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_M)
+#define HCODEC_AV_SCRATCH_N 0x19d7 	///../ucode/dos_register.h:4132
+#define P_HCODEC_AV_SCRATCH_N 		DOS_REG_ADDR(HCODEC_AV_SCRATCH_N)
+#define HCODEC_WRRSP_CO_MB 0x19d8 	///../ucode/dos_register.h:4136
+#define P_HCODEC_WRRSP_CO_MB 		DOS_REG_ADDR(HCODEC_WRRSP_CO_MB)
+#define HCODEC_WRRSP_DCAC 0x19d9 	///../ucode/dos_register.h:4140
+#define P_HCODEC_WRRSP_DCAC 		DOS_REG_ADDR(HCODEC_WRRSP_DCAC)
+#define HCODEC_WRRSP_VLD 0x19da 	///../ucode/dos_register.h:4142
+#define P_HCODEC_WRRSP_VLD 		DOS_REG_ADDR(HCODEC_WRRSP_VLD)
+#define HCODEC_MDEC_DOUBLEW_CFG0 0x19db 	///../ucode/dos_register.h:4158
+#define P_HCODEC_MDEC_DOUBLEW_CFG0 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG0)
+#define HCODEC_MDEC_DOUBLEW_CFG1 0x19dc 	///../ucode/dos_register.h:4164
+#define P_HCODEC_MDEC_DOUBLEW_CFG1 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG1)
+#define HCODEC_MDEC_DOUBLEW_CFG2 0x19dd 	///../ucode/dos_register.h:4169
+#define P_HCODEC_MDEC_DOUBLEW_CFG2 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG2)
+#define HCODEC_MDEC_DOUBLEW_CFG3 0x19de 	///../ucode/dos_register.h:4171
+#define P_HCODEC_MDEC_DOUBLEW_CFG3 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG3)
+#define HCODEC_MDEC_DOUBLEW_CFG4 0x19df 	///../ucode/dos_register.h:4173
+#define P_HCODEC_MDEC_DOUBLEW_CFG4 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG4)
+#define HCODEC_MDEC_DOUBLEW_CFG5 0x19e0 	///../ucode/dos_register.h:4176
+#define P_HCODEC_MDEC_DOUBLEW_CFG5 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG5)
+#define HCODEC_MDEC_DOUBLEW_CFG6 0x19e1 	///../ucode/dos_register.h:4178
+#define P_HCODEC_MDEC_DOUBLEW_CFG6 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG6)
+#define HCODEC_MDEC_DOUBLEW_CFG7 0x19e2 	///../ucode/dos_register.h:4180
+#define P_HCODEC_MDEC_DOUBLEW_CFG7 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG7)
+#define HCODEC_MDEC_DOUBLEW_STATUS 0x19e3 	///../ucode/dos_register.h:4184
+#define P_HCODEC_MDEC_DOUBLEW_STATUS 		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_STATUS)
+#define HCODEC_DBLK_RST 0x1950 	///../ucode/dos_register.h:4202
+#define P_HCODEC_DBLK_RST 		DOS_REG_ADDR(HCODEC_DBLK_RST)
+#define HCODEC_DBLK_CTRL 0x1951 	///../ucode/dos_register.h:4203
+#define P_HCODEC_DBLK_CTRL 		DOS_REG_ADDR(HCODEC_DBLK_CTRL)
+#define HCODEC_DBLK_MB_WID_HEIGHT 0x1952 	///../ucode/dos_register.h:4204
+#define P_HCODEC_DBLK_MB_WID_HEIGHT 		DOS_REG_ADDR(HCODEC_DBLK_MB_WID_HEIGHT)
+#define HCODEC_DBLK_STATUS 0x1953 	///../ucode/dos_register.h:4205
+#define P_HCODEC_DBLK_STATUS 		DOS_REG_ADDR(HCODEC_DBLK_STATUS)
+#define HCODEC_DBLK_CMD_CTRL 0x1954 	///../ucode/dos_register.h:4206
+#define P_HCODEC_DBLK_CMD_CTRL 		DOS_REG_ADDR(HCODEC_DBLK_CMD_CTRL)
+#define HCODEC_DBLK_MB_XY 0x1955 	///../ucode/dos_register.h:4207
+#define P_HCODEC_DBLK_MB_XY 		DOS_REG_ADDR(HCODEC_DBLK_MB_XY)
+#define HCODEC_DBLK_QP 0x1956 	///../ucode/dos_register.h:4208
+#define P_HCODEC_DBLK_QP 		DOS_REG_ADDR(HCODEC_DBLK_QP)
+#define HCODEC_DBLK_Y_BHFILT 0x1957 	///../ucode/dos_register.h:4209
+#define P_HCODEC_DBLK_Y_BHFILT 		DOS_REG_ADDR(HCODEC_DBLK_Y_BHFILT)
+#define HCODEC_DBLK_Y_BHFILT_HIGH 0x1958 	///../ucode/dos_register.h:4210
+#define P_HCODEC_DBLK_Y_BHFILT_HIGH 		DOS_REG_ADDR(HCODEC_DBLK_Y_BHFILT_HIGH)
+#define HCODEC_DBLK_Y_BVFILT 0x1959 	///../ucode/dos_register.h:4211
+#define P_HCODEC_DBLK_Y_BVFILT 		DOS_REG_ADDR(HCODEC_DBLK_Y_BVFILT)
+#define HCODEC_DBLK_CB_BFILT 0x195a 	///../ucode/dos_register.h:4212
+#define P_HCODEC_DBLK_CB_BFILT 		DOS_REG_ADDR(HCODEC_DBLK_CB_BFILT)
+#define HCODEC_DBLK_CR_BFILT 0x195b 	///../ucode/dos_register.h:4213
+#define P_HCODEC_DBLK_CR_BFILT 		DOS_REG_ADDR(HCODEC_DBLK_CR_BFILT)
+#define HCODEC_DBLK_Y_HFILT 0x195c 	///../ucode/dos_register.h:4214
+#define P_HCODEC_DBLK_Y_HFILT 		DOS_REG_ADDR(HCODEC_DBLK_Y_HFILT)
+#define HCODEC_DBLK_Y_HFILT_HIGH 0x195d 	///../ucode/dos_register.h:4215
+#define P_HCODEC_DBLK_Y_HFILT_HIGH 		DOS_REG_ADDR(HCODEC_DBLK_Y_HFILT_HIGH)
+#define HCODEC_DBLK_Y_VFILT 0x195e 	///../ucode/dos_register.h:4216
+#define P_HCODEC_DBLK_Y_VFILT 		DOS_REG_ADDR(HCODEC_DBLK_Y_VFILT)
+#define HCODEC_DBLK_CB_FILT 0x195f 	///../ucode/dos_register.h:4217
+#define P_HCODEC_DBLK_CB_FILT 		DOS_REG_ADDR(HCODEC_DBLK_CB_FILT)
+#define HCODEC_DBLK_CR_FILT 0x1960 	///../ucode/dos_register.h:4218
+#define P_HCODEC_DBLK_CR_FILT 		DOS_REG_ADDR(HCODEC_DBLK_CR_FILT)
+#define HCODEC_DBLK_BETAX_QP_SEL 0x1961 	///../ucode/dos_register.h:4219
+#define P_HCODEC_DBLK_BETAX_QP_SEL 		DOS_REG_ADDR(HCODEC_DBLK_BETAX_QP_SEL)
+#define HCODEC_DBLK_CLIP_CTRL0 0x1962 	///../ucode/dos_register.h:4220
+#define P_HCODEC_DBLK_CLIP_CTRL0 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL0)
+#define HCODEC_DBLK_CLIP_CTRL1 0x1963 	///../ucode/dos_register.h:4221
+#define P_HCODEC_DBLK_CLIP_CTRL1 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL1)
+#define HCODEC_DBLK_CLIP_CTRL2 0x1964 	///../ucode/dos_register.h:4222
+#define P_HCODEC_DBLK_CLIP_CTRL2 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL2)
+#define HCODEC_DBLK_CLIP_CTRL3 0x1965 	///../ucode/dos_register.h:4223
+#define P_HCODEC_DBLK_CLIP_CTRL3 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL3)
+#define HCODEC_DBLK_CLIP_CTRL4 0x1966 	///../ucode/dos_register.h:4224
+#define P_HCODEC_DBLK_CLIP_CTRL4 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL4)
+#define HCODEC_DBLK_CLIP_CTRL5 0x1967 	///../ucode/dos_register.h:4225
+#define P_HCODEC_DBLK_CLIP_CTRL5 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL5)
+#define HCODEC_DBLK_CLIP_CTRL6 0x1968 	///../ucode/dos_register.h:4226
+#define P_HCODEC_DBLK_CLIP_CTRL6 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL6)
+#define HCODEC_DBLK_CLIP_CTRL7 0x1969 	///../ucode/dos_register.h:4227
+#define P_HCODEC_DBLK_CLIP_CTRL7 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL7)
+#define HCODEC_DBLK_CLIP_CTRL8 0x196a 	///../ucode/dos_register.h:4228
+#define P_HCODEC_DBLK_CLIP_CTRL8 		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL8)
+#define HCODEC_DBLK_STATUS1 0x196b 	///../ucode/dos_register.h:4229
+#define P_HCODEC_DBLK_STATUS1 		DOS_REG_ADDR(HCODEC_DBLK_STATUS1)
+#define HCODEC_DBLK_GCLK_FREE 0x196c 	///../ucode/dos_register.h:4230
+#define P_HCODEC_DBLK_GCLK_FREE 		DOS_REG_ADDR(HCODEC_DBLK_GCLK_FREE)
+#define HCODEC_DBLK_GCLK_OFF 0x196d 	///../ucode/dos_register.h:4231
+#define P_HCODEC_DBLK_GCLK_OFF 		DOS_REG_ADDR(HCODEC_DBLK_GCLK_OFF)
+#define HCODEC_DBLK_AVSFLAGS 0x196e 	///../ucode/dos_register.h:4232
+#define P_HCODEC_DBLK_AVSFLAGS 		DOS_REG_ADDR(HCODEC_DBLK_AVSFLAGS)
+#define HCODEC_DBLK_CBPY 0x1970 	///../ucode/dos_register.h:4234
+#define P_HCODEC_DBLK_CBPY 		DOS_REG_ADDR(HCODEC_DBLK_CBPY)
+#define HCODEC_DBLK_CBPY_ADJ 0x1971 	///../ucode/dos_register.h:4238
+#define P_HCODEC_DBLK_CBPY_ADJ 		DOS_REG_ADDR(HCODEC_DBLK_CBPY_ADJ)
+#define HCODEC_DBLK_CBPC 0x1972 	///../ucode/dos_register.h:4240
+#define P_HCODEC_DBLK_CBPC 		DOS_REG_ADDR(HCODEC_DBLK_CBPC)
+#define HCODEC_DBLK_CBPC_ADJ 0x1973 	///../ucode/dos_register.h:4248
+#define P_HCODEC_DBLK_CBPC_ADJ 		DOS_REG_ADDR(HCODEC_DBLK_CBPC_ADJ)
+#define HCODEC_DBLK_VHMVD 0x1974 	///../ucode/dos_register.h:4251
+#define P_HCODEC_DBLK_VHMVD 		DOS_REG_ADDR(HCODEC_DBLK_VHMVD)
+#define HCODEC_DBLK_STRONG 0x1975 	///../ucode/dos_register.h:4265
+#define P_HCODEC_DBLK_STRONG 		DOS_REG_ADDR(HCODEC_DBLK_STRONG)
+#define HCODEC_DBLK_RV8_QUANT 0x1976 	///../ucode/dos_register.h:4269
+#define P_HCODEC_DBLK_RV8_QUANT 		DOS_REG_ADDR(HCODEC_DBLK_RV8_QUANT)
+#define HCODEC_DBLK_CBUS_HCMD2 0x1977 	///../ucode/dos_register.h:4270
+#define P_HCODEC_DBLK_CBUS_HCMD2 		DOS_REG_ADDR(HCODEC_DBLK_CBUS_HCMD2)
+#define HCODEC_DBLK_CBUS_HCMD1 0x1978 	///../ucode/dos_register.h:4271
+#define P_HCODEC_DBLK_CBUS_HCMD1 		DOS_REG_ADDR(HCODEC_DBLK_CBUS_HCMD1)
+#define HCODEC_DBLK_CBUS_HCMD0 0x1979 	///../ucode/dos_register.h:4272
+#define P_HCODEC_DBLK_CBUS_HCMD0 		DOS_REG_ADDR(HCODEC_DBLK_CBUS_HCMD0)
+#define HCODEC_DBLK_VLD_HCMD2 0x197a 	///../ucode/dos_register.h:4273
+#define P_HCODEC_DBLK_VLD_HCMD2 		DOS_REG_ADDR(HCODEC_DBLK_VLD_HCMD2)
+#define HCODEC_DBLK_VLD_HCMD1 0x197b 	///../ucode/dos_register.h:4274
+#define P_HCODEC_DBLK_VLD_HCMD1 		DOS_REG_ADDR(HCODEC_DBLK_VLD_HCMD1)
+#define HCODEC_DBLK_VLD_HCMD0 0x197c 	///../ucode/dos_register.h:4275
+#define P_HCODEC_DBLK_VLD_HCMD0 		DOS_REG_ADDR(HCODEC_DBLK_VLD_HCMD0)
+#define HCODEC_DBLK_OST_YBASE 0x197d 	///../ucode/dos_register.h:4276
+#define P_HCODEC_DBLK_OST_YBASE 		DOS_REG_ADDR(HCODEC_DBLK_OST_YBASE)
+#define HCODEC_DBLK_OST_CBCRDIFF 0x197e 	///../ucode/dos_register.h:4277
+#define P_HCODEC_DBLK_OST_CBCRDIFF 		DOS_REG_ADDR(HCODEC_DBLK_OST_CBCRDIFF)
+#define HCODEC_DBLK_CTRL1 0x197f 	///../ucode/dos_register.h:4280
+#define P_HCODEC_DBLK_CTRL1 		DOS_REG_ADDR(HCODEC_DBLK_CTRL1)
+#define HCODEC_MCRCC_CTL1 0x1980 	///../ucode/dos_register.h:4286
+#define P_HCODEC_MCRCC_CTL1 		DOS_REG_ADDR(HCODEC_MCRCC_CTL1)
+#define HCODEC_MCRCC_CTL2 0x1981 	///../ucode/dos_register.h:4292
+#define P_HCODEC_MCRCC_CTL2 		DOS_REG_ADDR(HCODEC_MCRCC_CTL2)
+#define HCODEC_MCRCC_CTL3 0x1982 	///../ucode/dos_register.h:4298
+#define P_HCODEC_MCRCC_CTL3 		DOS_REG_ADDR(HCODEC_MCRCC_CTL3)
+#define HCODEC_GCLK_EN 0x1983 	///../ucode/dos_register.h:4311
+#define P_HCODEC_GCLK_EN 		DOS_REG_ADDR(HCODEC_GCLK_EN)
+#define HCODEC_MDEC_SW_RESET 0x1984 	///../ucode/dos_register.h:4326
+#define P_HCODEC_MDEC_SW_RESET 		DOS_REG_ADDR(HCODEC_MDEC_SW_RESET)
+#define VDEC2_MC_CTRL_REG 0x2900 	///../ucode/dos_register.h:4340
+#define P_VDEC2_MC_CTRL_REG 		DOS_REG_ADDR(VDEC2_MC_CTRL_REG)
+#define VDEC2_MC_MB_INFO 0x2901 	///../ucode/dos_register.h:4341
+#define P_VDEC2_MC_MB_INFO 		DOS_REG_ADDR(VDEC2_MC_MB_INFO)
+#define VDEC2_MC_PIC_INFO 0x2902 	///../ucode/dos_register.h:4342
+#define P_VDEC2_MC_PIC_INFO 		DOS_REG_ADDR(VDEC2_MC_PIC_INFO)
+#define VDEC2_MC_HALF_PEL_ONE 0x2903 	///../ucode/dos_register.h:4343
+#define P_VDEC2_MC_HALF_PEL_ONE 		DOS_REG_ADDR(VDEC2_MC_HALF_PEL_ONE)
+#define VDEC2_MC_HALF_PEL_TWO 0x2904 	///../ucode/dos_register.h:4344
+#define P_VDEC2_MC_HALF_PEL_TWO 		DOS_REG_ADDR(VDEC2_MC_HALF_PEL_TWO)
+#define VDEC2_POWER_CTL_MC 0x2905 	///../ucode/dos_register.h:4345
+#define P_VDEC2_POWER_CTL_MC 		DOS_REG_ADDR(VDEC2_POWER_CTL_MC)
+#define VDEC2_MC_CMD 0x2906 	///../ucode/dos_register.h:4346
+#define P_VDEC2_MC_CMD 		DOS_REG_ADDR(VDEC2_MC_CMD)
+#define VDEC2_MC_CTRL0 0x2907 	///../ucode/dos_register.h:4347
+#define P_VDEC2_MC_CTRL0 		DOS_REG_ADDR(VDEC2_MC_CTRL0)
+#define VDEC2_MC_PIC_W_H 0x2908 	///../ucode/dos_register.h:4348
+#define P_VDEC2_MC_PIC_W_H 		DOS_REG_ADDR(VDEC2_MC_PIC_W_H)
+#define VDEC2_MC_STATUS0 0x2909 	///../ucode/dos_register.h:4349
+#define P_VDEC2_MC_STATUS0 		DOS_REG_ADDR(VDEC2_MC_STATUS0)
+#define VDEC2_MC_STATUS1 0x290a 	///../ucode/dos_register.h:4350
+#define P_VDEC2_MC_STATUS1 		DOS_REG_ADDR(VDEC2_MC_STATUS1)
+#define VDEC2_MC_CTRL1 0x290b 	///../ucode/dos_register.h:4351
+#define P_VDEC2_MC_CTRL1 		DOS_REG_ADDR(VDEC2_MC_CTRL1)
+#define VDEC2_MC_MIX_RATIO0 0x290c 	///../ucode/dos_register.h:4352
+#define P_VDEC2_MC_MIX_RATIO0 		DOS_REG_ADDR(VDEC2_MC_MIX_RATIO0)
+#define VDEC2_MC_MIX_RATIO1 0x290d 	///../ucode/dos_register.h:4353
+#define P_VDEC2_MC_MIX_RATIO1 		DOS_REG_ADDR(VDEC2_MC_MIX_RATIO1)
+#define VDEC2_MC_DP_MB_XY 0x290e 	///../ucode/dos_register.h:4354
+#define P_VDEC2_MC_DP_MB_XY 		DOS_REG_ADDR(VDEC2_MC_DP_MB_XY)
+#define VDEC2_MC_OM_MB_XY 0x290f 	///../ucode/dos_register.h:4355
+#define P_VDEC2_MC_OM_MB_XY 		DOS_REG_ADDR(VDEC2_MC_OM_MB_XY)
+#define VDEC2_PSCALE_RST 0x2910 	///../ucode/dos_register.h:4356
+#define P_VDEC2_PSCALE_RST 		DOS_REG_ADDR(VDEC2_PSCALE_RST)
+#define VDEC2_PSCALE_CTRL 0x2911 	///../ucode/dos_register.h:4357
+#define P_VDEC2_PSCALE_CTRL 		DOS_REG_ADDR(VDEC2_PSCALE_CTRL)
+#define VDEC2_PSCALE_PICI_W 0x2912 	///../ucode/dos_register.h:4358
+#define P_VDEC2_PSCALE_PICI_W 		DOS_REG_ADDR(VDEC2_PSCALE_PICI_W)
+#define VDEC2_PSCALE_PICI_H 0x2913 	///../ucode/dos_register.h:4359
+#define P_VDEC2_PSCALE_PICI_H 		DOS_REG_ADDR(VDEC2_PSCALE_PICI_H)
+#define VDEC2_PSCALE_PICO_W 0x2914 	///../ucode/dos_register.h:4360
+#define P_VDEC2_PSCALE_PICO_W 		DOS_REG_ADDR(VDEC2_PSCALE_PICO_W)
+#define VDEC2_PSCALE_PICO_H 0x2915 	///../ucode/dos_register.h:4361
+#define P_VDEC2_PSCALE_PICO_H 		DOS_REG_ADDR(VDEC2_PSCALE_PICO_H)
+#define VDEC2_PSCALE_PICO_START_X 0x2916 	///../ucode/dos_register.h:4362
+#define P_VDEC2_PSCALE_PICO_START_X 		DOS_REG_ADDR(VDEC2_PSCALE_PICO_START_X)
+#define VDEC2_PSCALE_PICO_START_Y 0x2917 	///../ucode/dos_register.h:4363
+#define P_VDEC2_PSCALE_PICO_START_Y 		DOS_REG_ADDR(VDEC2_PSCALE_PICO_START_Y)
+#define VDEC2_PSCALE_DUMMY 0x2918 	///../ucode/dos_register.h:4364
+#define P_VDEC2_PSCALE_DUMMY 		DOS_REG_ADDR(VDEC2_PSCALE_DUMMY)
+#define VDEC2_PSCALE_FILT0_COEF0 0x2919 	///../ucode/dos_register.h:4365
+#define P_VDEC2_PSCALE_FILT0_COEF0 		DOS_REG_ADDR(VDEC2_PSCALE_FILT0_COEF0)
+#define VDEC2_PSCALE_FILT0_COEF1 0x291a 	///../ucode/dos_register.h:4366
+#define P_VDEC2_PSCALE_FILT0_COEF1 		DOS_REG_ADDR(VDEC2_PSCALE_FILT0_COEF1)
+#define VDEC2_PSCALE_CMD_CTRL 0x291b 	///../ucode/dos_register.h:4367
+#define P_VDEC2_PSCALE_CMD_CTRL 		DOS_REG_ADDR(VDEC2_PSCALE_CMD_CTRL)
+#define VDEC2_PSCALE_CMD_BLK_X 0x291c 	///../ucode/dos_register.h:4368
+#define P_VDEC2_PSCALE_CMD_BLK_X 		DOS_REG_ADDR(VDEC2_PSCALE_CMD_BLK_X)
+#define VDEC2_PSCALE_CMD_BLK_Y 0x291d 	///../ucode/dos_register.h:4369
+#define P_VDEC2_PSCALE_CMD_BLK_Y 		DOS_REG_ADDR(VDEC2_PSCALE_CMD_BLK_Y)
+#define VDEC2_PSCALE_STATUS 0x291e 	///../ucode/dos_register.h:4370
+#define P_VDEC2_PSCALE_STATUS 		DOS_REG_ADDR(VDEC2_PSCALE_STATUS)
+#define VDEC2_PSCALE_BMEM_ADDR 0x291f 	///../ucode/dos_register.h:4371
+#define P_VDEC2_PSCALE_BMEM_ADDR 		DOS_REG_ADDR(VDEC2_PSCALE_BMEM_ADDR)
+#define VDEC2_PSCALE_BMEM_DAT 0x2920 	///../ucode/dos_register.h:4372
+#define P_VDEC2_PSCALE_BMEM_DAT 		DOS_REG_ADDR(VDEC2_PSCALE_BMEM_DAT)
+#define VDEC2_PSCALE_DRAM_BUF_CTRL 0x2921 	///../ucode/dos_register.h:4373
+#define P_VDEC2_PSCALE_DRAM_BUF_CTRL 		DOS_REG_ADDR(VDEC2_PSCALE_DRAM_BUF_CTRL)
+#define VDEC2_PSCALE_MCMD_CTRL 0x2922 	///../ucode/dos_register.h:4374
+#define P_VDEC2_PSCALE_MCMD_CTRL 		DOS_REG_ADDR(VDEC2_PSCALE_MCMD_CTRL)
+#define VDEC2_PSCALE_MCMD_XSIZE 0x2923 	///../ucode/dos_register.h:4375
+#define P_VDEC2_PSCALE_MCMD_XSIZE 		DOS_REG_ADDR(VDEC2_PSCALE_MCMD_XSIZE)
+#define VDEC2_PSCALE_MCMD_YSIZE 0x2924 	///../ucode/dos_register.h:4376
+#define P_VDEC2_PSCALE_MCMD_YSIZE 		DOS_REG_ADDR(VDEC2_PSCALE_MCMD_YSIZE)
+#define VDEC2_PSCALE_RBUF_START_BLKX 0x2925 	///../ucode/dos_register.h:4377
+#define P_VDEC2_PSCALE_RBUF_START_BLKX 		DOS_REG_ADDR(VDEC2_PSCALE_RBUF_START_BLKX)
+#define VDEC2_PSCALE_RBUF_START_BLKY 0x2926 	///../ucode/dos_register.h:4378
+#define P_VDEC2_PSCALE_RBUF_START_BLKY 		DOS_REG_ADDR(VDEC2_PSCALE_RBUF_START_BLKY)
+#define VDEC2_PSCALE_PICO_SHIFT_XY 0x2928 	///../ucode/dos_register.h:4380
+#define P_VDEC2_PSCALE_PICO_SHIFT_XY 		DOS_REG_ADDR(VDEC2_PSCALE_PICO_SHIFT_XY)
+#define VDEC2_PSCALE_CTRL1 0x2929 	///../ucode/dos_register.h:4381
+#define P_VDEC2_PSCALE_CTRL1 		DOS_REG_ADDR(VDEC2_PSCALE_CTRL1)
+#define VDEC2_PSCALE_SRCKEY_CTRL0 0x292a 	///../ucode/dos_register.h:4389
+#define P_VDEC2_PSCALE_SRCKEY_CTRL0 		DOS_REG_ADDR(VDEC2_PSCALE_SRCKEY_CTRL0)
+#define VDEC2_PSCALE_SRCKEY_CTRL1 0x292b 	///../ucode/dos_register.h:4392
+#define P_VDEC2_PSCALE_SRCKEY_CTRL1 		DOS_REG_ADDR(VDEC2_PSCALE_SRCKEY_CTRL1)
+#define VDEC2_PSCALE_CANVAS_RD_ADDR 0x292c 	///../ucode/dos_register.h:4396
+#define P_VDEC2_PSCALE_CANVAS_RD_ADDR 		DOS_REG_ADDR(VDEC2_PSCALE_CANVAS_RD_ADDR)
+#define VDEC2_PSCALE_CANVAS_WR_ADDR 0x292d 	///../ucode/dos_register.h:4400
+#define P_VDEC2_PSCALE_CANVAS_WR_ADDR 		DOS_REG_ADDR(VDEC2_PSCALE_CANVAS_WR_ADDR)
+#define VDEC2_PSCALE_CTRL2 0x292e 	///../ucode/dos_register.h:4404
+#define P_VDEC2_PSCALE_CTRL2 		DOS_REG_ADDR(VDEC2_PSCALE_CTRL2)
+#define VDEC2_MC_MPORT_CTRL 0x2940 	///../ucode/dos_register.h:4405
+#define P_VDEC2_MC_MPORT_CTRL 		DOS_REG_ADDR(VDEC2_MC_MPORT_CTRL)
+#define VDEC2_MC_MPORT_DAT 0x2941 	///../ucode/dos_register.h:4406
+#define P_VDEC2_MC_MPORT_DAT 		DOS_REG_ADDR(VDEC2_MC_MPORT_DAT)
+#define VDEC2_MC_WT_PRED_CTRL 0x2942 	///../ucode/dos_register.h:4407
+#define P_VDEC2_MC_WT_PRED_CTRL 		DOS_REG_ADDR(VDEC2_MC_WT_PRED_CTRL)
+#define VDEC2_MC_MBBOT_ST_EVEN_ADDR 0x2944 	///../ucode/dos_register.h:4408
+#define P_VDEC2_MC_MBBOT_ST_EVEN_ADDR 		DOS_REG_ADDR(VDEC2_MC_MBBOT_ST_EVEN_ADDR)
+#define VDEC2_MC_MBBOT_ST_ODD_ADDR 0x2945 	///../ucode/dos_register.h:4409
+#define P_VDEC2_MC_MBBOT_ST_ODD_ADDR 		DOS_REG_ADDR(VDEC2_MC_MBBOT_ST_ODD_ADDR)
+#define VDEC2_MC_DPDN_MB_XY 0x2946 	///../ucode/dos_register.h:4410
+#define P_VDEC2_MC_DPDN_MB_XY 		DOS_REG_ADDR(VDEC2_MC_DPDN_MB_XY)
+#define VDEC2_MC_OMDN_MB_XY 0x2947 	///../ucode/dos_register.h:4411
+#define P_VDEC2_MC_OMDN_MB_XY 		DOS_REG_ADDR(VDEC2_MC_OMDN_MB_XY)
+#define VDEC2_MC_HCMDBUF_H 0x2948 	///../ucode/dos_register.h:4412
+#define P_VDEC2_MC_HCMDBUF_H 		DOS_REG_ADDR(VDEC2_MC_HCMDBUF_H)
+#define VDEC2_MC_HCMDBUF_L 0x2949 	///../ucode/dos_register.h:4413
+#define P_VDEC2_MC_HCMDBUF_L 		DOS_REG_ADDR(VDEC2_MC_HCMDBUF_L)
+#define VDEC2_MC_HCMD_H 0x294a 	///../ucode/dos_register.h:4414
+#define P_VDEC2_MC_HCMD_H 		DOS_REG_ADDR(VDEC2_MC_HCMD_H)
+#define VDEC2_MC_HCMD_L 0x294b 	///../ucode/dos_register.h:4415
+#define P_VDEC2_MC_HCMD_L 		DOS_REG_ADDR(VDEC2_MC_HCMD_L)
+#define VDEC2_MC_IDCT_DAT 0x294c 	///../ucode/dos_register.h:4416
+#define P_VDEC2_MC_IDCT_DAT 		DOS_REG_ADDR(VDEC2_MC_IDCT_DAT)
+#define VDEC2_MC_CTRL_GCLK_CTRL 0x294d 	///../ucode/dos_register.h:4417
+#define P_VDEC2_MC_CTRL_GCLK_CTRL 		DOS_REG_ADDR(VDEC2_MC_CTRL_GCLK_CTRL)
+#define VDEC2_MC_OTHER_GCLK_CTRL 0x294e 	///../ucode/dos_register.h:4418
+#define P_VDEC2_MC_OTHER_GCLK_CTRL 		DOS_REG_ADDR(VDEC2_MC_OTHER_GCLK_CTRL)
+#define VDEC2_MC_CTRL2 0x294f 	///../ucode/dos_register.h:4423
+#define P_VDEC2_MC_CTRL2 		DOS_REG_ADDR(VDEC2_MC_CTRL2)
+#define VDEC2_MDEC_PIC_DC_CTRL 0x298e 	///../ucode/dos_register.h:4430
+#define P_VDEC2_MDEC_PIC_DC_CTRL 		DOS_REG_ADDR(VDEC2_MDEC_PIC_DC_CTRL)
+#define VDEC2_MDEC_PIC_DC_STATUS 0x298f 	///../ucode/dos_register.h:4431
+#define P_VDEC2_MDEC_PIC_DC_STATUS 		DOS_REG_ADDR(VDEC2_MDEC_PIC_DC_STATUS)
+#define VDEC2_ANC0_CANVAS_ADDR 0x2990 	///../ucode/dos_register.h:4432
+#define P_VDEC2_ANC0_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC0_CANVAS_ADDR)
+#define VDEC2_ANC1_CANVAS_ADDR 0x2991 	///../ucode/dos_register.h:4433
+#define P_VDEC2_ANC1_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC1_CANVAS_ADDR)
+#define VDEC2_ANC2_CANVAS_ADDR 0x2992 	///../ucode/dos_register.h:4434
+#define P_VDEC2_ANC2_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC2_CANVAS_ADDR)
+#define VDEC2_ANC3_CANVAS_ADDR 0x2993 	///../ucode/dos_register.h:4435
+#define P_VDEC2_ANC3_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC3_CANVAS_ADDR)
+#define VDEC2_ANC4_CANVAS_ADDR 0x2994 	///../ucode/dos_register.h:4436
+#define P_VDEC2_ANC4_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC4_CANVAS_ADDR)
+#define VDEC2_ANC5_CANVAS_ADDR 0x2995 	///../ucode/dos_register.h:4437
+#define P_VDEC2_ANC5_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC5_CANVAS_ADDR)
+#define VDEC2_ANC6_CANVAS_ADDR 0x2996 	///../ucode/dos_register.h:4438
+#define P_VDEC2_ANC6_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC6_CANVAS_ADDR)
+#define VDEC2_ANC7_CANVAS_ADDR 0x2997 	///../ucode/dos_register.h:4439
+#define P_VDEC2_ANC7_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC7_CANVAS_ADDR)
+#define VDEC2_ANC8_CANVAS_ADDR 0x2998 	///../ucode/dos_register.h:4440
+#define P_VDEC2_ANC8_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC8_CANVAS_ADDR)
+#define VDEC2_ANC9_CANVAS_ADDR 0x2999 	///../ucode/dos_register.h:4441
+#define P_VDEC2_ANC9_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC9_CANVAS_ADDR)
+#define VDEC2_ANC10_CANVAS_ADDR 0x299a 	///../ucode/dos_register.h:4442
+#define P_VDEC2_ANC10_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC10_CANVAS_ADDR)
+#define VDEC2_ANC11_CANVAS_ADDR 0x299b 	///../ucode/dos_register.h:4443
+#define P_VDEC2_ANC11_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC11_CANVAS_ADDR)
+#define VDEC2_ANC12_CANVAS_ADDR 0x299c 	///../ucode/dos_register.h:4444
+#define P_VDEC2_ANC12_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC12_CANVAS_ADDR)
+#define VDEC2_ANC13_CANVAS_ADDR 0x299d 	///../ucode/dos_register.h:4445
+#define P_VDEC2_ANC13_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC13_CANVAS_ADDR)
+#define VDEC2_ANC14_CANVAS_ADDR 0x299e 	///../ucode/dos_register.h:4446
+#define P_VDEC2_ANC14_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC14_CANVAS_ADDR)
+#define VDEC2_ANC15_CANVAS_ADDR 0x299f 	///../ucode/dos_register.h:4447
+#define P_VDEC2_ANC15_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC15_CANVAS_ADDR)
+#define VDEC2_ANC16_CANVAS_ADDR 0x29a0 	///../ucode/dos_register.h:4448
+#define P_VDEC2_ANC16_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC16_CANVAS_ADDR)
+#define VDEC2_ANC17_CANVAS_ADDR 0x29a1 	///../ucode/dos_register.h:4449
+#define P_VDEC2_ANC17_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC17_CANVAS_ADDR)
+#define VDEC2_ANC18_CANVAS_ADDR 0x29a2 	///../ucode/dos_register.h:4450
+#define P_VDEC2_ANC18_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC18_CANVAS_ADDR)
+#define VDEC2_ANC19_CANVAS_ADDR 0x29a3 	///../ucode/dos_register.h:4451
+#define P_VDEC2_ANC19_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC19_CANVAS_ADDR)
+#define VDEC2_ANC20_CANVAS_ADDR 0x29a4 	///../ucode/dos_register.h:4452
+#define P_VDEC2_ANC20_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC20_CANVAS_ADDR)
+#define VDEC2_ANC21_CANVAS_ADDR 0x29a5 	///../ucode/dos_register.h:4453
+#define P_VDEC2_ANC21_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC21_CANVAS_ADDR)
+#define VDEC2_ANC22_CANVAS_ADDR 0x29a6 	///../ucode/dos_register.h:4454
+#define P_VDEC2_ANC22_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC22_CANVAS_ADDR)
+#define VDEC2_ANC23_CANVAS_ADDR 0x29a7 	///../ucode/dos_register.h:4455
+#define P_VDEC2_ANC23_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC23_CANVAS_ADDR)
+#define VDEC2_ANC24_CANVAS_ADDR 0x29a8 	///../ucode/dos_register.h:4456
+#define P_VDEC2_ANC24_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC24_CANVAS_ADDR)
+#define VDEC2_ANC25_CANVAS_ADDR 0x29a9 	///../ucode/dos_register.h:4457
+#define P_VDEC2_ANC25_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC25_CANVAS_ADDR)
+#define VDEC2_ANC26_CANVAS_ADDR 0x29aa 	///../ucode/dos_register.h:4458
+#define P_VDEC2_ANC26_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC26_CANVAS_ADDR)
+#define VDEC2_ANC27_CANVAS_ADDR 0x29ab 	///../ucode/dos_register.h:4459
+#define P_VDEC2_ANC27_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC27_CANVAS_ADDR)
+#define VDEC2_ANC28_CANVAS_ADDR 0x29ac 	///../ucode/dos_register.h:4460
+#define P_VDEC2_ANC28_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC28_CANVAS_ADDR)
+#define VDEC2_ANC29_CANVAS_ADDR 0x29ad 	///../ucode/dos_register.h:4461
+#define P_VDEC2_ANC29_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC29_CANVAS_ADDR)
+#define VDEC2_ANC30_CANVAS_ADDR 0x29ae 	///../ucode/dos_register.h:4462
+#define P_VDEC2_ANC30_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC30_CANVAS_ADDR)
+#define VDEC2_ANC31_CANVAS_ADDR 0x29af 	///../ucode/dos_register.h:4463
+#define P_VDEC2_ANC31_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_ANC31_CANVAS_ADDR)
+#define VDEC2_DBKR_CANVAS_ADDR 0x29b0 	///../ucode/dos_register.h:4464
+#define P_VDEC2_DBKR_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_DBKR_CANVAS_ADDR)
+#define VDEC2_DBKW_CANVAS_ADDR 0x29b1 	///../ucode/dos_register.h:4465
+#define P_VDEC2_DBKW_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_DBKW_CANVAS_ADDR)
+#define VDEC2_REC_CANVAS_ADDR 0x29b2 	///../ucode/dos_register.h:4466
+#define P_VDEC2_REC_CANVAS_ADDR 		DOS_REG_ADDR(VDEC2_REC_CANVAS_ADDR)
+#define VDEC2_CURR_CANVAS_CTRL 0x29b3 	///../ucode/dos_register.h:4469
+#define P_VDEC2_CURR_CANVAS_CTRL 		DOS_REG_ADDR(VDEC2_CURR_CANVAS_CTRL)
+#define VDEC2_MDEC_PIC_DC_THRESH 0x29b8 	///../ucode/dos_register.h:4470
+#define P_VDEC2_MDEC_PIC_DC_THRESH 		DOS_REG_ADDR(VDEC2_MDEC_PIC_DC_THRESH)
+#define VDEC2_MDEC_PICR_BUF_STATUS 0x29b9 	///../ucode/dos_register.h:4471
+#define P_VDEC2_MDEC_PICR_BUF_STATUS 		DOS_REG_ADDR(VDEC2_MDEC_PICR_BUF_STATUS)
+#define VDEC2_MDEC_PICW_BUF_STATUS 0x29ba 	///../ucode/dos_register.h:4472
+#define P_VDEC2_MDEC_PICW_BUF_STATUS 		DOS_REG_ADDR(VDEC2_MDEC_PICW_BUF_STATUS)
+#define VDEC2_MCW_DBLK_WRRSP_CNT 0x29bb 	///../ucode/dos_register.h:4473
+#define P_VDEC2_MCW_DBLK_WRRSP_CNT 		DOS_REG_ADDR(VDEC2_MCW_DBLK_WRRSP_CNT)
+#define VDEC2_MC_MBBOT_WRRSP_CNT 0x29bc 	///../ucode/dos_register.h:4474
+#define P_VDEC2_MC_MBBOT_WRRSP_CNT 		DOS_REG_ADDR(VDEC2_MC_MBBOT_WRRSP_CNT)
+#define VDEC2_MDEC_PICW_BUF2_STATUS 0x29bd 	///../ucode/dos_register.h:4475
+#define P_VDEC2_MDEC_PICW_BUF2_STATUS 		DOS_REG_ADDR(VDEC2_MDEC_PICW_BUF2_STATUS)
+#define VDEC2_WRRSP_FIFO_PICW_DBK 0x29be 	///../ucode/dos_register.h:4476
+#define P_VDEC2_WRRSP_FIFO_PICW_DBK 		DOS_REG_ADDR(VDEC2_WRRSP_FIFO_PICW_DBK)
+#define VDEC2_WRRSP_FIFO_PICW_MC 0x29bf 	///../ucode/dos_register.h:4477
+#define P_VDEC2_WRRSP_FIFO_PICW_MC 		DOS_REG_ADDR(VDEC2_WRRSP_FIFO_PICW_MC)
+#define VDEC2_AV_SCRATCH_0 0x29c0 	///../ucode/dos_register.h:4478
+#define P_VDEC2_AV_SCRATCH_0 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_0)
+#define VDEC2_AV_SCRATCH_1 0x29c1 	///../ucode/dos_register.h:4479
+#define P_VDEC2_AV_SCRATCH_1 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_1)
+#define VDEC2_AV_SCRATCH_2 0x29c2 	///../ucode/dos_register.h:4480
+#define P_VDEC2_AV_SCRATCH_2 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_2)
+#define VDEC2_AV_SCRATCH_3 0x29c3 	///../ucode/dos_register.h:4481
+#define P_VDEC2_AV_SCRATCH_3 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_3)
+#define VDEC2_AV_SCRATCH_4 0x29c4 	///../ucode/dos_register.h:4482
+#define P_VDEC2_AV_SCRATCH_4 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_4)
+#define VDEC2_AV_SCRATCH_5 0x29c5 	///../ucode/dos_register.h:4483
+#define P_VDEC2_AV_SCRATCH_5 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_5)
+#define VDEC2_AV_SCRATCH_6 0x29c6 	///../ucode/dos_register.h:4484
+#define P_VDEC2_AV_SCRATCH_6 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_6)
+#define VDEC2_AV_SCRATCH_7 0x29c7 	///../ucode/dos_register.h:4485
+#define P_VDEC2_AV_SCRATCH_7 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_7)
+#define VDEC2_AV_SCRATCH_8 0x29c8 	///../ucode/dos_register.h:4486
+#define P_VDEC2_AV_SCRATCH_8 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_8)
+#define VDEC2_AV_SCRATCH_9 0x29c9 	///../ucode/dos_register.h:4487
+#define P_VDEC2_AV_SCRATCH_9 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_9)
+#define VDEC2_AV_SCRATCH_A 0x29ca 	///../ucode/dos_register.h:4488
+#define P_VDEC2_AV_SCRATCH_A 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_A)
+#define VDEC2_AV_SCRATCH_B 0x29cb 	///../ucode/dos_register.h:4489
+#define P_VDEC2_AV_SCRATCH_B 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_B)
+#define VDEC2_AV_SCRATCH_C 0x29cc 	///../ucode/dos_register.h:4490
+#define P_VDEC2_AV_SCRATCH_C 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_C)
+#define VDEC2_AV_SCRATCH_D 0x29cd 	///../ucode/dos_register.h:4491
+#define P_VDEC2_AV_SCRATCH_D 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_D)
+#define VDEC2_AV_SCRATCH_E 0x29ce 	///../ucode/dos_register.h:4492
+#define P_VDEC2_AV_SCRATCH_E 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_E)
+#define VDEC2_AV_SCRATCH_F 0x29cf 	///../ucode/dos_register.h:4493
+#define P_VDEC2_AV_SCRATCH_F 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_F)
+#define VDEC2_AV_SCRATCH_G 0x29d0 	///../ucode/dos_register.h:4494
+#define P_VDEC2_AV_SCRATCH_G 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_G)
+#define VDEC2_AV_SCRATCH_H 0x29d1 	///../ucode/dos_register.h:4495
+#define P_VDEC2_AV_SCRATCH_H 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_H)
+#define VDEC2_AV_SCRATCH_I 0x29d2 	///../ucode/dos_register.h:4496
+#define P_VDEC2_AV_SCRATCH_I 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_I)
+#define VDEC2_AV_SCRATCH_J 0x29d3 	///../ucode/dos_register.h:4497
+#define P_VDEC2_AV_SCRATCH_J 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_J)
+#define VDEC2_AV_SCRATCH_K 0x29d4 	///../ucode/dos_register.h:4498
+#define P_VDEC2_AV_SCRATCH_K 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_K)
+#define VDEC2_AV_SCRATCH_L 0x29d5 	///../ucode/dos_register.h:4499
+#define P_VDEC2_AV_SCRATCH_L 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_L)
+#define VDEC2_AV_SCRATCH_M 0x29d6 	///../ucode/dos_register.h:4500
+#define P_VDEC2_AV_SCRATCH_M 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_M)
+#define VDEC2_AV_SCRATCH_N 0x29d7 	///../ucode/dos_register.h:4501
+#define P_VDEC2_AV_SCRATCH_N 		DOS_REG_ADDR(VDEC2_AV_SCRATCH_N)
+#define VDEC2_WRRSP_CO_MB 0x29d8 	///../ucode/dos_register.h:4505
+#define P_VDEC2_WRRSP_CO_MB 		DOS_REG_ADDR(VDEC2_WRRSP_CO_MB)
+#define VDEC2_WRRSP_DCAC 0x29d9 	///../ucode/dos_register.h:4509
+#define P_VDEC2_WRRSP_DCAC 		DOS_REG_ADDR(VDEC2_WRRSP_DCAC)
+#define VDEC2_WRRSP_VLD 0x29da 	///../ucode/dos_register.h:4511
+#define P_VDEC2_WRRSP_VLD 		DOS_REG_ADDR(VDEC2_WRRSP_VLD)
+#define VDEC2_MDEC_DOUBLEW_CFG0 0x29db 	///../ucode/dos_register.h:4527
+#define P_VDEC2_MDEC_DOUBLEW_CFG0 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG0)
+#define VDEC2_MDEC_DOUBLEW_CFG1 0x29dc 	///../ucode/dos_register.h:4533
+#define P_VDEC2_MDEC_DOUBLEW_CFG1 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG1)
+#define VDEC2_MDEC_DOUBLEW_CFG2 0x29dd 	///../ucode/dos_register.h:4538
+#define P_VDEC2_MDEC_DOUBLEW_CFG2 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG2)
+#define VDEC2_MDEC_DOUBLEW_CFG3 0x29de 	///../ucode/dos_register.h:4540
+#define P_VDEC2_MDEC_DOUBLEW_CFG3 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG3)
+#define VDEC2_MDEC_DOUBLEW_CFG4 0x29df 	///../ucode/dos_register.h:4542
+#define P_VDEC2_MDEC_DOUBLEW_CFG4 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG4)
+#define VDEC2_MDEC_DOUBLEW_CFG5 0x29e0 	///../ucode/dos_register.h:4545
+#define P_VDEC2_MDEC_DOUBLEW_CFG5 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG5)
+#define VDEC2_MDEC_DOUBLEW_CFG6 0x29e1 	///../ucode/dos_register.h:4547
+#define P_VDEC2_MDEC_DOUBLEW_CFG6 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG6)
+#define VDEC2_MDEC_DOUBLEW_CFG7 0x29e2 	///../ucode/dos_register.h:4549
+#define P_VDEC2_MDEC_DOUBLEW_CFG7 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG7)
+#define VDEC2_MDEC_DOUBLEW_STATUS 0x29e3 	///../ucode/dos_register.h:4553
+#define P_VDEC2_MDEC_DOUBLEW_STATUS 		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_STATUS)
+#define VDEC2_DBLK_RST 0x2950 	///../ucode/dos_register.h:4571
+#define P_VDEC2_DBLK_RST 		DOS_REG_ADDR(VDEC2_DBLK_RST)
+#define VDEC2_DBLK_CTRL 0x2951 	///../ucode/dos_register.h:4572
+#define P_VDEC2_DBLK_CTRL 		DOS_REG_ADDR(VDEC2_DBLK_CTRL)
+#define VDEC2_DBLK_MB_WID_HEIGHT 0x2952 	///../ucode/dos_register.h:4573
+#define P_VDEC2_DBLK_MB_WID_HEIGHT 		DOS_REG_ADDR(VDEC2_DBLK_MB_WID_HEIGHT)
+#define VDEC2_DBLK_STATUS 0x2953 	///../ucode/dos_register.h:4574
+#define P_VDEC2_DBLK_STATUS 		DOS_REG_ADDR(VDEC2_DBLK_STATUS)
+#define VDEC2_DBLK_CMD_CTRL 0x2954 	///../ucode/dos_register.h:4575
+#define P_VDEC2_DBLK_CMD_CTRL 		DOS_REG_ADDR(VDEC2_DBLK_CMD_CTRL)
+#define VDEC2_DBLK_MB_XY 0x2955 	///../ucode/dos_register.h:4576
+#define P_VDEC2_DBLK_MB_XY 		DOS_REG_ADDR(VDEC2_DBLK_MB_XY)
+#define VDEC2_DBLK_QP 0x2956 	///../ucode/dos_register.h:4577
+#define P_VDEC2_DBLK_QP 		DOS_REG_ADDR(VDEC2_DBLK_QP)
+#define VDEC2_DBLK_Y_BHFILT 0x2957 	///../ucode/dos_register.h:4578
+#define P_VDEC2_DBLK_Y_BHFILT 		DOS_REG_ADDR(VDEC2_DBLK_Y_BHFILT)
+#define VDEC2_DBLK_Y_BHFILT_HIGH 0x2958 	///../ucode/dos_register.h:4579
+#define P_VDEC2_DBLK_Y_BHFILT_HIGH 		DOS_REG_ADDR(VDEC2_DBLK_Y_BHFILT_HIGH)
+#define VDEC2_DBLK_Y_BVFILT 0x2959 	///../ucode/dos_register.h:4580
+#define P_VDEC2_DBLK_Y_BVFILT 		DOS_REG_ADDR(VDEC2_DBLK_Y_BVFILT)
+#define VDEC2_DBLK_CB_BFILT 0x295a 	///../ucode/dos_register.h:4581
+#define P_VDEC2_DBLK_CB_BFILT 		DOS_REG_ADDR(VDEC2_DBLK_CB_BFILT)
+#define VDEC2_DBLK_CR_BFILT 0x295b 	///../ucode/dos_register.h:4582
+#define P_VDEC2_DBLK_CR_BFILT 		DOS_REG_ADDR(VDEC2_DBLK_CR_BFILT)
+#define VDEC2_DBLK_Y_HFILT 0x295c 	///../ucode/dos_register.h:4583
+#define P_VDEC2_DBLK_Y_HFILT 		DOS_REG_ADDR(VDEC2_DBLK_Y_HFILT)
+#define VDEC2_DBLK_Y_HFILT_HIGH 0x295d 	///../ucode/dos_register.h:4584
+#define P_VDEC2_DBLK_Y_HFILT_HIGH 		DOS_REG_ADDR(VDEC2_DBLK_Y_HFILT_HIGH)
+#define VDEC2_DBLK_Y_VFILT 0x295e 	///../ucode/dos_register.h:4585
+#define P_VDEC2_DBLK_Y_VFILT 		DOS_REG_ADDR(VDEC2_DBLK_Y_VFILT)
+#define VDEC2_DBLK_CB_FILT 0x295f 	///../ucode/dos_register.h:4586
+#define P_VDEC2_DBLK_CB_FILT 		DOS_REG_ADDR(VDEC2_DBLK_CB_FILT)
+#define VDEC2_DBLK_CR_FILT 0x2960 	///../ucode/dos_register.h:4587
+#define P_VDEC2_DBLK_CR_FILT 		DOS_REG_ADDR(VDEC2_DBLK_CR_FILT)
+#define VDEC2_DBLK_BETAX_QP_SEL 0x2961 	///../ucode/dos_register.h:4588
+#define P_VDEC2_DBLK_BETAX_QP_SEL 		DOS_REG_ADDR(VDEC2_DBLK_BETAX_QP_SEL)
+#define VDEC2_DBLK_CLIP_CTRL0 0x2962 	///../ucode/dos_register.h:4589
+#define P_VDEC2_DBLK_CLIP_CTRL0 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL0)
+#define VDEC2_DBLK_CLIP_CTRL1 0x2963 	///../ucode/dos_register.h:4590
+#define P_VDEC2_DBLK_CLIP_CTRL1 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL1)
+#define VDEC2_DBLK_CLIP_CTRL2 0x2964 	///../ucode/dos_register.h:4591
+#define P_VDEC2_DBLK_CLIP_CTRL2 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL2)
+#define VDEC2_DBLK_CLIP_CTRL3 0x2965 	///../ucode/dos_register.h:4592
+#define P_VDEC2_DBLK_CLIP_CTRL3 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL3)
+#define VDEC2_DBLK_CLIP_CTRL4 0x2966 	///../ucode/dos_register.h:4593
+#define P_VDEC2_DBLK_CLIP_CTRL4 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL4)
+#define VDEC2_DBLK_CLIP_CTRL5 0x2967 	///../ucode/dos_register.h:4594
+#define P_VDEC2_DBLK_CLIP_CTRL5 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL5)
+#define VDEC2_DBLK_CLIP_CTRL6 0x2968 	///../ucode/dos_register.h:4595
+#define P_VDEC2_DBLK_CLIP_CTRL6 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL6)
+#define VDEC2_DBLK_CLIP_CTRL7 0x2969 	///../ucode/dos_register.h:4596
+#define P_VDEC2_DBLK_CLIP_CTRL7 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL7)
+#define VDEC2_DBLK_CLIP_CTRL8 0x296a 	///../ucode/dos_register.h:4597
+#define P_VDEC2_DBLK_CLIP_CTRL8 		DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL8)
+#define VDEC2_DBLK_STATUS1 0x296b 	///../ucode/dos_register.h:4598
+#define P_VDEC2_DBLK_STATUS1 		DOS_REG_ADDR(VDEC2_DBLK_STATUS1)
+#define VDEC2_DBLK_GCLK_FREE 0x296c 	///../ucode/dos_register.h:4599
+#define P_VDEC2_DBLK_GCLK_FREE 		DOS_REG_ADDR(VDEC2_DBLK_GCLK_FREE)
+#define VDEC2_DBLK_GCLK_OFF 0x296d 	///../ucode/dos_register.h:4600
+#define P_VDEC2_DBLK_GCLK_OFF 		DOS_REG_ADDR(VDEC2_DBLK_GCLK_OFF)
+#define VDEC2_DBLK_AVSFLAGS 0x296e 	///../ucode/dos_register.h:4601
+#define P_VDEC2_DBLK_AVSFLAGS 		DOS_REG_ADDR(VDEC2_DBLK_AVSFLAGS)
+#define VDEC2_DBLK_CBPY 0x2970 	///../ucode/dos_register.h:4603
+#define P_VDEC2_DBLK_CBPY 		DOS_REG_ADDR(VDEC2_DBLK_CBPY)
+#define VDEC2_DBLK_CBPY_ADJ 0x2971 	///../ucode/dos_register.h:4607
+#define P_VDEC2_DBLK_CBPY_ADJ 		DOS_REG_ADDR(VDEC2_DBLK_CBPY_ADJ)
+#define VDEC2_DBLK_CBPC 0x2972 	///../ucode/dos_register.h:4609
+#define P_VDEC2_DBLK_CBPC 		DOS_REG_ADDR(VDEC2_DBLK_CBPC)
+#define VDEC2_DBLK_CBPC_ADJ 0x2973 	///../ucode/dos_register.h:4617
+#define P_VDEC2_DBLK_CBPC_ADJ 		DOS_REG_ADDR(VDEC2_DBLK_CBPC_ADJ)
+#define VDEC2_DBLK_VHMVD 0x2974 	///../ucode/dos_register.h:4620
+#define P_VDEC2_DBLK_VHMVD 		DOS_REG_ADDR(VDEC2_DBLK_VHMVD)
+#define VDEC2_DBLK_STRONG 0x2975 	///../ucode/dos_register.h:4634
+#define P_VDEC2_DBLK_STRONG 		DOS_REG_ADDR(VDEC2_DBLK_STRONG)
+#define VDEC2_DBLK_RV8_QUANT 0x2976 	///../ucode/dos_register.h:4638
+#define P_VDEC2_DBLK_RV8_QUANT 		DOS_REG_ADDR(VDEC2_DBLK_RV8_QUANT)
+#define VDEC2_DBLK_CBUS_HCMD2 0x2977 	///../ucode/dos_register.h:4639
+#define P_VDEC2_DBLK_CBUS_HCMD2 		DOS_REG_ADDR(VDEC2_DBLK_CBUS_HCMD2)
+#define VDEC2_DBLK_CBUS_HCMD1 0x2978 	///../ucode/dos_register.h:4640
+#define P_VDEC2_DBLK_CBUS_HCMD1 		DOS_REG_ADDR(VDEC2_DBLK_CBUS_HCMD1)
+#define VDEC2_DBLK_CBUS_HCMD0 0x2979 	///../ucode/dos_register.h:4641
+#define P_VDEC2_DBLK_CBUS_HCMD0 		DOS_REG_ADDR(VDEC2_DBLK_CBUS_HCMD0)
+#define VDEC2_DBLK_VLD_HCMD2 0x297a 	///../ucode/dos_register.h:4642
+#define P_VDEC2_DBLK_VLD_HCMD2 		DOS_REG_ADDR(VDEC2_DBLK_VLD_HCMD2)
+#define VDEC2_DBLK_VLD_HCMD1 0x297b 	///../ucode/dos_register.h:4643
+#define P_VDEC2_DBLK_VLD_HCMD1 		DOS_REG_ADDR(VDEC2_DBLK_VLD_HCMD1)
+#define VDEC2_DBLK_VLD_HCMD0 0x297c 	///../ucode/dos_register.h:4644
+#define P_VDEC2_DBLK_VLD_HCMD0 		DOS_REG_ADDR(VDEC2_DBLK_VLD_HCMD0)
+#define VDEC2_DBLK_OST_YBASE 0x297d 	///../ucode/dos_register.h:4645
+#define P_VDEC2_DBLK_OST_YBASE 		DOS_REG_ADDR(VDEC2_DBLK_OST_YBASE)
+#define VDEC2_DBLK_OST_CBCRDIFF 0x297e 	///../ucode/dos_register.h:4646
+#define P_VDEC2_DBLK_OST_CBCRDIFF 		DOS_REG_ADDR(VDEC2_DBLK_OST_CBCRDIFF)
+#define VDEC2_DBLK_CTRL1 0x297f 	///../ucode/dos_register.h:4649
+#define P_VDEC2_DBLK_CTRL1 		DOS_REG_ADDR(VDEC2_DBLK_CTRL1)
+#define VDEC2_MCRCC_CTL1 0x2980 	///../ucode/dos_register.h:4655
+#define P_VDEC2_MCRCC_CTL1 		DOS_REG_ADDR(VDEC2_MCRCC_CTL1)
+#define VDEC2_MCRCC_CTL2 0x2981 	///../ucode/dos_register.h:4661
+#define P_VDEC2_MCRCC_CTL2 		DOS_REG_ADDR(VDEC2_MCRCC_CTL2)
+#define VDEC2_MCRCC_CTL3 0x2982 	///../ucode/dos_register.h:4667
+#define P_VDEC2_MCRCC_CTL3 		DOS_REG_ADDR(VDEC2_MCRCC_CTL3)
+#define VDEC2_GCLK_EN 0x2983 	///../ucode/dos_register.h:4680
+#define P_VDEC2_GCLK_EN 		DOS_REG_ADDR(VDEC2_GCLK_EN)
+#define VDEC2_MDEC_SW_RESET 0x2984 	///../ucode/dos_register.h:4695
+#define P_VDEC2_MDEC_SW_RESET 		DOS_REG_ADDR(VDEC2_MDEC_SW_RESET)
+#define HEVC_MC_CTRL_REG 0x3900 	///../ucode/dos_register.h:4709
+#define P_HEVC_MC_CTRL_REG 		DOS_REG_ADDR(HEVC_MC_CTRL_REG)
+#define HEVC_MC_MB_INFO 0x3901 	///../ucode/dos_register.h:4710
+#define P_HEVC_MC_MB_INFO 		DOS_REG_ADDR(HEVC_MC_MB_INFO)
+#define HEVC_MC_PIC_INFO 0x3902 	///../ucode/dos_register.h:4711
+#define P_HEVC_MC_PIC_INFO 		DOS_REG_ADDR(HEVC_MC_PIC_INFO)
+#define HEVC_MC_HALF_PEL_ONE 0x3903 	///../ucode/dos_register.h:4712
+#define P_HEVC_MC_HALF_PEL_ONE 		DOS_REG_ADDR(HEVC_MC_HALF_PEL_ONE)
+#define HEVC_MC_HALF_PEL_TWO 0x3904 	///../ucode/dos_register.h:4713
+#define P_HEVC_MC_HALF_PEL_TWO 		DOS_REG_ADDR(HEVC_MC_HALF_PEL_TWO)
+#define HEVC_POWER_CTL_MC 0x3905 	///../ucode/dos_register.h:4714
+#define P_HEVC_POWER_CTL_MC 		DOS_REG_ADDR(HEVC_POWER_CTL_MC)
+#define HEVC_MC_CMD 0x3906 	///../ucode/dos_register.h:4715
+#define P_HEVC_MC_CMD 		DOS_REG_ADDR(HEVC_MC_CMD)
+#define HEVC_MC_CTRL0 0x3907 	///../ucode/dos_register.h:4716
+#define P_HEVC_MC_CTRL0 		DOS_REG_ADDR(HEVC_MC_CTRL0)
+#define HEVC_MC_PIC_W_H 0x3908 	///../ucode/dos_register.h:4717
+#define P_HEVC_MC_PIC_W_H 		DOS_REG_ADDR(HEVC_MC_PIC_W_H)
+#define HEVC_MC_STATUS0 0x3909 	///../ucode/dos_register.h:4718
+#define P_HEVC_MC_STATUS0 		DOS_REG_ADDR(HEVC_MC_STATUS0)
+#define HEVC_MC_STATUS1 0x390a 	///../ucode/dos_register.h:4719
+#define P_HEVC_MC_STATUS1 		DOS_REG_ADDR(HEVC_MC_STATUS1)
+#define HEVC_MC_CTRL1 0x390b 	///../ucode/dos_register.h:4720
+#define P_HEVC_MC_CTRL1 		DOS_REG_ADDR(HEVC_MC_CTRL1)
+#define HEVC_MC_MIX_RATIO0 0x390c 	///../ucode/dos_register.h:4721
+#define P_HEVC_MC_MIX_RATIO0 		DOS_REG_ADDR(HEVC_MC_MIX_RATIO0)
+#define HEVC_MC_MIX_RATIO1 0x390d 	///../ucode/dos_register.h:4722
+#define P_HEVC_MC_MIX_RATIO1 		DOS_REG_ADDR(HEVC_MC_MIX_RATIO1)
+#define HEVC_MC_DP_MB_XY 0x390e 	///../ucode/dos_register.h:4723
+#define P_HEVC_MC_DP_MB_XY 		DOS_REG_ADDR(HEVC_MC_DP_MB_XY)
+#define HEVC_MC_OM_MB_XY 0x390f 	///../ucode/dos_register.h:4724
+#define P_HEVC_MC_OM_MB_XY 		DOS_REG_ADDR(HEVC_MC_OM_MB_XY)
+#define HEVC_PSCALE_RST 0x3910 	///../ucode/dos_register.h:4725
+#define P_HEVC_PSCALE_RST 		DOS_REG_ADDR(HEVC_PSCALE_RST)
+#define HEVC_PSCALE_CTRL 0x3911 	///../ucode/dos_register.h:4726
+#define P_HEVC_PSCALE_CTRL 		DOS_REG_ADDR(HEVC_PSCALE_CTRL)
+#define HEVC_PSCALE_PICI_W 0x3912 	///../ucode/dos_register.h:4727
+#define P_HEVC_PSCALE_PICI_W 		DOS_REG_ADDR(HEVC_PSCALE_PICI_W)
+#define HEVC_PSCALE_PICI_H 0x3913 	///../ucode/dos_register.h:4728
+#define P_HEVC_PSCALE_PICI_H 		DOS_REG_ADDR(HEVC_PSCALE_PICI_H)
+#define HEVC_PSCALE_PICO_W 0x3914 	///../ucode/dos_register.h:4729
+#define P_HEVC_PSCALE_PICO_W 		DOS_REG_ADDR(HEVC_PSCALE_PICO_W)
+#define HEVC_PSCALE_PICO_H 0x3915 	///../ucode/dos_register.h:4730
+#define P_HEVC_PSCALE_PICO_H 		DOS_REG_ADDR(HEVC_PSCALE_PICO_H)
+#define HEVC_PSCALE_PICO_START_X 0x3916 	///../ucode/dos_register.h:4731
+#define P_HEVC_PSCALE_PICO_START_X 		DOS_REG_ADDR(HEVC_PSCALE_PICO_START_X)
+#define HEVC_PSCALE_PICO_START_Y 0x3917 	///../ucode/dos_register.h:4732
+#define P_HEVC_PSCALE_PICO_START_Y 		DOS_REG_ADDR(HEVC_PSCALE_PICO_START_Y)
+#define HEVC_PSCALE_DUMMY 0x3918 	///../ucode/dos_register.h:4733
+#define P_HEVC_PSCALE_DUMMY 		DOS_REG_ADDR(HEVC_PSCALE_DUMMY)
+#define HEVC_PSCALE_FILT0_COEF0 0x3919 	///../ucode/dos_register.h:4734
+#define P_HEVC_PSCALE_FILT0_COEF0 		DOS_REG_ADDR(HEVC_PSCALE_FILT0_COEF0)
+#define HEVC_PSCALE_FILT0_COEF1 0x391a 	///../ucode/dos_register.h:4735
+#define P_HEVC_PSCALE_FILT0_COEF1 		DOS_REG_ADDR(HEVC_PSCALE_FILT0_COEF1)
+#define HEVC_PSCALE_CMD_CTRL 0x391b 	///../ucode/dos_register.h:4736
+#define P_HEVC_PSCALE_CMD_CTRL 		DOS_REG_ADDR(HEVC_PSCALE_CMD_CTRL)
+#define HEVC_PSCALE_CMD_BLK_X 0x391c 	///../ucode/dos_register.h:4737
+#define P_HEVC_PSCALE_CMD_BLK_X 		DOS_REG_ADDR(HEVC_PSCALE_CMD_BLK_X)
+#define HEVC_PSCALE_CMD_BLK_Y 0x391d 	///../ucode/dos_register.h:4738
+#define P_HEVC_PSCALE_CMD_BLK_Y 		DOS_REG_ADDR(HEVC_PSCALE_CMD_BLK_Y)
+#define HEVC_PSCALE_STATUS 0x391e 	///../ucode/dos_register.h:4739
+#define P_HEVC_PSCALE_STATUS 		DOS_REG_ADDR(HEVC_PSCALE_STATUS)
+#define HEVC_PSCALE_BMEM_ADDR 0x391f 	///../ucode/dos_register.h:4740
+#define P_HEVC_PSCALE_BMEM_ADDR 		DOS_REG_ADDR(HEVC_PSCALE_BMEM_ADDR)
+#define HEVC_PSCALE_BMEM_DAT 0x3920 	///../ucode/dos_register.h:4741
+#define P_HEVC_PSCALE_BMEM_DAT 		DOS_REG_ADDR(HEVC_PSCALE_BMEM_DAT)
+#define HEVC_PSCALE_DRAM_BUF_CTRL 0x3921 	///../ucode/dos_register.h:4742
+#define P_HEVC_PSCALE_DRAM_BUF_CTRL 		DOS_REG_ADDR(HEVC_PSCALE_DRAM_BUF_CTRL)
+#define HEVC_PSCALE_MCMD_CTRL 0x3922 	///../ucode/dos_register.h:4743
+#define P_HEVC_PSCALE_MCMD_CTRL 		DOS_REG_ADDR(HEVC_PSCALE_MCMD_CTRL)
+#define HEVC_PSCALE_MCMD_XSIZE 0x3923 	///../ucode/dos_register.h:4744
+#define P_HEVC_PSCALE_MCMD_XSIZE 		DOS_REG_ADDR(HEVC_PSCALE_MCMD_XSIZE)
+#define HEVC_PSCALE_MCMD_YSIZE 0x3924 	///../ucode/dos_register.h:4745
+#define P_HEVC_PSCALE_MCMD_YSIZE 		DOS_REG_ADDR(HEVC_PSCALE_MCMD_YSIZE)
+#define HEVC_PSCALE_RBUF_START_BLKX 0x3925 	///../ucode/dos_register.h:4746
+#define P_HEVC_PSCALE_RBUF_START_BLKX 		DOS_REG_ADDR(HEVC_PSCALE_RBUF_START_BLKX)
+#define HEVC_PSCALE_RBUF_START_BLKY 0x3926 	///../ucode/dos_register.h:4747
+#define P_HEVC_PSCALE_RBUF_START_BLKY 		DOS_REG_ADDR(HEVC_PSCALE_RBUF_START_BLKY)
+#define HEVC_PSCALE_PICO_SHIFT_XY 0x3928 	///../ucode/dos_register.h:4749
+#define P_HEVC_PSCALE_PICO_SHIFT_XY 		DOS_REG_ADDR(HEVC_PSCALE_PICO_SHIFT_XY)
+#define HEVC_PSCALE_CTRL1 0x3929 	///../ucode/dos_register.h:4750
+#define P_HEVC_PSCALE_CTRL1 		DOS_REG_ADDR(HEVC_PSCALE_CTRL1)
+#define HEVC_PSCALE_SRCKEY_CTRL0 0x392a 	///../ucode/dos_register.h:4758
+#define P_HEVC_PSCALE_SRCKEY_CTRL0 		DOS_REG_ADDR(HEVC_PSCALE_SRCKEY_CTRL0)
+#define HEVC_PSCALE_SRCKEY_CTRL1 0x392b 	///../ucode/dos_register.h:4761
+#define P_HEVC_PSCALE_SRCKEY_CTRL1 		DOS_REG_ADDR(HEVC_PSCALE_SRCKEY_CTRL1)
+#define HEVC_PSCALE_CANVAS_RD_ADDR 0x392c 	///../ucode/dos_register.h:4765
+#define P_HEVC_PSCALE_CANVAS_RD_ADDR 		DOS_REG_ADDR(HEVC_PSCALE_CANVAS_RD_ADDR)
+#define HEVC_PSCALE_CANVAS_WR_ADDR 0x392d 	///../ucode/dos_register.h:4769
+#define P_HEVC_PSCALE_CANVAS_WR_ADDR 		DOS_REG_ADDR(HEVC_PSCALE_CANVAS_WR_ADDR)
+#define HEVC_PSCALE_CTRL2 0x392e 	///../ucode/dos_register.h:4773
+#define P_HEVC_PSCALE_CTRL2 		DOS_REG_ADDR(HEVC_PSCALE_CTRL2)
+#define HEVC_MC_MPORT_CTRL 0x3940 	///../ucode/dos_register.h:4774
+#define P_HEVC_MC_MPORT_CTRL 		DOS_REG_ADDR(HEVC_MC_MPORT_CTRL)
+#define HEVC_MC_MPORT_DAT 0x3941 	///../ucode/dos_register.h:4775
+#define P_HEVC_MC_MPORT_DAT 		DOS_REG_ADDR(HEVC_MC_MPORT_DAT)
+#define HEVC_MC_WT_PRED_CTRL 0x3942 	///../ucode/dos_register.h:4776
+#define P_HEVC_MC_WT_PRED_CTRL 		DOS_REG_ADDR(HEVC_MC_WT_PRED_CTRL)
+#define HEVC_MC_MBBOT_ST_EVEN_ADDR 0x3944 	///../ucode/dos_register.h:4777
+#define P_HEVC_MC_MBBOT_ST_EVEN_ADDR 		DOS_REG_ADDR(HEVC_MC_MBBOT_ST_EVEN_ADDR)
+#define HEVC_MC_MBBOT_ST_ODD_ADDR 0x3945 	///../ucode/dos_register.h:4778
+#define P_HEVC_MC_MBBOT_ST_ODD_ADDR 		DOS_REG_ADDR(HEVC_MC_MBBOT_ST_ODD_ADDR)
+#define HEVC_MC_DPDN_MB_XY 0x3946 	///../ucode/dos_register.h:4779
+#define P_HEVC_MC_DPDN_MB_XY 		DOS_REG_ADDR(HEVC_MC_DPDN_MB_XY)
+#define HEVC_MC_OMDN_MB_XY 0x3947 	///../ucode/dos_register.h:4780
+#define P_HEVC_MC_OMDN_MB_XY 		DOS_REG_ADDR(HEVC_MC_OMDN_MB_XY)
+#define HEVC_MC_HCMDBUF_H 0x3948 	///../ucode/dos_register.h:4781
+#define P_HEVC_MC_HCMDBUF_H 		DOS_REG_ADDR(HEVC_MC_HCMDBUF_H)
+#define HEVC_MC_HCMDBUF_L 0x3949 	///../ucode/dos_register.h:4782
+#define P_HEVC_MC_HCMDBUF_L 		DOS_REG_ADDR(HEVC_MC_HCMDBUF_L)
+#define HEVC_MC_HCMD_H 0x394a 	///../ucode/dos_register.h:4783
+#define P_HEVC_MC_HCMD_H 		DOS_REG_ADDR(HEVC_MC_HCMD_H)
+#define HEVC_MC_HCMD_L 0x394b 	///../ucode/dos_register.h:4784
+#define P_HEVC_MC_HCMD_L 		DOS_REG_ADDR(HEVC_MC_HCMD_L)
+#define HEVC_MC_IDCT_DAT 0x394c 	///../ucode/dos_register.h:4785
+#define P_HEVC_MC_IDCT_DAT 		DOS_REG_ADDR(HEVC_MC_IDCT_DAT)
+#define HEVC_MC_CTRL_GCLK_CTRL 0x394d 	///../ucode/dos_register.h:4786
+#define P_HEVC_MC_CTRL_GCLK_CTRL 		DOS_REG_ADDR(HEVC_MC_CTRL_GCLK_CTRL)
+#define HEVC_MC_OTHER_GCLK_CTRL 0x394e 	///../ucode/dos_register.h:4787
+#define P_HEVC_MC_OTHER_GCLK_CTRL 		DOS_REG_ADDR(HEVC_MC_OTHER_GCLK_CTRL)
+#define HEVC_MC_CTRL2 0x394f 	///../ucode/dos_register.h:4792
+#define P_HEVC_MC_CTRL2 		DOS_REG_ADDR(HEVC_MC_CTRL2)
+#define HEVC_MDEC_PIC_DC_CTRL 0x398e 	///../ucode/dos_register.h:4799
+#define P_HEVC_MDEC_PIC_DC_CTRL 		DOS_REG_ADDR(HEVC_MDEC_PIC_DC_CTRL)
+#define HEVC_MDEC_PIC_DC_STATUS 0x398f 	///../ucode/dos_register.h:4800
+#define P_HEVC_MDEC_PIC_DC_STATUS 		DOS_REG_ADDR(HEVC_MDEC_PIC_DC_STATUS)
+#define HEVC_ANC0_CANVAS_ADDR 0x3990 	///../ucode/dos_register.h:4801
+#define P_HEVC_ANC0_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC0_CANVAS_ADDR)
+#define HEVC_ANC1_CANVAS_ADDR 0x3991 	///../ucode/dos_register.h:4802
+#define P_HEVC_ANC1_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC1_CANVAS_ADDR)
+#define HEVC_ANC2_CANVAS_ADDR 0x3992 	///../ucode/dos_register.h:4803
+#define P_HEVC_ANC2_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC2_CANVAS_ADDR)
+#define HEVC_ANC3_CANVAS_ADDR 0x3993 	///../ucode/dos_register.h:4804
+#define P_HEVC_ANC3_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC3_CANVAS_ADDR)
+#define HEVC_ANC4_CANVAS_ADDR 0x3994 	///../ucode/dos_register.h:4805
+#define P_HEVC_ANC4_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC4_CANVAS_ADDR)
+#define HEVC_ANC5_CANVAS_ADDR 0x3995 	///../ucode/dos_register.h:4806
+#define P_HEVC_ANC5_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC5_CANVAS_ADDR)
+#define HEVC_ANC6_CANVAS_ADDR 0x3996 	///../ucode/dos_register.h:4807
+#define P_HEVC_ANC6_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC6_CANVAS_ADDR)
+#define HEVC_ANC7_CANVAS_ADDR 0x3997 	///../ucode/dos_register.h:4808
+#define P_HEVC_ANC7_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC7_CANVAS_ADDR)
+#define HEVC_ANC8_CANVAS_ADDR 0x3998 	///../ucode/dos_register.h:4809
+#define P_HEVC_ANC8_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC8_CANVAS_ADDR)
+#define HEVC_ANC9_CANVAS_ADDR 0x3999 	///../ucode/dos_register.h:4810
+#define P_HEVC_ANC9_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC9_CANVAS_ADDR)
+#define HEVC_ANC10_CANVAS_ADDR 0x399a 	///../ucode/dos_register.h:4811
+#define P_HEVC_ANC10_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC10_CANVAS_ADDR)
+#define HEVC_ANC11_CANVAS_ADDR 0x399b 	///../ucode/dos_register.h:4812
+#define P_HEVC_ANC11_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC11_CANVAS_ADDR)
+#define HEVC_ANC12_CANVAS_ADDR 0x399c 	///../ucode/dos_register.h:4813
+#define P_HEVC_ANC12_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC12_CANVAS_ADDR)
+#define HEVC_ANC13_CANVAS_ADDR 0x399d 	///../ucode/dos_register.h:4814
+#define P_HEVC_ANC13_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC13_CANVAS_ADDR)
+#define HEVC_ANC14_CANVAS_ADDR 0x399e 	///../ucode/dos_register.h:4815
+#define P_HEVC_ANC14_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC14_CANVAS_ADDR)
+#define HEVC_ANC15_CANVAS_ADDR 0x399f 	///../ucode/dos_register.h:4816
+#define P_HEVC_ANC15_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC15_CANVAS_ADDR)
+#define HEVC_ANC16_CANVAS_ADDR 0x39a0 	///../ucode/dos_register.h:4817
+#define P_HEVC_ANC16_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC16_CANVAS_ADDR)
+#define HEVC_ANC17_CANVAS_ADDR 0x39a1 	///../ucode/dos_register.h:4818
+#define P_HEVC_ANC17_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC17_CANVAS_ADDR)
+#define HEVC_ANC18_CANVAS_ADDR 0x39a2 	///../ucode/dos_register.h:4819
+#define P_HEVC_ANC18_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC18_CANVAS_ADDR)
+#define HEVC_ANC19_CANVAS_ADDR 0x39a3 	///../ucode/dos_register.h:4820
+#define P_HEVC_ANC19_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC19_CANVAS_ADDR)
+#define HEVC_ANC20_CANVAS_ADDR 0x39a4 	///../ucode/dos_register.h:4821
+#define P_HEVC_ANC20_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC20_CANVAS_ADDR)
+#define HEVC_ANC21_CANVAS_ADDR 0x39a5 	///../ucode/dos_register.h:4822
+#define P_HEVC_ANC21_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC21_CANVAS_ADDR)
+#define HEVC_ANC22_CANVAS_ADDR 0x39a6 	///../ucode/dos_register.h:4823
+#define P_HEVC_ANC22_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC22_CANVAS_ADDR)
+#define HEVC_ANC23_CANVAS_ADDR 0x39a7 	///../ucode/dos_register.h:4824
+#define P_HEVC_ANC23_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC23_CANVAS_ADDR)
+#define HEVC_ANC24_CANVAS_ADDR 0x39a8 	///../ucode/dos_register.h:4825
+#define P_HEVC_ANC24_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC24_CANVAS_ADDR)
+#define HEVC_ANC25_CANVAS_ADDR 0x39a9 	///../ucode/dos_register.h:4826
+#define P_HEVC_ANC25_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC25_CANVAS_ADDR)
+#define HEVC_ANC26_CANVAS_ADDR 0x39aa 	///../ucode/dos_register.h:4827
+#define P_HEVC_ANC26_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC26_CANVAS_ADDR)
+#define HEVC_ANC27_CANVAS_ADDR 0x39ab 	///../ucode/dos_register.h:4828
+#define P_HEVC_ANC27_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC27_CANVAS_ADDR)
+#define HEVC_ANC28_CANVAS_ADDR 0x39ac 	///../ucode/dos_register.h:4829
+#define P_HEVC_ANC28_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC28_CANVAS_ADDR)
+#define HEVC_ANC29_CANVAS_ADDR 0x39ad 	///../ucode/dos_register.h:4830
+#define P_HEVC_ANC29_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC29_CANVAS_ADDR)
+#define HEVC_ANC30_CANVAS_ADDR 0x39ae 	///../ucode/dos_register.h:4831
+#define P_HEVC_ANC30_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC30_CANVAS_ADDR)
+#define HEVC_ANC31_CANVAS_ADDR 0x39af 	///../ucode/dos_register.h:4832
+#define P_HEVC_ANC31_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_ANC31_CANVAS_ADDR)
+#define HEVC_DBKR_CANVAS_ADDR 0x39b0 	///../ucode/dos_register.h:4833
+#define P_HEVC_DBKR_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_DBKR_CANVAS_ADDR)
+#define HEVC_DBKW_CANVAS_ADDR 0x39b1 	///../ucode/dos_register.h:4834
+#define P_HEVC_DBKW_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_DBKW_CANVAS_ADDR)
+#define HEVC_REC_CANVAS_ADDR 0x39b2 	///../ucode/dos_register.h:4835
+#define P_HEVC_REC_CANVAS_ADDR 		DOS_REG_ADDR(HEVC_REC_CANVAS_ADDR)
+#define HEVC_CURR_CANVAS_CTRL 0x39b3 	///../ucode/dos_register.h:4838
+#define P_HEVC_CURR_CANVAS_CTRL 		DOS_REG_ADDR(HEVC_CURR_CANVAS_CTRL)
+#define HEVC_MDEC_PIC_DC_THRESH 0x39b8 	///../ucode/dos_register.h:4839
+#define P_HEVC_MDEC_PIC_DC_THRESH 		DOS_REG_ADDR(HEVC_MDEC_PIC_DC_THRESH)
+#define HEVC_MDEC_PICR_BUF_STATUS 0x39b9 	///../ucode/dos_register.h:4840
+#define P_HEVC_MDEC_PICR_BUF_STATUS 		DOS_REG_ADDR(HEVC_MDEC_PICR_BUF_STATUS)
+#define HEVC_MDEC_PICW_BUF_STATUS 0x39ba 	///../ucode/dos_register.h:4841
+#define P_HEVC_MDEC_PICW_BUF_STATUS 		DOS_REG_ADDR(HEVC_MDEC_PICW_BUF_STATUS)
+#define HEVC_MCW_DBLK_WRRSP_CNT 0x39bb 	///../ucode/dos_register.h:4842
+#define P_HEVC_MCW_DBLK_WRRSP_CNT 		DOS_REG_ADDR(HEVC_MCW_DBLK_WRRSP_CNT)
+#define HEVC_MC_MBBOT_WRRSP_CNT 0x39bc 	///../ucode/dos_register.h:4843
+#define P_HEVC_MC_MBBOT_WRRSP_CNT 		DOS_REG_ADDR(HEVC_MC_MBBOT_WRRSP_CNT)
+#define HEVC_MDEC_PICW_BUF2_STATUS 0x39bd 	///../ucode/dos_register.h:4844
+#define P_HEVC_MDEC_PICW_BUF2_STATUS 		DOS_REG_ADDR(HEVC_MDEC_PICW_BUF2_STATUS)
+#define HEVC_WRRSP_FIFO_PICW_DBK 0x39be 	///../ucode/dos_register.h:4845
+#define P_HEVC_WRRSP_FIFO_PICW_DBK 		DOS_REG_ADDR(HEVC_WRRSP_FIFO_PICW_DBK)
+#define HEVC_WRRSP_FIFO_PICW_MC 0x39bf 	///../ucode/dos_register.h:4846
+#define P_HEVC_WRRSP_FIFO_PICW_MC 		DOS_REG_ADDR(HEVC_WRRSP_FIFO_PICW_MC)
+#define HEVC_AV_SCRATCH_0 0x39c0 	///../ucode/dos_register.h:4847
+#define P_HEVC_AV_SCRATCH_0 		DOS_REG_ADDR(HEVC_AV_SCRATCH_0)
+#define HEVC_AV_SCRATCH_1 0x39c1 	///../ucode/dos_register.h:4848
+#define P_HEVC_AV_SCRATCH_1 		DOS_REG_ADDR(HEVC_AV_SCRATCH_1)
+#define HEVC_AV_SCRATCH_2 0x39c2 	///../ucode/dos_register.h:4849
+#define P_HEVC_AV_SCRATCH_2 		DOS_REG_ADDR(HEVC_AV_SCRATCH_2)
+#define HEVC_AV_SCRATCH_3 0x39c3 	///../ucode/dos_register.h:4850
+#define P_HEVC_AV_SCRATCH_3 		DOS_REG_ADDR(HEVC_AV_SCRATCH_3)
+#define HEVC_AV_SCRATCH_4 0x39c4 	///../ucode/dos_register.h:4851
+#define P_HEVC_AV_SCRATCH_4 		DOS_REG_ADDR(HEVC_AV_SCRATCH_4)
+#define HEVC_AV_SCRATCH_5 0x39c5 	///../ucode/dos_register.h:4852
+#define P_HEVC_AV_SCRATCH_5 		DOS_REG_ADDR(HEVC_AV_SCRATCH_5)
+#define HEVC_AV_SCRATCH_6 0x39c6 	///../ucode/dos_register.h:4853
+#define P_HEVC_AV_SCRATCH_6 		DOS_REG_ADDR(HEVC_AV_SCRATCH_6)
+#define HEVC_AV_SCRATCH_7 0x39c7 	///../ucode/dos_register.h:4854
+#define P_HEVC_AV_SCRATCH_7 		DOS_REG_ADDR(HEVC_AV_SCRATCH_7)
+#define HEVC_AV_SCRATCH_8 0x39c8 	///../ucode/dos_register.h:4855
+#define P_HEVC_AV_SCRATCH_8 		DOS_REG_ADDR(HEVC_AV_SCRATCH_8)
+#define HEVC_AV_SCRATCH_9 0x39c9 	///../ucode/dos_register.h:4856
+#define P_HEVC_AV_SCRATCH_9 		DOS_REG_ADDR(HEVC_AV_SCRATCH_9)
+#define HEVC_AV_SCRATCH_A 0x39ca 	///../ucode/dos_register.h:4857
+#define P_HEVC_AV_SCRATCH_A 		DOS_REG_ADDR(HEVC_AV_SCRATCH_A)
+#define HEVC_AV_SCRATCH_B 0x39cb 	///../ucode/dos_register.h:4858
+#define P_HEVC_AV_SCRATCH_B 		DOS_REG_ADDR(HEVC_AV_SCRATCH_B)
+#define HEVC_AV_SCRATCH_C 0x39cc 	///../ucode/dos_register.h:4859
+#define P_HEVC_AV_SCRATCH_C 		DOS_REG_ADDR(HEVC_AV_SCRATCH_C)
+#define HEVC_AV_SCRATCH_D 0x39cd 	///../ucode/dos_register.h:4860
+#define P_HEVC_AV_SCRATCH_D 		DOS_REG_ADDR(HEVC_AV_SCRATCH_D)
+#define HEVC_AV_SCRATCH_E 0x39ce 	///../ucode/dos_register.h:4861
+#define P_HEVC_AV_SCRATCH_E 		DOS_REG_ADDR(HEVC_AV_SCRATCH_E)
+#define HEVC_AV_SCRATCH_F 0x39cf 	///../ucode/dos_register.h:4862
+#define P_HEVC_AV_SCRATCH_F 		DOS_REG_ADDR(HEVC_AV_SCRATCH_F)
+#define HEVC_AV_SCRATCH_G 0x39d0 	///../ucode/dos_register.h:4863
+#define P_HEVC_AV_SCRATCH_G 		DOS_REG_ADDR(HEVC_AV_SCRATCH_G)
+#define HEVC_AV_SCRATCH_H 0x39d1 	///../ucode/dos_register.h:4864
+#define P_HEVC_AV_SCRATCH_H 		DOS_REG_ADDR(HEVC_AV_SCRATCH_H)
+#define HEVC_AV_SCRATCH_I 0x39d2 	///../ucode/dos_register.h:4865
+#define P_HEVC_AV_SCRATCH_I 		DOS_REG_ADDR(HEVC_AV_SCRATCH_I)
+#define HEVC_AV_SCRATCH_J 0x39d3 	///../ucode/dos_register.h:4866
+#define P_HEVC_AV_SCRATCH_J 		DOS_REG_ADDR(HEVC_AV_SCRATCH_J)
+#define HEVC_AV_SCRATCH_K 0x39d4 	///../ucode/dos_register.h:4867
+#define P_HEVC_AV_SCRATCH_K 		DOS_REG_ADDR(HEVC_AV_SCRATCH_K)
+#define HEVC_AV_SCRATCH_L 0x39d5 	///../ucode/dos_register.h:4868
+#define P_HEVC_AV_SCRATCH_L 		DOS_REG_ADDR(HEVC_AV_SCRATCH_L)
+#define HEVC_AV_SCRATCH_M 0x39d6 	///../ucode/dos_register.h:4869
+#define P_HEVC_AV_SCRATCH_M 		DOS_REG_ADDR(HEVC_AV_SCRATCH_M)
+#define HEVC_AV_SCRATCH_N 0x39d7 	///../ucode/dos_register.h:4870
+#define P_HEVC_AV_SCRATCH_N 		DOS_REG_ADDR(HEVC_AV_SCRATCH_N)
+#define HEVC_WRRSP_CO_MB 0x39d8 	///../ucode/dos_register.h:4874
+#define P_HEVC_WRRSP_CO_MB 		DOS_REG_ADDR(HEVC_WRRSP_CO_MB)
+#define HEVC_WRRSP_DCAC 0x39d9 	///../ucode/dos_register.h:4878
+#define P_HEVC_WRRSP_DCAC 		DOS_REG_ADDR(HEVC_WRRSP_DCAC)
+#define HEVC_WRRSP_VLD 0x39da 	///../ucode/dos_register.h:4880
+#define P_HEVC_WRRSP_VLD 		DOS_REG_ADDR(HEVC_WRRSP_VLD)
+#define HEVC_MDEC_DOUBLEW_CFG0 0x39db 	///../ucode/dos_register.h:4896
+#define P_HEVC_MDEC_DOUBLEW_CFG0 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG0)
+#define HEVC_MDEC_DOUBLEW_CFG1 0x39dc 	///../ucode/dos_register.h:4902
+#define P_HEVC_MDEC_DOUBLEW_CFG1 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG1)
+#define HEVC_MDEC_DOUBLEW_CFG2 0x39dd 	///../ucode/dos_register.h:4907
+#define P_HEVC_MDEC_DOUBLEW_CFG2 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG2)
+#define HEVC_MDEC_DOUBLEW_CFG3 0x39de 	///../ucode/dos_register.h:4909
+#define P_HEVC_MDEC_DOUBLEW_CFG3 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG3)
+#define HEVC_MDEC_DOUBLEW_CFG4 0x39df 	///../ucode/dos_register.h:4911
+#define P_HEVC_MDEC_DOUBLEW_CFG4 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG4)
+#define HEVC_MDEC_DOUBLEW_CFG5 0x39e0 	///../ucode/dos_register.h:4914
+#define P_HEVC_MDEC_DOUBLEW_CFG5 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG5)
+#define HEVC_MDEC_DOUBLEW_CFG6 0x39e1 	///../ucode/dos_register.h:4916
+#define P_HEVC_MDEC_DOUBLEW_CFG6 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG6)
+#define HEVC_MDEC_DOUBLEW_CFG7 0x39e2 	///../ucode/dos_register.h:4918
+#define P_HEVC_MDEC_DOUBLEW_CFG7 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG7)
+#define HEVC_MDEC_DOUBLEW_STATUS 0x39e3 	///../ucode/dos_register.h:4922
+#define P_HEVC_MDEC_DOUBLEW_STATUS 		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_STATUS)
+#define HEVC_DBLK_RST 0x3950 	///../ucode/dos_register.h:4940
+#define P_HEVC_DBLK_RST 		DOS_REG_ADDR(HEVC_DBLK_RST)
+#define HEVC_DBLK_CTRL 0x3951 	///../ucode/dos_register.h:4941
+#define P_HEVC_DBLK_CTRL 		DOS_REG_ADDR(HEVC_DBLK_CTRL)
+#define HEVC_DBLK_MB_WID_HEIGHT 0x3952 	///../ucode/dos_register.h:4942
+#define P_HEVC_DBLK_MB_WID_HEIGHT 		DOS_REG_ADDR(HEVC_DBLK_MB_WID_HEIGHT)
+#define HEVC_DBLK_STATUS 0x3953 	///../ucode/dos_register.h:4943
+#define P_HEVC_DBLK_STATUS 		DOS_REG_ADDR(HEVC_DBLK_STATUS)
+#define HEVC_DBLK_CMD_CTRL 0x3954 	///../ucode/dos_register.h:4944
+#define P_HEVC_DBLK_CMD_CTRL 		DOS_REG_ADDR(HEVC_DBLK_CMD_CTRL)
+#define HEVC_DBLK_MB_XY 0x3955 	///../ucode/dos_register.h:4945
+#define P_HEVC_DBLK_MB_XY 		DOS_REG_ADDR(HEVC_DBLK_MB_XY)
+#define HEVC_DBLK_QP 0x3956 	///../ucode/dos_register.h:4946
+#define P_HEVC_DBLK_QP 		DOS_REG_ADDR(HEVC_DBLK_QP)
+#define HEVC_DBLK_Y_BHFILT 0x3957 	///../ucode/dos_register.h:4947
+#define P_HEVC_DBLK_Y_BHFILT 		DOS_REG_ADDR(HEVC_DBLK_Y_BHFILT)
+#define HEVC_DBLK_Y_BHFILT_HIGH 0x3958 	///../ucode/dos_register.h:4948
+#define P_HEVC_DBLK_Y_BHFILT_HIGH 		DOS_REG_ADDR(HEVC_DBLK_Y_BHFILT_HIGH)
+#define HEVC_DBLK_Y_BVFILT 0x3959 	///../ucode/dos_register.h:4949
+#define P_HEVC_DBLK_Y_BVFILT 		DOS_REG_ADDR(HEVC_DBLK_Y_BVFILT)
+#define HEVC_DBLK_CB_BFILT 0x395a 	///../ucode/dos_register.h:4950
+#define P_HEVC_DBLK_CB_BFILT 		DOS_REG_ADDR(HEVC_DBLK_CB_BFILT)
+#define HEVC_DBLK_CR_BFILT 0x395b 	///../ucode/dos_register.h:4951
+#define P_HEVC_DBLK_CR_BFILT 		DOS_REG_ADDR(HEVC_DBLK_CR_BFILT)
+#define HEVC_DBLK_Y_HFILT 0x395c 	///../ucode/dos_register.h:4952
+#define P_HEVC_DBLK_Y_HFILT 		DOS_REG_ADDR(HEVC_DBLK_Y_HFILT)
+#define HEVC_DBLK_Y_HFILT_HIGH 0x395d 	///../ucode/dos_register.h:4953
+#define P_HEVC_DBLK_Y_HFILT_HIGH 		DOS_REG_ADDR(HEVC_DBLK_Y_HFILT_HIGH)
+#define HEVC_DBLK_Y_VFILT 0x395e 	///../ucode/dos_register.h:4954
+#define P_HEVC_DBLK_Y_VFILT 		DOS_REG_ADDR(HEVC_DBLK_Y_VFILT)
+#define HEVC_DBLK_CB_FILT 0x395f 	///../ucode/dos_register.h:4955
+#define P_HEVC_DBLK_CB_FILT 		DOS_REG_ADDR(HEVC_DBLK_CB_FILT)
+#define HEVC_DBLK_CR_FILT 0x3960 	///../ucode/dos_register.h:4956
+#define P_HEVC_DBLK_CR_FILT 		DOS_REG_ADDR(HEVC_DBLK_CR_FILT)
+#define HEVC_DBLK_BETAX_QP_SEL 0x3961 	///../ucode/dos_register.h:4957
+#define P_HEVC_DBLK_BETAX_QP_SEL 		DOS_REG_ADDR(HEVC_DBLK_BETAX_QP_SEL)
+#define HEVC_DBLK_CLIP_CTRL0 0x3962 	///../ucode/dos_register.h:4958
+#define P_HEVC_DBLK_CLIP_CTRL0 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL0)
+#define HEVC_DBLK_CLIP_CTRL1 0x3963 	///../ucode/dos_register.h:4959
+#define P_HEVC_DBLK_CLIP_CTRL1 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL1)
+#define HEVC_DBLK_CLIP_CTRL2 0x3964 	///../ucode/dos_register.h:4960
+#define P_HEVC_DBLK_CLIP_CTRL2 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL2)
+#define HEVC_DBLK_CLIP_CTRL3 0x3965 	///../ucode/dos_register.h:4961
+#define P_HEVC_DBLK_CLIP_CTRL3 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL3)
+#define HEVC_DBLK_CLIP_CTRL4 0x3966 	///../ucode/dos_register.h:4962
+#define P_HEVC_DBLK_CLIP_CTRL4 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL4)
+#define HEVC_DBLK_CLIP_CTRL5 0x3967 	///../ucode/dos_register.h:4963
+#define P_HEVC_DBLK_CLIP_CTRL5 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL5)
+#define HEVC_DBLK_CLIP_CTRL6 0x3968 	///../ucode/dos_register.h:4964
+#define P_HEVC_DBLK_CLIP_CTRL6 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL6)
+#define HEVC_DBLK_CLIP_CTRL7 0x3969 	///../ucode/dos_register.h:4965
+#define P_HEVC_DBLK_CLIP_CTRL7 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL7)
+#define HEVC_DBLK_CLIP_CTRL8 0x396a 	///../ucode/dos_register.h:4966
+#define P_HEVC_DBLK_CLIP_CTRL8 		DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL8)
+#define HEVC_DBLK_STATUS1 0x396b 	///../ucode/dos_register.h:4967
+#define P_HEVC_DBLK_STATUS1 		DOS_REG_ADDR(HEVC_DBLK_STATUS1)
+#define HEVC_DBLK_GCLK_FREE 0x396c 	///../ucode/dos_register.h:4968
+#define P_HEVC_DBLK_GCLK_FREE 		DOS_REG_ADDR(HEVC_DBLK_GCLK_FREE)
+#define HEVC_DBLK_GCLK_OFF 0x396d 	///../ucode/dos_register.h:4969
+#define P_HEVC_DBLK_GCLK_OFF 		DOS_REG_ADDR(HEVC_DBLK_GCLK_OFF)
+#define HEVC_DBLK_AVSFLAGS 0x396e 	///../ucode/dos_register.h:4970
+#define P_HEVC_DBLK_AVSFLAGS 		DOS_REG_ADDR(HEVC_DBLK_AVSFLAGS)
+#define HEVC_DBLK_CBPY 0x3970 	///../ucode/dos_register.h:4972
+#define P_HEVC_DBLK_CBPY 		DOS_REG_ADDR(HEVC_DBLK_CBPY)
+#define HEVC_DBLK_CBPY_ADJ 0x3971 	///../ucode/dos_register.h:4976
+#define P_HEVC_DBLK_CBPY_ADJ 		DOS_REG_ADDR(HEVC_DBLK_CBPY_ADJ)
+#define HEVC_DBLK_CBPC 0x3972 	///../ucode/dos_register.h:4978
+#define P_HEVC_DBLK_CBPC 		DOS_REG_ADDR(HEVC_DBLK_CBPC)
+#define HEVC_DBLK_CBPC_ADJ 0x3973 	///../ucode/dos_register.h:4986
+#define P_HEVC_DBLK_CBPC_ADJ 		DOS_REG_ADDR(HEVC_DBLK_CBPC_ADJ)
+#define HEVC_DBLK_VHMVD 0x3974 	///../ucode/dos_register.h:4989
+#define P_HEVC_DBLK_VHMVD 		DOS_REG_ADDR(HEVC_DBLK_VHMVD)
+#define HEVC_DBLK_STRONG 0x3975 	///../ucode/dos_register.h:5003
+#define P_HEVC_DBLK_STRONG 		DOS_REG_ADDR(HEVC_DBLK_STRONG)
+#define HEVC_DBLK_RV8_QUANT 0x3976 	///../ucode/dos_register.h:5007
+#define P_HEVC_DBLK_RV8_QUANT 		DOS_REG_ADDR(HEVC_DBLK_RV8_QUANT)
+#define HEVC_DBLK_CBUS_HCMD2 0x3977 	///../ucode/dos_register.h:5008
+#define P_HEVC_DBLK_CBUS_HCMD2 		DOS_REG_ADDR(HEVC_DBLK_CBUS_HCMD2)
+#define HEVC_DBLK_CBUS_HCMD1 0x3978 	///../ucode/dos_register.h:5009
+#define P_HEVC_DBLK_CBUS_HCMD1 		DOS_REG_ADDR(HEVC_DBLK_CBUS_HCMD1)
+#define HEVC_DBLK_CBUS_HCMD0 0x3979 	///../ucode/dos_register.h:5010
+#define P_HEVC_DBLK_CBUS_HCMD0 		DOS_REG_ADDR(HEVC_DBLK_CBUS_HCMD0)
+#define HEVC_DBLK_VLD_HCMD2 0x397a 	///../ucode/dos_register.h:5011
+#define P_HEVC_DBLK_VLD_HCMD2 		DOS_REG_ADDR(HEVC_DBLK_VLD_HCMD2)
+#define HEVC_DBLK_VLD_HCMD1 0x397b 	///../ucode/dos_register.h:5012
+#define P_HEVC_DBLK_VLD_HCMD1 		DOS_REG_ADDR(HEVC_DBLK_VLD_HCMD1)
+#define HEVC_DBLK_VLD_HCMD0 0x397c 	///../ucode/dos_register.h:5013
+#define P_HEVC_DBLK_VLD_HCMD0 		DOS_REG_ADDR(HEVC_DBLK_VLD_HCMD0)
+#define HEVC_DBLK_OST_YBASE 0x397d 	///../ucode/dos_register.h:5014
+#define P_HEVC_DBLK_OST_YBASE 		DOS_REG_ADDR(HEVC_DBLK_OST_YBASE)
+#define HEVC_DBLK_OST_CBCRDIFF 0x397e 	///../ucode/dos_register.h:5015
+#define P_HEVC_DBLK_OST_CBCRDIFF 		DOS_REG_ADDR(HEVC_DBLK_OST_CBCRDIFF)
+#define HEVC_DBLK_CTRL1 0x397f 	///../ucode/dos_register.h:5018
+#define P_HEVC_DBLK_CTRL1 		DOS_REG_ADDR(HEVC_DBLK_CTRL1)
+#define HEVC_MCRCC_CTL1 0x3980 	///../ucode/dos_register.h:5024
+#define P_HEVC_MCRCC_CTL1 		DOS_REG_ADDR(HEVC_MCRCC_CTL1)
+#define HEVC_MCRCC_CTL2 0x3981 	///../ucode/dos_register.h:5030
+#define P_HEVC_MCRCC_CTL2 		DOS_REG_ADDR(HEVC_MCRCC_CTL2)
+#define HEVC_MCRCC_CTL3 0x3982 	///../ucode/dos_register.h:5036
+#define P_HEVC_MCRCC_CTL3 		DOS_REG_ADDR(HEVC_MCRCC_CTL3)
+#define HEVC_GCLK_EN 0x3983 	///../ucode/dos_register.h:5049
+#define P_HEVC_GCLK_EN 		DOS_REG_ADDR(HEVC_GCLK_EN)
+#define HEVC_MDEC_SW_RESET 0x3984 	///../ucode/dos_register.h:5064
+#define P_HEVC_MDEC_SW_RESET 		DOS_REG_ADDR(HEVC_MDEC_SW_RESET)
+#define HCODEC_VLD_STATUS_CTRL 0x1c00 	///../ucode/dos_register.h:5078
+#define P_HCODEC_VLD_STATUS_CTRL 		DOS_REG_ADDR(HCODEC_VLD_STATUS_CTRL)
+#define HCODEC_MPEG1_2_REG 0x1c01 	///../ucode/dos_register.h:5088
+#define P_HCODEC_MPEG1_2_REG 		DOS_REG_ADDR(HCODEC_MPEG1_2_REG)
+#define HCODEC_F_CODE_REG 0x1c02 	///../ucode/dos_register.h:5089
+#define P_HCODEC_F_CODE_REG 		DOS_REG_ADDR(HCODEC_F_CODE_REG)
+#define HCODEC_PIC_HEAD_INFO 0x1c03 	///../ucode/dos_register.h:5090
+#define P_HCODEC_PIC_HEAD_INFO 		DOS_REG_ADDR(HCODEC_PIC_HEAD_INFO)
+#define HCODEC_SLICE_VER_POS_PIC_TYPE 0x1c04 	///../ucode/dos_register.h:5091
+#define P_HCODEC_SLICE_VER_POS_PIC_TYPE 		DOS_REG_ADDR(HCODEC_SLICE_VER_POS_PIC_TYPE)
+#define HCODEC_QP_VALUE_REG 0x1c05 	///../ucode/dos_register.h:5092
+#define P_HCODEC_QP_VALUE_REG 		DOS_REG_ADDR(HCODEC_QP_VALUE_REG)
+#define HCODEC_MBA_INC 0x1c06 	///../ucode/dos_register.h:5093
+#define P_HCODEC_MBA_INC 		DOS_REG_ADDR(HCODEC_MBA_INC)
+#define HCODEC_MB_MOTION_MODE 0x1c07 	///../ucode/dos_register.h:5094
+#define P_HCODEC_MB_MOTION_MODE 		DOS_REG_ADDR(HCODEC_MB_MOTION_MODE)
+#define HCODEC_POWER_CTL_VLD 0x1c08 	///../ucode/dos_register.h:5102
+#define P_HCODEC_POWER_CTL_VLD 		DOS_REG_ADDR(HCODEC_POWER_CTL_VLD)
+#define HCODEC_MB_WIDTH 0x1c09 	///../ucode/dos_register.h:5103
+#define P_HCODEC_MB_WIDTH 		DOS_REG_ADDR(HCODEC_MB_WIDTH)
+#define HCODEC_SLICE_QP 0x1c0a 	///../ucode/dos_register.h:5104
+#define P_HCODEC_SLICE_QP 		DOS_REG_ADDR(HCODEC_SLICE_QP)
+#define HCODEC_PRE_START_CODE 0x1c0b 	///../ucode/dos_register.h:5106
+#define P_HCODEC_PRE_START_CODE 		DOS_REG_ADDR(HCODEC_PRE_START_CODE)
+#define HCODEC_SLICE_START_BYTE_01 0x1c0c 	///../ucode/dos_register.h:5107
+#define P_HCODEC_SLICE_START_BYTE_01 		DOS_REG_ADDR(HCODEC_SLICE_START_BYTE_01)
+#define HCODEC_SLICE_START_BYTE_23 0x1c0d 	///../ucode/dos_register.h:5108
+#define P_HCODEC_SLICE_START_BYTE_23 		DOS_REG_ADDR(HCODEC_SLICE_START_BYTE_23)
+#define HCODEC_RESYNC_MARKER_LENGTH 0x1c0e 	///../ucode/dos_register.h:5109
+#define P_HCODEC_RESYNC_MARKER_LENGTH 		DOS_REG_ADDR(HCODEC_RESYNC_MARKER_LENGTH)
+#define HCODEC_DECODER_BUFFER_INFO 0x1c0f 	///../ucode/dos_register.h:5113
+#define P_HCODEC_DECODER_BUFFER_INFO 		DOS_REG_ADDR(HCODEC_DECODER_BUFFER_INFO)
+#define HCODEC_FST_FOR_MV_X 0x1c10 	///../ucode/dos_register.h:5114
+#define P_HCODEC_FST_FOR_MV_X 		DOS_REG_ADDR(HCODEC_FST_FOR_MV_X)
+#define HCODEC_FST_FOR_MV_Y 0x1c11 	///../ucode/dos_register.h:5115
+#define P_HCODEC_FST_FOR_MV_Y 		DOS_REG_ADDR(HCODEC_FST_FOR_MV_Y)
+#define HCODEC_SCD_FOR_MV_X 0x1c12 	///../ucode/dos_register.h:5116
+#define P_HCODEC_SCD_FOR_MV_X 		DOS_REG_ADDR(HCODEC_SCD_FOR_MV_X)
+#define HCODEC_SCD_FOR_MV_Y 0x1c13 	///../ucode/dos_register.h:5117
+#define P_HCODEC_SCD_FOR_MV_Y 		DOS_REG_ADDR(HCODEC_SCD_FOR_MV_Y)
+#define HCODEC_FST_BAK_MV_X 0x1c14 	///../ucode/dos_register.h:5118
+#define P_HCODEC_FST_BAK_MV_X 		DOS_REG_ADDR(HCODEC_FST_BAK_MV_X)
+#define HCODEC_FST_BAK_MV_Y 0x1c15 	///../ucode/dos_register.h:5119
+#define P_HCODEC_FST_BAK_MV_Y 		DOS_REG_ADDR(HCODEC_FST_BAK_MV_Y)
+#define HCODEC_SCD_BAK_MV_X 0x1c16 	///../ucode/dos_register.h:5120
+#define P_HCODEC_SCD_BAK_MV_X 		DOS_REG_ADDR(HCODEC_SCD_BAK_MV_X)
+#define HCODEC_SCD_BAK_MV_Y 0x1c17 	///../ucode/dos_register.h:5121
+#define P_HCODEC_SCD_BAK_MV_Y 		DOS_REG_ADDR(HCODEC_SCD_BAK_MV_Y)
+#define HCODEC_VLD_DECODE_CONTROL 0x1c18 	///../ucode/dos_register.h:5127
+#define P_HCODEC_VLD_DECODE_CONTROL 		DOS_REG_ADDR(HCODEC_VLD_DECODE_CONTROL)
+#define HCODEC_VLD_REVERVED_19 0x1c19 	///../ucode/dos_register.h:5128
+#define P_HCODEC_VLD_REVERVED_19 		DOS_REG_ADDR(HCODEC_VLD_REVERVED_19)
+#define HCODEC_VIFF_BIT_CNT 0x1c1a 	///../ucode/dos_register.h:5129
+#define P_HCODEC_VIFF_BIT_CNT 		DOS_REG_ADDR(HCODEC_VIFF_BIT_CNT)
+#define HCODEC_BYTE_ALIGN_PEAK_HI 0x1c1b 	///../ucode/dos_register.h:5130
+#define P_HCODEC_BYTE_ALIGN_PEAK_HI 		DOS_REG_ADDR(HCODEC_BYTE_ALIGN_PEAK_HI)
+#define HCODEC_BYTE_ALIGN_PEAK_LO 0x1c1c 	///../ucode/dos_register.h:5131
+#define P_HCODEC_BYTE_ALIGN_PEAK_LO 		DOS_REG_ADDR(HCODEC_BYTE_ALIGN_PEAK_LO)
+#define HCODEC_NEXT_ALIGN_PEAK 0x1c1d 	///../ucode/dos_register.h:5132
+#define P_HCODEC_NEXT_ALIGN_PEAK 		DOS_REG_ADDR(HCODEC_NEXT_ALIGN_PEAK)
+#define HCODEC_VC1_CONTROL_REG 0x1c1e 	///../ucode/dos_register.h:5148
+#define P_HCODEC_VC1_CONTROL_REG 		DOS_REG_ADDR(HCODEC_VC1_CONTROL_REG)
+#define HCODEC_PMV1_X 0x1c20 	///../ucode/dos_register.h:5149
+#define P_HCODEC_PMV1_X 		DOS_REG_ADDR(HCODEC_PMV1_X)
+#define HCODEC_PMV1_Y 0x1c21 	///../ucode/dos_register.h:5150
+#define P_HCODEC_PMV1_Y 		DOS_REG_ADDR(HCODEC_PMV1_Y)
+#define HCODEC_PMV2_X 0x1c22 	///../ucode/dos_register.h:5151
+#define P_HCODEC_PMV2_X 		DOS_REG_ADDR(HCODEC_PMV2_X)
+#define HCODEC_PMV2_Y 0x1c23 	///../ucode/dos_register.h:5152
+#define P_HCODEC_PMV2_Y 		DOS_REG_ADDR(HCODEC_PMV2_Y)
+#define HCODEC_PMV3_X 0x1c24 	///../ucode/dos_register.h:5153
+#define P_HCODEC_PMV3_X 		DOS_REG_ADDR(HCODEC_PMV3_X)
+#define HCODEC_PMV3_Y 0x1c25 	///../ucode/dos_register.h:5154
+#define P_HCODEC_PMV3_Y 		DOS_REG_ADDR(HCODEC_PMV3_Y)
+#define HCODEC_PMV4_X 0x1c26 	///../ucode/dos_register.h:5155
+#define P_HCODEC_PMV4_X 		DOS_REG_ADDR(HCODEC_PMV4_X)
+#define HCODEC_PMV4_Y 0x1c27 	///../ucode/dos_register.h:5156
+#define P_HCODEC_PMV4_Y 		DOS_REG_ADDR(HCODEC_PMV4_Y)
+#define HCODEC_M4_TABLE_SELECT 0x1c28 	///../ucode/dos_register.h:5163
+#define P_HCODEC_M4_TABLE_SELECT 		DOS_REG_ADDR(HCODEC_M4_TABLE_SELECT)
+#define HCODEC_M4_CONTROL_REG 0x1c29 	///../ucode/dos_register.h:5164
+#define P_HCODEC_M4_CONTROL_REG 		DOS_REG_ADDR(HCODEC_M4_CONTROL_REG)
+#define HCODEC_BLOCK_NUM 0x1c2a 	///../ucode/dos_register.h:5165
+#define P_HCODEC_BLOCK_NUM 		DOS_REG_ADDR(HCODEC_BLOCK_NUM)
+#define HCODEC_PATTERN_CODE 0x1c2b 	///../ucode/dos_register.h:5166
+#define P_HCODEC_PATTERN_CODE 		DOS_REG_ADDR(HCODEC_PATTERN_CODE)
+#define HCODEC_MB_INFO 0x1c2c 	///../ucode/dos_register.h:5167
+#define P_HCODEC_MB_INFO 		DOS_REG_ADDR(HCODEC_MB_INFO)
+#define HCODEC_VLD_DC_PRED 0x1c2d 	///../ucode/dos_register.h:5168
+#define P_HCODEC_VLD_DC_PRED 		DOS_REG_ADDR(HCODEC_VLD_DC_PRED)
+#define HCODEC_VLD_ERROR_MASK 0x1c2e 	///../ucode/dos_register.h:5169
+#define P_HCODEC_VLD_ERROR_MASK 		DOS_REG_ADDR(HCODEC_VLD_ERROR_MASK)
+#define HCODEC_VLD_DC_PRED_C 0x1c2f 	///../ucode/dos_register.h:5170
+#define P_HCODEC_VLD_DC_PRED_C 		DOS_REG_ADDR(HCODEC_VLD_DC_PRED_C)
+#define HCODEC_LAST_SLICE_MV_ADDR 0x1c30 	///../ucode/dos_register.h:5171
+#define P_HCODEC_LAST_SLICE_MV_ADDR 		DOS_REG_ADDR(HCODEC_LAST_SLICE_MV_ADDR)
+#define HCODEC_LAST_MVX 0x1c31 	///../ucode/dos_register.h:5172
+#define P_HCODEC_LAST_MVX 		DOS_REG_ADDR(HCODEC_LAST_MVX)
+#define HCODEC_LAST_MVY 0x1c32 	///../ucode/dos_register.h:5173
+#define P_HCODEC_LAST_MVY 		DOS_REG_ADDR(HCODEC_LAST_MVY)
+#define HCODEC_VLD_C38 0x1c38 	///../ucode/dos_register.h:5174
+#define P_HCODEC_VLD_C38 		DOS_REG_ADDR(HCODEC_VLD_C38)
+#define HCODEC_VLD_C39 0x1c39 	///../ucode/dos_register.h:5175
+#define P_HCODEC_VLD_C39 		DOS_REG_ADDR(HCODEC_VLD_C39)
+#define HCODEC_VLD_STATUS 0x1c3a 	///../ucode/dos_register.h:5176
+#define P_HCODEC_VLD_STATUS 		DOS_REG_ADDR(HCODEC_VLD_STATUS)
+#define HCODEC_VLD_SHIFT_STATUS 0x1c3b 	///../ucode/dos_register.h:5177
+#define P_HCODEC_VLD_SHIFT_STATUS 		DOS_REG_ADDR(HCODEC_VLD_SHIFT_STATUS)
+#define HCODEC_VOFF_STATUS 0x1c3c 	///../ucode/dos_register.h:5179
+#define P_HCODEC_VOFF_STATUS 		DOS_REG_ADDR(HCODEC_VOFF_STATUS)
+#define HCODEC_VLD_C3D 0x1c3d 	///../ucode/dos_register.h:5180
+#define P_HCODEC_VLD_C3D 		DOS_REG_ADDR(HCODEC_VLD_C3D)
+#define HCODEC_VLD_DBG_INDEX 0x1c3e 	///../ucode/dos_register.h:5181
+#define P_HCODEC_VLD_DBG_INDEX 		DOS_REG_ADDR(HCODEC_VLD_DBG_INDEX)
+#define HCODEC_VLD_DBG_DATA 0x1c3f 	///../ucode/dos_register.h:5257
+#define P_HCODEC_VLD_DBG_DATA 		DOS_REG_ADDR(HCODEC_VLD_DBG_DATA)
+#define HCODEC_VLD_MEM_VIFIFO_START_PTR 0x1c40 	///../ucode/dos_register.h:5264
+#define P_HCODEC_VLD_MEM_VIFIFO_START_PTR 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_START_PTR)
+#define HCODEC_VLD_MEM_VIFIFO_CURR_PTR 0x1c41 	///../ucode/dos_register.h:5268
+#define P_HCODEC_VLD_MEM_VIFIFO_CURR_PTR 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_CURR_PTR)
+#define HCODEC_VLD_MEM_VIFIFO_END_PTR 0x1c42 	///../ucode/dos_register.h:5269
+#define P_HCODEC_VLD_MEM_VIFIFO_END_PTR 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_END_PTR)
+#define HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL 0x1c43 	///../ucode/dos_register.h:5270
+#define P_HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define HCODEC_VLD_MEM_VIFIFO_CONTROL 0x1c44 	///../ucode/dos_register.h:5301
+#define P_HCODEC_VLD_MEM_VIFIFO_CONTROL 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_CONTROL)
+#define HCODEC_VLD_MEM_VIFIFO_WP 0x1c45 	///../ucode/dos_register.h:5305
+#define P_HCODEC_VLD_MEM_VIFIFO_WP 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_WP)
+#define HCODEC_VLD_MEM_VIFIFO_RP 0x1c46 	///../ucode/dos_register.h:5306
+#define P_HCODEC_VLD_MEM_VIFIFO_RP 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_RP)
+#define HCODEC_VLD_MEM_VIFIFO_LEVEL 0x1c47 	///../ucode/dos_register.h:5307
+#define P_HCODEC_VLD_MEM_VIFIFO_LEVEL 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_LEVEL)
+#define HCODEC_VLD_MEM_VIFIFO_BUF_CNTL 0x1c48 	///../ucode/dos_register.h:5317
+#define P_HCODEC_VLD_MEM_VIFIFO_BUF_CNTL 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_BUF_CNTL)
+#define HCODEC_VLD_TIME_STAMP_CNTL 0x1c49 	///../ucode/dos_register.h:5327
+#define P_HCODEC_VLD_TIME_STAMP_CNTL 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_CNTL)
+#define HCODEC_VLD_TIME_STAMP_SYNC_0 0x1c4a 	///../ucode/dos_register.h:5329
+#define P_HCODEC_VLD_TIME_STAMP_SYNC_0 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_SYNC_0)
+#define HCODEC_VLD_TIME_STAMP_SYNC_1 0x1c4b 	///../ucode/dos_register.h:5331
+#define P_HCODEC_VLD_TIME_STAMP_SYNC_1 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_SYNC_1)
+#define HCODEC_VLD_TIME_STAMP_0 0x1c4c 	///../ucode/dos_register.h:5333
+#define P_HCODEC_VLD_TIME_STAMP_0 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_0)
+#define HCODEC_VLD_TIME_STAMP_1 0x1c4d 	///../ucode/dos_register.h:5335
+#define P_HCODEC_VLD_TIME_STAMP_1 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_1)
+#define HCODEC_VLD_TIME_STAMP_2 0x1c4e 	///../ucode/dos_register.h:5337
+#define P_HCODEC_VLD_TIME_STAMP_2 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_2)
+#define HCODEC_VLD_TIME_STAMP_3 0x1c4f 	///../ucode/dos_register.h:5339
+#define P_HCODEC_VLD_TIME_STAMP_3 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_3)
+#define HCODEC_VLD_TIME_STAMP_LENGTH 0x1c50 	///../ucode/dos_register.h:5341
+#define P_HCODEC_VLD_TIME_STAMP_LENGTH 		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_LENGTH)
+#define HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT 0x1c51 	///../ucode/dos_register.h:5343
+#define P_HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT)
+#define HCODEC_VLD_MEM_VIFIFO_MEM_CTL 0x1c52 	///../ucode/dos_register.h:5347
+#define P_HCODEC_VLD_MEM_VIFIFO_MEM_CTL 		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_MEM_CTL)
+#define HCODEC_VLD_MEM_VBUF_RD_PTR 0x1c53 	///../ucode/dos_register.h:5348
+#define P_HCODEC_VLD_MEM_VBUF_RD_PTR 		DOS_REG_ADDR(HCODEC_VLD_MEM_VBUF_RD_PTR)
+#define HCODEC_VLD_MEM_VBUF2_RD_PTR 0x1c54 	///../ucode/dos_register.h:5349
+#define P_HCODEC_VLD_MEM_VBUF2_RD_PTR 		DOS_REG_ADDR(HCODEC_VLD_MEM_VBUF2_RD_PTR)
+#define HCODEC_VLD_MEM_SWAP_ADDR 0x1c55 	///../ucode/dos_register.h:5350
+#define P_HCODEC_VLD_MEM_SWAP_ADDR 		DOS_REG_ADDR(HCODEC_VLD_MEM_SWAP_ADDR)
+#define HCODEC_VLD_MEM_SWAP_CTL 0x1c56 	///../ucode/dos_register.h:5357
+#define P_HCODEC_VLD_MEM_SWAP_CTL 		DOS_REG_ADDR(HCODEC_VLD_MEM_SWAP_CTL)
+#define VDEC2_VLD_STATUS_CTRL 0x2c00 	///../ucode/dos_register.h:5370
+#define P_VDEC2_VLD_STATUS_CTRL 		DOS_REG_ADDR(VDEC2_VLD_STATUS_CTRL)
+#define VDEC2_MPEG1_2_REG 0x2c01 	///../ucode/dos_register.h:5380
+#define P_VDEC2_MPEG1_2_REG 		DOS_REG_ADDR(VDEC2_MPEG1_2_REG)
+#define VDEC2_F_CODE_REG 0x2c02 	///../ucode/dos_register.h:5381
+#define P_VDEC2_F_CODE_REG 		DOS_REG_ADDR(VDEC2_F_CODE_REG)
+#define VDEC2_PIC_HEAD_INFO 0x2c03 	///../ucode/dos_register.h:5382
+#define P_VDEC2_PIC_HEAD_INFO 		DOS_REG_ADDR(VDEC2_PIC_HEAD_INFO)
+#define VDEC2_SLICE_VER_POS_PIC_TYPE 0x2c04 	///../ucode/dos_register.h:5383
+#define P_VDEC2_SLICE_VER_POS_PIC_TYPE 		DOS_REG_ADDR(VDEC2_SLICE_VER_POS_PIC_TYPE)
+#define VDEC2_QP_VALUE_REG 0x2c05 	///../ucode/dos_register.h:5384
+#define P_VDEC2_QP_VALUE_REG 		DOS_REG_ADDR(VDEC2_QP_VALUE_REG)
+#define VDEC2_MBA_INC 0x2c06 	///../ucode/dos_register.h:5385
+#define P_VDEC2_MBA_INC 		DOS_REG_ADDR(VDEC2_MBA_INC)
+#define VDEC2_MB_MOTION_MODE 0x2c07 	///../ucode/dos_register.h:5386
+#define P_VDEC2_MB_MOTION_MODE 		DOS_REG_ADDR(VDEC2_MB_MOTION_MODE)
+#define VDEC2_POWER_CTL_VLD 0x2c08 	///../ucode/dos_register.h:5394
+#define P_VDEC2_POWER_CTL_VLD 		DOS_REG_ADDR(VDEC2_POWER_CTL_VLD)
+#define VDEC2_MB_WIDTH 0x2c09 	///../ucode/dos_register.h:5395
+#define P_VDEC2_MB_WIDTH 		DOS_REG_ADDR(VDEC2_MB_WIDTH)
+#define VDEC2_SLICE_QP 0x2c0a 	///../ucode/dos_register.h:5396
+#define P_VDEC2_SLICE_QP 		DOS_REG_ADDR(VDEC2_SLICE_QP)
+#define VDEC2_PRE_START_CODE 0x2c0b 	///../ucode/dos_register.h:5398
+#define P_VDEC2_PRE_START_CODE 		DOS_REG_ADDR(VDEC2_PRE_START_CODE)
+#define VDEC2_SLICE_START_BYTE_01 0x2c0c 	///../ucode/dos_register.h:5399
+#define P_VDEC2_SLICE_START_BYTE_01 		DOS_REG_ADDR(VDEC2_SLICE_START_BYTE_01)
+#define VDEC2_SLICE_START_BYTE_23 0x2c0d 	///../ucode/dos_register.h:5400
+#define P_VDEC2_SLICE_START_BYTE_23 		DOS_REG_ADDR(VDEC2_SLICE_START_BYTE_23)
+#define VDEC2_RESYNC_MARKER_LENGTH 0x2c0e 	///../ucode/dos_register.h:5401
+#define P_VDEC2_RESYNC_MARKER_LENGTH 		DOS_REG_ADDR(VDEC2_RESYNC_MARKER_LENGTH)
+#define VDEC2_DECODER_BUFFER_INFO 0x2c0f 	///../ucode/dos_register.h:5405
+#define P_VDEC2_DECODER_BUFFER_INFO 		DOS_REG_ADDR(VDEC2_DECODER_BUFFER_INFO)
+#define VDEC2_FST_FOR_MV_X 0x2c10 	///../ucode/dos_register.h:5406
+#define P_VDEC2_FST_FOR_MV_X 		DOS_REG_ADDR(VDEC2_FST_FOR_MV_X)
+#define VDEC2_FST_FOR_MV_Y 0x2c11 	///../ucode/dos_register.h:5407
+#define P_VDEC2_FST_FOR_MV_Y 		DOS_REG_ADDR(VDEC2_FST_FOR_MV_Y)
+#define VDEC2_SCD_FOR_MV_X 0x2c12 	///../ucode/dos_register.h:5408
+#define P_VDEC2_SCD_FOR_MV_X 		DOS_REG_ADDR(VDEC2_SCD_FOR_MV_X)
+#define VDEC2_SCD_FOR_MV_Y 0x2c13 	///../ucode/dos_register.h:5409
+#define P_VDEC2_SCD_FOR_MV_Y 		DOS_REG_ADDR(VDEC2_SCD_FOR_MV_Y)
+#define VDEC2_FST_BAK_MV_X 0x2c14 	///../ucode/dos_register.h:5410
+#define P_VDEC2_FST_BAK_MV_X 		DOS_REG_ADDR(VDEC2_FST_BAK_MV_X)
+#define VDEC2_FST_BAK_MV_Y 0x2c15 	///../ucode/dos_register.h:5411
+#define P_VDEC2_FST_BAK_MV_Y 		DOS_REG_ADDR(VDEC2_FST_BAK_MV_Y)
+#define VDEC2_SCD_BAK_MV_X 0x2c16 	///../ucode/dos_register.h:5412
+#define P_VDEC2_SCD_BAK_MV_X 		DOS_REG_ADDR(VDEC2_SCD_BAK_MV_X)
+#define VDEC2_SCD_BAK_MV_Y 0x2c17 	///../ucode/dos_register.h:5413
+#define P_VDEC2_SCD_BAK_MV_Y 		DOS_REG_ADDR(VDEC2_SCD_BAK_MV_Y)
+#define VDEC2_VLD_DECODE_CONTROL 0x2c18 	///../ucode/dos_register.h:5419
+#define P_VDEC2_VLD_DECODE_CONTROL 		DOS_REG_ADDR(VDEC2_VLD_DECODE_CONTROL)
+#define VDEC2_VLD_REVERVED_19 0x2c19 	///../ucode/dos_register.h:5420
+#define P_VDEC2_VLD_REVERVED_19 		DOS_REG_ADDR(VDEC2_VLD_REVERVED_19)
+#define VDEC2_VIFF_BIT_CNT 0x2c1a 	///../ucode/dos_register.h:5421
+#define P_VDEC2_VIFF_BIT_CNT 		DOS_REG_ADDR(VDEC2_VIFF_BIT_CNT)
+#define VDEC2_BYTE_ALIGN_PEAK_HI 0x2c1b 	///../ucode/dos_register.h:5422
+#define P_VDEC2_BYTE_ALIGN_PEAK_HI 		DOS_REG_ADDR(VDEC2_BYTE_ALIGN_PEAK_HI)
+#define VDEC2_BYTE_ALIGN_PEAK_LO 0x2c1c 	///../ucode/dos_register.h:5423
+#define P_VDEC2_BYTE_ALIGN_PEAK_LO 		DOS_REG_ADDR(VDEC2_BYTE_ALIGN_PEAK_LO)
+#define VDEC2_NEXT_ALIGN_PEAK 0x2c1d 	///../ucode/dos_register.h:5424
+#define P_VDEC2_NEXT_ALIGN_PEAK 		DOS_REG_ADDR(VDEC2_NEXT_ALIGN_PEAK)
+#define VDEC2_VC1_CONTROL_REG 0x2c1e 	///../ucode/dos_register.h:5440
+#define P_VDEC2_VC1_CONTROL_REG 		DOS_REG_ADDR(VDEC2_VC1_CONTROL_REG)
+#define VDEC2_PMV1_X 0x2c20 	///../ucode/dos_register.h:5441
+#define P_VDEC2_PMV1_X 		DOS_REG_ADDR(VDEC2_PMV1_X)
+#define VDEC2_PMV1_Y 0x2c21 	///../ucode/dos_register.h:5442
+#define P_VDEC2_PMV1_Y 		DOS_REG_ADDR(VDEC2_PMV1_Y)
+#define VDEC2_PMV2_X 0x2c22 	///../ucode/dos_register.h:5443
+#define P_VDEC2_PMV2_X 		DOS_REG_ADDR(VDEC2_PMV2_X)
+#define VDEC2_PMV2_Y 0x2c23 	///../ucode/dos_register.h:5444
+#define P_VDEC2_PMV2_Y 		DOS_REG_ADDR(VDEC2_PMV2_Y)
+#define VDEC2_PMV3_X 0x2c24 	///../ucode/dos_register.h:5445
+#define P_VDEC2_PMV3_X 		DOS_REG_ADDR(VDEC2_PMV3_X)
+#define VDEC2_PMV3_Y 0x2c25 	///../ucode/dos_register.h:5446
+#define P_VDEC2_PMV3_Y 		DOS_REG_ADDR(VDEC2_PMV3_Y)
+#define VDEC2_PMV4_X 0x2c26 	///../ucode/dos_register.h:5447
+#define P_VDEC2_PMV4_X 		DOS_REG_ADDR(VDEC2_PMV4_X)
+#define VDEC2_PMV4_Y 0x2c27 	///../ucode/dos_register.h:5448
+#define P_VDEC2_PMV4_Y 		DOS_REG_ADDR(VDEC2_PMV4_Y)
+#define VDEC2_M4_TABLE_SELECT 0x2c28 	///../ucode/dos_register.h:5455
+#define P_VDEC2_M4_TABLE_SELECT 		DOS_REG_ADDR(VDEC2_M4_TABLE_SELECT)
+#define VDEC2_M4_CONTROL_REG 0x2c29 	///../ucode/dos_register.h:5456
+#define P_VDEC2_M4_CONTROL_REG 		DOS_REG_ADDR(VDEC2_M4_CONTROL_REG)
+#define VDEC2_BLOCK_NUM 0x2c2a 	///../ucode/dos_register.h:5457
+#define P_VDEC2_BLOCK_NUM 		DOS_REG_ADDR(VDEC2_BLOCK_NUM)
+#define VDEC2_PATTERN_CODE 0x2c2b 	///../ucode/dos_register.h:5458
+#define P_VDEC2_PATTERN_CODE 		DOS_REG_ADDR(VDEC2_PATTERN_CODE)
+#define VDEC2_MB_INFO 0x2c2c 	///../ucode/dos_register.h:5459
+#define P_VDEC2_MB_INFO 		DOS_REG_ADDR(VDEC2_MB_INFO)
+#define VDEC2_VLD_DC_PRED 0x2c2d 	///../ucode/dos_register.h:5460
+#define P_VDEC2_VLD_DC_PRED 		DOS_REG_ADDR(VDEC2_VLD_DC_PRED)
+#define VDEC2_VLD_ERROR_MASK 0x2c2e 	///../ucode/dos_register.h:5461
+#define P_VDEC2_VLD_ERROR_MASK 		DOS_REG_ADDR(VDEC2_VLD_ERROR_MASK)
+#define VDEC2_VLD_DC_PRED_C 0x2c2f 	///../ucode/dos_register.h:5462
+#define P_VDEC2_VLD_DC_PRED_C 		DOS_REG_ADDR(VDEC2_VLD_DC_PRED_C)
+#define VDEC2_LAST_SLICE_MV_ADDR 0x2c30 	///../ucode/dos_register.h:5463
+#define P_VDEC2_LAST_SLICE_MV_ADDR 		DOS_REG_ADDR(VDEC2_LAST_SLICE_MV_ADDR)
+#define VDEC2_LAST_MVX 0x2c31 	///../ucode/dos_register.h:5464
+#define P_VDEC2_LAST_MVX 		DOS_REG_ADDR(VDEC2_LAST_MVX)
+#define VDEC2_LAST_MVY 0x2c32 	///../ucode/dos_register.h:5465
+#define P_VDEC2_LAST_MVY 		DOS_REG_ADDR(VDEC2_LAST_MVY)
+#define VDEC2_VLD_C38 0x2c38 	///../ucode/dos_register.h:5466
+#define P_VDEC2_VLD_C38 		DOS_REG_ADDR(VDEC2_VLD_C38)
+#define VDEC2_VLD_C39 0x2c39 	///../ucode/dos_register.h:5467
+#define P_VDEC2_VLD_C39 		DOS_REG_ADDR(VDEC2_VLD_C39)
+#define VDEC2_VLD_STATUS 0x2c3a 	///../ucode/dos_register.h:5468
+#define P_VDEC2_VLD_STATUS 		DOS_REG_ADDR(VDEC2_VLD_STATUS)
+#define VDEC2_VLD_SHIFT_STATUS 0x2c3b 	///../ucode/dos_register.h:5469
+#define P_VDEC2_VLD_SHIFT_STATUS 		DOS_REG_ADDR(VDEC2_VLD_SHIFT_STATUS)
+#define VDEC2_VOFF_STATUS 0x2c3c 	///../ucode/dos_register.h:5471
+#define P_VDEC2_VOFF_STATUS 		DOS_REG_ADDR(VDEC2_VOFF_STATUS)
+#define VDEC2_VLD_C3D 0x2c3d 	///../ucode/dos_register.h:5472
+#define P_VDEC2_VLD_C3D 		DOS_REG_ADDR(VDEC2_VLD_C3D)
+#define VDEC2_VLD_DBG_INDEX 0x2c3e 	///../ucode/dos_register.h:5473
+#define P_VDEC2_VLD_DBG_INDEX 		DOS_REG_ADDR(VDEC2_VLD_DBG_INDEX)
+#define VDEC2_VLD_DBG_DATA 0x2c3f 	///../ucode/dos_register.h:5549
+#define P_VDEC2_VLD_DBG_DATA 		DOS_REG_ADDR(VDEC2_VLD_DBG_DATA)
+#define VDEC2_VLD_MEM_VIFIFO_START_PTR 0x2c40 	///../ucode/dos_register.h:5556
+#define P_VDEC2_VLD_MEM_VIFIFO_START_PTR 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_START_PTR)
+#define VDEC2_VLD_MEM_VIFIFO_CURR_PTR 0x2c41 	///../ucode/dos_register.h:5560
+#define P_VDEC2_VLD_MEM_VIFIFO_CURR_PTR 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_CURR_PTR)
+#define VDEC2_VLD_MEM_VIFIFO_END_PTR 0x2c42 	///../ucode/dos_register.h:5561
+#define P_VDEC2_VLD_MEM_VIFIFO_END_PTR 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_END_PTR)
+#define VDEC2_VLD_MEM_VIFIFO_BYTES_AVAIL 0x2c43 	///../ucode/dos_register.h:5562
+#define P_VDEC2_VLD_MEM_VIFIFO_BYTES_AVAIL 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define VDEC2_VLD_MEM_VIFIFO_CONTROL 0x2c44 	///../ucode/dos_register.h:5593
+#define P_VDEC2_VLD_MEM_VIFIFO_CONTROL 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_CONTROL)
+#define VDEC2_VLD_MEM_VIFIFO_WP 0x2c45 	///../ucode/dos_register.h:5597
+#define P_VDEC2_VLD_MEM_VIFIFO_WP 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_WP)
+#define VDEC2_VLD_MEM_VIFIFO_RP 0x2c46 	///../ucode/dos_register.h:5598
+#define P_VDEC2_VLD_MEM_VIFIFO_RP 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_RP)
+#define VDEC2_VLD_MEM_VIFIFO_LEVEL 0x2c47 	///../ucode/dos_register.h:5599
+#define P_VDEC2_VLD_MEM_VIFIFO_LEVEL 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_LEVEL)
+#define VDEC2_VLD_MEM_VIFIFO_BUF_CNTL 0x2c48 	///../ucode/dos_register.h:5609
+#define P_VDEC2_VLD_MEM_VIFIFO_BUF_CNTL 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_BUF_CNTL)
+#define VDEC2_VLD_TIME_STAMP_CNTL 0x2c49 	///../ucode/dos_register.h:5619
+#define P_VDEC2_VLD_TIME_STAMP_CNTL 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_CNTL)
+#define VDEC2_VLD_TIME_STAMP_SYNC_0 0x2c4a 	///../ucode/dos_register.h:5621
+#define P_VDEC2_VLD_TIME_STAMP_SYNC_0 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_SYNC_0)
+#define VDEC2_VLD_TIME_STAMP_SYNC_1 0x2c4b 	///../ucode/dos_register.h:5623
+#define P_VDEC2_VLD_TIME_STAMP_SYNC_1 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_SYNC_1)
+#define VDEC2_VLD_TIME_STAMP_0 0x2c4c 	///../ucode/dos_register.h:5625
+#define P_VDEC2_VLD_TIME_STAMP_0 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_0)
+#define VDEC2_VLD_TIME_STAMP_1 0x2c4d 	///../ucode/dos_register.h:5627
+#define P_VDEC2_VLD_TIME_STAMP_1 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_1)
+#define VDEC2_VLD_TIME_STAMP_2 0x2c4e 	///../ucode/dos_register.h:5629
+#define P_VDEC2_VLD_TIME_STAMP_2 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_2)
+#define VDEC2_VLD_TIME_STAMP_3 0x2c4f 	///../ucode/dos_register.h:5631
+#define P_VDEC2_VLD_TIME_STAMP_3 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_3)
+#define VDEC2_VLD_TIME_STAMP_LENGTH 0x2c50 	///../ucode/dos_register.h:5633
+#define P_VDEC2_VLD_TIME_STAMP_LENGTH 		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_LENGTH)
+#define VDEC2_VLD_MEM_VIFIFO_WRAP_COUNT 0x2c51 	///../ucode/dos_register.h:5635
+#define P_VDEC2_VLD_MEM_VIFIFO_WRAP_COUNT 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_WRAP_COUNT)
+#define VDEC2_VLD_MEM_VIFIFO_MEM_CTL 0x2c52 	///../ucode/dos_register.h:5639
+#define P_VDEC2_VLD_MEM_VIFIFO_MEM_CTL 		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_MEM_CTL)
+#define VDEC2_VLD_MEM_VBUF_RD_PTR 0x2c53 	///../ucode/dos_register.h:5640
+#define P_VDEC2_VLD_MEM_VBUF_RD_PTR 		DOS_REG_ADDR(VDEC2_VLD_MEM_VBUF_RD_PTR)
+#define VDEC2_VLD_MEM_VBUF2_RD_PTR 0x2c54 	///../ucode/dos_register.h:5641
+#define P_VDEC2_VLD_MEM_VBUF2_RD_PTR 		DOS_REG_ADDR(VDEC2_VLD_MEM_VBUF2_RD_PTR)
+#define VDEC2_VLD_MEM_SWAP_ADDR 0x2c55 	///../ucode/dos_register.h:5642
+#define P_VDEC2_VLD_MEM_SWAP_ADDR 		DOS_REG_ADDR(VDEC2_VLD_MEM_SWAP_ADDR)
+#define VDEC2_VLD_MEM_SWAP_CTL 0x2c56 	///../ucode/dos_register.h:5649
+#define P_VDEC2_VLD_MEM_SWAP_CTL 		DOS_REG_ADDR(VDEC2_VLD_MEM_SWAP_CTL)
+#define HEVC_VLD_STATUS_CTRL 0x3c00 	///../ucode/dos_register.h:5662
+#define P_HEVC_VLD_STATUS_CTRL 		DOS_REG_ADDR(HEVC_VLD_STATUS_CTRL)
+#define HEVC_MPEG1_2_REG 0x3c01 	///../ucode/dos_register.h:5672
+#define P_HEVC_MPEG1_2_REG 		DOS_REG_ADDR(HEVC_MPEG1_2_REG)
+#define HEVC_F_CODE_REG 0x3c02 	///../ucode/dos_register.h:5673
+#define P_HEVC_F_CODE_REG 		DOS_REG_ADDR(HEVC_F_CODE_REG)
+#define HEVC_PIC_HEAD_INFO 0x3c03 	///../ucode/dos_register.h:5674
+#define P_HEVC_PIC_HEAD_INFO 		DOS_REG_ADDR(HEVC_PIC_HEAD_INFO)
+#define HEVC_SLICE_VER_POS_PIC_TYPE 0x3c04 	///../ucode/dos_register.h:5675
+#define P_HEVC_SLICE_VER_POS_PIC_TYPE 		DOS_REG_ADDR(HEVC_SLICE_VER_POS_PIC_TYPE)
+#define HEVC_QP_VALUE_REG 0x3c05 	///../ucode/dos_register.h:5676
+#define P_HEVC_QP_VALUE_REG 		DOS_REG_ADDR(HEVC_QP_VALUE_REG)
+#define HEVC_MBA_INC 0x3c06 	///../ucode/dos_register.h:5677
+#define P_HEVC_MBA_INC 		DOS_REG_ADDR(HEVC_MBA_INC)
+#define HEVC_MB_MOTION_MODE 0x3c07 	///../ucode/dos_register.h:5678
+#define P_HEVC_MB_MOTION_MODE 		DOS_REG_ADDR(HEVC_MB_MOTION_MODE)
+#define HEVC_POWER_CTL_VLD 0x3c08 	///../ucode/dos_register.h:5686
+#define P_HEVC_POWER_CTL_VLD 		DOS_REG_ADDR(HEVC_POWER_CTL_VLD)
+#define HEVC_MB_WIDTH 0x3c09 	///../ucode/dos_register.h:5687
+#define P_HEVC_MB_WIDTH 		DOS_REG_ADDR(HEVC_MB_WIDTH)
+#define HEVC_SLICE_QP 0x3c0a 	///../ucode/dos_register.h:5688
+#define P_HEVC_SLICE_QP 		DOS_REG_ADDR(HEVC_SLICE_QP)
+#define HEVC_PRE_START_CODE 0x3c0b 	///../ucode/dos_register.h:5690
+#define P_HEVC_PRE_START_CODE 		DOS_REG_ADDR(HEVC_PRE_START_CODE)
+#define HEVC_SLICE_START_BYTE_01 0x3c0c 	///../ucode/dos_register.h:5691
+#define P_HEVC_SLICE_START_BYTE_01 		DOS_REG_ADDR(HEVC_SLICE_START_BYTE_01)
+#define HEVC_SLICE_START_BYTE_23 0x3c0d 	///../ucode/dos_register.h:5692
+#define P_HEVC_SLICE_START_BYTE_23 		DOS_REG_ADDR(HEVC_SLICE_START_BYTE_23)
+#define HEVC_RESYNC_MARKER_LENGTH 0x3c0e 	///../ucode/dos_register.h:5693
+#define P_HEVC_RESYNC_MARKER_LENGTH 		DOS_REG_ADDR(HEVC_RESYNC_MARKER_LENGTH)
+#define HEVC_DECODER_BUFFER_INFO 0x3c0f 	///../ucode/dos_register.h:5697
+#define P_HEVC_DECODER_BUFFER_INFO 		DOS_REG_ADDR(HEVC_DECODER_BUFFER_INFO)
+#define HEVC_FST_FOR_MV_X 0x3c10 	///../ucode/dos_register.h:5698
+#define P_HEVC_FST_FOR_MV_X 		DOS_REG_ADDR(HEVC_FST_FOR_MV_X)
+#define HEVC_FST_FOR_MV_Y 0x3c11 	///../ucode/dos_register.h:5699
+#define P_HEVC_FST_FOR_MV_Y 		DOS_REG_ADDR(HEVC_FST_FOR_MV_Y)
+#define HEVC_SCD_FOR_MV_X 0x3c12 	///../ucode/dos_register.h:5700
+#define P_HEVC_SCD_FOR_MV_X 		DOS_REG_ADDR(HEVC_SCD_FOR_MV_X)
+#define HEVC_SCD_FOR_MV_Y 0x3c13 	///../ucode/dos_register.h:5701
+#define P_HEVC_SCD_FOR_MV_Y 		DOS_REG_ADDR(HEVC_SCD_FOR_MV_Y)
+#define HEVC_FST_BAK_MV_X 0x3c14 	///../ucode/dos_register.h:5702
+#define P_HEVC_FST_BAK_MV_X 		DOS_REG_ADDR(HEVC_FST_BAK_MV_X)
+#define HEVC_FST_BAK_MV_Y 0x3c15 	///../ucode/dos_register.h:5703
+#define P_HEVC_FST_BAK_MV_Y 		DOS_REG_ADDR(HEVC_FST_BAK_MV_Y)
+#define HEVC_SCD_BAK_MV_X 0x3c16 	///../ucode/dos_register.h:5704
+#define P_HEVC_SCD_BAK_MV_X 		DOS_REG_ADDR(HEVC_SCD_BAK_MV_X)
+#define HEVC_SCD_BAK_MV_Y 0x3c17 	///../ucode/dos_register.h:5705
+#define P_HEVC_SCD_BAK_MV_Y 		DOS_REG_ADDR(HEVC_SCD_BAK_MV_Y)
+#define HEVC_VLD_DECODE_CONTROL 0x3c18 	///../ucode/dos_register.h:5711
+#define P_HEVC_VLD_DECODE_CONTROL 		DOS_REG_ADDR(HEVC_VLD_DECODE_CONTROL)
+#define HEVC_VLD_REVERVED_19 0x3c19 	///../ucode/dos_register.h:5712
+#define P_HEVC_VLD_REVERVED_19 		DOS_REG_ADDR(HEVC_VLD_REVERVED_19)
+#define HEVC_VIFF_BIT_CNT 0x3c1a 	///../ucode/dos_register.h:5713
+#define P_HEVC_VIFF_BIT_CNT 		DOS_REG_ADDR(HEVC_VIFF_BIT_CNT)
+#define HEVC_BYTE_ALIGN_PEAK_HI 0x3c1b 	///../ucode/dos_register.h:5714
+#define P_HEVC_BYTE_ALIGN_PEAK_HI 		DOS_REG_ADDR(HEVC_BYTE_ALIGN_PEAK_HI)
+#define HEVC_BYTE_ALIGN_PEAK_LO 0x3c1c 	///../ucode/dos_register.h:5715
+#define P_HEVC_BYTE_ALIGN_PEAK_LO 		DOS_REG_ADDR(HEVC_BYTE_ALIGN_PEAK_LO)
+#define HEVC_NEXT_ALIGN_PEAK 0x3c1d 	///../ucode/dos_register.h:5716
+#define P_HEVC_NEXT_ALIGN_PEAK 		DOS_REG_ADDR(HEVC_NEXT_ALIGN_PEAK)
+#define HEVC_VC1_CONTROL_REG 0x3c1e 	///../ucode/dos_register.h:5732
+#define P_HEVC_VC1_CONTROL_REG 		DOS_REG_ADDR(HEVC_VC1_CONTROL_REG)
+#define HEVC_PMV1_X 0x3c20 	///../ucode/dos_register.h:5733
+#define P_HEVC_PMV1_X 		DOS_REG_ADDR(HEVC_PMV1_X)
+#define HEVC_PMV1_Y 0x3c21 	///../ucode/dos_register.h:5734
+#define P_HEVC_PMV1_Y 		DOS_REG_ADDR(HEVC_PMV1_Y)
+#define HEVC_PMV2_X 0x3c22 	///../ucode/dos_register.h:5735
+#define P_HEVC_PMV2_X 		DOS_REG_ADDR(HEVC_PMV2_X)
+#define HEVC_PMV2_Y 0x3c23 	///../ucode/dos_register.h:5736
+#define P_HEVC_PMV2_Y 		DOS_REG_ADDR(HEVC_PMV2_Y)
+#define HEVC_PMV3_X 0x3c24 	///../ucode/dos_register.h:5737
+#define P_HEVC_PMV3_X 		DOS_REG_ADDR(HEVC_PMV3_X)
+#define HEVC_PMV3_Y 0x3c25 	///../ucode/dos_register.h:5738
+#define P_HEVC_PMV3_Y 		DOS_REG_ADDR(HEVC_PMV3_Y)
+#define HEVC_PMV4_X 0x3c26 	///../ucode/dos_register.h:5739
+#define P_HEVC_PMV4_X 		DOS_REG_ADDR(HEVC_PMV4_X)
+#define HEVC_PMV4_Y 0x3c27 	///../ucode/dos_register.h:5740
+#define P_HEVC_PMV4_Y 		DOS_REG_ADDR(HEVC_PMV4_Y)
+#define HEVC_M4_TABLE_SELECT 0x3c28 	///../ucode/dos_register.h:5747
+#define P_HEVC_M4_TABLE_SELECT 		DOS_REG_ADDR(HEVC_M4_TABLE_SELECT)
+#define HEVC_M4_CONTROL_REG 0x3c29 	///../ucode/dos_register.h:5748
+#define P_HEVC_M4_CONTROL_REG 		DOS_REG_ADDR(HEVC_M4_CONTROL_REG)
+#define HEVC_BLOCK_NUM 0x3c2a 	///../ucode/dos_register.h:5749
+#define P_HEVC_BLOCK_NUM 		DOS_REG_ADDR(HEVC_BLOCK_NUM)
+#define HEVC_PATTERN_CODE 0x3c2b 	///../ucode/dos_register.h:5750
+#define P_HEVC_PATTERN_CODE 		DOS_REG_ADDR(HEVC_PATTERN_CODE)
+#define HEVC_MB_INFO 0x3c2c 	///../ucode/dos_register.h:5751
+#define P_HEVC_MB_INFO 		DOS_REG_ADDR(HEVC_MB_INFO)
+#define HEVC_VLD_DC_PRED 0x3c2d 	///../ucode/dos_register.h:5752
+#define P_HEVC_VLD_DC_PRED 		DOS_REG_ADDR(HEVC_VLD_DC_PRED)
+#define HEVC_VLD_ERROR_MASK 0x3c2e 	///../ucode/dos_register.h:5753
+#define P_HEVC_VLD_ERROR_MASK 		DOS_REG_ADDR(HEVC_VLD_ERROR_MASK)
+#define HEVC_VLD_DC_PRED_C 0x3c2f 	///../ucode/dos_register.h:5754
+#define P_HEVC_VLD_DC_PRED_C 		DOS_REG_ADDR(HEVC_VLD_DC_PRED_C)
+#define HEVC_LAST_SLICE_MV_ADDR 0x3c30 	///../ucode/dos_register.h:5755
+#define P_HEVC_LAST_SLICE_MV_ADDR 		DOS_REG_ADDR(HEVC_LAST_SLICE_MV_ADDR)
+#define HEVC_LAST_MVX 0x3c31 	///../ucode/dos_register.h:5756
+#define P_HEVC_LAST_MVX 		DOS_REG_ADDR(HEVC_LAST_MVX)
+#define HEVC_LAST_MVY 0x3c32 	///../ucode/dos_register.h:5757
+#define P_HEVC_LAST_MVY 		DOS_REG_ADDR(HEVC_LAST_MVY)
+#define HEVC_VLD_C38 0x3c38 	///../ucode/dos_register.h:5758
+#define P_HEVC_VLD_C38 		DOS_REG_ADDR(HEVC_VLD_C38)
+#define HEVC_VLD_C39 0x3c39 	///../ucode/dos_register.h:5759
+#define P_HEVC_VLD_C39 		DOS_REG_ADDR(HEVC_VLD_C39)
+#define HEVC_VLD_STATUS 0x3c3a 	///../ucode/dos_register.h:5760
+#define P_HEVC_VLD_STATUS 		DOS_REG_ADDR(HEVC_VLD_STATUS)
+#define HEVC_VLD_SHIFT_STATUS 0x3c3b 	///../ucode/dos_register.h:5761
+#define P_HEVC_VLD_SHIFT_STATUS 		DOS_REG_ADDR(HEVC_VLD_SHIFT_STATUS)
+#define HEVC_VOFF_STATUS 0x3c3c 	///../ucode/dos_register.h:5763
+#define P_HEVC_VOFF_STATUS 		DOS_REG_ADDR(HEVC_VOFF_STATUS)
+#define HEVC_VLD_C3D 0x3c3d 	///../ucode/dos_register.h:5764
+#define P_HEVC_VLD_C3D 		DOS_REG_ADDR(HEVC_VLD_C3D)
+#define HEVC_VLD_DBG_INDEX 0x3c3e 	///../ucode/dos_register.h:5765
+#define P_HEVC_VLD_DBG_INDEX 		DOS_REG_ADDR(HEVC_VLD_DBG_INDEX)
+#define HEVC_VLD_DBG_DATA 0x3c3f 	///../ucode/dos_register.h:5841
+#define P_HEVC_VLD_DBG_DATA 		DOS_REG_ADDR(HEVC_VLD_DBG_DATA)
+#define HEVC_VLD_MEM_VIFIFO_START_PTR 0x3c40 	///../ucode/dos_register.h:5848
+#define P_HEVC_VLD_MEM_VIFIFO_START_PTR 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_START_PTR)
+#define HEVC_VLD_MEM_VIFIFO_CURR_PTR 0x3c41 	///../ucode/dos_register.h:5852
+#define P_HEVC_VLD_MEM_VIFIFO_CURR_PTR 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_CURR_PTR)
+#define HEVC_VLD_MEM_VIFIFO_END_PTR 0x3c42 	///../ucode/dos_register.h:5853
+#define P_HEVC_VLD_MEM_VIFIFO_END_PTR 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_END_PTR)
+#define HEVC_VLD_MEM_VIFIFO_BYTES_AVAIL 0x3c43 	///../ucode/dos_register.h:5854
+#define P_HEVC_VLD_MEM_VIFIFO_BYTES_AVAIL 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define HEVC_VLD_MEM_VIFIFO_CONTROL 0x3c44 	///../ucode/dos_register.h:5885
+#define P_HEVC_VLD_MEM_VIFIFO_CONTROL 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_CONTROL)
+#define HEVC_VLD_MEM_VIFIFO_WP 0x3c45 	///../ucode/dos_register.h:5889
+#define P_HEVC_VLD_MEM_VIFIFO_WP 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_WP)
+#define HEVC_VLD_MEM_VIFIFO_RP 0x3c46 	///../ucode/dos_register.h:5890
+#define P_HEVC_VLD_MEM_VIFIFO_RP 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_RP)
+#define HEVC_VLD_MEM_VIFIFO_LEVEL 0x3c47 	///../ucode/dos_register.h:5891
+#define P_HEVC_VLD_MEM_VIFIFO_LEVEL 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_LEVEL)
+#define HEVC_VLD_MEM_VIFIFO_BUF_CNTL 0x3c48 	///../ucode/dos_register.h:5901
+#define P_HEVC_VLD_MEM_VIFIFO_BUF_CNTL 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_BUF_CNTL)
+#define HEVC_VLD_TIME_STAMP_CNTL 0x3c49 	///../ucode/dos_register.h:5911
+#define P_HEVC_VLD_TIME_STAMP_CNTL 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_CNTL)
+#define HEVC_VLD_TIME_STAMP_SYNC_0 0x3c4a 	///../ucode/dos_register.h:5913
+#define P_HEVC_VLD_TIME_STAMP_SYNC_0 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_SYNC_0)
+#define HEVC_VLD_TIME_STAMP_SYNC_1 0x3c4b 	///../ucode/dos_register.h:5915
+#define P_HEVC_VLD_TIME_STAMP_SYNC_1 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_SYNC_1)
+#define HEVC_VLD_TIME_STAMP_0 0x3c4c 	///../ucode/dos_register.h:5917
+#define P_HEVC_VLD_TIME_STAMP_0 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_0)
+#define HEVC_VLD_TIME_STAMP_1 0x3c4d 	///../ucode/dos_register.h:5919
+#define P_HEVC_VLD_TIME_STAMP_1 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_1)
+#define HEVC_VLD_TIME_STAMP_2 0x3c4e 	///../ucode/dos_register.h:5921
+#define P_HEVC_VLD_TIME_STAMP_2 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_2)
+#define HEVC_VLD_TIME_STAMP_3 0x3c4f 	///../ucode/dos_register.h:5923
+#define P_HEVC_VLD_TIME_STAMP_3 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_3)
+#define HEVC_VLD_TIME_STAMP_LENGTH 0x3c50 	///../ucode/dos_register.h:5925
+#define P_HEVC_VLD_TIME_STAMP_LENGTH 		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_LENGTH)
+#define HEVC_VLD_MEM_VIFIFO_WRAP_COUNT 0x3c51 	///../ucode/dos_register.h:5927
+#define P_HEVC_VLD_MEM_VIFIFO_WRAP_COUNT 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_WRAP_COUNT)
+#define HEVC_VLD_MEM_VIFIFO_MEM_CTL 0x3c52 	///../ucode/dos_register.h:5931
+#define P_HEVC_VLD_MEM_VIFIFO_MEM_CTL 		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_MEM_CTL)
+#define HEVC_VLD_MEM_VBUF_RD_PTR 0x3c53 	///../ucode/dos_register.h:5932
+#define P_HEVC_VLD_MEM_VBUF_RD_PTR 		DOS_REG_ADDR(HEVC_VLD_MEM_VBUF_RD_PTR)
+#define HEVC_VLD_MEM_VBUF2_RD_PTR 0x3c54 	///../ucode/dos_register.h:5933
+#define P_HEVC_VLD_MEM_VBUF2_RD_PTR 		DOS_REG_ADDR(HEVC_VLD_MEM_VBUF2_RD_PTR)
+#define HEVC_VLD_MEM_SWAP_ADDR 0x3c55 	///../ucode/dos_register.h:5934
+#define P_HEVC_VLD_MEM_SWAP_ADDR 		DOS_REG_ADDR(HEVC_VLD_MEM_SWAP_ADDR)
+#define HEVC_VLD_MEM_SWAP_CTL 0x3c56 	///../ucode/dos_register.h:5941
+#define P_HEVC_VLD_MEM_SWAP_CTL 		DOS_REG_ADDR(HEVC_VLD_MEM_SWAP_CTL)
+#define HCODEC_VCOP_CTRL_REG 0x1e00 	///../ucode/dos_register.h:5954
+#define P_HCODEC_VCOP_CTRL_REG 		DOS_REG_ADDR(HCODEC_VCOP_CTRL_REG)
+#define HCODEC_QP_CTRL_REG 0x1e01 	///../ucode/dos_register.h:5955
+#define P_HCODEC_QP_CTRL_REG 		DOS_REG_ADDR(HCODEC_QP_CTRL_REG)
+#define HCODEC_INTRA_QUANT_MATRIX 0x1e02 	///../ucode/dos_register.h:5956
+#define P_HCODEC_INTRA_QUANT_MATRIX 		DOS_REG_ADDR(HCODEC_INTRA_QUANT_MATRIX)
+#define HCODEC_NON_I_QUANT_MATRIX 0x1e03 	///../ucode/dos_register.h:5957
+#define P_HCODEC_NON_I_QUANT_MATRIX 		DOS_REG_ADDR(HCODEC_NON_I_QUANT_MATRIX)
+#define HCODEC_DC_SCALER 0x1e04 	///../ucode/dos_register.h:5958
+#define P_HCODEC_DC_SCALER 		DOS_REG_ADDR(HCODEC_DC_SCALER)
+#define HCODEC_DC_AC_CTRL 0x1e05 	///../ucode/dos_register.h:5959
+#define P_HCODEC_DC_AC_CTRL 		DOS_REG_ADDR(HCODEC_DC_AC_CTRL)
+#define HCODEC_DC_AC_SCALE_MUL 0x1e06 	///../ucode/dos_register.h:5961
+#define P_HCODEC_DC_AC_SCALE_MUL 		DOS_REG_ADDR(HCODEC_DC_AC_SCALE_MUL)
+#define HCODEC_DC_AC_SCALE_DIV 0x1e07 	///../ucode/dos_register.h:5962
+#define P_HCODEC_DC_AC_SCALE_DIV 		DOS_REG_ADDR(HCODEC_DC_AC_SCALE_DIV)
+#define HCODEC_POWER_CTL_IQIDCT 0x1e08 	///../ucode/dos_register.h:5965
+#define P_HCODEC_POWER_CTL_IQIDCT 		DOS_REG_ADDR(HCODEC_POWER_CTL_IQIDCT)
+#define HCODEC_RV_AI_Y_X 0x1e09 	///../ucode/dos_register.h:5966
+#define P_HCODEC_RV_AI_Y_X 		DOS_REG_ADDR(HCODEC_RV_AI_Y_X)
+#define HCODEC_RV_AI_U_X 0x1e0a 	///../ucode/dos_register.h:5967
+#define P_HCODEC_RV_AI_U_X 		DOS_REG_ADDR(HCODEC_RV_AI_U_X)
+#define HCODEC_RV_AI_V_X 0x1e0b 	///../ucode/dos_register.h:5968
+#define P_HCODEC_RV_AI_V_X 		DOS_REG_ADDR(HCODEC_RV_AI_V_X)
+#define HCODEC_RV_AI_MB_COUNT 0x1e0c 	///../ucode/dos_register.h:5971
+#define P_HCODEC_RV_AI_MB_COUNT 		DOS_REG_ADDR(HCODEC_RV_AI_MB_COUNT)
+#define HCODEC_NEXT_INTRA_DMA_ADDRESS 0x1e0d 	///../ucode/dos_register.h:5973
+#define P_HCODEC_NEXT_INTRA_DMA_ADDRESS 		DOS_REG_ADDR(HCODEC_NEXT_INTRA_DMA_ADDRESS)
+#define HCODEC_IQIDCT_CONTROL 0x1e0e 	///../ucode/dos_register.h:5975
+#define P_HCODEC_IQIDCT_CONTROL 		DOS_REG_ADDR(HCODEC_IQIDCT_CONTROL)
+#define HCODEC_IQIDCT_DEBUG_INFO_0 0x1e0f 	///../ucode/dos_register.h:5992
+#define P_HCODEC_IQIDCT_DEBUG_INFO_0 		DOS_REG_ADDR(HCODEC_IQIDCT_DEBUG_INFO_0)
+#define HCODEC_DEBLK_CMD 0x1e10 	///../ucode/dos_register.h:5994
+#define P_HCODEC_DEBLK_CMD 		DOS_REG_ADDR(HCODEC_DEBLK_CMD)
+#define HCODEC_IQIDCT_DEBUG_IDCT 0x1e11 	///../ucode/dos_register.h:6027
+#define P_HCODEC_IQIDCT_DEBUG_IDCT 		DOS_REG_ADDR(HCODEC_IQIDCT_DEBUG_IDCT)
+#define HCODEC_DCAC_DMA_CTRL 0x1e12 	///../ucode/dos_register.h:6037
+#define P_HCODEC_DCAC_DMA_CTRL 		DOS_REG_ADDR(HCODEC_DCAC_DMA_CTRL)
+#define HCODEC_DCAC_DMA_ADDRESS 0x1e13 	///../ucode/dos_register.h:6044
+#define P_HCODEC_DCAC_DMA_ADDRESS 		DOS_REG_ADDR(HCODEC_DCAC_DMA_ADDRESS)
+#define HCODEC_DCAC_CPU_ADDRESS 0x1e14 	///../ucode/dos_register.h:6046
+#define P_HCODEC_DCAC_CPU_ADDRESS 		DOS_REG_ADDR(HCODEC_DCAC_CPU_ADDRESS)
+#define HCODEC_DCAC_CPU_DATA 0x1e15 	///../ucode/dos_register.h:6048
+#define P_HCODEC_DCAC_CPU_DATA 		DOS_REG_ADDR(HCODEC_DCAC_CPU_DATA)
+#define HCODEC_DCAC_MB_COUNT 0x1e16 	///../ucode/dos_register.h:6052
+#define P_HCODEC_DCAC_MB_COUNT 		DOS_REG_ADDR(HCODEC_DCAC_MB_COUNT)
+#define HCODEC_IQ_QUANT 0x1e17 	///../ucode/dos_register.h:6065
+#define P_HCODEC_IQ_QUANT 		DOS_REG_ADDR(HCODEC_IQ_QUANT)
+#define HCODEC_VC1_BITPLANE_CTL 0x1e18 	///../ucode/dos_register.h:6073
+#define P_HCODEC_VC1_BITPLANE_CTL 		DOS_REG_ADDR(HCODEC_VC1_BITPLANE_CTL)
+#define VDEC2_VCOP_CTRL_REG 0x2e00 	///../ucode/dos_register.h:6098
+#define P_VDEC2_VCOP_CTRL_REG 		DOS_REG_ADDR(VDEC2_VCOP_CTRL_REG)
+#define VDEC2_QP_CTRL_REG 0x2e01 	///../ucode/dos_register.h:6099
+#define P_VDEC2_QP_CTRL_REG 		DOS_REG_ADDR(VDEC2_QP_CTRL_REG)
+#define VDEC2_INTRA_QUANT_MATRIX 0x2e02 	///../ucode/dos_register.h:6100
+#define P_VDEC2_INTRA_QUANT_MATRIX 		DOS_REG_ADDR(VDEC2_INTRA_QUANT_MATRIX)
+#define VDEC2_NON_I_QUANT_MATRIX 0x2e03 	///../ucode/dos_register.h:6101
+#define P_VDEC2_NON_I_QUANT_MATRIX 		DOS_REG_ADDR(VDEC2_NON_I_QUANT_MATRIX)
+#define VDEC2_DC_SCALER 0x2e04 	///../ucode/dos_register.h:6102
+#define P_VDEC2_DC_SCALER 		DOS_REG_ADDR(VDEC2_DC_SCALER)
+#define VDEC2_DC_AC_CTRL 0x2e05 	///../ucode/dos_register.h:6103
+#define P_VDEC2_DC_AC_CTRL 		DOS_REG_ADDR(VDEC2_DC_AC_CTRL)
+#define VDEC2_DC_AC_SCALE_MUL 0x2e06 	///../ucode/dos_register.h:6105
+#define P_VDEC2_DC_AC_SCALE_MUL 		DOS_REG_ADDR(VDEC2_DC_AC_SCALE_MUL)
+#define VDEC2_DC_AC_SCALE_DIV 0x2e07 	///../ucode/dos_register.h:6106
+#define P_VDEC2_DC_AC_SCALE_DIV 		DOS_REG_ADDR(VDEC2_DC_AC_SCALE_DIV)
+#define VDEC2_POWER_CTL_IQIDCT 0x2e08 	///../ucode/dos_register.h:6109
+#define P_VDEC2_POWER_CTL_IQIDCT 		DOS_REG_ADDR(VDEC2_POWER_CTL_IQIDCT)
+#define VDEC2_RV_AI_Y_X 0x2e09 	///../ucode/dos_register.h:6110
+#define P_VDEC2_RV_AI_Y_X 		DOS_REG_ADDR(VDEC2_RV_AI_Y_X)
+#define VDEC2_RV_AI_U_X 0x2e0a 	///../ucode/dos_register.h:6111
+#define P_VDEC2_RV_AI_U_X 		DOS_REG_ADDR(VDEC2_RV_AI_U_X)
+#define VDEC2_RV_AI_V_X 0x2e0b 	///../ucode/dos_register.h:6112
+#define P_VDEC2_RV_AI_V_X 		DOS_REG_ADDR(VDEC2_RV_AI_V_X)
+#define VDEC2_RV_AI_MB_COUNT 0x2e0c 	///../ucode/dos_register.h:6115
+#define P_VDEC2_RV_AI_MB_COUNT 		DOS_REG_ADDR(VDEC2_RV_AI_MB_COUNT)
+#define VDEC2_NEXT_INTRA_DMA_ADDRESS 0x2e0d 	///../ucode/dos_register.h:6117
+#define P_VDEC2_NEXT_INTRA_DMA_ADDRESS 		DOS_REG_ADDR(VDEC2_NEXT_INTRA_DMA_ADDRESS)
+#define VDEC2_IQIDCT_CONTROL 0x2e0e 	///../ucode/dos_register.h:6119
+#define P_VDEC2_IQIDCT_CONTROL 		DOS_REG_ADDR(VDEC2_IQIDCT_CONTROL)
+#define VDEC2_IQIDCT_DEBUG_INFO_0 0x2e0f 	///../ucode/dos_register.h:6136
+#define P_VDEC2_IQIDCT_DEBUG_INFO_0 		DOS_REG_ADDR(VDEC2_IQIDCT_DEBUG_INFO_0)
+#define VDEC2_DEBLK_CMD 0x2e10 	///../ucode/dos_register.h:6138
+#define P_VDEC2_DEBLK_CMD 		DOS_REG_ADDR(VDEC2_DEBLK_CMD)
+#define VDEC2_IQIDCT_DEBUG_IDCT 0x2e11 	///../ucode/dos_register.h:6171
+#define P_VDEC2_IQIDCT_DEBUG_IDCT 		DOS_REG_ADDR(VDEC2_IQIDCT_DEBUG_IDCT)
+#define VDEC2_DCAC_DMA_CTRL 0x2e12 	///../ucode/dos_register.h:6181
+#define P_VDEC2_DCAC_DMA_CTRL 		DOS_REG_ADDR(VDEC2_DCAC_DMA_CTRL)
+#define VDEC2_DCAC_DMA_ADDRESS 0x2e13 	///../ucode/dos_register.h:6188
+#define P_VDEC2_DCAC_DMA_ADDRESS 		DOS_REG_ADDR(VDEC2_DCAC_DMA_ADDRESS)
+#define VDEC2_DCAC_CPU_ADDRESS 0x2e14 	///../ucode/dos_register.h:6190
+#define P_VDEC2_DCAC_CPU_ADDRESS 		DOS_REG_ADDR(VDEC2_DCAC_CPU_ADDRESS)
+#define VDEC2_DCAC_CPU_DATA 0x2e15 	///../ucode/dos_register.h:6192
+#define P_VDEC2_DCAC_CPU_DATA 		DOS_REG_ADDR(VDEC2_DCAC_CPU_DATA)
+#define VDEC2_DCAC_MB_COUNT 0x2e16 	///../ucode/dos_register.h:6196
+#define P_VDEC2_DCAC_MB_COUNT 		DOS_REG_ADDR(VDEC2_DCAC_MB_COUNT)
+#define VDEC2_IQ_QUANT 0x2e17 	///../ucode/dos_register.h:6209
+#define P_VDEC2_IQ_QUANT 		DOS_REG_ADDR(VDEC2_IQ_QUANT)
+#define VDEC2_VC1_BITPLANE_CTL 0x2e18 	///../ucode/dos_register.h:6217
+#define P_VDEC2_VC1_BITPLANE_CTL 		DOS_REG_ADDR(VDEC2_VC1_BITPLANE_CTL)
+#define HEVC_VCOP_CTRL_REG 0x3e00 	///../ucode/dos_register.h:6242
+#define P_HEVC_VCOP_CTRL_REG 		DOS_REG_ADDR(HEVC_VCOP_CTRL_REG)
+#define HEVC_QP_CTRL_REG 0x3e01 	///../ucode/dos_register.h:6243
+#define P_HEVC_QP_CTRL_REG 		DOS_REG_ADDR(HEVC_QP_CTRL_REG)
+#define HEVC_INTRA_QUANT_MATRIX 0x3e02 	///../ucode/dos_register.h:6244
+#define P_HEVC_INTRA_QUANT_MATRIX 		DOS_REG_ADDR(HEVC_INTRA_QUANT_MATRIX)
+#define HEVC_NON_I_QUANT_MATRIX 0x3e03 	///../ucode/dos_register.h:6245
+#define P_HEVC_NON_I_QUANT_MATRIX 		DOS_REG_ADDR(HEVC_NON_I_QUANT_MATRIX)
+#define HEVC_DC_SCALER 0x3e04 	///../ucode/dos_register.h:6246
+#define P_HEVC_DC_SCALER 		DOS_REG_ADDR(HEVC_DC_SCALER)
+#define HEVC_DC_AC_CTRL 0x3e05 	///../ucode/dos_register.h:6247
+#define P_HEVC_DC_AC_CTRL 		DOS_REG_ADDR(HEVC_DC_AC_CTRL)
+#define HEVC_DC_AC_SCALE_MUL 0x3e06 	///../ucode/dos_register.h:6249
+#define P_HEVC_DC_AC_SCALE_MUL 		DOS_REG_ADDR(HEVC_DC_AC_SCALE_MUL)
+#define HEVC_DC_AC_SCALE_DIV 0x3e07 	///../ucode/dos_register.h:6250
+#define P_HEVC_DC_AC_SCALE_DIV 		DOS_REG_ADDR(HEVC_DC_AC_SCALE_DIV)
+#define HEVC_POWER_CTL_IQIDCT 0x3e08 	///../ucode/dos_register.h:6253
+#define P_HEVC_POWER_CTL_IQIDCT 		DOS_REG_ADDR(HEVC_POWER_CTL_IQIDCT)
+#define HEVC_RV_AI_Y_X 0x3e09 	///../ucode/dos_register.h:6254
+#define P_HEVC_RV_AI_Y_X 		DOS_REG_ADDR(HEVC_RV_AI_Y_X)
+#define HEVC_RV_AI_U_X 0x3e0a 	///../ucode/dos_register.h:6255
+#define P_HEVC_RV_AI_U_X 		DOS_REG_ADDR(HEVC_RV_AI_U_X)
+#define HEVC_RV_AI_V_X 0x3e0b 	///../ucode/dos_register.h:6256
+#define P_HEVC_RV_AI_V_X 		DOS_REG_ADDR(HEVC_RV_AI_V_X)
+#define HEVC_RV_AI_MB_COUNT 0x3e0c 	///../ucode/dos_register.h:6259
+#define P_HEVC_RV_AI_MB_COUNT 		DOS_REG_ADDR(HEVC_RV_AI_MB_COUNT)
+#define HEVC_NEXT_INTRA_DMA_ADDRESS 0x3e0d 	///../ucode/dos_register.h:6261
+#define P_HEVC_NEXT_INTRA_DMA_ADDRESS 		DOS_REG_ADDR(HEVC_NEXT_INTRA_DMA_ADDRESS)
+#define HEVC_IQIDCT_CONTROL 0x3e0e 	///../ucode/dos_register.h:6263
+#define P_HEVC_IQIDCT_CONTROL 		DOS_REG_ADDR(HEVC_IQIDCT_CONTROL)
+#define HEVC_IQIDCT_DEBUG_INFO_0 0x3e0f 	///../ucode/dos_register.h:6280
+#define P_HEVC_IQIDCT_DEBUG_INFO_0 		DOS_REG_ADDR(HEVC_IQIDCT_DEBUG_INFO_0)
+#define HEVC_DEBLK_CMD 0x3e10 	///../ucode/dos_register.h:6282
+#define P_HEVC_DEBLK_CMD 		DOS_REG_ADDR(HEVC_DEBLK_CMD)
+#define HEVC_IQIDCT_DEBUG_IDCT 0x3e11 	///../ucode/dos_register.h:6315
+#define P_HEVC_IQIDCT_DEBUG_IDCT 		DOS_REG_ADDR(HEVC_IQIDCT_DEBUG_IDCT)
+#define HEVC_DCAC_DMA_CTRL 0x3e12 	///../ucode/dos_register.h:6325
+#define P_HEVC_DCAC_DMA_CTRL 		DOS_REG_ADDR(HEVC_DCAC_DMA_CTRL)
+#define HEVC_DCAC_DMA_ADDRESS 0x3e13 	///../ucode/dos_register.h:6332
+#define P_HEVC_DCAC_DMA_ADDRESS 		DOS_REG_ADDR(HEVC_DCAC_DMA_ADDRESS)
+#define HEVC_DCAC_CPU_ADDRESS 0x3e14 	///../ucode/dos_register.h:6334
+#define P_HEVC_DCAC_CPU_ADDRESS 		DOS_REG_ADDR(HEVC_DCAC_CPU_ADDRESS)
+#define HEVC_DCAC_CPU_DATA 0x3e15 	///../ucode/dos_register.h:6336
+#define P_HEVC_DCAC_CPU_DATA 		DOS_REG_ADDR(HEVC_DCAC_CPU_DATA)
+#define HEVC_DCAC_MB_COUNT 0x3e16 	///../ucode/dos_register.h:6340
+#define P_HEVC_DCAC_MB_COUNT 		DOS_REG_ADDR(HEVC_DCAC_MB_COUNT)
+#define HEVC_IQ_QUANT 0x3e17 	///../ucode/dos_register.h:6353
+#define P_HEVC_IQ_QUANT 		DOS_REG_ADDR(HEVC_IQ_QUANT)
+#define HEVC_VC1_BITPLANE_CTL 0x3e18 	///../ucode/dos_register.h:6361
+#define P_HEVC_VC1_BITPLANE_CTL 		DOS_REG_ADDR(HEVC_VC1_BITPLANE_CTL)
+#define HCODEC_MSP 0x1300 	///../ucode/dos_register.h:6386
+#define P_HCODEC_MSP 		DOS_REG_ADDR(HCODEC_MSP)
+#define HCODEC_MPSR 0x1301 	///../ucode/dos_register.h:6387
+#define P_HCODEC_MPSR 		DOS_REG_ADDR(HCODEC_MPSR)
+#define HCODEC_MINT_VEC_BASE 0x1302 	///../ucode/dos_register.h:6388
+#define P_HCODEC_MINT_VEC_BASE 		DOS_REG_ADDR(HCODEC_MINT_VEC_BASE)
+#define HCODEC_MCPU_INTR_GRP 0x1303 	///../ucode/dos_register.h:6389
+#define P_HCODEC_MCPU_INTR_GRP 		DOS_REG_ADDR(HCODEC_MCPU_INTR_GRP)
+#define HCODEC_MCPU_INTR_MSK 0x1304 	///../ucode/dos_register.h:6390
+#define P_HCODEC_MCPU_INTR_MSK 		DOS_REG_ADDR(HCODEC_MCPU_INTR_MSK)
+#define HCODEC_MCPU_INTR_REQ 0x1305 	///../ucode/dos_register.h:6391
+#define P_HCODEC_MCPU_INTR_REQ 		DOS_REG_ADDR(HCODEC_MCPU_INTR_REQ)
+#define HCODEC_MPC_P 0x1306 	///../ucode/dos_register.h:6392
+#define P_HCODEC_MPC_P 		DOS_REG_ADDR(HCODEC_MPC_P)
+#define HCODEC_MPC_D 0x1307 	///../ucode/dos_register.h:6393
+#define P_HCODEC_MPC_D 		DOS_REG_ADDR(HCODEC_MPC_D)
+#define HCODEC_MPC_E 0x1308 	///../ucode/dos_register.h:6394
+#define P_HCODEC_MPC_E 		DOS_REG_ADDR(HCODEC_MPC_E)
+#define HCODEC_MPC_W 0x1309 	///../ucode/dos_register.h:6395
+#define P_HCODEC_MPC_W 		DOS_REG_ADDR(HCODEC_MPC_W)
+#define HCODEC_MINDEX0_REG 0x130a 	///../ucode/dos_register.h:6396
+#define P_HCODEC_MINDEX0_REG 		DOS_REG_ADDR(HCODEC_MINDEX0_REG)
+#define HCODEC_MINDEX1_REG 0x130b 	///../ucode/dos_register.h:6397
+#define P_HCODEC_MINDEX1_REG 		DOS_REG_ADDR(HCODEC_MINDEX1_REG)
+#define HCODEC_MINDEX2_REG 0x130c 	///../ucode/dos_register.h:6398
+#define P_HCODEC_MINDEX2_REG 		DOS_REG_ADDR(HCODEC_MINDEX2_REG)
+#define HCODEC_MINDEX3_REG 0x130d 	///../ucode/dos_register.h:6399
+#define P_HCODEC_MINDEX3_REG 		DOS_REG_ADDR(HCODEC_MINDEX3_REG)
+#define HCODEC_MINDEX4_REG 0x130e 	///../ucode/dos_register.h:6400
+#define P_HCODEC_MINDEX4_REG 		DOS_REG_ADDR(HCODEC_MINDEX4_REG)
+#define HCODEC_MINDEX5_REG 0x130f 	///../ucode/dos_register.h:6401
+#define P_HCODEC_MINDEX5_REG 		DOS_REG_ADDR(HCODEC_MINDEX5_REG)
+#define HCODEC_MINDEX6_REG 0x1310 	///../ucode/dos_register.h:6402
+#define P_HCODEC_MINDEX6_REG 		DOS_REG_ADDR(HCODEC_MINDEX6_REG)
+#define HCODEC_MINDEX7_REG 0x1311 	///../ucode/dos_register.h:6403
+#define P_HCODEC_MINDEX7_REG 		DOS_REG_ADDR(HCODEC_MINDEX7_REG)
+#define HCODEC_MMIN_REG 0x1312 	///../ucode/dos_register.h:6404
+#define P_HCODEC_MMIN_REG 		DOS_REG_ADDR(HCODEC_MMIN_REG)
+#define HCODEC_MMAX_REG 0x1313 	///../ucode/dos_register.h:6405
+#define P_HCODEC_MMAX_REG 		DOS_REG_ADDR(HCODEC_MMAX_REG)
+#define HCODEC_MBREAK0_REG 0x1314 	///../ucode/dos_register.h:6406
+#define P_HCODEC_MBREAK0_REG 		DOS_REG_ADDR(HCODEC_MBREAK0_REG)
+#define HCODEC_MBREAK1_REG 0x1315 	///../ucode/dos_register.h:6407
+#define P_HCODEC_MBREAK1_REG 		DOS_REG_ADDR(HCODEC_MBREAK1_REG)
+#define HCODEC_MBREAK2_REG 0x1316 	///../ucode/dos_register.h:6408
+#define P_HCODEC_MBREAK2_REG 		DOS_REG_ADDR(HCODEC_MBREAK2_REG)
+#define HCODEC_MBREAK3_REG 0x1317 	///../ucode/dos_register.h:6409
+#define P_HCODEC_MBREAK3_REG 		DOS_REG_ADDR(HCODEC_MBREAK3_REG)
+#define HCODEC_MBREAK_TYPE 0x1318 	///../ucode/dos_register.h:6410
+#define P_HCODEC_MBREAK_TYPE 		DOS_REG_ADDR(HCODEC_MBREAK_TYPE)
+#define HCODEC_MBREAK_CTRL 0x1319 	///../ucode/dos_register.h:6411
+#define P_HCODEC_MBREAK_CTRL 		DOS_REG_ADDR(HCODEC_MBREAK_CTRL)
+#define HCODEC_MBREAK_STAUTS 0x131a 	///../ucode/dos_register.h:6412
+#define P_HCODEC_MBREAK_STAUTS 		DOS_REG_ADDR(HCODEC_MBREAK_STAUTS)
+#define HCODEC_MDB_ADDR_REG 0x131b 	///../ucode/dos_register.h:6413
+#define P_HCODEC_MDB_ADDR_REG 		DOS_REG_ADDR(HCODEC_MDB_ADDR_REG)
+#define HCODEC_MDB_DATA_REG 0x131c 	///../ucode/dos_register.h:6414
+#define P_HCODEC_MDB_DATA_REG 		DOS_REG_ADDR(HCODEC_MDB_DATA_REG)
+#define HCODEC_MDB_CTRL 0x131d 	///../ucode/dos_register.h:6415
+#define P_HCODEC_MDB_CTRL 		DOS_REG_ADDR(HCODEC_MDB_CTRL)
+#define HCODEC_MSFTINT0 0x131e 	///../ucode/dos_register.h:6416
+#define P_HCODEC_MSFTINT0 		DOS_REG_ADDR(HCODEC_MSFTINT0)
+#define HCODEC_MSFTINT1 0x131f 	///../ucode/dos_register.h:6417
+#define P_HCODEC_MSFTINT1 		DOS_REG_ADDR(HCODEC_MSFTINT1)
+#define HCODEC_CSP 0x1320 	///../ucode/dos_register.h:6418
+#define P_HCODEC_CSP 		DOS_REG_ADDR(HCODEC_CSP)
+#define HCODEC_CPSR 0x1321 	///../ucode/dos_register.h:6419
+#define P_HCODEC_CPSR 		DOS_REG_ADDR(HCODEC_CPSR)
+#define HCODEC_CINT_VEC_BASE 0x1322 	///../ucode/dos_register.h:6420
+#define P_HCODEC_CINT_VEC_BASE 		DOS_REG_ADDR(HCODEC_CINT_VEC_BASE)
+#define HCODEC_CCPU_INTR_GRP 0x1323 	///../ucode/dos_register.h:6421
+#define P_HCODEC_CCPU_INTR_GRP 		DOS_REG_ADDR(HCODEC_CCPU_INTR_GRP)
+#define HCODEC_CCPU_INTR_MSK 0x1324 	///../ucode/dos_register.h:6422
+#define P_HCODEC_CCPU_INTR_MSK 		DOS_REG_ADDR(HCODEC_CCPU_INTR_MSK)
+#define HCODEC_CCPU_INTR_REQ 0x1325 	///../ucode/dos_register.h:6423
+#define P_HCODEC_CCPU_INTR_REQ 		DOS_REG_ADDR(HCODEC_CCPU_INTR_REQ)
+#define HCODEC_CPC_P 0x1326 	///../ucode/dos_register.h:6424
+#define P_HCODEC_CPC_P 		DOS_REG_ADDR(HCODEC_CPC_P)
+#define HCODEC_CPC_D 0x1327 	///../ucode/dos_register.h:6425
+#define P_HCODEC_CPC_D 		DOS_REG_ADDR(HCODEC_CPC_D)
+#define HCODEC_CPC_E 0x1328 	///../ucode/dos_register.h:6426
+#define P_HCODEC_CPC_E 		DOS_REG_ADDR(HCODEC_CPC_E)
+#define HCODEC_CPC_W 0x1329 	///../ucode/dos_register.h:6427
+#define P_HCODEC_CPC_W 		DOS_REG_ADDR(HCODEC_CPC_W)
+#define HCODEC_CINDEX0_REG 0x132a 	///../ucode/dos_register.h:6428
+#define P_HCODEC_CINDEX0_REG 		DOS_REG_ADDR(HCODEC_CINDEX0_REG)
+#define HCODEC_CINDEX1_REG 0x132b 	///../ucode/dos_register.h:6429
+#define P_HCODEC_CINDEX1_REG 		DOS_REG_ADDR(HCODEC_CINDEX1_REG)
+#define HCODEC_CINDEX2_REG 0x132c 	///../ucode/dos_register.h:6430
+#define P_HCODEC_CINDEX2_REG 		DOS_REG_ADDR(HCODEC_CINDEX2_REG)
+#define HCODEC_CINDEX3_REG 0x132d 	///../ucode/dos_register.h:6431
+#define P_HCODEC_CINDEX3_REG 		DOS_REG_ADDR(HCODEC_CINDEX3_REG)
+#define HCODEC_CINDEX4_REG 0x132e 	///../ucode/dos_register.h:6432
+#define P_HCODEC_CINDEX4_REG 		DOS_REG_ADDR(HCODEC_CINDEX4_REG)
+#define HCODEC_CINDEX5_REG 0x132f 	///../ucode/dos_register.h:6433
+#define P_HCODEC_CINDEX5_REG 		DOS_REG_ADDR(HCODEC_CINDEX5_REG)
+#define HCODEC_CINDEX6_REG 0x1330 	///../ucode/dos_register.h:6434
+#define P_HCODEC_CINDEX6_REG 		DOS_REG_ADDR(HCODEC_CINDEX6_REG)
+#define HCODEC_CINDEX7_REG 0x1331 	///../ucode/dos_register.h:6435
+#define P_HCODEC_CINDEX7_REG 		DOS_REG_ADDR(HCODEC_CINDEX7_REG)
+#define HCODEC_CMIN_REG 0x1332 	///../ucode/dos_register.h:6436
+#define P_HCODEC_CMIN_REG 		DOS_REG_ADDR(HCODEC_CMIN_REG)
+#define HCODEC_CMAX_REG 0x1333 	///../ucode/dos_register.h:6437
+#define P_HCODEC_CMAX_REG 		DOS_REG_ADDR(HCODEC_CMAX_REG)
+#define HCODEC_CBREAK0_REG 0x1334 	///../ucode/dos_register.h:6438
+#define P_HCODEC_CBREAK0_REG 		DOS_REG_ADDR(HCODEC_CBREAK0_REG)
+#define HCODEC_CBREAK1_REG 0x1335 	///../ucode/dos_register.h:6439
+#define P_HCODEC_CBREAK1_REG 		DOS_REG_ADDR(HCODEC_CBREAK1_REG)
+#define HCODEC_CBREAK2_REG 0x1336 	///../ucode/dos_register.h:6440
+#define P_HCODEC_CBREAK2_REG 		DOS_REG_ADDR(HCODEC_CBREAK2_REG)
+#define HCODEC_CBREAK3_REG 0x1337 	///../ucode/dos_register.h:6441
+#define P_HCODEC_CBREAK3_REG 		DOS_REG_ADDR(HCODEC_CBREAK3_REG)
+#define HCODEC_CBREAK_TYPE 0x1338 	///../ucode/dos_register.h:6442
+#define P_HCODEC_CBREAK_TYPE 		DOS_REG_ADDR(HCODEC_CBREAK_TYPE)
+#define HCODEC_CBREAK_CTRL 0x1339 	///../ucode/dos_register.h:6443
+#define P_HCODEC_CBREAK_CTRL 		DOS_REG_ADDR(HCODEC_CBREAK_CTRL)
+#define HCODEC_CBREAK_STAUTS 0x133a 	///../ucode/dos_register.h:6444
+#define P_HCODEC_CBREAK_STAUTS 		DOS_REG_ADDR(HCODEC_CBREAK_STAUTS)
+#define HCODEC_CDB_ADDR_REG 0x133b 	///../ucode/dos_register.h:6445
+#define P_HCODEC_CDB_ADDR_REG 		DOS_REG_ADDR(HCODEC_CDB_ADDR_REG)
+#define HCODEC_CDB_DATA_REG 0x133c 	///../ucode/dos_register.h:6446
+#define P_HCODEC_CDB_DATA_REG 		DOS_REG_ADDR(HCODEC_CDB_DATA_REG)
+#define HCODEC_CDB_CTRL 0x133d 	///../ucode/dos_register.h:6447
+#define P_HCODEC_CDB_CTRL 		DOS_REG_ADDR(HCODEC_CDB_CTRL)
+#define HCODEC_CSFTINT0 0x133e 	///../ucode/dos_register.h:6448
+#define P_HCODEC_CSFTINT0 		DOS_REG_ADDR(HCODEC_CSFTINT0)
+#define HCODEC_CSFTINT1 0x133f 	///../ucode/dos_register.h:6449
+#define P_HCODEC_CSFTINT1 		DOS_REG_ADDR(HCODEC_CSFTINT1)
+#define HCODEC_IMEM_DMA_CTRL 0x1340 	///../ucode/dos_register.h:6450
+#define P_HCODEC_IMEM_DMA_CTRL 		DOS_REG_ADDR(HCODEC_IMEM_DMA_CTRL)
+#define HCODEC_IMEM_DMA_ADR 0x1341 	///../ucode/dos_register.h:6451
+#define P_HCODEC_IMEM_DMA_ADR 		DOS_REG_ADDR(HCODEC_IMEM_DMA_ADR)
+#define HCODEC_IMEM_DMA_COUNT 0x1342 	///../ucode/dos_register.h:6452
+#define P_HCODEC_IMEM_DMA_COUNT 		DOS_REG_ADDR(HCODEC_IMEM_DMA_COUNT)
+#define HCODEC_WRRSP_IMEM 0x1343 	///../ucode/dos_register.h:6456
+#define P_HCODEC_WRRSP_IMEM 		DOS_REG_ADDR(HCODEC_WRRSP_IMEM)
+#define HCODEC_LMEM_DMA_CTRL 0x1350 	///../ucode/dos_register.h:6457
+#define P_HCODEC_LMEM_DMA_CTRL 		DOS_REG_ADDR(HCODEC_LMEM_DMA_CTRL)
+#define HCODEC_LMEM_DMA_ADR 0x1351 	///../ucode/dos_register.h:6458
+#define P_HCODEC_LMEM_DMA_ADR 		DOS_REG_ADDR(HCODEC_LMEM_DMA_ADR)
+#define HCODEC_LMEM_DMA_COUNT 0x1352 	///../ucode/dos_register.h:6459
+#define P_HCODEC_LMEM_DMA_COUNT 		DOS_REG_ADDR(HCODEC_LMEM_DMA_COUNT)
+#define HCODEC_WRRSP_LMEM 0x1353 	///../ucode/dos_register.h:6463
+#define P_HCODEC_WRRSP_LMEM 		DOS_REG_ADDR(HCODEC_WRRSP_LMEM)
+#define HCODEC_MAC_CTRL1 0x1360 	///../ucode/dos_register.h:6464
+#define P_HCODEC_MAC_CTRL1 		DOS_REG_ADDR(HCODEC_MAC_CTRL1)
+#define HCODEC_ACC0REG1 0x1361 	///../ucode/dos_register.h:6465
+#define P_HCODEC_ACC0REG1 		DOS_REG_ADDR(HCODEC_ACC0REG1)
+#define HCODEC_ACC1REG1 0x1362 	///../ucode/dos_register.h:6466
+#define P_HCODEC_ACC1REG1 		DOS_REG_ADDR(HCODEC_ACC1REG1)
+#define HCODEC_MAC_CTRL2 0x1370 	///../ucode/dos_register.h:6467
+#define P_HCODEC_MAC_CTRL2 		DOS_REG_ADDR(HCODEC_MAC_CTRL2)
+#define HCODEC_ACC0REG2 0x1371 	///../ucode/dos_register.h:6468
+#define P_HCODEC_ACC0REG2 		DOS_REG_ADDR(HCODEC_ACC0REG2)
+#define HCODEC_ACC1REG2 0x1372 	///../ucode/dos_register.h:6469
+#define P_HCODEC_ACC1REG2 		DOS_REG_ADDR(HCODEC_ACC1REG2)
+#define HCODEC_CPU_TRACE 0x1380 	///../ucode/dos_register.h:6470
+#define P_HCODEC_CPU_TRACE 		DOS_REG_ADDR(HCODEC_CPU_TRACE)
+#define VDEC2_MSP 0x2300 	///../ucode/dos_register.h:6483
+#define P_VDEC2_MSP 		DOS_REG_ADDR(VDEC2_MSP)
+#define VDEC2_MPSR 0x2301 	///../ucode/dos_register.h:6484
+#define P_VDEC2_MPSR 		DOS_REG_ADDR(VDEC2_MPSR)
+#define VDEC2_MINT_VEC_BASE 0x2302 	///../ucode/dos_register.h:6485
+#define P_VDEC2_MINT_VEC_BASE 		DOS_REG_ADDR(VDEC2_MINT_VEC_BASE)
+#define VDEC2_MCPU_INTR_GRP 0x2303 	///../ucode/dos_register.h:6486
+#define P_VDEC2_MCPU_INTR_GRP 		DOS_REG_ADDR(VDEC2_MCPU_INTR_GRP)
+#define VDEC2_MCPU_INTR_MSK 0x2304 	///../ucode/dos_register.h:6487
+#define P_VDEC2_MCPU_INTR_MSK 		DOS_REG_ADDR(VDEC2_MCPU_INTR_MSK)
+#define VDEC2_MCPU_INTR_REQ 0x2305 	///../ucode/dos_register.h:6488
+#define P_VDEC2_MCPU_INTR_REQ 		DOS_REG_ADDR(VDEC2_MCPU_INTR_REQ)
+#define VDEC2_MPC_P 0x2306 	///../ucode/dos_register.h:6489
+#define P_VDEC2_MPC_P 		DOS_REG_ADDR(VDEC2_MPC_P)
+#define VDEC2_MPC_D 0x2307 	///../ucode/dos_register.h:6490
+#define P_VDEC2_MPC_D 		DOS_REG_ADDR(VDEC2_MPC_D)
+#define VDEC2_MPC_E 0x2308 	///../ucode/dos_register.h:6491
+#define P_VDEC2_MPC_E 		DOS_REG_ADDR(VDEC2_MPC_E)
+#define VDEC2_MPC_W 0x2309 	///../ucode/dos_register.h:6492
+#define P_VDEC2_MPC_W 		DOS_REG_ADDR(VDEC2_MPC_W)
+#define VDEC2_MINDEX0_REG 0x230a 	///../ucode/dos_register.h:6493
+#define P_VDEC2_MINDEX0_REG 		DOS_REG_ADDR(VDEC2_MINDEX0_REG)
+#define VDEC2_MINDEX1_REG 0x230b 	///../ucode/dos_register.h:6494
+#define P_VDEC2_MINDEX1_REG 		DOS_REG_ADDR(VDEC2_MINDEX1_REG)
+#define VDEC2_MINDEX2_REG 0x230c 	///../ucode/dos_register.h:6495
+#define P_VDEC2_MINDEX2_REG 		DOS_REG_ADDR(VDEC2_MINDEX2_REG)
+#define VDEC2_MINDEX3_REG 0x230d 	///../ucode/dos_register.h:6496
+#define P_VDEC2_MINDEX3_REG 		DOS_REG_ADDR(VDEC2_MINDEX3_REG)
+#define VDEC2_MINDEX4_REG 0x230e 	///../ucode/dos_register.h:6497
+#define P_VDEC2_MINDEX4_REG 		DOS_REG_ADDR(VDEC2_MINDEX4_REG)
+#define VDEC2_MINDEX5_REG 0x230f 	///../ucode/dos_register.h:6498
+#define P_VDEC2_MINDEX5_REG 		DOS_REG_ADDR(VDEC2_MINDEX5_REG)
+#define VDEC2_MINDEX6_REG 0x2310 	///../ucode/dos_register.h:6499
+#define P_VDEC2_MINDEX6_REG 		DOS_REG_ADDR(VDEC2_MINDEX6_REG)
+#define VDEC2_MINDEX7_REG 0x2311 	///../ucode/dos_register.h:6500
+#define P_VDEC2_MINDEX7_REG 		DOS_REG_ADDR(VDEC2_MINDEX7_REG)
+#define VDEC2_MMIN_REG 0x2312 	///../ucode/dos_register.h:6501
+#define P_VDEC2_MMIN_REG 		DOS_REG_ADDR(VDEC2_MMIN_REG)
+#define VDEC2_MMAX_REG 0x2313 	///../ucode/dos_register.h:6502
+#define P_VDEC2_MMAX_REG 		DOS_REG_ADDR(VDEC2_MMAX_REG)
+#define VDEC2_MBREAK0_REG 0x2314 	///../ucode/dos_register.h:6503
+#define P_VDEC2_MBREAK0_REG 		DOS_REG_ADDR(VDEC2_MBREAK0_REG)
+#define VDEC2_MBREAK1_REG 0x2315 	///../ucode/dos_register.h:6504
+#define P_VDEC2_MBREAK1_REG 		DOS_REG_ADDR(VDEC2_MBREAK1_REG)
+#define VDEC2_MBREAK2_REG 0x2316 	///../ucode/dos_register.h:6505
+#define P_VDEC2_MBREAK2_REG 		DOS_REG_ADDR(VDEC2_MBREAK2_REG)
+#define VDEC2_MBREAK3_REG 0x2317 	///../ucode/dos_register.h:6506
+#define P_VDEC2_MBREAK3_REG 		DOS_REG_ADDR(VDEC2_MBREAK3_REG)
+#define VDEC2_MBREAK_TYPE 0x2318 	///../ucode/dos_register.h:6507
+#define P_VDEC2_MBREAK_TYPE 		DOS_REG_ADDR(VDEC2_MBREAK_TYPE)
+#define VDEC2_MBREAK_CTRL 0x2319 	///../ucode/dos_register.h:6508
+#define P_VDEC2_MBREAK_CTRL 		DOS_REG_ADDR(VDEC2_MBREAK_CTRL)
+#define VDEC2_MBREAK_STAUTS 0x231a 	///../ucode/dos_register.h:6509
+#define P_VDEC2_MBREAK_STAUTS 		DOS_REG_ADDR(VDEC2_MBREAK_STAUTS)
+#define VDEC2_MDB_ADDR_REG 0x231b 	///../ucode/dos_register.h:6510
+#define P_VDEC2_MDB_ADDR_REG 		DOS_REG_ADDR(VDEC2_MDB_ADDR_REG)
+#define VDEC2_MDB_DATA_REG 0x231c 	///../ucode/dos_register.h:6511
+#define P_VDEC2_MDB_DATA_REG 		DOS_REG_ADDR(VDEC2_MDB_DATA_REG)
+#define VDEC2_MDB_CTRL 0x231d 	///../ucode/dos_register.h:6512
+#define P_VDEC2_MDB_CTRL 		DOS_REG_ADDR(VDEC2_MDB_CTRL)
+#define VDEC2_MSFTINT0 0x231e 	///../ucode/dos_register.h:6513
+#define P_VDEC2_MSFTINT0 		DOS_REG_ADDR(VDEC2_MSFTINT0)
+#define VDEC2_MSFTINT1 0x231f 	///../ucode/dos_register.h:6514
+#define P_VDEC2_MSFTINT1 		DOS_REG_ADDR(VDEC2_MSFTINT1)
+#define VDEC2_CSP 0x2320 	///../ucode/dos_register.h:6515
+#define P_VDEC2_CSP 		DOS_REG_ADDR(VDEC2_CSP)
+#define VDEC2_CPSR 0x2321 	///../ucode/dos_register.h:6516
+#define P_VDEC2_CPSR 		DOS_REG_ADDR(VDEC2_CPSR)
+#define VDEC2_CINT_VEC_BASE 0x2322 	///../ucode/dos_register.h:6517
+#define P_VDEC2_CINT_VEC_BASE 		DOS_REG_ADDR(VDEC2_CINT_VEC_BASE)
+#define VDEC2_CCPU_INTR_GRP 0x2323 	///../ucode/dos_register.h:6518
+#define P_VDEC2_CCPU_INTR_GRP 		DOS_REG_ADDR(VDEC2_CCPU_INTR_GRP)
+#define VDEC2_CCPU_INTR_MSK 0x2324 	///../ucode/dos_register.h:6519
+#define P_VDEC2_CCPU_INTR_MSK 		DOS_REG_ADDR(VDEC2_CCPU_INTR_MSK)
+#define VDEC2_CCPU_INTR_REQ 0x2325 	///../ucode/dos_register.h:6520
+#define P_VDEC2_CCPU_INTR_REQ 		DOS_REG_ADDR(VDEC2_CCPU_INTR_REQ)
+#define VDEC2_CPC_P 0x2326 	///../ucode/dos_register.h:6521
+#define P_VDEC2_CPC_P 		DOS_REG_ADDR(VDEC2_CPC_P)
+#define VDEC2_CPC_D 0x2327 	///../ucode/dos_register.h:6522
+#define P_VDEC2_CPC_D 		DOS_REG_ADDR(VDEC2_CPC_D)
+#define VDEC2_CPC_E 0x2328 	///../ucode/dos_register.h:6523
+#define P_VDEC2_CPC_E 		DOS_REG_ADDR(VDEC2_CPC_E)
+#define VDEC2_CPC_W 0x2329 	///../ucode/dos_register.h:6524
+#define P_VDEC2_CPC_W 		DOS_REG_ADDR(VDEC2_CPC_W)
+#define VDEC2_CINDEX0_REG 0x232a 	///../ucode/dos_register.h:6525
+#define P_VDEC2_CINDEX0_REG 		DOS_REG_ADDR(VDEC2_CINDEX0_REG)
+#define VDEC2_CINDEX1_REG 0x232b 	///../ucode/dos_register.h:6526
+#define P_VDEC2_CINDEX1_REG 		DOS_REG_ADDR(VDEC2_CINDEX1_REG)
+#define VDEC2_CINDEX2_REG 0x232c 	///../ucode/dos_register.h:6527
+#define P_VDEC2_CINDEX2_REG 		DOS_REG_ADDR(VDEC2_CINDEX2_REG)
+#define VDEC2_CINDEX3_REG 0x232d 	///../ucode/dos_register.h:6528
+#define P_VDEC2_CINDEX3_REG 		DOS_REG_ADDR(VDEC2_CINDEX3_REG)
+#define VDEC2_CINDEX4_REG 0x232e 	///../ucode/dos_register.h:6529
+#define P_VDEC2_CINDEX4_REG 		DOS_REG_ADDR(VDEC2_CINDEX4_REG)
+#define VDEC2_CINDEX5_REG 0x232f 	///../ucode/dos_register.h:6530
+#define P_VDEC2_CINDEX5_REG 		DOS_REG_ADDR(VDEC2_CINDEX5_REG)
+#define VDEC2_CINDEX6_REG 0x2330 	///../ucode/dos_register.h:6531
+#define P_VDEC2_CINDEX6_REG 		DOS_REG_ADDR(VDEC2_CINDEX6_REG)
+#define VDEC2_CINDEX7_REG 0x2331 	///../ucode/dos_register.h:6532
+#define P_VDEC2_CINDEX7_REG 		DOS_REG_ADDR(VDEC2_CINDEX7_REG)
+#define VDEC2_CMIN_REG 0x2332 	///../ucode/dos_register.h:6533
+#define P_VDEC2_CMIN_REG 		DOS_REG_ADDR(VDEC2_CMIN_REG)
+#define VDEC2_CMAX_REG 0x2333 	///../ucode/dos_register.h:6534
+#define P_VDEC2_CMAX_REG 		DOS_REG_ADDR(VDEC2_CMAX_REG)
+#define VDEC2_CBREAK0_REG 0x2334 	///../ucode/dos_register.h:6535
+#define P_VDEC2_CBREAK0_REG 		DOS_REG_ADDR(VDEC2_CBREAK0_REG)
+#define VDEC2_CBREAK1_REG 0x2335 	///../ucode/dos_register.h:6536
+#define P_VDEC2_CBREAK1_REG 		DOS_REG_ADDR(VDEC2_CBREAK1_REG)
+#define VDEC2_CBREAK2_REG 0x2336 	///../ucode/dos_register.h:6537
+#define P_VDEC2_CBREAK2_REG 		DOS_REG_ADDR(VDEC2_CBREAK2_REG)
+#define VDEC2_CBREAK3_REG 0x2337 	///../ucode/dos_register.h:6538
+#define P_VDEC2_CBREAK3_REG 		DOS_REG_ADDR(VDEC2_CBREAK3_REG)
+#define VDEC2_CBREAK_TYPE 0x2338 	///../ucode/dos_register.h:6539
+#define P_VDEC2_CBREAK_TYPE 		DOS_REG_ADDR(VDEC2_CBREAK_TYPE)
+#define VDEC2_CBREAK_CTRL 0x2339 	///../ucode/dos_register.h:6540
+#define P_VDEC2_CBREAK_CTRL 		DOS_REG_ADDR(VDEC2_CBREAK_CTRL)
+#define VDEC2_CBREAK_STAUTS 0x233a 	///../ucode/dos_register.h:6541
+#define P_VDEC2_CBREAK_STAUTS 		DOS_REG_ADDR(VDEC2_CBREAK_STAUTS)
+#define VDEC2_CDB_ADDR_REG 0x233b 	///../ucode/dos_register.h:6542
+#define P_VDEC2_CDB_ADDR_REG 		DOS_REG_ADDR(VDEC2_CDB_ADDR_REG)
+#define VDEC2_CDB_DATA_REG 0x233c 	///../ucode/dos_register.h:6543
+#define P_VDEC2_CDB_DATA_REG 		DOS_REG_ADDR(VDEC2_CDB_DATA_REG)
+#define VDEC2_CDB_CTRL 0x233d 	///../ucode/dos_register.h:6544
+#define P_VDEC2_CDB_CTRL 		DOS_REG_ADDR(VDEC2_CDB_CTRL)
+#define VDEC2_CSFTINT0 0x233e 	///../ucode/dos_register.h:6545
+#define P_VDEC2_CSFTINT0 		DOS_REG_ADDR(VDEC2_CSFTINT0)
+#define VDEC2_CSFTINT1 0x233f 	///../ucode/dos_register.h:6546
+#define P_VDEC2_CSFTINT1 		DOS_REG_ADDR(VDEC2_CSFTINT1)
+#define VDEC2_IMEM_DMA_CTRL 0x2340 	///../ucode/dos_register.h:6547
+#define P_VDEC2_IMEM_DMA_CTRL 		DOS_REG_ADDR(VDEC2_IMEM_DMA_CTRL)
+#define VDEC2_IMEM_DMA_ADR 0x2341 	///../ucode/dos_register.h:6548
+#define P_VDEC2_IMEM_DMA_ADR 		DOS_REG_ADDR(VDEC2_IMEM_DMA_ADR)
+#define VDEC2_IMEM_DMA_COUNT 0x2342 	///../ucode/dos_register.h:6549
+#define P_VDEC2_IMEM_DMA_COUNT 		DOS_REG_ADDR(VDEC2_IMEM_DMA_COUNT)
+#define VDEC2_WRRSP_IMEM 0x2343 	///../ucode/dos_register.h:6553
+#define P_VDEC2_WRRSP_IMEM 		DOS_REG_ADDR(VDEC2_WRRSP_IMEM)
+#define VDEC2_LMEM_DMA_CTRL 0x2350 	///../ucode/dos_register.h:6554
+#define P_VDEC2_LMEM_DMA_CTRL 		DOS_REG_ADDR(VDEC2_LMEM_DMA_CTRL)
+#define VDEC2_LMEM_DMA_ADR 0x2351 	///../ucode/dos_register.h:6555
+#define P_VDEC2_LMEM_DMA_ADR 		DOS_REG_ADDR(VDEC2_LMEM_DMA_ADR)
+#define VDEC2_LMEM_DMA_COUNT 0x2352 	///../ucode/dos_register.h:6556
+#define P_VDEC2_LMEM_DMA_COUNT 		DOS_REG_ADDR(VDEC2_LMEM_DMA_COUNT)
+#define VDEC2_WRRSP_LMEM 0x2353 	///../ucode/dos_register.h:6560
+#define P_VDEC2_WRRSP_LMEM 		DOS_REG_ADDR(VDEC2_WRRSP_LMEM)
+#define VDEC2_MAC_CTRL1 0x2360 	///../ucode/dos_register.h:6561
+#define P_VDEC2_MAC_CTRL1 		DOS_REG_ADDR(VDEC2_MAC_CTRL1)
+#define VDEC2_ACC0REG1 0x2361 	///../ucode/dos_register.h:6562
+#define P_VDEC2_ACC0REG1 		DOS_REG_ADDR(VDEC2_ACC0REG1)
+#define VDEC2_ACC1REG1 0x2362 	///../ucode/dos_register.h:6563
+#define P_VDEC2_ACC1REG1 		DOS_REG_ADDR(VDEC2_ACC1REG1)
+#define VDEC2_MAC_CTRL2 0x2370 	///../ucode/dos_register.h:6564
+#define P_VDEC2_MAC_CTRL2 		DOS_REG_ADDR(VDEC2_MAC_CTRL2)
+#define VDEC2_ACC0REG2 0x2371 	///../ucode/dos_register.h:6565
+#define P_VDEC2_ACC0REG2 		DOS_REG_ADDR(VDEC2_ACC0REG2)
+#define VDEC2_ACC1REG2 0x2372 	///../ucode/dos_register.h:6566
+#define P_VDEC2_ACC1REG2 		DOS_REG_ADDR(VDEC2_ACC1REG2)
+#define VDEC2_CPU_TRACE 0x2380 	///../ucode/dos_register.h:6567
+#define P_VDEC2_CPU_TRACE 		DOS_REG_ADDR(VDEC2_CPU_TRACE)
+#define HEVC_MSP 0x3300 	///../ucode/dos_register.h:6580
+#define P_HEVC_MSP 		DOS_REG_ADDR(HEVC_MSP)
+#define HEVC_MPSR 0x3301 	///../ucode/dos_register.h:6581
+#define P_HEVC_MPSR 		DOS_REG_ADDR(HEVC_MPSR)
+#define HEVC_MINT_VEC_BASE 0x3302 	///../ucode/dos_register.h:6582
+#define P_HEVC_MINT_VEC_BASE 		DOS_REG_ADDR(HEVC_MINT_VEC_BASE)
+#define HEVC_MCPU_INTR_GRP 0x3303 	///../ucode/dos_register.h:6583
+#define P_HEVC_MCPU_INTR_GRP 		DOS_REG_ADDR(HEVC_MCPU_INTR_GRP)
+#define HEVC_MCPU_INTR_MSK 0x3304 	///../ucode/dos_register.h:6584
+#define P_HEVC_MCPU_INTR_MSK 		DOS_REG_ADDR(HEVC_MCPU_INTR_MSK)
+#define HEVC_MCPU_INTR_REQ 0x3305 	///../ucode/dos_register.h:6585
+#define P_HEVC_MCPU_INTR_REQ 		DOS_REG_ADDR(HEVC_MCPU_INTR_REQ)
+#define HEVC_MPC_P 0x3306 	///../ucode/dos_register.h:6586
+#define P_HEVC_MPC_P 		DOS_REG_ADDR(HEVC_MPC_P)
+#define HEVC_MPC_D 0x3307 	///../ucode/dos_register.h:6587
+#define P_HEVC_MPC_D 		DOS_REG_ADDR(HEVC_MPC_D)
+#define HEVC_MPC_E 0x3308 	///../ucode/dos_register.h:6588
+#define P_HEVC_MPC_E 		DOS_REG_ADDR(HEVC_MPC_E)
+#define HEVC_MPC_W 0x3309 	///../ucode/dos_register.h:6589
+#define P_HEVC_MPC_W 		DOS_REG_ADDR(HEVC_MPC_W)
+#define HEVC_MINDEX0_REG 0x330a 	///../ucode/dos_register.h:6590
+#define P_HEVC_MINDEX0_REG 		DOS_REG_ADDR(HEVC_MINDEX0_REG)
+#define HEVC_MINDEX1_REG 0x330b 	///../ucode/dos_register.h:6591
+#define P_HEVC_MINDEX1_REG 		DOS_REG_ADDR(HEVC_MINDEX1_REG)
+#define HEVC_MINDEX2_REG 0x330c 	///../ucode/dos_register.h:6592
+#define P_HEVC_MINDEX2_REG 		DOS_REG_ADDR(HEVC_MINDEX2_REG)
+#define HEVC_MINDEX3_REG 0x330d 	///../ucode/dos_register.h:6593
+#define P_HEVC_MINDEX3_REG 		DOS_REG_ADDR(HEVC_MINDEX3_REG)
+#define HEVC_MINDEX4_REG 0x330e 	///../ucode/dos_register.h:6594
+#define P_HEVC_MINDEX4_REG 		DOS_REG_ADDR(HEVC_MINDEX4_REG)
+#define HEVC_MINDEX5_REG 0x330f 	///../ucode/dos_register.h:6595
+#define P_HEVC_MINDEX5_REG 		DOS_REG_ADDR(HEVC_MINDEX5_REG)
+#define HEVC_MINDEX6_REG 0x3310 	///../ucode/dos_register.h:6596
+#define P_HEVC_MINDEX6_REG 		DOS_REG_ADDR(HEVC_MINDEX6_REG)
+#define HEVC_MINDEX7_REG 0x3311 	///../ucode/dos_register.h:6597
+#define P_HEVC_MINDEX7_REG 		DOS_REG_ADDR(HEVC_MINDEX7_REG)
+#define HEVC_MMIN_REG 0x3312 	///../ucode/dos_register.h:6598
+#define P_HEVC_MMIN_REG 		DOS_REG_ADDR(HEVC_MMIN_REG)
+#define HEVC_MMAX_REG 0x3313 	///../ucode/dos_register.h:6599
+#define P_HEVC_MMAX_REG 		DOS_REG_ADDR(HEVC_MMAX_REG)
+#define HEVC_MBREAK0_REG 0x3314 	///../ucode/dos_register.h:6600
+#define P_HEVC_MBREAK0_REG 		DOS_REG_ADDR(HEVC_MBREAK0_REG)
+#define HEVC_MBREAK1_REG 0x3315 	///../ucode/dos_register.h:6601
+#define P_HEVC_MBREAK1_REG 		DOS_REG_ADDR(HEVC_MBREAK1_REG)
+#define HEVC_MBREAK2_REG 0x3316 	///../ucode/dos_register.h:6602
+#define P_HEVC_MBREAK2_REG 		DOS_REG_ADDR(HEVC_MBREAK2_REG)
+#define HEVC_MBREAK3_REG 0x3317 	///../ucode/dos_register.h:6603
+#define P_HEVC_MBREAK3_REG 		DOS_REG_ADDR(HEVC_MBREAK3_REG)
+#define HEVC_MBREAK_TYPE 0x3318 	///../ucode/dos_register.h:6604
+#define P_HEVC_MBREAK_TYPE 		DOS_REG_ADDR(HEVC_MBREAK_TYPE)
+#define HEVC_MBREAK_CTRL 0x3319 	///../ucode/dos_register.h:6605
+#define P_HEVC_MBREAK_CTRL 		DOS_REG_ADDR(HEVC_MBREAK_CTRL)
+#define HEVC_MBREAK_STAUTS 0x331a 	///../ucode/dos_register.h:6606
+#define P_HEVC_MBREAK_STAUTS 		DOS_REG_ADDR(HEVC_MBREAK_STAUTS)
+#define HEVC_MDB_ADDR_REG 0x331b 	///../ucode/dos_register.h:6607
+#define P_HEVC_MDB_ADDR_REG 		DOS_REG_ADDR(HEVC_MDB_ADDR_REG)
+#define HEVC_MDB_DATA_REG 0x331c 	///../ucode/dos_register.h:6608
+#define P_HEVC_MDB_DATA_REG 		DOS_REG_ADDR(HEVC_MDB_DATA_REG)
+#define HEVC_MDB_CTRL 0x331d 	///../ucode/dos_register.h:6609
+#define P_HEVC_MDB_CTRL 		DOS_REG_ADDR(HEVC_MDB_CTRL)
+#define HEVC_MSFTINT0 0x331e 	///../ucode/dos_register.h:6610
+#define P_HEVC_MSFTINT0 		DOS_REG_ADDR(HEVC_MSFTINT0)
+#define HEVC_MSFTINT1 0x331f 	///../ucode/dos_register.h:6611
+#define P_HEVC_MSFTINT1 		DOS_REG_ADDR(HEVC_MSFTINT1)
+#define HEVC_CSP 0x3320 	///../ucode/dos_register.h:6612
+#define P_HEVC_CSP 		DOS_REG_ADDR(HEVC_CSP)
+#define HEVC_CPSR 0x3321 	///../ucode/dos_register.h:6613
+#define P_HEVC_CPSR 		DOS_REG_ADDR(HEVC_CPSR)
+#define HEVC_CINT_VEC_BASE 0x3322 	///../ucode/dos_register.h:6614
+#define P_HEVC_CINT_VEC_BASE 		DOS_REG_ADDR(HEVC_CINT_VEC_BASE)
+#define HEVC_CCPU_INTR_GRP 0x3323 	///../ucode/dos_register.h:6615
+#define P_HEVC_CCPU_INTR_GRP 		DOS_REG_ADDR(HEVC_CCPU_INTR_GRP)
+#define HEVC_CCPU_INTR_MSK 0x3324 	///../ucode/dos_register.h:6616
+#define P_HEVC_CCPU_INTR_MSK 		DOS_REG_ADDR(HEVC_CCPU_INTR_MSK)
+#define HEVC_CCPU_INTR_REQ 0x3325 	///../ucode/dos_register.h:6617
+#define P_HEVC_CCPU_INTR_REQ 		DOS_REG_ADDR(HEVC_CCPU_INTR_REQ)
+#define HEVC_CPC_P 0x3326 	///../ucode/dos_register.h:6618
+#define P_HEVC_CPC_P 		DOS_REG_ADDR(HEVC_CPC_P)
+#define HEVC_CPC_D 0x3327 	///../ucode/dos_register.h:6619
+#define P_HEVC_CPC_D 		DOS_REG_ADDR(HEVC_CPC_D)
+#define HEVC_CPC_E 0x3328 	///../ucode/dos_register.h:6620
+#define P_HEVC_CPC_E 		DOS_REG_ADDR(HEVC_CPC_E)
+#define HEVC_CPC_W 0x3329 	///../ucode/dos_register.h:6621
+#define P_HEVC_CPC_W 		DOS_REG_ADDR(HEVC_CPC_W)
+#define HEVC_CINDEX0_REG 0x332a 	///../ucode/dos_register.h:6622
+#define P_HEVC_CINDEX0_REG 		DOS_REG_ADDR(HEVC_CINDEX0_REG)
+#define HEVC_CINDEX1_REG 0x332b 	///../ucode/dos_register.h:6623
+#define P_HEVC_CINDEX1_REG 		DOS_REG_ADDR(HEVC_CINDEX1_REG)
+#define HEVC_CINDEX2_REG 0x332c 	///../ucode/dos_register.h:6624
+#define P_HEVC_CINDEX2_REG 		DOS_REG_ADDR(HEVC_CINDEX2_REG)
+#define HEVC_CINDEX3_REG 0x332d 	///../ucode/dos_register.h:6625
+#define P_HEVC_CINDEX3_REG 		DOS_REG_ADDR(HEVC_CINDEX3_REG)
+#define HEVC_CINDEX4_REG 0x332e 	///../ucode/dos_register.h:6626
+#define P_HEVC_CINDEX4_REG 		DOS_REG_ADDR(HEVC_CINDEX4_REG)
+#define HEVC_CINDEX5_REG 0x332f 	///../ucode/dos_register.h:6627
+#define P_HEVC_CINDEX5_REG 		DOS_REG_ADDR(HEVC_CINDEX5_REG)
+#define HEVC_CINDEX6_REG 0x3330 	///../ucode/dos_register.h:6628
+#define P_HEVC_CINDEX6_REG 		DOS_REG_ADDR(HEVC_CINDEX6_REG)
+#define HEVC_CINDEX7_REG 0x3331 	///../ucode/dos_register.h:6629
+#define P_HEVC_CINDEX7_REG 		DOS_REG_ADDR(HEVC_CINDEX7_REG)
+#define HEVC_CMIN_REG 0x3332 	///../ucode/dos_register.h:6630
+#define P_HEVC_CMIN_REG 		DOS_REG_ADDR(HEVC_CMIN_REG)
+#define HEVC_CMAX_REG 0x3333 	///../ucode/dos_register.h:6631
+#define P_HEVC_CMAX_REG 		DOS_REG_ADDR(HEVC_CMAX_REG)
+#define HEVC_CBREAK0_REG 0x3334 	///../ucode/dos_register.h:6632
+#define P_HEVC_CBREAK0_REG 		DOS_REG_ADDR(HEVC_CBREAK0_REG)
+#define HEVC_CBREAK1_REG 0x3335 	///../ucode/dos_register.h:6633
+#define P_HEVC_CBREAK1_REG 		DOS_REG_ADDR(HEVC_CBREAK1_REG)
+#define HEVC_CBREAK2_REG 0x3336 	///../ucode/dos_register.h:6634
+#define P_HEVC_CBREAK2_REG 		DOS_REG_ADDR(HEVC_CBREAK2_REG)
+#define HEVC_CBREAK3_REG 0x3337 	///../ucode/dos_register.h:6635
+#define P_HEVC_CBREAK3_REG 		DOS_REG_ADDR(HEVC_CBREAK3_REG)
+#define HEVC_CBREAK_TYPE 0x3338 	///../ucode/dos_register.h:6636
+#define P_HEVC_CBREAK_TYPE 		DOS_REG_ADDR(HEVC_CBREAK_TYPE)
+#define HEVC_CBREAK_CTRL 0x3339 	///../ucode/dos_register.h:6637
+#define P_HEVC_CBREAK_CTRL 		DOS_REG_ADDR(HEVC_CBREAK_CTRL)
+#define HEVC_CBREAK_STAUTS 0x333a 	///../ucode/dos_register.h:6638
+#define P_HEVC_CBREAK_STAUTS 		DOS_REG_ADDR(HEVC_CBREAK_STAUTS)
+#define HEVC_CDB_ADDR_REG 0x333b 	///../ucode/dos_register.h:6639
+#define P_HEVC_CDB_ADDR_REG 		DOS_REG_ADDR(HEVC_CDB_ADDR_REG)
+#define HEVC_CDB_DATA_REG 0x333c 	///../ucode/dos_register.h:6640
+#define P_HEVC_CDB_DATA_REG 		DOS_REG_ADDR(HEVC_CDB_DATA_REG)
+#define HEVC_CDB_CTRL 0x333d 	///../ucode/dos_register.h:6641
+#define P_HEVC_CDB_CTRL 		DOS_REG_ADDR(HEVC_CDB_CTRL)
+#define HEVC_CSFTINT0 0x333e 	///../ucode/dos_register.h:6642
+#define P_HEVC_CSFTINT0 		DOS_REG_ADDR(HEVC_CSFTINT0)
+#define HEVC_CSFTINT1 0x333f 	///../ucode/dos_register.h:6643
+#define P_HEVC_CSFTINT1 		DOS_REG_ADDR(HEVC_CSFTINT1)
+#define HEVC_IMEM_DMA_CTRL 0x3340 	///../ucode/dos_register.h:6644
+#define P_HEVC_IMEM_DMA_CTRL 		DOS_REG_ADDR(HEVC_IMEM_DMA_CTRL)
+#define HEVC_IMEM_DMA_ADR 0x3341 	///../ucode/dos_register.h:6645
+#define P_HEVC_IMEM_DMA_ADR 		DOS_REG_ADDR(HEVC_IMEM_DMA_ADR)
+#define HEVC_IMEM_DMA_COUNT 0x3342 	///../ucode/dos_register.h:6646
+#define P_HEVC_IMEM_DMA_COUNT 		DOS_REG_ADDR(HEVC_IMEM_DMA_COUNT)
+#define HEVC_WRRSP_IMEM 0x3343 	///../ucode/dos_register.h:6650
+#define P_HEVC_WRRSP_IMEM 		DOS_REG_ADDR(HEVC_WRRSP_IMEM)
+#define HEVC_LMEM_DMA_CTRL 0x3350 	///../ucode/dos_register.h:6651
+#define P_HEVC_LMEM_DMA_CTRL 		DOS_REG_ADDR(HEVC_LMEM_DMA_CTRL)
+#define HEVC_LMEM_DMA_ADR 0x3351 	///../ucode/dos_register.h:6652
+#define P_HEVC_LMEM_DMA_ADR 		DOS_REG_ADDR(HEVC_LMEM_DMA_ADR)
+#define HEVC_LMEM_DMA_COUNT 0x3352 	///../ucode/dos_register.h:6653
+#define P_HEVC_LMEM_DMA_COUNT 		DOS_REG_ADDR(HEVC_LMEM_DMA_COUNT)
+#define HEVC_WRRSP_LMEM 0x3353 	///../ucode/dos_register.h:6657
+#define P_HEVC_WRRSP_LMEM 		DOS_REG_ADDR(HEVC_WRRSP_LMEM)
+#define HEVC_MAC_CTRL1 0x3360 	///../ucode/dos_register.h:6658
+#define P_HEVC_MAC_CTRL1 		DOS_REG_ADDR(HEVC_MAC_CTRL1)
+#define HEVC_ACC0REG1 0x3361 	///../ucode/dos_register.h:6659
+#define P_HEVC_ACC0REG1 		DOS_REG_ADDR(HEVC_ACC0REG1)
+#define HEVC_ACC1REG1 0x3362 	///../ucode/dos_register.h:6660
+#define P_HEVC_ACC1REG1 		DOS_REG_ADDR(HEVC_ACC1REG1)
+#define HEVC_MAC_CTRL2 0x3370 	///../ucode/dos_register.h:6661
+#define P_HEVC_MAC_CTRL2 		DOS_REG_ADDR(HEVC_MAC_CTRL2)
+#define HEVC_ACC0REG2 0x3371 	///../ucode/dos_register.h:6662
+#define P_HEVC_ACC0REG2 		DOS_REG_ADDR(HEVC_ACC0REG2)
+#define HEVC_ACC1REG2 0x3372 	///../ucode/dos_register.h:6663
+#define P_HEVC_ACC1REG2 		DOS_REG_ADDR(HEVC_ACC1REG2)
+#define HEVC_CPU_TRACE 0x3380 	///../ucode/dos_register.h:6664
+#define P_HEVC_CPU_TRACE 		DOS_REG_ADDR(HEVC_CPU_TRACE)
+#define HCODEC_HENC_SCRATCH_0 0x1ac0 	///../ucode/dos_register.h:6677
+#define P_HCODEC_HENC_SCRATCH_0 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_0)
+#define HCODEC_HENC_SCRATCH_1 0x1ac1 	///../ucode/dos_register.h:6678
+#define P_HCODEC_HENC_SCRATCH_1 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_1)
+#define HCODEC_HENC_SCRATCH_2 0x1ac2 	///../ucode/dos_register.h:6679
+#define P_HCODEC_HENC_SCRATCH_2 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_2)
+#define HCODEC_HENC_SCRATCH_3 0x1ac3 	///../ucode/dos_register.h:6680
+#define P_HCODEC_HENC_SCRATCH_3 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_3)
+#define HCODEC_HENC_SCRATCH_4 0x1ac4 	///../ucode/dos_register.h:6681
+#define P_HCODEC_HENC_SCRATCH_4 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_4)
+#define HCODEC_HENC_SCRATCH_5 0x1ac5 	///../ucode/dos_register.h:6682
+#define P_HCODEC_HENC_SCRATCH_5 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_5)
+#define HCODEC_HENC_SCRATCH_6 0x1ac6 	///../ucode/dos_register.h:6683
+#define P_HCODEC_HENC_SCRATCH_6 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_6)
+#define HCODEC_HENC_SCRATCH_7 0x1ac7 	///../ucode/dos_register.h:6684
+#define P_HCODEC_HENC_SCRATCH_7 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_7)
+#define HCODEC_HENC_SCRATCH_8 0x1ac8 	///../ucode/dos_register.h:6685
+#define P_HCODEC_HENC_SCRATCH_8 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_8)
+#define HCODEC_HENC_SCRATCH_9 0x1ac9 	///../ucode/dos_register.h:6686
+#define P_HCODEC_HENC_SCRATCH_9 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_9)
+#define HCODEC_HENC_SCRATCH_A 0x1aca 	///../ucode/dos_register.h:6687
+#define P_HCODEC_HENC_SCRATCH_A 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_A)
+#define HCODEC_HENC_SCRATCH_B 0x1acb 	///../ucode/dos_register.h:6688
+#define P_HCODEC_HENC_SCRATCH_B 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_B)
+#define HCODEC_HENC_SCRATCH_C 0x1acc 	///../ucode/dos_register.h:6689
+#define P_HCODEC_HENC_SCRATCH_C 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_C)
+#define HCODEC_HENC_SCRATCH_D 0x1acd 	///../ucode/dos_register.h:6690
+#define P_HCODEC_HENC_SCRATCH_D 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_D)
+#define HCODEC_HENC_SCRATCH_E 0x1ace 	///../ucode/dos_register.h:6691
+#define P_HCODEC_HENC_SCRATCH_E 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_E)
+#define HCODEC_HENC_SCRATCH_F 0x1acf 	///../ucode/dos_register.h:6692
+#define P_HCODEC_HENC_SCRATCH_F 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_F)
+#define HCODEC_HENC_SCRATCH_G 0x1ad0 	///../ucode/dos_register.h:6693
+#define P_HCODEC_HENC_SCRATCH_G 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_G)
+#define HCODEC_HENC_SCRATCH_H 0x1ad1 	///../ucode/dos_register.h:6694
+#define P_HCODEC_HENC_SCRATCH_H 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_H)
+#define HCODEC_HENC_SCRATCH_I 0x1ad2 	///../ucode/dos_register.h:6695
+#define P_HCODEC_HENC_SCRATCH_I 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_I)
+#define HCODEC_HENC_SCRATCH_J 0x1ad3 	///../ucode/dos_register.h:6696
+#define P_HCODEC_HENC_SCRATCH_J 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_J)
+#define HCODEC_HENC_SCRATCH_K 0x1ad4 	///../ucode/dos_register.h:6697
+#define P_HCODEC_HENC_SCRATCH_K 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_K)
+#define HCODEC_HENC_SCRATCH_L 0x1ad5 	///../ucode/dos_register.h:6698
+#define P_HCODEC_HENC_SCRATCH_L 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_L)
+#define HCODEC_HENC_SCRATCH_M 0x1ad6 	///../ucode/dos_register.h:6699
+#define P_HCODEC_HENC_SCRATCH_M 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_M)
+#define HCODEC_HENC_SCRATCH_N 0x1ad7 	///../ucode/dos_register.h:6700
+#define P_HCODEC_HENC_SCRATCH_N 		DOS_REG_ADDR(HCODEC_HENC_SCRATCH_N)
+#define HCODEC_IE_DATA_FEED_BUFF_INFO 0x1ad8 	///../ucode/dos_register.h:6702
+#define P_HCODEC_IE_DATA_FEED_BUFF_INFO 		DOS_REG_ADDR(HCODEC_IE_DATA_FEED_BUFF_INFO)
+#define HCODEC_VLC_STATUS_CTRL 0x1d00 	///../ucode/dos_register.h:6725
+#define P_HCODEC_VLC_STATUS_CTRL 		DOS_REG_ADDR(HCODEC_VLC_STATUS_CTRL)
+#define HCODEC_VLC_CONFIG 0x1d01 	///../ucode/dos_register.h:6743
+#define P_HCODEC_VLC_CONFIG 		DOS_REG_ADDR(HCODEC_VLC_CONFIG)
+#define HCODEC_VLC_VB_START_PTR 0x1d10 	///../ucode/dos_register.h:6747
+#define P_HCODEC_VLC_VB_START_PTR 		DOS_REG_ADDR(HCODEC_VLC_VB_START_PTR)
+#define HCODEC_VLC_VB_END_PTR 0x1d11 	///../ucode/dos_register.h:6748
+#define P_HCODEC_VLC_VB_END_PTR 		DOS_REG_ADDR(HCODEC_VLC_VB_END_PTR)
+#define HCODEC_VLC_VB_WR_PTR 0x1d12 	///../ucode/dos_register.h:6749
+#define P_HCODEC_VLC_VB_WR_PTR 		DOS_REG_ADDR(HCODEC_VLC_VB_WR_PTR)
+#define HCODEC_VLC_VB_RD_PTR 0x1d13 	///../ucode/dos_register.h:6751
+#define P_HCODEC_VLC_VB_RD_PTR 		DOS_REG_ADDR(HCODEC_VLC_VB_RD_PTR)
+#define HCODEC_VLC_VB_SW_RD_PTR 0x1d14 	///../ucode/dos_register.h:6752
+#define P_HCODEC_VLC_VB_SW_RD_PTR 		DOS_REG_ADDR(HCODEC_VLC_VB_SW_RD_PTR)
+#define HCODEC_VLC_VB_LEFT 0x1d15 	///../ucode/dos_register.h:6754
+#define P_HCODEC_VLC_VB_LEFT 		DOS_REG_ADDR(HCODEC_VLC_VB_LEFT)
+#define HCODEC_VLC_VB_CONTROL 0x1d16 	///../ucode/dos_register.h:6780
+#define P_HCODEC_VLC_VB_CONTROL 		DOS_REG_ADDR(HCODEC_VLC_VB_CONTROL)
+#define HCODEC_VLC_VB_MEM_CTL 0x1d17 	///../ucode/dos_register.h:6787
+#define P_HCODEC_VLC_VB_MEM_CTL 		DOS_REG_ADDR(HCODEC_VLC_VB_MEM_CTL)
+#define HCODEC_VLC_VB_INT_PTR 0x1d18 	///../ucode/dos_register.h:6789
+#define P_HCODEC_VLC_VB_INT_PTR 		DOS_REG_ADDR(HCODEC_VLC_VB_INT_PTR)
+#define HCODEC_VLC_WRRSP 0x1d19 	///../ucode/dos_register.h:6792
+#define P_HCODEC_VLC_WRRSP 		DOS_REG_ADDR(HCODEC_VLC_WRRSP)
+#define HCODEC_VLC_TOTAL_BYTES 0x1d1a 	///../ucode/dos_register.h:6793
+#define P_HCODEC_VLC_TOTAL_BYTES 		DOS_REG_ADDR(HCODEC_VLC_TOTAL_BYTES)
+#define HCODEC_VLC_VB_BUFF 0x1d1b 	///../ucode/dos_register.h:6800
+#define P_HCODEC_VLC_VB_BUFF 		DOS_REG_ADDR(HCODEC_VLC_VB_BUFF)
+#define HCODEC_VLC_VB_PRE_BUFF_HI 0x1d1c 	///../ucode/dos_register.h:6805
+#define P_HCODEC_VLC_VB_PRE_BUFF_HI 		DOS_REG_ADDR(HCODEC_VLC_VB_PRE_BUFF_HI)
+#define HCODEC_VLC_VB_PRE_BUFF_LOW 0x1d1d 	///../ucode/dos_register.h:6807
+#define P_HCODEC_VLC_VB_PRE_BUFF_LOW 		DOS_REG_ADDR(HCODEC_VLC_VB_PRE_BUFF_LOW)
+#define HCODEC_VLC_STREAM_BUFF 0x1d1e 	///../ucode/dos_register.h:6812
+#define P_HCODEC_VLC_STREAM_BUFF 		DOS_REG_ADDR(HCODEC_VLC_STREAM_BUFF)
+#define HCODEC_VLC_PUSH_STREAM 0x1d1f 	///../ucode/dos_register.h:6826
+#define P_HCODEC_VLC_PUSH_STREAM 		DOS_REG_ADDR(HCODEC_VLC_PUSH_STREAM)
+#define HCODEC_VLC_PUSH_ELEMENT 0x1d20 	///../ucode/dos_register.h:6830
+#define P_HCODEC_VLC_PUSH_ELEMENT 		DOS_REG_ADDR(HCODEC_VLC_PUSH_ELEMENT)
+#define HCODEC_VLC_ELEMENT_DATA 0x1d21 	///../ucode/dos_register.h:6831
+#define P_HCODEC_VLC_ELEMENT_DATA 		DOS_REG_ADDR(HCODEC_VLC_ELEMENT_DATA)
+#define HCODEC_VLC_INT_CONTROL 0x1d30 	///../ucode/dos_register.h:6868
+#define P_HCODEC_VLC_INT_CONTROL 		DOS_REG_ADDR(HCODEC_VLC_INT_CONTROL)
+#define HCODEC_VLC_PIC_SIZE 0x1d31 	///../ucode/dos_register.h:6871
+#define P_HCODEC_VLC_PIC_SIZE 		DOS_REG_ADDR(HCODEC_VLC_PIC_SIZE)
+#define HCODEC_VLC_PIC_INFO 0x1d32 	///../ucode/dos_register.h:6875
+#define P_HCODEC_VLC_PIC_INFO 		DOS_REG_ADDR(HCODEC_VLC_PIC_INFO)
+#define HCODEC_VLC_PIC_POSITION 0x1d33 	///../ucode/dos_register.h:6879
+#define P_HCODEC_VLC_PIC_POSITION 		DOS_REG_ADDR(HCODEC_VLC_PIC_POSITION)
+#define HCODEC_VLC_INPUT_STATUS 0x1d34 	///../ucode/dos_register.h:6898
+#define P_HCODEC_VLC_INPUT_STATUS 		DOS_REG_ADDR(HCODEC_VLC_INPUT_STATUS)
+#define HCODEC_VLC_MB_INFO 0x1d35 	///../ucode/dos_register.h:6903
+#define P_HCODEC_VLC_MB_INFO 		DOS_REG_ADDR(HCODEC_VLC_MB_INFO)
+#define HCODEC_VLC_ENC_PEND_CMD 0x1d36 	///../ucode/dos_register.h:6915
+#define P_HCODEC_VLC_ENC_PEND_CMD 		DOS_REG_ADDR(HCODEC_VLC_ENC_PEND_CMD)
+#define HCODEC_HENC_TOP_INFO_0 0x1d37 	///../ucode/dos_register.h:6919
+#define P_HCODEC_HENC_TOP_INFO_0 		DOS_REG_ADDR(HCODEC_HENC_TOP_INFO_0)
+#define HCODEC_HENC_LEFT_INFO_0 0x1d38 	///../ucode/dos_register.h:6920
+#define P_HCODEC_HENC_LEFT_INFO_0 		DOS_REG_ADDR(HCODEC_HENC_LEFT_INFO_0)
+#define HCODEC_HENC_TOP_INFO_1 0x1d39 	///../ucode/dos_register.h:6925
+#define P_HCODEC_HENC_TOP_INFO_1 		DOS_REG_ADDR(HCODEC_HENC_TOP_INFO_1)
+#define HCODEC_HENC_LEFT_INFO_1 0x1d3a 	///../ucode/dos_register.h:6926
+#define P_HCODEC_HENC_LEFT_INFO_1 		DOS_REG_ADDR(HCODEC_HENC_LEFT_INFO_1)
+#define HCODEC_VLC_IPRED_MODE_HI 0x1d3b 	///../ucode/dos_register.h:6928
+#define P_HCODEC_VLC_IPRED_MODE_HI 		DOS_REG_ADDR(HCODEC_VLC_IPRED_MODE_HI)
+#define HCODEC_VLC_IPRED_MODE_LO 0x1d3c 	///../ucode/dos_register.h:6929
+#define P_HCODEC_VLC_IPRED_MODE_LO 		DOS_REG_ADDR(HCODEC_VLC_IPRED_MODE_LO)
+#define HCODEC_VLC_DELTA_QP 0x1d3d 	///../ucode/dos_register.h:6932
+#define P_HCODEC_VLC_DELTA_QP 		DOS_REG_ADDR(HCODEC_VLC_DELTA_QP)
+#define HCODEC_VLC_MB_HEADER_INFO 0x1d3e 	///../ucode/dos_register.h:6937
+#define P_HCODEC_VLC_MB_HEADER_INFO 		DOS_REG_ADDR(HCODEC_VLC_MB_HEADER_INFO)
+#define HCODEC_VLC_P_MB_HEADER_INFO 0x1d3f 	///../ucode/dos_register.h:6940
+#define P_HCODEC_VLC_P_MB_HEADER_INFO 		DOS_REG_ADDR(HCODEC_VLC_P_MB_HEADER_INFO)
+#define HCODEC_VLC_COEFF_BUF_STATUS 0x1d40 	///../ucode/dos_register.h:6946
+#define P_HCODEC_VLC_COEFF_BUF_STATUS 		DOS_REG_ADDR(HCODEC_VLC_COEFF_BUF_STATUS)
+#define HCODEC_VLC_COEFF_RD_REQ 0x1d41 	///../ucode/dos_register.h:6949
+#define P_HCODEC_VLC_COEFF_RD_REQ 		DOS_REG_ADDR(HCODEC_VLC_COEFF_RD_REQ)
+#define HCODEC_VLC_COEFF 0x1d42 	///../ucode/dos_register.h:6954
+#define P_HCODEC_VLC_COEFF 		DOS_REG_ADDR(HCODEC_VLC_COEFF)
+#define HCODEC_VLC_COEFF_INFO 0x1d43 	///../ucode/dos_register.h:6962
+#define P_HCODEC_VLC_COEFF_INFO 		DOS_REG_ADDR(HCODEC_VLC_COEFF_INFO)
+#define HCODEC_VLC_DC_BUF_STATUS 0x1d44 	///../ucode/dos_register.h:6971
+#define P_HCODEC_VLC_DC_BUF_STATUS 		DOS_REG_ADDR(HCODEC_VLC_DC_BUF_STATUS)
+#define HCODEC_VLC_DC_RD_REQ 0x1d45 	///../ucode/dos_register.h:6975
+#define P_HCODEC_VLC_DC_RD_REQ 		DOS_REG_ADDR(HCODEC_VLC_DC_RD_REQ)
+#define HCODEC_VLC_DC 0x1d46 	///../ucode/dos_register.h:6980
+#define P_HCODEC_VLC_DC 		DOS_REG_ADDR(HCODEC_VLC_DC)
+#define HCODEC_VLC_DC_INFO 0x1d47 	///../ucode/dos_register.h:6989
+#define P_HCODEC_VLC_DC_INFO 		DOS_REG_ADDR(HCODEC_VLC_DC_INFO)
+#define HCODEC_VLC_MV_INDEX 0x1d48 	///../ucode/dos_register.h:6992
+#define P_HCODEC_VLC_MV_INDEX 		DOS_REG_ADDR(HCODEC_VLC_MV_INDEX)
+#define HCODEC_VLC_MV 0x1d49 	///../ucode/dos_register.h:6995
+#define P_HCODEC_VLC_MV 		DOS_REG_ADDR(HCODEC_VLC_MV)
+#define HCODEC_HENC_TOP_MV_0 0x1d4a 	///../ucode/dos_register.h:7000
+#define P_HCODEC_HENC_TOP_MV_0 		DOS_REG_ADDR(HCODEC_HENC_TOP_MV_0)
+#define HCODEC_HENC_TOP_MV_1 0x1d4b 	///../ucode/dos_register.h:7001
+#define P_HCODEC_HENC_TOP_MV_1 		DOS_REG_ADDR(HCODEC_HENC_TOP_MV_1)
+#define HCODEC_HENC_TOP_MV_2 0x1d4c 	///../ucode/dos_register.h:7002
+#define P_HCODEC_HENC_TOP_MV_2 		DOS_REG_ADDR(HCODEC_HENC_TOP_MV_2)
+#define HCODEC_HENC_TOP_MV_3 0x1d4d 	///../ucode/dos_register.h:7003
+#define P_HCODEC_HENC_TOP_MV_3 		DOS_REG_ADDR(HCODEC_HENC_TOP_MV_3)
+#define HCODEC_HENC_LEFT_MV_0 0x1d4e 	///../ucode/dos_register.h:7004
+#define P_HCODEC_HENC_LEFT_MV_0 		DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_0)
+#define HCODEC_HENC_LEFT_MV_1 0x1d4f 	///../ucode/dos_register.h:7005
+#define P_HCODEC_HENC_LEFT_MV_1 		DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_1)
+#define HCODEC_HENC_LEFT_MV_2 0x1d50 	///../ucode/dos_register.h:7006
+#define P_HCODEC_HENC_LEFT_MV_2 		DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_2)
+#define HCODEC_HENC_LEFT_MV_3 0x1d51 	///../ucode/dos_register.h:7007
+#define P_HCODEC_HENC_LEFT_MV_3 		DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_3)
+#define HCODEC_TOP_LEFT_READY 0x1d52 	///../ucode/dos_register.h:7010
+#define P_HCODEC_TOP_LEFT_READY 		DOS_REG_ADDR(HCODEC_TOP_LEFT_READY)
+#define HCODEC_MB_SKIP_RUN 0x1d53 	///../ucode/dos_register.h:7013
+#define P_HCODEC_MB_SKIP_RUN 		DOS_REG_ADDR(HCODEC_MB_SKIP_RUN)
+#define HCODEC_VLC_HCMD_CONFIG 0x1d54 	///../ucode/dos_register.h:7020
+#define P_HCODEC_VLC_HCMD_CONFIG 		DOS_REG_ADDR(HCODEC_VLC_HCMD_CONFIG)
+#define HCODEC_VLC_HCMD_DBLK_INFO 0x1d55 	///../ucode/dos_register.h:7022
+#define P_HCODEC_VLC_HCMD_DBLK_INFO 		DOS_REG_ADDR(HCODEC_VLC_HCMD_DBLK_INFO)
+#define HCODEC_VLC_DBG_IDX 0x1d56 	///../ucode/dos_register.h:7024
+#define P_HCODEC_VLC_DBG_IDX 		DOS_REG_ADDR(HCODEC_VLC_DBG_IDX)
+#define HCODEC_VLC_DBG_READ 0x1d57 	///../ucode/dos_register.h:7026
+#define P_HCODEC_VLC_DBG_READ 		DOS_REG_ADDR(HCODEC_VLC_DBG_READ)
+#define HCODEC_VLC_JPEG_CTRL 0x1d58 	///../ucode/dos_register.h:7027
+#define P_HCODEC_VLC_JPEG_CTRL 		DOS_REG_ADDR(HCODEC_VLC_JPEG_CTRL)
+#define HCODEC_VLC_JPEG_COEFF_BUF_STAT 0x1d59 	///../ucode/dos_register.h:7028
+#define P_HCODEC_VLC_JPEG_COEFF_BUF_STAT 		DOS_REG_ADDR(HCODEC_VLC_JPEG_COEFF_BUF_STAT)
+#define HCODEC_VLC_HUFFMAN_ADDR 0x1d5a 	///../ucode/dos_register.h:7029
+#define P_HCODEC_VLC_HUFFMAN_ADDR 		DOS_REG_ADDR(HCODEC_VLC_HUFFMAN_ADDR)
+#define HCODEC_VLC_HUFFMAN_DATA 0x1d5b 	///../ucode/dos_register.h:7030
+#define P_HCODEC_VLC_HUFFMAN_DATA 		DOS_REG_ADDR(HCODEC_VLC_HUFFMAN_DATA)
+#define HCODEC_VLC_ENC_MV_BITS 0x1d5c 	///../ucode/dos_register.h:7032
+#define P_HCODEC_VLC_ENC_MV_BITS 		DOS_REG_ADDR(HCODEC_VLC_ENC_MV_BITS)
+#define HCODEC_VLC_ENC_COEFF_BITS 0x1d5d 	///../ucode/dos_register.h:7034
+#define P_HCODEC_VLC_ENC_COEFF_BITS 		DOS_REG_ADDR(HCODEC_VLC_ENC_COEFF_BITS)
+#define HCODEC_QDCT_STATUS_CTRL 0x1f00 	///../ucode/dos_register.h:7048
+#define P_HCODEC_QDCT_STATUS_CTRL 		DOS_REG_ADDR(HCODEC_QDCT_STATUS_CTRL)
+#define HCODEC_QDCT_CONFIG 0x1f01 	///../ucode/dos_register.h:7068
+#define P_HCODEC_QDCT_CONFIG 		DOS_REG_ADDR(HCODEC_QDCT_CONFIG)
+#define HCODEC_IGNORE_CONFIG 0x1f02 	///../ucode/dos_register.h:7077
+#define P_HCODEC_IGNORE_CONFIG 		DOS_REG_ADDR(HCODEC_IGNORE_CONFIG)
+#define HCODEC_IGNORE_CONFIG_2 0x1f03 	///../ucode/dos_register.h:7083
+#define P_HCODEC_IGNORE_CONFIG_2 		DOS_REG_ADDR(HCODEC_IGNORE_CONFIG_2)
+#define HCODEC_QDCT_MB_START_PTR 0x1f10 	///../ucode/dos_register.h:7087
+#define P_HCODEC_QDCT_MB_START_PTR 		DOS_REG_ADDR(HCODEC_QDCT_MB_START_PTR)
+#define HCODEC_QDCT_MB_END_PTR 0x1f11 	///../ucode/dos_register.h:7088
+#define P_HCODEC_QDCT_MB_END_PTR 		DOS_REG_ADDR(HCODEC_QDCT_MB_END_PTR)
+#define HCODEC_QDCT_MB_WR_PTR 0x1f12 	///../ucode/dos_register.h:7089
+#define P_HCODEC_QDCT_MB_WR_PTR 		DOS_REG_ADDR(HCODEC_QDCT_MB_WR_PTR)
+#define HCODEC_QDCT_MB_RD_PTR 0x1f13 	///../ucode/dos_register.h:7090
+#define P_HCODEC_QDCT_MB_RD_PTR 		DOS_REG_ADDR(HCODEC_QDCT_MB_RD_PTR)
+#define HCODEC_QDCT_MB_LEVEL 0x1f14 	///../ucode/dos_register.h:7091
+#define P_HCODEC_QDCT_MB_LEVEL 		DOS_REG_ADDR(HCODEC_QDCT_MB_LEVEL)
+#define HCODEC_QDCT_MB_CONTROL 0x1f15 	///../ucode/dos_register.h:7122
+#define P_HCODEC_QDCT_MB_CONTROL 		DOS_REG_ADDR(HCODEC_QDCT_MB_CONTROL)
+#define HCODEC_QDCT_MB_MEM_CTL 0x1f16 	///../ucode/dos_register.h:7130
+#define P_HCODEC_QDCT_MB_MEM_CTL 		DOS_REG_ADDR(HCODEC_QDCT_MB_MEM_CTL)
+#define HCODEC_QDCT_MB_BUFF 0x1f17 	///../ucode/dos_register.h:7135
+#define P_HCODEC_QDCT_MB_BUFF 		DOS_REG_ADDR(HCODEC_QDCT_MB_BUFF)
+#define HCODEC_QDCT_MB_MAGIC_WORD 0x1f18 	///../ucode/dos_register.h:7137
+#define P_HCODEC_QDCT_MB_MAGIC_WORD 		DOS_REG_ADDR(HCODEC_QDCT_MB_MAGIC_WORD)
+#define HCODEC_QDCT_DCT_STATUS 0x1f19 	///../ucode/dos_register.h:7149
+#define P_HCODEC_QDCT_DCT_STATUS 		DOS_REG_ADDR(HCODEC_QDCT_DCT_STATUS)
+#define HCODEC_QDCT_Q_STATUS 0x1f1a 	///../ucode/dos_register.h:7151
+#define P_HCODEC_QDCT_Q_STATUS 		DOS_REG_ADDR(HCODEC_QDCT_Q_STATUS)
+#define HCODEC_QDCT_PIC_INFO 0x1f1b 	///../ucode/dos_register.h:7154
+#define P_HCODEC_QDCT_PIC_INFO 		DOS_REG_ADDR(HCODEC_QDCT_PIC_INFO)
+#define HCODEC_QDCT_Q_QUANT_I 0x1f1c 	///../ucode/dos_register.h:7164
+#define P_HCODEC_QDCT_Q_QUANT_I 		DOS_REG_ADDR(HCODEC_QDCT_Q_QUANT_I)
+#define HCODEC_QDCT_Q_QUANT_P 0x1f1d 	///../ucode/dos_register.h:7174
+#define P_HCODEC_QDCT_Q_QUANT_P 		DOS_REG_ADDR(HCODEC_QDCT_Q_QUANT_P)
+#define HCODEC_QDCT_MB_PAUSE_CTL 0x1f1e 	///../ucode/dos_register.h:7178
+#define P_HCODEC_QDCT_MB_PAUSE_CTL 		DOS_REG_ADDR(HCODEC_QDCT_MB_PAUSE_CTL)
+#define HCODEC_QDCT_TOP_CONTROL 0x1f1f 	///../ucode/dos_register.h:7192
+#define P_HCODEC_QDCT_TOP_CONTROL 		DOS_REG_ADDR(HCODEC_QDCT_TOP_CONTROL)
+#define HCODEC_QDCT_TOP_BASE_MEM 0x1f20 	///../ucode/dos_register.h:7194
+#define P_HCODEC_QDCT_TOP_BASE_MEM 		DOS_REG_ADDR(HCODEC_QDCT_TOP_BASE_MEM)
+#define HCODEC_QDCT_TOP_MEM_CTL 0x1f21 	///../ucode/dos_register.h:7199
+#define P_HCODEC_QDCT_TOP_MEM_CTL 		DOS_REG_ADDR(HCODEC_QDCT_TOP_MEM_CTL)
+#define HCODEC_QDCT_TOP_WRRSP 0x1f22 	///../ucode/dos_register.h:7201
+#define P_HCODEC_QDCT_TOP_WRRSP 		DOS_REG_ADDR(HCODEC_QDCT_TOP_WRRSP)
+#define HCODEC_QDCT_DBG_IDX 0x1f23 	///../ucode/dos_register.h:7203
+#define P_HCODEC_QDCT_DBG_IDX 		DOS_REG_ADDR(HCODEC_QDCT_DBG_IDX)
+#define HCODEC_QDCT_DBG_READ 0x1f24 	///../ucode/dos_register.h:7205
+#define P_HCODEC_QDCT_DBG_READ 		DOS_REG_ADDR(HCODEC_QDCT_DBG_READ)
+#define HCODEC_QDCT_JPEG_CTRL 0x1f25 	///../ucode/dos_register.h:7206
+#define P_HCODEC_QDCT_JPEG_CTRL 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_CTRL)
+#define HCODEC_QDCT_JPEG_X_START_END 0x1f26 	///../ucode/dos_register.h:7207
+#define P_HCODEC_QDCT_JPEG_X_START_END 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_X_START_END)
+#define HCODEC_QDCT_JPEG_Y_START_END 0x1f27 	///../ucode/dos_register.h:7208
+#define P_HCODEC_QDCT_JPEG_Y_START_END 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_Y_START_END)
+#define HCODEC_QDCT_JPEG_QUANT_ADDR 0x1f28 	///../ucode/dos_register.h:7209
+#define P_HCODEC_QDCT_JPEG_QUANT_ADDR 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_QUANT_ADDR)
+#define HCODEC_QDCT_JPEG_QUANT_DATA 0x1f29 	///../ucode/dos_register.h:7210
+#define P_HCODEC_QDCT_JPEG_QUANT_DATA 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_QUANT_DATA)
+#define HCODEC_QDCT_JPEG_SOF_RESUME 0x1f2a 	///../ucode/dos_register.h:7211
+#define P_HCODEC_QDCT_JPEG_SOF_RESUME 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_SOF_RESUME)
+#define HCODEC_QDCT_JPEG_DCT_STATUS0 0x1f2b 	///../ucode/dos_register.h:7212
+#define P_HCODEC_QDCT_JPEG_DCT_STATUS0 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_STATUS0)
+#define HCODEC_QDCT_JPEG_DCT_STATUS1 0x1f2c 	///../ucode/dos_register.h:7213
+#define P_HCODEC_QDCT_JPEG_DCT_STATUS1 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_STATUS1)
+#define HCODEC_QDCT_JPEG_DCT_COEFF01 0x1f2d 	///../ucode/dos_register.h:7214
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF01 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF01)
+#define HCODEC_QDCT_JPEG_DCT_COEFF23 0x1f2e 	///../ucode/dos_register.h:7215
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF23 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF23)
+#define HCODEC_QDCT_JPEG_DCT_COEFF45 0x1f2f 	///../ucode/dos_register.h:7216
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF45 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF45)
+#define HCODEC_QDCT_JPEG_DCT_COEFF67 0x1f30 	///../ucode/dos_register.h:7217
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF67 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF67)
+#define HCODEC_QDCT_JPEG_DCT_COEFF89 0x1f31 	///../ucode/dos_register.h:7218
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF89 		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF89)
+#define HCODEC_IE_CONTROL 0x1f40 	///../ucode/dos_register.h:7229
+#define P_HCODEC_IE_CONTROL 		DOS_REG_ADDR(HCODEC_IE_CONTROL)
+#define HCODEC_IE_MB_POSITION 0x1f41 	///../ucode/dos_register.h:7232
+#define P_HCODEC_IE_MB_POSITION 		DOS_REG_ADDR(HCODEC_IE_MB_POSITION)
+#define HCODEC_IE_ME_MB_INFO 0x1f42 	///../ucode/dos_register.h:7237
+#define P_HCODEC_IE_ME_MB_INFO 		DOS_REG_ADDR(HCODEC_IE_ME_MB_INFO)
+#define HCODEC_SAD_CONTROL 0x1f43 	///../ucode/dos_register.h:7242
+#define P_HCODEC_SAD_CONTROL 		DOS_REG_ADDR(HCODEC_SAD_CONTROL)
+#define HCODEC_IE_RESULT_BUFFER 0x1f44 	///../ucode/dos_register.h:7249
+#define P_HCODEC_IE_RESULT_BUFFER 		DOS_REG_ADDR(HCODEC_IE_RESULT_BUFFER)
+#define HCODEC_IE_I4_PRED_MODE_HI 0x1f45 	///../ucode/dos_register.h:7251
+#define P_HCODEC_IE_I4_PRED_MODE_HI 		DOS_REG_ADDR(HCODEC_IE_I4_PRED_MODE_HI)
+#define HCODEC_IE_I4_PRED_MODE_LO 0x1f46 	///../ucode/dos_register.h:7252
+#define P_HCODEC_IE_I4_PRED_MODE_LO 		DOS_REG_ADDR(HCODEC_IE_I4_PRED_MODE_LO)
+#define HCODEC_IE_C_PRED_MODE 0x1f47 	///../ucode/dos_register.h:7256
+#define P_HCODEC_IE_C_PRED_MODE 		DOS_REG_ADDR(HCODEC_IE_C_PRED_MODE)
+#define HCODEC_IE_CUR_REF_SEL 0x1f48 	///../ucode/dos_register.h:7259
+#define P_HCODEC_IE_CUR_REF_SEL 		DOS_REG_ADDR(HCODEC_IE_CUR_REF_SEL)
+#define HCODEC_ME_CONTROL 0x1f49 	///../ucode/dos_register.h:7280
+#define P_HCODEC_ME_CONTROL 		DOS_REG_ADDR(HCODEC_ME_CONTROL)
+#define HCODEC_ME_START_POSITION 0x1f4a 	///../ucode/dos_register.h:7285
+#define P_HCODEC_ME_START_POSITION 		DOS_REG_ADDR(HCODEC_ME_START_POSITION)
+#define HCODEC_ME_STATUS 0x1f4b 	///../ucode/dos_register.h:7294
+#define P_HCODEC_ME_STATUS 		DOS_REG_ADDR(HCODEC_ME_STATUS)
+#define HCODEC_ME_DEBUG 0x1f4c 	///../ucode/dos_register.h:7301
+#define P_HCODEC_ME_DEBUG 		DOS_REG_ADDR(HCODEC_ME_DEBUG)
+#define HCODEC_ME_SKIP_LINE 0x1f4d 	///../ucode/dos_register.h:7307
+#define P_HCODEC_ME_SKIP_LINE 		DOS_REG_ADDR(HCODEC_ME_SKIP_LINE)
+#define HCODEC_ME_AB_MEM_CTL 0x1f4e 	///../ucode/dos_register.h:7312
+#define P_HCODEC_ME_AB_MEM_CTL 		DOS_REG_ADDR(HCODEC_ME_AB_MEM_CTL)
+#define HCODEC_ME_PIC_INFO 0x1f4f 	///../ucode/dos_register.h:7316
+#define P_HCODEC_ME_PIC_INFO 		DOS_REG_ADDR(HCODEC_ME_PIC_INFO)
+#define HCODEC_ME_SAD_ENOUGH_01 0x1f50 	///../ucode/dos_register.h:7319
+#define P_HCODEC_ME_SAD_ENOUGH_01 		DOS_REG_ADDR(HCODEC_ME_SAD_ENOUGH_01)
+#define HCODEC_ME_SAD_ENOUGH_23 0x1f51 	///../ucode/dos_register.h:7322
+#define P_HCODEC_ME_SAD_ENOUGH_23 		DOS_REG_ADDR(HCODEC_ME_SAD_ENOUGH_23)
+#define HCODEC_ME_STEP0_CLOSE_MV 0x1f52 	///../ucode/dos_register.h:7326
+#define P_HCODEC_ME_STEP0_CLOSE_MV 		DOS_REG_ADDR(HCODEC_ME_STEP0_CLOSE_MV)
+#define HCODEC_ME_F_SKIP_SAD 0x1f53 	///../ucode/dos_register.h:7331
+#define P_HCODEC_ME_F_SKIP_SAD 		DOS_REG_ADDR(HCODEC_ME_F_SKIP_SAD)
+#define HCODEC_ME_F_SKIP_WEIGHT 0x1f54 	///../ucode/dos_register.h:7336
+#define P_HCODEC_ME_F_SKIP_WEIGHT 		DOS_REG_ADDR(HCODEC_ME_F_SKIP_WEIGHT)
+#define HCODEC_ME_MV_MERGE_CTL 0x1f55 	///../ucode/dos_register.h:7355
+#define P_HCODEC_ME_MV_MERGE_CTL 		DOS_REG_ADDR(HCODEC_ME_MV_MERGE_CTL)
+#define HCODEC_ME_MV_WEIGHT_01 0x1f56 	///../ucode/dos_register.h:7360
+#define P_HCODEC_ME_MV_WEIGHT_01 		DOS_REG_ADDR(HCODEC_ME_MV_WEIGHT_01)
+#define HCODEC_ME_MV_WEIGHT_23 0x1f57 	///../ucode/dos_register.h:7365
+#define P_HCODEC_ME_MV_WEIGHT_23 		DOS_REG_ADDR(HCODEC_ME_MV_WEIGHT_23)
+#define HCODEC_ME_SAD_RANGE_INC 0x1f58 	///../ucode/dos_register.h:7370
+#define P_HCODEC_ME_SAD_RANGE_INC 		DOS_REG_ADDR(HCODEC_ME_SAD_RANGE_INC)
+#define HCODEC_ME_SUB_MERGE_CTL 0x1f59 	///../ucode/dos_register.h:7384
+#define P_HCODEC_ME_SUB_MERGE_CTL 		DOS_REG_ADDR(HCODEC_ME_SUB_MERGE_CTL)
+#define HCODEC_ME_SUB_REF_MV_CTL 0x1f5a 	///../ucode/dos_register.h:7391
+#define P_HCODEC_ME_SUB_REF_MV_CTL 		DOS_REG_ADDR(HCODEC_ME_SUB_REF_MV_CTL)
+#define HCODEC_ME_SUB_ANY_WEIGHT_SAD 0x1f5b 	///../ucode/dos_register.h:7396
+#define P_HCODEC_ME_SUB_ANY_WEIGHT_SAD 		DOS_REG_ADDR(HCODEC_ME_SUB_ANY_WEIGHT_SAD)
+#define HCODEC_ME_SUB_FIX_SAD 0x1f5c 	///../ucode/dos_register.h:7401
+#define P_HCODEC_ME_SUB_FIX_SAD 		DOS_REG_ADDR(HCODEC_ME_SUB_FIX_SAD)
+#define HCODEC_ME_SUB_FIX_MIN_SAD 0x1f5d 	///../ucode/dos_register.h:7406
+#define P_HCODEC_ME_SUB_FIX_MIN_SAD 		DOS_REG_ADDR(HCODEC_ME_SUB_FIX_MIN_SAD)
+#define HCODEC_ME_SUB_SNAP_GLITCH 0x1f5e 	///../ucode/dos_register.h:7412
+#define P_HCODEC_ME_SUB_SNAP_GLITCH 		DOS_REG_ADDR(HCODEC_ME_SUB_SNAP_GLITCH)
+#define HCODEC_ME_SUB_ACT_CTL 0x1f5f 	///../ucode/dos_register.h:7422
+#define P_HCODEC_ME_SUB_ACT_CTL 		DOS_REG_ADDR(HCODEC_ME_SUB_ACT_CTL)
+#define AO_RTI_STATUS_REG0 ((0x00 << 10) | (0x00 << 2)) 	///../ucode/c_always_on_pointer.h:13
+#define P_AO_RTI_STATUS_REG0 		AOBUS_REG_ADDR(AO_RTI_STATUS_REG0)
+#define AO_RTI_STATUS_REG1 ((0x00 << 10) | (0x01 << 2)) 	///../ucode/c_always_on_pointer.h:14
+#define P_AO_RTI_STATUS_REG1 		AOBUS_REG_ADDR(AO_RTI_STATUS_REG1)
+#define AO_RTI_STATUS_REG2 ((0x00 << 10) | (0x02 << 2)) 	///../ucode/c_always_on_pointer.h:15
+#define P_AO_RTI_STATUS_REG2 		AOBUS_REG_ADDR(AO_RTI_STATUS_REG2)
+#define AO_RTI_PWR_CNTL_REG1 ((0x00 << 10) | (0x03 << 2)) 	///../ucode/c_always_on_pointer.h:17
+#define P_AO_RTI_PWR_CNTL_REG1 		AOBUS_REG_ADDR(AO_RTI_PWR_CNTL_REG1)
+#define AO_RTI_PWR_CNTL_REG0 ((0x00 << 10) | (0x04 << 2)) 	///../ucode/c_always_on_pointer.h:18
+#define P_AO_RTI_PWR_CNTL_REG0 		AOBUS_REG_ADDR(AO_RTI_PWR_CNTL_REG0)
+#define AO_RTI_PIN_MUX_REG ((0x00 << 10) | (0x05 << 2)) 	///../ucode/c_always_on_pointer.h:19
+#define P_AO_RTI_PIN_MUX_REG 		AOBUS_REG_ADDR(AO_RTI_PIN_MUX_REG)
+#define AO_WD_GPIO_REG ((0x00 << 10) | (0x06 << 2)) 	///../ucode/c_always_on_pointer.h:21
+#define P_AO_WD_GPIO_REG 		AOBUS_REG_ADDR(AO_WD_GPIO_REG)
+#define AO_REMAP_REG0 ((0x00 << 10) | (0x07 << 2)) 	///../ucode/c_always_on_pointer.h:23
+#define P_AO_REMAP_REG0 		AOBUS_REG_ADDR(AO_REMAP_REG0)
+#define AO_REMAP_REG1 ((0x00 << 10) | (0x08 << 2)) 	///../ucode/c_always_on_pointer.h:24
+#define P_AO_REMAP_REG1 		AOBUS_REG_ADDR(AO_REMAP_REG1)
+#define AO_GPIO_O_EN_N ((0x00 << 10) | (0x09 << 2)) 	///../ucode/c_always_on_pointer.h:25
+#define P_AO_GPIO_O_EN_N 		AOBUS_REG_ADDR(AO_GPIO_O_EN_N)
+#define AO_GPIO_I ((0x00 << 10) | (0x0A << 2)) 	///../ucode/c_always_on_pointer.h:26
+#define P_AO_GPIO_I 		AOBUS_REG_ADDR(AO_GPIO_I)
+#define AO_RTI_PULL_UP_REG ((0x00 << 10) | (0x0B << 2)) 	///../ucode/c_always_on_pointer.h:28
+#define P_AO_RTI_PULL_UP_REG 		AOBUS_REG_ADDR(AO_RTI_PULL_UP_REG)
+#define AO_RTI_WD_MARK ((0x00 << 10) | (0x0D << 2)) 	///../ucode/c_always_on_pointer.h:31
+#define P_AO_RTI_WD_MARK 		AOBUS_REG_ADDR(AO_RTI_WD_MARK)
+#define AO_CPU_CNTL ((0x00 << 10) | (0x0E << 2)) 	///../ucode/c_always_on_pointer.h:33
+#define P_AO_CPU_CNTL 		AOBUS_REG_ADDR(AO_CPU_CNTL)
+#define AO_CPU_STAT ((0x00 << 10) | (0x0F << 2)) 	///../ucode/c_always_on_pointer.h:35
+#define P_AO_CPU_STAT 		AOBUS_REG_ADDR(AO_CPU_STAT)
+#define AO_RTI_GEN_CNTL_REG0 ((0x00 << 10) | (0x10 << 2)) 	///../ucode/c_always_on_pointer.h:38
+#define P_AO_RTI_GEN_CNTL_REG0 		AOBUS_REG_ADDR(AO_RTI_GEN_CNTL_REG0)
+#define AO_WATCHDOG_REG ((0x00 << 10) | (0x11 << 2)) 	///../ucode/c_always_on_pointer.h:39
+#define P_AO_WATCHDOG_REG 		AOBUS_REG_ADDR(AO_WATCHDOG_REG)
+#define AO_WATCHDOG_RESET ((0x00 << 10) | (0x12 << 2)) 	///../ucode/c_always_on_pointer.h:40
+#define P_AO_WATCHDOG_RESET 		AOBUS_REG_ADDR(AO_WATCHDOG_RESET)
+#define AO_TIMER_REG ((0x00 << 10) | (0x13 << 2)) 	///../ucode/c_always_on_pointer.h:42
+#define P_AO_TIMER_REG 		AOBUS_REG_ADDR(AO_TIMER_REG)
+#define AO_TIMERA_REG ((0x00 << 10) | (0x14 << 2)) 	///../ucode/c_always_on_pointer.h:43
+#define P_AO_TIMERA_REG 		AOBUS_REG_ADDR(AO_TIMERA_REG)
+#define AO_TIMERE_REG ((0x00 << 10) | (0x15 << 2)) 	///../ucode/c_always_on_pointer.h:44
+#define P_AO_TIMERE_REG 		AOBUS_REG_ADDR(AO_TIMERE_REG)
+#define AO_AHB2DDR_CNTL ((0x00 << 10) | (0x18 << 2)) 	///../ucode/c_always_on_pointer.h:46
+#define P_AO_AHB2DDR_CNTL 		AOBUS_REG_ADDR(AO_AHB2DDR_CNTL)
+#define AO_IRQ_MASK_FIQ_SEL ((0x00 << 10) | (0x20 << 2)) 	///../ucode/c_always_on_pointer.h:48
+#define P_AO_IRQ_MASK_FIQ_SEL 		AOBUS_REG_ADDR(AO_IRQ_MASK_FIQ_SEL)
+#define AO_IRQ_GPIO_REG ((0x00 << 10) | (0x21 << 2)) 	///../ucode/c_always_on_pointer.h:49
+#define P_AO_IRQ_GPIO_REG 		AOBUS_REG_ADDR(AO_IRQ_GPIO_REG)
+#define AO_IRQ_STAT ((0x00 << 10) | (0x22 << 2)) 	///../ucode/c_always_on_pointer.h:50
+#define P_AO_IRQ_STAT 		AOBUS_REG_ADDR(AO_IRQ_STAT)
+#define AO_IRQ_STAT_CLR ((0x00 << 10) | (0x23 << 2)) 	///../ucode/c_always_on_pointer.h:51
+#define P_AO_IRQ_STAT_CLR 		AOBUS_REG_ADDR(AO_IRQ_STAT_CLR)
+#define AO_DEBUG_REG0 ((0x00 << 10) | (0x28 << 2)) 	///../ucode/c_always_on_pointer.h:53
+#define P_AO_DEBUG_REG0 		AOBUS_REG_ADDR(AO_DEBUG_REG0)
+#define AO_DEBUG_REG1 ((0x00 << 10) | (0x29 << 2)) 	///../ucode/c_always_on_pointer.h:54
+#define P_AO_DEBUG_REG1 		AOBUS_REG_ADDR(AO_DEBUG_REG1)
+#define AO_DEBUG_REG2 ((0x00 << 10) | (0x2a << 2)) 	///../ucode/c_always_on_pointer.h:55
+#define P_AO_DEBUG_REG2 		AOBUS_REG_ADDR(AO_DEBUG_REG2)
+#define AO_DEBUG_REG3 ((0x00 << 10) | (0x2b << 2)) 	///../ucode/c_always_on_pointer.h:56
+#define P_AO_DEBUG_REG3 		AOBUS_REG_ADDR(AO_DEBUG_REG3)
+#define AO_IR_BLASTER_ADDR0 ((0x00 << 10) | (0x30 << 2)) 	///../ucode/c_always_on_pointer.h:58
+#define P_AO_IR_BLASTER_ADDR0 		AOBUS_REG_ADDR(AO_IR_BLASTER_ADDR0)
+#define AO_IR_BLASTER_ADDR1 ((0x00 << 10) | (0x31 << 2)) 	///../ucode/c_always_on_pointer.h:59
+#define P_AO_IR_BLASTER_ADDR1 		AOBUS_REG_ADDR(AO_IR_BLASTER_ADDR1)
+#define AO_IR_BLASTER_ADDR2 ((0x00 << 10) | (0x32 << 2)) 	///../ucode/c_always_on_pointer.h:60
+#define P_AO_IR_BLASTER_ADDR2 		AOBUS_REG_ADDR(AO_IR_BLASTER_ADDR2)
+#define AO_RTI_PWR_A9_CNTL0 ((0x00 << 10) | (0x38 << 2)) 	///../ucode/c_always_on_pointer.h:63
+#define P_AO_RTI_PWR_A9_CNTL0 		AOBUS_REG_ADDR(AO_RTI_PWR_A9_CNTL0)
+#define AO_RTI_PWR_A9_CNTL1 ((0x00 << 10) | (0x39 << 2)) 	///../ucode/c_always_on_pointer.h:64
+#define P_AO_RTI_PWR_A9_CNTL1 		AOBUS_REG_ADDR(AO_RTI_PWR_A9_CNTL1)
+#define AO_RTI_GEN_PWR_SLEEP0 ((0x00 << 10) | (0x3a << 2)) 	///../ucode/c_always_on_pointer.h:65
+#define P_AO_RTI_GEN_PWR_SLEEP0 		AOBUS_REG_ADDR(AO_RTI_GEN_PWR_SLEEP0)
+#define AO_RTI_GEN_PWR_ISO0 ((0x00 << 10) | (0x3b << 2)) 	///../ucode/c_always_on_pointer.h:66
+#define P_AO_RTI_GEN_PWR_ISO0 		AOBUS_REG_ADDR(AO_RTI_GEN_PWR_ISO0)
+#define AO_RTI_GEN_PWR_ACK0 ((0x00 << 10) | (0x3c << 2)) 	///../ucode/c_always_on_pointer.h:67
+#define P_AO_RTI_GEN_PWR_ACK0 		AOBUS_REG_ADDR(AO_RTI_GEN_PWR_ACK0)
+#define AO_RTI_PWR_A9_MEM_PD0 ((0x00 << 10) | (0x3d << 2)) 	///../ucode/c_always_on_pointer.h:68
+#define P_AO_RTI_PWR_A9_MEM_PD0 		AOBUS_REG_ADDR(AO_RTI_PWR_A9_MEM_PD0)
+#define AO_RTI_PWR_A9_MEM_PD1 ((0x00 << 10) | (0x3e << 2)) 	///../ucode/c_always_on_pointer.h:69
+#define P_AO_RTI_PWR_A9_MEM_PD1 		AOBUS_REG_ADDR(AO_RTI_PWR_A9_MEM_PD1)
+#define AO_CEC_GEN_CNTL ((0x00 << 10) | (0x40 << 2)) 	///../ucode/c_always_on_pointer.h:72
+#define P_AO_CEC_GEN_CNTL 		AOBUS_REG_ADDR(AO_CEC_GEN_CNTL)
+#define AO_CEC_RW_REG ((0x00 << 10) | (0x41 << 2)) 	///../ucode/c_always_on_pointer.h:73
+#define P_AO_CEC_RW_REG 		AOBUS_REG_ADDR(AO_CEC_RW_REG)
+#define AO_CEC_INTR_MASKN ((0x00 << 10) | (0x42 << 2)) 	///../ucode/c_always_on_pointer.h:74
+#define P_AO_CEC_INTR_MASKN 		AOBUS_REG_ADDR(AO_CEC_INTR_MASKN)
+#define AO_CEC_INTR_CLR ((0x00 << 10) | (0x43 << 2)) 	///../ucode/c_always_on_pointer.h:75
+#define P_AO_CEC_INTR_CLR 		AOBUS_REG_ADDR(AO_CEC_INTR_CLR)
+#define AO_CEC_INTR_STAT ((0x00 << 10) | (0x44 << 2)) 	///../ucode/c_always_on_pointer.h:76
+#define P_AO_CEC_INTR_STAT 		AOBUS_REG_ADDR(AO_CEC_INTR_STAT)
+#define AO_IR_DEC_LDR_ACTIVE ((0x01 << 10) | (0x20 << 2)) 	///../ucode/c_always_on_pointer.h:81
+#define P_AO_IR_DEC_LDR_ACTIVE 		AOBUS_REG_ADDR(AO_IR_DEC_LDR_ACTIVE)
+#define AO_IR_DEC_LDR_IDLE ((0x01 << 10) | (0x21 << 2)) 	///../ucode/c_always_on_pointer.h:82
+#define P_AO_IR_DEC_LDR_IDLE 		AOBUS_REG_ADDR(AO_IR_DEC_LDR_IDLE)
+#define AO_IR_DEC_LDR_REPEAT ((0x01 << 10) | (0x22 << 2)) 	///../ucode/c_always_on_pointer.h:83
+#define P_AO_IR_DEC_LDR_REPEAT 		AOBUS_REG_ADDR(AO_IR_DEC_LDR_REPEAT)
+#define AO_IR_DEC_BIT_0 ((0x01 << 10) | (0x23 << 2)) 	///../ucode/c_always_on_pointer.h:84
+#define P_AO_IR_DEC_BIT_0 		AOBUS_REG_ADDR(AO_IR_DEC_BIT_0)
+#define AO_IR_DEC_REG0 ((0x01 << 10) | (0x24 << 2)) 	///../ucode/c_always_on_pointer.h:85
+#define P_AO_IR_DEC_REG0 		AOBUS_REG_ADDR(AO_IR_DEC_REG0)
+#define AO_IR_DEC_FRAME ((0x01 << 10) | (0x25 << 2)) 	///../ucode/c_always_on_pointer.h:86
+#define P_AO_IR_DEC_FRAME 		AOBUS_REG_ADDR(AO_IR_DEC_FRAME)
+#define AO_IR_DEC_STATUS ((0x01 << 10) | (0x26 << 2)) 	///../ucode/c_always_on_pointer.h:87
+#define P_AO_IR_DEC_STATUS 		AOBUS_REG_ADDR(AO_IR_DEC_STATUS)
+#define AO_IR_DEC_REG1 ((0x01 << 10) | (0x27 << 2)) 	///../ucode/c_always_on_pointer.h:88
+#define P_AO_IR_DEC_REG1 		AOBUS_REG_ADDR(AO_IR_DEC_REG1)
+#define AO_UART_WFIFO ((0x01 << 10) | (0x30 << 2)) 	///../ucode/c_always_on_pointer.h:93
+#define P_AO_UART_WFIFO 		AOBUS_REG_ADDR(AO_UART_WFIFO)
+#define AO_UART_RFIFO ((0x01 << 10) | (0x31 << 2)) 	///../ucode/c_always_on_pointer.h:94
+#define P_AO_UART_RFIFO 		AOBUS_REG_ADDR(AO_UART_RFIFO)
+#define AO_UART_CONTROL ((0x01 << 10) | (0x32 << 2)) 	///../ucode/c_always_on_pointer.h:95
+#define P_AO_UART_CONTROL 		AOBUS_REG_ADDR(AO_UART_CONTROL)
+#define AO_UART_STATUS ((0x01 << 10) | (0x33 << 2)) 	///../ucode/c_always_on_pointer.h:96
+#define P_AO_UART_STATUS 		AOBUS_REG_ADDR(AO_UART_STATUS)
+#define AO_UART_MISC ((0x01 << 10) | (0x34 << 2)) 	///../ucode/c_always_on_pointer.h:97
+#define P_AO_UART_MISC 		AOBUS_REG_ADDR(AO_UART_MISC)
+#define AO_UART_REG5 ((0x01 << 10) | (0x35 << 2)) 	///../ucode/c_always_on_pointer.h:98
+#define P_AO_UART_REG5 		AOBUS_REG_ADDR(AO_UART_REG5)
+#define AO_UART2_WFIFO ((0x01 << 10) | (0x38 << 2)) 	///../ucode/c_always_on_pointer.h:103
+#define P_AO_UART2_WFIFO 		AOBUS_REG_ADDR(AO_UART2_WFIFO)
+#define AO_UART2_RFIFO ((0x01 << 10) | (0x39 << 2)) 	///../ucode/c_always_on_pointer.h:104
+#define P_AO_UART2_RFIFO 		AOBUS_REG_ADDR(AO_UART2_RFIFO)
+#define AO_UART2_CONTROL ((0x01 << 10) | (0x3a << 2)) 	///../ucode/c_always_on_pointer.h:105
+#define P_AO_UART2_CONTROL 		AOBUS_REG_ADDR(AO_UART2_CONTROL)
+#define AO_UART2_STATUS ((0x01 << 10) | (0x3b << 2)) 	///../ucode/c_always_on_pointer.h:106
+#define P_AO_UART2_STATUS 		AOBUS_REG_ADDR(AO_UART2_STATUS)
+#define AO_UART2_MISC ((0x01 << 10) | (0x3c << 2)) 	///../ucode/c_always_on_pointer.h:107
+#define P_AO_UART2_MISC 		AOBUS_REG_ADDR(AO_UART2_MISC)
+#define AO_UART2_REG5 ((0x01 << 10) | (0x3d << 2)) 	///../ucode/c_always_on_pointer.h:108
+#define P_AO_UART2_REG5 		AOBUS_REG_ADDR(AO_UART2_REG5)
+#define AO_I2C_M_0_CONTROL_REG ((0x01 << 10) | (0x40 << 2)) 	///../ucode/c_always_on_pointer.h:113
+#define P_AO_I2C_M_0_CONTROL_REG 		AOBUS_REG_ADDR(AO_I2C_M_0_CONTROL_REG)
+#define AO_I2C_M_0_SLAVE_ADDR ((0x01 << 10) | (0x41 << 2)) 	///../ucode/c_always_on_pointer.h:114
+#define P_AO_I2C_M_0_SLAVE_ADDR 		AOBUS_REG_ADDR(AO_I2C_M_0_SLAVE_ADDR)
+#define AO_I2C_M_0_TOKEN_LIST0 ((0x01 << 10) | (0x42 << 2)) 	///../ucode/c_always_on_pointer.h:115
+#define P_AO_I2C_M_0_TOKEN_LIST0 		AOBUS_REG_ADDR(AO_I2C_M_0_TOKEN_LIST0)
+#define AO_I2C_M_0_TOKEN_LIST1 ((0x01 << 10) | (0x43 << 2)) 	///../ucode/c_always_on_pointer.h:116
+#define P_AO_I2C_M_0_TOKEN_LIST1 		AOBUS_REG_ADDR(AO_I2C_M_0_TOKEN_LIST1)
+#define AO_I2C_M_0_WDATA_REG0 ((0x01 << 10) | (0x44 << 2)) 	///../ucode/c_always_on_pointer.h:117
+#define P_AO_I2C_M_0_WDATA_REG0 		AOBUS_REG_ADDR(AO_I2C_M_0_WDATA_REG0)
+#define AO_I2C_M_0_WDATA_REG1 ((0x01 << 10) | (0x45 << 2)) 	///../ucode/c_always_on_pointer.h:118
+#define P_AO_I2C_M_0_WDATA_REG1 		AOBUS_REG_ADDR(AO_I2C_M_0_WDATA_REG1)
+#define AO_I2C_M_0_RDATA_REG0 ((0x01 << 10) | (0x46 << 2)) 	///../ucode/c_always_on_pointer.h:119
+#define P_AO_I2C_M_0_RDATA_REG0 		AOBUS_REG_ADDR(AO_I2C_M_0_RDATA_REG0)
+#define AO_I2C_M_0_RDATA_REG1 ((0x01 << 10) | (0x47 << 2)) 	///../ucode/c_always_on_pointer.h:120
+#define P_AO_I2C_M_0_RDATA_REG1 		AOBUS_REG_ADDR(AO_I2C_M_0_RDATA_REG1)
+#define AO_I2C_S_CONTROL_REG ((0x01 << 10) | (0x50 << 2)) 	///../ucode/c_always_on_pointer.h:124
+#define P_AO_I2C_S_CONTROL_REG 		AOBUS_REG_ADDR(AO_I2C_S_CONTROL_REG)
+#define AO_I2C_S_SEND_REG ((0x01 << 10) | (0x51 << 2)) 	///../ucode/c_always_on_pointer.h:125
+#define P_AO_I2C_S_SEND_REG 		AOBUS_REG_ADDR(AO_I2C_S_SEND_REG)
+#define AO_I2C_S_RECV_REG ((0x01 << 10) | (0x52 << 2)) 	///../ucode/c_always_on_pointer.h:126
+#define P_AO_I2C_S_RECV_REG 		AOBUS_REG_ADDR(AO_I2C_S_RECV_REG)
+#define AO_I2C_S_CNTL1_REG ((0x01 << 10) | (0x53 << 2)) 	///../ucode/c_always_on_pointer.h:127
+#define P_AO_I2C_S_CNTL1_REG 		AOBUS_REG_ADDR(AO_I2C_S_CNTL1_REG)
+#define AO_RTC_ADDR0 ((0x01 << 10) | (0xd0 << 2)) 	///../ucode/c_always_on_pointer.h:139
+#define P_AO_RTC_ADDR0 		AOBUS_REG_ADDR(AO_RTC_ADDR0)
+#define AO_RTC_ADDR1 ((0x01 << 10) | (0xd1 << 2)) 	///../ucode/c_always_on_pointer.h:140
+#define P_AO_RTC_ADDR1 		AOBUS_REG_ADDR(AO_RTC_ADDR1)
+#define AO_RTC_ADDR2 ((0x01 << 10) | (0xd2 << 2)) 	///../ucode/c_always_on_pointer.h:141
+#define P_AO_RTC_ADDR2 		AOBUS_REG_ADDR(AO_RTC_ADDR2)
+#define AO_RTC_ADDR3 ((0x01 << 10) | (0xd3 << 2)) 	///../ucode/c_always_on_pointer.h:142
+#define P_AO_RTC_ADDR3 		AOBUS_REG_ADDR(AO_RTC_ADDR3)
+#define AO_RTC_ADDR4 ((0x01 << 10) | (0xd4 << 2)) 	///../ucode/c_always_on_pointer.h:143
+#define P_AO_RTC_ADDR4 		AOBUS_REG_ADDR(AO_RTC_ADDR4)
+#define AO_MF_IR_DEC_LDR_ACTIVE ((0x01 << 10) | (0x60 << 2)) 	///../ucode/c_always_on_pointer.h:145
+#define P_AO_MF_IR_DEC_LDR_ACTIVE 		AOBUS_REG_ADDR(AO_MF_IR_DEC_LDR_ACTIVE)
+#define AO_MF_IR_DEC_LDR_IDLE ((0x01 << 10) | (0x61 << 2)) 	///../ucode/c_always_on_pointer.h:146
+#define P_AO_MF_IR_DEC_LDR_IDLE 		AOBUS_REG_ADDR(AO_MF_IR_DEC_LDR_IDLE)
+#define AO_MF_IR_DEC_LDR_REPEAT ((0x01 << 10) | (0x62 << 2)) 	///../ucode/c_always_on_pointer.h:147
+#define P_AO_MF_IR_DEC_LDR_REPEAT 		AOBUS_REG_ADDR(AO_MF_IR_DEC_LDR_REPEAT)
+#define AO_MF_IR_DEC_BIT_0 ((0x01 << 10) | (0x63 << 2)) 	///../ucode/c_always_on_pointer.h:148
+#define P_AO_MF_IR_DEC_BIT_0 		AOBUS_REG_ADDR(AO_MF_IR_DEC_BIT_0)
+#define AO_MF_IR_DEC_REG0 ((0x01 << 10) | (0x64 << 2)) 	///../ucode/c_always_on_pointer.h:149
+#define P_AO_MF_IR_DEC_REG0 		AOBUS_REG_ADDR(AO_MF_IR_DEC_REG0)
+#define AO_MF_IR_DEC_FRAME ((0x01 << 10) | (0x65 << 2)) 	///../ucode/c_always_on_pointer.h:150
+#define P_AO_MF_IR_DEC_FRAME 		AOBUS_REG_ADDR(AO_MF_IR_DEC_FRAME)
+#define AO_MF_IR_DEC_STATUS ((0x01 << 10) | (0x66 << 2)) 	///../ucode/c_always_on_pointer.h:151
+#define P_AO_MF_IR_DEC_STATUS 		AOBUS_REG_ADDR(AO_MF_IR_DEC_STATUS)
+#define AO_MF_IR_DEC_REG1 ((0x01 << 10) | (0x67 << 2)) 	///../ucode/c_always_on_pointer.h:152
+#define P_AO_MF_IR_DEC_REG1 		AOBUS_REG_ADDR(AO_MF_IR_DEC_REG1)
+#define AO_MF_IR_DEC_REG2 ((0x01 << 10) | (0x68 << 2)) 	///../ucode/c_always_on_pointer.h:153
+#define P_AO_MF_IR_DEC_REG2 		AOBUS_REG_ADDR(AO_MF_IR_DEC_REG2)
+#define AO_MF_IR_DEC_DURATN2 ((0x01 << 10) | (0x69 << 2)) 	///../ucode/c_always_on_pointer.h:154
+#define P_AO_MF_IR_DEC_DURATN2 		AOBUS_REG_ADDR(AO_MF_IR_DEC_DURATN2)
+#define AO_MF_IR_DEC_DURATN3 ((0x01 << 10) | (0x6a << 2)) 	///../ucode/c_always_on_pointer.h:155
+#define P_AO_MF_IR_DEC_DURATN3 		AOBUS_REG_ADDR(AO_MF_IR_DEC_DURATN3)
+#define AO_MF_IR_DEC_FRAME1 ((0x01 << 10) | (0x6b << 2)) 	///../ucode/c_always_on_pointer.h:156
+#define P_AO_MF_IR_DEC_FRAME1 		AOBUS_REG_ADDR(AO_MF_IR_DEC_FRAME1)
+#define AM_DDR_PLL_CNTL 0x0400 	///../ucode/ddr3_reg.h:1
+#define P_AM_DDR_PLL_CNTL 		MMC_REG_ADDR(AM_DDR_PLL_CNTL)
+#define AM_DDR_PLL_CNTL1 0x0404 	///../ucode/ddr3_reg.h:2
+#define P_AM_DDR_PLL_CNTL1 		MMC_REG_ADDR(AM_DDR_PLL_CNTL1)
+#define AM_DDR_PLL_CNTL2 0x0408 	///../ucode/ddr3_reg.h:3
+#define P_AM_DDR_PLL_CNTL2 		MMC_REG_ADDR(AM_DDR_PLL_CNTL2)
+#define AM_DDR_PLL_CNTL3 0x040c 	///../ucode/ddr3_reg.h:4
+#define P_AM_DDR_PLL_CNTL3 		MMC_REG_ADDR(AM_DDR_PLL_CNTL3)
+#define AM_DDR_PLL_CNTL4 0x0410 	///../ucode/ddr3_reg.h:5
+#define P_AM_DDR_PLL_CNTL4 		MMC_REG_ADDR(AM_DDR_PLL_CNTL4)
+#define AM_DDR_PLL_STS 0x0414 	///../ucode/ddr3_reg.h:6
+#define P_AM_DDR_PLL_STS 		MMC_REG_ADDR(AM_DDR_PLL_STS)
+#define DDR_CLK_CNTL 0x0418 	///../ucode/ddr3_reg.h:10
+#define P_DDR_CLK_CNTL 		MMC_REG_ADDR(DDR_CLK_CNTL)
+#define DDR_CLK_STS 0x041c 	///../ucode/ddr3_reg.h:30
+#define P_DDR_CLK_STS 		MMC_REG_ADDR(DDR_CLK_STS)
+#define DDR0_CLK_CTRL 0x0800 	///../ucode/ddr3_reg.h:34
+#define P_DDR0_CLK_CTRL 		MMC_REG_ADDR(DDR0_CLK_CTRL)
+#define DDR0_SOFT_RESET 0x0804 	///../ucode/ddr3_reg.h:45
+#define P_DDR0_SOFT_RESET 		MMC_REG_ADDR(DDR0_SOFT_RESET)
+#define DDR0_APD_CTRL 0x0808 	///../ucode/ddr3_reg.h:50
+#define P_DDR0_APD_CTRL 		MMC_REG_ADDR(DDR0_APD_CTRL)
+#define DDR0_PCTL_SCFG 0x0000 	///../ucode/ddr3_reg.h:54
+#define P_DDR0_PCTL_SCFG 		MMC_REG_ADDR(DDR0_PCTL_SCFG)
+#define DDR0_PCTL_SCTL 0x0004 	///../ucode/ddr3_reg.h:55
+#define P_DDR0_PCTL_SCTL 		MMC_REG_ADDR(DDR0_PCTL_SCTL)
+#define DDR0_PCTL_STAT 0x0008 	///../ucode/ddr3_reg.h:56
+#define P_DDR0_PCTL_STAT 		MMC_REG_ADDR(DDR0_PCTL_STAT)
+#define DDR0_PCTL_INTRSTAT 0x000c 	///../ucode/ddr3_reg.h:57
+#define P_DDR0_PCTL_INTRSTAT 		MMC_REG_ADDR(DDR0_PCTL_INTRSTAT)
+#define DDR0_PCTL_POWSTAT 0x0048 	///../ucode/ddr3_reg.h:58
+#define P_DDR0_PCTL_POWSTAT 		MMC_REG_ADDR(DDR0_PCTL_POWSTAT)
+#define DDR0_PCTL_MRRSTAT0 0x0064 	///../ucode/ddr3_reg.h:59
+#define P_DDR0_PCTL_MRRSTAT0 		MMC_REG_ADDR(DDR0_PCTL_MRRSTAT0)
+#define DDR0_PCTL_CMDTSTAT 0x004c 	///../ucode/ddr3_reg.h:60
+#define P_DDR0_PCTL_CMDTSTAT 		MMC_REG_ADDR(DDR0_PCTL_CMDTSTAT)
+#define DDR0_PCTL_MCMD 0x0040 	///../ucode/ddr3_reg.h:61
+#define P_DDR0_PCTL_MCMD 		MMC_REG_ADDR(DDR0_PCTL_MCMD)
+#define DDR0_PCTL_MRRSTAT1 0x0068 	///../ucode/ddr3_reg.h:62
+#define P_DDR0_PCTL_MRRSTAT1 		MMC_REG_ADDR(DDR0_PCTL_MRRSTAT1)
+#define DDR0_PCTL_MRRCFG0 0x0060 	///../ucode/ddr3_reg.h:63
+#define P_DDR0_PCTL_MRRCFG0 		MMC_REG_ADDR(DDR0_PCTL_MRRCFG0)
+#define DDR0_PCTL_CMDTSTATEN 0x0050 	///../ucode/ddr3_reg.h:64
+#define P_DDR0_PCTL_CMDTSTATEN 		MMC_REG_ADDR(DDR0_PCTL_CMDTSTATEN)
+#define DDR0_PCTL_POWCTL 0x0044 	///../ucode/ddr3_reg.h:65
+#define P_DDR0_PCTL_POWCTL 		MMC_REG_ADDR(DDR0_PCTL_POWCTL)
+#define DDR0_PCTL_PPCFG 0x0084 	///../ucode/ddr3_reg.h:66
+#define P_DDR0_PCTL_PPCFG 		MMC_REG_ADDR(DDR0_PCTL_PPCFG)
+#define DDR0_PCTL_LPDDR23ZQCFG 0x008c 	///../ucode/ddr3_reg.h:67
+#define P_DDR0_PCTL_LPDDR23ZQCFG 		MMC_REG_ADDR(DDR0_PCTL_LPDDR23ZQCFG)
+#define DDR0_PCTL_MCFG1 0x007c 	///../ucode/ddr3_reg.h:68
+#define P_DDR0_PCTL_MCFG1 		MMC_REG_ADDR(DDR0_PCTL_MCFG1)
+#define DDR0_PCTL_MSTAT 0x0088 	///../ucode/ddr3_reg.h:69
+#define P_DDR0_PCTL_MSTAT 		MMC_REG_ADDR(DDR0_PCTL_MSTAT)
+#define DDR0_PCTL_MCFG 0x0080 	///../ucode/ddr3_reg.h:70
+#define P_DDR0_PCTL_MCFG 		MMC_REG_ADDR(DDR0_PCTL_MCFG)
+#define DDR0_PCTL_DTUAWDT 0x00b0 	///../ucode/ddr3_reg.h:71
+#define P_DDR0_PCTL_DTUAWDT 		MMC_REG_ADDR(DDR0_PCTL_DTUAWDT)
+#define DDR0_PCTL_DTUPRD2 0x00a8 	///../ucode/ddr3_reg.h:72
+#define P_DDR0_PCTL_DTUPRD2 		MMC_REG_ADDR(DDR0_PCTL_DTUPRD2)
+#define DDR0_PCTL_DTUPRD3 0x00ac 	///../ucode/ddr3_reg.h:73
+#define P_DDR0_PCTL_DTUPRD3 		MMC_REG_ADDR(DDR0_PCTL_DTUPRD3)
+#define DDR0_PCTL_DTUNE 0x009c 	///../ucode/ddr3_reg.h:74
+#define P_DDR0_PCTL_DTUNE 		MMC_REG_ADDR(DDR0_PCTL_DTUNE)
+#define DDR0_PCTL_DTUPDES 0x0094 	///../ucode/ddr3_reg.h:75
+#define P_DDR0_PCTL_DTUPDES 		MMC_REG_ADDR(DDR0_PCTL_DTUPDES)
+#define DDR0_PCTL_DTUNA 0x0098 	///../ucode/ddr3_reg.h:76
+#define P_DDR0_PCTL_DTUNA 		MMC_REG_ADDR(DDR0_PCTL_DTUNA)
+#define DDR0_PCTL_DTUPRD0 0x00a0 	///../ucode/ddr3_reg.h:77
+#define P_DDR0_PCTL_DTUPRD0 		MMC_REG_ADDR(DDR0_PCTL_DTUPRD0)
+#define DDR0_PCTL_DTUPRD1 0x00a4 	///../ucode/ddr3_reg.h:78
+#define P_DDR0_PCTL_DTUPRD1 		MMC_REG_ADDR(DDR0_PCTL_DTUPRD1)
+#define DDR0_PCTL_TCKSRE 0x0124 	///../ucode/ddr3_reg.h:79
+#define P_DDR0_PCTL_TCKSRE 		MMC_REG_ADDR(DDR0_PCTL_TCKSRE)
+#define DDR0_PCTL_TZQCSI 0x011c 	///../ucode/ddr3_reg.h:80
+#define P_DDR0_PCTL_TZQCSI 		MMC_REG_ADDR(DDR0_PCTL_TZQCSI)
+#define DDR0_PCTL_TINIT 0x00c4 	///../ucode/ddr3_reg.h:81
+#define P_DDR0_PCTL_TINIT 		MMC_REG_ADDR(DDR0_PCTL_TINIT)
+#define DDR0_PCTL_TDPD 0x0144 	///../ucode/ddr3_reg.h:82
+#define P_DDR0_PCTL_TDPD 		MMC_REG_ADDR(DDR0_PCTL_TDPD)
+#define DDR0_PCTL_TOGCNT1U 0x00c0 	///../ucode/ddr3_reg.h:83
+#define P_DDR0_PCTL_TOGCNT1U 		MMC_REG_ADDR(DDR0_PCTL_TOGCNT1U)
+#define DDR0_PCTL_TCKE 0x012c 	///../ucode/ddr3_reg.h:84
+#define P_DDR0_PCTL_TCKE 		MMC_REG_ADDR(DDR0_PCTL_TCKE)
+#define DDR0_PCTL_TMOD 0x0130 	///../ucode/ddr3_reg.h:85
+#define P_DDR0_PCTL_TMOD 		MMC_REG_ADDR(DDR0_PCTL_TMOD)
+#define DDR0_PCTL_TEXSR 0x010c 	///../ucode/ddr3_reg.h:86
+#define P_DDR0_PCTL_TEXSR 		MMC_REG_ADDR(DDR0_PCTL_TEXSR)
+#define DDR0_PCTL_TAL 0x00e4 	///../ucode/ddr3_reg.h:87
+#define P_DDR0_PCTL_TAL 		MMC_REG_ADDR(DDR0_PCTL_TAL)
+#define DDR0_PCTL_TRTP 0x0100 	///../ucode/ddr3_reg.h:88
+#define P_DDR0_PCTL_TRTP 		MMC_REG_ADDR(DDR0_PCTL_TRTP)
+#define DDR0_PCTL_TCKSRX 0x0128 	///../ucode/ddr3_reg.h:89
+#define P_DDR0_PCTL_TCKSRX 		MMC_REG_ADDR(DDR0_PCTL_TCKSRX)
+#define DDR0_PCTL_TRTW 0x00e0 	///../ucode/ddr3_reg.h:90
+#define P_DDR0_PCTL_TRTW 		MMC_REG_ADDR(DDR0_PCTL_TRTW)
+#define DDR0_PCTL_TCWL 0x00ec 	///../ucode/ddr3_reg.h:91
+#define P_DDR0_PCTL_TCWL 		MMC_REG_ADDR(DDR0_PCTL_TCWL)
+#define DDR0_PCTL_TWR 0x0104 	///../ucode/ddr3_reg.h:92
+#define P_DDR0_PCTL_TWR 		MMC_REG_ADDR(DDR0_PCTL_TWR)
+#define DDR0_PCTL_TCL 0x00e8 	///../ucode/ddr3_reg.h:93
+#define P_DDR0_PCTL_TCL 		MMC_REG_ADDR(DDR0_PCTL_TCL)
+#define DDR0_PCTL_TDQS 0x0120 	///../ucode/ddr3_reg.h:94
+#define P_DDR0_PCTL_TDQS 		MMC_REG_ADDR(DDR0_PCTL_TDQS)
+#define DDR0_PCTL_TRSTH 0x00c8 	///../ucode/ddr3_reg.h:95
+#define P_DDR0_PCTL_TRSTH 		MMC_REG_ADDR(DDR0_PCTL_TRSTH)
+#define DDR0_PCTL_TRCD 0x00f8 	///../ucode/ddr3_reg.h:96
+#define P_DDR0_PCTL_TRCD 		MMC_REG_ADDR(DDR0_PCTL_TRCD)
+#define DDR0_PCTL_TXP 0x0110 	///../ucode/ddr3_reg.h:97
+#define P_DDR0_PCTL_TXP 		MMC_REG_ADDR(DDR0_PCTL_TXP)
+#define DDR0_PCTL_TOGCNT100N 0x00cc 	///../ucode/ddr3_reg.h:98
+#define P_DDR0_PCTL_TOGCNT100N 		MMC_REG_ADDR(DDR0_PCTL_TOGCNT100N)
+#define DDR0_PCTL_TMRD 0x00d4 	///../ucode/ddr3_reg.h:99
+#define P_DDR0_PCTL_TMRD 		MMC_REG_ADDR(DDR0_PCTL_TMRD)
+#define DDR0_PCTL_TRSTL 0x0134 	///../ucode/ddr3_reg.h:100
+#define P_DDR0_PCTL_TRSTL 		MMC_REG_ADDR(DDR0_PCTL_TRSTL)
+#define DDR0_PCTL_TREFI 0x00d0 	///../ucode/ddr3_reg.h:101
+#define P_DDR0_PCTL_TREFI 		MMC_REG_ADDR(DDR0_PCTL_TREFI)
+#define DDR0_PCTL_TRAS 0x00f0 	///../ucode/ddr3_reg.h:102
+#define P_DDR0_PCTL_TRAS 		MMC_REG_ADDR(DDR0_PCTL_TRAS)
+#define DDR0_PCTL_TREFI_MEM_DDR3 0x0148 	///../ucode/ddr3_reg.h:103
+#define P_DDR0_PCTL_TREFI_MEM_DDR3 		MMC_REG_ADDR(DDR0_PCTL_TREFI_MEM_DDR3)
+#define DDR0_PCTL_TWTR 0x0108 	///../ucode/ddr3_reg.h:104
+#define P_DDR0_PCTL_TWTR 		MMC_REG_ADDR(DDR0_PCTL_TWTR)
+#define DDR0_PCTL_TRC 0x00f4 	///../ucode/ddr3_reg.h:105
+#define P_DDR0_PCTL_TRC 		MMC_REG_ADDR(DDR0_PCTL_TRC)
+#define DDR0_PCTL_TRFC 0x00d8 	///../ucode/ddr3_reg.h:106
+#define P_DDR0_PCTL_TRFC 		MMC_REG_ADDR(DDR0_PCTL_TRFC)
+#define DDR0_PCTL_TMRR 0x013c 	///../ucode/ddr3_reg.h:107
+#define P_DDR0_PCTL_TMRR 		MMC_REG_ADDR(DDR0_PCTL_TMRR)
+#define DDR0_PCTL_TCKESR 0x0140 	///../ucode/ddr3_reg.h:108
+#define P_DDR0_PCTL_TCKESR 		MMC_REG_ADDR(DDR0_PCTL_TCKESR)
+#define DDR0_PCTL_TZQCL 0x0138 	///../ucode/ddr3_reg.h:109
+#define P_DDR0_PCTL_TZQCL 		MMC_REG_ADDR(DDR0_PCTL_TZQCL)
+#define DDR0_PCTL_TRRD 0x00fc 	///../ucode/ddr3_reg.h:110
+#define P_DDR0_PCTL_TRRD 		MMC_REG_ADDR(DDR0_PCTL_TRRD)
+#define DDR0_PCTL_TRP 0x00dc 	///../ucode/ddr3_reg.h:111
+#define P_DDR0_PCTL_TRP 		MMC_REG_ADDR(DDR0_PCTL_TRP)
+#define DDR0_PCTL_TZQCS 0x0118 	///../ucode/ddr3_reg.h:112
+#define P_DDR0_PCTL_TZQCS 		MMC_REG_ADDR(DDR0_PCTL_TZQCS)
+#define DDR0_PCTL_TXPDLL 0x0114 	///../ucode/ddr3_reg.h:113
+#define P_DDR0_PCTL_TXPDLL 		MMC_REG_ADDR(DDR0_PCTL_TXPDLL)
+#define DDR0_PCTL_ECCCFG 0x0180 	///../ucode/ddr3_reg.h:114
+#define P_DDR0_PCTL_ECCCFG 		MMC_REG_ADDR(DDR0_PCTL_ECCCFG)
+#define DDR0_PCTL_ECCLOG 0x018c 	///../ucode/ddr3_reg.h:115
+#define P_DDR0_PCTL_ECCLOG 		MMC_REG_ADDR(DDR0_PCTL_ECCLOG)
+#define DDR0_PCTL_ECCCLR 0x0188 	///../ucode/ddr3_reg.h:116
+#define P_DDR0_PCTL_ECCCLR 		MMC_REG_ADDR(DDR0_PCTL_ECCCLR)
+#define DDR0_PCTL_ECCTST 0x0184 	///../ucode/ddr3_reg.h:117
+#define P_DDR0_PCTL_ECCTST 		MMC_REG_ADDR(DDR0_PCTL_ECCTST)
+#define DDR0_PCTL_DTUWD0 0x0210 	///../ucode/ddr3_reg.h:118
+#define P_DDR0_PCTL_DTUWD0 		MMC_REG_ADDR(DDR0_PCTL_DTUWD0)
+#define DDR0_PCTL_DTUWD1 0x0214 	///../ucode/ddr3_reg.h:119
+#define P_DDR0_PCTL_DTUWD1 		MMC_REG_ADDR(DDR0_PCTL_DTUWD1)
+#define DDR0_PCTL_DTUWACTL 0x0200 	///../ucode/ddr3_reg.h:120
+#define P_DDR0_PCTL_DTUWACTL 		MMC_REG_ADDR(DDR0_PCTL_DTUWACTL)
+#define DDR0_PCTL_DTULFSRRD 0x0238 	///../ucode/ddr3_reg.h:121
+#define P_DDR0_PCTL_DTULFSRRD 		MMC_REG_ADDR(DDR0_PCTL_DTULFSRRD)
+#define DDR0_PCTL_DTUWD2 0x0218 	///../ucode/ddr3_reg.h:122
+#define P_DDR0_PCTL_DTUWD2 		MMC_REG_ADDR(DDR0_PCTL_DTUWD2)
+#define DDR0_PCTL_DTUWD3 0x021c 	///../ucode/ddr3_reg.h:123
+#define P_DDR0_PCTL_DTUWD3 		MMC_REG_ADDR(DDR0_PCTL_DTUWD3)
+#define DDR0_PCTL_DTULFSRWD 0x0234 	///../ucode/ddr3_reg.h:124
+#define P_DDR0_PCTL_DTULFSRWD 		MMC_REG_ADDR(DDR0_PCTL_DTULFSRWD)
+#define DDR0_PCTL_DTURACTL 0x0204 	///../ucode/ddr3_reg.h:125
+#define P_DDR0_PCTL_DTURACTL 		MMC_REG_ADDR(DDR0_PCTL_DTURACTL)
+#define DDR0_PCTL_DTUWDM 0x0220 	///../ucode/ddr3_reg.h:126
+#define P_DDR0_PCTL_DTUWDM 		MMC_REG_ADDR(DDR0_PCTL_DTUWDM)
+#define DDR0_PCTL_DTURD0 0x0224 	///../ucode/ddr3_reg.h:127
+#define P_DDR0_PCTL_DTURD0 		MMC_REG_ADDR(DDR0_PCTL_DTURD0)
+#define DDR0_PCTL_DTURD1 0x0228 	///../ucode/ddr3_reg.h:128
+#define P_DDR0_PCTL_DTURD1 		MMC_REG_ADDR(DDR0_PCTL_DTURD1)
+#define DDR0_PCTL_DTURD2 0x022c 	///../ucode/ddr3_reg.h:129
+#define P_DDR0_PCTL_DTURD2 		MMC_REG_ADDR(DDR0_PCTL_DTURD2)
+#define DDR0_PCTL_DTURD3 0x0230 	///../ucode/ddr3_reg.h:130
+#define P_DDR0_PCTL_DTURD3 		MMC_REG_ADDR(DDR0_PCTL_DTURD3)
+#define DDR0_PCTL_DTUCFG 0x0208 	///../ucode/ddr3_reg.h:131
+#define P_DDR0_PCTL_DTUCFG 		MMC_REG_ADDR(DDR0_PCTL_DTUCFG)
+#define DDR0_PCTL_DTUEAF 0x023c 	///../ucode/ddr3_reg.h:132
+#define P_DDR0_PCTL_DTUEAF 		MMC_REG_ADDR(DDR0_PCTL_DTUEAF)
+#define DDR0_PCTL_DTUECTL 0x020c 	///../ucode/ddr3_reg.h:133
+#define P_DDR0_PCTL_DTUECTL 		MMC_REG_ADDR(DDR0_PCTL_DTUECTL)
+#define DDR0_PCTL_DFIODTCFG1 0x0248 	///../ucode/ddr3_reg.h:134
+#define P_DDR0_PCTL_DFIODTCFG1 		MMC_REG_ADDR(DDR0_PCTL_DFIODTCFG1)
+#define DDR0_PCTL_DFITCTRLDELAY 0x0240 	///../ucode/ddr3_reg.h:135
+#define P_DDR0_PCTL_DFITCTRLDELAY 		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLDELAY)
+#define DDR0_PCTL_DFIODTRANKMAP 0x024c 	///../ucode/ddr3_reg.h:136
+#define P_DDR0_PCTL_DFIODTRANKMAP 		MMC_REG_ADDR(DDR0_PCTL_DFIODTRANKMAP)
+#define DDR0_PCTL_DFIODTCFG 0x0244 	///../ucode/ddr3_reg.h:137
+#define P_DDR0_PCTL_DFIODTCFG 		MMC_REG_ADDR(DDR0_PCTL_DFIODTCFG)
+#define DDR0_PCTL_DFITPHYWRLAT 0x0254 	///../ucode/ddr3_reg.h:138
+#define P_DDR0_PCTL_DFITPHYWRLAT 		MMC_REG_ADDR(DDR0_PCTL_DFITPHYWRLAT)
+#define DDR0_PCTL_DFITPHYWRDATA 0x0250 	///../ucode/ddr3_reg.h:139
+#define P_DDR0_PCTL_DFITPHYWRDATA 		MMC_REG_ADDR(DDR0_PCTL_DFITPHYWRDATA)
+#define DDR0_PCTL_DFITRDDATAEN 0x0260 	///../ucode/ddr3_reg.h:140
+#define P_DDR0_PCTL_DFITRDDATAEN 		MMC_REG_ADDR(DDR0_PCTL_DFITRDDATAEN)
+#define DDR0_PCTL_DFITPHYRDLAT 0x0264 	///../ucode/ddr3_reg.h:141
+#define P_DDR0_PCTL_DFITPHYRDLAT 		MMC_REG_ADDR(DDR0_PCTL_DFITPHYRDLAT)
+#define DDR0_PCTL_DFITREFMSKI 0x0294 	///../ucode/ddr3_reg.h:142
+#define P_DDR0_PCTL_DFITREFMSKI 		MMC_REG_ADDR(DDR0_PCTL_DFITREFMSKI)
+#define DDR0_PCTL_DFITPHYUPDTYPE0 0x0270 	///../ucode/ddr3_reg.h:143
+#define P_DDR0_PCTL_DFITPHYUPDTYPE0 		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE0)
+#define DDR0_PCTL_DFITPHYUPDTYPE1 0x0274 	///../ucode/ddr3_reg.h:144
+#define P_DDR0_PCTL_DFITPHYUPDTYPE1 		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE1)
+#define DDR0_PCTL_DFITCTRLUPDDLY 0x0288 	///../ucode/ddr3_reg.h:145
+#define P_DDR0_PCTL_DFITCTRLUPDDLY 		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDDLY)
+#define DDR0_PCTL_DFITPHYUPDTYPE2 0x0278 	///../ucode/ddr3_reg.h:146
+#define P_DDR0_PCTL_DFITPHYUPDTYPE2 		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE2)
+#define DDR0_PCTL_DFITCTRLUPDMIN 0x0280 	///../ucode/ddr3_reg.h:147
+#define P_DDR0_PCTL_DFITCTRLUPDMIN 		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDMIN)
+#define DDR0_PCTL_DFITPHYUPDTYPE3 0x027c 	///../ucode/ddr3_reg.h:148
+#define P_DDR0_PCTL_DFITPHYUPDTYPE3 		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE3)
+#define DDR0_PCTL_DFIUPDCFG 0x0290 	///../ucode/ddr3_reg.h:149
+#define P_DDR0_PCTL_DFIUPDCFG 		MMC_REG_ADDR(DDR0_PCTL_DFIUPDCFG)
+#define DDR0_PCTL_DFITCTRLUPDMAX 0x0284 	///../ucode/ddr3_reg.h:150
+#define P_DDR0_PCTL_DFITCTRLUPDMAX 		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDMAX)
+#define DDR0_PCTL_DFITCTRLUPDI 0x0298 	///../ucode/ddr3_reg.h:151
+#define P_DDR0_PCTL_DFITCTRLUPDI 		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDI)
+#define DDR0_PCTL_DFITRRDLVLEN 0x02b8 	///../ucode/ddr3_reg.h:152
+#define P_DDR0_PCTL_DFITRRDLVLEN 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLEN)
+#define DDR0_PCTL_DFITRSTAT0 0x02b0 	///../ucode/ddr3_reg.h:153
+#define P_DDR0_PCTL_DFITRSTAT0 		MMC_REG_ADDR(DDR0_PCTL_DFITRSTAT0)
+#define DDR0_PCTL_DFITRWRLVLEN 0x02b4 	///../ucode/ddr3_reg.h:154
+#define P_DDR0_PCTL_DFITRWRLVLEN 		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLEN)
+#define DDR0_PCTL_DFITRCFG0 0x02ac 	///../ucode/ddr3_reg.h:155
+#define P_DDR0_PCTL_DFITRCFG0 		MMC_REG_ADDR(DDR0_PCTL_DFITRCFG0)
+#define DDR0_PCTL_DFITRRDLVLGATEEN 0x02bc 	///../ucode/ddr3_reg.h:156
+#define P_DDR0_PCTL_DFITRRDLVLGATEEN 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEEN)
+#define DDR0_PCTL_DFISTSTAT0 0x02c0 	///../ucode/ddr3_reg.h:157
+#define P_DDR0_PCTL_DFISTSTAT0 		MMC_REG_ADDR(DDR0_PCTL_DFISTSTAT0)
+#define DDR0_PCTL_DFISTPARLOG 0x02e0 	///../ucode/ddr3_reg.h:158
+#define P_DDR0_PCTL_DFISTPARLOG 		MMC_REG_ADDR(DDR0_PCTL_DFISTPARLOG)
+#define DDR0_PCTL_DFITDRAMCLKEN 0x02d0 	///../ucode/ddr3_reg.h:159
+#define P_DDR0_PCTL_DFITDRAMCLKEN 		MMC_REG_ADDR(DDR0_PCTL_DFITDRAMCLKEN)
+#define DDR0_PCTL_DFISTPARCLR 0x02dc 	///../ucode/ddr3_reg.h:160
+#define P_DDR0_PCTL_DFISTPARCLR 		MMC_REG_ADDR(DDR0_PCTL_DFISTPARCLR)
+#define DDR0_PCTL_DFISTCFG0 0x02c4 	///../ucode/ddr3_reg.h:161
+#define P_DDR0_PCTL_DFISTCFG0 		MMC_REG_ADDR(DDR0_PCTL_DFISTCFG0)
+#define DDR0_PCTL_DFISTCFG1 0x02c8 	///../ucode/ddr3_reg.h:162
+#define P_DDR0_PCTL_DFISTCFG1 		MMC_REG_ADDR(DDR0_PCTL_DFISTCFG1)
+#define DDR0_PCTL_DFISTCFG2 0x02d8 	///../ucode/ddr3_reg.h:163
+#define P_DDR0_PCTL_DFISTCFG2 		MMC_REG_ADDR(DDR0_PCTL_DFISTCFG2)
+#define DDR0_PCTL_DFITDRAMCLKDIS 0x02d4 	///../ucode/ddr3_reg.h:164
+#define P_DDR0_PCTL_DFITDRAMCLKDIS 		MMC_REG_ADDR(DDR0_PCTL_DFITDRAMCLKDIS)
+#define DDR0_PCTL_DFILPCFG0 0x02f0 	///../ucode/ddr3_reg.h:165
+#define P_DDR0_PCTL_DFILPCFG0 		MMC_REG_ADDR(DDR0_PCTL_DFILPCFG0)
+#define DDR0_PCTL_DFITRWRLVLDELAY0 0x0318 	///../ucode/ddr3_reg.h:166
+#define P_DDR0_PCTL_DFITRWRLVLDELAY0 		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLDELAY0)
+#define DDR0_PCTL_DFITRWRLVLDELAY1 0x031c 	///../ucode/ddr3_reg.h:167
+#define P_DDR0_PCTL_DFITRWRLVLDELAY1 		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLDELAY1)
+#define DDR0_PCTL_DFITRWRLVLDELAY2 0x0320 	///../ucode/ddr3_reg.h:168
+#define P_DDR0_PCTL_DFITRWRLVLDELAY2 		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLDELAY2)
+#define DDR0_PCTL_DFITRRDLVLRESP0 0x030c 	///../ucode/ddr3_reg.h:169
+#define P_DDR0_PCTL_DFITRRDLVLRESP0 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLRESP0)
+#define DDR0_PCTL_DFITRRDLVLRESP1 0x0310 	///../ucode/ddr3_reg.h:170
+#define P_DDR0_PCTL_DFITRRDLVLRESP1 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLRESP1)
+#define DDR0_PCTL_DFITRRDLVLRESP2 0x0314 	///../ucode/ddr3_reg.h:171
+#define P_DDR0_PCTL_DFITRRDLVLRESP2 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLRESP2)
+#define DDR0_PCTL_DFITRWRLVLRESP0 0x0300 	///../ucode/ddr3_reg.h:172
+#define P_DDR0_PCTL_DFITRWRLVLRESP0 		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLRESP0)
+#define DDR0_PCTL_DFITRRDLVLDELAY0 0x0324 	///../ucode/ddr3_reg.h:173
+#define P_DDR0_PCTL_DFITRRDLVLDELAY0 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLDELAY0)
+#define DDR0_PCTL_DFITRRDLVLDELAY1 0x0328 	///../ucode/ddr3_reg.h:174
+#define P_DDR0_PCTL_DFITRRDLVLDELAY1 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLDELAY1)
+#define DDR0_PCTL_DFITRWRLVLRESP1 0x0304 	///../ucode/ddr3_reg.h:175
+#define P_DDR0_PCTL_DFITRWRLVLRESP1 		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLRESP1)
+#define DDR0_PCTL_DFITRRDLVLDELAY2 0x032c 	///../ucode/ddr3_reg.h:176
+#define P_DDR0_PCTL_DFITRRDLVLDELAY2 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLDELAY2)
+#define DDR0_PCTL_DFITRWRLVLRESP2 0x0308 	///../ucode/ddr3_reg.h:177
+#define P_DDR0_PCTL_DFITRWRLVLRESP2 		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLRESP2)
+#define DDR0_PCTL_DFITRRDLVLGATEDELAY0 0x0330 	///../ucode/ddr3_reg.h:178
+#define P_DDR0_PCTL_DFITRRDLVLGATEDELAY0 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEDELAY0)
+#define DDR0_PCTL_DFITRCMD 0x033c 	///../ucode/ddr3_reg.h:179
+#define P_DDR0_PCTL_DFITRCMD 		MMC_REG_ADDR(DDR0_PCTL_DFITRCMD)
+#define DDR0_PCTL_DFITRRDLVLGATEDELAY1 0x0334 	///../ucode/ddr3_reg.h:180
+#define P_DDR0_PCTL_DFITRRDLVLGATEDELAY1 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEDELAY1)
+#define DDR0_PCTL_DFITRRDLVLGATEDELAY2 0x0338 	///../ucode/ddr3_reg.h:181
+#define P_DDR0_PCTL_DFITRRDLVLGATEDELAY2 		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEDELAY2)
+#define DDR0_PCTL_IPTR 0x03fc 	///../ucode/ddr3_reg.h:182
+#define P_DDR0_PCTL_IPTR 		MMC_REG_ADDR(DDR0_PCTL_IPTR)
+#define DDR0_PCTL_IPVR 0x03f8 	///../ucode/ddr3_reg.h:183
+#define P_DDR0_PCTL_IPVR 		MMC_REG_ADDR(DDR0_PCTL_IPVR)
+#define DDR0_PUB_RIDR (0x1000 + (0x00 << 2)) 	///../ucode/ddr3_reg.h:186
+#define P_DDR0_PUB_RIDR 		MMC_REG_ADDR(DDR0_PUB_RIDR)
+#define DDR0_PUB_PIR (0x1000 + (0x01 << 2)) 	///../ucode/ddr3_reg.h:187
+#define P_DDR0_PUB_PIR 		MMC_REG_ADDR(DDR0_PUB_PIR)
+#define DDR0_PUB_PGCR0 (0x1000 + (0x02 << 2)) 	///../ucode/ddr3_reg.h:188
+#define P_DDR0_PUB_PGCR0 		MMC_REG_ADDR(DDR0_PUB_PGCR0)
+#define DDR0_PUB_PGCR1 (0x1000 + (0x03 << 2)) 	///../ucode/ddr3_reg.h:189
+#define P_DDR0_PUB_PGCR1 		MMC_REG_ADDR(DDR0_PUB_PGCR1)
+#define DDR0_PUB_PGCR2 (0x1000 + (0x04 << 2)) 	///../ucode/ddr3_reg.h:190
+#define P_DDR0_PUB_PGCR2 		MMC_REG_ADDR(DDR0_PUB_PGCR2)
+#define DDR0_PUB_PGCR3 (0x1000 + (0x05 << 2)) 	///../ucode/ddr3_reg.h:191
+#define P_DDR0_PUB_PGCR3 		MMC_REG_ADDR(DDR0_PUB_PGCR3)
+#define DDR0_PUB_PGSR0 (0x1000 + (0x06 << 2)) 	///../ucode/ddr3_reg.h:192
+#define P_DDR0_PUB_PGSR0 		MMC_REG_ADDR(DDR0_PUB_PGSR0)
+#define DDR0_PUB_PGSR1 (0x1000 + (0x07 << 2)) 	///../ucode/ddr3_reg.h:193
+#define P_DDR0_PUB_PGSR1 		MMC_REG_ADDR(DDR0_PUB_PGSR1)
+#define DDR0_PUB_PLLCR (0x1000 + (0x08 << 2)) 	///../ucode/ddr3_reg.h:194
+#define P_DDR0_PUB_PLLCR 		MMC_REG_ADDR(DDR0_PUB_PLLCR)
+#define DDR0_PUB_PTR0 (0x1000 + (0x09 << 2)) 	///../ucode/ddr3_reg.h:195
+#define P_DDR0_PUB_PTR0 		MMC_REG_ADDR(DDR0_PUB_PTR0)
+#define DDR0_PUB_PTR1 (0x1000 + (0x0A << 2)) 	///../ucode/ddr3_reg.h:196
+#define P_DDR0_PUB_PTR1 		MMC_REG_ADDR(DDR0_PUB_PTR1)
+#define DDR0_PUB_PTR2 (0x1000 + (0x0B << 2)) 	///../ucode/ddr3_reg.h:197
+#define P_DDR0_PUB_PTR2 		MMC_REG_ADDR(DDR0_PUB_PTR2)
+#define DDR0_PUB_PTR3 (0x1000 + (0x0C << 2)) 	///../ucode/ddr3_reg.h:198
+#define P_DDR0_PUB_PTR3 		MMC_REG_ADDR(DDR0_PUB_PTR3)
+#define DDR0_PUB_PTR4 (0x1000 + (0x0D << 2)) 	///../ucode/ddr3_reg.h:199
+#define P_DDR0_PUB_PTR4 		MMC_REG_ADDR(DDR0_PUB_PTR4)
+#define DDR0_PUB_ACMDLR (0x1000 + (0x0E << 2)) 	///../ucode/ddr3_reg.h:200
+#define P_DDR0_PUB_ACMDLR 		MMC_REG_ADDR(DDR0_PUB_ACMDLR)
+#define DDR0_PUB_ACLCDLR (0x1000 + (0x0F << 2)) 	///../ucode/ddr3_reg.h:201
+#define P_DDR0_PUB_ACLCDLR 		MMC_REG_ADDR(DDR0_PUB_ACLCDLR)
+#define DDR0_PUB_ACBDLR0 (0x1000 + (0x10 << 2)) 	///../ucode/ddr3_reg.h:202
+#define P_DDR0_PUB_ACBDLR0 		MMC_REG_ADDR(DDR0_PUB_ACBDLR0)
+#define DDR0_PUB_ACBDLR1 (0x1000 + (0x11 << 2)) 	///../ucode/ddr3_reg.h:203
+#define P_DDR0_PUB_ACBDLR1 		MMC_REG_ADDR(DDR0_PUB_ACBDLR1)
+#define DDR0_PUB_ACBDLR2 (0x1000 + (0x12 << 2)) 	///../ucode/ddr3_reg.h:204
+#define P_DDR0_PUB_ACBDLR2 		MMC_REG_ADDR(DDR0_PUB_ACBDLR2)
+#define DDR0_PUB_ACBDLR3 (0x1000 + (0x13 << 2)) 	///../ucode/ddr3_reg.h:205
+#define P_DDR0_PUB_ACBDLR3 		MMC_REG_ADDR(DDR0_PUB_ACBDLR3)
+#define DDR0_PUB_ACBDLR4 (0x1000 + (0x14 << 2)) 	///../ucode/ddr3_reg.h:206
+#define P_DDR0_PUB_ACBDLR4 		MMC_REG_ADDR(DDR0_PUB_ACBDLR4)
+#define DDR0_PUB_ACBDLR5 (0x1000 + (0x15 << 2)) 	///../ucode/ddr3_reg.h:207
+#define P_DDR0_PUB_ACBDLR5 		MMC_REG_ADDR(DDR0_PUB_ACBDLR5)
+#define DDR0_PUB_ACBDLR6 (0x1000 + (0x16 << 2)) 	///../ucode/ddr3_reg.h:208
+#define P_DDR0_PUB_ACBDLR6 		MMC_REG_ADDR(DDR0_PUB_ACBDLR6)
+#define DDR0_PUB_ACBDLR7 (0x1000 + (0x17 << 2)) 	///../ucode/ddr3_reg.h:209
+#define P_DDR0_PUB_ACBDLR7 		MMC_REG_ADDR(DDR0_PUB_ACBDLR7)
+#define DDR0_PUB_ACBDLR8 (0x1000 + (0x18 << 2)) 	///../ucode/ddr3_reg.h:210
+#define P_DDR0_PUB_ACBDLR8 		MMC_REG_ADDR(DDR0_PUB_ACBDLR8)
+#define DDR0_PUB_ACBDLR9 (0x1000 + (0x19 << 2)) 	///../ucode/ddr3_reg.h:211
+#define P_DDR0_PUB_ACBDLR9 		MMC_REG_ADDR(DDR0_PUB_ACBDLR9)
+#define DDR0_PUB_ACIOCR0 (0x1000 + (0x1A << 2)) 	///../ucode/ddr3_reg.h:212
+#define P_DDR0_PUB_ACIOCR0 		MMC_REG_ADDR(DDR0_PUB_ACIOCR0)
+#define DDR0_PUB_ACIOCR1 (0x1000 + (0x1B << 2)) 	///../ucode/ddr3_reg.h:213
+#define P_DDR0_PUB_ACIOCR1 		MMC_REG_ADDR(DDR0_PUB_ACIOCR1)
+#define DDR0_PUB_ACIOCR2 (0x1000 + (0x1C << 2)) 	///../ucode/ddr3_reg.h:214
+#define P_DDR0_PUB_ACIOCR2 		MMC_REG_ADDR(DDR0_PUB_ACIOCR2)
+#define DDR0_PUB_ACIOCR3 (0x1000 + (0x1D << 2)) 	///../ucode/ddr3_reg.h:215
+#define P_DDR0_PUB_ACIOCR3 		MMC_REG_ADDR(DDR0_PUB_ACIOCR3)
+#define DDR0_PUB_ACIOCR4 (0x1000 + (0x1E << 2)) 	///../ucode/ddr3_reg.h:216
+#define P_DDR0_PUB_ACIOCR4 		MMC_REG_ADDR(DDR0_PUB_ACIOCR4)
+#define DDR0_PUB_ACIOCR5 (0x1000 + (0x1F << 2)) 	///../ucode/ddr3_reg.h:217
+#define P_DDR0_PUB_ACIOCR5 		MMC_REG_ADDR(DDR0_PUB_ACIOCR5)
+#define DDR0_PUB_DXCCR (0x1000 + (0x20 << 2)) 	///../ucode/ddr3_reg.h:218
+#define P_DDR0_PUB_DXCCR 		MMC_REG_ADDR(DDR0_PUB_DXCCR)
+#define DDR0_PUB_DSGCR (0x1000 + (0x21 << 2)) 	///../ucode/ddr3_reg.h:219
+#define P_DDR0_PUB_DSGCR 		MMC_REG_ADDR(DDR0_PUB_DSGCR)
+#define DDR0_PUB_DCR (0x1000 + (0x22 << 2)) 	///../ucode/ddr3_reg.h:220
+#define P_DDR0_PUB_DCR 		MMC_REG_ADDR(DDR0_PUB_DCR)
+#define DDR0_PUB_DTPR0 (0x1000 + (0x23 << 2)) 	///../ucode/ddr3_reg.h:221
+#define P_DDR0_PUB_DTPR0 		MMC_REG_ADDR(DDR0_PUB_DTPR0)
+#define DDR0_PUB_DTPR1 (0x1000 + (0x24 << 2)) 	///../ucode/ddr3_reg.h:222
+#define P_DDR0_PUB_DTPR1 		MMC_REG_ADDR(DDR0_PUB_DTPR1)
+#define DDR0_PUB_DTPR2 (0x1000 + (0x25 << 2)) 	///../ucode/ddr3_reg.h:223
+#define P_DDR0_PUB_DTPR2 		MMC_REG_ADDR(DDR0_PUB_DTPR2)
+#define DDR0_PUB_DTPR3 (0x1000 + (0x26 << 2)) 	///../ucode/ddr3_reg.h:224
+#define P_DDR0_PUB_DTPR3 		MMC_REG_ADDR(DDR0_PUB_DTPR3)
+#define DDR0_PUB_MR0 (0x1000 + (0x27 << 2)) 	///../ucode/ddr3_reg.h:225
+#define P_DDR0_PUB_MR0 		MMC_REG_ADDR(DDR0_PUB_MR0)
+#define DDR0_PUB_MR1 (0x1000 + (0x28 << 2)) 	///../ucode/ddr3_reg.h:226
+#define P_DDR0_PUB_MR1 		MMC_REG_ADDR(DDR0_PUB_MR1)
+#define DDR0_PUB_MR2 (0x1000 + (0x29 << 2)) 	///../ucode/ddr3_reg.h:227
+#define P_DDR0_PUB_MR2 		MMC_REG_ADDR(DDR0_PUB_MR2)
+#define DDR0_PUB_MR3 (0x1000 + (0x2A << 2)) 	///../ucode/ddr3_reg.h:228
+#define P_DDR0_PUB_MR3 		MMC_REG_ADDR(DDR0_PUB_MR3)
+#define DDR0_PUB_ODTCR (0x1000 + (0x2B << 2)) 	///../ucode/ddr3_reg.h:229
+#define P_DDR0_PUB_ODTCR 		MMC_REG_ADDR(DDR0_PUB_ODTCR)
+#define DDR0_PUB_DTCR (0x1000 + (0x2C << 2)) 	///../ucode/ddr3_reg.h:230
+#define P_DDR0_PUB_DTCR 		MMC_REG_ADDR(DDR0_PUB_DTCR)
+#define DDR0_PUB_DTAR0 (0x1000 + (0x2D << 2)) 	///../ucode/ddr3_reg.h:231
+#define P_DDR0_PUB_DTAR0 		MMC_REG_ADDR(DDR0_PUB_DTAR0)
+#define DDR0_PUB_DTAR1 (0x1000 + (0x2E << 2)) 	///../ucode/ddr3_reg.h:232
+#define P_DDR0_PUB_DTAR1 		MMC_REG_ADDR(DDR0_PUB_DTAR1)
+#define DDR0_PUB_DTAR2 (0x1000 + (0x2F << 2)) 	///../ucode/ddr3_reg.h:233
+#define P_DDR0_PUB_DTAR2 		MMC_REG_ADDR(DDR0_PUB_DTAR2)
+#define DDR0_PUB_DTAR3 (0x1000 + (0x30 << 2)) 	///../ucode/ddr3_reg.h:234
+#define P_DDR0_PUB_DTAR3 		MMC_REG_ADDR(DDR0_PUB_DTAR3)
+#define DDR0_PUB_DTDR0 (0x1000 + (0x31 << 2)) 	///../ucode/ddr3_reg.h:235
+#define P_DDR0_PUB_DTDR0 		MMC_REG_ADDR(DDR0_PUB_DTDR0)
+#define DDR0_PUB_DTDR1 (0x1000 + (0x32 << 2)) 	///../ucode/ddr3_reg.h:236
+#define P_DDR0_PUB_DTDR1 		MMC_REG_ADDR(DDR0_PUB_DTDR1)
+#define DDR0_PUB_DTEDR0 (0x1000 + (0x33 << 2)) 	///../ucode/ddr3_reg.h:237
+#define P_DDR0_PUB_DTEDR0 		MMC_REG_ADDR(DDR0_PUB_DTEDR0)
+#define DDR0_PUB_DTEDR1 (0x1000 + (0x34 << 2)) 	///../ucode/ddr3_reg.h:238
+#define P_DDR0_PUB_DTEDR1 		MMC_REG_ADDR(DDR0_PUB_DTEDR1)
+#define DDR0_PUB_RDIMMGCR0 (0x1000 + (0x35 << 2)) 	///../ucode/ddr3_reg.h:239
+#define P_DDR0_PUB_RDIMMGCR0 		MMC_REG_ADDR(DDR0_PUB_RDIMMGCR0)
+#define DDR0_PUB_RDIMMGCR1 (0x1000 + (0x36 << 2)) 	///../ucode/ddr3_reg.h:240
+#define P_DDR0_PUB_RDIMMGCR1 		MMC_REG_ADDR(DDR0_PUB_RDIMMGCR1)
+#define DDR0_PUB_RDIMMCR0 (0x1000 + (0x37 << 2)) 	///../ucode/ddr3_reg.h:241
+#define P_DDR0_PUB_RDIMMCR0 		MMC_REG_ADDR(DDR0_PUB_RDIMMCR0)
+#define DDR0_PUB_RDIMMCR1 (0x1000 + (0x38 << 2)) 	///../ucode/ddr3_reg.h:242
+#define P_DDR0_PUB_RDIMMCR1 		MMC_REG_ADDR(DDR0_PUB_RDIMMCR1)
+#define DDR0_PUB_GPR0 (0x1000 + (0x39 << 2)) 	///../ucode/ddr3_reg.h:243
+#define P_DDR0_PUB_GPR0 		MMC_REG_ADDR(DDR0_PUB_GPR0)
+#define DDR0_PUB_GPR1 (0x1000 + (0x3A << 2)) 	///../ucode/ddr3_reg.h:244
+#define P_DDR0_PUB_GPR1 		MMC_REG_ADDR(DDR0_PUB_GPR1)
+#define DDR0_PUB_CATR0 (0x1000 + (0x3B << 2)) 	///../ucode/ddr3_reg.h:245
+#define P_DDR0_PUB_CATR0 		MMC_REG_ADDR(DDR0_PUB_CATR0)
+#define DDR0_PUB_CATR1 (0x1000 + (0x3C << 2)) 	///../ucode/ddr3_reg.h:246
+#define P_DDR0_PUB_CATR1 		MMC_REG_ADDR(DDR0_PUB_CATR1)
+#define DDR0_PUB_DCUAR (0x1000 + (0x60 << 2)) 	///../ucode/ddr3_reg.h:248
+#define P_DDR0_PUB_DCUAR 		MMC_REG_ADDR(DDR0_PUB_DCUAR)
+#define DDR0_PUB_DCUDR (0x1000 + (0x61 << 2)) 	///../ucode/ddr3_reg.h:249
+#define P_DDR0_PUB_DCUDR 		MMC_REG_ADDR(DDR0_PUB_DCUDR)
+#define DDR0_PUB_DCURR (0x1000 + (0x62 << 2)) 	///../ucode/ddr3_reg.h:250
+#define P_DDR0_PUB_DCURR 		MMC_REG_ADDR(DDR0_PUB_DCURR)
+#define DDR0_PUB_DCULR (0x1000 + (0x63 << 2)) 	///../ucode/ddr3_reg.h:251
+#define P_DDR0_PUB_DCULR 		MMC_REG_ADDR(DDR0_PUB_DCULR)
+#define DDR0_PUB_DCUGCR (0x1000 + (0x64 << 2)) 	///../ucode/ddr3_reg.h:252
+#define P_DDR0_PUB_DCUGCR 		MMC_REG_ADDR(DDR0_PUB_DCUGCR)
+#define DDR0_PUB_DCUTPR (0x1000 + (0x65 << 2)) 	///../ucode/ddr3_reg.h:253
+#define P_DDR0_PUB_DCUTPR 		MMC_REG_ADDR(DDR0_PUB_DCUTPR)
+#define DDR0_PUB_DCUSR0 (0x1000 + (0x66 << 2)) 	///../ucode/ddr3_reg.h:254
+#define P_DDR0_PUB_DCUSR0 		MMC_REG_ADDR(DDR0_PUB_DCUSR0)
+#define DDR0_PUB_DCUSR1 (0x1000 + (0x67 << 2)) 	///../ucode/ddr3_reg.h:255
+#define P_DDR0_PUB_DCUSR1 		MMC_REG_ADDR(DDR0_PUB_DCUSR1)
+#define DDR0_PUB_BISTRR (0x1000 + (0x70 << 2)) 	///../ucode/ddr3_reg.h:257
+#define P_DDR0_PUB_BISTRR 		MMC_REG_ADDR(DDR0_PUB_BISTRR)
+#define DDR0_PUB_BISTWCR (0x1000 + (0x71 << 2)) 	///../ucode/ddr3_reg.h:258
+#define P_DDR0_PUB_BISTWCR 		MMC_REG_ADDR(DDR0_PUB_BISTWCR)
+#define DDR0_PUB_BISTMSKR0 (0x1000 + (0x72 << 2)) 	///../ucode/ddr3_reg.h:259
+#define P_DDR0_PUB_BISTMSKR0 		MMC_REG_ADDR(DDR0_PUB_BISTMSKR0)
+#define DDR0_PUB_BISTMSKR1 (0x1000 + (0x73 << 2)) 	///../ucode/ddr3_reg.h:260
+#define P_DDR0_PUB_BISTMSKR1 		MMC_REG_ADDR(DDR0_PUB_BISTMSKR1)
+#define DDR0_PUB_BISTMSKR2 (0x1000 + (0x74 << 2)) 	///../ucode/ddr3_reg.h:261
+#define P_DDR0_PUB_BISTMSKR2 		MMC_REG_ADDR(DDR0_PUB_BISTMSKR2)
+#define DDR0_PUB_BISTLSR (0x1000 + (0x75 << 2)) 	///../ucode/ddr3_reg.h:262
+#define P_DDR0_PUB_BISTLSR 		MMC_REG_ADDR(DDR0_PUB_BISTLSR)
+#define DDR0_PUB_BISTAR0 (0x1000 + (0x76 << 2)) 	///../ucode/ddr3_reg.h:263
+#define P_DDR0_PUB_BISTAR0 		MMC_REG_ADDR(DDR0_PUB_BISTAR0)
+#define DDR0_PUB_BISTAR1 (0x1000 + (0x77 << 2)) 	///../ucode/ddr3_reg.h:264
+#define P_DDR0_PUB_BISTAR1 		MMC_REG_ADDR(DDR0_PUB_BISTAR1)
+#define DDR0_PUB_BISTAR2 (0x1000 + (0x78 << 2)) 	///../ucode/ddr3_reg.h:265
+#define P_DDR0_PUB_BISTAR2 		MMC_REG_ADDR(DDR0_PUB_BISTAR2)
+#define DDR0_PUB_BISTUDPR (0x1000 + (0x79 << 2)) 	///../ucode/ddr3_reg.h:266
+#define P_DDR0_PUB_BISTUDPR 		MMC_REG_ADDR(DDR0_PUB_BISTUDPR)
+#define DDR0_PUB_BISTGSR (0x1000 + (0x7A << 2)) 	///../ucode/ddr3_reg.h:267
+#define P_DDR0_PUB_BISTGSR 		MMC_REG_ADDR(DDR0_PUB_BISTGSR)
+#define DDR0_PUB_BISTWER (0x1000 + (0x7B << 2)) 	///../ucode/ddr3_reg.h:268
+#define P_DDR0_PUB_BISTWER 		MMC_REG_ADDR(DDR0_PUB_BISTWER)
+#define DDR0_PUB_BISTBER0 (0x1000 + (0x7C << 2)) 	///../ucode/ddr3_reg.h:269
+#define P_DDR0_PUB_BISTBER0 		MMC_REG_ADDR(DDR0_PUB_BISTBER0)
+#define DDR0_PUB_BISTBER1 (0x1000 + (0x7D << 2)) 	///../ucode/ddr3_reg.h:270
+#define P_DDR0_PUB_BISTBER1 		MMC_REG_ADDR(DDR0_PUB_BISTBER1)
+#define DDR0_PUB_BISTBER2 (0x1000 + (0x7E << 2)) 	///../ucode/ddr3_reg.h:271
+#define P_DDR0_PUB_BISTBER2 		MMC_REG_ADDR(DDR0_PUB_BISTBER2)
+#define DDR0_PUB_BISTBER3 (0x1000 + (0x7F << 2)) 	///../ucode/ddr3_reg.h:272
+#define P_DDR0_PUB_BISTBER3 		MMC_REG_ADDR(DDR0_PUB_BISTBER3)
+#define DDR0_PUB_BISTWCSR (0x1000 + (0x80 << 2)) 	///../ucode/ddr3_reg.h:273
+#define P_DDR0_PUB_BISTWCSR 		MMC_REG_ADDR(DDR0_PUB_BISTWCSR)
+#define DDR0_PUB_BISTFWR0 (0x1000 + (0x81 << 2)) 	///../ucode/ddr3_reg.h:274
+#define P_DDR0_PUB_BISTFWR0 		MMC_REG_ADDR(DDR0_PUB_BISTFWR0)
+#define DDR0_PUB_BISTFWR1 (0x1000 + (0x82 << 2)) 	///../ucode/ddr3_reg.h:275
+#define P_DDR0_PUB_BISTFWR1 		MMC_REG_ADDR(DDR0_PUB_BISTFWR1)
+#define DDR0_PUB_BISTFWR2 (0x1000 + (0x83 << 2)) 	///../ucode/ddr3_reg.h:276
+#define P_DDR0_PUB_BISTFWR2 		MMC_REG_ADDR(DDR0_PUB_BISTFWR2)
+#define DDR0_PUB_IOVCR0 (0x1000 + (0x8E << 2)) 	///../ucode/ddr3_reg.h:278
+#define P_DDR0_PUB_IOVCR0 		MMC_REG_ADDR(DDR0_PUB_IOVCR0)
+#define DDR0_PUB_IOVCR1 (0x1000 + (0x8F << 2)) 	///../ucode/ddr3_reg.h:279
+#define P_DDR0_PUB_IOVCR1 		MMC_REG_ADDR(DDR0_PUB_IOVCR1)
+#define DDR0_PUB_ZQCR (0x1000 + (0x90 << 2)) 	///../ucode/ddr3_reg.h:280
+#define P_DDR0_PUB_ZQCR 		MMC_REG_ADDR(DDR0_PUB_ZQCR)
+#define DDR0_PUB_ZQ0PR (0x1000 + (0x91 << 2)) 	///../ucode/ddr3_reg.h:281
+#define P_DDR0_PUB_ZQ0PR 		MMC_REG_ADDR(DDR0_PUB_ZQ0PR)
+#define DDR0_PUB_ZQ0DR (0x1000 + (0x92 << 2)) 	///../ucode/ddr3_reg.h:282
+#define P_DDR0_PUB_ZQ0DR 		MMC_REG_ADDR(DDR0_PUB_ZQ0DR)
+#define DDR0_PUB_ZQ0SR (0x1000 + (0x93 << 2)) 	///../ucode/ddr3_reg.h:283
+#define P_DDR0_PUB_ZQ0SR 		MMC_REG_ADDR(DDR0_PUB_ZQ0SR)
+#define DDR0_PUB_ZQ1PR (0x1000 + (0x95 << 2)) 	///../ucode/ddr3_reg.h:285
+#define P_DDR0_PUB_ZQ1PR 		MMC_REG_ADDR(DDR0_PUB_ZQ1PR)
+#define DDR0_PUB_ZQ1DR (0x1000 + (0x96 << 2)) 	///../ucode/ddr3_reg.h:286
+#define P_DDR0_PUB_ZQ1DR 		MMC_REG_ADDR(DDR0_PUB_ZQ1DR)
+#define DDR0_PUB_ZQ1SR (0x1000 + (0x97 << 2)) 	///../ucode/ddr3_reg.h:287
+#define P_DDR0_PUB_ZQ1SR 		MMC_REG_ADDR(DDR0_PUB_ZQ1SR)
+#define DDR0_PUB_ZQ2PR (0x1000 + (0x99 << 2)) 	///../ucode/ddr3_reg.h:289
+#define P_DDR0_PUB_ZQ2PR 		MMC_REG_ADDR(DDR0_PUB_ZQ2PR)
+#define DDR0_PUB_ZQ2DR (0x1000 + (0x9A << 2)) 	///../ucode/ddr3_reg.h:290
+#define P_DDR0_PUB_ZQ2DR 		MMC_REG_ADDR(DDR0_PUB_ZQ2DR)
+#define DDR0_PUB_ZQ2SR (0x1000 + (0x9B << 2)) 	///../ucode/ddr3_reg.h:291
+#define P_DDR0_PUB_ZQ2SR 		MMC_REG_ADDR(DDR0_PUB_ZQ2SR)
+#define DDR0_PUB_ZQ3PR (0x1000 + (0x9D << 2)) 	///../ucode/ddr3_reg.h:293
+#define P_DDR0_PUB_ZQ3PR 		MMC_REG_ADDR(DDR0_PUB_ZQ3PR)
+#define DDR0_PUB_ZQ3DR (0x1000 + (0x9E << 2)) 	///../ucode/ddr3_reg.h:294
+#define P_DDR0_PUB_ZQ3DR 		MMC_REG_ADDR(DDR0_PUB_ZQ3DR)
+#define DDR0_PUB_ZQ3SR (0x1000 + (0x9F << 2)) 	///../ucode/ddr3_reg.h:295
+#define P_DDR0_PUB_ZQ3SR 		MMC_REG_ADDR(DDR0_PUB_ZQ3SR)
+#define DDR0_PUB_DX0GCR0 (0x1000 + (0xA0 << 2)) 	///../ucode/ddr3_reg.h:296
+#define P_DDR0_PUB_DX0GCR0 		MMC_REG_ADDR(DDR0_PUB_DX0GCR0)
+#define DDR0_PUB_DX0GCR1 (0x1000 + (0xA1 << 2)) 	///../ucode/ddr3_reg.h:297
+#define P_DDR0_PUB_DX0GCR1 		MMC_REG_ADDR(DDR0_PUB_DX0GCR1)
+#define DDR0_PUB_DX0GCR2 (0x1000 + (0xA2 << 2)) 	///../ucode/ddr3_reg.h:298
+#define P_DDR0_PUB_DX0GCR2 		MMC_REG_ADDR(DDR0_PUB_DX0GCR2)
+#define DDR0_PUB_DX0GCR3 (0x1000 + (0xA3 << 2)) 	///../ucode/ddr3_reg.h:299
+#define P_DDR0_PUB_DX0GCR3 		MMC_REG_ADDR(DDR0_PUB_DX0GCR3)
+#define DDR0_PUB_DX0GSR0 (0x1000 + (0xA4 << 2)) 	///../ucode/ddr3_reg.h:300
+#define P_DDR0_PUB_DX0GSR0 		MMC_REG_ADDR(DDR0_PUB_DX0GSR0)
+#define DDR0_PUB_DX0GSR1 (0x1000 + (0xA5 << 2)) 	///../ucode/ddr3_reg.h:301
+#define P_DDR0_PUB_DX0GSR1 		MMC_REG_ADDR(DDR0_PUB_DX0GSR1)
+#define DDR0_PUB_DX0GSR2 (0x1000 + (0xA6 << 2)) 	///../ucode/ddr3_reg.h:302
+#define P_DDR0_PUB_DX0GSR2 		MMC_REG_ADDR(DDR0_PUB_DX0GSR2)
+#define DDR0_PUB_DX0BDLR0 (0x1000 + (0xA7 << 2)) 	///../ucode/ddr3_reg.h:303
+#define P_DDR0_PUB_DX0BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX0BDLR0)
+#define DDR0_PUB_DX0BDLR1 (0x1000 + (0xA8 << 2)) 	///../ucode/ddr3_reg.h:304
+#define P_DDR0_PUB_DX0BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX0BDLR1)
+#define DDR0_PUB_DX0BDLR2 (0x1000 + (0xA9 << 2)) 	///../ucode/ddr3_reg.h:305
+#define P_DDR0_PUB_DX0BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX0BDLR2)
+#define DDR0_PUB_DX0BDLR3 (0x1000 + (0xAA << 2)) 	///../ucode/ddr3_reg.h:306
+#define P_DDR0_PUB_DX0BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX0BDLR3)
+#define DDR0_PUB_DX0BDLR4 (0x1000 + (0xAB << 2)) 	///../ucode/ddr3_reg.h:307
+#define P_DDR0_PUB_DX0BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX0BDLR4)
+#define DDR0_PUB_DX0BDLR5 (0x1000 + (0xAC << 2)) 	///../ucode/ddr3_reg.h:308
+#define P_DDR0_PUB_DX0BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX0BDLR5)
+#define DDR0_PUB_DX0BDLR6 (0x1000 + (0xAD << 2)) 	///../ucode/ddr3_reg.h:309
+#define P_DDR0_PUB_DX0BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX0BDLR6)
+#define DDR0_PUB_DX0LCDLR0 (0x1000 + (0xAE << 2)) 	///../ucode/ddr3_reg.h:310
+#define P_DDR0_PUB_DX0LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX0LCDLR0)
+#define DDR0_PUB_DX0LCDLR1 (0x1000 + (0xAF << 2)) 	///../ucode/ddr3_reg.h:311
+#define P_DDR0_PUB_DX0LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX0LCDLR1)
+#define DDR0_PUB_DX0LCDLR2 (0x1000 + (0xB0 << 2)) 	///../ucode/ddr3_reg.h:312
+#define P_DDR0_PUB_DX0LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX0LCDLR2)
+#define DDR0_PUB_DX0MDLR (0x1000 + (0xB1 << 2)) 	///../ucode/ddr3_reg.h:313
+#define P_DDR0_PUB_DX0MDLR 		MMC_REG_ADDR(DDR0_PUB_DX0MDLR)
+#define DDR0_PUB_DX0GTR (0x1000 + (0xB2 << 2)) 	///../ucode/ddr3_reg.h:314
+#define P_DDR0_PUB_DX0GTR 		MMC_REG_ADDR(DDR0_PUB_DX0GTR)
+#define DDR0_PUB_DX1GCR0 (0x1000 + (0xC0 << 2)) 	///../ucode/ddr3_reg.h:316
+#define P_DDR0_PUB_DX1GCR0 		MMC_REG_ADDR(DDR0_PUB_DX1GCR0)
+#define DDR0_PUB_DX1GCR1 (0x1000 + (0xC1 << 2)) 	///../ucode/ddr3_reg.h:317
+#define P_DDR0_PUB_DX1GCR1 		MMC_REG_ADDR(DDR0_PUB_DX1GCR1)
+#define DDR0_PUB_DX1GCR2 (0x1000 + (0xC2 << 2)) 	///../ucode/ddr3_reg.h:318
+#define P_DDR0_PUB_DX1GCR2 		MMC_REG_ADDR(DDR0_PUB_DX1GCR2)
+#define DDR0_PUB_DX1GCR3 (0x1000 + (0xC3 << 2)) 	///../ucode/ddr3_reg.h:319
+#define P_DDR0_PUB_DX1GCR3 		MMC_REG_ADDR(DDR0_PUB_DX1GCR3)
+#define DDR0_PUB_DX1GSR0 (0x1000 + (0xC4 << 2)) 	///../ucode/ddr3_reg.h:320
+#define P_DDR0_PUB_DX1GSR0 		MMC_REG_ADDR(DDR0_PUB_DX1GSR0)
+#define DDR0_PUB_DX1GSR1 (0x1000 + (0xC5 << 2)) 	///../ucode/ddr3_reg.h:321
+#define P_DDR0_PUB_DX1GSR1 		MMC_REG_ADDR(DDR0_PUB_DX1GSR1)
+#define DDR0_PUB_DX1GSR2 (0x1000 + (0xC6 << 2)) 	///../ucode/ddr3_reg.h:322
+#define P_DDR0_PUB_DX1GSR2 		MMC_REG_ADDR(DDR0_PUB_DX1GSR2)
+#define DDR0_PUB_DX1BDLR0 (0x1000 + (0xC7 << 2)) 	///../ucode/ddr3_reg.h:323
+#define P_DDR0_PUB_DX1BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX1BDLR0)
+#define DDR0_PUB_DX1BDLR1 (0x1000 + (0xC8 << 2)) 	///../ucode/ddr3_reg.h:324
+#define P_DDR0_PUB_DX1BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX1BDLR1)
+#define DDR0_PUB_DX1BDLR2 (0x1000 + (0xC9 << 2)) 	///../ucode/ddr3_reg.h:325
+#define P_DDR0_PUB_DX1BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX1BDLR2)
+#define DDR0_PUB_DX1BDLR3 (0x1000 + (0xCA << 2)) 	///../ucode/ddr3_reg.h:326
+#define P_DDR0_PUB_DX1BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX1BDLR3)
+#define DDR0_PUB_DX1BDLR4 (0x1000 + (0xCB << 2)) 	///../ucode/ddr3_reg.h:327
+#define P_DDR0_PUB_DX1BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX1BDLR4)
+#define DDR0_PUB_DX1BDLR5 (0x1000 + (0xCC << 2)) 	///../ucode/ddr3_reg.h:328
+#define P_DDR0_PUB_DX1BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX1BDLR5)
+#define DDR0_PUB_DX1BDLR6 (0x1000 + (0xCD << 2)) 	///../ucode/ddr3_reg.h:329
+#define P_DDR0_PUB_DX1BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX1BDLR6)
+#define DDR0_PUB_DX1LCDLR0 (0x1000 + (0xCE << 2)) 	///../ucode/ddr3_reg.h:330
+#define P_DDR0_PUB_DX1LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX1LCDLR0)
+#define DDR0_PUB_DX1LCDLR1 (0x1000 + (0xCF << 2)) 	///../ucode/ddr3_reg.h:331
+#define P_DDR0_PUB_DX1LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX1LCDLR1)
+#define DDR0_PUB_DX1LCDLR2 (0x1000 + (0xD0 << 2)) 	///../ucode/ddr3_reg.h:332
+#define P_DDR0_PUB_DX1LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX1LCDLR2)
+#define DDR0_PUB_DX1MDLR (0x1000 + (0xD1 << 2)) 	///../ucode/ddr3_reg.h:333
+#define P_DDR0_PUB_DX1MDLR 		MMC_REG_ADDR(DDR0_PUB_DX1MDLR)
+#define DDR0_PUB_DX1GTR (0x1000 + (0xD2 << 2)) 	///../ucode/ddr3_reg.h:334
+#define P_DDR0_PUB_DX1GTR 		MMC_REG_ADDR(DDR0_PUB_DX1GTR)
+#define DDR0_PUB_DX2GCR0 (0x1000 + (0xE0 << 2)) 	///../ucode/ddr3_reg.h:335
+#define P_DDR0_PUB_DX2GCR0 		MMC_REG_ADDR(DDR0_PUB_DX2GCR0)
+#define DDR0_PUB_DX2GCR1 (0x1000 + (0xE1 << 2)) 	///../ucode/ddr3_reg.h:336
+#define P_DDR0_PUB_DX2GCR1 		MMC_REG_ADDR(DDR0_PUB_DX2GCR1)
+#define DDR0_PUB_DX2GCR2 (0x1000 + (0xE2 << 2)) 	///../ucode/ddr3_reg.h:337
+#define P_DDR0_PUB_DX2GCR2 		MMC_REG_ADDR(DDR0_PUB_DX2GCR2)
+#define DDR0_PUB_DX2GCR3 (0x1000 + (0xE3 << 2)) 	///../ucode/ddr3_reg.h:338
+#define P_DDR0_PUB_DX2GCR3 		MMC_REG_ADDR(DDR0_PUB_DX2GCR3)
+#define DDR0_PUB_DX2GSR0 (0x1000 + (0xE4 << 2)) 	///../ucode/ddr3_reg.h:339
+#define P_DDR0_PUB_DX2GSR0 		MMC_REG_ADDR(DDR0_PUB_DX2GSR0)
+#define DDR0_PUB_DX2GSR1 (0x1000 + (0xE5 << 2)) 	///../ucode/ddr3_reg.h:340
+#define P_DDR0_PUB_DX2GSR1 		MMC_REG_ADDR(DDR0_PUB_DX2GSR1)
+#define DDR0_PUB_DX2GSR2 (0x1000 + (0xE6 << 2)) 	///../ucode/ddr3_reg.h:341
+#define P_DDR0_PUB_DX2GSR2 		MMC_REG_ADDR(DDR0_PUB_DX2GSR2)
+#define DDR0_PUB_DX2BDLR0 (0x1000 + (0xE7 << 2)) 	///../ucode/ddr3_reg.h:342
+#define P_DDR0_PUB_DX2BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX2BDLR0)
+#define DDR0_PUB_DX2BDLR1 (0x1000 + (0xE8 << 2)) 	///../ucode/ddr3_reg.h:343
+#define P_DDR0_PUB_DX2BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX2BDLR1)
+#define DDR0_PUB_DX2BDLR2 (0x1000 + (0xE9 << 2)) 	///../ucode/ddr3_reg.h:344
+#define P_DDR0_PUB_DX2BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX2BDLR2)
+#define DDR0_PUB_DX2BDLR3 (0x1000 + (0xEA << 2)) 	///../ucode/ddr3_reg.h:345
+#define P_DDR0_PUB_DX2BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX2BDLR3)
+#define DDR0_PUB_DX2BDLR4 (0x1000 + (0xEB << 2)) 	///../ucode/ddr3_reg.h:346
+#define P_DDR0_PUB_DX2BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX2BDLR4)
+#define DDR0_PUB_DX2BDLR5 (0x1000 + (0xEC << 2)) 	///../ucode/ddr3_reg.h:347
+#define P_DDR0_PUB_DX2BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX2BDLR5)
+#define DDR0_PUB_DX2BDLR6 (0x1000 + (0xED << 2)) 	///../ucode/ddr3_reg.h:348
+#define P_DDR0_PUB_DX2BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX2BDLR6)
+#define DDR0_PUB_DX2LCDLR0 (0x1000 + (0xEE << 2)) 	///../ucode/ddr3_reg.h:349
+#define P_DDR0_PUB_DX2LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX2LCDLR0)
+#define DDR0_PUB_DX2LCDLR1 (0x1000 + (0xEF << 2)) 	///../ucode/ddr3_reg.h:350
+#define P_DDR0_PUB_DX2LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX2LCDLR1)
+#define DDR0_PUB_DX2LCDLR2 (0x1000 + (0xF0 << 2)) 	///../ucode/ddr3_reg.h:351
+#define P_DDR0_PUB_DX2LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX2LCDLR2)
+#define DDR0_PUB_DX2MDLR (0x1000 + (0xF1 << 2)) 	///../ucode/ddr3_reg.h:352
+#define P_DDR0_PUB_DX2MDLR 		MMC_REG_ADDR(DDR0_PUB_DX2MDLR)
+#define DDR0_PUB_DX2GTR (0x1000 + (0xF2 << 2)) 	///../ucode/ddr3_reg.h:353
+#define P_DDR0_PUB_DX2GTR 		MMC_REG_ADDR(DDR0_PUB_DX2GTR)
+#define DDR0_PUB_DX3GCR0 (0x1000 + (0x100 << 2)) 	///../ucode/ddr3_reg.h:354
+#define P_DDR0_PUB_DX3GCR0 		MMC_REG_ADDR(DDR0_PUB_DX3GCR0)
+#define DDR0_PUB_DX3GCR1 (0x1000 + (0x101 << 2)) 	///../ucode/ddr3_reg.h:355
+#define P_DDR0_PUB_DX3GCR1 		MMC_REG_ADDR(DDR0_PUB_DX3GCR1)
+#define DDR0_PUB_DX3GCR2 (0x1000 + (0x102 << 2)) 	///../ucode/ddr3_reg.h:356
+#define P_DDR0_PUB_DX3GCR2 		MMC_REG_ADDR(DDR0_PUB_DX3GCR2)
+#define DDR0_PUB_DX3GCR3 (0x1000 + (0x103 << 2)) 	///../ucode/ddr3_reg.h:357
+#define P_DDR0_PUB_DX3GCR3 		MMC_REG_ADDR(DDR0_PUB_DX3GCR3)
+#define DDR0_PUB_DX3GSR0 (0x1000 + (0x104 << 2)) 	///../ucode/ddr3_reg.h:358
+#define P_DDR0_PUB_DX3GSR0 		MMC_REG_ADDR(DDR0_PUB_DX3GSR0)
+#define DDR0_PUB_DX3GSR1 (0x1000 + (0x105 << 2)) 	///../ucode/ddr3_reg.h:359
+#define P_DDR0_PUB_DX3GSR1 		MMC_REG_ADDR(DDR0_PUB_DX3GSR1)
+#define DDR0_PUB_DX3GSR2 (0x1000 + (0x106 << 2)) 	///../ucode/ddr3_reg.h:360
+#define P_DDR0_PUB_DX3GSR2 		MMC_REG_ADDR(DDR0_PUB_DX3GSR2)
+#define DDR0_PUB_DX3BDLR0 (0x1000 + (0x107 << 2)) 	///../ucode/ddr3_reg.h:361
+#define P_DDR0_PUB_DX3BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX3BDLR0)
+#define DDR0_PUB_DX3BDLR1 (0x1000 + (0x108 << 2)) 	///../ucode/ddr3_reg.h:362
+#define P_DDR0_PUB_DX3BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX3BDLR1)
+#define DDR0_PUB_DX3BDLR2 (0x1000 + (0x109 << 2)) 	///../ucode/ddr3_reg.h:363
+#define P_DDR0_PUB_DX3BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX3BDLR2)
+#define DDR0_PUB_DX3BDLR3 (0x1000 + (0x10A << 2)) 	///../ucode/ddr3_reg.h:364
+#define P_DDR0_PUB_DX3BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX3BDLR3)
+#define DDR0_PUB_DX3BDLR4 (0x1000 + (0x10B << 2)) 	///../ucode/ddr3_reg.h:365
+#define P_DDR0_PUB_DX3BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX3BDLR4)
+#define DDR0_PUB_DX3BDLR5 (0x1000 + (0x10C << 2)) 	///../ucode/ddr3_reg.h:366
+#define P_DDR0_PUB_DX3BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX3BDLR5)
+#define DDR0_PUB_DX3BDLR6 (0x1000 + (0x10D << 2)) 	///../ucode/ddr3_reg.h:367
+#define P_DDR0_PUB_DX3BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX3BDLR6)
+#define DDR0_PUB_DX3LCDLR0 (0x1000 + (0x10E << 2)) 	///../ucode/ddr3_reg.h:368
+#define P_DDR0_PUB_DX3LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX3LCDLR0)
+#define DDR0_PUB_DX3LCDLR1 (0x1000 + (0x10F << 2)) 	///../ucode/ddr3_reg.h:369
+#define P_DDR0_PUB_DX3LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX3LCDLR1)
+#define DDR0_PUB_DX3LCDLR2 (0x1000 + (0x110 << 2)) 	///../ucode/ddr3_reg.h:370
+#define P_DDR0_PUB_DX3LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX3LCDLR2)
+#define DDR0_PUB_DX3MDLR (0x1000 + (0x111 << 2)) 	///../ucode/ddr3_reg.h:371
+#define P_DDR0_PUB_DX3MDLR 		MMC_REG_ADDR(DDR0_PUB_DX3MDLR)
+#define DDR0_PUB_DX3GTR (0x1000 + (0x112 << 2)) 	///../ucode/ddr3_reg.h:372
+#define P_DDR0_PUB_DX3GTR 		MMC_REG_ADDR(DDR0_PUB_DX3GTR)
+#define DDR0_PUB_DX4GCR0 (0x1000 + (0x120 << 2)) 	///../ucode/ddr3_reg.h:373
+#define P_DDR0_PUB_DX4GCR0 		MMC_REG_ADDR(DDR0_PUB_DX4GCR0)
+#define DDR0_PUB_DX4GCR1 (0x1000 + (0x121 << 2)) 	///../ucode/ddr3_reg.h:374
+#define P_DDR0_PUB_DX4GCR1 		MMC_REG_ADDR(DDR0_PUB_DX4GCR1)
+#define DDR0_PUB_DX4GCR2 (0x1000 + (0x122 << 2)) 	///../ucode/ddr3_reg.h:375
+#define P_DDR0_PUB_DX4GCR2 		MMC_REG_ADDR(DDR0_PUB_DX4GCR2)
+#define DDR0_PUB_DX4GCR3 (0x1000 + (0x123 << 2)) 	///../ucode/ddr3_reg.h:376
+#define P_DDR0_PUB_DX4GCR3 		MMC_REG_ADDR(DDR0_PUB_DX4GCR3)
+#define DDR0_PUB_DX4GSR0 (0x1000 + (0x124 << 2)) 	///../ucode/ddr3_reg.h:377
+#define P_DDR0_PUB_DX4GSR0 		MMC_REG_ADDR(DDR0_PUB_DX4GSR0)
+#define DDR0_PUB_DX4GSR1 (0x1000 + (0x125 << 2)) 	///../ucode/ddr3_reg.h:378
+#define P_DDR0_PUB_DX4GSR1 		MMC_REG_ADDR(DDR0_PUB_DX4GSR1)
+#define DDR0_PUB_DX4GSR2 (0x1000 + (0x126 << 2)) 	///../ucode/ddr3_reg.h:379
+#define P_DDR0_PUB_DX4GSR2 		MMC_REG_ADDR(DDR0_PUB_DX4GSR2)
+#define DDR0_PUB_DX4BDLR0 (0x1000 + (0x127 << 2)) 	///../ucode/ddr3_reg.h:380
+#define P_DDR0_PUB_DX4BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX4BDLR0)
+#define DDR0_PUB_DX4BDLR1 (0x1000 + (0x128 << 2)) 	///../ucode/ddr3_reg.h:381
+#define P_DDR0_PUB_DX4BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX4BDLR1)
+#define DDR0_PUB_DX4BDLR2 (0x1000 + (0x129 << 2)) 	///../ucode/ddr3_reg.h:382
+#define P_DDR0_PUB_DX4BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX4BDLR2)
+#define DDR0_PUB_DX4BDLR3 (0x1000 + (0x12A << 2)) 	///../ucode/ddr3_reg.h:383
+#define P_DDR0_PUB_DX4BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX4BDLR3)
+#define DDR0_PUB_DX4BDLR4 (0x1000 + (0x12B << 2)) 	///../ucode/ddr3_reg.h:384
+#define P_DDR0_PUB_DX4BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX4BDLR4)
+#define DDR0_PUB_DX4BDLR5 (0x1000 + (0x12C << 2)) 	///../ucode/ddr3_reg.h:385
+#define P_DDR0_PUB_DX4BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX4BDLR5)
+#define DDR0_PUB_DX4BDLR6 (0x1000 + (0x12D << 2)) 	///../ucode/ddr3_reg.h:386
+#define P_DDR0_PUB_DX4BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX4BDLR6)
+#define DDR0_PUB_DX4LCDLR0 (0x1000 + (0x12E << 2)) 	///../ucode/ddr3_reg.h:387
+#define P_DDR0_PUB_DX4LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX4LCDLR0)
+#define DDR0_PUB_DX4LCDLR1 (0x1000 + (0x12F << 2)) 	///../ucode/ddr3_reg.h:388
+#define P_DDR0_PUB_DX4LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX4LCDLR1)
+#define DDR0_PUB_DX4LCDLR2 (0x1000 + (0x130 << 2)) 	///../ucode/ddr3_reg.h:389
+#define P_DDR0_PUB_DX4LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX4LCDLR2)
+#define DDR0_PUB_DX4MDLR (0x1000 + (0x131 << 2)) 	///../ucode/ddr3_reg.h:390
+#define P_DDR0_PUB_DX4MDLR 		MMC_REG_ADDR(DDR0_PUB_DX4MDLR)
+#define DDR0_PUB_DX4GTR (0x1000 + (0x132 << 2)) 	///../ucode/ddr3_reg.h:391
+#define P_DDR0_PUB_DX4GTR 		MMC_REG_ADDR(DDR0_PUB_DX4GTR)
+#define DDR0_PUB_DX5GCR0 (0x1000 + (0x140 << 2)) 	///../ucode/ddr3_reg.h:392
+#define P_DDR0_PUB_DX5GCR0 		MMC_REG_ADDR(DDR0_PUB_DX5GCR0)
+#define DDR0_PUB_DX5GCR1 (0x1000 + (0x141 << 2)) 	///../ucode/ddr3_reg.h:393
+#define P_DDR0_PUB_DX5GCR1 		MMC_REG_ADDR(DDR0_PUB_DX5GCR1)
+#define DDR0_PUB_DX5GCR2 (0x1000 + (0x142 << 2)) 	///../ucode/ddr3_reg.h:394
+#define P_DDR0_PUB_DX5GCR2 		MMC_REG_ADDR(DDR0_PUB_DX5GCR2)
+#define DDR0_PUB_DX5GCR3 (0x1000 + (0x143 << 2)) 	///../ucode/ddr3_reg.h:395
+#define P_DDR0_PUB_DX5GCR3 		MMC_REG_ADDR(DDR0_PUB_DX5GCR3)
+#define DDR0_PUB_DX5GSR0 (0x1000 + (0x144 << 2)) 	///../ucode/ddr3_reg.h:396
+#define P_DDR0_PUB_DX5GSR0 		MMC_REG_ADDR(DDR0_PUB_DX5GSR0)
+#define DDR0_PUB_DX5GSR1 (0x1000 + (0x145 << 2)) 	///../ucode/ddr3_reg.h:397
+#define P_DDR0_PUB_DX5GSR1 		MMC_REG_ADDR(DDR0_PUB_DX5GSR1)
+#define DDR0_PUB_DX5GSR2 (0x1000 + (0x146 << 2)) 	///../ucode/ddr3_reg.h:398
+#define P_DDR0_PUB_DX5GSR2 		MMC_REG_ADDR(DDR0_PUB_DX5GSR2)
+#define DDR0_PUB_DX5BDLR0 (0x1000 + (0x147 << 2)) 	///../ucode/ddr3_reg.h:399
+#define P_DDR0_PUB_DX5BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX5BDLR0)
+#define DDR0_PUB_DX5BDLR1 (0x1000 + (0x148 << 2)) 	///../ucode/ddr3_reg.h:400
+#define P_DDR0_PUB_DX5BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX5BDLR1)
+#define DDR0_PUB_DX5BDLR2 (0x1000 + (0x149 << 2)) 	///../ucode/ddr3_reg.h:401
+#define P_DDR0_PUB_DX5BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX5BDLR2)
+#define DDR0_PUB_DX5BDLR3 (0x1000 + (0x14A << 2)) 	///../ucode/ddr3_reg.h:402
+#define P_DDR0_PUB_DX5BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX5BDLR3)
+#define DDR0_PUB_DX5BDLR4 (0x1000 + (0x14B << 2)) 	///../ucode/ddr3_reg.h:403
+#define P_DDR0_PUB_DX5BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX5BDLR4)
+#define DDR0_PUB_DX5BDLR5 (0x1000 + (0x14C << 2)) 	///../ucode/ddr3_reg.h:404
+#define P_DDR0_PUB_DX5BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX5BDLR5)
+#define DDR0_PUB_DX5BDLR6 (0x1000 + (0x14D << 2)) 	///../ucode/ddr3_reg.h:405
+#define P_DDR0_PUB_DX5BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX5BDLR6)
+#define DDR0_PUB_DX5LCDLR0 (0x1000 + (0x14E << 2)) 	///../ucode/ddr3_reg.h:406
+#define P_DDR0_PUB_DX5LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX5LCDLR0)
+#define DDR0_PUB_DX5LCDLR1 (0x1000 + (0x14F << 2)) 	///../ucode/ddr3_reg.h:407
+#define P_DDR0_PUB_DX5LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX5LCDLR1)
+#define DDR0_PUB_DX5LCDLR2 (0x1000 + (0x150 << 2)) 	///../ucode/ddr3_reg.h:408
+#define P_DDR0_PUB_DX5LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX5LCDLR2)
+#define DDR0_PUB_DX5MDLR (0x1000 + (0x151 << 2)) 	///../ucode/ddr3_reg.h:409
+#define P_DDR0_PUB_DX5MDLR 		MMC_REG_ADDR(DDR0_PUB_DX5MDLR)
+#define DDR0_PUB_DX5GTR (0x1000 + (0x152 << 2)) 	///../ucode/ddr3_reg.h:410
+#define P_DDR0_PUB_DX5GTR 		MMC_REG_ADDR(DDR0_PUB_DX5GTR)
+#define DDR0_PUB_DX6GCR0 (0x1000 + (0x160 << 2)) 	///../ucode/ddr3_reg.h:411
+#define P_DDR0_PUB_DX6GCR0 		MMC_REG_ADDR(DDR0_PUB_DX6GCR0)
+#define DDR0_PUB_DX6GCR1 (0x1000 + (0x161 << 2)) 	///../ucode/ddr3_reg.h:412
+#define P_DDR0_PUB_DX6GCR1 		MMC_REG_ADDR(DDR0_PUB_DX6GCR1)
+#define DDR0_PUB_DX6GCR2 (0x1000 + (0x162 << 2)) 	///../ucode/ddr3_reg.h:413
+#define P_DDR0_PUB_DX6GCR2 		MMC_REG_ADDR(DDR0_PUB_DX6GCR2)
+#define DDR0_PUB_DX6GCR3 (0x1000 + (0x163 << 2)) 	///../ucode/ddr3_reg.h:414
+#define P_DDR0_PUB_DX6GCR3 		MMC_REG_ADDR(DDR0_PUB_DX6GCR3)
+#define DDR0_PUB_DX6GSR0 (0x1000 + (0x164 << 2)) 	///../ucode/ddr3_reg.h:415
+#define P_DDR0_PUB_DX6GSR0 		MMC_REG_ADDR(DDR0_PUB_DX6GSR0)
+#define DDR0_PUB_DX6GSR1 (0x1000 + (0x165 << 2)) 	///../ucode/ddr3_reg.h:416
+#define P_DDR0_PUB_DX6GSR1 		MMC_REG_ADDR(DDR0_PUB_DX6GSR1)
+#define DDR0_PUB_DX6GSR2 (0x1000 + (0x166 << 2)) 	///../ucode/ddr3_reg.h:417
+#define P_DDR0_PUB_DX6GSR2 		MMC_REG_ADDR(DDR0_PUB_DX6GSR2)
+#define DDR0_PUB_DX6BDLR0 (0x1000 + (0x167 << 2)) 	///../ucode/ddr3_reg.h:418
+#define P_DDR0_PUB_DX6BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX6BDLR0)
+#define DDR0_PUB_DX6BDLR1 (0x1000 + (0x168 << 2)) 	///../ucode/ddr3_reg.h:419
+#define P_DDR0_PUB_DX6BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX6BDLR1)
+#define DDR0_PUB_DX6BDLR2 (0x1000 + (0x169 << 2)) 	///../ucode/ddr3_reg.h:420
+#define P_DDR0_PUB_DX6BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX6BDLR2)
+#define DDR0_PUB_DX6BDLR3 (0x1000 + (0x16A << 2)) 	///../ucode/ddr3_reg.h:421
+#define P_DDR0_PUB_DX6BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX6BDLR3)
+#define DDR0_PUB_DX6BDLR4 (0x1000 + (0x16B << 2)) 	///../ucode/ddr3_reg.h:422
+#define P_DDR0_PUB_DX6BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX6BDLR4)
+#define DDR0_PUB_DX6BDLR5 (0x1000 + (0x16C << 2)) 	///../ucode/ddr3_reg.h:423
+#define P_DDR0_PUB_DX6BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX6BDLR5)
+#define DDR0_PUB_DX6BDLR6 (0x1000 + (0x16D << 2)) 	///../ucode/ddr3_reg.h:424
+#define P_DDR0_PUB_DX6BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX6BDLR6)
+#define DDR0_PUB_DX6LCDLR0 (0x1000 + (0x16E << 2)) 	///../ucode/ddr3_reg.h:425
+#define P_DDR0_PUB_DX6LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX6LCDLR0)
+#define DDR0_PUB_DX6LCDLR1 (0x1000 + (0x16F << 2)) 	///../ucode/ddr3_reg.h:426
+#define P_DDR0_PUB_DX6LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX6LCDLR1)
+#define DDR0_PUB_DX6LCDLR2 (0x1000 + (0x170 << 2)) 	///../ucode/ddr3_reg.h:427
+#define P_DDR0_PUB_DX6LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX6LCDLR2)
+#define DDR0_PUB_DX6MDLR (0x1000 + (0x171 << 2)) 	///../ucode/ddr3_reg.h:428
+#define P_DDR0_PUB_DX6MDLR 		MMC_REG_ADDR(DDR0_PUB_DX6MDLR)
+#define DDR0_PUB_DX6GTR (0x1000 + (0x172 << 2)) 	///../ucode/ddr3_reg.h:429
+#define P_DDR0_PUB_DX6GTR 		MMC_REG_ADDR(DDR0_PUB_DX6GTR)
+#define DDR0_PUB_DX7GCR0 (0x1000 + (0x180 << 2)) 	///../ucode/ddr3_reg.h:430
+#define P_DDR0_PUB_DX7GCR0 		MMC_REG_ADDR(DDR0_PUB_DX7GCR0)
+#define DDR0_PUB_DX7GCR1 (0x1000 + (0x181 << 2)) 	///../ucode/ddr3_reg.h:431
+#define P_DDR0_PUB_DX7GCR1 		MMC_REG_ADDR(DDR0_PUB_DX7GCR1)
+#define DDR0_PUB_DX7GCR2 (0x1000 + (0x182 << 2)) 	///../ucode/ddr3_reg.h:432
+#define P_DDR0_PUB_DX7GCR2 		MMC_REG_ADDR(DDR0_PUB_DX7GCR2)
+#define DDR0_PUB_DX7GCR3 (0x1000 + (0x183 << 2)) 	///../ucode/ddr3_reg.h:433
+#define P_DDR0_PUB_DX7GCR3 		MMC_REG_ADDR(DDR0_PUB_DX7GCR3)
+#define DDR0_PUB_DX7GSR0 (0x1000 + (0x184 << 2)) 	///../ucode/ddr3_reg.h:434
+#define P_DDR0_PUB_DX7GSR0 		MMC_REG_ADDR(DDR0_PUB_DX7GSR0)
+#define DDR0_PUB_DX7GSR1 (0x1000 + (0x185 << 2)) 	///../ucode/ddr3_reg.h:435
+#define P_DDR0_PUB_DX7GSR1 		MMC_REG_ADDR(DDR0_PUB_DX7GSR1)
+#define DDR0_PUB_DX7GSR2 (0x1000 + (0x186 << 2)) 	///../ucode/ddr3_reg.h:436
+#define P_DDR0_PUB_DX7GSR2 		MMC_REG_ADDR(DDR0_PUB_DX7GSR2)
+#define DDR0_PUB_DX7BDLR0 (0x1000 + (0x187 << 2)) 	///../ucode/ddr3_reg.h:437
+#define P_DDR0_PUB_DX7BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX7BDLR0)
+#define DDR0_PUB_DX7BDLR1 (0x1000 + (0x188 << 2)) 	///../ucode/ddr3_reg.h:438
+#define P_DDR0_PUB_DX7BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX7BDLR1)
+#define DDR0_PUB_DX7BDLR2 (0x1000 + (0x189 << 2)) 	///../ucode/ddr3_reg.h:439
+#define P_DDR0_PUB_DX7BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX7BDLR2)
+#define DDR0_PUB_DX7BDLR3 (0x1000 + (0x18A << 2)) 	///../ucode/ddr3_reg.h:440
+#define P_DDR0_PUB_DX7BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX7BDLR3)
+#define DDR0_PUB_DX7BDLR4 (0x1000 + (0x18B << 2)) 	///../ucode/ddr3_reg.h:441
+#define P_DDR0_PUB_DX7BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX7BDLR4)
+#define DDR0_PUB_DX7BDLR5 (0x1000 + (0x18C << 2)) 	///../ucode/ddr3_reg.h:442
+#define P_DDR0_PUB_DX7BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX7BDLR5)
+#define DDR0_PUB_DX7BDLR6 (0x1000 + (0x18D << 2)) 	///../ucode/ddr3_reg.h:443
+#define P_DDR0_PUB_DX7BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX7BDLR6)
+#define DDR0_PUB_DX7LCDLR0 (0x1000 + (0x18E << 2)) 	///../ucode/ddr3_reg.h:444
+#define P_DDR0_PUB_DX7LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX7LCDLR0)
+#define DDR0_PUB_DX7LCDLR1 (0x1000 + (0x18F << 2)) 	///../ucode/ddr3_reg.h:445
+#define P_DDR0_PUB_DX7LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX7LCDLR1)
+#define DDR0_PUB_DX7LCDLR2 (0x1000 + (0x190 << 2)) 	///../ucode/ddr3_reg.h:446
+#define P_DDR0_PUB_DX7LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX7LCDLR2)
+#define DDR0_PUB_DX7MDLR (0x1000 + (0x191 << 2)) 	///../ucode/ddr3_reg.h:447
+#define P_DDR0_PUB_DX7MDLR 		MMC_REG_ADDR(DDR0_PUB_DX7MDLR)
+#define DDR0_PUB_DX7GTR (0x1000 + (0x192 << 2)) 	///../ucode/ddr3_reg.h:448
+#define P_DDR0_PUB_DX7GTR 		MMC_REG_ADDR(DDR0_PUB_DX7GTR)
+#define DDR0_PUB_DX8GCR0 (0x1000 + (0x1A0 << 2)) 	///../ucode/ddr3_reg.h:449
+#define P_DDR0_PUB_DX8GCR0 		MMC_REG_ADDR(DDR0_PUB_DX8GCR0)
+#define DDR0_PUB_DX8GCR1 (0x1000 + (0x1A1 << 2)) 	///../ucode/ddr3_reg.h:450
+#define P_DDR0_PUB_DX8GCR1 		MMC_REG_ADDR(DDR0_PUB_DX8GCR1)
+#define DDR0_PUB_DX8GCR2 (0x1000 + (0x1A2 << 2)) 	///../ucode/ddr3_reg.h:451
+#define P_DDR0_PUB_DX8GCR2 		MMC_REG_ADDR(DDR0_PUB_DX8GCR2)
+#define DDR0_PUB_DX8GCR3 (0x1000 + (0x1A3 << 2)) 	///../ucode/ddr3_reg.h:452
+#define P_DDR0_PUB_DX8GCR3 		MMC_REG_ADDR(DDR0_PUB_DX8GCR3)
+#define DDR0_PUB_DX8GSR0 (0x1000 + (0x1A4 << 2)) 	///../ucode/ddr3_reg.h:453
+#define P_DDR0_PUB_DX8GSR0 		MMC_REG_ADDR(DDR0_PUB_DX8GSR0)
+#define DDR0_PUB_DX8GSR1 (0x1000 + (0x1A5 << 2)) 	///../ucode/ddr3_reg.h:454
+#define P_DDR0_PUB_DX8GSR1 		MMC_REG_ADDR(DDR0_PUB_DX8GSR1)
+#define DDR0_PUB_DX8GSR2 (0x1000 + (0x1A6 << 2)) 	///../ucode/ddr3_reg.h:455
+#define P_DDR0_PUB_DX8GSR2 		MMC_REG_ADDR(DDR0_PUB_DX8GSR2)
+#define DDR0_PUB_DX8BDLR0 (0x1000 + (0x1A7 << 2)) 	///../ucode/ddr3_reg.h:456
+#define P_DDR0_PUB_DX8BDLR0 		MMC_REG_ADDR(DDR0_PUB_DX8BDLR0)
+#define DDR0_PUB_DX8BDLR1 (0x1000 + (0x1A8 << 2)) 	///../ucode/ddr3_reg.h:457
+#define P_DDR0_PUB_DX8BDLR1 		MMC_REG_ADDR(DDR0_PUB_DX8BDLR1)
+#define DDR0_PUB_DX8BDLR2 (0x1000 + (0x1A9 << 2)) 	///../ucode/ddr3_reg.h:458
+#define P_DDR0_PUB_DX8BDLR2 		MMC_REG_ADDR(DDR0_PUB_DX8BDLR2)
+#define DDR0_PUB_DX8BDLR3 (0x1000 + (0x1AA << 2)) 	///../ucode/ddr3_reg.h:459
+#define P_DDR0_PUB_DX8BDLR3 		MMC_REG_ADDR(DDR0_PUB_DX8BDLR3)
+#define DDR0_PUB_DX8BDLR4 (0x1000 + (0x1AB << 2)) 	///../ucode/ddr3_reg.h:460
+#define P_DDR0_PUB_DX8BDLR4 		MMC_REG_ADDR(DDR0_PUB_DX8BDLR4)
+#define DDR0_PUB_DX8BDLR5 (0x1000 + (0x1AC << 2)) 	///../ucode/ddr3_reg.h:461
+#define P_DDR0_PUB_DX8BDLR5 		MMC_REG_ADDR(DDR0_PUB_DX8BDLR5)
+#define DDR0_PUB_DX8BDLR6 (0x1000 + (0x1AD << 2)) 	///../ucode/ddr3_reg.h:462
+#define P_DDR0_PUB_DX8BDLR6 		MMC_REG_ADDR(DDR0_PUB_DX8BDLR6)
+#define DDR0_PUB_DX8LCDLR0 (0x1000 + (0x1AE << 2)) 	///../ucode/ddr3_reg.h:463
+#define P_DDR0_PUB_DX8LCDLR0 		MMC_REG_ADDR(DDR0_PUB_DX8LCDLR0)
+#define DDR0_PUB_DX8LCDLR1 (0x1000 + (0x1AF << 2)) 	///../ucode/ddr3_reg.h:464
+#define P_DDR0_PUB_DX8LCDLR1 		MMC_REG_ADDR(DDR0_PUB_DX8LCDLR1)
+#define DDR0_PUB_DX8LCDLR2 (0x1000 + (0x1B0 << 2)) 	///../ucode/ddr3_reg.h:465
+#define P_DDR0_PUB_DX8LCDLR2 		MMC_REG_ADDR(DDR0_PUB_DX8LCDLR2)
+#define DDR0_PUB_DX8MDLR (0x1000 + (0x1B1 << 2)) 	///../ucode/ddr3_reg.h:466
+#define P_DDR0_PUB_DX8MDLR 		MMC_REG_ADDR(DDR0_PUB_DX8MDLR)
+#define DDR0_PUB_DX8GTR (0x1000 + (0x1B2 << 2)) 	///../ucode/ddr3_reg.h:467
+#define P_DDR0_PUB_DX8GTR 		MMC_REG_ADDR(DDR0_PUB_DX8GTR)
+#define DDR1_CLK_CTRL 0x2800 	///../ucode/ddr3_reg.h:471
+#define P_DDR1_CLK_CTRL 		MMC_REG_ADDR(DDR1_CLK_CTRL)
+#define DDR1_SOFT_RESET 0x2804 	///../ucode/ddr3_reg.h:472
+#define P_DDR1_SOFT_RESET 		MMC_REG_ADDR(DDR1_SOFT_RESET)
+#define DDR1_APD_CTRL 0x2808 	///../ucode/ddr3_reg.h:473
+#define P_DDR1_APD_CTRL 		MMC_REG_ADDR(DDR1_APD_CTRL)
+#define DDR1_PCTL_SCFG 0x2000 	///../ucode/ddr3_reg.h:475
+#define P_DDR1_PCTL_SCFG 		MMC_REG_ADDR(DDR1_PCTL_SCFG)
+#define DDR1_PCTL_SCTL 0x2004 	///../ucode/ddr3_reg.h:476
+#define P_DDR1_PCTL_SCTL 		MMC_REG_ADDR(DDR1_PCTL_SCTL)
+#define DDR1_PCTL_STAT 0x2008 	///../ucode/ddr3_reg.h:477
+#define P_DDR1_PCTL_STAT 		MMC_REG_ADDR(DDR1_PCTL_STAT)
+#define DDR1_PCTL_INTRSTAT 0x200c 	///../ucode/ddr3_reg.h:478
+#define P_DDR1_PCTL_INTRSTAT 		MMC_REG_ADDR(DDR1_PCTL_INTRSTAT)
+#define DDR1_PCTL_POWSTAT 0x2048 	///../ucode/ddr3_reg.h:479
+#define P_DDR1_PCTL_POWSTAT 		MMC_REG_ADDR(DDR1_PCTL_POWSTAT)
+#define DDR1_PCTL_MRRSTAT0 0x2064 	///../ucode/ddr3_reg.h:480
+#define P_DDR1_PCTL_MRRSTAT0 		MMC_REG_ADDR(DDR1_PCTL_MRRSTAT0)
+#define DDR1_PCTL_CMDTSTAT 0x204c 	///../ucode/ddr3_reg.h:481
+#define P_DDR1_PCTL_CMDTSTAT 		MMC_REG_ADDR(DDR1_PCTL_CMDTSTAT)
+#define DDR1_PCTL_MCMD 0x2040 	///../ucode/ddr3_reg.h:482
+#define P_DDR1_PCTL_MCMD 		MMC_REG_ADDR(DDR1_PCTL_MCMD)
+#define DDR1_PCTL_MRRSTAT1 0x2068 	///../ucode/ddr3_reg.h:483
+#define P_DDR1_PCTL_MRRSTAT1 		MMC_REG_ADDR(DDR1_PCTL_MRRSTAT1)
+#define DDR1_PCTL_MRRCFG0 0x2060 	///../ucode/ddr3_reg.h:484
+#define P_DDR1_PCTL_MRRCFG0 		MMC_REG_ADDR(DDR1_PCTL_MRRCFG0)
+#define DDR1_PCTL_CMDTSTATEN 0x2050 	///../ucode/ddr3_reg.h:485
+#define P_DDR1_PCTL_CMDTSTATEN 		MMC_REG_ADDR(DDR1_PCTL_CMDTSTATEN)
+#define DDR1_PCTL_POWCTL 0x2044 	///../ucode/ddr3_reg.h:486
+#define P_DDR1_PCTL_POWCTL 		MMC_REG_ADDR(DDR1_PCTL_POWCTL)
+#define DDR1_PCTL_PPCFG 0x2084 	///../ucode/ddr3_reg.h:487
+#define P_DDR1_PCTL_PPCFG 		MMC_REG_ADDR(DDR1_PCTL_PPCFG)
+#define DDR1_PCTL_LPDDR23ZQCFG 0x208c 	///../ucode/ddr3_reg.h:488
+#define P_DDR1_PCTL_LPDDR23ZQCFG 		MMC_REG_ADDR(DDR1_PCTL_LPDDR23ZQCFG)
+#define DDR1_PCTL_MCFG1 0x207c 	///../ucode/ddr3_reg.h:489
+#define P_DDR1_PCTL_MCFG1 		MMC_REG_ADDR(DDR1_PCTL_MCFG1)
+#define DDR1_PCTL_MSTAT 0x2088 	///../ucode/ddr3_reg.h:490
+#define P_DDR1_PCTL_MSTAT 		MMC_REG_ADDR(DDR1_PCTL_MSTAT)
+#define DDR1_PCTL_MCFG 0x2080 	///../ucode/ddr3_reg.h:491
+#define P_DDR1_PCTL_MCFG 		MMC_REG_ADDR(DDR1_PCTL_MCFG)
+#define DDR1_PCTL_DTUAWDT 0x20b0 	///../ucode/ddr3_reg.h:492
+#define P_DDR1_PCTL_DTUAWDT 		MMC_REG_ADDR(DDR1_PCTL_DTUAWDT)
+#define DDR1_PCTL_DTUPRD2 0x20a8 	///../ucode/ddr3_reg.h:493
+#define P_DDR1_PCTL_DTUPRD2 		MMC_REG_ADDR(DDR1_PCTL_DTUPRD2)
+#define DDR1_PCTL_DTUPRD3 0x20ac 	///../ucode/ddr3_reg.h:494
+#define P_DDR1_PCTL_DTUPRD3 		MMC_REG_ADDR(DDR1_PCTL_DTUPRD3)
+#define DDR1_PCTL_DTUNE 0x209c 	///../ucode/ddr3_reg.h:495
+#define P_DDR1_PCTL_DTUNE 		MMC_REG_ADDR(DDR1_PCTL_DTUNE)
+#define DDR1_PCTL_DTUPDES 0x2094 	///../ucode/ddr3_reg.h:496
+#define P_DDR1_PCTL_DTUPDES 		MMC_REG_ADDR(DDR1_PCTL_DTUPDES)
+#define DDR1_PCTL_DTUNA 0x2098 	///../ucode/ddr3_reg.h:497
+#define P_DDR1_PCTL_DTUNA 		MMC_REG_ADDR(DDR1_PCTL_DTUNA)
+#define DDR1_PCTL_DTUPRD0 0x20a0 	///../ucode/ddr3_reg.h:498
+#define P_DDR1_PCTL_DTUPRD0 		MMC_REG_ADDR(DDR1_PCTL_DTUPRD0)
+#define DDR1_PCTL_DTUPRD1 0x20a4 	///../ucode/ddr3_reg.h:499
+#define P_DDR1_PCTL_DTUPRD1 		MMC_REG_ADDR(DDR1_PCTL_DTUPRD1)
+#define DDR1_PCTL_TCKSRE 0x2124 	///../ucode/ddr3_reg.h:500
+#define P_DDR1_PCTL_TCKSRE 		MMC_REG_ADDR(DDR1_PCTL_TCKSRE)
+#define DDR1_PCTL_TZQCSI 0x211c 	///../ucode/ddr3_reg.h:501
+#define P_DDR1_PCTL_TZQCSI 		MMC_REG_ADDR(DDR1_PCTL_TZQCSI)
+#define DDR1_PCTL_TINIT 0x20c4 	///../ucode/ddr3_reg.h:502
+#define P_DDR1_PCTL_TINIT 		MMC_REG_ADDR(DDR1_PCTL_TINIT)
+#define DDR1_PCTL_TDPD 0x2144 	///../ucode/ddr3_reg.h:503
+#define P_DDR1_PCTL_TDPD 		MMC_REG_ADDR(DDR1_PCTL_TDPD)
+#define DDR1_PCTL_TOGCNT1U 0x20c0 	///../ucode/ddr3_reg.h:504
+#define P_DDR1_PCTL_TOGCNT1U 		MMC_REG_ADDR(DDR1_PCTL_TOGCNT1U)
+#define DDR1_PCTL_TCKE 0x212c 	///../ucode/ddr3_reg.h:505
+#define P_DDR1_PCTL_TCKE 		MMC_REG_ADDR(DDR1_PCTL_TCKE)
+#define DDR1_PCTL_TMOD 0x2130 	///../ucode/ddr3_reg.h:506
+#define P_DDR1_PCTL_TMOD 		MMC_REG_ADDR(DDR1_PCTL_TMOD)
+#define DDR1_PCTL_TEXSR 0x210c 	///../ucode/ddr3_reg.h:507
+#define P_DDR1_PCTL_TEXSR 		MMC_REG_ADDR(DDR1_PCTL_TEXSR)
+#define DDR1_PCTL_TAL 0x20e4 	///../ucode/ddr3_reg.h:508
+#define P_DDR1_PCTL_TAL 		MMC_REG_ADDR(DDR1_PCTL_TAL)
+#define DDR1_PCTL_TRTP 0x2100 	///../ucode/ddr3_reg.h:509
+#define P_DDR1_PCTL_TRTP 		MMC_REG_ADDR(DDR1_PCTL_TRTP)
+#define DDR1_PCTL_TCKSRX 0x2128 	///../ucode/ddr3_reg.h:510
+#define P_DDR1_PCTL_TCKSRX 		MMC_REG_ADDR(DDR1_PCTL_TCKSRX)
+#define DDR1_PCTL_TRTW 0x20e0 	///../ucode/ddr3_reg.h:511
+#define P_DDR1_PCTL_TRTW 		MMC_REG_ADDR(DDR1_PCTL_TRTW)
+#define DDR1_PCTL_TCWL 0x20ec 	///../ucode/ddr3_reg.h:512
+#define P_DDR1_PCTL_TCWL 		MMC_REG_ADDR(DDR1_PCTL_TCWL)
+#define DDR1_PCTL_TWR 0x2104 	///../ucode/ddr3_reg.h:513
+#define P_DDR1_PCTL_TWR 		MMC_REG_ADDR(DDR1_PCTL_TWR)
+#define DDR1_PCTL_TCL 0x20e8 	///../ucode/ddr3_reg.h:514
+#define P_DDR1_PCTL_TCL 		MMC_REG_ADDR(DDR1_PCTL_TCL)
+#define DDR1_PCTL_TDQS 0x2120 	///../ucode/ddr3_reg.h:515
+#define P_DDR1_PCTL_TDQS 		MMC_REG_ADDR(DDR1_PCTL_TDQS)
+#define DDR1_PCTL_TRSTH 0x20c8 	///../ucode/ddr3_reg.h:516
+#define P_DDR1_PCTL_TRSTH 		MMC_REG_ADDR(DDR1_PCTL_TRSTH)
+#define DDR1_PCTL_TRCD 0x20f8 	///../ucode/ddr3_reg.h:517
+#define P_DDR1_PCTL_TRCD 		MMC_REG_ADDR(DDR1_PCTL_TRCD)
+#define DDR1_PCTL_TXP 0x2110 	///../ucode/ddr3_reg.h:518
+#define P_DDR1_PCTL_TXP 		MMC_REG_ADDR(DDR1_PCTL_TXP)
+#define DDR1_PCTL_TOGCNT100N 0x20cc 	///../ucode/ddr3_reg.h:519
+#define P_DDR1_PCTL_TOGCNT100N 		MMC_REG_ADDR(DDR1_PCTL_TOGCNT100N)
+#define DDR1_PCTL_TMRD 0x20d4 	///../ucode/ddr3_reg.h:520
+#define P_DDR1_PCTL_TMRD 		MMC_REG_ADDR(DDR1_PCTL_TMRD)
+#define DDR1_PCTL_TRSTL 0x2134 	///../ucode/ddr3_reg.h:521
+#define P_DDR1_PCTL_TRSTL 		MMC_REG_ADDR(DDR1_PCTL_TRSTL)
+#define DDR1_PCTL_TREFI 0x20d0 	///../ucode/ddr3_reg.h:522
+#define P_DDR1_PCTL_TREFI 		MMC_REG_ADDR(DDR1_PCTL_TREFI)
+#define DDR1_PCTL_TRAS 0x20f0 	///../ucode/ddr3_reg.h:523
+#define P_DDR1_PCTL_TRAS 		MMC_REG_ADDR(DDR1_PCTL_TRAS)
+#define DDR1_PCTL_TREFI_MEM_DDR3 0x2148 	///../ucode/ddr3_reg.h:524
+#define P_DDR1_PCTL_TREFI_MEM_DDR3 		MMC_REG_ADDR(DDR1_PCTL_TREFI_MEM_DDR3)
+#define DDR1_PCTL_TWTR 0x2108 	///../ucode/ddr3_reg.h:525
+#define P_DDR1_PCTL_TWTR 		MMC_REG_ADDR(DDR1_PCTL_TWTR)
+#define DDR1_PCTL_TRC 0x20f4 	///../ucode/ddr3_reg.h:526
+#define P_DDR1_PCTL_TRC 		MMC_REG_ADDR(DDR1_PCTL_TRC)
+#define DDR1_PCTL_TRFC 0x20d8 	///../ucode/ddr3_reg.h:527
+#define P_DDR1_PCTL_TRFC 		MMC_REG_ADDR(DDR1_PCTL_TRFC)
+#define DDR1_PCTL_TMRR 0x213c 	///../ucode/ddr3_reg.h:528
+#define P_DDR1_PCTL_TMRR 		MMC_REG_ADDR(DDR1_PCTL_TMRR)
+#define DDR1_PCTL_TCKESR 0x2140 	///../ucode/ddr3_reg.h:529
+#define P_DDR1_PCTL_TCKESR 		MMC_REG_ADDR(DDR1_PCTL_TCKESR)
+#define DDR1_PCTL_TZQCL 0x2138 	///../ucode/ddr3_reg.h:530
+#define P_DDR1_PCTL_TZQCL 		MMC_REG_ADDR(DDR1_PCTL_TZQCL)
+#define DDR1_PCTL_TRRD 0x20fc 	///../ucode/ddr3_reg.h:531
+#define P_DDR1_PCTL_TRRD 		MMC_REG_ADDR(DDR1_PCTL_TRRD)
+#define DDR1_PCTL_TRP 0x20dc 	///../ucode/ddr3_reg.h:532
+#define P_DDR1_PCTL_TRP 		MMC_REG_ADDR(DDR1_PCTL_TRP)
+#define DDR1_PCTL_TZQCS 0x2118 	///../ucode/ddr3_reg.h:533
+#define P_DDR1_PCTL_TZQCS 		MMC_REG_ADDR(DDR1_PCTL_TZQCS)
+#define DDR1_PCTL_TXPDLL 0x2114 	///../ucode/ddr3_reg.h:534
+#define P_DDR1_PCTL_TXPDLL 		MMC_REG_ADDR(DDR1_PCTL_TXPDLL)
+#define DDR1_PCTL_ECCCFG 0x2180 	///../ucode/ddr3_reg.h:535
+#define P_DDR1_PCTL_ECCCFG 		MMC_REG_ADDR(DDR1_PCTL_ECCCFG)
+#define DDR1_PCTL_ECCLOG 0x218c 	///../ucode/ddr3_reg.h:536
+#define P_DDR1_PCTL_ECCLOG 		MMC_REG_ADDR(DDR1_PCTL_ECCLOG)
+#define DDR1_PCTL_ECCCLR 0x2188 	///../ucode/ddr3_reg.h:537
+#define P_DDR1_PCTL_ECCCLR 		MMC_REG_ADDR(DDR1_PCTL_ECCCLR)
+#define DDR1_PCTL_ECCTST 0x2184 	///../ucode/ddr3_reg.h:538
+#define P_DDR1_PCTL_ECCTST 		MMC_REG_ADDR(DDR1_PCTL_ECCTST)
+#define DDR1_PCTL_DTUWD0 0x2210 	///../ucode/ddr3_reg.h:539
+#define P_DDR1_PCTL_DTUWD0 		MMC_REG_ADDR(DDR1_PCTL_DTUWD0)
+#define DDR1_PCTL_DTUWD1 0x2214 	///../ucode/ddr3_reg.h:540
+#define P_DDR1_PCTL_DTUWD1 		MMC_REG_ADDR(DDR1_PCTL_DTUWD1)
+#define DDR1_PCTL_DTUWACTL 0x2200 	///../ucode/ddr3_reg.h:541
+#define P_DDR1_PCTL_DTUWACTL 		MMC_REG_ADDR(DDR1_PCTL_DTUWACTL)
+#define DDR1_PCTL_DTULFSRRD 0x2238 	///../ucode/ddr3_reg.h:542
+#define P_DDR1_PCTL_DTULFSRRD 		MMC_REG_ADDR(DDR1_PCTL_DTULFSRRD)
+#define DDR1_PCTL_DTUWD2 0x2218 	///../ucode/ddr3_reg.h:543
+#define P_DDR1_PCTL_DTUWD2 		MMC_REG_ADDR(DDR1_PCTL_DTUWD2)
+#define DDR1_PCTL_DTUWD3 0x221c 	///../ucode/ddr3_reg.h:544
+#define P_DDR1_PCTL_DTUWD3 		MMC_REG_ADDR(DDR1_PCTL_DTUWD3)
+#define DDR1_PCTL_DTULFSRWD 0x2234 	///../ucode/ddr3_reg.h:545
+#define P_DDR1_PCTL_DTULFSRWD 		MMC_REG_ADDR(DDR1_PCTL_DTULFSRWD)
+#define DDR1_PCTL_DTURACTL 0x2204 	///../ucode/ddr3_reg.h:546
+#define P_DDR1_PCTL_DTURACTL 		MMC_REG_ADDR(DDR1_PCTL_DTURACTL)
+#define DDR1_PCTL_DTUWDM 0x2220 	///../ucode/ddr3_reg.h:547
+#define P_DDR1_PCTL_DTUWDM 		MMC_REG_ADDR(DDR1_PCTL_DTUWDM)
+#define DDR1_PCTL_DTURD0 0x2224 	///../ucode/ddr3_reg.h:548
+#define P_DDR1_PCTL_DTURD0 		MMC_REG_ADDR(DDR1_PCTL_DTURD0)
+#define DDR1_PCTL_DTURD1 0x2228 	///../ucode/ddr3_reg.h:549
+#define P_DDR1_PCTL_DTURD1 		MMC_REG_ADDR(DDR1_PCTL_DTURD1)
+#define DDR1_PCTL_DTURD2 0x222c 	///../ucode/ddr3_reg.h:550
+#define P_DDR1_PCTL_DTURD2 		MMC_REG_ADDR(DDR1_PCTL_DTURD2)
+#define DDR1_PCTL_DTURD3 0x2230 	///../ucode/ddr3_reg.h:551
+#define P_DDR1_PCTL_DTURD3 		MMC_REG_ADDR(DDR1_PCTL_DTURD3)
+#define DDR1_PCTL_DTUCFG 0x2208 	///../ucode/ddr3_reg.h:552
+#define P_DDR1_PCTL_DTUCFG 		MMC_REG_ADDR(DDR1_PCTL_DTUCFG)
+#define DDR1_PCTL_DTUEAF 0x223c 	///../ucode/ddr3_reg.h:553
+#define P_DDR1_PCTL_DTUEAF 		MMC_REG_ADDR(DDR1_PCTL_DTUEAF)
+#define DDR1_PCTL_DTUECTL 0x220c 	///../ucode/ddr3_reg.h:554
+#define P_DDR1_PCTL_DTUECTL 		MMC_REG_ADDR(DDR1_PCTL_DTUECTL)
+#define DDR1_PCTL_DFIODTCFG1 0x2248 	///../ucode/ddr3_reg.h:555
+#define P_DDR1_PCTL_DFIODTCFG1 		MMC_REG_ADDR(DDR1_PCTL_DFIODTCFG1)
+#define DDR1_PCTL_DFITCTRLDELAY 0x2240 	///../ucode/ddr3_reg.h:556
+#define P_DDR1_PCTL_DFITCTRLDELAY 		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLDELAY)
+#define DDR1_PCTL_DFIODTRANKMAP 0x224c 	///../ucode/ddr3_reg.h:557
+#define P_DDR1_PCTL_DFIODTRANKMAP 		MMC_REG_ADDR(DDR1_PCTL_DFIODTRANKMAP)
+#define DDR1_PCTL_DFIODTCFG 0x2244 	///../ucode/ddr3_reg.h:558
+#define P_DDR1_PCTL_DFIODTCFG 		MMC_REG_ADDR(DDR1_PCTL_DFIODTCFG)
+#define DDR1_PCTL_DFITPHYWRLAT 0x2254 	///../ucode/ddr3_reg.h:559
+#define P_DDR1_PCTL_DFITPHYWRLAT 		MMC_REG_ADDR(DDR1_PCTL_DFITPHYWRLAT)
+#define DDR1_PCTL_DFITPHYWRDATA 0x2250 	///../ucode/ddr3_reg.h:560
+#define P_DDR1_PCTL_DFITPHYWRDATA 		MMC_REG_ADDR(DDR1_PCTL_DFITPHYWRDATA)
+#define DDR1_PCTL_DFITRDDATAEN 0x2260 	///../ucode/ddr3_reg.h:561
+#define P_DDR1_PCTL_DFITRDDATAEN 		MMC_REG_ADDR(DDR1_PCTL_DFITRDDATAEN)
+#define DDR1_PCTL_DFITPHYRDLAT 0x2264 	///../ucode/ddr3_reg.h:562
+#define P_DDR1_PCTL_DFITPHYRDLAT 		MMC_REG_ADDR(DDR1_PCTL_DFITPHYRDLAT)
+#define DDR1_PCTL_DFITREFMSKI 0x2294 	///../ucode/ddr3_reg.h:563
+#define P_DDR1_PCTL_DFITREFMSKI 		MMC_REG_ADDR(DDR1_PCTL_DFITREFMSKI)
+#define DDR1_PCTL_DFITPHYUPDTYPE0 0x2270 	///../ucode/ddr3_reg.h:564
+#define P_DDR1_PCTL_DFITPHYUPDTYPE0 		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE0)
+#define DDR1_PCTL_DFITPHYUPDTYPE1 0x2274 	///../ucode/ddr3_reg.h:565
+#define P_DDR1_PCTL_DFITPHYUPDTYPE1 		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE1)
+#define DDR1_PCTL_DFITCTRLUPDDLY 0x2288 	///../ucode/ddr3_reg.h:566
+#define P_DDR1_PCTL_DFITCTRLUPDDLY 		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDDLY)
+#define DDR1_PCTL_DFITPHYUPDTYPE2 0x2278 	///../ucode/ddr3_reg.h:567
+#define P_DDR1_PCTL_DFITPHYUPDTYPE2 		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE2)
+#define DDR1_PCTL_DFITCTRLUPDMIN 0x2280 	///../ucode/ddr3_reg.h:568
+#define P_DDR1_PCTL_DFITCTRLUPDMIN 		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDMIN)
+#define DDR1_PCTL_DFITPHYUPDTYPE3 0x227c 	///../ucode/ddr3_reg.h:569
+#define P_DDR1_PCTL_DFITPHYUPDTYPE3 		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE3)
+#define DDR1_PCTL_DFIUPDCFG 0x2290 	///../ucode/ddr3_reg.h:570
+#define P_DDR1_PCTL_DFIUPDCFG 		MMC_REG_ADDR(DDR1_PCTL_DFIUPDCFG)
+#define DDR1_PCTL_DFITCTRLUPDMAX 0x2284 	///../ucode/ddr3_reg.h:571
+#define P_DDR1_PCTL_DFITCTRLUPDMAX 		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDMAX)
+#define DDR1_PCTL_DFITCTRLUPDI 0x2298 	///../ucode/ddr3_reg.h:572
+#define P_DDR1_PCTL_DFITCTRLUPDI 		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDI)
+#define DDR1_PCTL_DFITRRDLVLEN 0x22b8 	///../ucode/ddr3_reg.h:573
+#define P_DDR1_PCTL_DFITRRDLVLEN 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLEN)
+#define DDR1_PCTL_DFITRSTAT0 0x22b0 	///../ucode/ddr3_reg.h:574
+#define P_DDR1_PCTL_DFITRSTAT0 		MMC_REG_ADDR(DDR1_PCTL_DFITRSTAT0)
+#define DDR1_PCTL_DFITRWRLVLEN 0x22b4 	///../ucode/ddr3_reg.h:575
+#define P_DDR1_PCTL_DFITRWRLVLEN 		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLEN)
+#define DDR1_PCTL_DFITRCFG0 0x22ac 	///../ucode/ddr3_reg.h:576
+#define P_DDR1_PCTL_DFITRCFG0 		MMC_REG_ADDR(DDR1_PCTL_DFITRCFG0)
+#define DDR1_PCTL_DFITRRDLVLGATEEN 0x22bc 	///../ucode/ddr3_reg.h:577
+#define P_DDR1_PCTL_DFITRRDLVLGATEEN 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEEN)
+#define DDR1_PCTL_DFISTSTAT0 0x22c0 	///../ucode/ddr3_reg.h:578
+#define P_DDR1_PCTL_DFISTSTAT0 		MMC_REG_ADDR(DDR1_PCTL_DFISTSTAT0)
+#define DDR1_PCTL_DFISTPARLOG 0x22e0 	///../ucode/ddr3_reg.h:579
+#define P_DDR1_PCTL_DFISTPARLOG 		MMC_REG_ADDR(DDR1_PCTL_DFISTPARLOG)
+#define DDR1_PCTL_DFITDRAMCLKEN 0x22d0 	///../ucode/ddr3_reg.h:580
+#define P_DDR1_PCTL_DFITDRAMCLKEN 		MMC_REG_ADDR(DDR1_PCTL_DFITDRAMCLKEN)
+#define DDR1_PCTL_DFISTPARCLR 0x22dc 	///../ucode/ddr3_reg.h:581
+#define P_DDR1_PCTL_DFISTPARCLR 		MMC_REG_ADDR(DDR1_PCTL_DFISTPARCLR)
+#define DDR1_PCTL_DFISTCFG0 0x22c4 	///../ucode/ddr3_reg.h:582
+#define P_DDR1_PCTL_DFISTCFG0 		MMC_REG_ADDR(DDR1_PCTL_DFISTCFG0)
+#define DDR1_PCTL_DFISTCFG1 0x22c8 	///../ucode/ddr3_reg.h:583
+#define P_DDR1_PCTL_DFISTCFG1 		MMC_REG_ADDR(DDR1_PCTL_DFISTCFG1)
+#define DDR1_PCTL_DFISTCFG2 0x22d8 	///../ucode/ddr3_reg.h:584
+#define P_DDR1_PCTL_DFISTCFG2 		MMC_REG_ADDR(DDR1_PCTL_DFISTCFG2)
+#define DDR1_PCTL_DFITDRAMCLKDIS 0x22d4 	///../ucode/ddr3_reg.h:585
+#define P_DDR1_PCTL_DFITDRAMCLKDIS 		MMC_REG_ADDR(DDR1_PCTL_DFITDRAMCLKDIS)
+#define DDR1_PCTL_DFILPCFG0 0x22f0 	///../ucode/ddr3_reg.h:586
+#define P_DDR1_PCTL_DFILPCFG0 		MMC_REG_ADDR(DDR1_PCTL_DFILPCFG0)
+#define DDR1_PCTL_DFITRWRLVLDELAY0 0x2318 	///../ucode/ddr3_reg.h:587
+#define P_DDR1_PCTL_DFITRWRLVLDELAY0 		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLDELAY0)
+#define DDR1_PCTL_DFITRWRLVLDELAY1 0x231c 	///../ucode/ddr3_reg.h:588
+#define P_DDR1_PCTL_DFITRWRLVLDELAY1 		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLDELAY1)
+#define DDR1_PCTL_DFITRWRLVLDELAY2 0x2320 	///../ucode/ddr3_reg.h:589
+#define P_DDR1_PCTL_DFITRWRLVLDELAY2 		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLDELAY2)
+#define DDR1_PCTL_DFITRRDLVLRESP0 0x230c 	///../ucode/ddr3_reg.h:590
+#define P_DDR1_PCTL_DFITRRDLVLRESP0 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLRESP0)
+#define DDR1_PCTL_DFITRRDLVLRESP1 0x2310 	///../ucode/ddr3_reg.h:591
+#define P_DDR1_PCTL_DFITRRDLVLRESP1 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLRESP1)
+#define DDR1_PCTL_DFITRRDLVLRESP2 0x2314 	///../ucode/ddr3_reg.h:592
+#define P_DDR1_PCTL_DFITRRDLVLRESP2 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLRESP2)
+#define DDR1_PCTL_DFITRWRLVLRESP0 0x2300 	///../ucode/ddr3_reg.h:593
+#define P_DDR1_PCTL_DFITRWRLVLRESP0 		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLRESP0)
+#define DDR1_PCTL_DFITRRDLVLDELAY0 0x2324 	///../ucode/ddr3_reg.h:594
+#define P_DDR1_PCTL_DFITRRDLVLDELAY0 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLDELAY0)
+#define DDR1_PCTL_DFITRRDLVLDELAY1 0x2328 	///../ucode/ddr3_reg.h:595
+#define P_DDR1_PCTL_DFITRRDLVLDELAY1 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLDELAY1)
+#define DDR1_PCTL_DFITRWRLVLRESP1 0x2304 	///../ucode/ddr3_reg.h:596
+#define P_DDR1_PCTL_DFITRWRLVLRESP1 		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLRESP1)
+#define DDR1_PCTL_DFITRRDLVLDELAY2 0x232c 	///../ucode/ddr3_reg.h:597
+#define P_DDR1_PCTL_DFITRRDLVLDELAY2 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLDELAY2)
+#define DDR1_PCTL_DFITRWRLVLRESP2 0x2308 	///../ucode/ddr3_reg.h:598
+#define P_DDR1_PCTL_DFITRWRLVLRESP2 		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLRESP2)
+#define DDR1_PCTL_DFITRRDLVLGATEDELAY0 0x2330 	///../ucode/ddr3_reg.h:599
+#define P_DDR1_PCTL_DFITRRDLVLGATEDELAY0 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEDELAY0)
+#define DDR1_PCTL_DFITRCMD 0x233c 	///../ucode/ddr3_reg.h:600
+#define P_DDR1_PCTL_DFITRCMD 		MMC_REG_ADDR(DDR1_PCTL_DFITRCMD)
+#define DDR1_PCTL_DFITRRDLVLGATEDELAY1 0x2334 	///../ucode/ddr3_reg.h:601
+#define P_DDR1_PCTL_DFITRRDLVLGATEDELAY1 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEDELAY1)
+#define DDR1_PCTL_DFITRRDLVLGATEDELAY2 0x2338 	///../ucode/ddr3_reg.h:602
+#define P_DDR1_PCTL_DFITRRDLVLGATEDELAY2 		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEDELAY2)
+#define DDR1_PCTL_IPTR 0x23fc 	///../ucode/ddr3_reg.h:603
+#define P_DDR1_PCTL_IPTR 		MMC_REG_ADDR(DDR1_PCTL_IPTR)
+#define DDR1_PCTL_IPVR 0x23f8 	///../ucode/ddr3_reg.h:604
+#define P_DDR1_PCTL_IPVR 		MMC_REG_ADDR(DDR1_PCTL_IPVR)
+#define DDR1_PUB_RIDR (0x3000 + (0x00 << 2)) 	///../ucode/ddr3_reg.h:607
+#define P_DDR1_PUB_RIDR 		MMC_REG_ADDR(DDR1_PUB_RIDR)
+#define DDR1_PUB_PIR (0x3000 + (0x01 << 2)) 	///../ucode/ddr3_reg.h:608
+#define P_DDR1_PUB_PIR 		MMC_REG_ADDR(DDR1_PUB_PIR)
+#define DDR1_PUB_PGCR0 (0x3000 + (0x02 << 2)) 	///../ucode/ddr3_reg.h:609
+#define P_DDR1_PUB_PGCR0 		MMC_REG_ADDR(DDR1_PUB_PGCR0)
+#define DDR1_PUB_PGCR1 (0x3000 + (0x03 << 2)) 	///../ucode/ddr3_reg.h:610
+#define P_DDR1_PUB_PGCR1 		MMC_REG_ADDR(DDR1_PUB_PGCR1)
+#define DDR1_PUB_PGCR2 (0x3000 + (0x04 << 2)) 	///../ucode/ddr3_reg.h:611
+#define P_DDR1_PUB_PGCR2 		MMC_REG_ADDR(DDR1_PUB_PGCR2)
+#define DDR1_PUB_PGCR3 (0x3000 + (0x05 << 2)) 	///../ucode/ddr3_reg.h:612
+#define P_DDR1_PUB_PGCR3 		MMC_REG_ADDR(DDR1_PUB_PGCR3)
+#define DDR1_PUB_PGSR0 (0x3000 + (0x06 << 2)) 	///../ucode/ddr3_reg.h:613
+#define P_DDR1_PUB_PGSR0 		MMC_REG_ADDR(DDR1_PUB_PGSR0)
+#define DDR1_PUB_PGSR1 (0x3000 + (0x07 << 2)) 	///../ucode/ddr3_reg.h:614
+#define P_DDR1_PUB_PGSR1 		MMC_REG_ADDR(DDR1_PUB_PGSR1)
+#define DDR1_PUB_PLLCR (0x3000 + (0x08 << 2)) 	///../ucode/ddr3_reg.h:615
+#define P_DDR1_PUB_PLLCR 		MMC_REG_ADDR(DDR1_PUB_PLLCR)
+#define DDR1_PUB_PTR0 (0x3000 + (0x09 << 2)) 	///../ucode/ddr3_reg.h:616
+#define P_DDR1_PUB_PTR0 		MMC_REG_ADDR(DDR1_PUB_PTR0)
+#define DDR1_PUB_PTR1 (0x3000 + (0x0A << 2)) 	///../ucode/ddr3_reg.h:617
+#define P_DDR1_PUB_PTR1 		MMC_REG_ADDR(DDR1_PUB_PTR1)
+#define DDR1_PUB_PTR2 (0x3000 + (0x0B << 2)) 	///../ucode/ddr3_reg.h:618
+#define P_DDR1_PUB_PTR2 		MMC_REG_ADDR(DDR1_PUB_PTR2)
+#define DDR1_PUB_PTR3 (0x3000 + (0x0C << 2)) 	///../ucode/ddr3_reg.h:619
+#define P_DDR1_PUB_PTR3 		MMC_REG_ADDR(DDR1_PUB_PTR3)
+#define DDR1_PUB_PTR4 (0x3000 + (0x0D << 2)) 	///../ucode/ddr3_reg.h:620
+#define P_DDR1_PUB_PTR4 		MMC_REG_ADDR(DDR1_PUB_PTR4)
+#define DDR1_PUB_ACMDLR (0x3000 + (0x0E << 2)) 	///../ucode/ddr3_reg.h:621
+#define P_DDR1_PUB_ACMDLR 		MMC_REG_ADDR(DDR1_PUB_ACMDLR)
+#define DDR1_PUB_ACLCDLR (0x3000 + (0x0F << 2)) 	///../ucode/ddr3_reg.h:622
+#define P_DDR1_PUB_ACLCDLR 		MMC_REG_ADDR(DDR1_PUB_ACLCDLR)
+#define DDR1_PUB_ACBDLR0 (0x3000 + (0x10 << 2)) 	///../ucode/ddr3_reg.h:623
+#define P_DDR1_PUB_ACBDLR0 		MMC_REG_ADDR(DDR1_PUB_ACBDLR0)
+#define DDR1_PUB_ACBDLR1 (0x3000 + (0x11 << 2)) 	///../ucode/ddr3_reg.h:624
+#define P_DDR1_PUB_ACBDLR1 		MMC_REG_ADDR(DDR1_PUB_ACBDLR1)
+#define DDR1_PUB_ACBDLR2 (0x3000 + (0x12 << 2)) 	///../ucode/ddr3_reg.h:625
+#define P_DDR1_PUB_ACBDLR2 		MMC_REG_ADDR(DDR1_PUB_ACBDLR2)
+#define DDR1_PUB_ACBDLR3 (0x3000 + (0x13 << 2)) 	///../ucode/ddr3_reg.h:626
+#define P_DDR1_PUB_ACBDLR3 		MMC_REG_ADDR(DDR1_PUB_ACBDLR3)
+#define DDR1_PUB_ACBDLR4 (0x3000 + (0x14 << 2)) 	///../ucode/ddr3_reg.h:627
+#define P_DDR1_PUB_ACBDLR4 		MMC_REG_ADDR(DDR1_PUB_ACBDLR4)
+#define DDR1_PUB_ACBDLR5 (0x3000 + (0x15 << 2)) 	///../ucode/ddr3_reg.h:628
+#define P_DDR1_PUB_ACBDLR5 		MMC_REG_ADDR(DDR1_PUB_ACBDLR5)
+#define DDR1_PUB_ACBDLR6 (0x3000 + (0x16 << 2)) 	///../ucode/ddr3_reg.h:629
+#define P_DDR1_PUB_ACBDLR6 		MMC_REG_ADDR(DDR1_PUB_ACBDLR6)
+#define DDR1_PUB_ACBDLR7 (0x3000 + (0x17 << 2)) 	///../ucode/ddr3_reg.h:630
+#define P_DDR1_PUB_ACBDLR7 		MMC_REG_ADDR(DDR1_PUB_ACBDLR7)
+#define DDR1_PUB_ACBDLR8 (0x3000 + (0x18 << 2)) 	///../ucode/ddr3_reg.h:631
+#define P_DDR1_PUB_ACBDLR8 		MMC_REG_ADDR(DDR1_PUB_ACBDLR8)
+#define DDR1_PUB_ACBDLR9 (0x3000 + (0x19 << 2)) 	///../ucode/ddr3_reg.h:632
+#define P_DDR1_PUB_ACBDLR9 		MMC_REG_ADDR(DDR1_PUB_ACBDLR9)
+#define DDR1_PUB_ACIOCR0 (0x3000 + (0x1A << 2)) 	///../ucode/ddr3_reg.h:633
+#define P_DDR1_PUB_ACIOCR0 		MMC_REG_ADDR(DDR1_PUB_ACIOCR0)
+#define DDR1_PUB_ACIOCR1 (0x3000 + (0x1B << 2)) 	///../ucode/ddr3_reg.h:634
+#define P_DDR1_PUB_ACIOCR1 		MMC_REG_ADDR(DDR1_PUB_ACIOCR1)
+#define DDR1_PUB_ACIOCR2 (0x3000 + (0x1C << 2)) 	///../ucode/ddr3_reg.h:635
+#define P_DDR1_PUB_ACIOCR2 		MMC_REG_ADDR(DDR1_PUB_ACIOCR2)
+#define DDR1_PUB_ACIOCR3 (0x3000 + (0x1D << 2)) 	///../ucode/ddr3_reg.h:636
+#define P_DDR1_PUB_ACIOCR3 		MMC_REG_ADDR(DDR1_PUB_ACIOCR3)
+#define DDR1_PUB_ACIOCR4 (0x3000 + (0x1E << 2)) 	///../ucode/ddr3_reg.h:637
+#define P_DDR1_PUB_ACIOCR4 		MMC_REG_ADDR(DDR1_PUB_ACIOCR4)
+#define DDR1_PUB_ACIOCR5 (0x3000 + (0x1F << 2)) 	///../ucode/ddr3_reg.h:638
+#define P_DDR1_PUB_ACIOCR5 		MMC_REG_ADDR(DDR1_PUB_ACIOCR5)
+#define DDR1_PUB_DXCCR (0x3000 + (0x20 << 2)) 	///../ucode/ddr3_reg.h:639
+#define P_DDR1_PUB_DXCCR 		MMC_REG_ADDR(DDR1_PUB_DXCCR)
+#define DDR1_PUB_DSGCR (0x3000 + (0x21 << 2)) 	///../ucode/ddr3_reg.h:640
+#define P_DDR1_PUB_DSGCR 		MMC_REG_ADDR(DDR1_PUB_DSGCR)
+#define DDR1_PUB_DCR (0x3000 + (0x22 << 2)) 	///../ucode/ddr3_reg.h:641
+#define P_DDR1_PUB_DCR 		MMC_REG_ADDR(DDR1_PUB_DCR)
+#define DDR1_PUB_DTPR0 (0x3000 + (0x23 << 2)) 	///../ucode/ddr3_reg.h:642
+#define P_DDR1_PUB_DTPR0 		MMC_REG_ADDR(DDR1_PUB_DTPR0)
+#define DDR1_PUB_DTPR1 (0x3000 + (0x24 << 2)) 	///../ucode/ddr3_reg.h:643
+#define P_DDR1_PUB_DTPR1 		MMC_REG_ADDR(DDR1_PUB_DTPR1)
+#define DDR1_PUB_DTPR2 (0x3000 + (0x25 << 2)) 	///../ucode/ddr3_reg.h:644
+#define P_DDR1_PUB_DTPR2 		MMC_REG_ADDR(DDR1_PUB_DTPR2)
+#define DDR1_PUB_DTPR3 (0x3000 + (0x26 << 2)) 	///../ucode/ddr3_reg.h:645
+#define P_DDR1_PUB_DTPR3 		MMC_REG_ADDR(DDR1_PUB_DTPR3)
+#define DDR1_PUB_MR0 (0x3000 + (0x27 << 2)) 	///../ucode/ddr3_reg.h:646
+#define P_DDR1_PUB_MR0 		MMC_REG_ADDR(DDR1_PUB_MR0)
+#define DDR1_PUB_MR1 (0x3000 + (0x28 << 2)) 	///../ucode/ddr3_reg.h:647
+#define P_DDR1_PUB_MR1 		MMC_REG_ADDR(DDR1_PUB_MR1)
+#define DDR1_PUB_MR2 (0x3000 + (0x29 << 2)) 	///../ucode/ddr3_reg.h:648
+#define P_DDR1_PUB_MR2 		MMC_REG_ADDR(DDR1_PUB_MR2)
+#define DDR1_PUB_MR3 (0x3000 + (0x2A << 2)) 	///../ucode/ddr3_reg.h:649
+#define P_DDR1_PUB_MR3 		MMC_REG_ADDR(DDR1_PUB_MR3)
+#define DDR1_PUB_ODTCR (0x3000 + (0x2B << 2)) 	///../ucode/ddr3_reg.h:650
+#define P_DDR1_PUB_ODTCR 		MMC_REG_ADDR(DDR1_PUB_ODTCR)
+#define DDR1_PUB_DTCR (0x3000 + (0x2C << 2)) 	///../ucode/ddr3_reg.h:651
+#define P_DDR1_PUB_DTCR 		MMC_REG_ADDR(DDR1_PUB_DTCR)
+#define DDR1_PUB_DTAR0 (0x3000 + (0x2D << 2)) 	///../ucode/ddr3_reg.h:652
+#define P_DDR1_PUB_DTAR0 		MMC_REG_ADDR(DDR1_PUB_DTAR0)
+#define DDR1_PUB_DTAR1 (0x3000 + (0x2E << 2)) 	///../ucode/ddr3_reg.h:653
+#define P_DDR1_PUB_DTAR1 		MMC_REG_ADDR(DDR1_PUB_DTAR1)
+#define DDR1_PUB_DTAR2 (0x3000 + (0x2F << 2)) 	///../ucode/ddr3_reg.h:654
+#define P_DDR1_PUB_DTAR2 		MMC_REG_ADDR(DDR1_PUB_DTAR2)
+#define DDR1_PUB_DTAR3 (0x3000 + (0x30 << 2)) 	///../ucode/ddr3_reg.h:655
+#define P_DDR1_PUB_DTAR3 		MMC_REG_ADDR(DDR1_PUB_DTAR3)
+#define DDR1_PUB_DTDR0 (0x3000 + (0x31 << 2)) 	///../ucode/ddr3_reg.h:656
+#define P_DDR1_PUB_DTDR0 		MMC_REG_ADDR(DDR1_PUB_DTDR0)
+#define DDR1_PUB_DTDR1 (0x3000 + (0x32 << 2)) 	///../ucode/ddr3_reg.h:657
+#define P_DDR1_PUB_DTDR1 		MMC_REG_ADDR(DDR1_PUB_DTDR1)
+#define DDR1_PUB_DTEDR0 (0x3000 + (0x33 << 2)) 	///../ucode/ddr3_reg.h:658
+#define P_DDR1_PUB_DTEDR0 		MMC_REG_ADDR(DDR1_PUB_DTEDR0)
+#define DDR1_PUB_DTEDR1 (0x3000 + (0x34 << 2)) 	///../ucode/ddr3_reg.h:659
+#define P_DDR1_PUB_DTEDR1 		MMC_REG_ADDR(DDR1_PUB_DTEDR1)
+#define DDR1_PUB_RDIMMGCR0 (0x3000 + (0x35 << 2)) 	///../ucode/ddr3_reg.h:660
+#define P_DDR1_PUB_RDIMMGCR0 		MMC_REG_ADDR(DDR1_PUB_RDIMMGCR0)
+#define DDR1_PUB_RDIMMGCR1 (0x3000 + (0x36 << 2)) 	///../ucode/ddr3_reg.h:661
+#define P_DDR1_PUB_RDIMMGCR1 		MMC_REG_ADDR(DDR1_PUB_RDIMMGCR1)
+#define DDR1_PUB_RDIMMCR0 (0x3000 + (0x37 << 2)) 	///../ucode/ddr3_reg.h:662
+#define P_DDR1_PUB_RDIMMCR0 		MMC_REG_ADDR(DDR1_PUB_RDIMMCR0)
+#define DDR1_PUB_RDIMMCR1 (0x3000 + (0x38 << 2)) 	///../ucode/ddr3_reg.h:663
+#define P_DDR1_PUB_RDIMMCR1 		MMC_REG_ADDR(DDR1_PUB_RDIMMCR1)
+#define DDR1_PUB_GPR0 (0x3000 + (0x39 << 2)) 	///../ucode/ddr3_reg.h:664
+#define P_DDR1_PUB_GPR0 		MMC_REG_ADDR(DDR1_PUB_GPR0)
+#define DDR1_PUB_GPR1 (0x3000 + (0x3A << 2)) 	///../ucode/ddr3_reg.h:665
+#define P_DDR1_PUB_GPR1 		MMC_REG_ADDR(DDR1_PUB_GPR1)
+#define DDR1_PUB_CATR0 (0x3000 + (0x3B << 2)) 	///../ucode/ddr3_reg.h:666
+#define P_DDR1_PUB_CATR0 		MMC_REG_ADDR(DDR1_PUB_CATR0)
+#define DDR1_PUB_CATR1 (0x3000 + (0x3C << 2)) 	///../ucode/ddr3_reg.h:667
+#define P_DDR1_PUB_CATR1 		MMC_REG_ADDR(DDR1_PUB_CATR1)
+#define DDR1_PUB_DCUAR (0x3000 + (0x60 << 2)) 	///../ucode/ddr3_reg.h:668
+#define P_DDR1_PUB_DCUAR 		MMC_REG_ADDR(DDR1_PUB_DCUAR)
+#define DDR1_PUB_DCUDR (0x3000 + (0x61 << 2)) 	///../ucode/ddr3_reg.h:669
+#define P_DDR1_PUB_DCUDR 		MMC_REG_ADDR(DDR1_PUB_DCUDR)
+#define DDR1_PUB_DCURR (0x3000 + (0x62 << 2)) 	///../ucode/ddr3_reg.h:670
+#define P_DDR1_PUB_DCURR 		MMC_REG_ADDR(DDR1_PUB_DCURR)
+#define DDR1_PUB_DCULR (0x3000 + (0x63 << 2)) 	///../ucode/ddr3_reg.h:671
+#define P_DDR1_PUB_DCULR 		MMC_REG_ADDR(DDR1_PUB_DCULR)
+#define DDR1_PUB_DCUGCR (0x3000 + (0x64 << 2)) 	///../ucode/ddr3_reg.h:672
+#define P_DDR1_PUB_DCUGCR 		MMC_REG_ADDR(DDR1_PUB_DCUGCR)
+#define DDR1_PUB_DCUTPR (0x3000 + (0x65 << 2)) 	///../ucode/ddr3_reg.h:673
+#define P_DDR1_PUB_DCUTPR 		MMC_REG_ADDR(DDR1_PUB_DCUTPR)
+#define DDR1_PUB_DCUSR0 (0x3000 + (0x66 << 2)) 	///../ucode/ddr3_reg.h:674
+#define P_DDR1_PUB_DCUSR0 		MMC_REG_ADDR(DDR1_PUB_DCUSR0)
+#define DDR1_PUB_DCUSR1 (0x3000 + (0x67 << 2)) 	///../ucode/ddr3_reg.h:675
+#define P_DDR1_PUB_DCUSR1 		MMC_REG_ADDR(DDR1_PUB_DCUSR1)
+#define DDR1_PUB_BISTRR (0x3000 + (0x70 << 2)) 	///../ucode/ddr3_reg.h:676
+#define P_DDR1_PUB_BISTRR 		MMC_REG_ADDR(DDR1_PUB_BISTRR)
+#define DDR1_PUB_BISTWCR (0x3000 + (0x71 << 2)) 	///../ucode/ddr3_reg.h:677
+#define P_DDR1_PUB_BISTWCR 		MMC_REG_ADDR(DDR1_PUB_BISTWCR)
+#define DDR1_PUB_BISTMSKR0 (0x3000 + (0x72 << 2)) 	///../ucode/ddr3_reg.h:678
+#define P_DDR1_PUB_BISTMSKR0 		MMC_REG_ADDR(DDR1_PUB_BISTMSKR0)
+#define DDR1_PUB_BISTMSKR1 (0x3000 + (0x73 << 2)) 	///../ucode/ddr3_reg.h:679
+#define P_DDR1_PUB_BISTMSKR1 		MMC_REG_ADDR(DDR1_PUB_BISTMSKR1)
+#define DDR1_PUB_BISTMSKR2 (0x3000 + (0x74 << 2)) 	///../ucode/ddr3_reg.h:680
+#define P_DDR1_PUB_BISTMSKR2 		MMC_REG_ADDR(DDR1_PUB_BISTMSKR2)
+#define DDR1_PUB_BISTLSR (0x3000 + (0x75 << 2)) 	///../ucode/ddr3_reg.h:681
+#define P_DDR1_PUB_BISTLSR 		MMC_REG_ADDR(DDR1_PUB_BISTLSR)
+#define DDR1_PUB_BISTAR0 (0x3000 + (0x76 << 2)) 	///../ucode/ddr3_reg.h:682
+#define P_DDR1_PUB_BISTAR0 		MMC_REG_ADDR(DDR1_PUB_BISTAR0)
+#define DDR1_PUB_BISTAR1 (0x3000 + (0x77 << 2)) 	///../ucode/ddr3_reg.h:683
+#define P_DDR1_PUB_BISTAR1 		MMC_REG_ADDR(DDR1_PUB_BISTAR1)
+#define DDR1_PUB_BISTAR2 (0x3000 + (0x78 << 2)) 	///../ucode/ddr3_reg.h:684
+#define P_DDR1_PUB_BISTAR2 		MMC_REG_ADDR(DDR1_PUB_BISTAR2)
+#define DDR1_PUB_BISTUDPR (0x3000 + (0x79 << 2)) 	///../ucode/ddr3_reg.h:685
+#define P_DDR1_PUB_BISTUDPR 		MMC_REG_ADDR(DDR1_PUB_BISTUDPR)
+#define DDR1_PUB_BISTGSR (0x3000 + (0x7A << 2)) 	///../ucode/ddr3_reg.h:686
+#define P_DDR1_PUB_BISTGSR 		MMC_REG_ADDR(DDR1_PUB_BISTGSR)
+#define DDR1_PUB_BISTWER (0x3000 + (0x7B << 2)) 	///../ucode/ddr3_reg.h:687
+#define P_DDR1_PUB_BISTWER 		MMC_REG_ADDR(DDR1_PUB_BISTWER)
+#define DDR1_PUB_BISTBER0 (0x3000 + (0x7C << 2)) 	///../ucode/ddr3_reg.h:688
+#define P_DDR1_PUB_BISTBER0 		MMC_REG_ADDR(DDR1_PUB_BISTBER0)
+#define DDR1_PUB_BISTBER1 (0x3000 + (0x7D << 2)) 	///../ucode/ddr3_reg.h:689
+#define P_DDR1_PUB_BISTBER1 		MMC_REG_ADDR(DDR1_PUB_BISTBER1)
+#define DDR1_PUB_BISTBER2 (0x3000 + (0x7E << 2)) 	///../ucode/ddr3_reg.h:690
+#define P_DDR1_PUB_BISTBER2 		MMC_REG_ADDR(DDR1_PUB_BISTBER2)
+#define DDR1_PUB_BISTBER3 (0x3000 + (0x7F << 2)) 	///../ucode/ddr3_reg.h:691
+#define P_DDR1_PUB_BISTBER3 		MMC_REG_ADDR(DDR1_PUB_BISTBER3)
+#define DDR1_PUB_BISTWCSR (0x3000 + (0x80 << 2)) 	///../ucode/ddr3_reg.h:692
+#define P_DDR1_PUB_BISTWCSR 		MMC_REG_ADDR(DDR1_PUB_BISTWCSR)
+#define DDR1_PUB_BISTFWR0 (0x3000 + (0x81 << 2)) 	///../ucode/ddr3_reg.h:693
+#define P_DDR1_PUB_BISTFWR0 		MMC_REG_ADDR(DDR1_PUB_BISTFWR0)
+#define DDR1_PUB_BISTFWR1 (0x3000 + (0x82 << 2)) 	///../ucode/ddr3_reg.h:694
+#define P_DDR1_PUB_BISTFWR1 		MMC_REG_ADDR(DDR1_PUB_BISTFWR1)
+#define DDR1_PUB_BISTFWR2 (0x3000 + (0x83 << 2)) 	///../ucode/ddr3_reg.h:695
+#define P_DDR1_PUB_BISTFWR2 		MMC_REG_ADDR(DDR1_PUB_BISTFWR2)
+#define DDR1_PUB_IOVCR0 (0x3000 + (0x8E << 2)) 	///../ucode/ddr3_reg.h:696
+#define P_DDR1_PUB_IOVCR0 		MMC_REG_ADDR(DDR1_PUB_IOVCR0)
+#define DDR1_PUB_IOVCR1 (0x3000 + (0x8F << 2)) 	///../ucode/ddr3_reg.h:697
+#define P_DDR1_PUB_IOVCR1 		MMC_REG_ADDR(DDR1_PUB_IOVCR1)
+#define DDR1_PUB_ZQCR (0x3000 + (0x90 << 2)) 	///../ucode/ddr3_reg.h:698
+#define P_DDR1_PUB_ZQCR 		MMC_REG_ADDR(DDR1_PUB_ZQCR)
+#define DDR1_PUB_ZQ0PR (0x3000 + (0x91 << 2)) 	///../ucode/ddr3_reg.h:699
+#define P_DDR1_PUB_ZQ0PR 		MMC_REG_ADDR(DDR1_PUB_ZQ0PR)
+#define DDR1_PUB_ZQ0DR (0x3000 + (0x92 << 2)) 	///../ucode/ddr3_reg.h:700
+#define P_DDR1_PUB_ZQ0DR 		MMC_REG_ADDR(DDR1_PUB_ZQ0DR)
+#define DDR1_PUB_ZQ0SR (0x3000 + (0x93 << 2)) 	///../ucode/ddr3_reg.h:701
+#define P_DDR1_PUB_ZQ0SR 		MMC_REG_ADDR(DDR1_PUB_ZQ0SR)
+#define DDR1_PUB_ZQ1PR (0x3000 + (0x95 << 2)) 	///../ucode/ddr3_reg.h:702
+#define P_DDR1_PUB_ZQ1PR 		MMC_REG_ADDR(DDR1_PUB_ZQ1PR)
+#define DDR1_PUB_ZQ1DR (0x3000 + (0x96 << 2)) 	///../ucode/ddr3_reg.h:703
+#define P_DDR1_PUB_ZQ1DR 		MMC_REG_ADDR(DDR1_PUB_ZQ1DR)
+#define DDR1_PUB_ZQ1SR (0x3000 + (0x97 << 2)) 	///../ucode/ddr3_reg.h:704
+#define P_DDR1_PUB_ZQ1SR 		MMC_REG_ADDR(DDR1_PUB_ZQ1SR)
+#define DDR1_PUB_ZQ2PR (0x3000 + (0x99 << 2)) 	///../ucode/ddr3_reg.h:705
+#define P_DDR1_PUB_ZQ2PR 		MMC_REG_ADDR(DDR1_PUB_ZQ2PR)
+#define DDR1_PUB_ZQ2DR (0x3000 + (0x9A << 2)) 	///../ucode/ddr3_reg.h:706
+#define P_DDR1_PUB_ZQ2DR 		MMC_REG_ADDR(DDR1_PUB_ZQ2DR)
+#define DDR1_PUB_ZQ2SR (0x3000 + (0x9B << 2)) 	///../ucode/ddr3_reg.h:707
+#define P_DDR1_PUB_ZQ2SR 		MMC_REG_ADDR(DDR1_PUB_ZQ2SR)
+#define DDR1_PUB_ZQ3PR (0x3000 + (0x9D << 2)) 	///../ucode/ddr3_reg.h:708
+#define P_DDR1_PUB_ZQ3PR 		MMC_REG_ADDR(DDR1_PUB_ZQ3PR)
+#define DDR1_PUB_ZQ3DR (0x3000 + (0x9E << 2)) 	///../ucode/ddr3_reg.h:709
+#define P_DDR1_PUB_ZQ3DR 		MMC_REG_ADDR(DDR1_PUB_ZQ3DR)
+#define DDR1_PUB_ZQ3SR (0x3000 + (0x9F << 2)) 	///../ucode/ddr3_reg.h:710
+#define P_DDR1_PUB_ZQ3SR 		MMC_REG_ADDR(DDR1_PUB_ZQ3SR)
+#define DDR1_PUB_DX0GCR0 (0x3000 + (0xA0 << 2)) 	///../ucode/ddr3_reg.h:711
+#define P_DDR1_PUB_DX0GCR0 		MMC_REG_ADDR(DDR1_PUB_DX0GCR0)
+#define DDR1_PUB_DX0GCR1 (0x3000 + (0xA1 << 2)) 	///../ucode/ddr3_reg.h:712
+#define P_DDR1_PUB_DX0GCR1 		MMC_REG_ADDR(DDR1_PUB_DX0GCR1)
+#define DDR1_PUB_DX0GCR2 (0x3000 + (0xA2 << 2)) 	///../ucode/ddr3_reg.h:713
+#define P_DDR1_PUB_DX0GCR2 		MMC_REG_ADDR(DDR1_PUB_DX0GCR2)
+#define DDR1_PUB_DX0GCR3 (0x3000 + (0xA3 << 2)) 	///../ucode/ddr3_reg.h:714
+#define P_DDR1_PUB_DX0GCR3 		MMC_REG_ADDR(DDR1_PUB_DX0GCR3)
+#define DDR1_PUB_DX0GSR0 (0x3000 + (0xA4 << 2)) 	///../ucode/ddr3_reg.h:715
+#define P_DDR1_PUB_DX0GSR0 		MMC_REG_ADDR(DDR1_PUB_DX0GSR0)
+#define DDR1_PUB_DX0GSR1 (0x3000 + (0xA5 << 2)) 	///../ucode/ddr3_reg.h:716
+#define P_DDR1_PUB_DX0GSR1 		MMC_REG_ADDR(DDR1_PUB_DX0GSR1)
+#define DDR1_PUB_DX0GSR2 (0x3000 + (0xA6 << 2)) 	///../ucode/ddr3_reg.h:717
+#define P_DDR1_PUB_DX0GSR2 		MMC_REG_ADDR(DDR1_PUB_DX0GSR2)
+#define DDR1_PUB_DX0BDLR0 (0x3000 + (0xA7 << 2)) 	///../ucode/ddr3_reg.h:718
+#define P_DDR1_PUB_DX0BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX0BDLR0)
+#define DDR1_PUB_DX0BDLR1 (0x3000 + (0xA8 << 2)) 	///../ucode/ddr3_reg.h:719
+#define P_DDR1_PUB_DX0BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX0BDLR1)
+#define DDR1_PUB_DX0BDLR2 (0x3000 + (0xA9 << 2)) 	///../ucode/ddr3_reg.h:720
+#define P_DDR1_PUB_DX0BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX0BDLR2)
+#define DDR1_PUB_DX0BDLR3 (0x3000 + (0xAA << 2)) 	///../ucode/ddr3_reg.h:721
+#define P_DDR1_PUB_DX0BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX0BDLR3)
+#define DDR1_PUB_DX0BDLR4 (0x3000 + (0xAB << 2)) 	///../ucode/ddr3_reg.h:722
+#define P_DDR1_PUB_DX0BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX0BDLR4)
+#define DDR1_PUB_DX0BDLR5 (0x3000 + (0xAC << 2)) 	///../ucode/ddr3_reg.h:723
+#define P_DDR1_PUB_DX0BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX0BDLR5)
+#define DDR1_PUB_DX0BDLR6 (0x3000 + (0xAD << 2)) 	///../ucode/ddr3_reg.h:724
+#define P_DDR1_PUB_DX0BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX0BDLR6)
+#define DDR1_PUB_DX0LCDLR0 (0x3000 + (0xAE << 2)) 	///../ucode/ddr3_reg.h:725
+#define P_DDR1_PUB_DX0LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX0LCDLR0)
+#define DDR1_PUB_DX0LCDLR1 (0x3000 + (0xAF << 2)) 	///../ucode/ddr3_reg.h:726
+#define P_DDR1_PUB_DX0LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX0LCDLR1)
+#define DDR1_PUB_DX0LCDLR2 (0x3000 + (0xB0 << 2)) 	///../ucode/ddr3_reg.h:727
+#define P_DDR1_PUB_DX0LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX0LCDLR2)
+#define DDR1_PUB_DX0MDLR (0x3000 + (0xB1 << 2)) 	///../ucode/ddr3_reg.h:728
+#define P_DDR1_PUB_DX0MDLR 		MMC_REG_ADDR(DDR1_PUB_DX0MDLR)
+#define DDR1_PUB_DX0GTR (0x3000 + (0xB2 << 2)) 	///../ucode/ddr3_reg.h:729
+#define P_DDR1_PUB_DX0GTR 		MMC_REG_ADDR(DDR1_PUB_DX0GTR)
+#define DDR1_PUB_DX1GCR0 (0x3000 + (0xC0 << 2)) 	///../ucode/ddr3_reg.h:730
+#define P_DDR1_PUB_DX1GCR0 		MMC_REG_ADDR(DDR1_PUB_DX1GCR0)
+#define DDR1_PUB_DX1GCR1 (0x3000 + (0xC1 << 2)) 	///../ucode/ddr3_reg.h:731
+#define P_DDR1_PUB_DX1GCR1 		MMC_REG_ADDR(DDR1_PUB_DX1GCR1)
+#define DDR1_PUB_DX1GCR2 (0x3000 + (0xC2 << 2)) 	///../ucode/ddr3_reg.h:732
+#define P_DDR1_PUB_DX1GCR2 		MMC_REG_ADDR(DDR1_PUB_DX1GCR2)
+#define DDR1_PUB_DX1GCR3 (0x3000 + (0xC3 << 2)) 	///../ucode/ddr3_reg.h:733
+#define P_DDR1_PUB_DX1GCR3 		MMC_REG_ADDR(DDR1_PUB_DX1GCR3)
+#define DDR1_PUB_DX1GSR0 (0x3000 + (0xC4 << 2)) 	///../ucode/ddr3_reg.h:734
+#define P_DDR1_PUB_DX1GSR0 		MMC_REG_ADDR(DDR1_PUB_DX1GSR0)
+#define DDR1_PUB_DX1GSR1 (0x3000 + (0xC5 << 2)) 	///../ucode/ddr3_reg.h:735
+#define P_DDR1_PUB_DX1GSR1 		MMC_REG_ADDR(DDR1_PUB_DX1GSR1)
+#define DDR1_PUB_DX1GSR2 (0x3000 + (0xC6 << 2)) 	///../ucode/ddr3_reg.h:736
+#define P_DDR1_PUB_DX1GSR2 		MMC_REG_ADDR(DDR1_PUB_DX1GSR2)
+#define DDR1_PUB_DX1BDLR0 (0x3000 + (0xC7 << 2)) 	///../ucode/ddr3_reg.h:737
+#define P_DDR1_PUB_DX1BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX1BDLR0)
+#define DDR1_PUB_DX1BDLR1 (0x3000 + (0xC8 << 2)) 	///../ucode/ddr3_reg.h:738
+#define P_DDR1_PUB_DX1BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX1BDLR1)
+#define DDR1_PUB_DX1BDLR2 (0x3000 + (0xC9 << 2)) 	///../ucode/ddr3_reg.h:739
+#define P_DDR1_PUB_DX1BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX1BDLR2)
+#define DDR1_PUB_DX1BDLR3 (0x3000 + (0xCA << 2)) 	///../ucode/ddr3_reg.h:740
+#define P_DDR1_PUB_DX1BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX1BDLR3)
+#define DDR1_PUB_DX1BDLR4 (0x3000 + (0xCB << 2)) 	///../ucode/ddr3_reg.h:741
+#define P_DDR1_PUB_DX1BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX1BDLR4)
+#define DDR1_PUB_DX1BDLR5 (0x3000 + (0xCC << 2)) 	///../ucode/ddr3_reg.h:742
+#define P_DDR1_PUB_DX1BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX1BDLR5)
+#define DDR1_PUB_DX1BDLR6 (0x3000 + (0xCD << 2)) 	///../ucode/ddr3_reg.h:743
+#define P_DDR1_PUB_DX1BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX1BDLR6)
+#define DDR1_PUB_DX1LCDLR0 (0x3000 + (0xCE << 2)) 	///../ucode/ddr3_reg.h:744
+#define P_DDR1_PUB_DX1LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX1LCDLR0)
+#define DDR1_PUB_DX1LCDLR1 (0x3000 + (0xCF << 2)) 	///../ucode/ddr3_reg.h:745
+#define P_DDR1_PUB_DX1LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX1LCDLR1)
+#define DDR1_PUB_DX1LCDLR2 (0x3000 + (0xD0 << 2)) 	///../ucode/ddr3_reg.h:746
+#define P_DDR1_PUB_DX1LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX1LCDLR2)
+#define DDR1_PUB_DX1MDLR (0x3000 + (0xD1 << 2)) 	///../ucode/ddr3_reg.h:747
+#define P_DDR1_PUB_DX1MDLR 		MMC_REG_ADDR(DDR1_PUB_DX1MDLR)
+#define DDR1_PUB_DX1GTR (0x3000 + (0xD2 << 2)) 	///../ucode/ddr3_reg.h:748
+#define P_DDR1_PUB_DX1GTR 		MMC_REG_ADDR(DDR1_PUB_DX1GTR)
+#define DDR1_PUB_DX2GCR0 (0x3000 + (0xE0 << 2)) 	///../ucode/ddr3_reg.h:749
+#define P_DDR1_PUB_DX2GCR0 		MMC_REG_ADDR(DDR1_PUB_DX2GCR0)
+#define DDR1_PUB_DX2GCR1 (0x3000 + (0xE1 << 2)) 	///../ucode/ddr3_reg.h:750
+#define P_DDR1_PUB_DX2GCR1 		MMC_REG_ADDR(DDR1_PUB_DX2GCR1)
+#define DDR1_PUB_DX2GCR2 (0x3000 + (0xE2 << 2)) 	///../ucode/ddr3_reg.h:751
+#define P_DDR1_PUB_DX2GCR2 		MMC_REG_ADDR(DDR1_PUB_DX2GCR2)
+#define DDR1_PUB_DX2GCR3 (0x3000 + (0xE3 << 2)) 	///../ucode/ddr3_reg.h:752
+#define P_DDR1_PUB_DX2GCR3 		MMC_REG_ADDR(DDR1_PUB_DX2GCR3)
+#define DDR1_PUB_DX2GSR0 (0x3000 + (0xE4 << 2)) 	///../ucode/ddr3_reg.h:753
+#define P_DDR1_PUB_DX2GSR0 		MMC_REG_ADDR(DDR1_PUB_DX2GSR0)
+#define DDR1_PUB_DX2GSR1 (0x3000 + (0xE5 << 2)) 	///../ucode/ddr3_reg.h:754
+#define P_DDR1_PUB_DX2GSR1 		MMC_REG_ADDR(DDR1_PUB_DX2GSR1)
+#define DDR1_PUB_DX2GSR2 (0x3000 + (0xE6 << 2)) 	///../ucode/ddr3_reg.h:755
+#define P_DDR1_PUB_DX2GSR2 		MMC_REG_ADDR(DDR1_PUB_DX2GSR2)
+#define DDR1_PUB_DX2BDLR0 (0x3000 + (0xE7 << 2)) 	///../ucode/ddr3_reg.h:756
+#define P_DDR1_PUB_DX2BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX2BDLR0)
+#define DDR1_PUB_DX2BDLR1 (0x3000 + (0xE8 << 2)) 	///../ucode/ddr3_reg.h:757
+#define P_DDR1_PUB_DX2BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX2BDLR1)
+#define DDR1_PUB_DX2BDLR2 (0x3000 + (0xE9 << 2)) 	///../ucode/ddr3_reg.h:758
+#define P_DDR1_PUB_DX2BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX2BDLR2)
+#define DDR1_PUB_DX2BDLR3 (0x3000 + (0xEA << 2)) 	///../ucode/ddr3_reg.h:759
+#define P_DDR1_PUB_DX2BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX2BDLR3)
+#define DDR1_PUB_DX2BDLR4 (0x3000 + (0xEB << 2)) 	///../ucode/ddr3_reg.h:760
+#define P_DDR1_PUB_DX2BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX2BDLR4)
+#define DDR1_PUB_DX2BDLR5 (0x3000 + (0xEC << 2)) 	///../ucode/ddr3_reg.h:761
+#define P_DDR1_PUB_DX2BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX2BDLR5)
+#define DDR1_PUB_DX2BDLR6 (0x3000 + (0xED << 2)) 	///../ucode/ddr3_reg.h:762
+#define P_DDR1_PUB_DX2BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX2BDLR6)
+#define DDR1_PUB_DX2LCDLR0 (0x3000 + (0xEE << 2)) 	///../ucode/ddr3_reg.h:763
+#define P_DDR1_PUB_DX2LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX2LCDLR0)
+#define DDR1_PUB_DX2LCDLR1 (0x3000 + (0xEF << 2)) 	///../ucode/ddr3_reg.h:764
+#define P_DDR1_PUB_DX2LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX2LCDLR1)
+#define DDR1_PUB_DX2LCDLR2 (0x3000 + (0xF0 << 2)) 	///../ucode/ddr3_reg.h:765
+#define P_DDR1_PUB_DX2LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX2LCDLR2)
+#define DDR1_PUB_DX2MDLR (0x3000 + (0xF1 << 2)) 	///../ucode/ddr3_reg.h:766
+#define P_DDR1_PUB_DX2MDLR 		MMC_REG_ADDR(DDR1_PUB_DX2MDLR)
+#define DDR1_PUB_DX2GTR (0x3000 + (0xF2 << 2)) 	///../ucode/ddr3_reg.h:767
+#define P_DDR1_PUB_DX2GTR 		MMC_REG_ADDR(DDR1_PUB_DX2GTR)
+#define DDR1_PUB_DX3GCR0 (0x3000 + (0x100 << 2)) 	///../ucode/ddr3_reg.h:768
+#define P_DDR1_PUB_DX3GCR0 		MMC_REG_ADDR(DDR1_PUB_DX3GCR0)
+#define DDR1_PUB_DX3GCR1 (0x3000 + (0x101 << 2)) 	///../ucode/ddr3_reg.h:769
+#define P_DDR1_PUB_DX3GCR1 		MMC_REG_ADDR(DDR1_PUB_DX3GCR1)
+#define DDR1_PUB_DX3GCR2 (0x3000 + (0x102 << 2)) 	///../ucode/ddr3_reg.h:770
+#define P_DDR1_PUB_DX3GCR2 		MMC_REG_ADDR(DDR1_PUB_DX3GCR2)
+#define DDR1_PUB_DX3GCR3 (0x3000 + (0x103 << 2)) 	///../ucode/ddr3_reg.h:771
+#define P_DDR1_PUB_DX3GCR3 		MMC_REG_ADDR(DDR1_PUB_DX3GCR3)
+#define DDR1_PUB_DX3GSR0 (0x3000 + (0x104 << 2)) 	///../ucode/ddr3_reg.h:772
+#define P_DDR1_PUB_DX3GSR0 		MMC_REG_ADDR(DDR1_PUB_DX3GSR0)
+#define DDR1_PUB_DX3GSR1 (0x3000 + (0x105 << 2)) 	///../ucode/ddr3_reg.h:773
+#define P_DDR1_PUB_DX3GSR1 		MMC_REG_ADDR(DDR1_PUB_DX3GSR1)
+#define DDR1_PUB_DX3GSR2 (0x3000 + (0x106 << 2)) 	///../ucode/ddr3_reg.h:774
+#define P_DDR1_PUB_DX3GSR2 		MMC_REG_ADDR(DDR1_PUB_DX3GSR2)
+#define DDR1_PUB_DX3BDLR0 (0x3000 + (0x107 << 2)) 	///../ucode/ddr3_reg.h:775
+#define P_DDR1_PUB_DX3BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX3BDLR0)
+#define DDR1_PUB_DX3BDLR1 (0x3000 + (0x108 << 2)) 	///../ucode/ddr3_reg.h:776
+#define P_DDR1_PUB_DX3BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX3BDLR1)
+#define DDR1_PUB_DX3BDLR2 (0x3000 + (0x109 << 2)) 	///../ucode/ddr3_reg.h:777
+#define P_DDR1_PUB_DX3BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX3BDLR2)
+#define DDR1_PUB_DX3BDLR3 (0x3000 + (0x10A << 2)) 	///../ucode/ddr3_reg.h:778
+#define P_DDR1_PUB_DX3BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX3BDLR3)
+#define DDR1_PUB_DX3BDLR4 (0x3000 + (0x10B << 2)) 	///../ucode/ddr3_reg.h:779
+#define P_DDR1_PUB_DX3BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX3BDLR4)
+#define DDR1_PUB_DX3BDLR5 (0x3000 + (0x10C << 2)) 	///../ucode/ddr3_reg.h:780
+#define P_DDR1_PUB_DX3BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX3BDLR5)
+#define DDR1_PUB_DX3BDLR6 (0x3000 + (0x10D << 2)) 	///../ucode/ddr3_reg.h:781
+#define P_DDR1_PUB_DX3BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX3BDLR6)
+#define DDR1_PUB_DX3LCDLR0 (0x3000 + (0x10E << 2)) 	///../ucode/ddr3_reg.h:782
+#define P_DDR1_PUB_DX3LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX3LCDLR0)
+#define DDR1_PUB_DX3LCDLR1 (0x3000 + (0x10F << 2)) 	///../ucode/ddr3_reg.h:783
+#define P_DDR1_PUB_DX3LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX3LCDLR1)
+#define DDR1_PUB_DX3LCDLR2 (0x3000 + (0x110 << 2)) 	///../ucode/ddr3_reg.h:784
+#define P_DDR1_PUB_DX3LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX3LCDLR2)
+#define DDR1_PUB_DX3MDLR (0x3000 + (0x111 << 2)) 	///../ucode/ddr3_reg.h:785
+#define P_DDR1_PUB_DX3MDLR 		MMC_REG_ADDR(DDR1_PUB_DX3MDLR)
+#define DDR1_PUB_DX3GTR (0x3000 + (0x112 << 2)) 	///../ucode/ddr3_reg.h:786
+#define P_DDR1_PUB_DX3GTR 		MMC_REG_ADDR(DDR1_PUB_DX3GTR)
+#define DDR1_PUB_DX4GCR0 (0x3000 + (0x120 << 2)) 	///../ucode/ddr3_reg.h:787
+#define P_DDR1_PUB_DX4GCR0 		MMC_REG_ADDR(DDR1_PUB_DX4GCR0)
+#define DDR1_PUB_DX4GCR1 (0x3000 + (0x121 << 2)) 	///../ucode/ddr3_reg.h:788
+#define P_DDR1_PUB_DX4GCR1 		MMC_REG_ADDR(DDR1_PUB_DX4GCR1)
+#define DDR1_PUB_DX4GCR2 (0x3000 + (0x122 << 2)) 	///../ucode/ddr3_reg.h:789
+#define P_DDR1_PUB_DX4GCR2 		MMC_REG_ADDR(DDR1_PUB_DX4GCR2)
+#define DDR1_PUB_DX4GCR3 (0x3000 + (0x123 << 2)) 	///../ucode/ddr3_reg.h:790
+#define P_DDR1_PUB_DX4GCR3 		MMC_REG_ADDR(DDR1_PUB_DX4GCR3)
+#define DDR1_PUB_DX4GSR0 (0x3000 + (0x124 << 2)) 	///../ucode/ddr3_reg.h:791
+#define P_DDR1_PUB_DX4GSR0 		MMC_REG_ADDR(DDR1_PUB_DX4GSR0)
+#define DDR1_PUB_DX4GSR1 (0x3000 + (0x125 << 2)) 	///../ucode/ddr3_reg.h:792
+#define P_DDR1_PUB_DX4GSR1 		MMC_REG_ADDR(DDR1_PUB_DX4GSR1)
+#define DDR1_PUB_DX4GSR2 (0x3000 + (0x126 << 2)) 	///../ucode/ddr3_reg.h:793
+#define P_DDR1_PUB_DX4GSR2 		MMC_REG_ADDR(DDR1_PUB_DX4GSR2)
+#define DDR1_PUB_DX4BDLR0 (0x3000 + (0x127 << 2)) 	///../ucode/ddr3_reg.h:794
+#define P_DDR1_PUB_DX4BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX4BDLR0)
+#define DDR1_PUB_DX4BDLR1 (0x3000 + (0x128 << 2)) 	///../ucode/ddr3_reg.h:795
+#define P_DDR1_PUB_DX4BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX4BDLR1)
+#define DDR1_PUB_DX4BDLR2 (0x3000 + (0x129 << 2)) 	///../ucode/ddr3_reg.h:796
+#define P_DDR1_PUB_DX4BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX4BDLR2)
+#define DDR1_PUB_DX4BDLR3 (0x3000 + (0x12A << 2)) 	///../ucode/ddr3_reg.h:797
+#define P_DDR1_PUB_DX4BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX4BDLR3)
+#define DDR1_PUB_DX4BDLR4 (0x3000 + (0x12B << 2)) 	///../ucode/ddr3_reg.h:798
+#define P_DDR1_PUB_DX4BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX4BDLR4)
+#define DDR1_PUB_DX4BDLR5 (0x3000 + (0x12C << 2)) 	///../ucode/ddr3_reg.h:799
+#define P_DDR1_PUB_DX4BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX4BDLR5)
+#define DDR1_PUB_DX4BDLR6 (0x3000 + (0x12D << 2)) 	///../ucode/ddr3_reg.h:800
+#define P_DDR1_PUB_DX4BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX4BDLR6)
+#define DDR1_PUB_DX4LCDLR0 (0x3000 + (0x12E << 2)) 	///../ucode/ddr3_reg.h:801
+#define P_DDR1_PUB_DX4LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX4LCDLR0)
+#define DDR1_PUB_DX4LCDLR1 (0x3000 + (0x12F << 2)) 	///../ucode/ddr3_reg.h:802
+#define P_DDR1_PUB_DX4LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX4LCDLR1)
+#define DDR1_PUB_DX4LCDLR2 (0x3000 + (0x130 << 2)) 	///../ucode/ddr3_reg.h:803
+#define P_DDR1_PUB_DX4LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX4LCDLR2)
+#define DDR1_PUB_DX4MDLR (0x3000 + (0x131 << 2)) 	///../ucode/ddr3_reg.h:804
+#define P_DDR1_PUB_DX4MDLR 		MMC_REG_ADDR(DDR1_PUB_DX4MDLR)
+#define DDR1_PUB_DX4GTR (0x3000 + (0x132 << 2)) 	///../ucode/ddr3_reg.h:805
+#define P_DDR1_PUB_DX4GTR 		MMC_REG_ADDR(DDR1_PUB_DX4GTR)
+#define DDR1_PUB_DX5GCR0 (0x3000 + (0x140 << 2)) 	///../ucode/ddr3_reg.h:806
+#define P_DDR1_PUB_DX5GCR0 		MMC_REG_ADDR(DDR1_PUB_DX5GCR0)
+#define DDR1_PUB_DX5GCR1 (0x3000 + (0x141 << 2)) 	///../ucode/ddr3_reg.h:807
+#define P_DDR1_PUB_DX5GCR1 		MMC_REG_ADDR(DDR1_PUB_DX5GCR1)
+#define DDR1_PUB_DX5GCR2 (0x3000 + (0x142 << 2)) 	///../ucode/ddr3_reg.h:808
+#define P_DDR1_PUB_DX5GCR2 		MMC_REG_ADDR(DDR1_PUB_DX5GCR2)
+#define DDR1_PUB_DX5GCR3 (0x3000 + (0x143 << 2)) 	///../ucode/ddr3_reg.h:809
+#define P_DDR1_PUB_DX5GCR3 		MMC_REG_ADDR(DDR1_PUB_DX5GCR3)
+#define DDR1_PUB_DX5GSR0 (0x3000 + (0x144 << 2)) 	///../ucode/ddr3_reg.h:810
+#define P_DDR1_PUB_DX5GSR0 		MMC_REG_ADDR(DDR1_PUB_DX5GSR0)
+#define DDR1_PUB_DX5GSR1 (0x3000 + (0x145 << 2)) 	///../ucode/ddr3_reg.h:811
+#define P_DDR1_PUB_DX5GSR1 		MMC_REG_ADDR(DDR1_PUB_DX5GSR1)
+#define DDR1_PUB_DX5GSR2 (0x3000 + (0x146 << 2)) 	///../ucode/ddr3_reg.h:812
+#define P_DDR1_PUB_DX5GSR2 		MMC_REG_ADDR(DDR1_PUB_DX5GSR2)
+#define DDR1_PUB_DX5BDLR0 (0x3000 + (0x147 << 2)) 	///../ucode/ddr3_reg.h:813
+#define P_DDR1_PUB_DX5BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX5BDLR0)
+#define DDR1_PUB_DX5BDLR1 (0x3000 + (0x148 << 2)) 	///../ucode/ddr3_reg.h:814
+#define P_DDR1_PUB_DX5BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX5BDLR1)
+#define DDR1_PUB_DX5BDLR2 (0x3000 + (0x149 << 2)) 	///../ucode/ddr3_reg.h:815
+#define P_DDR1_PUB_DX5BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX5BDLR2)
+#define DDR1_PUB_DX5BDLR3 (0x3000 + (0x14A << 2)) 	///../ucode/ddr3_reg.h:816
+#define P_DDR1_PUB_DX5BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX5BDLR3)
+#define DDR1_PUB_DX5BDLR4 (0x3000 + (0x14B << 2)) 	///../ucode/ddr3_reg.h:817
+#define P_DDR1_PUB_DX5BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX5BDLR4)
+#define DDR1_PUB_DX5BDLR5 (0x3000 + (0x14C << 2)) 	///../ucode/ddr3_reg.h:818
+#define P_DDR1_PUB_DX5BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX5BDLR5)
+#define DDR1_PUB_DX5BDLR6 (0x3000 + (0x14D << 2)) 	///../ucode/ddr3_reg.h:819
+#define P_DDR1_PUB_DX5BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX5BDLR6)
+#define DDR1_PUB_DX5LCDLR0 (0x3000 + (0x14E << 2)) 	///../ucode/ddr3_reg.h:820
+#define P_DDR1_PUB_DX5LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX5LCDLR0)
+#define DDR1_PUB_DX5LCDLR1 (0x3000 + (0x14F << 2)) 	///../ucode/ddr3_reg.h:821
+#define P_DDR1_PUB_DX5LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX5LCDLR1)
+#define DDR1_PUB_DX5LCDLR2 (0x3000 + (0x150 << 2)) 	///../ucode/ddr3_reg.h:822
+#define P_DDR1_PUB_DX5LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX5LCDLR2)
+#define DDR1_PUB_DX5MDLR (0x3000 + (0x151 << 2)) 	///../ucode/ddr3_reg.h:823
+#define P_DDR1_PUB_DX5MDLR 		MMC_REG_ADDR(DDR1_PUB_DX5MDLR)
+#define DDR1_PUB_DX5GTR (0x3000 + (0x152 << 2)) 	///../ucode/ddr3_reg.h:824
+#define P_DDR1_PUB_DX5GTR 		MMC_REG_ADDR(DDR1_PUB_DX5GTR)
+#define DDR1_PUB_DX6GCR0 (0x3000 + (0x160 << 2)) 	///../ucode/ddr3_reg.h:825
+#define P_DDR1_PUB_DX6GCR0 		MMC_REG_ADDR(DDR1_PUB_DX6GCR0)
+#define DDR1_PUB_DX6GCR1 (0x3000 + (0x161 << 2)) 	///../ucode/ddr3_reg.h:826
+#define P_DDR1_PUB_DX6GCR1 		MMC_REG_ADDR(DDR1_PUB_DX6GCR1)
+#define DDR1_PUB_DX6GCR2 (0x3000 + (0x162 << 2)) 	///../ucode/ddr3_reg.h:827
+#define P_DDR1_PUB_DX6GCR2 		MMC_REG_ADDR(DDR1_PUB_DX6GCR2)
+#define DDR1_PUB_DX6GCR3 (0x3000 + (0x163 << 2)) 	///../ucode/ddr3_reg.h:828
+#define P_DDR1_PUB_DX6GCR3 		MMC_REG_ADDR(DDR1_PUB_DX6GCR3)
+#define DDR1_PUB_DX6GSR0 (0x3000 + (0x164 << 2)) 	///../ucode/ddr3_reg.h:829
+#define P_DDR1_PUB_DX6GSR0 		MMC_REG_ADDR(DDR1_PUB_DX6GSR0)
+#define DDR1_PUB_DX6GSR1 (0x3000 + (0x165 << 2)) 	///../ucode/ddr3_reg.h:830
+#define P_DDR1_PUB_DX6GSR1 		MMC_REG_ADDR(DDR1_PUB_DX6GSR1)
+#define DDR1_PUB_DX6GSR2 (0x3000 + (0x166 << 2)) 	///../ucode/ddr3_reg.h:831
+#define P_DDR1_PUB_DX6GSR2 		MMC_REG_ADDR(DDR1_PUB_DX6GSR2)
+#define DDR1_PUB_DX6BDLR0 (0x3000 + (0x167 << 2)) 	///../ucode/ddr3_reg.h:832
+#define P_DDR1_PUB_DX6BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX6BDLR0)
+#define DDR1_PUB_DX6BDLR1 (0x3000 + (0x168 << 2)) 	///../ucode/ddr3_reg.h:833
+#define P_DDR1_PUB_DX6BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX6BDLR1)
+#define DDR1_PUB_DX6BDLR2 (0x3000 + (0x169 << 2)) 	///../ucode/ddr3_reg.h:834
+#define P_DDR1_PUB_DX6BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX6BDLR2)
+#define DDR1_PUB_DX6BDLR3 (0x3000 + (0x16A << 2)) 	///../ucode/ddr3_reg.h:835
+#define P_DDR1_PUB_DX6BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX6BDLR3)
+#define DDR1_PUB_DX6BDLR4 (0x3000 + (0x16B << 2)) 	///../ucode/ddr3_reg.h:836
+#define P_DDR1_PUB_DX6BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX6BDLR4)
+#define DDR1_PUB_DX6BDLR5 (0x3000 + (0x16C << 2)) 	///../ucode/ddr3_reg.h:837
+#define P_DDR1_PUB_DX6BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX6BDLR5)
+#define DDR1_PUB_DX6BDLR6 (0x3000 + (0x16D << 2)) 	///../ucode/ddr3_reg.h:838
+#define P_DDR1_PUB_DX6BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX6BDLR6)
+#define DDR1_PUB_DX6LCDLR0 (0x3000 + (0x16E << 2)) 	///../ucode/ddr3_reg.h:839
+#define P_DDR1_PUB_DX6LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX6LCDLR0)
+#define DDR1_PUB_DX6LCDLR1 (0x3000 + (0x16F << 2)) 	///../ucode/ddr3_reg.h:840
+#define P_DDR1_PUB_DX6LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX6LCDLR1)
+#define DDR1_PUB_DX6LCDLR2 (0x3000 + (0x170 << 2)) 	///../ucode/ddr3_reg.h:841
+#define P_DDR1_PUB_DX6LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX6LCDLR2)
+#define DDR1_PUB_DX6MDLR (0x3000 + (0x171 << 2)) 	///../ucode/ddr3_reg.h:842
+#define P_DDR1_PUB_DX6MDLR 		MMC_REG_ADDR(DDR1_PUB_DX6MDLR)
+#define DDR1_PUB_DX6GTR (0x3000 + (0x172 << 2)) 	///../ucode/ddr3_reg.h:843
+#define P_DDR1_PUB_DX6GTR 		MMC_REG_ADDR(DDR1_PUB_DX6GTR)
+#define DDR1_PUB_DX7GCR0 (0x3000 + (0x180 << 2)) 	///../ucode/ddr3_reg.h:844
+#define P_DDR1_PUB_DX7GCR0 		MMC_REG_ADDR(DDR1_PUB_DX7GCR0)
+#define DDR1_PUB_DX7GCR1 (0x3000 + (0x181 << 2)) 	///../ucode/ddr3_reg.h:845
+#define P_DDR1_PUB_DX7GCR1 		MMC_REG_ADDR(DDR1_PUB_DX7GCR1)
+#define DDR1_PUB_DX7GCR2 (0x3000 + (0x182 << 2)) 	///../ucode/ddr3_reg.h:846
+#define P_DDR1_PUB_DX7GCR2 		MMC_REG_ADDR(DDR1_PUB_DX7GCR2)
+#define DDR1_PUB_DX7GCR3 (0x3000 + (0x183 << 2)) 	///../ucode/ddr3_reg.h:847
+#define P_DDR1_PUB_DX7GCR3 		MMC_REG_ADDR(DDR1_PUB_DX7GCR3)
+#define DDR1_PUB_DX7GSR0 (0x3000 + (0x184 << 2)) 	///../ucode/ddr3_reg.h:848
+#define P_DDR1_PUB_DX7GSR0 		MMC_REG_ADDR(DDR1_PUB_DX7GSR0)
+#define DDR1_PUB_DX7GSR1 (0x3000 + (0x185 << 2)) 	///../ucode/ddr3_reg.h:849
+#define P_DDR1_PUB_DX7GSR1 		MMC_REG_ADDR(DDR1_PUB_DX7GSR1)
+#define DDR1_PUB_DX7GSR2 (0x3000 + (0x186 << 2)) 	///../ucode/ddr3_reg.h:850
+#define P_DDR1_PUB_DX7GSR2 		MMC_REG_ADDR(DDR1_PUB_DX7GSR2)
+#define DDR1_PUB_DX7BDLR0 (0x3000 + (0x187 << 2)) 	///../ucode/ddr3_reg.h:851
+#define P_DDR1_PUB_DX7BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX7BDLR0)
+#define DDR1_PUB_DX7BDLR1 (0x3000 + (0x188 << 2)) 	///../ucode/ddr3_reg.h:852
+#define P_DDR1_PUB_DX7BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX7BDLR1)
+#define DDR1_PUB_DX7BDLR2 (0x3000 + (0x189 << 2)) 	///../ucode/ddr3_reg.h:853
+#define P_DDR1_PUB_DX7BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX7BDLR2)
+#define DDR1_PUB_DX7BDLR3 (0x3000 + (0x18A << 2)) 	///../ucode/ddr3_reg.h:854
+#define P_DDR1_PUB_DX7BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX7BDLR3)
+#define DDR1_PUB_DX7BDLR4 (0x3000 + (0x18B << 2)) 	///../ucode/ddr3_reg.h:855
+#define P_DDR1_PUB_DX7BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX7BDLR4)
+#define DDR1_PUB_DX7BDLR5 (0x3000 + (0x18C << 2)) 	///../ucode/ddr3_reg.h:856
+#define P_DDR1_PUB_DX7BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX7BDLR5)
+#define DDR1_PUB_DX7BDLR6 (0x3000 + (0x18D << 2)) 	///../ucode/ddr3_reg.h:857
+#define P_DDR1_PUB_DX7BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX7BDLR6)
+#define DDR1_PUB_DX7LCDLR0 (0x3000 + (0x18E << 2)) 	///../ucode/ddr3_reg.h:858
+#define P_DDR1_PUB_DX7LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX7LCDLR0)
+#define DDR1_PUB_DX7LCDLR1 (0x3000 + (0x18F << 2)) 	///../ucode/ddr3_reg.h:859
+#define P_DDR1_PUB_DX7LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX7LCDLR1)
+#define DDR1_PUB_DX7LCDLR2 (0x3000 + (0x190 << 2)) 	///../ucode/ddr3_reg.h:860
+#define P_DDR1_PUB_DX7LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX7LCDLR2)
+#define DDR1_PUB_DX7MDLR (0x3000 + (0x191 << 2)) 	///../ucode/ddr3_reg.h:861
+#define P_DDR1_PUB_DX7MDLR 		MMC_REG_ADDR(DDR1_PUB_DX7MDLR)
+#define DDR1_PUB_DX7GTR (0x3000 + (0x192 << 2)) 	///../ucode/ddr3_reg.h:862
+#define P_DDR1_PUB_DX7GTR 		MMC_REG_ADDR(DDR1_PUB_DX7GTR)
+#define DDR1_PUB_DX8GCR0 (0x3000 + (0x1A0 << 2)) 	///../ucode/ddr3_reg.h:863
+#define P_DDR1_PUB_DX8GCR0 		MMC_REG_ADDR(DDR1_PUB_DX8GCR0)
+#define DDR1_PUB_DX8GCR1 (0x3000 + (0x1A1 << 2)) 	///../ucode/ddr3_reg.h:864
+#define P_DDR1_PUB_DX8GCR1 		MMC_REG_ADDR(DDR1_PUB_DX8GCR1)
+#define DDR1_PUB_DX8GCR2 (0x3000 + (0x1A2 << 2)) 	///../ucode/ddr3_reg.h:865
+#define P_DDR1_PUB_DX8GCR2 		MMC_REG_ADDR(DDR1_PUB_DX8GCR2)
+#define DDR1_PUB_DX8GCR3 (0x3000 + (0x1A3 << 2)) 	///../ucode/ddr3_reg.h:866
+#define P_DDR1_PUB_DX8GCR3 		MMC_REG_ADDR(DDR1_PUB_DX8GCR3)
+#define DDR1_PUB_DX8GSR0 (0x3000 + (0x1A4 << 2)) 	///../ucode/ddr3_reg.h:867
+#define P_DDR1_PUB_DX8GSR0 		MMC_REG_ADDR(DDR1_PUB_DX8GSR0)
+#define DDR1_PUB_DX8GSR1 (0x3000 + (0x1A5 << 2)) 	///../ucode/ddr3_reg.h:868
+#define P_DDR1_PUB_DX8GSR1 		MMC_REG_ADDR(DDR1_PUB_DX8GSR1)
+#define DDR1_PUB_DX8GSR2 (0x3000 + (0x1A6 << 2)) 	///../ucode/ddr3_reg.h:869
+#define P_DDR1_PUB_DX8GSR2 		MMC_REG_ADDR(DDR1_PUB_DX8GSR2)
+#define DDR1_PUB_DX8BDLR0 (0x3000 + (0x1A7 << 2)) 	///../ucode/ddr3_reg.h:870
+#define P_DDR1_PUB_DX8BDLR0 		MMC_REG_ADDR(DDR1_PUB_DX8BDLR0)
+#define DDR1_PUB_DX8BDLR1 (0x3000 + (0x1A8 << 2)) 	///../ucode/ddr3_reg.h:871
+#define P_DDR1_PUB_DX8BDLR1 		MMC_REG_ADDR(DDR1_PUB_DX8BDLR1)
+#define DDR1_PUB_DX8BDLR2 (0x3000 + (0x1A9 << 2)) 	///../ucode/ddr3_reg.h:872
+#define P_DDR1_PUB_DX8BDLR2 		MMC_REG_ADDR(DDR1_PUB_DX8BDLR2)
+#define DDR1_PUB_DX8BDLR3 (0x3000 + (0x1AA << 2)) 	///../ucode/ddr3_reg.h:873
+#define P_DDR1_PUB_DX8BDLR3 		MMC_REG_ADDR(DDR1_PUB_DX8BDLR3)
+#define DDR1_PUB_DX8BDLR4 (0x3000 + (0x1AB << 2)) 	///../ucode/ddr3_reg.h:874
+#define P_DDR1_PUB_DX8BDLR4 		MMC_REG_ADDR(DDR1_PUB_DX8BDLR4)
+#define DDR1_PUB_DX8BDLR5 (0x3000 + (0x1AC << 2)) 	///../ucode/ddr3_reg.h:875
+#define P_DDR1_PUB_DX8BDLR5 		MMC_REG_ADDR(DDR1_PUB_DX8BDLR5)
+#define DDR1_PUB_DX8BDLR6 (0x3000 + (0x1AD << 2)) 	///../ucode/ddr3_reg.h:876
+#define P_DDR1_PUB_DX8BDLR6 		MMC_REG_ADDR(DDR1_PUB_DX8BDLR6)
+#define DDR1_PUB_DX8LCDLR0 (0x3000 + (0x1AE << 2)) 	///../ucode/ddr3_reg.h:877
+#define P_DDR1_PUB_DX8LCDLR0 		MMC_REG_ADDR(DDR1_PUB_DX8LCDLR0)
+#define DDR1_PUB_DX8LCDLR1 (0x3000 + (0x1AF << 2)) 	///../ucode/ddr3_reg.h:878
+#define P_DDR1_PUB_DX8LCDLR1 		MMC_REG_ADDR(DDR1_PUB_DX8LCDLR1)
+#define DDR1_PUB_DX8LCDLR2 (0x3000 + (0x1B0 << 2)) 	///../ucode/ddr3_reg.h:879
+#define P_DDR1_PUB_DX8LCDLR2 		MMC_REG_ADDR(DDR1_PUB_DX8LCDLR2)
+#define DDR1_PUB_DX8MDLR (0x3000 + (0x1B1 << 2)) 	///../ucode/ddr3_reg.h:880
+#define P_DDR1_PUB_DX8MDLR 		MMC_REG_ADDR(DDR1_PUB_DX8MDLR)
+#define DDR1_PUB_DX8GTR (0x3000 + (0x1B2 << 2)) 	///../ucode/ddr3_reg.h:881
+#define P_DDR1_PUB_DX8GTR 		MMC_REG_ADDR(DDR1_PUB_DX8GTR)
+#define S_DMC_REG_BASE 0x6000
+#define DMC_REQ_CTRL (S_DMC_REG_BASE + (0x00 << 2)) 	///../ucode/dmc_reg.h:10
+#define P_DMC_REQ_CTRL 		MMC_REG_ADDR(DMC_REQ_CTRL)
+#define DMC_SOFT_RST (S_DMC_REG_BASE + (0x01 << 2)) 	///../ucode/dmc_reg.h:23
+#define P_DMC_SOFT_RST 		MMC_REG_ADDR(DMC_SOFT_RST)
+#define DMC_SOFT_RST1 (S_DMC_REG_BASE + (0x02 << 2)) 	///../ucode/dmc_reg.h:24
+#define P_DMC_SOFT_RST1 		MMC_REG_ADDR(DMC_SOFT_RST1)
+#define DMC_RST_STS (S_DMC_REG_BASE + (0x03 << 2)) 	///../ucode/dmc_reg.h:25
+#define P_DMC_RST_STS 		MMC_REG_ADDR(DMC_RST_STS)
+#define DMC_RST_STS1 (S_DMC_REG_BASE + (0x04 << 2)) 	///../ucode/dmc_reg.h:26
+#define P_DMC_RST_STS1 		MMC_REG_ADDR(DMC_RST_STS1)
+#define DMC_VERSION (S_DMC_REG_BASE + (0x05 << 2)) 	///../ucode/dmc_reg.h:27
+#define P_DMC_VERSION 		MMC_REG_ADDR(DMC_VERSION)
+#define DMC_DDR_CTRL (S_DMC_REG_BASE + (0x10 << 2)) 	///../ucode/dmc_reg.h:30
+#define P_DMC_DDR_CTRL 		MMC_REG_ADDR(DMC_DDR_CTRL)
+#define DMC_DDR_CTRL1 (S_DMC_REG_BASE + (0x11 << 2)) 	///../ucode/dmc_reg.h:55
+#define P_DMC_DDR_CTRL1 		MMC_REG_ADDR(DMC_DDR_CTRL1)
+#define DC_CAV_LUT_DATAL (S_DMC_REG_BASE + (0x12 << 2)) 	///../ucode/dmc_reg.h:57
+#define P_DC_CAV_LUT_DATAL 		MMC_REG_ADDR(DC_CAV_LUT_DATAL)
+#define DC_CAV_LUT_DATAH (S_DMC_REG_BASE + (0x13 << 2)) 	///../ucode/dmc_reg.h:59
+#define P_DC_CAV_LUT_DATAH 		MMC_REG_ADDR(DC_CAV_LUT_DATAH)
+#define DC_CAV_LUT_ADDR (S_DMC_REG_BASE + (0x14 << 2)) 	///../ucode/dmc_reg.h:61
+#define P_DC_CAV_LUT_ADDR 		MMC_REG_ADDR(DC_CAV_LUT_ADDR)
+#define DC_CAV_LUT_RDATAL (S_DMC_REG_BASE + (0x15 << 2)) 	///../ucode/dmc_reg.h:64
+#define P_DC_CAV_LUT_RDATAL 		MMC_REG_ADDR(DC_CAV_LUT_RDATAL)
+#define DC_CAV_LUT_RDATAH (S_DMC_REG_BASE + (0x16 << 2)) 	///../ucode/dmc_reg.h:65
+#define P_DC_CAV_LUT_RDATAH 		MMC_REG_ADDR(DC_CAV_LUT_RDATAH)
+#define DMC_2ARB_CTRL (S_DMC_REG_BASE + (0x20 << 2)) 	///../ucode/dmc_reg.h:66
+#define P_DMC_2ARB_CTRL 		MMC_REG_ADDR(DMC_2ARB_CTRL)
+#define DMC_REFR_CTRL1 (S_DMC_REG_BASE + (0x23 << 2)) 	///../ucode/dmc_reg.h:68
+#define P_DMC_REFR_CTRL1 		MMC_REG_ADDR(DMC_REFR_CTRL1)
+#define DMC_REFR_CTRL2 (S_DMC_REG_BASE + (0x24 << 2)) 	///../ucode/dmc_reg.h:79
+#define P_DMC_REFR_CTRL2 		MMC_REG_ADDR(DMC_REFR_CTRL2)
+#define DMC_PARB_CTRL (S_DMC_REG_BASE + (0x25 << 2)) 	///../ucode/dmc_reg.h:85
+#define P_DMC_PARB_CTRL 		MMC_REG_ADDR(DMC_PARB_CTRL)
+#define DMC_MON_CTRL2 (S_DMC_REG_BASE + (0x26 << 2)) 	///../ucode/dmc_reg.h:92
+#define P_DMC_MON_CTRL2 		MMC_REG_ADDR(DMC_MON_CTRL2)
+#define DMC_MON_CTRL3 (S_DMC_REG_BASE + (0x27 << 2)) 	///../ucode/dmc_reg.h:98
+#define P_DMC_MON_CTRL3 		MMC_REG_ADDR(DMC_MON_CTRL3)
+#define DMC_MON_ALL_REQ_CNT (S_DMC_REG_BASE + (0x28 << 2)) 	///../ucode/dmc_reg.h:102
+#define P_DMC_MON_ALL_REQ_CNT 		MMC_REG_ADDR(DMC_MON_ALL_REQ_CNT)
+#define DMC_MON_ALL_GRANT_CNT (S_DMC_REG_BASE + (0x29 << 2)) 	///../ucode/dmc_reg.h:104
+#define P_DMC_MON_ALL_GRANT_CNT 		MMC_REG_ADDR(DMC_MON_ALL_GRANT_CNT)
+#define DMC_MON_ONE_GRANT_CNT (S_DMC_REG_BASE + (0x2a << 2)) 	///../ucode/dmc_reg.h:106
+#define P_DMC_MON_ONE_GRANT_CNT 		MMC_REG_ADDR(DMC_MON_ONE_GRANT_CNT)
+#define DMC_CLKG_CTRL0 (S_DMC_REG_BASE + (0x30 << 2)) 	///../ucode/dmc_reg.h:109
+#define P_DMC_CLKG_CTRL0 		MMC_REG_ADDR(DMC_CLKG_CTRL0)
+#define DMC_CLKG_CTRL1 (S_DMC_REG_BASE + (0x31 << 2)) 	///../ucode/dmc_reg.h:139
+#define P_DMC_CLKG_CTRL1 		MMC_REG_ADDR(DMC_CLKG_CTRL1)
+#define DMC_CHAN_STS (S_DMC_REG_BASE + (0x32 << 2)) 	///../ucode/dmc_reg.h:170
+#define P_DMC_CHAN_STS 		MMC_REG_ADDR(DMC_CHAN_STS)
+#define DMC_CMD_FILTER_CTRL1 (S_DMC_REG_BASE + (0x40 << 2)) 	///../ucode/dmc_reg.h:172
+#define P_DMC_CMD_FILTER_CTRL1 		MMC_REG_ADDR(DMC_CMD_FILTER_CTRL1)
+#define DMC_CMD_FILTER_CTRL2 (S_DMC_REG_BASE + (0x41 << 2)) 	///../ucode/dmc_reg.h:177
+#define P_DMC_CMD_FILTER_CTRL2 		MMC_REG_ADDR(DMC_CMD_FILTER_CTRL2)
+#define DMC_CMD_FILTER_CTRL3 (S_DMC_REG_BASE + (0x42 << 2)) 	///../ucode/dmc_reg.h:182
+#define P_DMC_CMD_FILTER_CTRL3 		MMC_REG_ADDR(DMC_CMD_FILTER_CTRL3)
+#define DMC_CMD_FILTER_CTRL4 (S_DMC_REG_BASE + (0x43 << 2)) 	///../ucode/dmc_reg.h:191
+#define P_DMC_CMD_FILTER_CTRL4 		MMC_REG_ADDR(DMC_CMD_FILTER_CTRL4)
+#define DMC_CMD_BUFFER_CTRL (S_DMC_REG_BASE + (0x44 << 2)) 	///../ucode/dmc_reg.h:197
+#define P_DMC_CMD_BUFFER_CTRL 		MMC_REG_ADDR(DMC_CMD_BUFFER_CTRL)
+#define DMC_AM0_CHAN_CTRL (S_DMC_REG_BASE + (0x60 << 2)) 	///../ucode/dmc_reg.h:203
+#define P_DMC_AM0_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM0_CHAN_CTRL)
+#define DMC_AM0_HOLD_CTRL (S_DMC_REG_BASE + (0x61 << 2)) 	///../ucode/dmc_reg.h:204
+#define P_DMC_AM0_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM0_HOLD_CTRL)
+#define DMC_AM0_QOS_INC (S_DMC_REG_BASE + (0x62 << 2)) 	///../ucode/dmc_reg.h:205
+#define P_DMC_AM0_QOS_INC 		MMC_REG_ADDR(DMC_AM0_QOS_INC)
+#define DMC_AM0_QOS_INCBK (S_DMC_REG_BASE + (0x63 << 2)) 	///../ucode/dmc_reg.h:206
+#define P_DMC_AM0_QOS_INCBK 		MMC_REG_ADDR(DMC_AM0_QOS_INCBK)
+#define DMC_AM0_QOS_DEC (S_DMC_REG_BASE + (0x64 << 2)) 	///../ucode/dmc_reg.h:207
+#define P_DMC_AM0_QOS_DEC 		MMC_REG_ADDR(DMC_AM0_QOS_DEC)
+#define DMC_AM0_QOS_DECBK (S_DMC_REG_BASE + (0x65 << 2)) 	///../ucode/dmc_reg.h:208
+#define P_DMC_AM0_QOS_DECBK 		MMC_REG_ADDR(DMC_AM0_QOS_DECBK)
+#define DMC_AM0_QOS_DIS (S_DMC_REG_BASE + (0x66 << 2)) 	///../ucode/dmc_reg.h:209
+#define P_DMC_AM0_QOS_DIS 		MMC_REG_ADDR(DMC_AM0_QOS_DIS)
+#define DMC_AM0_QOS_DISBK (S_DMC_REG_BASE + (0x67 << 2)) 	///../ucode/dmc_reg.h:210
+#define P_DMC_AM0_QOS_DISBK 		MMC_REG_ADDR(DMC_AM0_QOS_DISBK)
+#define DMC_AM0_QOS_CTRL0 (S_DMC_REG_BASE + (0x68 << 2)) 	///../ucode/dmc_reg.h:211
+#define P_DMC_AM0_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM0_QOS_CTRL0)
+#define DMC_AM0_QOS_CTRL1 (S_DMC_REG_BASE + (0x69 << 2)) 	///../ucode/dmc_reg.h:212
+#define P_DMC_AM0_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM0_QOS_CTRL1)
+#define DMC_AM1_CHAN_CTRL (S_DMC_REG_BASE + (0x6a << 2)) 	///../ucode/dmc_reg.h:214
+#define P_DMC_AM1_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM1_CHAN_CTRL)
+#define DMC_AM1_HOLD_CTRL (S_DMC_REG_BASE + (0x6b << 2)) 	///../ucode/dmc_reg.h:215
+#define P_DMC_AM1_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM1_HOLD_CTRL)
+#define DMC_AM1_QOS_INC (S_DMC_REG_BASE + (0x6c << 2)) 	///../ucode/dmc_reg.h:216
+#define P_DMC_AM1_QOS_INC 		MMC_REG_ADDR(DMC_AM1_QOS_INC)
+#define DMC_AM1_QOS_INCBK (S_DMC_REG_BASE + (0x6d << 2)) 	///../ucode/dmc_reg.h:217
+#define P_DMC_AM1_QOS_INCBK 		MMC_REG_ADDR(DMC_AM1_QOS_INCBK)
+#define DMC_AM1_QOS_DEC (S_DMC_REG_BASE + (0x6e << 2)) 	///../ucode/dmc_reg.h:218
+#define P_DMC_AM1_QOS_DEC 		MMC_REG_ADDR(DMC_AM1_QOS_DEC)
+#define DMC_AM1_QOS_DECBK (S_DMC_REG_BASE + (0x6f << 2)) 	///../ucode/dmc_reg.h:219
+#define P_DMC_AM1_QOS_DECBK 		MMC_REG_ADDR(DMC_AM1_QOS_DECBK)
+#define DMC_AM1_QOS_DIS (S_DMC_REG_BASE + (0x70 << 2)) 	///../ucode/dmc_reg.h:220
+#define P_DMC_AM1_QOS_DIS 		MMC_REG_ADDR(DMC_AM1_QOS_DIS)
+#define DMC_AM1_QOS_DISBK (S_DMC_REG_BASE + (0x71 << 2)) 	///../ucode/dmc_reg.h:221
+#define P_DMC_AM1_QOS_DISBK 		MMC_REG_ADDR(DMC_AM1_QOS_DISBK)
+#define DMC_AM1_QOS_CTRL0 (S_DMC_REG_BASE + (0x72 << 2)) 	///../ucode/dmc_reg.h:222
+#define P_DMC_AM1_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM1_QOS_CTRL0)
+#define DMC_AM1_QOS_CTRL1 (S_DMC_REG_BASE + (0x73 << 2)) 	///../ucode/dmc_reg.h:223
+#define P_DMC_AM1_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM1_QOS_CTRL1)
+#define DMC_AM2_CHAN_CTRL (S_DMC_REG_BASE + (0x74 << 2)) 	///../ucode/dmc_reg.h:225
+#define P_DMC_AM2_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM2_CHAN_CTRL)
+#define DMC_AM2_HOLD_CTRL (S_DMC_REG_BASE + (0x75 << 2)) 	///../ucode/dmc_reg.h:226
+#define P_DMC_AM2_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM2_HOLD_CTRL)
+#define DMC_AM2_QOS_INC (S_DMC_REG_BASE + (0x76 << 2)) 	///../ucode/dmc_reg.h:227
+#define P_DMC_AM2_QOS_INC 		MMC_REG_ADDR(DMC_AM2_QOS_INC)
+#define DMC_AM2_QOS_INCBK (S_DMC_REG_BASE + (0x77 << 2)) 	///../ucode/dmc_reg.h:228
+#define P_DMC_AM2_QOS_INCBK 		MMC_REG_ADDR(DMC_AM2_QOS_INCBK)
+#define DMC_AM2_QOS_DEC (S_DMC_REG_BASE + (0x78 << 2)) 	///../ucode/dmc_reg.h:229
+#define P_DMC_AM2_QOS_DEC 		MMC_REG_ADDR(DMC_AM2_QOS_DEC)
+#define DMC_AM2_QOS_DECBK (S_DMC_REG_BASE + (0x79 << 2)) 	///../ucode/dmc_reg.h:230
+#define P_DMC_AM2_QOS_DECBK 		MMC_REG_ADDR(DMC_AM2_QOS_DECBK)
+#define DMC_AM2_QOS_DIS (S_DMC_REG_BASE + (0x7a << 2)) 	///../ucode/dmc_reg.h:231
+#define P_DMC_AM2_QOS_DIS 		MMC_REG_ADDR(DMC_AM2_QOS_DIS)
+#define DMC_AM2_QOS_DISBK (S_DMC_REG_BASE + (0x7b << 2)) 	///../ucode/dmc_reg.h:232
+#define P_DMC_AM2_QOS_DISBK 		MMC_REG_ADDR(DMC_AM2_QOS_DISBK)
+#define DMC_AM2_QOS_CTRL0 (S_DMC_REG_BASE + (0x7c << 2)) 	///../ucode/dmc_reg.h:233
+#define P_DMC_AM2_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM2_QOS_CTRL0)
+#define DMC_AM2_QOS_CTRL1 (S_DMC_REG_BASE + (0x7d << 2)) 	///../ucode/dmc_reg.h:234
+#define P_DMC_AM2_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM2_QOS_CTRL1)
+#define DMC_AM3_CHAN_CTRL (S_DMC_REG_BASE + (0x7e << 2)) 	///../ucode/dmc_reg.h:236
+#define P_DMC_AM3_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM3_CHAN_CTRL)
+#define DMC_AM3_HOLD_CTRL (S_DMC_REG_BASE + (0x7f << 2)) 	///../ucode/dmc_reg.h:237
+#define P_DMC_AM3_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM3_HOLD_CTRL)
+#define DMC_AM3_QOS_INC (S_DMC_REG_BASE + (0x80 << 2)) 	///../ucode/dmc_reg.h:238
+#define P_DMC_AM3_QOS_INC 		MMC_REG_ADDR(DMC_AM3_QOS_INC)
+#define DMC_AM3_QOS_INCBK (S_DMC_REG_BASE + (0x81 << 2)) 	///../ucode/dmc_reg.h:239
+#define P_DMC_AM3_QOS_INCBK 		MMC_REG_ADDR(DMC_AM3_QOS_INCBK)
+#define DMC_AM3_QOS_DEC (S_DMC_REG_BASE + (0x82 << 2)) 	///../ucode/dmc_reg.h:240
+#define P_DMC_AM3_QOS_DEC 		MMC_REG_ADDR(DMC_AM3_QOS_DEC)
+#define DMC_AM3_QOS_DECBK (S_DMC_REG_BASE + (0x83 << 2)) 	///../ucode/dmc_reg.h:241
+#define P_DMC_AM3_QOS_DECBK 		MMC_REG_ADDR(DMC_AM3_QOS_DECBK)
+#define DMC_AM3_QOS_DIS (S_DMC_REG_BASE + (0x84 << 2)) 	///../ucode/dmc_reg.h:242
+#define P_DMC_AM3_QOS_DIS 		MMC_REG_ADDR(DMC_AM3_QOS_DIS)
+#define DMC_AM3_QOS_DISBK (S_DMC_REG_BASE + (0x85 << 2)) 	///../ucode/dmc_reg.h:243
+#define P_DMC_AM3_QOS_DISBK 		MMC_REG_ADDR(DMC_AM3_QOS_DISBK)
+#define DMC_AM3_QOS_CTRL0 (S_DMC_REG_BASE + (0x86 << 2)) 	///../ucode/dmc_reg.h:244
+#define P_DMC_AM3_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM3_QOS_CTRL0)
+#define DMC_AM3_QOS_CTRL1 (S_DMC_REG_BASE + (0x87 << 2)) 	///../ucode/dmc_reg.h:245
+#define P_DMC_AM3_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM3_QOS_CTRL1)
+#define DMC_AM4_CHAN_CTRL (S_DMC_REG_BASE + (0x88 << 2)) 	///../ucode/dmc_reg.h:247
+#define P_DMC_AM4_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM4_CHAN_CTRL)
+#define DMC_AM4_HOLD_CTRL (S_DMC_REG_BASE + (0x89 << 2)) 	///../ucode/dmc_reg.h:248
+#define P_DMC_AM4_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM4_HOLD_CTRL)
+#define DMC_AM4_QOS_INC (S_DMC_REG_BASE + (0x8a << 2)) 	///../ucode/dmc_reg.h:249
+#define P_DMC_AM4_QOS_INC 		MMC_REG_ADDR(DMC_AM4_QOS_INC)
+#define DMC_AM4_QOS_INCBK (S_DMC_REG_BASE + (0x8b << 2)) 	///../ucode/dmc_reg.h:250
+#define P_DMC_AM4_QOS_INCBK 		MMC_REG_ADDR(DMC_AM4_QOS_INCBK)
+#define DMC_AM4_QOS_DEC (S_DMC_REG_BASE + (0x8c << 2)) 	///../ucode/dmc_reg.h:251
+#define P_DMC_AM4_QOS_DEC 		MMC_REG_ADDR(DMC_AM4_QOS_DEC)
+#define DMC_AM4_QOS_DECBK (S_DMC_REG_BASE + (0x8d << 2)) 	///../ucode/dmc_reg.h:252
+#define P_DMC_AM4_QOS_DECBK 		MMC_REG_ADDR(DMC_AM4_QOS_DECBK)
+#define DMC_AM4_QOS_DIS (S_DMC_REG_BASE + (0x8e << 2)) 	///../ucode/dmc_reg.h:253
+#define P_DMC_AM4_QOS_DIS 		MMC_REG_ADDR(DMC_AM4_QOS_DIS)
+#define DMC_AM4_QOS_DISBK (S_DMC_REG_BASE + (0x8f << 2)) 	///../ucode/dmc_reg.h:254
+#define P_DMC_AM4_QOS_DISBK 		MMC_REG_ADDR(DMC_AM4_QOS_DISBK)
+#define DMC_AM4_QOS_CTRL0 (S_DMC_REG_BASE + (0x90 << 2)) 	///../ucode/dmc_reg.h:255
+#define P_DMC_AM4_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM4_QOS_CTRL0)
+#define DMC_AM4_QOS_CTRL1 (S_DMC_REG_BASE + (0x91 << 2)) 	///../ucode/dmc_reg.h:256
+#define P_DMC_AM4_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM4_QOS_CTRL1)
+#define DMC_AM5_CHAN_CTRL (S_DMC_REG_BASE + (0x92 << 2)) 	///../ucode/dmc_reg.h:258
+#define P_DMC_AM5_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM5_CHAN_CTRL)
+#define DMC_AM5_HOLD_CTRL (S_DMC_REG_BASE + (0x93 << 2)) 	///../ucode/dmc_reg.h:259
+#define P_DMC_AM5_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM5_HOLD_CTRL)
+#define DMC_AM5_QOS_INC (S_DMC_REG_BASE + (0x94 << 2)) 	///../ucode/dmc_reg.h:260
+#define P_DMC_AM5_QOS_INC 		MMC_REG_ADDR(DMC_AM5_QOS_INC)
+#define DMC_AM5_QOS_INCBK (S_DMC_REG_BASE + (0x95 << 2)) 	///../ucode/dmc_reg.h:261
+#define P_DMC_AM5_QOS_INCBK 		MMC_REG_ADDR(DMC_AM5_QOS_INCBK)
+#define DMC_AM5_QOS_DEC (S_DMC_REG_BASE + (0x96 << 2)) 	///../ucode/dmc_reg.h:262
+#define P_DMC_AM5_QOS_DEC 		MMC_REG_ADDR(DMC_AM5_QOS_DEC)
+#define DMC_AM5_QOS_DECBK (S_DMC_REG_BASE + (0x97 << 2)) 	///../ucode/dmc_reg.h:263
+#define P_DMC_AM5_QOS_DECBK 		MMC_REG_ADDR(DMC_AM5_QOS_DECBK)
+#define DMC_AM5_QOS_DIS (S_DMC_REG_BASE + (0x98 << 2)) 	///../ucode/dmc_reg.h:264
+#define P_DMC_AM5_QOS_DIS 		MMC_REG_ADDR(DMC_AM5_QOS_DIS)
+#define DMC_AM5_QOS_DISBK (S_DMC_REG_BASE + (0x99 << 2)) 	///../ucode/dmc_reg.h:265
+#define P_DMC_AM5_QOS_DISBK 		MMC_REG_ADDR(DMC_AM5_QOS_DISBK)
+#define DMC_AM5_QOS_CTRL0 (S_DMC_REG_BASE + (0x9a << 2)) 	///../ucode/dmc_reg.h:266
+#define P_DMC_AM5_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM5_QOS_CTRL0)
+#define DMC_AM5_QOS_CTRL1 (S_DMC_REG_BASE + (0x9b << 2)) 	///../ucode/dmc_reg.h:267
+#define P_DMC_AM5_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM5_QOS_CTRL1)
+#define DMC_AM6_CHAN_CTRL (S_DMC_REG_BASE + (0x9c << 2)) 	///../ucode/dmc_reg.h:269
+#define P_DMC_AM6_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM6_CHAN_CTRL)
+#define DMC_AM6_HOLD_CTRL (S_DMC_REG_BASE + (0x9d << 2)) 	///../ucode/dmc_reg.h:270
+#define P_DMC_AM6_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM6_HOLD_CTRL)
+#define DMC_AM6_QOS_INC (S_DMC_REG_BASE + (0x9e << 2)) 	///../ucode/dmc_reg.h:271
+#define P_DMC_AM6_QOS_INC 		MMC_REG_ADDR(DMC_AM6_QOS_INC)
+#define DMC_AM6_QOS_INCBK (S_DMC_REG_BASE + (0x9f << 2)) 	///../ucode/dmc_reg.h:272
+#define P_DMC_AM6_QOS_INCBK 		MMC_REG_ADDR(DMC_AM6_QOS_INCBK)
+#define DMC_AM6_QOS_DEC (S_DMC_REG_BASE + (0xa0 << 2)) 	///../ucode/dmc_reg.h:273
+#define P_DMC_AM6_QOS_DEC 		MMC_REG_ADDR(DMC_AM6_QOS_DEC)
+#define DMC_AM6_QOS_DECBK (S_DMC_REG_BASE + (0xa1 << 2)) 	///../ucode/dmc_reg.h:274
+#define P_DMC_AM6_QOS_DECBK 		MMC_REG_ADDR(DMC_AM6_QOS_DECBK)
+#define DMC_AM6_QOS_DIS (S_DMC_REG_BASE + (0xa2 << 2)) 	///../ucode/dmc_reg.h:275
+#define P_DMC_AM6_QOS_DIS 		MMC_REG_ADDR(DMC_AM6_QOS_DIS)
+#define DMC_AM6_QOS_DISBK (S_DMC_REG_BASE + (0xa3 << 2)) 	///../ucode/dmc_reg.h:276
+#define P_DMC_AM6_QOS_DISBK 		MMC_REG_ADDR(DMC_AM6_QOS_DISBK)
+#define DMC_AM6_QOS_CTRL0 (S_DMC_REG_BASE + (0xa4 << 2)) 	///../ucode/dmc_reg.h:277
+#define P_DMC_AM6_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM6_QOS_CTRL0)
+#define DMC_AM6_QOS_CTRL1 (S_DMC_REG_BASE + (0xa5 << 2)) 	///../ucode/dmc_reg.h:278
+#define P_DMC_AM6_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM6_QOS_CTRL1)
+#define DMC_AM7_CHAN_CTRL (S_DMC_REG_BASE + (0xa6 << 2)) 	///../ucode/dmc_reg.h:280
+#define P_DMC_AM7_CHAN_CTRL 		MMC_REG_ADDR(DMC_AM7_CHAN_CTRL)
+#define DMC_AM7_HOLD_CTRL (S_DMC_REG_BASE + (0xa7 << 2)) 	///../ucode/dmc_reg.h:281
+#define P_DMC_AM7_HOLD_CTRL 		MMC_REG_ADDR(DMC_AM7_HOLD_CTRL)
+#define DMC_AM7_QOS_INC (S_DMC_REG_BASE + (0xa8 << 2)) 	///../ucode/dmc_reg.h:282
+#define P_DMC_AM7_QOS_INC 		MMC_REG_ADDR(DMC_AM7_QOS_INC)
+#define DMC_AM7_QOS_INCBK (S_DMC_REG_BASE + (0xa9 << 2)) 	///../ucode/dmc_reg.h:283
+#define P_DMC_AM7_QOS_INCBK 		MMC_REG_ADDR(DMC_AM7_QOS_INCBK)
+#define DMC_AM7_QOS_DEC (S_DMC_REG_BASE + (0xaa << 2)) 	///../ucode/dmc_reg.h:284
+#define P_DMC_AM7_QOS_DEC 		MMC_REG_ADDR(DMC_AM7_QOS_DEC)
+#define DMC_AM7_QOS_DECBK (S_DMC_REG_BASE + (0xab << 2)) 	///../ucode/dmc_reg.h:285
+#define P_DMC_AM7_QOS_DECBK 		MMC_REG_ADDR(DMC_AM7_QOS_DECBK)
+#define DMC_AM7_QOS_DIS (S_DMC_REG_BASE + (0xac << 2)) 	///../ucode/dmc_reg.h:286
+#define P_DMC_AM7_QOS_DIS 		MMC_REG_ADDR(DMC_AM7_QOS_DIS)
+#define DMC_AM7_QOS_DISBK (S_DMC_REG_BASE + (0xad << 2)) 	///../ucode/dmc_reg.h:287
+#define P_DMC_AM7_QOS_DISBK 		MMC_REG_ADDR(DMC_AM7_QOS_DISBK)
+#define DMC_AM7_QOS_CTRL0 (S_DMC_REG_BASE + (0xae << 2)) 	///../ucode/dmc_reg.h:288
+#define P_DMC_AM7_QOS_CTRL0 		MMC_REG_ADDR(DMC_AM7_QOS_CTRL0)
+#define DMC_AM7_QOS_CTRL1 (S_DMC_REG_BASE + (0xaf << 2)) 	///../ucode/dmc_reg.h:289
+#define P_DMC_AM7_QOS_CTRL1 		MMC_REG_ADDR(DMC_AM7_QOS_CTRL1)
+#define DMC_AXI0_CHAN_CTRL (S_DMC_REG_BASE + (0xb0 << 2)) 	///../ucode/dmc_reg.h:291
+#define P_DMC_AXI0_CHAN_CTRL 		MMC_REG_ADDR(DMC_AXI0_CHAN_CTRL)
+#define DMC_AXI0_HOLD_CTRL (S_DMC_REG_BASE + (0xb1 << 2)) 	///../ucode/dmc_reg.h:292
+#define P_DMC_AXI0_HOLD_CTRL 		MMC_REG_ADDR(DMC_AXI0_HOLD_CTRL)
+#define DMC_AXI0_QOS_INC (S_DMC_REG_BASE + (0xb2 << 2)) 	///../ucode/dmc_reg.h:293
+#define P_DMC_AXI0_QOS_INC 		MMC_REG_ADDR(DMC_AXI0_QOS_INC)
+#define DMC_AXI0_QOS_INCBK (S_DMC_REG_BASE + (0xb3 << 2)) 	///../ucode/dmc_reg.h:294
+#define P_DMC_AXI0_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI0_QOS_INCBK)
+#define DMC_AXI0_QOS_DEC (S_DMC_REG_BASE + (0xb4 << 2)) 	///../ucode/dmc_reg.h:295
+#define P_DMC_AXI0_QOS_DEC 		MMC_REG_ADDR(DMC_AXI0_QOS_DEC)
+#define DMC_AXI0_QOS_DECBK (S_DMC_REG_BASE + (0xb5 << 2)) 	///../ucode/dmc_reg.h:296
+#define P_DMC_AXI0_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI0_QOS_DECBK)
+#define DMC_AXI0_QOS_DIS (S_DMC_REG_BASE + (0xb6 << 2)) 	///../ucode/dmc_reg.h:297
+#define P_DMC_AXI0_QOS_DIS 		MMC_REG_ADDR(DMC_AXI0_QOS_DIS)
+#define DMC_AXI0_QOS_DISBK (S_DMC_REG_BASE + (0xb7 << 2)) 	///../ucode/dmc_reg.h:298
+#define P_DMC_AXI0_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI0_QOS_DISBK)
+#define DMC_AXI0_QOS_CTRL0 (S_DMC_REG_BASE + (0xb8 << 2)) 	///../ucode/dmc_reg.h:299
+#define P_DMC_AXI0_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI0_QOS_CTRL0)
+#define DMC_AXI0_QOS_CTRL1 (S_DMC_REG_BASE + (0xb9 << 2)) 	///../ucode/dmc_reg.h:300
+#define P_DMC_AXI0_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI0_QOS_CTRL1)
+#define DMC_AXI1_CHAN_CTRL (S_DMC_REG_BASE + (0xba << 2)) 	///../ucode/dmc_reg.h:302
+#define P_DMC_AXI1_CHAN_CTRL 		MMC_REG_ADDR(DMC_AXI1_CHAN_CTRL)
+#define DMC_AXI1_HOLD_CTRL (S_DMC_REG_BASE + (0xbb << 2)) 	///../ucode/dmc_reg.h:303
+#define P_DMC_AXI1_HOLD_CTRL 		MMC_REG_ADDR(DMC_AXI1_HOLD_CTRL)
+#define DMC_AXI1_QOS_INC (S_DMC_REG_BASE + (0xbc << 2)) 	///../ucode/dmc_reg.h:304
+#define P_DMC_AXI1_QOS_INC 		MMC_REG_ADDR(DMC_AXI1_QOS_INC)
+#define DMC_AXI1_QOS_INCBK (S_DMC_REG_BASE + (0xbd << 2)) 	///../ucode/dmc_reg.h:305
+#define P_DMC_AXI1_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI1_QOS_INCBK)
+#define DMC_AXI1_QOS_DEC (S_DMC_REG_BASE + (0xbe << 2)) 	///../ucode/dmc_reg.h:306
+#define P_DMC_AXI1_QOS_DEC 		MMC_REG_ADDR(DMC_AXI1_QOS_DEC)
+#define DMC_AXI1_QOS_DECBK (S_DMC_REG_BASE + (0xbf << 2)) 	///../ucode/dmc_reg.h:307
+#define P_DMC_AXI1_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI1_QOS_DECBK)
+#define DMC_AXI1_QOS_DIS (S_DMC_REG_BASE + (0xc0 << 2)) 	///../ucode/dmc_reg.h:308
+#define P_DMC_AXI1_QOS_DIS 		MMC_REG_ADDR(DMC_AXI1_QOS_DIS)
+#define DMC_AXI1_QOS_DISBK (S_DMC_REG_BASE + (0xc1 << 2)) 	///../ucode/dmc_reg.h:309
+#define P_DMC_AXI1_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI1_QOS_DISBK)
+#define DMC_AXI1_QOS_CTRL0 (S_DMC_REG_BASE + (0xc2 << 2)) 	///../ucode/dmc_reg.h:310
+#define P_DMC_AXI1_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI1_QOS_CTRL0)
+#define DMC_AXI1_QOS_CTRL1 (S_DMC_REG_BASE + (0xc3 << 2)) 	///../ucode/dmc_reg.h:311
+#define P_DMC_AXI1_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI1_QOS_CTRL1)
+#define DMC_AXI2_QOS_INC (S_DMC_REG_BASE + (0xc6 << 2)) 	///../ucode/dmc_reg.h:315
+#define P_DMC_AXI2_QOS_INC 		MMC_REG_ADDR(DMC_AXI2_QOS_INC)
+#define DMC_AXI2_QOS_INCBK (S_DMC_REG_BASE + (0xc7 << 2)) 	///../ucode/dmc_reg.h:316
+#define P_DMC_AXI2_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI2_QOS_INCBK)
+#define DMC_AXI2_QOS_DEC (S_DMC_REG_BASE + (0xc8 << 2)) 	///../ucode/dmc_reg.h:317
+#define P_DMC_AXI2_QOS_DEC 		MMC_REG_ADDR(DMC_AXI2_QOS_DEC)
+#define DMC_AXI2_QOS_DECBK (S_DMC_REG_BASE + (0xc9 << 2)) 	///../ucode/dmc_reg.h:318
+#define P_DMC_AXI2_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI2_QOS_DECBK)
+#define DMC_AXI2_QOS_DIS (S_DMC_REG_BASE + (0xca << 2)) 	///../ucode/dmc_reg.h:319
+#define P_DMC_AXI2_QOS_DIS 		MMC_REG_ADDR(DMC_AXI2_QOS_DIS)
+#define DMC_AXI2_QOS_DISBK (S_DMC_REG_BASE + (0xcb << 2)) 	///../ucode/dmc_reg.h:320
+#define P_DMC_AXI2_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI2_QOS_DISBK)
+#define DMC_AXI2_QOS_CTRL0 (S_DMC_REG_BASE + (0xcc << 2)) 	///../ucode/dmc_reg.h:321
+#define P_DMC_AXI2_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI2_QOS_CTRL0)
+#define DMC_AXI2_QOS_CTRL1 (S_DMC_REG_BASE + (0xcd << 2)) 	///../ucode/dmc_reg.h:322
+#define P_DMC_AXI2_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI2_QOS_CTRL1)
+#define DMC_AXI3_CHAN_CTRL (S_DMC_REG_BASE + (0xce << 2)) 	///../ucode/dmc_reg.h:324
+#define P_DMC_AXI3_CHAN_CTRL 		MMC_REG_ADDR(DMC_AXI3_CHAN_CTRL)
+#define DMC_AXI3_HOLD_CTRL (S_DMC_REG_BASE + (0xcf << 2)) 	///../ucode/dmc_reg.h:325
+#define P_DMC_AXI3_HOLD_CTRL 		MMC_REG_ADDR(DMC_AXI3_HOLD_CTRL)
+#define DMC_AXI3_QOS_INC (S_DMC_REG_BASE + (0xd0 << 2)) 	///../ucode/dmc_reg.h:326
+#define P_DMC_AXI3_QOS_INC 		MMC_REG_ADDR(DMC_AXI3_QOS_INC)
+#define DMC_AXI3_QOS_INCBK (S_DMC_REG_BASE + (0xd1 << 2)) 	///../ucode/dmc_reg.h:327
+#define P_DMC_AXI3_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI3_QOS_INCBK)
+#define DMC_AXI3_QOS_DEC (S_DMC_REG_BASE + (0xd2 << 2)) 	///../ucode/dmc_reg.h:328
+#define P_DMC_AXI3_QOS_DEC 		MMC_REG_ADDR(DMC_AXI3_QOS_DEC)
+#define DMC_AXI3_QOS_DECBK (S_DMC_REG_BASE + (0xd3 << 2)) 	///../ucode/dmc_reg.h:329
+#define P_DMC_AXI3_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI3_QOS_DECBK)
+#define DMC_AXI3_QOS_DIS (S_DMC_REG_BASE + (0xd4 << 2)) 	///../ucode/dmc_reg.h:330
+#define P_DMC_AXI3_QOS_DIS 		MMC_REG_ADDR(DMC_AXI3_QOS_DIS)
+#define DMC_AXI3_QOS_DISBK (S_DMC_REG_BASE + (0xd5 << 2)) 	///../ucode/dmc_reg.h:331
+#define P_DMC_AXI3_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI3_QOS_DISBK)
+#define DMC_AXI3_QOS_CTRL0 (S_DMC_REG_BASE + (0xd6 << 2)) 	///../ucode/dmc_reg.h:332
+#define P_DMC_AXI3_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI3_QOS_CTRL0)
+#define DMC_AXI3_QOS_CTRL1 (S_DMC_REG_BASE + (0xd7 << 2)) 	///../ucode/dmc_reg.h:333
+#define P_DMC_AXI3_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI3_QOS_CTRL1)
+#define DMC_AXI4_CHAN_CTRL (S_DMC_REG_BASE + (0xd8 << 2)) 	///../ucode/dmc_reg.h:335
+#define P_DMC_AXI4_CHAN_CTRL 		MMC_REG_ADDR(DMC_AXI4_CHAN_CTRL)
+#define DMC_AXI4_HOLD_CTRL (S_DMC_REG_BASE + (0xd9 << 2)) 	///../ucode/dmc_reg.h:336
+#define P_DMC_AXI4_HOLD_CTRL 		MMC_REG_ADDR(DMC_AXI4_HOLD_CTRL)
+#define DMC_AXI4_QOS_INC (S_DMC_REG_BASE + (0xda << 2)) 	///../ucode/dmc_reg.h:337
+#define P_DMC_AXI4_QOS_INC 		MMC_REG_ADDR(DMC_AXI4_QOS_INC)
+#define DMC_AXI4_QOS_INCBK (S_DMC_REG_BASE + (0xdb << 2)) 	///../ucode/dmc_reg.h:338
+#define P_DMC_AXI4_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI4_QOS_INCBK)
+#define DMC_AXI4_QOS_DEC (S_DMC_REG_BASE + (0xdc << 2)) 	///../ucode/dmc_reg.h:339
+#define P_DMC_AXI4_QOS_DEC 		MMC_REG_ADDR(DMC_AXI4_QOS_DEC)
+#define DMC_AXI4_QOS_DECBK (S_DMC_REG_BASE + (0xdd << 2)) 	///../ucode/dmc_reg.h:340
+#define P_DMC_AXI4_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI4_QOS_DECBK)
+#define DMC_AXI4_QOS_DIS (S_DMC_REG_BASE + (0xde << 2)) 	///../ucode/dmc_reg.h:341
+#define P_DMC_AXI4_QOS_DIS 		MMC_REG_ADDR(DMC_AXI4_QOS_DIS)
+#define DMC_AXI4_QOS_DISBK (S_DMC_REG_BASE + (0xdf << 2)) 	///../ucode/dmc_reg.h:342
+#define P_DMC_AXI4_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI4_QOS_DISBK)
+#define DMC_AXI4_QOS_CTRL0 (S_DMC_REG_BASE + (0xe0 << 2)) 	///../ucode/dmc_reg.h:343
+#define P_DMC_AXI4_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI4_QOS_CTRL0)
+#define DMC_AXI4_QOS_CTRL1 (S_DMC_REG_BASE + (0xe1 << 2)) 	///../ucode/dmc_reg.h:344
+#define P_DMC_AXI4_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI4_QOS_CTRL1)
+#define DMC_AXI5_CHAN_CTRL (S_DMC_REG_BASE + (0xe2 << 2)) 	///../ucode/dmc_reg.h:346
+#define P_DMC_AXI5_CHAN_CTRL 		MMC_REG_ADDR(DMC_AXI5_CHAN_CTRL)
+#define DMC_AXI5_HOLD_CTRL (S_DMC_REG_BASE + (0xe3 << 2)) 	///../ucode/dmc_reg.h:347
+#define P_DMC_AXI5_HOLD_CTRL 		MMC_REG_ADDR(DMC_AXI5_HOLD_CTRL)
+#define DMC_AXI5_QOS_INC (S_DMC_REG_BASE + (0xe4 << 2)) 	///../ucode/dmc_reg.h:348
+#define P_DMC_AXI5_QOS_INC 		MMC_REG_ADDR(DMC_AXI5_QOS_INC)
+#define DMC_AXI5_QOS_INCBK (S_DMC_REG_BASE + (0xe5 << 2)) 	///../ucode/dmc_reg.h:349
+#define P_DMC_AXI5_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI5_QOS_INCBK)
+#define DMC_AXI5_QOS_DEC (S_DMC_REG_BASE + (0xe6 << 2)) 	///../ucode/dmc_reg.h:350
+#define P_DMC_AXI5_QOS_DEC 		MMC_REG_ADDR(DMC_AXI5_QOS_DEC)
+#define DMC_AXI5_QOS_DECBK (S_DMC_REG_BASE + (0xe7 << 2)) 	///../ucode/dmc_reg.h:351
+#define P_DMC_AXI5_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI5_QOS_DECBK)
+#define DMC_AXI5_QOS_DIS (S_DMC_REG_BASE + (0xe8 << 2)) 	///../ucode/dmc_reg.h:352
+#define P_DMC_AXI5_QOS_DIS 		MMC_REG_ADDR(DMC_AXI5_QOS_DIS)
+#define DMC_AXI5_QOS_DISBK (S_DMC_REG_BASE + (0xe9 << 2)) 	///../ucode/dmc_reg.h:353
+#define P_DMC_AXI5_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI5_QOS_DISBK)
+#define DMC_AXI5_QOS_CTRL0 (S_DMC_REG_BASE + (0xea << 2)) 	///../ucode/dmc_reg.h:354
+#define P_DMC_AXI5_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI5_QOS_CTRL0)
+#define DMC_AXI5_QOS_CTRL1 (S_DMC_REG_BASE + (0xeb << 2)) 	///../ucode/dmc_reg.h:355
+#define P_DMC_AXI5_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI5_QOS_CTRL1)
+#define DMC_AXI6_CHAN_CTRL (S_DMC_REG_BASE + (0xec << 2)) 	///../ucode/dmc_reg.h:357
+#define P_DMC_AXI6_CHAN_CTRL 		MMC_REG_ADDR(DMC_AXI6_CHAN_CTRL)
+#define DMC_AXI6_HOLD_CTRL (S_DMC_REG_BASE + (0xed << 2)) 	///../ucode/dmc_reg.h:358
+#define P_DMC_AXI6_HOLD_CTRL 		MMC_REG_ADDR(DMC_AXI6_HOLD_CTRL)
+#define DMC_AXI6_QOS_INC (S_DMC_REG_BASE + (0xee << 2)) 	///../ucode/dmc_reg.h:359
+#define P_DMC_AXI6_QOS_INC 		MMC_REG_ADDR(DMC_AXI6_QOS_INC)
+#define DMC_AXI6_QOS_INCBK (S_DMC_REG_BASE + (0xef << 2)) 	///../ucode/dmc_reg.h:360
+#define P_DMC_AXI6_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI6_QOS_INCBK)
+#define DMC_AXI6_QOS_DEC (S_DMC_REG_BASE + (0xf0 << 2)) 	///../ucode/dmc_reg.h:361
+#define P_DMC_AXI6_QOS_DEC 		MMC_REG_ADDR(DMC_AXI6_QOS_DEC)
+#define DMC_AXI6_QOS_DECBK (S_DMC_REG_BASE + (0xf1 << 2)) 	///../ucode/dmc_reg.h:362
+#define P_DMC_AXI6_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI6_QOS_DECBK)
+#define DMC_AXI6_QOS_DIS (S_DMC_REG_BASE + (0xf2 << 2)) 	///../ucode/dmc_reg.h:363
+#define P_DMC_AXI6_QOS_DIS 		MMC_REG_ADDR(DMC_AXI6_QOS_DIS)
+#define DMC_AXI6_QOS_DISBK (S_DMC_REG_BASE + (0xf3 << 2)) 	///../ucode/dmc_reg.h:364
+#define P_DMC_AXI6_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI6_QOS_DISBK)
+#define DMC_AXI6_QOS_CTRL0 (S_DMC_REG_BASE + (0xf4 << 2)) 	///../ucode/dmc_reg.h:365
+#define P_DMC_AXI6_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI6_QOS_CTRL0)
+#define DMC_AXI6_QOS_CTRL1 (S_DMC_REG_BASE + (0xf5 << 2)) 	///../ucode/dmc_reg.h:366
+#define P_DMC_AXI6_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI6_QOS_CTRL1)
+#define DMC_AXI7_CHAN_CTRL (S_DMC_REG_BASE + (0xf6 << 2)) 	///../ucode/dmc_reg.h:368
+#define P_DMC_AXI7_CHAN_CTRL 		MMC_REG_ADDR(DMC_AXI7_CHAN_CTRL)
+#define DMC_AXI7_HOLD_CTRL (S_DMC_REG_BASE + (0xf7 << 2)) 	///../ucode/dmc_reg.h:369
+#define P_DMC_AXI7_HOLD_CTRL 		MMC_REG_ADDR(DMC_AXI7_HOLD_CTRL)
+#define DMC_AXI7_QOS_INC (S_DMC_REG_BASE + (0xf8 << 2)) 	///../ucode/dmc_reg.h:370
+#define P_DMC_AXI7_QOS_INC 		MMC_REG_ADDR(DMC_AXI7_QOS_INC)
+#define DMC_AXI7_QOS_INCBK (S_DMC_REG_BASE + (0xf9 << 2)) 	///../ucode/dmc_reg.h:371
+#define P_DMC_AXI7_QOS_INCBK 		MMC_REG_ADDR(DMC_AXI7_QOS_INCBK)
+#define DMC_AXI7_QOS_DEC (S_DMC_REG_BASE + (0xfa << 2)) 	///../ucode/dmc_reg.h:372
+#define P_DMC_AXI7_QOS_DEC 		MMC_REG_ADDR(DMC_AXI7_QOS_DEC)
+#define DMC_AXI7_QOS_DECBK (S_DMC_REG_BASE + (0xfb << 2)) 	///../ucode/dmc_reg.h:373
+#define P_DMC_AXI7_QOS_DECBK 		MMC_REG_ADDR(DMC_AXI7_QOS_DECBK)
+#define DMC_AXI7_QOS_DIS (S_DMC_REG_BASE + (0xfc << 2)) 	///../ucode/dmc_reg.h:374
+#define P_DMC_AXI7_QOS_DIS 		MMC_REG_ADDR(DMC_AXI7_QOS_DIS)
+#define DMC_AXI7_QOS_DISBK (S_DMC_REG_BASE + (0xfd << 2)) 	///../ucode/dmc_reg.h:375
+#define P_DMC_AXI7_QOS_DISBK 		MMC_REG_ADDR(DMC_AXI7_QOS_DISBK)
+#define DMC_AXI7_QOS_CTRL0 (S_DMC_REG_BASE + (0xfe << 2)) 	///../ucode/dmc_reg.h:376
+#define P_DMC_AXI7_QOS_CTRL0 		MMC_REG_ADDR(DMC_AXI7_QOS_CTRL0)
+#define DMC_AXI7_QOS_CTRL1 (S_DMC_REG_BASE + (0xff << 2)) 	///../ucode/dmc_reg.h:377
+#define P_DMC_AXI7_QOS_CTRL1 		MMC_REG_ADDR(DMC_AXI7_QOS_CTRL1)
+#define STB_VERSION 0x1600 	///../ucode/c_stb_define.h:71
+#define P_STB_VERSION 		CBUS_REG_ADDR(STB_VERSION)
+#define STB_VERSION_2 0x1650 	///../ucode/c_stb_define.h:72
+#define P_STB_VERSION_2 		CBUS_REG_ADDR(STB_VERSION_2)
+#define STB_VERSION_3 0x16a0 	///../ucode/c_stb_define.h:73
+#define P_STB_VERSION_3 		CBUS_REG_ADDR(STB_VERSION_3)
+#define STB_TEST_REG 0x1601 	///../ucode/c_stb_define.h:74
+#define P_STB_TEST_REG 		CBUS_REG_ADDR(STB_TEST_REG)
+#define STB_TEST_REG_2 0x1651 	///../ucode/c_stb_define.h:75
+#define P_STB_TEST_REG_2 		CBUS_REG_ADDR(STB_TEST_REG_2)
+#define STB_TEST_REG_3 0x16a1 	///../ucode/c_stb_define.h:76
+#define P_STB_TEST_REG_3 		CBUS_REG_ADDR(STB_TEST_REG_3)
+#define FEC_INPUT_CONTROL 0x1602 	///../ucode/c_stb_define.h:84
+#define P_FEC_INPUT_CONTROL 		CBUS_REG_ADDR(FEC_INPUT_CONTROL)
+#define FEC_INPUT_CONTROL_2 0x1652 	///../ucode/c_stb_define.h:85
+#define P_FEC_INPUT_CONTROL_2 		CBUS_REG_ADDR(FEC_INPUT_CONTROL_2)
+#define FEC_INPUT_CONTROL_3 0x16a2 	///../ucode/c_stb_define.h:86
+#define P_FEC_INPUT_CONTROL_3 		CBUS_REG_ADDR(FEC_INPUT_CONTROL_3)
+#define FEC_INPUT_DATA 0x1603 	///../ucode/c_stb_define.h:87
+#define P_FEC_INPUT_DATA 		CBUS_REG_ADDR(FEC_INPUT_DATA)
+#define FEC_INPUT_DATA_2 0x1653 	///../ucode/c_stb_define.h:88
+#define P_FEC_INPUT_DATA_2 		CBUS_REG_ADDR(FEC_INPUT_DATA_2)
+#define FEC_INPUT_DATA_3 0x16a3 	///../ucode/c_stb_define.h:89
+#define P_FEC_INPUT_DATA_3 		CBUS_REG_ADDR(FEC_INPUT_DATA_3)
+#define DEMUX_CONTROL 0x1604 	///../ucode/c_stb_define.h:115
+#define P_DEMUX_CONTROL 		CBUS_REG_ADDR(DEMUX_CONTROL)
+#define DEMUX_CONTROL_2 0x1654 	///../ucode/c_stb_define.h:116
+#define P_DEMUX_CONTROL_2 		CBUS_REG_ADDR(DEMUX_CONTROL_2)
+#define DEMUX_CONTROL_3 0x16a4 	///../ucode/c_stb_define.h:117
+#define P_DEMUX_CONTROL_3 		CBUS_REG_ADDR(DEMUX_CONTROL_3)
+#define FEC_SYNC_BYTE 0x1605 	///../ucode/c_stb_define.h:120
+#define P_FEC_SYNC_BYTE 		CBUS_REG_ADDR(FEC_SYNC_BYTE)
+#define FEC_SYNC_BYTE_2 0x1655 	///../ucode/c_stb_define.h:121
+#define P_FEC_SYNC_BYTE_2 		CBUS_REG_ADDR(FEC_SYNC_BYTE_2)
+#define FEC_SYNC_BYTE_3 0x16a5 	///../ucode/c_stb_define.h:122
+#define P_FEC_SYNC_BYTE_3 		CBUS_REG_ADDR(FEC_SYNC_BYTE_3)
+#define FM_WR_DATA 0x1606 	///../ucode/c_stb_define.h:125
+#define P_FM_WR_DATA 		CBUS_REG_ADDR(FM_WR_DATA)
+#define FM_WR_DATA_2 0x1656 	///../ucode/c_stb_define.h:126
+#define P_FM_WR_DATA_2 		CBUS_REG_ADDR(FM_WR_DATA_2)
+#define FM_WR_DATA_3 0x16a6 	///../ucode/c_stb_define.h:127
+#define P_FM_WR_DATA_3 		CBUS_REG_ADDR(FM_WR_DATA_3)
+#define FM_WR_ADDR 0x1607 	///../ucode/c_stb_define.h:132
+#define P_FM_WR_ADDR 		CBUS_REG_ADDR(FM_WR_ADDR)
+#define FM_WR_ADDR_2 0x1657 	///../ucode/c_stb_define.h:133
+#define P_FM_WR_ADDR_2 		CBUS_REG_ADDR(FM_WR_ADDR_2)
+#define FM_WR_ADDR_3 0x16a7 	///../ucode/c_stb_define.h:134
+#define P_FM_WR_ADDR_3 		CBUS_REG_ADDR(FM_WR_ADDR_3)
+#define MAX_FM_COMP_ADDR 0x1608 	///../ucode/c_stb_define.h:138
+#define P_MAX_FM_COMP_ADDR 		CBUS_REG_ADDR(MAX_FM_COMP_ADDR)
+#define MAX_FM_COMP_ADDR_2 0x1658 	///../ucode/c_stb_define.h:139
+#define P_MAX_FM_COMP_ADDR_2 		CBUS_REG_ADDR(MAX_FM_COMP_ADDR_2)
+#define MAX_FM_COMP_ADDR_3 0x16a8 	///../ucode/c_stb_define.h:140
+#define P_MAX_FM_COMP_ADDR_3 		CBUS_REG_ADDR(MAX_FM_COMP_ADDR_3)
+#define TS_HEAD_0 0x1609 	///../ucode/c_stb_define.h:145
+#define P_TS_HEAD_0 		CBUS_REG_ADDR(TS_HEAD_0)
+#define TS_HEAD_0_2 0x1659 	///../ucode/c_stb_define.h:146
+#define P_TS_HEAD_0_2 		CBUS_REG_ADDR(TS_HEAD_0_2)
+#define TS_HEAD_0_3 0x16a9 	///../ucode/c_stb_define.h:147
+#define P_TS_HEAD_0_3 		CBUS_REG_ADDR(TS_HEAD_0_3)
+#define TS_HEAD_1 0x160a 	///../ucode/c_stb_define.h:151
+#define P_TS_HEAD_1 		CBUS_REG_ADDR(TS_HEAD_1)
+#define TS_HEAD_1_2 0x165a 	///../ucode/c_stb_define.h:152
+#define P_TS_HEAD_1_2 		CBUS_REG_ADDR(TS_HEAD_1_2)
+#define TS_HEAD_1_3 0x16aa 	///../ucode/c_stb_define.h:153
+#define P_TS_HEAD_1_3 		CBUS_REG_ADDR(TS_HEAD_1_3)
+#define OM_CMD_STATUS 0x160b 	///../ucode/c_stb_define.h:162
+#define P_OM_CMD_STATUS 		CBUS_REG_ADDR(OM_CMD_STATUS)
+#define OM_CMD_STATUS_2 0x165b 	///../ucode/c_stb_define.h:163
+#define P_OM_CMD_STATUS_2 		CBUS_REG_ADDR(OM_CMD_STATUS_2)
+#define OM_CMD_STATUS_3 0x16ab 	///../ucode/c_stb_define.h:164
+#define P_OM_CMD_STATUS_3 		CBUS_REG_ADDR(OM_CMD_STATUS_3)
+#define OM_CMD_DATA 0x160c 	///../ucode/c_stb_define.h:167
+#define P_OM_CMD_DATA 		CBUS_REG_ADDR(OM_CMD_DATA)
+#define OM_CMD_DATA_2 0x165c 	///../ucode/c_stb_define.h:168
+#define P_OM_CMD_DATA_2 		CBUS_REG_ADDR(OM_CMD_DATA_2)
+#define OM_CMD_DATA_3 0x16ac 	///../ucode/c_stb_define.h:169
+#define P_OM_CMD_DATA_3 		CBUS_REG_ADDR(OM_CMD_DATA_3)
+#define OM_CMD_DATA2 0x160d 	///../ucode/c_stb_define.h:171
+#define P_OM_CMD_DATA2 		CBUS_REG_ADDR(OM_CMD_DATA2)
+#define OM_CMD_DATA2_2 0x165d 	///../ucode/c_stb_define.h:172
+#define P_OM_CMD_DATA2_2 		CBUS_REG_ADDR(OM_CMD_DATA2_2)
+#define OM_CMD_DATA2_3 0x16ad 	///../ucode/c_stb_define.h:173
+#define P_OM_CMD_DATA2_3 		CBUS_REG_ADDR(OM_CMD_DATA2_3)
+#define SEC_BUFF_01_START 0x160e 	///../ucode/c_stb_define.h:176
+#define P_SEC_BUFF_01_START 		CBUS_REG_ADDR(SEC_BUFF_01_START)
+#define SEC_BUFF_01_START_2 0x165e 	///../ucode/c_stb_define.h:177
+#define P_SEC_BUFF_01_START_2 		CBUS_REG_ADDR(SEC_BUFF_01_START_2)
+#define SEC_BUFF_01_START_3 0x16ae 	///../ucode/c_stb_define.h:178
+#define P_SEC_BUFF_01_START_3 		CBUS_REG_ADDR(SEC_BUFF_01_START_3)
+#define SEC_BUFF_23_START 0x160f 	///../ucode/c_stb_define.h:181
+#define P_SEC_BUFF_23_START 		CBUS_REG_ADDR(SEC_BUFF_23_START)
+#define SEC_BUFF_23_START_2 0x165f 	///../ucode/c_stb_define.h:182
+#define P_SEC_BUFF_23_START_2 		CBUS_REG_ADDR(SEC_BUFF_23_START_2)
+#define SEC_BUFF_23_START_3 0x16af 	///../ucode/c_stb_define.h:183
+#define P_SEC_BUFF_23_START_3 		CBUS_REG_ADDR(SEC_BUFF_23_START_3)
+#define SEC_BUFF_SIZE 0x1610 	///../ucode/c_stb_define.h:188
+#define P_SEC_BUFF_SIZE 		CBUS_REG_ADDR(SEC_BUFF_SIZE)
+#define SEC_BUFF_SIZE_2 0x1660 	///../ucode/c_stb_define.h:189
+#define P_SEC_BUFF_SIZE_2 		CBUS_REG_ADDR(SEC_BUFF_SIZE_2)
+#define SEC_BUFF_SIZE_3 0x16b0 	///../ucode/c_stb_define.h:190
+#define P_SEC_BUFF_SIZE_3 		CBUS_REG_ADDR(SEC_BUFF_SIZE_3)
+#define SEC_BUFF_BUSY 0x1611 	///../ucode/c_stb_define.h:192
+#define P_SEC_BUFF_BUSY 		CBUS_REG_ADDR(SEC_BUFF_BUSY)
+#define SEC_BUFF_BUSY_2 0x1661 	///../ucode/c_stb_define.h:193
+#define P_SEC_BUFF_BUSY_2 		CBUS_REG_ADDR(SEC_BUFF_BUSY_2)
+#define SEC_BUFF_BUSY_3 0x16b1 	///../ucode/c_stb_define.h:194
+#define P_SEC_BUFF_BUSY_3 		CBUS_REG_ADDR(SEC_BUFF_BUSY_3)
+#define SEC_BUFF_READY 0x1612 	///../ucode/c_stb_define.h:197
+#define P_SEC_BUFF_READY 		CBUS_REG_ADDR(SEC_BUFF_READY)
+#define SEC_BUFF_READY_2 0x1662 	///../ucode/c_stb_define.h:198
+#define P_SEC_BUFF_READY_2 		CBUS_REG_ADDR(SEC_BUFF_READY_2)
+#define SEC_BUFF_READY_3 0x16b2 	///../ucode/c_stb_define.h:199
+#define P_SEC_BUFF_READY_3 		CBUS_REG_ADDR(SEC_BUFF_READY_3)
+#define SEC_BUFF_NUMBER 0x1613 	///../ucode/c_stb_define.h:204
+#define P_SEC_BUFF_NUMBER 		CBUS_REG_ADDR(SEC_BUFF_NUMBER)
+#define SEC_BUFF_NUMBER_2 0x1663 	///../ucode/c_stb_define.h:205
+#define P_SEC_BUFF_NUMBER_2 		CBUS_REG_ADDR(SEC_BUFF_NUMBER_2)
+#define SEC_BUFF_NUMBER_3 0x16b3 	///../ucode/c_stb_define.h:206
+#define P_SEC_BUFF_NUMBER_3 		CBUS_REG_ADDR(SEC_BUFF_NUMBER_3)
+#define ASSIGN_PID_NUMBER 0x1614 	///../ucode/c_stb_define.h:209
+#define P_ASSIGN_PID_NUMBER 		CBUS_REG_ADDR(ASSIGN_PID_NUMBER)
+#define ASSIGN_PID_NUMBER_2 0x1664 	///../ucode/c_stb_define.h:210
+#define P_ASSIGN_PID_NUMBER_2 		CBUS_REG_ADDR(ASSIGN_PID_NUMBER_2)
+#define ASSIGN_PID_NUMBER_3 0x16b4 	///../ucode/c_stb_define.h:211
+#define P_ASSIGN_PID_NUMBER_3 		CBUS_REG_ADDR(ASSIGN_PID_NUMBER_3)
+#define VIDEO_STREAM_ID 0x1615 	///../ucode/c_stb_define.h:214
+#define P_VIDEO_STREAM_ID 		CBUS_REG_ADDR(VIDEO_STREAM_ID)
+#define VIDEO_STREAM_ID_2 0x1665 	///../ucode/c_stb_define.h:215
+#define P_VIDEO_STREAM_ID_2 		CBUS_REG_ADDR(VIDEO_STREAM_ID_2)
+#define VIDEO_STREAM_ID_3 0x16b5 	///../ucode/c_stb_define.h:216
+#define P_VIDEO_STREAM_ID_3 		CBUS_REG_ADDR(VIDEO_STREAM_ID_3)
+#define AUDIO_STREAM_ID 0x1616 	///../ucode/c_stb_define.h:217
+#define P_AUDIO_STREAM_ID 		CBUS_REG_ADDR(AUDIO_STREAM_ID)
+#define AUDIO_STREAM_ID_2 0x1666 	///../ucode/c_stb_define.h:218
+#define P_AUDIO_STREAM_ID_2 		CBUS_REG_ADDR(AUDIO_STREAM_ID_2)
+#define AUDIO_STREAM_ID_3 0x16b6 	///../ucode/c_stb_define.h:219
+#define P_AUDIO_STREAM_ID_3 		CBUS_REG_ADDR(AUDIO_STREAM_ID_3)
+#define SUB_STREAM_ID 0x1617 	///../ucode/c_stb_define.h:220
+#define P_SUB_STREAM_ID 		CBUS_REG_ADDR(SUB_STREAM_ID)
+#define SUB_STREAM_ID_2 0x1667 	///../ucode/c_stb_define.h:221
+#define P_SUB_STREAM_ID_2 		CBUS_REG_ADDR(SUB_STREAM_ID_2)
+#define SUB_STREAM_ID_3 0x16b7 	///../ucode/c_stb_define.h:222
+#define P_SUB_STREAM_ID_3 		CBUS_REG_ADDR(SUB_STREAM_ID_3)
+#define OTHER_STREAM_ID 0x1618 	///../ucode/c_stb_define.h:223
+#define P_OTHER_STREAM_ID 		CBUS_REG_ADDR(OTHER_STREAM_ID)
+#define OTHER_STREAM_ID_2 0x1668 	///../ucode/c_stb_define.h:224
+#define P_OTHER_STREAM_ID_2 		CBUS_REG_ADDR(OTHER_STREAM_ID_2)
+#define OTHER_STREAM_ID_3 0x16b8 	///../ucode/c_stb_define.h:225
+#define P_OTHER_STREAM_ID_3 		CBUS_REG_ADDR(OTHER_STREAM_ID_3)
+#define PCR90K_CTL 0x1619 	///../ucode/c_stb_define.h:228
+#define P_PCR90K_CTL 		CBUS_REG_ADDR(PCR90K_CTL)
+#define PCR90K_CTL_2 0x1669 	///../ucode/c_stb_define.h:229
+#define P_PCR90K_CTL_2 		CBUS_REG_ADDR(PCR90K_CTL_2)
+#define PCR90K_CTL_3 0x16b9 	///../ucode/c_stb_define.h:230
+#define P_PCR90K_CTL_3 		CBUS_REG_ADDR(PCR90K_CTL_3)
+#define PCR_DEMUX 0x161a 	///../ucode/c_stb_define.h:232
+#define P_PCR_DEMUX 		CBUS_REG_ADDR(PCR_DEMUX)
+#define PCR_DEMUX_2 0x166a 	///../ucode/c_stb_define.h:233
+#define P_PCR_DEMUX_2 		CBUS_REG_ADDR(PCR_DEMUX_2)
+#define PCR_DEMUX_3 0x16ba 	///../ucode/c_stb_define.h:234
+#define P_PCR_DEMUX_3 		CBUS_REG_ADDR(PCR_DEMUX_3)
+#define VIDEO_PTS_DEMUX 0x161b 	///../ucode/c_stb_define.h:236
+#define P_VIDEO_PTS_DEMUX 		CBUS_REG_ADDR(VIDEO_PTS_DEMUX)
+#define VIDEO_PTS_DEMUX_2 0x166b 	///../ucode/c_stb_define.h:237
+#define P_VIDEO_PTS_DEMUX_2 		CBUS_REG_ADDR(VIDEO_PTS_DEMUX_2)
+#define VIDEO_PTS_DEMUX_3 0x16bb 	///../ucode/c_stb_define.h:238
+#define P_VIDEO_PTS_DEMUX_3 		CBUS_REG_ADDR(VIDEO_PTS_DEMUX_3)
+#define VIDEO_DTS_DEMUX 0x161c 	///../ucode/c_stb_define.h:240
+#define P_VIDEO_DTS_DEMUX 		CBUS_REG_ADDR(VIDEO_DTS_DEMUX)
+#define VIDEO_DTS_DEMUX_2 0x166c 	///../ucode/c_stb_define.h:241
+#define P_VIDEO_DTS_DEMUX_2 		CBUS_REG_ADDR(VIDEO_DTS_DEMUX_2)
+#define VIDEO_DTS_DEMUX_3 0x16bc 	///../ucode/c_stb_define.h:242
+#define P_VIDEO_DTS_DEMUX_3 		CBUS_REG_ADDR(VIDEO_DTS_DEMUX_3)
+#define AUDIO_PTS_DEMUX 0x161d 	///../ucode/c_stb_define.h:244
+#define P_AUDIO_PTS_DEMUX 		CBUS_REG_ADDR(AUDIO_PTS_DEMUX)
+#define AUDIO_PTS_DEMUX_2 0x166d 	///../ucode/c_stb_define.h:245
+#define P_AUDIO_PTS_DEMUX_2 		CBUS_REG_ADDR(AUDIO_PTS_DEMUX_2)
+#define AUDIO_PTS_DEMUX_3 0x16bd 	///../ucode/c_stb_define.h:246
+#define P_AUDIO_PTS_DEMUX_3 		CBUS_REG_ADDR(AUDIO_PTS_DEMUX_3)
+#define SUB_PTS_DEMUX 0x161e 	///../ucode/c_stb_define.h:248
+#define P_SUB_PTS_DEMUX 		CBUS_REG_ADDR(SUB_PTS_DEMUX)
+#define SUB_PTS_DEMUX_2 0x166e 	///../ucode/c_stb_define.h:249
+#define P_SUB_PTS_DEMUX_2 		CBUS_REG_ADDR(SUB_PTS_DEMUX_2)
+#define SUB_PTS_DEMUX_3 0x16be 	///../ucode/c_stb_define.h:250
+#define P_SUB_PTS_DEMUX_3 		CBUS_REG_ADDR(SUB_PTS_DEMUX_3)
+#define STB_PTS_DTS_STATUS 0x161f 	///../ucode/c_stb_define.h:260
+#define P_STB_PTS_DTS_STATUS 		CBUS_REG_ADDR(STB_PTS_DTS_STATUS)
+#define STB_PTS_DTS_STATUS_2 0x166f 	///../ucode/c_stb_define.h:261
+#define P_STB_PTS_DTS_STATUS_2 		CBUS_REG_ADDR(STB_PTS_DTS_STATUS_2)
+#define STB_PTS_DTS_STATUS_3 0x16bf 	///../ucode/c_stb_define.h:262
+#define P_STB_PTS_DTS_STATUS_3 		CBUS_REG_ADDR(STB_PTS_DTS_STATUS_3)
+#define STB_DEBUG_INDEX 0x1620 	///../ucode/c_stb_define.h:269
+#define P_STB_DEBUG_INDEX 		CBUS_REG_ADDR(STB_DEBUG_INDEX)
+#define STB_DEBUG_INDEX_2 0x1670 	///../ucode/c_stb_define.h:270
+#define P_STB_DEBUG_INDEX_2 		CBUS_REG_ADDR(STB_DEBUG_INDEX_2)
+#define STB_DEBUG_INDEX_3 0x16c0 	///../ucode/c_stb_define.h:271
+#define P_STB_DEBUG_INDEX_3 		CBUS_REG_ADDR(STB_DEBUG_INDEX_3)
+#define STB_DEBUG_DATAUT_O 0x1621 	///../ucode/c_stb_define.h:273
+#define P_STB_DEBUG_DATAUT_O 		CBUS_REG_ADDR(STB_DEBUG_DATAUT_O)
+#define STB_DEBUG_DATAUT_O_2 0x1671 	///../ucode/c_stb_define.h:274
+#define P_STB_DEBUG_DATAUT_O_2 		CBUS_REG_ADDR(STB_DEBUG_DATAUT_O_2)
+#define STB_DEBUG_DATAUT_O_3 0x16c1 	///../ucode/c_stb_define.h:275
+#define P_STB_DEBUG_DATAUT_O_3 		CBUS_REG_ADDR(STB_DEBUG_DATAUT_O_3)
+#define STBM_CTL_O 0x1622 	///../ucode/c_stb_define.h:279
+#define P_STBM_CTL_O 		CBUS_REG_ADDR(STBM_CTL_O)
+#define STBM_CTL_O_2 0x1672 	///../ucode/c_stb_define.h:280
+#define P_STBM_CTL_O_2 		CBUS_REG_ADDR(STBM_CTL_O_2)
+#define STBM_CTL_O_3 0x16c2 	///../ucode/c_stb_define.h:281
+#define P_STBM_CTL_O_3 		CBUS_REG_ADDR(STBM_CTL_O_3)
+#define STB_INT_STATUS 0x1623 	///../ucode/c_stb_define.h:293
+#define P_STB_INT_STATUS 		CBUS_REG_ADDR(STB_INT_STATUS)
+#define STB_INT_STATUS_2 0x1673 	///../ucode/c_stb_define.h:294
+#define P_STB_INT_STATUS_2 		CBUS_REG_ADDR(STB_INT_STATUS_2)
+#define STB_INT_STATUS_3 0x16c3 	///../ucode/c_stb_define.h:295
+#define P_STB_INT_STATUS_3 		CBUS_REG_ADDR(STB_INT_STATUS_3)
+#define DEMUX_ENDIAN 0x1624 	///../ucode/c_stb_define.h:307
+#define P_DEMUX_ENDIAN 		CBUS_REG_ADDR(DEMUX_ENDIAN)
+#define DEMUX_ENDIAN_2 0x1674 	///../ucode/c_stb_define.h:308
+#define P_DEMUX_ENDIAN_2 		CBUS_REG_ADDR(DEMUX_ENDIAN_2)
+#define DEMUX_ENDIAN_3 0x16c4 	///../ucode/c_stb_define.h:309
+#define P_DEMUX_ENDIAN_3 		CBUS_REG_ADDR(DEMUX_ENDIAN_3)
+#define TS_HIU_CTL 0x1625 	///../ucode/c_stb_define.h:315
+#define P_TS_HIU_CTL 		CBUS_REG_ADDR(TS_HIU_CTL)
+#define TS_HIU_CTL_2 0x1675 	///../ucode/c_stb_define.h:316
+#define P_TS_HIU_CTL_2 		CBUS_REG_ADDR(TS_HIU_CTL_2)
+#define TS_HIU_CTL_3 0x16c5 	///../ucode/c_stb_define.h:317
+#define P_TS_HIU_CTL_3 		CBUS_REG_ADDR(TS_HIU_CTL_3)
+#define SEC_BUFF_BASE 0x1626 	///../ucode/c_stb_define.h:319
+#define P_SEC_BUFF_BASE 		CBUS_REG_ADDR(SEC_BUFF_BASE)
+#define SEC_BUFF_BASE_2 0x1676 	///../ucode/c_stb_define.h:320
+#define P_SEC_BUFF_BASE_2 		CBUS_REG_ADDR(SEC_BUFF_BASE_2)
+#define SEC_BUFF_BASE_3 0x16c6 	///../ucode/c_stb_define.h:321
+#define P_SEC_BUFF_BASE_3 		CBUS_REG_ADDR(SEC_BUFF_BASE_3)
+#define DEMUX_MEM_REQ_EN 0x1627 	///../ucode/c_stb_define.h:328
+#define P_DEMUX_MEM_REQ_EN 		CBUS_REG_ADDR(DEMUX_MEM_REQ_EN)
+#define DEMUX_MEM_REQ_EN_2 0x1677 	///../ucode/c_stb_define.h:329
+#define P_DEMUX_MEM_REQ_EN_2 		CBUS_REG_ADDR(DEMUX_MEM_REQ_EN_2)
+#define DEMUX_MEM_REQ_EN_3 0x16c7 	///../ucode/c_stb_define.h:330
+#define P_DEMUX_MEM_REQ_EN_3 		CBUS_REG_ADDR(DEMUX_MEM_REQ_EN_3)
+#define VIDEO_PDTS_WR_PTR 0x1628 	///../ucode/c_stb_define.h:332
+#define P_VIDEO_PDTS_WR_PTR 		CBUS_REG_ADDR(VIDEO_PDTS_WR_PTR)
+#define VIDEO_PDTS_WR_PTR_2 0x1678 	///../ucode/c_stb_define.h:333
+#define P_VIDEO_PDTS_WR_PTR_2 		CBUS_REG_ADDR(VIDEO_PDTS_WR_PTR_2)
+#define VIDEO_PDTS_WR_PTR_3 0x16c8 	///../ucode/c_stb_define.h:334
+#define P_VIDEO_PDTS_WR_PTR_3 		CBUS_REG_ADDR(VIDEO_PDTS_WR_PTR_3)
+#define AUDIO_PDTS_WR_PTR 0x1629 	///../ucode/c_stb_define.h:336
+#define P_AUDIO_PDTS_WR_PTR 		CBUS_REG_ADDR(AUDIO_PDTS_WR_PTR)
+#define AUDIO_PDTS_WR_PTR_2 0x1679 	///../ucode/c_stb_define.h:337
+#define P_AUDIO_PDTS_WR_PTR_2 		CBUS_REG_ADDR(AUDIO_PDTS_WR_PTR_2)
+#define AUDIO_PDTS_WR_PTR_3 0x16c9 	///../ucode/c_stb_define.h:338
+#define P_AUDIO_PDTS_WR_PTR_3 		CBUS_REG_ADDR(AUDIO_PDTS_WR_PTR_3)
+#define SUB_WR_PTR 0x162a 	///../ucode/c_stb_define.h:340
+#define P_SUB_WR_PTR 		CBUS_REG_ADDR(SUB_WR_PTR)
+#define SUB_WR_PTR_2 0x167a 	///../ucode/c_stb_define.h:341
+#define P_SUB_WR_PTR_2 		CBUS_REG_ADDR(SUB_WR_PTR_2)
+#define SUB_WR_PTR_3 0x16ca 	///../ucode/c_stb_define.h:342
+#define P_SUB_WR_PTR_3 		CBUS_REG_ADDR(SUB_WR_PTR_3)
+#define SB_START 0x162b 	///../ucode/c_stb_define.h:344
+#define P_SB_START 		CBUS_REG_ADDR(SB_START)
+#define SB_START_2 0x167b 	///../ucode/c_stb_define.h:345
+#define P_SB_START_2 		CBUS_REG_ADDR(SB_START_2)
+#define SB_START_3 0x16cb 	///../ucode/c_stb_define.h:346
+#define P_SB_START_3 		CBUS_REG_ADDR(SB_START_3)
+#define SB_LAST_ADDR 0x162c 	///../ucode/c_stb_define.h:348
+#define P_SB_LAST_ADDR 		CBUS_REG_ADDR(SB_LAST_ADDR)
+#define SB_LAST_ADDR_2 0x167c 	///../ucode/c_stb_define.h:349
+#define P_SB_LAST_ADDR_2 		CBUS_REG_ADDR(SB_LAST_ADDR_2)
+#define SB_LAST_ADDR_3 0x16cc 	///../ucode/c_stb_define.h:350
+#define P_SB_LAST_ADDR_3 		CBUS_REG_ADDR(SB_LAST_ADDR_3)
+#define SB_PES_WR_PTR 0x162d 	///../ucode/c_stb_define.h:352
+#define P_SB_PES_WR_PTR 		CBUS_REG_ADDR(SB_PES_WR_PTR)
+#define SB_PES_WR_PTR_2 0x167d 	///../ucode/c_stb_define.h:353
+#define P_SB_PES_WR_PTR_2 		CBUS_REG_ADDR(SB_PES_WR_PTR_2)
+#define SB_PES_WR_PTR_3 0x16cd 	///../ucode/c_stb_define.h:354
+#define P_SB_PES_WR_PTR_3 		CBUS_REG_ADDR(SB_PES_WR_PTR_3)
+#define OTHER_WR_PTR 0x162e 	///../ucode/c_stb_define.h:357
+#define P_OTHER_WR_PTR 		CBUS_REG_ADDR(OTHER_WR_PTR)
+#define OTHER_WR_PTR_2 0x167e 	///../ucode/c_stb_define.h:358
+#define P_OTHER_WR_PTR_2 		CBUS_REG_ADDR(OTHER_WR_PTR_2)
+#define OTHER_WR_PTR_3 0x16ce 	///../ucode/c_stb_define.h:359
+#define P_OTHER_WR_PTR_3 		CBUS_REG_ADDR(OTHER_WR_PTR_3)
+#define OB_START 0x162f 	///../ucode/c_stb_define.h:361
+#define P_OB_START 		CBUS_REG_ADDR(OB_START)
+#define OB_START_2 0x167f 	///../ucode/c_stb_define.h:362
+#define P_OB_START_2 		CBUS_REG_ADDR(OB_START_2)
+#define OB_START_3 0x16cf 	///../ucode/c_stb_define.h:363
+#define P_OB_START_3 		CBUS_REG_ADDR(OB_START_3)
+#define OB_LAST_ADDR 0x1630 	///../ucode/c_stb_define.h:365
+#define P_OB_LAST_ADDR 		CBUS_REG_ADDR(OB_LAST_ADDR)
+#define OB_LAST_ADDR_2 0x1680 	///../ucode/c_stb_define.h:366
+#define P_OB_LAST_ADDR_2 		CBUS_REG_ADDR(OB_LAST_ADDR_2)
+#define OB_LAST_ADDR_3 0x16d0 	///../ucode/c_stb_define.h:367
+#define P_OB_LAST_ADDR_3 		CBUS_REG_ADDR(OB_LAST_ADDR_3)
+#define OB_PES_WR_PTR 0x1631 	///../ucode/c_stb_define.h:369
+#define P_OB_PES_WR_PTR 		CBUS_REG_ADDR(OB_PES_WR_PTR)
+#define OB_PES_WR_PTR_2 0x1681 	///../ucode/c_stb_define.h:370
+#define P_OB_PES_WR_PTR_2 		CBUS_REG_ADDR(OB_PES_WR_PTR_2)
+#define OB_PES_WR_PTR_3 0x16d1 	///../ucode/c_stb_define.h:371
+#define P_OB_PES_WR_PTR_3 		CBUS_REG_ADDR(OB_PES_WR_PTR_3)
+#define STB_INT_MASK 0x1632 	///../ucode/c_stb_define.h:383
+#define P_STB_INT_MASK 		CBUS_REG_ADDR(STB_INT_MASK)
+#define STB_INT_MASK_2 0x1682 	///../ucode/c_stb_define.h:384
+#define P_STB_INT_MASK_2 		CBUS_REG_ADDR(STB_INT_MASK_2)
+#define STB_INT_MASK_3 0x16d2 	///../ucode/c_stb_define.h:385
+#define P_STB_INT_MASK_3 		CBUS_REG_ADDR(STB_INT_MASK_3)
+#define VIDEO_SPLICING_CTL 0x1633 	///../ucode/c_stb_define.h:392
+#define P_VIDEO_SPLICING_CTL 		CBUS_REG_ADDR(VIDEO_SPLICING_CTL)
+#define VIDEO_SPLICING_CTL_2 0x1683 	///../ucode/c_stb_define.h:393
+#define P_VIDEO_SPLICING_CTL_2 		CBUS_REG_ADDR(VIDEO_SPLICING_CTL_2)
+#define VIDEO_SPLICING_CTL_3 0x16d3 	///../ucode/c_stb_define.h:394
+#define P_VIDEO_SPLICING_CTL_3 		CBUS_REG_ADDR(VIDEO_SPLICING_CTL_3)
+#define AUDIO_SPLICING_CTL 0x1634 	///../ucode/c_stb_define.h:401
+#define P_AUDIO_SPLICING_CTL 		CBUS_REG_ADDR(AUDIO_SPLICING_CTL)
+#define AUDIO_SPLICING_CTL_2 0x1684 	///../ucode/c_stb_define.h:402
+#define P_AUDIO_SPLICING_CTL_2 		CBUS_REG_ADDR(AUDIO_SPLICING_CTL_2)
+#define AUDIO_SPLICING_CTL_3 0x16d4 	///../ucode/c_stb_define.h:403
+#define P_AUDIO_SPLICING_CTL_3 		CBUS_REG_ADDR(AUDIO_SPLICING_CTL_3)
+#define TS_PACKAGE_BYTE_COUNT 0x1635 	///../ucode/c_stb_define.h:407
+#define P_TS_PACKAGE_BYTE_COUNT 		CBUS_REG_ADDR(TS_PACKAGE_BYTE_COUNT)
+#define TS_PACKAGE_BYTE_COUNT_2 0x1685 	///../ucode/c_stb_define.h:408
+#define P_TS_PACKAGE_BYTE_COUNT_2 		CBUS_REG_ADDR(TS_PACKAGE_BYTE_COUNT_2)
+#define TS_PACKAGE_BYTE_COUNT_3 0x16d5 	///../ucode/c_stb_define.h:409
+#define P_TS_PACKAGE_BYTE_COUNT_3 		CBUS_REG_ADDR(TS_PACKAGE_BYTE_COUNT_3)
+#define PES_STRONG_SYNC 0x1636 	///../ucode/c_stb_define.h:411
+#define P_PES_STRONG_SYNC 		CBUS_REG_ADDR(PES_STRONG_SYNC)
+#define PES_STRONG_SYNC_2 0x1686 	///../ucode/c_stb_define.h:412
+#define P_PES_STRONG_SYNC_2 		CBUS_REG_ADDR(PES_STRONG_SYNC_2)
+#define PES_STRONG_SYNC_3 0x16d6 	///../ucode/c_stb_define.h:413
+#define P_PES_STRONG_SYNC_3 		CBUS_REG_ADDR(PES_STRONG_SYNC_3)
+#define OM_DATA_RD_ADDR 0x1637 	///../ucode/c_stb_define.h:417
+#define P_OM_DATA_RD_ADDR 		CBUS_REG_ADDR(OM_DATA_RD_ADDR)
+#define OM_DATA_RD_ADDR_2 0x1687 	///../ucode/c_stb_define.h:418
+#define P_OM_DATA_RD_ADDR_2 		CBUS_REG_ADDR(OM_DATA_RD_ADDR_2)
+#define OM_DATA_RD_ADDR_3 0x16d7 	///../ucode/c_stb_define.h:419
+#define P_OM_DATA_RD_ADDR_3 		CBUS_REG_ADDR(OM_DATA_RD_ADDR_3)
+#define OM_DATA_RD 0x1638 	///../ucode/c_stb_define.h:421
+#define P_OM_DATA_RD 		CBUS_REG_ADDR(OM_DATA_RD)
+#define OM_DATA_RD_2 0x1688 	///../ucode/c_stb_define.h:422
+#define P_OM_DATA_RD_2 		CBUS_REG_ADDR(OM_DATA_RD_2)
+#define OM_DATA_RD_3 0x16d8 	///../ucode/c_stb_define.h:423
+#define P_OM_DATA_RD_3 		CBUS_REG_ADDR(OM_DATA_RD_3)
+#define SECTION_AUTO_STOP_3 0x1639 	///../ucode/c_stb_define.h:433
+#define P_SECTION_AUTO_STOP_3 		CBUS_REG_ADDR(SECTION_AUTO_STOP_3)
+#define SECTION_AUTO_STOP_3_2 0x1689 	///../ucode/c_stb_define.h:434
+#define P_SECTION_AUTO_STOP_3_2 		CBUS_REG_ADDR(SECTION_AUTO_STOP_3_2)
+#define SECTION_AUTO_STOP_3_3 0x16d9 	///../ucode/c_stb_define.h:435
+#define P_SECTION_AUTO_STOP_3_3 		CBUS_REG_ADDR(SECTION_AUTO_STOP_3_3)
+#define SECTION_AUTO_STOP_2 0x163a 	///../ucode/c_stb_define.h:437
+#define P_SECTION_AUTO_STOP_2 		CBUS_REG_ADDR(SECTION_AUTO_STOP_2)
+#define SECTION_AUTO_STOP_2_2 0x168a 	///../ucode/c_stb_define.h:438
+#define P_SECTION_AUTO_STOP_2_2 		CBUS_REG_ADDR(SECTION_AUTO_STOP_2_2)
+#define SECTION_AUTO_STOP_2_3 0x16da 	///../ucode/c_stb_define.h:439
+#define P_SECTION_AUTO_STOP_2_3 		CBUS_REG_ADDR(SECTION_AUTO_STOP_2_3)
+#define SECTION_AUTO_STOP_1 0x163b 	///../ucode/c_stb_define.h:441
+#define P_SECTION_AUTO_STOP_1 		CBUS_REG_ADDR(SECTION_AUTO_STOP_1)
+#define SECTION_AUTO_STOP_1_2 0x168b 	///../ucode/c_stb_define.h:442
+#define P_SECTION_AUTO_STOP_1_2 		CBUS_REG_ADDR(SECTION_AUTO_STOP_1_2)
+#define SECTION_AUTO_STOP_1_3 0x16db 	///../ucode/c_stb_define.h:443
+#define P_SECTION_AUTO_STOP_1_3 		CBUS_REG_ADDR(SECTION_AUTO_STOP_1_3)
+#define SECTION_AUTO_STOP_0 0x163c 	///../ucode/c_stb_define.h:445
+#define P_SECTION_AUTO_STOP_0 		CBUS_REG_ADDR(SECTION_AUTO_STOP_0)
+#define SECTION_AUTO_STOP_0_2 0x168c 	///../ucode/c_stb_define.h:446
+#define P_SECTION_AUTO_STOP_0_2 		CBUS_REG_ADDR(SECTION_AUTO_STOP_0_2)
+#define SECTION_AUTO_STOP_0_3 0x16dc 	///../ucode/c_stb_define.h:447
+#define P_SECTION_AUTO_STOP_0_3 		CBUS_REG_ADDR(SECTION_AUTO_STOP_0_3)
+#define DEMUX_CHANNEL_RESET 0x163d 	///../ucode/c_stb_define.h:450
+#define P_DEMUX_CHANNEL_RESET 		CBUS_REG_ADDR(DEMUX_CHANNEL_RESET)
+#define DEMUX_CHANNEL_RESET_2 0x168d 	///../ucode/c_stb_define.h:451
+#define P_DEMUX_CHANNEL_RESET_2 		CBUS_REG_ADDR(DEMUX_CHANNEL_RESET_2)
+#define DEMUX_CHANNEL_RESET_3 0x16dd 	///../ucode/c_stb_define.h:452
+#define P_DEMUX_CHANNEL_RESET_3 		CBUS_REG_ADDR(DEMUX_CHANNEL_RESET_3)
+#define DEMUX_SCRAMBLING_STATE 0x163e 	///../ucode/c_stb_define.h:453
+#define P_DEMUX_SCRAMBLING_STATE 		CBUS_REG_ADDR(DEMUX_SCRAMBLING_STATE)
+#define DEMUX_SCRAMBLING_STATE_2 0x168e 	///../ucode/c_stb_define.h:454
+#define P_DEMUX_SCRAMBLING_STATE_2 		CBUS_REG_ADDR(DEMUX_SCRAMBLING_STATE_2)
+#define DEMUX_SCRAMBLING_STATE_3 0x16de 	///../ucode/c_stb_define.h:455
+#define P_DEMUX_SCRAMBLING_STATE_3 		CBUS_REG_ADDR(DEMUX_SCRAMBLING_STATE_3)
+#define DEMUX_CHANNEL_ACTIVITY 0x163f 	///../ucode/c_stb_define.h:456
+#define P_DEMUX_CHANNEL_ACTIVITY 		CBUS_REG_ADDR(DEMUX_CHANNEL_ACTIVITY)
+#define DEMUX_CHANNEL_ACTIVITY_2 0x168f 	///../ucode/c_stb_define.h:457
+#define P_DEMUX_CHANNEL_ACTIVITY_2 		CBUS_REG_ADDR(DEMUX_CHANNEL_ACTIVITY_2)
+#define DEMUX_CHANNEL_ACTIVITY_3 0x16df 	///../ucode/c_stb_define.h:458
+#define P_DEMUX_CHANNEL_ACTIVITY_3 		CBUS_REG_ADDR(DEMUX_CHANNEL_ACTIVITY_3)
+#define DEMUX_STAMP_CTL 0x1640 	///../ucode/c_stb_define.h:464
+#define P_DEMUX_STAMP_CTL 		CBUS_REG_ADDR(DEMUX_STAMP_CTL)
+#define DEMUX_STAMP_CTL_2 0x1690 	///../ucode/c_stb_define.h:465
+#define P_DEMUX_STAMP_CTL_2 		CBUS_REG_ADDR(DEMUX_STAMP_CTL_2)
+#define DEMUX_STAMP_CTL_3 0x16e0 	///../ucode/c_stb_define.h:466
+#define P_DEMUX_STAMP_CTL_3 		CBUS_REG_ADDR(DEMUX_STAMP_CTL_3)
+#define DEMUX_VIDEO_STAMP_SYNC_0 0x1641 	///../ucode/c_stb_define.h:467
+#define P_DEMUX_VIDEO_STAMP_SYNC_0 		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_0)
+#define DEMUX_VIDEO_STAMP_SYNC_0_2 0x1691 	///../ucode/c_stb_define.h:468
+#define P_DEMUX_VIDEO_STAMP_SYNC_0_2 		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_0_2)
+#define DEMUX_VIDEO_STAMP_SYNC_0_3 0x16e1 	///../ucode/c_stb_define.h:469
+#define P_DEMUX_VIDEO_STAMP_SYNC_0_3 		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_0_3)
+#define DEMUX_VIDEO_STAMP_SYNC_1 0x1642 	///../ucode/c_stb_define.h:470
+#define P_DEMUX_VIDEO_STAMP_SYNC_1 		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_1)
+#define DEMUX_VIDEO_STAMP_SYNC_1_2 0x1692 	///../ucode/c_stb_define.h:471
+#define P_DEMUX_VIDEO_STAMP_SYNC_1_2 		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_1_2)
+#define DEMUX_VIDEO_STAMP_SYNC_1_3 0x16e2 	///../ucode/c_stb_define.h:472
+#define P_DEMUX_VIDEO_STAMP_SYNC_1_3 		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_1_3)
+#define DEMUX_AUDIO_STAMP_SYNC_0 0x1643 	///../ucode/c_stb_define.h:473
+#define P_DEMUX_AUDIO_STAMP_SYNC_0 		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_0)
+#define DEMUX_AUDIO_STAMP_SYNC_0_2 0x1693 	///../ucode/c_stb_define.h:474
+#define P_DEMUX_AUDIO_STAMP_SYNC_0_2 		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_0_2)
+#define DEMUX_AUDIO_STAMP_SYNC_0_3 0x16e3 	///../ucode/c_stb_define.h:475
+#define P_DEMUX_AUDIO_STAMP_SYNC_0_3 		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_0_3)
+#define DEMUX_AUDIO_STAMP_SYNC_1 0x1644 	///../ucode/c_stb_define.h:476
+#define P_DEMUX_AUDIO_STAMP_SYNC_1 		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_1)
+#define DEMUX_AUDIO_STAMP_SYNC_1_2 0x1694 	///../ucode/c_stb_define.h:477
+#define P_DEMUX_AUDIO_STAMP_SYNC_1_2 		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_1_2)
+#define DEMUX_AUDIO_STAMP_SYNC_1_3 0x16e4 	///../ucode/c_stb_define.h:478
+#define P_DEMUX_AUDIO_STAMP_SYNC_1_3 		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_1_3)
+#define DEMUX_SECTION_RESET 0x1645 	///../ucode/c_stb_define.h:483
+#define P_DEMUX_SECTION_RESET 		CBUS_REG_ADDR(DEMUX_SECTION_RESET)
+#define DEMUX_SECTION_RESET_2 0x1695 	///../ucode/c_stb_define.h:484
+#define P_DEMUX_SECTION_RESET_2 		CBUS_REG_ADDR(DEMUX_SECTION_RESET_2)
+#define DEMUX_SECTION_RESET_3 0x16e5 	///../ucode/c_stb_define.h:485
+#define P_DEMUX_SECTION_RESET_3 		CBUS_REG_ADDR(DEMUX_SECTION_RESET_3)
+#define EFUSE_CNTL0 0x0 	///../ucode/secure_apb.h:7
+#define P_EFUSE_CNTL0 		SECBUS_REG_ADDR(EFUSE_CNTL0)
+#define EFUSE_CNTL1 0x1 	///../ucode/secure_apb.h:8
+#define P_EFUSE_CNTL1 		SECBUS_REG_ADDR(EFUSE_CNTL1)
+#define EFUSE_CNTL2 0x2 	///../ucode/secure_apb.h:9
+#define P_EFUSE_CNTL2 		SECBUS_REG_ADDR(EFUSE_CNTL2)
+#define EFUSE_CNTL3 0x3 	///../ucode/secure_apb.h:10
+#define P_EFUSE_CNTL3 		SECBUS_REG_ADDR(EFUSE_CNTL3)
+#define EFUSE_CNTL4 0x4 	///../ucode/secure_apb.h:11
+#define P_EFUSE_CNTL4 		SECBUS_REG_ADDR(EFUSE_CNTL4)
+#define AO_SECURE_REG0 0x00 	///../ucode/secure_apb.h:19
+#define P_AO_SECURE_REG0 		SECBUS2_REG_ADDR(AO_SECURE_REG0)
+#define AO_SECURE_REG1 0x01 	///../ucode/secure_apb.h:20
+#define P_AO_SECURE_REG1 		SECBUS2_REG_ADDR(AO_SECURE_REG1)
+#define AO_SECURE_REG2 0x02 	///../ucode/secure_apb.h:21
+#define P_AO_SECURE_REG2 		SECBUS2_REG_ADDR(AO_SECURE_REG2)
+#define SEC_BLKMV_AES_REG0 0x00 	///../ucode/secure_apb.h:34
+#define P_SEC_BLKMV_AES_REG0 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_REG0)
+#define SEC_BLKMV_AES_W0 0x01 	///../ucode/secure_apb.h:35
+#define P_SEC_BLKMV_AES_W0 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_W0)
+#define SEC_BLKMV_AES_W1 0x02 	///../ucode/secure_apb.h:36
+#define P_SEC_BLKMV_AES_W1 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_W1)
+#define SEC_BLKMV_AES_W2 0x03 	///../ucode/secure_apb.h:37
+#define P_SEC_BLKMV_AES_W2 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_W2)
+#define SEC_BLKMV_AES_W3 0x04 	///../ucode/secure_apb.h:38
+#define P_SEC_BLKMV_AES_W3 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_W3)
+#define SEC_BLKMV_AES_R0 0x05 	///../ucode/secure_apb.h:39
+#define P_SEC_BLKMV_AES_R0 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_R0)
+#define SEC_BLKMV_AES_R1 0x06 	///../ucode/secure_apb.h:40
+#define P_SEC_BLKMV_AES_R1 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_R1)
+#define SEC_BLKMV_AES_R2 0x07 	///../ucode/secure_apb.h:41
+#define P_SEC_BLKMV_AES_R2 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_R2)
+#define SEC_BLKMV_AES_R3 0x08 	///../ucode/secure_apb.h:42
+#define P_SEC_BLKMV_AES_R3 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_R3)
+#define SEC_BLKMV_TDES_LAST_IV_LO 0x09 	///../ucode/secure_apb.h:43
+#define P_SEC_BLKMV_TDES_LAST_IV_LO 		SECBUS3_REG_ADDR(SEC_BLKMV_TDES_LAST_IV_LO)
+#define SEC_BLKMV_TDES_LAST_IV_HI 0x0a 	///../ucode/secure_apb.h:44
+#define P_SEC_BLKMV_TDES_LAST_IV_HI 		SECBUS3_REG_ADDR(SEC_BLKMV_TDES_LAST_IV_HI)
+#define SEC_BLKMV_AES_IV_0 0x0b 	///../ucode/secure_apb.h:45
+#define P_SEC_BLKMV_AES_IV_0 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_0)
+#define SEC_BLKMV_AES_IV_1 0x0c 	///../ucode/secure_apb.h:46
+#define P_SEC_BLKMV_AES_IV_1 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_1)
+#define SEC_BLKMV_AES_IV_2 0x0d 	///../ucode/secure_apb.h:47
+#define P_SEC_BLKMV_AES_IV_2 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_2)
+#define SEC_BLKMV_AES_IV_3 0x0e 	///../ucode/secure_apb.h:48
+#define P_SEC_BLKMV_AES_IV_3 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_3)
+#define SEC_BLKMV_AES_KEY_0 0x10 	///../ucode/secure_apb.h:50
+#define P_SEC_BLKMV_AES_KEY_0 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_0)
+#define SEC_BLKMV_AES_KEY_1 0x11 	///../ucode/secure_apb.h:51
+#define P_SEC_BLKMV_AES_KEY_1 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_1)
+#define SEC_BLKMV_AES_KEY_2 0x12 	///../ucode/secure_apb.h:52
+#define P_SEC_BLKMV_AES_KEY_2 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_2)
+#define SEC_BLKMV_AES_KEY_3 0x13 	///../ucode/secure_apb.h:53
+#define P_SEC_BLKMV_AES_KEY_3 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_3)
+#define SEC_BLKMV_AES_KEY_4 0x14 	///../ucode/secure_apb.h:54
+#define P_SEC_BLKMV_AES_KEY_4 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_4)
+#define SEC_BLKMV_AES_KEY_5 0x15 	///../ucode/secure_apb.h:55
+#define P_SEC_BLKMV_AES_KEY_5 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_5)
+#define SEC_BLKMV_AES_KEY_6 0x16 	///../ucode/secure_apb.h:56
+#define P_SEC_BLKMV_AES_KEY_6 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_6)
+#define SEC_BLKMV_AES_KEY_7 0x17 	///../ucode/secure_apb.h:57
+#define P_SEC_BLKMV_AES_KEY_7 		SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_7)
+#define SEC_BLKMV_THREAD_TABLE_START0 0x18 	///../ucode/secure_apb.h:59
+#define P_SEC_BLKMV_THREAD_TABLE_START0 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START0)
+#define SEC_BLKMV_THREAD_TABLE_CURR0 0x19 	///../ucode/secure_apb.h:60
+#define P_SEC_BLKMV_THREAD_TABLE_CURR0 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR0)
+#define SEC_BLKMV_THREAD_TABLE_END0 0x1a 	///../ucode/secure_apb.h:61
+#define P_SEC_BLKMV_THREAD_TABLE_END0 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END0)
+#define SEC_BLKMV_THREAD_TABLE_START1 0x1b 	///../ucode/secure_apb.h:63
+#define P_SEC_BLKMV_THREAD_TABLE_START1 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START1)
+#define SEC_BLKMV_THREAD_TABLE_CURR1 0x1c 	///../ucode/secure_apb.h:64
+#define P_SEC_BLKMV_THREAD_TABLE_CURR1 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR1)
+#define SEC_BLKMV_THREAD_TABLE_END1 0x1d 	///../ucode/secure_apb.h:65
+#define P_SEC_BLKMV_THREAD_TABLE_END1 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END1)
+#define SEC_BLKMV_THREAD_TABLE_START2 0x1e 	///../ucode/secure_apb.h:67
+#define P_SEC_BLKMV_THREAD_TABLE_START2 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START2)
+#define SEC_BLKMV_THREAD_TABLE_CURR2 0x1f 	///../ucode/secure_apb.h:68
+#define P_SEC_BLKMV_THREAD_TABLE_CURR2 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR2)
+#define SEC_BLKMV_THREAD_TABLE_END2 0x20 	///../ucode/secure_apb.h:69
+#define P_SEC_BLKMV_THREAD_TABLE_END2 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END2)
+#define SEC_BLKMV_THREAD_TABLE_START3 0x21 	///../ucode/secure_apb.h:71
+#define P_SEC_BLKMV_THREAD_TABLE_START3 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START3)
+#define SEC_BLKMV_THREAD_TABLE_CURR3 0x22 	///../ucode/secure_apb.h:72
+#define P_SEC_BLKMV_THREAD_TABLE_CURR3 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR3)
+#define SEC_BLKMV_THREAD_TABLE_END3 0x23 	///../ucode/secure_apb.h:73
+#define P_SEC_BLKMV_THREAD_TABLE_END3 		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END3)
+#define SEC_BLKMV_GEN_REG0 0x24 	///../ucode/secure_apb.h:75
+#define P_SEC_BLKMV_GEN_REG0 		SECBUS3_REG_ADDR(SEC_BLKMV_GEN_REG0)
+#define HDMI_ADDR_PORT 0x42000 	///../ucode/hdmi.h:4
+#define P_HDMI_ADDR_PORT 		APB_REG_ADDR(HDMI_ADDR_PORT)
+#define HDMI_DATA_PORT 0x42004 	///../ucode/hdmi.h:5
+#define P_HDMI_DATA_PORT 		APB_REG_ADDR(HDMI_DATA_PORT)
+#define HDMI_CTRL_PORT 0x42008 	///../ucode/hdmi.h:6
+#define P_HDMI_CTRL_PORT 		APB_REG_ADDR(HDMI_CTRL_PORT)
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/regs.h b/arch/arm/mach-meson8b/include/mach/regs.h
new file mode 100644
index 000000000000..bddc77efe5f7
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/regs.h
@@ -0,0 +1,131 @@
+/*
+ *
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ * Basic register address definitions in physical memory and
+ * some block defintions for core devices like the timer.
+ * copy from linux kernel
+ */
+
+/*
+ * Temp solution file for M6 define
+*/
+#ifndef __MACH_MESSON_FIRM_REGS_H
+#define __MACH_MESSON_FIRM_REGS_H
+
+#define IO_CBUS_BASE2  0xc1100000
+
+#define NAND_CMD  ((0xc1108600-IO_CBUS_BASE2)>>2)
+#define NAND_CFG  ((0xc1108604-IO_CBUS_BASE2)>>2)
+#define NAND_DADR ((0xc1108608-IO_CBUS_BASE2)>>2)
+#define NAND_IADR ((0xc110860c-IO_CBUS_BASE2)>>2)
+#define NAND_BUF  ((0xc1108610-IO_CBUS_BASE2)>>2)
+#define NAND_INFO ((0xc1108614-IO_CBUS_BASE2)>>2)
+#define NAND_DC   ((0xc1108618-IO_CBUS_BASE2)>>2)
+#define NAND_ADR  ((0xc110861c-IO_CBUS_BASE2)>>2)
+#define NAND_DL   ((0xc1108620-IO_CBUS_BASE2)>>2)
+#define NAND_DH   ((0xc1108624-IO_CBUS_BASE2)>>2)
+#define NAND_CADR ((0xc1108628-IO_CBUS_BASE2)>>2)
+#define NAND_SADR ((0xc110862c-IO_CBUS_BASE2)>>2)
+
+#define P_NAND_CMD                                CBUS_REG_ADDR(NAND_CMD)
+#define P_NAND_CFG                                CBUS_REG_ADDR(NAND_CFG)
+#define P_NAND_DADR                               CBUS_REG_ADDR(NAND_DADR)
+#define P_NAND_IADR                               CBUS_REG_ADDR(NAND_IADR)
+#define P_NAND_BUF                                CBUS_REG_ADDR(NAND_BUF)
+#define P_NAND_INFO                               CBUS_REG_ADDR(NAND_INFO)
+#define P_NAND_DC                                 CBUS_REG_ADDR(NAND_DC)
+#define P_NAND_ADR                                CBUS_REG_ADDR(NAND_ADR)
+#define P_NAND_DL                                 CBUS_REG_ADDR(NAND_DL)
+#define P_NAND_DH                                 CBUS_REG_ADDR(NAND_DH)
+#define P_NAND_CADR                               CBUS_REG_ADDR(NAND_CADR)
+#define P_NAND_SADR                               CBUS_REG_ADDR(NAND_SADR)
+
+#define VPP_OSD2_PREBLEND           (1 << 17)
+#define VPP_OSD1_PREBLEND           (1 << 16)
+#define VPP_VD2_PREBLEND            (1 << 15)
+#define VPP_VD1_PREBLEND            (1 << 14)
+#define VPP_OSD2_POSTBLEND          (1 << 13)
+#define VPP_OSD1_POSTBLEND          (1 << 12)
+#define VPP_VD2_POSTBLEND           (1 << 11)
+#define VPP_VD1_POSTBLEND           (1 << 10)
+#define VPP_POSTBLEND_EN			(1 << 7)
+#define VPP_PRE_FG_OSD2             (1 << 5)
+#define VPP_PREBLEND_EN             (1 << 6)
+#define VPP_POST_FG_OSD2            (1 << 4)
+
+#define I2SIN_DIR       0    // I2S CLK and LRCLK direction. 0 : input 1 : output.
+#define I2SIN_CLK_SEL    1    // I2S clk selection : 0 : from pad input. 1 : from AIU.
+#define I2SIN_LRCLK_SEL 2
+#define I2SIN_POS_SYNC  3
+#define I2SIN_LRCLK_SKEW 4    // 6:4
+#define I2SIN_LRCLK_INVT 7
+#define I2SIN_SIZE       8    //9:8 : 0 16 bit. 1 : 18 bits 2 : 20 bits 3 : 24bits.
+#define I2SIN_CHAN_EN   10    //13:10. 
+#define I2SIN_EN        15
+
+#define AUDIN_FIFO0_EN       0
+#define AUDIN_FIFO0_LOAD     2    //write 1 to load address to AUDIN_FIFO0.
+         
+#define AUDIN_FIFO0_DIN_SEL  3
+            // 0     spdifIN
+            // 1     i2Sin
+            // 2     PCMIN
+            // 3     HDMI in
+            // 4     DEMODULATOR IN
+#define AUDIN_FIFO0_ENDIAN   8    //10:8   data endian control.
+#define AUDIN_FIFO0_CHAN     11    //14:11   channel number.  in M1 suppose there's only 1 channel and 2 channel.
+#define AUDIN_FIFO0_UG       15    // urgent request enable.
+
+
+/*BT656 MACRO */
+//#define BT_CTRL 0x2240 	///../ucode/register.h
+#define BT_SYSCLOCK_RESET    30      //Sync fifo soft  reset_n at system clock domain.     Level reset. 0 = reset. 1 : normal mode.
+#define BT_656CLOCK_RESET    29      //Sync fifo soft reset_n at bt656 clock domain.   Level reset.  0 = reset.  1 : normal mode.
+//    #define BT_VSYNC_SEL              25      //25:26 VDIN VS selection.   00 :  SOF.  01: EOF.   10: vbi start point.  11 : vbi end point.
+//    #define BT_HSYNC_SEL              23      //24:23 VDIN HS selection.  00 : EAV.  01: SAV.    10:  EOL.  11: SOL
+#define BT_CAMERA_MODE        22      // Camera_mode
+#define BT_CLOCK_ENABLE        7	// 1: enable bt656 clock. 0: disable bt656 clock.
+
+//#define BT_PORT_CTRL 0x2249 	///../ucode/register.h
+//    #define BT_VSYNC_MODE      23  //1: use  vsync  as the VBI start point. 0: use the regular vref.
+//    #define BT_HSYNC_MODE      22  //1: use hsync as the active video start point.  0. Use regular sav and eav. 
+#define BT_SOFT_RESET           31	// Soft reset
+//    #define BT_JPEG_START           30
+//    #define BT_JPEG_IGNORE_BYTES    18	//20:18
+//    #define BT_JPEG_IGNORE_LAST     17
+#define BT_UPDATE_ST_SEL        16
+#define BT_COLOR_REPEAT         15
+//    #define BT_VIDEO_MODE           13	// 14:13
+#define BT_AUTO_FMT             12
+#define BT_PROG_MODE            11
+//    #define BT_JPEG_MODE            10
+#define BT_XCLK27_EN_BIT        9	// 1 : xclk27 is input.     0 : xclk27 is output.
+#define BT_FID_EN_BIT           8	// 1 : enable use FID port.
+#define BT_CLK27_SEL_BIT        7	// 1 : external xclk27      0 : internal clk27.
+//    #define BT_CLK27_PHASE_BIT      6	// 1 : no inverted          0 : inverted.
+//    #define BT_ACE_MODE_BIT         5	// 1 : auto cover error by hardware.
+#define BT_SLICE_MODE_BIT       4	// 1 : no ancillay flag     0 : with ancillay flag.
+#define BT_FMT_MODE_BIT         3	// 1 : ntsc                 0 : pal.
+#define BT_REF_MODE_BIT         2	// 1 : from bit stream.     0 : from ports.
+#define BT_MODE_BIT             1	// 1 : BT656 model          0 : SAA7118 mode.
+#define BT_EN_BIT               0	// 1 : enable.
+#define BT_VSYNC_PHASE      0
+#define BT_HSYNC_PHASE      1
+//    #define BT_VSYNC_PULSE      2
+//    #define BT_HSYNC_PULSE      3
+//    #define BT_FID_PHASE        4
+#define BT_FID_HSVS         5
+#define BT_IDQ_EN           6
+#define BT_IDQ_PHASE        7
+#define BT_D8B              8
+//    #define BT_10BTO8B          9
+#define BT_FID_DELAY       10	//12:10
+#define BT_VSYNC_DELAY     13	//
+#define BT_HSYNC_DELAY     16
+
+
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/sd.h b/arch/arm/mach-meson8b/include/mach/sd.h
new file mode 100644
index 000000000000..c2f893591974
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/sd.h
@@ -0,0 +1,658 @@
+/*
+ * SDHC definitions
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __AML_SDHC_H__
+#define __AML_SDHC_H__
+
+#include <linux/types.h>
+#include <linux/device.h>
+#include <linux/mmc/host.h>
+#include <linux/earlysuspend.h>
+
+enum aml_mmc_waitfor {
+	XFER_INIT,              /* 0 */
+	XFER_START,				/* 1 */
+	XFER_AFTER_START,		/* 2 */
+	XFER_IRQ_OCCUR,			/* 3 */
+	XFER_IRQ_TASKLET_CMD,	/* 4 */
+	XFER_IRQ_TASKLET_DATA,	/* 5 */
+	XFER_IRQ_TASKLET_BUSY,	/* 6 */
+	XFER_IRQ_UNKNOWN_IRQ,	/* 7 */
+	XFER_TIMER_TIMEOUT,		/* 8 */
+	XFER_TASKLET_CMD,		/* 9 */
+	XFER_TASKLET_DATA,		/* 10 */
+	XFER_TASKLET_BUSY,		/* 11 */
+	XFER_TIMEDOUT,			/* 12 */
+	XFER_FINISHED,			/* 13 */
+};
+
+enum aml_host_status { /* Host controller status */
+	HOST_INVALID = 0,       /* 0, invalid value used for initialization */
+	HOST_RX_FIFO_FULL = 1,  /* 1, start with 1 */
+	HOST_TX_FIFO_EMPTY,	    /* 2 */
+	HOST_RSP_CRC_ERR,	    /* 3 */
+	HOST_DAT_CRC_ERR,	    /* 4 */
+	HOST_RSP_TIMEOUT_ERR,   /* 5 */
+	HOST_DAT_TIMEOUT_ERR,   /* 6 */
+    HOST_ERR_END,	        /* 7, end of errors */
+	HOST_TASKLET_CMD,	    /* 8 */
+	HOST_TASKLET_DATA,	    /* 9 */
+};
+
+struct amlsd_host;
+struct amlsd_platform {
+	struct amlsd_host* host;
+	struct mmc_host *mmc;
+	struct list_head sibling;
+	u32 ocr_avail;
+	u32 port;
+#define     PORT_SDIO_A     0
+#define     PORT_SDIO_B     1
+#define     PORT_SDIO_C     2
+#define     PORT_SDHC_A     3
+#define     PORT_SDHC_B     4
+#define     PORT_SDHC_C     5
+
+	unsigned int width;
+	unsigned int caps;
+	unsigned int caps2;
+    unsigned int card_capacity;
+
+	unsigned int f_min;
+	unsigned int f_max;
+	unsigned int f_max_w;
+	unsigned int clkc;
+	unsigned int clk2;
+	unsigned int clkc_w;
+	unsigned int ctrl;
+	unsigned int clock;
+	unsigned char signal_voltage;		/* signalling voltage (1.8V or 3.3V) */
+
+	unsigned int low_burst;
+	unsigned int irq_in;
+	unsigned int irq_in_edge;
+	unsigned int irq_out;
+	unsigned int irq_out_edge;
+	unsigned int gpio_cd;
+	unsigned int gpio_power;
+	unsigned int power_level;
+	char pinname[32];
+	unsigned int gpio_ro;
+    unsigned int gpio_dat3;
+    unsigned int jtag_pin;
+
+    int is_sduart;
+    bool is_in;
+
+    /* we used this flag to filter some unnecessary cmd before initialized flow */
+    bool is_fir_init; // has been initialized for the first time
+    unsigned int card_type; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+#define CARD_TYPE_UNKNOWN           0        /* unknown */
+#define CARD_TYPE_MMC               1        /* MMC card */
+#define CARD_TYPE_SD                2        /* SD card */
+#define CARD_TYPE_SDIO              3        /* SDIO card */
+#define CARD_TYPE_SD_COMBO          4        /* SD combo (IO+mem) card */
+#define CARD_TYPE_NON_SDIO          5        /* NON sdio device (means SD/MMC card) */
+#define aml_card_type_unknown(c)    ((c)->card_type == CARD_TYPE_UNKNOWN)
+#define aml_card_type_mmc(c)        ((c)->card_type == CARD_TYPE_MMC)
+#define aml_card_type_sd(c)         ((c)->card_type == CARD_TYPE_SD)
+#define aml_card_type_sdio(c)       ((c)->card_type == CARD_TYPE_SDIO)
+#define aml_card_type_non_sdio(c)   ((c)->card_type == CARD_TYPE_NON_SDIO)
+
+    // struct pinctrl *uart_ao_pinctrl;
+	void (*irq_init)(struct amlsd_platform* pdata);
+
+	unsigned int max_blk_count;
+	unsigned int max_blk_size;
+	unsigned int max_req_size;
+	unsigned int max_seg_size;
+
+	/*for inand partition: struct mtd_partition, easy porting from nand*/
+	struct mtd_partition *parts;
+	unsigned int nr_parts;
+
+	struct resource* resource;
+	void (*xfer_pre)(struct amlsd_platform* pdata);
+	void (*xfer_post)(struct amlsd_platform* pdata);
+
+	int (*port_init)(struct amlsd_platform* pdata);
+	int (*cd)(struct amlsd_platform* pdata);
+	int (*ro)(struct amlsd_platform* pdata);
+	void (*pwr_pre)(struct amlsd_platform* pdata);
+	void (*pwr_on)(struct amlsd_platform* pdata);
+	void (*pwr_off)(struct amlsd_platform* pdata);
+
+};
+
+struct amlsd_host {
+	/* back-link to device */
+	struct device *dev;
+	struct list_head sibling;
+    struct platform_device *pdev;
+	struct amlsd_platform * pdata;
+	struct mmc_host		*mmc;
+	struct mmc_request	*request;
+	struct resource		*mem;
+	void __iomem		*base;
+	int			dma;
+	char*		bn_buf;
+	dma_addr_t		bn_dma_buf;
+	unsigned int f_max;
+	unsigned int f_max_w;
+	unsigned int f_min;
+	// struct tasklet_struct cmd_tlet;
+	// struct tasklet_struct data_tlet;
+	// struct tasklet_struct busy_tlet;
+	// struct tasklet_struct to_tlet;
+    // struct timer_list timeout_tlist;
+	struct delayed_work	timeout;
+	// struct early_suspend amlsd_early_suspend;
+
+	unsigned int send;
+	unsigned int ctrl;
+	unsigned int clkc;
+	// unsigned int clkc_w;
+	// unsigned int pdma;
+	// unsigned int pdma_s;
+	// unsigned int pdma_low;
+	unsigned int misc;
+	unsigned int ictl;
+	unsigned int ista;
+	unsigned int dma_addr;
+
+	unsigned long		clk_rate;
+
+	struct  mmc_request	*mrq;
+	struct  mmc_request	*mrq2;
+	spinlock_t	mrq_lock;
+	int			cmd_is_stop;
+	enum aml_mmc_waitfor	xfer_step;
+	enum aml_mmc_waitfor	xfer_step_prev;
+
+	int			bus_width;
+	int     port;
+	int     locked;
+    bool    is_gated;
+	// unsigned int		ccnt, dcnt;
+
+	int     status; // host status: xx_error/ok
+
+    char    *msg_buf;
+#define MESSAGE_BUF_SIZE            512
+
+#ifdef CONFIG_DEBUG_FS
+	struct dentry		*debug_root;
+	struct dentry		*debug_state;
+	struct dentry		*debug_regs;
+#endif
+
+#ifdef CONFIG_CPU_FREQ
+	struct notifier_block	freq_transition;
+#endif
+
+    u32			opcode;
+	u32			arg;
+    u32         cmd25_cnt;
+    
+#ifdef      CONFIG_MMC_AML_DEBUG
+    u32         req_cnt;
+    u32         trans_size;
+    u32         time_req_sta; // request start time
+
+    u32         reg_buf[16];
+#endif
+    
+    struct pinctrl  *pinctrl;
+    char        pinctrl_name[30];
+
+    int         storage_flag; // used for judging if there is a tsd/emmc
+    int         version; // bit[7-0]--minor version, bit[31-8]--major version
+};
+
+/*-sdio-*/
+
+#define SDIO_ARGU       (0x0)
+#define SDIO_SEND       (0x4)
+#define SDIO_CONF       (0x8)
+#define SDIO_IRQS       (0xc)
+#define SDIO_IRQC       (0x10)
+#define SDIO_MULT       (0x14)
+#define SDIO_ADDR       (0x18)
+#define SDIO_EXT        (0x1c)
+#define SDIO_CCTL       (0x40)
+#define SDIO_CDAT       (0x44)
+
+#define CLK_DIV         (0x1f4)
+
+struct cmd_send{
+    u32 cmd_command:8; /*[7:0] Command Index*/
+    u32 cmd_response_bits:8; /*[15:8]
+        * 00 means no response
+        * others: Response bit number(cmd bits+response bits+crc bits-1)*/
+    u32 response_do_not_have_crc7:1; /*[16]
+        * 0:Response need check CRC7, 1: dont need check*/
+    u32 response_have_data:1; /*[17]
+        * 0:Receiving Response without data, 1:Receiving response with data*/
+    u32 response_crc7_from_8:1; /*[18]
+        * 0:Normal CRC7, Calculating CRC7 will be from bit0 of all response bits,
+        * 1:Calculating CRC7 will be from bit8 of all response bits*/
+    u32 check_busy_on_dat0:1; /*[19]
+        * used for R1b response 0: dont check busy on dat0, 1:need check*/
+    u32 cmd_send_data:1; /*[20]
+        * 0:This command is not for transmitting data,
+        * 1:This command is for transmitting data*/
+    u32 use_int_window:1; /*[21]
+        * 0:SDIO DAT1 interrupt window disabled, 1:Enabled*/
+    u32 reserved:2;/*[23:22]*/
+    u32 repeat_package_times:8; /*[31:24] Total packages to be sent*/
+};
+
+struct sdio_config{
+    u32 cmd_clk_divide:10; /*[9:0] Clock rate setting,
+        * Frequency of SD equals to Fsystem/((cmd_clk_divide+1)*2)*/
+    u32 cmd_disable_crc:1; /*[10]
+        * 0:CRC employed, 1:dont send CRC during command being sent*/
+    u32 cmd_out_at_posedge:1; /*[11]
+        * Command out at negedge normally, 1:at posedge*/
+    u32 cmd_argument_bits:6; /*[17:12] before CRC added, normally 39*/
+    u32 do_not_delay_data:1; /*[18]
+        *0:Delay one clock normally, 1:dont delay*/
+    u32 data_latch_at_negedge:1; /*[19]
+        * 0:Data caught at posedge normally, 1:negedge*/
+    u32 bus_width:1; /*[20] 0:1bit, 1:4bit*/
+    u32 m_endian:2; /*[22:21]
+        * Change ENDIAN(bytes order) from DMA data (e.g. dma_din[31:0]).
+        * (00: ENDIAN no change, data output equals to original dma_din[31:0];
+        * 01: data output equals to {dma_din[23:16],dma_din[31:24],
+        * dma_din[7:0],dma_din[15:8]};10: data output equals to
+        * {dma_din[15:0],dma_din[31:16]};11: data output equals to
+        * {dma_din[7:0],dma_din[15:8],dma_din[23:16],dma_din[31:24]})*/
+    u32 sdio_write_nwr:6; /*[28:23]
+        * Number of clock cycles waiting before writing data*/
+    u32 sdio_write_crc_ok_status:3; /*[31:29] if CRC status
+        * equals this register, sdio write can be consider as correct*/
+};
+
+struct sdio_status_irq{
+    u32 sdio_status:4; /*[3:0] Read Only
+        * SDIO State Machine Current State, just for debug*/
+    u32 sdio_cmd_busy:1; /*[4] Read Only
+        * SDIO Command Busy, 1:Busy State*/
+    u32 sdio_response_crc7_ok:1; /*[5] Read Only
+        * SDIO Response CRC7 status, 1:OK*/
+    u32 sdio_data_read_crc16_ok:1; /*[6] Read Only
+        * SDIO Data Read CRC16 status, 1:OK*/
+    u32 sdio_data_write_crc16_ok:1; /*[7] Read Only
+        * SDIO Data Write CRC16 status, 1:OK*/
+    u32 sdio_if_int:1; /*[8] write 1 clear this int bit
+        * SDIO DAT1 Interrupt Status*/
+    u32 sdio_cmd_int:1; /*[9] write 1 clear this int bit
+        * Command Done Interrupt Status*/
+    u32 sdio_soft_int:1; /*[10] write 1 clear this int bit
+        * Soft Interrupt Status*/
+    u32 sdio_set_soft_int:1; /*[11] write 1 to this bit
+        * will set Soft Interrupt, read out is m_req_sdio, just for debug*/
+    u32 sdio_status_info:4; /*[15:12]
+        * used for change information between ARC and Amrisc */
+    u32 sdio_timing_out_int:1; /*[16] write 1 clear this int bit
+        * Timeout Counter Interrupt Status*/
+    u32 amrisc_timing_out_int_en:1; /*[17]
+        * Timeout Counter Interrupt Enable for AMRISC*/
+    u32 arc_timing_out_int_en:1; /*[18]
+        * Timeout Counter Interrupt Enable for ARC/ARM*/
+    u32 sdio_timing_out_count:13; /*[31:19]
+        * Timeout Counter Preload Setting and Present Status*/
+};
+
+struct sdio_irq_config{
+    u32 amrisc_if_int_en:1; /*[0]
+        * 1:SDIO DAT1 Interrupt Enable for AMRISC*/
+    u32 amrisc_cmd_int_en:1; /*[1]
+        * 1:Command Done Interrupt Enable for AMRISC*/
+    u32 amrisc_soft_int_en:1; /*[2]
+        * 1:Soft Interrupt Enable for AMRISC*/
+    u32 arc_if_int_en:1; /*[3]
+        * 1:SDIO DAT1 Interrupt Enable for ARM/ARC*/
+    u32 arc_cmd_int_en:1; /*[4]
+        * 1:Command Done Interrupt Enable for ARM/ARC*/
+    u32 arc_soft_int_en:1; /*[5]
+        * 1:Soft Interrupt Enable for ARM/ARC*/
+    u32 sdio_if_int_config:2; /*[7:6]
+        * 00:sdio_if_interrupt window will reset after data Tx/Rx or command
+        * done, others: only after command done*/
+    u32 sdio_force_data:6; /*[13:8]
+        * Write operation: Data forced by software
+        * Read operation: {CLK,CMD,DAT[3:0]}*/
+    u32 sdio_force_enable:1; /*[14] Software Force Enable
+        * This is the software force mode, Software can directly
+        * write to sdio 6 ports (cmd, clk, dat0..3) if force_output_en
+        * is enabled. and hardware outputs will be bypassed.*/
+    u32 soft_reset:1; /*[15]
+        * Write 1 Soft Reset, Don't need to clear it*/
+    u32 sdio_force_output_en:6; /*[21:16]
+        * Force Data Output Enable,{CLK,CMD,DAT[3:0]}*/
+    u32 disable_mem_halt:2; /*[23:22] write and read
+        * 23:Disable write memory halt, 22:Disable read memory halt*/
+    u32 sdio_force_data_read:6; /*[29:24] Read Only
+        * Data read out which have been forced by software*/
+    u32 force_halt:1; /*[30] 1:Force halt SDIO by software
+        * Halt in this sdio host controller means stop to transmit or
+        * receive data from sd card. and then sd card clock will be shutdown.
+        * Software can force to halt anytime, and hardware will automatically
+        * halt the sdio when reading fifo is full or writing fifo is empty*/
+    u32 halt_hole:1; /*[31]
+        * 0: SDIO halt for 8bit mode, 1:SDIO halt for 16bit mode*/
+};
+
+struct sdio_mult_config{
+    u32 sdio_port_sel:2; /*[1:0] 0:sdio_a, 1:sdio_b, 2:sdio_c*/
+    u32 ms_enable:1; /*[2] 1:Memory Stick Enable*/
+    u32 ms_sclk_always:1; /*[3] 1: Always send ms_sclk*/
+    u32 stream_enable:1; /*[4] 1:Stream Enable*/
+    u32 stream_8_bits_mode:1; /*[5] Stream 8bits mode*/
+    u32 data_catch_level:2; /*[7:6] Level of data catch*/
+    u32 write_read_out_index:1; /*[8] Write response index Enable
+        * [31:16], [11:10], [7:0] is set only when  bit8 of this register is not set.
+        * And other bits are set only when bit8 of this register is also set.*/
+    u32 data_catch_readout_en:1; /*[9] Data catch readout Enable*/
+    u32 sdio_0_data_on_1:1; /*[10] 1:dat0 is on dat1*/
+    u32 sdio_1_data_swap01:1; /*[11] 1:dat1 and dat0 swapped*/
+    u32 response_read_index:4; /*[15:12] Index of internal read response*/
+    u32 data_catch_finish_point:12; /*[27:16] If internal data
+        * catch counter equals this register, it indicates data catching is finished*/
+    u32 reserved:4; /*[31:28]*/
+};
+
+struct sdio_extension{
+    u32 cmd_argument_ext:16; /*[15:0] for future use*/
+    u32 data_rw_number:14; /*[29:16]
+        * Data Read/Write Number in one packet, include CRC16 if has CRC16*/
+    u32 data_rw_do_not_have_crc16:1; /*[30]
+        * 0:data Read/Write has crc16, 1:without crc16*/
+    u32 crc_status_4line:1; /*[31] 1:4Lines check CRC Status*/
+};
+
+struct sdio_reg{
+    u32 argument; /*2308*/
+    struct cmd_send send; /*2309*/
+    struct sdio_config config; /*230a*/
+    struct sdio_status_irq status; /*230b*/
+    struct sdio_irq_config irqc; /*230c*/
+    struct sdio_mult_config mult; /*230d*/
+    u32 m_addr; /*230e*/
+    struct sdio_extension ext;/*230f*/
+};
+
+/*-sdhc-*/
+
+#define SDHC_ARGU				(0x00)
+#define SDHC_SEND				(0x04)
+#define SDHC_CTRL				(0x08)
+#define SDHC_STAT				(0x0C)
+#define SDHC_CLKC				(0x10)
+#define SDHC_ADDR				(0x14)
+#define SDHC_PDMA				(0x18)
+#define SDHC_MISC				(0x1C)
+#define SDHC_DATA				(0x20)
+#define SDHC_ICTL				(0x24)
+#define SDHC_ISTA				(0x28)
+#define SDHC_SRST				(0x2C)
+#define SDHC_ESTA				(0x30)
+#define SDHC_ENHC				(0x34)
+#define SDHC_CLK2				(0x38)
+
+struct sdhc_send{
+	u32 cmd_index:6; /*[5:0] command index*/
+	u32 cmd_has_resp:1; /*[6] 0:no resp 1:has resp*/
+	u32 cmd_has_data:1; /*[7] 0:no data 1:has data*/
+	u32 resp_len:1; /*[8] 0:48bit 1:136bit*/
+	u32 resp_no_crc:1; /*[9] 0:check crc7 1:don't check crc7*/
+	u32 data_dir:1; /*[10] 0:data rx, 1:data tx*/
+	u32 data_stop:1; /*[11] 0:rx or tx, 1:data stop,ATTN:will give rx a softreset*/
+	u32 r1b:1; /*[12] 0: resp with no busy, 1:R1B*/
+	u32 reserved:3; /*[15:13] reserved*/
+	u32 total_pack:16; /*[31:16] total package number for writing or reading*/
+};
+
+struct sdhc_ctrl{
+	u32 dat_type:2; /*[1:0] 0:1bit, 1:4bits, 2:8bits, 3:reserved*/
+	u32 ddr_mode:1; /*[2] 0:SDR mode, 1:Don't set it*/
+	u32 tx_crc_nocheck:1; /*[3] 0:check sd write crc result, 1:disable tx crc check*/
+	u32 pack_len:9; /*[12:4] 0:512Bytes, 1:1, 2:2, ..., 511:511Bytes*/
+	u32 rx_timeout:7; /*[19:13] cmd or wcrc Receiving Timeout, default 64*/
+	u32 rx_period:4; /*[23:20]Period between response/cmd and next cmd, default 8*/
+	u32 rx_endian:3; /*[26:24] Rx Endian Control*/
+	u32 sdio_irq_mode:1; /*[27]0:Normal mode, 1: support data block gap
+			(need turn off clock gating)*/
+	u32 dat0_irq_sel:1; /*[28] Dat0 Interrupt selection,
+			0:busy check after response, 1:any rising edge of dat0*/
+	u32 tx_endian:3; /*[31:29] Tx Endian Control*/
+};
+
+struct sdhc_stat{
+	u32 cmd_busy:1; /*[0] 0:Ready for command, 1:busy*/
+	u32 dat3_0:4; /*[4:1] DAT[3:0]*/
+	u32 cmd:1; /*[5] CMD*/
+	u32 rxfifo_cnt:7; /*[12:6] RxFIFO count*/
+	u32 txfifo_cnt:7; /*[19:13] TxFIFO count*/
+	u32 dat7_4:4; /*[23:20] DAT[7:4]*/
+	u32 reserved:8; /*[31:24] Reserved*/
+};
+
+/*
+* to avoid glitch issue,
+* 1. clk_switch_on better be set after cfg_en be set to 1'b1
+* 2. clk_switch_off shall be set before cfg_en be set to 1'b0
+* 3. rx_clk/sd_clk phase diff please see SD_REGE_CLK2.
+*/
+struct sdhc_clkc{
+	u32 clk_div:12; /*[11:0] clk_div for TX_CLK 0: don't set it,
+			1:div2, 2:div3, 3:div4 ...*/
+	u32 tx_clk_on:1; /*[12] TX_CLK 0:switch off, 1:switch on*/
+	u32 rx_clk_on:1; /*[13] RX_CLK 0:switch off, 1:switch on*/
+	u32 sd_clk_on:1; /*[14] SD_CLK 0:switch off, 1:switch on*/
+	u32 mod_clk_on:1; /*[15] Clock Module Enable, Should
+			set before bit[14:12] switch on, and after bit[14:12] switch off*/
+	u32 clk_src_sel:2; /*[17:16] 0:osc, 1:fclk_div4, 2:fclk_div3, 3:fclk_div5*/
+	u32 reserved:6; /*[23:18] Reserved*/
+	u32 clk_jic:1; /*[24] Clock JIC for clock gating control
+			1: will turn off clock gating*/
+	u32 mem_pwr_off:2; /*[26:25] 00:Memory Power Up, 11:Memory Power Off*/
+	u32 reserved2:5; /*[31:27] Reserved*/
+};
+
+/*
+* Note1: dma_urgent is just set when bandwidth is very tight
+* Note2: pio_rdresp need to be combined with REG0_ARGU;
+* For R0, when 0, reading REG0 will get the normal 32bit response;
+* For R2, when 1, reading REG0 will get CID[31:0], when 2, get CID[63:32],
+* and so on; 6 or 7, will get original command argument.
+*/
+struct sdhc_pdma{
+	u32 dma_mode:1; /*[0] 0:PIO mode, 1:DMA mode*/
+	u32 pio_rdresp:3; /*[3:1] 0:[39:8] 1:1st 32bits, 2:2nd ...,
+			6 or 7:command argument*/
+	u32 dma_urgent:1; /*[4] 0:not urgent, 1:urgent*/
+	u32 wr_burst:5; /*[9:5] Number in one Write request burst(0:1,1:2...)*/
+	u32 rd_burst:5; /*[14:10] Number in one Read request burst(0:1, 1:2...)*/
+	u32 rxfifo_th:7; /*[21:15] RxFIFO threshold, >=rxth, will request write*/
+	u32 txfifo_th:7; /*[28:22] TxFIFO threshold, <=txth, will request read*/
+	u32 rxfifo_manual_flush:2; /*[30:29] [30]self-clear-flush,
+			[29] mode: 0:hw, 1:sw*/
+	u32 txfifo_fill:1; /*[31] self-clear-fill, recommand to write before sd send*/
+};
+
+struct sdhc_misc{
+	u32 reserved:4; /*[3:0] reserved*/
+	u32 wcrc_err_patt:3; /*[6:4] WCRC Error Pattern*/
+	u32 wcrc_ok_patt:3; /*[9:7] WCRC OK Pattern*/
+	u32 reserved1:6; /*[15:10] reserved*/
+	u32 burst_num:6; /*[21:16] Burst Number*/
+	u32 thread_id:6; /*[27:22] Thread ID*/
+	u32 manual_stop:1; /*[28] 0:auto stop mode, 1:manual stop mode*/
+	u32 reserved2:3; /*[31:29] reserved*/
+};
+
+struct sdhc_ictl{
+	u32 resp_ok:1; /*[0] Response is received OK*/
+	u32 resp_timeout:1; /*[1] Response Timeout Error*/
+	u32 resp_err_crc:1; /*[2] Response CRC Error*/
+	u32 resp_ok_noclear:1; /*[3] Response is received OK(always no self reset)*/
+	u32 data_1pack_ok:1; /*[4] One Package Data Completed ok*/
+	u32 data_timeout:1; /*[5] One Package Data Failed (Timeout Error)*/
+	u32 data_err_crc:1; /*[6] One Package Data Failed (CRC Error)*/
+	u32 data_xfer_ok:1; /*[7] Data Transfer Completed ok*/
+	u32 rx_higher:1; /*[8] RxFIFO count > threshold*/
+	u32 tx_lower:1; /*[9] TxFIFO count < threshold*/
+	u32 dat1_irq:1; /*[10] SDIO DAT1 Interrupt*/
+	u32 dma_done:1; /*[11] DMA Done*/
+	u32 rxfifo_full:1; /*[12] RxFIFO Full*/
+	u32 txfifo_empty:1; /*[13] TxFIFO Empty*/
+	u32 addi_dat1_irq:1; /*[14] Additional SDIO DAT1 Interrupt*/
+	u32 reserved:1; /*[15] reserved*/
+	u32 dat1_irq_delay:2; /*[17:16] sdio dat1 interrupt mask windows clear
+			delay control,0:2cycle 1:1cycles*/
+	u32 reserved1:14; /*[31:18] reserved*/
+};
+
+/*Note1: W1C is write one clear.*/
+struct sdhc_ista{
+	u32 resp_ok:1; /*[0] Response is received OK (W1C)*/
+	u32 resp_timeout:1; /*[1] Response is received Failed (Timeout Error) (W1C)*/
+	u32 resp_err_crc:1; /*[2] Response is received Failed (CRC Error) (W1C)*/
+	u32 resp_ok_noclear:1; /*[3] Response is Received OK (always no self reset)*/
+	u32 data_1pack_ok:1; /*[4] One Package Data Completed ok (W1C)*/
+	u32 data_timeout:1; /*[5] One Package Data Failed (Timeout Error) (W1C)*/
+	u32 data_err_crc:1; /*[6] One Package Data Failed (CRC Error) (W1C)*/
+	u32 data_xfer_ok:1; /*[7] Data Transfer Completed ok (W1C)*/
+	u32 rx_higher:1; /*[8] RxFIFO count > threshold (W1C)*/
+	u32 tx_lower:1; /*[9] TxFIFO count < threshold (W1C)*/
+	u32 dat1_irq:1; /*[10] SDIO DAT1 Interrupt (W1C)*/
+	u32 dma_done:1; /*[11] DMA Done (W1C)*/
+	u32 rxfifo_full:1; /*[12] RxFIFO Full(W1C)*/
+	u32 txfifo_empty:1; /*[13] TxFIFO Empty(W1C)*/
+	u32 addi_dat1_irq:1; /*[14] Additional SDIO DAT1 Interrupt*/
+	u32 reserved:17; /*[31:13] reserved*/
+};
+
+/*
+* Note1: Soft reset for DPHY TX/RX needs programmer to set it
+* and then clear it manually.*/
+struct sdhc_srst{
+	u32 main_ctrl:1; /*[0] Soft reset for MAIN CTRL(self clear)*/
+	u32 rxfifo:1; /*[1] Soft reset for RX FIFO(self clear)*/
+	u32 txfifo:1; /*[2] Soft reset for TX FIFO(self clear)*/
+	u32 dphy_rx:1; /*[3] Soft reset for DPHY RX*/
+	u32 dphy_tx:1; /*[4] Soft reset for DPHY TX*/
+	u32 dma_if:1; /*[5] Soft reset for DMA IF(self clear)*/
+	u32 reserved:26; /*[31:6] reserved*/
+};
+
+struct sdhc_enhc{
+	u32 rx_timeout:8; /*[7:0] Data Rx Timeout Setting*/
+	u32 sdio_irq_period:8; /*[15:8] SDIO IRQ Period Setting
+			(IRQ checking window length)*/
+	u32 dma_rd_resp:1; /*[16] No Read DMA Response Check*/
+	u32 dma_wr_resp:1; /*[16] No Write DMA Response Check*/
+	u32 rxfifo_th:7; /*[24:18] RXFIFO Full Threshold,default 60*/
+	u32 txfifo_th:7; /*[31:25] TXFIFO Empty Threshold,default 0*/
+};
+
+struct sdhc_clk2{
+	u32 rx_clk_phase:12; /*[11:0] rx_clk phase diff(default 0:no diff,
+			1:one input clock cycle ...)*/
+	u32 sd_clk_phase:12; /*[23:12] sd_clk phase diff(default 0:half(180 degree),
+			1:half+one input clock cycle, 2:half+2 input clock cycles, ...)*/
+	u32 reserved:8; /*[31:24] reserved*/
+};
+
+#define SDHC_CLOCK_SRC_OSC              0 // 24MHz
+#define SDHC_CLOCK_SRC_FCLK_DIV4        1
+#define SDHC_CLOCK_SRC_FCLK_DIV3        2
+#define SDHC_CLOCK_SRC_FCLK_DIV5        3
+#define SDHC_ISTA_W1C_ALL               0x7fff
+#define SDHC_SRST_ALL                   0x3f
+#define SDHC_ICTL_ALL	                    0x7fff
+
+#define STAT_POLL_TIMEOUT				0xfffff
+
+#define MMC_RSP_136_NUM					4
+#define MMC_MAX_DEVICE					3
+#define MMC_TIMEOUT						5000
+
+//#define printk(a...)
+#define DBG_LINE_INFO()  printk(KERN_WARNING "[%s] : %s\n",__func__,__FILE__);
+//#define DBG_LINE_INFO()
+// #define dev_err(a,s) printk(KERN_INFO s);
+
+
+#define AML_MMC_DISABLED_TIMEOUT	100
+#define AML_MMC_SLEEP_TIMEOUT		1000
+#define AML_MMC_OFF_TIMEOUT 8000
+
+#define SDHC_BOUNCE_REQ_SIZE		(512*1024)
+#define SDIO_BOUNCE_REQ_SIZE		(128*1024)
+#define MMC_TIMEOUT_MS		20
+
+#define MESON_SDIO_PORT_A 0
+#define MESON_SDIO_PORT_B 1
+#define MESON_SDIO_PORT_C 2
+#define MESON_SDIO_PORT_XC_A 3
+#define MESON_SDIO_PORT_XC_B 4
+#define MESON_SDIO_PORT_XC_C 5
+
+void aml_sdhc_request(struct mmc_host *mmc, struct mmc_request *mrq);
+int aml_sdhc_get_cd(struct mmc_host *mmc);
+extern void amlsd_init_debugfs(struct mmc_host *host);
+
+extern struct mmc_host *sdio_host;
+
+#define     SPI_BOOT_FLAG                   0
+#define     NAND_BOOT_FLAG                  1
+#define     EMMC_BOOT_FLAG                  2
+#define     CARD_BOOT_FLAG                  3
+#define     SPI_NAND_FLAG                   4
+#define     SPI_EMMC_FLAG                   5
+
+#define R_BOOT_DEVICE_FLAG  READ_CBUS_REG(ASSIST_POR_CONFIG)
+#ifdef CONFIG_ARCH_MESON8
+#define POR_BOOT_VALUE ((((R_BOOT_DEVICE_FLAG>>9)&1)<<2)|((R_BOOT_DEVICE_FLAG>>6)&3)) // {poc[9],poc[7:6]}
+#else
+#define POR_BOOT_VALUE (R_BOOT_DEVICE_FLAG & 7)
+#endif
+
+#define POR_NAND_BOOT() ((POR_BOOT_VALUE == 7) || (POR_BOOT_VALUE == 6))
+#define POR_SPI_BOOT() ((POR_BOOT_VALUE == 5) || (POR_BOOT_VALUE == 4))
+#define POR_EMMC_BOOT() (POR_BOOT_VALUE == 3)
+#define POR_CARD_BOOT() (POR_BOOT_VALUE == 0)
+
+#define print_tmp(fmt, args...) do{\
+		printk("[%s] " fmt, __FUNCTION__, ##args);	\
+}while(0)
+
+
+#define print_dbg(fmt, args...) do{\
+	printk("[%s]\033[0;40;35m " fmt "\033[0m", __FUNCTION__, ##args);  \
+}while(0)
+
+
+// P_AO_SECURE_REG1 is "Secure Register 1" in <M8-Secure-AHB-Registers.doc>
+#define aml_jtag_gpioao() do{\
+    aml_clr_reg32_mask(P_AO_SECURE_REG1, ((1<<5) | (1<<9))); \
+}while(0)
+
+#define aml_jtag_sd() do{\
+    aml_clr_reg32_mask(P_AO_SECURE_REG1, ((1<<8) | (1<<1))); \
+    aml_set_reg32_mask(P_AO_SECURE_REG1, ((1<<5) | (1<<9))); \
+}while(0)
+
+#define aml_uart_pinctrl() do {\
+    \
+}while(0)
+
+#endif
+
diff --git a/arch/arm/mach-meson8b/include/mach/smp.h b/arch/arm/mach-meson8b/include/mach/smp.h
new file mode 100644
index 000000000000..5ad49b78a6b2
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/smp.h
@@ -0,0 +1,19 @@
+/*
+ * mach/smp.h
+ *
+ */
+
+#ifndef __MACH_MESON8_SMP_H_
+#define __MACH_MESON8_SMP_H_
+
+#include <linux/smp.h>
+#include <asm/smp.h>
+
+extern struct smp_operations meson_smp_ops;
+
+typedef int (*exl_call_func_t)(void *p_arg);
+extern int try_exclu_cpu_exe(exl_call_func_t func, void * p_arg);
+extern int pm_notifier_call_chain(unsigned long val);
+
+
+#endif /* __MACH_MESON8_SMP_H_ */
diff --git a/arch/arm/mach-meson8b/include/mach/spi_nor.h b/arch/arm/mach-meson8b/include/mach/spi_nor.h
new file mode 100644
index 000000000000..bc3227201651
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/spi_nor.h
@@ -0,0 +1,104 @@
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/interrupt.h>
+#include <linux/mutex.h>
+#include "am_regs.h"
+
+/*
+#define WRITE_PERI_REG              WRITE_CBUS_REG
+#define READ_PERI_REG               READ_CBUS_REG
+#define SET_PERI_REG_MASK           SET_CBUS_REG_MASK
+#define CLEAR_PERI_REG_MASK         CLEAR_CBUS_REG_MASK
+#define PREG_SPI_FLASH_CMD          SPI_FLASH_CMD
+#define PREG_SPI_FLASH_ADDR         SPI_FLASH_ADDR
+#define PREG_SPI_FLASH_CTRL         SPI_FLASH_CTRL
+#define PREG_SPI_FLASH_CTRL1        SPI_FLASH_CTRL1
+#define PREG_SPI_FLASH_STATUS       SPI_FLASH_STATUS
+#define PREG_SPI_FLASH_C0           SPI_FLASH_C0
+*/
+
+/*------------------ register bit definition-------------------------------------------*/
+/* SPI_FLASH_CMD */
+#define SPI_FLASH_READ    31
+#define SPI_FLASH_WREN    30
+#define SPI_FLASH_WRDI    29
+#define SPI_FLASH_RDID    28
+#define SPI_FLASH_RDSR    27
+#define SPI_FLASH_WRSR    26
+#define SPI_FLASH_PP      25
+#define SPI_FLASH_SE      24
+#define SPI_FLASH_BE      23
+#define SPI_FLASH_CE      22
+#define SPI_FLASH_DP      21
+#define SPI_FLASH_RES     20
+#define SPI_HPM           19
+#define SPI_FLASH_USR     18
+#define SPI_FLASH_USR_ADDR 15
+#define SPI_FLASH_USR_DUMMY 14
+#define SPI_FLASH_USR_DIN   13
+#define SPI_FLASH_USR_DOUT   12
+#define SPI_FLASH_USR_DUMMY_BLEN   10
+#define SPI_FLASH_USR_CMD     0
+
+/* SPI_FLASH_ADDR */                            
+#define SPI_FLASH_BYTES_LEN 24
+#define SPI_FLASH_ADDR_START 0
+
+/* SPI_FLASH_CTRL */
+#define SPI_ENABLE_AHB    17
+#define SPI_SST_AAI       16
+#define SPI_RES_RID       15
+#define SPI_FREAD_DUAL    14
+#define SPI_READ_READ_EN  13
+#define SPI_CLK_DIV0      12
+#define SPI_CLKCNT_N      8
+#define SPI_CLKCNT_H      4
+#define SPI_CLKCNT_L      0
+/*------------------ end of register bit definition-------------------------------------------*/
+
+#define AMLOGIC_SPI_MAX_FREQ        25000000
+#define SPI_DEV_NAME                "spi_nor"
+
+#define FLASH_PAGESIZE      256
+
+/* Flash opcodes. */
+#define OPCODE_WREN     0x06    /* Write enable */
+#define OPCODE_RDSR     0x05    /* Read status register */
+#define OPCODE_WRSR     0x01    /* Write status register */
+#define OPCODE_NORM_READ    0x03    /* Read data bytes (low frequency) */
+#define OPCODE_FAST_READ    0x0b    /* Read data bytes (high frequency) */
+#define OPCODE_PP       0x02    /* Page program (up to 256 bytes) */
+#define OPCODE_SE_4K        0x20    /* Erase 4KiB block */
+#define OPCODE_SE_32K       0x52    /* Erase 32KiB block */
+#define OPCODE_BE       0xd8    /* Sector erase (usually 64KiB) */
+#define OPCODE_RDID     0x9f    /* Read JEDEC ID */
+
+/* Status Register bits. */
+#define SR_WIP          1   /* Write in progress */
+#define SR_WEL          2   /* Write enable latch */
+/* meaning of other SR_* bits may differ between vendors */
+#define SR_BP0          4   /* Block protect 0 */
+#define SR_BP1          8   /* Block protect 1 */
+#define SR_BP2          0x10    /* Block protect 2 */
+#define SR_SRWD         0x80    /* SR write protect */
+
+/* Define max times to check status register before we give up. */
+#define MAX_READY_WAIT_COUNT    100000
+#define CMD_SIZE        4
+
+#ifdef CONFIG_SPI_USE_FAST_READ
+#define OPCODE_READ     OPCODE_FAST_READ
+#define FAST_READ_DUMMY_BYTE 1
+#else
+#define OPCODE_READ     OPCODE_NORM_READ
+#define FAST_READ_DUMMY_BYTE 0
+#endif
+
+#ifdef CONFIG_MTD
+#define mtd_has_partitions()    (1)
+#else
+#define mtd_has_partitions()    (0)
+#endif
+
diff --git a/arch/arm/mach-meson8b/include/mach/system.h b/arch/arm/mach-meson8b/include/mach/system.h
new file mode 100644
index 000000000000..5fbd08418eff
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/system.h
@@ -0,0 +1,47 @@
+/*
+ *  arch/arm/mach-meson/include/mach/system.h
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#ifndef __ASM_ARCH_SYSTEM_H
+#define __ASM_ARCH_SYSTEM_H
+
+#include <linux/io.h>
+#include <plat/io.h>
+#include <mach/hardware.h>
+#include <mach/register.h>
+
+static inline void arch_idle(void)
+{
+    /*
+     * This should do all the clock switching
+     * and wait for interrupt tricks
+     */
+    cpu_do_idle();
+}
+#define WATCHDOG_ENABLE_BIT  (1<<22)
+#define  DUAL_CORE_RESET		  (3<<24)
+static inline void arch_reset(char mode, const char *cmd)
+{
+    WRITE_MPEG_REG(VENC_VDAC_SETTING, 0xf);
+    WRITE_MPEG_REG(WATCHDOG_RESET, 0);
+    WRITE_MPEG_REG(WATCHDOG_TC, DUAL_CORE_RESET| WATCHDOG_ENABLE_BIT | 100);
+    while(1)
+        arch_idle();
+}
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/timex.h b/arch/arm/mach-meson8b/include/mach/timex.h
new file mode 100644
index 000000000000..8472bc31fbb9
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/timex.h
@@ -0,0 +1,27 @@
+/*
+ *  arch/arm/mach-meson/include/mach/timex.h
+ *
+ *  Amlogic architecture timex specifications
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+#ifndef CONFIG_MESON_CLOCK_TICK_RATE
+#define CLOCK_TICK_RATE     24000000
+#else
+#define CLOCK_TICK_RATE     (CONFIG_MESON_CLOCK_TICK_RATE)
+#endif
+extern struct sys_timer meson_sys_timer;
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/include/mach/tvregs.h b/arch/arm/mach-meson8b/include/mach/tvregs.h
new file mode 100644
index 000000000000..207676f9c0a4
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/tvregs.h
@@ -0,0 +1,1476 @@
+/*
+ * Amlogic Apollo
+ * frame buffer driver
+ *
+ * Copyright (C) 2009 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the named License,
+ * or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
+ *
+ * Author:  Tim Yao <timyao@amlogic.com>
+ *
+ */
+
+#ifndef TVREGS_H
+#define TVREGS_H
+
+#include "am_regs.h"
+#define MREG_END_MARKER 0xffff
+
+
+	#define VIDEO_CLOCK_HD_25	0x00101529
+	#define VIDEO_CLOCK_SD_25	0x00500a6c
+	#define VIDEO_CLOCK_HD_24	0x00140863
+	#define VIDEO_CLOCK_SD_24	0x0050042d
+
+
+typedef struct reg_s {
+    uint reg;
+    uint val;
+} reg_t;
+
+typedef struct tvinfo_s {
+    uint xres;
+    uint yres;
+    const char *id;
+} tvinfo_t;
+/*
+24M
+25M
+*/
+static const  reg_t tvreg_vclk_sd[]={
+	{P_HHI_VID_PLL_CNTL,VIDEO_CLOCK_SD_24},//SD.24
+    {P_HHI_VID_PLL_CNTL,VIDEO_CLOCK_SD_25},//SD,25
+};
+
+static const  reg_t tvreg_vclk_hd[]={
+    {P_HHI_VID_PLL_CNTL,VIDEO_CLOCK_HD_24},//HD,24
+    {P_HHI_VID_PLL_CNTL,VIDEO_CLOCK_HD_25},//HD,25
+};
+
+static const  reg_t tvregs_720p[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_HHI_HDMI_AFC_CNTL,          0x8c0000c3},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {P_VENC_DVI_SETTING,           0x2029,},
+    {P_ENCP_VIDEO_MODE,            0x4040,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {P_ENCP_VIDEO_YFP1_HTIME,      648,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      3207,  },
+    {P_ENCP_VIDEO_MAX_PXCNT,       3299,  },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    80,    },
+    {P_ENCP_VIDEO_HSPULS_END,      240,   },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    688,   },
+    {P_ENCP_VIDEO_VSPULS_END,      3248,  },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    4,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    8,     },
+    {P_ENCP_VIDEO_EQPULS_BLINE,    4,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    8,     },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     648,   },
+    {P_ENCP_VIDEO_HAVON_END,       3207,  },
+    {P_ENCP_VIDEO_VAVON_BLINE,     29,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     748,   },
+    {P_ENCP_VIDEO_HSO_BEGIN,       256    },
+    {P_ENCP_VIDEO_HSO_END,         168,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       168,   },
+    {P_ENCP_VIDEO_VSO_END,         256,   },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+    {P_ENCP_VIDEO_MAX_LNCNT,       749,   },
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_UPSAMPLE_CTRL0,        0x9061,},
+    {P_VENC_UPSAMPLE_CTRL1,        0xa061,},
+    {P_VENC_UPSAMPLE_CTRL2,        0xb061,},
+    {P_VENC_VDAC_DACSEL0,          0x0001,},
+    {P_VENC_VDAC_DACSEL1,          0x0001,},
+    {P_VENC_VDAC_DACSEL2,          0x0001,},
+    {P_VENC_VDAC_DACSEL3,          0x0001,},
+    {P_VENC_VDAC_DACSEL4,          0x0001,},
+    {P_VENC_VDAC_DACSEL5,          0x0001,},
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const  reg_t tvregs_720p_50hz[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_ENCP_VIDEO_FILT_CTRL,       0x0052,},
+
+    {P_VENC_DVI_SETTING,           0x202d,},
+    {P_ENCP_VIDEO_MAX_PXCNT,       3959,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       749,   },
+
+     //analog vidoe position in horizontal
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    80,    },
+    {P_ENCP_VIDEO_HSPULS_END,      240,   },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+
+    //DE position in horizontal
+    {P_ENCP_VIDEO_HAVON_BEGIN,     648,   },
+    {P_ENCP_VIDEO_HAVON_END,       3207,  },
+
+    //ditital hsync positon in horizontal
+    {P_ENCP_VIDEO_HSO_BEGIN,       128 ,},
+    {P_ENCP_VIDEO_HSO_END,         208 , },
+
+    /* vsync horizontal timing */
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    688,   },
+    {P_ENCP_VIDEO_VSPULS_END,      3248,  },
+
+    /* vertical timing settings */
+    {P_ENCP_VIDEO_VSPULS_BLINE,    4,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    8,     },
+    {P_ENCP_VIDEO_EQPULS_BLINE,    4,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    8,     },
+
+    //DE position in vertical
+    {P_ENCP_VIDEO_VAVON_BLINE,     29,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     748,   },
+
+    //adjust the vsync start point and end point
+    {P_ENCP_VIDEO_VSO_BEGIN,       128,},  //168,   },
+    {P_ENCP_VIDEO_VSO_END,         128, },  //256,   },
+
+    //adjust the vsync start line and end line
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    /* filter & misc settings */
+    {P_ENCP_VIDEO_YFP1_HTIME,      648,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      3207,  },
+
+
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_ENCP_VIDEO_MODE,            0x4040,},  //Enable Hsync and equalization pulse switch in center
+    {P_ENCP_VIDEO_MODE_ADV,        0x0019,},//bit6:swap PbPr; bit4:YPBPR gain as HDTV type;
+                                                 //bit3:Data input from VFIFO;bit[2}0]:repreat pixel a time
+
+     {P_ENCP_VIDEO_SYNC_MODE,       0x407,  },//Video input Synchronization mode ( bit[7:0] -- 4:Slave mode, 7:Master mode)
+                                                 //bit[15:6] -- adjust the vsync vertical position
+    {P_ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_VENC_VDAC_DACSEL0,          0x0001,},
+    {P_VENC_VDAC_DACSEL1,          0x0001,},
+    {P_VENC_VDAC_DACSEL2,          0x0001,},
+    {P_VENC_VDAC_DACSEL3,          0x0001,},
+    {P_VENC_VDAC_DACSEL4,          0x0001,},
+    {P_VENC_VDAC_DACSEL5,          0x0001,},
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_480i[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,            0xff,  },
+
+    {P_HHI_VID_CLK_CNTL,           0x0,       },
+    {P_HHI_VID_PLL_CNTL,           0x2001042d,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {P_HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_ENCI_CFILT_CTRL,              0x12,},
+    {P_ENCI_CFILT_CTRL2,              0x12,},
+    {P_VENC_DVI_SETTING,             0,     },
+    {P_ENCI_VIDEO_MODE,              0,     },
+    {P_ENCI_VIDEO_MODE_ADV,          0,     },
+    {P_ENCI_SYNC_HSO_BEGIN,          5,     },
+    {P_ENCI_SYNC_HSO_END,            129,   },
+    {P_ENCI_SYNC_VSO_EVNLN,          0x0003 },
+    {P_ENCI_SYNC_VSO_ODDLN,          0x0104 },
+    {P_ENCI_MACV_MAX_AMP,            0x810b },
+    {P_VENC_VIDEO_PROG_MODE,         0xf0   },
+    {P_ENCI_VIDEO_MODE,              0x08   },
+    {P_ENCI_VIDEO_MODE_ADV,          0x26,  },
+    {P_ENCI_VIDEO_SCH,               0x20,  },
+    {P_ENCI_SYNC_MODE,               0x07,  },
+    {P_ENCI_YC_DELAY,                0x333, },
+    {P_ENCI_VFIFO2VD_PIXEL_START,    0xf3,  },
+    {P_ENCI_VFIFO2VD_PIXEL_END,      0x0693,},
+    {P_ENCI_VFIFO2VD_LINE_TOP_START, 0x12,  },
+    {P_ENCI_VFIFO2VD_LINE_TOP_END,   0x102, },
+    {P_ENCI_VFIFO2VD_LINE_BOT_START, 0x13,  },
+    {P_ENCI_VFIFO2VD_LINE_BOT_END,   0x103, },
+    {P_VENC_SYNC_ROUTE,              0,     },
+    {P_ENCI_DBG_PX_RST,              0,     },
+    {P_VENC_INTCTRL,                 0x2,   },
+    {P_ENCI_VFIFO2VD_CTL,            0x4e01,},
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_UPSAMPLE_CTRL0,          0x0061,},
+    {P_VENC_UPSAMPLE_CTRL1,          0x4061,},
+    {P_VENC_UPSAMPLE_CTRL2,          0x5061,},
+    {P_VENC_VDAC_DACSEL0,            0x0000,},
+    {P_VENC_VDAC_DACSEL1,            0x0000,},
+    {P_VENC_VDAC_DACSEL2,            0x0000,},
+    {P_VENC_VDAC_DACSEL3,            0x0000,},
+    {P_VENC_VDAC_DACSEL4,            0x0000,},
+    {P_VENC_VDAC_DACSEL5,            0x0000,},
+    {P_VPU_VIU_VENC_MUX_CTRL,        0x0005,},
+    {P_VENC_VDAC_FIFO_CTRL,          0x2000,},
+    {P_ENCI_DACSEL_0,                0x0011 },
+    {P_ENCI_DACSEL_1,                0x87   },
+    {P_ENCP_VIDEO_EN,                0,     },
+    {P_ENCI_VIDEO_EN,                1,     },
+    {MREG_END_MARKER,              0      }
+};
+
+static const reg_t tvregs_480cvbs[] = {
+     {P_VENC_VDAC_SETTING,            0xff,  },
+
+    {P_HHI_VID_CLK_CNTL,           0x0,       },
+    {P_HHI_VID_PLL_CNTL,           0x2001042d,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {P_HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_ENCI_CFILT_CTRL,              0x12,},
+    {P_ENCI_CFILT_CTRL2,              0x12,},
+    {P_VENC_DVI_SETTING,             0,     },
+    {P_ENCI_VIDEO_MODE,              0,     },
+    {P_ENCI_VIDEO_MODE_ADV,          0,     },
+    {P_ENCI_SYNC_HSO_BEGIN,          5,     },
+    {P_ENCI_SYNC_HSO_END,            129,   },
+    {P_ENCI_SYNC_VSO_EVNLN,          0x0003 },
+    {P_ENCI_SYNC_VSO_ODDLN,          0x0104 },
+    {P_ENCI_MACV_MAX_AMP,            0x810b },
+    {P_VENC_VIDEO_PROG_MODE,         0xf0   },
+    {P_ENCI_VIDEO_MODE,              0x08   },
+    {P_ENCI_VIDEO_MODE_ADV,          0x26,  },
+    {P_ENCI_VIDEO_SCH,               0x20,  },
+    {P_ENCI_SYNC_MODE,               0x07,  },
+    {P_ENCI_YC_DELAY,                0x333, },
+    {P_ENCI_VFIFO2VD_PIXEL_START,    0xe3,  },
+    {P_ENCI_VFIFO2VD_PIXEL_END,      0x0683,},
+    {P_ENCI_VFIFO2VD_LINE_TOP_START, 0x12,  },
+    {P_ENCI_VFIFO2VD_LINE_TOP_END,   0x102, },
+    {P_ENCI_VFIFO2VD_LINE_BOT_START, 0x13,  },
+    {P_ENCI_VFIFO2VD_LINE_BOT_END,   0x103, },
+    {P_VENC_SYNC_ROUTE,              0,     },
+    {P_ENCI_DBG_PX_RST,              0,     },
+    {P_VENC_INTCTRL,                 0x2,   },
+    {P_ENCI_VFIFO2VD_CTL,            0x4e01,},
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_UPSAMPLE_CTRL0,          0x0061,},
+    {P_VENC_UPSAMPLE_CTRL1,          0x4061,},
+    {P_VENC_UPSAMPLE_CTRL2,          0x5061,},
+    {P_VENC_VDAC_DACSEL0,            0x0000,},
+    {P_VENC_VDAC_DACSEL1,            0x0000,},
+    {P_VENC_VDAC_DACSEL2,            0x0000,},
+    {P_VENC_VDAC_DACSEL3,            0x0000,},
+    {P_VENC_VDAC_DACSEL4,            0x0000,},
+    {P_VENC_VDAC_DACSEL5,            0x0000,},
+    {P_VPU_VIU_VENC_MUX_CTRL,        0x0005,},
+    {P_VENC_VDAC_FIFO_CTRL,          0x2000,},
+    {P_ENCI_DACSEL_0,                0x0011 },
+    {P_ENCI_DACSEL_1,                0x11   },
+    {P_ENCP_VIDEO_EN,                0,     },
+    {P_ENCI_VIDEO_EN,                1,     },
+    {P_HHI_VDAC_CNTL0,               0x650001   },
+    {P_HHI_VDAC_CNTL1,               0x1        },
+    {P_ENCI_VIDEO_SAT,               0x7        },
+    {P_VENC_VDAC_DAC0_FILT_CTRL0,    0x1        },
+    {P_VENC_VDAC_DAC0_FILT_CTRL1,    0xfc48     },
+    {P_ENCI_MACV_N0,                 0x0        },
+    {MREG_END_MARKER,              0      }
+};
+
+static const reg_t tvregs_480p[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,       },
+    {P_HHI_VID_PLL_CNTL,           0x2001042d,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {P_HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    //{P_HHI_VID_CLK_DIV,            0x01000100,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x2052,},
+    {P_VENC_DVI_SETTING,           0x21,  },
+    {P_ENCP_VIDEO_MODE,            0x4000,},
+    {P_ENCP_VIDEO_MODE_ADV,        9,     },
+    {P_ENCP_VIDEO_YFP1_HTIME,      244,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      1630,  },
+    {P_ENCP_VIDEO_YC_DLY,          0,     },
+    {P_ENCP_VIDEO_MAX_PXCNT,       1715,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       524,   },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    0x22,  },
+    {P_ENCP_VIDEO_HSPULS_END,      0xa0,  },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    0,     },
+    {P_ENCP_VIDEO_VSPULS_END,      1589   },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     249,   },
+    {P_ENCP_VIDEO_HAVON_END,       1689,  },
+    {P_ENCP_VIDEO_VAVON_BLINE,     42,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     521,   },
+    {P_ENCP_VIDEO_SYNC_MODE,       0x07,  },
+    {P_VENC_VIDEO_PROG_MODE,       0x0,   },
+    {P_VENC_VIDEO_EXSRC,           0x0,   },
+    {P_ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {P_ENCP_VIDEO_HSO_END,         0x5,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {P_ENCP_VIDEO_VSO_END,         0x5,   },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },  //added by JZD. Switch Panel to 480p first time, movie video flicks if not set this to 0
+    {P_ENCP_VIDEO_SY_VAL,          8,     },
+    {P_ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_UPSAMPLE_CTRL0,        0x9061,},
+    {P_VENC_UPSAMPLE_CTRL1,        0xa061,},
+    {P_VENC_UPSAMPLE_CTRL2,        0xb061,},
+    {P_VENC_VDAC_DACSEL0,          0xf003,},
+    {P_VENC_VDAC_DACSEL1,          0xf003,},
+    {P_VENC_VDAC_DACSEL2,          0xf003,},
+    {P_VENC_VDAC_DACSEL3,          0xf003,},
+    {P_VENC_VDAC_DACSEL4,          0xf003,},
+    {P_VENC_VDAC_DACSEL5,          0xf003,},
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_ENCI_VIDEO_EN,              0      },
+    {P_ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_576i[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,               0xff,      },
+
+    {P_HHI_VID_CLK_CNTL,           0x0,       },
+    {P_HHI_VID_PLL_CNTL,           0x2001042d,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {P_HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_ENCI_CFILT_CTRL,                 0x12,    },
+    {P_ENCI_CFILT_CTRL2,                 0x12,    },
+    {P_VENC_DVI_SETTING,                0,         },
+    {P_ENCI_VIDEO_MODE,                 0,         },
+    {P_ENCI_VIDEO_MODE_ADV,             0,         },
+    {P_ENCI_SYNC_HSO_BEGIN,             3,         },
+    {P_ENCI_SYNC_HSO_END,               129,       },
+    {P_ENCI_SYNC_VSO_EVNLN,             0x0003     },
+    {P_ENCI_SYNC_VSO_ODDLN,             0x0104     },
+    {P_ENCI_MACV_MAX_AMP,               0x8107     },
+    {P_VENC_VIDEO_PROG_MODE,            0xff       },
+    {P_ENCI_VIDEO_MODE,                 0x13       },
+    {P_ENCI_VIDEO_MODE_ADV,             0x26,      },
+    {P_ENCI_VIDEO_SCH,                  0x28,      },
+    {P_ENCI_SYNC_MODE,                  0x07,      },
+    {P_ENCI_YC_DELAY,                   0x333,     },
+    {P_ENCI_VFIFO2VD_PIXEL_START,       0x010b     },
+    {P_ENCI_VFIFO2VD_PIXEL_END,         0x06ab     },
+    {P_ENCI_VFIFO2VD_LINE_TOP_START,    0x0016     },
+    {P_ENCI_VFIFO2VD_LINE_TOP_END,      0x0136     },
+    {P_ENCI_VFIFO2VD_LINE_BOT_START,    0x0017     },
+    {P_ENCI_VFIFO2VD_LINE_BOT_END,      0x0137     },
+    {P_VENC_SYNC_ROUTE,                 0,         },
+    {P_ENCI_DBG_PX_RST,                 0,         },
+    {P_VENC_INTCTRL,                    0x2,       },
+    {P_ENCI_VFIFO2VD_CTL,               0x4e01,    },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_UPSAMPLE_CTRL0,             0x0061,    },
+    {P_VENC_UPSAMPLE_CTRL1,             0x4061,    },
+    {P_VENC_UPSAMPLE_CTRL2,             0x5061,    },
+    {P_VENC_VDAC_DACSEL0,               0x0000,    },
+    {P_VENC_VDAC_DACSEL1,               0x0000,    },
+    {P_VENC_VDAC_DACSEL2,               0x0000,    },
+    {P_VENC_VDAC_DACSEL3,               0x0000,    },
+    {P_VENC_VDAC_DACSEL4,               0x0000,    },
+    {P_VENC_VDAC_DACSEL5,               0x0000,    },
+    {P_VPU_VIU_VENC_MUX_CTRL,           0x0005,    },
+    {P_VENC_VDAC_FIFO_CTRL,             0x2000,    },
+    {P_ENCI_DACSEL_0,                   0x0011     },
+    {P_ENCI_DACSEL_1,                   0x87       },
+    {P_ENCP_VIDEO_EN,                   0,         },
+    {P_ENCI_VIDEO_EN,                   1,         },
+    {MREG_END_MARKER,                 0          }
+};
+
+static const reg_t tvregs_576cvbs[] = {
+    {P_VENC_VDAC_SETTING,               0xff,      },
+
+    {P_HHI_VID_CLK_CNTL,           0x0,       },
+    {P_HHI_VID_PLL_CNTL,           0x2001042d,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {P_HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_ENCI_CFILT_CTRL,                 0x12,    },
+    {P_ENCI_CFILT_CTRL2,                 0x12,    },
+    {P_VENC_DVI_SETTING,                0,         },
+    {P_ENCI_VIDEO_MODE,                 0,         },
+    {P_ENCI_VIDEO_MODE_ADV,             0,         },
+    {P_ENCI_SYNC_HSO_BEGIN,             3,         },
+    {P_ENCI_SYNC_HSO_END,               129,       },
+    {P_ENCI_SYNC_VSO_EVNLN,             0x0003     },
+    {P_ENCI_SYNC_VSO_ODDLN,             0x0104     },
+    {P_ENCI_MACV_MAX_AMP,               0x8107     },
+    {P_VENC_VIDEO_PROG_MODE,            0xff       },
+    {P_ENCI_VIDEO_MODE,                 0x13       },
+    {P_ENCI_VIDEO_MODE_ADV,             0x26,      },
+    {P_ENCI_VIDEO_SCH,                  0x28,      },
+    {P_ENCI_SYNC_MODE,                  0x07,      },
+    {P_ENCI_YC_DELAY,                   0x333,     },
+    {P_ENCI_VFIFO2VD_PIXEL_START,       0x0fb	   },
+    {P_ENCI_VFIFO2VD_PIXEL_END,         0x069b     },
+    {P_ENCI_VFIFO2VD_LINE_TOP_START,    0x0016     },
+    {P_ENCI_VFIFO2VD_LINE_TOP_END,      0x0136     },
+    {P_ENCI_VFIFO2VD_LINE_BOT_START,    0x0017     },
+    {P_ENCI_VFIFO2VD_LINE_BOT_END,      0x0137     },
+    {P_VENC_SYNC_ROUTE,                 0,         },
+    {P_ENCI_DBG_PX_RST,                 0,         },
+    {P_VENC_INTCTRL,                    0x2,       },
+    {P_ENCI_VFIFO2VD_CTL,               0x4e01,    },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_UPSAMPLE_CTRL0,             0x0061,    },
+    {P_VENC_UPSAMPLE_CTRL1,             0x4061,    },
+    {P_VENC_UPSAMPLE_CTRL2,             0x5061,    },
+    {P_VENC_VDAC_DACSEL0,               0x0000,    },
+    {P_VENC_VDAC_DACSEL1,               0x0000,    },
+    {P_VENC_VDAC_DACSEL2,               0x0000,    },
+    {P_VENC_VDAC_DACSEL3,               0x0000,    },
+    {P_VENC_VDAC_DACSEL4,               0x0000,    },
+    {P_VENC_VDAC_DACSEL5,               0x0000,    },
+    {P_VPU_VIU_VENC_MUX_CTRL,           0x0005,    },
+    {P_VENC_VDAC_FIFO_CTRL,             0x2000,    },
+    {P_ENCI_DACSEL_0,                   0x0011     },
+    {P_ENCI_DACSEL_1,                   0x11       },
+    {P_ENCP_VIDEO_EN,                   0,         },
+    {P_ENCI_VIDEO_EN,                   1,         },
+    {P_HHI_VDAC_CNTL0,                  0x650001   },
+    {P_HHI_VDAC_CNTL1,                  0x1        },
+    {P_ENCI_VIDEO_SAT,                  0x7        },
+    {P_VENC_VDAC_DAC0_FILT_CTRL0,       0x1        },
+    {P_VENC_VDAC_DAC0_FILT_CTRL1,       0xfc48     },
+    {P_ENCI_MACV_N0,                    0x0        },
+    {MREG_END_MARKER,                 0          }
+};
+
+static const reg_t tvregs_576p[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,      },
+    {P_HHI_VID_CLK_CNTL,           0x0,       },
+    {P_HHI_VID_PLL_CNTL,           0x2001042d,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {P_HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_HHI_HDMI_AFC_CNTL,          0x8c0000c3,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x52,      },
+    {P_VENC_DVI_SETTING,           0x21,      },
+    {P_ENCP_VIDEO_MODE,            0x4000,    },
+    {P_ENCP_VIDEO_MODE_ADV,        9,         },
+    {P_ENCP_VIDEO_YFP1_HTIME,      235,       },
+    {P_ENCP_VIDEO_YFP2_HTIME,      1674,      },
+    {P_ENCP_VIDEO_YC_DLY,          0xf,       },
+    {P_ENCP_VIDEO_MAX_PXCNT,       1727,      },
+    {P_ENCP_VIDEO_MAX_LNCNT,       624,       },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    0,         },
+    {P_ENCP_VIDEO_HSPULS_END,      0x80,      },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   88,        },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    0,         },
+    {P_ENCP_VIDEO_VSPULS_END,      1599       },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,         },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    4,         },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     235,       },
+    {P_ENCP_VIDEO_HAVON_END,       1674,      },
+    {P_ENCP_VIDEO_VAVON_BLINE,     44,        },
+    {P_ENCP_VIDEO_VAVON_ELINE,     619,       },
+    {P_ENCP_VIDEO_SYNC_MODE,       0x07,      },
+    {P_VENC_VIDEO_PROG_MODE,       0x0,       },
+    {P_VENC_VIDEO_EXSRC,           0x0,       },
+    {P_ENCP_VIDEO_HSO_BEGIN,       0x80,      },
+    {P_ENCP_VIDEO_HSO_END,         0x0,       },
+    {P_ENCP_VIDEO_VSO_BEGIN,       0x0,       },
+    {P_ENCP_VIDEO_VSO_END,         0x5,       },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,         },
+    {P_ENCP_VIDEO_SY_VAL,          8,         },
+    {P_ENCP_VIDEO_SY2_VAL,         0x1d8,     },
+    {P_VENC_SYNC_ROUTE,            0,         },
+    {P_VENC_INTCTRL,               0x200,     },
+    {P_ENCP_VFIFO2VD_CTL,               0,         },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_UPSAMPLE_CTRL0,        0x9061,    },
+    {P_VENC_UPSAMPLE_CTRL1,        0xa061,    },
+    {P_VENC_UPSAMPLE_CTRL2,        0xb061,    },
+    {P_VENC_VDAC_DACSEL0,          0xf003,    },
+    {P_VENC_VDAC_DACSEL1,          0xf003,    },
+    {P_VENC_VDAC_DACSEL2,          0xf003,    },
+    {P_VENC_VDAC_DACSEL3,          0xf003,    },
+    {P_VENC_VDAC_DACSEL4,          0xf003,    },
+    {P_VENC_VDAC_DACSEL5,          0xf003,    },
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,    },
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,    },
+    {P_ENCP_DACSEL_0,              0x3102,    },
+    {P_ENCP_DACSEL_1,              0x0054,    },
+    {P_ENCI_VIDEO_EN,              0          },
+    {P_ENCP_VIDEO_EN,              1          },
+    {MREG_END_MARKER,            0          }
+};
+
+static const reg_t tvregs_1080i[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+//	{VCLK_HD},
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {P_ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {P_VENC_DVI_SETTING,           0x2029,},
+    {P_ENCP_VIDEO_MAX_PXCNT,       4399,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    88,    },
+    {P_ENCP_VIDEO_HSPULS_END,      264,   },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     516,   },
+    {P_ENCP_VIDEO_HAVON_END,       4355,  },
+    {P_ENCP_VIDEO_HSO_BEGIN,       264,   },
+    {P_ENCP_VIDEO_HSO_END,         176,   },
+    {P_ENCP_VIDEO_EQPULS_BEGIN,    2288,  },
+    {P_ENCP_VIDEO_EQPULS_END,      2464,  },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    440,   },
+    {P_ENCP_VIDEO_VSPULS_END,      2200,  },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    4,     },
+    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    4,     },
+    {P_ENCP_VIDEO_VAVON_BLINE,     20,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     559,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       88,    },
+    {P_ENCP_VIDEO_VSO_END,         88,    },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+    {P_ENCP_VIDEO_YFP1_HTIME,      516,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      4355,  },
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_ENCP_VIDEO_OFLD_VOAV_OFST,  0x11   },
+    {P_ENCP_VIDEO_MODE,            0x5ffc,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {P_ENCP_VIDEO_SYNC_MODE,       0x207, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_VENC_VDAC_DACSEL0,          0x0001,},
+    {P_VENC_VDAC_DACSEL1,          0x0001,},
+    {P_VENC_VDAC_DACSEL2,          0x0001,},
+    {P_VENC_VDAC_DACSEL3,          0x0001,},
+    {P_VENC_VDAC_DACSEL4,          0x0001,},
+    {P_VENC_VDAC_DACSEL5,          0x0001,},
+    {P_ENCI_VIDEO_EN,              0,     },
+    {P_ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080i_50hz[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+//	{VCLK_HD},
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x0052,},
+
+    {P_VENC_DVI_SETTING,           0x202d,},
+    {P_ENCP_VIDEO_MAX_PXCNT,       5279,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       1124,  },
+
+    //analog vidoe position in horizontal
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    88,    },
+    {P_ENCP_VIDEO_HSPULS_END,      264,   },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+
+    //DE position in horizontal
+    {P_ENCP_VIDEO_HAVON_BEGIN,     526,   },
+    {P_ENCP_VIDEO_HAVON_END,       4365,  },
+
+    //ditital hsync positon in horizontal
+    {P_ENCP_VIDEO_HSO_BEGIN,       142,   },
+    {P_ENCP_VIDEO_HSO_END,         230,   },
+
+    /* vsync horizontal timing */
+    {P_ENCP_VIDEO_EQPULS_BEGIN,    2728,  },
+    {P_ENCP_VIDEO_EQPULS_END,      2904,  },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    440,   },
+    {P_ENCP_VIDEO_VSPULS_END,      2200,  },
+
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    4,     },
+    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    4,     },
+
+    //DE position in vertical
+    {P_ENCP_VIDEO_VAVON_BLINE,     20,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     559,   },
+
+    //adjust vsync start point and end point
+    {P_ENCP_VIDEO_VSO_BEGIN,       142,    },
+    {P_ENCP_VIDEO_VSO_END,         142,    },
+
+    //adjust the vsync start line and end line
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    /* filter & misc settings */
+    {P_ENCP_VIDEO_YFP1_HTIME,      526,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      4365,  },
+
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },  // Select clk108 as DAC clock, progressive mode
+    {P_ENCP_VIDEO_OFLD_VOAV_OFST,  0x11   },//bit[15:12]: Odd field VSO  offset begin,
+                                                        //bit[11:8]: Odd field VSO  offset end,
+                                                        //bit[7:4]: Odd field VAVON offset begin,
+                                                        //bit[3:0]: Odd field VAVON offset end,
+    {P_ENCP_VIDEO_MODE,            0x5ffc,},//Enable Hsync and equalization pulse switch in center
+    {P_ENCP_VIDEO_MODE_ADV,        0x0019,}, //bit6:swap PbPr; bit4:YPBPR gain as HDTV type;
+                                                 //bit3:Data input from VFIFO;bit[2}0]:repreat pixel a time
+    {P_ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_VENC_VDAC_DACSEL0,          0x0001,},
+    {P_VENC_VDAC_DACSEL1,          0x0001,},
+    {P_VENC_VDAC_DACSEL2,          0x0001,},
+    {P_VENC_VDAC_DACSEL3,          0x0001,},
+    {P_VENC_VDAC_DACSEL4,          0x0001,},
+    {P_VENC_VDAC_DACSEL5,          0x0001,},
+    {P_ENCI_VIDEO_EN,              0,     },
+    {P_ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080p[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+
+
+    {P_ENCP_VIDEO_FILT_CTRL,       0x1052,},
+    {P_VENC_DVI_SETTING,           0x0001,},
+    {P_ENCP_VIDEO_MODE,            0x4040,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0018,},
+    {P_ENCP_VIDEO_YFP1_HTIME,      140,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      2060,  },
+    {P_ENCP_VIDEO_MAX_PXCNT,       2199,  },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    2156,  },//1980
+    {P_ENCP_VIDEO_HSPULS_END,      44,    },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   44,    },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    140,   },
+    {P_ENCP_VIDEO_VSPULS_END,      2059,  },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
+    {P_ENCP_VIDEO_HAVON_BEGIN,     148,   },
+    {P_ENCP_VIDEO_HAVON_END,       2067,  },
+    {P_ENCP_VIDEO_VAVON_BLINE,     41,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     1120,  },
+    {P_ENCP_VIDEO_HSO_BEGIN,       44,    },
+    {P_ENCP_VIDEO_HSO_END,         2156,  },
+    {P_ENCP_VIDEO_VSO_BEGIN,       2100,  },
+    {P_ENCP_VIDEO_VSO_END,         2164,  },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+    {P_ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},      //New Add. If not set, when system boots up, switch panel to HDMI 1080P, nothing on TV.
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VENC_VDAC_DACSEL0,          0x0001,},
+    {P_VENC_VDAC_DACSEL1,          0x0001,},
+    {P_VENC_VDAC_DACSEL2,          0x0001,},
+    {P_VENC_VDAC_DACSEL3,          0x0001,},
+    {P_VENC_VDAC_DACSEL4,          0x0001,},
+    {P_VENC_VDAC_DACSEL5,          0x0001,},
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_ENCI_VIDEO_EN,              0,     },
+    {P_ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080p_50hz[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x1052,},
+
+    // bit 13    1          (delayed prog_vs)
+    // bit 5:4:  2          (pixel[0])
+    // bit 3:    1          invert vsync or not
+    // bit 2:    1          invert hsync or not
+    // bit1:     1          (select viu sync)
+    // bit0:     1          (progressive)
+    {P_VENC_DVI_SETTING,           0x000d,},
+    {P_ENCP_VIDEO_MAX_PXCNT,       2639,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    /* horizontal timing settings */
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    44,  },//1980
+    {P_ENCP_VIDEO_HSPULS_END,      132,    },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   44,    },
+
+    //DE position in horizontal
+    {P_ENCP_VIDEO_HAVON_BEGIN,     271,   },
+    {P_ENCP_VIDEO_HAVON_END,       2190,  },
+
+    //ditital hsync positon in horizontal
+    {P_ENCP_VIDEO_HSO_BEGIN,       79 ,    },
+    {P_ENCP_VIDEO_HSO_END,         123,  },
+
+    /* vsync horizontal timing */
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    220,   },
+    {P_ENCP_VIDEO_VSPULS_END,      2140,  },
+
+    /* vertical timing settings */
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
+    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    4,     },//35
+    {P_ENCP_VIDEO_VAVON_BLINE,     41,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     1120,  },
+
+    //adjust the hsync & vsync start point and end point
+    {P_ENCP_VIDEO_VSO_BEGIN,       79,  },
+    {P_ENCP_VIDEO_VSO_END,         79,  },
+
+    //adjust the vsync start line and end line
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    {P_ENCP_VIDEO_YFP1_HTIME,      271,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      2190,  },
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_ENCP_VIDEO_MODE,            0x4040,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0018,},
+
+    {P_ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
+
+    {P_ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
+
+    {P_ENCP_VIDEO_RGB_CTRL, 2,},       // enable sync on B
+
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_VENC_VDAC_DACSEL0,          0x0001,},
+    {P_VENC_VDAC_DACSEL1,          0x0001,},
+    {P_VENC_VDAC_DACSEL2,          0x0001,},
+    {P_VENC_VDAC_DACSEL3,          0x0001,},
+    {P_VENC_VDAC_DACSEL4,          0x0001,},
+    {P_VENC_VDAC_DACSEL5,          0x0001,},
+    {P_ENCI_VIDEO_EN,              0,     },
+    {P_ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080p_24hz[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x1052,},
+
+    // bit 13    1          (delayed prog_vs)
+    // bit 5:4:  2          (pixel[0])
+    // bit 3:    1          invert vsync or not
+    // bit 2:    1          invert hsync or not
+    // bit1:     1          (select viu sync)
+    // bit0:     1          (progressive)
+    {P_VENC_DVI_SETTING,           0x000d,},
+    {P_ENCP_VIDEO_MAX_PXCNT,       2749,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    /* horizontal timing settings */
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    44,  },//1980
+    {P_ENCP_VIDEO_HSPULS_END,      132,    },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   44,    },
+
+    //DE position in horizontal
+    {P_ENCP_VIDEO_HAVON_BEGIN,     271,   },
+    {P_ENCP_VIDEO_HAVON_END,       2190,  },
+
+    //ditital hsync positon in horizontal
+    {P_ENCP_VIDEO_HSO_BEGIN,       79 ,    },
+    {P_ENCP_VIDEO_HSO_END,         123,  },
+
+    /* vsync horizontal timing */
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    220,   },
+    {P_ENCP_VIDEO_VSPULS_END,      2140,  },
+
+    /* vertical timing settings */
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
+    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    4,     },//35
+    {P_ENCP_VIDEO_VAVON_BLINE,     41,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     1120,  },
+
+    //adjust the hsync & vsync start point and end point
+    {P_ENCP_VIDEO_VSO_BEGIN,       79,  },
+    {P_ENCP_VIDEO_VSO_END,         79,  },
+
+    //adjust the vsync start line and end line
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    {P_ENCP_VIDEO_YFP1_HTIME,      271,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      2190,  },
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_ENCP_VIDEO_MODE,            0x4040,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0018,},
+
+    {P_ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
+
+    {P_ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
+
+    {P_ENCP_VIDEO_RGB_CTRL, 2,},       // enable sync on B
+
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_ENCP_DACSEL_0,              0x3102,},
+    {P_ENCP_DACSEL_1,              0x0054,},
+    {P_VENC_VDAC_DACSEL0,          0x0001,},
+    {P_VENC_VDAC_DACSEL1,          0x0001,},
+    {P_VENC_VDAC_DACSEL2,          0x0001,},
+    {P_VENC_VDAC_DACSEL3,          0x0001,},
+    {P_VENC_VDAC_DACSEL4,          0x0001,},
+    {P_VENC_VDAC_DACSEL5,          0x0001,},
+    {P_ENCI_VIDEO_EN,              0,     },
+    {P_ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_4k2k_30hz[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
+    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
+    {P_ENCP_VIDEO_YFP1_HTIME,       140},
+    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840},
+
+    {P_ENCP_VIDEO_MAX_PXCNT,        3840+560-1},
+    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
+    {P_ENCP_VIDEO_HSPULS_END,       44},
+    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
+    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
+    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
+    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
+    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
+
+    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
+    {P_ENCP_VIDEO_HAVON_END,        3987},
+    {P_ENCP_VIDEO_VAVON_BLINE,      89},
+    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
+
+    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
+    {P_ENCP_VIDEO_HSO_END, 		    2156+1920},
+    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920},
+    {P_ENCP_VIDEO_VSO_END, 		    2164+1920},
+
+    {P_ENCP_VIDEO_VSO_BLINE,        51},
+    {P_ENCP_VIDEO_VSO_ELINE,        53},
+    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
+
+    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {MREG_END_MARKER,            0      },
+};
+
+static const reg_t tvregs_4k2k_25hz[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
+    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
+    {P_ENCP_VIDEO_YFP1_HTIME,       140},
+    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840},
+
+    {P_ENCP_VIDEO_MAX_PXCNT,        3840+1440-1},
+    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
+    {P_ENCP_VIDEO_HSPULS_END,       44},
+    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
+    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
+    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
+    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
+    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
+
+    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
+    {P_ENCP_VIDEO_HAVON_END,        3987},
+    {P_ENCP_VIDEO_VAVON_BLINE,      89},
+    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
+
+    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
+    {P_ENCP_VIDEO_HSO_END, 		    2156+1920},
+    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920},
+    {P_ENCP_VIDEO_VSO_END, 		    2164+1920},
+
+    {P_ENCP_VIDEO_VSO_BLINE,        51},
+    {P_ENCP_VIDEO_VSO_ELINE,        53},
+    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
+
+    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {MREG_END_MARKER,            0      },
+};
+
+static const reg_t tvregs_4k2k_24hz[] = {
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
+    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
+    {P_ENCP_VIDEO_YFP1_HTIME,       140},
+    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840},
+
+    {P_ENCP_VIDEO_MAX_PXCNT,        3840+1660-1},
+    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
+    {P_ENCP_VIDEO_HSPULS_END,       44},
+    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
+    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
+    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
+    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
+    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
+
+    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
+    {P_ENCP_VIDEO_HAVON_END,        3987},
+    {P_ENCP_VIDEO_VAVON_BLINE,      89},
+    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
+
+    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
+    {P_ENCP_VIDEO_HSO_END, 		    2156+1920},
+    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920},
+    {P_ENCP_VIDEO_VSO_END, 		    2164+1920},
+
+    {P_ENCP_VIDEO_VSO_BLINE,        51},
+    {P_ENCP_VIDEO_VSO_ELINE,        53},
+    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
+
+    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+
+    {MREG_END_MARKER,            0      },
+};
+
+static const reg_t tvregs_4k2k_smpte[] = {      //24hz
+    {P_HHI_VDAC_CNTL0,               0x0   },
+    {P_HHI_VDAC_CNTL1,               0x8   },
+    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
+    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
+    {P_ENCP_VIDEO_YFP1_HTIME,       140},
+    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840+256},
+
+    {P_ENCP_VIDEO_MAX_PXCNT,        4096+1404-1},
+    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
+    {P_ENCP_VIDEO_HSPULS_END,       44},
+    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
+    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
+    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
+    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
+    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
+
+    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
+    {P_ENCP_VIDEO_HAVON_END,        3987+256},
+    {P_ENCP_VIDEO_VAVON_BLINE,      89},
+    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
+
+    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
+    {P_ENCP_VIDEO_HSO_END, 		    2156+1920+256},
+    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920+256},
+    {P_ENCP_VIDEO_VSO_END, 		    2164+1920+256},
+
+    {P_ENCP_VIDEO_VSO_BLINE,        51},
+    {P_ENCP_VIDEO_VSO_ELINE,        53},
+    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
+
+    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {MREG_END_MARKER,            0      },
+};
+
+static const reg_t tvregs_vga_640x480[] = { // 25.17mhz 800 *525
+     {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,       },
+    {P_HHI_VID_PLL_CNTL,           0x2001042d,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001042a,},//50
+
+    {P_HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x1052,},
+    //{P_HHI_VID_CLK_DIV,            0x01000100,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x2052,},
+    {P_VENC_DVI_SETTING,           0x21,  },
+    {P_ENCP_VIDEO_MODE,            0,     },
+    {P_ENCP_VIDEO_MODE_ADV,        0x009,     },
+    {P_ENCP_VIDEO_YFP1_HTIME,      244,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      1630,  },
+    {P_ENCP_VIDEO_YC_DLY,          0,     },
+    {P_ENCP_VIDEO_MAX_PXCNT,       1599,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       525,   },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    0x60,  },
+    {P_ENCP_VIDEO_HSPULS_END,      0xa0,  },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    0,     },
+    {P_ENCP_VIDEO_VSPULS_END,      1589   },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     153,   },
+    {P_ENCP_VIDEO_HAVON_END,       1433,  },
+    {P_ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     540,   },
+    {P_ENCP_VIDEO_SYNC_MODE,       0x07,  },
+    {P_VENC_VIDEO_PROG_MODE,       0x100,   },
+    {P_VENC_VIDEO_EXSRC,           0x0,   },
+    {P_ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {P_ENCP_VIDEO_HSO_END,         0x5,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {P_ENCP_VIDEO_VSO_END,         0x5,   },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_SY_VAL,          8,     },
+    {P_ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    /////////////////////////////
+    {P_ENCP_VIDEO_RGB_CTRL,		 0,},
+    {P_VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {P_VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {P_VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {P_VENC_VDAC_DACSEL0,          0xf003,},
+    {P_VENC_VDAC_DACSEL1,          0xf003,},
+    {P_VENC_VDAC_DACSEL2,          0xf003,},
+    {P_VENC_VDAC_DACSEL3,          0xf003,},
+    {P_VENC_VDAC_DACSEL4,          0xf003,},
+    {P_VENC_VDAC_DACSEL5,          0xf003,},
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {P_ENCP_DACSEL_0,              0x0543,},
+    {P_ENCP_DACSEL_1,              0x0000,},
+
+    {P_ENCI_VIDEO_EN,              0      },
+    {P_ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+/////////////////////////////////////
+};
+static const reg_t tvregs_svga_800x600[]={ //39.5mhz 1056 *628
+    {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x00010422,},//79
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {P_VENC_DVI_SETTING,           0x2029,},
+    {P_ENCP_VIDEO_MODE,            0x0040,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {P_ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      2112,  },
+    {P_ENCP_VIDEO_MAX_PXCNT,       2111,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       628,   },//628
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {P_ENCP_VIDEO_HSPULS_END,      230,   },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    0x58,   },
+    {P_ENCP_VIDEO_VSPULS_END,      0x80,  },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     267,   },//59
+    {P_ENCP_VIDEO_HAVON_END,       1866,  },//1659
+    {P_ENCP_VIDEO_VAVON_BLINE,    59,    },//59
+    {P_ENCP_VIDEO_VAVON_ELINE,     658,   },//659
+    {P_ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {P_ENCP_VIDEO_HSO_END,         260,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {P_ENCP_VIDEO_VSO_END,         2200,   },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_VENC_VIDEO_EXSRC,           0x0,   },
+    {P_ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {P_ENCP_VIDEO_HSO_END,         0x5,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {P_ENCP_VIDEO_VSO_END,         0x5,   },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_SY_VAL,          8,     },
+    {P_ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    {P_ENCP_VIDEO_RGB_CTRL,		 0,},
+    {P_VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {P_VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {P_VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {P_VENC_VDAC_DACSEL0,          0xf003,},
+    {P_VENC_VDAC_DACSEL1,          0xf003,},
+    {P_VENC_VDAC_DACSEL2,          0xf003,},
+    {P_VENC_VDAC_DACSEL3,          0xf003,},
+    {P_VENC_VDAC_DACSEL4,          0xf003,},
+    {P_VENC_VDAC_DACSEL5,          0xf003,},
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {P_ENCP_DACSEL_0,              0x0543,},
+    {P_ENCP_DACSEL_1,              0x0000,},
+    {P_ENCI_VIDEO_EN,              0      },
+    {P_ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+	//////////////////////////////
+ };
+static const reg_t tvregs_xga_1024x768[] = {
+   /* {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x0001043e,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {P_VENC_DVI_SETTING,           0x2029,},
+    {P_ENCP_VIDEO_MODE,            0x0040,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0009,},
+    {P_ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      2500,  },
+    {P_ENCP_VIDEO_MAX_PXCNT,       2531,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       804,   },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {P_ENCP_VIDEO_HSPULS_END,      230,   },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    0x22,   },
+    {P_ENCP_VIDEO_VSPULS_END,      0xa0,  },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     59,   },
+    {P_ENCP_VIDEO_HAVON_END,       2106,  },
+    {P_ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     827,   },//827
+    {P_ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {P_ENCP_VIDEO_HSO_END,         260,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {P_ENCP_VIDEO_VSO_END,         2200,   },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    */
+    {P_VENC_VDAC_SETTING,          0xff,  },
+    {P_HHI_VID_CLK_CNTL,           0x0,},
+    {P_HHI_VID_PLL_CNTL2,          0x814d3928},
+    {P_HHI_VID_PLL_CNTL3,          0x6b425012},
+    {P_HHI_VID_PLL_CNTL4,          0x110},
+    {P_HHI_VID_PLL_CNTL,           0x00010436,},
+    {P_HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {P_HHI_VID_CLK_DIV,            0x100},
+    {P_HHI_VID_CLK_CNTL,           0x80000,},
+    {P_HHI_VID_CLK_CNTL,           0x88001,},
+    {P_HHI_VID_CLK_CNTL,           0x80003,},
+    {P_HHI_VIID_CLK_DIV,           0x00000101,},
+    {P_ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {P_VENC_DVI_SETTING,           0x2029,},
+    {P_ENCP_VIDEO_MODE,            0x0040,},
+    {P_ENCP_VIDEO_MODE_ADV,        0x0009,},
+    {P_ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {P_ENCP_VIDEO_YFP2_HTIME,      2500,  },
+    {P_ENCP_VIDEO_MAX_PXCNT,       2691,  },
+    {P_ENCP_VIDEO_MAX_LNCNT,       806,   },
+    {P_ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {P_ENCP_VIDEO_HSPULS_END,      230,   },
+    {P_ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {P_ENCP_VIDEO_VSPULS_BEGIN,    0x22,   },
+    {P_ENCP_VIDEO_VSPULS_END,      0xa0,  },
+    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {P_ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {P_ENCP_VIDEO_HAVON_BEGIN,     315,   },
+    {P_ENCP_VIDEO_HAVON_END,       2362,  },
+    {P_ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {P_ENCP_VIDEO_VAVON_ELINE,     827,   },//827
+    {P_ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {P_ENCP_VIDEO_HSO_END,         260,   },
+    {P_ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {P_ENCP_VIDEO_VSO_END,         2200,   },
+    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
+    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
+    {P_VENC_VIDEO_PROG_MODE,       0x100, },
+    {P_VENC_SYNC_ROUTE,            0,     },
+    {P_VENC_INTCTRL,               0x200, },
+    {P_ENCP_VFIFO2VD_CTL,               0,     },
+    {P_VENC_VDAC_SETTING,          0,     },
+    ////////////////////////
+    {P_ENCP_VIDEO_RGB_CTRL,		 0,},
+    {P_VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {P_VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {P_VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {P_VENC_VDAC_DACSEL0,          0xf003,},
+    {P_VENC_VDAC_DACSEL1,          0xf003,},
+    {P_VENC_VDAC_DACSEL2,          0xf003,},
+    {P_VENC_VDAC_DACSEL3,          0xf003,},
+    {P_VENC_VDAC_DACSEL4,          0xf003,},
+    {P_VENC_VDAC_DACSEL5,          0xf003,},
+    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {P_VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {P_ENCP_DACSEL_0,              0x0543,},
+    {P_ENCP_DACSEL_1,              0x0000,},
+    {P_ENCI_VIDEO_EN,              0      },
+    {P_ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+	///////////////////////////////////
+
+};
+
+/* The sequence of register tables items must match the enum define in tvmode.h */
+static const reg_t *tvregsTab[] = {
+    tvregs_480i,
+    tvregs_480cvbs,
+    tvregs_480p,
+    tvregs_576i,
+    tvregs_576cvbs,
+    tvregs_576p,
+    tvregs_720p,
+    tvregs_1080i,       //Adjust tvregs_* sequences and match the enum define in tvmode.h
+    tvregs_1080p,
+    tvregs_720p_50hz,
+    tvregs_1080i_50hz,
+    tvregs_1080p_50hz,
+    tvregs_1080p_24hz,
+    tvregs_4k2k_30hz,
+    tvregs_4k2k_25hz,
+    tvregs_4k2k_24hz,
+    tvregs_4k2k_smpte,
+    tvregs_vga_640x480,
+    tvregs_svga_800x600,
+    tvregs_xga_1024x768
+};
+
+static const tvinfo_t tvinfoTab[] = {
+    {.xres =  720, .yres =  480, .id = "480i"},
+    {.xres =  720, .yres =  480, .id = "480cvbs"},
+    {.xres =  720, .yres =  480, .id = "480p"},
+    {.xres =  720, .yres =  576, .id = "576i"},
+    {.xres =  720, .yres =  576, .id = "576cvbs"},
+    {.xres =  720, .yres =  576, .id = "576p"},
+    {.xres = 1280, .yres =  720, .id = "720p"},
+    {.xres = 1920, .yres = 1080, .id = "1080i"},
+    {.xres = 1920, .yres = 1080, .id = "1080p"},
+    {.xres = 1280, .yres =  720, .id = "720p50hz"},
+    {.xres = 1920, .yres = 1080, .id = "1080i50hz"},
+    {.xres = 1920, .yres = 1080, .id = "1080p50hz"},
+    {.xres = 1920, .yres = 1080, .id = "1080p24hz"},
+    {.xres = 3840, .yres = 2160, .id = "4k2k30hz"},
+    {.xres = 3840, .yres = 2160, .id = "4k2k25hz"},
+    {.xres = 3840, .yres = 2160, .id = "4k2k24hz"},
+    {.xres = 4096, .yres = 2160, .id = "4k2ksmpte"},
+    {.xres = 640, .yres = 480, .id = "vga"},
+    {.xres = 800, .yres = 600, .id = "svga"},
+    {.xres = 1024, .yres = 768, .id = "xga"},
+};
+
+static inline void setreg(const reg_t *r)
+{
+	aml_write_reg32(r->reg, r->val);
+	//printk("[0x%x] = 0x%x\n", r->reg, r->val);
+}
+
+#endif /* TVREGS_H */
+
diff --git a/arch/arm/mach-meson8b/include/mach/uart.h b/arch/arm/mach-meson8b/include/mach/uart.h
new file mode 100644
index 000000000000..52bb636b422d
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/uart.h
@@ -0,0 +1,32 @@
+/*
+ *	arch/arm/mach-meson6/include/mach/uart.h
+ *
+ *  Copyright (C) 2013 AMLOGIC, INC.
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ * Basic register address definitions in physical memory and
+ * some block defintions for core devices like the timer.
+ * copy from linux kernel
+ */
+
+#ifndef __MACH_MESSON_UART_REGS_H
+#define __MACH_MESSON_UART_REGS_H
+
+#define UART_AO    0
+#define UART_A     1
+#define UART_B     2
+#define UART_C     3
+#define UART_D     4
+
+#define MESON_UART_PORT_NUM 5
+
+#define MESON_UART_NAME "uart_ao","uart_a","uart_b","uart_c","uart_d"
+#define MESON_UART_LINE UART_AO,UART_A,UART_B,UART_C,UART_D
+#define MESON_UART_FIFO 64,128,64,64,64
+#define MESON_UART_ADDRS      ((void *)P_AO_UART_WFIFO),((void *)P_UART0_WFIFO), \
+						((void *)P_UART1_WFIFO),((void *)P_UART2_WFIFO),   \
+						((void *)P_UART3_WFIFO)
+#define MESON_UART_IRQS		INT_UART_AO, INT_UART_0, INT_UART_1, INT_UART_2    \
+						, INT_UART_3
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/uncompress.h b/arch/arm/mach-meson8b/include/mach/uncompress.h
new file mode 100644
index 000000000000..273be46782ad
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/uncompress.h
@@ -0,0 +1,56 @@
+/*
+ * arch/arm/mach-meson/include/mach/uncompress.h
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#define UART0_RFIFO     (*(volatile unsigned int *)0xc11084c0)
+#define UART0_WFIFO     (*(volatile unsigned int *)0xc11084c4)
+#define UART0_CONTROL   (*(volatile unsigned int *)0xc11084c8)
+#define UART0_STATUS    (*(volatile unsigned int *)0xc11084cc)
+
+/*
+ * This does not append a newline
+ */
+static inline void putc(int c)
+{
+    /* wait TX FIFO not full */
+    while (UART0_STATUS & (1 << 21)) {
+        barrier();
+    }
+
+    UART0_WFIFO = c;
+}
+
+static inline void flush(void)
+{
+    /* wait TX FIFO not empty */
+    while ((UART0_STATUS & (1 << 22)) == 0) {
+        barrier();
+    }
+}
+
+static inline void arch_decomp_setup(void)
+{
+    /* 115200 bps at 180M MPEG clock */
+    UART0_CONTROL = 0x185;
+}
+
+/*
+ * nothing to do
+ */
+#define arch_decomp_wdog()
diff --git a/arch/arm/mach-meson8b/include/mach/usb.h b/arch/arm/mach-meson8b/include/mach/usb.h
new file mode 100644
index 000000000000..82405455386e
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/usb.h
@@ -0,0 +1,27 @@
+/*
+ *	arch/arm/mach-meson6/include/mach/usb.h
+ *
+ *  Copyright (C) 2013 AMLOGIC, INC.
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ * Basic register address definitions in physical memory and
+ * some block defintions for core devices like the timer.
+ * copy from linux kernel
+ */
+
+#ifndef __MACH_MESSON_USB_REGS_H
+#define __MACH_MESSON_USB_REGS_H
+
+#include <mach/am_regs.h>
+
+#define MESON_USB_PORT_NUM 2
+
+#define MESON_USB_NAMES "usb0","usb1"
+#define MESON_USB_FIFOS 1024,1024
+#define MESON_USB_CTRL_ADDRS      ((void *)IO_USB_A_BASE),((void *)IO_USB_B_BASE)
+#define MESON_USB_CTRL_SIZES		SZ_256K,SZ_256K
+#define MESON_USB_PHY_ADDRS      ((void *)P_USB_ADDR0),((void *)P_USB_ADDR8)
+#define MESON_USB_PHY_SIZES			8,8
+#define MESON_USB_IRQS		INT_USB_A, INT_USB_B
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/usbclock.h b/arch/arm/mach-meson8b/include/mach/usbclock.h
new file mode 100644
index 000000000000..e74dd293af96
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/usbclock.h
@@ -0,0 +1,213 @@
+#ifndef __USB_CLK_HEADER_
+#define __USB_CLK_HEADER_
+
+#include <plat/lm.h>
+#include <mach/clock.h>
+typedef struct usb_peri_reg {
+	volatile uint32_t config;
+	volatile uint32_t ctrl;
+	volatile uint32_t endp_intr;
+	volatile uint32_t adp_bc;
+	volatile uint32_t dbg_uart;
+	volatile uint32_t test;
+	volatile uint32_t tune;
+	volatile uint32_t reserved;
+} usb_peri_reg_t;
+
+typedef union usb_config_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+        unsigned clk_en:1;
+        unsigned clk_sel:3;
+        unsigned clk_div:7;
+        unsigned reserved0:4;
+        unsigned clk_32k_alt_sel:1;
+        unsigned reserved1:15;
+        unsigned test_trig:1;
+    } b;
+} usb_config_data_t;
+
+typedef union usb_ctrl_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+        unsigned soft_prst:1;
+        unsigned soft_hreset:1;
+        unsigned ss_scaledown_mode:2;
+        unsigned clk_det_rst:1;
+        unsigned intr_sel:1;
+        unsigned reserved:2;
+        unsigned clk_detected:1;
+        unsigned sof_sent_rcvd_tgl:1;
+        unsigned sof_toggle_out:1;
+        unsigned not_used:4;
+        unsigned por:1;
+        unsigned sleepm:1;
+        unsigned txbitstuffennh:1;
+        unsigned txbitstuffenn:1;
+        unsigned commononn:1;
+        unsigned refclksel:2;
+        unsigned fsel:3;
+        unsigned portreset:1;
+        unsigned thread_id:6;
+    } b;
+} usb_ctrl_data_t;
+
+typedef union usb_endp_intr_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+        unsigned int0:1;
+        unsigned int1:1;
+        unsigned int2:1;
+        unsigned int3:1;
+        unsigned int4:1;
+        unsigned int5:1;
+        unsigned int6:1;
+        unsigned int7:1;
+        unsigned int8:1;
+        unsigned int9:1;
+        unsigned int10:1;
+        unsigned int11:1;
+        unsigned int12:1;
+        unsigned int13:1;
+        unsigned int14:1;
+        unsigned int15:1;
+        unsigned int16:1;
+        unsigned int17:1;
+        unsigned int18:1;
+        unsigned int19:1;
+        unsigned int20:1;
+        unsigned int21:1;
+        unsigned int22:1;
+        unsigned int23:1;
+        unsigned int24:1;
+        unsigned int25:1;
+        unsigned int26:1;
+        unsigned int27:1;
+        unsigned int28:1;
+        unsigned int29:1;
+        unsigned int30:1;
+        unsigned int31:1;
+    } b;
+} usb_endp_intr_data_t;
+
+typedef union usb_adp_bc_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned vbusvldextsel:1;
+	unsigned vbusvldext:1;
+	unsigned otgdisable:1;
+	unsigned idpullup:1;
+	unsigned drvvbus:1;
+	unsigned adp_prb_en:1;
+	unsigned adp_dischrg:1;
+	unsigned adp_chrg:1;
+	unsigned sessend:1;
+	unsigned device_sess_vld:1;
+	unsigned bvalid:1;
+	unsigned avalid:1;
+	unsigned iddig:1;
+	unsigned vbusvalid:1;
+	unsigned adp_probe:1;
+	unsigned adp_sense:1;
+	unsigned aca_enable:1;
+	unsigned dcd_enable:1;
+	unsigned vdatdetenb:1;
+	unsigned vdatsrcenb:1;
+	unsigned chrgsel:1;
+	unsigned chg_det:1;
+	unsigned aca_pin_range_c:1;
+	unsigned aca_pin_range_b:1;
+	unsigned aca_pin_range_a:1;
+	unsigned aca_pin_gnd:1;
+	unsigned aca_pin_float:1;
+	unsigned not_used:5;
+    } b;
+} usb_adp_bc_data_t;
+
+typedef union usb_dbg_uart_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned bypass_sel:1;
+	unsigned bypass_dm_en:1;
+	unsigned bypass_dp_en:1;
+	unsigned bypass_dm_data:1;
+	unsigned bypass_dp_data:1;
+	unsigned fsv_minus:1;
+	unsigned fsv_plus:1;
+	unsigned burn_in_test:1;
+	unsigned loopbackenb:1;
+	unsigned set_iddq:1;
+	unsigned ate_reset:1;
+	unsigned reserved:4;
+	unsigned not_used:17;
+    } b;
+} usb_dbg_uart_data_t;
+
+typedef union phy_test_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned data_in:4;
+	unsigned data_in_en:4;
+	unsigned addr:4;
+	unsigned data_out_sel:1;
+	unsigned clk:1;
+	unsigned vatestenb:2;
+	unsigned data_out:4;
+	unsigned not_used:12;
+    } b;
+} phy_test_data_t;
+
+typedef union phy_tune_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned tx_res_tune:2;
+	unsigned tx_hsxv_tune:2;
+	unsigned tx_vref_tune:4;
+	unsigned tx_rise_tune:2;
+	unsigned tx_preemp_pulse_tune:1;
+	unsigned tx_preemp_amp_tune:2;
+	unsigned tx_fsls_tune:4;
+	unsigned sqrx_tune:3;
+	unsigned otg_tune:3;
+	unsigned comp_dis_tune:3;
+	unsigned not_used:6;
+    } b;
+} phy_tune_data_t;
+
+
+/*
+ * Clock source index must sync with chip's spec
+ * M1/M2/M3/M6 are different!
+ * This is only for M6
+ */
+#define USB_PHY_CLK_SEL_XTAL	0
+#define USB_PHY_CLK_SEL_XTAL_DIV_2	1
+#define USB_PHY_CLK_SEL_DDR_PLL	2
+#define USB_PHY_CLK_SEL_MPLL_0	3
+#define USB_PHY_CLK_SEL_MPLL_1	4
+#define USB_PHY_CLK_SEL_MPLL_2	5
+#define USB_PHY_CLK_SEL_FCLK_DIV_2	6
+#define USB_PHY_CLK_SEL_FCLK_DIV_3	7
+
+#define USB_BC_MODE_DISCONNECT	0	/* Disconnected */
+#define USB_BC_MODE_SDP		1	/* PC */
+#define USB_BC_MODE_DCP		2	/* Charger */
+#define USB_BC_MODE_CDP		3	/* PC + Charger */
+
+int clk_enable_usb(struct clk *clk);
+int clk_disable_usb(struct clk *clk);
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/vdac_switch.h b/arch/arm/mach-meson8b/include/mach/vdac_switch.h
new file mode 100644
index 000000000000..38fa70c4a6ad
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/vdac_switch.h
@@ -0,0 +1,39 @@
+/*
+ * VDAC SWITCH definitions
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __AML_VDAC_SWITCH_H__
+#define __AML_VDAC_SWITCH_H__
+
+#include <linux/types.h>
+
+enum aml_vdac_switch_type {
+	VOUT_CVBS,
+	VOUT_COMPONENT,
+	VOUT_VGA,
+	VOUT_MAX
+};
+
+#ifdef CONFIG_USE_OF
+struct aml_vdac_hw_ctrl {
+    unsigned int pin1;
+    unsigned int val1;
+    unsigned int pin2;
+    unsigned int val2;
+};
+
+struct aml_vdac_hw_switch {
+    struct aml_vdac_hw_ctrl cvbs;
+    struct aml_vdac_hw_ctrl ypbr;
+    struct aml_vdac_hw_ctrl vga;
+};
+#endif
+
+struct aml_vdac_switch_platform_data {
+	void (*vdac_switch_change_type_func)(unsigned type);
+};
+
+#endif
diff --git a/arch/arm/mach-meson8b/include/mach/vpu.h b/arch/arm/mach-meson8b/include/mach/vpu.h
new file mode 100644
index 000000000000..fdd19676ec75
--- /dev/null
+++ b/arch/arm/mach-meson8b/include/mach/vpu.h
@@ -0,0 +1,48 @@
+#ifndef __VPU_H__
+#define __VPU_H__
+
+//#define CONFIG_VPU_DYNAMIC_ADJ
+
+#define VPU_MOD_START	100
+typedef enum {
+    VPU_VIU_OSD1 = VPU_MOD_START,
+    VPU_VIU_OSD2,
+	VPU_VIU_VD1,
+	VPU_VIU_VD2,
+	VPU_VIU_CHROMA,
+	VPU_VIU_OFIFO,
+	VPU_VIU_SCALE,
+	VPU_VIU_OSD_SCALE,
+	VPU_VIU_VDIN0,
+	VPU_VIU_VDIN1,
+	VPU_PIC_ROT1,
+	VPU_PIC_ROT2,
+	VPU_PIC_ROT3,
+	VPU_DI_PRE,
+	VPU_DI_POST,
+	VPU_VIU2_OSD1,
+    VPU_VIU2_OSD2,
+	VPU_VIU2_VD1,
+	VPU_VIU2_CHROMA,
+	VPU_VIU2_OFIFO,
+	VPU_VIU2_SCALE,
+	VPU_VIU2_OSD_SCALE,
+	VPU_VENCP,
+	VPU_VENCL,
+	VPU_VENCI,
+	VPU_ISP,
+	VPU_MAX,
+} vpu_mod_t;
+
+//VPU memory power down
+#define VPU_MEM_POWER_ON		0
+#define VPU_MEM_POWER_DOWN		1
+
+extern unsigned int get_vpu_clk(void);
+extern unsigned int get_vpu_clk_vmod(unsigned int vmod);
+extern int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod);
+extern int release_vpu_clk_vmod(unsigned int vmod);
+
+extern void switch_vpu_mem_pd_vmod(unsigned int vmod, int flag);
+extern int get_vpu_mem_pd_vmod(unsigned int vmod);
+#endif
diff --git a/arch/arm/mach-meson8b/iomapping.c b/arch/arm/mach-meson8b/iomapping.c
new file mode 100644
index 000000000000..c30b1bd29e78
--- /dev/null
+++ b/arch/arm/mach-meson8b/iomapping.c
@@ -0,0 +1,176 @@
+/*
+ * arch/arm/mach-meson8b/iomapping.c
+ *
+ * Copyright (C) 2013 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/io.h>
+#include <linux/mm.h>
+#include <linux/clockchips.h>
+#include <linux/clocksource.h>
+#include <asm/memory.h>
+#include <asm/mach/map.h>
+#include <asm/mach/time.h>
+#include <asm/sched_clock.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/am_regs.h>
+
+
+/***********************************************************************
+ * IO Mapping
+ **********************************************************************/
+/*
+#define IO_PHY_BASE             0xc0000000  ///value from vlsi team
+#define IO_CBUS_PHY_BASE        0xc1100000  ///2M
+#define IO_AXI_BUS_PHY_BASE     0xc1300000  ///1M
+#define IO_PL310_PHY_BASE       0xc4200000  ///4k
+#define IO_A9_PERIPH_PHY_BASE      0xc4300000  ///4k
+#define IO_MMC_PHY_BASE     0xc8000000  ///32k
+
+#define IO_AOBUS_PHY_BASE       0xc8100000  ///1M
+	#define IO_USB_A_PHY_BASE       0xc9040000  ///256k
+	#define IO_USB_B_PHY_BASE       0xc90C0000  ///256k
+	#define IO_ETH_PHY_BASE         0xc9410000  ///64k
+#define IO_SPIMEM_PHY_BASE      0xcc000000  ///64M
+#define IO_A9_APB_PHY_BASE      0xd0000000  ///2M
+	#define IO_HDMI_PHY_BASE  0xd0042000
+	#define IO_AUDAC_PHY_BASE   0xd0044000  ///112k
+	#define IO_DOS_BUS_PHY_BASE     0xd0050000  ///64k
+	#define IO_MALI_APB_PHY_BASE    0xd00c0000  ///128k
+
+#define IO_SRAM_PHY_BASE         0xd9000000  ///128k
+#define IO_BOOTROM_PHY_BASE     0xd9040000  ///64k
+#define IO_SECBUS_PHY_BASE      0xda000000
+#define IO_EFUSE_PHY_BASE       0xda000000  ///4k
+#define IO_SECURE_PHY_BASE      (IO_SECBUS_PHY_BASE+0x2000)  ///16k
+
+#define IO_REGS_BASE		0xF2000000
+#define IO_PL310_BASE		(IO_REGS_BASE + 0x000000) // 4k
+#define IO_A9_PERIPH_BASE	(IO_REGS_BASE + 0x001000) // 16k
+#define IO_RESERVED_1		(IO_REGS_BASE + 0x005000) // 20K
+#define IO_MMC_BASE		(IO_REGS_BASE + 0x008000) // 32K
+#define IO_BOOTROM_BASE	(IO_REGS_BASE + 0x010000) // 64K
+#define IO_SRAM_BASE		(IO_REGS_BASE + 0x020000) // 128K
+#define IO_USB_A_BASE		(IO_REGS_BASE + 0x040000) // 256K
+#define IO_USB_B_BASE		(IO_REGS_BASE + 0x080000) // 256K
+#define IO_ETH_BASE			(IO_REGS_BASE + 0x0C0000) // 64K
+#define IO_SECBUS_BASE		(IO_REGS_BASE + 0x0D0000) // 32k
+#define IO_RESERVED_2		(IO_REGS_BASE + 0x0D8000) // 160K
+#define IO_CBUS_BASE		(IO_REGS_BASE + 0x100000) // 1M
+#define IO_AXI_BUS_BASE		(IO_REGS_BASE + 0x200000) // 2M
+#define IO_APB_BUS_BASE	(IO_REGS_BASE + 0x400000) // 2M
+#define IO_AOBUS_BASE		(IO_REGS_BASE + 0x600000) // 1M
+#define IO_REGS_END			(IO_REGS_BASE + 0xF00000 - 1) // Total 15M 
+
+#define IO_SPI_BASE			(0xFB000000)
+#define IO_SPIMEM_BASE		(IO_SPI_BASE + 0x0000000)
+#define IO_SPI_END			(IO_SPI_BASE + 0x4000000 - 1) // Total 64M
+*/
+static __initdata struct map_desc meson_default_io_desc[] = {
+    {
+        .virtual    = IO_PL310_BASE,
+        .pfn        = __phys_to_pfn(IO_PL310_PHY_BASE),
+        .length     = SZ_4K,
+        .type       = MT_DEVICE,
+    } , {
+        .virtual    = IO_A9_PERIPH_BASE,
+        .pfn        = __phys_to_pfn(IO_A9_PERIPH_PHY_BASE),
+        .length     = SZ_16K,
+        .type       = MT_DEVICE,
+    } , {
+        .virtual    = IO_MMC_BUS_BASE,
+        .pfn        = __phys_to_pfn(IO_MMC_PHY_BASE),
+        .length     = SZ_32K,
+        .type       = MT_DEVICE,
+    } ,{
+           .virtual    = IO_BOOTROM_BASE,
+           .pfn        = __phys_to_pfn(IO_BOOTROM_PHY_BASE),
+           .length     = SZ_64K,
+           .type       = MT_DEVICE,
+       }, {
+           .virtual    = IO_SRAM_BASE,
+           .pfn        = __phys_to_pfn(IO_SRAM_PHY_BASE),
+           .length     = SZ_128K,
+           .type       = MT_DEVICE,
+       } , {
+           .virtual    = IO_USB_A_BASE,
+        .pfn        = __phys_to_pfn(IO_USB_A_PHY_BASE),
+        .length     = SZ_256K,
+        .type       = MT_DEVICE,
+       } , {
+           .virtual    = IO_USB_B_BASE,
+        .pfn        = __phys_to_pfn(IO_USB_B_PHY_BASE),
+        .length     = SZ_256K,
+        .type       = MT_DEVICE,
+  } , {
+        .virtual    = IO_ETH_BASE,
+        .pfn        = __phys_to_pfn(IO_ETH_PHY_BASE),
+        .length     = SZ_64K,
+        .type       = MT_DEVICE,
+   } , {
+        .virtual    = IO_SECBUS_BASE,
+        .pfn        = __phys_to_pfn(IO_SECBUS_PHY_BASE),
+        .length     = SZ_32K,
+        .type       = MT_DEVICE,
+    } , {
+        .virtual    = IO_CBUS_BASE,
+        .pfn        = __phys_to_pfn(IO_CBUS_PHY_BASE),
+        .length     = SZ_1M,
+        .type       = MT_DEVICE,
+    } , {
+        .virtual    = IO_AXI_BUS_BASE,
+        .pfn        = __phys_to_pfn(IO_AXI_BUS_PHY_BASE),
+        .length     = SZ_2M,
+        .type       = MT_DEVICE,
+    } , {
+        .virtual    = IO_APB_BUS_BASE,
+        .pfn        = __phys_to_pfn(IO_APB_BUS_PHY_BASE),
+        .length     = SZ_2M,
+        .type       = MT_DEVICE,
+    } , {
+        .virtual    = IO_AOBUS_BASE,
+        .pfn        = __phys_to_pfn(IO_AOBUS_PHY_BASE),
+        .length     = SZ_1M,
+        .type       = MT_DEVICE,
+    },
+#ifdef CONFIG_AMLOGIC_SPI_HW_MASTER
+    {
+            .virtual    = IO_SPIMEM_BASE,
+        .pfn        = __phys_to_pfn(IO_SPIMEM_PHY_BASE),
+        .length     = SZ_64M,
+        .type       = MT_ROM,
+     } , 
+#endif
+#ifdef CONFIG_MESON_SUSPEND
+        {
+        .virtual    = PAGE_ALIGN(__phys_to_virt(0x04f00000)),
+        .pfn        = __phys_to_pfn(0x04f00000),
+        .length     = SZ_1M,
+        .type       = MT_MEMORY_NONCACHED,
+        },
+#endif
+};
+unsigned int meson_uart_phy_addr=0xc8100000;
+void __init meson_map_default_io(void)
+{
+	iotable_init(meson_default_io_desc, ARRAY_SIZE(meson_default_io_desc));
+	meson_uart_phy_addr = IO_AOBUS_BASE;
+}
diff --git a/arch/arm/mach-meson8b/pinctrl.c b/arch/arm/mach-meson8b/pinctrl.c
new file mode 100644
index 000000000000..b77668cba17e
--- /dev/null
+++ b/arch/arm/mach-meson8b/pinctrl.c
@@ -0,0 +1,376 @@
+/*
+ * Driver for the amlogic pin controller
+ *
+ *
+ */
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/machine.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/pinctrl/pinmux.h>
+#include <linux/pinctrl/pinconf.h>
+
+#include <plat/io.h>
+#include <mach/am_regs.h>
+#include <linux/amlogic/pinctrl-amlogic.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+DEFINE_MUTEX(spi_nand_mutex);
+unsigned p_pull_up_addr[]={
+	P_PAD_PULL_UP_REG0,
+	P_PAD_PULL_UP_REG1,
+	P_PAD_PULL_UP_REG2,
+	P_PAD_PULL_UP_REG3,
+	P_PAD_PULL_UP_REG4,
+	P_AO_RTI_PULL_UP_REG,
+};
+unsigned int p_pin_mux_reg_addr[]=
+{
+	P_PERIPHS_PIN_MUX_0,
+	P_PERIPHS_PIN_MUX_1,
+	P_PERIPHS_PIN_MUX_2,
+	P_PERIPHS_PIN_MUX_3,
+	P_PERIPHS_PIN_MUX_4,
+	P_PERIPHS_PIN_MUX_5,
+	P_PERIPHS_PIN_MUX_6,
+	P_PERIPHS_PIN_MUX_7,
+	P_PERIPHS_PIN_MUX_8,
+	P_PERIPHS_PIN_MUX_9,
+	P_AO_RTI_PIN_MUX_REG,
+};
+unsigned p_pull_upen_addr[]={
+	P_PAD_PULL_UP_EN_REG0,
+	P_PAD_PULL_UP_EN_REG1,
+	P_PAD_PULL_UP_EN_REG2,
+	P_PAD_PULL_UP_EN_REG3,
+	P_PAD_PULL_UP_EN_REG4,
+	P_AO_RTI_PULL_UP_REG,
+};
+
+/* Pad names for the pinmux subsystem */
+const static struct pinctrl_pin_desc m8_pads[] = {
+	PINCTRL_PIN(GPIOAO_0,"GPIOAO_0"),
+	PINCTRL_PIN(GPIOAO_1,"GPIOAO_1"),
+	PINCTRL_PIN(GPIOAO_2,"GPIOAO_2"),
+	PINCTRL_PIN(GPIOAO_3,"GPIOAO_3"),
+	PINCTRL_PIN(GPIOAO_4,"GPIOAO_4"),
+	PINCTRL_PIN(GPIOAO_5,"GPIOAO_5"),
+	PINCTRL_PIN(GPIOAO_6,"GPIOAO_6"),
+	PINCTRL_PIN(GPIOAO_7,"GPIOAO_7"),
+	PINCTRL_PIN(GPIOAO_8,"GPIOAO_8"),
+	PINCTRL_PIN(GPIOAO_9,"GPIOAO_9"),
+	PINCTRL_PIN(GPIOAO_10,"GPIOAO_10"),
+	PINCTRL_PIN(GPIOAO_11,"GPIOAO_11"),
+	PINCTRL_PIN(GPIOAO_12,"GPIOAO_12"),
+	PINCTRL_PIN(GPIOAO_13,"GPIOAO_13"),
+	PINCTRL_PIN(GPIOZ_0,"GPIOZ_0"),
+	PINCTRL_PIN(GPIOZ_1,"GPIOZ_1"),
+	PINCTRL_PIN(GPIOZ_2,"GPIOZ_2"),
+	PINCTRL_PIN(GPIOZ_3,"GPIOZ_3"),
+	PINCTRL_PIN(GPIOZ_4,"GPIOZ_4"),
+	PINCTRL_PIN(GPIOZ_5,"GPIOZ_5"),
+	PINCTRL_PIN(GPIOZ_6,"GPIOZ_6"),
+	PINCTRL_PIN(GPIOZ_7,"GPIOZ_7"),
+	PINCTRL_PIN(GPIOZ_8,"GPIOZ_8"),
+	PINCTRL_PIN(GPIOZ_9,"GPIOZ_9"),
+	PINCTRL_PIN(GPIOZ_10,"GPIOZ_10"),
+	PINCTRL_PIN(GPIOZ_11,"GPIOZ_11"),
+	PINCTRL_PIN(GPIOZ_12,"GPIOZ_12"),
+	PINCTRL_PIN(GPIOZ_13,"GPIOZ_13"),
+	PINCTRL_PIN(GPIOZ_14,"GPIOZ_14"),
+	PINCTRL_PIN(GPIOH_0,"GPIOH_0"),
+	PINCTRL_PIN(GPIOH_1,"GPIOH_1"),
+	PINCTRL_PIN(GPIOH_2,"GPIOH_2"),
+	PINCTRL_PIN(GPIOH_3,"GPIOH_3"),
+	PINCTRL_PIN(GPIOH_4,"GPIOH_4"),
+	PINCTRL_PIN(GPIOH_5,"GPIOH_5"),
+	PINCTRL_PIN(GPIOH_6,"GPIOH_6"),
+	PINCTRL_PIN(GPIOH_7,"GPIOH_7"),
+	PINCTRL_PIN(GPIOH_8,"GPIOH_8"),
+	PINCTRL_PIN(GPIOH_9,"GPIOH_9"),
+	PINCTRL_PIN(BOOT_0,"BOOT_0"),
+	PINCTRL_PIN(BOOT_1,"BOOT_1"),
+	PINCTRL_PIN(BOOT_2,"BOOT_2"),
+	PINCTRL_PIN(BOOT_3,"BOOT_3"),
+	PINCTRL_PIN(BOOT_4,"BOOT_4"),
+	PINCTRL_PIN(BOOT_5,"BOOT_5"),
+	PINCTRL_PIN(BOOT_6,"BOOT_6"),
+	PINCTRL_PIN(BOOT_7,"BOOT_7"),
+	PINCTRL_PIN(BOOT_8,"BOOT_8"),
+	PINCTRL_PIN(BOOT_9,"BOOT_9"),
+	PINCTRL_PIN(BOOT_10,"BOOT_10"),
+	PINCTRL_PIN(BOOT_11,"BOOT_11"),
+	PINCTRL_PIN(BOOT_12,"BOOT_12"),
+	PINCTRL_PIN(BOOT_13,"BOOT_13"),
+	PINCTRL_PIN(BOOT_14,"BOOT_14"),
+	PINCTRL_PIN(BOOT_15,"BOOT_15"),
+	PINCTRL_PIN(BOOT_16,"BOOT_16"),
+	PINCTRL_PIN(BOOT_17,"BOOT_17"),
+	PINCTRL_PIN(BOOT_18,"BOOT_18"),
+	PINCTRL_PIN(CARD_0,"CARD_0"),
+	PINCTRL_PIN(CARD_1,"CARD_1"),
+	PINCTRL_PIN(CARD_2,"CARD_2"),
+	PINCTRL_PIN(CARD_3,"CARD_3"),
+	PINCTRL_PIN(CARD_4,"CARD_4"),
+	PINCTRL_PIN(CARD_5,"CARD_5"),
+	PINCTRL_PIN(CARD_6,"CARD_6"),
+	PINCTRL_PIN(GPIODV_0,"GPIODV_0"),
+	PINCTRL_PIN(GPIODV_1,"GPIODV_1"),
+	PINCTRL_PIN(GPIODV_2,"GPIODV_2"),
+	PINCTRL_PIN(GPIODV_3,"GPIODV_3"),
+	PINCTRL_PIN(GPIODV_4,"GPIODV_4"),
+	PINCTRL_PIN(GPIODV_5,"GPIODV_5"),
+	PINCTRL_PIN(GPIODV_6,"GPIODV_6"),
+	PINCTRL_PIN(GPIODV_7,"GPIODV_7"),
+	PINCTRL_PIN(GPIODV_8,"GPIODV_8"),
+	PINCTRL_PIN(GPIODV_9,"GPIODV_9"),
+	PINCTRL_PIN(GPIODV_10,"GPIODV_10"),
+	PINCTRL_PIN(GPIODV_11,"GPIODV_11"),
+	PINCTRL_PIN(GPIODV_12,"GPIODV_12"),
+	PINCTRL_PIN(GPIODV_13,"GPIODV_13"),
+	PINCTRL_PIN(GPIODV_14,"GPIODV_14"),
+	PINCTRL_PIN(GPIODV_15,"GPIODV_15"),
+	PINCTRL_PIN(GPIODV_16,"GPIODV_16"),
+	PINCTRL_PIN(GPIODV_17,"GPIODV_17"),
+	PINCTRL_PIN(GPIODV_18,"GPIODV_18"),
+	PINCTRL_PIN(GPIODV_19,"GPIODV_19"),
+	PINCTRL_PIN(GPIODV_20,"GPIODV_20"),
+	PINCTRL_PIN(GPIODV_21,"GPIODV_21"),
+	PINCTRL_PIN(GPIODV_22,"GPIODV_22"),
+	PINCTRL_PIN(GPIODV_23,"GPIODV_23"),
+	PINCTRL_PIN(GPIODV_24,"GPIODV_24"),
+	PINCTRL_PIN(GPIODV_25,"GPIODV_25"),
+	PINCTRL_PIN(GPIODV_26,"GPIODV_26"),
+	PINCTRL_PIN(GPIODV_27,"GPIODV_27"),
+	PINCTRL_PIN(GPIODV_28,"GPIODV_28"),
+	PINCTRL_PIN(GPIODV_29,"GPIODV_29"),
+	PINCTRL_PIN(GPIOY_0,"GPIOY_0"),
+	PINCTRL_PIN(GPIOY_1,"GPIOY_1"),
+	PINCTRL_PIN(GPIOY_2,"GPIOY_2"),
+	PINCTRL_PIN(GPIOY_3,"GPIOY_3"),
+	PINCTRL_PIN(GPIOY_4,"GPIOY_4"),
+	PINCTRL_PIN(GPIOY_5,"GPIOY_5"),
+	PINCTRL_PIN(GPIOY_6,"GPIOY_6"),
+	PINCTRL_PIN(GPIOY_7,"GPIOY_7"),
+	PINCTRL_PIN(GPIOY_8,"GPIOY_8"),
+	PINCTRL_PIN(GPIOY_9,"GPIOY_9"),
+	PINCTRL_PIN(GPIOY_10,"GPIOY_10"),
+	PINCTRL_PIN(GPIOY_11,"GPIOY_11"),
+	PINCTRL_PIN(GPIOY_12,"GPIOY_12"),
+	PINCTRL_PIN(GPIOY_13,"GPIOY_13"),
+	PINCTRL_PIN(GPIOY_14,"GPIOY_14"),
+	PINCTRL_PIN(GPIOY_15,"GPIOY_15"),
+	PINCTRL_PIN(GPIOY_16,"GPIOY_16"),
+	PINCTRL_PIN(GPIOX_0,"GPIOX_0"),
+	PINCTRL_PIN(GPIOX_1,"GPIOX_1"),
+	PINCTRL_PIN(GPIOX_2,"GPIOX_2"),
+	PINCTRL_PIN(GPIOX_3,"GPIOX_3"),
+	PINCTRL_PIN(GPIOX_4,"GPIOX_4"),
+	PINCTRL_PIN(GPIOX_5,"GPIOX_5"),
+	PINCTRL_PIN(GPIOX_6,"GPIOX_6"),
+	PINCTRL_PIN(GPIOX_7,"GPIOX_7"),
+	PINCTRL_PIN(GPIOX_8,"GPIOX_8"),
+	PINCTRL_PIN(GPIOX_9,"GPIOX_9"),
+	PINCTRL_PIN(GPIOX_10,"GPIOX_10"),
+	PINCTRL_PIN(GPIOX_11,"GPIOX_11"),
+	PINCTRL_PIN(GPIOX_12,"GPIOX_12"),
+	PINCTRL_PIN(GPIOX_13,"GPIOX_13"),
+	PINCTRL_PIN(GPIOX_14,"GPIOX_14"),
+	PINCTRL_PIN(GPIOX_15,"GPIOX_15"),
+	PINCTRL_PIN(GPIOX_16,"GPIOX_16"),
+	PINCTRL_PIN(GPIOX_17,"GPIOX_17"),
+	PINCTRL_PIN(GPIOX_18,"GPIOX_18"),
+	PINCTRL_PIN(GPIOX_19,"GPIOX_19"),
+	PINCTRL_PIN(GPIOX_20,"GPIOX_20"),
+	PINCTRL_PIN(GPIOX_21,"GPIOX_21"),
+	PINCTRL_PIN(GPIO_BSD_EN,"GPIO_BSD_EN"),
+	PINCTRL_PIN(GPIO_TEST_N,"GPIO_TEST_N"),
+};
+int m8_pin_to_pullup(unsigned int pin ,unsigned int *reg,unsigned int *bit,unsigned int *bit_en)
+{
+	if(pin<=GPIOAO_13)
+	{
+		*reg=5;
+		*bit=pin+16;
+		*bit_en=pin;
+	}
+	else if (pin<=GPIOZ_14)
+	{
+		*reg=1;
+		*bit=pin-GPIOZ_0;
+		*bit_en=*bit;
+	}
+	else if(pin<=GPIOH_9)
+	{
+		*reg=1;
+		*bit=pin-GPIOH_0+16;
+		*bit_en=*bit;
+	}
+	else if(pin<=BOOT_18)
+	{
+		*reg=2;
+		*bit=pin-BOOT_0;
+		*bit_en=*bit;
+	}
+	else if(pin<=CARD_6)
+	{
+		*reg=2;
+		*bit=pin-CARD_0+20;
+		*bit_en=*bit;
+	}
+	else if(pin<=GPIODV_29)
+	{
+		*reg=0;
+		*bit=pin-GPIODV_0;
+		*bit_en=*bit;
+	}
+	else if(pin<=GPIOY_16)
+	{
+		*reg=3;
+		*bit=pin-GPIOY_0;
+		*bit_en=*bit;
+	}
+	else if(pin<=GPIOX_21)
+	{
+		*reg=4;
+		*bit=pin-GPIOX_0;
+		*bit_en=*bit;
+	}
+	else if(pin<=GPIO_TEST_N)
+	{
+		*reg=5;
+		*bit=pin-GPIO_TEST_N+14;
+		*bit_en=pin-GPIO_TEST_N+30;
+	}
+	else
+		return -1;
+	return 0;
+
+}
+int m8_pin_map_to_direction(unsigned int pin,unsigned int *reg,unsigned int *bit)
+{
+	if(pin<=GPIOAO_13)
+	{
+		*reg=4;
+		*bit=pin;
+	}
+	else if (pin<=GPIOZ_14)
+	{
+		*reg=1;
+		*bit=pin-GPIOZ_0+17;
+	}
+	else if(pin<=GPIOH_9)
+	{
+		*reg=3;
+		*bit=pin-GPIOH_0+19;
+	}
+	else if(pin<=BOOT_18)
+	{
+		*reg=3;
+		*bit=pin-BOOT_0;
+	}
+	else if(pin<=CARD_6)
+	{
+		*reg=0;
+		*bit=pin-CARD_0+22;
+	}
+	else if(pin<=GPIODV_29)
+	{
+		*reg=2;
+		*bit=pin-GPIODV_0;
+	}
+	else if(pin<=GPIOY_16)
+	{
+		*reg=1;
+		*bit=pin-GPIOY_0;
+	}
+	else if(pin<=GPIOX_21)
+	{
+		*reg=0;
+		*bit=pin-GPIOX_0;
+	}
+	//else if(pin<=GPIO_TEST_N)
+	//{
+		//*reg=5;
+		//*bit=pin-GPIO_TEST_N+14;
+	//}
+	else
+		return -1;
+	return 0;
+}
+static int m8_set_pullup(unsigned int pin,unsigned int config)
+{
+	unsigned int reg=0,bit=0,bit_en=0,ret;
+	u16 pullarg = AML_PINCONF_UNPACK_PULL_ARG(config);
+	u16 pullen = AML_PINCONF_UNPACK_PULL_EN(config);
+	ret=m8_pin_to_pullup(pin,&reg,&bit,&bit_en);
+	if(!ret)
+	{
+		if(pullen){
+			if(!ret)
+			{
+				if(pullarg)
+					aml_set_reg32_mask(p_pull_up_addr[reg],1<<bit);
+				else
+					aml_clr_reg32_mask(p_pull_up_addr[reg],1<<bit);
+			}
+			aml_set_reg32_mask(p_pull_upen_addr[reg],1<<bit_en);
+		}
+		else
+			aml_clr_reg32_mask(p_pull_upen_addr[reg],1<<bit_en);
+	}
+	return ret;
+}
+
+static struct amlogic_pinctrl_soc_data m8_pinctrl = {
+	.pins = m8_pads,
+	.npins = ARRAY_SIZE(m8_pads),
+	.meson_set_pullup=m8_set_pullup,
+	.pin_map_to_direction=m8_pin_map_to_direction,
+};
+static struct of_device_id m8_pinctrl_of_table[]=
+{
+	{
+		.compatible="amlogic,pinmux-m8",
+	},
+	{},
+};
+
+static int  m8_pmx_probe(struct platform_device *pdev)
+{
+	return amlogic_pmx_probe(pdev,&m8_pinctrl);
+}
+
+static int  m8_pmx_remove(struct platform_device *pdev)
+{
+	return amlogic_pmx_remove(pdev);
+}
+
+static struct platform_driver m8_pmx_driver = {
+	.driver = {
+		.name = "pinmux-m8",
+		.owner = THIS_MODULE,
+		.of_match_table=of_match_ptr(m8_pinctrl_of_table),
+	},
+	.probe = m8_pmx_probe,
+	.remove = m8_pmx_remove,
+};
+
+static int __init m8_pmx_init(void)
+{
+	return platform_driver_register(&m8_pmx_driver);
+}
+arch_initcall(m8_pmx_init);
+
+static void __exit m8_pmx_exit(void)
+{
+	platform_driver_unregister(&m8_pmx_driver);
+}
+module_exit(m8_pmx_exit);
+MODULE_DESCRIPTION("m8 pin control driver");
+MODULE_LICENSE("GPL v2");
diff --git a/arch/arm/mach-meson8b/pm.c b/arch/arm/mach-meson8b/pm.c
new file mode 100644
index 000000000000..e9bf62ae02cf
--- /dev/null
+++ b/arch/arm/mach-meson8b/pm.c
@@ -0,0 +1,426 @@
+/*
+ * Meson Power Management Routines
+ *
+ * Copyright (C) 2010 Amlogic, Inc. http://www.amlogic.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/pm.h>
+#include <linux/suspend.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/spinlock.h>
+#include <linux/clk.h>
+#include <linux/fs.h>
+
+#include <asm/cacheflush.h>
+#include <asm/delay.h>
+#include <asm/uaccess.h>
+
+#include <mach/pm.h>
+#include <mach/am_regs.h>
+#include <plat/sram.h>
+#include <mach/power_gate.h>
+#include <mach/gpio.h>
+//#include <mach/pctl.h>
+#include <mach/clock.h>
+#include <plat/regops.h>
+#include <plat/io.h>
+
+
+#ifdef CONFIG_SUSPEND_WATCHDOG
+#include <mach/watchdog.h>
+#endif /* CONFIG_SUSPEND_WATCHDOG */
+
+#include <mach/mod_gate.h>
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+static struct early_suspend early_suspend;
+static int early_suspend_flag = 0;
+#endif
+
+#define ON  1
+#define OFF 0
+
+static struct meson_pm_config *pdata;
+
+#define CLK(addr)  \
+{ \
+	.clk_name=#addr, \
+	.clk_addr=addr, \
+	.clk_flag=0, \
+}
+
+struct clk_desc{
+    char* clk_name;
+    unsigned clk_addr;
+    unsigned clk_flag;
+} ;
+
+struct clk_desc clks[] = {
+	CLK(P_HHI_MPEG_CLK_CNTL),
+};
+
+static void uart_change_buad(unsigned reg,unsigned clk_rate){
+	aml_clr_reg32_mask(reg, 0x7FFFFF);
+	aml_set_reg32_bits(reg, (((clk_rate / (115200 * 4)) - 1) & 0x7fffff)|(1<<23), 0, 24);
+}
+static void wait_uart_empty(void)
+{
+	do{
+		udelay(100);
+	}while((aml_read_reg32(P_AO_UART_STATUS) & (1<<22)) == 0);	
+}
+
+void clk_switch(int flag)
+{
+	int i;
+	int clk_count=sizeof(clks)/sizeof(clks[0]);
+	unsigned int uart_rate_clk;
+	if (flag) {
+		for (i = clk_count - 1; i >= 0; i--) {
+			if (clks[i].clk_flag) {
+				if (clks[i].clk_addr == P_HHI_MPEG_CLK_CNTL) {
+					struct clk* sys_clk = clk_get_sys("clk81", NULL);
+					uart_rate_clk = clk_get_rate(sys_clk);
+					wait_uart_empty();
+					aml_set_reg32_mask(clks[i].clk_addr,(1<<7));//gate on pll
+					udelay(10);
+					aml_set_reg32_mask(clks[i].clk_addr,(1<<8));//switch to pll
+					udelay(10);
+					uart_change_buad(P_AO_UART_REG5,uart_rate_clk);
+					clks[i].clk_flag = 0;
+				}
+                	printk(KERN_INFO "clk %s(%x) on\n", clks[i].clk_name, ((clks[i].clk_addr)&0xffff)>>2);
+			}
+		}
+	} else {
+	        for (i = 0; i < clk_count; i++) {
+	 		if (clks[i].clk_addr == P_HHI_MPEG_CLK_CNTL) {
+				if (aml_read_reg32(clks[i].clk_addr) & (1 << 8)) {
+					struct clk* sys_clk = clk_get_sys("xtal", NULL);
+					uart_rate_clk = clk_get_rate(sys_clk);
+					clks[i].clk_flag  = 1;
+					wait_uart_empty();
+					aml_clr_reg32_mask(clks[i].clk_addr, (1 << 8)); // gate off from pll
+					udelay(10);
+					aml_clr_reg32_mask(clks[i].clk_addr, (1 << 7)); // switch to 24M
+					udelay(10);
+					uart_change_buad(P_AO_UART_REG5,uart_rate_clk);
+					clks[i].clk_flag=1;
+				}
+			} 
+			if (clks[i].clk_flag) {
+				printk(KERN_INFO "clk %s(%x) off\n", clks[i].clk_name, ((clks[i].clk_addr)&0xffff)>>2);
+			}
+		}
+	}
+}
+EXPORT_SYMBOL(clk_switch);
+
+
+typedef struct {
+    char name[32];
+    unsigned reg_addr;
+    unsigned set_bits;
+    unsigned clear_bits;
+    unsigned reg_value;
+    unsigned enable; // 1:cbus 2:apb 3:ahb 0:disable
+} analog_t;
+
+// ... Meson8 baby don't have LED_PWM_REG0
+#define ANALOG_COUNT    1
+static analog_t analog_regs[ANALOG_COUNT] = {
+    {"SAR_ADC",             P_SAR_ADC_REG3,       1 << 28, (1 << 30) | (1 << 21),    0,  1},
+};
+/*
+#define ANALOG_COUNT    2
+static analog_t analog_regs[ANALOG_COUNT] = {
+    {"SAR_ADC",             P_SAR_ADC_REG3,       1 << 28, (1 << 30) | (1 << 21),    0,  1},
+#ifdef ADJUST_CORE_VOLTAGE
+    {"LED_PWM_REG0",        P_LED_PWM_REG0,       1 << 13,          1 << 12,              0,  0}, // needed for core voltage adjustment, so not off
+#else
+    {"LED_PWM_REG0",        P_LED_PWM_REG0,       1 << 13,          1 << 12,              0,  1},
+#endif
+};
+*/
+
+void analog_switch(int flag)
+{
+    int i;
+    unsigned reg_value = 0;
+
+    if (flag) {
+        printk(KERN_INFO "analog on\n");
+        aml_set_reg32_mask(P_AM_ANALOG_TOP_REG0, 1 << 1); // set 0x206e bit[1] 1 to power on top analog
+        for (i = 0; i < ANALOG_COUNT; i++) {
+            if (analog_regs[i].enable && (analog_regs[i].set_bits || analog_regs[i].clear_bits)) {
+                if (analog_regs[i].enable == 1) {
+                		aml_write_reg32(analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                } else if (analog_regs[i].enable == 2) {
+                    aml_write_reg32(analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                } else if (analog_regs[i].enable == 3) {
+                    aml_write_reg32(analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                }
+            }
+        }
+    } else {
+        printk(KERN_INFO "analog off\n");
+        for (i = 0; i < ANALOG_COUNT; i++) {
+            if (analog_regs[i].enable && (analog_regs[i].set_bits || analog_regs[i].clear_bits)) {
+                if (analog_regs[i].enable == 1) {
+                    analog_regs[i].reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk("%s(0x%x):0x%x", analog_regs[i].name, analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                    if (analog_regs[i].clear_bits) {
+                        aml_clr_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].clear_bits);
+                        printk(" & ~0x%x", analog_regs[i].clear_bits);
+                    }
+                    if (analog_regs[i].set_bits) {
+                        aml_set_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].set_bits);
+                        printk(" | 0x%x", analog_regs[i].set_bits);
+                    }
+                    reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk(" = 0x%x\n", reg_value);
+                } else if (analog_regs[i].enable == 2) {
+                    analog_regs[i].reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk("%s(0x%x):0x%x", analog_regs[i].name, analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                    if (analog_regs[i].clear_bits) {
+                    		aml_clr_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].clear_bits);
+                        printk(" & ~0x%x", analog_regs[i].clear_bits);
+                    }
+                    if (analog_regs[i].set_bits) {
+                    		aml_set_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].set_bits);
+                        printk(" | 0x%x", analog_regs[i].set_bits);
+                    }
+                    reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk(" = 0x%x\n", reg_value);
+                } else if (analog_regs[i].enable == 3) {
+                    analog_regs[i].reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk("%s(0x%x):0x%x", analog_regs[i].name, analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                    if (analog_regs[i].clear_bits) {
+                        aml_clr_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].clear_bits);
+                        printk(" & ~0x%x", analog_regs[i].clear_bits);
+                    }
+                    if (analog_regs[i].set_bits) {
+                        aml_set_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].set_bits);
+                        printk(" | 0x%x", analog_regs[i].set_bits);
+                    }
+                    reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk(" = 0x%x\n", reg_value);
+                }
+            }
+        }
+        aml_clr_reg32_mask(P_AM_ANALOG_TOP_REG0, 1 << 1); // set 0x206e bit[1] 0 to shutdown top analog
+    }
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void meson_system_early_suspend(struct early_suspend *h)
+{
+	if (!early_suspend_flag) {
+	printk(KERN_INFO "%s\n",__func__);
+	if (pdata->set_exgpio_early_suspend) {
+		pdata->set_exgpio_early_suspend(OFF);
+	}
+		//early_clk_switch(OFF);
+		//early_power_gate_switch(OFF);
+		early_suspend_flag = 1;
+	}
+}
+
+static void meson_system_late_resume(struct early_suspend *h)
+{
+	if (early_suspend_flag) {
+		//early_power_gate_switch(ON);
+		//early_clk_switch(ON);
+		early_suspend_flag = 0;
+		printk(KERN_INFO "%s\n",__func__);
+	}
+}
+#endif
+
+extern int det_pwr_key(void);
+extern void clr_pwr_key(void);
+
+static void meson_pm_suspend(void)
+{
+	printk(KERN_INFO "enter meson_pm_suspend!\n");
+#ifdef CONFIG_SUSPEND_WATCHDOG
+	ENABLE_SUSPEND_WATCHDOG;
+#endif    
+
+	//analog_switch(OFF);
+	 if (pdata->set_vccx2) {
+		pdata->set_vccx2(OFF);
+	}
+
+	clk_switch(OFF);
+	//power_gate_switch(OFF);	
+	//switch_mod_gate_by_type(MOD_MEDIA_CPU, 1);
+	printk(KERN_INFO "sleep ...\n");
+	//switch A9 clock to xtal 24MHz
+	aml_clr_reg32_mask(P_HHI_SYS_CPU_CLK_CNTL, 1 << 7);
+	aml_clr_reg32_mask(P_HHI_SYS_PLL_CNTL, 1 << 30);//disable sys pll
+
+	if(det_pwr_key())//get pwr key and wakeup im
+	{
+		clr_pwr_key();
+		WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x1234abcd);
+	}else{
+#ifdef CONFIG_MESON_SUSPEND
+		meson_power_suspend();
+#else
+#if 0
+		//k101 power key
+		aml_set_reg32_mask(P_AO_GPIO_O_EN_N, (1 << 3));
+		aml_set_reg32_mask(P_AO_RTI_PULL_UP_REG, (1 << 3)|(1<<19));
+		do{
+			udelay(1000);
+		}while((aml_read_reg32(P_AO_GPIO_I)&(1<<3)));
+#endif
+		WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x1234abcd);
+#endif
+	}
+	aml_set_reg32_mask(P_HHI_SYS_PLL_CNTL, (1 << 30)); //enable sys pll
+	printk(KERN_INFO "... wake up\n");
+	WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x1234abcd);
+#if 1
+	if (aml_read_reg32(P_AO_RTC_ADDR1) & (1<<12)) {
+	// Woke from alarm, not power button. Set flag to inform key_input driver.
+		WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, 0x12345678);
+	}
+	// clear RTC interrupt
+	aml_write_reg32((P_AO_RTC_ADDR1),aml_read_reg32(P_AO_RTC_ADDR1)|(0xf000));
+	printk(KERN_INFO "RTCADD3=0x%x\n",aml_read_reg32(P_AO_RTC_ADDR3));
+	if(aml_read_reg32(P_AO_RTC_ADDR3)|(1<<29))
+	{
+		aml_write_reg32((P_AO_RTC_ADDR3),aml_read_reg32(P_AO_RTC_ADDR3)&(~(1<<29)));
+		udelay(1000);
+	}
+	printk(KERN_INFO "RTCADD3=0x%x\n",aml_read_reg32(P_AO_RTC_ADDR3));
+#endif
+	if (pdata->set_vccx2) {
+		pdata->set_vccx2(ON);
+	}
+	wait_uart_empty();
+	aml_set_reg32_mask(P_HHI_SYS_CPU_CLK_CNTL , (1 << 7)); //a9 use pll
+	//switch_mod_gate_by_type(MOD_MEDIA_CPU, 0);
+	//power_gate_switch(ON);
+	clk_switch(ON);
+	//analog_switch(ON);
+}
+
+static int meson_pm_prepare(void)
+{
+	  printk(KERN_INFO "enter meson_pm_prepare!\n");
+	  return 0;
+}
+
+static int meson_pm_enter(suspend_state_t state)
+{
+	int ret = 0;
+	switch (state) {
+	case PM_SUSPEND_STANDBY:
+	case PM_SUSPEND_MEM:
+		meson_pm_suspend();
+		break;
+	default:
+		ret = -EINVAL;
+	}
+	return ret;
+}
+
+static void meson_pm_finish(void)
+{
+    printk(KERN_INFO "enter meson_pm_finish!\n");
+}
+
+static struct platform_suspend_ops meson_pm_ops = {
+    .enter        = meson_pm_enter,
+    .prepare    = meson_pm_prepare,
+    .finish       = meson_pm_finish,
+    .valid        = suspend_valid_only_mem,
+};
+
+static void m6ref_set_vccx2(int power_on)
+{
+    if(power_on == OFF) {
+        printk("m6ref_set_vccx2: OFF");
+        CLEAR_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<15);
+        SET_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<31);
+    } else {
+        printk("m6ref_set_vccx2: ON");
+        CLEAR_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<15);
+        CLEAR_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<31);
+    }
+    return;
+}
+
+static struct meson_pm_config aml_pm_pdata = {
+    .pctl_reg_base = (void *)IO_APB_BUS_BASE,
+    .mmc_reg_base = (void *)APB_REG_ADDR(0x1000),
+    .hiu_reg_base = (void *)CBUS_REG_ADDR(0x1000),
+    .power_key = (1<<8),
+    .ddr_clk = 0x00110820,
+    .sleepcount = 128,
+    .set_vccx2 = m6ref_set_vccx2,
+    .core_voltage_adjust = 7,  //5,8
+};
+
+static int __init meson_pm_probe(struct platform_device *pdev)
+{
+	printk(KERN_INFO "enter meson_pm_probe!\n");
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	early_suspend.level = EARLY_SUSPEND_LEVEL_DISABLE_FB;
+	early_suspend.suspend = meson_system_early_suspend;
+	early_suspend.resume = meson_system_late_resume;
+	register_early_suspend(&early_suspend);
+#endif
+	pdev->dev.platform_data=&aml_pm_pdata;
+	pdata = pdev->dev.platform_data;
+	if (!pdata) {
+		dev_err(&pdev->dev, "cannot get platform data\n");
+		return -ENOENT;
+	}
+	suspend_set_ops(&meson_pm_ops);
+	printk(KERN_INFO "meson_pm_probe done !\n");
+	return 0;
+}
+
+static int __exit meson_pm_remove(struct platform_device *pdev)
+{
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	unregister_early_suspend(&early_suspend);
+#endif
+	return 0;
+}
+#ifdef CONFIG_OF
+static const struct of_device_id amlogic_pm_dt_match[]={
+	{	.compatible = "amlogic,pm-m8",
+	},
+};
+#else
+#define amlogic_nand_dt_match NULL
+#endif
+
+static struct platform_driver meson_pm_driver = {
+	.driver = {
+		.name     = "pm-meson",
+		.owner     = THIS_MODULE,
+		.of_match_table=amlogic_pm_dt_match,
+	},
+	.remove = __exit_p(meson_pm_remove),
+};
+
+static int __init meson_pm_init(void)
+{
+	printk("enter %s\n",__func__);
+	return platform_driver_probe(&meson_pm_driver, meson_pm_probe);
+}
+late_initcall(meson_pm_init);
+
diff --git a/arch/arm/mach-meson8b/power_gate.c b/arch/arm/mach-meson8b/power_gate.c
new file mode 100644
index 000000000000..113752e9c77e
--- /dev/null
+++ b/arch/arm/mach-meson8b/power_gate.c
@@ -0,0 +1,723 @@
+#include <mach/power_gate.h>
+#include <mach/mod_gate.h>
+#include <linux/spinlock_types.h>
+#include <linux/spinlock.h>
+#include <linux/module.h>
+#include <mach/am_regs.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/hardirq.h>
+
+unsigned char GCLK_ref[GCLK_IDX_MAX];
+EXPORT_SYMBOL(GCLK_ref);
+
+//#define PRINT_DEBUG_INFO
+#ifdef PRINT_DEBUG_INFO
+#define PRINT_INFO(...)		printk(__VA_ARGS__)
+#else
+#define PRINT_INFO(...)	
+#endif
+
+typedef struct{
+	const char* name;
+	const mod_type_t type;
+	int ref;
+	int flag;
+	int dc_en;
+	int no_share;
+}mod_record_t;
+
+DEFINE_SPINLOCK(gate_lock);
+
+static mod_record_t mod_records[MOD_MAX_NUM + 1] = {
+	{
+		.name = "vdec",
+		.type = MOD_VDEC,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "audio",
+		.type = MOD_AUDIO,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "hdmi",
+		.type = MOD_HDMI,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "venc",
+		.type = MOD_VENC,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "tcon",
+		.type = MOD_TCON,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+		.no_share = 1,
+	},{
+		.name = "lvds",
+		.type = MOD_LVDS,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+		.no_share = 1,
+	},{
+		.name = "spi",
+		.type = MOD_SPI,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "uart0",
+		.type = MOD_UART0,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "uart1",
+		.type = MOD_UART1,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "uart2",
+		.type = MOD_UART2,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "uart3",
+		.type = MOD_UART3,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "rom",
+		.type = MOD_ROM,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "efuse",
+		.type = MOD_EFUSE,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "random_num_gen",
+		.type = MOD_RANDOM_NUM_GEN,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "ethernet",
+		.type = MOD_ETHERNET,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "media_cpu",
+		.type = MOD_MEDIA_CPU,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "ge2d",
+		.type = MOD_GE2D,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "ahb",
+		.type = MOD_AHB,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "demux",
+		.type = MOD_DEMUX,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "smart_card",
+		.type = MOD_SMART_CARD,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "sdhc",
+		.type = MOD_SDHC,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "stream",
+		.type = MOD_STREAM,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "blk_mov",
+		.type = MOD_BLK_MOV,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "dvin",
+		.type = MOD_MISC_DVIN,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "usb0",
+		.type = MOD_USB0,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "usb1",
+		.type = MOD_USB1,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "sdio",
+		.type = MOD_SDIO,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 1,
+	},{
+		.name = NULL,
+		.type = -1,
+		.ref = -1,
+		.flag = -1,
+		.dc_en = -1,
+	}, //end of the record array
+};
+
+
+static int _switch_gate(mod_type_t type, int flag)
+{
+	int ret = 0;
+	switch(type) {
+	case MOD_VDEC:
+		PRINT_INFO("turn %s vdec module\n", flag?"on":"off");
+		if (flag) {			   
+			//__CLK_GATE_ON(DOS);
+			//aml_set_reg32_mask(P_HHI_VDEC_CLK_CNTL, 1 << 8);
+		} else {
+			//__CLK_GATE_OFF(DOS);
+			//aml_clr_reg32_mask(P_HHI_VDEC_CLK_CNTL, 1 << 8);
+		}
+		break;
+	case MOD_AUDIO:
+		PRINT_INFO("turn %s audio module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(AIU_AI_TOP_GLUE);
+			__CLK_GATE_ON(AIU_IEC958);
+			__CLK_GATE_ON(AIU_I2S_OUT);
+			__CLK_GATE_ON(AIU_AMCLK_MEASURE);
+			__CLK_GATE_ON(AIU_AIFIFO2);
+			__CLK_GATE_ON(AIU_AUD_MIXER);
+			__CLK_GATE_ON(AIU_MIXER_REG);
+			__CLK_GATE_ON(AIU_ADC);
+			__CLK_GATE_ON(AIU_TOP_LEVEL);
+			__CLK_GATE_ON(AIU_PCLK);
+			__CLK_GATE_ON(AIU_AOCLK);
+			__CLK_GATE_ON(AIU_ICE958_AMCLK);
+		} else { 
+			__CLK_GATE_OFF(AIU_AI_TOP_GLUE);
+			__CLK_GATE_OFF(AIU_IEC958);
+			__CLK_GATE_OFF(AIU_I2S_OUT);
+			__CLK_GATE_OFF(AIU_AMCLK_MEASURE);
+			__CLK_GATE_OFF(AIU_AIFIFO2);
+			__CLK_GATE_OFF(AIU_AUD_MIXER);
+			__CLK_GATE_OFF(AIU_MIXER_REG);
+			__CLK_GATE_OFF(AIU_ADC);
+			__CLK_GATE_OFF(AIU_TOP_LEVEL);
+			__CLK_GATE_OFF(AIU_PCLK);
+			__CLK_GATE_OFF(AIU_AOCLK);
+			__CLK_GATE_OFF(AIU_ICE958_AMCLK);
+	  
+		}
+		break;
+	#if 0
+	case MOD_HDMI:
+		PRINT_INFO("turn %s hdmi module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(HDMI_INTR_SYNC);
+			__CLK_GATE_ON(HDMI_RX);
+			__CLK_GATE_ON(HDMI_PCLK);
+		} else {
+			__CLK_GATE_OFF(HDMI_INTR_SYNC);
+			__CLK_GATE_OFF(HDMI_RX);
+			__CLK_GATE_OFF(HDMI_PCLK);
+		}			
+		break;
+	case MOD_VENC:
+		PRINT_INFO("turn %s venc module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(VCLK2_VENCI);
+			__CLK_GATE_ON(VCLK2_VENCI1);
+			__CLK_GATE_ON(VCLK2_VENCP);
+			__CLK_GATE_ON(VCLK2_VENCP1);
+			__CLK_GATE_ON(VCLK2_ENCI);
+			__CLK_GATE_ON(VCLK2_ENCP);
+			__CLK_GATE_ON(VCLK2_VENCT);
+			__CLK_GATE_ON(VCLK2_VENCT1);
+			__CLK_GATE_ON(VCLK2_OTHER);
+			__CLK_GATE_ON(VCLK2_OTHER1);
+			__CLK_GATE_ON(ENC480P);
+			//__CLK_GATE_ON(VENC_DAC);
+			__CLK_GATE_ON(DAC_CLK);
+		} else {
+			__CLK_GATE_OFF(VCLK2_VENCI);
+			__CLK_GATE_OFF(VCLK2_VENCI1);
+			__CLK_GATE_OFF(VCLK2_VENCP);
+		#ifndef CONFIG_MACH_MESON6_G02_DONGLE
+			__CLK_GATE_OFF(VCLK2_VENCP1);
+		#endif	 
+		
+			__CLK_GATE_OFF(VCLK2_ENCI);
+		#ifndef CONFIG_MACH_MESON6_G02_DONGLE	  
+			__CLK_GATE_OFF(VCLK2_ENCP);
+		#endif
+			__CLK_GATE_OFF(VCLK2_VENCT);
+			__CLK_GATE_OFF(VCLK2_VENCT1);
+			__CLK_GATE_OFF(VCLK2_OTHER);
+			__CLK_GATE_OFF(VCLK2_OTHER1);
+			__CLK_GATE_OFF(ENC480P);
+			__CLK_GATE_OFF(DAC_CLK);
+		}
+		break;
+	case MOD_TCON:
+		PRINT_INFO("turn %s tcon module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(VCLK2_ENCT);
+		} else {
+			__CLK_GATE_OFF(VCLK2_ENCT);
+		}
+		break;
+	case MOD_LVDS:
+		PRINT_INFO("turn %s lvds module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(VCLK2_ENCL);
+		} else {
+			__CLK_GATE_OFF(VCLK2_ENCL);
+		}
+		break;
+	#endif
+	case MOD_SPI:
+		PRINT_INFO("turn %s spi module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(SPICC);
+			__CLK_GATE_ON(SPI);
+		} else {
+			__CLK_GATE_OFF(SPICC);
+			__CLK_GATE_OFF(SPI);
+		}
+		break;
+	case MOD_UART0:
+		PRINT_INFO("turn %s uart0 module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(UART0);
+		} else {
+			__CLK_GATE_OFF(UART0);
+		}
+		break;
+	case MOD_UART1:
+		PRINT_INFO("turn %s uart1 module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(UART1);
+		} else {
+			__CLK_GATE_OFF(UART1);
+		}
+		break;
+	case MOD_UART2:
+		PRINT_INFO("turn %s uart2 module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(UART2);
+		} else {
+			__CLK_GATE_OFF(UART2);
+		}
+		break;
+	case MOD_UART3:
+		PRINT_INFO("turn %s uart3 module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(UART3);
+		} else {
+			__CLK_GATE_OFF(UART3);
+		}
+		break;
+	case MOD_ROM:
+		PRINT_INFO("turn %s rom module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(ROM_CLK);
+		} else {
+			__CLK_GATE_OFF(ROM_CLK);
+		}
+		break;
+	case MOD_EFUSE:
+		PRINT_INFO("turn %s efuse module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(EFUSE);
+		} else {
+			__CLK_GATE_OFF(EFUSE);
+		}
+		break;
+	case MOD_RANDOM_NUM_GEN:
+		PRINT_INFO("turn %s random_num_gen module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(RANDOM_NUM_GEN);
+		} else {
+			__CLK_GATE_OFF(RANDOM_NUM_GEN);
+		}
+		break;
+	case MOD_ETHERNET:
+		PRINT_INFO("turn %s ethernet module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(ETHERNET);
+		} else {
+			__CLK_GATE_OFF(ETHERNET);
+		}
+		break;
+	case MOD_MEDIA_CPU:
+		PRINT_INFO("trun %s Audio DSP\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(MEDIA_CPU);
+		}else{
+			 __CLK_GATE_OFF(MEDIA_CPU);
+		}
+		break;
+	case MOD_GE2D:
+		PRINT_INFO("trun %s GE2D\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(GE2D);
+		}else{
+			__CLK_GATE_OFF(GE2D);
+		}
+		break;
+	case MOD_AHB:
+		PRINT_INFO("trun %s ahb\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(AHB_ARB0);
+			__CLK_GATE_ON(AHB_BRIDGE);
+			__CLK_GATE_ON(AHB_DATA_BUS);
+			__CLK_GATE_ON(AHB_CONTROL_BUS);
+		}else{
+			__CLK_GATE_OFF(AHB_ARB0);
+			__CLK_GATE_OFF(AHB_BRIDGE);
+			__CLK_GATE_OFF(AHB_DATA_BUS);
+			__CLK_GATE_OFF(AHB_CONTROL_BUS);
+		}
+		break;
+	case MOD_DEMUX:
+		PRINT_INFO("trun %s demux\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(DEMUX);
+		}else{
+			__CLK_GATE_OFF(DEMUX);
+		}
+		break;
+	case MOD_SMART_CARD:
+		PRINT_INFO("trun %s smart card\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(SMART_CARD_MPEG_DOMAIN);
+		}else{
+			__CLK_GATE_OFF(SMART_CARD_MPEG_DOMAIN);
+		}
+		break;
+	case MOD_SDHC:
+		PRINT_INFO("trun %s sdhc\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(SDHC);
+		}else{
+			__CLK_GATE_OFF(SDHC);
+		}
+		break;
+	case MOD_STREAM:
+		PRINT_INFO("trun %s stream\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(STREAM);
+		}else{
+			__CLK_GATE_OFF(STREAM);
+		}
+		break;
+	case MOD_BLK_MOV:
+		PRINT_INFO("trun %s blk_mov\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(BLK_MOV);
+		}else{
+			__CLK_GATE_OFF(BLK_MOV);
+		}
+		break;
+	case MOD_MISC_DVIN:
+		PRINT_INFO("trun %s dvin\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(MISC_DVIN);
+		}else{
+			__CLK_GATE_OFF(MISC_DVIN);
+		}
+		break;
+	case MOD_USB0:
+		PRINT_INFO("trun %s rdma\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(USB_GENERAL);
+			__CLK_GATE_ON(USB0);
+			__CLK_GATE_ON(MISC_USB0_TO_DDR);
+		}else{
+			__CLK_GATE_OFF(USB0);
+			__CLK_GATE_OFF(MISC_USB0_TO_DDR);
+			__CLK_GATE_OFF(USB_GENERAL);
+		}
+		break;
+	case MOD_USB1:
+		PRINT_INFO("trun %s rdma\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(USB_GENERAL);
+			__CLK_GATE_ON(USB1);
+			__CLK_GATE_ON(MISC_USB1_TO_DDR);
+		}else{
+			__CLK_GATE_OFF(USB1);
+			__CLK_GATE_ON(MISC_USB1_TO_DDR);
+			__CLK_GATE_OFF(USB_GENERAL);
+		}
+		break;
+	case MOD_SDIO:
+		PRINT_INFO("trun %s rdma\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(SDIO);
+		}else{
+			__CLK_GATE_OFF(SDIO);
+		}
+		break;
+	default:
+		PRINT_INFO("mod type not support\n");
+		ret = -1;
+		break;
+	}
+	return ret;
+}
+
+static int get_mod(mod_record_t* mod_record)
+{
+	int ret = 0;
+	unsigned long flags;
+	PRINT_INFO("get mod  %s\n", mod_record->name);
+	spin_lock_irqsave(&gate_lock, flags);
+	ret = _switch_gate(mod_record->type, 1);
+	spin_unlock_irqrestore(&gate_lock, flags);
+	return ret;
+}
+
+static int put_mod(mod_record_t* mod_record)
+{
+	int ret = 0;
+	unsigned long flags;
+	PRINT_INFO("put mod  %s\n", mod_record->name);
+	spin_lock_irqsave(&gate_lock, flags);
+	ret = _switch_gate(mod_record->type, 0); 
+	spin_unlock_irqrestore(&gate_lock, flags);
+	return ret;
+}
+
+void switch_mod_gate_by_type(mod_type_t type, int flag)
+{
+	if (flag)
+		get_mod(&mod_records[type]);
+	else
+		put_mod(&mod_records[type]);
+}
+EXPORT_SYMBOL(switch_mod_gate_by_type);
+
+void switch_mod_gate_by_name(const char* mod_name, int flag)
+{
+	int i = 0;
+	//PRINT_INFO("arg mod_name is %s\n", mod_name);
+	while(mod_records[i].name && i < MOD_MAX_NUM) {
+		//PRINT_INFO("mod%d name is %s\n", i, mod_records[i].name);
+		if (!strncmp(mod_name, mod_records[i].name, strlen(mod_name))) {
+			if (flag)
+				get_mod(&mod_records[i]);
+			else
+				put_mod(&mod_records[i]);
+			break;
+		}
+		i++;
+	}
+}
+EXPORT_SYMBOL(switch_mod_gate_by_name);
+
+void power_gate_init(void)
+{
+	GATE_INIT(DDR);
+	GATE_INIT(DOS);
+	GATE_INIT(AHB_BRIDGE);
+	GATE_INIT(ISA);
+	GATE_INIT(PL310_CBUS);
+	GATE_INIT(_1200XXX);
+	GATE_INIT(SPICC);
+	GATE_INIT(I2C);
+	GATE_INIT(SAR_ADC);
+	GATE_INIT(SMART_CARD_MPEG_DOMAIN);
+	GATE_INIT(RANDOM_NUM_GEN);
+	GATE_INIT(UART0);
+	GATE_INIT(SDHC);
+	GATE_INIT(STREAM);
+	GATE_INIT(ASYNC_FIFO);
+	GATE_INIT(SDIO);
+	GATE_INIT(AUD_BUF);
+	GATE_INIT(HIU_PARSER);
+	GATE_INIT(HDMI_RX);
+	GATE_INIT(ASSIST_MISC);
+	GATE_INIT(SPI);
+	GATE_INIT(AUD_IN);
+	GATE_INIT(ETHERNET);
+	GATE_INIT(DEMUX);
+	GATE_INIT(AIU_AI_TOP_GLUE);
+	GATE_INIT(AIU_IEC958);
+	GATE_INIT(AIU_I2S_OUT);
+	GATE_INIT(AIU_AMCLK_MEASURE);
+	GATE_INIT(AIU_AIFIFO2);
+	GATE_INIT(AIU_AUD_MIXER);
+	GATE_INIT(AIU_MIXER_REG);
+	GATE_INIT(AIU_ADC);
+	GATE_INIT(BLK_MOV);
+	GATE_INIT(AIU_TOP_LEVEL);
+	GATE_INIT(UART1);
+	GATE_INIT(CSI_DIG_CLKIN);
+	GATE_INIT(GE2D);
+	GATE_INIT(USB0);
+	GATE_INIT(USB1);
+	GATE_INIT(RESET);
+	GATE_INIT(NAND);
+	GATE_INIT(HIU_PARSER_TOP);
+	GATE_INIT(USB_GENERAL);
+	GATE_INIT(AHB_ARB0);
+	GATE_INIT(EFUSE);
+	GATE_INIT(ROM_CLK);
+	GATE_INIT(AHB_DATA_BUS);
+	GATE_INIT(AHB_CONTROL_BUS);
+	GATE_INIT(HDMI_INTR_SYNC);
+	GATE_INIT(HDMI_PCLK);
+	GATE_INIT(MISC_USB1_TO_DDR);
+	GATE_INIT(MISC_USB0_TO_DDR);
+	GATE_INIT(AIU_PCLK);
+	GATE_INIT(MMC_PCLK);
+	GATE_INIT(MISC_DVIN);
+	GATE_INIT(UART2);
+	GATE_INIT(UART3);
+	GATE_INIT(VPU_INTR);
+	GATE_INIT(SECURE_AHP_APB3);
+	GATE_INIT(CLK81_TO_A9);
+	GATE_INIT(VCLK2_VENCI);
+	GATE_INIT(VCLK2_VENCI1);
+	GATE_INIT(VCLK2_VENCP);
+	GATE_INIT(VCLK2_VENCP1);
+	GATE_INIT(VCLK2_VENCT);
+	GATE_INIT(VCLK2_VENCT1);
+	GATE_INIT(VCLK2_OTHER);
+	GATE_INIT(VCLK2_ENCI);
+	GATE_INIT(VCLK2_ENCP);
+	GATE_INIT(DAC_CLK);
+	GATE_INIT(AIU_AOCLK);
+	GATE_INIT(AIU_ICE958_AMCLK);
+	GATE_INIT(ENC480P);
+	GATE_INIT(RANDOM_NUM_GEN1);
+	GATE_INIT(VCLK2_ENCT);
+	GATE_INIT(VCLK2_ENCL);
+	GATE_INIT(MMC_CLK);
+	GATE_INIT(VCLK2_VENCL);
+	GATE_INIT(VCLK2_OTHER1);
+	GATE_INIT(EDP_CLK);
+	GATE_INIT(MEDIA_CPU);
+}
+
+#if 1 //disable sysfs interface.
+
+static struct class* mod_gate_clsp;
+
+static ssize_t store_mod_on(struct class* class, struct class_attribute* attr,
+   const char* buf, size_t count )
+{
+	#if 0
+	char tmp_str[32];
+	memset(tmp_str, 0, 32);
+	strncpy(tmp_str, buf, 32);
+	while(tmp_str[0] && tmp_str[strlen(tmp_str)-1] < 33 )
+	tmp_str[strlen(tmp_str)-1] = 0;
+	//switch_mod_gate_by_name(tmp_str, 1);
+	#endif
+	return count;
+}
+
+static ssize_t store_mod_off(struct class* class, struct class_attribute* attr,
+   const char* buf, size_t count )
+{
+	#if 0
+	char tmp_str[32];
+	memset(tmp_str, 0, 32);
+	strncpy(tmp_str, buf, 32);
+	while(tmp_str[0] && tmp_str[strlen(tmp_str)-1] < 33 )
+		tmp_str[strlen(tmp_str)-1] = 0;
+	switch_mod_gate_by_name(tmp_str, 0);
+	#endif
+	return count;
+}
+
+static struct class_attribute aml_mod_attrs[]={
+	__ATTR(mod_on,  S_IRUGO | S_IWUSR, NULL, store_mod_on),
+	__ATTR(mod_off,  S_IRUGO | S_IWUSR, NULL, store_mod_off),
+	__ATTR_NULL,
+};
+
+static int __init mode_gate_mgr_init(void)
+{
+	int ret = 0, i = 0;
+	power_gate_init();
+	mod_gate_clsp = class_create(THIS_MODULE, "aml_mod");
+	if(IS_ERR(mod_gate_clsp)){
+		ret = PTR_ERR(mod_gate_clsp);
+		return ret;
+	}
+	for(i = 0; aml_mod_attrs[i].attr.name; i++){
+		if(class_create_file(mod_gate_clsp, &aml_mod_attrs[i]) < 0)
+			goto err;
+	}
+	return 0;
+err:
+	for(i=0; aml_mod_attrs[i].attr.name; i++){
+		class_remove_file(mod_gate_clsp, &aml_mod_attrs[i]);
+	}
+	class_destroy(mod_gate_clsp); 
+	return -1;  
+}
+arch_initcall(mode_gate_mgr_init);
+#endif
+
+int  video_dac_enable(unsigned char enable_mask)
+{
+    //switch_mod_gate_by_name("venc", 1);
+    //CLEAR_CBUS_REG_MASK(VENC_VDAC_SETTING, enable_mask & 0x1f);
+    return 0;
+}
+EXPORT_SYMBOL(video_dac_enable);
+
+int  video_dac_disable()
+{
+    //SET_CBUS_REG_MASK(VENC_VDAC_SETTING, 0x1f);
+    //switch_mod_gate_by_name("venc", 0);
+  
+    return 0;
+}
+EXPORT_SYMBOL(video_dac_disable);
+
+
diff --git a/arch/arm/mach-meson8b/power_suspend.c b/arch/arm/mach-meson8b/power_suspend.c
new file mode 100644
index 000000000000..274f23e23c2e
--- /dev/null
+++ b/arch/arm/mach-meson8b/power_suspend.c
@@ -0,0 +1,126 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/mm.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/dma-mapping.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/mtd/nand_ecc.h>
+#include <linux/mtd/partitions.h>
+#include <linux/device.h>
+#include <linux/spi/flash.h>
+#include <mach/hardware.h>
+#include <plat/platform.h>
+#include <mach/memory.h>
+#include <mach/clock.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/setup.h>
+//#include <mach/lm.h>
+#include <asm/memory.h>
+#include <asm/mach/map.h>
+//#include <mach/nand.h>
+#include <linux/i2c.h>
+#include <linux/i2c-aml.h>
+#include <mach/power_gate.h>
+//#include <linux/aml_bl.h>
+#include <linux/delay.h>
+#include <mach/usbclock.h>
+#include <mach/am_regs.h>
+#include <linux/file.h>
+#include <asm/cacheflush.h>
+#include <plat/regops.h>
+#include <linux/reboot.h>
+#ifdef CONFIG_SUSPEND_WATCHDOG
+#include <mach/watchdog.h>
+#endif /* CONFIG_SUSPEND_WATCHDOG */
+
+//appf functions
+#define APPF_INITIALIZE             0
+#define APPF_POWER_DOWN_CPU         1
+#define APPF_POWER_UP_CPUS          2
+//appf flags
+#define APPF_SAVE_PMU          (1<<0)
+#define APPF_SAVE_TIMERS       (1<<1)
+#define APPF_SAVE_VFP          (1<<2)
+#define APPF_SAVE_DEBUG        (1<<3)
+#define APPF_SAVE_L2           (1<<4)
+
+/******************
+***You need sync this param struct with arc_pwr.h is suspend firmware.
+***1st word is used for arc output control: serial_disable.
+***2nd word...
+***
+***If you need transfer more params, you need sync the struck define in arc_pwr.h
+*******************/
+#define PARAM_ADDR             (IO_SRAM_BASE + 0x10200)
+
+unsigned int arc_serial_disable;
+
+
+#if 0
+#ifdef CONFIG_HARDWARE_WATCHDOG
+void disable_watchdog(void)
+{
+	printk(KERN_INFO "** disable watchdog\n");
+    aml_write_reg32(P_WATCHDOG_RESET, 0);
+    aml_clr_reg32_mask(P_WATCHDOG_TC,(1 << WATCHDOG_ENABLE_BIT));
+}
+void enable_watchdog(void)
+{
+	printk(KERN_INFO "** enable watchdog\n");
+    aml_write_reg32(P_WATCHDOG_RESET, 0);
+    aml_write_reg32(P_WATCHDOG_TC, 1 << WATCHDOG_ENABLE_BIT | 0x1FFFFF);//about 20sec
+    
+    aml_write_reg32(P_AO_RTI_STATUS_REG1, MESON_NORMAL_BOOT);
+}
+void reset_watchdog(void)
+{
+	//printk(KERN_INFO "** reset watchdog\n");
+    aml_write_reg32(P_WATCHDOG_RESET, 0);	
+}
+#endif /* CONFIG_HARDWARE_WATCHDOG */
+#endif
+
+static void check_in_param(void)
+{
+	unsigned int p_addr;
+
+	p_addr = PARAM_ADDR;
+	*((unsigned int *)p_addr) = arc_serial_disable;
+
+	return;
+}
+
+int meson_power_suspend(void)
+{
+	static int test_flag = 0;
+	unsigned addr;
+	unsigned p_addr;
+	void	(*pwrtest_entry)(unsigned,unsigned,unsigned,unsigned);
+
+	check_in_param();
+	flush_cache_all();
+
+	addr = 0x04F04400;//entry.s start
+	p_addr = (unsigned)__phys_to_virt(addr);
+	pwrtest_entry = (void (*)(unsigned,unsigned,unsigned,unsigned))p_addr;
+	if(test_flag != 1234){
+		test_flag = 1234;
+		printk("initial appf\n");
+		pwrtest_entry(APPF_INITIALIZE,0,0,IO_PL310_BASE & 0xffff0000);
+	}
+#ifdef CONFIG_SUSPEND_WATCHDOG
+	DISABLE_SUSPEND_WATCHDOG;
+#endif
+	printk("power down cpu --\n");
+	pwrtest_entry(APPF_POWER_DOWN_CPU,0,0,APPF_SAVE_PMU|APPF_SAVE_VFP|APPF_SAVE_L2 |( IO_PL310_BASE & 0xffff0000));
+#ifdef CONFIG_SUSPEND_WATCHDOG
+	ENABLE_SUSPEND_WATCHDOG;
+#endif
+	return 0;
+}
diff --git a/arch/arm/mach-meson8b/sd_pad.c b/arch/arm/mach-meson8b/sd_pad.c
new file mode 100644
index 000000000000..75d52338169b
--- /dev/null
+++ b/arch/arm/mach-meson8b/sd_pad.c
@@ -0,0 +1,358 @@
+#include <mach/card_io.h>
+#include <linux/cardreader/card_block.h>
+#include <linux/cardreader/cardreader.h>
+#include <plat/regops.h>
+#include <mach/pinmux.h>
+#include <linux/pinctrl/consumer.h>
+static unsigned sd_backup_input_val = 0;
+static unsigned sd_backup_output_val = 0;
+static unsigned SD_BAKUP_INPUT_REG = (unsigned)&sd_backup_input_val;
+static unsigned SD_BAKUP_OUTPUT_REG = (unsigned)&sd_backup_output_val;
+
+unsigned SD_CMD_OUTPUT_EN_REG;
+unsigned SD_CMD_OUTPUT_EN_MASK;
+unsigned SD_CMD_INPUT_REG;
+unsigned SD_CMD_INPUT_MASK;
+unsigned SD_CMD_OUTPUT_REG;
+unsigned SD_CMD_OUTPUT_MASK;
+
+unsigned SD_CLK_OUTPUT_EN_REG;
+unsigned SD_CLK_OUTPUT_EN_MASK;
+unsigned SD_CLK_OUTPUT_REG;
+unsigned SD_CLK_OUTPUT_MASK;
+
+unsigned SD_DAT_OUTPUT_EN_REG;
+unsigned SD_DAT0_OUTPUT_EN_MASK;
+unsigned SD_DAT0_3_OUTPUT_EN_MASK;
+unsigned SD_DAT_INPUT_REG;
+unsigned SD_DAT_OUTPUT_REG;
+unsigned SD_DAT0_INPUT_MASK;
+unsigned SD_DAT0_OUTPUT_MASK;
+unsigned SD_DAT0_3_INPUT_MASK;
+unsigned SD_DAT0_3_OUTPUT_MASK;
+unsigned SD_DAT_INPUT_OFFSET;
+unsigned SD_DAT_OUTPUT_OFFSET;
+
+unsigned SD_INS_OUTPUT_EN_REG;
+unsigned SD_INS_OUTPUT_EN_MASK;
+unsigned SD_INS_INPUT_REG;
+unsigned SD_INS_INPUT_MASK;
+
+unsigned SD_WP_OUTPUT_EN_REG;
+unsigned SD_WP_OUTPUT_EN_MASK;
+unsigned SD_WP_INPUT_REG;
+unsigned SD_WP_INPUT_MASK;
+
+unsigned SD_PWR_OUTPUT_EN_REG;
+unsigned SD_PWR_OUTPUT_EN_MASK;
+unsigned SD_PWR_OUTPUT_REG;
+unsigned SD_PWR_OUTPUT_MASK;
+unsigned SD_PWR_EN_LEVEL;
+
+unsigned SD_WORK_MODE;
+
+extern int using_sdxc_controller;
+void sd_io_init(struct memory_card *card)
+{
+	struct aml_card_info *aml_card_info = card->card_plat_info;
+	SD_WORK_MODE = aml_card_info->work_mode;
+
+	switch (aml_card_info->io_pad_type) {
+		
+		case SDHC_CARD_0_5:		//SDHC-B
+			SD_CMD_OUTPUT_EN_REG = CARD_GPIO_ENABLE;
+			SD_CMD_OUTPUT_EN_MASK = PREG_IO_25_MASK;
+			SD_CMD_OUTPUT_REG = CARD_GPIO_OUTPUT;
+			SD_CMD_OUTPUT_MASK = PREG_IO_25_MASK;
+			SD_CMD_INPUT_REG = CARD_GPIO_INPUT;
+			SD_CMD_INPUT_MASK = PREG_IO_25_MASK;
+
+			SD_CLK_OUTPUT_EN_REG = CARD_GPIO_ENABLE;
+			SD_CLK_OUTPUT_EN_MASK = PREG_IO_24_MASK;
+			SD_CLK_OUTPUT_REG = CARD_GPIO_OUTPUT;
+			SD_CLK_OUTPUT_MASK = PREG_IO_24_MASK;
+
+			SD_DAT_OUTPUT_EN_REG = CARD_GPIO_ENABLE;
+			SD_DAT0_OUTPUT_EN_MASK = PREG_IO_23_MASK;
+			SD_DAT0_3_OUTPUT_EN_MASK = PREG_IO_2223_2627_MASK;
+
+			SD_DAT_OUTPUT_REG = CARD_GPIO_OUTPUT;
+			SD_DAT0_OUTPUT_MASK = PREG_IO_23_MASK;
+			SD_DAT0_3_OUTPUT_MASK = PREG_IO_2223_2627_MASK;
+			SD_DAT_OUTPUT_OFFSET = 23;
+			
+			SD_DAT_INPUT_REG = CARD_GPIO_INPUT;
+			SD_DAT0_INPUT_MASK = PREG_IO_23_MASK;
+			SD_DAT0_3_INPUT_MASK = PREG_IO_2223_2627_MASK;
+			SD_DAT_INPUT_OFFSET = 23;
+			break;
+
+		case SDHC_BOOT_0_11:		//SDHC-C
+			SD_CMD_OUTPUT_EN_REG = BOOT_GPIO_ENABLE;
+			SD_CMD_OUTPUT_EN_MASK = PREG_IO_16_MASK;
+			SD_CMD_OUTPUT_REG = BOOT_GPIO_OUTPUT;
+			SD_CMD_OUTPUT_MASK = PREG_IO_16_MASK;
+			SD_CMD_INPUT_REG = BOOT_GPIO_INPUT;
+			SD_CMD_INPUT_MASK = PREG_IO_16_MASK;
+
+			SD_CLK_OUTPUT_EN_REG = BOOT_GPIO_ENABLE;
+			SD_CLK_OUTPUT_EN_MASK = PREG_IO_17_MASK;
+			SD_CLK_OUTPUT_REG = BOOT_GPIO_OUTPUT;
+			SD_CLK_OUTPUT_MASK = PREG_IO_17_MASK;
+
+			SD_DAT_OUTPUT_EN_REG = BOOT_GPIO_ENABLE;
+			SD_DAT0_OUTPUT_EN_MASK = PREG_IO_0_MASK;
+			SD_DAT0_3_OUTPUT_EN_MASK = PREG_IO_0_3_MASK;
+			
+			SD_DAT_OUTPUT_REG = BOOT_GPIO_OUTPUT;
+			SD_DAT0_OUTPUT_MASK = PREG_IO_0_MASK;
+			SD_DAT0_3_OUTPUT_MASK = PREG_IO_0_3_MASK;
+			SD_DAT_OUTPUT_OFFSET = 0;
+			
+			SD_DAT_INPUT_REG = BOOT_GPIO_INPUT;
+			SD_DAT0_INPUT_MASK = PREG_IO_0_MASK;
+			SD_DAT0_3_INPUT_MASK = PREG_IO_0_3_MASK;
+			SD_DAT_INPUT_OFFSET = 0;
+			break;
+            
+        case SDHC_GPIOX_0_9:        //SDHC-A
+            SD_CMD_OUTPUT_EN_REG = EGPIO_GPIOXL_ENABLE;
+            SD_CMD_OUTPUT_EN_MASK = PREG_IO_9_MASK;
+            SD_CMD_OUTPUT_REG = EGPIO_GPIOXL_OUTPUT;
+            SD_CMD_OUTPUT_MASK = PREG_IO_9_MASK;
+            SD_CMD_INPUT_REG = EGPIO_GPIOXL_INPUT;
+            SD_CMD_INPUT_MASK = PREG_IO_9_MASK;
+        
+            SD_CLK_OUTPUT_EN_REG = EGPIO_GPIOXL_ENABLE;
+            SD_CLK_OUTPUT_EN_MASK = PREG_IO_8_MASK;
+            SD_CLK_OUTPUT_REG = EGPIO_GPIOXL_OUTPUT;
+            SD_CLK_OUTPUT_MASK = PREG_IO_8_MASK;
+        
+            SD_DAT_OUTPUT_EN_REG = EGPIO_GPIOXL_ENABLE;
+            SD_DAT0_OUTPUT_EN_MASK = PREG_IO_0_MASK;
+            SD_DAT0_3_OUTPUT_EN_MASK = PREG_IO_0_3_MASK;
+            
+            SD_DAT_OUTPUT_REG = EGPIO_GPIOXL_OUTPUT;
+            SD_DAT0_OUTPUT_MASK = PREG_IO_0_MASK;
+            SD_DAT0_3_OUTPUT_MASK = PREG_IO_0_3_MASK;
+            SD_DAT_OUTPUT_OFFSET = 0;
+            
+            SD_DAT_INPUT_REG = EGPIO_GPIOXL_INPUT;
+            SD_DAT0_INPUT_MASK = PREG_IO_0_MASK;
+            SD_DAT0_3_INPUT_MASK = PREG_IO_0_3_MASK;
+            SD_DAT_INPUT_OFFSET = 0;
+            break;
+
+        default:
+			printk("Warning couldn`t find any valid hw io pad!!!\n");
+            break;
+	}
+
+	if (aml_card_info->card_ins_en_reg) {
+		SD_INS_OUTPUT_EN_REG = aml_card_info->card_ins_en_reg;
+		SD_INS_OUTPUT_EN_MASK = aml_card_info->card_ins_en_mask;
+		SD_INS_INPUT_REG = aml_card_info->card_ins_input_reg;
+		SD_INS_INPUT_MASK = aml_card_info->card_ins_input_mask;
+	}
+	else {
+		SD_INS_OUTPUT_EN_REG = SD_BAKUP_OUTPUT_REG;
+		SD_INS_OUTPUT_EN_MASK = 1;
+		SD_INS_INPUT_REG = SD_BAKUP_INPUT_REG;
+		SD_INS_INPUT_MASK =
+		SD_WP_INPUT_MASK = 1;
+	}
+
+	if (aml_card_info->card_power_en_reg) {
+		SD_PWR_OUTPUT_EN_REG = aml_card_info->card_power_en_reg;
+		SD_PWR_OUTPUT_EN_MASK = aml_card_info->card_power_en_mask;
+		SD_PWR_OUTPUT_REG = aml_card_info->card_power_output_reg;
+		SD_PWR_OUTPUT_MASK = aml_card_info->card_power_output_mask;
+		SD_PWR_EN_LEVEL = aml_card_info->card_power_en_lev;
+	}
+	else {
+		SD_PWR_OUTPUT_EN_REG = SD_BAKUP_OUTPUT_REG;
+		SD_PWR_OUTPUT_EN_MASK = 1;
+		SD_PWR_OUTPUT_REG = SD_BAKUP_OUTPUT_REG;
+		SD_PWR_OUTPUT_MASK = 1;
+		SD_PWR_EN_LEVEL = 0;	
+	}
+
+	if (aml_card_info->card_wp_en_reg) {
+		SD_WP_OUTPUT_EN_REG = aml_card_info->card_wp_en_reg;
+		SD_WP_OUTPUT_EN_MASK = aml_card_info->card_wp_en_mask;
+		SD_WP_INPUT_REG = aml_card_info->card_wp_input_reg;
+		SD_WP_INPUT_MASK = aml_card_info->card_wp_input_mask;
+	}
+	else {
+		SD_WP_OUTPUT_EN_REG = SD_BAKUP_OUTPUT_REG;
+		SD_WP_OUTPUT_EN_MASK = 1;
+		SD_WP_INPUT_REG = SD_BAKUP_INPUT_REG;
+		SD_WP_INPUT_MASK = 1;
+	}
+
+	return;
+}
+
+#ifndef CONFIG_OF
+//do nothing
+static bool card_pinmux_dummy(bool flag)
+{
+	return 1;
+}
+
+static pinmux_item_t SDHC_CARD_0_5_pins[] = {
+    {
+        .reg = PINMUX_REG(2),
+        .setmask = 0x3f << 10,
+    },
+    PINMUX_END_ITEM
+};
+static pinmux_set_t SDHC_CARD_0_5_set = {
+    .chip_select = card_pinmux_dummy,
+    .pinmux = &SDHC_CARD_0_5_pins[0]
+};
+
+
+static pinmux_item_t SDHC_BOOT_0_11_pins[] = {
+    {
+        .reg = PINMUX_REG(6),
+        .setmask = 0x3F<<24,
+    },
+    PINMUX_END_ITEM
+};
+static pinmux_set_t SDHC_BOOT_0_11_set = {
+    .chip_select = card_pinmux_dummy,
+    .pinmux = &SDHC_BOOT_0_11_pins[0]
+};
+
+
+static pinmux_item_t SDHC_GPIOX_0_9_pins[] = {
+    {
+        .reg = PINMUX_REG(8),
+        .setmask = 0x3f,
+    },
+    PINMUX_END_ITEM
+};
+static pinmux_set_t SDHC_GPIOX_0_9_set = {
+    .chip_select = card_pinmux_dummy,
+    .pinmux = &SDHC_GPIOX_0_9_pins[0]
+};
+#endif
+
+static struct pinctrl *p=NULL;
+extern struct device *card_dev;
+void sd_sdio_enable(SDIO_Pad_Type_t io_pad_type)
+{
+	struct pinctrl_state *s;
+	int ret;
+	if(!p){
+		p=devm_pinctrl_get(card_dev);
+		if(IS_ERR(p))
+			printk("set pinmux error!\n");
+	}
+	switch (io_pad_type) {
+		
+		case SDHC_CARD_0_5 :	//SDHC-B
+#ifdef CONFIG_OF
+			s = pinctrl_lookup_state(p, "sdhc_b");
+			if (IS_ERR(s)) {
+				devm_pinctrl_put(p);
+				p=NULL;
+			}
+			ret = pinctrl_select_state(p, s);
+			if (ret < 0) {
+				devm_pinctrl_put(p);
+				p=NULL;
+			}
+#else
+			pinmux_set(&SDHC_CARD_0_5_set);
+#endif
+			SET_CBUS_REG_MASK(SDIO_MULT_CONFIG, (1));
+			break;
+
+		case SDHC_BOOT_0_11 :	//SDHC-C
+#ifdef CONFIG_OF
+			s = pinctrl_lookup_state(p, "sdhc_c");
+			if (IS_ERR(s)) {
+				pinctrl_put(p);
+				p=NULL;
+			}
+			ret = pinctrl_select_state(p, s);
+			if (ret < 0) {
+				pinctrl_put(p);
+				p=NULL;
+			}
+#else
+			pinmux_set(&SDHC_BOOT_0_11_set);
+#endif
+			SET_CBUS_REG_MASK(SDIO_MULT_CONFIG, (2));
+			break;
+
+		case SDHC_GPIOX_0_9 :	//SDHC-A
+#ifdef CONFIG_OF
+			s = pinctrl_lookup_state(p, "sdhc_a");
+			if (IS_ERR(s)) {
+				pinctrl_put(p);
+				p=NULL;
+			}
+			ret = pinctrl_select_state(p, s);
+			if (ret < 0) {
+				pinctrl_put(p);
+				p=NULL;
+			}
+#else
+			pinmux_set(&SDHC_GPIOX_0_9_set);
+#endif
+			SET_CBUS_REG_MASK(SDIO_MULT_CONFIG, (0));
+			break;
+		default :
+			printk("invalid hw io pad!!!\n");
+			break;
+	}
+	
+	return;
+}
+
+void sd_gpio_enable(SDIO_Pad_Type_t io_pad_type)
+{
+	switch (io_pad_type) {
+		
+		case SDHC_CARD_0_5 :	//SDHC-B
+#ifdef CONFIG_OF
+			if(p)
+				devm_pinctrl_put(p);
+			p=NULL;
+#else
+			pinmux_clr(&SDHC_CARD_0_5_set);
+#endif
+			CLEAR_CBUS_REG_MASK(SDIO_MULT_CONFIG, (1));
+			break;
+
+		case SDHC_BOOT_0_11 :	//SDHC-C
+#ifdef CONFIG_OF
+			if(p)
+				devm_pinctrl_put(p);
+			p=NULL;
+#else
+			pinmux_clr(&SDHC_BOOT_0_11_set);
+#endif
+			CLEAR_CBUS_REG_MASK(SDIO_MULT_CONFIG, (2));
+			break;
+
+		case SDHC_GPIOX_0_9 :	//SDHC-A
+#ifdef CONFIG_OF
+			if(p)
+				devm_pinctrl_put(p);
+			p=NULL;
+#else
+			pinmux_clr(&SDHC_GPIOX_0_9_set);
+#endif
+			CLEAR_CBUS_REG_MASK(SDIO_MULT_CONFIG, (0));
+			break;
+		default :
+			printk("invalid hw io pad!!!\n");
+			break;
+	}
+	
+	return;
+}
diff --git a/arch/arm/mach-meson8b/smp.c b/arch/arm/mach-meson8b/smp.c
new file mode 100644
index 000000000000..befeff2d65bf
--- /dev/null
+++ b/arch/arm/mach-meson8b/smp.c
@@ -0,0 +1,295 @@
+/*
+ *  Copyright (C) 2002 ARM Ltd.
+ *  All Rights Reserved
+ *  Copyright (c) 2010, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/jiffies.h>
+#include <linux/smp.h>
+#include <linux/io.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/cpu.h>
+#include <mach/smp.h>
+#include <asm/smp_scu.h>
+#include <asm/hardware/gic.h>
+#include <asm/smp_plat.h>
+#include <asm/smp_scu.h>
+#include <asm/cacheflush.h>
+#include <asm/mach-types.h>
+#include <linux/percpu.h>
+
+static DEFINE_SPINLOCK(boot_lock);
+
+static unsigned int cpu_entry_code[16];
+/*
+ * Write pen_release in a way that is guaranteed to be visible to all
+ * observers, irrespective of whether they're taking part in coherency
+ * or not.  This is necessary for the hotplug code to work reliably.
+ */
+void __init backup_cpu_entry_code(void)
+{
+	unsigned int* p = 0xc0000000;
+	unsigned int i;
+	unsigned int count = sizeof(cpu_entry_code)/sizeof(cpu_entry_code[0]);
+	for(i=0; i<count; i++)
+		cpu_entry_code[i] = p[i];
+}
+
+static void check_and_rewrite_cpu_entry(void)
+{
+	unsigned int i;
+	unsigned int *p=0xc0000000;
+	int changed=0;
+	unsigned int count=sizeof(cpu_entry_code)/sizeof(cpu_entry_code[0]);
+	for(i=0; i<count; i++){
+		if(cpu_entry_code[i] != p[i]){
+			changed=1;
+			break;
+		}
+	}
+	if(changed != 0){
+		printk("!!!CPU boot warning: cpu entry code has been changed!\n");
+		for(i=0, p=0xc0000000; i<count; i++)
+			p[i]=cpu_entry_code[i];
+
+		smp_wmb();
+		__cpuc_flush_dcache_area((void *)p, sizeof(cpu_entry_code));
+		outer_clean_range(__pa(p), __pa(p+count));
+	}
+}
+
+static void write_pen_release(int val)
+{
+	pen_release = val;
+	smp_wmb();
+	__cpuc_flush_dcache_area((void *)&pen_release, sizeof(pen_release));
+	outer_clean_range(__pa(&pen_release), __pa(&pen_release + 1));
+}
+
+static void meson_secondary_set(unsigned int cpu)
+{
+	meson_set_cpu_ctrl_addr(cpu,
+		(const uint32_t)virt_to_phys(meson_secondary_startup));
+	meson_set_cpu_ctrl_reg(cpu, 1);
+	smp_wmb();	
+	mb();
+}
+
+void __cpuinit meson_secondary_init(unsigned int cpu)
+{
+
+	/*
+	 * if any interrupts are already enabled for the primary
+	 * core (e.g. timer irq), then they will not have been enabled
+	 * for us: do so
+	 */
+//	gic_secondary_init(0);
+#ifdef CONFIG_MESON_ARM_GIC_FIQ	
+extern void  init_fiq(void);	
+	init_fiq();
+#endif	
+ 
+	/*
+	 * let the primary processor know we're out of the
+	 * pen, then head off into the C entry point
+	 */
+	write_pen_release(-1);
+	smp_wmb();
+
+	/*
+	 * Synchronise with the boot thread.
+	 */
+	spin_lock(&boot_lock);
+	spin_unlock(&boot_lock);
+}
+
+int __cpuinit meson_boot_secondary(unsigned int cpu, struct task_struct *idle)
+{
+	unsigned long timeout;
+
+	/*
+	* Set synchronisation state between this boot processor
+	* and the secondary one
+	*/
+	spin_lock(&boot_lock);
+	 
+	/*
+	 * The secondary processor is waiting to be released from
+	 * the holding pen - release it, then wait for it to flag
+	 * that it has been released by resetting pen_release.
+	 */
+	printk("write pen_release: %d\n",cpu_logical_map(cpu));
+	write_pen_release(cpu_logical_map(cpu));
+
+	check_and_rewrite_cpu_entry();
+	meson_set_cpu_power_ctrl(cpu, 1);
+	meson_secondary_set(cpu);
+	dsb_sev();
+
+	smp_send_reschedule(cpu);
+	timeout = jiffies + (10* HZ);
+	while (time_before(jiffies, timeout)) {
+		smp_rmb();
+		if (pen_release == -1)
+			break;
+		udelay(10);
+	}
+
+	/*
+	 * now the secondary core is starting up let it run its
+	 * calibrations, then wait for it to finish
+	 */
+	spin_unlock(&boot_lock);
+	return pen_release != -1 ? -ENOSYS : 0;
+}
+
+/*
+ * Initialise the CPU possible map early - this describes the CPUs
+ * which may be present or become present in the system. The msm8x60
+ * does not support the ARM SCU, so just set the possible cpu mask to
+ * NR_CPUS.
+ */
+void __init meson_smp_init_cpus(void)
+{
+	unsigned int i;
+
+	for (i = 0; i < NR_CPUS; i++)
+		set_cpu_possible(i, true);
+
+	 set_smp_cross_call(gic_raise_softirq);
+}
+
+void __init meson_smp_prepare_cpus(unsigned int max_cpus)
+{
+	int i;
+
+	/*
+	* Initialise the present map, which describes the set of CPUs
+	* actually populated at the present time.
+	*/
+	for (i = 0; i < max_cpus; i++)
+		set_cpu_present(i, true);
+	/*
+	* Initialise the SCU and wake up the secondary core using
+	* wakeup_secondary().
+	*/
+	scu_enable((void __iomem *) IO_PERIPH_BASE);
+}
+
+struct smp_operations meson_smp_ops __initdata = {
+	.smp_init_cpus		= meson_smp_init_cpus,
+	.smp_prepare_cpus	= meson_smp_prepare_cpus,
+	.smp_secondary_init	= meson_secondary_init,
+	.smp_boot_secondary	= meson_boot_secondary,
+#ifdef CONFIG_HOTPLUG_CPU
+	.cpu_die		= meson_cpu_die,
+	.cpu_kill         =meson_cpu_kill,
+	.cpu_disable    =meson_cpu_disable,
+#endif
+};
+
+#ifdef CONFIG_SMP
+static DEFINE_PER_CPU(unsigned long, in_wait);
+static unsigned long timeout_flag;
+extern void cpu_maps_update_begin(void);
+extern void cpu_maps_update_done(void);
+
+typedef enum _ENUM_SMP_FLAG {
+    SMP_FLAG_IDLE = 0,
+    SMP_FLAG_GETED,
+    SMP_FLAG_FINISHED,
+    SMP_FLAG_NUM
+} ENUM_SCAL_FLAG;
+
+static void smp_wait(void * info)
+{
+/*This function is call under automic context. So, need not irq protect.*/
+	unsigned long cpu;
+
+	cpu = smp_processor_id();
+
+	info = info;
+
+	per_cpu(in_wait, cpu) = SMP_FLAG_GETED;
+
+	printk("cpu%d stall.\n", cpu);
+	while((per_cpu(in_wait, cpu) == SMP_FLAG_GETED) && !timeout_flag)//waiting until flag != SMP_FLAG_GETED
+		cpu_relax();
+
+	return;
+}
+
+/*
+Try exclusive cpu run func, the others wait it for finishing.
+ If try fail, you can try again.
+ NOTE: It need call at non-automatic context, because of mutex_lock @ cpu_maps_update_begin*/
+int try_exclu_cpu_exe(exl_call_func_t func, void * p_arg)
+{
+	unsigned int cpu;
+	unsigned long irq_flags;
+	unsigned long jiffy_timeout;
+	unsigned long count=0;
+	int ret;
+	/*Protect hotplug scenary*/
+	cpu_maps_update_begin();
+
+	timeout_flag = 0; // clean timeout flag;
+
+	for(cpu=0; cpu< CONFIG_NR_CPUS; cpu++)
+		if(per_cpu(in_wait, cpu))
+		{
+			printk("The previous call is not complete yet!\n");
+			ret = -1;
+			goto finish2;
+		}
+
+	smp_call_function(/*(void (*) (void * info))*/smp_wait, NULL, 0);
+
+	irq_flags = arch_local_irq_save();
+
+	jiffy_timeout = jiffies + HZ/2; //0.5s
+	while(count+1 != num_online_cpus())//the other cpus all in wait loop when count+1 == num_online_cpus()
+	{
+		if(time_after(jiffies, jiffy_timeout))
+		{
+			printk("Cannot stall other cpus. Timeout!\n");
+
+			timeout_flag = 1;
+
+			ret = -1;
+			goto finish1;
+		}
+
+		for(cpu=0, count=0; cpu< CONFIG_NR_CPUS; cpu++)
+			if(per_cpu(in_wait, cpu) == SMP_FLAG_GETED)
+				count ++;
+	}
+
+	ret = func(p_arg);
+
+finish1:
+	for(cpu=0; cpu< CONFIG_NR_CPUS; cpu++)
+		per_cpu(in_wait, cpu) = SMP_FLAG_IDLE;
+
+	arch_local_irq_restore(irq_flags);
+
+finish2:
+	cpu_maps_update_done();
+	return ret;
+}
+#else//CONFIG_SMP
+int try_exclu_cpu_exe(exl_call_func_t func, void * p_arg)
+{
+	return func(p_arg);
+}
+#endif
+
diff --git a/arch/arm/mach-meson8b/time.c b/arch/arm/mach-meson8b/time.c
new file mode 100644
index 000000000000..de6cd836b815
--- /dev/null
+++ b/arch/arm/mach-meson8b/time.c
@@ -0,0 +1,567 @@
+/*
+ * arch/arm/mach-meson8b/time.c
+ *
+ * Copyright (C) 2013 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/io.h>
+#include <linux/mm.h>
+#include <linux/clockchips.h>
+#include <linux/clocksource.h>
+#include <asm/memory.h>
+#include <asm/mach/map.h>
+#include <asm/mach/time.h>
+#include <asm/sched_clock.h>
+#include <plat/io.h>
+#include <mach/am_regs.h>
+
+
+
+
+/***********************************************************************
+ * System timer
+ **********************************************************************/
+#define TIMER_E_RESOLUTION_BIT         8
+#define TIMER_E_ENABLE_BIT        20
+#define TIMER_E_RESOLUTION_MASK       (7UL << TIMER_E_RESOLUTION_BIT)
+#define TIMER_E_RESOLUTION_SYS           0
+#define TIMER_E_RESOLUTION_1us           1
+#define TIMER_E_RESOLUTION_10us          2
+#define TIMER_E_RESOLUTION_100us         3
+#define TIMER_E_RESOLUTION_1ms           4
+
+#define TIMER_DI_RESOLUTION_BIT         6
+#define TIMER_CH_RESOLUTION_BIT         4
+#define TIMER_BG_RESOLUTION_BIT         2
+#define TIMER_AF_RESOLUTION_BIT         0
+
+#define TIMER_DI_ENABLE_BIT         19
+#define TIMER_CH_ENABLE_BIT         18
+#define TIMER_BG_ENABLE_BIT         17
+#define TIMER_AF_ENABLE_BIT         16
+
+#define TIMER_DI_MODE_BIT         15
+#define TIMER_CH_MODE_BIT         14
+#define TIMER_BG_MODE_BIT         13
+#define TIMER_AF_MODE_BIT         12
+
+#define TIMER_RESOLUTION_1us            0
+#define TIMER_RESOLUTION_10us           1
+#define TIMER_RESOLUTION_100us          2
+#define TIMER_RESOLUTION_1ms            3
+
+
+
+
+/********** Clock Source Device, Timer-E *********/
+static cycle_t cycle_read_timerE(struct clocksource *cs)
+{
+    return (cycles_t) aml_read_reg32(P_ISA_TIMERE);
+}
+
+static struct clocksource clocksource_timer_e = {
+    .name   = "Timer-E",
+    .rating = 300,
+    .read   = cycle_read_timerE,
+    .mask   = CLOCKSOURCE_MASK(32),
+    .flags  = CLOCK_SOURCE_IS_CONTINUOUS,
+};
+
+
+static u32 notrace meson8_read_sched_clock(void)
+{
+    return (u32)aml_read_reg32(P_ISA_TIMERE);
+}
+
+static void __init meson_clocksource_init(void)
+{
+	aml_clr_reg32_mask(P_ISA_TIMER_MUX, TIMER_E_RESOLUTION_MASK);
+	aml_set_reg32_mask(P_ISA_TIMER_MUX, TIMER_E_RESOLUTION_1us << TIMER_E_RESOLUTION_BIT);
+///    aml_write_reg32(P_ISA_TIMERE, 0);
+
+    /**
+     * (counter*mult)>>shift=xxx ns
+     */
+    /**
+     * Constants generated by clocks_calc_mult_shift(m, s, 1MHz, NSEC_PER_SEC, 0).
+     * This gives a resolution of about 1us and a wrap period of about 1h11min.
+     */
+    clocksource_timer_e.shift = 22;
+    clocksource_timer_e.mult = 4194304000u;
+    clocksource_register_khz(&clocksource_timer_e,1000);
+
+    setup_sched_clock(meson8_read_sched_clock, 32,USEC_PER_SEC);
+
+}
+
+/********** Clock Event Device, Timer-ABCD/FGHI *********/
+
+struct meson_clock {
+	struct clock_event_device	clockevent;
+	struct irqaction	irq;
+	const char * name;	/*A,B,C,D,F,G,H,I*/
+	int	bit_enable;	
+	int 	bit_mode;
+	int	bit_resolution;
+	unsigned int	mux_reg;
+	unsigned int	reg;
+};
+
+static irqreturn_t meson_timer_interrupt(int irq, void *dev_id);
+static int meson_set_next_event(unsigned long evt,
+                                struct clock_event_device *dev);
+static void meson_clkevt_set_mode(enum clock_event_mode mode,
+                                  struct clock_event_device *dev);
+
+#ifdef CONFIG_SMP
+/*
+static void meson_tick_set_mode(enum clock_event_mode mode,
+                                  struct clock_event_device *dev);
+static int meson_tick_set_next_event(unsigned long evt,
+                                struct clock_event_device *dev);
+*/
+#define meson_tick_rating 450
+#else
+/*
+#define meson_tick_set_mode meson_clkevt_set_mode
+#define meson_tick_set_next_event meson_set_next_event
+*/
+#define meson_tick_rating 300
+#endif
+
+#if 0
+static struct meson_clock meson_timer_a = {
+        .clockevent={
+            .name           = "MESON TIMER-A",
+            .rating         = 400, /* Reasonably fast and accurate clock event */
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-A",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_A,
+        },
+        .name = "A",
+        .bit_enable = TIMER_AF_ENABLE_BIT,
+        .bit_mode = TIMER_AF_MODE_BIT,
+        .bit_resolution = TIMER_AF_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX,
+        .reg=P_ISA_TIMERA
+};
+#endif
+
+static struct meson_clock meson_timer_f = {
+        .clockevent={
+            .name           = "MESON TIMER-F",
+            .rating         = 300, 
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-F",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_F,
+        },
+        .name = "F",
+        .bit_enable = TIMER_AF_ENABLE_BIT,
+        .bit_mode = TIMER_AF_MODE_BIT,
+        .bit_resolution = TIMER_AF_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX1,
+        .reg=P_ISA_TIMERF,
+};
+
+#if 0
+static struct meson_clock meson_timer_b = {
+        .clockevent={
+            .name           = "MESON TIMER-B",
+            .rating         = 300,
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-B",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_B,
+        },
+        .name = "B",
+        .bit_enable = TIMER_BG_ENABLE_BIT,
+        .bit_mode = TIMER_BG_MODE_BIT,
+        .bit_resolution = TIMER_BG_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX,
+        .reg=P_ISA_TIMERB,
+};
+#endif
+
+static struct meson_clock meson_timer_g = {
+        .clockevent={
+            .name           = "MESON TIMER-G",
+            .rating         = 300, 
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-G",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_G,
+        },
+        .name = "G",
+        .bit_enable = TIMER_BG_ENABLE_BIT,
+        .bit_mode = TIMER_BG_MODE_BIT,
+        .bit_resolution = TIMER_BG_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX1,
+        .reg=P_ISA_TIMERG,
+};
+
+#if 0
+static struct meson_clock meson_timer_c = {
+        .clockevent={
+            .name           = "MESON TIMER-C",
+            .rating         = 300,
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-C",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_C,
+        },
+        .name = "C",
+        .bit_enable = TIMER_CH_ENABLE_BIT,
+        .bit_mode = TIMER_CH_MODE_BIT,
+        .bit_resolution = TIMER_CH_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX,
+        .reg=P_ISA_TIMERC,
+};
+#endif
+
+static struct meson_clock meson_timer_h = {
+        .clockevent={
+            .name           = "MESON TIMER-H",
+            .rating         = 300, 
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-H",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_H,
+        },
+        .name = "H",
+        .bit_enable = TIMER_CH_ENABLE_BIT,
+        .bit_mode = TIMER_CH_MODE_BIT,
+        .bit_resolution = TIMER_CH_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX1,
+        .reg=P_ISA_TIMERH,
+};
+
+#if 0
+static struct meson_clock meson_timer_d = {
+        .clockevent={
+            .name           = "MESON TIMER-D",
+            .rating         = 300,
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-D",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_D,
+        },
+        .name = "D",
+        .bit_enable = TIMER_DI_ENABLE_BIT,
+        .bit_mode = TIMER_DI_MODE_BIT,
+        .bit_resolution = TIMER_DI_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX,
+        .reg=P_ISA_TIMERD,
+};
+#endif
+
+static struct meson_clock meson_timer_i = {
+        .clockevent={
+            .name           = "MESON TIMER-I",
+            .rating         = 300, 
+
+            .features       = CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+            .shift          = 20,
+            .set_next_event = meson_set_next_event,
+            .set_mode       = meson_clkevt_set_mode,
+        },
+        .irq={
+            .name           = "MESON TIMER-I",
+            .flags          = IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+            .handler        = meson_timer_interrupt,
+            .irq            =INT_TIMER_I,
+        },
+        .name = "I",
+        .bit_enable = TIMER_DI_ENABLE_BIT,
+        .bit_mode = TIMER_DI_MODE_BIT,
+        .bit_resolution = TIMER_DI_RESOLUTION_BIT,
+        .mux_reg=P_ISA_TIMER_MUX1,
+        .reg=P_ISA_TIMERI,
+};
+
+static struct meson_clock *clockevent_to_clock(struct clock_event_device *evt)
+{
+	//return container_of(evt, struct meson_clock, clockevent);
+	return (struct meson_clock*)evt->private;
+}
+
+static DEFINE_SPINLOCK(time_lock);
+
+static void meson_clkevt_set_mode(enum clock_event_mode mode,
+                                  struct clock_event_device *dev)
+{
+	struct meson_clock * clk=clockevent_to_clock(dev);
+
+	spin_lock(&time_lock);
+	switch (mode) {
+		case CLOCK_EVT_MODE_RESUME:
+			printk(KERN_INFO"Resume timer%s\n", clk->name);
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_enable, 1);
+		break;
+
+		case CLOCK_EVT_MODE_PERIODIC:
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_mode, 1);
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_enable, 1);
+			//printk("Periodic timer %s!,mux_reg=%x\n", clk->name,aml_read_reg32(clk->mux_reg));
+		break;
+
+		case CLOCK_EVT_MODE_ONESHOT:
+			aml_set_reg32_bits(clk->mux_reg, 0, clk->bit_mode, 1);
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_enable, 1);
+			//printk("One shot timer %s!mux_reg=%x\n", clk->name,aml_read_reg32(clk->mux_reg));
+		break;
+		case CLOCK_EVT_MODE_SHUTDOWN:
+		case CLOCK_EVT_MODE_UNUSED:
+			//printk(KERN_INFO"Disable timer %p %s\n",dev, clk->name);
+			aml_set_reg32_bits(clk->mux_reg, 0, clk->bit_enable, 1);
+		break;
+	}
+	spin_unlock(&time_lock);
+}
+static int meson_set_next_event(unsigned long evt,
+                                struct clock_event_device *dev)
+{
+    struct meson_clock * clk=clockevent_to_clock(dev);
+    /* use a big number to clear previous trigger cleanly */
+    aml_set_reg32_mask(clk->reg, evt & 0xffff);
+
+    /* then set next event */
+    aml_set_reg32_bits(clk->reg, evt, 0, 16);
+    return 0;
+}
+
+
+/* Clock event timer interrupt handler */
+static irqreturn_t meson_timer_interrupt(int irq, void *dev_id)
+{
+	struct clock_event_device *evt = dev_id;
+	if(evt == NULL || evt->event_handler == NULL){
+		WARN_ONCE(evt == NULL || evt->event_handler == NULL,
+			"%p %s %p %d",evt,evt?evt->name:NULL,evt?evt->event_handler:NULL,irq);
+		return IRQ_HANDLED;
+	}
+	evt->event_handler(evt);
+	return IRQ_HANDLED;
+
+}
+static void __cpuinit meson_timer_init_device(struct clock_event_device *evt)
+{
+	evt->mult=div_sc(1000000, NSEC_PER_SEC, 20);
+	evt->max_delta_ns =
+		clockevent_delta2ns(0xfffe, evt);
+	evt->min_delta_ns=clockevent_delta2ns(1, evt);
+	evt->cpumask = cpumask_of(smp_processor_id());
+}
+static void __init meson_timer_setup(struct clock_event_device *evt, struct meson_clock * clk )
+{
+    /**
+     * Enable Timer and setting the time base;
+     */
+    aml_set_reg32_mask(clk->mux_reg,
+    		((1 << clk->bit_enable)
+    		|(1 << clk->bit_mode)
+    		|(TIMER_RESOLUTION_1us << clk->bit_resolution)) );
+    aml_write_reg32(clk->reg, 9999);
+    meson_timer_init_device(&clk->clockevent);
+    printk(KERN_ERR"Global timer: %s (%p) initialized\n",clk->clockevent.name,clk);
+
+    clk->irq.dev_id=&clk->clockevent;
+    clk->clockevent.private = (void *)clk;
+    clockevents_register_device(&(clk->clockevent));
+
+    /* Set up the IRQ handler */
+    setup_irq(clk->irq.irq, &clk->irq);
+}
+
+#ifdef CONFIG_SMP
+#include <asm/localtimer.h>
+
+struct meson_clock * meson8_smp_local_timer[CONFIG_NR_CPUS]={
+	&meson_timer_f,	/* CPU0 f*/
+	&meson_timer_g,	/* CPU1 g*/
+	&meson_timer_h,	/* CPU2 h*/
+	&meson_timer_i	/* CPU3 i*/
+};
+
+int  __cpuinit meson_local_timer_setup(struct clock_event_device *evt)
+{
+	int cpu;
+	struct meson_clock * clk;
+	struct clock_event_device * meson_evt;
+	
+	if(!evt){
+		printk(KERN_ERR"meson_local_timer_setup: null evt!\n");
+		return -EINVAL;
+	}
+
+	cpu = smp_processor_id();
+	if(cpu == 0)
+		return 0;
+	
+	clk = meson8_smp_local_timer[cpu];
+	
+	aml_set_reg32_mask(clk->mux_reg,
+		((1 << clk->bit_enable)
+		|(1 << clk->bit_mode)
+		|(TIMER_RESOLUTION_1us << clk->bit_resolution)) );
+	aml_write_reg32(clk->reg, 9999);
+	
+	meson_timer_init_device(&(clk->clockevent));
+	//printk(KERN_ERR"Local timer: %s (%p) for CPU%d initialized\n",
+	//	clk->clockevent.name,clk,cpu);
+
+	meson_evt = &clk->clockevent;
+	evt->name = meson_evt->name;
+	evt->rating = meson_evt->rating;
+	evt->features = meson_evt->features;
+	evt->shift = meson_evt->shift;
+	evt->set_next_event = meson_evt->set_next_event;
+	evt->set_mode = meson_evt->set_mode;
+	evt->private = clk;
+	evt->mult=div_sc(1000000, NSEC_PER_SEC, 20);
+	evt->max_delta_ns =
+		clockevent_delta2ns(0xfffe, evt);
+	evt->min_delta_ns=clockevent_delta2ns(1, evt);
+	clk->irq.dev_id=evt;
+
+	clockevents_register_device(evt);
+		
+	if(cpu){
+		irq_set_affinity(clk->irq.irq, cpumask_of(cpu));
+	}
+	/* Set up the IRQ handler */
+	setup_irq(clk->irq.irq, &clk->irq);
+	
+	return 0;
+}
+void  __cpuinit meson_local_timer_stop(struct clock_event_device *evt)
+{
+	struct meson_clock * clk;
+
+	if(!evt){
+		printk(KERN_ERR"meson_local_timer_stop: null evt!\n");
+		return;//return -EINVAL;
+	}
+
+	clk = clockevent_to_clock(evt);
+	evt->set_mode(CLOCK_EVT_MODE_UNUSED, evt);
+	aml_clr_reg32_mask(clk->mux_reg,(1 << clk->bit_enable));
+	remove_irq(clk->irq.irq, &clk->irq);
+
+	return;
+}
+
+static struct local_timer_ops meson_local_timer_ops = {
+	.setup = meson_local_timer_setup,
+	.stop = meson_local_timer_stop,
+};
+inline int local_timer_ack(void)
+{
+    return 1;
+}
+#endif  /* CONFIG_SMP */
+
+static void __init meson_clockevent_init(void)
+{
+
+    /***
+     * Disable Timer A~D, and clean the time base
+     * Now all of the timer is 1us base
+     */
+    aml_clr_reg32_mask(P_ISA_TIMER_MUX,~(TIMER_E_RESOLUTION_MASK));
+    /***
+     * Disable Timer F~I, and clean the time base
+     * Now all of the timer is 1us base
+     */
+    aml_write_reg32(P_ISA_TIMER_MUX1,0);
+
+#ifdef CONFIG_SMP
+    meson_timer_setup(NULL,meson8_smp_local_timer[0]);
+#else
+    meson_timer_setup(NULL,&meson_timer_a);
+//    meson_timer_setup(NULL,&meson_timer_b);
+//    meson_timer_setup(NULL,&meson_timer_c);
+//    meson_timer_setup(NULL,&meson_timer_d);
+#endif
+}
+
+
+/*
+ * This sets up the system timers, clock source and clock event.
+ */
+void __init meson_timer_init(void)
+{
+	meson_clocksource_init();
+	meson_clockevent_init();
+#ifdef CONFIG_SMP
+	local_timer_register(&meson_local_timer_ops);
+#endif
+}
+
diff --git a/arch/arm/mach-meson8b/tool/genregs.awk b/arch/arm/mach-meson8b/tool/genregs.awk
new file mode 100644
index 000000000000..ba589a6b1a44
--- /dev/null
+++ b/arch/arm/mach-meson8b/tool/genregs.awk
@@ -0,0 +1,167 @@
+#!/usr/bin/awk -f
+
+BEGIN{
+	
+	
+	
+}
+/^\/\/ Secure APB3 Slot 0 Registers/{
+    sec_bus="SECBUS_REG_ADDR"
+}
+/^\/\/ Secure APB3 Slot 2 Registers/{
+    sec_bus="SECBUS2_REG_ADDR"
+}
+/^\/\/ Secure APB3 Slot 3 registers/{
+    sec_bus="SECBUS3_REG_ADDR"
+}
+
+/^#define/ && $2 ~/VDIN0_OFFSET/{
+	VDIN0_OFFSET = $3
+}
+/^#define/ && $2 ~/VDIN1_OFFSET/{
+	VDIN1_OFFSET = $3
+}
+
+#/^#define/ && $2 ~/^P_AO_RTC_/{
+#    print $1,$2,"\t\tSECBUS_REG_ADDR(" $8,$9,$10,"\t///" FILENAME
+#    ignore RTC
+#    next
+#}
+
+########################### 3 ##########################
+/^#define/ && NF==3{
+    BASE="CBUS_REG_ADDR";
+    REGNAME=$2
+    ADDR=$3
+    
+#register.h    
+#		if(index(FILENAME,"register")!=0){
+#			if(REGNAME ~ /^VDIN/){
+#				print $1, $2, $3
+#			}
+#		# ignore 3 paremeters define in register.h
+#				next    
+#dos_cbus_register.h        	
+#    }else 
+#    if(index(FILENAME,"dos_cbus_register")!=0){
+#        BASE="DOS_REG_ADDR";
+#secure_apb.h
+#    }else 
+    	if(index(FILENAME,"secure_apb")!=0){
+        BASE=sec_bus;
+        if($2 ~/^AO_RTC_/)
+        	next
+#c_stb_define.h
+    }else if(index(FILENAME,"c_stb_define")!=0){
+        BASE="CBUS_REG_ADDR";
+#m6tv_mmc.h
+    }else if(index(FILENAME,"m6tv_mmc")!=0) {
+    		ADDR="0x"substr(ADDR,7,10);
+        BASE="MMC_REG_ADDR";
+        if(REGNAME ~ /^P_/)
+        	REGNAME=substr(REGNAME,3,99);
+#hdmi.h
+		}else if(index(FILENAME,"hdmi")!=0){
+				ADDR="0x"substr(ADDR,6,10);
+        BASE="APB_REG_ADDR";
+
+		}else{
+				next
+		}
+    
+  if(index(FILENAME,"hdmi")!=0 && $2 ~ /^STIMULUS_/)
+        next;
+        
+	print $1,REGNAME,ADDR,"\t///"  FILENAME ":" FNR
+	print $1,"P_" REGNAME , "\t\t" BASE "(" REGNAME ")"
+}
+
+########################### 7 ##########################
+/^#define/ && NF==7{
+	  REGNAME=$2
+    ADDR=$3
+
+#dos_register.h
+		if(index(FILENAME,"dos_register")!=0) {
+#  #define HCODEC_MPSR                                ((0x1301  << 2) + 0xd0050000)
+    		ADDR="0x"substr(ADDR,5,8);
+        BASE="DOS_REG_ADDR";
+        print $1,REGNAME, ADDR,"\t///" FILENAME ":" FNR
+		
+#register.h
+    }else if(index(FILENAME,"register")!=0){
+				ADDR=substr(ADDR,3,8);
+				if(ADDR ~ /^0x/ && $7 ~ /^0xc11/)
+        	BASE="CBUS_REG_ADDR";
+        else if(ADDR ~ /^0x/ && $7 ~ /^0xd01/)
+        	BASE="VCBUS_REG_ADDR";
+        else
+        	next
+					
+				print $1,REGNAME,ADDR,"\t///" FILENAME ":" FNR
+#m6tv_mmc.h
+    }else if(index(FILENAME,"m6tv_mmc")!=0) {
+#  #define P_DDR0_PUB_DX7BDLR4         0xc8001000 + (0x18B << 2) 
+				if(!(ADDR ~ /^0x/))
+					next
+    		ADDR="0x"substr(ADDR,7,10);
+        BASE="MMC_REG_ADDR";
+        if(REGNAME ~ /^P_/)
+        	REGNAME=substr(REGNAME,3,99);
+        	
+        print $1,REGNAME,"("ADDR,$4,$5,$6,$7")","\t///" FILENAME ":" FNR
+    }else
+    	next
+    
+		print $1,"P_" REGNAME , "\t\t" BASE "(" REGNAME ")" 
+
+}
+
+########################### 8 ##########################
+/^#define/ && NF==8{
+	  REGNAME=$2
+    ADDR=$3
+				
+#m6tv_mmc.h
+    if(index(FILENAME,"m6tv_mmc")!=0) {
+#  #define P_MMC_CHAN_CTRL4            0xc8006000 + (0x7b << 2 ) 
+    		ADDR="0x"substr(ADDR,7,10);
+        BASE="MMC_REG_ADDR";
+        if(REGNAME ~ /^P_/)
+        	REGNAME=substr(REGNAME,3,99);
+        	
+        print $1,REGNAME, "(" ADDR,$4,$5,$6,$7,$8")","\t///" FILENAME ":" FNR
+        
+    }else if (index(FILENAME,"register")!=0) {
+##define VDIN0_WR_CTRL                           ((VDIN0_OFFSET << 2) + VDIN_WR_CTRL                      )    	
+ 				if(ADDR ~ /^\(\(VDIN0/){
+ 					VD_OFF=VDIN0_OFFSET;
+ 				}else if(ADDR ~ /^\(\(VDIN1/){
+ 					VD_OFF=VDIN1_OFFSET;
+ 				}else
+ 					next
+ 				
+ 				print $1,REGNAME, "((" VD_OFF,$4,$5,$6,$7,$8")","\t///" FILENAME ":" FNR
+    }else 
+    	next
+
+		print $1,"P_" REGNAME , "\t\t" BASE "(" REGNAME ")" 
+
+}
+
+########################### 14 ##########################
+/^#define/ && NF==14 && $2 ~ /^P_/{
+# #define P_AO_RTI_PWR_CNTL_REG1      (volatile unsigned long *)(0xc8100000 | (0x00 << 10) | (0x03 << 2))
+	  REGNAME=$2
+
+    if(index(FILENAME,"c_always_on_pointer")!=0) {
+    	BASE="AOBUS_REG_ADDR";
+    	REGNAME=substr(REGNAME,3,99);
+			print $1,REGNAME, "("$8,$9,$10,$11,$12,$13,$14,"\t///" FILENAME ":" FNR
+    	print $1,"P_" REGNAME,"\t\t" BASE "(" REGNAME ")"  
+   }
+
+}
+END{
+	
+}
diff --git a/arch/arm/mach-meson8b/tool/genregs.sh b/arch/arm/mach-meson8b/tool/genregs.sh
new file mode 100644
index 000000000000..a8032e637e94
--- /dev/null
+++ b/arch/arm/mach-meson8b/tool/genregs.sh
@@ -0,0 +1,14 @@
+#!/bin/bash
+echo "/**" 
+echo " * This file is automaticly generated by genregs.awk. Please do not edit it " 
+echo " * Base files are ../ucode/register.h ../ucode/dos_register.h "
+echo " *   ../ucode/c_always_on_pointer.h ../ucode/m6tv_mmc.h "
+echo " *   ../ucode/c_stb_define.h ../ucode/secure_apb.h from VLSI team"
+echo " * `date` "
+echo " */"
+echo "#ifndef __MACH_MESON8_REG_ADDR_H_"
+echo "#define __MACH_MESON8_REG_ADDR_H_"
+gawk -f genregs.awk ../ucode/register.h ../ucode/dos_register.h ../ucode/c_always_on_pointer.h ../ucode/m6tv_mmc.h ../ucode/c_stb_define.h ../ucode/secure_apb.h ../ucode/hdmi.h
+
+
+echo "#endif"
diff --git a/arch/arm/mach-meson8b/tool/m8_gpio.csv b/arch/arm/mach-meson8b/tool/m8_gpio.csv
new file mode 100644
index 000000000000..bdfe23bf32c9
--- /dev/null
+++ b/arch/arm/mach-meson8b/tool/m8_gpio.csv
@@ -0,0 +1,141 @@
+TITLE,NAME,GPIO OEN,GPIO Out,GPIO In,Always On JTAG,Always On Remote,Always On UART,UART PMIC,Always On I2C-Master,Always On I2C-Slave,Audio In,Audio OUT,FEC-A (in),FEC-B (in),FEC-C (in),FEC OUT,Encoder,PWM,VGHL/LED_BL,mLVDS,TCON,HDMI,LCD OUT,LCD IN,VGA,UART-A,UART-B,UART-C,SDIO-A,SDIO-B,SDIO-C,SDXC,I2C Master,I2C SLAVE,SPI,Ethernet,ITU601 In,ISO7816,PCM,NAND,NAND,Clock Out,WD GPIO,Production
+REG_ADDR,REG 0x202c,AO_REG 0x14,0x200c,0x200d,0x200e,0xc8100024 ,0xc8100026 ,0xc8100028 ,0x2013,0x2014,0x2015,0x2016,0x2017,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
+ALIAS_GPIO_BASE,0x200c P_GPIO_OEN 3 2 CBUS_REG_ADDR,0x200d P_GPIO_OUT 3 2 CBUS_REG_ADDR,0x200e P_GPIO_IN 3 2 CBUS_REG_ADDR,0x2013 P_GPIO_OEN 2 CBUS_REG_ADDR,0x2014 P_GPIO_OUT 2 CBUS_REG_ADDR,0x2015 P_GPIO_IN 2 CBUS_REG_ADDR,0x2015 P_GPIO_OEN 3 CBUS_REG_ADDR,0x2016 P_GPIO_OUT 3 CBUS_REG_ADDR,0x2017 P_GPIO_IN 3 CBUS_REG_ADDR,0xc8100024 P_GPIO_OEN AO AOBUS_REG_ADDR_MASK,0xc8100026 P_GPIO_OUT AO  AOBUS_REG_ADDR_MASK,0xc8100028 P_GPIO_IN AO  AOBUS_REG_ADDR_MASK,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
+ALIAS_PINMUX,REG P_PIN_MUX_REG 1 10 CBUS_REG_ADDR,AO_REG P_PIN_MUX_REG AO AOBUS_REG_ADDR,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
+,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
+MODULE,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,slave,,,,,,,,,,
+PAD,GPIOX_0,0x200c bit[0],0x200d bit[0],0x200e bit[0],SD_D0_A REG8[5],SDXC_D0_A REG5[14],,,
+PAD,GPIOX_1,0x200c bit[1],0x200d bit[1],0x200e bit[1],SD_D1_A REG8[4],SDXC_D1_A REG5[13],,,
+PAD,GPIOX_2,0x200c bit[2],0x200d bit[2],0x200e bit[2],SD_D2_A REG8[3],SDXC_D2_A REG5[13],,,
+PAD,GPIOX_3,0x200c bit[3],0x200d bit[3],0x200e bit[3],SD_D3_A REG8[2],SDXC_D3_A REG5[13],,,
+PAD,GPIOX_4,0x200c bit[4],0x200d bit[4],0x200e bit[4],,SDXC_D4_A REG5[12],PCM_OUT_A REG3[30],,UART_TX_A REG4[17],
+PAD,GPIOX_5,0x200c bit[5],0x200d bit[5],0x200e bit[5],,SDXC_D5_A REG5[12],PCM_IN_A REG3[29],,UART_RX_A REG4[16],
+PAD,GPIOX_6,0x200c bit[6],0x200d bit[6],0x200e bit[6],,SDXC_D6_A REG5[12],PCM_FS_A REG3[28],,UART_CTS_A REG4[15],
+PAD,GPIOX_7,0x200c bit[7],0x200d bit[7],0x200e bit[7],,SDXC_D7_A REG5[12],PCM_CLK_A REG3[27],,UART_RTS_A REG4[14],
+PAD,GPIOX_8,0x200c bit[8],0x200d bit[8],0x200e bit[8],SD_CLK_A REG8[1],SDXC_CLK_A REG5[11],,,
+PAD,GPIOX_9,0x200c bit[9],0x200d bit[9],0x200e bit[9],SD_CMD_A REG8[0],SDXC_CMD_A REG5[10],,,
+PAD,GPIOX_10,0x200c bit[10],0x200d bit[10],0x200e bit[10],XTAL_32K_OUT REG3[22],,,PWM_VS REG7[31],PWM_E REG9[19],
+PAD,GPIOX_11,0x200c bit[11],0x200d bit[11],0x200e bit[11],XTAL_24M_OUT REG3[23] XTAL/2 REG3[23],,TSout_CLK REG3[14],PWM_VS REG7[30],PWM_B REG2[3],
+PAD,GPIOX_12,0x200c bit[12],0x200d bit[12],0x200e bit[12],UART_TX_A REG4[13],,TSout_D0 REG3[13],,
+PAD,GPIOX_13,0x200c bit[13],0x200d bit[13],0x200e bit[13],UART_RX_A REG4[12],,TSout_D1 REG3[12],,
+PAD,GPIOX_14,0x200c bit[14],0x200d bit[14],0x200e bit[14],UART_CTS_A REG4[11],,TSout_D2 REG3[12],,
+PAD,GPIOX_15,0x200c bit[15],0x200d bit[15],0x200e bit[15],UART_RTS_A REG4[10],,TSout_D3 REG3[12],,
+PAD,GPIOX_16,0x200c bit[16],0x200d bit[16],0x200e bit[16],UART_TX_B REG4[9],,TSout_D4 REG3[12],ISO7816_DET REG4[21],I2C_SDA_D REG4[5],
+PAD,GPIOX_17,0x200c bit[17],0x200d bit[17],0x200e bit[17],UART_RX_B REG4[8],,TSout_D5 REG3[12],ISO7816_RESET REG4[20],I2C_SCK_D REG4[4],
+PAD,GPIOX_18,0x200c bit[18],0x200d bit[18],0x200e bit[18],UART_CTS_B REG4[7],,TSout_D6 REG3[12],ISO7816_CLK REG4[19],
+PAD,GPIOX_19,0x200c bit[19],0x200d bit[19],0x200e bit[19],UART_RTS_B REG4[6],,TSout_D7 REG3[12],ISO7816_DATA REG4[18],
+PAD,GPIOX_20,0x200c bit[20],0x200d bit[20],0x200e bit[20],,,,,
+PAD,GPIOX_21,0x200c bit[21],0x200d bit[21],0x200e bit[21],,,,,
+PAD,GPIOY_0,0x200f bit[0],0x2010 bit[0],0x2011 bit[0],UART_TX_C REG1[19],I2S_OUT_45 REG1[10],TSin_D_VALID_A REG3[2],DVP_HS REG9[9],I2C_SDA_C REG1[15],
+PAD,GPIOY_1,0x200f bit[1],0x2010 bit[1],0x2011 bit[1],UART_RX_C REG1[18],I2S_OUT_23 REG1[19],TSin_SOP_A REG3[1],DVP_VS REG9[8],I2C_SCK_C REG1[14],
+PAD,GPIOY_2,0x200f bit[2],0x2010 bit[2],0x2011 bit[2],UART_CTS_C REG1[17],SPDIF_IN REG1[8],TSout_CLK REG3[18],,
+PAD,GPIOY_3,0x200f bit[3],0x2010 bit[3],0x2011 bit[3],UART_RTS_C REG1[16],SPDIF_OUT REG1[7],,,
+PAD,GPIOY_4,0x200f bit[4],0x2010 bit[4],0x2011 bit[4],PCM_OUT_B REG4[25],I2S_OUT_01 REG1[6],TSin_FAIL_A REG3[3],,
+PAD,GPIOY_5,0x200f bit[5],0x2010 bit[5],0x2011 bit[5],PCM_IN_B REG4[24],I2S_IN_01 REG1[5],TSout_SOP REG3[15],DVP_D5 REG9[7],
+PAD,GPIOY_6,0x200f bit[6],0x2010 bit[6],0x2011 bit[6],PCM_FS_B REG4[23],I2S_LR_CLK_IN REG1[3] I2S_LR_CLK_OUT REG1[4],TSout_D_VALID REG3[16],DVP_D6 REG9[6],
+PAD,GPIOY_7,0x200f bit[7],0x2010 bit[7],0x2011 bit[7],PCM_CLK_B REG4[22],I2S_AO_CLK_IN REG1[1] I2S_AO_CLK_OUT REG1[2],TSout_FAIL REG3[17],DVP_D7 REG9[5],
+PAD,GPIOY_8,0x200f bit[8],0x2010 bit[8],0x2011 bit[8],I2S_AM_CLK REG1[0],,TSin_CLK_A REG3[0],DVP_CLK REG9[4],
+PAD,GPIOY_9,0x200f bit[9],0x2010 bit[9],0x2011 bit[9],TSin_D0_A REG3[4],I2S_OUT_78 REG1[11],,DVP_D0 REG9[3],
+PAD,GPIOY_10,0x200f bit[10],0x2010 bit[10],0x2011 bit[10],TSin_D1_A REG3[5],,,DVP_D1 REG9[3],
+PAD,GPIOY_11,0x200f bit[11],0x2010 bit[11],0x2011 bit[11],TSin_D2_A REG3[5],,,DVP_D2 REG9[3],
+PAD,GPIOY_12,0x200f bit[12],0x2010 bit[12],0x2011 bit[12],TSin_D3_A REG3[5],,,DVP_D3 REG9[3],
+PAD,GPIOY_13,0x200f bit[13],0x2010 bit[13],0x2011 bit[13],TSin_D4_A REG3[5],,,DVP_D4 REG9[3],
+PAD,GPIOY_14,0x200f bit[14],0x2010 bit[14],0x2011 bit[14],TSin_D5_A REG3[5],,,DVP_D5 REG9[2],
+PAD,GPIOY_15,0x200f bit[15],0x2010 bit[15],0x2011 bit[15],TSin_D6_A REG3[5],,,DVP_D6 REG9[1],
+PAD,GPIOY_16,0x200f bit[16],0x2010 bit[16],0x2011 bit[16],TSin_D7_A REG3[5],,PWM_VS REG7[29],DVP_D7 REG9[0],PWM_A REG9[14],
+PAD,GPIODV_0,0x2013 bit[0],0x2014 bit[0],0x2015 bit[0],LCD_R0 REG0[1],TCON_OEV REG8[27],DVIN_R0 REG0[6],ENC_0 REG7[0],
+PAD,GPIODV_1,0x2013 bit[1],0x2014 bit[1],0x2015 bit[1],LCD_R1 REG0[1],,DVIN_R1 REG0[6],ENC_1 REG7[1],
+PAD,GPIODV_2,0x2013 bit[2],0x2014 bit[2],0x2015 bit[2],LCD_R2 REG0[0],,DVIN_R2 REG0[6],ENC_2 REG7[2],
+PAD,GPIODV_3,0x2013 bit[3],0x2014 bit[3],0x2015 bit[3],LCD_R3 REG0[0],,DVIN_R3 REG0[6],ENC_3 REG7[3],
+PAD,GPIODV_4,0x2013 bit[4],0x2014 bit[4],0x2015 bit[4],LCD_R4 REG0[0],,DVIN_R4 REG0[6],ENC_4 REG7[4],
+PAD,GPIODV_5,0x2013 bit[5],0x2014 bit[5],0x2015 bit[5],LCD_R5 REG0[0],,DVIN_R5 REG0[6],ENC_5 REG7[5],
+PAD,GPIODV_6,0x2013 bit[6],0x2014 bit[6],0x2015 bit[6],LCD_R6 REG0[0],,RVIN_R6 REG0[6],ENC_6 REG7[6],
+PAD,GPIODV_7,0x2013 bit[7],0x2014 bit[7],0x2015 bit[7],LCD_R7 REG0[0],,DVIN_R7 REG0[6],ENC_7 REG7[7],
+PAD,GPIODV_8,0x2013 bit[8],0x2014 bit[8],0x2015 bit[8],LCD_G0 REG0[3],TCON_VCOM REG8[26],DVIN_G0 REG0[6],ENC_8 REG7[8],
+PAD,GPIODV_9,0x2013 bit[9],0x2014 bit[9],0x2015 bit[9],LCD_G1 REG0[3],PWM_VS REG7[28],DVIN_G1 REG0[6],ENC_9 REG7[9],PWM_C REG3[24],
+PAD,GPIODV_10,0x2013 bit[10],0x2014 bit[10],0x2015 bit[10],LCD_G2 REG0[2],,DVIN_G2 REG0[6],ENC_10 REG7[10],
+PAD,GPIODV_11,0x2013 bit[11],0x2014 bit[11],0x2015 bit[11],LCD_G3 REG0[2],,DVIN_G3 REG0[6],ENC_11 REG7[11],
+PAD,GPIODV_12,0x2013 bit[12],0x2014 bit[12],0x2015 bit[12],LCD_G4 REG0[2],,DVIN_G4 REG0[6],ENC_12 REG7[12],
+PAD,GPIODV_13,0x2013 bit[13],0x2014 bit[13],0x2015 bit[13],LCD_G5 REG0[2],,DVIN_G5 REG0[6],ENC_13 REG7[13],
+PAD,GPIODV_14,0x2013 bit[14],0x2014 bit[14],0x2015 bit[14],LCD_G6 REG0[2],,DVIN_G6 REG0[6],END_14 REG7[14],
+PAD,GPIODV_15,0x2013 bit[15],0x2014 bit[15],0x2015 bit[15],LCD_G7 REG0[2],,DVIN_G7 REG0[6],ENC_15 REG7[15],
+PAD,GPIODV_16,0x2013 bit[16],0x2014 bit[16],0x2015 bit[16],LCD_B0 REG0[5],TCON_CPV REG8[25],DVIN_B0 REG0[6],ENC_16 REG7[16],
+PAD,GPIODV_17,0x2013 bit[17],0x2014 bit[17],0x2015 bit[17],LCD_B1 REG0[5],,DVIN_B1 REG0[6],ENC_17 REG7[17],
+PAD,GPIODV_18,0x2013 bit[18],0x2014 bit[18],0x2015 bit[18],LCD_B2 REG0[4],,DVIN_B2 REG0[6],,
+PAD,GPIODV_19,0x2013 bit[19],0x2014 bit[19],0x2015 bit[19],LCD_B3 REG0[4],,DVIN_B3 REG0[6],,
+PAD,GPIODV_20,0x2013 bit[20],0x2014 bit[20],0x2015 bit[20],LCD_B4 REG0[4],,DVIN_B4 REG0[6],,
+PAD,GPIODV_21,0x2013 bit[21],0x2014 bit[21],0x2015 bit[21],LCD_B5 REG0[4],,DVIN_B5 REG0[6],,
+PAD,GPIODV_22,0x2013 bit[22],0x2014 bit[22],0x2015 bit[22],LCD_B6 REG0[4],,DVIN_B6 REG0[6],,
+PAD,GPIODV_23,0x2013 bit[23],0x2014 bit[23],0x2015 bit[23],LCD_B7 REG0[4],,DVIN_B7 REG0[6],,
+PAD,GPIODV_24,0x2013 bit[24],0x2014 bit[24],0x2015 bit[24],LCD_VS REG0[19],TCON_STV1 REG8[24],DVIN_VS REG0[9],UART_TX_B REG6[23],VGA_VS REG0[21],
+PAD,GPIODV_25,0x2013 bit[25],0x2014 bit[25],0x2015 bit[25],LCD_HS REG0[18],TCON_STH1 REG8[23],DVIN_HS REG0[8],UART_RX_B REG6[22],VGA_HS REG0[20],
+PAD,GPIODV_26,0x2013 bit[26],0x2014 bit[26],0x2015 bit[26],,TCON_CPH1 REG8[22] TCON_CPH2 REG8[21] TCON_CPH3 REG8[20],DVIN_CLK REG0[7],UART_CTS_B REG6[21],
+PAD,GPIODV_27,0x2013 bit[27],0x2014 bit[27],0x2015 bit[27],TCON_VCOM REG8[19],TCON_OEH REG8[28],DVIN_DE REG0[10],UART_RTS_B REG6[20],
+PAD,GPIODV_28,0x2013 bit[28],0x2014 bit[28],0x2015 bit[28],PWM_D REG3[26],PWM_VS REG7[27],,,
+PAD,GPIODV_29,0x2013 bit[29],0x2014 bit[29],0x2015 bit[29],PWM_C REG3[25],PWM_VS REG7[26],,,
+PAD,CARD_0,0x200c bit[22],0x200d bit[22],0x200e bit[22],SD_D1_B REG2[14],SDXC_D1_B REG2[6],,,
+PAD,CARD_1,0x200c bit[23],0x200d bit[23],0x200e bit[23],SD_D0_B REG2[15],SDXC_D0_B REG2[7],,,
+PAD,CARD_2,0x200c bit[24],0x200d bit[24],0x200e bit[24],SD_CLK_B REG2[11],SDXC_CLK_B REG2[5],,,
+PAD,CARD_3,0x200c bit[25],0x200d bit[25],0x200e bit[25],SD_CMD_B REG2[10],SDXC_CMD_B REG2[4],,,
+PAD,CARD_4,0x200c bit[26],0x200d bit[26],0x200e bit[26],SD_D3_B REG2[12],SDXC_D3_B REG2[6],,UART_TX_AO_A REG8[10],
+PAD,CARD_5,0x200c bit[27],0x200d bit[27],0x200e bit[27],SD_D2_B REG2[13],SDXC_D2_B REG2[6],,UART_RX_AO_A REG8[9],
+PAD,CARD_6,0x200c bit[28],0x200d bit[28],0x200e bit[28],,,,,
+PAD,BOOT_0,0x2015 bit[0],0x2016 bit[0],0x2017 bit[0],NAND_IO_0 REG2[26],SDXC_D0_C REG4[30],SD_D0_C REG6[29],,
+PAD,BOOT_1,0x2015 bit[1],0x2016 bit[1],0x2017 bit[1],NAND_IO_1 REG2[26],SDXC_D1_C REG4[29],SD_D1_C REG6[28],,
+PAD,BOOT_2,0x2015 bit[2],0x2016 bit[2],0x2017 bit[2],NAND_IO_2 REG2[26],SDXC_D2_C REG4[29],SD_D2_C REG6[27],,
+PAD,BOOT_3,0x2015 bit[3],0x2016 bit[3],0x2017 bit[3],NAND_IO_3 REG2[26],SDXC_D3_C REG4[29],SD_D3_C REG6[26],,
+PAD,BOOT_4,0x2015 bit[4],0x2016 bit[4],0x2017 bit[4],NAND_IO_4 REG2[26],SDXC_D4_C REG4[28],,,
+PAD,BOOT_5,0x2015 bit[5],0x2016 bit[5],0x2017 bit[5],NAND_IO_5 REG2[26],SDXC_D5_C REG4[28],,,
+PAD,BOOT_6,0x2015 bit[6],0x2016 bit[6],0x2017 bit[6],NAND_IO_6 REG2[26],SDXC_D6_C REG4[28],,,
+PAD,BOOT_7,0x2015 bit[7],0x2016 bit[7],0x2017 bit[7],NAND_IO_7 REG2[26],SDXC_D7_C REG4[28],,,
+PAD,BOOT_8,0x2015 bit[8],0x2016 bit[8],0x2017 bit[8],NAND_IO_CE0 REG2[25],,,,
+PAD,BOOT_9,0x2015 bit[9],0x2016 bit[9],0x2017 bit[9],NAND_IO_CE1 REG2[24],,,,
+PAD,BOOT_10,0x2015 bit[10],0x2016 bit[10],0x2017 bit[10],NAND_IO_RB0 REG2[17],,,,
+PAD,BOOT_11,0x2015 bit[11],0x2016 bit[11],0x2017 bit[11],NAND_ALE REG2[21],NOR_D REG5[1],,,
+PAD,BOOT_12,0x2015 bit[12],0x2016 bit[12],0x2017 bit[12],NAND_CLE REG2[20],NOR_Q REG5[3],,,
+PAD,BOOT_13,0x2015 bit[13],0x2016 bit[13],0x2017 bit[13],NAND_WEN_CLK REG2[19],NOR_C REG5[2],,,
+PAD,BOOT_14,0x2015 bit[14],0x2016 bit[14],0x2017 bit[14],NAND_REN_CLK REG2[18],,,,
+PAD,BOOT_15,0x2015 bit[15],0x2016 bit[15],0x2017 bit[15],NAND_DQS REG2[27],,,,
+PAD,BOOT_16,0x2015 bit[16],0x2016 bit[16],0x2017 bit[16],NAND_CE2 REG2[23],SDXC_CMD_C REG4[27],SD_CMD_C REG6[25],,
+PAD,BOOT_17,0x2015 bit[17],0x2016 bit[17],0x2017 bit[17],NAND_CE3 REG2[22],SDXC_CLK_C REG4[26],SD_CLK_C REG6[24],,
+PAD,BOOT_18,0x2015 bit[18],0x2016 bit[18],0x2017 bit[18],,NOR_CS REG5[0],,,
+PAD,GPIOH_0,0x2015 bit[19],0x2016 bit[19],0x2017 bit[19],HDMI_HPD REG1[26],,,,
+PAD,GPIOH_1,0x2015 bit[20],0x2016 bit[20],0x2017 bit[20],HDMI_SDA REG1[25],,,,
+PAD,GPIOH_2,0x2015 bit[21],0x2016 bit[21],0x2017 bit[21],HDMI_SCL REG1[24],,,,
+PAD,GPIOH_3,0x2015 bit[22],0x2016 bit[22],0x2017 bit[22],HDMI_CEC REG1[23],SPI_SS0 REG9[13],,,
+PAD,GPIOH_4,0x2015 bit[23],0x2016 bit[23],0x2017 bit[23],,SPI_MISO REG9[12],,,
+PAD,GPIOH_5,0x2015 bit[24],0x2016 bit[24],0x2017 bit[24],,SPI_MOSI REG9[11],,,
+PAD,GPIOH_6,0x2015 bit[25],0x2016 bit[25],0x2017 bit[25],,SPI_SCLK REG9[10],,,
+PAD,GPIOH_7,0x2015 bit[26],0x2016 bit[26],0x2017 bit[26],I2C_SDA_D REG4[3],,,,
+PAD,GPIOH_8,0x2015 bit[27],0x2016 bit[27],0x2017 bit[27],I2C_SCL_D REG4[2],,,,
+PAD,GPIOH_9,0x2015 bit[28],0x2016 bit[28],0x2017 bit[28],CLK_24M_OUT REG4[1] CLK_12M_OUT REG4[1],,,,
+PAD,GPIOZ_0,0x200f bit[17],0x2010 bit[17],0x2011 bit[17],I2C_SDA_A REG5[31],PWM_A REG9[16],isp_led_en1 REG9[18],PWM_VS REG7[25],
+PAD,GPIOZ_1,0x200f bit[18],0x2010 bit[18],0x2011 bit[18],I2C_SCK_A REG5[30],PWM_B REG9[15],,PWM_VS REG7[24],
+PAD,GPIOZ_2,0x200f bit[19],0x2010 bit[19],0x2011 bit[19],I2C_SDA_B REG5[27],,,,
+PAD,GPIOZ_3,0x200f bit[20],0x2010 bit[20],0x2011 bit[20],I2C_SCK_B REG5[26],,,,
+PAD,GPIOZ_4,0x200f bit[21],0x2010 bit[21],0x2011 bit[21],I2C_SDA_C REG5[25],ETH_TX_CLK_50M REG6[15],,,
+PAD,GPIOZ_5,0x200f bit[22],0x2010 bit[22],0x2011 bit[22],I2C_SCK_C REG5[24],ETH_TX_EN  REG6[14],,,
+PAD,GPIOZ_6,0x200f bit[23],0x2010 bit[23],0x2011 bit[23],,ETH_TXD1 REG6[13],,CLK_24M_OUT REG3[21] CLK_12M_OUT REG3[21],
+PAD,GPIOZ_7,0x200f bit[24],0x2010 bit[24],0x2011 bit[24],,ETH_TXD0 REG6[12],PWM_VS REG7[23],PWM_A REG2[0],
+PAD,GPIOZ_8,0x200f bit[25],0x2010 bit[25],0x2011 bit[25],,ETH_RX_CLK_IN REG6[10] ETH_RX_CLK_OUT REG6[9],PWM_VS REG7[22],PWM_C REG2[1],
+PAD,GPIOZ_9,0x200f bit[26],0x2010 bit[26],0x2011 bit[26],SPI_SS0 REG8[16],ETH_RX_DV REG6[11],I2C_SDA_A REG5[9],,
+PAD,GPIOZ_10,0x200f bit[27],0x2010 bit[27],0x2011 bit[27],SPI_SS1 REG8[12],ETH_RXD1 REG6[8],I2C_SCK_A REG5[8],,
+PAD,GPIOZ_11,0x200f bit[28],0x2010 bit[28],0x2011 bit[28],SPI_SCLK REG8[15],ETH_RXD0 REG6[7],I2C_SDA_A REG5[7],,
+PAD,GPIOZ_12,0x200f bit[29],0x2010 bit[29],0x2011 bit[29],SPI_MOSI REG8[14],ETH_MDIO REG6[6],I2C_SCK_A REG5[6],,
+PAD,GPIOZ_13,0x200f bit[30],0x2010 bit[30],0x2011 bit[30],SPI_MISO REG8[13],ETH_MDC REG6[5],,,
+PAD,GPIOZ_14,0x200f bit[31],0x2010 bit[31],0x2011 bit[31],SPI_SS2 REG8[17],,isp_led_en2 REG9[17],,
+PAD,GPIOAO_0,0xc8100024 bit[0],0xc8100026 bit[16],0xc8100028 bit[0],UART_TX_AO_A AO_REG[12],,UART_TX_AO_B AO_REG[26],,
+PAD,GPIOAO_1,0xc8100024 bit[1],0xc8100026 bit[17],0xc8100028 bit[1],UART_RX_AO_A AO_REG[11],,UART_RX_AO_B AO_REG[25],,
+PAD,GPIOAO_2,0xc8100024 bit[2],0xc8100026 bit[18],0xc8100028 bit[2],UART_CTS_AO_A AO_REG[10],,,,
+PAD,GPIOAO_3,0xc8100024 bit[3],0xc8100026 bit[19],0xc8100028 bit[3],UART_RTS_AO_A AO_REG[9],,,,
+PAD,GPIOAO_4,0xc8100024 bit[4],0xc8100026 bit[20],0xc8100028 bit[4],I2C_MST_SCK_AO AO_REG[6],I2C_SLAVE_SCK_AO AO_REG[2],UART_TX_AO_B AO_REG[24],,
+PAD,GPIOAO_5,0xc8100024 bit[5],0xc8100026 bit[21],0xc8100028 bit[5],I2C_MST_SDA_AO AO_REG[5],I2C_SLAVE_SDA_AO AO_REG[1],UART_RX_AO_B AO_REG[23],,
+PAD,GPIOAO_6,0xc8100024 bit[6],0xc8100026 bit[22],0xc8100028 bit[6],CLK_32K_INCLK_32K_OUT AO_REG[18],,,,
+PAD,GPIOAO_7,0xc8100024 bit[7],0xc8100026 bit[23],0xc8100028 bit[7],REMOTE_INPUT AO_REG[0],,,,
+PAD,GPIOAO_8,0xc8100024 bit[8],0xc8100026 bit[24],0xc8100028 bit[8],,I2S_AM_CLK_OUT AO_REG[30],,,
+PAD,GPIOAO_9,0xc8100024 bit[9],0xc8100026 bit[25],0xc8100028 bit[9],,I2S_AO_CLK_OUT AO_REG[29],,,
+PAD,GPIOAO_10,0xc8100024 bit[10],0xc8100026 bit[26],0xc8100028 bit[10],,I2S_LR_CLK_OUT AO_REG[28],,,
+PAD,GPIOAO_11,0xc8100024 bit[11],0xc8100026 bit[27],0xc8100028 bit[11],,I2S_OUT_01 AO_REG[27],,,
+PAD,GPIOAO_12,0xc8100024 bit[12],0xc8100026 bit[28],0xc8100028 bit[12],HDMI_CEC AO_REG[17],,,,
+PAD,GPIOAO_13,0xc8100024 bit[13],0xc8100026 bit[29],0xc8100028 bit[13],REMOTE_OUTPUT AO_REG[31],,,,
+PAD,GPOAO_14,0xc8100024 bit[14],0xc8100026 bit[30],0xc8100028 bit[14],PWM_F AO_REG[19],,,,
diff --git a/arch/arm/mach-meson8b/tool/m8genpintab.awk b/arch/arm/mach-meson8b/tool/m8genpintab.awk
new file mode 100644
index 000000000000..e3835c074594
--- /dev/null
+++ b/arch/arm/mach-meson8b/tool/m8genpintab.awk
@@ -0,0 +1,401 @@
+#!/usr/bin/gawk -f
+BEGIN{
+	pad_index=0;
+	sig_index=0;
+	FS=",";
+	ret=0;
+	if(length(head)==0)
+		headfile="cat 1>include/mach/gpio_data.h";
+	else
+		headfile="cat 1>" head;
+	warning_on=0;
+	print "/* this file is automatic generate . Please do not edit it"
+	print "       ./genpintab.awk gpio_pinmux.csv > <this file name> can generate this file*/"
+    print "#define AOBUS_REG_ADDR_MASK(a)   AOBUS_REG_ADDR(((a)&0xffff))"
+}
+#function conflict(name,value)
+#{
+#	if(length(table[name])==0)
+#	{
+#		table[name]=value;
+#		return 0;
+#	}
+#	if( table[name]!=value)
+#	{
+#		print "POINT D error found conflict name=" name " value=" value | "cat 1>&2" ;
+#		print "origin value=" table[name] " NR=" $2| "cat 1>&2" ;
+#		return 1;
+#	}
+#	return 0;
+#	
+#}
+/^TITLE/{
+	for(j=1;j<=NF;j++){
+		n=split($j,a," ");
+		if(n==0)
+			continue;
+		column[j]=a[1];
+		for(i=2;i<=n;i++)
+		{
+			column[i]= column[i] " " a[i];
+		}
+	}
+}
+/^MODULE/{
+	for(j=1;j<=NF;j++){
+		n=split($j,a," ");
+		if(n==0)
+			continue;
+		module[j]=a[1];
+		for(i=2;i<=n;i++)
+		{
+			module[i]= module[i] "_" a[i];
+		}
+	}
+}
+/^REG_ADDR/{
+	for(i=1;i<=NF;i++)
+	{
+		str=$i;
+		delete a;
+		n=split(str,a," ");
+		if(n!=2&&n!=1)
+			continue;
+		if(n==2){
+			reg_addr[a[1]]=a[2];
+			reg_addr_isnum[a[1]]=0;
+			print "#define " a[1] " (" a[2] ")"
+		}
+		else{
+			reg_addr[a[1]]=a[1];
+			reg_addr_isnum[a[1]]=1;
+		}
+	
+	}
+}
+/^ALIAS/{
+	k=0;
+	for(i=1;i<=NF;i++)
+	{
+		str=$i;
+		delete a;
+		n=split(str,a," ");
+		if(n==4 || n==5)
+		{
+			if(length(idx[a[2]])==0)
+			{
+				
+				idx[a[2]]=0;
+			}
+		}
+		else
+			continue;
+		if(n == 4)
+		{
+			reg_list[a[2],idx[a[2]]]=a[2]"_" a[3] ;
+			
+			reg_alias[a[1]]=a[2] "(" (idx[a[2]]);
+				
+			print "#define " reg_list[a[2],idx[a[2]]] " " a[4] "(" a[1] ")"
+			idx[a[2]]++;
+		}else if (n == 5){
+			
+			for(j=1;j<=strtonum(a[4]);j++)
+			{
+				if(reg_addr_isnum[a[1]])
+					ind=sprintf("0x%x",strtonum(a[1])+(j-1)*strtonum(a[3]));
+				else{
+					ind=sprintf("%s%d",a[1],(j-1));
+					print "#define " ind " (" a[1] "+" (j-1)")"
+				}
+				reg_list[a[2],idx[a[2]]]=a[2]"_" (j-1) ;
+				
+#				print reg_list[a[2],0]
+				reg_alias[ind]=a[2] "(" (idx[a[2]]);
+				
+				print "#define " reg_list[a[2],idx[a[2]]] " " a[5] "(" ind ")"
+				idx[a[2]]++;
+			}
+			
+		}else{
+			continue;
+		}
+	}
+}
+
+
+/^PAD/{
+	row[NR]=$2;
+	if(length(pads[$2])!=0)
+	{
+		print "found pad name conflict name=" $2 "line=" NR| "cat 1>&2" ;
+		print "origin value=" pads[$2] | "cat 1>&2" ;
+		exit 1
+	}
+	pads[$2]=pad_index++;
+	for(i=3;i<=5;i++){
+		n=length($i);
+		if(n==0)
+			continue;
+		delete a;
+		str=$i;
+		n=split(str,a," ");
+		if(n!=2)
+		{
+			print "POINT A error found at NR=" NR "NF=" $i | "cat 1>&2" ;
+			exit 1
+		}
+		if(length(reg_alias[a[1]])==0)
+		{
+			print "use original name for reg=_" a[1] | "cat 1>&2" 
+			reg_alias[a[1]]="_" a[1];
+		}
+		if(match(a[2],/[\(|\[]([[:digit:]]+)[\)|\]]/,array) == 0)
+		{
+			print "POINT B error found at pad=" $2 " column=" column[i] " value=" $i | "cat 1>&2" ;
+			exit 1
+		}
+		pads_gpio[$2,column[i]] = reg_alias[a[1]] "," array[1] ")";
+	}
+	str="";
+	for(i=6;i<=NF;i++)
+	{
+		n=length($i);
+		if(n==0)
+			continue;
+		delete a;
+		n=split($i,a," ");
+		sig=null;
+		
+		for(j=1;j<=n;j++){
+			delete temp_arr;
+			enable="xxx";
+			n_reg=0;
+			if(a[j] ~ /^N_([[:alpha:]_][[:alnum:]_]*)[\(|\[]([[:digit:]]+)[\)|\]]$/)
+			{
+				str=substr(a[j],3);
+				enable="disable";
+			}else if( a[j] ~ /^[a-zA-Z0-9_]*(\/)[[:digit:]]$/ )
+			{
+				
+				sig=a[j];
+				if(length(pads_pinmux[$2,sig,"enable"]) != 0 ||length(pads_pinmux[$2,sig,"disable"])!= 0)
+				{
+					if (length(module[i])!=0)
+					{
+						if(length(pads_pinmux[$2,sig,"enable"]) != 0)
+							enable="enable";
+						else
+							enable="disable";
+						
+						if(warning_on>=1)print "Waring found, pads conflict " | "cat 1>&2" 
+						if(warning_on>=1)print "\tsig=" sig " pads_pinmux[" $2 "," sig "," enable "]="  pads_pinmux[$2,sig,enable] | "cat 1>&2" 
+						sig=a[j] "_" module[i];
+						if(warning_on>=1)print "\treplace name is  " sig | "cat 1>&2" 
+					}
+					else {
+						if(length(pads_pinmux[$2,sig,"enable"]) != 0)
+							enable="enable";
+						else
+							enable="disable";
+						print "error found, pads conflict " | "cat 1>&2" 
+						print "\tsig=" sig " pads_pinmux[" $2 "," sig "," enable "]="  pads_pinmux[$2,sig,enable] | "cat 1>&2" 
+						ret=1;
+						break;
+					}
+				}
+				continue;
+			}else if(a[j] ~ /([[:alpha:]_][[:alnum:]_]*)[\(|\[]([[:digit:]]+)[\)|\]]$/) 
+			{
+				str=a[j];
+				enable="enable";
+			}else if( a[j] ~ /^[a-zA-Z_][a-zA-Z0-9_]*$/ )
+			{
+				
+				sig=a[j];
+				if(length(pads_pinmux[$2,sig,"enable"]) != 0 ||length(pads_pinmux[$2,sig,"disable"])!= 0)
+				{
+					if (length(module[i])!=0)
+					{
+						if(length(pads_pinmux[$2,sig,"enable"]) != 0)
+							enable="enable";
+						else
+							enable="disable";
+						
+						if(warning_on>=1)print "Waring found, pads conflict " | "cat 1>&2" 
+						if(warning_on>=1)print "\tsig=" sig " pads_pinmux[" $2 "," sig "," enable "]="  pads_pinmux[$2,sig,enable] | "cat 1>&2" 
+						sig=a[j] "_" module[i];
+						if(warning_on>=1)print "\treplace name is  " sig | "cat 1>&2" 
+					}
+					else {
+						if(length(pads_pinmux[$2,sig,"enable"]) != 0)
+							enable="enable";
+						else
+							enable="disable";
+						print "error found, pads conflict " | "cat 1>&2" 
+						print "\tsig=" sig " pads_pinmux[" $2 "," sig "," enable "]="  pads_pinmux[$2,sig,enable] | "cat 1>&2" 
+						ret=1;
+						break;
+					}
+				}
+				continue;
+			}
+			n_reg=match(str,/([[:alpha:]_][[:alnum:]_]*)[\(|\[]([[:digit:]]+)[\)|\]]$/,temp_arr);
+			if( length(sig)==0 || n_reg==0 || length(temp_arr[2])==0)
+			{
+				print "++++error found , wrong format at pad=" $2 " sig=" sig "," column[i] " value=" $i "," i "," n_reg "," temp_arr[2] | "cat 1>&2" ;
+				ret=1;
+				break;
+			}
+			if( length(pads_pinmux[$2,sig,enable] ) != 0 )
+			{
+				print "fatal error found, pads conflict " | "cat 1>&2" 
+				print "\tsig=" sig " pads_pinmux[" $2 "," sig "," enable "]="  pads_pinmux[$2,sig,enable] | "cat 1>&2" 
+				ret=1;
+				break;
+			}
+			if(length(reg_alias[temp_arr[1]])==0){
+				str=temp_arr[1] "(" temp_arr[2] ")" ;
+				reg_alias[temp_arr[1]]=temp_arr[1] ;
+				print "use original name for reg=" temp_arr[1] | "cat 1>&2" 
+			}
+			else
+				str=reg_alias[temp_arr[1]] "," temp_arr[2] ")" ;
+			
+			pads_pinmux[$2,sig,enable]=str;
+			if(sig in sigs)
+				continue;
+			sigs[sig]=sig_index++;
+		}
+	}
+}
+
+
+
+END{
+	for(i in idx)
+	{
+		print "#define " i "(base,bit) (bit+(base<<5))"
+		print "#define " i "_NUM " "(sizeof(" tolower(i) "_addr)/sizeof(" tolower(i) "_addr[0]))"
+		print "static unsigned " tolower(i) "_addr[]={"
+		for(j=0;j<idx[i];j++)
+			print  "\t" reg_list[i,j] ","
+		print "};"
+	}
+	print "#ifndef __MACH_HEAD_GPIO_DATA__" | headfile
+	print "#define __MACH_HEAD_GPIO_DATA__" | headfile
+	print "typedef enum {" | headfile
+	x=0;
+	for(i in pads)
+	{
+		if(x!=0)
+			printf ",\n" | headfile; 
+		printf ("\tPAD_%s=%d",i,pads[i]) | headfile;
+		if(i in sigs){
+			print "pad name " i " conflict" | "cat 1>&2" ;
+			exit 1;
+		}
+		x++;
+	}
+	
+	print ",\n\tPAD_MAX_PADS="  x  "\n}pad_t;" | headfile
+	
+	print "typedef enum {" | headfile
+	x=0;
+	for(i in sigs)
+	{
+		if(x!=0)
+			printf (",\n") | headfile;
+		printf ("\tSIG_%s=%d",i,sigs[i]) | headfile;
+		if(i in pads){
+			print "sig name " i " conflict" | "cat 1>&2" ;
+			exit 1;
+		}
+		x++;
+	}
+	print ",\n\tSIG_GPIOIN=" x++  | headfile
+    print ",\n\tSIG_GPIOOUT=" x++ "," | headfile
+	print "\tSIG_MAX_SIGS="  x "\n}sig_t;" | headfile
+	print "#endif /*__MACH_HEAD_GPIO_DATA__*/" | headfile
+	print "#define NOT_EXIST -1"
+	print "struct pad_sig {pad_t pad;sig_t sig;unsigned enable; unsigned disable;};"
+	
+	print "#define foreach_pad_sig_start(pad,sig) {int __i;for(__i=0;__i<sizeof(pad_sig_tab)/sizeof(pad_sig_tab[0]);__i++){ unsigned __pad=pad,__sig=sig;  "
+	print "#define case_pad_equal(enable,disable) if(pad_sig_tab[__i].pad==__pad&&pad_sig_tab[__i].sig!=__sig){ enable=pad_sig_tab[__i].enable;disable=pad_sig_tab[__i].disable"
+	print "#define case_sig_equal(enable,disable) if(pad_sig_tab[__i].pad!=__pad&&pad_sig_tab[__i].sig==__sig){enable=pad_sig_tab[__i].enable;disable=pad_sig_tab[__i].disable"
+	print "#define case_both_equal(enable,disable) if(pad_sig_tab[__i].pad==__pad&&pad_sig_tab[__i].sig==__sig){enable=pad_sig_tab[__i].enable;disable=pad_sig_tab[__i].disable"
+	print "#define case_end };"
+	print "#define foreach_pad_sig_end };}"
+	print "static struct pad_sig pad_sig_tab[]={"
+	for( combine in pads_pinmux )
+	{
+		split(combine,dim,SUBSEP)
+		pad=dim[1];sig=dim[2];enable=dim[3];
+		if(enable == "disable")
+		{
+			if(length ( pads_pinmux[pad,sig,"enable"] )!=0)
+				continue;
+			enable=NOT_EXIST;
+			disable=pads_pinmux[pad,sig,"disable"];
+		}else{
+			enable=pads_pinmux[pad,sig,"enable"];
+			disable="NOT_EXIST";
+			if(length ( pads_pinmux[pad,sig,"disable"] )!=0)
+			{ 
+				disable=pads_pinmux[pad,sig,"disable"];
+			}
+		}
+		printf "\t"
+		print "{.pad=PAD_" pad ",.sig=SIG_" sig ",.enable="  enable \
+			",.disable=" disable "},"
+	}
+	print "};"
+	print "static const char * pad_name[]={"
+	x=0;
+	for(i in pads)
+	{
+		printf "\t[%d]=\"%s\",\n",pads[i],i;
+		if(i in sigs){
+			print "pad name " i " conflict" | "cat 1>&2" ;
+			exit 1;
+		}
+		x++;
+	}
+	print "\t[PAD_MAX_PADS]=NULL\n};"
+	
+	print "static const char * sig_name[]={"
+	x=0;
+	for(i in sigs)
+	{
+		
+		printf "\t[%d]=\"%s\",\n",sigs[i],i;
+		if(i in pads){
+			print "sig name " i " conflict" | "cat 1>&2" ;
+			exit 1;
+		}
+		x++;
+	}
+	print "\t[SIG_GPIOIN]=\"GPIOIN\","
+    print "\t[SIG_GPIOOUT]=\"GPIOOUT\","
+	print "\t[SIG_MAX_SIGS]=NULL\n};"
+	
+	print "/* GPIO operation part */"
+	x=0;
+	print "static unsigned pad_gpio_bit[]={"
+	for( combine in pads_gpio )
+	{
+		split(combine,dim,SUBSEP)
+		pad=dim[1];sig=dim[2];
+		if(sig != column[3])
+		{
+			continue;
+		};
+		if(x!=0)
+			printf ",\n";
+		printf "\t[PAD_%s]=%s",pad,pads_gpio[pad,sig];
+		x++;
+	}
+	
+	print "\n};"
+	exit ret
+}
diff --git a/arch/arm/mach-meson8b/tool/meson8_syspll.c b/arch/arm/mach-meson8b/tool/meson8_syspll.c
new file mode 100644
index 000000000000..8b4a31dad0f7
--- /dev/null
+++ b/arch/arm/mach-meson8b/tool/meson8_syspll.c
@@ -0,0 +1,239 @@
+/*
+ *	Create MESON8 SYSPLL Frequency Table
+ *
+ *	By Victor Wan <victor.wan@amlogic.com>
+ *	First version: 2013.9.17
+ *	V2 : 2013.9.22
+ *				1) fvco min --> 1.200GHz
+ *				2) fix some wrong pll config
+ *
+ *	gcc -o meson8_syspll meson8_syspll.c
+ *	meson8_syspll
+ */
+
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+
+//#define DEBUG 1
+
+#define FVCO_MAX 2550000
+#define FVCO_MIN 1200000
+
+#define F_MAX 2112000
+#define F_MIN 24000
+
+#define TABLE_CLM	4 /* freq, cntl, latency, fvco */
+
+const int cntl0_init_base = 0x40000200;
+const int od_base = (1 << 16);
+const int crystal = 24000;
+
+#ifdef DEBUG
+#define debug  printf
+#else
+#define debug
+#endif
+
+int calc_fvco(int m,int n)
+{
+	int f;
+
+	f = crystal * m /n;
+	return f;
+}
+
+int calc_fout(int freq,int od,int ext_div)
+{
+	int f, div;
+	
+	f = freq;
+	if(od == 0)
+		div = 1;
+	else
+		div = od * 2;
+		
+	f = f / div;
+	if(ext_div == 0)
+		return f;
+	else{
+		f = f / 2;
+		return f / (ext_div + 1);
+	}
+}
+int calc_cntl(int freq, int m, int od)
+{
+		return (cntl0_init_base + od_base * od + m);
+}
+int get_od_from_cntl(int cntl)
+{
+	return ((cntl & (od_base * 3))  / od_base);
+}
+int get_ext_div_from_latency(int latency)
+{
+	return ((latency & 0x03ff0000) >> 16);
+}
+int calc_latency(int freq, int ext_div, int * l2, int * axi, int * peri, int * apb)
+{
+	if(freq < F_MAX){
+		*l2 = 3;
+		*axi = 5;
+		*peri = 4;
+		*apb = 6;
+	}
+	return (ext_div << 16) + (*l2 << 12) + (*axi << 8) + (*peri << 4) + *apb;
+}
+
+int add_freq_to_table(int* table, int freq, int fvco, int m, int od, int ext_div)
+{
+	int ret = 0;
+	int k = 0;
+	int exist = 0;
+	int record = 0;
+	int vco = fvco;
+	int* f = table;
+	int l2,axi,peri,apb;
+	int f_cntl,f_latency,f_fvco;
+	
+	while(f[0]){
+		if(f[1]){ 
+			record++;
+		}
+
+		if(f[0] == freq){
+			
+			f_cntl = calc_cntl(freq, m, od);
+			f_latency = calc_latency(freq,ext_div,&l2,&axi,&peri,&apb);
+			f_fvco = fvco;
+			
+			if(f[1]) // record exist
+				exist = 1;
+			else{
+				f[1] = f_cntl;
+				f[2] = f_latency;
+				f[3] = f_fvco;
+				return 0;
+			}
+		}
+		
+		k++;
+		f += TABLE_CLM;
+	}
+	if(k == record)
+		return -2; //full
+		
+	if(exist)
+		return -1;
+		
+	printf("Strange !!!! -- freq: %d, fvco: %d, m: %d, od: %d, ext_div: %d, k: %d , record: %d\n",
+			freq, fvco, m, od, ext_div, k, record);
+		
+	//never go here
+	return 0;
+}
+
+
+int show_freq(int * table)
+{
+	int i;
+	int latency;
+	int od,k;
+	while(table[0]){
+		od = get_od_from_cntl(table[1]);
+		switch(od){
+			case 0:
+				k = 1;break;
+			case 1:
+				k = 2;break;
+			case 2:
+				k = 4;break;
+			default:
+				k = 999; // error
+		}
+		latency = get_ext_div_from_latency(table[2]);
+		printf("\t\t{ %4d,",table[0]/1000);//Freq
+		printf(" 0x%08X,",table[1]);//cntl0
+		printf(" 0x%08X },",table[2]);//latency
+		printf(" /* fvco %4d, / %d, /%2d */",
+			table[3]/1000,k,latency ?((latency + 1) * 2): 1 );//fvco
+		printf("\n");
+		table+=TABLE_CLM;
+	}
+}
+
+int * init_freq_table(int min, int max, int step)
+{
+	int * p;
+	int * table;
+	int size =  TABLE_CLM * ((max - min) / step + 2) * sizeof(int);
+	int freq;
+	
+	p = malloc(size);
+	if(p){
+		memset(p,0,size);
+		table = (int *)p;
+		for(freq = min; freq <= max; freq+= step, table += TABLE_CLM)
+			table[0] = freq;
+	}
+	table[0] = 0;
+	
+	return p;
+}
+int main(void)
+{
+	int m,od,ext_div;
+	int fvco,fout;
+	int ret;
+	int * freq_table = NULL;
+	int flag;
+	
+	freq_table = init_freq_table(F_MIN, F_MAX, crystal);
+
+#ifdef DEBUG	
+	printf(" === Freq table before ===\n");
+	show_freq(freq_table);
+#endif
+
+	for(ext_div = 0; ext_div < 1024; ext_div++){
+		for(od = 0; od <= 2; od++){
+				for(m = 1; m < 512; m++){
+
+					fvco = calc_fvco(m, 1);
+
+					if(fvco < FVCO_MIN || fvco > FVCO_MAX){
+						continue;
+					}
+
+  				fout = calc_fout(fvco, od, ext_div);
+					debug("--- fvco: %d, fout: %d, od: %d, m: %d, ext_div: %d\n",fvco,fout, od, m, ext_div);
+  				if(fout < F_MIN || fout > F_MAX){
+ 						debug("=== skip fout %d\n",fout);
+  					continue;
+					} 
+ 					debug("--- fout: %d, od: %d, m: %d, ext_div: %d\n",fout,od, m, ext_div);
+  				if((fout / (crystal / 1000)) != ((fout / crystal) * 1000))
+  					continue;
+  				
+  				/* get a poper fout */
+  				debug("=== found fvco %d, fout %d, m %d, od %d, ext_div, %d\n",
+  					fvco,fout,m, od, ext_div);
+  				ret = add_freq_to_table(freq_table, fout, fvco, m, od, ext_div);
+  				if(ret == 0)// Add successful
+  					continue;
+  				if(ret == -1)// Alread have this item
+  					continue;
+  				if(ret == -2)
+  					goto FINISH;
+
+			}		
+		}
+	}
+
+FINISH:
+	printf(" ======= Meson8 syspll freq table  =======\n");
+	show_freq(freq_table);
+	printf(" ======= Meson8 syspll freq table finished =======\n");
+	
+	free(freq_table);
+	return 0;
+}
\ No newline at end of file
diff --git a/arch/arm/mach-meson8b/tool/syspll.sh b/arch/arm/mach-meson8b/tool/syspll.sh
new file mode 100644
index 000000000000..1078e9838b12
--- /dev/null
+++ b/arch/arm/mach-meson8b/tool/syspll.sh
@@ -0,0 +1,36 @@
+#!/bin/bash
+
+#0x41200200 = 1092616704 (Fout >= 1.25G, OD = 0)
+FOUT_OVER_1G25=1092616704
+#0x41210200 = 1092682240 (Fout < 1.25G, OD = 1)
+FOUT_BELOW_1G25=1092682240
+
+cntl0=0
+m=1
+mm=1
+f=0
+latency=222
+l2=3
+axi=5
+peri=4
+apb=6
+while [ "$m" -le 88 ]
+do
+    let "f = $m * 24"
+    if [ "$f" -le 1250 ]; then
+        let "cntl0_init = $FOUT_BELOW_1G25"        
+        let "mm = $m * 2"
+    else
+        let "cntl0_init = $FOUT_OVER_1G25"
+        let "mm = $m"
+    fi
+    let "cntl0 = $cntl0_init + $mm"
+    if [ "$f" -ge 1680 ]; then
+        latency=333;
+    fi
+    printf "\t\t{%4d, 0x%8X, 0x%d%d%d%d%d },\n" $f $cntl0 $latency $l2 $axi $peri $apb
+
+    m=$((m+1))
+done
+
+#    printf "freq: %4d, cntl0: 0X%8x\n" $f $cntl0
diff --git a/arch/arm/mach-meson8b/usbclock.c b/arch/arm/mach-meson8b/usbclock.c
new file mode 100644
index 000000000000..1e4b9df43fb5
--- /dev/null
+++ b/arch/arm/mach-meson8b/usbclock.c
@@ -0,0 +1,159 @@
+/*
+ *
+ * arch/arm/mach-meson6/usbclock.c
+ *
+ *  Copyright (C) 2013 AMLOGIC, INC.
+ *
+ *	by Victor Wan 2013.3 @Shanghai
+ *
+ * License terms: GNU General Public License (GPL) version 2
+ * Platform machine definition.
+ */
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/mm.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/dma-mapping.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/delay.h>
+#include <plat/lm.h>
+#include <mach/memory.h>
+#include <mach/clock.h>
+#include <mach/am_regs.h>
+#include <mach/usbclock.h>
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+#include <mach/mod_gate.h>
+#endif
+/*
+ * M chip USB clock setting
+ */
+ 
+/*
+ * Clock source name index must sync with chip's spec
+ * M1/M2/M3/M6 are different!
+ * This is only for M6
+ */
+static const char * clock_src_name[] = {
+    "XTAL input",
+    "XTAL input divided by 2",
+    "DDR PLL",
+    "MPLL OUT0"
+    "MPLL OUT1",
+    "MPLL OUT2",
+    "FCLK / 2",
+    "FCLK / 3"
+};
+static int init_count;
+int clk_enable_usb(struct clk *clk)
+{
+	int port_idx;
+	char * clk_name;
+	usb_peri_reg_t * peri_a,* peri_b,*peri;
+	usb_config_data_t config;
+	usb_ctrl_data_t control;
+	int clk_sel,clk_div,clk_src;
+	int time_dly = 500; //usec
+	
+	if(!clk)
+		return -1;
+
+	if(!init_count)
+	{
+		init_count++;
+		aml_set_reg32_bits(P_RESET1_REGISTER, 1, 2, 1);
+		//for(i = 0; i < 1000; i++)
+		//	udelay(time_dly);
+	}
+	
+	clk_name = (char*)clk->priv;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	switch_mod_gate_by_name(clk_name, 1);
+#endif	
+	peri_a = (usb_peri_reg_t *)P_USB_ADDR0;
+	peri_b = (usb_peri_reg_t *)P_USB_ADDR8;
+
+	if(!strcmp(clk_name,"usb0")){
+		peri = peri_a;
+		port_idx = USB_PORT_IDX_A;
+	}else if(!strcmp(clk_name,"usb1")){
+		peri = peri_b;
+		port_idx = USB_PORT_IDX_B;
+	}else{
+		printk(KERN_ERR "bad usb clk name: %s\n",clk_name);
+		return -1;
+	}
+	
+
+	clk_sel = USB_PHY_CLK_SEL_XTAL;
+	clk_div = 1;
+	clk_src = 24000000;
+
+	config.d32 = peri->config;
+	config.b.clk_32k_alt_sel= 1;
+	peri->config = config.d32;
+
+
+	printk(KERN_NOTICE"USB (%d) use clock source: %s\n",port_idx,clock_src_name[clk_sel]);
+
+	control.d32 = peri->ctrl;
+	control.b.fsel = 5;//2;	/* PHY default is 24M (5), change to 12M (2) */
+	control.b.por = 1;
+	peri->ctrl = control.d32;
+	udelay(time_dly);
+	control.b.por = 0;
+	peri->ctrl = control.d32;
+	udelay(time_dly);
+	
+
+	/* read back clock detected flag*/
+	control.d32 = peri->ctrl;
+	if(!control.b.clk_detected){
+		printk(KERN_ERR"USB (%d) PHY Clock not detected!\n",0);
+	}
+
+	
+	dmb();
+	return 0;
+}
+EXPORT_SYMBOL(clk_enable_usb);
+
+int clk_disable_usb(struct clk *clk)
+{
+	char * clk_name;
+	usb_peri_reg_t * peri_a,* peri_b,*peri;
+
+	if(!clk)
+		return -1;
+
+	clk_name = (char*)clk->priv;
+	peri_a = (usb_peri_reg_t *)P_USB_ADDR0;
+	peri_b = (usb_peri_reg_t *)P_USB_ADDR8;
+
+	if(!strcmp(clk_name,"usb0"))
+		peri = peri_a;
+	else if(!strcmp(clk_name,"usb1"))
+		peri = peri_b;
+	else{
+		printk(KERN_ERR "bad usb clk name: %s\n",clk_name);
+		return -1;
+	}
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	switch_mod_gate_by_name(clk_name, 0);
+#endif
+	//if(init_count){
+	//	init_count--;
+		//uart.d32 = peri->dbg_uart;
+		//uart.b.set_iddq = 1;
+		//peri->dbg_uart = uart.d32;
+	//}
+	dmb();
+	return 0;
+}
+EXPORT_SYMBOL(clk_disable_usb);
+
diff --git a/arch/arm/mach-meson8b/vpu.c b/arch/arm/mach-meson8b/vpu.c
new file mode 100644
index 000000000000..f177a75dc921
--- /dev/null
+++ b/arch/arm/mach-meson8b/vpu.c
@@ -0,0 +1,762 @@
+/*
+ * Driver for the amlogic vpu controller
+ *
+ *
+ */
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <plat/io.h>
+#include <mach/am_regs.h>
+#include <mach/vpu.h>
+#ifdef CONFIG_SMP
+#include <mach/smp.h>
+#endif
+#include <linux/amlogic/vout/vinfo.h>
+
+#define VPU_VERION	"v03"
+
+//#define LIMIT_VPU_CLK_LOW
+static spinlock_t vpu_lock;
+static spinlock_t vpu_mem_lock;
+static DEFINE_MUTEX(vpu_mutex);
+
+static const char* vpu_mod_table[]={
+	"viu_osd1",
+	"viu_osd2",
+	"viu_vd1",
+	"viu_vd2",
+	"viu_chroma",
+	"viu_ofifo",
+	"viu_scale",
+	"viu_osd_scale",
+	"viu_vdin0",
+	"viu_vdin1",
+	"pic_rot1",
+	"pic_rot2",
+	"pic_rot3",
+	"di_pre",
+	"di_post",
+	"viu2_osd1",
+	"viu2_osd2",
+	"viu2_vd1",
+	"viu2_chroma",
+	"viu2_ofifo",
+	"viu2_scale",
+	"viu2_osd_scale",
+	"vencp",
+	"vencl",
+	"venci",
+	"isp",
+	"none",
+};
+
+typedef struct {
+	unsigned mem_pd0;
+	unsigned mem_pd1;
+	unsigned int clk_level;
+}VPU_Conf_t;
+
+#define CLK_LEVEL_DFT		4
+#define CLK_LEVEL_MAX		8	//limit max clk to 364M
+static unsigned int vpu_clk_setting[][3] = {
+	//frequency		clk_mux		div
+	{106250000,		1,			7},	//0
+	{127500000,		2,			3},	//1
+	{159375000,		0,			3},	//2
+	{182150000,		3,			1},	//3
+	{212500000,		1,			3},	//4
+	{255000000,		2,			1},	//5
+	{318750000,		0,			1},	//6
+	{364300000,		3,			0},	//7
+	{425000000,		1,			1},	//8
+	{510000000,		2,			0},	//9
+	{637500000,		0,			0},	//10
+	//{850000000,		1,			0},	//11
+};
+
+static unsigned int vpu_clk_vmod[] = {
+	0,	//VPU_VIU_OSD1,
+	0,	//VPU_VIU_OSD2,
+	0,	//VPU_VIU_VD1,
+	0,	//VPU_VIU_VD2,
+	0,	//VPU_VIU_CHROMA,
+	0,	//VPU_VIU_OFIFO,
+	0,	//VPU_VIU_SCALE,
+	0,	//VPU_VIU_OSD_SCALE,
+	0,	//VPU_VIU_VDIN0,
+	0,	//VPU_VIU_VDIN1,
+	0,	//VPU_PIC_ROT1,
+	0,	//VPU_PIC_ROT2,
+	0,	//VPU_PIC_ROT3,
+	0,	//VPU_DI_PRE,
+	0,	//VPU_DI_POST,
+	0,	//VPU_VIU2_OSD1,
+	0,	//VPU_VIU2_OSD2,
+	0,	//VPU_VIU2_VD1,
+	0,	//VPU_VIU2_CHROMA,
+	0,	//VPU_VIU2_OFIFO,
+	0,	//VPU_VIU2_SCALE,
+	0,	//VPU_VIU2_OSD_SCALE,
+	0,	//VPU_VENCP,
+	0,	//VPU_VENCL,
+	0,	//VPU_VENCI,
+	0,	//VPU_ISP,
+	0,	//VPU_MAX,
+};
+
+static int dft_clk_level;
+static VPU_Conf_t vpu_config = {
+	.mem_pd0 = 0,
+	.mem_pd1 = 0,
+	.clk_level = CLK_LEVEL_DFT,
+};
+
+static vpu_mod_t get_vpu_mod(unsigned int vmod)
+{
+	unsigned int vpu_mod;
+
+	if (vmod < VPU_MOD_START) {
+		switch (vmod) {
+			case VMODE_480P:
+			case VMODE_576P:
+			case VMODE_720P:
+			case VMODE_1080I:
+			case VMODE_1080P:
+			case VMODE_720P_50HZ:
+			case VMODE_1080I_50HZ:
+			case VMODE_1080P_50HZ:
+			case VMODE_1080P_24HZ:
+			case VMODE_4K2K_30HZ:
+			case VMODE_4K2K_25HZ:
+			case VMODE_4K2K_24HZ:
+			case VMODE_4K2K_SMPTE:
+			case VMODE_VGA:
+			case VMODE_SVGA:
+			case VMODE_XGA:
+			case VMODE_SXGA:
+				vpu_mod = VPU_VENCP;
+				break;
+			case VMODE_480I:
+			case VMODE_576I:
+			case VMODE_480CVBS:
+			case VMODE_576CVBS:
+				vpu_mod = VPU_VENCI;
+				break;
+			case VMODE_LCD:
+			case VMODE_LVDS_1080P:
+			case VMODE_LVDS_1080P_50HZ:
+				vpu_mod = VPU_VENCL;
+				break;
+			default:
+				vpu_mod = VPU_MAX;
+				break;
+		}
+	}
+	else if ((vmod >= VPU_MOD_START) && (vmod < VPU_MAX)) {
+		vpu_mod = vmod;
+	}
+	else {
+		vpu_mod = VPU_MAX;
+	}
+
+	return vpu_mod;
+} 
+
+static unsigned int get_vpu_clk_level_max_vmod(void)
+{
+	unsigned int max_level;
+	int i;
+	
+	max_level = 0;
+	for (i=VPU_MOD_START; i<VPU_MAX; i++) {
+		if (vpu_clk_vmod[i-VPU_MOD_START] > max_level)
+			max_level = vpu_clk_vmod[i-VPU_MOD_START];
+	}
+	
+	return max_level;
+}
+
+static unsigned int get_vpu_clk_level(unsigned int video_clk)
+{
+	unsigned int video_bw;
+	unsigned clk_level;
+	int i;
+	
+	video_bw = video_clk + 1000000;
+
+	for (i=0; i<CLK_LEVEL_MAX; i++) {
+		if (video_bw <= vpu_clk_setting[i][0])			
+			break;
+	}
+	clk_level = i;
+
+	return clk_level;
+}
+
+unsigned int get_vpu_clk(void)
+{
+	unsigned int clk_freq;
+	unsigned int clk_source, clk_div;
+	
+	switch ((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 9) & 0x7) {
+		case 0:
+			clk_source = 637500000;
+			break;
+		case 1:
+			clk_source = 850000000;
+			break;
+		case 2:
+			clk_source = 510000000;
+			break;
+		case 3:
+			clk_source = 364300000;
+			break;
+		default:
+			clk_source = 0;
+			break;
+	}
+	
+	clk_div = ((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 0) & 0x7f) + 1;
+	clk_freq = clk_source / clk_div;
+	
+	return clk_freq;
+}
+
+static int adjust_vpu_clk(VPU_Conf_t *vconf)
+{
+	unsigned int clk_level;
+	unsigned long flags = 0;
+	spin_lock_irqsave(&vpu_lock, flags);
+	
+	clk_level = vconf->clk_level;
+	aml_write_reg32(P_HHI_VPU_CLK_CNTL, ((1 << 8) | (vpu_clk_setting[clk_level][1] << 9) | (vpu_clk_setting[clk_level][2] << 0)));
+	printk("set vpu clk: %uHz, readback: %uHz(0x%x)\n", vpu_clk_setting[clk_level][0], get_vpu_clk(), (aml_read_reg32(P_HHI_VPU_CLK_CNTL)));
+
+	spin_unlock_irqrestore(&vpu_lock, flags);
+
+	return 0;
+}
+
+static int set_vpu_clk(unsigned int vclk)
+{
+	int ret = 0;
+	unsigned clk_level;
+	mutex_lock(&vpu_mutex);
+	
+	if (vclk >= 100) {	//regard as vpu_clk
+		clk_level = get_vpu_clk_level(vclk);
+	}
+	else {	//regard as clk_level
+		clk_level = vclk;
+	}
+
+	if (clk_level >= CLK_LEVEL_MAX) {
+		ret = 1;
+		printk("set vpu clk out of supported range\n");
+		goto set_vpu_clk_limit;
+	}
+#ifdef LIMIT_VPU_CLK_LOW
+	else if (clk_level < dft_clk_level) {
+		ret = 3;
+		printk("set vpu clk less than system default\n");
+		goto set_vpu_clk_limit;
+	}
+#endif
+	
+	if ((((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 9) & 0x7) != vpu_clk_setting[clk_level][1]) || (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 0) & 0x7f) != vpu_clk_setting[clk_level][2])) {
+		vpu_config.clk_level = clk_level;
+#ifdef CONFIG_SMP
+		try_exclu_cpu_exe(adjust_vpu_clk, &vpu_config);
+#else
+		adjust_vpu_clk(&vpu_config);
+#endif
+	}
+	if (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 8) & 1) == 0)
+		aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 8, 1);
+
+set_vpu_clk_limit:
+	mutex_unlock(&vpu_mutex);
+	return ret;
+}
+
+//***********************************************//
+//VPU_CLK control
+//***********************************************//
+/*
+ *  Function: get_vpu_clk_vmod
+ *      Get vpu clk holding frequency with specified vmod
+ *
+ *	Parameters:
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *
+ *  Returns:
+ *      unsigned int, vpu clk frequency unit in Hz
+ * 
+ *	Example:
+ *      video_clk = get_vpu_clk_vmod(VMODE_720P);
+ *      video_clk = get_vpu_clk_vmod(VPU_VIU_OSD1);
+ *
+*/
+unsigned int get_vpu_clk_vmod(unsigned int vmod)
+{
+	unsigned int vpu_mod;
+	unsigned int vpu_clk;
+	mutex_lock(&vpu_mutex);
+	
+	vpu_mod = get_vpu_mod(vmod);
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod < VPU_MAX)) {
+		vpu_clk = vpu_clk_vmod[vpu_mod - VPU_MOD_START];
+		vpu_clk = vpu_clk_setting[vpu_clk][0];
+	}
+	else {
+		vpu_clk = 0;
+		printk("unsupport vmod\n");
+	}
+	
+	mutex_unlock(&vpu_mutex);
+	return vpu_clk;
+}
+
+/*
+ *  Function: request_vpu_clk_vmod
+ *      Request a new vpu clk holding frequency with specified vmod
+ *      Will change vpu clk if the max level in all vmod vpu clk holdings is unequal to current vpu clk level
+ *
+ *	Parameters:
+ *      vclk - unsigned int, vpu clk frequency unit in Hz
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *
+ *  Returns:
+ *      int, 0 for success, 1 for failed
+ * 
+ *	Example:
+ *      ret = request_vpu_clk_vmod(100000000, VMODE_720P);
+ *      ret = request_vpu_clk_vmod(300000000, VPU_VIU_OSD1);
+ *
+*/
+int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod)
+{
+	int ret = 0;
+	unsigned clk_level;
+	unsigned vpu_mod;
+	mutex_lock(&vpu_mutex);
+	
+	if (vclk >= 100) {	//regard as vpu_clk
+		clk_level = get_vpu_clk_level(vclk);
+	}
+	else {	//regard as clk_level
+		clk_level = vclk;
+	}
+
+	if (clk_level >= CLK_LEVEL_MAX) {
+		ret = 1;
+		printk("set vpu clk out of supported range\n");
+		goto request_vpu_clk_limit;
+	}
+	
+	vpu_mod = get_vpu_mod(vmod);
+	if (vpu_mod == VPU_MAX) {
+		ret = 2;
+		printk("unsupport vmod\n");
+		goto request_vpu_clk_limit;
+	}
+	
+	vpu_clk_vmod[vpu_mod - VPU_MOD_START] = clk_level;
+	printk("request vpu clk holdings: %s %uHz\n", vpu_mod_table[vpu_mod - VPU_MOD_START], vpu_clk_setting[clk_level][0]);
+
+	clk_level = get_vpu_clk_level_max_vmod();
+#ifdef CONFIG_VPU_DYNAMIC_ADJ
+	if (clk_level != vpu_config.clk_level) {
+		vpu_config.clk_level = clk_level;
+#ifdef CONFIG_SMP
+		try_exclu_cpu_exe(adjust_vpu_clk, &vpu_config);
+#else
+		adjust_vpu_clk(&vpu_config);
+#endif
+	}
+#endif
+
+request_vpu_clk_limit:
+	mutex_unlock(&vpu_mutex);
+	return ret;
+}
+
+/*
+ *  Function: release_vpu_clk_vmod
+ *      Release vpu clk holding frequency to 0 with specified vmod
+ *      Will change vpu clk if the max level in all vmod vpu clk holdings is unequal to current vpu clk level
+ *
+ *	Parameters:
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *
+ *  Returns:
+ *      int, 0 for success, 1 for failed
+ * 
+ *	Example:
+ *      ret = release_vpu_clk_vmod(VMODE_720P);
+ *      ret = release_vpu_clk_vmod(VPU_VIU_OSD1);
+ *
+*/
+int release_vpu_clk_vmod(unsigned int vmod)
+{
+	int ret = 0;
+	unsigned clk_level;
+	unsigned vpu_mod;
+	mutex_lock(&vpu_mutex);
+	
+	clk_level = 0;
+	
+	vpu_mod = get_vpu_mod(vmod);
+	if (vpu_mod == VPU_MAX) {
+		ret = 2;
+		printk("unsupport vmod\n");
+		goto release_vpu_clk_limit;
+	}
+	
+	vpu_clk_vmod[vpu_mod - VPU_MOD_START] = clk_level;
+	printk("release vpu clk holdings: %s\n", vpu_mod_table[vpu_mod - VPU_MOD_START]);
+
+	clk_level = get_vpu_clk_level_max_vmod();
+#ifdef CONFIG_VPU_DYNAMIC_ADJ
+	if (clk_level != vpu_config.clk_level) {
+		vpu_config.clk_level = clk_level;
+#ifdef CONFIG_SMP
+		try_exclu_cpu_exe(adjust_vpu_clk, &vpu_config);
+#else
+		adjust_vpu_clk(&vpu_config);
+#endif
+	}
+#endif
+
+release_vpu_clk_limit:
+	mutex_unlock(&vpu_mutex);
+	return ret;
+}
+
+//***********************************************//
+//VPU_MEM_PD control
+//***********************************************//
+#define VPU_MEM_PD_MASK		0x3
+
+/*
+ *  Function: switch_vpu_mem_pd_vmod
+ *      switch vpu memory power down by specified vmod
+ *
+ *	Parameters:
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *      flag - int, on/off switch flag, must be one of the following constants:
+ *                 VPU_MEM_POWER_ON
+ *                 VPU_MEM_POWER_DOWN
+ * 
+ *	Example:
+ *      switch_vpu_mem_pd_vmod(VMODE_720P, VPU_MEM_POWER_ON);
+ *      switch_vpu_mem_pd_vmod(VPU_VIU_OSD1, VPU_MEM_POWER_DOWN);
+ *
+*/
+void switch_vpu_mem_pd_vmod(unsigned int vmod, int flag)
+{
+	unsigned vpu_mod;
+	unsigned vpu_mem_bit = 0;
+	unsigned long flags = 0;
+	spin_lock_irqsave(&vpu_mem_lock, flags);
+	
+	flag = (flag > 0) ? 1 : 0;
+	
+	vpu_mod = get_vpu_mod(vmod);
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod <= VPU_DI_POST)) {
+		vpu_mem_bit = (vpu_mod - VPU_MOD_START) * 2;
+		if (flag)
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		else
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, 0, vpu_mem_bit, 2);
+	}
+	else if ((vpu_mod >= VPU_VIU2_OSD1) && (vpu_mod <= VPU_VIU2_OSD_SCALE)) {
+		vpu_mem_bit = (vpu_mod - VPU_VIU2_OSD1) * 2;
+		if (flag)
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		else
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, vpu_mem_bit, 2);
+	}
+	else if ((vpu_mod >= VPU_VENCP) && (vpu_mod < VPU_MAX)) {
+		vpu_mem_bit = (vpu_mod - VPU_VENCP + 10) * 2;
+		if (flag) {
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		}
+		else {
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, vpu_mem_bit, 2);
+		}
+	}
+	else {
+		printk("switch_vpu_mem_pd: unsupport vpu mod\n");
+	}
+	printk("switch_vpu_mem_pd: %s %s\n", vpu_mod_table[vpu_mod - VPU_MOD_START], ((flag > 0) ? "OFF" : "ON"));
+	spin_unlock_irqrestore(&vpu_mem_lock, flags);
+}
+//***********************************************//
+
+int get_vpu_mem_pd_vmod(unsigned int vmod)
+{
+	unsigned vpu_mod;
+	unsigned vpu_mem_bit = 0;
+
+	vpu_mod = get_vpu_mod(vmod);
+
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod <= VPU_DI_POST)) {
+		vpu_mem_bit = (vpu_mod - VPU_MOD_START) * 2;
+		return (aml_get_reg32_bits(P_HHI_VPU_MEM_PD_REG0, vpu_mem_bit, 2) == 0) ? VPU_MEM_POWER_ON : VPU_MEM_POWER_DOWN;
+	}
+	else if ((vpu_mod >= VPU_VIU2_OSD1) && (vpu_mod <= VPU_VIU2_OSD_SCALE)) {
+		vpu_mem_bit = (vpu_mod - VPU_VIU2_OSD1) * 2;
+		return (aml_get_reg32_bits(P_HHI_VPU_MEM_PD_REG1, vpu_mem_bit, 2) == 0) ? VPU_MEM_POWER_ON : VPU_MEM_POWER_DOWN;
+	}
+	else if ((vpu_mod >= VPU_VENCP) && (vpu_mod < VPU_MAX)) {
+		vpu_mem_bit = (vpu_mod - VPU_VENCP + 10) * 2;
+		return (aml_get_reg32_bits(P_HHI_VPU_MEM_PD_REG1, vpu_mem_bit, 2) == 0) ? VPU_MEM_POWER_ON : VPU_MEM_POWER_DOWN;
+	}
+	else {
+		return -1;
+	}
+}
+
+//***********************************************//
+//VPU sysfs function
+//***********************************************//
+static const char * vpu_usage_str =
+{"Usage:\n"
+"	echo get > clk ; print current vpu clk\n"
+"	echo set <vclk> > clk ; force to set vpu clk\n"
+"	echo dump [vmod] > clk ; dump vpu clk by vmod, [vmod] is unnecessary\n"
+"	echo request <vclk> <vmod> > clk ; request vpu clk holding by vmod\n"
+"	echo release <vmod> > clk ; release vpu clk holding by vmod\n"
+"\n"
+"	request & release will change vpu clk if the max level in all vmod vpu clk holdings is unequal to current vpu clk level.\n" 
+"	vclk both support level and frequency value unit in Hz.\n"    
+"	vclk level & frequency:\n"
+"		0: 106.25M		1: 127.5M		2: 159.375M\n"
+"		3: 182.15M		4: 212.5M		5: 255M\n"
+"		6: 318.75M		7: 364.3M\n"//		8: 425M\n"
+//"		9: 510M			10: 637.5M\n"
+};
+
+static ssize_t vpu_debug_help(struct class *class, struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%s\n", vpu_usage_str);
+}
+
+static ssize_t vpu_debug(struct class *class, struct class_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int ret;
+	int i;
+	unsigned tmp[2];
+	
+	switch (buf[0])	{
+		case 'g':	//get
+			printk("get current vpu clk: %uHz\n", get_vpu_clk());
+			break;
+		case 's':	//set
+			tmp[0] = 4;
+			ret = sscanf(buf, "set %u", &tmp[0]);
+			if (tmp[0] > 100) {
+				printk("set vpu clk frequency: %uHz\n", tmp[0]);
+			}
+			else {
+				printk("set vpu clk level: %u\n", tmp[0]);
+			}
+			set_vpu_clk(tmp[0]);
+			break;
+		case 'r':
+			if (buf[2] == 'q') {	//request
+				tmp[0] = 0;
+				tmp[1] = VPU_MAX;
+				ret = sscanf(buf, "request %u %u", &tmp[0], &tmp[1]);
+				request_vpu_clk_vmod(tmp[0], tmp[1]);
+			}
+			else if (buf[2] == 'l') {	//release
+				tmp[0] = VPU_MAX;
+				ret = sscanf(buf, "release %u", &tmp[0]);
+				release_vpu_clk_vmod(tmp[0]);
+			}
+			break;
+		case 'd':
+			tmp[0] = VPU_MAX;
+			ret = sscanf(buf, "dump %u", &tmp[0]);
+			tmp[1] = get_vpu_mod(tmp[0]);
+			printk("vpu clk holdings:\n");
+			if (tmp[1] == VPU_MAX) {
+				for (i=VPU_MOD_START; i<VPU_MAX; i++) {
+					printk("%s:		%uHz(%u)\n", vpu_mod_table[i - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[i - VPU_MOD_START]][0], vpu_clk_vmod[i - VPU_MOD_START]);
+				}
+			}
+			else {
+				printk("%s:		%uHz(%u)\n", vpu_mod_table[tmp[1] - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[tmp[1] - VPU_MOD_START]][0], vpu_clk_vmod[tmp[1] - VPU_MOD_START]);
+			}
+			break;
+		default:
+			printk("wrong format of vpu debug command.\n");
+			break;
+	}	
+	
+	if (ret != 1 || ret !=2)
+		return -EINVAL;
+	
+	return count;
+	//return 0;
+}
+
+static struct class_attribute vpu_debug_class_attrs[] = {
+	__ATTR(clk, S_IRUGO | S_IWUSR, vpu_debug_help, vpu_debug),
+	__ATTR(help, S_IRUGO | S_IWUSR, vpu_debug_help, NULL),
+	__ATTR_NULL
+};
+
+static struct class aml_vpu_debug_class = {
+	.name = "vpu",
+	.class_attrs = vpu_debug_class_attrs,
+};
+//*********************************************************//
+
+static void vpu_driver_init(void)
+{	
+	set_vpu_clk(vpu_config.clk_level);
+	
+	//VPU MEM_PD, need to modify
+	aml_write_reg32(P_HHI_VPU_MEM_PD_REG0, vpu_config.mem_pd0);
+    aml_write_reg32(P_HHI_VPU_MEM_PD_REG1, vpu_config.mem_pd1);
+}
+
+static void vpu_driver_disable(void)
+{
+	vpu_config.mem_pd0 = aml_read_reg32(P_HHI_VPU_MEM_PD_REG0);
+	vpu_config.mem_pd1 = aml_read_reg32(P_HHI_VPU_MEM_PD_REG1);
+	
+	aml_write_reg32(P_HHI_VPU_MEM_PD_REG0, 0xffffffff);
+    aml_write_reg32(P_HHI_VPU_MEM_PD_REG1, 0xffffffff);
+	
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 0, 8, 1);
+}
+
+#ifdef CONFIG_PM
+static int vpu_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	vpu_driver_disable();
+	return 0;
+}
+
+static int vpu_resume(struct platform_device *pdev)
+{
+	vpu_driver_init();
+	return 0;
+}
+#endif
+
+static int get_vpu_config(struct platform_device *pdev)
+{
+	int ret=0;
+	unsigned int val;
+	struct device_node *vpu_np;
+	
+	//mesonfb_np = of_find_node_by_name(NULL,"mesonfb");
+	vpu_np = pdev->dev.of_node;
+	if (!vpu_np) {
+		printk("don't find match vpu node\n");
+		return -1;
+	}
+
+	ret = of_property_read_u32(vpu_np,"clk_level",&val);
+	if(ret){
+		printk("don't find to match clk_level, use default setting.\n");
+	}
+	else {		
+		if (val >= 100) {	//regard as vpu_clk
+			val = get_vpu_clk_level(val);
+		}
+
+		if (val >= CLK_LEVEL_MAX) {
+			printk("vpu clk_level in dts is out of support range, use default setting\n");
+			val = CLK_LEVEL_DFT;
+		}
+		
+		vpu_config.clk_level = val;
+		dft_clk_level = val;
+		printk("load vpu_clk in dts: %uHz(%u)\n", vpu_clk_setting[vpu_config.clk_level][0], vpu_config.clk_level);
+	}
+	
+	return ret;
+}
+
+static struct of_device_id vpu_of_table[]=
+{
+	{
+		.compatible="amlogic,vpu",
+	},
+	{},
+};
+
+static int vpu_probe(struct platform_device *pdev)
+{	
+	int ret;
+	
+	spin_lock_init(&vpu_lock);
+	spin_lock_init(&vpu_mem_lock);
+	
+	printk("VPU driver version: %s\n", VPU_VERION);
+	get_vpu_config(pdev);
+	set_vpu_clk(vpu_config.clk_level);
+	
+	ret = class_register(&aml_vpu_debug_class);
+	if(ret){
+		printk("class register aml_vpu_debug_class fail!\n");
+	}
+	
+	printk("%s OK\n", __FUNCTION__);
+	return 0;
+}
+
+static int vpu_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver vpu_driver = {
+	.driver = {
+		.name = "vpu",
+		.owner = THIS_MODULE,
+		.of_match_table=of_match_ptr(vpu_of_table),
+	},
+	.probe = vpu_probe,
+	.remove = vpu_remove,
+#ifdef CONFIG_PM
+	.suspend    = vpu_suspend,
+	.resume     = vpu_resume,
+#endif
+};
+
+static int __init vpu_init(void)
+{
+	return platform_driver_register(&vpu_driver);
+}
+
+static void __exit vpu_exit(void)
+{
+	platform_driver_unregister(&vpu_driver);
+}
+
+postcore_initcall(vpu_init);
+module_exit(vpu_exit);
+
+MODULE_DESCRIPTION("m8 vpu control");
+MODULE_LICENSE("GPL v2");
diff --git a/arch/arm/plat-meson/Kconfig b/arch/arm/plat-meson/Kconfig
index cb460065bf7d..99fe9e4a22c1 100755
--- a/arch/arm/plat-meson/Kconfig
+++ b/arch/arm/plat-meson/Kconfig
@@ -26,9 +26,27 @@ config ARCH_MESON8
     help
         Enable support for Amlogic Meson8 based system
 
+config ARCH_MESON8B
+    bool "Meson8 baby series"
+    help
+        Enable support for Amlogic Meson8 baby based system
+
 endchoice
 
-choice
+menu "Meson development boards"
+
+source "arch/arm/mach-meson6/Kconfig.boards"
+source "arch/arm/mach-meson8/Kconfig.boards"
+source "arch/arm/mach-meson8b/Kconfig.boards"
+
+#if MESON_CUSTOM_BOARD_SUPPORT
+#isource "customer/meson/dt/Kconfig"
+#endif # MESON_CUSTOM_BOARD_SUPPORT
+
+endmenu # "Meson reference boards"
+
+choice 
+>>>>>>> 3c525bb... meson8b: compile ok
 	prompt "Interrupt Controller Select"
 	default MESON_ARM_GIC
 config MESON_IRQ
@@ -92,6 +110,7 @@ source "arch/arm/mach-meson6/Kconfig"
 source "arch/arm/mach-meson6tv/Kconfig"
 source "arch/arm/mach-meson6tvd/Kconfig"
 source "arch/arm/mach-meson8/Kconfig"
+source "arch/arm/mach-meson8b/Kconfig"
 
 config MESON_CUSTOM_BOARD_SUPPORT
 	bool "Support customer board"
@@ -99,6 +118,7 @@ config MESON_CUSTOM_BOARD_SUPPORT
 	help
 	  This enables board definition from external customer directory
 
+<<<<<<< HEAD
 menu "Meson development boards"
 
 source "arch/arm/mach-meson6/Kconfig.boards"
@@ -112,6 +132,8 @@ source "arch/arm/mach-meson8/Kconfig.boards"
 
 endmenu # "Meson reference boards"
 
+=======
+>>>>>>> 3c525bb... meson8b: compile ok
 menu "Meson customer board drivers"
 depends on MESON_CUSTOM_BOARD_SUPPORT
 #isource "customer/drivers/Kconfig"
diff --git a/arch/arm/plat-meson/include/plat/cpu.h b/arch/arm/plat-meson/include/plat/cpu.h
index 32df4eea15fd..87af91b4f8d0 100755
--- a/arch/arm/plat-meson/include/plat/cpu.h
+++ b/arch/arm/plat-meson/include/plat/cpu.h
@@ -34,6 +34,7 @@
 #define MESON_CPU_TYPE_MESON6TV		0x70
 #define MESON_CPU_TYPE_MESON6TVD	0x75
 #define MESON_CPU_TYPE_MESON8		0x80
+#define MESON_CPU_TYPE_MESON8B		0x8B
 
 #define MESON_CPU_VERSION_LVL_MAJOR	0
 #define MESON_CPU_VERSION_LVL_MINOR	1
diff --git a/mk_m8b.sh b/mk_m8b.sh
new file mode 100644
index 000000000000..fbdda80640b2
--- /dev/null
+++ b/mk_m8b.sh
@@ -0,0 +1,20 @@
+#! /bin/bash
+
+#make UIMAGE_COMPRESSION=none uImage -j
+make uImage -j
+#make modules
+
+make meson8_skt.dtd
+make meson8_skt.dtb
+
+#cd ../root/g18
+#find .| cpio -o -H newc | gzip -9 > ../ramdisk.img
+
+#rootfs.cpio -- original buildroot rootfs, busybox
+#m8rootfs.cpio -- build from buildroot
+ROOTFS="rootfs.cpio"
+
+#cd ..
+./mkbootimg --kernel ./arch/arm/boot/uImage --ramdisk ./${ROOTFS} --second ./arch/arm/boot/dts/amlogic/meson8b_skt.dtb --output ./m8boot.img
+ls -l ./m8boot.img
+echo "m8boot.img for m8 baby done"
-- 
2.19.0

