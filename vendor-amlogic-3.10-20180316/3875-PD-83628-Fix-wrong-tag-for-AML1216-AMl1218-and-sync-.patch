From 8f9fe1de02d7b60404f343468fc1d490f9623ccf Mon Sep 17 00:00:00 2001
From: "tao.zeng" <tao.zeng@amlogic.com>
Date: Thu, 3 Apr 2014 19:48:14 +0800
Subject: [PATCH 3875/5965] PD #83628: Fix wrong tag for AML1216/AMl1218 and
 sync code for AML1218

---
 drivers/amlogic/power/aml_pmu/aml1216-rw.c   |  18 ++--
 drivers/amlogic/power/aml_pmu/aml1216-sply.c |  84 ++++++++--------
 drivers/amlogic/power/aml_pmu/aml1218-rw.c   |  18 ++--
 drivers/amlogic/power/aml_pmu/aml1218-sply.c | 100 +++++++++++--------
 include/linux/amlogic/aml_pmu.h              |   4 +-
 5 files changed, 121 insertions(+), 103 deletions(-)

diff --git a/drivers/amlogic/power/aml_pmu/aml1216-rw.c b/drivers/amlogic/power/aml_pmu/aml1216-rw.c
index 21a45a645c13..1280fdb2c7cb 100755
--- a/drivers/amlogic/power/aml_pmu/aml1216-rw.c
+++ b/drivers/amlogic/power/aml_pmu/aml1216-rw.c
@@ -28,7 +28,7 @@
 #define MAX_BUF         100
 #define CHECK_DRIVER()      \
     if (!g_aml1216_client) {        \
-        AML_DBG("driver is not ready right now, wait...\n");   \
+        AML1216_DBG("driver is not ready right now, wait...\n");   \
         dump_stack();       \
         return -ENODEV;     \
     }
@@ -55,7 +55,7 @@ int aml1216_write(int32_t add, uint8_t val)
     buf[2] = val & 0xff;
     ret = i2c_transfer(pdev->adapter, msg, 1);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1216_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -85,7 +85,7 @@ int aml1216_write16(int32_t add, uint16_t val)
     buf[3] = (val >> 8) & 0xff;
     ret = i2c_transfer(pdev->adapter, msg, 1);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1216_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -114,7 +114,7 @@ int aml1216_writes(int32_t add, uint8_t *buff, int len)
     memcpy(buf + 2, buff, len > MAX_BUF ? MAX_BUF : len);
     ret = i2c_transfer(pdev->adapter, msg, 1);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1216_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -148,7 +148,7 @@ int aml1216_read(int add, uint8_t *val)
     buf[1] = (add >> 8) & 0x0f;
     ret = i2c_transfer(pdev->adapter, msg, 2);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1216_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -182,7 +182,7 @@ int aml1216_read16(int add, uint16_t *val)
     buf[1] = (add >> 8) & 0x0f;
     ret = i2c_transfer(pdev->adapter, msg, 2);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1216_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -216,7 +216,7 @@ int aml1216_reads(int add, uint8_t *buff, int len)
     buf[1] = (add >> 8) & 0x0f;
     ret = i2c_transfer(pdev->adapter, msg, 2);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1216_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -243,7 +243,7 @@ static int find_idx(uint32_t start, uint32_t target, uint32_t step, int size)
     int i = 0; 
 
     if (start < target) {
-        AML_DBG("%s, invalid input of voltage:%u\n", __func__, target);    
+        AML1216_DBG("%s, invalid input of voltage:%u\n", __func__, target);    
         return -1;
     }
     do { 
@@ -254,7 +254,7 @@ static int find_idx(uint32_t start, uint32_t target, uint32_t step, int size)
         i++; 
     } while (i < size);
     if (i >= size) {
-        AML_DBG("%s, input voltage %u outof range\n", __func__, target);    
+        AML1216_DBG("%s, input voltage %u outof range\n", __func__, target);    
         return -1;
     }
 
diff --git a/drivers/amlogic/power/aml_pmu/aml1216-sply.c b/drivers/amlogic/power/aml_pmu/aml1216-sply.c
index 3fa180d00262..8015643855e2 100755
--- a/drivers/amlogic/power/aml_pmu/aml1216-sply.c
+++ b/drivers/amlogic/power/aml_pmu/aml1216-sply.c
@@ -42,7 +42,7 @@
 
 #define CHECK_DRIVER()      \
     if (!g_aml1216_supply) {        \
-        AML_DBG("driver is not ready right now, wait...\n");   \
+        AML1216_DBG("driver is not ready right now, wait...\n");   \
         dump_stack();       \
         return -ENODEV;     \
     }
@@ -160,7 +160,7 @@ int aml1216_set_dcin(int enable)
     if (!enable) {
         val |= 0x01;
     }
-    AML_DBG("%s:%s\n", __func__, enable ? "enable" : "disable");
+    AML1216_DBG("%s:%s\n", __func__, enable ? "enable" : "disable");
 
     return aml1216_set_bits(0x002a, val, 0x01);
 }
@@ -172,26 +172,26 @@ int aml1216_set_gpio(int pin, int val)
     uint32_t data;
 
     if (pin <= 0 || pin > 3 || val > 1 || val < 0) { 
-        AML_DBG("ERROR, invalid input value, pin = %d, val= %d\n", pin, val);
+        AML1216_DBG("ERROR, invalid input value, pin = %d, val= %d\n", pin, val);
         return -1;
     }    
     if (val < 2) { 
         data = ((val ? 1 : 0) << (pin));
     } else {
-        AML_DBG("%s, not support value for 1216:%d\n", __func__, val);
+        AML1216_DBG("%s, not support value for 1216:%d\n", __func__, val);
         return -1;
     }    
-    AML_DBG("%s, GPIO:%d, val:%d\n", __func__, pin, val);
+    AML1216_DBG("%s, GPIO:%d, val:%d\n", __func__, pin, val);
     return aml1216_set_bits(0x0013, data, (1 << pin));
 #else
     uint32_t data;
 
     if (pin <= 0 || pin > 4 || val > 1 || val < 0) {
-        AML_DBG("ERROR, invalid input value, pin = %d, val= %d\n", pin, val);
+        AML1216_DBG("ERROR, invalid input value, pin = %d, val= %d\n", pin, val);
         return -EINVAL;
     }
     data = (1 << (pin + 11));
-    AML_DBG("%s, GPIO:%d, val:%d\n", __func__, pin, val);
+    AML1216_DBG("%s, GPIO:%d, val:%d\n", __func__, pin, val);
     if (val) {
         return aml1216_write16(0x0084, data);
     } else {
@@ -207,7 +207,7 @@ int aml1216_get_gpio(int gpio, int *val)
     uint8_t data;
 
     if (gpio <= 0 || gpio> 4 || !val) { 
-        AML_DBG("ERROR, invalid input value, gpio = %d, val= %p\n", gpio, val);
+        AML1216_DBG("ERROR, invalid input value, gpio = %d, val= %p\n", gpio, val);
         return -EINVAL;
     }
     ret = aml1216_read(AML1216_GPIO_INPUT_STATUS, &data);
@@ -233,13 +233,13 @@ void aml1216_power_off()
     aml1216_set_gpio(1, 1);
     aml1216_set_gpio(2, 1);
     aml1216_set_gpio(3, 1);
-    AML_DBG("software goto OFF state\n");
+    AML1216_DBG("software goto OFF state\n");
     mdelay(10);
     aml1216_write(AML1216_GEN_CNTL1, buf);    
     udelay(1000);
     while (1) {
         msleep(1000);
-        AML_DBG("%s, error\n", __func__);
+        AML1216_DBG("%s, error\n", __func__);
     }
 }
 EXPORT_SYMBOL_GPL(aml1216_power_off);
@@ -248,7 +248,7 @@ int aml1216_set_usb_current_limit(int limit)
 {
     int val;
     if ((limit < 100 || limit > 1600) && (limit != -1)) {
-       AML_DBG("%s, wrong usb current limit:%d\n", __func__, limit); 
+       AML1216_DBG("%s, wrong usb current limit:%d\n", __func__, limit); 
        return -1;
     }
     if (limit == -1) {                                       // -1 means not limit, so set limit to max
@@ -257,7 +257,7 @@ int aml1216_set_usb_current_limit(int limit)
     val = (limit-100)/ 100;
     val ^= 0x04;                                            // bit 2 is reverse bit
     
-    AML_DBG("%s, set usb current limit to %d, bit:%02x\n", __func__, limit, val);
+    AML1216_DBG("%s, set usb current limit to %d, bit:%02x\n", __func__, limit, val);
     return aml1216_set_bits(0x002D, val, 0x0f);
     
 }
@@ -268,7 +268,7 @@ int aml1216_set_usb_voltage_limit(int voltage)
     uint8_t val;
 
     if (voltage > 4600 || voltage < 4300) {
-        AML_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);    
+        AML1216_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);    
     }
     aml1216_read(AML1216_CHG_CTRL5, &val);
     val &= ~(0xc0);
@@ -290,7 +290,7 @@ int aml1216_set_usb_voltage_limit(int voltage)
         break;
     
     default:
-        AML_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);
+        AML1216_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);
         return -1;
     }
     aml1216_write(AML1216_CHG_CTRL5, val);
@@ -316,7 +316,7 @@ int aml1216_set_charging_current(int curr)
     int idx_cur, idx_to, val = 0;
 
     if (curr > 2100 * 1000 || curr < 0) {
-        AML_DBG("%s, wrong input of charge current:%d\n", __func__, curr);
+        AML1216_DBG("%s, wrong input of charge current:%d\n", __func__, curr);
         return -1;
     }
     if (curr > 100) {                        // input is uA
@@ -333,7 +333,7 @@ int aml1216_set_charging_current(int curr)
 
     idx_to = (curr - 300) / 150;
     aml1216_read(0x012b, (unsigned char *)&val);
-    AML_DBG("%s to %dmA, idx_to:%x, idx_cur:%x\n", __func__, idx_to * 150 + 300, idx_to, val);
+    AML1216_DBG("%s to %dmA, idx_to:%x, idx_cur:%x\n", __func__, idx_to * 150 + 300, idx_to, val);
     idx_cur = val & 0x0f;
 
     while (idx_cur != idx_to) {
@@ -357,7 +357,7 @@ int aml1216_set_trickle_time(int minutes)
     int bits;
 
     if (minutes < 30 && minutes > 80) {
-        AML_DBG("%s, invalid trickle time:%d\n", __func__, minutes);
+        AML1216_DBG("%s, invalid trickle time:%d\n", __func__, minutes);
         return -EINVAL;
     }
     switch (minutes) {
@@ -365,7 +365,7 @@ int aml1216_set_trickle_time(int minutes)
     case 50:     bits = 0x08;     break;
     case 80:     bits = 0x0c;     break;
     default:
-        AML_DBG("%s, unsupported trickle value:%d\n", __func__, minutes);
+        AML1216_DBG("%s, unsupported trickle value:%d\n", __func__, minutes);
         return -EINVAL;
     }
     return aml1216_set_bits(0x012A, bits, 0x0c);
@@ -376,7 +376,7 @@ int aml1216_set_rapid_time(int minutes)
     int bits;
 
     if (minutes > 360 || minutes < 720) {
-        AML_DBG("%s, invalid rapid time:%d\n", __func__, minutes);
+        AML1216_DBG("%s, invalid rapid time:%d\n", __func__, minutes);
         return -EINVAL;
     }
     switch (minutes) {
@@ -384,7 +384,7 @@ int aml1216_set_rapid_time(int minutes)
     case 540:     bits = 0x08;     break;
     case 720:     bits = 0x0c;     break;
     default:
-        AML_DBG("%s, unsupported rapid value:%d\n", __func__, minutes);
+        AML1216_DBG("%s, unsupported rapid value:%d\n", __func__, minutes);
         return -EINVAL;
     }
     return aml1216_set_bits(0x0129, bits, 0x0c);
@@ -396,7 +396,7 @@ int aml1216_set_full_charge_voltage(int voltage)
     uint8_t tmp;
     
     if (voltage > 4400000 || voltage < 4050000) {
-        AML_DBG("%s,Wrong charge voltage:%d\n", __func__, voltage);
+        AML1216_DBG("%s,Wrong charge voltage:%d\n", __func__, voltage);
         return -1;
     }
     tmp = ((voltage - 4050000) / 50000);
@@ -424,7 +424,7 @@ int aml1216_set_charge_end_rate(int rate)
         break;
 
     default:
-        AML_DBG("%s, Wrong charge end rate:%d\n", __func__, rate);
+        AML1216_DBG("%s, Wrong charge end rate:%d\n", __func__, rate);
         return -1;
     }
     aml1216_write(AML1216_CHG_CTRL6, val);
@@ -453,7 +453,7 @@ static int aml1216_get_coulomber(struct aml_charger *charger)
 
     ret = aml1216_reads(0x0152, buf, 4);
     if (ret) {
-        AML_DBG("%s, failed: %d\n", __func__, __LINE__);
+        AML1216_DBG("%s, failed: %d\n", __func__, __LINE__);
         return ret;
     }
 
@@ -479,7 +479,7 @@ static int aml1216_get_coulomber(struct aml_charger *charger)
 
     ret = aml1216_reads(0x0158, buf, 4);
     if (ret) {
-        AML_DBG("%s, failed: %d\n", __func__, __LINE__);
+        AML1216_DBG("%s, failed: %d\n", __func__, __LINE__);
         return ret;
     }
     discharge_result = (buf[0] <<  0) |
@@ -593,7 +593,7 @@ static void aml1216_battery_check_health(struct aml1216_supply       *supply,
 
     if (status == 0x30) {
         // TODO: add other check method?
-        AML_DBG("%s, battery error detect\n", __func__);
+        AML1216_DBG("%s, battery error detect\n", __func__);
         val->intval = POWER_SUPPLY_HEALTH_UNSPEC_FAILURE;
     } else {
         val->intval = POWER_SUPPLY_HEALTH_GOOD;
@@ -812,7 +812,7 @@ static void aml1216_otg_work_fun(struct work_struct *work)
     if (aml1216_otg_value == -1) {
         return ;    
     }
-    AML_DBG("%s, OTG value:%d, is_short:%d\n", __func__, aml1216_otg_value, g_aml1216_init->vbus_dcin_short_connect);
+    AML1216_DBG("%s, OTG value:%d, is_short:%d\n", __func__, aml1216_otg_value, g_aml1216_init->vbus_dcin_short_connect);
     if (aml1216_otg_value) {
         if (g_aml1216_init->vbus_dcin_short_connect) {
             aml1216_set_dcin(0);                            // cut off dcin for single usb port device
@@ -1118,13 +1118,13 @@ static ssize_t report_delay_store(struct device *dev, struct device_attribute *a
     uint32_t tmp = simple_strtoul(buf, NULL, 10);
 
     if (tmp > 200) {
-        AML_DBG("input too large, failed to set report_delay\n");
+        AML1216_DBG("input too large, failed to set report_delay\n");
         return count;
     }
     if (api && api->pmu_set_report_delay) {
         api->pmu_set_report_delay(tmp);
     } else {
-        AML_DBG("API not found\n");
+        AML1216_DBG("API not found\n");
     }
     return count;
 }
@@ -1198,7 +1198,7 @@ static int aml1216_update_state(struct aml_charger *charger)
     charger->ocv  = aml1216_cal_ocv(charger->ibat, charger->vbat, charger->charge_status);
 
     if (val & 0x40) {
-        AML_DBG("%s, charge timeout, val:0x%02x, reset charger now\n", __func__, val);
+        AML1216_DBG("%s, charge timeout, val:0x%02x, reset charger now\n", __func__, val);
         aml1216_set_charge_enable(0);
         msleep(1000);
         aml1216_set_charge_enable(1);               
@@ -1253,7 +1253,7 @@ static void aml1216_charging_monitor(struct work_struct *work)
         charger->charge_status == CHARGER_DISCHARGING) {
         over_discharge_cnt++;
         if (over_discharge_cnt >= 5) {
-            AML_DBG("%s, battery is over-discharge now, force system power off\n", __func__);
+            AML1216_DBG("%s, battery is over-discharge now, force system power off\n", __func__);
             power_protection = 1;
         }
     } else {
@@ -1265,7 +1265,7 @@ static void aml1216_charging_monitor(struct work_struct *work)
         (pre_chg_status != charger->charge_status) ||
         charger->resume                            ||
         power_protection) {
-        AML_DBG("battery vol change: %d->%d \n", pre_rest_cap, charger->rest_vol);
+        AML1216_DBG("battery vol change: %d->%d \n", pre_rest_cap, charger->rest_vol);
         if (unlikely(charger->resume)) {
             charger->resume = 0;                                        // MUST clear this flag
         }
@@ -1353,10 +1353,10 @@ static int aml1216_battery_probe(struct platform_device *pdev)
     int      ret;
     uint32_t tmp2;
 
-	AML_DBG("call %s in", __func__);
+	AML1216_DBG("call %s in", __func__);
     g_aml1216_init = pdev->dev.platform_data;
     if (g_aml1216_init == NULL) {
-        AML_DBG("%s, NO platform data\n", __func__);
+        AML1216_DBG("%s, NO platform data\n", __func__);
         return -EINVAL;
     }
     aml1216_power_key = input_allocate_device();
@@ -1384,14 +1384,14 @@ static int aml1216_battery_probe(struct platform_device *pdev)
 #ifdef CONFIG_UBOOT_BATTERY_PARAMETERS 
     if (get_uboot_battery_para_status() == UBOOT_BATTERY_PARA_SUCCESS) {
         aml1216_battery = get_uboot_battery_para();
-        AML_DBG("use uboot passed battery parameters\n");
+        AML1216_DBG("use uboot passed battery parameters\n");
     } else {
         aml1216_battery = g_aml1216_init->board_battery; 
-        AML_DBG("uboot battery parameter not get, use BSP configed battery parameters\n");
+        AML1216_DBG("uboot battery parameter not get, use BSP configed battery parameters\n");
     }
 #else
     aml1216_battery = g_aml1216_init->board_battery; 
-    AML_DBG("use BSP configed battery parameters\n");
+    AML1216_DBG("use BSP configed battery parameters\n");
 #endif
 
     /*
@@ -1428,7 +1428,7 @@ static int aml1216_battery_probe(struct platform_device *pdev)
         supply->battery_info->use_for_apm        = 1;
         supply->battery_info->name               = aml1216_battery->pmu_battery_name;
     } else {
-        AML_DBG(" NO BATTERY_PARAMETERS FOUND\n");
+        AML1216_DBG(" NO BATTERY_PARAMETERS FOUND\n");
     }
 
     charger->soft_limit_to99     = g_aml1216_init->soft_limit_to99;
@@ -1445,7 +1445,7 @@ static int aml1216_battery_probe(struct platform_device *pdev)
                           AML1216_IRQ_NAME,
                           supply); 
         if (ret) {
-            AML_DBG("request irq failed, ret:%d, irq:%d\n", ret, supply->irq);    
+            AML1216_DBG("request irq failed, ret:%d, irq:%d\n", ret, supply->irq);    
         }
     }
 
@@ -1496,7 +1496,7 @@ static int aml1216_battery_probe(struct platform_device *pdev)
     }
     
     aml1216_dump_all_register();
-	AML_DBG("call %s exit, ret:%d", __func__, ret);
+	AML1216_DBG("call %s exit, ret:%d", __func__, ret);
     return ret;
 
 err_ps_register:
@@ -1508,7 +1508,7 @@ err_charger_init:
     kfree(supply);
     input_unregister_device(aml1216_power_key);
     kfree(aml1216_power_key);
-	AML_DBG("call %s exit, ret:%d", __func__, ret);
+	AML1216_DBG("call %s exit, ret:%d", __func__, ret);
     return ret;
 }
 
@@ -1546,7 +1546,7 @@ static int aml1216_suspend(struct platform_device *dev, pm_message_t state)
     }
 #ifdef CONFIG_HAS_EARLYSUSPEND
     if (early_power_status != supply->aml_charger.ext_valid) {
-        AML_DBG("%s, power status changed, prev:%x, now:%x, exit suspend process\n", 
+        AML1216_DBG("%s, power status changed, prev:%x, now:%x, exit suspend process\n", 
                 __func__, early_power_status, supply->aml_charger.ext_valid);
         input_report_key(aml1216_power_key, KEY_POWER, 1);              // assume power key pressed 
         input_sync(aml1216_power_key);
@@ -1598,7 +1598,7 @@ static int aml1216_battery_init(void)
 {
     int ret;
     ret = platform_driver_register(&aml1216_battery_driver);
-	AML_DBG("call %s, ret = %d\n", __func__, ret);
+	AML1216_DBG("call %s, ret = %d\n", __func__, ret);
 	return ret;
 }
 
diff --git a/drivers/amlogic/power/aml_pmu/aml1218-rw.c b/drivers/amlogic/power/aml_pmu/aml1218-rw.c
index ccf90d4be12a..3cd370dd8830 100755
--- a/drivers/amlogic/power/aml_pmu/aml1218-rw.c
+++ b/drivers/amlogic/power/aml_pmu/aml1218-rw.c
@@ -28,7 +28,7 @@
 #define MAX_BUF         100
 #define CHECK_DRIVER()      \
     if (!g_aml1218_client) {        \
-        AML_DBG("driver is not ready right now, wait...\n");   \
+        AML1218_DBG("driver is not ready right now, wait...\n");   \
         dump_stack();       \
         return -ENODEV;     \
     }
@@ -57,7 +57,7 @@ int aml1218_write(int32_t add, uint8_t val)
     buf[2] = val & 0xff;
     ret = i2c_transfer(pdev->adapter, msg, 1);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1218_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -87,7 +87,7 @@ int aml1218_write16(int32_t add, uint16_t val)
     buf[3] = (val >> 8) & 0xff;
     ret = i2c_transfer(pdev->adapter, msg, 1);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1218_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -116,7 +116,7 @@ int aml1218_writes(int32_t add, uint8_t *buff, int len)
     memcpy(buf + 2, buff, len > MAX_BUF ? MAX_BUF : len);
     ret = i2c_transfer(pdev->adapter, msg, 1);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1218_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -150,7 +150,7 @@ int aml1218_read(int add, uint8_t *val)
     buf[1] = (add >> 8) & 0x0f;
     ret = i2c_transfer(pdev->adapter, msg, 2);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1218_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -184,7 +184,7 @@ int aml1218_read16(int add, uint16_t *val)
     buf[1] = (add >> 8) & 0x0f;
     ret = i2c_transfer(pdev->adapter, msg, 2);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1218_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -218,7 +218,7 @@ int aml1218_reads(int add, uint8_t *buff, int len)
     buf[1] = (add >> 8) & 0x0f;
     ret = i2c_transfer(pdev->adapter, msg, 2);
     if (ret < 0) {
-        AML_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
+        AML1218_DBG("%s: i2c transfer failed, ret:%d\n", __FUNCTION__, ret);
         return ret;
     }
     return 0;
@@ -245,7 +245,7 @@ static int find_idx(uint32_t start, uint32_t target, uint32_t step, int size)
     int i = 0; 
 
     if (start < target) {
-        AML_DBG("%s, invalid input of voltage:%u\n", __func__, target);    
+        AML1218_DBG("%s, invalid input of voltage:%u\n", __func__, target);    
         return -1;
     }
     do { 
@@ -256,7 +256,7 @@ static int find_idx(uint32_t start, uint32_t target, uint32_t step, int size)
         i++; 
     } while (i < size);
     if (i >= size) {
-        AML_DBG("%s, input voltage %u outof range\n", __func__, target);    
+        AML1218_DBG("%s, input voltage %u outof range\n", __func__, target);    
         return -1;
     }
 
diff --git a/drivers/amlogic/power/aml_pmu/aml1218-sply.c b/drivers/amlogic/power/aml_pmu/aml1218-sply.c
index 9c8e8afcbc16..4886ae7e1d81 100755
--- a/drivers/amlogic/power/aml_pmu/aml1218-sply.c
+++ b/drivers/amlogic/power/aml_pmu/aml1218-sply.c
@@ -42,7 +42,7 @@
 
 #define CHECK_DRIVER()      \
     if (!g_aml1218_supply) {        \
-        AML_DBG("driver is not ready right now, wait...\n");   \
+        AML1218_DBG("driver is not ready right now, wait...\n");   \
         dump_stack();       \
         return -ENODEV;     \
     }
@@ -160,7 +160,7 @@ int aml1218_set_dcin(int enable)
     if (!enable) {
         val |= 0x01;
     }
-    AML_DBG("%s:%s\n", __func__, enable ? "enable" : "disable");
+    AML1218_DBG("%s:%s\n", __func__, enable ? "enable" : "disable");
 
     return aml1218_set_bits(0x002a, val, 0x01);
 }
@@ -168,20 +168,36 @@ EXPORT_SYMBOL_GPL(aml1218_set_dcin);
 
 int aml1218_set_gpio(int pin, int val)
 {
+#if 0
     uint32_t data;
 
     if (pin <= 0 || pin > 3 || val > 1 || val < 0) { 
-        AML_DBG("ERROR, invalid input value, pin = %d, val= %d\n", pin, val);
+        AML1218_DBG("ERROR, invalid input value, pin = %d, val= %d\n", pin, val);
         return -1;
     }    
     if (val < 2) { 
         data = ((val ? 1 : 0) << (pin));
     } else {
-        AML_DBG("%s, not support value for 1218:%d\n", __func__, val);
+        AML1218_DBG("%s, not support value for 1218:%d\n", __func__, val);
         return -1;
     }    
-    AML_DBG("%s, GPIO:%d, val:%d\n", __func__, pin, val);
+    AML1218_DBG("%s, GPIO:%d, val:%d\n", __func__, pin, val);
     return aml1218_set_bits(0x0013, data, (1 << pin));
+#else
+    uint32_t data;
+
+    if (pin <= 0 || pin > 4 || val > 1 || val < 0) {
+        AML1218_DBG("ERROR, invalid input value, pin = %d, val= %d\n", pin, val);
+        return -EINVAL;
+    }
+    data = (1 << (pin + 11));
+    AML1218_DBG("%s, GPIO:%d, val:%d\n", __func__, pin, val);
+    if (val) {
+        return aml1218_write16(0x0084, data);
+    } else {
+        return aml1218_write16(0x0082, data);
+    }
+#endif
 }
 EXPORT_SYMBOL_GPL(aml1218_set_gpio);
 
@@ -191,7 +207,7 @@ int aml1218_get_gpio(int gpio, int *val)
     uint8_t data;
 
     if (gpio <= 0 || gpio> 4 || !val) { 
-        AML_DBG("ERROR, invalid input value, gpio = %d, val= %p\n", gpio, val);
+        AML1218_DBG("ERROR, invalid input value, gpio = %d, val= %p\n", gpio, val);
         return -EINVAL;
     }
     ret = aml1218_read(AML1218_GPIO_INPUT_STATUS, &data);
@@ -217,13 +233,13 @@ void aml1218_power_off()
     aml1218_set_gpio(1, 1);
     aml1218_set_gpio(2, 1);
     aml1218_set_gpio(3, 1);
-    AML_DBG("software goto OFF state\n");
+    AML1218_DBG("software goto OFF state\n");
     mdelay(10);
     aml1218_write(AML1218_GEN_CNTL1, buf);    
     udelay(1000);
     while (1) {
         msleep(1000);
-        AML_DBG("%s, error\n", __func__);
+        AML1218_DBG("%s, error\n", __func__);
     }
 }
 EXPORT_SYMBOL_GPL(aml1218_power_off);
@@ -232,7 +248,7 @@ int aml1218_set_usb_current_limit(int limit)
 {
     int val;
     if ((limit < 100 || limit > 1600) && (limit != -1)) {
-       AML_DBG("%s, wrong usb current limit:%d\n", __func__, limit); 
+       AML1218_DBG("%s, wrong usb current limit:%d\n", __func__, limit); 
        return -1;
     }
     if (limit == -1) {                                       // -1 means not limit, so set limit to max
@@ -241,7 +257,7 @@ int aml1218_set_usb_current_limit(int limit)
     val = (limit-100)/ 100;
     val ^= 0x04;                                            // bit 2 is reverse bit
     
-    AML_DBG("%s, set usb current limit to %d, bit:%02x\n", __func__, limit, val);
+    AML1218_DBG("%s, set usb current limit to %d, bit:%02x\n", __func__, limit, val);
     return aml1218_set_bits(0x002D, val, 0x0f);
     
 }
@@ -252,7 +268,7 @@ int aml1218_set_usb_voltage_limit(int voltage)
     uint8_t val;
 
     if (voltage > 4600 || voltage < 4300) {
-        AML_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);    
+        AML1218_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);    
     }
     aml1218_read(AML1218_CHG_CTRL5, &val);
     val &= ~(0xc0);
@@ -274,7 +290,7 @@ int aml1218_set_usb_voltage_limit(int voltage)
         break;
     
     default:
-        AML_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);
+        AML1218_DBG("%s, Wrong usb voltage limit:%d\n", __func__, voltage);
         return -1;
     }
     aml1218_write(AML1218_CHG_CTRL5, val);
@@ -300,7 +316,7 @@ int aml1218_set_charging_current(int curr)
     int idx_cur, idx_to, val = 0;
 
     if (curr > 2100 * 1000 || curr < 0) {
-        AML_DBG("%s, wrong input of charge current:%d\n", __func__, curr);
+        AML1218_DBG("%s, wrong input of charge current:%d\n", __func__, curr);
         return -1;
     }
     if (curr > 100) {                        // input is uA
@@ -316,7 +332,7 @@ int aml1218_set_charging_current(int curr)
 
     idx_to = (curr - 300) / 150;
     aml1218_read(0x012b, (unsigned char *)&val);
-    AML_DBG("%s to %dmA, idx_to:%x, idx_cur:%x\n", __func__, idx_to * 150 + 300, idx_to, val);
+    AML1218_DBG("%s to %dmA, idx_to:%x, idx_cur:%x\n", __func__, idx_to * 150 + 300, idx_to, val);
     idx_cur = val & 0x0f;
 
     while (idx_cur != idx_to) {
@@ -340,7 +356,7 @@ int aml1218_set_trickle_time(int minutes)
     int bits;
 
     if (minutes < 30 && minutes > 80) {
-        AML_DBG("%s, invalid trickle time:%d\n", __func__, minutes);
+        AML1218_DBG("%s, invalid trickle time:%d\n", __func__, minutes);
         return -EINVAL;
     }
     switch (minutes) {
@@ -348,7 +364,7 @@ int aml1218_set_trickle_time(int minutes)
     case 50:     bits = 0x08;     break;
     case 80:     bits = 0x0c;     break;
     default:
-        AML_DBG("%s, unsupported trickle value:%d\n", __func__, minutes);
+        AML1218_DBG("%s, unsupported trickle value:%d\n", __func__, minutes);
         return -EINVAL;
     }
     return aml1218_set_bits(0x012A, bits, 0x0c);
@@ -359,7 +375,7 @@ int aml1218_set_rapid_time(int minutes)
     int bits;
 
     if (minutes > 360 || minutes < 720) {
-        AML_DBG("%s, invalid rapid time:%d\n", __func__, minutes);
+        AML1218_DBG("%s, invalid rapid time:%d\n", __func__, minutes);
         return -EINVAL;
     }
     switch (minutes) {
@@ -367,7 +383,7 @@ int aml1218_set_rapid_time(int minutes)
     case 540:     bits = 0x08;     break;
     case 720:     bits = 0x0c;     break;
     default:
-        AML_DBG("%s, unsupported rapid value:%d\n", __func__, minutes);
+        AML1218_DBG("%s, unsupported rapid value:%d\n", __func__, minutes);
         return -EINVAL;
     }
     return aml1218_set_bits(0x0129, bits, 0x0c);
@@ -379,7 +395,7 @@ int aml1218_set_full_charge_voltage(int voltage)
     uint8_t tmp;
     
     if (voltage > 4400000 || voltage < 4050000) {
-        AML_DBG("%s,Wrong charge voltage:%d\n", __func__, voltage);
+        AML1218_DBG("%s,Wrong charge voltage:%d\n", __func__, voltage);
         return -1;
     }
     tmp = ((voltage - 4050000) / 50000);
@@ -407,7 +423,7 @@ int aml1218_set_charge_end_rate(int rate)
         break;
 
     default:
-        AML_DBG("%s, Wrong charge end rate:%d\n", __func__, rate);
+        AML1218_DBG("%s, Wrong charge end rate:%d\n", __func__, rate);
         return -1;
     }
     aml1218_write(AML1218_CHG_CTRL6, val);
@@ -436,7 +452,7 @@ static int aml1218_get_coulomber(struct aml_charger *charger)
 
     ret = aml1218_reads(0x0152, buf, 4);
     if (ret) {
-        AML_DBG("%s, failed: %d\n", __func__, __LINE__);
+        AML1218_DBG("%s, failed: %d\n", __func__, __LINE__);
         return ret;
     }
 
@@ -462,7 +478,7 @@ static int aml1218_get_coulomber(struct aml_charger *charger)
 
     ret = aml1218_reads(0x0158, buf, 4);
     if (ret) {
-        AML_DBG("%s, failed: %d\n", __func__, __LINE__);
+        AML1218_DBG("%s, failed: %d\n", __func__, __LINE__);
         return ret;
     }
     discharge_result = (buf[0] <<  0) |
@@ -576,7 +592,7 @@ static void aml1218_battery_check_health(struct aml1218_supply       *supply,
 
     if (status == 0x30) {
         // TODO: add other check method?
-        AML_DBG("%s, battery error detect\n", __func__);
+        AML1218_DBG("%s, battery error detect\n", __func__);
         val->intval = POWER_SUPPLY_HEALTH_UNSPEC_FAILURE;
     } else {
         val->intval = POWER_SUPPLY_HEALTH_GOOD;
@@ -795,7 +811,7 @@ static void aml1218_otg_work_fun(struct work_struct *work)
     if (aml1218_otg_value == -1) {
         return ;    
     }
-    AML_DBG("%s, OTG value:%d, is_short:%d\n", __func__, aml1218_otg_value, g_aml1218_init->vbus_dcin_short_connect);
+    AML1218_DBG("%s, OTG value:%d, is_short:%d\n", __func__, aml1218_otg_value, g_aml1218_init->vbus_dcin_short_connect);
     if (aml1218_otg_value) {
         if (g_aml1218_init->vbus_dcin_short_connect) {
             aml1218_set_dcin(0);                            // cut off dcin for single usb port device
@@ -1101,13 +1117,13 @@ static ssize_t report_delay_store(struct device *dev, struct device_attribute *a
     uint32_t tmp = simple_strtoul(buf, NULL, 10);
 
     if (tmp > 200) {
-        AML_DBG("input too large, failed to set report_delay\n");
+        AML1218_DBG("input too large, failed to set report_delay\n");
         return count;
     }
     if (api && api->pmu_set_report_delay) {
         api->pmu_set_report_delay(tmp);
     } else {
-        AML_DBG("API not found\n");
+        AML1218_DBG("API not found\n");
     }
     return count;
 }
@@ -1158,8 +1174,10 @@ int aml1218_cal_ocv(int ibat, int vbat, int dir)
 static int aml1218_update_state(struct aml_charger *charger)
 {
     uint8_t val;
+    uint32_t chg_status;
 
     aml1218_read(0x00E0, &val);
+    aml1218_reads(0x00df, &chg_status, 4);
 
     charger->ibat = aml1218_get_battery_current();
     if (val & 0x18) {
@@ -1175,13 +1193,13 @@ static int aml1218_update_state(struct aml_charger *charger)
     charger->dcin_valid = (val & 0x10) ? 1 : 0; 
     charger->usb_valid  = (val & 0x08) ? 1 : 0; 
     charger->ext_valid  = charger->dcin_valid | (charger->usb_valid << 1); 
-    charger->fault      = val;
+    charger->fault      = chg_status;
 
     charger->vbat = aml1218_get_battery_voltage();
     charger->ocv  = aml1218_cal_ocv(charger->ibat, charger->vbat, charger->charge_status);
 
     if (val & 0x40) {
-        AML_DBG("%s, charge timeout, val:0x%02x, reset charger now\n", __func__, val);
+        AML1218_DBG("%s, charge timeout, val:0x%02x, reset charger now\n", __func__, val);
         aml1216_set_charge_enable(0);
         msleep(1000);
         aml1216_set_charge_enable(1);
@@ -1236,7 +1254,7 @@ static void aml1218_charging_monitor(struct work_struct *work)
         charger->charge_status == CHARGER_DISCHARGING) {
         over_discharge_cnt++;
         if (over_discharge_cnt >= 5) {
-            AML_DBG("%s, battery is over-discharge now, force system power off\n", __func__);
+            AML1218_DBG("%s, battery is over-discharge now, force system power off\n", __func__);
             power_protection = 1;
         }
     } else {
@@ -1248,7 +1266,7 @@ static void aml1218_charging_monitor(struct work_struct *work)
         (pre_chg_status != charger->charge_status) ||
         charger->resume                            ||
         power_protection) {
-        AML_DBG("battery vol change: %d->%d \n", pre_rest_cap, charger->rest_vol);
+        AML1218_DBG("battery vol change: %d->%d \n", pre_rest_cap, charger->rest_vol);
         if (unlikely(charger->resume)) {
             charger->resume = 0;                                        // MUST clear this flag
         }
@@ -1336,10 +1354,10 @@ static int aml1218_battery_probe(struct platform_device *pdev)
     int      ret;
     uint32_t tmp2;
 
-	AML_DBG("call %s in", __func__);
+	AML1218_DBG("call %s in", __func__);
     g_aml1218_init = pdev->dev.platform_data;
     if (g_aml1218_init == NULL) {
-        AML_DBG("%s, NO platform data\n", __func__);
+        AML1218_DBG("%s, NO platform data\n", __func__);
         return -EINVAL;
     }
     aml1218_power_key = input_allocate_device();
@@ -1367,14 +1385,14 @@ static int aml1218_battery_probe(struct platform_device *pdev)
 #ifdef CONFIG_UBOOT_BATTERY_PARAMETERS 
     if (get_uboot_battery_para_status() == UBOOT_BATTERY_PARA_SUCCESS) {
         aml1218_battery = get_uboot_battery_para();
-        AML_DBG("use uboot passed battery parameters\n");
+        AML1218_DBG("use uboot passed battery parameters\n");
     } else {
         aml1218_battery = g_aml1218_init->board_battery; 
-        AML_DBG("uboot battery parameter not get, use BSP configed battery parameters\n");
+        AML1218_DBG("uboot battery parameter not get, use BSP configed battery parameters\n");
     }
 #else
     aml1218_battery = g_aml1218_init->board_battery; 
-    AML_DBG("use BSP configed battery parameters\n");
+    AML1218_DBG("use BSP configed battery parameters\n");
 #endif
 
     /*
@@ -1411,7 +1429,7 @@ static int aml1218_battery_probe(struct platform_device *pdev)
         supply->battery_info->use_for_apm        = 1;
         supply->battery_info->name               = aml1218_battery->pmu_battery_name;
     } else {
-        AML_DBG(" NO BATTERY_PARAMETERS FOUND\n");
+        AML1218_DBG(" NO BATTERY_PARAMETERS FOUND\n");
     }
 
     charger->soft_limit_to99     = g_aml1218_init->soft_limit_to99;
@@ -1428,7 +1446,7 @@ static int aml1218_battery_probe(struct platform_device *pdev)
                           AML1218_IRQ_NAME,
                           supply); 
         if (ret) {
-            AML_DBG("request irq failed, ret:%d, irq:%d\n", ret, supply->irq);    
+            AML1218_DBG("request irq failed, ret:%d, irq:%d\n", ret, supply->irq);    
         }
     }
 
@@ -1479,7 +1497,7 @@ static int aml1218_battery_probe(struct platform_device *pdev)
     }
     
     aml1218_dump_all_register();
-	AML_DBG("call %s exit, ret:%d", __func__, ret);
+	AML1218_DBG("call %s exit, ret:%d", __func__, ret);
     return ret;
 
 err_ps_register:
@@ -1491,7 +1509,7 @@ err_charger_init:
     kfree(supply);
     input_unregister_device(aml1218_power_key);
     kfree(aml1218_power_key);
-	AML_DBG("call %s exit, ret:%d", __func__, ret);
+	AML1218_DBG("call %s exit, ret:%d", __func__, ret);
     return ret;
 }
 
@@ -1529,7 +1547,7 @@ static int aml1218_suspend(struct platform_device *dev, pm_message_t state)
     }
 #ifdef CONFIG_HAS_EARLYSUSPEND
     if (early_power_status != supply->aml_charger.ext_valid) {
-        AML_DBG("%s, power status changed, prev:%x, now:%x, exit suspend process\n", 
+        AML1218_DBG("%s, power status changed, prev:%x, now:%x, exit suspend process\n", 
                 __func__, early_power_status, supply->aml_charger.ext_valid);
         input_report_key(aml1218_power_key, KEY_POWER, 1);              // assume power key pressed 
         input_sync(aml1218_power_key);
@@ -1581,7 +1599,7 @@ static int aml1218_battery_init(void)
 {
     int ret;
     ret = platform_driver_register(&aml1218_battery_driver);
-	AML_DBG("call %s, ret = %d\n", __func__, ret);
+	AML1218_DBG("call %s, ret = %d\n", __func__, ret);
 	return ret;
 }
 
diff --git a/include/linux/amlogic/aml_pmu.h b/include/linux/amlogic/aml_pmu.h
index 9162091fb628..e08a5f6facb6 100755
--- a/include/linux/amlogic/aml_pmu.h
+++ b/include/linux/amlogic/aml_pmu.h
@@ -219,7 +219,7 @@ extern int aml1212_otg_change(struct notifier_block *nb, unsigned long value, vo
 #define AML1216_CHARGER_DISCHARGING         2
 #define AML1216_CHARGER_NONE                3 
 
-#define AML_DBG(format,args...)                 \
+#define AML1216_DBG(format,args...)                 \
     if (1) printk(KERN_ERR "[AML1216]"format,##args)  
 #define ABS(x)                  ((x) >0 ? (x) : -(x))
 
@@ -351,7 +351,7 @@ extern int aml1216_usb_charger(struct notifier_block *nb, unsigned long value, v
 #define AML1218_CHARGER_DISCHARGING         2
 #define AML1218_CHARGER_NONE                3 
 
-#define AML_DBG(format,args...)                 \
+#define AML1218_DBG(format,args...)                 \
     if (1) printk(KERN_ERR "[AML1218]"format,##args)  
 #define ABS(x)                  ((x) >0 ? (x) : -(x))
 
-- 
2.19.0

