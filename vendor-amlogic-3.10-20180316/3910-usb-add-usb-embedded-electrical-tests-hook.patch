From b83d094948203c0c092c99ee8ac78f0428c00a8d Mon Sep 17 00:00:00 2001
From: Victor Wan <victor.wan@amlogic.com>
Date: Wed, 16 Apr 2014 09:46:38 +0800
Subject: [PATCH 3910/5965] usb: add usb embedded electrical tests hook

  handle USB devices for: VID=0x1A0A, PID = 0x0101 ~ 0x0108
---
 drivers/usb/core/message.c | 96 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 96 insertions(+)

diff --git a/drivers/usb/core/message.c b/drivers/usb/core/message.c
index 444d30e3a78b..0db7c807f52d 100644
--- a/drivers/usb/core/message.c
+++ b/drivers/usb/core/message.c
@@ -1881,6 +1881,102 @@ free_interfaces:
 	/* Enable LTM if it was turned off by usb_disable_device. */
 	usb_enable_ltm(dev);
 
+#ifdef CONFIG_USB_HOST_ELECT_TEST
+	/* Here we implement the HS Electrical Test support. The
+	 * tester uses a vendor ID of 0x1A0A to indicate we should
+	 * run a special test sequence. The product ID tells us
+	 * which sequence to run. We invoke the test sequence by
+	 * sending a non-standard SetFeature command to our root
+	 * hub port. Our dwc_otg_hcd_hub_control() routine will
+	 * recognize the command and perform the desired test
+	 * sequence.
+	 */
+
+	if (dev->descriptor.idVendor == 0x1A0A) {
+		/* HSOTG Electrical Test */
+		dev_warn(&dev->dev, "VID from HSOTG Electrical Test Fixture\n");
+
+		if (dev->bus && dev->parent) {
+			struct usb_device *hdev = dev->parent;
+			__u16 index = 0;
+			int timeout;
+			char * message;
+			unsigned int pipe = usb_sndctrlpipe(hdev, 0);
+			dev_warn(&dev->dev, "Got PID 0x%x\n", dev->descriptor.idProduct);
+
+			if(hdev != dev->bus->root_hub){
+				index = dev->portnum;
+				dev_warn(&dev->dev,"Test in HUB port: %d\n",index);
+			}else{
+				dev_warn(&dev->dev,"Test in RootHub %s\n",hdev->devpath);
+			}
+
+			switch (dev->descriptor.idProduct) {
+			case 0x0101:	/* TEST_SE0_NAK */
+				message = "TEST_SE0_NAK";
+				index |= 0x300;
+				timeout = HZ;
+				break;
+
+			case 0x0102:	/* TEST_J */
+				message = "TEST_J";
+				index |= 0x100;
+				timeout = HZ;
+				break;
+
+			case 0x0103:	/* TEST_K */
+				message = "TEST_K";
+				index |= 0x200;
+				timeout = HZ;
+				break;
+
+			case 0x0104:	/* TEST_PACKET */
+				message = "TEST_PACKET";
+				index |= 0x400;
+				timeout = HZ;
+				break;
+
+			case 0x0105:	/* TEST_FORCE_ENABLE */
+				message = "TEST_FORCE_ENABLE";
+				index |= 0x500;
+				timeout = HZ;
+				break;
+
+			case 0x0106:	/* HS_HOST_PORT_SUSPEND_RESUME */
+				message = "HS_HOST_PORT_SUSPEND_RESUME";
+				index |= 0x600;
+				timeout = 40 * HZ;
+				usb_control_msg(hdev, usb_sndctrlpipe(hdev, 0),
+						USB_REQ_SET_FEATURE, USB_RT_PORT,
+						USB_PORT_FEAT_TEST, index|0x600, NULL, 0, 40 * HZ);
+				break;
+
+			case 0x0107:	/* SINGLE_STEP_GET_DEVICE_DESCRIPTOR setup */
+				message = "SINGLE_STEP_GET_DEVICE_DESCRIPTOR setup";
+				index |= 0x700;
+				timeout = 40 * HZ;
+				break;
+
+			case 0x0108:	/* SINGLE_STEP_GET_DEVICE_DESCRIPTOR execute */
+				message = "SINGLE_STEP_GET_DEVICE_DESCRIPTOR execute";
+				index |= 0x800;
+				timeout = 40 * HZ;
+				break;
+
+			default:
+				dev_warn(&dev->dev, "error PID %X\n",dev->descriptor.idProduct);
+				return 0;
+			}
+
+			dev_warn(&dev->dev, "%s\n",message);
+			usb_control_msg(hdev, pipe,
+						USB_REQ_SET_FEATURE, USB_RT_PORT,
+						USB_PORT_FEAT_TEST, index, NULL, 0, timeout);
+			return 0;
+		}
+	}
+#endif
+
 	/* Now that all the interfaces are set up, register them
 	 * to trigger binding of drivers to interfaces.  probe()
 	 * routines may install different altsettings and may
-- 
2.19.0

