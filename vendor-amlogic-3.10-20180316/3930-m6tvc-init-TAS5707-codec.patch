From 197b9f19d936179c80e40c42160c474be7033bea Mon Sep 17 00:00:00 2001
From: "shuai.li" <shuai.li@amlogic.com>
Date: Wed, 16 Apr 2014 21:49:00 +0800
Subject: [PATCH 3930/5965] m6tvc: init TAS5707 codec

and rm unused print.
---
 arch/arm/boot/dts/amlogic/meson6tv_ref.dtd  |  39 ++-
 arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd |  35 ++-
 arch/arm/configs/meson6tv_defconfig         |   2 -
 include/sound/tas57xx.h                     |  12 +-
 sound/soc/aml/m6/Kconfig                    |  40 +---
 sound/soc/aml/m6/Makefile                   |   2 -
 sound/soc/aml/m6/aml_audio_codec_probe.c    |  27 ++-
 sound/soc/aml/m6/aml_audio_codec_probe.h    |   4 +-
 sound/soc/aml/m6/aml_m6tv_audio.c           |  57 +----
 sound/soc/codecs/tas5707.c                  | 250 +++++++++-----------
 sound/soc/codecs/tas5711.c                  | 125 ++--------
 11 files changed, 245 insertions(+), 348 deletions(-)
 mode change 100644 => 100755 sound/soc/codecs/tas5707.c

diff --git a/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd b/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
index ca54918f8d11..a53b94c016c9 100755
--- a/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6tv_ref.dtd
@@ -431,7 +431,7 @@
 			codec_name = "tas5711";
 			i2c_addr = <0x1B>;
 			i2c_bus = "i2c_bus_a";
-			master_vol = <0x25>;
+			master_vol = <245>;
 			eq_name = "table","wall";
 			eq_table = /bits/ 8 <
 				0x00 0x7E 0x95 0xFF 0x0F 0x02 0xD4 0x01 0x00 0x7E 0x95 0xFF 0x00 0xFD 0x27 0xFF 0x0F 0x82 0xD0 0x01 /*0x29---ch1_bq[0]*/
@@ -478,14 +478,47 @@
 				0x00 0x00 0x00 0xF9 0x00 0x7F 0xFF 0x06 /*0x3F---drc1_ad*/
 			>;
 			input_mux_reg_buf = /bits/ 8 <0x00 0x10 0x77 0x72>;/*reg d0 d1 d2 d3*/
-			status = "okay";
+			status = "disable";
 		};
 
 		tas5707:tas5707 {
 			codec_name = "tas5707";
 			i2c_addr = <0x1B>;
 			i2c_bus = "i2c_bus_a";
-			status = "disabled";
+			master_vol = <245>;
+			eq_name = "table","wall";
+			eq_table = /bits/ 8 <
+				0x00 0x7E 0x95 0xFF 0x0F 0x02 0xD4 0x01 0x00 0x7E 0x95 0xFF 0x00 0xFD 0x27 0xFF 0x0F 0x82 0xD0 0x01 /*0x29---ch1_bq[0]*/
+				0x00 0x7F 0x83 0xD8 0x0F 0x02 0xC3 0x92 0x00 0x7D 0xDB 0x4F 0x00 0xFD 0x3C 0x6E 0x0F 0x82 0xA0 0xD8 /*0x2A---ch1_bq[1]*/
+				0x00 0x82 0xCE 0x97 0x0F 0x4C 0x87 0x81 0x00 0x5F 0x69 0x2D 0x00 0xB3 0x78 0x7F 0x0F 0x9D 0xC8 0x3B /*0x2B---ch1_bq[2]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0x7A 0x3D 0xA6 0x00 0x58 0x4D 0xED 0x00 0x85 0xC2 0x5A 0x0F 0xA4 0x46 0xC9 /*0x2C---ch1_bq[3]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0xAB 0xEA 0x5C 0x00 0x58 0x4D 0xED 0x00 0x54 0x15 0xA4 0x0F 0xA4 0x46 0xC9 /*0x2D---ch1_bq[4]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x2E---ch1_bq[5]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x2F---ch1_bq[6]*/
+				0x00 0x7E 0x95 0xFF 0x0F 0x02 0xD4 0x01 0x00 0x7E 0x95 0xFF 0x00 0xFD 0x27 0xFF 0x0F 0x82 0xD0 0x01 /*0x30---ch2_bq[0]*/
+				0x00 0x7F 0x83 0xD8 0x0F 0x02 0xC3 0x92 0x00 0x7D 0xDB 0x4F 0x00 0xFD 0x3C 0x6E 0x0F 0x82 0xA0 0xD8 /*0x31---ch2_bq[1]*/
+				0x00 0x82 0xCE 0x97 0x0F 0x4C 0x87 0x81 0x00 0x5F 0x69 0x2D 0x00 0xB3 0x78 0x7F 0x0F 0x9D 0xC8 0x3B /*0x32---ch2_bq[2]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0x7A 0x3D 0xA6 0x00 0x58 0x4D 0xED 0x00 0x85 0xC2 0x5A 0x0F 0xA4 0x46 0xC9 /*0x33---ch2_bq[3]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0xAB 0xEA 0x5C 0x00 0x58 0x4D 0xED 0x00 0x54 0x15 0xA4 0x0F 0xA4 0x46 0xC9 /*0x34---ch2_bq[4]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x35---ch2_bq[5]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x36---ch2_bq[6]*/
+			>;
+			sub_bq_table = /bits/ 8 <
+				0x00 0x00 0x03 0x8A 0x00 0x00 0x07 0x14 0x00 0x00 0x03 0x8A 0x00 0xFC 0x35 0x5D 0x0F 0x83 0xBC 0x79 /*0x5A*/
+				0x00 0x00 0x03 0x8A 0x00 0x00 0x07 0x14 0x00 0x00 0x03 0x8A 0x00 0xFC 0x35 0x5D 0x0F 0x83 0xBC 0x79 /*0x5B*/
+			>;
+			drc1_tko_table = /bits/ 8 <
+				0xFD 0xA2 0x14 0x90 /*0x40---drc1_t*/
+				0x0F 0x81 0x47 0xAF /*0x41---drc1_k*/
+				0x00 0x08 0x42 0x10 /*0x42---drc1_o*/
+			>;
+			drc1_table = /bits/ 8 <
+				0x00 0x05 0x39 0x47 0x00 0x7A 0xC6 0xB8 /*0x3A---drc1_ae*/
+				0x00 0x05 0x39 0x47 0x00 0x7A 0xC6 0xB8 /*0x3B---drc1_aa*/
+				0x00 0x00 0x00 0xF9 0x00 0x7F 0xFF 0x06 /*0x3C---drc1_ad*/
+			>;
+			input_mux_reg_buf = /bits/ 8 <0x00 0x10 0x77 0x72>;/*reg d0 d1 d2 d3*/
+			status = "okay";
 		};
 	};
 
diff --git a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
index fa422b30595f..953b771f2378 100755
--- a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
@@ -468,7 +468,7 @@
 			codec_name = "tas5711";
 			i2c_addr = <0x1B>;
 			i2c_bus = "i2c_bus_a";
-			master_vol = <0x25>;
+			master_vol = <245>;
 			eq_name = "table","wall";
 			eq_table = /bits/ 8 <
 				0x00 0x7E 0x95 0xFF 0x0F 0x02 0xD4 0x01 0x00 0x7E 0x95 0xFF 0x00 0xFD 0x27 0xFF 0x0F 0x82 0xD0 0x01 /*0x29---ch1_bq[0]*/
@@ -522,6 +522,39 @@
 			codec_name = "tas5707";
 			i2c_addr = <0x1B>;
 			i2c_bus = "i2c_bus_a";
+			master_vol = <245>;
+			eq_name = "table","wall";
+			eq_table = /bits/ 8 <
+				0x00 0x7E 0x95 0xFF 0x0F 0x02 0xD4 0x01 0x00 0x7E 0x95 0xFF 0x00 0xFD 0x27 0xFF 0x0F 0x82 0xD0 0x01 /*0x29---ch1_bq[0]*/
+				0x00 0x7F 0x83 0xD8 0x0F 0x02 0xC3 0x92 0x00 0x7D 0xDB 0x4F 0x00 0xFD 0x3C 0x6E 0x0F 0x82 0xA0 0xD8 /*0x2A---ch1_bq[1]*/
+				0x00 0x82 0xCE 0x97 0x0F 0x4C 0x87 0x81 0x00 0x5F 0x69 0x2D 0x00 0xB3 0x78 0x7F 0x0F 0x9D 0xC8 0x3B /*0x2B---ch1_bq[2]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0x7A 0x3D 0xA6 0x00 0x58 0x4D 0xED 0x00 0x85 0xC2 0x5A 0x0F 0xA4 0x46 0xC9 /*0x2C---ch1_bq[3]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0xAB 0xEA 0x5C 0x00 0x58 0x4D 0xED 0x00 0x54 0x15 0xA4 0x0F 0xA4 0x46 0xC9 /*0x2D---ch1_bq[4]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x2E---ch1_bq[5]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x2F---ch1_bq[6]*/
+				0x00 0x7E 0x95 0xFF 0x0F 0x02 0xD4 0x01 0x00 0x7E 0x95 0xFF 0x00 0xFD 0x27 0xFF 0x0F 0x82 0xD0 0x01 /*0x30---ch2_bq[0]*/
+				0x00 0x7F 0x83 0xD8 0x0F 0x02 0xC3 0x92 0x00 0x7D 0xDB 0x4F 0x00 0xFD 0x3C 0x6E 0x0F 0x82 0xA0 0xD8 /*0x31---ch2_bq[1]*/
+				0x00 0x82 0xCE 0x97 0x0F 0x4C 0x87 0x81 0x00 0x5F 0x69 0x2D 0x00 0xB3 0x78 0x7F 0x0F 0x9D 0xC8 0x3B /*0x32---ch2_bq[2]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0x7A 0x3D 0xA6 0x00 0x58 0x4D 0xED 0x00 0x85 0xC2 0x5A 0x0F 0xA4 0x46 0xC9 /*0x33---ch2_bq[3]*/
+				0x00 0x83 0x6B 0x4A 0x0F 0xAB 0xEA 0x5C 0x00 0x58 0x4D 0xED 0x00 0x54 0x15 0xA4 0x0F 0xA4 0x46 0xC9 /*0x34---ch2_bq[4]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x35---ch2_bq[5]*/
+				0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 /*0x36---ch2_bq[6]*/
+			>;
+			sub_bq_table = /bits/ 8 <
+				0x00 0x00 0x03 0x8A 0x00 0x00 0x07 0x14 0x00 0x00 0x03 0x8A 0x00 0xFC 0x35 0x5D 0x0F 0x83 0xBC 0x79 /*0x5A*/
+				0x00 0x00 0x03 0x8A 0x00 0x00 0x07 0x14 0x00 0x00 0x03 0x8A 0x00 0xFC 0x35 0x5D 0x0F 0x83 0xBC 0x79 /*0x5B*/
+			>;
+			drc1_tko_table = /bits/ 8 <
+				0xFD 0xA2 0x14 0x90 /*0x40---drc1_t*/
+				0x0F 0x81 0x47 0xAF /*0x41---drc1_k*/
+				0x00 0x08 0x42 0x10 /*0x42---drc1_o*/
+			>;
+			drc1_table = /bits/ 8 <
+				0x00 0x05 0x39 0x47 0x00 0x7A 0xC6 0xB8 /*0x3A---drc1_ae*/
+				0x00 0x05 0x39 0x47 0x00 0x7A 0xC6 0xB8 /*0x3B---drc1_aa*/
+				0x00 0x00 0x00 0xF9 0x00 0x7F 0xFF 0x06 /*0x3C---drc1_ad*/
+			>;
+			input_mux_reg_buf = /bits/ 8 <0x00 0x10 0x77 0x72>;/*reg d0 d1 d2 d3*/
 			status = "disabled";
 		};
 	};
diff --git a/arch/arm/configs/meson6tv_defconfig b/arch/arm/configs/meson6tv_defconfig
index 187750930ed4..314253c752bb 100755
--- a/arch/arm/configs/meson6tv_defconfig
+++ b/arch/arm/configs/meson6tv_defconfig
@@ -226,8 +226,6 @@ CONFIG_SND_USB_AUDIO=y
 CONFIG_SND_AML_M6_SOC=y
 CONFIG_SND_AML_M_DUMMY_CODEC=y
 CONFIG_SND_AML_M6TV_AUDIO_CODEC=y
-CONFIG_SND_AML_M6TV_SYNOPSYS9629_CODEC=y
-CONFIG_SND_AML_M6TV_TAS5711=y
 CONFIG_UHID=y
 CONFIG_USB=y
 CONFIG_USB_ACM=y
diff --git a/include/sound/tas57xx.h b/include/sound/tas57xx.h
index 5f634021f839..303731375d33 100755
--- a/include/sound/tas57xx.h
+++ b/include/sound/tas57xx.h
@@ -10,13 +10,13 @@ struct tas57xx_reg_cfg {
     const char *reg_data;
 };
 
-struct tas5711_eq_cfg {
+struct tas57xx_eq_cfg {
 	char name[NAME_SIZE];
 	char *regs;
 	int reg_bytes;
 };
 
-struct tas5711_platform_data {
+struct tas57xx_platform_data {
     int (*init_func)(void);
     int (*early_suspend_func)(void);
     int (*suspend_func)(void);
@@ -35,7 +35,7 @@ struct tas5711_platform_data {
     char*custom_drc2_tko_table;
     int custom_drc2_tko_table_len;
     int num_eq_cfgs;
-    struct tas5711_eq_cfg *eq_cfgs;
+    struct tas57xx_eq_cfg *eq_cfgs;
     char *custom_sub_bq_table;
     int custom_sub_bq_table_len;
     unsigned int custom_master_vol;
@@ -45,7 +45,7 @@ struct tas5711_platform_data {
     int enable_hardmute;
     int i2c_addr;
 };
-
+#if 0
 struct tas5707_eq_cfg {
 	const char *name;
 	const char *regs;
@@ -60,7 +60,7 @@ struct tas5707_platform_data {
     int (*late_resume_func)(void);
     char *custom_init_value_table;
     int init_value_table_len;
-    struct tas57xx_reg_cfg *init_regs;
+    char *init_regs;
     int num_init_regs;
     char *custom_drc1_table;
     int custom_drc1_table_len;
@@ -74,5 +74,5 @@ struct tas5707_platform_data {
     int enable_hardmute;
     int i2c_addr;
 };
-
+#endif
 #endif
diff --git a/sound/soc/aml/m6/Kconfig b/sound/soc/aml/m6/Kconfig
index b7018fa40c8d..75645c3563ac 100755
--- a/sound/soc/aml/m6/Kconfig
+++ b/sound/soc/aml/m6/Kconfig
@@ -29,41 +29,9 @@ config SND_AML_M_DUMMY_CODEC
 config SND_AML_M6TV_AUDIO_CODEC
 	tristate "AML M6TV evaluation board,this must be selected for all m6tv board"
 	depends on SND_AML_M6_SOC
+	select SND_AML_M6TV_SYNOPSYS9629_CODEC
+	select SND_SOC_TAS5711
+	select SND_SOC_TAS5707
 config SND_AML_M6TV_SYNOPSYS9629_CODEC
 	tristate "AML M6TV  board with internal syno9629 codec"
-	depends on SND_AML_M6TV_AUDIO_CODEC
-config SND_AML_M6TV_STA380
-	tristate "AML M6TV board with STA380 codec"
-	depends on SND_AML_M6TV_AUDIO_CODEC
-	select SND_SOC_STA380 if SND_AML_M6TV_STA380
-config SND_AML_M6TV_TAS5711
-	tristate "AML M6TV board with TAS5711 codec"
-	depends on SND_AML_M6TV_AUDIO_CODEC
-	select SND_SOC_TAS5711 if SND_AML_M6TV_TAS5711
-if SND_AML_M6TV_TAS5711
-choice
-	prompt "TAS5711 work mode"
-	default TAS5711_2_CHANNEL
-config TAS5711_2_CHANNEL
-	bool "2 BTL channel mode"
-config TAS5711_2_PLUS_1_CHANNEL
-	bool "2.1 channel mode"
-config TAS5711_2_SUBWOOFER_CHANNEL
-	bool "2 BTL subwoofer channel"
-endchoice
-endif
-config SND_AML_M6TV_TAS5707
-	tristate "AML M6TV board with TAS5707 codec"
-	depends on SND_AML_M6TV_AUDIO_CODEC
-	select SND_SOC_TAS5707 if SND_AML_M6TV_TAS5707
-if SND_AML_M6TV_TAS5707
-choice
-	prompt "TAS5707 work mode"
-	default TAS5707_2_CHANNEL
-config TAS5707_2_CHANNEL
-	bool "2 BTL channel mode"
-config TAS5707_2_SUBWOOFER_CHANNEL
-	bool "2 BTL subwoofer channel"
-endchoice
-endif
-
+	depends on SND_AML_M6TV_AUDIO_CODEC
\ No newline at end of file
diff --git a/sound/soc/aml/m6/Makefile b/sound/soc/aml/m6/Makefile
index 8efab55853d8..f5e327f70d36 100755
--- a/sound/soc/aml/m6/Makefile
+++ b/sound/soc/aml/m6/Makefile
@@ -39,5 +39,3 @@ snd-soc-aml-m6tv-audio-objs := aml_m6tv_audio.o
 obj-$(CONFIG_SND_AML_M6TV_SYNOPSYS9629_CODEC) += snd-soc-aml-syno9629-codec.o
 obj-$(CONFIG_SND_AML_M6TV_AUDIO_CODEC) += snd-soc-aml-m6tv-audio.o
 
-
-
diff --git a/sound/soc/aml/m6/aml_audio_codec_probe.c b/sound/soc/aml/m6/aml_audio_codec_probe.c
index 9ad3a0536712..8586add3f25c 100755
--- a/sound/soc/aml/m6/aml_audio_codec_probe.c
+++ b/sound/soc/aml/m6/aml_audio_codec_probe.c
@@ -112,16 +112,17 @@ err_out:
 }
 
 #ifdef CONFIG_SND_AML_M6TV_AUDIO_CODEC
+codec_info_t codec_info;
 static struct codec_probe_priv prob_priv;
 struct codec_probe_priv{
 	int num_eq;
-	struct tas5711_eq_cfg *eq_configs;
+	struct tas57xx_eq_cfg *eq_configs;
 	char *sub_bq_table;
 	char *drc1_table;
 	char *drc1_tko_table;
 };
 
-static int of_get_eq_pdata(struct tas5711_platform_data *pdata, struct device_node* p_node)
+static int of_get_eq_pdata(struct tas57xx_platform_data *pdata, struct device_node* p_node)
 {
 	int i, ret = 0, length = 0;
 	const char *str = NULL;
@@ -136,7 +137,7 @@ static int of_get_eq_pdata(struct tas5711_platform_data *pdata, struct device_no
 
 	pdata->num_eq_cfgs = prob_priv.num_eq;
 
-	prob_priv.eq_configs = kzalloc(prob_priv.num_eq * sizeof(struct tas5711_eq_cfg), GFP_KERNEL);
+	prob_priv.eq_configs = kzalloc(prob_priv.num_eq * sizeof(struct tas57xx_eq_cfg), GFP_KERNEL);
 
 	for(i = 0; i < prob_priv.num_eq; i++){
 		ret = of_property_read_string_index(p_node, "eq_name", i , &str);
@@ -197,7 +198,7 @@ exit:
 	return p;
 }
 
-static int of_get_subwoofer_pdata(struct tas5711_platform_data *pdata, struct device_node *p_node)
+static int of_get_subwoofer_pdata(struct tas57xx_platform_data *pdata, struct device_node *p_node)
 {
 	int length = 0;
 	char *pd = NULL;
@@ -214,7 +215,7 @@ static int of_get_subwoofer_pdata(struct tas5711_platform_data *pdata, struct de
 	return 0;
 }
 
-static int of_get_drc_pdata(struct tas5711_platform_data *pdata, struct device_node* p_node)
+static int of_get_drc_pdata(struct tas57xx_platform_data *pdata, struct device_node* p_node)
 {
 	int length = 0;
 	char *pd = NULL;
@@ -263,7 +264,7 @@ static int of_get_drc_pdata(struct tas5711_platform_data *pdata, struct device_n
 	return 0;
 }
 
-static int of_get_init_pdata(struct tas5711_platform_data *pdata, struct device_node* p_node)
+static int of_get_init_pdata(struct tas57xx_platform_data *pdata, struct device_node* p_node)
 {
 	int length = 0;
 	char *pd = NULL;
@@ -286,7 +287,7 @@ static int of_get_init_pdata(struct tas5711_platform_data *pdata, struct device_
 	return 0;
 
 }
-static int codec_get_of_pdata(struct tas5711_platform_data *pdata, struct device_node* p_node)
+static int codec_get_of_pdata(struct tas57xx_platform_data *pdata, struct device_node* p_node)
 {
 	int ret = 0;
 
@@ -322,11 +323,12 @@ static int aml_audio_codec_probe(struct platform_device *pdev)
 	struct i2c_client *client;
 	aml_audio_codec_info_t temp_audio_codec;
 #ifdef CONFIG_SND_AML_M6TV_AUDIO_CODEC
-	struct tas5711_platform_data *pdata;
+	struct tas57xx_platform_data *pdata;
+	char tmp[NAME_SIZE];
 
-	pdata = kzalloc(sizeof(struct tas5711_platform_data), GFP_KERNEL);
+	pdata = kzalloc(sizeof(struct tas57xx_platform_data), GFP_KERNEL);
 	if (!pdata) {
-		printk("ERROR, NO enough mem for tas5711_platform_data!\n");
+		printk("ERROR, NO enough mem for tas57xx_platform_data!\n");
 		return -ENOMEM;
     }
 #endif
@@ -348,6 +350,11 @@ static int aml_audio_codec_probe(struct platform_device *pdev)
         board_info.platform_data = &temp_audio_codec;
         client = i2c_new_device(adapter, &board_info);
 #ifdef CONFIG_SND_AML_M6TV_AUDIO_CODEC
+	snprintf(tmp, I2C_NAME_SIZE, "%s", temp_audio_codec.name);
+	strlcpy(codec_info.name, tmp, I2C_NAME_SIZE);
+	snprintf(tmp, I2C_NAME_SIZE, "%s.%s", temp_audio_codec.name, dev_name(&client->dev));
+	strlcpy(codec_info.name_bus, tmp, I2C_NAME_SIZE);
+
 	codec_get_of_pdata(pdata, child);
 	client->dev.platform_data = pdata;
 #endif
diff --git a/sound/soc/aml/m6/aml_audio_codec_probe.h b/sound/soc/aml/m6/aml_audio_codec_probe.h
index 5d64aff174f2..ddac41187b07 100755
--- a/sound/soc/aml/m6/aml_audio_codec_probe.h
+++ b/sound/soc/aml/m6/aml_audio_codec_probe.h
@@ -34,8 +34,8 @@ enum codecs_enum{
 
 typedef struct {
 	enum codecs_enum codec_index;
-	char name[NAME_SIZE];
-	char name_bus[NAME_SIZE];
+	char name[I2C_NAME_SIZE];
+	char name_bus[I2C_NAME_SIZE];
 }codec_info_t;
 
 extern codec_info_t codec_info;
diff --git a/sound/soc/aml/m6/aml_m6tv_audio.c b/sound/soc/aml/m6/aml_m6tv_audio.c
index f84f44bb423b..49d88a9ca067 100755
--- a/sound/soc/aml/m6/aml_m6tv_audio.c
+++ b/sound/soc/aml/m6/aml_m6tv_audio.c
@@ -30,6 +30,7 @@
 #include "aml_pcm.h"
 #include "aml_audio_hw.h"
 #include <sound/aml_m6tv_audio.h>
+#include <aml_audio_codec_probe.h>
 
 #ifdef CONFIG_USE_OF
 #include <linux/of.h>
@@ -159,25 +160,8 @@ static int m6tv_audio_codec_init(struct snd_soc_pcm_runtime *rtd)
 {
     return 0;
 }
-#ifdef CONFIG_SND_AML_M6TV_STA380
-static int m6tv_sta381xx_init(struct snd_soc_dapm_context *dapm)
-{
-	CODEC_DEBUG("~~~~%s\n", __func__);
-
-	snd_soc_codec_set_sysclk(dapm->codec, 1, 48000 * 512, 0);
-	return 0;
-}
-#endif
-#ifdef CONFIG_SND_AML_M6TV_TAS5711
-static int m6tv_tas5711_init(struct snd_soc_dapm_context *dapm)
-{
-	CODEC_DEBUG("~~~~%s\n", __func__);
 
-	return 0;
-}
-#endif
 static struct snd_soc_dai_link m6tv_audio_dai_link[] = {
-#ifdef CONFIG_SND_AML_M6TV_SYNOPSYS9629_CODEC
     {
         .name = "syno9629",
         .stream_name = "SYNO9629 PCM",
@@ -188,38 +172,13 @@ static struct snd_soc_dai_link m6tv_audio_dai_link[] = {
         .codec_name = "syno9629.0",
         .ops = &m6tv_audio_soc_ops,
     },
-#endif
-};
-struct snd_soc_aux_dev m6tv_audio_aux_dev[] = {
-#ifdef CONFIG_SND_AML_M6TV_STA380
-	{
-		.name = "sta381xx",
-		.codec_name = "sta381xx.0-001c",
-		.init = m6tv_sta381xx_init,
-	},
-#endif
-#ifdef CONFIG_SND_AML_M6TV_TAS5711
-	{
-		.name = "tas5711",
-		.codec_name = "tas5711.1-001b",
-		.init = m6tv_tas5711_init,
-	},
-#endif
 };
+struct snd_soc_aux_dev m6tv_audio_aux_dev;
 
 static struct snd_soc_codec_conf m6tv_audio_codec_conf[] = {
-#ifdef CONFIG_SND_AML_M6TV_STA380
 	{
-		.dev_name = "sta381xx.0-001c",
 		.name_prefix = "AMP",
 	},
-#endif
-#ifdef CONFIG_SND_AML_M6TV_TAS5711
-	{
-		.dev_name = "tas5711.1-001b",
-		.name_prefix = "AMP",
-	},
-#endif
 };
 static struct snd_soc_card snd_soc_m6tv_audio = {
     .name = "AML-M6TV",
@@ -227,8 +186,8 @@ static struct snd_soc_card snd_soc_m6tv_audio = {
     .dai_link = m6tv_audio_dai_link,
     .num_links = ARRAY_SIZE(m6tv_audio_dai_link),
     .set_bias_level = m6tv_audio_set_bias_level,
-    .aux_dev = m6tv_audio_aux_dev,
-    .num_aux_devs = ARRAY_SIZE(m6tv_audio_aux_dev),
+    .aux_dev = &m6tv_audio_aux_dev,
+    .num_aux_devs = 1,
     .codec_conf = m6tv_audio_codec_conf,
     .num_configs = ARRAY_SIZE(m6tv_audio_codec_conf),
 
@@ -297,6 +256,11 @@ static int m6tv_audio_audio_probe(struct platform_device *pdev)
 		ret = -EINVAL;
 		goto err;
 	}
+
+	m6tv_audio_aux_dev.name = codec_info.name;
+	m6tv_audio_aux_dev.codec_name = codec_info.name_bus;
+	m6tv_audio_codec_conf[0].dev_name = codec_info.name_bus;
+
 	ret = snd_soc_register_card(card);
 	if (ret) {
 		dev_err(&pdev->dev, "snd_soc_register_card failed (%d)\n",
@@ -314,6 +278,9 @@ err:
 static int m6tv_audio_audio_remove(struct platform_device *pdev)
 {
     int ret = 0;
+	struct snd_soc_card *card = platform_get_drvdata(pdev);
+
+	aml_m6_pinmux_deinit(card);
     m6tv_audio_dev_uninit();
     platform_device_put(m6tv_audio_snd_device);
 //    kfree(m6tv_audio_snd_priv);
diff --git a/sound/soc/codecs/tas5707.c b/sound/soc/codecs/tas5707.c
old mode 100644
new mode 100755
index 27446dde35f0..1751e47d5202
--- a/sound/soc/codecs/tas5707.c
+++ b/sound/soc/codecs/tas5707.c
@@ -43,27 +43,27 @@ static const u8 tas5707_regs[DDX_NUM_BYTE_REG] = {
 	0x00, 0x30, 0x0F, 0x82, 0x02,
 };
 
-static u8 TAS5707_drc1_table[3][9]={
+static u8 TAS5707_drc1_table[3][8]={
 	//0x3A   drc1_ae
-	{0x3A,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
+	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
 	//0x3B   drc1_aa
-	{0x3B,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
+	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
 	//0x3C   drc1_ad
-	{0x3C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
+	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
 };
-static u8 tas5707_drc1_tko_table[3][5]={
+static u8 tas5707_drc1_tko_table[3][4]={
 	//0x40   drc1_t
-	{0x40,0x00,0x00,0x00,0x00},
+	{0x00,0x00,0x00,0x00},
 	//0x41   drc1_k
-	{0x41,0x00,0x00,0x00,0x00},
+	{0x00,0x00,0x00,0x00},
 	//0x42   drc1_o
-	{0x42,0x00,0x00,0x00,0x00}
+	{0x00,0x00,0x00,0x00}
 };
 
 /* codec private data */
 struct tas5707_priv {
 	struct snd_soc_codec *codec;
-	struct tas5707_platform_data *pdata;
+	struct tas57xx_platform_data *pdata;
 
 	enum snd_soc_control_type control_type;
 	void *control_data;
@@ -107,7 +107,7 @@ static int tas5707_set_dai_fmt(struct snd_soc_dai *codec_dai,
 				  unsigned int fmt)
 {
 	//struct snd_soc_codec *codec = codec_dai->codec;
-	CODEC_DEBUG("~~~~%s\n", __func__);
+	CODEC_DEBUG("%s\n", __func__);
 
 	switch (fmt & SND_SOC_DAIFMT_MASTER_MASK) {
 	case SND_SOC_DAIFMT_CBS_CFS:
@@ -144,7 +144,7 @@ static int tas5707_hw_params(struct snd_pcm_substream *substream,
 	//struct snd_soc_pcm_runtime *rtd = substream->private_data;
 	//struct snd_soc_codec *codec = rtd->codec;
 	unsigned int rate;
-	CODEC_DEBUG("~~~~%s\n", __func__);
+	CODEC_DEBUG("%s\n", __func__);
 
 	rate = params_rate(params);
 	pr_debug("rate: %u\n", rate);
@@ -219,15 +219,18 @@ static struct snd_soc_dai_driver tas5707_dai = {
 };
 static int tas5707_set_master_vol(struct snd_soc_codec *codec)
 {
-	struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 	//using user BSP defined master vol config;
 	if(pdata && pdata->custom_master_vol){
-		CODEC_DEBUG("tas5707_set_master_vol::using BSP defined master vol config\n");
-		snd_soc_write(codec, DDX_MASTER_VOLUME, pdata->custom_master_vol);
+		CODEC_DEBUG("tas5707_set_master_vol::%d\n", pdata->custom_master_vol);
+		snd_soc_write(codec, DDX_MASTER_VOLUME, (0xff - pdata->custom_master_vol));
 	}
-	else
-		snd_soc_write(codec, DDX_MASTER_VOLUME, 0x00);
+	else{
+		CODEC_DEBUG("get dtd master_vol failed:using default setting\n");
+		snd_soc_write(codec, DDX_MASTER_VOLUME, 0x30);
+	}
+
 	return 0;
 }
 
@@ -236,7 +239,7 @@ static int tas5707_set_drc1(struct snd_soc_codec *codec)
 {
 	int i = 0, j = 0;
 	u8 *p = NULL;
-	struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 	//using user BSP defined drc1 config;
 	if(pdata && pdata->custom_drc1_table && pdata->custom_drc1_table_len == 24){
@@ -244,33 +247,40 @@ static int tas5707_set_drc1(struct snd_soc_codec *codec)
 		CODEC_DEBUG("tas5707_set_drc1::using BSP defined drc1 config\n");
 		for(i = 0;i < 3;i++){
 			for(j = 0;j < 8;j++)
-				TAS5707_drc1_table[i][j+1] = p[i*8 + j];
-			snd_soc_bulk_write_raw(codec, DDX_DRC1_AE+i, TAS5707_drc1_table[i], 9);
+				TAS5707_drc1_table[i][j] = p[i*8 + j];
+
+			snd_soc_bulk_write_raw(codec, DDX_DRC1_AE+i, TAS5707_drc1_table[i], 8);
 		}
+	}else{
+		return -1;
 	}
+
 	if(pdata && pdata->custom_drc1_tko_table && pdata->custom_drc1_tko_table_len == 12){
 		p = pdata->custom_drc1_tko_table;
 		CODEC_DEBUG("tas5707_set_drc1::using BSP defined drc1 TKO config\n");
 		for(i = 0;i < 3;i++){
 			for(j = 0;j < 4;j++)
-				tas5707_drc1_tko_table[i][j+1]= p[i*4 + j];
-			snd_soc_bulk_write_raw(codec, DDX_DRC1_T+i, tas5707_drc1_tko_table[i], 5);
+				tas5707_drc1_tko_table[i][j]= p[i*4 + j];
+
+			snd_soc_bulk_write_raw(codec, DDX_DRC1_T+i, tas5707_drc1_tko_table[i], 4);
 		}
+	}else{
+		return -1;
 	}
 	return 0;
 }
 
 static int tas5707_set_drc(struct snd_soc_codec *codec)
 {
-	struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 	char drc_mask = 0;
-	u8 tas5707_drc_ctl_table[] = {0x46,0x00,0x00,0x00,0x00};
+	u8 tas5707_drc_ctl_table[] = {0x00,0x00,0x00,0x00};
 	if(pdata && pdata->enable_ch1_drc){
 		drc_mask |= 0x01;
 		tas5707_set_drc1(codec);
 	}
-	tas5707_drc_ctl_table[4] = drc_mask;
-	snd_soc_bulk_write_raw(codec, DDX_DRC_CTL, tas5707_drc_ctl_table, 5);
+	tas5707_drc_ctl_table[3] = drc_mask;
+	snd_soc_bulk_write_raw(codec, DDX_DRC_CTL, tas5707_drc_ctl_table, 4);
 	return 0;
 }
 
@@ -279,25 +289,30 @@ static int tas5707_set_eq_biquad(struct snd_soc_codec *codec)
 	int i = 0, j = 0, k = 0;
 	u8 *p = NULL;
 	u8 addr;
-	u8 tas5707_bq_table[21];
+	u8 tas5707_bq_table[20];
 	struct tas5707_priv *tas5707 = snd_soc_codec_get_drvdata(codec);
-	struct tas5707_platform_data *pdata = tas5707->pdata;
-	struct tas5707_eq_cfg *cfg = pdata->eq_cfgs;
+	struct tas57xx_platform_data *pdata = tas5707->pdata;
+	struct tas57xx_eq_cfg *cfg;
+
+	if(!pdata)
+		return 0;
 
-	CODEC_DEBUG("tas5707_set_eq_biquad::using \
-		BSP defined EQ biquad config::%s\n", cfg[tas5707->eq_cfg].name);
+	if(!(cfg = pdata->eq_cfgs))
+		return 0;
+
+	CODEC_DEBUG("tas5707_set_eq_biquad::using BSP defined EQ biquad config::%s\n",
+										cfg[tas5707->eq_cfg].name);
 	p = cfg[tas5707->eq_cfg].regs;
 
 	for(i = 0;i < 2;i++){
 		for(j = 0;j < 7;j++){
 			addr = (DDX_CH1_BQ_0 + i*7 + j);
-			tas5707_bq_table[0] = addr;
 			for(k = 0;k < 20;k++){
-				tas5707_bq_table[k+1]= p[i*7*20 + j*20 + k];
-				printk(KERN_DEBUG "[%d]=%#x\n",k,tas5707_bq_table[k+1]);
+				tas5707_bq_table[k]= p[i*7*20 + j*20 + k];
+				printk(KERN_DEBUG "[%d]=%#x\n",k,tas5707_bq_table[k]);
 			}
 			printk(KERN_DEBUG "\n");
-			snd_soc_bulk_write_raw(codec, addr, tas5707_bq_table, 21);
+			snd_soc_bulk_write_raw(codec, addr, tas5707_bq_table, 20);
 		}
 	}
 	return 0;
@@ -308,7 +323,7 @@ static int tas5707_put_eq_enum(struct snd_kcontrol *kcontrol,
 {
 	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
 	struct tas5707_priv *tas5707 = snd_soc_codec_get_drvdata(codec);
-	struct tas5707_platform_data *pdata = tas5707->pdata;
+	struct tas57xx_platform_data *pdata = tas5707->pdata;
 	int value = ucontrol->value.integer.value[0];
 
 	if (value >= pdata->num_eq_cfgs)
@@ -329,13 +344,14 @@ static int tas5707_get_eq_enum(struct snd_kcontrol *kcontrol,
 
 	return 0;
 }
+
 static int tas5707_set_eq(struct snd_soc_codec *codec)
 {
 	int i = 0, ret = 0;
 	struct tas5707_priv *tas5707 = snd_soc_codec_get_drvdata(codec);
-	struct tas5707_platform_data *pdata = tas5707->pdata;
-	u8 tas5707_eq_ctl_table[] = {0x50,0x00,0x00,0x00,0x80};
-	struct tas5707_eq_cfg *cfg = pdata->eq_cfgs;
+	struct tas57xx_platform_data *pdata = tas5707->pdata;
+	u8 tas5707_eq_ctl_table[] = {0x00,0x00,0x00,0x80};
+	struct tas57xx_eq_cfg *cfg = pdata->eq_cfgs;
 
 	if(!pdata)
 		return -ENOENT;
@@ -345,7 +361,7 @@ static int tas5707_set_eq(struct snd_soc_codec *codec)
 			SOC_ENUM_EXT("EQ Mode", tas5707->eq_conf_enum,
 					tas5707_get_eq_enum, tas5707_put_eq_enum);
 
-		tas5707->eq_conf_texts = kmalloc(sizeof(char *) * pdata->num_eq_cfgs, GFP_KERNEL);
+		tas5707->eq_conf_texts = kzalloc(sizeof(char *) * pdata->num_eq_cfgs, GFP_KERNEL);
 		if(!tas5707->eq_conf_texts){
 			dev_err(codec->dev,
 				"Fail to allocate %d EQ config tests\n",
@@ -359,113 +375,68 @@ static int tas5707_set_eq(struct snd_soc_codec *codec)
 		tas5707->eq_conf_enum.max = pdata->num_eq_cfgs;
 		tas5707->eq_conf_enum.texts = tas5707->eq_conf_texts;
 
-		ret = snd_soc_add_controls(codec, &control, 1);
+		ret = snd_soc_add_codec_controls(codec, &control, 1);
 		if (ret != 0)
 			dev_err(codec->dev, "Fail to add EQ mode control: %d\n", ret);
 	}
 
 	tas5707_set_eq_biquad(codec);
 
-	tas5707_eq_ctl_table[4] &= 0x7F;
+	tas5707_eq_ctl_table[3] &= 0x7F;
 	snd_soc_bulk_write_raw(codec, DDX_BANKSWITCH_AND_EQCTL,
-						tas5707_eq_ctl_table, 5);
+						tas5707_eq_ctl_table, 4);
 	return 0;
 }
 
-static int getRegConfigDataIndex(struct snd_soc_codec *codec, unsigned int reg) {
-    int i = 0;
-    struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
-    struct tas57xx_reg_cfg *reg_cfgs = NULL;
-
-    if (pdata && pdata->init_regs) {
-        reg_cfgs = pdata->init_regs;
-        for (i = 0; i < pdata->num_init_regs; i++) {
-            if (reg_cfgs[i].reg_data[0] == reg) {
-                break;
-            }
-        }
-    }
-
-    if (i < pdata->num_init_regs) {
-        return i;
-    }
-
-    return -1;
-}
-
-static int init_reg_write(struct snd_soc_codec *codec, unsigned int reg, const void *data, size_t len) {
-    int i = 0, tmp_index = 0;
-    unsigned char data_buf[64] = { 0 };
-    struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
-    struct tas57xx_reg_cfg *reg_cfgs = NULL;
-
-    tmp_index = getRegConfigDataIndex(codec, reg);
-    if (tmp_index < 0) {
-        if (len == 2) {
-            return snd_soc_write(codec, *((unsigned char *) data), *((unsigned char *) data + 1));
-        } else {
-            return snd_soc_bulk_write_raw(codec, reg, data, len);
-        }
-    } else {
-        if (pdata && pdata->init_regs) {
-            reg_cfgs = pdata->init_regs;
-
-            data_buf[0] = reg_cfgs[tmp_index].reg_data[0];
-            memcpy(&data_buf[1], &reg_cfgs[tmp_index].reg_data[2], reg_cfgs[tmp_index].reg_data[1]);
-#if 0
-            CODEC_DEBUG("%s, addr = 0x%x, bytes = 0x%x\n", __func__, data_buf[0], reg_cfgs[tmp_index].reg_data[1]);
-            for (i = 0; i < reg_cfgs[tmp_index].reg_data[1]; i++) {
-                CODEC_DEBUG("%s, data[%d] = 0x%02x\n", __func__, i, data_buf[i + 1]);
-            }
-#endif
-            if (len == 2) {
-                return snd_soc_write(codec, data_buf[0], data_buf[1]);
-            } else {
-                return snd_soc_bulk_write_raw(codec, reg, data_buf, reg_cfgs[tmp_index].reg_data[1] + 1);
-            }
-        }
-    }
-}
-
-static int init_snd_soc_bulk_write_raw(struct snd_soc_codec *codec, unsigned int reg, const void *data, size_t len) {
-    return init_reg_write(codec, reg, data, len);
-}
-
-static int init_snd_soc_write(struct snd_soc_codec *codec, unsigned int reg, unsigned int val) {
-    unsigned char data_buf[16] = { 0 };
+static int tas5707_customer_init(struct snd_soc_codec *codec)
+{
+	int i = 0;
+	char data[4];
+    struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
+
+	if (pdata && pdata->init_regs) {
+		if(pdata->num_init_regs != 4){
+			printk("Error: num_init_regs = %d\n", pdata->num_init_regs);
+			return -1;
+		}
+		for (i = 0; i < pdata->num_init_regs; i++) {
+			data[i] = pdata->init_regs[i];
+		}
+	}else{
+		return -1;
+	}
 
-    data_buf[0] = reg;
-    data_buf[1] = val;
-    return init_reg_write(codec, reg, data_buf, 2);
+	snd_soc_bulk_write_raw(codec, data[0], data, 4);
+	return 0;
 }
 
 static int tas5707_init(struct snd_soc_codec *codec)
 {
 	int ret = 0;
-	unsigned char burst_data[][5]= {
-		{DDX_INPUT_MUX,0x00,0x01,0x77,0x72},
-		{DDX_CH4_SOURCE_SELECT,0x00,0x00,0x42,0x03},
-		{DDX_PWM_MUX,0x01,0x02,0x13,0x45},
+	unsigned char burst_data[][4]= {
+		{0x00,0x01,0x77,0x72},
+		{0x00,0x00,0x42,0x03},
+		{0x01,0x02,0x13,0x45},
 	};
 	struct tas5707_priv *tas5707 = snd_soc_codec_get_drvdata(codec);
-	struct tas5707_platform_data *pdata = tas5707->pdata;
+
 	CODEC_DEBUG("tas5707_init\n");
-	init_snd_soc_write(codec, DDX_OSC_TRIM, 0x00);
+	snd_soc_write(codec, DDX_OSC_TRIM, 0x00);
 	msleep(50);
-	init_snd_soc_write(codec, DDX_CLOCK_CTL, 0x6c);//0x74 = 512fs; 0x6c = 256fs
-	init_snd_soc_write(codec, DDX_SYS_CTL_1, 0xa0);
-	init_snd_soc_write(codec, DDX_SERIAL_DATA_INTERFACE, 0x05);
+	snd_soc_write(codec, DDX_CLOCK_CTL, 0x6c);//0x74 = 512fs; 0x6c = 256fs
+	snd_soc_write(codec, DDX_SYS_CTL_1, 0xa0);
+	snd_soc_write(codec, DDX_SERIAL_DATA_INTERFACE, 0x05);
 
 /*	init_snd_soc_write(codec, DDX_IC_DELAY_CHANNEL_1, 0xac);
 	init_snd_soc_write(codec, DDX_IC_DELAY_CHANNEL_2, 0x54);
 	init_snd_soc_write(codec, DDX_IC_DELAY_CHANNEL_3, 0xac);
 	init_snd_soc_write(codec, DDX_IC_DELAY_CHANNEL_4, 0x54);
 */
-	init_snd_soc_write(codec, DDX_BKND_ERR, 0x02);
+	snd_soc_write(codec, DDX_BKND_ERR, 0x02);
 
-	init_snd_soc_bulk_write_raw(codec, DDX_INPUT_MUX, burst_data[0], 5);
-	init_snd_soc_bulk_write_raw(codec, DDX_CH4_SOURCE_SELECT, burst_data[1], 5);
-	init_snd_soc_bulk_write_raw(codec, DDX_PWM_MUX, burst_data[2], 5);
+	snd_soc_bulk_write_raw(codec, DDX_INPUT_MUX, burst_data[0], 4);
+	snd_soc_bulk_write_raw(codec, DDX_CH4_SOURCE_SELECT, burst_data[1], 4);
+	snd_soc_bulk_write_raw(codec, DDX_PWM_MUX, burst_data[2], 4);
 
 	//drc
 	if((ret = tas5707_set_drc(codec)) < 0)
@@ -473,19 +444,22 @@ static int tas5707_init(struct snd_soc_codec *codec)
 	//eq
 	if((ret = tas5707_set_eq(codec)) < 0)
 		CODEC_DEBUG("fail to set tas5707 eq\n");
-
-	init_snd_soc_write(codec, DDX_VOLUME_CONFIG, 0xD1);
-	init_snd_soc_write(codec, DDX_SYS_CTL_2, 0x84);
-	init_snd_soc_write(codec, DDX_START_STOP_PERIOD, 0x95);
-	init_snd_soc_write(codec, DDX_PWM_SHUTDOWN_GROUP, 0x30);
-	init_snd_soc_write(codec, DDX_MODULATION_LIMIT, 0x02);
+	//init
+	if((ret = tas5707_customer_init(codec)) < 0)
+		CODEC_DEBUG("fail to set tas5707 customer init\n");
+
+	snd_soc_write(codec, DDX_VOLUME_CONFIG, 0xD1);
+	snd_soc_write(codec, DDX_SYS_CTL_2, 0x84);
+	snd_soc_write(codec, DDX_START_STOP_PERIOD, 0x95);
+	snd_soc_write(codec, DDX_PWM_SHUTDOWN_GROUP, 0x30);
+	snd_soc_write(codec, DDX_MODULATION_LIMIT, 0x02);
 	//normal operation
 	if((ret = tas5707_set_master_vol(codec)) < 0)
 		CODEC_DEBUG("fail to set tas5707 master vol\n");
 
-	init_snd_soc_write(codec, DDX_CHANNEL1_VOL, tas5707->Ch1_vol);
-	init_snd_soc_write(codec, DDX_CHANNEL2_VOL, tas5707->Ch2_vol);
-	init_snd_soc_write(codec, DDX_SOFT_MUTE, 0x00);
+	snd_soc_write(codec, DDX_CHANNEL1_VOL, tas5707->Ch1_vol);
+	snd_soc_write(codec, DDX_CHANNEL2_VOL, tas5707->Ch2_vol);
+	snd_soc_write(codec, DDX_SOFT_MUTE, 0x00);
 
 	return ret;
 }
@@ -493,7 +467,7 @@ static int tas5707_probe(struct snd_soc_codec *codec)
 {
 	int ret = 0;
 	struct tas5707_priv *tas5707 = snd_soc_codec_get_drvdata(codec);
-	struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
         early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN;
@@ -520,7 +494,7 @@ static int tas5707_probe(struct snd_soc_codec *codec)
 
 static int tas5707_remove(struct snd_soc_codec *codec)
 {
-	CODEC_DEBUG("~~~~~~~~~~~~%s", __func__);
+	CODEC_DEBUG("%s \n", __func__);
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
     unregister_early_suspend(&early_suspend);
@@ -530,9 +504,9 @@ static int tas5707_remove(struct snd_soc_codec *codec)
 }
 
 #ifdef CONFIG_PM
-static int tas5707_suspend(struct snd_soc_codec *codec,pm_message_t state) {
+static int tas5707_suspend(struct snd_soc_codec *codec) {
     struct tas5707_priv *tas5707 = snd_soc_codec_get_drvdata(codec);
-    struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
+    struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
     CODEC_DEBUG("sound::tas5707_suspend\n");
 
@@ -549,7 +523,7 @@ static int tas5707_suspend(struct snd_soc_codec *codec,pm_message_t state) {
 
 static int tas5707_resume(struct snd_soc_codec *codec) {
     struct tas5707_priv *tas5707 = snd_soc_codec_get_drvdata(codec);
-    struct tas5707_platform_data *pdata = dev_get_platdata(codec->dev);
+    struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
     CODEC_DEBUG("sound::tas5707_resume\n");
 
@@ -571,7 +545,7 @@ static int tas5707_resume(struct snd_soc_codec *codec) {
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static void tas5707_early_suspend(struct early_suspend *h) {
     struct snd_soc_codec *codec = NULL;
-    struct tas5707_platform_data *pdata = NULL;
+    struct tas57xx_platform_data *pdata = NULL;
 
     CODEC_DEBUG("sound::tas5707_early_suspend\n");
 
@@ -587,7 +561,7 @@ static void tas5707_early_suspend(struct early_suspend *h) {
 
 static void tas5707_late_resume(struct early_suspend *h) {
     struct snd_soc_codec *codec = NULL;
-    struct tas5707_platform_data *pdata = NULL;
+    struct tas57xx_platform_data *pdata = NULL;
 
     CODEC_DEBUG("sound::tas5707_late_resume\n");
 
@@ -628,7 +602,7 @@ static const struct snd_soc_codec_driver tas5707_codec = {
 	.num_dapm_routes =	ARRAY_SIZE(tas5707_dapm_routes),
 };
 
-static __devinit int tas5707_i2c_probe(struct i2c_client *i2c,
+static int tas5707_i2c_probe(struct i2c_client *i2c,
 				      const struct i2c_device_id *id)
 {
 	struct tas5707_priv *tas5707;
@@ -650,7 +624,7 @@ static __devinit int tas5707_i2c_probe(struct i2c_client *i2c,
 	return ret;
 }
 
-static __devexit int tas5707_i2c_remove(struct i2c_client *client)
+static int tas5707_i2c_remove(struct i2c_client *client)
 {
 	//snd_soc_unregister_codec(&client->dev);
 	devm_kfree(&client->dev, i2c_get_clientdata(client));
@@ -668,7 +642,7 @@ static struct i2c_driver tas5707_i2c_driver = {
 		.owner = THIS_MODULE,
 	},
 	.probe =    tas5707_i2c_probe,
-	.remove =   __devexit_p(tas5707_i2c_remove),
+	.remove =   tas5707_i2c_remove,
 	.id_table = tas5707_i2c_id,
 };
 
diff --git a/sound/soc/codecs/tas5711.c b/sound/soc/codecs/tas5711.c
index fab4e8d47adf..362f48b9acb7 100755
--- a/sound/soc/codecs/tas5711.c
+++ b/sound/soc/codecs/tas5711.c
@@ -94,7 +94,7 @@ static u8 tas5711_drc2_tko_table[3][4]={
 /* codec private data */
 struct tas5711_priv {
 	struct snd_soc_codec *codec;
-	struct tas5711_platform_data *pdata;
+	struct tas57xx_platform_data *pdata;
 
 	enum snd_soc_control_type control_type;
 	void *control_data;
@@ -254,16 +254,15 @@ static struct snd_soc_dai_driver tas5711_dai = {
 };
 static int tas5711_set_master_vol(struct snd_soc_codec *codec)
 {
-	struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 	//using user BSP defined master vol config;
 	if(pdata && pdata->custom_master_vol) {
 		CODEC_DEBUG("tas5711_set_master_vol::%d\n", pdata->custom_master_vol);
-		snd_soc_write(codec, DDX_MASTER_VOLUME, pdata->custom_master_vol);
+		snd_soc_write(codec, DDX_MASTER_VOLUME, (0xff - pdata->custom_master_vol));
 	}
 	else{
-		CODEC_DEBUG("%s failed:pdata = %x,pdata->custom_master_vol = %d\n",
-			__func__,pdata,pdata->custom_master_vol);
+		CODEC_DEBUG("get dtd master_vol failed:using default setting\n");
 		snd_soc_write(codec, DDX_MASTER_VOLUME, 0x30);
 	}
 
@@ -273,7 +272,7 @@ static int tas5711_set_subwoofer(struct snd_soc_codec *codec)
 {
 	int i = 0, j = 0;
 	u8 *p = NULL;
-	struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 	//using user BSP defined subwoofer config;
 	if(pdata && pdata->custom_sub_bq_table && pdata->custom_sub_bq_table_len == 40){
@@ -284,8 +283,6 @@ static int tas5711_set_subwoofer(struct snd_soc_codec *codec)
 				TAS5711_subwoofer_table[i][j] = p[i*20 + j];
 
 	}else{
-		CODEC_DEBUG("tas5711_set_subwoofer fail, pdata = %x, pdata->custom_sub_bq_table = %d\n",
-		pdata,pdata->custom_sub_bq_table);
 		return -1;
 	}
 
@@ -298,7 +295,7 @@ static int tas5711_set_drc1(struct snd_soc_codec *codec)
 {
 	int i = 0, j = 0;
 	u8 *p = NULL;
-	struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 	//using user BSP defined drc1 config;
 	if(pdata && pdata->custom_drc1_table && pdata->custom_drc1_table_len == 24){
@@ -311,8 +308,6 @@ static int tas5711_set_drc1(struct snd_soc_codec *codec)
 			snd_soc_bulk_write_raw(codec, DDX_DRC1_AE+i, TAS5711_drc1_table[i], 8);
 		}
 	}else{
-		CODEC_DEBUG("tas5711_set_drc1 fail, pdata = %x, pdata->custom_drc1_table = %d\n",
-		pdata,pdata->custom_drc1_table);
 		return -1;
 	}
 
@@ -326,8 +321,6 @@ static int tas5711_set_drc1(struct snd_soc_codec *codec)
 			snd_soc_bulk_write_raw(codec, DDX_DRC1_T+i, tas5711_drc1_tko_table[i], 4);
 		}
 	}else{
-		CODEC_DEBUG("tas5711_set_drc1 fail, pdata = %x, pdata->custom_drc1_tko_table = %d\n",
-		pdata,pdata->custom_drc1_tko_table);
 		return -1;
 	}
 	return 0;
@@ -337,7 +330,7 @@ static int tas5711_set_drc2(struct snd_soc_codec *codec)
 {
 	int i = 0, j = 0;
 	u8 *p = NULL;
-	struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 	//using user BSP defined drc2 config;
 	if(pdata && pdata->custom_drc2_table && pdata->custom_drc2_table_len == 24){
@@ -350,8 +343,6 @@ static int tas5711_set_drc2(struct snd_soc_codec *codec)
 			snd_soc_bulk_write_raw(codec, DDX_DRC2_AE+i, TAS5711_drc2_table[i], 8);
 		}
 	}else{
-		CODEC_DEBUG("tas5711_set_drc2 fail, pdata = %x, pdata->custom_drc2_table = %d\n",
-		pdata,pdata->custom_drc2_table);
 		return -1;
 	}
 
@@ -365,8 +356,6 @@ static int tas5711_set_drc2(struct snd_soc_codec *codec)
 			snd_soc_bulk_write_raw(codec, DDX_DRC2_T+i, tas5711_drc2_tko_table[i], 4);
 		}
 	}else{
-		CODEC_DEBUG("tas5711_set_drc2 fail, pdata = %x, pdata->custom_drc2_tko_table = %d\n",
-		pdata,pdata->custom_drc2_tko_table);
 		return -1;
 	}
 
@@ -375,7 +364,7 @@ static int tas5711_set_drc2(struct snd_soc_codec *codec)
 
 static int tas5711_set_drc(struct snd_soc_codec *codec)
 {
-	struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 	char drc_mask = 0;
 	u8 tas5711_drc_ctl_table[] = {0x00,0x00,0x00,0x00};
 	if(pdata && pdata->enable_ch1_drc){
@@ -396,10 +385,10 @@ static int tas5711_set_eq_biquad(struct snd_soc_codec *codec)
 	int i = 0, j = 0, k = 0;
 	u8 *p = NULL;
 	u8 addr;
-	u8 tas5711_bq_table[21];
+	u8 tas5711_bq_table[20];
 	struct tas5711_priv *tas5711 = snd_soc_codec_get_drvdata(codec);
-	struct tas5711_platform_data *pdata = tas5711->pdata;
-	struct tas5711_eq_cfg *cfg;
+	struct tas57xx_platform_data *pdata = tas5711->pdata;
+	struct tas57xx_eq_cfg *cfg;
 
 	if(!pdata)
 		return 0;
@@ -433,7 +422,7 @@ static int tas5711_put_eq_enum(struct snd_kcontrol *kcontrol,
 {
 	struct snd_soc_codec *codec = snd_kcontrol_chip(kcontrol);
 	struct tas5711_priv *tas5711 = snd_soc_codec_get_drvdata(codec);
-	struct tas5711_platform_data *pdata = tas5711->pdata;
+	struct tas57xx_platform_data *pdata = tas5711->pdata;
 	int value = ucontrol->value.integer.value[0];
 
 	if (value >= pdata->num_eq_cfgs)
@@ -459,9 +448,9 @@ static int tas5711_set_eq(struct snd_soc_codec *codec)
 {
 	int i = 0, ret = 0;
 	struct tas5711_priv *tas5711 = snd_soc_codec_get_drvdata(codec);
-	struct tas5711_platform_data *pdata = tas5711->pdata;
+	struct tas57xx_platform_data *pdata = tas5711->pdata;
 	u8 tas5711_eq_ctl_table[] = {0x00,0x00,0x00,0x80};
-	struct tas5711_eq_cfg *cfg = pdata->eq_cfgs;
+	struct tas57xx_eq_cfg *cfg = pdata->eq_cfgs;
 
 	if(!pdata)
 		return -ENOENT;
@@ -502,7 +491,7 @@ static int tas5711_customer_init(struct snd_soc_codec *codec)
 {
     int i = 0;
 	char data[4];
-    struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+    struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 	if (pdata && pdata->init_regs) {
 		if(pdata->num_init_regs != 4){
@@ -513,8 +502,6 @@ static int tas5711_customer_init(struct snd_soc_codec *codec)
 			data[i] = pdata->init_regs[i];
 		}
 	}else{
-		printk("%s fail: pdata = %x, pdata->init_regs = %d\n",
-					__func__,pdata,pdata->init_regs);
 		return -1;
 	}
 
@@ -522,74 +509,6 @@ static int tas5711_customer_init(struct snd_soc_codec *codec)
 	return 0;
 }
 
-static int getRegConfigDataIndex(struct snd_soc_codec *codec, unsigned int reg) {
-    int i = 0;
-    struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
-    struct tas57xx_reg_cfg *reg_cfgs = NULL;
-	printk("5711 %s\n", __func__);
-
-    if (pdata && pdata->init_regs) {
-        reg_cfgs = pdata->init_regs;
-        for (i = 0; i < pdata->num_init_regs; i++) {
-            if (reg_cfgs[i].reg_data[0] == reg) {
-                break;
-            }
-        }
-    }
-
-    if (i < pdata->num_init_regs) {
-        return i;
-    }
-
-    return -1;
-}
-
-static int init_reg_write(struct snd_soc_codec *codec, unsigned int reg, const void *data, size_t len) {
-    int i = 0, tmp_index = 0;
-    unsigned char data_buf[64] = { 0 };
-    struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
-    struct tas57xx_reg_cfg *reg_cfgs = NULL;
-	printk("5711 %s\n", __func__);
-    tmp_index = getRegConfigDataIndex(codec, reg);
-    if (tmp_index < 0) {
-        if (len == 2) {
-            return snd_soc_write(codec, *((unsigned char *) data), *((unsigned char *) data + 1));
-        } else {
-            return snd_soc_bulk_write_raw(codec, reg, data, len);
-        }
-    } else {
-        if (pdata && pdata->init_regs) {
-            reg_cfgs = pdata->init_regs;
-
-            data_buf[0] = reg_cfgs[tmp_index].reg_data[0];
-            memcpy(&data_buf[1], &reg_cfgs[tmp_index].reg_data[2], reg_cfgs[tmp_index].reg_data[1]);
-#if 0
-            CODEC_DEBUG("%s, addr = 0x%x, bytes = 0x%x\n", __func__, data_buf[0], reg_cfgs[tmp_index].reg_data[1]);
-            for (i = 0; i < reg_cfgs[tmp_index].reg_data[1]; i++) {
-                CODEC_DEBUG("%s, data[%d] = 0x%02x\n", __func__, i, data_buf[i + 1]);
-            }
-#endif
-            if (len == 2) {
-                return snd_soc_write(codec, data_buf[0], data_buf[1]);
-            } else {
-                return snd_soc_bulk_write_raw(codec, reg, data_buf, reg_cfgs[tmp_index].reg_data[1] + 1);
-            }
-        }
-    }
-}
-
-static int init_snd_soc_bulk_write_raw(struct snd_soc_codec *codec, unsigned int reg, const void *data, size_t len) {
-    return init_reg_write(codec, reg, data, len);
-}
-
-static int init_snd_soc_write(struct snd_soc_codec *codec, unsigned int reg, unsigned int val) {
-    unsigned char data_buf[16] = { 0 };
-
-    data_buf[0] = reg;
-    data_buf[1] = val;
-    return init_reg_write(codec, reg, data_buf, 2);
-}
-
 static int tas5711_init(struct snd_soc_codec *codec)
 {
 	int ret = 0;
@@ -599,7 +518,7 @@ static int tas5711_init(struct snd_soc_codec *codec)
 		{0x01,0x01,0x32,0x45},
 	};
 	struct tas5711_priv *tas5711 = snd_soc_codec_get_drvdata(codec);
-	struct tas5711_platform_data *pdata = tas5711->pdata;
+
 	CODEC_DEBUG("tas5711_init\n");
 	snd_soc_write(codec, DDX_OSC_TRIM, 0x00);
 	msleep(50);
@@ -651,7 +570,7 @@ static int tas5711_probe(struct snd_soc_codec *codec)
 {
 	int ret = 0;
 	struct tas5711_priv *tas5711 = snd_soc_codec_get_drvdata(codec);
-	struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+	struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
 #ifdef CONFIG_HAS_EARLYSUSPEND
         early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN;
@@ -688,9 +607,9 @@ static int tas5711_remove(struct snd_soc_codec *codec)
 }
 
 #ifdef CONFIG_PM
-static int tas5711_suspend(struct snd_soc_codec *codec,pm_message_t state) {
+static int tas5711_suspend(struct snd_soc_codec *codec) {
     struct tas5711_priv *tas5711 = snd_soc_codec_get_drvdata(codec);
-    struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+    struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
     CODEC_DEBUG("sound::tas5711_suspend\n");
 
@@ -709,7 +628,7 @@ static int tas5711_suspend(struct snd_soc_codec *codec,pm_message_t state) {
 
 static int tas5711_resume(struct snd_soc_codec *codec) {
     struct tas5711_priv *tas5711 = snd_soc_codec_get_drvdata(codec);
-    struct tas5711_platform_data *pdata = dev_get_platdata(codec->dev);
+    struct tas57xx_platform_data *pdata = dev_get_platdata(codec->dev);
 
     CODEC_DEBUG("sound::tas5711_resume\n");
 
@@ -733,7 +652,7 @@ static int tas5711_resume(struct snd_soc_codec *codec) {
 #ifdef CONFIG_HAS_EARLYSUSPEND
 static void tas5711_early_suspend(struct early_suspend *h) {
     struct snd_soc_codec *codec = NULL;
-    struct tas5711_platform_data *pdata = NULL;
+    struct tas57xx_platform_data *pdata = NULL;
 
     CODEC_DEBUG("sound::tas5711_early_suspend\n");
 
@@ -749,7 +668,7 @@ static void tas5711_early_suspend(struct early_suspend *h) {
 
 static void tas5711_late_resume(struct early_suspend *h) {
     struct snd_soc_codec *codec = NULL;
-    struct tas5711_platform_data *pdata = NULL;
+    struct tas57xx_platform_data *pdata = NULL;
 
     CODEC_DEBUG("sound::tas5711_late_resume\n");
 
-- 
2.19.0

