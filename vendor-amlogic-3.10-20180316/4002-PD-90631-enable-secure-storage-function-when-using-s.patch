From 9762436ed2cc6fc8c2b87a2c76deae5c7e4ed082 Mon Sep 17 00:00:00 2001
From: "xueyue.ma" <xueyue.ma@amlogic.com>
Date: Thu, 17 Apr 2014 15:56:03 +0800
Subject: [PATCH 4002/5965] PD#90631: enable secure storage function when using
 secure os

---
 arch/arm/configs/meson8_tee_defconfig         |  1 +
 drivers/amlogic/Makefile                      |  2 +-
 drivers/amlogic/secure_monitor/flash_secure.c | 61 ++++++++-----------
 3 files changed, 27 insertions(+), 37 deletions(-)

diff --git a/arch/arm/configs/meson8_tee_defconfig b/arch/arm/configs/meson8_tee_defconfig
index 3d4c433b817a..56807f591d96 100644
--- a/arch/arm/configs/meson8_tee_defconfig
+++ b/arch/arm/configs/meson8_tee_defconfig
@@ -360,3 +360,4 @@ CONFIG_CRYPTO_PCBC=y
 CONFIG_CRYPTO_TWOFISH=y
 CONFIG_CRC_T10DIF=y
 CONFIG_CRC7=y
+CONFIG_EMMC_SECURE_STORAGE=y
diff --git a/drivers/amlogic/Makefile b/drivers/amlogic/Makefile
index 1c634f17c90c..19408dd39d06 100755
--- a/drivers/amlogic/Makefile
+++ b/drivers/amlogic/Makefile
@@ -125,4 +125,4 @@ obj-$(CONFIG_AMLOGIC_ION) += ion_dev/
 obj-y += crypto/
 
 #obj-$(CONFIG_MESON_TRUSTZONE) += trustzone/
-#obj-$(CONFIG_MESON_TRUSTZONE) += secure_monitor/
+obj-$(CONFIG_MESON_TRUSTZONE) += secure_monitor/
diff --git a/drivers/amlogic/secure_monitor/flash_secure.c b/drivers/amlogic/secure_monitor/flash_secure.c
index d3b4fc3a3411..f5612a4b4604 100755
--- a/drivers/amlogic/secure_monitor/flash_secure.c
+++ b/drivers/amlogic/secure_monitor/flash_secure.c
@@ -30,7 +30,11 @@
   * communicate Head lock mutex location: the last 4B of HEAD; inited by secureOS
   * Data: 128KB
 */
+#if defined(CONFIG_ARCH_MESON6)
 #define SHARE_MEM_PHY_START   0x3c100000-0x20400
+#elif defined(CONFIG_ARCH_MESON8)
+#define SHARE_MEM_PHY_START   0x061dfc00
+#endif
 #define SHARE_MEM_HEAD_OFFSET 0x0
 #define SHARE_MEM_DATA_OFFSET 0x400
 #define SHARE_MEM_PHY_SIZE 0x20400
@@ -63,7 +67,7 @@ extern void init_mutex(unsigned int* lock);
 extern unsigned int unlock_mutex(unsigned int* lock);
 extern void write_to_flash(unsigned char* psrc, unsigned size);
 
-static int secure_monitor_probe(struct platform_device *pdev)
+static int secure_monitor_start(void)
 {	
 	int ret=0;
 	printk("%s:%d\n", __FUNCTION__, __LINE__);
@@ -102,28 +106,6 @@ flash_monitor_probe_exit:
 	return ret;
 }
 
-static int secure_monitor_remove(struct platform_device *pdev)
-{
-	int ret=0;
-	printk("**************flash_secure_remove start!\n");
-	if(secure_task){
-		kthread_stop(secure_task);
-		secure_task = NULL;
-	}
-		
-	if(secure_monitor_buf.psbuf)
-		iounmap(secure_monitor_buf.psbuf);
-	secure_monitor_buf.psbuf = NULL;
-	
-	if(secure_monitor_buf.pfbuf)
-		kfree(secure_monitor_buf.pfbuf);
-	secure_monitor_buf.pfbuf = NULL;	
-	
-	printk("**************flash_secure_remove end!\n");
-	return ret;	
-}
-
-
 void write_to_flash(unsigned char* psrc, unsigned size)
 {	
 #ifdef CONFIG_SECURE_NAND
@@ -154,7 +136,7 @@ extern 	int secure_storage_spi_write(u8 *buf,u32 len);
 	return;
 #endif
 
-#elif CONFIG_EMMC_SECURE_STORAGE
+#ifdef CONFIG_EMMC_SECURE_STORAGE
 extern 	int mmc_secure_storage_ops(unsigned char * buf, unsigned int len, int wr_flag);
 	unsigned char * secure_ptr = psrc;
 	int error = 0;
@@ -209,20 +191,11 @@ static int secure_writer_monitor(void *arg)
 	return 0;
 }
 
-static struct platform_driver secure_monitor_driver = {
-	.probe = secure_monitor_probe,
-	.remove = secure_monitor_remove,
-	.driver = {
-		.name = SECURE_MONITOR_DEVICE_NAME,
-		.owner = THIS_MODULE,
-	},
-};
-
 static int __init secure_monitor_init(void)
 {
 	int ret=-1;
 	printk("%s:%d\n", __FUNCTION__, __LINE__);
-	ret = platform_driver_register(&secure_monitor_driver);
+	ret = secure_monitor_start();
 	if(ret != 0){
 		printk(KERN_ERR "failed to register flash monitor driver, error %d\n", ret);
 		return -ENODEV;
@@ -232,7 +205,23 @@ static int __init secure_monitor_init(void)
 
 static void __exit secure_monitor_exit(void)
 {
-	platform_driver_unregister(&secure_monitor_driver);
+	int ret=0;
+	printk("**************flash_secure_remove start!\n");
+	if(secure_task){
+		kthread_stop(secure_task);
+		secure_task = NULL;
+	}
+
+	if(secure_monitor_buf.psbuf)
+		iounmap(secure_monitor_buf.psbuf);
+	secure_monitor_buf.psbuf = NULL;
+
+	if(secure_monitor_buf.pfbuf)
+		kfree(secure_monitor_buf.pfbuf);
+	secure_monitor_buf.pfbuf = NULL;
+
+	printk("**************flash_secure_remove end!\n");
+	return ret;
 }
 
 module_init(secure_monitor_init);
@@ -241,4 +230,4 @@ module_exit(secure_monitor_exit);
 
 MODULE_DESCRIPTION("AMLOGIC secure monitor driver");
 MODULE_LICENSE("GPL");
-MODULE_AUTHOR("Yan Wang <yan.wang@amlogic.com>");
\ No newline at end of file
+MODULE_AUTHOR("Yan Wang <yan.wang@amlogic.com>");
-- 
2.19.0

