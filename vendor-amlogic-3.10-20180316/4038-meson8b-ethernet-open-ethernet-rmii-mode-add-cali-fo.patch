From ddc1d732438f26e6cdf5286311f6088482c2ae83 Mon Sep 17 00:00:00 2001
From: "baoqi.wang" <baoqi.wang@amlogic.com>
Date: Fri, 9 May 2014 21:25:02 +0800
Subject: [PATCH 4038/5965] meson8b: ethernet: open ethernet rmii mode & add
 cali for mac

---
 arch/arm/boot/dts/amlogic/meson8b_skt.dtd | 13 ++++
 arch/arm/configs/meson8b_defconfig        |  6 +-
 drivers/amlogic/ethernet/am_net8218.c     | 78 +++++++++++++++++++++++
 3 files changed, 95 insertions(+), 2 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8b_skt.dtd b/arch/arm/boot/dts/amlogic/meson8b_skt.dtd
index 2cc07735f64f..daca15e4ebff 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_skt.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_skt.dtd
@@ -1877,6 +1877,19 @@ void root_func(){
 			amlogic,clrmask=<2 0x380000>;
 			amlogic,pins = "BOOT_11","BOOT_12","BOOT_13","BOOT_18";
 		};
+
+	};
+/// ***************************************************************************************
+///	-	Ethernet
+//$$ MODULE="Ethernet"
+//$$ DEVICE="meson-eth"
+//$$ L2 PROP_STR = "status"
+    meson-eth{
+		compatible = "amlogic,meson-eth";
+		dev_name = "meson-eth";
+		status = "okay";
+		ethbaseaddr = <0xfe0c0000>;
+		interruptnum = <40>;
 	};
 
 }; /* end of / */
diff --git a/arch/arm/configs/meson8b_defconfig b/arch/arm/configs/meson8b_defconfig
index 7a377fffe206..25d5123341a2 100755
--- a/arch/arm/configs/meson8b_defconfig
+++ b/arch/arm/configs/meson8b_defconfig
@@ -173,6 +173,10 @@ CONFIG_AML_NAND_KEY=y
 # CONFIG_AM_NAND is not set
 CONFIG_AML_NEXT_GEN_NAND=y
 CONFIG_AM_ETHERNET=y
+CONFIG_AML_PHY=y
+CONFIG_AML_LAN8720=y
+CONFIG_AML_IP101_PHY=y
+CONFIG_AML_KSZ8091=y
 CONFIG_AM_WIFI=y
 CONFIG_AM_WIFI_SD_MMC=y
 CONFIG_AM_WIFI_USB=y
@@ -209,8 +213,6 @@ CONFIG_BLK_DEV_SR=y
 CONFIG_SCSI_MULTI_LUN=y
 CONFIG_NETDEVICES=y
 CONFIG_TUN=y
-CONFIG_SMSC_PHY=y
-CONFIG_ICPLUS_PHY=y
 CONFIG_PPP=y
 CONFIG_PPP_BSDCOMP=y
 CONFIG_PPP_DEFLATE=y
diff --git a/drivers/amlogic/ethernet/am_net8218.c b/drivers/amlogic/ethernet/am_net8218.c
index 8d47c0ed9399..b9d94a38f002 100755
--- a/drivers/amlogic/ethernet/am_net8218.c
+++ b/drivers/amlogic/ethernet/am_net8218.c
@@ -880,6 +880,7 @@ static int mac_pmt_enable(unsigned int enable)
  * @return
  */
 /* --------------------------------------------------------------------------*/
+#undef CONFIG_AML_NAND_KEY
 #ifdef CONFIG_AML_NAND_KEY
 extern int get_aml_key_kernel(const char* key_name, unsigned char* data, int ascii_flag);
 extern int extenal_api_key_set_version(char *devvesion);
@@ -2681,6 +2682,77 @@ static int eth_pwol_store(struct class *class, struct class_attribute *attr, con
 	}
 	return count;
 }
+#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
+
+static int am_net_cali(int argc, char **argv,int gate)
+{
+	int cali_rise = 0;
+	int cali_sel = 0;
+	int cali_start;
+	int cali_time;
+	int ii=0;
+	cali_start = gate;
+	unsigned int val;
+	if ((argc < 4) || (argv == NULL) || (argv[0] == NULL)
+			|| (argv[1] == NULL) || (argv[2] == NULL)|| (argv[3] == NULL)) {
+		printk("Invalid syntax\n");
+		return -1;
+	}
+	cali_rise = simple_strtol(argv[1], NULL, 16);
+	cali_sel = simple_strtol(argv[2], NULL, 16);
+	cali_time = simple_strtol(argv[3], NULL, 16);
+	aml_write_reg32((aml_read_reg32(P_PREG_ETH_REG0)|(cali_start << 25)|(cali_rise << 26)|(cali_sel << 27)),P_PREG_ETH_REG0);
+	for(ii=0;ii < cali_time;ii++){
+		if(aml_read_reg32(P_PREG_ETH_REG1)>>15 & 0x1){
+			printk("cali back: %d\n", aml_read_reg32(P_PREG_ETH_REG1));
+			break;
+		}
+	}
+
+	return 0;
+}
+static ssize_t eth_cali_store(struct class *class, struct class_attribute *attr,
+		const char *buf, size_t count)
+{
+	int argc;
+	char *buff, *p, *para;
+	char *argv[4];
+	char cmd;
+
+	buff = kstrdup(buf, GFP_KERNEL);
+	p = buff;
+	for (argc = 0; argc < 5; argc++) {
+		para = strsep(&p, " ");
+		if (para == NULL)
+			break;
+		argv[argc] = para;
+	}
+	if (argc < 1 || argc > 4)
+		goto end;
+
+	cmd = argv[0][0];
+		switch (cmd) {
+		case 'e':
+		case 'E':
+			am_net_cali(argc, argv,1);
+			break;
+		case 'd':
+		case 'D':
+			am_net_cali(argc, argv,0);
+			break;
+
+		default:
+			goto end;
+		}
+	
+		return count;
+	
+	end:
+		kfree(buff);
+		return 0;
+
+}
+#endif
 static struct class *eth_sys_class;
 static CLASS_ATTR(mdcclk, S_IWUSR | S_IRUGO, eth_mdcclk_show, eth_mdcclk_store);
 static CLASS_ATTR(debug, S_IWUSR | S_IRUGO, eth_debug_show, eth_debug_store);
@@ -2690,6 +2762,9 @@ static CLASS_ATTR(macreg, S_IWUSR | S_IRUGO, eth_macreg_help, eth_macreg_func);
 static CLASS_ATTR(wol, S_IWUSR | S_IRUGO, eth_wol_show, eth_wol_store);
 static CLASS_ATTR(pwol, S_IWUSR | S_IRUGO, eth_pwol_show, eth_pwol_store);
 static CLASS_ATTR(linkspeed, S_IWUSR | S_IRUGO, eth_linkspeed_show, NULL);
+#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
+static CLASS_ATTR(cali, S_IWUSR | S_IRUGO, NULL,eth_cali_store);
+#endif
 
 /* --------------------------------------------------------------------------*/
 /**
@@ -2712,6 +2787,9 @@ static int __init am_eth_class_init(void)
 	ret = class_create_file(eth_sys_class, &class_attr_wol);
 	ret = class_create_file(eth_sys_class, &class_attr_pwol);
 	ret = class_create_file(eth_sys_class, &class_attr_linkspeed);
+#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
+	ret = class_create_file(eth_sys_class, &class_attr_cali);
+#endif
 
 	return ret;
 }
-- 
2.19.0

