From c30c22c5ab9d038fe61e172f35b0c86a3b715137 Mon Sep 17 00:00:00 2001
From: Victor Wan <victor.wan@amlogic.com>
Date: Sat, 10 May 2014 17:35:31 +0800
Subject: [PATCH 4046/5965] usb: dwc_otg 310: support host only port

---
 drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.c | 41 ++++++-------
 drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.h |  3 +
 .../amlogic/usb/dwc_otg/310/dwc_otg_core_if.h |  2 +-
 .../amlogic/usb/dwc_otg/310/dwc_otg_driver.c  | 57 ++++++++++---------
 4 files changed, 56 insertions(+), 47 deletions(-)

diff --git a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.c b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.c
index 822f9378fc96..aa025398df54 100755
--- a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.c
+++ b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.c
@@ -90,7 +90,7 @@ void dwc_otg_set_vbus_power(dwc_otg_core_if_t * _core_if, char is_power_on)
  * @param reg_base_addr Base address of DWC_otg core registers
  *
  */
-dwc_otg_core_if_t *dwc_otg_cil_init(const uint32_t * reg_base_addr)
+dwc_otg_core_if_t *dwc_otg_cil_init(const uint32_t * reg_base_addr, int host_only)
 {
 	dwc_otg_core_if_t *core_if = 0;
 	dwc_otg_dev_if_t *dev_if = 0;
@@ -140,6 +140,7 @@ dwc_otg_core_if_t *dwc_otg_cil_init(const uint32_t * reg_base_addr)
 
 	dev_if->speed = 0;	// unknown
 
+	core_if->host_only = host_only;
 	core_if->dev_if = dev_if;
 
 	/*
@@ -5490,26 +5491,28 @@ static int dwc_otg_setup_params(dwc_otg_core_if_t * core_if)
 	dwc_otg_set_param_ulpi_fs_ls(core_if, dwc_param_ulpi_fs_ls_default);
 	dwc_otg_set_param_en_multiple_tx_fifo(core_if,
 					      dwc_param_en_multiple_tx_fifo_default);
-	
+	DWC_PRINTF("curmode: %d, host_only: %d\n",gintsts.b.curmode,core_if->host_only);
 	if (gintsts.b.curmode) {
-		/* Force device mode to get power-on values of device FIFOs */
-		gusbcfg_data_t gusbcfg = {.d32 = 0 };
-		gusbcfg.d32 =  DWC_READ_REG32(&core_if->core_global_regs->gusbcfg);
-		gusbcfg.b.force_dev_mode = 1;
-		DWC_WRITE_REG32(&core_if->core_global_regs->gusbcfg, gusbcfg.d32);
-		dwc_mdelay(100);
-		for (i = 0; i < 15; i++) {
-		dwc_otg_set_param_dev_perio_tx_fifo_size(core_if,
-							 dwc_param_dev_perio_tx_fifo_size_default, i);
-		}
-		for (i = 0; i < 15; i++) {
-			dwc_otg_set_param_dev_tx_fifo_size(core_if,
-							   dwc_param_dev_tx_fifo_size_default, i);
+		if(!core_if->host_only){
+			/* Force device mode to get power-on values of device FIFOs */
+			gusbcfg_data_t gusbcfg = {.d32 = 0 };
+			gusbcfg.d32 =  DWC_READ_REG32(&core_if->core_global_regs->gusbcfg);
+			gusbcfg.b.force_dev_mode = 1;
+			DWC_WRITE_REG32(&core_if->core_global_regs->gusbcfg, gusbcfg.d32);
+			dwc_mdelay(100);
+			for (i = 0; i < 15; i++) {
+			dwc_otg_set_param_dev_perio_tx_fifo_size(core_if,
+								 dwc_param_dev_perio_tx_fifo_size_default, i);
+			}
+			for (i = 0; i < 15; i++) {
+				dwc_otg_set_param_dev_tx_fifo_size(core_if,
+								   dwc_param_dev_tx_fifo_size_default, i);
+			}
+			gusbcfg.d32 =  DWC_READ_REG32(&core_if->core_global_regs->gusbcfg);
+			gusbcfg.b.force_dev_mode = 0;
+			DWC_WRITE_REG32(&core_if->core_global_regs->gusbcfg, gusbcfg.d32);
+			dwc_mdelay(100);
 		}
-		gusbcfg.d32 =  DWC_READ_REG32(&core_if->core_global_regs->gusbcfg);
-		gusbcfg.b.force_dev_mode = 0;
-		DWC_WRITE_REG32(&core_if->core_global_regs->gusbcfg, gusbcfg.d32);
-		dwc_mdelay(100);
 	} else {
 		for (i = 0; i < 15; i++) {
 			dwc_otg_set_param_dev_perio_tx_fifo_size(core_if,
diff --git a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.h b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.h
index 8bc581cca3a9..b9027602816c 100755
--- a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.h
+++ b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_cil.h
@@ -954,6 +954,9 @@ struct dwc_otg_core_if {
 	/* Device connected */
 	int device_connected;
 
+	/* Host only flag */
+	int host_only;
+
 	/** Device mode Periodic Tx FIFO Mask */
 	uint32_t p_tx_msk;
 	/** Device mode Periodic Tx FIFO Mask */
diff --git a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_core_if.h b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_core_if.h
index 7d04d10a7ef7..179956c5135c 100755
--- a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_core_if.h
+++ b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_core_if.h
@@ -50,7 +50,7 @@ typedef struct dwc_otg_core_if dwc_otg_core_if_t;
 /** Maximum number of Endpoints/HostChannels */
 #define MAX_EPS_CHANNELS 16
 
-extern dwc_otg_core_if_t *dwc_otg_cil_init(const uint32_t * _reg_base_addr);
+extern dwc_otg_core_if_t *dwc_otg_cil_init(const uint32_t * _reg_base_addr, int host_only);
 extern void dwc_otg_core_init(dwc_otg_core_if_t * _core_if);
 extern void dwc_otg_cil_remove(dwc_otg_core_if_t * _core_if);
 
diff --git a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c
index 597f81917875..2406fcb94acc 100755
--- a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c
+++ b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c
@@ -169,6 +169,7 @@ struct dwc_otg_driver_module_params {
 	int32_t ahb_single;
 	int32_t otg_ver;
 	int32_t adp_enable;
+	int32_t host_only;
 };
 
 static struct dwc_otg_driver_module_params dwc_otg_module_params = {
@@ -181,11 +182,7 @@ static struct dwc_otg_driver_module_params dwc_otg_module_params = {
 	.host_support_fs_ls_low_power = -1,
 	.host_ls_low_power_phy_clk = -1,
 	.enable_dynamic_fifo = 1,
-	#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON6TV
-	.data_fifo_size = 1900,
-	#else
-	.data_fifo_size = 1024,
-	#endif
+	.data_fifo_size = 1024, /* will be overrided by platform setting */
 	.dev_endpoints = -1,
 	.en_multiple_tx_fifo = -1,
 	.dev_rx_fifo_size = 256,
@@ -228,16 +225,12 @@ static struct dwc_otg_driver_module_params dwc_otg_module_params = {
 				   -1
 				   /* 15 */
 				   },
-	#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON6TV
-	.host_rx_fifo_size = 1024,
-	#else 
-	.host_rx_fifo_size = 512,
-	#endif
+	.host_rx_fifo_size = 512, /* will be overrided by platform setting */
 	.host_nperio_tx_fifo_size = 500,
-	.host_perio_tx_fifo_size = -1,
+	.host_perio_tx_fifo_size = 500,
 	.max_transfer_size = -1,
 	.max_packet_count = -1,
-	.host_channels = -1,
+	.host_channels = 16,
 	.phy_type = -1,
 	.phy_utmi_width = -1,
 	.phy_ulpi_ddr = -1,
@@ -476,22 +469,24 @@ static int set_parameters(dwc_otg_core_if_t * core_if)
 							  dwc_otg_module_params.
 							  en_multiple_tx_fifo);
 	}
-	for (i = 0; i < 15; i++) {
-		if (dwc_otg_module_params.dev_perio_tx_fifo_size[i] != -1) {
-			retval +=
-			    dwc_otg_set_param_dev_perio_tx_fifo_size(core_if,
-								     dwc_otg_module_params.
-								     dev_perio_tx_fifo_size
-								     [i], i);
+	if(!dwc_otg_module_params.host_only){
+		for (i = 0; i < 15; i++) {
+			if (dwc_otg_module_params.dev_perio_tx_fifo_size[i] != -1) {
+				retval +=
+				    dwc_otg_set_param_dev_perio_tx_fifo_size(core_if,
+									     dwc_otg_module_params.
+									     dev_perio_tx_fifo_size
+									     [i], i);
+			}
 		}
-	}
 
-	for (i = 0; i < 15; i++) {
-		if (dwc_otg_module_params.dev_tx_fifo_size[i] != -1) {
-			retval += dwc_otg_set_param_dev_tx_fifo_size(core_if,
-								     dwc_otg_module_params.
-								     dev_tx_fifo_size
-								     [i], i);
+		for (i = 0; i < 15; i++) {
+			if (dwc_otg_module_params.dev_tx_fifo_size[i] != -1) {
+				retval += dwc_otg_set_param_dev_tx_fifo_size(core_if,
+									     dwc_otg_module_params.
+									     dev_tx_fifo_size
+									     [i], i);
+			}
 		}
 	}
 	if (dwc_otg_module_params.thr_ctl != -1) {
@@ -970,6 +965,8 @@ static int dwc_otg_driver_probe(
 			ctrl_reg_addr = (unsigned long)usb_platform_data.ctrl_regaddr[port_index];
 			phy_reg_addr = (unsigned long)usb_platform_data.phy_regaddr[port_index];
 			_dev->irq = usb_platform_data.irq_no[port_index];
+			dwc_otg_module_params.data_fifo_size = usb_platform_data.fifo_size[port_index];
+			dwc_otg_module_params.host_rx_fifo_size = dwc_otg_module_params.data_fifo_size / 2;
 			printk(KERN_INFO"%s: type: %d, speed: %d, config: %d, dma: %d, id: %d, phy: %x, ctrl: %x\n",
 				s_clock_name,port_type,port_speed,port_config,dma_config,id_mode,phy_reg_addr,ctrl_reg_addr);
 
@@ -1084,9 +1081,15 @@ static int dwc_otg_driver_probe(
 
 	pcore_para = &dwc_otg_module_params;
 
+	if(port_type == USB_PORT_TYPE_HOST)
+		pcore_para->host_only = 1;
+	else
+		pcore_para->host_only = 0;
+
 	dev_dbg(&_dev->dev, "dwc_otg_device=0x%p\n", dwc_otg_device);
 
-	dwc_otg_device->core_if = dwc_otg_cil_init(dwc_otg_device->os_dep.base);
+	dwc_otg_device->core_if = dwc_otg_cil_init(dwc_otg_device->os_dep.base,
+		pcore_para->host_only);
 	if (!dwc_otg_device->core_if) {
 		dev_err(&_dev->dev, "CIL initialization failed!\n");
 		retval = -ENOMEM;
-- 
2.19.0

