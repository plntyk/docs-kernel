From 5446bc6304019e96ec343882c7c107ec2fb5acd7 Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Thu, 15 May 2014 15:54:25 +0800
Subject: [PATCH 4101/5965] m8 baby m101/m102:update panel driver

---
 .../boot/dts/amlogic/meson8b_m101_512M.dtd    | 53 ++++-----------
 arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd |  8 +--
 drivers/amlogic/display/vout/aml_lcd.dtd      | 26 ++++++++
 drivers/amlogic/display/vout/lcdoutc.c        | 64 ++++++++++++-------
 drivers/amlogic/display/vout/mipi_dsi_util.c  |  2 +-
 include/linux/amlogic/vout/lcdoutc.h          |  8 +--
 6 files changed, 87 insertions(+), 74 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
index bb06dc048f41..2480f8d539fe 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
@@ -849,11 +849,6 @@ void root_func(){
 			status = "okay";
 		};
 	};
-    
-
-
-
-
 
 /// ***************************************************************************************
 ///	-	LCD
@@ -926,7 +921,7 @@ void root_func(){
 		dim_max_min = <0x1 0x1b>;
 	};
 
-
+//******************************************************************************
 	lcd{
 		compatible = "amlogic,lcd";
 		dev_name = "lcd";
@@ -947,9 +942,7 @@ void root_func(){
 		lcd_bits_user=<6>;	/** user defined lcd bits(6 or 8, decided by hardware design; only valid when lcd_bits_option=1) */
 		
 		/* below configs are decided by hardware design, you can modify them if needed. */
-		//ttl config
 		ttl_rb_bit_swap=<0 0>;	/** ttl rb_swap, bit_swap : (0=normal, 1=swap) */
-		//lvds config
 		lvds_channel_pn_swap=<0>;	/** lvds channel pn swap(0=normal, 1=swap) */
 		
 		/* recommend settings, you can modify them if needed. */
@@ -972,9 +965,9 @@ void root_func(){
 				224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255>;
 		
 		/* default settings, don't modify them unless there is display problem */
-		clock_spread_spectrum=<0>;	/** ss_level(0=disable, 1=0.5%, 2=1%, 3=2%, 4=3%, 5=4%, 6=5%) */
+		clock_spread_spectrum=<0>;	/** ss_level(0=disable, 1=0.5%, 2=1%, 3=1.5%, 4=2%) */
 		clock_auto_generation=<1>;	/** clk_auto_generation(0=use customer clock parameters, as clk_pll_div_clk_ctrl defined, 1=auto generate clock parameters by lcd_clock) */
-		clk_pll_div_clk_ctrl=<0x10220 0x18803 0x1111>;	/** pll_ctrl, div_ctrl, clk_ctrl : (only valid when clk_auto_generation=0) */
+		clk_pll_div_clk_ctrl=<0x20445 0x18803 0x02ee1101>;	/** pll_ctrl, div_ctrl, clk_ctrl : (only valid when clk_auto_generation=0) */
 		lvds_vswing=<1>;	/** lvds_vswing_level(default level=1, support level 0,1,2,3,4) */
 		lvds_user_repack=<0 0>;	/** lvds_repack_user(0=auto setting, 1=user define), lvds_repack(0=JEIDA mode data mapping, 1=VESA mode data mapping. only valid when lvds_repack_user=1) */
 		rgb_base_coeff=<0xf0 0x74a>;	/** rgb_base, rgb_coeff */
@@ -983,35 +976,9 @@ void root_func(){
 		power_on_uboot="n","n","n";	/** only for uboot, ahead of lcd_power_on, no need config delay */
 		power_on_step_1="cpu","GPIODV_29","0";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_on_step_2="signal","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_3="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_4="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_5="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_6="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_7="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_8="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_9="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_10="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_11="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_12="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_13="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_14="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_on_step_15="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_on_delay=<50 10 0 0 0 0 0 0 0 0 0 0 0 0 0>;	/** power on delay after each step */
 		power_off_step_1="signal";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_2="cpu","GPIODV_29","0";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_3="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_4="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_5="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_6="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_7="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_8="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_9="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_10="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_11="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_12="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_13="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_14="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_15="n","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
+		power_off_step_2="cpu","GPIODV_29","2";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_off_delay=<50 400 0 0 0 0 0 0 0 0 0 0 0 0 0>;	/** power off delay after each step */
 		power_off_uboot="n","n","n";	/** only for uboot, at the end of lcd_power_off, no need config delay */
 	};
@@ -1027,9 +994,9 @@ void root_func(){
 //$$ L2 PROP_U32 2 = "hsync_width_backporch"
 //$$ L2 PROP_U32 2 = "vsync_width_backporch"
 //$$ L2 PROP_U32 2 = "pol_hsync_vsync"
-	lcd_CLAP070NJ02:lcd_CLAP070NJ02{	//g33
+	lcd_CLAP070NJ02:lcd_CLAP070NJ02{
 		model_name="CLAP070NJ02";	/** lcd model name */
-		interface="ttl";			/** lcd_interface(mipi, lvds, edp, ttl) */
+		interface="ttl";			/** lcd_interface(mipi, lvds, ttl) */
 		active_area=<154 86>;		/** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
 		lcd_bits_option=<8 1>;		/** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */
 		
@@ -1042,6 +1009,7 @@ void root_func(){
 		pol_hsync_vsync=<0 0>;	/** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
 	};
 
+//******************************************************************************
 ///     -       Sensors
 //$$ MODULE="Sensors"
 //$$ DEVICE="sensor"
@@ -1848,8 +1816,8 @@ void root_func(){
 			amlogic,clrmask=<2 0x380000>;
 			amlogic,pins = "BOOT_11","BOOT_12","BOOT_13","BOOT_18";
 		};
-	};
-	//$$ MATCH "Bl_pin_0_match" = "&lcd_backlight_pins"
+		
+//$$ MATCH "Bl_pin_0_match" = "&lcd_backlight_pins"
 //$$ L2 PROP_U32 2 = "amlogic,setmask"
 //$$ L2 PROP_U32 4 = "amlogic,clrmask"
 //$$ L2 PROP_STR = "amlogic,pins"
@@ -1927,5 +1895,6 @@ void root_func(){
 						"HDMI_TTL_2_N","HDMI_TTL_2_P","HDMI_TTL_1_N","HDMI_TTL_1_P","HDMI_TTL_0_N","HDMI_TTL_0_P";	//B2~B7
 			amlogic,enable-output=<1>;
 		};
-
+	};
+	
 }; /* end of / */
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
index d7205637b19d..d4bc1327bc73 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
@@ -978,7 +978,7 @@ void root_func(){
 		power_on_step_2="signal","n","n";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_on_delay=<100 10>;	/** power on delay after each step */
 		power_off_step_1="signal";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
-		power_off_step_2="cpu","GPIODV_29","0";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
+		power_off_step_2="cpu","GPIODV_29","2";	/** gpio_type(support 3 types: cpu, pmu, signal), gpio_name(upper-case, valid when gpio_type is cpu or pmu), gpio_value(0=output_low, 1=output_high, 2=input. valid when gpio_type is cpu or pmu) */
 		power_off_delay=<20 1000>;	/** power off delay after each step */
 		power_off_uboot="n","n","n";	/** only for uboot, at the end of lcd_power_off, no need config delay */
 	};
@@ -1836,8 +1836,7 @@ void root_func(){
 			amlogic,clrmask=<2 0x380000>;
 			amlogic,pins = "BOOT_11","BOOT_12","BOOT_13","BOOT_18";
 		};
-	};
-	
+		
 //$$ MATCH "Bl_pin_0_match" = "&lcd_backlight_pins"
 //$$ L2 PROP_U32 2 = "amlogic,setmask"
 //$$ L2 PROP_U32 4 = "amlogic,clrmask"
@@ -1916,5 +1915,6 @@ void root_func(){
 						"HDMI_TTL_2_N","HDMI_TTL_2_P","HDMI_TTL_1_N","HDMI_TTL_1_P","HDMI_TTL_0_N","HDMI_TTL_0_P";	//B2~B7
 			amlogic,enable-output=<1>;
 		};
-
+	};
+	
 }; /* end of / */
diff --git a/drivers/amlogic/display/vout/aml_lcd.dtd b/drivers/amlogic/display/vout/aml_lcd.dtd
index fb967030ebe3..72347e01467c 100755
--- a/drivers/amlogic/display/vout/aml_lcd.dtd
+++ b/drivers/amlogic/display/vout/aml_lcd.dtd
@@ -840,6 +840,32 @@
 
         lcd_extern_init=<1>;/** lcd extern init command control(0=disable, 1=enable) */
     };
+
+//$$ MATCH "lcd_model_config_match" = <&lcd_IVO785H4026172>
+//$$ L2 PROP_STR = "model_name"
+//$$ L2 PROP_STR = "interface"
+//$$ L2 PROP_U32 2 = "active_area"
+//$$ L2 PROP_U32 2 = "lcd_bits_option"
+//$$ L2 PROP_U32 2 = "resolution"
+//$$ L2 PROP_U32 2 = "period"
+//$$ L2 PROP_U32 2 = "clock_hz_pol"
+//$$ L2 PROP_U32 2 = "hsync_width_backporch"
+//$$ L2 PROP_U32 2 = "vsync_width_backporch"
+//$$ L2 PROP_U32 2 = "pol_hsync_vsync"
+    lcd_IVO785H4026172:lcd_IVO785H4026172{
+        model_name="IVO785H4026172"; /** lcd model name */
+        interface="lvds";            /** lcd_interface(mipi, lvds, ttl) */
+        active_area=<120 160>;       /** lcd active_area or display_area horizontal size, vertical size : (unit in mm, you can find them on the home page of lcd spec) */
+        lcd_bits_option=<8 0>;       /** lcd_bits(6,8), bits_option(0=only support one mode as lcd_bits define, 1=both support 6/8bit) */
+
+        resolution=<768 1024>;    /** horizontal resolution, vertical resolution */
+        period=<928 1065>;        /** horizontal period(htotal), vertical period(vtotal) */
+
+        clock_hz_pol=<59300000 0>;    /** clock_hz(unit in Hz, both support clk and frame_rate, >200 regard as clk, <200 regard as frame_rate), clk_pol(only valid for TTL) */
+        hsync_width_backporch=<10 80>; /** hsync_width, hsync_backporch(include hsync_width) */
+        vsync_width_backporch=<2 23>;  /** vsync_width, vsync_backporch(include vsync_width) */
+        pol_hsync_vsync=<0 0>;    /** hsync_polarity, vsync_polarity : (0=negative, 1=positive) */
+    };
 //******************************************************************************
 //ttl
 //******************************************************************************
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 3aee27988299..780041f7c858 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -80,7 +80,7 @@
 #endif
 #define DRIVER_DATE		"20140512"
 
-#define LCD_DEBUG_INFO
+//#define LCD_DEBUG_INFO
 #ifdef LCD_DEBUG_INFO
 #define DBG_PRINT(...)		printk(__VA_ARGS__)
 #else
@@ -452,8 +452,12 @@ static void backlight_power_ctrl(Bool_t status)
 	bl_status = status;
 }
 
+#if ((MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B))
 static void set_control_mipi(Lcd_Config_t *pConf);
+#endif
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
 static int set_control_edp(Lcd_Config_t *pConf);
+#endif
 //for special interface
 static int lcd_power_ctrl_video(Bool_t status)
 {
@@ -932,6 +936,7 @@ static void set_tcon_ttl(Lcd_Config_t *pConf)
 
     WRITE_LCD_REG(L_STV1_HS_ADDR,    tcon_adr->stv1_hs_addr);
     WRITE_LCD_REG(L_STV1_HE_ADDR,    tcon_adr->stv1_he_addr);
+	
 	if (vs_pol) {
 		WRITE_LCD_REG(L_STV1_VS_ADDR,    tcon_adr->stv1_vs_addr);
 		WRITE_LCD_REG(L_STV1_VE_ADDR,    tcon_adr->stv1_ve_addr);
@@ -941,6 +946,29 @@ static void set_tcon_ttl(Lcd_Config_t *pConf)
 		WRITE_LCD_REG(L_STV1_VE_ADDR,    tcon_adr->stv1_vs_addr);
 	}
 
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B)
+	//WRITE_LCD_REG(L_POL_CNTL_ADDR,   ((1 << LCD_TCON_DE_SEL) | (1 << LCD_TCON_VS_SEL) | (1 << LCD_TCON_HS_SEL))); //enable tcon DE, Hsync, Vsync 
+	//WRITE_LCD_REG(L_POL_CNTL_ADDR,   (READ_LCD_REG(L_POL_CNTL_ADDR) | ((0 << LCD_DE_POL) | ((vs_pol ? 0 : 1) << LCD_VS_POL) | ((hs_pol ? 0 : 1) << LCD_HS_POL))));	//adjust hvsync pol
+	
+	//DE signal
+	WRITE_LCD_REG(L_DE_HS_ADDR,		tcon_adr->oeh_hs_addr);
+	WRITE_LCD_REG(L_DE_HE_ADDR,		tcon_adr->oeh_he_addr);
+	WRITE_LCD_REG(L_DE_VS_ADDR,		tcon_adr->oeh_vs_addr);
+	WRITE_LCD_REG(L_DE_VE_ADDR,		tcon_adr->oeh_ve_addr);
+	
+	//Hsync signal
+	WRITE_LCD_REG(L_HSYNC_HS_ADDR,	tcon_adr->sth1_hs_addr);
+	WRITE_LCD_REG(L_HSYNC_HE_ADDR,	tcon_adr->sth1_he_addr);
+	WRITE_LCD_REG(L_HSYNC_VS_ADDR,	tcon_adr->sth1_vs_addr);
+	WRITE_LCD_REG(L_HSYNC_VE_ADDR,	tcon_adr->sth1_ve_addr);
+	
+	//Vsync signal
+	WRITE_LCD_REG(L_VSYNC_HS_ADDR,	tcon_adr->stv1_hs_addr);
+	WRITE_LCD_REG(L_VSYNC_HE_ADDR,	tcon_adr->stv1_he_addr);
+	WRITE_LCD_REG(L_VSYNC_VS_ADDR,	tcon_adr->stv1_vs_addr);
+	WRITE_LCD_REG(L_VSYNC_VE_ADDR,	tcon_adr->stv1_ve_addr);
+#endif
+
     WRITE_LCD_REG(L_INV_CNT_ADDR,		tcon_adr->inv_cnt_addr);
     WRITE_LCD_REG(L_TCON_MISC_SEL_ADDR,	tcon_adr->tcon_misc_sel_addr);
 
@@ -1117,10 +1145,10 @@ static void set_tcon_mlvds(Lcd_Config_t *pConf)
 
 static void set_lcd_spread_spectrum(int ss_level)
 {
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 	unsigned pll_ctrl2, pll_ctrl3, pll_ctrl4;
 	DBG_PRINT("%s.\n", __FUNCTION__);
 	
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 	switch (ss_level) {
 		case 1:  //about 0.5%
 			pll_ctrl2 = 0x16110696;
@@ -2425,6 +2453,7 @@ static void set_video_adjust(Lcd_Config_t *pConf)
 	WRITE_LCD_REG(VPP_VADJ_CTRL, 0xf);	//enable video adjust
 }
 
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
 static unsigned error_abs(unsigned num1, unsigned num2)
 {
 	if (num1 >= num2)
@@ -2432,6 +2461,7 @@ static unsigned error_abs(unsigned num1, unsigned num2)
 	else
 		return num2 - num1;
 }
+#endif
 
 static void generate_clk_parameter(Lcd_Config_t *pConf)
 {
@@ -2443,16 +2473,20 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
     unsigned od_sel, pre_div_sel;
     unsigned div_pre_sel_max, crt_xd_max;
     unsigned f_ref, pll_vco, fout_pll, div_pre_out, div_post_out, final_freq, iflogic_vid_clk_in_max;
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
     unsigned min_error = MAX_ERROR;
     unsigned error = MAX_ERROR;
-    unsigned clk_num = 0;
-    unsigned tmp;
+#endif
 #if ((MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B))
-    unsigned od_fb=0, edp_div0, edp_div1;
-    unsigned edp_div0_sel, edp_div1_sel;
-    unsigned edp_tx_phy_out;
+    unsigned od_fb=0;
     unsigned int dsi_bit_rate_min=0, dsi_bit_rate_max=0;
 #endif
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)
+    unsigned edp_div0, edp_div1, edp_div0_sel, edp_div1_sel;
+    unsigned edp_tx_phy_out;
+#endif
+    unsigned clk_num = 0;
+    unsigned tmp;
     unsigned fin = FIN_FREQ;
     unsigned fout = pConf->lcd_timing.lcd_clk;
 
@@ -3113,21 +3147,6 @@ static void switch_lcd_gates(Lcd_Type_t lcd_type)
 			break;
 	}
 }
-#elif ((MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B))
-static void switch_lcd_gates(unsigned int state)
-{
-	if (state > 0) {
-		WRITE_LCD_CBUS_REG_BITS(HHI_GCLK_OTHER, 1, 23, 1);
-		WRITE_LCD_CBUS_REG_BITS(HHI_GCLK_OTHER, 1, 25, 1);
-		WRITE_LCD_CBUS_REG_BITS(HHI_GCLK_OTHER, 1, 31, 1);
-	}
-	else {
-		WRITE_LCD_CBUS_REG_BITS(HHI_GCLK_OTHER, 0, 31, 1);
-		WRITE_LCD_CBUS_REG_BITS(HHI_GCLK_OTHER, 0, 25, 1);
-		WRITE_LCD_CBUS_REG_BITS(HHI_GCLK_OTHER, 0, 23, 1);
-	}
-	printk("%s: %s\n", __FUNCTION__, (state > 0) ? "ON" : "OFF");
-}
 #endif
 
 static void _init_lcd_driver(Lcd_Config_t *pConf)
@@ -3140,7 +3159,6 @@ static void _init_lcd_driver(Lcd_Config_t *pConf)
     switch_lcd_gates(lcd_type);
 #elif ((MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B))
     switch_vpu_mem_pd_vmod(pDev->lcd_info.mode, VPU_MEM_POWER_ON);
-    //switch_lcd_gates(ON);
     switch_lcd_mod_gate(ON);
 #endif
 
diff --git a/drivers/amlogic/display/vout/mipi_dsi_util.c b/drivers/amlogic/display/vout/mipi_dsi_util.c
index 3bcfeaa92807..7218056e560f 100755
--- a/drivers/amlogic/display/vout/mipi_dsi_util.c
+++ b/drivers/amlogic/display/vout/mipi_dsi_util.c
@@ -1083,7 +1083,7 @@ static ssize_t dsi_debug(struct class *class, struct class_attribute *attr, cons
             ret = sscanf(buf, "read %x %u", &t[0], &num);
             printk("read dsi phy reg:\n");
             for (i=0; i<num; i++) {
-                printk("  0x%04x = 0x%08x\n", t[0]+i, READ_DSI_REG(t[0]+i));
+                printk("  0x%04x = 0x%08x\n", (t[0]+i), READ_DSI_REG((t[0]+i)));
             }
             break;
         case 'w': //write
diff --git a/include/linux/amlogic/vout/lcdoutc.h b/include/linux/amlogic/vout/lcdoutc.h
index 53b1aec4af21..c757e66eb54d 100755
--- a/include/linux/amlogic/vout/lcdoutc.h
+++ b/include/linux/amlogic/vout/lcdoutc.h
@@ -225,10 +225,10 @@
 #define EDP_DIV0_SEL_MAX			15
 #define EDP_DIV1_SEL_MAX			8
 
-static const unsigned od_table[OD_SEL_MAX] = {1,2,4,8};
-static const unsigned div_pre_table[DIV_PRE_SEL_MAX] = {1,2,3,4,5,6};
-static const unsigned edp_div0_table[EDP_DIV0_SEL_MAX]={1,2,3,4,5,7,8,9,11,13,17,19,23,29,31};
-static const unsigned edp_div1_table[EDP_DIV1_SEL_MAX]={1,2,4,5,6,7,9,13};
+static const unsigned od_table[4] = {1,2,4,8};
+static const unsigned div_pre_table[6] = {1,2,3,4,5,6};
+static const unsigned edp_div0_table[15]={1,2,3,4,5,7,8,9,11,13,17,19,23,29,31};
+static const unsigned edp_div1_table[8]={1,2,4,5,6,7,9,13};
 //********************************************//
 
 /* for lcd power on/off config */
-- 
2.19.0

