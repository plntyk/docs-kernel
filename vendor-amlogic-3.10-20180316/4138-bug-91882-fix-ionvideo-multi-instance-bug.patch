From 08ae597e00dd97d79288fd0a4ad3be3dfe91f32c Mon Sep 17 00:00:00 2001
From: "shuai.cao" <shuai.cao@amlogic.com>
Date: Fri, 16 May 2014 14:37:02 +0800
Subject: [PATCH 4138/5965] bug:91882 fix ionvideo multi instance bug

---
 drivers/amlogic/ionvideo/ionvideo.c | 35 ++++++++++++++++++++++++-----
 drivers/amlogic/ionvideo/ionvideo.h |  4 ++--
 drivers/amlogic/ionvideo/ppmgr2.c   |  5 ++++-
 3 files changed, 35 insertions(+), 9 deletions(-)

diff --git a/drivers/amlogic/ionvideo/ionvideo.c b/drivers/amlogic/ionvideo/ionvideo.c
index f690480f821e..dcaaa6f0c62b 100755
--- a/drivers/amlogic/ionvideo/ionvideo.c
+++ b/drivers/amlogic/ionvideo/ionvideo.c
@@ -34,6 +34,11 @@ static unsigned int freerun_mode = 1;
 module_param(freerun_mode, uint, 0664);
 MODULE_PARM_DESC(freerun_mode, "av synchronization");
 
+static unsigned int skip_frames = 0;
+module_param(skip_frames, uint, 0664);
+MODULE_PARM_DESC(skip_frames, "skip frames");
+
+
 static const struct ionvideo_fmt formats[] = {
     {
         .name = "RGB32 (LE)",
@@ -140,8 +145,15 @@ static int ionvideo_fillbuff(struct ionvideo_dev *dev, struct ionvideo_buffer *b
         return -EAGAIN;
     }
     if (freerun_mode == 0) {
-        buf->pts = vf->pts;
-        buf->duration = vf->duration;
+        if ((vf->type & 0x1) == VIDTYPE_INTERLACE) {
+            if (dev->ppmgr2_dev.interlaced_num == 0) {
+                buf->pts = vf->pts;
+                buf->duration = vf->duration;
+            }
+        } else {
+            buf->pts = vf->pts;
+            buf->duration = vf->duration;
+        }
         ret = ppmgr2_process(vf, &dev->ppmgr2_dev, vb->v4l2_buf.index);
         if (ret) {
             vf_put(vf, RECEIVER_NAME);
@@ -149,7 +161,11 @@ static int ionvideo_fillbuff(struct ionvideo_dev *dev, struct ionvideo_buffer *b
         }
         vf_put(vf, RECEIVER_NAME);
     } else {
-        videoc_omx_compute_pts(dev, vf);
+        if ((vf->type & 0x1) == VIDTYPE_INTERLACE) {
+            if (dev->ppmgr2_dev.interlaced_num == 0)
+                dev->pts = vf->pts_us64;
+        } else
+            dev->pts = vf->pts_us64;
         ret = ppmgr2_process(vf, &dev->ppmgr2_dev, vb->v4l2_buf.index);
         if (ret) {
             vf_put(vf, RECEIVER_NAME);
@@ -427,13 +443,14 @@ static const struct vb2_ops ionvideo_video_qops = {
  ------------------------------------------------------------------*/
 static int vidioc_open(struct file *file) {
     struct ionvideo_dev *dev = video_drvdata(file);
-    if (ppmgr2_init(&(dev->ppmgr2_dev)) < 0) {
+    if (dev->fd_num > 0 || ppmgr2_init(&(dev->ppmgr2_dev)) < 0) {
         return -EBUSY;
     }
+    dev->fd_num++;
     dev->pts = 0;
     dev->c_width = 0;
     dev->c_height = 0;
-    dev->skip = 0;
+    skip_frames = 0;
     dprintk(dev, 2, "vidioc_open\n");
     printk("ionvideo open\n");
     return v4l2_fh_open(file);
@@ -444,6 +461,9 @@ static int vidioc_release(struct file *file) {
     ppmgr2_release(&(dev->ppmgr2_dev));
     dprintk(dev, 2, "vidioc_release\n");
     printk("ionvideo release\n");
+    if (dev->fd_num > 0) {
+        dev->fd_num--;
+    }
     return vb2_fop_release(file);
 }
 
@@ -649,9 +669,10 @@ static int vidioc_synchronization_dqbuf(struct file *file, void *priv, struct v4
             } else {
                 ret = vb2_ioctl_qbuf(file, priv, p);
                 if (ret) { return ret; }
+		skip_frames++;
             }
         }
-        dprintk(dev, 1, "s:%u\n", dev->skip++);
+        dprintk(dev, 1, "s:%u\n", skip_frames);
     } else {
         ret = vb2_ioctl_dqbuf(file, priv, p);
         if (ret) {
@@ -787,6 +808,7 @@ static int video_receiver_event_fun(int type, void* data, void* private_data) {
         printk("unreg:ionvideo\n");
     }else if (type == VFRAME_EVENT_PROVIDER_REG) {
         dev->receiver_register = 1;
+        dev->ppmgr2_dev.interlaced_num = 0;
         printk("reg:ionvideo\n");
     }
     return 0;
@@ -815,6 +837,7 @@ static int __init ionvideo_create_instance(int inst)
     dev->width = 640;
     dev->height = 480;
     dev->pixelsize = dev->fmt->depth;
+    dev->fd_num = 0;
 
     /* initialize locks */
     spin_lock_init(&dev->slock);
diff --git a/drivers/amlogic/ionvideo/ionvideo.h b/drivers/amlogic/ionvideo/ionvideo.h
index 4e40c4c7d9b2..dc8c8b497fb6 100755
--- a/drivers/amlogic/ionvideo/ionvideo.h
+++ b/drivers/amlogic/ionvideo/ionvideo.h
@@ -30,8 +30,6 @@
 #include <linux/amlogic/amports/vframe.h>
 #include <linux/amlogic/amports/canvas.h>
 
-#include <linux/amlogic/vout/vout_notify.h>
-
 #include <linux/amlogic/amports/timestamp.h>
 #include <linux/amlogic/amports/tsync.h>
 #include "videobuf2-ion.h"
@@ -104,12 +102,14 @@ struct ppmgr2_device {
     int angle;
     int mirror;
     int paint_mode;
+    int interlaced_num;
 };
 
 struct ionvideo_dev {
     struct list_head ionvideo_devlist;
     struct v4l2_device v4l2_dev;
     struct video_device vdev;
+    int fd_num;
 
     spinlock_t slock;
     struct mutex mutex;
diff --git a/drivers/amlogic/ionvideo/ppmgr2.c b/drivers/amlogic/ionvideo/ppmgr2.c
index bb4617b17ef5..323c6f5b0295 100755
--- a/drivers/amlogic/ionvideo/ppmgr2.c
+++ b/drivers/amlogic/ionvideo/ppmgr2.c
@@ -343,8 +343,11 @@ int ppmgr2_process(struct vframe_s* vf, struct ppmgr2_device *ppd, int index) {
     }
     ret = ge2d_paint_dst(context, ge2d_config, dst_canvas_id, dst_pixel_format, src_position, dst_paint_position, dst_plane_position);
 
-    if (!ret && (src_vf->type & 3) == VIDTYPE_INTERLACE_TOP) {
+    if ((src_vf->type & 0x1) == VIDTYPE_INTERLACE && ppd->interlaced_num == 0) {
+        ppd->interlaced_num++;
         ret = -EAGAIN;
+    } else {
+        ppd->interlaced_num = 0;
     }
     return ret;
 }
-- 
2.19.0

