From c23e0306fd13052e045672b2a93131ca17d0bb68 Mon Sep 17 00:00:00 2001
From: Rain Zhang-CA <rainzhang@wonton.(none)>
Date: Mon, 19 May 2014 10:52:13 -0700
Subject: [PATCH 4169/5965] PD #92092. h265 decoder add debug code, search and
 skip nal in ucode; add debug code to stop at some lcu.

---
 .../amlogic/amports/m8/ucode/h265/vh265_mc.c  | 419 +++++++++---------
 drivers/amlogic/amports/vh265.c               |  92 +++-
 2 files changed, 283 insertions(+), 228 deletions(-)

diff --git a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
index cbbe5101f2f8..06682e83cb54 100755
--- a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
@@ -20,26 +20,26 @@
  */
 
 #include <linux/types.h>
-//project_dos revision 2517
+//project_dos revision 2549
 const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x06810001,0x06800000,0x0d000001,0x07400040,0x0c000900,0x00000000,
-0x06bffe40,0x07c00000,0x06030400,0x00400000,0x0800c0ff,0x0c02e300,
+0x06bffe40,0x07c00000,0x06030400,0x00400000,0x0800c0ff,0x0c02e400,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x0c7ffd80,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-0x00000000,0x00000000,0x0c7a1f80,0x00000000,0x0c79c040,0x06412108,
+0x00000000,0x00000000,0x0c7a2080,0x00000000,0x0c79c040,0x06412108,
 0x0c780580,0x00000000,0x0cc00000,0x00400000,0x0800c000,0x08002515,
 0x08002608,0x06bfbb80,0x06ffbfc0,0x06070500,0x06070600,0x06070700,
 0x06803fc0,0x07c00140,0x07c00780,0x07c01480,0x0640d000,0x07c033c0,
 0x0640d200,0x07c03340,0x0cc00000,0x00000000,0x06bfff88,0x06030408,
-0x00400000,0x0640c008,0x0a6181c8,0x00000000,0x0c02b500,0x00000000,
+0x00400000,0x0640c008,0x0a6181c8,0x00000000,0x0c02b600,0x00000000,
 0x0c79b3c0,0x0800c0ff,0x0aa0c048,0x0c781ec0,0x00000000,0x06410108,
 0x09021208,0x0a6f8008,0x00000000,0x0640c808,0x06013408,0x08013503,
 0x06413508,0x090e1208,0x0a6f8008,0x00000000,0x08013500,0x06410c08,
 0x08010e90,0x09326208,0x0aa0c808,0x0c79ae80,0x0800c0fe,0x07803388,
 0x09808008,0x07c03388,0x06410c08,0x08010e90,0x09384288,0x09223248,
 0x07c00189,0x09201248,0x07c001c9,0x08010e90,0x07800148,0x0a805288,
-0x07c0010a,0x0aa0ffc8,0x0c023880,0x05407308,0x0780010a,0x07c0014a,
+0x07c0010a,0x0aa0ffc8,0x0c023980,0x05407308,0x0780010a,0x07c0014a,
 0x06410c08,0x08010e88,0x09305248,0x07c00209,0x06410c08,0x08010e90,
 0x09210248,0x07c00249,0x06410c08,0x08010e90,0x09210248,0x07c00289,
 0x06410c08,0x08010e84,0x08010e90,0x08010e90,0x08010e8c,0x06410c08,
@@ -57,15 +57,15 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0aa0c088,0x0c78a440,0x00000000,0x06410c08,0x08010e90,0x09326208,
 0x0aa0c848,0x0c799280,0x0800c0fe,0x07803388,0x09808048,0x07c03388,
 0x06410c08,0x08010e88,0x09384288,0x09323248,0x07c00609,0x09301248,
-0x07c00649,0x07800148,0x0a808288,0x07c0010a,0x0c021d00,0x05407308,
-0x0780010a,0x07c0014a,0x0c022880,0x0540730a,0x06410c08,0x08010e88,
+0x07c00649,0x07800148,0x0a808288,0x07c0010a,0x0c021e00,0x05407308,
+0x0780010a,0x07c0014a,0x0c022980,0x0540730a,0x06410c08,0x08010e88,
 0x09305248,0x07c00689,0x06410c08,0x08010e90,0x09210248,0x07c006c9,
 0x06410c08,0x08010e90,0x09210248,0x07c00709,0x06410c08,0x08010e84,
 0x08010e90,0x08010e90,0x08010e8c,0x06410c08,0x08010e88,0x09308248,
 0x07c00749,0x0780060b,0x0aa3800b,0x00000000,0x06410c0a,0x08010e90,
 0x0aa2800b,0x093e124a,0x0aa08009,0x0c780000,0x093c124a,0x0aa08009,
 0x0c780000,0x0540228a,0x0c7ffe00,0x044012cb,0x0c018540,0x06800049,
-0x07800789,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c021740,0x05407309,
+0x07800789,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c021840,0x05407309,
 0x07800108,0x07c00788,0x0c0182c0,0x068007c9,0x0c018240,0x06800809,
 0x0c0181c0,0x06800849,0x07800808,0x07800849,0x09610209,0x06012308,
 0x06410c08,0x08010e81,0x093e1248,0x0aa24009,0x0c017f40,0x06800049,
@@ -77,13 +77,13 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0c017740,0x06800c49,0x07800c49,0x07c00cc9,0x0c017640,0x06800c89,
 0x07800c49,0x07800c88,0x02009209,0x07c00d09,0x07800d08,0x0a6300c8,
 0x07800809,0x0403f249,0x05806249,0x07c00dc9,0x07800849,0x0403f249,
-0x05806249,0x07c00e09,0x08040640,0x0c780900,0x06820da0,0x0a630088,
+0x05806249,0x07c00e09,0x08040640,0x0c780900,0x06820ea0,0x0a630088,
 0x07800809,0x0401f249,0x05805249,0x07c00dc9,0x07800849,0x0401f249,
-0x05805249,0x07c00e09,0x08040620,0x0c780600,0x06821320,0x0a630048,
+0x05805249,0x07c00e09,0x08040620,0x0c780600,0x06821420,0x0a630048,
 0x07800809,0x0400f249,0x05804249,0x07c00dc9,0x07800849,0x0400f249,
-0x05804249,0x07c00e09,0x08040610,0x0c780300,0x06821b60,0x07800809,
+0x05804249,0x07c00e09,0x08040610,0x0c780300,0x06821c60,0x07800809,
 0x04007249,0x05803249,0x07c00dc9,0x07800849,0x04007249,0x05803249,
-0x07c00e09,0x08040608,0x068226a0,0x07800dc8,0x07800e09,0x0e000248,
+0x07c00e09,0x08040608,0x068227a0,0x07800dc8,0x07800e09,0x0e000248,
 0x00000000,0x00000000,0x06800009,0x0f000200,0x04401208,0x0aa10008,
 0x05801208,0x0c7fff80,0x04001249,0x07c01409,0x07800809,0x0780084a,
 0x0960f24a,0x06040209,0x07800dc9,0x07800e0a,0x0960c24a,0x06040309,
@@ -92,7 +92,7 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x06800e89,0x0c016080,0x06800ec9,0x06410c08,0x08010e81,0x093e1248,
 0x0aa38009,0x07c00f09,0x06410c08,0x08010e81,0x093e1248,0x0aa0c009,
 0x0c0016c0,0x00000000,0x07800788,0x0aa0c008,0x068f000c,0x069f000c,
-0x0c020900,0x00000000,0x06410c08,0x08010e83,0x093e1248,0x07c00f49,
+0x0c020a00,0x00000000,0x06410c08,0x08010e83,0x093e1248,0x07c00f49,
 0x093c1248,0x07c00f89,0x093a1248,0x0aa58009,0x06800009,0x06410c08,
 0x08010e88,0x09384248,0x04001249,0x07c01009,0x09304248,0x04001249,
 0x07c01049,0x0c015780,0x06801089,0x0c015700,0x068010c9,0x07801089,
@@ -166,9 +166,9 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0aa08009,0x0c780000,0x0cc00000,0x00000000,0x0aa0c0c8,0x0c782f80,
 0x00000000,0x06410c08,0x08010e90,0x09326208,0x0aa0c888,0x0c78ee00,
 0x0800c0fe,0x07803388,0x09808088,0x07c03388,0x0c00edc0,0x06800049,
-0x07801489,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c019080,0x05407309,
+0x07801489,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c019180,0x05407309,
 0x07800108,0x07c01488,0x0c00eb40,0x068014c9,0x0780078a,0x0a808288,
-0x07c00108,0x0c017d80,0x0540730a,0x0780010a,0x07c0078a,0x0c018800,
+0x07c00108,0x0c017e80,0x0540730a,0x0780010a,0x07c0078a,0x0c018900,
 0x0540730a,0x06410c08,0x08010e87,0x093e1248,0x07c01509,0x093c1248,
 0x07c01549,0x09363248,0x07c01589,0x09341248,0x07c015c9,0x09321248,
 0x07c01609,0x0c00e580,0x06801649,0x04001208,0x07c01648,0x0c00e480,
@@ -178,10 +178,10 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x068017c9,0x07c017c8,0x0c00e100,0x06801809,0x0c00e080,0x06801849,
 0x06410c08,0x08010e86,0x093e1248,0x07c01889,0x093c1248,0x07c018c9,
 0x093a1248,0x07c01909,0x09381248,0x07c01949,0x09361248,0x07c01989,
-0x09341248,0x07c01cc9,0x0aa0c009,0x0c013e00,0x00000000,0x06800048,
+0x09341248,0x07c01cc9,0x0aa0c009,0x0c013f00,0x00000000,0x06800048,
 0x07c01c88,0x07801988,0x0a608008,0x0c780a80,0x0c00d8c0,0x06801a09,
 0x07800dc8,0x07c01a88,0x0c00d7c0,0x06801a49,0x07800e08,0x07c01b88,
-0x06410c08,0x08010e81,0x093e1248,0x07c019c9,0x0aa14009,0x0c014240,
+0x06410c08,0x08010e81,0x093e1248,0x07c019c9,0x0aa14009,0x0c014340,
 0x00000000,0x0c780580,0x00000000,0x07801a0b,0x0ae0010b,0x0680000a,
 0x0b4072ca,0x0c00d380,0x0406a24a,0x04001208,0x07400248,0x0c7ffec0,
 0x0400128a,0x07801a4b,0x0ae0010b,0x0680000a,0x0b4072ca,0x0c00d100,
@@ -191,23 +191,23 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0c780340,0x07c01e09,0x06410c08,0x08010e82,0x093e1248,0x07c01d49,
 0x093c1248,0x0a618009,0x07c01d89,0x0c00cbc0,0x06801dc9,0x0c00cb40,
 0x06801e09,0x06410c08,0x08010e81,0x093e1248,0x0a628009,0x07800f08,
-0x0aa28008,0x078014c8,0x0aa0c008,0x068f000c,0x069f000c,0x0c018600,
+0x0aa28008,0x078014c8,0x0aa0c008,0x068f000c,0x069f000c,0x0c018700,
 0x00000000,0x0c7800c0,0x0c077ec0,0x00000000,0x06410c08,0x08010e81,
 0x093e1248,0x07c01e49,0x0c00c440,0x06801e89,0x04002208,0x07c01e88,
-0x06410c08,0x08010e81,0x093e1248,0x07c01ec9,0x08010e81,0x0c018c40,
+0x06410c08,0x08010e81,0x093e1248,0x07c01ec9,0x08010e81,0x0c018d40,
 0x00000000,0x0c78c080,0x0800c0ff,0x0aa0c108,0x0c786740,0x00000000,
 0x06410c08,0x08010e90,0x09326208,0x0b210548,0x07c01f08,0x0c78be00,
 0x0800c0fe,0x06410c08,0x08010e81,0x093e1248,0x07c01f49,0x07801f08,
 0x0ba1c408,0x06800009,0x0ae14548,0x06800009,0x06410c08,0x08010e81,
 0x093e1248,0x07c01f89,0x0c00bb40,0x06800049,0x07801489,0x0a808248,
-0x07c00108,0x0c015e40,0x05407309,0x07800108,0x07c01488,0x0c017080,
-0x05407308,0x078014c8,0x07800789,0x0a808248,0x07c00108,0x0c014b00,
-0x05407309,0x07800109,0x07c00789,0x0c015580,0x05407309,0x07801f48,
+0x07c00108,0x0c015f40,0x05407309,0x07800108,0x07c01488,0x0c017180,
+0x05407308,0x078014c8,0x07800789,0x0a808248,0x07c00108,0x0c014c00,
+0x05407309,0x07800109,0x07c00789,0x0c015680,0x05407309,0x07801f48,
 0x06800009,0x0aa10008,0x07c02009,0x0c780440,0x07c01fc9,0x07801508,
 0x0aa14008,0x06800009,0x06410c08,0x08010e81,0x093e1248,0x07c02009,
 0x07801409,0x06410c08,0x0680080a,0x0240a24a,0x098091c9,0x06010e09,
 0x03808288,0x07c01fc8,0x07802008,0x0aa0c008,0x0c784a40,0x00000000,
-0x0c01ba40,0x00000000,0x07801588,0x0aa0c008,0x098081c8,0x06010e08,
+0x0c01bb40,0x00000000,0x07801588,0x0aa0c008,0x098081c8,0x06010e08,
 0x0c00ae40,0x06802049,0x07801548,0x0aa14008,0x06800049,0x06410c08,
 0x08010e81,0x093e1248,0x07c02089,0x07801f09,0x0aa084c9,0x0a610509,
 0x06800008,0x0c781600,0x07c020c8,0x06410c08,0x07800909,0x04004249,
@@ -223,7 +223,7 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x00000000,0x06410c08,0x07800909,0x04004249,0x0680080a,0x0240a24a,
 0x098091c9,0x06010e09,0x03808288,0x06410c08,0x08010e81,0x093e1248,
 0x06410c08,0x08010e81,0x093e1248,0x0aa0c009,0x0c009840,0x06800049,
-0x0c7ffa40,0x0440130c,0x0c019ac0,0x00000000,0x07801248,0x0aa14008,
+0x0c7ffa40,0x0440130c,0x0c019bc0,0x00000000,0x07801248,0x0aa14008,
 0x06800009,0x06410c08,0x08010e81,0x093e1248,0x07c02149,0x07800f88,
 0x0a610008,0x07c02188,0x0c780200,0x07c021c8,0x06410c08,0x08010e82,
 0x093e1248,0x07c02189,0x093c1248,0x07c021c9,0x0780204b,0x0a60c08b,
@@ -233,7 +233,7 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x07802209,0x04001249,0x09546289,0x07c02209,0x0aa1c04b,0x0c008c00,
 0x06802249,0x07802249,0x04001249,0x09606289,0x07c02249,0x0601170a,
 0x06800009,0x07c02989,0x07801e49,0x0aa14009,0x07802949,0x0b20c049,
-0x0c0196c0,0x00000000,0x0a61400b,0x06800009,0x06410c08,0x08010e81,
+0x0c0197c0,0x00000000,0x0a61400b,0x06800009,0x06410c08,0x08010e81,
 0x093e1248,0x0641170a,0x096c1289,0x0601170a,0x07c02289,0x07801609,
 0x0aa14009,0x06800009,0x06410c08,0x08010e81,0x093e1248,0x07c022c9,
 0x06411008,0x09581209,0x06011008,0x07802149,0x0aa48009,0x0a61400b,
@@ -263,7 +263,7 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0c006040,0x06800049,0x0aa14008,0x00000000,0x08010e88,0x0c7fff40,
 0x04401208,0x0640ce09,0x0a234089,0x06420408,0x0a2fc048,0x00000000,
 0x06020408,0x06460108,0x0a216008,0x00000000,0x06460408,0x0a2fc048,
-0x00000000,0x06460408,0x06060408,0x0800c008,0x08007401,0x0c013880,
+0x00000000,0x06460408,0x06060408,0x0800c008,0x08007401,0x0c013980,
 0x00000000,0x0c785900,0x00000000,0x0aa0c148,0x0c7841c0,0x00000000,
 0x08010e81,0x06812008,0x06010e08,0x00000000,0x08010e00,0x07802008,
 0x0a60c008,0x06800008,0x07c02648,0x07801f48,0x0aa58008,0x06800008,
@@ -277,7 +277,7 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0978425f,0x06011609,0x0c000500,0x00000000,0x07801f49,0x0a60c009,
 0x07800e48,0x0aa24008,0x07800e48,0x09808788,0x098087c8,0x06012408,
 0x0640d608,0x0aa14008,0x04401208,0x0600d608,0x0c784640,0x0800c0ff,
-0x06a00008,0x06011408,0x0c786a80,0x00000000,0x07802789,0x07c029c9,
+0x06a00008,0x06011408,0x0c786b80,0x00000000,0x07802789,0x07c029c9,
 0x078028c9,0x0780274a,0x0a40b289,0x0680000c,0x0780288b,0x0780270a,
 0x0a40728b,0x0680000c,0x0a614009,0x0680008c,0x0a60c00a,0x0680008c,
 0x068000cc,0x07802008,0x09441308,0x06460109,0x094a324c,0x06060109,
@@ -303,10 +303,10 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x06043008,0x06443108,0x0900a248,0x0a6f0009,0x091e5248,0x0a6e8009,
 0x00000000,0x06440008,0x09808008,0x06040008,0x09c08008,0x06040008,
 0x08040701,0x07802008,0x0aa4c008,0x07802888,0x0a614008,0x07801cc9,
-0x0aa0c009,0x0c0087c0,0x00000000,0x06411009,0x091c1249,0x0a6f8009,
+0x0aa0c009,0x0c0088c0,0x00000000,0x06411009,0x091c1249,0x0a6f8009,
 0x00000000,0x06411009,0x098093c9,0x06011009,0x06411009,0x091e1249,
 0x0a6f8009,0x0cc00000,0x00000000,0x06411009,0x091c1249,0x0a6f8009,
-0x00000000,0x07800dc9,0x0ae0c049,0x0c008040,0x00000000,0x06411009,
+0x00000000,0x07800dc9,0x0ae0c049,0x0c008140,0x00000000,0x06411009,
 0x098093c9,0x06011009,0x08011c00,0x08011e00,0x06411009,0x091e1249,
 0x0a6f8009,0x0cc00000,0x00000000,0x0a60fc08,0x00000000,0x08010e90,
 0x0c7815c0,0x0800c0ff,0x078007cb,0x0c001600,0x06800049,0x06047e08,
@@ -329,11 +329,11 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x09118208,0x0cc00000,0x07400248,0x06410509,0x06bfff89,0x06030409,
 0x00400000,0x0be0c108,0x0c7ffa40,0x00000000,0x08012104,0x07800dc9,
 0x0ae0c049,0x06411c22,0x04000862,0x0a26891f,0x06011c21,0x0a21481f,
-0x0c005e80,0x00000000,0x0a25411f,0x09c1f15f,0x07801cc9,0x0aa48009,
+0x0c005f80,0x00000000,0x0a25411f,0x09c1f15f,0x07801cc9,0x0aa48009,
 0x08011e00,0x0be42022,0x06a907c9,0x06012b09,0x00000000,0x00000000,
-0x06412b09,0x0c005dc0,0x00000000,0x06411009,0x098093c9,0x06011009,
+0x06412b09,0x0c005ec0,0x00000000,0x06411009,0x098093c9,0x06011009,
 0x06411009,0x091e1249,0x0a6f8009,0x0c780800,0x00000000,0x0a27a022,
-0x06a907c9,0x06012b09,0x00000000,0x00000000,0x06412b09,0x0c0109c0,
+0x06a907c9,0x06012b09,0x00000000,0x00000000,0x06412b09,0x0c010ac0,
 0x00000000,0x06411609,0x093e1249,0x0aa48009,0x06800008,0x07c02648,
 0x06411109,0x07802408,0x09446248,0x06011109,0x06411009,0x09809389,
 0x06011009,0x06411e08,0x0be1e008,0x068001df,0x0c07a780,0x0978479f,
@@ -347,189 +347,190 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x08013500,0x06800408,0x06410c09,0x08010e90,0x09210249,0x07c0ffc9,
 0x0aef0048,0x04401208,0x06410108,0x09021208,0x0a6f8008,0x00000000,
 0x0640c708,0x06013408,0x08013501,0x06413508,0x090e1208,0x0a6f8008,
-0x00000000,0x08013500,0x07800e48,0x09808788,0x098087c8,0x06012408,
-0x06a00008,0x06011408,0x07801988,0x0aa0c008,0x0c00f500,0x00000000,
-0x09c1f09f,0x07800e48,0x04001208,0x07c00e48,0x07802648,0x04001208,
-0x07c02648,0x0a21409f,0x07802809,0x0b803248,0x00000000,0x09c1f05f,
-0x07802888,0x0a618048,0x04001208,0x07801cc9,0x0aa0c009,0x00000000,
-0x0981f15f,0x07802789,0x0b815248,0x07c02888,0x07802708,0x07c02888,
-0x0981f09f,0x07800e48,0x07800dc9,0x02008248,0x07802809,0x02408248,
-0x07c00e48,0x078028c8,0x04001208,0x078027c9,0x0b807248,0x07c028c8,
-0x07801988,0x0aa0c008,0x0c7806c0,0x00000000,0x0981f0df,0x078028c8,
-0x04001208,0x078027c9,0x0b80f248,0x07802888,0x04001208,0x07802789,
-0x0b80b248,0x07800dc9,0x0b807248,0x078028c8,0x04001208,0x07800e09,
-0x0b803248,0x0c7800c0,0x09c1f11f,0x0981f11f,0x0981f0df,0x0780289e,
-0x078028c8,0x0958c788,0x0978479f,0x0cb80020,0x00000000,0x06800048,
-0x07c02008,0x07802688,0x07801a0c,0x0b41a308,0x06801a89,0x02009209,
-0x0700024a,0x0780270b,0x0200b28b,0x07c0270b,0x07c0288b,0x0780274b,
-0x07c028cb,0x04001208,0x0b808308,0x07c02688,0x07800dc9,0x07c02789,
-0x0780270a,0x02409289,0x0c780ac0,0x07c02809,0x04001249,0x0700024a,
-0x07c0280a,0x0780278b,0x0200b28b,0x0c780900,0x07c0278b,0x078026c8,
-0x07801a4c,0x0b802308,0x0c7ff600,0x06800008,0x07c02688,0x07c02888,
-0x07c02708,0x07801a89,0x07c02809,0x07c02789,0x078026c8,0x06801b89,
-0x02009209,0x0700024a,0x0780274b,0x0200b28b,0x07c0274b,0x07c028cb,
-0x04001208,0x0b808308,0x07c026c8,0x07800e09,0x07c027c9,0x0780274a,
-0x02409289,0x0c780200,0x07c02849,0x04001249,0x0700024a,0x07c0284a,
-0x078027cb,0x0200b28b,0x07c027cb,0x07802748,0x07800dc9,0x0e000248,
-0x00000000,0x00000000,0x07802709,0x0f000200,0x02008248,0x07c00e48,
-0x0c7fe780,0x04c177df,0x07802889,0x0780270a,0x0400228a,0x0b407289,
-0x04402209,0x0440128a,0x07802788,0x0b403289,0x04401208,0x04401208,
-0x0680c009,0x02009209,0x07400262,0x0a21009f,0x06800021,0x0c7fb300,
-0x00000000,0x07802888,0x0680c009,0x02009209,0x0c7fb1c0,0x07000261,
+0x00000000,0x08013500,0x07800e48,0x0640d409,0x0aa0c009,0x0a8fe209,
+0x00000000,0x09808788,0x098087c8,0x06012408,0x06a00008,0x06011408,
+0x07801988,0x0aa0c008,0x0c00f500,0x00000000,0x09c1f09f,0x07800e48,
+0x04001208,0x07c00e48,0x07802648,0x04001208,0x07c02648,0x0a21409f,
+0x07802809,0x0b803248,0x00000000,0x09c1f05f,0x07802888,0x0a618048,
+0x04001208,0x07801cc9,0x0aa0c009,0x00000000,0x0981f15f,0x07802789,
+0x0b815248,0x07c02888,0x07802708,0x07c02888,0x0981f09f,0x07800e48,
+0x07800dc9,0x02008248,0x07802809,0x02408248,0x07c00e48,0x078028c8,
+0x04001208,0x078027c9,0x0b807248,0x07c028c8,0x07801988,0x0aa0c008,
+0x0c7806c0,0x00000000,0x0981f0df,0x078028c8,0x04001208,0x078027c9,
+0x0b80f248,0x07802888,0x04001208,0x07802789,0x0b80b248,0x07800dc9,
+0x0b807248,0x078028c8,0x04001208,0x07800e09,0x0b803248,0x0c7800c0,
+0x09c1f11f,0x0981f11f,0x0981f0df,0x0780289e,0x078028c8,0x0958c788,
+0x0978479f,0x0cb80020,0x00000000,0x06800048,0x07c02008,0x07802688,
+0x07801a0c,0x0b41a308,0x06801a89,0x02009209,0x0700024a,0x0780270b,
+0x0200b28b,0x07c0270b,0x07c0288b,0x0780274b,0x07c028cb,0x04001208,
+0x0b808308,0x07c02688,0x07800dc9,0x07c02789,0x0780270a,0x02409289,
+0x0c780ac0,0x07c02809,0x04001249,0x0700024a,0x07c0280a,0x0780278b,
+0x0200b28b,0x0c780900,0x07c0278b,0x078026c8,0x07801a4c,0x0b802308,
+0x0c7ff600,0x06800008,0x07c02688,0x07c02888,0x07c02708,0x07801a89,
+0x07c02809,0x07c02789,0x078026c8,0x06801b89,0x02009209,0x0700024a,
+0x0780274b,0x0200b28b,0x07c0274b,0x07c028cb,0x04001208,0x0b808308,
+0x07c026c8,0x07800e09,0x07c027c9,0x0780274a,0x02409289,0x0c780200,
+0x07c02849,0x04001249,0x0700024a,0x07c0284a,0x078027cb,0x0200b28b,
+0x07c027cb,0x07802748,0x07800dc9,0x0e000248,0x00000000,0x00000000,
+0x07802709,0x0f000200,0x02008248,0x07c00e48,0x0c7fe780,0x04c177df,
 0x07802889,0x0780270a,0x0400228a,0x0b407289,0x04402209,0x0440128a,
-0x07802788,0x0b403289,0x04401208,0x04401208,0x0680c009,0x05801288,
-0x02009289,0x0700024a,0x0a20c048,0x0c7800c0,0x094082a2,0x095102a2,
-0x0740024a,0x0a21009f,0x06800021,0x0c7fac00,0x00000000,0x07802888,
-0x0680c009,0x05801288,0x02009289,0x0700024a,0x0a20c048,0x0911084a,
-0x0900884a,0x0c7fa980,0x00000000,0x07802889,0x0780270a,0x0400228a,
-0x0b407289,0x04402209,0x0440128a,0x07802788,0x0b403289,0x04401208,
-0x04401208,0x0680c009,0x05802288,0x02009289,0x0700024a,0x09002208,
-0x0a60c008,0x0c780240,0x095842a2,0x0a60c048,0x0c780180,0x095042a2,
-0x0a60c088,0x0c7800c0,0x094842a2,0x094042a2,0x0740024a,0x0a21009f,
-0x06800021,0x0c7fa200,0x00000000,0x07802888,0x0680c009,0x05802288,
-0x02009289,0x0700024a,0x09002208,0x0aa1c008,0x0918484a,0x0aa14048,
-0x0910484a,0x0aa0c088,0x0908484a,0x0900484a,0x0c7f9e40,0x00000000,
-0x0c780080,0x06800021,0x0c7f9d40,0x00000000,0x06412107,0x090c11c7,
-0x0a6f8007,0x0c7de140,0x00000000,0x06804009,0x06012d09,0x06800f8a,
-0x08012e00,0x00000000,0x0d07ff8a,0x00000000,0x0cc00000,0x00000000,
-0x06804009,0x06012c09,0x06809009,0x06012d09,0x06800f8a,0x06412e09,
-0x0d07ffca,0x06012e09,0x0cc00000,0x00000000,0x07800e49,0x0a60c009,
-0x0cc00000,0x00000000,0x06809009,0x06012c09,0x06804009,0x06012d09,
-0x06800f8a,0x06412e09,0x0d07ffca,0x06012e09,0x06411109,0x07802408,
-0x09446248,0x06011109,0x0cc00000,0x00000000,0x07800dc8,0x07801a09,
-0x0a608009,0x0c780880,0x0aa18049,0x0aa20089,0x0aa640c9,0x0a608109,
-0x0c7806c0,0x0c780000,0x05801288,0x0c780680,0x07c01a8a,0x05802288,
-0x0540124a,0x02009289,0x0b0fe209,0x0400128a,0x0440224a,0x07c01a89,
-0x05401289,0x0400128a,0x0540124a,0x02009289,0x05401208,0x0b003209,
-0x07801a89,0x0440128a,0x0240a24a,0x0c780200,0x07c01aca,0x0c000b40,
-0x06801a8c,0x0c780100,0x00000000,0x0c000dc0,0x06801a8c,0x07800e08,
-0x07801a49,0x0a608009,0x0c780880,0x0aa18049,0x0aa20089,0x0aa640c9,
-0x0a608109,0x0c7806c0,0x0c780000,0x05801288,0x0c780680,0x07c01b8a,
-0x05802288,0x0540124a,0x02009289,0x0b0fe209,0x0400128a,0x0440224a,
-0x07c01b89,0x05401289,0x0400128a,0x0540124a,0x02009289,0x05401208,
-0x0b003209,0x07801b89,0x0440128a,0x0240a24a,0x0c780200,0x07c01bca,
-0x0c000200,0x06801b8c,0x0cc00000,0x00000000,0x0c000480,0x06801b8c,
-0x0cc00000,0x00000000,0x05802348,0x0740030d,0x05801248,0x0240a349,
-0x0400130c,0x0740030a,0x054012c8,0x0200b20b,0x058022cb,0x0240a24b,
-0x0400130c,0x0740030a,0x0cc00000,0x00000000,0x05803288,0x0540224a,
-0x02009289,0x0b0fe209,0x0400128a,0x0440224a,0x07400309,0x054012c8,
-0x04000349,0x0540224a,0x02009289,0x0b0fe2c9,0x0400128a,0x0440224a,
-0x0240a349,0x0400130c,0x0740030a,0x054012c8,0x0200b20b,0x04000349,
-0x0540224a,0x02009289,0x0b0fe2c9,0x0400128a,0x0440224a,0x0240a349,
-0x0400130c,0x0740030a,0x054022c8,0x04000349,0x0540224a,0x02009289,
+0x07802788,0x0b403289,0x04401208,0x04401208,0x0680c009,0x02009209,
+0x07400262,0x0a21009f,0x06800021,0x0c7fb200,0x00000000,0x07802888,
+0x0680c009,0x02009209,0x0c7fb0c0,0x07000261,0x07802889,0x0780270a,
+0x0400228a,0x0b407289,0x04402209,0x0440128a,0x07802788,0x0b403289,
+0x04401208,0x04401208,0x0680c009,0x05801288,0x02009289,0x0700024a,
+0x0a20c048,0x0c7800c0,0x094082a2,0x095102a2,0x0740024a,0x0a21009f,
+0x06800021,0x0c7fab00,0x00000000,0x07802888,0x0680c009,0x05801288,
+0x02009289,0x0700024a,0x0a20c048,0x0911084a,0x0900884a,0x0c7fa880,
+0x00000000,0x07802889,0x0780270a,0x0400228a,0x0b407289,0x04402209,
+0x0440128a,0x07802788,0x0b403289,0x04401208,0x04401208,0x0680c009,
+0x05802288,0x02009289,0x0700024a,0x09002208,0x0a60c008,0x0c780240,
+0x095842a2,0x0a60c048,0x0c780180,0x095042a2,0x0a60c088,0x0c7800c0,
+0x094842a2,0x094042a2,0x0740024a,0x0a21009f,0x06800021,0x0c7fa100,
+0x00000000,0x07802888,0x0680c009,0x05802288,0x02009289,0x0700024a,
+0x09002208,0x0aa1c008,0x0918484a,0x0aa14048,0x0910484a,0x0aa0c088,
+0x0908484a,0x0900484a,0x0c7f9d40,0x00000000,0x0c780080,0x06800021,
+0x0c7f9c40,0x00000000,0x06412107,0x090c11c7,0x0a6f8007,0x0c7de040,
+0x00000000,0x06804009,0x06012d09,0x06800f8a,0x08012e00,0x00000000,
+0x0d07ff8a,0x00000000,0x0cc00000,0x00000000,0x06804009,0x06012c09,
+0x06809009,0x06012d09,0x06800f8a,0x06412e09,0x0d07ffca,0x06012e09,
+0x0cc00000,0x00000000,0x07800e49,0x0a60c009,0x0cc00000,0x00000000,
+0x06809009,0x06012c09,0x06804009,0x06012d09,0x06800f8a,0x06412e09,
+0x0d07ffca,0x06012e09,0x06411109,0x07802408,0x09446248,0x06011109,
+0x0cc00000,0x00000000,0x07800dc8,0x07801a09,0x0a608009,0x0c780880,
+0x0aa18049,0x0aa20089,0x0aa640c9,0x0a608109,0x0c7806c0,0x0c780000,
+0x05801288,0x0c780680,0x07c01a8a,0x05802288,0x0540124a,0x02009289,
+0x0b0fe209,0x0400128a,0x0440224a,0x07c01a89,0x05401289,0x0400128a,
+0x0540124a,0x02009289,0x05401208,0x0b003209,0x07801a89,0x0440128a,
+0x0240a24a,0x0c780200,0x07c01aca,0x0c000b40,0x06801a8c,0x0c780100,
+0x00000000,0x0c000dc0,0x06801a8c,0x07800e08,0x07801a49,0x0a608009,
+0x0c780880,0x0aa18049,0x0aa20089,0x0aa640c9,0x0a608109,0x0c7806c0,
+0x0c780000,0x05801288,0x0c780680,0x07c01b8a,0x05802288,0x0540124a,
+0x02009289,0x0b0fe209,0x0400128a,0x0440224a,0x07c01b89,0x05401289,
+0x0400128a,0x0540124a,0x02009289,0x05401208,0x0b003209,0x07801b89,
+0x0440128a,0x0240a24a,0x0c780200,0x07c01bca,0x0c000200,0x06801b8c,
+0x0cc00000,0x00000000,0x0c000480,0x06801b8c,0x0cc00000,0x00000000,
+0x05802348,0x0740030d,0x05801248,0x0240a349,0x0400130c,0x0740030a,
+0x054012c8,0x0200b20b,0x058022cb,0x0240a24b,0x0400130c,0x0740030a,
+0x0cc00000,0x00000000,0x05803288,0x0540224a,0x02009289,0x0b0fe209,
+0x0400128a,0x0440224a,0x07400309,0x054012c8,0x04000349,0x0540224a,
+0x02009289,0x0b0fe2c9,0x0400128a,0x0440224a,0x0240a349,0x0400130c,
+0x0740030a,0x054012c8,0x0200b20b,0x04000349,0x0540224a,0x02009289,
 0x0b0fe2c9,0x0400128a,0x0440224a,0x0240a349,0x0400130c,0x0740030a,
+0x054022c8,0x04000349,0x0540224a,0x02009289,0x0b0fe2c9,0x0400128a,
+0x0440224a,0x0240a349,0x0400130c,0x0740030a,0x0cc00000,0x00000000,
+0x0640c308,0x02008308,0x06035108,0x06800808,0x06035208,0x06800149,
+0x0680c00a,0x0700024b,0x0740028b,0x0b6105c9,0x04001249,0x0c7fff00,
+0x0400128a,0x06a0c008,0x06035008,0x06435008,0x0580f208,0x0bef8048,
+0x00000000,0x06435308,0x0900c208,0x0a6f8008,0x00000000,0x0cc00000,
+0x00000000,0x0640c408,0x02008308,0x06035108,0x06801008,0x06035208,
+0x06800609,0x0680c00a,0x0700024b,0x0740028b,0x0b611449,0x04001249,
+0x0c7fff00,0x0400128a,0x06a0c008,0x06035008,0x06435008,0x0580f208,
+0x0bef8048,0x00000000,0x06435308,0x0900c208,0x0a6f8008,0x00000000,
 0x0cc00000,0x00000000,0x0640c308,0x02008308,0x06035108,0x06800808,
-0x06035208,0x06800149,0x0680c00a,0x0700024b,0x0740028b,0x0b6105c9,
+0x06035208,0x06b0c008,0x06035008,0x06435008,0x0580f208,0x0bef8048,
+0x00000000,0x06800149,0x0680c00a,0x0700028b,0x0740024b,0x0b6105c9,
+0x04001249,0x0c7fff00,0x0400128a,0x0cc00000,0x00000000,0x0640c408,
+0x02008308,0x06035108,0x06801008,0x06035208,0x06b0c008,0x06035008,
+0x06435008,0x0580f208,0x0bef8048,0x00000000,0x06800609,0x0680c00a,
+0x0700028b,0x0740024b,0x0b611449,0x04001249,0x0c7fff00,0x0400128a,
+0x0cc00000,0x00000000,0x0640c508,0x02008308,0x06035108,0x06800c08,
+0x06035208,0x06801489,0x0680c00a,0x0700024b,0x0740028b,0x0b611ec9,
 0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,0x06035008,0x06435008,
 0x0580f208,0x0bef8048,0x00000000,0x06435308,0x0900c208,0x0a6f8008,
-0x00000000,0x0cc00000,0x00000000,0x0640c408,0x02008308,0x06035108,
-0x06801008,0x06035208,0x06800609,0x0680c00a,0x0700024b,0x0740028b,
-0x0b611449,0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,0x06035008,
-0x06435008,0x0580f208,0x0bef8048,0x00000000,0x06435308,0x0900c208,
-0x0a6f8008,0x00000000,0x0cc00000,0x00000000,0x0640c308,0x02008308,
-0x06035108,0x06800808,0x06035208,0x06b0c008,0x06035008,0x06435008,
-0x0580f208,0x0bef8048,0x00000000,0x06800149,0x0680c00a,0x0700028b,
-0x0740024b,0x0b6105c9,0x04001249,0x0c7fff00,0x0400128a,0x0cc00000,
-0x00000000,0x0640c408,0x02008308,0x06035108,0x06801008,0x06035208,
+0x00000000,0x07800f08,0x0aa20008,0x0540330c,0x078014c8,0x0aa0c008,
+0x06800008,0x06900008,0x0c000100,0x0200c20c,0x0cc00000,0x00000000,
+0x0680000d,0x08070300,0x0680c00b,0x0680000a,0x06470408,0x06470409,
+0x09508209,0x074002c8,0x040012cb,0x0baeffca,0x0400128a,0x0aa3800d,
+0x00000000,0x06470508,0x07c0fe88,0x09210208,0x07c0fec8,0x06470608,
+0x07c0ff08,0x09210208,0x07c0ff48,0x06470708,0x07c0ff88,0x09210208,
+0x07c0ffc8,0x0640cd08,0x02008308,0x0540924d,0x02008248,0x06035108,
+0x06804008,0x06035208,0x06a0c008,0x06035008,0x06435008,0x0580f208,
+0x0bef8048,0x00000000,0x0ba0c04d,0x0cc00000,0x00000000,0x0c7ff640,
+0x0400134d,0x0640c508,0x02008308,0x06035108,0x06800c08,0x06035208,
+0x06b0c008,0x06035008,0x06435008,0x0580f208,0x0bef8048,0x00000000,
+0x06801489,0x0680c00a,0x0700028b,0x0740024b,0x0b611ec9,0x04001249,
+0x0c7fff00,0x0400128a,0x0c000e00,0x00000000,0x07800f08,0x0aa20008,
+0x0540330c,0x078014c8,0x0aa0c008,0x06800008,0x06900008,0x0c000100,
+0x0200c20c,0x0cc00000,0x00000000,0x0680000d,0x08070200,0x0640cd08,
+0x02008308,0x0540924d,0x02008248,0x06035108,0x06804008,0x06035208,
 0x06b0c008,0x06035008,0x06435008,0x0580f208,0x0bef8048,0x00000000,
-0x06800609,0x0680c00a,0x0700028b,0x0740024b,0x0b611449,0x04001249,
-0x0c7fff00,0x0400128a,0x0cc00000,0x00000000,0x0640c508,0x02008308,
-0x06035108,0x06800c08,0x06035208,0x06801489,0x0680c00a,0x0700024b,
-0x0740028b,0x0b611ec9,0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,
-0x06035008,0x06435008,0x0580f208,0x0bef8048,0x00000000,0x06435308,
-0x0900c208,0x0a6f8008,0x00000000,0x07800f08,0x0aa20008,0x0540330c,
-0x078014c8,0x0aa0c008,0x06800008,0x06900008,0x0c000100,0x0200c20c,
-0x0cc00000,0x00000000,0x0680000d,0x08070300,0x0680c00b,0x0680000a,
-0x06470408,0x06470409,0x09508209,0x074002c8,0x040012cb,0x0baeffca,
-0x0400128a,0x0aa3800d,0x00000000,0x06470508,0x07c0fe88,0x09210208,
-0x07c0fec8,0x06470608,0x07c0ff08,0x09210208,0x07c0ff48,0x06470708,
-0x07c0ff88,0x09210208,0x07c0ffc8,0x0640cd08,0x02008308,0x0540924d,
-0x02008248,0x06035108,0x06804008,0x06035208,0x06a0c008,0x06035008,
-0x06435008,0x0580f208,0x0bef8048,0x00000000,0x0ba0c04d,0x0cc00000,
-0x00000000,0x0c7ff640,0x0400134d,0x0640c508,0x02008308,0x06035108,
-0x06800c08,0x06035208,0x06b0c008,0x06035008,0x06435008,0x0580f208,
-0x0bef8048,0x00000000,0x06801489,0x0680c00a,0x0700028b,0x0740024b,
-0x0b611ec9,0x04001249,0x0c7fff00,0x0400128a,0x0c000e00,0x00000000,
-0x07800f08,0x0aa20008,0x0540330c,0x078014c8,0x0aa0c008,0x06800008,
-0x06900008,0x0c000100,0x0200c20c,0x0cc00000,0x00000000,0x0680000d,
-0x08070200,0x0640cd08,0x02008308,0x0540924d,0x02008248,0x06035108,
-0x06804008,0x06035208,0x06b0c008,0x06035008,0x06435008,0x0580f208,
-0x0bef8048,0x00000000,0x0680c00b,0x0680000a,0x070002c8,0x040012cb,
-0x06070408,0x09108248,0x06070409,0x0baeffca,0x0400128a,0x0aa3800d,
-0x00000000,0x0780fe88,0x0780fec9,0x09610209,0x06070508,0x0780ff08,
-0x0780ff49,0x09610209,0x06070608,0x0780ff88,0x0780ffc9,0x09610209,
-0x06070708,0x0ba0c04d,0x0cc00000,0x00000000,0x0c7ff640,0x0400134d,
-0x078015c8,0x07801749,0x09421209,0x07801709,0x09441209,0x07801949,
-0x09461209,0x07800ec9,0x09483209,0x07800e89,0x094e3209,0x07800f49,
-0x09741209,0x07801789,0x09761209,0x07800d09,0x078017ca,0x02409289,
-0x09782209,0x06011708,0x06412508,0x07800fc9,0x09401209,0x07801089,
-0x09482209,0x078010c9,0x094c2209,0x07801009,0x09504209,0x07801049,
-0x09584209,0x06800cc9,0x09706209,0x07800889,0x09442209,0x0aa18009,
-0x0680018a,0x04401249,0x0340a24a,0x0960420a,0x09808048,0x078008c9,
-0x097c2209,0x0aa18009,0x0680018a,0x04401249,0x0340a24a,0x0968420a,
-0x09808048,0x06012508,0x06470108,0x07800f09,0x09401209,0x09421209,
-0x09441209,0x07800d09,0x09482209,0x06070108,0x06470b08,0x07800889,
-0x09402209,0x078008c9,0x09482209,0x09502209,0x06070b08,0x06440808,
-0x07801289,0x09401209,0x07801709,0x09421209,0x06040808,0x06440c08,
-0x07800889,0x09402209,0x078008c9,0x09442209,0x06040c08,0x0cc00000,
-0x00000000,0x0c002dc0,0x00000000,0x07802208,0x07c04408,0x07802248,
-0x07c04448,0x07802048,0x07c04488,0x07802148,0x07c044c8,0x07802008,
-0x07c04508,0x07801fc8,0x07c04548,0x07800808,0x07c045c8,0x07800848,
-0x07c04608,0x07800c48,0x07c04648,0x07800c88,0x07c04688,0x07800908,
-0x07c046c8,0x078020c8,0x07c04708,0x07802308,0x07c04748,0x07802348,
-0x07c04788,0x07801e88,0x07c047c8,0x07802388,0x07c04808,0x07800a48,
-0x07c04848,0x07802988,0x07c04888,0x07801988,0x078019c9,0x05401249,
-0x02c08248,0x07c048c8,0x07801a08,0x07c04908,0x07801a48,0x07c04948,
-0x07801a88,0x07c04988,0x07801ac8,0x07c049c8,0x07801b08,0x07c04a08,
-0x07801b48,0x07c04a48,0x07801b88,0x07c04a88,0x07801bc8,0x07c04ac8,
-0x07801c08,0x07c04b08,0x07801c48,0x07c04b48,0x07801dc8,0x07c04bc8,
-0x07801e08,0x07c04c08,0x07802548,0x07c04c48,0x07802588,0x07c04c88,
-0x07801808,0x07c04cc8,0x07801848,0x07c04d08,0x07801f48,0x07c04d48,
-0x06800009,0x07801108,0x0a20c048,0x07800fc8,0x09809009,0x0a20c048,
-0x07801c88,0x09809049,0x0a20c048,0x07801d08,0x09809089,0x0a20c048,
-0x07801d48,0x098090c9,0x0a20c048,0x07801d88,0x09809109,0x0a20c048,
-0x078024c8,0x09809149,0x0a20c048,0x07802508,0x09809189,0x0a20c048,
-0x07802188,0x098091c9,0x0a20c048,0x078021c8,0x09809209,0x0a20c048,
-0x078025c8,0x09809249,0x0a20c048,0x00000000,0x09809289,0x07c04b89,
-0x0680500a,0x06802a48,0x07000209,0x07400289,0x0400128a,0x0baf7208,
-0x04001208,0x0800cf00,0x06800009,0x06804008,0x02008248,0x07000208,
-0x09808408,0x0600cf08,0x00000000,0x0640cf08,0x0a6fc008,0x0b60dfc9,
-0x0c7ffdc0,0x04001249,0x0cc00000,0x00000000,0x0800cf00,0x0800c0ff,
-0x06800009,0x0680ffca,0x07000248,0x09808408,0x0600cf08,0x00000000,
-0x0640cf08,0x0a6fc008,0x0b403289,0x0c7ffe40,0x04001249,0x0cc00000,
-0x00000000,0x0680000a,0x0680000b,0x06804008,0x07000209,0x0580f209,
-0x0be20048,0x0580e209,0x0a20c048,0x0400128a,0x040012cb,0x06804008,
-0x0bae040a,0x02008288,0x07c0294b,0x0cc00000,0x00000000,0x06800009,
-0x07c02949,0x068003ca,0x068043c8,0x07400209,0x0440128a,0x0aef800a,
-0x04401208,0x06a00009,0x07400209,0x0cc00000,0x00000000,0x06800048,
-0x07c02308,0x07c02148,0x0cc00000,0x00000000,0x0680580a,0x06801f08,
-0x07000209,0x07400289,0x0400128a,0x0baf6608,0x04001208,0x0cc00000,
-0x00000000,0x06802a4d,0x06410c08,0x08010e81,0x093e1248,0x0aa10009,
-0x07c02989,0x0c0003c0,0x0780220c,0x0a62c00b,0x00000000,0x06410c08,
-0x08010e81,0x093e1248,0x0aa18009,0x07802989,0x09809049,0x07c02989,
-0x0c000100,0x0780224c,0x0cc00000,0x00000000,0x07802948,0x0b21c088,
-0x06800049,0x0b214108,0x06800089,0x0b20c208,0x068000c9,0x06800109,
-0x0680080a,0x0240a24a,0x098091c9,0x06410c08,0x06010e09,0x03808288,
-0x07400348,0x0400134d,0x0aeec04c,0x0440130c,0x0cc00000,0x00000000,
-0x06460409,0x09001289,0x0aaf800a,0x00000000,0x0cc00000,0x00000000,
-0x07802888,0x0680d009,0x02009209,0x0700024d,0x078028c8,0x0680ee09,
-0x02009209,0x0700024e,0x0680000f,0x0ac0338d,0x06ee000f,0x06ea000f,
-0x06050a0f,0x07802888,0x0b615e08,0x0680d009,0x02009209,0x07802a0d,
-0x0740024d,0x078028c8,0x0b615108,0x0680ee09,0x02009209,0x07802a0e,
-0x0740024e,0x0cc00000,0x00000000,0x0640c023,0x0a6fffe3,0x00000000,
-0x06410b23,0x098230a3,0x06010b23,0x06412123,0x0a2fc063,0x00000000,
-0x06410c23,0x092039a3,0x07c04da6,0x093269a3,0x07c04de6,0x06410d23,
-0x06410b23,0x0600d326,0x06800067,0x0c000d40,0x04000a26,0x0a6308a6,
-0x00000000,0x06411423,0x090188e3,0x0640ce24,0x0a610023,0x0be0c064,
-0x05801924,0x0a610024,0x06440123,0x0a2fc063,0x00000000,0x08012101,
-0x0640d224,0x0a214064,0x00000000,0x0800c009,0x0c7ff6c0,0x08007401,
-0x0640d224,0x0be3c0a4,0x06803c25,0x078033a3,0x0aa30826,0x0a250063,
-0x0be28124,0x0aa24866,0x0a2440a3,0x0aa1c8a6,0x0a23c123,0x0be0c223,
-0x0aa08526,0x0a6304e6,0x098230e3,0x07c033a3,0x0aa24826,0x06800065,
-0x0aa1c866,0x068000a5,0x0aa148a6,0x068000e5,0x0b20c566,0x06800125,
-0x06803c25,0x068000a7,0x0c000180,0x04000a25,0x0600c025,0x08030504,
-0x0c7feec0,0x00000000,0x0600d128,0x078033e8,0x0aa18028,0x00000000,
-0x0600d027,0x08007401,0x0640d027,0x0a6fc027,0x00000000,0x0cc00000,
+0x0680c00b,0x0680000a,0x070002c8,0x040012cb,0x06070408,0x09108248,
+0x06070409,0x0baeffca,0x0400128a,0x0aa3800d,0x00000000,0x0780fe88,
+0x0780fec9,0x09610209,0x06070508,0x0780ff08,0x0780ff49,0x09610209,
+0x06070608,0x0780ff88,0x0780ffc9,0x09610209,0x06070708,0x0ba0c04d,
+0x0cc00000,0x00000000,0x0c7ff640,0x0400134d,0x078015c8,0x07801749,
+0x09421209,0x07801709,0x09441209,0x07801949,0x09461209,0x07800ec9,
+0x09483209,0x07800e89,0x094e3209,0x07800f49,0x09741209,0x07801789,
+0x09761209,0x07800d09,0x078017ca,0x02409289,0x09782209,0x06011708,
+0x06412508,0x07800fc9,0x09401209,0x07801089,0x09482209,0x078010c9,
+0x094c2209,0x07801009,0x09504209,0x07801049,0x09584209,0x06800cc9,
+0x09706209,0x07800889,0x09442209,0x0aa18009,0x0680018a,0x04401249,
+0x0340a24a,0x0960420a,0x09808048,0x078008c9,0x097c2209,0x0aa18009,
+0x0680018a,0x04401249,0x0340a24a,0x0968420a,0x09808048,0x06012508,
+0x06470108,0x07800f09,0x09401209,0x09421209,0x09441209,0x07800d09,
+0x09482209,0x06070108,0x06470b08,0x07800889,0x09402209,0x078008c9,
+0x09482209,0x09502209,0x06070b08,0x06440808,0x07801289,0x09401209,
+0x07801709,0x09421209,0x06040808,0x06440c08,0x07800889,0x09402209,
+0x078008c9,0x09442209,0x06040c08,0x0cc00000,0x00000000,0x0c002dc0,
+0x00000000,0x07802208,0x07c04408,0x07802248,0x07c04448,0x07802048,
+0x07c04488,0x07802148,0x07c044c8,0x07802008,0x07c04508,0x07801fc8,
+0x07c04548,0x07800808,0x07c045c8,0x07800848,0x07c04608,0x07800c48,
+0x07c04648,0x07800c88,0x07c04688,0x07800908,0x07c046c8,0x078020c8,
+0x07c04708,0x07802308,0x07c04748,0x07802348,0x07c04788,0x07801e88,
+0x07c047c8,0x07802388,0x07c04808,0x07800a48,0x07c04848,0x07802988,
+0x07c04888,0x07801988,0x078019c9,0x05401249,0x02c08248,0x07c048c8,
+0x07801a08,0x07c04908,0x07801a48,0x07c04948,0x07801a88,0x07c04988,
+0x07801ac8,0x07c049c8,0x07801b08,0x07c04a08,0x07801b48,0x07c04a48,
+0x07801b88,0x07c04a88,0x07801bc8,0x07c04ac8,0x07801c08,0x07c04b08,
+0x07801c48,0x07c04b48,0x07801dc8,0x07c04bc8,0x07801e08,0x07c04c08,
+0x07802548,0x07c04c48,0x07802588,0x07c04c88,0x07801808,0x07c04cc8,
+0x07801848,0x07c04d08,0x07801f48,0x07c04d48,0x06800009,0x07801108,
+0x0a20c048,0x07800fc8,0x09809009,0x0a20c048,0x07801c88,0x09809049,
+0x0a20c048,0x07801d08,0x09809089,0x0a20c048,0x07801d48,0x098090c9,
+0x0a20c048,0x07801d88,0x09809109,0x0a20c048,0x078024c8,0x09809149,
+0x0a20c048,0x07802508,0x09809189,0x0a20c048,0x07802188,0x098091c9,
+0x0a20c048,0x078021c8,0x09809209,0x0a20c048,0x078025c8,0x09809249,
+0x0a20c048,0x00000000,0x09809289,0x07c04b89,0x0680500a,0x06802a48,
+0x07000209,0x07400289,0x0400128a,0x0baf7208,0x04001208,0x0800cf00,
+0x06800009,0x06804008,0x02008248,0x07000208,0x09808408,0x0600cf08,
+0x00000000,0x0640cf08,0x0a6fc008,0x0b60dfc9,0x0c7ffdc0,0x04001249,
+0x0cc00000,0x00000000,0x0800cf00,0x0800c0ff,0x06800009,0x0680ffca,
+0x07000248,0x09808408,0x0600cf08,0x00000000,0x0640cf08,0x0a6fc008,
+0x0b403289,0x0c7ffe40,0x04001249,0x0cc00000,0x00000000,0x0680000a,
+0x0680000b,0x06804008,0x07000209,0x0580f209,0x0be20048,0x0580e209,
+0x0a20c048,0x0400128a,0x040012cb,0x06804008,0x0bae040a,0x02008288,
+0x07c0294b,0x0cc00000,0x00000000,0x06800009,0x07c02949,0x068003ca,
+0x068043c8,0x07400209,0x0440128a,0x0aef800a,0x04401208,0x06a00009,
+0x07400209,0x0cc00000,0x00000000,0x06800048,0x07c02308,0x07c02148,
+0x0cc00000,0x00000000,0x0680580a,0x06801f08,0x07000209,0x07400289,
+0x0400128a,0x0baf6608,0x04001208,0x0cc00000,0x00000000,0x06802a4d,
+0x06410c08,0x08010e81,0x093e1248,0x0aa10009,0x07c02989,0x0c0003c0,
+0x0780220c,0x0a62c00b,0x00000000,0x06410c08,0x08010e81,0x093e1248,
+0x0aa18009,0x07802989,0x09809049,0x07c02989,0x0c000100,0x0780224c,
+0x0cc00000,0x00000000,0x07802948,0x0b21c088,0x06800049,0x0b214108,
+0x06800089,0x0b20c208,0x068000c9,0x06800109,0x0680080a,0x0240a24a,
+0x098091c9,0x06410c08,0x06010e09,0x03808288,0x07400348,0x0400134d,
+0x0aeec04c,0x0440130c,0x0cc00000,0x00000000,0x06460409,0x09001289,
+0x0aaf800a,0x00000000,0x0cc00000,0x00000000,0x07802888,0x0680d009,
+0x02009209,0x0700024d,0x078028c8,0x0680ee09,0x02009209,0x0700024e,
+0x0680000f,0x0ac0338d,0x06ee000f,0x06ea000f,0x06050a0f,0x07802888,
+0x0b615e08,0x0680d009,0x02009209,0x07802a0d,0x0740024d,0x078028c8,
+0x0b615108,0x0680ee09,0x02009209,0x07802a0e,0x0740024e,0x0cc00000,
+0x00000000,0x0640c023,0x0a6fffe3,0x00000000,0x06410b23,0x098230a3,
+0x06010b23,0x06412123,0x0a2fc063,0x00000000,0x06410c23,0x092039a3,
+0x07c04da6,0x093269a3,0x07c04de6,0x06410d23,0x06410b23,0x0600d326,
+0x06800067,0x0c000d40,0x04000a26,0x0a6308a6,0x00000000,0x06411423,
+0x090188e3,0x0640ce24,0x0a610023,0x0be0c064,0x05801924,0x0a610024,
+0x06440123,0x0a2fc063,0x00000000,0x08012101,0x0640d224,0x0a214064,
+0x00000000,0x0800c009,0x0c7ff6c0,0x08007401,0x0640d224,0x0be3c0a4,
+0x06803c25,0x078033a3,0x0aa30826,0x0a250063,0x0be28124,0x0aa24866,
+0x0a2440a3,0x0aa1c8a6,0x0a23c123,0x0be0c223,0x0aa08526,0x0a6304e6,
+0x098230e3,0x07c033a3,0x0aa24826,0x06800065,0x0aa1c866,0x068000a5,
+0x0aa148a6,0x068000e5,0x0b20c566,0x06800125,0x06803c25,0x068000a7,
+0x0c000180,0x04000a25,0x0600c025,0x08030504,0x0c7feec0,0x00000000,
+0x0600d128,0x078033e8,0x0aa18028,0x00000000,0x0600d027,0x08007401,
+0x0640d027,0x0a6fc027,0x00000000,0x0cc00000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
diff --git a/drivers/amlogic/amports/vh265.c b/drivers/amlogic/amports/vh265.c
index d7ce9f2ae56d..9bbbe3919bd9 100755
--- a/drivers/amlogic/amports/vh265.c
+++ b/drivers/amlogic/amports/vh265.c
@@ -86,12 +86,13 @@ static struct timer_list recycle_timer;
 static u32 stat;
 static u32 error_watchdog_count;
 
-#define H265_DEBUG_POC          1
-#define H265_DEBUG_BUFMGR       2
-#define H265_DEBUG_PARAM        4
-#define H265_DEBUG_REG          8
-#define H265_DEBUG_UCODE        0x10
-#define H265_DEBUG_USE_AUTO_SKIP        0x20
+#define H265_DEBUG_POC                      0x01
+#define H265_DEBUG_BUFMGR                   0x02
+#define H265_DEBUG_PARAM                    0x04
+#define H265_DEBUG_REG                      0x08
+#define H265_DEBUG_UCODE                    0x10
+#define H265_DEBUG_USE_MAN_SKIP            0x20
+#define H265_DEBUG_DISPLAY_CUR_FRAME   0x40
 #define H265_DEBUG_ENA_LOC_ERROR_PROC       0x10000
 #define H265_DEBUG_DIS_SYS_ERROR_PROC   0x20000
 
@@ -100,6 +101,7 @@ static u32 error_watchdog_count;
 static u32 debug_decode_idx_start = 0;
 static u32 debug_decode_idx_end = 0;
 static u32 debug = 0;
+static u32 decode_stop_pos = 0;
 
 #define DEBUG_REG
 #ifdef DEBUG_REG
@@ -340,6 +342,7 @@ bit 2: valid when bit1==0;  0, auto skip nal before first vps/sps/pps/idr; 1, au
 */
 #define NAL_SEARCH_CTL		      HEVC_ASSIST_SCRATCH_I
 #define CUR_NAL_UNIT_TYPE       HEVC_ASSIST_SCRATCH_J
+#define DECODE_STOP_POS         HEVC_ASSIST_SCRATCH_K
 
 #define MAX_INT 0x7FFFFFFF
 
@@ -1240,11 +1243,17 @@ static void update_tile_info(hevc_stru_t* hevc,  int pic_width_cu, int pic_heigh
 
 static int get_tile_index(hevc_stru_t* hevc, int cu_adr, int pic_width_lcu)
 {
-	int cu_x = cu_adr%pic_width_lcu;
-	int cu_y = cu_adr/pic_width_lcu;
+	int cu_x;
+	int cu_y;
 	int tile_x = 0;
 	int tile_y = 0;
 	int i;
+	if(pic_width_lcu == 0){
+	    printk("%s Error, pic_width_lcu is 0, pic_w %d, pic_h %d\n", __func__, hevc->pic_w, hevc->pic_h);
+	    return -1;
+  }
+	cu_x = cu_adr%pic_width_lcu;
+	cu_y = cu_adr/pic_width_lcu;
 	if(hevc->tile_enabled){	
 		for(i=0;i<hevc->num_tile_col;i++){	
 			if(cu_x>=m_tile[0][i].start_cu_x){
@@ -2069,7 +2078,6 @@ static PIC_t* get_new_pic(hevc_stru_t* hevc, param_t* rpm_param)
         if(new_pic == NULL){
             //printk("Error: Buffer management, no free buffer\n");
             //dump_pic_list(hevc);
-            //hevc->wait_buf = 1;
             return NULL;
         }
     }
@@ -2088,6 +2096,21 @@ static PIC_t* get_new_pic(hevc_stru_t* hevc, param_t* rpm_param)
     return new_pic;
 }
 
+static int get_display_pic_num(hevc_stru_t* hevc)
+{
+    int ii = 0;
+    PIC_t* pic;
+    int num = 0;      
+    while(1){
+        pic = get_pic_by_IDX(hevc, ii++);
+        if(pic == NULL)
+            break;
+        if(pic->output_ready == 1){
+            num++;
+        }
+    }
+    return num;
+}
 
 static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_param)
 {
@@ -2124,6 +2147,10 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
         
         hevc->pic_w           =rpm_param->p.pic_width_in_luma_samples;
         hevc->pic_h           =rpm_param->p.pic_height_in_luma_samples;
+        if(hevc->pic_w == 0 || hevc->pic_h == 0 ){ //it will cause divide 0 error
+            printk("Fatal Error, pic_w = %d, pic_h = %d\n", hevc->pic_w, hevc->pic_h);
+            return 3;
+        }
         hevc->lcu_size        = 1<<(rpm_param->p.log2_min_coding_block_size_minus3+3+rpm_param->p.log2_diff_max_min_coding_block_size);
         hevc->lcu_size_log2   =log2i(hevc->lcu_size);
         lcu_x_num_div   =(hevc->pic_w/ hevc->lcu_size);
@@ -2238,6 +2265,10 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
                                 dump_pic_list(hevc);
                             printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
                         }
+                        if(debug&H265_DEBUG_DISPLAY_CUR_FRAME){
+                       			 pic_display->output_ready = 0;
+                             printk("[Buffer Management] Display: POC %d, decoding index %d ==> In Debug Mode: recycle it\n", pic_display->POC, pic_display->decode_idx);
+                        }
                     }
                 }while(pic_display);
             }
@@ -2267,6 +2298,10 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
                                 dump_pic_list(hevc);
                             printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
                         }
+                        if(debug&H265_DEBUG_DISPLAY_CUR_FRAME){
+                       			 pic_display->output_ready = 0;
+                             printk("[Buffer Management] Display: POC %d, decoding index %d ==> In Debug Mode: recycle it\n", pic_display->POC, pic_display->decode_idx);
+                        }
                     }
                 }while(pic_display);
             }
@@ -2281,6 +2316,12 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
                 hevc->wait_buf = 1;
                 return -1;
             }            
+            if(debug&H265_DEBUG_DISPLAY_CUR_FRAME){
+                hevc->cur_pic->output_ready = 1;
+                prepare_display_buf(hevc->cur_pic->index, READ_VREG(HEVC_SHIFT_BYTE_COUNT));    
+                hevc->wait_buf = 2;
+                return -1;
+            }        
         }
         else{
             hevc->cur_pic->slice_idx++;
@@ -2288,12 +2329,19 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
         }
     }
     else{
-        //wait_buf == 1
-        hevc->cur_pic = get_new_pic(hevc, rpm_param);
-        if(hevc->cur_pic == NULL){
-            return -1;
+        if(hevc->wait_buf == 1){
+            hevc->cur_pic = get_new_pic(hevc, rpm_param);
+            if(hevc->cur_pic == NULL){
+                return -1;
+            }
+            hevc->wait_buf = 0;            
+        }
+        else if(hevc->wait_buf == 2){ // for case: debug&H265_DEBUG_DISPLAY_CUR_FRAME
+            if(get_display_pic_num(hevc)>1){ //start decoding only when video is displaying cur buf
+                return -1;
+            }
+            hevc->wait_buf = 0;    
         }
-        hevc->wait_buf = 0;            
     }
         
     if(hevc->new_pic){
@@ -2302,10 +2350,9 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
         int pic_width_cu = (hevc->pic_w+hevc->lcu_size-1)/hevc->lcu_size;
 		    int sao_vb_size = (sao_mem_unit+(2<<4))*pic_height_cu;
 		    //int sao_abv_size = sao_mem_unit*pic_width_cu;
-        
         hevc->decode_idx++;
         if(debug&H265_DEBUG_BUFMGR){
-            printk("%s decode index %d\n", __func__, hevc->decode_idx);
+            printk("=========>%s decode index %d\n", __func__, hevc->decode_idx);
         }
         update_tile_info(hevc, pic_width_cu , pic_height_cu , sao_mem_unit, rpm_param);
 
@@ -2819,6 +2866,8 @@ static void vh265_put_timer_func(unsigned long arg)
 
     timer->expires = jiffies + PUT_INTERVAL;
 
+    WRITE_VREG(DECODE_STOP_POS, decode_stop_pos);
+    
     add_timer(timer);
 }
 
@@ -2883,10 +2932,12 @@ static void vh265_prot_init(void)
         WRITE_VREG(DEBUG_REG1, 0x0);
     }
     
-    if(debug&H265_DEBUG_USE_AUTO_SKIP)
-        WRITE_VREG(NAL_SEARCH_CTL, 0x0); //auto parser NAL and skip
-    else    
+    if(debug&H265_DEBUG_USE_MAN_SKIP)
         WRITE_VREG(NAL_SEARCH_CTL, 0x1); //manual parser NAL
+    else    
+        WRITE_VREG(NAL_SEARCH_CTL, 0x0); //auto parser NAL and skip
+        
+    WRITE_VREG(DECODE_STOP_POS, decode_stop_pos);
 
 }
 
@@ -3127,6 +3178,9 @@ MODULE_PARM_DESC(stat, "\n amvdec_h265 stat \n");
 module_param(debug, uint, 0664);
 MODULE_PARM_DESC(debug, "\n amvdec_h265 debug \n");
 
+module_param(decode_stop_pos, uint, 0664);
+MODULE_PARM_DESC(decode_stop_pos, "\n amvdec_h265 decode_stop_pos \n");
+
 module_init(amvdec_h265_driver_init_module);
 module_exit(amvdec_h265_driver_remove_module);
 
-- 
2.19.0

