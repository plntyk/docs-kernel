From 41b42355177640fa9af099226317d2bf06a2fb36 Mon Sep 17 00:00:00 2001
From: "zhenggang.luo" <zhenggang.luo@amlogic.com>
Date: Tue, 27 May 2014 10:11:23 +0800
Subject: [PATCH 4275/5965] PD #89864: part of modification for  suppport for
 muti_channel pcm  output

---
 arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c  | 11 +++++++
 arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c | 11 +++++++
 drivers/amlogic/audiodsp/audiodsp_module.c    | 10 +++++--
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_audio.c  |  2 +-
 sound/soc/aml/m8/aml_audio_hw.c               | 11 ++++---
 sound/soc/aml/m8/aml_i2s.c                    |  4 +--
 sound/soc/aml/m8/aml_i2s_dai.c                | 13 +++++++-
 sound/soc/aml/m8/aml_spdif_dai.c              | 30 +++++++++++--------
 sound/soc/codecs/aml_m8_codec.c               |  4 +--
 9 files changed, 72 insertions(+), 24 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
index 85f0847f6692..af49b2a05883 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
@@ -1560,6 +1560,11 @@ static void hdmi_hw_reset(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t *par
     tmp_add_data |= TX_INPUT_COLOR_DEPTH    << 0; // [1:0] input_color_depth:   0=24-b; 1=30-b; 2=36-b; 3=48-b.
     hdmi_wr_reg(TX_VIDEO_DTV_OPTION_L, tmp_add_data); // 0x50
 
+    if(hdmitx_device->cur_audio_param.channel_num > CC_2CH) {
+        i2s_to_spdif_flag = 0;
+    }else {
+        i2s_to_spdif_flag = 1;
+    }
     tmp_add_data  = 0;
     tmp_add_data |= 0                       << 4; // [7:4] Rsrv
     tmp_add_data |= TX_OUTPUT_COLOR_RANGE   << 2; // [3:2] output_color_range:  0=16-235/240; 1=16-240; 2=1-254; 3=0-255.
@@ -2128,6 +2133,11 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x30);     // reset audio master & sample
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
 
+    if(hdmitx_device->cur_audio_param.channel_num > CC_2CH) {
+        i2s_to_spdif_flag = 0;
+    }else{
+        i2s_to_spdif_flag = 1;
+    }
     if(!hdmi_audio_off_flag){
         hdmi_audio_init(i2s_to_spdif_flag);
     }
@@ -2280,6 +2290,7 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
             audio_N_para *= 4;
             break;
         case CT_DTS_HD:
+            audio_N_para *= 4;
             break;
         case CT_MAT:
             break;
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
index af331d391914..ac551566b321 100755
--- a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
@@ -1342,6 +1342,11 @@ static void hdmi_hw_reset(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t *par
     tmp_add_data |= TX_INPUT_COLOR_DEPTH    << 0; // [1:0] input_color_depth:   0=24-b; 1=30-b; 2=36-b; 3=48-b.
     hdmi_wr_reg(TX_VIDEO_DTV_OPTION_L, tmp_add_data); // 0x50
 
+    if(hdmitx_device->cur_audio_param.channel_num > CC_2CH) {
+        i2s_to_spdif_flag = 0;
+    }else{
+        i2s_to_spdif_flag = 1;
+    }
     tmp_add_data  = 0;
     tmp_add_data |= 0                       << 4; // [7:4] Rsrv
     tmp_add_data |= TX_OUTPUT_COLOR_RANGE   << 2; // [3:2] output_color_range:  0=16-235/240; 1=16-240; 2=1-254; 3=0-255.
@@ -1908,6 +1913,11 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x30);     // reset audio master & sample
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
 
+    if(hdmitx_device->cur_audio_param.channel_num > CC_2CH) {
+        i2s_to_spdif_flag = 0;
+    }else{
+        i2s_to_spdif_flag = 1;
+    }
     if(!hdmi_audio_off_flag){
         hdmi_audio_init(i2s_to_spdif_flag);
     }
@@ -2060,6 +2070,7 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
             audio_N_para *= 4;
             break;
         case CT_DTS_HD:
+            audio_N_para *= 4;
             break;
         case CT_MAT:
             break;
diff --git a/drivers/amlogic/audiodsp/audiodsp_module.c b/drivers/amlogic/audiodsp/audiodsp_module.c
index de568b2af478..84702042fb7b 100755
--- a/drivers/amlogic/audiodsp/audiodsp_module.c
+++ b/drivers/amlogic/audiodsp/audiodsp_module.c
@@ -785,12 +785,14 @@ static ssize_t digital_codec_show(struct class*cla, struct class_attribute* attr
 	"0-pcm",
     "1-old_dts",
     "2-dd",
-    "3-dtshd",
+    "3-dts",
     "4-dd+",
+    "5-dtshd"
+    "6-8chpcm"
   };
   char* pbuf = buf;
 
-  printk("IEC958_mode_codec/%d Digital codec type: %s\n",IEC958_mode_codec, codec_format[IEC958_mode_codec]);
+  //printk("IEC958_mode_codec/%d Digital codec type: %s\n",IEC958_mode_codec, codec_format[IEC958_mode_codec]);
   pbuf += sprintf(pbuf, "%d\n",IEC958_mode_codec);
   return (pbuf-buf);
 }
@@ -808,6 +810,10 @@ static ssize_t digital_codec_store(struct class* class, struct class_attribute*
       IEC958_mode_codec= 3;   //dts
   }else if(buf[0] == '4'){    
       IEC958_mode_codec=4;   //dd+
+  }else if(buf[0] == '5'){
+      IEC958_mode_codec=5;   //dtshd 
+  }else if(buf[0] == '6'){
+      IEC958_mode_codec=6;   //pcm 8Ch output
   }
   printk("IEC958_mode_codec=%d\n", IEC958_mode_codec);
   return count;
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_audio.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_audio.c
index 300f1fcd60a8..918b4652b94d 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_audio.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_audio.c
@@ -161,7 +161,7 @@ static void hdmi_tx_construct_aud_packet(Hdmi_tx_audio_para_t* audio_param, unsi
     else if(audio_param->type == CT_DTS_HD){
         hdmi_print(INF, AUD "Audio Type: DTS-HD\n");
         if(AUD_DB){
-            AUD_DB[0] = (CT_DTS_HD<<4)|(CC_REFER_TO_STREAM) ;
+            AUD_DB[0] = (FS_REFER_TO_STREAM<<4)|(CC_REFER_TO_STREAM) ;
             AUD_DB[1] = (FS_REFER_TO_STREAM<<2)|SS_REFER_TO_STREAM;
             AUD_DB[3] = 0; //CA, 2 channel
             AUD_DB[4] = 0;//DM_INH<<7|LSV<<3
diff --git a/sound/soc/aml/m8/aml_audio_hw.c b/sound/soc/aml/m8/aml_audio_hw.c
index 1e6ae5080c35..c5aae29b65a6 100755
--- a/sound/soc/aml/m8/aml_audio_hw.c
+++ b/sound/soc/aml/m8/aml_audio_hw.c
@@ -197,10 +197,13 @@ void audio_set_aiubuf(u32 addr, u32 size, unsigned int channel)
 {
     WRITE_MPEG_REG(AIU_MEM_I2S_START_PTR, addr & 0xffffffc0);
     WRITE_MPEG_REG(AIU_MEM_I2S_RD_PTR, addr & 0xffffffc0);
-    if(channel == 8)
-		WRITE_MPEG_REG(AIU_MEM_I2S_END_PTR, (addr & 0xffffffc0) + (size & 0xffffffc0) - 256); 
-	else
-    WRITE_MPEG_REG(AIU_MEM_I2S_END_PTR, (addr & 0xffffffc0) + (size & 0xffffffc0) - 64);   //this is for 16bit 2 channel
+    if(channel == 8){
+        WRITE_MPEG_REG_BITS(AIU_CLK_CTRL_MORE, 1, 6, 1);
+        WRITE_MPEG_REG(AIU_MEM_I2S_END_PTR, (addr & 0xffffffc0) + (size & 0xffffffc0) - 256); 
+    }else{
+        WRITE_MPEG_REG_BITS(AIU_CLK_CTRL_MORE, 0, 6, 1);
+        WRITE_MPEG_REG(AIU_MEM_I2S_END_PTR, (addr & 0xffffffc0) + (size & 0xffffffc0) - 64);   //this is for 16bit 2 channel
+    }
 
     WRITE_MPEG_REG(AIU_I2S_MISC,		0x0004);	// Hold I2S
 	WRITE_MPEG_REG(AIU_I2S_MUTE_SWAP,	0x0000);	// No mute, no swap
diff --git a/sound/soc/aml/m8/aml_i2s.c b/sound/soc/aml/m8/aml_i2s.c
index c125ef2671b2..3f042e33e9dd 100755
--- a/sound/soc/aml/m8/aml_i2s.c
+++ b/sound/soc/aml/m8/aml_i2s.c
@@ -129,7 +129,7 @@ static const struct snd_pcm_hardware aml_i2s_capture = {
 static char snd_i2s_tmp[32*1024];
 
 
-static unsigned int period_sizes[] = { 64, 128, 256, 512, 1024, 2048, 4096, 8192 };
+static unsigned int period_sizes[] = { 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768 };
 
 static struct snd_pcm_hw_constraint_list hw_constraints_period_sizes = {
 	.count = ARRAY_SIZE(period_sizes),
@@ -604,7 +604,7 @@ static int aml_i2s_copy_playback(struct snd_pcm_runtime *runtime, int channel,
           right += 8;
         }
 
-      }else if(runtime->format == SNDRV_PCM_FORMAT_S32_LE && I2S_MODE == AIU_I2S_MODE_PCM32){
+      }else if(runtime->format == SNDRV_PCM_FORMAT_S32_LE /*&& I2S_MODE == AIU_I2S_MODE_PCM32*/){
         int32_t *tfrom, *to, *left, *right;
         tfrom = (int32_t*)buf;
         to = (int32_t*) hwbuf;
diff --git a/sound/soc/aml/m8/aml_i2s_dai.c b/sound/soc/aml/m8/aml_i2s_dai.c
index cd4167cdf92d..6856b9f41f0f 100755
--- a/sound/soc/aml/m8/aml_i2s_dai.c
+++ b/sound/soc/aml/m8/aml_i2s_dai.c
@@ -94,13 +94,20 @@ static int aml_dai_i2s_startup(struct snd_pcm_substream *substream,
 out:
 	return ret;
 }
-
+extern void  aml_spdif_play();
 static void aml_dai_i2s_shutdown(struct snd_pcm_substream *substream,
 					struct snd_soc_dai *dai)
 {
 	ALSA_TRACE();
+    struct snd_pcm_runtime *runtime = substream->runtime;
+    if(runtime->channels == 8){
+        aml_spdif_play();
+    }
 }
 static int  set_clock = -1;
+#define AOUT_EVENT_IEC_60958_PCM 0x1
+extern int aout_notifier_call_chain(unsigned long val,void * v);
+
 static int aml_dai_i2s_prepare(struct snd_pcm_substream *substream,
 					struct snd_soc_dai *dai)
 {	
@@ -177,6 +184,10 @@ static int aml_dai_i2s_prepare(struct snd_pcm_substream *substream,
         s->device_type = AML_AUDIO_I2SOUT;
         aml_hw_i2s_init(runtime);
     }
+    if(runtime->channels == 8){
+        printk("[%s,%d]8ch PCM output->notify HDMI\n",__FUNCTION__,__LINE__);
+        aout_notifier_call_chain(AOUT_EVENT_IEC_60958_PCM,substream);
+    }
     return 0;
 }
 static int aml_dai_i2s_trigger(struct snd_pcm_substream *substream, int cmd,
diff --git a/sound/soc/aml/m8/aml_spdif_dai.c b/sound/soc/aml/m8/aml_spdif_dai.c
index 6a52ec64514f..3e9b63e3c1e4 100755
--- a/sound/soc/aml/m8/aml_spdif_dai.c
+++ b/sound/soc/aml/m8/aml_spdif_dai.c
@@ -43,7 +43,7 @@ extern int aout_notifier_call_chain(unsigned long val, void *v);
 //static  unsigned  playback_substream_handle = 0 ;
 extern unsigned int IEC958_mode_codec;
 static int iec958buf[32+16];
-static void  aml_spdif_play()
+void  aml_spdif_play()
 {
    	 _aiu_958_raw_setting_t set;
    	 _aiu_958_channel_status_t chstat;	 
@@ -255,9 +255,10 @@ static void aml_hw_iec958_init(struct snd_pcm_substream *substream)
 		//audio_set_i2s_mode(AIU_I2S_MODE_PCM16);
 		//audio_set_aiubuf(start, size);		
 	}else{
-		set.chan_stat->chstat0_l = 0x1902;
-                set.chan_stat->chstat0_r = 0x1902;
-		if(IEC958_mode_codec == 4){ //DD+
+
+        set.chan_stat->chstat0_l = 0x1902;
+        set.chan_stat->chstat0_r = 0x1902;
+        if(IEC958_mode_codec == 4 || IEC958_mode_codec == 5){ //DD+
 			if(runtime->rate == 32000){
 				set.chan_stat->chstat1_l = 0x300;
 				set.chan_stat->chstat1_r = 0x300;
@@ -292,9 +293,10 @@ static void aml_hw_iec958_init(struct snd_pcm_substream *substream)
 	}
 	ALSA_DEBUG("aiu 958 pcm buffer size %d \n",size);	
 	audio_set_958_mode(iec958_mode, &set);
-	if(IEC958_mode_codec == 4)  //dd+
+	if(IEC958_mode_codec == 4 || IEC958_mode_codec == 5){  //dd+
 		WRITE_MPEG_REG_BITS(AIU_CLK_CTRL, 0, 4, 2); // 4x than i2s
-	else
+        	printk("DEBUG--> IEC958_mode_codec/%d  4x than i2s\n",IEC958_mode_codec);
+	}else
 #if OVERCLOCK == 1 || IEC958_OVERCLOCK == 1	
 		WRITE_MPEG_REG_BITS(AIU_CLK_CTRL, 3, 4, 2);//512fs divide 4 == 128fs
 #else
@@ -308,8 +310,9 @@ static void aml_hw_iec958_init(struct snd_pcm_substream *substream)
         }
         else if(IEC958_mode_codec == 4){
                 aout_notifier_call_chain(AOUT_EVENT_RAWDATA_DOBLY_DIGITAL_PLUS,substream);
-        }
-        else{
+        }else if(IEC958_mode_codec == 5){
+		aout_notifier_call_chain(AOUT_EVENT_RAWDATA_DTS_HD,substream);
+        }else{
 	        aout_notifier_call_chain(AOUT_EVENT_IEC_60958_PCM,substream);
         }
 }
@@ -365,7 +368,8 @@ static int aml_dai_spdif_startup(struct snd_pcm_substream *substream,
 	return 0;
 out:
 	return ret;
-}
+}
+
 static void aml_dai_spdif_shutdown(struct snd_pcm_substream *substream,
 				struct snd_soc_dai *dai)
 {
@@ -375,9 +379,11 @@ static void aml_dai_spdif_shutdown(struct snd_pcm_substream *substream,
 		ALSA_TRACE();
 	if(substream->stream == SNDRV_PCM_STREAM_PLAYBACK){
 		memset((void*)runtime->dma_area,0,snd_pcm_lib_buffer_bytes(substream));
-		aml_spdif_play();
-
-
+        if(IEC958_mode_codec == 6){
+            printk("[%s %d]8chPCM output:disable aml_spdif_play()\n",__FUNCTION__,__LINE__);
+        }else{
+            aml_spdif_play();
+        }
 	//	audio_spdifout_pg_enable(0);	
 	}
 	
diff --git a/sound/soc/codecs/aml_m8_codec.c b/sound/soc/codecs/aml_m8_codec.c
index c168fe5b3240..f4f87e9a9c8f 100755
--- a/sound/soc/codecs/aml_m8_codec.c
+++ b/sound/soc/codecs/aml_m8_codec.c
@@ -283,14 +283,14 @@ static struct snd_soc_dai_ops aml_m8_codec_dai_ops = {
 #define AML_RATES SNDRV_PCM_RATE_8000_96000
 
 #define AML_FORMATS (SNDRV_PCM_FMTBIT_S16_LE | \
-	SNDRV_PCM_FMTBIT_S24_LE)
+	SNDRV_PCM_FMTBIT_S24_LE|SNDRV_PCM_FMTBIT_S32_LE)
 
 struct snd_soc_dai_driver aml_m8_codec_dai = {
 	.name = "AML-M8",
 	.playback = {
 		.stream_name = "Playback",
 		.channels_min = 1,
-		.channels_max = 2,
+		.channels_max = 8,
 		.rates = AML_RATES,
 		.formats = AML_FORMATS,},
 	.capture = {
-- 
2.19.0

