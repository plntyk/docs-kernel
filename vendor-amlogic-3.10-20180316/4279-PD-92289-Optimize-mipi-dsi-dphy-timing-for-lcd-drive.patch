From ad274dda0a79addd8bbb27539ca8b10b62ea4f8b Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Wed, 4 Jun 2014 11:38:38 +0800
Subject: [PATCH 4279/5965] PD#92289: Optimize mipi-dsi dphy timing for lcd
 driver

Squashed commit of the following:

commit f5d70929ed8c620c3e531dfbfb0d5ae9cd87d4f9
Author: Evoke Zhang <evoke.zhang@amlogic.com>
Date:   Mon May 26 14:54:30 2014 +0800

    PD92289: Optimize mipi-dsi dphy timing for lcd driver, add debug print

commit 44787f7afa889c4884dda39a78c9e78f08da4610
Author: Evoke Zhang <evoke.zhang@amlogic.com>
Date:   Mon May 26 10:49:07 2014 +0800

    PD#92289: Optimize mipi-dsi dphy timing for lcd driver
---
 drivers/amlogic/display/vout/lcdoutc.c       |   2 +-
 drivers/amlogic/display/vout/mipi_dsi_util.c | 136 +++++++++++++++----
 drivers/amlogic/display/vout/mipi_dsi_util.h |  38 ++++++
 3 files changed, 145 insertions(+), 31 deletions(-)

diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index f0ae79c64305..a20f8bca1842 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -78,7 +78,7 @@
 #elif (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B)
 #define DRV_TYPE "c8b"
 #endif
-#define DRIVER_DATE		"20140512"
+#define DRIVER_DATE		"20140522"
 
 //#define LCD_DEBUG_INFO
 #ifdef LCD_DEBUG_INFO
diff --git a/drivers/amlogic/display/vout/mipi_dsi_util.c b/drivers/amlogic/display/vout/mipi_dsi_util.c
index 76d647048903..afc3ec34876f 100755
--- a/drivers/amlogic/display/vout/mipi_dsi_util.c
+++ b/drivers/amlogic/display/vout/mipi_dsi_util.c
@@ -52,6 +52,7 @@ static const char *video_mode_type_table[] = {
     "un-support type",
 };
 
+static DSI_Phy_t dsi_phy_config;
 static DSI_Config_t *dsi_config = NULL;
 static unsigned char dsi_init_on_table[DSI_INIT_ON_MAX]={0xff,0xff};
 static unsigned char dsi_init_off_table[DSI_INIT_OFF_MAX]={0xff,0xff};
@@ -81,6 +82,7 @@ static inline void print_mipi_cmd_status(int cnt, unsigned status)
 static void print_info(void)
 {
     int i, j, n;
+    unsigned temp;
 
     if (dsi_config == NULL) {
         printk("dsi config is NULL\n");
@@ -114,6 +116,8 @@ static void print_info(void)
     //printk(" POLARITY:              HIGH ACTIVE\n");
     //printk(" Enable CRC/ECC/BTA\n");
 
+    temp = dsi_config->bit_rate / 8 / dsi_phy_config.lp_tesc;
+    printk("DSI LP escape clock:    %d.%03dMHz\n", (temp / 1000000), (temp % 1000000) / 1000);
     if (dsi_config->dsi_init_on) {
         printk("DSI INIT ON:\n");
         i = 0;
@@ -174,6 +178,38 @@ static void print_info(void)
     printk("================================================\n");
 }
 
+static void print_dphy_info(void)
+{
+    unsigned temp;
+
+    temp = ((1000000 * 100) / (dsi_config->bit_rate / 1000)) * 8;
+    printk("================================================\n");
+    printk("MIPI DSI DPHY timing (unit: ns)\n"
+        " UI:                  %d.%02d\n"
+        " LP LPX:              %d\n"
+        " LP TA_SURE:          %d\n"
+        " LP TA_GO:            %d\n"
+        " LP TA_GET:           %d\n"
+        " HS EXIT:             %d\n"
+        " HS TRAIL:            %d\n"
+        " HS ZERO:             %d\n"
+        " HS PREPARE:          %d\n"
+        " CLK TRAIL:           %d\n"
+        " CLK POST:            %d\n"
+        " CLK ZERO:            %d\n"
+        " CLK PREPARE:         %d\n"
+        " CLK PRE:             %d\n"
+        " INIT:                %d\n"
+        " WAKEUP:              %d\n",
+        (temp / 8 / 100), ((temp / 8) % 100),
+        (temp * dsi_phy_config.lp_lpx / 100), (temp * dsi_phy_config.lp_ta_sure / 100), (temp * dsi_phy_config.lp_ta_go / 100), 
+        (temp * dsi_phy_config.lp_ta_get / 100), (temp * dsi_phy_config.hs_exit / 100), (temp * dsi_phy_config.hs_trail / 100), 
+        (temp * dsi_phy_config.hs_zero / 100), (temp * dsi_phy_config.hs_prepare / 100), (temp * dsi_phy_config.clk_trail / 100), 
+        (temp * dsi_phy_config.clk_post / 100), (temp * dsi_phy_config.clk_zero / 100), (temp * dsi_phy_config.clk_prepare / 100),
+        (temp * dsi_phy_config.clk_pre / 100), (temp * dsi_phy_config.init / 100), (temp * dsi_phy_config.wakeup / 100));
+    printk("================================================\n");
+}
+
 // -----------------------------------------------------------------------------
 //                     Function: check_phy_st
 // Check the status of the dphy: phylock and stopstateclklane, to decide if the DPHY is ready
@@ -532,7 +568,53 @@ void dsi_write_cmd(unsigned char* payload)
     }
 }
 
-static void dsi_phy_init(unsigned char lane_num)
+static void set_dsi_phy_config(DSI_Phy_t *dphy, unsigned dsi_ui)
+{
+    unsigned t_lane_byte, t_ui;
+
+    t_ui = (1000000 * 100) / (dsi_ui / 1000); //0.01ns*100
+    t_lane_byte = t_ui * 8;
+
+    dphy->lp_tesc = ((DPHY_TIME_LP_TESC(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->lp_lpx = ((DPHY_TIME_LP_LPX(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->lp_ta_sure = ((DPHY_TIME_LP_TA_SURE(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->lp_ta_go = ((DPHY_TIME_LP_TA_GO(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->lp_ta_get = ((DPHY_TIME_LP_TA_GETX(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->hs_exit = ((DPHY_TIME_HS_EXIT(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->hs_trail = ((DPHY_TIME_HS_TRAIL(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->hs_prepare = ((DPHY_TIME_HS_PREPARE(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->hs_zero = ((DPHY_TIME_HS_ZERO(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->clk_trail = ((DPHY_TIME_CLK_TRAIL(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->clk_post = ((DPHY_TIME_CLK_POST(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->clk_prepare = ((DPHY_TIME_CLK_PREPARE(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->clk_zero = ((DPHY_TIME_CLK_ZERO(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->clk_pre = ((DPHY_TIME_CLK_PRE(t_ui) + t_lane_byte - 1) / t_lane_byte) & 0xff;
+    dphy->init = (DPHY_TIME_INIT(t_ui) + t_lane_byte - 1) / t_lane_byte;
+    dphy->wakeup = (DPHY_TIME_WAKEUP(t_ui) + t_lane_byte - 1) / t_lane_byte;
+
+    DPRINT("lp_tesc = 0x%02x\n"
+            "lp_lpx = 0x%02x\n"
+            "lp_ta_sure = 0x%02x\n"
+            "lp_ta_go = 0x%02x\n"
+            "lp_ta_get = 0x%02x\n"
+            "hs_exit = 0x%02x\n"
+            "hs_trail = 0x%02x\n"
+            "hs_zero = 0x%02x\n"
+            "hs_prepare = 0x%02x\n"
+            "clk_trail = 0x%02x\n"
+            "clk_post = 0x%02x\n"
+            "clk_zero = 0x%02x\n"
+            "clk_prepare = 0x%02x\n"
+            "clk_pre = 0x%02x\n"
+            "init = 0x%02x\n"
+            "wakeup = 0x%02x\n",
+            dphy->lp_tesc, dphy->lp_lpx, dphy->lp_ta_sure, dphy->lp_ta_go, dphy->lp_ta_get,
+            dphy->hs_exit, dphy->hs_trail, dphy->hs_zero, dphy->hs_prepare,
+            dphy->clk_trail, dphy->clk_post, dphy->clk_zero, dphy->clk_prepare, dphy->clk_pre,
+            dphy->init, dphy->wakeup);
+}
+
+static void dsi_phy_init(DSI_Phy_t *dphy, unsigned char lane_num)
 {
     // enable phy clock.
     WRITE_DSI_REG(MIPI_DSI_PHY_CTRL,  0x1);          //enable DSI top clock.
@@ -543,33 +625,18 @@ static void dsi_phy_init(unsigned char lane_num)
                     (0 << 10 ) |   //clock divider. 1: freq/4, 0: freq/2
                     (0 << 11 ) |   //1: select the mipi DDRCLKHS from clock divider, 0: from PLL clock
                     (0 << 12));    //enable the byte clock generateion.
-
-    WRITE_DSI_REG(MIPI_DSI_PHY_CTRL,  0x1 |          //enable DSI top clock.
-                    (1 << 7 )  |   //enable pll clock which connected to  DDR clock path
-                    (1 << 8 )  |   //enable the clock divider counter
-                    (1 << 9 )  |   //enable the divider clock out
-                    (0 << 10 ) |   //clock divider. 1: freq/4, 0: freq/2
-                    (0 << 11 ) |   //1: select the mipi DDRCLKHS from clock divider, 0: from PLL clock
-                    (0 << 12));    //enable the byte clock generateion.
-
-    WRITE_DSI_REG(MIPI_DSI_PHY_CTRL,  0x1 |          //enable DSI top clock.
-                    (1 << 7 )  |   //enable pll clock which connected to  DDR clock path
-                    (1 << 8 )  |   //enable the clock divider counter
-                    (1 << 9 )  |   //enable the divider clock out
-                    (0 << 10 ) |   //clock divider. 1: freq/4, 0: freq/2
-                    (0 << 11 ) |   //1: select the mipi DDRCLKHS from clock divider, 0: from PLL clock
-                    (1 << 12));    //enable the byte clock generateion.
-
+    WRITE_DSI_REG_BITS(MIPI_DSI_PHY_CTRL,  1, 9, 1); //enable the divider clock out
+    WRITE_DSI_REG_BITS(MIPI_DSI_PHY_CTRL,  1, 12, 1); //enable the byte clock generateion.
     WRITE_DSI_REG_BITS(MIPI_DSI_PHY_CTRL,  1, 31, 1);
     WRITE_DSI_REG_BITS(MIPI_DSI_PHY_CTRL,  0, 31, 1);
 
-    WRITE_DSI_REG(MIPI_DSI_CLK_TIM,  0x05210f08);//0x03211c08
-    WRITE_DSI_REG(MIPI_DSI_CLK_TIM1, 0x8);//??
-    WRITE_DSI_REG(MIPI_DSI_HS_TIM, 0x060f090d);//0x050f090d
-    WRITE_DSI_REG(MIPI_DSI_LP_TIM, 0x4a370e0e);
+    WRITE_DSI_REG(MIPI_DSI_CLK_TIM,  (dphy->clk_trail | (dphy->clk_post << 8) | (dphy->clk_zero << 16) | (dphy->clk_prepare << 24)));//0x05210f08);//0x03211c08
+    WRITE_DSI_REG(MIPI_DSI_CLK_TIM1, dphy->clk_pre);//??
+    WRITE_DSI_REG(MIPI_DSI_HS_TIM, (dphy->hs_exit | (dphy->hs_trail << 8) | (dphy->hs_zero << 16) | (dphy->hs_prepare << 24)));//0x050f090d
+    WRITE_DSI_REG(MIPI_DSI_LP_TIM, (dphy->lp_lpx | (dphy->lp_ta_sure << 8) | (dphy->lp_ta_go << 16) | (dphy->lp_ta_get << 24)));//0x4a370e0e
     WRITE_DSI_REG(MIPI_DSI_ANA_UP_TIM, 0x0100); //?? //some number to reduce sim time.
-    WRITE_DSI_REG(MIPI_DSI_INIT_TIM, 0x00d4); //0xe20   //30d4 -> d4 to reduce sim time.
-    WRITE_DSI_REG(MIPI_DSI_WAKEUP_TIM, 0x48); //0x8d40  //1E848-> 48 to reduct sim time.
+    WRITE_DSI_REG(MIPI_DSI_INIT_TIM, dphy->init); //0xe20   //30d4 -> d4 to reduce sim time.
+    WRITE_DSI_REG(MIPI_DSI_WAKEUP_TIM, dphy->wakeup); //0x8d40  //1E848-> 48 to reduct sim time.
     WRITE_DSI_REG(MIPI_DSI_LPOK_TIM,  0x7C);   //wait for the LP analog ready.
     WRITE_DSI_REG(MIPI_DSI_ULPS_CHECK,  0x927C);   //1/3 of the tWAKEUP.
     WRITE_DSI_REG(MIPI_DSI_LP_WCHDOG,  0x1000);   // phy TURN watch dog.
@@ -612,7 +679,7 @@ static void mipi_dsi_phy_config(Lcd_Config_t *pConf)
     WRITE_LCD_REG(MIPI_DSI_DWC_PHY_RSTZ_OS, 0xf);
 
     //Analog
-    dsi_phy_init(pConf->lcd_control.mipi_config->lane_num);
+    dsi_phy_init(&dsi_phy_config, pConf->lcd_control.mipi_config->lane_num);
 
     // Check the phylock/stopstateclklane to decide if the DPHY is ready
     check_phy_status();
@@ -799,7 +866,7 @@ static void set_mipi_dsi_host(int lane_num,                      // lane number,
     // -----------------------------------------------------
 
     // Inner clock divider settings
-    WRITE_LCD_REG( MIPI_DSI_DWC_CLKMGR_CFG_OS, (0x1 << BIT_TO_CLK_DIV) | (0x1e << BIT_TX_ESC_CLK_DIV) );
+    WRITE_LCD_REG( MIPI_DSI_DWC_CLKMGR_CFG_OS, (0x1 << BIT_TO_CLK_DIV) | (dsi_phy_config.lp_tesc << BIT_TX_ESC_CLK_DIV) );
     // Packet header settings
     WRITE_LCD_REG( MIPI_DSI_DWC_PCKHDL_CFG_OS, (1 << BIT_CRC_RX_EN) |
                         (1 << BIT_ECC_RX_EN) |
@@ -847,6 +914,7 @@ static void mipi_dsi_host_config(Lcd_Config_t *pConf)
 
 #ifdef PRINT_DEBUG_INFO
     print_info();
+    print_dphy_info();
 #endif
 
     DPRINT("Set mipi_dsi_host\n");
@@ -960,10 +1028,12 @@ void set_mipi_dsi_control_config(Lcd_Config_t *pConf)
         cfg->bit_rate_min *= 1000;
         cfg->bit_rate_max *= 1000;
     }
-    // if (cfg->bit_rate_max > MIPI_PHY_MAX_CLK_IN) {
-        // cfg->bit_rate_max = MIPI_PHY_MAX_CLK_IN;
-        // printk("mipi dsi bit_rate_max is out of support, adjust to %dMHz\n", (MIPI_PHY_MAX_CLK_IN / 1000));
-    // }
+    if (cfg->bit_rate_max < (PLL_VCO_MIN / od_table[OD_SEL_MAX-1])) {
+        printk("[error]: mipi-dsi can't support %dMHz bit_rate (min bit_rate=%dMHz)\n", (cfg->bit_rate_max / 1000), ((PLL_VCO_MIN / od_table[OD_SEL_MAX-1]) / 1000));
+    }
+    if (cfg->bit_rate_max > MIPI_PHY_MAX_CLK_IN) {
+        printk("[warning]: mipi-dsi bit_rate_max %dMHz is out of spec (%dMHz)\n", (cfg->bit_rate_max / 1000), (MIPI_PHY_MAX_CLK_IN / 1000));
+    }
 
     cfg->video_mode_type = MIPI_DSI_VIDEO_MODE_TYPE;
     if(pConf->lcd_basic.lcd_bits == 6){
@@ -1025,6 +1095,8 @@ void set_mipi_dsi_control_config_post(Lcd_Config_t *pConf)
     cfg->vbp = pConf->lcd_timing.vsync_bp - pConf->lcd_timing.vsync_width;
     cfg->vfp = pConf->lcd_basic.v_period - pConf->lcd_timing.vsync_bp - pConf->lcd_basic.v_active;
     cfg->vact = pConf->lcd_basic.v_active;
+
+    set_dsi_phy_config(&dsi_phy_config, cfg->bit_rate);
 }
 
 void set_mipi_dsi_control(Lcd_Config_t *pConf)
@@ -1062,6 +1134,7 @@ static const char * dsi_usage_str =
 "    echo read <addr> <reg_count> > debug ; read dsi phy reg value\n"
 "    echo write <addr> <value> > debug ; write dsi phy reg with value\n"
 "    echo info > debug ; print dsi config information\n"
+"    echo dphy > debug ; print dsi phy timing information\n"
 };
 
 static ssize_t dsi_debug_help(struct class *class, struct class_attribute *attr, char *buf)
@@ -1096,6 +1169,9 @@ static ssize_t dsi_debug(struct class *class, struct class_attribute *attr, cons
         case 'i':
             print_info();
             break;
+        case 'd':
+            print_dphy_info();
+            break;
         default:
             printk("wrong format of dsi debug command.\n");
             break;
diff --git a/drivers/amlogic/display/vout/mipi_dsi_util.h b/drivers/amlogic/display/vout/mipi_dsi_util.h
index d873bf68e9df..3788417988bd 100755
--- a/drivers/amlogic/display/vout/mipi_dsi_util.h
+++ b/drivers/amlogic/display/vout/mipi_dsi_util.h
@@ -383,6 +383,44 @@ typedef enum tv_enc_lcd_type_e{
 #define DCS_CMD_CODE_SET_TEAR_OFF         0xb
 #define DCS_CMD_CODE_SOFT_RESET           0xc
 
+//********************************************************************************
+//      DPHY timing parameter       Value (unit: 0.01ns)
+#define DPHY_TIME_LP_TESC(ui)       (250 * 100) //>100ns //4M
+#define DPHY_TIME_LP_LPX(ui)        (100 * 100) //>50ns
+#define DPHY_TIME_LP_TA_SURE(ui)    DPHY_TIME_LP_LPX(ui) //(lpx, 2*lpx)
+#define DPHY_TIME_LP_TA_GO(ui)      (4 * DPHY_TIME_LP_LPX(ui)) //4*lpx
+#define DPHY_TIME_LP_TA_GETX(ui)    (5 * DPHY_TIME_LP_LPX(ui)) //5*lpx
+#define DPHY_TIME_HS_EXIT(ui)       (120 * 100) //>100ns
+#define DPHY_TIME_HS_TRAIL(ui)      ((ui > (60 * 100 / 4)) ? (8 * ui) : ((60 * 100) + 4 * ui)) //max(8*ui, 60+4*ui) //(teot)<105+12*ui
+#define DPHY_TIME_HS_PREPARE(ui)    (50 * 100 + 4 * t_ui) //(40+4*ui, 85+6*ui)
+#define DPHY_TIME_HS_ZERO(ui)       (160 * 100 + 10 * ui - DPHY_TIME_HS_PREPARE(ui)) //hs_prepare+hs_zero >145+10*ui
+#define DPHY_TIME_CLK_TRAIL(ui)     (70 * 100) //>60ns //(teot)<105+12*ui
+#define DPHY_TIME_CLK_POST(ui)      (70 * 100 + 52 * ui) //>60+52*ui
+#define DPHY_TIME_CLK_PREPARE(ui)   (50 * 100) //(38, 95)
+#define DPHY_TIME_CLK_ZERO(ui)      (320 * 100 - DPHY_TIME_CLK_PREPARE(ui)) //clk_prepare+clk_zero > 300
+#define DPHY_TIME_CLK_PRE(ui)       (10 * ui) //>8*ui
+#define DPHY_TIME_INIT(ui)          (110 * 1000 * 100) //>100us
+#define DPHY_TIME_WAKEUP(ui)        (1020 * 1000 * 100) //>1ms
+typedef struct DSI_Phy_s{
+    unsigned int lp_tesc;
+    unsigned int lp_lpx;
+    unsigned int lp_ta_sure;
+    unsigned int lp_ta_go;
+    unsigned int lp_ta_get;
+    unsigned int hs_exit;
+    unsigned int hs_trail;
+    unsigned int hs_zero;
+    unsigned int hs_prepare;
+    unsigned int clk_trail;
+    unsigned int clk_post;
+    unsigned int clk_zero;
+    unsigned int clk_prepare;
+    unsigned int clk_pre;
+    unsigned int init;
+    unsigned int wakeup;
+}DSI_Phy_t;
+//********************************************************************************
+
 extern unsigned char *get_dsi_init_table(int flag);
 
 #define DSI_CMD_SIZE_MAX		2000
-- 
2.19.0

