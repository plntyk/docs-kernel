From 039478f0bcfa1b6c9cb5a3c40bb067143977c4a7 Mon Sep 17 00:00:00 2001
From: "tao.zeng" <tao.zeng@amlogic.com>
Date: Wed, 4 Jun 2014 13:47:17 +0800
Subject: [PATCH 4284/5965] PD #83628: PMU driver update for AML1218/AML1216,
 version 0.30

1. change charge target voltage to 4.2v in dts;
2. add OTP version check when open charger;
3. increase driver version to v0.3
---
 arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd  |  2 +-
 arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd  |  2 +-
 .../boot/dts/amlogic/meson8b_m101_512M.dtd    |  2 +-
 arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd |  2 +-
 drivers/amlogic/power/aml_pmu/aml1216-sply.c  | 47 +++++++++++++++++--
 drivers/amlogic/power/aml_pmu/aml1218-sply.c  | 40 ++++++++++++++--
 6 files changed, 84 insertions(+), 11 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
index 6b1b7463197b..fabdff2b4b2a 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
@@ -641,7 +641,7 @@ sdio{
         pmu_battery_cap = <3670>;           /** battery capacity                     */
         pmu_battery_technology = <4>;       /** POWER_SUPPLY_TECHNOLOGY_LiFe         */
         pmu_battery_name = "PTI PL336078";  /** battery name                         */
-        pmu_init_chgvol = <4050000>;        /** target charge voltage                */
+        pmu_init_chgvol = <4200000>;        /** target charge voltage                */
         pmu_init_chgend_rate = <10>;        /** set initial charing end current rate */
         pmu_init_chg_enabled = <1>;         /** set initial charing enabled          */
         pmu_init_adc_freq = <25>;           /** set initial adc frequency            */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
index bf7d72d13329..13e86eb991de 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
@@ -641,7 +641,7 @@ sdio{
         pmu_battery_cap = <3670>;           /** battery capacity                     */
         pmu_battery_technology = <4>;       /** POWER_SUPPLY_TECHNOLOGY_LiFe         */
         pmu_battery_name = "PTI PL336078";  /** battery name                         */
-        pmu_init_chgvol = <4050000>;        /** target charge voltage                */
+        pmu_init_chgvol = <4200000>;        /** target charge voltage                */
         pmu_init_chgend_rate = <10>;        /** set initial charing end current rate */
         pmu_init_chg_enabled = <0>;         /** set initial charing enabled          */
         pmu_init_adc_freq = <25>;           /** set initial adc frequency            */
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
index 761e1eb15d22..5489f20decc0 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
@@ -787,7 +787,7 @@ void root_func(){
         pmu_battery_cap = <2834>;           /** battery capacity                     */
         pmu_battery_technology = <4>;       /** POWER_SUPPLY_TECHNOLOGY_LiFe         */
         pmu_battery_name = "PTI PL336078";  /** battery name                         */
-        pmu_init_chgvol = <4050000>;        /** target charge voltage                */
+        pmu_init_chgvol = <4200000>;        /** target charge voltage                */
         pmu_init_chgend_rate = <20>;        /** set initial charing end current rate */
         pmu_init_chg_enabled = <1>;         /** set initial charing enabled          */
         pmu_init_adc_freq = <25>;           /** set initial adc frequency            */
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
index 41e042fe97b6..ebfe7d1ffb86 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
@@ -766,7 +766,7 @@ void root_func(){
         pmu_battery_cap = <3560>;           /** battery capacity                     */
         pmu_battery_technology = <4>;       /** POWER_SUPPLY_TECHNOLOGY_LiFe         */
         pmu_battery_name = "PTI PL336078";  /** battery name                         */
-        pmu_init_chgvol = <4050000>;        /** target charge voltage                */
+        pmu_init_chgvol = <4200000>;        /** target charge voltage                */
         pmu_init_chgend_rate = <20>;        /** set initial charing end current rate */
         pmu_init_chg_enabled = <1>;         /** set initial charing enabled          */
         pmu_init_adc_freq = <25>;           /** set initial adc frequency            */
diff --git a/drivers/amlogic/power/aml_pmu/aml1216-sply.c b/drivers/amlogic/power/aml_pmu/aml1216-sply.c
index 64e17a2df8a6..a27b589db6db 100755
--- a/drivers/amlogic/power/aml_pmu/aml1216-sply.c
+++ b/drivers/amlogic/power/aml_pmu/aml1216-sply.c
@@ -64,6 +64,8 @@ static int adc_sign_bit       = 0;
 #define BATTERY_CHARGING      1
 #define BATTERY_DISCHARGING   0
 
+static int pmu_init_chgvol = 0;
+static int ocv_voltage = 0;
 
 #ifdef CONFIG_AMLOGIC_USB
 struct work_struct          aml1216_otg_work;
@@ -321,8 +323,37 @@ int aml1216_get_vsys_voltage(void)
     return result;
 }
 
+int aml1216_get_otp_version()
+{
+    uint8_t val = 0; 
+    int  otp_version = 0;
+    aml1216_read(0x007e, &val);
+    otp_version = (val & 0x60) >> 5;
+    return otp_version;
+}
+
+int aml1216_set_full_charge_voltage(int voltage);
 int aml1216_set_charge_enable(int enable)
 {
+    uint8_t val = 0; 
+    uint8_t val_t = 0;
+    int otp_version = 0;
+    int charge_status = 0;
+    int ocv = 0;
+    otp_version = aml1216_get_otp_version();
+    if (otp_version == 0)
+    {   
+        aml1216_set_full_charge_voltage(4050000);
+        if (ocv_voltage > 4050)
+        {   
+            printk("%s, otp_version:%d, ocv = %d, do not open charger.\n", __func__, otp_version, ocv_voltage);
+            return aml1216_set_bits(0x0017, 0x00, 0x01);
+        }
+    }
+    else if(otp_version >= 1)
+    {
+        aml1216_set_full_charge_voltage(pmu_init_chgvol);
+    }
     return aml1216_set_bits(0x0017, ((enable & 0x01)), 0x01); 
 }
 EXPORT_SYMBOL_GPL(aml1216_set_charge_enable);
@@ -337,6 +368,7 @@ EXPORT_SYMBOL_GPL(aml1216_set_recharge_voltage);
 int aml1216_set_charging_current(int curr)
 {
     int idx_cur, idx_to, val = 0;
+    int rem;
 
     if (curr > 2100 * 1000 || curr < 0) {
         AML1216_DBG("%s, wrong input of charge current:%d\n", __func__, curr);
@@ -355,6 +387,10 @@ int aml1216_set_charging_current(int curr)
 #endif
 
     idx_to = (curr - 300) / 150;
+    rem = curr % 150;                       // round up
+    if (rem) {
+        idx_to += 1;    
+    }
     aml1216_read(0x012b, (unsigned char *)&val);
     AML1216_DBG("%s to %dmA, idx_to:%x, idx_cur:%x\n", __func__, idx_to * 150 + 300, idx_to, val);
     idx_cur = val & 0x0f;
@@ -535,12 +571,13 @@ int aml1216_first_init(struct aml1216_supply *supply)
      */
     if (aml1216_battery) {
         aml1216_set_charging_current   (aml1216_battery->pmu_init_chgcur);
-        aml1216_set_full_charge_voltage(aml1216_battery->pmu_init_chgvol);
+        //aml1216_set_full_charge_voltage(aml1216_battery->pmu_init_chgvol);
         aml1216_set_charge_end_rate    (aml1216_battery->pmu_init_chgend_rate);
         aml1216_set_trickle_time       (aml1216_battery->pmu_init_chg_pretime);
         aml1216_set_rapid_time         (aml1216_battery->pmu_init_chg_csttime);
         aml1216_set_recharge_voltage   ();
         aml1216_set_long_press_time    (aml1216_battery->pmu_pekoff_time);
+        pmu_init_chgvol = aml1216_battery->pmu_init_chgvol;
         vbat = aml1216_get_battery_voltage();
         vsys = aml1216_get_vsys_voltage();
         if ((vsys > vbat) && (vsys - vbat < 500)) {
@@ -1288,6 +1325,7 @@ static int aml1216_update_state(struct aml_charger *charger)
     charger->vbat = aml1216_get_battery_voltage();
     charger->ocv  = aml1216_cal_ocv(charger->ibat, charger->vbat, charger->charge_status);
 
+    ocv_voltage = charger->ocv;
     if (val & 0x40) {
         AML1216_DBG("%s, charge timeout, val:0x%02x, reset charger now\n", __func__, val);
         aml1216_set_charge_enable(0);
@@ -1386,8 +1424,8 @@ static void aml1216_earlysuspend(struct early_suspend *h)
     struct aml1216_supply *supply = (struct aml1216_supply *)h->param;
     if (aml1216_battery) {
         aml1216_set_charging_current(aml1216_battery->pmu_suspend_chgcur);
-        early_power_status = supply->aml_charger.ext_valid; 
     }
+    early_power_status = supply->aml_charger.ext_valid; 
     in_early_suspend = 1;
 }
 
@@ -1398,10 +1436,10 @@ static void aml1216_lateresume(struct early_suspend *h)
     schedule_work(&supply->work.work);                                      // update for upper layer 
     if (aml1216_battery) {
         aml1216_set_charging_current(aml1216_battery->pmu_resume_chgcur);
-        early_power_status = supply->aml_charger.ext_valid; 
         input_report_key(aml1216_power_key, KEY_POWER, 0);                  // cancel power key 
         input_sync(aml1216_power_key);
     }
+    early_power_status = supply->aml_charger.ext_valid; 
     in_early_suspend = 0;
     wake_unlock(&aml1216_lock);
 }
@@ -1451,7 +1489,7 @@ static int aml1216_battery_probe(struct platform_device *pdev)
     uint32_t tmp2;
 
 	AML1216_DBG("call %s in", __func__);
-	AML1216_DBG("AML_PMU driver version:0.10\n");
+	AML1216_DBG("AML_PMU driver version:0.30\n");
 
     g_aml1216_init = pdev->dev.platform_data;
     if (g_aml1216_init == NULL) {
@@ -1533,6 +1571,7 @@ static int aml1216_battery_probe(struct platform_device *pdev)
     charger->soft_limit_to99     = g_aml1216_init->soft_limit_to99;
     charger->coulomb_type        = COULOMB_BOTH; 
     supply->charge_timeout_retry = g_aml1216_init->charge_timeout_retry;
+    aml1216_update_state(charger);
 #ifdef CONFIG_AMLOGIC_USB
     INIT_WORK(&aml1216_otg_work, aml1216_otg_work_fun);
     if (aml1216_charger_job.flag) {     // do later job for usb charger detect
diff --git a/drivers/amlogic/power/aml_pmu/aml1218-sply.c b/drivers/amlogic/power/aml_pmu/aml1218-sply.c
index e172a67c8c57..787f21821dbd 100755
--- a/drivers/amlogic/power/aml_pmu/aml1218-sply.c
+++ b/drivers/amlogic/power/aml_pmu/aml1218-sply.c
@@ -64,6 +64,8 @@ static int adc_sign_bit       = 0;
 #define BATTERY_CHARGING      1
 #define BATTERY_DISCHARGING   0
 
+static int pmu_init_chgvol = 0;
+static int ocv_voltage = 0;
 
 #ifdef CONFIG_AMLOGIC_USB
 struct work_struct          aml1218_otg_work;
@@ -321,8 +323,37 @@ int aml1218_get_vsys_voltage(void)
     return result;
 }
 
+int aml1218_get_otp_version()
+{
+    uint8_t val = 0; 
+    int  otp_version = 0;
+    aml1218_read(0x007e, &val);
+    otp_version = (val & 0x60) >> 5;
+    return otp_version;
+}
+
+int aml1218_set_full_charge_voltage(int voltage);
 int aml1218_set_charge_enable(int enable)
 {
+    uint8_t val = 0; 
+    uint8_t val_t = 0;
+    int otp_version = 0;
+    int charge_status = 0;
+    int ocv = 0;
+    otp_version = aml1218_get_otp_version();
+    if (otp_version == 0)
+    {   
+        aml1218_set_full_charge_voltage(4050000);
+        if (ocv_voltage > 4050)
+        {   
+            printk("%s, otp_version:%d, ocv = %d, do not open charger.\n", __func__, otp_version, ocv_voltage);
+            return aml1218_set_bits(0x0017, 0x00, 0x01);
+        }
+    }
+    else if(otp_version >= 1)
+    {
+        aml1218_set_full_charge_voltage(pmu_init_chgvol);
+    }
     return aml1218_set_bits(0x0017, ((enable & 0x01)), 0x01); 
 }
 EXPORT_SYMBOL_GPL(aml1218_set_charge_enable);
@@ -539,12 +570,13 @@ int aml1218_first_init(struct aml1218_supply *supply)
      */
     if (aml1218_battery) {
         aml1218_set_charging_current   (aml1218_battery->pmu_init_chgcur);
-        aml1218_set_full_charge_voltage(aml1218_battery->pmu_init_chgvol);
+        //aml1218_set_full_charge_voltage(aml1218_battery->pmu_init_chgvol);
         aml1218_set_charge_end_rate    (aml1218_battery->pmu_init_chgend_rate);
         aml1218_set_trickle_time       (aml1218_battery->pmu_init_chg_pretime);
         aml1218_set_rapid_time         (aml1218_battery->pmu_init_chg_csttime);
         aml1218_set_recharge_voltage   ();
         aml1218_set_long_press_time    (aml1218_battery->pmu_pekoff_time);
+        pmu_init_chgvol = aml1218_battery->pmu_init_chgvol;
         vbat = aml1218_get_battery_voltage();
         vsys = aml1218_get_vsys_voltage();
         if ((vsys > vbat) && (vsys - vbat < 500)) {
@@ -1084,7 +1116,7 @@ int aml1218_dump_all_register(char *buf)
 {
     uint8_t val[16];
     int     i, size = 0;
-    int     addr_table[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 
+    int     addr_table[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 
                             17, 18, 19, 20, 21, 22, 23, 24, 34, 35, 36, 37};
 
     if (!buf) {
@@ -1284,6 +1316,7 @@ static int aml1218_update_state(struct aml_charger *charger)
     charger->vbat = aml1218_get_battery_voltage();
     charger->ocv  = aml1218_cal_ocv(charger->ibat, charger->vbat, charger->charge_status);
 
+    ocv_voltage = charger->ocv;
     if (chg_status & 0x00004000) {
         AML1218_DBG("%s, charge timeout happen, status:0x%08x, reset charger now\n", __func__, chg_status);
         aml1218_set_charge_enable(0);
@@ -1448,7 +1481,7 @@ static int aml1218_battery_probe(struct platform_device *pdev)
     uint32_t tmp2;
 
 	AML1218_DBG("call %s in", __func__);
-	AML1218_DBG("AML_PMU driver version:0.10\n");
+	AML1218_DBG("AML_PMU driver version:0.30\n");
     g_aml1218_init = pdev->dev.platform_data;
     if (g_aml1218_init == NULL) {
         AML1218_DBG("%s, NO platform data\n", __func__);
@@ -1529,6 +1562,7 @@ static int aml1218_battery_probe(struct platform_device *pdev)
     charger->soft_limit_to99     = g_aml1218_init->soft_limit_to99;
     charger->coulomb_type        = COULOMB_BOTH; 
     supply->charge_timeout_retry = g_aml1218_init->charge_timeout_retry;
+    aml1218_update_state(charger);
 #ifdef CONFIG_AMLOGIC_USB
     INIT_WORK(&aml1218_otg_work, aml1218_otg_work_fun);
     if (aml1218_charger_job.flag) {     // do later job for usb charger detect
-- 
2.19.0

