From 5a0c84155a6c4fe76bf689f2ce4d4b6feb9f3dee Mon Sep 17 00:00:00 2001
From: Rain Zhang-CA <rainzhang@wonton.(none)>
Date: Wed, 4 Jun 2014 17:14:55 -0700
Subject: [PATCH 4307/5965] PD#91889: h265, support search to I

---
 .../amlogic/amports/m8/ucode/h265/vh265_mc.c  | 699 +++++++++---------
 drivers/amlogic/amports/vh265.c               | 193 +++--
 2 files changed, 499 insertions(+), 393 deletions(-)

diff --git a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
index c82a44b420f2..bde33ae4ce11 100755
--- a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
@@ -20,24 +20,24 @@
  */
 
 #include <linux/types.h>
-//project_dos revision 2610
+//project_dos revision 2666
 const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x06810001,0x06800000,0x0d000001,0x07400040,0x0c000900,0x00000000,
-0x06bffe40,0x07c00000,0x06030400,0x00400000,0x0800c0ff,0x0c02d5c0,
+0x06bffe40,0x07c00000,0x06030400,0x00400000,0x0800c0ff,0x0c02da00,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x0c7ffd80,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
-0x00000000,0x00000000,0x0c7a1340,0x00000000,0x0c79bf80,0x06412108,
+0x00000000,0x00000000,0x0c7a1780,0x00000000,0x0c79c3c0,0x06412108,
 0x0c780580,0x00000000,0x0cc00000,0x00400000,0x0800c000,0x08002515,
 0x08002608,0x06bfbb80,0x06ffbfc0,0x06070500,0x06070600,0x06070700,
 0x06803fc0,0x07c00140,0x07c00780,0x07c01480,0x0640d000,0x07c033c0,
 0x0640d200,0x07c03340,0x0cc00000,0x00000000,0x06bfff88,0x06030408,
-0x00400000,0x0640c008,0x0a6181c8,0x00000000,0x0c02a7c0,0x00000000,
-0x0c79b300,0x0800c0ff,0x0aa0c048,0x0c781bc0,0x00000000,0x06410c08,
-0x08010e90,0x09326208,0x0aa0c808,0x0c79b0c0,0x0800c0fe,0x07803388,
+0x00400000,0x0640c008,0x0a6181c8,0x00000000,0x0c02ac00,0x00000000,
+0x0c79b740,0x0800c0ff,0x0aa0c048,0x0c781bc0,0x00000000,0x06410c08,
+0x08010e90,0x09326208,0x0aa0c808,0x0c79b500,0x0800c0fe,0x07803388,
 0x09808008,0x07c03388,0x06410c08,0x08010e90,0x09384288,0x09223248,
 0x07c00189,0x09201248,0x07c001c9,0x08010e90,0x07800148,0x0a805288,
-0x07c0010a,0x0aa0ffc8,0x0c022e40,0x05407308,0x0780010a,0x07c0014a,
+0x07c0010a,0x0aa0ffc8,0x0c023280,0x05407308,0x0780010a,0x07c0014a,
 0x06410c08,0x08010e88,0x09305248,0x07c00209,0x06410c08,0x08010e90,
 0x09210248,0x07c00249,0x06410c08,0x08010e90,0x09210248,0x07c00289,
 0x06410c08,0x08010e84,0x08010e90,0x08010e90,0x08010e8c,0x06410c08,
@@ -45,68 +45,68 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x06410c0a,0x08010e90,0x0aa2800b,0x093e124a,0x0aa08009,0x0c780000,
 0x093c124a,0x0aa08009,0x0c780000,0x0540228a,0x0c7ffe00,0x044012cb,
 0x06410c08,0x08010e81,0x093e1248,0x0780018b,0x0ae000cb,0x0a60c009,
-0x0680000a,0x0780018a,0x0ac0a2ca,0x00000000,0x0c01a100,0x0400c24a,
-0x0c01a080,0x0401024a,0x0c01a000,0x0401424a,0x0c7ffe00,0x0400128a,
+0x0680000a,0x0780018a,0x0ac0a2ca,0x00000000,0x0c01a540,0x0400c24a,
+0x0c01a4c0,0x0401024a,0x0c01a440,0x0401424a,0x0c7ffe00,0x0400128a,
 0x08010e86,0x06806008,0x06010e08,0x06410f08,0x0befc0c8,0x09118208,
 0x0aa08008,0x0c780000,0x06410c08,0x08010e81,0x093e1248,0x0aa40009,
 0x08010e90,0x08010e90,0x08010e90,0x08010e90,0x06410c08,0x08010e81,
-0x093e1248,0x0aa0c009,0x0c019a00,0x06800049,0x0c019980,0x06800049,
-0x0aa0c008,0x0c780000,0x00000000,0x08010e81,0x0c799700,0x0800c0ff,
+0x093e1248,0x0aa0c009,0x0c019e40,0x06800049,0x0c019dc0,0x06800049,
+0x0aa0c008,0x0c780000,0x00000000,0x08010e81,0x0c799b40,0x0800c0ff,
 0x0aa0c088,0x0c78a440,0x00000000,0x06410c08,0x08010e90,0x09326208,
-0x0aa0c848,0x0c7994c0,0x0800c0fe,0x07803388,0x09808048,0x07c03388,
+0x0aa0c848,0x0c799900,0x0800c0fe,0x07803388,0x09808048,0x07c03388,
 0x06410c08,0x08010e88,0x09384288,0x09323248,0x07c00609,0x09301248,
-0x07c00649,0x07800148,0x0a808288,0x07c0010a,0x0c0212c0,0x05407308,
-0x0780010a,0x07c0014a,0x0c021e40,0x0540730a,0x06410c08,0x08010e88,
+0x07c00649,0x07800148,0x0a808288,0x07c0010a,0x0c021700,0x05407308,
+0x0780010a,0x07c0014a,0x0c022280,0x0540730a,0x06410c08,0x08010e88,
 0x09305248,0x07c00689,0x06410c08,0x08010e90,0x09210248,0x07c006c9,
 0x06410c08,0x08010e90,0x09210248,0x07c00709,0x06410c08,0x08010e84,
 0x08010e90,0x08010e90,0x08010e8c,0x06410c08,0x08010e88,0x09308248,
 0x07c00749,0x0780060b,0x0aa3800b,0x00000000,0x06410c0a,0x08010e90,
 0x0aa2800b,0x093e124a,0x0aa08009,0x0c780000,0x093c124a,0x0aa08009,
-0x0c780000,0x0540228a,0x0c7ffe00,0x044012cb,0x0c018780,0x06800049,
-0x07800789,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c020d00,0x05407309,
-0x07800108,0x07c00788,0x0c018500,0x068007c9,0x0c018480,0x06800809,
-0x0c018400,0x06800849,0x07800808,0x07800849,0x09610209,0x06012308,
-0x06410c08,0x08010e81,0x093e1248,0x0aa24009,0x0c018180,0x06800049,
-0x0c018100,0x06800049,0x0c018080,0x06800049,0x0c018000,0x06800049,
-0x0c017f80,0x06800889,0x0c017f00,0x068008c9,0x0c017e80,0x06800909,
+0x0c780000,0x0540228a,0x0c7ffe00,0x044012cb,0x0c018bc0,0x06800049,
+0x07800789,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c021140,0x05407309,
+0x07800108,0x07c00788,0x0c018940,0x068007c9,0x0c0188c0,0x06800809,
+0x0c018840,0x06800849,0x07800808,0x07800849,0x09610209,0x06012308,
+0x06410c08,0x08010e81,0x093e1248,0x0aa24009,0x0c0185c0,0x06800049,
+0x0c018540,0x06800049,0x0c0184c0,0x06800049,0x0c018440,0x06800049,
+0x0c0183c0,0x06800889,0x0c018340,0x068008c9,0x0c0182c0,0x06800909,
 0x06410c08,0x08010e81,0x093e1248,0x0780060b,0x0ae000cb,0x0a60c009,
-0x0680000a,0x0780060a,0x0ac0a2ca,0x00000000,0x0c017b80,0x0402524a,
-0x0c017b00,0x0402924a,0x0c017a80,0x0402d24a,0x0c7ffe00,0x0400128a,
-0x0c017980,0x06800c49,0x07800c49,0x07c00cc9,0x0c017880,0x06800c89,
+0x0680000a,0x0780060a,0x0ac0a2ca,0x00000000,0x0c017fc0,0x0402524a,
+0x0c017f40,0x0402924a,0x0c017ec0,0x0402d24a,0x0c7ffe00,0x0400128a,
+0x0c017dc0,0x06800c49,0x07800c49,0x07c00cc9,0x0c017cc0,0x06800c89,
 0x07800c49,0x07800c88,0x02009209,0x07c00d09,0x07800d08,0x0a6300c8,
 0x07800809,0x0403f249,0x05806249,0x07c00dc9,0x07800849,0x0403f249,
-0x05806249,0x07c00e09,0x08040640,0x0c780900,0x06820160,0x0a630088,
+0x05806249,0x07c00e09,0x08040640,0x0c780900,0x068205a0,0x0a630088,
 0x07800809,0x0401f249,0x05805249,0x07c00dc9,0x07800849,0x0401f249,
-0x05805249,0x07c00e09,0x08040620,0x0c780600,0x068206e0,0x0a630048,
+0x05805249,0x07c00e09,0x08040620,0x0c780600,0x06820b20,0x0a630048,
 0x07800809,0x0400f249,0x05804249,0x07c00dc9,0x07800849,0x0400f249,
-0x05804249,0x07c00e09,0x08040610,0x0c780300,0x06820f20,0x07800809,
+0x05804249,0x07c00e09,0x08040610,0x0c780300,0x06821360,0x07800809,
 0x04007249,0x05803249,0x07c00dc9,0x07800849,0x04007249,0x05803249,
-0x07c00e09,0x08040608,0x06821a60,0x07800dc8,0x07800e09,0x0e000248,
+0x07c00e09,0x08040608,0x06821ea0,0x07800dc8,0x07800e09,0x0e000248,
 0x00000000,0x00000000,0x06800009,0x0f000200,0x04401208,0x0aa10008,
 0x05801208,0x0c7fff80,0x04001249,0x07c01409,0x07800809,0x0780084a,
 0x0960f24a,0x06040209,0x07800dc9,0x07800e0a,0x0960c24a,0x06040309,
-0x08040400,0x0c0165c0,0x06800049,0x07800049,0x07c00d49,0x0c0164c0,
-0x06800089,0x07800049,0x07800088,0x02009209,0x07c00d89,0x0c016340,
-0x06800e89,0x0c0162c0,0x06800ec9,0x06410c08,0x08010e81,0x093e1248,
+0x08040400,0x0c016a00,0x06800049,0x07800049,0x07c00d49,0x0c016900,
+0x06800089,0x07800049,0x07800088,0x02009209,0x07c00d89,0x0c016780,
+0x06800e89,0x0c016700,0x06800ec9,0x06410c08,0x08010e81,0x093e1248,
 0x0aa38009,0x07c00f09,0x06410c08,0x08010e81,0x093e1248,0x0aa0c009,
 0x0c0016c0,0x00000000,0x07800788,0x0aa0c008,0x068f000c,0x069f000c,
-0x0c01fec0,0x00000000,0x06410c08,0x08010e83,0x093e1248,0x07c00f49,
+0x0c020300,0x00000000,0x06410c08,0x08010e83,0x093e1248,0x07c00f49,
 0x093c1248,0x07c00f89,0x093a1248,0x0aa58009,0x06800009,0x06410c08,
 0x08010e88,0x09384248,0x04001249,0x07c01009,0x09304248,0x04001249,
-0x07c01049,0x0c0159c0,0x06801089,0x0c015940,0x068010c9,0x07801089,
+0x07c01049,0x0c015e00,0x06801089,0x0c015d80,0x068010c9,0x07801089,
 0x02008248,0x07c010c8,0x06410c08,0x08010e81,0x093e1248,0x07c01109,
-0x06800049,0x07c00fc9,0x0c015680,0x06801149,0x0680000e,0x0780114f,
+0x06800049,0x07c00fc9,0x0c015ac0,0x06801149,0x0680000e,0x0780114f,
 0x044013cf,0x0aa1000f,0x058013cf,0x0c7fff80,0x0400138e,0x07c0118e,
 0x0780114f,0x0680000e,0x0b4143ce,0x00000000,0x0480f20e,0x05404208,
 0x0680800d,0x0200d20d,0x0c002580,0x00000000,0x0480f20e,0x0aa1c3c8,
 0x00000000,0x0400120e,0x0b4043c8,0x00000000,0x0c780100,0x00000000,
 0x0c004600,0x00000000,0x0c7ffb80,0x0400138e,0x06410c08,0x08010e81,
-0x093e1248,0x07c011c9,0x0aa10009,0x0c014d40,0x06801209,0x0a600008,
+0x093e1248,0x07c011c9,0x0aa10009,0x0c015180,0x06801209,0x0a600008,
 0x06410c08,0x08010e83,0x093e1248,0x07c01249,0x093c1248,0x07c01289,
-0x093a1248,0x0aa0c009,0x0c004a80,0x00000000,0x08010e81,0x0c7948c0,
+0x093a1248,0x0aa0c009,0x0c004a80,0x00000000,0x08010e81,0x0c794d00,
 0x0800c0ff,0x068c8408,0x06c41508,0x06070508,0x06070608,0x06070708,
 0x0680000b,0x0680000a,0x06410c08,0x08010e81,0x093e1248,0x0aa08009,
-0x0c780f00,0x0c014640,0x06800049,0x0aa140cb,0x0400e3ca,0x0ba0c0ca,
+0x0c780f00,0x0c014a80,0x06800049,0x0aa140cb,0x0400e3ca,0x0ba0c0ca,
 0x0680038f,0x068003cf,0x0a60c00b,0x0c780180,0x0647050d,0x0a60c04b,
 0x0c7800c0,0x0647060d,0x0647070d,0x0aa38008,0x0400038f,0x0aa300cb,
 0x0680000e,0x0240f20a,0x0aa2410f,0x0920438d,0x0aa1c0cf,0x0918438d,
@@ -116,18 +116,18 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0968434e,0x0c780240,0x0940434e,0x0c7801c0,0x0948434e,0x0c780140,
 0x0950434e,0x0c7800c0,0x0958434e,0x0960434e,0x0aa1000b,0x0aa1404b,
 0x0c7809c0,0x0607070d,0x0c780940,0x0607050d,0x0c7808c0,0x0607060d,
-0x0ba2c08b,0x0680020c,0x0c0138c0,0x06800049,0x04008308,0x0aa0c08b,
+0x0ba2c08b,0x0680020c,0x0c013d00,0x06800049,0x04008308,0x0aa0c08b,
 0x0680f808,0x0680f988,0x02008288,0x06070208,0x0607040c,0x0aa1c00b,
 0x0680e008,0x0aa1404b,0x06800008,0x0aa0c08b,0x06806008,0x0680c008,
 0x0680040e,0x0aa1000b,0x0540424a,0x0680100e,0x0540624a,0x02008248,
-0x06070208,0x0680004d,0x0c0132c0,0x06800049,0x0200c20c,0x048ff30c,
+0x06070208,0x0680004d,0x0c013700,0x06800049,0x0200c20c,0x048ff30c,
 0x0607040c,0x0b8fb38d,0x0400134d,0x0ba0c0cb,0x06800149,0x06800049,
 0x0b40324a,0x0c7fe6c0,0x0400128a,0x0b60c0cb,0x0c7fe5c0,0x040012cb,
 0x0cc00000,0x00000000,0x0aa1400e,0x06800009,0x06410c08,0x08010e81,
 0x093e1248,0x0a608009,0x0c781540,0x07801149,0x0a40624e,0x0440144e,
-0x0c012a00,0x06800049,0x0c002500,0x02411211,0x0480f451,0x05404451,
+0x0c012e40,0x06800049,0x0c002500,0x02411211,0x0480f451,0x05404451,
 0x06808008,0x02011211,0x06800010,0x06800012,0x06410c08,0x08010e81,
-0x093e1288,0x0c0126c0,0x06800049,0x0aa1000a,0x040014c8,0x06800009,
+0x093e1288,0x0c012b00,0x06800049,0x0aa1000a,0x040014c8,0x06800009,
 0x024134c9,0x0b60c412,0x06a0000b,0x0700044b,0x04001451,0x04001492,
 0x0200c2d3,0x091e12cb,0x0900e30c,0x06410c08,0x08010e81,0x093e1288,
 0x095c130a,0x0a62000a,0x06410c08,0x08010e81,0x093e1288,0x0a61000a,
@@ -138,12 +138,12 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0241130d,0x07000451,0x0900e451,0x091a12d1,0x06900013,0x0aa0c00b,
 0x0200b453,0x0240b453,0x0b4072d2,0x0241130d,0x0400048b,0x0700044b,
 0x07000353,0x0740034b,0x07400453,0x0c7ffc00,0x0400130c,0x0c7ff8c0,
-0x04401410,0x0cc00000,0x00000000,0x0c0115c0,0x06800049,0x0c011540,
+0x04401410,0x0cc00000,0x00000000,0x0c011a00,0x06800049,0x0c011980,
 0x06800089,0x06800010,0x0680000a,0x0680000b,0x0780004c,0x0b41130b,
-0x0c011380,0x068000c9,0x0240a20a,0x0440128a,0x06410c08,0x08010e81,
+0x0c0117c0,0x068000c9,0x0240a20a,0x0440128a,0x06410c08,0x08010e81,
 0x093e1248,0x0900e20a,0x095c1209,0x07400348,0x0400134d,0x04001410,
 0x0bacc410,0x040012cb,0x0cc00000,0x00000000,0x0680000a,0x0680000b,
-0x0780008c,0x0b41130b,0x0c010e80,0x068000c9,0x0200a20a,0x0400128a,
+0x0780008c,0x0b41130b,0x0c0112c0,0x068000c9,0x0200a20a,0x0400128a,
 0x06410c08,0x08010e81,0x093e1248,0x0900e20a,0x095c1209,0x07400348,
 0x0400134d,0x04001410,0x0bacc410,0x040012cb,0x0cc00000,0x00000000,
 0x06a00008,0x07400348,0x0cc00000,0x00000000,0x0580424e,0x07c01449,
@@ -158,55 +158,55 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x093e1248,0x0aa08009,0x0c780000,0x06410c08,0x08010e81,0x093e1248,
 0x0aa08009,0x0c780000,0x06410c08,0x08010e81,0x093e1248,0x0aa08009,
 0x0c780000,0x06410c08,0x08010e81,0x093e1248,0x093c1248,0x093a1248,
-0x09381248,0x0aa24009,0x0c00f800,0x06801309,0x0c00f780,0x06801349,
-0x0c00f700,0x06801389,0x0c00f680,0x068013c9,0x06410c08,0x08010e81,
+0x09381248,0x0aa24009,0x0c00fc40,0x06801309,0x0c00fbc0,0x06801349,
+0x0c00fb40,0x06801389,0x0c00fac0,0x068013c9,0x06410c08,0x08010e81,
 0x093e1248,0x0aa08009,0x0c780000,0x06410c08,0x08010e81,0x093e1248,
 0x0aa08009,0x0c780000,0x0cc00000,0x00000000,0x0aa0c0c8,0x0c782f80,
-0x00000000,0x06410c08,0x08010e90,0x09326208,0x0aa0c888,0x0c78f040,
-0x0800c0fe,0x07803388,0x09808088,0x07c03388,0x0c00f000,0x06800049,
-0x07801489,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c018640,0x05407309,
-0x07800108,0x07c01488,0x0c00ed80,0x068014c9,0x0780078a,0x0a808288,
-0x07c00108,0x0c017340,0x0540730a,0x0780010a,0x07c0078a,0x0c017dc0,
+0x00000000,0x06410c08,0x08010e90,0x09326208,0x0aa0c888,0x0c78f480,
+0x0800c0fe,0x07803388,0x09808088,0x07c03388,0x0c00f440,0x06800049,
+0x07801489,0x0a805209,0x07c00108,0x0aa0ffc9,0x0c018a80,0x05407309,
+0x07800108,0x07c01488,0x0c00f1c0,0x068014c9,0x0780078a,0x0a808288,
+0x07c00108,0x0c017780,0x0540730a,0x0780010a,0x07c0078a,0x0c018200,
 0x0540730a,0x06410c08,0x08010e87,0x093e1248,0x07c01509,0x093c1248,
 0x07c01549,0x09363248,0x07c01589,0x09341248,0x07c015c9,0x09321248,
-0x07c01609,0x0c00e7c0,0x06801649,0x04001208,0x07c01648,0x0c00e6c0,
-0x06801689,0x04001208,0x07c01688,0x0c00e780,0x068016c9,0x0401a208,
+0x07c01609,0x0c00ec00,0x06801649,0x04001208,0x07c01648,0x0c00eb00,
+0x06801689,0x04001208,0x07c01688,0x0c00ebc0,0x068016c9,0x0401a208,
 0x07c016c8,0x06410c08,0x08010e83,0x093e1248,0x07c01709,0x093c1248,
-0x07c01749,0x093a1248,0x07c01789,0x0aa10009,0x06800008,0x0c00e240,
-0x068017c9,0x07c017c8,0x0c00e340,0x06801809,0x0c00e2c0,0x06801849,
+0x07c01749,0x093a1248,0x07c01789,0x0aa10009,0x06800008,0x0c00e680,
+0x068017c9,0x07c017c8,0x0c00e780,0x06801809,0x0c00e700,0x06801849,
 0x06410c08,0x08010e86,0x093e1248,0x07c01889,0x093c1248,0x07c018c9,
 0x093a1248,0x07c01909,0x09381248,0x07c01949,0x09361248,0x07c01989,
-0x09341248,0x07c01cc9,0x0aa0c009,0x0c0134c0,0x00000000,0x06800048,
-0x07c01c88,0x07801988,0x0a608008,0x0c780a80,0x0c00db00,0x06801a09,
-0x07800dc8,0x07c01a88,0x0c00da00,0x06801a49,0x07800e08,0x07c01b88,
-0x06410c08,0x08010e81,0x093e1248,0x07c019c9,0x0aa14009,0x0c013800,
+0x09341248,0x07c01cc9,0x0aa0c009,0x0c013900,0x00000000,0x06800048,
+0x07c01c88,0x07801988,0x0a608008,0x0c780a80,0x0c00df40,0x06801a09,
+0x07800dc8,0x07c01a88,0x0c00de40,0x06801a49,0x07800e08,0x07c01b88,
+0x06410c08,0x08010e81,0x093e1248,0x07c019c9,0x0aa14009,0x0c013c40,
 0x00000000,0x0c780580,0x00000000,0x07801a0b,0x0ae0010b,0x0680000a,
-0x0b4072ca,0x0c00d5c0,0x0406a24a,0x04001208,0x07400248,0x0c7ffec0,
-0x0400128a,0x07801a4b,0x0ae0010b,0x0680000a,0x0b4072ca,0x0c00d340,
+0x0b4072ca,0x0c00da00,0x0406a24a,0x04001208,0x07400248,0x0c7ffec0,
+0x0400128a,0x07801a4b,0x0ae0010b,0x0680000a,0x0b4072ca,0x0c00d780,
 0x0406e24a,0x04001208,0x07400248,0x0c7ffec0,0x0400128a,0x06410c08,
 0x08010e81,0x093e1248,0x07c01c89,0x06410c08,0x08010e82,0x093e1248,
 0x07c01d09,0x093c1248,0x0a618009,0x07c01d49,0x07c01d89,0x07c01dc9,
 0x0c780340,0x07c01e09,0x06410c08,0x08010e82,0x093e1248,0x07c01d49,
-0x093c1248,0x0a618009,0x07c01d89,0x0c00ce00,0x06801dc9,0x0c00cd80,
+0x093c1248,0x0a618009,0x07c01d89,0x0c00d240,0x06801dc9,0x0c00d1c0,
 0x06801e09,0x06410c08,0x08010e81,0x093e1248,0x0a628009,0x07800f08,
-0x0aa28008,0x078014c8,0x0aa0c008,0x068f000c,0x069f000c,0x0c017bc0,
+0x0aa28008,0x078014c8,0x0aa0c008,0x068f000c,0x069f000c,0x0c018000,
 0x00000000,0x0c7800c0,0x0c077ec0,0x00000000,0x06410c08,0x08010e81,
-0x093e1248,0x07c01e49,0x0c00c680,0x06801e89,0x04002208,0x07c01e88,
-0x06410c08,0x08010e81,0x093e1248,0x07c01ec9,0x08010e81,0x0c018200,
-0x00000000,0x0c78c2c0,0x0800c0ff,0x0aa0c108,0x0c786a00,0x00000000,
+0x093e1248,0x07c01e49,0x0c00cac0,0x06801e89,0x04002208,0x07c01e88,
+0x06410c08,0x08010e81,0x093e1248,0x07c01ec9,0x08010e81,0x0c018640,
+0x00000000,0x0c78c700,0x0800c0ff,0x0aa0c108,0x0c786e40,0x00000000,
 0x069fff89,0x0640d408,0x09010208,0x0a8fe248,0x00000000,0x06410c08,
-0x08010e90,0x09326208,0x0b210548,0x07c01f08,0x0c78bf00,0x0800c0fe,
+0x08010e90,0x09326208,0x0b210548,0x07c01f08,0x0c78c340,0x0800c0fe,
 0x06410c08,0x08010e81,0x093e1248,0x07c01f49,0x07801f08,0x0ba1c408,
 0x06800009,0x0ae14548,0x06800009,0x06410c08,0x08010e81,0x093e1248,
-0x07c01f89,0x0c00bc40,0x06800049,0x07801489,0x0a808248,0x07c00108,
-0x0c0152c0,0x05407309,0x07800108,0x07c01488,0x0c016500,0x05407308,
-0x078014c8,0x07800789,0x0a808248,0x07c00108,0x0c013f80,0x05407309,
-0x07800109,0x07c00789,0x0c014a00,0x05407309,0x07801f48,0x06800009,
+0x07c01f89,0x0c00c080,0x06800049,0x07801489,0x0a808248,0x07c00108,
+0x0c015700,0x05407309,0x07800108,0x07c01488,0x0c016940,0x05407308,
+0x078014c8,0x07800789,0x0a808248,0x07c00108,0x0c0143c0,0x05407309,
+0x07800109,0x07c00789,0x0c014e40,0x05407309,0x07801f48,0x06800009,
 0x0aa10008,0x07c02009,0x0c780440,0x07c01fc9,0x07801508,0x0aa14008,
 0x06800009,0x06410c08,0x08010e81,0x093e1248,0x07c02009,0x07801409,
 0x06410c08,0x0680080a,0x0240a24a,0x098091c9,0x06010e09,0x03808288,
-0x07c01fc8,0x07802008,0x0aa0c008,0x0c784a40,0x00000000,0x0c01aec0,
-0x00000000,0x07801588,0x0aa0c008,0x098081c8,0x06010e08,0x0c00af40,
+0x07c01fc8,0x07802008,0x0aa0c008,0x0c784a40,0x00000000,0x0c01b300,
+0x00000000,0x07801588,0x0aa0c008,0x098081c8,0x06010e08,0x0c00b380,
 0x06802049,0x07801548,0x0aa14008,0x06800049,0x06410c08,0x08010e81,
 0x093e1248,0x07c02089,0x07801f09,0x0aa084c9,0x0a610509,0x06800008,
 0x0c781600,0x07c020c8,0x06410c08,0x07800909,0x04004249,0x0680080a,
@@ -217,311 +217,324 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0480f211,0x05404208,0x06808009,0x02009209,0x0680400d,0x06800008,
 0x0700024a,0x0740034a,0x0400134d,0x04001208,0x0baf0408,0x04001249,
 0x078011c8,0x0a608008,0x0c7808c0,0x0780120a,0x0aa1400a,0x0680000b,
-0x0c00a000,0x06800049,0x040002c8,0x0c009f40,0x06800049,0x0200c20b,
+0x0c00a440,0x06800049,0x040002c8,0x0c00a380,0x06800049,0x0200c20b,
 0x0aa6400c,0x0ac052cc,0x07801208,0x0ba50048,0x0c780000,0x00000000,
 0x06410c08,0x07800909,0x04004249,0x0680080a,0x0240a24a,0x098091c9,
 0x06010e09,0x03808288,0x06410c08,0x08010e81,0x093e1248,0x06410c08,
-0x08010e81,0x093e1248,0x0aa0c009,0x0c009940,0x06800049,0x0c7ffa40,
-0x0440130c,0x0c018f40,0x00000000,0x07801248,0x0aa14008,0x06800009,
+0x08010e81,0x093e1248,0x0aa0c009,0x0c009d80,0x06800049,0x0c7ffa40,
+0x0440130c,0x0c019380,0x00000000,0x07801248,0x0aa14008,0x06800009,
 0x06410c08,0x08010e81,0x093e1248,0x07c02149,0x07800f88,0x0a610008,
 0x07c02188,0x0c780200,0x07c021c8,0x06410c08,0x08010e82,0x093e1248,
 0x07c02189,0x093c1248,0x07c021c9,0x0780204b,0x0a60c08b,0x0c781700,
 0x00000000,0x0641170a,0x06410c08,0x08010e81,0x093e1248,0x0a628009,
 0x07801649,0x09546289,0x07c02209,0x0a60c00b,0x06800009,0x07801689,
-0x09606289,0x0c7803c0,0x07c02249,0x0c008ec0,0x06802209,0x07802209,
-0x04001249,0x09546289,0x07c02209,0x0aa1c04b,0x0c008d00,0x06802249,
+0x09606289,0x0c7803c0,0x07c02249,0x0c009300,0x06802209,0x07802209,
+0x04001249,0x09546289,0x07c02209,0x0aa1c04b,0x0c009140,0x06802249,
 0x07802249,0x04001249,0x09606289,0x07c02249,0x0601170a,0x06800009,
-0x07c02989,0x07801e49,0x0aa14009,0x07802949,0x0b20c049,0x0c018b40,
+0x07c02989,0x07801e49,0x0aa14009,0x07802949,0x0b20c049,0x0c018f80,
 0x00000000,0x0a61400b,0x06800009,0x06410c08,0x08010e81,0x093e1248,
 0x0641170a,0x096c1289,0x0601170a,0x07c02289,0x07801609,0x0aa14009,
 0x06800009,0x06410c08,0x08010e81,0x093e1248,0x07c022c9,0x06411008,
 0x09581209,0x06011008,0x07802149,0x0aa48009,0x0a61400b,0x06800049,
 0x06410c08,0x08010e81,0x093e1248,0x07c02309,0x0aa1808b,0x0aa0c009,
 0x06802249,0x06802209,0x07000249,0x0ae10049,0x06800009,0x0c780100,
-0x07c02349,0x0c008040,0x06802349,0x0aa0c04b,0x078018c9,0x07801909,
-0x06047b09,0x08047c00,0x0aa10009,0x08047d00,0x0c0067c0,0x00000000,
-0x0c007d80,0x06802389,0x06800149,0x02409209,0x06411708,0x096e3209,
-0x06011708,0x0c007d80,0x068023c9,0x078016c8,0x079023c9,0x02008248,
+0x07c02349,0x0c008480,0x06802349,0x0aa0c04b,0x078018c9,0x07801909,
+0x06047b09,0x08047c00,0x0aa10009,0x08047d00,0x0c006c00,0x00000000,
+0x0c0081c0,0x06802389,0x06800149,0x02409209,0x06411708,0x096e3209,
+0x06011708,0x0c0081c0,0x068023c9,0x078016c8,0x079023c9,0x02008248,
 0x07c02408,0x07802049,0x09446248,0x078021c8,0x09501248,0x07802188,
 0x09521248,0x07800cc8,0x09542248,0x07800d08,0x09582248,0x07800d48,
 0x095c2248,0x07800d88,0x09602248,0x07801808,0x09647248,0x07801848,
 0x09727248,0x06011109,0x06411009,0x09809389,0x06011009,0x07801888,
-0x0aa3c008,0x0c007600,0x06802449,0x0c007580,0x06802489,0x06411109,
+0x0aa3c008,0x0c007a40,0x06802449,0x0c0079c0,0x06802489,0x06411109,
 0x07801808,0x0780244a,0x02008288,0x09647248,0x07801848,0x0780248a,
 0x02008288,0x09727248,0x06011109,0x07801d48,0x0aa14008,0x06800009,
 0x06410c08,0x08010e81,0x093e1248,0x07c024c9,0x0a620009,0x07801d89,
 0x07c02509,0x07801dc9,0x07c02549,0x07801e09,0x0c7802c0,0x07c02589,
-0x06410c08,0x08010e81,0x093e1248,0x0a618009,0x07c02509,0x0c006d80,
-0x06802549,0x0c006d00,0x06802589,0x07801d08,0x0aa34008,0x06800009,
+0x06410c08,0x08010e81,0x093e1248,0x0a618009,0x07c02509,0x0c0071c0,
+0x06802549,0x0c007140,0x06802589,0x07801d08,0x0aa34008,0x06800009,
 0x07802188,0x0a61c008,0x078021c8,0x0a614008,0x07802508,0x0aa0c008,
 0x0c780140,0x06800009,0x06410c08,0x08010e81,0x093e1248,0x07c025c9,
-0x07801988,0x0a610008,0x07801cc8,0x0a608008,0x0c780440,0x0c0065c0,
-0x06802609,0x0780260b,0x0aa3400b,0x0c0064c0,0x06800049,0x04001308,
+0x07801988,0x0a610008,0x07801cc8,0x0a608008,0x0c780440,0x0c006a00,
+0x06802609,0x0780260b,0x0aa3400b,0x0c006900,0x06800049,0x04001308,
 0x0680080a,0x0240a30a,0x0980c1cc,0x06410c08,0x06010e0c,0x03808288,
-0x07c00048,0x0aef004b,0x044012cb,0x07801ec8,0x0aa20008,0x0c006140,
+0x07c00048,0x0aef004b,0x044012cb,0x07801ec8,0x0aa20008,0x0c006580,
 0x06800049,0x0aa14008,0x00000000,0x08010e88,0x0c7fff40,0x04401208,
 0x0640ce09,0x0a238089,0x06420408,0x0a2fc048,0x00000000,0x09c08748,
 0x06020408,0x06460108,0x0a216008,0x00000000,0x06460408,0x0a2fc048,
 0x00000000,0x06460408,0x06060408,0x069fffc9,0x0640d408,0x09010208,
-0x0a8fe248,0x00000000,0x0800c008,0x08007401,0x0c012b80,0x00000000,
-0x0c785880,0x00000000,0x0aa0c148,0x0c784140,0x00000000,0x08010e81,
-0x06812008,0x06010e08,0x00000000,0x08010e00,0x07802008,0x0a60c008,
-0x06800008,0x07c02648,0x07801f48,0x0aa58008,0x06800008,0x07c02888,
-0x07c028c8,0x07c00e48,0x07c02688,0x07c026c8,0x07c02708,0x07c02748,
-0x07801989,0x0aa0c009,0x07800dc8,0x07801a88,0x07c02788,0x07c02808,
-0x0aa0c009,0x07800e08,0x07801b88,0x07c027c8,0x07c02848,0x0c780180,
-0x068001df,0x07801fc8,0x07800e49,0x0a802248,0x0c780000,0x07802008,
-0x0a61c008,0x00000000,0x068001df,0x07802889,0x078028c8,0x09508248,
-0x07c02a09,0x07802889,0x0a614049,0x07801cc9,0x0aa0c009,0x00000000,
-0x0981f15f,0x07802889,0x078028c8,0x0958c248,0x0978425f,0x06011609,
-0x0c0004c0,0x00000000,0x07800e48,0x09808788,0x098087c8,0x06012408,
-0x07800e48,0x06800427,0x0c016e40,0x04000a08,0x0640d409,0x09010249,
-0x0aa0c009,0x0a8fd209,0x00000000,0x06a00008,0x06011408,0x0c785f00,
-0x00000000,0x07802789,0x07c029c9,0x078028c9,0x0780274a,0x0a40b289,
-0x0680000c,0x0780288b,0x0780270a,0x0a40728b,0x0680000c,0x0a614009,
-0x0680008c,0x0a60c00a,0x0680008c,0x068000cc,0x07802008,0x09441308,
-0x06460109,0x094a324c,0x06060109,0x06420109,0x0944324c,0x07802048,
-0x09402248,0x07800d08,0x04003208,0x09604248,0x07800cc8,0x04003208,
-0x09684248,0x06020109,0x07800808,0x07800849,0x09610209,0x06020508,
-0x07802708,0x07802749,0x09610209,0x06020708,0x06060708,0x07802808,
-0x07802849,0x09610209,0x06020808,0x06060808,0x07800dc8,0x04401208,
-0x07800e09,0x04401249,0x09610209,0x06020608,0x06800048,0x0541f208,
-0x06020408,0x06450a08,0x09005208,0x0a6f8008,0x06800008,0x07801989,
-0x0a60c009,0x06f00008,0x06d00008,0x06050a08,0x07802708,0x07802749,
-0x0960a209,0x07801989,0x097e1209,0x06050608,0x0780280a,0x07802849,
-0x0960a289,0x0605070a,0x09c087c8,0x0780288a,0x078028c9,0x0960a289,
-0x0a403288,0x00000000,0x098087c8,0x06050808,0x078028c9,0x0780274a,
-0x0a404289,0x07802889,0x0780270a,0x0a802289,0x0c780740,0x0640c908,
-0x0e000248,0x0640ca0a,0x00000000,0x0f000240,0x0200a24a,0x0606110a,
-0x0606150a,0x0606140a,0x04020208,0x078028c9,0x0e000248,0x0640cc0a,
-0x0640cb0c,0x0f000340,0x07802688,0x0e000308,0x0200b34a,0x0402028b,
-0x00000000,0x0f000240,0x0200a24a,0x0606120a,0x0606160a,0x02409309,
-0x0200b24b,0x0606130b,0x0606170b,0x06460408,0x06060408,0x06800048,
-0x0541f208,0x06060408,0x07801988,0x06040508,0x07802808,0x07802849,
-0x09610209,0x06040308,0x07802708,0x07802749,0x09610209,0x06040408,
-0x07802008,0x0a638008,0x06804808,0x06043008,0x06443108,0x0900a248,
-0x0a6f0009,0x091e5248,0x0a6e8009,0x00000000,0x06440008,0x09808008,
-0x06040008,0x09c08008,0x06040008,0x08040701,0x07802008,0x0aa4c008,
-0x07802888,0x0a614008,0x07801cc9,0x0aa0c009,0x0c007c40,0x00000000,
-0x06411009,0x091c1249,0x0a6f8009,0x00000000,0x06411009,0x098093c9,
-0x06011009,0x06411009,0x091e1249,0x0a6f8009,0x0cc00000,0x00000000,
-0x06411009,0x091c1249,0x0a6f8009,0x00000000,0x07800dc9,0x0ae0c049,
-0x0c0074c0,0x00000000,0x06411009,0x098093c9,0x06011009,0x08011c00,
-0x08011e00,0x06411009,0x091e1249,0x0a6f8009,0x0cc00000,0x00000000,
-0x0a60fc08,0x00000000,0x08010e90,0x0c7815c0,0x0800c0ff,0x078007cb,
-0x0c001600,0x06800049,0x06047e08,0x0aa1000b,0x0c0016c0,0x06800049,
-0x06047f08,0x08048000,0x0c0002c0,0x0780220a,0x06047c0c,0x0780204a,
-0x0a61400a,0x08048020,0x0c000140,0x0780224a,0x06047d0c,0x0cc00000,
-0x00000000,0x0400034a,0x06410c0e,0x0980d1cd,0x06010e0d,0x0680000c,
-0x0400034a,0x0aa1c00d,0x093e13ce,0x0580130c,0x097e130f,0x0540138e,
-0x0c7ffec0,0x0440134d,0x0680040d,0x0240d28d,0x0380c34c,0x0aa4000b,
-0x0400034a,0x06410c0e,0x0980d1cd,0x06010e0d,0x0400034a,0x0aa1c00d,
-0x093e13ce,0x0580130c,0x097e130f,0x0540138e,0x0c7ffec0,0x0440134d,
-0x0680040d,0x0240d28d,0x0380c34c,0x0400034c,0x0ae0c00a,0x0cc00000,
-0x00000000,0x0680000e,0x0680000f,0x0900140d,0x0aa1c010,0x0c000900,
-0x06800049,0x09408388,0x0c000840,0x06800049,0x094083c8,0x0920140d,
-0x0aa34010,0x0c000700,0x06800049,0x09508388,0x0c000640,0x06800049,
-0x0950a3c8,0x0c000580,0x06800049,0x09608388,0x0c0004c0,0x06800049,
-0x0964a3c8,0x0604810e,0x0604810f,0x0580134d,0x0c7ff880,0x0440128a,
-0x00800000,0x07800008,0x0c7e4580,0x06030408,0x06806008,0x06010e08,
-0x06410f08,0x0befc0c8,0x09118208,0x0cc00000,0x07400248,0x0680e008,
-0x06010e08,0x06410f08,0x0befc0c8,0x09118208,0x0cc00000,0x07400248,
-0x06410509,0x06bfff89,0x06030409,0x00400000,0x0be0c108,0x0c7ffa40,
-0x00000000,0x08012104,0x07800dc9,0x0ae0c049,0x06411c22,0x04000862,
-0x0a26891f,0x06011c21,0x0a21481f,0x0c005300,0x00000000,0x0a25411f,
-0x09c1f15f,0x07801cc9,0x0aa48009,0x08011e00,0x0be42022,0x06a907c9,
-0x06012b09,0x00000000,0x00000000,0x06412b09,0x0c005240,0x00000000,
-0x06411009,0x098093c9,0x06011009,0x06411009,0x091e1249,0x0a6f8009,
-0x0c780840,0x00000000,0x0a27e022,0x06a907c9,0x06012b09,0x00000000,
-0x00000000,0x06412b09,0x0c00fd40,0x00000000,0x06411609,0x093e1249,
-0x0aa4c009,0x06800008,0x07c02648,0x06411109,0x07802408,0x09446248,
-0x06011109,0x06411009,0x09809389,0x06011009,0x06411e08,0x0be22008,
-0x068001df,0x0c07a780,0x0978479f,0x06420409,0x09c09749,0x0c780100,
-0x06020409,0x0c7feac0,0x0800c0ff,0x0601161e,0x07800e48,0x09808788,
-0x098087c8,0x06012408,0x07800e48,0x06800427,0x0c010f40,0x04000a08,
-0x0640d409,0x09010249,0x0aa0c009,0x0a8fd209,0x00000000,0x06a00008,
-0x06011408,0x07801988,0x0aa0c008,0x0c00f400,0x00000000,0x09c1f09f,
-0x07800e48,0x04001208,0x07c00e48,0x07802648,0x04001208,0x07c02648,
-0x0a21409f,0x07802809,0x0b803248,0x00000000,0x09c1f05f,0x07802888,
-0x0a618048,0x04001208,0x07801cc9,0x0aa0c009,0x00000000,0x0981f15f,
-0x07802789,0x0b815248,0x07c02888,0x07802708,0x07c02888,0x0981f09f,
-0x07800e48,0x07800dc9,0x02008248,0x07802809,0x02408248,0x07c00e48,
-0x078028c8,0x04001208,0x078027c9,0x0b807248,0x07c028c8,0x07801988,
-0x0aa0c008,0x0c7806c0,0x00000000,0x0981f0df,0x078028c8,0x04001208,
-0x078027c9,0x0b80f248,0x07802888,0x04001208,0x07802789,0x0b80b248,
-0x07800dc9,0x0b807248,0x078028c8,0x04001208,0x07800e09,0x0b803248,
-0x0c7800c0,0x09c1f11f,0x0981f11f,0x0981f0df,0x0780289e,0x078028c8,
-0x0958c788,0x0978479f,0x0cb80020,0x00000000,0x06800048,0x07c02008,
-0x07802688,0x07801a0c,0x0b41a308,0x06801a89,0x02009209,0x0700024a,
-0x0780270b,0x0200b28b,0x07c0270b,0x07c0288b,0x0780274b,0x07c028cb,
-0x04001208,0x0b808308,0x07c02688,0x07800dc9,0x07c02789,0x0780270a,
-0x02409289,0x0c780ac0,0x07c02809,0x04001249,0x0700024a,0x07c0280a,
-0x0780278b,0x0200b28b,0x0c780900,0x07c0278b,0x078026c8,0x07801a4c,
-0x0b802308,0x0c7ff600,0x06800008,0x07c02688,0x07c02888,0x07c02708,
-0x07801a89,0x07c02809,0x07c02789,0x078026c8,0x06801b89,0x02009209,
-0x0700024a,0x0780274b,0x0200b28b,0x07c0274b,0x07c028cb,0x04001208,
-0x0b808308,0x07c026c8,0x07800e09,0x07c027c9,0x0780274a,0x02409289,
-0x0c780200,0x07c02849,0x04001249,0x0700024a,0x07c0284a,0x078027cb,
-0x0200b28b,0x07c027cb,0x07802748,0x07800dc9,0x0e000248,0x00000000,
-0x00000000,0x07802709,0x0f000200,0x02008248,0x07c00e48,0x0c7fe780,
-0x04c177df,0x07802889,0x0780270a,0x0400228a,0x0b407289,0x04402209,
+0x0a8fe248,0x00000000,0x0640d208,0x0a240208,0x07803388,0x0be30208,
+0x07801fc9,0x0a60c009,0x07802049,0x0aa20089,0x0640d209,0x0928c209,
+0x04001208,0x0968c248,0x0600d209,0x0c785a80,0x0800c0ff,0x098080c8,
+0x07c03388,0x0800c008,0x08007401,0x0c012b80,0x00000000,0x0c785880,
+0x00000000,0x0aa0c148,0x0c784140,0x00000000,0x08010e81,0x06812008,
+0x06010e08,0x00000000,0x08010e00,0x07802008,0x0a60c008,0x06800008,
+0x07c02648,0x07801f48,0x0aa58008,0x06800008,0x07c02888,0x07c028c8,
+0x07c00e48,0x07c02688,0x07c026c8,0x07c02708,0x07c02748,0x07801989,
+0x0aa0c009,0x07800dc8,0x07801a88,0x07c02788,0x07c02808,0x0aa0c009,
+0x07800e08,0x07801b88,0x07c027c8,0x07c02848,0x0c780180,0x068001df,
+0x07801fc8,0x07800e49,0x0a802248,0x0c780000,0x07802008,0x0a61c008,
+0x00000000,0x068001df,0x07802889,0x078028c8,0x09508248,0x07c02a09,
+0x07802889,0x0a614049,0x07801cc9,0x0aa0c009,0x00000000,0x0981f15f,
+0x07802889,0x078028c8,0x0958c248,0x0978425f,0x06011609,0x0c0004c0,
+0x00000000,0x07800e48,0x09808788,0x098087c8,0x06012408,0x07800e48,
+0x06800427,0x0c0170c0,0x04000a08,0x0640d409,0x09010249,0x0aa0c009,
+0x0a8fd209,0x00000000,0x06a00008,0x06011408,0x0c785f00,0x00000000,
+0x07802789,0x07c029c9,0x078028c9,0x0780274a,0x0a40b289,0x0680000c,
+0x0780288b,0x0780270a,0x0a40728b,0x0680000c,0x0a614009,0x0680008c,
+0x0a60c00a,0x0680008c,0x068000cc,0x07802008,0x09441308,0x06460109,
+0x094a324c,0x06060109,0x06420109,0x0944324c,0x07802048,0x09402248,
+0x07800d08,0x04003208,0x09604248,0x07800cc8,0x04003208,0x09684248,
+0x06020109,0x07800808,0x07800849,0x09610209,0x06020508,0x07802708,
+0x07802749,0x09610209,0x06020708,0x06060708,0x07802808,0x07802849,
+0x09610209,0x06020808,0x06060808,0x07800dc8,0x04401208,0x07800e09,
+0x04401249,0x09610209,0x06020608,0x06800048,0x0541f208,0x06020408,
+0x06450a08,0x09005208,0x0a6f8008,0x06800008,0x07801989,0x0a60c009,
+0x06f00008,0x06d00008,0x06050a08,0x07802708,0x07802749,0x0960a209,
+0x07801989,0x097e1209,0x06050608,0x0780280a,0x07802849,0x0960a289,
+0x0605070a,0x09c087c8,0x0780288a,0x078028c9,0x0960a289,0x0a403288,
+0x00000000,0x098087c8,0x06050808,0x078028c9,0x0780274a,0x0a404289,
+0x07802889,0x0780270a,0x0a802289,0x0c780740,0x0640c908,0x0e000248,
+0x0640ca0a,0x00000000,0x0f000240,0x0200a24a,0x0606110a,0x0606150a,
+0x0606140a,0x04020208,0x078028c9,0x0e000248,0x0640cc0a,0x0640cb0c,
+0x0f000340,0x07802688,0x0e000308,0x0200b34a,0x0402028b,0x00000000,
+0x0f000240,0x0200a24a,0x0606120a,0x0606160a,0x02409309,0x0200b24b,
+0x0606130b,0x0606170b,0x06460408,0x06060408,0x06800048,0x0541f208,
+0x06060408,0x07801988,0x06040508,0x07802808,0x07802849,0x09610209,
+0x06040308,0x07802708,0x07802749,0x09610209,0x06040408,0x07802008,
+0x0a638008,0x06804808,0x06043008,0x06443108,0x0900a248,0x0a6f0009,
+0x091e5248,0x0a6e8009,0x00000000,0x06440008,0x09808008,0x06040008,
+0x09c08008,0x06040008,0x08040701,0x07802008,0x0aa4c008,0x07802888,
+0x0a614008,0x07801cc9,0x0aa0c009,0x0c007c40,0x00000000,0x06411009,
+0x091c1249,0x0a6f8009,0x00000000,0x06411009,0x098093c9,0x06011009,
+0x06411009,0x091e1249,0x0a6f8009,0x0cc00000,0x00000000,0x06411009,
+0x091c1249,0x0a6f8009,0x00000000,0x07800dc9,0x0ae0c049,0x0c0074c0,
+0x00000000,0x06411009,0x098093c9,0x06011009,0x08011c00,0x08011e00,
+0x06411009,0x091e1249,0x0a6f8009,0x0cc00000,0x00000000,0x0a60fc08,
+0x00000000,0x08010e90,0x0c7815c0,0x0800c0ff,0x078007cb,0x0c001600,
+0x06800049,0x06047e08,0x0aa1000b,0x0c0016c0,0x06800049,0x06047f08,
+0x08048000,0x0c0002c0,0x0780220a,0x06047c0c,0x0780204a,0x0a61400a,
+0x08048020,0x0c000140,0x0780224a,0x06047d0c,0x0cc00000,0x00000000,
+0x0400034a,0x06410c0e,0x0980d1cd,0x06010e0d,0x0680000c,0x0400034a,
+0x0aa1c00d,0x093e13ce,0x0580130c,0x097e130f,0x0540138e,0x0c7ffec0,
+0x0440134d,0x0680040d,0x0240d28d,0x0380c34c,0x0aa4000b,0x0400034a,
+0x06410c0e,0x0980d1cd,0x06010e0d,0x0400034a,0x0aa1c00d,0x093e13ce,
+0x0580130c,0x097e130f,0x0540138e,0x0c7ffec0,0x0440134d,0x0680040d,
+0x0240d28d,0x0380c34c,0x0400034c,0x0ae0c00a,0x0cc00000,0x00000000,
+0x0680000e,0x0680000f,0x0900140d,0x0aa1c010,0x0c000900,0x06800049,
+0x09408388,0x0c000840,0x06800049,0x094083c8,0x0920140d,0x0aa34010,
+0x0c000700,0x06800049,0x09508388,0x0c000640,0x06800049,0x0950a3c8,
+0x0c000580,0x06800049,0x09608388,0x0c0004c0,0x06800049,0x0964a3c8,
+0x0604810e,0x0604810f,0x0580134d,0x0c7ff880,0x0440128a,0x00800000,
+0x07800008,0x0c7e4140,0x06030408,0x06806008,0x06010e08,0x06410f08,
+0x0befc0c8,0x09118208,0x0cc00000,0x07400248,0x0680e008,0x06010e08,
+0x06410f08,0x0befc0c8,0x09118208,0x0cc00000,0x07400248,0x06410509,
+0x06bfff89,0x06030409,0x00400000,0x0be0c108,0x0c7ffa40,0x00000000,
+0x08012104,0x07800dc9,0x0ae0c049,0x06411c22,0x04000862,0x0a26891f,
+0x06011c21,0x0a21481f,0x0c005300,0x00000000,0x0a25411f,0x09c1f15f,
+0x07801cc9,0x0aa48009,0x08011e00,0x0be42022,0x06a907c9,0x06012b09,
+0x00000000,0x00000000,0x06412b09,0x0c005240,0x00000000,0x06411009,
+0x098093c9,0x06011009,0x06411009,0x091e1249,0x0a6f8009,0x0c780840,
+0x00000000,0x0a27e022,0x06a907c9,0x06012b09,0x00000000,0x00000000,
+0x06412b09,0x0c00fd40,0x00000000,0x06411609,0x093e1249,0x0aa4c009,
+0x06800008,0x07c02648,0x06411109,0x07802408,0x09446248,0x06011109,
+0x06411009,0x09809389,0x06011009,0x06411e08,0x0be22008,0x068001df,
+0x0c07a780,0x0978479f,0x06420409,0x09c09749,0x0c780100,0x06020409,
+0x0c7feac0,0x0800c0ff,0x0601161e,0x07800e48,0x09808788,0x098087c8,
+0x06012408,0x07800e48,0x06800427,0x0c0111c0,0x04000a08,0x0640d409,
+0x09010249,0x0aa0c009,0x0a8fd209,0x00000000,0x06a00008,0x06011408,
+0x07801988,0x0aa0c008,0x0c00f400,0x00000000,0x09c1f09f,0x07800e48,
+0x04001208,0x07c00e48,0x07802648,0x04001208,0x07c02648,0x0a21409f,
+0x07802809,0x0b803248,0x00000000,0x09c1f05f,0x07802888,0x0a618048,
+0x04001208,0x07801cc9,0x0aa0c009,0x00000000,0x0981f15f,0x07802789,
+0x0b815248,0x07c02888,0x07802708,0x07c02888,0x0981f09f,0x07800e48,
+0x07800dc9,0x02008248,0x07802809,0x02408248,0x07c00e48,0x078028c8,
+0x04001208,0x078027c9,0x0b807248,0x07c028c8,0x07801988,0x0aa0c008,
+0x0c7806c0,0x00000000,0x0981f0df,0x078028c8,0x04001208,0x078027c9,
+0x0b80f248,0x07802888,0x04001208,0x07802789,0x0b80b248,0x07800dc9,
+0x0b807248,0x078028c8,0x04001208,0x07800e09,0x0b803248,0x0c7800c0,
+0x09c1f11f,0x0981f11f,0x0981f0df,0x0780289e,0x078028c8,0x0958c788,
+0x0978479f,0x0cb80020,0x00000000,0x06800048,0x07c02008,0x07802688,
+0x07801a0c,0x0b41a308,0x06801a89,0x02009209,0x0700024a,0x0780270b,
+0x0200b28b,0x07c0270b,0x07c0288b,0x0780274b,0x07c028cb,0x04001208,
+0x0b808308,0x07c02688,0x07800dc9,0x07c02789,0x0780270a,0x02409289,
+0x0c780ac0,0x07c02809,0x04001249,0x0700024a,0x07c0280a,0x0780278b,
+0x0200b28b,0x0c780900,0x07c0278b,0x078026c8,0x07801a4c,0x0b802308,
+0x0c7ff600,0x06800008,0x07c02688,0x07c02888,0x07c02708,0x07801a89,
+0x07c02809,0x07c02789,0x078026c8,0x06801b89,0x02009209,0x0700024a,
+0x0780274b,0x0200b28b,0x07c0274b,0x07c028cb,0x04001208,0x0b808308,
+0x07c026c8,0x07800e09,0x07c027c9,0x0780274a,0x02409289,0x0c780200,
+0x07c02849,0x04001249,0x0700024a,0x07c0284a,0x078027cb,0x0200b28b,
+0x07c027cb,0x07802748,0x07800dc9,0x0e000248,0x00000000,0x00000000,
+0x07802709,0x0f000200,0x02008248,0x07c00e48,0x0c7fe780,0x04c177df,
+0x07802889,0x0780270a,0x0400228a,0x0b407289,0x04402209,0x0440128a,
+0x07802788,0x0b403289,0x04401208,0x04401208,0x0680c009,0x02009209,
+0x07400262,0x0a21009f,0x06800021,0x0c7fbe80,0x00000000,0x07802888,
+0x0680c009,0x02009209,0x0c7fbd40,0x07000261,0x07802889,0x0780270a,
+0x0400228a,0x0b407289,0x04402209,0x0440128a,0x07802788,0x0b403289,
+0x04401208,0x04401208,0x0680c009,0x05801288,0x02009289,0x0700024a,
+0x0a20c048,0x0c7800c0,0x094082a2,0x095102a2,0x0740024a,0x0a21009f,
+0x06800021,0x0c7fb780,0x00000000,0x07802888,0x0680c009,0x05801288,
+0x02009289,0x0700024a,0x0a20c048,0x0911084a,0x0900884a,0x0c7fb500,
+0x00000000,0x07802889,0x0780270a,0x0400228a,0x0b407289,0x04402209,
 0x0440128a,0x07802788,0x0b403289,0x04401208,0x04401208,0x0680c009,
-0x02009209,0x07400262,0x0a21009f,0x06800021,0x0c7fbe80,0x00000000,
-0x07802888,0x0680c009,0x02009209,0x0c7fbd40,0x07000261,0x07802889,
-0x0780270a,0x0400228a,0x0b407289,0x04402209,0x0440128a,0x07802788,
-0x0b403289,0x04401208,0x04401208,0x0680c009,0x05801288,0x02009289,
-0x0700024a,0x0a20c048,0x0c7800c0,0x094082a2,0x095102a2,0x0740024a,
-0x0a21009f,0x06800021,0x0c7fb780,0x00000000,0x07802888,0x0680c009,
-0x05801288,0x02009289,0x0700024a,0x0a20c048,0x0911084a,0x0900884a,
-0x0c7fb500,0x00000000,0x07802889,0x0780270a,0x0400228a,0x0b407289,
-0x04402209,0x0440128a,0x07802788,0x0b403289,0x04401208,0x04401208,
-0x0680c009,0x05802288,0x02009289,0x0700024a,0x09002208,0x0a60c008,
-0x0c780240,0x095842a2,0x0a60c048,0x0c780180,0x095042a2,0x0a60c088,
-0x0c7800c0,0x094842a2,0x094042a2,0x0740024a,0x0a21009f,0x06800021,
-0x0c7fad80,0x00000000,0x07802888,0x0680c009,0x05802288,0x02009289,
-0x0700024a,0x09002208,0x0aa1c008,0x0918484a,0x0aa14048,0x0910484a,
-0x0aa0c088,0x0908484a,0x0900484a,0x0c7fa9c0,0x00000000,0x0c780080,
-0x06800021,0x0c7fa8c0,0x00000000,0x06412107,0x090c11c7,0x0a6f8007,
-0x0c7ded80,0x00000000,0x06804009,0x06012d09,0x06800f8a,0x08012e00,
-0x00000000,0x0d07ff8a,0x00000000,0x0cc00000,0x00000000,0x06804009,
-0x06012c09,0x06809009,0x06012d09,0x06800f8a,0x06412e09,0x0d07ffca,
-0x06012e09,0x0cc00000,0x00000000,0x06809009,0x06012c09,0x06804009,
-0x06012d09,0x06800f8a,0x06412e09,0x0d07ffca,0x06012e09,0x06411109,
-0x07802408,0x09446248,0x06011109,0x0cc00000,0x00000000,0x07800dc8,
-0x07801a09,0x0a608009,0x0c780880,0x0aa18049,0x0aa20089,0x0aa640c9,
-0x0a608109,0x0c7806c0,0x0c780000,0x05801288,0x0c780680,0x07c01a8a,
+0x05802288,0x02009289,0x0700024a,0x09002208,0x0a60c008,0x0c780240,
+0x095842a2,0x0a60c048,0x0c780180,0x095042a2,0x0a60c088,0x0c7800c0,
+0x094842a2,0x094042a2,0x0740024a,0x0a21009f,0x06800021,0x0c7fad80,
+0x00000000,0x07802888,0x0680c009,0x05802288,0x02009289,0x0700024a,
+0x09002208,0x0aa1c008,0x0918484a,0x0aa14048,0x0910484a,0x0aa0c088,
+0x0908484a,0x0900484a,0x0c7fa9c0,0x00000000,0x0c780080,0x06800021,
+0x0c7fa8c0,0x00000000,0x06412107,0x090c11c7,0x0a6f8007,0x0c7de940,
+0x00000000,0x06804009,0x06012d09,0x06800f8a,0x08012e00,0x00000000,
+0x0d07ff8a,0x00000000,0x0cc00000,0x00000000,0x06804009,0x06012c09,
+0x06809009,0x06012d09,0x06800f8a,0x06412e09,0x0d07ffca,0x06012e09,
+0x0cc00000,0x00000000,0x06809009,0x06012c09,0x06804009,0x06012d09,
+0x06800f8a,0x06412e09,0x0d07ffca,0x06012e09,0x06411109,0x07802408,
+0x09446248,0x06011109,0x0cc00000,0x00000000,0x07800dc8,0x07801a09,
+0x0a608009,0x0c780880,0x0aa18049,0x0aa20089,0x0aa640c9,0x0a608109,
+0x0c7806c0,0x0c780000,0x05801288,0x0c780680,0x07c01a8a,0x05802288,
+0x0540124a,0x02009289,0x0b0fe209,0x0400128a,0x0440224a,0x07c01a89,
+0x05401289,0x0400128a,0x0540124a,0x02009289,0x05401208,0x0b003209,
+0x07801a89,0x0440128a,0x0240a24a,0x0c780200,0x07c01aca,0x0c000b40,
+0x06801a8c,0x0c780100,0x00000000,0x0c000dc0,0x06801a8c,0x07800e08,
+0x07801a49,0x0a608009,0x0c780880,0x0aa18049,0x0aa20089,0x0aa640c9,
+0x0a608109,0x0c7806c0,0x0c780000,0x05801288,0x0c780680,0x07c01b8a,
 0x05802288,0x0540124a,0x02009289,0x0b0fe209,0x0400128a,0x0440224a,
-0x07c01a89,0x05401289,0x0400128a,0x0540124a,0x02009289,0x05401208,
-0x0b003209,0x07801a89,0x0440128a,0x0240a24a,0x0c780200,0x07c01aca,
-0x0c000b40,0x06801a8c,0x0c780100,0x00000000,0x0c000dc0,0x06801a8c,
-0x07800e08,0x07801a49,0x0a608009,0x0c780880,0x0aa18049,0x0aa20089,
-0x0aa640c9,0x0a608109,0x0c7806c0,0x0c780000,0x05801288,0x0c780680,
-0x07c01b8a,0x05802288,0x0540124a,0x02009289,0x0b0fe209,0x0400128a,
-0x0440224a,0x07c01b89,0x05401289,0x0400128a,0x0540124a,0x02009289,
-0x05401208,0x0b003209,0x07801b89,0x0440128a,0x0240a24a,0x0c780200,
-0x07c01bca,0x0c000200,0x06801b8c,0x0cc00000,0x00000000,0x0c000480,
-0x06801b8c,0x0cc00000,0x00000000,0x05802348,0x0740030d,0x05801248,
-0x0240a349,0x0400130c,0x0740030a,0x054012c8,0x0200b20b,0x058022cb,
-0x0240a24b,0x0400130c,0x0740030a,0x0cc00000,0x00000000,0x05803288,
-0x0540224a,0x02009289,0x0b0fe209,0x0400128a,0x0440224a,0x07400309,
-0x054012c8,0x04000349,0x0540224a,0x02009289,0x0b0fe2c9,0x0400128a,
-0x0440224a,0x0240a349,0x0400130c,0x0740030a,0x054012c8,0x0200b20b,
+0x07c01b89,0x05401289,0x0400128a,0x0540124a,0x02009289,0x05401208,
+0x0b003209,0x07801b89,0x0440128a,0x0240a24a,0x0c780200,0x07c01bca,
+0x0c000200,0x06801b8c,0x0cc00000,0x00000000,0x0c000480,0x06801b8c,
+0x0cc00000,0x00000000,0x05802348,0x0740030d,0x05801248,0x0240a349,
+0x0400130c,0x0740030a,0x054012c8,0x0200b20b,0x058022cb,0x0240a24b,
+0x0400130c,0x0740030a,0x0cc00000,0x00000000,0x05803288,0x0540224a,
+0x02009289,0x0b0fe209,0x0400128a,0x0440224a,0x07400309,0x054012c8,
 0x04000349,0x0540224a,0x02009289,0x0b0fe2c9,0x0400128a,0x0440224a,
-0x0240a349,0x0400130c,0x0740030a,0x054022c8,0x04000349,0x0540224a,
-0x02009289,0x0b0fe2c9,0x0400128a,0x0440224a,0x0240a349,0x0400130c,
-0x0740030a,0x0cc00000,0x00000000,0x0640c308,0x02008308,0x06035108,
-0x06800808,0x06035208,0x06800149,0x0680c00a,0x0700024b,0x0740028b,
-0x0b6105c9,0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,0x06035008,
+0x0240a349,0x0400130c,0x0740030a,0x054012c8,0x0200b20b,0x04000349,
+0x0540224a,0x02009289,0x0b0fe2c9,0x0400128a,0x0440224a,0x0240a349,
+0x0400130c,0x0740030a,0x054022c8,0x04000349,0x0540224a,0x02009289,
+0x0b0fe2c9,0x0400128a,0x0440224a,0x0240a349,0x0400130c,0x0740030a,
+0x0cc00000,0x00000000,0x0640c308,0x02008308,0x06035108,0x06800808,
+0x06035208,0x06800149,0x0680c00a,0x0700024b,0x0740028b,0x0b6105c9,
+0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,0x06035008,0x06435008,
+0x0580f208,0x0bef8048,0x00000000,0x06435308,0x0900c208,0x0a6f8008,
+0x00000000,0x0cc00000,0x00000000,0x0640c408,0x02008308,0x06035108,
+0x06801008,0x06035208,0x06800609,0x0680c00a,0x0700024b,0x0740028b,
+0x0b611449,0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,0x06035008,
 0x06435008,0x0580f208,0x0bef8048,0x00000000,0x06435308,0x0900c208,
-0x0a6f8008,0x00000000,0x0cc00000,0x00000000,0x0640c408,0x02008308,
-0x06035108,0x06801008,0x06035208,0x06800609,0x0680c00a,0x0700024b,
-0x0740028b,0x0b611449,0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,
+0x0a6f8008,0x00000000,0x0cc00000,0x00000000,0x0640c308,0x02008308,
+0x06035108,0x06800808,0x06035208,0x06b0c008,0x06035008,0x06435008,
+0x0580f208,0x0bef8048,0x00000000,0x06800149,0x0680c00a,0x0700028b,
+0x0740024b,0x0b6105c9,0x04001249,0x0c7fff00,0x0400128a,0x0cc00000,
+0x00000000,0x0640c408,0x02008308,0x06035108,0x06801008,0x06035208,
+0x06b0c008,0x06035008,0x06435008,0x0580f208,0x0bef8048,0x00000000,
+0x06800609,0x0680c00a,0x0700028b,0x0740024b,0x0b611449,0x04001249,
+0x0c7fff00,0x0400128a,0x0cc00000,0x00000000,0x0640c508,0x02008308,
+0x06035108,0x06800c08,0x06035208,0x06801489,0x0680c00a,0x0700024b,
+0x0740028b,0x0b611ec9,0x04001249,0x0c7fff00,0x0400128a,0x06a0c008,
 0x06035008,0x06435008,0x0580f208,0x0bef8048,0x00000000,0x06435308,
-0x0900c208,0x0a6f8008,0x00000000,0x0cc00000,0x00000000,0x0640c308,
-0x02008308,0x06035108,0x06800808,0x06035208,0x06b0c008,0x06035008,
-0x06435008,0x0580f208,0x0bef8048,0x00000000,0x06800149,0x0680c00a,
-0x0700028b,0x0740024b,0x0b6105c9,0x04001249,0x0c7fff00,0x0400128a,
-0x0cc00000,0x00000000,0x0640c408,0x02008308,0x06035108,0x06801008,
-0x06035208,0x06b0c008,0x06035008,0x06435008,0x0580f208,0x0bef8048,
-0x00000000,0x06800609,0x0680c00a,0x0700028b,0x0740024b,0x0b611449,
-0x04001249,0x0c7fff00,0x0400128a,0x0cc00000,0x00000000,0x0640c508,
-0x02008308,0x06035108,0x06800c08,0x06035208,0x06801489,0x0680c00a,
-0x0700024b,0x0740028b,0x0b611ec9,0x04001249,0x0c7fff00,0x0400128a,
-0x06a0c008,0x06035008,0x06435008,0x0580f208,0x0bef8048,0x00000000,
-0x06435308,0x0900c208,0x0a6f8008,0x00000000,0x07800f08,0x0aa20008,
-0x0540330c,0x078014c8,0x0aa0c008,0x06800008,0x06900008,0x0c000100,
-0x0200c20c,0x0cc00000,0x00000000,0x0680000d,0x08070300,0x0680c00b,
-0x0680000a,0x06470408,0x06470409,0x09508209,0x074002c8,0x040012cb,
-0x0baeffca,0x0400128a,0x0aa3800d,0x00000000,0x06470508,0x07c0fe88,
-0x09210208,0x07c0fec8,0x06470608,0x07c0ff08,0x09210208,0x07c0ff48,
-0x06470708,0x07c0ff88,0x09210208,0x07c0ffc8,0x0640cd08,0x02008308,
-0x0540924d,0x02008248,0x06035108,0x06804008,0x06035208,0x06a0c008,
-0x06035008,0x06435008,0x0580f208,0x0bef8048,0x00000000,0x0ba0c04d,
-0x0cc00000,0x00000000,0x0c7ff640,0x0400134d,0x0640c508,0x02008308,
-0x06035108,0x06800c08,0x06035208,0x06b0c008,0x06035008,0x06435008,
-0x0580f208,0x0bef8048,0x00000000,0x06801489,0x0680c00a,0x0700028b,
-0x0740024b,0x0b611ec9,0x04001249,0x0c7fff00,0x0400128a,0x0c000e00,
-0x00000000,0x07800f08,0x0aa20008,0x0540330c,0x078014c8,0x0aa0c008,
-0x06800008,0x06900008,0x0c000100,0x0200c20c,0x0cc00000,0x00000000,
-0x0680000d,0x08070200,0x0640cd08,0x02008308,0x0540924d,0x02008248,
-0x06035108,0x06804008,0x06035208,0x06b0c008,0x06035008,0x06435008,
-0x0580f208,0x0bef8048,0x00000000,0x0680c00b,0x0680000a,0x070002c8,
-0x040012cb,0x06070408,0x09108248,0x06070409,0x0baeffca,0x0400128a,
-0x0aa3800d,0x00000000,0x0780fe88,0x0780fec9,0x09610209,0x06070508,
-0x0780ff08,0x0780ff49,0x09610209,0x06070608,0x0780ff88,0x0780ffc9,
-0x09610209,0x06070708,0x0ba0c04d,0x0cc00000,0x00000000,0x0c7ff640,
-0x0400134d,0x078015c8,0x07801749,0x09421209,0x07801709,0x09441209,
-0x07801949,0x09461209,0x07800ec9,0x09483209,0x07800e89,0x094e3209,
-0x07800f49,0x09741209,0x07801789,0x09761209,0x07800d09,0x078017ca,
-0x02409289,0x09782209,0x06011708,0x06412508,0x07800fc9,0x09401209,
-0x07801089,0x09482209,0x078010c9,0x094c2209,0x07801009,0x09504209,
-0x07801049,0x09584209,0x06800cc9,0x09706209,0x07800889,0x09442209,
-0x0aa18009,0x0680018a,0x04401249,0x0340a24a,0x0960420a,0x09808048,
-0x078008c9,0x097c2209,0x0aa18009,0x0680018a,0x04401249,0x0340a24a,
-0x0968420a,0x09808048,0x06012508,0x06470108,0x07800f09,0x09401209,
-0x09421209,0x09441209,0x07800d09,0x09482209,0x06070108,0x06470b08,
-0x07800889,0x09402209,0x078008c9,0x09482209,0x09502209,0x06070b08,
-0x06440808,0x07801289,0x09401209,0x07801709,0x09421209,0x06040808,
-0x06440c08,0x07800889,0x09402209,0x078008c9,0x09442209,0x06040c08,
-0x0cc00000,0x00000000,0x0c002dc0,0x00000000,0x07802208,0x07c04408,
-0x07802248,0x07c04448,0x07802048,0x07c04488,0x07802148,0x07c044c8,
-0x07802008,0x07c04508,0x07801fc8,0x07c04548,0x07800808,0x07c045c8,
-0x07800848,0x07c04608,0x07800c48,0x07c04648,0x07800c88,0x07c04688,
-0x07800908,0x07c046c8,0x078020c8,0x07c04708,0x07802308,0x07c04748,
-0x07802348,0x07c04788,0x07801e88,0x07c047c8,0x07802388,0x07c04808,
-0x07800a48,0x07c04848,0x07802988,0x07c04888,0x07801988,0x078019c9,
-0x05401249,0x02c08248,0x07c048c8,0x07801a08,0x07c04908,0x07801a48,
-0x07c04948,0x07801a88,0x07c04988,0x07801ac8,0x07c049c8,0x07801b08,
-0x07c04a08,0x07801b48,0x07c04a48,0x07801b88,0x07c04a88,0x07801bc8,
-0x07c04ac8,0x07801c08,0x07c04b08,0x07801c48,0x07c04b48,0x07801dc8,
-0x07c04bc8,0x07801e08,0x07c04c08,0x07802548,0x07c04c48,0x07802588,
-0x07c04c88,0x07801808,0x07c04cc8,0x07801848,0x07c04d08,0x07801f48,
-0x07c04d48,0x06800009,0x07801108,0x0a20c048,0x07800fc8,0x09809009,
-0x0a20c048,0x07801c88,0x09809049,0x0a20c048,0x07801d08,0x09809089,
-0x0a20c048,0x07801d48,0x098090c9,0x0a20c048,0x07801d88,0x09809109,
-0x0a20c048,0x078024c8,0x09809149,0x0a20c048,0x07802508,0x09809189,
-0x0a20c048,0x07802188,0x098091c9,0x0a20c048,0x078021c8,0x09809209,
-0x0a20c048,0x078025c8,0x09809249,0x0a20c048,0x00000000,0x09809289,
-0x07c04b89,0x0680500a,0x06802a48,0x07000209,0x07400289,0x0400128a,
-0x0baf7208,0x04001208,0x0800cf00,0x06800009,0x06804008,0x02008248,
-0x07000208,0x09808408,0x0600cf08,0x00000000,0x0640cf08,0x0a6fc008,
-0x0b60dfc9,0x0c7ffdc0,0x04001249,0x0cc00000,0x00000000,0x0800cf00,
-0x0800c0ff,0x06800009,0x0680ffca,0x07000248,0x09808408,0x0600cf08,
-0x00000000,0x0640cf08,0x0a6fc008,0x0b403289,0x0c7ffe40,0x04001249,
-0x0cc00000,0x00000000,0x0680000a,0x0680000b,0x06804008,0x07000209,
-0x0580f209,0x0be20048,0x0580e209,0x0a20c048,0x0400128a,0x040012cb,
-0x06804008,0x0bae040a,0x02008288,0x07c0294b,0x0cc00000,0x00000000,
-0x06800009,0x07c02949,0x068003ca,0x068043c8,0x07400209,0x0440128a,
-0x0aef800a,0x04401208,0x06a00009,0x07400209,0x0cc00000,0x00000000,
-0x06800048,0x07c02308,0x07c02148,0x0cc00000,0x00000000,0x0680580a,
-0x06801f08,0x07000209,0x07400289,0x0400128a,0x0baf6608,0x04001208,
-0x0cc00000,0x00000000,0x06802a4d,0x06410c08,0x08010e81,0x093e1248,
-0x0aa10009,0x07c02989,0x0c0003c0,0x0780220c,0x0a62c00b,0x00000000,
-0x06410c08,0x08010e81,0x093e1248,0x0aa18009,0x07802989,0x09809049,
-0x07c02989,0x0c000100,0x0780224c,0x0cc00000,0x00000000,0x07802948,
-0x0b21c088,0x06800049,0x0b214108,0x06800089,0x0b20c208,0x068000c9,
-0x06800109,0x0680080a,0x0240a24a,0x098091c9,0x06410c08,0x06010e09,
-0x03808288,0x07400348,0x0400134d,0x0aeec04c,0x0440130c,0x0cc00000,
-0x00000000,0x06460409,0x09001289,0x0aaf800a,0x00000000,0x0cc00000,
-0x00000000,0x07802888,0x0680d009,0x02009209,0x0700024d,0x078028c8,
-0x0680ee09,0x02009209,0x0700024e,0x0680000f,0x0ac0338d,0x06ee000f,
-0x06ea000f,0x06050a0f,0x07802888,0x0b615e08,0x0680d009,0x02009209,
-0x07802a0d,0x0740024d,0x078028c8,0x0b615108,0x0680ee09,0x02009209,
-0x07802a0e,0x0740024e,0x0cc00000,0x00000000,0x0640c023,0x0a6fffe3,
-0x00000000,0x06410b23,0x098230a3,0x06010b23,0x06412123,0x0a2fc063,
-0x00000000,0x06410c23,0x092039a3,0x07c04da6,0x093269a3,0x07c04de6,
-0x06410d23,0x06410b23,0x0600d326,0x06800067,0x0c000d40,0x04000a26,
-0x0a6308a6,0x00000000,0x06411423,0x090188e3,0x0640ce24,0x0a610023,
-0x0be0c064,0x05801924,0x0a610024,0x06440123,0x0a2fc063,0x00000000,
-0x08012101,0x0640d224,0x0a214064,0x00000000,0x0800c009,0x0c7ff6c0,
-0x08007401,0x0640d224,0x0be3c0a4,0x06803c25,0x078033a3,0x0aa30826,
-0x0a250063,0x0be28124,0x0aa24866,0x0a2440a3,0x0aa1c8a6,0x0a23c123,
-0x0be0c223,0x0aa08526,0x0a6304e6,0x098230e3,0x07c033a3,0x0aa24826,
-0x06800065,0x0aa1c866,0x068000a5,0x0aa148a6,0x068000e5,0x0b20c566,
-0x06800125,0x06803c25,0x068000a7,0x0c000180,0x04000a25,0x0600c025,
-0x08030504,0x0c7feec0,0x00000000,0x0600d128,0x078033e8,0x0aa18028,
-0x00000000,0x0600d027,0x08007401,0x0640d027,0x0a6fc027,0x00000000,
-0x0cc00000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x0900c208,0x0a6f8008,0x00000000,0x07800f08,0x0aa20008,0x0540330c,
+0x078014c8,0x0aa0c008,0x06800008,0x06900008,0x0c000100,0x0200c20c,
+0x0cc00000,0x00000000,0x0680000d,0x08070300,0x0680c00b,0x0680000a,
+0x06470408,0x06470409,0x09508209,0x074002c8,0x040012cb,0x0baeffca,
+0x0400128a,0x0aa3800d,0x00000000,0x06470508,0x07c0fe88,0x09210208,
+0x07c0fec8,0x06470608,0x07c0ff08,0x09210208,0x07c0ff48,0x06470708,
+0x07c0ff88,0x09210208,0x07c0ffc8,0x0640cd08,0x02008308,0x0540924d,
+0x02008248,0x06035108,0x06804008,0x06035208,0x06a0c008,0x06035008,
+0x06435008,0x0580f208,0x0bef8048,0x00000000,0x0ba0c04d,0x0cc00000,
+0x00000000,0x0c7ff640,0x0400134d,0x0640c508,0x02008308,0x06035108,
+0x06800c08,0x06035208,0x06b0c008,0x06035008,0x06435008,0x0580f208,
+0x0bef8048,0x00000000,0x06801489,0x0680c00a,0x0700028b,0x0740024b,
+0x0b611ec9,0x04001249,0x0c7fff00,0x0400128a,0x0c000e00,0x00000000,
+0x07800f08,0x0aa20008,0x0540330c,0x078014c8,0x0aa0c008,0x06800008,
+0x06900008,0x0c000100,0x0200c20c,0x0cc00000,0x00000000,0x0680000d,
+0x08070200,0x0640cd08,0x02008308,0x0540924d,0x02008248,0x06035108,
+0x06804008,0x06035208,0x06b0c008,0x06035008,0x06435008,0x0580f208,
+0x0bef8048,0x00000000,0x0680c00b,0x0680000a,0x070002c8,0x040012cb,
+0x06070408,0x09108248,0x06070409,0x0baeffca,0x0400128a,0x0aa3800d,
+0x00000000,0x0780fe88,0x0780fec9,0x09610209,0x06070508,0x0780ff08,
+0x0780ff49,0x09610209,0x06070608,0x0780ff88,0x0780ffc9,0x09610209,
+0x06070708,0x0ba0c04d,0x0cc00000,0x00000000,0x0c7ff640,0x0400134d,
+0x078015c8,0x07801749,0x09421209,0x07801709,0x09441209,0x07801949,
+0x09461209,0x07800ec9,0x09483209,0x07800e89,0x094e3209,0x07800f49,
+0x09741209,0x07801789,0x09761209,0x07800d09,0x078017ca,0x02409289,
+0x09782209,0x06011708,0x06412508,0x07800fc9,0x09401209,0x07801089,
+0x09482209,0x078010c9,0x094c2209,0x07801009,0x09504209,0x07801049,
+0x09584209,0x06800cc9,0x09706209,0x07800889,0x09442209,0x0aa18009,
+0x0680018a,0x04401249,0x0340a24a,0x0960420a,0x09808048,0x078008c9,
+0x097c2209,0x0aa18009,0x0680018a,0x04401249,0x0340a24a,0x0968420a,
+0x09808048,0x06012508,0x06470108,0x07800f09,0x09401209,0x09421209,
+0x09441209,0x07800d09,0x09482209,0x06070108,0x06470b08,0x07800889,
+0x09402209,0x078008c9,0x09482209,0x09502209,0x06070b08,0x06440808,
+0x07801289,0x09401209,0x07801709,0x09421209,0x06040808,0x06440c08,
+0x07800889,0x09402209,0x078008c9,0x09442209,0x06040c08,0x0cc00000,
+0x00000000,0x0c002dc0,0x00000000,0x07802208,0x07c04408,0x07802248,
+0x07c04448,0x07802048,0x07c04488,0x07802148,0x07c044c8,0x07802008,
+0x07c04508,0x07801fc8,0x07c04548,0x07800808,0x07c045c8,0x07800848,
+0x07c04608,0x07800c48,0x07c04648,0x07800c88,0x07c04688,0x07800908,
+0x07c046c8,0x078020c8,0x07c04708,0x07802308,0x07c04748,0x07802348,
+0x07c04788,0x07801e88,0x07c047c8,0x07802388,0x07c04808,0x07800a48,
+0x07c04848,0x07802988,0x07c04888,0x07801988,0x078019c9,0x05401249,
+0x02c08248,0x07c048c8,0x07801a08,0x07c04908,0x07801a48,0x07c04948,
+0x07801a88,0x07c04988,0x07801ac8,0x07c049c8,0x07801b08,0x07c04a08,
+0x07801b48,0x07c04a48,0x07801b88,0x07c04a88,0x07801bc8,0x07c04ac8,
+0x07801c08,0x07c04b08,0x07801c48,0x07c04b48,0x07801dc8,0x07c04bc8,
+0x07801e08,0x07c04c08,0x07802548,0x07c04c48,0x07802588,0x07c04c88,
+0x07801808,0x07c04cc8,0x07801848,0x07c04d08,0x07801f48,0x07c04d48,
+0x06800009,0x07801108,0x0a20c048,0x07800fc8,0x09809009,0x0a20c048,
+0x07801c88,0x09809049,0x0a20c048,0x07801d08,0x09809089,0x0a20c048,
+0x07801d48,0x098090c9,0x0a20c048,0x07801d88,0x09809109,0x0a20c048,
+0x078024c8,0x09809149,0x0a20c048,0x07802508,0x09809189,0x0a20c048,
+0x07802188,0x098091c9,0x0a20c048,0x078021c8,0x09809209,0x0a20c048,
+0x078025c8,0x09809249,0x0a20c048,0x00000000,0x09809289,0x07c04b89,
+0x0680500a,0x06802a48,0x07000209,0x07400289,0x0400128a,0x0baf7208,
+0x04001208,0x0800cf00,0x06800009,0x06804008,0x02008248,0x07000208,
+0x09808408,0x0600cf08,0x00000000,0x0640cf08,0x0a6fc008,0x0b60dfc9,
+0x0c7ffdc0,0x04001249,0x0cc00000,0x00000000,0x0800cf00,0x0800c0ff,
+0x06800009,0x0680ffca,0x07000248,0x09808408,0x0600cf08,0x00000000,
+0x0640cf08,0x0a6fc008,0x0b403289,0x0c7ffe40,0x04001249,0x0cc00000,
+0x00000000,0x0680000a,0x0680000b,0x06804008,0x07000209,0x0580f209,
+0x0be20048,0x0580e209,0x0a20c048,0x0400128a,0x040012cb,0x06804008,
+0x0bae040a,0x02008288,0x07c0294b,0x0cc00000,0x00000000,0x06800009,
+0x07c02949,0x068003ca,0x068043c8,0x07400209,0x0440128a,0x0aef800a,
+0x04401208,0x06a00009,0x07400209,0x0cc00000,0x00000000,0x06800048,
+0x07c02308,0x07c02148,0x0cc00000,0x00000000,0x0680580a,0x06801f08,
+0x07000209,0x07400289,0x0400128a,0x0baf6608,0x04001208,0x0cc00000,
+0x00000000,0x06802a4d,0x06410c08,0x08010e81,0x093e1248,0x0aa10009,
+0x07c02989,0x0c0003c0,0x0780220c,0x0a62c00b,0x00000000,0x06410c08,
+0x08010e81,0x093e1248,0x0aa18009,0x07802989,0x09809049,0x07c02989,
+0x0c000100,0x0780224c,0x0cc00000,0x00000000,0x07802948,0x0b21c088,
+0x06800049,0x0b214108,0x06800089,0x0b20c208,0x068000c9,0x06800109,
+0x0680080a,0x0240a24a,0x098091c9,0x06410c08,0x06010e09,0x03808288,
+0x07400348,0x0400134d,0x0aeec04c,0x0440130c,0x0cc00000,0x00000000,
+0x06460409,0x09001289,0x0aaf800a,0x00000000,0x0cc00000,0x00000000,
+0x07802888,0x0680d009,0x02009209,0x0700024d,0x078028c8,0x0680ee09,
+0x02009209,0x0700024e,0x0680000f,0x0ac0338d,0x06ee000f,0x06ea000f,
+0x06050a0f,0x07802888,0x0b615e08,0x0680d009,0x02009209,0x07802a0d,
+0x0740024d,0x078028c8,0x0b615108,0x0680ee09,0x02009209,0x07802a0e,
+0x0740024e,0x0cc00000,0x00000000,0x0640c023,0x0a6fffe3,0x00000000,
+0x06410b23,0x098230a3,0x06010b23,0x06412123,0x0a2fc063,0x00000000,
+0x06410c23,0x092039a3,0x07c04da6,0x093269a3,0x07c04de6,0x06410d23,
+0x06410b23,0x0600d326,0x06800067,0x0c000fc0,0x04000a26,0x0a6308a6,
+0x00000000,0x06411423,0x090188e3,0x0640ce24,0x0a610023,0x0be0c064,
+0x05801924,0x0a610024,0x06440123,0x0a2fc063,0x00000000,0x08012101,
+0x0640d224,0x0a214064,0x00000000,0x0800c009,0x0c7ff6c0,0x08007401,
+0x0640d224,0x0be480a4,0x06803c25,0x078033a3,0x0aa3c826,0x0a25c063,
+0x0aa34866,0x0aa308a6,0x0a2500a3,0x0a24c123,0x0be24124,0x0be18223,
+0x0a20c224,0x0b218566,0x0c780380,0x0aa08526,0x0a6304e6,0x098230e3,
+0x07c033a3,0x0aa24826,0x06800065,0x0aa1c866,0x068000a5,0x0aa148a6,
+0x068000e5,0x0b20c566,0x06800125,0x06803c25,0x0ae1c566,0x0a61bc25,
+0x0640d224,0x0910c8e4,0x040018e3,0x0950c923,0x0600d224,0x068000a7,
+0x0c000180,0x04000a25,0x0600c025,0x08030504,0x0c7fec40,0x00000000,
+0x0600d128,0x078033e8,0x0aa18028,0x00000000,0x0600d027,0x08007401,
+0x0640d027,0x0a6fc027,0x00000000,0x0cc00000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
diff --git a/drivers/amlogic/amports/vh265.c b/drivers/amlogic/amports/vh265.c
index c6bc0a8661b1..998966083c09 100755
--- a/drivers/amlogic/amports/vh265.c
+++ b/drivers/amlogic/amports/vh265.c
@@ -81,12 +81,12 @@ static struct timer_list recycle_timer;
 static u32 stat;
 static u32 error_watchdog_count;
 
-#define H265_DEBUG_POC                      0x01
-#define H265_DEBUG_BUFMGR                   0x02
-#define H265_DEBUG_PARAM                    0x04
+#define H265_DEBUG_BUFMGR                   0x01
+#define H265_DEBUG_BUFMGR_MORE              0x02
+#define H265_DEBUG_UCODE                    0x04
 #define H265_DEBUG_REG                      0x08
-#define H265_DEBUG_UCODE                    0x10
-#define H265_DEBUG_USE_MAN_SKIP            0x20
+#define H265_DEBUG_MAN_SEARCH_NAL           0x10
+#define H265_DEBUG_MAN_SKIP_NAL             0x20
 #define H265_DEBUG_DISPLAY_CUR_FRAME       0x40
 #define H265_DEBUG_FORCE_CLK               0x80
 #define H265_DEBUG_ENA_LOC_ERROR_PROC       0x10000
@@ -94,13 +94,19 @@ static u32 error_watchdog_count;
 #define H265_DEBUG_DUMP_PIC_LIST       0x40000
 #define H265_DEBUG_TRIG_SLICE_SEGMENT_PROC 0x80000
 
-static u32 debug_decode_idx_start = 0;
-static u32 debug_decode_idx_end = 0;
 static u32 debug = 0;
+/*for debug*/
 static u32 decode_stop_pos = 0;
 static u32 decode_stop_pos_pre = 0;
 static u32 decode_pic_begin = 0;
+static uint slice_parse_begin=0;
 static u32 step = 0;
+/**/
+/* 
+bit[1:0]PB_skip_mode: 0, start decoding at begin; 1, start decoding after first I;  2, only decode and display none error picture; 3, start decoding and display after IDR,etc
+bit[31:16] PB_skip_count_after_decoding (decoding but not display),  only for mode 0 and 1.
+ */
+static u32 nal_skip_policy = 2;
 
 #define DEBUG_REG
 #ifdef DEBUG_REG
@@ -332,7 +338,10 @@ h265 buffer management
 ucode parser/search control
 bit 0:  0, header auto parse; 1, header manual parse
 bit 1:  0, auto skip for noneseamless stream; 1, no skip
-bit 2: valid when bit1==0;  0, auto skip nal before first vps/sps/pps/idr; 1, auto skip nal before first vps
+bit [3:2]: valid when bit1==0;  
+0, auto skip nal before first vps/sps/pps/idr; 
+1, auto skip nal before first vps/sps/pps
+2, auto skip nal before fist  vps/sps/pps, and not decode until the first I slice (with slice address of 0)
 */
 #define NAL_SEARCH_CTL		      HEVC_ASSIST_SCRATCH_I
 #define CUR_NAL_UNIT_TYPE       HEVC_ASSIST_SCRATCH_J
@@ -619,6 +628,7 @@ typedef struct PIC_{
 	unsigned char output_mark;
 	unsigned char recon_mark;
 	unsigned char output_ready;
+	unsigned char error_mark;
 	/**/
 	int slice_idx;
 	int m_aiRefPOCList0[MAX_SLICE_NUM][16];
@@ -701,6 +711,10 @@ typedef struct hevc_state_{
     unsigned char have_valid_start_slice;
     unsigned char wait_buf;
     unsigned char error_flag;
+
+    unsigned char ignore_bufmgr_error; /* bit 0, for decoding; bit 1, for displaying */
+    int PB_skip_mode;
+    int PB_skip_count_after_decoding;
 }hevc_stru_t;
 
 
@@ -742,6 +756,15 @@ static void hevc_init_stru(hevc_stru_t* hevc, BuffInfo_t* buf_spec_i, buff_t* mc
     hevc->have_pps = 0;
     hevc->have_valid_start_slice = 0;
     
+    hevc->PB_skip_mode = nal_skip_policy&0x3;
+    hevc->PB_skip_count_after_decoding = (nal_skip_policy>>16)&0xffff;
+    if(hevc->PB_skip_mode==0){
+        hevc->ignore_bufmgr_error = 0x1;
+    }
+    else{
+        hevc->ignore_bufmgr_error = 0x0;
+    }
+
     for(i=0; i<MAX_REF_PIC_NUM; i++){
         m_PIC[i].index = -1;
     }
@@ -943,6 +966,7 @@ static reset_pic_list(hevc_stru_t* hevc)
     pic->referenced = 0;
     pic->output_mark = 0;
     pic->recon_mark = 0;
+    pic->error_mark = 0;
 		pic = pic->next;
 	}
 
@@ -998,13 +1022,16 @@ static int config_mc_buffer(hevc_stru_t* hevc, PIC_t* cur_pic)
 		for(i=0; i<cur_pic->RefNum_L0; i++){
 			pic = get_ref_pic_by_POC(hevc, cur_pic->m_aiRefPOCList0[cur_pic->slice_idx][i]);
 			if(pic){
+				if(pic->error_mark){
+            cur_pic->error_mark = 1;
+				}
 				WRITE_VREG(HEVCD_MPP_ANC_CANVAS_DATA_ADDR, (pic->mc_canvas_u_v<<16)|(pic->mc_canvas_u_v<<8)|pic->mc_canvas_y);
         if(debug&H265_DEBUG_BUFMGR) 
             printk("refid %x mc_canvas_u_v %x mc_canvas_y %x\n", i,pic->mc_canvas_u_v,pic->mc_canvas_y);
 			}
 			else{
 				if(debug) printk("Error %s, %dth poc (%d) of RPS is not in the pic list0\n", __func__, i, cur_pic->m_aiRefPOCList0[cur_pic->slice_idx][i]);
-				return -1;
+        cur_pic->error_mark = 1;
 				//dump_lmem();
 			}
 		}
@@ -1016,6 +1043,9 @@ static int config_mc_buffer(hevc_stru_t* hevc, PIC_t* cur_pic)
 		for(i=0; i<cur_pic->RefNum_L1; i++){
 			pic = get_ref_pic_by_POC(hevc, cur_pic->m_aiRefPOCList1[cur_pic->slice_idx][i]);
 			if(pic){
+				if(pic->error_mark){
+            cur_pic->error_mark = 1;
+				}
 				WRITE_VREG(HEVCD_MPP_ANC_CANVAS_DATA_ADDR, (pic->mc_canvas_u_v<<16)|(pic->mc_canvas_u_v<<8)|pic->mc_canvas_y);
                 if(debug&H265_DEBUG_BUFMGR){
                     printk("refid %x mc_canvas_u_v %x mc_canvas_y %x\n", i,pic->mc_canvas_u_v,pic->mc_canvas_y);
@@ -1023,7 +1053,7 @@ static int config_mc_buffer(hevc_stru_t* hevc, PIC_t* cur_pic)
 			}
 			else{
 				if(debug) printk("Error %s, %dth poc (%d) of RPS is not in the pic list1\n", __func__, i, cur_pic->m_aiRefPOCList1[cur_pic->slice_idx][i]);
-				return -1;
+        cur_pic->error_mark = 1;
 				//dump_lmem();
 			}
 		}
@@ -1103,9 +1133,9 @@ static void set_ref_pic_list(PIC_t* pic,  param_t* params)
 		}	
 	}
 	total_num = num_neg + num_pos;
-	if(debug&H265_DEBUG_POC){
-	    printk("%s: curpoc %d total %d num_neg %d num_list0 %d num_list1 %d\n", __func__,
-		        pic->POC, total_num, num_neg,num_ref_idx_l0_active, num_ref_idx_l1_active);
+	if(debug&H265_DEBUG_BUFMGR){
+	    printk("%s: curpoc %d slice_type %d, total %d num_neg %d num_list0 %d num_list1 %d\n", __func__,
+		        pic->POC, params->p.slice_type, total_num, num_neg,num_ref_idx_l0_active, num_ref_idx_l1_active);
 	}
 	
 	if(total_num>0){
@@ -2103,7 +2133,6 @@ static PIC_t* get_new_pic(hevc_stru_t* hevc, param_t* rpm_param)
         }
         if(new_pic == NULL){
             //printk("Error: Buffer management, no free buffer\n");
-            //dump_pic_list(hevc);
             return NULL;
         }
     }
@@ -2115,10 +2144,10 @@ static PIC_t* get_new_pic(hevc_stru_t* hevc, param_t* rpm_param)
     new_pic->referenced = 1;
     new_pic->output_mark = 0;
     new_pic->recon_mark = 0;
+    new_pic->error_mark = 0;
     //new_pic->output_ready = 0;
     new_pic->num_reorder_pic = rpm_param->p.sps_num_reorder_pics_0;
     new_pic->POC = hevc->curr_POC;
-    //dump_pic_list(hevc);
     return new_pic;
 }
 
@@ -2270,30 +2299,41 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
                 init_buf_spec(hevc);
                 hevc->pic_list_init_flag = 1;
             }
-            
+
+            if(debug&H265_DEBUG_BUFMGR_MORE) dump_pic_list(hevc);
             /* prev pic */
             if(hevc->curr_POC!=0){
                 PIC_t* pic_display;
                 pic = get_pic_by_POC(hevc, hevc->iPrevPOC);
                 if(pic){
+                    /*PB skip control*/
+                    if(pic->error_mark==0 && hevc->PB_skip_mode==1){
+                        hevc->ignore_bufmgr_error|=0x1;  //start decoding after first I
+                    }
+                    if(hevc->ignore_bufmgr_error&1){
+                        if(hevc->PB_skip_count_after_decoding>0){
+                            hevc->PB_skip_count_after_decoding--;
+                        }
+                        else{
+                            hevc->ignore_bufmgr_error|=0x2; //start displaying
+                        }
+                    }
+                    /**/
                     pic->output_mark = 1;
                     pic->recon_mark = 1;
                 }
                 do{			
                     pic_display = output_pic(hevc, 0);
-    
-                    if(pic_display){
-                        prepare_display_buf(pic_display->index, pic_display->stream_offset);
-                    }
+
                     if(pic_display){
-                        if(debug&H265_DEBUG_POC){
-                            if(hevc->cur_pic->decode_idx > debug_decode_idx_start && hevc->cur_pic->decode_idx < debug_decode_idx_end)
-                                dump_pic_list(hevc);
-                            printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
+                        if((pic_display->error_mark && ((hevc->ignore_bufmgr_error&0x2)==0))
+                            ||(debug&H265_DEBUG_DISPLAY_CUR_FRAME)){
+                            pic_display->output_ready = 0;
+                            if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d ==> Debug mode or error, recycle it\n", pic_display->POC, pic_display->decode_idx);
                         }
-                        if(debug&H265_DEBUG_DISPLAY_CUR_FRAME){
-                       			 pic_display->output_ready = 0;
-                             printk("[Buffer Management] Display: POC %d, decoding index %d ==> In Debug Mode: recycle it\n", pic_display->POC, pic_display->decode_idx);
+                        else{                    
+                            prepare_display_buf(pic_display->index, pic_display->stream_offset);
+                            if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
                         }
                     }
                 }while(pic_display);
@@ -2303,11 +2343,24 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
                 if(debug&H265_DEBUG_BUFMGR){
                     printk("[Buffer Management] current pic is IDR, clear referenced flag of all buffers\n");
                 }
-                if(debug&H265_DEBUG_POC){
+                if(debug&H265_DEBUG_BUFMGR){
                     dump_pic_list(hevc);
                 }
                 pic = get_pic_by_POC(hevc, hevc->iPrevPOC);
                 if(pic){
+                    /*PB skip control*/
+                    if(pic->error_mark==0 && hevc->PB_skip_mode==1){
+                        hevc->ignore_bufmgr_error|=0x1;  //start decoding after first I
+                    }
+                    if(hevc->ignore_bufmgr_error&1){
+                        if(hevc->PB_skip_count_after_decoding>0){
+                            hevc->PB_skip_count_after_decoding--;
+                        }
+                        else{
+                            hevc->ignore_bufmgr_error|=0x2; //start displaying
+                        }
+                    }
+                    /**/
                     pic->output_mark = 1;
                     pic->recon_mark = 1;
                 }
@@ -2316,17 +2369,14 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
     
                     if(pic_display){
                         pic_display->referenced = 0;
-                        prepare_display_buf(pic_display->index, pic_display->stream_offset);
-                    }
-                    if(pic_display){
-                        if(debug&H265_DEBUG_POC){
-                            if(hevc->cur_pic->decode_idx > debug_decode_idx_start && hevc->cur_pic->decode_idx < debug_decode_idx_end)
-                                dump_pic_list(hevc);
-                            printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
-                        }
-                        if(debug&H265_DEBUG_DISPLAY_CUR_FRAME){
+                        if((pic_display->error_mark && ((hevc->ignore_bufmgr_error&0x2)==0))
+                            ||(debug&H265_DEBUG_DISPLAY_CUR_FRAME)){
                        			 pic_display->output_ready = 0;
-                             printk("[Buffer Management] Display: POC %d, decoding index %d ==> In Debug Mode: recycle it\n", pic_display->POC, pic_display->decode_idx);
+                             if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d ==> Debug mode or error, recycle it\n", pic_display->POC, pic_display->decode_idx);
+                        }
+                        else{
+                            prepare_display_buf(pic_display->index, pic_display->stream_offset);
+                            if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
                         }
                     }
                 }while(pic_display);
@@ -2368,6 +2418,7 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
             }
             hevc->wait_buf = 0;    
         }
+        if(debug&H265_DEBUG_BUFMGR_MORE) dump_pic_list(hevc);
     }
         
     if(hevc->new_pic){
@@ -2476,8 +2527,17 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
         if(hevc->Col_POC != INVALID_POC){
             hevc->col_pic = get_ref_pic_by_POC(hevc, hevc->Col_POC);
             if(hevc->col_pic == NULL){
+                hevc->cur_pic->error_mark = 1;
                 if(debug) printk("WRONG, fail to get the picture of Col_POC\n");
-                return 2;
+            }
+            else if(hevc->col_pic->error_mark){
+                hevc->cur_pic->error_mark = 1;
+                if(debug) printk("WRONG, Col_POC error_mark is 1\n");
+            }
+
+            if(hevc->cur_pic->error_mark && ((hevc->ignore_bufmgr_error&0x1)==0)){
+                if(debug) printk("Discard this picture\n");
+                return 2;    
             }
         }
         else{
@@ -2493,8 +2553,11 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
           return 0xf;
 #endif
 
-    if(config_mc_buffer(hevc, hevc->cur_pic)<0){
-        return 3;    
+    config_mc_buffer(hevc, hevc->cur_pic);
+
+    if(hevc->cur_pic->error_mark && ((hevc->ignore_bufmgr_error&0x1)==0)){
+        if(debug) printk("Discard this picture\n");
+        return 2;    
     }
 #ifdef MCRCC_ENABLE
     config_mcrcc_axi_hw(hevc->cur_pic->slice_type);
@@ -2802,19 +2865,34 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
                     ( naltype == NAL_UNIT_CODED_SLICE_BLANT) ||
                     (naltype == NAL_UNIT_CODED_SLICE_BLA_N_LP )
                  ){
-                    parse_type = HEVC_NAL_UNIT_CODED_SLICE_SEGMENT;
+                    if(slice_parse_begin>0){
+                        printk("discard %d, for debugging\n", slice_parse_begin);
+                        slice_parse_begin--;
+                    }
+                    else{
+                        parse_type = HEVC_NAL_UNIT_CODED_SLICE_SEGMENT;
+                    }
                     hevc->have_valid_start_slice = 1;
                 }
-                else if(hevc->have_valid_start_slice&&(naltype<= NAL_UNIT_CODED_SLICE_CRA)) {
-                    parse_type = HEVC_NAL_UNIT_CODED_SLICE_SEGMENT;
+                else if(naltype<= NAL_UNIT_CODED_SLICE_CRA){
+                    if(hevc->have_valid_start_slice || (hevc->PB_skip_mode!=3)){
+                        if(slice_parse_begin>0){
+                            printk("discard %d, for debugging\n", slice_parse_begin);
+                            slice_parse_begin--;
+                        }
+                        else{
+                            parse_type = HEVC_NAL_UNIT_CODED_SLICE_SEGMENT;
+                        }
+                    }
                 }
             }
         }
         if(hevc->have_vps && hevc->have_sps && hevc->have_pps && hevc->have_valid_start_slice){
-            WRITE_VREG(NAL_SEARCH_CTL, 0x2); //auot parser NAL; do not check vps/sps/pps/idr
+            if((debug&H265_DEBUG_MAN_SEARCH_NAL)==0)
+                WRITE_VREG(NAL_SEARCH_CTL, 0x2); //auot parser NAL; do not check vps/sps/pps/idr
         }
         
-        if(debug&H265_DEBUG_PARAM){
+        if(debug&H265_DEBUG_BUFMGR){
             printk("naltype = %d  parse_type %d\n %d %d %d %d \n", naltype, parse_type,
                 hevc->have_vps ,hevc->have_sps, hevc->have_pps ,hevc->have_valid_start_slice);
         }
@@ -2828,7 +2906,7 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
     else if(dec_status == HEVC_SLICE_SEGMENT_DONE){
         if(hevc->wait_buf == 0){
             get_rpm_param(&rpm_param);      
-            if(debug&H265_DEBUG_PARAM){
+            if(debug&H265_DEBUG_BUFMGR){
                 printk("rpm_param: (%d)\n", hevc->slice_idx);
                 hevc->slice_idx++;
                 for(i=0; i<0x80; i++){
@@ -2987,10 +3065,19 @@ static void vh265_prot_init(void)
         WRITE_VREG(DEBUG_REG1, 0x0);
     }
     
-    if(debug&H265_DEBUG_USE_MAN_SKIP)
+    if(debug&(H265_DEBUG_MAN_SKIP_NAL|H265_DEBUG_MAN_SEARCH_NAL)){
         WRITE_VREG(NAL_SEARCH_CTL, 0x1); //manual parser NAL
-    else    
-        WRITE_VREG(NAL_SEARCH_CTL, 0x0); //auto parser NAL and skip
+    }
+    else{
+        unsigned ctl_val = 0x8; //check vps/sps/pps/i-slice in ucode
+        if(gHevc.PB_skip_mode==0){
+            ctl_val = 0x4;  // check vps/sps/pps only in ucode
+        }
+        else if(gHevc.PB_skip_mode==3){
+            ctl_val = 0x0;  // check vps/sps/pps/idr in ucode
+        }
+        WRITE_VREG(NAL_SEARCH_CTL, ctl_val);
+    }
         
     WRITE_VREG(DECODE_STOP_POS, decode_stop_pos);
 
@@ -3255,6 +3342,12 @@ MODULE_PARM_DESC(decode_stop_pos, "\n amvdec_h265 decode_stop_pos \n");
 module_param(decode_pic_begin, uint, 0664);
 MODULE_PARM_DESC(decode_pic_begin, "\n amvdec_h265 decode_pic_begin \n");
 
+module_param(slice_parse_begin, uint, 0664);
+MODULE_PARM_DESC(slice_parse_begin, "\n amvdec_h265 slice_parse_begin \n");
+
+module_param(nal_skip_policy, uint, 0664);
+MODULE_PARM_DESC(nal_skip_policy, "\n amvdec_h265 nal_skip_policy \n");
+
 module_init(amvdec_h265_driver_init_module);
 module_exit(amvdec_h265_driver_remove_module);
 
-- 
2.19.0

