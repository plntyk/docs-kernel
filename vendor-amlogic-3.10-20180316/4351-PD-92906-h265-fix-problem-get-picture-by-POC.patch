From e9da2364dd9cdd5b0c06bc0912013279cd478f59 Mon Sep 17 00:00:00 2001
From: Rain Zhang-CA <rainzhang@wonton.(none)>
Date: Tue, 10 Jun 2014 18:18:21 -0700
Subject: [PATCH 4351/5965] PD#92906, h265, fix problem, get picture by POC

---
 .../amlogic/amports/m8/ucode/h265/vh265_mc.c  | 76 +++++++++----------
 drivers/amlogic/amports/vh265.c               | 39 ++++------
 2 files changed, 52 insertions(+), 63 deletions(-)

diff --git a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
index 405992514320..34a1cf235391 100755
--- a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
@@ -20,7 +20,7 @@
  */
 
 #include <linux/types.h>
-//project_dos revision 2685
+//project_dos revision 2701
 //#undef SEND_PARAM_WITH_REG
 const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x06810001,0x06800000,0x0d000001,0x07400040,0x0c000900,0x00000000,
@@ -279,7 +279,7 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x07802889,0x0a614049,0x07801cc9,0x0aa0c009,0x00000000,0x0981f15f,
 0x07802889,0x078028c8,0x0958c248,0x0978425f,0x06011609,0x0c0004c0,
 0x00000000,0x07800e48,0x09808788,0x098087c8,0x06012408,0x07800e48,
-0x06800427,0x0c017280,0x04000a08,0x0640d409,0x09010249,0x0aa0c009,
+0x06800427,0x0c017300,0x04000a08,0x0640d409,0x09010249,0x0aa0c009,
 0x0a8fd209,0x00000000,0x06a00008,0x06011408,0x0c786080,0x00000000,
 0x07802789,0x07c029c9,0x078028c9,0x0780274a,0x0a40b289,0x0680000c,
 0x0780288b,0x0780270a,0x0a40728b,0x0680000c,0x0a614009,0x0680008c,
@@ -343,7 +343,7 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x06411009,0x09809389,0x06011009,0x06411e08,0x0be22008,0x068001df,
 0x0c07a600,0x0978479f,0x06420409,0x09c09749,0x0c780100,0x06020409,
 0x0c7feac0,0x0800c0ff,0x0601161e,0x07800e48,0x09808788,0x098087c8,
-0x06012408,0x07800e48,0x06800427,0x0c011200,0x04000a08,0x0640d409,
+0x06012408,0x07800e48,0x06800427,0x0c011280,0x04000a08,0x0640d409,
 0x09010249,0x0aa0c009,0x0a8fd209,0x00000000,0x06a00008,0x06011408,
 0x07801988,0x0aa0c008,0x0c00f440,0x00000000,0x09c1f09f,0x07800e48,
 0x04001208,0x07c00e48,0x07802648,0x04001208,0x07c02648,0x0a21409f,
@@ -512,22 +512,23 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 0x0680ee09,0x02009209,0x0700024e,0x0680000f,0x0ac0338d,0x06ee000f,
 0x06ea000f,0x06050a0f,0x07802888,0x0b615e08,0x0680d009,0x02009209,
 0x07802a0d,0x0740024d,0x078028c8,0x0b615108,0x0680ee09,0x02009209,
-0x07802a0e,0x0740024e,0x0cc00000,0x00000000,0x0640c023,0x0a6fffe3,
-0x00000000,0x06410b23,0x098230a3,0x06010b23,0x06412123,0x0a2fc063,
-0x00000000,0x06410c23,0x092039a3,0x07c04da6,0x093269a3,0x07c04de6,
-0x06410d23,0x06410b23,0x0600d326,0x06800067,0x0c000fc0,0x04000a26,
-0x0a6308a6,0x00000000,0x06411423,0x090188e3,0x0640ce24,0x0a610023,
-0x0be0c064,0x05801924,0x0a610024,0x06440123,0x0a2fc063,0x00000000,
-0x08012101,0x0640d224,0x0a214064,0x00000000,0x0800c009,0x0c7ff6c0,
-0x08007401,0x0640d224,0x0be480a4,0x06803c25,0x078033a3,0x0aa3c826,
-0x0a25c063,0x0aa34866,0x0aa308a6,0x0a2500a3,0x0a24c123,0x0be24124,
-0x0be18223,0x0a20c224,0x0b218566,0x0c780380,0x0aa08526,0x0a6304e6,
-0x098230e3,0x07c033a3,0x0aa24826,0x06800065,0x0aa1c866,0x068000a5,
-0x0aa148a6,0x068000e5,0x0b20c566,0x06800125,0x06803c25,0x0ae1c566,
-0x0a61bc25,0x0640d224,0x0910c8e4,0x040018e3,0x0950c923,0x0600d224,
-0x068000a7,0x0c000180,0x04000a25,0x0600c025,0x08030504,0x0c7fec40,
-0x00000000,0x0600d128,0x078033e8,0x0aa18028,0x00000000,0x0600d027,
-0x08007401,0x0640d027,0x0a6fc027,0x00000000,0x0cc00000,0x00000000,
+0x07802a0e,0x0740024e,0x0cc00000,0x00000000,0x067f2f23,0x0befc063,
+0x0640c023,0x0a6f7fe3,0x00000000,0x06410b23,0x098230a3,0x06010b23,
+0x06412123,0x0a2fc063,0x00000000,0x06410c23,0x092039a3,0x07c04da6,
+0x093269a3,0x07c04de6,0x06410d23,0x06410b23,0x0600d326,0x06800067,
+0x0c000fc0,0x04000a26,0x0a6308a6,0x00000000,0x06411423,0x090188e3,
+0x0640ce24,0x0a610023,0x0be0c064,0x05801924,0x0a610024,0x06440123,
+0x0a2fc063,0x00000000,0x08012101,0x0640d224,0x0a214064,0x00000000,
+0x0800c009,0x0c7ff640,0x08007401,0x0640d224,0x0be480a4,0x06803c25,
+0x078033a3,0x0aa3c826,0x0a25c063,0x0aa34866,0x0aa308a6,0x0a2500a3,
+0x0a24c123,0x0be24124,0x0be18223,0x0a20c224,0x0b218566,0x0c780380,
+0x0aa08526,0x0a6304e6,0x098230e3,0x07c033a3,0x0aa24826,0x06800065,
+0x0aa1c866,0x068000a5,0x0aa148a6,0x068000e5,0x0b20c566,0x06800125,
+0x06803c25,0x0ae1c566,0x0a61bc25,0x0640d224,0x0910c8e4,0x040018e3,
+0x0950c923,0x0600d224,0x068000a7,0x0c000180,0x04000a25,0x0600c025,
+0x08030504,0x0c7febc0,0x00000000,0x0600d128,0x078033e8,0x0aa18028,
+0x00000000,0x0600d027,0x08007401,0x0640d027,0x0a6fc027,0x00000000,
+0x0cc00000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
@@ -793,7 +794,7 @@ const u32 vh265_mc_send_param_with_reg_mc[] __attribute__((aligned(8))) = {
 0x07802889,0x0a614049,0x07801cc9,0x0aa0c009,0x00000000,0x0981f15f,
 0x07802889,0x078028c8,0x0958c248,0x0978425f,0x06011609,0x0c0004c0,
 0x00000000,0x07800e48,0x09808788,0x098087c8,0x06012408,0x07800e48,
-0x06800427,0x0c017240,0x04000a08,0x0640d409,0x09010249,0x0aa0c009,
+0x06800427,0x0c0172c0,0x04000a08,0x0640d409,0x09010249,0x0aa0c009,
 0x0a8fd209,0x00000000,0x06a00008,0x06011408,0x0c786080,0x00000000,
 0x07802789,0x07c029c9,0x078028c9,0x0780274a,0x0a40b289,0x0680000c,
 0x0780288b,0x0780270a,0x0a40728b,0x0680000c,0x0a614009,0x0680008c,
@@ -857,7 +858,7 @@ const u32 vh265_mc_send_param_with_reg_mc[] __attribute__((aligned(8))) = {
 0x06411009,0x09809389,0x06011009,0x06411e08,0x0be22008,0x068001df,
 0x0c07a600,0x0978479f,0x06420409,0x09c09749,0x0c780100,0x06020409,
 0x0c7feac0,0x0800c0ff,0x0601161e,0x07800e48,0x09808788,0x098087c8,
-0x06012408,0x07800e48,0x06800427,0x0c0111c0,0x04000a08,0x0640d409,
+0x06012408,0x07800e48,0x06800427,0x0c011240,0x04000a08,0x0640d409,
 0x09010249,0x0aa0c009,0x0a8fd209,0x00000000,0x06a00008,0x06011408,
 0x07801988,0x0aa0c008,0x0c00f400,0x00000000,0x09c1f09f,0x07800e48,
 0x04001208,0x07c00e48,0x07802648,0x04001208,0x07c02648,0x0a21409f,
@@ -1026,23 +1027,22 @@ const u32 vh265_mc_send_param_with_reg_mc[] __attribute__((aligned(8))) = {
 0x02009209,0x0700024e,0x0680000f,0x0ac0338d,0x06ee000f,0x06ea000f,
 0x06050a0f,0x07802888,0x0b615e08,0x0680d009,0x02009209,0x07802a0d,
 0x0740024d,0x078028c8,0x0b615108,0x0680ee09,0x02009209,0x07802a0e,
-0x0740024e,0x0cc00000,0x00000000,0x0640c023,0x0a6fffe3,0x00000000,
-0x06410b23,0x098230a3,0x06010b23,0x06412123,0x0a2fc063,0x00000000,
-0x06410c23,0x092039a3,0x07c04da6,0x093269a3,0x07c04de6,0x06410d23,
-0x06410b23,0x0600d326,0x06800067,0x0c000fc0,0x04000a26,0x0a6308a6,
-0x00000000,0x06411423,0x090188e3,0x0640ce24,0x0a610023,0x0be0c064,
-0x05801924,0x0a610024,0x06440123,0x0a2fc063,0x00000000,0x08012101,
-0x0640d224,0x0a214064,0x00000000,0x0800c009,0x0c7ff6c0,0x08007401,
-0x0640d224,0x0be480a4,0x06803c25,0x078033a3,0x0aa3c826,0x0a25c063,
-0x0aa34866,0x0aa308a6,0x0a2500a3,0x0a24c123,0x0be24124,0x0be18223,
-0x0a20c224,0x0b218566,0x0c780380,0x0aa08526,0x0a6304e6,0x098230e3,
-0x07c033a3,0x0aa24826,0x06800065,0x0aa1c866,0x068000a5,0x0aa148a6,
-0x068000e5,0x0b20c566,0x06800125,0x06803c25,0x0ae1c566,0x0a61bc25,
-0x0640d224,0x0910c8e4,0x040018e3,0x0950c923,0x0600d224,0x068000a7,
-0x0c000180,0x04000a25,0x0600c025,0x08030504,0x0c7fec40,0x00000000,
-0x0600d128,0x078033e8,0x0aa18028,0x00000000,0x0600d027,0x08007401,
-0x0640d027,0x0a6fc027,0x00000000,0x0cc00000,0x00000000,0x00000000,
-0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
+0x0740024e,0x0cc00000,0x00000000,0x067f2f23,0x0befc063,0x0640c023,
+0x0a6f7fe3,0x00000000,0x06410b23,0x098230a3,0x06010b23,0x06412123,
+0x0a2fc063,0x00000000,0x06410c23,0x092039a3,0x07c04da6,0x093269a3,
+0x07c04de6,0x06410d23,0x06410b23,0x0600d326,0x06800067,0x0c000fc0,
+0x04000a26,0x0a6308a6,0x00000000,0x06411423,0x090188e3,0x0640ce24,
+0x0a610023,0x0be0c064,0x05801924,0x0a610024,0x06440123,0x0a2fc063,
+0x00000000,0x08012101,0x0640d224,0x0a214064,0x00000000,0x0800c009,
+0x0c7ff640,0x08007401,0x0640d224,0x0be480a4,0x06803c25,0x078033a3,
+0x0aa3c826,0x0a25c063,0x0aa34866,0x0aa308a6,0x0a2500a3,0x0a24c123,
+0x0be24124,0x0be18223,0x0a20c224,0x0b218566,0x0c780380,0x0aa08526,
+0x0a6304e6,0x098230e3,0x07c033a3,0x0aa24826,0x06800065,0x0aa1c866,
+0x068000a5,0x0aa148a6,0x068000e5,0x0b20c566,0x06800125,0x06803c25,
+0x0ae1c566,0x0a61bc25,0x0640d224,0x0910c8e4,0x040018e3,0x0950c923,
+0x0600d224,0x068000a7,0x0c000180,0x04000a25,0x0600c025,0x08030504,
+0x0c7febc0,0x00000000,0x0600d128,0x078033e8,0x0aa18028,0x00000000,
+0x0600d027,0x08007401,0x0640d027,0x0a6fc027,0x00000000,0x0cc00000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
 0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
diff --git a/drivers/amlogic/amports/vh265.c b/drivers/amlogic/amports/vh265.c
index e46cd3df0a97..b3c4263e44f0 100755
--- a/drivers/amlogic/amports/vh265.c
+++ b/drivers/amlogic/amports/vh265.c
@@ -811,30 +811,15 @@ static void get_rpm_param(param_t* params)
 {
 	int i;
 	unsigned int data32;
-	int count = 0;
-	//printk("%s in\n", __func__);
 	for(i=0; i<128; i++){
 		do{
-#if 1
-			count++;
-			if(count>10000){
-			    printk("%s error %d, %x\n", __func__, i, READ_VREG(0x3308));
-			    printk("%s error %d, %x\n", __func__, i, READ_VREG(0x3308));
-			    count=0;
-			}
-#endif			
-			    
 			data32 = READ_VREG(RPM_CMD_REG);
 			//printk("%x\n", data32);
 		}while((data32&0x10000)==0);	
-#if 1
-    count=0;
-#endif    		
 		params->l.data[i] = data32&0xffff;
 		//printk("%x\n", data32);
 		WRITE_VREG(RPM_CMD_REG, 0);		
 	}
-	//printk("%s exit\n", __func__);
 }
 
 
@@ -884,21 +869,25 @@ static PIC_t* get_pic_by_POC(hevc_stru_t* hevc, int POC)
 static PIC_t* get_ref_pic_by_POC(hevc_stru_t* hevc, int POC)
 {
 	PIC_t* pic = hevc->decode_pic_list;
+	PIC_t* ret_pic = NULL;
 	while(pic){
-		if((pic->POC==POC)&&(pic->referenced))
-			break;
+		if((pic->POC==POC)&&(pic->referenced)){
+			if(ret_pic==NULL){
+			    ret_pic = pic;
+		  }
+		  else{
+    	    if(pic->decode_idx > ret_pic->decode_idx)
+				    ret_pic = pic;			
+			}
+		}
 		pic = pic->next;
 	}
-	if(pic==NULL){
+	
+	if(ret_pic==NULL){
 		if(debug) printk("Wrong, POC of %d is not in referenced list\n", POC);		
-		pic = hevc->decode_pic_list;
-		while(pic){
-			if(pic->POC==POC)
-				break;
-			pic = pic->next;
-		}
+		ret_pic = get_pic_by_POC(hevc, POC);
 	}
-	return pic;
+	return ret_pic;
 }
 
 static PIC_t* get_pic_by_IDX(hevc_stru_t* hevc, int idx)
-- 
2.19.0

