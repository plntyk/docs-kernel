From 6f59a395714e617bae7a03b16818ad748fcfa5ab Mon Sep 17 00:00:00 2001
From: "shuai.li" <shuai.li@amlogic.com>
Date: Tue, 17 Jun 2014 13:45:49 +0800
Subject: [PATCH 4389/5965] PD#93252:audio aml_i2s: add dts interface to config
 audio clock mpll source

---
 .../arm/boot/dts/amlogic/meson8_k101_512M.dtd |   1 +
 sound/soc/aml/m8/aml_audio_hw.c               | 301 +++---------------
 sound/soc/aml/m8/aml_audio_hw.h               |   4 +-
 sound/soc/aml/m8/aml_i2s.h                    |   4 +-
 sound/soc/aml/m8/aml_i2s_dai.c                | 115 ++++---
 sound/soc/aml/m8/aml_i2s_dai.h                |   9 +-
 sound/soc/aml/m8/aml_pcm.h                    |   4 +-
 sound/soc/codecs/aml_m8_codec.c               |   2 -
 8 files changed, 114 insertions(+), 326 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
index 66939dd4e9b5..ab28f414b8e8 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
@@ -1381,6 +1381,7 @@ sdio{
     audio_dai{
         compatible = "amlogic,aml-i2s-dai";
         dev_name = "aml-i2s-dai.0";
+        clk_src_mpll = <0>; /* 0:mpll0, 1:mpll1, 2:mpll2 */
         status = "okay";
     };
     audio_spdif_dai{
diff --git a/sound/soc/aml/m8/aml_audio_hw.c b/sound/soc/aml/m8/aml_audio_hw.c
index c5aae29b65a6..af907ec1970b 100755
--- a/sound/soc/aml/m8/aml_audio_hw.c
+++ b/sound/soc/aml/m8/aml_audio_hw.c
@@ -314,18 +314,16 @@ static void spdifin_reg_set(void)
 	u32 clk_rate = clk_get_rate(clk_src);
 	u32 spdif_clk_time = 54;   // 54us
 	u32 spdif_mode_14bit = ((clk_rate /500000 +1 )>>1)* spdif_clk_time; // the reg spdif_mode(0x2800)last 14 bit
-	
-	printk(KERN_INFO"spdifin_reg_set: clk_rate=%d\n", clk_rate);
 	u32 period_data = (clk_rate/64000 + 1 ) >> 1 ;   // sysclk/32(bit)/2(ch)/2(bmc)
-	
 	u32 period_32k = (period_data + (1<<4)) >> 5;     // 32k min period
 	u32 period_44k = (period_data / 22 + 1) >> 1;   // 44k min period
 	u32 period_48k = (period_data / 24 + 1) >> 1;   // 48k min period
 	u32 period_96k = (period_data / 48 + 1) >> 1;   // 96k min period
 	u32 period_192k = (period_data / 96 + 1) >> 1;  // 192k min period
 	
+	printk(KERN_INFO"spdifin_reg_set: clk_rate=%d\n", clk_rate);
 		
-	WRITE_MPEG_REG(AUDIN_SPDIF_MODE, READ_MPEG_REG(AUDIN_SPDIF_MODE)&0x7fffc000|(spdif_mode_14bit<<0));
+	WRITE_MPEG_REG(AUDIN_SPDIF_MODE, (READ_MPEG_REG(AUDIN_SPDIF_MODE)&0x7fffc000)|(spdif_mode_14bit<<0));
 	WRITE_MPEG_REG(AUDIN_SPDIF_FS_CLK_RLTN, (period_32k<<0)|(period_44k<<6)|(period_48k<<12) 
 											|(period_96k<<18)|(period_192k<<24));  //Spdif_fs_clk_rltn
 	
@@ -564,260 +562,37 @@ void audio_util_set_dac_i2s_format(unsigned format)
 	WRITE_MPEG_REG(AIU_I2S_SOURCE_DESC, 0x0001);	// four 2-channel	
 }
 
-extern unsigned int get_ddr_pll_clk(void);
-
-void audio_set_clk(unsigned freq, unsigned fs_config)
+enum clk_enum
 {
-    int i;
-    int xtal = 0;
-
-    int (*audio_clock_config)[2];
-
-   // if (fs_config == AUDIO_CLK_256FS) {
-   if(1){
-		int index=0;
-		switch(freq)
-		{
-			case AUDIO_CLK_FREQ_192:
-				index=4;
-				break;
-			case AUDIO_CLK_FREQ_96:
-				index=3;
-				break;
-			case AUDIO_CLK_FREQ_48:
-				index=2;
-				break;
-			case AUDIO_CLK_FREQ_441:
-				index=1;
-				break;
-			case AUDIO_CLK_FREQ_32:
-				index=0;
-				break;
-			case AUDIO_CLK_FREQ_8:
-				index = 5;
-				break;
-			case AUDIO_CLK_FREQ_11:
-				index = 6;
-				break;
-			case AUDIO_CLK_FREQ_12:
-				index = 7;
-				break;
-			case AUDIO_CLK_FREQ_16:
-				index = 8;
-				break;
-			case AUDIO_CLK_FREQ_22:
-				index = 9;
-				break;
-			case AUDIO_CLK_FREQ_24:
-				index = 10;
-				break;
-			default:
-				index=0;
-				break;
-		};
-#if MESON_CPU_TYPE < MESON_CPU_TYPE_MESON6
-	// get system crystal freq
-		clk=clk_get_sys("clk_xtal", NULL);
-		if(!clk)
-		{
-			printk(KERN_ERR "can't find clk %s for AUDIO PLL SETTING!\n\n","clk_xtal");
-			//return -1;
-		}
-		else
-		{
-			xtal=clk_get_rate(clk);
-			xtal=xtal/1000000;
-			if(xtal>=24 && xtal <=25)/*current only support 24,25*/
-			{
-				xtal-=24;
-			}
-			else
-			{
-				printk(KERN_WARNING "UNsupport xtal setting for audio xtal=%d,default to 24M\n",xtal);
-				xtal=0;
-			}
-		}
-
-		audio_clock_config = audio_clock_config_table[xtal];
-#endif
-
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-	if (fs_config == AUDIO_CLK_256FS) {
-		// divide 256
-		xtal = 0;
-	}
-	else if (fs_config == AUDIO_CLK_384FS) {
-	    // divide 384
-		xtal = 1;
-	}
-	audio_clock_config = audio_clock_config_table[xtal];
-#endif
-
-#ifdef CONFIG_SND_AML_M3
-	if (((clk_get_rate(clk)==24000000)&&(get_ddr_pll_clk()==516000000)&&(index=2))) // 48k
-	{
-		WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 8)); // audio clock off
-		WRITE_MPEG_REG( HHI_AUD_PLL_CNTL, READ_MPEG_REG(HHI_AUD_PLL_CNTL) | (1 << 15)); // audio pll off
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 4, 9, 3); // select ddr
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 42-1, 0, 8); // 516/42
-		WRITE_MPEG_REG_BITS(AIU_CODEC_ADC_LRCLK_CTRL, 64-1, 0, 12);//set codec adc ratio---lrclk
-		WRITE_MPEG_REG_BITS(AIU_CODEC_DAC_LRCLK_CTRL, 64-1, 0, 12);//set codec dac ratio---lrclk
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1<<23));// gate audac_clkpi
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1 << 8));
-		printk(KERN_INFO "audio 48k clock from ddr pll %dM\n", 516);
-		return;
-	}
-	else if (((clk_get_rate(clk)==24000000)&&(get_ddr_pll_clk()==508000000)&&(index=1))) // 44.1k
-	{
-		WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 8)); // audio clock off
-		WRITE_MPEG_REG( HHI_AUD_PLL_CNTL, READ_MPEG_REG(HHI_AUD_PLL_CNTL) | (1 << 15)); // audio pll off
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 4, 9, 3); // select ddr
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 45-1, 0, 8); // 508/45
-		WRITE_MPEG_REG_BITS(AIU_CODEC_ADC_LRCLK_CTRL, 64-1, 0, 12);//set codec adc ratio---lrclk
-		WRITE_MPEG_REG_BITS(AIU_CODEC_DAC_LRCLK_CTRL, 64-1, 0, 12);//set codec dac ratio---lrclk
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1<<23));// gate audac_clkpi
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1 << 8));
-		printk(KERN_INFO "audio 44.1k clock from ddr pll %dM\n", 508);
-		return;
-	}
-	else if (((clk_get_rate(clk)==24000000)&&(get_ddr_pll_clk()==486000000)&&(index=1))) // 44.1k
-	{
-		WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 8)); // audio clock off
-		WRITE_MPEG_REG( HHI_AUD_PLL_CNTL, READ_MPEG_REG(HHI_AUD_PLL_CNTL) | (1 << 15)); // audio pll off
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 4, 9, 3); // select ddr
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 43-1, 0, 8); // 486/42
-		WRITE_MPEG_REG_BITS(AIU_CODEC_ADC_LRCLK_CTRL, 64-1, 0, 12);//set codec adc ratio---lrclk
-		WRITE_MPEG_REG_BITS(AIU_CODEC_DAC_LRCLK_CTRL, 64-1, 0, 12);//set codec dac ratio---lrclk
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1<<23));// gate audac_clkpi
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1 << 8));
-		printk(KERN_INFO "audio 44.1k clock from ddr pll %dM\n", 486);
-		return;
-	}
-	else if (((clk_get_rate(clk)==24000000)&&(get_ddr_pll_clk()==474000000)&&(index=1))) // 44.1k
-	{
-		WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 8)); // audio clock off
-		WRITE_MPEG_REG( HHI_AUD_PLL_CNTL, READ_MPEG_REG(HHI_AUD_PLL_CNTL) | (1 << 15)); // audio pll off
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 4, 9, 3); // select ddr
-		WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 42-1, 0, 8); // 474/42
-		WRITE_MPEG_REG_BITS(AIU_CODEC_ADC_LRCLK_CTRL, 64-1, 0, 12);//set codec adc ratio---lrclk
-		WRITE_MPEG_REG_BITS(AIU_CODEC_DAC_LRCLK_CTRL, 64-1, 0, 12);//set codec dac ratio---lrclk
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1<<23));// gate audac_clkpi
-		WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1 << 8));
-		printk(KERN_INFO "audio 44.1k clock from ddr pll %dM\n", 474);
-		return;
-	}
-#endif
-
-    // gate the clock off
-    WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 8));
-
-//#ifdef CONFIG_SND_AML_M3
-#ifdef CONFIG_ARCH_MESON3
-	WRITE_MPEG_REG(HHI_AUD_PLL_CNTL2, 0x065e31ff);
-	WRITE_MPEG_REG(HHI_AUD_PLL_CNTL3, 0x9649a941);
-	// select Audio PLL as MCLK source
-	//WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(1 << 9));
-	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 0, 9, 3);
-	//WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 25-1, 0, 8);
-
-	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 13-1, 0, 8);
-#endif
-
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-  WRITE_MPEG_REG(HHI_MPLL_CNTL3, 0x26e1250);
-#endif
-
-#if MESON_CPU_TYPE < MESON_CPU_TYPE_MESON6
-    // Put the PLL to sleep
-    WRITE_MPEG_REG( HHI_AUD_PLL_CNTL, READ_MPEG_REG(HHI_AUD_PLL_CNTL) | (1 << 15));//found
-
-//#ifdef CONFIG_SND_AML_M3
-#if MESON_CPU_TYPE <= MESON_CPU_TYPE_MESON3
-	WRITE_MPEG_REG_BITS(AIU_CODEC_ADC_LRCLK_CTRL, 64-1, 0, 12);//set codec adc ratio---lrclk
-	WRITE_MPEG_REG_BITS(AIU_CODEC_DAC_LRCLK_CTRL, 64-1, 0, 12);//set codec dac ratio---lrclk
-#endif
-    // Bring out of reset but keep bypassed to allow to stablize
-    //Wr( HHI_AUD_PLL_CNTL, (1 << 15) | (0 << 14) | (hiu_reg & 0x3FFF) );
-    WRITE_MPEG_REG( HHI_AUD_PLL_CNTL, (1 << 15) | (audio_clock_config[index][0] & 0x7FFF) );//found
-    // Set the XD value
-    WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, (READ_MPEG_REG(HHI_AUD_CLK_CNTL) & ~(0xff << 0)) | audio_clock_config[index][1]);//found
-    // delay 5uS
-	//udelay(5);
-	for (i = 0; i < 500000; i++) ;
-    // Bring the PLL out of sleep
-    WRITE_MPEG_REG( HHI_AUD_PLL_CNTL, READ_MPEG_REG(HHI_AUD_PLL_CNTL) & ~(1 << 15));//found
-
-    // gate the clock on
-    WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1 << 8));//found
-#if MESON_CPU_TYPE <= MESON_CPU_TYPE_MESON3
-	WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) |(1<<23));// gate audac_clkpi
-#endif
-#else // endif CONFIG_ARCH_MESON6
-    WRITE_MPEG_REG(AIU_CLK_CTRL_MORE, 0);
-	WRITE_MPEG_REG_BITS(AIU_CODEC_ADC_LRCLK_CTRL, 64-1, 0, 12);//set codec adc ratio---lrclk
-	WRITE_MPEG_REG_BITS(AIU_CODEC_DAC_LRCLK_CTRL, 64-1, 0, 12);//set codec dac ratio---lrclk
-
-	// Select Multi-Phase PLL2 as clock source
-	WRITE_MPEG_REG_BITS( HHI_AUD_CLK_CNTL, I2S_PLL_SRC, 9, 3);
-
-	// Configure Multi-Phase PLL2
-	WRITE_MPEG_REG(MPLL_I2S_CNTL, audio_clock_config[index][0]);
-	// Set the XD value
-	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, audio_clock_config[index][1], 0, 8);
-	// delay 5uS
-	//udelay(5);
-	for (i = 0; i < 500000; i++) ;
-	// gate the clock on
-	WRITE_MPEG_REG( HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) | (1 << 8));
-
-#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6TV
-	//Audio DAC Clock enable
-	WRITE_MPEG_REG(HHI_AUD_CLK_CNTL, READ_MPEG_REG(HHI_AUD_CLK_CNTL) |(1<<23));
-/* ADC clock  configuration */
-// Disable mclk
-    WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL2, 0, 8, 1);
-
-    // Select clk source, 0=ddr_pll; 1=Multi-Phase PLL0; 2=Multi-Phase PLL1; 3=Multi-Phase PLL2.
-    WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL2, I2S_PLL_SRC, 9, 2);
-
-    // Set pll over mclk ratio
-    //we want 256fs ADC MLCK,so for over clock mode,divide more 2 than I2S  DAC CLOCK
-#if OVERCLOCK == 0
-    WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL2, audio_clock_config[index][1], 0, 8);
-#else
-    WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL2, (audio_clock_config[index][1]+1)*2-1, 0, 8);
-#endif
-
-    // Set mclk over sclk ratio
-    WRITE_MPEG_REG_BITS(AIU_CLK_CTRL_MORE, 4-1, 8, 6);
-
-    // Set sclk over lrclk ratio
-    WRITE_MPEG_REG_BITS(AIU_CODEC_ADC_LRCLK_CTRL, 64-1, 0, 12);
-
-    // Enable sclk
-    WRITE_MPEG_REG_BITS(AIU_CLK_CTRL_MORE, 1, 14, 1);
-    // Enable mclk
-    WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL2, 1, 8, 1);
-#endif
-
-#endif // endif CONFIG_ARCH_MESON6
-    // delay 2uS
-	//udelay(2);
-	for (i = 0; i < 200000; i++) ;
-
-    } else if (fs_config == AUDIO_CLK_384FS) {
-    }
-}
+	CLK_NONE = 0,
+	CLK_MPLL0,
+	CLK_MPLL1,
+	CLK_MPLL2
+};
 
-// iec958 and i2s clock are separated after M6TV. Use PLL2 for i2s DAC & ADC clock
-void audio_set_i2s_clk(unsigned freq, unsigned fs_config)
+// iec958 and i2s clock are separated after M6TV. 
+void audio_set_i2s_clk(unsigned freq, unsigned fs_config, unsigned mpll)
 {
-    int i;
-    int xtal = 0;
-
+    int i, index = 0, xtal = 0;
+	int mpll_reg, clk_src;
     int (*audio_clock_config)[2];
+	switch (mpll){
+	case 0:
+		mpll_reg = HHI_MPLL_CNTL7;
+		clk_src = CLK_MPLL0;
+		break;
+	case 1:
+		mpll_reg = HHI_MPLL_CNTL8;
+		clk_src = CLK_MPLL1;
+		break;
+	case 2:
+		mpll_reg = HHI_MPLL_CNTL9;
+		clk_src = CLK_MPLL2;
+		break;
+	default:
+		BUG();
+	}
 
-	int index=0;
 	switch(freq)
 	{
 		case AUDIO_CLK_FREQ_192:
@@ -878,11 +653,11 @@ void audio_set_i2s_clk(unsigned freq, unsigned fs_config)
 	/*--- DAC clock  configuration--- */
 	// Disable mclk
     WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 0, 8, 1);
-	// Select clk source, 0=ddr_pll; 1=Multi-Phase PLL0; 2=Multi-Phase PLL1; 3=Multi-Phase PLL2.
-	WRITE_MPEG_REG_BITS( HHI_AUD_CLK_CNTL, I2S_PLL_SRC, 9, 2);
+	// Select clk source, 0=none; 1=Multi-Phase PLL0; 2=Multi-Phase PLL1; 3=Multi-Phase PLL2.
+	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, clk_src, 9, 2);
 
-	// Configure Multi-Phase PLL2
-	WRITE_MPEG_REG(MPLL_I2S_CNTL, audio_clock_config[index][0]);
+	// Configure Multi-Phase PLLX
+	WRITE_MPEG_REG(mpll_reg, audio_clock_config[index][0]);
 	// Set the XD value
 	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, audio_clock_config[index][1], 0, 8);
 
@@ -900,10 +675,6 @@ void audio_set_i2s_clk(unsigned freq, unsigned fs_config)
 	/* ---ADC clock  configuration--- */
 	// Disable mclk
 	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, 0, 8, 1);
-
-    // Select clk source, 0=ddr_pll; 1=Multi-Phase PLL0; 2=Multi-Phase PLL1; 3=Multi-Phase PLL2.
-	WRITE_MPEG_REG_BITS(HHI_AUD_CLK_CNTL, I2S_PLL_SRC, 9, 2);
-
     // Set pll over mclk ratio
     //we want 256fs ADC MLCK,so for over clock mode,divide more 2 than I2S  DAC CLOCK
 #if OVERCLOCK == 0
@@ -1059,12 +830,12 @@ void audio_enable_ouput(int flag)
     //audio_out_enabled(flag);
 }
 
-int if_audio_out_enable()
+int if_audio_out_enable(void)
 {
 	return READ_MPEG_REG_BITS(AIU_MEM_I2S_CONTROL, 1, 2);
 }
-int if_958_audio_out_enable()
-{
+int if_958_audio_out_enable(void)
+{
 	return READ_MPEG_REG_BITS(AIU_MEM_IEC958_CONTROL,1,2);
 }
 
@@ -1099,7 +870,7 @@ void audio_hw_958_reset(unsigned slow_domain, unsigned fast_domain)
                    (slow_domain << 3) | (fast_domain << 2));
 }
 
-void audio_hw_958_raw()
+void audio_hw_958_raw(void)
 {
     if (ENABLE_IEC958) {
          WRITE_MPEG_REG(AIU_958_MISC, 1);
diff --git a/sound/soc/aml/m8/aml_audio_hw.h b/sound/soc/aml/m8/aml_audio_hw.h
index 9b1abaab8c1b..33f2a51c2bb8 100755
--- a/sound/soc/aml/m8/aml_audio_hw.h
+++ b/sound/soc/aml/m8/aml_audio_hw.h
@@ -67,6 +67,7 @@ enum {
 	AML_AUDIO_PCMIN = 1<<4,
 	AML_AUDIO_PCMOUT = 1<<5,				
 };
+
 #define AUDIO_CLK_256FS             0
 #define AUDIO_CLK_384FS             1
 
@@ -113,8 +114,7 @@ unsigned int audio_in_i2s_rd_ptr(void);
 unsigned int audio_in_i2s_wr_ptr(void);
 unsigned int audio_in_spdif_wr_ptr(void);
 void audio_set_i2s_mode(u32 mode);
-void audio_set_clk(unsigned freq, unsigned fs_config);
-void audio_set_i2s_clk(unsigned freq, unsigned fs_config);
+void audio_set_i2s_clk(unsigned freq, unsigned fs_config, unsigned mpll);
 void audio_set_958_clk(unsigned freq, unsigned fs_config);
 void audio_enable_ouput(int flag);
 unsigned int read_i2s_rd_ptr(void);
diff --git a/sound/soc/aml/m8/aml_i2s.h b/sound/soc/aml/m8/aml_i2s.h
index 81ee2a691874..62cdab33d24b 100755
--- a/sound/soc/aml/m8/aml_i2s.h
+++ b/sound/soc/aml/m8/aml_i2s.h
@@ -1,5 +1,5 @@
-#ifndef __AML_PCM_H__
-#define __AML_PCM_H__
+#ifndef __AML_I2S_H__
+#define __AML_I2S_H__
 
 //#define debug_printk
 #ifdef debug_printk
diff --git a/sound/soc/aml/m8/aml_i2s_dai.c b/sound/soc/aml/m8/aml_i2s_dai.c
index 6856b9f41f0f..5668ab1f589e 100755
--- a/sound/soc/aml/m8/aml_i2s_dai.c
+++ b/sound/soc/aml/m8/aml_i2s_dai.c
@@ -29,11 +29,8 @@
 static aml_dai_info_t dai_info[3] = {{0}};
 static int i2s_pos_sync = 0;
 //#define AML_DAI_DEBUG
-//#define AML_DAI_PCM_SUPPORT 
-
-
 #define ALSA_PRINT(fmt,args...)	printk(KERN_INFO "[aml-i2s-dai]" fmt,##args)
-#ifdef DEBUG_ALSA_SOC_DAI_SPDIF
+#ifdef AML_DAI_DEBUG
 #define ALSA_DEBUG(fmt,args...) 	printk(KERN_INFO "[aml-i2s-dai]" fmt,##args)
 #define ALSA_TRACE()     			printk("[aml-i2s-dai] enter func %s,line %d\n",__FUNCTION__,__LINE__)
 #else
@@ -47,30 +44,28 @@ for the case that only use our ALSA driver for PCM s/pdif output.
 */
 static void  aml_hw_i2s_init(struct snd_pcm_runtime *runtime)
 {
-
-		unsigned i2s_mode = AIU_I2S_MODE_PCM16;
-		switch(runtime->format){
-		case SNDRV_PCM_FORMAT_S32_LE:
-			i2s_mode = AIU_I2S_MODE_PCM32;
-			break;
-		case SNDRV_PCM_FORMAT_S24_LE:
-			i2s_mode = AIU_I2S_MODE_PCM24;
-			break;
-		case SNDRV_PCM_FORMAT_S16_LE:
-			i2s_mode = AIU_I2S_MODE_PCM16;
-			break;
-		}
-		audio_set_i2s_mode(i2s_mode);
-		audio_set_aiubuf(runtime->dma_addr, runtime->dma_bytes,runtime->channels);
-		ALSA_PRINT("i2s dma %x,phy addr %x,mode %d,ch %d \n",(unsigned)runtime->dma_area,(unsigned)runtime->dma_addr,i2s_mode,runtime->channels);
-
+	unsigned i2s_mode = AIU_I2S_MODE_PCM16;
+	switch(runtime->format){
+	case SNDRV_PCM_FORMAT_S32_LE:
+		i2s_mode = AIU_I2S_MODE_PCM32;
+		break;
+	case SNDRV_PCM_FORMAT_S24_LE:
+		i2s_mode = AIU_I2S_MODE_PCM24;
+		break;
+	case SNDRV_PCM_FORMAT_S16_LE:
+		i2s_mode = AIU_I2S_MODE_PCM16;
+		break;
+	}
+	audio_set_i2s_mode(i2s_mode);
+	audio_set_aiubuf(runtime->dma_addr, runtime->dma_bytes,runtime->channels);
+	ALSA_PRINT("i2s dma %x,phy addr %x,mode %d,ch %d \n",(unsigned)runtime->dma_area,(unsigned)runtime->dma_addr,i2s_mode,runtime->channels);
 }
 static int aml_dai_i2s_startup(struct snd_pcm_substream *substream,
 					struct snd_soc_dai *dai)
 {	  	
 	int ret = 0;
-    	struct snd_pcm_runtime *runtime = substream->runtime;
-    	struct aml_runtime_data *prtd = (struct aml_runtime_data *)runtime->private_data;
+    struct snd_pcm_runtime *runtime = substream->runtime;
+    struct aml_runtime_data *prtd = (struct aml_runtime_data *)runtime->private_data;
 	audio_stream_t *s;	
     ALSA_TRACE();
 	if(prtd == NULL){
@@ -94,17 +89,15 @@ static int aml_dai_i2s_startup(struct snd_pcm_substream *substream,
 out:
 	return ret;
 }
-extern void  aml_spdif_play();
+extern void  aml_spdif_play(void);
 static void aml_dai_i2s_shutdown(struct snd_pcm_substream *substream,
 					struct snd_soc_dai *dai)
 {
-	ALSA_TRACE();
     struct snd_pcm_runtime *runtime = substream->runtime;
     if(runtime->channels == 8){
         aml_spdif_play();
     }
 }
-static int  set_clock = -1;
 #define AOUT_EVENT_IEC_60958_PCM 0x1
 extern int aout_notifier_call_chain(unsigned long val,void * v);
 
@@ -113,58 +106,59 @@ static int aml_dai_i2s_prepare(struct snd_pcm_substream *substream,
 {	
 	struct snd_pcm_runtime *runtime = substream->runtime;
 	struct aml_runtime_data *prtd = runtime->private_data;
-	int  sample_rate = AUDIO_CLK_FREQ_48;
+	struct aml_i2s *i2s = snd_soc_dai_get_drvdata(dai);
+	int  audio_clk_config = AUDIO_CLK_FREQ_48;
 	audio_stream_t *s = &prtd->s;	
     ALSA_TRACE();
 	switch(runtime->rate){
 		case 192000:
-			sample_rate	=	AUDIO_CLK_FREQ_192;
+			audio_clk_config	=	AUDIO_CLK_FREQ_192;
 			break;
 		case 176400:
-			sample_rate	=	AUDIO_CLK_FREQ_1764;
+			audio_clk_config	=	AUDIO_CLK_FREQ_1764;
 			break;
 		case 96000:
-			sample_rate	=	AUDIO_CLK_FREQ_96;
+			audio_clk_config	=	AUDIO_CLK_FREQ_96;
 			break;
 		case 88200:
-			sample_rate	=	AUDIO_CLK_FREQ_882;
+			audio_clk_config	=	AUDIO_CLK_FREQ_882;
 			break;
 		case 48000:
-			sample_rate	=	AUDIO_CLK_FREQ_48;
+			audio_clk_config	=	AUDIO_CLK_FREQ_48;
 			break;
 		case 44100:
-			sample_rate	=	AUDIO_CLK_FREQ_441;
+			audio_clk_config	=	AUDIO_CLK_FREQ_441;
 			break;
 		case 32000:
-			sample_rate	=	AUDIO_CLK_FREQ_32;
+			audio_clk_config	=	AUDIO_CLK_FREQ_32;
 			break;
 		case 8000:
-			sample_rate	=	AUDIO_CLK_FREQ_8;
+			audio_clk_config	=	AUDIO_CLK_FREQ_8;
 			break;
 		case 11025:
-			sample_rate	=	AUDIO_CLK_FREQ_11;
+			audio_clk_config	=	AUDIO_CLK_FREQ_11;
 			break;
 		case 16000:
-			sample_rate	=	AUDIO_CLK_FREQ_16;
+			audio_clk_config	=	AUDIO_CLK_FREQ_16;
 			break;
 		case 22050:
-			sample_rate	=	AUDIO_CLK_FREQ_22;
+			audio_clk_config	=	AUDIO_CLK_FREQ_22;
 			break;
 		case 12000:
-			sample_rate	=	AUDIO_CLK_FREQ_12;
+			audio_clk_config	=	AUDIO_CLK_FREQ_12;
 			break;
 		case 24000:
-			sample_rate	=	AUDIO_CLK_FREQ_22;
+			audio_clk_config	=	AUDIO_CLK_FREQ_22;
 			break;
 		default:
-			sample_rate	=	AUDIO_CLK_FREQ_441;
+			audio_clk_config	=	AUDIO_CLK_FREQ_441;
 			break;
 	};
 
-    if(set_clock != sample_rate ){
-		ALSA_PRINT("enterd %s,set_clock:%d,sample_rate=%d\n",__func__,set_clock,sample_rate);
-        set_clock = sample_rate;
-        audio_set_i2s_clk(sample_rate, AUDIO_CLK_256FS);
+    if( i2s->old_samplerate != runtime->rate ){
+		ALSA_PRINT("enterd %s,old_samplerate:%d,sample_rate=%d\n",__func__,i2s->old_samplerate,runtime->rate);
+        i2s->old_samplerate = runtime->rate;
+        audio_set_i2s_clk(audio_clk_config, AUDIO_CLK_256FS, i2s->mpll);
     }
     audio_util_set_dac_i2s_format(AUDIO_ALGOUT_DAC_FORMAT_DSP); 
     
@@ -326,21 +320,40 @@ static const struct snd_soc_component_driver aml_component= {
 };
 static int aml_i2s_dai_probe(struct platform_device *pdev)
 {
+	struct aml_i2s *i2s = NULL;
+	int ret = 0;
 	printk(KERN_DEBUG "enter %s\n", __func__);
-#if 0
-	BUG_ON(pdev->id < 0);
-	BUG_ON(pdev->id >= ARRAY_SIZE(aml_dai));
-	return snd_soc_register_dai(&pdev->dev, &aml_dai[pdev->id]);
-#else
+
+	i2s = kzalloc(sizeof(struct aml_i2s), GFP_KERNEL);
+	if (!i2s) {
+		dev_err(&pdev->dev, "Can't allocate aml_i2s\n");
+		ret = -ENOMEM;
+		goto exit;
+	}
+	dev_set_drvdata(&pdev->dev, i2s);
+	
+	if(of_property_read_u32(pdev->dev.of_node, "clk_src_mpll", &i2s->mpll)){
+		printk(KERN_INFO "i2s get no clk src setting in dts, use the default mpll 0\n");
+		i2s->mpll = 0;
+	}
+	/* enable the mclk because m8 codec need it to setup */
+	audio_set_i2s_clk(AUDIO_CLK_FREQ_48, AUDIO_CLK_256FS, i2s->mpll);
+
 	return snd_soc_register_component(&pdev->dev, &aml_component,
 					 aml_i2s_dai, ARRAY_SIZE(aml_i2s_dai));
 
-#endif
+exit:
+	return ret;
 }
 
 static int aml_i2s_dai_remove(struct platform_device *pdev)
 {
+	struct aml_i2s *i2s = dev_get_drvdata(&pdev->dev);
+
 	snd_soc_unregister_component(&pdev->dev);
+	kfree(i2s);
+	i2s = NULL;
+	
 	return 0;
 }
 
diff --git a/sound/soc/aml/m8/aml_i2s_dai.h b/sound/soc/aml/m8/aml_i2s_dai.h
index 332f1da65d9d..f4f838323197 100644
--- a/sound/soc/aml/m8/aml_i2s_dai.h
+++ b/sound/soc/aml/m8/aml_i2s_dai.h
@@ -1,6 +1,11 @@
-#ifndef AML_DAI_H
-#define AML_DAI_H
+#ifndef __AML_I2S_DAI_H__
+#define __AML_I2S_DAI_H__
 
 extern struct snd_soc_dai_driver aml_dai[];
+struct aml_i2s
+{
+	int mpll;
+	int old_samplerate;
+};
 
 #endif
diff --git a/sound/soc/aml/m8/aml_pcm.h b/sound/soc/aml/m8/aml_pcm.h
index 73d68658df6b..647d83eeeac7 100644
--- a/sound/soc/aml/m8/aml_pcm.h
+++ b/sound/soc/aml/m8/aml_pcm.h
@@ -1,5 +1,5 @@
-#ifndef __AML_PCM_BT_H__
-#define __AML_PCM_BT_H__
+#ifndef __AML_PCM_H__
+#define __AML_PCM_H__
 
 struct aml_pcm_runtime_data {
 	spinlock_t			lock;
diff --git a/sound/soc/codecs/aml_m8_codec.c b/sound/soc/codecs/aml_m8_codec.c
index f4f87e9a9c8f..800a68ab87c0 100755
--- a/sound/soc/codecs/aml_m8_codec.c
+++ b/sound/soc/codecs/aml_m8_codec.c
@@ -55,7 +55,6 @@ unsigned int acodec_regbank[252] = {0x00, 0x05, 0x00, 0x01, 0x7d, 0x02, 0x7d, 0x
                                     0x00, 0x00                                                  // Reg 250 - 251
                                    };
 
-extern void audio_set_i2s_clk(unsigned freq, unsigned fs_config);
 extern unsigned audio_aiu_pg_enable(unsigned char enable);
 struct snd_soc_codec *m8_codec = NULL;
 void adac_wr_reg (unsigned long addr, unsigned long data)
@@ -600,7 +599,6 @@ extern void audio_util_set_dac_i2s_format(unsigned format);
 
 void aml_m8_codec_reset(struct snd_soc_codec* codec)
 {
-    audio_set_i2s_clk(4,0);
     aml_write_reg32(P_AUDIN_SOURCE_SEL,    1 << 0);    // Select audio codec output as I2S source
     aml_write_reg32(P_AUDIN_I2SIN_CTRL,    3 << I2SIN_SIZE             | 
                             			1 << I2SIN_CHAN_EN          |
-- 
2.19.0

