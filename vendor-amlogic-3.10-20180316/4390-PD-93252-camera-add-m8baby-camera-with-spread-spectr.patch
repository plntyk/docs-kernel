From abf4586ca60669abad44a6ad929b8248d02b2706 Mon Sep 17 00:00:00 2001
From: "zhenfei.li" <zhenfei.li@amlogic>
Date: Tue, 24 Jun 2014 17:25:43 +0800
Subject: [PATCH 4390/5965] PD #93252: camera: add m8baby camera with spread
 spectrum function.

---
 .../boot/dts/amlogic/meson8b_m101_512M.dtd    |  6 +-
 arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd |  6 ++
 drivers/amlogic/camera/common/cam_prober.c    | 60 ++++++++++++++-----
 include/linux/amlogic/camera/aml_cam_info.h   |  1 +
 4 files changed, 57 insertions(+), 16 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
index 228d0a5a97c5..8fa2eb4c0d2f 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
@@ -1216,6 +1216,7 @@ void root_func(){
     audio_dai{
         compatible = "amlogic,aml-i2s-dai";
         dev_name = "aml-i2s-dai.0";
+        clk_src_mpll =  <0>;
         status = "okay";
     };
     audio_spdif_dai{
@@ -1381,6 +1382,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <0>;
 			vertical_flip = <0>;	
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			status = "okay";
 		};
 ///	-	gc0308
@@ -1401,6 +1403,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <1>;
 			vertical_flip = <0>;
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			status = "okay";
 		};
 ///	-	gc0328
@@ -1421,6 +1424,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <0>;
 			vertical_flip = <0>;
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			status = "okay";
 		};
 	
@@ -2006,7 +2010,7 @@ sdhc_sd_clk_cmd_pins:sdhc_sd_clk_cmd_pins{
 			amlogic,setmask=<3 0x80000
 					 4 0x2
 					 9 0x37c>;
-			amlogic,clrmask=<3 0x37
+			amlogic,clrmask=<3 0x37 
 					 5 0xc0
 					 6 0x800
 					 8 0x10000>;
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
index 1bc5ae3b3b39..5f8384914c5d 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
@@ -1256,6 +1256,7 @@ void root_func(){
     audio_dai{
         compatible = "amlogic,aml-i2s-dai";
         dev_name = "aml-i2s-dai.0";
+        clk_src_mpll =  <0>;
         status = "okay";
     };
     audio_spdif_dai{
@@ -1421,6 +1422,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <1>;
 			vertical_flip = <1>;	
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			bt_path = "gpio";
 			status = "okay";
 		};
@@ -1442,6 +1444,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <0>;
 			vertical_flip = <1>;
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			status = "okay";
 		};
 ///	-	gc0328
@@ -1462,6 +1465,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <0>;
 			vertical_flip = <0>;
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			status = "okay";
 		};
 ///	-	gc2035
@@ -1482,6 +1486,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <1>;
 			vertical_flip = <1>;
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			status = "okay";
 		};
 ///	-	sp2518
@@ -1502,6 +1507,7 @@ void root_func(){
 			gpio_rst = "GPIOH_4";
 			mirror_flip = <1>;
 			vertical_flip = <1>;
+			spread_spectrum = <0>;	//0:none; 1:0.3%; 2:0.6%; 3:1.25%; 4:2.5%; 5:5%
 			status = "okay";
 		};
 	};	
diff --git a/drivers/amlogic/camera/common/cam_prober.c b/drivers/amlogic/camera/common/cam_prober.c
index bb5bea3c85e8..e971fb11c348 100755
--- a/drivers/amlogic/camera/common/cam_prober.c
+++ b/drivers/amlogic/camera/common/cam_prober.c
@@ -844,20 +844,48 @@ static resolution_size_t get_res_size(const char* res_str)
 }
 
 #ifdef CONFIG_ARCH_MESON8B
-static inline void cam_enable_clk(int clk)
+static inline void cam_spread_spectrum(int spread_spectrum)
 {
-	if (clk == 12000)
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 3, 16, 2);
-	else
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 16, 2);
+	printk("spread_spectrum = %d\n", spread_spectrum);
+	if (spread_spectrum == 1)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x1c1, 0, 9);
+	else if (spread_spectrum == 2)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x1a1, 0, 9);
+	else if (spread_spectrum == 3)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x181, 0, 9);
+	else if (spread_spectrum == 4)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x141, 0, 9);
+	else if (spread_spectrum == 5)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x121, 0, 9);
 }
 
-static inline void cam_disable_clk(void)
+static inline void cam_enable_clk(int clk, int spread_spectrum)
 {
-	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 16, 2); //close clock
+	if (spread_spectrum) {
+		cam_spread_spectrum(spread_spectrum);
+		aml_set_reg32_bits(P_HHI_MPLL_CNTL7, 0x15d063, 0, 25);
+		if (clk == 12000)
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x6809, 0, 16);
+		else
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x6804, 0, 16);
+	} else {
+		if (clk == 12000)
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 3, 16, 2);
+		else
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 16, 2);
+	}
+}
+
+static inline void cam_disable_clk(int spread_spectrum)
+{
+	if (spread_spectrum) {
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 16); //close clock
+	} else {
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 16, 2); //close clock
+	}
 }
 #elif defined CONFIG_ARCH_MESON8
-static inline void cam_enable_clk(int clk)
+static inline void cam_enable_clk(int clk, int spread_spectrum)
 {
 	if (clk == 12000) {
 		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 12, 4);
@@ -872,27 +900,27 @@ static inline void cam_enable_clk(int clk)
 	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 11, 1);
 }
 
-static inline void cam_disable_clk(void)
+static inline void cam_disable_clk(int spread_spectrum)
 {
 	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 11, 5); //close clock
 	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 7);
 }
 #elif defined CONFIG_ARCH_MESON6
-static inline void cam_enable_clk(int clk)
+static inline void cam_enable_clk(int clk, int spread_spectrum)
 {
 	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 8, 5); 
 }
 
-static inline void cam_disable_clk(void)
+static inline void cam_disable_clk(int spread_spectrum)
 {
 	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 8, 5);  //close clock
 }
 #else
-static inline void cam_enable_clk(int clk)
+static inline void cam_enable_clk(int clk, int spread_spectrum)
 {
 }
 
-static inline void cam_disable_clk(void)
+static inline void cam_disable_clk(int spread_spectrum)
 {	
 }
 #endif
@@ -911,7 +939,7 @@ void aml_cam_init(aml_cam_info_t* cam_dev)
 		pin_ctrl = pinctrl_get_select((struct device*)(&cam_pdev->dev), "gpio");
 
 	//select XTAL as camera clock
-	cam_enable_clk(cam_dev->mclk);
+	cam_enable_clk(cam_dev->mclk, cam_dev->spread_spectrum);
 	
 	msleep(20);
 	// set camera power enable
@@ -943,7 +971,7 @@ void aml_cam_uninit(aml_cam_info_t* cam_dev)
 					cam_dev->pwdn_act,"camera");
 	msleep(5);
 	
-	cam_disable_clk();
+	cam_disable_clk(cam_dev->spread_spectrum);
 	
 	p = pinctrl_get(&cam_pdev->dev);
 	if (IS_ERR(p))
@@ -1056,6 +1084,8 @@ static int fill_cam_dev(struct device_node* p_node, aml_cam_info_t* cam_dev)
 		goto err_out;
 	} 
 	
+	of_property_read_u32(p_node, "spread_spectrum", &cam_dev->spread_spectrum);
+	
 	cam_dev->pwdn_act = cam_info->pwdn;
 	cam_dev->i2c_addr = cam_info->addr;
 	printk("camer addr: 0x%x\n", cam_dev->i2c_addr);
diff --git a/include/linux/amlogic/camera/aml_cam_info.h b/include/linux/amlogic/camera/aml_cam_info.h
index eee10f0e5544..d3f42d215534 100755
--- a/include/linux/amlogic/camera/aml_cam_info.h
+++ b/include/linux/amlogic/camera/aml_cam_info.h
@@ -76,6 +76,7 @@ typedef struct {
 	unsigned flash_support;
 	unsigned flash_ctrl_level;
 	unsigned vcm_mode;
+	unsigned spread_spectrum;
 	bt_path_t bt_path;
 	cam_interface_t         interface;
 	clk_channel_t           clk_channel;
-- 
2.19.0

