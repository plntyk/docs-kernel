From d42454086d33cafed2eef00f49f8a5e658cf2b57 Mon Sep 17 00:00:00 2001
From: "benlong.zhou" <benlong.zhou@amlogic.com>
Date: Thu, 3 Jul 2014 14:07:05 +0800
Subject: [PATCH 4429/5965] PD#93184:nandkey: fixed read nandkey crash system

---
 drivers/amlogic/rtc/aml_rtc.c       | 16 +++++++++-------
 drivers/amlogic/securitykeys/core.c | 21 ++++++++++++++++++++-
 2 files changed, 29 insertions(+), 8 deletions(-)

diff --git a/drivers/amlogic/rtc/aml_rtc.c b/drivers/amlogic/rtc/aml_rtc.c
index 0aba1110e933..afc186826932 100755
--- a/drivers/amlogic/rtc/aml_rtc.c
+++ b/drivers/amlogic/rtc/aml_rtc.c
@@ -706,13 +706,15 @@ static int aml_rtc_probe(struct platform_device *pdev)
 	static char keyexamples[4096];
 #endif
 #ifdef CONFIG_SECURITYKEY
-	extenal_api_key_set_version("auto3");
-	ret = get_aml_key_kernel("keyexample", keyexamples, 1);
-	if(ret >= 0){
-		printk("key name:keyexample, key data:%s\n",keyexamples);
-	}
-	else{
-		printk("get keyexample fail, %s:%d\n",__func__,__LINE__);
+	ret = extenal_api_key_set_version("auto3");
+	if(ret >=0){
+		ret = get_aml_key_kernel("keyexample", keyexamples, 1);
+		if(ret >= 0){
+			printk("key name:keyexample, key data:%s\n",keyexamples);
+		}
+		else{
+			printk("get keyexample fail, %s:%d\n",__func__,__LINE__);
+		}
 	}
 #endif
 
diff --git a/drivers/amlogic/securitykeys/core.c b/drivers/amlogic/securitykeys/core.c
index 633a9e6efcce..c04b1d74af92 100644
--- a/drivers/amlogic/securitykeys/core.c
+++ b/drivers/amlogic/securitykeys/core.c
@@ -1258,6 +1258,9 @@ static ssize_t key_list_show(struct device *dev, struct device_attribute *attr,
 {
 	aml_key_t * keys;
 	int i,n=0;
+	if(keys_version == 0){
+		return -EINVAL;
+	}
 	keys = key_schematic[keys_version]->keys;
 	for(i=0;i<key_schematic[keys_version]->count;i++)
 	{
@@ -1299,6 +1302,9 @@ static ssize_t key_name_store(struct device *dev, struct device_attribute *attr,
 	int i,cnt,suffix;
 	char *name;
 	char *cmd,*oldname=NULL,*newname;
+	if(keys_version == 0){
+		return -EINVAL;
+	}
 	keys = key_schematic[keys_version]->keys;
 
 	name = kzalloc(count+1, GFP_KERNEL);
@@ -1464,6 +1470,9 @@ static ssize_t key_usid_show(struct device *dev, struct device_attribute *attr,
 	int i,j,err=0;
 	int count;
 	char * data=NULL;
+	if(keys_version == 0){
+		return -EINVAL;
+	}
 	keys = key_schematic[keys_version]->keys;
 	for(i=0;i<key_schematic[keys_version]->count;i++)
 	{
@@ -1618,6 +1627,9 @@ static ssize_t version_available_show(struct device *dev,
     int i,j;
     ssize_t n=0;
     aml_key_t * key;
+    if(keys_version == 0){
+		return -EINVAL;
+	}
     key=key_schematic[keys_version]->keys;
     n+=sprintf(&buf[n],"key version %d\n",keys_version);
     for(i=0;i<key_schematic[keys_version]->count;i++)
@@ -1665,6 +1677,9 @@ static ssize_t install_key(struct device *dev, struct device_attribute *attr,
     aml_key_t * key;
     char * name, *data;
     int i;
+    if(keys_version == 0){
+		return -EINVAL;
+	}
     data = strstr(buf, "=");
     *data++ = 0;
     name = (char*) buf;
@@ -1780,7 +1795,10 @@ int get_aml_key_kernel(const char* key_name, unsigned char* data, int ascii_flag
 	}
 	memset(buf, 0, MAX_BUF_LEN);
 	//printk("11111111\n");
-	key_name_store(NULL, NULL, key_name, strlen(key_name));
+	ret = key_name_store(NULL, NULL, key_name, strlen(key_name));
+	if(ret < 0){
+		goto exit;
+	}
 	//printk("2222222\n");
 	ret = key_read_show(NULL, NULL, buf);
 	//printk("hdcp strlen is %d\n", strlen(buf));
@@ -1795,6 +1813,7 @@ int get_aml_key_kernel(const char* key_name, unsigned char* data, int ascii_flag
 			strncpy(data, buf, MAX_BUF_LEN);
 		}
 	}
+exit:
 	kfree(buf);
 	buf = NULL;
 	return ret;
-- 
2.19.0

