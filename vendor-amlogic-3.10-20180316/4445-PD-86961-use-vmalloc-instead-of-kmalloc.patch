From 52ccd94558eea55a960b5bb47e1191ab3e136900 Mon Sep 17 00:00:00 2001
From: "xiaoyu.yuan" <xiaoyu.yuan@droid05.amlogic.com>
Date: Sat, 5 Jul 2014 21:30:37 +0800
Subject: [PATCH 4445/5965] PD #86961: use vmalloc instead of kmalloc

commit 8778b0a8e12e7365b2403078615bf4025fb9b23c
Author: jiyu.yang <jiyu.yang@amlogic.com>
Date:   Sat Jul 5 21:28:49 2014 +0800

    compile error

commit 2834bfa5c024a6db279fd8f91b889633bce67f89
Author: xiaoyu.yuan <xiaoyu.yuan@droid05.amlogic.com>
Date:   Tue Jun 3 15:25:12 2014 +0800

    PD #86961: use vmalloc instead of kmalloc

    use vmalloc instead of kmalloc to avoid camera opening failed
    when low memory

    Conflicts:

    drivers/amlogic/camera/ar0543.c
---
 drivers/amlogic/camera/ar0543.c               | 67 ++++++++-----------
 drivers/amlogic/camera/ar0833.c               |  8 ++-
 drivers/amlogic/camera/common/config_parser.c | 41 ++++++------
 drivers/amlogic/camera/ov5647.c               |  2 +-
 4 files changed, 54 insertions(+), 64 deletions(-)

diff --git a/drivers/amlogic/camera/ar0543.c b/drivers/amlogic/camera/ar0543.c
index 599c1d0bc259..fb5805298bb7 100755
--- a/drivers/amlogic/camera/ar0543.c
+++ b/drivers/amlogic/camera/ar0543.c
@@ -118,8 +118,7 @@ static int t_index = -1;
 static int dest_hactive = 640;
 static int dest_vactive = 480;
 static bool bDoingAutoFocusMode = false;
-static configure_t *cf = NULL;
-static cam_parameter_t *g_cp = NULL;
+static configure_t *cf;
 /* supported controls */
 static struct v4l2_queryctrl ar0543_qctrl[] = {
 	{
@@ -2610,21 +2609,21 @@ static resolution_param_t  debug_prev_resolution_array[] = {
 	}, {
 		.frmsize			= {1280, 960},
 		.active_frmsize		= {2592, 1944},
-		.active_fps			= 7.5,
+		.active_fps			= 15,
 		.size_type			= SIZE_1280X960,
 		.reg_script[0]		= AR0543_preview_960P_script,
 		.reg_script[1]		= AR0543_5M_script_mipi,
 	}, {
 		.frmsize			= {1920, 1080},
 		.active_frmsize		= {1920, 1080},
-		.active_fps			= 15,
+		.active_fps			= 30,
 		.size_type			= SIZE_1920X1080,
 		.reg_script[0]		= AR0543_preview_1080P_script,
 		.reg_script[1]		= AR0543_1080P_script_mipi,
 	},{
 		.frmsize			= {2592, 1944},
 		.active_frmsize		= {2592, 1944},
-		.active_fps			= 7.5,
+		.active_fps			= 15,
 		.size_type			= SIZE_2592X1944,
 		.reg_script[0]		= AR0543_capture_5M_script,
 		.reg_script[1]		= AR0543_5M_script_mipi,
@@ -2635,7 +2634,7 @@ static resolution_param_t  capture_resolution_array[] = {
 	{
 		.frmsize			= {2592, 1944},
 		.active_frmsize		= {2592, 1944},
-		.active_fps			= 7.5,
+		.active_fps			= 15,
 		.size_type			= SIZE_2592X1944,
 		.reg_script[0]			= AR0543_capture_5M_script,
 		.reg_script[1]			= AR0543_5M_script_mipi,
@@ -4625,10 +4624,7 @@ static int ar0543_open(struct file *file)
     aml_cam_init(&dev->cam_info);
     printk("config path:%s\n",(dev->cam_info).config);
     if((dev->cam_info).config != NULL){
-		if(cf != NULL){
-			dev->configure = cf ;
-			printk("dgt, has a configure:%p. usi it\n", cf);
-		}else if((dev->configure = vmalloc(sizeof(configure_t))) != NULL){
+        if((dev->configure = vmalloc(sizeof(configure_t))) != NULL){
             if(parse_config((dev->cam_info).config,dev->configure) == 0){
                 printk("parse successfully, pointer:%p\n", dev->configure);
             }else{
@@ -4640,10 +4636,7 @@ static int ar0543_open(struct file *file)
             return -ENOMEM;
         }      
     }
-	if(g_cp != NULL){
-		printk("dgt, has a cam_para:%p,use it\n", g_cp);
-		dev->cam_para = g_cp;
-	}else{ 
+ 
 		if((dev->cam_para = vmalloc(sizeof(cam_parameter_t))) == NULL){
 			printk("memalloc failed\n");
 			return -ENOMEM;
@@ -4654,13 +4647,13 @@ static int ar0543_open(struct file *file)
 			vfree(dev->cam_para);
 			return -EINVAL;
 		}
-	}
+	
     dev->cam_para->cam_function.set_aet_new_step = AR0543_set_aet_new_step;
     dev->cam_para->cam_function.check_mains_freq = AR0543_check_mains_freq;
     dev->cam_para->cam_function.set_af_new_step = AR0543_set_af_new_step;
     dev->camera_priv_data.configure = dev->configure;
     dev->cam_para->cam_function.priv_data = (void *)&dev->camera_priv_data;  
-	g_cp = dev->cam_para;
+
     dev->ae_on = false;
     AR0543_init_regs(dev);
     msleep(40);
@@ -4776,6 +4769,7 @@ static int ar0543_close(struct file *file)
     struct ar0543_device *dev       = fh->dev;
     struct ar0543_dmaqueue *vidq = &dev->vidq;
     struct video_device  *vdev = video_devdata(file);
+    int i=0;
     ar0543_have_open = 0;
     capture_proc = 0;
     ar0543_stop_thread(vidq);
@@ -4787,9 +4781,24 @@ static int ar0543_close(struct file *file)
     videobuf_mmap_free(&fh->vb_vidq);
 
     kfree(fh);
-
-	dev->configure = NULL;
-    dev->cam_para = NULL;
+    if(dev->configure != NULL){
+        if(dev->configure->aet_valid){
+            for(i = 0; i < dev->configure->aet.sum; i++){
+                kfree(dev->configure->aet.aet[i].info);
+                dev->configure->aet.aet[i].info = NULL;
+                vfree(dev->configure->aet.aet[i].aet_table);
+                dev->configure->aet.aet[i].aet_table = NULL;
+            }
+        }
+        vfree(dev->configure);
+        dev->configure = NULL;
+    }
+    cf = NULL;
+    if(dev->cam_para != NULL ){
+        free_para(dev->cam_para);
+        kfree(dev->cam_para);
+        dev->cam_para = NULL;
+    }
 	dev->camera_priv_data.sensor_aet_table = NULL;
 	dev->camera_priv_data.sensor_aet_info = NULL;
     mutex_lock(&dev->mutex);
@@ -5039,8 +5048,6 @@ static int ar0543_probe(struct i2c_client *client,
 	}
 	device_create_file( &t->vdev->dev, &dev_attr_cam_info);
 
-	cf = NULL;
-	g_cp = NULL;
 
 	return 0;
 }
@@ -5054,24 +5061,6 @@ static int ar0543_remove(struct i2c_client *client)
 	v4l2_device_unregister_subdev(sd);
 	wake_lock_destroy(&(t->wake_lock));
 	kfree(t);
-	if(cf){
-		if(cf->aet_valid){
-			int i =0;
-            for(i = 0; i < cf->aet.sum; i++){
-                vfree(cf->aet.aet[i].info);
-                cf->aet.aet[i].info = NULL;
-                vfree(cf->aet.aet[i].aet_table);
-                cf->aet.aet[i].aet_table = NULL;
-            }
-        }
-        vfree(cf);
-        cf = NULL;
-	}
-	if(g_cp){
-        free_para(g_cp);
-		vfree(g_cp);
-		g_cp = NULL;
-	}
 	return 0;
 }
 
diff --git a/drivers/amlogic/camera/ar0833.c b/drivers/amlogic/camera/ar0833.c
index 8aa395e9bf04..2e9196eb413a 100755
--- a/drivers/amlogic/camera/ar0833.c
+++ b/drivers/amlogic/camera/ar0833.c
@@ -33,6 +33,7 @@
 #include <media/v4l2-device.h>
 #include <media/v4l2-ioctl.h>
 #include <linux/wakelock.h>
+#include <linux/vmalloc.h>
 
 #include <linux/i2c.h>
 #include <media/v4l2-chip-ident.h>
@@ -5464,7 +5465,7 @@ static int ar0833_open(struct file *file)
     aml_cam_init(&dev->cam_info);
     printk("config path:%s\n",(dev->cam_info).config);
     if((dev->cam_info).config != NULL){
-        if((dev->configure = kmalloc(sizeof(configure_t),0)) != NULL){
+        if((dev->configure = vmalloc(sizeof(configure_t))) != NULL){
             if(parse_config((dev->cam_info).config,dev->configure) == 0){
                 printk("parse successfully");
             }else{
@@ -5620,11 +5621,12 @@ static int ar0833_close(struct file *file)
             for(i = 0; i < dev->configure->aet.sum; i++){
                 kfree(dev->configure->aet.aet[i].info);
                 dev->configure->aet.aet[i].info = NULL;
-                kfree(dev->configure->aet.aet[i].aet_table);
+                vfree(dev->configure->aet.aet[i].aet_table);
                 dev->configure->aet.aet[i].aet_table = NULL;
             }
         }
-        kfree(cf);
+        vfree(dev->configure);
+        dev->configure = NULL;
     }
     if(dev->cam_para != NULL ){
         free_para(dev->cam_para);
diff --git a/drivers/amlogic/camera/common/config_parser.c b/drivers/amlogic/camera/common/config_parser.c
index 457693d928d2..345df67a9aa4 100755
--- a/drivers/amlogic/camera/common/config_parser.c
+++ b/drivers/amlogic/camera/common/config_parser.c
@@ -1,7 +1,7 @@
 #include "config_parser.h"
 #include <linux/uaccess.h>  
 #include <linux/fs.h>  
-
+#include <linux/vmalloc.h>
 
 static struct file  *fp;
 mm_segment_t fs;
@@ -36,10 +36,10 @@ void *realloc_mem(char *buffer, int new_size,int *old_size){
     }
     else{
         char *tmp;
-        if((tmp = kzalloc(new_size,0)) != NULL){
+        if((tmp = vmalloc(new_size)) != NULL){
             memcpy(tmp,buffer,*old_size);
             *old_size = new_size;
-            kfree(buffer);
+            vfree(buffer);
             return tmp;
         }else
             return NULL;
@@ -191,8 +191,7 @@ char *search_string(buffer_para_t *buf_para,int *offset,int *remained,char *star
     data_start = buf_para->data_start;
     data_size = buf_para->data_size;
     buffer_len = buf_para->buffer_len;
-    
-    iter = strstr(buffer + data_start,start);   
+    iter = strstr(buffer + data_start,start);  
     while(iter == NULL){
         if(iter == NULL && *remained < strlen(start)){
             printk("wrong config file");
@@ -524,9 +523,9 @@ int parse_aet(configure_t *cf,buffer_para_t *buf_para,int *remained,int *offset)
             ret = -WRONG_FORMAT;
             goto clean;
         }
-        if((cf->aet.aet[check].aet_table = (sensor_aet_t *)kmalloc(sizeof(sensor_aet_t) * (cf->aet.aet[check].info->tbl_max_step + 1),0)) == NULL){
+        if((cf->aet.aet[check].aet_table = (sensor_aet_t *)vmalloc(sizeof(sensor_aet_t) * (cf->aet.aet[check].info->tbl_max_step + 1))) == NULL){
     		for(i = 0; i < check; i++){
-    			kfree(cf->aet.aet[i].aet_table);	
+    			vfree(cf->aet.aet[i].aet_table);	
     		}
     		ret = -NO_MEM;
             goto clean;
@@ -547,7 +546,7 @@ int parse_aet(configure_t *cf,buffer_para_t *buf_para,int *remained,int *offset)
 
 clean_table:
 	for(i = 0; i <= check; i++){
-    	kfree(cf->aet.aet[i].aet_table);	
+    	vfree(cf->aet.aet[i].aet_table);	
     }
 clean:
     for(i = 0;i < sum; i++){
@@ -927,7 +926,6 @@ int parse_wb_sensor(configure_t *cf,buffer_para_t *buf_para,int *remained,int *o
 int parse_version(configure_t *cf,buffer_para_t *buf_para,int *remained,int *offset){
     char *iter,*end;
     int len = 0;
-
     iter = search_string(buf_para,offset,remained,"version_start]","[version_end]");
     if(iter == NULL){
         return -WRONG_FORMAT;
@@ -1091,7 +1089,7 @@ int parse_config(const char *path,configure_t *cf){
     int ret = 0;
     buffer_para_t buf_para;
 
-    if((buffer=(char *)kmalloc(BUFFER_SIZE + 1,0))== NULL){
+    if((buffer=(char *)vmalloc(BUFFER_SIZE + 1))== NULL){
         printk("malloc buffer failed\n");
         return -NO_MEM;
     }
@@ -1117,6 +1115,7 @@ int parse_config(const char *path,configure_t *cf){
             camera_read_config(0,BUFFER_SIZE,buffer);
             remained_size = file_size - BUFFER_SIZE;
             read_offset = BUFFER_SIZE;
+            *(buffer + BUFFER_SIZE) = '\0';
         }
     }
     buf_para.data_start = 0;
@@ -1315,7 +1314,7 @@ int parse_config(const char *path,configure_t *cf){
 clean_all:
     camera_close_config();
 clean_mem:
-    kfree(buf_para.buffer);
+    vfree(buf_para.buffer);
     return ret;
 }
 
@@ -1455,7 +1454,7 @@ int generate_para(cam_parameter_t *para,para_index_t pindex,configure_t *cf){
     }
     /**init scenes**/
     if(cf->scene_valid == 1){
-        if((para->xml_scenes = kmalloc(sizeof(xml_scenes_t),0)) == NULL){
+        if((para->xml_scenes = vmalloc(sizeof(xml_scenes_t))) == NULL){
             printk("alloc mem failed\n");
             return 	-ENOMEM;
         }
@@ -1469,7 +1468,7 @@ int generate_para(cam_parameter_t *para,para_index_t pindex,configure_t *cf){
 
     /**init hw**/
     if(cf->hw_valid == 1){
-        if((para->xml_regs_map = kmalloc(sizeof(xml_default_regs_t),0)) == NULL){
+        if((para->xml_regs_map = vmalloc(sizeof(xml_default_regs_t))) == NULL){
             printk("alloc mem failed\n");
             return 	-ENOMEM;
         }
@@ -1489,7 +1488,7 @@ int generate_para(cam_parameter_t *para,para_index_t pindex,configure_t *cf){
     /** init gamma **/
     if(cf->gamma_valid == 1){
         if(para->xml_regs_map == NULL){
-            if((para->xml_regs_map = kmalloc(sizeof(xml_default_regs_t),0)) == NULL){
+            if((para->xml_regs_map = vmalloc(sizeof(xml_default_regs_t))) == NULL){
                 printk("alloc mem failed\n");
                 return 	-ENOMEM;
             }
@@ -1524,7 +1523,7 @@ int generate_para(cam_parameter_t *para,para_index_t pindex,configure_t *cf){
 
     /**init capture**/
     if(cf->capture_valid == 1){
-        if((para->xml_capture = kmalloc(sizeof(xml_capture_t),0)) == NULL){
+        if((para->xml_capture = vmalloc(sizeof(xml_capture_t))) == NULL){
             printk("alloc mem failed\n");
             return 	-ENOMEM;
         }
@@ -1560,11 +1559,11 @@ void free_para(cam_parameter_t *para){
 		para->xml_peripheral = NULL;	
 	}
 	if(para->xml_scenes != NULL){
-		kfree(para->xml_scenes);
+		vfree(para->xml_scenes);
 		para->xml_scenes = NULL;	
 	}
 	if(para->xml_regs_map != NULL){
-		kfree(para->xml_regs_map);
+		vfree(para->xml_regs_map);
 		para->xml_regs_map = NULL;	
 	}
 	if(para->xml_effect_manual != NULL){
@@ -1576,7 +1575,7 @@ void free_para(cam_parameter_t *para){
 		para->xml_wb_manual = NULL;	
 	}
 	if(para->xml_capture != NULL){
-		kfree(para->xml_capture);
+		vfree(para->xml_capture);
 		para->xml_capture = NULL;	
 	}
 	if(para->xml_wave != NULL){
@@ -1602,7 +1601,7 @@ int update_fmt_para(int width,int height,cam_parameter_t *para,para_index_t *pin
 		}
 		/** init lens **/
         if(para->xml_regs_map == NULL){
-            if((para->xml_regs_map = kmalloc(sizeof(xml_default_regs_t),0)) == NULL){
+            if((para->xml_regs_map = vmalloc(sizeof(xml_default_regs_t))) == NULL){
                 printk("alloc mem failed\n");
                 return 	-ENOMEM;
             }
@@ -1626,7 +1625,7 @@ int update_fmt_para(int width,int height,cam_parameter_t *para,para_index_t *pin
 		}
 			/** init nr **/
 		if(para->xml_regs_map == NULL){
-			if((para->xml_regs_map = kmalloc(sizeof(xml_default_regs_t),0)) == NULL){
+			if((para->xml_regs_map = vmalloc(sizeof(xml_default_regs_t))) == NULL){
 				printk("alloc mem failed\n");
 				return 	-ENOMEM;
 			}
@@ -1650,7 +1649,7 @@ int update_fmt_para(int width,int height,cam_parameter_t *para,para_index_t *pin
 		}
 		    /** init sharp **/
 		if(para->xml_regs_map == NULL){
-			if((para->xml_regs_map = kmalloc(sizeof(xml_default_regs_t),0)) == NULL){
+			if((para->xml_regs_map = vmalloc(sizeof(xml_default_regs_t))) == NULL){
 				printk("alloc mem failed\n");
 				return 	-ENOMEM;
 			}
diff --git a/drivers/amlogic/camera/ov5647.c b/drivers/amlogic/camera/ov5647.c
index d5c0c1b45c92..60b187c5339d 100755
--- a/drivers/amlogic/camera/ov5647.c
+++ b/drivers/amlogic/camera/ov5647.c
@@ -4239,7 +4239,7 @@ static int ov5647_close(struct file *file)
             for(i = 0; i < dev->configure->aet.sum; i++){
                 kfree(dev->configure->aet.aet[i].info);
                 dev->configure->aet.aet[i].info = NULL;
-                kfree(dev->configure->aet.aet[i].aet_table);
+                vfree(dev->configure->aet.aet[i].aet_table);
                 dev->configure->aet.aet[i].aet_table = NULL;
             }
         }
-- 
2.19.0

