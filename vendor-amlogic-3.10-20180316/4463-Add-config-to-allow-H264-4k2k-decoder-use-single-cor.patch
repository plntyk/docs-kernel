From 8543ff69ac3a3ab5848749cfe242e02b6ca96fb1 Mon Sep 17 00:00:00 2001
From: timyao <tim.yao@amlogic.com>
Date: Tue, 1 Jul 2014 14:20:58 -0700
Subject: [PATCH 4463/5965] Add config to allow H264 4k2k decoder use single
 core.

---
 drivers/amlogic/amports/Makefile              |  5 ++
 drivers/amlogic/amports/amports_config.h      | 45 +++++------
 drivers/amlogic/amports/amstream.c            |  2 +
 .../amports/m8/ucode/h264_4k2k/Makefile       |  1 +
 drivers/amlogic/amports/vdec.c                |  2 +-
 drivers/amlogic/amports/vdec_reg.h            | 21 ++++-
 drivers/amlogic/amports/vh264_4k2k.c          | 79 +++++++++++++++++--
 7 files changed, 122 insertions(+), 33 deletions(-)

diff --git a/drivers/amlogic/amports/Makefile b/drivers/amlogic/amports/Makefile
index 2770e02c2c07..08e81b16b61e 100755
--- a/drivers/amlogic/amports/Makefile
+++ b/drivers/amlogic/amports/Makefile
@@ -166,3 +166,8 @@ obj-$(CONFIG_VSYNC_RDMA) += rdma.o
 ifneq ($(CONFIG_AM_DVB),)
 EXTRA_CFLAGS = -DENABLE_DEMUX_DRIVER -DMODIFY_TIMESTAMP_INC_WITH_PLL -DCALC_CACHED_TIME #-DUSE_VMASTER_MODE
 endif
+
+ifneq ($(CONFIG_ARCH_MESON8M2),)
+EXTRA_CFLAGS += -DCONFIG_H264_4K2K_SINGLE_CORE
+endif
+
diff --git a/drivers/amlogic/amports/amports_config.h b/drivers/amlogic/amports/amports_config.h
index 5303ee54d9d1..79d81cdd8474 100755
--- a/drivers/amlogic/amports/amports_config.h
+++ b/drivers/amlogic/amports/amports_config.h
@@ -8,37 +8,35 @@ value seem:
 arch\arm\plat-meson\include\plat\cpu.h
 */
 
-
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8M2
-#define HAS_VPU_PROT    1
-#define HAS_VDEC2       1
-#define HAS_HDEC        1
-#define HAS_HEVC_VDEC   1
+#define HAS_VPU_PROT  1
+#define HAS_VDEC2     0
+#define HAS_HEVC_VDEC 1
+#define HAS_HDEC      1
 
-#elif MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
-#define HAS_VPU_PROT    0
-#define HAS_VDEC2       0
-#define HAS_HEVC_VDEC   1
-#define HAS_HDEC        1
+#elif MESON_CPU_TYPEi == MESON_CPU_TYPE_MESON8B
+#define HAS_VPU_PROT  0
+#define HAS_VDEC2     0
+#define HAS_HEVC_VDEC 1
+#define HAS_HDEC      1
 
 #elif MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-#define HAS_VPU_PROT    1
-#define HAS_VDEC2       1
-#define HAS_HDEC        1
-#define HAS_HEVC_VDEC   0
+#define HAS_VPU_PROT  1
+#define HAS_VDEC2     1
+#define HAS_HDEC      1
+#define HAS_HEVC_VDEC 0
 
 #elif  MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
-#define HAS_VPU_PROT    0
-#define HAS_VDEC2       1
-#define HAS_HDEC        1
-#define HAS_HEVC_VDEC   0
+#define HAS_VPU_PROT  0
+#define HAS_VDEC2     1
+#define HAS_HDEC      1
+#define HAS_HEVC_VDEC 0
 
 #else
-#define HAS_VPU_PROT    0
-#define HAS_VDEC2       0
-#define HAS_HEVC_VDEC   0
-#define HAS_HDEC        0
-
+#define HAS_VPU_PROT  0
+#define HAS_VDEC2     0
+#define HAS_HEVC_VDEC 0
+#define HAS_HDEC      0
 #endif
 
 #ifndef CONFIG_AM_VDEC_H265
@@ -46,6 +44,5 @@ arch\arm\plat-meson\include\plat\cpu.h
 #define HAS_HEVC_VDEC   0
 #endif
 
-
 #endif //AMPORTS_CONFIG_HHH
 
diff --git a/drivers/amlogic/amports/amstream.c b/drivers/amlogic/amports/amstream.c
index c981b110a327..875ab121111f 100755
--- a/drivers/amlogic/amports/amstream.c
+++ b/drivers/amlogic/amports/amstream.c
@@ -691,9 +691,11 @@ static  int amstream_port_init(stream_port_t *port)
     }
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     if ((port->type & PORT_TYPE_VIDEO) && (port->vformat == VFORMAT_H264_4K2K)) {
         stbuf_vdec2_init(pvbuf);
     }
+#endif
 #endif
 
     tsync_audio_break(0); // clear audio break
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/Makefile b/drivers/amlogic/amports/m8/ucode/h264_4k2k/Makefile
index 50350ed79bdd..652255b6e99c 100755
--- a/drivers/amlogic/amports/m8/ucode/h264_4k2k/Makefile
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/Makefile
@@ -1,2 +1,3 @@
 
 obj-y				+= vh264_4k2k_mc.o
+
diff --git a/drivers/amlogic/amports/vdec.c b/drivers/amlogic/amports/vdec.c
index 07536ef73091..464b7b737550 100644
--- a/drivers/amlogic/amports/vdec.c
+++ b/drivers/amlogic/amports/vdec.c
@@ -43,7 +43,7 @@
 
 static DEFINE_SPINLOCK(lock);
 
-#if HAS_HEVC_VDEC
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
 /*
 HHI_VDEC_CLK_CNTL
 0x1078[11:9] (fclk = 2550MHz)
diff --git a/drivers/amlogic/amports/vdec_reg.h b/drivers/amlogic/amports/vdec_reg.h
index dcded3496645..c386bdf55641 100755
--- a/drivers/amlogic/amports/vdec_reg.h
+++ b/drivers/amlogic/amports/vdec_reg.h
@@ -20,6 +20,10 @@
 #ifndef VDEC_REG_H
 #define VDEC_REG_H
 
+#include <linux/kernel.h>
+#include <linux/amlogic/amports/vformat.h>
+#include "vdec.h"
+
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define READ_AOREG(r) (__raw_readl((volatile void __iomem *)AOBUS_REG_ADDR(r)))
 #define WRITE_AOREG(r, val) __raw_writel(val, (volatile void __iomem *)(AOBUS_REG_ADDR(r)))
@@ -30,8 +34,21 @@
 #endif
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-#define READ_VREG(r) (__raw_readl((volatile void __iomem *)DOS_REG_ADDR(r)))
-#define WRITE_VREG(r, val) __raw_writel(val, (volatile void __iomem *)(DOS_REG_ADDR(r)))
+//#define READ_VREG(r) (__raw_readl((volatile void __iomem *)DOS_REG_ADDR(r)))
+
+static inline u32 READ_VREG(u32 r)
+{
+    if (((r) > 0x2000) && ((r) < 0x3000) && !vdec_on(2)) dump_stack();
+    return __raw_readl((volatile void __iomem *)DOS_REG_ADDR(r));
+}
+
+//#define WRITE_VREG(r, val) __raw_writel(val, (volatile void __iomem *)(DOS_REG_ADDR(r)))
+static inline void WRITE_VREG(u32 r, u32 val)
+{
+    if (((r) > 0x2000) && ((r) < 0x3000) && !vdec_on(2)) dump_stack();
+    __raw_writel(val, (volatile void __iomem *)(DOS_REG_ADDR(r)));
+}
+
 #define WRITE_VREG_BITS(r, val, start, len) \
     WRITE_VREG(r, (READ_VREG(r) & ~(((1L<<(len))-1)<<(start)))|((unsigned)((val)&((1L<<(len))-1)) << (start)))
 #define SET_VREG_MASK(r, mask) WRITE_VREG(r, READ_VREG(r) | (mask))
diff --git a/drivers/amlogic/amports/vh264_4k2k.c b/drivers/amlogic/amports/vh264_4k2k.c
index 09de8243b75d..341eb5cccaac 100755
--- a/drivers/amlogic/amports/vh264_4k2k.c
+++ b/drivers/amlogic/amports/vh264_4k2k.c
@@ -44,6 +44,7 @@
 
 #include "vdec.h"
 #include "amvdec.h"
+
 #include "vh264_4k2k_mc.h"
 
 #if  MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6TVD
@@ -71,7 +72,9 @@ static void vh264_4k2k_local_init(void);
 static void vh264_4k2k_put_timer_func(unsigned long arg);
 
 static const char vh264_4k2k_dec_id[] = "vh264_4k2k-dev";
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 static const char vh264_4k2k_dec_id2[] = "vh264_4k2k-vdec2-dev";
+#endif
 
 #define PROVIDER_NAME   "decoder.h264_4k2k"
 
@@ -134,6 +137,7 @@ static struct device *cma_dev;
 #define REF_START_VIEW_0        AV_SCRATCH_M
 #define REF_START_VIEW_1        AV_SCRATCH_N
 
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 #define VDEC2_MAILBOX_COMMAND         VDEC2_AV_SCRATCH_0
 #define VDEC2_MAILBOX_DATA_0          VDEC2_AV_SCRATCH_1
 #define VDEC2_MAILBOX_DATA_1          VDEC2_AV_SCRATCH_2
@@ -157,6 +161,7 @@ static struct device *cma_dev;
 #define VDEC2_RESERVED_REG_L          VDEC2_AV_SCRATCH_L
 #define VDEC2_REF_START_VIEW_0        VDEC2_AV_SCRATCH_M
 #define VDEC2_REF_START_VIEW_1        VDEC2_AV_SCRATCH_N
+#endif
 
 /********************************************
  *  DECODE_STATUS Define
@@ -318,7 +323,11 @@ static int vh264_4k2k_event_cb(int type, void *data, void *private_data)
     if(type & VFRAME_EVENT_RECEIVER_RESET){
         unsigned long flags;
         amvdec_stop();
+
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
         amvdec2_stop();
+#endif
+
 #ifndef CONFIG_POST_PROCESS_MANAGER
         vf_light_unreg_provider(&vh264_4k2k_vf_prov);
 #endif
@@ -330,7 +339,10 @@ static int vh264_4k2k_event_cb(int type, void *data, void *private_data)
         vf_reg_provider(&vh264_4k2k_vf_prov);
 #endif
         amvdec_start();
+
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
         amvdec2_start();
+#endif
     }
 
     return 0;
@@ -342,7 +354,9 @@ int init_canvas(int start_addr, long dpb_size, int dpb_number, int mb_width, int
     int i;
     int mb_total;
     int canvas_addr = ANC0_CANVAS_ADDR;
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     int vdec2_canvas_addr = VDEC2_ANC0_CANVAS_ADDR;
+#endif
     int index = AMVDEC_H264_4K2K_CANVAS_INDEX;
     u32 disp_addr = 0xffffffff;
     bool use_alloc = false;
@@ -360,8 +374,9 @@ int init_canvas(int start_addr, long dpb_size, int dpb_number, int mb_width, int
     
     for (i=0; i<dpb_number; i++) {
         WRITE_VREG(canvas_addr++, index | ((index+1)<<8) | ((index+1)<<16));
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
         WRITE_VREG(vdec2_canvas_addr++, index | ((index+1)<<8) | ((index+1)<<16));
-
+#endif
         if (((dpb_addr + (mb_total << 8) + (mb_total << 7)) >= decoder_buffer_end) && (!use_alloc)) {
             printk("start alloc for %d/%d\n", i, dpb_number);
             use_alloc = true;
@@ -600,7 +615,9 @@ static void do_alloc_work(struct work_struct *work)
         frame_height = mb_height<<4;
 
     WRITE_VREG(REF_START_VIEW_0, video_domain_addr(ref_start_addr));
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_REF_START_VIEW_0, video_domain_addr(ref_start_addr));
+#endif
 
     WRITE_VREG(MAILBOX_DATA_0, (max_dec_frame_buffering << 8) | (total_dec_frame_buffering << 0));
     WRITE_VREG(MAILBOX_DATA_1, ref_size);
@@ -726,6 +743,7 @@ static irqreturn_t vh264_4k2k_isr(int irq, void *dev_id)
 }
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 static irqreturn_t vh264_4k2k_vdec2_isr(int irq, void *dev_id)
 {
     int ret = READ_VREG(VDEC2_MAILBOX_COMMAND);
@@ -778,6 +796,7 @@ static irqreturn_t vh264_4k2k_vdec2_isr(int irq, void *dev_id)
     return IRQ_HANDLED;
 }
 #endif
+#endif
 
 static void vh264_4k2k_put_timer_func(unsigned long arg)
 {
@@ -793,13 +812,17 @@ static void vh264_4k2k_put_timer_func(unsigned long arg)
         state = RECEIVER_INACTIVE;
     }
 
+#if 0
     // error watchdog
     if (((READ_VREG(VLD_MEM_VIFIFO_CONTROL) & 0x100) == 0) && // decoder has input
         (state == RECEIVER_INACTIVE) &&                       // receiver has no buffer to recycle
         (kfifo_is_empty(&display_q)) &&                       // no buffer in display queue
         (kfifo_is_empty(&recycle_q)) &&                       // no buffer to recycle
-        (READ_VREG(MS_ID) & 0x100) &&
-        (READ_VREG(VDEC2_MS_ID) & 0x100)) {                   // with both decoder have started decoding
+        (READ_VREG(MS_ID) & 0x100)
+#ifdef CONFIG_H264_2K4K_SINGLE_CORE
+        && (READ_VREG(VDEC2_MS_ID) & 0x100)                   // with both decoder have started decoding
+#endif
+       ) {
         if (++error_watchdog_count == ERROR_RESET_COUNT) {    // and it lasts for a while
             printk("H264 4k2k decoder fatal error watchdog.\n");
             fatal_error = DECODER_FATAL_ERROR_UNKNOW;
@@ -813,6 +836,7 @@ static void vh264_4k2k_put_timer_func(unsigned long arg)
         fatal_error = DECODER_FATAL_ERROR_UNKNOW;
         WRITE_VREG(FATAL_ERROR, 0);
     }
+#endif
 
     while (!kfifo_is_empty(&recycle_q) &&
            (READ_VREG(BUFFER_RECYCLE) == 0)) {
@@ -925,6 +949,7 @@ static void H264_DECODE_INIT(void)
     WRITE_VREG(DECODE_STATUS, 1); // Set decode status to DECODE_START_HEADER
 }
 
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 static void H264_DECODE2_INIT(void)
 {
     int i;
@@ -990,18 +1015,23 @@ static void H264_DECODE2_INIT(void)
     WRITE_VREG(VDEC2_CURRENT_SPS_PPS, 0xffff); // Set current SPS/PPS to NULL
     WRITE_VREG(VDEC2_DECODE_STATUS, 1); // Set decode status to DECODE_START_HEADER
 }
+#endif
 
 static void vh264_4k2k_prot_init(void)
 {
     /* clear mailbox interrupt */
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_ASSIST_MBOX0_CLR_REG, 1);
+#endif
 #endif
     WRITE_VREG(VDEC_ASSIST_MBOX1_CLR_REG, 1);
 
     /* enable mailbox interrupt */
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_ASSIST_MBOX0_MASK, 1);
+#endif
 #endif
     WRITE_VREG(VDEC_ASSIST_MBOX1_MASK, 1);
 
@@ -1009,7 +1039,9 @@ static void vh264_4k2k_prot_init(void)
     WRITE_VREG(PSCALE_CTRL, 0);
 
     H264_DECODE_INIT();
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     H264_DECODE2_INIT();
+#endif
 
     WRITE_VREG(DOS_SW_RESET0, (1<<11));
     WRITE_VREG(DOS_SW_RESET0, 0);
@@ -1018,29 +1050,38 @@ static void vh264_4k2k_prot_init(void)
     READ_VREG(DOS_SW_RESET0);
     READ_VREG(DOS_SW_RESET0);
 
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(DOS_SW_RESET2, (1<<11));
     WRITE_VREG(DOS_SW_RESET2, 0);
 
     READ_VREG(DOS_SW_RESET2);
     READ_VREG(DOS_SW_RESET2);
     READ_VREG(DOS_SW_RESET2);
+#endif
 
     WRITE_VREG(MAILBOX_COMMAND, 0);
     WRITE_VREG(BUFFER_RECYCLE, 0);
 
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_MAILBOX_COMMAND, 0);
     WRITE_VREG(VDEC2_BUFFER_RECYCLE, 0);
+#endif
 
     CLEAR_VREG_MASK(MDEC_PIC_DC_CTRL, 1<<17);
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     CLEAR_VREG_MASK(VDEC2_MDEC_PIC_DC_CTRL, 1<<17);
+#endif
 
     /* set VDEC Master/ID 0 */
     WRITE_VREG(MS_ID, (1<<7)|(0<<0));
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     /* set VDEC2 Slave/ID 0 */
     WRITE_VREG(VDEC2_MS_ID, (0<<7)|(1<<0));
-
+#endif
     WRITE_VREG(DECODE_SKIP_PICTURE, 0);
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_DECODE_SKIP_PICTURE, 0);
+#endif
 
     WRITE_VREG(PRE_MASTER_UPDATE_TIMES, 0);
     WRITE_VREG(SLAVE_WAIT_DPB_UPDATE, 0);
@@ -1056,12 +1097,15 @@ static void vh264_4k2k_prot_init(void)
     WRITE_VREG(FATAL_ERROR, 0);
 
     SET_VREG_MASK(MDEC_PIC_DC_CTRL, 1<<17);
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     SET_VREG_MASK(VDEC2_MDEC_PIC_DC_CTRL, 1<<17);
+#endif
 
     WRITE_VREG(MDEC_PIC_DC_THRESH, 0x404038aa);
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_MDEC_PIC_DC_THRESH, 0x404038aa);
-
     amvenc_dos_top_reg_fix();
+#endif
 
 #ifdef DOUBLE_WRITE
     WRITE_VREG(MDEC_DOUBLEW_CFG0, (0   << 31) | // half y address
@@ -1079,7 +1123,7 @@ static void vh264_4k2k_prot_init(void)
                                   (0   <<  4) | // Pixel sel by horizontal, 0x:1/2 10:left 11:right
                                   (0   <<  1) | // Endian Control for Luma
                                   (1   <<  0)); // Double Write Enable
-
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_MDEC_DOUBLEW_CFG0, (0   << 31) | // half y address
                                   (1   << 30) | // 0:No Merge 1:Automatic Merge
                                   (0   << 28) | // Field Picture, 0x:no skip 10:top only 11:bottom only
@@ -1096,6 +1140,7 @@ static void vh264_4k2k_prot_init(void)
                                   (0   <<  1) | // Endian Control for Luma
                                   (1   <<  0)); // Double Write Enable
 #endif
+#endif
 }
 
 static void vh264_4k2k_local_init(void)
@@ -1167,6 +1212,7 @@ static s32 vh264_4k2k_init(void)
         return -EBUSY;
     }
 
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     amvdec2_enable();
 
     if (amvdec2_loadmc(vh264_4k2k_mc) < 0) {
@@ -1175,6 +1221,7 @@ static s32 vh264_4k2k_init(void)
         iounmap(p);
         return -EBUSY;
     }
+#endif
 
     memcpy(p,
            vh264_4k2k_header_mc, sizeof(vh264_4k2k_header_mc));
@@ -1201,6 +1248,7 @@ static s32 vh264_4k2k_init(void)
     }
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     if (request_irq(INT_VDEC2, vh264_4k2k_vdec2_isr,
                     IRQF_SHARED, "vh264_4k2k-vdec2-irq", (void *)vh264_4k2k_dec_id2)) {
         printk("vh264_4k2k irq register error.\n");
@@ -1209,6 +1257,7 @@ static s32 vh264_4k2k_init(void)
         amvdec2_disable();
         return -ENOENT;
     }
+#endif
 #endif
 
     stat |= STAT_ISR_REG;
@@ -1228,7 +1277,9 @@ static s32 vh264_4k2k_init(void)
     stat |= STAT_TIMER_ARM;
 
     amvdec_start();
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     amvdec2_start();
+#endif
 
     stat |= STAT_VDEC_RUN;
 
@@ -1246,16 +1297,22 @@ static int vh264_4k2k_stop(void)
 
     if (stat & STAT_VDEC_RUN) {
         amvdec_stop();
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
         amvdec2_stop();
+#endif
         stat &= ~STAT_VDEC_RUN;
     }
 
     if (stat & STAT_ISR_REG) {
         WRITE_VREG(VDEC_ASSIST_MBOX1_MASK, 0);
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
         WRITE_VREG(VDEC2_ASSIST_MBOX0_MASK, 0);
+#endif
         free_irq(INT_VDEC, (void *)vh264_4k2k_dec_id);
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
         free_irq(INT_VDEC2, (void *)vh264_4k2k_dec_id2);
+#endif
 #endif
         stat &= ~STAT_ISR_REG;
     }
@@ -1272,11 +1329,15 @@ static int vh264_4k2k_stop(void)
 
 #ifdef DOUBLE_WRITE
     WRITE_VREG(MDEC_DOUBLEW_CFG0, 0);
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     WRITE_VREG(VDEC2_MDEC_DOUBLEW_CFG0, 0);
+#endif
 #endif
 
     amvdec_disable();
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     amvdec2_disable();
+#endif
 
     canvas_read((READ_VCBUS_REG(VD1_IF0_CANVAS0) & 0xff), &cur_canvas);
     disp_addr = cur_canvas.addr;
@@ -1326,10 +1387,14 @@ static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
 
     cma_dev = (struct device *)mem[2].start;
 
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     vdec_poweron(VDEC_2);
+#endif
 
     vdec_power_mode(1);
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     vdec2_power_mode(1);
+#endif
 
     if (vh264_4k2k_init() < 0) {
         printk("\namvdec_h264_4k2k init failed.\n");
@@ -1357,7 +1422,9 @@ static int amvdec_h264_4k2k_remove(struct platform_device *pdev)
 
     vh264_4k2k_stop();
 
+#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     vdec_poweroff(VDEC_2);
+#endif
 
 #ifdef DEBUG_PTS
     printk("pts missed %ld, pts hit %ld, duration %d\n",
-- 
2.19.0

