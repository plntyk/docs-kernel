From bd4da2b65b1d0e78f313059a598c7cdfd1e134b9 Mon Sep 17 00:00:00 2001
From: "chengshun.wang" <chengshun.wang@amlogic.com>
Date: Tue, 8 Jul 2014 13:41:09 +0800
Subject: [PATCH 4501/5965] PD#93341:[AUDIO] first touch sound could not listen
 when audio system enter into standby

---
 sound/soc/codecs/aml_pmu3.c | 38 ++++++++++++++++++++++++++++++++-----
 1 file changed, 33 insertions(+), 5 deletions(-)

diff --git a/sound/soc/codecs/aml_pmu3.c b/sound/soc/codecs/aml_pmu3.c
index 41336da44719..3b9cd72179a5 100755
--- a/sound/soc/codecs/aml_pmu3.c
+++ b/sound/soc/codecs/aml_pmu3.c
@@ -105,14 +105,16 @@ static int pmu3_dac_event(struct snd_soc_dapm_widget *w,
 {
 	struct snd_soc_codec *codec = w->codec;
 	u16 val = snd_soc_read(codec, PMU3_BLOCK_ENABLE_2);
+        unsigned int mask = 1<<w->shift;
 
 	switch (event) {
 	case SND_SOC_DAPM_PRE_PMU:
 		val |= 0x1;
+		val |= mask;
 		break;
 
 	case SND_SOC_DAPM_POST_PMD:
-		val &= ~0x1;
+		//val &= ~0x1;
 		break;
 
 	default:
@@ -361,13 +363,13 @@ static const struct snd_kcontrol_new pgain_lp_switch_controls =
 static const struct snd_kcontrol_new pgain_rp_switch_controls =
 	SOC_DAPM_SINGLE("Switch", PMU3_PGA_IN, 2, 1, 0);
 
-static const char *plin_text[] = { "None", "AINL1", "AINL2" };
+static const char *plin_text[] = { "None", "AINL2", "AINL1" };
 static const struct soc_enum pgainl_enum =
 	SOC_ENUM_SINGLE(PMU3_PGA_IN, 8, ARRAY_SIZE(plin_text), plin_text);
 static const struct snd_kcontrol_new pgain_ln_mux[] = {
 	SOC_DAPM_ENUM("route", pgainl_enum),
 };
-static const char *prin_text[] = { "None", "AINR1", "AINR2" };
+static const char *prin_text[] = { "None", "AINR2", "AINR1" };
 static const struct soc_enum pgainr_enum =
 	SOC_ENUM_SINGLE(PMU3_PGA_IN, 0, ARRAY_SIZE(prin_text), prin_text);
 static const struct snd_kcontrol_new pgain_rn_mux[] = {
@@ -419,9 +421,9 @@ SND_SOC_DAPM_ADC_E("ADCR", "Capture", PMU3_BLOCK_ENABLE_2, 4, 0,
 			pmu3_adc_event, SND_SOC_DAPM_POST_PMU|SND_SOC_DAPM_PRE_PMD),
 
 /* Output */
-SND_SOC_DAPM_DAC_E("DACL", "Playback", PMU3_BLOCK_ENABLE_2, 3, 0,
+SND_SOC_DAPM_DAC_E("DACL", "Playback", SND_SOC_NOPM, 3, 0,
 			pmu3_dac_event, SND_SOC_DAPM_PRE_PMU|SND_SOC_DAPM_POST_PMD),
-SND_SOC_DAPM_DAC_E("DACR", "Playback", PMU3_BLOCK_ENABLE_2, 2, 0,
+SND_SOC_DAPM_DAC_E("DACR", "Playback", SND_SOC_NOPM, 2, 0,
 			pmu3_dac_event, SND_SOC_DAPM_PRE_PMU|SND_SOC_DAPM_POST_PMD),
 
 SND_SOC_DAPM_MIXER("MIXOUTL", PMU3_BLOCK_ENABLE_1, 3, 0,
@@ -635,6 +637,31 @@ static int pmu3_digital_mute(struct snd_soc_dai *codec_dai, int mute)
 	return 0;
 }
 
+static int pmu3_mute_stream(struct snd_soc_dai *dai, int mute, int stream)
+{
+    struct snd_soc_codec *codec = dai->codec;
+    u16 reg;
+    if(stream == SNDRV_PCM_STREAM_PLAYBACK){
+        reg = snd_soc_read(codec, PMU3_SOFT_MUTE);
+        if (mute){
+           // reg |= 0x8000;
+        }else
+            reg &= ~0x8000;
+        snd_soc_write(codec, PMU3_SOFT_MUTE, reg);
+    }
+    if(stream == SNDRV_PCM_STREAM_CAPTURE){
+        if (mute){
+            snd_soc_write(codec, PMU3_ADC_VOLUME_CTL, 0);
+        }else{
+            msleep(300);
+            snd_soc_write(codec, PMU3_ADC_VOLUME_CTL, 0x6a6a);
+        }
+    }
+    return 0;
+
+}
+
+
 static struct {
 	int rate;
 	int value;
@@ -695,6 +722,7 @@ static int pmu3_set_dai_clkdiv(struct snd_soc_dai *codec_dai,
 static struct snd_soc_dai_ops pmu3_dai_ops = {
 	.hw_params	= pmu3_hw_params,
 	.digital_mute	= pmu3_digital_mute,
+	.mute_stream = pmu3_mute_stream,
 	.set_fmt	= pmu3_set_dai_fmt,
 	//.set_clkdiv = pmu3_set_dai_clkdiv,
 	.set_sysclk	= pmu3_set_dai_sysclk,
-- 
2.19.0

