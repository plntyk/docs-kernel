From bc731d400347b6d09c9a7cc4ec9662bd7db2f16b Mon Sep 17 00:00:00 2001
From: "yvonne.chen" <yvonne.chen@amlogic.com>
Date: Thu, 26 Jun 2014 15:08:32 +0800
Subject: [PATCH 4505/5965] pd#94021 change ucode swap area from Tim

---
 .../amports/m8/ucode/h264/h264c_linux.h       |  28 ++---
 .../amports/m8/ucode/h264/h264header_linux.h  |   4 +-
 .../amports/m8/ucode/h264/h264slice_linux.h   |  14 +--
 drivers/amlogic/amports/vh264.c               | 110 +++++++++---------
 4 files changed, 80 insertions(+), 76 deletions(-)

diff --git a/drivers/amlogic/amports/m8/ucode/h264/h264c_linux.h b/drivers/amlogic/amports/m8/ucode/h264/h264c_linux.h
index 187eb946b2ad..c4f734e419ea 100755
--- a/drivers/amlogic/amports/m8/ucode/h264/h264c_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/h264/h264c_linux.h
@@ -1,13 +1,13 @@
 const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x6810001,0x6800000,0xd000001,0x7400040,0x64c0800,0x9800300,0x0000000,0x60c0800,
-	0xc0055c0,0x649c134,0x6880000,0x60c2900,0x80c0002,0x6bfda80,0x7c02d40,0x6030400,
-	0x0400000,0xc006c80,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0xc7ffe80,
-	0x0000000,0x6431e35,0xbefc075,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x649d019,0xc005580,0x649c134,0x6880000,0x60c2900,0x80c0002,0x6bfda80,0x7c02d40,
+	0x6030400,0x0400000,0xc006c40,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc7ffe80,0x0000000,0x6431e35,0xbefc075,0x0000000,0x0000000,0x0000000,0x0000000,
 	0xc780500,0x0000000,0xcc00000,0x0400000,0xc780c80,0x64c0007,0xcc00000,0x0400000,
 	0xc787480,0x0000000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xc787300,0x0000000,
 	0xc7870c0,0x0000000,0xcc00000,0x0400000,0xaa0c033,0xc7fff40,0x680001b,0x649cf1c,
-	0xbee805c,0x64c431c,0xae0ffdc,0xc7ffdc0,0x680001b,0x64c4119,0x968c65c,0xa409c99,
-	0x4000c99,0xb60c31b,0xc7ffc00,0x40016db,0x809c006,0x8007401,0xc780000,0x0800000,
+	0xbee805c,0x64c431c,0xae0ffdc,0xc7ffdc0,0x680001b,0x64c411c,0x968c71c,0xa409c9c,
+	0x4000c9c,0xb60c31b,0xc7ffc00,0x40016db,0x809c006,0x8007401,0xc780000,0x0800000,
 	0x649c91c,0x400171c,0x609c91c,0xc7ff9c0,0x680001b,0x7801949,0xa212009,0x9c091c9,
 	0xc7a8180,0x7c01949,0x0800000,0x7802d49,0xc7ff780,0x6030409,0x6bf9b89,0x6030409,
 	0x0400000,0x64c4309,0x5801249,0xbaf9809,0x0000000,0xa2c0047,0x7802bc9,0xaa14009,
@@ -26,9 +26,9 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0xbef80ca,0x0000000,0x6498e0a,0x980a00a,0x68007c9,0x9706289,0x6098e0a,0x6800009,
 	0x9706289,0x9c0a00a,0x6098e0a,0x649b80a,0x6800fc9,0x9508289,0xcc00000,0x609b80a,
 	0x200ad0a,0x603510a,0x6035209,0x603500b,0x643500c,0x580f30c,0xbef804c,0x0000000,
-	0x643530c,0x900c30c,0xa6f800c,0x0000000,0xcc00000,0x240ad0a,0x200ad0a,0x603410a,
+	0x643530c,0x900c30c,0xa6f800c,0x0000000,0xcc00000,0x240ad0a,0x200a64a,0x603410a,
 	0x6810009,0x6034209,0x6a2000b,0x6c001cb,0x603400b,0x643400c,0x580f30c,0xbef804c,
-	0xcc00000,0x0000000,0x8032100,0x200ad0a,0x603410a,0x6810009,0x6034209,0x6a3000b,
+	0xcc00000,0x0000000,0x8032100,0x200a64a,0x603410a,0x6810009,0x6034209,0x6a3000b,
 	0x6c001cb,0x603400b,0x643400c,0x580f30c,0xbef804c,0x6840008,0x63f0008,0x6800008,
 	0x63f0008,0x8002a09,0x8002b17,0x6830008,0x6032608,0x8032261,0x6800048,0x6c00088,
 	0x6032108,0xcc00000,0x0000000,0x680004a,0x60e0c0a,0x7c026ca,0x6805c0a,0x60c210a,
@@ -39,11 +39,11 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x90a2207,0x7c02048,0x481f1c7,0x7c02007,0xaa30147,0xaa2c047,0xa60c187,0xc7802c0,
 	0x682b5cd,0xa60c1c7,0xc780200,0x682000d,0xa60c207,0xc780140,0x6826d4d,0xc780700,
 	0xc78dac0,0x0000000,0x7803bc8,0x90821c8,0xaa18047,0x6800047,0x9482207,0x680000a,
-	0xc07e780,0x6c0444a,0xcb8000d,0x7c03bc8,0x64c2907,0xbe14407,0x64c2307,0xbef4047,
+	0xc07e780,0x6c0000a,0xcb8000d,0x7c03bc8,0x64c2907,0xbe14407,0x64c2307,0xbef4047,
 	0xcc00000,0x64c2007,0xcc00000,0x6800007,0x40011c7,0x6800008,0xa20c047,0x58011c7,
 	0x24071c8,0xcc00000,0x0000000,0x64c0007,0xa2fc047,0x0000000,0x64c3a07,0x90061c7,
 	0xaaec647,0x0000000,0x80c0a01,0x80c2800,0x80c0002,0xc7fbc00,0x0000000,0x684000a,
-	0xc07df80,0x6c0444a,0x69fffc2,0x7c03b42,0x7c03b82,0x7c03c42,0x7c03c82,0x7c01742,
+	0xc07df80,0x6c0000a,0x69fffc2,0x7c03b42,0x7c03b82,0x7c03c42,0x7c03c82,0x7c01742,
 	0x7c017c2,0x68003c2,0x7c02fc2,0x680c002,0x6094002,0x6803003,0x6804002,0xd000003,
 	0x6094102,0x6800002,0x6094002,0xc0005c0,0x0000000,0x8002501,0x8002605,0x8002708,
 	0x800290d,0x8002d15,0x8002c14,0x649b802,0x6800fc3,0x9508083,0x609b802,0x8002a09,
@@ -61,7 +61,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x60c4002,0x6bffe02,0x6c7ffc2,0x60c4202,0x6800002,0x6c07802,0x60c4102,0x6800082,
 	0x60c4802,0x6bffe02,0x6c7ffc2,0x60c4502,0x6810002,0x60c4402,0x6810042,0x60c4402,
 	0x6810002,0x60c4402,0x68000c2,0x60c4802,0x6800082,0x60c4802,0x6810182,0x6c00442,
-	0x60c4402,0xcc00000,0x0000000,0x64c4419,0x9101659,0xa6f8019,0xc7f8f00,0x0000000,
+	0x60c4402,0xcc00000,0x0000000,0x64c441c,0x910171c,0xa6f801c,0xc7f8f00,0x0000000,
 	0xcc00000,0x0400000,0x64e1214,0x91e1514,0xbef0054,0x78029d5,0x649d914,0x900c514,
 	0xacfe554,0x7802494,0xaa44094,0xc7828c0,0x6800015,0x6c04015,0x7802857,0x97c1557,
 	0x60e1215,0x7802d15,0xa20c055,0x6800018,0x6880018,0x6c04418,0x2018d18,0x6800014,
@@ -153,7 +153,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0xaa20148,0x7801c48,0xa614008,0xaa08087,0xc7f25c0,0x6800048,0x7c01c48,0x7c01c08,
 	0x649c909,0x4001249,0x609c909,0x6800009,0x7c01d89,0xc079cc0,0x0000000,0xc07a300,
 	0x0000000,0xc071ec0,0x80c2301,0x7803b8d,0xa806347,0x7803bc8,0x6800049,0x7c02dc9,
-	0xc780080,0x7c03b87,0x9082248,0xaa1c049,0x680000a,0xc070240,0x6c0444a,0x6800049,
+	0xc780080,0x7c03b87,0x9082248,0xaa1c049,0x680000a,0xc070240,0x6c0000a,0x6800049,
 	0x9482209,0x7c03bc8,0x6b7000a,0x6c0444a,0x54091c7,0x200a1ca,0x6804009,0x6b0c00b,
 	0xc06fc00,0x0000000,0x780c007,0x6905348,0xa803207,0xc7f1b80,0x7c03b8d,0x780c047,
 	0x9105207,0x7803b4e,0xa803388,0xc7802c0,0x7c03b48,0x7803bc7,0xbe20047,0x694000a,
@@ -183,7 +183,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0xaa28008,0x7803c0a,0xaa0800a,0xc7819c0,0x4401208,0x7c01d08,0xaa08008,0xc7818c0,
 	0x9c09089,0x609cf09,0xa22c309,0x780204a,0xa62400a,0x7802e0a,0xaa1c00a,0x7801f0a,
 	0xaa0c0ca,0x680004a,0x680008a,0xc7815c0,0x7c01d0a,0x680000a,0x7c01d0a,0x688000a,
-	0xc06ca80,0x6c0444a,0x7803bc7,0xbe54107,0x68001ca,0x6031e0a,0x649ce09,0xaa14009,
+	0xc06ca80,0x6c0000a,0x7803bc7,0xbe54107,0x68001ca,0x6031e0a,0x649ce09,0xaa14009,
 	0x0000000,0x6800009,0x609ce09,0x8007401,0x6431e09,0xbee4049,0x0000000,0x649cf07,
 	0xa2200c7,0x7801d87,0xaa18007,0x7801ec7,0xaa10087,0x6800207,0xc7edf40,0x7c03bc7,
 	0x6800013,0x7c02cd3,0x7c02d13,0x7c02e93,0x7c01893,0x7c018d3,0x6803fc7,0x7c02b07,
@@ -206,9 +206,9 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x68000c9,0x6495107,0x94041c9,0x9807647,0x6800009,0x979d1c9,0x6095107,0x6490707,
 	0x9807447,0x6090707,0x6498e07,0x9807787,0x6098e07,0x7802087,0xaa0c087,0x6824f9a,
 	0x68214da,0x7803bc8,0x90821c8,0xaa18087,0x6800087,0x9482207,0x690000a,0xc0699c0,
-	0x6c0444a,0xc7861c0,0x7c03bc8,0x7802dc7,0xaa18007,0x0000000,0xc077c80,0x0000000,
+	0x6c0000a,0xc7861c0,0x7c03bc8,0x7802dc7,0xaa18007,0x0000000,0xc077c80,0x0000000,
 	0xaa08007,0xc7eb480,0x6800007,0x7803bc8,0x9082208,0xaa10008,0x684000a,0xc0695c0,
-	0x6c0444a,0xc785dc0,0x7c03bc7,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x6c0000a,0xc785dc0,0x7c03bc7,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
diff --git a/drivers/amlogic/amports/m8/ucode/h264/h264header_linux.h b/drivers/amlogic/amports/m8/ucode/h264/h264header_linux.h
index ccf2c6b49819..9a74e97eb5b5 100755
--- a/drivers/amlogic/amports/m8/ucode/h264/h264header_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/h264/h264header_linux.h
@@ -44,7 +44,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x4001451,0x90081c9,0x7c03907,0x91011c9,0x7c03947,0x7000447,0x4001451,0x60c0907,
 	0x7c02c47,0x4401247,0x7c02c09,0x7000449,0x4001451,0x7c02c89,0x700044d,0x4001451,
 	0x90011cd,0xa60c007,0x7c02107,0x5401249,0x4000289,0x7802c48,0x9610288,0x609520a,
-	0x5404289,0x968c288,0x609080a,0x6031f08,0x6033f09,0xc05ab00,0x8031e15,0x6431f08,
+	0x5404289,0x968c288,0x609080a,0x6031f08,0x6033f09,0xc05ab40,0x8031e15,0x6431f08,
 	0xa610007,0x7c03a48,0x902120d,0x94211c8,0x7c02947,0x90411cd,0xaa10007,0x54011c7,
 	0x7802108,0x94411c8,0x7c02307,0x6800087,0x7802108,0x2408207,0x7000447,0x4001451,
 	0x7000449,0x4001451,0x9508247,0x5401249,0x7c01a89,0x7000447,0x4001451,0x7000449,
@@ -107,7 +107,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0xd07ff0d,0xfc011c0,0xfc051c0,0xcc00000,0xfc0f1c0,0x7803c47,0x7803c88,0x780174b,
 	0x7802c49,0x7803a4a,0x780390c,0xa404247,0xa403288,0xa40230b,0xc782640,0x6800007,
 	0x7c07087,0x7803bc7,0x9807087,0x7c03bc7,0x69fffc7,0x7c03c49,0x7c03c8a,0x7c0174c,
-	0xa842207,0x688000a,0xc056200,0x6c0444a,0x694000a,0x6c0444a,0x6804009,0xc055a40,
+	0xa842207,0x688000a,0xc056200,0x6c0000a,0x694000a,0x6c0444a,0x6804009,0xc055a40,
 	0x6b0400b,0x680044a,0x6031e0a,0x649ce09,0xaa14009,0x0000000,0x680000a,0x609ce0a,
 	0x8007401,0x6431e0a,0xbee404a,0x0000000,0x7803a47,0xa634047,0x7807187,0x6804089,
 	0x54031c7,0x20091c9,0x7000247,0x91011c7,0x20091c9,0x740024a,0x4001249,0x6801fca,
diff --git a/drivers/amlogic/amports/m8/ucode/h264/h264slice_linux.h b/drivers/amlogic/amports/m8/ucode/h264/h264slice_linux.h
index 67f3259c871b..5a27596c1a0c 100755
--- a/drivers/amlogic/amports/m8/ucode/h264/h264slice_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/h264/h264slice_linux.h
@@ -19,14 +19,14 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x9610209,0x60c3208,0x7807848,0x7807889,0x9610209,0x60c3208,0x6800073,0xc007240,
 	0x7c02bf3,0x7807187,0x7807048,0xa403207,0xc7dee40,0x0000000,0x6800033,0x7c02bf3,
 	0xaa1000a,0x0000000,0xc780840,0x0000000,0x64c5109,0x64c460a,0x7801a48,0x5410208,
-	0x7801a0b,0x20082c8,0x580a208,0x6031f08,0x6033f09,0xc05dd00,0x8031e15,0x6431f08,
+	0x7801a0b,0x20082c8,0x580a208,0x6031f08,0x6033f09,0xc05dd40,0x8031e15,0x6431f08,
 	0x6433f09,0x9708209,0x540a208,0x2008288,0x64c4309,0x2408248,0x64c4009,0x2408248,
 	0x7c03088,0x5810208,0x7c030c8,0x6803208,0x7803089,0x20081c8,0x7400209,0x6800008,
 	0x78030c9,0x20081c8,0x7400209,0x6800009,0x7c03089,0x7c030c9,0x54181c7,0x609b307,
-	0x68c000a,0xc060a40,0x6c0444a,0x649b307,0x54081c7,0x58081c7,0x609b207,0x609b007,
+	0x68c000a,0xc060a40,0x6c0000a,0x649b307,0x54081c7,0x58081c7,0x609b207,0x609b007,
 	0x609b107,0x6800007,0x7c01c47,0x78072c7,0xbe09807,0xc780840,0x6bfffc9,0x6803008,
 	0x7802307,0x90211c7,0x54011c7,0x38081c8,0x7807307,0xa60c087,0x6800007,0x6800047,
-	0x38081c8,0x7803c07,0x6031f07,0x6033f08,0xc05cf40,0x8031e15,0x78079c9,0x7807a0a,
+	0x38081c8,0x7803c07,0x6031f07,0x6033f08,0xc05cf80,0x8031e15,0x78079c9,0x7807a0a,
 	0x961024a,0x6431f07,0x2009247,0x78078c7,0x7807908,0x96101c8,0xb8071c9,0x7807947,
 	0x7807988,0x96101c8,0xb4031c9,0xc7800c0,0x0000000,0x6bfffc9,0x64c3d08,0x9161208,
 	0xa6f8008,0x0000000,0x60c3809,0x7802207,0xaa10007,0x0000000,0xc061380,0x80c2301,
@@ -60,9 +60,9 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x80c2408,0x680000b,0x780740d,0x400134d,0xb80334c,0x0000000,0x400030d,0x200d2c8,
 	0x700034d,0x540234d,0x200d349,0x700034e,0x5408410,0x2010390,0x400134d,0x700034d,
 	0x900234d,0x46002cb,0xc481140,0x7803a47,0x540338e,0x200e38a,0x700038f,0x90053cf,
-	0x6031f07,0x6033f0f,0xc058bc0,0x8031e15,0x780732b,0xa60c0ab,0x680002c,0x680006c,
+	0x6031f07,0x6033f0f,0xc058c00,0x8031e15,0x780732b,0xa60c0ab,0x680002c,0x680006c,
 	0x6431f07,0x7803c0f,0x54013cf,0x380fb0f,0x20073c7,0x680180f,0x6031f07,0x6033f0f,
-	0xc058840,0x8031e15,0x6431f07,0x6433f0f,0x97081cf,0x780230f,0x90213cf,0x54013cf,
+	0xc058880,0x8031e15,0x6431f07,0x6433f0f,0x97081cf,0x780230f,0x90213cf,0x54013cf,
 	0x38073c7,0x78078cf,0x20073c7,0x780790f,0x54103cf,0x20073c7,0x58031c7,0x40013ce,
 	0x70003cf,0x90c2a8f,0x97c21ea,0xba5c0ab,0x40023ce,0x70003ec,0x40033ce,0x70003ef,
 	0x9610b2f,0x40043ce,0x70003ed,0x40053ce,0x70003ef,0x9610b6f,0x780776e,0x78077af,
@@ -86,7 +86,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0xb8eb388,0xc780d40,0x7807780,0x580f000,0xa20c040,0x6800001,0x9801181,0x7802000,
 	0xa60c140,0x4401c31,0x9801141,0x7801c40,0x94e1040,0x7400c01,0xaa7400b,0x6801801,
 	0x7802300,0x9021000,0x5401000,0x3801001,0x7803cca,0x900828a,0x340a00a,0x78078c5,
-	0x7807900,0x9610140,0x7803a40,0x6031f00,0x6033f01,0xc055700,0x8031e15,0x6800046,
+	0x7807900,0x9610140,0x7803a40,0x6031f00,0x6033f01,0xc055740,0x8031e15,0x6800046,
 	0x7807087,0x6431f04,0x6800009,0x3400246,0xbc0f1c0,0x4401071,0x7000070,0x9405c09,
 	0x7400070,0x2c07007,0x7c07087,0x649c900,0x9c007c0,0x609c900,0x7c079c5,0x5810145,
 	0x7c07a05,0xcc00000,0x680000a,0x2005105,0x4001249,0xb8ee289,0x649c900,0x98007c0,
@@ -103,7 +103,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0xa610000,0xaa0c008,0x0000000,0x4401208,0x4000c4b,0x6808030,0x7000c00,0x4001c30,
 	0x7000c01,0x9610001,0x4001c30,0xd07fef1,0x2009009,0xa608008,0xc780580,0x4401208,
 	0x6800007,0xb8052c8,0x0000000,0x40011c7,0xc7fff40,0x24082c8,0x6031f07,0x6033f09,
-	0xc053640,0x8031e15,0x4001c48,0x6808030,0x6431f0a,0x7000c00,0x4001c30,0x7000c01,
+	0xc053680,0x8031e15,0x4001c48,0x6808030,0x6431f0a,0x7000c00,0x4001c30,0x7000c01,
 	0x9610001,0x4001c30,0xd07fef1,0x200a00a,0x78072c0,0x90a2000,0xa614000,0x7803800,
 	0x7803841,0x9610001,0x200a00a,0x7807545,0x7807580,0x9610140,0x200514a,0x7807331,
 	0xa60c031,0xc780740,0x4000185,0x7803886,0x78038c0,0x9610180,0x2006185,0xb60c0b1,
diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index 884a2db64352..6b57564a6b78 100755
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -82,12 +82,6 @@ static DEFINE_MUTEX(vh264_mutex);
 
 
 #define DEF_BUF_START_ADDR            0x1000000
-#define MEM_HEADER_CPU_OFFSET         (0x110000)
-#define MEM_DATA_CPU_OFFSET           (0x111000)
-#define MEM_MMCO_CPU_OFFSET           (0x112000)
-#define MEM_LIST_CPU_OFFSET           (0x113000)
-#define MEM_SLICE_CPU_OFFSET          (0x114000)
-#define MEM_SWAP_SIZE                 (0x5000*4)
 #define V_BUF_ADDR_OFFSET             (0x13e000)
 
 #define PIC_SINGLE_FRAME        0
@@ -235,6 +229,17 @@ static struct work_struct stream_switching_work;
 
 static struct dec_sysinfo vh264_amstream_dec_info;
 extern u32 trickmode_i;
+static dma_addr_t mc_dma_handle;
+static void *mc_cpu_addr;
+
+#define MC_OFFSET_HEADER    0x0000
+#define MC_OFFSET_DATA      0x1000
+#define MC_OFFSET_MMCO      0x2000
+#define MC_OFFSET_LIST      0x3000
+#define MC_OFFSET_SLICE     0x4000
+
+#define MC_TOTAL_SIZE       (20*SZ_1K)
+#define MC_SWAP_SIZE        ( 4*SZ_1K)
 
 static DEFINE_SPINLOCK(lock);
 
@@ -906,7 +911,6 @@ static void vh264_set_params(void)
     }
 
     WRITE_VREG(AV_SCRATCH_1, addr);
-    //WRITE_VREG(AV_SCRATCH_2, (unsigned)vpts_map);
     WRITE_VREG(AV_SCRATCH_3, post_canvas); // should be modified later
     addr += mb_total * mb_mv_byte * max_reference_size;
     WRITE_VREG(AV_SCRATCH_4, addr);
@@ -1088,7 +1092,7 @@ static void vh264_isr(void)
 										frame_dur = pts_duration;
 										duration_from_pts_done = 1;
 										printk("used calculate frame rate,on frame_dur problem=%d\n",frame_dur);
-									}else if(((frame_dur < 96000/240) && (pts_duration > 96000/240)) || duration_on_correcting){//>if frameRate>240fps,I think have error,use calculate rate.
+									}else if(((frame_dur<96000/240) && (pts_duration>96000/240)) || duration_on_correcting){//>if frameRate>240fps,I think have error,use calculate rate.
 										frame_dur = pts_duration;
 										//printk("used calculate frame rate,on frame_dur error=%d\n",frame_dur);
 										duration_on_correcting=1;
@@ -1490,6 +1494,7 @@ static void vh264_prot_init(void)
 
     WRITE_VREG(AV_SCRATCH_0, 0);
     WRITE_VREG(AV_SCRATCH_1, buf_offset);
+    WRITE_VREG(AV_SCRATCH_G, mc_dma_handle);
     WRITE_VREG(AV_SCRATCH_7, 0);
     WRITE_VREG(AV_SCRATCH_8, 0);
     WRITE_VREG(AV_SCRATCH_9, 0);
@@ -1604,12 +1609,6 @@ static s32 vh264_init(void)
 {
     int trickmode_fffb = 0;
     int firmwareloaded=0;
-    void __iomem *p = ioremap_nocache(ucode_map_start, V_BUF_ADDR_OFFSET);
-    void __iomem *p1 = (void __iomem *)((ulong)(p) + MEM_HEADER_CPU_OFFSET);
-    if (!p) {
-        printk("\nvh264_init: Cannot remap ucode swapping memory\n");
-        return -ENOMEM;
-    }
 
     //printk("\nvh264_init\n");
     init_timer(&recycle_timer);
@@ -1624,23 +1623,32 @@ static s32 vh264_init(void)
     query_video_status(0, &trickmode_fffb);
 
     if (!trickmode_fffb) {
-        memset(p, 0, V_BUF_ADDR_OFFSET);
+        void __iomem *p = ioremap_nocache(ucode_map_start, V_BUF_ADDR_OFFSET);
+        if (p != NULL) {
+            memset(p, 0, V_BUF_ADDR_OFFSET);
+            iounmap(p);
+        }
     }
 
     amvdec_enable();
 
+    // -- ucode loading (amrisc and swap code)
+    mc_cpu_addr = dma_alloc_coherent(NULL, MC_TOTAL_SIZE, &mc_dma_handle, GFP_KERNEL);
+    if (!mc_cpu_addr) {
+        amvdec_disable();
+
+        printk("vh264_init: Can not allocate mc memory.\n");
+        return -ENOMEM;
+    }
+
+    printk("264 ucode swap area: physical address 0x%x, cpu virtual addr %p\n", mc_dma_handle, mc_cpu_addr);
 	/*while for easy break out, always  run once.*/
     while(debugfirmware){
 		int size;
-        const char *pvh264_header_mc;
-        const char *pvh264_data_mc;
-        const char *pvh264_mmco_mc;
-        const char *pvh264_list_mc;
-        const char *pvh264_slice_mc;
-        char *mc = NULL;
-        char *mbuf=kmalloc(4096 * 4*6, GFP_KERNEL);
-
+        char *mbuf, *mc;
+        const char *pvh264_header_mc, *pvh264_data_mc, *pvh264_mmco_mc, *pvh264_list_mc, *pvh264_slice_mc;
         printk("start debug load firmware ...\n");
+        mbuf=kmalloc(4096 * 4*6, GFP_KERNEL);
         if (!mbuf) {
             printk("vh264_init: Cannot malloc mbuf  memory1\n");
             break;
@@ -1666,21 +1674,20 @@ static s32 vh264_init(void)
         memcpy(mc,mbuf,0x800*4);
         memcpy(mc+0x800*4,pvh264_data_mc,0x400*4);
         memcpy(mc+0x800*4+0x400*4,pvh264_list_mc,0x400*4);
-        if (amvdec_loadmc((u32 *)mc) < 0) {
+        if (amvdec_loadmc((const u32 *)mc) < 0) {
             kfree(mbuf);
             kfree(mc);
+            dma_free_coherent(NULL, MC_TOTAL_SIZE, mc_cpu_addr, mc_dma_handle);
+            mc_cpu_addr = NULL;
             break;
         }
-        memcpy(p1,
-        pvh264_header_mc, 0x400*4);//vh264_header_mc   //0x4000
-        memcpy((void *)((ulong)p1 + 0x1000),
-        pvh264_data_mc, 0x400*4);//vh264_data_mc //0x3000
-        memcpy((void *)((ulong)p1 + 0x2000),
-        pvh264_mmco_mc, 0x400*4);//vh264_mmco_mc//0x6000
-        memcpy((void *)((ulong)p1 + 0x3000),
-        pvh264_list_mc, 0x400*4);//vh264_list_mc//0x5000
-        memcpy((void *)((ulong)p1 + 0x4000),
-        pvh264_slice_mc, 0x400*4);//vh264_slice_mc //0x2000
+
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_HEADER, pvh264_header_mc, MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_DATA,   pvh264_data_mc,   MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_MMCO,   pvh264_mmco_mc,   MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_LIST,   pvh264_list_mc,   MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_SLICE,  pvh264_slice_mc,  MC_SWAP_SIZE);
+
         kfree(mbuf);
         kfree(mc);
 		firmwareloaded=1;
@@ -1691,26 +1698,15 @@ static s32 vh264_init(void)
         printk("start load orignal firmware ...\n");
         if (amvdec_loadmc(vh264_mc) < 0) {
             amvdec_disable();
-            iounmap(p);
             return -EBUSY;
         }
         
-        memcpy(p1,
-        vh264_header_mc, sizeof(vh264_header_mc));
-        
-        memcpy((void *)((ulong)p1 + 0x1000),
-        vh264_data_mc, sizeof(vh264_data_mc));
-        
-        memcpy((void *)((ulong)p1 + 0x2000),
-        vh264_mmco_mc, sizeof(vh264_mmco_mc));
-        
-        memcpy((void *)((ulong)p1 + 0x3000),
-        vh264_list_mc, sizeof(vh264_list_mc));
-        
-        memcpy((void *)((ulong)p1 + 0x4000),
-        vh264_slice_mc, sizeof(vh264_slice_mc));
-    }	
-    iounmap(p);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_HEADER, vh264_header_mc, MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_DATA,   vh264_data_mc,   MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_MMCO,   vh264_mmco_mc,   MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_LIST,   vh264_list_mc,   MC_SWAP_SIZE);
+        memcpy((u8 *)mc_cpu_addr + MC_OFFSET_SLICE,  vh264_slice_mc,  MC_SWAP_SIZE);
+    }
 
     stat |= STAT_MC_LOAD;
 
@@ -1750,9 +1746,11 @@ static s32 vh264_init(void)
     vh264_stream_switching = 0;
     vh264_stream_new = 0;
 
-    amvdec_start();
-
     stat |= STAT_VDEC_RUN;
+    wmb();
+
+    // -- start decoder
+    amvdec_start();
 
     set_vdec_func(&vh264_dec_status);
     set_trickmode_func(&vh264_set_trickmode);
@@ -1788,6 +1786,12 @@ static int vh264_stop(void)
         stat &= ~STAT_VF_HOOK;
     }
 
+    if (stat & STAT_MC_LOAD) {
+        if (mc_cpu_addr != NULL) {
+            dma_free_coherent(NULL, MC_TOTAL_SIZE, mc_cpu_addr, mc_dma_handle);
+            mc_cpu_addr = NULL;
+        }
+    }
     amvdec_disable();
 
     return 0;
-- 
2.19.0

