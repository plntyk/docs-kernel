From 4f3b11922cd4febdcd1ea9a36f07791c72c002d1 Mon Sep 17 00:00:00 2001
From: "zhenfei.li" <zhenfei.li@amlogic.com>
Date: Mon, 14 Jul 2014 08:41:10 +0800
Subject: [PATCH 4514/5965] PD #91277: plat-meson:  add gpiotest command into
 debug file node.

---
 arch/arm/configs/meson8_defconfig |   1 +
 arch/arm/mach-meson8/Kconfig      |   6 +
 arch/arm/mach-meson8/Makefile     |   2 +
 arch/arm/mach-meson8/gpio.c       |  17 +
 arch/arm/mach-meson8/gpiotest.c   | 420 ++++++++++++++++
 arch/arm/plat-meson/debug.c       | 798 ++++++++++++++++--------------
 6 files changed, 870 insertions(+), 374 deletions(-)
 create mode 100755 arch/arm/mach-meson8/gpiotest.c
 mode change 100644 => 100755 arch/arm/plat-meson/debug.c

diff --git a/arch/arm/configs/meson8_defconfig b/arch/arm/configs/meson8_defconfig
index 3274709d97d3..f56c8cefdc6e 100755
--- a/arch/arm/configs/meson8_defconfig
+++ b/arch/arm/configs/meson8_defconfig
@@ -367,3 +367,4 @@ CONFIG_CRYPTO_PCBC=y
 CONFIG_CRYPTO_TWOFISH=y
 CONFIG_CRC_T10DIF=y
 CONFIG_CRC7=y
+CONFIG_GPIO_TEST=y	
diff --git a/arch/arm/mach-meson8/Kconfig b/arch/arm/mach-meson8/Kconfig
index 031d102b240d..b397def38435 100755
--- a/arch/arm/mach-meson8/Kconfig
+++ b/arch/arm/mach-meson8/Kconfig
@@ -63,5 +63,11 @@ config MESON_TRUSTZONE
 	default n
 	help
 		Enable ARM Trustzone secure extension
+		
+config GPIO_TEST
+	bool "support gpio group test"
+	default n
+	help
+		support gpio group test
 
 endif # ARCH_MESON8
diff --git a/arch/arm/mach-meson8/Makefile b/arch/arm/mach-meson8/Makefile
index 53bb2b9beede..52c06f0283ec 100755
--- a/arch/arm/mach-meson8/Makefile
+++ b/arch/arm/mach-meson8/Makefile
@@ -43,6 +43,8 @@ obj-$(CONFIG_AMLOGIC_THERMAL) += thermal.o
 
 obj-$(CONFIG_AML_HDMI_TX) +=  hdmi_tx_hw/
 
+obj-$(CONFIG_GPIO_TEST) += gpiotest.o
+
 # ARM Trustzone
 obj-$(CONFIG_MESON_TRUSTZONE) += meson-smc.o meson-secure.o
 ifeq ($(CONFIG_MESON_TRUSTZONE),y)
diff --git a/arch/arm/mach-meson8/gpio.c b/arch/arm/mach-meson8/gpio.c
index 7d6f2ef0b73a..9ef9fb626717 100755
--- a/arch/arm/mach-meson8/gpio.c
+++ b/arch/arm/mach-meson8/gpio.c
@@ -424,6 +424,23 @@ int gpio_amlogic_requst(struct gpio_chip *chip,unsigned offset)
 	return ret;
 }
 /* amlogic request gpio interface*/
+#ifdef CONFIG_GPIO_TEST
+int gpio_amlogic_requst_force(struct gpio_chip *chip,unsigned offset)
+{
+	unsigned int i,reg,bit;
+	unsigned int *gpio_reg=&gpio_to_pin[offset][0];
+	for(i=0;i<sizeof(gpio_to_pin[offset])/sizeof(gpio_to_pin[offset][0]);i++){
+		if(gpio_reg[i]!=NONE)
+		{
+			reg=GPIO_REG(gpio_reg[i]);
+			bit=GPIO_BIT(gpio_reg[i]);
+			aml_clr_reg32_mask(p_pin_mux_reg_addr[reg],1<<bit);
+			gpio_print("clr reg=%d,bit =%d\n",reg,bit);
+		}
+	}
+	return 0;
+}
+#endif /* CONFIG_GPIO_TEST */
 
 void	 gpio_amlogic_free(struct gpio_chip *chip,unsigned offset)
 {	
diff --git a/arch/arm/mach-meson8/gpiotest.c b/arch/arm/mach-meson8/gpiotest.c
new file mode 100755
index 000000000000..953f224cad27
--- /dev/null
+++ b/arch/arm/mach-meson8/gpiotest.c
@@ -0,0 +1,420 @@
+#include <linux/kernel.h>
+#include <mach/gpio.h>
+#include <mach/am_regs.h>
+#include <linux/delay.h>
+
+extern int gpio_amlogic_requst_force(struct gpio_chip *chip ,unsigned offset);
+extern void   gpio_amlogic_free(struct gpio_chip *chip,unsigned offset);
+
+#define PINMUX_NUM			12
+static unsigned pinmux_reg_org_val[PINMUX_NUM];
+
+#define MAX_GPIOX_PIN_NUM		22
+#define MAX_GPIOY_PIN_NUM		17
+#define MAX_GPIODV_PIN_NUM		30
+#define MAX_CARD_PIN_NUM		7
+#define MAX_BOOT_PIN_NUM		19
+#define MAX_GPIOH_PIN_NUM		10
+#define MAX_GPIOZ_PIN_NUM		15
+#define MAX_GPIOAO_PIN_NUM		14
+
+struct gpio_group_info_s {
+	const char* name;
+	const unsigned start_num;
+	const unsigned pins_num;
+	const unsigned mask;
+	const unsigned oen_reg_addr;
+	const unsigned oen_start_bit;
+	const unsigned output_reg_addr;
+	const unsigned output_start_bit;
+	const unsigned input_reg_addr;
+	const unsigned input_start_bit;
+	unsigned oen_org_val;
+	unsigned output_org_val;
+};
+
+#define GPIO_X_OEN_REG			P_PREG_PAD_GPIO0_EN_N
+#define GPIO_X_OUTPUT_REG		P_PREG_PAD_GPIO0_O
+#define GPIO_X_INPUT_REG		P_PREG_PAD_GPIO0_I
+
+#define GPIO_Y_OEN_REG			P_PREG_PAD_GPIO1_EN_N
+#define GPIO_Y_OUTPUT_REG		P_PREG_PAD_GPIO1_O
+#define GPIO_Y_INPUT_REG		P_PREG_PAD_GPIO1_I
+
+#define GPIO_DV_OEN_REG			P_PREG_PAD_GPIO2_EN_N
+#define GPIO_DV_OUTPUT_REG		P_PREG_PAD_GPIO2_O
+#define GPIO_DV_INPUT_REG		P_PREG_PAD_GPIO2_I
+
+#define GPIO_CARD_OEN_REG		P_PREG_PAD_GPIO0_EN_N
+#define GPIO_CARD_OUTPUT_REG		P_PREG_PAD_GPIO0_O
+#define GPIO_CARD_INPUT_REG		P_PREG_PAD_GPIO0_I
+
+#define GPIO_BOOT_OEN_REG		P_PREG_PAD_GPIO3_EN_N
+#define GPIO_BOOT_OUTPUT_REG		P_PREG_PAD_GPIO3_O
+#define GPIO_BOOT_INPUT_REG		P_PREG_PAD_GPIO3_I
+
+#define GPIO_H_OEN_REG			P_PREG_PAD_GPIO3_EN_N
+#define GPIO_H_OUTPUT_REG		P_PREG_PAD_GPIO3_O
+#define GPIO_H_INPUT_REG		P_PREG_PAD_GPIO3_I
+
+#define GPIO_Z_OEN_REG			P_PREG_PAD_GPIO1_EN_N
+#define GPIO_Z_OUTPUT_REG		P_PREG_PAD_GPIO1_O
+#define GPIO_Z_INPUT_REG		P_PREG_PAD_GPIO1_I
+
+#define GPIO_AO_OEN_REG			P_AO_GPIO_O_EN_N
+#define GPIO_AO_OUTPUT_REG		P_AO_GPIO_O_EN_N
+#define GPIO_AO_INPUT_REG		P_AO_GPIO_I
+
+
+#define GPIO_GROUP_NUM 8
+
+struct gpio_group_info_s g_group_info[GPIO_GROUP_NUM] = {
+	{
+		.name = "x",
+		.start_num = GPIOX_0,
+		.pins_num = 22,
+		.mask = (1 << 22) - 1,
+		.oen_reg_addr = GPIO_X_OEN_REG,
+		.oen_start_bit = 0,
+		.output_reg_addr = GPIO_X_OUTPUT_REG,
+		.output_start_bit = 0,
+		.input_reg_addr = GPIO_X_INPUT_REG,
+		.input_start_bit = 0,
+	}, {
+		.name = "y",
+		.start_num = GPIOY_0,
+		.pins_num = 17,
+		.mask = (1 << 17) - 1,
+		.oen_reg_addr = GPIO_Y_OEN_REG,
+		.oen_start_bit = 0,
+		.output_reg_addr = GPIO_Y_OUTPUT_REG,
+		.output_start_bit = 0,
+		.input_reg_addr = GPIO_Y_INPUT_REG,
+		.input_start_bit = 0,
+	}, {
+		.name = "dv",
+		.start_num = GPIODV_0,
+		.pins_num = 30,
+		.mask = (1 << 30) - 1,
+		.oen_reg_addr = GPIO_DV_OEN_REG,
+		.oen_start_bit = 0,
+		.output_reg_addr = GPIO_DV_OUTPUT_REG,
+		.output_start_bit = 0,
+		.input_reg_addr = GPIO_DV_INPUT_REG,
+		.input_start_bit = 0,
+	}, {
+		.name = "card",
+		.start_num = CARD_0,
+		.pins_num = 7,
+		.mask = (1 << 7) - 1,
+		.oen_reg_addr = GPIO_CARD_OEN_REG,
+		.oen_start_bit = 22,
+		.output_reg_addr = GPIO_CARD_OUTPUT_REG,
+		.output_start_bit = 22,
+		.input_reg_addr = GPIO_CARD_INPUT_REG,
+		.input_start_bit = 22,
+	}, {
+		.name = "boot",
+		.start_num = BOOT_0,
+		.pins_num = 22,
+		.mask = (1 << 22) - 1,
+		.oen_reg_addr = GPIO_BOOT_OEN_REG,
+		.oen_start_bit = 0,
+		.output_reg_addr = GPIO_BOOT_OUTPUT_REG,
+		.output_start_bit = 0,
+		.input_reg_addr = GPIO_BOOT_INPUT_REG,
+		.input_start_bit = 0,
+	}, {
+		.name = "h",
+		.start_num = GPIOH_0,
+		.pins_num = 10,
+		.mask = (1 << 10) - 1,
+		.oen_reg_addr = GPIO_H_OEN_REG,
+		.oen_start_bit = 19,
+		.output_reg_addr = GPIO_H_OUTPUT_REG,
+		.output_start_bit = 19,
+		.input_reg_addr = GPIO_H_INPUT_REG,
+		.input_start_bit = 19,
+	}, {
+		.name = "z",
+		.start_num = GPIOZ_0,
+		.pins_num = 15,
+		.mask = (1 << 15) - 1,
+		.oen_reg_addr = GPIO_Z_OEN_REG,
+		.oen_start_bit = 17,
+		.output_reg_addr = GPIO_Z_OUTPUT_REG,
+		.output_start_bit = 17,
+		.input_reg_addr = GPIO_Z_INPUT_REG,
+		.input_start_bit = 17,
+	}, {
+		.name = "ao",
+		.start_num = GPIOAO_0,
+		.pins_num = 14,
+		.mask = (1 << 14) - 1,
+		.oen_reg_addr = GPIO_AO_OEN_REG,
+		.oen_start_bit = 0,
+		.output_reg_addr = GPIO_AO_OUTPUT_REG,
+		.output_start_bit = 16,
+		.input_reg_addr = GPIO_AO_INPUT_REG,
+		.input_start_bit = 0,
+	}
+};
+
+static struct gpio_group_info_s* get_group_info(char* name)
+{
+	struct gpio_group_info_s* group_info = NULL;
+	int i;
+	for (i = 0; i < GPIO_GROUP_NUM; i++) {
+		struct gpio_group_info_s* tmp_info;
+		tmp_info = &g_group_info[i];
+		if(!strcmp(tmp_info->name, name)) {
+			group_info = tmp_info;
+			break;
+		}
+	}
+	return group_info;
+}
+
+#define GPIO_PIN(group_info, i) (group_info->start_num + i)
+
+#define TYPE_INT	0
+#define TYPE_HEX	1
+
+static int ssscanf(char *str, int type, unsigned *value)
+{
+    char *p;
+    char c;
+    int val = 0;
+    p = str;
+
+    c = *p;
+    while (!((c >= '0' && c <= '9') || 
+             (c >= 'a' && c <= 'f') ||
+             (c >= 'A' && c <= 'F'))) {                     // skip other characters 
+        p++;
+        c = *p;
+    }
+    switch (type) {
+    case TYPE_INT:
+        c = *p;
+        while (c >= '0' && c <= '9') {
+            val *= 10;
+            val += c - '0';   
+            p++;
+            c = *p;
+        }
+        break;
+
+    case TYPE_HEX:
+        if (*p == '0' && (*(p + 1) == 'x' || *(p + 1) == 'X')) {
+            p += 2;                         // skip '0x' '0X'
+        }
+        c = *p;
+        while ((c >= '0' && c <= '9') ||
+               (c >= 'a' && c <= 'f') ||
+               (c >= 'A' && c <= 'F')) {
+            val = val * 16;
+            if (c >= '0' && c <= '9') {
+                val += c - '0';
+            }
+            if (c >= 'a' && c <= 'f') {
+                val += (c - 'a' + 10);
+            }
+            if (c >= 'A' && c <= 'F') {
+                val += (c - 'a' + 10);
+            }
+            p++;
+            c = *p;
+        }
+        break;
+
+    default:
+        break;
+    }
+
+    *value = val;
+    return p - str; 
+}
+
+static void record_org_pinmux(void)
+{
+	int i;
+	for (i = 0; i < PINMUX_NUM; i++)
+		pinmux_reg_org_val[i] = aml_read_reg32(P_PERIPHS_PIN_MUX_0+(i<<2));
+}
+
+static void set_gpio_pinmux(struct gpio_group_info_s* g_info, unsigned mask)
+{
+	int i;
+	for (i = 0; i < g_info->pins_num; i++) {
+		if (mask & (1 << i))
+			gpio_amlogic_requst_force(NULL, GPIO_PIN(g_info, i));
+	}
+		
+}
+
+static void free_gpio_pinmux(struct gpio_group_info_s* g_info, unsigned mask)
+{
+	int i;
+	for (i = 0; i < g_info->pins_num; i++) {
+		if (mask & (1 << i))
+			gpio_amlogic_free(NULL, GPIO_PIN(g_info, i));
+	}
+		
+}
+
+static void revert_gpiotest_pinmux(void)
+{
+	int i;
+	for (i = 0; i < PINMUX_NUM; i++)
+		 aml_write_reg32(P_PERIPHS_PIN_MUX_0+(i<<2), 
+		 			pinmux_reg_org_val[i]);
+}
+
+#define  TAG "gpio_test "
+
+#define GT_PRK(...) \
+do {\
+	printk("gpio_test ") ;\
+	printk(__VA_ARGS__);\
+} while(0)
+
+int gpiotest(int argc, char **argv)
+{
+	int i, ret;
+	unsigned delay_us = 0, repeat_time, mask, total_times = 1;
+	unsigned oen_org, output_org;
+	unsigned readbak_v;
+	unsigned err_val = 0;
+	struct gpio_group_info_s* g_info = NULL;
+	
+	g_info = get_group_info(argv[1]);
+	if (g_info == NULL) {
+		GT_PRK("gpio group name error!\n");
+		GT_PRK("should be one of x, y, dv,"
+				 "card, boot, h, z, ao!\n\n");
+		return -1;
+	}
+	
+	mask =  g_info->mask;
+	
+	for (i = 2; i < argc; i += 2) {
+		if (!strcmp(argv[i], "-m"))
+			ssscanf(argv[i+1], TYPE_HEX, &mask);
+		else if (!strcmp(argv[i], "-t"))
+			ssscanf(argv[i+1], TYPE_INT, &total_times);
+		else if (!strcmp(argv[i], "-d"))
+			ssscanf(argv[i+1], TYPE_INT, &delay_us);
+		else {
+			GT_PRK("args error\n\n");
+			return -1;
+		}
+	}
+	
+	mask &= g_info->mask;
+	
+	//GT_PRK("mask %x, delay time %d, repeat count %d\n", mask, delay_us, total_times);
+	
+	//record the org pinmux value
+	record_org_pinmux();
+	
+	//set the pinmux of gpiotest
+	set_gpio_pinmux(g_info, mask);
+		
+	oen_org = aml_read_reg32(g_info->oen_reg_addr);
+	output_org = aml_read_reg32(g_info->output_reg_addr);
+	
+	//GT_PRK("oen_org = %x, output_org = %x\n", oen_org, output_org);
+	
+	 aml_write_reg32(g_info->oen_reg_addr, oen_org & (~(mask)));
+	
+	 aml_write_reg32(g_info->output_reg_addr, output_org | mask);
+	//GT_PRK("dir_cur = %x, val_cur = %x\n", 
+	//		aml_read_reg32(gpiotest_PIN_DIR_REG), aml_read_reg32(gpiotest_PIN_VAL_REG));
+	GT_PRK("test high level\n");
+	repeat_time = 0;
+	ret = 0;
+	do {
+		if (delay_us > 0)
+			udelay(delay_us);
+		readbak_v = aml_read_reg32(g_info->input_reg_addr) & mask;
+		
+		//GT_PRK("readbak_v = %lx\n", readbak_v);
+		
+		//for test
+		 //   readbak_v &= (~(1 << 5));
+		
+		for (i = 0; i < g_info->pins_num; i++) {
+			if ((mask & (1 << i)) && !(readbak_v& (1 << i))) {
+				//GT_PRK("gpiotest%d high level error\n", i);
+				if (ret == 0) {
+					err_val = readbak_v;
+					GT_PRK( "error_val(right_val:0x%x)    time\n"     
+						"0x%x                         %d\n", 
+							mask, err_val, repeat_time);
+				} 
+				ret = -1;
+			}
+			if (readbak_v != err_val && ret != 0) {
+				err_val = readbak_v;
+				GT_PRK("0x%x                         %d\n", 
+					err_val, repeat_time);
+			}
+		}
+	} while (++repeat_time < total_times);
+	
+	if (ret != -1)
+		GT_PRK("always ok!\n");
+	
+			
+	 aml_write_reg32(g_info->output_reg_addr, output_org & (~mask));	
+	//GT_PRK("dir_cur = %x, val_cur = %x\n", 
+	//		 aml_read_reg32(gpiotest_PIN_DIR_REG), aml_read_reg32(gpiotest_PIN_VAL_REG));
+	
+	GT_PRK("test low level\n");
+	
+	repeat_time = 0;
+	ret = 0;	
+	do {		 
+		if (delay_us > 0)
+			udelay(delay_us);
+			
+		readbak_v = aml_read_reg32(g_info->input_reg_addr) & mask;
+	
+		//GT_PRK("readbak_v = %lx\n", readbak_v);
+		
+		//for test
+		//    readbak_v |= (1 << 5);
+		
+		for (i = 0; i < g_info->pins_num; i++) {
+			if ((mask & (1 << i)) && (readbak_v & (1 << i))) {
+				if (ret == 0) {
+					err_val = readbak_v;
+					GT_PRK( "error_val(right_val:0x%x)    time\n"     
+						"0x%x                         %d\n", 
+						(~mask) & g_info->mask, err_val, repeat_time);
+				} 
+				ret = -1;
+			}
+			if (readbak_v != err_val && ret != 0) {
+				err_val = readbak_v;
+				GT_PRK("0x%x                           %d\n", 
+					err_val, repeat_time);
+			}
+		}
+		
+	} while(++repeat_time < total_times);
+	if (ret != -1)
+		GT_PRK("always ok!\n");
+		
+	//revert the pinmux value	
+	revert_gpiotest_pinmux();
+	
+	//free_gpio_pinmux(g_info, mask);
+		
+	//write back all the gpio setting after the test.
+	aml_write_reg32(g_info->oen_reg_addr, oen_org);
+	aml_write_reg32(g_info->output_reg_addr, output_org);
+	 
+	return 0;
+}
diff --git a/arch/arm/plat-meson/debug.c b/arch/arm/plat-meson/debug.c
old mode 100644
new mode 100755
index 1d5fd118d107..53261c5f88f6
--- a/arch/arm/plat-meson/debug.c
+++ b/arch/arm/plat-meson/debug.c
@@ -1,145 +1,150 @@
-/*
- *
- * arch/arm/plat-meson/debug.c
- *
- * Copyright (C) 2010 Amlogic Inc.
- * Copyright (C) 2011 Amlogic Inc.
- *
- *	2011 Victor Wan <victor.wan@amlogic.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- */
-
-
-/* Standard Linux headers */
-#include <linux/types.h>
-#include <linux/init.h>
-#include <linux/module.h>
-#include <linux/kernel.h>
-#include <linux/device.h>
-#include <linux/string.h>
-#include <linux/slab.h>
-#include <linux/sched.h>
-
-/* Amlogic headers */
-#include <plat/io.h>
-#include <mach/am_regs.h>
-#include <mach/clock.h>
-#include <mach/cpu.h>
-
-#define CLASS_NAME        "amlogic"
-/* path name:		"/sys/class/CLASS_NAME/" */
-enum{
-	WORK_MODE_READ,
-	WORK_MODE_WRITE,
-	WORK_MODE_CLKMEASURE,
-	WORK_MODE_DUMP,
-	WORK_MODE_THREAD,
-	WORK_MODE_STACK,
-};
-static const char * usage_str =
-{"Usage:\n"
-"    echo [read | write <data>] addrmem > debug ; Access memory address\n"
+/*
+ *
+ * arch/arm/plat-meson/debug.c
+ *
+ * Copyright (C) 2010 Amlogic Inc.
+ * Copyright (C) 2011 Amlogic Inc.
+ *
+ *	2011 Victor Wan <victor.wan@amlogic.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+
+/* Standard Linux headers */
+#include <linux/types.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/device.h>
+#include <linux/string.h>
+#include <linux/slab.h>
+#include <linux/sched.h>
+#include <linux/wakelock.h>
+
+/* Amlogic headers */
+#include <plat/io.h>
+#include <mach/am_regs.h>
+#include <mach/clock.h>
+#include <mach/cpu.h>
+
+#define CLASS_NAME        "amlogic"
+/* path name:		"/sys/class/CLASS_NAME/" */
+enum{
+	WORK_MODE_READ,
+	WORK_MODE_WRITE,
+	WORK_MODE_CLKMEASURE,
+	WORK_MODE_DUMP,
+	WORK_MODE_THREAD,
+	WORK_MODE_STACK,
+	WORK_MODE_GPIOTEST,
+};
+static const char * usage_str =
+{"Usage:\n"
+"    echo [read | write <data>] addrmem > debug ; Access memory address\n"
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 "    echo [read | write <data>] [c | v | a | x | d | s | m] addr > debug ; Access CBUS/VCBUS/AOBUS/AXBUX/DOS/SECBUS/MMC logic address\n"
 "    echo dump [c | v | a | x | d | s | m] <start> <end> > debug ; Dump CBUS/VCBUS/AOBUS/AXBUS/DOS/SECBUS/MMC address from <start> to <end>\n"
-#elif MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-"    echo [read | write <data>] [c | a | x | d | s] addr > debug ; Access CBUS/AOBUS/AXBUX/DOS/SECBUS logic address\n"
-"    echo dump [c | a | x | d | s] <start> <end> > debug ; Dump CBUS/AOBUS/AXBUS/DOS address from <start> to <end>\n"
-#else
-"    echo [read | write <data>] [c | a | x] addr > debug ; Access CBUS/AOBUS/AXBUS logic address\n"
-"    echo dump [c | a | x] <start> <end> > debug ; Dump CBUS/AOBUS/AXBUS address from <start> to <end>\n"
-#endif // CONFIG_ARCH_MESON6
-"    echo clkmsr {<index>} > debug ; Output clk source value, no index then all\n"
-"    echo thread {<pid>} > debug; Show thread infomation, no pid then all\n"
-"    echo stack <pid> > debug; Show thread's stack\n"
-"\n"
-"Address format:\n"
-"    addrmem : 0xXXXXXXXX, 32 bits physical address\n"
-"    addr    : 0xXXXX, 16 bits register address\n"
-};
-static const char * 	syntax_error_str = {"Invalid syntax\n"};
-
-static ssize_t dbg_do_help(struct class *class,
-			struct class_attribute *attr,	char *buf)
-{
-	return sprintf(buf, "%s\n",usage_str);
-}
-static char * base_addr_type(char base)
-{
-	switch(base){
-	case '0':
-		return "MEMORY";
-	case 'c':
-	case 'C':
-		return "CBUS";
-	case 'a':
-	case 'A':
-		return "AOBUS";
-	case 'x':
-	case 'X':
-		return "AXBUS";
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-	case 'd':
-	case 'D':
-		return "DOS";
-	case 's':
-	case 'S':
-		return "SECBUS";
+#elif MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+"    echo [read | write <data>] [c | a | x | d | s] addr > debug ; Access CBUS/AOBUS/AXBUX/DOS/SECBUS logic address\n"
+"    echo dump [c | a | x | d | s] <start> <end> > debug ; Dump CBUS/AOBUS/AXBUS/DOS address from <start> to <end>\n"
+#else
+"    echo [read | write <data>] [c | a | x] addr > debug ; Access CBUS/AOBUS/AXBUS logic address\n"
+"    echo dump [c | a | x] <start> <end> > debug ; Dump CBUS/AOBUS/AXBUS address from <start> to <end>\n"
+#endif // CONFIG_ARCH_MESON6
+"    echo clkmsr {<index>} > debug ; Output clk source value, no index then all\n"
+"    echo thread {<pid>} > debug; Show thread infomation, no pid then all\n"
+"    echo stack <pid> > debug; Show thread's stack\n"
+#ifdef CONFIG_GPIO_TEST	
+"    echo gpiotest [name] <-m mask> <-t times> <-d delay_us>\n"
+#endif // CONFIG_GPIO_TEST	
+"\n"
+"Address format:\n"
+"    addrmem : 0xXXXXXXXX, 32 bits physical address\n"
+"    addr    : 0xXXXX, 16 bits register address\n"
+};
+static const char * 	syntax_error_str = {"Invalid syntax\n"};
+
+static ssize_t dbg_do_help(struct class *class,
+			struct class_attribute *attr,	char *buf)
+{
+	return sprintf(buf, "%s\n",usage_str);
+}
+static char * base_addr_type(char base)
+{
+	switch(base){
+	case '0':
+		return "MEMORY";
+	case 'c':
+	case 'C':
+		return "CBUS";
+	case 'a':
+	case 'A':
+		return "AOBUS";
+	case 'x':
+	case 'X':
+		return "AXBUS";
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	case 'd':
+	case 'D':
+		return "DOS";
+	case 's':
+	case 'S':
+		return "SECBUS";
 #endif // CONFIG_ARCH_MESON6
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	case 'v':
-	case 'V':
-		return "VCBUS";
+        case 'V':
+                return "VCBUS";
 	case 'm':
 	case 'M':
-		return "MMC";
+                return "MMC";
 #endif // CONFIG_ARCH_MESON8
 	default:
-		break;
-	}
-	return "INVALID";
-}
-static unsigned int  base_addr_convert(char base,unsigned int address)
-{
-	if (base != '0' && address > 0xffff)
-		return -1;
-
-	switch(base){
-	case 'c':
-	case 'C':
-		address = CBUS_REG_ADDR(address);
-		break;
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON3
-	case 'a':
-	case 'A':
-		address = AOBUS_REG_ADDR(address);
-		break;
-#endif
-	case 'x':
-	case 'X':
-		address = AXI_REG_ADDR(address);
-		break;
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-	case 'd':
-	case 'D':
-		address = DOS_REG_ADDR(address);
-		break;
-	case 's':
-	case 'S':
-		address = SECBUS_REG_ADDR(address);
-		break;
+		break;
+	}
+	return "INVALID";
+}
+static unsigned int  base_addr_convert(char base,unsigned int address)
+{
+	if (base != '0' && address > 0xffff)
+		return -1;
+
+	switch(base){
+	case 'c':
+	case 'C':
+		address = CBUS_REG_ADDR(address);
+		break;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON3
+	case 'a':
+	case 'A':
+		address = AOBUS_REG_ADDR(address);
+		break;
+#endif
+	case 'x':
+	case 'X':
+		address = AXI_REG_ADDR(address);
+		break;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	case 'd':
+	case 'D':
+		address = DOS_REG_ADDR(address);
+		break;
+	case 's':
+	case 'S':
+		address = SECBUS_REG_ADDR(address);
+		break;
 #endif // CONFIG_ARCH_MESON6
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	case 'v':
 	case 'V':
 		address = VCBUS_REG_ADDR(address);
 		break;
-	case 'm':
-	case 'M':
+        case 'm':
+        case 'M':
 		address = MMC_REG_ADDR(address);
 		break;
 #endif // CONFIG_ARCH_MESON8
@@ -149,252 +154,297 @@ static unsigned int  base_addr_convert(char base,unsigned int address)
 	return address;
 }
 
-/* Command Works */
-static int  do_read_work(char argn ,char **argv)
-{
-	char base ;
-	char *type = NULL;
-	unsigned int address,vir_addr,value;
-
-	if (argn < 2){
-		printk("%s",syntax_error_str);
-		return -1;
-	}
-
-	base = argv[1][0];
-	if (base == '0' || argn == 2){
-		address = simple_strtol(argv[1],NULL,16);
-		base = '0';
-	}
-	else
-		address = simple_strtol(argv[2],NULL,16);
-
-	type = base_addr_type(base);
-	vir_addr = base_addr_convert(base, address);
-	if (vir_addr == -1){
-		printk("%s[0x%04x] Invalid Address\n", type, address);
-		return -1;
-	}
-	value = aml_read_reg32(vir_addr);
-	if (base == '0')
-		printk("%s[0x%08x]=0x%08x\n", type, vir_addr, value);
-	else
-		printk("%s[0x%04x]=0x%08x\n", type, address, value);
-	return 0;
-}
-static int  do_dump_work(char argn ,char **argv)
-{
-	char base;
-	char *type = NULL;
-	unsigned int start, end, vstart, value;
-
-	if (argn < 4){
-		printk("%s",syntax_error_str);
-		return -1;
-	}
-
-	base = argv[1][0];
-	type = base_addr_type(base);
-	start = simple_strtol(argv[2], NULL, 16);
-	end = simple_strtol(argv[3], NULL, 16);
-
-	do {
-		vstart = base_addr_convert(base, start);
-		if (vstart == -1)
-			printk("%s[0x%04x] Invalid Address\n", type, start);
-		else	{
-			value = aml_read_reg32(vstart);
-			printk("%s[0x%04x]=0x%08x\n", type, start, value);
-		}
-		start++;
-	} while (start <= end);
-	return 0;
-}
-
-int do_clk_measure_work(char argn ,char **argv )
-{
-	if(argn == 1){
-		clk_measure(0xff);
-	}else{
-		clk_measure(simple_strtol(argv[1],NULL,10));
-	}
-	return 0;
-}
-
-static int do_write_work(char argn ,char **argv)
-{
-	char base ;
-	char *type = NULL;
-	unsigned int address,vir_addr,value;
-
-	if (argn < 3){
-		printk("%s",syntax_error_str);
-		return -1;
-	}
-
-	base = argv[2][0];
-	if (base == '0' || argn == 3){
-		address = simple_strtol(argv[2], NULL, 16);
-		base = '0';
-	}
-	else
-		address = simple_strtol(argv[3], NULL, 16);
-
-	type = base_addr_type(base);
-	vir_addr = base_addr_convert(base,address);
-	if (vir_addr == -1)	{
-		printk("%s[0x%04x] Invalid Address\n", type, address);
-		return -1;
-	}
-	value = simple_strtol(argv[1], NULL, 16);
-	aml_write_reg32(vir_addr, value);
-
-	if (base == '0')
-		printk("Write %s[0x%08x]=0x%08x\n", type, vir_addr, aml_read_reg32(vir_addr));
-	else
-		printk("Write %s[0x%04x]=0x%08x\n", type, address, aml_read_reg32(vir_addr));
-	return 0;
-}
-
-int do_thread_show_work(char argn ,char **argv )
-{
-	struct task_struct *p;
-	int pid;
-
-	if(argn != 1 && argn != 2){
-		printk("%s",syntax_error_str);
-		return 0;
-	}
-
-	printk("pid:	state:	task:	name:\n");
-	if(argn == 1){
-		for_each_process(p) {
-			pid = pid_vnr(get_task_pid(p,PIDTYPE_PID));
-			printk("%4d: \t%ld\t%p\t%s\n",pid,p->state,p,p->comm);
-		}
-	}else{
-		pid = simple_strtol(argv[1],NULL,10);
-		p = pid_task(find_vpid(pid), PIDTYPE_PID);
-		printk("%5d: \t%ld\t%p\t%s\n",pid,p->state,p,p->comm);
-	}
-	return 0;
-}
-int do_stack_show_work(char argn ,char **argv )
-{
-	pid_t pid;
-	struct task_struct *task;
-
-	if(argn != 2){
-		printk("%s",syntax_error_str);
-	}else{
-		pid = simple_strtol(argv[1],NULL,10);
-		rcu_read_lock();
-		task = pid_task(find_vpid(pid), PIDTYPE_PID);
-		rcu_read_unlock();
-		if(task)
-			sched_show_task(task);
-		else
-			printk("PID %d not found\n",pid);
-	}
-	return 0;
-}
-
-/* Main Command Dispatcher */
-static ssize_t dbg_do_command(struct class *class,
-			struct class_attribute *attr,	const char *buf, size_t count)
-{
-
-	int argn;
-	char * buf_work,*p,*para;
-	char * argv[4];
-	char cmd,work_mode;
-
-	buf_work = kstrdup(buf, GFP_KERNEL);
-	p = buf_work;
-
-	for(argn = 0; argn < 4; argn++){
-		para = strsep(&p," ");
-		if(para == NULL)
-			break;
-		argv[argn] = para;
-		//printk("argv[%d] = %s\n",argn,para);
-	}
-
-	if(argn < 1 || argn > 4)
-		goto end;
-
-	cmd = argv[0][0];
-	switch (cmd){
-	case 'r':
-	case 'R':
-		work_mode=WORK_MODE_READ;
-		do_read_work(argn,argv);
-		break;
-	case 'w':
-	case 'W':
-		work_mode=WORK_MODE_WRITE;
-		do_write_work(argn,argv);
-		break;
-	case 'c':
-	case 'C':
-		work_mode=WORK_MODE_CLKMEASURE;
-		do_clk_measure_work(argn,argv);
-		break;
-	case 'd':
-	case 'D':
-		work_mode=WORK_MODE_DUMP;
-		do_dump_work(argn,argv);
-		break;
-	case 't':
-	case 'T':
-		work_mode=WORK_MODE_THREAD;
-		do_thread_show_work(argn,argv);
-		break;
-	case 's':
-	case 'S':
-		work_mode=WORK_MODE_STACK;
-		do_stack_show_work(argn,argv);
-		break;
-
-	default:
-		goto end;
-	}
-
-	return count;
-end:
-	printk("error command!\n");
-	kfree(buf_work);
-	return -EINVAL;
-
-}
-
-static CLASS_ATTR(debug,S_IWUSR | S_IRUGO, dbg_do_help, dbg_do_command);
-static CLASS_ATTR(help,S_IWUSR | S_IRUGO, dbg_do_help, NULL);
-
-struct class * aml_sys_class;
-EXPORT_SYMBOL(aml_sys_class);
-static int __init aml_debug_init(void)
-{
-	int ret = 0;
-
-	aml_sys_class = class_create(THIS_MODULE,CLASS_NAME);
-
-	ret = class_create_file(aml_sys_class,&class_attr_debug);
-	ret = class_create_file(aml_sys_class,&class_attr_help);
-
-	return ret;
-}
-
-static void __exit aml_debug_exit(void)
-{
-	class_destroy(aml_sys_class);
-}
-
-
-module_init(aml_debug_init);
-module_exit(aml_debug_exit);
-
-MODULE_DESCRIPTION("Amlogic debug module");
-MODULE_LICENSE("GPL");
-MODULE_AUTHOR("Victor Wan <victor.wan@amlogic.com>");
-
+/* Command Works */
+static int  do_read_work(char argn ,char **argv)
+{
+	char base ;
+	char *type = NULL;
+	unsigned int address,vir_addr,value;
+
+	if (argn < 2){
+		printk("%s",syntax_error_str);
+		return -1;
+	}
+
+	base = argv[1][0];
+	if (base == '0' || argn == 2){
+		address = simple_strtol(argv[1],NULL,16);
+		base = '0';
+	}
+	else
+		address = simple_strtol(argv[2],NULL,16);
+
+	type = base_addr_type(base);
+	vir_addr = base_addr_convert(base, address);
+	if (vir_addr == -1){
+		printk("%s[0x%04x] Invalid Address\n", type, address);
+		return -1;
+	}
+	value = aml_read_reg32(vir_addr);
+	if (base == '0')
+		printk("%s[0x%08x]=0x%08x\n", type, vir_addr, value);
+	else
+		printk("%s[0x%04x]=0x%08x\n", type, address, value);
+	return 0;
+}
+static int  do_dump_work(char argn ,char **argv)
+{
+	char base;
+	char *type = NULL;
+	unsigned int start, end, vstart, value;
+
+	if (argn < 4){
+		printk("%s",syntax_error_str);
+		return -1;
+	}
+
+	base = argv[1][0];
+	type = base_addr_type(base);
+	start = simple_strtol(argv[2], NULL, 16);
+	end = simple_strtol(argv[3], NULL, 16);
+
+	do {
+		vstart = base_addr_convert(base, start);
+		if (vstart == -1)
+			printk("%s[0x%04x] Invalid Address\n", type, start);
+		else	{
+			value = aml_read_reg32(vstart);
+			printk("%s[0x%04x]=0x%08x\n", type, start, value);
+		}
+		start++;
+	} while (start <= end);
+	return 0;
+}
+
+int do_clk_measure_work(char argn ,char **argv )
+{
+	if(argn == 1){
+		clk_measure(0xff);
+	}else{
+		clk_measure(simple_strtol(argv[1],NULL,10));
+	}
+	return 0;
+}
+
+static int do_write_work(char argn ,char **argv)
+{
+	char base ;
+	char *type = NULL;
+	unsigned int address,vir_addr,value;
+
+	if (argn < 3){
+		printk("%s",syntax_error_str);
+		return -1;
+	}
+
+	base = argv[2][0];
+	if (base == '0' || argn == 3){
+		address = simple_strtol(argv[2], NULL, 16);
+		base = '0';
+	}
+	else
+		address = simple_strtol(argv[3], NULL, 16);
+
+	type = base_addr_type(base);
+	vir_addr = base_addr_convert(base,address);
+	if (vir_addr == -1)	{
+		printk("%s[0x%04x] Invalid Address\n", type, address);
+		return -1;
+	}
+	value = simple_strtol(argv[1], NULL, 16);
+	aml_write_reg32(vir_addr, value);
+
+	if (base == '0')
+		printk("Write %s[0x%08x]=0x%08x\n", type, vir_addr, aml_read_reg32(vir_addr));
+	else
+		printk("Write %s[0x%04x]=0x%08x\n", type, address, aml_read_reg32(vir_addr));
+	return 0;
+}
+
+int do_thread_show_work(char argn ,char **argv )
+{
+	struct task_struct *p;
+	int pid;
+
+	if(argn != 1 && argn != 2){
+		printk("%s",syntax_error_str);
+		return 0;
+	}
+
+	printk("pid:	state:	task:	name:\n");
+	if(argn == 1){
+		for_each_process(p) {
+			pid = pid_vnr(get_task_pid(p,PIDTYPE_PID));
+			printk("%4d: \t%ld\t%p\t%s\n",pid,p->state,p,p->comm);
+		} 
+	}else{
+		pid = simple_strtol(argv[1],NULL,10);
+		p = pid_task(find_vpid(pid), PIDTYPE_PID);
+		printk("%5d: \t%ld\t%p\t%s\n",pid,p->state,p,p->comm);
+	}
+	return 0;
+}
+int do_stack_show_work(char argn ,char **argv )
+{
+	pid_t pid;
+	struct task_struct *task;
+		
+	if(argn != 2){
+		printk("%s",syntax_error_str);
+	}else{
+		pid = simple_strtol(argv[1],NULL,10);
+		rcu_read_lock();
+		task = pid_task(find_vpid(pid), PIDTYPE_PID);
+		rcu_read_unlock();
+		if(task)
+			sched_show_task(task);
+		else
+			printk("PID %d not found\n",pid);
+	}
+	return 0;
+}
+
+#ifdef CONFIG_GPIO_TEST
+static struct wake_lock	debug_lock;
+extern int gpiotest(int argc, char **argv);
+
+#define MAX_ARG_NUM 8
+
+int do_gpio_test_work(char argn ,char **argv )
+{
+	//int i;
+	if(argn < 2 || argn > MAX_ARG_NUM){
+		printk("%s",syntax_error_str);
+	}else{
+		wake_lock(&debug_lock);
+		//for (i = 0; i < 10000; i++)
+			//printk("arg[%d] = %s\n", i, argv[i]);
+		gpiotest(argn, argv);
+		wake_unlock(&debug_lock);
+	}
+	return 0;
+}
+#else 
+
+#define MAX_ARG_NUM 4
+
+#endif /*CONFIG_GPIO_TEST/*
+
+
+
+/* Main Command Dispatcher */
+static ssize_t dbg_do_command(struct class *class,
+			struct class_attribute *attr,	const char *buf, size_t count)
+{
+
+	int argn;
+	char * buf_work,*p,*para;
+	char * argv[MAX_ARG_NUM];
+	char cmd,work_mode;
+
+	buf_work = kstrdup(buf, GFP_KERNEL);
+	p = buf_work;
+
+	for(argn = 0; argn < MAX_ARG_NUM; argn++){
+		para = strsep(&p," ");
+		if(para == NULL)
+			break;
+		argv[argn] = para;
+		//printk("argv[%d] = %s\n",argn,para);
+	}
+
+	if(argn < 1 || argn > MAX_ARG_NUM)
+		goto end;
+
+	cmd = argv[0][0];
+	switch (cmd){
+	case 'r':
+	case 'R':
+		work_mode=WORK_MODE_READ;
+		do_read_work(argn,argv);
+		break;
+	case 'w':
+	case 'W':
+		work_mode=WORK_MODE_WRITE;
+		do_write_work(argn,argv);
+		break;
+	case 'c':
+	case 'C':
+		work_mode=WORK_MODE_CLKMEASURE;
+		do_clk_measure_work(argn,argv);
+		break;
+	case 'd':
+	case 'D':
+		work_mode=WORK_MODE_DUMP;
+		do_dump_work(argn,argv);
+		break;
+	case 't':
+	case 'T':
+		work_mode=WORK_MODE_THREAD;
+		do_thread_show_work(argn,argv);
+		break;
+	case 's':
+	case 'S':
+		work_mode=WORK_MODE_STACK;
+		do_stack_show_work(argn,argv);
+		break;
+
+#ifdef CONFIG_GPIO_TEST	
+	case 'g':
+	case 'G':
+		work_mode=WORK_MODE_GPIOTEST;
+		do_gpio_test_work(argn,argv);
+		break;
+#endif /* CONFIG_GPIO_TEST */
+
+	default:
+		goto end;
+	}
+	
+	kfree(buf_work);
+	return count;
+end:
+	printk("error command!\n");
+	kfree(buf_work);
+	return -EINVAL;
+
+}
+
+static CLASS_ATTR(debug,S_IWUSR | S_IRUGO, dbg_do_help, dbg_do_command);
+static CLASS_ATTR(help,S_IWUSR | S_IRUGO, dbg_do_help, NULL);
+
+struct class * aml_sys_class;
+EXPORT_SYMBOL(aml_sys_class);
+static int __init aml_debug_init(void)
+{
+	int ret = 0;
+
+	aml_sys_class = class_create(THIS_MODULE,CLASS_NAME);
+
+	ret = class_create_file(aml_sys_class,&class_attr_debug);
+	ret = class_create_file(aml_sys_class,&class_attr_help);
+	
+#ifdef CONFIG_GPIO_TEST		
+	wake_lock_init(&debug_lock, WAKE_LOCK_SUSPEND, "gpiotest");
+#endif /* CONFIG_GPIO_TEST */
+
+	return ret;
+}
+
+static void __exit aml_debug_exit(void)
+{
+#ifdef CONFIG_GPIO_TEST		
+	wake_lock_destroy(&debug_lock);
+#endif /* CONFIG_GPIO_TEST */
+
+	class_destroy(aml_sys_class);
+}
+
+
+module_init(aml_debug_init);
+module_exit(aml_debug_exit);
+
+MODULE_DESCRIPTION("Amlogic debug module");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Victor Wan <victor.wan@amlogic.com>");
+
-- 
2.19.0

