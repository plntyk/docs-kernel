From 169c9677f4e9d3bf4587142c06494a9f0aa3e9ca Mon Sep 17 00:00:00 2001
From: "jiamin.miao" <jiamin.miao@amlogic.com>
Date: Fri, 18 Jul 2014 16:45:19 +0800
Subject: [PATCH 4541/5965] PD#91902:add static buf function for bcm wifi
 driver

Squashed commit of the following:

commit ce024dbc244a1e91f6ac29314651084109c9db2c
Author: jiamin.miao <jiamin.miao@amlogic.com>
Date:   Wed Jun 11 14:01:01 2014 +0800

    PD#91902:try to use vmalloc when kmalloc failed

commit 7852b47ba5f3e8db974ee9ea49df1a6886b51df7
Author: jiamin.miao <jiamin.miao@amlogic.com>
Date:   Wed Jun 11 13:54:51 2014 +0800

    PD#91902:add static buf function for bcm wifi driver
---
 drivers/amlogic/wifi/Kconfig          |   4 +
 drivers/amlogic/wifi/Makefile         |   1 +
 drivers/amlogic/wifi/dhd_static_buf.c | 173 ++++++++++++++++++++++++++
 net/wireless/core.c                   |  25 +++-
 net/wireless/core.h                   |   2 +
 5 files changed, 201 insertions(+), 4 deletions(-)
 create mode 100755 drivers/amlogic/wifi/dhd_static_buf.c
 mode change 100644 => 100755 net/wireless/core.h

diff --git a/drivers/amlogic/wifi/Kconfig b/drivers/amlogic/wifi/Kconfig
index ac2374b4b85c..d0630195d6c8 100755
--- a/drivers/amlogic/wifi/Kconfig
+++ b/drivers/amlogic/wifi/Kconfig
@@ -8,6 +8,10 @@ config AM_WIFI_SD_MMC
 	depends on AM_WIFI
 	default n
 
+config DHD_USE_STATIC_BUF
+    bool "broadcom wifi static buff support"
+    default n
+
 config AM_WIFI_USB
 	bool "Amlogic USB Wi-Fi Dongle Support"
 	depends on AM_WIFI
diff --git a/drivers/amlogic/wifi/Makefile b/drivers/amlogic/wifi/Makefile
index 11198ca52230..84c9bd5a19d1 100755
--- a/drivers/amlogic/wifi/Makefile
+++ b/drivers/amlogic/wifi/Makefile
@@ -1,2 +1,3 @@
 obj-$(CONFIG_AM_WIFI_SD_MMC) +=  wifi_dt.o
 obj-$(CONFIG_AM_WIFI) += wifi_power.o
+obj-$(CONFIG_DHD_USE_STATIC_BUF) += dhd_static_buf.o
diff --git a/drivers/amlogic/wifi/dhd_static_buf.c b/drivers/amlogic/wifi/dhd_static_buf.c
new file mode 100755
index 000000000000..9954a751b22f
--- /dev/null
+++ b/drivers/amlogic/wifi/dhd_static_buf.c
@@ -0,0 +1,173 @@
+#include <linux/module.h>
+#include <linux/kernel.h> 
+#include <linux/init.h> 
+#include <linux/platform_device.h> 
+#include <linux/delay.h> 
+#include <linux/err.h> 
+#include <linux/skbuff.h> 
+#include <linux/wlan_plat.h> 
+
+#define CONFIG_BROADCOM_WIFI_RESERVED_MEM
+ 
+#ifdef CONFIG_BROADCOM_WIFI_RESERVED_MEM 
+ 
+#define WLAN_STATIC_PKT_BUF			4 
+#define WLAN_STATIC_SCAN_BUF0		5 
+#define WLAN_STATIC_SCAN_BUF1		6 
+#define WLAN_STATIC_DHD_INFO		7
+#define PREALLOC_WLAN_SEC_NUM		5 
+#define PREALLOC_WLAN_BUF_NUM		160 
+#define PREALLOC_WLAN_SECTION_HEADER	24 
+ 
+#define WLAN_SECTION_SIZE_0	(PREALLOC_WLAN_BUF_NUM * 128) 
+#define WLAN_SECTION_SIZE_1	(PREALLOC_WLAN_BUF_NUM * 128) 
+#define WLAN_SECTION_SIZE_2	(PREALLOC_WLAN_BUF_NUM * 512) 
+#define WLAN_SECTION_SIZE_3	(PREALLOC_WLAN_BUF_NUM * 1024) 
+#define WLAN_SECTION_SIZE_7     (PREALLOC_WLAN_BUF_NUM * 128)
+ 
+#define DHD_SKB_HDRSIZE			336 
+#define DHD_SKB_1PAGE_BUFSIZE	((PAGE_SIZE*1)-DHD_SKB_HDRSIZE) 
+#define DHD_SKB_2PAGE_BUFSIZE	((PAGE_SIZE*2)-DHD_SKB_HDRSIZE) 
+#define DHD_SKB_4PAGE_BUFSIZE	((PAGE_SIZE*4)-DHD_SKB_HDRSIZE) 
+ 
+#define WLAN_SKB_BUF_NUM	17 
+ 
+static struct sk_buff *wlan_static_skb[WLAN_SKB_BUF_NUM]; 
+ 
+struct wlan_mem_prealloc { 
+	void *mem_ptr; 
+	unsigned long size; 
+}; 
+ 
+static struct wlan_mem_prealloc wlan_mem_array[PREALLOC_WLAN_SEC_NUM] = { 
+	{NULL, (WLAN_SECTION_SIZE_0 + PREALLOC_WLAN_SECTION_HEADER)}, 
+	{NULL, (WLAN_SECTION_SIZE_1 + PREALLOC_WLAN_SECTION_HEADER)}, 
+	{NULL, (WLAN_SECTION_SIZE_2 + PREALLOC_WLAN_SECTION_HEADER)}, 
+	{NULL, (WLAN_SECTION_SIZE_3 + PREALLOC_WLAN_SECTION_HEADER)},
+	{NULL, (WLAN_SECTION_SIZE_7 + PREALLOC_WLAN_SECTION_HEADER)}    
+}; 
+ 
+void *wlan_static_scan_buf0; 
+void *wlan_static_scan_buf1; 
+void *bcmdhd_mem_prealloc(int section, unsigned long size) 
+{ 
+	if (section == WLAN_STATIC_PKT_BUF) {
+		printk("1 %s: section=%d, wlan_static_skb=%p\n",
+			__FUNCTION__, section, wlan_static_skb);
+		return wlan_static_skb; 
+	}
+	if (section == WLAN_STATIC_SCAN_BUF0) {
+		printk("2 %s: section=%d, wlan_static_scan_buf0=%p\n",
+			__FUNCTION__, section, wlan_static_scan_buf0);
+		return wlan_static_scan_buf0;	 
+	}
+	if (section == WLAN_STATIC_SCAN_BUF1) {
+		printk("3 %s: section=%d, wlan_static_scan_buf1=%p\n",
+			__FUNCTION__, section, wlan_static_scan_buf1);
+		return wlan_static_scan_buf1;	 
+	}
+	if (section == WLAN_STATIC_DHD_INFO) {
+		printk("4 %s: section=%d, wlan_mem_array[4]=%p\n",
+			__FUNCTION__, section, wlan_mem_array[4].mem_ptr);
+        return wlan_mem_array[4].mem_ptr;
+	}
+	if ((section < 0) || (section > PREALLOC_WLAN_SEC_NUM))  {
+		printk("5 %s: out of section %d\n", __FUNCTION__, section);
+		return NULL; 
+	}
+
+	if (wlan_mem_array[section].size < size) {
+		printk("6 %s: wlan_mem_array[section].size=%d, size=%d\n",
+			__FUNCTION__, wlan_mem_array[section].size, size);
+		return NULL; 
+	}
+	printk("7 %s: wlan_mem_array[section].mem_ptr=%p, size=%d\n",
+		__FUNCTION__, wlan_mem_array[section], size);
+ 
+	return wlan_mem_array[section].mem_ptr; 
+} 
+
+EXPORT_SYMBOL(bcmdhd_mem_prealloc);
+
+int bcmdhd_init_wlan_mem(void) 
+{ 
+	int i;
+	int j;
+ 
+	for (i = 0; i < 8; i++) { 
+		wlan_static_skb[i] = dev_alloc_skb(DHD_SKB_1PAGE_BUFSIZE); 
+		if (!wlan_static_skb[i]) 
+			goto err_skb_alloc; 
+		printk("1 %s: wlan_static_skb[%d]=%p, size=%d\n",
+			__FUNCTION__, i, wlan_static_skb[i], DHD_SKB_1PAGE_BUFSIZE);
+	} 
+ 
+	for (; i < 16; i++) { 
+		wlan_static_skb[i] = dev_alloc_skb(DHD_SKB_2PAGE_BUFSIZE); 
+		if (!wlan_static_skb[i]) 
+			goto err_skb_alloc; 
+		printk("2 %s: wlan_static_skb[%d]=%p, size=%d\n",
+			__FUNCTION__, i, wlan_static_skb[i], DHD_SKB_2PAGE_BUFSIZE);
+	} 
+ 
+	wlan_static_skb[i] = dev_alloc_skb(DHD_SKB_4PAGE_BUFSIZE); 
+	if (!wlan_static_skb[i]) 
+		goto err_skb_alloc; 
+	printk("3 %s: wlan_static_skb[%d]=%p, size=%d\n",
+		__FUNCTION__, i, wlan_static_skb[i], DHD_SKB_4PAGE_BUFSIZE);
+ 
+	for (i = 0 ; i < PREALLOC_WLAN_SEC_NUM ; i++) { 
+		wlan_mem_array[i].mem_ptr = 
+				kmalloc(wlan_mem_array[i].size, GFP_KERNEL); 
+ 
+		if (!wlan_mem_array[i].mem_ptr) 
+			goto err_mem_alloc; 
+		printk("4 %s: wlan_mem_array[%d]=%p, size=%d\n",
+			__FUNCTION__, i, wlan_static_skb[i], wlan_mem_array[i].size);
+	} 
+
+	wlan_static_scan_buf0 = kmalloc (65536, GFP_KERNEL); 
+	if(!wlan_static_scan_buf0)		 
+		goto err_mem_alloc; 
+	printk("5 %s: wlan_static_scan_buf0=%p, size=%d\n",
+		__FUNCTION__, wlan_static_scan_buf0, 65536);
+
+	wlan_static_scan_buf1 = kmalloc (65536, GFP_KERNEL); 
+	if(!wlan_static_scan_buf1)		 
+		goto err_mem_alloc; 
+	printk("6 %s: wlan_static_scan_buf1=%p, size=%d\n",
+		__FUNCTION__, wlan_static_scan_buf1, 65536);
+ 
+	printk("%s: WIFI MEM Allocated\n", __FUNCTION__); 
+	return 0; 
+ 
+ err_mem_alloc: 
+	pr_err("Failed to mem_alloc for WLAN\n"); 
+	for (j = 0 ; j < i ; j++) 
+		kfree(wlan_mem_array[j].mem_ptr); 
+ 
+	i = WLAN_SKB_BUF_NUM; 
+ 
+ err_skb_alloc: 
+	pr_err("Failed to skb_alloc for WLAN\n"); 
+	for (j = 0 ; j < i ; j++) 
+		dev_kfree_skb(wlan_static_skb[j]); 
+ 
+	return -ENOMEM; 
+} 
+#endif /* CONFIG_BROADCOM_WIFI_RESERVED_MEM */ 
+
+#if 1
+static int __init bcmdhd_wlan_init(void) 
+{ 
+    printk("%s()\n", __FUNCTION__);
+ 
+#ifdef CONFIG_BROADCOM_WIFI_RESERVED_MEM 
+	bcmdhd_init_wlan_mem(); 
+#endif 
+ 
+	return 0;
+} 
+
+__initcall(bcmdhd_wlan_init);
+#endif
\ No newline at end of file
diff --git a/net/wireless/core.c b/net/wireless/core.c
index e0cbfaefb884..389e96a21c1a 100755
--- a/net/wireless/core.c
+++ b/net/wireless/core.c
@@ -18,6 +18,7 @@
 #include <linux/etherdevice.h>
 #include <linux/rtnetlink.h>
 #include <linux/sched.h>
+#include <linux/vmalloc.h>
 #include <net/genetlink.h>
 #include <net/cfg80211.h>
 #include "nl80211.h"
@@ -326,8 +327,15 @@ struct wiphy *wiphy_new(const struct cfg80211_ops *ops, int sizeof_priv)
 	alloc_size = sizeof(*rdev) + sizeof_priv;
 
 	rdev = kzalloc(alloc_size, GFP_KERNEL);
-	if (!rdev)
+	if (!rdev) {
+		printk("kzalloc %d memory failed! try to use vzalloc\n", alloc_size);
+		rdev = vzalloc(alloc_size);
+		if(!rdev) {
+			printk("vzalloc %d memory failed\n", alloc_size);
 		return NULL;
+		}
+		rdev->vmalloc_flag = 1;
+	}
 
 	rdev->ops = ops;
 
@@ -339,7 +347,10 @@ struct wiphy *wiphy_new(const struct cfg80211_ops *ops, int sizeof_priv)
 		wiphy_counter--;
 		mutex_unlock(&cfg80211_mutex);
 		/* ugh, wrapped! */
-		kfree(rdev);
+		if(rdev->vmalloc_flag)
+			vfree(rdev);
+		else
+			kfree(rdev);
 		return NULL;
 	}
 
@@ -380,7 +391,10 @@ struct wiphy *wiphy_new(const struct cfg80211_ops *ops, int sizeof_priv)
 				   &rdev->rfkill_ops, rdev);
 
 	if (!rdev->rfkill) {
-		kfree(rdev);
+		if(rdev->vmalloc_flag)
+			vfree(rdev);
+		else
+			kfree(rdev);
 		return NULL;
 	}
 
@@ -757,7 +771,10 @@ void cfg80211_dev_free(struct cfg80211_registered_device *rdev)
 	}
 	list_for_each_entry_safe(scan, tmp, &rdev->bss_list, list)
 		cfg80211_put_bss(&rdev->wiphy, &scan->pub);
-	kfree(rdev);
+	if(rdev->vmalloc_flag)
+	    vfree(rdev);
+    else
+        kfree(rdev);
 }
 
 void wiphy_free(struct wiphy *wiphy)
diff --git a/net/wireless/core.h b/net/wireless/core.h
old mode 100644
new mode 100755
index fd35dae547c4..039388930b6c
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -86,6 +86,8 @@ struct cfg80211_registered_device {
 
 	struct cfg80211_wowlan *wowlan;
 
+    int vmalloc_flag;
+
 	struct delayed_work dfs_update_channels_wk;
 
 	/* netlink port which started critical protocol (0 means not started) */
-- 
2.19.0

