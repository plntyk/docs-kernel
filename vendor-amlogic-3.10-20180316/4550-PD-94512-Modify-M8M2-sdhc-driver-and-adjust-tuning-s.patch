From c9619ebd2df4f4ce079d589d0e71b4a4ce74595b Mon Sep 17 00:00:00 2001
From: "benjamin.zhao" <benjamin.zhao@amlogic.com>
Date: Mon, 21 Jul 2014 17:30:33 +0800
Subject: [PATCH 4550/5965] PD#94512: Modify M8M2 sdhc driver and adjust tuning
 setting

---
 .../arm/boot/dts/amlogic/meson8m2_n200_2G.dtd | 207 +++++++++---------
 drivers/amlogic/mmc/aml_sdhc_m8.c             |  62 ++++--
 2 files changed, 154 insertions(+), 115 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd b/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
index c9c44e5fe624..124f2b68964c 100755
--- a/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
@@ -473,19 +473,20 @@ sdio{
 //$$ L3 PROP_U32 = "max_req_size"
 //$$ L2 PROP_STR = "gpio_dat3"
 //$$ L2 PROP_U32 = "card_type"
-        emmc{
-            status = "ok";
-            port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
-            pinname = "emmc";
-            ocr_avail = <0x200000>;          /**VDD voltage 3.3 ~ 3.4 */
-            caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
-            f_min = <300000>;
-            f_max = <50000000>;
-            f_max_w = <50000000>;
-            max_req_size = <0x20000>;          /**128KB*/
-            gpio_dat3 = "BOOT_3";
-            card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
-        };
+
+//        emmc{
+//            status = "ok";
+//            port = <2>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+//            pinname = "emmc";
+//            ocr_avail = <0x200000>;          /**VDD voltage 3.3 ~ 3.4 */
+//            caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+//            f_min = <300000>;
+//            f_max = <50000000>;
+//            f_max_w = <50000000>;
+//            max_req_size = <0x20000>;          /**128KB*/
+//            gpio_dat3 = "BOOT_3";
+//            card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+//        };
 
 //$$ DEVICE="sdio"
 //$$ L2 PROP_STR = "status"
@@ -510,18 +511,19 @@ sdio{
         };
     };
 
-//    sdhc{
-//        compatible = "amlogic,aml_sdhc";
-//        dev_name = "aml_sdhc.0";
-//        reg = <0xc1108e00 0x3c>;
-//        pinctrl-names = "sdhc_sd_clk_cmd_pins", "sdhc_sd_all_pins", "sdhc_emmc_clk_cmd_pins", "sdhc_emmc_all_pins", "sdhc_sdio_clk_cmd_pins", "sdhc_sdio_all_pins";
-//        pinctrl-0 = <&sdhc_sd_clk_cmd_pins>;
-//        pinctrl-1 = <&sdhc_sd_all_pins>;
-//        pinctrl-2 = <&sdhc_emmc_clk_cmd_pins>;
-//        pinctrl-3 = <&sdhc_emmc_all_pins>;
-//        pinctrl-4 = <&sdhc_sdio_clk_cmd_pins>;
-//        pinctrl-5 = <&sdhc_sdio_all_pins>;
-//        //pinctrl-6 = <&sd_1bit_pins>;
+    sdhc{
+        compatible = "amlogic,aml_sdhc";
+        dev_name = "aml_sdhc.0";
+        status = "okay";
+        reg = <0xc1108e00 0x3c>;
+        pinctrl-names = "sdhc_sd_clk_cmd_pins", "sdhc_sd_all_pins", "sdhc_emmc_clk_cmd_pins", "sdhc_emmc_all_pins", "sdhc_sdio_clk_cmd_pins", "sdhc_sdio_all_pins";
+        pinctrl-0 = <&sdhc_sd_clk_cmd_pins>;
+        pinctrl-1 = <&sdhc_sd_all_pins>;
+        pinctrl-2 = <&sdhc_emmc_clk_cmd_pins>;
+        pinctrl-3 = <&sdhc_emmc_all_pins>;
+        pinctrl-4 = <&sdhc_sdio_clk_cmd_pins>;
+        pinctrl-5 = <&sdhc_sdio_all_pins>;
+        //pinctrl-6 = <&sd_1bit_pins>;
 
 //$$ DEVICE="sd"
 //$$ L2 PROP_STR = "status"
@@ -570,19 +572,20 @@ sdio{
 //$$ L3 PROP_U32 = "max_req_size"
 //$$ L2 PROP_STR = "gpio_dat3"
 //$$ L2 PROP_U32 = "card_type"
-//        emmc{
-//            status = "okay";
-//            port = <5>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
-//            pinname = "emmc";
-//            ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
-//            caps = "MMC_CAP_8_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
-//            caps2 = "MMC_CAP2_HS200_1_8V_SDR";
-//            f_min = <300000>;
-//            f_max = <100000000>;
-//            max_req_size = <0x20000>;          /**128KB*/
-//            gpio_dat3 = "BOOT_3";
-//            card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
-//        };  
+
+        emmc{
+            status = "okay";
+            port = <5>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+            pinname = "emmc";
+            ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
+            caps = "MMC_CAP_8_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+            caps2 = "MMC_CAP2_HS200_1_8V_SDR";
+	        f_min = <300000>;
+            f_max = <150000000>;
+            max_req_size = <0x20000>;          /**128KB*/
+            gpio_dat3 = "BOOT_3";
+            card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+        };
 
 //$$ DEVICE="sdio"
 //$$ L2 PROP_STR = "status"
@@ -605,7 +608,7 @@ sdio{
         //     max_req_size = <0x20000>;          /**128KB*/
         //     card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
         // };
-//    };
+    };
     
 
 /// ***************************************************************************************
@@ -1586,69 +1589,71 @@ sdio{
             amlogic,pullup=<1>;
             amlogic,pullupen=<1>;
         };
+        
+        sdhc_sd_clk_cmd_pins:sdhc_sd_clk_cmd_pins{
+            amlogic,setmask=<2 0x00000030>;         /*sdhc b*/
+            amlogic,clrmask=<5 0x00007c00           /*sdhc a*/
+                                4 0x7c000000        /*sdhc c*/
+                                2 0x0000fc00        /*sdio b*/
+                                8 0x00000600>;      /*UART*/
+            amlogic,pins = "CARD_2","CARD_3"; /* CARD_2:CLK, CARD_3:CMD */
+            amlogic,enable-output=<1>; /* 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        sdhc_sd_all_pins:sdhc_sd_all_pins{
+            amlogic,setmask=<2 0x000000f0>;         /*sdhc b*/
+            amlogic,clrmask=<5 0x00007c00           /*sdhc a*/
+                                4 0x7c000000        /*sdhc c*/
+                                2 0x0000fc00        /*sdio b*/
+                                8 0x00000600>;      /*UART*/
+            amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+            amlogic,enable-output=<1>; /* 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
 
-//        sdhc_sd_clk_cmd_pins:sdhc_sd_clk_cmd_pins{
-//            amlogic,setmask=<2 0x00000030>;         /*sdhc b*/
-//            amlogic,clrmask=<5 0x00007c00           /*sdhc a*/
-//                                4 0x7c000000        /*sdhc c*/
-//                                2 0x0000fc00        /*sdio b*/
-//                                8 0x00000600>;      /*UART*/
-//            amlogic,pins = "CARD_2","CARD_3"; /* CARD_2:CLK, CARD_3:CMD */
-//            amlogic,enable-output=<1>; /* 0:output, 1:input */
-//            amlogic,pullup=<1>;
-//            amlogic,pullupen=<1>;
-//        };
-//        sdhc_sd_all_pins:sdhc_sd_all_pins{
-//            amlogic,setmask=<2 0x000000f0>;         /*sdhc b*/
-//            amlogic,clrmask=<5 0x00007c00           /*sdhc a*/
-//                                4 0x7c000000        /*sdhc c*/
-//                                2 0x0000fc00        /*sdio b*/
-//                                8 0x00000600>;      /*UART*/
-//            amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
-//            amlogic,enable-output=<1>; /* 0:output, 1:input */
-//            amlogic,pullup=<1>;
-//            amlogic,pullupen=<1>;
-//        };
-//        sdhc_emmc_clk_cmd_pins:sdhc_emmc_clk_cmd_pins{
-//            amlogic,setmask=<4 0x0c000000>;         /*bit[26-27] */
-//            amlogic,clrmask=<2 0x04c000f0           /*sdhc b & nand*/
-//                                5 0x00007c00        /*sdhc a*/
-//                                6 0x3f000000>;        /*sdio c*/
-//            amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
-//            amlogic,enable-output=<1>; /** 0:output, 1:input */
-//            amlogic,pullup=<1>;
-//            amlogic,pullupen=<1>;
-//        };
-//        sdhc_emmc_all_pins:sdhc_emmc_all_pins{
-//            amlogic,setmask=<4 0x7c000000>;         /*sdhc c*/
-//            amlogic,clrmask=<2 0x04c000f0           /*sdhc b & nand*/
-//                                5 0x00007c00        /*sdhc a*/
-//                                6 0x3f000000>;        /*sdio c*/
-//            amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4","BOOT_5","BOOT_6","BOOT_7","BOOT_16","BOOT_17";
-//            amlogic,enable-output=<1>; /** 0:output, 1:input */
-//            amlogic,pullup=<1>;
-//            amlogic,pullupen=<1>;
-//        };
-//        sdhc_sdio_clk_cmd_pins:sdhc_sdio_clk_cmd_pins{
-//            amlogic,setmask=<5 0x00000c00>;         /*sdhc a bit[10-11] */
-//            amlogic,clrmask=<2 0x058000f0           /*sdhc b*/
-//                                4 0x7c000000        /*sdhc c */
-//                                8 0x0000003f>;        /*sdio a*/
-//            amlogic,pins = "GPIOX_8","GPIOX_9"; /** BOOT_16:CMD, BOOT_17:CLK */
-//            amlogic,enable-output=<1>; /** 0:output, 1:input */
-//            amlogic,pullup=<1>;
-//            amlogic,pullupen=<1>;
-//        };
-//        sdhc_sdio_all_pins:sdhc_sdio_all_pins{
-//            amlogic,setmask=<5 0x00006c00>;         /*sdhc a*/
-//            amlogic,clrmask=<2 0x058000f0           /*sdhc b*/
-//                                4 0x7c000000        /*sdhc c */
-//                                8 0x0000003f>;        /*sdio a*/
-//            amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
-//            amlogic,enable-output=<1>; /** 0:output, 1:input */
-//            amlogic,pullup=<1>;
-//            amlogic,pullupen=<1>;
-//        };
+        sdhc_emmc_clk_cmd_pins:sdhc_emmc_clk_cmd_pins{
+            amlogic,setmask=<4 0x0c000000>;         /*bit[26-27] */
+            amlogic,clrmask=<2 0x04c000f0           /*sdhc b & nand*/
+                                5 0x00007c00        /*sdhc a*/
+                                6 0x3f000000>;        /*sdio c*/
+            amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        sdhc_emmc_all_pins:sdhc_emmc_all_pins{
+            amlogic,setmask=<4 0x7c000000>;         /*sdhc c*/
+            amlogic,clrmask=<2 0x04c000f0           /*sdhc b & nand*/
+                                5 0x00007c00        /*sdhc a*/
+                                6 0x3f000000>;        /*sdio c*/
+            amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4","BOOT_5","BOOT_6","BOOT_7","BOOT_16","BOOT_17";
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+
+        sdhc_sdio_clk_cmd_pins:sdhc_sdio_clk_cmd_pins{
+            amlogic,setmask=<5 0x00000c00>;         /*sdhc a bit[10-11] */
+            amlogic,clrmask=<2 0x058000f0           /*sdhc b*/
+                                4 0x7c000000        /*sdhc c */
+                                8 0x0000003f>;        /*sdio a*/
+            amlogic,pins = "GPIOX_8","GPIOX_9"; /** BOOT_16:CMD, BOOT_17:CLK */
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
+        sdhc_sdio_all_pins:sdhc_sdio_all_pins{
+            amlogic,setmask=<5 0x00006c00>;         /*sdhc a*/
+            amlogic,clrmask=<2 0x058000f0           /*sdhc b*/
+                                4 0x7c000000        /*sdhc c */
+                                8 0x0000003f>;        /*sdio a*/
+            amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+            amlogic,enable-output=<1>; /** 0:output, 1:input */
+            amlogic,pullup=<1>;
+            amlogic,pullupen=<1>;
+        };
 
 //$$ MATCH "I2C_AO_pin_match" = "&ao_i2c_master"
 //$$ L2 PROP_U32 2 = "amlogic,setmask"
diff --git a/drivers/amlogic/mmc/aml_sdhc_m8.c b/drivers/amlogic/mmc/aml_sdhc_m8.c
index 7b80a0d03139..b8ae0ded78ac 100755
--- a/drivers/amlogic/mmc/aml_sdhc_m8.c
+++ b/drivers/amlogic/mmc/aml_sdhc_m8.c
@@ -388,7 +388,10 @@ static int aml_sdhc_execute_tuning_ (struct mmc_host *mmc, u32 opcode,
     // sdhc_err("vclk2_bak=%#x\n", vclk2_bak);
 	
     if (pdata->is_in) {
-        schedule_delayed_work(&pdata->retuning, 15*HZ);
+        if(aml_card_type_mmc(pdata))
+            schedule_delayed_work(&pdata->retuning, 60*HZ);
+        else
+            schedule_delayed_work(&pdata->retuning, 15*HZ);
     }
 
 	return ret;
@@ -507,7 +510,7 @@ static void aml_sdhc_reg_init(struct amlsd_host* host)
 
     /*Send Stop Cmd automatically*/
 #if (defined CONFIG_ARCH_MESON8M2)
-    misc.txstart_thres = 4; // [29:31] = 7
+    misc.txstart_thres = 6;//4; // [29:31] = 7
 #else
     misc.reserved2 = 7; // [29:31] = 7
 #endif
@@ -635,6 +638,10 @@ void aml_sdhc_set_pdma(struct amlsd_platform* pdata, struct mmc_request* mrq)
     BUG_ON(!mrq->data);
 #if 1
     pdma->dma_mode = 1;
+#if (defined CONFIG_ARCH_MESON8M2)
+    writel(*(u32*)pdma, host->base+SDHC_PDMA);
+    return;
+#endif
     if(mrq->data->flags & MMC_DATA_WRITE){
         /*self-clear-fill, recommend to write before sd send*/
         //init sets rd_burst to 15
@@ -834,11 +841,15 @@ void aml_sdhc_start_cmd(struct amlsd_platform* pdata, struct mmc_request* mrq)
          * wait dma done interrupt(int[11]), don't need care about
          * dat0 busy or not.
          */
+#if (defined CONFIG_ARCH_MESON8M2)
+        ictl.dma_done = 1; // for hardware automatical flush
+#else         
         if((mrq->data->flags & MMC_DATA_WRITE) 
             || aml_card_type_sdio(pdata))
             ictl.dma_done = 1; // for hardware automatical flush
         else
             ictl.data_xfer_ok = 1; // for software flush
+#endif             
     }else
         ictl.resp_ok = 1;
 
@@ -881,6 +892,7 @@ void aml_sdhc_start_cmd(struct amlsd_platform* pdata, struct mmc_request* mrq)
     }
 #endif
 
+#ifndef CONFIG_ARCH_MESON8M2
     loop_limit = 100;
     for (i = 0; i < loop_limit; i++) {
         vesta = readl(host->base + SDHC_ESTA);
@@ -915,6 +927,7 @@ void aml_sdhc_start_cmd(struct amlsd_platform* pdata, struct mmc_request* mrq)
         }
 
     }
+#endif
 
     writel(*(u32*)&send, host->base+SDHC_SEND); /*Command send*/
 }
@@ -1215,7 +1228,9 @@ timeout_handle:
     //writel(vista, host->base+SDHC_ISTA);
  
     //do not send stop for sdio wifi case 
-    if(host->mrq->stop && aml_card_type_mmc(pdata) && !host->cmd_is_stop){
+    if(host->mrq->stop && aml_card_type_mmc(pdata) && !host->cmd_is_stop
+        && (host->mrq->cmd->opcode != MMC_SEND_TUNING_BLOCK) 
+                    && (host->mrq->cmd->opcode != MMC_SEND_TUNING_BLOCK_HS200)){
     //if((host->mrq->cmd->opcode != SD_IO_RW_DIRECT) && (host->mrq->cmd->opcode != SD_IO_RW_EXTENDED) 
    //         && (!mmc_card_removed(pdata->mmc->card)) && (!mrq->data)){
         //spin_lock_irqsave(&host->mrq_lock, flags);
@@ -1640,19 +1655,13 @@ irqreturn_t aml_sdhc_data_thread(int irq, void *data)
             xfer_bytes = mrq->data->blksz*mrq->data->blocks;
             /* copy buffer from dma to data->sg in read cmd*/
             if(host->mrq->data->flags & MMC_DATA_READ){
-                
+#ifndef CONFIG_ARCH_MESON8M2
                 if(!aml_card_type_sdio(pdata)){
                     for(i=0; i< STAT_POLL_TIMEOUT; i++){
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) 
-                        dmc_sts = readl(P_MMC_CHAN_STS);
-                        dmc_sts = (dmc_sts >> 11)&1;
-#elif(MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B)    
-                        dmc_sts = readl(P_DMC_CHAN_STS);
-                        dmc_sts = (dmc_sts >> 15)&1;                        
-#endif                           
+                          
                         esta = readl(host->base + SDHC_ESTA);
                         esta = readl(host->base + SDHC_ESTA); // read twice, we just focus on the second result
-                        if ((((esta >> 11) & 7) == 0) && dmc_sts) // REGC_ESTA[13:11]=0? then OK
+                        if(((esta >> 11) & 0x7) == 0) // REGC_ESTA[13:11]=0? then OK
                             break;
                         else if (i == 10)
                             sdhc_err("SDHC_ESTA=0x%x\n", esta);
@@ -1663,7 +1672,30 @@ irqreturn_t aml_sdhc_data_thread(int irq, void *data)
     
                     pdma->rxfifo_manual_flush |= 0x02; // bit[30]
                     writel(vpdma, host->base+SDHC_PDMA);
-                }
+                     //check ddr dma status after controller dma status OK
+                    for(i=0; i< STAT_POLL_TIMEOUT; i++){
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) 
+                        dmc_sts = readl(P_MMC_CHAN_STS);
+                        dmc_sts = (dmc_sts >> 11)&1;
+#elif(MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B)    
+#if (defined CONFIG_ARCH_MESON8M2)
+                        dmc_sts = 1;
+#else  
+                        dmc_sts = readl(P_DMC_CHAN_STS);
+                        dmc_sts = (dmc_sts >> 15)&1;     
+#endif                                              
+#endif  
+                        if(dmc_sts)
+                            break;
+                        else if (i == 10)
+                            sdhc_err("SDHC_ESTA=0x%x\n", esta);
+                    }
+                   
+                    if (i == STAT_POLL_TIMEOUT) // error
+                        sdhc_err("Warning: DMA state is wrong! SDHC_ESTA=0x%x dmc_sts:%d\n", dmc_sts);                                                                        
+                  
+                }                              
+#endif
 
                 aml_sg_copy_buffer(mrq->data->sg, mrq->data->sg_len, host->bn_buf,
                             xfer_bytes, 0);
@@ -1757,7 +1789,9 @@ irqreturn_t aml_sdhc_data_thread(int irq, void *data)
             spin_unlock_irqrestore(&host->mrq_lock, flags);
                           
             //do not send stop for sdio wifi case 
-            if(host->mrq->stop && aml_card_type_mmc(pdata) && pdata->is_in){
+            if(host->mrq->stop && aml_card_type_mmc(pdata) && pdata->is_in
+                && (host->mrq->cmd->opcode != MMC_SEND_TUNING_BLOCK) 
+                    && (host->mrq->cmd->opcode != MMC_SEND_TUNING_BLOCK_HS200)){
             //if((host->mrq->cmd->opcode != SD_IO_RW_DIRECT) && (host->mrq->cmd->opcode != SD_IO_RW_EXTENDED) 
            //         && (!mmc_card_removed(pdata->mmc->card)) && (!mrq->data)){
                 aml_sdhc_send_stop(host);                
-- 
2.19.0

