From f550c677ed10bcd7f81876ab009206e082666293 Mon Sep 17 00:00:00 2001
From: "zongdong.jiao" <zongdong.jiao@amlogic.com>
Date: Thu, 17 Jul 2014 17:48:40 +0800
Subject: [PATCH 4553/5965] PD #94182: hpll: update HPLL setting

HHI_VID_PLL_CNTL5[15:12] set to 0x6 when hpll is under 2.97G
---
 drivers/amlogic/display/vout/enc_clk_config.c | 248 ++++++++++++++----
 1 file changed, 203 insertions(+), 45 deletions(-)

diff --git a/drivers/amlogic/display/vout/enc_clk_config.c b/drivers/amlogic/display/vout/enc_clk_config.c
index b51784a06445..e922393d1139 100755
--- a/drivers/amlogic/display/vout/enc_clk_config.c
+++ b/drivers/amlogic/display/vout/enc_clk_config.c
@@ -33,15 +33,14 @@
 static void set_hpll_clk_out(unsigned clk)
 {
     printk("config HPLL\n");
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8M2
     aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c88000);
     aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xca563823);
     aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x40238100);
     aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00012286);
     aml_write_reg32(P_HHI_VID2_PLL_CNTL2, 0x430a800);       // internal LDO share with HPLL & VIID PLL
-#endif
     switch(clk){
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)||(MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8M2)
         case 2970:
             aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x59c84e00);
             aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xce49c822);
@@ -57,8 +56,6 @@ static void set_hpll_clk_out(unsigned clk)
             h_delay();
             aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00016385);   // optimise HPLL VCO 2.97GHz performance
             break;
-#endif
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
         case 2160:
             aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x59c80000);
             aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x0a563823);
@@ -70,9 +67,66 @@ static void set_hpll_clk_out(unsigned clk)
                 ;
             }
             break;
+        case 1488:
+            aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c8ce00);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x4023d100);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x8a7ad023);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x12286);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000043d);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000043d);
+            while(!(aml_read_reg32(P_HHI_VID_PLL_CNTL) & (1 << 31))) {
+                ;
+            }
+            break;
+        case 1080:
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000042d);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000042d);
+            break;
+        case 1066:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x42a);
+            break;
+        case 1058:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x422);
+            break;
+        case 1086:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x43e);
+            break;
+        case 1296:
+            aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x59c88000);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xca49b022);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x0023b100);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00012385);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x600c0436);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x400c0436);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00016385);
+            break;
+        default:
+            printk("error hpll clk: %d\n", clk);
+            break;
+    }
+    if(clk < 2970)
+        aml_write_reg32(P_HHI_VID_PLL_CNTL5, (aml_read_reg32(P_HHI_VID_PLL_CNTL5) & (~(0xf << 12))) | (0x6 << 12));
 #endif
+
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
+    aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c88000);
+    aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xca563823);
+    aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x40238100);
+    aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00012286);
+    aml_write_reg32(P_HHI_VID2_PLL_CNTL2, 0x430a800);       // internal LDO share with HPLL & VIID PLL
+    switch(clk){
+        case 2160:
+            aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x59c80000);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x0a563823);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x0123b100);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x12385);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6001042d);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4001042d);
+            while(!(aml_read_reg32(P_HHI_VID_PLL_CNTL) & (1 << 31))) {
+                ;
+            }
+            break;
         case 1488:
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
             aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c8ce00);
             aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x4023d100);
             aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x8a7ad023);
@@ -82,9 +136,60 @@ static void set_hpll_clk_out(unsigned clk)
             while(!(aml_read_reg32(P_HHI_VID_PLL_CNTL) & (1 << 31))) {
                 ;
             }
+            break;
+        case 1080:
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000042d);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000042d);
+            break;
+        case 1066:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x42a);
+            break;
+        case 1058:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x422);
+            break;
+        case 1086:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x43e);
+            break;
+        case 1296:
+            aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x59c88000);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xca49b022);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x0023b100);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00012385);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x600c0436);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x400c0436);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00016385);
+            break;
+        default:
+            printk("error hpll clk: %d\n", clk);
+            break;
+    }
+    if(clk < 2970)
+        aml_write_reg32(P_HHI_VID_PLL_CNTL5, (aml_read_reg32(P_HHI_VID_PLL_CNTL5) & (~(0xf << 12))) | (0x6 << 12));
 #endif
+
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
+    aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c88000);
+    aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xca563823);
+    aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x40238100);
+    aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00012286);
+    aml_write_reg32(P_HHI_VID2_PLL_CNTL2, 0x430a800);       // internal LDO share with HPLL & VIID PLL
+    switch(clk){
+        case 2970:
+            aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x59c84e00);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xce49c822);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x4123b100);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00012385);
 
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000043d);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000043d);
+            printk("waiting HPLL lock\n");
+            while(!(aml_read_reg32(P_HHI_VID_PLL_CNTL) & (1 << 31))) {
+                ;
+            }
+            h_delay();
+            aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00016385);   // optimise HPLL VCO 2.97GHz performance
+            break;
+        case 1488:
             aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000043d);
             aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000043d);
             printk("waiting HPLL lock[%d]\n", __LINE__);
@@ -92,26 +197,15 @@ static void set_hpll_clk_out(unsigned clk)
                 ;
             }
             aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c8ce00);
-#endif
-#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
-            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x43e);
-#endif
             break;
         case 1080:
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000042d);
-    aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000042d);
-#endif
-#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
-            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x42d);
-#endif
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000042d);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000042d);
             break;
-#ifdef CONFIG_ARCH_MESON8
         case 2160:
-    aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000045a);
-    aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000045a);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000045a);
+            aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000045a);
             break;
-#endif
         case 1066:
             WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x42a);
             break;
@@ -122,7 +216,6 @@ static void set_hpll_clk_out(unsigned clk)
             WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x43e);
             break;
         case 1296:
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
             aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x59c88000);
             aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0xca49b022);
             aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x0023b100);
@@ -130,13 +223,38 @@ static void set_hpll_clk_out(unsigned clk)
             aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x600c0436);
             aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x400c0436);
             aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00016385);
+            break;
+        default:
+            printk("error hpll clk: %d\n", clk);
+            break;
+    }
+    if(clk < 2970)
+        aml_write_reg32(P_HHI_VID_PLL_CNTL5, (aml_read_reg32(P_HHI_VID_PLL_CNTL5) & (~(0xf << 12))) | (0x6 << 12));
 #endif
+
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
+    switch(clk){
+        case 1488:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x43e);
+            break;
+        case 1080:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x42d);
+            break;
+        case 1066:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x42a);
+            break;
+        case 1058:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x422);
+            break;
+        case 1086:
+            WRITE_CBUS_REG(HHI_VID_PLL_CNTL, 0x43e);
+            break;
+        case 1296:
             break;
         default:
+            printk("error hpll clk: %d\n", clk);
             break;
     }
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-    aml_write_reg32(P_HHI_VID_PLL_CNTL5, (aml_read_reg32(P_HHI_VID_PLL_CNTL5) & (~(0xf << 12))) | (0x6 << 12));
 #endif
     printk("config HPLL done\n");
 }
@@ -326,26 +444,35 @@ static void set_vdac1_div(unsigned div)
 // mode hpll_clk_out hpll_hdmi_od viu_path viu_type vid_pll_div clk_final_div
 // hdmi_tx_pixel_div unsigned encp_div unsigned enci_div unsigned enct_div unsigned ecnl_div;
 static enc_clk_val_t setting_enc_clk_val[] = {
-#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
-    {VMODE_480I,       1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
-    {VMODE_480CVBS,    1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
-    {VMODE_480P,       1080, 4, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
-    {VMODE_576I,       1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
-    {VMODE_576CVBS,    1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
-    {VMODE_576P,       1080, 4, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
-    {VMODE_720P,       1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
-    {VMODE_1080I,      1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
-    {VMODE_1080P,      1488, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
-    {VMODE_1080P,      1488, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
-    {VMODE_720P_50HZ,  1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
-    {VMODE_1080I_50HZ, 1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
-    {VMODE_1080P_50HZ, 1488, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
-    {VMODE_1080P_24HZ, 1488, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
-    {VMODE_VGA,  1066, 3, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
-    {VMODE_SVGA, 1058, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
-    {VMODE_XGA, 1085, 1, 1, VIU_ENCP, 5, 1, 1, 1, -1, -1, -1,  1,  1},
+
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8M2
+    {VMODE_480I,       2160, 8, 1, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_480I_RPT,   2160, 4, 1, 1, VIU_ENCI,  5, 4, 2,-1,  4, -1, -1,  2,  -1},
+    {VMODE_480CVBS,    1296, 4, 1, 1, VIU_ENCI,  6, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_480P,       2160, 8, 1, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_480P_RPT,   2160, 2, 1, 1, VIU_ENCP,  5, 4, 1, 2, -1, -1, -1,  1,  -1},
+    {VMODE_576I,       2160, 8, 1, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_576I_RPT,   2160, 4, 1, 1, VIU_ENCI,  5, 4, 2,-1,  4, -1, -1,  2,  -1},
+    {VMODE_576CVBS,    1296, 4, 1, 1, VIU_ENCI,  6, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_576P,       2160, 8, 1, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_576P_RPT,   2160, 2, 1, 1, VIU_ENCP,  5, 4, 1, 2, -1, -1, -1,  1,  -1},
+    {VMODE_720P,       1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080I,      1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P,      1488, 1, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P,      1488, 1, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_720P_50HZ,  1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080I_50HZ, 1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P_50HZ, 1488, 1, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P_24HZ, 1488, 2, 1, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_4K2K_30HZ,  2970, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_4K2K_25HZ,  2970, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_4K2K_24HZ,  2970, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_4K2K_SMPTE, 2970, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_VGA,  1066, 3, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
+    {VMODE_SVGA, 1058, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
+    {VMODE_XGA, 1085, 1, 1, 1, VIU_ENCP, 5, 1, 1, 1, -1, -1, -1,  1,  1},
 #endif
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
     {VMODE_480I,       2160, 8, 1, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
     {VMODE_480CVBS,    1296, 4, 1, 1, VIU_ENCI,  6, 4, 2,-1,  2, -1, -1,  2,  -1},
@@ -353,8 +480,20 @@ static enc_clk_val_t setting_enc_clk_val[] = {
     {VMODE_576I,       2160, 8, 1, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
     {VMODE_576CVBS,    1296, 4, 1, 1, VIU_ENCI,  6, 4, 2,-1,  2, -1, -1,  2,  -1},
     {VMODE_576P,       2160, 8, 1, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_720P,       1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080I,      1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P,      1488, 1, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P,      1488, 1, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_720P_50HZ,  1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080I_50HZ, 1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P_50HZ, 1488, 1, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P_24HZ, 1488, 2, 1, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_VGA,  1066, 3, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
+    {VMODE_SVGA, 1058, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
+    {VMODE_XGA, 1085, 1, 1, 1, VIU_ENCP, 5, 1, 1, 1, -1, -1, -1,  1,  1},
 #endif
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)||(MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8M2)
+
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
     {VMODE_480I,       1080, 4, 1, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
     {VMODE_480I_RPT,   2160, 4, 1, 1, VIU_ENCI,  5, 4, 2,-1,  4, -1, -1,  2,  -1},
     {VMODE_480CVBS,    1296, 4, 1, 1, VIU_ENCI,  6, 4, 2,-1,  2, -1, -1,  2,  -1},
@@ -365,7 +504,6 @@ static enc_clk_val_t setting_enc_clk_val[] = {
     {VMODE_576CVBS,    1296, 4, 1, 1, VIU_ENCI,  6, 4, 2,-1,  2, -1, -1,  2,  -1},
     {VMODE_576P,       1080, 4, 1, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
     {VMODE_576P_RPT,   2160, 2, 1, 1, VIU_ENCP,  5, 4, 1, 2, -1, -1, -1,  1,  -1},
-#endif
     {VMODE_720P,       1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
     {VMODE_1080I,      1488, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
     {VMODE_1080P,      1488, 1, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
@@ -382,6 +520,26 @@ static enc_clk_val_t setting_enc_clk_val[] = {
     {VMODE_SVGA, 1058, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
     {VMODE_XGA, 1085, 1, 1, 1, VIU_ENCP, 5, 1, 1, 1, -1, -1, -1,  1,  1},
 #endif
+
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
+    {VMODE_480I,       1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_480CVBS,    1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_480P,       1080, 4, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_576I,       1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_576CVBS,    1080, 4, 1, VIU_ENCI,  5, 4, 2,-1,  2, -1, -1,  2,  -1},
+    {VMODE_576P,       1080, 4, 1, VIU_ENCP,  5, 4, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_720P,       1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080I,      1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P,      1488, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P,      1488, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_720P_50HZ,  1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080I_50HZ, 1488, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P_50HZ, 1488, 1, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_1080P_24HZ, 1488, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
+    {VMODE_VGA,  1066, 3, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
+    {VMODE_SVGA, 1058, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
+    {VMODE_XGA, 1085, 1, 1, VIU_ENCP, 5, 1, 1, 1, -1, -1, -1,  1,  1},
+#endif
 };
 
 void set_vmode_clk(vmode_t mode)
-- 
2.19.0

