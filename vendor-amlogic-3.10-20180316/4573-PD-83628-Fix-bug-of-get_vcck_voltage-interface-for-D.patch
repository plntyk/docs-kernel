From 263cff69706c295053005ff0f94ac84af9d3776d Mon Sep 17 00:00:00 2001
From: "tao.zeng" <tao.zeng@amlogic.com>
Date: Fri, 25 Jul 2014 14:22:39 +0800
Subject: [PATCH 4573/5965] PD #83628: Fix bug of get_vcck_voltage interface
 for DVFS debug

Change-Id: Ib552e969495610e2bdd2e00acdbd3b67ac2410b3
---
 drivers/amlogic/power/aml_dvfs/aml_dvfs.c    | 7 +++++--
 drivers/amlogic/power/aml_pmu/aml1218-rw.c   | 4 +++-
 drivers/amlogic/power/aml_pmu/aml1218-sply.c | 2 +-
 drivers/amlogic/power/aml_pmu/aml_pmu.c      | 2 +-
 4 files changed, 10 insertions(+), 5 deletions(-)

diff --git a/drivers/amlogic/power/aml_dvfs/aml_dvfs.c b/drivers/amlogic/power/aml_dvfs/aml_dvfs.c
index 6515b42fc9e4..7623f340784c 100755
--- a/drivers/amlogic/power/aml_dvfs/aml_dvfs.c
+++ b/drivers/amlogic/power/aml_dvfs/aml_dvfs.c
@@ -222,10 +222,13 @@ static ssize_t dvfs_help(struct class *class, struct class_attribute *attr,   ch
 static int get_dvfs_id_by_name(char *str)
 {
     if (!strncmp(str, "vcck", 4)) {
+        str[4] = '\0';
         return AML_DVFS_ID_VCCK;    
     } else if (!strncmp(str, "vddee", 5)) {
+        str[5] = '\0';
         return AML_DVFS_ID_VDDEE;    
     } else if (!strncmp(str, "ddr", 3)) {
+        str[3] = '\0';
         return AML_DVFS_ID_DDR;    
     }
     return -1;
@@ -297,9 +300,9 @@ static ssize_t dvfs_class_write(struct class *class, struct class_attribute *att
             }
         }
         if (ret < 0) {
-            printk("set vcck to %d uV failed\n", uV);    
+            printk("set %s to %d uV failed\n", arg[1], uV);    
         } else {
-            printk("set vcck to %d uV success\n", uV);    
+            printk("set %s to %d uV success\n", arg[1], uV);    
         }
         break;
     }
diff --git a/drivers/amlogic/power/aml_pmu/aml1218-rw.c b/drivers/amlogic/power/aml_pmu/aml1218-rw.c
index 0670efadd1f9..aa875b442893 100755
--- a/drivers/amlogic/power/aml_pmu/aml1218-rw.c
+++ b/drivers/amlogic/power/aml_pmu/aml1218-rw.c
@@ -366,11 +366,13 @@ int aml1218_get_dcdc_voltage(int dcdc, uint32_t *uV)
     //int start;
 	
     if (dcdc == 4) {
+        addr = 0x5d;
         ret = aml1218_read(addr, &val);
         if (ret) {
             return ret;    
         }
-        return VDDEE_voltage_table[(val >> 2) & 0x1f] * 1000;
+        *uV = VDDEE_voltage_table[(val >> 2) & 0x1f] * 1000;
+        return 0;
     }
     if (dcdc > 3 || dcdc < 0) {
         return -EINVAL;    
diff --git a/drivers/amlogic/power/aml_pmu/aml1218-sply.c b/drivers/amlogic/power/aml_pmu/aml1218-sply.c
index 99bb7a402b4a..9df5be833c3d 100755
--- a/drivers/amlogic/power/aml_pmu/aml1218-sply.c
+++ b/drivers/amlogic/power/aml_pmu/aml1218-sply.c
@@ -1355,7 +1355,7 @@ static int aml1218_update_state(struct aml_charger *charger)
     vsys = aml1218_get_vsys_voltage();
     if (aml1218_get_pmu_version() == 0) {
         if ((vsys > charger->vbat) && (vsys - charger->vbat < 500) || charger->vbat > 3950) {
-            printk("%s, vsys is not large or vbat too large, vsys:%d, vbat:%d\n", __func__, vsys, charger->vbat);
+            //printk("%s, vsys is not large or vbat too large, vsys:%d, vbat:%d\n", __func__, vsys, charger->vbat);
             aml1218_set_charge_enable(0);
         } else {
             aml1218_set_charge_enable(1);
diff --git a/drivers/amlogic/power/aml_pmu/aml_pmu.c b/drivers/amlogic/power/aml_pmu/aml_pmu.c
index 63801c151cd5..2f7577cc6b0e 100755
--- a/drivers/amlogic/power/aml_pmu/aml_pmu.c
+++ b/drivers/amlogic/power/aml_pmu/aml_pmu.c
@@ -262,7 +262,7 @@ static int aml1218_get_voltage(uint32_t id, uint32_t *uV)
 {
     int dcdc = aml_1218_convert_id_to_dcdc(id);
 
-    if (dcdc >= 1 && dcdc <= 3) {
+    if (dcdc >= 1 && dcdc <= 4) {
         return aml1218_get_dcdc_voltage(dcdc, uV);    
     }
 
-- 
2.19.0

