From 34a6a927750251f807472acb6506eccf73c6035a Mon Sep 17 00:00:00 2001
From: "brian.zhu" <brian.zhu@amlogic.com>
Date: Tue, 29 Jul 2014 13:54:58 +0800
Subject: [PATCH 4596/5965] PD#89978 update mix dump encode for m8,m8b,m8m2.
 use vdin time stamp for miracast

---
 arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd   |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd  |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd  |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd  |    2 +-
 .../arm/boot/dts/amlogic/meson8_k101_512M.dtd |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd  |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd  |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd  |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k200a_1G.dtd |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k200a_2G.dtd |    2 +-
 .../boot/dts/amlogic/meson8_k200a_2G_4k2k.dtd |    2 +-
 .../dts/amlogic/meson8_k200a_2G_hdmiin.dtd    |    2 +-
 .../dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd |    2 +-
 .../dts/amlogic/meson8_k200b_1G_emmc_sdio.dtd |    2 +-
 arch/arm/boot/dts/amlogic/meson8_k200b_2G.dtd |    2 +-
 .../boot/dts/amlogic/meson8_k200b_2G_4k2k.dtd |    2 +-
 .../dts/amlogic/meson8_k200b_2G_hdmiin.dtd    |    2 +-
 arch/arm/boot/dts/amlogic/meson8_pxp.dtd      |    2 +-
 arch/arm/boot/dts/amlogic/meson8_skt.dtd      |    2 +-
 arch/arm/boot/dts/amlogic/meson8b_m100_1G.dtd |    2 +-
 .../boot/dts/amlogic/meson8b_m101_512M.dtd    |    2 +-
 arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd |    2 +-
 arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd |    2 +-
 arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd |    2 +-
 .../boot/dts/amlogic/meson8b_m201_512M.dtd    |    2 +-
 .../boot/dts/amlogic/meson8b_m202_512M.dtd    |    2 +-
 arch/arm/boot/dts/amlogic/meson8b_pxp.dtd     |    2 +-
 arch/arm/boot/dts/amlogic/meson8b_skt.dtd     |    2 +-
 .../arm/boot/dts/amlogic/meson8m2_n100_1G.dtd |    2 +-
 .../boot/dts/amlogic/meson8m2_n101_512M.dtd   |    2 +-
 .../arm/boot/dts/amlogic/meson8m2_n200_2G.dtd |    2 +-
 arch/arm/boot/dts/amlogic/meson8m2_pxp.dtd    |    2 +-
 arch/arm/boot/dts/amlogic/meson8m2_skt.dtd    |    2 +-
 drivers/amlogic/amports/encoder.c             | 1147 ++++++++++++++---
 drivers/amlogic/amports/encoder.h             |  307 ++++-
 drivers/amlogic/amports/encoder_mc.h          |   13 +-
 drivers/amlogic/amports/jpegenc.c             |   26 +-
 .../amports/m6tv/ucode/encoder/encoder_mc.c   |    2 +-
 .../amports/m6tvd/ucode/encoder/encoder_mc.c  |    2 +-
 .../amports/m8/ucode/encoder/encoder_mc.c     |   23 +-
 .../m8/ucode/encoder/full_encoder_linux.h     |  178 ---
 .../m8/ucode/encoder/h264_enc_mix_dump.h      |  302 +++++
 .../m8/ucode/encoder/h264_enc_mix_dump_dblk.h |  300 +++++
 .../m8/ucode/encoder/h264_enc_mix_sw.h        |  384 ++++++
 .../ucode/encoder/h264_enc_mix_sw_hdec_dblk.h |  382 ++++++
 .../encoder/h264_enc_mix_sw_vdec2_dblk.h      |  387 ++++++
 .../m8/ucode/encoder/half_encoder_linux.h     |  143 +-
 .../amports/m8/ucode/encoder/vdec2_encoder.h  |  397 ++++++
 drivers/amlogic/amports/m8m2/ucode/encoder    |    1 -
 .../amports/m8m2/ucode/encoder/Makefile       |    2 +
 .../amports/m8m2/ucode/encoder/encoder_mc.c   |   43 +
 .../m8m2/ucode/encoder/h264_enc_mix_dump.h    |  302 +++++
 .../ucode/encoder/h264_enc_mix_dump_dblk.h    |  300 +++++
 .../m8m2/ucode/encoder/h264_enc_mix_sw.h      |  384 ++++++
 .../ucode/encoder/h264_enc_mix_sw_hdec_dblk.h |  382 ++++++
 .../m8m2/ucode/encoder/half_encoder_linux.h   |  141 ++
 drivers/amlogic/amports/vh264_4k2k.c          |   14 +-
 drivers/amlogic/amports/vreal.c               |   30 +-
 drivers/amlogic/video_dev/amlvideo2.c         |  933 ++++++++------
 59 files changed, 5677 insertions(+), 914 deletions(-)
 delete mode 100755 drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump.h
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump_dblk.h
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw.h
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_vdec2_dblk.h
 create mode 100755 drivers/amlogic/amports/m8/ucode/encoder/vdec2_encoder.h
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/encoder
 create mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/Makefile
 create mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
 create mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h
 create mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h
 create mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h
 create mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h
 create mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h

diff --git a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
index a5256a02a23d..378618586a96 100755
--- a/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6tvd_ref.dtd
@@ -199,7 +199,7 @@
 		compatible = "amlogic,amvenc_avc";
 		dev_name = "amvenc_avc.0";
 		status = "okay";
-		reserve-memory = <0x00f00000>;
+		reserve-memory = <0x01200000>;
 		reserve-iomap = "true";
 	};
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
index d72e6e9367e3..f177302e228b 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
@@ -91,7 +91,7 @@ void root_func(){
         };
         cma_1:region@1 {
            region_name = "cma_1";
-           reg = <0 0x00F00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
index 52adeb847c03..83fdc5a859e6 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
@@ -91,7 +91,7 @@ void root_func(){
         };
         cma_1:region@1 {
            region_name = "cma_1";
-           reg = <0 0x00F00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
index 5c760db565a3..7739b0272b68 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
@@ -90,7 +90,7 @@ void root_func(){
         };
         cma_1:region@1 {
            region_name = "cma_1";
-           reg = <0 0x00F00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
index 19bd47b9838a..ba6887cc65fa 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
@@ -91,7 +91,7 @@ void root_func(){
         };
         cma_1:region@1 {
            region_name = "cma_1";
-           reg = <0 0x00F00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
index e4e96f2cee43..94f128b050c2 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
index a455a1ece95b..6162999b5086 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
@@ -85,7 +85,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
index 7b317e48139e..c968e332534b 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
@@ -85,7 +85,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200a_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k200a_1G.dtd
index 58746b3bc3bb..16fbc470afa1 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200a_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200a_1G.dtd
@@ -94,7 +94,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200a_2G.dtd b/arch/arm/boot/dts/amlogic/meson8_k200a_2G.dtd
index 603f69c3127e..486e24bd98b7 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200a_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200a_2G.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200a_2G_4k2k.dtd b/arch/arm/boot/dts/amlogic/meson8_k200a_2G_4k2k.dtd
index 11a92cf0dde4..939806563fa9 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200a_2G_4k2k.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200a_2G_4k2k.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200a_2G_hdmiin.dtd b/arch/arm/boot/dts/amlogic/meson8_k200a_2G_hdmiin.dtd
index 34d43d357fc3..986dd1d16525 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200a_2G_hdmiin.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200a_2G_hdmiin.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd b/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd
index 5733b9fda415..14b764f4fa97 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd
@@ -95,7 +95,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdio.dtd b/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdio.dtd
index 315cc261b4f3..d0eea68adf4a 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdio.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdio.dtd
@@ -95,7 +95,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200b_2G.dtd b/arch/arm/boot/dts/amlogic/meson8_k200b_2G.dtd
index 3682d53f74ef..e4dde379bd65 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200b_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200b_2G.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200b_2G_4k2k.dtd b/arch/arm/boot/dts/amlogic/meson8_k200b_2G_4k2k.dtd
index 0270928670e1..27595f6ba986 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200b_2G_4k2k.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200b_2G_4k2k.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_k200b_2G_hdmiin.dtd b/arch/arm/boot/dts/amlogic/meson8_k200b_2G_hdmiin.dtd
index 1f2c0bdc53ea..c33287ec6785 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200b_2G_hdmiin.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200b_2G_hdmiin.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_pxp.dtd b/arch/arm/boot/dts/amlogic/meson8_pxp.dtd
index 3b09cef2d9d1..db2896fb2505 100755
--- a/arch/arm/boot/dts/amlogic/meson8_pxp.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_pxp.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
     cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
     };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8_skt.dtd b/arch/arm/boot/dts/amlogic/meson8_skt.dtd
index 989446259e73..3d42ac4430c1 100755
--- a/arch/arm/boot/dts/amlogic/meson8_skt.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_skt.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m100_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m100_1G.dtd
index c7cac64835ff..3cd1347e9c8d 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m100_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m100_1G.dtd
@@ -85,7 +85,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
index 4850932adb4f..bab9121eba4a 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
@@ -91,7 +91,7 @@ void root_func(){
         };
         cma_1:region@1 {
            region_name = "cma_1";
-           reg = <0 0x00F00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
index c16df343b4f4..4e385fcc795b 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
@@ -91,7 +91,7 @@ void root_func(){
         };
         cma_1:region@1 {
            region_name = "cma_1";
-           reg = <0 0x00F00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
index ef3d32a220fe..b055527073fa 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
@@ -85,7 +85,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
index 74d0490237f8..ac22d92738f2 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
@@ -85,7 +85,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m201_512M.dtd b/arch/arm/boot/dts/amlogic/meson8b_m201_512M.dtd
index 15c26f212cf5..796193be61bd 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m201_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m201_512M.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m202_512M.dtd b/arch/arm/boot/dts/amlogic/meson8b_m202_512M.dtd
index a1200ace94cd..fe0ce5a758de 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m202_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m202_512M.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_pxp.dtd b/arch/arm/boot/dts/amlogic/meson8b_pxp.dtd
index d3ef9724157b..80073a98f48f 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_pxp.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_pxp.dtd
@@ -85,7 +85,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_skt.dtd b/arch/arm/boot/dts/amlogic/meson8b_skt.dtd
index b31fc67343e6..c2d122ce5b3c 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_skt.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_skt.dtd
@@ -85,7 +85,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8m2_n100_1G.dtd b/arch/arm/boot/dts/amlogic/meson8m2_n100_1G.dtd
index 7d5f5d9513d1..c8521e556a75 100755
--- a/arch/arm/boot/dts/amlogic/meson8m2_n100_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8m2_n100_1G.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 
diff --git a/arch/arm/boot/dts/amlogic/meson8m2_n101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8m2_n101_512M.dtd
index 43baa394c942..711a6fa395c9 100755
--- a/arch/arm/boot/dts/amlogic/meson8m2_n101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8m2_n101_512M.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd b/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
index a1908ef6ea3c..55edae6eada0 100755
--- a/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x00f00000>;
+           reg = <0 0x01200000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8m2_pxp.dtd b/arch/arm/boot/dts/amlogic/meson8m2_pxp.dtd
index c0e8b87666ac..f9c331219d32 100755
--- a/arch/arm/boot/dts/amlogic/meson8m2_pxp.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8m2_pxp.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8m2_skt.dtd b/arch/arm/boot/dts/amlogic/meson8m2_skt.dtd
index 3a4687b2b0f6..3c24bd8c201e 100755
--- a/arch/arm/boot/dts/amlogic/meson8m2_skt.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8m2_skt.dtd
@@ -86,7 +86,7 @@ void root_func(){
 
         cma_0:region@0 {
            region_name = "cma_0";
-           reg = <0 0x02700000>;
+           reg = <0 0x02a00000>;
            linux,contiguous-region;
         };
 	};
diff --git a/drivers/amlogic/amports/encoder.c b/drivers/amlogic/amports/encoder.c
index 389865ac7673..9386515989aa 100755
--- a/drivers/amlogic/amports/encoder.c
+++ b/drivers/amlogic/amports/encoder.c
@@ -38,7 +38,15 @@
 #include <linux/dma-contiguous.h>
 #include "amports_config.h"
 
+#define MULTI_SLICE_MC
+#if HAS_VDEC2
+#define USE_VDEC2
+#endif
 #define ENC_CANVAS_OFFSET  AMVENC_CANVAS_INDEX
+//#define DUMP_PRE_ENCODE_INTRA
+
+#define UCODE_MODE_FULL 0
+#define UCODE_MODE_SW_MIX 1
 
 #define LOG_LEVEL_VAR 1
 #define debug_level(level, x...) \
@@ -76,6 +84,11 @@ static struct device *amvenc_avc_dev;
 	#define DEBUG_REG  				  HENC_SCRATCH_2    : debug register
 	#define MB_COUNT				  HENC_SCRATCH_3	: MB encoding number
 */
+#ifdef USE_VDEC2
+#define STREAM_WR_PTR               DOS_SCRATCH20
+#define DECODABLE_MB_Y              DOS_SCRATCH21
+#define DECODED_MB_Y                DOS_SCRATCH22
+#endif
 
 /*output buffer define*/
 static unsigned BitstreamStart;
@@ -96,6 +109,16 @@ static unsigned ref_buf_canvas;  //((192<<16)|(192<<8)|(192<<0))
 /*microcode assitant buffer*/
 static unsigned assit_buffer_offset;
 //static struct dec_sysinfo avc_amstream_dec_info;
+   
+u32 inter_bits_info_ddr_start_addr = 0; 
+u32 inter_mv_info_ddr_start_addr = 0;
+u32 intra_bits_info_ddr_start_addr = 0; 
+u32 intra_pred_info_ddr_start_addr = 0;
+u32 sw_ctl_info_start_addr = 0;
+#ifdef USE_VDEC2
+#define VDEC2_DEF_BUF_START_ADDR            0x01000000
+u32 vdec2_start_addr = 0;
+#endif
 
 static u32 stat;
 //static u32 cur_stage;
@@ -103,8 +126,8 @@ static u32 frame_start;//0: processing 1:restart
 static u32 quant = 28;
 static u32 encoder_width = 1280;
 static u32 encoder_height = 720;
-static void avc_prot_init(void);
-static s32 avc_poweron(void);
+static void avc_prot_init(bool IDR);
+static s32 avc_poweron(int clock);
 static void dma_flush(unsigned buf_start , unsigned buf_size );
 //static void avc_local_init(void);
 static int idr_pic_id = 0;  //need reset as 0 for IDR
@@ -114,22 +137,26 @@ static u32 pic_order_cnt_lsb = 0 ; //need reset as 0 for IDR and plus 2 for NON-
 static u32 log2_max_pic_order_cnt_lsb = 4 ;
 static u32 log2_max_frame_num =4 ;
 static u32 anc0_buffer_id =0;
-static u32 qppicture  =26;
+static u32 qppicture  =28;
 static u32 process_irq = 0;
 static u32 ie_me_mb_type  = 0;
 static u32 ie_me_mode  = 0;
-static u32 me_start_position = 0;
 static u32 ie_pippeline_block = 3;
 static u32 ie_cur_ref_sel = 0;
-static u32 half_ucode_mode = 0;
 static int encode_inited = 0;
 static int encode_opened = 0;
 static int encoder_status = 0;
 static int avc_endian = 6;
+static int clock_level = 1;
 
 static wait_queue_head_t avc_wait;
 atomic_t avc_ready = ATOMIC_INIT(0);
 static struct tasklet_struct encode_tasklet;
+#ifdef MULTI_SLICE_MC  
+static int rows_per_slice = 1;
+#endif
+
+static bool dblk_fix_flag = false;
 
 static DEFINE_SPINLOCK(lock);
 
@@ -139,6 +166,13 @@ static const char avc_dec_id[] = "avc-dev";
 #define AMVENC_BUFFER_LEVEL_720P   1
 #define AMVENC_BUFFER_LEVEL_1080P 2
 
+static int ucode_index = UCODE_MODE_FULL;
+static int enable_dblk = 1;  // 0 disable, 1 vdec 2 hdec
+#ifdef DUMP_PRE_ENCODE_INTRA
+static bool preencode_intra;
+static unsigned intra_pic_id = 0;
+#endif
+
 typedef struct
 {
     u32 buf_start;
@@ -158,33 +192,33 @@ typedef struct
     Buff_t dec1_uv;
     Buff_t assit;
     Buff_t bitstream;
+    Buff_t inter_bits_info;
+    Buff_t inter_mv_info;
+    Buff_t intra_bits_info;
+    Buff_t intra_pred_info;
+    Buff_t qp_info;
+#ifdef USE_VDEC2
+    Buff_t vdec2_info;
+#endif
 } BuffInfo_t;
 
-const BuffInfo_t amvenc_buffspec[]={
+static BuffInfo_t amvenc_buffspec[]={
     {
         .lev_id      = AMVENC_BUFFER_LEVEL_480P,
         .max_width = 640,
         .max_height = 480,
-        .min_buffsize = 0x400000,
+        .min_buffsize = 0x580000,
         .dct = {
             .buf_start = 0,
             .buf_size = 0xfe000,
         },
         .dec0_y = {
             .buf_start = 0x100000,
-            .buf_size = 0x50000,
-        },
-        .dec0_uv = {
-            .buf_start = 0x150000,
-            .buf_size = 0x30000,
+            .buf_size = 0x80000,
         },
         .dec1_y = {
             .buf_start = 0x180000,
-            .buf_size = 0x50000,
-        },
-        .dec1_uv = {
-            .buf_start = 0x1d0000,
-            .buf_size = 0x30000,
+            .buf_size = 0x80000,
         },
         .assit = {
             .buf_start = 0x240000,
@@ -193,31 +227,50 @@ const BuffInfo_t amvenc_buffspec[]={
         .bitstream = {
             .buf_start = 0x300000,
             .buf_size = 0x100000,
+        },
+        .inter_bits_info = {
+            .buf_start = 0x400000,
+            .buf_size = 0x2000,
+        },
+        .inter_mv_info = {
+            .buf_start = 0x402000,
+            .buf_size = 0x13000,
+        },
+        .intra_bits_info = {
+            .buf_start = 0x420000,
+            .buf_size = 0x2000,
+        },
+        .intra_pred_info = {
+            .buf_start = 0x422000,
+            .buf_size = 0x13000,
+        },
+        .qp_info = {
+            .buf_start = 0x438000,
+            .buf_size = 0x8000,
+        }
+#ifdef USE_VDEC2
+        ,
+        .vdec2_info = {
+            .buf_start = 0x440000,
+            .buf_size = 0x13e000,
         }
+#endif
     },{
         .lev_id      = AMVENC_BUFFER_LEVEL_720P,
         .max_width = 1280,
         .max_height = 720,
-        .min_buffsize = 0x800000,
+        .min_buffsize = 0x9e0000,
         .dct = {
             .buf_start = 0,
             .buf_size = 0x2f8000,
         },
         .dec0_y = {
             .buf_start = 0x300000,
-            .buf_size = 0xf0000,
-        },
-        .dec0_uv = {
-            .buf_start = 0x400000,
-            .buf_size = 0x80000,
+            .buf_size = 0x180000,
         },
         .dec1_y = {
             .buf_start = 0x480000,
-            .buf_size = 0xf0000,
-        },
-        .dec1_uv = {
-            .buf_start = 0x580000,
-            .buf_size = 0x80000,
+            .buf_size = 0x180000,
         },
         .assit = {
             .buf_start = 0x640000,
@@ -226,31 +279,50 @@ const BuffInfo_t amvenc_buffspec[]={
         .bitstream = {
             .buf_start = 0x700000,
             .buf_size = 0x100000,
+        },
+        .inter_bits_info = {
+            .buf_start = 0x800000,
+            .buf_size = 0x4000,
+        },
+        .inter_mv_info = {
+            .buf_start = 0x804000,
+            .buf_size = 0x40000,
+        },
+        .intra_bits_info = {
+            .buf_start = 0x848000,
+            .buf_size = 0x4000,
+        },
+        .intra_pred_info = {
+            .buf_start = 0x84c000,
+            .buf_size = 0x40000,
+        },
+        .qp_info = {
+            .buf_start = 0x890000,
+            .buf_size = 0x8000,
+        }
+#ifdef USE_VDEC2
+        ,
+        .vdec2_info = {
+            .buf_start = 0x8a0000,
+            .buf_size = 0x13e000,
         }
+#endif
     },{
         .lev_id      = AMVENC_BUFFER_LEVEL_1080P,
         .max_width = 1920,
         .max_height = 1088,
-        .min_buffsize = 0xf00000,
+        .min_buffsize = 0x1160000,
         .dct = {
             .buf_start = 0,
             .buf_size = 0x6ba000,
         },
         .dec0_y = {
             .buf_start = 0x6d0000,
-            .buf_size = 0x1fe000,
-        },
-        .dec0_uv = {
-            .buf_start = 0x8d0000,
-            .buf_size = 0xff000,
+            .buf_size = 0x300000,
         },
         .dec1_y = {
             .buf_start = 0x9d0000,
-            .buf_size = 0x1fe000,
-        },
-        .dec1_uv = {
-            .buf_start = 0xbd0000,
-            .buf_size = 0xff000,
+            .buf_size = 0x300000,
         },
         .assit = {
             .buf_start = 0xd10000,
@@ -259,7 +331,34 @@ const BuffInfo_t amvenc_buffspec[]={
         .bitstream = {
             .buf_start = 0xe00000,
             .buf_size = 0x100000,
+        },
+        .inter_bits_info = {
+            .buf_start = 0xf00000,
+            .buf_size = 0x8000,
+        },
+        .inter_mv_info = {
+            .buf_start = 0xf08000,
+            .buf_size = 0x80000,
+        },
+        .intra_bits_info = {
+            .buf_start = 0xf88000,
+            .buf_size = 0x8000,
+        },
+        .intra_pred_info = {
+            .buf_start = 0xf90000,
+            .buf_size = 0x80000,
+        },
+        .qp_info = {
+            .buf_start = 0x1010000,
+            .buf_size = 0x8000,
+        }
+#ifdef USE_VDEC2
+        ,
+        .vdec2_info = {
+            .buf_start = 0x1020000,
+            .buf_size = 0x13e000,
         }
+#endif
     }
 };
 
@@ -329,17 +428,47 @@ static void avc_init_dblk_buffer(int canvas)
 }
 
 /*same as INIT_ENCODER*/
-static void avc_init_encoder(void)
+#define INTRA_IN_P_TOP
+static void avc_init_encoder(bool idr)
 {
 	WRITE_HREG(VLC_TOTAL_BYTES, 0);
 	WRITE_HREG(VLC_CONFIG, 0x07);
 	WRITE_HREG(VLC_INT_CONTROL, 0);
 	WRITE_HREG(HCODEC_ASSIST_AMR1_INT0, 0x15);
-	WRITE_HREG(HCODEC_ASSIST_AMR1_INT1, 0x8);
+#ifdef MULTI_SLICE_MC
+	if(dblk_fix_flag){  
+		WRITE_HREG(HCODEC_ASSIST_AMR1_INT2, 0x19);
+		WRITE_HREG(HCODEC_ASSIST_AMR1_INT1, 0x8);
+	}else{
+		WRITE_HREG(HCODEC_ASSIST_AMR1_INT1, 0x19);
+		WRITE_HREG(HCODEC_ASSIST_AMR1_INT2, 0x8);
+	}
+#else
+	if(dblk_fix_flag)
+		WRITE_HREG(HCODEC_ASSIST_AMR1_INT1, 0x8);
+	else
+		WRITE_HREG(HCODEC_ASSIST_AMR1_INT2, 0x8);
+#endif
 	WRITE_HREG(HCODEC_ASSIST_AMR1_INT3, 0x14);
-	WRITE_HREG(IDR_PIC_ID ,idr_pic_id);
-	WRITE_HREG(FRAME_NUMBER ,frame_number);
-	WRITE_HREG(PIC_ORDER_CNT_LSB,pic_order_cnt_lsb);
+#ifdef INTRA_IN_P_TOP
+	WRITE_HREG(HCODEC_ASSIST_DMA_INT_MSK, 0xfd);
+	WRITE_HREG(HCODEC_ASSIST_DMA_INT_MSK2, 0xff);
+	WRITE_HREG(HCODEC_ASSIST_AMR1_INT4, 0x18);
+        //mtspi   0xfd, HCODEC_ASSIST_DMA_INT_MSK // enable lmem_mpeg_dma_int
+        //mtspi   0xff, HCODEC_ASSIST_DMA_INT_MSK2 // disable  cpu19_int
+        //mtspi   0x18, HCODEC_ASSIST_AMR1_INT4   // lmem_dma_isr
+#else
+	WRITE_HREG(HCODEC_ASSIST_DMA_INT_MSK, 0xff);
+	WRITE_HREG(HCODEC_ASSIST_DMA_INT_MSK2, 0xff);
+#endif
+#ifdef DUMP_PRE_ENCODE_INTRA
+	if(preencode_intra == true)
+		WRITE_HREG(IDR_PIC_ID ,intra_pic_id);
+	else	
+#endif
+		WRITE_HREG(IDR_PIC_ID ,idr_pic_id);
+	WRITE_HREG(FRAME_NUMBER ,(idr== true)?0:frame_number);
+	WRITE_HREG(PIC_ORDER_CNT_LSB,(idr== true)?0:pic_order_cnt_lsb);
 	log2_max_pic_order_cnt_lsb= 4;
 	log2_max_frame_num = 4;
 	WRITE_HREG(LOG2_MAX_PIC_ORDER_CNT_LSB ,  log2_max_pic_order_cnt_lsb);
@@ -366,6 +495,9 @@ static void avc_canvas_init(void)
         start_addr + gAmvencbuff.bufspec->dec0_y.buf_start,
         canvas_width, canvas_height,
         CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_LINEAR);
+
+    gAmvencbuff.bufspec->dec0_uv.buf_start = gAmvencbuff.bufspec->dec0_y.buf_start+canvas_width*canvas_height;
+    gAmvencbuff.bufspec->dec0_uv.buf_size = canvas_width*canvas_height/2;
     canvas_config(1 + ENC_CANVAS_OFFSET,
         start_addr + gAmvencbuff.bufspec->dec0_uv.buf_start,
         canvas_width , canvas_height/2,
@@ -380,6 +512,8 @@ static void avc_canvas_init(void)
         start_addr + gAmvencbuff.bufspec->dec1_y.buf_start,
         canvas_width, canvas_height,
         CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_LINEAR);
+    gAmvencbuff.bufspec->dec1_uv.buf_start = gAmvencbuff.bufspec->dec1_y.buf_start+canvas_width*canvas_height;
+    gAmvencbuff.bufspec->dec1_uv.buf_size = canvas_width*canvas_height/2;
     canvas_config(4 + ENC_CANVAS_OFFSET,
         start_addr + gAmvencbuff.bufspec->dec1_uv.buf_start,
         canvas_width , canvas_height/2,
@@ -395,6 +529,7 @@ static void avc_canvas_init(void)
 	/*output stream buffer config*/
     BitstreamStart  = start_addr + gAmvencbuff.bufspec->bitstream.buf_start;
     BitstreamEnd  =  BitstreamStart + gAmvencbuff.bufspec->bitstream.buf_size -1;
+
     debug_level(0,"BitstreamStart is %x \n",BitstreamStart);
 
     dblk_buf_canvas = ((ENC_CANVAS_OFFSET+2) <<16)|((ENC_CANVAS_OFFSET + 1) <<8)|(ENC_CANVAS_OFFSET);
@@ -402,12 +537,101 @@ static void avc_canvas_init(void)
     debug_level(0,"dblk_buf_canvas is %d ; ref_buf_canvas is %d \n",dblk_buf_canvas , ref_buf_canvas);
 }
 
+static int me_mv_merge_ctl = 
+              ( 0x1 << 31)  |  // [31] me_merge_mv_en_16
+              ( 0x1 << 30)  |  // [30] me_merge_small_mv_en_16
+              ( 0x1 << 29)  |  // [29] me_merge_flex_en_16
+              ( 0x1 << 28)  |  // [28] me_merge_sad_en_16
+              ( 0x1 << 27)  |  // [27] me_merge_mv_en_8
+              ( 0x1 << 26)  |  // [26] me_merge_small_mv_en_8
+              ( 0x1 << 25)  |  // [25] me_merge_flex_en_8
+              ( 0x1 << 24)  |  // [24] me_merge_sad_en_8
+              ( 0x12 << 18)  |  // [23:18] me_merge_mv_diff_16 - MV diff <= n pixel can be merged
+              ( 0x2b << 12)  |  // [17:12] me_merge_mv_diff_8 - MV diff <= n pixel can be merged
+              ( 0x80 << 0);    // [11:0] me_merge_min_sad - SAD >= 0x180 can be merged with other MV
+              //( 0x4 << 18)  |  // [23:18] me_merge_mv_diff_16 - MV diff <= n pixel can be merged
+              //( 0x3f << 12)  |  // [17:12] me_merge_mv_diff_8 - MV diff <= n pixel can be merged
+              //( 0xc0 << 0);    // [11:0] me_merge_min_sad - SAD >= 0x180 can be merged with other MV
+
+static int me_mv_weight_01 = (0x40<<24)|(0x30<<16)|(0x20<<8)|0x30;
+
+static int me_mv_weight_23 = (0x40<<8)|0x30;
+        
+static int me_sad_range_inc = 0x03030303;
+
+
+static int me_step0_close_mv = 0x003ffc21;
+static int me_f_skip_sad = 0;
+static int me_f_skip_weight = 0;
+
+static int me_sad_enough_01 = 0;//0x00018010;
+static int me_sad_enough_23 = 0;//0x00000020;
+
+#define TARGET_BITS_PER_MB 20
+
+#define P_INTRA_QUANT   30
+#define INTRA_MIN_BITS 0xffff
+
+static int p_intra_config = 
+              ( P_INTRA_QUANT << 16) |
+              ( INTRA_MIN_BITS << 0);
+
+
+#define MB_INC_1_BITS                  5
+#define MB_INC_2_BITS                  10
+#define MB_INC_3_BITS                  15
+#define MB_INC_4_BITS                  20
+#define MB_DEC_1_BITS                  20
+#define MB_DEC_2_BITS                  30
+#define MB_DEC_3_BITS                  40
+#define MB_DEC_4_BITS                  60
+#define MB_MIN_QUANT                   24
+#define MB_MAX_QUANT                   24
+
+// [31:16] TARGET_BITS_PER_MB
+// [15:8] MIN_QUANT
+//  [7:0] MAX_QUANT
+static int p_mb_quant_config = 
+              ( TARGET_BITS_PER_MB << 16)  |
+              ( MB_MIN_QUANT << 8)  |
+              ( MB_MAX_QUANT << 0);  
+
+// [31:24] INC_4_BITS
+// [23:16] INC_3_BITS
+// [15:8]  INC_2_BITS
+// [7:0]   INC_1_BITS
+static int p_mb_quant_inc_cfg = 
+              ( MB_INC_4_BITS << 24)  |
+              ( MB_INC_3_BITS << 16)  |
+              ( MB_INC_2_BITS << 8)  |
+              ( MB_INC_1_BITS << 0);  
+
+// [31:24] DEC_4_BITS
+// [23:16] DEC_3_BITS
+// [15:8]  DEC_2_BITS
+// [7:0]   DEC_1_BITS
+static int p_mb_quant_dec_cfg = 
+              ( MB_DEC_4_BITS << 24)  |
+              ( MB_DEC_3_BITS << 16)  |
+              ( MB_DEC_2_BITS << 8)  |
+              ( MB_DEC_1_BITS << 0);  
+
+// [31:0] NUM_ROWS_PER_SLICE_P
+// [15:0] NUM_ROWS_PER_SLICE_I
+static int fixed_slice_cfg = 0;
+
+#ifdef USE_VDEC2
+static int abort_vdec2_flag = 0;
+void AbortEncodeWithVdec2(int abort)
+{
+    abort_vdec2_flag = abort;
+}
+#endif
+
 static void avc_init_ie_me_parameter(void)
 {
-    me_start_position = 0;
     ie_pippeline_block = 3;
 
-    WRITE_HREG(START_POSITION,me_start_position);
     WRITE_HREG(IE_ME_MB_TYPE,ie_me_mb_type);
 
     if(ie_pippeline_block == 3){
@@ -420,6 +644,42 @@ static void avc_init_ie_me_parameter(void)
     ie_me_mode |= (ie_pippeline_block&IE_PIPPELINE_BLOCK_MASK)<<IE_PIPPELINE_BLOCK_SHIFT; // currently disable half and sub pixel
     WRITE_HREG(IE_ME_MODE,ie_me_mode);
     WRITE_HREG(IE_REF_SEL,ie_cur_ref_sel);
+    
+    if(me_mv_merge_ctl)
+        WRITE_HREG(ME_MV_MERGE_CTL, me_mv_merge_ctl);
+    if(me_step0_close_mv)
+        WRITE_HREG(ME_STEP0_CLOSE_MV,me_step0_close_mv);
+    if(me_f_skip_sad)
+        WRITE_HREG(ME_F_SKIP_SAD,me_f_skip_sad);
+    if(me_f_skip_weight)
+        WRITE_HREG(ME_F_SKIP_WEIGHT,me_f_skip_weight);
+
+    if(me_mv_weight_01)
+        WRITE_HREG(ME_MV_WEIGHT_01, me_mv_weight_01); 
+
+    if(me_mv_weight_23)
+        WRITE_HREG(ME_MV_WEIGHT_23, me_mv_weight_23); 
+        
+    if(me_sad_range_inc)
+        WRITE_HREG(ME_SAD_RANGE_INC, me_sad_range_inc); 
+
+    if(fixed_slice_cfg){
+        WRITE_HREG(FIXED_SLICE_CFG, fixed_slice_cfg);
+    }else if(rows_per_slice !=  (encoder_height+15)>>4){
+        WRITE_HREG(FIXED_SLICE_CFG, (rows_per_slice<<16)|rows_per_slice);
+    }else{
+        WRITE_HREG(FIXED_SLICE_CFG, 0);
+    }
+    WRITE_HREG(P_INTRA_CONFIG, p_intra_config); 
+    WRITE_HREG(P_MB_QUANT_CONFIG, p_mb_quant_config);
+    if(ucode_index != UCODE_MODE_SW_MIX){
+        p_mb_quant_config = ( TARGET_BITS_PER_MB << 16)  |
+              ( quant<< 8)  |
+              ( quant << 0);  
+        WRITE_HREG(P_MB_QUANT_CONFIG, p_mb_quant_config);
+    }
+    WRITE_HREG(P_MB_QUANT_INC_CFG, p_mb_quant_inc_cfg); 
+    WRITE_HREG(P_MB_QUANT_DEC_CFG, p_mb_quant_dec_cfg); 
 }
 
 static void mfdin_basic (unsigned input, unsigned char iformat, unsigned char oformat, unsigned picsize_x, unsigned picsize_y, unsigned char r2y_en)
@@ -609,16 +869,13 @@ static int  set_input_format (amvenc_mem_type type, amvenc_frame_fmt fmt, unsign
 
 static void encode_isr_tasklet(ulong data)
 {
-    int temp_canvas;
-    temp_canvas = dblk_buf_canvas;
-    dblk_buf_canvas = ref_buf_canvas;
-    ref_buf_canvas = temp_canvas;   //current dblk buffer as next reference buffer
-    frame_start = 1;
-    frame_number ++;
-    pic_order_cnt_lsb += 2;
     debug_level(0,"encoder is done %d\n",encoder_status);
     if(((encoder_status == ENCODER_IDR_DONE)
 	||(encoder_status == ENCODER_NON_IDR_DONE))&&(process_irq)){
+#ifdef USE_VDEC2
+        if((abort_vdec2_flag)&&(get_vdec2_usage() == USAGE_ENCODE))
+            set_vdec2_usage(USAGE_NONE);
+#endif
         atomic_inc(&avc_ready);
         wake_up_interruptible(&avc_wait);
     }
@@ -626,8 +883,17 @@ static void encode_isr_tasklet(ulong data)
 
 static irqreturn_t enc_isr(int irq, void *dev_id)
 {
-
 	WRITE_HREG(HCODEC_IRQ_MBOX_CLR, 1);
+
+#ifdef DEBUG_UCODE
+//rain 
+       if(READ_HREG(DEBUG_REG)!=0){
+            printk("dbg%x: %x\n",  READ_HREG(DEBUG_REG), READ_HREG(HENC_SCRATCH_1));
+            WRITE_HREG(DEBUG_REG, 0);
+            return IRQ_HANDLED;
+       }
+#endif
+
 	encoder_status  = READ_HREG(ENCODER_STATUS);
 	if((encoder_status == ENCODER_IDR_DONE)
 	||(encoder_status == ENCODER_NON_IDR_DONE)
@@ -635,15 +901,18 @@ static irqreturn_t enc_isr(int irq, void *dev_id)
 	||(encoder_status == ENCODER_PICTURE_DONE)){
 		debug_level(0,"encoder stage is %d\n",encoder_status);
 	}
+	if(encoder_status == ENCODER_PICTURE_DONE)
+		frame_start = 1;
 	if(((encoder_status == ENCODER_IDR_DONE)
 	||(encoder_status == ENCODER_NON_IDR_DONE))&&(!process_irq)){
 		process_irq = 1;
+		frame_start = 1;
 		tasklet_schedule(&encode_tasklet);
 	}
 	return IRQ_HANDLED;
 }
 
-static void avc_prot_init(void)
+static void avc_prot_init(bool IDR)
 {
 	unsigned int data32;
 
@@ -805,7 +1074,7 @@ static void avc_prot_init(void)
                 (1<<9) | // mb_info_soft_reset
                 (1<<0)); // mb read buffer soft reset
 
-    if(half_ucode_mode == 0){
+    if(ucode_index != UCODE_MODE_SW_MIX){
         WRITE_HREG(QDCT_MB_CONTROL,
                   (0<<28) | // ignore_t_p8x8
                   (0<<27) | // zero_mc_out_null_non_skipped_mb
@@ -847,7 +1116,8 @@ static void avc_prot_init(void)
                   (0<<0));   // soft reset
     }
 
-    if(half_ucode_mode == 0){
+    if(ucode_index != UCODE_MODE_SW_MIX){
+        int me_mode  = (ie_me_mode >>ME_PIXEL_MODE_SHIFT)&ME_PIXEL_MODE_MASK;
         WRITE_HREG(SAD_CONTROL,
                   (0<<3) | // ie_result_buff_enable
                   (1<<2) | // ie_result_buff_soft_reset
@@ -870,41 +1140,61 @@ static void avc_prot_init(void)
                   (0<<1) | // ie_enable
                   (0<<0)); // ie soft reset
 
-        WRITE_HREG(ME_SAD_ENOUGH_01,
-                  (0x18<<12) | // me_sad_enough_1
-                  (0x10<<0) | // me_sad_enough_0
-                  (0<<12) | // me_sad_enough_1
-                  (0<<0));   // me_sad_enough_0
+        WRITE_HREG(ME_SAD_ENOUGH_01,me_sad_enough_01);
+                  //(0x18<<12) | // me_sad_enough_1
+                  //(0x10<<0)); // me_sad_enough_0
 
-        WRITE_HREG(ME_SAD_ENOUGH_23, 
-                  (0x20<<0) | // me_sad_enough_2
-                  (0<<12) | // me_sad_enough_3
-                  (0<<0));   // me_sad_enough_2
+        WRITE_HREG(ME_SAD_ENOUGH_23, me_sad_enough_23);
+                  //(0x20<<0) | // me_sad_enough_2
+                  //(0<<12)); // me_sad_enough_3
 
         WRITE_HREG(ME_STEP0_CLOSE_MV, 
                   (0x100 << 10) | // me_step0_big_sad -- two MV sad diff bigger will use use 1
                   (2<<5) | // me_step0_close_mv_y
                   (2<<0));   // me_step0_close_mv_x
 
-        WRITE_HREG(ME_SKIP_LINE, 
-                  ( 4 << 24) |  // step_3_skip_line
-                  ( 4 << 18) |  // step_2_skip_line
-                  ( 2 << 12) |  // step_1_skip_line
-                  ( 0 << 6) |  // step_0_skip_line
-                  //(8 <<0); // read 8*2 less line to save bandwidth
-                  (0 <<0)); // read 8*2 less line to save bandwidth
-
-        WRITE_HREG(ME_F_SKIP_SAD, 
-                  ( 0x40 << 24) |  // force_skip_sad_3
-                  ( 0x40 << 16) |  // force_skip_sad_2
-                  ( 0x30 << 8)  |  // force_skip_sad_1
-                  ( 0x10 << 0));    // force_skip_sad_0
-
-        WRITE_HREG(ME_F_SKIP_WEIGHT, 
-                  ( 0x18 << 24) |  // force_skip_weight_3
-                  ( 0x18 << 16) |  // force_skip_weight_2
-                  ( 0x18 << 8)  |  // force_skip_weight_1
-                  ( 0x18 << 0));    // force_skip_weight_0
+        if(me_mode == 3){
+            WRITE_HREG(ME_SKIP_LINE, 
+                      ( 8 << 24) |  // step_3_skip_line
+                      ( 8 << 18) |  // step_2_skip_line
+                      ( 2 << 12) |  // step_1_skip_line
+                      ( 0 << 6) |  // step_0_skip_line
+                      //(8 <<0); // read 8*2 less line to save bandwidth
+                      (0 <<0)); // read 8*2 less line to save bandwidth
+    
+            WRITE_HREG(ME_F_SKIP_SAD, 
+                      ( 0x00 << 24) |  // force_skip_sad_3
+                      ( 0x00 << 16) |  // force_skip_sad_2
+                      ( 0x30 << 8)  |  // force_skip_sad_1
+                      ( 0x10 << 0));    // force_skip_sad_0
+    
+            WRITE_HREG(ME_F_SKIP_WEIGHT, 
+                      ( 0x00 << 24) |  // force_skip_weight_3
+                      ( 0x08 << 16) |  // force_skip_weight_2
+                      ( 0x18 << 8)  |  // force_skip_weight_1
+                      ( 0x18 << 0));    // force_skip_weight_0
+        }else{
+            WRITE_HREG(ME_SKIP_LINE, 
+                      ( 4 << 24) |  // step_3_skip_line
+                      ( 4 << 18) |  // step_2_skip_line
+                      ( 2 << 12) |  // step_1_skip_line
+                      ( 0 << 6) |  // step_0_skip_line
+                      //(8 <<0); // read 8*2 less line to save bandwidth
+                      (0 <<0)); // read 8*2 less line to save bandwidth
+    
+            WRITE_HREG(ME_F_SKIP_SAD, 
+                      ( 0x40 << 24) |  // force_skip_sad_3
+                      //( 0x40 << 16) |  // force_skip_sad_2
+                      ( 0x30 << 16) |  // force_skip_sad_2
+                      ( 0x30 << 8)  |  // force_skip_sad_1
+                      ( 0x10 << 0));    // force_skip_sad_0
+    
+            WRITE_HREG(ME_F_SKIP_WEIGHT, 
+                      ( 0x18 << 24) |  // force_skip_weight_3
+                      ( 0x18 << 16) |  // force_skip_weight_2
+                      ( 0x18 << 8)  |  // force_skip_weight_1
+                      ( 0x18 << 0));    // force_skip_weight_0
+        }
 
         WRITE_HREG(IE_DATA_FEED_BUFF_INFO,0);
     }
@@ -914,7 +1204,18 @@ static void avc_prot_init(void)
     data32 = READ_HREG(VLC_CONFIG);
     data32 = data32 | (1<<0); // set pop_coeff_even_all_zero
     WRITE_HREG(VLC_CONFIG , data32);	
-    
+
+    if(ucode_index != UCODE_MODE_SW_MIX){
+        if(IDR){
+            WRITE_HREG(BITS_INFO_DDR_START, intra_bits_info_ddr_start_addr); 
+            WRITE_HREG(MV_INFO_DDR_START,intra_pred_info_ddr_start_addr);
+        }else{
+            WRITE_HREG(BITS_INFO_DDR_START, inter_bits_info_ddr_start_addr); 
+            WRITE_HREG(MV_INFO_DDR_START, inter_mv_info_ddr_start_addr);
+        }
+    }else{
+        WRITE_HREG(SW_CTL_INFO_DDR_START,sw_ctl_info_start_addr);
+    }
     /* clear mailbox interrupt */
     WRITE_HREG(HCODEC_IRQ_MBOX_CLR, 1);
 
@@ -1091,7 +1392,7 @@ void enable_hcoder_ddr_access(void)
 #endif
 }
 
-static s32 avc_poweron(void)
+static s32 avc_poweron(int clock)
 {
 	unsigned long flags;
 	u32 data32 = 0;
@@ -1119,7 +1420,8 @@ static s32 avc_poweron(void)
 	WRITE_VREG(DOS_SW_RESET1, 0);
 
 	// Enable Dos internal clock gating
-	hvdec_clock_enable();
+	hvdec_clock_enable(clock);
+
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	//Powerup HCODEC memories
 	WRITE_VREG(DOS_MEM_PD_HCODEC, 0x0);
@@ -1138,6 +1440,13 @@ static s32 avc_poweron(void)
 	data32 = data32 & 0xFFFFFFFE;
 	WRITE_VREG(DOS_GEN_CTRL0, data32);
 
+#ifdef USE_VDEC2
+	if (!vdec_on(VDEC_2) && get_vdec2_usage() == USAGE_NONE) {//++++
+		set_vdec2_usage(USAGE_ENCODE);
+		vdec_poweron(VDEC_2);//++++
+	}
+#endif
+
 	spin_unlock_irqrestore(&lock, flags);
 
 	mdelay(10);
@@ -1165,6 +1474,13 @@ static s32 avc_poweroff(void)
 	WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 0x3);
 #endif
 
+#ifdef USE_VDEC2
+	if (vdec_on(VDEC_2) && get_vdec2_usage() != USAGE_DEC_4K2K) {//++++
+		vdec_poweroff(VDEC_2);//++++
+		set_vdec2_usage(USAGE_NONE);
+	}
+#endif
+
 	spin_unlock_irqrestore(&lock, flags);
 
 	// release DOS clk81 clock gating
@@ -1174,20 +1490,107 @@ static s32 avc_poweroff(void)
 	return 0;
 }
 
+static s32 reload_mc(void)
+{
+    const u32 * p = mix_dump_mc;
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    switch(ucode_index){
+        case UCODE_MODE_FULL:
+            if(enable_dblk)
+                p = mix_dump_mc_dblk;
+            else
+                p = mix_dump_mc;    
+            break;
+        case UCODE_MODE_SW_MIX:
+#ifdef  USE_VDEC2
+            if(enable_dblk == 1)
+                p = mix_sw_mc_vdec2_dblk;
+            else if (enable_dblk ==2)
+                p = mix_sw_mc_hdec_dblk;
+            else
+                p = mix_sw_mc;
+#else
+            if(enable_dblk == 1)
+                p = mix_sw_mc_hdec_dblk;
+            else
+                p = mix_sw_mc;
+#endif
+            break;
+        default:
+            break;
+    }
+#endif
+
+    amvenc_stop();
+
+    WRITE_VREG(DOS_SW_RESET1, 0xffffffff);
+    WRITE_VREG(DOS_SW_RESET1, 0);
+	
+    udelay(10);
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8M2
+    WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x32);
+    dblk_fix_flag = (p==mix_sw_mc_hdec_dblk);
+#else
+    WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
+    dblk_fix_flag = false;
+#endif
+
+    debug_level(0,"reload microcode\n");
+
+    if (amvenc_loadmc(p) < 0) {
+        //amvdec_disable();
+        return -EBUSY;
+    }
+    return 0;
+}
+
 static s32 avc_init(void)
 {
     int r;
-    const u32 * p = full_encoder_mc;
-    avc_poweron();
+    const u32 * p = mix_dump_mc;
+
+    avc_poweron(clock_level);
     avc_canvas_init();
-#if MESON_CPU_TYPE < MESON_CPU_TYPE_MESON8M2
-    WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
+
+    debug_level(1,"start to load microcode %d\n", ucode_index);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    switch(ucode_index){
+        case UCODE_MODE_FULL:
+            if(enable_dblk)
+                p = mix_dump_mc_dblk;
+            else
+                p = mix_dump_mc;    
+            break;
+        case UCODE_MODE_SW_MIX:
+#ifdef  USE_VDEC2
+            if(enable_dblk == 1)
+                p = mix_sw_mc_vdec2_dblk;
+            else if (enable_dblk ==2)
+                p = mix_sw_mc_hdec_dblk;
+            else
+                p = mix_sw_mc;
 #else
+            if(enable_dblk)
+                p = mix_sw_mc_hdec_dblk;
+            else
+                p = mix_sw_mc;
+#endif
+            break;
+        default:
+            break;
+    }
+#endif
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8M2
     WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x32);
+    dblk_fix_flag = (p==mix_sw_mc_hdec_dblk);
+#else
+    WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
+    dblk_fix_flag = false;
 #endif
-    debug_level(1,"start to load microcode\n");
-    if(half_ucode_mode == 1)
-        p = half_encoder_mc;
+
     if (amvenc_loadmc(p) < 0) {
         //amvdec_disable();
         return -EBUSY;
@@ -1196,78 +1599,200 @@ static s32 avc_init(void)
     //avc_canvas_init();
     frame_start = 0;
     idr_pic_id = 0 ;	
+#ifdef DUMP_PRE_ENCODE_INTRA
+    intra_pic_id = 0;	
+#endif
     frame_number = 0 ;
     process_irq = 0;
     pic_order_cnt_lsb = 0 ;
     encoder_status = ENCODER_IDLE ;
     amvenc_reset();
-    avc_init_encoder(); 
+  
+    avc_init_encoder(true); 
     avc_init_input_buffer();  //dct buffer setting
     avc_init_output_buffer();  //output stream buffer
-    avc_prot_init();
+    avc_prot_init(true);
     r = request_irq(INT_AMVENCODER, enc_isr, IRQF_SHARED, "enc-irq", (void *)avc_dec_id);//INT_MAILBOX_1A
     avc_init_dblk_buffer(dblk_buf_canvas);   //decoder buffer , need set before each frame start
     avc_init_reference_buffer(ref_buf_canvas); //reference  buffer , need set before each frame start
     avc_init_assit_buffer(); //assitant buffer for microcode
-    if(half_ucode_mode == 0)
+    if(ucode_index != UCODE_MODE_SW_MIX){
         avc_init_ie_me_parameter();
+    }
+    else{
+        if((dblk_buf_canvas&0xff)==ENC_CANVAS_OFFSET){
+            WRITE_HREG(CURRENT_Y_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec0_y.buf_start);
+            WRITE_HREG(CURRENT_C_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec0_uv.buf_start);
+        }
+        else{
+            WRITE_HREG(CURRENT_Y_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec1_y.buf_start);
+            WRITE_HREG(CURRENT_C_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec1_uv.buf_start);
+        }
+        WRITE_HREG(CANVAS_ROW_SIZE,(((encoder_width+31)>>5)<<5));
+    }
     WRITE_HREG(ENCODER_STATUS , ENCODER_IDLE);
+
+#ifdef MULTI_SLICE_MC    		
+    if(fixed_slice_cfg){
+        WRITE_HREG(FIXED_SLICE_CFG, fixed_slice_cfg);
+    }else if(rows_per_slice !=  (encoder_height+15)>>4){
+        WRITE_HREG(FIXED_SLICE_CFG, (rows_per_slice<<16)|rows_per_slice);
+    }else{
+        WRITE_HREG(FIXED_SLICE_CFG, 0);
+    }
+#else
+    WRITE_HREG(FIXED_SLICE_CFG, 0);
+#endif
     amvenc_start();
     encode_inited = 1;
     return 0;
 }
 
-void amvenc_avc_start_cmd(int cmd, unsigned* input_info)
+void amvenc_avc_start_cmd(int cmd, unsigned* input_info, int ucode_mode)
 {
-	if((cmd == ENCODER_IDR)||(cmd == ENCODER_SEQUENCE)){
-		pic_order_cnt_lsb = 0;	
-		frame_number = 0;
-	}
-
-	if(frame_number > 65535){
-		frame_number = 0;
+	int reload_flag = 0;
+#ifdef USE_VDEC2
+	if(((ucode_mode&0x1) == UCODE_MODE_SW_MIX)&&(enable_dblk>0)){
+		if((get_vdec2_usage() == USAGE_DEC_4K2K)||(abort_vdec2_flag)){
+			enable_dblk = 2;
+			if((abort_vdec2_flag)&&(get_vdec2_usage() == USAGE_ENCODE)){
+				debug_level(1,"switch encode ucode\n");
+				set_vdec2_usage(USAGE_NONE);
+			}
+		}else{
+			if(get_vdec2_usage() == USAGE_NONE)
+				set_vdec2_usage(USAGE_ENCODE);
+			if(!vdec_on(VDEC_2)){
+				vdec_poweron(VDEC_2);//++++
+				mdelay(10);
+			}
+			enable_dblk = 1;
+		}
 	}
-
-	if((idr_pic_id == 0)&&(cmd == ENCODER_IDR))
+#endif
+	if(ucode_mode!=ucode_index){
+		ucode_index = ucode_mode&0x1;
+		if(reload_mc()){
+			debug_level(1,"reload mc fail\n");
+			return;
+		}
+		reload_flag = 1;
 		frame_start = 1;
+       }
 
 	if(frame_start){
 		frame_start = 0;
 		encoder_status = ENCODER_IDLE ;
-		//WRITE_HREG(HENC_SCRATCH_3,0);  //mb count 
-		//WRITE_HREG(VLC_TOTAL_BYTES ,0); //offset in bitstream buffer
 		amvenc_reset();
-		avc_init_encoder();
-		if(cmd == ENCODER_IDR){
-			idr_pic_id ++;
-		}
-		if(idr_pic_id > 65535){
-			idr_pic_id = 0;
-		}
+		avc_init_encoder((cmd == ENCODER_IDR)?true:false);
 		avc_init_input_buffer();
 		avc_init_output_buffer();		
-		avc_prot_init();
+		avc_prot_init((cmd == ENCODER_IDR)?true:false);
 		avc_init_assit_buffer(); 
 		debug_level(0,"begin to new frame\n");
 	}
-	avc_init_dblk_buffer(dblk_buf_canvas);   
-	avc_init_reference_buffer(ref_buf_canvas); 
-	if(half_ucode_mode == 0){
+	if((cmd == ENCODER_IDR)||(cmd == ENCODER_NON_IDR)){
+		avc_init_dblk_buffer(dblk_buf_canvas);   
+		avc_init_reference_buffer(ref_buf_canvas);
+	}
+	if(ucode_index != UCODE_MODE_SW_MIX){
 		if((cmd == ENCODER_IDR)||(cmd == ENCODER_NON_IDR)){
 			set_input_format((amvenc_mem_type)input_info[0], (amvenc_frame_fmt)input_info[1], input_info[2], input_info[3], input_info[4],(unsigned char)input_info[5]);
 		}
 		avc_init_ie_me_parameter();
 	}
+	else{
+		if((dblk_buf_canvas&0xff)==ENC_CANVAS_OFFSET){
+			WRITE_HREG(CURRENT_Y_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec0_y.buf_start);
+			WRITE_HREG(CURRENT_C_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec0_uv.buf_start);
+		}else{
+			WRITE_HREG(CURRENT_Y_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec1_y.buf_start);
+			WRITE_HREG(CURRENT_C_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec1_uv.buf_start);
+		}
+		WRITE_HREG(CANVAS_ROW_SIZE,(((encoder_width+31)>>5)<<5));
+
+#ifdef USE_VDEC2
+		if(enable_dblk == 1){
+			amvdec2_stop();// amvdec2_stop(); //++++
+			WRITE_VREG(VDEC2_AV_SCRATCH_2, 0xffff);
+			// set vdec2 input, clone hcodec input buffer and set to manual mode
+			WRITE_VREG(VDEC2_VLD_MEM_VIFIFO_CONTROL, 0); //++++
+
+			WRITE_VREG(DOS_SW_RESET2, (1<<4));
+			WRITE_VREG(DOS_SW_RESET2, 0);
+			(void)READ_VREG(DOS_SW_RESET2);
+			(void)READ_VREG(DOS_SW_RESET2);
+			WRITE_VREG(VDEC2_POWER_CTL_VLD, (1<<4)|(1<<6)|(1<<9));//++++
+
+			WRITE_VREG(VDEC2_VLD_MEM_VIFIFO_START_PTR,BitstreamStart);//++++
+			WRITE_VREG(VDEC2_VLD_MEM_VIFIFO_END_PTR,BitstreamEnd);//++++
+			WRITE_VREG(VDEC2_VLD_MEM_VIFIFO_CURR_PTR,BitstreamStart);//++++
+    
+			SET_VREG_MASK(VDEC2_VLD_MEM_VIFIFO_CONTROL, 1);//++++
+			CLEAR_VREG_MASK(VDEC2_VLD_MEM_VIFIFO_CONTROL, 1);//++++
+    
+			WRITE_VREG(VDEC2_VLD_MEM_VIFIFO_BUF_CNTL, 2);//++++
+			WRITE_VREG(VDEC2_VLD_MEM_VIFIFO_WP,BitstreamStart);//++++
+    
+			SET_VREG_MASK(VDEC2_VLD_MEM_VIFIFO_BUF_CNTL, 1);//++++
+			CLEAR_VREG_MASK(VDEC2_VLD_MEM_VIFIFO_BUF_CNTL, 1);//++++
+    
+			WRITE_VREG(VDEC2_VLD_MEM_VIFIFO_CONTROL, (0x11<<16) | (1<<10) | (7<<3) | (1<<2) | (1<<1)); //++++
+            
+			amvdec2_loadmc(vdec2_encoder_mc);//++++
+
+			WRITE_VREG(VDEC2_AV_SCRATCH_1, vdec2_start_addr - VDEC2_DEF_BUF_START_ADDR);//++++
+			WRITE_VREG(VDEC2_AV_SCRATCH_8, log2_max_pic_order_cnt_lsb);//++++
+			WRITE_VREG(VDEC2_AV_SCRATCH_9, log2_max_frame_num);//++++
+			WRITE_VREG(VDEC2_AV_SCRATCH_B, qppicture);//++++
+			WRITE_VREG(VDEC2_AV_SCRATCH_A, (((encoder_height+15)/16) << 16) | ((encoder_width+15)/16));//++++
+    
+			// Input/Output canvas
+			WRITE_VREG(VDEC2_ANC0_CANVAS_ADDR, ref_buf_canvas);//++++
+			WRITE_VREG(VDEC2_ANC1_CANVAS_ADDR, dblk_buf_canvas);//++++
+    
+			WRITE_VREG(DECODED_MB_Y, 0);
+			// MBY limit
+			WRITE_VREG(DECODABLE_MB_Y, 0);
+			// VB WP
+			WRITE_VREG(STREAM_WR_PTR, BitstreamStart);
+			// NV21
+			SET_VREG_MASK(VDEC2_MDEC_PIC_DC_CTRL, 1<<17);//++++
+    
+			WRITE_VREG(VDEC2_M4_CONTROL_REG, 1<<13); //set h264_en//++++
+			WRITE_VREG(VDEC2_MDEC_PIC_DC_THRESH, 0x404038aa);//++++
+    	      
+			amvdec2_start();//amvdec2_start();//++++
+		}
+#endif	    
+	}	    
 	encoder_status = cmd;
 	WRITE_HREG(ENCODER_STATUS , cmd);
 	if((cmd == ENCODER_IDR)||(cmd == ENCODER_NON_IDR)){
 		process_irq = 0;
 	}
+#ifdef MULTI_SLICE_MC    		
+	if(fixed_slice_cfg){
+		WRITE_HREG(FIXED_SLICE_CFG, fixed_slice_cfg);
+	}else if(rows_per_slice !=  (encoder_height+15)>>4){
+		WRITE_HREG(FIXED_SLICE_CFG, (rows_per_slice<<16)|rows_per_slice);
+	}else{
+		WRITE_HREG(FIXED_SLICE_CFG, 0);
+	}
+#else
+	WRITE_HREG(FIXED_SLICE_CFG, 0);
+#endif
+	if(reload_flag)
+	    amvenc_start();
 	debug_level(0,"amvenc_avc_start\n");
 }
 
 void amvenc_avc_stop(void)
 {
+#ifdef USE_VDEC2
+	if(get_vdec2_usage() != USAGE_DEC_4K2K)
+		amvdec2_stop();// amvdec2_stop(); //++++
+#endif
 	amvenc_stop();
 	avc_poweroff();
 	debug_level(1,"amvenc_avc_stop\n");
@@ -1294,11 +1819,11 @@ static int amvenc_avc_open(struct inode *inode, struct file *file)
     }
 
 #ifdef CONFIG_CMA
-    venc_pages = dma_alloc_from_contiguous(&this_pdev->dev, (15 * SZ_1M) >> PAGE_SHIFT, 0);
+    venc_pages = dma_alloc_from_contiguous(&this_pdev->dev, (18 * SZ_1M) >> PAGE_SHIFT, 0);
     if(venc_pages)
     {
         gAmvencbuff.buf_start = page_to_phys(venc_pages);
-        gAmvencbuff.buf_size = 15 * SZ_1M;
+        gAmvencbuff.buf_size = 18 * SZ_1M;
         pr_info("%s: allocating phys %p, size %dk\n", __func__, (void *)gAmvencbuff.buf_start, gAmvencbuff.buf_size >> 10);
     }
     else
@@ -1322,6 +1847,14 @@ static int amvenc_avc_open(struct inode *inode, struct file *file)
         amlog_level(LOG_LEVEL_ERROR, "amvenc_avc memory resource too small, size is %d.\n",gAmvencbuff.buf_size);
         return -EFAULT;
     }
+    inter_bits_info_ddr_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->inter_bits_info.buf_start; // 32 bytes alignment
+    inter_mv_info_ddr_start_addr  = gAmvencbuff.buf_start+gAmvencbuff.bufspec->inter_mv_info.buf_start;
+    intra_bits_info_ddr_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->intra_bits_info.buf_start; // 32 bytes alignment
+    intra_pred_info_ddr_start_addr  = gAmvencbuff.buf_start+gAmvencbuff.bufspec->intra_pred_info.buf_start;
+    sw_ctl_info_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->qp_info.buf_start;
+#ifdef USE_VDEC2
+    vdec2_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->vdec2_info.buf_start;
+#endif
     debug_level(1,"amvenc_avc  memory config sucess, buff size is 0x%x, level is %s\n",gAmvencbuff.buf_size,(gAmvencbuff.cur_buf_lev == 0)?"480P":(gAmvencbuff.cur_buf_lev == 1)?"720P":"1080P");
 
 #endif
@@ -1330,6 +1863,9 @@ static int amvenc_avc_open(struct inode *inode, struct file *file)
     atomic_set(&avc_ready, 0);
     tasklet_init(&encode_tasklet, encode_isr_tasklet, 0);
     encode_opened++;
+#ifdef USE_VDEC2
+    abort_vdec2_flag = 0;
+#endif
     return r;
 }
 
@@ -1345,16 +1881,15 @@ static int amvenc_avc_release(struct inode *inode, struct file *file)
         encode_opened--;
 
 #ifdef CONFIG_CMA
-    if(venc_pages)
-    {
-        dma_release_from_contiguous(&this_pdev->dev, venc_pages, (15 * SZ_1M)>>PAGE_SHIFT); 
+    if(venc_pages){
+        dma_release_from_contiguous(&this_pdev->dev, venc_pages, (18 * SZ_1M)>>PAGE_SHIFT); 
         venc_pages = 0;
     }
 #endif
-
     debug_level(1,"avc release\n");
     return 0;
 }
+
 static void dma_flush(unsigned buf_start , unsigned buf_size )
 {
     //dma_sync_single_for_cpu(amvenc_avc_dev,buf_start, buf_size, DMA_TO_DEVICE);
@@ -1367,67 +1902,224 @@ static void cache_flush(unsigned buf_start , unsigned buf_size )
 	//dma_sync_single_for_device(amvenc_avc_dev ,buf_start , buf_size, DMA_FROM_DEVICE);
 }
 
+static u32 amvenc_avc_light_reset(unsigned value)
+{
+    const u32 * p = mix_dump_mc;
+    int r = 0;
+    free_irq(INT_AMVENCODER, (void *)avc_dec_id);
+#ifdef USE_VDEC2
+    if(get_vdec2_usage() != USAGE_DEC_4K2K)
+        amvdec2_stop();// amvdec2_stop(); //++++
+#endif
+    amvenc_stop();
+    avc_poweroff();
+
+    mdelay(value);
+    avc_poweron(1);
+    avc_canvas_init();
+
+    ucode_index = UCODE_MODE_FULL;
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    switch(ucode_index){
+        case UCODE_MODE_FULL:
+            if(enable_dblk)
+                p = mix_dump_mc_dblk;
+            else
+                p = mix_dump_mc;    
+            break;
+        case UCODE_MODE_SW_MIX:
+#ifdef  USE_VDEC2
+            if(enable_dblk == 1)
+                p = mix_sw_mc_vdec2_dblk;
+            else if (enable_dblk ==2)
+                p = mix_sw_mc_hdec_dblk;
+            else
+                p = mix_sw_mc;
+#else
+            if(enable_dblk)
+                p = mix_sw_mc_hdec_dblk;
+            else
+                p = mix_sw_mc;
+#endif
+            break;
+        default:
+            break;
+    }
+#endif
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8M2
+    WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x32);
+    dblk_fix_flag = (p==mix_sw_mc_hdec_dblk);
+#else
+    WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
+    dblk_fix_flag = false;
+#endif
+
+    if (amvenc_loadmc(p) < 0) {
+        debug_level(1,"amvenc_avc_light_reset fail \n");
+        return -EBUSY;
+    }	
+
+    frame_start = 1;
+    process_irq = 0;
+    encoder_status = ENCODER_IDLE ;
+    amvenc_reset();
+    avc_init_encoder(true); 
+    avc_init_input_buffer();  //dct buffer setting
+    avc_init_output_buffer();  //output stream buffer
+    avc_prot_init(true);
+    r = request_irq(INT_AMVENCODER, enc_isr, IRQF_SHARED, "enc-irq", (void *)avc_dec_id);//INT_MAILBOX_1A
+    avc_init_dblk_buffer(dblk_buf_canvas);   //decoder buffer , need set before each frame start
+    avc_init_reference_buffer(ref_buf_canvas); //reference  buffer , need set before each frame start
+    avc_init_assit_buffer(); //assitant buffer for microcode
+    if(ucode_index != UCODE_MODE_SW_MIX){
+        avc_init_ie_me_parameter();
+    }
+    else{
+        if((dblk_buf_canvas&0xff)==ENC_CANVAS_OFFSET){
+            WRITE_HREG(CURRENT_Y_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec0_y.buf_start);
+            WRITE_HREG(CURRENT_C_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec0_uv.buf_start);
+        }
+        else{
+            WRITE_HREG(CURRENT_Y_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec1_y.buf_start);
+            WRITE_HREG(CURRENT_C_CANVAS_START, gAmvencbuff.buf_start + gAmvencbuff.bufspec->dec1_uv.buf_start);
+        }
+        WRITE_HREG(CANVAS_ROW_SIZE,(((encoder_width+31)>>5)<<5));
+    }
+    WRITE_HREG(ENCODER_STATUS , ENCODER_IDLE);
+
+#ifdef MULTI_SLICE_MC    		
+    if(fixed_slice_cfg){
+        WRITE_HREG(FIXED_SLICE_CFG, fixed_slice_cfg);
+    }else if(rows_per_slice !=  (encoder_height+15)>>4){
+        WRITE_HREG(FIXED_SLICE_CFG, (rows_per_slice<<16)|rows_per_slice);
+    }else{
+        WRITE_HREG(FIXED_SLICE_CFG, 0);
+    }
+#else
+    WRITE_HREG(FIXED_SLICE_CFG, 0);
+#endif
+    amvenc_start();
+    debug_level(1,"amvenc_avc_light_reset finish \n");
+    return 0;
+}
+
 static long amvenc_avc_ioctl(struct file *file,
                            unsigned int cmd, ulong arg)
 {
     int r = 0;
-    int amrisc_cmd = 0;
-    unsigned* offset;
-    unsigned* addr_info;
+    unsigned amrisc_cmd = 0;
+    unsigned offset;
+    #define MAX_ADDR_INFO_SIZE 30
+    unsigned addr_info[MAX_ADDR_INFO_SIZE + 4];     
+    ulong argV;
     unsigned buf_start;
+    int canvas = -1;
+    canvas_t dst;
     switch (cmd) {
 	case AMVENC_AVC_IOC_GET_ADDR:
 		if((ref_buf_canvas & 0xff) == (ENC_CANVAS_OFFSET)){
-			 *((unsigned*)arg)  = 1;
+			 put_user(1,(int *)arg);
 		}else{
-			 *((unsigned*)arg)  = 2;	
+			 put_user(2,(int *)arg);
 		}
 		break;
 	case AMVENC_AVC_IOC_INPUT_UPDATE:
-		offset  = (unsigned*)arg ;
-		WRITE_HREG(QDCT_MB_WR_PTR, (dct_buff_start_addr+ *offset));
+		get_user(offset,((unsigned*)arg));
+		WRITE_HREG(QDCT_MB_WR_PTR, (dct_buff_start_addr+ offset));
 		break;    
 	case AMVENC_AVC_IOC_NEW_CMD:
-		amrisc_cmd = *((unsigned*)arg) ;
-		if(half_ucode_mode == 0){
-			addr_info = (unsigned*)arg;
-			amvenc_avc_start_cmd(amrisc_cmd, &addr_info[1]);
+		if(copy_from_user(addr_info,(void*)arg,MAX_ADDR_INFO_SIZE)){
+			debug_level(1,"avc get new cmd error\n");
+			return -1;
+		}
+#ifdef DUMP_PRE_ENCODE_INTRA
+		if(addr_info[0] == ENCODER_IDR && addr_info[8] == 1)
+			preencode_intra = true;
+		else
+			preencode_intra = false;
+#endif
+		if((addr_info[1]&0x1) != UCODE_MODE_SW_MIX){ // mc mode
+			amvenc_avc_start_cmd(addr_info[0], &addr_info[2], addr_info[1]);
 		}else{
-			amvenc_avc_start_cmd(amrisc_cmd, NULL);
+			amvenc_avc_start_cmd(addr_info[0], NULL, addr_info[1]);
 		}
 		break;
 	case AMVENC_AVC_IOC_GET_STAGE:
-		*((unsigned*)arg)  = encoder_status;
+		put_user(encoder_status,(int *)arg);
 		break; 
 	case AMVENC_AVC_IOC_GET_OUTPUT_SIZE:	
-		*((unsigned*)arg) = READ_HREG(VLC_TOTAL_BYTES);
+		put_user(READ_HREG(VLC_TOTAL_BYTES),(int *)arg);
 		break;
 	case AMVENC_AVC_IOC_SET_QUANT:
-		quant = *((unsigned*)arg) ;
+		get_user(quant,((unsigned*)arg));
 		break;
 	case AMVENC_AVC_IOC_SET_ENCODER_WIDTH:
-		if(*((unsigned*)arg)>gAmvencbuff.bufspec->max_width)
-		    *((unsigned*)arg) = gAmvencbuff.bufspec->max_width;
+		get_user(argV,((unsigned*)arg));
+		if(argV>gAmvencbuff.bufspec->max_width)
+		    argV = gAmvencbuff.bufspec->max_width;
 		else
-		    encoder_width = *((unsigned*)arg) ;
+		    encoder_width = argV;
+		put_user(argV,(int *)arg);
 		break;
 	case AMVENC_AVC_IOC_SET_ENCODER_HEIGHT:
-		if(*((unsigned*)arg)>gAmvencbuff.bufspec->max_height)
-		    *((unsigned*)arg) = gAmvencbuff.bufspec->max_height;
+		get_user(argV,((unsigned*)arg));
+		if(argV > gAmvencbuff.bufspec->max_height)
+		    argV = gAmvencbuff.bufspec->max_height;
 		else
-		    encoder_height = *((unsigned*)arg) ;
+		    encoder_height = argV;
+		put_user(argV,(int *)arg);
 		break;	
 	case AMVENC_AVC_IOC_CONFIG_INIT:
-		addr_info = (unsigned*)arg;
-		if(*addr_info == 1)
-			half_ucode_mode = 1;
+		if(copy_from_user(addr_info,(void*)arg,MAX_ADDR_INFO_SIZE)){
+			debug_level(1,"avc config init error\n");
+			return -1;
+		}
+		if(addr_info[0] <= UCODE_MODE_SW_MIX)
+			ucode_index = addr_info[0];
 		else
-			half_ucode_mode = 0;
-		debug_level(1,"avc init as mode %d\n",half_ucode_mode);
+			ucode_index = UCODE_MODE_FULL;
+
+#if MESON_CPU_TYPE < MESON_CPU_TYPE_MESON8
+		ucode_index = UCODE_MODE_FULL;
+#endif
+
+#ifdef MULTI_SLICE_MC
+		rows_per_slice = addr_info[1];
+		debug_level(1,"avc init -- rows_per_slice: %d \n", rows_per_slice);
+#endif
+		debug_level(1,"avc init as mode %d \n",ucode_index);
 		avc_init();
+		addr_info[1] = gAmvencbuff.bufspec->dct.buf_start;
+		addr_info[2] = gAmvencbuff.bufspec->dct.buf_size;
+		addr_info[3] = gAmvencbuff.bufspec->dec0_y.buf_start;
+		addr_info[4] = gAmvencbuff.bufspec->dec0_y.buf_size;
+		addr_info[5] = gAmvencbuff.bufspec->dec0_uv.buf_start;
+		addr_info[6] = gAmvencbuff.bufspec->dec0_uv.buf_size;
+		addr_info[7] = gAmvencbuff.bufspec->dec1_y.buf_start;
+		addr_info[8] = gAmvencbuff.bufspec->dec1_y.buf_size;
+		addr_info[9] = gAmvencbuff.bufspec->dec1_uv.buf_start;
+		addr_info[10] = gAmvencbuff.bufspec->dec1_uv.buf_size;
+		addr_info[11] = gAmvencbuff.bufspec->bitstream.buf_start;
+		addr_info[12] = gAmvencbuff.bufspec->bitstream.buf_size;
+		addr_info[13] = gAmvencbuff.bufspec->inter_bits_info.buf_start;
+		addr_info[14] = gAmvencbuff.bufspec->inter_bits_info.buf_size;
+		addr_info[15] = gAmvencbuff.bufspec->inter_mv_info.buf_start;
+		addr_info[16] = gAmvencbuff.bufspec->inter_mv_info.buf_size;
+		addr_info[17] = gAmvencbuff.bufspec->intra_bits_info.buf_start;
+		addr_info[18] = gAmvencbuff.bufspec->intra_bits_info.buf_size;
+		addr_info[19] = gAmvencbuff.bufspec->intra_pred_info.buf_start;
+		addr_info[20] = gAmvencbuff.bufspec->intra_pred_info.buf_size;
+		addr_info[21] = gAmvencbuff.bufspec->qp_info.buf_start;
+		addr_info[22] = gAmvencbuff.bufspec->qp_info.buf_size;
+		r = copy_to_user((unsigned *)arg, addr_info , 23*sizeof(unsigned));
 		break;		
 	case AMVENC_AVC_IOC_FLUSH_CACHE:
-		addr_info  = (unsigned*)arg ;
+		if(copy_from_user(addr_info,(void*)arg,MAX_ADDR_INFO_SIZE)){
+			debug_level(1,"avc fluch cache error\n");
+			return -1;
+		}
 		switch(addr_info[0]){
 			case 0:
 			buf_start = dct_buff_start_addr;
@@ -1441,6 +2133,15 @@ static long amvenc_avc_ioctl(struct file *file,
 			case 3:
 			buf_start = BitstreamStart ;
 			break;
+			case 4:
+			buf_start = inter_bits_info_ddr_start_addr;
+			break;
+			case 5:
+			buf_start = intra_bits_info_ddr_start_addr;
+			break;
+			case 6:
+			buf_start = sw_ctl_info_start_addr;
+			break;
 			default:
 			buf_start = dct_buff_start_addr;
 			break;
@@ -1448,7 +2149,10 @@ static long amvenc_avc_ioctl(struct file *file,
 		dma_flush(buf_start + addr_info[1] ,addr_info[2] - addr_info[1]);
 		break;
 	case AMVENC_AVC_IOC_FLUSH_DMA:
-		addr_info  = (unsigned*)arg ;
+		if(copy_from_user(addr_info,(void*)arg,MAX_ADDR_INFO_SIZE)){
+			debug_level(1,"avc fluch dma error\n");
+			return -1;
+		}
 		switch(addr_info[0]){
 			case 0:
 			buf_start = dct_buff_start_addr;
@@ -1462,36 +2166,79 @@ static long amvenc_avc_ioctl(struct file *file,
 			case 3:
 			buf_start = BitstreamStart ;
 			break;
+			case 4:
+			buf_start = inter_bits_info_ddr_start_addr;
+			break;
+			case 5:
+			buf_start = intra_bits_info_ddr_start_addr;
+			break;
 			default:
 			buf_start = dct_buff_start_addr;
 			break;
 		}	    
-		cache_flush(buf_start + addr_info[1] ,addr_info[2] - addr_info[1]);
+ 		cache_flush(buf_start + addr_info[1] ,addr_info[2] - addr_info[1]);
 		break;
 	case AMVENC_AVC_IOC_GET_BUFFINFO:
-		addr_info  = (unsigned*)arg;
-		addr_info[0] = gAmvencbuff.buf_size;
-		addr_info[1] = gAmvencbuff.bufspec->dct.buf_start;
-		addr_info[2] = gAmvencbuff.bufspec->dct.buf_size;
-		addr_info[3] = gAmvencbuff.bufspec->dec0_y.buf_start;
-		addr_info[4] = gAmvencbuff.bufspec->dec0_y.buf_size;
-		addr_info[5] = gAmvencbuff.bufspec->dec0_uv.buf_start;
-		addr_info[6] = gAmvencbuff.bufspec->dec0_uv.buf_size;
-		addr_info[7] = gAmvencbuff.bufspec->dec1_y.buf_start;
-		addr_info[8] = gAmvencbuff.bufspec->dec1_y.buf_size;
-		addr_info[9] = gAmvencbuff.bufspec->dec1_uv.buf_start;
-		addr_info[10] = gAmvencbuff.bufspec->dec1_uv.buf_size;
-		addr_info[11] = gAmvencbuff.bufspec->bitstream.buf_start;
-		addr_info[12] = gAmvencbuff.bufspec->bitstream.buf_size;
+		put_user(gAmvencbuff.buf_size,(unsigned *)arg);
 		break;
 	case AMVENC_AVC_IOC_SET_IE_ME_MB_TYPE:
-		ie_me_mb_type = *((unsigned*)arg);
+		get_user(ie_me_mb_type,((unsigned*)arg));
 		break;
 	case AMVENC_AVC_IOC_SET_ME_PIXEL_MODE:
-		ie_me_mode |= (*((unsigned*)arg) & ME_PIXEL_MODE_MASK)<<ME_PIXEL_MODE_SHIFT;
+		get_user(argV,((unsigned*)arg));
+		ie_me_mode |= (argV & ME_PIXEL_MODE_MASK)<<ME_PIXEL_MODE_SHIFT;
 		break;
 	case AMVENC_AVC_IOC_GET_DEVINFO:
-		strncpy((char *)arg,AMVENC_DEV_VERSION,strlen(AMVENC_DEV_VERSION));
+		r = copy_to_user((char *)arg,AMVENC_DEV_VERSION,strlen(AMVENC_DEV_VERSION));
+		break;
+	case AMVENC_AVC_IOC_SUBMIT_ENCODE_DONE:
+		get_user(amrisc_cmd,((unsigned*)arg));
+		if(amrisc_cmd == ENCODER_IDR){
+			idr_pic_id ++;
+			if(idr_pic_id > 65535)
+				idr_pic_id = 0;
+			pic_order_cnt_lsb = 2;	
+			frame_number = 1;
+#ifdef DUMP_PRE_ENCODE_INTRA
+			intra_pic_id++;
+			if(intra_pic_id > 65535)
+				intra_pic_id = 0;
+#endif
+		}else if(amrisc_cmd == ENCODER_NON_IDR){
+			frame_number ++;
+			pic_order_cnt_lsb += 2;
+			if(frame_number > 65535)
+				frame_number = 0;
+#ifdef DUMP_PRE_ENCODE_INTRA
+			intra_pic_id++;
+			if(intra_pic_id > 65535)
+				intra_pic_id = 0;
+#endif
+		}
+		amrisc_cmd = dblk_buf_canvas;
+		dblk_buf_canvas = ref_buf_canvas;
+		ref_buf_canvas = amrisc_cmd;   //current dblk buffer as next reference buffer
+		break;
+	case AMVENC_AVC_IOC_READ_CANVAS:
+		get_user(argV,((unsigned*)arg));
+		canvas = argV;
+		if(canvas&0xff){
+			canvas_read(canvas&0xff,&dst);
+			addr_info[0] = dst.addr;
+			if((canvas&0xff00)>>8)
+				canvas_read((canvas&0xff00)>>8,&dst);
+			if((canvas&0xff0000)>>16)
+				canvas_read((canvas&0xff0000)>>16,&dst);
+			addr_info[1] = dst.addr - addr_info[0] +dst.width*dst.height;
+		}else{
+			addr_info[0] = 0;
+			addr_info[1] = 0;
+		}
+		r = copy_to_user((unsigned *)arg, addr_info , 2*sizeof(unsigned));
+		break;
+	case AMVENC_AVC_IOC_LIGHT_RESET:
+		get_user(argV,((unsigned*)arg));
+		amvenc_avc_light_reset(argV);
 		break;
 	default:
 		r= -1;
@@ -1500,8 +2247,6 @@ static long amvenc_avc_ioctl(struct file *file,
     return r;
 }
 
-
-
 static int avc_mmap(struct file *filp, struct vm_area_struct *vma)
 {
     unsigned long off = vma->vm_pgoff << PAGE_SHIFT;
@@ -1511,7 +2256,8 @@ static int avc_mmap(struct file *filp, struct vm_area_struct *vma)
         debug_level(1,"vma_size is 0 \n");
         return -EAGAIN;
     }
-    off += gAmvencbuff.buf_start;
+    if(!off)
+        off += gAmvencbuff.buf_start;
     debug_level(0,"vma_size is %d , off is %ld \n" , vma_size ,off);
     vma->vm_flags |= VM_DONTEXPAND | VM_DONTDUMP | VM_IO;
     //vma->vm_page_prot = pgprot_noncached(vma->vm_page_prot);
@@ -1612,8 +2358,16 @@ static int amvenc_avc_probe(struct platform_device *pdev)
         amlog_level(LOG_LEVEL_ERROR, "amvenc_avc memory resource too small, size is %d.\n",gAmvencbuff.buf_size);
         return -EFAULT;
     }
-    debug_level(1,"amvenc_avc  memory config sucess, buff size is 0x%x, level is %s\n",gAmvencbuff.buf_size,(gAmvencbuff.cur_buf_lev == 0)?"480P":(gAmvencbuff.cur_buf_lev == 1)?"720P":"1080P");
 
+    inter_bits_info_ddr_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->inter_bits_info.buf_start; // 32 bytes alignment
+    inter_mv_info_ddr_start_addr  = gAmvencbuff.buf_start+gAmvencbuff.bufspec->inter_mv_info.buf_start;
+    intra_bits_info_ddr_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->intra_bits_info.buf_start; // 32 bytes alignment
+    intra_pred_info_ddr_start_addr  = gAmvencbuff.buf_start+gAmvencbuff.bufspec->intra_pred_info.buf_start;
+    sw_ctl_info_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->qp_info.buf_start;
+#ifdef USE_VDEC2
+    vdec2_start_addr = gAmvencbuff.buf_start+gAmvencbuff.bufspec->vdec2_info.buf_start;
+#endif
+    debug_level(1,"amvenc_avc  memory config sucess, buff size is 0x%x, level is %s\n",gAmvencbuff.buf_size,(gAmvencbuff.cur_buf_lev == 0)?"480P":(gAmvencbuff.cur_buf_lev == 1)?"720P":"1080P");
 #endif
 
     init_avc_device();
@@ -1676,6 +2430,45 @@ static void __exit amvenc_avc_driver_remove_module(void)
 module_param(stat, uint, 0664);
 MODULE_PARM_DESC(stat, "\n amvenc_avc stat \n");
 
+module_param(me_mv_merge_ctl, uint, 0664);
+MODULE_PARM_DESC(me_mv_merge_ctl, "\n me_mv_merge_ctl \n");
+
+module_param(me_step0_close_mv, uint, 0664);
+MODULE_PARM_DESC(me_step0_close_mv, "\n me_step0_close_mv \n");
+
+module_param(me_f_skip_sad, uint, 0664);
+MODULE_PARM_DESC(me_f_skip_sad, "\n me_f_skip_sad \n");
+
+module_param(me_f_skip_weight, uint, 0664);
+MODULE_PARM_DESC(me_f_skip_weight, "\n me_f_skip_weight \n");
+
+module_param(me_mv_weight_01, uint, 0664);
+MODULE_PARM_DESC(me_mv_weight_01, "\n me_mv_weight_01 \n");
+
+module_param(me_mv_weight_23, uint, 0664);
+MODULE_PARM_DESC(me_mv_weight_23, "\n me_mv_weight_23 \n");
+        
+module_param(me_sad_range_inc, uint, 0664);
+MODULE_PARM_DESC(me_sad_range_inc, "\n me_sad_range_inc \n");
+
+module_param(me_sad_enough_01, uint, 0664);
+MODULE_PARM_DESC(me_sad_enough_01, "\n me_sad_enough_01 \n");
+
+module_param(me_sad_enough_23, uint, 0664);
+MODULE_PARM_DESC(me_sad_enough_23, "\n me_sad_enough_23 \n");
+
+module_param(fixed_slice_cfg, uint, 0664);
+MODULE_PARM_DESC(fixed_slice_cfg, "\n fixed_slice_cfg \n");
+
+module_param(ucode_index, uint, 0664);
+MODULE_PARM_DESC(ucode_index, "\n ucode_index \n");
+
+module_param(enable_dblk, uint, 0664);
+MODULE_PARM_DESC(enable_dblk, "\n enable_dblk \n");
+
+module_param(clock_level, uint, 0664);
+MODULE_PARM_DESC(clock_level, "\n clock_level \n");
+
 module_init(amvenc_avc_driver_init_module);
 module_exit(amvenc_avc_driver_remove_module);
 
diff --git a/drivers/amlogic/amports/encoder.h b/drivers/amlogic/amports/encoder.h
index 73145a88fa02..67fd519e6069 100755
--- a/drivers/amlogic/amports/encoder.h
+++ b/drivers/amlogic/amports/encoder.h
@@ -26,8 +26,17 @@
 #define HDEC_425M()   WRITE_MPEG_REG(HHI_VDEC_CLK_CNTL, (1 << 25) | (1 << 16) |(1 << 24) | (0xffff&READ_CBUS_REG(HHI_VDEC_CLK_CNTL)))
 #define HDEC_510M()   WRITE_MPEG_REG(HHI_VDEC_CLK_CNTL, (2 << 25) | (0 << 16) |(1 << 24) | (0xffff&READ_CBUS_REG(HHI_VDEC_CLK_CNTL)))
 #define HDEC_638M()   WRITE_MPEG_REG(HHI_VDEC_CLK_CNTL, (0 << 25) | (0 << 16) |(1 << 24) | (0xffff&READ_CBUS_REG(HHI_VDEC_CLK_CNTL)))
-#define hvdec_clock_enable() \
-    HDEC_319M(); \
+#define hvdec_clock_enable(level) \
+    if(level == 0)  \
+        HDEC_255M(); \
+    else if(level == 1)  \
+        HDEC_319M(); \
+    else if(level == 2)  \
+        HDEC_425M(); \
+    else if(level == 3)  \
+        HDEC_510M(); \
+    else if(level == 4)  \
+        HDEC_638M(); \
     WRITE_VREG_BITS(DOS_GCLK_EN0, 0x7fff, 12, 15)
 
 #define hvdec_clock_disable() \
@@ -35,7 +44,7 @@
     WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  0, 24, 1);
 #else
 #define HDEC_250M()   WRITE_MPEG_REG(HHI_VDEC_CLK_CNTL, (0 << 25) | (3 << 16) |(1 << 24) | (0xffff&READ_CBUS_REG(HHI_VDEC_CLK_CNTL)))
-#define hvdec_clock_enable() \
+#define hvdec_clock_enable(level) \
     HDEC_250M(); \
     WRITE_VREG(DOS_GCLK_EN0, 0xffffffff)
 
@@ -43,6 +52,18 @@
     WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  0, 24, 1);
 #endif
 
+#if MESON_CPU_TYPE < MESON_CPU_TYPE_MESON8
+#define HCODEC_ANC0_CANVAS_ADDR ANC0_CANVAS_ADDR
+#define HCODEC_REC_CANVAS_ADDR  REC_CANVAS_ADDR 
+#define HCODEC_DBKR_CANVAS_ADDR DBKR_CANVAS_ADDR
+#define HCODEC_DBKW_CANVAS_ADDR DBKW_CANVAS_ADDR
+#define HCODEC_CURR_CANVAS_CTRL CURR_CANVAS_CTRL
+#define HCODEC_MPSR             MPSR            
+#define HCODEC_CPSR             CPSR            
+#define HCODEC_IMEM_DMA_CTRL    IMEM_DMA_CTRL   
+#define HCODEC_IMEM_DMA_ADR     IMEM_DMA_ADR    
+#define HCODEC_IMEM_DMA_COUNT   IMEM_DMA_COUNT  
+#endif
 
 #define AMVENC_AVC_IOC_MAGIC  'E'
 
@@ -64,6 +85,10 @@
 
 #define AMVENC_AVC_IOC_SET_IE_ME_MB_TYPE 		_IOW(AMVENC_AVC_IOC_MAGIC, 0x0d, unsigned int)
 #define AMVENC_AVC_IOC_SET_ME_PIXEL_MODE 		_IOW(AMVENC_AVC_IOC_MAGIC, 0x0e, unsigned int)
+#define AMVENC_AVC_IOC_SUBMIT_ENCODE_DONE 		_IOW(AMVENC_AVC_IOC_MAGIC, 0x0f, unsigned int)
+#define AMVENC_AVC_IOC_READ_CANVAS 				_IOW(AMVENC_AVC_IOC_MAGIC, 0x10, unsigned int)
+#define AMVENC_AVC_IOC_LIGHT_RESET 				_IOW(AMVENC_AVC_IOC_MAGIC, 0x11, unsigned int)
+
 
 #define IE_PIPPELINE_BLOCK_SHIFT 0
 #define IE_PIPPELINE_BLOCK_MASK  0x1f
@@ -91,7 +116,6 @@ typedef enum{
     MAX_FRAME_FMT 
 }amvenc_frame_fmt;
 
-
 // Memory Address 
 ///////////////////////////////////////////////////////////////////////////
 #define MicrocodeStart        0x0000
@@ -129,9 +153,10 @@ typedef enum{
  *  Interrupt
 ********************************************/
 #define VB_FULL_REQ            0x01
-#define VLC_REQ                0x02
-#define MAIN_REQ               0x04
+#define MAIN_REQ               0x02
+#define VLC_REQ                0x04
 #define QDCT_REQ               0x08
+#define LDMA_REQ               0x10
 
 /********************************************
  *  Regsiter
@@ -176,20 +201,94 @@ typedef enum{
 #define QDCT_REG_6                r14
 #define QDCT_REG_7                r15
 
-#define TOP_INFO_0                r26 
-#define TOP_INFO_1                r27 
-#define TOP_INFO_1_NEXT           r28 
-#define TOP_MV_0                  r29 
-#define TOP_MV_1                  r30 
-#define TOP_MV_2                  r31 
-#define TOP_MV_3                  r32 
-#define MAIN_LOOP_REG_0			  r33   //determine encoder stage
+#ifdef USE_SW_IF
+#else
+#define MB_QUANT_CHANGED          r21
+#endif
+#define LAST_MB_MV_BITS           r22
+#define LAST_MB_COEFF_BITS        r23
+
+#define TOP_INFO_0                r24 
+#define TOP_INFO_1                r25 
+#define TOP_INFO_1_NEXT           r26 
+#define TOP_MV_0                  r27 
+#define TOP_MV_1                  r28 
+#define TOP_MV_2                  r29 
+#define TOP_MV_3                  r30 
 
 #define vr00                      r8
 #define vr01                      r9
 #define vr02                      r10
 #define vr03                      r11
-#define MEM_OFFSET                r12
+
+#define MEM_OFFSET                r31
+
+
+#ifdef INTRA_IN_P_TOP
+#define TOP_Y_DDR_SWAP_LEFT_REG   r32 
+#define CURRENT_SLICE_QUANT       r33
+#define TOP_C_DDR_SWAP_LEFT_REG   r34 
+
+#define CURRENT_INTRA_REG         r35
+#define TOP_INFO_0_NEXT           r36 
+#define TOP_INFO_0_READ           r37 
+#define SW_IF_REG_0               r38 
+#define SW_IF_REG_1               r39 
+// bit[31:1] top
+// bit[0] left
+#define INTRA_STATUS_REG          r40
+// bit[1] next_top
+// bit[0] next_left
+#define NEXT_INTRA_STATUS_REG     r41
+
+#define PRED_U                    r42
+#define PRED_UR                   r43
+#define PRED_L                    r44
+
+#define TOP_Y_DDR_ADDR            r45
+#ifdef DBLK_FIX
+#define T_L_INFO_REG              r46
+#else
+#define TOP_C_DDR_ADDR            r46
+#endif
+#define TOP_W_DDR_ADDR            r47
+#define NEXT_TOP_CONTROL_REG      r48
+#define TOP_MV_0_d1               r49
+#define TOP_MV_0_d2               r50
+#else
+#define TOTAL_BITS_REG            r32
+#define CURRENT_SLICE_QUANT       r33
+#define SUM_BITS_8                r34
+#define I4x4_MODE_HI_REG          r35
+#define I4x4_MODE_LO_REG          r36
+#define C_PRED_MODE_REG           r37
+
+#define MV_0_REG                  r35
+#define MV_1_REG                  r36
+#define MV_2_REG                  r37
+#define MV_3_REG                  r38
+#define MV_4_REG                  r39
+#define MV_5_REG                  r40
+#define MV_6_REG                  r41
+#define MV_7_REG                  r42
+#define MV_8_REG                  r43
+#define MV_9_REG                  r44
+#define MV_A_REG                  r45
+#define MV_B_REG                  r46
+#define MV_C_REG                  r47
+#define MV_D_REG                  r48
+#define MV_E_REG                  r49
+#define MV_F_REG                  r50
+#endif
+#define VLC_MB_INFO_REG           r51
+
+
+#define MAIN_LOOP_REG_0           r52
+#define MAIN_LOOP_REG_1           r53
+
+#define dbg_r0                  r54
+#define dbg_r1                  r55
+#define dbg_r2                  r56
 
 /********************************************
  *  AV Scratch Register Re-Define
@@ -197,8 +296,8 @@ typedef enum{
 #define ENCODER_STATUS					HENC_SCRATCH_0
 #define MEM_OFFSET_REG					HENC_SCRATCH_1
 #define DEBUG_REG						HENC_SCRATCH_2  //0X0ac2
-#define MB_COUNT						HENC_SCRATCH_3
-#define IDR_INIT_COUNT					HENC_SCRATCH_4
+//#define MB_COUNT                    HENC_SCRATCH_3
+//#define IDR_INIT_COUNT              HENC_SCRATCH_4
 #define IDR_PIC_ID						HENC_SCRATCH_5
 #define FRAME_NUMBER					HENC_SCRATCH_6
 #define PIC_ORDER_CNT_LSB				HENC_SCRATCH_7
@@ -207,11 +306,56 @@ typedef enum{
 #define ANC0_BUFFER_ID					HENC_SCRATCH_A
 #define QPPICTURE						HENC_SCRATCH_B
 
-#define START_POSITION					HENC_SCRATCH_C
+//#define START_POSITION              HENC_SCRATCH_C
 #define IE_ME_MB_TYPE					HENC_SCRATCH_D
 #define IE_ME_MODE						HENC_SCRATCH_E  //bit 0-4, IE_PIPPELINE_BLOCK, bit 5 me half pixel, bit 6, me step2 sub pixel
 #define IE_REF_SEL						HENC_SCRATCH_F
 
+
+// [21:16] P_INTRA_QUANT 
+// [15:0]  INTRA_MIN_BITS 
+#define P_INTRA_CONFIG            HENC_SCRATCH_G
+
+// [31:16] TARGET_BITS_PER_MB
+// [15:8] MIN_QUANT
+//  [7:0] MAX_QUANT
+#define P_MB_QUANT_CONFIG         HENC_SCRATCH_I
+// [31:24] INC_4_BITS
+// [23:16] INC_3_BITS
+// [15:8]  INC_2_BITS
+// [7:0]   INC_1_BITS
+#define P_MB_QUANT_INC_CFG        HENC_SCRATCH_J
+// [31:24] DEC_4_BITS
+// [23:16] DEC_3_BITS
+// [15:8]  DEC_2_BITS
+// [7:0]   DEC_1_BITS
+#define P_MB_QUANT_DEC_CFG        HENC_SCRATCH_K
+
+// [31:0] NUM_ROWS_PER_SLICE_P
+// [15:0] NUM_ROWS_PER_SLICE_I
+#define FIXED_SLICE_CFG           HENC_SCRATCH_L
+
+// Each MB have 32 bits :
+// 12-bits MV_BITS, 4-bits MB_TYPE,  and 16-bits COEFF_BITS
+#define BITS_INFO_DDR_START       HENC_SCRATCH_M
+// Each MV has 16 x 32 bits 
+#define MV_INFO_DDR_START         HENC_SCRATCH_N
+// Each I4x4 has 64 bits 
+#define I4x4_INFO_DDR_START       MV_INFO_DDR_START  //shared will not dump I4x4 and MV at same time
+
+// can be shared by BITS_INFO_DDR_START
+// bit[7] - 0-same slice, 1-new slice
+// bit[6] - 0-inter, 1-intra
+// bit[5:0] - quant
+#define SW_CTL_INFO_DDR_START     BITS_INFO_DDR_START
+
+#define CURRENT_Y_CANVAS_START    HENC_SCRATCH_3
+#define CURRENT_C_CANVAS_START    HENC_SCRATCH_4
+// For Block Mode 1 - 32x32 
+// If CAVAS width = 1920, then row_size = 1920/32 * 32 * 32 = 61440 (0xf000)
+#define CANVAS_ROW_SIZE           HENC_SCRATCH_C
+
+
 #define LOW_LATENCY_EN_REG			DOS_SCRATCH9
 #define PREVIOUS_FNUM_REG				DOS_SCRATCH10
 
@@ -232,6 +376,10 @@ typedef enum{
 #define ENCODER_NON_IDR_DONE           10
 #define ENCODER_MB_HEADER_DONE         11
 #define ENCODER_MB_DATA_DONE           12
+
+#define ENCODER_NON_IDR_INTRA     13
+#define ENCODER_NON_IDR_INTER     14
+
 //---------------------------------------------------
 // NAL start code define
 //---------------------------------------------------
@@ -259,6 +407,13 @@ typedef enum{
 #define IDR_NAL      ((nal_reference_idc_idr<<5) | Coded_slice_of_an_IDR_picture) 
 #define NON_IDR_NAL  ((nal_reference_idc_non_idr<<5) | Coded_slice_of_a_non_IDR_picture) 
 
+//---------------------------------------------------
+// I_IN_P TOP Status
+//---------------------------------------------------
+#define I_IN_P_TOP_STATUS_IDLE    0
+#define I_IN_P_TOP_STATUS_READ_Y  1
+#define I_IN_P_TOP_STATUS_READ_C  2
+#define I_IN_P_TOP_STATUS_WRITE   3
 /********************************************
  *  Local Memory
 ********************************************/
@@ -277,12 +432,87 @@ typedef enum{
 //#define pic_width_in_mbs_minus1        0x00c
 //#define pic_height_in_map_units_minus1 0x00d
 //#define anc0_buffer_id                 0x00e
-//#define me_start_position              0x00f
-//#define ie_me_mb_type                  0x010
-//#define ie_me_mode                     0x011
-//#define ie_cur_ref_sel                 0x012
 
-#define HENC_TOP_LMEM_BEGIN            0x300
+//#define enc_header_ready               0x00f
+
+
+//#define cur_mv_bits                    0x010
+//#define cur_coeff_bits                 0x011
+//#define slice_mb_num                   0x012
+//#define current_slice_quant            0x013
+
+//#define insert_slice_header            0x014
+
+//#define Quant_change_bits              0x015
+
+//#define prev_mb_quant                  0x016
+//#define current_mb_quant               0x017
+//#define next_mb_quant                  0x018
+//#define delta_qp_data                  0x019
+//#define qp_change_mbx                  0x01a
+
+//#define process_vlc_mbx                0x01b
+//#define process_vlc_mby                0x01c
+//#define big_delta_qp                   0x01d
+
+//#define current_mb_type                0x01e
+//#define next_mb_type                   0x01f
+
+//#define T_BITS_0                       0x020
+//#define T_BITS_1                       0x021
+//#define T_BITS_2                       0x022
+//#define T_BITS_3                       0x023
+//#define T_BITS_4                       0x024
+//#define T_BITS_5                       0x025
+//#define T_BITS_6                       0x026
+
+//#define just_changed_status            0x027
+//#define mb_type                        0x028
+//#define top_store_intra                0x029
+//#define MB_SKIP_RUN_I_IN_P             0x02a
+//#define I_IN_P_TOP_STATUS              0x02b
+//#define WAIT_I_IN_P_TOP_STATUS         0x02c
+//#define top_pre_load_times             0x02d
+
+//#define MB_INC_1_BITS                  0x030
+//#define MB_INC_2_BITS                  0x031
+//#define MB_INC_3_BITS                  0x032
+//#define MB_INC_4_BITS                  0x033
+//#define MB_DEC_1_BITS                  0x034
+//#define MB_DEC_2_BITS                  0x035
+//#define MB_DEC_3_BITS                  0x036
+//#define MB_DEC_4_BITS                  0x037
+//#define MB_MIN_QUANT                   0x038
+//#define MB_MAX_QUANT                   0x039
+
+//#define ie_me_mode                     0x040
+
+// there are 32 bits BITS_INFO Per MB
+// 12-bits MV_BITS, 4-bits MB_TYPE,  and 16-bits COEFF_BITS
+//#define BITS_INFO_START                0x100
+
+//#ifdef HDEC_BLK_MODE_LINEAR
+//#define INTRA_LEFT_START               0x200
+//#define INTRA_LEFT_YC_START            0x280
+//#define INTRA_TOP_START                0x200
+//#define INTRA_TOP_Y_START              0x220
+//#define INTRA_TOP_C_START              0x240
+//#else
+//#define INTRA_LEFT_C_START             0x180
+//#define INTRA_LEFT_START               0x200
+//#define INTRA_LEFT_Y_START             0x200
+//#endif
+
+
+//#define SW_CTL_INFO_START              BITS_INFO_START
+
+// there are 64 bits I4x4_INFO per MB
+//#define I4x4_INFO_START                0x200
+
+// there are 16x32 bits MV_INFO per MB
+//#define MV_INFO_START                  0x200
+
+//#define HENC_TOP_LMEM_BEGIN            0x300
 
 /********************************************
 * defines for HENC command 
@@ -343,17 +573,42 @@ typedef enum{
 #define DEFAULT_MVY             0x4000
 
 // For I Slice
-// Bit[31:16] Reserved
+// Bit[31:20] Reserved
+// Bit[19:16] cbp
 // Bit[15:0] IntraType 
 //`define     HENC_TOP_INFO_0        8'h37 
 //`define     HENC_LEFT_INFO_0       8'h38 
 
-// For I Slice
+// For I Slice and Intra/Inter Mixed Slice
 // Bit[31:24] V_nnz
 // Bit[23:16] U_nnz
 // Bit[15:0]  Y_nnz 
 //`define     HENC_TOP_INFO_1        8'h39 
-//`define     HENC_LEFT_INFO_2       8'h3a 
+//`define     HENC_LEFT_INFO_1       8'h3a 
+
+// For Intra/Inter Mixed Slice
+// 
+// bit[31] -  cbp[3]
+// bit[30:16] - MVY ( 0x3fff Means Intra MB)
+// bit[15:0]  - MVX ( IntraType for Intra MB) 
+//`define     HENC_TOP_MV_0
+// bit[31] -  cbp[2]
+// bit[30:16] - MVY
+// bit[15:0]  - MVX
+//`define     HENC_TOP_MV_1
+// bit[31] -  cbp[1]
+// bit[30:16] - MVY
+// bit[15:0]  - MVX
+//`define     HENC_TOP_MV_2
+// bit[31] -  cbp[0]
+// bit[30:16] - MVY
+// bit[15:0]  - MVX
+//`define     HENC_TOP_MV_3
+
+//`define     HENC_LEFT_MV_0
+//`define     HENC_LEFT_MV_1
+//`define     HENC_LEFT_MV_2
+//`define     HENC_LEFT_MV_3
 
 ///////////////////////////////////////////////////////////////////////////
 // 
diff --git a/drivers/amlogic/amports/encoder_mc.h b/drivers/amlogic/amports/encoder_mc.h
index 69c4453e13a1..83ab3bcf7a1d 100755
--- a/drivers/amlogic/amports/encoder_mc.h
+++ b/drivers/amlogic/amports/encoder_mc.h
@@ -7,8 +7,17 @@
 
 #ifndef ENCODER_MC_H
 #define ENCODER_MC_H
+#include "amports_config.h"
 
-extern const u32 full_encoder_mc[];
+extern const u32 mix_dump_mc[];
 extern const u32 half_encoder_mc[];
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+extern const u32 mix_sw_mc[];
+extern const u32 mix_sw_mc_hdec_dblk[];
+extern const u32 mix_dump_mc_dblk[];
+#if HAS_VDEC2
+extern const u32 mix_sw_mc_vdec2_dblk[];
+extern const u32 vdec2_encoder_mc[];
+#endif
+#endif
 #endif /* ENCODER_MC_H */
diff --git a/drivers/amlogic/amports/jpegenc.c b/drivers/amlogic/amports/jpegenc.c
index 014f555c790b..3e03618fcabf 100755
--- a/drivers/amlogic/amports/jpegenc.c
+++ b/drivers/amlogic/amports/jpegenc.c
@@ -35,9 +35,12 @@
 #include <linux/poll.h>
 #include <linux/of.h>
 #include <linux/of_fdt.h>
+#include <linux/dma-contiguous.h>
+#include "amports_config.h"
 
 #define ENC_CANVAS_OFFSET  AMVENC_CANVAS_INDEX
 
+
 #define LOG_LEVEL_VAR 1
 #define debug_level(level, x...) \
 	do { \
@@ -45,7 +48,7 @@
 			printk(x); \
 	} while (0);
 
-#define PUT_INTERVAL        (HZ/100)
+
 #ifdef CONFIG_AM_VDEC_MJPEG_LOG
 #define AMLOG
 #define LOG_LEVEL_VAR       amlog_level_jpeg
@@ -149,7 +152,7 @@ typedef struct
     Buff_t bitstream;
 } BuffInfo_t;
 
-const static BuffInfo_t jpegenc_buffspec[]={
+const BuffInfo_t jpegenc_buffspec[]={
     {
         .lev_id = JPEGENC_BUFFER_LEVEL_VGA,
         .max_width = 640,
@@ -976,7 +979,6 @@ static void jpegenc_canvas_init(void)
 
 }
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 static void mfdin_basic_jpeg (unsigned input, unsigned char iformat, unsigned char oformat, unsigned picsize_x, unsigned picsize_y, unsigned char r2y_en)
 {
     unsigned char dsample_en; // Downsample Enable
@@ -1188,7 +1190,6 @@ static int  set_jpeg_input_format (jpegenc_mem_type type, jpegenc_frame_fmt inpu
         mfdin_basic_jpeg(input,iformat,oformat,picsize_x,picsize_y,r2y_en);
     return ret;
 }
-#endif
 
 static void jpegenc_isr_tasklet(ulong data)
 {
@@ -1348,12 +1349,12 @@ static s32 jpegenc_poweron(void)
     data32 = 0;
     enable_hcoder_ddr_access();
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     //CLK_GATE_ON(DOS);
     switch_mod_gate_by_name("vdec", 1);
 
     spin_lock_irqsave(&lock, flags);
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     data32 = READ_AOREG(AO_RTI_PWR_CNTL_REG0);
     data32 = data32 & (~(0x18));
     WRITE_AOREG(AO_RTI_PWR_CNTL_REG0, data32);
@@ -1397,28 +1398,28 @@ static s32 jpegenc_poweron(void)
 
 static s32 jpegenc_poweroff(void)
 {
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     unsigned long flags;
 
     spin_lock_irqsave(&lock, flags);
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     // enable HCODEC isolation
     WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) | 0x30);
     // power off HCODEC memories
     WRITE_VREG(DOS_MEM_PD_HCODEC, 0xffffffffUL);
+#endif
     // disable HCODEC clock
     jpegenc_clock_disable();
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     // HCODEC power off
     WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 0x3);
+#endif
 
     spin_unlock_irqrestore(&lock, flags);
 
     // release DOS clk81 clock gating
     //CLK_GATE_OFF(DOS);
     switch_mod_gate_by_name("vdec", 0);
-#else
-    jpegenc_clock_disable();
-#endif
     return 0;
 }
 
@@ -1427,7 +1428,11 @@ static s32 jpegenc_init(void)
     int r;   
     jpegenc_poweron();
     jpegenc_canvas_init();
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8M2
+    WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x32);
+#else
     WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
+#endif
     debug_level(1,"start to load microcode\n");
     if (jpegenc_loadmc(jpeg_encoder_mc) < 0) {
         //amvdec_disable();
@@ -1698,8 +1703,7 @@ static int jpegenc_mmap(struct file *filp, struct vm_area_struct *vma)
 
 static unsigned int jpegenc_poll(struct file *file, poll_table *wait_table)
 {
-    if((encoder_status != ENCODER_DONE)||(process_irq!=1))
-        poll_wait(file, &jpegenc_wait, wait_table);
+    poll_wait(file, &jpegenc_wait, wait_table);
 
     if (atomic_read(&jpegenc_ready)) {
         atomic_dec(&jpegenc_ready);
diff --git a/drivers/amlogic/amports/m6tv/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m6tv/ucode/encoder/encoder_mc.c
index c7271abae469..f8e125f7932a 100755
--- a/drivers/amlogic/amports/m6tv/ucode/encoder/encoder_mc.c
+++ b/drivers/amlogic/amports/m6tv/ucode/encoder/encoder_mc.c
@@ -21,7 +21,7 @@
 
 #include <linux/types.h>
 
-#define MicroCode full_encoder_mc
+#define MicroCode mix_dump_mc
 #include "full_encoder_linux.h"
 
 #undef MicroCode
diff --git a/drivers/amlogic/amports/m6tvd/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m6tvd/ucode/encoder/encoder_mc.c
index c7271abae469..f8e125f7932a 100755
--- a/drivers/amlogic/amports/m6tvd/ucode/encoder/encoder_mc.c
+++ b/drivers/amlogic/amports/m6tvd/ucode/encoder/encoder_mc.c
@@ -21,7 +21,7 @@
 
 #include <linux/types.h>
 
-#define MicroCode full_encoder_mc
+#define MicroCode mix_dump_mc
 #include "full_encoder_linux.h"
 
 #undef MicroCode
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
index c7271abae469..d22a36e2d9d0 100755
--- a/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
@@ -21,10 +21,29 @@
 
 #include <linux/types.h>
 
-#define MicroCode full_encoder_mc
-#include "full_encoder_linux.h"
+#define MicroCode mix_dump_mc
+#include "h264_enc_mix_dump.h"
 
 #undef MicroCode
 #define MicroCode half_encoder_mc
 #include "half_encoder_linux.h"
 
+#undef MicroCode
+#define MicroCode mix_sw_mc
+#include "h264_enc_mix_sw.h"
+
+#undef MicroCode
+#define MicroCode mix_sw_mc_vdec2_dblk
+#include "h264_enc_mix_sw_vdec2_dblk.h"
+
+#undef MicroCode
+#define MicroCode mix_sw_mc_hdec_dblk
+#include "h264_enc_mix_sw_hdec_dblk.h"
+
+#undef MicroCode
+#define MicroCode mix_dump_mc_dblk
+#include "h264_enc_mix_dump_dblk.h"
+
+#undef MicroCode
+#define MicroCode vdec2_encoder_mc
+#include "vdec2_encoder.h"
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h b/drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h
deleted file mode 100755
index dfb00debe447..000000000000
--- a/drivers/amlogic/amports/m8/ucode/encoder/full_encoder_linux.h
+++ /dev/null
@@ -1,178 +0,0 @@
-const u32 MicroCode[] __attribute__((aligned(8))) = {
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc013ec0,0x0000000,
-	0xc000e80,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0xc780ec0,0x0000000,
-	0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0xc7928c0,0x0000000,0xc78cc40,0x64d3008,0xc780900,0x0000000,0xc792900,
-	0x0000000,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
-	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
-	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c003c8,
-	0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,
-	0x0000000,0x6432421,0xaa0c021,0x8032400,0x6699321,0x64ac021,0xaaec021,0xaa34061,
-	0xa60c0a1,0xc7816c0,0x0000000,0xa60c121,0xc784dc0,0x0000000,0xa6100e1,0x0000000,
-	0xc782980,0x0000000,0xc7ffbc0,0x0000000,0xc07f500,0x0000000,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,
-	0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07f400,0x80d2100,0x7800148,0x4404208,
-	0xc07f300,0x60d2108,0xc07f280,0x80d2100,0x7800108,0x4404208,0xc07f180,0x60d2108,
-	0xc07f100,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0xc07eec0,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
-	0xc07ed00,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,
-	0xc7802c0,0x80d1f20,0x80d1f30,0xc07ea40,0x80d2100,0xc07e9c0,0x80d2100,0xc07e940,
-	0x80d2100,0xc07e8c0,0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,
-	0x80ac007,0x8007801,0xc7fe7c0,0x0000000,0xc07e100,0x0000000,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e180,0x80d2100,
-	0xc07e100,0x80d2100,0x80d1f20,0x80d1f20,0xc07e000,0x80d2100,0xc07df80,0x80d2100,
-	0xc07df00,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,0xc007d40,0x441a208,0xc07dd40,
-	0x60d2108,0xc007c40,0x6800008,0xc07dc40,0x60d2108,0xc07dbc0,0x80d2100,0x80d1f20,
-	0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,
-	0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,
-	0xbefc108,0x0000000,0x80ac008,0x8007801,0xc7fd340,0x0000000,0xc010400,0x0000000,
-	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,0x9c08748,0x9c08788,0x6001108,
-	0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc010840,0x0000000,0xc00ff40,
-	0x0000000,0xc07c7c0,0x0000000,0x64ac408,0x4001208,0x60ac408,0x64f4908,0x9c08048,
-	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x9210208,0xc07c540,
-	0x60d2108,0xc07c4c0,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,0x7c00248,
-	0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x2008308,0x60f2008,
-	0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,
-	0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07bc00,0x80d2100,0x7800148,0x7800189,
-	0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07b980,0x60d2108,
-	0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,
-	0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc005580,0x2408248,0xc07b580,0x60d2108,
-	0x80d3d00,0x64acd08,0x60f4208,0xc0055c0,0x0000000,0x680d683,0x6813344,0x80d300f,
-	0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,
-	0x60d0008,0x64acf08,0x60f4808,0x6800289,0x78003c8,0x9485248,0x60f4009,0x80ac005,
-	0x8007801,0xc7fb000,0x0000000,0xc00eac0,0x0000000,0x64f4008,0x9c08048,0x60f4008,
-	0xc00df80,0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,
-	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc00e3c0,
-	0x0000000,0xc00dac0,0x0000000,0xc07a340,0x0000000,0x64f4308,0x9c08048,0x9c080c8,
-	0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,0x9c08448,0x9c08488,0x9c08348,
-	0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808488,0x9808448,0x9808348,
-	0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,0x98086c8,0x9c08248,0x9c08008,
-	0x60f1508,0x64f4908,0x9c08048,0x9c081c8,0x9808008,0x60f4908,0x78003c9,0x5805249,
-	0x96e1209,0x5801249,0x9761209,0x98087c8,0x9808788,0x9808748,0x9808688,0x9808648,
-	0x9808608,0x9808288,0x9c08248,0x98081c8,0x9808088,0x9808048,0x60f4908,0x4801249,
-	0xaa10049,0x0000000,0xc781640,0x0000000,0x6800c08,0x6800809,0x94e8209,0x6800c09,
-	0x9608209,0x6801009,0x9708209,0x60f5608,0x6800008,0x6800009,0x9508209,0x60f5708,
-	0x680c0c8,0x6c00008,0x60f5808,0x68000c8,0x68000c9,0x9484209,0x68000c9,0x9504209,
-	0x6800049,0x9581209,0x6800009,0x95a1209,0x6800049,0x95c5209,0x60f5908,0x6800388,
-	0x6800489,0x9508209,0x6800149,0x9604209,0x68000c9,0x9684209,0x6800109,0x9704209,
-	0x6800089,0x9704209,0x60f5a08,0x6800008,0x6800009,0x9508209,0x6800809,0x9608209,
-	0x6801409,0x9708209,0x60f5b08,0x6801008,0x6800009,0x9508209,0x6801809,0x9608209,
-	0x6803009,0x9708209,0x60f5c08,0x6800608,0x6801409,0x9508209,0x6800809,0x9608209,
-	0x6801809,0x9708209,0x60f5d08,0x68000c8,0x6801809,0x948c209,0x6800249,0x9607209,
-	0x6800009,0x96e1209,0x6800c09,0x9708209,0x60f5e08,0x68000c8,0x6800009,0x9461209,
-	0x6800049,0x9481209,0x6800009,0x94a2209,0x6803009,0x950c209,0x6801c09,0x968c209,
-	0x60f5f08,0xc7807c0,0x0000000,0x6804008,0x68000c9,0x9586209,0x6800089,0x9646209,
-	0x9808608,0x9808648,0x9808688,0x98086c8,0x9808708,0x9808748,0x9808788,0x98087c8,
-	0x60f5508,0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,
-	0x60f5608,0x6800c08,0x6801009,0x9508209,0x60f5708,0x680c0c8,0x6c0c0c8,0x60f5808,
-	0x64acc09,0x60f4a09,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,
-	0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,0x7800348,0x958c248,
-	0x6499008,0x9708248,0x60f4f09,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
-	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,0x60d1f08,
-	0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc0773c0,0x60d2108,0xc077340,
-	0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x7800348,
-	0x960f248,0x60f1e09,0xc077080,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
-	0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
-	0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64f1d08,0x9206208,0x7800049,
-	0xc000a80,0x2408248,0xc076a80,0x60d2108,0x80d3d00,0x80d5300,0x64acd08,0x60f4208,
-	0xc001840,0x0000000,0x6810143,0x6813bc4,0x6800008,0x6c00448,0x60d3008,0x64d0008,
-	0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,0x9808048,
-	0x9808088,0x98080c8,0x9808148,0x9808188,0x98081c8,0x60d0008,0x6800048,0x7800309,
-	0x948c209,0x60f4b08,0x80ac005,0x8007801,0xc7f6340,0x0000000,0x0800000,0x7800008,
-	0xc7f5a40,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
-	0xcc00000,0x5401209,0x6bfffda,0x6c0001a,0x6800009,0x680001b,0x6c0001b,0x400071b,
-	0x680000b,0x680c00e,0x680100f,0x740039a,0x400138e,0x7400389,0x400138e,0x740039b,
-	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e30e,
-	0x680000f,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,
-	0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffd00,0x200e34e,0x64d330d,
-	0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,0xc7fff40,0x40403cf,
-	0x7c0028e,0x44013cf,0x7c002cf,0x60d371a,0x60d391b,0x60d381a,0x60d3a1b,0xcc00000,
-	0x0000000,0x8098002,0x8098000,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x6a0001f,
-	0x6d0001f,0x6a00020,0x6d00020,0x690000a,0x680001b,0x6c0001b,0x400071b,0x6800009,
-	0x680c00e,0x680064f,0x740039b,0x400138e,0x7400389,0x400138e,0x740039d,0x400138e,
-	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0x740039f,0x400138e,
-	0x740038a,0x400138e,0x74003a0,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
-	0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
-	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,
-	0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,
-	0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d391b,0x60d4a1d,
-	0x60d4b1e,0x60d4c1f,0x60d4d20,0x60d4a1d,0x60d4a1d,0x60d3a1b,0x60d4e1d,0x60d4f1e,
-	0x60d501f,0x60d5120,0xcc00000,0x0000000,0xaa10008,0x64d370e,0xcb80003,0x64d390f,
-	0xc7f3440,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,0x60d391b,0x6bfffc9,
-	0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,0x80d3601,
-	0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,0x80d3604,
-	0x80d3605,0x80d3606,0x80d360f,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,
-	0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,
-	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,
-	0x7800309,0xb40b248,0x700029a,0x400128a,0x700028e,0x961068e,0x400128a,0x700029b,
-	0x400128a,0x700028f,0xc7f25c0,0x96106cf,0x908c210,0x7800289,0x2409248,0x5402249,
-	0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
-	0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,
-	0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e30e,
-	0x780028f,0x54033cf,0x200e3ce,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
-	0x908c210,0x7800309,0xb830248,0x4001208,0x920c210,0x7800349,0xb82c248,0x6800008,
-	0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
-	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
-	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
-	0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80ac009,0x8007801,
-	0xc7f1040,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,
-	0x200e30e,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0xc7fe1c0,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,
-	0x64d4d14,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x64d3510,0x908c250,0xa62c009,
-	0x60d391b,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6800009,
-	0x6c00009,0x60d3a09,0x80d5201,0x80d3607,0x80d3601,0x80d3608,0x80d3609,0x80d3604,
-	0x80d3605,0x80d3606,0x80d360f,0x908c210,0xaa10008,0x680bfca,0xc000ec0,0x4401208,
-	0x908c210,0x7800309,0xb82b248,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
-	0x64d3609,0xa6ec009,0x0000000,0x920c290,0x7800349,0xb80c24a,0x0000000,0x64d5309,
-	0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fe040,
-	0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,
-	0xc000e40,0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001740,0x680c00a,0x60d4a1d,
-	0x60d4b1e,0x60d4c1f,0x60d4d20,0xc780280,0x680c28a,0x401528a,0x908c210,0x4002208,
-	0x78002c9,0xb004248,0xc0009c0,0x908c450,0x680c50a,0xc001340,0x0000000,0xc7ef280,
-	0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,
-	0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,
-	0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,
-	0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,
-	0x7400294,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x540434f,0x54023cf,0x200f34f,
-	0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x7c00291,0x4018251,
-	0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,0x200e30e,0x200e20e,
-	0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,
-	0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,
-	0xcc00000,0x0000000,0x40006dc,0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,
-	0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,
-	0x9610789,0x400128a,0x700029f,0x400128a,0x7000289,0x96107c9,0x400128a,0x70002a0,
-	0x400128a,0x7000289,0xcc00000,0x9610809,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,
-	0x0000000,0xc7ed800,0x0000000,0xcb80004,0x64f1f08,0x9361248,0xaa10009,0x9042248,
-	0xc7ed640,0x0000000,0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,
-	0x7800309,0xb806248,0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x7c00088,
-	0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,
-	0xa60c008,0x60f4108,0x980a54a,0x980a7ca,0x60f1f0a,0xc7ecf00,0x0000000,0x64f4b08,
-	0x9384248,0xaa10009,0x64f4a08,0xc7ecd80,0x0000000,0x920c248,0x780034a,0xb408289,
-	0x4001249,0x960c209,0x60f4a08,0x6800048,0x7800309,0x948c209,0x60f4b08,0xc7eca80,
-	0x0000000,0x64ac10c,0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,
-	0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000a00,0x0000000,
-	0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,
-	0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
-	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a30a,0x609440a,
-	0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,0xc0005c0,0x0000000,
-	0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,0x683ffc9,0x649090a,
-	0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,
-	0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,
-	0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000
-};
-
-
-
-
-                   
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump.h b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump.h
new file mode 100755
index 000000000000..a9c1afa9708f
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump.h
@@ -0,0 +1,302 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000980,0x0000000,0xc018440,0x0000000,
+	0xc000e40,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7a4dc0,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc7967c0,0x0000000,0xc780980,0x0000000,0xc78d780,0x64d3008,0xc796800,0x0000000,
+	0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,0x0000000,0x64ac808,
+	0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,0x64ac708,
+	0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c01008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,
+	0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,0x64ac008,0xaa0c048,
+	0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,0x0000000,0x80d5c00,
+	0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,0x7c00ac9,0x7c00b09,
+	0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,0x7c00889,0x7c008c9,
+	0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785380,0xa6080c8,0xc782e00,0xa608348,
+	0xc797f80,0xa608388,0xc79ac00,0xc789cc0,0x0000000,0xc07ee80,0x0000000,0x6bc0008,
+	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
+	0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,
+	0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,0x80d2100,0x7800148,
+	0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,0x4404208,0xc07eb00,
+	0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,
+	0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x9004248,
+	0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,0x5801249,0x80d1f30,
+	0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,0xc07e140,0x60d2109,
+	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc788840,0x8007801,0xc07da00,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,0x80d1f20,0xc07d900,
+	0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,
+	0xc008080,0x441a208,0xc07d640,0x60d2108,0xc007f80,0x6800008,0xc07d540,0x60d2108,
+	0xc07d4c0,0x80d2100,0x80d1f30,0x80d5501,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,
+	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
+	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0xc787400,0x8007801,
+	0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,0x9210289,0x400f28a,
+	0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,0xc014000,0x0000000,
+	0x6498e08,0x9c08788,0x6098e08,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,
+	0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,
+	0xc014480,0x0000000,0xc013a80,0x0000000,0xc07bcc0,0x0000000,0x64f4908,0x9c08048,
+	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,
+	0xc07bac0,0x60d2108,0xc07ba40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,
+	0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07b180,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af00,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc005540,0x2408248,0xc07ab00,
+	0x60d2108,0x80d3d00,0xc07aa40,0x80d2100,0x80d5500,0xc07a980,0x80d2100,0xc07a900,
+	0x80d2100,0x64acd08,0x60f4208,0xc0053c0,0x0000000,0x680e703,0x6817204,0x80d300f,
+	0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,
+	0x60d0008,0x64acf08,0x60f4808,0x6800289,0x7801008,0x9485248,0x60f4009,0x80ac005,
+	0xc784b80,0x8030502,0xc012640,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc0119c0,
+	0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,
+	0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc011f00,0x0000000,
+	0xc011500,0x0000000,0xc079740,0x0000000,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
+	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,0x8098000,
+	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
+	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,
+	0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,
+	0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,0x9808008,
+	0x60f4908,0x7801009,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,0x9808788,
+	0x9808748,0x9808688,0x9808648,0x9808608,0x9c08288,0x9c08248,0x98081c8,0x9808088,
+	0x9808048,0x60f4908,0x4801249,0xaa10049,0x0000000,0xc7810c0,0x0000000,0x6800c08,
+	0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800008,0x6800009,
+	0x9508209,0x680c0c8,0x6c00008,0x60f5808,0x6800388,0x6800489,0x9508209,0x6800149,
+	0x9604209,0x68000c9,0x9684209,0x6800109,0x9704209,0x6800089,0x9704209,0x60f5a08,
+	0x6800008,0x6800009,0x9508209,0x6800809,0x9608209,0x6801409,0x9708209,0x60f5b08,
+	0x6800608,0x6801409,0x9508209,0x6800809,0x9608209,0x6801809,0x9708209,0x60f5d08,
+	0x68000c8,0x6801809,0x948c209,0x6800449,0x9607209,0x6800009,0x96e1209,0x6800c09,
+	0x9708209,0x60f5e08,0x68000c8,0x6800009,0x9461209,0x6800049,0x9481209,0x6800009,
+	0x94a2209,0x6803009,0x950c209,0x6801c09,0x968c209,0x60f5f08,0xc780380,0x0000000,
+	0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800c08,
+	0x6801009,0x9508209,0x680c0c8,0x6c0c0c8,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077140,0x60d2108,
+	0xc0770c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
+	0xc076ec0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x80d1f20,0x64ad209,0x9008209,0x7c00e48,0x9108209,0x7c00e08,
+	0xc013880,0x7c005c8,0x60f1d0b,0x6800015,0x64ad308,0x9008248,0x7c00c09,0x9108248,
+	0x7c00c49,0x9208248,0x7c00c89,0x9308248,0x7c00cc9,0x64ad408,0x9008248,0x7c00d09,
+	0x9108248,0x7c00d49,0x9208248,0x7c00d89,0x9308248,0x7c00dc9,0xc013300,0x7800e08,
+	0x60f1d0b,0x780034a,0x960f24a,0x60f1e09,0x7800049,0xc000b40,0x2408248,0xc076100,
+	0x60d2108,0x80d3d00,0x80d5300,0xc076000,0x80d2101,0x80d5501,0x6803fc8,0x6ffffc8,
+	0x60f4208,0xc001900,0x0000000,0x68119c3,0x6817fc4,0x6800008,0x6c00448,0x60d3008,
+	0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,
+	0x9808048,0x9808088,0x98080c8,0x9808188,0x9808148,0x98081c8,0x60d0008,0x6800048,
+	0x7800309,0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,
+	0xc7f5000,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
+	0xcc00000,0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,
+	0x680000b,0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,
+	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,
+	0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,
+	0x680800d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,
+	0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,
+	0x60d3919,0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,
+	0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800019,0x6c00019,
+	0x4000699,0x6800009,0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,
+	0x740039b,0x400138e,0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,
+	0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,
+	0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,
+	0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,
+	0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,
+	0x60d4d1e,0x60d4a1b,0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,
+	0xcc00000,0x0000000,0x680000e,0xa817388,0x64d370e,0x4000216,0x64d5c16,0x2408216,
+	0x7c00408,0x4000217,0x64d5d17,0x2408217,0x7c00448,0x64d3e25,0x9104965,0x64d3b23,
+	0x64d3c24,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,
+	0xcb80003,0x64d390f,0xc7f2380,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,
+	0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,
+	0xaa1c249,0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,
+	0x80d3603,0x80d3604,0x80d3605,0x80d3606,0x80d360f,0xc013040,0x0000000,0xc013c00,
+	0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,
+	0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,
+	0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,
+	0xc7f1400,0x961064f,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,
+	0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,
+	0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb848248,0x4001208,0x920c210,0x7800349,
+	0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa43d288,
+	0x6800008,0xc010480,0x0000000,0x80ac00d,0xc7f0500,0x8030502,0x80d3000,0x80d1f30,
+	0x6bc0008,0x60d1f08,0x7800308,0x5401208,0x6804009,0x2009248,0x680000a,0x740024a,
+	0x4001249,0x740024a,0xc011b40,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
+	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
+	0xc008880,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,
+	0x80d3300,0x80ac009,0xc7ef780,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,
+	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
+	0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fdac0,0x680c00a,0x64d4a11,
+	0x64d4b12,0x64d4c13,0x64d4d14,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x78006c9,
+	0xa62c009,0x60d3919,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
+	0x6800009,0x6c00009,0x60d3a09,0x80d3607,0x80d3601,0x80d3608,0x64d340a,0x91c128a,
+	0xaaf800a,0x80d4800,0x64d3533,0x64d4923,0x64d4924,0x64d4925,0x64d4926,0x64d4927,
+	0x64d4928,0x64d4929,0x64d492a,0x64d492b,0x64d492c,0x64d492d,0x64d492e,0x64d492f,
+	0x64d4930,0x64d4931,0x64d4932,0x80d5201,0x80d3609,0x80d3604,0x6800008,0x7c00748,
+	0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,
+	0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,
+	0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800448,0x7800649,
+	0x680000a,0xa436289,0x78006c9,0x780030a,0xb433289,0x7800c09,0xb819248,0x78005cb,
+	0x7800e4c,0xb42e30b,0x7800c49,0x40012cb,0xb40c30b,0xb80b248,0x7800c89,0x40012cb,
+	0xb40830b,0xb807248,0x7800cc9,0x40012cb,0xb40430b,0xb803248,0x0000000,0x40012cb,
+	0x78005cc,0x240a30b,0x540128a,0xc009c80,0x440128a,0xc780980,0x0000000,0x7800e0c,
+	0xb01730b,0x7800d09,0xac0f248,0x7800d49,0x44012cb,0xb00c30b,0xac0b248,0x7800d89,
+	0x44012cb,0xb00830b,0xac07248,0x7800dc9,0x44012cb,0xb00430b,0xac03248,0x0000000,
+	0x44012cb,0x78005cc,0x240a2cc,0xc009680,0x540128a,0xc780380,0x0000000,0xaa2c015,
+	0x0000000,0x64d3e08,0x9008208,0xaaf7fc8,0xa618008,0x78005c8,0x2408548,0xc00a4c0,
+	0x7c005c8,0x60f1d0b,0x6800015,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,
+	0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,
+	0x7c00749,0x80d3606,0x80d360f,0xc00dac0,0x0000000,0xc00f1c0,0x0000000,0x78006c8,
+	0xaa10008,0x680bfca,0xc001180,0x4401208,0x78006c8,0x7800309,0xb836248,0x0000000,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,
+	0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,
+	0xa410289,0xc00c900,0x0000000,0x80ac00e,0xc7ebf00,0x8030502,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fb800,0x0000000,
+	0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,
+	0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001840,0x680c00a,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0x60d4d1e,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,
+	0xb004248,0xc0009c0,0x78006d1,0x680c50a,0xc001440,0x0000000,0xc7eb480,0x0000000,
+	0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,
+	0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,
+	0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,
+	0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,0x780028f,
+	0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
+	0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,
+	0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
+	0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,0x400128a,
+	0x7000289,0x9610689,0x400128a,0x700029b,0x400128a,0x7000289,0x96106c9,0x400128a,
+	0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,
+	0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,0xcc00000,0x9610789,0x64d1602,
+	0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e9900,0x0000000,0xcb80004,0x64f1f08,
+	0x9361248,0xaa10009,0x9042248,0xc7e9740,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,
+	0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb812248,
+	0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,
+	0x64ad50b,0x90102cb,0xa4072cc,0x0000000,0x64f010a,0x980a20a,0x60f010a,0xc7e9040,
+	0x0000000,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,
+	0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,0x7800248,
+	0xaa0c008,0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7e8ac0,0x0000000,0x64f4b08,
+	0x9384248,0xaa10009,0x64f4a08,0xc7e8940,0x0000000,0x920c248,0x780034a,0xb40e289,
+	0x4001249,0x64d330a,0x910828a,0x240b289,0x64ad50a,0x921028a,0xa80728b,0x5410209,
+	0x60f4a08,0x6800048,0x7800309,0x948c209,0x60f4b08,0xc7e84c0,0x0000000,0x64ac11f,
+	0x80ac102,0x80ac200,0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,
+	0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,
+	0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,
+	0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
+	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,
+	0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,
+	0xcc00000,0x0000000,0xc000600,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,
+	0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,
+	0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,
+	0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,
+	0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x6490b08,0x9808008,
+	0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x64f4908,0x9c08048,0x60f4908,
+	0x6401108,0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,
+	0x6001008,0x80f4209,0x64f4308,0x9808088,0x60f4308,0x9808048,0x9c08088,0x98080c8,
+	0x60f4308,0x64f1508,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9c08448,0x9c08488,
+	0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808508,0x98084c8,
+	0x9808748,0x9808488,0x9808448,0x9808348,0x9808308,0x9c08248,0x9c08008,0x60f1508,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,
+	0xaa0c048,0x6a10408,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,
+	0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc066140,0x60d2108,
+	0xc0660c0,0x80d2107,0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
+	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
+	0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc065b00,
+	0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x7800248,0xa610008,0x78001c8,0xc065800,0x60d2108,0x7800108,0x7800209,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,
+	0x80d1f20,0x64f1c08,0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc002300,0x9206208,
+	0x60f1c0b,0x64ad008,0x9206208,0x7800049,0xc06fb80,0x2408248,0xc065140,0x60d2108,
+	0xc0650c0,0x80d2100,0x80d5500,0xc065000,0x80d2100,0xc064f80,0x80d2100,0xc06fac0,
+	0x0000000,0x680e703,0x6817204,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,
+	0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,
+	0x9c08048,0x60d0008,0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,
+	0xc7ef180,0x8030502,0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,
+	0x6090b08,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,
+	0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x64d3308,0x9108248,
+	0x960c209,0x6800009,0x9504209,0xc7eab40,0x60f4a08,0x400030a,0x400034b,0xc0010c0,
+	0x400020b,0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,
+	0xae24049,0x80f2308,0x78005c8,0x2408548,0xc000d80,0x7c005c8,0x60f1d0b,0xcc00000,
+	0x6800015,0x64f2408,0x91e2208,0xaa1c048,0xaad0015,0x4401249,0xa613fce,0x64d3e08,
+	0xc7ffc00,0x9008388,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xa6f7fc8,0x0000000,
+	0x60f1d0b,0x7800a08,0xaa4c288,0xaa48015,0x64d3e08,0x9008208,0xa63c008,0x78005c8,
+	0x2408548,0x7c005c8,0x6800015,0x240820d,0xaa24008,0x680000c,0xba14008,0x6800009,
+	0x5401208,0xc780100,0x4401308,0x240c209,0x540130c,0x64d3508,0x908c208,0x4001208,
+	0x7800309,0xb003248,0x0000000,0x6800008,0x7c00688,0x7c0064c,0x78005c8,0x241520d,
+	0xcc00000,0x7c005cd,0x5401248,0x2009209,0x681e1ca,0x2009289,0xcb80009,0x680000b,
+	0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,
+	0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,
+	0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,
+	0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,
+	0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,
+	0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,
+	0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,
+	0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,
+	0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,
+	0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,
+	0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,
+	0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,
+	0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,
+	0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,
+	0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,
+	0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,
+	0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,
+	0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,
+	0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,
+	0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc078d00,0x0000000,
+	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
+	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x7800709,
+	0x4001249,0x780030a,0x400128a,0xe00024a,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,
+	0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,
+	0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,
+	0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc077cc0,
+	0x0000000,0x80d3000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x78006c8,0xa60c008,
+	0x4401208,0x7800308,0x5401208,0x6804009,0x2009248,0x780040a,0x700024b,0x948c2ca,
+	0x740024b,0x4001249,0x780044a,0x740024a,0x78006c8,0xaa0c008,0xcc00000,0x0000000,
+	0x7800708,0xaaf4008,0x0000000,0xc000100,0x0000000,0xcc00000,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,0x5401249,
+	0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,0x6a04008,
+	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,
+	0x5401248,0x680400a,0x2009289,0x7400265,0x483f208,0x5402208,0x6808009,0x2009248,
+	0x7400263,0x4001249,0x92108e3,0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,
+	0x7400264,0x4001249,0x78006c8,0x7800309,0xb405248,0x483f208,0xaa0cfc8,0xcc00000,
+	0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,0x6035108,0x6804009,
+	0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,0x680400a,0x2009289,
+	0x7400273,0x4807208,0x5405208,0x6808009,0x2009248,0x7400263,0x4001249,0x92108e3,
+	0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,0x4001249,0x7400265,
+	0x4001249,0x9210965,0x7400265,0x4001249,0x7400266,0x4001249,0x92109a6,0x7400266,
+	0x4001249,0x7400267,0x4001249,0x92109e7,0x7400267,0x4001249,0x7400268,0x4001249,
+	0x9210a28,0x7400268,0x4001249,0x7400269,0x4001249,0x9210a69,0x7400269,0x4001249,
+	0x740026a,0x4001249,0x9210aaa,0x740026a,0x4001249,0x740026b,0x4001249,0x9210aeb,
+	0x740026b,0x4001249,0x740026c,0x4001249,0x9210b2c,0x740026c,0x4001249,0x740026d,
+	0x4001249,0x9210b6d,0x740026d,0x4001249,0x740026e,0x4001249,0x9210bae,0x740026e,
+	0x4001249,0x740026f,0x4001249,0x9210bef,0x740026f,0x4001249,0x7400270,0x4001249,
+	0x9210c30,0x7400270,0x4001249,0x7400271,0x4001249,0x9210c71,0x7400271,0x4001249,
+	0x7400272,0x4001249,0x9210cb2,0x7400272,0x4001249,0x78006c8,0x7800309,0xb405248,
+	0x4807208,0xaa0c1c8,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x64ad708,0x6035108,0x6804009,0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,
+	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x6432434,
+	0xaa0c034,0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,
+	0x0000000,0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump_dblk.h b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump_dblk.h
new file mode 100755
index 000000000000..419d5a444fe0
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_dump_dblk.h
@@ -0,0 +1,300 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000980,0x0000000,0xc0181c0,0x0000000,
+	0xc000e40,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7a4980,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc796540,0x0000000,0xc780980,0x0000000,0xc78d500,0x64d3008,0xc796580,0x0000000,
+	0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,0x0000000,0x64ac808,
+	0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,0x64ac708,
+	0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c01008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,
+	0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,0x64ac008,0xaa0c048,
+	0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,0x0000000,0x80d5c00,
+	0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,0x7c00ac9,0x7c00b09,
+	0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,0x7c00889,0x7c008c9,
+	0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc7851c0,0xa6080c8,0xc782e00,0xa608348,
+	0xc797d00,0xa608388,0xc79a7c0,0xc789a40,0x0000000,0xc07ee80,0x0000000,0x6bc0008,
+	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
+	0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,
+	0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,0x80d2100,0x7800148,
+	0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,0x4404208,0xc07eb00,
+	0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,
+	0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x9004248,
+	0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,0x5801249,0x80d1f30,
+	0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,0xc07e140,0x60d2109,
+	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc7885c0,0x8007801,0xc07da00,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,0x80d1f20,0xc07d900,
+	0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,
+	0xc007e00,0x441a208,0xc07d640,0x60d2108,0xc007d00,0x6800008,0xc07d540,0x60d2108,
+	0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,
+	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
+	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0xc787180,0x8007801,
+	0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,0x9210289,0x400f28a,
+	0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,0xc013d80,0x0000000,
+	0x6498e08,0x9c08788,0x6098e08,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,
+	0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,
+	0xc014200,0x0000000,0xc013800,0x0000000,0xc07bcc0,0x0000000,0x64f4908,0x9c08048,
+	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,
+	0xc07bac0,0x60d2108,0xc07ba40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,
+	0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07b180,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af00,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc0052c0,0x2408248,0xc07ab00,
+	0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc005300,0x0000000,0x680e483,0x6816f84,
+	0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,
+	0x9c081c8,0x60d0008,0x64acf08,0x60f4808,0x6800289,0x7801008,0x9485248,0x60f4009,
+	0x80ac005,0xc784ac0,0x8030502,0xc012580,0x0000000,0x64f4008,0x9c08048,0x60f4008,
+	0xc011900,0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,
+	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc011e40,
+	0x0000000,0xc011440,0x0000000,0xc079900,0x0000000,0x64d3109,0x9010209,0x400f208,
+	0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
+	0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,
+	0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,
+	0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,
+	0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,
+	0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,
+	0x9808008,0x60f4908,0x7801009,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,
+	0x9808788,0x9808748,0x9808688,0x9808648,0x9808608,0x9c08288,0x9c08248,0x98081c8,
+	0x9808088,0x9808048,0x60f4908,0x4801249,0xaa10049,0x0000000,0xc7810c0,0x0000000,
+	0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800008,
+	0x6800009,0x9508209,0x680c0c8,0x6c00008,0x60f5808,0x6800388,0x6800489,0x9508209,
+	0x6800149,0x9604209,0x68000c9,0x9684209,0x6800109,0x9704209,0x6800089,0x9704209,
+	0x60f5a08,0x6800008,0x6800009,0x9508209,0x6800809,0x9608209,0x6801409,0x9708209,
+	0x60f5b08,0x6800608,0x6801409,0x9508209,0x6800809,0x9608209,0x6801809,0x9708209,
+	0x60f5d08,0x68000c8,0x6801809,0x948c209,0x6800449,0x9607209,0x6800009,0x96e1209,
+	0x6800c09,0x9708209,0x60f5e08,0x68000c8,0x6800009,0x9461209,0x6800049,0x9481209,
+	0x6800009,0x94a2209,0x6803009,0x950c209,0x6801c09,0x968c209,0x60f5f08,0xc780380,
+	0x0000000,0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,
+	0x6800c08,0x6801009,0x9508209,0x680c0c8,0x6c0c0c8,0x6bc0008,0x60d1f08,0x64d1e08,
+	0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,
+	0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077300,
+	0x60d2108,0xc077280,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,
+	0x60d3208,0xc077080,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64ad209,0x9008209,0x7c00e48,0x9108209,
+	0x7c00e08,0xc013600,0x7c005c8,0x60f1d0b,0x6800015,0x64ad308,0x9008248,0x7c00c09,
+	0x9108248,0x7c00c49,0x9208248,0x7c00c89,0x9308248,0x7c00cc9,0x64ad408,0x9008248,
+	0x7c00d09,0x9108248,0x7c00d49,0x9208248,0x7c00d89,0x9308248,0x7c00dc9,0xc013080,
+	0x7800e08,0x60f1d0b,0x780034a,0x960f24a,0x60f1e09,0x7800049,0xc000a80,0x2408248,
+	0xc0762c0,0x60d2108,0x80d3d00,0x80d5300,0x6803fc8,0x6ffffc8,0x60f4208,0xc001900,
+	0x0000000,0x6811743,0x6817d44,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9c08008,
+	0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,0x9808048,0x9808088,
+	0x98080c8,0x9808188,0x9808148,0x98081c8,0x60d0008,0x6800048,0x7800309,0x948c209,
+	0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,0xc7f5280,0x6030408,
+	0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,
+	0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,0x680000b,0x680c00e,
+	0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,0x400138e,0x740038b,
+	0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffc00,
+	0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,
+	0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,0x60d3919,0x60d3818,
+	0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,0x6d0001c,0x6a0001d,
+	0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800019,0x6c00019,0x4000699,0x6800009,
+	0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
+	0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,
+	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
+	0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,
+	0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,
+	0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,
+	0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,
+	0x680000e,0xa817388,0x64d370e,0x4000216,0x64d5c16,0x2408216,0x7c00408,0x4000217,
+	0x64d5d17,0x2408217,0x7c00448,0x64d3e25,0x9104965,0x64d3b23,0x64d3c24,0x64d3508,
+	0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,0xcb80003,0x64d390f,
+	0xc7f2600,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,0x60d3919,0x6bfffc9,
+	0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,0x80d3601,
+	0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,0x80d3604,
+	0x80d3605,0x80d3606,0x80d360f,0xc012e80,0x0000000,0xc013a40,0x0000000,0x908c210,
+	0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,
+	0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,
+	0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,0x7000298,0x400128a,
+	0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,0xc7f1680,0x961064f,
+	0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,
+	0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,
+	0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,0x200e3ce,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
+	0x908c210,0x7800309,0xb848248,0x4001208,0x920c210,0x7800349,0xb40e248,0x64d330a,
+	0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa43d288,0x6800008,0xc0102c0,
+	0x0000000,0x80ac00d,0xc7f0780,0x8030502,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,
+	0x7800308,0x5401208,0x6804009,0x2009248,0x680000a,0x740024a,0x4001249,0x740024a,
+	0xc011980,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,
+	0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0xc008880,0x0000000,
+	0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80d3300,0x80ac009,
+	0xc7efa00,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,
+	0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0xc7fdac0,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,
+	0x64d4d14,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x78006c9,0xa62c009,0x60d3919,
+	0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6800009,0x6c00009,
+	0x60d3a09,0x80d3607,0x80d3601,0x80d3608,0x64d340a,0x91c128a,0xaaf800a,0x80d4800,
+	0x64d3533,0x64d4923,0x64d4924,0x64d4925,0x64d4926,0x64d4927,0x64d4928,0x64d4929,
+	0x64d492a,0x64d492b,0x64d492c,0x64d492d,0x64d492e,0x64d492f,0x64d4930,0x64d4931,
+	0x64d4932,0x80d5201,0x80d3609,0x80d3604,0x6800008,0x7c00748,0x7800648,0xaa3c008,
+	0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,0x6800009,
+	0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,0x7800748,
+	0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800448,0x7800649,0x680000a,0xa436289,
+	0x78006c9,0x780030a,0xb433289,0x7800c09,0xb819248,0x78005cb,0x7800e4c,0xb42e30b,
+	0x7800c49,0x40012cb,0xb40c30b,0xb80b248,0x7800c89,0x40012cb,0xb40830b,0xb807248,
+	0x7800cc9,0x40012cb,0xb40430b,0xb803248,0x0000000,0x40012cb,0x78005cc,0x240a30b,
+	0x540128a,0xc009ac0,0x440128a,0xc780980,0x0000000,0x7800e0c,0xb01730b,0x7800d09,
+	0xac0f248,0x7800d49,0x44012cb,0xb00c30b,0xac0b248,0x7800d89,0x44012cb,0xb00830b,
+	0xac07248,0x7800dc9,0x44012cb,0xb00430b,0xac03248,0x0000000,0x44012cb,0x78005cc,
+	0x240a2cc,0xc0094c0,0x540128a,0xc780380,0x0000000,0xaa2c015,0x0000000,0x64d3e08,
+	0x9008208,0xaaf7fc8,0xa618008,0x78005c8,0x2408548,0xc00a300,0x7c005c8,0x60f1d0b,
+	0x6800015,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
+	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
+	0x80d360f,0xc00d900,0x0000000,0xc00f000,0x0000000,0x78006c8,0xaa10008,0x680bfca,
+	0xc001180,0x4401208,0x78006c8,0x7800309,0xb836248,0x0000000,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,0x780034a,0xb40d289,
+	0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,0xa410289,0xc00c740,
+	0x0000000,0x80ac00e,0xc7ec180,0x8030502,0x64d5309,0xaa1c009,0x0000000,0x60d2109,
+	0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fb800,0x0000000,0x64d390f,0x64d4a11,
+	0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,0x6800011,0x6a00014,
+	0x6d00014,0x60d4d14,0xc001840,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,
+	0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,0xb004248,0xc0009c0,
+	0x78006d1,0x680c50a,0xc001440,0x0000000,0xc7eb700,0x0000000,0x7800289,0x240a248,
+	0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,
+	0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,0x400128a,0x7400292,
+	0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,0x58104d3,0x7400293,
+	0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,0x643500e,0x580f38e,
+	0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x540434f,0x54023cf,
+	0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x7c00291,
+	0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,0x200e7ce,
+	0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,
+	0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,
+	0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,0x400128a,0x7000289,0x9610689,
+	0x400128a,0x700029b,0x400128a,0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,
+	0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,
+	0x700029e,0x400128a,0x7000289,0xcc00000,0x9610789,0x64d1602,0x9162082,0xaa0c002,
+	0xc7fff40,0x0000000,0xc7e9b80,0x0000000,0xcb80004,0x64f1f08,0x9361248,0xaa10009,
+	0x9042248,0xc7e99c0,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,
+	0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb812248,0x4001208,0x6800008,
+	0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,
+	0xa4072cc,0x0000000,0x64f010a,0x980a20a,0x60f010a,0xc7e92c0,0x0000000,0x7c00088,
+	0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,
+	0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,0x7800248,0xaa0c008,0x0000000,
+	0x980a54a,0x980a7ca,0x60f1f0a,0xc7e8d40,0x0000000,0x64f4b08,0x9384248,0xaa10009,
+	0x64f4a08,0xc7e8bc0,0x0000000,0x920c248,0x780034a,0xb40e289,0x4001249,0x64d330a,
+	0x910828a,0x240b289,0x64ad50a,0x921028a,0xa80728b,0x5410209,0x60f4a08,0x6800048,
+	0x7800309,0x948c209,0x60f4b08,0xc7e8740,0x0000000,0x64ac11f,0x80ac102,0x80ac200,
+	0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,
+	0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,
+	0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,
+	0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,
+	0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,
+	0x200a7ca,0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,
+	0xc000600,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,
+	0x0000000,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,
+	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,
+	0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,
+	0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x6490b08,0x9808008,0x98080c8,0x6090b08,
+	0x9c08008,0x9c080c8,0x6090b08,0x64f4908,0x9c08048,0x60f4908,0x6401108,0x9c08748,
+	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x80f4209,
+	0x64f4308,0x9808088,0x60f4308,0x9808048,0x9c08088,0x98080c8,0x60f4308,0x64f1508,
+	0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9c08448,0x9c08488,0x9c08348,0x9c08308,
+	0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808508,0x98084c8,0x9808748,0x9808488,
+	0x9808448,0x9808348,0x9808308,0x9c08248,0x9c08008,0x60f1508,0x6490b08,0x9c08608,
+	0x9c08648,0x6090b08,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
+	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,
+	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
+	0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc0663c0,0x60d2108,0xc066340,0x80d2107,
+	0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc065d80,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,
+	0x78001c8,0xc065a80,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,
+	0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc002140,0x9206208,0x60f1c0b,0x64ad008,
+	0x9206208,0x7800049,0xc06fb80,0x2408248,0xc0653c0,0x60d2108,0xc06fc80,0x0000000,
+	0x680e483,0x6816f84,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,
+	0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,
+	0x60d0008,0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7ef340,
+	0x8030502,0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,
+	0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,0x6001108,
+	0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x64d3308,0x9108248,0x960c209,
+	0x6800009,0x9504209,0xc7eadc0,0x60f4a08,0x400030a,0x400034b,0xc0010c0,0x400020b,
+	0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae24049,
+	0x80f2308,0x78005c8,0x2408548,0xc000d80,0x7c005c8,0x60f1d0b,0xcc00000,0x6800015,
+	0x64f2408,0x91e2208,0xaa1c048,0xaad0015,0x4401249,0xa613fce,0x64d3e08,0xc7ffc00,
+	0x9008388,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xa6f7fc8,0x0000000,0x60f1d0b,
+	0x7800a08,0xaa4c288,0xaa48015,0x64d3e08,0x9008208,0xa63c008,0x78005c8,0x2408548,
+	0x7c005c8,0x6800015,0x240820d,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,
+	0xc780100,0x4401308,0x240c209,0x540130c,0x64d3508,0x908c208,0x4001208,0x7800309,
+	0xb003248,0x0000000,0x6800008,0x7c00688,0x7c0064c,0x78005c8,0x241520d,0xcc00000,
+	0x7c005cd,0x5401248,0x2009209,0x681dd8a,0x2009289,0xcb80009,0x680000b,0xcc00000,
+	0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,0x68c0c0b,
+	0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,0x6c0514b,
+	0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,0xcc00000,
+	0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,0x694544b,
+	0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,0x6c0d34b,
+	0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,0xcc00000,
+	0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,0x684c4cb,
+	0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,0x6c1554b,
+	0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,0xcc00000,
+	0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,0x68d0d0b,
+	0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,0x6c1d74b,
+	0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,0xcc00000,
+	0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,0x68d554b,
+	0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,0x6c2294b,
+	0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,0xcc00000,
+	0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,0x68585cb,
+	0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,0x6c26b4b,
+	0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,0xcc00000,
+	0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,0x68d8e0b,
+	0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc078ec0,0x0000000,0x64f4308,
+	0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,0x9c08448,
+	0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x7800709,0x4001249,
+	0x780030a,0x400128a,0xe00024a,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0xf000280,
+	0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,0x780030b,
+	0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,0x0000000,
+	0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,0x0000000,
+	0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc077e80,0x0000000,
+	0x80d3000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x78006c8,0xa60c008,0x4401208,
+	0x7800308,0x5401208,0x6804009,0x2009248,0x780040a,0x700024b,0x948c2ca,0x740024b,
+	0x4001249,0x780044a,0x740024a,0x78006c8,0xaa0c008,0xcc00000,0x0000000,0x7800708,
+	0xaaf4008,0x0000000,0xc000100,0x0000000,0xcc00000,0x0000000,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,0x5401249,0x401f249,
+	0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,0x6a04008,0x6035008,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,
+	0x680400a,0x2009289,0x7400265,0x483f208,0x5402208,0x6808009,0x2009248,0x7400263,
+	0x4001249,0x92108e3,0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,
+	0x4001249,0x78006c8,0x7800309,0xb405248,0x483f208,0xaa0cfc8,0xcc00000,0x0000000,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,0x6035108,0x6804009,0x6035209,
+	0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,0x680400a,0x2009289,0x7400273,
+	0x4807208,0x5405208,0x6808009,0x2009248,0x7400263,0x4001249,0x92108e3,0x7400263,
+	0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,0x4001249,0x7400265,0x4001249,
+	0x9210965,0x7400265,0x4001249,0x7400266,0x4001249,0x92109a6,0x7400266,0x4001249,
+	0x7400267,0x4001249,0x92109e7,0x7400267,0x4001249,0x7400268,0x4001249,0x9210a28,
+	0x7400268,0x4001249,0x7400269,0x4001249,0x9210a69,0x7400269,0x4001249,0x740026a,
+	0x4001249,0x9210aaa,0x740026a,0x4001249,0x740026b,0x4001249,0x9210aeb,0x740026b,
+	0x4001249,0x740026c,0x4001249,0x9210b2c,0x740026c,0x4001249,0x740026d,0x4001249,
+	0x9210b6d,0x740026d,0x4001249,0x740026e,0x4001249,0x9210bae,0x740026e,0x4001249,
+	0x740026f,0x4001249,0x9210bef,0x740026f,0x4001249,0x7400270,0x4001249,0x9210c30,
+	0x7400270,0x4001249,0x7400271,0x4001249,0x9210c71,0x7400271,0x4001249,0x7400272,
+	0x4001249,0x9210cb2,0x7400272,0x4001249,0x78006c8,0x7800309,0xb405248,0x4807208,
+	0xaa0c1c8,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,
+	0x6035108,0x6804009,0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x6432434,0xaa0c034,
+	0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,0x0000000,
+	0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw.h b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw.h
new file mode 100755
index 000000000000..6f82ae0c4357
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw.h
@@ -0,0 +1,384 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01b980,0x0000000,
+	0xc000ec0,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7af240,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc799cc0,0x0000000,0xc780a00,0x0000000,0xc78c100,0x64d3008,0xc799d00,0x0000000,
+	0xc7ac380,0x0000000,0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,
+	0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,
+	0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,
+	0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,
+	0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,
+	0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,
+	0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,
+	0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,
+	0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785640,0xa6080c8,
+	0xc782e00,0xa608348,0xc79b440,0xa608388,0xc79d500,0xc788440,0x0000000,0xc07ee80,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,
+	0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,
+	0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,
+	0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,
+	0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,
+	0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,
+	0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,
+	0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc786fc0,
+	0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,
+	0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,
+	0x80d1f40,0x7800048,0xc006800,0x441a208,0xc07d640,0x60d2108,0xc006700,0x6800008,
+	0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f30,0x80d5501,0x80d1f20,0x80d1f20,
+	0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
+	0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,
+	0xc785b80,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,
+	0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,
+	0x64f4008,0x9c08048,0x60f4008,0xc017400,0x0000000,0x6498e08,0x9c08788,0x6098e08,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc017a00,
+	0x0000000,0xc017000,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,0x60f4908,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc07bb80,
+	0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,0x9010208,
+	0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
+	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
+	0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af80,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,0x7c00588,
+	0x68002a3,0xc01c900,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,
+	0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc018d80,0x7c005c8,0x60f1c0b,0x7800049,
+	0xc003880,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0xc07a600,0x80d2100,0x80d5500,
+	0xc07a540,0x80d2100,0xc07a4c0,0x80d2100,0x64acd08,0x60f4208,0xc003700,0x0000000,
+	0x680d343,0x681a704,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,
+	0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc783040,0x8030502,0xc015840,
+	0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc014bc0,0x0000000,0x6498e08,0x9808788,
+	0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,
+	0xc0151c0,0x0000000,0xc0147c0,0x0000000,0xc079540,0x0000000,0x64d3109,0x9010209,
+	0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,
+	0x7c00348,0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,
+	0x8098002,0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,
+	0x9c084c8,0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,
+	0x60f1508,0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,
+	0x9808648,0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,
+	0xc078940,0x60d2108,0xc0788c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
+	0x946d209,0x60d3208,0xc0786c0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
+	0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,
+	0x78005c8,0xc780580,0x7c00588,0xc019e80,0x0000000,0x7804009,0x90c1209,0x7c007c8,
+	0x9006209,0x7c00608,0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc016300,0x7c005c8,
+	0x60f1d0b,0x6940009,0x6c00009,0x20097c9,0x60f2009,0x6800009,0x60f1e09,0x7800049,
+	0xc000c80,0x2408248,0xc077ac0,0x60d2108,0x80d3d00,0x80d5300,0xc0779c0,0x80d2101,
+	0x80d5501,0x6803fc8,0x6ffffc8,0x60f4208,0xc001a40,0x0000000,0x6811603,0x681b684,
+	0x64d3308,0x9010208,0xaa14008,0x0000000,0x80ac005,0xc780640,0x8030502,0x6800008,
+	0x6c00448,0x60d3008,0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,
+	0x60d0008,0x9808008,0x9808048,0x9808088,0x98080c8,0x98081c8,0x60d0008,0x6800048,
+	0x7800309,0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,
+	0xc7f6880,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
+	0xcc00000,0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,
+	0x680000b,0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,
+	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,
+	0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,
+	0x680800d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,
+	0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,
+	0x60d3919,0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,
+	0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800023,0x6800028,
+	0x6800029,0x6bfffd8,0x6c00018,0x4000918,0x6800019,0x6c00019,0x4000699,0x6800009,
+	0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
+	0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,
+	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
+	0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,
+	0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,
+	0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,
+	0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,
+	0x680000e,0xa822388,0x64d370e,0x78009c8,0xaa2c008,0xa624048,0x6800008,0x80d3000,
+	0x80d300f,0x64d0009,0x9c09149,0x60d0009,0xc7f3d80,0x7c009c8,0x7c009c8,0xb60c223,
+	0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,
+	0x6800009,0x7c00a49,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,
+	0x7c00709,0xcb80003,0x64d390f,0xc7f37c0,0x0000000,0x60d3718,0x64d3510,0x908c250,
+	0xa620009,0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,
+	0x9004250,0xaa10249,0x80d3601,0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,
+	0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,
+	0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,
+	0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,
+	0x7800649,0x680000a,0xa408289,0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015840,
+	0x0000000,0xc780400,0x78005c9,0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,
+	0x64d3e08,0x9008208,0xaafbfc8,0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,
+	0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
+	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
+	0x80d360f,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
+	0x960f248,0x60f1e09,0xc015d00,0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,
+	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
+	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
+	0xb40d248,0x7800309,0xb40b248,0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,
+	0x7000299,0x400128a,0x700028f,0xc7f15c0,0x961064f,0x908c210,0x7800289,0x2409248,
+	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
+	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
+	0x200e7ce,0x780028f,0x54033cf,0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb83e248,
+	0x4001208,0x920c210,0x7800349,0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,
+	0x64ad50a,0x901028a,0xa433288,0x6800008,0xc011bc0,0x0000000,0x80ac00d,0xc7f06c0,
+	0x8030502,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,
+	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
+	0x0000000,0xc00c180,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,
+	0x7c00208,0x80d3300,0x80ac009,0xc7efbc0,0x8007801,0x7c00288,0x403f248,0x7c002c9,
+	0x5403208,0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
+	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fdd40,0x680c00a,
+	0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,
+	0x60d4d1e,0x60d3718,0x5401a28,0x9402a29,0x6800029,0x78006c9,0xa638009,0x60d3919,
+	0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,
+	0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x7800789,0x680000a,0xa842289,0x7800a89,
+	0x60d2109,0x80d2001,0x80d5300,0x6800009,0x7c00a89,0x7800a09,0x680024a,0xa826289,
+	0x64d3e09,0x9008249,0xbe14809,0x680038a,0xbe0c409,0x680028a,0x680018a,0xa20c3c9,
+	0x0000000,0x400c28a,0x64d3c09,0x9002249,0x200a24a,0x64d2009,0xbefc049,0x0000000,
+	0x60d210a,0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,
+	0x0000000,0x688888b,0x64d3709,0x941024b,0x60d3709,0x64d3809,0x941024b,0x60d3809,
+	0x80d3601,0x0000000,0x60d320a,0xc780d40,0x80d3603,0x64d2009,0xbefc049,0x0000000,
+	0x80d2105,0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,
+	0x0000000,0x80d3601,0x0000000,0x60d320a,0x80d3602,0x80d3603,0xc780880,0x80d3604,
+	0x9004228,0xa60c008,0xc780640,0x80d5201,0x78006c9,0xa224208,0x780030a,0xb807289,
+	0x4807208,0xa614008,0xc018280,0x0000000,0xc7803c0,0x0000000,0xa62c009,0x0000000,
+	0x4c01208,0x64d3209,0x9c09009,0x60d3209,0x6bfffca,0x6c0000a,0x60d380a,0x9809009,
+	0x60d3209,0xc016300,0x0000000,0x80d3607,0x80d3601,0x80d3608,0x80d3609,0x80d3604,
+	0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,
+	0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,
+	0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,
+	0x7800649,0x680000a,0xa40d289,0x7800789,0x78007ca,0xa803289,0xc011780,0x0000000,
+	0x64f1d09,0x9205249,0x780060a,0xa804289,0xc00fe40,0x0000000,0xc7804c0,0x78005c9,
+	0x780058a,0xa810289,0x7800a08,0xaa30288,0x0000000,0x64d3e08,0x9008208,0xaafbfc8,
+	0xa61c008,0x7800588,0x78005c9,0xc010dc0,0x2408209,0xc780100,0x0000000,0x78005c9,
+	0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
+	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
+	0x80d360f,0x78009c9,0x680000a,0xa86a289,0x680004a,0xa446289,0xc010c40,0x681a844,
+	0x64f1509,0x9c09449,0x60f1509,0x9809449,0x60f1509,0x80d3609,0x64d0009,0x9c09049,
+	0x60d0009,0x9809049,0x60d0009,0x6800009,0x780030a,0x946d24a,0x60d3209,0x6800223,
+	0x64d5309,0x7c00a89,0x78006e6,0x7800327,0xb8059e6,0x6bfffe6,0x6c00026,0x60d3826,
+	0x6800018,0x60d3718,0x68888a7,0x64d4e26,0x93e19a6,0x96619e6,0x64d4f26,0x93e19a6,
+	0x96419e6,0x64d5026,0x93e19a6,0x96219e6,0x64d5126,0x93e19a6,0x96019e6,0x60d3827,
+	0x64f1509,0x9c09589,0x60f1509,0xc010700,0x0000000,0x6490b09,0x9c09609,0x9c09649,
+	0x6090b09,0x64f1509,0x9c095c9,0x9c09609,0x9c09649,0x9c096c9,0x9809509,0x98094c9,
+	0x64f1f08,0x9383208,0xa6f8008,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x9809589,0xc780900,0x60f1509,0xc00fb00,0x681b684,0x6800049,0x780030a,0x946d24a,
+	0x60d3209,0x68001e3,0x9829029,0x64d3727,0x92619a7,0x541f9a6,0x60d4e26,0x92419a7,
+	0x541f9a6,0x60d4f26,0x92219a7,0x541f9a6,0x60d5026,0x92019a7,0x541f9a6,0x60d5126,
+	0x6490b09,0x9809609,0x9c09649,0x6090b09,0x64f1509,0x98095c9,0x9809609,0x9809649,
+	0x98096c9,0x9c09509,0x9c094c9,0x9c09749,0x60f1509,0x78007c9,0x7c00789,0x78006c9,
+	0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,
+	0xc00e180,0x0000000,0x78006c8,0xaa10008,0x680bfca,0xc0016c0,0x4401208,0x78006c8,
+	0x7800309,0xb844248,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x7800709,0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,
+	0x2409289,0x64ad50a,0x921028a,0xa410289,0xc00b640,0x0000000,0x80ac00e,0xc7e9ac0,
+	0x8030502,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
+	0x0000000,0xc7f9200,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,
+	0x64d3725,0xb60c223,0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,
+	0xaa0c188,0x6800049,0x6800009,0x7c00a49,0xc000900,0x7800308,0xc001500,0x6800011,
+	0x6a00014,0x6d00014,0x60d4d14,0xc001f00,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,
+	0x60d4d1e,0x9402a29,0x6800029,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,
+	0x78002c9,0xb004248,0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,
+	0xaa18008,0xa614048,0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8b00,0x0000000,
+	0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,
+	0x960f466,0x90109a5,0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,
+	0x92219a5,0x541f4e6,0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,
+	0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,
+	0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,
+	0xcc00000,0x7400294,0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,
+	0x200e7ce,0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,
+	0x603520d,0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,
+	0x2008248,0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
+	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,
+	0x700029a,0x400128a,0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,
+	0x400128a,0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,
+	0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,
+	0x7000289,0x9610789,0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,
+	0x68888a4,0x93e199b,0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,
+	0xcc00000,0x9601926,0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,
+	0x9829069,0xcc00000,0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,
+	0xc7e6480,0x0000000,0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e62c0,
+	0x0000000,0x7800ac9,0xaa10009,0x6800049,0xc7e6180,0x7c00b09,0x93e1248,0xaa10009,
+	0x9042248,0xc7e6040,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,
+	0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,
+	0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,
+	0xa4032cc,0x0000000,0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,
+	0xa403248,0x0000000,0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,
+	0x980a54a,0x980a7ca,0x60f1f0a,0x681a84a,0xa404284,0x680004a,0xc012000,0x7c00aca,
+	0xc7e5480,0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e5300,0x0000000,
+	0x920c248,0x780034a,0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,
+	0x948c209,0x60f4b08,0xc7e5000,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,
+	0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,0x40002ca,
+	0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,
+	0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
+	0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,
+	0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,
+	0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,
+	0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,
+	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,
+	0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,
+	0x440128a,0xcc00000,0x0000000,0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,
+	0xc7e7e00,0x6001008,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
+	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,
+	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
+	0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc063840,0x60d2108,0xc0637c0,0x80d2107,
+	0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc063200,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,
+	0x78001c8,0xc062f00,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,
+	0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc000f80,0x9206208,0x60f1c0b,0x64ad008,
+	0x9206208,0x7800049,0xc06ba00,0x2408248,0xc062840,0x60d2108,0xc0627c0,0x80d2100,
+	0x80d5500,0xc062700,0x80d2100,0xc062680,0x80d2100,0xc06b940,0x0000000,0x680d343,
+	0x681a704,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,
+	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,
+	0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7eb000,0x8030502,
+	0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6498e08,
+	0x9808788,0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,
+	0xc7e8d80,0x6001008,0x5401248,0x2009209,0x681f7ca,0x2009289,0xcb80009,0x680000b,
+	0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,
+	0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,
+	0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,
+	0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,
+	0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,
+	0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,
+	0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,
+	0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,
+	0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,
+	0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,
+	0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,
+	0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,
+	0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,
+	0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,
+	0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,
+	0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,
+	0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,
+	0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,
+	0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,
+	0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc07ac40,0x0000000,
+	0x7800709,0x4001249,0x780030a,0x400128a,0xe00024a,0x80d1f30,0x6bc0008,0x60d1f08,
+	0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,
+	0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,
+	0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc07a000,
+	0x0000000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x7800708,0x7800349,0xb809248,
+	0x6804008,0x6800409,0x680080a,0x740020a,0xd07ffc9,0x4001208,0xcc00000,0x0000000,
+	0x6435008,0x580f208,0xbecc048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,
+	0x5801249,0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,
+	0x6be4008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,
+	0xc07be80,0x7800608,0x64d3e08,0x9008288,0xaafbfca,0x0000000,0x60f1c0b,0x7800a08,
+	0xaa10288,0xa60c00a,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc001500,0x2408248,
+	0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0xc07b940,0x7800608,0x64f1d0a,
+	0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae14049,0x80f2308,
+	0x7800588,0xcc00000,0x7c005c8,0x64f2408,0x91e2208,0xaa18048,0x64d3e08,0x9008388,
+	0xa60ffce,0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xaa17fc8,
+	0x64d3e08,0x9008208,0xaaebfce,0x0000000,0x60f1d0b,0xa60ffce,0x64d3e08,0x9008388,
+	0x7800a08,0xaa10288,0xa60c00e,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc0008c0,
+	0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0x78006c8,0x4001208,
+	0x7800309,0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,0xc07e3c0,0x0000000,
+	0x7804009,0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,0x5801248,0x680400a,
+	0x2009289,0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,0x9006209,0x7c007ca,
+	0xcc00000,0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,0xc780100,
+	0x4401308,0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,0x7800309,0xb003248,
+	0x0000000,0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,0x6800049,0xcc00000,
+	0x7c009c9,0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,0x7c009c9,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x80f2306,0x64f2409,
+	0x90c2249,0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,0x6490b09,0x9809009,
+	0x98090c9,0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,0x0000000,0x6803c0e,
+	0x78006c9,0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,0x400128a,0x950c389,
+	0xa60c009,0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,0x980e58e,0x64d3308,
+	0x9108208,0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,0x7800709,0x5404209,
+	0x64acc0a,0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,0x20262e6,0x20262a6,
+	0x7800709,0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,0x540428a,0xf0002c0,
+	0x20102d0,0x2010290,0x78006ca,0x400128a,0x7800309,0x4001249,0xb80424a,0x7800708,
+	0x4001208,0x240a24a,0x2420289,0x64ac32d,0x5404208,0x64acc09,0x242d26d,0xe000248,
+	0x540428a,0x202d2ad,0xf0002c0,0x202d2ed,0x78006ca,0x400128a,0x7800309,0x4001249,
+	0xb80424a,0x7800708,0x4001208,0x240a24a,0x2422289,0x64ac42e,0x5403208,0x64acc09,
+	0x242e26e,0xe000248,0x540428a,0x202e2ae,0xf0002c0,0x202e2ee,0x694002f,0x6c0002f,
+	0x202f7ef,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,0x5405249,
+	0x202f26f,0xc075980,0x0000000,0x680830a,0x680020c,0x6035126,0x8035208,0x6b0a008,
+	0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,
+	0x6035126,0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x780a1cb,0x95082c9,0x740028b,0xa60c14c,0x0000000,0x440828a,
+	0xd07f94c,0x400128a,0x680800a,0x680010c,0x6035110,0x8035208,0x6b0a008,0x6035008,
+	0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,0x6035110,
+	0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0x780a1cb,0x9008209,0x910834b,0x940824d,0x95082c8,0x740028b,0x400428a,
+	0x7400289,0xd07f8cc,0x440328a,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,
+	0x2409209,0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,0x6035108,0x8035210,
+	0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,
+	0xa6f800d,0x0000000,0xc006180,0x60f1f0e,0x64d3c08,0x9004208,0xaa0c048,0x6800049,
+	0x68000c9,0x7c00b49,0xc004900,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0xc004cc0,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xc005380,0x0000000,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,
+	0x7800b49,0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,
+	0xb220049,0x60f1f0e,0x4401249,0x7c00b49,0xc005700,0x0000000,0xc7ff700,0x4420bef,
+	0xc003f80,0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,
+	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
+	0xc0031c0,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,
+	0x78006c8,0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,
+	0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,
+	0x60d510a,0xc002980,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,
+	0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,
+	0x68fffc9,0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,
+	0xb807289,0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,
+	0x60d5109,0x64d320a,0x69ffe49,0x60d3209,0xc001ec0,0x80d5201,0xcc00000,0x60d320a,
+	0x64d3309,0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,
+	0x64d4a09,0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,
+	0x90612a8,0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,
+	0x60d4c09,0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,
+	0x60d3209,0xc001580,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,
+	0x91e12eb,0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,
+	0x920f289,0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,
+	0xaa2400a,0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,
+	0x960facb,0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,
+	0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,
+	0xc7fd580,0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,
+	0x680002b,0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x60d4a2a,
+	0x60d4b2a,0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,0x60d4e2c,
+	0x60d4f2c,0x60d502c,0x60d512c,0xc000300,0x80d5201,0x64d4a0a,0x60d4a0a,0x60d4b0a,
+	0x60d4c0a,0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x80d5602,
+	0x64d5709,0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,0x8006402,0x7800acf,
+	0xa60c00f,0xc7d3c40,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xa61804f,
+	0x6800088,0xc000a80,0x7c00ac8,0xc7d39c0,0x0000000,0xa61808f,0x68000c8,0xc001140,
+	0x7c00ac8,0xc7d3840,0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,
+	0x7800b09,0xaa0c009,0x7c00ac8,0x8030508,0xc7d3580,0x0000000,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x603512d,0x8035208,0x6b08808,0x6035008,0x4401820,0x4010b6d,
+	0xaa0c020,0xcc00000,0x0000000,0x7800320,0x4001820,0x5404220,0x242d22d,0x64acc08,
+	0x5404208,0xcc00000,0x202d22d,0x603512e,0x8035208,0x6b09008,0x6035008,0x7808908,
+	0x7c08208,0x7808948,0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,
+	0x7c08308,0x7808848,0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0x44018a2,
+	0x4010bae,0xaa0c022,0xcc00000,0x0000000,0x7800322,0x40018a2,0x5404222,0x242e22e,
+	0x64acc08,0x5403208,0xcc00000,0x202e22e,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x6809008,0x680800e,0x6800109,0x700020a,0x90082ca,0x4001208,0x700020c,0x910834c,
+	0x950830b,0x740038c,0x400438e,0x940828d,0x740038a,0x440338e,0xd07fd49,0x4001208,
+	0x6940008,0x6c00008,0x20087c8,0x7800309,0x4001249,0x5405249,0x2008248,0xb80322f,
+	0x0000000,0x242f26f,0x603512f,0x8035210,0x6a08008,0x6035008,0xcc00000,0x4020bef,
+	0x64f1508,0x9c08308,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9808508,0x98084c8,
+	0x60f1508,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
+	0x960f248,0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,0x0000000,0x80d300f,0x80f4003,
+	0x64f1508,0x9808248,0x9c08508,0x9c084c8,0x60f1508,0x64d0009,0x9c09009,0x60d0009,
+	0x9809009,0x60d0009,0x9c08248,0x9808508,0x98084c8,0x9808308,0x60f1508,0xcc00000,
+	0x80f4000,0x6432434,0xaa0c034,0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,
+	0xaa14134,0xaa100f4,0x0000000,0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h
new file mode 100755
index 000000000000..aa5c9471a4c9
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h
@@ -0,0 +1,382 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01b740,0x0000000,
+	0xc000ec0,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7aee40,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc799a80,0x0000000,0xc780a00,0x0000000,0xc78bec0,0x64d3008,0xc799ac0,0x0000000,
+	0xc7abf80,0x0000000,0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,
+	0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,
+	0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,
+	0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,
+	0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,
+	0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,
+	0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,
+	0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,
+	0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785480,0xa6080c8,
+	0xc782e00,0xa608348,0xc79b200,0xa608388,0xc79d100,0xc788200,0x0000000,0xc07ee80,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,
+	0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,
+	0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,
+	0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,
+	0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,
+	0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,
+	0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,
+	0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc786d80,
+	0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,
+	0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,
+	0x80d1f40,0x7800048,0xc0065c0,0x441a208,0xc07d640,0x60d2108,0xc0064c0,0x6800008,
+	0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,
+	0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
+	0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,
+	0xc785940,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,
+	0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,
+	0x64f4008,0x9c08048,0x60f4008,0xc0171c0,0x0000000,0x6498e08,0x9c08788,0x6098e08,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc0177c0,
+	0x0000000,0xc016dc0,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,0x60f4908,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc07bb80,
+	0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,0x9010208,
+	0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
+	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
+	0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af80,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,0x7c00588,
+	0x68002a3,0xc01c500,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,
+	0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc018980,0x7c005c8,0x60f1c0b,0x7800049,
+	0xc003640,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc003680,
+	0x0000000,0x680d103,0x681a4c4,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,
+	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc782fc0,0x8030502,
+	0xc0157c0,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc014b40,0x0000000,0x6498e08,
+	0x9808788,0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,
+	0x6001008,0xc015140,0x0000000,0xc014740,0x0000000,0xc079700,0x0000000,0x64d3109,
+	0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,
+	0x4401208,0x7c00348,0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,
+	0x80f4a00,0x8098002,0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,
+	0x9c08508,0x9c084c8,0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,
+	0x9808008,0x60f1508,0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,
+	0x9808608,0x9808648,0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x6bc0008,
+	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
+	0x6c00408,0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,
+	0x9210208,0xc078b00,0x60d2108,0xc078a80,0x80d2105,0x6800048,0x7c00248,0x60f1b08,
+	0x7800309,0x946d209,0x60d3208,0xc078880,0x80d2100,0x7800148,0x7800189,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,
+	0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64d3308,0x9010208,
+	0xaa10008,0x78005c8,0xc780580,0x7c00588,0xc019c40,0x0000000,0x7804009,0x90c1209,
+	0x7c007c8,0x9006209,0x7c00608,0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc0160c0,
+	0x7c005c8,0x60f1d0b,0x6940009,0x6c00009,0x20097c9,0x60f2009,0x6800009,0x60f1e09,
+	0x7800049,0xc000c00,0x2408248,0xc077c80,0x60d2108,0x80d3d00,0x80d5300,0x80d5501,
+	0x6803fc8,0x6ffffc8,0x60f4208,0xc001a40,0x0000000,0x68113c3,0x681b444,0x64d3308,
+	0x9010208,0xaa14008,0x0000000,0x80ac005,0xc780640,0x8030502,0x6800008,0x6c00448,
+	0x60d3008,0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,
+	0x9808008,0x9808048,0x9808088,0x98080c8,0x98081c8,0x60d0008,0x6800048,0x7800309,
+	0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,0xc7f6ac0,
+	0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,
+	0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,0x680000b,
+	0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,0x400138e,
+	0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,
+	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,
+	0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,
+	0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,0x60d3919,
+	0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,0x6d0001c,
+	0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800023,0x6800028,0x6800029,
+	0x6bfffd8,0x6c00018,0x4000918,0x6800019,0x6c00019,0x4000699,0x6800009,0x680c00e,
+	0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,0x740038a,
+	0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,0x740038a,
+	0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,0x690000e,
+	0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,
+	0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,
+	0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,
+	0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,0x60d4a1b,
+	0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,0x680000e,
+	0xa822388,0x64d370e,0x78009c8,0xaa2c008,0xa624048,0x6800008,0x80d3000,0x80d300f,
+	0x64d0009,0x9c09149,0x60d0009,0xc7f3fc0,0x7c009c8,0x7c009c8,0xb60c223,0x4001223,
+	0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,0x6800009,
+	0x7c00a49,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,
+	0xcb80003,0x64d390f,0xc7f3a00,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,
+	0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,
+	0xaa10249,0x80d3601,0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,0x6800008,
+	0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,
+	0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,
+	0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800649,
+	0x680000a,0xa408289,0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015680,0x0000000,
+	0xc780400,0x78005c9,0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,0x64d3e08,
+	0x9008208,0xaafbfc8,0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,0x7c00589,
+	0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,0x7800749,
+	0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,0x80d360f,
+	0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,
+	0x60f1e09,0xc015b40,0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,
+	0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,
+	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,
+	0x7800309,0xb40b248,0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,0x7000299,
+	0x400128a,0x700028f,0xc7f1800,0x961064f,0x908c210,0x7800289,0x2409248,0x5402249,
+	0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
+	0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,
+	0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e7ce,
+	0x780028f,0x54033cf,0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,
+	0x680400d,0x603520d,0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb83e248,0x4001208,
+	0x920c210,0x7800349,0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,0x64ad50a,
+	0x901028a,0xa433288,0x6800008,0xc011a00,0x0000000,0x80ac00d,0xc7f0900,0x8030502,
+	0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
+	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
+	0xc00c180,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,
+	0x80d3300,0x80ac009,0xc7efe00,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,
+	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
+	0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fdd40,0x680c00a,0x64d4a11,
+	0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,
+	0x60d3718,0x5401a28,0x9402a29,0x6800029,0x78006c9,0xa638009,0x60d3919,0x6a00009,
+	0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,0x60d3809,
+	0x6800009,0x6c00009,0x60d3a09,0x7800789,0x680000a,0xa842289,0x7800a89,0x60d2109,
+	0x80d2001,0x80d5300,0x6800009,0x7c00a89,0x7800a09,0x680024a,0xa826289,0x64d3e09,
+	0x9008249,0xbe14809,0x680038a,0xbe0c409,0x680028a,0x680018a,0xa20c3c9,0x0000000,
+	0x400c28a,0x64d3c09,0x9002249,0x200a24a,0x64d2009,0xbefc049,0x0000000,0x60d210a,
+	0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,
+	0x688888b,0x64d3709,0x941024b,0x60d3709,0x64d3809,0x941024b,0x60d3809,0x80d3601,
+	0x0000000,0x60d320a,0xc780d40,0x80d3603,0x64d2009,0xbefc049,0x0000000,0x80d2105,
+	0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,
+	0x80d3601,0x0000000,0x60d320a,0x80d3602,0x80d3603,0xc780880,0x80d3604,0x9004228,
+	0xa60c008,0xc780640,0x80d5201,0x78006c9,0xa224208,0x780030a,0xb807289,0x4807208,
+	0xa614008,0xc0180c0,0x0000000,0xc7803c0,0x0000000,0xa62c009,0x0000000,0x4c01208,
+	0x64d3209,0x9c09009,0x60d3209,0x6bfffca,0x6c0000a,0x60d380a,0x9809009,0x60d3209,
+	0xc016140,0x0000000,0x80d3607,0x80d3601,0x80d3608,0x80d3609,0x80d3604,0x6800008,
+	0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,
+	0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,
+	0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800649,
+	0x680000a,0xa40d289,0x7800789,0x78007ca,0xa803289,0xc0115c0,0x0000000,0x64f1d09,
+	0x9205249,0x780060a,0xa804289,0xc00fc80,0x0000000,0xc7804c0,0x78005c9,0x780058a,
+	0xa810289,0x7800a08,0xaa30288,0x0000000,0x64d3e08,0x9008208,0xaafbfc8,0xa61c008,
+	0x7800588,0x78005c9,0xc010c00,0x2408209,0xc780100,0x0000000,0x78005c9,0x7c00589,
+	0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,0x7800749,
+	0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,0x80d360f,
+	0x78009c9,0x680000a,0xa86a289,0x680004a,0xa446289,0xc010a80,0x681a604,0x64f1509,
+	0x9c09449,0x60f1509,0x9809449,0x60f1509,0x80d3609,0x64d0009,0x9c09049,0x60d0009,
+	0x9809049,0x60d0009,0x6800009,0x780030a,0x946d24a,0x60d3209,0x6800223,0x64d5309,
+	0x7c00a89,0x78006e6,0x7800327,0xb8059e6,0x6bfffe6,0x6c00026,0x60d3826,0x6800018,
+	0x60d3718,0x68888a7,0x64d4e26,0x93e19a6,0x96619e6,0x64d4f26,0x93e19a6,0x96419e6,
+	0x64d5026,0x93e19a6,0x96219e6,0x64d5126,0x93e19a6,0x96019e6,0x60d3827,0x64f1509,
+	0x9c09589,0x60f1509,0xc010540,0x0000000,0x6490b09,0x9c09609,0x9c09649,0x6090b09,
+	0x64f1509,0x9c095c9,0x9c09609,0x9c09649,0x9c096c9,0x9809509,0x98094c9,0x64f1f08,
+	0x9383208,0xa6f8008,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x9809589,
+	0xc780900,0x60f1509,0xc00f940,0x681b444,0x6800049,0x780030a,0x946d24a,0x60d3209,
+	0x68001e3,0x9829029,0x64d3727,0x92619a7,0x541f9a6,0x60d4e26,0x92419a7,0x541f9a6,
+	0x60d4f26,0x92219a7,0x541f9a6,0x60d5026,0x92019a7,0x541f9a6,0x60d5126,0x6490b09,
+	0x9809609,0x9c09649,0x6090b09,0x64f1509,0x98095c9,0x9809609,0x9809649,0x98096c9,
+	0x9c09509,0x9c094c9,0x9c09749,0x60f1509,0x78007c9,0x7c00789,0x78006c9,0x7800708,
+	0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0xc00dfc0,
+	0x0000000,0x78006c8,0xaa10008,0x680bfca,0xc0016c0,0x4401208,0x78006c8,0x7800309,
+	0xb844248,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
+	0x0000000,0x7800709,0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,
+	0x64ad50a,0x921028a,0xa410289,0xc00b480,0x0000000,0x80ac00e,0xc7e9d00,0x8030502,
+	0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,
+	0xc7f9200,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,
+	0xb60c223,0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,
+	0x6800049,0x6800009,0x7c00a49,0xc000900,0x7800308,0xc001500,0x6800011,0x6a00014,
+	0x6d00014,0x60d4d14,0xc001f00,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,
+	0x9402a29,0x6800029,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,
+	0xb004248,0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,0xaa18008,
+	0xa614048,0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8d40,0x0000000,0x7800289,
+	0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,0x960f466,
+	0x90109a5,0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,0x92219a5,
+	0x541f4e6,0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,0x5810451,
+	0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,
+	0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,
+	0x7400294,0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,
+	0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,
+	0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,
+	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
+	0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,
+	0x400128a,0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,0x400128a,
+	0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,
+	0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,
+	0x9610789,0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,0x68888a4,
+	0x93e199b,0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,0xcc00000,
+	0x9601926,0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,0x9829069,
+	0xcc00000,0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e66c0,
+	0x0000000,0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e6500,0x0000000,
+	0x7800ac9,0xaa10009,0x6800049,0xc7e63c0,0x7c00b09,0x93e1248,0xaa10009,0x9042248,
+	0xc7e6280,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,0xaa0c049,
+	0x680348a,0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,0x78000c9,
+	0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,0xa4032cc,
+	0x0000000,0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,
+	0x0000000,0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,
+	0x980a7ca,0x60f1f0a,0x681a60a,0xa404284,0x680004a,0xc011e40,0x7c00aca,0xc7e56c0,
+	0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e5540,0x0000000,0x920c248,
+	0x780034a,0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,0x948c209,
+	0x60f4b08,0xc7e5240,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,0x6094008,
+	0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,0x0000000,
+	0xcc00000,0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,0x40002ca,0x7800309,
+	0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,0x6c3454a,
+	0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,
+	0x698000a,0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,
+	0x780030a,0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,0x0000000,
+	0x8095003,0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,0x683ffc9,
+	0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,
+	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,
+	0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,
+	0xcc00000,0x0000000,0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,0xc7e8040,
+	0x6001008,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,0x6a19408,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,
+	0x7c000c9,0x60f4109,0x9210208,0xc063a80,0x60d2108,0xc063a00,0x80d2107,0x6800008,
+	0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,0x60f2008,
+	0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,
+	0x7800309,0x7800348,0x960f248,0x60f1e09,0xc063440,0x80d2100,0x7800148,0x7800189,
+	0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,0x78001c8,
+	0xc063140,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,0xc780240,
+	0x9206208,0x80d1f20,0x64ad008,0xc000dc0,0x9206208,0x60f1c0b,0x64ad008,0x9206208,
+	0x7800049,0xc06ba00,0x2408248,0xc062a80,0x60d2108,0xc06bb00,0x0000000,0x680d103,
+	0x681a4c4,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,
+	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,
+	0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7eb1c0,0x8030502,
+	0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6498e08,
+	0x9808788,0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,
+	0xc7e8fc0,0x6001008,0x5401248,0x2009209,0x681f3ca,0x2009289,0xcb80009,0x680000b,
+	0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,
+	0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,
+	0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,
+	0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,
+	0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,
+	0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,
+	0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,
+	0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,
+	0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,
+	0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,
+	0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,
+	0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,
+	0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,
+	0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,
+	0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,
+	0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,
+	0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,
+	0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,
+	0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,
+	0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc07ae00,0x0000000,
+	0x7800709,0x4001249,0x780030a,0x400128a,0xe00024a,0x80d1f30,0x6bc0008,0x60d1f08,
+	0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,
+	0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,
+	0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc07a1c0,
+	0x0000000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x7800708,0x7800349,0xb809248,
+	0x6804008,0x6800409,0x680080a,0x740020a,0xd07ffc9,0x4001208,0xcc00000,0x0000000,
+	0x6435008,0x580f208,0xbecc048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,
+	0x5801249,0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,
+	0x6be4008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,
+	0xc07be80,0x7800608,0x64d3e08,0x9008288,0xaafbfca,0x0000000,0x60f1c0b,0x7800a08,
+	0xaa10288,0xa60c00a,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc001500,0x2408248,
+	0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0xc07b940,0x7800608,0x64f1d0a,
+	0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae14049,0x80f2308,
+	0x7800588,0xcc00000,0x7c005c8,0x64f2408,0x91e2208,0xaa18048,0x64d3e08,0x9008388,
+	0xa60ffce,0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xaa17fc8,
+	0x64d3e08,0x9008208,0xaaebfce,0x0000000,0x60f1d0b,0xa60ffce,0x64d3e08,0x9008388,
+	0x7800a08,0xaa10288,0xa60c00e,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc0008c0,
+	0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0x78006c8,0x4001208,
+	0x7800309,0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,0xc07e3c0,0x0000000,
+	0x7804009,0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,0x5801248,0x680400a,
+	0x2009289,0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,0x9006209,0x7c007ca,
+	0xcc00000,0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,0xc780100,
+	0x4401308,0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,0x7800309,0xb003248,
+	0x0000000,0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,0x6800049,0xcc00000,
+	0x7c009c9,0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,0x7c009c9,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x80f2306,0x64f2409,
+	0x90c2249,0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,0x6490b09,0x9809009,
+	0x98090c9,0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,0x0000000,0x6803c0e,
+	0x78006c9,0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,0x400128a,0x950c389,
+	0xa60c009,0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,0x980e58e,0x64d3308,
+	0x9108208,0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,0x7800709,0x5404209,
+	0x64acc0a,0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,0x20262e6,0x20262a6,
+	0x7800709,0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,0x540428a,0xf0002c0,
+	0x20102d0,0x2010290,0x78006ca,0x400128a,0x7800309,0x4001249,0xb80424a,0x7800708,
+	0x4001208,0x240a24a,0x2420289,0x64ac32d,0x5404208,0x64acc09,0x242d26d,0xe000248,
+	0x540428a,0x202d2ad,0xf0002c0,0x202d2ed,0x78006ca,0x400128a,0x7800309,0x4001249,
+	0xb80424a,0x7800708,0x4001208,0x240a24a,0x2422289,0x64ac42e,0x5403208,0x64acc09,
+	0x242e26e,0xe000248,0x540428a,0x202e2ae,0xf0002c0,0x202e2ee,0x694002f,0x6c0002f,
+	0x202f7ef,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,0x5405249,
+	0x202f26f,0xc075b40,0x0000000,0x680830a,0x680020c,0x6035126,0x8035208,0x6b0a008,
+	0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,
+	0x6035126,0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x780a1cb,0x95082c9,0x740028b,0xa60c14c,0x0000000,0x440828a,
+	0xd07f94c,0x400128a,0x680800a,0x680010c,0x6035110,0x8035208,0x6b0a008,0x6035008,
+	0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,0x6035110,
+	0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0x780a1cb,0x9008209,0x910834b,0x940824d,0x95082c8,0x740028b,0x400428a,
+	0x7400289,0xd07f8cc,0x440328a,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,
+	0x2409209,0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,0x6035108,0x8035210,
+	0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,
+	0xa6f800d,0x0000000,0xc006180,0x60f1f0e,0x64d3c08,0x9004208,0xaa0c048,0x6800049,
+	0x68000c9,0x7c00b49,0xc004900,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0xc004cc0,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xc005380,0x0000000,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,
+	0x7800b49,0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,
+	0xb220049,0x60f1f0e,0x4401249,0x7c00b49,0xc005700,0x0000000,0xc7ff700,0x4420bef,
+	0xc003f80,0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,
+	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
+	0xc0031c0,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,
+	0x78006c8,0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,
+	0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,
+	0x60d510a,0xc002980,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,
+	0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,
+	0x68fffc9,0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,
+	0xb807289,0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,
+	0x60d5109,0x64d320a,0x69ffe49,0x60d3209,0xc001ec0,0x80d5201,0xcc00000,0x60d320a,
+	0x64d3309,0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,
+	0x64d4a09,0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,
+	0x90612a8,0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,
+	0x60d4c09,0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,
+	0x60d3209,0xc001580,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,
+	0x91e12eb,0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,
+	0x920f289,0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,
+	0xaa2400a,0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,
+	0x960facb,0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,
+	0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,
+	0xc7fd580,0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,
+	0x680002b,0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x60d4a2a,
+	0x60d4b2a,0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,0x60d4e2c,
+	0x60d4f2c,0x60d502c,0x60d512c,0xc000300,0x80d5201,0x64d4a0a,0x60d4a0a,0x60d4b0a,
+	0x60d4c0a,0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x80d5602,
+	0x64d5709,0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,0x8006402,0x7800acf,
+	0xa60c00f,0xc7d4040,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xa61804f,
+	0x6800088,0xc000a80,0x7c00ac8,0xc7d3dc0,0x0000000,0xa61808f,0x68000c8,0xc001140,
+	0x7c00ac8,0xc7d3c40,0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,
+	0x7800b09,0xaa0c009,0x7c00ac8,0x8030508,0xc7d3980,0x0000000,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x603512d,0x8035208,0x6b08808,0x6035008,0x4401820,0x4010b6d,
+	0xaa0c020,0xcc00000,0x0000000,0x7800320,0x4001820,0x5404220,0x242d22d,0x64acc08,
+	0x5404208,0xcc00000,0x202d22d,0x603512e,0x8035208,0x6b09008,0x6035008,0x7808908,
+	0x7c08208,0x7808948,0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,
+	0x7c08308,0x7808848,0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0x44018a2,
+	0x4010bae,0xaa0c022,0xcc00000,0x0000000,0x7800322,0x40018a2,0x5404222,0x242e22e,
+	0x64acc08,0x5403208,0xcc00000,0x202e22e,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x6809008,0x680800e,0x6800109,0x700020a,0x90082ca,0x4001208,0x700020c,0x910834c,
+	0x950830b,0x740038c,0x400438e,0x940828d,0x740038a,0x440338e,0xd07fd49,0x4001208,
+	0x6940008,0x6c00008,0x20087c8,0x7800309,0x4001249,0x5405249,0x2008248,0xb80322f,
+	0x0000000,0x242f26f,0x603512f,0x8035210,0x6a08008,0x6035008,0xcc00000,0x4020bef,
+	0x64f1508,0x9c08308,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9808508,0x98084c8,
+	0x60f1508,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
+	0x960f248,0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,0x0000000,0x80d300f,0x80f4003,
+	0x64f1508,0x9808248,0x9c08508,0x9c084c8,0x60f1508,0x64d0009,0x9c09009,0x60d0009,
+	0x9809009,0x60d0009,0x9c08248,0x9808508,0x98084c8,0x9808308,0x60f1508,0xcc00000,
+	0x80f4000,0x6432434,0xaa0c034,0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,
+	0xaa14134,0xaa100f4,0x0000000,0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_vdec2_dblk.h b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_vdec2_dblk.h
new file mode 100755
index 000000000000..9bab4fb9932f
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_vdec2_dblk.h
@@ -0,0 +1,387 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01bd00,0x0000000,
+	0xc000f00,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7af780,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc79a040,0x0000000,0xc780a40,0x0000000,0xc78bf00,0x64d3008,0xc79a080,0x0000000,
+	0xc7ac540,0x0000000,0xcc00000,0x0400000,0x6699308,0x80d1a00,0x6800008,0x7c003c8,
+	0xcc00000,0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,
+	0x64ac508,0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,
+	0x64ace08,0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,
+	0xbefc048,0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,
+	0x0400000,0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,
+	0xc0030c0,0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,
+	0x7c00a89,0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,
+	0x7c00849,0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785480,
+	0xa6080c8,0xc782e00,0xa608348,0xc79b780,0xa608388,0xc79d680,0xc788200,0x0000000,
+	0xc07ee80,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
+	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,
+	0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,
+	0xc07ed80,0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,
+	0x7800108,0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,
+	0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,
+	0x400f208,0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,
+	0x64d3108,0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,
+	0x2409248,0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,
+	0x80d2100,0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,
+	0xc786d80,0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,
+	0x80d1f20,0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,
+	0x80d1f20,0x80d1f40,0x7800048,0xc0065c0,0x441a208,0xc07d640,0x60d2108,0xc0064c0,
+	0x6800008,0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,
+	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
+	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
+	0x80ac008,0xc785940,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,
+	0x7c0030a,0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,
+	0x7c003c9,0x64f4008,0x9c08048,0x60f4008,0xc017740,0x0000000,0x6498e08,0x9c08788,
+	0x6098e08,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,
+	0xc017d40,0x0000000,0xc017340,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,
+	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,
+	0xc07bb80,0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,
+	0x9010208,0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
+	0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,
+	0x9808508,0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,
+	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,
+	0xc07af80,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,
+	0x7c00588,0x68002a3,0xc01ca80,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,
+	0x7c00608,0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc018f00,0x7c005c8,0x60f1c0b,
+	0x7800049,0xc003640,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0x64acd08,0x60f4208,
+	0xc003680,0x0000000,0x680d143,0x681aa84,0x80d300f,0x64d0008,0x9808008,0x9808048,
+	0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc782fc0,
+	0x8030502,0xc015d40,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc0150c0,0x0000000,
+	0x6498e08,0x9808788,0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,
+	0x9808008,0x6001008,0xc0156c0,0x0000000,0xc014cc0,0x0000000,0xc079700,0x0000000,
+	0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,
+	0x5804208,0x4401208,0x7c00348,0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,
+	0x60f4f09,0x80f4a00,0x8098002,0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,
+	0x64f1508,0x9c08508,0x9c084c8,0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,
+	0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,
+	0x98085c8,0x9808608,0x9808648,0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0x64d3308,0x9210208,0xc078b00,0x60d2108,0xc078a80,0x80d2105,0x6800048,0x7c00248,
+	0x60f1b08,0x7800309,0x946d209,0x60d3208,0xc078880,0x80d2100,0x7800148,0x7800189,
+	0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64d3308,
+	0x9010208,0xaa10008,0x78005c8,0xc780580,0x7c00588,0xc01a1c0,0x0000000,0x7804009,
+	0x90c1209,0x7c007c8,0x9006209,0x7c00608,0x91c1209,0x7c00788,0x9106209,0x7c00588,
+	0xc016640,0x7c005c8,0x60f1d0b,0x6940009,0x6c00009,0x20097c9,0x60f2009,0x6800009,
+	0x60f1e09,0x7800049,0xc000c00,0x2408248,0xc077c80,0x60d2108,0x80d3d00,0x80d5300,
+	0x80d5501,0x6803fc8,0x6ffffc8,0x60f4208,0xc001a40,0x0000000,0x6811903,0x681ba04,
+	0x64d3308,0x9010208,0xaa14008,0x0000000,0x80ac005,0xc780640,0x8030502,0x6800008,
+	0x6c00448,0x60d3008,0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,
+	0x60d0008,0x9808008,0x9808048,0x9808088,0x98080c8,0x98081c8,0x60d0008,0x6800048,
+	0x7800309,0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,
+	0xc7f6a80,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
+	0xcc00000,0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,
+	0x680000b,0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,
+	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,
+	0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,
+	0x680800d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,
+	0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,
+	0x60d3919,0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,
+	0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800023,0x6800028,
+	0x6800029,0x6bfffd8,0x6c00018,0x4000918,0x6800019,0x6c00019,0x4000699,0x6800009,
+	0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
+	0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,
+	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
+	0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,
+	0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,
+	0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,
+	0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,
+	0x680000e,0xa822388,0x64d370e,0x78009c8,0xaa2c008,0xa624048,0x6800008,0x80d3000,
+	0x80d300f,0x64d0009,0x9c09149,0x60d0009,0xc7f3f80,0x7c009c8,0x7c009c8,0xb60c223,
+	0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,
+	0x6800009,0x7c00a49,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,
+	0x7c00709,0xcb80003,0x64d390f,0xc7f39c0,0x0000000,0x60d3718,0x64d3510,0x908c250,
+	0xa620009,0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,
+	0x9004250,0xaa10249,0x80d3601,0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,
+	0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,
+	0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,
+	0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,
+	0x7800649,0x680000a,0xa408289,0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015c00,
+	0x0000000,0xc780400,0x78005c9,0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,
+	0x64d3e08,0x9008208,0xaafbfc8,0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,
+	0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
+	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
+	0x80d360f,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
+	0x960f248,0x60f1e09,0xc0160c0,0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,
+	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
+	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
+	0xb40d248,0x7800309,0xb40b248,0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,
+	0x7000299,0x400128a,0x700028f,0xc7f17c0,0x961064f,0x908c210,0x7800289,0x2409248,
+	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
+	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
+	0x200e7ce,0x780028f,0x54033cf,0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb852248,
+	0x4001208,0x920c210,0x7800349,0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,
+	0x64ad50a,0x901028a,0xa447288,0x6800008,0xc011f80,0x0000000,0x80ac00d,0xc7f08c0,
+	0x8030502,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,
+	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
+	0x0000000,0xc00c700,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,
+	0x7c00208,0x80d3300,0x7800708,0x4001208,0x63f2508,0x64d1908,0x900c208,0xa6f8008,
+	0x0000000,0x64d1208,0x6840009,0x2008248,0x63f2408,0x67f2608,0x67f2709,0xa4fe209,
+	0x6bfffc9,0x6c00009,0xa804248,0x0000000,0xc7ffe40,0x0000000,0x80ac009,0xc7ef8c0,
+	0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,0x200e7ce,
+	0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,
+	0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0xc7fd840,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,
+	0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d3718,0x5401a28,0x9402a29,
+	0x6800029,0x78006c9,0xa638009,0x60d3919,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,
+	0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,
+	0x7800789,0x680000a,0xa842289,0x7800a89,0x60d2109,0x80d2001,0x80d5300,0x6800009,
+	0x7c00a89,0x7800a09,0x680024a,0xa826289,0x64d3e09,0x9008249,0xbe14809,0x680038a,
+	0xbe0c409,0x680028a,0x680018a,0xa20c3c9,0x0000000,0x400c28a,0x64d3c09,0x9002249,
+	0x200a24a,0x64d2009,0xbefc049,0x0000000,0x60d210a,0x80d2001,0x64d320a,0x980a00a,
+	0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x688888b,0x64d3709,0x941024b,
+	0x60d3709,0x64d3809,0x941024b,0x60d3809,0x80d3601,0x0000000,0x60d320a,0xc780d40,
+	0x80d3603,0x64d2009,0xbefc049,0x0000000,0x80d2105,0x80d2001,0x64d320a,0x980a00a,
+	0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x80d3601,0x0000000,0x60d320a,
+	0x80d3602,0x80d3603,0xc780880,0x80d3604,0x9004228,0xa60c008,0xc780640,0x80d5201,
+	0x78006c9,0xa224208,0x780030a,0xb807289,0x4807208,0xa614008,0xc018140,0x0000000,
+	0xc7803c0,0x0000000,0xa62c009,0x0000000,0x4c01208,0x64d3209,0x9c09009,0x60d3209,
+	0x6bfffca,0x6c0000a,0x60d380a,0x9809009,0x60d3209,0xc0161c0,0x0000000,0x80d3607,
+	0x80d3601,0x80d3608,0x80d3609,0x80d3604,0x6800008,0x7c00748,0x7800648,0xaa3c008,
+	0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,0x6800009,
+	0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,0x7800748,
+	0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800649,0x680000a,0xa40d289,0x7800789,
+	0x78007ca,0xa803289,0xc011640,0x0000000,0x64f1d09,0x9205249,0x780060a,0xa804289,
+	0xc00fd00,0x0000000,0xc7804c0,0x78005c9,0x780058a,0xa810289,0x7800a08,0xaa30288,
+	0x0000000,0x64d3e08,0x9008208,0xaafbfc8,0xa61c008,0x7800588,0x78005c9,0xc010c80,
+	0x2408209,0xc780100,0x0000000,0x78005c9,0x7c00589,0x7800748,0xaa5c008,0x0000000,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800a09,
+	0xaa10289,0x64d3e09,0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,0x64d2009,
+	0xbefc049,0x6800009,0x7c00749,0x80d3606,0x80d360f,0x78009c9,0x680000a,0xa86a289,
+	0x680004a,0xa446289,0xc010b00,0x681abc4,0x64f1509,0x9c09449,0x60f1509,0x9809449,
+	0x60f1509,0x80d3609,0x64d0009,0x9c09049,0x60d0009,0x9809049,0x60d0009,0x6800009,
+	0x780030a,0x946d24a,0x60d3209,0x6800223,0x64d5309,0x7c00a89,0x78006e6,0x7800327,
+	0xb8059e6,0x6bfffe6,0x6c00026,0x60d3826,0x6800018,0x60d3718,0x68888a7,0x64d4e26,
+	0x93e19a6,0x96619e6,0x64d4f26,0x93e19a6,0x96419e6,0x64d5026,0x93e19a6,0x96219e6,
+	0x64d5126,0x93e19a6,0x96019e6,0x60d3827,0x64f1509,0x9c09589,0x60f1509,0xc0105c0,
+	0x0000000,0x6490b09,0x9c09609,0x9c09649,0x6090b09,0x64f1509,0x9c095c9,0x9c09609,
+	0x9c09649,0x9c096c9,0x9809509,0x98094c9,0x64f1f08,0x9383208,0xa6f8008,0x0000000,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0x9809589,0xc780900,0x60f1509,0xc00f9c0,
+	0x681ba04,0x6800049,0x780030a,0x946d24a,0x60d3209,0x68001e3,0x9829029,0x64d3727,
+	0x92619a7,0x541f9a6,0x60d4e26,0x92419a7,0x541f9a6,0x60d4f26,0x92219a7,0x541f9a6,
+	0x60d5026,0x92019a7,0x541f9a6,0x60d5126,0x6490b09,0x9809609,0x9c09649,0x6090b09,
+	0x64f1509,0x98095c9,0x9809609,0x9809649,0x98096c9,0x9c09509,0x9c094c9,0x9c09749,
+	0x60f1509,0x78007c9,0x7c00789,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,
+	0x6800009,0x4001208,0x960f248,0x60f1e09,0xc00e040,0x0000000,0x78006c8,0xaa10008,
+	0x680bfca,0xc001740,0x4401208,0x78006c8,0x7800309,0xb846248,0x0000000,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc018880,0x0000000,
+	0x7800709,0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,
+	0x921028a,0xa410289,0xc00b480,0x0000000,0x80ac00e,0xc7e9740,0x8030502,0x64d5309,
+	0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7f8c80,
+	0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0xb60c223,
+	0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,
+	0x6800009,0x7c00a49,0xc000900,0x7800308,0xc001500,0x6800011,0x6a00014,0x6d00014,
+	0x60d4d14,0xc001f00,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x9402a29,
+	0x6800029,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,0xb004248,
+	0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,0xaa18008,0xa614048,
+	0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8780,0x0000000,0x7800289,0x240a248,
+	0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,
+	0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,0x960f466,0x90109a5,
+	0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,0x92219a5,0x541f4e6,
+	0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,0x5810451,0x7400291,
+	0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,
+	0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,
+	0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,0x780028f,
+	0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
+	0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,
+	0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
+	0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,0x400128a,
+	0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,0x400128a,0x7000289,
+	0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,0x700029d,
+	0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,0x9610789,
+	0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,0x68888a4,0x93e199b,
+	0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,0xcc00000,0x9601926,
+	0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,0x9829069,0xcc00000,
+	0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e6100,0x0000000,
+	0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e5f40,0x0000000,0x7800ac9,
+	0xaa10009,0x6800049,0xc7e5e00,0x7c00b09,0x93e1248,0xaa10009,0x9042248,0xc7e5cc0,
+	0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,0xaa0c049,0x680348a,
+	0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,0x78000c9,0x4001249,
+	0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,0xa4032cc,0x0000000,
+	0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,
+	0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,0x980a7ca,
+	0x60f1f0a,0x681abca,0xa404284,0x680004a,0xc011e40,0x7c00aca,0xc7e5100,0x0000000,
+	0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e4f80,0x0000000,0x920c248,0x780034a,
+	0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,0x948c209,0x60f4b08,
+	0xc7e4c80,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,0x6094008,0x6803009,
+	0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,
+	0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,
+	0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,
+	0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,
+	0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,0x780030a,
+	0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,0x0000000,0x8095003,
+	0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,
+	0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,
+	0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,
+	0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,
+	0x0000000,0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,0xc7e7ac0,0x6001008,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,0x6a19408,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,
+	0x60f4109,0x9210208,0xc063500,0x60d2108,0xc063480,0x80d2107,0x6800008,0x60f1b08,
+	0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6803908,
+	0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,
+	0x7800348,0x960f248,0x60f1e09,0xc062ec0,0x80d2100,0x7800148,0x7800189,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,0x78001c8,0xc062bc0,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,0xc780240,0x9206208,
+	0x80d1f20,0x64ad008,0xc000dc0,0x9206208,0x60f1c0b,0x64ad008,0x9206208,0x7800049,
+	0xc06b480,0x2408248,0xc062500,0x60d2108,0xc06b580,0x0000000,0x680d143,0x681aa84,
+	0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,
+	0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,0x9808048,
+	0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7eac40,0x8030502,0x6490b08,
+	0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6498e08,0x9808788,
+	0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,0xc7e8a40,
+	0x6001008,0x5401248,0x2009209,0x681f98a,0x2009289,0xcb80009,0x680000b,0xcc00000,
+	0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,0x68c0c0b,
+	0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,0x6c0514b,
+	0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,0xcc00000,
+	0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,0x694544b,
+	0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,0x6c0d34b,
+	0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,0xcc00000,
+	0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,0x684c4cb,
+	0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,0x6c1554b,
+	0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,0xcc00000,
+	0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,0x68d0d0b,
+	0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,0x6c1d74b,
+	0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,0xcc00000,
+	0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,0x68d554b,
+	0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,0x6c2294b,
+	0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,0xcc00000,
+	0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,0x68585cb,
+	0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,0x6c26b4b,
+	0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,0xcc00000,
+	0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,0x68d8e0b,
+	0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc07ae00,0x0000000,0x7800709,
+	0x4001249,0x780030a,0x400128a,0xe00024a,0x80d1f30,0x6bc0008,0x60d1f08,0xf000280,
+	0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,0x780030b,
+	0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,0x0000000,
+	0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,0x0000000,
+	0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc07a1c0,0x0000000,
+	0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x7800708,0x7800349,0xb809248,0x6804008,
+	0x6800409,0x680080a,0x740020a,0xd07ffc9,0x4001208,0xcc00000,0x0000000,0x6435008,
+	0x580f208,0xbecc048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,0x5801249,
+	0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,0x6be4008,
+	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0xc07be80,
+	0x7800608,0x64d3e08,0x9008288,0xaafbfca,0x0000000,0x60f1c0b,0x7800a08,0xaa10288,
+	0xa60c00a,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc001500,0x2408248,0x78005c8,
+	0x7c00588,0x7800608,0xcc00000,0x7c005c8,0xc07b940,0x7800608,0x64f1d0a,0x900824b,
+	0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae14049,0x80f2308,0x7800588,
+	0xcc00000,0x7c005c8,0x64f2408,0x91e2208,0xaa18048,0x64d3e08,0x9008388,0xa60ffce,
+	0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xaa17fc8,0x64d3e08,
+	0x9008208,0xaaebfce,0x0000000,0x60f1d0b,0xa60ffce,0x64d3e08,0x9008388,0x7800a08,
+	0xaa10288,0xa60c00e,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc0008c0,0x2408248,
+	0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0x78006c8,0x4001208,0x7800309,
+	0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,0xc07e3c0,0x0000000,0x7804009,
+	0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,0x5801248,0x680400a,0x2009289,
+	0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,0x9006209,0x7c007ca,0xcc00000,
+	0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,0xc780100,0x4401308,
+	0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,0x7800309,0xb003248,0x0000000,
+	0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,0x6800049,0xcc00000,0x7c009c9,
+	0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,0x7c009c9,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x80f2306,0x64f2409,0x90c2249,
+	0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,0x6490b09,0x9809009,0x98090c9,
+	0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,0x0000000,0x6803c0e,0x78006c9,
+	0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,0x400128a,0x950c389,0xa60c009,
+	0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,0x980e58e,0x64d3308,0x9108208,
+	0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,0x7800709,0x5404209,0x64acc0a,
+	0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,0x20262e6,0x20262a6,0x7800709,
+	0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,0x540428a,0xf0002c0,0x20102d0,
+	0x2010290,0x78006ca,0x400128a,0x7800309,0x4001249,0xb80424a,0x7800708,0x4001208,
+	0x240a24a,0x2420289,0x64ac32d,0x5404208,0x64acc09,0x242d26d,0xe000248,0x540428a,
+	0x202d2ad,0xf0002c0,0x202d2ed,0x78006ca,0x400128a,0x7800309,0x4001249,0xb80424a,
+	0x7800708,0x4001208,0x240a24a,0x2422289,0x64ac42e,0x5403208,0x64acc09,0x242e26e,
+	0xe000248,0x540428a,0x202e2ae,0xf0002c0,0x202e2ee,0x694002f,0x6c0002f,0x202f7ef,
+	0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,0x5405249,0x202f26f,
+	0xc075b40,0x0000000,0x680830a,0x680020c,0x6035126,0x8035208,0x6b0a008,0x6035008,
+	0x64acc08,0x2026226,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,0x6035126,
+	0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0x780a1cb,0x95082c9,0x740028b,0xa60c14c,0x0000000,0x440828a,0xd07f94c,
+	0x400128a,0x680800a,0x680010c,0x6035110,0x8035208,0x6b0a008,0x6035008,0x64acc08,
+	0x2010210,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,0x6035110,0x8035208,
+	0x6b0a008,0x6035008,0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x780a1cb,0x9008209,0x910834b,0x940824d,0x95082c8,0x740028b,0x400428a,0x7400289,
+	0xd07f8cc,0x440328a,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,
+	0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,0x6035108,0x8035210,0x6a08008,
+	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,
+	0x0000000,0xc006180,0x60f1f0e,0x64d3c08,0x9004208,0xaa0c048,0x6800049,0x68000c9,
+	0x7c00b49,0xc004900,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xc004cc0,
+	0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xc005380,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x7800b49,
+	0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,0xb220049,
+	0x60f1f0e,0x4401249,0x7c00b49,0xc005700,0x0000000,0xc7ff700,0x4420bef,0xc003f80,
+	0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,0x60d4a09,
+	0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0xc0031c0,
+	0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,0x78006c8,
+	0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
+	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,0x60d510a,
+	0xc002980,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,0x68fffc9,
+	0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,0xb807289,
+	0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
+	0x64d320a,0x69ffe49,0x60d3209,0xc001ec0,0x80d5201,0xcc00000,0x60d320a,0x64d3309,
+	0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,0x64d4a09,
+	0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,0x90612a8,
+	0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,0x60d4c09,
+	0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,0x60d3209,
+	0xc001580,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,0x91e12eb,
+	0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,0x920f289,
+	0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,0xaa2400a,
+	0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,0x960facb,
+	0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,0xa60c009,
+	0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,0xc7fd580,
+	0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,0x680002b,
+	0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x60d4a2a,0x60d4b2a,
+	0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,0x60d4e2c,0x60d4f2c,
+	0x60d502c,0x60d512c,0xc000300,0x80d5201,0x64d4a0a,0x60d4a0a,0x60d4b0a,0x60d4c0a,
+	0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x80d5602,0x64d5709,
+	0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,0x8006402,0x7800acf,0xa60c00f,
+	0xc7d3a80,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xa61804f,0x6800088,
+	0xc000a80,0x7c00ac8,0xc7d3800,0x0000000,0xa61808f,0x68000c8,0xc001140,0x7c00ac8,
+	0xc7d3680,0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,0x7800b09,
+	0xaa0c009,0x7c00ac8,0x8030508,0xc7d33c0,0x0000000,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0x603512d,0x8035208,0x6b08808,0x6035008,0x4401820,0x4010b6d,0xaa0c020,
+	0xcc00000,0x0000000,0x7800320,0x4001820,0x5404220,0x242d22d,0x64acc08,0x5404208,
+	0xcc00000,0x202d22d,0x603512e,0x8035208,0x6b09008,0x6035008,0x7808908,0x7c08208,
+	0x7808948,0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,0x7c08308,
+	0x7808848,0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0x44018a2,0x4010bae,
+	0xaa0c022,0xcc00000,0x0000000,0x7800322,0x40018a2,0x5404222,0x242e22e,0x64acc08,
+	0x5403208,0xcc00000,0x202e22e,0x6435008,0x580f208,0xbef8048,0x0000000,0x6809008,
+	0x680800e,0x6800109,0x700020a,0x90082ca,0x4001208,0x700020c,0x910834c,0x950830b,
+	0x740038c,0x400438e,0x940828d,0x740038a,0x440338e,0xd07fd49,0x4001208,0x6940008,
+	0x6c00008,0x20087c8,0x7800309,0x4001249,0x5405249,0x2008248,0xb80322f,0x0000000,
+	0x242f26f,0x603512f,0x8035210,0x6a08008,0x6035008,0xcc00000,0x4020bef,0x64f1508,
+	0x9c08308,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9808508,0x98084c8,0x60f1508,
+	0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,
+	0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,0x0000000,0x80d300f,0x80f4003,0x64f1508,
+	0x9808248,0x9c08508,0x9c084c8,0x60f1508,0x64d0009,0x9c09009,0x60d0009,0x9809009,
+	0x60d0009,0x9c08248,0x9808508,0x98084c8,0x9808308,0x60f1508,0xcc00000,0x80f4000,
+	0x7800708,0xb22c088,0x0000000,0x4402208,0x63f2508,0x680800a,0x64d1009,0x2009289,
+	0x64d1208,0xb003248,0x2408288,0x63f2408,0xcc00000,0x0000000,0x6432434,0xaa0c034,
+	0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,0x0000000,
+	0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h b/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
index bfa820952e56..89a55599298e 100755
--- a/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/encoder/half_encoder_linux.h
@@ -1,65 +1,62 @@
-const u32 MicroCode[] __attribute__((aligned(8))) ={
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc010200,0x0000000,
-	0xc000e00,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x69fffe2,0x6c01c22,
-	0xc780dc0,0x0000000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+const u32 MicroCode[] __attribute__((aligned(8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc00fc00,0x0000000,
+	0xc000e00,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0xc780e40,0x0000000,
+	0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0xc78f100,0x0000000,0xc789480,0x64d3008,0xc780880,0x0000000,0xc78f140,
+	0x0000000,0xc78eb00,0x0000000,0xc788e80,0x64d3008,0xc780880,0x0000000,0xc78eb40,
 	0x64f1f08,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
 	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
 	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0xcc00000,0x0000000,
-	0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,0xa614022,
-	0x0000000,0x6696022,0x69fffe2,0x6c01c22,0x44018a2,0x64ac021,0xaae4021,0xaa34061,
-	0xa60c0a1,0xc7816c0,0x0000000,0xa60c121,0xc784780,0x0000000,0xa6100e1,0x0000000,
-	0xc782980,0x0000000,0xc7ffb40,0x0000000,0xc07f500,0x0000000,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,
-	0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07f380,0x80d2100,0x7800148,0x4404208,
-	0xc07f280,0x60d2108,0xc07f200,0x80d2100,0x7800108,0x4404208,0xc07f100,0x60d2108,
-	0xc07f080,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0xc07ee40,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
-	0xc07ec80,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,
-	0xc7802c0,0x80d1f20,0x80d1f30,0xc07e9c0,0x80d2100,0xc07e940,0x80d2100,0xc07e8c0,
-	0x80d2100,0xc07e840,0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,
-	0x80ac007,0x8007801,0xc7fe740,0x0000000,0xc07e100,0x0000000,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e100,0x80d2100,
-	0xc07e080,0x80d2100,0x80d1f20,0x80d1f20,0xc07df80,0x80d2100,0xc07df00,0x80d2100,
-	0xc07de80,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,0xc004600,0x441a208,0xc07dcc0,
-	0x60d2108,0xc004500,0x6800008,0xc07dbc0,0x60d2108,0xc07db40,0x80d2100,0x80d1f20,
-	0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,
-	0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,
-	0xbefc108,0x0000000,0x80ac008,0x8007801,0xc7fd2c0,0x0000000,0xc00c740,0x0000000,
-	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0xc00cdc0,0x0000000,0xc00c4c0,0x0000000,
-	0xc07ca00,0x0000000,0x64ac408,0x4001208,0x60ac408,0x6bc0008,0x60d1f08,0x64d1e08,
-	0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,
-	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
-	0x9108248,0x7c000c9,0x9210208,0xc07c7c0,0x60d2108,0xc07c740,0x80d2107,0x64d3109,
-	0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,
-	0x4401208,0x7c00348,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
-	0x6940008,0x6c00008,0x2008308,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,
-	0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,
-	0xc07be80,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,
-	0x60d1f09,0x78001c8,0xc07bc00,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,
-	0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,
-	0xc002140,0x2408248,0xc07b800,0x60d2108,0x80d3d00,0xc002200,0x0000000,0x6809ec3,
-	0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x60d0008,0x80ac005,0x8007801,
-	0xc7fb5c0,0x0000000,0xc00aa40,0x0000000,0x6490b08,0x9808608,0x9c08648,0x6090b08,
-	0xc00b0c0,0x0000000,0xc00a7c0,0x0000000,0xc07ad00,0x0000000,0x64f1508,0x9c08508,
-	0x9c084c8,0x9c08588,0x9c08448,0x9c08488,0x60f1508,0x9808488,0x9808448,0x98085c8,
-	0x9808608,0x98086c8,0x60f1508,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6bc0008,0x60d1f08,
+	0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,0x6432421,
+	0xaa0c021,0x8032400,0x6699321,0x64ac021,0xaaec021,0xaa34061,0xa60c0a1,0xc7816c0,
+	0x0000000,0xa60c121,0xc7844c0,0x0000000,0xa6100e1,0x0000000,0xc782980,0x0000000,
+	0xc7ffbc0,0x0000000,0xc07f580,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,
+	0x6a0a008,0x60d1f08,0xc07f400,0x80d2100,0x7800148,0x4404208,0xc07f300,0x60d2108,
+	0xc07f280,0x80d2100,0x7800108,0x4404208,0xc07f180,0x60d2108,0xc07f100,0x80d2101,
+	0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0xc07eec0,
+	0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0xc07ed00,0x60d2108,
+	0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,0xc7802c0,0x80d1f20,
+	0x80d1f30,0xc07ea40,0x80d2100,0xc07e9c0,0x80d2100,0xc07e940,0x80d2100,0xc07e8c0,
+	0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x80ac007,0x8007801,
+	0xc7fe7c0,0x0000000,0xc07e180,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e180,0x80d2100,0xc07e100,0x80d2100,
+	0x80d1f20,0x80d1f20,0xc07e000,0x80d2100,0xc07df80,0x80d2100,0xc07df00,0x80d2100,
+	0x80d1f20,0x80d1f40,0x7800048,0xc004080,0x441a208,0xc07dd40,0x60d2108,0xc003f80,
+	0x6800008,0xc07dc40,0x60d2108,0xc07dbc0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,
+	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
+	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
+	0x80ac008,0x8007801,0xc7fd340,0x0000000,0xc00c1c0,0x0000000,0x6490b08,0x9c08608,
+	0x9c08648,0x6090b08,0xc00cb00,0x0000000,0xc00bf40,0x0000000,0xc07ca80,0x0000000,
+	0x64ac408,0x4001208,0x60ac408,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,
+	0x9210208,0xc07c840,0x60d2108,0xc07c7c0,0x80d2107,0x6800008,0x7c00248,0x60f1b08,
+	0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x2008308,0x60f2008,0x6803908,
+	0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,
+	0x7800348,0x960f248,0x60f1e09,0xc07c1c0,0x80d2100,0x7800148,0x7800189,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07bf40,0x60d2108,0x7800108,
+	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
+	0x64f1c08,0x9206208,0x7800049,0xc001e80,0x2408248,0xc07bb40,0x60d2108,0x80d3d00,
+	0xc001f40,0x0000000,0x68098c3,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,
+	0x60d0008,0x80ac005,0x8007801,0xc7fb900,0x0000000,0xc00a780,0x0000000,0x6490b08,
+	0x9808608,0x9c08648,0x6090b08,0xc00b0c0,0x0000000,0xc00a500,0x0000000,0xc07b040,
+	0x0000000,0x64f1508,0x9c08508,0x9c084c8,0x9c08588,0x9c08448,0x9c08488,0x60f1508,
+	0x9808488,0x9808448,0x98085c8,0x9808608,0x98086c8,0x60f1508,0x6bc0008,0x60d1f08,
 	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
 	0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,
-	0xc07a680,0x60d2108,0xc07a600,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
-	0x946d209,0x60d3208,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07a300,0x80d2100,
+	0xc07ac80,0x60d2108,0xc07ac00,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
+	0x946d209,0x60d3208,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07a900,0x80d2100,
 	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,
 	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
-	0x80d1f20,0x64f1d08,0x9206208,0x7800049,0xc000640,0x2408248,0xc079d00,0x60d2108,
-	0x80d3d00,0x80d5300,0xc001480,0x0000000,0x680c983,0x6800008,0x6c00448,0x60d3008,
-	0x64d0008,0x9808008,0x9808048,0x9808088,0x60d0008,0x80ac005,0x8007801,0xc7f9a00,
-	0x0000000,0x0800000,0x7800008,0xc7f9180,0x6030408,0x6800009,0xb005248,0x2409209,
+	0x80d1f20,0x64f1d08,0x9206208,0x7800049,0xc000640,0x2408248,0xc07a300,0x60d2108,
+	0x80d3d00,0x80d5300,0xc001480,0x0000000,0x680c383,0x6800008,0x6c00448,0x60d3008,
+	0x64d0008,0x9808008,0x9808048,0x9808088,0x60d0008,0x80ac005,0x8007801,0xc7fa000,
+	0x0000000,0x0800000,0x7800008,0xc7f9780,0x6030408,0x6800009,0xb005248,0x2409209,
 	0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffda,0x6c0001a,0x6800009,
 	0x680001b,0x6c0001b,0x400071b,0x680000b,0x680c00e,0x680100f,0x740039a,0x400138e,
 	0x7400389,0x400138e,0x740039b,0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,
@@ -78,14 +75,14 @@ const u32 MicroCode[] __attribute__((aligned(8))) ={
 	0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d391b,
 	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x60d4a1d,0x60d4a1d,0x60d3a1b,0x60d4e1d,
 	0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,0x0000000,0xaa10008,0x64d370e,0xcb80003,
-	0x64d390f,0xc7f6c00,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,0x60d391b,
+	0x64d390f,0xc7f7200,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,0x60d391b,
 	0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,
 	0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,
 	0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0x680c10a,0x7800289,0xa814248,
 	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
 	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
 	0xb40d248,0x7800309,0xb40b248,0x700029a,0x400128a,0x700028e,0x961068e,0x400128a,
-	0x700029b,0x400128a,0x700028f,0xc7f5d80,0x96106cf,0x908c210,0x7800289,0x2409248,
+	0x700029b,0x400128a,0x700028f,0xc7f6380,0x96106cf,0x908c210,0x7800289,0x2409248,
 	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
 	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
 	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
@@ -96,7 +93,7 @@ const u32 MicroCode[] __attribute__((aligned(8))) ={
 	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
 	0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80ac009,
-	0x8007801,0xc7f4800,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,
+	0x8007801,0xc7f4e00,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,
 	0x6c0000e,0x200e30e,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
 	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
 	0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fe1c0,0x680c00a,0x64d4a11,0x64d4b12,
@@ -111,7 +108,7 @@ const u32 MicroCode[] __attribute__((aligned(8))) ={
 	0x7800308,0xc000e40,0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001740,0x680c00a,
 	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0xc780280,0x680c28a,0x401528a,0x908c210,
 	0x4002208,0x78002c9,0xb004248,0xc0009c0,0x908c450,0x680c50a,0xc001340,0x0000000,
-	0xc7f2a40,0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,
+	0xc7f3040,0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,
 	0x200a289,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,
 	0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,
 	0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,
@@ -124,23 +121,21 @@ const u32 MicroCode[] __attribute__((aligned(8))) ={
 	0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,
 	0x7000289,0x9610789,0x400128a,0x700029f,0x400128a,0x7000289,0x96107c9,0x400128a,
 	0x70002a0,0x400128a,0x7000289,0xcc00000,0x9610809,0x64d1602,0x9162082,0xaa0c002,
-	0xc7fff40,0x0000000,0xc7f0fc0,0x0000000,0x93e1248,0xaa10009,0x9042248,0xc7f0e80,
+	0xc7fff40,0x0000000,0xc7f15c0,0x0000000,0x93e1248,0xaa10009,0x9042248,0xc7f1480,
 	0x0000000,0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,
 	0xb806248,0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x7c00088,0x950c288,
 	0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,0xa60c008,
-	0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7f0740,0x0000000,0x64ac10c,0x680c008,
+	0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7f0d40,0x0000000,0x64ac10c,0x680c008,
 	0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,
-	0x0000000,0xcc00000,0x0000000,0xc000a00,0x0000000,0x780034a,0x400128a,0x40002ca,
-	0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,
-	0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
-	0x6090b0a,0x698000a,0x6c0000a,0x200a30a,0x609440a,0x6a0000a,0x6c0000a,0x200a30a,
-	0x609450a,0xcc00000,0x0000000,0xc0005c0,0x0000000,0x8095003,0x8095000,0x6820889,
-	0x6c00209,0xcc00000,0x6095109,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,
-	0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,
-	0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,
-	0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x0000000,0x0000000,
-};
-
-
-
-                   
+	0x0000000,0xcc00000,0x0000000,0xc000cc0,0x0000000,0x64d310a,0x90102ca,0x400f2cb,
+	0x58042cb,0x44012cb,0x7c0030b,0x92102ca,0x400f2cb,0x58042cb,0x44012cb,0x7c0034b,
+	0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,
+	0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
+	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a30a,0x609440a,
+	0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,0xc0005c0,0x0000000,
+	0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,0x683ffc9,0x649090a,
+	0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,
+	0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,
+	0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/vdec2_encoder.h b/drivers/amlogic/amports/m8/ucode/encoder/vdec2_encoder.h
new file mode 100755
index 000000000000..917b7a5c0faf
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/encoder/vdec2_encoder.h
@@ -0,0 +1,397 @@
+const unsigned MicroCode[] = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0x64c0800,0x9800300,0x0000000,0x60c0800,
+	0xc0032c0,0x649c134,0x6880000,0x60c2900,0x80c0002,0x6bf9ac0,0x7c02d40,0x6030400,
+	0x0400000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0xc7ffe80,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xcc00000,0x0400000,0xcc00000,0x0400000,0xc780640,0x64c0007,0xcc00000,0x0400000,
+	0xc783b00,0x0000000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xc783980,0x0000000,
+	0xc7836c0,0x0000000,0xcc00000,0x0400000,0x7801949,0xa212009,0x9c091c9,0xc790ec0,
+	0x7c01949,0x0800000,0x7802d49,0xc7ffdc0,0x6030409,0x6bf9b89,0x6030409,0x0400000,
+	0x67f2409,0x60c4509,0x64c4309,0x5801249,0xbaf1809,0x0000000,0xa2b8047,0x7802bc9,
+	0xaa0c009,0xa608049,0xc78a440,0xa208807,0xc781280,0xa208207,0xc781e40,0x64e0f07,
+	0x9003207,0x9063247,0xb403209,0x2409209,0x4008249,0xba180c9,0xaee40c9,0x80c3e00,
+	0x64c3f07,0x90021c7,0xa6d40c7,0xcb8001a,0x0000000,0x683ffc9,0xaa18009,0x649470a,
+	0x910828a,0x7802cc8,0xa4fc20a,0x4401249,0xcc00000,0x0000000,0xc006480,0x0000000,
+	0x6490b09,0x9809009,0x9809089,0x6090b09,0x9c09009,0x9c09089,0x6090b09,0x8095007,
+	0x8095000,0x683ffc9,0x6498f0a,0xaa0c009,0xa6f800a,0x4401249,0x64c3d0a,0x580a28a,
+	0xbef80ca,0x0000000,0x6498e0a,0x980a00a,0x68007c9,0x9706289,0x6098e0a,0x6800009,
+	0x9706289,0x9c0a00a,0x6098e0a,0x649b80a,0x6800fc9,0x9508289,0xcc00000,0x609b80a,
+	0x200ad0a,0x603510a,0x6035209,0x603500b,0x643500c,0x580f30c,0xbef804c,0x0000000,
+	0x643530c,0x900c30c,0xa6f800c,0x0000000,0xcc00000,0x240ad0a,0xa269007,0x680004a,
+	0xc07f140,0x7c01e4a,0x64c000a,0x9c0a18a,0x980a20a,0x980a00a,0x60c000a,0x64c2908,
+	0x9c08348,0x9808208,0x60c2908,0x9808348,0x9c08208,0x60c2908,0x64c080a,0x980a34a,
+	0x60c080a,0xc07ef40,0x0000000,0x680004a,0x60e0c0a,0x7c026ca,0x680000a,0x7c0248a,
+	0x80c0600,0xfc081c0,0x90a2207,0x7c02048,0x481f1c7,0x7c02007,0xaa10147,0xaa0c047,
+	0xc7803c0,0x0000000,0xc786840,0x0000000,0x64c2307,0xbefc047,0xcc00000,0x64c2007,
+	0x40011c7,0x6800008,0xa20c047,0x58011c7,0x24071c8,0xcc00000,0x0000000,0x64c0007,
+	0xa2fc047,0x0000000,0x64c3a07,0x90061c7,0xaaec647,0x0000000,0x80c0a01,0x80c2800,
+	0x80c0002,0xc7fd8c0,0x0000000,0x680c002,0x6094002,0x6803003,0x6804002,0xd000003,
+	0x6094102,0x6800002,0x6094002,0xc000700,0x0000000,0x8002501,0x8002605,0x8002708,
+	0x800290d,0x8002d15,0x8002c14,0x649b802,0x6800fc3,0x9508083,0x609b802,0x8032100,
+	0x6840008,0x63f0808,0x6800008,0x63f0808,0x8002a09,0x8002b17,0x6830008,0x6032608,
+	0x8032261,0x8032101,0x83f2600,0x83f2700,0x6800032,0xcc00000,0x680001b,0x6800712,
+	0x6800033,0x7c02bf3,0x7c01933,0x7c01973,0x7c01df3,0x7c01e33,0x6803002,0x63f0802,
+	0x6800002,0x63f0802,0x6800002,0x60c0c02,0x6c04042,0x60c0d02,0x80c0101,0x6840442,
+	0x60c2e02,0xcc00000,0x0000000,0x67f2419,0x60c4519,0x64c4419,0x9101659,0xa6f0019,
+	0xc7fc880,0x0000000,0xcc00000,0x0400000,0x64e1214,0x91e1514,0xbef0054,0x78029d5,
+	0x649d914,0x900c514,0xacfe554,0x7802494,0xaa44094,0xc782400,0x6800015,0x6c04015,
+	0x7802857,0x97c1557,0x60e1215,0x7802d15,0xa20c055,0x6800018,0x6880018,0x6c04418,
+	0x2018d18,0x6800014,0x7c02a94,0xc781dc0,0x6800114,0x7802a95,0xaa08095,0xc780d40,
+	0x78024d6,0xaeb4096,0x7802ad4,0x5405514,0x7802d15,0xbe0c055,0x6800015,0x6880015,
+	0x6c04415,0x2015d15,0x2014554,0x4420514,0x60e1314,0x4060614,0x7802596,0xaa14016,
+	0x6a2c215,0xaa0c056,0x6a2c015,0x6a2c115,0xaa10017,0x6c04015,0x68003d4,0x9506554,
+	0x97c1557,0x60e1215,0x6800014,0x7c02a94,0x6800114,0xc781b00,0x7c02494,0x78025d5,
+	0x78029d6,0x2415595,0x2415595,0x7802857,0xaa0c017,0x2415595,0x2415595,0x7802694,
+	0x5409514,0x2014554,0x5403554,0x2015d15,0x60e1315,0x7802596,0xaa34016,0x6a44215,
+	0xaa2c056,0x6a44015,0xc780240,0x6a44115,0xa64c0d5,0x78026d4,0x64e0c16,0x9010596,
+	0xb8e7594,0xcc00000,0x0400000,0xaa10017,0x6c0c015,0x68005d4,0x9506554,0x97c1557,
+	0x60e1215,0x6800018,0x6800014,0x7c02a94,0x6800154,0xc781100,0x7c02494,0x7802515,
+	0xaa1c015,0x4401555,0x7c02515,0x78024d5,0x4401555,0xc780d80,0x7c024d5,0x7802615,
+	0x7c02655,0x7802694,0x5409514,0x2014554,0x78029d6,0x2015595,0x7c02615,0x5403554,
+	0x2015d15,0x60e1315,0x7802596,0xaa14016,0x6a16215,0xaa0c056,0x6a16015,0x6a16115,
+	0x7803056,0xaa28016,0x78026d4,0x64e0c16,0x9010596,0xb804594,0x7802656,0xc7fdec0,
+	0x7c02616,0x4001514,0x7c026d4,0x7c02715,0x6c00015,0x60e1215,0x6800054,0xc780680,
+	0x7c02494,0xba58114,0x7802855,0xa608015,0xc7ff4c0,0x78026d5,0x4001555,0x7c026d5,
+	0xaa0c114,0x6800015,0x80c2170,0xc780300,0x7c02855,0xa6d0054,0x78024d5,0xaa6c015,
+	0x4401555,0xb264055,0x7c024d5,0x7802a54,0xaa0c0d4,0x0000000,0x80c2170,0x6800014,
+	0x7c02494,0xcc00000,0x0400000,0xaa0c014,0x6880018,0x6800018,0x6c04418,0xc780940,
+	0x2018d18,0x90a8518,0x7802c56,0xb821594,0xa8f7594,0x91a1518,0xaa20014,0x6880018,
+	0xc780180,0x6800018,0xaa68018,0x78025d5,0xc7ffd40,0x0000000,0x6c04418,0x2018d18,
+	0x7802694,0x5409514,0x78029d6,0x2415595,0x2014554,0x5403554,0x2015d15,0x60e1315,
+	0x7802714,0x9004554,0xaa14015,0x6a14214,0xaa0c115,0x6a14014,0x6a14114,0x6c08014,
+	0x60e0d18,0x4020618,0xc7ff5c0,0x60e1214,0x7802694,0x5409514,0x2014554,0x78029d6,
+	0x2015595,0x7c025d5,0x5403554,0x2015d15,0x60e1315,0x7802714,0xa618018,0x9c141d4,
+	0x60e1214,0x68000d4,0xc7ff1c0,0x7c02494,0x6c08014,0x60e0d18,0xc7ffe80,0x4020618,
+	0x64e1209,0x91e1249,0xbef8049,0x64e0009,0x64e030a,0x64e0e0b,0x64e0c0c,0x83f0840,
+	0x83f0800,0x680020d,0xd00000d,0x0000000,0x60e0009,0x60e030a,0x60e0e0b,0xcc00000,
+	0x60e0c0c,0xc000940,0x0000000,0x6810109,0x6c34749,0x6090709,0x6490b09,0x9809009,
+	0x9809089,0x6090b09,0x9c09009,0x9c09089,0x6090b09,0x6800009,0x6c04409,0x2009d09,
+	0x6094409,0x6880009,0x6c04409,0x2009d09,0x6094509,0xcc00000,0x0000000,0xc000a80,
+	0x0000000,0x8095007,0x8095000,0x6497f08,0x68000ca,0x970220a,0x6097f08,0x6498e08,
+	0x9c08788,0x6098e08,0x6820888,0x6c00208,0xcc00000,0x6095108,0x683ffc8,0x6490909,
+	0xa210049,0xaa0c008,0xc7fff40,0x4401208,0x683ffc8,0x6490909,0x9343249,0xa2241c9,
+	0xaa20008,0x6490b09,0x98090c9,0x6090b09,0x9c090c9,0x6090b09,0xc7ffdc0,0x4401208,
+	0x6490b09,0x9809009,0x9809089,0x6090b09,0x9c09009,0x9c09089,0x6090b09,0xcc00000,
+	0x0000000,0x683ffc9,0x649bb08,0x920c208,0x649530a,0x900128a,0x2008288,0xaa10008,
+	0xaa0c009,0xc7ffe40,0x4401249,0xcc00000,0x0000000,0xc7804c0,0x68001c7,0xc780440,
+	0x6800147,0xc7803c0,0x6800187,0xc07f4c0,0x0000000,0xc07fb00,0x0000000,0xc079740,
+	0x80c2301,0x7c03c07,0xc079680,0x80c2301,0xaac41c7,0xaac8147,0xc780000,0x0000000,
+	0x7c02087,0xc0794c0,0x80c2301,0x7803c07,0xa614007,0xc00d000,0x0000000,0xc00dac0,
+	0x0000000,0x78020c8,0xf8001c8,0x7c01f47,0x68000c9,0x7c02409,0x7802007,0xa614147,
+	0x0000000,0xc0790c0,0x80c2301,0x7c01f87,0x7802187,0xf8001c7,0x7803c07,0xaa0c007,
+	0xc780ec0,0x0000000,0x6800013,0x7c02cd3,0x7c02d13,0x7c02e93,0x6803fc7,0x7c02b07,
+	0x6800007,0x7c02547,0x7c025c7,0x7c02607,0x7802c07,0x40011c7,0x7c024c7,0x6800047,
+	0x60e0c07,0x7c026c7,0x7c02507,0x68003c7,0x7c02807,0x6805c07,0x60c2107,0x80c2170,
+	0x6800087,0x7c02a47,0x6800018,0x80c2410,0x7802087,0xaa3c147,0x0000000,0x80c2200,
+	0x6908007,0x6c00a07,0x60c2207,0x80c2204,0x80c2200,0x80c2205,0x80c2200,0x68009c7,
+	0xd000007,0x80c2200,0xc780340,0x0000000,0x6bd23c7,0x6c00007,0x60c2207,0x80c2200,
+	0x80c2200,0x80c2200,0x80c2205,0x80c2200,0x68009c7,0xd000007,0x80c2200,0x6800007,
+	0x7c01947,0x6a00007,0x60c3d07,0x780248a,0xa6fc00a,0x0000000,0xc07d2c0,0x0000000,
+	0x7803c07,0xa60c007,0xc07cd80,0x0000000,0xc07d6c0,0x0000000,0x7802087,0x6840009,
+	0x680f0da,0xaa101c7,0x6800008,0x680d11a,0x6800048,0x7c02788,0x7c02689,0x6800007,
+	0x7c02a87,0x7802c4a,0xb20c2ca,0x680044a,0x6800c0a,0x6495107,0x97061ca,0x9807647,
+	0x6095107,0x7802c8a,0x7c023ca,0x6800047,0x54181c7,0x609b307,0x649b307,0x54081c7,
+	0x58081c7,0x609b207,0x609b007,0x609b107,0x6bfffc9,0x64c3d08,0x9161208,0xa6f8008,
+	0x0000000,0x60c3809,0x7803ac7,0x7c073c7,0x7803b07,0x7c07407,0x7802087,0x6800148,
+	0xa803207,0xc7802c0,0x0000000,0xfc011c0,0x6800808,0x78073c7,0x9505207,0x7802947,
+	0x96a2207,0x60c2108,0xfc011c0,0x8094200,0x6494007,0x9c07247,0x6094007,0x7802047,
+	0xaa18007,0x7802007,0x6800148,0xa805207,0x0000000,0xfc011c0,0xc7800c0,0x0000000,
+	0xfc021c0,0x80c2400,0x6981807,0x6d81807,0x6800208,0xd000008,0x60c2207,0x80c2400,
+	0x60c2207,0xc076ac0,0x80c2301,0xc076b40,0x0000000,0x401a1c7,0x7802248,0x2007207,
+	0x7c02387,0x7802287,0xaa40007,0x6800009,0xc076800,0x80c2301,0xaa30047,0x9402247,
+	0xc076700,0x80c2301,0xc076780,0x0000000,0x94c4247,0xc0765c0,0x80c2301,0xc076640,
+	0x0000000,0x9444247,0x60c3109,0x67f2507,0xaafc007,0x0000000,0x7802787,0x7802408,
+	0x94c21c8,0x60c0407,0x80c0a01,0x7802387,0x60c0a07,0xc006280,0x80c0600,0x7802a21,
+	0x6c00021,0x6800022,0x6c00022,0x6800023,0x6c00023,0x6800024,0x6c00024,0x6bfffe5,
+	0x6800189,0x7c029c9,0xc780200,0x60c0713,0x64c0321,0x64c0322,0x64c0323,0x64c0324,
+	0x64c2725,0x60c0713,0x9210265,0x7802cc7,0xa638007,0x7802a08,0x6c00008,0x60c0208,
+	0x6800008,0x6c00008,0x60c0208,0x6800008,0x6c00008,0x60c0208,0x6800008,0x6c00008,
+	0x60c0208,0x6bfffc9,0x60c031d,0x60c031e,0x60c031f,0x60c0320,0x7802448,0x9610209,
+	0x60c2708,0x7802307,0x9021247,0x94411c9,0x4c301c7,0x60c2507,0x683ffc9,0x780248a,
+	0xaa0c00a,0xa6f8009,0x4401249,0x68000ca,0x7802749,0x9510289,0x7802cc9,0x9708289,
+	0x6031e0a,0x7802807,0x7c02887,0x683ffcb,0xae1000b,0x44012cb,0xc780000,0x0000000,
+	0x64c2307,0x9304207,0xa6e8008,0x90a1207,0x90241c7,0x95211c8,0x780194b,0xaa1000b,
+	0x7c02807,0xc780dc0,0x0000000,0xaa64247,0x60c2507,0xaa64287,0xaa58347,0xaa1c048,
+	0xaa58387,0xa60c007,0xc7801c0,0x0000000,0x80c2605,0x80c2606,0x80c2602,0x80c260f,
+	0x80c2603,0x7802a48,0xaa100c8,0x6800089,0xc781700,0x7c02a49,0x780248b,0xa6fc00b,
+	0x0000000,0x7c02a88,0xc781580,0x7c02a49,0x80c2602,0x80c260f,0x80c2603,0x7802a48,
+	0xaa48088,0x68000c9,0x7802cc8,0xaa0c008,0xc781300,0x7c02a49,0x683ffcb,0x78026c8,
+	0x64e0c09,0x9010249,0xb804248,0xaa0c00b,0xc7ffec0,0x44012cb,0x6800088,0x68000c9,
+	0x680180b,0x60c210b,0x780248b,0xa6fc00b,0x0000000,0x7c02a88,0xc780e80,0x7c02a49,
+	0x6800007,0x7c02807,0x60c2507,0x6431e07,0xbefc047,0x68fdfc8,0x6fcffc8,0x64e0407,
+	0x2807207,0xc7ff400,0x60e0407,0x64c0321,0x64c0322,0x64c2725,0x60c0713,0x9210265,
+	0x7802cc7,0xa618007,0x7802a08,0x6c00008,0x60c0208,0x80c0200,0x6bfffc9,0x60c031d,
+	0x60c031e,0x7802448,0x9610209,0x60c2708,0x7802307,0x9021247,0x94411c9,0x4c301c7,
+	0x60c2507,0x683ffc9,0x4401249,0xaa0c009,0x780248a,0xa6f400a,0x68000ca,0x7802749,
+	0x9510289,0x7802cc9,0x9708289,0x6031e0a,0x7802807,0x7c02887,0x64c2307,0x9304207,
+	0xa6f8008,0x90241c7,0x7c02807,0xaa10287,0x60c2507,0x80c2602,0x80c260f,0x80c2603,
+	0x4c001c7,0x9807207,0x60c2107,0x7802547,0xaa14007,0x6a01008,0xaa0c047,0x6a22008,
+	0x6a40008,0x6431e09,0xbefc049,0x6c00108,0x60e0508,0x7802a88,0x6801809,0x9502248,
+	0x60c2109,0x80c260e,0x6800088,0x7c02587,0xba0c087,0x40011c7,0x6800007,0x7c02547,
+	0x7802cc7,0x7c02ac7,0x7802887,0x7c03047,0x7c02488,0x8030580,0x7802747,0x40011c7,
+	0x7c02747,0x683ffc8,0x64c2307,0x93041c7,0xaa2c007,0x0000000,0x80c3e01,0x64c3f07,
+	0x93e11c7,0xaae4007,0xb6e0048,0x4401208,0x6bfffc8,0xc780000,0x0000000,0x7802b0d,
+	0xba13fcd,0x6800008,0xc780fc0,0x7c02b08,0x6808008,0xba1070d,0x400024d,0x441c249,
+	0x680c008,0x5403289,0x200a24a,0x2008288,0x7400225,0x4001208,0x92102e1,0x740020b,
+	0x4001208,0x7400221,0x4001208,0x7400222,0x4001208,0x92102e2,0x740020b,0x4001208,
+	0x7400223,0x4001208,0x92102e3,0x740020b,0x4001208,0x7400224,0x4001208,0x92102e4,
+	0x740020b,0x7802c48,0xac04488,0x7802cca,0xc780240,0x40002ca,0xa60800a,0xc7800c0,
+	0xa6146c9,0x400128d,0xb60c70d,0x680000a,0x680070a,0x7c02b0a,0xb013488,0xaa0800a,
+	0xa64470a,0x7802b4a,0xa20c04a,0x6a0800b,0x6a0c00b,0x6b80009,0x7802b8c,0x540928c,
+	0x200a24a,0x6c0440a,0x200ad0a,0x603510a,0x6803f0a,0x603520a,0x603500b,0xc004d40,
+	0x0000000,0x7802cc7,0x40011c7,0x7c02cc7,0x7802e88,0x4001208,0x7c02e88,0x7802c48,
+	0xb81e207,0x6800007,0x7c02cc7,0x7802d08,0x4001208,0x63f2608,0x63f2708,0x78023c9,
+	0xb812248,0x7c02d08,0x7802487,0xa6fc007,0x0000000,0x6430507,0xa2f0107,0x0000000,
+	0xc076d80,0x0000000,0xc0773c0,0x0000000,0x6bfffc7,0x6c00007,0x63f2607,0x63f2707,
+	0xc780000,0x0800000,0x0000000,0x67f2507,0xb4fe1c8,0x0000000,0x7801e07,0xb214a07,
+	0x680004a,0x7c01e4a,0x680204a,0x7c0194a,0x7802cc7,0x95084c7,0x7802d09,0x94084c9,
+	0x7802c49,0xb004489,0x6808008,0xc780280,0x0000000,0xc7803c0,0x7802d0a,0x6800007,
+	0xb60c709,0x6808008,0x680c008,0xc780240,0x0000000,0xaae8007,0x7802b09,0x40011c9,
+	0xba10707,0xb6d8e07,0x680c008,0x441c1c7,0x5403247,0x20091c9,0x2008248,0x7000209,
+	0x7c02449,0x4001208,0x7000209,0x4001208,0x700021d,0x9610749,0x4001208,0x700021e,
+	0x4001208,0x7000209,0x9610789,0x4001208,0x700021f,0x4001208,0x7000209,0x96107c9,
+	0x4001208,0x7000220,0x4001208,0x7000209,0x9610809,0xc7eddc0,0x0000000,0x7802087,
+	0xa6101c7,0x0000000,0xc781440,0x0000000,0x80c2400,0x64c2207,0x9305207,0x93a2287,
+	0x9205247,0x92a22c7,0x54022cb,0x2c0a2ca,0x9105347,0x91a22c7,0x54042cb,0x2c0a2ca,
+	0x9005387,0x90a22c7,0x54062cb,0x2c0a2ca,0x80c2408,0x5418208,0x609b308,0x649b308,
+	0x5418249,0x609b309,0x649b309,0x541834d,0x609b30d,0x649b30d,0x541838e,0x609b30e,
+	0x649b30e,0x8098002,0x6bfffcb,0x54102cb,0x6bfffcc,0x2c0c2cc,0x609820c,0x48032ca,
+	0xa6500cb,0x0000000,0xc7800c0,0x0000000,0xc780640,0x54102c8,0x58102cb,0x5410308,
+	0x2c0c2cc,0x609810c,0x54042ca,0x609800b,0xa811248,0x0000000,0x54102c9,0x58102cb,
+	0x5410309,0x2c0c2cc,0xc7802c0,0x609820c,0x54102c8,0x58102cb,0x5410309,0x2c0c2cc,
+	0x609810c,0x54042ca,0x4c042cb,0xc7800c0,0x609800b,0xc780380,0x48032ca,0x54182cb,
+	0x2c0b20b,0x483030a,0x541430c,0x2c0c34c,0xa80730b,0x0000000,0x54102cd,0x58102cb,
+	0x541030e,0x2c0c2cc,0x609820c,0x6800712,0x6bfffcb,0x6800021,0x7802a1d,0x680001e,
+	0x6800022,0x680001f,0x6800023,0x6800020,0x6800024,0x400099d,0x40009de,0x4000a1f,
+	0x4000a60,0x680800a,0x680070e,0x740028b,0x400128a,0x74002a1,0x400128a,0x740029d,
+	0x400128a,0x740029e,0x400128a,0x74002a2,0x400128a,0x740029f,0x400128a,0x74002a3,
+	0x400128a,0x74002a0,0x400128a,0x74002a4,0xd07fbce,0x400128a,0x7c0244b,0x7c0298b,
+	0x96102cb,0x80c0700,0x60c270b,0x9610761,0x60c021d,0x96107a2,0x780278e,0xaa1800e,
+	0x60c021e,0x96107e3,0x60c021f,0x9610824,0x60c0220,0x80c0701,0x60c270b,0x60c021d,
+	0xaa1000e,0x60c021e,0x60c021f,0x60c0220,0x7802c4e,0xb00948e,0x6b80007,0x6c04407,
+	0x2007d07,0x6035107,0x6803f07,0x6035207,0x6a08007,0x6035007,0x7802cc7,0xa60c007,
+	0x6803fc7,0x7c02b07,0x6800007,0x7c02747,0xac0b48e,0x7802b07,0xb613fc7,0xba0c707,
+	0x441c1c7,0x7c02b07,0x6435007,0x580f1c7,0xbef8047,0xcc00000,0x0000000,0x6435007,
+	0x580f1c7,0xbef8047,0x0000000,0x6435307,0x900c1c7,0xa6f8007,0x6b80007,0x6c04407,
+	0x2007d07,0x6035107,0x6803f07,0x6035207,0x6b0c007,0x6035007,0x54011d2,0xac051ce,
+	0x6800087,0x7c02b47,0xc7ff8c0,0x7c02b87,0x6b90008,0x6c04408,0x2008d08,0x5401252,
+	0x2009489,0x680008a,0x7c02b4a,0x68000ca,0x6435007,0x580f1c7,0xbef8047,0x6803f07,
+	0x6035108,0x6035207,0x6a08007,0x6035007,0xac0324e,0xc7ff400,0x7c02b8a,0x6808007,
+	0x20081c8,0x2009489,0xc7ffc80,0x400128a,0x400130c,0x480f30c,0x7c02b8c,0x980b38b,
+	0x7802b4c,0x540928c,0x200a24a,0x6c0440a,0x200ad0a,0x400130c,0x480f30c,0x7c02b4c,
+	0x643500c,0x580f30c,0xbef804c,0x0000000,0x643530c,0x900c30c,0xa6f800c,0x0000000,
+	0x603510a,0x6803f0a,0x603520a,0xc7fedc0,0x603500b,0x64c2908,0x9c080c8,0x60c2908,
+	0x80e0000,0x649c909,0x7c020c9,0x6800007,0x7c02147,0x649c807,0x7c02187,0x6800047,
+	0x7c03907,0x6800007,0x7c03947,0x649ca07,0x9010247,0x60c0909,0x7c02c49,0x4401249,
+	0x7c02c09,0x9210247,0x7c02c89,0x6800047,0x7c02107,0x4000289,0x7802c48,0x9610288,
+	0x609520a,0x5404289,0x968c288,0x609080a,0xe000248,0x0000000,0x0000000,0xf000200,
+	0x7c03a48,0x7c02947,0x6800047,0xaa10007,0x54011c7,0x7802108,0x94411c8,0x7c02307,
+	0xcc00000,0x0000000,0x6800007,0x7c02a07,0x6800007,0x7c021c7,0x6800808,0x6800007,
+	0x7c03ac7,0x9505207,0x6800007,0x7c03b07,0x9605207,0x7802947,0x96a2207,0x60c2108,
+	0x649cb07,0x441a1c7,0x7c02247,0x6800007,0x6800007,0x6801008,0x9505207,0x60c2108,
+	0x6801408,0x9505207,0x60c2108,0x6800007,0x7c02287,0x6800007,0x64e0e08,0x9401207,
+	0x60e0e08,0x7802308,0x9c08008,0xcc00000,0x7c02308,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x6bff7c0,0x6032400,0x0400000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xcc00000,0x0400000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xcc00000,0x0400000,
+	0xcc00000,0x0400000,0xc780200,0x6431e07,0xcc00000,0x0400000,0xcc00000,0x0400000,
+	0xcc00000,0x0400000,0x9027207,0xa668048,0x68fdfca,0x6fcffca,0x64e0408,0x2808288,
+	0x9110287,0x64c0909,0xac0924a,0xb80324a,0xc7801c0,0x9808688,0x400128a,0x98083c8,
+	0xa40324a,0x440128a,0x98086c8,0xaa1000a,0x9308287,0xa60c00a,0x400128a,0x9808388,
+	0xb80324a,0x0000000,0x98081c8,0xc780100,0x60e0408,0xc780080,0x0000000,0x8031e00,
+	0xcc00000,0x0400000,0x0000000
+};
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder b/drivers/amlogic/amports/m8m2/ucode/encoder
deleted file mode 120000
index 000c06688447..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/encoder
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/Makefile b/drivers/amlogic/amports/m8m2/ucode/encoder/Makefile
new file mode 100755
index 000000000000..fb2033b368dd
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/Makefile
@@ -0,0 +1,2 @@
+
+obj-y				+= encoder_mc.o 
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
new file mode 100755
index 000000000000..96c9458c192f
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
@@ -0,0 +1,43 @@
+/*
+ * AMLOGIC Audio/Video streaming port driver.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the named License,
+ * or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
+ *
+ * Author:  Brian Zhu <brian.zhu@amlogic.com>
+ *
+ */
+
+#include <linux/types.h>
+
+#define MicroCode mix_dump_mc
+#include "h264_enc_mix_dump.h"
+
+#undef MicroCode
+#define MicroCode half_encoder_mc
+#include "half_encoder_linux.h"
+
+#undef MicroCode
+#define MicroCode mix_sw_mc
+#include "h264_enc_mix_sw.h"
+
+
+#undef MicroCode
+#define MicroCode mix_sw_mc_hdec_dblk
+#include "h264_enc_mix_sw_hdec_dblk.h"
+
+#undef MicroCode
+#define MicroCode mix_dump_mc_dblk
+#include "h264_enc_mix_dump_dblk.h"
+
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h
new file mode 100755
index 000000000000..7c3daa3b02c9
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h
@@ -0,0 +1,302 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000980,0x0000000,0xc018440,0x0000000,
+	0xc000e40,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7a4dc0,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc7967c0,0x0000000,0xc780980,0x0000000,0xc78d780,0x64d3008,0xc796800,0x0000000,
+	0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,0x0000000,0x64ac808,
+	0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,0x64ac708,
+	0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c01008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,
+	0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,0x64ac008,0xaa0c048,
+	0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,0x0000000,0x80d5c00,
+	0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,0x7c00ac9,0x7c00b09,
+	0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,0x7c00889,0x7c008c9,
+	0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785380,0xa6080c8,0xc782e00,0xa608348,
+	0xc797f80,0xa608388,0xc79ac00,0xc789cc0,0x0000000,0xc07ee80,0x0000000,0x6bc0008,
+	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
+	0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,
+	0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,0x80d2100,0x7800148,
+	0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,0x4404208,0xc07eb00,
+	0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,
+	0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x9004248,
+	0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,0x5801249,0x80d1f30,
+	0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,0xc07e140,0x60d2109,
+	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc788840,0x8007801,0xc07da00,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,0x80d1f20,0xc07d900,
+	0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,
+	0xc008080,0x441a208,0xc07d640,0x60d2108,0xc007f80,0x6800008,0xc07d540,0x60d2108,
+	0xc07d4c0,0x80d2100,0x80d1f30,0x80d5501,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,
+	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
+	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0xc787400,0x8007801,
+	0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,0x9210289,0x400f28a,
+	0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,0xc014000,0x0000000,
+	0x6498e08,0x9c08788,0x6098e08,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,
+	0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,
+	0xc014480,0x0000000,0xc013a80,0x0000000,0xc07bcc0,0x0000000,0x64f4908,0x9c08048,
+	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,
+	0xc07bac0,0x60d2108,0xc07ba40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,
+	0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07b180,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af00,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc005540,0x2408248,0xc07ab00,
+	0x60d2108,0x80d3d00,0xc07aa40,0x80d2100,0x80d5500,0xc07a980,0x80d2100,0xc07a900,
+	0x80d2100,0x64acd08,0x60f4208,0xc0053c0,0x0000000,0x680e703,0x6817204,0x80d300f,
+	0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,
+	0x60d0008,0x64acf08,0x60f4808,0x6800289,0x7801008,0x9485248,0x60f4009,0x80ac005,
+	0xc784b80,0x8030502,0xc012640,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc0119c0,
+	0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,
+	0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc011f00,0x0000000,
+	0xc011500,0x0000000,0xc079740,0x0000000,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
+	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,0x8098000,
+	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
+	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,
+	0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,
+	0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,0x9808008,
+	0x60f4908,0x7801009,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,0x9808788,
+	0x9808748,0x9808688,0x9808648,0x9808608,0x9c08288,0x9c08248,0x98081c8,0x9808088,
+	0x9808048,0x60f4908,0x4801249,0xaa10049,0x0000000,0xc7810c0,0x0000000,0x6800c08,
+	0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800008,0x6800009,
+	0x9508209,0x680c0c8,0x6c00008,0x60f5808,0x6800388,0x6800489,0x9508209,0x6800149,
+	0x9604209,0x68000c9,0x9684209,0x6800109,0x9704209,0x6800089,0x9704209,0x60f5a08,
+	0x6800008,0x6800009,0x9508209,0x6800809,0x9608209,0x6801409,0x9708209,0x60f5b08,
+	0x6800608,0x6801409,0x9508209,0x6800809,0x9608209,0x6801809,0x9708209,0x60f5d08,
+	0x68000c8,0x6801809,0x948c209,0x6800449,0x9607209,0x6800009,0x96e1209,0x6800c09,
+	0x9708209,0x60f5e08,0x68000c8,0x6800009,0x9461209,0x6800049,0x9481209,0x6800009,
+	0x94a2209,0x6803009,0x950c209,0x6801c09,0x968c209,0x60f5f08,0xc780380,0x0000000,
+	0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800c08,
+	0x6801009,0x9508209,0x680c0c8,0x6c0c0c8,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077140,0x60d2108,
+	0xc0770c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
+	0xc076ec0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x80d1f20,0x64ad209,0x9008209,0x7c00e48,0x9108209,0x7c00e08,
+	0xc013880,0x7c005c8,0x60f1d0b,0x6800015,0x64ad308,0x9008248,0x7c00c09,0x9108248,
+	0x7c00c49,0x9208248,0x7c00c89,0x9308248,0x7c00cc9,0x64ad408,0x9008248,0x7c00d09,
+	0x9108248,0x7c00d49,0x9208248,0x7c00d89,0x9308248,0x7c00dc9,0xc013300,0x7800e08,
+	0x60f1d0b,0x780034a,0x960f24a,0x60f1e09,0x7800049,0xc000b40,0x2408248,0xc076100,
+	0x60d2108,0x80d3d00,0x80d5300,0xc076000,0x80d2101,0x80d5501,0x6803fc8,0x6ffffc8,
+	0x60f4208,0xc001900,0x0000000,0x68119c3,0x6817fc4,0x6800008,0x6c00448,0x60d3008,
+	0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,
+	0x9808048,0x9808088,0x98080c8,0x9808188,0x9808148,0x98081c8,0x60d0008,0x6800048,
+	0x7800309,0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,
+	0xc7f5000,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
+	0xcc00000,0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,
+	0x680000b,0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,
+	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,
+	0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,
+	0x680800d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,
+	0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,
+	0x60d3919,0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,
+	0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800019,0x6c00019,
+	0x4000699,0x6800009,0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,
+	0x740039b,0x400138e,0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,
+	0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,
+	0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,
+	0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,
+	0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,
+	0x60d4d1e,0x60d4a1b,0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,
+	0xcc00000,0x0000000,0x680000e,0xa817388,0x64d370e,0x4000216,0x64d5c16,0x2408216,
+	0x7c00408,0x4000217,0x64d5d17,0x2408217,0x7c00448,0x64d3e25,0x9104965,0x64d3b23,
+	0x64d3c24,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,
+	0xcb80003,0x64d390f,0xc7f2380,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,
+	0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,
+	0xaa1c249,0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,
+	0x80d3603,0x80d3604,0x80d3605,0x80d3606,0x80d360f,0xc013040,0x0000000,0xc013c00,
+	0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,
+	0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,
+	0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,
+	0xc7f1400,0x961064f,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,
+	0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,
+	0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb848248,0x4001208,0x920c210,0x7800349,
+	0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa43d288,
+	0x6800008,0xc010480,0x0000000,0x80ac00d,0xc7f0500,0x8030502,0x80d3000,0x80d1f30,
+	0x6bc0008,0x60d1f08,0x7800308,0x5401208,0x6804009,0x2009248,0x680000a,0x740024a,
+	0x4001249,0x740024a,0xc011b40,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
+	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
+	0xc008880,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,
+	0x80d3300,0x80ac009,0xc7ef780,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,
+	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
+	0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fdac0,0x680c00a,0x64d4a11,
+	0x64d4b12,0x64d4c13,0x64d4d14,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x78006c9,
+	0xa62c009,0x60d3919,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
+	0x6800009,0x6c00009,0x60d3a09,0x80d3607,0x80d3601,0x80d3608,0x64d340a,0x91c128a,
+	0xaaf800a,0x80d4800,0x64d3533,0x64d4923,0x64d4924,0x64d4925,0x64d4926,0x64d4927,
+	0x64d4928,0x64d4929,0x64d492a,0x64d492b,0x64d492c,0x64d492d,0x64d492e,0x64d492f,
+	0x64d4930,0x64d4931,0x64d4932,0x80d5201,0x80d3609,0x80d3604,0x6800008,0x7c00748,
+	0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,
+	0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,
+	0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800448,0x7800649,
+	0x680000a,0xa436289,0x78006c9,0x780030a,0xb433289,0x7800c09,0xb819248,0x78005cb,
+	0x7800e4c,0xb42e30b,0x7800c49,0x40012cb,0xb40c30b,0xb80b248,0x7800c89,0x40012cb,
+	0xb40830b,0xb807248,0x7800cc9,0x40012cb,0xb40430b,0xb803248,0x0000000,0x40012cb,
+	0x78005cc,0x240a30b,0x540128a,0xc009c80,0x440128a,0xc780980,0x0000000,0x7800e0c,
+	0xb01730b,0x7800d09,0xac0f248,0x7800d49,0x44012cb,0xb00c30b,0xac0b248,0x7800d89,
+	0x44012cb,0xb00830b,0xac07248,0x7800dc9,0x44012cb,0xb00430b,0xac03248,0x0000000,
+	0x44012cb,0x78005cc,0x240a2cc,0xc009680,0x540128a,0xc780380,0x0000000,0xaa2c015,
+	0x0000000,0x64d3e08,0x9008208,0xaaf7fc8,0xa618008,0x78005c8,0x2408548,0xc00a4c0,
+	0x7c005c8,0x60f1d0b,0x6800015,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,
+	0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,
+	0x7c00749,0x80d3606,0x80d360f,0xc00dac0,0x0000000,0xc00f1c0,0x0000000,0x78006c8,
+	0xaa10008,0x680bfca,0xc001180,0x4401208,0x78006c8,0x7800309,0xb836248,0x0000000,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,
+	0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,
+	0xa410289,0xc00c900,0x0000000,0x80ac00e,0xc7ebf00,0x8030502,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fb800,0x0000000,
+	0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,
+	0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001840,0x680c00a,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0x60d4d1e,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,
+	0xb004248,0xc0009c0,0x78006d1,0x680c50a,0xc001440,0x0000000,0xc7eb480,0x0000000,
+	0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,
+	0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,
+	0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,
+	0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,0x780028f,
+	0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
+	0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,
+	0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
+	0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,0x400128a,
+	0x7000289,0x9610689,0x400128a,0x700029b,0x400128a,0x7000289,0x96106c9,0x400128a,
+	0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,
+	0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,0xcc00000,0x9610789,0x64d1602,
+	0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e9900,0x0000000,0xcb80004,0x64f1f08,
+	0x9361248,0xaa10009,0x9042248,0xc7e9740,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,
+	0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb812248,
+	0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,
+	0x64ad50b,0x90102cb,0xa4072cc,0x0000000,0x64f010a,0x980a20a,0x60f010a,0xc7e9040,
+	0x0000000,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,
+	0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,0x7800248,
+	0xaa0c008,0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7e8ac0,0x0000000,0x64f4b08,
+	0x9384248,0xaa10009,0x64f4a08,0xc7e8940,0x0000000,0x920c248,0x780034a,0xb40e289,
+	0x4001249,0x64d330a,0x910828a,0x240b289,0x64ad50a,0x921028a,0xa80728b,0x5410209,
+	0x60f4a08,0x6800048,0x7800309,0x948c209,0x60f4b08,0xc7e84c0,0x0000000,0x64ac11f,
+	0x80ac102,0x80ac200,0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,
+	0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,
+	0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,
+	0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
+	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,
+	0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,
+	0xcc00000,0x0000000,0xc000600,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,
+	0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,
+	0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,
+	0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,
+	0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x6490b08,0x9808008,
+	0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x64f4908,0x9c08048,0x60f4908,
+	0x6401108,0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,
+	0x6001008,0x80f4209,0x64f4308,0x9808088,0x60f4308,0x9808048,0x9c08088,0x98080c8,
+	0x60f4308,0x64f1508,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9c08448,0x9c08488,
+	0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808508,0x98084c8,
+	0x9808748,0x9808488,0x9808448,0x9808348,0x9808308,0x9c08248,0x9c08008,0x60f1508,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,
+	0xaa0c048,0x6a10408,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,
+	0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc066140,0x60d2108,
+	0xc0660c0,0x80d2107,0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
+	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
+	0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc065b00,
+	0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x7800248,0xa610008,0x78001c8,0xc065800,0x60d2108,0x7800108,0x7800209,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,
+	0x80d1f20,0x64f1c08,0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc002300,0x9206208,
+	0x60f1c0b,0x64ad008,0x9206208,0x7800049,0xc06fb80,0x2408248,0xc065140,0x60d2108,
+	0xc0650c0,0x80d2100,0x80d5500,0xc065000,0x80d2100,0xc064f80,0x80d2100,0xc06fac0,
+	0x0000000,0x680e703,0x6817204,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,
+	0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,
+	0x9c08048,0x60d0008,0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,
+	0xc7ef180,0x8030502,0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,
+	0x6090b08,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,
+	0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x64d3308,0x9108248,
+	0x960c209,0x6800009,0x9504209,0xc7eab40,0x60f4a08,0x400030a,0x400034b,0xc0010c0,
+	0x400020b,0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,
+	0xae24049,0x80f2308,0x78005c8,0x2408548,0xc000d80,0x7c005c8,0x60f1d0b,0xcc00000,
+	0x6800015,0x64f2408,0x91e2208,0xaa1c048,0xaad0015,0x4401249,0xa613fce,0x64d3e08,
+	0xc7ffc00,0x9008388,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xa6f7fc8,0x0000000,
+	0x60f1d0b,0x7800a08,0xaa4c288,0xaa48015,0x64d3e08,0x9008208,0xa63c008,0x78005c8,
+	0x2408548,0x7c005c8,0x6800015,0x240820d,0xaa24008,0x680000c,0xba14008,0x6800009,
+	0x5401208,0xc780100,0x4401308,0x240c209,0x540130c,0x64d3508,0x908c208,0x4001208,
+	0x7800309,0xb003248,0x0000000,0x6800008,0x7c00688,0x7c0064c,0x78005c8,0x241520d,
+	0xcc00000,0x7c005cd,0x5401248,0x2009209,0x681e1ca,0x2009289,0xcb80009,0x680000b,
+	0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,
+	0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,
+	0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,
+	0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,
+	0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,
+	0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,
+	0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,
+	0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,
+	0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,
+	0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,
+	0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,
+	0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,
+	0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,
+	0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,
+	0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,
+	0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,
+	0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,
+	0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,
+	0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,
+	0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc078d00,0x0000000,
+	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
+	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x7800709,
+	0x4001249,0x780030a,0x400128a,0xe00024a,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,
+	0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,
+	0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,
+	0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc077cc0,
+	0x0000000,0x80d3000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x78006c8,0xa60c008,
+	0x4401208,0x7800308,0x5401208,0x6804009,0x2009248,0x780040a,0x700024b,0x948c2ca,
+	0x740024b,0x4001249,0x780044a,0x740024a,0x78006c8,0xaa0c008,0xcc00000,0x0000000,
+	0x7800708,0xaaf4008,0x0000000,0xc000100,0x0000000,0xcc00000,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,0x5401249,
+	0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,0x6a04008,
+	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,
+	0x5401248,0x680400a,0x2009289,0x7400265,0x483f208,0x5402208,0x6808009,0x2009248,
+	0x7400263,0x4001249,0x92108e3,0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,
+	0x7400264,0x4001249,0x78006c8,0x7800309,0xb405248,0x483f208,0xaa0cfc8,0xcc00000,
+	0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,0x6035108,0x6804009,
+	0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,0x680400a,0x2009289,
+	0x7400273,0x4807208,0x5405208,0x6808009,0x2009248,0x7400263,0x4001249,0x92108e3,
+	0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,0x4001249,0x7400265,
+	0x4001249,0x9210965,0x7400265,0x4001249,0x7400266,0x4001249,0x92109a6,0x7400266,
+	0x4001249,0x7400267,0x4001249,0x92109e7,0x7400267,0x4001249,0x7400268,0x4001249,
+	0x9210a28,0x7400268,0x4001249,0x7400269,0x4001249,0x9210a69,0x7400269,0x4001249,
+	0x740026a,0x4001249,0x9210aaa,0x740026a,0x4001249,0x740026b,0x4001249,0x9210aeb,
+	0x740026b,0x4001249,0x740026c,0x4001249,0x9210b2c,0x740026c,0x4001249,0x740026d,
+	0x4001249,0x9210b6d,0x740026d,0x4001249,0x740026e,0x4001249,0x9210bae,0x740026e,
+	0x4001249,0x740026f,0x4001249,0x9210bef,0x740026f,0x4001249,0x7400270,0x4001249,
+	0x9210c30,0x7400270,0x4001249,0x7400271,0x4001249,0x9210c71,0x7400271,0x4001249,
+	0x7400272,0x4001249,0x9210cb2,0x7400272,0x4001249,0x78006c8,0x7800309,0xb405248,
+	0x4807208,0xaa0c1c8,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x64ad708,0x6035108,0x6804009,0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,
+	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x6432434,
+	0xaa0c034,0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,
+	0x0000000,0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h
new file mode 100755
index 000000000000..419d5a444fe0
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h
@@ -0,0 +1,300 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000980,0x0000000,0xc0181c0,0x0000000,
+	0xc000e40,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7a4980,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc796540,0x0000000,0xc780980,0x0000000,0xc78d500,0x64d3008,0xc796580,0x0000000,
+	0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,0x0000000,0x64ac808,
+	0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,0x64ac708,
+	0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c01008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,
+	0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,0x64ac008,0xaa0c048,
+	0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,0x0000000,0x80d5c00,
+	0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,0x7c00ac9,0x7c00b09,
+	0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,0x7c00889,0x7c008c9,
+	0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc7851c0,0xa6080c8,0xc782e00,0xa608348,
+	0xc797d00,0xa608388,0xc79a7c0,0xc789a40,0x0000000,0xc07ee80,0x0000000,0x6bc0008,
+	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
+	0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,
+	0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,0x80d2100,0x7800148,
+	0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,0x4404208,0xc07eb00,
+	0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,
+	0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x9004248,
+	0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,0x5801249,0x80d1f30,
+	0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,0xc07e140,0x60d2109,
+	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc7885c0,0x8007801,0xc07da00,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,0x80d1f20,0xc07d900,
+	0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,
+	0xc007e00,0x441a208,0xc07d640,0x60d2108,0xc007d00,0x6800008,0xc07d540,0x60d2108,
+	0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,
+	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
+	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0xc787180,0x8007801,
+	0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,0x9210289,0x400f28a,
+	0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,0xc013d80,0x0000000,
+	0x6498e08,0x9c08788,0x6098e08,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,
+	0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,
+	0xc014200,0x0000000,0xc013800,0x0000000,0xc07bcc0,0x0000000,0x64f4908,0x9c08048,
+	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,
+	0xc07bac0,0x60d2108,0xc07ba40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,
+	0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07b180,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af00,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc0052c0,0x2408248,0xc07ab00,
+	0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc005300,0x0000000,0x680e483,0x6816f84,
+	0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,
+	0x9c081c8,0x60d0008,0x64acf08,0x60f4808,0x6800289,0x7801008,0x9485248,0x60f4009,
+	0x80ac005,0xc784ac0,0x8030502,0xc012580,0x0000000,0x64f4008,0x9c08048,0x60f4008,
+	0xc011900,0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,
+	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc011e40,
+	0x0000000,0xc011440,0x0000000,0xc079900,0x0000000,0x64d3109,0x9010209,0x400f208,
+	0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
+	0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,
+	0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,
+	0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,
+	0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,
+	0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,
+	0x9808008,0x60f4908,0x7801009,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,
+	0x9808788,0x9808748,0x9808688,0x9808648,0x9808608,0x9c08288,0x9c08248,0x98081c8,
+	0x9808088,0x9808048,0x60f4908,0x4801249,0xaa10049,0x0000000,0xc7810c0,0x0000000,
+	0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800008,
+	0x6800009,0x9508209,0x680c0c8,0x6c00008,0x60f5808,0x6800388,0x6800489,0x9508209,
+	0x6800149,0x9604209,0x68000c9,0x9684209,0x6800109,0x9704209,0x6800089,0x9704209,
+	0x60f5a08,0x6800008,0x6800009,0x9508209,0x6800809,0x9608209,0x6801409,0x9708209,
+	0x60f5b08,0x6800608,0x6801409,0x9508209,0x6800809,0x9608209,0x6801809,0x9708209,
+	0x60f5d08,0x68000c8,0x6801809,0x948c209,0x6800449,0x9607209,0x6800009,0x96e1209,
+	0x6800c09,0x9708209,0x60f5e08,0x68000c8,0x6800009,0x9461209,0x6800049,0x9481209,
+	0x6800009,0x94a2209,0x6803009,0x950c209,0x6801c09,0x968c209,0x60f5f08,0xc780380,
+	0x0000000,0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,
+	0x6800c08,0x6801009,0x9508209,0x680c0c8,0x6c0c0c8,0x6bc0008,0x60d1f08,0x64d1e08,
+	0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,
+	0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077300,
+	0x60d2108,0xc077280,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,
+	0x60d3208,0xc077080,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,
+	0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64ad209,0x9008209,0x7c00e48,0x9108209,
+	0x7c00e08,0xc013600,0x7c005c8,0x60f1d0b,0x6800015,0x64ad308,0x9008248,0x7c00c09,
+	0x9108248,0x7c00c49,0x9208248,0x7c00c89,0x9308248,0x7c00cc9,0x64ad408,0x9008248,
+	0x7c00d09,0x9108248,0x7c00d49,0x9208248,0x7c00d89,0x9308248,0x7c00dc9,0xc013080,
+	0x7800e08,0x60f1d0b,0x780034a,0x960f24a,0x60f1e09,0x7800049,0xc000a80,0x2408248,
+	0xc0762c0,0x60d2108,0x80d3d00,0x80d5300,0x6803fc8,0x6ffffc8,0x60f4208,0xc001900,
+	0x0000000,0x6811743,0x6817d44,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9c08008,
+	0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,0x9808048,0x9808088,
+	0x98080c8,0x9808188,0x9808148,0x98081c8,0x60d0008,0x6800048,0x7800309,0x948c209,
+	0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,0xc7f5280,0x6030408,
+	0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,
+	0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,0x680000b,0x680c00e,
+	0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,0x400138e,0x740038b,
+	0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffc00,
+	0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,
+	0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,0x60d3919,0x60d3818,
+	0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,0x6d0001c,0x6a0001d,
+	0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800019,0x6c00019,0x4000699,0x6800009,
+	0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
+	0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,
+	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
+	0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,
+	0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,
+	0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,
+	0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,
+	0x680000e,0xa817388,0x64d370e,0x4000216,0x64d5c16,0x2408216,0x7c00408,0x4000217,
+	0x64d5d17,0x2408217,0x7c00448,0x64d3e25,0x9104965,0x64d3b23,0x64d3c24,0x64d3508,
+	0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,0xcb80003,0x64d390f,
+	0xc7f2600,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,0x60d3919,0x6bfffc9,
+	0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,0x80d3601,
+	0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,0x80d3604,
+	0x80d3605,0x80d3606,0x80d360f,0xc012e80,0x0000000,0xc013a40,0x0000000,0x908c210,
+	0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,
+	0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,
+	0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,0x7000298,0x400128a,
+	0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,0xc7f1680,0x961064f,
+	0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,
+	0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,
+	0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,0x200e3ce,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
+	0x908c210,0x7800309,0xb848248,0x4001208,0x920c210,0x7800349,0xb40e248,0x64d330a,
+	0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa43d288,0x6800008,0xc0102c0,
+	0x0000000,0x80ac00d,0xc7f0780,0x8030502,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,
+	0x7800308,0x5401208,0x6804009,0x2009248,0x680000a,0x740024a,0x4001249,0x740024a,
+	0xc011980,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,
+	0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0xc008880,0x0000000,
+	0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80d3300,0x80ac009,
+	0xc7efa00,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,
+	0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0xc7fdac0,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,
+	0x64d4d14,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x78006c9,0xa62c009,0x60d3919,
+	0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6800009,0x6c00009,
+	0x60d3a09,0x80d3607,0x80d3601,0x80d3608,0x64d340a,0x91c128a,0xaaf800a,0x80d4800,
+	0x64d3533,0x64d4923,0x64d4924,0x64d4925,0x64d4926,0x64d4927,0x64d4928,0x64d4929,
+	0x64d492a,0x64d492b,0x64d492c,0x64d492d,0x64d492e,0x64d492f,0x64d4930,0x64d4931,
+	0x64d4932,0x80d5201,0x80d3609,0x80d3604,0x6800008,0x7c00748,0x7800648,0xaa3c008,
+	0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,0x6800009,
+	0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,0x7800748,
+	0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800448,0x7800649,0x680000a,0xa436289,
+	0x78006c9,0x780030a,0xb433289,0x7800c09,0xb819248,0x78005cb,0x7800e4c,0xb42e30b,
+	0x7800c49,0x40012cb,0xb40c30b,0xb80b248,0x7800c89,0x40012cb,0xb40830b,0xb807248,
+	0x7800cc9,0x40012cb,0xb40430b,0xb803248,0x0000000,0x40012cb,0x78005cc,0x240a30b,
+	0x540128a,0xc009ac0,0x440128a,0xc780980,0x0000000,0x7800e0c,0xb01730b,0x7800d09,
+	0xac0f248,0x7800d49,0x44012cb,0xb00c30b,0xac0b248,0x7800d89,0x44012cb,0xb00830b,
+	0xac07248,0x7800dc9,0x44012cb,0xb00430b,0xac03248,0x0000000,0x44012cb,0x78005cc,
+	0x240a2cc,0xc0094c0,0x540128a,0xc780380,0x0000000,0xaa2c015,0x0000000,0x64d3e08,
+	0x9008208,0xaaf7fc8,0xa618008,0x78005c8,0x2408548,0xc00a300,0x7c005c8,0x60f1d0b,
+	0x6800015,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
+	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
+	0x80d360f,0xc00d900,0x0000000,0xc00f000,0x0000000,0x78006c8,0xaa10008,0x680bfca,
+	0xc001180,0x4401208,0x78006c8,0x7800309,0xb836248,0x0000000,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,0x780034a,0xb40d289,
+	0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,0xa410289,0xc00c740,
+	0x0000000,0x80ac00e,0xc7ec180,0x8030502,0x64d5309,0xaa1c009,0x0000000,0x60d2109,
+	0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fb800,0x0000000,0x64d390f,0x64d4a11,
+	0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,0x6800011,0x6a00014,
+	0x6d00014,0x60d4d14,0xc001840,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,
+	0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,0xb004248,0xc0009c0,
+	0x78006d1,0x680c50a,0xc001440,0x0000000,0xc7eb700,0x0000000,0x7800289,0x240a248,
+	0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,
+	0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,0x400128a,0x7400292,
+	0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,0x58104d3,0x7400293,
+	0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,0x643500e,0x580f38e,
+	0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x540434f,0x54023cf,
+	0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x7c00291,
+	0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,0x200e7ce,
+	0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,
+	0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,
+	0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,0x400128a,0x7000289,0x9610689,
+	0x400128a,0x700029b,0x400128a,0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,
+	0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,
+	0x700029e,0x400128a,0x7000289,0xcc00000,0x9610789,0x64d1602,0x9162082,0xaa0c002,
+	0xc7fff40,0x0000000,0xc7e9b80,0x0000000,0xcb80004,0x64f1f08,0x9361248,0xaa10009,
+	0x9042248,0xc7e99c0,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,
+	0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb812248,0x4001208,0x6800008,
+	0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,
+	0xa4072cc,0x0000000,0x64f010a,0x980a20a,0x60f010a,0xc7e92c0,0x0000000,0x7c00088,
+	0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,
+	0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,0x7800248,0xaa0c008,0x0000000,
+	0x980a54a,0x980a7ca,0x60f1f0a,0xc7e8d40,0x0000000,0x64f4b08,0x9384248,0xaa10009,
+	0x64f4a08,0xc7e8bc0,0x0000000,0x920c248,0x780034a,0xb40e289,0x4001249,0x64d330a,
+	0x910828a,0x240b289,0x64ad50a,0x921028a,0xa80728b,0x5410209,0x60f4a08,0x6800048,
+	0x7800309,0x948c209,0x60f4b08,0xc7e8740,0x0000000,0x64ac11f,0x80ac102,0x80ac200,
+	0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,
+	0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,
+	0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,
+	0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,
+	0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,
+	0x200a7ca,0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,
+	0xc000600,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,
+	0x0000000,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,
+	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,
+	0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,
+	0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x6490b08,0x9808008,0x98080c8,0x6090b08,
+	0x9c08008,0x9c080c8,0x6090b08,0x64f4908,0x9c08048,0x60f4908,0x6401108,0x9c08748,
+	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x80f4209,
+	0x64f4308,0x9808088,0x60f4308,0x9808048,0x9c08088,0x98080c8,0x60f4308,0x64f1508,
+	0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9c08448,0x9c08488,0x9c08348,0x9c08308,
+	0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808508,0x98084c8,0x9808748,0x9808488,
+	0x9808448,0x9808348,0x9808308,0x9c08248,0x9c08008,0x60f1508,0x6490b08,0x9c08608,
+	0x9c08648,0x6090b08,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
+	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,
+	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
+	0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc0663c0,0x60d2108,0xc066340,0x80d2107,
+	0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc065d80,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,
+	0x78001c8,0xc065a80,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,
+	0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc002140,0x9206208,0x60f1c0b,0x64ad008,
+	0x9206208,0x7800049,0xc06fb80,0x2408248,0xc0653c0,0x60d2108,0xc06fc80,0x0000000,
+	0x680e483,0x6816f84,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,
+	0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,
+	0x60d0008,0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7ef340,
+	0x8030502,0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,
+	0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,0x6001108,
+	0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x64d3308,0x9108248,0x960c209,
+	0x6800009,0x9504209,0xc7eadc0,0x60f4a08,0x400030a,0x400034b,0xc0010c0,0x400020b,
+	0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae24049,
+	0x80f2308,0x78005c8,0x2408548,0xc000d80,0x7c005c8,0x60f1d0b,0xcc00000,0x6800015,
+	0x64f2408,0x91e2208,0xaa1c048,0xaad0015,0x4401249,0xa613fce,0x64d3e08,0xc7ffc00,
+	0x9008388,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xa6f7fc8,0x0000000,0x60f1d0b,
+	0x7800a08,0xaa4c288,0xaa48015,0x64d3e08,0x9008208,0xa63c008,0x78005c8,0x2408548,
+	0x7c005c8,0x6800015,0x240820d,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,
+	0xc780100,0x4401308,0x240c209,0x540130c,0x64d3508,0x908c208,0x4001208,0x7800309,
+	0xb003248,0x0000000,0x6800008,0x7c00688,0x7c0064c,0x78005c8,0x241520d,0xcc00000,
+	0x7c005cd,0x5401248,0x2009209,0x681dd8a,0x2009289,0xcb80009,0x680000b,0xcc00000,
+	0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,0x68c0c0b,
+	0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,0x6c0514b,
+	0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,0xcc00000,
+	0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,0x694544b,
+	0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,0x6c0d34b,
+	0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,0xcc00000,
+	0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,0x684c4cb,
+	0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,0x6c1554b,
+	0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,0xcc00000,
+	0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,0x68d0d0b,
+	0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,0x6c1d74b,
+	0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,0xcc00000,
+	0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,0x68d554b,
+	0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,0x6c2294b,
+	0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,0xcc00000,
+	0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,0x68585cb,
+	0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,0x6c26b4b,
+	0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,0xcc00000,
+	0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,0x68d8e0b,
+	0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc078ec0,0x0000000,0x64f4308,
+	0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,0x9c08448,
+	0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x7800709,0x4001249,
+	0x780030a,0x400128a,0xe00024a,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0xf000280,
+	0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,0x780030b,
+	0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,0x0000000,
+	0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,0x9384249,
+	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,0x0000000,
+	0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc077e80,0x0000000,
+	0x80d3000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x78006c8,0xa60c008,0x4401208,
+	0x7800308,0x5401208,0x6804009,0x2009248,0x780040a,0x700024b,0x948c2ca,0x740024b,
+	0x4001249,0x780044a,0x740024a,0x78006c8,0xaa0c008,0xcc00000,0x0000000,0x7800708,
+	0xaaf4008,0x0000000,0xc000100,0x0000000,0xcc00000,0x0000000,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,0x5401249,0x401f249,
+	0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,0x6a04008,0x6035008,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,
+	0x680400a,0x2009289,0x7400265,0x483f208,0x5402208,0x6808009,0x2009248,0x7400263,
+	0x4001249,0x92108e3,0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,
+	0x4001249,0x78006c8,0x7800309,0xb405248,0x483f208,0xaa0cfc8,0xcc00000,0x0000000,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,0x6035108,0x6804009,0x6035209,
+	0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,0x680400a,0x2009289,0x7400273,
+	0x4807208,0x5405208,0x6808009,0x2009248,0x7400263,0x4001249,0x92108e3,0x7400263,
+	0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,0x4001249,0x7400265,0x4001249,
+	0x9210965,0x7400265,0x4001249,0x7400266,0x4001249,0x92109a6,0x7400266,0x4001249,
+	0x7400267,0x4001249,0x92109e7,0x7400267,0x4001249,0x7400268,0x4001249,0x9210a28,
+	0x7400268,0x4001249,0x7400269,0x4001249,0x9210a69,0x7400269,0x4001249,0x740026a,
+	0x4001249,0x9210aaa,0x740026a,0x4001249,0x740026b,0x4001249,0x9210aeb,0x740026b,
+	0x4001249,0x740026c,0x4001249,0x9210b2c,0x740026c,0x4001249,0x740026d,0x4001249,
+	0x9210b6d,0x740026d,0x4001249,0x740026e,0x4001249,0x9210bae,0x740026e,0x4001249,
+	0x740026f,0x4001249,0x9210bef,0x740026f,0x4001249,0x7400270,0x4001249,0x9210c30,
+	0x7400270,0x4001249,0x7400271,0x4001249,0x9210c71,0x7400271,0x4001249,0x7400272,
+	0x4001249,0x9210cb2,0x7400272,0x4001249,0x78006c8,0x7800309,0xb405248,0x4807208,
+	0xaa0c1c8,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,
+	0x6035108,0x6804009,0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x6432434,0xaa0c034,
+	0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,0x0000000,
+	0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h
new file mode 100755
index 000000000000..6f82ae0c4357
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h
@@ -0,0 +1,384 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01b980,0x0000000,
+	0xc000ec0,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7af240,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc799cc0,0x0000000,0xc780a00,0x0000000,0xc78c100,0x64d3008,0xc799d00,0x0000000,
+	0xc7ac380,0x0000000,0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,
+	0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,
+	0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,
+	0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,
+	0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,
+	0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,
+	0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,
+	0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,
+	0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785640,0xa6080c8,
+	0xc782e00,0xa608348,0xc79b440,0xa608388,0xc79d500,0xc788440,0x0000000,0xc07ee80,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,
+	0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,
+	0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,
+	0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,
+	0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,
+	0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,
+	0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,
+	0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc786fc0,
+	0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,
+	0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,
+	0x80d1f40,0x7800048,0xc006800,0x441a208,0xc07d640,0x60d2108,0xc006700,0x6800008,
+	0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f30,0x80d5501,0x80d1f20,0x80d1f20,
+	0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
+	0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,
+	0xc785b80,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,
+	0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,
+	0x64f4008,0x9c08048,0x60f4008,0xc017400,0x0000000,0x6498e08,0x9c08788,0x6098e08,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc017a00,
+	0x0000000,0xc017000,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,0x60f4908,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc07bb80,
+	0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,0x9010208,
+	0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
+	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
+	0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af80,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,0x7c00588,
+	0x68002a3,0xc01c900,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,
+	0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc018d80,0x7c005c8,0x60f1c0b,0x7800049,
+	0xc003880,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0xc07a600,0x80d2100,0x80d5500,
+	0xc07a540,0x80d2100,0xc07a4c0,0x80d2100,0x64acd08,0x60f4208,0xc003700,0x0000000,
+	0x680d343,0x681a704,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,
+	0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc783040,0x8030502,0xc015840,
+	0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc014bc0,0x0000000,0x6498e08,0x9808788,
+	0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,
+	0xc0151c0,0x0000000,0xc0147c0,0x0000000,0xc079540,0x0000000,0x64d3109,0x9010209,
+	0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,
+	0x7c00348,0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,
+	0x8098002,0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,
+	0x9c084c8,0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,
+	0x60f1508,0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,
+	0x9808648,0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,
+	0xc078940,0x60d2108,0xc0788c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
+	0x946d209,0x60d3208,0xc0786c0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
+	0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,
+	0x78005c8,0xc780580,0x7c00588,0xc019e80,0x0000000,0x7804009,0x90c1209,0x7c007c8,
+	0x9006209,0x7c00608,0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc016300,0x7c005c8,
+	0x60f1d0b,0x6940009,0x6c00009,0x20097c9,0x60f2009,0x6800009,0x60f1e09,0x7800049,
+	0xc000c80,0x2408248,0xc077ac0,0x60d2108,0x80d3d00,0x80d5300,0xc0779c0,0x80d2101,
+	0x80d5501,0x6803fc8,0x6ffffc8,0x60f4208,0xc001a40,0x0000000,0x6811603,0x681b684,
+	0x64d3308,0x9010208,0xaa14008,0x0000000,0x80ac005,0xc780640,0x8030502,0x6800008,
+	0x6c00448,0x60d3008,0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,
+	0x60d0008,0x9808008,0x9808048,0x9808088,0x98080c8,0x98081c8,0x60d0008,0x6800048,
+	0x7800309,0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,
+	0xc7f6880,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
+	0xcc00000,0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,
+	0x680000b,0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,
+	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,
+	0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,
+	0x680800d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,
+	0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,
+	0x60d3919,0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,
+	0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800023,0x6800028,
+	0x6800029,0x6bfffd8,0x6c00018,0x4000918,0x6800019,0x6c00019,0x4000699,0x6800009,
+	0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
+	0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,
+	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
+	0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,
+	0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,
+	0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,
+	0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,
+	0x680000e,0xa822388,0x64d370e,0x78009c8,0xaa2c008,0xa624048,0x6800008,0x80d3000,
+	0x80d300f,0x64d0009,0x9c09149,0x60d0009,0xc7f3d80,0x7c009c8,0x7c009c8,0xb60c223,
+	0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,
+	0x6800009,0x7c00a49,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,
+	0x7c00709,0xcb80003,0x64d390f,0xc7f37c0,0x0000000,0x60d3718,0x64d3510,0x908c250,
+	0xa620009,0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,
+	0x9004250,0xaa10249,0x80d3601,0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,
+	0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,
+	0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,
+	0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,
+	0x7800649,0x680000a,0xa408289,0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015840,
+	0x0000000,0xc780400,0x78005c9,0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,
+	0x64d3e08,0x9008208,0xaafbfc8,0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,
+	0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
+	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
+	0x80d360f,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
+	0x960f248,0x60f1e09,0xc015d00,0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,
+	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
+	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
+	0xb40d248,0x7800309,0xb40b248,0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,
+	0x7000299,0x400128a,0x700028f,0xc7f15c0,0x961064f,0x908c210,0x7800289,0x2409248,
+	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
+	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
+	0x200e7ce,0x780028f,0x54033cf,0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb83e248,
+	0x4001208,0x920c210,0x7800349,0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,
+	0x64ad50a,0x901028a,0xa433288,0x6800008,0xc011bc0,0x0000000,0x80ac00d,0xc7f06c0,
+	0x8030502,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,
+	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
+	0x0000000,0xc00c180,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,
+	0x7c00208,0x80d3300,0x80ac009,0xc7efbc0,0x8007801,0x7c00288,0x403f248,0x7c002c9,
+	0x5403208,0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
+	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fdd40,0x680c00a,
+	0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,
+	0x60d4d1e,0x60d3718,0x5401a28,0x9402a29,0x6800029,0x78006c9,0xa638009,0x60d3919,
+	0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,
+	0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x7800789,0x680000a,0xa842289,0x7800a89,
+	0x60d2109,0x80d2001,0x80d5300,0x6800009,0x7c00a89,0x7800a09,0x680024a,0xa826289,
+	0x64d3e09,0x9008249,0xbe14809,0x680038a,0xbe0c409,0x680028a,0x680018a,0xa20c3c9,
+	0x0000000,0x400c28a,0x64d3c09,0x9002249,0x200a24a,0x64d2009,0xbefc049,0x0000000,
+	0x60d210a,0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,
+	0x0000000,0x688888b,0x64d3709,0x941024b,0x60d3709,0x64d3809,0x941024b,0x60d3809,
+	0x80d3601,0x0000000,0x60d320a,0xc780d40,0x80d3603,0x64d2009,0xbefc049,0x0000000,
+	0x80d2105,0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,
+	0x0000000,0x80d3601,0x0000000,0x60d320a,0x80d3602,0x80d3603,0xc780880,0x80d3604,
+	0x9004228,0xa60c008,0xc780640,0x80d5201,0x78006c9,0xa224208,0x780030a,0xb807289,
+	0x4807208,0xa614008,0xc018280,0x0000000,0xc7803c0,0x0000000,0xa62c009,0x0000000,
+	0x4c01208,0x64d3209,0x9c09009,0x60d3209,0x6bfffca,0x6c0000a,0x60d380a,0x9809009,
+	0x60d3209,0xc016300,0x0000000,0x80d3607,0x80d3601,0x80d3608,0x80d3609,0x80d3604,
+	0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,
+	0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,
+	0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,
+	0x7800649,0x680000a,0xa40d289,0x7800789,0x78007ca,0xa803289,0xc011780,0x0000000,
+	0x64f1d09,0x9205249,0x780060a,0xa804289,0xc00fe40,0x0000000,0xc7804c0,0x78005c9,
+	0x780058a,0xa810289,0x7800a08,0xaa30288,0x0000000,0x64d3e08,0x9008208,0xaafbfc8,
+	0xa61c008,0x7800588,0x78005c9,0xc010dc0,0x2408209,0xc780100,0x0000000,0x78005c9,
+	0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
+	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
+	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
+	0x80d360f,0x78009c9,0x680000a,0xa86a289,0x680004a,0xa446289,0xc010c40,0x681a844,
+	0x64f1509,0x9c09449,0x60f1509,0x9809449,0x60f1509,0x80d3609,0x64d0009,0x9c09049,
+	0x60d0009,0x9809049,0x60d0009,0x6800009,0x780030a,0x946d24a,0x60d3209,0x6800223,
+	0x64d5309,0x7c00a89,0x78006e6,0x7800327,0xb8059e6,0x6bfffe6,0x6c00026,0x60d3826,
+	0x6800018,0x60d3718,0x68888a7,0x64d4e26,0x93e19a6,0x96619e6,0x64d4f26,0x93e19a6,
+	0x96419e6,0x64d5026,0x93e19a6,0x96219e6,0x64d5126,0x93e19a6,0x96019e6,0x60d3827,
+	0x64f1509,0x9c09589,0x60f1509,0xc010700,0x0000000,0x6490b09,0x9c09609,0x9c09649,
+	0x6090b09,0x64f1509,0x9c095c9,0x9c09609,0x9c09649,0x9c096c9,0x9809509,0x98094c9,
+	0x64f1f08,0x9383208,0xa6f8008,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x9809589,0xc780900,0x60f1509,0xc00fb00,0x681b684,0x6800049,0x780030a,0x946d24a,
+	0x60d3209,0x68001e3,0x9829029,0x64d3727,0x92619a7,0x541f9a6,0x60d4e26,0x92419a7,
+	0x541f9a6,0x60d4f26,0x92219a7,0x541f9a6,0x60d5026,0x92019a7,0x541f9a6,0x60d5126,
+	0x6490b09,0x9809609,0x9c09649,0x6090b09,0x64f1509,0x98095c9,0x9809609,0x9809649,
+	0x98096c9,0x9c09509,0x9c094c9,0x9c09749,0x60f1509,0x78007c9,0x7c00789,0x78006c9,
+	0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,
+	0xc00e180,0x0000000,0x78006c8,0xaa10008,0x680bfca,0xc0016c0,0x4401208,0x78006c8,
+	0x7800309,0xb844248,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x7800709,0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,
+	0x2409289,0x64ad50a,0x921028a,0xa410289,0xc00b640,0x0000000,0x80ac00e,0xc7e9ac0,
+	0x8030502,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
+	0x0000000,0xc7f9200,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,
+	0x64d3725,0xb60c223,0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,
+	0xaa0c188,0x6800049,0x6800009,0x7c00a49,0xc000900,0x7800308,0xc001500,0x6800011,
+	0x6a00014,0x6d00014,0x60d4d14,0xc001f00,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,
+	0x60d4d1e,0x9402a29,0x6800029,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,
+	0x78002c9,0xb004248,0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,
+	0xaa18008,0xa614048,0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8b00,0x0000000,
+	0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,
+	0x960f466,0x90109a5,0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,
+	0x92219a5,0x541f4e6,0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,
+	0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,
+	0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,
+	0xcc00000,0x7400294,0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,
+	0x200e7ce,0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,
+	0x603520d,0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,
+	0x2008248,0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
+	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,
+	0x700029a,0x400128a,0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,
+	0x400128a,0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,
+	0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,
+	0x7000289,0x9610789,0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,
+	0x68888a4,0x93e199b,0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,
+	0xcc00000,0x9601926,0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,
+	0x9829069,0xcc00000,0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,
+	0xc7e6480,0x0000000,0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e62c0,
+	0x0000000,0x7800ac9,0xaa10009,0x6800049,0xc7e6180,0x7c00b09,0x93e1248,0xaa10009,
+	0x9042248,0xc7e6040,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,
+	0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,
+	0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,
+	0xa4032cc,0x0000000,0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,
+	0xa403248,0x0000000,0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,
+	0x980a54a,0x980a7ca,0x60f1f0a,0x681a84a,0xa404284,0x680004a,0xc012000,0x7c00aca,
+	0xc7e5480,0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e5300,0x0000000,
+	0x920c248,0x780034a,0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,
+	0x948c209,0x60f4b08,0xc7e5000,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,
+	0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,0x40002ca,
+	0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,
+	0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
+	0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,
+	0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,
+	0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,
+	0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,
+	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,
+	0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,
+	0x440128a,0xcc00000,0x0000000,0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,
+	0xc7e7e00,0x6001008,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
+	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,
+	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
+	0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc063840,0x60d2108,0xc0637c0,0x80d2107,
+	0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
+	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
+	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc063200,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,
+	0x78001c8,0xc062f00,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
+	0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,
+	0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc000f80,0x9206208,0x60f1c0b,0x64ad008,
+	0x9206208,0x7800049,0xc06ba00,0x2408248,0xc062840,0x60d2108,0xc0627c0,0x80d2100,
+	0x80d5500,0xc062700,0x80d2100,0xc062680,0x80d2100,0xc06b940,0x0000000,0x680d343,
+	0x681a704,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,
+	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,
+	0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7eb000,0x8030502,
+	0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6498e08,
+	0x9808788,0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,
+	0xc7e8d80,0x6001008,0x5401248,0x2009209,0x681f7ca,0x2009289,0xcb80009,0x680000b,
+	0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,
+	0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,
+	0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,
+	0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,
+	0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,
+	0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,
+	0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,
+	0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,
+	0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,
+	0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,
+	0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,
+	0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,
+	0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,
+	0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,
+	0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,
+	0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,
+	0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,
+	0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,
+	0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,
+	0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc07ac40,0x0000000,
+	0x7800709,0x4001249,0x780030a,0x400128a,0xe00024a,0x80d1f30,0x6bc0008,0x60d1f08,
+	0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,
+	0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,
+	0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc07a000,
+	0x0000000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x7800708,0x7800349,0xb809248,
+	0x6804008,0x6800409,0x680080a,0x740020a,0xd07ffc9,0x4001208,0xcc00000,0x0000000,
+	0x6435008,0x580f208,0xbecc048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,
+	0x5801249,0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,
+	0x6be4008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,
+	0xc07be80,0x7800608,0x64d3e08,0x9008288,0xaafbfca,0x0000000,0x60f1c0b,0x7800a08,
+	0xaa10288,0xa60c00a,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc001500,0x2408248,
+	0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0xc07b940,0x7800608,0x64f1d0a,
+	0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae14049,0x80f2308,
+	0x7800588,0xcc00000,0x7c005c8,0x64f2408,0x91e2208,0xaa18048,0x64d3e08,0x9008388,
+	0xa60ffce,0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xaa17fc8,
+	0x64d3e08,0x9008208,0xaaebfce,0x0000000,0x60f1d0b,0xa60ffce,0x64d3e08,0x9008388,
+	0x7800a08,0xaa10288,0xa60c00e,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc0008c0,
+	0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0x78006c8,0x4001208,
+	0x7800309,0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,0xc07e3c0,0x0000000,
+	0x7804009,0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,0x5801248,0x680400a,
+	0x2009289,0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,0x9006209,0x7c007ca,
+	0xcc00000,0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,0xc780100,
+	0x4401308,0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,0x7800309,0xb003248,
+	0x0000000,0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,0x6800049,0xcc00000,
+	0x7c009c9,0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,0x7c009c9,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x80f2306,0x64f2409,
+	0x90c2249,0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,0x6490b09,0x9809009,
+	0x98090c9,0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,0x0000000,0x6803c0e,
+	0x78006c9,0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,0x400128a,0x950c389,
+	0xa60c009,0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,0x980e58e,0x64d3308,
+	0x9108208,0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,0x7800709,0x5404209,
+	0x64acc0a,0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,0x20262e6,0x20262a6,
+	0x7800709,0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,0x540428a,0xf0002c0,
+	0x20102d0,0x2010290,0x78006ca,0x400128a,0x7800309,0x4001249,0xb80424a,0x7800708,
+	0x4001208,0x240a24a,0x2420289,0x64ac32d,0x5404208,0x64acc09,0x242d26d,0xe000248,
+	0x540428a,0x202d2ad,0xf0002c0,0x202d2ed,0x78006ca,0x400128a,0x7800309,0x4001249,
+	0xb80424a,0x7800708,0x4001208,0x240a24a,0x2422289,0x64ac42e,0x5403208,0x64acc09,
+	0x242e26e,0xe000248,0x540428a,0x202e2ae,0xf0002c0,0x202e2ee,0x694002f,0x6c0002f,
+	0x202f7ef,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,0x5405249,
+	0x202f26f,0xc075980,0x0000000,0x680830a,0x680020c,0x6035126,0x8035208,0x6b0a008,
+	0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,
+	0x6035126,0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x780a1cb,0x95082c9,0x740028b,0xa60c14c,0x0000000,0x440828a,
+	0xd07f94c,0x400128a,0x680800a,0x680010c,0x6035110,0x8035208,0x6b0a008,0x6035008,
+	0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,0x6035110,
+	0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0x780a1cb,0x9008209,0x910834b,0x940824d,0x95082c8,0x740028b,0x400428a,
+	0x7400289,0xd07f8cc,0x440328a,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,
+	0x2409209,0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,0x6035108,0x8035210,
+	0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,
+	0xa6f800d,0x0000000,0xc006180,0x60f1f0e,0x64d3c08,0x9004208,0xaa0c048,0x6800049,
+	0x68000c9,0x7c00b49,0xc004900,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0xc004cc0,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xc005380,0x0000000,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,
+	0x7800b49,0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,
+	0xb220049,0x60f1f0e,0x4401249,0x7c00b49,0xc005700,0x0000000,0xc7ff700,0x4420bef,
+	0xc003f80,0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,
+	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
+	0xc0031c0,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,
+	0x78006c8,0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,
+	0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,
+	0x60d510a,0xc002980,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,
+	0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,
+	0x68fffc9,0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,
+	0xb807289,0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,
+	0x60d5109,0x64d320a,0x69ffe49,0x60d3209,0xc001ec0,0x80d5201,0xcc00000,0x60d320a,
+	0x64d3309,0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,
+	0x64d4a09,0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,
+	0x90612a8,0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,
+	0x60d4c09,0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,
+	0x60d3209,0xc001580,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,
+	0x91e12eb,0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,
+	0x920f289,0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,
+	0xaa2400a,0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,
+	0x960facb,0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,
+	0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,
+	0xc7fd580,0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,
+	0x680002b,0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x60d4a2a,
+	0x60d4b2a,0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,0x60d4e2c,
+	0x60d4f2c,0x60d502c,0x60d512c,0xc000300,0x80d5201,0x64d4a0a,0x60d4a0a,0x60d4b0a,
+	0x60d4c0a,0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x80d5602,
+	0x64d5709,0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,0x8006402,0x7800acf,
+	0xa60c00f,0xc7d3c40,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xa61804f,
+	0x6800088,0xc000a80,0x7c00ac8,0xc7d39c0,0x0000000,0xa61808f,0x68000c8,0xc001140,
+	0x7c00ac8,0xc7d3840,0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,
+	0x7800b09,0xaa0c009,0x7c00ac8,0x8030508,0xc7d3580,0x0000000,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x603512d,0x8035208,0x6b08808,0x6035008,0x4401820,0x4010b6d,
+	0xaa0c020,0xcc00000,0x0000000,0x7800320,0x4001820,0x5404220,0x242d22d,0x64acc08,
+	0x5404208,0xcc00000,0x202d22d,0x603512e,0x8035208,0x6b09008,0x6035008,0x7808908,
+	0x7c08208,0x7808948,0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,
+	0x7c08308,0x7808848,0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0x44018a2,
+	0x4010bae,0xaa0c022,0xcc00000,0x0000000,0x7800322,0x40018a2,0x5404222,0x242e22e,
+	0x64acc08,0x5403208,0xcc00000,0x202e22e,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x6809008,0x680800e,0x6800109,0x700020a,0x90082ca,0x4001208,0x700020c,0x910834c,
+	0x950830b,0x740038c,0x400438e,0x940828d,0x740038a,0x440338e,0xd07fd49,0x4001208,
+	0x6940008,0x6c00008,0x20087c8,0x7800309,0x4001249,0x5405249,0x2008248,0xb80322f,
+	0x0000000,0x242f26f,0x603512f,0x8035210,0x6a08008,0x6035008,0xcc00000,0x4020bef,
+	0x64f1508,0x9c08308,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9808508,0x98084c8,
+	0x60f1508,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
+	0x960f248,0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,0x0000000,0x80d300f,0x80f4003,
+	0x64f1508,0x9808248,0x9c08508,0x9c084c8,0x60f1508,0x64d0009,0x9c09009,0x60d0009,
+	0x9809009,0x60d0009,0x9c08248,0x9808508,0x98084c8,0x9808308,0x60f1508,0xcc00000,
+	0x80f4000,0x6432434,0xaa0c034,0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,
+	0xaa14134,0xaa100f4,0x0000000,0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h
new file mode 100755
index 000000000000..9a566aeb2d26
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h
@@ -0,0 +1,382 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01bf40,0x0000000,
+	0xc000ec0,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7aed00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc79a280,0x0000000,0xc78c080,0x64d3008,0xc780980,0x0000000,0xc79a2c0,0x0000000,
+	0xc7ac000,0x0000000,0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,
+	0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,
+	0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,
+	0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,
+	0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,
+	0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,
+	0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,
+	0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,
+	0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785480,0xa6080c8,
+	0xc782e00,0xa608348,0xc79bb80,0xa608388,0xc79da80,0xc788340,0x0000000,0xc07ee80,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,
+	0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,
+	0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,
+	0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,
+	0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,
+	0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,
+	0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,
+	0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc786ec0,
+	0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,
+	0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,
+	0x80d1f40,0x7800048,0xc006700,0x441a208,0xc07d640,0x60d2108,0xc006600,0x6800008,
+	0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,
+	0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
+	0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,
+	0xc785a80,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,
+	0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,
+	0x64f4008,0x9c08048,0x60f4008,0xc017a40,0x0000000,0x6498e08,0x9c08788,0x6098e08,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc018140,
+	0x0000000,0xc017640,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,0x60f4908,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc07bb80,
+	0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,0x9010208,
+	0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
+	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
+	0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af80,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,0x7c00588,
+	0x68002a3,0xc01cdc0,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,
+	0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc019240,0x7c005c8,0x60f1c0b,0x7800049,
+	0xc003780,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc0037c0,
+	0x0000000,0x680d483,0x681acc4,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,
+	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc783100,0x8030504,
+	0xc016140,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc0153c0,0x0000000,0x6490b08,
+	0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc015b80,0x0000000,
+	0xc015080,0x0000000,0xc0797c0,0x0000000,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
+	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,0x8098000,
+	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
+	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,
+	0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,
+	0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc078bc0,0x60d2108,
+	0xc078b40,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
+	0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6800009,0x60f1e09,0xc0787c0,0x80d2100,
+	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,
+	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
+	0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780640,0x7c00588,0xc01a440,
+	0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,0x91c1209,0x7c00788,
+	0x9106209,0x7c00588,0xc0168c0,0x7c005c8,0x60f1d0b,0x92c620b,0x920624b,0x94c6209,
+	0x7800789,0x9581209,0x60d2408,0x680002e,0x60d232e,0x78005c8,0x7800049,0xc000bc0,
+	0x2408248,0xc077b00,0x60d2108,0x80d3d00,0x80d5300,0x6803fc8,0x6ffffc8,0x60f4208,
+	0xc001a40,0x0000000,0x6811743,0x681bc44,0x64d3308,0x9010208,0xaa14008,0x0000000,
+	0x80ac005,0xc780640,0x8030504,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9c08008,
+	0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,0x9808048,0x9808088,
+	0x98080c8,0x98081c8,0x60d0008,0x6800048,0x7800309,0x948c209,0x60f4b08,0x80ac005,
+	0xc780080,0x8030504,0x0800000,0x7800008,0xc7f6980,0x6030408,0x6800009,0xb005248,
+	0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffd8,0x6c00018,
+	0x6800009,0x6800019,0x6c00019,0x4000699,0x680000b,0x680c00e,0x680100f,0x7400398,
+	0x400138e,0x7400389,0x400138e,0x7400399,0x400138e,0x740038b,0x400138e,0xaee004f,
+	0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffc00,0x200e34e,0x64d330d,
+	0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,0xc7fff40,0x40403cf,
+	0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,0x60d3919,0x60d3818,0x60d3a19,0xcc00000,
+	0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,
+	0x6d0001e,0x690000a,0x6800023,0x6800028,0x6800029,0x6bfffd8,0x6c00018,0x4000918,
+	0x6800019,0x6c00019,0x4000699,0x6800009,0x680c00e,0x680064f,0x7400399,0x400138e,
+	0x7400389,0x400138e,0x740039b,0x400138e,0x740038a,0x400138e,0x740039c,0x400138e,
+	0x740038a,0x400138e,0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,
+	0x740038a,0x400138e,0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
+	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,
+	0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,
+	0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,
+	0x60d501d,0x60d511e,0xcc00000,0x0000000,0x680000e,0xa82b388,0x64d370e,0x78009c8,
+	0xaa2c008,0xa624048,0x6800008,0x80d3000,0x80d300f,0x64d0009,0x9c09149,0x60d0009,
+	0xc7f3e80,0x7c009c8,0x7c009c8,0xb60c223,0x4001223,0x4401223,0xba18188,0x40008c8,
+	0xb614288,0x6800049,0xaa0c188,0x6800049,0x6800009,0x7c00a49,0xc012bc0,0x78005c8,
+	0x92c620b,0x920624b,0x94c6209,0x7800789,0x9581209,0x60d2408,0x60d232e,0x64d3508,
+	0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,0xcb80003,0x64d390f,
+	0xc7f3680,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,0x60d3919,0x6bfffc9,
+	0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa10249,0x80d3601,
+	0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,0x6800008,0x7c00748,0x7800648,
+	0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,
+	0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,
+	0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800649,0x680000a,0xa408289,
+	0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015bc0,0x0000000,0xc780400,0x78005c9,
+	0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,0x64d3e08,0x9008208,0xaafbfc8,
+	0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,0x7c00589,0x7800748,0xaa5c008,
+	0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
+	0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,
+	0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,0x80d360f,0x78006c9,0x7800708,
+	0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0xc016080,
+	0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,
+	0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,
+	0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,
+	0xc7f1480,0x961064f,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,
+	0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,
+	0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb83e248,0x4001208,0x920c210,0x7800349,
+	0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa433288,
+	0x6800008,0xc011f40,0x0000000,0x80ac00d,0xc7f0580,0x8030504,0x80d3000,0x80d1f30,
+	0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,
+	0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0xc00c780,0x0000000,
+	0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80d3300,0x80ac009,
+	0xc7efa80,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,
+	0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0xc7fdd40,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,
+	0x64d4d14,0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d3718,0x5401a28,
+	0x9402a29,0x6800029,0x78006c9,0xa638009,0x60d3919,0x6a00009,0x6d00009,0x60d4e09,
+	0x60d4f09,0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,
+	0x60d3a09,0x7800789,0x680000a,0xa842289,0x7800a89,0x60d2109,0x80d2001,0x80d5300,
+	0x6800009,0x7c00a89,0x7800a09,0x680024a,0xa826289,0x64d3e09,0x9008249,0xbe14809,
+	0x680038a,0xbe0c409,0x680028a,0x680018a,0xa20c3c9,0x0000000,0x400c28a,0x64d3c09,
+	0x9002249,0x200a24a,0x64d2009,0xbefc049,0x0000000,0x60d210a,0x80d2001,0x64d320a,
+	0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x688888b,0x64d3709,
+	0x941024b,0x60d3709,0x64d3809,0x941024b,0x60d3809,0x80d3601,0x0000000,0x60d320a,
+	0xc7810c0,0x80d3603,0x64d2009,0xbefc049,0x0000000,0x80d2105,0x80d2001,0x64d320a,
+	0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x80d3601,0x0000000,
+	0x60d320a,0x80d3602,0x80d3603,0xc780c00,0x80d3604,0x78005c9,0x780058a,0xa80c289,
+	0x0000000,0x64d3e09,0x9008249,0xaafbfc9,0xa61c009,0x0000000,0x64d2309,0x920c249,
+	0x64d240a,0x940c289,0x60d240a,0x9004228,0xa60c008,0xc780640,0x80d5201,0x78006c9,
+	0xa224208,0x780030a,0xb807289,0x4807208,0xa614008,0xc017580,0x0000000,0xc7803c0,
+	0x0000000,0xa62c009,0x0000000,0x4c01208,0x64d3209,0x9c09009,0x60d3209,0x6bfffca,
+	0x6c0000a,0x60d380a,0x9809009,0x60d3209,0xc015600,0x0000000,0x80d3607,0x80d3601,
+	0x80d3608,0x80d3609,0x80d3604,0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,
+	0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,
+	0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,
+	0x0000000,0x80d3606,0x80d360f,0x7800649,0x680000a,0xa40d289,0x7800789,0x78007ca,
+	0xa803289,0xc011d40,0x0000000,0x64f1d09,0x9205249,0x780060a,0xa804289,0xc00fe40,
+	0x0000000,0xc7804c0,0x78005c9,0x780058a,0xa810289,0x7800a08,0xaa30288,0x0000000,
+	0x64d3e08,0x9008208,0xaafbfc8,0xa61c008,0x7800588,0x78005c9,0xc011380,0x2408209,
+	0xc780100,0x0000000,0x78005c9,0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,
+	0x64d3e09,0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
+	0x6800009,0x7c00749,0x80d3606,0x80d360f,0x78009c9,0x680000a,0xa86a289,0x680004a,
+	0xa446289,0xc011200,0x681ae04,0x64f1509,0x9c09449,0x60f1509,0x9809449,0x60f1509,
+	0x80d3609,0x64d0009,0x9c09049,0x60d0009,0x9809049,0x60d0009,0x6800009,0x780030a,
+	0x946d24a,0x60d3209,0x6800223,0x64d5309,0x7c00a89,0x78006e6,0x7800327,0xb8059e6,
+	0x6bfffe6,0x6c00026,0x60d3826,0x6800018,0x60d3718,0x68888a7,0x64d4e26,0x93e19a6,
+	0x96619e6,0x64d4f26,0x93e19a6,0x96419e6,0x64d5026,0x93e19a6,0x96219e6,0x64d5126,
+	0x93e19a6,0x96019e6,0x60d3827,0x64f1509,0x9c09589,0x60f1509,0xc010cc0,0x0000000,
+	0x6490b09,0x9c09609,0x9c09649,0x6090b09,0x64f1509,0x9c095c9,0x9c09609,0x9c09649,
+	0x9c096c9,0x9809509,0x98094c9,0x64f1f08,0x9383208,0xa6f8008,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x9809589,0xc780900,0x60f1509,0xc0100c0,0x681bc44,
+	0x6800049,0x780030a,0x946d24a,0x60d3209,0x68001e3,0x9829029,0x64d3727,0x92619a7,
+	0x541f9a6,0x60d4e26,0x92419a7,0x541f9a6,0x60d4f26,0x92219a7,0x541f9a6,0x60d5026,
+	0x92019a7,0x541f9a6,0x60d5126,0x6490b09,0x9809609,0x9c09649,0x6090b09,0x64f1509,
+	0x98095c9,0x9809609,0x9809649,0x98096c9,0x9c09509,0x9c094c9,0x9c09749,0x60f1509,
+	0x7800789,0x7c00b89,0x78007c9,0x7c00789,0x78006c9,0x7800708,0x780030a,0xb804289,
+	0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0xc00e100,0x0000000,0x78006c8,
+	0xaa10008,0x680bfca,0xc001740,0x4401208,0x78006c8,0x7800309,0xb846248,0x0000000,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,
+	0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,
+	0xa410289,0xc00b5c0,0x0000000,0x80ac00e,0xc7e9580,0x8030504,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7f8e00,0x0000000,
+	0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0xb60c223,0x4001223,
+	0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,0x6800009,
+	0x7c00a49,0xc000980,0x7800308,0xc001580,0x6800011,0x6a00014,0x6d00014,0x60d4d14,
+	0xc001f80,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x9402a29,0x6800029,
+	0x90212a8,0x9581b8a,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,
+	0xb004248,0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,0xaa18008,
+	0xa614048,0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8540,0x0000000,0x7800289,
+	0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,0x960f466,
+	0x90109a5,0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,0x92219a5,
+	0x541f4e6,0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,0x5810451,
+	0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,
+	0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,
+	0x7400294,0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,
+	0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,
+	0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,
+	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
+	0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,
+	0x400128a,0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,0x400128a,
+	0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,
+	0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,
+	0x9610789,0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,0x68888a4,
+	0x93e199b,0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,0xcc00000,
+	0x9601926,0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,0x9829069,
+	0xcc00000,0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e5ec0,
+	0x0000000,0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e5d00,0x0000000,
+	0x7800ac9,0xaa10009,0x6800049,0xc7e5bc0,0x7c00b09,0x93e1248,0xaa10009,0x9042248,
+	0xc7e5a80,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,0xaa0c049,
+	0x680348a,0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,0x78000c9,
+	0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,0xa4032cc,
+	0x0000000,0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,
+	0x0000000,0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,
+	0x980a7ca,0x60f1f0a,0x681ae0a,0xa404284,0x680004a,0xc0115c0,0x7c00aca,0xc7e4ec0,
+	0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e4d40,0x0000000,0x920c248,
+	0x780034a,0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,0x948c209,
+	0x60f4b08,0xc7e4a40,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,0x6094008,
+	0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0x6803c08,0x60d2208,
+	0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000c40,0x0000000,0x780034a,0x400128a,
+	0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,
+	0x780030a,0x541028a,0x980a7ca,0x609300a,0x681010a,0x6c3474a,0x609070a,0x6490b0a,
+	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,
+	0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,0x780030a,0x400128a,
+	0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,0x0000000,0x8095003,0x8095000,
+	0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,0xa21004a,
+	0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,
+	0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,
+	0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,
+	0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,0xc7e76c0,0x6001008,0x6bc0008,
+	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
+	0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,0x6a19408,0x60d1f08,0x64d1e08,
+	0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,
+	0x9210208,0xc063100,0x60d2108,0xc063080,0x80d2107,0x6800008,0x60f1b08,0x7800309,
+	0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,
+	0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,
+	0x960f248,0x60f1e09,0xc062ac0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
+	0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,0x78001c8,0xc0627c0,0x60d2108,
+	0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800249,
+	0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,0xc780240,0x9206208,0x80d1f20,
+	0x64ad008,0xc000d00,0x9206208,0x60f1c0b,0x64ad008,0x9206208,0x7800049,0xc06b1c0,
+	0x2408248,0xc062100,0x60d2108,0xc06b2c0,0x0000000,0x680d483,0x681acc4,0x80d300f,
+	0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,
+	0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,0x9808048,0x60d0008,
+	0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7ea980,0x8030504,0x6490b08,0x9808008,
+	0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6490b08,0x9808608,0x9c08648,
+	0x6090b08,0x6401008,0x9808008,0xc7e8640,0x6001008,0x5401248,0x2009209,0x681fc8a,
+	0x2009289,0xcb80009,0x680000b,0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,
+	0x688080b,0xcc00000,0x6c0208b,0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,
+	0x6c0410b,0x694140b,0xcc00000,0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,
+	0xcc00000,0x6c071cb,0x688484b,0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,
+	0x690504b,0xcc00000,0x6c0a28b,0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,
+	0x6c0c30b,0x684848b,0xcc00000,0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,
+	0xcc00000,0x6c0f3cb,0x690908b,0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,
+	0x680c0cb,0xcc00000,0x6c1248b,0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,
+	0x6c1450b,0x68ccccb,0xcc00000,0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,
+	0xcc00000,0x6c175cb,0x681010b,0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,
+	0x689090b,0xcc00000,0x6c1a68b,0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,
+	0x6c1c70b,0x695150b,0xcc00000,0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,
+	0xcc00000,0x6c1e7cb,0x685494b,0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,
+	0x689514b,0xcc00000,0x6c2088b,0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,
+	0x6c2290b,0x691458b,0xcc00000,0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,
+	0xcc00000,0x6c239cb,0x681918b,0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,
+	0x68581cb,0xcc00000,0x6c25a8b,0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,
+	0x6c25b0b,0x6898dcb,0xcc00000,0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,
+	0xcc00000,0x6c26bcb,0x68d820b,0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,
+	0x68d8a0b,0xcc00000,0x6c27c8b,0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,
+	0x9c08048,0x60f4008,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
+	0x0000000,0xc07aec0,0x0000000,0x7800709,0x4001249,0x780030a,0x400128a,0xe00024a,
+	0x80d1f30,0x6bc0008,0x60d1f08,0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,
+	0x6430008,0x78006c9,0x780070a,0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,
+	0x40012cb,0x4000309,0xe0002ca,0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,
+	0x961024b,0x60d3309,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
+	0x0000000,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
+	0x0000000,0x80d5300,0xc07a280,0x0000000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,
+	0x7800708,0x7800349,0xb809248,0x6804008,0x6800409,0x680080a,0x740020a,0xd07ffc9,
+	0x4001208,0xcc00000,0x0000000,0x6435008,0x580f208,0xbecc048,0x0000000,0x64ad608,
+	0x6035108,0x7800309,0x4001249,0x5801249,0x401f249,0x5805249,0x5405249,0x6035209,
+	0x5401249,0x2008248,0x60ad608,0x6be4008,0x6035008,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0xcc00000,0x0000000,0xc07be80,0x7800608,0x64d3e08,0x9008288,0xaafbfca,
+	0x0000000,0x60f1c0b,0x7800a08,0xaa10288,0xa60c00a,0x7800588,0x7c005c8,0x7800608,
+	0x78005c9,0xc001ac0,0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,
+	0xc07b940,0x7800608,0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,
+	0x6803fce,0xae14049,0x80f2308,0x7800588,0xcc00000,0x7c005c8,0x64f2408,0x91e2208,
+	0xaa18048,0x64d3e08,0x9008388,0xa60ffce,0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,
+	0x64f2408,0x9208208,0xaa17fc8,0x64d3e08,0x9008208,0xaaebfce,0x0000000,0x60f1d0b,
+	0xa60ffce,0x64d3e08,0x9008388,0x7800a08,0xaa10288,0xa60c00e,0x7800588,0x7c005c8,
+	0x7800608,0x78005c9,0xc000e80,0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,
+	0x7c005c8,0xc07ad00,0x7800588,0x92c620b,0x920624b,0x94c6209,0x7800b89,0x9581209,
+	0x5410b88,0x78006ca,0x680a009,0x2009289,0x64d2408,0x7400248,0x7800309,0xb80324a,
+	0x400128a,0x680000a,0x680a009,0x2009289,0x7000248,0x940cb88,0x9021228,0x9581b88,
+	0x78006c8,0x4001208,0x7800309,0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,
+	0xc07de00,0x0000000,0x7804009,0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,
+	0x5801248,0x680400a,0x2009289,0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,
+	0x9006209,0x7c007ca,0xcc00000,0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,
+	0x5401208,0xc780100,0x4401308,0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,
+	0x7800309,0xb003248,0x0000000,0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,
+	0x6800049,0xcc00000,0x7c009c9,0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,
+	0x7c009c9,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
+	0x80f2306,0x64f2409,0x90c2249,0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,
+	0x6490b09,0x9809009,0x98090c9,0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,
+	0x0000000,0x6803c0e,0x78006c9,0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,
+	0x400128a,0x950c389,0xa60c009,0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,
+	0x980e58e,0x64d3308,0x9108208,0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,
+	0x7800709,0x5404209,0x64acc0a,0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,
+	0x20262e6,0x20262a6,0x7800709,0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,
+	0x540428a,0xf0002c0,0x20102d0,0x2010290,0x780070a,0x6a0002d,0xa21004a,0x6c0002d,
+	0x698002d,0x6c0002d,0x202d7ed,0x78006ca,0x400328a,0x540528a,0x202d2ad,0x694002f,
+	0x6c0002f,0x202f7ef,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,
+	0x5405249,0x202f26f,0x78006c8,0x7800309,0xa403248,0x4001208,0x6800008,0x6493009,
+	0x9008249,0xa4fe209,0x6800209,0x680800a,0x8093100,0x6493208,0x92102c8,0x740028b,
+	0x400128a,0x90102c8,0x740028b,0xd07fe89,0x400128a,0x78006c9,0x4003249,0x7800308,
+	0xb003209,0x4001208,0x2409209,0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,
+	0x6035108,0x8035210,0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x643530d,0x900c34d,0xa6f800d,0x0000000,0xc0063c0,0x60f1f0e,0x64d3c08,0x9004208,
+	0xaa10048,0x6800049,0x4440b6d,0x68000c9,0x7c00b49,0xc004bc0,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0xc005280,0x0000000,0xc005680,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x7800b49,
+	0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,0xb220049,
+	0x60f1f0e,0x4401249,0x7c00b49,0xc005a00,0x0000000,0xc7ff800,0x4420bef,0xc004340,
+	0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,0x60d4a09,
+	0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0xc003680,
+	0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,0x78006c8,
+	0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
+	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,0x60d510a,
+	0xc002e40,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,0x68fffc9,
+	0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,0xb807289,
+	0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
+	0x64d320a,0x69ffe49,0x60d3209,0xc002380,0x80d5201,0xcc00000,0x60d320a,0x64d3309,
+	0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,0x64d4a09,
+	0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,0x90612a8,
+	0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,0x60d4c09,
+	0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,0x60d3209,
+	0xc001a40,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,0x91e12eb,
+	0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,0x920f289,
+	0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,0xaa2400a,
+	0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,0x960facb,
+	0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,0xa60c009,
+	0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,0xc7fd580,
+	0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,0x680002b,
+	0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x64d4a08,0x64d4e0a,
+	0x60d4a2a,0x60d4b2a,0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,
+	0x60d4e2c,0x60d4f2c,0x60d502c,0x60d512c,0xc000740,0x80d5201,0x60d4e0a,0x60d4f0a,
+	0x60d500a,0x60d510a,0x64d4a0a,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x80d5201,0x60d4e0a,0x60d4f0a,0x60d500a,0x60d510a,
+	0x60d4a0a,0x60d4b0a,0x60d4c0a,0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,
+	0x60d4d1e,0x80d5602,0x64d5709,0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,
+	0x8006402,0x7800acf,0xa60c00f,0xc7d3fc0,0x0000000,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0xa62004f,0xc000cc0,0x0000000,0x68000c8,0xc001080,0x7c00ac8,0xc7d3cc0,
+	0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,0x7800b09,0xaa0c009,
+	0x7c00ac8,0x8030508,0xc7d3a00,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x7800bc8,0x6a00009,0x6c00009,0x20097c9,0x200a209,0xb8072ad,0x240a2ad,0x6980009,
+	0x6c00009,0x20097c9,0xc780340,0x202d289,0xb40b26d,0x6980009,0x6c00009,0x20097c9,
+	0x200a209,0xb8062ad,0x240a2ad,0x6a00009,0x6c00009,0x20097c9,0x202d289,0x603512d,
+	0x8035210,0x6b08808,0x6035008,0xcc00000,0x4020b6d,0x7808908,0x7c08208,0x7808948,
+	0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,0x7c08308,0x7808848,
+	0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0xcc00000,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x7808a08,0x7c08108,0x7808a48,0x7c08148,0x7808a88,
+	0x7c08188,0x7808ac8,0x7c081c8,0x7808b08,0x7c08008,0x7808b48,0x7c08048,0x7808b88,
+	0x7c08088,0x7808bc8,0x7c080c8,0x6940008,0x6c00008,0x20087c8,0x7800309,0x4001249,
+	0x5405249,0x2008248,0xb80322f,0x0000000,0x242f26f,0x603512f,0x8035210,0x6a08008,
+	0x6035008,0xcc00000,0x4020bef,0x64f1508,0x9c08308,0x9c085c8,0x9c08608,0x9c08648,
+	0x9c086c8,0x9808508,0x98084c8,0x60f1508,0x78006c9,0x7800708,0x780030a,0xb804289,
+	0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,
+	0x0000000,0x80d300f,0x80f4003,0x64f1508,0x9808248,0x9c08508,0x9c084c8,0x60f1508,
+	0x64d0009,0x9c09009,0x60d0009,0x9809009,0x60d0009,0x9c08248,0x9808508,0x98084c8,
+	0x9808308,0x60f1508,0xcc00000,0x80f4000,0x6432434,0xaa0c034,0x8032400,0x6699334,
+	0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,0x0000000,0xc7ffd80,0x0000000,
+	0x8030504,0xc7ffcc0,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h b/drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h
new file mode 100755
index 000000000000..89a55599298e
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h
@@ -0,0 +1,141 @@
+const u32 MicroCode[] __attribute__((aligned(8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc00fc00,0x0000000,
+	0xc000e00,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0xc780e40,0x0000000,
+	0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0xc78eb00,0x0000000,0xc788e80,0x64d3008,0xc780880,0x0000000,0xc78eb40,
+	0x64f1f08,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
+	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
+	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0xcc00000,0x0000000,
+	0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,0x6432421,
+	0xaa0c021,0x8032400,0x6699321,0x64ac021,0xaaec021,0xaa34061,0xa60c0a1,0xc7816c0,
+	0x0000000,0xa60c121,0xc7844c0,0x0000000,0xa6100e1,0x0000000,0xc782980,0x0000000,
+	0xc7ffbc0,0x0000000,0xc07f580,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,
+	0x6a0a008,0x60d1f08,0xc07f400,0x80d2100,0x7800148,0x4404208,0xc07f300,0x60d2108,
+	0xc07f280,0x80d2100,0x7800108,0x4404208,0xc07f180,0x60d2108,0xc07f100,0x80d2101,
+	0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0xc07eec0,
+	0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0xc07ed00,0x60d2108,
+	0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,0xc7802c0,0x80d1f20,
+	0x80d1f30,0xc07ea40,0x80d2100,0xc07e9c0,0x80d2100,0xc07e940,0x80d2100,0xc07e8c0,
+	0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x80ac007,0x8007801,
+	0xc7fe7c0,0x0000000,0xc07e180,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e180,0x80d2100,0xc07e100,0x80d2100,
+	0x80d1f20,0x80d1f20,0xc07e000,0x80d2100,0xc07df80,0x80d2100,0xc07df00,0x80d2100,
+	0x80d1f20,0x80d1f40,0x7800048,0xc004080,0x441a208,0xc07dd40,0x60d2108,0xc003f80,
+	0x6800008,0xc07dc40,0x60d2108,0xc07dbc0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,
+	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
+	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
+	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
+	0x80ac008,0x8007801,0xc7fd340,0x0000000,0xc00c1c0,0x0000000,0x6490b08,0x9c08608,
+	0x9c08648,0x6090b08,0xc00cb00,0x0000000,0xc00bf40,0x0000000,0xc07ca80,0x0000000,
+	0x64ac408,0x4001208,0x60ac408,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,
+	0x9210208,0xc07c840,0x60d2108,0xc07c7c0,0x80d2107,0x6800008,0x7c00248,0x60f1b08,
+	0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x2008308,0x60f2008,0x6803908,
+	0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,
+	0x7800348,0x960f248,0x60f1e09,0xc07c1c0,0x80d2100,0x7800148,0x7800189,0x680040a,
+	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07bf40,0x60d2108,0x7800108,
+	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
+	0x64f1c08,0x9206208,0x7800049,0xc001e80,0x2408248,0xc07bb40,0x60d2108,0x80d3d00,
+	0xc001f40,0x0000000,0x68098c3,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,
+	0x60d0008,0x80ac005,0x8007801,0xc7fb900,0x0000000,0xc00a780,0x0000000,0x6490b08,
+	0x9808608,0x9c08648,0x6090b08,0xc00b0c0,0x0000000,0xc00a500,0x0000000,0xc07b040,
+	0x0000000,0x64f1508,0x9c08508,0x9c084c8,0x9c08588,0x9c08448,0x9c08488,0x60f1508,
+	0x9808488,0x9808448,0x98085c8,0x9808608,0x98086c8,0x60f1508,0x6bc0008,0x60d1f08,
+	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
+	0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,
+	0xc07ac80,0x60d2108,0xc07ac00,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
+	0x946d209,0x60d3208,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07a900,0x80d2100,
+	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,
+	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
+	0x80d1f20,0x64f1d08,0x9206208,0x7800049,0xc000640,0x2408248,0xc07a300,0x60d2108,
+	0x80d3d00,0x80d5300,0xc001480,0x0000000,0x680c383,0x6800008,0x6c00448,0x60d3008,
+	0x64d0008,0x9808008,0x9808048,0x9808088,0x60d0008,0x80ac005,0x8007801,0xc7fa000,
+	0x0000000,0x0800000,0x7800008,0xc7f9780,0x6030408,0x6800009,0xb005248,0x2409209,
+	0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffda,0x6c0001a,0x6800009,
+	0x680001b,0x6c0001b,0x400071b,0x680000b,0x680c00e,0x680100f,0x740039a,0x400138e,
+	0x7400389,0x400138e,0x740039b,0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,
+	0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x680400d,0x603520d,0x6a0c00d,
+	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,
+	0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,
+	0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d371a,0x60d391b,
+	0x60d381a,0x60d3a1b,0xcc00000,0x0000000,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,
+	0x6a0001f,0x6d0001f,0x6a00020,0x6d00020,0x690000a,0x680001b,0x6c0001b,0x400071b,
+	0x6800009,0x680c00e,0x680064f,0x740039b,0x400138e,0x7400389,0x400138e,0x740039d,
+	0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0x740039f,
+	0x400138e,0x740038a,0x400138e,0x74003a0,0x400138e,0x740038a,0x400138e,0xaeb004f,
+	0x44013cf,0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x6803e8d,0x603520d,
+	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,
+	0x6807d0d,0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,
+	0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d391b,
+	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x60d4a1d,0x60d4a1d,0x60d3a1b,0x60d4e1d,
+	0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,0x0000000,0xaa10008,0x64d370e,0xcb80003,
+	0x64d390f,0xc7f7200,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,0x60d391b,
+	0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,
+	0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,
+	0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0x680c10a,0x7800289,0xa814248,
+	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
+	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
+	0xb40d248,0x7800309,0xb40b248,0x700029a,0x400128a,0x700028e,0x961068e,0x400128a,
+	0x700029b,0x400128a,0x700028f,0xc7f6380,0x96106cf,0x908c210,0x7800289,0x2409248,
+	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
+	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
+	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
+	0x200e30e,0x780028f,0x54033cf,0x200e3ce,0x603510e,0x680400d,0x603520d,0x6a0c00d,
+	0x603500d,0x908c210,0x7800309,0xb830248,0x4001208,0x920c210,0x7800349,0xb82c248,
+	0x6800008,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,
+	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
+	0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80ac009,
+	0x8007801,0xc7f4e00,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,
+	0x6c0000e,0x200e30e,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fe1c0,0x680c00a,0x64d4a11,0x64d4b12,
+	0x64d4c13,0x64d4d14,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x64d3510,0x908c250,
+	0xa62c009,0x60d391b,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
+	0x6800009,0x6c00009,0x60d3a09,0x80d5201,0x80d3607,0x80d3601,0x80d3608,0x80d3609,
+	0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0xaa10008,0x680bfca,0xc000ec0,
+	0x4401208,0x908c210,0x7800309,0xb82b248,0x0000000,0x64d0009,0x9384249,0xa6f8009,
+	0x0000000,0x64d3609,0xa6ec009,0x0000000,0x920c290,0x7800349,0xb80c24a,0x0000000,
+	0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,
+	0xc7fe040,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,
+	0x7800308,0xc000e40,0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001740,0x680c00a,
+	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0xc780280,0x680c28a,0x401528a,0x908c210,
+	0x4002208,0x78002c9,0xb004248,0xc0009c0,0x908c450,0x680c50a,0xc001340,0x0000000,
+	0xc7f3040,0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,
+	0x200a289,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,
+	0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,
+	0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,
+	0xcc00000,0x7400294,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x540434f,0x54023cf,
+	0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x7c00291,
+	0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,0x200e30e,
+	0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,
+	0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,
+	0xbef804d,0xcc00000,0x0000000,0x40006dc,0x700029c,0x400128a,0x7000289,0x9610709,
+	0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,
+	0x7000289,0x9610789,0x400128a,0x700029f,0x400128a,0x7000289,0x96107c9,0x400128a,
+	0x70002a0,0x400128a,0x7000289,0xcc00000,0x9610809,0x64d1602,0x9162082,0xaa0c002,
+	0xc7fff40,0x0000000,0xc7f15c0,0x0000000,0x93e1248,0xaa10009,0x9042248,0xc7f1480,
+	0x0000000,0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,
+	0xb806248,0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x7c00088,0x950c288,
+	0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,0xa60c008,
+	0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7f0d40,0x0000000,0x64ac10c,0x680c008,
+	0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,
+	0x0000000,0xcc00000,0x0000000,0xc000cc0,0x0000000,0x64d310a,0x90102ca,0x400f2cb,
+	0x58042cb,0x44012cb,0x7c0030b,0x92102ca,0x400f2cb,0x58042cb,0x44012cb,0x7c0034b,
+	0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,
+	0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
+	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a30a,0x609440a,
+	0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,0xc0005c0,0x0000000,
+	0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,0x683ffc9,0x649090a,
+	0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,
+	0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,
+	0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/vh264_4k2k.c b/drivers/amlogic/amports/vh264_4k2k.c
index 19755bf388d6..2b15a379cd08 100755
--- a/drivers/amlogic/amports/vh264_4k2k.c
+++ b/drivers/amlogic/amports/vh264_4k2k.c
@@ -1363,7 +1363,7 @@ static int vh264_4k2k_stop(void)
 }
 
 #ifndef CONFIG_H264_4K2K_SINGLE_CORE
-#ifdef CONFIG_AM_ENCODER
+#if (HAS_VDEC2)&&(HAS_HDEC)
 extern void AbortEncodeWithVdec2(int abort);
 #endif
 #endif
@@ -1373,9 +1373,6 @@ static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
     struct resource *mem;
 
     printk("amvdec_h264_4k2k probe start.\n");
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    int count = 0;
-#endif
     mutex_lock(&vh264_4k2k_mutex);
     
     fatal_error = 0;
@@ -1397,6 +1394,10 @@ static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
     cma_dev = (struct device *)mem[2].start;
 
 #ifndef CONFIG_H264_4K2K_SINGLE_CORE
+#if (HAS_VDEC2)&&(HAS_HDEC)
+    if(get_vdec2_usage() != USAGE_NONE)
+        AbortEncodeWithVdec2(1);
+    int count = 0;
     while((get_vdec2_usage() != USAGE_NONE)&&(count < 10)){
         msleep(50);
         count++;
@@ -1414,8 +1415,9 @@ static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
     }
 
     set_vdec2_usage(USAGE_DEC_4K2K);
-
+    AbortEncodeWithVdec2(0);
     vdec_poweron(VDEC_2);
+#endif
 #endif
 
     vdec_power_mode(1);
@@ -1451,8 +1453,10 @@ static int amvdec_h264_4k2k_remove(struct platform_device *pdev)
 
 #ifndef CONFIG_H264_4K2K_SINGLE_CORE
     vdec_poweroff(VDEC_2);
+#if HAS_VDEC2
     set_vdec2_usage(USAGE_NONE);
 #endif
+#endif
 
 #ifdef DEBUG_PTS
     printk("pts missed %ld, pts hit %ld, duration %d\n",
diff --git a/drivers/amlogic/amports/vreal.c b/drivers/amlogic/amports/vreal.c
index d2abd4c7c079..74f65e23178b 100755
--- a/drivers/amlogic/amports/vreal.c
+++ b/drivers/amlogic/amports/vreal.c
@@ -38,7 +38,7 @@
 #include <linux/amlogic/amports/vframe_provider.h>
 #include <linux/amlogic/amports/vframe_receiver.h>
 #include <linux/module.h>
-
+#include <linux/delay.h>
 #include <asm/uaccess.h>
 
 #include "vdec.h"
@@ -789,6 +789,10 @@ void vreal_set_fatal_flag(int flag)
     }
 }
 
+#if (HAS_VDEC2)&&(HAS_HDEC)
+extern void AbortEncodeWithVdec2(int abort);
+#endif
+
 static int amvdec_real_probe(struct platform_device *pdev)
 {
     struct resource *mem;
@@ -804,9 +808,27 @@ static int amvdec_real_probe(struct platform_device *pdev)
 
     memcpy(&vreal_amstream_dec_info, (void *)mem[1].start, sizeof(vreal_amstream_dec_info));
 
+#if (HAS_VDEC2)&&(HAS_HDEC)
+    // disable vdec2 dblk when miracast.
+    if(get_vdec2_usage() != USAGE_NONE)
+        AbortEncodeWithVdec2(1);
+    int count = 0;
+    while((get_vdec2_usage() != USAGE_NONE)&&(count < 10)){
+        msleep(50);
+        count++;
+    }
+
+    if(get_vdec2_usage() != USAGE_NONE){
+        printk("\namvdec_real_probe --- stop vdec2 fail.\n");
+        return -EBUSY;
+    }
+#endif
+
     if (vreal_init() < 0) {
         printk("amvdec_real init failed.\n");
-
+#if (HAS_VDEC2)&&(HAS_HDEC)
+        AbortEncodeWithVdec2(0);
+#endif
         return -ENODEV;
     }
 
@@ -841,7 +863,9 @@ static int amvdec_real_remove(struct platform_device *pdev)
     rmparser_release();
 	
     amvdec_disable();
-
+#if (HAS_VDEC2)&&(HAS_HDEC)
+    AbortEncodeWithVdec2(0);
+#endif
     printk("frame duration %d, frames %d\n", frame_dur, frame_count);
     return 0;
 }
diff --git a/drivers/amlogic/video_dev/amlvideo2.c b/drivers/amlogic/video_dev/amlvideo2.c
index 39edbafeeb90..d09bd92a21b7 100755
--- a/drivers/amlogic/video_dev/amlvideo2.c
+++ b/drivers/amlogic/video_dev/amlvideo2.c
@@ -44,6 +44,7 @@
 #include <linux/amlogic/tvin/tvin_v4l2.h>
 #include <linux/amlogic/vout/vinfo.h>
 #include <linux/amlogic/vout/vout_notify.h>
+
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 #include <mach/mod_gate.h>
 #endif
@@ -52,8 +53,14 @@
 #include <linux/of_fdt.h>
 #endif
 
+#include <linux/semaphore.h>
+#include <linux/sched/rt.h>
+
 #define AVMLVIDEO2_MODULE_NAME "amlvideo2"
 
+//#define USE_SEMA_QBUF
+#define USE_VDIN_PTS
+
 //#define MUTLI_NODE
 #ifdef MUTLI_NODE
 #define MAX_SUB_DEV_NODE 2
@@ -129,7 +136,7 @@ MODULE_PARM_DESC(vid_limit, "capture memory limit in megabytes");
 
 static struct v4l2_fract amlvideo2_frmintervals_active = {
 	.numerator = 1,
-	.denominator = 30,
+	.denominator = DEF_FRAMERATE,
 };
 
 /* supported controls */
@@ -303,6 +310,10 @@ struct amlvideo2_node_dmaqueue {
 	/* thread for generating video stream*/
 	struct task_struct         *kthread;
 	wait_queue_head_t          wq;
+	unsigned char                task_running;
+#ifdef USE_SEMA_QBUF
+	struct semaphore         qbuf_sema;
+#endif
 };
 
 struct amlvideo2_device{
@@ -342,8 +353,8 @@ struct amlvideo2_node {
 	struct amlvideo2_fh *fh;
 	unsigned int input;			//0:mirrocast; 1:hdmiin
 	ge2d_context_t *context;
-        struct vdin_v4l2_ops_s  vops;
-        int                     vdin_device_num;
+	struct vdin_v4l2_ops_s  vops;
+	int                     vdin_device_num;
 };
 
 struct amlvideo2_fh {
@@ -394,7 +405,7 @@ int get_amlvideo2_canvas_index(struct amlvideo2_output* output, int start_canvas
 	unsigned buf = (unsigned)output->vbuf;
 	int width = output->width;
 	int height = output->height;
-        int canvas_height = height;
+	int canvas_height = height;
 	if(canvas_height%16 != 0)
                 canvas_height = ((canvas_height+15)>>4)<<4;
 
@@ -526,10 +537,10 @@ static int get_input_format(vframe_t* vf)
 	}
 	if(print_ifmt == 1){
 		printk("vf->type=%x, format=%x, w*h=%dx%d, canvas0=%x, canvas1=%x\n",
-                        vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
+			vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
 
-                printk("vf->type=%x, VIDTYPE_INTERLACE_BOTTOM=%x, VIDTYPE_INTERLACE_TOP=%x\n",
-                vf->type, VIDTYPE_INTERLACE_BOTTOM, VIDTYPE_INTERLACE_TOP);
+		printk("vf->type=%x, VIDTYPE_INTERLACE_BOTTOM=%x, VIDTYPE_INTERLACE_TOP=%x\n",
+			vf->type, VIDTYPE_INTERLACE_BOTTOM, VIDTYPE_INTERLACE_TOP);
 		print_ifmt = 0;
 	}
 	return format;
@@ -539,24 +550,24 @@ static int get_interlace_input_format(vframe_t* vf, struct amlvideo2_output* out
 {
 	int format= GE2D_FORMAT_M24_NV21;
 	if(vf->type&VIDTYPE_VIU_422){
-                format =  GE2D_FORMAT_S16_YUV422;
-                if(vf->height >= output->height<<2){
+		format =  GE2D_FORMAT_S16_YUV422;
+		if(vf->height >= output->height<<2){
 			format =  GE2D_FORMAT_S16_YUV422|(GE2D_FORMAT_S16_YUV422T & (3<<3));
-                }
+		}
 	}else if(vf->type&VIDTYPE_VIU_NV21){
-                format =  GE2D_FORMAT_M24_NV21;
-                if(vf->height >= output->height<<2){
+		format =  GE2D_FORMAT_M24_NV21;
+		if(vf->height >= output->height<<2){
 			format =  GE2D_FORMAT_M24_NV21|(GE2D_FORMAT_M24_NV21T & (3<<3));
-                }
+		}
 	} else{
-                format =  GE2D_FORMAT_M24_YUV420;
-                if(vf->height >= output->height<<2){
+		format =  GE2D_FORMAT_M24_YUV420;
+		if(vf->height >= output->height<<2){
 			format =  GE2D_FORMAT_M24_YUV420|(GE2D_FORMAT_M24_YUV420T & (3<<3));
-                }
+		}
 	}
 	if(print_ifmt == 1){
 		printk("vf->type=%x, format=%x, w*h=%dx%d, canvas0=%x, canvas1=%x\n",
-                        vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
+			vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
 		print_ifmt = 0;
 	}
 	return format;
@@ -566,15 +577,15 @@ static inline int get_top_input_format(vframe_t* vf)
 {
 	int format= GE2D_FORMAT_M24_NV21;
 	if(vf->type&VIDTYPE_VIU_422){
-                format =  GE2D_FORMAT_S16_YUV422|(GE2D_FORMAT_S16_YUV422T & (3<<3));
+		format =  GE2D_FORMAT_S16_YUV422|(GE2D_FORMAT_S16_YUV422T & (3<<3));
 	}else if(vf->type&VIDTYPE_VIU_NV21){
-                format =  GE2D_FORMAT_M24_NV21|(GE2D_FORMAT_M24_NV21T & (3<<3));
+		format =  GE2D_FORMAT_M24_NV21|(GE2D_FORMAT_M24_NV21T & (3<<3));
 	} else{
-                format =  GE2D_FORMAT_M24_YUV420|(GE2D_FORMAT_M24_YUV420T & (3<<3));
+		format =  GE2D_FORMAT_M24_YUV420|(GE2D_FORMAT_M24_YUV420T & (3<<3));
 	}
 	if(print_ifmt == 1){
 		printk("vf->type=%x, format=%x, w*h=%dx%d, canvas0=%x, canvas1=%x\n",
-                        vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
+			vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
 		print_ifmt = 0;
 	}
 	return format;
@@ -584,16 +595,16 @@ static inline int get_bottom_input_format(vframe_t* vf)
 {
 	int format= GE2D_FORMAT_M24_NV21;
 	if(vf->type&VIDTYPE_VIU_422){
-                format =  GE2D_FORMAT_S16_YUV422|(GE2D_FORMAT_S16_YUV422B & (3<<3));
+		format =  GE2D_FORMAT_S16_YUV422|(GE2D_FORMAT_S16_YUV422B & (3<<3));
 	}else if(vf->type&VIDTYPE_VIU_NV21){
-                format =  GE2D_FORMAT_M24_NV21|(GE2D_FORMAT_M24_NV21B & (3<<3));
+		format =  GE2D_FORMAT_M24_NV21|(GE2D_FORMAT_M24_NV21B & (3<<3));
 	} else{
-                format =  GE2D_FORMAT_M24_YUV420|(GE2D_FMT_M24_YUV420B & (3<<3));
-        }
+		format =  GE2D_FORMAT_M24_YUV420|(GE2D_FMT_M24_YUV420B & (3<<3));
+	}
 
 	if(print_ifmt == 1){
 		printk("vf->type=%x, format=%x, w*h=%dx%d, canvas0=%x, canvas1=%x\n",
-                        vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
+			vf->type, format, vf->width, vf->height, vf->canvas0Addr, vf->canvas1Addr);
 		print_ifmt = 0;
 	}
 	return format;
@@ -636,9 +647,9 @@ static int get_output_format(int v4l2_format)
 			break;            
 	}   
 	if(print_ofmt == 1){
-            printk("outputformat, v4l2_format=%x, format=%x\n",
-                    v4l2_format, format);
-            print_ofmt = 0;
+		printk("outputformat, v4l2_format=%x, format=%x\n",
+			v4l2_format, format);
+		print_ofmt = 0;
 	}
 	return format;
 }
@@ -2081,28 +2092,27 @@ static int amlvideo2_fillbuff(struct amlvideo2_fh *fh, struct amlvideo2_node_buf
 			break;
 	}
 	src_canvas = vf->canvas0Addr;
-        if(ge2d_proc){
-                if( (vf->type &VIDTYPE_INTERLACE_BOTTOM) || (vf->type &VIDTYPE_INTERLACE_TOP)){
-                        if(vf->canvas0Addr == vf->canvas1Addr){
-                                if( (AML_PROVIDE_MIRROCAST_VDIN1 == node->p_type) || (AML_PROVIDE_MIRROCAST_VDIN0 == node->p_type) ) {
-                                        src_canvas = amlvideo2_ge2d_interlace_vdindata_process(vf,node->context,&ge2d_config,&output);
-                                }else{
-                                        src_canvas = amlvideo2_ge2d_interlace_one_canvasAddr_process(vf,node->context,&ge2d_config,&output);
-                                }
-
-                        }else{
-                                src_canvas = amlvideo2_ge2d_interlace_two_canvasAddr_process(vf,node->context,&ge2d_config,&output);
-                        }
-                }else{
-                        src_canvas = amlvideo2_ge2d_pre_process(vf,node->context,&ge2d_config,&output); 
-                }
-        }
+	if(ge2d_proc){
+		if( (vf->type &VIDTYPE_INTERLACE_BOTTOM) || (vf->type &VIDTYPE_INTERLACE_TOP)){
+			if(vf->canvas0Addr == vf->canvas1Addr){
+				if( (AML_PROVIDE_MIRROCAST_VDIN1 == node->p_type) || (AML_PROVIDE_MIRROCAST_VDIN0 == node->p_type) ) {
+					src_canvas = amlvideo2_ge2d_interlace_vdindata_process(vf,node->context,&ge2d_config,&output);
+				}else{
+					src_canvas = amlvideo2_ge2d_interlace_one_canvasAddr_process(vf,node->context,&ge2d_config,&output);
+				}
+			}else{
+				src_canvas = amlvideo2_ge2d_interlace_two_canvasAddr_process(vf,node->context,&ge2d_config,&output);
+			}
+		}else{
+			src_canvas = amlvideo2_ge2d_pre_process(vf,node->context,&ge2d_config,&output); 
+		}
+	}
 
 	if ((sw_proc)&&(src_canvas>0))
 		amlvideo2_sw_post_process(src_canvas ,(unsigned)vbuf);
 
 	buf->vb.state = VIDEOBUF_DONE;
-	do_gettimeofday(&buf->vb.ts);
+	//do_gettimeofday(&buf->vb.ts);
 	return 0;
 }
 
@@ -2110,6 +2120,17 @@ static unsigned print_ivals=0;
 module_param(print_ivals, uint, 0644);
 MODULE_PARM_DESC(print_ivals, "print current intervals!!");
 
+//#define TEST_LATENCY
+#ifdef TEST_LATENCY
+static int total_latency = 0;
+static int total_latency_out = 0;
+static long long cur_time = 0;
+static long long cur_time_out = 0;
+static int frame_num = 0;
+static int frame_num_out = 0;
+static struct timeval test_time;
+#endif
+
 static void amlvideo2_thread_tick(struct amlvideo2_fh *fh)
 {
 	struct amlvideo2_node_buffer *buf = NULL;
@@ -2117,29 +2138,35 @@ static void amlvideo2_thread_tick(struct amlvideo2_fh *fh)
 	struct amlvideo2_node_dmaqueue *dma_q = &node->vidq;
 	unsigned diff = 0;
 	bool no_frame = false;
-	int active_duration = 0;
 	vframe_t *vf = NULL;
 
 	unsigned long flags = 0;
 
 	dprintk(node->vid_dev, 1, "Thread tick\n");
 
+	if (kthread_should_stop())
+		return;
+
+
+	if( (AML_RECEIVER_NONE != node->r_type) && vfq_full( &q_ready) ){
+		return;
+	}
+
+	wait_event_interruptible_timeout(dma_q->wq, ((vf_peek(node->recv.name)!= NULL)&&(fh->is_streamed_on)&&(node->provide_ready)) || (node->vidq.task_running==0),msecs_to_jiffies(5000));
+
 	if(!node->provide_ready){
 		dprintk(node->vid_dev, 1, "provide is not ready\n");
 		return ;
-        }
-        if( (AML_RECEIVER_NONE != node->r_type) && vfq_full( &q_ready) ){
-                return;
-        }
+	}
 
 	if(!fh->is_streamed_on){
-                dprintk(node->vid_dev, 1, "dev doesn't stream on\n");
-                if( vf_peek(node->recv.name)){
-                        vf = vf_get(node->recv.name);
-                        vf_inqueue(vf, node->recv.name);
-                }
-                return ;
-        }
+		dprintk(node->vid_dev, 1, "dev doesn't stream on\n");
+		if( vf_peek(node->recv.name)){
+			vf = vf_get(node->recv.name);
+			vf_inqueue(vf, node->recv.name);
+		}
+		return ;
+	}
 
 	spin_lock_irqsave(&node->slock, flags);
 	if (list_empty(&dma_q->active)){
@@ -2149,12 +2176,37 @@ static void amlvideo2_thread_tick(struct amlvideo2_fh *fh)
 
 	buf = list_entry(dma_q->active.next,
 			 struct amlvideo2_node_buffer, vb.queue);
-	if(vf_peek(node->recv.name)== NULL)
+	if(vf_peek(node->recv.name)== NULL){
 		no_frame = true;
-	else
+	}else{
+		//drop the frame to get the last one
 		vf = vf_get(node->recv.name);
+		while (vf_peek(node->recv.name)!= NULL){
+			vf_inqueue(vf,node->recv.name);
+			vf = vf_get(node->recv.name);
+		}
+	}
 
-       if(frame_inittime == 1){
+#ifdef USE_VDIN_PTS
+	if(no_frame)
+		goto unlock;
+	if(frame_inittime == 1){
+		frameInv_adjust = 0;
+		frameInv = 0;
+		thread_ts1.tv_sec = vf->pts_us64& 0xFFFFFFFF;
+		thread_ts1.tv_usec = vf->pts;
+		frame_inittime = 0;
+	}else{
+		diff = (vf->pts_us64& 0xFFFFFFFF) - thread_ts1.tv_sec;
+		diff = diff*1000000 + vf->pts - thread_ts1.tv_usec;
+		if(diff<(int) fh->frm_save_time_us){
+			vf_inqueue(vf,node->recv.name);
+			goto unlock;
+		}
+	}
+#else
+	int active_duration = 0;
+	if(frame_inittime == 1){
 	   	if(no_frame)
 			goto unlock;
 		frameInv_adjust = 0;
@@ -2166,10 +2218,9 @@ static void amlvideo2_thread_tick(struct amlvideo2_fh *fh)
 		diff = thread_ts2.tv_sec - thread_ts1.tv_sec;
 		diff = diff*1000000 + thread_ts2.tv_usec - thread_ts1.tv_usec;
 		frameInv += diff;
-		memcpy( &thread_ts1, &thread_ts2, sizeof( struct timeval));
-
-              active_duration = frameInv -frameInv_adjust;
-	/* Fill buffer */
+		memcpy(&thread_ts1, &thread_ts2, sizeof( struct timeval));
+		active_duration = frameInv -frameInv_adjust;
+		/* Fill buffer */
 		if(active_duration +5000 >(int) fh->frm_save_time_us){
 		  //||(active_duration  > (int)fh->frm_save_time_us)
 			if(vf){
@@ -2193,7 +2244,6 @@ static void amlvideo2_thread_tick(struct amlvideo2_fh *fh)
 			goto unlock;
 		}
 	}
-	
 	while(active_duration>=(int) fh->frm_save_time_us){
 		active_duration -= fh->frm_save_time_us;
 	}
@@ -2202,19 +2252,72 @@ static void amlvideo2_thread_tick(struct amlvideo2_fh *fh)
 	else
 		frameInv_adjust = -active_duration;
 	frameInv = 0;
-
+#endif
 	buf->vb.state = VIDEOBUF_ACTIVE;
 	list_del(&buf->vb.queue);
 
 	spin_unlock_irqrestore(&node->slock, flags);
-	amlvideo2_fillbuff(fh, buf,vf);
 
+// test latency
+#ifdef TEST_LATENCY
+	do_gettimeofday(&test_time);
+	{
+		int timeNow64 = ((test_time.tv_sec & 0xFFFFFFFF)*1000*1000) + (test_time.tv_usec);
+		int timePts =  ((vf->pts_us64 & 0xFFFFFFFF)*1000*1000) + (vf->pts);
+		//printk("amlvideo2 in  num:%d delay:%d\n", timePts, (timeNow64 - timePts)/1000);
+		if(cur_time == test_time.tv_sec){
+			total_latency += (int)((timeNow64 - timePts)/1000);
+			frame_num++;
+		}else{
+			total_latency += (int)((timeNow64 - timePts)/1000);
+			frame_num++;
+			printk("amvideo2 in latency:%d frame_num:%d\n", total_latency/frame_num, frame_num);
+			total_latency = 0;
+			frame_num = 0;
+			cur_time  = test_time.tv_sec;
+		}
+	}
+#endif
+
+	amlvideo2_fillbuff(fh, buf,vf);
+#ifdef USE_VDIN_PTS
+	buf->vb.ts.tv_sec = vf->pts_us64 & 0xFFFFFFFF;
+	buf->vb.ts.tv_usec = vf->pts;
+	thread_ts1.tv_sec = vf->pts_us64& 0xFFFFFFFF;
+	thread_ts1.tv_usec = vf->pts;
+#endif
 	vf_inqueue(vf,node->recv.name);
+
+	while (vf_peek(node->recv.name)!= NULL){
+		vf = vf_get(node->recv.name);
+		vf_inqueue(vf,node->recv.name);
+	}
 	dprintk(node->vid_dev, 1, "filled buffer %p\n", buf);
 
 	if (waitqueue_active(&buf->vb.done)){
 		wake_up(&buf->vb.done);
 	}
+
+// test latency
+#ifdef TEST_LATENCY
+	do_gettimeofday(&test_time);
+	{
+		int timeNow64_out = ((test_time.tv_sec & 0xFFFFFFFF)*1000*1000) + (test_time.tv_usec);
+		int timePts_out =  ((buf->vb.ts.tv_sec & 0xFFFFFFFF)*1000*1000) + (buf->vb.ts.tv_usec);
+		//printk("amlvideo2 out num:%d delay:%d\n", timePts_out, (timeNow64_out - timePts_out)/1000);
+		if(cur_time_out == test_time.tv_sec){
+			total_latency_out += (timeNow64_out - timePts_out)/1000;
+			frame_num_out++;
+		}else{
+			total_latency_out += (timeNow64_out - timePts_out)/1000;
+			frame_num_out++;
+			printk("amvideo2 out latency:%d frame_num_out:%d\n", total_latency_out/frame_num_out, frame_num_out);
+			total_latency_out = 0;
+			frame_num_out = 0;
+			cur_time_out  = test_time.tv_sec;
+		}
+	}
+#endif
 	dprintk(node->vid_dev, 2, "[%p/%d] wakeup\n", buf, buf->vb.i);
 	return;
 
@@ -2225,27 +2328,27 @@ unlock:
 
 static void amlvideo2_sleep(struct amlvideo2_fh *fh)
 {
-	struct amlvideo2_node *node = fh->node;
-	struct amlvideo2_node_dmaqueue *dma_q = &node->vidq;
+	//struct amlvideo2_node *node = fh->node;
+	//struct amlvideo2_node_dmaqueue *dma_q = &node->vidq;
 
-	DECLARE_WAITQUEUE(wait, current);
+	//DECLARE_WAITQUEUE(wait, current);
 
-	dprintk(node->vid_dev, 1, "%s dma_q=0x%08lx\n", __func__,
-		(unsigned long)dma_q);
+	//dprintk(node->vid_dev, 1, "%s dma_q=0x%08lx\n", __func__,
+	//	(unsigned long)dma_q);
 
-	add_wait_queue(&dma_q->wq, &wait);
-	if (kthread_should_stop())
-		goto stop_task;
+	//add_wait_queue(&dma_q->wq, &wait);
+	//if (kthread_should_stop())
+	//	goto stop_task;
 
 	/* Calculate time to wake up */
 	//timeout = msecs_to_jiffies(frames_to_ms(1));
 
 	amlvideo2_thread_tick(fh);
 
-	schedule_timeout_interruptible(1);
+	//schedule_timeout_interruptible(1);
 
-stop_task:
-	remove_wait_queue(&dma_q->wq, &wait);
+//stop_task:
+	//remove_wait_queue(&dma_q->wq, &wait);
 	try_to_freeze();
 }
 
@@ -2253,32 +2356,49 @@ static int amlvideo2_thread(void *data)
 {
 	struct amlvideo2_fh  *fh = data;
 	struct amlvideo2_node *node = fh->node;
+	struct sched_param param = {.sched_priority = MAX_RT_PRIO - 1 };
+	int ret = 0;
+	sched_setscheduler(current, SCHED_FIFO, &param);
+	allow_signal(SIGTERM);
 
 	dprintk(node->vid_dev, 1, "thread started\n");
 
 	set_freezable();
 
-	for (;;) {
-		amlvideo2_sleep(fh);
-
-		if (kthread_should_stop())
+	while(1){
+		if (kthread_should_stop()){
+			break;
+		}
+#ifdef USE_SEMA_QBUF
+		ret = down_interruptible(&node->vidq.qbuf_sema);
+#endif
+		if(!node->vidq.task_running){
 			break;
+		}
+		amlvideo2_sleep(fh); 
+		if (kthread_should_stop()) 			
+			break; 	
+	}
+	while(!kthread_should_stop()){
+		msleep(10);
 	}
 	dprintk(node->vid_dev, 1, "thread: exit\n");
-	return 0;
+	return ret;
 }
 
 static int amlvideo2_start_thread(struct amlvideo2_fh *fh)
 {
 	struct amlvideo2_node *node = fh->node;
 	struct amlvideo2_node_dmaqueue *dma_q = &node->vidq;
-
+#ifdef USE_SEMA_QBUF
+	sema_init(&dma_q->qbuf_sema,0);
+#endif
 	dprintk(node->vid_dev, 1, "%s\n", __func__);
 
 #ifdef MUTLI_NODE
-	dma_q->kthread = kthread_run(amlvideo2_thread, fh, (node->vid==0)?"amvideo2-0":"amvideo2-1");
+	dma_q->kthread = kthread_run(amlvideo2_thread, fh, (node->vid==0)?"amlvideo2-0":"amlvideo2-1");
 #else
-	dma_q->kthread = kthread_run(amlvideo2_thread, fh, "amvideo2");
+	dma_q->kthread = kthread_run(amlvideo2_thread, fh, "amlvideo2");
 #endif
 
 	if (IS_ERR(dma_q->kthread)) {
@@ -2286,8 +2406,8 @@ static int amlvideo2_start_thread(struct amlvideo2_fh *fh)
 		return PTR_ERR(dma_q->kthread);
 	}
 	/* Wakes thread */
-	wake_up_interruptible(&dma_q->wq);
-
+	//wake_up_interruptible(&dma_q->wq);
+	dma_q->task_running = 1;
 	dprintk(node->vid_dev, 1, "returning from %s\n", __func__);
 	return 0;
 }
@@ -2299,6 +2419,12 @@ static void amlvideo2_stop_thread(struct amlvideo2_node_dmaqueue  *dma_q)
 	dprintk(node->vid_dev, 1, "%s\n", __func__);
 	/* shutdown control thread */
 	if (dma_q->kthread) {
+		dma_q->task_running = 0;
+		send_sig(SIGTERM, dma_q->kthread, 1);
+#ifdef USE_SEMA_QBUF
+		up(&dma_q->qbuf_sema);
+#endif
+		wake_up_interruptible(&dma_q->wq);
 		kthread_stop(dma_q->kthread);
 		dma_q->kthread = NULL;
 	}
@@ -2334,11 +2460,11 @@ aml_provider_type get_sub_receiver_type(const char* name)
 		return type;
 	if(0 == strncasecmp(name,"ppmgr",5)){
 		type = AML_RECEIVER_PPMGR;
-                printk("type is ppmgr");
+		printk("type is ppmgr");
 	}else{
-                type = AML_RECEIVER_MAX;
-                printk("type is not certain\n");
-        }
+		type = AML_RECEIVER_MAX;
+		printk("type is not certain\n");
+	}
 	return type;	
 }
 /* ------------------------------------------------------------------
@@ -2346,57 +2472,53 @@ aml_provider_type get_sub_receiver_type(const char* name)
  *-----------------------------------------------------------------*/
 static vframe_t *amlvideo2_vf_peek(void *op_arg)
 {
-        return vfq_peek(&q_ready);
+	return vfq_peek(&q_ready);
 }
 
 static vframe_t *amlvideo2_vf_get(void *op_arg)
 {
-        return vfq_pop(&q_ready);
+	return vfq_pop(&q_ready);
 }
 
 static void amlvideo2_vf_put(vframe_t *vf, void *op_arg)
 {
-        vf_put(vf, DEVICE_NAME);
+	vf_put(vf, DEVICE_NAME);
 }
 
 static int amlvideo2_event_cb(int type, void *data, void *private_data)
 {
-        if (type & VFRAME_EVENT_RECEIVER_PUT) {
-              //printk("video put, avail=%d\n", vfq_level(&q_ready) );
-        }else if (type & VFRAME_EVENT_RECEIVER_GET) {
+	if (type & VFRAME_EVENT_RECEIVER_PUT) {
+		//printk("video put, avail=%d\n", vfq_level(&q_ready) );
+	}else if (type & VFRAME_EVENT_RECEIVER_GET) {
               //printk("video get, avail=%d\n", vfq_level(&q_ready) );
-        }else if(type & VFRAME_EVENT_RECEIVER_FRAME_WAIT){
+	}else if(type & VFRAME_EVENT_RECEIVER_FRAME_WAIT){
               // up(&thread_sem);
               printk("receiver is waiting\n");
-        }else if(type & VFRAME_EVENT_RECEIVER_FRAME_WAIT){
-                printk("frame wait\n");
-        }
-
-        return 0;
+	}else if(type & VFRAME_EVENT_RECEIVER_FRAME_WAIT){
+		printk("frame wait\n");
+	}
+	return 0;
 }
 
 static int amlvideo2_vf_states(vframe_states_t *states, void *op_arg)
 {
-        //unsigned long flags;
-        //spin_lock_irqsave(&lock, flags);
-
-        states->vf_pool_size    = AMLVIDEO2_POOL_SIZE;
-        states->buf_recycle_num = 0;
-        states->buf_free_num    =  AMLVIDEO2_POOL_SIZE - vfq_level(&q_ready);
-        states->buf_avail_num   = vfq_level(&q_ready);
-
-        //spin_unlock_irqrestore(&lock, flags);
-
-        return 0;
+	//unsigned long flags;
+	//spin_lock_irqsave(&lock, flags);
+	states->vf_pool_size    = AMLVIDEO2_POOL_SIZE;
+	states->buf_recycle_num = 0;
+	states->buf_free_num    =  AMLVIDEO2_POOL_SIZE - vfq_level(&q_ready);
+	states->buf_avail_num   = vfq_level(&q_ready);
+	//spin_unlock_irqrestore(&lock, flags);
+	return 0;
 }
 
 static const struct vframe_operations_s amlvideo2_vf_provider =
 {
-        .peek      = amlvideo2_vf_peek,
-        .get       = amlvideo2_vf_get,
-        .put       = amlvideo2_vf_put,
-        .event_cb  = amlvideo2_event_cb,
-        .vf_states = amlvideo2_vf_states,
+	.peek      = amlvideo2_vf_peek,
+	.get       = amlvideo2_vf_get,
+	.put       = amlvideo2_vf_put,
+	.event_cb  = amlvideo2_event_cb,
+	.vf_states = amlvideo2_vf_states,
 };
 
 static struct vframe_provider_s amlvideo2_vf_prov;
@@ -2411,13 +2533,13 @@ void vf_inqueue(struct vframe_s *vf, const char *receiver)
 	struct vframe_receiver_s *vfp;
 
 	vfp = vf_get_receiver(DEVICE_NAME);
-        if(NULL == vfp){
-                vf_put(vf, receiver);
-                return ;
-        }
+	if(NULL == vfp){
+		vf_put(vf, receiver);
+		return ;
+	}
 
-        vfq_push( &q_ready, vf);
-        vf_notify_receiver(DEVICE_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
+	vfq_push( &q_ready, vf);
+	vf_notify_receiver(DEVICE_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
 }
 
 /* ------------------------------------------------------------------
@@ -2432,7 +2554,7 @@ buffer_setup(struct videobuf_queue *vq, unsigned int *count, unsigned int *size)
 	int height = fh->height;
 
 	if(height%16 != 0)
-                height = ((height+15)>>4)<<4;
+		height = ((height+15)>>4)<<4;
 
 	*size = (fh->width * height * fh->fmt->depth)>>3;
 	if (0 == *count)
@@ -2670,39 +2792,43 @@ static int vidioc_g_parm(struct file *file, void *priv,
 static int vidioc_s_parm(struct file *file, void *priv,
         struct v4l2_streamparm *parms)
 {
-    struct amlvideo2_fh *fh = priv;
-    struct amlvideo2_node *node   = fh->node;
-    suseconds_t def_ival = 1000000/DEF_FRAMERATE;
-    suseconds_t ival; //us
-
-    /*save the frame period. */
-    if(0 == parms->parm.capture.timeperframe.denominator){
-        fh->frm_save_time_us = def_ival ;
-        amlvideo2_frmintervals_active.numerator = 1;
-        amlvideo2_frmintervals_active.denominator = DEF_FRAMERATE;
-        return -EINVAL;
-    }
+	struct amlvideo2_fh *fh = priv;
+	struct amlvideo2_node *node   = fh->node;
+	suseconds_t def_ival = 1000000/DEF_FRAMERATE;
+	suseconds_t ival; //us
+
+	/*save the frame period. */
+	if(0 == parms->parm.capture.timeperframe.denominator){
+		fh->frm_save_time_us = def_ival ;
+		amlvideo2_frmintervals_active.numerator = 1;
+		amlvideo2_frmintervals_active.denominator = DEF_FRAMERATE;
+		return -EINVAL;
+	}
 
-    ival = parms->parm.capture.timeperframe.numerator * 1000000
-        / parms->parm.capture.timeperframe.denominator;
+	ival = parms->parm.capture.timeperframe.numerator * 1000000
+		/ parms->parm.capture.timeperframe.denominator;
 
-    fh->frm_save_time_us = ival ;
-    amlvideo2_frmintervals_active = parms->parm.capture.timeperframe;
+	fh->frm_save_time_us = ival ;
+	amlvideo2_frmintervals_active = parms->parm.capture.timeperframe;
 
-    dprintk(node->vid_dev, 1,"%s,%d,type=%d\n",
-            __func__, __LINE__, parms->type);
-    dprintk(node->vid_dev, 1,"setting framerate:%d/%d(fps)\n",
-            amlvideo2_frmintervals_active.denominator,
-            amlvideo2_frmintervals_active.numerator );
+	dprintk(node->vid_dev, 1,"%s,%d,type=%d\n",
+		__func__, __LINE__, parms->type);
+	dprintk(node->vid_dev, 1,"setting framerate:%d/%d(fps)\n",
+		amlvideo2_frmintervals_active.denominator,
+		amlvideo2_frmintervals_active.numerator );
 
-    return 0;
+	return 0;
 }
 
 static int vidioc_reqbufs(struct file *file, void *priv,
 			  struct v4l2_requestbuffers *p)
 {
 	struct amlvideo2_fh  *fh  = priv;
-
+#ifdef USE_SEMA_QBUF
+	struct amlvideo2_node *node = fh->node;
+	struct amlvideo2_node_dmaqueue *dma_q = &node->vidq;
+	sema_init(&dma_q->qbuf_sema,0);
+#endif
 	return (videobuf_reqbufs(&fh->vb_vidq, p));
 }
 
@@ -2712,17 +2838,17 @@ static int vidioc_querybuf(struct file *file, void *priv, struct v4l2_buffer *p)
 	int ret = videobuf_querybuf(&fh->vb_vidq, p);
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	if(ret == 0){
-	    struct amlvideo2_output output;
-	    memset(&output,0,sizeof(struct amlvideo2_output));
-
-	    output.v4l2_format= fh->fmt->fourcc;
-	    output.vbuf = NULL;
-	    output.width = fh->width;
-	    output.height = fh->height;
-	    output.canvas_id = -1;
-	    p->reserved  = convert_canvas_index(&output, VM_RES0_CANVAS_INDEX+p->index*3);
+		struct amlvideo2_output output;
+		memset(&output,0,sizeof(struct amlvideo2_output));
+
+		output.v4l2_format= fh->fmt->fourcc;
+		output.vbuf = NULL;
+		output.width = fh->width;
+		output.height = fh->height;
+		output.canvas_id = -1;
+		p->reserved  = convert_canvas_index(&output, VM_RES0_CANVAS_INDEX+p->index*3);
 	}else{
-	    p->reserved = 0;
+		p->reserved = 0;
 	}
 #endif
 	return ret;
@@ -2731,8 +2857,15 @@ static int vidioc_querybuf(struct file *file, void *priv, struct v4l2_buffer *p)
 static int vidioc_qbuf(struct file *file, void *priv, struct v4l2_buffer *p)
 {
 	struct amlvideo2_fh *fh = priv;
-
-	return (videobuf_qbuf(&fh->vb_vidq, p));
+#ifdef USE_SEMA_QBUF
+	struct amlvideo2_node *node = fh->node;
+	struct amlvideo2_node_dmaqueue *dma_q = &node->vidq;
+#endif
+	int ret = videobuf_qbuf(&fh->vb_vidq, p);
+#ifdef USE_SEMA_QBUF
+	up(&dma_q->qbuf_sema);
+#endif
+	return ret;
 }
 
 static int vidioc_dqbuf(struct file *file, void *priv, struct v4l2_buffer *p)
@@ -2753,140 +2886,143 @@ static int vidiocgmbuf(struct file *file, void *priv, struct video_mbuf *mbuf)
 #endif
 static tvin_scan_mode_t vmode2scan_mode(vmode_t	mode)
 {
-        tvin_scan_mode_t scan_mode = TVIN_SCAN_MODE_NULL;//1: progressive 2:interlaced
-        switch (mode) {
-                case VMODE_480I:
-                case VMODE_480CVBS:
-                case VMODE_576I:
-                case VMODE_576CVBS:
-                case VMODE_1080I:
-                case VMODE_1080I_50HZ:
-                        scan_mode = TVIN_SCAN_MODE_INTERLACED;
-                        break;
-
-                case VMODE_480P:
-                case VMODE_576P:
-                case VMODE_720P:
-                case VMODE_1080P:
-                case VMODE_720P_50HZ:
-                case VMODE_1080P_50HZ:
-                case VMODE_1080P_24HZ:
-                case VMODE_4K2K_30HZ:
-                case VMODE_4K2K_25HZ:
-                case VMODE_4K2K_24HZ:
-                case VMODE_4K2K_SMPTE:
-                case VMODE_VGA:
-                case VMODE_SVGA:
-                case VMODE_XGA:
-                case VMODE_SXGA:
-                case VMODE_LCD:
-                case VMODE_LVDS_1080P:
-                case VMODE_LVDS_1080P_50HZ:
-                case VMODE_LVDS_768P:
-                        scan_mode = TVIN_SCAN_MODE_PROGRESSIVE;
-                        break;
-                default:
-                        printk("unknown mode=%d\n", mode);
-                        break;
-        }
-        //printk("mode=%d, scan_mode=%d\n", mode, scan_mode);
-        return scan_mode;
+	tvin_scan_mode_t scan_mode = TVIN_SCAN_MODE_NULL;//1: progressive 2:interlaced
+	switch (mode) {
+		case VMODE_480I:
+		case VMODE_480CVBS:
+		case VMODE_576I:
+		case VMODE_576CVBS:
+		case VMODE_1080I:
+		case VMODE_1080I_50HZ:
+			scan_mode = TVIN_SCAN_MODE_INTERLACED;
+			break;
+		case VMODE_480P:
+		case VMODE_576P:
+		case VMODE_720P:
+		case VMODE_1080P:
+		case VMODE_720P_50HZ:
+		case VMODE_1080P_50HZ:
+		case VMODE_1080P_24HZ:
+		case VMODE_4K2K_30HZ:
+		case VMODE_4K2K_25HZ:
+		case VMODE_4K2K_24HZ:
+		case VMODE_4K2K_SMPTE:
+		case VMODE_VGA:
+		case VMODE_SVGA:
+		case VMODE_XGA:
+		case VMODE_SXGA:
+		case VMODE_LCD:
+		case VMODE_LVDS_1080P:
+		case VMODE_LVDS_1080P_50HZ:
+		case VMODE_LVDS_768P:
+			scan_mode = TVIN_SCAN_MODE_PROGRESSIVE;
+			break;
+		default:
+			printk("unknown mode=%d\n", mode);
+			break;
+	}
+	//printk("mode=%d, scan_mode=%d\n", mode, scan_mode);
+	return scan_mode;
 }
 static int vidioc_streamon(struct file *file, void *priv, enum v4l2_buf_type i)
 {
-        int ret;
-        struct amlvideo2_fh  *fh  = priv;
-        struct amlvideo2_node *node = fh->node;
-        struct vdin_v4l2_ops_s *vops = &node->vops;
-        vdin_parm_t para;
-        const vinfo_t *vinfo;
-        int dst_w, dst_h;
-        vinfo = get_current_vinfo();
-        if ((fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE) || (i != fh->type))
-                return -EINVAL;
-        ret = videobuf_streamon(&fh->vb_vidq);
-        printk("%s, videobuf_streamon() ret: %d\n", __func__, ret);
-        printk("%s, node->input: %d, node->r_type: %d, node->p_type: %d\n", __func__, node->input, node->r_type, node->p_type);
-        if(ret < 0)
-                return ret;
-
-        if(node->input != 0)//	0:mirrocast
-                goto start;
-
-        if(AML_RECEIVER_NONE != node->r_type)
-                goto start;
-
-        if( AML_PROVIDE_MIRROCAST_VDIN0 == node->p_type){
-                node->vdin_device_num = 0;
-        }else if( AML_PROVIDE_MIRROCAST_VDIN1 == node->p_type){
-                node->vdin_device_num = 1;
-        }
+	int ret;
+	struct amlvideo2_fh  *fh  = priv;
+	struct amlvideo2_node *node = fh->node;
+	struct vdin_v4l2_ops_s *vops = &node->vops;
+	vdin_parm_t para;
+	const vinfo_t *vinfo;
+	int dst_w, dst_h;
+	vinfo = get_current_vinfo();
+	if ((fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE) || (i != fh->type))
+		return -EINVAL;
+	ret = videobuf_streamon(&fh->vb_vidq);
+	printk("%s, videobuf_streamon() ret: %d\n", __func__, ret);
+	printk("%s, node->input: %d, node->r_type: %d, node->p_type: %d\n", __func__, node->input, node->r_type, node->p_type);
+	if(ret < 0)
+		return ret;
 
-        memset( &para, 0, sizeof( para ));
-        para.port  = TVIN_PORT_VIU;
-        para.fmt = TVIN_SIG_FMT_MAX;
-        para.frame_rate = 60;
-        para.h_active = vinfo->width;
-        para.v_active = vinfo->height;
-        para.hsync_phase = 0;
-        para.vsync_phase  = 1;
-        para.hs_bp = 0;
-        para.vs_bp = 0;
-        para.dfmt = TVIN_NV21;//TVIN_YUV422;
-        para.scan_mode = vmode2scan_mode(vinfo->mode);//TVIN_SCAN_MODE_PROGRESSIVE;
-        if(TVIN_SCAN_MODE_INTERLACED == para.scan_mode){
-                para.v_active = para.v_active/2;
-        }
-        dst_w = fh->width;
-        dst_h = fh->height;
-        if(vinfo->width<vinfo->height){
-                dst_w = fh->height;
-                dst_h = fh->width;
-                output_axis_adjust(vinfo->height,vinfo->width, (int *)&dst_h,(int *)&dst_w,0);
-        }else{
-                output_axis_adjust(vinfo->width,vinfo->height, (int *)&dst_w,(int *)&dst_h,0);	
-        }
-        para.dest_hactive = dst_w;
-        para.dest_vactive = dst_h;
-        if(TVIN_SCAN_MODE_INTERLACED == para.scan_mode){
-                para.dest_vactive = para.dest_vactive/2;
-        }
-        printk("amlvideo2--vidioc_streamon: para.h_active: %d, para.v_active: %d"
-                        "para.dest_hactive: %d, para.dest_vactive: %d, fh->width: %d, fh->height: %d \n",
-                        para.h_active,para.v_active, para.dest_hactive, para.dest_vactive,fh->width,fh->height);
+	if(node->input != 0)//	0:mirrocast
+		goto start;
+
+	if(AML_RECEIVER_NONE != node->r_type)
+		goto start;
+
+	if( AML_PROVIDE_MIRROCAST_VDIN0 == node->p_type){
+		node->vdin_device_num = 0;
+	}else if( AML_PROVIDE_MIRROCAST_VDIN1 == node->p_type){
+		node->vdin_device_num = 1;
+	}
+
+	memset( &para, 0, sizeof( para ));
+	para.port  = TVIN_PORT_VIU;
+	para.fmt = TVIN_SIG_FMT_MAX;
+	para.frame_rate = 60;
+	para.h_active = vinfo->width;
+	para.v_active = vinfo->height;
+	para.hsync_phase = 0;
+	para.vsync_phase  = 1;
+	para.hs_bp = 0;
+	para.vs_bp = 0;
+	para.dfmt = TVIN_NV21;//TVIN_YUV422;
+	para.scan_mode = vmode2scan_mode(vinfo->mode);//TVIN_SCAN_MODE_PROGRESSIVE;
+	if(TVIN_SCAN_MODE_INTERLACED == para.scan_mode){
+		para.v_active = para.v_active/2;
+	}
+	dst_w = fh->width;
+	dst_h = fh->height;
+	if(vinfo->width<vinfo->height){
+		dst_w = fh->height;
+		dst_h = fh->width;
+		output_axis_adjust(vinfo->height,vinfo->width, (int *)&dst_h,(int *)&dst_w,0);
+	}else{
+		output_axis_adjust(vinfo->width,vinfo->height, (int *)&dst_w,(int *)&dst_h,0);	
+	}
+	para.dest_hactive = dst_w;
+	para.dest_vactive = dst_h;
+	if(TVIN_SCAN_MODE_INTERLACED == para.scan_mode){
+		para.dest_vactive = para.dest_vactive/2;
+	}
+	printk("amlvideo2--vidioc_streamon: para.h_active: %d, para.v_active: %d"
+		"para.dest_hactive: %d, para.dest_vactive: %d, fh->width: %d, fh->height: %d \n",
+		para.h_active,para.v_active, para.dest_hactive, para.dest_vactive,fh->width,fh->height);
 
-        vops->start_tvin_service(node->vdin_device_num,&para);
+	vops->start_tvin_service(node->vdin_device_num,&para);
 
 start:
-        fh->is_streamed_on = 1;
-        frameInv_adjust = 0;
-        frameInv = 0;
-        tmp_vf = NULL;
-        frame_inittime = 1;
-        do_gettimeofday( &thread_ts1);
-
-        return 0;
+	fh->is_streamed_on = 1;
+	frameInv_adjust = 0;
+	frameInv = 0;
+	tmp_vf = NULL;
+	frame_inittime = 1;
+	do_gettimeofday( &thread_ts1);
+#ifdef TEST_LATENCY
+	cur_time  = cur_time_out = thread_ts1.tv_sec;
+	total_latency = 0;
+	total_latency_out = 0;
+#endif
+	return 0;
 }
 
 static int vidioc_streamoff(struct file *file, void *priv, enum v4l2_buf_type i)
 {
-        int ret;
-        struct amlvideo2_fh  *fh  = priv;
-        struct amlvideo2_node *node = fh->node;
-        struct vdin_v4l2_ops_s *vops = &node->vops;
+	int ret;
+	struct amlvideo2_fh  *fh  = priv;
+	struct amlvideo2_node *node = fh->node;
+	struct vdin_v4l2_ops_s *vops = &node->vops;
 
-        if ((fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE) || (i != fh->type))
-                return -EINVAL;
-        ret = videobuf_streamoff(&fh->vb_vidq);
-        if(ret < 0){
-                printk("videobuf stream off failed\n");
-        }
+	if ((fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE) || (i != fh->type))
+		return -EINVAL;
+	ret = videobuf_streamoff(&fh->vb_vidq);
+	if(ret < 0){
+		printk("videobuf stream off failed\n");
+	}
 
-        if((0 == node->input) && (AML_RECEIVER_NONE == node->r_type)){
-                vops->stop_tvin_service(node->vdin_device_num);
-        }
-        fh->is_streamed_on = 0;
-        return ret;
+	if((0 == node->input) && (AML_RECEIVER_NONE == node->r_type)){
+		vops->stop_tvin_service(node->vdin_device_num);
+	}
+	fh->is_streamed_on = 0;
+	return ret;
 }
 
 static int vidioc_enum_framesizes(struct file *file, void *fh,struct v4l2_frmsizeenum *fsize)
@@ -2927,24 +3063,19 @@ static int vidioc_enum_framesizes(struct file *file, void *fh,struct v4l2_frmsiz
 static int vidioc_enum_frameintervals(struct file *file, void *priv,
                                struct v4l2_frmivalenum *fival)
 {
-    unsigned int k;
-
-    if(fival->index > ARRAY_SIZE(amlvideo2_frmivalenum))
-        return -EINVAL;
-
-    for(k =0; k< ARRAY_SIZE(amlvideo2_frmivalenum); k++)
-    {
-        if( (fival->index==amlvideo2_frmivalenum[k].index)&&
-                (fival->pixel_format ==amlvideo2_frmivalenum[k].pixel_format )&&
-                (fival->width==amlvideo2_frmivalenum[k].width)&&
-                (fival->height==amlvideo2_frmivalenum[k].height)){
-            memcpy( fival, &amlvideo2_frmivalenum[k], sizeof(struct v4l2_frmivalenum));
-            return 0;
-        }
-    }
-
-    return -EINVAL;
-
+	unsigned int k;
+	if(fival->index > ARRAY_SIZE(amlvideo2_frmivalenum))
+		return -EINVAL;
+	for(k =0; k< ARRAY_SIZE(amlvideo2_frmivalenum); k++){
+		if( (fival->index==amlvideo2_frmivalenum[k].index)&&
+		(fival->pixel_format ==amlvideo2_frmivalenum[k].pixel_format )&&
+		(fival->width==amlvideo2_frmivalenum[k].width)&&
+		(fival->height==amlvideo2_frmivalenum[k].height)){
+			memcpy( fival, &amlvideo2_frmivalenum[k], sizeof(struct v4l2_frmivalenum));
+			return 0;
+		}
+	}
+	return -EINVAL;
 }
 
 static int vidioc_s_std(struct file *file, void *priv, v4l2_std_id i)
@@ -2987,21 +3118,25 @@ static int vidioc_queryctrl(struct file *file, void *priv,
 
 static int vidioc_g_input(struct file *file, void *priv, unsigned int *i)
 {
-    struct amlvideo2_fh *fh = priv;
-    struct amlvideo2_node *node = fh->node;
-
-    *i = node->input;
-    return (0);
+	struct amlvideo2_fh *fh = priv;
+	struct amlvideo2_node *node = fh->node;
+	*i = node->input;
+	return (0);
 }
 
 static int vidioc_s_input(struct file *file, void *priv, unsigned int i)
 {
-    struct amlvideo2_fh *fh = priv;
-    struct amlvideo2_node *node = fh->node;
-
-    node->input = i;
-    printk("current input:%d\n", node->input);
-    return (0);
+	struct amlvideo2_fh *fh = priv;
+	struct amlvideo2_node *node = fh->node;
+	node->input = i;
+	node->provider = vf_get_provider(DEVICE_NAME);
+	if (NULL == node->provider) {
+		node->p_type = AML_PROVIDE_MIRROCAST_VDIN1;
+	}else{
+		node->p_type = get_provider_type(node->provider->name, node->input);
+	}
+	printk("current input:%d\n", node->input);
+	return (0);
 }
 
 static int vidioc_g_ctrl(struct file *file, void *priv,
@@ -3080,34 +3215,34 @@ static int amlvideo2_open(struct file *file)
 	}
 	mutex_unlock(&node->mutex);
 	node->input = 0;    //default input is miracast
-        node->sub_recv = vf_get_receiver(DEVICE_NAME);
-        if(node->sub_recv){
-                printk("node->sub_recv->name=%s\n", node->sub_recv->name);
-                node->provider = vf_get_provider(DEVICE_NAME);
-                if(NULL == node->provider){
-                        printk("node->provider=%p", node->provider);
-                        node->p_type = AML_PROVIDE_MAX;
-                }else{
-                        printk("node->provider=%p", node->provider);
-                        node->p_type =  get_provider_type(node->provider->name, node->input);
-                }
-                printk("node->r_type=%d\n", node->r_type);
-                node->r_type = get_sub_receiver_type(node->sub_recv->name);
-        }else{
-                printk("as an end receiver\n");
-                node->p_type = AML_PROVIDE_MIRROCAST_VDIN1;
-                node->provider = vf_get_provider(DEVICE_NAME);
-                if (NULL == node->provider) {
-                    node->p_type = AML_PROVIDE_MIRROCAST_VDIN1;
-                } else {
-                    printk("node->provider = %p\n", node->provider);
-                    node->p_type = get_provider_type(node->provider->name, node->input);
-                }
-                node->r_type = AML_RECEIVER_NONE;
+	node->sub_recv = vf_get_receiver(DEVICE_NAME);
+	if(node->sub_recv){
+		printk("node->sub_recv->name=%s\n", node->sub_recv->name);
+		node->provider = vf_get_provider(DEVICE_NAME);
+		if(NULL == node->provider){
+			printk("node->provider=%p", node->provider);
+			node->p_type = AML_PROVIDE_MAX;
+		}else{
+			printk("node->provider=%p", node->provider);
+			node->p_type =  get_provider_type(node->provider->name, node->input);
+		}
+		printk("node->r_type=%d\n", node->r_type);
+		node->r_type = get_sub_receiver_type(node->sub_recv->name);
+	}else{
+		printk("as an end receiver\n");
+		node->p_type = AML_PROVIDE_MIRROCAST_VDIN1;
+		node->provider = vf_get_provider(DEVICE_NAME);
+		if (NULL == node->provider) {
+			node->p_type = AML_PROVIDE_MIRROCAST_VDIN1;
+		}else{
+			printk("node->provider = %p\n", node->provider);
+			node->p_type = get_provider_type(node->provider->name, node->input);
+		}
+		node->r_type = AML_RECEIVER_NONE;
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-	switch_mod_gate_by_name("ge2d", 1);
+		switch_mod_gate_by_name("ge2d", 1);
 #endif
-        }
+	}
 
 	file->private_data = fh;
 	fh->node      = node;
@@ -3124,12 +3259,11 @@ static int amlvideo2_open(struct file *file)
 					NULL, &node->slock, fh->type, V4L2_FIELD_INTERLACED,
 					sizeof(struct amlvideo2_node_buffer), (void*)res, NULL);
 
-    if( AML_RECEIVER_NONE == node->r_type){
-    	amlvideo2_start_thread(fh);
-    }
+	if( AML_RECEIVER_NONE == node->r_type){
+		amlvideo2_start_thread(fh);
+	}
 	v4l2_vdin_ops_init(&node->vops);
 	fh->frm_save_time_us = 1000000/DEF_FRAMERATE;
-
 	return 0;
 }
 
@@ -3164,21 +3298,21 @@ static int amlvideo2_close(struct file *file)
 {
 	struct amlvideo2_fh *fh = file->private_data;
 	struct amlvideo2_node *node       = fh->node;
-    if(AML_RECEIVER_NONE == node->r_type){
+	if(AML_RECEIVER_NONE == node->r_type){
 		amlvideo2_stop_thread(&node->vidq);
-    }
+	}
 	videobuf_stop(&fh->vb_vidq);
 	videobuf_mmap_free(&fh->vb_vidq);
 
 	mutex_lock(&node->mutex);
-    if(AML_RECEIVER_NONE == node->r_type){
+	if(AML_RECEIVER_NONE == node->r_type){
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-	switch_mod_gate_by_name("ge2d", 0);
+		switch_mod_gate_by_name("ge2d", 0);
 #endif	
 	}
 	node->users--;
 	amlvideo2_frmintervals_active.numerator = 1;
-	amlvideo2_frmintervals_active.denominator = 30;
+	amlvideo2_frmintervals_active.denominator = DEF_FRAMERATE;
 	//node->provider = NULL;
 	mutex_unlock(&node->mutex);
 	return 0;
@@ -3232,9 +3366,9 @@ static const struct v4l2_ioctl_ops amlvideo2_ioctl_ops = {
 	.vidioc_streamon      = vidioc_streamon,
 	.vidioc_streamoff     = vidioc_streamoff,
 	.vidioc_enum_framesizes = vidioc_enum_framesizes,
-    .vidioc_enum_frameintervals =vidioc_enum_frameintervals,
-    .vidioc_s_input       = vidioc_s_input,
-    .vidioc_g_input       = vidioc_g_input,
+	.vidioc_enum_frameintervals =vidioc_enum_frameintervals,
+	.vidioc_s_input       = vidioc_s_input,
+	.vidioc_g_input       = vidioc_g_input,
 #ifdef CONFIG_VIDEO_V4L1_COMPAT
 	.vidiocgmbuf          = vidiocgmbuf,
 #endif
@@ -3258,64 +3392,64 @@ static int amlvideo2_receiver_event_fun(int type, void* data, void* private_data
 	switch(type) {
 		case VFRAME_EVENT_PROVIDER_VFRAME_READY:
 			node->provide_ready = 1;
+			if(vf_peek(node->recv.name)!=NULL)
+				wake_up_interruptible(&node->vidq.wq);
 			break;
 		case VFRAME_EVENT_PROVIDER_QUREY_STATE:
-                        if(vfq_level(&q_ready)){
+			if(vfq_level(&q_ready)){
 				return RECEIVER_ACTIVE ;		
-                        }else{
+			}else{
 				return RECEIVER_INACTIVE;
-                        }
+			}
 			break;   
 		case VFRAME_EVENT_PROVIDER_START:
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-                        switch_mod_gate_by_name("ge2d", 1);
+			switch_mod_gate_by_name("ge2d", 1);
 #endif
-                        node->sub_recv = vf_get_receiver(DEVICE_NAME);
-                        printk("sub recv=%p\n", node->sub_recv);
-                        if(node->sub_recv){
-                                printk("node->provider->name=%s\n", node->sub_recv->name);
-                                node->r_type = get_sub_receiver_type(node->sub_recv->name);
-                                printk("r_type=%d\n", node->r_type);
-
-                                node->provider = vf_get_provider(DEVICE_NAME);
-                                printk("provider=%p\n", node->provider);
-                                if(node->provider){
-                                        printk("provider=%s\n", node->provider->name);
-                                        node->p_type =  get_provider_type(node->provider->name, node->input);
-                                }
-
-                                fh->node     = node;
+			node->sub_recv = vf_get_receiver(DEVICE_NAME);
+			printk("sub recv=%p\n", node->sub_recv);
+			if(node->sub_recv){
+				printk("node->provider->name=%s\n", node->sub_recv->name);
+				node->r_type = get_sub_receiver_type(node->sub_recv->name);
+				printk("r_type=%d\n", node->r_type);
+
+				node->provider = vf_get_provider(DEVICE_NAME);
+				printk("provider=%p\n", node->provider);
+				if(node->provider){
+					printk("provider=%s\n", node->provider->name);
+					node->p_type =  get_provider_type(node->provider->name, node->input);
+				}
 
-                                vf_reg_provider(&amlvideo2_vf_prov);
-                                vf_notify_receiver(DEVICE_NAME,VFRAME_EVENT_PROVIDER_START,NULL);
-                                vfq_init(&q_ready, AMLVIDEO2_POOL_SIZE+1, &amlvideo2_pool_ready[0]);
+				fh->node = node;
 
-                                printk("start thread\n");
+				vf_reg_provider(&amlvideo2_vf_prov);
+				vf_notify_receiver(DEVICE_NAME,VFRAME_EVENT_PROVIDER_START,NULL);
+				vfq_init(&q_ready, AMLVIDEO2_POOL_SIZE+1, &amlvideo2_pool_ready[0]);
 
-                                printk("test, test node=%p, fh=%p\n", node, fh);
-                                amlvideo2_start_thread(fh);
-                        }
+				printk("start thread\n");
+				amlvideo2_start_thread(fh);
+			}
 
 			break;
 		case VFRAME_EVENT_PROVIDER_UNREG: 
 			node->provide_ready = 0;
-                        printk("r_type=%d,p_type=%d\n", node->r_type, node->p_type);
-                        if( AML_RECEIVER_NONE != node->r_type){
-                                amlvideo2_stop_thread(&node->vidq);
-                                printk("%s,%dstop thread\n", __func__, __LINE__);
-                        }
-
-                        printk("unreg amlvideo2\n");
-                        vf_unreg_provider(&amlvideo2_vf_prov);
+			printk("r_type=%d,p_type=%d\n", node->r_type, node->p_type);
+			if( AML_RECEIVER_NONE != node->r_type){
+				amlvideo2_stop_thread(&node->vidq);
+				printk("%s,%dstop thread\n", __func__, __LINE__);
+			}
+
+			printk("unreg amlvideo2\n");
+			vf_unreg_provider(&amlvideo2_vf_prov);
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-                        switch_mod_gate_by_name("ge2d", 0);
+			switch_mod_gate_by_name("ge2d", 0);
 #endif
 			break;
 		case VFRAME_EVENT_PROVIDER_LIGHT_UNREG:
-                        printk("provider light unreg\n");
+			printk("provider light unreg\n");
 			break;
 		case VFRAME_EVENT_PROVIDER_RESET:
-                        printk("provider reset\n");
+			printk("provider reset\n");
 			break;
 		default:
 			break;
@@ -3325,7 +3459,7 @@ static int amlvideo2_receiver_event_fun(int type, void* data, void* private_data
 
 static const struct vframe_receiver_op_s video_vf_receiver =
 {
-    .event_cb = amlvideo2_receiver_event_fun
+	.event_cb = amlvideo2_receiver_event_fun
 };
 /* -----------------------------------------------------------------
 	Initialization and module stuff
@@ -3343,7 +3477,7 @@ static int amlvideo2_release_node(struct amlvideo2_device *vid_dev)
 			vf_unreg_receiver(&vid_dev->node[i]->recv);
 			if(vid_dev->node[i]->context)
 				destroy_ge2d_work_queue(vid_dev->node[i]->context);
-            kfree(vid_dev->node[i]->fh);
+			kfree(vid_dev->node[i]->fh);
 			vid_dev->node[i]->fh = NULL;
 			kfree(vid_dev->node[i]);
 			vid_dev->node[i] = NULL;
@@ -3359,7 +3493,7 @@ static int amlvideo2_create_node(struct platform_device *pdev)
 	int ret = 0, i = 0, j = 0;
 	struct video_device *vfd = NULL;
 	struct amlvideo2_node* vid_node = NULL;
-    struct amlvideo2_fh *fh = NULL;
+	struct amlvideo2_fh *fh = NULL;
 	struct resource *res = NULL;
 	struct v4l2_device *v4l2_dev = platform_get_drvdata(pdev);
 	struct amlvideo2_device *vid_dev = container_of(v4l2_dev,
@@ -3426,13 +3560,13 @@ static int amlvideo2_create_node(struct platform_device *pdev)
 			break;
 		}
 
-                fh = kzalloc(sizeof(*fh), GFP_KERNEL);
-                if ( !fh ) {
-                        break;
-                }
+		fh = kzalloc(sizeof(*fh), GFP_KERNEL);
+		if ( !fh ) {
+			break;
+		}
 
-                vid_node->fh = fh;
-                video_set_drvdata(vfd, vid_node);
+		vid_node->fh = fh;
+		video_set_drvdata(vfd, vid_node);
 
 		/* Set all controls to their default value. */
 		for (j = 0; j < ARRAY_SIZE(amlvideo2_node_qctrl); j++)
@@ -3449,10 +3583,9 @@ static int amlvideo2_create_node(struct platform_device *pdev)
 		vf_receiver_init(&vid_node->recv, RECEIVER_NAME, &video_vf_receiver, (void*)vid_node);
 #endif
        	vf_reg_receiver(&vid_node->recv);
-        vf_provider_init(&amlvideo2_vf_prov, DEVICE_NAME ,&amlvideo2_vf_provider, NULL);
+		vf_provider_init(&amlvideo2_vf_prov, DEVICE_NAME ,&amlvideo2_vf_provider, NULL);
 		vid_dev->node[i] = vid_node;
-		v4l2_info(&vid_dev->v4l2_dev, "V4L2 device registered as %s\n",
-		  	video_device_node_name(vfd));
+		v4l2_info(&vid_dev->v4l2_dev, "V4L2 device registered as %s\n", video_device_node_name(vfd));
 		ret = 0;
 	}
 
-- 
2.19.0

