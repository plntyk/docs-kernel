From 0ffdcaac6738ca45065b60d63a421c580635beaf Mon Sep 17 00:00:00 2001
From: xu xing <xing.xu@amlogic.com>
Date: Mon, 21 Jul 2014 20:09:21 +0800
Subject: [PATCH 4612/5965] m8m2: use cpuid help function for gpio and thermal
 driver

Change-Id: Idb30abc025f8e8517991b5789acaa483699109d2
---
 arch/arm/mach-meson8/gpio.c               | 57 ++++++++-------
 arch/arm/mach-meson8/thermal.c            | 89 ++++-------------------
 drivers/amlogic/input/saradc/saradc.c     |  5 +-
 drivers/amlogic/input/saradc/saradc_reg.h |  2 -
 4 files changed, 48 insertions(+), 105 deletions(-)

diff --git a/arch/arm/mach-meson8/gpio.c b/arch/arm/mach-meson8/gpio.c
index 9ef9fb626717..53bad8881116 100755
--- a/arch/arm/mach-meson8/gpio.c
+++ b/arch/arm/mach-meson8/gpio.c
@@ -116,17 +116,10 @@ static unsigned int gpio_to_pin[][5]={
 	[GPIOAO_11]={P_PIN_MUX_REG(10,27),NONE,NONE,NONE,NONE,},
 	[GPIOAO_12]={P_PIN_MUX_REG(10,17),NONE,NONE,NONE,NONE,},
 	[GPIOAO_13]={P_PIN_MUX_REG(10,31),NONE,NONE,NONE,NONE,},
-#ifdef CONFIG_ARCH_MESON8
 	[GPIOZ_0]={P_PIN_MUX_REG(5,31),P_PIN_MUX_REG(9,18),P_PIN_MUX_REG(7,25),P_PIN_MUX_REG(9,16),NONE,},
 	[GPIOZ_1]={P_PIN_MUX_REG(9,15),P_PIN_MUX_REG(5,30),P_PIN_MUX_REG(7,24),NONE,NONE,},
 	[GPIOZ_2]={P_PIN_MUX_REG(5,27),NONE,NONE,NONE,NONE,},
 	[GPIOZ_3]={P_PIN_MUX_REG(5,26),NONE,NONE,NONE,NONE,},
-#else
-	[GPIOZ_0]={P_PIN_MUX_REG(5,31),P_PIN_MUX_REG(9,18),P_PIN_MUX_REG(7,25),P_PIN_MUX_REG(9,16),P_PIN_MUX_REG(6,0),},
-	[GPIOZ_1]={P_PIN_MUX_REG(9,15),P_PIN_MUX_REG(5,30),P_PIN_MUX_REG(7,24),P_PIN_MUX_REG(6,1),NONE,},
-	[GPIOZ_2]={P_PIN_MUX_REG(5,27),P_PIN_MUX_REG(6,2),NONE,NONE,NONE,},
-	[GPIOZ_3]={P_PIN_MUX_REG(5,26),P_PIN_MUX_REG(6,3),NONE,NONE,NONE,},
-#endif
 	[GPIOZ_4]={P_PIN_MUX_REG(5,25),P_PIN_MUX_REG(6,15),NONE,NONE,NONE,},
 	[GPIOZ_5]={P_PIN_MUX_REG(5,24),P_PIN_MUX_REG(6,14),NONE,NONE,NONE,},
 	[GPIOZ_6]={P_PIN_MUX_REG(6,13),P_PIN_MUX_REG(3,21),P_PIN_MUX_REG(3,21),NONE,NONE,},
@@ -147,11 +140,7 @@ static unsigned int gpio_to_pin[][5]={
 	[GPIOH_6]={P_PIN_MUX_REG(9,10),NONE,NONE,NONE,NONE,},
 	[GPIOH_7]={P_PIN_MUX_REG(4,3),NONE,NONE,NONE,NONE,},
 	[GPIOH_8]={P_PIN_MUX_REG(4,2),NONE,NONE,NONE,NONE,},
-#ifdef CONFIG_ARCH_MESON8
 	[GPIOH_9]={P_PIN_MUX_REG(4,1),NONE,NONE,NONE,NONE,},
-#else
-	[GPIOH_9]={P_PIN_MUX_REG(4,1),P_PIN_MUX_REG(3,19),NONE,NONE,NONE,},
-#endif
 	[BOOT_0]={P_PIN_MUX_REG(4,30),P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(6,29),NONE,NONE,},
 	[BOOT_1]={P_PIN_MUX_REG(4,29),P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(6,28),NONE,NONE,},
 	[BOOT_2]={P_PIN_MUX_REG(2,26),P_PIN_MUX_REG(6,27),P_PIN_MUX_REG(4,29),NONE,NONE,},
@@ -175,13 +164,8 @@ static unsigned int gpio_to_pin[][5]={
 	[CARD_1]={P_PIN_MUX_REG(2,7),P_PIN_MUX_REG(2,15),NONE,NONE,NONE,},
 	[CARD_2]={P_PIN_MUX_REG(2,11),P_PIN_MUX_REG(2,5),NONE,NONE,NONE,},
 	[CARD_3]={P_PIN_MUX_REG(2,4),P_PIN_MUX_REG(2,10),NONE,NONE,NONE,},
-#ifdef CONFIG_ARCH_MESON8
 	[CARD_4]={P_PIN_MUX_REG(2,6),P_PIN_MUX_REG(2,12),P_PIN_MUX_REG(8,10),NONE,NONE,},
 	[CARD_5]={P_PIN_MUX_REG(2,13),P_PIN_MUX_REG(8,9),P_PIN_MUX_REG(2,6),NONE,NONE,},
-#else
-	[CARD_4]={P_PIN_MUX_REG(2,6),P_PIN_MUX_REG(2,12),P_PIN_MUX_REG(8,10),P_PIN_MUX_REG(8,8),NONE,},
-	[CARD_5]={P_PIN_MUX_REG(2,13),P_PIN_MUX_REG(8,9),P_PIN_MUX_REG(2,6),P_PIN_MUX_REG(8,7),NONE,},
-#endif
 	[CARD_6]={NONE,NONE,NONE,NONE,NONE,},
 	[GPIODV_0]={P_PIN_MUX_REG(8,27),P_PIN_MUX_REG(7,0),P_PIN_MUX_REG(0,1),P_PIN_MUX_REG(0,6),NONE,},
 	[GPIODV_1]={P_PIN_MUX_REG(0,6),P_PIN_MUX_REG(7,1),P_PIN_MUX_REG(0,1),NONE,NONE,},
@@ -207,13 +191,8 @@ static unsigned int gpio_to_pin[][5]={
 	[GPIODV_21]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
 	[GPIODV_22]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
 	[GPIODV_23]={P_PIN_MUX_REG(0,4),P_PIN_MUX_REG(0,6),NONE,NONE,NONE,},
-#ifdef CONFIG_ARCH_MESON8
 	[GPIODV_24]={P_PIN_MUX_REG(0,9),P_PIN_MUX_REG(0,19),P_PIN_MUX_REG(0,21),P_PIN_MUX_REG(6,23),P_PIN_MUX_REG(8,24),},
 	[GPIODV_25]={P_PIN_MUX_REG(6,22),P_PIN_MUX_REG(0,20),P_PIN_MUX_REG(0,8),P_PIN_MUX_REG(8,23),P_PIN_MUX_REG(0,18),},
-#else
-	[GPIODV_24]={P_PIN_MUX_REG(0,9),P_PIN_MUX_REG(0,19),P_PIN_MUX_REG(6,23),P_PIN_MUX_REG(8,24),NONE,},
-	[GPIODV_25]={P_PIN_MUX_REG(6,22),P_PIN_MUX_REG(0,8),P_PIN_MUX_REG(8,23),P_PIN_MUX_REG(0,18),NONE,},
-#endif
 	[GPIODV_26]={P_PIN_MUX_REG(6,21),P_PIN_MUX_REG(8,21),P_PIN_MUX_REG(0,7),P_PIN_MUX_REG(8,22),P_PIN_MUX_REG(8,20),},
 	[GPIODV_27]={P_PIN_MUX_REG(0,10),P_PIN_MUX_REG(6,20),P_PIN_MUX_REG(8,28),P_PIN_MUX_REG(8,19),NONE,},
 	[GPIODV_28]={P_PIN_MUX_REG(7,27),P_PIN_MUX_REG(3,26),NONE,NONE,NONE,},
@@ -221,11 +200,7 @@ static unsigned int gpio_to_pin[][5]={
 	[GPIOY_0]={P_PIN_MUX_REG(1,19),P_PIN_MUX_REG(1,10),P_PIN_MUX_REG(3,2),P_PIN_MUX_REG(9,9),P_PIN_MUX_REG(1,15),},
 	[GPIOY_1]={P_PIN_MUX_REG(9,8),P_PIN_MUX_REG(3,1),P_PIN_MUX_REG(1,18),P_PIN_MUX_REG(1,14),P_PIN_MUX_REG(1,19),},
 	[GPIOY_2]={P_PIN_MUX_REG(3,18),P_PIN_MUX_REG(1,8),P_PIN_MUX_REG(1,17),NONE,NONE,},
-#ifdef CONFIG_ARCH_MESON8
 	[GPIOY_3]={P_PIN_MUX_REG(1,16),P_PIN_MUX_REG(1,7),NONE,NONE,NONE,},
-#else
-	[GPIOY_3]={P_PIN_MUX_REG(1,16),P_PIN_MUX_REG(1,7),P_PIN_MUX_REG(3,11),NONE,NONE,},
-#endif
 	[GPIOY_4]={P_PIN_MUX_REG(4,25),P_PIN_MUX_REG(3,3),P_PIN_MUX_REG(1,6),NONE,NONE,},
 	[GPIOY_5]={P_PIN_MUX_REG(4,24),P_PIN_MUX_REG(3,15),P_PIN_MUX_REG(1,5),P_PIN_MUX_REG(9,7),NONE,},
 	[GPIOY_6]={P_PIN_MUX_REG(4,23),P_PIN_MUX_REG(3,16),P_PIN_MUX_REG(1,3),P_PIN_MUX_REG(1,4),P_PIN_MUX_REG(9,6),},
@@ -264,6 +239,18 @@ static unsigned int gpio_to_pin[][5]={
 	[GPIO_BSD_EN]={NONE,NONE,NONE,NONE,NONE,},
 	[GPIO_TEST_N]={P_PIN_MUX_REG(9,19),NONE,NONE,NONE,NONE,},
 };
+static unsigned int gpio_to_pin_m8m2[][5]={
+	[GPIOZ_0]={P_PIN_MUX_REG(5,31),P_PIN_MUX_REG(9,18),P_PIN_MUX_REG(7,25),P_PIN_MUX_REG(9,16),P_PIN_MUX_REG(6,0)},
+	[GPIOZ_1]={P_PIN_MUX_REG(9,15),P_PIN_MUX_REG(5,30),P_PIN_MUX_REG(7,24),P_PIN_MUX_REG(6,1),NONE},
+	[GPIOZ_2]={P_PIN_MUX_REG(5,27),P_PIN_MUX_REG(6,2),NONE,NONE,NONE},
+	[GPIOZ_3]={P_PIN_MUX_REG(5,26),P_PIN_MUX_REG(6,3),NONE,NONE,NONE},
+	[GPIOH_9]={P_PIN_MUX_REG(4,1),P_PIN_MUX_REG(3,19),NONE,NONE,NONE},	
+	[CARD_4]={P_PIN_MUX_REG(2,6),P_PIN_MUX_REG(2,12),P_PIN_MUX_REG(8,10),P_PIN_MUX_REG(8,8),NONE},
+	[CARD_5]={P_PIN_MUX_REG(2,13),P_PIN_MUX_REG(8,9),P_PIN_MUX_REG(2,6),P_PIN_MUX_REG(8,7),NONE},
+	[GPIODV_24]={P_PIN_MUX_REG(0,9),P_PIN_MUX_REG(0,19),P_PIN_MUX_REG(6,23),P_PIN_MUX_REG(8,24),NONE},
+	[GPIODV_25]={P_PIN_MUX_REG(6,22),P_PIN_MUX_REG(0,8),P_PIN_MUX_REG(8,23),P_PIN_MUX_REG(0,18),NONE},
+	[GPIOY_3]={P_PIN_MUX_REG(1,16),P_PIN_MUX_REG(1,7),P_PIN_MUX_REG(3,11),NONE,NONE},
+};
 struct amlogic_gpio_desc amlogic_pins[]=
 {
 	PIN_AOMAP(GPIOAO_0,4,0,4,16,4,0),
@@ -666,7 +653,27 @@ static int amlogic_gpio_probe(struct platform_device *pdev)
 	amlogic_gpio_chip.ngpio=ARRAY_SIZE(amlogic_pins);
 	gpiochip_add(&amlogic_gpio_chip);
 	pullup_ops.meson_set_pullup=m8_set_pullup;
+	if(IS_MESON_M8M2_CPU){
+		memcpy(gpio_to_pin[GPIOZ_0],gpio_to_pin_m8m2[GPIOZ_0],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[GPIOZ_1],gpio_to_pin_m8m2[GPIOZ_1],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[GPIOZ_2],gpio_to_pin_m8m2[GPIOZ_2],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[GPIOZ_3],gpio_to_pin_m8m2[GPIOZ_3],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[GPIOH_9],gpio_to_pin_m8m2[GPIOH_9],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[CARD_4],gpio_to_pin_m8m2[CARD_4],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[CARD_5],gpio_to_pin_m8m2[CARD_5],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[GPIODV_24],gpio_to_pin_m8m2[GPIODV_24],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[GPIODV_25],gpio_to_pin_m8m2[GPIODV_25],5*sizeof(unsigned int));
+		memcpy(gpio_to_pin[GPIOY_3],gpio_to_pin_m8m2[GPIOY_3],5*sizeof(unsigned int));
+	}
 	dev_info(&pdev->dev, "Probed amlogic GPIO driver\n");
+#if 0
+	int i,j;
+	for(i=0;i<=GPIO_TEST_N;i++){
+		for (j=0;j<5;j++)
+		printk( "%d,%d\t",GPIO_REG(gpio_to_pin[i][j]),GPIO_BIT(gpio_to_pin[i][j]));
+	printk("\n");
+	}
+#endif
 #ifdef gpio_dump
 	int i;
 	for(i=0;i<GPIO_TEST_N;i++)
diff --git a/arch/arm/mach-meson8/thermal.c b/arch/arm/mach-meson8/thermal.c
index fbd372d3a088..eb0b49bff104 100755
--- a/arch/arm/mach-meson8/thermal.c
+++ b/arch/arm/mach-meson8/thermal.c
@@ -2,8 +2,7 @@
 #include <linux/amlogic/saradc.h>
 #include <mach/thermal.h>
 #include <linux/slab.h>
-
-#ifdef CONFIG_ARCH_MESON8
+#include <mach/am_regs.h>
 #define  NOT_WRITE_EFUSE 0x0
 #define EFUSE_MIGHT_WRONG 0x8
 #define EFUEE_MUST_RIGHT 0x4
@@ -27,85 +26,23 @@ int thermal_firmware_init()
 		temp=0;TS_C=0;
 		temp=buf[1];
 		temp=(temp<<8)|buf[0];
-		TS_C=temp&0xf;
-		flag=0;
 		flag=(temp&0x8000)>>15;
-		temp=(temp&0x7fff)>>4;
-		printk("adc=%d,TS_C=%d,flag=%d\n",temp,TS_C,flag);
-		temps->flag=flag;
-		temps->trimming=TS_C;
-		temps->adc_efuse=temp;
-		temps->efuse_flag=buf[3]>>4;
-		printk("efuse_flag=%x\n",temps->efuse_flag);
-		if(temps->efuse_flag==EFUEE_MUST_RIGHT ||temps->efuse_flag==EFUSE_FIXED){
-			if(temps->flag){
-				temps->flag=1;
-			}
-		}else{
-			temps->flag=0;
+		if(IS_MESON_M8_CPU){
+			TS_C=temp&0xf;
+			temp=(temp&0x7fff)>>4;
+			printk("M8:adc=%d,TS_C=%d,flag=%d\n",temp,TS_C,flag);
 		}
-	}
-	else{
-		temps->flag=flag;
-		temps->trimming=TS_C;
-		temps->adc_efuse=temp;
-		temps->efuse_flag=-1;
-	}
-	if(temps->flag){
-		temp_sensor_adc_init(temps->trimming);
-		return 0;
-	}
-	else
-		return -1;
-	
-}
-int get_cpu_temp(void)
-{
-	int ret=-1,tempa;
-	if(temps->flag){
-		ret=get_adc_sample(6);
-		if(ret>=0){
-			tempa=(18*(ret-temps->adc_efuse)*10000)/1024/10/85+27;
-			ret=tempa;
+		if(IS_MESON_M8M2_CPU){
+			TS_C=temp&0x1f;
+			temp=(temp&0x7fff)>>5;
+			printk("M8M2:adc=%d,TS_C=%d,flag=%d\n",temp,TS_C,flag); 
 		}
-	}
-	return ret;
-}
-#else
-#define  NOT_WRITE_EFUSE 0x0
-#define EFUSE_MIGHT_WRONG 0x8
-#define EFUEE_PRIVATE 0x4
-#define EFUSE_OPS 0xa
-struct temp_sensor{
-	int flag;
-	int trimming;
-	int adc_efuse;
-	int efuse_flag;
-};
-struct temp_sensor *temps;
-int thermal_firmware_init()
-{
-	int err;
-	char buf[4]={0};
-	int temp=-1,TS_C=-1,flag=0;
-	err=efuse_read_intlItem("temper_cvbs",buf,4);
-	if(err>=0){
-		printk("buf[0]=%x,buf[1]=%x,err=%d\n",buf[0],buf[1],err);
-		temps=kzalloc(sizeof(*temps),GFP_KERNEL);
-		temp=0;TS_C=0;
-		temp=buf[1];
-		temp=(temp<<8)|buf[0];
-		TS_C=temp&0x1f;
-		flag=0;
-		flag=(temp&0x8000)>>15;
-		temp=(temp&0x7fff)>>5;
-		printk("adc=%d,TS_C=%d,flag=%d\n",temp,TS_C,flag);
 		temps->flag=flag;
 		temps->trimming=TS_C;
 		temps->adc_efuse=temp;
 		temps->efuse_flag=buf[3]>>4;
 		printk("efuse_flag=%x\n",temps->efuse_flag);
-		if((temps->efuse_flag == EFUEE_PRIVATE) ||(temps->efuse_flag == EFUSE_OPS)){
+		if(temps->efuse_flag==EFUEE_MUST_RIGHT ||temps->efuse_flag==EFUSE_FIXED){
 			if(temps->flag){
 				temps->flag=1;
 			}
@@ -133,10 +70,12 @@ int get_cpu_temp(void)
 	if(temps->flag){
 		ret=get_adc_sample(6);
 		if(ret>=0){
-			tempa=(10*(ret-temps->adc_efuse))/32+27;
+			if(IS_MESON_M8_CPU)
+				tempa=(18*(ret-temps->adc_efuse)*10000)/1024/10/85+27;
+			if(IS_MESON_M8M2_CPU)
+				tempa=(10*(ret-temps->adc_efuse))/32+27;
 			ret=tempa;
 		}
 	}
 	return ret;
 }
-#endif
diff --git a/drivers/amlogic/input/saradc/saradc.c b/drivers/amlogic/input/saradc/saradc.c
index 50c5fa7bdbe0..c045996810ca 100755
--- a/drivers/amlogic/input/saradc/saradc.c
+++ b/drivers/amlogic/input/saradc/saradc.c
@@ -142,9 +142,8 @@ void temp_sensor_adc_init(int triming)
 {
 	select_temp();
 	set_trimming(triming&0xf);
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
-	set_trimming1(triming>>4);
-#endif
+	if(!IS_MESON_M8_CPU)
+		set_trimming1(triming>>4);
 	enable_temp();
 	enable_temp__();
 }
diff --git a/drivers/amlogic/input/saradc/saradc_reg.h b/drivers/amlogic/input/saradc/saradc_reg.h
index d8a8b62d48cf..3e09aad0726f 100755
--- a/drivers/amlogic/input/saradc/saradc_reg.h
+++ b/drivers/amlogic/input/saradc/saradc_reg.h
@@ -204,9 +204,7 @@ enum {
 #define select_temp()       set_bits(SAR_ADC_DELTA_10, 1, 27, 1)
 #define unselect_temp()     set_bits(SAR_ADC_DELTA_10, 0, 27, 1)
 #endif
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
 #define set_trimming1(x)     set_bits(HHI_DPLL_TOP_0, x, 9, 1)
-#endif
 #define XN_OFF		(0<<0)
 #define XN_ON		(1<<0)
 #define YN_OFF		(0<<1)
-- 
2.19.0

