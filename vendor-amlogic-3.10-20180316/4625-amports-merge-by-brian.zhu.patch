From ed509699e28b88a0f4992c1604f79a54ad6603a0 Mon Sep 17 00:00:00 2001
From: xu xing <xing.xu@amlogic.com>
Date: Thu, 31 Jul 2014 20:57:28 +0800
Subject: [PATCH 4625/5965] amports: merge by brian.zhu

Change-Id: If5d602013cb9ce1ae4038619d506e937dc452c72
---
 drivers/amlogic/amports/Makefile              |   8 -
 drivers/amlogic/amports/amports_config.h      |  13 +-
 drivers/amlogic/amports/amstream.c            | 271 ++++++-----
 drivers/amlogic/amports/amvdec.c              | 452 ++++++++++--------
 drivers/amlogic/amports/amvdec.h              |   4 +-
 drivers/amlogic/amports/encoder.c             | 189 +++++---
 drivers/amlogic/amports/encoder_mc.h          |   3 +-
 drivers/amlogic/amports/esparser.c            |  34 +-
 .../amports/m8/ucode/encoder/encoder_mc.c     |   4 +
 .../encoder/h264_enc_mix_sw_hdec_m2_dblk.h}   |   0
 .../m8/ucode/h264_4k2k/h264c_linux_single.h   |  54 +++
 .../ucode/h264_4k2k/h264header_linux_single.h | 126 +++++
 .../m8/ucode/h264_4k2k/h264mmc_linux_single.h | 172 +++++++
 .../ucode/h264_4k2k/h264slice_linux_single.h  | 269 +++++++++++
 .../m8/ucode/h264_4k2k/vh264_4k2k_mc.c        |  16 +
 .../m8/ucode/h264_4k2k/vh264_4k2k_mc.h        |   5 +
 drivers/amlogic/amports/m8/vdec_clk.c         |  78 ++-
 .../amports/m8m2/ucode/encoder/encoder_mc.c   |   4 +-
 .../encoder/h264_enc_mix_sw_hdec_m2_dblk.h    | 382 +++++++++++++++
 drivers/amlogic/amports/ptsserv.c             |  65 +--
 drivers/amlogic/amports/streambuf.c           |  38 +-
 drivers/amlogic/amports/streambuf.h           |   4 -
 drivers/amlogic/amports/streambuf_reg.h       |   2 +-
 drivers/amlogic/amports/tsdemux.c             |  37 +-
 drivers/amlogic/amports/tsdemux.h             |   4 -
 drivers/amlogic/amports/tsync_pcr.c           |   4 +-
 drivers/amlogic/amports/vdec.c                | 194 ++++----
 drivers/amlogic/amports/vdec.h                |   2 +-
 drivers/amlogic/amports/vdec_clk.h            |   2 -
 drivers/amlogic/amports/vh264_4k2k.c          | 337 +++++++------
 drivers/amlogic/amports/vh264_4k2k_mc.h       |   5 +
 drivers/amlogic/amports/vh265.c               |  10 +-
 drivers/amlogic/amports/vreal.c               |  41 +-
 drivers/amlogic/canvas/canvas.c               |  14 +-
 include/linux/amlogic/amports/ptsserv.h       |   2 +-
 35 files changed, 2042 insertions(+), 803 deletions(-)
 rename drivers/amlogic/amports/{m8m2/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h => m8/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h} (100%)
 mode change 100755 => 100644
 create mode 100644 drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h
 create mode 100644 drivers/amlogic/amports/m8/ucode/h264_4k2k/h264header_linux_single.h
 create mode 100644 drivers/amlogic/amports/m8/ucode/h264_4k2k/h264mmc_linux_single.h
 create mode 100644 drivers/amlogic/amports/m8/ucode/h264_4k2k/h264slice_linux_single.h
 create mode 100644 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h

diff --git a/drivers/amlogic/amports/Makefile b/drivers/amlogic/amports/Makefile
index a3fc3a3b52ae..05dc59952a23 100755
--- a/drivers/amlogic/amports/Makefile
+++ b/drivers/amlogic/amports/Makefile
@@ -31,9 +31,6 @@ endif
 ifeq ($(CONFIG_ARCH_MESON8B),y)
 obj-y = m8b/
 endif
-ifeq ($(CONFIG_ARCH_MESON8M2),y)
-obj-y = m8m2/
-endif
 
 obj-$(CONFIG_AM_STREAMING) += amports.o
 
@@ -175,8 +172,3 @@ obj-$(CONFIG_VSYNC_RDMA) += rdma.o
 ifneq ($(CONFIG_AM_DVB),)
 EXTRA_CFLAGS = -DENABLE_DEMUX_DRIVER -DMODIFY_TIMESTAMP_INC_WITH_PLL -DCALC_CACHED_TIME #-DUSE_VMASTER_MODE
 endif
-
-ifeq ($(CONFIG_ARCH_MESON8M2), y)
-EXTRA_CFLAGS += -DCONFIG_H264_4K2K_SINGLE_CORE
-endif
-
diff --git a/drivers/amlogic/amports/amports_config.h b/drivers/amlogic/amports/amports_config.h
index 38cd7aba4fae..2fcbc9ecd9e7 100755
--- a/drivers/amlogic/amports/amports_config.h
+++ b/drivers/amlogic/amports/amports_config.h
@@ -8,13 +8,7 @@ value seem:
 arch\arm\plat-meson\include\plat\cpu.h
 */
 
-#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8M2
-#define HAS_VPU_PROT  1
-#define HAS_VDEC2     0
-#define HAS_HEVC_VDEC 1
-#define HAS_HDEC      1
-
-#elif MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
 #define HAS_VPU_PROT  0
 #define HAS_VDEC2     0
 #define HAS_HEVC_VDEC 1
@@ -22,9 +16,9 @@ arch\arm\plat-meson\include\plat\cpu.h
 
 #elif MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define HAS_VPU_PROT  1
-#define HAS_VDEC2     1
+#define HAS_VDEC2     (IS_MESON_M8_CPU ? 1 : 0)
+#define HAS_HEVC_VDEC (IS_MESON_M8_CPU ? 0 : 1)
 #define HAS_HDEC      1
-#define HAS_HEVC_VDEC 0
 
 #elif  MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 #define HAS_VPU_PROT  0
@@ -37,6 +31,7 @@ arch\arm\plat-meson\include\plat\cpu.h
 #define HAS_VDEC2     0
 #define HAS_HEVC_VDEC 0
 #define HAS_HDEC      0
+
 #endif
 
 #ifndef CONFIG_AM_VDEC_H265
diff --git a/drivers/amlogic/amports/amstream.c b/drivers/amlogic/amports/amstream.c
index a2896c70700d..740775d367b7 100755
--- a/drivers/amlogic/amports/amstream.c
+++ b/drivers/amlogic/amports/amstream.c
@@ -77,6 +77,8 @@
 #define MODULE_NAME "amstream"
 
 #define MAX_AMSTREAM_PORT_NUM ARRAY_SIZE(ports)
+u32 amstream_port_num;
+u32 amstream_buf_num;
 
 extern void set_real_audio_info(void *arg);
 //#define DATA_DEBUG
@@ -283,14 +285,12 @@ static stream_port_t ports[] = {
         .type  = PORT_TYPE_USERDATA,
         .fops  = &userdata_fops,
     },
-#if HAS_HEVC_VDEC
     {
         .name  = "amstream_hevc",
         .type  = PORT_TYPE_ES | PORT_TYPE_VIDEO | PORT_TYPE_HEVC,
         .fops  = &vbuf_fops,
         .vformat = VFORMAT_HEVC,
     },
-#endif
 };
 
 static stream_buf_t bufs[BUF_MAX_NUM] = {
@@ -322,31 +322,34 @@ static stream_buf_t bufs[BUF_MAX_NUM] = {
         .buf_size = 0,
         .first_tstamp = INVALID_PTS
     },
-#if HAS_HEVC_VDEC
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     {
         .reg_base = HEVC_STREAM_REG_BASE,
         .type = BUF_TYPE_HEVC,
         .buf_start = 0,
         .buf_size = 0,
         .first_tstamp = INVALID_PTS
-    },        
+    },
 #endif
 };
 
 stream_buf_t *get_buf_by_type(u32  type)
 {
-    switch (type) {
-        case PTS_TYPE_VIDEO:
-            return &bufs[BUF_TYPE_VIDEO];
-        case PTS_TYPE_AUDIO:
-            return &bufs[BUF_TYPE_AUDIO];
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
-        case PTS_TYPE_HEVC:
+    if (PTS_TYPE_VIDEO == type) {
+        return &bufs[BUF_TYPE_VIDEO];
+    } 
+    if (PTS_TYPE_AUDIO == type) {
+        return &bufs[BUF_TYPE_AUDIO];
+    }
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (!IS_MESON_M8_CPU) {
+        if (PTS_TYPE_HEVC == type) {
             return &bufs[BUF_TYPE_HEVC];
-#endif
-        default:
-            return NULL;
+        }    
     }
+#endif
+
+    return NULL;
 }
 
 void set_sample_rate_info(int arg)
@@ -366,11 +369,15 @@ EXPORT_SYMBOL(get_audio_info);
 
 static void amstream_change_vbufsize(stream_port_t *port,struct stream_buf_s *pvbuf)
 {
-#if HAS_HEVC_VDEC
-    if ((pvbuf->type == BUF_TYPE_VIDEO) || (pvbuf->type == BUF_TYPE_HEVC)) {
-#else
-    if (pvbuf->type == BUF_TYPE_VIDEO) {
-#endif
+    int condition;
+
+    if (HAS_HEVC_VDEC) {
+        condition = (pvbuf->type == BUF_TYPE_VIDEO) || (pvbuf->type == BUF_TYPE_HEVC);
+    } else {
+        condition = pvbuf->type == BUF_TYPE_VIDEO;
+    }
+
+    if (pvbuf->type == condition) {
         if (port->vformat == VFORMAT_H264_4K2K){				
             pvbuf->buf_size = pvbuf->default_buf_size;
 
@@ -416,15 +423,15 @@ static  int video_port_init(stream_port_t *port, struct stream_buf_s * pbuf)
 	
     amstream_change_vbufsize(port,pbuf);
 
-#if HAS_HEVC_VDEC
-    if (port->type & PORT_TYPE_MPTS) {
-        if (pbuf->type == BUF_TYPE_HEVC) {
-            vdec_poweroff(VDEC_1);
-        } else {
-            vdec_poweroff(VDEC_HEVC);
+    if (HAS_HEVC_VDEC) {
+        if (port->type & PORT_TYPE_MPTS) {
+            if (pbuf->type == BUF_TYPE_HEVC) {
+                vdec_poweroff(VDEC_1);
+            } else {
+                vdec_poweroff(VDEC_HEVC);
+            }
         }
     }
-#endif
 
     r = stbuf_init(pbuf);
     if (r < 0) {
@@ -637,11 +644,11 @@ static  int amstream_port_init(stream_port_t *port)
         pubuf->buf_wp = 0;
         pubuf->buf_rp = 0;
 
-#if HAS_HEVC_VDEC
-        if (port->vformat == VFORMAT_HEVC) {
-            pvbuf = &bufs[BUF_TYPE_HEVC];
+        if (HAS_HEVC_VDEC) {
+            if (port->vformat == VFORMAT_HEVC) {
+                pvbuf = &bufs[BUF_TYPE_HEVC];
+            }
         }
-#endif
 
         r = video_port_init(port, pvbuf);
         if (r < 0) {
@@ -659,18 +666,19 @@ static  int amstream_port_init(stream_port_t *port)
     }
 
     if (port->type & PORT_TYPE_MPTS) {
-#if HAS_HEVC_VDEC
-        r = tsdemux_init((port->flag & PORT_FLAG_VID) ? port->vid : 0xffff,
-                         (port->flag & PORT_FLAG_AID) ? port->aid : 0xffff,
-                         (port->flag & PORT_FLAG_SID) ? port->sid : 0xffff,
-                         port->pcrid,
-                         (port->vformat == VFORMAT_HEVC));
-#else
-        r = tsdemux_init((port->flag & PORT_FLAG_VID) ? port->vid : 0xffff,
-                         (port->flag & PORT_FLAG_AID) ? port->aid : 0xffff,
-                         (port->flag & PORT_FLAG_SID) ? port->sid : 0xffff,
-                         port->pcrid);
-#endif
+        if (HAS_HEVC_VDEC) {
+            r = tsdemux_init((port->flag & PORT_FLAG_VID) ? port->vid : 0xffff,
+                             (port->flag & PORT_FLAG_AID) ? port->aid : 0xffff,
+                             (port->flag & PORT_FLAG_SID) ? port->sid : 0xffff,
+                             port->pcrid,
+                             (port->vformat == VFORMAT_HEVC));
+        } else {
+            r = tsdemux_init((port->flag & PORT_FLAG_VID) ? port->vid : 0xffff,
+                             (port->flag & PORT_FLAG_AID) ? port->aid : 0xffff,
+                             (port->flag & PORT_FLAG_SID) ? port->sid : 0xffff,
+                             port->pcrid, 0);
+        }
+
         if (r < 0) {
             printk("tsdemux_init  failed\n");
             goto error4;
@@ -691,11 +699,11 @@ static  int amstream_port_init(stream_port_t *port)
     }
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    if ((port->type & PORT_TYPE_VIDEO) && (port->vformat == VFORMAT_H264_4K2K)) {
-        stbuf_vdec2_init(pvbuf);
+    if (!IS_MESON_M8M2_CPU) {
+        if ((port->type & PORT_TYPE_VIDEO) && (port->vformat == VFORMAT_H264_4K2K)) {
+            stbuf_vdec2_init(pvbuf);
+        }
     }
-#endif
 #endif
 
     tsync_audio_break(0); // clear audio break
@@ -721,11 +729,11 @@ static  int amstream_port_release(stream_port_t *port)
     stream_buf_t *pabuf = &bufs[BUF_TYPE_AUDIO];
     stream_buf_t *psbuf = &bufs[BUF_TYPE_SUBTITLE];
 
-#if HAS_HEVC_VDEC
-    if (port->vformat == VFORMAT_HEVC) {
-        pvbuf = &bufs[BUF_TYPE_HEVC];
+    if (HAS_HEVC_VDEC) {
+        if (port->vformat == VFORMAT_HEVC) {
+            pvbuf = &bufs[BUF_TYPE_HEVC];
+        }
     }
-#endif
 
     if (port->type & PORT_TYPE_MPTS) {
         tsdemux_release();
@@ -790,12 +798,15 @@ static ssize_t amstream_vbuf_write(struct file *file, const char *buf,
                                    size_t count, loff_t * ppos)
 {
     stream_port_t *port = (stream_port_t *)file->private_data;
-#if HAS_HEVC_VDEC
-    stream_buf_t *pbuf = (port->type & PORT_TYPE_HEVC) ? &bufs[BUF_TYPE_HEVC] : &bufs[BUF_TYPE_VIDEO];
-#else
-    stream_buf_t *pbuf = &bufs[BUF_TYPE_VIDEO];
-#endif
+    stream_buf_t *pbuf = NULL;
     int r;
+
+    if (HAS_HEVC_VDEC) {
+        pbuf = (port->type & PORT_TYPE_HEVC) ? &bufs[BUF_TYPE_HEVC] : &bufs[BUF_TYPE_VIDEO];
+    } else {
+        pbuf = &bufs[BUF_TYPE_VIDEO];
+    }
+    
     if (!(port->flag & PORT_FLAG_INITED)) {
         r = amstream_port_init(port);
         if (r < 0) {
@@ -842,13 +853,16 @@ static ssize_t amstream_mpts_write(struct file *file, const char *buf,
                                    size_t count, loff_t * ppos)
 {
     stream_port_t *port = (stream_port_t *)file->private_data;
-#if HAS_HEVC_VDEC
-    stream_buf_t *pvbuf = (port->vformat == VFORMAT_HEVC) ? &bufs[BUF_TYPE_HEVC] : &bufs[BUF_TYPE_VIDEO];
-#else
-    stream_buf_t *pvbuf = &bufs[BUF_TYPE_VIDEO];
-#endif
     stream_buf_t *pabuf = &bufs[BUF_TYPE_AUDIO];
+    stream_buf_t *pvbuf = NULL;
     int r;
+
+    if (HAS_HEVC_VDEC) {
+        pvbuf = (port->vformat == VFORMAT_HEVC) ? &bufs[BUF_TYPE_HEVC] : &bufs[BUF_TYPE_VIDEO];
+    } else {
+        pvbuf = &bufs[BUF_TYPE_VIDEO];
+    }
+
     if (!(port->flag & PORT_FLAG_INITED)) {
         r = amstream_port_init(port);
         if (r < 0) {
@@ -1068,7 +1082,7 @@ static int amstream_open(struct inode *inode, struct file *file)
     stream_port_t *s;
     stream_port_t *this = &ports[iminor(inode)];
 
-    if (iminor(inode) >= MAX_AMSTREAM_PORT_NUM) {
+    if (iminor(inode) >= amstream_port_num) {
         return (-ENODEV);
     }
 
@@ -1077,7 +1091,7 @@ static int amstream_open(struct inode *inode, struct file *file)
     }
 
     /* check other ports conflict */
-    for (s = &ports[0], i = 0; i < MAX_AMSTREAM_PORT_NUM; i++, s++) {
+    for (s = &ports[0], i = 0; i < amstream_port_num; i++, s++) {
         if ((s->flag & PORT_FLAG_IN_USE) &&
             ((this->type) & (s->type) & (PORT_TYPE_VIDEO | PORT_TYPE_AUDIO))) {
             return (-EBUSY);
@@ -1098,17 +1112,19 @@ static int amstream_open(struct inode *inode, struct file *file)
     if (this->type & PORT_TYPE_VIDEO) {
         switch_mod_gate_by_name("vdec", 1);
 
-#if HAS_HEVC_VDEC
-        if (this->type & (PORT_TYPE_MPTS | PORT_TYPE_HEVC)) {
-            vdec_poweron(VDEC_HEVC);
-        }
+        if (HAS_HEVC_VDEC) {
+            if (this->type & (PORT_TYPE_MPTS | PORT_TYPE_HEVC)) {
+                vdec_poweron(VDEC_HEVC);
+            }
 
-        if ((this->type & PORT_TYPE_HEVC) == 0) {
+            if ((this->type & PORT_TYPE_HEVC) == 0) {
+                vdec_poweron(VDEC_1);
+            }
+        } else {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
             vdec_poweron(VDEC_1);
-        }
-#elif MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
-        vdec_poweron(VDEC_1);
 #endif
+        }
 
         memset(&amstream_dec_info, 0, sizeof(amstream_dec_info));
     }
@@ -1141,7 +1157,7 @@ static int amstream_release(struct inode *inode, struct file *file)
 {
     stream_port_t *this = &ports[iminor(inode)];
 
-    if (iminor(inode) >= MAX_AMSTREAM_PORT_NUM) {
+    if (iminor(inode) >= amstream_port_num) {
         return (-ENODEV);
     }
     if (this->flag & PORT_FLAG_INITED) {
@@ -1150,12 +1166,12 @@ static int amstream_release(struct inode *inode, struct file *file)
     if ((this->type & (PORT_TYPE_AUDIO | PORT_TYPE_VIDEO)) == PORT_TYPE_AUDIO) {
         s32 i;
         stream_port_t *s;
-        for (s = &ports[0], i = 0; i < MAX_AMSTREAM_PORT_NUM; i++, s++) {
+        for (s = &ports[0], i = 0; i < amstream_port_num; i++, s++) {
             if ((s->flag & PORT_FLAG_IN_USE) && (s->type & PORT_TYPE_VIDEO)) {
                 break;
             }
         }
-        if (i == MAX_AMSTREAM_PORT_NUM) {
+        if (i == amstream_port_num) {
             timestamp_firstvpts_set(0);
         }
     }    
@@ -1174,9 +1190,10 @@ static int amstream_release(struct inode *inode, struct file *file)
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
     if (this->type & PORT_TYPE_VIDEO) {
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
-#if HAS_HEVC_VDEC
-        vdec_poweroff(VDEC_HEVC);
-#endif
+        if (HAS_HEVC_VDEC) {
+            vdec_poweroff(VDEC_HEVC);
+        }
+        
         vdec_poweroff(VDEC_1);
 #endif
 
@@ -1213,9 +1230,9 @@ static long amstream_ioctl(struct file *file,
     case AMSTREAM_IOC_VB_START:
         if ((this->type & PORT_TYPE_VIDEO) &&
             ((bufs[BUF_TYPE_VIDEO].flag & BUF_FLAG_IN_USE) == 0)) {
-#if HAS_HEVC_VDEC
-            bufs[BUF_TYPE_HEVC].buf_start = arg;
-#endif
+            if (HAS_HEVC_VDEC) {
+                bufs[BUF_TYPE_HEVC].buf_start = arg;
+            }
             bufs[BUF_TYPE_VIDEO].buf_start = arg;
         } else {
             r = -EINVAL;
@@ -1226,9 +1243,9 @@ static long amstream_ioctl(struct file *file,
         if ((this->type & PORT_TYPE_VIDEO) &&
             ((bufs[BUF_TYPE_VIDEO].flag & BUF_FLAG_IN_USE) == 0)) {
             if (bufs[BUF_TYPE_VIDEO].flag & BUF_FLAG_ALLOC) {
-#if HAS_HEVC_VDEC
-                r = stbuf_change_size(&bufs[BUF_TYPE_HEVC], arg);
-#endif
+                if (HAS_HEVC_VDEC) {
+                    r = stbuf_change_size(&bufs[BUF_TYPE_HEVC], arg);
+                }
                 r = stbuf_change_size(&bufs[BUF_TYPE_VIDEO], arg);
             }
         } else {
@@ -1324,11 +1341,14 @@ static long amstream_ioctl(struct file *file,
         if (this->type & PORT_TYPE_VIDEO) {
             struct am_io_param para;
             struct am_io_param *p = &para;
-#if HAS_HEVC_VDEC
-            stream_buf_t *buf = (this->vformat == VFORMAT_HEVC) ? &bufs[BUF_TYPE_HEVC] : &bufs[BUF_TYPE_VIDEO];
-#else
-            stream_buf_t *buf = &bufs[BUF_TYPE_VIDEO];
-#endif
+            stream_buf_t *buf = NULL;
+
+            if (HAS_HEVC_VDEC) {
+                buf = (this->vformat == VFORMAT_HEVC) ? &bufs[BUF_TYPE_HEVC] : &bufs[BUF_TYPE_VIDEO];
+            } else {
+                buf = &bufs[BUF_TYPE_VIDEO];
+            }
+
             if (p == NULL) {
                 r = -EINVAL;
             }
@@ -1408,11 +1428,9 @@ static long amstream_ioctl(struct file *file,
             ((PORT_TYPE_AUDIO | PORT_TYPE_VIDEO))) {
             r = -EINVAL;
         } 
-#if HAS_HEVC_VDEC
-        else if (this->type & PORT_TYPE_HEVC) {
+        else if (HAS_HEVC_VDEC && this->type & PORT_TYPE_HEVC) {
             r = es_vpts_checkin(&bufs[BUF_TYPE_HEVC], arg);
         }
-#endif
         else if (this->type & PORT_TYPE_VIDEO) {
             r = es_vpts_checkin(&bufs[BUF_TYPE_VIDEO], arg);
         }
@@ -1429,16 +1447,21 @@ static long amstream_ioctl(struct file *file,
             u64 pts;
             if(copy_from_user((void*)&pts,(void *)arg,sizeof(u64)))
                 return -EFAULT;
-#if HAS_HEVC_VDEC
-            if (this->type & PORT_TYPE_HEVC) {
-                r = es_vpts_checkin_us64(&bufs[BUF_TYPE_HEVC], pts);
-            } else
-#endif
-            if (this->type & PORT_TYPE_VIDEO) {
-                r = es_vpts_checkin_us64(&bufs[BUF_TYPE_VIDEO],pts);
-            } else if (this->type & PORT_TYPE_AUDIO) {
-                r = es_vpts_checkin_us64(&bufs[BUF_TYPE_AUDIO],pts);
-            }	
+            if (HAS_HEVC_VDEC) {
+                if (this->type & PORT_TYPE_HEVC) {
+                    r = es_vpts_checkin_us64(&bufs[BUF_TYPE_HEVC], pts);
+                } else if (this->type & PORT_TYPE_VIDEO) {
+                    r = es_vpts_checkin_us64(&bufs[BUF_TYPE_VIDEO],pts);
+                } else if (this->type & PORT_TYPE_AUDIO) {
+                    r = es_vpts_checkin_us64(&bufs[BUF_TYPE_AUDIO],pts);
+                }
+            } else {
+                if (this->type & PORT_TYPE_VIDEO) {
+                    r = es_vpts_checkin_us64(&bufs[BUF_TYPE_VIDEO],pts);
+                } else if (this->type & PORT_TYPE_AUDIO) {
+                    r = es_vpts_checkin_us64(&bufs[BUF_TYPE_AUDIO],pts);
+                }
+            }
         }
         break;
 
@@ -1644,9 +1667,9 @@ static long amstream_ioctl(struct file *file,
         tsdemux_set_demux((int)arg);
         break;
     case AMSTREAM_IOC_SET_VIDEO_DELAY_LIMIT_MS:
-#if HAS_HEVC_VDEC
-        bufs[BUF_TYPE_HEVC].max_buffer_delay_ms = (int)arg;
-#endif
+        if (HAS_HEVC_VDEC) {
+            bufs[BUF_TYPE_HEVC].max_buffer_delay_ms = (int)arg;
+        }
         bufs[BUF_TYPE_VIDEO].max_buffer_delay_ms = (int)arg;
         break;
     case AMSTREAM_IOC_SET_AUDIO_DELAY_LIMIT_MS:
@@ -1735,7 +1758,7 @@ static ssize_t ports_show(struct class *class, struct class_attribute *attr, cha
     int i;
     char *pbuf = buf;
     stream_port_t *p = NULL;
-    for (i = 0; i < sizeof(ports) / sizeof(stream_port_t); i++) {
+    for (i = 0; i < amstream_port_num; i++) {
         p = &ports[i];
         /*name*/
         pbuf += sprintf(pbuf, "%s\t:\n", p->name);
@@ -1799,13 +1822,9 @@ static ssize_t bufs_show(struct class *class, struct class_attribute *attr, char
     int i;
     char *pbuf = buf;
     stream_buf_t *p = NULL;
-#if HAS_HEVC_VDEC
     char buf_type[][12] = {"Video", "Audio", "Subtitle", "UserData", "HEVC"};
-#else
-    char buf_type[][12] = {"Video", "Audio", "Subtitle", "UserData"};
-#endif
 
-    for (i = 0; i < sizeof(bufs) / sizeof(stream_buf_t); i++) {
+    for (i = 0; i < amstream_buf_num; i++) {
         p = &bufs[i];
         /*type*/
         pbuf += sprintf(pbuf, "%s buffer:", buf_type[p->type]);
@@ -1927,7 +1946,7 @@ static int reset_canuse_buferlevel(int levelx10000)
         use_bufferlevelx10000= levelx10000;
     else
        use_bufferlevelx10000=10000;    
-    for (i = 0; i < sizeof(bufs) / sizeof(stream_buf_t); i++) {
+    for (i = 0; i < amstream_buf_num; i++) {
                p = &bufs[i];
                p->canusebuf_size=((p->buf_size/1024)*use_bufferlevelx10000/10000)*1024;
                p->canusebuf_size+=1023;
@@ -1967,7 +1986,7 @@ static ssize_t store_maxdelay(struct class *class, struct class_attribute *attr,
     if(ret != 1 ) {
         return -EINVAL;
     }  
-	for (i = 0; i < sizeof(bufs) / sizeof(stream_buf_t); i++) {
+	for (i = 0; i < amstream_buf_num; i++) {
 		bufs[i].max_buffer_delay_ms=val;
 	}
     return size;
@@ -2040,6 +2059,14 @@ static int  amstream_probe(struct platform_device *pdev)
 
     printk("Amlogic A/V streaming port init\n");
 
+    if (HAS_HEVC_VDEC) {
+        amstream_port_num = MAX_AMSTREAM_PORT_NUM;
+        amstream_buf_num = BUF_MAX_NUM;
+    } else {
+        amstream_port_num = MAX_AMSTREAM_PORT_NUM - 1;
+        amstream_buf_num = BUF_MAX_NUM - 1;
+    }
+
     r = class_register(&amstream_class);
     if (r) {
         printk("amstream class create fail.\n");
@@ -2062,7 +2089,7 @@ static int  amstream_probe(struct platform_device *pdev)
 
     amstream_dev_class = class_create(THIS_MODULE, DEVICE_NAME);
 
-    for (st = &ports[0], i = 0; i < MAX_AMSTREAM_PORT_NUM; i++, st++) {
+    for (st = &ports[0], i = 0; i < amstream_port_num; i++, st++) {
         st->class_dev = device_create(amstream_dev_class, NULL,
                                       MKDEV(AMSTREAM_MAJOR, i), NULL,
                                       ports[i].name);
@@ -2118,16 +2145,16 @@ static int  amstream_probe(struct platform_device *pdev)
         bufs[BUF_TYPE_SUBTITLE].flag = BUF_FLAG_IOMEM;
     }
 
-#if HAS_HEVC_VDEC
-    bufs[BUF_TYPE_HEVC].buf_start = bufs[BUF_TYPE_VIDEO].buf_start;
-    bufs[BUF_TYPE_HEVC].buf_size  = bufs[BUF_TYPE_VIDEO].buf_size;
+    if (HAS_HEVC_VDEC) {
+        bufs[BUF_TYPE_HEVC].buf_start = bufs[BUF_TYPE_VIDEO].buf_start;
+        bufs[BUF_TYPE_HEVC].buf_size  = bufs[BUF_TYPE_VIDEO].buf_size;
 
-    if (bufs[BUF_TYPE_VIDEO].flag & BUF_FLAG_IOMEM) {
-        bufs[BUF_TYPE_HEVC].flag |= BUF_FLAG_IOMEM;
-    }
+        if (bufs[BUF_TYPE_VIDEO].flag & BUF_FLAG_IOMEM) {
+            bufs[BUF_TYPE_HEVC].flag |= BUF_FLAG_IOMEM;
+        }
 
-    bufs[BUF_TYPE_HEVC].default_buf_size = bufs[BUF_TYPE_VIDEO].default_buf_size;
-#endif
+        bufs[BUF_TYPE_HEVC].default_buf_size = bufs[BUF_TYPE_VIDEO].default_buf_size;
+    }
 
     if (stbuf_fetch_init() != 0) {
         r = (-ENOMEM);
@@ -2154,7 +2181,7 @@ error5:
 error4:
     tsdemux_class_unregister();
 error3:
-    for (st = &ports[0], i = 0; i < MAX_AMSTREAM_PORT_NUM; i++, st++) {
+    for (st = &ports[0], i = 0; i < amstream_port_num; i++, st++) {
         device_destroy(amstream_dev_class, MKDEV(AMSTREAM_MAJOR, i));
     }
     class_destroy(amstream_dev_class);
@@ -2177,7 +2204,7 @@ static int  amstream_remove(struct platform_device *pdev)
     }
     stbuf_fetch_release();
     tsdemux_class_unregister();
-    for (st = &ports[0], i = 0; i < MAX_AMSTREAM_PORT_NUM; i++, st++) {
+    for (st = &ports[0], i = 0; i < amstream_port_num; i++, st++) {
         device_destroy(amstream_dev_class, MKDEV(AMSTREAM_MAJOR, i));
     }
 
diff --git a/drivers/amlogic/amports/amvdec.c b/drivers/amlogic/amports/amvdec.c
index bc9282bf3717..fa3ee723d0d1 100755
--- a/drivers/amlogic/amports/amvdec.c
+++ b/drivers/amlogic/amports/amvdec.c
@@ -136,97 +136,102 @@ static void amvdec_pg_enable(bool enable)
     }
 }
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 static void amvdec2_pg_enable(bool enable)
 {
-    ulong timeout;
-    if(!vdec_on(VDEC_2))
-        return;
-    if (enable) {
-//        WRITE_VREG(VDEC2_GCLK_EN, 0x3ff);
-    } else {
-        timeout = jiffies + HZ / 10;
-
-        while (READ_VREG(VDEC2_MDEC_PIC_DC_STATUS) != 0) {
-            if (time_after(jiffies, timeout)) {
-                WRITE_VREG_BITS(VDEC2_MDEC_PIC_DC_CTRL, 1, 0, 1);
-                WRITE_VREG_BITS(VDEC2_MDEC_PIC_DC_CTRL, 0, 0, 1);
-                READ_VREG(VDEC2_MDEC_PIC_DC_STATUS);
-                READ_VREG(VDEC2_MDEC_PIC_DC_STATUS);
-                READ_VREG(VDEC2_MDEC_PIC_DC_STATUS);
-                break;
+    if (HAS_VDEC2) 
+    {
+        ulong timeout;
+        if(!vdec_on(VDEC_2))
+            return;
+        if (enable) {
+    //        WRITE_VREG(VDEC2_GCLK_EN, 0x3ff);
+        } else {
+            timeout = jiffies + HZ / 10;
+
+            while (READ_VREG(VDEC2_MDEC_PIC_DC_STATUS) != 0) {
+                if (time_after(jiffies, timeout)) {
+                    WRITE_VREG_BITS(VDEC2_MDEC_PIC_DC_CTRL, 1, 0, 1);
+                    WRITE_VREG_BITS(VDEC2_MDEC_PIC_DC_CTRL, 0, 0, 1);
+                    READ_VREG(VDEC2_MDEC_PIC_DC_STATUS);
+                    READ_VREG(VDEC2_MDEC_PIC_DC_STATUS);
+                    READ_VREG(VDEC2_MDEC_PIC_DC_STATUS);
+                    break;
+                }
             }
-        }
-
-        timeout = jiffies + HZ / 10;
 
-        while (READ_VREG(VDEC2_DBLK_STATUS) & 1) {
-            if (time_after(jiffies, timeout)) {
-                WRITE_VREG(VDEC2_DBLK_CTRL, 3);
-                WRITE_VREG(VDEC2_DBLK_CTRL, 0);
-                READ_VREG(VDEC2_DBLK_STATUS);
-                READ_VREG(VDEC2_DBLK_STATUS);
-                READ_VREG(VDEC2_DBLK_STATUS);
-                break;
+            timeout = jiffies + HZ / 10;
+
+            while (READ_VREG(VDEC2_DBLK_STATUS) & 1) {
+                if (time_after(jiffies, timeout)) {
+                    WRITE_VREG(VDEC2_DBLK_CTRL, 3);
+                    WRITE_VREG(VDEC2_DBLK_CTRL, 0);
+                    READ_VREG(VDEC2_DBLK_STATUS);
+                    READ_VREG(VDEC2_DBLK_STATUS);
+                    READ_VREG(VDEC2_DBLK_STATUS);
+                    break;
+                }
             }
-        }
 
-        timeout = jiffies + HZ / 10;
+            timeout = jiffies + HZ / 10;
 
-        while (READ_VREG(VDEC2_DCAC_DMA_CTRL) & 0x8000) {
-            if (time_after(jiffies, timeout)) {
-                break;
+            while (READ_VREG(VDEC2_DCAC_DMA_CTRL) & 0x8000) {
+                if (time_after(jiffies, timeout)) {
+                    break;
+                }
             }
         }
     }
 }
 #endif
 
-#if HAS_HEVC_VDEC
 static void amhevc_pg_enable(bool enable)
 {
-    ulong timeout;
-    if(!vdec_on(VDEC_HEVC))
-        return;
-    if (enable) {
-//        WRITE_VREG(VDEC2_GCLK_EN, 0x3ff);
-    } else {
-        timeout = jiffies + HZ / 10;
-
-        while (READ_VREG(HEVC_MDEC_PIC_DC_STATUS) != 0) {
-            if (time_after(jiffies, timeout)) {
-                WRITE_VREG_BITS(HEVC_MDEC_PIC_DC_CTRL, 1, 0, 1);
-                WRITE_VREG_BITS(HEVC_MDEC_PIC_DC_CTRL, 0, 0, 1);
-                READ_VREG(HEVC_MDEC_PIC_DC_STATUS);
-                READ_VREG(HEVC_MDEC_PIC_DC_STATUS);
-                READ_VREG(HEVC_MDEC_PIC_DC_STATUS);
-                break;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC) {
+        ulong timeout;
+        if(!vdec_on(VDEC_HEVC))
+            return;
+        if (enable) {
+    //        WRITE_VREG(VDEC2_GCLK_EN, 0x3ff);
+        } else {
+            timeout = jiffies + HZ / 10;
+
+            while (READ_VREG(HEVC_MDEC_PIC_DC_STATUS) != 0) {
+                if (time_after(jiffies, timeout)) {
+                    WRITE_VREG_BITS(HEVC_MDEC_PIC_DC_CTRL, 1, 0, 1);
+                    WRITE_VREG_BITS(HEVC_MDEC_PIC_DC_CTRL, 0, 0, 1);
+                    READ_VREG(HEVC_MDEC_PIC_DC_STATUS);
+                    READ_VREG(HEVC_MDEC_PIC_DC_STATUS);
+                    READ_VREG(HEVC_MDEC_PIC_DC_STATUS);
+                    break;
+                }
             }
-        }
-
-        timeout = jiffies + HZ / 10;
 
-        while (READ_VREG(HEVC_DBLK_STATUS) & 1) {
-            if (time_after(jiffies, timeout)) {
-                WRITE_VREG(HEVC_DBLK_CTRL, 3);
-                WRITE_VREG(HEVC_DBLK_CTRL, 0);
-                READ_VREG(HEVC_DBLK_STATUS);
-                READ_VREG(HEVC_DBLK_STATUS);
-                READ_VREG(HEVC_DBLK_STATUS);
-                break;
+            timeout = jiffies + HZ / 10;
+
+            while (READ_VREG(HEVC_DBLK_STATUS) & 1) {
+                if (time_after(jiffies, timeout)) {
+                    WRITE_VREG(HEVC_DBLK_CTRL, 3);
+                    WRITE_VREG(HEVC_DBLK_CTRL, 0);
+                    READ_VREG(HEVC_DBLK_STATUS);
+                    READ_VREG(HEVC_DBLK_STATUS);
+                    READ_VREG(HEVC_DBLK_STATUS);
+                    break;
+                }
             }
-        }
 
-        timeout = jiffies + HZ / 10;
+            timeout = jiffies + HZ / 10;
 
-        while (READ_VREG(HEVC_DCAC_DMA_CTRL) & 0x8000) {
-            if (time_after(jiffies, timeout)) {
-                break;
+            while (READ_VREG(HEVC_DCAC_DMA_CTRL) & 0x8000) {
+                if (time_after(jiffies, timeout)) {
+                    break;
+                }
             }
         }
     }
-}
 #endif
+}
 
 #ifdef CONFIG_WAKELOCK
 int amvdec_wake_lock(void)
@@ -329,63 +334,73 @@ s32 amvdec_loadmc_ex(const char*name,char *def)
 	return am_loadmc_ex(name,def,&amvdec_loadmc);
 }
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 s32 amvdec2_loadmc(const u32 *p)
 {
-    ulong timeout;
-    s32 ret = 0;
+    if (HAS_VDEC2) {
+        ulong timeout;
+        s32 ret = 0;
 
 #ifdef AMVDEC_USE_STATIC_MEMORY
-    if (mc_addr == NULL)
+        if (mc_addr == NULL)
 #endif
-    {
-        mc_addr = kmalloc(MC_SIZE, GFP_KERNEL);
-    }
+        {
+            mc_addr = kmalloc(MC_SIZE, GFP_KERNEL);
+        }
 
-    if (!mc_addr) {
-        return -ENOMEM;
-    }
+        if (!mc_addr) {
+            return -ENOMEM;
+        }
 
-    memcpy(mc_addr, p, MC_SIZE);
+        memcpy(mc_addr, p, MC_SIZE);
 
-    mc_addr_map = dma_map_single(NULL, mc_addr, MC_SIZE, DMA_TO_DEVICE);
+        mc_addr_map = dma_map_single(NULL, mc_addr, MC_SIZE, DMA_TO_DEVICE);
 
-    WRITE_VREG(VDEC2_MPSR, 0);
-    WRITE_VREG(VDEC2_CPSR, 0);
+        WRITE_VREG(VDEC2_MPSR, 0);
+        WRITE_VREG(VDEC2_CPSR, 0);
 
-    /* Read CBUS register for timing */
-    timeout = READ_VREG(VDEC2_MPSR);
-    timeout = READ_VREG(VDEC2_MPSR);
+        /* Read CBUS register for timing */
+        timeout = READ_VREG(VDEC2_MPSR);
+        timeout = READ_VREG(VDEC2_MPSR);
 
-    timeout = jiffies + HZ;
+        timeout = jiffies + HZ;
 
-    WRITE_VREG(VDEC2_IMEM_DMA_ADR, mc_addr_map);
-    WRITE_VREG(VDEC2_IMEM_DMA_COUNT, 0x1000);
-    WRITE_VREG(VDEC2_IMEM_DMA_CTRL, (0x8000 | (7 << 16)));
+        WRITE_VREG(VDEC2_IMEM_DMA_ADR, mc_addr_map);
+        WRITE_VREG(VDEC2_IMEM_DMA_COUNT, 0x1000);
+        WRITE_VREG(VDEC2_IMEM_DMA_CTRL, (0x8000 | (7 << 16)));
 
-    while (READ_VREG(VDEC2_IMEM_DMA_CTRL) & 0x8000) {
-        if (time_before(jiffies, timeout)) {
-            schedule();
-        } else {
-            printk("vdec2 load mc error\n");
-            ret = -EBUSY;
-            break;
+        while (READ_VREG(VDEC2_IMEM_DMA_CTRL) & 0x8000) {
+            if (time_before(jiffies, timeout)) {
+                schedule();
+            } else {
+                printk("vdec2 load mc error\n");
+                ret = -EBUSY;
+                break;
+            }
         }
-    }
 
-    dma_unmap_single(NULL, mc_addr_map, MC_SIZE, DMA_TO_DEVICE);
+        dma_unmap_single(NULL, mc_addr_map, MC_SIZE, DMA_TO_DEVICE);
 
 #ifndef AMVDEC_USE_STATIC_MEMORY
-    kfree(mc_addr);
-    mc_addr = NULL;
+        kfree(mc_addr);
+        mc_addr = NULL;
 #endif
 
-    return ret;
+        return ret;
+    }
+    else 
+    {
+        return 0;
+    }
 }
 
 s32 amvdec2_loadmc_ex(const char*name,char *def)
 {
-    return am_loadmc_ex(name,def,&amvdec2_loadmc);
+    if (HAS_VDEC2) {
+        return am_loadmc_ex(name,def,&amvdec2_loadmc);
+    } else {
+        return 0;
+    }
 }
 
 #endif
@@ -432,63 +447,68 @@ s32 amhcodec_loadmc_ex(const char*name,char *def)
 
 #endif
 
-#if HAS_HEVC_VDEC
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 s32 amhevc_loadmc(const u32 *p)
 {
     ulong timeout;
     s32 ret = 0;
 
+    if (HAS_HEVC_VDEC) {
 #ifdef AMVDEC_USE_STATIC_MEMORY
-    if (mc_addr == NULL)
+        if (mc_addr == NULL)
 #endif
-    {
-        mc_addr = kmalloc(MC_SIZE, GFP_KERNEL);
-    }
+        {
+            mc_addr = kmalloc(MC_SIZE, GFP_KERNEL);
+        }
 
-    if (!mc_addr) {
-        return -ENOMEM;
-    }
+        if (!mc_addr) {
+            return -ENOMEM;
+        }
 
-    memcpy(mc_addr, p, MC_SIZE);
+        memcpy(mc_addr, p, MC_SIZE);
 
-    mc_addr_map = dma_map_single(NULL, mc_addr, MC_SIZE, DMA_TO_DEVICE);
+        mc_addr_map = dma_map_single(NULL, mc_addr, MC_SIZE, DMA_TO_DEVICE);
 
-    WRITE_VREG(HEVC_MPSR, 0);
-    WRITE_VREG(HEVC_CPSR, 0);
+        WRITE_VREG(HEVC_MPSR, 0);
+        WRITE_VREG(HEVC_CPSR, 0);
 
-    /* Read CBUS register for timing */
-    timeout = READ_VREG(HEVC_MPSR);
-    timeout = READ_VREG(HEVC_MPSR);
+        /* Read CBUS register for timing */
+        timeout = READ_VREG(HEVC_MPSR);
+        timeout = READ_VREG(HEVC_MPSR);
 
-    timeout = jiffies + HZ;
+        timeout = jiffies + HZ;
 
-    WRITE_VREG(HEVC_IMEM_DMA_ADR, mc_addr_map);
-    WRITE_VREG(HEVC_IMEM_DMA_COUNT, 0x1000);
-    WRITE_VREG(HEVC_IMEM_DMA_CTRL, (0x8000 | (7 << 16)));
+        WRITE_VREG(HEVC_IMEM_DMA_ADR, mc_addr_map);
+        WRITE_VREG(HEVC_IMEM_DMA_COUNT, 0x1000);
+        WRITE_VREG(HEVC_IMEM_DMA_CTRL, (0x8000 | (7 << 16)));
 
-    while (READ_VREG(HEVC_IMEM_DMA_CTRL) & 0x8000) {
-        if (time_before(jiffies, timeout)) {
-            schedule();
-        } else {
-            printk("vdec2 load mc error\n");
-            ret = -EBUSY;
-            break;
+        while (READ_VREG(HEVC_IMEM_DMA_CTRL) & 0x8000) {
+            if (time_before(jiffies, timeout)) {
+                schedule();
+            } else {
+                printk("vdec2 load mc error\n");
+                ret = -EBUSY;
+                break;
+            }
         }
-    }
 
-    dma_unmap_single(NULL, mc_addr_map, MC_SIZE, DMA_TO_DEVICE);
+        dma_unmap_single(NULL, mc_addr_map, MC_SIZE, DMA_TO_DEVICE);
 
 #ifndef AMVDEC_USE_STATIC_MEMORY
-    kfree(mc_addr);
-    mc_addr = NULL;
+        kfree(mc_addr);
+        mc_addr = NULL;
 #endif
+    }
 
     return ret;
 }
 
 s32 amhevc_loadmc_ex(const char*name, char *def)
 {
-    return am_loadmc_ex(name, def, &amhevc_loadmc);
+    if (HAS_HEVC_VDEC)
+        return am_loadmc_ex(name, def, &amhevc_loadmc);
+    else 
+        return 0;
 }
 #endif
 
@@ -526,25 +546,27 @@ void amvdec_start(void)
     WRITE_VREG(MPSR, 0x0001);
 }
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 void amvdec2_start(void)
 {
+    if (HAS_VDEC2) {
 #ifdef CONFIG_WAKELOCK
-    amvdec_wake_lock();
+        amvdec_wake_lock();
 #endif
 
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
 
-    WRITE_VREG(DOS_SW_RESET2, (1<<12)|(1<<11));
-    WRITE_VREG(DOS_SW_RESET2, 0);
+        WRITE_VREG(DOS_SW_RESET2, (1<<12)|(1<<11));
+        WRITE_VREG(DOS_SW_RESET2, 0);
 
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
 
-    WRITE_VREG(VDEC2_MPSR, 0x0001);
+        WRITE_VREG(VDEC2_MPSR, 0x0001);
+    }
 }
 #endif
 
@@ -555,25 +577,27 @@ void amhcodec_start(void)
 }
 #endif
 
-#if HAS_HEVC_VDEC
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 void amhevc_start(void)
 {
+    if (HAS_HEVC_VDEC) {
 #ifdef CONFIG_WAKELOCK
-    amvdec_wake_lock();
+        amvdec_wake_lock();
 #endif
 
-    READ_VREG(DOS_SW_RESET3);
-    READ_VREG(DOS_SW_RESET3);
-    READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
 
-    WRITE_VREG(DOS_SW_RESET3, (1<<12)|(1<<11));
-    WRITE_VREG(DOS_SW_RESET3, 0);
+        WRITE_VREG(DOS_SW_RESET3, (1<<12)|(1<<11));
+        WRITE_VREG(DOS_SW_RESET3, 0);
 
-    READ_VREG(DOS_SW_RESET3);
-    READ_VREG(DOS_SW_RESET3);
-    READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
 
-    WRITE_VREG(HEVC_MPSR, 0x0001);
+        WRITE_VREG(HEVC_MPSR, 0x0001);
+    }
 }
 #endif
 
@@ -616,27 +640,29 @@ void amvdec_stop(void)
 #endif
 }
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 void amvdec2_stop(void)
 {
-    ulong timeout = jiffies + HZ;
+    if (HAS_VDEC2) {
+        ulong timeout = jiffies + HZ;
 
-    WRITE_VREG(VDEC2_MPSR, 0);
-    WRITE_VREG(VDEC2_CPSR, 0);
+        WRITE_VREG(VDEC2_MPSR, 0);
+        WRITE_VREG(VDEC2_CPSR, 0);
 
-    while (READ_VREG(VDEC2_IMEM_DMA_CTRL) & 0x8000) {
-        if (time_after(jiffies, timeout)) {
-            break;
+        while (READ_VREG(VDEC2_IMEM_DMA_CTRL) & 0x8000) {
+            if (time_after(jiffies, timeout)) {
+                break;
+            }
         }
-    }
 
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
 
 #ifdef CONFIG_WAKELOCK
-    amvdec_wake_unlock();
+        amvdec_wake_unlock();
 #endif
+    }
 }
 #endif
 
@@ -647,27 +673,29 @@ void amhcodec_stop(void)
 }
 #endif
 
-#if HAS_HEVC_VDEC
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 void amhevc_stop(void)
 {
-    ulong timeout = jiffies + HZ;
+    if (HAS_HEVC_VDEC) {
+        ulong timeout = jiffies + HZ;
 
-    WRITE_VREG(HEVC_MPSR, 0);
-    WRITE_VREG(HEVC_CPSR, 0);
+        WRITE_VREG(HEVC_MPSR, 0);
+        WRITE_VREG(HEVC_CPSR, 0);
 
-    while (READ_VREG(HEVC_IMEM_DMA_CTRL) & 0x8000) {
-        if (time_after(jiffies, timeout)) {
-            break;
+        while (READ_VREG(HEVC_IMEM_DMA_CTRL) & 0x8000) {
+            if (time_after(jiffies, timeout)) {
+                break;
+            }
         }
-    }
 
-    READ_VREG(DOS_SW_RESET3);
-    READ_VREG(DOS_SW_RESET3);
-    READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
+        READ_VREG(DOS_SW_RESET3);
 
 #ifdef CONFIG_WAKELOCK
-    amvdec_wake_unlock();
+        amvdec_wake_unlock();
 #endif
+    }
 }
 #endif
 
@@ -681,27 +709,31 @@ void amvdec_disable(void)
     amvdec_pg_enable(false);
 }
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 void amvdec2_enable(void)
 {
-    amvdec2_pg_enable(true);
+    if (HAS_VDEC2)
+        amvdec2_pg_enable(true);
 }
 
 void amvdec2_disable(void)
 {
-    amvdec2_pg_enable(false);
+    if (HAS_VDEC2)
+        amvdec2_pg_enable(false);
 }
 #endif
 
-#if HAS_HEVC_VDEC
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 void amhevc_enable(void)
 {
-    amhevc_pg_enable(true);
+    if (HAS_HEVC_VDEC)
+        amhevc_pg_enable(true);
 }
 
 void amhevc_disable(void)
 {
-    amhevc_pg_enable(false);
+    if (HAS_HEVC_VDEC)
+        amhevc_pg_enable(false);
 }
 #endif
 
@@ -710,13 +742,16 @@ int amvdec_suspend(struct platform_device *dev, pm_message_t event)
 {
     amvdec_pg_enable(false);
 
-#if HAS_VDEC2
-    amvdec2_pg_enable(false);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
+    if (HAS_VDEC2) { 
+        amvdec2_pg_enable(false);
+    }
 #endif
 
-#if HAS_HEVC_VDEC
-    amhevc_pg_enable(false);
-#endif
+    if (HAS_HEVC_VDEC) {
+        amhevc_pg_enable(false);
+    }
+
     return 0;
 }
 
@@ -724,13 +759,18 @@ int amvdec_resume(struct platform_device *dev)
 {
     amvdec_pg_enable(true);
 
-#if HAS_VDEC2
-    amvdec2_pg_enable(true);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
+    if (HAS_VDEC2) {
+        amvdec2_pg_enable(true);
+    }
 #endif
 
-#if HAS_HEVC_VDEC
-    amhevc_pg_enable(true);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC) {
+        amhevc_pg_enable(true);
+    }
 #endif
+    
     return 0;
 }
 #endif
@@ -743,21 +783,25 @@ static int vdec_is_paused(void)
     unsigned long wp, rp, level;
     static int  paused_time = 0;
 
-#if HAS_HEVC_VDEC
-    if ((vdec_on(VDEC_HEVC)) && (READ_VREG(HEVC_STREAM_CONTROL) & 1)) {
-        wp = READ_VREG(HEVC_STREAM_WR_PTR);
-        rp = READ_VREG(HEVC_STREAM_RD_PTR);
-        level = READ_VREG(HEVC_STREAM_LEVEL);
-    } else {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC) {
+        if ((vdec_on(VDEC_HEVC)) && (READ_VREG(HEVC_STREAM_CONTROL) & 1)) {
+            wp = READ_VREG(HEVC_STREAM_WR_PTR);
+            rp = READ_VREG(HEVC_STREAM_RD_PTR);
+            level = READ_VREG(HEVC_STREAM_LEVEL);
+        } else {
+            wp = READ_VREG(VLD_MEM_VIFIFO_WP);
+            rp = READ_VREG(VLD_MEM_VIFIFO_RP);
+            level = READ_VREG(VLD_MEM_VIFIFO_LEVEL);
+        }
+    } else
+#endif
+    {    
         wp = READ_VREG(VLD_MEM_VIFIFO_WP);
         rp = READ_VREG(VLD_MEM_VIFIFO_RP);
         level = READ_VREG(VLD_MEM_VIFIFO_LEVEL);
     }
-#else    
-    wp = READ_VREG(VLD_MEM_VIFIFO_WP);
-    rp = READ_VREG(VLD_MEM_VIFIFO_RP);
-    level = READ_VREG(VLD_MEM_VIFIFO_LEVEL);
-#endif
+    
     if ((rp == old_rp && level > 1024) || /*have data,but output buffer is full */
         (rp == old_rp && wp == old_wp && level == level)) { /*no write && not read*/
         paused_time++;
diff --git a/drivers/amlogic/amports/amvdec.h b/drivers/amlogic/amports/amvdec.h
index b875a2ef363f..78f89bc799e3 100755
--- a/drivers/amlogic/amports/amvdec.h
+++ b/drivers/amlogic/amports/amvdec.h
@@ -35,7 +35,7 @@ extern void amvdec_enable(void);
 extern void amvdec_disable(void);
 s32 amvdec_loadmc_ex(const char*name,char *def);
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 extern  s32 amvdec2_loadmc(const u32 *p);
 extern void amvdec2_start(void);
 extern void amvdec2_stop(void);
@@ -43,7 +43,7 @@ extern void amvdec2_enable(void);
 extern void amvdec2_disable(void);
 #endif
 
-#if HAS_HEVC_VDEC
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 extern  s32 amhevc_loadmc(const u32 *p);
 extern void amhevc_start(void);
 extern void amhevc_stop(void);
diff --git a/drivers/amlogic/amports/encoder.c b/drivers/amlogic/amports/encoder.c
index 84b8da903783..92355738dd00 100755
--- a/drivers/amlogic/amports/encoder.c
+++ b/drivers/amlogic/amports/encoder.c
@@ -39,7 +39,7 @@
 #include "amports_config.h"
 
 #define MULTI_SLICE_MC
-#if HAS_VDEC2
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
 #define USE_VDEC2
 #endif
 #define ENC_CANVAS_OFFSET  AMVENC_CANVAS_INDEX
@@ -873,8 +873,10 @@ static void encode_isr_tasklet(ulong data)
     if(((encoder_status == ENCODER_IDR_DONE)
 	||(encoder_status == ENCODER_NON_IDR_DONE))&&(process_irq)){
 #ifdef USE_VDEC2
-        if((abort_vdec2_flag)&&(get_vdec2_usage() == USAGE_ENCODE))
-            set_vdec2_usage(USAGE_NONE);
+        if(IS_MESON_M8_CPU){
+            if((abort_vdec2_flag)&&(get_vdec2_usage() == USAGE_ENCODE))
+                set_vdec2_usage(USAGE_NONE);
+        }
 #endif
         atomic_inc(&avc_ready);
         wake_up_interruptible(&avc_wait);
@@ -1441,9 +1443,11 @@ static s32 avc_poweron(int clock)
 	WRITE_VREG(DOS_GEN_CTRL0, data32);
 
 #ifdef USE_VDEC2
-	if (!vdec_on(VDEC_2) && get_vdec2_usage() == USAGE_NONE) {//++++
-		set_vdec2_usage(USAGE_ENCODE);
-		vdec_poweron(VDEC_2);//++++
+	if(IS_MESON_M8_CPU){
+		if (!vdec_on(VDEC_2) && get_vdec2_usage() == USAGE_NONE) {//++++
+			set_vdec2_usage(USAGE_ENCODE);
+			vdec_poweron(VDEC_2);//++++
+		}
 	}
 #endif
 
@@ -1475,9 +1479,11 @@ static s32 avc_poweroff(void)
 #endif
 
 #ifdef USE_VDEC2
-	if (vdec_on(VDEC_2) && get_vdec2_usage() != USAGE_DEC_4K2K) {//++++
-		vdec_poweroff(VDEC_2);//++++
-		set_vdec2_usage(USAGE_NONE);
+	if(IS_MESON_M8_CPU){
+		if (vdec_on(VDEC_2) && get_vdec2_usage() != USAGE_DEC_4K2K) {//++++
+			vdec_poweroff(VDEC_2);//++++
+			set_vdec2_usage(USAGE_NONE);
+		}
 	}
 #endif
 
@@ -1503,18 +1509,26 @@ static s32 reload_mc(void)
                 p = mix_dump_mc;    
             break;
         case UCODE_MODE_SW_MIX:
-#ifdef  USE_VDEC2
-            if(enable_dblk == 1)
-                p = mix_sw_mc_vdec2_dblk;
-            else if (enable_dblk ==2)
-                p = mix_sw_mc_hdec_dblk;
-            else
-                p = mix_sw_mc;
-#else
-            if(enable_dblk == 1)
-                p = mix_sw_mc_hdec_dblk;
-            else
-                p = mix_sw_mc;
+            if(IS_MESON_M8B_CPU){
+                if(enable_dblk)
+                    p = mix_sw_mc_hdec_dblk;
+                else
+                    p = mix_sw_mc;
+            }
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
+            else if(IS_MESON_M8_CPU){
+                if(enable_dblk == 1)
+                    p = mix_sw_mc_vdec2_dblk;
+                else if (enable_dblk ==2)
+                    p = mix_sw_mc_hdec_dblk;
+                else
+                    p = mix_sw_mc;
+            }else if(IS_MESON_M8M2_CPU){
+                if(enable_dblk)
+                    p = mix_sw_mc_hdec_m2_dblk;
+                else
+                    p = mix_sw_mc;
+            }
 #endif
             break;
         default:
@@ -1529,10 +1543,10 @@ static s32 reload_mc(void)
 	
     udelay(10);
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
     if(IS_MESON_M8M2_CPU){
         WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x32);
-        dblk_fix_flag = (p==mix_sw_mc_hdec_dblk);
+        dblk_fix_flag = (p==mix_sw_mc_hdec_m2_dblk);
     }else{
         WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
         dblk_fix_flag = false;
@@ -1569,28 +1583,39 @@ static s32 avc_init(void)
                 p = mix_dump_mc;    
             break;
         case UCODE_MODE_SW_MIX:
-#ifdef  USE_VDEC2
-            if(enable_dblk == 1)
-                p = mix_sw_mc_vdec2_dblk;
-            else if (enable_dblk ==2)
-                p = mix_sw_mc_hdec_dblk;
-            else
-                p = mix_sw_mc;
-#else
-            if(enable_dblk)
-                p = mix_sw_mc_hdec_dblk;
-            else
-                p = mix_sw_mc;
+            if(IS_MESON_M8B_CPU){
+                if(enable_dblk)
+                    p = mix_sw_mc_hdec_dblk;
+                else
+                    p = mix_sw_mc;
+            }
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
+            else if(IS_MESON_M8_CPU){
+                if(enable_dblk == 1)
+                    p = mix_sw_mc_vdec2_dblk;
+                else if (enable_dblk ==2)
+                    p = mix_sw_mc_hdec_dblk;
+                else
+                    p = mix_sw_mc;
+            }else if(IS_MESON_M8M2_CPU){
+                if(enable_dblk)
+                    p = mix_sw_mc_hdec_m2_dblk;
+                else
+                    p = mix_sw_mc;
+            }
 #endif
             break;
         default:
             break;
     }
 
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
     if(IS_MESON_M8M2_CPU){
         WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x32);
-        dblk_fix_flag = (p==mix_sw_mc_hdec_dblk);
-    }else{
+        dblk_fix_flag = (p==mix_sw_mc_hdec_m2_dblk);
+    }else
+#endif
+    {
         WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
         dblk_fix_flag = false;
     }
@@ -1660,21 +1685,23 @@ void amvenc_avc_start_cmd(int cmd, unsigned* input_info, int ucode_mode)
 {
 	int reload_flag = 0;
 #ifdef USE_VDEC2
-	if(((ucode_mode&0x1) == UCODE_MODE_SW_MIX)&&(enable_dblk>0)){
-		if((get_vdec2_usage() == USAGE_DEC_4K2K)||(abort_vdec2_flag)){
-			enable_dblk = 2;
-			if((abort_vdec2_flag)&&(get_vdec2_usage() == USAGE_ENCODE)){
-				debug_level(1,"switch encode ucode\n");
-				set_vdec2_usage(USAGE_NONE);
+	if(IS_MESON_M8_CPU){
+		if(((ucode_mode&0x1) == UCODE_MODE_SW_MIX)&&(enable_dblk>0)){
+			if((get_vdec2_usage() == USAGE_DEC_4K2K)||(abort_vdec2_flag)){
+				enable_dblk = 2;
+				if((abort_vdec2_flag)&&(get_vdec2_usage() == USAGE_ENCODE)){
+					debug_level(1,"switch encode ucode\n");
+					set_vdec2_usage(USAGE_NONE);
+				}
+			}else{
+				if(get_vdec2_usage() == USAGE_NONE)
+					set_vdec2_usage(USAGE_ENCODE);
+				if(!vdec_on(VDEC_2)){
+					vdec_poweron(VDEC_2);//++++
+					mdelay(10);
+				}
+				enable_dblk = 1;
 			}
-		}else{
-			if(get_vdec2_usage() == USAGE_NONE)
-				set_vdec2_usage(USAGE_ENCODE);
-			if(!vdec_on(VDEC_2)){
-				vdec_poweron(VDEC_2);//++++
-				mdelay(10);
-			}
-			enable_dblk = 1;
 		}
 	}
 #endif
@@ -1721,7 +1748,7 @@ void amvenc_avc_start_cmd(int cmd, unsigned* input_info, int ucode_mode)
 		WRITE_HREG(CANVAS_ROW_SIZE,(((encoder_width+31)>>5)<<5));
 
 #ifdef USE_VDEC2
-		if(enable_dblk == 1){
+		if((enable_dblk == 1)&&(IS_MESON_M8_CPU)){
 			amvdec2_stop();// amvdec2_stop(); //++++
 			WRITE_VREG(VDEC2_AV_SCRATCH_2, 0xffff);
 			// set vdec2 input, clone hcodec input buffer and set to manual mode
@@ -1800,12 +1827,14 @@ void amvenc_avc_start_cmd(int cmd, unsigned* input_info, int ucode_mode)
 void amvenc_avc_stop(void)
 {
 #ifdef USE_VDEC2
-	if(get_vdec2_usage() != USAGE_DEC_4K2K)
-		amvdec2_stop();// amvdec2_stop(); //++++
+    if(IS_MESON_M8_CPU){
+        if(get_vdec2_usage() != USAGE_DEC_4K2K)
+            amvdec2_stop();// amvdec2_stop(); //++++
+    }
 #endif
-	amvenc_stop();
-	avc_poweroff();
-	debug_level(1,"amvenc_avc_stop\n");
+    amvenc_stop();
+    avc_poweroff();
+    debug_level(1,"amvenc_avc_stop\n");
 }
 
 #ifdef CONFIG_CMA
@@ -1917,9 +1946,12 @@ static u32 amvenc_avc_light_reset(unsigned value)
     const u32 * p = mix_dump_mc;
     int r = 0;
     free_irq(INT_AMVENCODER, (void *)avc_dec_id);
+	
 #ifdef USE_VDEC2
-    if(get_vdec2_usage() != USAGE_DEC_4K2K)
-        amvdec2_stop();// amvdec2_stop(); //++++
+    if(IS_MESON_M8_CPU){
+        if(get_vdec2_usage() != USAGE_DEC_4K2K)
+            amvdec2_stop();// amvdec2_stop(); //++++
+    }
 #endif
     amvenc_stop();
     avc_poweroff();
@@ -1939,28 +1971,39 @@ static u32 amvenc_avc_light_reset(unsigned value)
                 p = mix_dump_mc;    
             break;
         case UCODE_MODE_SW_MIX:
-#ifdef  USE_VDEC2
-            if(enable_dblk == 1)
-                p = mix_sw_mc_vdec2_dblk;
-            else if (enable_dblk ==2)
-                p = mix_sw_mc_hdec_dblk;
-            else
-                p = mix_sw_mc;
-#else
-            if(enable_dblk)
-                p = mix_sw_mc_hdec_dblk;
-            else
-                p = mix_sw_mc;
+            if(IS_MESON_M8B_CPU){
+                if(enable_dblk)
+                    p = mix_sw_mc_hdec_dblk;
+                else
+                    p = mix_sw_mc;
+            }
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
+            else if(IS_MESON_M8_CPU){
+                if(enable_dblk == 1)
+                    p = mix_sw_mc_vdec2_dblk;
+                else if (enable_dblk ==2)
+                    p = mix_sw_mc_hdec_dblk;
+                else
+                    p = mix_sw_mc;
+            }else if(IS_MESON_M8M2_CPU){
+                if(enable_dblk)
+                    p = mix_sw_mc_hdec_m2_dblk;
+                else
+                    p = mix_sw_mc;
+            }
 #endif
             break;
         default:
             break;
     }
 
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
     if(IS_MESON_M8M2_CPU){
         WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x32);
-        dblk_fix_flag = (p==mix_sw_mc_hdec_dblk);
-    }else{
+        dblk_fix_flag = (p==mix_sw_mc_hdec_m2_dblk);
+    }else
+#endif
+    {
         WRITE_HREG(HCODEC_ASSIST_MMC_CTRL1,0x2);
         dblk_fix_flag = false;
     }
diff --git a/drivers/amlogic/amports/encoder_mc.h b/drivers/amlogic/amports/encoder_mc.h
index 83ab3bcf7a1d..ae510d2c1938 100755
--- a/drivers/amlogic/amports/encoder_mc.h
+++ b/drivers/amlogic/amports/encoder_mc.h
@@ -15,7 +15,8 @@ extern const u32 half_encoder_mc[];
 extern const u32 mix_sw_mc[];
 extern const u32 mix_sw_mc_hdec_dblk[];
 extern const u32 mix_dump_mc_dblk[];
-#if HAS_VDEC2
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8
+extern const u32 mix_sw_mc_hdec_m2_dblk[];
 extern const u32 mix_sw_mc_vdec2_dblk[];
 extern const u32 vdec2_encoder_mc[];
 #endif
diff --git a/drivers/amlogic/amports/esparser.c b/drivers/amlogic/amports/esparser.c
index 39c39b9c2c3b..b38c2a8c41b9 100755
--- a/drivers/amlogic/amports/esparser.c
+++ b/drivers/amlogic/amports/esparser.c
@@ -96,7 +96,7 @@ static irqreturn_t parser_isr(int irq, void *dev_id)
 static inline u32 buf_wp(u32 type)
 {
     u32 wp = 
-#if HAS_HEVC_VDEC    
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     (type == BUF_TYPE_HEVC) ? READ_VREG(HEVC_STREAM_WR_PTR) :
 #endif
     (type == BUF_TYPE_VIDEO) ? READ_VREG(VLD_MEM_VIFIFO_WP) :
@@ -119,12 +119,9 @@ static ssize_t _esparser_write(const char __user *buf,
     int ret;
     u32 wp;
 
-#if HAS_HEVC_VDEC
     if (type == BUF_TYPE_HEVC) {
         parser_type = PARSER_VIDEO;
-    } else
-#endif
-    if (type == BUF_TYPE_VIDEO) {
+    } else if (type == BUF_TYPE_VIDEO) {
         parser_type = PARSER_VIDEO;
     } else if (type == BUF_TYPE_AUDIO) {
         parser_type = PARSER_AUDIO;
@@ -185,11 +182,7 @@ static ssize_t _esparser_write(const char __user *buf,
         }
     }
 
-#if HAS_HEVC_VDEC
-    if ((type == BUF_TYPE_VIDEO) || (type == BUF_TYPE_HEVC)) {
-#else
-    if (type == BUF_TYPE_VIDEO) {
-#endif
+    if ((type == BUF_TYPE_VIDEO) || (HAS_HEVC_VDEC && (type == BUF_TYPE_HEVC))) {
         video_data_parsed += len;
     } else if (type == BUF_TYPE_AUDIO ) {
         audio_data_parsed += len;
@@ -250,8 +243,8 @@ s32 esparser_init(struct stream_buf_s *buf)
     u32 parser_sub_rp;
     bool first_use = false;
 
-#if HAS_HEVC_VDEC
-    if (buf->type == BUF_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && (buf->type == BUF_TYPE_HEVC)) {
         pts_type = PTS_TYPE_HEVC;
     } else
 #endif
@@ -337,9 +330,9 @@ s32 esparser_init(struct stream_buf_s *buf)
         tasklet_init(&esparser_tasklet, parser_tasklet, 0);
     }
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     /* hook stream buffer with PARSER */
-#if HAS_HEVC_VDEC
-    if (pts_type == PTS_TYPE_HEVC) {
+    if (HAS_HEVC_VDEC && (pts_type == PTS_TYPE_HEVC)) {
         CLEAR_VREG_MASK(HEVC_STREAM_CONTROL, 1);
 
         WRITE_MPEG_REG(PARSER_VIDEO_START_PTR,
@@ -368,9 +361,9 @@ s32 esparser_init(struct stream_buf_s *buf)
         WRITE_VREG(VLD_MEM_VIFIFO_BUF_CNTL, MEM_BUFCTRL_INIT);
         CLEAR_VREG_MASK(VLD_MEM_VIFIFO_BUF_CNTL, MEM_BUFCTRL_INIT);
 
-#if HAS_HEVC_VDEC
-        WRITE_VREG(DOS_GEN_CTRL0, 0);    // set vififo_vbuf_rp_sel=>vdec
-#endif
+        if (HAS_HEVC_VDEC) {
+            WRITE_VREG(DOS_GEN_CTRL0, 0);    // set vififo_vbuf_rp_sel=>vdec
+        }
 
         video_data_parsed = 0;
     } else if (pts_type == PTS_TYPE_AUDIO) {
@@ -490,12 +483,9 @@ void esparser_release(struct stream_buf_s *buf)
         }
     }
 
-#if HAS_HEVC_VDEC
-    if (buf->type == BUF_TYPE_HEVC) {
+    if (HAS_HEVC_VDEC && (buf->type == BUF_TYPE_HEVC)) {
         pts_type = PTS_TYPE_VIDEO;
-    } else
-#endif
-    if (buf->type == BUF_TYPE_VIDEO) {
+    } else if (buf->type == BUF_TYPE_VIDEO) {
         pts_type = PTS_TYPE_VIDEO;
     } else if (buf->type == BUF_TYPE_AUDIO) {
         pts_type = PTS_TYPE_AUDIO;
diff --git a/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
index d22a36e2d9d0..6c51cfcf38e0 100755
--- a/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/encoder/encoder_mc.c
@@ -40,6 +40,10 @@
 #define MicroCode mix_sw_mc_hdec_dblk
 #include "h264_enc_mix_sw_hdec_dblk.h"
 
+#undef MicroCode
+#define MicroCode mix_sw_mc_hdec_m2_dblk
+#include "h264_enc_mix_sw_hdec_m2_dblk.h"
+
 #undef MicroCode
 #define MicroCode mix_dump_mc_dblk
 #include "h264_enc_mix_dump_dblk.h"
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h b/drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h
old mode 100755
new mode 100644
similarity index 100%
rename from drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_dblk.h
rename to drivers/amlogic/amports/m8/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h
new file mode 100644
index 000000000000..769a26a76a6b
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h
@@ -0,0 +1,54 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0xc000d00,0x0000000,0x0000000,0x0000000,0xc003fc0,0x0000000,0x649ca01,0xa60c041,
+	0xc781200,0x0800000,0xa608081,0xc7ffe40,0xa60c0c1,0xc781a00,0x0800000,0xa608101,
+	0xc7ffd00,0xa60c141,0xc781bc0,0x0800000,0xa608181,0xc7ffbc0,0xa6081c1,0xc783900,
+	0xc7ffb00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc781e80,0x0000000,0xcc00000,0x0400000,0xcb80003,0x0000000,0xcc00000,0x0400000,
+	0xc7a3240,0x0000000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xc7a30c0,0x0000000,
+	0xc781b00,0x0000000,0xcc00000,0x0400000,0x6800000,0x6800001,0x7400040,0xb2fc7c1,
+	0x4001041,0x7c01bc0,0x7c01c00,0x7c01c40,0x7c01100,0x7c00c40,0x7c00c80,0x68002c0,
+	0x7c00700,0x7c006c0,0x6803fc0,0x7c01340,0x69fffc0,0x7c02180,0x7c00280,0x64c4000,
+	0x64c4201,0x2401001,0x4008041,0x7c00741,0x5810041,0x7c00781,0xcc00000,0x0000000,
+	0x649d100,0xaa18080,0x6800000,0x680f701,0xc000300,0x6800042,0x809d102,0x80c0a00,
+	0x80c2800,0x80c0002,0x6bffe80,0x6030400,0x6810003,0x809ca02,0xc7fe980,0x0400000,
+	0x6034201,0x649ce01,0x2000040,0x6034100,0x6a10000,0x6c001c0,0x6034000,0xa60c042,
+	0xc000980,0x0000000,0xa60c082,0xc000ac0,0x0000000,0xa60c0c2,0xc000a80,0x0000000,
+	0x6434000,0x580f000,0xbef8040,0xcc00000,0x0000000,0x649d100,0xaa180c0,0x6840000,
+	0x6815381,0xc07f9c0,0x6800082,0x809d103,0x6bffd80,0x6030400,0x809ca04,0xc78e040,
+	0x0400000,0x649d100,0xaa18100,0x68c0000,0x6821401,0xc07f6c0,0x68000c2,0x809d104,
+	0x6bffe80,0x6030400,0x6810ec3,0x809ca06,0xc78dd00,0x0400000,0x6800000,0x7c012c0,
+	0x7c01540,0x6803fc0,0x7c014c0,0x7c01500,0xcc00000,0x0000000,0xcc00000,0x0000000,
+	0xcc00000,0x0000000,0xc7fe600,0x0000000,0x64c4404,0x9101104,0xa6f8004,0xc7fe4c0,
+	0x0000000,0x64c2305,0xbefc045,0xcc00000,0x64c2005,0x4001145,0x6800006,0xa20c045,
+	0x5801145,0x2405146,0xcc00000,0x0000000,0xcc00000,0x0400000,0x683ffc5,0x4401145,
+	0xb224005,0x64c4406,0x9101186,0xa6f0006,0x80c3e00,0x64c3f06,0x9002186,0xa2e0046,
+	0x0000000,0xcc00000,0x0000000,0x683ffc5,0x4401145,0xb224005,0x64c4406,0x9101186,
+	0xa6f0006,0x80c3e00,0x64c3f06,0x9002186,0xa2e0046,0x0000000,0x683ffc5,0x4401145,
+	0xb254005,0x64e0006,0x9021186,0xaaf0006,0x0000000,0x64e0f06,0x91c91c6,0xa6e0007,
+	0x90631c6,0x9003186,0xa4f51c6,0x6981807,0x64e1106,0x9010186,0xaa08006,0xa4f01c6,
+	0x64e1106,0x9210186,0xaa0c006,0xa4ec1c6,0x0000000,0x683ffc5,0x4401145,0xb210005,
+	0x6490906,0xbef4046,0x0000000,0x683ffc5,0x4401145,0xb220005,0x6495307,0x90011c7,
+	0x649bb06,0x920c186,0x20061c6,0xa6e4006,0x0000000,0x683ffc5,0x4401145,0xb210005,
+	0x6491e06,0xa6f4006,0x0000000,0x683ffc5,0x4401145,0xb210005,0x6498f06,0xa6f4006,
+	0x0000000,0xcc00000,0x0000000,0xc000e00,0x0000000,0x649c700,0xaaf4000,0xc000280,
+	0x0000000,0xc7fdd00,0x0800000,0xc000180,0x0000000,0xc000b80,0x0000000,0xcc00000,
+	0x0000000,0x649c700,0xa60c000,0xcc00000,0x0000000,0x0800000,0x649c700,0xa60c000,
+	0xcc00000,0x0400000,0xc000100,0x0000000,0xcc00000,0x0400000,0x809c700,0x9104040,
+	0xaa0c001,0x6804041,0x6806041,0x48ff000,0x4401000,0x5403000,0x2000040,0x7000001,
+	0x9c01281,0x9c012c1,0xcc00000,0x7400001,0x6035202,0x649ce02,0x2002042,0x6035102,
+	0x6035000,0x6435001,0x580f041,0xbef8041,0x0000000,0x6435301,0x900c041,0xa6f8001,
+	0x0000000,0xcc00000,0x0000000,0x78006c0,0x7800701,0xa403040,0xcc00000,0x0000000,
+	0x649c000,0xaa0c000,0xcc00000,0x0000000,0x0800000,0x78006c0,0x7800701,0xa403040,
+	0xcc00000,0x0400000,0xc000100,0x0000000,0xcc00000,0x0400000,0x78006c0,0x7000001,
+	0x609c001,0x90c2081,0xaa0c002,0x6804002,0x6806002,0x483f041,0x5403041,0x2001081,
+	0x4001041,0x7000042,0x9121082,0x649c000,0x9501002,0x609c000,0x7000042,0x9101082,
+	0xaa0c002,0x4001041,0x4002041,0x4001081,0x7000041,0x7000082,0x9610042,0x609c101,
+	0x78006c1,0x7000041,0x90c2081,0xa62c002,0x809c200,0x483f041,0x5401041,0x6802b02,
+	0x2002042,0x7000081,0x4001082,0x7000082,0x9610081,0x609c202,0x649c002,0x5408082,
+	0x4c03082,0x609c002,0x8007401,0x78006c0,0x4001000,0x68006c1,0xb803040,0x0000000,
+	0x68002c0,0xcc00000,0x7c006c0,0x649c002,0xa6fc002,0x0000000,0x609c100,0x609c201,
+	0x809c00a,0x649cd00,0xbe0e000,0xc7800c0,0x8007001,0x8007401,0x649c000,0xa6fc000,
+	0x0000000,0xcc00000,0x0000000,0x649c007,0xa6bc007,0x0000000,0x609c105,0x609c206,
+	0x809c00a,0x649cd05,0xbe12005,0xc780140,0x8007001,0x0000000,0x8007401,0x0000000,
+	0x649c005,0xa6b4005,0x0000000,0xcc00000,0x0000000,0x0000000
+};
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264header_linux_single.h b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264header_linux_single.h
new file mode 100644
index 000000000000..6af0ad8e6379
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264header_linux_single.h
@@ -0,0 +1,126 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6bffd8a,0x603040a,0x0400000,0x64c430a,0x580128a,0xbaf980a,0x64c0008,0xbe44048,
+	0x0000000,0x0800000,0x6bffe8a,0x603040a,0xcc00000,0x0400000,0x64c0008,0xa2fc048,
+	0x0000000,0x64c3a08,0x9006208,0xaaec648,0x0000000,0x80c0002,0xc7ffcc0,0x0000000,
+	0xbe1c808,0x0000000,0x649d008,0x4001208,0x609d008,0xc7ffb00,0x80c0002,0xfc08200,
+	0x90a2248,0x7c01149,0x481f208,0x7c01188,0xaa10388,0xaa0c508,0xc780780,0x0000000,
+	0xfc01240,0xfc01240,0xa614508,0xaa0c049,0x6800049,0x6800149,0x7c01189,0xfc06240,
+	0xfc0a240,0x7c014c9,0x7801348,0xaa1bfc8,0xa806209,0x6800008,0x7801388,0xa805209,
+	0x6800048,0xc7ff540,0x6800049,0x7c00249,0x7c01508,0xfc03240,0xfc01240,0x7c01549,
+	0xfc01240,0x7c01589,0xfc01240,0x7801188,0xaa24148,0xaa20048,0xa608188,0xc78ac00,
+	0xaa1c1c8,0xaa183c8,0xa608208,0xc784640,0xc7ff080,0xc785d00,0x0000000,0x6800008,
+	0x7c00c88,0x6808012,0xfc10200,0x9108208,0x7c007c8,0xfc08200,0x7c00808,0xc00b180,
+	0x80c2301,0xb2087c8,0xc7fed00,0x7c00848,0x78007c8,0xb61d908,0x6800048,0x7c00888,
+	0x6800008,0x7c008c8,0xc780540,0x0000000,0xc00ae40,0x80c2301,0x7c00888,0xc00ad80,
+	0x80c2301,0xc00ad00,0x80c2301,0xfc01200,0xfc01200,0x7c008c8,0xaa24008,0x6800010,
+	0x68001c8,0x7c015c8,0x78008ce,0x7c00c8e,0x680000f,0xc008640,0x680000a,0xc00a980,
+	0x80c2301,0x4004208,0x7c00908,0xc00a880,0x80c2301,0x7c00948,0xaa20088,0xaa0c008,
+	0x0000000,0xc780000,0xc00a6c0,0x80c2301,0x4004208,0x7c00988,0xc00a5c0,0x80c2301,
+	0x7c009c8,0xfc01200,0x7c00a08,0xc00a480,0x80c2301,0xb20bfc8,0xc7fe000,0x4001208,
+	0x7c00a48,0xc00a300,0x80c2301,0xb20bfc8,0xc7fde80,0x4001208,0x7c00a88,0xfc01200,
+	0x7c00ac8,0xa60c008,0x6800009,0xfc01240,0x9421209,0x7c00b08,0xfc01240,0x7c00b49,
+	0xfc01200,0xaa24008,0x6800109,0x7c00c88,0xc009e40,0x80c2301,0x7400488,0xd07ff49,
+	0x4001492,0xc780100,0x6800008,0x7c00b88,0x7c00bc8,0xfc01240,0xa610009,0x7c00c09,
+	0xc781600,0x0000000,0x7c00c89,0xfc01200,0x9421248,0x7400489,0xaa30008,0x4001492,
+	0xfc08200,0x7400488,0xa623fc8,0x4001492,0xfc10200,0x7400488,0x4001492,0xfc10200,
+	0x7400488,0x4001492,0xfc01200,0xaa0c008,0x0000000,0xfc01200,0xfc01200,0xaa1c008,
+	0x0000000,0xfc05200,0xa210048,0x0000000,0xfc10200,0xfc08200,0xfc01200,0xaa18008,
+	0x0000000,0xc009300,0x80c2301,0xc009280,0x80c2301,0xfc01200,0x7400488,0xaa3c008,
+	0x4001492,0xfc10200,0x7400488,0x4001492,0xfc10200,0x7400488,0x4001492,0xfc10200,
+	0x7400488,0x4001492,0xfc10200,0x7400488,0x4001492,0xfc01200,0x680000f,0xfc01200,
+	0xaa18008,0x94013c8,0xc008000,0x0000000,0x90aa248,0x7c00c49,0xfc01200,0xaa1c008,
+	0x94213c8,0xc007e40,0x0000000,0xbe0c04f,0x90aa248,0x7c00c49,0xa20c0cf,0x0000000,
+	0xfc01200,0xfc01200,0x94413c8,0xfc01200,0x94613c8,0x740048f,0x4001492,0xaa24008,
+	0x6800189,0xfc01200,0xc0086c0,0x80c2301,0xd07ff89,0x0000000,0x7400488,0x4001492,
+	0xc008800,0x0000000,0x7800848,0x6800049,0x3409209,0x649cb0a,0x2c0a24a,0x609cb0a,
+	0x649d209,0x9527248,0xc009a40,0x609d209,0x7801188,0xaa0c3c8,0xc7fbe00,0x0000000,
+	0xfc01200,0xc008100,0x80c2301,0x40013c8,0x7c0130f,0x680134a,0x6800010,0xb4083d0,
+	0xc007f40,0x80c2301,0xb6f4090,0x4001410,0x7400288,0xc7ffe80,0x400128a,0x6bfffc8,
+	0x7c013c8,0x7c01408,0x7c01448,0x7c01488,0x6800050,0xb4143d0,0xc000180,0x68013cc,
+	0xc000100,0x680140c,0xc7ffec0,0x4001410,0xc007a40,0x80c2301,0x4000388,0x680000d,
+	0xb80238d,0xcc00000,0xc0078c0,0x80c2301,0xb6f004d,0x400134d,0xb6e8090,0xc7ffe40,
+	0x7400308,0x6800050,0xb4073d0,0xc07fc40,0x680144c,0xc07fbc0,0x680148c,0xc7ffec0,
+	0x4001410,0xc7fb140,0x0000000,0x64c5109,0x64c460a,0x7800788,0x5410208,0x780074b,
+	0x20082c8,0x580a208,0xe000248,0x0000000,0x0000000,0x0000000,0xf000200,0xf010240,
+	0x9708209,0x540a208,0x2008288,0x64c4309,0x2408248,0x64c4009,0x2408248,0x7c01288,
+	0x5810208,0x7c01248,0xcc00000,0x0000000,0x6800008,0x7c010c8,0x6808012,0xc006d80,
+	0x80c2301,0xb20bfc8,0xc7fa900,0x7c00cc8,0xc006c40,0x80c2301,0x7c00d08,0x649cb09,
+	0x3809209,0xbe0c049,0xc7fa700,0x0000000,0xfc01200,0x7c00d48,0xfc01200,0x7c00d88,
+	0xc006940,0x80c2301,0xaa0c008,0xc7fa4c0,0x0000000,0xc006800,0x80c2301,0x7c00dc8,
+	0xc006740,0x80c2301,0x7c00e08,0xfc01200,0x7c00e48,0xfc02200,0x7c00e88,0xc006580,
+	0x80c2301,0xc006600,0x0000000,0x7c00ec8,0xc006440,0x80c2301,0xc0063c0,0x80c2301,
+	0xc006440,0x0000000,0x7c00f08,0x7c01088,0xfc01200,0x7c00f48,0xfc01200,0x7c00f88,
+	0xfc01200,0x7c00fc8,0x64c2908,0x91c2208,0xa6140c8,0x6800008,0x7c01008,0x7c01048,
+	0xc780480,0xfc01200,0x7c01008,0xfc01200,0x7c01048,0xaa20008,0x68001c8,0x7c015c8,
+	0x780104e,0x7c010ce,0x680000f,0xc0038c0,0x680000a,0xc005c00,0x80c2301,0xc005c80,
+	0x0000000,0x7c01088,0xc006940,0x0000000,0x7800cc8,0xb618808,0x6800049,0x3409209,
+	0x649cc0a,0x2c0a24a,0x609cc0a,0x649d209,0x9409248,0xc007980,0x609d209,0xc7f93c0,
+	0x0000000,0xc07e280,0x0000000,0xc005680,0x80c2301,0x7c01688,0x7801109,0xa62c009,
+	0xaa08008,0xc7f9140,0x7801189,0xaa08149,0xc7f9080,0x6800049,0x7c01109,0x649cd09,
+	0x9809209,0x609cd09,0xaa34008,0x6800051,0x7802189,0x69fffd1,0xa402449,0xc7f8dc0,
+	0xa807248,0x6800011,0x7802088,0xa610008,0x83f2001,0xc780000,0x0000000,0x7801289,
+	0x7c01209,0x7801248,0x7c011c8,0xc004e80,0x80c2301,0xaa341c8,0xaa38008,0xaa3c048,
+	0x7c016c8,0xc004d00,0x80c2301,0x7c01708,0xb630808,0x649cc09,0x3809209,0xbe24049,
+	0xc7f8780,0x0000000,0xc7ffd80,0x6800088,0xc7ffd00,0x6800148,0xc7ffc80,0x6800188,
+	0x649d209,0x9009289,0xa80620a,0x9409248,0xc006ec0,0x609d209,0xc005640,0x0000000,
+	0x7800d08,0x649d209,0x9127289,0xa80620a,0x9527248,0xc006280,0x609d209,0xc004840,
+	0x0000000,0x7800909,0xf800209,0xa614011,0x7801749,0xa803248,0x0000000,0x9811051,
+	0x7c01748,0x7800ac8,0xa61c008,0x68000ca,0xfc01200,0xaa10008,0x0000000,0xfc01200,
+	0x4001288,0xa614011,0x7801789,0xa80324a,0x0000000,0x9811091,0x7c0178a,0x7801788,
+	0x4401208,0x7800b09,0x2809248,0x9021249,0x2008248,0x7c017c8,0x7801188,0xa628148,
+	0x0000000,0xc003d00,0x80c2301,0xa614011,0x7801809,0xa803248,0x0000000,0x98110d1,
+	0x7c01808,0x7800948,0xa654008,0x7800988,0xf800208,0xa614011,0x7801849,0xa803248,
+	0x0000000,0x9811111,0x7c01848,0x7800d89,0xaa20009,0x6800008,0x7801789,0xa6140c9,
+	0xc003740,0x80c2301,0xc0037c0,0x0000000,0x7c01888,0x5810208,0x7c018c8,0x7800948,
+	0xa608048,0xc780000,0x7800fc8,0xaa10008,0x0000000,0xc003400,0x80c2301,0x7800dc8,
+	0x7c01948,0x7800e08,0x7c01988,0x6800008,0x7c01908,0x78016c8,0xaa5c188,0xaa28148,
+	0x7801188,0xaa0c148,0xc7809c0,0x0000000,0xfc01200,0x7c019c8,0xfc01200,0xc780880,
+	0x7c01a08,0xfc01200,0x6800809,0xaa14008,0x7801948,0xc002e00,0x80c2301,0x7c01948,
+	0x9505248,0x7800b08,0x96a2248,0xc780580,0x60c2109,0xfc01200,0x7c01908,0x6800809,
+	0x96e1248,0x7801948,0x9505248,0xfc01200,0xaa24008,0x7801988,0xc0029c0,0x80c2301,
+	0x7c01948,0x9505248,0xc0028c0,0x80c2301,0x7c01988,0x9605248,0x7800b08,0x96a2248,
+	0x60c2109,0xc068b40,0x7c01651,0x809ca03,0xc7f6140,0x6802b03,0xba0c18a,0x680020d,
+	0x680080d,0x78015c8,0xb80420a,0x400128a,0xcc00000,0x0000000,0x540138e,0x54013cf,
+	0xfc01240,0x7400489,0x4001492,0x9401389,0xaac8009,0x680020b,0x680020c,0xba0c18a,
+	0x68003cd,0x6800fcd,0xaa4400c,0x0000000,0xc002040,0x80c2301,0x7400488,0x4001492,
+	0xc002040,0x0000000,0x20082c8,0x48ff308,0xa61800c,0xaa0cfcd,0xb61418a,0xa6103cd,
+	0xc7ff780,0x980f00f,0x40002cc,0x5408410,0xbe0c04d,0x940840b,0x6c00010,0xaeac00d,
+	0x440134d,0x78015c8,0xb80320a,0xcc00000,0x0000000,0xc7ff640,0x400128a,0xba0c18a,
+	0x680020d,0x680080d,0x64e020b,0x200b34b,0x6c0004b,0x60e020b,0xba101ca,0x400128a,
+	0xcc00000,0x0000000,0x540138e,0x54013cf,0x78015c9,0xac0424a,0x6800009,0x7000489,
+	0x4001492,0x9401389,0xaab4009,0x680020b,0x680020c,0xba0c18a,0x68003cd,0x6800fcd,
+	0xaa3800c,0x7000488,0x4001492,0xc001380,0x0000000,0x20082c8,0x48ff308,0xa61800c,
+	0xaa0cfcd,0xb61418a,0xa6103cd,0xc7ff700,0x980f00f,0x40002cc,0x5408410,0xbe1004d,
+	0x940840b,0x6c00010,0x60e0210,0xaeb400d,0x440134d,0xba0c1ca,0xcc00000,0x0000000,
+	0xc7ff680,0x400128a,0xc000cc0,0x80c2301,0x4001388,0xfc08200,0xc000bc0,0x80c2301,
+	0xc000b40,0x80c2301,0xd07ff0e,0xfc01200,0xfc05200,0xcc00000,0xfc0f200,0x680000d,
+	0x680001a,0x64c2908,0xa20c408,0xc7f44c0,0x0000000,0xfc08200,0xaaeffc8,0x200d20d,
+	0x64c2908,0xa20c408,0xc7f4300,0x0000000,0xfc08200,0xaaeffc8,0x201a21a,0xaa5000d,
+	0xaa1018d,0xa61404d,0xc780480,0x0000000,0x6800048,0x7c01608,0x64c0008,0xbe14208,
+	0x64c2908,0xbe0c408,0xd07ff1a,0xfc08200,0x64c0008,0xbe10208,0x64c2908,0xbe08408,
+	0xc7ff7c0,0xc7f3d40,0x0000000,0xc7ffcc0,0xc7ffc80,0x64c2308,0xbefc048,0xcc00000,
+	0x64c2008,0x4001208,0x6800009,0xa20c048,0x5801208,0x2408209,0xcc00000,0x0000000,
+	0x6808012,0x64c2908,0x9c082c8,0x9c08308,0x7800889,0xaa0c009,0x98080c8,0x9c080c8,
+	0x60c2908,0x78008ce,0xaa3000e,0x680000f,0x680000a,0x6c0004a,0x60e020a,0x68001c8,
+	0x7c015c8,0xc07e240,0x680000a,0x680000a,0x6c0004a,0x60e020a,0x64e0008,0x96e920e,
+	0x60e0008,0x64e0308,0x950820f,0x60e0308,0x7800a48,0x60c0908,0x7800a8a,0x7800ac8,
+	0xa60c008,0x0000000,0x540128a,0x40002ca,0x7800a49,0x95082c9,0x7c0000b,0x40002ca,
+	0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0xcc00000,0x0000000,0x6808012,
+	0x6800809,0x7800dc8,0x9505248,0x7800e08,0x9605248,0x7800b08,0x96a2248,0x60c2109,
+	0x7800f08,0x6801009,0x9505248,0x60c2109,0x7801088,0x6801409,0x9505248,0x60c2109,
+	0x780104e,0xaa2800e,0x680000f,0x6801c0a,0x6c0004a,0x60e020a,0xc07d500,0x680000a,
+	0x680000a,0x6c0004a,0x60e020a,0x64e0008,0x95c920e,0x60e0008,0x64e0308,0x940820f,
+	0x60e0308,0xcc00000,0x0000000,0x6800009,0x6c00049,0x540a288,0x2009289,0x680050a,
+	0xc001340,0x6a007cb,0x7800c89,0xaa28009,0x6800009,0x6c00049,0x540a288,0x2009289,
+	0x680400a,0x2009289,0x680600a,0xc001080,0x6a0800b,0xcc00000,0x0000000,0x6800009,
+	0x6c00049,0x540a288,0x2009289,0x680050a,0xc000e40,0x6b007cb,0x7800c89,0xaa28009,
+	0x6800009,0x6c00049,0x540a288,0x2009289,0x680400a,0x2009289,0x680600a,0xc000b80,
+	0x6b0800b,0xcc00000,0x0000000,0x6900009,0x6c00049,0x5409288,0x2009289,0x680044a,
+	0xc000940,0x6a00ccb,0x78010c9,0xaa28009,0x6900009,0x6c00049,0x5409288,0x2009289,
+	0x680100a,0x2009289,0x680380a,0xc000680,0x6a0800b,0xcc00000,0x0000000,0x6900009,
+	0x6c00049,0x5409288,0x2009289,0x6800cca,0x680110a,0x680044a,0xc0003c0,0x6b00ccb,
+	0x78010c9,0xaa28009,0x6900009,0x6c00049,0x5409288,0x2009289,0x680100a,0x2009289,
+	0x680380a,0xc000100,0x6b0800b,0xcc00000,0x0000000,0x603520a,0x649ce0a,0x200a24a,
+	0x603510a,0x603500b,0x6435009,0x580f249,0xbef8049,0x0000000,0x6435309,0x900c249,
+	0xa6f8009,0x0000000,0xcc00000,0x0000000,0x0000000,0x0000000
+};
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264mmc_linux_single.h b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264mmc_linux_single.h
new file mode 100644
index 000000000000..f6dfa676434d
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264mmc_linux_single.h
@@ -0,0 +1,172 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x7801658,0x7801508,0xa613fc8,0x0000000,0x6800008,0x7c01508,0xa60c018,0x4000658,
+	0xc7813c0,0xaa0c008,0x6800049,0x6800089,0x700024a,0x780000b,0xa8182ca,0x740024b,
+	0x7800809,0x97082c9,0x78009c9,0x96082c9,0x609c10b,0x40012c8,0x609c00b,0x8007401,
+	0x649c00b,0xa6fc00b,0x0000000,0x649c10b,0x910828b,0x7c001ca,0x900828b,0x7c0020a,
+	0x649c20b,0x7c0014b,0x92102cb,0x7c0018b,0xc004100,0x0000000,0x7801188,0xa630148,
+	0x7801508,0xa628008,0x6800008,0x7c01bc8,0x7c01c08,0x7c01c48,0xc007a00,0x0000000,
+	0x6800008,0x7c000c8,0x7c00108,0xc004000,0x0000000,0xa24200b,0x910820b,0xbe32008,
+	0x780150b,0xaa0c00b,0x68000cb,0x680010b,0x680004a,0x340a20a,0x6bfffc8,0x300a20a,
+	0x70002c8,0x2808288,0x74002c8,0xc7ef040,0x809ca07,0x7c01b09,0x7c01b8a,0x7801508,
+	0xa62c008,0x900820b,0x7c02008,0x7800248,0xa60c008,0x6800048,0x7c01588,0x6800008,
+	0x7c00248,0x7801588,0x7c02048,0xc011480,0x0000000,0xc010040,0x0000000,0x78016c8,
+	0xaa08088,0xc780980,0x7801189,0xaa20149,0x7801149,0xaa18009,0x0000000,0xfc01240,
+	0xaa0c009,0xc00b980,0x0000000,0xc070f80,0x80c2301,0xc071000,0x0000000,0x401a205,
+	0x7800ec9,0x2008248,0x7c01a48,0x7800f48,0xaa40008,0x680000a,0xc070cc0,0x80c2301,
+	0xaa30045,0x9402285,0xc070bc0,0x80c2301,0xc070c40,0x0000000,0x94c4285,0xc070a80,
+	0x80c2301,0xc070b00,0x0000000,0x9444285,0x60c310a,0xc7ee1c0,0x809ca05,0xaa08148,
+	0xc781240,0xaa4c019,0xc007300,0x7801748,0x7801508,0xaa3c008,0x7802048,0xaa34008,
+	0x7801548,0xaa0c008,0x7901448,0x79013c8,0x6bfffc9,0xa807248,0x7801b09,0x7802008,
+	0x4c80208,0x7400248,0x4001249,0x7c01b09,0xfc01200,0xaa10008,0x7801956,0xc00bd00,
+	0x6808011,0xaa18019,0x6808008,0x7801b0a,0x7801953,0xc009b00,0x6800012,0x7800e48,
+	0x4000248,0xaa34008,0x6094209,0xc06ff80,0x80c2301,0x9484245,0xc06fec0,0x80c2301,
+	0x9504245,0x6094209,0x680c008,0x6094008,0xc0119c0,0x780194a,0x6494008,0x9c08248,
+	0x6094008,0x7801148,0xaa38008,0x0000000,0x7801188,0xa61c148,0x0000000,0xfc01200,
+	0x7c019c8,0xfc01200,0xc780180,0x7c01a08,0xfc01200,0xaa0c008,0xc00a240,0x0000000,
+	0x7800d48,0xaa18008,0x6800c09,0xc06f780,0x80c2301,0x9402245,0x60c2109,0xc7fe700,
+	0x0000000,0xaa68019,0xc006b80,0x0000000,0xc006e80,0x6808008,0x7c01fc8,0x7801b08,
+	0x4020208,0xc0079c0,0x7c01b48,0x7801508,0xaa3c008,0x7802048,0xaa34008,0x7801548,
+	0xaa0c008,0x7901448,0x79013c8,0x6bfffc9,0xa807248,0x7801b09,0x7802008,0x4c80208,
+	0x7400248,0x4001249,0x7c01b09,0xfc01200,0xaa10008,0x7801956,0xc00a940,0x6808011,
+	0xaa44019,0x7801508,0xaa3c008,0x7802048,0xaa34008,0x7801548,0xaa0c008,0x7901488,
+	0x7901408,0x6bfffc9,0xa807248,0x7801b49,0x7802008,0x4c80208,0x7400248,0x4001249,
+	0x7c01b49,0xfc01200,0xaa24008,0x7801b48,0x7c01b08,0x7801996,0xc00a340,0x6808811,
+	0x7801b48,0x4420208,0x7c01b08,0xaa34019,0x6808008,0x7801b0a,0x7801953,0xc008080,
+	0x6800012,0x6808808,0x7801b4a,0x7801993,0xc007f40,0x6800212,0xc008700,0x6808808,
+	0x7800e88,0xa60c088,0x6800009,0x6815409,0x9402248,0xa644048,0x6094209,0xc06e280,
+	0x80c2301,0x9484245,0xc06e1c0,0x80c2301,0x9504245,0x6094209,0x680c008,0x6094008,
+	0xc00fcc0,0x780194a,0x680d808,0x6094008,0xc00fbc0,0x780198a,0xc7fe200,0x0000000,
+	0x7801508,0xaa0c008,0x6804049,0x6806049,0x6800008,0x780020a,0x7400248,0xd07ffca,
+	0x4008249,0xcc00000,0x0000000,0xc000d40,0x6a0200b,0x649cd09,0xa226009,0x67f2909,
+	0xa21c049,0xc06f280,0x0000000,0x67f2609,0x93e1249,0xaaf0009,0x0000000,0x6808009,
+	0x680900a,0x680000c,0x7801508,0xaa0c008,0x6804048,0x6806048,0x700020d,0xa20c04d,
+	0x914238d,0xc780240,0xaa0c00e,0xc780300,0x0000000,0xa25200b,0xc000cc0,0x94082cc,
+	0xc780440,0x7c01acb,0x740028c,0x400128a,0x740024c,0xc780300,0x4001249,0xaa2808e,
+	0xa61004e,0x904438d,0x740028c,0x400128a,0xaa1400e,0x0000000,0x740024c,0xc780080,
+	0x4001249,0x780020d,0x440134d,0x4008208,0xb8e234c,0x400130c,0xcc00000,0x0000000,
+	0x7801148,0xa60c008,0xcc00000,0x980b38b,0x7801508,0xaa0c008,0x68000c8,0x6800108,
+	0x78009cc,0x7000209,0x680000a,0xa21c049,0x5801249,0xb8fe30a,0x400128a,0xc780000,
+	0xcc00000,0x0000000,0x95082ca,0x680004c,0x340c28c,0x7000209,0x2c09309,0xcc00000,
+	0x7400209,0x649c80e,0x93e13ce,0xaa1800f,0x91083ce,0xaa1000f,0x44013cf,0x950838f,
+	0x609c80e,0x780114e,0xaa1000e,0x680000e,0xc780480,0x7c0208e,0x649c80e,0x93e13ce,
+	0xa61000f,0x680000e,0xc780300,0x7c0208e,0x780150e,0xa62400e,0x649c80e,0x91083ce,
+	0xa6e400f,0x90083ce,0x950838f,0x609c80e,0x680004e,0x7c0208e,0x6a0000e,0x60c3d0e,
+	0x4401388,0x91083cb,0x740038f,0x400138e,0x6810010,0x7801151,0xaa3c011,0x6bfffd1,
+	0x4c0c410,0x7800151,0x7800192,0x9610452,0xe0003d1,0x7801512,0xaa0c012,0x649d612,
+	0x649d712,0xf000440,0xf0103c0,0x970844f,0x2011491,0x64c3d0f,0x91613cf,0xa6f800f,
+	0x0000000,0x60c3811,0x78017d1,0x94c2411,0x7400390,0xc008f00,0x0000000,0x7800290,
+	0x69fff8f,0xa81640f,0x78016cf,0xa62c08f,0x780150f,0xaa1000f,0x69fffcf,0xa80e40f,
+	0xc7803c0,0xa80e40f,0x7c00292,0x69fff8f,0xc7802c0,0x7c0028f,0x69fffcf,0xa80640f,
+	0x91e13d0,0xaa0c00f,0x6c00010,0x6ffffd0,0xb403412,0x680004f,0x7c0208f,0x4000812,
+	0x7000390,0x780208f,0x952140f,0xb004452,0x9c10210,0x9810210,0x4000811,0x7400390,
+	0x80c3000,0x60c3220,0x60c3212,0x60c3211,0x7801790,0xa610090,0x400138e,0xc780180,
+	0x400138e,0x7400392,0x9210492,0x400138e,0x7400392,0xa610090,0x400138e,0xc780180,
+	0x400138e,0x7400391,0x9210451,0x400138e,0x7400391,0x400138e,0x7801750,0x7400390,
+	0x6806010,0xb40c40e,0x440638e,0x6804010,0x240e40e,0x580238e,0x6802b10,0x200e40e,
+	0x78011d0,0x7400390,0x7801210,0x400138e,0x7400390,0x7801511,0xaa10011,0x900844b,
+	0x7800212,0x2011491,0x5401451,0x649c612,0x2011491,0x4000491,0x4001451,0x9508491,
+	0x9608491,0x609b212,0x609b012,0x609b112,0xcc00000,0x0000000,0x7801508,0xaa0c008,
+	0xcc00000,0x0000000,0x680000f,0xc000340,0x680400b,0x4000512,0x7800089,0x780000a,
+	0xa405289,0x680004f,0xc000180,0x680600b,0xa6c8012,0xa6c4014,0xcc00000,0x0000000,
+	0x6800012,0x6bfffca,0x6dfffca,0x7800213,0x6bfffcd,0x400134d,0xb41b4cd,0x400038d,
+	0x400044e,0x540338e,0x200e2ce,0x400138e,0x700038c,0xa21004c,0x9c0c00c,0xc7ffd80,
+	0x740038c,0x914224c,0xa6cc049,0x910130c,0xaa0c00c,0x400138e,0x400238e,0x400130e,
+	0x700038e,0x700030c,0x961038c,0xb0ea38a,0x0000000,0x6800052,0x400028e,0xc7ff980,
+	0x4000411,0xaa0c012,0xc00a700,0x0000000,0xcc00000,0x0000000,0x680004c,0x780090b,
+	0x340c2cc,0x6808009,0x7801b0f,0xb8033c9,0xcc00000,0x0000000,0x780150b,0xaa0c00b,
+	0x680400b,0x680600b,0x700024a,0x540328a,0x200a2ca,0x400628a,0x700028a,0xb00320a,
+	0x4000349,0x240a30a,0x400134d,0xb4113cd,0x700034e,0x540338e,0x200e2ce,0x400638e,
+	0x700038e,0xb00320e,0x0000000,0x240e30e,0xb4f638a,0x0000000,0x400028e,0x700024e,
+	0x7000350,0x740034e,0xc7ffc00,0x7400250,0x4001249,0xb8e53c9,0xcc00000,0x0000000,
+	0x6808009,0x7801b0a,0x240a24a,0x78009c9,0xac0324a,0xcc00000,0x0000000,0xc07f3c0,
+	0x7801748,0x6808009,0x78009ca,0x2009289,0xcc00000,0x7c01b09,0x6808009,0x7801b0f,
+	0x780150b,0xaa0c00b,0x680400b,0x680600b,0x700024a,0x540328a,0x200a2ca,0x400128a,
+	0x700028c,0x910130c,0xaa0c00c,0x400128a,0x400228a,0x400130a,0x700028a,0x700030c,
+	0x961028c,0x4000349,0x400134d,0xb4163cd,0x700034e,0x540338e,0x200e2ce,0x400138e,
+	0x700038c,0x910130c,0xaa0c00c,0x400138e,0x400238e,0x400130e,0x700038e,0x700030c,
+	0x961038c,0xb4f138a,0x0000000,0x400028e,0x700024e,0x7000350,0x740034e,0xc7ffac0,
+	0x7400250,0xb00380a,0x0000000,0x4001208,0x4001249,0xb8d73c9,0xcc00000,0x0000000,
+	0x6808809,0x680800a,0x7801fc8,0x4401208,0xb806288,0x700020b,0x740024b,0x4001249,
+	0xc7fff00,0x4401208,0x7801fc8,0x7801b0a,0xb406288,0x700020b,0x740024b,0x4001249,
+	0xc7fff00,0x4001208,0x6808009,0x7801b0a,0x7801fc8,0xb406288,0x700020b,0x740024b,
+	0x4001249,0xc7fff00,0x4001208,0x6808808,0x7801fca,0x402028a,0xb406288,0x700020b,
+	0x740024b,0x4001249,0xc7fff00,0x4001208,0xcc00000,0x0000000,0xa23600e,0x487f38e,
+	0x400040e,0x54013d0,0x200f40f,0x40103cf,0x60c240f,0x540830c,0x9405310,0x540338e,
+	0x6804010,0xc7802c0,0x200e40e,0x201044e,0x54013d0,0x200f40f,0x40103cf,0x60c240f,
+	0x540830c,0x9405310,0x540338e,0x200e34e,0x400138e,0x7000390,0x60c2210,0x90c23d0,
+	0xaa0c0cf,0x0000000,0x40013cf,0x94a230f,0x400138e,0x700038f,0x400138e,0x7000390,
+	0x96103d0,0x60c220f,0x400138e,0x700038f,0x400138e,0x7000390,0x96103d0,0xcc00000,
+	0x60c220f,0x680000b,0x680000c,0x6800011,0x780150d,0xaa1000d,0x680400d,0x680600d,
+	0x7800211,0xb40d288,0xac0c4cb,0xc07f2c0,0x700020e,0x90023cb,0xa6140cf,0x58023cb,
+	0x200f48f,0x60c240f,0x60c220c,0x40012cb,0xc7ffd40,0x4001208,0xa2280cb,0x580234b,
+	0x200d48d,0x60c240d,0x90022cb,0x680010d,0x240b2cd,0x54032cb,0x340c2cc,0x60c220c,
+	0xcc00000,0x0000000,0x7000208,0x5403208,0x7801509,0xaa0c009,0x6804009,0x6806009,
+	0x2008248,0x700020f,0x90043cf,0x7800151,0x7800192,0x9610452,0xe0003d1,0x7801512,
+	0xaa0c012,0x649d612,0x649d712,0xf000440,0xf0103c0,0x970844f,0x2011491,0x5803451,
+	0x4001208,0x700020f,0x90c23cf,0x97c244f,0x60c3911,0xcc00000,0x0000000,0xc065680,
+	0x80c2301,0xaa20005,0xae18185,0xa610045,0xc0001c0,0x0000000,0xc7ffe40,0xc780000,
+	0xc780000,0xcc00000,0x0000000,0xc065380,0x80c2301,0xa608019,0xcc00000,0x4001205,
+	0x7801749,0x6800055,0x780090f,0x34153d5,0xb403209,0x2410209,0x2010550,0x78017c8,
+	0xb610088,0x0000000,0x2010250,0x4001410,0x6800009,0x780020f,0x780150b,0xaa0c00b,
+	0x680400b,0x680600b,0x5403289,0x200a2ca,0x400128a,0x700028c,0xa21034c,0x400528a,
+	0x700028c,0xa80540c,0x4001249,0xb8f73c9,0xcc00000,0x0000000,0x440528a,0x700028c,
+	0x9c0c0cc,0x9c0c08c,0x9c0c00c,0x740028c,0x440128a,0x700028c,0x481f30c,0x7801508,
+	0xaa0c008,0x68000c8,0x6800108,0x680004a,0x340a30a,0x6bfffcc,0x300a30a,0x7000209,
+	0x2809289,0xcc00000,0x7400209,0x7c020d1,0x7801750,0x6bfffd2,0x7801513,0xaa0c013,
+	0x6804013,0x6806013,0xc0643c0,0x80c2301,0xaa400c5,0xae38145,0xa610005,0xc0003c0,
+	0x0000000,0xc7ffe40,0xa610045,0xc000980,0x0000000,0xc7ffd40,0xa610145,0xc000b40,
+	0x0000000,0xc7ffc40,0xc780000,0xc780000,0xcc00000,0x0000000,0xc063ec0,0x80c2301,
+	0xaa5c019,0x4001205,0x6800055,0x7800909,0x3415255,0xb403210,0x2410210,0x2010550,
+	0x4000510,0x78020c8,0x7801b09,0xb40c248,0x700020a,0xbe1a00a,0x540328a,0x200a4ca,
+	0x400628a,0x700028a,0xa80350a,0xc7ffe00,0x4001208,0xc000800,0x0000000,0xcc00000,
+	0x0000000,0xc063800,0x80c2301,0xaaf0019,0x4001205,0x6800055,0x7800909,0x3415255,
+	0x2010210,0xb8e7550,0xc7ff980,0x2410550,0xc063540,0x80c2301,0xaa34019,0x4001205,
+	0x2012212,0xa628012,0x78020c8,0x7801b09,0xb407248,0x700020a,0xbe0e00a,0xc7fff40,
+	0x4001208,0xc000100,0x0000000,0xcc00000,0x0000000,0x7801b0b,0x700020f,0xb00644b,
+	0x440130b,0x700030c,0x74002cc,0xc7fff00,0x44012cb,0x740044f,0x4001451,0x4000251,
+	0x4000291,0x78020cb,0x200b58b,0x40012cb,0xac072ca,0x700028c,0xa8fe3cc,0x400128a,
+	0x740024c,0xc7ffec0,0x4001249,0x7801b09,0x4001249,0xcc00000,0x7c01b09,0xc780000,
+	0x0000000,0x780094f,0x460040f,0xc480900,0x780098f,0x6800050,0x34173d0,0x5801597,
+	0x7801bd5,0x7801c0f,0x961054f,0x7801c53,0x7801854,0xb4054d4,0x240f513,0xb80758f,
+	0xc780180,0x20155d5,0x240f4d4,0xb00358f,0xc780080,0x24155d5,0x40004d4,0x780114f,
+	0xaa1400f,0x58103d5,0x7c01bd5,0x7c01c0f,0x7c01c53,0x7801794,0xaa100d4,0x20124d5,
+	0xc780bc0,0x4000452,0x780188f,0x78018d0,0x96103d0,0xc780a80,0x20113d2,0x780090f,
+	0x6800050,0x34173d0,0x780118f,0xa61c14f,0x680000f,0x7c01c8f,0x7c01ccf,0x7c01d0f,
+	0x7c01ecf,0x7c01f0f,0x7801c96,0x7801cd5,0x7801d0f,0x961054f,0x7801754,0xb403594,
+	0x0000000,0x20155d5,0x780094f,0x460240f,0xc5000c0,0xc780000,0x0000000,0x780118f,
+	0xa61014f,0x6800012,0xc780280,0x6800011,0x2013515,0x54014d3,0x780114f,0xa60c00f,
+	0x0000000,0x44014d3,0x4000493,0x4000453,0x7c01cd5,0x58103d5,0x7c01d0f,0xb803452,
+	0x4000412,0x4000411,0x7c01d50,0x58103d0,0x7c01d8f,0x7c01dd2,0x58103d2,0x7c01e0f,
+	0x7c01e51,0x58103d1,0x7c01e8f,0x7801754,0xcc00000,0x7c01c94,0x7801148,0xaa18008,
+	0x6808008,0x78009c9,0x2009209,0x7801b08,0xb403248,0xcc00000,0x0000000,0x6808009,
+	0x7801b0f,0x780150b,0xaa0c00b,0x680400b,0x680600b,0x700024a,0x400040a,0x540328a,
+	0x200a2ca,0x400628a,0x700028a,0x780174c,0xb00530a,0x680004c,0x7800912,0x340c48c,
+	0x240a30a,0x4000349,0x400134d,0xb4123cd,0x700034e,0x400044e,0x540338e,0x200e2ce,
+	0x400638e,0x700038e,0x780174c,0xb00530e,0x680004c,0x7800912,0x340c48c,0x240e30e,
+	0xb0f238a,0x0000000,0x400028e,0xc7ffbc0,0x4000411,0xc000100,0x780150f,0xcc00000,
+	0x0000000,0xaa0c00f,0x680400b,0x680600b,0x5403390,0x200e2ce,0x400138e,0x700038c,
+	0xbe0804c,0xa24830c,0x9c0c0cc,0x9c0c08c,0x9c0c00c,0x740038c,0x440138e,0x700038c,
+	0x481f30c,0xaa0c00f,0x68000c8,0x6800108,0x680004a,0x340a30a,0x6bfffcc,0x300a30a,
+	0x7000209,0x2809289,0x7400209,0xcc00000,0x0000000,0x6809008,0x78001c9,0x2009209,
+	0x7801b88,0x2412248,0xb60c052,0xcc00000,0x0000000,0x6809009,0x7801b8f,0x780150b,
+	0xaa0c00b,0x680400b,0x680600b,0x700024a,0x400040a,0x540328a,0x200a2ca,0x400128a,
+	0x700028c,0x91424cc,0xa60c053,0xa21804c,0x0000000,0x4001249,0xb8f53c9,0xcc00000,
+	0x0000000,0x910130c,0xaa0c00c,0x400128a,0x400228a,0x400130a,0x700028a,0x700030c,
+	0x961028c,0x4000349,0x400134d,0xb4173cd,0x700034e,0x400044e,0x540338e,0x200e2ce,
+	0x400138e,0x700038c,0x91424cc,0xa6dc053,0xbed804c,0x910130c,0xaa0c00c,0x400138e,
+	0x400238e,0x400130e,0x700038e,0x700030c,0x961038c,0xb0ed38a,0x0000000,0x400028e,
+	0xc7ffa80,0x4000411,0xc000100,0x780150f,0xc7ff180,0x4401492,0x6800011,0xaa0c00f,
+	0x680400b,0x680600b,0x5403390,0x200e2ce,0x400138e,0x700038d,0x400030d,0x980d2cd,
+	0x9c0d28d,0x9c0d0cd,0x9c0d08d,0x9c0d00d,0x740038d,0xa21c30c,0x980d00d,0x740038d,
+	0x6800051,0x440138e,0x700038c,0x481f30c,0x94c240f,0x780070b,0x74002d0,0x40012cb,
+	0x68006cc,0xb80330b,0x0000000,0x68002cb,0x78006cc,0xa40c30b,0x0000000,0x649c70c,
+	0xaa0c00c,0xc060340,0x0000000,0x649c00c,0xaa0c00c,0xc7ffe80,0x0000000,0xc060dc0,
+	0x0000000,0xcc00000,0x7c0070b,0x680000b,0x400128a,0xfc01200,0xaa20048,0x680004c,
+	0x6494208,0x9084208,0x340c20c,0x540830c,0xc780340,0x609410c,0xc05e0c0,0x80c2301,
+	0xc05e140,0x0000000,0x4000305,0xc05df80,0x80c2301,0xc05e000,0x0000000,0x950914c,
+	0x6094105,0xfc01200,0xaa24048,0x680004c,0x6494208,0x9104208,0x340c20c,0x540830c,
+	0x609410c,0xc780600,0x609410c,0xc05db80,0x80c2301,0xc05dc00,0x0000000,0x4000305,
+	0xc05da40,0x80c2301,0xc05dac0,0x0000000,0x950914c,0x6094105,0xc05d8c0,0x80c2301,
+	0xc05d940,0x0000000,0x4000305,0xc05d780,0x80c2301,0xc05d800,0x0000000,0x950914c,
+	0x6094105,0x40012cb,0xb8cb28b,0xcc00000,0x0000000,0x0000000,0x0000000
+};
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264slice_linux_single.h b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264slice_linux_single.h
new file mode 100644
index 000000000000..33367397a545
--- /dev/null
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264slice_linux_single.h
@@ -0,0 +1,269 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x7801651,0x6840009,0x6098409,0x8098400,0x8002a09,0x8002b17,0x6830009,0x6032609,
+	0x8032261,0x8032101,0x7800f88,0x64e0e09,0x9401248,0x60e0e09,0x7800a49,0x4401249,
+	0x7c025c9,0x680006c,0x7800d49,0xaa10009,0x6800009,0x687ffc9,0x680002c,0x7c02889,
+	0x6800809,0x7801948,0x9505248,0x7801988,0x9605248,0x7800b08,0x96a2248,0x7801908,
+	0x96e1248,0x60c2109,0x7800b48,0xaa10008,0x5401208,0x7800ac9,0x9441209,0x7801009,
+	0x9401209,0x7c02a48,0x6800009,0x7c02a89,0x7c02989,0x7801689,0x7c02ac9,0xaa10011,
+	0x6800016,0xc001180,0x0000000,0x6800008,0x60c2108,0xc0019c0,0x0000000,0x80c0001,
+	0x8030504,0xc7ef2c0,0x0400000,0x6bfd98a,0x603040a,0x0400000,0x64c430a,0x580128a,
+	0xbaf980a,0x64c0008,0xbe40048,0x0000000,0x0800000,0x6bffe8a,0x603040a,0xcc00000,
+	0x0400000,0xc780000,0xc780000,0x83f2001,0xc780000,0x0000000,0xbef5008,0x0000000,
+	0xc78bac0,0x680000a,0xaa4c048,0xbeed208,0x683ffcb,0xaad800b,0x44012cb,0x64e0f08,
+	0x9003248,0x9063288,0xb40324a,0x240a24a,0x400828a,0xba180ca,0xaedc0ca,0x80c3e00,
+	0x64c3f08,0x9002208,0xa6cc0c8,0xcb80024,0x0000000,0x680000a,0x7802088,0xaa18008,
+	0xaa0c011,0x0000000,0x680004a,0xc78b480,0x0000000,0x7800b08,0xaa14388,0x78016c8,
+	0xaa08088,0xc784780,0xc787d40,0xaa08088,0xc7830c0,0xc786ec0,0x0000000,0x649c908,
+	0x4001208,0x609c908,0x6800015,0x7c02115,0x7c02155,0x7c02195,0x7c021d5,0x7c02215,
+	0x6803fc8,0x7c02288,0x6800008,0x7c02348,0x7c023c8,0x7c02408,0x7c02448,0x7c02488,
+	0x78025c8,0x4001208,0x7c02608,0x6800048,0x60e0c08,0x7c027c8,0x7c02648,0x6800008,
+	0x7c02808,0x68003c8,0x7c02688,0x6805c08,0x60c2108,0x80c2170,0x6800088,0x7c02748,
+	0xc015a80,0x0000000,0xcc00000,0x0000000,0x780280b,0xa6fc00b,0x0000000,0x6a0002b,
+	0x6c0076b,0x690002a,0x6c007aa,0xc015c40,0x0000000,0xc016140,0x0000000,0x6900009,
+	0x6c000c9,0x78016c8,0x5c0c289,0x68198e4,0xaa18088,0x6800009,0x6816264,0xaa0c148,
+	0x6800049,0x6800089,0x7c02589,0x7801788,0x94c2248,0x60c0409,0x7c026ca,0x6800008,
+	0x7c02788,0x7800a8b,0x7800ac8,0xa630008,0x780178a,0xaa280ca,0x54012cb,0x58012cb,
+	0x6490708,0x9808088,0x98080c8,0x6090708,0x6495108,0x98083c8,0x6095108,0x7c0270b,
+	0x7800b08,0x944220a,0x7c00b08,0xa640388,0x68000ca,0x6495108,0x940420a,0x9808648,
+	0x6095108,0x6490708,0x9808448,0x6090708,0x6498e08,0x9808788,0x6098e08,0x78016c8,
+	0xaa0c088,0x68188e4,0x6814a64,0x7800d48,0xa610008,0x7801a48,0xc780b00,0x60c0a08,
+	0xfc07200,0x80c2940,0x7801a48,0x9808188,0x98083c8,0x60c0a08,0x9c083c8,0x9808388,
+	0xc00b780,0x60c0a08,0x7802589,0x64c0a08,0x91c2208,0xa6f8008,0x780289b,0x6c0001b,
+	0x680001c,0x6c0001c,0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,0xa628009,
+	0x7800b08,0x680030a,0xaa18388,0x7c0284a,0x680018a,0x7c0284a,0xcc00000,0x60c0715,
+	0xcc00000,0x680030a,0xaa18388,0x7c0284a,0x680018a,0x7c0284a,0xcc00000,0x60c0715,
+	0xcc00000,0x0000000,0xc00af00,0x80c0600,0x780289b,0x6c0001b,0x680001c,0x6c0001c,
+	0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,0x7802589,0xa628009,0x7800b08,
+	0x680030a,0xaa18388,0x7c0284a,0x680018a,0x7c0284a,0xcc00000,0x60c0715,0xcc00000,
+	0x680030a,0xaa18388,0x7c0284a,0x680018a,0x7c0284a,0xcc00000,0x60c0715,0xcc00000,
+	0x0000000,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0xa224055,0x78028c8,
+	0x7c02908,0x4000817,0x4000858,0x4000899,0x40008da,0xc781400,0x60c0715,0x683ffc8,
+	0x4401208,0xaa0c008,0x780280b,0xa6f400b,0x68000cb,0x7802948,0x95102c8,0x7802108,
+	0x97082c8,0x6031e0b,0xaa08008,0xc780b00,0x80c0700,0x7802889,0x6c00009,0x60c0209,
+	0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,
+	0x60c0209,0x6bfffca,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x7802909,0x961024a,
+	0x60c2709,0x80c0701,0x7802889,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,
+	0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x60c0317,0x60c0318,
+	0x60c0319,0x60c031a,0x78028cb,0x96102ca,0x60c270b,0xc780580,0x60c0715,0x64c270a,
+	0x921028a,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x7802909,0x961024a,0x60c2709,
+	0x80c0701,0x64c270a,0x921028a,0x60c0317,0x60c0318,0x60c0319,0x60c031a,0x78028c9,
+	0x961024a,0x60c2709,0x60c0715,0x6431e0a,0xbefc04a,0x7802a48,0x4c30208,0xc780b40,
+	0x60c2508,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0x60c0715,0x921029f,
+	0x7802108,0xa638008,0x7802889,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,
+	0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6bfffca,0x60c0317,
+	0x60c0318,0x60c0319,0x60c031a,0x78028c9,0x961024a,0x60c2709,0x7802a48,0x4c30208,
+	0x60c2508,0x683ffca,0x780280b,0xaa0c00b,0xa6f800a,0x440128a,0x68000cb,0x780294a,
+	0x95102ca,0x780210a,0x97082ca,0x6031e0b,0x7802a8c,0x7802688,0x7c029c8,0x64c2308,
+	0x9304248,0xa6f8009,0x90a1248,0x9024208,0x9521209,0xaa0c00c,0x7c02688,0xc781640,
+	0xaa6002c,0xa65c008,0xa62406c,0x64c200a,0x91942ca,0xba4c20b,0x44022cb,0x959428b,
+	0x60c060a,0xc7803c0,0x68000ac,0xa6240ac,0x64c060a,0x91832ca,0xae2814b,0x40022cb,
+	0x958328b,0x60c060a,0xc780180,0x68000ec,0x900f2ca,0xae0c04b,0xc780080,0x680006c,
+	0xaa64248,0x60c2508,0xaa64288,0xaa58348,0xaa1c049,0xaa58388,0xa60c008,0xc7801c0,
+	0x0000000,0x80c2605,0x80c2606,0x80c2602,0x80c260f,0x80c2603,0x7802749,0xaa100c9,
+	0x680008a,0xc782940,0x7c0274a,0x780280c,0xa6fc00c,0x0000000,0x7c02789,0xc7827c0,
+	0x7c0274a,0x80c2602,0x80c260f,0x80c2603,0x7802749,0xaa50089,0x68000ca,0x7802109,
+	0xaa0c009,0xc782540,0x7c0274a,0xaa08725,0xbef4055,0x683ffcc,0x78027c9,0x64e0c0a,
+	0x901028a,0xb804289,0xaa0c00c,0xc7ffec0,0x440130c,0x6800089,0x68000ca,0x680180c,
+	0x60c210c,0x683ffcd,0xaa2c00d,0x64e110c,0x910130c,0xa6f400c,0x440134d,0x64e110c,
+	0x910130c,0xa6e400c,0x780280c,0xa6dc00c,0x0000000,0x7c02789,0xc781e00,0x7c0274a,
+	0x6800008,0x7c02688,0x60c2508,0x6431e08,0xbefc048,0x68fdfc8,0x6fcffc8,0x64e0407,
+	0x2807207,0xc7ff140,0x60e0408,0x64c031b,0x64c031c,0x64c271f,0xa228055,0x78028c8,
+	0x7c02908,0x4000817,0x4000858,0x60c0715,0x7802a48,0x4c30208,0xc781500,0x60c2508,
+	0x7802108,0xa658008,0x80c0700,0x7802889,0x6c00009,0x60c0209,0x80c0200,0x6bfffca,
+	0x60c0320,0x60c0321,0x780290b,0x96102ca,0x60c270b,0x80c0701,0x60c0209,0x80c0200,
+	0x60c0317,0x60c0318,0x78028cb,0x96102ca,0x60c270b,0xc780480,0x60c0715,0x64c270a,
+	0x921028a,0x60c0320,0x60c0321,0x7802909,0x961024a,0x60c2709,0x80c0701,0x64c270a,
+	0x921028a,0x60c0317,0x60c0318,0x78028c9,0x961024a,0x60c2709,0x60c0715,0x7802a48,
+	0x4c30208,0x60c2508,0x780280b,0xa6fc00b,0x68000cb,0x780294a,0x95102ca,0x780210a,
+	0x97082ca,0xc780840,0x6031e0b,0x64c031b,0x64c031c,0x64c271f,0x60c0715,0x921029f,
+	0x7802108,0xa618008,0x7802889,0x6c00009,0x60c0209,0x80c0200,0x6bfffca,0x60c0317,
+	0x60c0318,0x78028c9,0x961024a,0x60c2709,0x7802a48,0x4c30208,0x60c2508,0x683ffca,
+	0x440128a,0xaa0c00a,0x780280b,0xa6f400b,0x68000cb,0x780294a,0x95102ca,0x780210a,
+	0x97082ca,0x6031e0b,0x7802688,0x7c029c8,0x64c2308,0x9304248,0xa6f8009,0x9024208,
+	0x7c02688,0xaa10288,0x60c2508,0x80c2602,0x80c260f,0x80c2603,0x4c00208,0x9808208,
+	0x60c2108,0x7802348,0xaa14008,0x6a01009,0xaa0c048,0x6a22009,0x6a40009,0x6431e0a,
+	0xbefc04a,0x6c00109,0x7800b0a,0xa66838a,0xa264055,0x78029cb,0xaa1c00b,0x780278b,
+	0x0800000,0x78027ca,0x400128a,0x7c027ca,0x0400000,0xb61408b,0x0000000,0x80c2170,
+	0xc780880,0x80c260e,0x683ffcb,0x44012cb,0xaa0c00b,0x780280a,0xa6f400a,0x78027ca,
+	0x440128a,0xc008900,0x7c027ca,0xc7805c0,0x8030580,0x780280a,0xa6fc00a,0x0000000,
+	0x60e0509,0x7802789,0x680180a,0x9502289,0x60c210a,0x80c260e,0x6800089,0x7c02388,
+	0xba0c088,0x4001208,0x6800008,0x7c02348,0x7802108,0x7c02248,0x78029c8,0x7c02a08,
+	0x7c02809,0x8030580,0x7802948,0xaa14725,0x4001208,0x7802149,0xa20c049,0x0000000,
+	0x7c02948,0x683ffc9,0x64c2308,0x9304208,0xaa2c008,0x0000000,0x80c3e01,0x64c3f08,
+	0x93e1208,0xaae4008,0xb6e0049,0x4401249,0x6bfffc9,0xc7f5b80,0x7c02ac9,0x64c2b08,
+	0x60c2b08,0x780228e,0xba13fce,0x6800009,0xc7810c0,0x7c02289,0x6808009,0xba1070e,
+	0x400028e,0x441c28a,0x680c009,0x54032ca,0x200b28b,0x20092c9,0x740025f,0x4001249,
+	0x921031b,0x740024c,0x4001249,0x740025b,0x4001249,0x740025c,0x4001249,0x921031c,
+	0x740024c,0x4001249,0x740025d,0x4001249,0x921031d,0x740024c,0x4001249,0x740025e,
+	0x4001249,0x921031e,0x740024c,0x7800a49,0xac07949,0x780210b,0xaa38725,0x400030b,
+	0x780214b,0xc7802c0,0x942f2cc,0xa61000b,0xaa14725,0x780214b,0xa20c04b,0xa6146ca,
+	0x40012ce,0xb60c70e,0x680000b,0x680070b,0x7c0228b,0xb012949,0xaa0800b,0xa64070b,
+	0x78022cb,0xa20c04b,0x6a0800c,0x6a0c00c,0x649ce0b,0x200a2ea,0x780230d,0x54092cd,
+	0x200b28b,0x603510b,0x6803f0b,0x603520b,0x603500c,0xc0065c0,0x0000000,0x7800b08,
+	0xaa6c388,0x7802108,0x4001208,0x7c02108,0x7802189,0x4001249,0x7c02189,0x7800a49,
+	0xb82c248,0x6800008,0x7c02108,0x7802149,0x4001249,0x780270a,0xb404289,0x7c02149,
+	0xc780900,0x0000000,0x680004a,0xc001ec0,0x0000000,0xc065f80,0x0000000,0x8032100,
+	0x809ca01,0xc7f40c0,0x6802b03,0x7802149,0xbe10049,0x4001209,0xc780580,0x7c02148,
+	0x4401209,0x7c02148,0x7802108,0x4001208,0x7c02108,0x7802189,0x4001249,0x7c02189,
+	0x7800a49,0xb80b248,0x6800008,0x7c02108,0x7802149,0x4002249,0x780270a,0xb805289,
+	0x7c02149,0x6800008,0xc7ff800,0x7c02188,0x64c3b08,0x920c208,0xb20ca08,0x680204b,
+	0x7c02a8b,0x7802108,0x9508548,0x780214a,0x940854a,0x7800a4a,0xb01494a,0x6808009,
+	0xa628725,0xc780a40,0x0000000,0x780214b,0xa20c04b,0x50012cb,0x4001208,0x5401208,
+	0xc780a40,0x940120b,0x4001208,0xa418288,0x780228a,0x7802148,0xa27c048,0x400220a,
+	0xc780380,0x6800008,0xaa7c725,0x780214b,0xa2bc04b,0x40012c8,0xa4ed28b,0xc780680,
+	0x6800008,0xaa14725,0x6800008,0x7802148,0x5001208,0x4801208,0xb60c70a,0x6808009,
+	0x680c009,0xc780400,0x0000000,0xa628048,0x400220a,0x7802148,0xbe1c048,0x400220a,
+	0xc7ffd80,0x6800048,0xaabc008,0x780228a,0x400120a,0xba10708,0xb6ace08,0x680c009,
+	0x441c208,0x5403288,0x200a20a,0x2009289,0x700024a,0x7c028ca,0x4001249,0x700024a,
+	0x4001249,0x7000257,0x96105ca,0x4001249,0x7000258,0x4001249,0x700024a,0x961060a,
+	0x4001249,0x7000259,0x4001249,0x700024a,0x961064a,0x4001249,0x700025a,0x4001249,
+	0x700024a,0x961068a,0x6bfda8a,0x603040a,0xcc00000,0x0400000,0x7802808,0xa6fc008,
+	0x0000000,0x64c0008,0xa2f0048,0x64c3d08,0x580a208,0xbef80c8,0x6a00008,0x60c3d08,
+	0x64c3d08,0x580a208,0xbef80c8,0x0000000,0xcc00000,0x0000000,0x7801648,0xaa18008,
+	0x78016c8,0xa614088,0x0000000,0x8098002,0x80980f0,0xc780a80,0x80c2400,0x64c2208,
+	0x9305248,0x93a22c8,0x9205288,0x92a2308,0x540230c,0x2c0b30b,0x9105388,0x91a2308,
+	0x540430c,0x2c0b30b,0x90053c8,0x90a2308,0x540630c,0x2c0b30b,0x78016c8,0xa63c188,
+	0x80c2408,0x64c2208,0x480330b,0xaa340cc,0x0000000,0x480f2cb,0x9305388,0x93a2308,
+	0x540430c,0x2c0b30b,0x92053c8,0x92a2308,0x540630c,0x2c0b30b,0xc780280,0x0000000,
+	0x48032cb,0x9305288,0x93a2308,0x540230c,0x2c0b30b,0xc7800c0,0x0000000,0xc780600,
+	0x5418249,0x609b309,0x649b309,0x541828a,0x609b30a,0x649b30a,0x541838e,0x609b30e,
+	0x649b30e,0x54183cf,0x609b30f,0x649b30f,0x8098002,0x6bfffcc,0x541030c,0x6bfffcd,
+	0x2c0d30d,0x609820d,0x480330b,0xa6540cc,0x0000000,0xc7800c0,0x0000000,0xc7806c0,
+	0x5410309,0x581030c,0x5410349,0x2c0d30d,0x609810d,0x540430b,0x609800c,0xa813289,
+	0x0000000,0x541030a,0x581030c,0x541034a,0x2c0d30d,0x609820d,0xc780300,0x0000000,
+	0x5410309,0x581030c,0x541034a,0x2c0d30d,0x609810d,0x540430b,0x4c0430c,0x609800c,
+	0xc7800c0,0x0000000,0xc780380,0x480330b,0x541830c,0x2c0c24c,0x483034b,0x541434d,
+	0x2c0d38d,0xa80734c,0x0000000,0x541030e,0x581030c,0x541034f,0x2c0d30d,0x609820d,
+	0x7800b0c,0xa60c38c,0x6800725,0x5801965,0x6bfffcc,0x680001b,0x7802897,0x6800018,
+	0x680001c,0x6800019,0x680001d,0x680001a,0x680001e,0x4000817,0x4000858,0x4000899,
+	0x40008da,0x680800b,0x680070f,0x74002cc,0x40012cb,0x74002db,0x40012cb,0x74002d7,
+	0x40012cb,0x74002d8,0x40012cb,0x74002dc,0x40012cb,0x74002d9,0x40012cb,0x74002dd,
+	0x40012cb,0x74002da,0x40012cb,0x74002de,0xd07fbcf,0x40012cb,0x7c028cc,0x7c0290c,
+	0x961030c,0x80c0700,0x60c270c,0x96105db,0x60c0217,0x961061c,0x780258f,0xaa1800f,
+	0x60c0218,0x961065d,0x60c0219,0x961069e,0x60c021a,0x80c0701,0x60c270c,0x60c0217,
+	0xaa1000f,0x60c0218,0x60c0219,0x60c021a,0x7800a4f,0xb00894f,0x649ce09,0x200826a,
+	0x6035108,0x6803f08,0x6035208,0x6a08008,0x6035008,0x7802108,0xa60c008,0x6803fc8,
+	0x7c02288,0x6800008,0x7c02948,0xac0b94f,0x7802288,0xb613fc8,0xba0c708,0x441c208,
+	0x7c02288,0x6435008,0x580f208,0xbef8048,0xcc00000,0x0000000,0x6435008,0x580f208,
+	0xbef8048,0x0000000,0x6435308,0x900c208,0xa6f8008,0x0000000,0x649ce09,0x200826a,
+	0x6035108,0x6803f08,0x6035208,0x6b0c008,0x6035008,0x5401225,0xac0520f,0x6800088,
+	0x7c022c8,0xc7ff8c0,0x7c02308,0x681000a,0x20092aa,0x649ce0a,0x2009289,0x54012a5,
+	0x200a94a,0x680008b,0x7c022cb,0x68000cb,0x6435008,0x580f208,0xbef8048,0x6803f08,
+	0x6035109,0x6035208,0x6a08008,0x6035008,0xac0328f,0xc7ff3c0,0x7c0230b,0x6808008,
+	0x2009209,0x200a94a,0xc7ffc80,0x40012cb,0x400134d,0x480f34d,0x7c0230d,0x980c38c,
+	0x78022cd,0x54092cd,0x200ba8b,0x649ce0a,0x200b28b,0x400134d,0x480f34d,0x7c022cd,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,
+	0x603510b,0x6803f0b,0x603520b,0xc7fed80,0x603500c,0x780234c,0xa60c00c,0x440120c,
+	0x6800088,0xaa14008,0x6a01009,0xaa0c048,0x6a22009,0x6a40009,0x6c00109,0x60e0509,
+	0x7c02388,0x7802789,0x680180a,0x9502289,0x60c210a,0x80c260e,0x680004a,0x7c0298a,
+	0x7802109,0x7c02249,0x78029c9,0x7c02a09,0x6800089,0xcc00000,0x7c02809,0xcc00000,
+	0x0400000,0x64e1226,0x91e19a6,0xbef0066,0x7802826,0xaa480a6,0xc782c40,0x6800027,
+	0x6c04027,0x78029a9,0x97c19e9,0x60e1227,0x7802167,0xa210067,0x40005ab,0x6900016,
+	0x2016ad6,0x649ce26,0x2016996,0x6800026,0x7c027a6,0xc7825c0,0x6800126,0x78027a7,
+	0xaa080a7,0xc781340,0x7802628,0xaeb00a8,0x78029a9,0xaa50725,0x7802266,0x54069a6,
+	0x7802168,0x5801a28,0xbe10068,0x40009eb,0x6900027,0x2027ae7,0x649ce28,0x2027a27,
+	0x20269e6,0x44409a6,0x60e1326,0xaa48029,0x40c05a6,0x6805c28,0x60c2128,0xc780380,
+	0x4040596,0x54059a6,0x7802168,0xbe10068,0x40009eb,0x6900027,0x2027ae7,0x649ce28,
+	0x2027a27,0x20269e6,0x44209a6,0x60e1326,0x40605a6,0x78023a8,0xaa14028,0x6a2c227,
+	0xaa0c068,0x6a2c027,0x6a2c127,0xaa10029,0x6c04027,0x68003e6,0x95069e6,0x97c19e9,
+	0x60e1227,0x6800026,0x7c027a6,0x6800126,0xc781dc0,0x7c02826,0x78023e7,0x7802428,
+	0x96109e8,0x7802868,0x2427a27,0x2427a27,0x78029a9,0xaa0c029,0x2427a27,0x2427a27,
+	0x78026e6,0x54099a6,0x20269e6,0x54039e6,0x649ce28,0x2027a27,0x60e1327,0x78023a8,
+	0xaa34028,0x6a44227,0xaa2c068,0x6a44027,0xc780240,0x6a44127,0xa64c0e7,0x78027e6,
+	0x64e0c28,0x9010a28,0xb8e4a26,0xcc00000,0x0400000,0xaa10029,0x6c0c027,0x68005e6,
+	0x95069e6,0x97c19e9,0x60e1227,0x6800016,0x6800026,0x7c027a6,0x6800166,0xc781300,
+	0x7c02826,0x7802667,0xaa1c027,0x44019e7,0x7c02667,0x7802627,0x44019e7,0xc780f80,
+	0x7c02627,0x7802467,0x7c024e7,0x78024a6,0x7c02526,0x96109e6,0x78026e6,0x54099a6,
+	0x20269e6,0x7802868,0x2027a27,0x7c02467,0x92109e7,0x7c024a7,0x54039e6,0x649ce28,
+	0x2027a27,0x60e1327,0x78023a8,0xaa14028,0x6a16227,0xaa0c068,0x6a16027,0x6a16127,
+	0x7802a28,0xaa30028,0x78027e6,0x64e0c28,0x9010a28,0xb806a26,0x78024e8,0x7c02468,
+	0x7802528,0xc7fd780,0x7c024a8,0x40019a6,0x7c027e6,0x7c02567,0x6c00027,0x60e1227,
+	0x6800066,0xc780680,0x7c02826,0xba58126,0x78029a7,0xa608027,0xc7ff2c0,0x78027e7,
+	0x40019e7,0x7c027e7,0xaa0c126,0x6800027,0x80c2170,0xc780300,0x7c029a7,0xa6d0066,
+	0x7802627,0xaa30027,0x44019e7,0xb228067,0x7c02627,0x7802766,0xaa0c0e6,0x0000000,
+	0x80c2170,0x6800026,0x7c02826,0xcc00000,0x0400000,0xc780540,0x0000000,0xa610026,
+	0x40005ab,0x6900016,0x2016ad6,0x649ce28,0xc780b40,0x2016a16,0xaa0c725,0x90a8996,
+	0x90c7996,0x7800a68,0xb827a26,0xa8f4a26,0x91c1996,0xa62c026,0x40005ab,0x6900016,
+	0xc780200,0x2016ad6,0x78023e7,0x7802428,0xaa74016,0x96109e8,0xc7ffc00,0x0000000,
+	0x649ce28,0x2016a16,0x78026e6,0x54099a6,0x7802868,0x2427a27,0x20269e6,0x54039e6,
+	0x649ce26,0x20279a7,0x60e1327,0x7802566,0x90049e6,0xaa14027,0x6a14226,0xaa0c127,
+	0x6a14026,0x6a14126,0x6c08026,0x60e0d16,0xaa0c725,0x4020596,0x4020596,0xc7ff300,
+	0x60e1226,0x78026e6,0x54099a6,0x20269e6,0x7802868,0x2027a27,0x7c023e7,0x92109e7,
+	0x7c02427,0x54039e6,0x649ce26,0x20279a7,0x60e1327,0x7802566,0xa618016,0x9c261e6,
+	0x60e1226,0x68000e6,0xc7fee40,0x7c02826,0x6c08026,0x60e0d16,0xaae8725,0x4020596,
+	0xc7ffe00,0x4020596,0x64e120a,0x91e128a,0xbef804a,0x64e000a,0x64e030b,0x64e0e0c,
+	0x64e0c0d,0x680100e,0x609840e,0x8098400,0x680020e,0xd00000e,0x0000000,0x60e000a,
+	0x60e030b,0x60e0e0c,0xcc00000,0x60e0c0d,0xc000d00,0x0000000,0x681010a,0x6c3474a,
+	0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,
+	0x649ce0b,0x200a2eb,0x609440a,0x690000a,0x200aaca,0x649ce0b,0x200a2ca,0x609450a,
+	0xcc00000,0x0000000,0xc000b40,0x0000000,0x8095007,0x8095000,0x6800049,0x7800a4b,
+	0x68002ca,0xb00328b,0x0000000,0x6800009,0x6498e0b,0x97c12c9,0x6098e0b,0x6497f09,
+	0x68000cb,0x970224b,0x6097f09,0x6820889,0x6c00209,0x6095109,0x7800a4b,0xb20c2cb,
+	0x680040b,0x6800c0b,0x6495109,0x970624b,0x9809649,0x6095109,0xcc00000,0x0000000,
+	0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,
+	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,
+	0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,
+	0x440128a,0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x6bff7c0,0x6032400,0x0400000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xcc00000,0x0400000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xcc00000,0x0400000,
+	0xcc00000,0x0400000,0xc780200,0x6431e07,0xcc00000,0x0400000,0xcc00000,0x0400000,
+	0xcc00000,0x0400000,0x9027207,0xa668048,0x68fdfca,0x6fcffca,0x64e0408,0x2808288,
+	0x9110287,0x64c0909,0xac0924a,0xb80324a,0xc7801c0,0x9808688,0x400128a,0x98083c8,
+	0xa40324a,0x440128a,0x98086c8,0xaa1000a,0x9308287,0xa60c00a,0x400128a,0x9808388,
+	0xb80324a,0x0000000,0x98081c8,0xc780080,0x60e0408,0x8031e00,0xcc00000,0x0400000,
+	0x0000000,0x0000000
+};
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.c b/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.c
index 2da32dccaad7..06dfd0e02023 100755
--- a/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.c
@@ -24,15 +24,31 @@
 #define MicroCode vh264_4k2k_mc
 #include "h264c_linux.h"
 
+#undef MicroCode
+#define MicroCode vh264_4k2k_mc_single
+#include "h264c_linux_single.h"
+
 #undef MicroCode
 #define MicroCode vh264_4k2k_header_mc
 #include "h264header_linux.h"
 
+#undef MicroCode
+#define MicroCode vh264_4k2k_header_mc_single
+#include "h264header_linux_single.h"
+
 #undef MicroCode
 #define MicroCode vh264_4k2k_mmco_mc
 #include "h264mmc_linux.h"
 
+#undef MicroCode
+#define MicroCode vh264_4k2k_mmco_mc_single
+#include "h264mmc_linux_single.h"
+
 #undef MicroCode
 #define MicroCode vh264_4k2k_slice_mc
 #include "h264slice_linux.h"
 
+#undef MicroCode
+#define MicroCode vh264_4k2k_slice_mc_single
+#include "h264slice_linux_single.h"
+
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.h b/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.h
index c7fa365e81ea..3df36f0d8029 100755
--- a/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.h
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k_mc.h
@@ -27,4 +27,9 @@ extern const u32 vh264_4k2k_header_mc[0x400];
 extern const u32 vh264_4k2k_mmco_mc[0x800];
 extern const u32 vh264_4k2k_slice_mc[0x1000];
 
+extern const u32 vh264_4k2k_mc_single[0x1000];
+extern const u32 vh264_4k2k_header_mc_single[0x400];
+extern const u32 vh264_4k2k_mmco_mc_single[0x800];
+extern const u32 vh264_4k2k_slice_mc_single[0x1000];
+
 #endif
diff --git a/drivers/amlogic/amports/m8/vdec_clk.c b/drivers/amlogic/amports/m8/vdec_clk.c
index 26fd8303baab..21fa661568a5 100644
--- a/drivers/amlogic/amports/m8/vdec_clk.c
+++ b/drivers/amlogic/amports/m8/vdec_clk.c
@@ -58,6 +58,7 @@ HHI_VDEC_CLK_CNTL
 #define VDEC1_255M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (2 << 9) | (1), 0, 16)
 #define VDEC2_255M() WRITE_MPEG_REG(HHI_VDEC2_CLK_CNTL, (2 << 9) | (1))
 #define HCODEC_255M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, (2 << 9) | (1), 16, 16)
+#define HEVC_255M()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (2 << 9) | (1), 16, 16)
 
 //283.33M <-- (2550/3)/3
 #define VDEC1_283M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (1 << 9) | (2), 0, 16)
@@ -71,18 +72,47 @@ HHI_VDEC_CLK_CNTL
 #define VDEC1_364M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (3 << 9) | (0), 0, 16)
 #define VDEC2_364M() WRITE_MPEG_REG(HHI_VDEC2_CLK_CNTL, (3 << 9) | (0))
 
-#define VDEC1_CLOCK_ON()   WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, 1, 8, 1); \
-                           WRITE_VREG_BITS(DOS_GCLK_EN0, 0x3ff,0,10)
+//425.00M <-- (2550/3)/2
+#define VDEC1_425M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (1 << 9) | (2), 0, 16)
+
+//510.00M <-- (2550/5)/1
+#define VDEC1_510M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (2 << 9) | (0), 0, 16)
+#define HEVC_510M()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (2 << 9) | (0), 16, 16)
+
+//637.50M <-- (2550/4)/1
+#define VDEC1_638M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (0 << 9) | (0), 0, 16)
+#define HEVC_638M()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (0 << 9) | (0), 16, 16)
+
+#define VDEC1_CLOCK_ON()  do { if (IS_MESON_M8_CPU) { \
+                                    WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, 1, 8, 1); \
+                                    WRITE_VREG_BITS(DOS_GCLK_EN0, 0x3ff,0,10); \
+                                } else { \
+                                    WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, 1, 8, 1); \
+                                    WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 0, 15, 1); \
+                                    WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 0, 8, 1); \
+                                    WRITE_VREG_BITS(DOS_GCLK_EN0, 0x3ff,0,10); \
+                                } \
+                            } while (0)
 
 #define VDEC2_CLOCK_ON()   WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 1, 8, 1); \
                            WRITE_VREG(DOS_GCLK_EN1, 0x3ff)
 
 #define HCODEC_CLOCK_ON()  WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, 1, 24, 1); \
                            WRITE_VREG_BITS(DOS_GCLK_EN0, 0x7fff, 12, 15)
-
+#define HEVC_CLOCK_ON()    WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 0, 24, 1); \
+                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 0, 31, 1); \
+                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 1, 24, 1); \
+                           WRITE_VREG(DOS_GCLK_EN3, 0xffffffff)
+#define VDEC1_SAFE_CLOCK() WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, READ_MPEG_REG(HHI_VDEC_CLK_CNTL) & 0x7f, 0, 7); \
+                           WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 1, 8, 1); \
+                           WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 1, 15, 1);
 #define VDEC1_CLOCK_OFF()  WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  0, 8, 1)
 #define VDEC2_CLOCK_OFF()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 0, 8, 1)
 #define HCODEC_CLOCK_OFF() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, 0, 24, 1)
+#define HEVC_SAFE_CLOCK()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (READ_MPEG_REG(HHI_VDEC2_CLK_CNTL) >> 16) & 0x7f, 16, 7); \
+                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 1, 24, 1); \
+                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 1, 31, 1)
+#define HEVC_CLOCK_OFF()   WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 0, 24, 1)
 
 static int clock_level[VDEC_MAX+1];
 
@@ -97,7 +127,11 @@ void vdec_clock_enable(void)
 void vdec_clock_hi_enable(void)
 {
     VDEC1_CLOCK_OFF();
-    VDEC1_364M();
+    if (IS_MESON_M8_CPU) {
+        VDEC1_364M();
+    } else {
+        VDEC1_638M();
+    }
     VDEC1_CLOCK_ON();
     clock_level[VDEC_1] = 1;
 }
@@ -155,6 +189,42 @@ void hcodec_clock_off(void)
     HCODEC_CLOCK_OFF();
 }
 
+void hevc_clock_enable(void)
+{
+    HEVC_CLOCK_OFF();
+//    HEVC_255M();
+    HEVC_638M();
+    HEVC_CLOCK_ON();
+}
+
+void hevc_clock_hi_enable(void)
+{
+    HEVC_CLOCK_OFF();
+    HEVC_638M();
+    HEVC_CLOCK_ON();
+    clock_level[VDEC_HEVC] = 1;
+}
+
+void hevc_clock_on(void)
+{
+    HEVC_CLOCK_ON();
+}
+
+void hevc_clock_off(void)
+{
+    HEVC_CLOCK_OFF();
+}
+
+void vdec_clock_prepare_switch(void)
+{
+    VDEC1_SAFE_CLOCK();
+}
+
+void hevc_clock_prepare_switch(void)
+{
+    HEVC_SAFE_CLOCK();
+}
+
 int vdec_clock_level(vdec_type_t core)
 {
     if (core < VDEC_MAX)
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
index 96c9458c192f..04c9f78590c0 100755
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
@@ -34,8 +34,8 @@
 
 
 #undef MicroCode
-#define MicroCode mix_sw_mc_hdec_dblk
-#include "h264_enc_mix_sw_hdec_dblk.h"
+#define MicroCode mix_sw_mc_hdec_m2_dblk
+#include "h264_enc_mix_sw_hdec_m2_dblk.h"
 
 #undef MicroCode
 #define MicroCode mix_dump_mc_dblk
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h
new file mode 100644
index 000000000000..9a566aeb2d26
--- /dev/null
+++ b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h
@@ -0,0 +1,382 @@
+const u32 MicroCode[] __attribute__ ((aligned (8))) = {
+	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01bf40,0x0000000,
+	0xc000ec0,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
+	0xc7aed00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc79a280,0x0000000,0xc78c080,0x64d3008,0xc780980,0x0000000,0xc79a2c0,0x0000000,
+	0xc7ac000,0x0000000,0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,
+	0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,
+	0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,
+	0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,
+	0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,
+	0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,
+	0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,
+	0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,
+	0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785480,0xa6080c8,
+	0xc782e00,0xa608348,0xc79bb80,0xa608388,0xc79da80,0xc788340,0x0000000,0xc07ee80,
+	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
+	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,
+	0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,
+	0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,
+	0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,
+	0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,
+	0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,
+	0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,
+	0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,
+	0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc786ec0,
+	0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
+	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,
+	0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,
+	0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,
+	0x80d1f40,0x7800048,0xc006700,0x441a208,0xc07d640,0x60d2108,0xc006600,0x6800008,
+	0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,
+	0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
+	0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,
+	0xc785a80,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,
+	0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,
+	0x64f4008,0x9c08048,0x60f4008,0xc017a40,0x0000000,0x6498e08,0x9c08788,0x6098e08,
+	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc018140,
+	0x0000000,0xc017640,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,0x60f4908,
+	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
+	0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
+	0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc07bb80,
+	0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
+	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,0x9010208,
+	0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
+	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
+	0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,0x7800148,
+	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af80,
+	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
+	0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,0x7c00588,
+	0x68002a3,0xc01cdc0,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,
+	0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc019240,0x7c005c8,0x60f1c0b,0x7800049,
+	0xc003780,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc0037c0,
+	0x0000000,0x680d483,0x681acc4,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,
+	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc783100,0x8030504,
+	0xc016140,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc0153c0,0x0000000,0x6490b08,
+	0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc015b80,0x0000000,
+	0xc015080,0x0000000,0xc0797c0,0x0000000,0x64d3109,0x9010209,0x400f208,0x5804208,
+	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
+	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,0x8098000,
+	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
+	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,
+	0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,
+	0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
+	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,
+	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc078bc0,0x60d2108,
+	0xc078b40,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
+	0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6800009,0x60f1e09,0xc0787c0,0x80d2100,
+	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,
+	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
+	0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780640,0x7c00588,0xc01a440,
+	0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,0x91c1209,0x7c00788,
+	0x9106209,0x7c00588,0xc0168c0,0x7c005c8,0x60f1d0b,0x92c620b,0x920624b,0x94c6209,
+	0x7800789,0x9581209,0x60d2408,0x680002e,0x60d232e,0x78005c8,0x7800049,0xc000bc0,
+	0x2408248,0xc077b00,0x60d2108,0x80d3d00,0x80d5300,0x6803fc8,0x6ffffc8,0x60f4208,
+	0xc001a40,0x0000000,0x6811743,0x681bc44,0x64d3308,0x9010208,0xaa14008,0x0000000,
+	0x80ac005,0xc780640,0x8030504,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9c08008,
+	0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,0x9808048,0x9808088,
+	0x98080c8,0x98081c8,0x60d0008,0x6800048,0x7800309,0x948c209,0x60f4b08,0x80ac005,
+	0xc780080,0x8030504,0x0800000,0x7800008,0xc7f6980,0x6030408,0x6800009,0xb005248,
+	0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffd8,0x6c00018,
+	0x6800009,0x6800019,0x6c00019,0x4000699,0x680000b,0x680c00e,0x680100f,0x7400398,
+	0x400138e,0x7400389,0x400138e,0x7400399,0x400138e,0x740038b,0x400138e,0xaee004f,
+	0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,
+	0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffc00,0x200e34e,0x64d330d,
+	0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,0xc7fff40,0x40403cf,
+	0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,0x60d3919,0x60d3818,0x60d3a19,0xcc00000,
+	0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,
+	0x6d0001e,0x690000a,0x6800023,0x6800028,0x6800029,0x6bfffd8,0x6c00018,0x4000918,
+	0x6800019,0x6c00019,0x4000699,0x6800009,0x680c00e,0x680064f,0x7400399,0x400138e,
+	0x7400389,0x400138e,0x740039b,0x400138e,0x740038a,0x400138e,0x740039c,0x400138e,
+	0x740038a,0x400138e,0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,
+	0x740038a,0x400138e,0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,
+	0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
+	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,
+	0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,
+	0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,
+	0x60d501d,0x60d511e,0xcc00000,0x0000000,0x680000e,0xa82b388,0x64d370e,0x78009c8,
+	0xaa2c008,0xa624048,0x6800008,0x80d3000,0x80d300f,0x64d0009,0x9c09149,0x60d0009,
+	0xc7f3e80,0x7c009c8,0x7c009c8,0xb60c223,0x4001223,0x4401223,0xba18188,0x40008c8,
+	0xb614288,0x6800049,0xaa0c188,0x6800049,0x6800009,0x7c00a49,0xc012bc0,0x78005c8,
+	0x92c620b,0x920624b,0x94c6209,0x7800789,0x9581209,0x60d2408,0x60d232e,0x64d3508,
+	0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,0xcb80003,0x64d390f,
+	0xc7f3680,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,0x60d3919,0x6bfffc9,
+	0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa10249,0x80d3601,
+	0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,0x6800008,0x7c00748,0x7800648,
+	0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,
+	0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,
+	0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800649,0x680000a,0xa408289,
+	0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015bc0,0x0000000,0xc780400,0x78005c9,
+	0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,0x64d3e08,0x9008208,0xaafbfc8,
+	0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,0x7c00589,0x7800748,0xaa5c008,
+	0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
+	0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,
+	0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,0x80d360f,0x78006c9,0x7800708,
+	0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0xc016080,
+	0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,
+	0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,
+	0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,
+	0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,
+	0xc7f1480,0x961064f,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,
+	0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,
+	0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
+	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb83e248,0x4001208,0x920c210,0x7800349,
+	0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa433288,
+	0x6800008,0xc011f40,0x0000000,0x80ac00d,0xc7f0580,0x8030504,0x80d3000,0x80d1f30,
+	0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,
+	0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0xc00c780,0x0000000,
+	0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80d3300,0x80ac009,
+	0xc7efa80,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,
+	0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
+	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
+	0x580f34d,0xbef804d,0x0000000,0xc7fdd40,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,
+	0x64d4d14,0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d3718,0x5401a28,
+	0x9402a29,0x6800029,0x78006c9,0xa638009,0x60d3919,0x6a00009,0x6d00009,0x60d4e09,
+	0x60d4f09,0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,
+	0x60d3a09,0x7800789,0x680000a,0xa842289,0x7800a89,0x60d2109,0x80d2001,0x80d5300,
+	0x6800009,0x7c00a89,0x7800a09,0x680024a,0xa826289,0x64d3e09,0x9008249,0xbe14809,
+	0x680038a,0xbe0c409,0x680028a,0x680018a,0xa20c3c9,0x0000000,0x400c28a,0x64d3c09,
+	0x9002249,0x200a24a,0x64d2009,0xbefc049,0x0000000,0x60d210a,0x80d2001,0x64d320a,
+	0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x688888b,0x64d3709,
+	0x941024b,0x60d3709,0x64d3809,0x941024b,0x60d3809,0x80d3601,0x0000000,0x60d320a,
+	0xc7810c0,0x80d3603,0x64d2009,0xbefc049,0x0000000,0x80d2105,0x80d2001,0x64d320a,
+	0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x80d3601,0x0000000,
+	0x60d320a,0x80d3602,0x80d3603,0xc780c00,0x80d3604,0x78005c9,0x780058a,0xa80c289,
+	0x0000000,0x64d3e09,0x9008249,0xaafbfc9,0xa61c009,0x0000000,0x64d2309,0x920c249,
+	0x64d240a,0x940c289,0x60d240a,0x9004228,0xa60c008,0xc780640,0x80d5201,0x78006c9,
+	0xa224208,0x780030a,0xb807289,0x4807208,0xa614008,0xc017580,0x0000000,0xc7803c0,
+	0x0000000,0xa62c009,0x0000000,0x4c01208,0x64d3209,0x9c09009,0x60d3209,0x6bfffca,
+	0x6c0000a,0x60d380a,0x9809009,0x60d3209,0xc015600,0x0000000,0x80d3607,0x80d3601,
+	0x80d3608,0x80d3609,0x80d3604,0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,
+	0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,
+	0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,
+	0x0000000,0x80d3606,0x80d360f,0x7800649,0x680000a,0xa40d289,0x7800789,0x78007ca,
+	0xa803289,0xc011d40,0x0000000,0x64f1d09,0x9205249,0x780060a,0xa804289,0xc00fe40,
+	0x0000000,0xc7804c0,0x78005c9,0x780058a,0xa810289,0x7800a08,0xaa30288,0x0000000,
+	0x64d3e08,0x9008208,0xaafbfc8,0xa61c008,0x7800588,0x78005c9,0xc011380,0x2408209,
+	0xc780100,0x0000000,0x78005c9,0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,
+	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,
+	0x64d3e09,0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
+	0x6800009,0x7c00749,0x80d3606,0x80d360f,0x78009c9,0x680000a,0xa86a289,0x680004a,
+	0xa446289,0xc011200,0x681ae04,0x64f1509,0x9c09449,0x60f1509,0x9809449,0x60f1509,
+	0x80d3609,0x64d0009,0x9c09049,0x60d0009,0x9809049,0x60d0009,0x6800009,0x780030a,
+	0x946d24a,0x60d3209,0x6800223,0x64d5309,0x7c00a89,0x78006e6,0x7800327,0xb8059e6,
+	0x6bfffe6,0x6c00026,0x60d3826,0x6800018,0x60d3718,0x68888a7,0x64d4e26,0x93e19a6,
+	0x96619e6,0x64d4f26,0x93e19a6,0x96419e6,0x64d5026,0x93e19a6,0x96219e6,0x64d5126,
+	0x93e19a6,0x96019e6,0x60d3827,0x64f1509,0x9c09589,0x60f1509,0xc010cc0,0x0000000,
+	0x6490b09,0x9c09609,0x9c09649,0x6090b09,0x64f1509,0x9c095c9,0x9c09609,0x9c09649,
+	0x9c096c9,0x9809509,0x98094c9,0x64f1f08,0x9383208,0xa6f8008,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x9809589,0xc780900,0x60f1509,0xc0100c0,0x681bc44,
+	0x6800049,0x780030a,0x946d24a,0x60d3209,0x68001e3,0x9829029,0x64d3727,0x92619a7,
+	0x541f9a6,0x60d4e26,0x92419a7,0x541f9a6,0x60d4f26,0x92219a7,0x541f9a6,0x60d5026,
+	0x92019a7,0x541f9a6,0x60d5126,0x6490b09,0x9809609,0x9c09649,0x6090b09,0x64f1509,
+	0x98095c9,0x9809609,0x9809649,0x98096c9,0x9c09509,0x9c094c9,0x9c09749,0x60f1509,
+	0x7800789,0x7c00b89,0x78007c9,0x7c00789,0x78006c9,0x7800708,0x780030a,0xb804289,
+	0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0xc00e100,0x0000000,0x78006c8,
+	0xaa10008,0x680bfca,0xc001740,0x4401208,0x78006c8,0x7800309,0xb846248,0x0000000,
+	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,
+	0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,
+	0xa410289,0xc00b5c0,0x0000000,0x80ac00e,0xc7e9580,0x8030504,0x64d5309,0xaa1c009,
+	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7f8e00,0x0000000,
+	0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0xb60c223,0x4001223,
+	0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,0x6800009,
+	0x7c00a49,0xc000980,0x7800308,0xc001580,0x6800011,0x6a00014,0x6d00014,0x60d4d14,
+	0xc001f80,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x9402a29,0x6800029,
+	0x90212a8,0x9581b8a,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,
+	0xb004248,0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,0xaa18008,
+	0xa614048,0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8540,0x0000000,0x7800289,
+	0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,
+	0x58103cf,0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,0x960f466,
+	0x90109a5,0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,0x92219a5,
+	0x541f4e6,0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,0x5810451,
+	0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,
+	0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,
+	0x7400294,0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,
+	0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,
+	0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,
+	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,
+	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
+	0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,
+	0x400128a,0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,0x400128a,
+	0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,
+	0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,
+	0x9610789,0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,0x68888a4,
+	0x93e199b,0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,0xcc00000,
+	0x9601926,0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,0x9829069,
+	0xcc00000,0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e5ec0,
+	0x0000000,0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e5d00,0x0000000,
+	0x7800ac9,0xaa10009,0x6800049,0xc7e5bc0,0x7c00b09,0x93e1248,0xaa10009,0x9042248,
+	0xc7e5a80,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,0xaa0c049,
+	0x680348a,0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,0x78000c9,
+	0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,0xa4032cc,
+	0x0000000,0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,
+	0x0000000,0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,
+	0x980a7ca,0x60f1f0a,0x681ae0a,0xa404284,0x680004a,0xc0115c0,0x7c00aca,0xc7e4ec0,
+	0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e4d40,0x0000000,0x920c248,
+	0x780034a,0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,0x948c209,
+	0x60f4b08,0xc7e4a40,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,0x6094008,
+	0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0x6803c08,0x60d2208,
+	0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000c40,0x0000000,0x780034a,0x400128a,
+	0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,
+	0x780030a,0x541028a,0x980a7ca,0x609300a,0x681010a,0x6c3474a,0x609070a,0x6490b0a,
+	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,
+	0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,0x780030a,0x400128a,
+	0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,0x0000000,0x8095003,0x8095000,
+	0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,0xa21004a,
+	0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,
+	0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,
+	0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,
+	0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,0xc7e76c0,0x6001008,0x6bc0008,
+	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
+	0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,0x6a19408,0x60d1f08,0x64d1e08,
+	0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,
+	0x9210208,0xc063100,0x60d2108,0xc063080,0x80d2107,0x6800008,0x60f1b08,0x7800309,
+	0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,
+	0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,
+	0x960f248,0x60f1e09,0xc062ac0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
+	0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,0x78001c8,0xc0627c0,0x60d2108,
+	0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800249,
+	0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,0xc780240,0x9206208,0x80d1f20,
+	0x64ad008,0xc000d00,0x9206208,0x60f1c0b,0x64ad008,0x9206208,0x7800049,0xc06b1c0,
+	0x2408248,0xc062100,0x60d2108,0xc06b2c0,0x0000000,0x680d483,0x681acc4,0x80d300f,
+	0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,
+	0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,0x9808048,0x60d0008,
+	0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7ea980,0x8030504,0x6490b08,0x9808008,
+	0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6490b08,0x9808608,0x9c08648,
+	0x6090b08,0x6401008,0x9808008,0xc7e8640,0x6001008,0x5401248,0x2009209,0x681fc8a,
+	0x2009289,0xcb80009,0x680000b,0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,
+	0x688080b,0xcc00000,0x6c0208b,0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,
+	0x6c0410b,0x694140b,0xcc00000,0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,
+	0xcc00000,0x6c071cb,0x688484b,0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,
+	0x690504b,0xcc00000,0x6c0a28b,0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,
+	0x6c0c30b,0x684848b,0xcc00000,0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,
+	0xcc00000,0x6c0f3cb,0x690908b,0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,
+	0x680c0cb,0xcc00000,0x6c1248b,0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,
+	0x6c1450b,0x68ccccb,0xcc00000,0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,
+	0xcc00000,0x6c175cb,0x681010b,0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,
+	0x689090b,0xcc00000,0x6c1a68b,0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,
+	0x6c1c70b,0x695150b,0xcc00000,0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,
+	0xcc00000,0x6c1e7cb,0x685494b,0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,
+	0x689514b,0xcc00000,0x6c2088b,0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,
+	0x6c2290b,0x691458b,0xcc00000,0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,
+	0xcc00000,0x6c239cb,0x681918b,0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,
+	0x68581cb,0xcc00000,0x6c25a8b,0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,
+	0x6c25b0b,0x6898dcb,0xcc00000,0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,
+	0xcc00000,0x6c26bcb,0x68d820b,0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,
+	0x68d8a0b,0xcc00000,0x6c27c8b,0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,
+	0x9c08048,0x60f4008,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
+	0x0000000,0xc07aec0,0x0000000,0x7800709,0x4001249,0x780030a,0x400128a,0xe00024a,
+	0x80d1f30,0x6bc0008,0x60d1f08,0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,
+	0x6430008,0x78006c9,0x780070a,0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,
+	0x40012cb,0x4000309,0xe0002ca,0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,
+	0x961024b,0x60d3309,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
+	0x0000000,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
+	0x0000000,0x80d5300,0xc07a280,0x0000000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,
+	0x7800708,0x7800349,0xb809248,0x6804008,0x6800409,0x680080a,0x740020a,0xd07ffc9,
+	0x4001208,0xcc00000,0x0000000,0x6435008,0x580f208,0xbecc048,0x0000000,0x64ad608,
+	0x6035108,0x7800309,0x4001249,0x5801249,0x401f249,0x5805249,0x5405249,0x6035209,
+	0x5401249,0x2008248,0x60ad608,0x6be4008,0x6035008,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0xcc00000,0x0000000,0xc07be80,0x7800608,0x64d3e08,0x9008288,0xaafbfca,
+	0x0000000,0x60f1c0b,0x7800a08,0xaa10288,0xa60c00a,0x7800588,0x7c005c8,0x7800608,
+	0x78005c9,0xc001ac0,0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,
+	0xc07b940,0x7800608,0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,
+	0x6803fce,0xae14049,0x80f2308,0x7800588,0xcc00000,0x7c005c8,0x64f2408,0x91e2208,
+	0xaa18048,0x64d3e08,0x9008388,0xa60ffce,0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,
+	0x64f2408,0x9208208,0xaa17fc8,0x64d3e08,0x9008208,0xaaebfce,0x0000000,0x60f1d0b,
+	0xa60ffce,0x64d3e08,0x9008388,0x7800a08,0xaa10288,0xa60c00e,0x7800588,0x7c005c8,
+	0x7800608,0x78005c9,0xc000e80,0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,
+	0x7c005c8,0xc07ad00,0x7800588,0x92c620b,0x920624b,0x94c6209,0x7800b89,0x9581209,
+	0x5410b88,0x78006ca,0x680a009,0x2009289,0x64d2408,0x7400248,0x7800309,0xb80324a,
+	0x400128a,0x680000a,0x680a009,0x2009289,0x7000248,0x940cb88,0x9021228,0x9581b88,
+	0x78006c8,0x4001208,0x7800309,0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,
+	0xc07de00,0x0000000,0x7804009,0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,
+	0x5801248,0x680400a,0x2009289,0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,
+	0x9006209,0x7c007ca,0xcc00000,0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,
+	0x5401208,0xc780100,0x4401308,0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,
+	0x7800309,0xb003248,0x0000000,0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,
+	0x6800049,0xcc00000,0x7c009c9,0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,
+	0x7c009c9,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
+	0x80f2306,0x64f2409,0x90c2249,0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,
+	0x6490b09,0x9809009,0x98090c9,0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,
+	0x0000000,0x6803c0e,0x78006c9,0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,
+	0x400128a,0x950c389,0xa60c009,0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,
+	0x980e58e,0x64d3308,0x9108208,0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,
+	0x7800709,0x5404209,0x64acc0a,0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,
+	0x20262e6,0x20262a6,0x7800709,0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,
+	0x540428a,0xf0002c0,0x20102d0,0x2010290,0x780070a,0x6a0002d,0xa21004a,0x6c0002d,
+	0x698002d,0x6c0002d,0x202d7ed,0x78006ca,0x400328a,0x540528a,0x202d2ad,0x694002f,
+	0x6c0002f,0x202f7ef,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,
+	0x5405249,0x202f26f,0x78006c8,0x7800309,0xa403248,0x4001208,0x6800008,0x6493009,
+	0x9008249,0xa4fe209,0x6800209,0x680800a,0x8093100,0x6493208,0x92102c8,0x740028b,
+	0x400128a,0x90102c8,0x740028b,0xd07fe89,0x400128a,0x78006c9,0x4003249,0x7800308,
+	0xb003209,0x4001208,0x2409209,0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,
+	0x6035108,0x8035210,0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x643530d,0x900c34d,0xa6f800d,0x0000000,0xc0063c0,0x60f1f0e,0x64d3c08,0x9004208,
+	0xaa10048,0x6800049,0x4440b6d,0x68000c9,0x7c00b49,0xc004bc0,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0xc005280,0x0000000,0xc005680,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x7800b49,
+	0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,0xb220049,
+	0x60f1f0e,0x4401249,0x7c00b49,0xc005a00,0x0000000,0xc7ff800,0x4420bef,0xc004340,
+	0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,0x60d4a09,
+	0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0xc003680,
+	0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,0x78006c8,
+	0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
+	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,0x60d510a,
+	0xc002e40,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,0x68fffc9,
+	0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,0xb807289,
+	0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,0x60d4b1c,
+	0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
+	0x64d320a,0x69ffe49,0x60d3209,0xc002380,0x80d5201,0xcc00000,0x60d320a,0x64d3309,
+	0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,0x64d4a09,
+	0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,0x90612a8,
+	0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,0x60d4c09,
+	0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,0x60d3209,
+	0xc001a40,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,0x91e12eb,
+	0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,0x920f289,
+	0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,0xaa2400a,
+	0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,0x960facb,
+	0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,0xa60c009,
+	0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,0xc7fd580,
+	0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,0x680002b,
+	0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x64d4a08,0x64d4e0a,
+	0x60d4a2a,0x60d4b2a,0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,
+	0x60d4e2c,0x60d4f2c,0x60d502c,0x60d512c,0xc000740,0x80d5201,0x60d4e0a,0x60d4f0a,
+	0x60d500a,0x60d510a,0x64d4a0a,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
+	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x80d5201,0x60d4e0a,0x60d4f0a,0x60d500a,0x60d510a,
+	0x60d4a0a,0x60d4b0a,0x60d4c0a,0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,
+	0x60d4d1e,0x80d5602,0x64d5709,0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,
+	0x8006402,0x7800acf,0xa60c00f,0xc7d3fc0,0x0000000,0x6435008,0x580f208,0xbef8048,
+	0x0000000,0xa62004f,0xc000cc0,0x0000000,0x68000c8,0xc001080,0x7c00ac8,0xc7d3cc0,
+	0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,0x7800b09,0xaa0c009,
+	0x7c00ac8,0x8030508,0xc7d3a00,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x7800bc8,0x6a00009,0x6c00009,0x20097c9,0x200a209,0xb8072ad,0x240a2ad,0x6980009,
+	0x6c00009,0x20097c9,0xc780340,0x202d289,0xb40b26d,0x6980009,0x6c00009,0x20097c9,
+	0x200a209,0xb8062ad,0x240a2ad,0x6a00009,0x6c00009,0x20097c9,0x202d289,0x603512d,
+	0x8035210,0x6b08808,0x6035008,0xcc00000,0x4020b6d,0x7808908,0x7c08208,0x7808948,
+	0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,0x7c08308,0x7808848,
+	0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0xcc00000,0x0000000,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x7808a08,0x7c08108,0x7808a48,0x7c08148,0x7808a88,
+	0x7c08188,0x7808ac8,0x7c081c8,0x7808b08,0x7c08008,0x7808b48,0x7c08048,0x7808b88,
+	0x7c08088,0x7808bc8,0x7c080c8,0x6940008,0x6c00008,0x20087c8,0x7800309,0x4001249,
+	0x5405249,0x2008248,0xb80322f,0x0000000,0x242f26f,0x603512f,0x8035210,0x6a08008,
+	0x6035008,0xcc00000,0x4020bef,0x64f1508,0x9c08308,0x9c085c8,0x9c08608,0x9c08648,
+	0x9c086c8,0x9808508,0x98084c8,0x60f1508,0x78006c9,0x7800708,0x780030a,0xb804289,
+	0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,
+	0x0000000,0x80d300f,0x80f4003,0x64f1508,0x9808248,0x9c08508,0x9c084c8,0x60f1508,
+	0x64d0009,0x9c09009,0x60d0009,0x9809009,0x60d0009,0x9c08248,0x9808508,0x98084c8,
+	0x9808308,0x60f1508,0xcc00000,0x80f4000,0x6432434,0xaa0c034,0x8032400,0x6699334,
+	0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,0x0000000,0xc7ffd80,0x0000000,
+	0x8030504,0xc7ffcc0,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+};
diff --git a/drivers/amlogic/amports/ptsserv.c b/drivers/amlogic/amports/ptsserv.c
index 5f3987bf910d..baba4da9e17a 100755
--- a/drivers/amlogic/amports/ptsserv.c
+++ b/drivers/amlogic/amports/ptsserv.c
@@ -68,7 +68,7 @@ typedef struct pts_table_s {
     u32 last_avg_bitrate;
     u32 last_pts_delay_ms;
 #endif
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     u32 hevc;
 #endif
 } pts_table_t;
@@ -187,19 +187,21 @@ int calculation_stream_delayed_ms(u8 type, u32 *latestbitrate, u32 *avg_bitare)
         return 0;
     }
 
-#if HAS_HEVC_VDEC
-    if (type == PTS_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && (type == PTS_TYPE_HEVC)) {
         pTable = &pts_table[PTS_TYPE_VIDEO];
     } else
 #endif
-    pTable = &pts_table[type];
+    {
+        pTable = &pts_table[type];
+    }
 
     if((pTable->last_checkin_pts==-1) || (pTable->last_checkout_pts==-1)) {
         return 0;
     }
 
-#if HAS_HEVC_VDEC
-    if (type == PTS_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && (type == PTS_TYPE_HEVC)) {
         outtime = timestamp_vpts_get();
     } else
 #endif
@@ -218,15 +220,20 @@ int calculation_stream_delayed_ms(u8 type, u32 *latestbitrate, u32 *avg_bitare)
         int diff = pTable->last_checkin_offset-pTable->last_checkout_offset;
         int diff2;
         int delay_ms;
-#if HAS_HEVC_VDEC
-        if (pTable->hevc) {
-            diff2 = stbuf_level(get_buf_by_type(PTS_TYPE_HEVC));
-        } else{
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+        if (HAS_HEVC_VDEC) {
+            if (pTable->hevc) {
+                diff2 = stbuf_level(get_buf_by_type(PTS_TYPE_HEVC));
+            } else{
+                diff2 = stbuf_level(get_buf_by_type(type));
+            }
+        } else 
+#endif
+        {
             diff2 = stbuf_level(get_buf_by_type(type));
         }
-#else
-        diff2 = stbuf_level(get_buf_by_type(type));
-#endif
+        
 	if(diff2 > stbuf_space(get_buf_by_type(type)))
             diff = diff2;
         delay_ms=diff*1000/(1+pTable->last_avg_bitrate/8);
@@ -282,8 +289,8 @@ int calculation_stream_ext_delayed_ms(u8 type)
          return 0;
     }
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
-    if (type == PTS_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && (type == PTS_TYPE_HEVC)) {
         pTable = &pts_table[PTS_TYPE_VIDEO];
     } else
 #endif
@@ -887,16 +894,18 @@ int pts_start(u8 type)
         return -EINVAL;
     }
 
-#if HAS_HEVC_VDEC
-    if (type == PTS_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && (type == PTS_TYPE_HEVC)) {
         pTable = &pts_table[PTS_TYPE_VIDEO];
         pTable->hevc = 1;
     } else
 #endif
     {
         pTable = &pts_table[type];
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
-        pTable->hevc = 0;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+        if (!IS_MESON_M8_CPU) {
+            pTable->hevc = 0;
+        }
 #endif
     }
 
@@ -911,8 +920,8 @@ int pts_start(u8 type)
             return -ENOMEM;
         }
 
-#if HAS_HEVC_VDEC
-        if (type == PTS_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+        if (HAS_HEVC_VDEC && (type == PTS_TYPE_HEVC)) {
             pTable->buf_start = READ_VREG(HEVC_STREAM_START_ADDR);
             pTable->buf_size = READ_VREG(HEVC_STREAM_END_ADDR)
                                - pTable->buf_start;
@@ -921,7 +930,7 @@ int pts_start(u8 type)
             pTable->first_checkin_pts = -1;
             pTable->first_lookup_ok = 0;
             pTable->first_lookup_is_fail = 0;
-        } else
+        } else 
 #endif
         if (type == PTS_TYPE_VIDEO) {
             pTable->buf_start = READ_VREG(VLD_MEM_VIFIFO_START_PTR);
@@ -986,13 +995,15 @@ int pts_stop(u8 type)
         return -EINVAL;
     }
 
-#if HAS_HEVC_VDEC
-    if (type == PTS_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && (type == PTS_TYPE_HEVC)) {
         pTable = &pts_table[PTS_TYPE_VIDEO];
-    } else
+    } else 
 #endif
-    pTable = &pts_table[type];
-
+    {
+        pTable = &pts_table[type];
+    }
+    
     spin_lock_irqsave(&lock, flags);
 
     if (likely((pTable->status == PTS_RUNNING) ||
diff --git a/drivers/amlogic/amports/streambuf.c b/drivers/amlogic/amports/streambuf.c
index a9934090a867..8ffd04a9cc1f 100755
--- a/drivers/amlogic/amports/streambuf.c
+++ b/drivers/amlogic/amports/streambuf.c
@@ -57,9 +57,7 @@ static s32 _stbuf_alloc(stream_buf_t *buf)
         }
 
         printk("%s stbuf alloced at 0x%x, size = %d\n",
-#if HAS_HEVC_VDEC
                (buf->type == BUF_TYPE_HEVC) ? "HEVC" :
-#endif
                (buf->type == BUF_TYPE_VIDEO) ? "Video" :
                (buf->type == BUF_TYPE_AUDIO) ? "Audio" :
                 "Subtitle",
@@ -171,20 +169,22 @@ static void _stbuf_timer_func(unsigned long arg)
 
 u32 stbuf_level(struct stream_buf_s *buf)
 {
-    return 
-#if HAS_HEVC_VDEC
-    (buf->type == BUF_TYPE_HEVC) ? READ_VREG(HEVC_STREAM_LEVEL) :
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC)
+        return (buf->type == BUF_TYPE_HEVC) ? READ_VREG(HEVC_STREAM_LEVEL) : _READ_ST_REG(LEVEL);
+    else
 #endif
-    _READ_ST_REG(LEVEL);
+        return _READ_ST_REG(LEVEL);
 }
 
 u32 stbuf_rp(struct stream_buf_s *buf)
 {
-    return
-#if HAS_HEVC_VDEC
-    (buf->type == BUF_TYPE_HEVC) ? READ_VREG(HEVC_STREAM_RD_PTR) :
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC)
+        return (buf->type == BUF_TYPE_HEVC) ? READ_VREG(HEVC_STREAM_RD_PTR) : _READ_ST_REG(RP);
+    else
 #endif
-    _READ_ST_REG(RP);
+        return _READ_ST_REG(RP);
 }
 
 u32 stbuf_space(struct stream_buf_s *buf)
@@ -192,12 +192,12 @@ u32 stbuf_space(struct stream_buf_s *buf)
     /* reserved space for safe write, the parser fifo size is 1024byts, so reserve it */
     int size;
 
-#if HAS_HEVC_VDEC
-    if (buf->type == BUF_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && buf->type == BUF_TYPE_HEVC)
         size = buf->canusebuf_size - READ_VREG(HEVC_STREAM_LEVEL);
-    } else
+    else 
 #endif
-    size = (buf->canusebuf_size - _READ_ST_REG(LEVEL)) ;
+        size = (buf->canusebuf_size - _READ_ST_REG(LEVEL)) ;
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
     if ((buf->type == BUF_TYPE_VIDEO) && (vdec_on(VDEC_2))) {
@@ -212,11 +212,7 @@ u32 stbuf_space(struct stream_buf_s *buf)
     if(buf->canusebuf_size>=buf->buf_size/2)
         size=size-6*1024;//old reversed value,tobe full, reversed only...
 
-#if HAS_HEVC_VDEC
-    if ((buf->type == BUF_TYPE_VIDEO) || (buf->type == BUF_TYPE_HEVC)) {
-#else
-    if (buf->type == BUF_TYPE_VIDEO) {
-#endif
+    if ((buf->type == BUF_TYPE_VIDEO) || (HAS_HEVC_VDEC && buf->type == BUF_TYPE_HEVC)) {
         size -= READ_MPEG_REG(PARSER_VIDEO_HOLE);
     }
 
@@ -251,8 +247,8 @@ s32 stbuf_init(struct stream_buf_s *buf)
 
     init_waitqueue_head(&buf->wq);
 
-#if HAS_HEVC_VDEC
-    if (buf->type == BUF_TYPE_HEVC) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && buf->type == BUF_TYPE_HEVC) {
         CLEAR_VREG_MASK(HEVC_STREAM_CONTROL, 1);
         WRITE_VREG(HEVC_STREAM_START_ADDR, phy_addr);
         WRITE_VREG(HEVC_STREAM_END_ADDR, phy_addr + buf->buf_size);
diff --git a/drivers/amlogic/amports/streambuf.h b/drivers/amlogic/amports/streambuf.h
index 6d28212f918c..663f2f4ce3ef 100755
--- a/drivers/amlogic/amports/streambuf.h
+++ b/drivers/amlogic/amports/streambuf.h
@@ -33,12 +33,8 @@
 #define BUF_TYPE_AUDIO      1
 #define BUF_TYPE_SUBTITLE   2
 #define BUF_TYPE_USERDATA   3
-#if HAS_HEVC_VDEC
 #define BUF_TYPE_HEVC       4
 #define BUF_MAX_NUM         5
-#else
-#define BUF_MAX_NUM         4
-#endif
 
 #define INVALID_PTS 0xffffffff
 
diff --git a/drivers/amlogic/amports/streambuf_reg.h b/drivers/amlogic/amports/streambuf_reg.h
index d6f789639c80..468a85a258ee 100755
--- a/drivers/amlogic/amports/streambuf_reg.h
+++ b/drivers/amlogic/amports/streambuf_reg.h
@@ -22,7 +22,7 @@
 #ifndef STREAMBUF_REG_H
 #define STREAMBUF_REG_H
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define HEVC_STREAM_REG_BASE        HEVC_STREAM_START_ADDR
 #endif
 
diff --git a/drivers/amlogic/amports/tsdemux.c b/drivers/amlogic/amports/tsdemux.c
index a0c7e40cf0c2..713c7deae06d 100755
--- a/drivers/amlogic/amports/tsdemux.c
+++ b/drivers/amlogic/amports/tsdemux.c
@@ -431,11 +431,7 @@ static ssize_t _tsdemux_write(const char __user *buf, size_t count)
     return count - r;
 }
 
-#if HAS_HEVC_VDEC
 s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid, bool is_hevc)
-#else
-s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid)
-#endif
 {
     s32 r;
     u32 parser_sub_start_ptr;
@@ -515,8 +511,8 @@ s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid)
     }
 
     /* hook stream buffer with PARSER */
-#if HAS_HEVC_VDEC
-    if (is_hevc) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC && is_hevc) {
         WRITE_MPEG_REG(PARSER_VIDEO_START_PTR,
                        READ_VREG(HEVC_STREAM_START_ADDR));
         WRITE_MPEG_REG(PARSER_VIDEO_END_PTR,
@@ -529,8 +525,9 @@ s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid)
         SET_VREG_MASK(HEVC_STREAM_CONTROL, (1<<3)|(0<<4)); // set use_parser_vbuf_wp
         SET_VREG_MASK(HEVC_STREAM_CONTROL, 1); // set stream_fetch_enable
         SET_VREG_MASK(HEVC_STREAM_FIFO_CTL, (1<<29)); // set stream_buffer_hole with 256 bytes
-    } else {
+    } else
 #endif
+    {
         WRITE_MPEG_REG(PARSER_VIDEO_START_PTR,
                        READ_VREG(VLD_MEM_VIFIFO_START_PTR));
         WRITE_MPEG_REG(PARSER_VIDEO_END_PTR,
@@ -540,10 +537,10 @@ s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid)
         WRITE_VREG(VLD_MEM_VIFIFO_BUF_CNTL, MEM_BUFCTRL_INIT);
         CLEAR_VREG_MASK(VLD_MEM_VIFIFO_BUF_CNTL, MEM_BUFCTRL_INIT);
 
-#if HAS_HEVC_VDEC
-        WRITE_VREG(DOS_GEN_CTRL0, 0);    // set vififo_vbuf_rp_sel=>vdec
+        if (HAS_HEVC_VDEC) {
+            WRITE_VREG(DOS_GEN_CTRL0, 0);    // set vififo_vbuf_rp_sel=>vdec
+        }
     }
-#endif
 
     WRITE_MPEG_REG(PARSER_AUDIO_START_PTR,
                    READ_MPEG_REG(AIU_MEM_AIFIFO_START_PTR));
@@ -564,11 +561,14 @@ s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid)
     WRITE_MPEG_REG(PARSER_SUB_RP, parser_sub_rp);
     SET_MPEG_REG_MASK(PARSER_ES_CONTROL, (7 << ES_SUB_WR_ENDIAN_BIT) | ES_SUB_MAN_RD_PTR);
 
-#if HAS_HEVC_VDEC
-    if ((r = pts_start((is_hevc) ? PTS_TYPE_HEVC : PTS_TYPE_VIDEO)) < 0) {
-#else
-    if ((r = pts_start(PTS_TYPE_VIDEO)) < 0) {
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC)
+        r = pts_start((is_hevc) ? PTS_TYPE_HEVC : PTS_TYPE_VIDEO);
+    else 
 #endif
+        r = pts_start(PTS_TYPE_VIDEO);
+
+    if (r < 0) {
         printk("Video pts start failed.(%d)\n", r);
         goto err1;
     }
@@ -655,11 +655,12 @@ err4:
 err3:
     pts_stop(PTS_TYPE_AUDIO);
 err2:
-#if HAS_HEVC_VDEC
-    pts_stop((is_hevc) ? PTS_TYPE_HEVC : PTS_TYPE_VIDEO);
-#else
-    pts_stop(PTS_TYPE_VIDEO);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (HAS_HEVC_VDEC)
+        pts_stop((is_hevc) ? PTS_TYPE_HEVC : PTS_TYPE_VIDEO);
+    else
 #endif
+        pts_stop(PTS_TYPE_VIDEO);
 err1:
     printk("TS Demux init failed.\n");
     return -ENOENT;
diff --git a/drivers/amlogic/amports/tsdemux.h b/drivers/amlogic/amports/tsdemux.h
index f5fc2deb198b..025325aac787 100755
--- a/drivers/amlogic/amports/tsdemux.h
+++ b/drivers/amlogic/amports/tsdemux.h
@@ -71,11 +71,7 @@
 
 struct stream_buf_s;
 
-#if HAS_HEVC_VDEC
 extern s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid, bool is_hevc);
-#else
-extern s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid);
-#endif
 
 extern void tsdemux_release(void);
 
diff --git a/drivers/amlogic/amports/tsync_pcr.c b/drivers/amlogic/amports/tsync_pcr.c
index 440a455fc908..3e012bb86483 100644
--- a/drivers/amlogic/amports/tsync_pcr.c
+++ b/drivers/amlogic/amports/tsync_pcr.c
@@ -137,9 +137,9 @@ void tsync_pcr_avevent_locked(avevent_t event, u32 param)
     	{		    	
 		unsigned oldpts=timestamp_vpts_get();
 		if((abs(param-oldpts)>AV_DISCONTINUE_THREDHOLD_MIN) && (!get_vsync_pts_inc_mode())){
+	    	u32 tsdemux_pcr = tsdemux_pcrscr_get();
+	    	u32 ref_pcr = param;
 			printk("[tsync_pcr_avevent_locked] video discontinue happen.param=%x,discontinue=%d\n",param,tsync_pcr_tsdemuxpcr_discontinue);
-		    	u32 tsdemux_pcr = tsdemux_pcrscr_get();
-		    	u32 ref_pcr = param;
 		    	//if(ref_pcr == 0)
 		    	//	ref_pcr=tsdemux_pcr-tsync_pcr_vstream_delayed();
 			timestamp_pcrscr_set(ref_pcr);
diff --git a/drivers/amlogic/amports/vdec.c b/drivers/amlogic/amports/vdec.c
index 3858434edaf4..7187cf631876 100755
--- a/drivers/amlogic/amports/vdec.c
+++ b/drivers/amlogic/amports/vdec.c
@@ -204,23 +204,23 @@ void vdec_poweron(vdec_type_t core)
         // reset DOS top registers
         WRITE_VREG(DOS_VDEC_MCRCC_STALL_CTRL, 0);
     } else if (core == VDEC_2) {
-#if HAS_VDEC2
-        // vdec2 power on
-        WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~0x30);
-        // wait 10uS
-        udelay(10);
-        // vdec2 soft reset
-        WRITE_VREG(DOS_SW_RESET2, 0xffffffff);
-        WRITE_VREG(DOS_SW_RESET2, 0);
-        // enable vdec1 clock
-        vdec2_clock_enable();
-        // power up vdec memories
-        WRITE_VREG(DOS_MEM_PD_VDEC2, 0);
-        // remove vdec2 isolation
-        WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~0x300);
-        // reset DOS top registers
-        WRITE_VREG(DOS_VDEC2_MCRCC_STALL_CTRL, 0);
-#endif
+        if (HAS_VDEC2) {
+            // vdec2 power on
+            WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~0x30);
+            // wait 10uS
+            udelay(10);
+            // vdec2 soft reset
+            WRITE_VREG(DOS_SW_RESET2, 0xffffffff);
+            WRITE_VREG(DOS_SW_RESET2, 0);
+            // enable vdec1 clock
+            vdec2_clock_enable();
+            // power up vdec memories
+            WRITE_VREG(DOS_MEM_PD_VDEC2, 0);
+            // remove vdec2 isolation
+            WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~0x300);
+            // reset DOS top registers
+            WRITE_VREG(DOS_VDEC2_MCRCC_STALL_CTRL, 0);
+        }
     } else if (core == VDEC_HCODEC) {
 #if HAS_HDEC
         // hcodec power on
@@ -239,21 +239,21 @@ void vdec_poweron(vdec_type_t core)
 #endif		
     }
     else if (core == VDEC_HEVC) {
-#if  HAS_HEVC_VDEC
-        // hevc power on
-        WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~0xc0);
-        // wait 10uS
-        udelay(10);
-        // hevc soft reset
-        WRITE_VREG(DOS_SW_RESET3, 0xffffffff);
-        WRITE_VREG(DOS_SW_RESET3, 0);
-        // enable hevc clock
-        hevc_clock_enable();
-        // power up hevc memories
-        WRITE_VREG(DOS_MEM_PD_HEVC, 0);
-        // remove hevc isolation
-        WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~0xc00);
-#endif
+        if (HAS_HEVC_VDEC) {
+            // hevc power on
+            WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & ~0xc0);
+            // wait 10uS
+            udelay(10);
+            // hevc soft reset
+            WRITE_VREG(DOS_SW_RESET3, 0xffffffff);
+            WRITE_VREG(DOS_SW_RESET3, 0);
+            // enable hevc clock
+            hevc_clock_enable();
+            // power up hevc memories
+            WRITE_VREG(DOS_MEM_PD_HEVC, 0);
+            // remove hevc isolation
+            WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) & ~0xc00);
+        }
     }
 
     spin_unlock_irqrestore(&lock, flags);
@@ -275,16 +275,16 @@ void vdec_poweroff(vdec_type_t core)
         // vdec1 power off
         WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 0xc);
     } else if (core == VDEC_2) {
-#if  HAS_VDEC2   
-        // enable vdec2 isolation
-        WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) | 0x300);
-        // power off vdec2 memories
-        WRITE_VREG(DOS_MEM_PD_VDEC2, 0xffffffffUL);
-        // disable vdec2 clock
-        vdec2_clock_off();
-        // vdec2 power off
-        WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 0x30);
-#endif
+        if (HAS_VDEC2) { 
+            // enable vdec2 isolation
+            WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) | 0x300);
+            // power off vdec2 memories
+            WRITE_VREG(DOS_MEM_PD_VDEC2, 0xffffffffUL);
+            // disable vdec2 clock
+            vdec2_clock_off();
+            // vdec2 power off
+            WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 0x30);
+        }
     } else if (core == VDEC_HCODEC) {
 #if  HAS_HDEC    
         // enable hcodec isolation
@@ -297,16 +297,16 @@ void vdec_poweroff(vdec_type_t core)
         WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 3);
 #endif
     } else if (core == VDEC_HEVC) {
-#if  HAS_HEVC_VDEC
-        // enable hevc isolation
-        WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) | 0xc00);
-        // power off hevc memories
-        WRITE_VREG(DOS_MEM_PD_HEVC, 0xffffffffUL);
-        // disable hevc clock
-        hevc_clock_off();
-        // hevc power off
-        WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 0xc0);
-#endif        
+        if (HAS_HEVC_VDEC) {
+            // enable hevc isolation
+            WRITE_AOREG(AO_RTI_GEN_PWR_ISO0, READ_AOREG(AO_RTI_GEN_PWR_ISO0) | 0xc00);
+            // power off hevc memories
+            WRITE_VREG(DOS_MEM_PD_HEVC, 0xffffffffUL);
+            // disable hevc clock
+            hevc_clock_off();
+            // hevc power off
+            WRITE_AOREG(AO_RTI_GEN_PWR_SLEEP0, READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) | 0xc0);
+        }
     }
 
     spin_unlock_irqrestore(&lock, flags);
@@ -322,12 +322,12 @@ bool vdec_on(vdec_type_t core)
             ret = true;
         }
     } else if (core == VDEC_2) {
-#if HAS_VDEC2
-        if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & 0x30) == 0) &&
-            (READ_MPEG_REG(HHI_VDEC2_CLK_CNTL) & 0x100)) {
-            ret = true;
+        if (HAS_VDEC2) {
+            if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & 0x30) == 0) &&
+                (READ_MPEG_REG(HHI_VDEC2_CLK_CNTL) & 0x100)) {
+                ret = true;
+            }
         }
-#endif
     } else if (core == VDEC_HCODEC) {
 #if  HAS_HDEC 
         if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & 0x3) == 0) &&
@@ -336,12 +336,12 @@ bool vdec_on(vdec_type_t core)
         }
 #endif
     } else if (core == VDEC_HEVC) {
-#if  HAS_HEVC_VDEC 
-        if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & 0xc0) == 0) &&
-            (READ_MPEG_REG(HHI_VDEC2_CLK_CNTL) & 0x1000000)) {
-            ret = true;
+        if (HAS_HEVC_VDEC) { 
+            if (((READ_AOREG(AO_RTI_GEN_PWR_SLEEP0) & 0xc0) == 0) &&
+                (READ_MPEG_REG(HHI_VDEC2_CLK_CNTL) & 0x1000000)) {
+                ret = true;
+            }
         }
-#endif
     }
 
     return ret;
@@ -437,8 +437,10 @@ void vdec_power_mode(int level)
     raw_local_save_flags(fiq_flag);
     local_fiq_disable();
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
-    vdec_clock_prepare_switch();
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (!IS_MESON_M8_CPU) {
+        vdec_clock_prepare_switch();
+    }
 #endif
 
     if (level == 0) {
@@ -451,47 +453,57 @@ void vdec_power_mode(int level)
     spin_unlock_irqrestore(&lock, flags);
 }
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 void vdec2_power_mode(int level)
 {
-    /* todo: add level routines for clock adjustment per chips */
-    ulong flags;
-    ulong fiq_flag;
+    if (HAS_VDEC2) {
+        /* todo: add level routines for clock adjustment per chips */
+        ulong flags;
+        ulong fiq_flag;
 
-    if (vdec_clock_level(VDEC_2) == level) {
-        return;
-    }
+        if (vdec_clock_level(VDEC_2) == level) {
+            return;
+        }
 
-    spin_lock_irqsave(&lock, flags);
-    raw_local_save_flags(fiq_flag);
-    local_fiq_disable();
+        spin_lock_irqsave(&lock, flags);
+        raw_local_save_flags(fiq_flag);
+        local_fiq_disable();
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
-    vdec_clock_prepare_switch();
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+        if (!IS_MESON_M8_CPU) {
+            vdec_clock_prepare_switch();
+        }
 #endif
 
-    if (level == 0) {
-        vdec2_clock_enable();
-    } else {
-        vdec2_clock_hi_enable();
-    }
+        if (level == 0) {
+            vdec2_clock_enable();
+        } else {
+            vdec2_clock_hi_enable();
+        }
 
-    raw_local_irq_restore(fiq_flag);
-    spin_unlock_irqrestore(&lock, flags);
+        raw_local_irq_restore(fiq_flag);
+        spin_unlock_irqrestore(&lock, flags);
+    }
 }
 
 static vdec2_usage_t vdec2_usage = USAGE_NONE;
 void set_vdec2_usage(vdec2_usage_t usage)
 {
-    ulong flags;
-    spin_lock_irqsave(&lock, flags);
-    vdec2_usage = usage;
-    spin_unlock_irqrestore(&lock, flags);
+    if (HAS_VDEC2) {
+        ulong flags;
+        spin_lock_irqsave(&lock, flags);
+        vdec2_usage = usage;
+        spin_unlock_irqrestore(&lock, flags);
+    }
 }
 
 vdec2_usage_t get_vdec2_usage(void)
 {
-    return vdec2_usage;
+    if (HAS_VDEC2) {
+        return vdec2_usage;
+    } else {
+        return 0;
+    }
 }
 
 #endif
@@ -617,9 +629,9 @@ static ssize_t clock_level_show(struct class *class, struct class_attribute *att
 
     pbuf += sprintf(pbuf, "%d %d\n", vdec_clock_level(VDEC_1), vdec_clock_level(VDEC_2));
 
-#ifdef HAS_VDEC2
-    pbuf += sprintf(pbuf, "%d\n", vdec_clock_level(VDEC_2));
-#endif
+    if (HAS_VDEC2) {
+        pbuf += sprintf(pbuf, "%d\n", vdec_clock_level(VDEC_2));
+    }
 
 #ifdef HAD_VDEC_HEVC
     pbuf += sprintf(pbuf, "%d\n", vdec_clock_level(VDEC_HEVC);
diff --git a/drivers/amlogic/amports/vdec.h b/drivers/amlogic/amports/vdec.h
index 09cf48ddb135..4a0ca021b068 100755
--- a/drivers/amlogic/amports/vdec.h
+++ b/drivers/amlogic/amports/vdec.h
@@ -56,7 +56,7 @@ extern bool vdec_on(vdec_type_t core);
 #define vdec_poweroff(core)
 #endif
 
-#if HAS_VDEC2
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6TVD
 typedef enum {
     USAGE_NONE,
     USAGE_DEC_4K2K,
diff --git a/drivers/amlogic/amports/vdec_clk.h b/drivers/amlogic/amports/vdec_clk.h
index 845c46c0e6cb..1ef33c6688f0 100755
--- a/drivers/amlogic/amports/vdec_clk.h
+++ b/drivers/amlogic/amports/vdec_clk.h
@@ -42,9 +42,7 @@ extern void hevc_clock_on(void);
 extern void hevc_clock_off(void);
 extern int vdec_clock_level(vdec_type_t core);
 
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
 extern void vdec_clock_prepare_switch(void);
 extern void hevc_clock_prepare_switch(void);
-#endif
 
 #endif /* VDEC_CLK_H */
diff --git a/drivers/amlogic/amports/vh264_4k2k.c b/drivers/amlogic/amports/vh264_4k2k.c
index 2b15a379cd08..29b172ff6798 100755
--- a/drivers/amlogic/amports/vh264_4k2k.c
+++ b/drivers/amlogic/amports/vh264_4k2k.c
@@ -58,6 +58,7 @@
 #define PUT_INTERVAL        (HZ/100)
 #define ERROR_RESET_COUNT   500
 
+#define H264_4K2K_SINGLE_CORE   IS_MESON_M8M2_CPU
 
 
 extern void amvenc_dos_top_reg_fix(void);
@@ -73,9 +74,7 @@ static void vh264_4k2k_local_init(void);
 static void vh264_4k2k_put_timer_func(unsigned long arg);
 
 static const char vh264_4k2k_dec_id[] = "vh264_4k2k-dev";
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 static const char vh264_4k2k_dec_id2[] = "vh264_4k2k-vdec2-dev";
-#endif
 
 #define PROVIDER_NAME   "decoder.h264_4k2k"
 
@@ -138,7 +137,6 @@ static struct device *cma_dev;
 #define REF_START_VIEW_0        AV_SCRATCH_M
 #define REF_START_VIEW_1        AV_SCRATCH_N
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 #define VDEC2_MAILBOX_COMMAND         VDEC2_AV_SCRATCH_0
 #define VDEC2_MAILBOX_DATA_0          VDEC2_AV_SCRATCH_1
 #define VDEC2_MAILBOX_DATA_1          VDEC2_AV_SCRATCH_2
@@ -162,7 +160,6 @@ static struct device *cma_dev;
 #define VDEC2_RESERVED_REG_L          VDEC2_AV_SCRATCH_L
 #define VDEC2_REF_START_VIEW_0        VDEC2_AV_SCRATCH_M
 #define VDEC2_REF_START_VIEW_1        VDEC2_AV_SCRATCH_N
-#endif
 
 /********************************************
  *  DECODE_STATUS Define
@@ -325,9 +322,9 @@ static int vh264_4k2k_event_cb(int type, void *data, void *private_data)
         unsigned long flags;
         amvdec_stop();
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-        amvdec2_stop();
-#endif
+        if (!H264_4K2K_SINGLE_CORE) {
+            amvdec2_stop();
+        }
 
 #ifndef CONFIG_POST_PROCESS_MANAGER
         vf_light_unreg_provider(&vh264_4k2k_vf_prov);
@@ -341,9 +338,9 @@ static int vh264_4k2k_event_cb(int type, void *data, void *private_data)
 #endif
         amvdec_start();
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-        amvdec2_start();
-#endif
+        if (!H264_4K2K_SINGLE_CORE) {
+            amvdec2_start();
+        }
     }
 
     return 0;
@@ -355,9 +352,7 @@ int init_canvas(int start_addr, long dpb_size, int dpb_number, int mb_width, int
     int i;
     int mb_total;
     int canvas_addr = ANC0_CANVAS_ADDR;
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
     int vdec2_canvas_addr = VDEC2_ANC0_CANVAS_ADDR;
-#endif
     int index = AMVDEC_H264_4K2K_CANVAS_INDEX;
     u32 disp_addr = 0xffffffff;
     bool use_alloc = false;
@@ -375,9 +370,10 @@ int init_canvas(int start_addr, long dpb_size, int dpb_number, int mb_width, int
     
     for (i=0; i<dpb_number; i++) {
         WRITE_VREG(canvas_addr++, index | ((index+1)<<8) | ((index+1)<<16));
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-        WRITE_VREG(vdec2_canvas_addr++, index | ((index+1)<<8) | ((index+1)<<16));
-#endif
+        if (!H264_4K2K_SINGLE_CORE) {
+            WRITE_VREG(vdec2_canvas_addr++, index | ((index+1)<<8) | ((index+1)<<16));
+        }
+
         if (((dpb_addr + (mb_total << 8) + (mb_total << 7)) >= decoder_buffer_end) && (!use_alloc)) {
             printk("start alloc for %d/%d\n", i, dpb_number);
             use_alloc = true;
@@ -616,9 +612,9 @@ static void do_alloc_work(struct work_struct *work)
         frame_height = mb_height<<4;
 
     WRITE_VREG(REF_START_VIEW_0, video_domain_addr(ref_start_addr));
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_REF_START_VIEW_0, video_domain_addr(ref_start_addr));
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_REF_START_VIEW_0, video_domain_addr(ref_start_addr));
+    }
 
     WRITE_VREG(MAILBOX_DATA_0, (max_dec_frame_buffering << 8) | (total_dec_frame_buffering << 0));
     WRITE_VREG(MAILBOX_DATA_1, ref_size);
@@ -744,7 +740,6 @@ static irqreturn_t vh264_4k2k_isr(int irq, void *dev_id)
 }
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 static irqreturn_t vh264_4k2k_vdec2_isr(int irq, void *dev_id)
 {
     int ret = READ_VREG(VDEC2_MAILBOX_COMMAND);
@@ -797,7 +792,6 @@ static irqreturn_t vh264_4k2k_vdec2_isr(int irq, void *dev_id)
     return IRQ_HANDLED;
 }
 #endif
-#endif
 
 static void vh264_4k2k_put_timer_func(unsigned long arg)
 {
@@ -948,7 +942,6 @@ static void H264_DECODE_INIT(void)
     WRITE_VREG(DECODE_STATUS, 1); // Set decode status to DECODE_START_HEADER
 }
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
 static void H264_DECODE2_INIT(void)
 {
     int i;
@@ -1014,23 +1007,22 @@ static void H264_DECODE2_INIT(void)
     WRITE_VREG(VDEC2_CURRENT_SPS_PPS, 0xffff); // Set current SPS/PPS to NULL
     WRITE_VREG(VDEC2_DECODE_STATUS, 1); // Set decode status to DECODE_START_HEADER
 }
-#endif
 
 static void vh264_4k2k_prot_init(void)
 {
     /* clear mailbox interrupt */
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_ASSIST_MBOX0_CLR_REG, 1);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_ASSIST_MBOX0_CLR_REG, 1);
+    }
 #endif
     WRITE_VREG(VDEC_ASSIST_MBOX1_CLR_REG, 1);
 
     /* enable mailbox interrupt */
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_ASSIST_MBOX0_MASK, 1);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_ASSIST_MBOX0_MASK, 1);
+    }
 #endif
     WRITE_VREG(VDEC_ASSIST_MBOX1_MASK, 1);
 
@@ -1038,9 +1030,9 @@ static void vh264_4k2k_prot_init(void)
     WRITE_VREG(PSCALE_CTRL, 0);
 
     H264_DECODE_INIT();
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    H264_DECODE2_INIT();
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        H264_DECODE2_INIT();
+    }
 
     WRITE_VREG(DOS_SW_RESET0, (1<<11));
     WRITE_VREG(DOS_SW_RESET0, 0);
@@ -1049,38 +1041,38 @@ static void vh264_4k2k_prot_init(void)
     READ_VREG(DOS_SW_RESET0);
     READ_VREG(DOS_SW_RESET0);
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(DOS_SW_RESET2, (1<<11));
-    WRITE_VREG(DOS_SW_RESET2, 0);
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(DOS_SW_RESET2, (1<<11));
+        WRITE_VREG(DOS_SW_RESET2, 0);
 
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
-    READ_VREG(DOS_SW_RESET2);
-#endif
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+        READ_VREG(DOS_SW_RESET2);
+    }
 
     WRITE_VREG(MAILBOX_COMMAND, 0);
     WRITE_VREG(BUFFER_RECYCLE, 0);
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_MAILBOX_COMMAND, 0);
-    WRITE_VREG(VDEC2_BUFFER_RECYCLE, 0);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_MAILBOX_COMMAND, 0);
+        WRITE_VREG(VDEC2_BUFFER_RECYCLE, 0);
+    }
 
     CLEAR_VREG_MASK(MDEC_PIC_DC_CTRL, 1<<17);
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    CLEAR_VREG_MASK(VDEC2_MDEC_PIC_DC_CTRL, 1<<17);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        CLEAR_VREG_MASK(VDEC2_MDEC_PIC_DC_CTRL, 1<<17);
+    }
 
     /* set VDEC Master/ID 0 */
     WRITE_VREG(MS_ID, (1<<7)|(0<<0));
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    /* set VDEC2 Slave/ID 0 */
-    WRITE_VREG(VDEC2_MS_ID, (0<<7)|(1<<0));
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        /* set VDEC2 Slave/ID 0 */
+        WRITE_VREG(VDEC2_MS_ID, (0<<7)|(1<<0));
+    }
     WRITE_VREG(DECODE_SKIP_PICTURE, 0);
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_DECODE_SKIP_PICTURE, 0);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_DECODE_SKIP_PICTURE, 0);
+    }
 
     WRITE_VREG(PRE_MASTER_UPDATE_TIMES, 0);
     WRITE_VREG(SLAVE_WAIT_DPB_UPDATE, 0);
@@ -1096,15 +1088,15 @@ static void vh264_4k2k_prot_init(void)
     WRITE_VREG(FATAL_ERROR, 0);
 
     SET_VREG_MASK(MDEC_PIC_DC_CTRL, 1<<17);
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    SET_VREG_MASK(VDEC2_MDEC_PIC_DC_CTRL, 1<<17);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        SET_VREG_MASK(VDEC2_MDEC_PIC_DC_CTRL, 1<<17);
+    }
 
     WRITE_VREG(MDEC_PIC_DC_THRESH, 0x404038aa);
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_MDEC_PIC_DC_THRESH, 0x404038aa);
-    amvenc_dos_top_reg_fix();
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_MDEC_PIC_DC_THRESH, 0x404038aa);
+        amvenc_dos_top_reg_fix();
+    }
 
 #ifdef DOUBLE_WRITE
     WRITE_VREG(MDEC_DOUBLEW_CFG0, (0   << 31) | // half y address
@@ -1122,23 +1114,23 @@ static void vh264_4k2k_prot_init(void)
                                   (0   <<  4) | // Pixel sel by horizontal, 0x:1/2 10:left 11:right
                                   (0   <<  1) | // Endian Control for Luma
                                   (1   <<  0)); // Double Write Enable
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_MDEC_DOUBLEW_CFG0, (0   << 31) | // half y address
-                                  (1   << 30) | // 0:No Merge 1:Automatic Merge
-                                  (0   << 28) | // Field Picture, 0x:no skip 10:top only 11:bottom only
-                                  (0   << 27) | // Source from, 1:MCW 0:DBLK
-                                  (0   << 24) | // Endian Control for Chroma
-                                  (0   << 18) | // DMA ID
-                                  (0   << 12) | // DMA Burst Number
-                                  (0   << 11) | // DMA Urgent
-                                  (0   << 10) | // 1:Round 0:Truncation
-                                  (1   <<  9) | // Size by vertical,   0:original size 1: 1/2 shrunken size
-                                  (1   <<  8) | // Size by horizontal, 0:original size 1: 1/2 shrunken size
-                                  (0   <<  6) | // Pixel sel by vertical,   0x:1/2 10:up 11:down
-                                  (0   <<  4) | // Pixel sel by horizontal, 0x:1/2 10:left 11:right
-                                  (0   <<  1) | // Endian Control for Luma
-                                  (1   <<  0)); // Double Write Enable
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_MDEC_DOUBLEW_CFG0, (0   << 31) | // half y address
+                                      (1   << 30) | // 0:No Merge 1:Automatic Merge
+                                      (0   << 28) | // Field Picture, 0x:no skip 10:top only 11:bottom only
+                                      (0   << 27) | // Source from, 1:MCW 0:DBLK
+                                      (0   << 24) | // Endian Control for Chroma
+                                      (0   << 18) | // DMA ID
+                                      (0   << 12) | // DMA Burst Number
+                                      (0   << 11) | // DMA Urgent
+                                      (0   << 10) | // 1:Round 0:Truncation
+                                      (1   <<  9) | // Size by vertical,   0:original size 1: 1/2 shrunken size
+                                      (1   <<  8) | // Size by horizontal, 0:original size 1: 1/2 shrunken size
+                                      (0   <<  6) | // Pixel sel by vertical,   0x:1/2 10:up 11:down
+                                      (0   <<  4) | // Pixel sel by horizontal, 0x:1/2 10:left 11:right
+                                      (0   <<  1) | // Endian Control for Luma
+                                      (1   <<  0)); // Double Write Enable
+    }
 #endif
 }
 
@@ -1205,31 +1197,50 @@ static s32 vh264_4k2k_init(void)
 
     amvdec_enable();
 
-    if (amvdec_loadmc(vh264_4k2k_mc) < 0) {
-        amvdec_disable();
-        iounmap(p);
-        return -EBUSY;
+    if (H264_4K2K_SINGLE_CORE) {
+        if (amvdec_loadmc(vh264_4k2k_mc_single) < 0) {
+            amvdec_disable();
+            iounmap(p);
+            return -EBUSY;
+        }
+    } else {
+        if (amvdec_loadmc(vh264_4k2k_mc) < 0) {
+            amvdec_disable();
+            iounmap(p);
+            return -EBUSY;
+        }
     }
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    amvdec2_enable();
+    if (!H264_4K2K_SINGLE_CORE) {
+        amvdec2_enable();
 
-    if (amvdec2_loadmc(vh264_4k2k_mc) < 0) {
-        amvdec_disable();
-        amvdec2_disable();
-        iounmap(p);
-        return -EBUSY;
+        if (amvdec2_loadmc(vh264_4k2k_mc) < 0) {
+            amvdec_disable();
+            amvdec2_disable();
+            iounmap(p);
+            return -EBUSY;
+        }
     }
-#endif
 
-    memcpy(p,
-           vh264_4k2k_header_mc, sizeof(vh264_4k2k_header_mc));
+    if (H264_4K2K_SINGLE_CORE) {
+        memcpy(p,
+               vh264_4k2k_header_mc_single, sizeof(vh264_4k2k_header_mc_single));
 
-    memcpy((void *)((ulong)p + 0x1000),
-           vh264_4k2k_mmco_mc, sizeof(vh264_4k2k_mmco_mc));
+        memcpy((void *)((ulong)p + 0x1000),
+               vh264_4k2k_mmco_mc_single, sizeof(vh264_4k2k_mmco_mc_single));
+
+        memcpy((void *)((ulong)p + 0x3000),
+               vh264_4k2k_slice_mc_single, sizeof(vh264_4k2k_slice_mc_single));
+    } else {
+        memcpy(p,
+               vh264_4k2k_header_mc, sizeof(vh264_4k2k_header_mc));
 
-    memcpy((void *)((ulong)p + 0x3000),
-           vh264_4k2k_slice_mc, sizeof(vh264_4k2k_slice_mc));
+        memcpy((void *)((ulong)p + 0x1000),
+               vh264_4k2k_mmco_mc, sizeof(vh264_4k2k_mmco_mc));
+
+        memcpy((void *)((ulong)p + 0x3000),
+               vh264_4k2k_slice_mc, sizeof(vh264_4k2k_slice_mc));
+    }
 
     iounmap(p);
 
@@ -1242,23 +1253,24 @@ static s32 vh264_4k2k_init(void)
                     IRQF_SHARED, "vh264_4k2k-irq", (void *)vh264_4k2k_dec_id)) {
         printk("vh264_4k2k irq register error.\n");
         amvdec_disable();
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE		
-        amvdec2_disable();
-#endif
+        if (!H264_4K2K_SINGLE_CORE) {
+            amvdec2_disable();
+        }
+        
         return -ENOENT;
     }
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    if (request_irq(INT_VDEC2, vh264_4k2k_vdec2_isr,
-                    IRQF_SHARED, "vh264_4k2k-vdec2-irq", (void *)vh264_4k2k_dec_id2)) {
-        printk("vh264_4k2k irq register error.\n");
-        free_irq(INT_VDEC, (void *)vh264_4k2k_dec_id);
-        amvdec_disable();
-        amvdec2_disable();
-        return -ENOENT;
+    if (!H264_4K2K_SINGLE_CORE) {
+        if (request_irq(INT_VDEC2, vh264_4k2k_vdec2_isr,
+                        IRQF_SHARED, "vh264_4k2k-vdec2-irq", (void *)vh264_4k2k_dec_id2)) {
+            printk("vh264_4k2k irq register error.\n");
+            free_irq(INT_VDEC, (void *)vh264_4k2k_dec_id);
+            amvdec_disable();
+            amvdec2_disable();
+            return -ENOENT;
+        }
     }
-#endif
 #endif
 
     stat |= STAT_ISR_REG;
@@ -1278,9 +1290,9 @@ static s32 vh264_4k2k_init(void)
     stat |= STAT_TIMER_ARM;
 
     amvdec_start();
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    amvdec2_start();
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        amvdec2_start();
+    }
 
     stat |= STAT_VDEC_RUN;
 
@@ -1298,22 +1310,23 @@ static int vh264_4k2k_stop(void)
 
     if (stat & STAT_VDEC_RUN) {
         amvdec_stop();
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-        amvdec2_stop();
-#endif
+        if (!H264_4K2K_SINGLE_CORE) {
+            amvdec2_stop();
+        }
         stat &= ~STAT_VDEC_RUN;
     }
 
     if (stat & STAT_ISR_REG) {
         WRITE_VREG(VDEC_ASSIST_MBOX1_MASK, 0);
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-        WRITE_VREG(VDEC2_ASSIST_MBOX0_MASK, 0);
-#endif
+        if (!H264_4K2K_SINGLE_CORE) {
+            WRITE_VREG(VDEC2_ASSIST_MBOX0_MASK, 0);
+        }
+
         free_irq(INT_VDEC, (void *)vh264_4k2k_dec_id);
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-        free_irq(INT_VDEC2, (void *)vh264_4k2k_dec_id2);
-#endif
+        if (!H264_4K2K_SINGLE_CORE) {
+            free_irq(INT_VDEC2, (void *)vh264_4k2k_dec_id2);
+        }
 #endif
         stat &= ~STAT_ISR_REG;
     }
@@ -1330,15 +1343,15 @@ static int vh264_4k2k_stop(void)
 
 #ifdef DOUBLE_WRITE
     WRITE_VREG(MDEC_DOUBLEW_CFG0, 0);
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    WRITE_VREG(VDEC2_MDEC_DOUBLEW_CFG0, 0);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        WRITE_VREG(VDEC2_MDEC_DOUBLEW_CFG0, 0);
+    }
 #endif
 
     amvdec_disable();
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    amvdec2_disable();
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        amvdec2_disable();
+    }
 
     canvas_read((READ_VCBUS_REG(VD1_IF0_CANVAS0) & 0xff), &cur_canvas);
     disp_addr = cur_canvas.addr;
@@ -1362,15 +1375,14 @@ static int vh264_4k2k_stop(void)
     return 0;
 }
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-#if (HAS_VDEC2)&&(HAS_HDEC)
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
 extern void AbortEncodeWithVdec2(int abort);
 #endif
-#endif
 
 static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
 {
     struct resource *mem;
+    int count = 0;
 
     printk("amvdec_h264_4k2k probe start.\n");
     mutex_lock(&vh264_4k2k_mutex);
@@ -1393,40 +1405,47 @@ static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
 
     cma_dev = (struct device *)mem[2].start;
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-#if (HAS_VDEC2)&&(HAS_HDEC)
-    if(get_vdec2_usage() != USAGE_NONE)
-        AbortEncodeWithVdec2(1);
-    int count = 0;
-    while((get_vdec2_usage() != USAGE_NONE)&&(count < 10)){
-        msleep(50);
-        count++;
-    }
-
-    if(get_vdec2_usage() != USAGE_NONE){
-        printk("\namvdec_h264_4k2k --- vdec2 is used by encode now.\n");
-        mutex_unlock(&vh264_4k2k_mutex);
-        return -EBUSY;
-    }
-
-    if (vdec_on(VDEC_2)) {//++++
-        vdec_poweroff(VDEC_2);//++++
-        mdelay(10);
-    }
-
-    set_vdec2_usage(USAGE_DEC_4K2K);
-    AbortEncodeWithVdec2(0);
-    vdec_poweron(VDEC_2);
+    if (!H264_4K2K_SINGLE_CORE) {
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
+        if(get_vdec2_usage() != USAGE_NONE)
+            AbortEncodeWithVdec2(1);
+        int count = 0;
+        while((get_vdec2_usage() != USAGE_NONE)&&(count < 10)){
+            msleep(50);
+            count++;
+        }
+  
+        if(get_vdec2_usage() != USAGE_NONE){
+            printk("\namvdec_h264_4k2k --- vdec2 is used by encode now.\n");
+            mutex_unlock(&vh264_4k2k_mutex);
+            return -EBUSY;
+        }
 #endif
+
+        if (vdec_on(VDEC_2)) {//++++
+            vdec_poweroff(VDEC_2);//++++
+            mdelay(10);
+        }
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
+        set_vdec2_usage(USAGE_DEC_4K2K);
+        AbortEncodeWithVdec2(0);
 #endif
+        vdec_poweron(VDEC_2);
+    }
 
     vdec_power_mode(1);
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    vdec2_power_mode(1);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        vdec2_power_mode(1);
+    }
 
     if (vh264_4k2k_init() < 0) {
         printk("\namvdec_h264_4k2k init failed.\n");
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
+        if (!H264_4K2K_SINGLE_CORE) {
+            set_vdec2_usage(USAGE_NONE);
+            AbortEncodeWithVdec2(0);
+        }
+#endif
         mutex_unlock(&vh264_4k2k_mutex);
         return -ENODEV;
     }
@@ -1451,12 +1470,12 @@ static int amvdec_h264_4k2k_remove(struct platform_device *pdev)
 
     vh264_4k2k_stop();
 
-#ifndef CONFIG_H264_4K2K_SINGLE_CORE
-    vdec_poweroff(VDEC_2);
-#if HAS_VDEC2
-    set_vdec2_usage(USAGE_NONE);
-#endif
+    if (!H264_4K2K_SINGLE_CORE) {
+        vdec_poweroff(VDEC_2);
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
+        set_vdec2_usage(USAGE_NONE);
 #endif
+    }
 
 #ifdef DEBUG_PTS
     printk("pts missed %ld, pts hit %ld, duration %d\n",
diff --git a/drivers/amlogic/amports/vh264_4k2k_mc.h b/drivers/amlogic/amports/vh264_4k2k_mc.h
index c7fa365e81ea..3df36f0d8029 100755
--- a/drivers/amlogic/amports/vh264_4k2k_mc.h
+++ b/drivers/amlogic/amports/vh264_4k2k_mc.h
@@ -27,4 +27,9 @@ extern const u32 vh264_4k2k_header_mc[0x400];
 extern const u32 vh264_4k2k_mmco_mc[0x800];
 extern const u32 vh264_4k2k_slice_mc[0x1000];
 
+extern const u32 vh264_4k2k_mc_single[0x1000];
+extern const u32 vh264_4k2k_header_mc_single[0x400];
+extern const u32 vh264_4k2k_mmco_mc_single[0x800];
+extern const u32 vh264_4k2k_slice_mc_single[0x1000];
+
 #endif
diff --git a/drivers/amlogic/amports/vh265.c b/drivers/amlogic/amports/vh265.c
index 1347d216c178..85b59bccf23a 100755
--- a/drivers/amlogic/amports/vh265.c
+++ b/drivers/amlogic/amports/vh265.c
@@ -3433,11 +3433,7 @@ static struct platform_driver amvdec_h265_driver = {
 
 static struct codec_profile_t amvdec_h265_profile = {
     .name = "hevc",
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8M2
-    .profile = "4k" //support 4k
-#else
     .profile = ""
-#endif
 };
 
 static int __init amvdec_h265_driver_init_module(void)
@@ -3449,6 +3445,12 @@ static int __init amvdec_h265_driver_init_module(void)
         return -ENODEV;
     }
 
+    #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    if (!IS_MESON_M8_CPU) {
+        strcpy(amvdec_h265_profile.profile, "4k"); // support 4k
+    }
+    #endif
+
     vcodec_profile_register(&amvdec_h265_profile);
 
     return 0;
diff --git a/drivers/amlogic/amports/vreal.c b/drivers/amlogic/amports/vreal.c
index 74f65e23178b..835e1562c9ea 100755
--- a/drivers/amlogic/amports/vreal.c
+++ b/drivers/amlogic/amports/vreal.c
@@ -789,7 +789,8 @@ void vreal_set_fatal_flag(int flag)
     }
 }
 
-#if (HAS_VDEC2)&&(HAS_HDEC)
+
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
 extern void AbortEncodeWithVdec2(int abort);
 #endif
 
@@ -808,26 +809,29 @@ static int amvdec_real_probe(struct platform_device *pdev)
 
     memcpy(&vreal_amstream_dec_info, (void *)mem[1].start, sizeof(vreal_amstream_dec_info));
 
-#if (HAS_VDEC2)&&(HAS_HDEC)
-    // disable vdec2 dblk when miracast.
-    if(get_vdec2_usage() != USAGE_NONE)
-        AbortEncodeWithVdec2(1);
-    int count = 0;
-    while((get_vdec2_usage() != USAGE_NONE)&&(count < 10)){
-        msleep(50);
-        count++;
-    }
-
-    if(get_vdec2_usage() != USAGE_NONE){
-        printk("\namvdec_real_probe --- stop vdec2 fail.\n");
-        return -EBUSY;
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
+    if(IS_MESON_M8_CPU){
+        // disable vdec2 dblk when miracast.
+        if(get_vdec2_usage() != USAGE_NONE)
+            AbortEncodeWithVdec2(1);
+        int count = 0;
+        while((get_vdec2_usage() != USAGE_NONE)&&(count < 10)){
+            msleep(50);
+            count++;
+        }
+    
+        if(get_vdec2_usage() != USAGE_NONE){
+            printk("\namvdec_real_probe --- stop vdec2 fail.\n");
+            return -EBUSY;
+        }
     }
 #endif
 
     if (vreal_init() < 0) {
         printk("amvdec_real init failed.\n");
-#if (HAS_VDEC2)&&(HAS_HDEC)
-        AbortEncodeWithVdec2(0);
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
+        if(IS_MESON_M8_CPU)
+            AbortEncodeWithVdec2(0);
 #endif
         return -ENODEV;
     }
@@ -863,8 +867,9 @@ static int amvdec_real_remove(struct platform_device *pdev)
     rmparser_release();
 	
     amvdec_disable();
-#if (HAS_VDEC2)&&(HAS_HDEC)
-    AbortEncodeWithVdec2(0);
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8)&&(HAS_HDEC)
+    if(IS_MESON_M8_CPU)
+        AbortEncodeWithVdec2(0);
 #endif
     printk("frame duration %d, frames %d\n", frame_dur, frame_count);
     return 0;
diff --git a/drivers/amlogic/canvas/canvas.c b/drivers/amlogic/canvas/canvas.c
index 60154def9f55..82031111a5d2 100755
--- a/drivers/amlogic/canvas/canvas.c
+++ b/drivers/amlogic/canvas/canvas.c
@@ -44,6 +44,14 @@
 #define CANVAS_NUM	192
 #endif
 
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
+#define GM8_CANVAS_REG 0
+#elif MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#define GM8_CANVAS_REG 1
+#else
+#define GM8_CANVAS_REG 0
+#endif
+
 static struct platform_device *canvas_dev;
 static DEFINE_SPINLOCK(lock);
 static canvas_t canvasPool[CANVAS_NUM];
@@ -61,7 +69,7 @@ void canvas_config(u32 index, ulong addr, u32 width,
     raw_local_save_flags(fiq_flag);
     local_fiq_disable();
     spin_lock_irqsave(&lock, flags);
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) 
+#if GM8_CANVAS_REG 
 	if (IS_MESON_M8M2_CPU)
 	{
 		CANVAS_WRITE(DC_CAV_LUT_DATAL_M8M2,
@@ -128,7 +136,7 @@ void canvas_copy(u32 src, u32 dst)
     height = canvasPool[src].height;
     wrap = canvasPool[src].wrap;
     blkmode = canvasPool[src].blkmode;
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) 
+#if GM8_CANVAS_REG
 	if(IS_MESON_M8M2_CPU)
 	{
 
@@ -191,7 +199,7 @@ void canvas_update_addr(u32 index, u32 addr)
     spin_lock_irqsave(&lock, flags);
 
     canvasPool[index].addr = addr;
-#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) 
+#if GM8_CANVAS_REG
 	if(IS_MESON_M8M2_CPU)
 	{
 
diff --git a/include/linux/amlogic/amports/ptsserv.h b/include/linux/amlogic/amports/ptsserv.h
index 8a51fdfd78a6..14a060e44090 100755
--- a/include/linux/amlogic/amports/ptsserv.h
+++ b/include/linux/amlogic/amports/ptsserv.h
@@ -27,7 +27,7 @@
 enum {
     PTS_TYPE_VIDEO = 0,
     PTS_TYPE_AUDIO = 1,
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8B
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     PTS_TYPE_HEVC  = 2,
     PTS_TYPE_MAX   = 3
 #else
-- 
2.19.0

