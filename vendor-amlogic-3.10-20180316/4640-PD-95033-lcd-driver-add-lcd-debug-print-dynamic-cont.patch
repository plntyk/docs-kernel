From 4e12275f26e78cf4f4349f2929276b102e3149d3 Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Tue, 29 Jul 2014 12:27:01 +0800
Subject: [PATCH 4640/5965] PD#95033: lcd driver: add lcd debug print dynamic
 control. You can disable or enable debug print by sysfs: 'echo 0/1 >
 /sys/class/lcd/print'. Also you can use Macro define LCD_DEBUG_INFO to
 default enable debug print for compiling.

Change-Id: I7b26364f224f986923536ca15d8d0361b91409a0
---
 arch/arm/mach-meson6/lcd/lcd_config.c     |  44 +++---
 arch/arm/mach-meson6/lcd/lcd_config.h     |   2 +-
 arch/arm/mach-meson8/lcd/edp_drv.c        |  42 +++---
 arch/arm/mach-meson8/lcd/lcd_config.c     |  54 +++----
 arch/arm/mach-meson8/lcd/lcd_config.h     |   2 +-
 arch/arm/mach-meson8/lcd/mipi_dsi_util.c  |  72 ++++-----
 arch/arm/mach-meson8b/lcd/lcd_config.c    |  48 +++---
 arch/arm/mach-meson8b/lcd/lcd_config.h    |   2 +-
 arch/arm/mach-meson8b/lcd/mipi_dsi_util.c |  72 ++++-----
 drivers/amlogic/display/vout/lcdoutc.c    | 169 +++++++++++++---------
 include/linux/amlogic/vout/lcdoutc.h      |   7 +-
 11 files changed, 273 insertions(+), 241 deletions(-)

diff --git a/arch/arm/mach-meson6/lcd/lcd_config.c b/arch/arm/mach-meson6/lcd/lcd_config.c
index 502aa6d8ec69..0a4b71545343 100755
--- a/arch/arm/mach-meson6/lcd/lcd_config.c
+++ b/arch/arm/mach-meson6/lcd/lcd_config.c
@@ -76,7 +76,7 @@ static void lcd_ports_ctrl_lvds(Bool_t status)
 		WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 0, 3, 1);	//disable lvds fifo
 	}
 
-	DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl_ttl(Bool_t status)
@@ -145,7 +145,7 @@ static void lcd_ports_ctrl_ttl(Bool_t status)
 			return;
 		}
 	}
-	DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl_mlvds(Bool_t status)
@@ -220,7 +220,7 @@ static void write_gamma_table(u16 *data, u32 rgb_mask, u16 gamma_coeff, u32 gamm
 
 static void set_gamma_table_lcd(unsigned gamma_en)
 {
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
 	lcd_gamma_init_err = 0;
 	if (lcd_Conf->lcd_basic.lcd_type == LCD_DIGITAL_TTL)
@@ -335,7 +335,7 @@ static void set_tcon_lvds(Lcd_Config_t *pConf)
 	Lcd_Timing_t *tcon_adr = &(pConf->lcd_timing);
 	unsigned hs_pol_adj, vs_pol_adj;
 
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 	
 	set_gamma_table_lcd(((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_EN) & 1));
 	
@@ -387,7 +387,7 @@ static void set_tcon_ttl(Lcd_Config_t *pConf)
 	Lcd_Timing_t *tcon_adr = &(pConf->lcd_timing);
 	unsigned hs_pol_adj, vs_pol_adj;
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
 	set_gamma_table_lcd(((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_EN) & 1));
 
@@ -465,7 +465,7 @@ static void set_tcon_mlvds(Lcd_Config_t *pConf)
     int dual_wr_rd_start;
     int i = 0;
 	
-	DBG_PRINT("%s.\n", __FUNCTION__);
+	lcd_print("%s.\n", __FUNCTION__);
 
 	set_gamma_table_lcd(((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_EN) & 1));
 
@@ -586,7 +586,7 @@ static void set_tcon_mlvds(Lcd_Config_t *pConf)
 	WRITE_LCD_REG(MLVDS_DUAL_GATE_CTL_HI,  (data32 >> 16));
 	WRITE_LCD_REG(MLVDS_DUAL_GATE_CTL_LO, (data32 & 0xffff));
 
-	DBG_PRINT("write minilvds tcon 0~7.\n");
+	lcd_print("write minilvds tcon 0~7.\n");
 	for(i = 0; i < 8; i++) {
 		write_tcon_double(&mlvds_tconfig_l[i]);
 	}
@@ -601,7 +601,7 @@ static void set_tcon_mlvds(Lcd_Config_t *pConf)
 static void set_lcd_spread_spectrum(int ss_level)
 {
 	unsigned pll_ctrl2, pll_ctrl3, pll_ctrl4;
-	DBG_PRINT("%s.\n", __FUNCTION__);
+	lcd_print("%s.\n", __FUNCTION__);
 	
 	switch (ss_level) {
 		case 1:  //about 0.5%
@@ -655,7 +655,7 @@ static void vclk_set_lcd(int lcd_type, unsigned long pll_reg, unsigned long vid_
 	unsigned long flags = 0;
 	spin_lock_irqsave(&lcd_clk_lock, flags);
 	
-	DBG_PRINT("%s.\n", __FUNCTION__);
+	lcd_print("%s.\n", __FUNCTION__);
 
 	vid_div_reg = ((vid_div_reg & 0x1ffff) | (1 << 16) | (1 << 15) | (0x3 << 0));	//select vid2_pll and enable clk
 	xd = (clk_ctrl_reg >> CLK_CTRL_XD) & 0xff;
@@ -735,7 +735,7 @@ static void set_pll_lcd(Lcd_Config_t *pConf)
     int lcd_type, ss_level;
     unsigned pll_div_post = 0, phy_clk_div2 = 0;
 
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 
     pll_reg = pConf->lcd_timing.pll_ctrl;
     div_reg = pConf->lcd_timing.div_ctrl;
@@ -800,7 +800,7 @@ static void set_pll_mlvds(Lcd_Config_t *pConf)
     int xd;
 	int lcd_type, ss_level;
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 	
     pll_reg = pConf->lcd_timing.pll_ctrl;
     div_reg = pConf->lcd_timing.div_ctrl;
@@ -853,7 +853,7 @@ static void set_pll_mlvds(Lcd_Config_t *pConf)
 	
 	div_reg = (div_reg | (1 << DIV_CTRL_POST_SEL) | (1 << DIV_CTRL_LVDS_CLK_EN) | ((pll_div_post-1) << DIV_CTRL_DIV_POST) | (phy_clk_div2 << DIV_CTRL_PHY_CLK_DIV2));
 	clk_reg = (pConf->lcd_timing.clk_ctrl & ~(0xff << CLK_CTRL_XD)) | (xd << CLK_CTRL_XD);
-	DBG_PRINT("ss_level=%u(%s), pll_reg=0x%x, div_reg=0x%x, xd=%d.\n", ss_level, lcd_ss_level_table[ss_level], pll_reg, div_reg, xd);
+	lcd_print("ss_level=%u(%s), pll_reg=0x%x, div_reg=0x%x, xd=%d.\n", ss_level, lcd_ss_level_table[ss_level], pll_reg, div_reg, xd);
 	vclk_set_lcd(lcd_type, pll_reg, div_reg, clk_reg);
 	set_lcd_spread_spectrum(ss_level);
 	
@@ -957,7 +957,7 @@ static void set_pll_mlvds(Lcd_Config_t *pConf)
 
 static void set_venc_ttl(Lcd_Config_t *pConf)
 {
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
     WRITE_LCD_REG(ENCT_VIDEO_EN,		0);
 #ifdef CONFIG_AM_TV_OUTPUT2
     if(pConf->lcd_misc_ctrl.vpp_sel)
@@ -994,7 +994,7 @@ static void set_venc_ttl(Lcd_Config_t *pConf)
 
 static void set_venc_lvds(Lcd_Config_t *pConf)
 {
-	DBG_PRINT("%s\n",__FUNCTION__);
+	lcd_print("%s\n",__FUNCTION__);
 
 	WRITE_LCD_REG(ENCL_VIDEO_EN, 0);
 #ifdef CONFIG_AM_TV_OUTPUT2
@@ -1042,7 +1042,7 @@ static void set_venc_mlvds(Lcd_Config_t *pConf)
 	int height = pConf->lcd_basic.v_active;
 	int max_height = pConf->lcd_basic.v_period;
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
     WRITE_LCD_REG(ENCL_VIDEO_EN,           0);
 
@@ -1092,7 +1092,7 @@ static void set_control_lvds(Lcd_Config_t *pConf)
 	unsigned lvds_repack, pn_swap, bit_num;
 	unsigned data32;
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
 	WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 0, 3, 1); // disable lvds fifo
 	
@@ -1164,7 +1164,7 @@ static void set_control_mlvds(Lcd_Config_t *pConf)
 
     unsigned long data32;
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
     
     mlvds_insert_start = test_dual_gate ?
                            ((test_bit_num == 8) ? ((test_pair_num == 6) ? 0x9f : 0xa9) :
@@ -1242,7 +1242,7 @@ static void set_control_mlvds(Lcd_Config_t *pConf)
 static void init_phy_lvds(Lcd_Config_t *pConf)
 {
     unsigned swing_ctrl;
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 	
     WRITE_LCD_REG(LVDS_PHY_CNTL3, 0xee1);
     WRITE_LCD_REG(LVDS_PHY_CNTL4 ,0);
@@ -1279,7 +1279,7 @@ static void init_phy_lvds(Lcd_Config_t *pConf)
 
 static void set_video_adjust(Lcd_Config_t *pConf)
 {
-	DBG_PRINT("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x.\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
+	lcd_print("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x.\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
 	WRITE_LCD_REG(VPP_VADJ2_Y, (pConf->lcd_effect.vadj_brightness << 8) | (pConf->lcd_effect.vadj_contrast << 0));
 	WRITE_LCD_REG(VPP_VADJ2_MA_MB, (pConf->lcd_effect.vadj_saturation << 16));
 	WRITE_LCD_REG(VPP_VADJ2_MC_MD, (pConf->lcd_effect.vadj_saturation << 0));
@@ -1732,9 +1732,9 @@ static void lcd_tcon_config(Lcd_Config_t *pConf)
     pConf->lcd_timing.de_ve_addr = (pConf->lcd_timing.de_vstart + pConf->lcd_basic.v_active - 1) % pConf->lcd_basic.v_period;
 #endif
 
-    //DBG_PRINT("hs_hs_addr=%d, hs_he_addr=%d, hs_vs_addr=%d, hs_ve_addr=%d\n", pConf->lcd_timing.hs_hs_addr, pConf->lcd_timing.hs_he_addr, pConf->lcd_timing.hs_vs_addr, pConf->lcd_timing.hs_ve_addr);
-    //DBG_PRINT("vs_hs_addr=%d, vs_he_addr=%d, vs_vs_addr=%d, vs_ve_addr=%d\n", pConf->lcd_timing.vs_hs_addr, pConf->lcd_timing.vs_he_addr, pConf->lcd_timing.vs_vs_addr, pConf->lcd_timing.vs_ve_addr);
-    //DBG_PRINT("de_hs_addr=%d, de_he_addr=%d, de_vs_addr=%d, de_ve_addr=%d\n", pConf->lcd_timing.de_hs_addr, pConf->lcd_timing.de_he_addr, pConf->lcd_timing.de_vs_addr, pConf->lcd_timing.de_ve_addr);
+    //lcd_print("hs_hs_addr=%d, hs_he_addr=%d, hs_vs_addr=%d, hs_ve_addr=%d\n", pConf->lcd_timing.hs_hs_addr, pConf->lcd_timing.hs_he_addr, pConf->lcd_timing.hs_vs_addr, pConf->lcd_timing.hs_ve_addr);
+    //lcd_print("vs_hs_addr=%d, vs_he_addr=%d, vs_vs_addr=%d, vs_ve_addr=%d\n", pConf->lcd_timing.vs_hs_addr, pConf->lcd_timing.vs_he_addr, pConf->lcd_timing.vs_vs_addr, pConf->lcd_timing.vs_ve_addr);
+    //lcd_print("de_hs_addr=%d, de_he_addr=%d, de_vs_addr=%d, de_ve_addr=%d\n", pConf->lcd_timing.de_hs_addr, pConf->lcd_timing.de_he_addr, pConf->lcd_timing.de_vs_addr, pConf->lcd_timing.de_ve_addr);
 }
 
 static void lcd_control_config_pre(Lcd_Config_t *pConf)
diff --git a/arch/arm/mach-meson6/lcd/lcd_config.h b/arch/arm/mach-meson6/lcd/lcd_config.h
index 7984d73d65a0..3795a0603775 100755
--- a/arch/arm/mach-meson6/lcd/lcd_config.h
+++ b/arch/arm/mach-meson6/lcd/lcd_config.h
@@ -8,7 +8,7 @@
 //lcd driver version
 //**********************************
 #define LCD_DRV_TYPE      "c6"
-#define LCD_DRV_DATE      "20140703"
+#define LCD_DRV_DATE      "20140728"
 //**********************************
 
 /* for GAMMA_CNTL_PORT */
diff --git a/arch/arm/mach-meson8/lcd/edp_drv.c b/arch/arm/mach-meson8/lcd/edp_drv.c
index 1fe725eb83a9..9d8abc4f7fe1 100755
--- a/arch/arm/mach-meson8/lcd/edp_drv.c
+++ b/arch/arm/mach-meson8/lcd/edp_drv.c
@@ -279,7 +279,7 @@ static void dptx_set_MSA(EDP_MSA_t *vm)
     WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_MISC1, 0x00000000);
     WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_M_VID, (vm->clk / 1000)); //unit: 1kHz
     WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_N_VID, n_vid);             //unit: 10kHz
-    WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_TRANSFER_UNIT_SIZE, 32);    
+    WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_TRANSFER_UNIT_SIZE, 32);
     WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_DATA_COUNT_PER_LANE, data_per_lane);// bytes per lane
     WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_USER_PIXEL_WIDTH, vm->ppc);
 }
@@ -345,7 +345,7 @@ static int dptx_init_downspread(unsigned char ss_enable)
 {
 	int status = 0;
 	
-	DBG_PRINT("set spread spectrum\n");
+	lcd_print("set spread spectrum\n");
 	ss_enable = (ss_enable > 0) ? 1 : 0;
 	
 	//set in transmitter
@@ -846,7 +846,7 @@ static int trdp_set_link_rate(unsigned char link_rate)
 {
 	int status = VAL_EDP_TX_AUX_OPERATION_SUCCESS;
 	
-	DBG_PRINT("set link rate\n");
+	lcd_print("set link rate\n");
 	if (link_rate != READ_DPTX_REG(EDP_TX_LINK_BW_SET)) {
 		WRITE_DPTX_REG(EDP_TX_LINK_BW_SET, link_rate);
 		if (status)
@@ -871,7 +871,7 @@ static int trdp_set_lane_count(unsigned char lane_count)
 	int status = 0;
 	unsigned enhance_framing_mode;
 	
-	DBG_PRINT("set lane count\n");
+	lcd_print("set lane count\n");
 	switch (lane_count) {
 		case 1:			
 		case 2:			
@@ -894,7 +894,7 @@ static int trdp_set_downspread(unsigned char ss_enable)
 {
 	int status = 0;
 	
-	//DBG_PRINT("set spread spectrum\n");
+	//lcd_print("set spread spectrum\n");
 	ss_enable = (ss_enable > 0) ? 1 : 0;
 	
 	//set in sink device
@@ -1115,7 +1115,7 @@ static int trdp_set_training_pattern(unsigned char pattern)
 {
 	int status = 0;
 	
-	DBG_PRINT("%s: pattern %u\n", __FUNCTION__, pattern);
+	lcd_print("%s: pattern %u\n", __FUNCTION__, pattern);
 	//disable scrambling for any active test pattern
 	if (pattern)
 		pattern |= (1 << 5);
@@ -1332,7 +1332,7 @@ static int trdp_update_status(void)
 	unsigned char aux_data[3];
 	
 	status = trdp_AUXRead(EDP_DPCD_STATUS_LANE_0_1, 3, aux_data);
-	DBG_PRINT("%s: aux_data0=0x%x, aux_data1=0x%x, aux_data2=0x%x, \n", __FUNCTION__, aux_data[0], aux_data[1], aux_data[2]);
+	lcd_print("%s: aux_data0=0x%x, aux_data1=0x%x, aux_data2=0x%x, \n", __FUNCTION__, aux_data[0], aux_data[1], aux_data[2]);
 	if (status == VAL_EDP_TX_OPERATION_SUCCESS)
 		status = (aux_data[2] << 16) | (aux_data[1] << 8) | (aux_data[0] << 0);
 		
@@ -1593,7 +1593,7 @@ static void dplpm_main_stream_enable(unsigned enable)
 	}
 	else
 		WRITE_DPTX_REG(EDP_TX_MAIN_STREAM_ENABLE, 0);
-	DBG_PRINT("displayport main stream %s\n", enable ? "enable" : "disable");
+	lcd_print("displayport main stream %s\n", enable ? "enable" : "disable");
 }
 
 static int dplpm_verify_link_status(void)
@@ -1626,7 +1626,7 @@ static int dplpm_verify_link_status(void)
 	else
 		status = VAL_EDP_LPM_STATUS_RETRAIN;
 
-	DBG_PRINT("%s: %s\n",__FUNCTION__, (status == VAL_EDP_LPM_STATUS_TRAINING_SUCCESS) ? "training success" : "retrain");
+	lcd_print("%s: %s\n",__FUNCTION__, (status == VAL_EDP_LPM_STATUS_TRAINING_SUCCESS) ? "training success" : "retrain");
 	return status;
 }
 
@@ -1685,12 +1685,12 @@ static int dplpm_link_init(EDP_Link_Config_t *link_config)
 		WRITE_LCD_CBUS_REG_BITS(RESET4_MASK, 0, 11, 1);
 		WRITE_LCD_CBUS_REG_BITS(RESET4_REGISTER, 1, 11, 1);
 		WRITE_LCD_CBUS_REG_BITS(RESET4_MASK, 1, 11, 1);
-		DBG_PRINT("reset edp tx\n");
+		lcd_print("reset edp tx\n");
 		mdelay(10);
 		WRITE_LCD_CBUS_REG_BITS(RESET4_MASK, 0, 11, 1);
 		WRITE_LCD_CBUS_REG_BITS(RESET4_REGISTER, 0, 11, 1);
 		WRITE_LCD_CBUS_REG_BITS(RESET4_MASK, 1, 11, 1);
-		DBG_PRINT("release reset edp tx\n");		
+		lcd_print("release reset edp tx\n");		
 		
 		WRITE_DPTX_REG(EDP_TX_AUX_CLOCK_DIVIDER, 170); // Set Aux clk-div by APB clk
 
@@ -1716,7 +1716,7 @@ static int dplpm_link_init(EDP_Link_Config_t *link_config)
 		if (status)
 			return VAL_EDP_TX_OPERATION_FAILED;
 			
-		DBG_PRINT("..... Power up sink link .....\n");
+		lcd_print("..... Power up sink link .....\n");
 		power_state = 1;	//normal operation
 		status = trdp_AUXWrite(EDP_DPCD_SET_POWER, 1, &power_state);
 		mdelay(30);
@@ -1749,10 +1749,10 @@ int dplpm_link_policy_maker(EDP_Link_Config_t *mlconfig, EDP_MSA_t *vm)
 
 	if (status == VAL_EDP_TX_OPERATION_SUCCESS) {
 		status = dplpm_maintain_link();
-#ifdef LCD_DEBUG_INFO
-		trdp_dump_DPCD();
-		trdp_dump_DPCD_training_status();
-#endif
+		if (lcd_print_flag > 0) {
+			trdp_dump_DPCD();
+			trdp_dump_DPCD_training_status();
+		}
 		dptx_set_MSA(vm);
 		WRITE_LCD_REG(ENCL_VIDEO_EN, 1);
 		dplpm_main_stream_enable(1);
@@ -1761,10 +1761,10 @@ int dplpm_link_policy_maker(EDP_Link_Config_t *mlconfig, EDP_MSA_t *vm)
 		DPRINT("displayport initial failed\n");
 		status = VAL_EDP_TX_OPERATION_FAILED;
 	}
-#ifdef LCD_DEBUG_INFO
-	dptx_dump_link_config();
-	dptx_dump_MSA();
-#endif
+	if (lcd_print_flag > 0) {
+		dptx_dump_link_config();
+		dptx_dump_MSA();
+	}
 	
 	//feedback link config to lcd driver
 	mlconfig->max_lane_count = link_config->max_lane_count;
@@ -1782,7 +1782,7 @@ int dplpm_link_off(void)
     int status = 0;
     unsigned char aux_data;
 
-    DBG_PRINT("..... Power down sink link .....\n");
+    lcd_print("..... Power down sink link .....\n");
     aux_data = 2;	//power down mode
     //status = trdp_AUXWrite(EDP_DPCD_SET_POWER, 1, &aux_data);
 
diff --git a/arch/arm/mach-meson8/lcd/lcd_config.c b/arch/arm/mach-meson8/lcd/lcd_config.c
index 4ce791ba673f..2229d1acbf6d 100755
--- a/arch/arm/mach-meson8/lcd/lcd_config.c
+++ b/arch/arm/mach-meson8/lcd/lcd_config.c
@@ -75,7 +75,7 @@ static void lcd_ports_ctrl_lvds(Bool_t status)
 		WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL3, 0x00200000);
 	}
 
-	DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl_mipi(Bool_t status)
@@ -104,7 +104,7 @@ static void lcd_ports_ctrl_mipi(Bool_t status)
         WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL3, 0x00200000);
     }
 
-    DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+    lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl_edp(Bool_t status)
@@ -129,7 +129,7 @@ static void lcd_ports_ctrl_edp(Bool_t status)
 		WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL2, 0x00060000);
 		WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL3, 0x00200000);
 	}
-	DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl_ttl(Bool_t status)
@@ -198,7 +198,7 @@ static void lcd_ports_ctrl_ttl(Bool_t status)
 			return;
 		}
 	}
-	DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl(Bool_t status)
@@ -253,7 +253,7 @@ static int lcd_power_ctrl_video(Bool_t status)
                 break;
         }
     }
-    DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+    lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
     return ret;
 }
 
@@ -306,7 +306,7 @@ static void write_gamma_table(u16 *data, u32 rgb_mask, u16 gamma_coeff, u32 gamm
 
 static void set_gamma_table_lcd(unsigned gamma_en)
 {
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 	lcd_gamma_init_err = 0;
 	write_gamma_table(lcd_Conf->lcd_effect.GammaTableR, GAMMA_SEL_R, lcd_Conf->lcd_effect.gamma_r_coeff, ((lcd_Conf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_REVERSE) & 1));
 	write_gamma_table(lcd_Conf->lcd_effect.GammaTableG, GAMMA_SEL_G, lcd_Conf->lcd_effect.gamma_g_coeff, ((lcd_Conf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_REVERSE) & 1));
@@ -325,7 +325,7 @@ static void set_tcon_lcd(Lcd_Config_t *pConf)
 	Lcd_Timing_t *tcon_adr = &(pConf->lcd_timing);
 	unsigned hs_pol_adj, vs_pol_adj;
 
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 	
 	set_gamma_table_lcd(((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_EN) & 1));
 	
@@ -438,7 +438,7 @@ static void vclk_set_lcd(int lcd_type, unsigned long pll_reg, unsigned long vid_
 	unsigned long flags = 0;
 	spin_lock_irqsave(&lcd_clk_lock, flags);
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
 	edp_div0_sel = (vid_div_reg >> DIV_CTRL_EDP_DIV0) & 0xf;
 	edp_div1_sel = (vid_div_reg >> DIV_CTRL_EDP_DIV1) & 0x7;
@@ -615,7 +615,7 @@ static void set_pll_lcd(Lcd_Config_t *pConf)
     int lcd_type;
     unsigned pll_div_post = 0, phy_clk_div2 = 0;
 
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 
     pll_reg = pConf->lcd_timing.pll_ctrl;
     div_reg = pConf->lcd_timing.div_ctrl;
@@ -677,7 +677,7 @@ static void set_pll_lcd(Lcd_Config_t *pConf)
 
 static void set_venc_lcd(Lcd_Config_t *pConf)
 {
-	DBG_PRINT("%s\n",__FUNCTION__);
+	lcd_print("%s\n",__FUNCTION__);
 
 	WRITE_LCD_REG(ENCL_VIDEO_EN, 0);
 #ifdef CONFIG_AM_TV_OUTPUT2
@@ -721,7 +721,7 @@ static void set_control_lvds(Lcd_Config_t *pConf)
 	unsigned lvds_repack, pn_swap, bit_num;
 	unsigned data32;
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
 	WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 0, 3, 1); // disable lvds fifo
 	
@@ -887,7 +887,7 @@ static int set_control_edp(Lcd_Config_t *pConf)
     EDP_MSA_t  vm;
     EDP_Link_Config_t link_config;
 
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
     //edp link config
     link_config.max_lane_count = 4;
     link_config.max_link_rate = VAL_EDP_TX_LINK_BW_SET_270;
@@ -941,7 +941,7 @@ static void set_control_ttl(Lcd_Config_t *pConf)
 static void init_phy_lvds(Lcd_Config_t *pConf)
 {
 	unsigned swing_ctrl;
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 	
 	WRITE_LCD_REG(LVDS_SER_EN, 0xfff);	//Enable the serializers
 
@@ -977,7 +977,7 @@ static void init_phy_lvds(Lcd_Config_t *pConf)
 
 static void init_phy_mipi(Lcd_Config_t *pConf)
 {
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 
     WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, 0x8);//DIF_REF_CTL0
     WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL2, (0x3e << 16) | (0xa5b8 << 0));//DIF_REF_CTL2:31-16bit, DIF_REF_CTL1:15-0bit
@@ -987,7 +987,7 @@ static void init_phy_mipi(Lcd_Config_t *pConf)
 static void init_phy_edp(Lcd_Config_t *pConf)
 {
     unsigned swing_ctrl;
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 
     switch (pConf->lcd_control.edp_config->vswing) {
         case 0:	//0.4V
@@ -1036,7 +1036,7 @@ static void init_dphy(Lcd_Config_t *pConf)
 
 static void set_video_adjust(Lcd_Config_t *pConf)
 {
-	DBG_PRINT("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x.\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
+	lcd_print("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x.\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
 	WRITE_LCD_REG(VPP_VADJ2_Y, (pConf->lcd_effect.vadj_brightness << 8) | (pConf->lcd_effect.vadj_contrast << 0));
 	WRITE_LCD_REG(VPP_VADJ2_MA_MB, (pConf->lcd_effect.vadj_saturation << 16));
 	WRITE_LCD_REG(VPP_VADJ2_MC_MD, (pConf->lcd_effect.vadj_saturation << 0));
@@ -1292,19 +1292,19 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
             if (fout < ENCL_MAX_CLK_IN) {
                 for (xd = 1; xd <= crt_xd_max; xd++) {
                     div_post_out = fout * xd;
-                    DBG_PRINT("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
+                    lcd_print("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
                     if (div_post_out <= CRT_VID_MAX_CLK_IN) {
                         div_pre_out = div_post_out * div_post;
                         if (div_pre_out <= DIV_POST_MAX_CLK_IN) {
                             for (pre_div_sel = 0; pre_div_sel < div_pre_sel_max; pre_div_sel++) {
                                 div_pre = div_pre_table[pre_div_sel];
                                 fout_pll = div_pre_out * div_pre;
-                                DBG_PRINT("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
+                                lcd_print("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
                                 if ((fout_pll <= dsi_bit_rate_max) && (fout_pll >= dsi_bit_rate_min)){
                                     for (od_sel = OD_SEL_MAX; od_sel > 0; od_sel--) {
                                         od = od_table[od_sel - 1];
                                         pll_vco = fout_pll * od;
-                                        DBG_PRINT("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
+                                        lcd_print("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
                                         if ((pll_vco >= PLL_VCO_MIN) && (pll_vco <= PLL_VCO_MAX)) {
                                             if ((pll_vco >= 2500000) && (pll_vco <= PLL_VCO_MAX)) {
                                                 od_fb = 1;
@@ -1331,7 +1331,7 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
                                             vid_div_pre = pre_div_sel;
                                             crt_xd = xd;
                                             clk_num = 1;
-                                            DBG_PRINT("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
+                                            lcd_print("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
                                                        pll_m, pll_n, pll_od, vid_div_pre, crt_xd, pll_frac, pll_level);
                                             goto generate_clk_done;
                                         }
@@ -1409,19 +1409,19 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
             if (fout < ENCL_MAX_CLK_IN) {
                 for (xd = 1; xd <= crt_xd_max; xd++) {
                     div_post_out = fout * xd;
-                    DBG_PRINT("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
+                    lcd_print("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
                     if (div_post_out <= CRT_VID_MAX_CLK_IN) {
                         div_pre_out = div_post_out * div_post;
                         if (div_pre_out <= DIV_POST_MAX_CLK_IN) {
                             for (pre_div_sel = 0; pre_div_sel < div_pre_sel_max; pre_div_sel++) {
                                 div_pre = div_pre_table[pre_div_sel];
                                 fout_pll = div_pre_out * div_pre;
-                                DBG_PRINT("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
+                                lcd_print("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
                                 if (fout_pll <= DIV_PRE_MAX_CLK_IN) {
                                     for (od_sel = OD_SEL_MAX; od_sel > 0; od_sel--) {
                                         od = od_table[od_sel - 1];
                                         pll_vco = fout_pll * od;
-                                        DBG_PRINT("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
+                                        lcd_print("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
                                         if ((pll_vco >= PLL_VCO_MIN) && (pll_vco <= PLL_VCO_MAX)) {
                                             if ((pll_vco >= 2500000) && (pll_vco <= PLL_VCO_MAX)) {
                                                 od_fb = 1;
@@ -1448,7 +1448,7 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
                                             pll_od = od_sel - 1;
                                             vid_div_pre = pre_div_sel;
                                             crt_xd = xd;
-                                            DBG_PRINT("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
+                                            lcd_print("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
                                                        pll_m, pll_n, pll_od, vid_div_pre, crt_xd, pll_frac, pll_level);
                                             clk_num = 1;
                                             goto generate_clk_done;
@@ -1645,9 +1645,9 @@ static void lcd_tcon_config(Lcd_Config_t *pConf)
     pConf->lcd_timing.de_ve_addr = (pConf->lcd_timing.de_vstart + pConf->lcd_basic.v_active - 1) % pConf->lcd_basic.v_period;
 #endif
 
-    //DBG_PRINT("hs_hs_addr=%d, hs_he_addr=%d, hs_vs_addr=%d, hs_ve_addr=%d\n", pConf->lcd_timing.hs_hs_addr, pConf->lcd_timing.hs_he_addr, pConf->lcd_timing.hs_vs_addr, pConf->lcd_timing.hs_ve_addr);
-    //DBG_PRINT("vs_hs_addr=%d, vs_he_addr=%d, vs_vs_addr=%d, vs_ve_addr=%d\n", pConf->lcd_timing.vs_hs_addr, pConf->lcd_timing.vs_he_addr, pConf->lcd_timing.vs_vs_addr, pConf->lcd_timing.vs_ve_addr);
-    //DBG_PRINT("de_hs_addr=%d, de_he_addr=%d, de_vs_addr=%d, de_ve_addr=%d\n", pConf->lcd_timing.de_hs_addr, pConf->lcd_timing.de_he_addr, pConf->lcd_timing.de_vs_addr, pConf->lcd_timing.de_ve_addr);
+    //lcd_print("hs_hs_addr=%d, hs_he_addr=%d, hs_vs_addr=%d, hs_ve_addr=%d\n", pConf->lcd_timing.hs_hs_addr, pConf->lcd_timing.hs_he_addr, pConf->lcd_timing.hs_vs_addr, pConf->lcd_timing.hs_ve_addr);
+    //lcd_print("vs_hs_addr=%d, vs_he_addr=%d, vs_vs_addr=%d, vs_ve_addr=%d\n", pConf->lcd_timing.vs_hs_addr, pConf->lcd_timing.vs_he_addr, pConf->lcd_timing.vs_vs_addr, pConf->lcd_timing.vs_ve_addr);
+    //lcd_print("de_hs_addr=%d, de_he_addr=%d, de_vs_addr=%d, de_ve_addr=%d\n", pConf->lcd_timing.de_hs_addr, pConf->lcd_timing.de_he_addr, pConf->lcd_timing.de_vs_addr, pConf->lcd_timing.de_ve_addr);
 }
 
 static void lcd_control_config_pre(Lcd_Config_t *pConf)
diff --git a/arch/arm/mach-meson8/lcd/lcd_config.h b/arch/arm/mach-meson8/lcd/lcd_config.h
index bcd657130181..008b7fe52979 100755
--- a/arch/arm/mach-meson8/lcd/lcd_config.h
+++ b/arch/arm/mach-meson8/lcd/lcd_config.h
@@ -7,7 +7,7 @@
 //lcd driver version
 //**********************************
 #define LCD_DRV_TYPE      "c8"
-#define LCD_DRV_DATE      "20140721"
+#define LCD_DRV_DATE      "20140728"
 //**********************************
 
 /* for GAMMA_CNTL_PORT */
diff --git a/arch/arm/mach-meson8/lcd/mipi_dsi_util.c b/arch/arm/mach-meson8/lcd/mipi_dsi_util.c
index 3f143a0de0df..bc5279dfdc64 100755
--- a/arch/arm/mach-meson8/lcd/mipi_dsi_util.c
+++ b/arch/arm/mach-meson8/lcd/mipi_dsi_util.c
@@ -209,7 +209,7 @@ static void check_phy_status(void)
         udelay(6);
     }
     while((( READ_LCD_REG(MIPI_DSI_DWC_PHY_STATUS_OS ) >> BIT_PHY_STOPSTATECLKLANE) & 0x1) == 0){
-        DBG_PRINT(" Waiting STOP STATE LANE\n");
+        lcd_print(" Waiting STOP STATE LANE\n");
         udelay(6);
     }
 }
@@ -318,10 +318,10 @@ static unsigned int wait_for_generic_read_response(void)
 static unsigned int generic_if_wr(unsigned int address, unsigned int data_in)
 {
     if(address != MIPI_DSI_DWC_GEN_HDR_OS && address != MIPI_DSI_DWC_GEN_PLD_DATA_OS) {
-        DBG_PRINT(" Error Address : 0x%x\n", address);
+        lcd_print(" Error Address : 0x%x\n", address);
     }
 
-    DBG_PRINT("address 0x%x = 0x%08x\n", address, data_in);
+    lcd_print("address 0x%x = 0x%08x\n", address, data_in);
     WRITE_LCD_REG(address, data_in);
 
     return 0;
@@ -336,7 +336,7 @@ static unsigned int generic_if_rd(unsigned int address)
     unsigned int data_out;
 
     if(address != MIPI_DSI_DWC_GEN_PLD_DATA_OS) {
-        DBG_PRINT(" Error Address : %x\n", address);
+        lcd_print(" Error Address : %x\n", address);
     }
 
     data_out = READ_DSI_REG(address);
@@ -354,8 +354,8 @@ static unsigned int generic_read_packet_0_para(unsigned char data_type, unsigned
 {
     unsigned int read_data;
 
-    // DBG_PRINT(" para is %x, dcs_command is %x\n", para, dcs_command);
-    // DBG_PRINT(" vc_id %x, data_type is %x\n", vc_id, data_type);
+    // lcd_print(" para is %x, dcs_command is %x\n", para, dcs_command);
+    // lcd_print(" vc_id %x, data_type is %x\n", vc_id, data_type);
     generic_if_wr(MIPI_DSI_DWC_GEN_HDR_OS, ((0 << BIT_GEN_WC_MSBYTE)                           |
                                             (((unsigned int)dcs_command) << BIT_GEN_WC_LSBYTE) |
                                             (((unsigned int)vc_id) << BIT_GEN_VC)              |
@@ -586,7 +586,7 @@ static void set_dsi_phy_config(DSI_Phy_t *dphy, unsigned dsi_ui)
     dphy->init = (DPHY_TIME_INIT(t_ui) + t_lane_byte - 1) / t_lane_byte;
     dphy->wakeup = (DPHY_TIME_WAKEUP(t_ui) + t_lane_byte - 1) / t_lane_byte;
 
-    DBG_PRINT("lp_tesc = 0x%02x\n"
+    lcd_print("lp_tesc = 0x%02x\n"
             "lp_lpx = 0x%02x\n"
             "lp_ta_sure = 0x%02x\n"
             "lp_ta_go = 0x%02x\n"
@@ -656,7 +656,7 @@ static void dsi_phy_init(DSI_Phy_t *dphy, unsigned char lane_num)
 
 static void mipi_dsi_phy_config(Lcd_Config_t *pConf)
 {
-    DBG_PRINT("%s\n", __func__);
+    lcd_print("%s\n", __func__);
     //Digital
     // Power up DSI
     WRITE_LCD_REG(MIPI_DSI_DWC_PWR_UP_OS, 1);
@@ -695,15 +695,15 @@ static void dsi_video_config(Lcd_Config_t *pConf)
     dsi_vid_config.vfp = pConf->lcd_basic.v_period - pConf->lcd_timing.vsync_bp - pConf->lcd_basic.v_active;
     dsi_vid_config.vact = pConf->lcd_basic.v_active;
 
-    DBG_PRINT(" ============= VIDEO TIMING SETTING =============\n");
-    DBG_PRINT(" HLINE        = %d\n", dsi_vid_config.hline);
-    DBG_PRINT(" HSA          = %d\n", dsi_vid_config.hsa);
-    DBG_PRINT(" HBP          = %d\n", dsi_vid_config.hbp);
-    DBG_PRINT(" VSA          = %d\n", dsi_vid_config.vsa);
-    DBG_PRINT(" VBP          = %d\n", dsi_vid_config.vbp);
-    DBG_PRINT(" VFP          = %d\n", dsi_vid_config.vfp);
-    DBG_PRINT(" VACT         = %d\n", dsi_vid_config.vact);
-    DBG_PRINT(" ================================================\n");
+    lcd_print(" ============= VIDEO TIMING SETTING =============\n");
+    lcd_print(" HLINE        = %d\n", dsi_vid_config.hline);
+    lcd_print(" HSA          = %d\n", dsi_vid_config.hsa);
+    lcd_print(" HBP          = %d\n", dsi_vid_config.hbp);
+    lcd_print(" VSA          = %d\n", dsi_vid_config.vsa);
+    lcd_print(" VBP          = %d\n", dsi_vid_config.vbp);
+    lcd_print(" VFP          = %d\n", dsi_vid_config.vfp);
+    lcd_print(" VACT         = %d\n", dsi_vid_config.vact);
+    lcd_print(" ================================================\n");
 }
 
 #define DSI_PACKET_HEADER_CRC      6 //4(header)+2(CRC)
@@ -747,14 +747,14 @@ static void dsi_non_burst_chunk_config(Lcd_Config_t *pConf)
     dsi_vid_config.pixel_per_chunk = pixel_per_chunk;
     dsi_vid_config.num_of_chunk = num_of_chunk;
     dsi_vid_config.vid_null_size = vid_null_size;
-    DBG_PRINT(" ============== NON_BURST SETTINGS =============\n");
-    DBG_PRINT(" pixel_per_chunk       = %d\n", pixel_per_chunk);
-    DBG_PRINT(" num_of_chunk          = %d\n", num_of_chunk);
-    DBG_PRINT(" total_bytes_per_chunk = %d\n", total_bytes_per_chunk);
-    DBG_PRINT(" byte_per_chunk        = %d\n", byte_per_chunk);
-    DBG_PRINT(" chunk_overhead        = %d\n", chunk_overhead);
-    DBG_PRINT(" vid_null_size         = %d\n", vid_null_size);
-    DBG_PRINT(" ===============================================\n");
+    lcd_print(" ============== NON_BURST SETTINGS =============\n");
+    lcd_print(" pixel_per_chunk       = %d\n", pixel_per_chunk);
+    lcd_print(" num_of_chunk          = %d\n", num_of_chunk);
+    lcd_print(" total_bytes_per_chunk = %d\n", total_bytes_per_chunk);
+    lcd_print(" byte_per_chunk        = %d\n", byte_per_chunk);
+    lcd_print(" chunk_overhead        = %d\n", chunk_overhead);
+    lcd_print(" vid_null_size         = %d\n", vid_null_size);
+    lcd_print(" ===============================================\n");
 }
 
 // ----------------------------------------------------------------------------
@@ -898,12 +898,12 @@ static void mipi_dsi_host_config(Lcd_Config_t *pConf)
     unsigned int       operation_mode_init;
     operation_mode_init  = ((pConf->lcd_control.mipi_config->operation_mode >> BIT_OPERATION_MODE_INIT) & 1);
 
-#ifdef LCD_DEBUG_INFO
-    print_info();
-    print_dphy_info();
-#endif
+    if (lcd_print_flag > 0) {
+        print_info();
+        print_dphy_info();
+    }
 
-    DBG_PRINT("Set mipi_dsi_host\n");
+    lcd_print("Set mipi_dsi_host\n");
     set_mipi_dcs(MIPI_DSI_CMD_TRANS_TYPE,              // 0: high speed, 1: low power
                  MIPI_DSI_DCS_ACK_TYPE,                // if need bta ack check
                  MIPI_DSI_TEAR_SWITCH);                // enable tear ack
@@ -939,7 +939,7 @@ void mipi_dsi_link_on(Lcd_Config_t *pConf)
 
     if (pConf->lcd_control.mipi_config->dsi_init_on) {
         init_flag += dsi_write_cmd(pConf->lcd_control.mipi_config->dsi_init_on);
-        DBG_PRINT("dsi init on\n");
+        lcd_print("dsi init on\n");
     }
 
     if (init_flag == 0) {
@@ -961,7 +961,7 @@ void mipi_dsi_link_off(Lcd_Config_t *pConf)
 
     if (pConf->lcd_control.mipi_config->dsi_init_off) {
         dsi_write_cmd(pConf->lcd_control.mipi_config->dsi_init_off);
-        DBG_PRINT("dsi init off\n");
+        lcd_print("dsi init off\n");
     }
 
     if (pConf->lcd_control.mipi_config->lcd_extern_init > 0) {
@@ -1054,14 +1054,14 @@ void set_mipi_dsi_control_config_post(Lcd_Config_t *pConf)
 
     if (cfg->factor_numerator == 0) {
         lanebyteclk = cfg->bit_rate / 8;
-        DBG_PRINT("pixel_clk = %d.%03dMHz, bit_rate = %d.%03dMHz, lanebyteclk = %d.%03dMHz\n", (pclk / 1000000), ((pclk / 1000) % 1000), 
+        lcd_print("pixel_clk = %d.%03dMHz, bit_rate = %d.%03dMHz, lanebyteclk = %d.%03dMHz\n", (pclk / 1000000), ((pclk / 1000) % 1000), 
                  (cfg->bit_rate / 1000000), ((cfg->bit_rate / 1000) % 1000), (lanebyteclk / 1000000), ((lanebyteclk / 1000) % 1000));
 
         cfg->factor_denominator = lanebyteclk/1000;
         cfg->factor_numerator = pclk/1000;
         //cfg->factor_denominator = 10;
     }
-    DBG_PRINT("d=%d, n=%d, factor=%d.%02d\n", cfg->factor_denominator, cfg->factor_numerator, (cfg->factor_denominator/cfg->factor_numerator), 
+    lcd_print("d=%d, n=%d, factor=%d.%02d\n", cfg->factor_denominator, cfg->factor_numerator, (cfg->factor_denominator/cfg->factor_numerator), 
              ((cfg->factor_denominator % cfg->factor_numerator) * 100 / cfg->factor_numerator));
 
     operation_mode = ((cfg->operation_mode >> BIT_OPERATION_MODE_DISP) & 1);
@@ -1090,7 +1090,7 @@ void set_mipi_dsi_control(Lcd_Config_t *pConf)
 
 void mipi_dsi_off(void)
 {
-    DBG_PRINT("poweroff dsi digital\n");
+    lcd_print("poweroff dsi digital\n");
     // Power down DSI
     WRITE_LCD_REG(MIPI_DSI_DWC_PWR_UP_OS, 0);
 
@@ -1099,7 +1099,7 @@ void mipi_dsi_off(void)
     // WRITE_LCD_REG(MIPI_DSI_DWC_PHY_RSTZ_OS, 0xc);
 
     WRITE_DSI_REG(MIPI_DSI_CHAN_CTRL, 0x1f);
-    DBG_PRINT("MIPI_DSI_PHY_CTRL=0x%x\n", READ_DSI_REG(MIPI_DSI_PHY_CTRL)); //read
+    lcd_print("MIPI_DSI_PHY_CTRL=0x%x\n", READ_DSI_REG(MIPI_DSI_PHY_CTRL)); //read
     WRITE_DSI_REG_BITS(MIPI_DSI_PHY_CTRL, 0, 7, 1);
 }
 
diff --git a/arch/arm/mach-meson8b/lcd/lcd_config.c b/arch/arm/mach-meson8b/lcd/lcd_config.c
index 99a8325a0f78..80ff2ce8b7e9 100755
--- a/arch/arm/mach-meson8b/lcd/lcd_config.c
+++ b/arch/arm/mach-meson8b/lcd/lcd_config.c
@@ -74,7 +74,7 @@ static void lcd_ports_ctrl_lvds(Bool_t status)
 		WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL3, 0x00200000);
 	}
 
-	DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl_mipi(Bool_t status)
@@ -103,7 +103,7 @@ static void lcd_ports_ctrl_mipi(Bool_t status)
         WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL3, 0x00200000);
     }
 
-    DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+    lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl_ttl(Bool_t status)
@@ -172,7 +172,7 @@ static void lcd_ports_ctrl_ttl(Bool_t status)
 			return;
 		}
 	}
-	DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 }
 
 static void lcd_ports_ctrl(Bool_t status)
@@ -215,7 +215,7 @@ static int lcd_power_ctrl_video(Bool_t status)
                 break;
         }
     }
-    DBG_PRINT("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+    lcd_print("%s: %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
     return 0;
 }
 
@@ -268,7 +268,7 @@ static void write_gamma_table(u16 *data, u32 rgb_mask, u16 gamma_coeff, u32 gamm
 
 static void set_gamma_table_lcd(unsigned gamma_en)
 {
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 	lcd_gamma_init_err = 0;
 	write_gamma_table(lcd_Conf->lcd_effect.GammaTableR, GAMMA_SEL_R, lcd_Conf->lcd_effect.gamma_r_coeff, ((lcd_Conf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_REVERSE) & 1));
 	write_gamma_table(lcd_Conf->lcd_effect.GammaTableG, GAMMA_SEL_G, lcd_Conf->lcd_effect.gamma_g_coeff, ((lcd_Conf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_REVERSE) & 1));
@@ -287,7 +287,7 @@ static void set_tcon_lcd(Lcd_Config_t *pConf)
 	Lcd_Timing_t *tcon_adr = &(pConf->lcd_timing);
 	unsigned hs_pol_adj, vs_pol_adj;
 
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 	
 	set_gamma_table_lcd(((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_EN) & 1));
 	
@@ -367,7 +367,7 @@ static void vclk_set_lcd(int lcd_type, unsigned long pll_reg, unsigned long vid_
 	unsigned long flags = 0;
 	spin_lock_irqsave(&lcd_clk_lock, flags);
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
 	vid_div_reg = ((vid_div_reg & 0x1ffff) | (1 << 16) | (1 << 15) | (0x3 << 0));	//select vid2_pll and enable clk
 	xd = (clk_ctrl_reg >> CLK_CTRL_XD) & 0xff;
@@ -513,7 +513,7 @@ static void set_pll_lcd(Lcd_Config_t *pConf)
     int lcd_type;
     unsigned pll_div_post = 0, phy_clk_div2 = 0;
 
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 
     pll_reg = pConf->lcd_timing.pll_ctrl;
     div_reg = pConf->lcd_timing.div_ctrl;
@@ -570,7 +570,7 @@ static void set_pll_lcd(Lcd_Config_t *pConf)
 
 static void set_venc_lcd(Lcd_Config_t *pConf)
 {
-	DBG_PRINT("%s\n",__FUNCTION__);
+	lcd_print("%s\n",__FUNCTION__);
 
 	WRITE_LCD_REG(ENCL_VIDEO_EN, 0);
 #ifdef CONFIG_AM_TV_OUTPUT2
@@ -614,7 +614,7 @@ static void set_control_lvds(Lcd_Config_t *pConf)
 	unsigned lvds_repack, pn_swap, bit_num;
 	unsigned data32;
 	
-	DBG_PRINT("%s\n", __FUNCTION__);
+	lcd_print("%s\n", __FUNCTION__);
 
 	WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 0, 3, 1); // disable lvds fifo
 	
@@ -680,7 +680,7 @@ static void set_control_ttl(Lcd_Config_t *pConf)
 static void init_phy_lvds(Lcd_Config_t *pConf)
 {
     unsigned swing_ctrl;
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 	
 	WRITE_LCD_REG(LVDS_SER_EN, 0xfff);	//Enable the serializers
 
@@ -716,7 +716,7 @@ static void init_phy_lvds(Lcd_Config_t *pConf)
 
 static void init_phy_mipi(Lcd_Config_t *pConf)
 {
-    DBG_PRINT("%s\n", __FUNCTION__);
+    lcd_print("%s\n", __FUNCTION__);
 
     WRITE_LCD_CBUS_REG_BITS(HHI_DSI_LVDS_EDP_CNTL1, 1, 4, 1);//swap mipi channels, only for m8baby
 
@@ -745,7 +745,7 @@ static void init_dphy(Lcd_Config_t *pConf)
 
 static void set_video_adjust(Lcd_Config_t *pConf)
 {
-	DBG_PRINT("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x.\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
+	lcd_print("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x.\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
 	WRITE_LCD_REG(VPP_VADJ2_Y, (pConf->lcd_effect.vadj_brightness << 8) | (pConf->lcd_effect.vadj_contrast << 0));
 	WRITE_LCD_REG(VPP_VADJ2_MA_MB, (pConf->lcd_effect.vadj_saturation << 16));
 	WRITE_LCD_REG(VPP_VADJ2_MC_MD, (pConf->lcd_effect.vadj_saturation << 0));
@@ -973,19 +973,19 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
             if (fout < ENCL_MAX_CLK_IN) {
                 for (xd = 1; xd <= crt_xd_max; xd++) {
                     div_post_out = fout * xd;
-                    DBG_PRINT("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
+                    lcd_print("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
                     if (div_post_out <= CRT_VID_MAX_CLK_IN) {
                         div_pre_out = div_post_out * div_post;
                         if (div_pre_out <= DIV_POST_MAX_CLK_IN) {
                             for (pre_div_sel = 0; pre_div_sel < div_pre_sel_max; pre_div_sel++) {
                                 div_pre = div_pre_table[pre_div_sel];
                                 fout_pll = div_pre_out * div_pre;
-                                DBG_PRINT("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
+                                lcd_print("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
                                 if ((fout_pll <= dsi_bit_rate_max) && (fout_pll >= dsi_bit_rate_min)){
                                     for (od_sel = OD_SEL_MAX; od_sel > 0; od_sel--) {
                                         od = od_table[od_sel - 1];
                                         pll_vco = fout_pll * od;
-                                        DBG_PRINT("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
+                                        lcd_print("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
                                         if ((pll_vco >= PLL_VCO_MIN) && (pll_vco <= PLL_VCO_MAX)) {
                                             if ((pll_vco >= 2500000) && (pll_vco <= PLL_VCO_MAX)) {
                                                 od_fb = 1;
@@ -1012,7 +1012,7 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
                                             vid_div_pre = pre_div_sel;
                                             crt_xd = xd;
                                             clk_num = 1;
-                                            DBG_PRINT("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
+                                            lcd_print("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
                                                        pll_m, pll_n, pll_od, vid_div_pre, crt_xd, pll_frac, pll_level);
                                             goto generate_clk_done;
                                         }
@@ -1029,19 +1029,19 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
             if (fout < ENCL_MAX_CLK_IN) {
                 for (xd = 1; xd <= crt_xd_max; xd++) {
                     div_post_out = fout * xd;
-                    DBG_PRINT("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
+                    lcd_print("div_post_out=%d, xd=%d, fout=%d\n",div_post_out, xd, fout);
                     if (div_post_out <= CRT_VID_MAX_CLK_IN) {
                         div_pre_out = div_post_out * div_post;
                         if (div_pre_out <= DIV_POST_MAX_CLK_IN) {
                             for (pre_div_sel = 0; pre_div_sel < div_pre_sel_max; pre_div_sel++) {
                                 div_pre = div_pre_table[pre_div_sel];
                                 fout_pll = div_pre_out * div_pre;
-                                DBG_PRINT("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
+                                lcd_print("pre_div_sel=%d, div_pre=%d, fout_pll=%d\n", pre_div_sel, div_pre, fout_pll);
                                 if (fout_pll <= DIV_PRE_MAX_CLK_IN) {
                                     for (od_sel = OD_SEL_MAX; od_sel > 0; od_sel--) {
                                         od = od_table[od_sel - 1];
                                         pll_vco = fout_pll * od;
-                                        DBG_PRINT("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
+                                        lcd_print("od_sel=%d, od=%d, pll_vco=%d\n", od_sel, od, pll_vco);
                                         if ((pll_vco >= PLL_VCO_MIN) && (pll_vco <= PLL_VCO_MAX)) {
                                             if ((pll_vco >= 2500000) && (pll_vco <= PLL_VCO_MAX)) {
                                                 od_fb = 1;
@@ -1068,7 +1068,7 @@ static void generate_clk_parameter(Lcd_Config_t *pConf)
                                             pll_od = od_sel - 1;
                                             vid_div_pre = pre_div_sel;
                                             crt_xd = xd;
-                                            DBG_PRINT("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
+                                            lcd_print("pll_m=0x%x, pll_n=0x%x, pll_od=0x%x, vid_div_pre=0x%x, crt_xd=0x%x, pll_frac=0x%x, pll_level=%d\n",
                                                        pll_m, pll_n, pll_od, vid_div_pre, crt_xd, pll_frac, pll_level);
                                             clk_num = 1;
                                             goto generate_clk_done;
@@ -1252,9 +1252,9 @@ static void lcd_tcon_config(Lcd_Config_t *pConf)
     pConf->lcd_timing.de_ve_addr = (pConf->lcd_timing.de_vstart + pConf->lcd_basic.v_active - 1) % pConf->lcd_basic.v_period;
 #endif
 
-    //DBG_PRINT("hs_hs_addr=%d, hs_he_addr=%d, hs_vs_addr=%d, hs_ve_addr=%d\n", pConf->lcd_timing.hs_hs_addr, pConf->lcd_timing.hs_he_addr, pConf->lcd_timing.hs_vs_addr, pConf->lcd_timing.hs_ve_addr);
-    //DBG_PRINT("vs_hs_addr=%d, vs_he_addr=%d, vs_vs_addr=%d, vs_ve_addr=%d\n", pConf->lcd_timing.vs_hs_addr, pConf->lcd_timing.vs_he_addr, pConf->lcd_timing.vs_vs_addr, pConf->lcd_timing.vs_ve_addr);
-    //DBG_PRINT("de_hs_addr=%d, de_he_addr=%d, de_vs_addr=%d, de_ve_addr=%d\n", pConf->lcd_timing.de_hs_addr, pConf->lcd_timing.de_he_addr, pConf->lcd_timing.de_vs_addr, pConf->lcd_timing.de_ve_addr);
+    //lcd_print("hs_hs_addr=%d, hs_he_addr=%d, hs_vs_addr=%d, hs_ve_addr=%d\n", pConf->lcd_timing.hs_hs_addr, pConf->lcd_timing.hs_he_addr, pConf->lcd_timing.hs_vs_addr, pConf->lcd_timing.hs_ve_addr);
+    //lcd_print("vs_hs_addr=%d, vs_he_addr=%d, vs_vs_addr=%d, vs_ve_addr=%d\n", pConf->lcd_timing.vs_hs_addr, pConf->lcd_timing.vs_he_addr, pConf->lcd_timing.vs_vs_addr, pConf->lcd_timing.vs_ve_addr);
+    //lcd_print("de_hs_addr=%d, de_he_addr=%d, de_vs_addr=%d, de_ve_addr=%d\n", pConf->lcd_timing.de_hs_addr, pConf->lcd_timing.de_he_addr, pConf->lcd_timing.de_vs_addr, pConf->lcd_timing.de_ve_addr);
 }
 
 static void lcd_control_config_pre(Lcd_Config_t *pConf)
diff --git a/arch/arm/mach-meson8b/lcd/lcd_config.h b/arch/arm/mach-meson8b/lcd/lcd_config.h
index e31d2d9380e4..38cc38e4e28e 100755
--- a/arch/arm/mach-meson8b/lcd/lcd_config.h
+++ b/arch/arm/mach-meson8b/lcd/lcd_config.h
@@ -7,7 +7,7 @@
 //lcd driver version
 //**********************************
 #define LCD_DRV_TYPE      "c8b"
-#define LCD_DRV_DATE      "20140721"
+#define LCD_DRV_DATE      "20140728"
 //**********************************
 
 /* for GAMMA_CNTL_PORT */
diff --git a/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c b/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c
index 3f143a0de0df..bc5279dfdc64 100755
--- a/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c
+++ b/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c
@@ -209,7 +209,7 @@ static void check_phy_status(void)
         udelay(6);
     }
     while((( READ_LCD_REG(MIPI_DSI_DWC_PHY_STATUS_OS ) >> BIT_PHY_STOPSTATECLKLANE) & 0x1) == 0){
-        DBG_PRINT(" Waiting STOP STATE LANE\n");
+        lcd_print(" Waiting STOP STATE LANE\n");
         udelay(6);
     }
 }
@@ -318,10 +318,10 @@ static unsigned int wait_for_generic_read_response(void)
 static unsigned int generic_if_wr(unsigned int address, unsigned int data_in)
 {
     if(address != MIPI_DSI_DWC_GEN_HDR_OS && address != MIPI_DSI_DWC_GEN_PLD_DATA_OS) {
-        DBG_PRINT(" Error Address : 0x%x\n", address);
+        lcd_print(" Error Address : 0x%x\n", address);
     }
 
-    DBG_PRINT("address 0x%x = 0x%08x\n", address, data_in);
+    lcd_print("address 0x%x = 0x%08x\n", address, data_in);
     WRITE_LCD_REG(address, data_in);
 
     return 0;
@@ -336,7 +336,7 @@ static unsigned int generic_if_rd(unsigned int address)
     unsigned int data_out;
 
     if(address != MIPI_DSI_DWC_GEN_PLD_DATA_OS) {
-        DBG_PRINT(" Error Address : %x\n", address);
+        lcd_print(" Error Address : %x\n", address);
     }
 
     data_out = READ_DSI_REG(address);
@@ -354,8 +354,8 @@ static unsigned int generic_read_packet_0_para(unsigned char data_type, unsigned
 {
     unsigned int read_data;
 
-    // DBG_PRINT(" para is %x, dcs_command is %x\n", para, dcs_command);
-    // DBG_PRINT(" vc_id %x, data_type is %x\n", vc_id, data_type);
+    // lcd_print(" para is %x, dcs_command is %x\n", para, dcs_command);
+    // lcd_print(" vc_id %x, data_type is %x\n", vc_id, data_type);
     generic_if_wr(MIPI_DSI_DWC_GEN_HDR_OS, ((0 << BIT_GEN_WC_MSBYTE)                           |
                                             (((unsigned int)dcs_command) << BIT_GEN_WC_LSBYTE) |
                                             (((unsigned int)vc_id) << BIT_GEN_VC)              |
@@ -586,7 +586,7 @@ static void set_dsi_phy_config(DSI_Phy_t *dphy, unsigned dsi_ui)
     dphy->init = (DPHY_TIME_INIT(t_ui) + t_lane_byte - 1) / t_lane_byte;
     dphy->wakeup = (DPHY_TIME_WAKEUP(t_ui) + t_lane_byte - 1) / t_lane_byte;
 
-    DBG_PRINT("lp_tesc = 0x%02x\n"
+    lcd_print("lp_tesc = 0x%02x\n"
             "lp_lpx = 0x%02x\n"
             "lp_ta_sure = 0x%02x\n"
             "lp_ta_go = 0x%02x\n"
@@ -656,7 +656,7 @@ static void dsi_phy_init(DSI_Phy_t *dphy, unsigned char lane_num)
 
 static void mipi_dsi_phy_config(Lcd_Config_t *pConf)
 {
-    DBG_PRINT("%s\n", __func__);
+    lcd_print("%s\n", __func__);
     //Digital
     // Power up DSI
     WRITE_LCD_REG(MIPI_DSI_DWC_PWR_UP_OS, 1);
@@ -695,15 +695,15 @@ static void dsi_video_config(Lcd_Config_t *pConf)
     dsi_vid_config.vfp = pConf->lcd_basic.v_period - pConf->lcd_timing.vsync_bp - pConf->lcd_basic.v_active;
     dsi_vid_config.vact = pConf->lcd_basic.v_active;
 
-    DBG_PRINT(" ============= VIDEO TIMING SETTING =============\n");
-    DBG_PRINT(" HLINE        = %d\n", dsi_vid_config.hline);
-    DBG_PRINT(" HSA          = %d\n", dsi_vid_config.hsa);
-    DBG_PRINT(" HBP          = %d\n", dsi_vid_config.hbp);
-    DBG_PRINT(" VSA          = %d\n", dsi_vid_config.vsa);
-    DBG_PRINT(" VBP          = %d\n", dsi_vid_config.vbp);
-    DBG_PRINT(" VFP          = %d\n", dsi_vid_config.vfp);
-    DBG_PRINT(" VACT         = %d\n", dsi_vid_config.vact);
-    DBG_PRINT(" ================================================\n");
+    lcd_print(" ============= VIDEO TIMING SETTING =============\n");
+    lcd_print(" HLINE        = %d\n", dsi_vid_config.hline);
+    lcd_print(" HSA          = %d\n", dsi_vid_config.hsa);
+    lcd_print(" HBP          = %d\n", dsi_vid_config.hbp);
+    lcd_print(" VSA          = %d\n", dsi_vid_config.vsa);
+    lcd_print(" VBP          = %d\n", dsi_vid_config.vbp);
+    lcd_print(" VFP          = %d\n", dsi_vid_config.vfp);
+    lcd_print(" VACT         = %d\n", dsi_vid_config.vact);
+    lcd_print(" ================================================\n");
 }
 
 #define DSI_PACKET_HEADER_CRC      6 //4(header)+2(CRC)
@@ -747,14 +747,14 @@ static void dsi_non_burst_chunk_config(Lcd_Config_t *pConf)
     dsi_vid_config.pixel_per_chunk = pixel_per_chunk;
     dsi_vid_config.num_of_chunk = num_of_chunk;
     dsi_vid_config.vid_null_size = vid_null_size;
-    DBG_PRINT(" ============== NON_BURST SETTINGS =============\n");
-    DBG_PRINT(" pixel_per_chunk       = %d\n", pixel_per_chunk);
-    DBG_PRINT(" num_of_chunk          = %d\n", num_of_chunk);
-    DBG_PRINT(" total_bytes_per_chunk = %d\n", total_bytes_per_chunk);
-    DBG_PRINT(" byte_per_chunk        = %d\n", byte_per_chunk);
-    DBG_PRINT(" chunk_overhead        = %d\n", chunk_overhead);
-    DBG_PRINT(" vid_null_size         = %d\n", vid_null_size);
-    DBG_PRINT(" ===============================================\n");
+    lcd_print(" ============== NON_BURST SETTINGS =============\n");
+    lcd_print(" pixel_per_chunk       = %d\n", pixel_per_chunk);
+    lcd_print(" num_of_chunk          = %d\n", num_of_chunk);
+    lcd_print(" total_bytes_per_chunk = %d\n", total_bytes_per_chunk);
+    lcd_print(" byte_per_chunk        = %d\n", byte_per_chunk);
+    lcd_print(" chunk_overhead        = %d\n", chunk_overhead);
+    lcd_print(" vid_null_size         = %d\n", vid_null_size);
+    lcd_print(" ===============================================\n");
 }
 
 // ----------------------------------------------------------------------------
@@ -898,12 +898,12 @@ static void mipi_dsi_host_config(Lcd_Config_t *pConf)
     unsigned int       operation_mode_init;
     operation_mode_init  = ((pConf->lcd_control.mipi_config->operation_mode >> BIT_OPERATION_MODE_INIT) & 1);
 
-#ifdef LCD_DEBUG_INFO
-    print_info();
-    print_dphy_info();
-#endif
+    if (lcd_print_flag > 0) {
+        print_info();
+        print_dphy_info();
+    }
 
-    DBG_PRINT("Set mipi_dsi_host\n");
+    lcd_print("Set mipi_dsi_host\n");
     set_mipi_dcs(MIPI_DSI_CMD_TRANS_TYPE,              // 0: high speed, 1: low power
                  MIPI_DSI_DCS_ACK_TYPE,                // if need bta ack check
                  MIPI_DSI_TEAR_SWITCH);                // enable tear ack
@@ -939,7 +939,7 @@ void mipi_dsi_link_on(Lcd_Config_t *pConf)
 
     if (pConf->lcd_control.mipi_config->dsi_init_on) {
         init_flag += dsi_write_cmd(pConf->lcd_control.mipi_config->dsi_init_on);
-        DBG_PRINT("dsi init on\n");
+        lcd_print("dsi init on\n");
     }
 
     if (init_flag == 0) {
@@ -961,7 +961,7 @@ void mipi_dsi_link_off(Lcd_Config_t *pConf)
 
     if (pConf->lcd_control.mipi_config->dsi_init_off) {
         dsi_write_cmd(pConf->lcd_control.mipi_config->dsi_init_off);
-        DBG_PRINT("dsi init off\n");
+        lcd_print("dsi init off\n");
     }
 
     if (pConf->lcd_control.mipi_config->lcd_extern_init > 0) {
@@ -1054,14 +1054,14 @@ void set_mipi_dsi_control_config_post(Lcd_Config_t *pConf)
 
     if (cfg->factor_numerator == 0) {
         lanebyteclk = cfg->bit_rate / 8;
-        DBG_PRINT("pixel_clk = %d.%03dMHz, bit_rate = %d.%03dMHz, lanebyteclk = %d.%03dMHz\n", (pclk / 1000000), ((pclk / 1000) % 1000), 
+        lcd_print("pixel_clk = %d.%03dMHz, bit_rate = %d.%03dMHz, lanebyteclk = %d.%03dMHz\n", (pclk / 1000000), ((pclk / 1000) % 1000), 
                  (cfg->bit_rate / 1000000), ((cfg->bit_rate / 1000) % 1000), (lanebyteclk / 1000000), ((lanebyteclk / 1000) % 1000));
 
         cfg->factor_denominator = lanebyteclk/1000;
         cfg->factor_numerator = pclk/1000;
         //cfg->factor_denominator = 10;
     }
-    DBG_PRINT("d=%d, n=%d, factor=%d.%02d\n", cfg->factor_denominator, cfg->factor_numerator, (cfg->factor_denominator/cfg->factor_numerator), 
+    lcd_print("d=%d, n=%d, factor=%d.%02d\n", cfg->factor_denominator, cfg->factor_numerator, (cfg->factor_denominator/cfg->factor_numerator), 
              ((cfg->factor_denominator % cfg->factor_numerator) * 100 / cfg->factor_numerator));
 
     operation_mode = ((cfg->operation_mode >> BIT_OPERATION_MODE_DISP) & 1);
@@ -1090,7 +1090,7 @@ void set_mipi_dsi_control(Lcd_Config_t *pConf)
 
 void mipi_dsi_off(void)
 {
-    DBG_PRINT("poweroff dsi digital\n");
+    lcd_print("poweroff dsi digital\n");
     // Power down DSI
     WRITE_LCD_REG(MIPI_DSI_DWC_PWR_UP_OS, 0);
 
@@ -1099,7 +1099,7 @@ void mipi_dsi_off(void)
     // WRITE_LCD_REG(MIPI_DSI_DWC_PHY_RSTZ_OS, 0xc);
 
     WRITE_DSI_REG(MIPI_DSI_CHAN_CTRL, 0x1f);
-    DBG_PRINT("MIPI_DSI_PHY_CTRL=0x%x\n", READ_DSI_REG(MIPI_DSI_PHY_CTRL)); //read
+    lcd_print("MIPI_DSI_PHY_CTRL=0x%x\n", READ_DSI_REG(MIPI_DSI_PHY_CTRL)); //read
     WRITE_DSI_REG_BITS(MIPI_DSI_PHY_CTRL, 0, 7, 1);
 }
 
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 3ece2a8371b2..b50d7553cfa2 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -53,6 +53,22 @@
 
 #define PANEL_NAME		"panel"
 
+#ifdef LCD_DEBUG_INFO
+unsigned int lcd_print_flag = 1;
+#else
+unsigned int lcd_print_flag = 0;
+#endif
+void lcd_print(const char *fmt, ...)
+{
+	va_list args;
+
+	if (lcd_print_flag == 0)
+		return;
+	va_start(args, fmt);
+	vprintk(fmt, args);
+	va_end(args);
+}
+
 typedef struct {
 	Lcd_Config_t *pConf;
 	vinfo_t lcd_info;
@@ -120,7 +136,7 @@ static void backlight_power_ctrl(Bool_t status)
 			return;
 		bl_power_off(LCD_BL_FLAG);
 	}
-	DBG_PRINT("%s(%s): data_status=%s\n", __FUNCTION__, (status ? "ON" : "OFF"), (data_status ? "ON" : "OFF"));
+	lcd_print("%s(%s): data_status=%s\n", __FUNCTION__, (status ? "ON" : "OFF"), (data_status ? "ON" : "OFF"));
 	bl_status = status;
 }
 
@@ -133,10 +149,10 @@ static int lcd_power_ctrl(Bool_t status)
 #endif
 	struct aml_lcd_extern_driver_t *lcd_extern_driver;
 
-	DBG_PRINT("%s(): %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
+	lcd_print("%s(): %s\n", __FUNCTION__, (status ? "ON" : "OFF"));
 	if (status) {
 		for (i=0; i<pDev->pConf->lcd_power_ctrl.power_on_step; i++) {
-			DBG_PRINT("%s %s step %d\n", __FUNCTION__, (status ? "ON" : "OFF"), i+1);
+			lcd_print("%s %s step %d\n", __FUNCTION__, (status ? "ON" : "OFF"), i+1);
 			switch (pDev->pConf->lcd_power_ctrl.power_on_config[i].type) {
 				case LCD_POWER_TYPE_CPU:
 					if (pDev->pConf->lcd_power_ctrl.power_on_config[i].value == LCD_POWER_GPIO_OUTPUT_LOW) {
@@ -200,7 +216,7 @@ static int lcd_power_ctrl(Bool_t status)
 		if (pDev->pConf->lcd_power_ctrl.power_ctrl_video)
 			ret = pDev->pConf->lcd_power_ctrl.power_ctrl_video(OFF);
 		for (i=0; i<pDev->pConf->lcd_power_ctrl.power_off_step; i++) {
-			DBG_PRINT("%s %s step %d\n", __FUNCTION__, (status ? "ON" : "OFF"), i+1);
+			lcd_print("%s %s step %d\n", __FUNCTION__, (status ? "ON" : "OFF"), i+1);
 			switch (pDev->pConf->lcd_power_ctrl.power_off_config[i].type) {
 				case LCD_POWER_TYPE_CPU:
 					if (pDev->pConf->lcd_power_ctrl.power_off_config[i].value == LCD_POWER_GPIO_OUTPUT_LOW) {
@@ -1294,10 +1310,30 @@ static ssize_t lcd_status_write(struct class *class, struct class_attribute *att
 	//return 0;
 }
 
+static ssize_t lcd_print_read(struct class *class, struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "lcd print flag: %u\n", lcd_print_flag);
+}
+
+static ssize_t lcd_print_write(struct class *class, struct class_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int ret;
+
+	ret = sscanf(buf, "%u", &lcd_print_flag);
+	printk("write lcd print flag: %u\n", lcd_print_flag);
+
+	if (ret != 1 || ret !=2)
+		return -EINVAL;
+
+	return count;
+	//return 0;
+}
+
 static struct class_attribute lcd_debug_class_attrs[] = {
 	__ATTR(debug,  S_IRUGO | S_IWUSR, lcd_debug_help, lcd_debug),
 	__ATTR(help,  S_IRUGO | S_IWUSR, lcd_debug_help, NULL),
 	__ATTR(status,  S_IRUGO | S_IWUSR, lcd_status_read, lcd_status_write),
+	__ATTR(print,  S_IRUGO | S_IWUSR, lcd_print_read, lcd_print_write),
 };
 
 static int creat_lcd_attr(void)
@@ -1400,7 +1436,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 				break;
 		}		
 		pConf->lcd_basic.lcd_type = val;
-		DBG_PRINT("lcd_type= %s(%u)\n", lcd_type_table[pConf->lcd_basic.lcd_type], pConf->lcd_basic.lcd_type);
+		lcd_print("lcd_type= %s(%u)\n", lcd_type_table[pConf->lcd_basic.lcd_type], pConf->lcd_basic.lcd_type);
 		ret = of_property_read_u32_array(lcd_model_node,"active_area",&lcd_para[0],2);
 		if(ret){
 			printk("faild to get active_area\n");
@@ -1411,7 +1447,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 			pConf->lcd_basic.screen_ratio_width = lcd_para[0];
 			pConf->lcd_basic.screen_ratio_height = lcd_para[1];
 		}
-		DBG_PRINT("h_active_area = %umm, v_active_area =%umm\n", pConf->lcd_basic.h_active_area, pConf->lcd_basic.v_active_area);
+		lcd_print("h_active_area = %umm, v_active_area =%umm\n", pConf->lcd_basic.h_active_area, pConf->lcd_basic.v_active_area);
 		ret = of_property_read_u32_array(lcd_model_node,"lcd_bits_option",&lcd_para[0],2);
 		if(ret){
 			printk("faild to get lcd_bits_option\n");
@@ -1420,7 +1456,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 			pConf->lcd_basic.lcd_bits = (unsigned short)(lcd_para[0]);
 			pConf->lcd_basic.lcd_bits_option = (unsigned short)(lcd_para[1]);
 		}
-		DBG_PRINT("lcd_bits = %u, lcd_bits_option = %u\n", pConf->lcd_basic.lcd_bits, pConf->lcd_basic.lcd_bits_option);
+		lcd_print("lcd_bits = %u, lcd_bits_option = %u\n", pConf->lcd_basic.lcd_bits, pConf->lcd_basic.lcd_bits_option);
 		ret = of_property_read_u32_array(lcd_model_node,"resolution", &lcd_para[0], 2);
 		if(ret){
 			printk("faild to get resolution\n");
@@ -1437,7 +1473,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 			pConf->lcd_basic.h_period = (unsigned short)(lcd_para[0]);
 			pConf->lcd_basic.v_period = (unsigned short)(lcd_para[1]);
 		}
-		DBG_PRINT("h_active = %u, v_active =%u, h_period = %u, v_period = %u\n", pConf->lcd_basic.h_active, pConf->lcd_basic.v_active, pConf->lcd_basic.h_period, pConf->lcd_basic.v_period);
+		lcd_print("h_active = %u, v_active =%u, h_period = %u, v_period = %u\n", pConf->lcd_basic.h_active, pConf->lcd_basic.v_active, pConf->lcd_basic.h_period, pConf->lcd_basic.v_period);
 		ret = of_property_read_u32_array(lcd_model_node,"clock_hz_pol",&lcd_para[0], 2);
 		if(ret){
 			printk("faild to get clock_hz_pol\n");
@@ -1446,7 +1482,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 			pConf->lcd_timing.lcd_clk = lcd_para[0];
 			pConf->lcd_timing.pol_ctrl = (lcd_para[1] << POL_CTRL_CLK);
 		}
-		DBG_PRINT("pclk = %uHz, pol=%u\n", pConf->lcd_timing.lcd_clk, (pConf->lcd_timing.pol_ctrl >> POL_CTRL_CLK) & 1);
+		lcd_print("pclk = %uHz, pol=%u\n", pConf->lcd_timing.lcd_clk, (pConf->lcd_timing.pol_ctrl >> POL_CTRL_CLK) & 1);
 		ret = of_property_read_u32_array(lcd_model_node,"hsync_width_backporch",&lcd_para[0], 2);
 		if(ret){
 			printk("faild to get hsync_width_backporch\n");
@@ -1455,7 +1491,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 			pConf->lcd_timing.hsync_width = (unsigned short)(lcd_para[0]);
 			pConf->lcd_timing.hsync_bp = (unsigned short)(lcd_para[1]);
 		}
-		DBG_PRINT("hsync width = %u, backporch = %u\n", pConf->lcd_timing.hsync_width, pConf->lcd_timing.hsync_bp);
+		lcd_print("hsync width = %u, backporch = %u\n", pConf->lcd_timing.hsync_width, pConf->lcd_timing.hsync_bp);
 		ret = of_property_read_u32_array(lcd_model_node,"vsync_width_backporch",&lcd_para[0], 2);
 		if(ret){
 			printk("faild to get vsync_width_backporch\n");
@@ -1464,7 +1500,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 			pConf->lcd_timing.vsync_width = (unsigned short)(lcd_para[0]);
 			pConf->lcd_timing.vsync_bp = (unsigned short)(lcd_para[1]);
 		}
-		DBG_PRINT("vsync width = %u, backporch = %u\n", pConf->lcd_timing.vsync_width, pConf->lcd_timing.vsync_bp);
+		lcd_print("vsync width = %u, backporch = %u\n", pConf->lcd_timing.vsync_width, pConf->lcd_timing.vsync_bp);
 		ret = of_property_read_u32_array(lcd_model_node,"pol_hsync_vsync",&lcd_para[0], 2);
 		if(ret){
 			printk("faild to get pol_hsync_vsync\n");
@@ -1472,7 +1508,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 		else {
 			pConf->lcd_timing.pol_ctrl = (pConf->lcd_timing.pol_ctrl & ~((1 << POL_CTRL_HS) | (1 << POL_CTRL_VS))) | ((lcd_para[0] << POL_CTRL_HS) | (lcd_para[1] << POL_CTRL_VS));
 		}
-		DBG_PRINT("pol hsync = %u, vsync = %u\n", (pConf->lcd_timing.pol_ctrl >> POL_CTRL_HS) & 1, (pConf->lcd_timing.pol_ctrl >> POL_CTRL_VS) & 1);
+		lcd_print("pol hsync = %u, vsync = %u\n", (pConf->lcd_timing.pol_ctrl >> POL_CTRL_HS) & 1, (pConf->lcd_timing.pol_ctrl >> POL_CTRL_VS) & 1);
 		ret = of_property_read_u32_array(lcd_model_node,"vsync_horizontal_phase",&lcd_para[0], 2);
 		if(ret){
 			printk("faild to get vsync_horizontal_phase\n");
@@ -1481,9 +1517,9 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
 			pConf->lcd_timing.vsync_h_phase = ((lcd_para[0] << 31) | ((lcd_para[1] & 0xffff) << 0));
 		}
 		if (lcd_para[0] == 0)
-			DBG_PRINT("vsync_horizontal_phase= %d\n", lcd_para[1]);
+			lcd_print("vsync_horizontal_phase= %d\n", lcd_para[1]);
 		else
-			DBG_PRINT("vsync_horizontal_phase= -%d\n", lcd_para[1]);
+			lcd_print("vsync_horizontal_phase= -%d\n", lcd_para[1]);
 
         if (pConf->lcd_basic.lcd_type == LCD_DIGITAL_MIPI) {
             ret = of_property_read_u32(lcd_model_node,"dsi_lane_num",&val);
@@ -1494,7 +1530,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
             else {
                 pConf->lcd_control.mipi_config->lane_num = (unsigned char)val;
             }
-            DBG_PRINT("dsi_lane_num= %d\n",  pConf->lcd_control.mipi_config->lane_num);
+            lcd_print("dsi_lane_num= %d\n",  pConf->lcd_control.mipi_config->lane_num);
             ret = of_property_read_u32(lcd_model_node,"dsi_bit_rate_max",&val);
             if(ret){
                 printk("faild to get dsi_bit_rate_max\n");
@@ -1503,7 +1539,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
             else {
                 pConf->lcd_control.mipi_config->bit_rate_max = val;
             }
-            DBG_PRINT("dsi bit_rate max = %dMHz\n", pConf->lcd_control.mipi_config->bit_rate_max);
+            lcd_print("dsi bit_rate max = %dMHz\n", pConf->lcd_control.mipi_config->bit_rate_max);
             ret = of_property_read_u32(lcd_model_node,"pclk_lanebyteclk_factor",&val);
             if(ret){
                 printk("faild to get pclk_lanebyteclk_factor\n");
@@ -1513,7 +1549,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
                 pConf->lcd_control.mipi_config->factor_numerator = val;
             }
             pConf->lcd_control.mipi_config->factor_denominator = 10;
-            DBG_PRINT("pclk_lanebyteclk factor= %d\n", pConf->lcd_control.mipi_config->factor_numerator);
+            lcd_print("pclk_lanebyteclk factor= %d\n", pConf->lcd_control.mipi_config->factor_numerator);
             ret = of_property_read_u32_array(lcd_model_node,"dsi_operation_mode",&lcd_para[0], 2);
             if(ret){
                 printk("faild to get dsi_operation_mode\n");
@@ -1522,7 +1558,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
             else {
                 pConf->lcd_control.mipi_config->operation_mode = ((lcd_para[0] << BIT_OPERATION_MODE_INIT) | (lcd_para[1] << BIT_OPERATION_MODE_DISP));
             }
-            DBG_PRINT("dsi_operation_mode init=%d, display=%d\n", (pConf->lcd_control.mipi_config->operation_mode >> BIT_OPERATION_MODE_INIT) & 1, (pConf->lcd_control.mipi_config->operation_mode >> BIT_OPERATION_MODE_DISP) & 1);
+            lcd_print("dsi_operation_mode init=%d, display=%d\n", (pConf->lcd_control.mipi_config->operation_mode >> BIT_OPERATION_MODE_INIT) & 1, (pConf->lcd_control.mipi_config->operation_mode >> BIT_OPERATION_MODE_DISP) & 1);
             ret = of_property_read_u32_array(lcd_model_node,"dsi_transfer_ctrl",&lcd_para[0], 2);
             if(ret){
                 printk("faild to get dsi_transfer_ctrl\n");
@@ -1531,7 +1567,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
             else {
                 pConf->lcd_control.mipi_config->transfer_ctrl = ((lcd_para[0] << BIT_TRANS_CTRL_CLK) | (lcd_para[1] << BIT_TRANS_CTRL_SWITCH));
             }
-            DBG_PRINT("dsi_transfer_ctrl clk=%d, switch=%d\n", (pConf->lcd_control.mipi_config->transfer_ctrl >> BIT_TRANS_CTRL_CLK) & 1, (pConf->lcd_control.mipi_config->transfer_ctrl >> BIT_TRANS_CTRL_SWITCH) & 3);
+            lcd_print("dsi_transfer_ctrl clk=%d, switch=%d\n", (pConf->lcd_control.mipi_config->transfer_ctrl >> BIT_TRANS_CTRL_CLK) & 1, (pConf->lcd_control.mipi_config->transfer_ctrl >> BIT_TRANS_CTRL_SWITCH) & 3);
             //detect dsi init on table
             if (pConf->lcd_control.mipi_config->dsi_init_on != NULL) {
                 ret = of_property_read_u32_index(lcd_model_node,"dsi_init_on", 0, &lcd_para[0]);
@@ -1558,12 +1594,12 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
                         printk("faild to get dsi_init_on\n");
                     }
                     else {
-                        DBG_PRINT("dsi_init_on: ");
+                        lcd_print("dsi_init_on: ");
                         for (j=0; j<i; j++) {
                             pConf->lcd_control.mipi_config->dsi_init_on[j] = (unsigned char)(lcd_para[j] & 0xff);
-                            DBG_PRINT("0x%02x ", pConf->lcd_control.mipi_config->dsi_init_on[j]);
+                            lcd_print("0x%02x ", pConf->lcd_control.mipi_config->dsi_init_on[j]);
                         }
-                        DBG_PRINT("\n");
+                        lcd_print("\n");
                     }
                 }
             }
@@ -1593,12 +1629,12 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
                         printk("faild to get dsi_init_off\n");
                     }
                     else {
-                        DBG_PRINT("dsi_init_off: ");
+                        lcd_print("dsi_init_off: ");
                         for (j=0; j<i; j++) {
                             pConf->lcd_control.mipi_config->dsi_init_off[j] = (unsigned char)(lcd_para[j] & 0xff);
-                            DBG_PRINT("0x%02x ", pConf->lcd_control.mipi_config->dsi_init_off[j]);
+                            lcd_print("0x%02x ", pConf->lcd_control.mipi_config->dsi_init_off[j]);
                         }
-                        DBG_PRINT("\n");
+                        lcd_print("\n");
                     }
                 }
             }
@@ -1609,7 +1645,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
             } else {
                 pConf->lcd_control.mipi_config->lcd_extern_init =(unsigned char)(val);
             }
-            DBG_PRINT("lcd_extern_init = %d\n",  pConf->lcd_control.mipi_config->lcd_extern_init);
+            lcd_print("lcd_extern_init = %d\n",  pConf->lcd_control.mipi_config->lcd_extern_init);
         }
         else if (pConf->lcd_basic.lcd_type == LCD_DIGITAL_EDP) {
             ret = of_property_read_u32(lcd_model_node,"max_lane_count",&val);
@@ -1619,7 +1655,7 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
             } else {
                 pConf->lcd_control.edp_config->max_lane_count =(unsigned char)(val);
             }
-            DBG_PRINT("max_lane_count = %d\n", pConf->lcd_control.edp_config->max_lane_count);
+            lcd_print("max_lane_count = %d\n", pConf->lcd_control.edp_config->max_lane_count);
         }
     }
     kfree(lcd_para);
@@ -1683,7 +1719,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		else {
 			pConf->lcd_timing.hvsync_valid = (unsigned short)(lcd_para[0]);
 			pConf->lcd_timing.de_valid = (unsigned short)(lcd_para[1]);
-			DBG_PRINT("valid hvsync = %u, de = %u\n", pConf->lcd_timing.hvsync_valid, pConf->lcd_timing.de_valid);
+			lcd_print("valid hvsync = %u, de = %u\n", pConf->lcd_timing.hvsync_valid, pConf->lcd_timing.de_valid);
 		}
 		ret = of_property_read_u32_array(pdev->dev.of_node,"hsign_hoffset_vsign_voffset",&lcd_para[0], 4);
 		if(ret){
@@ -1694,8 +1730,8 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		else {
 			pConf->lcd_timing.h_offset = ((lcd_para[0] << 31) | ((lcd_para[1] & 0xffff) << 0));
 			pConf->lcd_timing.v_offset = ((lcd_para[2] << 31) | ((lcd_para[3] & 0xffff) << 0));
-			DBG_PRINT("h_offset = %s%u, ", (((pConf->lcd_timing.h_offset >> 31) & 1) ? "-" : ""), (pConf->lcd_timing.h_offset & 0xffff));
-			DBG_PRINT("v_offset = %s%u\n", (((pConf->lcd_timing.v_offset >> 31) & 1) ? "-" : ""), (pConf->lcd_timing.v_offset & 0xffff));
+			lcd_print("h_offset = %s%u, ", (((pConf->lcd_timing.h_offset >> 31) & 1) ? "-" : ""), (pConf->lcd_timing.h_offset & 0xffff));
+			lcd_print("v_offset = %s%u\n", (((pConf->lcd_timing.v_offset >> 31) & 1) ? "-" : ""), (pConf->lcd_timing.v_offset & 0xffff));
 		}
 		ret = of_property_read_u32_array(pdev->dev.of_node,"dither_user_ctrl",&lcd_para[0], 2);
 		if(ret){
@@ -1705,7 +1741,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		else {
 			pConf->lcd_effect.dith_user = (unsigned short)(lcd_para[0]);
 			pConf->lcd_effect.dith_cntl_addr = (unsigned short)(lcd_para[1]);
-			DBG_PRINT("dither_user = %u, dither_ctrl = 0x%x\n", pConf->lcd_effect.dith_user, pConf->lcd_effect.dith_cntl_addr);
+			lcd_print("dither_user = %u, dither_ctrl = 0x%x\n", pConf->lcd_effect.dith_user, pConf->lcd_effect.dith_cntl_addr);
 		}
 		ret = of_property_read_u32_array(pdev->dev.of_node,"vadj_brightness_contrast_saturation",&lcd_para[0], 3);
 		if(ret){
@@ -1715,7 +1751,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 			pConf->lcd_effect.vadj_brightness = lcd_para[0];
 			pConf->lcd_effect.vadj_contrast = lcd_para[1];
 			pConf->lcd_effect.vadj_saturation = lcd_para[2];
-			DBG_PRINT("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
+			lcd_print("vadj_brightness = 0x%x, vadj_contrast = 0x%x, vadj_saturation = 0x%x\n", pConf->lcd_effect.vadj_brightness, pConf->lcd_effect.vadj_contrast, pConf->lcd_effect.vadj_saturation);
 		}
 		ret = of_property_read_u32_array(pdev->dev.of_node,"gamma_en_reverse",&lcd_para[0], 2);
 		if(ret){
@@ -1723,7 +1759,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		}
 		else {
 			pConf->lcd_effect.gamma_ctrl = ((lcd_para[0] << GAMMA_CTRL_EN) | (lcd_para[1] << GAMMA_CTRL_REVERSE));
-			DBG_PRINT("gamma_en = %u, gamma_reverse=%u\n", ((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_EN) & 1), ((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_REVERSE) & 1));
+			lcd_print("gamma_en = %u, gamma_reverse=%u\n", ((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_EN) & 1), ((pConf->lcd_effect.gamma_ctrl >> GAMMA_CTRL_REVERSE) & 1));
 		}
 		ret = of_property_read_u32_array(pdev->dev.of_node,"gamma_multi_rgb_coeff",&lcd_para[0], 4);
 		if(ret){
@@ -1734,7 +1770,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 			pConf->lcd_effect.gamma_r_coeff = (unsigned short)(lcd_para[1]);
 			pConf->lcd_effect.gamma_g_coeff = (unsigned short)(lcd_para[2]);
 			pConf->lcd_effect.gamma_b_coeff = (unsigned short)(lcd_para[3]);
-			DBG_PRINT("gamma_multi = %u, gamma_r_coeff = %u, gamma_g_coeff = %u, gamma_b_coeff = %u\n", lcd_gamma_multi, pConf->lcd_effect.gamma_r_coeff, pConf->lcd_effect.gamma_g_coeff, pConf->lcd_effect.gamma_b_coeff);
+			lcd_print("gamma_multi = %u, gamma_r_coeff = %u, gamma_g_coeff = %u, gamma_b_coeff = %u\n", lcd_gamma_multi, pConf->lcd_effect.gamma_r_coeff, pConf->lcd_effect.gamma_g_coeff, pConf->lcd_effect.gamma_b_coeff);
 		}
 		if (lcd_gamma_multi == 1) {
 			ret = of_property_read_u32_array(pdev->dev.of_node,"gamma_table_r",&gamma_temp[0], 256);
@@ -1746,7 +1782,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 				for (i=0; i<256; i++) {
 					pConf->lcd_effect.GammaTableR[i] = (unsigned short)(gamma_temp[i] << 2);
 				}
-				DBG_PRINT("load gamma_table_r.\n");
+				lcd_print("load gamma_table_r.\n");
 			}
 			ret = of_property_read_u32_array(pdev->dev.of_node,"gamma_table_g",&gamma_temp[0], 256);
 			if(ret){
@@ -1757,7 +1793,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 				for (i=0; i<256; i++) {
 					pConf->lcd_effect.GammaTableG[i] = (unsigned short)(gamma_temp[i] << 2);
 				}
-				DBG_PRINT("load gamma_table_g.\n");
+				lcd_print("load gamma_table_g.\n");
 			}
 			ret = of_property_read_u32_array(pdev->dev.of_node,"gamma_table_b",&gamma_temp[0], 256);
 			if(ret){
@@ -1768,7 +1804,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 				for (i=0; i<256; i++) {
 					pConf->lcd_effect.GammaTableB[i] = (unsigned short)(gamma_temp[i] << 2);
 				}
-				DBG_PRINT("load gamma_table_b.\n");
+				lcd_print("load gamma_table_b.\n");
 			}
 		}
 		else {
@@ -1783,7 +1819,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 					pConf->lcd_effect.GammaTableG[i] = (unsigned short)(gamma_temp[i] << 2);
 					pConf->lcd_effect.GammaTableB[i] = (unsigned short)(gamma_temp[i] << 2);
 				}
-				DBG_PRINT("load gamma_table.\n");
+				lcd_print("load gamma_table.\n");
 			}
 		}
 		
@@ -1794,7 +1830,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		}
 		else {
 			pConf->lcd_timing.clk_ctrl = ((pConf->lcd_timing.clk_ctrl & ~(0xf << CLK_CTRL_SS)) | (val << CLK_CTRL_SS));
-			DBG_PRINT("lcd clock spread spectrum = %u\n", (pConf->lcd_timing.clk_ctrl >> CLK_CTRL_SS) & 0xf);
+			lcd_print("lcd clock spread spectrum = %u\n", (pConf->lcd_timing.clk_ctrl >> CLK_CTRL_SS) & 0xf);
 		}
 		ret = of_property_read_u32(pdev->dev.of_node,"clock_auto_generation",&val);
 		if(ret){
@@ -1802,7 +1838,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		}
 		else {
 			pConf->lcd_timing.clk_ctrl = ((pConf->lcd_timing.clk_ctrl & ~(1 << CLK_CTRL_AUTO)) | (val << CLK_CTRL_AUTO));
-			DBG_PRINT("lcd clock auto_generation = %u\n", (pConf->lcd_timing.clk_ctrl >> CLK_CTRL_AUTO) & 0x1);
+			lcd_print("lcd clock auto_generation = %u\n", (pConf->lcd_timing.clk_ctrl >> CLK_CTRL_AUTO) & 0x1);
 		}
 		if (((pConf->lcd_timing.clk_ctrl >> CLK_CTRL_AUTO) & 0x1) == 0) {
 			ret = of_property_read_u32_array(pdev->dev.of_node,"clk_pll_div_clk_ctrl",&lcd_para[0], 3);
@@ -1838,7 +1874,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 					printk("lvds_repack = %u\n", pConf->lcd_control.lvds_config->lvds_repack);
 				}
 				else {
-					DBG_PRINT("lvds_repack_user = %u, lvds_repack = %u\n", pConf->lcd_control.lvds_config->lvds_repack_user, pConf->lcd_control.lvds_config->lvds_repack);
+					lcd_print("lvds_repack_user = %u, lvds_repack = %u\n", pConf->lcd_control.lvds_config->lvds_repack_user, pConf->lcd_control.lvds_config->lvds_repack);
 				}
 			}
 		}
@@ -1858,7 +1894,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 					printk("edp link_rate = %s, lane_count = %u\n", ((pConf->lcd_control.edp_config->link_rate == 0) ? "1.62G":"2.7G"), pConf->lcd_control.edp_config->lane_count);
 				}
 				else {
-					DBG_PRINT("edp user = %u, link_rate = %s, lane_count = %u\n", pConf->lcd_control.edp_config->link_user, ((pConf->lcd_control.edp_config->link_rate == 0) ? "1.62G":"2.7G"), pConf->lcd_control.edp_config->lane_count);
+					lcd_print("edp user = %u, link_rate = %s, lane_count = %u\n", pConf->lcd_control.edp_config->link_user, ((pConf->lcd_control.edp_config->link_rate == 0) ? "1.62G":"2.7G"), pConf->lcd_control.edp_config->lane_count);
 				}
 			}
 			ret = of_property_read_u32_array(pdev->dev.of_node,"edp_link_adaptive_vswing",&lcd_para[0], 2);
@@ -1876,7 +1912,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 					printk("edp swing_level = %u\n", pConf->lcd_control.edp_config->vswing);
 				}
 				else {
-					DBG_PRINT("edp link_adaptive = %u, swing_level = %u\n", pConf->lcd_control.edp_config->link_adaptive, pConf->lcd_control.edp_config->vswing);
+					lcd_print("edp link_adaptive = %u, swing_level = %u\n", pConf->lcd_control.edp_config->link_adaptive, pConf->lcd_control.edp_config->vswing);
 				}
 			}
 			ret = of_property_read_u32(pdev->dev.of_node,"edp_sync_clock_mode",&val);
@@ -1896,7 +1932,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		else {
 			pConf->lcd_effect.rgb_base_addr = (unsigned short)(lcd_para[0]);
 			pConf->lcd_effect.rgb_coeff_addr = (unsigned short)(lcd_para[1]);
-			DBG_PRINT("rgb_base = 0x%x, rgb_coeff = 0x%x\n", pConf->lcd_effect.rgb_base_addr, pConf->lcd_effect.rgb_coeff_addr);
+			lcd_print("rgb_base = 0x%x, rgb_coeff = 0x%x\n", pConf->lcd_effect.rgb_base_addr, pConf->lcd_effect.rgb_coeff_addr);
 		}
 		// ret = of_property_read_u32_array(pdev->dev.of_node,"video_on_pixel_line",&lcd_para[0], 2);
 		// if(ret){
@@ -1905,7 +1941,7 @@ static int _get_lcd_default_config(Lcd_Config_t *pConf, struct platform_device *
 		// else {
 			// pConf->lcd_timing.video_on_pixel = (unsigned short)(lcd_para[0]);
 			// pConf->lcd_timing.video_on_line = (unsigned short)(lcd_para[1]);
-			// DBG_PRINT("video_on_pixel = %u, video_on_line = %u\n", pConf->lcd_timing.video_on_pixel, pConf->lcd_timing.video_on_line);
+			// lcd_print("video_on_pixel = %u, video_on_line = %u\n", pConf->lcd_timing.video_on_pixel, pConf->lcd_timing.video_on_line);
 		// }
 	}
 	kfree(gamma_temp);
@@ -1929,14 +1965,14 @@ static int _get_lcd_power_config(Lcd_Config_t *pConf, struct platform_device *pd
 			sprintf(propname, "power_on_step_%d", i+1);
 			ret = of_property_read_string_index(pdev->dev.of_node, propname, 0, &str);
 			if (ret) {
-				DBG_PRINT("faild to get %s\n", propname);
+				lcd_print("faild to get %s\n", propname);
 				break;
 			}
 			else if ((strcasecmp(str, "null") == 0) || ((strcasecmp(str, "n") == 0))) {
 				break;
 			}
 			else {
-				DBG_PRINT("%s 0: %s\n", propname, str);
+				lcd_print("%s 0: %s\n", propname, str);
 				for(index = 0; index < LCD_POWER_TYPE_MAX; index++) {
 					if(!strcasecmp(str, lcd_power_type_table[index]))
 						break;
@@ -1980,7 +2016,7 @@ static int _get_lcd_power_config(Lcd_Config_t *pConf, struct platform_device *pd
 			}
 		}
 		pConf->lcd_power_ctrl.power_on_step = i;
-		DBG_PRINT("lcd_power_on_step = %d\n", pConf->lcd_power_ctrl.power_on_step);
+		lcd_print("lcd_power_on_step = %d\n", pConf->lcd_power_ctrl.power_on_step);
 		
 		ret = of_property_read_u32_array(pdev->dev.of_node,"power_on_delay",&lcd_para[0],pConf->lcd_power_ctrl.power_on_step);
 		if (ret) {
@@ -1997,14 +2033,14 @@ static int _get_lcd_power_config(Lcd_Config_t *pConf, struct platform_device *pd
 			//propname = kasprintf(GFP_KERNEL, "power_off_step_%d", i+1);
 			ret = of_property_read_string_index(pdev->dev.of_node, propname, 0, &str);
 			if (ret) {
-				DBG_PRINT("faild to get %s index 0\n", propname);
+				lcd_print("faild to get %s index 0\n", propname);
 				break;
 			}
 			else if ((strcasecmp(str, "null") == 0) || ((strcasecmp(str, "n") == 0))) {
 				break;
 			}
 			else {
-				DBG_PRINT("%s 0: %s\n", propname, str);
+				lcd_print("%s 0: %s\n", propname, str);
 				for(index = 0; index < LCD_POWER_TYPE_MAX; index++) {
 					if(!strcasecmp(str, lcd_power_type_table[index]))
 						break;
@@ -2044,7 +2080,7 @@ static int _get_lcd_power_config(Lcd_Config_t *pConf, struct platform_device *pd
 			}
 		}
 		pConf->lcd_power_ctrl.power_off_step = i;
-		DBG_PRINT("lcd_power_off_step = %d\n", pConf->lcd_power_ctrl.power_off_step);
+		lcd_print("lcd_power_off_step = %d\n", pConf->lcd_power_ctrl.power_off_step);
 		
 		ret = of_property_read_u32_array(pdev->dev.of_node,"power_off_delay",&lcd_para[0],pConf->lcd_power_ctrl.power_off_step);
 		if (ret) {
@@ -2057,17 +2093,17 @@ static int _get_lcd_power_config(Lcd_Config_t *pConf, struct platform_device *pd
 		}
 		
 		for (i=0; i<pConf->lcd_power_ctrl.power_on_step; i++) {
-			DBG_PRINT("power on step %d: type = %s(%d)\n", i+1, lcd_power_type_table[pConf->lcd_power_ctrl.power_on_config[i].type], pConf->lcd_power_ctrl.power_on_config[i].type);
-			DBG_PRINT("power on step %d: gpio = %d\n", i+1, pConf->lcd_power_ctrl.power_on_config[i].gpio);
-			DBG_PRINT("power on step %d: value = %d\n", i+1, pConf->lcd_power_ctrl.power_on_config[i].value);
-			DBG_PRINT("power on step %d: delay = %d\n", i+1, pConf->lcd_power_ctrl.power_on_config[i].delay);
+			lcd_print("power on step %d: type = %s(%d)\n", i+1, lcd_power_type_table[pConf->lcd_power_ctrl.power_on_config[i].type], pConf->lcd_power_ctrl.power_on_config[i].type);
+			lcd_print("power on step %d: gpio = %d\n", i+1, pConf->lcd_power_ctrl.power_on_config[i].gpio);
+			lcd_print("power on step %d: value = %d\n", i+1, pConf->lcd_power_ctrl.power_on_config[i].value);
+			lcd_print("power on step %d: delay = %d\n", i+1, pConf->lcd_power_ctrl.power_on_config[i].delay);
 		}
 		
 		for (i=0; i<pConf->lcd_power_ctrl.power_off_step; i++) {
-			DBG_PRINT("power off step %d: type = %s(%d)\n", i+1, lcd_power_type_table[pConf->lcd_power_ctrl.power_off_config[i].type], pConf->lcd_power_ctrl.power_off_config[i].type);
-			DBG_PRINT("power off step %d: gpio = %d\n", i+1, pConf->lcd_power_ctrl.power_off_config[i].gpio);
-			DBG_PRINT("power off step %d: value = %d\n", i+1, pConf->lcd_power_ctrl.power_off_config[i].value);
-			DBG_PRINT("power off step %d: delay = %d\n", i+1, pConf->lcd_power_ctrl.power_off_config[i].delay);
+			lcd_print("power off step %d: type = %s(%d)\n", i+1, lcd_power_type_table[pConf->lcd_power_ctrl.power_off_config[i].type], pConf->lcd_power_ctrl.power_off_config[i].type);
+			lcd_print("power off step %d: gpio = %d\n", i+1, pConf->lcd_power_ctrl.power_off_config[i].gpio);
+			lcd_print("power off step %d: value = %d\n", i+1, pConf->lcd_power_ctrl.power_off_config[i].value);
+			lcd_print("power off step %d: delay = %d\n", i+1, pConf->lcd_power_ctrl.power_off_config[i].delay);
 		}
 
 		pConf->lcd_misc_ctrl.pin = devm_pinctrl_get(&pdev->dev);
@@ -2097,7 +2133,9 @@ static void lcd_config_assign(Lcd_Config_t *pConf)
 static struct notifier_block lcd_reboot_nb;
 static int lcd_probe(struct platform_device *pdev)
 {
-	struct aml_lcd_platform *pdata;  
+#ifndef CONFIG_USE_OF
+	struct aml_lcd_platform *pdata;
+#endif
 	int ret = 0;
 	
 	pDev = (lcd_dev_t *)kmalloc(sizeof(lcd_dev_t), GFP_KERNEL);
@@ -2109,15 +2147,12 @@ static int lcd_probe(struct platform_device *pdev)
 #ifdef CONFIG_USE_OF
 	//pdata = lcd_get_driver_data(pdev);
 	pDev->pConf = get_lcd_config();
-#else
-	pdata = pdev->dev.platform_data;
-	pDev->pConf = (Lcd_Config_t *)(pdata->lcd_conf);
-#endif
-	
-#ifdef CONFIG_USE_OF
 	_get_lcd_model_timing(pDev->pConf, pdev);
 	_get_lcd_default_config(pDev->pConf, pdev);
 	_get_lcd_power_config(pDev->pConf, pdev);
+#else
+	pdata = pdev->dev.platform_data;
+	pDev->pConf = (Lcd_Config_t *)(pdata->lcd_conf);
 #endif
 	
 	lcd_config_assign(pDev->pConf);
@@ -2175,7 +2210,7 @@ static struct platform_driver lcd_driver = {
 
 static int __init lcd_init(void)
 {
-    DBG_PRINT("LCD driver init\n");
+    lcd_print("LCD driver init\n");
     if (platform_driver_register(&lcd_driver)) {
         printk("failed to register lcd driver module\n");
         return -ENODEV;
diff --git a/include/linux/amlogic/vout/lcdoutc.h b/include/linux/amlogic/vout/lcdoutc.h
index ca2598400b1b..6848fe755e2e 100755
--- a/include/linux/amlogic/vout/lcdoutc.h
+++ b/include/linux/amlogic/vout/lcdoutc.h
@@ -31,12 +31,9 @@
 //debug print define
 //***********************************************
 //#define LCD_DEBUG_INFO
-#ifdef LCD_DEBUG_INFO
-#define DBG_PRINT(...)		printk(__VA_ARGS__)
-#else
-#define DBG_PRINT(...)
-#endif
 
+extern unsigned int lcd_print_flag;
+extern void lcd_print(const char *fmt, ...);
 //**********************************************
 //global define
 //***********************************************
-- 
2.19.0

