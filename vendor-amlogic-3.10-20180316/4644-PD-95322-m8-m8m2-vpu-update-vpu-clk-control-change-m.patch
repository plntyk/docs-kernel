From d410df2e49162f49839dc2c30f8f4a828cb68723 Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Mon, 4 Aug 2014 14:31:53 +0800
Subject: [PATCH 4644/5965] PD#95322: m8/m8m2: vpu: update vpu clk control,
 change m8 max vpu clk from 425M to 364M

Change-Id: I42381492f5745e1f5299c1a5ed1892be36fb1428
---
 arch/arm/mach-meson8/vpu.c | 111 +++++++++++++++++++++++++------------
 1 file changed, 76 insertions(+), 35 deletions(-)

diff --git a/arch/arm/mach-meson8/vpu.c b/arch/arm/mach-meson8/vpu.c
index 3cb7b1ffd327..37e65d0517c6 100755
--- a/arch/arm/mach-meson8/vpu.c
+++ b/arch/arm/mach-meson8/vpu.c
@@ -22,6 +22,18 @@
 
 #define VPU_VERION	"v03"
 
+typedef enum {
+	VPU_CHIP_M8 = 0,
+	VPU_CHIP_M8M2,
+	VPU_CHIP_MAX,
+} VPU_Chip_t;
+
+static const char* vpu_chip_name[] = {
+	"m8",
+	"m8m2",
+	"invalid",
+};
+
 //#define LIMIT_VPU_CLK_LOW
 static spinlock_t vpu_lock;
 static spinlock_t vpu_mem_lock;
@@ -58,25 +70,41 @@ static const char* vpu_mod_table[]={
 };
 
 typedef struct {
+	VPU_Chip_t   chip_type;
+	unsigned int clk_level_dft;
+	unsigned int clk_level_max;
+	unsigned int clk_level;
 	unsigned mem_pd0;
 	unsigned mem_pd1;
-	unsigned int clk_level;
 }VPU_Conf_t;
 
 #define CLK_LEVEL_DFT		4
 #define CLK_LEVEL_MAX		8	//limit max clk to 425M
-static unsigned int vpu_clk_setting[][3] = {
-	//frequency		clk_mux		div
-	{106250000,		1,			7},	//0
-	{127500000,		2,			3},	//1
-	{159375000,		0,			3},	//2
-	{212500000,		1,			3},	//3
-	{255000000,		2,			1},	//4
-	{283333000,		1,			2},	//5
-	{318750000,		0,			1},	//6
-	{425000000,		1,			1},	//7
-	{510000000,		2,			0},	//8
-	{637500000,		0,			0},	//9
+static unsigned int vpu_clk_setting[][10][3] = {
+    {   //frequency    clk_mux   div //M8
+        {106250000,    1,        7}, //0
+        {127500000,    2,        3}, //1
+        {159375000,    0,        3}, //2
+        {212500000,    1,        3}, //3
+        {255000000,    2,        1}, //4
+        {283333000,    1,        2}, //5
+        {318750000,    0,        1}, //6
+        {364300000,    3,        0}, //7
+        {425000000,    1,        1}, //8
+        {510000000,    2,        0}, //9
+    },
+    {   //frequency    clk_mux   div //M8M2
+        {106250000,    1,        7}, //0
+        {127500000,    2,        3}, //1
+        {159375000,    0,        3}, //2
+        {212500000,    1,        3}, //3
+        {255000000,    2,        1}, //4
+        {283333000,    1,        2}, //5
+        {318750000,    0,        1}, //6
+        {425000000,    1,        1}, //7
+        {510000000,    2,        0}, //8
+        {637500000,    0,        0}, //9
+    },
 };
 
 static unsigned int vpu_clk_vmod[] = {
@@ -109,10 +137,12 @@ static unsigned int vpu_clk_vmod[] = {
 	0,	//VPU_MAX,
 };
 
-static int dft_clk_level;
 static VPU_Conf_t vpu_config = {
 	.mem_pd0 = 0,
 	.mem_pd1 = 0,
+	.chip_type = VPU_CHIP_MAX,
+	.clk_level_dft = CLK_LEVEL_DFT,
+	.clk_level_max = CLK_LEVEL_MAX,
 	.clk_level = CLK_LEVEL_DFT,
 };
 
@@ -193,8 +223,8 @@ static unsigned int get_vpu_clk_level(unsigned int video_clk)
 	
 	video_bw = video_clk + 1000000;
 
-	for (i=0; i<CLK_LEVEL_MAX; i++) {
-		if (video_bw <= vpu_clk_setting[i][0])
+	for (i=0; i<vpu_config.clk_level_max; i++) {
+		if (video_bw <= vpu_clk_setting[vpu_config.chip_type][i][0])
 			break;
 	}
 	clk_level = i;
@@ -238,8 +268,8 @@ static int adjust_vpu_clk(VPU_Conf_t *vconf)
 	spin_lock_irqsave(&vpu_lock, flags);
 	
 	clk_level = vconf->clk_level;
-	aml_write_reg32(P_HHI_VPU_CLK_CNTL, ((1 << 8) | (vpu_clk_setting[clk_level][1] << 9) | (vpu_clk_setting[clk_level][2] << 0)));
-	printk("set vpu clk: %uHz, readback: %uHz(0x%x)\n", vpu_clk_setting[clk_level][0], get_vpu_clk(), (aml_read_reg32(P_HHI_VPU_CLK_CNTL)));
+	aml_write_reg32(P_HHI_VPU_CLK_CNTL, ((1 << 8) | (vpu_clk_setting[vpu_config.chip_type][clk_level][1] << 9) | (vpu_clk_setting[vpu_config.chip_type][clk_level][2] << 0)));
+	printk("set vpu clk: %uHz, readback: %uHz(0x%x)\n", vpu_clk_setting[vpu_config.chip_type][clk_level][0], get_vpu_clk(), (aml_read_reg32(P_HHI_VPU_CLK_CNTL)));
 
 	spin_unlock_irqrestore(&vpu_lock, flags);
 
@@ -259,20 +289,20 @@ static int set_vpu_clk(unsigned int vclk)
 		clk_level = vclk;
 	}
 
-	if (clk_level >= CLK_LEVEL_MAX) {
+	if (clk_level >= vpu_config.clk_level_max) {
 		ret = 1;
 		printk("set vpu clk out of supported range\n");
 		goto set_vpu_clk_limit;
 	}
 #ifdef LIMIT_VPU_CLK_LOW
-	else if (clk_level < dft_clk_level) {
+	else if (clk_level < vpu_config.clk_level_dft) {
 		ret = 3;
 		printk("set vpu clk less than system default\n");
 		goto set_vpu_clk_limit;
 	}
 #endif
 	
-	if ((((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 9) & 0x7) != vpu_clk_setting[clk_level][1]) || (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 0) & 0x7f) != vpu_clk_setting[clk_level][2])) {
+	if ((((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 9) & 0x7) != vpu_clk_setting[vpu_config.chip_type][clk_level][1]) || (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 0) & 0x7f) != vpu_clk_setting[vpu_config.chip_type][clk_level][2])) {
 		vpu_config.clk_level = clk_level;
 #ifdef CONFIG_SMP
 		try_exclu_cpu_exe(adjust_vpu_clk, &vpu_config);
@@ -317,7 +347,7 @@ unsigned int get_vpu_clk_vmod(unsigned int vmod)
 	vpu_mod = get_vpu_mod(vmod);
 	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod < VPU_MAX)) {
 		vpu_clk = vpu_clk_vmod[vpu_mod - VPU_MOD_START];
-		vpu_clk = vpu_clk_setting[vpu_clk][0];
+		vpu_clk = vpu_clk_setting[vpu_config.chip_type][vpu_clk][0];
 	}
 	else {
 		vpu_clk = 0;
@@ -361,7 +391,7 @@ int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod)
 		clk_level = vclk;
 	}
 
-	if (clk_level >= CLK_LEVEL_MAX) {
+	if (clk_level >= vpu_config.clk_level_max) {
 		ret = 1;
 		printk("set vpu clk out of supported range\n");
 		goto request_vpu_clk_limit;
@@ -375,7 +405,7 @@ int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod)
 	}
 	
 	vpu_clk_vmod[vpu_mod - VPU_MOD_START] = clk_level;
-	printk("request vpu clk holdings: %s %uHz\n", vpu_mod_table[vpu_mod - VPU_MOD_START], vpu_clk_setting[clk_level][0]);
+	printk("request vpu clk holdings: %s %uHz\n", vpu_mod_table[vpu_mod - VPU_MOD_START], vpu_clk_setting[vpu_config.chip_type][clk_level][0]);
 
 	clk_level = get_vpu_clk_level_max_vmod();
 #ifdef CONFIG_VPU_DYNAMIC_ADJ
@@ -601,11 +631,11 @@ static ssize_t vpu_debug(struct class *class, struct class_attribute *attr, cons
 			printk("vpu clk holdings:\n");
 			if (tmp[1] == VPU_MAX) {
 				for (i=VPU_MOD_START; i<VPU_MAX; i++) {
-					printk("%s:		%uHz(%u)\n", vpu_mod_table[i - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[i - VPU_MOD_START]][0], vpu_clk_vmod[i - VPU_MOD_START]);
+					printk("%s:		%uHz(%u)\n", vpu_mod_table[i - VPU_MOD_START], vpu_clk_setting[vpu_config.chip_type][vpu_clk_vmod[i - VPU_MOD_START]][0], vpu_clk_vmod[i - VPU_MOD_START]);
 				}
 			}
 			else {
-				printk("%s:		%uHz(%u)\n", vpu_mod_table[tmp[1] - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[tmp[1] - VPU_MOD_START]][0], vpu_clk_vmod[tmp[1] - VPU_MOD_START]);
+				printk("%s:		%uHz(%u)\n", vpu_mod_table[tmp[1] - VPU_MOD_START], vpu_clk_setting[vpu_config.chip_type][vpu_clk_vmod[tmp[1] - VPU_MOD_START]][0], vpu_clk_vmod[tmp[1] - VPU_MOD_START]);
 			}
 			break;
 		default:
@@ -694,6 +724,21 @@ static int vpu_resume(struct platform_device *pdev)
 }
 #endif
 
+static void detect_vpu_chip(void)
+{
+	if (IS_MESON_M8M2_CPU)
+		vpu_config.chip_type = VPU_CHIP_M8M2;
+	else if (IS_MESON_M8_CPU)
+		vpu_config.chip_type = VPU_CHIP_M8;
+	else
+		vpu_config.chip_type = VPU_CHIP_MAX;
+	
+	vpu_config.clk_level_dft = CLK_LEVEL_DFT;
+	vpu_config.clk_level_max = CLK_LEVEL_MAX;
+	
+	printk("vpu driver detect cpu type: %s\n", vpu_chip_name[vpu_config.chip_type]);
+}
+
 static int get_vpu_config(struct platform_device *pdev)
 {
 	int ret=0;
@@ -711,19 +756,14 @@ static int get_vpu_config(struct platform_device *pdev)
 	if(ret){
 		printk("don't find to match clk_level, use default setting.\n");
 	}
-	else {		
-		if (val >= 100) {	//regard as vpu_clk
-			val = get_vpu_clk_level(val);
-		}
-
-		if (val >= CLK_LEVEL_MAX) {
+	else {
+		if (val >= vpu_config.clk_level_max) {
 			printk("vpu clk_level in dts is out of support range, use default setting\n");
-			val = CLK_LEVEL_DFT;
+			val = vpu_config.clk_level_dft;;
 		}
 		
 		vpu_config.clk_level = val;
-		dft_clk_level = val;
-		printk("load vpu_clk in dts: %uHz(%u)\n", vpu_clk_setting[vpu_config.clk_level][0], vpu_config.clk_level);
+		printk("load vpu_clk in dts: %uHz(%u)\n", vpu_clk_setting[vpu_config.chip_type][vpu_config.clk_level][0], vpu_config.clk_level);
 	}
 	
 	return ret;
@@ -745,6 +785,7 @@ static int vpu_probe(struct platform_device *pdev)
 	spin_lock_init(&vpu_mem_lock);
 	
 	printk("VPU driver version: %s\n", VPU_VERION);
+	detect_vpu_chip();
 	get_vpu_config(pdev);
 	set_vpu_clk(vpu_config.clk_level);
 	
-- 
2.19.0

