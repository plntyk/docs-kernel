From e9b886e2a278c9e7a0ea83452c78a2d6cbd19a8a Mon Sep 17 00:00:00 2001
From: "xueyue.ma" <xueyue.ma@amlogic.com>
Date: Fri, 1 Aug 2014 16:20:14 +0800
Subject: [PATCH 4667/5965] PD#95290: TrustZone HAL APIs using cache method

Conflicts:

	arch/arm/mach-meson6/meson-secure.c
---
 arch/arm/mach-meson6/meson-secure.c   |  26 +-----
 arch/arm/mach-meson8/meson-secure.c   |  24 +----
 drivers/amlogic/efuse/efuse_version.c | 123 ++++++++++++++++++++++++++
 3 files changed, 128 insertions(+), 45 deletions(-)

diff --git a/arch/arm/mach-meson6/meson-secure.c b/arch/arm/mach-meson6/meson-secure.c
index 06de2d7b2fe8..79157837920b 100755
--- a/arch/arm/mach-meson6/meson-secure.c
+++ b/arch/arm/mach-meson6/meson-secure.c
@@ -64,7 +64,7 @@ int meson_secure_memblock(unsigned startaddr, unsigned endaddr, struct secure_me
 }
 */
 
-struct memconfig memsecure[MEMCONFIG_NUM];
+struct memconfig memsecure[MEMCONFIG_NUM] = {};
 int meson_trustzone_memconfig(void)
 {
 	int ret;
@@ -73,17 +73,11 @@ int meson_trustzone_memconfig(void)
 	arg.memconfigbuf_phy_addr = __pa(memsecure);
 	arg.memconfigbuf_count = MEMCONFIG_NUM;
 
-	__cpuc_flush_dcache_area(memsecure, sizeof(memsecure));
-	outer_clean_range(__pa(memsecure), (__pa(memsecure + MEMCONFIG_NUM)));
-	__cpuc_flush_dcache_area(&arg, sizeof(arg));
-	outer_clean_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
+	set_cpus_allowed_ptr(current, cpumask_of(0));
 
 	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_MEMCONFIG, __pa(&arg));
 
-	outer_inv_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
-	dmac_unmap_area(&arg, sizeof(arg), DMA_FROM_DEVICE);
-	outer_inv_range(__pa(memsecure), __pa(memsecure + MEMCONFIG_NUM));
-	dmac_unmap_area(memsecure, sizeof(memsecure), DMA_FROM_DEVICE);
+	set_cpus_allowed_ptr(current, cpu_all_mask);
 
 	return ret;
 }
@@ -127,23 +121,9 @@ int meson_trustzone_efuse(struct efuse_hal_api_arg* arg)
 		return -1;
 	}
 	set_cpus_allowed_ptr(current, cpumask_of(0));
-	__cpuc_flush_dcache_area(__va(arg->buffer_phy), arg->size);
-	outer_clean_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
-
-	__cpuc_flush_dcache_area(__va(arg->retcnt_phy), sizeof(unsigned int));
-	outer_clean_range(arg->retcnt_phy, (arg->retcnt_phy + sizeof(unsigned int)));
-
-	__cpuc_flush_dcache_area((void*)arg, sizeof(struct efuse_hal_api_arg));
-	outer_clean_range(__pa(arg), __pa(arg + 1));
 
 	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_EFUSE, __pa(arg));
 
-	if (arg->cmd == EFUSE_HAL_API_READ) {
-		outer_inv_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
-		dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
-	}
-	outer_inv_range((arg->retcnt_phy), (arg->retcnt_phy + sizeof(unsigned int)));
-	dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
 	set_cpus_allowed_ptr(current, cpu_all_mask);
 
 	return ret;
diff --git a/arch/arm/mach-meson8/meson-secure.c b/arch/arm/mach-meson8/meson-secure.c
index c7a1fe67bd83..f1ca9231a980 100755
--- a/arch/arm/mach-meson8/meson-secure.c
+++ b/arch/arm/mach-meson8/meson-secure.c
@@ -73,17 +73,11 @@ int meson_trustzone_memconfig(void)
 	arg.memconfigbuf_phy_addr = __pa(memsecure);
 	arg.memconfigbuf_count = MEMCONFIG_NUM;
 
-	__cpuc_flush_dcache_area(memsecure, sizeof(memsecure));
-	outer_clean_range(__pa(memsecure), (__pa(memsecure + MEMCONFIG_NUM)));
-	__cpuc_flush_dcache_area(&arg, sizeof(arg));
-	outer_clean_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
+	set_cpus_allowed_ptr(current, cpumask_of(0));
 
 	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_MEMCONFIG, __pa(&arg));
 
-	outer_inv_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
-	dmac_unmap_area(&arg, sizeof(arg), DMA_FROM_DEVICE);
-	outer_inv_range(__pa(memsecure), __pa(memsecure + MEMCONFIG_NUM));
-	dmac_unmap_area(memsecure, sizeof(memsecure), DMA_FROM_DEVICE);
+	set_cpus_allowed_ptr(current, cpu_all_mask);
 
 	return ret;
 }
@@ -127,23 +121,9 @@ int meson_trustzone_efuse(struct efuse_hal_api_arg* arg)
 		return -1;
 	}
 	set_cpus_allowed_ptr(current, cpumask_of(0));
-	__cpuc_flush_dcache_area(__va(arg->buffer_phy), arg->size);
-	outer_clean_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
-
-	__cpuc_flush_dcache_area(__va(arg->retcnt_phy), sizeof(unsigned int));
-	outer_clean_range(arg->retcnt_phy, (arg->retcnt_phy + sizeof(unsigned int)));
-
-	__cpuc_flush_dcache_area((void*)arg, sizeof(struct efuse_hal_api_arg));
-	outer_clean_range(__pa(arg), __pa(arg + 1));
 
 	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_EFUSE, __pa(arg));
 
-	if (arg->cmd == EFUSE_HAL_API_READ) {
-		outer_inv_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
-		dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
-	}
-	outer_inv_range((arg->retcnt_phy), (arg->retcnt_phy + sizeof(unsigned int)));
-	dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
 	set_cpus_allowed_ptr(current, cpu_all_mask);
 
 	return ret;
diff --git a/drivers/amlogic/efuse/efuse_version.c b/drivers/amlogic/efuse/efuse_version.c
index 9abcdd147707..26245930fa23 100755
--- a/drivers/amlogic/efuse/efuse_version.c
+++ b/drivers/amlogic/efuse/efuse_version.c
@@ -302,6 +302,124 @@ static efuseinfo_item_t efuseinfo_v3[] =
         .bch_reverse = 0, //0,
     },
 };
+
+static efuseinfo_item_t efuseinfo_v4[] = {
+    {
+        .title = "licence",
+        .id = EFUSE_LICENCE_ID,
+        .offset = 0,
+        .enc_len = 3,
+        .data_len = 3,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+    {
+        .title = "version",   // include machid
+        .id = EFUSE_VERSION_ID,
+        .offset = V2_EFUSE_VERSION_OFFSET, //3,
+        .enc_len = V2_EFUSE_VERSION_ENC_LEN, //1,
+        .data_len = V2_EFUSE_VERSION_DATA_LEN, //1,
+        .bch_en = V2_EFUSE_VERSION_BCH_EN, //0,
+        .bch_reverse = V2_EFUSE_VERSION_BCH_REVERSE, //0,
+    },
+    {
+        .title = "customerid",   // include machid
+        .id = EFUSE_CUSTOMER_ID,
+        .offset = 4,
+        .enc_len = 4,
+        .data_len = 4,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+    {
+        .title = "rsakey",
+        .id = EFUSE_RSA_KEY_ID,
+        .offset = 8,
+        .enc_len = 128,
+        .data_len = 128,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+	{
+        .title = "secu-boot",
+        .offset = 136,
+        .enc_len = 156,
+        .data_len = 156,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },    
+    {
+        .title = "reserved",
+        .offset = 292,
+        .enc_len = 112,
+        .data_len = 112,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },    
+    {
+        .title = "storagekey",
+        .offset = 404,
+        .enc_len = 32,
+        .data_len = 32,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+    {
+        .title = "mac",    //for the main network interface
+        .id = EFUSE_MAC_ID,
+        .offset = 436,
+        .enc_len = 6,
+        .data_len = 6,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+    {
+        .title = "mac_bt",  //for the second network interface or bt
+        .id = EFUSE_MAC_BT_ID,
+        .offset = 442,
+        .enc_len = 6,
+        .data_len = 6,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+    {
+        .title = "mac_wifi", //for the second network interface or bt
+	.id = EFUSE_MAC_WIFI_ID,
+        .offset = 448,
+        .enc_len = 6,
+        .data_len = 6,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+    {
+        .title = "usid",
+	.id = EFUSE_USID_ID,
+        .offset = V2_EFUSE_USID_OFFSET,// 454,
+        .enc_len = V2_EFUSE_USID_ENC_LEN, //58,
+        .data_len = V2_EFUSE_USID_DATA_LEN, //58,
+        .bch_en = V2_EFUSE_USID_BCH_EN, //0,
+        .bch_reverse = V2_EFUSE_USID_BCH_REVERSE, //0,
+    },
+    {
+        .title = "machineid",
+	.id = EFUSE_MACHINEID_ID,
+        .offset = 502,
+        .enc_len = 4,
+        .data_len = 4,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+    {
+        .title = "reserved",
+        .offset = 506,
+        .enc_len = 6,
+        .data_len = 6,
+        .bch_en = 0,
+        .bch_reverse = 0,
+    },
+        
+};
+
 #endif///endif efuseinfo version3
 static efuseinfo_item_t efuseinfo_v2[] = 
 {
@@ -547,6 +665,11 @@ efuseinfo_t efuseinfo[] =
 		.size = sizeof(efuseinfo_v3)/sizeof(efuseinfo_item_t),
 		.version =3,
 	},
+	{
+		.efuseinfo_version = efuseinfo_v4,
+		.size = sizeof(efuseinfo_v4) / sizeof(efuseinfo_item_t),
+		.version = 4,
+	},
 	{
 		.efuseinfo_version = efuseinfo_M8_serialNum_v1,
 		.size = sizeof(efuseinfo_M8_serialNum_v1)/sizeof(efuseinfo_item_t),
-- 
2.19.0

