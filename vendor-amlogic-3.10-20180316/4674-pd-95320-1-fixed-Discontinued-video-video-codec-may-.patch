From 3743917426fd796c3e4c9ecde004ea2283bc41da Mon Sep 17 00:00:00 2001
From: "zhi.zhou" <zhi.zhou@amlogic.com>
Date: Tue, 5 Aug 2014 05:10:41 -0400
Subject: [PATCH 4674/5965] pd#95320 1, fixed Discontinued video,video codec
 may stop wait buffer bug. & add vframe_states for ionvideo.          2, fixed
 sohu av not sync bug after  advertising..

---
 drivers/amlogic/amports/ptsserv.c   |  2 +-
 drivers/amlogic/amports/vh264.c     |  5 ++-
 drivers/amlogic/ionvideo/ionvideo.c | 51 +++++++++++++++++++++++++++--
 3 files changed, 52 insertions(+), 6 deletions(-)

diff --git a/drivers/amlogic/amports/ptsserv.c b/drivers/amlogic/amports/ptsserv.c
index 5835da0e57a6..041a5b97bc7b 100755
--- a/drivers/amlogic/amports/ptsserv.c
+++ b/drivers/amlogic/amports/ptsserv.c
@@ -12,7 +12,7 @@
 
 #include "vdec_reg.h"
 
-#define VIDEO_REC_SIZE  8192
+#define VIDEO_REC_SIZE  (8192*2)
 #define AUDIO_REC_SIZE  8192
 #define VIDEO_LOOKUP_RESOLUTION 2500
 #define AUDIO_LOOKUP_RESOLUTION 1024
diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index d000b2b82cf2..32fa14e1b2d6 100755
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -579,8 +579,7 @@ static void vh264_set_params(void)
     unsigned int chroma_format_idc, chroma444;
     unsigned int crop_infor, crop_bottom;
 
-    h264_first_pts_ready = 0;
-    h264_first_valid_pts_ready=0;
+
     buffer_for_recycle_rd = 0;
     buffer_for_recycle_wr = 0;
 
@@ -1066,7 +1065,7 @@ static void vh264_isr(void)
             if (sync_outside == 0) {
                 if (h264_first_pts_ready == 0) {
                     if (pts_valid == 0) {
-                        buffer_for_recycle[buffer_for_recycle_wr++] = buffer_index;
+                        buffer_for_recycle[buffer_for_recycle_wr] = buffer_index;
 
                         if (buffer_for_recycle_wr == VF_BUF_NUM-1) {
                             buffer_for_recycle_wr = 0;
diff --git a/drivers/amlogic/ionvideo/ionvideo.c b/drivers/amlogic/ionvideo/ionvideo.c
index 6494f36de795..913d0ac9c79e 100755
--- a/drivers/amlogic/ionvideo/ionvideo.c
+++ b/drivers/amlogic/ionvideo/ionvideo.c
@@ -106,6 +106,23 @@ static const struct ionvideo_fmt *get_format(struct v4l2_format *f)
 
 static LIST_HEAD (ionvideo_devlist);
 
+static DEFINE_SPINLOCK(ion_states_lock);
+static int  ionvideo_vf_get_states(vframe_states_t *states)
+{
+    int ret = -1;
+    unsigned long flags;
+    struct vframe_provider_s *vfp;
+    vfp = vf_get_provider(RECEIVER_NAME);
+    spin_lock_irqsave(&ion_states_lock, flags);
+    if (vfp && vfp->ops && vfp->ops->vf_states) {
+        ret=vfp->ops->vf_states(states, vfp->op_arg);
+    }
+    spin_unlock_irqrestore(&ion_states_lock, flags);
+    return ret;
+}
+
+
+
 /* ------------------------------------------------------------------
  DMA and thread functions
  ------------------------------------------------------------------*/
@@ -919,6 +936,33 @@ free_dev:
     return ret;
 }
 
+static ssize_t vframe_states_show(struct class *class, struct class_attribute* attr, char* buf)
+{
+    int ret = 0;
+    vframe_states_t states;
+    unsigned long flags;
+	
+    if (ionvideo_vf_get_states(&states) == 0) {
+        ret += sprintf(buf + ret, "vframe_pool_size=%d\n", states.vf_pool_size);
+        ret += sprintf(buf + ret, "vframe buf_free_num=%d\n", states.buf_free_num);
+        ret += sprintf(buf + ret, "vframe buf_recycle_num=%d\n", states.buf_recycle_num);
+        ret += sprintf(buf + ret, "vframe buf_avail_num=%d\n", states.buf_avail_num);
+    } else {
+        ret += sprintf(buf + ret, "vframe no states\n");
+    }
+
+    return ret;
+}
+
+static struct class_attribute ion_video_class_attrs[] = {
+	__ATTR_RO(vframe_states),
+    __ATTR_NULL
+};
+static struct class ionvideo_class = {
+        .name = "ionvideo",
+        .class_attrs = ion_video_class_attrs,
+};
+
 /* This routine allocates from 1 to n_devs virtual drivers.
 
  The real maximum number of virtual drivers will depend on how many drivers
@@ -928,7 +972,9 @@ free_dev:
 static int __init ionvideo_init(void)
 {
     int ret = 0, i;
-
+    ret = class_register(&ionvideo_class);
+    if(ret<0)
+        return ret;
     if (n_devs <= 0)
     n_devs = 1;
 
@@ -953,13 +999,14 @@ static int __init ionvideo_init(void)
 
     /* n_devs will reflect the actual number of allocated devices */
     n_devs = i;
-
+    
     return ret;
 }
 
 static void __exit ionvideo_exit(void)
 {
     ionvideo_release();
+	class_unregister(&ionvideo_class);
 }
 
 MODULE_DESCRIPTION("Video Technology Magazine Ion Video Capture Board");
-- 
2.19.0

