From e15586feb02c31b7f2da4421d7b6c86bb0a06741 Mon Sep 17 00:00:00 2001
From: Peifu Jiang <peifu.jiang@amlogic.com>
Date: Thu, 7 Aug 2014 19:07:55 +0800
Subject: [PATCH 4684/5965] PD#94168: m8baby add Secure OS support

---
 arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd |   2 +-
 arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd |   2 +-
 arch/arm/configs/meson8b_tee_defconfig        | 388 ++++++++++++++++++
 arch/arm/mach-meson8/cpu.c                    |  10 +-
 arch/arm/mach-meson8b/Kconfig                 |   6 +
 arch/arm/mach-meson8b/cpu.c                   |  10 +-
 arch/arm/mach-meson8b/gpio.c                  |  11 +
 .../mach-meson8b/include/mach/meson-secure.h  |  26 +-
 arch/arm/mach-meson8b/meson-secure.c          |  62 ++-
 9 files changed, 473 insertions(+), 44 deletions(-)
 create mode 100755 arch/arm/configs/meson8b_tee_defconfig

diff --git a/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
index 057c8edd9a8f..38d144a76f8e 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
@@ -1175,7 +1175,7 @@ void root_func(){
 		bootloader:bootloader{
 			name = "bootloader";
 			offset = <0>;
-			size = <0x60000>;
+			size = <0x100000>;
 		};
 
 //$$ MATCH "Spi_nr-part-1_match" = <&ubootenv>
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
index 8acfd151e711..3570faa8dd9b 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
@@ -1199,7 +1199,7 @@ void root_func(){
 		bootloader:bootloader{
 			name = "bootloader";
 			offset = <0>;
-			size = <0x60000>;
+			size = <0x100000>;
 		};
 
 //$$ MATCH "Spi_nr-part-1_match" = <&ubootenv>
diff --git a/arch/arm/configs/meson8b_tee_defconfig b/arch/arm/configs/meson8b_tee_defconfig
new file mode 100755
index 000000000000..d577c2d5abbe
--- /dev/null
+++ b/arch/arm/configs/meson8b_tee_defconfig
@@ -0,0 +1,388 @@
+CONFIG_KERNEL_LZO=y
+CONFIG_SYSVIPC=y
+CONFIG_AUDIT=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_IKCONFIG=y
+CONFIG_LOG_BUF_SHIFT=19
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_RD_XZ=y
+CONFIG_RD_LZO=y
+CONFIG_KALLSYMS_ALL=y
+CONFIG_EMBEDDED=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_ARCH_MESON8B=y
+CONFIG_MESON_SUSPEND=y
+CONFIG_MESON_LEGACY_REGISTER_API=y
+CONFIG_ARM_ERRATA_754322=y
+CONFIG_ARM_ERRATA_764369=y
+CONFIG_SMP=y
+CONFIG_PREEMPT=y
+CONFIG_AEABI=y
+CONFIG_HIGHMEM=y
+CONFIG_KSM=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_INTERACTIVE=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_AMLOGIC_MESON_CPUFREQ=y
+CONFIG_VFP=y
+CONFIG_NEON=y
+CONFIG_BINFMT_MISC=y
+CONFIG_WAKELOCK=y
+CONFIG_PM_RUNTIME=y
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=y
+CONFIG_NET_KEY=y
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_INET_ESP=y
+CONFIG_IPV6=y
+CONFIG_IPV6_PRIVACY=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=y
+CONFIG_INET6_ESP=y
+CONFIG_INET6_IPCOMP=y
+CONFIG_IPV6_MIP6=y
+CONFIG_IPV6_TUNNEL=y
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CT_PROTO_DCCP=y
+CONFIG_NF_CT_PROTO_SCTP=y
+CONFIG_NF_CT_PROTO_UDPLITE=y
+CONFIG_NF_CONNTRACK_AMANDA=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_H323=y
+CONFIG_NF_CONNTRACK_IRC=y
+CONFIG_NF_CONNTRACK_NETBIOS_NS=y
+CONFIG_NF_CONNTRACK_PPTP=y
+CONFIG_NF_CONNTRACK_SANE=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_TARGET_MARK=y
+CONFIG_NETFILTER_XT_TARGET_NFLOG=y
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
+CONFIG_NETFILTER_XT_TARGET_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_MATCH_COMMENT=y
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_HELPER=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_LENGTH=y
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
+CONFIG_NETFILTER_XT_MATCH_QTAGUID=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y
+CONFIG_NETFILTER_XT_MATCH_SOCKET=y
+CONFIG_NETFILTER_XT_MATCH_STATE=y
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
+CONFIG_NETFILTER_XT_MATCH_STRING=y
+CONFIG_NETFILTER_XT_MATCH_TIME=y
+CONFIG_NETFILTER_XT_MATCH_U32=y
+CONFIG_NF_CONNTRACK_IPV4=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=y
+CONFIG_IP_NF_MATCH_TTL=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_TARGET_REJECT_SKERR=y
+CONFIG_NF_NAT_IPV4=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_NETMAP=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_RAW=y
+CONFIG_IP_NF_ARPTABLES=y
+CONFIG_IP_NF_ARPFILTER=y
+CONFIG_IP_NF_ARP_MANGLE=y
+CONFIG_NF_CONNTRACK_IPV6=y
+CONFIG_IP6_NF_IPTABLES=y
+CONFIG_IP6_NF_FILTER=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+CONFIG_IP6_NF_TARGET_REJECT_SKERR=y
+CONFIG_IP6_NF_MANGLE=y
+CONFIG_IP6_NF_RAW=y
+CONFIG_NF_NAT_IPV6=y
+CONFIG_IP6_NF_TARGET_MASQUERADE=y
+CONFIG_IP6_NF_TARGET_NPT=y
+CONFIG_BRIDGE=y
+# CONFIG_BRIDGE_IGMP_SNOOPING is not set
+CONFIG_PHONET=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_INGRESS=y
+CONFIG_NET_CLS_U32=y
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_NET_ACT_MIRRED=y
+CONFIG_BT=y
+CONFIG_BT_RFCOMM=y
+CONFIG_BT_RFCOMM_TTY=y
+CONFIG_BT_BNEP=y
+CONFIG_BT_BNEP_MC_FILTER=y
+CONFIG_BT_BNEP_PROTO_FILTER=y
+CONFIG_BT_HIDP=y
+CONFIG_BT_HCIUART=y
+CONFIG_BT_HCIUART_H4=y
+CONFIG_CFG80211=y
+CONFIG_MAC80211=y
+CONFIG_RFKILL=y
+CONFIG_I2C_AML=y
+CONFIG_SARADC_AM=y
+# CONFIG_MESON_INPUT_REMOTE is not set
+CONFIG_NEW_AM_REMOTE=y
+CONFIG_NEW_AM_IR_TX=y
+CONFIG_ADC_KEYPADS_AM=y
+CONFIG_MESON_INPUT_TOUCHSCREEN=y
+CONFIG_FOCALTECH_CAPACITIVE_TOUCHSCREEN=y
+CONFIG_GOODIX_GT81XX_CAPACITIVE_TOUCHSCREEN=y
+CONFIG_GSLX680_COMPATIBLE_CAPACITIVE_TOUCHSCREEN=y
+CONFIG_AML_TOUCH_ALGORITHM_SUPPORT=m
+CONFIG_GOODIX_GT9XX_CAPACITIVE_TOUCHSCREEN=y
+CONFIG_NOVATEK_CAPACITIVE_TOUCHSCREEN=y
+CONFIG_TOUCHSCREEN_CT36X=y
+CONFIG_AML_GPIO_KEY=y
+CONFIG_AML_PMU_ALGORITHM_SUPPORT=m
+CONFIG_AML_PMU=y
+CONFIG_AML1216=y
+CONFIG_AML1218=y
+CONFIG_RICOH_PMU=y
+CONFIG_SECURITYKEY=y
+CONFIG_EFUSE=y
+CONFIG_AMLOGIC_THERMAL=y
+CONFIG_AMLOGIC_USB=y
+CONFIG_MMC_AML=y
+CONFIG_AML_NAND_KEY=y
+# CONFIG_AM_NAND is not set
+CONFIG_AML_NEXT_GEN_NAND=y
+CONFIG_AM_ETHERNET=y
+CONFIG_AML_PHY=y
+CONFIG_AML_LAN8720=y
+CONFIG_AML_IP101_PHY=y
+CONFIG_AML_KSZ8091=y
+CONFIG_AML_RTL8211F=y
+CONFIG_AM_WIFI=y
+CONFIG_AM_WIFI_SD_MMC=y
+CONFIG_AM_WIFI_USB=y
+CONFIG_SDIO_DHD_CDC_WIFI_40181_MODULE=m
+CONFIG_RTL8188EU=m
+CONFIG_RTL8189ES=m
+CONFIG_RTL8723BS=m
+CONFIG_RTL8188EU_MP=m
+CONFIG_BT_DEVICE=y
+CONFIG_VSYNC_RDMA=y
+CONFIG_AM_VIDEO=y
+CONFIG_AM_ENCODER=y
+CONFIG_AM_JPEG_ENCODER=y
+CONFIG_FB_AM=y
+CONFIG_FB_OSD2_DEFAULT_WIDTH=32
+CONFIG_FB_OSD2_DEFAULT_HEIGHT=32
+CONFIG_FB_OSD2_DEFAULT_WIDTH_VIRTUAL=32
+CONFIG_FB_OSD2_DEFAULT_HEIGHT_VIRTUAL=32
+CONFIG_FB_OSD2_CURSOR=y
+CONFIG_AMLOGIC_BACKLIGHT=y
+CONFIG_AM_GE2D=y
+CONFIG_AM_LOGO=y
+CONFIG_POST_PROCESS_MANAGER=y
+CONFIG_POST_PROCESS_MANAGER_PPSCALER=y
+CONFIG_V4L_AMLOGIC_VIDEO=y
+CONFIG_V4L_AMLOGIC_VIDEO2=y
+CONFIG_AMLOGIC_IONVIDEO=y
+CONFIG_SENSOR_DEVICES=y
+CONFIG_GRAVITY_BMA250=y
+CONFIG_GRAVITY_BMA222=y
+CONFIG_GRAVITY_MMA7660=y
+CONFIG_GRAVITY_MIR3DA=y
+CONFIG_GRAVITY_LIS3DH=y
+CONFIG_GRAVITY_MMA8452=y
+CONFIG_GRAVITY_MC32X0=y
+CONFIG_GRAVITY_DMARD06=y
+CONFIG_GRAVITY_MMA865X=y
+CONFIG_GRAVITY_LSM303D=y
+CONFIG_GRAVITY_DMARD10=y
+CONFIG_GRAVITY_KXTJ9=y
+CONFIG_GRAVITY_STK8312=y
+CONFIG_GRAVITY_STK8313=y
+CONFIG_GRAVITY_MM3A310=y
+CONFIG_GRAVITY_MXC622X=y
+CONFIG_GRAVITY_MXC6255XC=y
+CONFIG_LIGHT_CM36283=y
+CONFIG_LIGHT_CM3232=y
+CONFIG_LIGHT_CM3217=y
+CONFIG_LIGHT_LTR501=y
+CONFIG_LIGHT_EPL6814=y
+CONFIG_LIGHT_ISL29023=y
+CONFIG_LIGHT_STK220X=y
+CONFIG_LIGHT_LTR558=y
+CONFIG_AM_HDMI_ONLY=y
+CONFIG_DEINTERLACE=y
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_MTD=y
+CONFIG_MTD_BLOCK=y
+CONFIG_PROC_DEVICETREE=y
+CONFIG_OF_SELFTEST=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_SCSI=y
+CONFIG_BLK_DEV_SD=y
+CONFIG_BLK_DEV_SR=y
+CONFIG_SCSI_MULTI_LUN=y
+CONFIG_NETDEVICES=y
+CONFIG_TUN=y
+CONFIG_PPP=y
+CONFIG_PPP_BSDCOMP=y
+CONFIG_PPP_DEFLATE=y
+CONFIG_PPP_FILTER=y
+CONFIG_PPP_MPPE=y
+CONFIG_PPP_MULTILINK=y
+CONFIG_PPPOLAC=y
+CONFIG_PPPOPNS=y
+CONFIG_PPP_ASYNC=y
+CONFIG_PPP_SYNC_TTY=y
+CONFIG_USB_USBNET=y
+CONFIG_USB_NET_DM9601=y
+CONFIG_INPUT_POLLDEV=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_UINPUT=y
+CONFIG_DEVPTS_MULTIPLE_INSTANCES=y
+CONFIG_SPI=y
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_MEDIA_USB_SUPPORT=y
+CONFIG_USB_VIDEO_CLASS=y
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_BACKLIGHT_LCD_SUPPORT=y
+CONFIG_SOUND=y
+CONFIG_SND=y
+CONFIG_SND_SOC=y
+CONFIG_SND_AML_M8_SOC=y
+CONFIG_SND_AML_M8=y
+CONFIG_SND_USB=y
+CONFIG_SND_USB_AUDIO=y
+CONFIG_UHID=y
+CONFIG_USB=y
+CONFIG_USB_ACM=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_OPTION=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_DWC_OTG=y
+CONFIG_USB_G_ANDROID=y
+CONFIG_MMC_DEBUG=y
+CONFIG_UIO=y
+CONFIG_UIO_PDRV=y
+CONFIG_UIO_PDRV_GENIRQ=y
+CONFIG_STAGING=y
+CONFIG_ZSMALLOC=y
+CONFIG_ZRAM=y
+CONFIG_ZRAM_DEBUG=y
+CONFIG_ANDROID=y
+CONFIG_ANDROID_BINDER_IPC=y
+CONFIG_ASHMEM=y
+CONFIG_ANDROID_LOGGER=y
+CONFIG_ANDROID_LOW_MEMORY_KILLER=y
+CONFIG_ANDROID_INTF_ALARM_DEV=y
+CONFIG_SYNC=y
+CONFIG_EXT2_FS=y
+CONFIG_EXT3_FS=y
+CONFIG_EXT3_FS_POSIX_ACL=y
+CONFIG_EXT3_FS_SECURITY=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_EXT4_DEBUG=y
+CONFIG_QUOTA=y
+CONFIG_QFMT_V2=y
+CONFIG_FUSE_FS=y
+CONFIG_ISO9660_FS=y
+CONFIG_JOLIET=y
+CONFIG_ZISOFS=y
+CONFIG_UDF_FS=y
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_TMPFS=y
+CONFIG_CONFIGFS_FS=y
+CONFIG_CRAMFS=y
+CONFIG_CIFS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_UTF8=y
+CONFIG_PRINTK_TIME=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_READABLE_ASM=y
+CONFIG_DEBUG_FS=y
+CONFIG_DEBUG_SECTION_MISMATCH=y
+CONFIG_LOCKUP_DETECTOR=y
+CONFIG_BOOTPARAM_HARDLOCKUP_PANIC=y
+CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC=y
+CONFIG_BOOTPARAM_HUNG_TASK_PANIC=y
+CONFIG_SCHEDSTATS=y
+CONFIG_TIMER_STATS=y
+CONFIG_DEBUG_INFO=y
+CONFIG_SECURITY=y
+CONFIG_SECURITY_NETWORK=y
+CONFIG_SECURITY_SELINUX=y
+CONFIG_CRC_T10DIF=y
+CONFIG_CRC7=y
+CONFIG_AM_LCD_OUTPUT=y
+CONFIG_VIDEO_AMLOGIC_CAPTURE=y
+CONFIG_AMLOGIC_CAPTURE_FRAME_ROTATE=y
+CONFIG_AMLOGIC_VM_DISABLE_VIDEOLAYER=y
+CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0308=y
+CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0328=y
+CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0838=y
+CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2035=y
+CONFIG_VIDEO_AMLOGIC_CAPTURE_SP2518=y
+CONFIG_CMA=y
+CONFIG_CMA_SIZE_MBYTES=8
+CONFIG_MESON_CS_DCDC_REGULATOR=y
+CONFIG_AML_DVFS=y
+CONFIG_TVIN=y
+CONFIG_TVIN_VDIN=y
+CONFIG_VIUIN=y
+CONFIG_V4L_AMLOGIC_VIDEO2=y
+CONFIG_AM_ENCODER=y
+CONFIG_MD=y
+CONFIG_BLK_DEV_DM=y
+CONFIG_DM_DEBUG=y
+CONFIG_DM_CRYPT=y
+CONFIG_DM_UEVENT=y
+CONFIG_CRYPTO_AEAD=y
+CONFIG_CRYPTO_AUTHENC=y
+CONFIG_CRYPTO_CBC=y
+CONFIG_CRYPTO_PCBC=y
+CONFIG_CRYPTO_HMAC=y
+CONFIG_CRYPTO_MD5=y
+CONFIG_CRYPTO_DES=y
+CONFIG_CRYPTO_TWOFISH=y
+CONFIG_CRYPTO_TWOFISH_COMMON=y
+CONFIG_MESON_TRUSTZONE=y
+CONFIG_EMMC_SECURE_STORAGE=y
diff --git a/arch/arm/mach-meson8/cpu.c b/arch/arm/mach-meson8/cpu.c
index 14c9f2a5dbf1..eb5b374ff648 100755
--- a/arch/arm/mach-meson8/cpu.c
+++ b/arch/arm/mach-meson8/cpu.c
@@ -27,6 +27,10 @@
 #include <linux/printk.h>
 #include <linux/string.h>
 
+#ifdef CONFIG_MESON_TRUSTZONE
+#include <mach/meson-secure.h>
+#endif
+
 static int meson_cpu_version[MESON_CPU_VERSION_LVL_MAX+1];
 int __init meson_cpu_version_init(void)
 {
@@ -36,9 +40,13 @@ int __init meson_cpu_version_init(void)
 	meson_cpu_version[MESON_CPU_VERSION_LVL_MAJOR] = 
 		aml_read_reg32(P_ASSIST_HW_REV);
 
+#ifndef CONFIG_MESON_TRUSTZONE
 	version_map = (unsigned int *)IO_BOOTROM_BASE;
 	meson_cpu_version[MESON_CPU_VERSION_LVL_MISC] = version_map[1];
-	
+#else
+	meson_cpu_version[MESON_CPU_VERSION_LVL_MISC] = meson_read_socrev1();
+#endif
+
 	version = aml_read_reg32(P_METAL_REVISION);
 	switch (version) {		
 		case 0x11111112:
diff --git a/arch/arm/mach-meson8b/Kconfig b/arch/arm/mach-meson8b/Kconfig
index 305866ceee18..cb0ef5d1ca6b 100644
--- a/arch/arm/mach-meson8b/Kconfig
+++ b/arch/arm/mach-meson8b/Kconfig
@@ -18,6 +18,12 @@ config MESON_SUSPEND_FIRMWARE_BASE
         depends on MESON_SUSPEND
         help
           The base address of 1MB of memory reserved for suspend firmware.
+
+config MESON_TRUSTZONE
+	bool "Enable ARM Trustzone secure extension"
+	default n
+	help
+		Enable ARM Trustzone secure extension
 endif # ARCH_MESON8
 
 
diff --git a/arch/arm/mach-meson8b/cpu.c b/arch/arm/mach-meson8b/cpu.c
index 6f0cc61b8263..93b6ef3e1b72 100755
--- a/arch/arm/mach-meson8b/cpu.c
+++ b/arch/arm/mach-meson8b/cpu.c
@@ -27,6 +27,10 @@
 #include <linux/printk.h>
 #include <linux/string.h>
 
+#ifdef CONFIG_MESON_TRUSTZONE
+#include <mach/meson-secure.h>
+#endif
+
 static int meson_cpu_version[MESON_CPU_VERSION_LVL_MAX+1];
 int __init meson_cpu_version_init(void)
 {
@@ -36,8 +40,12 @@ int __init meson_cpu_version_init(void)
 	meson_cpu_version[MESON_CPU_VERSION_LVL_MAJOR] = 
 		aml_read_reg32(P_ASSIST_HW_REV);
 
+#ifndef CONFIG_MESON_TRUSTZONE
 	version_map = (unsigned int *)IO_BOOTROM_BASE;
 	meson_cpu_version[MESON_CPU_VERSION_LVL_MISC] = version_map[1];
+#else
+	meson_cpu_version[MESON_CPU_VERSION_LVL_MISC] = meson_read_socrev1();
+#endif
 
 	version = aml_read_reg32(P_METAL_REVISION);
 	switch (version) {		
@@ -65,4 +73,4 @@ int get_meson_cpu_version(int level)
 		return meson_cpu_version[level];
 	return 0;
 }
-EXPORT_SYMBOL(get_meson_cpu_version);
\ No newline at end of file
+EXPORT_SYMBOL(get_meson_cpu_version);
diff --git a/arch/arm/mach-meson8b/gpio.c b/arch/arm/mach-meson8b/gpio.c
index 46d8556410d0..dacebfc14bd1 100755
--- a/arch/arm/mach-meson8b/gpio.c
+++ b/arch/arm/mach-meson8b/gpio.c
@@ -34,6 +34,9 @@
 #include <linux/amlogic/aml_gpio_consumer.h>
 #include <linux/amlogic/gpio-amlogic.h>
 #define AO 10
+#ifdef CONFIG_MESON_TRUSTZONE
+#include <mach/meson-secure.h>
+#endif
 unsigned p_gpio_oen_addr[]={
 	P_PREG_PAD_GPIO0_EN_N,
 	P_PREG_PAD_GPIO1_EN_N,
@@ -465,7 +468,11 @@ int gpio_amlogic_direction_output(struct gpio_chip *chip,unsigned offset, int va
 	unsigned int reg,bit;
 	if(offset==GPIO_BSD_EN){
 		aml_clr_reg32_mask(P_PREG_PAD_GPIO0_O,1<<29);
+#ifndef CONFIG_MESON_TRUSTZONE
 		aml_set_reg32_mask(P_AO_SECURE_REG0,1<<0);
+#else
+		meson_secure_reg_write(P_AO_SECURE_REG0, meson_secure_reg_read(P_AO_SECURE_REG0) | (1<<0));
+#endif
 		if(value)
 			aml_set_reg32_mask(P_PREG_PAD_GPIO0_O,1<<31);//out put high
 		else
@@ -478,7 +485,11 @@ int gpio_amlogic_direction_output(struct gpio_chip *chip,unsigned offset, int va
 			aml_set_reg32_mask(P_AO_GPIO_O_EN_N,1<<31);//out put high
 		else
 			aml_clr_reg32_mask(P_AO_GPIO_O_EN_N,1<<31);//out put low
+#ifndef CONFIG_MESON_TRUSTZONE
 		aml_set_reg32_mask(P_AO_SECURE_REG0,1);// out put enable
+#else
+		meson_secure_reg_write(P_AO_SECURE_REG0, meson_secure_reg_read(P_AO_SECURE_REG0) | (1<<0));
+#endif
 		return 0;
 	}
 	if(value){
diff --git a/arch/arm/mach-meson8b/include/mach/meson-secure.h b/arch/arm/mach-meson8b/include/mach/meson-secure.h
index eace291edc14..a2a5dc0d57fb 100755
--- a/arch/arm/mach-meson8b/include/mach/meson-secure.h
+++ b/arch/arm/mach-meson8b/include/mach/meson-secure.h
@@ -58,17 +58,25 @@
 #define TRUSTZONE_MON_RTC_RD_REG_INDEX          0x501
 #define TRUSTZONE_MON_RTC_WR_REG_INDEX          0x502
 
+#define TRUSTZONE_MON_REG                       0x600
+#define TRUSTZONE_MON_REG_RD_INDEX              0x601
+#define TRUSTZONE_MON_REG_WR_INDEX              0x602
+
+#define TRUSTZONE_MON_MEM                       0x700
+#define TRUSTZONE_MON_MEM_BASE                  0x701
+#define TRUSTZONE_MON_MEM_TOTAL_SIZE            0x702
+#define TRUSTZONE_MON_MEM_FLASH                 0x703
+#define TRUSTZONE_MON_MEM_FLASH_SIZE            0x704
+#define TRUSTZONE_MON_MEM_GE2D                  0x705
+
 /* Secure HAL APIs*/
 #define TRUSTZONE_HAL_API_EFUSE                 0x100
 #define TRUSTZONE_HAL_API_STORAGE               0x200
 #define TRUSTZONE_HAL_API_MEMCONFIG             0x300
-
-#define MESON_TRUSTZONE_MEM_START               0x06100000
-#define MESON_TRUSTZONE_MEM_SIZE                0x04000000
-
+#define TRUSTZONE_HAL_API_MEMCONFIG_GE2D        0x301
 
 #ifndef __ASSEMBLER__
-extern void meson_smc1(u32 fn, u32 arg);
+extern int meson_smc1(u32 fn, u32 arg);
 extern int meson_smc_hal_api(u32 cmdidx, u32 arg);
 extern int meson_smc2(u32 arg);
 extern int meson_smc3(u32 arg1, u32 arg2);
@@ -82,8 +90,11 @@ extern uint32_t meson_secure_reg_read(uint32_t addr);
 extern uint32_t meson_secure_reg_write(uint32_t addr, uint32_t val);
 extern u32 meson_read_socrev1(void);
 extern u32 meson_read_socrev2(void);
-extern uint32_t meson_secure_mem_size(void);
-extern uint32_t meson_secure_mem_end(void);
+extern uint32_t meson_secure_mem_base_start(void);
+extern uint32_t meson_secure_mem_total_size(void);
+extern uint32_t meson_secure_mem_flash_start(void);
+extern uint32_t meson_secure_mem_flash_size(void);
+extern int32_t meson_secure_mem_ge2d_access(uint32_t msec);
 
 // efuse HAL_API arg
 struct efuse_hal_api_arg{
@@ -115,5 +126,4 @@ extern int meson_trustzone_getmemconfig(unsigned char* name, unsigned int* start
 
 #endif
 
-
 #endif
diff --git a/arch/arm/mach-meson8b/meson-secure.c b/arch/arm/mach-meson8b/meson-secure.c
index 23687aca94ca..f1ca9231a980 100755
--- a/arch/arm/mach-meson8b/meson-secure.c
+++ b/arch/arm/mach-meson8b/meson-secure.c
@@ -30,13 +30,11 @@
 #include <linux/dma-mapping.h>
 #include <mach/io.h>
 
-#ifdef CONFIG_MESON_TRUSTZONE
 #include <mach/meson-secure.h>
-#endif
 #include <linux/sched.h>
 
 #define MESON_SECURE_DEBUG 0
-#ifdef MESON_SECURE_DEBUG
+#if MESON_SECURE_DEBUG
 #define TZDBG(fmt, args...) printk("meson-secure: " fmt, ## args);
 #else
 #define TZDBG(fmt, args...)
@@ -66,7 +64,7 @@ int meson_secure_memblock(unsigned startaddr, unsigned endaddr, struct secure_me
 }
 */
 
-struct memconfig memsecure[MEMCONFIG_NUM] = {0};
+struct memconfig memsecure[MEMCONFIG_NUM];
 int meson_trustzone_memconfig(void)
 {
 	int ret;
@@ -75,17 +73,11 @@ int meson_trustzone_memconfig(void)
 	arg.memconfigbuf_phy_addr = __pa(memsecure);
 	arg.memconfigbuf_count = MEMCONFIG_NUM;
 
-	__cpuc_flush_dcache_area(memsecure, sizeof(memsecure));
-	outer_clean_range(__pa(memsecure), (__pa(memsecure + MEMCONFIG_NUM)));
-	__cpuc_flush_dcache_area(&arg, sizeof(arg));
-	outer_clean_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
+	set_cpus_allowed_ptr(current, cpumask_of(0));
 
 	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_MEMCONFIG, __pa(&arg));
 
-	outer_inv_range(__pa(&arg), __pa(((struct memconfig_hal_api_arg*)&arg)) + 1);
-	dmac_unmap_area(&arg, sizeof(arg), DMA_FROM_DEVICE);
-	outer_inv_range(__pa(memsecure), __pa(memsecure + MEMCONFIG_NUM));
-	dmac_unmap_area(memsecure, sizeof(memsecure), DMA_FROM_DEVICE);
+	set_cpus_allowed_ptr(current, cpu_all_mask);
 
 	return ret;
 }
@@ -129,27 +121,14 @@ int meson_trustzone_efuse(struct efuse_hal_api_arg* arg)
 		return -1;
 	}
 	set_cpus_allowed_ptr(current, cpumask_of(0));
-	__cpuc_flush_dcache_area(__va(arg->buffer_phy), arg->size);
-	outer_clean_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
-
-	__cpuc_flush_dcache_area(__va(arg->retcnt_phy), sizeof(unsigned int));
-	outer_clean_range(arg->retcnt_phy, (arg->retcnt_phy + sizeof(unsigned int)));
-
-	__cpuc_flush_dcache_area((void*)arg, sizeof(struct efuse_hal_api_arg));
-	outer_clean_range(__pa(arg), __pa(arg + 1));
 
 	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_EFUSE, __pa(arg));
 
-	if (arg->cmd == EFUSE_HAL_API_READ) {
-		outer_inv_range((arg->buffer_phy), (arg->buffer_phy + arg->size));
-		dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
-	}
-	outer_inv_range((arg->retcnt_phy), (arg->retcnt_phy + sizeof(unsigned int)));
-	dmac_unmap_area(__va(arg->buffer_phy), arg->size, DMA_FROM_DEVICE);
 	set_cpus_allowed_ptr(current, cpu_all_mask);
 
 	return ret;
 }
+EXPORT_SYMBOL(meson_trustzone_efuse);
 
 uint32_t meson_secure_reg_read(uint32_t addr)
 {
@@ -164,7 +143,6 @@ uint32_t meson_secure_reg_read(uint32_t addr)
 
 	return ret;
 }
-EXPORT_SYMBOL(meson_secure_reg_read);
 
 uint32_t meson_secure_reg_write(uint32_t addr, uint32_t val)
 {
@@ -179,14 +157,34 @@ uint32_t meson_secure_reg_write(uint32_t addr, uint32_t val)
 
 	return ret;
 }
-EXPORT_SYMBOL(meson_secure_reg_write);
 
-uint32_t meson_secure_mem_size(void)
+uint32_t meson_secure_mem_base_start(void)
+{
+	return meson_smc1(TRUSTZONE_MON_MEM_BASE, 0);
+}
+
+uint32_t meson_secure_mem_total_size(void)
+{
+	return meson_smc1(TRUSTZONE_MON_MEM_TOTAL_SIZE, 0);
+}
+
+uint32_t meson_secure_mem_flash_start(void)
+{
+	return meson_smc1(TRUSTZONE_MON_MEM_FLASH, 0);
+}
+
+uint32_t meson_secure_mem_flash_size(void)
 {
-	return MESON_TRUSTZONE_MEM_SIZE;
+	return meson_smc1(TRUSTZONE_MON_MEM_FLASH_SIZE, 0);
 }
 
-uint32_t meson_secure_mem_end(void)
+int32_t meson_secure_mem_ge2d_access(uint32_t msec)
 {
-	return (MESON_TRUSTZONE_MEM_START + MESON_TRUSTZONE_MEM_SIZE);
+	int ret = -1;
+
+	set_cpus_allowed_ptr(current, cpumask_of(0));
+	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_MEMCONFIG_GE2D, msec);
+	set_cpus_allowed_ptr(current, cpu_all_mask);
+
+	return ret;
 }
-- 
2.19.0

