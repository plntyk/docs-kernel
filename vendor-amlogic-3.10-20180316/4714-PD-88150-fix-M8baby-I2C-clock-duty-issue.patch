From 33adbf75a49b7a98ef370b5bffab2510cf0c2200 Mon Sep 17 00:00:00 2001
From: "sunny.luo" <sunny.luo@amlogic.com>
Date: Fri, 15 Aug 2014 18:54:16 +0800
Subject: [PATCH 4714/5965] PD#88150:fix M8baby I2C clock duty issue

---
 drivers/amlogic/i2c/aml_i2c.c | 24 +++++++++----
 drivers/amlogic/i2c/aml_i2c.h | 63 +++++++++++++++++++++++++++++++++++
 2 files changed, 80 insertions(+), 7 deletions(-)

diff --git a/drivers/amlogic/i2c/aml_i2c.c b/drivers/amlogic/i2c/aml_i2c.c
index 4ff62743a74b..82c83ce9d72e 100755
--- a/drivers/amlogic/i2c/aml_i2c.c
+++ b/drivers/amlogic/i2c/aml_i2c.c
@@ -54,14 +54,15 @@ static void aml_i2c_set_clk(struct aml_i2c *i2c, unsigned int speed)
 	unsigned int sys_clk_rate;
 	struct clk *sys_clk;
 	struct aml_i2c_reg_ctrl* ctrl;
-	
-	BUG_ON(!speed);
-	ctrl = (struct aml_i2c_reg_ctrl*)&(i2c->master_regs->i2c_ctrl);
+
 	sys_clk = clk_get_sys("clk81", NULL);
 	sys_clk_rate = clk_get_rate(sys_clk);
-	i2c_clock_set = sys_clk_rate / speed;	
+	//sys_clk_rate = get_mpeg_clk();
+
+	i2c_clock_set = sys_clk_rate / speed;
 #if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
 	i2c_clock_set >>= 1;
+	ctrl = (struct aml_i2c_reg_ctrl*)&(i2c->master_regs->i2c_ctrl);
 	if (i2c_clock_set > 0xfff) i2c_clock_set = 0xfff;
 	ctrl->clk_delay = i2c_clock_set & 0x3ff;
 	ctrl->clk_delay_ext = i2c_clock_set >> 10;
@@ -71,8 +72,9 @@ static void aml_i2c_set_clk(struct aml_i2c *i2c, unsigned int speed)
 	i2c->master_regs->i2c_slave_addr &= ~(0x3f<<8); //no filter on scl&sda
 #else
 	i2c_clock_set >>= 2;
-	if (i2c_clock_set > 0x3ff) i2c_clock_set = 0x3ff;
-	ctrl->clk_delay = i2c_clock_set;
+
+	ctrl = (struct aml_i2c_reg_ctrl*)&(i2c->master_regs->i2c_ctrl);
+	ctrl->clk_delay = i2c_clock_set & AML_I2C_CTRL_CLK_DELAY_MASK;
 #endif
 }
 
@@ -249,8 +251,12 @@ static void aml_i2c_start_token_xfer(struct aml_i2c *i2c)
 static int aml_i2c_do_address(struct aml_i2c *i2c, unsigned int addr)
 {
 	i2c->cur_slave_addr = addr&0x7f;
+#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
 	i2c->master_regs->i2c_slave_addr &= ~0xff;
 	i2c->master_regs->i2c_slave_addr |= i2c->cur_slave_addr<<1;
+#else
+	i2c->master_regs->i2c_slave_addr = i2c->cur_slave_addr<<1;
+#endif
 	return 0;
 }
 
@@ -267,7 +273,11 @@ static void aml_i2c_stop(struct aml_i2c *i2c)
 	i2c->token_tag[0]=TOKEN_STOP;
 	aml_i2c_set_token_list(i2c);
 	aml_i2c_start_token_xfer(i2c);
+#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
 	aml_i2c_wait_ack(i2c);
+#else
+  	udelay(i2c->wait_xfer_interval);
+#endif
   }
 	aml_i2c_clear_token_list(i2c);	
 }
@@ -1259,7 +1269,7 @@ static struct platform_driver aml_i2c_driver = {
 static int __init aml_i2c_init(void)
 {
     int ret;
-    //printk(KERN_INFO "%s : %s\n", __FILE__, __FUNCTION__);
+    printk(KERN_INFO "aml_i2c version: 20140813\n");
     ret = platform_driver_register(&aml_i2c_driver);
     return ret;
 }
diff --git a/drivers/amlogic/i2c/aml_i2c.h b/drivers/amlogic/i2c/aml_i2c.h
index ec1732d02496..9c709d8ae1fe 100755
--- a/drivers/amlogic/i2c/aml_i2c.h
+++ b/drivers/amlogic/i2c/aml_i2c.h
@@ -90,9 +90,13 @@ struct aml_i2c_reg_ctrl {
 		pulled low.  If this bit is '1' then the SDA line is tri-stated.*/
 	unsigned int rdscl:1; 		/*[25] Read back level of the SCL line*/
 	unsigned int rdsda:1; 		/*[26] Read back level of the SDA line*/
+#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
 	unsigned int unused:1; 	/*[27]*/
 	unsigned int clk_delay_ext:2; 	/*[29:28]*/
 	unsigned int unused2:2; 	/*[31:30]*/
+#else
+	unsigned int unused:5; 	/*[31:27]*/
+#endif
 };
 
 struct aml_i2c_reg_slave_addr {
@@ -113,10 +117,14 @@ struct aml_i2c_reg_slave_addr {
 	unsigned int scl_filter:3;	/*[13:11] SCL FILTER*/
 	/*A filter was added in the SCL input path to allow for filtering of slow 
 		rise times.  0 = no filtering, 7 = max filtering*/
+#if MESON_CPU_TYPE > MESON_CPU_TYPE_MESON8
 	unsigned int unused:2;	/*[15:14]*/
 	unsigned int clk_low_delay:12;	/*[27:16]*/
 	unsigned int clk_low_delay_en:1;	/*[28]*/
 	unsigned int unused2:3;	/*[31:29]*/
+#else
+	unsigned int unused:18;	/*[31:14]*/
+#endif
 };
 
 /*Write data associated with the DATA token should be placed into the 
@@ -145,6 +153,61 @@ struct aml_i2c_reg_master {
 	volatile unsigned int i2c_token_rdata_1;	
 };
 
+
+struct aml_i2c_reg_slave_ctrl {
+	unsigned int samp_rate:7;	/*[6:0] sampling rate*/
+	/*Defined as MPEG system clock / (value + 1).  The SDA and SCL inputs into 
+		the slave module are sampled as a way of filtering the inputs.   A 
+		rising or falling edge is determined by when 3 successive samples are 
+		either high or low respectively*/	
+	unsigned int enable:1;		/*[7] A '1' enables the I2C slave state machine*/
+	unsigned int hold_time:8;	/*[15:8]*/
+	/*Data hold time after the falling edge of SCL.  
+		Hold time = (MPEG system clock period) * (value + 1).
+	*/
+	unsigned int slave_addr:8;	/*[23-16]*/
+	/*Bits [7:1] are used to identify the device.  
+		Bit [0] is ignored since this corresponds to the R/W bit.*/
+	unsigned int ack_always:1;	/*[24]*/
+	/*Typically the ACK of a slave I2C device is dependent upon the 
+		availability of data (if reading) and room to store data (when we are 
+		being written).  Our I2C module has a status register that can be read
+		continuously.  This bit can be set if the I2C master wants to 
+		continually read the status register. */
+	unsigned int irq_en:1;		/*[25]*/
+	/*If this bit is set, then an interrupt will be sent to the ARC whenever 4 
+		bytes have been read or 4 bytes have been written to the I2C slave 
+		module.*/
+	unsigned int busy:1;		/*[26] */
+	/*Read only status bit.  '1' indicates that the I2C slave module is sending
+		or receiving data.*/
+	unsigned int rx_rdy:1;		/*[27] */
+	/*This bit is set to '1' by the ARC to indicate to the slave machine that 
+		the I2C slave module is ready to receive data.  This bit is cleared by 
+		the I2C module when it has received 4 bytes from the I2C master.  
+		This bit is also available in the status register that can be read by 
+		the I2C master.   The I2C master can read the status register to see 
+		when the I2C slave module is ready to receive data.*/
+	unsigned int tx_rdy:1;		/*[28] */
+	/*This bit is set to '1' by the ARC to indicate to the slave machine that 
+		the I2C slave module is ready to send data.  This bit is cleared by 
+		the I2C module when it has sent 4 bytes to the I2C master.  This bit
+		is also available in the status register that can be read by the I2C 
+		master.   The I2C master can read the status register to see when the
+		I2C slave module has data to send.*/
+	unsigned int reg_ptr:3;		/*[31:29] */
+	/*There are 5 internal registers inside the I2C slave module.  The I2C 
+		Master sets this value using the byte that follows the address byte 
+		in the I2C data stream.  Register 4 (numbered 0,1,бн4) is the 
+		status register.*/
+};
+
+struct aml_i2c_reg_slave{
+	unsigned int i2c_slave_ctrl;
+	unsigned int i2c_slave_tx_data;
+	unsigned int i2c_slave_rx_data;
+};
+
 struct aml_i2c {
 	unsigned int 		i2c_debug;
 	unsigned int		cur_slave_addr;
-- 
2.19.0

