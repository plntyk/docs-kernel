From 6f9ee5f2835f4a537eba4ebb4d1bb078d1539e13 Mon Sep 17 00:00:00 2001
From: "wengang.lei" <wengang.lei@amlogic.com>
Date: Fri, 15 Aug 2014 16:08:05 +0800
Subject: [PATCH 4716/5965] PD#96129:fix the bug of can't identify spi nor
 flash in m8b

Change-Id: Ie3413ab71aa92f185bfa2bb2dbba3ffbfbcc15f7
---
 arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd |  2 +-
 arch/arm/configs/meson8b_defconfig            |  1 +
 drivers/amlogic/spi_nor/apollo_spi_nor.c      | 15 ++++++++-------
 drivers/spi/spi.c                             |  8 ++++----
 4 files changed, 14 insertions(+), 12 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
index a334d1d9fa22..7b474693bef6 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m201_1G.dtd
@@ -1879,7 +1879,7 @@ sdhc_sd_clk_cmd_pins:sdhc_sd_clk_cmd_pins{
 //$$ L2 PROP_STR 4 = "amlogic,pins"
 		aml_spi_nor_pins: aml_spi_nor_pins{
 			amlogic,setmask=<5 0xf>;
-			amlogic,clrmask=<2 0x380000>;
+			amlogic,clrmask=<2 0x10380000>;
 			amlogic,pins = "BOOT_11","BOOT_12","BOOT_13","BOOT_18";
 		};
 //$$ MATCH "meson_vcck_dvfs_pin_0_match" = "&aml_pwm_pins"
diff --git a/arch/arm/configs/meson8b_defconfig b/arch/arm/configs/meson8b_defconfig
index 5461d7f0f912..a1f1c128ef55 100755
--- a/arch/arm/configs/meson8b_defconfig
+++ b/arch/arm/configs/meson8b_defconfig
@@ -204,6 +204,7 @@ CONFIG_SECURITYKEY=y
 CONFIG_EFUSE=y
 CONFIG_AMLOGIC_THERMAL=y
 CONFIG_AMLOGIC_USB=y
+CONFIG_AMLOGIC_SPI_NOR=y
 CONFIG_MMC_AML=y
 CONFIG_AML_NEXT_GEN_NAND=y
 CONFIG_AML_NAND_KEY=y
diff --git a/drivers/amlogic/spi_nor/apollo_spi_nor.c b/drivers/amlogic/spi_nor/apollo_spi_nor.c
index bea94450ff1e..b07c91187f2e 100755
--- a/drivers/amlogic/spi_nor/apollo_spi_nor.c
+++ b/drivers/amlogic/spi_nor/apollo_spi_nor.c
@@ -21,6 +21,7 @@
 #include <linux/pinctrl/consumer.h>
 #include <mach/pinmux_queue.h>
 #include <linux/list.h>
+#include <mach/mod_gate.h>
 
 struct amlogic_spi_user_crtl {
 	unsigned char	user_def_cmd;
@@ -56,7 +57,7 @@ struct amlogic_spi {
 static bool spi_chip_select(bool flag);
 //static DEFINE_SPINLOCK(pinmux_set_lock);
 
-#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8))
+#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8) || defined(CONFIG_ARCH_MESON8B))
 #if 0
 static pinmux_item_t spi_nor_set_pins[] ={
 	{
@@ -148,7 +149,7 @@ static void spi_hw_enable(struct amlogic_spi	*amlogic_spi)
 {
 int retry = 0,ret;
 	//DECLARE_WAITQUEUE(spi_wait, current);
-#if (defined(CONFIG_ARCH_MESON3) || defined(CONFIG_ARCH_MESON6) ||defined(CONFIG_ARCH_MESON8))
+#if (defined(CONFIG_ARCH_MESON3) || defined(CONFIG_ARCH_MESON6) ||defined(CONFIG_ARCH_MESON8) || defined(CONFIG_ARCH_MESON8B))
   /*clear_mio_mux(2,7<<19);
   clear_mio_mux(5,(0xf<<6));
 	set_mio_mux(5, 0xf);*/
@@ -189,7 +190,7 @@ int retry = 0,ret;
 
 static void spi_hw_disable(struct amlogic_spi	*amlogic_spi)
 {
-#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8))
+#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8) || defined(CONFIG_ARCH_MESON8B))
 #ifdef CONFIG_OF
 	int ret=0;
 	if(amlogic_spi->p)
@@ -576,12 +577,12 @@ static int amlogic_spi_transfer(struct spi_device *spi, struct spi_message *m)
 		return -1;
 	}
 
-#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8))
+#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8) || defined(CONFIG_ARCH_MESON8B))
 	spin_unlock(&amlogic_spi->lock);
 #endif
 	//spin_lock_irqsave(&amlogic_spi->lock, flags);
 	spi_hw_enable(amlogic_spi);
-#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8))
+#if (defined(CONFIG_ARCH_MESON6) || defined(CONFIG_ARCH_MESON8) || defined(CONFIG_ARCH_MESON8B))
 	spin_lock(&amlogic_spi->lock);
 #endif
 	if (amlogic_hw_ctl.cmd_have_data_in)
@@ -657,7 +658,7 @@ static int amlogic_spi_nor_probe(struct platform_device *pdev)
 	status = spi_register_master(master);
 	if (status < 0)
 		goto err1;
-
+	switch_mod_gate_by_name("spi", 1);
 	spi_hw_init(amlogic_spi);
 
 	status = spi_add_dev(amlogic_spi, master);
@@ -673,7 +674,7 @@ static int amlogic_spi_nor_remove(struct platform_device *pdev)
 {
 	struct spi_master	*master;
 	struct amlogic_spi	*amlogic_spi;
-
+	switch_mod_gate_by_name("spi", 0);
 	master = dev_get_drvdata(&pdev->dev);
 	amlogic_spi = spi_master_get_devdata(master);
 
diff --git a/drivers/spi/spi.c b/drivers/spi/spi.c
index 8f76352972dc..c65cf31e48bb 100755
--- a/drivers/spi/spi.c
+++ b/drivers/spi/spi.c
@@ -1351,7 +1351,7 @@ static int __spi_async(struct spi_device *spi, struct spi_message *message)
 	struct spi_master *master = spi->master;
 	struct spi_transfer *xfer;
 
-#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8)
+#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8) && !defined(CONFIG_ARCH_MESON8B)
 	unsigned long flags;
 	spin_lock_irqsave(&master->bus_lock_spinlock, flags);
 #endif
@@ -1396,7 +1396,7 @@ static int __spi_async(struct spi_device *spi, struct spi_message *message)
 	message->spi = spi;
 	message->status = -EINPROGRESS;
 	
-#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8)
+#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8) && !defined(CONFIG_ARCH_MESON8B)
 	spin_unlock_irqrestore(&master->bus_lock_spinlock, flags);
 #endif
 	return master->transfer(spi, message);
@@ -1482,7 +1482,7 @@ EXPORT_SYMBOL_GPL(spi_async);
 int spi_async_locked(struct spi_device *spi, struct spi_message *message)
 {
 	int ret;
-#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8)
+#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8) && !defined(CONFIG_ARCH_MESON8B)
 	unsigned long flags;
 	struct spi_master *master = spi->master;
 
@@ -1490,7 +1490,7 @@ int spi_async_locked(struct spi_device *spi, struct spi_message *message)
 #endif
 	ret = __spi_async(spi, message);
 
-#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8)
+#if !defined(CONFIG_ARCH_MESON6) && !defined(CONFIG_ARCH_MESON8) && !defined(CONFIG_ARCH_MESON8B)
 	spin_unlock_irqrestore(&master->bus_lock_spinlock, flags);
 #endif
 	return ret;
-- 
2.19.0

