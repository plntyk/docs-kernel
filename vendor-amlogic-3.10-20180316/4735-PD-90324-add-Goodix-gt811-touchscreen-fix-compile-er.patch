From 1f37056cfe50eb2404f585ad945addc66448f2b5 Mon Sep 17 00:00:00 2001
From: "sunny.luo" <sunny.luo@amlogic.com>
Date: Tue, 22 Apr 2014 13:53:07 +0800
Subject: [PATCH 4735/5965] PD #90324: add Goodix gt811 touchscreen----fix
 compile error with gt9xx

Conflicts:

	drivers/amlogic/input/touchscreen/Makefile

Change-Id: I9d5863f8980da32af675739315c722fd6adbd47e
---
 drivers/amlogic/input/touchscreen/Makefile    |  2 +-
 .../input/touchscreen/gt811/goodix_tool.c     |  4 +-
 .../amlogic/input/touchscreen/gt811/gt811.c   | 62 +++++++++----------
 .../amlogic/input/touchscreen/gt811/gt811.h   | 12 ++--
 .../input/touchscreen/gt811/gt811_update.c    | 58 ++++++++---------
 5 files changed, 69 insertions(+), 69 deletions(-)

diff --git a/drivers/amlogic/input/touchscreen/Makefile b/drivers/amlogic/input/touchscreen/Makefile
index b62d07978ff1..c4ef4e4de7f4 100755
--- a/drivers/amlogic/input/touchscreen/Makefile
+++ b/drivers/amlogic/input/touchscreen/Makefile
@@ -16,7 +16,7 @@ obj-$(CONFIG_MESON_INPUT_TOUCHSCREEN) += gt9xx/
 obj-$(CONFIG_MESON_INPUT_TOUCHSCREEN) += ct36x_ts/
 obj-$(CONFIG_MESON_INPUT_TOUCHSCREEN) += ft5x02/
 obj-$(CONFIG_MESON_INPUT_TOUCHSCREEN) += gslx680/
-#obj-y += gt9xx/
+obj-y += gt9xx/
 obj-y += gt811/
 obj-y += ct36x_ts/
 obj-y += ft5x02/
diff --git a/drivers/amlogic/input/touchscreen/gt811/goodix_tool.c b/drivers/amlogic/input/touchscreen/gt811/goodix_tool.c
index e977bd93d454..132785ada488 100755
--- a/drivers/amlogic/input/touchscreen/gt811/goodix_tool.c
+++ b/drivers/amlogic/input/touchscreen/gt811/goodix_tool.c
@@ -405,13 +405,13 @@ static s32 goodix_tool_write(struct file *filp, const char __user *buff, unsigne
     }
     else if (7 == cmd_head.wr)//disable irq!
     {
-        gtp_irq_disable(i2c_get_clientdata(gt_client));
+        gt811_irq_disable(i2c_get_clientdata(gt_client));
 
         return CMD_HEAD_LENGTH;
     }
     else if (9 == cmd_head.wr) //enable irq!
     {
-        gtp_irq_enable(i2c_get_clientdata(gt_client));
+        gt811_irq_enable(i2c_get_clientdata(gt_client));
 
         return CMD_HEAD_LENGTH;
     }
diff --git a/drivers/amlogic/input/touchscreen/gt811/gt811.c b/drivers/amlogic/input/touchscreen/gt811/gt811.c
index 85050d9b67ae..bc67e494ec14 100755
--- a/drivers/amlogic/input/touchscreen/gt811/gt811.c
+++ b/drivers/amlogic/input/touchscreen/gt811/gt811.c
@@ -36,7 +36,7 @@
 
 static const char *goodix_ts_name = "Goodix Capacitive TouchScreen";
 static struct workqueue_struct *goodix_wq;
-struct i2c_client * i2c_connect_client = NULL;
+static struct i2c_client * i2c_connect_client = NULL;
 static u8 config[GTP_CONFIG_LENGTH + GTP_ADDR_LENGTH]
                 = {GTP_REG_CONFIG_DATA >> 8, GTP_REG_CONFIG_DATA & 0xff};
 
@@ -82,7 +82,7 @@ Input:
 Output:
 	numbers of i2c_msgs to transfer
 *********************************************************/
-s32 gtp_i2c_read(struct i2c_client *client, u8 *buf, s32 len)
+s32 gt811_i2c_read(struct i2c_client *client, u8 *buf, s32 len)
 {
     struct i2c_msg msgs[2];
     s32 ret=-1;
@@ -122,7 +122,7 @@ Input:
 Output:
 	numbers of i2c_msgs to transfer.
 *********************************************************/
-s32 gtp_i2c_write(struct i2c_client *client,u8 *buf,s32 len)
+s32 gt811_i2c_write(struct i2c_client *client,u8 *buf,s32 len)
 {
     struct i2c_msg msg;
     s32 ret=-1;
@@ -161,7 +161,7 @@ s32 gtp_i2c_end_cmd(struct i2c_client *client)
 
     GTP_DEBUG_FUNC();
 
-    ret = gtp_i2c_write(client, end_cmd_data, 2);
+    ret = gt811_i2c_write(client, end_cmd_data, 2);
 
     return ret;
 }
@@ -176,7 +176,7 @@ Input:
 Output:
 	Executive outcomes.0--success,non-0--fail.
 *******************************************************/
-s32 gtp_send_cfg(struct i2c_client *client)
+s32 gt811_send_cfg(struct i2c_client *client)
 {
     s32 ret = -1;
 #if GTP_DRIVER_SEND_CFG
@@ -184,7 +184,7 @@ s32 gtp_send_cfg(struct i2c_client *client)
 
     for (retry = 0; retry < 5; retry++)
     {
-        ret = gtp_i2c_write(client, config , GTP_CONFIG_LENGTH + GTP_ADDR_LENGTH);
+        ret = gt811_i2c_write(client, config , GTP_CONFIG_LENGTH + GTP_ADDR_LENGTH);
         gtp_i2c_end_cmd(client);
 
         if (ret > 0)
@@ -207,7 +207,7 @@ Input:
 Output:
 	None.
 *******************************************************/
-void gtp_irq_disable(struct goodix_ts_data *ts)
+void gt811_irq_disable(struct goodix_ts_data *ts)
 {
     unsigned long irqflags;
 
@@ -232,7 +232,7 @@ Input:
 Output:
 	None.
 *******************************************************/
-void gtp_irq_enable(struct goodix_ts_data *ts)
+void gt811_irq_enable(struct goodix_ts_data *ts)
 {
     unsigned long irqflags;
 
@@ -412,7 +412,7 @@ static void goodix_ts_work_func(struct work_struct *work)
     {
         goto exit_work_func;
     }
-    ret = gtp_i2c_read(ts->client, point_data, sizeof(point_data)/sizeof(point_data[0]));
+    ret = gt811_i2c_read(ts->client, point_data, sizeof(point_data)/sizeof(point_data[0]));
     if (ret < 0)
     {
         goto exit_work_func;
@@ -423,7 +423,7 @@ static void goodix_ts_work_func(struct work_struct *work)
         if(point_data[3]==0xF0)
         {
             GTP_DEBUG("Reload config!");
-            ret = gtp_send_cfg(ts->client);
+            ret = gt811_send_cfg(ts->client);
             if (ret < 0)
             {
                 GTP_ERROR("Send config error.");
@@ -576,7 +576,7 @@ static void goodix_ts_work_func(struct work_struct *work)
 exit_work_func:
     if (ts->use_irq)
     {
-        gtp_irq_enable(ts);
+        gt811_irq_enable(ts);
     }
 }
 
@@ -618,7 +618,7 @@ static irqreturn_t goodix_ts_irq_handler(int irq, void *dev_id)
 
     GTP_DEBUG_FUNC();
 
-    gtp_irq_disable(ts);
+    gt811_irq_disable(ts);
     queue_work(goodix_wq, &ts->work);
 
     return IRQ_HANDLED;
@@ -634,7 +634,7 @@ Input:
 Output:
 	None.
 *******************************************************/
-void gtp_reset_guitar(s32 ms)
+void gt811_reset_guitar(s32 ms)
 {
     GTP_DEBUG_FUNC();
     GTP_GPIO_OUTPUT(gtp_gpio_rst, 0);
@@ -667,7 +667,7 @@ static s8 gtp_enter_sleep(struct goodix_ts_data * ts)
 
     while(retry++ < 5)
     {
-        ret = gtp_i2c_write(ts->client, i2c_control_buf, 3);
+        ret = gt811_i2c_write(ts->client, i2c_control_buf, 3);
         gtp_i2c_end_cmd(ts->client);
         if (ret > 0)
         {
@@ -700,8 +700,8 @@ static s8 gtp_wakeup_sleep(struct goodix_ts_data * ts)
 #if GTP_POWER_CTRL_SLEEP
     while(retry++ < 5)
     {
-        gtp_reset_guitar(20);
-        ret = gtp_send_cfg(ts->client);
+        gt811_reset_guitar(20);
+        ret = gt811_send_cfg(ts->client);
         if (ret > 0)
         {
             GTP_DEBUG("Wakeup sleep send config success.");
@@ -723,7 +723,7 @@ static s8 gtp_wakeup_sleep(struct goodix_ts_data * ts)
         if (ret > 0)
         {
             GTP_DEBUG("GTP wakeup sleep.");
-            ret = gtp_send_cfg(ts->client);
+            ret = gt811_send_cfg(ts->client);
             if (ret > 0)
             {
                 GTP_DEBUG("Wakeup sleep send config success.");
@@ -731,7 +731,7 @@ static s8 gtp_wakeup_sleep(struct goodix_ts_data * ts)
             }
             return ret;
         }
-        gtp_reset_guitar(20);
+        gt811_reset_guitar(20);
     }
 #endif
 
@@ -772,7 +772,7 @@ s32 gtp_init_panel(struct goodix_ts_data *ts)
     {
         rd_cfg_buf[0] = GTP_REG_SENSOR_ID >> 8;
         rd_cfg_buf[1] = GTP_REG_SENSOR_ID & 0xff;
-        ret = gtp_i2c_read(ts->client, rd_cfg_buf, 3);
+        ret = gt811_i2c_read(ts->client, rd_cfg_buf, 3);
         gtp_i2c_end_cmd(ts->client);
         if (ret < 0)
         {
@@ -803,7 +803,7 @@ s32 gtp_init_panel(struct goodix_ts_data *ts)
 
 #else //else DRIVER NEED NOT SEND CONFIG
 
-    ret = gtp_i2c_read(ts->client, config, GTP_CONFIG_LENGTH + GTP_ADDR_LENGTH);
+    ret = gt811_i2c_read(ts->client, config, GTP_CONFIG_LENGTH + GTP_ADDR_LENGTH);
     gtp_i2c_end_cmd(ts->client);
     if (ret < 0)
     {
@@ -826,7 +826,7 @@ s32 gtp_init_panel(struct goodix_ts_data *ts)
         ts->abs_y_max = GTP_MAX_HEIGHT;
     }
 
-    ret = gtp_send_cfg(ts->client);
+    ret = gt811_send_cfg(ts->client);
     if (ret < 0)
     {
         GTP_ERROR("Send config error. ret = %d", ret);
@@ -851,7 +851,7 @@ Input:
 Output:
 	Executive outcomes.0---succeed.
 *******************************************************/
-s32 gtp_read_version(struct goodix_ts_data *ts)
+s32 gt811_read_version(struct goodix_ts_data *ts)
 {
     s32 ret = -1;
     s32 count = 0;
@@ -860,7 +860,7 @@ s32 gtp_read_version(struct goodix_ts_data *ts)
 
     GTP_DEBUG_FUNC();
 
-    ret = gtp_i2c_read(ts->client,version_data, 6);
+    ret = gt811_i2c_read(ts->client,version_data, 6);
     if (ret < 0)
     {
         GTP_ERROR("GTP read version failed");
@@ -870,7 +870,7 @@ s32 gtp_read_version(struct goodix_ts_data *ts)
 
     while(count++ < 10)
     {
-        gtp_i2c_read(ts->client, version_comfirm, 6);
+        gt811_i2c_read(ts->client, version_comfirm, 6);
         if((version_data[4] !=version_comfirm[4])||(version_data[5] != version_comfirm[5]))
         {
             GTP_DEBUG("Comfirm version:%02x%02x", version_comfirm[4], version_comfirm[5]);
@@ -954,7 +954,7 @@ static s8 gtp_request_io_port(struct goodix_ts_data *ts)
     }
 
     GTP_GPIO_AS_INPUT(gtp_gpio_rst);
-    gtp_reset_guitar(20);
+    gt811_reset_guitar(20);
 
     if(ret < 0)
     {
@@ -1000,7 +1000,7 @@ static s8 gtp_request_irq(struct goodix_ts_data *ts)
     }
     else
     {
-        gtp_irq_disable(ts);
+        gt811_irq_disable(ts);
         ts->use_irq = 1;
         return 0;
     }
@@ -1199,13 +1199,13 @@ static int goodix_ts_probe(struct i2c_client *client, const struct i2c_device_id
         GTP_INFO("GTP works in interrupt mode.");
     }
 
-    ret = gtp_read_version(ts);
+    ret = gt811_read_version(ts);
     if (ret < 0)
     {
         GTP_ERROR("Read version failed.");
     }
 
-    gtp_irq_enable(ts);
+    gt811_irq_enable(ts);
 
 #if GTP_CREATE_WR_NODE
     init_wr_node(client);
@@ -1306,7 +1306,7 @@ static void goodix_ts_early_suspend(struct early_suspend *h)
 
     if (ts->use_irq)
     {
-        gtp_irq_disable(ts);
+        gt811_irq_disable(ts);
     }
     else
     {
@@ -1345,7 +1345,7 @@ static void goodix_ts_late_resume(struct early_suspend *h)
 
     if (ts->use_irq)
     {
-        gtp_irq_enable(ts);
+        gt811_irq_enable(ts);
     }
     else
     {
@@ -1386,7 +1386,7 @@ static void gtp_esd_check_func(struct work_struct *work)
 
     if (i >= 3)
     {
-        gtp_reset_guitar(50);
+        gt811_reset_guitar(50);
     }
 
     if(!ts->gtp_is_suspend)
diff --git a/drivers/amlogic/input/touchscreen/gt811/gt811.h b/drivers/amlogic/input/touchscreen/gt811/gt811.h
index 36b8d778dd01..2e9cbde8ef4c 100755
--- a/drivers/amlogic/input/touchscreen/gt811/gt811.h
+++ b/drivers/amlogic/input/touchscreen/gt811/gt811.h
@@ -25,9 +25,9 @@
 extern struct touch_pdata *ts_com;
 
 extern s32 gup_update_proc(void*);
-extern struct i2c_client * i2c_connect_client;
-extern s32 gtp_i2c_read(struct i2c_client *client, u8 *buf, s32 len);
-extern s32 gtp_i2c_write(struct i2c_client *client,u8 *data,s32 len);
+//extern struct i2c_client * i2c_connect_client;
+extern s32 gt811_i2c_read(struct i2c_client *client, u8 *buf, s32 len);
+extern s32 gt811_i2c_write(struct i2c_client *client,u8 *data,s32 len);
 extern u16 show_len;
 extern u16 total_len;
 
@@ -51,11 +51,11 @@ struct goodix_ts_data {
     u8  gtp_is_suspend;
 };
 
-extern s32 gtp_read_version(struct goodix_ts_data *ts);
+extern s32 gt811_read_version(struct goodix_ts_data *ts);
 extern s32 gup_downloader( struct goodix_ts_data *ts, u8 *data);
 extern s32 gtp_init_panel(struct goodix_ts_data *ts);
-extern void gtp_irq_disable(struct goodix_ts_data *ts);
-extern void gtp_irq_enable(struct goodix_ts_data *ts);
+extern void gt811_irq_disable(struct goodix_ts_data *ts);
+extern void gt811_irq_enable(struct goodix_ts_data *ts);
 
 //***************************PART1:ON/OFF define*******************************
 #define GTP_DEBUG_ON          0
diff --git a/drivers/amlogic/input/touchscreen/gt811/gt811_update.c b/drivers/amlogic/input/touchscreen/gt811/gt811_update.c
index 7cef32b1c4bd..ce510cf13eb4 100755
--- a/drivers/amlogic/input/touchscreen/gt811/gt811_update.c
+++ b/drivers/amlogic/input/touchscreen/gt811/gt811_update.c
@@ -57,11 +57,11 @@ u16 total_len;
 
 struct i2c_client *guitar_client = NULL;
 
-extern s32  gtp_i2c_read(struct i2c_client *client, uint8_t *buf, s32 len);
-extern s32  gtp_i2c_write(struct i2c_client *client,uint8_t *data,s32 len);
+extern s32  gt811_i2c_read(struct i2c_client *client, uint8_t *buf, s32 len);
+extern s32  gt811_i2c_write(struct i2c_client *client,uint8_t *data,s32 len);
 extern s32  gtp_i2c_end_cmd(struct i2c_client *client);
-extern void gtp_reset_guitar(s32 ms);
-extern s32  gtp_send_cfg(struct i2c_client *client);
+extern void gt811_reset_guitar(s32 ms);
+extern s32  gt811_send_cfg(struct i2c_client *client);
 
 #pragma pack(1)
 typedef struct
@@ -100,7 +100,7 @@ static u8 gup_get_ic_msg(struct i2c_client *client, u16 addr, u8* msg, s32 len)
 
     for (i = 0; i < 5; i++)
     {
-        if (gtp_i2c_read(client, msg, GTP_ADDR_LENGTH + len) > 0)
+        if (gt811_i2c_read(client, msg, GTP_ADDR_LENGTH + len) > 0)
         {
             break;
         }
@@ -127,7 +127,7 @@ static u8 gup_clear_mix_flag(struct i2c_client *client)
 
     for (i = 0; i < 5; i++)
     {
-        if (gtp_i2c_write(client, buf, 3) > 0)
+        if (gt811_i2c_write(client, buf, 3) > 0)
         {
             break;
         }
@@ -180,7 +180,7 @@ static u8 gup_get_ic_fw_msg(struct i2c_client *client)
     buf[0] = 0x15;
     buf[1] = 0x22;
     buf[2] = 0x18;
-    ret =  gtp_i2c_write(client, buf, 3);
+    ret =  gt811_i2c_write(client, buf, 3);
     if (ret <= 0)
     {
         return fail;
@@ -222,7 +222,7 @@ static u8 gup_get_ic_fw_msg(struct i2c_client *client)
             GTP_INFO("If the check sum is still error, ");
             GTP_INFO("The IC will be updated by force.");
 
-            gtp_reset_guitar(10);
+            gt811_reset_guitar(10);
             continue;
             //msleep(100);
         }
@@ -252,18 +252,18 @@ s32 gup_enter_update_mode(struct i2c_client *client)
     msleep(5);
 
     //step 2
-    gtp_reset_guitar(100);
+    gt811_reset_guitar(100);
 
     for(retry=0;retry < 20; retry++)
     {
         //step 3
-        ret = gtp_i2c_write(client, inbuf, 2);   //Test I2C connection.
+        ret = gt811_i2c_write(client, inbuf, 2);   //Test I2C connection.
         if (ret > 0)
         {
             GTP_DEBUG("<Set update mode>I2C is OK!");
             //step 4
             msleep(100);
-            ret = gtp_i2c_read(client, inbuf, 3);
+            ret = gt811_i2c_read(client, inbuf, 3);
             if (ret > 0)
             {
                 GTP_DEBUG("The value of 0x00ff is 0x%02x", inbuf[2]);
@@ -556,7 +556,7 @@ static u8 gup_nvram_store(struct i2c_client *client)
     int i;
     u8 inbuf[3] = {REG_NVRCS >> 8, REG_NVRCS & 0xff, 0x18};
 
-    ret = gtp_i2c_read(client, inbuf, 3);
+    ret = gt811_i2c_read(client, inbuf, 3);
     if ( ret < 0 )
     {
         return fail;
@@ -572,7 +572,7 @@ static u8 gup_nvram_store(struct i2c_client *client)
 
     for ( i = 0 ; i < 300 ; i++ )
     {
-        ret = gtp_i2c_write(client, inbuf, 3);
+        ret = gt811_i2c_write(client, inbuf, 3);
         if ( ret > 0 )
             return success;
     }
@@ -585,7 +585,7 @@ static u8 gup_nvram_recall(struct i2c_client *client)
     int ret;
     u8 inbuf[3] = {REG_NVRCS >> 8, REG_NVRCS & 0xff, 0};
 
-    ret = gtp_i2c_read(client, inbuf, 3);
+    ret = gt811_i2c_read(client, inbuf, 3);
     if ( ret < 0 )
     {
         return fail;
@@ -597,7 +597,7 @@ static u8 gup_nvram_recall(struct i2c_client *client)
     }
 
     inbuf[2] = ( 1 << BIT_NVRAM_RECALL );        //recall command
-    ret = gtp_i2c_write(client , inbuf, 3);
+    ret = gt811_i2c_write(client , inbuf, 3);
 
     if (ret <= 0)
     {
@@ -637,7 +637,7 @@ static u8 gup_update_nvram(struct i2c_client *client, st_fw_head* fw_head, u8 *n
         w_buf[0] = st_addr >> 8;
         w_buf[1] = st_addr & 0xff;
         GTP_DEBUG("Write address:0x%02x%02x\tlength:%d", w_buf[0], w_buf[1], write_bytes);
-        ret =  gtp_i2c_write(client, w_buf, GTP_ADDR_LENGTH + write_bytes);
+        ret =  gt811_i2c_write(client, w_buf, GTP_ADDR_LENGTH + write_bytes);
         if (ret <= 0)
         {
             if (retry++ > 10)
@@ -655,10 +655,10 @@ static u8 gup_update_nvram(struct i2c_client *client, st_fw_head* fw_head, u8 *n
 /*            r_buf[0] = 0x14;
             r_buf[1] = 0x00;
             r_buf[2] = 0x80;
-            gtp_i2c_write(ts->client, r_buf, 3);
+            gt811_i2c_write(ts->client, r_buf, 3);
             r_buf[0] = 0x14;
             r_buf[1] = 0x00;
-            gtp_i2c_read(ts->client, r_buf, 3);
+            gt811_i2c_read(ts->client, r_buf, 3);
             GTP_DEBUG("I2CCS:0x%x", r_buf[2]);//*/
 
             r_buf[0] = w_buf[0];
@@ -666,7 +666,7 @@ static u8 gup_update_nvram(struct i2c_client *client, st_fw_head* fw_head, u8 *n
 
             for (i = 0; i < 10; i++)
             {
-                ret = gtp_i2c_read(client, r_buf, GTP_ADDR_LENGTH + write_bytes);
+                ret = gt811_i2c_read(client, r_buf, GTP_ADDR_LENGTH + write_bytes);
                 if (ret <= 0)
                 {
                     continue;
@@ -736,7 +736,7 @@ static u8 gup_update_firmware(struct i2c_client *client, st_fw_head* fw_head, u8
     buf[0] = 0x15;
     buf[1] = 0x22;
     buf[2] = 0x18;
-    ret =  gtp_i2c_write(client, buf, 3);
+    ret =  gt811_i2c_write(client, buf, 3);
     if (ret <= 0)
     {
         return fail;
@@ -753,13 +753,13 @@ static u8 gup_update_firmware(struct i2c_client *client, st_fw_head* fw_head, u8
         {
             tmp[0] = 0x4f;
             tmp[1] = 0x70;
-            gtp_i2c_read(client, tmp, 130);
+            gt811_i2c_read(client, tmp, 130);
 
             for (i = 0; i < 50; i++)
             {
                 buf[0] = 0x4f;
                 buf[1] = 0x70;
-                ret = gtp_i2c_read(client, buf, 130);
+                ret = gt811_i2c_read(client, buf, 130);
                 if (ret <= 0)
                 {
                     continue;
@@ -830,7 +830,7 @@ static u8 gup_update_firmware(struct i2c_client *client, st_fw_head* fw_head, u8
             buf[0] = 0x4f;
             buf[1] = 0xf3;
             memcpy(&buf[2], fw_head->chk_sum, sizeof(fw_head->chk_sum));
-            ret = gtp_i2c_write(client, buf, 5);
+            ret = gt811_i2c_write(client, buf, 5);
             if (ret <= 0)
             {
                 continue;
@@ -859,7 +859,7 @@ static u8 gup_update_firmware(struct i2c_client *client, st_fw_head* fw_head, u8
             buf[0] = 0x00;
             buf[1] = 0xff;
             buf[2] = 0x44;
-            ret = gtp_i2c_write(client, buf, 3);
+            ret = gt811_i2c_write(client, buf, 3);
             if (ret > 0)
             {
                 break;
@@ -936,7 +936,7 @@ s32 gup_update_proc(void *dir)
     if (dir != NULL)
     {
         gup_get_ic_fw_msg(guitar_client);
-        gtp_reset_guitar(10);
+        gt811_reset_guitar(10);
     }
     else
     {
@@ -1042,7 +1042,7 @@ s32 gup_update_proc(void *dir)
 
         for ( i = 0; i < 10; i++)
         {
-            ret = gtp_i2c_read(guitar_client, ic_nvram, GTP_ADDR_LENGTH + fw_head.lenth);
+            ret = gt811_i2c_read(guitar_client, ic_nvram, GTP_ADDR_LENGTH + fw_head.lenth);
             if (ret <= 0)
             {
                 continue;
@@ -1096,9 +1096,9 @@ s32 gup_update_proc(void *dir)
 
     //Reset guitar
     GTP_DEBUG("Reset IC and send config!");
-    gtp_reset_guitar(10);
+    gt811_reset_guitar(10);
 
-    ret = gtp_send_cfg(guitar_client);
+    ret = gt811_send_cfg(guitar_client);
     if (ret < 0)
     {
         GTP_ERROR("Send config data failed.");
@@ -1164,7 +1164,7 @@ u8 gup_init_update_proc(struct goodix_ts_data *ts)
         gup_leave_update_mode();
     }
 
-    gtp_reset_guitar(10);
+    gt811_reset_guitar(10);
 
     if (success == update_msg.fw_flag)
     {
-- 
2.19.0

