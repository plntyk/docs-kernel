From 709f497a75091a9607e014de3f4d63b47a2693df Mon Sep 17 00:00:00 2001
From: "bo.yang" <bo.yang@amlogic.com>
Date: Mon, 11 Aug 2014 17:00:04 +0800
Subject: [PATCH 4755/5965] PD #93541: fix compiling warning

---
 drivers/amlogic/ion_dev/dev_ion.c     | 12 ++++++------
 drivers/amlogic/regd/regd.c           | 17 +++++++----------
 drivers/amlogic/vfm/vframe_receiver.c |  6 +++---
 3 files changed, 16 insertions(+), 19 deletions(-)

diff --git a/drivers/amlogic/ion_dev/dev_ion.c b/drivers/amlogic/ion_dev/dev_ion.c
index 7b345d276de9..a1a578ade4b7 100755
--- a/drivers/amlogic/ion_dev/dev_ion.c
+++ b/drivers/amlogic/ion_dev/dev_ion.c
@@ -46,7 +46,7 @@ static struct resource memobj;
 int dev_ion_probe(struct platform_device *pdev) {
     int err;
     int i;
-    
+
     struct resource *res;
     struct device_node	*of_node = pdev->dev.of_node;
     const void *name;
@@ -92,11 +92,11 @@ int dev_ion_probe(struct platform_device *pdev) {
 			printk("\ndev_ion memory resource undefined4.\n");
         		return -EFAULT;
 		}
-		
-		
+
+
 		res->start = (phys_addr_t)get_reserve_block_addr(i)+offset;
     		res->end = res->start+ size-1;
-		
+
 	 }
     }
     else
@@ -110,7 +110,7 @@ int dev_ion_probe(struct platform_device *pdev) {
         my_ion_heap[1].type = ION_HEAP_TYPE_CARVEOUT;//ION_HEAP_TYPE_CHUNK;//ION_HEAP_TYPE_CARVEOUT;
         my_ion_heap[1].id = ION_HEAP_TYPE_CARVEOUT;
         my_ion_heap[1].name = "carveout_ion";
-        my_ion_heap[1].base = (ion_phys_addr_t *) res->start;
+        my_ion_heap[1].base = (ion_phys_addr_t) res->start;
         my_ion_heap[1].size = res->end - res->start + 1;
     }
     heaps = kzalloc(sizeof(struct ion_heap *) * num_heaps, GFP_KERNEL);
@@ -133,7 +133,7 @@ int dev_ion_probe(struct platform_device *pdev) {
     }
     platform_set_drvdata(pdev, idev);
     return 0;
-err: 
+err:
 	for (i = 0; i < num_heaps; i++) {
         if (heaps[i])
             ion_heap_destroy(heaps[i]);
diff --git a/drivers/amlogic/regd/regd.c b/drivers/amlogic/regd/regd.c
index cc70d3df85b2..1cc5c335a196 100755
--- a/drivers/amlogic/regd/regd.c
+++ b/drivers/amlogic/regd/regd.c
@@ -764,10 +764,9 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case IOC_WR_SGR_GAMMA:
 	{
 		int gamma_val = 0;
-		int i;
 		unsigned int gammaR[256] = {0};
 		char parm[10];
-        if(copy_from_user(&gamma_val, argp, sizeof(int))){
+		if(copy_from_user(&gamma_val, argp, sizeof(int))){
 			ret = EFAULT;
 			break;
 		}
@@ -778,17 +777,16 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		if(gammaR[0] > 598){
 			gammaR[0] = 598;
 		}
-		set_lcd_gamma_table(gammaR, H_SEL_R);
+		set_lcd_gamma_table((u16 *)gammaR, H_SEL_R);
 		break;
 	}
 
 	case IOC_WR_SGG_GAMMA:
 	{
 		int gamma_val = 0;
-		int i;
 		unsigned int gammaR[256] = {0};
 		char parm[10];
-        if(copy_from_user(&gamma_val, argp, sizeof(int))){
+		if(copy_from_user(&gamma_val, argp, sizeof(int))){
 			ret = EFAULT;
 		break;
 		}
@@ -798,19 +796,18 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		if(gammaR[0] > 598){
 			gammaR[0] = 598;
 		}
-		set_lcd_gamma_table(gammaR, H_SEL_G);
+		set_lcd_gamma_table((u16 *)gammaR, H_SEL_G);
 		break;
 	}
 
 	case IOC_WR_SGB_GAMMA:
 	{
 		int gamma_val = 0;
-		int i;
 		unsigned int gammaR[256] = {0};
 		char parm[10];
-        if(copy_from_user(&gamma_val, argp, sizeof(int))){
+		if(copy_from_user(&gamma_val, argp, sizeof(int))){
 			ret = EFAULT;
-		break;
+			break;
 		}
 		sprintf(parm, "%x", (int)gamma_val);
 		sscanf(parm, "%x", gammaR);
@@ -818,7 +815,7 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		if(gammaR[0] > 598){
 			gammaR[0] = 598;
 		}
-		set_lcd_gamma_table(gammaR, H_SEL_B);
+		set_lcd_gamma_table((u16 *)gammaR, H_SEL_B);
 		break;
 	}
 
diff --git a/drivers/amlogic/vfm/vframe_receiver.c b/drivers/amlogic/vfm/vframe_receiver.c
index ffe9593a107c..336c660c6a88 100755
--- a/drivers/amlogic/vfm/vframe_receiver.c
+++ b/drivers/amlogic/vfm/vframe_receiver.c
@@ -74,10 +74,10 @@ struct vframe_receiver_s * vf_get_receiver(const char *provider_name)
 }
 EXPORT_SYMBOL(vf_get_receiver);
 
-struct vframe_provider_s * vf_get_receiver_by_name(const char *receiver_name)
+struct vframe_receiver_s * vf_get_receiver_by_name(const char *receiver_name)
 {
-    struct vframe_receiver_s *r = NULL;
-    int i;
+    vframe_receiver_t *r = NULL;
+    int i = 0;
     if(receiver_name){
         for(i=0; i<MAX_RECEIVER_NUM; i++){
             r = receiver_table[i];
-- 
2.19.0

