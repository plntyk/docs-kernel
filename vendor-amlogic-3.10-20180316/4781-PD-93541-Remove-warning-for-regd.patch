From 38141237e102f9d6ebb61cd61140c0099b0279ff Mon Sep 17 00:00:00 2001
From: xu xing <xing.xu@amlogic.com>
Date: Tue, 26 Aug 2014 14:54:07 +0800
Subject: [PATCH 4781/5965] PD #93541: Remove warning for regd

Change-Id: I80b0927972ff86d16ea48ff5208a8b19704c452f
---
 drivers/amlogic/regd/regd.c | 30 +++++++++++++++++++++++++++---
 1 file changed, 27 insertions(+), 3 deletions(-)

diff --git a/drivers/amlogic/regd/regd.c b/drivers/amlogic/regd/regd.c
index 1cc5c335a196..bfd04bc9c50c 100755
--- a/drivers/amlogic/regd/regd.c
+++ b/drivers/amlogic/regd/regd.c
@@ -764,8 +764,14 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 	case IOC_WR_SGR_GAMMA:
 	{
 		int gamma_val = 0;
-		unsigned int gammaR[256] = {0};
+		unsigned int *gammaR=NULL;
 		char parm[10];
+		gammaR=kmalloc(256*sizeof(unsigned int),GFP_KERNEL);
+		if(gammaR){
+			printk("kmalloc error\n");
+			return -EINVAL;
+		}
+		memset(gammaR,0,256*sizeof(unsigned int));
 		if(copy_from_user(&gamma_val, argp, sizeof(int))){
 			ret = EFAULT;
 			break;
@@ -778,14 +784,22 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			gammaR[0] = 598;
 		}
 		set_lcd_gamma_table((u16 *)gammaR, H_SEL_R);
+		kfree(gammaR);
+		gammaR=NULL;
 		break;
 	}
 
 	case IOC_WR_SGG_GAMMA:
 	{
 		int gamma_val = 0;
-		unsigned int gammaR[256] = {0};
+		unsigned int *gammaR=NULL;
 		char parm[10];
+		gammaR=kmalloc(256*sizeof(unsigned int),GFP_KERNEL);
+		if(gammaR){
+			printk("kmalloc error\n");
+			return -EINVAL;
+		}
+		memset(gammaR,0,256*sizeof(unsigned int));
 		if(copy_from_user(&gamma_val, argp, sizeof(int))){
 			ret = EFAULT;
 		break;
@@ -797,14 +811,22 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			gammaR[0] = 598;
 		}
 		set_lcd_gamma_table((u16 *)gammaR, H_SEL_G);
+		kfree(gammaR);
+		gammaR=NULL;
 		break;
 	}
 
 	case IOC_WR_SGB_GAMMA:
 	{
 		int gamma_val = 0;
-		unsigned int gammaR[256] = {0};
+		unsigned int *gammaR=NULL;
 		char parm[10];
+		gammaR=kmalloc(256*sizeof(unsigned int),GFP_KERNEL);
+		if(gammaR){
+			printk("kmalloc error\n");
+			return -EINVAL;
+		}
+		memset(gammaR,0,256*sizeof(unsigned int));
 		if(copy_from_user(&gamma_val, argp, sizeof(int))){
 			ret = EFAULT;
 			break;
@@ -816,6 +838,8 @@ static long regd_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 			gammaR[0] = 598;
 		}
 		set_lcd_gamma_table((u16 *)gammaR, H_SEL_B);
+		kfree(gammaR);
+		gammaR=NULL;
 		break;
 	}
 
-- 
2.19.0

