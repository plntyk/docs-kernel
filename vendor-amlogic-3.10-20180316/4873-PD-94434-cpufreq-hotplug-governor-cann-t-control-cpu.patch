From cb6220eaa593d47503f50c373e8aed529013c2b0 Mon Sep 17 00:00:00 2001
From: "shi.liu" <shi.liu@amlogic.com>
Date: Wed, 16 Jul 2014 11:25:25 +0800
Subject: [PATCH 4873/5965] PD#94434:cpufreq:hotplug governor cann't control
 cpu when gorernor start

Change-Id: I755e8132c87aebc7545462fff8639b8684777e63
---
 drivers/cpufreq/cpufreq.c             | 1 -
 drivers/cpufreq/cpufreq_governor.c    | 4 ++--
 drivers/cpufreq/cpufreq_interactive.c | 6 ++++--
 drivers/cpufreq/cpufreq_performance.c | 3 ++-
 4 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index 3cbfc8c5a4e4..d7652b534c82 100755
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -1152,7 +1152,6 @@ static void __ref handle_up_cpu(struct work_struct *work)
 		if(cpu_online(i))
 			continue;
 		cpu_up(i);
-		break;
 	}
 }
 
diff --git a/drivers/cpufreq/cpufreq_governor.c b/drivers/cpufreq/cpufreq_governor.c
index 54cbfbeb810a..b5dd2df894f7 100755
--- a/drivers/cpufreq/cpufreq_governor.c
+++ b/drivers/cpufreq/cpufreq_governor.c
@@ -335,6 +335,8 @@ int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 			hg_dbs_info = dbs_data->cdata->get_cpu_dbs_info_s(policy->cpu);
 			mutex_init(&hg_dbs_info->hotplug_thread_mutex);
 		}
+		if((dbs_data->cdata->governor != GOV_HOTPLUG) && (num_online_cpus() < NR_CPUS))
+			schedule_work(&policy->up_cpu);
 		return 0;
 	case CPUFREQ_GOV_POLICY_EXIT:
 		if (!--dbs_data->usage_count) {
@@ -472,8 +474,6 @@ int cpufreq_governor_dbs(struct cpufreq_policy *policy,
 			gov_queue_work(dbs_data, policy,
 					delay_for_sampling_rate(sampling_rate), true);
 
-		if((dbs_data->cdata->governor != GOV_HOTPLUG) && (num_online_cpus() < NR_CPUS))
-			schedule_work(&policy->up_cpu);
 		break;
 
 	case CPUFREQ_GOV_STOP:
diff --git a/drivers/cpufreq/cpufreq_interactive.c b/drivers/cpufreq/cpufreq_interactive.c
index a8c435857f59..11663860a764 100644
--- a/drivers/cpufreq/cpufreq_interactive.c
+++ b/drivers/cpufreq/cpufreq_interactive.c
@@ -1072,6 +1072,10 @@ static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
 	struct cpufreq_frequency_table *freq_table;
 
 	switch (event) {
+	case CPUFREQ_GOV_POLICY_INIT:
+		if(num_online_cpus() < NR_CPUS)
+			schedule_work(&policy->up_cpu);
+		break;
 	case CPUFREQ_GOV_START:
 		if (!cpu_online(policy->cpu))
 			return -EINVAL;
@@ -1119,8 +1123,6 @@ static int cpufreq_governor_interactive(struct cpufreq_policy *policy,
 		cpufreq_register_notifier(
 			&cpufreq_notifier_block, CPUFREQ_TRANSITION_NOTIFIER);
 		mutex_unlock(&gov_lock);
-		if(num_online_cpus() < NR_CPUS)
-			schedule_work(&policy->up_cpu);
 		break;
 
 	case CPUFREQ_GOV_STOP:
diff --git a/drivers/cpufreq/cpufreq_performance.c b/drivers/cpufreq/cpufreq_performance.c
index 1644397aba0d..53744985c107 100644
--- a/drivers/cpufreq/cpufreq_performance.c
+++ b/drivers/cpufreq/cpufreq_performance.c
@@ -22,9 +22,10 @@ static int cpufreq_governor_performance(struct cpufreq_policy *policy,
 					unsigned int event)
 {
 	switch (event) {
-	case CPUFREQ_GOV_START:
+	case CPUFREQ_GOV_POLICY_INIT:
 		if(num_online_cpus() < NR_CPUS)
 			schedule_work(&policy->up_cpu);
+		break;
 	case CPUFREQ_GOV_LIMITS:
 		pr_debug("setting to %u kHz because of event %u\n",
 						policy->max, event);
-- 
2.19.0

