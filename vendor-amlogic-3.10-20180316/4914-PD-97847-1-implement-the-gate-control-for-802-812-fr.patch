From 911bb70d47734dfa9955a8767c4180116d329662 Mon Sep 17 00:00:00 2001
From: "jets.yan" <jets.yan@amlogic.com>
Date: Wed, 24 Sep 2014 11:15:52 +0800
Subject: [PATCH 4914/5965] PD #97847: 1,implement the gate control for 802/812
 from 805.            2,open corresponding gating config of enci/vdac for cvbs
 for 802/812.

---
 arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c  | 92 ++++++++++++++++++-
 .../arm/mach-meson8/include/mach/power_gate.h | 32 ++++++-
 drivers/amlogic/display/vout/tvoutc.c         |  4 +-
 3 files changed, 120 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
index 40a125e0d48e..c28bf4f6563d 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
@@ -109,6 +109,79 @@ static unsigned char use_tvenc_conf_flag=1;
 
 static unsigned char cur_vout_index = 1; //CONFIG_AM_TV_OUTPUT2
 
+static void hdmi_tx_mode_ctrl(HDMI_Video_Codes_t vic)
+{
+    switch(vic) {
+    // Interlaced Mode
+    case HDMI_480i60:
+    case HDMI_480i60_16x9:
+    case HDMI_576i50:
+    case HDMI_576i50_16x9:
+        CLK_GATE_ON(CTS_ENCI);
+        CLK_GATE_ON(VCLK2_VENCI1);
+		CLK_GATE_ON(VCLK2_ENCI);
+        CLK_GATE_OFF(CTS_ENCP);
+        CLK_GATE_ON(CTS_HDMI_TX_PIXEL);
+        hdmi_set_reg_bits(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1, 1, 15, 1);
+        break;
+    case HDMI_Unkown:
+        CLK_GATE_OFF(CTS_ENCP);
+        CLK_GATE_OFF(CTS_HDMI_TX_PIXEL);
+        hdmi_set_reg_bits(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1, 0, 15, 1);
+        break;
+    // Progressive Mode
+    default:
+        CLK_GATE_OFF(CTS_ENCI);
+        CLK_GATE_ON(CTS_ENCP);
+        CLK_GATE_ON(CTS_HDMI_TX_PIXEL);
+        hdmi_set_reg_bits(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1, 1, 15, 1);
+        break;
+    }
+}
+
+static void hdmi_tx_gate_pwr_ctrl(enum hd_ctrl cmd, void * data)
+{
+    hdmi_print(IMP, SYS "gate/pwr cmd: %d\n", cmd);
+    switch(cmd) {
+    case VID_EN:
+        {
+            hdmitx_dev_t* hdmitx_device = (hdmitx_dev_t *)data;
+            hdmi_tx_mode_ctrl(hdmitx_device->cur_VIC);
+        }
+        break;
+    case VID_DIS:
+        hdmi_tx_mode_ctrl(HDMI_Unkown);
+        break;
+    case AUD_EN:
+        if(i2s_to_spdif_flag == 1) {
+            hdmi_set_reg_bits(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1, 0, 13, 1);
+        }
+        else {
+            hdmi_set_reg_bits(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1, 1, 13, 1);
+        }
+        aml_set_reg32_bits(P_AIU_HDMI_CLK_DATA_CTRL, 2, 0, 2);
+        aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0, 10, 2);
+        break;
+    case AUD_DIS:
+        hdmi_set_reg_bits(OTHER_BASE_ADDR + HDMI_OTHER_CTRL1, 0, 13, 1);
+        aml_set_reg32_bits(P_AIU_HDMI_CLK_DATA_CTRL, 0, 0, 2);
+        aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 3, 10, 2);
+        break;
+    case EDID_EN:
+        aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0, 8, 2);
+        break;
+    case EDID_DIS:
+        aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 3, 8, 2);
+        break;
+    case HDCP_EN:
+        aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0, 12, 2);
+        break;
+    case HDCP_DIS:
+        aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 3, 12, 2);
+        break;
+    }
+}
+
 static unsigned long modulo(unsigned long a, unsigned long b)
 {
     if (a >= b) {
@@ -1160,13 +1233,19 @@ void hdmi_hw_init(hdmitx_dev_t* hdmitx_device)
     aml_write_reg32(P_HHI_HDMI_AFC_CNTL, aml_read_reg32(P_HHI_HDMI_AFC_CNTL) | 0x3);
 
     hdmi_wr_reg(TX_HDCP_MODE, 0x40);
-
+#ifndef CONFIG_AML_HDMI_TX_HDCP
+    hdmi_tx_gate_pwr_ctrl(HDCP_DIS, NULL);
+#endif
     vic = hdmitx_device->HWOp.GetState(hdmitx_device, STAT_VIDEO_VIC, 0);
     if(vic != HDMI_Unkown) {
         hdmi_print(IMP, SYS "ALREADY init VIC = %d\n", vic);
         hdmitx_device->cur_VIC = vic;
+        hdmi_tx_gate_pwr_ctrl(VID_EN, hdmitx_device);
         return;
     }
+    else {
+        hdmi_tx_gate_pwr_ctrl(VID_DIS, NULL);
+    }
     hdmi_phy_suspend();
     //todo
     aml_set_reg32_bits(P_PERIPHS_PIN_MUX_1, 0xf, 23, 4); //Enable reg1[23:24]:HDMI SDA(5v)/SCL(5V)
@@ -1951,6 +2030,7 @@ static void hdmitx_set_phy(hdmitx_dev_t* hdmitx_device)
 static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t *param)
 {
     if(param == NULL){ //disable HDMI
+        hdmi_tx_gate_pwr_ctrl(VID_DIS, hdmitx_device);
         return 0;
     }
     else {
@@ -1966,15 +2046,15 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t
         param->color_depth = COLOR_36BIT;
     else if(color_depth_f==48)
         param->color_depth = COLOR_48BIT;
-    hdmi_print(INF, SYS "set mode VIC %d (cd%d,cs%d,pm%d,vd%d,%x) \n",param->VIC, color_depth_f, color_space_f,power_mode,power_off_vdac_flag,serial_reg_val);
+    hdmi_print(INF, SYS " %d (cd%d,cs%d,pm%d,vd%d,%x) \n",param->VIC, color_depth_f, color_space_f,power_mode,power_off_vdac_flag,serial_reg_val);
     if(color_space_f != 0){
         param->color = color_space_f;
     }
-
+    hdmitx_device->cur_VIC = param->VIC;
+    hdmi_tx_gate_pwr_ctrl(VID_EN, hdmitx_device);
     hdmi_hw_reset(hdmitx_device, param);    
 	// move hdmitx_set_pll() to the end of this function.
     // hdmitx_set_pll(param);
-    hdmitx_device->cur_VIC = param->VIC;
     hdmitx_set_phy(hdmitx_device);
 
     if((param->VIC==HDMI_720p60)||(param->VIC==HDMI_720p50)||
@@ -3091,6 +3171,7 @@ static int hdmitx_cntl_ddc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned a
 
     switch(cmd) {
     case DDC_RESET_EDID:
+        hdmi_tx_gate_pwr_ctrl(EDID_EN, NULL);
         hdmi_set_reg_bits(TX_HDCP_EDID_CONFIG, 0, 6, 1);
         hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 1, 1, 1);
         hdmi_set_reg_bits(TX_SYS5_TX_SOFT_RESET_2, 0, 1, 1);
@@ -3103,6 +3184,7 @@ static int hdmitx_cntl_ddc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned a
         break;
     case DDC_EDID_GET_DATA:
         hdmitx_getediddata(hdmitx_device, argv);
+        hdmi_tx_gate_pwr_ctrl(EDID_DIS, NULL);
         break;
     case DDC_PIN_MUX_OP:
         if(argv == PIN_MUX) {
@@ -3123,6 +3205,7 @@ static int hdmitx_cntl_ddc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned a
         break;
     case DDC_HDCP_OP:
         if(argv == HDCP_ON) {
+            hdmi_tx_gate_pwr_ctrl(HDCP_EN, NULL);
 #ifdef CONFIG_AML_HDMI_TX_HDCP
             // check if bit7 is enable, if not, enable first
             if(hdmi_rd_reg(TX_PACKET_CONTROL_1) & (1 << 7)) {
@@ -3135,6 +3218,7 @@ static int hdmitx_cntl_ddc(hdmitx_dev_t* hdmitx_device, unsigned cmd, unsigned a
             hdmi_set_reg_bits(TX_HDCP_MODE, 1, 7, 1);
         }
         if(argv == HDCP_OFF) {
+            hdmi_tx_gate_pwr_ctrl(HDCP_DIS, NULL);
             hdmi_set_reg_bits(TX_HDCP_MODE, 0, 7, 1);
         }
         break;
diff --git a/arch/arm/mach-meson8/include/mach/power_gate.h b/arch/arm/mach-meson8/include/mach/power_gate.h
index 45dfceb02f77..675b438d95f7 100755
--- a/arch/arm/mach-meson8/include/mach/power_gate.h
+++ b/arch/arm/mach-meson8/include/mach/power_gate.h
@@ -851,7 +851,37 @@ extern spinlock_t gate_lock;
 #define GCLK_REG_AO_REGS      (HHI_GCLK_AO)
 #define GCLK_MASK_AO_REGS      (1<<3)
 
-#define GCLK_IDX_MAX 132
+#define GCLK_IDX_CTS_ENCI         132
+#define GCLK_NAME_CTS_ENCI      "CTS_ENCI"
+#define GCLK_DEV_CTS_ENCI      "CLKGATE_CTS_ENCI"
+#define GCLK_REG_CTS_ENCI      (HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_ENCI      (1<<0)
+
+#define GCLK_IDX_CTS_ENCP         133
+#define GCLK_NAME_CTS_ENCP      "CTS_ENCP"
+#define GCLK_DEV_CTS_ENCP      "CLKGATE_CTS_ENCP"
+#define GCLK_REG_CTS_ENCP      (HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_ENCP      (1<<2)
+
+#define GCLK_IDX_CTS_ENCL         134
+#define GCLK_NAME_CTS_ENCL      "CTS_ENCL"
+#define GCLK_DEV_CTS_ENCL      "CLKGATE_CTS_ENCL"
+#define GCLK_REG_CTS_ENCL      (HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_ENCL      (1<<3)
+
+#define GCLK_IDX_CTS_VDAC         135
+#define GCLK_NAME_CTS_VDAC      "CTS_VDAC"
+#define GCLK_DEV_CTS_VDAC      "CLKGATE_CTS_VDAC"
+#define GCLK_REG_CTS_VDAC      (HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_VDAC      (1<<4)
+
+#define GCLK_IDX_CTS_HDMI_TX_PIXEL         136
+#define GCLK_NAME_CTS_HDMI_TX_PIXEL      "CTS_HDMI_TX_PIXEL"
+#define GCLK_DEV_CTS_HDMI_TX_PIXEL      "CLKGATE_CTS_HDMI_TX_PIXEL"
+#define GCLK_REG_CTS_HDMI_TX_PIXEL      (HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_HDMI_TX_PIXEL      (1<<5)
+
+#define GCLK_IDX_MAX 137
 extern short GCLK_ref[GCLK_IDX_MAX];
 
 #define REGISTER_CLK(_MOD) \
diff --git a/drivers/amlogic/display/vout/tvoutc.c b/drivers/amlogic/display/vout/tvoutc.c
index 837630ffc1d5..90dc21b3269d 100755
--- a/drivers/amlogic/display/vout/tvoutc.c
+++ b/drivers/amlogic/display/vout/tvoutc.c
@@ -573,13 +573,11 @@ printk(" clk_util_clk_msr 29 = %d\n", clk_util_clk_msr(29));
         msleep(1000);
 
 		CLK_GATE_ON(VCLK2_ENCI);
-
-#ifdef CONFIG_ARCH_MESON8B
 		CLK_GATE_ON(VCLK2_VENCI1);
         CLK_GATE_ON(CTS_ENCI);
         CLK_GATE_ON(CTS_VDAC);
 		CLK_GATE_ON(DAC_CLK);
-#endif
+
         cvbs_cntl_output(1);
     }
 #endif
-- 
2.19.0

