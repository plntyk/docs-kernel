From fec71dba32afcc120607bfc58d649de9d59c9486 Mon Sep 17 00:00:00 2001
From: "baoqi.wang" <baoqi.wang@amlogic.com>
Date: Wed, 8 Oct 2014 15:10:56 +0800
Subject: [PATCH 4923/5965] PD#95969 For Android consumerir provide driver
 interface

Squashed commit of the following:

commit 063d6e63a84e4386f7c44b3507e957d9f9775d0c
Author: baoqi.wang <baoqi.wang@amlogic.com>
Date:   Wed Sep 17 11:39:43 2014 +0800

    PD#95969 compatible s812 irblaster module

    Change-Id: Ib544a7b42c0150fa96d1d61b220afb983bcca54b

commit d1d90e59026876792d060f463f35f3921ccde240
Author: baoqi.wang <baoqi.wang@amlogic.com>
Date:   Fri Aug 29 14:08:53 2014 +0800

    add modulation level ctl

    Change-Id: Ibe2535ea70248541982009dee5537a083b193459

commit 0fdab51f760297d339e5b3d243a546ca12b66cb3
Author: baoqi.wang <baoqi.wang@amlogic.com>
Date:   Thu Aug 14 09:54:33 2014 +0800

    PD#95969 For Android consumerir provide driver interface

    Change-Id: Iada2dfb6ff37841ac7e11a2d7d21392017e20bf1

Change-Id: I2b22d279598c319b0f60be68c5ca2df965002101
---
 arch/arm/configs/meson8_defconfig             |   2 +-
 arch/arm/configs/meson8b_defconfig            |   2 +-
 arch/arm/mach-meson8/aml_pin.dtd              |   9 +-
 arch/arm/mach-meson8b/aml_pin.dtd             |  10 +-
 drivers/amlogic/input/Kconfig                 |   1 +
 drivers/amlogic/input/Makefile                |   1 +
 drivers/amlogic/input/irblaster/Kconfig       |  14 +
 drivers/amlogic/input/irblaster/Makefile      |   7 +
 .../amlogic/input/irblaster/am_irblaster.c    | 329 ++++++++++++++++++
 .../amlogic/input/irblaster/am_irblaster.h    |  18 +
 drivers/amlogic/input/irblaster/aml.dtd       |  13 +
 11 files changed, 401 insertions(+), 5 deletions(-)
 create mode 100755 drivers/amlogic/input/irblaster/Kconfig
 create mode 100755 drivers/amlogic/input/irblaster/Makefile
 create mode 100755 drivers/amlogic/input/irblaster/am_irblaster.c
 create mode 100755 drivers/amlogic/input/irblaster/am_irblaster.h
 create mode 100755 drivers/amlogic/input/irblaster/aml.dtd

diff --git a/arch/arm/configs/meson8_defconfig b/arch/arm/configs/meson8_defconfig
index 47b6bc42df63..ba905d9a4f36 100755
--- a/arch/arm/configs/meson8_defconfig
+++ b/arch/arm/configs/meson8_defconfig
@@ -172,7 +172,7 @@ CONFIG_I2C_AML=y
 CONFIG_SARADC_AM=y
 # CONFIG_MESON_INPUT_REMOTE is not set
 CONFIG_NEW_AM_REMOTE=y
-CONFIG_NEW_AM_IR_TX=y
+CONFIG_AM_IR_IRBLASTER=y
 CONFIG_ADC_KEYPADS_AM=y
 CONFIG_MESON_INPUT_TOUCHSCREEN=y
 CONFIG_FOCALTECH_CAPACITIVE_TOUCHSCREEN=y
diff --git a/arch/arm/configs/meson8b_defconfig b/arch/arm/configs/meson8b_defconfig
index 0ef265c4105b..509c45526056 100755
--- a/arch/arm/configs/meson8b_defconfig
+++ b/arch/arm/configs/meson8b_defconfig
@@ -166,7 +166,7 @@ CONFIG_I2C_AML=y
 CONFIG_SARADC_AM=y
 # CONFIG_MESON_INPUT_REMOTE is not set
 CONFIG_NEW_AM_REMOTE=y
-CONFIG_NEW_AM_IR_TX=y
+CONFIG_AM_IR_IRBLASTER=y
 CONFIG_ADC_KEYPADS_AM=y
 CONFIG_MESON_INPUT_TOUCHSCREEN=y
 CONFIG_FOCALTECH_CAPACITIVE_TOUCHSCREEN=y
diff --git a/arch/arm/mach-meson8/aml_pin.dtd b/arch/arm/mach-meson8/aml_pin.dtd
index cdf982b94b15..13d381e68311 100755
--- a/arch/arm/mach-meson8/aml_pin.dtd
+++ b/arch/arm/mach-meson8/aml_pin.dtd
@@ -404,6 +404,13 @@
 			amlogic,pins="GPIOAO_7";
 		};
 
+//$$ MATCH "irblaster_pin_0_match" = "&irblaster_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR = "amlogic,pins"
+        irblaster_pins:irblaster_pin{
+			amlogic,setmask=<10 0x80000000>;
+			amlogic,pins="GPIOAO_13";
+		};
 //$$ MATCH "Audio_pin_0_match" = "&audio_pins"
 //$$ L2 PROP_U32 4 = "amlogic,setmask"
 //$$ L2 PROP_U32 10 = "amlogic,clrmask"
@@ -430,4 +437,4 @@
 		};
         
 	};
-#endif
\ No newline at end of file
+#endif
diff --git a/arch/arm/mach-meson8b/aml_pin.dtd b/arch/arm/mach-meson8b/aml_pin.dtd
index cdf982b94b15..fdd4ab0c27b3 100644
--- a/arch/arm/mach-meson8b/aml_pin.dtd
+++ b/arch/arm/mach-meson8b/aml_pin.dtd
@@ -403,7 +403,13 @@
 			amlogic,setmask=<10 0x1>;
 			amlogic,pins="GPIOAO_7";
 		};
-
+//$$ MATCH "irblaster_pin_0_match" = "&irblaster_pins"
+//$$ L2 PROP_U32 2 = "amlogic,setmask"
+//$$ L2 PROP_STR = "amlogic,pins"
+        irblaster_pins:irblaster_pin{
+                        amlogic,setmask=<10 0x80000000>;
+                        amlogic,pins="GPIOAO_13";
+                };
 //$$ MATCH "Audio_pin_0_match" = "&audio_pins"
 //$$ L2 PROP_U32 4 = "amlogic,setmask"
 //$$ L2 PROP_U32 10 = "amlogic,clrmask"
@@ -430,4 +436,4 @@
 		};
         
 	};
-#endif
\ No newline at end of file
+#endif
diff --git a/drivers/amlogic/input/Kconfig b/drivers/amlogic/input/Kconfig
index 8e6c1b6d1092..4a7202ac3fac 100755
--- a/drivers/amlogic/input/Kconfig
+++ b/drivers/amlogic/input/Kconfig
@@ -12,6 +12,7 @@ if AM_INPUT
 
 source "drivers/amlogic/input/saradc/Kconfig"
 source "drivers/amlogic/input/remote/Kconfig"
+source "drivers/amlogic/input/irblaster/Kconfig"
 source "drivers/amlogic/input/new_remote/Kconfig"
 source "drivers/amlogic/input/keyboard/Kconfig"
 source "drivers/amlogic/input/touchscreen/Kconfig"
diff --git a/drivers/amlogic/input/Makefile b/drivers/amlogic/input/Makefile
index ecc7d17c6e3d..a0abe5abbf61 100755
--- a/drivers/amlogic/input/Makefile
+++ b/drivers/amlogic/input/Makefile
@@ -6,6 +6,7 @@
 
 obj-y	+= saradc/
 obj-y	+= remote/
+obj-y	+= irblaster/
 obj-y	+= new_remote/
 obj-y	+= keyboard/
 obj-y	+= touchscreen/
diff --git a/drivers/amlogic/input/irblaster/Kconfig b/drivers/amlogic/input/irblaster/Kconfig
new file mode 100755
index 000000000000..fc367f2e2861
--- /dev/null
+++ b/drivers/amlogic/input/irblaster/Kconfig
@@ -0,0 +1,14 @@
+#
+# Input core configuration
+#
+
+
+
+config AM_IR_IRBLASTER
+	tristate "Amlogic irblaster device surport"
+	default n
+	help
+	  Say Y here if you want to use the amlogic irblaster.
+
+
+
diff --git a/drivers/amlogic/input/irblaster/Makefile b/drivers/amlogic/input/irblaster/Makefile
new file mode 100755
index 000000000000..89a4aab7cfe7
--- /dev/null
+++ b/drivers/amlogic/input/irblaster/Makefile
@@ -0,0 +1,7 @@
+#
+# Makefile for the remote control drivers
+#
+
+# Each configuration option enables a list of files.
+
+obj-$(CONFIG_AM_IR_IRBLASTER)	+= am_irblaster.o
diff --git a/drivers/amlogic/input/irblaster/am_irblaster.c b/drivers/amlogic/input/irblaster/am_irblaster.c
new file mode 100755
index 000000000000..841d239bd468
--- /dev/null
+++ b/drivers/amlogic/input/irblaster/am_irblaster.c
@@ -0,0 +1,329 @@
+/*
+ * IRBLASTER Driver
+ *
+ * Copyright (C) 2014 Amlogic Corporation
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ * author :   platform-beijing
+ */
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/types.h>
+#include <linux/input.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/mutex.h>
+#include <linux/errno.h>
+#include <asm/io.h>
+#include <mach/am_regs.h>
+#include <linux/slab.h>
+#include <linux/major.h>
+#include <asm/uaccess.h>
+#include <linux/cdev.h>
+#include <mach/pinmux.h>
+#include <mach/gpio.h>
+#include "am_irblaster.h"
+
+//#define DEBUG
+#ifdef DEBUG
+#define irblaster_dbg(fmt, args...) printk(KERN_INFO "ir_blaster: " fmt, ##args)
+#else
+#define irblaster_dbg(fmt, args...)
+#endif
+
+#define DEVICE_NAME "meson_ibr"
+#define DEIVE_COUNT 32
+static dev_t amirblaster_id;
+static struct class *irblaster_class;
+static struct device *irblaster_dev;
+static struct cdev amirblaster_device;
+static struct aml_blaster *irblaster = NULL;
+static DEFINE_MUTEX(irblaster_file_mutex);
+static void aml_consumerir_transmit(struct aml_blaster * aml_transmit){
+	int i,k,j;
+	unsigned int consumerir_freqs = 1000/(irblaster->consumerir_freqs/1000);
+	unsigned int high_level_modulation_enable = 1<<12;
+	unsigned int high_level_modulation_disable = ~(1<<12);
+	if(irblaster->fisrt_pulse_width == fisrt_low){
+		high_level_modulation_enable = 1<<12;
+		high_level_modulation_disable = ~(1<<12);
+	}
+	if(irblaster->fisrt_pulse_width == fisrt_high){
+		high_level_modulation_disable = 1<<12;
+		high_level_modulation_enable = ~(1<<12);
+	}
+	// set init_high valid and enable the ir_blaster
+#if(MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8)
+	if(!IS_MESON_M8_CPU){
+        	//code
+		aml_write_reg32( P_AO_IR_BLASTER_ADDR0, aml_read_reg32(P_AO_IR_BLASTER_ADDR0)&(~(1<<0)));
+		udelay(1);
+		aml_write_reg32( P_AO_IR_BLASTER_ADDR2,0x10000);
+    	}
+#endif
+	irblaster_dbg("Enable the ir_blaster, and create a new format !!  consumerir_freqs %d \n",consumerir_freqs);
+	aml_write_reg32( P_AO_IR_BLASTER_ADDR0, aml_read_reg32(P_AO_IR_BLASTER_ADDR0)| (2<<12));     //set the modulator_tb = 2'10; 1us
+	aml_write_reg32( P_AO_IR_BLASTER_ADDR1, aml_read_reg32(P_AO_IR_BLASTER_ADDR1)| (((consumerir_freqs/2)-1)<<16));    //set mod_high_count = 13;  
+	aml_write_reg32( P_AO_IR_BLASTER_ADDR1, aml_read_reg32(P_AO_IR_BLASTER_ADDR1)| (((consumerir_freqs/2)-1)<<0));     //set mod_low_count = 13;
+	aml_write_reg32( P_AO_IR_BLASTER_ADDR0, aml_read_reg32(P_AO_IR_BLASTER_ADDR0)| (1<<2) | (1<<0));
+	udelay(1);
+	aml_write_reg32( P_AO_IR_BLASTER_ADDR0, aml_read_reg32(P_AO_IR_BLASTER_ADDR0)| (1<<2) | (1<<0));
+	k = aml_transmit->pattern_len;	
+	if(aml_transmit->pattern_len){
+		for(i =0; i < k/2; i++){
+			aml_write_reg32( P_AO_IR_BLASTER_ADDR2, (0x10000 &  high_level_modulation_disable)    //timeleve = 0;
+					| (3<<10)     //[11:10] = 2'b01,then set the timebase 10us. 
+					| ((((aml_transmit->pattern[2*i])-1)/consumerir_freqs)<<0)    //[9:0] = 10'd,the timecount = N+1;
+				       );
+			udelay((aml_transmit->pattern[2*i]));
+			aml_write_reg32( P_AO_IR_BLASTER_ADDR2, (0x10000| high_level_modulation_enable)     //timeleve = 1;    //[11:10] = 2'b11,then set the timebase 26.5us. 
+					|(1<<10)
+					| ((((aml_transmit->pattern[2*i+1]/10)-1))<<0)     //[9:0] = 10'd,the timecount = N+1;
+				       );
+			udelay((aml_transmit->pattern[2*i+1]));
+			//irblaster_dbg("aml_transmit->pattern[%d] : %d    aml_transmit->pattern[%d] : %d  \n",2*i,aml_transmit->pattern[2*i],(2*i)+1,aml_transmit->pattern[2*i+1]/10);
+		}                                        
+	}
+	/*for(j=0;j<72-k;j++){
+		aml_write_reg32( P_AO_IR_BLASTER_ADDR2,0x10000);
+		}*/
+	irblaster_dbg("The all frame finished !!\n");    
+
+}
+
+/**
+  * Function to set the irblaster Carrier Frequency, The modulator is typically run between 32khz and 56khz. 
+  *
+  * @param[in] pointer to irblaster structure.
+  * @param[in] carrirer freqs value.
+  * \return Reuturns 0 on success else return the error value.
+ */
+
+int set_consumerir_freqs(struct aml_blaster *irblaster,int consumerir_freqs){
+	return	((irblaster->consumerir_freqs = consumerir_freqs) >= 32000 
+	&& (irblaster->consumerir_freqs <= 56000)) ? 0 : -1;
+}
+
+/**
+  * Function to set the irblaster High or low modulation. 
+  *
+  * @param[in] pointer to irblaster structure.
+  * @param[in] level 0  mod low level 1 mod high.
+  * \return Reutrn set value.
+ */
+
+
+int set_consumerir_mod_level(struct aml_blaster *irblaster,int modulation_level){
+	irblaster->fisrt_pulse_width = modulation_level;
+	return 0;
+}
+
+
+/**
+  * Function to get the irblaster cur Carrier Frequency. 
+  *
+  * @param[in] pointer to irblaster structure.
+  * \return Reuturns freqs.
+ */
+
+static int  get_consumerir_freqs(struct aml_blaster *irblaster){
+	return irblaster->consumerir_freqs;
+}
+
+
+static int aml_irblaster_open(struct inode *inode, struct file *file)
+{
+	irblaster_dbg("aml_irblaster_open()\n");
+	aml_set_reg32_mask(P_AO_RTI_PIN_MUX_REG, (1 << 31));
+	return 0;
+}
+
+static long aml_irblaster_ioctl(struct file *filp, unsigned int cmd, unsigned long args)
+{
+	int i;
+	int consumerir_freqs = 0;
+	int modulation_level = 0; 
+	s32 r = 0;
+	unsigned long flags;
+	void __user *argp = (void __user *)args;
+	irblaster_dbg("aml_irblaster_ioctl()  0x%4x \n ",cmd);
+        static struct aml_blaster consumerir_transmit;
+	switch(cmd)
+	{
+		case CONSUMERIR_TRANSMIT:
+			if (copy_from_user(&consumerir_transmit, argp, sizeof(struct aml_blaster)))
+				return -EFAULT;
+
+		/*	for(i=0; i<consumerir_transmit.pattern_len; i++)
+				irblaster_dbg("idx[%d]:[%d]\n", i, consumerir_transmit.pattern[i]);*/
+			irblaster_dbg("Transmit [%d]\n", consumerir_transmit.pattern_len);
+			local_irq_save(flags);
+			aml_consumerir_transmit(&consumerir_transmit);
+			local_irq_restore(flags);
+			break;
+
+		case GET_CARRIER:
+			consumerir_freqs = get_consumerir_freqs(irblaster);
+			if(copy_to_user(argp, &consumerir_freqs, sizeof(int)))
+				return -EFAULT;
+			
+			break;
+		case SET_CARRIER:
+			if (copy_from_user(&consumerir_freqs, argp, sizeof(int)))
+				return -EFAULT;
+			return set_consumerir_freqs(irblaster,consumerir_freqs);
+
+		case SET_MODLEVEL:  //Modulation level 
+			if (copy_from_user(&consumerir_freqs, argp, sizeof(int)))
+				return -EFAULT;
+			return set_consumerir_mod_level(irblaster,modulation_level);
+
+		default:
+			r = -ENOIOCTLCMD;
+			break;
+	}
+
+	return r;
+}
+static int aml_irblaster_release(struct inode *inode, struct file *file)
+{
+	irblaster_dbg("aml_ir_irblaster_release()\n");
+	file->private_data = NULL;
+	aml_clr_reg32_mask(P_AO_RTI_PIN_MUX_REG, (1 << 31));
+	return 0;
+
+}
+static const struct file_operations aml_irblaster_fops = {
+	.owner		= THIS_MODULE,
+	.open		= aml_irblaster_open,
+	.unlocked_ioctl = aml_irblaster_ioctl,
+	.release	= aml_irblaster_release,
+};
+
+static int  aml_irblaster_probe(struct platform_device *pdev)
+{
+	int r;
+	printk("irblaster probe\n");
+	irblaster = kmalloc(sizeof(struct aml_blaster),GFP_KERNEL);
+        if(irblaster == NULL)
+		return -1;
+	memset(irblaster,0,sizeof(struct aml_blaster));
+	
+	if (pdev->dev.of_node) {
+		printk("aml_irblaster: pdev->dev.of_node == NULL!\n");
+		return -1;
+	}
+	r = alloc_chrdev_region(&amirblaster_id, 0, DEIVE_COUNT, DEVICE_NAME);
+	if (r < 0) {
+		printk(KERN_ERR "Can't register major for ir irblaster device\n");
+		return r;
+	}
+	cdev_init(&amirblaster_device, &aml_irblaster_fops);
+	amirblaster_device.owner = THIS_MODULE;
+	cdev_add(&(amirblaster_device), amirblaster_id, DEIVE_COUNT);
+	irblaster_class = class_create(THIS_MODULE, DEVICE_NAME);
+	if (IS_ERR(irblaster_class)) {
+		unregister_chrdev_region(amirblaster_id, DEIVE_COUNT);
+		printk(KERN_ERR "Can't create class for ir irblaster device\n");
+		return -1;
+	}
+
+
+	irblaster_dev = device_create(irblaster_class, NULL, amirblaster_id, NULL, "irblaster%d", 1);
+
+	if (irblaster_dev == NULL) {
+		printk("irblaster_dev create error\n");
+		class_destroy(irblaster_class);
+		return -EEXIST;
+	}
+
+	return 0;
+}
+
+static int aml_irblaster_remove(struct platform_device *pdev)
+{
+	irblaster_dbg("remove IRBLASTER \n");
+
+	if(irblaster)
+		kfree(irblaster);
+	irblaster = NULL;
+
+	cdev_del(&amirblaster_device);
+
+	device_destroy(irblaster_class, amirblaster_id);
+
+	class_destroy(irblaster_class);
+	unregister_chrdev_region(amirblaster_id, DEIVE_COUNT);
+	return 0;
+}
+static const struct of_device_id irblaster_dt_match[]={
+	{	.compatible 	= "amlogic,am_irblaster",
+	},
+	{},
+};
+static struct platform_driver aml_irblaster_driver = {
+	.probe		= aml_irblaster_probe,
+	.remove		= aml_irblaster_remove,
+	.suspend	= NULL,
+	.resume		= NULL,
+	.driver = {
+		.name = "meson_ibr",
+		.owner  = THIS_MODULE,
+		.of_match_table = irblaster_dt_match,	
+	},
+};
+
+
+static struct platform_device* aml_irblaster_device = NULL;
+
+static int __init aml_irblaster_init(void)
+{
+	irblaster_dbg("IR BLASTER Driver Init\n");
+	aml_irblaster_device = platform_device_alloc(DEVICE_NAME,-1);
+	if (!aml_irblaster_device) {
+		irblaster_dbg("failed to alloc aml_ir_irblaster_device\n");
+		return -ENOMEM;
+	}
+	if(platform_device_add(aml_irblaster_device)){
+		platform_device_put(aml_irblaster_device);
+		irblaster_dbg("failed to add aml_ir_irblaster_device\n");
+		return -ENODEV;
+	}
+	if (platform_driver_register(&aml_irblaster_driver)) {
+		irblaster_dbg("failed to register aml_ir_irblaster_driver module\n");
+		platform_device_del(aml_irblaster_device);
+		platform_device_put(aml_irblaster_device);
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+static void __exit aml_irblaster_exit(void)
+{
+	irblaster_dbg("IR IRBLASTER Driver exit \n");
+	platform_driver_unregister(&aml_irblaster_driver);
+	platform_device_unregister(aml_irblaster_device);
+	aml_irblaster_device = NULL;
+}
+module_init(aml_irblaster_init);
+module_exit(aml_irblaster_exit);
+
+MODULE_AUTHOR("platform-beijing");
+MODULE_DESCRIPTION("AML IR BLASTER Driver");
+MODULE_LICENSE("GPL");
diff --git a/drivers/amlogic/input/irblaster/am_irblaster.h b/drivers/amlogic/input/irblaster/am_irblaster.h
new file mode 100755
index 000000000000..01750486ec05
--- /dev/null
+++ b/drivers/amlogic/input/irblaster/am_irblaster.h
@@ -0,0 +1,18 @@
+#ifndef AM_IRBLASTER_H
+#define AM_IRBLASTER_H
+#define MAX_PLUSE 1024
+struct aml_blaster {
+    unsigned int consumerir_freqs;
+    unsigned int pattern[MAX_PLUSE];
+    unsigned int pattern_len;
+    unsigned int fisrt_pulse_width;
+};
+enum  {	/* Modulation level*/
+	fisrt_low  = 0,
+	fisrt_high = 1
+};
+#define CONSUMERIR_TRANSMIT     0x5500
+#define GET_CARRIER         0x5501
+#define SET_CARRIER         0x5502
+#define SET_MODLEVEL         0x5503
+#endif 
diff --git a/drivers/amlogic/input/irblaster/aml.dtd b/drivers/amlogic/input/irblaster/aml.dtd
new file mode 100755
index 000000000000..553894eeaf7d
--- /dev/null
+++ b/drivers/amlogic/input/irblaster/aml.dtd
@@ -0,0 +1,13 @@
+#ifdef CONFIG_AM_IR_IRBLASTER
+//$$ DEVICE="meson_irblaster"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "irblaster_pin_0_match" = "pinctrl-0"
+    meson-remote{
+		compatible = "amlogic,am_irblaster";
+		dev_name = "meson_ibr";
+		status = "ok";
+		pinctrl-names="default";
+		pinctrl-0=<&irblaster_pins>;
+	};
+#endif
-- 
2.19.0

