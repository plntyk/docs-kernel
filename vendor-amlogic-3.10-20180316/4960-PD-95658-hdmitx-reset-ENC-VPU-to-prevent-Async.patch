From b35ba45e271988a883d7a68ad4f7b4d975a0edd8 Mon Sep 17 00:00:00 2001
From: "zongdong.jiao" <zongdong.jiao@amlogic.com>
Date: Wed, 15 Oct 2014 13:49:12 +0800
Subject: [PATCH 4960/5965] PD #95658: hdmitx: reset ENC & VPU to prevent Async

There is a small async FIFO between VENC and HDMI TX module.
We need to make sure hdmi clk stable, then enable FIFO.
Otherwise, there maybe exist RD/WR asynchronous issue and
cause display abnormally.
---
 arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c  | 62 +++++++++++++++---
 arch/arm/mach-meson8/include/mach/tvregs.h    | 49 +++++++++++++-
 arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c | 65 ++++++++++++++++---
 arch/arm/mach-meson8b/include/mach/tvregs.h   | 43 +++++++++++-
 drivers/amlogic/display/vout/enc_clk_config.c |  9 ++-
 drivers/amlogic/display/vout/tvoutc.c         |  9 ++-
 6 files changed, 213 insertions(+), 24 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
index ca68e9c289cb..b59ce0d3785c 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
@@ -281,6 +281,38 @@ static irqreturn_t intr_handler(int irq, void *dev_instance)
     return IRQ_HANDLED;
 }
 
+/*
+ * mode: 1 means Progressive;  0 means interlaced
+ */
+static void enc_vpu_bridge_reset(int mode)
+{
+    unsigned int wr_clk = 0;
+
+    printk("%s[%d]\n", __func__, __LINE__);
+    wr_clk = (aml_read_reg32(P_VPU_HDMI_SETTING) & 0xf00) >> 8;
+    if(mode) {
+        aml_write_reg32(P_ENCP_VIDEO_EN, 0);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 0, 2);  // [    0] src_sel_enci: Disable ENCP output to HDMI
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 8, 4);  // [    0] src_sel_enci: Disable ENCP output to HDMI
+        mdelay(1);
+        aml_write_reg32(P_ENCP_VIDEO_EN, 1);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, wr_clk, 8, 4);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 2, 0, 2);  // [    0] src_sel_enci: Enable ENCP output to HDMI
+    } else {
+        aml_write_reg32(P_ENCI_VIDEO_EN, 0);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 0, 2);  // [    0] src_sel_enci: Disable ENCI output to HDMI
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 8, 4);  // [    0] src_sel_enci: Disable ENCP output to HDMI
+        mdelay(1);
+        aml_write_reg32(P_ENCI_VIDEO_EN, 1);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, wr_clk, 8, 4);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 0, 2);  // [    0] src_sel_enci: Enable ENCI output to HDMI
+    }
+}
+
 static void hdmi_tvenc1080i_set(Hdmi_tx_video_para_t* param)
 {
     unsigned long VFIFO2VD_TO_HDMI_LATENCY = 2; // Annie 01Sep2011: Change value from 3 to 2, due to video encoder path delay change.
@@ -424,7 +456,6 @@ static void hdmi_tvenc1080i_set(Hdmi_tx_video_para_t* param)
                          (0                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
     );
     aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 1, 1);  // [    1] src_sel_encp: Enable ENCP output to HDMI
-
 }    
 
 static void hdmi_tvenc4k2k_set(Hdmi_tx_video_para_t* param)
@@ -780,7 +811,6 @@ static void hdmi_tvenc480i_set(Hdmi_tx_video_para_t* param)
         aml_set_reg32_bits(P_VPU_HDMI_SETTING, 3, 12, 4);
     }
     aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 0, 1);  // [    0] src_sel_enci: Enable ENCI output to HDMI
-
 }    
 
 static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
@@ -1066,7 +1096,7 @@ static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
     }
     // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
     aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 1, 1);  // [    1] src_sel_encp: Enable ENCP output to HDMI
-}    
+}
 
 /*
 hdmi on/off
@@ -2020,6 +2050,8 @@ static void hdmitx_set_phy(hdmitx_dev_t* hdmitx_device)
     aml_write_reg32(P_HHI_HDMI_PHY_CNTL1, 2);   \
     msleep(1)
 
+    aml_write_reg32(P_HHI_HDMI_PHY_CNTL1, 0);
+    msleep(1);
     RESET_HDMI_PHY();
     RESET_HDMI_PHY();
     RESET_HDMI_PHY();
@@ -2055,7 +2087,6 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t
     hdmi_hw_reset(hdmitx_device, param);    
 	// move hdmitx_set_pll() to the end of this function.
     // hdmitx_set_pll(param);
-    hdmitx_set_phy(hdmitx_device);
 
     if((param->VIC==HDMI_720p60)||(param->VIC==HDMI_720p50)||
         (param->VIC==HDMI_1080i60)||(param->VIC==HDMI_1080i50)){
@@ -2091,20 +2122,35 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t
 
     // reset TX_SYS5_TX_SOFT_RESET_1/2 twice
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x9f);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0xff);
     mdelay(5);
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x00);
     mdelay(5);
 
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x9f);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0xff);
     mdelay(5);
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x00);
     mdelay(5);
 
 	hdmitx_set_pll(param);
+    switch(param->VIC) {
+    case HDMI_480i60:
+    case HDMI_480i60_16x9:
+    case HDMI_576i50:
+    case HDMI_576i50_16x9:
+    case HDMI_480i60_16x9_rpt:
+    case HDMI_576i50_16x9_rpt:
+        enc_vpu_bridge_reset(0);
+        break;
+    default:
+        enc_vpu_bridge_reset(1);
+        break;
+    }
+
+    hdmitx_set_phy(hdmitx_device);
 
     return 0;
 }
diff --git a/arch/arm/mach-meson8/include/mach/tvregs.h b/arch/arm/mach-meson8/include/mach/tvregs.h
index fd1c4fc4cdd4..25094dc86719 100755
--- a/arch/arm/mach-meson8/include/mach/tvregs.h
+++ b/arch/arm/mach-meson8/include/mach/tvregs.h
@@ -124,6 +124,8 @@ static const reg_t *tvregs_576cvbs_performance_m8m2[] =
 #endif
 
 static const  reg_t tvregs_720p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -191,6 +193,8 @@ static const  reg_t tvregs_720p[] = {
 };
 
 static const  reg_t tvregs_720p_50hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
@@ -278,6 +282,8 @@ static const  reg_t tvregs_720p_50hz[] = {
 };
 
 static const reg_t tvregs_480i[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,            0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -340,6 +346,8 @@ static const reg_t tvregs_480i[] = {
 };
 
 static const reg_t tvregs_480cvbs[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,            0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -406,6 +414,8 @@ static const reg_t tvregs_480cvbs[] = {
 };
 
 static const reg_t tvregs_480p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,       },
     {P_HHI_VID_PLL_CNTL,           0x2001042d,},
@@ -475,6 +485,8 @@ static const reg_t tvregs_480p[] = {
 };
 
 static const reg_t tvregs_576i[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,               0xff,      },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -537,6 +549,8 @@ static const reg_t tvregs_576i[] = {
 };
 
 static const reg_t tvregs_576cvbs[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,               0xff,      },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -603,6 +617,8 @@ static const reg_t tvregs_576cvbs[] = {
 };
 
 static const reg_t tvregs_576p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,      },
     {P_HHI_VID_CLK_CNTL,           0x0,       },
     {P_HHI_VID_PLL_CNTL,           0x2001042d,},
@@ -672,6 +688,8 @@ static const reg_t tvregs_576p[] = {
 };
 
 static const reg_t tvregs_1080i[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 //	{VCLK_HD},
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -737,6 +755,8 @@ static const reg_t tvregs_1080i[] = {
 };
 
 static const reg_t tvregs_1080i_50hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 //	{VCLK_HD},
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -824,6 +844,8 @@ static const reg_t tvregs_1080i_50hz[] = {
 };
 
 static const reg_t tvregs_1080p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -885,6 +907,8 @@ static const reg_t tvregs_1080p[] = {
 };
 
 static const reg_t tvregs_1080p_50hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
@@ -973,6 +997,8 @@ static const reg_t tvregs_1080p_50hz[] = {
 };
 
 static const reg_t tvregs_1080p_24hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
@@ -1061,6 +1087,8 @@ static const reg_t tvregs_1080p_24hz[] = {
 };
 
 static const reg_t tvregs_4k2k_30hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1090,10 +1118,14 @@ static const reg_t tvregs_4k2k_30hz[] = {
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
 static const reg_t tvregs_4k2k_25hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1123,10 +1155,14 @@ static const reg_t tvregs_4k2k_25hz[] = {
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
 static const reg_t tvregs_4k2k_24hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1156,11 +1192,14 @@ static const reg_t tvregs_4k2k_24hz[] = {
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
-
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
 static const reg_t tvregs_4k2k_smpte[] = {      //24hz
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1190,10 +1229,14 @@ static const reg_t tvregs_4k2k_smpte[] = {      //24hz
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
 static const reg_t tvregs_vga_640x480[] = { // 25.17mhz 800 *525
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
      {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,       },
     {P_HHI_VID_PLL_CNTL,           0x2001042d,},
@@ -1266,6 +1309,8 @@ static const reg_t tvregs_vga_640x480[] = { // 25.17mhz 800 *525
 /////////////////////////////////////
 };
 static const reg_t tvregs_svga_800x600[]={ //39.5mhz 1056 *628
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
@@ -1383,6 +1428,8 @@ static const reg_t tvregs_xga_1024x768[] = {
     {P_ENCP_VFIFO2VD_CTL,               0,     },
     {P_VENC_VDAC_SETTING,          0,     },
     */
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
index 873331d2e1dc..43c1b88a9cc8 100755
--- a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
@@ -280,6 +280,38 @@ static irqreturn_t intr_handler(int irq, void *dev_instance)
     return IRQ_HANDLED;
 }
 
+/*
+ * mode: 1 means Progressive;  0 means interlaced
+ */
+static void enc_vpu_bridge_reset(int mode)
+{
+    unsigned int wr_clk = 0;
+
+    printk("%s[%d]\n", __func__, __LINE__);
+    wr_clk = (aml_read_reg32(P_VPU_HDMI_SETTING) & 0xf00) >> 8;
+    if(mode) {
+        aml_write_reg32(P_ENCP_VIDEO_EN, 0);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 0, 2);  // [    0] src_sel_enci: Disable ENCP output to HDMI
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 8, 4);  // [    0] src_sel_enci: Disable ENCP output to HDMI
+        mdelay(1);
+        aml_write_reg32(P_ENCP_VIDEO_EN, 1);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, wr_clk, 8, 4);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 2, 0, 2);  // [    0] src_sel_enci: Enable ENCP output to HDMI
+    } else {
+        aml_write_reg32(P_ENCI_VIDEO_EN, 0);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 0, 2);  // [    0] src_sel_enci: Disable ENCI output to HDMI
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 0, 8, 4);  // [    0] src_sel_enci: Disable ENCP output to HDMI
+        mdelay(1);
+        aml_write_reg32(P_ENCI_VIDEO_EN, 1);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, wr_clk, 8, 4);
+        mdelay(1);
+        aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 0, 2);  // [    0] src_sel_enci: Enable ENCI output to HDMI
+    }
+}
+
 static void hdmi_tvenc1080i_set(Hdmi_tx_video_para_t* param)
 {
     unsigned long VFIFO2VD_TO_HDMI_LATENCY = 2; // Annie 01Sep2011: Change value from 3 to 2, due to video encoder path delay change.
@@ -423,7 +455,6 @@ static void hdmi_tvenc1080i_set(Hdmi_tx_video_para_t* param)
                          (0                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
     );
     aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 1, 1);  // [    1] src_sel_encp: Enable ENCP output to HDMI
-
 }    
 
 static void hdmi_tvenc480i_set(Hdmi_tx_video_para_t* param)
@@ -599,7 +630,6 @@ static void hdmi_tvenc480i_set(Hdmi_tx_video_para_t* param)
                          (1                                 <<12)   // [15:12] rd_rate. 0=A read every clk2; 1=A read every 2 clk2; ...; 15=A read every 16 clk2.
     );
     aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 0, 1);  // [    0] src_sel_enci: Enable ENCI output to HDMI
-
 }    
 
 static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
@@ -872,7 +902,7 @@ static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
 
     // Annie 01Sep2011: Register VENC_DVI_SETTING and VENC_DVI_SETTING_MORE are no long valid, use VPU_HDMI_SETTING instead.
     aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 1, 1);  // [    1] src_sel_encp: Enable ENCP output to HDMI
-}    
+}
 
 /*
 hdmi on/off
@@ -1753,6 +1783,8 @@ static void hdmitx_set_phy(hdmitx_dev_t* hdmitx_device)
     aml_write_reg32(P_HHI_HDMI_PHY_CNTL1, 2);   \
     msleep(1)
 
+    aml_write_reg32(P_HHI_HDMI_PHY_CNTL1, 0);
+    msleep(1);
     RESET_HDMI_PHY();
     RESET_HDMI_PHY();
     RESET_HDMI_PHY();
@@ -1800,8 +1832,6 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t
     hdmitx_device->cur_VIC = param->VIC;
     hdmi_tx_gate_pwr_ctrl(VID_EN, hdmitx_device);
     hdmi_hw_reset(hdmitx_device, param);    
-    hdmitx_set_pll(param);
-    hdmitx_set_phy(hdmitx_device);
 
     if((param->VIC==HDMI_720p60)||(param->VIC==HDMI_720p50)||
         (param->VIC==HDMI_1080i60)||(param->VIC==HDMI_1080i50)){
@@ -1829,19 +1859,36 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdmitx_device, Hdmi_tx_video_para_t
 
     // reset TX_SYS5_TX_SOFT_RESET_1/2 twice
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x9f);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0xff);
     mdelay(5);
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x00);
     mdelay(5);
 
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0xff);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x9f);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0xff);
     mdelay(5);
     hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_1, 0x00);
-    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x60);
+    hdmi_wr_reg(TX_SYS5_TX_SOFT_RESET_2, 0x00);
     mdelay(5);
 
+    hdmitx_set_pll(param);
+    switch(param->VIC) {
+    case HDMI_480i60:
+    case HDMI_480i60_16x9:
+    case HDMI_576i50:
+    case HDMI_576i50_16x9:
+    case HDMI_480i60_16x9_rpt:
+    case HDMI_576i50_16x9_rpt:
+        enc_vpu_bridge_reset(0);
+        break;
+    default:
+        enc_vpu_bridge_reset(1);
+        break;
+    }
+
+    hdmitx_set_phy(hdmitx_device);
+
     return 0;
 }    
 
diff --git a/arch/arm/mach-meson8b/include/mach/tvregs.h b/arch/arm/mach-meson8b/include/mach/tvregs.h
index 16e614726238..f3a9cc9cf53a 100755
--- a/arch/arm/mach-meson8b/include/mach/tvregs.h
+++ b/arch/arm/mach-meson8b/include/mach/tvregs.h
@@ -96,6 +96,8 @@ static const reg_t *tvregs_576cvbs_performance_m8b[] =
 #endif
 
 static const  reg_t tvregs_720p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -163,6 +165,8 @@ static const  reg_t tvregs_720p[] = {
 };
 
 static const  reg_t tvregs_720p_50hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
@@ -250,6 +254,8 @@ static const  reg_t tvregs_720p_50hz[] = {
 };
 
 static const reg_t tvregs_480i[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,            0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -312,6 +318,8 @@ static const reg_t tvregs_480i[] = {
 };
 
 static const reg_t tvregs_480cvbs[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
      {P_VENC_VDAC_SETTING,            0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -378,6 +386,8 @@ static const reg_t tvregs_480cvbs[] = {
 };
 
 static const reg_t tvregs_480p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,       },
     {P_HHI_VID_PLL_CNTL,           0x2001042d,},
@@ -447,6 +457,8 @@ static const reg_t tvregs_480p[] = {
 };
 
 static const reg_t tvregs_576i[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,               0xff,      },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -509,6 +521,8 @@ static const reg_t tvregs_576i[] = {
 };
 
 static const reg_t tvregs_576cvbs[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,               0xff,      },
 
     {P_HHI_VID_CLK_CNTL,           0x0,       },
@@ -575,6 +589,8 @@ static const reg_t tvregs_576cvbs[] = {
 };
 
 static const reg_t tvregs_576p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,      },
     {P_HHI_VID_CLK_CNTL,           0x0,       },
     {P_HHI_VID_PLL_CNTL,           0x2001042d,},
@@ -644,6 +660,8 @@ static const reg_t tvregs_576p[] = {
 };
 
 static const reg_t tvregs_1080i[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 //	{VCLK_HD},
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -709,6 +727,8 @@ static const reg_t tvregs_1080i[] = {
 };
 
 static const reg_t tvregs_1080i_50hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 //	{VCLK_HD},
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -796,6 +816,8 @@ static const reg_t tvregs_1080i_50hz[] = {
 };
 
 static const reg_t tvregs_1080p[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
 
     {P_HHI_VID_CLK_CNTL,           0x0,},
@@ -857,6 +879,8 @@ static const reg_t tvregs_1080p[] = {
 };
 
 static const reg_t tvregs_1080p_50hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
@@ -945,6 +969,8 @@ static const reg_t tvregs_1080p_50hz[] = {
 };
 
 static const reg_t tvregs_1080p_24hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_VENC_VDAC_SETTING,          0xff,  },
     {P_HHI_VID_CLK_CNTL,           0x0,},
     {P_HHI_VID_PLL_CNTL2,          0x814d3928},
@@ -1033,6 +1059,8 @@ static const reg_t tvregs_1080p_24hz[] = {
 };
 
 static const reg_t tvregs_4k2k_30hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1062,10 +1090,14 @@ static const reg_t tvregs_4k2k_30hz[] = {
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
 static const reg_t tvregs_4k2k_25hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1095,10 +1127,14 @@ static const reg_t tvregs_4k2k_25hz[] = {
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
 static const reg_t tvregs_4k2k_24hz[] = {
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1128,11 +1164,14 @@ static const reg_t tvregs_4k2k_24hz[] = {
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
-
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
 static const reg_t tvregs_4k2k_smpte[] = {      //24hz
+    {P_ENCP_VIDEO_EN,              0,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
     {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
     {P_ENCP_VIDEO_YFP1_HTIME,       140},
@@ -1162,6 +1201,8 @@ static const reg_t tvregs_4k2k_smpte[] = {      //24hz
     {P_ENCP_VIDEO_MAX_LNCNT,        2249},
 
     {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
+    {P_ENCP_VIDEO_EN,              1,     },
+    {P_ENCI_VIDEO_EN,              0,     },
     {MREG_END_MARKER,            0      },
 };
 
diff --git a/drivers/amlogic/display/vout/enc_clk_config.c b/drivers/amlogic/display/vout/enc_clk_config.c
index 3251a02b8e52..1b88ce3f0212 100755
--- a/drivers/amlogic/display/vout/enc_clk_config.c
+++ b/drivers/amlogic/display/vout/enc_clk_config.c
@@ -1,5 +1,6 @@
 #include <linux/delay.h>
 #include <linux/kernel.h>
+#include <linux/mutex.h>
 #include <linux/amlogic/vout/vinfo.h>
 #include <mach/register.h>
 #include <mach/am_regs.h>
@@ -582,12 +583,16 @@ static enc_clk_val_t setting_enc_clk_val[] = {
 #endif
 };
 
+static DEFINE_MUTEX(setclk_mutex);
+
 void set_vmode_clk(vmode_t mode)
 {
     enc_clk_val_t *p_enc =NULL;
 
     int i = 0;
-    int j = 0; 
+    int j = 0;
+
+    mutex_lock(&setclk_mutex);
 	if(IS_MESON_M8M2_CPU){
 		p_enc=&setting_enc_clk_val_m8m2[0];
 		i = sizeof(setting_enc_clk_val_m8m2) / sizeof(enc_clk_val_t);
@@ -624,7 +629,7 @@ void set_vmode_clk(vmode_t mode)
         WRITE_CBUS_REG(HHI_VID_PLL_CNTL4, 0x42000101);
     }
 #endif
-    
+    mutex_unlock(&setclk_mutex);
 // For debug only
 #if 0
     printk("hdmi debug tag\n%s\n%s[%d]\n", __FILE__, __FUNCTION__, __LINE__);
diff --git a/drivers/amlogic/display/vout/tvoutc.c b/drivers/amlogic/display/vout/tvoutc.c
index 90dc21b3269d..74460ac7b6c0 100755
--- a/drivers/amlogic/display/vout/tvoutc.c
+++ b/drivers/amlogic/display/vout/tvoutc.c
@@ -25,6 +25,7 @@
 #include <linux/errno.h>
 #include <linux/kernel.h>
 #include <linux/delay.h>
+#include <linux/mutex.h>
 #include <mach/am_regs.h>
 
 #include <linux/amlogic/vout/vinfo.h>
@@ -405,6 +406,8 @@ static void cvbs_performance_enhancement(tvmode_t mode)
 
 #endif// end of CVBS_PERFORMANCE_COMPATIBLITY_SUPPORT
 
+static DEFINE_MUTEX(setmode_mutex);
+
 int tvoutc_setmode(tvmode_t mode)
 {
     const  reg_t *s;
@@ -417,7 +420,7 @@ int tvoutc_setmode(tvmode_t mode)
         printk(KERN_ERR "Invalid video output modes.\n");
         return -ENODEV;
     }
-
+    mutex_lock(&setmode_mutex);
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 //TODO
 //    switch_mod_gate_by_name("venc", 1);
@@ -445,6 +448,7 @@ int tvoutc_setmode(tvmode_t mode)
         uboot_display_flag = 0;
         if(uboot_display_already(mode)) {
             printk("already display in uboot\n");
+            mutex_unlock(&setmode_mutex);
             return 0;
         }
     }
@@ -582,8 +586,7 @@ printk(" clk_util_clk_msr 29 = %d\n", clk_util_clk_msr(29));
     }
 #endif
 //while(1);
-
-
+    mutex_unlock(&setmode_mutex);
     return 0;
 }
 
-- 
2.19.0

