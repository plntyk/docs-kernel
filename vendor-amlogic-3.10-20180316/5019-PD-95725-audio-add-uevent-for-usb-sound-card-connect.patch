From 8b84dc5a27aed3c0d1c2bd07cb459cac48b78fca Mon Sep 17 00:00:00 2001
From: "shuai.li" <shuai.li@amlogic.com>
Date: Fri, 8 Aug 2014 15:56:26 +0800
Subject: [PATCH 5019/5965] PD#95725 audio: add uevent for usb sound card
 connect or remove; add a proc interface for user to retrieve the ID/card pair

Change-Id: I061c69083c0a31f3652b37e0c79815c7496d6c82
---
 sound/usb/card.c | 137 ++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 124 insertions(+), 13 deletions(-)

diff --git a/sound/usb/card.c b/sound/usb/card.c
index b97ed1acdf69..019477607b6a 100755
--- a/sound/usb/card.c
+++ b/sound/usb/card.c
@@ -344,7 +344,7 @@ static int usb_audio_source_info_Insert(u32 usbid, int num)
 {
     int i = 0, j=0;
     struct mutex usb_audio_mutex2;
-    struct usb_audio_source_config *u1 = NULL;
+    struct usb_audio_source_config u1;
     
     mutex_init(&usb_audio_mutex2);
     mutex_lock(&usb_audio_mutex2);
@@ -352,9 +352,9 @@ static int usb_audio_source_info_Insert(u32 usbid, int num)
     {
         if(usbaudioinfo[i].usbid == usbid)
         {
-            u1->usbid = usbid;
-            u1->card = usbaudioinfo[i].card;
-            u1->device = usbaudioinfo[i].device;
+            u1.usbid = usbid;
+            u1.card = usbaudioinfo[i].card;
+            u1.device = usbaudioinfo[i].device;
             for(j = i; j < num; j++)
             {
                 usbaudioinfo[j].card = usbaudioinfo[j+1].card;
@@ -363,13 +363,13 @@ static int usb_audio_source_info_Insert(u32 usbid, int num)
             }
         }
     }
-    usbaudioinfo[num].usbid = u1->usbid;
-    usbaudioinfo[num].card = u1->card;
-    usbaudioinfo[num].device = u1->device;
+    usbaudioinfo[num].usbid = u1.usbid;
+    usbaudioinfo[num].card = u1.card;
+    usbaudioinfo[num].device = u1.device;
     
-    pstr->card = u1->card;
-    pstr->device = u1->device;
-    pstr->usbid = u1->usbid;
+    pstr->card = u1.card;
+    pstr->device = u1.device;
+    pstr->usbid = u1.usbid;
     mutex_unlock(&usb_audio_mutex2);
     return 0;
 }
@@ -467,6 +467,95 @@ static void usb_audio_source_info_write(struct snd_info_entry *entry, struct snd
     
 }
 
+/* list to retrieve the usb id and card number */
+static LIST_HEAD(usb_entry_list);
+static DEFINE_MUTEX(audio_mutex);
+
+struct usb_id_info{
+	struct snd_info_entry *entry;
+	int card_num;
+	int usb_id;
+	struct list_head list;
+};
+
+static void usb_audio_id_card_info_read(struct snd_info_entry *entry, struct snd_info_buffer *buffer)
+{
+	struct usb_id_info *id_info = (struct usb_id_info *)entry->private_data;
+
+	snd_iprintf(buffer, "%d\n", id_info->card_num);
+}
+#define id_size 32
+static int usb_audio_id_card_init(int id, int card)
+{
+	struct snd_info_entry *entry = NULL;
+	struct usb_id_info *id_info = NULL;
+	char id_string[id_size];
+	int err = 0;
+
+	id_info = kzalloc(sizeof(struct usb_id_info), GFP_KERNEL);
+	if (id_info == NULL){
+		err = -ENOMEM;
+		goto err1;
+	}
+
+	snprintf(id_string, 13, "USB-%08x", id);
+	snd_printk("usb_audio_id_card_init, id_string== %s\n", id_string);
+	if((entry = snd_info_create_module_entry(THIS_MODULE, id_string, NULL)) == NULL){
+		err = -ENOMEM;
+		goto err2;
+	}
+
+	entry->private_data = id_info;
+	entry->content = SNDRV_INFO_CONTENT_TEXT;
+	entry->mode = S_IFREG | S_IRUGO;
+	entry->c.text.read = usb_audio_id_card_info_read;
+	if (snd_info_register(entry) < 0) {
+		err = -ENOMEM;
+		goto err3;
+	}
+
+	id_info->entry = entry;
+	id_info->usb_id = id;
+	id_info->card_num = card;
+	mutex_lock(&audio_mutex);
+	list_add(&id_info->list, &usb_entry_list);
+	mutex_unlock(&audio_mutex);
+
+	return 0;
+
+err3:
+	snd_info_free_entry(entry);
+err2:
+	kfree(id_info);
+err1:
+	return err;
+}
+
+static int usb_audio_id_card_deinit(int id)
+{
+	struct usb_id_info *id_info;
+	struct snd_info_entry *entry;
+
+	mutex_lock(&audio_mutex);
+	list_for_each_entry(id_info, &usb_entry_list, list) {
+		snd_printk(KERN_DEBUG "list_for_each_entry at usb_audio_id_card_deinit, usb_id = %x, id =%x\n", id_info->usb_id,id);
+		if (id_info->usb_id == id){
+			entry = id_info->entry;
+			goto found;
+		}
+	}
+	mutex_unlock(&audio_mutex);
+
+	return -EINVAL;
+
+found:
+	list_del(&id_info->list);
+	mutex_unlock(&audio_mutex);
+	snd_info_free_entry(entry);
+	kfree(id_info);
+	id_info = NULL;
+	return 0;
+}
 
 static int usb_audio_source_info_init(struct usb_audio_source_config * pstr)
 {
@@ -567,6 +656,13 @@ static int snd_usb_audio_create(struct usb_device *dev, int idx,
 
 	chip->usb_id = USB_ID(le16_to_cpu(dev->descriptor.idVendor),
 			      le16_to_cpu(dev->descriptor.idProduct));
+
+	err = usb_audio_id_card_init(chip->usb_id, card->number);
+	if (err < 0) {
+		snd_printk(KERN_ERR "cannot create id card instance usb_id=(0x%08x)\n", chip->usb_id);
+		return err;
+	}
+
 	INIT_LIST_HEAD(&chip->pcm_list);
 	INIT_LIST_HEAD(&chip->ep_list);
 	INIT_LIST_HEAD(&chip->midi_list);
@@ -672,11 +768,13 @@ snd_usb_audio_probe(struct usb_device *dev,
 		    const struct usb_device_id *usb_id)
 {
 	const struct snd_usb_audio_quirk *quirk = (const struct snd_usb_audio_quirk *)usb_id->driver_info;
-	int i, err;
+	int i, err, send_env = 0;
 	struct snd_usb_audio *chip;
 	struct usb_host_interface *alts;
 	int ifnum;
 	u32 id;
+	char event_state[32], event_card[32], event_id[32];
+	char *envp[] = {event_state, event_card, event_id, NULL};
 
 	alts = &intf->altsetting[0];
 	ifnum = get_iface_desc(alts)->bInterfaceNumber;
@@ -725,6 +823,7 @@ snd_usb_audio_probe(struct usb_device *dev,
 			printk(KERN_ERR "no available usb audio device\n");
 			goto __error;
 		}
+		send_env = 1;
 	}
 
 	/*
@@ -755,7 +854,12 @@ snd_usb_audio_probe(struct usb_device *dev,
 	if (snd_card_register(chip->card) < 0) {
 		goto __error;
 	}
-
+	if (1 == send_env) {
+		snprintf(event_state, 32, "USB_AUDIO_DEVICE=ADD");
+		snprintf(event_card, 32, "USB_AUDIO_CARD=%01d", chip->card->number);
+		snprintf(event_id, 32, "USB_AUDIO_ID=%08x", chip->usb_id);
+		kobject_uevent_env(&(dev->dev.kobj), KOBJ_ADD, envp);
+	}
 	usb_chip[chip->index] = chip;
 	chip->num_interfaces++;
 	chip->probing = 0;
@@ -782,7 +886,8 @@ static void snd_usb_audio_disconnect(struct usb_device *dev,
 {
 	struct snd_card *card;
 	struct list_head *p, *n;
-
+	char event_state[32], event_card[32], event_id[32];
+	char *envp[] = {event_state, event_card, event_id, NULL};
 	if (chip == (void *)-1L)
 		return;
 
@@ -813,7 +918,13 @@ static void snd_usb_audio_disconnect(struct usb_device *dev,
 		}
 		usb_chip[chip->index] = NULL;
 		mutex_unlock(&register_mutex);
+		snprintf(event_state, 32, "USB_AUDIO_DEVICE=REMOVE");
+		snprintf(event_card, 32, "USB_AUDIO_CARD=%01d", chip->card->number);
+		snprintf(event_id, 32, "USB_AUDIO_ID=%08x", chip->usb_id);
+		kobject_uevent_env(&(dev->dev.kobj), KOBJ_REMOVE, envp);
 		snd_card_free_when_closed(card);
+		if(usb_audio_id_card_deinit(chip->usb_id) < 0)
+			snd_printk(KERN_ERR "failed to deinit the usb audio card id(0x%08x)\n", chip->usb_id);;
 	} else {
 		mutex_unlock(&register_mutex);
 	}
-- 
2.19.0

