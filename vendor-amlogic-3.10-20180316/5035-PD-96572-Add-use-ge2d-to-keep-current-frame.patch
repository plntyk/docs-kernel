From 4edb2c95741da3840bb3f6d300b1b735d4a17a38 Mon Sep 17 00:00:00 2001
From: "jian.wang" <jian.wang@amlogic.com>
Date: Thu, 6 Nov 2014 18:18:21 +0800
Subject: [PATCH 5035/5965] PD #96572 Add use ge2d to keep current frame

Squashed commit of the following:

commit 05decab6fc165f008f7ce8a44314ebdc42b09cc8
Author: jian.wang <jian.wang@amlogic.com>
Date:   Sat Oct 11 07:24:17 2014 -0400

    PD #96572 Add use ge2d to keep current frame

    Change-Id: I6e0a29d5020b086ce1d838086e12e0538ca68f30

commit 4779ed06dd5aa9e9ca97f683437e2ea8f3ebbc93
Author: jian.wang <jian.wang@amlogic.com>
Date:   Sat Oct 11 06:27:07 2014 -0400

    Revert "PD#96572:fix flicker issue for MID when FF"

    This reverts commit a7fb0f347ba472519f780da0f7f82a4c1cb53302.

Change-Id: I01f96a7cd7bd0f4cf5a8261dbf90bf1447282af9
---
 drivers/amlogic/amports/video.c        | 474 +++++++++++++++++++++----
 include/linux/amlogic/amports/canvas.h |   1 +
 2 files changed, 406 insertions(+), 69 deletions(-)

diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 9698bcb0fa22..801551e07217 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -718,79 +718,101 @@ static int ge2d_videotask_release(void)
     return 0;
 }
 
-static int ge2d_canvas_dup(canvas_t *srcy ,canvas_t *srcu,canvas_t *des,
-    int format,u32 srcindex,u32 desindex)
+static int ge2d_store_frame_YUV444(u32 cur_index)
 {
-
+    u32 y_index, des_index,src_index;
+    canvas_t cs, cd;
+    ulong yaddr;
+    u32  ydupindex;
     config_para_ex_t ge2d_config;
-    printk("ge2d_canvas_dup ADDR srcy[0x%lx] srcu[0x%lx] des[0x%lx]\n",srcy->addr,srcu->addr,des->addr);
     memset(&ge2d_config,0,sizeof(config_para_ex_t));
+    
+    ydupindex = DISPLAY_CANVAS_YDUP_INDEX;
+
+    printk("ge2d_store_frame_YUV444 cur_index:s:0x%x \n", cur_index);
+    //printk("ge2d_store_frame cur_index:d:0x%x \n", canvas_tab[0]);
+    y_index = cur_index & 0xff;
+    canvas_read(y_index,&cs);
+    
+    yaddr = keep_phy_addr(keep_y_addr);
+    canvas_config(ydupindex,
+        (ulong)yaddr,
+        cs.width, cs.height,
+        CANVAS_ADDR_NOWRAP, cs.blkmode);
+
+
+    canvas_read(ydupindex,&cd);
+    src_index = y_index;
+    des_index = ydupindex;
+
+    printk("ge2d_canvas_dup ADDR srcy[0x%lx] des[0x%lx]\n",cs.addr, cd.addr);
+   
 
     ge2d_config.alu_const_color= 0;
     ge2d_config.bitmask_en  = 0;
     ge2d_config.src1_gb_alpha = 0;
 
-    ge2d_config.src_planes[0].addr = srcy->addr;
-    ge2d_config.src_planes[0].w = srcy->width;
-    ge2d_config.src_planes[0].h = srcy->height;
+    ge2d_config.src_planes[0].addr = cs.addr;
+    ge2d_config.src_planes[0].w = cs.width;
+    ge2d_config.src_planes[0].h = cs.height;
 
-    ge2d_config.src_planes[1].addr = srcu->addr;
-    ge2d_config.src_planes[1].w = srcu->width;
-    ge2d_config.src_planes[1].h = srcu->height;
 
-    ge2d_config.dst_planes[0].addr = des->addr;
-    ge2d_config.dst_planes[0].w = des->width;
-    ge2d_config.dst_planes[0].h = des->height;
+    ge2d_config.dst_planes[0].addr = cd.addr;
+    ge2d_config.dst_planes[0].w = cd.width;
+    ge2d_config.dst_planes[0].h = cd.height;
 
-    ge2d_config.src_para.canvas_index=srcindex;
+    ge2d_config.src_para.canvas_index = src_index;
     ge2d_config.src_para.mem_type = CANVAS_TYPE_INVALID;
-    ge2d_config.src_para.format = format;
+    ge2d_config.src_para.format = GE2D_FORMAT_M24_YUV444;
     ge2d_config.src_para.fill_color_en = 0;
     ge2d_config.src_para.fill_mode = 0;
     ge2d_config.src_para.color = 0;
     ge2d_config.src_para.top = 0;
     ge2d_config.src_para.left = 0;
-    ge2d_config.src_para.width = srcy->width;
-    ge2d_config.src_para.height = srcy->height;
+    ge2d_config.src_para.width = cs.width;
+    ge2d_config.src_para.height = cs.height;
 
-    ge2d_config.dst_para.canvas_index=desindex;
+    ge2d_config.dst_para.canvas_index = des_index;
     ge2d_config.dst_para.mem_type = CANVAS_TYPE_INVALID;
-    ge2d_config.dst_para.format = format;
+    ge2d_config.dst_para.format = GE2D_FORMAT_M24_YUV444;
     ge2d_config.dst_para.fill_color_en = 0;
     ge2d_config.dst_para.fill_mode = 0;
     ge2d_config.dst_para.color = 0;
     ge2d_config.dst_para.top = 0;
     ge2d_config.dst_para.left = 0;
-    ge2d_config.dst_para.width = srcy->width;
-    ge2d_config.dst_para.height = srcy->height;
+    ge2d_config.dst_para.width = cs.width;
+    ge2d_config.dst_para.height = cs.height;
 
     if(ge2d_context_config_ex(ge2d_video_context,&ge2d_config)<0) {
         printk("ge2d_context_config_ex failed \n");
         return -1;
     }
 
-    stretchblt_noalpha(ge2d_video_context ,0, 0,srcy->width, srcy->height,
-    0, 0,srcy->width,srcy->height);
+    stretchblt_noalpha(ge2d_video_context ,0, 0,cs.width, cs.height,
+    0, 0, cs.width, cs.height);
 
     return 0;
 }
 
-void ge2d_show_frame(ulong yaddr,ulong uaddr)
+//static u32 canvas_tab[1];
+static int ge2d_store_frame_NV21(u32 cur_index)
 {
-    u32 cur_index;
-    u32 y_index, u_index;
-    cur_index = READ_VCBUS_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off);
-    y_index = cur_index & 0xff;
-    u_index = (cur_index >> 8) & 0xff;
-    canvas_update_addr(y_index, (u32)yaddr);
-    canvas_update_addr(u_index, (u32)uaddr);
-}
-int ge2d_store_frame(ulong yaddr,ulong uaddr,u32 ydupindex,u32 udupindex)
-{
-    u32 cur_index;
-    u32 y_index, u_index,des_index,src_index;
-    canvas_t cs0,cs1,cyd;
-    cur_index = READ_VCBUS_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off);
+    u32 y_index, u_index, des_index, src_index;
+    canvas_t cs0, cs1, cd;
+    ulong yaddr, uaddr;
+    u32  ydupindex, udupindex;
+    config_para_ex_t ge2d_config;
+    memset(&ge2d_config,0,sizeof(config_para_ex_t));
+    
+    ydupindex = DISPLAY_CANVAS_YDUP_INDEX;
+    udupindex = DISPLAY_CANVAS_UDUP_INDEX;
+    
+    printk("ge2d_store_frame_NV21 cur_index:s:0x%x \n", cur_index);
+
+    //printk("ge2d_store_frame cur_index:d:0x%x \n", canvas_tab[0]);
+    yaddr = keep_phy_addr(keep_y_addr);
+    uaddr = keep_phy_addr(keep_u_addr);
+
     y_index = cur_index & 0xff;
     u_index = (cur_index >> 8) & 0xff;
 
@@ -805,21 +827,320 @@ int ge2d_store_frame(ulong yaddr,ulong uaddr,u32 ydupindex,u32 udupindex)
         cs1.width, cs1.height,
         CANVAS_ADDR_NOWRAP, cs1.blkmode);
 
-    canvas_read(ydupindex,&cyd);
-
+    canvas_read(ydupindex,&cd);
     src_index = ((y_index&0xff) | (( u_index << 8)& 0x0000ff00 ));
     des_index = ((ydupindex&0xff) | (( udupindex << 8)& 0x0000ff00 ));
-    //printk("ge2d_store_frame src_index=[0x%x] y_index=[0x%x]  u_index=[0x%x] \n",src_index,y_index,u_index);
-    //printk("des_index=[0x%x]  y_index= [0x%x]\n",des_index,udupindex);
+    
+
+    printk("ge2d_store_frame d:0x%x \n", des_index);
+
+    ge2d_config.alu_const_color= 0;
+    ge2d_config.bitmask_en  = 0;
+    ge2d_config.src1_gb_alpha = 0;
+
+    ge2d_config.src_planes[0].addr = cs0.addr;
+    ge2d_config.src_planes[0].w = cs0.width;
+    ge2d_config.src_planes[0].h = cs0.height;
+    ge2d_config.src_planes[1].addr = cs1.addr;
+    ge2d_config.src_planes[1].w = cs1.width;
+    ge2d_config.src_planes[1].h = cs1.height;
+
+    ge2d_config.dst_planes[0].addr = cd.addr;
+    ge2d_config.dst_planes[0].w = cd.width;
+    ge2d_config.dst_planes[0].h = cd.height;
+
+    ge2d_config.src_para.canvas_index = src_index;
+    ge2d_config.src_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.src_para.format = GE2D_FORMAT_M24_NV21;
+    ge2d_config.src_para.fill_color_en = 0;
+    ge2d_config.src_para.fill_mode = 0;
+    ge2d_config.src_para.color = 0;
+    ge2d_config.src_para.top = 0;
+    ge2d_config.src_para.left = 0;
+    ge2d_config.src_para.width = cs0.width;
+    ge2d_config.src_para.height = cs0.height;
+
+    ge2d_config.dst_para.canvas_index = des_index;
+    ge2d_config.dst_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.dst_para.format = GE2D_FORMAT_M24_NV21;
+    ge2d_config.dst_para.fill_color_en = 0;
+    ge2d_config.dst_para.fill_mode = 0;
+    ge2d_config.dst_para.color = 0;
+    ge2d_config.dst_para.top = 0;
+    ge2d_config.dst_para.left = 0;
+    ge2d_config.dst_para.width = cs0.width;
+    ge2d_config.dst_para.height = cs0.height;
+
+    if(ge2d_context_config_ex(ge2d_video_context,&ge2d_config)<0) {
+        printk("ge2d_context_config_ex failed \n");
+        return -1;
+    }
+
+    stretchblt_noalpha(ge2d_video_context ,0, 0,cs0.width, cs0.height,
+    0, 0, cs0.width, cs0.height);
+
+    return 0;
+}
+
+//static u32 canvas_tab[1];
+static int ge2d_store_frame_YUV420(u32 cur_index)
+{
+    u32 y_index, u_index, v_index;
+    canvas_t cs,cd;
+    ulong yaddr, uaddr, vaddr;
+    u32  ydupindex, udupindex, vdupindex;
+    config_para_ex_t ge2d_config;
+    memset(&ge2d_config,0,sizeof(config_para_ex_t));
+
+    ydupindex = DISPLAY_CANVAS_YDUP_INDEX;
+    udupindex = DISPLAY_CANVAS_UDUP_INDEX;
+    vdupindex = DISPLAY_CANVAS_VDUP_INDEX;
+    
+    printk("ge2d_store_frame_YUV420 cur_index:s:0x%x \n", cur_index);
+    /* operation top line*/
+    /* Y data*/
+    ge2d_config.alu_const_color= 0;
+    ge2d_config.bitmask_en  = 0;
+    ge2d_config.src1_gb_alpha = 0;
+    
+    y_index = cur_index & 0xff;
+    canvas_read(y_index,&cs);
+    ge2d_config.src_planes[0].addr = cs.addr;
+    ge2d_config.src_planes[0].w = cs.width;
+    ge2d_config.src_planes[0].h = cs.height;
+    ge2d_config.src_planes[1].addr = 0;
+    ge2d_config.src_planes[1].w = 0;
+    ge2d_config.src_planes[1].h = 0;
+    ge2d_config.src_planes[2].addr = 0;
+    ge2d_config.src_planes[2].w = 0;
+    ge2d_config.src_planes[2].h = 0;
+
+    yaddr = keep_phy_addr(keep_y_addr);
+    canvas_config(ydupindex,
+        (ulong)yaddr,
+        cs.width, cs.height,
+        CANVAS_ADDR_NOWRAP, cs.blkmode);
+    canvas_read(ydupindex,&cd);
+    ge2d_config.dst_planes[0].addr = cd.addr;
+    ge2d_config.dst_planes[0].w = cd.width;
+    ge2d_config.dst_planes[0].h = cd.height;
+    ge2d_config.dst_planes[1].addr = 0;
+    ge2d_config.dst_planes[1].w = 0;
+    ge2d_config.dst_planes[1].h = 0;
+    ge2d_config.dst_planes[2].addr = 0;
+    ge2d_config.dst_planes[2].w = 0;
+    ge2d_config.dst_planes[2].h = 0;
+
+    ge2d_config.src_key.key_enable = 0;
+    ge2d_config.src_key.key_mask = 0;
+    ge2d_config.src_key.key_mode = 0;
+    ge2d_config.src_key.key_color = 0;
+
+    ge2d_config.src_para.canvas_index = y_index;
+    ge2d_config.src_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.src_para.format = GE2D_FMT_S8_Y;
+    ge2d_config.src_para.fill_color_en = 0;
+    ge2d_config.src_para.fill_mode = 0;
+    ge2d_config.src_para.x_rev = 0;
+    ge2d_config.src_para.y_rev = 0;
+    ge2d_config.src_para.color = 0;
+    ge2d_config.src_para.top = 0;
+    ge2d_config.src_para.left = 0;
+    ge2d_config.src_para.width = cs.width;
+    ge2d_config.src_para.height = cs.height;
+
+    ge2d_config.dst_para.canvas_index = ydupindex;
+    ge2d_config.dst_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.dst_para.format = GE2D_FMT_S8_Y;
+    ge2d_config.dst_para.fill_color_en = 0;
+    ge2d_config.dst_para.fill_mode = 0;
+    ge2d_config.dst_para.x_rev = 0;
+    ge2d_config.dst_para.y_rev = 0;
+    ge2d_config.dst_xy_swap=0;
+    ge2d_config.dst_para.color = 0;
+    ge2d_config.dst_para.top = 0;
+    ge2d_config.dst_para.left = 0;
+    ge2d_config.dst_para.width = cs.width;
+    ge2d_config.dst_para.height = cs.height;
+
+    if(ge2d_context_config_ex(ge2d_video_context, &ge2d_config)<0) {
+        printk("++ge2d configing error.\n");
+        return -1;
+    }
+    stretchblt_noalpha(ge2d_video_context, 0, 0, cs.width, cs.height,0,0,cs.width,cs.height);
+
+    /* U data*/
+    ge2d_config.alu_const_color= 0;
+    ge2d_config.bitmask_en  = 0;
+    ge2d_config.src1_gb_alpha = 0;
+    
+    u_index = (cur_index >> 8) & 0xff;
+    canvas_read(u_index,&cs);
+    ge2d_config.src_planes[0].addr = cs.addr;
+    ge2d_config.src_planes[0].w = cs.width;
+    ge2d_config.src_planes[0].h = cs.height;
+    ge2d_config.src_planes[1].addr = 0;
+    ge2d_config.src_planes[1].w = 0;
+    ge2d_config.src_planes[1].h = 0;
+    ge2d_config.src_planes[2].addr = 0;
+    ge2d_config.src_planes[2].w = 0;
+    ge2d_config.src_planes[2].h = 0;
+
+    uaddr = keep_phy_addr(keep_u_addr);
+    canvas_config(udupindex,
+        (ulong)uaddr,
+        cs.width, cs.height,
+        CANVAS_ADDR_NOWRAP, cs.blkmode);
+    canvas_read(udupindex,&cd);
+    ge2d_config.dst_planes[0].addr = cd.addr;
+    ge2d_config.dst_planes[0].w = cd.width;
+    ge2d_config.dst_planes[0].h = cd.height;
+    ge2d_config.dst_planes[1].addr = 0;
+    ge2d_config.dst_planes[1].w = 0;
+    ge2d_config.dst_planes[1].h = 0;
+    ge2d_config.dst_planes[2].addr = 0;
+    ge2d_config.dst_planes[2].w = 0;
+    ge2d_config.dst_planes[2].h = 0;
+
+    ge2d_config.src_key.key_enable = 0;
+    ge2d_config.src_key.key_mask = 0;
+    ge2d_config.src_key.key_mode = 0;
+    ge2d_config.src_key.key_color = 0;
+
+    ge2d_config.src_para.canvas_index = u_index;
+    ge2d_config.src_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.src_para.format = GE2D_FMT_S8_CB;
+    ge2d_config.src_para.fill_color_en = 0;
+    ge2d_config.src_para.fill_mode = 0;
+    ge2d_config.src_para.x_rev = 0;
+    ge2d_config.src_para.y_rev = 0;
+    ge2d_config.src_para.color = 0;
+    ge2d_config.src_para.top = 0;
+    ge2d_config.src_para.left = 0;
+    ge2d_config.src_para.width = cs.width;
+    ge2d_config.src_para.height = cs.height;
 
-    ge2d_canvas_dup(&cs0,&cs1,&cyd,GE2D_FORMAT_M24_NV21,src_index,des_index);
+    ge2d_config.dst_para.canvas_index = udupindex;
+    ge2d_config.dst_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.dst_para.format = GE2D_FMT_S8_CB;
+    ge2d_config.dst_para.fill_color_en = 0;
+    ge2d_config.dst_para.fill_mode = 0;
+    ge2d_config.dst_para.x_rev = 0;
+    ge2d_config.dst_para.y_rev = 0;
+    ge2d_config.dst_xy_swap=0;
+    ge2d_config.dst_para.color = 0;
+    ge2d_config.dst_para.top = 0;
+    ge2d_config.dst_para.left = 0;
+    ge2d_config.dst_para.width = cs.width;
+    ge2d_config.dst_para.height = cs.height;
+
+    if(ge2d_context_config_ex(ge2d_video_context, &ge2d_config)<0) {
+        printk("++ge2d configing error.\n");
+        return -1;
+    }
+    stretchblt_noalpha(ge2d_video_context, 0, 0, cs.width, cs.height,0,0,cs.width,cs.height);
+
+     /* operation top line*/
+    /* V data*/
+    ge2d_config.alu_const_color= 0;
+    ge2d_config.bitmask_en  = 0;
+    ge2d_config.src1_gb_alpha = 0;
+    
+    v_index = (cur_index >> 16) & 0xff;
+    canvas_read(v_index,&cs);
+    ge2d_config.src_planes[0].addr = cs.addr;
+    ge2d_config.src_planes[0].w = cs.width;
+    ge2d_config.src_planes[0].h = cs.height;
+    ge2d_config.src_planes[1].addr = 0;
+    ge2d_config.src_planes[1].w = 0;
+    ge2d_config.src_planes[1].h = 0;
+    ge2d_config.src_planes[2].addr = 0;
+    ge2d_config.src_planes[2].w = 0;
+    ge2d_config.src_planes[2].h = 0;
+
+    vaddr = keep_phy_addr(keep_v_addr);
+    canvas_config(vdupindex,
+        (ulong)vaddr,
+        cs.width, cs.height,
+        CANVAS_ADDR_NOWRAP, cs.blkmode);
+    ge2d_config.dst_planes[0].addr = cd.addr;
+    ge2d_config.dst_planes[0].w = cd.width;
+    ge2d_config.dst_planes[0].h = cd.height;
+    ge2d_config.dst_planes[1].addr = 0;
+    ge2d_config.dst_planes[1].w = 0;
+    ge2d_config.dst_planes[1].h = 0;
+    ge2d_config.dst_planes[2].addr = 0;
+    ge2d_config.dst_planes[2].w = 0;
+    ge2d_config.dst_planes[2].h = 0;
+
+    ge2d_config.src_key.key_enable = 0;
+    ge2d_config.src_key.key_mask = 0;
+    ge2d_config.src_key.key_mode = 0;
+    ge2d_config.src_key.key_color = 0;
+
+    ge2d_config.src_para.canvas_index = v_index;
+    ge2d_config.src_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.src_para.format = GE2D_FMT_S8_CR;
+    ge2d_config.src_para.fill_color_en = 0;
+    ge2d_config.src_para.fill_mode = 0;
+    ge2d_config.src_para.x_rev = 0;
+    ge2d_config.src_para.y_rev = 0;
+    ge2d_config.src_para.color = 0;
+    ge2d_config.src_para.top = 0;
+    ge2d_config.src_para.left = 0;
+    ge2d_config.src_para.width = cs.width;
+    ge2d_config.src_para.height = cs.height;
+
+    ge2d_config.dst_para.canvas_index = vdupindex;
+    ge2d_config.dst_para.mem_type = CANVAS_TYPE_INVALID;
+    ge2d_config.dst_para.format = GE2D_FMT_S8_CR;
+    ge2d_config.dst_para.fill_color_en = 0;
+    ge2d_config.dst_para.fill_mode = 0;
+    ge2d_config.dst_para.x_rev = 0;
+    ge2d_config.dst_para.y_rev = 0;
+    ge2d_config.dst_xy_swap=0;
+    ge2d_config.dst_para.color = 0;
+    ge2d_config.dst_para.top = 0;
+    ge2d_config.dst_para.left = 0;
+    ge2d_config.dst_para.width = cs.width;
+    ge2d_config.dst_para.height = cs.height;
+
+    if(ge2d_context_config_ex(ge2d_video_context, &ge2d_config)<0) {
+        printk("++ge2d configing error.\n");
+        return -1;
+    }
+    stretchblt_noalpha(ge2d_video_context, 0, 0, cs.width, cs.height,0,0,cs.width,cs.height);
     return 0;
 }
-static void ge2d_keeplastframe_block(void)
+
+static void ge2d_keeplastframe_block(int cur_index, int format)
 {
+    //u32 cur_index;
+    u32 y_index, u_index, v_index;
     mutex_lock(&video_module_mutex);
-    ge2d_store_frame(keep_phy_addr(keep_y_addr),keep_phy_addr(keep_u_addr),DISPLAY_CANVAS_YDUP_INDEX,DISPLAY_CANVAS_UDUP_INDEX);
-    ge2d_show_frame(keep_phy_addr(keep_y_addr),keep_phy_addr(keep_u_addr));
+    //cur_index = READ_VCBUS_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off);
+    y_index = cur_index & 0xff;
+    u_index = (cur_index >> 8) & 0xff;
+    v_index = (cur_index >> 16) & 0xff;
+    switch (format) {
+        case GE2D_FORMAT_M24_YUV444:
+            ge2d_store_frame_YUV444(cur_index);
+            canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
+            break;
+        case GE2D_FORMAT_M24_NV21:
+            ge2d_store_frame_NV21(cur_index);
+            canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
+            canvas_update_addr(u_index, keep_phy_addr(keep_u_addr));
+            break;
+        case GE2D_FORMAT_M24_YUV420:
+            ge2d_store_frame_YUV420(cur_index);
+            canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
+            canvas_update_addr(u_index, keep_phy_addr(keep_u_addr));
+            canvas_update_addr(v_index, keep_phy_addr(keep_v_addr));
+            break;
+        default:
+            break;
+    }
     mutex_unlock(&video_module_mutex);
 
 }
@@ -2905,13 +3226,13 @@ static int alloc_keep_buffer(void)
             goto err1;
         }
         printk("alloc_keep_buffer keep_y_addr %x\n",(unsigned int)keep_y_addr);
-
+#ifndef CONFIG_GE2D_KEEP_FRAME
         keep_y_addr_remap = ioremap_nocache(virt_to_phys((u8 *)keep_y_addr), Y_BUFFER_SIZE);
         if (!keep_y_addr_remap) {
                 amlog_mask(LOG_MASK_KEEPBUF, "%s: failed to remap y addr\n", __FUNCTION__);
                 goto err2;
         }
-		
+#endif		
     }
 
     if(!keep_u_addr){
@@ -2921,13 +3242,13 @@ static int alloc_keep_buffer(void)
             goto err3;
         }
         printk("alloc_keep_buffer keep_u_addr %x\n",(unsigned int)keep_u_addr);
-
+#ifndef CONFIG_GE2D_KEEP_FRAME
         keep_u_addr_remap = ioremap_nocache(virt_to_phys((u8 *)keep_u_addr), U_BUFFER_SIZE);
         if (!keep_u_addr_remap) {
             amlog_mask(LOG_MASK_KEEPBUF, "%s: failed to remap u addr\n", __FUNCTION__);
             goto err4;
         }
-	
+#endif		
     }
 
     if(!keep_v_addr){
@@ -2937,38 +3258,38 @@ static int alloc_keep_buffer(void)
             goto err5;
         }
         printk("alloc_keep_buffer keep_v_addr %x\n",(unsigned int)keep_v_addr);
-
+#ifndef CONFIG_GE2D_KEEP_FRAME
         keep_v_addr_remap = ioremap_nocache(virt_to_phys((u8 *)keep_v_addr), U_BUFFER_SIZE);
         if (!keep_v_addr_remap) {
             amlog_mask(LOG_MASK_KEEPBUF, "%s: failed to remap v addr\n", __FUNCTION__);
             goto err6;
         }
-		
+#endif		
     }
     printk("yaddr=%lx,u_addr=%lx,v_addr=%lx\n",keep_y_addr,keep_u_addr,keep_v_addr);
     return 0;
 	
-
+#ifndef CONFIG_GE2D_KEEP_FRAME	
 err6:
-
+#endif
     free_pages(keep_v_addr, get_order(U_BUFFER_SIZE));
     keep_v_addr = 0;
 err5:
     if(keep_u_addr_remap)
         iounmap(keep_u_addr_remap);
     keep_u_addr_remap = NULL;
-	
+#ifndef CONFIG_GE2D_KEEP_FRAME	
 err4:
-
+#endif
     free_pages(keep_u_addr, get_order(U_BUFFER_SIZE));
     keep_u_addr = 0;
 err3:
     if(keep_y_addr_remap)
         iounmap(keep_y_addr_remap);
     keep_y_addr_remap = NULL;
-	
+#ifndef CONFIG_GE2D_KEEP_FRAME		
 err2:
-
+#endif
     free_pages(keep_y_addr, get_order(Y_BUFFER_SIZE));
     keep_y_addr = 0;
 err1:
@@ -3286,12 +3607,18 @@ unsigned int vf_keep_current(void)
     if (0 == (READ_VCBUS_REG(VPP_MISC + cur_dev->vpp_off) & VPP_VD1_POSTBLEND)) {
         return 0;
     }
-
-    if (!keep_y_addr ||!keep_y_addr_remap) {
+#ifdef CONFIG_GE2D_KEEP_FRAME
+   //if (!keep_y_addr || (cur_dispbuf->type & VIDTYPE_VIU_NV21) != VIDTYPE_VIU_NV21) {
+   if (!keep_y_addr || (cur_dispbuf->type & VIDTYPE_VIU_422) == VIDTYPE_VIU_422) {
+    	//no support VIDTYPE_VIU_422...
+    	return -1;
+   }
+#else
+    if (!keep_y_addr_remap) {
         //if (alloc_keep_buffer())
         return -1;
     }
-
+#endif
     cur_index = READ_VCBUS_REG(VD1_IF0_CANVAS0 + cur_dev->viu_off);
     y_index = cur_index & 0xff;
     u_index = (cur_index >> 8) & 0xff;
@@ -3328,6 +3655,9 @@ unsigned int vf_keep_current(void)
             Y_BUFFER_SIZE,U_BUFFER_SIZE, V_BUFFER_SIZE, cd.width,cd.height);
             return -1;
         }
+#ifdef CONFIG_GE2D_KEEP_FRAME
+        ge2d_keeplastframe_block(cur_index, GE2D_FORMAT_M24_YUV444);
+#else
         if (keep_phy_addr(keep_y_addr) != canvas_get_addr(y_index) &&
             canvas_dup(keep_y_addr_remap, canvas_get_addr(y_index), (cd.width)*(cd.height))){
 #ifdef CONFIG_VSYNC_RDMA
@@ -3336,9 +3666,10 @@ unsigned int vf_keep_current(void)
 #else
             canvas_update_addr(y_index, keep_phy_addr(keep_y_addr));
 #endif
-            if(debug_flag& DEBUG_FLAG_BLACKOUT){
-                printk("%s: VIDTYPE_VIU_444\n", __func__);
-            }
+       }
+#endif
+        if(debug_flag& DEBUG_FLAG_BLACKOUT){
+            printk("%s: VIDTYPE_VIU_444\n", __func__);
         }
     } else if((cur_dispbuf->type & VIDTYPE_VIU_NV21) == VIDTYPE_VIU_NV21){
         canvas_read(y_index,&cs0);
@@ -3348,8 +3679,8 @@ unsigned int vf_keep_current(void)
             Y_BUFFER_SIZE,U_BUFFER_SIZE, V_BUFFER_SIZE, cs0.width,cs0.height,cs1.width,cs1.height);
             return -1;
         }
- #ifdef CONFIG_GE2D_KEEP_FRAME
-        ge2d_keeplastframe_block();
+#ifdef CONFIG_GE2D_KEEP_FRAME
+        ge2d_keeplastframe_block(cur_index, GE2D_FORMAT_M24_NV21);
 #else
         if (keep_phy_addr(keep_y_addr) != canvas_get_addr(y_index) &&
             canvas_dup(keep_y_addr_remap, canvas_get_addr(y_index), (cs0.width *cs0.height)) &&
@@ -3379,6 +3710,9 @@ unsigned int vf_keep_current(void)
                 Y_BUFFER_SIZE,U_BUFFER_SIZE, V_BUFFER_SIZE, cs0.width,cs0.height, cs1.width,cs1.height, cs2.width,cs2.height);
             return -1;
         }
+#ifdef CONFIG_GE2D_KEEP_FRAME
+        ge2d_keeplastframe_block(cur_index, GE2D_FORMAT_M24_YUV420);
+#else
         if (keep_phy_addr(keep_y_addr) != canvas_get_addr(y_index) && /*must not the same address*/
             canvas_dup(keep_y_addr_remap, canvas_get_addr(y_index), (cs0.width *cs0.height)) &&
             canvas_dup(keep_u_addr_remap, canvas_get_addr(u_index), (cs1.width *cs1.height)) &&
@@ -3395,10 +3729,12 @@ unsigned int vf_keep_current(void)
             canvas_update_addr(u_index, keep_phy_addr(keep_u_addr));
             canvas_update_addr(v_index, keep_phy_addr(keep_v_addr));
 #endif
-            if(debug_flag& DEBUG_FLAG_BLACKOUT){
-                printk("%s: VIDTYPE_VIU_420\n", __func__);
-            }
         }
+        
+        if(debug_flag& DEBUG_FLAG_BLACKOUT){
+            printk("%s: VIDTYPE_VIU_420\n", __func__);
+        }
+#endif
     }
 
     return 0;
diff --git a/include/linux/amlogic/amports/canvas.h b/include/linux/amlogic/amports/canvas.h
index a97869a18823..78101e7815b7 100755
--- a/include/linux/amlogic/amports/canvas.h
+++ b/include/linux/amlogic/amports/canvas.h
@@ -120,6 +120,7 @@ typedef struct {
 #ifdef CONFIG_GE2D_KEEP_FRAME
 #define DISPLAY_CANVAS_YDUP_INDEX 0x6e
 #define DISPLAY_CANVAS_UDUP_INDEX 0x6f
+#define DISPLAY_CANVAS_VDUP_INDEX 0x6d
 #endif
 
 #define AMVIDEOCAP_CANVAS_INDEX 0x6e
-- 
2.19.0

