From 662e26e07964881f0b4f7e8eea6423a9aec9a00c Mon Sep 17 00:00:00 2001
From: "alex.cao" <alex.cao@droid01-sz.amlogic.com>
Date: Mon, 10 Nov 2014 15:16:16 +0800
Subject: [PATCH 5037/5965] PD#98258: Fix show blurred screen when freescale
 disable back to freescale enable in 480p 576p for 4.4 MX

Squashed commit of the following:

commit 335dd9c71410ccf7bc8890c5d316b05ade03dd24
Author: alex.cao <alex.cao@droid01-sz.amlogic.com>
Date:   Fri Oct 17 15:43:27 2014 +0800

    pd #98258: Set Osd src as scale_axis when 2x scale is enable

    Change-Id: I4b23ad29115437080dd420f0c74d1a848d4ca230

commit 033264150b33dc7561c244711d0b8558c04d279b
Author: alex.cao <alex.cao@droid01-sz.amlogic.com>
Date:   Thu Oct 16 16:36:12 2014 +0800

    pd #98258: Fix show blurred screen when freescale disable back to freescale enable in 480p 576p for 4.4 MX

    Change-Id: I232e59af2800a292fad3a32feed159ac72672db4

Change-Id: I4fee5cbf62e9ffb1aa6a4a8ba757bdb2817e29d0
---
 drivers/amlogic/display/osd/osd_dev.c  | 10 +++++
 drivers/amlogic/display/osd/osd_hw.c   | 60 +++++++++++++++++++++++++-
 drivers/amlogic/display/osd/osd_main.c | 20 +++++++++
 include/linux/amlogic/osd/osd_dev.h    |  2 +
 include/linux/amlogic/osd/osd_hw.h     |  2 +
 5 files changed, 93 insertions(+), 1 deletion(-)

diff --git a/drivers/amlogic/display/osd/osd_dev.c b/drivers/amlogic/display/osd/osd_dev.c
index 89e727638314..93165b5b0e77 100755
--- a/drivers/amlogic/display/osd/osd_dev.c
+++ b/drivers/amlogic/display/osd/osd_dev.c
@@ -266,6 +266,16 @@ void osddev_set_osd_antiflicker(u32 index, u32 vmode, u32 yres)
         osd_set_osd_antiflicker_hw(index, vmode, yres);
 }
 
+void osddev_get_update_state(u32 index, u32 *up_free)
+{
+        osd_get_osd_updatestate_hw(index, up_free);
+}
+
+void osddev_set_update_state(u32 index, u32 up_free)
+{
+        osd_set_osd_updatestate_hw(index, up_free);
+}
+
 void osddev_get_osd_angle(u32 index, u32 *angle)
 {
         osd_get_osd_angle_hw(index, angle);
diff --git a/drivers/amlogic/display/osd/osd_hw.c b/drivers/amlogic/display/osd/osd_hw.c
index 709e714cdc6f..64c72954930b 100755
--- a/drivers/amlogic/display/osd/osd_hw.c
+++ b/drivers/amlogic/display/osd/osd_hw.c
@@ -1566,6 +1566,25 @@ void osd_get_osd_antiflicker_hw(u32 index, u32 *on_off)
 	*on_off = osd_hw.antiflicker_mode;
 }
 
+void osd_get_osd_updatestate_hw(u32 index,u32 *up_free)
+{
+  if (osd_vf_need_update){
+    *up_free = 1;
+  }else{
+    *up_free = 0;
+  }
+}
+
+void osd_set_osd_updatestate_hw(u32 index, u32 up_free)
+{
+  if (up_free > 0){
+    osd_vf_need_update = true;
+  }else{
+    osd_vf_need_update = false;
+  }
+}
+
+
 void osd_clone_pan(u32 index, u32 yoffset, int debug_flag)
 {
 	s32 offset = 0;
@@ -2702,6 +2721,7 @@ static void osd1_update_disp_geometry(void)
 		data32 |= (osd_hw.block_mode[OSD1] & HW_OSD_BLOCK_ENABLE_MASK);
 		VSYNCOSD_WR_MPEG_REG(VIU_OSD1_CTRL_STAT, data32);
 	} else {
+#if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8)
 		data32 = (osd_hw.dispdata[OSD1].x_start& 0xfff) |(osd_hw.dispdata[OSD1].x_end & 0xfff) <<16 ;
 		VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W3 , data32);
 		if (osd_hw.scan_mode == SCAN_MODE_INTERLACE) {
@@ -2710,7 +2730,34 @@ static void osd1_update_disp_geometry(void)
 			data32 = (osd_hw.dispdata[OSD1].y_start & 0xfff) | (osd_hw.dispdata[OSD1].y_end & 0xfff) <<16 ;
 		}
 		VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W4, data32);
-
+#else
+    if(osd_hw.free_scale_mode[OSD1] == 0){
+      if (osd_hw.free_scale_enable[OSD1] == 1){
+        data32 = (osd_hw.free_scale_data[OSD1].x_start& 0xfff) | (osd_hw.free_scale_data[OSD1].x_end & 0xfff) <<16 ;
+        VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W3 , data32);
+        data32 = (osd_hw.free_scale_data[OSD1].y_start & 0xfff) | (osd_hw.free_scale_data[OSD1].y_end & 0xfff) <<16 ;
+        VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W4, data32);
+      }else{
+        data32 = (osd_hw.dispdata[OSD1].x_start& 0xfff) | (osd_hw.dispdata[OSD1].x_end & 0xfff) <<16 ;
+        VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W3 , data32);
+        if (osd_hw.scan_mode == SCAN_MODE_INTERLACE) {
+          data32 = ((osd_hw.dispdata[OSD1].y_start >> 1) & 0xfff) | ((((osd_hw.dispdata[OSD1].y_end+1) >> 1) - 1) & 0xfff) << 16 ;
+        } else {
+          data32 = (osd_hw.dispdata[OSD1].y_start & 0xfff) | (osd_hw.dispdata[OSD1].y_end & 0xfff) <<16 ;
+        }
+        VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W4, data32);
+      }
+    }else{
+      data32 = (osd_hw.dispdata[OSD1].x_start& 0xfff) | (osd_hw.dispdata[OSD1].x_end & 0xfff) <<16 ;
+      VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W3 , data32);
+      if (osd_hw.scan_mode == SCAN_MODE_INTERLACE) {
+        data32 = ((osd_hw.dispdata[OSD1].y_start >> 1) & 0xfff) | ((((osd_hw.dispdata[OSD1].y_end+1) >> 1) - 1) & 0xfff) << 16 ;
+      } else {
+        data32 = (osd_hw.dispdata[OSD1].y_start & 0xfff) | (osd_hw.dispdata[OSD1].y_end & 0xfff) <<16 ;
+      }
+      VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W4, data32);
+ 		}
+#endif    
 		/* enable osd 2x scale */
 		if (osd_hw.scale[OSD1].h_enable || osd_hw.scale[OSD1].v_enable) {
 			data32 = (osd_hw.scaledata[OSD1].x_start & 0x1fff) |(osd_hw.scaledata[OSD1].x_end & 0x1fff) << 16;
@@ -2723,10 +2770,21 @@ static void osd1_update_disp_geometry(void)
 				data32 = (osd_hw.dispdata[OSD1].x_start & 0xfff)
 					| ((osd_hw.dispdata[OSD1].x_start + (osd_hw.scaledata[OSD1].x_end - osd_hw.scaledata[OSD1].x_start) * 2 + 1 ) & 0xfff) << 16 ;
 				VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W3 , data32);
+				if (osd_hw.scan_mode == SCAN_MODE_INTERLACE) {
+					data32 = ((osd_hw.dispdata[OSD1].y_start >> 1) & 0xfff)
+						| (((((osd_hw.dispdata[OSD1].y_start + (osd_hw.scaledata[OSD1].y_end - osd_hw.scaledata[OSD1].y_start) * 2) + 1) >> 1) - 1) & 0xfff) << 16 ;
+				} else {
+					data32 = (osd_hw.dispdata[OSD1].y_start & 0xfff)
+						| (((osd_hw.dispdata[OSD1].y_start  + (osd_hw.scaledata[OSD1].y_end - osd_hw.scaledata[OSD1].y_start) * 2)) & 0xfff) << 16 ;
+				}
+				VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W4, data32);
 			}
 
 			/* adjust display y-axis */
 			if (osd_hw.scale[OSD1].v_enable) {
+				data32 = (osd_hw.dispdata[OSD1].x_start & 0xfff)
+					| ((osd_hw.dispdata[OSD1].x_start + (osd_hw.scaledata[OSD1].x_end - osd_hw.scaledata[OSD1].x_start) * 2 + 1 ) & 0xfff) << 16 ;
+				VSYNCOSD_WR_MPEG_REG(VIU_OSD1_BLK0_CFG_W3 , data32);
 				if (osd_hw.scan_mode == SCAN_MODE_INTERLACE) {
 					data32 = ((osd_hw.dispdata[OSD1].y_start >> 1) & 0xfff)
 						| (((((osd_hw.dispdata[OSD1].y_start + (osd_hw.scaledata[OSD1].y_end - osd_hw.scaledata[OSD1].y_start) * 2) + 1) >> 1) - 1) & 0xfff) << 16 ;
diff --git a/drivers/amlogic/display/osd/osd_main.c b/drivers/amlogic/display/osd/osd_main.c
index 24f1280583d3..ca0126f16452 100755
--- a/drivers/amlogic/display/osd/osd_main.c
+++ b/drivers/amlogic/display/osd/osd_main.c
@@ -1330,6 +1330,25 @@ static ssize_t store_antiflicker(struct device *device, struct device_attribute
 	return count;
 }
 
+ static ssize_t show_update_freescale(struct device *device, struct device_attribute *attr,
+     char *buf)
+{
+  struct fb_info *fb_info = dev_get_drvdata(device);
+  unsigned int update_state = 0;
+  osddev_get_update_state(fb_info->node, &update_state);
+  return snprintf(buf, PAGE_SIZE, "update_state:[%s]\n", update_state?"TRUE":"FALSE");
+}
+
+static ssize_t store_update_freescale(struct device *device, struct device_attribute *attr,
+  const char *buf, size_t count)
+{
+  struct fb_info *fb_info = dev_get_drvdata(device);
+  unsigned int update_state = 0;
+  update_state = simple_strtoul(buf, NULL, 0);
+  osddev_set_update_state(fb_info->node, update_state);
+  return count;
+}
+
 static ssize_t show_ver_angle(struct device *device, struct device_attribute *attr,
                         char *buf)
 {
@@ -1520,6 +1539,7 @@ static struct device_attribute osd_attrs[] = {
 	__ATTR(osd_reverse, S_IRUGO|S_IWUSR, show_osd_reverse, store_osd_reverse),
 	__ATTR(prot_state, S_IRUGO|S_IWUSR, show_prot_state, NULL),
 	__ATTR(osd_antiflicker, S_IRUGO|S_IWUSR, show_antiflicker, store_antiflicker),
+	__ATTR(update_freescale, S_IRUGO|S_IWUSR, show_update_freescale, store_update_freescale),
 	__ATTR(ver_angle, S_IRUGO|S_IWUSR, show_ver_angle, store_ver_angle),
 	__ATTR(ver_clone, S_IRUGO|S_IWUSR, show_ver_clone, store_ver_clone),
 	__ATTR(ver_update_pan, S_IRUGO|S_IWUSR, NULL, store_ver_update_pan),
diff --git a/include/linux/amlogic/osd/osd_dev.h b/include/linux/amlogic/osd/osd_dev.h
index 1252bac5a0d0..b26f4a438f92 100755
--- a/include/linux/amlogic/osd/osd_dev.h
+++ b/include/linux/amlogic/osd/osd_dev.h
@@ -111,6 +111,8 @@ extern void osddev_set_osd_clone(u32 index, u32 clone);
 extern void osddev_set_osd_update_pan(u32 index);
 extern void osddev_get_osd_rotate_angle(u32 index, u32 *angle);
 extern void osddev_set_osd_rotate_angle(u32 index, u32 angle);
+extern void osddev_get_update_state(u32 index, u32 *up_free);
+extern void osddev_set_update_state(u32 index, u32 up_free);
 extern void osddev_get_prot_canvas(u32 index, s32 *x_start, s32 *y_start, s32 *x_end, s32 *y_end);
 extern void osddev_set_prot_canvas(u32 index, s32 x_start, s32 y_start, s32 x_end, s32 y_end);
 extern void osddev_set(struct myfb_dev *fbdev);
diff --git a/include/linux/amlogic/osd/osd_hw.h b/include/linux/amlogic/osd/osd_hw.h
index f030fc82014d..e206c167731a 100755
--- a/include/linux/amlogic/osd/osd_hw.h
+++ b/include/linux/amlogic/osd/osd_hw.h
@@ -221,6 +221,8 @@ extern void osd_set_osd_rotate_on_hw(u32 index, u32 on_off);
 extern void osd_get_osd_rotate_on_hw(u32 index, u32 *on_off);
 extern void osd_set_osd_antiflicker_hw(u32 index, u32 vmode, u32 yres);
 extern void osd_get_osd_antiflicker_hw(u32 index, u32 *on_off);
+extern void osd_set_osd_updatestate_hw(u32 index, u32 up_free);
+extern void osd_get_osd_updatestate_hw(u32 index,u32 *up_free);
 extern void osd_get_osd_angle_hw(u32 index, u32 *angle);
 extern void osd_set_osd_angle_hw(u32 index, u32 angle, u32  virtual_osd1_yres, u32 virtual_osd2_yres);
 extern void osd_get_osd_clone_hw(u32 index, u32 *clone);
-- 
2.19.0

