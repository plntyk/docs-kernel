From 1e30b4645bdd8f78fb5905e34a64c26bdd8d3e9a Mon Sep 17 00:00:00 2001
From: "bo.yang" <bo.yang@amlogic.com>
Date: Wed, 19 Nov 2014 15:25:12 +0800
Subject: [PATCH 5069/5965] g9tv: initial g9tv bringup

---
 arch/arm/boot/dts/amlogic/mesong9tv_n300.dtd  |  1524 ++
 arch/arm/boot/dts/amlogic/mesong9tv_pxp.dtd   |  1309 ++
 arch/arm/boot/dts/amlogic/mesong9tv_skt.dtd   |  1524 ++
 arch/arm/configs/mesong9tv_defconfig          |   253 +
 arch/arm/mach-mesong9tv/Makefile              |     9 +-
 arch/arm/mach-mesong9tv/Makefile.boot         |     4 +
 .../mach-mesong9tv/board-mesong9tv-common.c   |   155 +
 arch/arm/mach-mesong9tv/cache.c               |    39 +
 arch/arm/mach-mesong9tv/clock.c               |  1812 ++
 arch/arm/mach-mesong9tv/cpu.c                 |    67 +
 arch/arm/mach-mesong9tv/gpio.c                |   653 +
 arch/arm/mach-mesong9tv/headsmp.S             |    35 +
 arch/arm/mach-mesong9tv/hotplug-asm.S         |    73 +
 arch/arm/mach-mesong9tv/hotplug.c             |    60 +
 .../mach-mesong9tv/include/mach/am_eth_reg.h  |   198 +
 .../arm/mach-mesong9tv/include/mach/am_regs.h |    29 +
 arch/arm/mach-mesong9tv/include/mach/audio.h  |    90 +
 .../include/mach/avosstyle_io.h               |   114 +
 .../include/mach/c_stb_define.h               |   815 +
 arch/arm/mach-mesong9tv/include/mach/canvas.h |    63 +
 arch/arm/mach-mesong9tv/include/mach/clock.h  |   157 +
 arch/arm/mach-mesong9tv/include/mach/common.h |    58 +
 arch/arm/mach-mesong9tv/include/mach/cpu.h    |    44 +
 .../include/mach/cpufreq_table.h              |    23 +
 .../mach-mesong9tv/include/mach/debug-macro.S |    46 +
 arch/arm/mach-mesong9tv/include/mach/efuse.h  |     9 +
 arch/arm/mach-mesong9tv/include/mach/gpio.h   |   196 +
 .../mach-mesong9tv/include/mach/hardware.h    |     5 +
 arch/arm/mach-mesong9tv/include/mach/io.h     |   174 +
 arch/arm/mach-mesong9tv/include/mach/irqs.h   |   176 +
 .../arm/mach-mesong9tv/include/mach/lcdoutc.h |    13 +
 arch/arm/mach-mesong9tv/include/mach/memory.h |    26 +
 .../mach-mesong9tv/include/mach/mod_gate.h    |    70 +
 arch/arm/mach-mesong9tv/include/mach/pinmux.h |    76 +
 arch/arm/mach-mesong9tv/include/mach/pm.h     |    32 +
 .../mach-mesong9tv/include/mach/power_gate.h  |   947 +
 .../mach-mesong9tv/include/mach/register.h    | 14867 ++++++++++++++++
 arch/arm/mach-mesong9tv/include/mach/sd.h     |   704 +
 arch/arm/mach-mesong9tv/include/mach/smp.h    |    19 +
 arch/arm/mach-mesong9tv/include/mach/system.h |    45 +
 .../arm/mach-mesong9tv/include/mach/thermal.h |     7 +
 arch/arm/mach-mesong9tv/include/mach/timex.h  |    25 +
 arch/arm/mach-mesong9tv/include/mach/tvregs.h |  1192 ++
 arch/arm/mach-mesong9tv/include/mach/uart.h   |    39 +
 .../mach-mesong9tv/include/mach/uncompress.h  |    56 +
 .../mach-mesong9tv/include/mach/usbclock.h    |   216 +
 arch/arm/mach-mesong9tv/include/mach/vpp.h    |    77 +
 arch/arm/mach-mesong9tv/include/mach/vpu.h    |    47 +
 .../mach-mesong9tv/include/mach/watchdog.h    |    32 +
 arch/arm/mach-mesong9tv/iomapping.c           |   123 +
 arch/arm/mach-mesong9tv/pinctrl.c             |   476 +
 arch/arm/mach-mesong9tv/pm.c                  |   450 +
 arch/arm/mach-mesong9tv/power_gate.c          |   690 +
 arch/arm/mach-mesong9tv/power_suspend.c       |   131 +
 arch/arm/mach-mesong9tv/smp.c                 |   299 +
 arch/arm/mach-mesong9tv/thermal.c             |    74 +
 arch/arm/mach-mesong9tv/time.c                |   595 +
 arch/arm/mach-mesong9tv/vpu.c                 |   932 +
 scripts/amlogic/mk_g9tv.sh                    |    17 +
 scripts/amlogic/mk_g9tv_skt.sh                |    17 +
 60 files changed, 32006 insertions(+), 2 deletions(-)
 create mode 100644 arch/arm/boot/dts/amlogic/mesong9tv_n300.dtd
 create mode 100644 arch/arm/boot/dts/amlogic/mesong9tv_pxp.dtd
 create mode 100644 arch/arm/boot/dts/amlogic/mesong9tv_skt.dtd
 create mode 100644 arch/arm/configs/mesong9tv_defconfig
 create mode 100644 arch/arm/mach-mesong9tv/Makefile.boot
 create mode 100644 arch/arm/mach-mesong9tv/board-mesong9tv-common.c
 create mode 100644 arch/arm/mach-mesong9tv/cache.c
 create mode 100644 arch/arm/mach-mesong9tv/clock.c
 create mode 100644 arch/arm/mach-mesong9tv/cpu.c
 create mode 100644 arch/arm/mach-mesong9tv/gpio.c
 create mode 100644 arch/arm/mach-mesong9tv/headsmp.S
 create mode 100644 arch/arm/mach-mesong9tv/hotplug-asm.S
 create mode 100644 arch/arm/mach-mesong9tv/hotplug.c
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/am_eth_reg.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/am_regs.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/audio.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/avosstyle_io.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/c_stb_define.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/canvas.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/clock.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/common.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/cpu.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/cpufreq_table.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/debug-macro.S
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/efuse.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/gpio.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/hardware.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/io.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/irqs.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/lcdoutc.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/memory.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/mod_gate.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/pinmux.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/pm.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/power_gate.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/register.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/sd.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/smp.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/system.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/thermal.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/timex.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/tvregs.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/uart.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/uncompress.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/usbclock.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/vpp.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/vpu.h
 create mode 100644 arch/arm/mach-mesong9tv/include/mach/watchdog.h
 create mode 100644 arch/arm/mach-mesong9tv/iomapping.c
 create mode 100644 arch/arm/mach-mesong9tv/pinctrl.c
 create mode 100755 arch/arm/mach-mesong9tv/pm.c
 create mode 100644 arch/arm/mach-mesong9tv/power_gate.c
 create mode 100644 arch/arm/mach-mesong9tv/power_suspend.c
 create mode 100644 arch/arm/mach-mesong9tv/smp.c
 create mode 100644 arch/arm/mach-mesong9tv/thermal.c
 create mode 100644 arch/arm/mach-mesong9tv/time.c
 create mode 100644 arch/arm/mach-mesong9tv/vpu.c
 create mode 100644 scripts/amlogic/mk_g9tv.sh
 create mode 100644 scripts/amlogic/mk_g9tv_skt.sh

diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_n300.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_n300.dtd
new file mode 100644
index 000000000000..7ff8eccd7875
--- /dev/null
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_n300.dtd
@@ -0,0 +1,1524 @@
+/dts-v1/;
+/{
+	compatible = "AMLOGIC,T866_G9TV";
+	model = "AMLOGIC";
+	interrupt-parent = <&gic>;
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+
+
+/// ****************************************************************************
+///	-	CPU
+//$$ MODULE="CPU"
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		//$$ DEVICE="cpu0"
+		cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x200>;
+		};
+
+		//$$ DEVICE="cpu1"
+		cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x1>;
+		};
+
+		//$$ DEVICE="cpu2"
+		cpu@2 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x2>;
+		};
+
+		//$$ DEVICE="cpu3"
+		cpu@3 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x3>;
+		};
+	};
+
+
+
+/// ****************************************************************************
+///	-	Cache
+//$$ MODULE="Cache"
+//$$ DEVICE="cache"
+	cache-controller {
+		compatible = "arm,meson-pl310-cache";
+		reg = <0xc4200000 0x1000>;
+		arm,data-latency = <3 3 3>;
+		arm,tag-latency = <2 2 2>;
+		cache-unified;
+		cache-level = <2>;
+		aux-instruction_prefetch;
+		aux-data_prefetch;
+		aux-ns_lockdown;
+		aux-force_no_write_alloc;
+		aux-cache_replace_policy_round_robin;
+		aux-early_write_response;
+		aux-full_line_of_zero;
+		aux-ns_int_ctrl;
+		aux-share_override;
+		prefetch-double_line_fill;
+		prefetch-prefetch_drop;
+		prefetch-prefetch_offset = <7>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	Memory
+//$$ MODULE="Memory"
+//$$ DEVICE="memory"
+//$$ L2 PROP_U32 = "aml_reserved_start"
+//$$ L2 PROP_U32 = "aml_reserved_end"
+//$$ L2 PROP_U32 6 = "linux,usable-memory"
+	memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		device_type = "memory";
+		aml_reserved_start = <0x06000000>; /**reserved memory start */
+		aml_reserved_end = <0x05000000>; /** reserved memory end : dtb start for uboot */
+		phys_offset = <0x00000000>;
+		linux,total-memory = <0x7fe00000>; /* 1G:0x40000000  2G:0x7fe00000 */
+
+		//$$ DEVICE="mem_4k2k_decoder"
+		//$$ L3 PROP_U32 2 ="reg"
+		mem_4k2k_decoder: region@1 {
+			region_name = "cma_4k2k";
+			linux,contiguous-region;
+			reg = <0x00000000 0x0c000000>;
+		};
+
+		cma_0:region@0 {
+			region_name = "cma_0";
+			reg = <0 0x00f00000>;
+			linux,contiguous-region;
+		};
+	};
+
+
+
+/// ****************************************************************************
+///	-	GIC
+//$$ MODULE="GIC"
+//$$ DEVICE="gic"
+	gic:interrupt-controller {
+		compatible = "arm,cortex-a9-gic";
+		reg = <0xc4301000 0x1000
+		       0xc4300100 0x0100>;
+		interrupt-controller;
+		#interrupt-cells = <3>;
+		#address-cells = <0>;
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	UART
+//$$ MODULE="UART"
+//$$ DEVICE="uart_ao"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_STR = "pinctrl-names"
+//$$ L3 PROP_CHOICE "uart_ao_pin_match" = "pinctrl-0"
+	uart_ao {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_ao";
+		status = "okay";
+		dev_name = "uart_ao";
+		pinctrl-names = "default";
+		pinctrl-0 = <&ao_uart_pins>;
+	};
+
+	//$$ DEVICE="uart_0"
+	//$$ L2 PROP_STR = "status"
+	uart_0 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_a";
+		status = "okay";
+		dev_name = "uart_0";
+		//pinctrl-names = "default";
+		//pinctrl-0 = <&a_uart_pins>;
+	};
+
+	//$$ DEVICE="uart_1"
+	//$$ L2 PROP_STR = "status"
+	uart_1 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_b";
+		status = "disabled";
+		dev_name = "uart_1";
+	};
+
+	//$$ DEVICE="uart_2"
+	//$$ L2 PROP_STR = "status"
+	uart_2 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_c";
+		status = "disabled";
+		dev_name = "uart_2";
+	};
+
+	//$$ DEVICE="uart_3"
+	//$$ L2 PROP_STR = "status"
+	uart_3 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_d";
+		status = "ok";
+		dev_name = "uart_3";
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	Input
+//$$ DEVICE="saradc"
+//$$ L2 PROP_STR = "status"
+	saradc {
+		compatible = "amlogic,saradc";
+		status = "okay";
+	};
+
+//$$ DEVICE="adc_keypad"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_STR = "key_name"
+//$$ L2 PROP_U32 = "key_num"
+//$$ L2 PROP_U32 2 = "key_code"
+//$$ L2 PROP_U32 2 = "key_chan"
+//$$ L2 PROP_U32 2 = "key_val"
+//$$ L2 PROP_U32 2 = "key_tolerance"
+	adc_keypad {
+		compatible = "amlogic,adc_keypad";
+		status = "okay";
+		key_name = "enter", "left","right";
+		key_num = <3>;
+		key_code = <28 105 106>;
+		key_chan = <0 0 0>;
+		key_val = <0 460 900>;
+		key_tolerance = <40 40 40>;
+	};
+
+
+
+
+/// ****************************************************************************
+//$$ DEVICE="meson-remote"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_U32 = "ao_baseaddr"
+//$$ L2 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "remote_pin_0_match" = "pinctrl-0"
+	meson-remote{
+		compatible = "amlogic,aml_remote";
+		dev_name = "meson-remote";
+		status = "ok";
+		ao_baseaddr = <0xf3100480>;
+		pinctrl-names="default";
+		pinctrl-0=<&remote_pins>;
+	};
+
+
+
+
+/// ****************************************************************************
+//$$ DEVICE="meson-eth"
+//$$ L2 PROP_STR = "status"
+	meson-eth {
+		compatible = "amlogic,meson-eth";
+		dev_name = "meson-eth";
+		status = "okay";
+		ethbaseaddr = <0xfe0c0000>;
+		interruptnum = <40>;
+		new_maclogic = <1>;
+		used_pmu4_phy = <1>;
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	HDMI
+//$$ MODULE="HDMI"
+//$$ DEVICE="amhdmitx"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_CHOICE "HDMI_vend-data_match" = "vend-data"
+//$$ L2 PROP_CHOICE "HDMI_pwr-ctrl_match" = "pwr-ctrl"
+	amhdmitx {
+		compatible = "amlogic,amhdmitx";
+		dev_name = "amhdmitx";
+		status = "ok";
+		vend-data = <&vend_data>;
+		pwr-ctrl = <&pwr_ctrl>;
+
+		//$$ MATCH "HDMI_vend-data_match" = <&vend_data>
+		//$$ L2 PROP_STR = "vendor_name"
+		//$$ L2 PROP_U32 = "vendor_id"
+		//$$ L2 PROP_STR = "product_desc"
+		//$$ L2 PROP_STR = "cec_osd_string"
+		vend_data: vend_data {
+			vendor_name = "Amlogic";	/* Max Chars: 8 */
+			vendor_id = <0x000000>;		/* Refer to http://standards.ieee.org/develop/regauth/oui/oui.txt   */
+			product_desc = "G9TV MBox";	/* Max Chars: 16    */
+			cec_osd_string = "Amlogic MBox";	/* Max Chars: 14 */
+		};
+
+		//$$ MATCH "HDMI_pwr-ctrl_match" = <&pwr_ctrl>
+		//$$ L2 PROP_STR = "pwr_5v_on"
+		//$$ L2 PROP_STR = "pwr_5v_off"
+		//$$ L2 PROP_STR = "pwr_3v3_on"
+		//$$ L2 PROP_STR = "pwr_3v3_off"
+		//$$ L2 PROP_STR = "pwr_hpll_vdd_on"
+		//$$ L2 PROP_STR = "pwr_hpll_vdd_off"
+		pwr_ctrl: pwr_ctrl{
+			pwr_5v_on = "";
+			pwr_5v_off = "";
+			pwr_3v3_on = "";
+			pwr_3v3_off = "";
+			pwr_hpll_vdd_on = "";
+			pwr_hpll_vdd_off = "";
+		};
+	};
+
+
+/// ****************************************************************************
+///	-	Cpufreq
+//$$ MODULE="Cpufreq"
+//$$ DEVICE="cpufreq-meson"
+//$$ L2 PROP_STR = "status"
+	cpufreq-meson {
+		compatible = "amlogic,cpufreq-meson";
+		status = "okay";
+	};
+
+
+
+/// ****************************************************************************
+///	-	WATCHDOG
+	amlogic-watchdog {
+		compatible = "amlogic,aml-wdt";
+		status = "okay";
+		default_timeout=<10>;
+		reset_watchdog_method=<1>;//0:sysfs,1:kernel
+		reset_watchdog_time=<2>;
+		shutdown_timeout=<10>;
+		firmware_timeout=<6>;
+		suspend_timeout=<6>;
+	};
+
+
+/// ****************************************************************************
+///	-	MMC
+//$$ MODULE="MMC"
+//$$ DEVICE="aml_sdio"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+//$$ L2 PROP_STR 7 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "sdio_pin_0_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "sdio_pin_1_match" = "pinctrl-1"
+//$$ L2 PROP_CHOICE "sdio_pin_2_match" = "pinctrl-2"
+//$$ L2 PROP_CHOICE "sdio_pin_3_match" = "pinctrl-3"
+//$$ L2 PROP_CHOICE "sdio_pin_4_match" = "pinctrl-4"
+//$$ L2 PROP_CHOICE "sdio_pin_5_match" = "pinctrl-5"
+//$$ L2 PROP_CHOICE "sdio_pin_6_match" = "pinctrl-6"
+	sdio {
+		compatible = "amlogic,aml_sdio";
+		dev_name = "aml_sdio.0";
+		status = "okay";
+		reg = <0xc1108c20 0x20>;
+		pinctrl-names = "sd_clk_cmd_pins", "sd_all_pins", "emmc_clk_cmd_pins", "emmc_all_pins", "sdio_clk_cmd_pins", "sdio_all_pins","sd_1bit_pins"; // "jtag_pin", "uartao_default";
+		pinctrl-0 = <&sd_clk_cmd_pins>;
+		pinctrl-1 = <&sd_all_pins>;
+		pinctrl-2 = <&emmc_clk_cmd_pins>;
+		pinctrl-3 = <&emmc_all_pins>;
+		pinctrl-4 = <&sdio_clk_cmd_pins>;
+		pinctrl-5 = <&sdio_all_pins>;
+		pinctrl-6 = <&sd_1bit_pins>;
+
+		//$$ DEVICE="sd"
+		//$$ L2 PROP_STR = "status"
+		//$$ L3 PROP_U32 = "port"
+		//$$ L2 PROP_STR = "pinname"
+		//$$ L3 PROP_U32 = "ocr_avail"
+		//$$ L2 PROP_STR 3 = "caps"
+		//$$ L3 PROP_U32 = "f_min"
+		//$$ L3 PROP_U32 = "f_max"
+		//$$ L3 PROP_U32 = "f_max_w"
+		//$$ L3 PROP_U32 = "max_req_size"
+		//$$ L2 PROP_STR = "gpio_dat3"
+		//$$ L2 PROP_STR = "jtag_pin"
+		//$$ L2 PROP_STR = "gpio_cd"
+		//$$ L2 PROP_STR = "gpio_ro"
+		//$$ L2 PROP_U32 = "irq_in"
+		//$$ L2 PROP_U32 = "irq_out"
+		//$$ L2 PROP_U32 = "card_type"
+		sd {
+			status = "okay";
+			port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+			pinname = "sd";
+			ocr_avail = <0x200000>;          /**VDD voltage 3.3 ~ 3.4 */
+			caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED";
+			f_min = <300000>;
+			f_max = <50000000>;
+			f_max_w = <50000000>;
+			max_req_size = <0x20000>;          /**128KB*/
+			gpio_dat3 = "CARD_4";
+			jtag_pin = "CARD_0";
+			gpio_cd = "CARD_6";
+			//        gpio_ro = "GPIODV_25";
+			irq_in = <3>;
+			irq_out = <5>;
+			card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+		};
+
+		//$$ DEVICE="emmc"
+		//$$ L2 PROP_STR = "status"
+		//$$ L3 PROP_U32 = "port"
+		//$$ L2 PROP_STR = "pinname"
+		//$$ L3 PROP_U32 = "ocr_avail"
+		//$$ L2 PROP_STR 4 = "caps"
+		//$$ L3 PROP_U32 = "f_min"
+		//$$ L3 PROP_U32 = "f_max"
+		//$$ L3 PROP_U32 = "f_max_w"
+		//$$ L3 PROP_U32 = "max_req_size"
+		//$$ L2 PROP_STR = "gpio_dat3"
+		//$$ L2 PROP_U32 = "card_type"
+//		emmc {
+//			status = "ok";
+//
+//			port = <2>;
+//			pinname = "emmc";
+//			ocr_avail = <0x200000>; // 3.3:0x200000, 1.8+3.3:0x00200080
+//			caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+//			//	caps2 = "MMC_CAP2_HS200_1_8V_SDR";
+//			f_min = <300000>;
+//			f_max = <50000000>;
+//			f_max_w = <50000000>;
+//			max_req_size = <0x20000>; // 128KB
+//			gpio_dat3 = "BOOT_3";
+//			card_type = <1>;
+//		};
+//$$ DEVICE="sdio"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 = "port"
+//$$ L2 PROP_STR = "pinname"
+//$$ L3 PROP_U32 = "ocr_avail"
+//$$ L2 PROP_STR 4 = "caps"
+//$$ L3 PROP_U32 = "f_min"
+//$$ L3 PROP_U32 = "f_max"
+//$$ L3 PROP_U32 = "max_req_size"
+//$$ L2 PROP_U32 = "card_type"    
+        sdio{
+            status = "ok";
+            port = <0>;          /*0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+            pinname = "sdio";
+            ocr_avail = <0x200000>;          /*VDD voltage 3.3 ~ 3.4 */
+            caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE";
+            f_min = <300000>;
+            f_max = <50000000>;
+            max_req_size = <0x20000>;          /**128KB*/
+            card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+        };
+	}; /* sdio end*/
+
+
+/// ****************************************************************************
+///	-	MMC
+//$$ MODULE="MMC"
+//$$ DEVICE="aml_sdhc"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "sdhc_pin_0_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "sdhc_pin_1_match" = "pinctrl-1"
+//$$ L2 PROP_CHOICE "sdhc_pin_2_match" = "pinctrl-2"
+//$$ L2 PROP_CHOICE "sdhc_pin_3_match" = "pinctrl-3"
+//$$ L2 PROP_CHOICE "sdhc_pin_4_match" = "pinctrl-4"
+//$$ L2 PROP_CHOICE "sdjc_pin_5_match" = "pinctrl-5"
+// L2 PROP_CHOICE "sdhc_pin_6_match" = "pinctrl-6"
+	sdhc {
+		compatible = "amlogic,aml_sdhc";
+		dev_name = "aml_sdhc.0";
+		status = "okay";
+		reg = <0xc1108e00 0x3c>;
+		pinctrl-names = "sdhc_sd_clk_cmd_pins", "sdhc_sd_all_pins", "sdhc_emmc_clk_cmd_pins", "sdhc_emmc_all_pins", "sdhc_sdio_clk_cmd_pins", "sdhc_sdio_all_pins";
+		pinctrl-0 = <&sdhc_sd_clk_cmd_pins>;
+		pinctrl-1 = <&sdhc_sd_all_pins>;
+		pinctrl-2 = <&sdhc_emmc_clk_cmd_pins>;
+		pinctrl-3 = <&sdhc_emmc_all_pins>;
+		pinctrl-4 = <&sdhc_sdio_clk_cmd_pins>;
+		pinctrl-5 = <&sdhc_sdio_all_pins>;
+		//pinctrl-6 = <&sd_1bit_pins>;
+
+		//$$ DEVICE="sd"
+		//$$ L2 PROP_STR = "status"
+		//$$ L3 PROP_U32 = "port"
+		//$$ L2 PROP_STR = "pinname"
+		//$$ L3 PROP_U32 = "ocr_avail"
+		//$$ L2 PROP_STR 3 = "caps"
+		//$$ L3 PROP_U32 = "f_min"
+		//$$ L3 PROP_U32 = "f_max"
+		//$$ L3 PROP_U32 = "f_max_w"
+		//$$ L3 PROP_U32 = "max_req_size"
+		//$$ L2 PROP_STR = "gpio_dat3"
+		//$$ L2 PROP_STR = "jtag_pin"
+		//$$ L2 PROP_STR = "gpio_cd"
+		//$$ L2 PROP_STR = "gpio_ro"
+		//$$ L2 PROP_U32 = "irq_in"
+		//$$ L2 PROP_U32 = "irq_out"
+		//$$ L2 PROP_U32 = "card_type"
+//		sd{
+//			status = "okay";
+//			port = <4>;          /**0:sdhc_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+//			pinname = "sd";
+//			ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
+//			caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED","MMC_CAP_UHS_SDR12","MMC_CAP_UHS_SDR25","MMC_CAP_UHS_SDR50","MMC_CAP_UHS_SDR104";
+//			f_min = <300000>;
+//			f_max = <100000000>;
+//			max_req_size = <0x20000>;          /**128KB*/
+//			gpio_dat3 = "CARD_4";
+//			//jtag_pin = "CARD_0";
+//			gpio_cd = "CARD_6";
+//			//gpio_ro = "GPIOZ_0";
+//			irq_in = <3>;
+//			irq_out = <5>;
+//			card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+//		};
+
+		//$$ DEVICE="emmc"
+		//$$ L2 PROP_STR = "status"
+		//$$ L3 PROP_U32 = "port"
+		//$$ L2 PROP_STR = "pinname"
+		//$$ L3 PROP_U32 = "ocr_avail"
+		//$$ L2 PROP_STR 4 = "caps"
+		//$$ L3 PROP_U32 = "f_min"
+		//$$ L3 PROP_U32 = "f_max"
+		//$$ L3 PROP_U32 = "f_max_w"
+		//$$ L3 PROP_U32 = "max_req_size"
+		//$$ L2 PROP_STR = "gpio_dat3"
+		//$$ L2 PROP_U32 = "card_type"
+		emmc {
+			status = "okay";
+			port = <5>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+			pinname = "emmc";
+			ocr_avail = <0x200080>;          /**VDD voltage 3.3 ~ 3.4 */
+			caps = "MMC_CAP_8_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+			caps2 = "MMC_CAP2_HS200_1_8V_SDR";
+			f_min = <300000>;
+			f_max = <100000000>;
+			max_req_size = <0x20000>;          /**128KB*/
+			gpio_dat3 = "BOOT_3";
+			card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+		};
+
+		//$$ DEVICE="sdio"
+		//$$ L2 PROP_STR = "status"
+		//$$ L3 PROP_U32 = "port"
+		//$$ L2 PROP_STR = "pinname"
+		//$$ L3 PROP_U32 = "ocr_avail"
+		//$$ L2 PROP_STR 4 = "caps"
+		//$$ L3 PROP_U32 = "f_min"
+		//$$ L3 PROP_U32 = "f_max"
+		//$$ L3 PROP_U32 = "max_req_size"
+		//$$ L2 PROP_U32 = "card_type"
+//		sdio {
+//			status = "okay";
+//			port = <3>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+//			pinname = "sdio";
+//			ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
+//			caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE", "MMC_CAP_UHS_SDR12","MMC_CAP_UHS_SDR25","MMC_CAP_UHS_SDR50","MMC_CAP_UHS_SDR104";
+//			f_min = <300000>;
+//			f_max = <100000000>;
+//			max_req_size = <0x20000>;          /**128KB*/
+//			card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+//		};
+	}; /* sdhc end*/
+
+
+
+/// ****************************************************************************
+///	-	I2C
+//$$ MODULE="I2C"
+//$$ DEVICE="I2C_B"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2="reg"
+//$$ L3 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "I2C_B_pin_match" = "pinctrl-0"
+	i2c@c11087c0{ /*I2C-B*/
+		compatible = "amlogic,aml_i2c";
+		dev_name = "i2c-B";
+		status = "ok";
+		reg = <0xc11087c0 0x20>;
+		device_id = <2>;
+		pinctrl-names="default";
+		pinctrl-0=<&b_i2c_master>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		use_pio = <0>;
+		master_i2c_speed = <300000>;
+ 	};
+
+
+
+/// ****************************************************************************
+///	-	VPU
+//$$ MODULE="VPU"
+//$$ DEVICE="vpu"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_U32 = "clk_level"
+	vpu{
+		compatible = "amlogic,vpu";
+		dev_name = "vpu";
+		status = "ok";
+		clk_level = <10>;
+		/**	7: 425.0M	8: 510M
+			9: 637.5M	10: 696M	*/
+		};
+
+
+
+
+/// ****************************************************************************
+/// -   DISP&MM-FB
+//$$ MODULE = "DISP&MM-FB"
+//$$ DEVICE = "mesonfb"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 4 ="reg"
+//$$ L2 PROP_U32 = "vmode"
+//$$ L2 PROP_U32 5 = "display_size_default"
+	mesonfb{
+		compatible = "amlogic,mesonfb";
+		dev_name = "mesonfb";
+		status = "okay";
+		reserve-memory = <0x01800000  0x00100000>;
+		reserve-iomap = "true";
+		vmode = <3>;
+		/**	0:VMODE_720P
+			1:VMODE_LCD
+			2:VMODE_LVDS_1080P
+			3:VMODE_1080P*/
+		scale_mode = <1>; /*0:default 1:new*/
+		4k2k_fb = <0>;
+		display_size_default = <1920 1080 1920 3240 32>;
+		/** 1920*1080*4*3 = 0x17BB000 **/
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-A/V stream
+//$$ MODULE = "DISP&MM-A/V stream"
+//$$ DEVICE="mesonstream"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 4 ="reg"
+	mesonstream {
+		compatible = "amlogic,mesonstream";
+		dev_name = "mesonstream.0";
+		status = "okay";
+		reserve-memory = <0x02000000>; // 32M
+		reserve-iomap = "true";
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-A/V video dec
+// MODULE = "DISP&MM-A/V video dec"
+// DEVICE = "vdec"
+// L2 PROP_STR = "status"
+// L3 PROP_U32 4 ="reg"
+	vdec {
+		compatible = "amlogic,vdec";
+		dev_name = "vdec.0";
+		status = "okay";
+		reserve-memory = <0x10000000>; // 256M
+		reserve-iomap = "true";
+		linux,contiguous-region = <&mem_4k2k_decoder>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	picture decoder
+//$$ MODULE="picture decoder"
+//$$ DEVICE="picdec"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	picdec {
+		compatible = "amlogic,picdec";
+		dev_name = "picdec";
+		status = "okay";
+		share-memory-name = "vdec0";
+		share-memory-offset = <0>;
+		share-memory-size = <0x04000000>; //64M
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-PostProcess
+//$$ MODULE="DISP&MM-PostProcess"
+//$$ DEVICE="ppmgr"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	ppmgr {
+		compatible = "amlogic,ppmgr";
+		dev_name = "ppmgr";
+		status = "okay";
+		reserve-memory = <0x01000000>; // 16M
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-AVC Video Encoder
+//$$ MODULE = "DISP&MM-AVC Video Encoder"
+//$$ DEVICE="amvenc_avc"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	amvenc_avc{
+		compatible = "amlogic,amvenc_avc";
+		dev_name = "amvenc_avc.0";
+		status = "okay";
+		linux,contiguous-region = <&cma_0>;
+		reserve-iomap = "true";
+	};
+
+
+/// ****************************************************************************
+///	-	deinterlace
+// DEVICE="deinterlace"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+	deinterlace{
+		compatible = "amlogic,deinterlace";
+		dev_name = "deinterlace";
+		status = "ok";
+		reserve-memory = <0x024c0000>;
+		/** 8x(1920x1088x(3/2+1/5)+1088/2)=33M **/
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-VDIN
+// MODULE = "DISP&MM-VDIN"
+// DEVICE="vdin0"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+// L2 PROP_U32 = "irq"
+// L2 PROP_U32 = "vdin_id"
+	vdin0{
+		compatible = "amlogic,vdin";
+		dev_name = "vdin0";
+		status = "ok";
+		//reserve-memory = <0x01000000>;
+		reserve-memory = <0x04000000>;
+		reserve-iomap = "true";
+		//max_size = <1920 1080>;//1920x1080x2x4=17M
+		max_size = <4096 2160>;//4096x2160x2x4=67M
+
+		irq = <115>;
+		vdin_id = <0>;
+	};
+
+// DEVICE="vdin1"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+// L2 PROP_U32 = "irq"
+// L2 PROP_U32 = "vdin_id"
+	vdin1 {
+		compatible = "amlogic,vdin";
+		dev_name = "vdin1";
+		status = "ok";
+		reserve-memory = <0x01000000>;
+		reserve-iomap = "true";
+		miracast_size = <1920 1080>;//1920x1080x2x4=17M
+		irq = <117>;
+		vdin_id = <1>;
+	};
+
+
+	tvafe {
+		compatible = "amlogic,tvafe";
+		dev_name = "tvafe";
+		status = "ok";
+		reserve-memory = <0x500000>;
+		reserve-iomap = "true";
+		tvafe_id = <0>;
+		pinctrl-names = "default";
+		tvafe_pin_mux = < /*!!particular sequence, no more and no less!!!*/
+			1	/*// TVAFE_ADC_PIN_A_PGA_0,  //CVBS0_Y = 0,*/
+			48	/*// TVAFE_ADC_PIN_SOG_7,    //CVBS0_SOG,*/
+			3	/*// TVAFE_ADC_PIN_A_PGA_2,  //CVBS1_Y,share with ypbpr*/
+			41	/*// TVAFE_ADC_PIN_SOG_0,    //CVBS1_SOG,*/
+			2	/*// TVAFE_ADC_PIN_A_PGA_1,  //CVBS2_Y,*/
+			41	/*// TVAFE_ADC_PIN_SOG_0,    //CVBS2_SOG,*/
+			12	/*// TVAFE_ADC_PIN_A_3,  //CVBS3_Y,*/
+			48	/*// TVAFE_ADC_PIN_SOG_7,    //CVBS3_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS4_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS4_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS5_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS5_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS6_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS6_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS7_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS7_SOG,*/
+			3	/*// TVAFE_ADC_PIN_A_PGA_2,  //S_VIDEO0_Y,*/
+			21	/*// TVAFE_ADC_PIN_B_4,  //S_VIDEO0_C,*/
+			47	/*// TVAFE_ADC_PIN_SOG_6,    //S_VIDEO0_SOG,*/
+			4	/*// TVAFE_ADC_PIN_A_PGA_3,  //S_VIDEO1_Y,*/
+			29	/*// TVAFE_ADC_PIN_C_4,   //S_VIDEO1_C,*/
+			48	/*// TVAFE_ADC_PIN_SOG_7,    //S_VIDEO1_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO2_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO2_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO2_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO3_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO3_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO3_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO4_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO4_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO4_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO5_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO5_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO5_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO6_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO6_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO6_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO7_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO7_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO7_SOG,*/
+			11	/*// TVAFE_ADC_PIN_A_2,     //VGA0_G,*/
+			19	/*// TVAFE_ADC_PIN_B_2,     //VGA0_B,*/
+			27	/*// TVAFE_ADC_PIN_C_2,     //VGA0_R,*/
+			43	/*// TVAFE_ADC_PIN_SOG_2,    //VGA0_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_SOG*/
+			0	/*/ TVAFE_ADC_PIN_NULL,     //VGA7_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA7_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA7_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA7_SOG*/
+			9	/*// TVAFE_ADC_PIN_A_0,     //COMP0_Y,*/
+			17	/*// TVAFE_ADC_PIN_B_0,     //COMP0_PB,*/
+			25	/*// TVAFE_ADC_PIN_C_0,     //COMP0_PR,*/
+			41	/*// TVAFE_ADC_PIN_SOG_0,    //COMP0_SOG*/
+			10	/*// TVAFE_ADC_PIN_A_1,     //COMP1_Y,*/
+			18	/*// TVAFE_ADC_PIN_B_1,     //COMP1_PB,*/
+			26	/*// TVAFE_ADC_PIN_C_1,     //COMP1_PR,*/
+			42	/*// TVAFE_ADC_PIN_SOG_1,    //COMP1_SOG*/
+			11	/*// TVAFE_ADC_PIN_A_2,     //COMP2_Y,*/
+			19	/*// TVAFE_ADC_PIN_B_2,     //COMP2_PB,*/
+			27	/*// TVAFE_ADC_PIN_C_2,     //COMP2_PR,*/
+			43	/*// TVAFE_ADC_PIN_SOG_2,    //COMP2_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_CVBS,*/
+		>;
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	ION
+//$$ MODULE="ION"
+//$$ DEVICE="ion_dev"
+//$$ L2 PROP_STR = "status"
+	ion_dev {
+		compatible = "amlogic,ion_dev";
+		dev_name = "ion_dev";
+		status = "ok";
+		reserve-memory = <0x01000000>; //16M
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-Vout
+//$$ MODULE = "DISP&MM-Vout"
+//$$ DEVICE = "mesonvout"
+//$$ L2 PROP_STR = "status"
+	mesonvout {
+		compatible = "amlogic,mesonvout";
+		dev_name = "mesonvout";
+		status = "okay";
+	};
+
+
+
+///*****************************************************************************
+///	-	AMLOGIC-PMU
+	pmu {
+		compatible = "amlogic, aml_pmu_prober"; /* fixed for pmu driver, don't change   */
+		#address-cells = <1>;
+		#size-cells = <0>;
+		driver_version = "v0.60";
+
+		//$$ DEVICE = "Pmu_aml1220"
+		//$$ L2 PROP_STR = "sub_type"
+		//$$ L2 PROP_STR = "i2c_bus"
+		//$$ L2 PROP_U32 = "reg"
+		//$$ L2 PROP_U32 = "soft_limit_to99"
+		//$$ L2 PROP_U32 = "ddr_voltage"
+		//$$ L2 PROP_U32 = "vddao_voltage"
+		//$$ L2 PROP_CHOICE "battery_parameter_match" = "board_battery"
+		//$$ L2 PROP_STR = "status"
+		aml1220 {
+			compatible = "amlogic,aml_pmu4"; /** compatible to amlogic PMU            */
+			sub_type = "aml1220_pmu"; /** sub type of pmu family, must have */
+			i2c_bus = "i2c_bus_b"; /** attached i2c bus, must have */
+			reg = <0x35>; /** device i2c address, must have  */
+			// soft_limit_to99 = <0>;  /** optional                             */
+			// vbus_dcin_short_connect = <0>;
+			status = "okay"; /** status of pmu, only one should be OK */
+		};
+	};
+
+
+
+/// ****************************************************************************
+/// -   Audio
+//$$ MODULE="Audio"
+//$$ DEVICE="audio_i2s"
+//$$ L2 PROP_STR = "status"
+	audio_platform {
+		compatible = "amlogic,aml-i2s";
+		dev_name = "aml-i2s.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_i2s_dai"
+	//$$ L2 PROP_STR = "status"
+	audio_dai {
+		compatible = "amlogic,aml-i2s-dai";
+		dev_name = "aml-i2s-dai.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_spdif_dai"
+	//$$ L2 PROP_STR = "status"
+	audio_spdif_dai {
+		compatible = "amlogic,aml-spdif-dai";
+		dev_name = "aml-spdif-dai.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_spdif_codec"
+	//$$ L2 PROP_STR = "status"
+	audio_spdif_codec {
+		compatible = "amlogic,aml-spdif-codec";
+		dev_name = "spdif-dit.0";
+		pinctrl-names = "aml_audio_spdif";
+		//pinctrl-0 = <&audio_spdif_pins>;
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm2BT_codec"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm2BT_codec {
+		compatible = "amlogic,pcm2BT-codec";
+		dev_name = "pcm2bt.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm_dai"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm_dai {
+		compatible = "amlogic,aml-pcm-dai";
+		dev_name = "aml-pcm-dai.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm {
+		compatible = "amlogic,aml-pcm";
+		dev_name = "aml-pcm.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pmu4_codec"
+	//$$ L2 PROP_STR = "status"
+	audio_pmu4_codec {
+		compatible = "amlogic,aml_pmu4_codec";
+		dev_name = "aml_pmu4_codec.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="aml_audio_codec"
+	//$$ L2 PROP_STR = "status"
+	aml_audio_codec {
+		compatible = "amlogic,audio_codec";
+
+		pmu4:pmu4{
+			codec_name = "amlpmu4";
+			status = "okay";
+		};
+
+		dummy:dummy {
+			codec_name = "dummy_codec";
+			status = "disable";
+		};
+	};
+
+	//$$ DEVICE="dummy_codec"
+	//$$ L2 PROP_STR = "status"
+	dummy_codec {
+		compatible = "amlogic,aml_dummy_codec";
+		dev_name = "dummy_codec.0";
+		status = "disable";
+	};
+
+	//$$ DEVICE="aml_g9tv_sound_card"
+	//$$ L2 PROP_STR = "aml,sound_card"
+	//$$ L2 PROP_STR = "aml,codec_dai"
+	//$$ L2 PROP_STR 6*2 = "aml,audio-routing"
+	//$$ L2 PROP_STR = "mute_gpio"
+	//$$ L2 PROP_STR = "pinctrl-names"
+	//$$ L2 PROP_CHOICE "Audio_pin_0_match" = "pinctrl-0"
+	//$$ L2 PROP_STR = "status"
+	aml_g9tv_sound_card {
+		compatible = "sound_card, aml_snd_g9tv";
+		aml,sound_card = "AML-G9TVAUDIO";
+		aml,codec_dai = "AML-G9TV","pmu4-audio-hifi","dummy-codec";
+
+		aml,audio-routing-dummy=
+			"LINEOUT","LOUTL",
+			"LINEOUT","LOUTR";
+		aml,audio-routing-amlpmu4 =
+			"LINEOUT","Lineout left P",
+			"LINEOUT","Lineout right P",
+			"LINEIN","Linein left 1",
+			"LINEIN","Linein right 1";
+		pinctrl-names = "aml_snd_g9tv";
+//		pinctrl-0 = <&audio_pins>;
+		status = "okay";
+	};
+
+
+
+
+/// ****************************************************************************
+/// -   GPIO
+//$$ MODULE="GPIO"
+//$$ DEVICE="g9tv-gpio"
+	gpio:gpio{
+		compatible = "amlogic,g9tv-gpio";
+		dev_name = "gpio";
+		#gpio-cells=<2>;
+	};
+
+
+
+
+
+/// ****************************************************************************
+/// -   Pinmux
+//$$ MODULE="Pinmux"
+//$$ DEVICE="pinmux-m8"
+	pinmux {
+		compatible = "amlogic,pinmux-g9tv";
+		dev_name = "pinmux";
+		#pinmux-cells=<2>;
+
+		//$$ MATCH "uart_ao_pin_match" = "&ao_uart_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		ao_uart_pins:ao_uart {
+			amlogic,setmask = <10 0x1800>;
+			amlogic,pins = "GPIOAO_0", "GPIOAO_1";
+		};
+
+		//$$ MATCH "uart_0_pin_match" = "&a_uart_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 4 = "amlogic,pins"
+		a_uart_pins:a_uart {
+			amlogic,setmask=<4 0x3c00>;
+			amlogic,pins="GPIOX_12", "GPIOX_13", "GPIOX_14", "GPIOX_15";
+		};
+
+		//$$ MATCH "Card_pin_0_match" = "&sdhc_b_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_b_pins:sdhc_b_pin {
+			amlogic,setmask=<2 0xfc00>;
+			amlogic,clrmask=<2 0xf0 8 0x600>;
+			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+		};
+
+		//$$ MATCH "Card_pin_1_match" = "&sdhc_c_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_c_pins:sdhc_c_pin {
+			amlogic,setmask=<6 0x3f000000>;
+			amlogic,clrmask=<4 0x7c000000 2 0x4c00000>;
+			amlogic,pins="BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_16","BOOT_17";
+		};
+
+		//$$ MATCH "Card_pin_2_match" = "&sdhc_a_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_a_pins:sdhc_a_pin {
+			amlogic,setmask=<8 0x3f>;
+			amlogic,clrmask=<5 0x6c00 >;
+			amlogic,pins="GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+		};
+
+		//$$ MATCH "sdio_pin_5_match" = "&sdio_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdio_all_pins:sdio_all_pins {
+			amlogic,setmask = <8 0x0000003f>;	/*sdio a*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   2 0x0000fc00		/*sdio b*/
+					   5 0x00007c00>;	/*sdhc a*/
+			amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_4_match" = "&sdio_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdio_clk_cmd_pins:sdio_clk_cmd_pins {
+			amlogic,setmask = <8 0x00000003>;	/*sdio a*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   2 0x0000fc00		/*sdio b*/
+					   5 0x00007c00>;	/*sdhc a*/
+			amlogic,pins = "GPIOX_8","GPIOX_9"; /** GPIOX_8:CLK, GPIOX_9:CMD */
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "sdio_pin_1_match" = "&sd_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_all_pins:sd_all_pins {
+			amlogic,setmask = <2 0x0000fc00>;	/*sdio b*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   8 0x0000063f		/*sdio a, UART*/
+					   2 0x000000f0>;	/*sdhc b*/
+			amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_6_match" = "&sd_1bit_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_1bit_pins:sd_1bit_pins {
+			amlogic,setmask = <2 0x00008c00>;	/*sdio b*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   8 0x0000003f		/*sdio a*/
+					   2 0x000000f0>;	/*sdhc b*/
+			amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "sdio_pin_0_match" = "&sd_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_clk_cmd_pins:sd_clk_cmd_pins {
+			amlogic,setmask=<2 0x00000c00>;         /*sdio b*/
+			amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+					8 0x0000003f        /*sdio a*/
+					2 0x000000f0>;      /*sdhc b*/
+			amlogic,pins = "CARD_2","CARD_3"; /** CARD_2:CLK, CARD_3:CMD */
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_3_match" = "&emmc_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		emmc_all_pins:emmc_all_pins {
+			amlogic,setmask=<6 0x3f000000>;         /*sdio c*/
+			amlogic,clrmask=<2 0x0000fc00           /*sdio b & nand*/
+					8 0x0000003f        /*sdio a*/
+					4 0x7c000000>;        /*sdhc c*/
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_16","BOOT_17";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_2_match" = "&emmc_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		emmc_clk_cmd_pins:emmc_clk_cmd_pins {
+			amlogic,setmask=<6 0x03000000>;         /*bit[24-25] */
+			amlogic,clrmask=<2 0x0000fc00           /*sdio b & nand*/
+					8 0x0000003f        /*sdio a*/
+					4 0x7c000000>;        /*sdhc c*/
+			amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		sdhc_sd_clk_cmd_pins:sdhc_sd_clk_cmd_pins {
+			amlogic,setmask = <2 0x00000030>;	/*sdhc b*/
+			amlogic,clrmask = <5 0x00007c00		/*sdhc a*/
+					   4 0x7c000000		/*sdhc c*/
+					   2 0x0000fc00		/*sdio b*/
+					   8 0x00000600>;	/*UART*/
+			amlogic,pins = "CARD_2","CARD_3"; /* CARD_2:CLK, CARD_3:CMD */
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_sd_all_pins:sdhc_sd_all_pins {
+			amlogic,setmask = <2 0x000000f0>;	/*sdhc b*/
+			amlogic,clrmask = <5 0x00007c00		/*sdhc a*/
+					   4 0x7c000000		/*sdhc c*/
+					   2 0x0000fc00		/*sdio b*/
+					   8 0x00000600>;	/*UART*/
+			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output = <1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_emmc_clk_cmd_pins:sdhc_emmc_clk_cmd_pins {
+			amlogic,setmask = <4 0x0c000000>;	/*bit[26-27] */
+			amlogic,clrmask = <2 0x000000f0		/*sdhc b & nand*/
+					   5 0x00007c00		/*sdhc a*/
+					   6 0x3f000000>;	/*sdio c*/
+			amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_emmc_all_pins:sdhc_emmc_all_pins {
+			amlogic,setmask = <4 0x7c000000>;	/*sdhc c*/
+			amlogic,clrmask = <2 0x000000f0		/*sdhc b & nand*/
+					   5 0x00007c00		/*sdhc a*/
+					   6 0x3f000000>;	/*sdio c*/
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4","BOOT_5","BOOT_6","BOOT_7","BOOT_16","BOOT_17";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		sdhc_sdio_clk_cmd_pins:sdhc_sdio_clk_cmd_pins {
+			amlogic,setmask = <5 0x00000c00>;	/*sdhc a bit[10-11] */
+			amlogic,clrmask = <2 0x000000f0		/*sdhc b*/
+					   4 0x7c000000		/*sdhc c */
+					   8 0x0000003f>;	/*sdio a*/
+			amlogic,pins = "GPIOX_8","GPIOX_9"; /** BOOT_16:CMD, BOOT_17:CLK */
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+		sdhc_sdio_all_pins:sdhc_sdio_all_pins {
+			amlogic,setmask = <5 0x00006c00>;	/*sdhc a*/
+			amlogic,clrmask = <2 0x058000f0		/*sdhc b*/
+					   4 0x7c000000		/*sdhc c */
+					   8 0x0000003f>;	/*sdio a*/
+			amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "I2C_B_pin_match" = "&b_i2c_master"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		b_i2c_master:b_i2c {
+			amlogic,setmask=<11 0xc000>;
+			amlogic,clrmask=<9 0xf00000c0>;
+			amlogic,pins="GPIOY_12","GPIOY_13";
+
+		};
+
+		//$$ MATCH "remote_pin_0_match" = "&remote_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR = "amlogic,pins"
+		remote_pins:remote_pin {
+			amlogic,setmask = <10 0x1>;
+			amlogic,pins = "GPIOAO_7";
+		};
+
+		//$$ MATCH "audio_pins_match" = "&audio_pins"
+		//$$ L2 PROP_U32 4 = "amlogic,setmask"
+		//$$ L2 PROP_U32 10 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+//		audio_pins:audio_pins {
+//			amlogic,setmask = <2 0x6B0000>; /* I2S */
+//			amlogic,clrmask = <2 0x140000
+//			                   3 0x80000>;
+//			amlogic,pins = "GPIOZ_1", "GPIOZ_2", "GPIOZ_3", "GPIOZ_4", "GPIOZ_5";
+//		};
+
+		//$$ MATCH "dvb_p_ts0_pins_match" = "&dvb_p_ts0_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 12 = "amlogic,pins"
+		/*dvb_p_ts0_pins:dvb_p_ts0_pins {
+			amlogic,setmask = <3 0x3F>;
+			amlogic,clrmask = <1 0xCCC41
+					   4 0x2000000
+					   7 0x20000000
+					   9 0x431F>;
+			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+		};
+		*/
+
+		//$$ MATCH "dvb_s_ts0_pins_match" = "&dvb_s_ts0_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 12 = "amlogic,pins"
+		/*dvb_s_ts0_pins:dvb_s_ts0_pins {
+			amlogic,setmask = <3 0x2F>;
+			amlogic,clrmask = <1 0xCCC41
+					   4 0x2000000
+					   7 0x20000000
+					   9 0x4310>;
+			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+		};
+		*/
+
+		//$$ MATCH "dvb_fe_pins_match" = "&dvb_fe_pins"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 1 = "amlogic,pins"
+		dvb_fe_pins: dvb_fe_pin {
+			amlogic,clrmask = <7 0x2000000
+					   6 0x40000000>;
+			amlogic,pins = "GPIOW_1";
+		};
+
+
+		/*
+		smc_pins:smc_pins {
+			amlogic,setmask = <5 0x000000c0>;
+			amlogic,clrmask = <3 0x00000020
+					   9 0xc>;
+			amlogic,pins = "GPIOY_13","GPIOY_14";
+		};*/
+
+	}; /* end of pinmux */
+
+
+
+/// ****************************************************************************
+///	-	DVB
+//$$ MODULE="DVB"
+
+//$$ DEVICE="dvb"
+//$$ L2 PROP_STR = "ts0"
+//$$ L2 PROP_U32 = "ts0_invert"
+//$$ L2 PROP_U32 = "ts0_control"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "dvb_p_ts0_pins_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "dvb_s_ts0_pins_match" = "pinctrl-1"
+	dvb {
+		compatible = "amlogic,dvb";
+		/*"parallel","serial","disable"*/
+		ts2 = "parallel";
+		ts2_control = <0>;
+		ts2_invert = <0>;
+		//pinctrl-names = "p_ts0", "s_ts0";
+		//pinctrl-0 = <&dvb_p_ts0_pins>;
+		//pinctrl-1 = <&dvb_s_ts0_pins>;
+	};
+
+//$$ DEVICE="dvbfe"
+//$$ L2 PROP_STR = "dtv_demod0"
+//$$ L2 PROP_U32 = "dtv_demod0_i2c_adap_id"
+//$$ L2 PROP_U32 = "dtv_demod0_i2c_addr"
+//$$ L2 PROP_U32 = "dtv_demod0_reset_value"
+//$$ L2 PROP_STR = "dtv_demod0_reset_gpio"
+//$$ L2 PROP_U32 = "fe0_dtv_demod"
+//$$ L2 PROP_U32 = "fe0_ts"
+//$$ L2 PROP_U32 = "fe0_dev"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "dvb_fe_pins_match" = "pinctrl-0"
+	dvbfe {
+		compatible = "amlogic,dvbfe";
+		dtv_demod0 = "AMLDEMOD";
+		//dtv_demod0_i2c_adap_id = <2>;
+		//dtv_demod0_i2c_addr = <0xC0>;
+		//dtv_demod0_reset_value = <0>;
+		//dtv_demod0_reset_gpio = "GPIOY_5";
+		fe0_dtv_demod = <0>;
+		fe0_ts = <2>;
+		fe0_dev = <0>;
+		dtv_demod0_mem = <1>;
+		reserve-memory = <0x6400000>;
+		reserve-iomap = "true";
+		//pinctrl-names = "default";
+		//pinctrl-0 = <&dvb_fe_pins>;
+	//	fe0_mem = <0>;
+	//	reserve-memory = <0x2000000>;  //32m
+		tuner0 = "si2177_tuner";
+		tuner0_i2c_adap_id = <2>;
+		tuner0_i2c_addr = <0x60>;
+		tuner0_reset_value = <0>;
+		tuner0_reset_gpio =  "GPIOW_1" ;  /*GPIOX_8   76*/
+		fe0_tuner = <0>;
+		//atv_demod0 = "si2177_atv_demod";
+		atv_demod0 = "aml_atv_demod";
+		fe0_atv_demod = <0>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&dvb_fe_pins>;
+	};
+
+	/*smartcard {
+		compatible = "amlogic,smartcard";
+		smc0_irq = <69>;
+		smc0_enable_pin = "GPIOY_12";
+		smc0_enable_level = <1>;
+		smc0_reset_pin = "GPIOY_6";
+		smc0_reset_level = <0>;
+		smc0_clk_pinmux_reg = <0x2031>;
+		smc0_clk_pinmux_bit = <0x80>;
+		smc0_clk_oen_reg = <0x200f>;
+		smc0_clk_out_reg = <0x2010>;
+		smc0_clk_bit = <0x2000>;
+		smc0_det_pin = "GPIOY_7";
+		pinctrl-names = "default";
+		pinctrl-0 = <&smc_pins>;
+	};*/
+
+
+	/*USB*/
+	dwc3 {
+		compatible = "synopsys,dwc3";
+		reg = <0xc9000000 0x200000>;
+		interrupts = <0 30 4>;
+		usb-phy = <&usb2_phy>, <&usb3_phy>;
+
+	};
+
+	usb2_phy: usb2phy {
+		compatible = "amlogic,amlogic-usb2";
+		portnum = <4>;
+		reg = <0xc8022000 0x80>;
+	};
+
+	usb3_phy: usb3phy {
+		compatible = "amlogic,amlogic-usb3";
+		portnum = <1>;
+		reg = <0xc8022080 0x20>;
+	};
+
+}; /* end of root */
diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_pxp.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_pxp.dtd
new file mode 100644
index 000000000000..87e1b51e215d
--- /dev/null
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_pxp.dtd
@@ -0,0 +1,1309 @@
+/dts-v1/;
+/{
+	compatible = "AMLOGIC,T866_G9TV";
+	model = "AMLOGIC";
+	interrupt-parent = <&gic>;
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+
+
+/// ****************************************************************************
+///	-	CPU
+//$$ MODULE="CPU"
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		//$$ DEVICE="cpu0"
+		cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x200>;
+		};
+
+		//$$ DEVICE="cpu1"
+		cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x1>;
+		};
+
+		//$$ DEVICE="cpu2"
+		cpu@2 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x2>;
+		};
+
+		//$$ DEVICE="cpu3"
+		cpu@3 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x3>;
+		};
+	};
+
+
+
+/// ****************************************************************************
+///	-	Cache
+//$$ MODULE="Cache"
+//$$ DEVICE="cache"
+	cache-controller {
+		compatible = "arm,meson-pl310-cache";
+		reg = <0xc4200000 0x1000>;
+		arm,data-latency = <3 3 3>;
+		arm,tag-latency = <2 2 2>;
+		cache-unified;
+		cache-level = <2>;
+		aux-instruction_prefetch;
+		aux-data_prefetch;
+		aux-ns_lockdown;
+		aux-force_no_write_alloc;
+		aux-cache_replace_policy_round_robin;
+		aux-early_write_response;
+		aux-full_line_of_zero;
+		aux-ns_int_ctrl;
+		aux-share_override;
+		prefetch-double_line_fill;
+		prefetch-prefetch_drop;
+		prefetch-prefetch_offset = <7>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	Memory
+//$$ MODULE="Memory"
+//$$ DEVICE="memory"
+//$$ L2 PROP_U32 = "aml_reserved_start"
+//$$ L2 PROP_U32 = "aml_reserved_end"
+//$$ L2 PROP_U32 6 = "linux,usable-memory"
+	memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		device_type = "memory";
+		aml_reserved_start = <0x06000000>; /**reserved memory start */
+		aml_reserved_end = <0x05000000>; /** reserved memory end : dtb start for uboot */
+		phys_offset = <0x00000000>;
+		linux,total-memory = <0x40000000>;
+
+//$$ DEVICE="mem_4k2k_decoder"
+//$$ L3 PROP_U32 2 ="reg"
+		mem_4k2k_decoder: region@1 {
+			region_name = "cma_4k2k";
+			linux,contiguous-region;
+			reg = <0x00000000 0x0c000000>;
+		};
+
+		cma_0:region@0 {
+			region_name = "cma_0";
+			reg = <0 0x00f00000>;
+			linux,contiguous-region;
+		};
+	};
+
+
+
+/// ****************************************************************************
+///	-	GIC
+//$$ MODULE="GIC"
+//$$ DEVICE="gic"
+	gic:interrupt-controller {
+		compatible = "arm,cortex-a9-gic";
+		reg = <0xc4301000 0x1000
+		       0xc4300100 0x0100>;
+		interrupt-controller;
+		#interrupt-cells = <3>;
+		#address-cells = <0>;
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	UART
+//$$ MODULE="UART"
+//$$ DEVICE="uart_ao"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_STR = "pinctrl-names"
+//$$ L3 PROP_CHOICE "uart_ao_pin_match" = "pinctrl-0"
+	uart_ao {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_ao";
+		status = "okay";
+		dev_name = "uart_ao";
+		pinctrl-names = "default";
+		pinctrl-0 = <&ao_uart_pins>;
+	};
+
+	//$$ DEVICE="uart_0"
+	//$$ L2 PROP_STR = "status"
+	uart_0 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_a";
+		status = "okay";
+		dev_name = "uart_0";
+		//pinctrl-names = "default";
+		//pinctrl-0 = <&a_uart_pins>;
+	};
+
+	//$$ DEVICE="uart_1"
+	//$$ L2 PROP_STR = "status"
+	uart_1 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_b";
+		status = "disabled";
+		dev_name = "uart_1";
+	};
+
+	//$$ DEVICE="uart_2"
+	//$$ L2 PROP_STR = "status"
+	uart_2 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_c";
+		status = "disabled";
+		dev_name = "uart_2";
+	};
+
+	//$$ DEVICE="uart_3"
+	//$$ L2 PROP_STR = "status"
+	uart_3 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_d";
+		status = "ok";
+		dev_name = "uart_3";
+	};
+
+
+
+
+
+/// ****************************************************************************
+//$$ DEVICE="meson-remote"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_U32 = "ao_baseaddr"
+//$$ L2 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "remote_pin_0_match" = "pinctrl-0"
+	meson-remote{
+		compatible = "amlogic,aml_remote";
+		dev_name = "meson-remote";
+		status = "ok";
+		ao_baseaddr = <0xf3100480>;
+		pinctrl-names="default";
+		pinctrl-0=<&remote_pins>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	Cpufreq
+//$$ MODULE="Cpufreq"
+//$$ DEVICE="cpufreq-meson"
+//$$ L2 PROP_STR = "status"
+	cpufreq-meson{
+		compatible = "amlogic,cpufreq-meson";
+		status = "okay";
+	};
+
+
+
+/// ****************************************************************************
+///	-	WATCHDOG
+	amlogic-watchdog{
+		compatible = "amlogic,aml-wdt";
+		status = "okay";
+		default_timeout=<10>;
+		reset_watchdog_method=<1>;//0:sysfs,1:kernel
+		reset_watchdog_time=<2>;
+		shutdown_timeout=<10>;
+		firmware_timeout=<6>;
+		suspend_timeout=<6>;
+	};
+
+
+/// ****************************************************************************
+///	-	MMC
+//$$ MODULE="MMC"
+//$$ DEVICE="aml_sdio"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+//$$ L2 PROP_STR 7 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "sdio_pin_0_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "sdio_pin_1_match" = "pinctrl-1"
+//$$ L2 PROP_CHOICE "sdio_pin_2_match" = "pinctrl-2"
+//$$ L2 PROP_CHOICE "sdio_pin_3_match" = "pinctrl-3"
+//$$ L2 PROP_CHOICE "sdio_pin_4_match" = "pinctrl-4"
+//$$ L2 PROP_CHOICE "sdio_pin_5_match" = "pinctrl-5"
+//$$ L2 PROP_CHOICE "sdio_pin_6_match" = "pinctrl-6"
+	sdio {
+		compatible = "amlogic,aml_sdio";
+		dev_name = "aml_sdio.0";
+		status = "okay";
+		reg = <0xc1108c20 0x20>;
+		pinctrl-names = "sd_clk_cmd_pins", "sd_all_pins", "emmc_clk_cmd_pins", "emmc_all_pins", "sdio_clk_cmd_pins", "sdio_all_pins","sd_1bit_pins"; // "jtag_pin", "uartao_default";
+		pinctrl-0 = <&sd_clk_cmd_pins>;
+		pinctrl-1 = <&sd_all_pins>;
+		pinctrl-2 = <&emmc_clk_cmd_pins>;
+		pinctrl-3 = <&emmc_all_pins>;
+		pinctrl-4 = <&sdio_clk_cmd_pins>;
+		pinctrl-5 = <&sdio_all_pins>;
+		pinctrl-6 = <&sd_1bit_pins>;
+
+//$$ DEVICE="sdio"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 = "port"
+//$$ L2 PROP_STR = "pinname"
+//$$ L3 PROP_U32 = "ocr_avail"
+//$$ L2 PROP_STR 3 = "caps"
+//$$ L3 PROP_U32 = "f_min"
+//$$ L3 PROP_U32 = "f_max"
+//$$ L3 PROP_U32 = "max_req_size"
+//$$ L2 PROP_U32 = "card_type"
+		sdio {
+			status = "okay";
+			/**	0:sdio_a,
+				1:sdio_b,
+				2:sdio_c,
+				3:sdhc_a,
+				4:sdhc_b,
+				5:sdhc_c */
+			port = <0>;
+			pinname = "sdio";
+			ocr_avail = <0x200000>;
+			caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED", "MMC_CAP_NONREMOVABLE";
+			f_min = <300000>;
+			f_max = <50000000>;
+			max_req_size = <0x20000>; /** 128KB **/
+			/**	0:unknown,
+				1:mmc card(include eMMC),
+				2:sd card(include tSD),
+				3:sdio device(ie:sdio-wifi),
+				4:SD combo (IO+mem) card,
+				5:NON sdio device(means sd/mmc card),
+				other:reserved **/
+			card_type = <5>;
+		};
+
+		//$$ DEVICE="emmc"
+		//$$ L2 PROP_STR = "status"
+		//$$ L3 PROP_U32 = "port"
+		//$$ L2 PROP_STR = "pinname"
+		//$$ L3 PROP_U32 = "ocr_avail"
+		//$$ L2 PROP_STR 4 = "caps"
+		//$$ L3 PROP_U32 = "f_min"
+		//$$ L3 PROP_U32 = "f_max"
+		//$$ L3 PROP_U32 = "f_max_w"
+		//$$ L3 PROP_U32 = "max_req_size"
+		//$$ L2 PROP_STR = "gpio_dat3"
+		//$$ L2 PROP_U32 = "card_type"
+		emmc {
+			status = "okay";
+			/**	0:sdio_a,
+				1:sdio_b,
+				2:sdio_c,
+				3:sdhc_a,
+				4:sdhc_b,
+				5:sdhc_c */
+			port = <5>;
+			pinname = "emmc";
+			ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
+			caps = "MMC_CAP_8_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+			caps2 = "MMC_CAP2_HS200_1_8V_SDR";
+			f_min = <300000>;
+			f_max = <100000000>;
+			max_req_size = <0x20000>; // 128KB
+			gpio_dat3 = "BOOT_3";
+			card_type = <1>;
+			/**	0:unknown,
+				1:mmc card(include eMMC),
+				2:sd card(include tSD),
+				3:sdio device(ie:sdio-wifi),
+				4:SD combo (IO+mem) card,
+				5:NON sdio device(means sd/mmc card),
+				other:reserved **/
+		};
+	};
+
+/// ****************************************************************************
+///	-	I2C
+//$$ MODULE="I2C"
+//$$ DEVICE="I2C_AO"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+//$$ L3 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "I2C_AO_pin_match" = "pinctrl-0"
+	i2c@c8100500{ /*I2C-AO*/
+		compatible = "amlogic,aml_i2c";
+		dev_name = "i2c-AO";
+		status = "ok";
+		reg = <0xc8100500 0x1d>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		device_id = <0>;
+		pinctrl-names="default";
+		pinctrl-0=<&ao_i2c_master>;
+		use_pio = <0>;
+		master_i2c_speed = <100000>;
+	};
+
+//$$ DEVICE = "I2C_A"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+//$$ L3 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "I2C_A_pin_match" = "pinctrl-0"
+	i2c@c1108500{ /*I2C-A*/
+		compatible = "amlogic,aml_i2c";
+		dev_name = "i2c-A";
+		status = "ok";
+		reg = <0xc1108500 0x20>;
+		device_id = <1>;
+		pinctrl-names="default";
+		pinctrl-0=<&a_i2c_master>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		use_pio = <0>;
+		master_i2c_speed = <300000>;
+	};
+
+//$$ DEVICE="I2C_B"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2="reg"
+//$$ L3 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "I2C_B_pin_match" = "pinctrl-0"
+	i2c@c11087c0{ /*I2C-B*/
+		compatible = "amlogic,aml_i2c";
+		dev_name = "i2c-B";
+		status = "ok";
+		reg = <0xc11087c0 0x20>;
+		device_id = <2>;
+		pinctrl-names="default";
+		pinctrl-0=<&b_i2c_master>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		use_pio = <0>;
+		master_i2c_speed = <300000>;
+ 	};
+
+//$$ DEVICE="I2C_C"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2="reg"
+//$$ L3 PROP_STR = "pinctrl-names"
+	i2c@c11087e0{ /*I2C-C*/
+		compatible = "amlogic,aml_i2c";
+		dev_name = "i2c-C";
+		status = "ok";
+		reg = <0xc11087e0 0x20>;
+		device_id = <3>;
+		pinctrl-names="default";
+//		pinctrl-0=<&c_i2c_master>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		use_pio = <0>;
+		master_i2c_speed = <300000>;
+	};
+
+//$$ DEVICE="I2C_D"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2="reg"
+//$$ L3 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "I2C_D_pin_match" = "pinctrl-0"
+	i2c@c1108d20{ /*I2C-D*/
+		compatible = "amlogic,aml_i2c";
+		dev_name = "i2c-D";
+		status = "ok";
+		reg = <0xc1108d20 0x20>;
+		device_id = <4>;
+		pinctrl-names="default";
+		pinctrl-0=<&d_i2c_master>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		use_pio = <0>;
+		master_i2c_speed = <300000>;
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	VPU
+//$$ MODULE="VPU"
+//$$ DEVICE="vpu"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_U32 = "clk_level"
+	vpu{
+		compatible = "amlogic,vpu";
+		dev_name = "vpu";
+		status = "ok";
+		clk_level = <7>;
+		/**	0: 106.25M	1: 127.5M	2: 159.375M
+			3: 182.15M	4: 212.5M	5: 255M
+			6: 318.75M	7: 364.3M	*/
+		};
+
+
+
+
+/// ****************************************************************************
+/// -   DISP&MM-FB
+//$$ MODULE = "DISP&MM-FB"
+//$$ DEVICE = "mesonfb"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 4 ="reg"
+//$$ L2 PROP_U32 = "vmode"
+//$$ L2 PROP_U32 5 = "display_size_default"
+	mesonfb{
+		compatible = "amlogic,mesonfb";
+		dev_name = "mesonfb";
+		status = "okay";
+		reserve-memory = <0x01800000  0x00100000>;
+		reserve-iomap = "true";
+		vmode = <3>;
+		/**	0:VMODE_720P
+			1:VMODE_LCD
+			2:VMODE_LVDS_1080P
+			3:VMODE_1080P*/
+		scale_mode = <1>; /*0:default 1:new*/
+		4k2k_fb = <0>;
+		display_size_default = <1920 1080 1920 3240 32>;
+		/** 1920*1080*4*3 = 0x17BB000 **/
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-A/V stream
+//$$ MODULE = "DISP&MM-A/V stream"
+//$$ DEVICE="mesonstream"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 4 ="reg"
+	mesonstream {
+		compatible = "amlogic,mesonstream";
+		dev_name = "mesonstream.0";
+		status = "okay";
+		reserve-memory = <0x02000000>; // 32M
+		reserve-iomap = "true";
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-A/V video dec
+// MODULE = "DISP&MM-A/V video dec"
+// DEVICE = "vdec"
+// L2 PROP_STR = "status"
+// L3 PROP_U32 4 ="reg"
+	vdec {
+		compatible = "amlogic,vdec";
+		dev_name = "vdec.0";
+		status = "okay";
+		reserve-memory = <0x04000000>; // 64M
+		reserve-iomap = "true";
+		linux,contiguous-region = <&mem_4k2k_decoder>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	picture decoder
+//$$ MODULE="picture decoder"
+//$$ DEVICE="picdec"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	picdec {
+		compatible = "amlogic,picdec";
+		dev_name = "picdec";
+		status = "okay";
+		share-memory-name = "vdec0";
+		share-memory-offset = <0>;
+		share-memory-size = <0x04000000>; //64M
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-PostProcess
+//$$ MODULE="DISP&MM-PostProcess"
+//$$ DEVICE="ppmgr"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	ppmgr {
+		compatible = "amlogic,ppmgr";
+		dev_name = "ppmgr";
+		status = "okay";
+		reserve-memory = <0x01000000>; // 16M
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-AVC Video Encoder
+//$$ MODULE = "DISP&MM-AVC Video Encoder"
+//$$ DEVICE="amvenc_avc"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	amvenc_avc{
+		compatible = "amlogic,amvenc_avc";
+		dev_name = "amvenc_avc.0";
+		status = "okay";
+		linux,contiguous-region = <&cma_0>;
+		reserve-iomap = "true";
+	};
+
+
+/// ****************************************************************************
+///	-	deinterlace
+// DEVICE="deinterlace"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+	deinterlace{
+		compatible = "amlogic,deinterlace";
+		dev_name = "deinterlace";
+		status = "ok";
+		reserve-memory = <0x024c0000>;
+		/** 8x(1920x1088x(3/2+1/5)+1088/2)=33M **/
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-VDIN
+// MODULE = "DISP&MM-VDIN"
+// DEVICE="vdin0"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+// L2 PROP_U32 = "irq"
+// L2 PROP_U32 = "vdin_id"
+	vdin0{
+		compatible = "amlogic,vdin";
+		dev_name = "vdin0";
+		status = "ok";
+		reserve-memory = <0x01000000>;
+		max_size = <1920 1080>;//1920x1080x2x4=17M
+		irq = <115>;
+		vdin_id = <0>;
+	};
+
+// DEVICE="vdin1"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+// L2 PROP_U32 = "irq"
+// L2 PROP_U32 = "vdin_id"
+	vdin1 {
+		compatible = "amlogic,vdin";
+		dev_name = "vdin1";
+		status = "ok";
+		reserve-memory = <0x01000000>;
+		miracast_size = <1920 1080>;//1920x1080x2x4=17M
+		irq = <117>;
+		vdin_id = <1>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	ION
+//$$ MODULE="ION"
+//$$ DEVICE="ion_dev"
+//$$ L2 PROP_STR = "status"
+	ion_dev {
+		compatible = "amlogic,ion_dev";
+		dev_name = "ion_dev";
+		status = "ok";
+		reserve-memory = <0x01000000>; //16M
+	};
+
+
+/// ****************************************************************************
+///	-	DISP&MM-Vout
+//$$ MODULE = "DISP&MM-Vout"
+//$$ DEVICE = "mesonvout"
+//$$ L2 PROP_STR = "status"
+	mesonvout {
+		compatible = "amlogic,mesonvout";
+		dev_name = "mesonvout";
+		status = "okay";
+	};
+
+
+/// ****************************************************************************
+/// -   Audio
+//$$ MODULE="Audio"
+//$$ DEVICE="audio_i2s"
+//$$ L2 PROP_STR = "status"
+	audio_platform {
+		compatible = "amlogic,aml-i2s";
+		dev_name = "aml-i2s.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_i2s_dai"
+	//$$ L2 PROP_STR = "status"
+	audio_dai {
+		compatible = "amlogic,aml-i2s-dai";
+		dev_name = "aml-i2s-dai.0";
+		status = "okay";
+	};
+
+	audio_spdif_dai {
+		compatible = "amlogic,aml-spdif-dai";
+		dev_name = "aml-spdif-dai.0";
+		status = "okay";
+	};
+
+	audio_spdif_codec {
+		compatible = "amlogic,aml-spdif-codec";
+		dev_name = "spdif-dit.0";
+		pinctrl-names = "aml_audio_spdif";
+		//pinctrl-0 = <&audio_spdif_pins>;
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm2BT_codec"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm2BT_codec {
+		compatible = "amlogic,pcm2BT-codec";
+		dev_name = "pcm2bt.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm_dai"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm_dai {
+		compatible = "amlogic,aml-pcm-dai";
+		dev_name = "aml-pcm-dai.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm {
+		compatible = "amlogic,aml-pcm";
+		dev_name = "aml-pcm.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_m8_audio"
+	//$$ L2 PROP_STR = "status"
+	audio_m8_audio {
+		compatible = "amlogic,m8_audio_codec";
+		dev_name = "aml_m8_codec.0";
+		status = "disable";
+	};
+
+	audio_pmu3_audio {
+		compatible = "amlogic,aml_pmu3_codec";
+		dev_name = "aml_pmu3_codec.0";
+		status = "disable";
+	};
+
+	aml_audio_codec {
+		compatible = "amlogic,audio_codec";
+
+		dummy:dummy {
+			codec_name = "dummy_codec";
+			status = "okay";
+		};
+
+		rt5616:rt5616 {
+			codec_name = "rt5616";
+			i2c_addr = <0x1B>;
+			i2c_bus = "i2c_bus_d";
+			id_reg = <0x00>;
+			id_val = <0x21>;
+			capless = <0>;
+			status = "disable";
+		};
+
+		rt5631:rt5631 {
+			codec_name = "rt5631";
+			i2c_addr = <0x1A>;
+			i2c_bus = "i2c_bus_b";
+			id_reg = <0x00>;
+			id_val = <0x01>;
+			capless = <0>;
+			status = "disable";
+		};
+
+		wm8960:wm8960 {
+			codec_name = "wm8960";
+			i2c_addr = <0x1A>;
+			i2c_bus = "i2c_bus_b";
+			capless = <1>;
+			status = "disable";
+		};
+
+		pmu3:pmu3 {
+			codec_name = "amlpmu3";
+			status = "disable";
+		};
+	};
+
+	//$$ DEVICE="dummy_codec_audio"
+	//$$ L2 PROP_STR = "status"
+	//$$ L2 PROP_STR = "pinctrl-names"
+	//$$ L3 PROP_CHOICE "dummy_codec_audio_0_pin_match" = "pinctrl-0"
+	dummy_codec_audio {
+		status = "okay";
+		compatible = "amlogic,aml_dummy_codec_audio";
+		dev_name = "aml_dummy_codec_audio.0";
+		pinctrl-names = "dummy_codec_audio";
+		pinctrl-0 = <&aml_dummy_codec_pins>;
+	};
+
+	//$$ DEVICE="dummy_codec"
+	//$$ L2 PROP_STR = "status"
+	dummy_codec {
+		status = "okay";
+		compatible = "amlogic,aml_dummy_codec";
+		dev_name = "dummy_codec.0";
+	};
+
+
+
+	//$$ DEVICE="aml_m8_sound_card"
+	//$$ L2 PROP_STR = "aml,sound_card"
+	//$$ L2 PROP_STR = "aml,codec_dai"
+	//$$ L2 PROP_STR 6*2 = "aml,audio-routing"
+	//$$ L2 PROP_STR = "mute_gpio"
+	//$$ L2 PROP_U32 5 = "hp_paraments"
+	//$$ L2 PROP_STR = "pinctrl-names"
+	//$$ L2 PROP_CHOICE "Audio_pin_0_match" = "pinctrl-0"
+	//$$ L2 PROP_STR = "status"
+	aml_m8_sound_card {
+		compatible = "sound_card, aml_snd_m8";
+		aml,sound_card = "AML-M8AUDIO";
+		aml,codec_dai = "AML-M8","dummy_codec";
+		//aml,codec_name = "aml_m8_codec.0","rt5616.4-001b";
+		//aml,audio-codec = <&rt5616>;
+		aml,audio-routing-rt5616 =
+			"Ext Spk","LOUTL",
+			"Ext Spk","LOUTR",
+			"HP","HPOL",
+			"HP","HPOR",
+			"micbias1","MAIN MIC",
+			"IN2P","micbias1";
+		aml,audio-routing-amlm8 =
+			"Ext Spk","LINEOUTL",
+			"Ext Spk","LINEOUTR",
+			"HP","HP_L",
+			"HP","HP_R",
+			"MICBIAS","MAIN MIC",
+			"LINPUT1","MICBIAS";
+		aml,audio-routing-dummy=
+			"Ext Spk","LOUTL",
+			"Ext Spk","LOUTR";
+
+		mute_gpio = "GPIO_BSD_EN";
+		hp_disable;
+		hp_paraments = <800 300 0 5 1>;
+		pinctrl-names = "aml_snd_m8";
+		//pinctrl-0 = <&audio_pins>;
+		status = "okay";
+	};
+
+
+
+/// ****************************************************************************
+/// -   GPIO
+//$$ MODULE="GPIO"
+//$$ DEVICE="g9tv-gpio"
+	gpio:gpio{
+		compatible = "amlogic,g9tv-gpio";
+		dev_name = "gpio";
+		#gpio-cells=<2>;
+	};
+
+
+
+/// ****************************************************************************
+/// -   Pinmux
+//$$ MODULE="Pinmux"
+//$$ DEVICE="pinmux-m8"
+	pinmux {
+		compatible = "amlogic,pinmux-g9tv";
+		dev_name = "pinmux";
+		#pinmux-cells=<2>;
+
+		//$$ MATCH "uart_ao_pin_match" = "&ao_uart_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		ao_uart_pins:ao_uart {
+			amlogic,setmask = <10 0x1800>;
+			amlogic,pins = "GPIOAO_0", "GPIOAO_1";
+		};
+
+		//$$ MATCH "uart_0_pin_match" = "&a_uart_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 4 = "amlogic,pins"
+		a_uart_pins:a_uart {
+			amlogic,setmask=<4 0x3c00>;
+			amlogic,pins="GPIOX_12", "GPIOX_13", "GPIOX_14", "GPIOX_15";
+		};
+
+		//$$ MATCH "Card_pin_0_match" = "&sdhc_b_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_b_pins:sdhc_b_pin {
+			amlogic,setmask=<2 0xf0>;
+			amlogic,clrmask=<2 0xfc00>;
+			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+		};
+
+		//$$ MATCH "Card_pin_1_match" = "&sdhc_c_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_c_pins:sdhc_c_pin {
+			amlogic,setmask=<6 0x3f000000>;
+			amlogic,clrmask=<4 0x6c000000 2 0x4c00000>;
+			amlogic,pins="BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_10","BOOT_11";
+		};
+
+		//$$ MATCH "Card_pin_2_match" = "&sdhc_a_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_a_pins:sdhc_a_pin {
+			amlogic,setmask=<8 0x3f>;
+			amlogic,clrmask=<5 0x6c00 >;
+			amlogic,pins="GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+		};
+
+		//$$ MATCH "sdio_pin_5_match" = "&sdio_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdio_all_pins:sdio_all_pins {
+			amlogic,setmask = <8 0x0000003f>;	/*sdio a*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   2 0x0000fc00		/*sdio b*/
+					   5 0x00006c00>;	/*sdhc a*/
+			amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_4_match" = "&sdio_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdio_clk_cmd_pins:sdio_clk_cmd_pins {
+			amlogic,setmask = <8 0x00000003>;	/*sdio a*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   2 0x0000fc00		/*sdio b*/
+					   5 0x00006c00>;	/*sdhc a*/
+			amlogic,pins = "GPIOX_8","GPIOX_9"; /** GPIOX_8:CLK, GPIOX_9:CMD */
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "sdio_pin_1_match" = "&sd_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_all_pins:sd_all_pins {
+			amlogic,setmask = <2 0x0000fc00>;	/*sdio b*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   8 0x0000063f		/*sdio a, UART*/
+					   2 0x000000f0>;	/*sdhc b*/
+			amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_6_match" = "&sd_1bit_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_1bit_pins:sd_1bit_pins {
+			amlogic,setmask = <2 0x00008c00>;	/*sdio b*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   8 0x0000003f		/*sdio a*/
+					   2 0x000000f0>;	/*sdhc b*/
+			amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "sdio_pin_0_match" = "&sd_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_clk_cmd_pins:sd_clk_cmd_pins {
+			amlogic,setmask=<2 0x00000c00>;         /*sdio b*/
+			amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+					8 0x0000003f        /*sdio a*/
+					2 0x000000f0>;      /*sdhc b*/
+			amlogic,pins = "CARD_2","CARD_3"; /** CARD_2:CLK, CARD_3:CMD */
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_3_match" = "&emmc_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		emmc_all_pins:emmc_all_pins {
+			amlogic,setmask=<6 0x3f000000>;         /*sdio c*/
+			amlogic,clrmask=<2 0x04c0fc00           /*sdio b & nand*/
+					8 0x0000003f        /*sdio a*/
+					4 0x6c000000>;        /*sdhc c*/
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_16","BOOT_17";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_2_match" = "&emmc_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		emmc_clk_cmd_pins:emmc_clk_cmd_pins{
+		amlogic,setmask=<6 0x03000000>;         /*bit[24-25] */
+		amlogic,clrmask=<2 0x04c0fc00           /*sdio b & nand*/
+				8 0x0000003f        /*sdio a*/
+				4 0x6c000000>;        /*sdhc c*/
+		amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+		amlogic,enable-output=<1>; /** 0:output, 1:input */
+		amlogic,pullup=<1>;
+		amlogic,pullupen=<1>;
+		};
+
+		sdhc_sd_clk_cmd_pins:sdhc_sd_clk_cmd_pins {
+			amlogic,setmask = <2 0x00000030>;	/*sdhc b*/
+			amlogic,clrmask = <5 0x00007c00		/*sdhc a*/
+					   4 0x7c000000		/*sdhc c*/
+					   2 0x0000fc00		/*sdio b*/
+					   8 0x00000600>;	/*UART*/
+			amlogic,pins = "CARD_2","CARD_3"; /* CARD_2:CLK, CARD_3:CMD */
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_sd_all_pins:sdhc_sd_all_pins {
+			amlogic,setmask = <2 0x000000f0>;	/*sdhc b*/
+			amlogic,clrmask = <5 0x00007c00		/*sdhc a*/
+					   4 0x7c000000		/*sdhc c*/
+					   2 0x0000fc00		/*sdio b*/
+					   8 0x00000600>;	/*UART*/
+			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output = <1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_emmc_clk_cmd_pins:sdhc_emmc_clk_cmd_pins {
+			amlogic,setmask = <4 0x0c000000>;	/*bit[26-27] */
+			amlogic,clrmask = <2 0x04c000f0		/*sdhc b & nand*/
+					   5 0x00007c00		/*sdhc a*/
+					   6 0x3f000000>;	/*sdio c*/
+			amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_emmc_all_pins:sdhc_emmc_all_pins {
+			amlogic,setmask = <4 0x7c000000>;	/*sdhc c*/
+			amlogic,clrmask = <2 0x04c000f0		/*sdhc b & nand*/
+					   5 0x00007c00		/*sdhc a*/
+					   6 0x3b000000>;	/*sdio c*/
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4","BOOT_5","BOOT_6","BOOT_7","BOOT_16","BOOT_17";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		sdhc_sdio_clk_cmd_pins:sdhc_sdio_clk_cmd_pins {
+			amlogic,setmask = <5 0x00000c00>;	/*sdhc a bit[10-11] */
+			amlogic,clrmask = <2 0x058000f0		/*sdhc b*/
+					   4 0x7c000000		/*sdhc c */
+					   8 0x0000003f>;	/*sdio a*/
+			amlogic,pins = "GPIOX_8","GPIOX_9"; /** BOOT_16:CMD, BOOT_17:CLK */
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+		sdhc_sdio_all_pins:sdhc_sdio_all_pins {
+			amlogic,setmask = <5 0x00006c00>;	/*sdhc a*/
+			amlogic,clrmask = <2 0x058000f0		/*sdhc b*/
+					   4 0x7c000000		/*sdhc c */
+					   8 0x0000003f>;	/*sdio a*/
+			amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "I2C_AO_pin_match" = "&ao_i2c_master"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		ao_i2c_master:ao_i2c{
+			amlogic,setmask=<10 0x60>;
+			amlogic,clrmask=<10 0x1800006>;
+			amlogic,pins="GPIOAO_4","GPIOAO_5";
+		};
+
+		//$$ MATCH "I2C_A_pin_match" = "&a_i2c_master"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		a_i2c_master:a_i2c{
+//			amlogic,setmask=<5 0x300>;
+//			amlogic,clrmask=<6 0xc00000 3 0x1000000 9 0x8000 7 0x1800000 >;
+//			amlogic,pins="GPIOH_7","GPIOH_8";
+
+//			amlogic,setmask=<5 0xc0000000>;
+//			amlogic,clrmask=<6 0xc 2 0xc000003 7 0x18000000>;
+//			amlogic,pins="GPIOZ_17","GPIOZ_18";
+
+			amlogic,setmask=<6 0xc0000000>;
+			amlogic,clrmask=<7 0x6000000>;
+			amlogic,pins="GPIOW_0","GPIOW_1";
+		};
+
+		//$$ MATCH "I2C_B_pin_match" = "&b_i2c_master"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		b_i2c_master:b_i2c{
+			amlogic,setmask=<6 0x300000>;
+			amlogic,clrmask=<10 0x3000006>;
+			amlogic,pins="GPIOW_17","GPIOW_18";
+
+//			amlogic,setmask=<10 0x30000>;
+//			amlogic,clrmask=<3 0x20 9 0x301>;
+//			amlogic,pins="GPIOY_10","GPIOY_11";
+
+//			amlogic,setmask=<10 0xc000>;
+//			amlogic,clrmask=<9 0xf00000c0>;
+//			amlogic,pins="GPIOY_12","GPIOY_13";
+
+		};
+
+		// MATCH "I2C_C_pin_match" = "&c_i2c_master"
+		// L2 PROP_U32 2 = "amlogic,setmask"
+		// L2 PROP_U32 2 = "amlogic,clrmask"
+		// L2 PROP_STR 2 = "amlogic,pins"
+//		c_i2c_master:c_i2c{
+//			amlogic,setmask=<6 0x30000>;
+//			amlogic,clrmask=<5 0x6000 8 0x8000030 0 0x42 7 0x3 3 0x30000 9 0x60000>;
+//			amlogic,pins="GPIOX_0","GPIOX_1";
+
+//			amlogic,setmask=<6 0xc0000>;
+//			amlogic,clrmask=<10 0x3cc00001>;
+//			amlogic,pins="GPIOW_19","GPIOW_20";
+
+//			amlogic,setmask=<10 0xc0000>;
+//			amlogic,clrmask=<3 0x20 9 0x7000001 10 0x3c0000>;
+//			amlogic,pins="GPIOY_7","GPIOY_8";
+
+
+//		};
+
+		//$$ MATCH "I2C_D_pin_match" = "&d_i2c_master"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		d_i2c_master:d_i2c{
+			amlogic,setmask=<4 0xc>;
+			amlogic,clrmask=<4 0xc0 1 0x48c0000>;
+			amlogic,pins="GPIOH_5","GPIOH_6";
+		};
+
+		//$$ MATCH "remote_pin_0_match" = "&remote_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR = "amlogic,pins"
+		remote_pins:remote_pin {
+			amlogic,setmask = <10 0x1>;
+			amlogic,pins = "GPIOAO_7";
+		};
+
+		//$$ MATCH "lcd_bl_pwm_a_pins_match" = "&lcd_bl_pwm_a_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR = "amlogic,pins"
+		lcd_bl_pwm_a_pins:lcd_bl_pwm_a_pin {
+			amlogic,setmask = <9 0x80000000>;
+			amlogic,clrmask = <9 0x40000000
+					   10 0x8000
+					   9 0x80>;
+			amlogic,pins = "GPIOY_12";
+		};
+
+		//$$ MATCH "lcd_bl_pwm_vs_pins_match" = "&lcd_bl_pwm_vs_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR = "amlogic,pins"
+		lcd_bl_pwm_vs_pins:lcd_bl_pwm_vs_pin {
+			amlogic,setmask = <9 0x40000000>;
+			amlogic,clrmask = <9 0x80000000
+					   10 0x8000
+					   9 0x80>;
+			amlogic,pins = "GPIOY_12";
+		};
+
+
+
+		//$$ MATCH "aml_dummy_codec_pins_match" = "&aml_dummy_codec_pins"
+		//$$ L2 PROP_U32 4 = "amlogic,setmask"
+		//$$ L2 PROP_U32 10 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		aml_dummy_codec_pins:aml_dummy_codec_pins {
+			amlogic,setmask = <8 0x6A00000
+					   3 0x800000>;
+			amlogic,clrmask = <8 0x1461000
+					   1 0x1
+					   3 0x5400000
+					   7 0x10000000>;
+			amlogic,pins = "GPIOZ_14", "GPIOZ_15", "GPIOZ_16", "GPIOZ_17", "GPIOZ_19";
+		};
+
+		//$$ MATCH "dvb_p_ts0_pins_match" = "&dvb_p_ts0_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 12 = "amlogic,pins"
+		/*dvb_p_ts0_pins:dvb_p_ts0_pins {
+			amlogic,setmask = <3 0x3F>;
+			amlogic,clrmask = <1 0xCCC41
+					   4 0x2000000
+					   7 0x20000000
+					   9 0x431F>;
+			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+		};
+		*/
+
+		//$$ MATCH "dvb_s_ts0_pins_match" = "&dvb_s_ts0_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 12 = "amlogic,pins"
+		/*dvb_s_ts0_pins:dvb_s_ts0_pins {
+			amlogic,setmask = <3 0x2F>;
+			amlogic,clrmask = <1 0xCCC41
+					   4 0x2000000
+					   7 0x20000000
+					   9 0x4310>;
+			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+		};
+		*/
+
+		//$$ MATCH "dvb_fe_pins_match" = "&dvb_fe_pins"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 1 = "amlogic,pins"
+		/*
+		dvb_fe_pins: dvb_fe_pins {
+			amlogic,clrmask = <1 0x38
+					   3 0x18000
+					   4 0x1800000
+					   9 0xC0>;
+			amlogic,pins = "GPIOY_5","GPIOY_6";
+		};
+		*/
+
+		/*
+		smc_pins:smc_pins {
+			amlogic,setmask = <5 0x000000c0>;
+			amlogic,clrmask = <3 0x00000020
+					   9 0xc>;
+			amlogic,pins = "GPIOY_13","GPIOY_14";
+		};*/
+
+	}; /* end of pinmux */
+
+
+
+/// ****************************************************************************
+///	-	DVB
+//$$ MODULE="DVB"
+
+//$$ DEVICE="dvb"
+//$$ L2 PROP_STR = "ts0"
+//$$ L2 PROP_U32 = "ts0_invert"
+//$$ L2 PROP_U32 = "ts0_control"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "dvb_p_ts0_pins_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "dvb_s_ts0_pins_match" = "pinctrl-1"
+	dvb {
+		compatible = "amlogic,dvb";
+		/*"parallel","serial","disable"*/
+		ts2 = "parallel";
+		ts2_control = <0>;
+		ts2_invert = <0>;
+		//pinctrl-names = "p_ts0", "s_ts0";
+		//pinctrl-0 = <&dvb_p_ts0_pins>;
+		//pinctrl-1 = <&dvb_s_ts0_pins>;
+	};
+
+//$$ DEVICE="dvbfe"
+//$$ L2 PROP_STR = "dtv_demod0"
+//$$ L2 PROP_U32 = "dtv_demod0_i2c_adap_id"
+//$$ L2 PROP_U32 = "dtv_demod0_i2c_addr"
+//$$ L2 PROP_U32 = "dtv_demod0_reset_value"
+//$$ L2 PROP_STR = "dtv_demod0_reset_gpio"
+//$$ L2 PROP_U32 = "fe0_dtv_demod"
+//$$ L2 PROP_U32 = "fe0_ts"
+//$$ L2 PROP_U32 = "fe0_dev"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "dvb_fe_pins_match" = "pinctrl-0"
+	dvbfe {
+		compatible = "amlogic,dvbfe";
+		dtv_demod0 = "AMLDEMOD";
+		//dtv_demod0_i2c_adap_id = <2>;
+		//dtv_demod0_i2c_addr = <0xC0>;
+		//dtv_demod0_reset_value = <0>;
+		//dtv_demod0_reset_gpio = "GPIOY_5";
+		fe0_dtv_demod = <0>;
+		fe0_ts = <2>;
+		fe0_dev = <0>;
+		//pinctrl-names = "default";
+		//pinctrl-0 = <&dvb_fe_pins>;
+	};
+
+	/*smartcard {
+		compatible = "amlogic,smartcard";
+		smc0_irq = <69>;
+		smc0_enable_pin = "GPIOY_12";
+		smc0_enable_level = <1>;
+		smc0_reset_pin = "GPIOY_6";
+		smc0_reset_level = <0>;
+		smc0_clk_pinmux_reg = <0x2031>;
+		smc0_clk_pinmux_bit = <0x80>;
+		smc0_clk_oen_reg = <0x200f>;
+		smc0_clk_out_reg = <0x2010>;
+		smc0_clk_bit = <0x2000>;
+		smc0_det_pin = "GPIOY_7";
+		pinctrl-names = "default";
+		pinctrl-0 = <&smc_pins>;
+	};*/
+
+}; /* end of root */
diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_skt.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_skt.dtd
new file mode 100644
index 000000000000..f88e27daaff5
--- /dev/null
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_skt.dtd
@@ -0,0 +1,1524 @@
+/dts-v1/;
+/{
+	compatible = "AMLOGIC,T866_G9TV";
+	model = "AMLOGIC";
+	interrupt-parent = <&gic>;
+	#address-cells = <1>;
+	#size-cells = <1>;
+
+
+
+/// ****************************************************************************
+///	-	CPU
+//$$ MODULE="CPU"
+	cpus {
+		#address-cells = <1>;
+		#size-cells = <0>;
+
+		//$$ DEVICE="cpu0"
+		cpu@0 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x200>;
+		};
+
+		//$$ DEVICE="cpu1"
+		cpu@1 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x1>;
+		};
+
+		//$$ DEVICE="cpu2"
+		cpu@2 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x2>;
+		};
+
+		//$$ DEVICE="cpu3"
+		cpu@3 {
+			device_type = "cpu";
+			compatible = "arm,cortex-a9";
+			reg = <0x3>;
+		};
+	};
+
+
+
+/// ****************************************************************************
+///	-	Cache
+//$$ MODULE="Cache"
+//$$ DEVICE="cache"
+	cache-controller {
+		compatible = "arm,meson-pl310-cache";
+		reg = <0xc4200000 0x1000>;
+		arm,data-latency = <3 3 3>;
+		arm,tag-latency = <2 2 2>;
+		cache-unified;
+		cache-level = <2>;
+		aux-instruction_prefetch;
+		aux-data_prefetch;
+		aux-ns_lockdown;
+		aux-force_no_write_alloc;
+		aux-cache_replace_policy_round_robin;
+		aux-early_write_response;
+		aux-full_line_of_zero;
+		aux-ns_int_ctrl;
+		aux-share_override;
+		prefetch-double_line_fill;
+		prefetch-prefetch_drop;
+		prefetch-prefetch_offset = <7>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	Memory
+//$$ MODULE="Memory"
+//$$ DEVICE="memory"
+//$$ L2 PROP_U32 = "aml_reserved_start"
+//$$ L2 PROP_U32 = "aml_reserved_end"
+//$$ L2 PROP_U32 6 = "linux,usable-memory"
+	memory {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		device_type = "memory";
+		aml_reserved_start = <0x06000000>; /**reserved memory start */
+		aml_reserved_end = <0x05000000>; /** reserved memory end : dtb start for uboot */
+		phys_offset = <0x00000000>;
+		linux,total-memory = <0x40000000>;
+
+//$$ DEVICE="mem_4k2k_decoder"
+//$$ L3 PROP_U32 2 ="reg"
+		mem_4k2k_decoder: region@1 {
+			region_name = "cma_4k2k";
+			linux,contiguous-region;
+			reg = <0x00000000 0x0c000000>;
+		};
+
+		cma_0:region@0 {
+			region_name = "cma_0";
+			reg = <0 0x00f00000>;
+			linux,contiguous-region;
+		};
+	};
+
+
+
+/// ****************************************************************************
+///	-	GIC
+//$$ MODULE="GIC"
+//$$ DEVICE="gic"
+	gic:interrupt-controller {
+		compatible = "arm,cortex-a9-gic";
+		reg = <0xc4301000 0x1000
+		       0xc4300100 0x0100>;
+		interrupt-controller;
+		#interrupt-cells = <3>;
+		#address-cells = <0>;
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	UART
+//$$ MODULE="UART"
+//$$ DEVICE="uart_ao"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_STR = "pinctrl-names"
+//$$ L3 PROP_CHOICE "uart_ao_pin_match" = "pinctrl-0"
+	uart_ao {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_ao";
+		status = "okay";
+		dev_name = "uart_ao";
+		pinctrl-names = "default";
+		pinctrl-0 = <&ao_uart_pins>;
+	};
+
+	//$$ DEVICE="uart_0"
+	//$$ L2 PROP_STR = "status"
+	uart_0 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_a";
+		status = "okay";
+		dev_name = "uart_0";
+		//pinctrl-names = "default";
+		//pinctrl-0 = <&a_uart_pins>;
+	};
+
+	//$$ DEVICE="uart_1"
+	//$$ L2 PROP_STR = "status"
+	uart_1 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_b";
+		status = "disabled";
+		dev_name = "uart_1";
+	};
+
+	//$$ DEVICE="uart_2"
+	//$$ L2 PROP_STR = "status"
+	uart_2 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_c";
+		status = "disabled";
+		dev_name = "uart_2";
+	};
+
+	//$$ DEVICE="uart_3"
+	//$$ L2 PROP_STR = "status"
+	uart_3 {
+		compatible = "amlogic,aml_uart";
+		port_name = "uart_d";
+		status = "ok";
+		dev_name = "uart_3";
+	};
+
+
+
+
+
+/// ***************************************************************************************
+///	-	Input
+//$$ DEVICE="saradc"
+//$$ L2 PROP_STR = "status"
+		saradc{
+			compatible = "amlogic,saradc";
+			status = "okay";
+		};
+
+//$$ DEVICE="adc_keypad"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_STR = "key_name"
+//$$ L2 PROP_U32 = "key_num"
+//$$ L2 PROP_U32 2 = "key_code"
+//$$ L2 PROP_U32 2 = "key_chan"
+//$$ L2 PROP_U32 2 = "key_val"
+//$$ L2 PROP_U32 2 = "key_tolerance"
+    adc_keypad{
+			compatible = "amlogic,adc_keypad";
+			status = "okay";
+			key_name = "menu", "vol-","vol+", "esc", "home";
+			key_num = <5>;
+			key_code = <139 114 115 1 102>;
+			key_chan = <0 0 0 0 0>;
+			key_val = <0 139 267 388 513>; //voltage=0/252/478/692/824mV, val=voltage/1800mV*1023
+			key_tolerance = <40 40 40 40 40>;
+	};
+/// ****************************************************************************
+//$$ DEVICE="meson-remote"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_U32 = "ao_baseaddr"
+//$$ L2 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "remote_pin_0_match" = "pinctrl-0"
+	meson-remote{
+		compatible = "amlogic,aml_remote";
+		dev_name = "meson-remote";
+		status = "ok";
+		ao_baseaddr = <0xf3100480>;
+		pinctrl-names="default";
+		pinctrl-0=<&remote_pins>;
+	};
+
+
+/// ***************************************************************************************
+/// ***************************************************************************************^M
+//$$ DEVICE="meson-eth"
+//$$ L2 PROP_STR = "status"
+    meson-eth{
+                compatible = "amlogic,meson-eth";
+                dev_name = "meson-eth";
+                status = "okay";
+                ethbaseaddr = <0xfe0c0000>;
+                interruptnum = <40>;
+                new_maclogic = <1>;
+                used_pmu4_phy = <1>;
+        };
+/// ***************************************************************************************
+///	-	HDMI
+//$$ MODULE="HDMI"
+//$$ DEVICE="amhdmitx"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_CHOICE "HDMI_vend-data_match" = "vend-data"
+//$$ L2 PROP_CHOICE "HDMI_pwr-ctrl_match" = "pwr-ctrl"
+    amhdmitx{
+		compatible = "amlogic,amhdmitx";
+		dev_name = "amhdmitx";
+		status = "ok";
+        vend-data = <&vend_data>;
+        pwr-ctrl = <&pwr_ctrl>;
+
+//$$ MATCH "HDMI_vend-data_match" = <&vend_data>
+//$$ L2 PROP_STR = "vendor_name"
+//$$ L2 PROP_U32 = "vendor_id"
+//$$ L2 PROP_STR = "product_desc"
+//$$ L2 PROP_STR = "cec_osd_string"
+        vend_data: vend_data{
+            vendor_name = "Amlogic";           /* Max Chars: 8     */
+            vendor_id = <0x000000>;                 /* Refer to http://standards.ieee.org/develop/regauth/oui/oui.txt   */
+            product_desc = "G9TV MBox";        /* Max Chars: 16    */
+            cec_osd_string = "Amlogic MBox";        /* Max Chars: 14    */
+        };
+
+//$$ MATCH "HDMI_pwr-ctrl_match" = <&pwr_ctrl>
+//$$ L2 PROP_STR = "pwr_5v_on"
+//$$ L2 PROP_STR = "pwr_5v_off"
+//$$ L2 PROP_STR = "pwr_3v3_on"
+//$$ L2 PROP_STR = "pwr_3v3_off"
+//$$ L2 PROP_STR = "pwr_hpll_vdd_on"
+//$$ L2 PROP_STR = "pwr_hpll_vdd_off"
+        pwr_ctrl: pwr_ctrl{
+            pwr_5v_on = "";
+            pwr_5v_off = "";
+            pwr_3v3_on = "";
+            pwr_3v3_off = "";
+            pwr_hpll_vdd_on = "";
+            pwr_hpll_vdd_off = "";
+        };
+	};
+
+
+/// ****************************************************************************
+///	-	Cpufreq
+//$$ MODULE="Cpufreq"
+//$$ DEVICE="cpufreq-meson"
+//$$ L2 PROP_STR = "status"
+	cpufreq-meson{
+		compatible = "amlogic,cpufreq-meson";
+		status = "okay";
+	};
+
+
+
+/// ****************************************************************************
+///	-	WATCHDOG
+	amlogic-watchdog{
+		compatible = "amlogic,aml-wdt";
+		status = "okay";
+		default_timeout=<10>;
+		reset_watchdog_method=<1>;//0:sysfs,1:kernel
+		reset_watchdog_time=<2>;
+		shutdown_timeout=<10>;
+		firmware_timeout=<6>;
+		suspend_timeout=<6>;
+	};
+
+
+/// ****************************************************************************
+///	-	MMC
+//$$ MODULE="MMC"
+//$$ DEVICE="aml_sdio"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+//$$ L2 PROP_STR 7 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "sdio_pin_0_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "sdio_pin_1_match" = "pinctrl-1"
+//$$ L2 PROP_CHOICE "sdio_pin_2_match" = "pinctrl-2"
+//$$ L2 PROP_CHOICE "sdio_pin_3_match" = "pinctrl-3"
+//$$ L2 PROP_CHOICE "sdio_pin_4_match" = "pinctrl-4"
+//$$ L2 PROP_CHOICE "sdio_pin_5_match" = "pinctrl-5"
+//$$ L2 PROP_CHOICE "sdio_pin_6_match" = "pinctrl-6"
+	sdio {
+		compatible = "amlogic,aml_sdio";
+		dev_name = "aml_sdio.0";
+		status = "okay";
+		reg = <0xc1108c20 0x20>;
+		pinctrl-names = "sd_clk_cmd_pins", "sd_all_pins", "emmc_clk_cmd_pins", "emmc_all_pins", "sdio_clk_cmd_pins", "sdio_all_pins","sd_1bit_pins"; // "jtag_pin", "uartao_default";
+		pinctrl-0 = <&sd_clk_cmd_pins>;
+		pinctrl-1 = <&sd_all_pins>;
+		pinctrl-2 = <&emmc_clk_cmd_pins>;
+		pinctrl-3 = <&emmc_all_pins>;
+		pinctrl-4 = <&sdio_clk_cmd_pins>;
+		pinctrl-5 = <&sdio_all_pins>;
+		pinctrl-6 = <&sd_1bit_pins>;
+
+//$$ DEVICE="sd"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 = "port"
+//$$ L2 PROP_STR = "pinname"
+//$$ L3 PROP_U32 = "ocr_avail"
+//$$ L2 PROP_STR 3 = "caps"
+//$$ L3 PROP_U32 = "f_min"
+//$$ L3 PROP_U32 = "f_max"
+//$$ L3 PROP_U32 = "f_max_w"
+//$$ L3 PROP_U32 = "max_req_size"
+//$$ L2 PROP_STR = "gpio_dat3"
+//$$ L2 PROP_STR = "jtag_pin"
+//$$ L2 PROP_STR = "gpio_cd"
+//$$ L2 PROP_STR = "gpio_ro"
+//$$ L2 PROP_U32 = "irq_in"
+//$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
+       sd{
+           status = "okay";
+           port = <1>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+           pinname = "sd";
+            ocr_avail = <0x200000>;          /**VDD voltage 3.3 ~ 3.4 */
+           caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED";
+            f_min = <300000>;
+            f_max = <50000000>;
+            f_max_w = <50000000>;
+            max_req_size = <0x20000>;          /**128KB*/
+            gpio_cd_level = <1>;
+            gpio_dat3 = "CARD_4";
+            jtag_pin = "CARD_0";
+            gpio_cd = "CARD_6";
+    //        gpio_ro = "GPIODV_25";
+            irq_in = <3>;
+            irq_out = <5>;
+            card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+        };
+
+		//$$ DEVICE="emmc"
+		//$$ L2 PROP_STR = "status"
+		//$$ L3 PROP_U32 = "port"
+		//$$ L2 PROP_STR = "pinname"
+		//$$ L3 PROP_U32 = "ocr_avail"
+		//$$ L2 PROP_STR 4 = "caps"
+		//$$ L3 PROP_U32 = "f_min"
+		//$$ L3 PROP_U32 = "f_max"
+		//$$ L3 PROP_U32 = "f_max_w"
+		//$$ L3 PROP_U32 = "max_req_size"
+		//$$ L2 PROP_STR = "gpio_dat3"
+		//$$ L2 PROP_U32 = "card_type"
+		emmc {
+			status = "ok";
+
+			port = <2>;
+			pinname = "emmc";
+			ocr_avail = <0x200000>; // 3.3:0x200000, 1.8+3.3:0x00200080
+			caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+		//	caps2 = "MMC_CAP2_HS200_1_8V_SDR";
+			f_min = <300000>;
+			f_max = <50000000>;
+			f_max_w = <50000000>;
+			max_req_size = <0x20000>; // 128KB
+			gpio_dat3 = "BOOT_3";
+			card_type = <1>;
+
+		};
+	};
+	/// ***************************************************************************************
+///	-	MMC
+//$$ MODULE="MMC"
+//$$ DEVICE="aml_sdhc"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "sdhc_pin_0_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "sdhc_pin_1_match" = "pinctrl-1"
+//$$ L2 PROP_CHOICE "sdhc_pin_2_match" = "pinctrl-2"
+//$$ L2 PROP_CHOICE "sdhc_pin_3_match" = "pinctrl-3"
+//$$ L2 PROP_CHOICE "sdhc_pin_4_match" = "pinctrl-4"
+//$$ L2 PROP_CHOICE "sdjc_pin_5_match" = "pinctrl-5"
+// L2 PROP_CHOICE "sdhc_pin_6_match" = "pinctrl-6"
+    sdhc{
+        compatible = "amlogic,aml_sdhc";
+        dev_name = "aml_sdhc.0";
+        status = "okay";
+        reg = <0xc1108e00 0x3c>;
+        pinctrl-names = "sdhc_sd_clk_cmd_pins", "sdhc_sd_all_pins", "sdhc_emmc_clk_cmd_pins", "sdhc_emmc_all_pins", "sdhc_sdio_clk_cmd_pins", "sdhc_sdio_all_pins";
+        pinctrl-0 = <&sdhc_sd_clk_cmd_pins>;
+        pinctrl-1 = <&sdhc_sd_all_pins>;
+        pinctrl-2 = <&sdhc_emmc_clk_cmd_pins>;
+        pinctrl-3 = <&sdhc_emmc_all_pins>;
+        pinctrl-4 = <&sdhc_sdio_clk_cmd_pins>;
+        pinctrl-5 = <&sdhc_sdio_all_pins>;
+        //pinctrl-6 = <&sd_1bit_pins>;
+
+//$$ DEVICE="sd"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 = "port"
+//$$ L2 PROP_STR = "pinname"
+//$$ L3 PROP_U32 = "ocr_avail"
+//$$ L2 PROP_STR 3 = "caps"
+//$$ L3 PROP_U32 = "f_min"
+//$$ L3 PROP_U32 = "f_max"
+//$$ L3 PROP_U32 = "f_max_w"
+//$$ L3 PROP_U32 = "max_req_size"
+//$$ L2 PROP_STR = "gpio_dat3"
+//$$ L2 PROP_STR = "jtag_pin"
+//$$ L2 PROP_STR = "gpio_cd"
+//$$ L2 PROP_STR = "gpio_ro"
+//$$ L2 PROP_U32 = "irq_in"
+//$$ L2 PROP_U32 = "irq_out"
+//$$ L2 PROP_U32 = "card_type"
+        // sd{
+        //     status = "okay";
+        //     port = <4>;          /**0:sdhc_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+        //     pinname = "sd";
+        //     ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
+        //     caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED","MMC_CAP_UHS_SDR12","MMC_CAP_UHS_SDR25","MMC_CAP_UHS_SDR50","MMC_CAP_UHS_SDR104";
+        //     f_min = <300000>;
+        //     f_max = <100000000>;
+        //     max_req_size = <0x20000>;          /**128KB*/
+        //     gpio_dat3 = "CARD_4";
+        //     //jtag_pin = "CARD_0";
+        //     gpio_cd = "CARD_6";
+        //     //gpio_ro = "GPIOZ_0";
+        //     irq_in = <3>;
+        //     irq_out = <5>;
+        //     card_type = <5>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+        // };
+
+//$$ DEVICE="emmc"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 = "port"
+//$$ L2 PROP_STR = "pinname"
+//$$ L3 PROP_U32 = "ocr_avail"
+//$$ L2 PROP_STR 4 = "caps"
+//$$ L3 PROP_U32 = "f_min"
+//$$ L3 PROP_U32 = "f_max"
+//$$ L3 PROP_U32 = "f_max_w"
+//$$ L3 PROP_U32 = "max_req_size"
+//$$ L2 PROP_STR = "gpio_dat3"
+//$$ L2 PROP_U32 = "card_type"
+        //emmc{
+       //     status = "okay";
+       //     port = <5>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+        //    pinname = "emmc";
+        //    ocr_avail = <0x200000>;          /**VDD voltage 3.3 ~ 3.4 */
+        //    caps = "MMC_CAP_8_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+        //    f_min = <300000>;
+        //   f_max = <40000000>;
+       //     max_req_size = <0x20000>;          /**128KB*/
+        //    gpio_dat3 = "BOOT_3";
+        //    card_type = <1>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+     //  };
+
+//$$ DEVICE="sdio"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 = "port"
+//$$ L2 PROP_STR = "pinname"
+//$$ L3 PROP_U32 = "ocr_avail"
+//$$ L2 PROP_STR 4 = "caps"
+//$$ L3 PROP_U32 = "f_min"
+//$$ L3 PROP_U32 = "f_max"
+//$$ L3 PROP_U32 = "max_req_size"
+//$$ L2 PROP_U32 = "card_type"
+        // sdio{
+        //     status = "okay";
+        //     port = <3>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
+        //     pinname = "sdio";
+        //     ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
+        //     caps = "MMC_CAP_4_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE", "MMC_CAP_UHS_SDR12","MMC_CAP_UHS_SDR25","MMC_CAP_UHS_SDR50","MMC_CAP_UHS_SDR104";
+        //     f_min = <300000>;
+        //     f_max = <100000000>;
+        //     max_req_size = <0x20000>;          /**128KB*/
+        //     card_type = <3>; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+        // };
+    };
+
+/// ****************************************************************************
+///	-	I2C
+//$$ MODULE="I2C"
+//$$ DEVICE="I2C_B"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2="reg"
+//$$ L3 PROP_STR = "pinctrl-names"
+//$$ L2 PROP_CHOICE "I2C_B_pin_match" = "pinctrl-0"
+	i2c@c11087c0{ /*I2C-B*/
+		compatible = "amlogic,aml_i2c";
+		dev_name = "i2c-B";
+		status = "ok";
+		reg = <0xc11087c0 0x20>;
+		device_id = <2>;
+		pinctrl-names="default";
+		pinctrl-0=<&b_i2c_master>;
+		#address-cells = <1>;
+		#size-cells = <0>;
+		use_pio = <0>;
+		master_i2c_speed = <300000>;
+ 	};
+
+
+
+/// ****************************************************************************
+///	-	VPU
+//$$ MODULE="VPU"
+//$$ DEVICE="vpu"
+//$$ L2 PROP_STR = "status"
+//$$ L2 PROP_U32 = "clk_level"
+	vpu{
+		compatible = "amlogic,vpu";
+		dev_name = "vpu";
+		status = "ok";
+		clk_level = <7>;
+		/**	0: 106.25M	1: 127.5M	2: 159.375M
+			3: 182.15M	4: 212.5M	5: 255M
+			6: 318.75M	7: 364.3M	*/
+		};
+
+
+
+
+/// ****************************************************************************
+/// -   DISP&MM-FB
+//$$ MODULE = "DISP&MM-FB"
+//$$ DEVICE = "mesonfb"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 4 ="reg"
+//$$ L2 PROP_U32 = "vmode"
+//$$ L2 PROP_U32 5 = "display_size_default"
+	mesonfb{
+		compatible = "amlogic,mesonfb";
+		dev_name = "mesonfb";
+		status = "okay";
+		reserve-memory = <0x01800000  0x00100000>;
+		reserve-iomap = "true";
+		vmode = <3>;
+		/**	0:VMODE_720P
+			1:VMODE_LCD
+			2:VMODE_LVDS_1080P
+			3:VMODE_1080P*/
+		scale_mode = <1>; /*0:default 1:new*/
+		4k2k_fb = <0>;
+		display_size_default = <1920 1080 1920 3240 32>;
+		/** 1920*1080*4*3 = 0x17BB000 **/
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-A/V stream
+//$$ MODULE = "DISP&MM-A/V stream"
+//$$ DEVICE="mesonstream"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 4 ="reg"
+	mesonstream {
+		compatible = "amlogic,mesonstream";
+		dev_name = "mesonstream.0";
+		status = "okay";
+		reserve-memory = <0x02000000>; // 32M
+		reserve-iomap = "true";
+	};
+
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-A/V video dec
+// MODULE = "DISP&MM-A/V video dec"
+// DEVICE = "vdec"
+// L2 PROP_STR = "status"
+// L3 PROP_U32 4 ="reg"
+	vdec {
+		compatible = "amlogic,vdec";
+		dev_name = "vdec.0";
+		status = "okay";
+		reserve-memory = <0x04000000>; // 64M
+		reserve-iomap = "true";
+		linux,contiguous-region = <&mem_4k2k_decoder>;
+	};
+
+
+
+/// ****************************************************************************
+///	-	picture decoder
+//$$ MODULE="picture decoder"
+//$$ DEVICE="picdec"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	picdec {
+		compatible = "amlogic,picdec";
+		dev_name = "picdec";
+		status = "okay";
+		share-memory-name = "vdec0";
+		share-memory-offset = <0>;
+		share-memory-size = <0x04000000>; //64M
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-PostProcess
+//$$ MODULE="DISP&MM-PostProcess"
+//$$ DEVICE="ppmgr"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	ppmgr {
+		compatible = "amlogic,ppmgr";
+		dev_name = "ppmgr";
+		status = "okay";
+		reserve-memory = <0x01000000>; // 16M
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-AVC Video Encoder
+//$$ MODULE = "DISP&MM-AVC Video Encoder"
+//$$ DEVICE="amvenc_avc"
+//$$ L2 PROP_STR = "status"
+//$$ L3 PROP_U32 2 ="reg"
+	amvenc_avc{
+		compatible = "amlogic,amvenc_avc";
+		dev_name = "amvenc_avc.0";
+		status = "okay";
+		linux,contiguous-region = <&cma_0>;
+		reserve-iomap = "true";
+	};
+
+
+/// ****************************************************************************
+///	-	deinterlace
+// DEVICE="deinterlace"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+	deinterlace{
+		compatible = "amlogic,deinterlace";
+		dev_name = "deinterlace";
+		status = "ok";
+		reserve-memory = <0x024c0000>;
+		/** 8x(1920x1088x(3/2+1/5)+1088/2)=33M **/
+	};
+
+
+
+/// ****************************************************************************
+///	-	DISP&MM-VDIN
+// MODULE = "DISP&MM-VDIN"
+// DEVICE="vdin0"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+// L2 PROP_U32 = "irq"
+// L2 PROP_U32 = "vdin_id"
+	vdin0{
+		compatible = "amlogic,vdin";
+		dev_name = "vdin0";
+		status = "ok";
+		//reserve-memory = <0x01000000>;
+		reserve-memory = <0x04000000>;
+		reserve-iomap = "true";
+		//max_size = <1920 1080>;//1920x1080x2x4=17M
+		max_size = <4096 2160>;//4096x2160x2x4=67M
+		
+		irq = <115>;
+		vdin_id = <0>;
+	};
+
+// DEVICE="vdin1"
+// L2 PROP_STR = "status"
+// L2 PROP_U32 2 = "reg"
+// L2 PROP_U32 = "irq"
+// L2 PROP_U32 = "vdin_id"
+	vdin1 {
+		compatible = "amlogic,vdin";
+		dev_name = "vdin1";
+		status = "ok";
+		reserve-memory = <0x01000000>;
+		reserve-iomap = "true";
+		miracast_size = <1920 1080>;//1920x1080x2x4=17M
+		irq = <117>;
+		vdin_id = <1>;
+	};
+tvafe {
+		compatible = "amlogic,tvafe";
+		dev_name = "tvafe";
+		status = "ok";
+		reserve-memory = <0x500000>;
+		reserve-iomap = "true";
+		tvafe_id = <0>;
+		pinctrl-names = "default";
+		tvafe_pin_mux = < /*!!particular sequence, no more and no less!!!*/
+			1	/*// TVAFE_ADC_PIN_A_PGA_0,  //CVBS0_Y = 0,*/
+			48	/*// TVAFE_ADC_PIN_SOG_7,    //CVBS0_SOG,*/
+			3	/*// TVAFE_ADC_PIN_A_PGA_2,  //CVBS1_Y,share with ypbpr*/
+			41	/*// TVAFE_ADC_PIN_SOG_0,    //CVBS1_SOG,*/
+			2	/*// TVAFE_ADC_PIN_A_PGA_1,  //CVBS2_Y,*/
+			41	/*// TVAFE_ADC_PIN_SOG_0,    //CVBS2_SOG,*/
+			12	/*// TVAFE_ADC_PIN_A_3,  //CVBS3_Y,*/
+			48	/*// TVAFE_ADC_PIN_SOG_7,    //CVBS3_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS4_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS4_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS5_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS5_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS6_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS6_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS7_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //CVBS7_SOG,*/
+			3	/*// TVAFE_ADC_PIN_A_PGA_2,  //S_VIDEO0_Y,*/
+			21	/*// TVAFE_ADC_PIN_B_4,  //S_VIDEO0_C,*/
+			47	/*// TVAFE_ADC_PIN_SOG_6,    //S_VIDEO0_SOG,*/
+			4	/*// TVAFE_ADC_PIN_A_PGA_3,  //S_VIDEO1_Y,*/
+			29	/*// TVAFE_ADC_PIN_C_4,   //S_VIDEO1_C,*/
+			48	/*// TVAFE_ADC_PIN_SOG_7,    //S_VIDEO1_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO2_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO2_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO2_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO3_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO3_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO3_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO4_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO4_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO4_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO5_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO5_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO5_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO6_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO6_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO6_SOG,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO7_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO7_C,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //S_VIDEO7_SOG,*/
+			11	/*// TVAFE_ADC_PIN_A_2,     //VGA0_G,*/
+			19	/*// TVAFE_ADC_PIN_B_2,     //VGA0_B,*/
+			27	/*// TVAFE_ADC_PIN_C_2,     //VGA0_R,*/
+			43	/*// TVAFE_ADC_PIN_SOG_2,    //VGA0_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA1_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA2_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA3_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA4_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA5_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA6_SOG*/
+			0	/*/ TVAFE_ADC_PIN_NULL,     //VGA7_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA7_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA7_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //VGA7_SOG*/
+			9	/*// TVAFE_ADC_PIN_A_0,     //COMP0_Y,*/
+			17	/*// TVAFE_ADC_PIN_B_0,     //COMP0_PB,*/
+			25	/*// TVAFE_ADC_PIN_C_0,     //COMP0_PR,*/
+			41	/*// TVAFE_ADC_PIN_SOG_0,    //COMP0_SOG*/
+			10	/*// TVAFE_ADC_PIN_A_1,     //COMP1_Y,*/
+			18	/*// TVAFE_ADC_PIN_B_1,     //COMP1_PB,*/
+			26	/*// TVAFE_ADC_PIN_C_1,     //COMP1_PR,*/
+			42	/*// TVAFE_ADC_PIN_SOG_1,    //COMP1_SOG*/
+			11	/*// TVAFE_ADC_PIN_A_2,     //COMP2_Y,*/
+			19	/*// TVAFE_ADC_PIN_B_2,     //COMP2_PB,*/
+			27	/*// TVAFE_ADC_PIN_C_2,     //COMP2_PR,*/
+			43	/*// TVAFE_ADC_PIN_SOG_2,    //COMP2_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP3_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP4_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP5_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP6_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_Y,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_PB,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_PR,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //COMP7_SOG*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART0_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART1_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART2_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART3_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART4_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART5_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART6_CVBS,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_G,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_B,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_R,*/
+			0	/*// TVAFE_ADC_PIN_NULL,     //SCART7_CVBS,*/
+		>;
+	};
+
+
+/// ****************************************************************************
+///	-	ION
+//$$ MODULE="ION"
+//$$ DEVICE="ion_dev"
+//$$ L2 PROP_STR = "status"
+	ion_dev {
+		compatible = "amlogic,ion_dev";
+		dev_name = "ion_dev";
+		status = "ok";
+		reserve-memory = <0x01000000>; //16M
+	};
+
+
+/// ****************************************************************************
+///	-	DISP&MM-Vout
+//$$ MODULE = "DISP&MM-Vout"
+//$$ DEVICE = "mesonvout"
+//$$ L2 PROP_STR = "status"
+	mesonvout {
+		compatible = "amlogic,mesonvout";
+		dev_name = "mesonvout";
+		status = "okay";
+	};
+
+///******************************************************************************
+    pmu {
+        compatible = "amlogic, aml_pmu_prober";                 /* fixed for pmu driver, don't change   */
+        #address-cells = <1>;
+        #size-cells = <0>;
+        driver_version = "v0.60";
+//$$ DEVICE = "Pmu_aml1220"
+//$$ L2 PROP_STR = "sub_type"
+//$$ L2 PROP_STR = "i2c_bus"
+//$$ L2 PROP_U32 = "reg"
+//$$ L2 PROP_U32 = "soft_limit_to99"
+//$$ L2 PROP_U32 = "ddr_voltage"
+//$$ L2 PROP_U32 = "vddao_voltage"
+//$$ L2 PROP_CHOICE "battery_parameter_match" = "board_battery"
+//$$ L2 PROP_STR = "status"
+        aml1220{
+            compatible = "amlogic,aml_pmu4";                         /** compatible to amlogic PMU            */
+            sub_type = "aml1220_pmu";                           /** sub type of pmu family, must have    */
+            i2c_bus = "i2c_bus_b";                             /** attached i2c bus, must have          */
+            reg = <0x35>;                                       /** device i2c address, must have        */
+           // soft_limit_to99 = <0>;                              /** optional                             */
+           // vbus_dcin_short_connect = <0>;
+            status = "okay";                                    /** status of pmu, only one should be OK */
+        };
+    };
+/// ****************************************************************************
+/// -   Audio
+//$$ MODULE="Audio"
+//$$ DEVICE="audio_i2s"
+//$$ L2 PROP_STR = "status"
+	audio_platform {
+		compatible = "amlogic,aml-i2s";
+		dev_name = "aml-i2s.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_i2s_dai"
+	//$$ L2 PROP_STR = "status"
+	audio_dai {
+		compatible = "amlogic,aml-i2s-dai";
+		dev_name = "aml-i2s-dai.0";
+		status = "okay";
+	};
+
+	audio_spdif_dai {
+		compatible = "amlogic,aml-spdif-dai";
+		dev_name = "aml-spdif-dai.0";
+		status = "okay";
+	};
+
+	audio_spdif_codec {
+		compatible = "amlogic,aml-spdif-codec";
+		dev_name = "spdif-dit.0";
+		pinctrl-names = "aml_audio_spdif";
+		//pinctrl-0 = <&audio_spdif_pins>;
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm2BT_codec"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm2BT_codec {
+		compatible = "amlogic,pcm2BT-codec";
+		dev_name = "pcm2bt.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm_dai"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm_dai {
+		compatible = "amlogic,aml-pcm-dai";
+		dev_name = "aml-pcm-dai.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_pcm"
+	//$$ L2 PROP_STR = "status"
+	audio_pcm {
+		compatible = "amlogic,aml-pcm";
+		dev_name = "aml-pcm.0";
+		status = "okay";
+	};
+
+	//$$ DEVICE="audio_m8_audio"
+	//$$ L2 PROP_STR = "status"
+
+	audio_pmu4_audio{
+        	compatible = "amlogic,aml_pmu4_codec";
+        	dev_name = "aml_pmu4_codec.0";
+        	status = "okay";
+    	};
+	audio_m8_audio {
+		compatible = "amlogic,m8_audio_codec";
+		dev_name = "aml_m8_codec.0";
+		status = "disable";
+	};
+
+	audio_pmu3_audio {
+		compatible = "amlogic,aml_pmu3_codec";
+		dev_name = "aml_pmu3_codec.0";
+		status = "disable";
+	};
+
+	aml_audio_codec {
+		compatible = "amlogic,audio_codec";
+
+		pmu4:pmu4{
+        		codec_name = "amlpmu4";
+			status = "okay";
+       		};
+
+		pmu3:pmu3 {
+			codec_name = "amlpmu3";
+			status = "disable";
+		};
+		dummy:dummy {
+			codec_name = "dummy_codec";
+			status = "disable";
+		};
+
+		rt5616:rt5616 {
+			codec_name = "rt5616";
+			i2c_addr = <0x1B>;
+			i2c_bus = "i2c_bus_d";
+			id_reg = <0x00>;
+			id_val = <0x21>;
+			capless = <0>;
+			status = "disable";
+		};
+
+		rt5631:rt5631 {
+			codec_name = "rt5631";
+			i2c_addr = <0x1A>;
+			i2c_bus = "i2c_bus_b";
+			id_reg = <0x00>;
+			id_val = <0x01>;
+			capless = <0>;
+			status = "disable";
+		};
+
+		wm8960:wm8960 {
+			codec_name = "wm8960";
+			i2c_addr = <0x1A>;
+			i2c_bus = "i2c_bus_b";
+			capless = <1>;
+			status = "disable";
+		};
+
+	};
+
+	//$$ DEVICE="dummy_codec"
+	//$$ L2 PROP_STR = "status"
+	dummy_codec {
+		status = "okay";
+		compatible = "amlogic,aml_dummy_codec";
+		dev_name = "dummy_codec.0";
+	};
+
+
+
+	//$$ DEVICE="aml_m8_sound_card"
+	//$$ L2 PROP_STR = "aml,sound_card"
+	//$$ L2 PROP_STR = "aml,codec_dai"
+	//$$ L2 PROP_STR 6*2 = "aml,audio-routing"
+	//$$ L2 PROP_STR = "mute_gpio"
+	//$$ L2 PROP_U32 5 = "hp_paraments"
+	//$$ L2 PROP_STR = "pinctrl-names"
+	//$$ L2 PROP_CHOICE "Audio_pin_0_match" = "pinctrl-0"
+	//$$ L2 PROP_STR = "status"
+	aml_m8_sound_card {
+		compatible = "sound_card, aml_snd_m8";
+		aml,sound_card = "AML-M8AUDIO";
+		aml,codec_dai = "AML-M8","pmu4-audio-hifi","pmu3-hifi","dummy-codec";
+		//aml,codec_name = "aml_m8_codec.0","rt5616.4-001b";
+		//aml,audio-codec = <&rt5616>;
+		aml,audio-routing-rt5616 =
+			"Ext Spk","LOUTL",
+			"Ext Spk","LOUTR",
+			"HP","HPOL",
+			"HP","HPOR",
+			"micbias1","MAIN MIC",
+			"IN2P","micbias1";
+		aml,audio-routing-amlm8 =
+			"Ext Spk","LINEOUTL",
+			"Ext Spk","LINEOUTR",
+			"HP","HP_L",
+			"HP","HP_R",
+			"MICBIAS","MAIN MIC",
+			"LINPUT1","MICBIAS";
+		aml,audio-routing-dummy=
+			"Ext Spk","LOUTL",
+			"Ext Spk","LOUTR";
+		aml,audio-routing-amlpmu3 =
+            		"Ext Spk","LINEOUTL1",
+            		"Ext Spk","LINEOUTR1",
+            		"HP","HP_L",
+            		"HP","HP_R",
+            		"Mic Bias1","MAIN MIC",
+            		"LINEINLP","Mic Bias1";
+		aml,audio-routing-amlpmu4 =
+           		  "Ext Spk","LOLP",
+            		"Ext Spk","LORP",
+            		"MIC_BIAS","MAIN MIC",
+            		"AIL1","MIC_BIAS";
+		mute_gpio = "GPIO_BSD_EN";
+		hp_disable;
+		hp_paraments = <800 300 0 5 1>;
+		pinctrl-names = "aml_snd_m8";
+//		pinctrl-0 = <&audio_pins>;
+		status = "okay";
+	};
+
+
+
+/// ****************************************************************************
+/// -   GPIO
+//$$ MODULE="GPIO"
+//$$ DEVICE="g9tv-gpio"
+	gpio:gpio{
+		compatible = "amlogic,g9tv-gpio";
+		dev_name = "gpio";
+		#gpio-cells=<2>;
+	};
+
+
+
+/// ****************************************************************************
+/// -   Pinmux
+//$$ MODULE="Pinmux"
+//$$ DEVICE="pinmux-m8"
+	pinmux {
+		compatible = "amlogic,pinmux-g9tv";
+		dev_name = "pinmux";
+		#pinmux-cells=<2>;
+
+		//$$ MATCH "uart_ao_pin_match" = "&ao_uart_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		ao_uart_pins:ao_uart {
+			amlogic,setmask = <10 0x1800>;
+			amlogic,pins = "GPIOAO_0", "GPIOAO_1";
+		};
+
+		//$$ MATCH "uart_0_pin_match" = "&a_uart_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 4 = "amlogic,pins"
+		a_uart_pins:a_uart {
+			amlogic,setmask=<4 0x3c00>;
+			amlogic,pins="GPIOX_12", "GPIOX_13", "GPIOX_14", "GPIOX_15";
+		};
+
+		//$$ MATCH "Card_pin_0_match" = "&sdhc_b_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_b_pins:sdhc_b_pin {
+			amlogic,setmask=<2 0xfc00>;
+			amlogic,clrmask=<2 0xf0 8 0x600>;
+			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+		};
+
+		//$$ MATCH "Card_pin_1_match" = "&sdhc_c_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 4 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_c_pins:sdhc_c_pin {
+			amlogic,setmask=<6 0x3f000000>;
+			amlogic,clrmask=<4 0x6c000000 2 0x4c00000>;
+			amlogic,pins="BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_10","BOOT_11";
+		};
+
+		//$$ MATCH "Card_pin_2_match" = "&sdhc_a_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		sdhc_a_pins:sdhc_a_pin {
+			amlogic,setmask=<8 0x3f>;
+			amlogic,clrmask=<5 0x6c00 >;
+			amlogic,pins="GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+		};
+
+		//$$ MATCH "sdio_pin_5_match" = "&sdio_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdio_all_pins:sdio_all_pins {
+			amlogic,setmask = <8 0x0000003f>;	/*sdio a*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   2 0x0000fc00		/*sdio b*/
+					   5 0x00006c00>;	/*sdhc a*/
+			amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_4_match" = "&sdio_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sdio_clk_cmd_pins:sdio_clk_cmd_pins {
+			amlogic,setmask = <8 0x00000003>;	/*sdio a*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   2 0x0000fc00		/*sdio b*/
+					   5 0x00006c00>;	/*sdhc a*/
+			amlogic,pins = "GPIOX_8","GPIOX_9"; /** GPIOX_8:CLK, GPIOX_9:CMD */
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "sdio_pin_1_match" = "&sd_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_all_pins:sd_all_pins {
+			amlogic,setmask = <2 0x0000fc00>;	/*sdio b*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   8 0x00000600		/*sdio a, UART*/
+					   2 0x000000f0>;	/*sdhc b*/
+			amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_6_match" = "&sd_1bit_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_1bit_pins:sd_1bit_pins {
+			amlogic,setmask = <2 0x00008c00>;	/*sdio b*/
+			amlogic,clrmask = <6 0x3f000000		/*sdio c*/
+					   8 0x0000003f		/*sdio a*/
+					   2 0x000000f0>;	/*sdhc b*/
+			amlogic,pins = "CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "sdio_pin_0_match" = "&sd_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		sd_clk_cmd_pins:sd_clk_cmd_pins {
+			amlogic,setmask=<2 0x00000c00>;         /*sdio b*/
+			amlogic,clrmask=<6 0x3f000000           /*sdio c*/
+					8 0x0000003f        /*sdio a*/
+					2 0x000000f0>;      /*sdhc b*/
+			amlogic,pins = "CARD_2","CARD_3"; /** CARD_2:CLK, CARD_3:CMD */
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_3_match" = "&emmc_all_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		emmc_all_pins:emmc_all_pins {
+			amlogic,setmask=<6 0x3f000000>;         /*sdio c*/
+			amlogic,clrmask=<2 0x04c0fc00           /*sdio b & nand*/
+					8 0x0000003f        /*sdio a*/
+					4 0x6c000000>;        /*sdhc c*/
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_16","BOOT_17";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		//$$ MATCH "sdio_pin_2_match" = "&emmc_clk_cmd_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 3*2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		//$$ L2 PROP_U32 = "amlogic,enable-output"
+		//$$ L2 PROP_U32 = "amlogic,pullup"
+		//$$ L2 PROP_U32 = "amlogic,pullupen"
+		emmc_clk_cmd_pins:emmc_clk_cmd_pins{
+		amlogic,setmask=<6 0x03000000>;         /*bit[24-25] */
+		amlogic,clrmask=<2 0x04c0fc00           /*sdio b & nand*/
+				8 0x0000003f        /*sdio a*/
+				4 0x6c000000>;        /*sdhc c*/
+		amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+		amlogic,enable-output=<1>; /** 0:output, 1:input */
+		amlogic,pullup=<1>;
+		amlogic,pullupen=<1>;
+		};
+
+		sdhc_sd_clk_cmd_pins:sdhc_sd_clk_cmd_pins {
+			amlogic,setmask = <2 0x00000030>;	/*sdhc b*/
+			amlogic,clrmask = <5 0x00007c00		/*sdhc a*/
+					   4 0x7c000000		/*sdhc c*/
+					   2 0x0000fc00		/*sdio b*/
+					   8 0x00000600>;	/*UART*/
+			amlogic,pins = "CARD_2","CARD_3"; /* CARD_2:CLK, CARD_3:CMD */
+			amlogic,enable-output=<1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_sd_all_pins:sdhc_sd_all_pins {
+			amlogic,setmask = <2 0x000000f0>;	/*sdhc b*/
+			amlogic,clrmask = <5 0x00007c00		/*sdhc a*/
+					   4 0x7c000000		/*sdhc c*/
+					   2 0x0000fc00		/*sdio b*/
+					   8 0x00000600>;	/*UART*/
+			amlogic,pins="CARD_0","CARD_1","CARD_2","CARD_3","CARD_4","CARD_5";
+			amlogic,enable-output = <1>; /* 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_emmc_clk_cmd_pins:sdhc_emmc_clk_cmd_pins {
+			amlogic,setmask = <4 0x0c000000>;	/*bit[26-27] */
+			amlogic,clrmask = <2 0x04c000f0		/*sdhc b & nand*/
+					   5 0x00007c00		/*sdhc a*/
+					   6 0x3f000000>;	/*sdio c*/
+			amlogic,pins = "BOOT_16","BOOT_17"; /** BOOT_16:CMD, BOOT_17:CLK */
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		sdhc_emmc_all_pins:sdhc_emmc_all_pins {
+			amlogic,setmask = <4 0x7c000000>;	/*sdhc c*/
+			amlogic,clrmask = <2 0x04c000f0		/*sdhc b & nand*/
+					   5 0x00007c00		/*sdhc a*/
+					   6 0x3f000000>;	/*sdio c*/
+			amlogic,pins = "BOOT_0","BOOT_1","BOOT_2","BOOT_3","BOOT_4","BOOT_5","BOOT_6","BOOT_7","BOOT_16","BOOT_17";
+			amlogic,enable-output=<1>; /** 0:output, 1:input */
+			amlogic,pullup=<1>;
+			amlogic,pullupen=<1>;
+		};
+
+		sdhc_sdio_clk_cmd_pins:sdhc_sdio_clk_cmd_pins {
+			amlogic,setmask = <5 0x00000c00>;	/*sdhc a bit[10-11] */
+			amlogic,clrmask = <2 0x058000f0		/*sdhc b*/
+					   4 0x7c000000		/*sdhc c */
+					   8 0x0000003f>;	/*sdio a*/
+			amlogic,pins = "GPIOX_8","GPIOX_9"; /** BOOT_16:CMD, BOOT_17:CLK */
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+		sdhc_sdio_all_pins:sdhc_sdio_all_pins {
+			amlogic,setmask = <5 0x00006c00>;	/*sdhc a*/
+			amlogic,clrmask = <2 0x058000f0		/*sdhc b*/
+					   4 0x7c000000		/*sdhc c */
+					   8 0x0000003f>;	/*sdio a*/
+			amlogic,pins = "GPIOX_0","GPIOX_1","GPIOX_2","GPIOX_3","GPIOX_8","GPIOX_9";
+			amlogic,enable-output = <1>; /** 0:output, 1:input */
+			amlogic,pullup = <1>;
+			amlogic,pullupen = <1>;
+		};
+
+		//$$ MATCH "I2C_B_pin_match" = "&b_i2c_master"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		b_i2c_master:b_i2c{
+			amlogic,setmask=<11 0xc000>;
+			amlogic,clrmask=<9 0xf00000c0>;
+			amlogic,pins="GPIOY_12","GPIOY_13";
+
+		};
+
+		//$$ MATCH "remote_pin_0_match" = "&remote_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_STR = "amlogic,pins"
+		remote_pins:remote_pin {
+			amlogic,setmask = <10 0x1>;
+			amlogic,pins = "GPIOAO_7";
+		};
+
+		//$$ MATCH "audio_pins_match" = "&audio_pins"
+		//$$ L2 PROP_U32 4 = "amlogic,setmask"
+		//$$ L2 PROP_U32 10 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 6 = "amlogic,pins"
+//		audio_pins:audio_pins {
+//			amlogic,setmask = <2 0x6B0000>; /* I2S */
+//			amlogic,clrmask = <2 0x140000
+//			                   3 0x80000>;
+//			amlogic,pins = "GPIOZ_1", "GPIOZ_2", "GPIOZ_3", "GPIOZ_4", "GPIOZ_5";
+//		};
+
+		//$$ MATCH "dvb_p_ts0_pins_match" = "&dvb_p_ts0_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 12 = "amlogic,pins"
+		/*dvb_p_ts0_pins:dvb_p_ts0_pins {
+			amlogic,setmask = <3 0x3F>;
+			amlogic,clrmask = <1 0xCCC41
+					   4 0x2000000
+					   7 0x20000000
+					   9 0x431F>;
+			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+		};
+		*/
+
+		//$$ MATCH "dvb_s_ts0_pins_match" = "&dvb_s_ts0_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 12 = "amlogic,pins"
+		/*dvb_s_ts0_pins:dvb_s_ts0_pins {
+			amlogic,setmask = <3 0x2F>;
+			amlogic,clrmask = <1 0xCCC41
+					   4 0x2000000
+					   7 0x20000000
+					   9 0x4310>;
+			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+		};
+		*/
+
+		//$$ MATCH "dvb_fe_pins_match" = "&dvb_fe_pins"
+		//$$ L2 PROP_U32 8 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 1 = "amlogic,pins"
+		/*
+		dvb_fe_pins: dvb_fe_pins {
+			amlogic,clrmask = <1 0x38
+					   3 0x18000
+					   4 0x1800000
+					   9 0xC0>;
+			amlogic,pins = "GPIOY_5","GPIOY_6";
+		};
+		*/
+
+		/*
+		smc_pins:smc_pins {
+			amlogic,setmask = <5 0x000000c0>;
+			amlogic,clrmask = <3 0x00000020
+					   9 0xc>;
+			amlogic,pins = "GPIOY_13","GPIOY_14";
+		};*/
+
+	}; /* end of pinmux */
+
+
+
+/// ****************************************************************************
+///	-	DVB
+//$$ MODULE="DVB"
+
+//$$ DEVICE="dvb"
+//$$ L2 PROP_STR = "ts0"
+//$$ L2 PROP_U32 = "ts0_invert"
+//$$ L2 PROP_U32 = "ts0_control"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "dvb_p_ts0_pins_match" = "pinctrl-0"
+//$$ L2 PROP_CHOICE "dvb_s_ts0_pins_match" = "pinctrl-1"
+	dvb {
+		compatible = "amlogic,dvb";
+		/*"parallel","serial","disable"*/
+		ts2 = "parallel";
+		ts2_control = <0>;
+		ts2_invert = <0>;
+		//pinctrl-names = "p_ts0", "s_ts0";
+		//pinctrl-0 = <&dvb_p_ts0_pins>;
+		//pinctrl-1 = <&dvb_s_ts0_pins>;
+	};
+
+//$$ DEVICE="dvbfe"
+//$$ L2 PROP_STR = "dtv_demod0"
+//$$ L2 PROP_U32 = "dtv_demod0_i2c_adap_id"
+//$$ L2 PROP_U32 = "dtv_demod0_i2c_addr"
+//$$ L2 PROP_U32 = "dtv_demod0_reset_value"
+//$$ L2 PROP_STR = "dtv_demod0_reset_gpio"
+//$$ L2 PROP_U32 = "fe0_dtv_demod"
+//$$ L2 PROP_U32 = "fe0_ts"
+//$$ L2 PROP_U32 = "fe0_dev"
+//$$ L2 PROP_STR 6 = "pinctrl-names"
+//$$ L2 PROP_CHOICE "dvb_fe_pins_match" = "pinctrl-0"
+	dvbfe {
+		compatible = "amlogic,dvbfe";
+		dtv_demod0 = "AMLDEMOD";
+		//dtv_demod0_i2c_adap_id = <2>;
+		//dtv_demod0_i2c_addr = <0xC0>;
+		//dtv_demod0_reset_value = <0>;
+		//dtv_demod0_reset_gpio = "GPIOY_5";
+		fe0_dtv_demod = <0>;
+		fe0_ts = <2>;
+		fe0_dev = <0>;
+		dtv_demod0_mem = <1>;
+		reserve-memory = <0x6400000>;
+		reserve-iomap = "true";
+		//pinctrl-names = "default";
+		//pinctrl-0 = <&dvb_fe_pins>;
+	//	fe0_mem = <0>;
+	//	reserve-memory = <0x2000000>;  //32m
+		tuner0 = "si2177_tuner";
+		tuner0_i2c_adap_id = <2>;
+		tuner0_i2c_addr = <0x60>;
+		tuner0_reset_value = <0>;
+		tuner0_reset_gpio =  "GPIOW_1" ;  /*GPIOX_8   76*/
+		fe0_tuner = <0>;
+		atv_demod0 = "si2177_atv_demod";
+		fe0_atv_demod = <0>;
+		pinctrl-names = "default";
+		//pinctrl-0 = <&dvb_fe_pins>;
+	};
+
+	/*smartcard {
+		compatible = "amlogic,smartcard";
+		smc0_irq = <69>;
+		smc0_enable_pin = "GPIOY_12";
+		smc0_enable_level = <1>;
+		smc0_reset_pin = "GPIOY_6";
+		smc0_reset_level = <0>;
+		smc0_clk_pinmux_reg = <0x2031>;
+		smc0_clk_pinmux_bit = <0x80>;
+		smc0_clk_oen_reg = <0x200f>;
+		smc0_clk_out_reg = <0x2010>;
+		smc0_clk_bit = <0x2000>;
+		smc0_det_pin = "GPIOY_7";
+		pinctrl-names = "default";
+		pinctrl-0 = <&smc_pins>;
+	};*/
+
+}; /* end of root */
diff --git a/arch/arm/configs/mesong9tv_defconfig b/arch/arm/configs/mesong9tv_defconfig
new file mode 100644
index 000000000000..c71103c4f91a
--- /dev/null
+++ b/arch/arm/configs/mesong9tv_defconfig
@@ -0,0 +1,253 @@
+CONFIG_KERNEL_LZO=y
+CONFIG_SYSVIPC=y
+CONFIG_AUDIT=y
+CONFIG_NO_HZ=y
+CONFIG_HIGH_RES_TIMERS=y
+CONFIG_BSD_PROCESS_ACCT=y
+CONFIG_IKCONFIG=y
+CONFIG_LOG_BUF_SHIFT=19
+CONFIG_BLK_DEV_INITRD=y
+CONFIG_RD_BZIP2=y
+CONFIG_RD_LZMA=y
+CONFIG_RD_XZ=y
+CONFIG_RD_LZO=y
+CONFIG_KALLSYMS_ALL=y
+CONFIG_EMBEDDED=y
+CONFIG_MODULES=y
+CONFIG_MODULE_UNLOAD=y
+CONFIG_ARCH_MESONG9TV=y
+CONFIG_MESON_SUSPEND=y
+CONFIG_MESON_LEGACY_REGISTER_API=y
+CONFIG_ARM_ERRATA_751472=y
+CONFIG_ARM_ERRATA_754322=y
+CONFIG_ARM_ERRATA_764369=y
+CONFIG_SMP=y
+CONFIG_PREEMPT=y
+CONFIG_AEABI=y
+CONFIG_HIGHMEM=y
+CONFIG_KSM=y
+CONFIG_CPU_FREQ=y
+CONFIG_CPU_FREQ_GOV_ONDEMAND=y
+CONFIG_CPU_FREQ_GOV_INTERACTIVE=y
+CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
+CONFIG_AMLOGIC_MESON_CPUFREQ=y
+CONFIG_VFP=y
+CONFIG_NEON=y
+CONFIG_BINFMT_MISC=y
+CONFIG_WAKELOCK=y
+CONFIG_PM_RUNTIME=y
+CONFIG_PACKET=y
+CONFIG_PACKET_DIAG=y
+CONFIG_UNIX=y
+CONFIG_UNIX_DIAG=y
+CONFIG_NET_KEY=y
+CONFIG_INET=y
+CONFIG_IP_MULTICAST=y
+CONFIG_IP_ADVANCED_ROUTER=y
+CONFIG_IP_MULTIPLE_TABLES=y
+CONFIG_INET_ESP=y
+CONFIG_IPV6=y
+CONFIG_IPV6_PRIVACY=y
+CONFIG_IPV6_ROUTER_PREF=y
+CONFIG_IPV6_OPTIMISTIC_DAD=y
+CONFIG_INET6_AH=y
+CONFIG_INET6_ESP=y
+CONFIG_INET6_IPCOMP=y
+CONFIG_IPV6_MIP6=y
+CONFIG_IPV6_TUNNEL=y
+CONFIG_IPV6_MULTIPLE_TABLES=y
+CONFIG_NETFILTER=y
+CONFIG_NF_CONNTRACK=y
+CONFIG_NF_CONNTRACK_EVENTS=y
+CONFIG_NF_CT_PROTO_DCCP=y
+CONFIG_NF_CT_PROTO_SCTP=y
+CONFIG_NF_CT_PROTO_UDPLITE=y
+CONFIG_NF_CONNTRACK_AMANDA=y
+CONFIG_NF_CONNTRACK_FTP=y
+CONFIG_NF_CONNTRACK_H323=y
+CONFIG_NF_CONNTRACK_IRC=y
+CONFIG_NF_CONNTRACK_NETBIOS_NS=y
+CONFIG_NF_CONNTRACK_PPTP=y
+CONFIG_NF_CONNTRACK_SANE=y
+CONFIG_NF_CONNTRACK_TFTP=y
+CONFIG_NF_CT_NETLINK=y
+CONFIG_NETFILTER_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
+CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
+CONFIG_NETFILTER_XT_TARGET_MARK=y
+CONFIG_NETFILTER_XT_TARGET_NFLOG=y
+CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
+CONFIG_NETFILTER_XT_TARGET_TPROXY=y
+CONFIG_NETFILTER_XT_TARGET_TRACE=y
+CONFIG_NETFILTER_XT_MATCH_COMMENT=y
+CONFIG_NETFILTER_XT_MATCH_CONNBYTES=y
+CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
+CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
+CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
+CONFIG_NETFILTER_XT_MATCH_HELPER=y
+CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
+CONFIG_NETFILTER_XT_MATCH_LENGTH=y
+CONFIG_NETFILTER_XT_MATCH_LIMIT=y
+CONFIG_NETFILTER_XT_MATCH_MAC=y
+CONFIG_NETFILTER_XT_MATCH_MARK=y
+CONFIG_NETFILTER_XT_MATCH_POLICY=y
+CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
+CONFIG_NETFILTER_XT_MATCH_QTAGUID=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2=y
+CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y
+CONFIG_NETFILTER_XT_MATCH_SOCKET=y
+CONFIG_NETFILTER_XT_MATCH_STATE=y
+CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
+CONFIG_NETFILTER_XT_MATCH_STRING=y
+CONFIG_NETFILTER_XT_MATCH_TIME=y
+CONFIG_NETFILTER_XT_MATCH_U32=y
+CONFIG_NF_CONNTRACK_IPV4=y
+CONFIG_IP_NF_IPTABLES=y
+CONFIG_IP_NF_MATCH_AH=y
+CONFIG_IP_NF_MATCH_ECN=y
+CONFIG_IP_NF_MATCH_TTL=y
+CONFIG_IP_NF_FILTER=y
+CONFIG_IP_NF_TARGET_REJECT=y
+CONFIG_IP_NF_TARGET_REJECT_SKERR=y
+CONFIG_NF_NAT_IPV4=y
+CONFIG_IP_NF_TARGET_MASQUERADE=y
+CONFIG_IP_NF_TARGET_NETMAP=y
+CONFIG_IP_NF_TARGET_REDIRECT=y
+CONFIG_IP_NF_MANGLE=y
+CONFIG_IP_NF_RAW=y
+CONFIG_IP_NF_ARPTABLES=y
+CONFIG_IP_NF_ARPFILTER=y
+CONFIG_IP_NF_ARP_MANGLE=y
+CONFIG_NF_CONNTRACK_IPV6=y
+CONFIG_IP6_NF_IPTABLES=y
+CONFIG_IP6_NF_FILTER=y
+CONFIG_IP6_NF_TARGET_REJECT=y
+CONFIG_IP6_NF_TARGET_REJECT_SKERR=y
+CONFIG_IP6_NF_MANGLE=y
+CONFIG_IP6_NF_RAW=y
+CONFIG_NF_NAT_IPV6=y
+CONFIG_IP6_NF_TARGET_MASQUERADE=y
+CONFIG_IP6_NF_TARGET_NPT=y
+CONFIG_BRIDGE=y
+# CONFIG_BRIDGE_IGMP_SNOOPING is not set
+CONFIG_PHONET=y
+CONFIG_NET_SCHED=y
+CONFIG_NET_SCH_HTB=y
+CONFIG_NET_SCH_INGRESS=y
+CONFIG_NET_CLS_U32=y
+CONFIG_NET_EMATCH=y
+CONFIG_NET_EMATCH_U32=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_POLICE=y
+CONFIG_NET_ACT_GACT=y
+CONFIG_NET_ACT_MIRRED=y
+CONFIG_CFG80211=y
+CONFIG_MAC80211=y
+CONFIG_RFKILL=y
+# CONFIG_OF_LM is not set
+# CONFIG_AML_RTC is not set
+CONFIG_I2C_AML=y
+CONFIG_SARADC_AM=y
+CONFIG_NEW_AM_REMOTE=y
+CONFIG_NEW_AM_IR_TX=y
+CONFIG_ADC_KEYPADS_AM=y
+# CONFIG_AMLOGIC_BOARD_HAS_PMU is not set
+CONFIG_MESON_CS_DCDC_REGULATOR=y
+CONFIG_EFUSE=y
+CONFIG_AMLOGIC_THERMAL=y
+CONFIG_MMC_AML=y
+# CONFIG_AML_NFTL_NEW is not set
+# CONFIG_AM_NAND is not set
+# CONFIG_AML_NEXT_NAND is not set
+CONFIG_AM_ETHERNET=y
+CONFIG_PHYLIB=y
+CONFIG_AML_PHY=y
+CONFIG_AML_LAN8720=y
+CONFIG_AML_IP101_PHY=y
+CONFIG_AML_KSZ8091=y
+# CONFIG_AMAUDIO is not set
+# CONFIG_AM_DISPLAY_MODULE is not set
+# CONFIG_AML_HDMI_TX is not set
+# CONFIG_AML_EXT_HDMIIN is not set
+# CONFIG_VIDEOBUF2_ION is not set
+CONFIG_MALI400=y
+# CONFIG_AMLOGIC_ION is not set
+CONFIG_DEVTMPFS=y
+CONFIG_DEVTMPFS_MOUNT=y
+CONFIG_PROC_DEVICETREE=y
+CONFIG_OF_SELFTEST=y
+CONFIG_BLK_DEV_LOOP=y
+CONFIG_SCSI=y
+CONFIG_BLK_DEV_SD=y
+CONFIG_BLK_DEV_SR=y
+CONFIG_SCSI_MULTI_LUN=y
+CONFIG_NETDEVICES=y
+CONFIG_INPUT_POLLDEV=y
+CONFIG_INPUT_EVDEV=y
+CONFIG_INPUT_MISC=y
+CONFIG_INPUT_UINPUT=y
+CONFIG_DEVPTS_MULTIPLE_INSTANCES=y
+# CONFIG_HWMON is not set
+CONFIG_MEDIA_SUPPORT=y
+CONFIG_MEDIA_CAMERA_SUPPORT=y
+CONFIG_V4L_PLATFORM_DRIVERS=y
+CONFIG_ION=y
+CONFIG_FB=y
+CONFIG_UHID=y
+# CONFIG_USB_SUPPORT is not set
+CONFIG_SWITCH=y
+CONFIG_RTC_CLASS=y
+CONFIG_UIO=y
+CONFIG_UIO_PDRV=y
+CONFIG_UIO_PDRV_GENIRQ=y
+CONFIG_STAGING=y
+CONFIG_ZSMALLOC=y
+CONFIG_ZRAM=y
+CONFIG_ZRAM_DEBUG=y
+CONFIG_ANDROID=y
+CONFIG_ANDROID_BINDER_IPC=y
+CONFIG_ASHMEM=y
+CONFIG_ANDROID_LOGGER=y
+CONFIG_ANDROID_LOW_MEMORY_KILLER=y
+CONFIG_ANDROID_INTF_ALARM_DEV=y
+CONFIG_SYNC=y
+CONFIG_SW_SYNC=y
+CONFIG_EXT2_FS=y
+CONFIG_EXT3_FS=y
+CONFIG_EXT3_FS_POSIX_ACL=y
+CONFIG_EXT3_FS_SECURITY=y
+CONFIG_EXT4_FS=y
+CONFIG_EXT4_FS_POSIX_ACL=y
+CONFIG_EXT4_FS_SECURITY=y
+CONFIG_EXT4_DEBUG=y
+CONFIG_QUOTA=y
+CONFIG_QFMT_V2=y
+CONFIG_FUSE_FS=y
+CONFIG_ISO9660_FS=y
+CONFIG_JOLIET=y
+CONFIG_ZISOFS=y
+CONFIG_UDF_FS=y
+CONFIG_MSDOS_FS=y
+CONFIG_VFAT_FS=y
+CONFIG_TMPFS=y
+CONFIG_CRAMFS=y
+CONFIG_NLS_CODEPAGE_437=y
+CONFIG_NLS_ISO8859_1=y
+CONFIG_NLS_UTF8=y
+CONFIG_PRINTK_TIME=y
+CONFIG_MAGIC_SYSRQ=y
+CONFIG_READABLE_ASM=y
+CONFIG_DEBUG_FS=y
+CONFIG_DEBUG_SECTION_MISMATCH=y
+CONFIG_LOCKUP_DETECTOR=y
+CONFIG_BOOTPARAM_HARDLOCKUP_PANIC=y
+CONFIG_BOOTPARAM_SOFTLOCKUP_PANIC=y
+CONFIG_SCHEDSTATS=y
+CONFIG_TIMER_STATS=y
+CONFIG_DEBUG_INFO=y
+CONFIG_CRYPTO_ECB=y
+CONFIG_CRYPTO_SHA256=y
+CONFIG_CRC_T10DIF=y
+CONFIG_CRC7=y
diff --git a/arch/arm/mach-mesong9tv/Makefile b/arch/arm/mach-mesong9tv/Makefile
index 463e7d877585..80ca12415a1e 100755
--- a/arch/arm/mach-mesong9tv/Makefile
+++ b/arch/arm/mach-mesong9tv/Makefile
@@ -5,7 +5,11 @@
 # Common support
 
 
-obj-y := cpu.o clock.o
+obj-y := cpu.o clock.o time.o iomapping.o vpu.o
+obj-y += power_gate.o
+obj-m :=
+obj-n :=
+obj-  :=
 
 # Board support
 obj-$(CONFIG_MACH_MESONG9TV_COMMON_BOARD) += board-mesong9tv-common.o
@@ -33,8 +37,9 @@ obj-$(CONFIG_MESON_SUSPEND)	+= power_suspend.o
 #ifneq ($(CONFIG_MESON_SUSPEND),y)
 #obj-$(CONFIG_SUSPEND) += sleep.o
 #endif
+obj-$(CONFIG_AMLOGIC_THERMAL) += thermal.o
 
-obj-$(CONFIG_AML_HDMI_TX)	+=  hdmi_tx_hw/
+#obj-$(CONFIG_AML_HDMI_TX)	+=  hdmi_tx_hw/
 
 # ARM Trustzone
 obj-$(CONFIG_MESON_TRUSTZONE)	+= meson-smc.o meson-secure.o
diff --git a/arch/arm/mach-mesong9tv/Makefile.boot b/arch/arm/mach-mesong9tv/Makefile.boot
new file mode 100644
index 000000000000..c7e75acfe6c9
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/Makefile.boot
@@ -0,0 +1,4 @@
+   zreladdr-y	:= 0x00008000
+params_phys-y	:= 0x00000100
+initrd_phys-y	:= 0x00800000
+
diff --git a/arch/arm/mach-mesong9tv/board-mesong9tv-common.c b/arch/arm/mach-mesong9tv/board-mesong9tv-common.c
new file mode 100644
index 000000000000..ba6afe097f78
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/board-mesong9tv-common.c
@@ -0,0 +1,155 @@
+/*
+ * arch/arm/mach-mesong9tv/board-mesong9tv-common.c
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/mm.h>
+#include <linux/memblock.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/dma-mapping.h>
+#include <linux/device.h>
+#include <linux/of.h>
+#include <linux/of_platform.h>
+#include <linux/amlogic/of_lm.h>
+#include <linux/reboot.h>
+#include <plat/irq.h>
+#include <plat/lm.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+#include <asm/system_info.h>
+#include <mach/io.h>
+#ifdef CONFIG_SMP
+#include <mach/smp.h>
+#endif
+#include <linux/syscore_ops.h>
+#include <plat/cpu.h>
+#include <mach/am_regs.h>
+
+
+
+extern void meson_common_restart(char mode,const char *cmd);
+static void meson_map_board_io(void);
+extern unsigned long long aml_reserved_start;
+extern unsigned long long aml_reserved_end;
+extern void __init meson_timer_init(void);
+//void backup_cpu_entry_code(void);
+
+
+static __init void meson_reserve(void)
+{
+
+	/*
+	 * Reserved memory for hotplug:
+	 * start address: PHYS_OFFSET, size 0x4000,
+	 * toprevent other getting logical address 0xc0000000 and
+	 * flushing valid data on "zero address"
+	 */
+	memblock_reserve(PHYS_OFFSET,__pa(swapper_pg_dir) - PHYS_OFFSET);
+}
+
+__initdata struct map_desc meson_board_io_desc[1];
+
+static __init void meson_map_board_io(void)
+{
+	meson_board_io_desc[0].virtual = PAGE_ALIGN(__phys_to_virt(aml_reserved_start)),
+	meson_board_io_desc[0].pfn     = __phys_to_pfn(aml_reserved_start),
+	meson_board_io_desc[0].length  = aml_reserved_end - aml_reserved_start + 1,
+	meson_board_io_desc[0].type    = MT_MEMORY_NONCACHED,
+	iotable_init(meson_board_io_desc, ARRAY_SIZE(meson_board_io_desc));
+}
+static void __init meson_map_io(void)
+{
+	meson_map_default_io();
+	meson_map_board_io();
+}
+
+static struct of_device_id meson_of_platform_bus_ids[] = {
+	{.compatible = "simple-bus",},
+	{},
+};
+
+#ifdef CONFIG_OF_LM
+static struct of_device_id meson_of_lm_bus_ids[] = {
+	{.compatible = "logicmodule-bus",},
+	{},
+};
+#endif
+
+
+static __init void meson_init_machine_devicetree(void)
+{
+	struct device *parent;
+	parent = get_device(&platform_bus);
+
+	of_platform_populate(NULL, meson_of_platform_bus_ids,NULL,parent);
+#ifdef CONFIG_OF_LM
+	of_lm_populate(NULL, meson_of_lm_bus_ids,NULL,NULL);
+#endif
+
+}
+
+int meson_cache_of_init(void);
+
+static __init void meson_init_early(void)
+{
+	int rev;
+
+	meson_cpu_version_init();
+	/*
+	 * Mali or some USB devices allocate their coherent buffers from atomic
+	 * context. Increase size of atomic coherent pool to make sure such
+	 * the allocations won't fail.
+	 */
+	init_dma_coherent_pool_size(SZ_4M);
+
+	rev = get_meson_cpu_version(MESON_CPU_VERSION_LVL_MAJOR);
+	rev <<= 24;
+	system_serial_high = rev;
+	rev = get_meson_cpu_version(MESON_CPU_VERSION_LVL_MINOR);
+	system_rev = rev;
+}
+
+static void __init meson_init_irq(void)
+{
+	meson_init_gic_irq();
+	//backup_cpu_entry_code();
+}
+static const char *meson_dt_compat[] __initdata = {
+	"AMLOGIC,T866_G9TV",
+	NULL,
+};
+
+DT_MACHINE_START(T866_G9TV, "Amlogic T866 G9TV platform")
+	.reserve	= meson_reserve,
+#ifdef CONFIG_SMP
+	.smp		= smp_ops(meson_smp_ops),
+#endif
+	.map_io		= meson_map_io,
+	.init_early	= meson_init_early,
+	.init_irq	= meson_init_irq,
+	.init_time	= meson_timer_init,
+	.init_machine	= meson_init_machine_devicetree,
+	.restart	= meson_common_restart,
+	.dt_compat	= meson_dt_compat,
+MACHINE_END
diff --git a/arch/arm/mach-mesong9tv/cache.c b/arch/arm/mach-mesong9tv/cache.c
new file mode 100644
index 000000000000..2f99c2dc8a7c
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/cache.c
@@ -0,0 +1,39 @@
+/*
+ * arch/arm/mach-mesong9tv/cache.c
+ *
+ * Copyright (C) 2013 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <linux/printk.h>
+#include <linux/string.h>
+#include <asm/hardware/cache-l2x0.h>
+
+static int __init meson_cache_of_init(void)
+{
+	int aux = 0;
+	/*
+		put some default aux setting here
+	*/
+	
+	l2x0_of_init(aux,~0);
+	return 0;
+}
+early_initcall(meson_cache_of_init);
diff --git a/arch/arm/mach-mesong9tv/clock.c b/arch/arm/mach-mesong9tv/clock.c
new file mode 100644
index 000000000000..e31111cd45e7
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/clock.c
@@ -0,0 +1,1812 @@
+/*
+ * arch/arm/mach-mesong9tv/clock.c
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#define CONFIG_CPU_FREQ_DEBUG		0
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/clk.h>
+#include <linux/init.h>
+#include <linux/spinlock.h>
+#include <linux/delay.h>
+#include <linux/sysfs.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/cpu.h>
+
+#include <linux/clkdev.h>
+#include <linux/printk.h>
+#include <plat/io.h>
+#include <plat/cpufreq.h>
+#include <mach/am_regs.h>
+#include <mach/clock.h>
+#include <mach/cpu.h>
+
+#ifdef CONFIG_AMLOGIC_USB
+#include <mach/usbclock.h>
+#endif
+
+
+#ifdef CONFIG_MESON_TRUSTZONE
+#include <mach/meson-secure.h>
+#endif
+
+#include <linux/delay.h>
+extern struct arm_delay_ops arm_delay_ops;
+
+
+static DEFINE_SPINLOCK(clockfw_lock);
+static DEFINE_MUTEX(clock_ops_lock);
+
+/**************** SYS PLL**************************/
+#define SYS_PLL_TABLE_MIN		24000000
+#define SYS_PLL_TABLE_MAX		2112000000
+
+#define CPU_FREQ_LIMIT			1488000000
+
+struct sys_pll_s {
+	unsigned int freq;
+	unsigned int cntl0;
+	unsigned int latency;
+};
+
+typedef union latency_data {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned apb_div:4;	/* 0 */
+		unsigned peri_div:4;	/* 4 */
+		unsigned axi_div:4;	/* 8 */
+		unsigned l2_div:4;		/* 12 */
+		unsigned ext_div_n:8;	/* 16 */
+		unsigned afc_dsel_bp_en:1; /* 24 */
+		unsigned afc_dsel_bp_in: 1; /* 25 */
+	unsigned reserved:6;	/* 26 */
+	} b;
+} latency_data_t;
+
+static unsigned sys_pll_settings[][3] = {
+	{   24, 0x40020238, 0x01063546 }, /* fvco 1344, / 4, /14 */
+	{   48, 0x40020240, 0x01033546 }, /* fvco 1536, / 4, / 8 */
+	{   72, 0x40020248, 0x03023546 }, /* fvco 1728, / 4, / 6 */
+	{   96, 0x40020240, 0x01013546 }, /* fvco 1536, / 4, / 4 */
+	{  120, 0x40020250, 0x03013546 }, /* fvco 1920, / 4, / 4 */
+	{  144, 0x40020260, 0x03013546 }, /* fvco 2304, / 4, / 4 */
+	{  168, 0x40010238, 0x01013546 }, /* fvco 1344, / 2, / 4 */
+	{  192, 0x40010240, 0x01013546 }, /* fvco 1536, / 2, / 4 */
+	{  216, 0x40010248, 0x03013546 }, /* fvco 1728, / 2, / 4 */
+	{  240, 0x40010250, 0x03013546 }, /* fvco 1920, / 2, / 4 */
+	{  264, 0x40010258, 0x03013546 }, /* fvco 2112, / 2, / 4 */
+	{  288, 0x40010260, 0x03013546 }, /* fvco 2304, / 2, / 4 */
+	{  312, 0x40020234, 0x01003546 }, /* fvco 1248, / 4, / 1 */
+	{  336, 0x40020238, 0x01003546 }, /* fvco 1344, / 4, / 1 */
+	{  360, 0x4002023C, 0x01003546 }, /* fvco 1440, / 4, / 1 */
+	{  384, 0x40020240, 0x01003546 }, /* fvco 1536, / 4, / 1 */
+	{  408, 0x40020244, 0x01003546 }, /* fvco 1632, / 4, / 1 */
+	{  432, 0x40020248, 0x03003546 }, /* fvco 1728, / 4, / 1 */
+	{  456, 0x4002024C, 0x03003546 }, /* fvco 1824, / 4, / 1 */
+	{  480, 0x40020250, 0x03003546 }, /* fvco 1920, / 4, / 1 */
+	{  504, 0x40020254, 0x03003546 }, /* fvco 2016, / 4, / 1 */
+	{  528, 0x40020258, 0x03003546 }, /* fvco 2112, / 4, / 1 */
+	{  552, 0x4002025C, 0x03003546 }, /* fvco 2208, / 4, / 1 */
+	{  576, 0x40020260, 0x03003546 }, /* fvco 2304, / 4, / 1 */
+	{  600, 0x40010232, 0x01003546 }, /* fvco 1200, / 2, / 1 */
+	{  624, 0x40010234, 0x01003546 }, /* fvco 1248, / 2, / 1 */
+	{  648, 0x40010236, 0x01003546 }, /* fvco 1296, / 2, / 1 */
+	{  672, 0x40010238, 0x01003546 }, /* fvco 1344, / 2, / 1 */
+	{  696, 0x4001023A, 0x01003546 }, /* fvco 1392, / 2, / 1 */
+	{  720, 0x4001023C, 0x01003546 }, /* fvco 1440, / 2, / 1 */
+	{  744, 0x4001023E, 0x01003546 }, /* fvco 1488, / 2, / 1 */
+	{  768, 0x40010240, 0x01003546 }, /* fvco 1536, / 2, / 1 */
+	{  792, 0x40010242, 0x01003546 }, /* fvco 1584, / 2, / 1 */
+	{  816, 0x40010244, 0x01003546 }, /* fvco 1632, / 2, / 1 */
+	{  840, 0x40010246, 0x01003546 }, /* fvco 1680, / 2, / 1 */
+	{  864, 0x40010248, 0x03003546 }, /* fvco 1728, / 2, / 1 */
+	{  888, 0x4001024A, 0x03003546 }, /* fvco 1776, / 2, / 1 */
+	{  912, 0x4001024C, 0x03003546 }, /* fvco 1824, / 2, / 1 */
+	{  936, 0x4001024E, 0x03003546 }, /* fvco 1872, / 2, / 1 */
+	{  960, 0x40010250, 0x03003546 }, /* fvco 1920, / 2, / 1 */
+	{  984, 0x40010252, 0x03003546 }, /* fvco 1968, / 2, / 1 */
+	{ 1008, 0x40010254, 0x03003546 }, /* fvco 2016, / 2, / 1 */
+	{ 1032, 0x40010256, 0x03003546 }, /* fvco 2064, / 2, / 1 */
+	{ 1056, 0x40010258, 0x03003546 }, /* fvco 2112, / 2, / 1 */
+	{ 1080, 0x4001025A, 0x03003546 }, /* fvco 2160, / 2, / 1 */
+	{ 1104, 0x4001025C, 0x03003546 }, /* fvco 2208, / 2, / 1 */
+	{ 1128, 0x4001025E, 0x03003546 }, /* fvco 2256, / 2, / 1 */
+	{ 1152, 0x40010260, 0x03003546 }, /* fvco 2304, / 2, / 1 */
+	{ 1176, 0x40010262, 0x03003546 }, /* fvco 2352, / 2, / 1 */
+	{ 1200, 0x40000232, 0x01003546 }, /* fvco 1200, / 1, / 1 */
+	{ 1224, 0x40000233, 0x01003546 }, /* fvco 1224, / 1, / 1 */
+	{ 1248, 0x40000234, 0x01003546 }, /* fvco 1248, / 1, / 1 */
+	{ 1272, 0x40000235, 0x01003546 }, /* fvco 1272, / 1, / 1 */
+	{ 1296, 0x40000236, 0x01003546 }, /* fvco 1296, / 1, / 1 */
+	{ 1320, 0x40000237, 0x01003546 }, /* fvco 1320, / 1, / 1 */
+	{ 1344, 0x40000238, 0x01003546 }, /* fvco 1344, / 1, / 1 */
+	{ 1368, 0x40000239, 0x01003546 }, /* fvco 1368, / 1, / 1 */
+	{ 1392, 0x4000023A, 0x01003546 }, /* fvco 1392, / 1, / 1 */
+	{ 1416, 0x4000023B, 0x01003546 }, /* fvco 1416, / 1, / 1 */
+	{ 1440, 0x4000023C, 0x01003546 }, /* fvco 1440, / 1, / 1 */
+	{ 1464, 0x4000023D, 0x01003546 }, /* fvco 1464, / 1, / 1 */
+	{ 1488, 0x4000023E, 0x01003546 }, /* fvco 1488, / 1, / 1 */
+	{ 1512, 0x4000023F, 0x01003546 }, /* fvco 1512, / 1, / 1 */
+	{ 1536, 0x40000240, 0x01003546 }, /* fvco 1536, / 1, / 1 */
+	{ 1560, 0x40000241, 0x01003546 }, /* fvco 1560, / 1, / 1 */
+	{ 1584, 0x40000242, 0x01003546 }, /* fvco 1584, / 1, / 1 */
+	{ 1608, 0x40000243, 0x01003546 }, /* fvco 1608, / 1, / 1 */
+	{ 1632, 0x40000244, 0x01003546 }, /* fvco 1632, / 1, / 1 */
+	{ 1656, 0x40004244, 0x01003546 }, /* fvco 1656, / 1, / 1 */
+	{ 1680, 0x40008244, 0x01003546 }, /* fvco 1680, / 1, / 1 */
+	{ 1704, 0x4000c244, 0x01003546 }, /* fvco 1704, / 1, / 1 */
+	{ 1728, 0x40000245, 0x01003546 }, /* fvco 1728, / 1, / 1 */
+	{ 1752, 0x40004245, 0x01003546 }, /* fvco 1752, / 1, / 1 */
+	{ 1776, 0x40008245, 0x01003546 }, /* fvco 1776, / 1, / 1 */
+	{ 1800, 0x4000c245, 0x01003546 }, /* fvco 1800, / 1, / 1 */
+	{ 1824, 0x40000246, 0x01003546 }, /* fvco 1824, / 1, / 1 */
+	{ 1848, 0x40004246, 0x01003546 }, /* fvco 1848, / 1, / 1 */
+	{ 1872, 0x40008246, 0x01003546 }, /* fvco 1872, / 1, / 1 */
+	{ 1896, 0x4000c246, 0x01003546 }, /* fvco 1896, / 1, / 1 */
+	{ 1920, 0x40000247, 0x01003546 }, /* fvco 1920, / 1, / 1 */
+	{ 1944, 0x40004247, 0x01003546 }, /* fvco 1944, / 1, / 1 */
+	{ 1968, 0x40008247, 0x01003546 }, /* fvco 1968, / 1, / 1 */
+	{ 1992, 0x4000c247, 0x01003546 }, /* fvco 1992, / 1, / 1 */
+	{ 2016, 0x40000248, 0x01003546 }, /* fvco 2016, / 1, / 1 */
+	{ 2040, 0x40004248, 0x01003546 }, /* fvco 2040, / 1, / 1 */
+	{ 2064, 0x40008248, 0x01003546 }, /* fvco 2064, / 1, / 1 */
+	{ 2088, 0x4000c248, 0x01003546 }, /* fvco 2088, / 1, / 1 */
+	{ 2112, 0x40000249, 0x01003546 }, /* fvco 2112, / 1, / 1 */
+};
+static unsigned setup_a9_clk_max = CPU_FREQ_LIMIT;
+static unsigned setup_a9_clk_min =    24000000;
+
+
+static unsigned int freq_limit = 1;
+
+static int set_sys_pll(struct clk *clk,  unsigned long dst);
+
+#define IS_CLK_ERR(a)  (IS_ERR(a) || a == 0)
+
+static unsigned long clk_get_rate_a9(struct clk * clkdev);
+
+
+
+#ifndef CONFIG_CLK_MSR_NEW
+static unsigned int clk_util_clk_msr(unsigned int clk_mux)
+{
+	unsigned int  msr;
+	unsigned int regval = 0;
+	aml_write_reg32(P_MSR_CLK_REG0,0);
+	// Set the measurement gate to 64uS
+	clrsetbits_le32(P_MSR_CLK_REG0,0xffff,64-1);
+	// Disable continuous measurement
+	// disable interrupts
+	clrbits_le32(P_MSR_CLK_REG0,((1 << 18) | (1 << 17)));
+	clrsetbits_le32(P_MSR_CLK_REG0,(0x1f<<20),(clk_mux<<20)|(1<<19)|(1<<16));
+
+	aml_read_reg32(P_MSR_CLK_REG0);
+	// Wait for the measurement to be done
+	do {
+	regval = aml_read_reg32(P_MSR_CLK_REG0);
+	} while (regval & (1 << 31));
+	// disable measuring
+	clrbits_le32(P_MSR_CLK_REG0,(1 << 16));
+	msr=(aml_read_reg32(P_MSR_CLK_REG2)+31)&0x000FFFFF;
+	// Return value in MHz*measured_val
+	return (msr>>6)*1000000;
+
+}
+#else
+static  unsigned int clk_util_clk_msr(unsigned int clk_mux)
+{
+    unsigned int regval = 0;
+    /// Set the measurement gate to 64uS
+    clrsetbits_le32(P_MSR_CLK_REG0,0xffff,121);///122us
+
+    // Disable continuous measurement
+    // disable interrupts
+    clrsetbits_le32(P_MSR_CLK_REG0,
+        ((1 << 18) | (1 << 17)|(0x1f << 20)),///clrbits
+        (clk_mux << 20) |                    /// Select MUX
+        (1 << 19) |                          /// enable the clock
+        (1 << 16));
+    // Wait for the measurement to be done
+    regval = aml_read_reg32(P_MSR_CLK_REG0);
+    do {
+        regval = aml_read_reg32(P_MSR_CLK_REG0);
+    } while (regval & (1 << 31));
+
+    // disable measuring
+    clrbits_le32(P_MSR_CLK_REG0, (1 << 16));
+    regval = (aml_read_reg32(P_MSR_CLK_REG2)) & 0x000FFFFF;
+    regval += (regval/10000) * 6;
+    // Return value in MHz*measured_val
+    return (regval << 13);
+}
+
+#endif
+
+int    clk_measure(char  index )
+{
+    const char* clk_table[]={
+    " CTS_AOCLK_INT(76)",
+    " CTS_AOCLKx2_INT(75)",
+    " CTS_ADC_SCLK(74)",
+    " CTS_PWM_C_CLK(73)",
+    " CTS_PWM_D_CLK(72)",
+    " CTS_PWM_E_CLK(71)",
+    " CTS_PWM_F_CLK(70)",
+    " CTS_SDHC_TXCLK(69)",
+    " CTS_SDHC_TXCLK2X(68)",
+    " CTS_TVFE_MCLK(67)",
+    " CTS_VID_LOCK_CLK(66)",
+    " ADC_DPLL_INTCLK(65)",
+    " ADC_DPLL_CLK_B2(64)",
+    " HDMI_IL_CLK_OUT(63)",
+    " CTX_HEVC_CLK(62)",
+    " GPIO_CLK_MSR(61)",
+    " ALT_32K_CLK(60)",
+    " CTS_HCODEC_CLK(59)",
+    " CTS_ATV_DMD_SYS_CLK(58)",
+    " CTS_ATV_DMD_VDAC_CLK(57)",
+    " CTS_DEMOD_CORE_CLK(56)",
+    " VID_PLL_DIV_CLK_OUT(55)",
+    " CTS_HDMIRX_ACR_REF_CLK(54)",
+    " HDMIRX_AUD_CLK(53)",
+    " CTS_HDMIRX_AUDMEAS_REF_CLK(52)",
+    " CTS_HDMIRX_MODET_CLK(51)",
+    " CTS_HDMIRX_CFG_CLK(50)",
+    " MP2_CLK_OUT(49)",
+    " MP1_CLK_OUT(48)",
+    " DDR_DPLL_PT_CLK(47)",
+    " CTS_VPU_CLK(46)",
+    " CTS_PWM_A_CLK(45)",
+    " CTS_PWM_B_CLK(44)",
+    " FCLK_DIV5(43)",
+    " MP0_CLK_OUT(42)",
+    " ETH_RX_CLK_OR_CLK_RMII(41)",
+    " CTS_PCM_MCLK(40)",
+    " CTS_PCM_SCLK(39)",
+    " CTS_VDIN_MEAS_CLK(38)",
+    " CTS_CLK_I958(37)",
+    " CTS_HDMI_TX_PIXEL_CLK(36)",
+    " CTS_MALI_CLK (35)",
+    " CTS_SDHC_SDCLK(34)",
+    " CTS_SDHC_RXCLK(33)",
+    " CTS_VDEC_CLK(32)",
+    " MPLL_CLK_TEST_OUT(31)",
+    " HDMIRX_AUDMEAS_CLK(30)",
+    " HDMIRX_PIX_CLK(29)",
+    " HDMIRX_TMDS_CLK(28)",
+    " HDMIRX_MPLL_DIV_CLK(27)",
+    " SC_CLK_INT(26)",
+    " ADC_DPLL_CLK_A2(25)",
+    " LVDS_FIFO_CLK(24)",
+    " HDMI_CLK_TODIG(23)",
+    " ETH_PHY_REF_CLK(22)",
+    " I2S_CLK_IN_SRC0(21)",
+    " RTC_OSC_CLK_OUT(20)",
+    " CTS_HDMITX_SYS_CLK(19)",
+    " A9_CLK_DIV16(18)",
+    " ADC_DPLL_CLK_B3(17)",
+    " CTS_FEC_CLK_2(16)",
+    " CTS_FEC_CLK_1(15)",
+    " CTS_FEC_CLK_0(14)",
+    " CTS_AMCLK(13)",
+    " HDMIRX_AUD_PLL_CLK(12)",
+    " RGMII_TX_CLK_TO_PHY(11)",
+    " CTS_VDAC_CLK(10)",
+    " CTS_ENCL_CLK(9)",
+    " CTS_ENCP_CLK(8)",
+    " CLK81(7)",
+    " CTS_ENCI_CLK(6)",
+    " GP1_PLL_CLK(5)",
+    " GP0_PLL_CLK(4)",
+    " A9_RING_OSC_CLK(3)",
+    " AM_RING_OSC_CLK_OUT_EE2(2)",
+    " AM_RING_OSC_CLK_OUT_EE1(1)",
+    " AM_RING_OSC_CLK_OUT_EE0(0)",
+    };
+	int  i;
+	int len = sizeof(clk_table)/sizeof(char*) - 1;
+	if (index  == 0xff)
+	{
+	 	for(i = 0;i < len;i++)
+		{
+			printk("[%10d]%s\n",clk_util_clk_msr(i),clk_table[len-i]);
+		}
+		return 0;
+	}
+	printk("[%10d]%s\n",clk_util_clk_msr(index),clk_table[len-index]);
+	return 0;
+}
+
+long clk_round_rate_sys(struct clk *clk, unsigned long rate)
+{
+	int idx,dst;
+	if (clk == NULL || IS_ERR(clk))
+		return -EINVAL;
+
+	dst = rate;
+	if (rate < SYS_PLL_TABLE_MIN)
+		dst = SYS_PLL_TABLE_MIN;
+	else if (rate > SYS_PLL_TABLE_MAX)
+		dst = SYS_PLL_TABLE_MAX;
+
+	if(dst < setup_a9_clk_min)
+		dst = setup_a9_clk_min;
+	else if(dst > setup_a9_clk_max)
+		dst = setup_a9_clk_max;
+
+	idx = ((dst - SYS_PLL_TABLE_MIN) / 1000000) / 24;
+	//printk("sys round rate: %d -- %d\n",rate,sys_pll_settings[idx][0]);
+	rate = sys_pll_settings[idx][0] * 1000000;
+
+	return rate;
+}
+long clk_round_rate(struct clk *clk, unsigned long rate)
+{
+	if (clk == NULL || IS_ERR(clk))
+		return -EINVAL;
+	if(clk->round_rate)
+		return clk->round_rate(clk,rate);
+
+	if (rate < clk->min)
+		return clk->min;
+
+	if (rate > clk->max)
+		return clk->max;
+
+	return rate;
+}
+EXPORT_SYMBOL(clk_round_rate);
+
+unsigned long clk_get_rate(struct clk *clk)
+{
+	if (clk == NULL || IS_ERR(clk))
+		return -EINVAL;
+
+    if (clk->get_rate)
+		return clk->get_rate(clk);
+	else
+		return clk->rate;
+}
+EXPORT_SYMBOL(clk_get_rate);
+
+int on_parent_changed(struct clk *clk, int rate, int before,int failed)
+{
+	struct clk_ops* pops = clk->clk_ops;
+	while(pops){
+		if(before == 1){
+				if(pops->clk_ratechange_before)
+					pops->clk_ratechange_before(rate,pops->privdata);
+		}
+		else{
+				if(pops->clk_ratechange_after)
+					pops->clk_ratechange_after(rate,pops->privdata,failed);
+		}
+		pops = pops->next;
+	}
+	return 0;
+}
+
+int meson_notify_childs_changed(struct clk *clk,int before,int failed)
+{
+	struct clk* p;
+	if(IS_CLK_ERR(clk))
+		return 0;
+	p = (struct clk*)(clk->child.next);
+	if (p) {
+		unsigned long flags;
+
+		int rate = clk_get_rate(p);
+		spin_lock_irqsave(&clockfw_lock, flags);
+		on_parent_changed(p,rate,before,failed);
+		spin_unlock_irqrestore(&clockfw_lock, flags);
+
+		meson_notify_childs_changed(p,before,failed);
+
+		p = (struct clk*)p->sibling.next;
+		while(p){
+		  spin_lock_irqsave(&clockfw_lock, flags);
+			on_parent_changed(p,rate,before,failed);
+			spin_unlock_irqrestore(&clockfw_lock, flags);
+
+			meson_notify_childs_changed(p,before,failed);
+
+			p = (struct clk*)p->sibling.next;
+		}
+	}
+	return 0;
+}
+
+//flow. self -> child -> child slibling
+int meson_clk_set_rate(struct clk *clk, unsigned long rate)
+{
+	unsigned long flags=0;
+	int ret;
+	int ops_run_count;
+	struct clk_ops *p;
+
+	if(clk->set_rate == NULL || IS_CLK_ERR(clk))
+			return 0;
+	//post message before clk change.
+	{
+			ret = 0;
+			ops_run_count = 0;
+			p = clk->clk_ops;
+			while(p){
+				ops_run_count++;
+				if(p->clk_ratechange_before)
+					ret = p->clk_ratechange_before(rate, p->privdata);
+				if(ret != 0)
+					break;
+				p = p->next;
+			}
+			meson_notify_childs_changed(clk,1,ret);
+	}
+
+
+	if(ret == 0){
+	  if (!clk->open_irq)
+	      spin_lock_irqsave(&clockfw_lock, flags);
+	  else
+	      spin_lock(&clockfw_lock);
+//		printk(KERN_INFO "%s() clk=%p rate=%lu\n", __FUNCTION__, clk, rate);
+	  if(clk->set_rate)
+	  	ret = clk->set_rate(clk, rate) ;
+	  if (!clk->open_irq)
+	      spin_unlock_irqrestore(&clockfw_lock, flags);
+	  else
+	      spin_unlock(&clockfw_lock);
+	}
+
+	//post message after clk change.
+	{
+			int idx = 0;
+			p = clk->clk_ops;
+			while(p){
+				idx++;
+				if(idx > ops_run_count)
+					break;
+				if(p->clk_ratechange_after)
+						p->clk_ratechange_after(rate, p->privdata,ret);
+				p = p->next;
+			}
+	}
+
+	meson_notify_childs_changed(clk,0,ret);
+
+  return ret;
+}
+
+int clk_set_rate(struct clk *clk, unsigned long rate)
+{
+	int ret=0;
+	int parent_rate = 0;
+	if(IS_CLK_ERR(clk))
+		return 0;
+	if(clk_get_rate(clk) == rate){
+			return 0;
+	}
+
+	if(clk->need_parent_changed){
+		unsigned long flags;
+	  spin_lock_irqsave(&clockfw_lock, flags);
+		parent_rate = clk->need_parent_changed(clk, rate);
+	  spin_unlock_irqrestore(&clockfw_lock, flags);
+	}
+
+	if(parent_rate != 0)
+		clk_set_rate(clk->parent,parent_rate);
+	else{
+		mutex_lock(&clock_ops_lock);
+		//printk(KERN_INFO "%s() clk=%p rate=%lu\n", __FUNCTION__, clk, rate);
+		ret = meson_clk_set_rate(clk,rate);
+	 	mutex_unlock(&clock_ops_lock);
+	}
+	return ret;
+}
+EXPORT_SYMBOL(clk_set_rate);
+
+unsigned long long clkparse(const char *ptr, char **retptr)
+{
+    char *endptr;   /* local pointer to end of parsed string */
+
+    unsigned long long ret = simple_strtoull(ptr, &endptr, 0);
+
+    switch (*endptr) {
+    case 'G':
+    case 'g':
+        ret *= 1000;
+    case 'M':
+    case 'm':
+        ret *= 1000;
+    case 'K':
+    case 'k':
+        ret *= 1000;
+        endptr++;
+    default:
+        break;
+    }
+
+    if (retptr) {
+        *retptr = endptr;
+    }
+
+    return ret;
+}
+
+int meson_enable(struct clk *clk)
+{
+	if (IS_CLK_ERR(clk))
+		return 0;
+
+	if (clk_get_status(clk) == 1)
+		return 0;
+
+	if (meson_enable(clk->parent) == 0) {
+			struct clk_ops *p;
+			int idx;
+			int ops_run_count = 0;
+			int ret = 0;
+			p = clk->clk_ops;
+			while(p){
+					ops_run_count++;
+					if(p->clk_enable_before)
+						ret = p->clk_enable_before(p->privdata);
+					if(ret == 1)
+						break;
+					p = p->next;
+			}
+
+			if(ret == 0){
+				if(clk->enable)
+					ret = clk->enable(clk);
+				else if(clk->clk_gate_reg_adr != 0)
+					aml_set_reg32_mask(clk->clk_gate_reg_adr,clk->clk_gate_reg_mask);
+					ret = 0;
+			}
+
+			p = clk->clk_ops;
+			idx = 0;
+			while(p){
+				idx++;
+				if(idx > ops_run_count)
+					break;
+				if(p->clk_enable_after)
+					 p->clk_enable_after(p->privdata,ret);
+				p = p->next;
+			}
+
+			return ret;
+		}
+		else
+			return 1;
+}
+int clk_enable(struct clk *clk)
+{
+		int ret;
+		mutex_lock(&clock_ops_lock);
+		ret = meson_enable(clk);
+		mutex_unlock(&clock_ops_lock);
+		return ret;
+}
+EXPORT_SYMBOL(clk_enable);
+
+int  meson_clk_disable(struct clk *clk)
+{
+		int ret = 0;
+		int ops_run_count = 0;
+		if(IS_CLK_ERR(clk))
+			return 0;
+		if(clk_get_status(clk) == 0)
+			return 0;
+
+		if(clk->child.next){
+			struct clk* pchild = (struct clk*)(clk->child.next);
+			if(meson_clk_disable(pchild) != 0)
+				return 1;
+			pchild = (struct clk*)pchild->sibling.next;
+			while(pchild){
+				if(meson_clk_disable(pchild) != 0)
+					return 1;
+				pchild = (struct clk*)pchild->sibling.next;
+			}
+		}
+
+		//do clk disable
+		//post message before clk disable.
+		{
+			struct clk_ops *p;
+			ret = 0;
+			p = clk->clk_ops;
+			while(p){
+				ops_run_count++;
+				if(p->clk_disable_before)
+					ret = p->clk_disable_before(p->privdata);
+				if(ret != 0)
+					break;
+				p = p->next;
+			}
+		}
+
+		//do clock gate disable
+		if(ret == 0){
+			if(clk->disable)
+				ret = clk->disable(clk);
+			else if(clk->clk_gate_reg_adr != 0){
+					aml_clr_reg32_mask(clk->clk_gate_reg_adr,clk->clk_gate_reg_mask);
+					ret = 0;
+			}
+		}
+
+		//post message after clk disable.
+		{
+			struct clk_ops *p;
+			int idx = 0;
+			p = clk->clk_ops;
+			while(p){
+				idx++;
+				if(idx > ops_run_count)
+					break;
+				if(p->clk_disable_after)
+						p->clk_disable_after(p->privdata,ret);
+				p = p->next;
+			}
+		}
+
+		return ret;
+}
+
+void clk_disable(struct clk *clk)
+{
+		mutex_lock(&clock_ops_lock);
+		meson_clk_disable(clk);
+		mutex_unlock(&clock_ops_lock);
+}
+EXPORT_SYMBOL(clk_disable);
+
+/**
+ * Section all get rate functions
+ */
+static unsigned long clk_msr_get(struct clk * clk)
+{
+	uint32_t temp;
+	uint32_t cnt = 0;
+
+	if(clk->rate > 0)
+	{
+		return clk->rate;
+	}
+	if(clk->msr>0)
+	{
+		clk->rate = clk_util_clk_msr(clk->msr);
+	}else if (clk->parent){
+		cnt=clk_get_rate(clk->parent);
+		cnt /= 1000000;
+		clk->msr_mul=clk->msr_mul?clk->msr_mul:1;
+		clk->msr_div=clk->msr_div?clk->msr_div:1;
+		temp=cnt*clk->msr_mul;
+		clk->rate=temp/clk->msr_div;
+		clk->rate *= 1000000;
+	}
+	return clk->rate;
+}
+
+static unsigned long clk_get_rate_xtal(struct clk * clkdev)
+{
+	unsigned long clk;
+	clk = aml_read_reg32(AOBUS_REG_ADDR(0x00 << 10) | (0x64)) & 0x3f ;//aml_get_reg32_bits(P_PREG_CTLREG0_ADDR, 4, 6);
+	clk = clk * 1000 * 1000;
+	return clk;
+}
+
+static unsigned long clk_get_rate_sys(struct clk * clkdev)
+{
+	unsigned long clk;
+	if (clkdev && clkdev->rate)
+		clk = clkdev->rate;
+	else {
+		//using measure sys div3 to get sys pll clock. (25)
+		unsigned long mul, div, od, temp;
+		unsigned long long result;
+		clk = clk_get_rate_xtal(NULL);
+		temp = aml_read_reg32(P_HHI_SYS_PLL_CNTL);
+		mul=temp&((1<<9)-1);
+		div=(temp>>9)&0x3f;
+		od=(temp>>16)&3;
+		result=((u64)clk)*((u64)mul);
+		do_div(result,div);
+		clk = (unsigned long)(result>>od);
+	}
+	return clk;
+}
+
+static unsigned long clk_get_rate_a9(struct clk * clkdev)
+{
+	unsigned long clk = 0;
+	unsigned int sysclk_cntl;
+
+	if (clkdev && clkdev->rate)
+		return clkdev->rate;
+
+	sysclk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+	if((sysclk_cntl & (1<<7)) == 0)
+		clk = clk_get_rate_xtal(NULL);
+	else{
+		unsigned long parent_clk = 0;
+		unsigned int pll_sel = sysclk_cntl&3;
+		if(pll_sel == 0)
+			parent_clk = clk_get_rate_xtal(NULL);
+		else if(pll_sel == 1)
+			parent_clk = clk_get_rate_sys(clkdev->parent);
+		else
+			printk(KERN_INFO "Error : A9 parent pll selection incorrect!\n");
+		if(parent_clk > 0){
+			unsigned int N = (aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL1) >> 20) & 0x3FF;
+			unsigned int div = 1;
+			unsigned sel = (sysclk_cntl >> 2) & 3;
+			if(sel == 1)
+				div = 2;
+			else if(sel == 2)
+				div = 3;
+			else if(sel == 3)
+				div = 2 * N;
+			clk = parent_clk / div;
+		}
+	}
+	if (clk == 0) {
+		pr_info("clk_get_rate_a9 measured clk=0 sysclk_cntl=%#x\n", sysclk_cntl);
+	}
+
+	return clk;
+}
+
+/**
+ * udelay will delay depending on lpj.  lpj is adjusted before|after
+ * cpu freq is changed, so udelay could take longer or shorter than
+ * expected. This function scales the udelay value to get a more
+ * accurate delay during cpu freq changes.
+ * lpj is adjust elsewhere, so drivers don't need to worry about this.
+ */
+static inline void udelay_scaled(unsigned long usecs, unsigned int oldMHz,
+                                 unsigned int newMHz)
+{
+	if(arm_delay_ops.ticks_per_jiffy)
+		udelay(usecs);
+	else
+		udelay(usecs * newMHz / oldMHz);
+}
+
+/**
+ *  Internal CPU clock rate setting function.
+ *
+ *  MUST be called with proper protection.
+ */
+static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long gpu)
+{
+	unsigned long parent = 0;
+	unsigned long oldcpu = clk_get_rate_a9(clk);
+	unsigned int cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+
+//	if ((cpu_clk_cntl & 3) == 1) {
+	{
+		parent = clk_get_rate_sys(clk->parent);
+		// CPU switch to xtal
+		aml_write_reg32(P_HHI_SYS_CPU_CLK_CNTL, cpu_clk_cntl & ~(1 << 7));
+		if (oldcpu <= cpu) {
+			// when increasing frequency, lpj has already been adjusted
+			udelay_scaled(10, cpu / 1000000, 24 /*clk_get_rate_xtal*/);
+		} else {
+			// when decreasing frequency, lpj has not yet been adjusted
+			udelay_scaled(10, oldcpu / 1000000, 24 /*clk_get_rate_xtal*/);
+		}
+		//set_sys_pll(clk->parent, cpu);
+
+		// Read CBUS for short delay, then CPU switch to sys pll
+		cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+		aml_write_reg32(P_HHI_SYS_CPU_CLK_CNTL, (cpu_clk_cntl) | (1 << 7));
+		if (oldcpu <= cpu) {
+			// when increasing frequency, lpj has already been adjusted
+			udelay(100);
+		} else {
+			// when decreasing frequency, lpj has not yet been adjusted
+			udelay_scaled(100, oldcpu / 1000000, cpu / 1000000);
+		}
+
+		// CPU switch to sys pll
+		//cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
+		//aml_set_reg32_mask(P_HHI_SYS_CPU_CLK_CNTL, (1 << 7));
+ 	}
+
+	clk->rate = cpu;
+
+#ifdef CONFIG_CPU_FREQ_DEBUG
+	pr_debug("(CTS_CPU_CLK) CPU %ld.%ldMHz\n", clk_get_rate_a9(clk) / 1000000, clk_get_rate_a9(clk)%1000000);
+#endif /* CONFIG_CPU_FREQ_DEBUG */
+
+	return 0;
+}
+
+#ifdef CONFIG_SMP
+#define USE_ON_EACH_CPU 0
+struct clk_change_info{
+  int cpu;
+  struct clk * clk;
+  unsigned long rate;
+  int err;
+};
+
+#define MESON_CPU_STATUS(cpu) aml_read_reg32(MESON_CPU_STATUS_REG(cpu))
+#define MESON_CPU_SET_STATUS(status) aml_write_reg32(MESON_CPU_STATUS_REG(smp_processor_id()),status)
+
+/* add zhihua.xie */
+#define AO_RTI_PWR_A9_MEM_PD0 ((0x00 << 10) | (0x3d << 2)) 	///../ucode/c_always_on_pointer.h:68
+#define P_AO_RTI_PWR_A9_MEM_PD0 		AOBUS_REG_ADDR(AO_RTI_PWR_A9_MEM_PD0)
+
+
+void meson_set_cpu_power_ctrl(uint32_t cpu,int is_power_on)
+{
+	BUG_ON(cpu == 0);
+
+	if(is_power_on){
+		/* SCU Power on CPU */
+		aml_set_reg32_bits(MESON_CPU_POWER_CTRL_REG, 0x0 ,(cpu << 3),2);
+
+#ifndef CONFIG_MESON_CPU_EMULATOR
+		/* Reset enable*/
+		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 1 , (cpu + 24), 1);
+		/* Power on*/
+
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_MEM_PD0, 0, (32 - cpu * 4) ,4);
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL1, 0x0, ((cpu +1) << 1 ), 2);
+		udelay(10);
+		/* Isolation disable */
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL0, 0x0, cpu, 1);
+		/* Reset disable */
+		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0 , (cpu + 24), 1);
+#endif
+	}else{
+		aml_set_reg32_bits(MESON_CPU_POWER_CTRL_REG,0x3,(cpu << 3),2);
+
+#ifndef CONFIG_MESON_CPU_EMULATOR
+		/* Isolation enable */
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL0, 0x1, cpu, 1);
+		udelay(10);
+		/* Power off */
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_CNTL1, 0x3, ((cpu +1) << 1 ), 2);
+		aml_set_reg32_bits(P_AO_RTI_PWR_A9_MEM_PD0, 0xf , (32 - cpu * 4) ,4);
+#endif
+	}
+	dsb();
+	dmb();
+
+	pr_debug("----CPU %d\n",cpu);
+	pr_debug("----MESON_CPU_POWER_CTRL_REG(%08x) = %08x\n",MESON_CPU_POWER_CTRL_REG,aml_read_reg32(MESON_CPU_POWER_CTRL_REG));
+	pr_debug("----P_AO_RTI_PWR_A9_CNTL0(%08x)    = %08x\n",P_AO_RTI_PWR_A9_CNTL0,aml_read_reg32(P_AO_RTI_PWR_A9_CNTL0));
+	pr_debug("----P_AO_RTI_PWR_A9_CNTL1(%08x)    = %08x\n",P_AO_RTI_PWR_A9_CNTL1,aml_read_reg32(P_AO_RTI_PWR_A9_CNTL1));
+
+}
+
+void meson_set_cpu_ctrl_reg(int cpu,int is_on)
+{
+	spin_lock(&clockfw_lock);
+
+#ifdef CONFIG_MESON_TRUSTZONE
+	uint32_t value = 0;
+	value = meson_read_corectrl();
+	value = value & ~(1U << cpu) | (is_on << cpu);
+	value |= 1;
+	meson_modify_corectrl(value);
+#else
+    printk("meson_set_cpu_ctrl_reg is_on %d cpu %d \n",is_on,cpu);
+	aml_set_reg32_bits(MESON_CPU_CONTROL_REG,is_on,cpu,1);
+    printk(" control reg 0x%x \n",aml_read_reg32(MESON_CPU_CONTROL_REG));
+	aml_set_reg32_bits(MESON_CPU_CONTROL_REG,1,0,1);
+    printk(" control reg 0x%x \n",aml_read_reg32(MESON_CPU_CONTROL_REG));
+#endif
+
+	spin_unlock(&clockfw_lock);
+}
+
+void meson_set_cpu_ctrl_addr(uint32_t cpu, const uint32_t addr)
+{
+	spin_lock(&clockfw_lock);
+
+#ifdef CONFIG_MESON_TRUSTZONE
+	meson_auxcoreboot_addr(cpu, addr);
+#else
+	aml_write_reg32((MESON_CPU1_CONTROL_ADDR_REG + ((cpu-1) << 2)), addr);
+#endif
+
+	spin_unlock(&clockfw_lock);
+}
+
+static inline unsigned long meson_smp_wait_others(unsigned status)
+{
+	unsigned long count = 0;
+	int mask;
+	int cpu = 0, my = smp_processor_id();
+
+	mask = (((1 << nr_cpu_ids) - 1) & (~(1 << my)));
+	do {
+		__asm__ __volatile__ ("wfe" : : : "memory");
+		for_each_online_cpu(cpu) {
+
+			if (cpu != my && MESON_CPU_STATUS(cpu) == status) {
+				count++;
+				mask &= ~(1 << cpu);
+			}
+		}
+
+	} while (mask);
+
+	return count;
+}
+
+static inline void meson_smp_init_transaction(void)
+{
+    int cpu;
+
+#ifdef CONFIG_MESON_TRUSTZONE
+	meson_modify_corectrl(0);
+#else
+    aml_write_reg32(MESON_CPU_CONTROL_REG, 0);
+#endif
+
+    for_each_online_cpu(cpu) {
+        aml_write_reg32(MESON_CPU_STATUS_REG(cpu), 0);
+    }
+}
+
+#endif /* CONFIG_SMP */
+
+static int clk_set_rate_a9(struct clk *clk, unsigned long rate)
+{
+	int ret;
+	unsigned long irq_flags;
+
+	//printk("clk_set_rate_a9() clk: %d\n",rate);
+
+	if(rate > CPU_FREQ_LIMIT)
+		rate = CPU_FREQ_LIMIT;
+
+	irq_flags = arch_local_irq_save();
+	preempt_disable();
+
+	ret = _clk_set_rate_cpu(clk, rate, 0);
+
+	preempt_enable();
+	arch_local_irq_restore(irq_flags);
+
+	return ret;
+}
+
+static unsigned long clk_get_rate_vid(struct clk * clkdev)
+{
+
+	unsigned long clk;
+	unsigned int vid_cntl = aml_read_reg32(P_HHI_VID_PLL_CNTL);
+	unsigned long parent_clk;
+	unsigned od,M,N;
+	parent_clk = clk_get_rate(clkdev->parent);
+	parent_clk /= 1000000;
+	od = (vid_cntl>>16)&3;
+	M = vid_cntl&0x1FF;
+	N = (vid_cntl>>9)&0x1F;
+	if(od == 0)
+		od = 1;
+	else if(od == 1)
+		od = 2;
+	else if(od == 2)
+		od = 4;
+	clk = parent_clk * M / N;
+	clk /= od;
+	clk *= 1000000;
+	return clk;
+}
+
+static unsigned long clk_get_rate_fixed(struct clk * clkdev)
+{
+
+	unsigned long clk;
+	unsigned int fixed_cntl = aml_read_reg32(P_HHI_MPLL_CNTL);
+	unsigned long parent_clk;
+	unsigned od,M,N;
+	parent_clk = clk_get_rate(clkdev->parent);
+	parent_clk /= 1000000;
+	od = (fixed_cntl>>16)&3;
+	M = fixed_cntl&0x1FF;
+	N = (fixed_cntl>>9)&0x1F;
+	if(od == 0)
+		od = 1;
+	else if(od == 1)
+		od = 2;
+	else if(od == 2)
+		od = 4;
+	clk = parent_clk * M / N;
+	clk /= od;
+	clk *= 1000000;
+	return clk;
+}
+
+static unsigned long clk_get_rate_hpll(struct clk * clkdev)
+{
+	printk("TODO: clk_get_rate_hpll() is not implement in G9TV now\n");
+	return 0;
+/*
+	unsigned long clk;
+	unsigned int vid_cntl = aml_read_reg32(P_HHI_VID_PLL_CNTL);
+	unsigned long parent_clk;
+	unsigned od_fb,od_hdmi,od_ldvs,M,N;
+	parent_clk = clk_get_rate(clkdev->parent);
+	parent_clk /= 1000000;
+	od_ldvs = (vid_cntl>>16)&3;
+	od_hdmi = (vid_cntl>>18)&3;
+	od_fb = (vid_cntl>>20)&3;
+	M = vid_cntl&0x3FF;
+	N = (vid_cntl>>10)&0x1F;
+	if(od_hdmi == 0)
+		od_hdmi = 1;
+	else if(od_hdmi == 1)
+		od_hdmi = 2;
+	else if(od_hdmi == 2)
+		od_hdmi = 4;
+	if(od_fb == 0)
+		od_fb = 1;
+	else if(od_fb == 1)
+		od_fb = 2;
+	else if(od_fb == 2)
+		od_fb = 4;
+printk("N=%d, od_hdmi=%d vid_cntl=0x%x\n",N,od_hdmi,vid_cntl);
+	clk = parent_clk * M * od_fb / N;
+	clk /= od_hdmi;
+	clk *= 1000000;
+	return clk;
+	*/
+}
+
+static unsigned long clk_get_rate_clk81(struct clk * clkdev)
+{
+	unsigned long parent_clk;
+	unsigned long fixed_div_src;
+
+	parent_clk = clk_get_rate(clkdev->parent);
+	fixed_div_src = (aml_read_reg32(P_HHI_MPEG_CLK_CNTL) >> 12) & 0x7;
+
+	if(7 == fixed_div_src)
+		parent_clk/=5;
+	else if(6 == fixed_div_src)
+		parent_clk/=3;
+	else if(5 == fixed_div_src)
+		parent_clk/=4;
+	else{
+		printk("Error: clk81 not in fixed_pll seleting.\n");
+		return 0;
+	}
+
+	parent_clk/=((aml_read_reg32(P_HHI_MPEG_CLK_CNTL) & 0x3f))+1;
+
+	return parent_clk;
+}
+#define CLK_DEFINE(devid,conid,msr_id,setrate,getrate,en,dis,privdata)  \
+    static struct clk clk_##devid={                                     \
+        .set_rate=setrate,.get_rate=getrate,.enable=en,.disable=dis,    \
+        .priv=privdata,.parent=&clk_##conid ,.msr=msr_id                \
+    };                                                                  \
+    static struct clk_lookup clk_lookup_##devid={                       \
+        .dev_id=#devid,.con_id=#conid,.clk=&clk_##devid                 \
+    };clkdev_add(&clk_lookup_##devid)
+
+///TOP level
+static struct clk clk_xtal = {
+	.rate		= -1,
+	.get_rate	= clk_get_rate_xtal,
+};
+
+static struct clk_lookup clk_lookup_xtal = {
+	.dev_id		= "xtal",
+	.con_id		= NULL,
+	.clk		= &clk_xtal
+};
+
+
+static int __init a9_clk_max(char *str)
+{
+    unsigned long  clk=clkparse(str, 0);
+    if(clk<SYS_PLL_TABLE_MIN || clk>SYS_PLL_TABLE_MAX)
+        return 0;
+    setup_a9_clk_max=clk-(clk%24000000);
+    BUG_ON(setup_a9_clk_min>setup_a9_clk_max);
+    return 0;
+}
+early_param("a9_clk_max", a9_clk_max);
+static int __init a9_clk_min(char *str)
+{
+    unsigned long  clk = clkparse(str, 0);
+    if (clk < SYS_PLL_TABLE_MIN || clk > SYS_PLL_TABLE_MAX)
+        return 0;
+    setup_a9_clk_min = clk - (clk % 24000000);
+    BUG_ON(setup_a9_clk_min>setup_a9_clk_max);
+    return 0;
+}
+
+early_param("a9_clk_min", a9_clk_min);
+static int set_sys_pll(struct clk *clk,  unsigned long dst)
+{
+	int idx,loop = 0;
+	static int only_once = 0;
+	unsigned int curr_cntl = aml_read_reg32(P_HHI_SYS_PLL_CNTL);
+	unsigned int cpu_clk_cntl = 0;
+	unsigned int cntl;
+	latency_data_t latency;
+
+	if (dst < SYS_PLL_TABLE_MIN) dst = SYS_PLL_TABLE_MIN;
+	if (dst > SYS_PLL_TABLE_MAX) dst = SYS_PLL_TABLE_MAX;
+
+	idx = ((dst - SYS_PLL_TABLE_MIN) / 1000000) / 24;
+	cpu_clk_cntl = sys_pll_settings[idx][1];
+	latency.d32 =  sys_pll_settings[idx][2];
+
+	printk(KERN_DEBUG"CTS_CPU_CLK %4ld --> %4ld (MHz)\n",
+									clk->rate / 1000000, dst / 1000000);
+	pr_debug("CTS_CPU_CLK old_cntl=0x%x new_cntl=0x%x, latency: %x\n",
+									curr_cntl, cpu_clk_cntl, latency.d32);
+
+	if (cpu_clk_cntl != curr_cntl) {
+SETPLL:
+		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL1,latency.b.ext_div_n,20,10);
+		if(latency.b.ext_div_n)
+			aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 3, 2, 2);
+		else
+			aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0, 2, 2);
+		aml_write_reg32(P_HHI_SYS_PLL_CNTL,  cpu_clk_cntl | (1 << 29));
+		if(only_once == 99){
+			only_once = 1;
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL2, G9TV_SYS_PLL_CNTL_2);
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL3, G9TV_SYS_PLL_CNTL_3);
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL4, G9TV_SYS_PLL_CNTL_4);
+			aml_write_reg32(P_HHI_SYS_PLL_CNTL5, G9TV_SYS_PLL_CNTL_5);
+		}
+		aml_set_reg32_bits(P_HHI_SYS_PLL_CNTL2,latency.b.afc_dsel_bp_in,12,1);
+		aml_set_reg32_bits(P_HHI_SYS_PLL_CNTL2,latency.b.afc_dsel_bp_en,13,1);
+
+		aml_write_reg32(P_HHI_SYS_PLL_CNTL,  cpu_clk_cntl);
+
+		udelay_scaled(100, dst / 1000000, 24 /*clk_get_rate_xtal*/);
+
+		cntl = aml_read_reg32(P_HHI_SYS_PLL_CNTL);
+		if((cntl & (1<<31)) == 0){
+			if(loop++ >= 10){
+				loop = 0;
+				printk(KERN_ERR"CPU freq: %ld MHz, syspll (%x) can't lock: \n",dst/1000000,cntl);
+				printk(KERN_ERR"  [10c0..10c4]%08x, %08x, %08x, %08x, %08x: [10a5]%08x, [10c7]%08x \n",
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL),
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL2),
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL3),
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL4),
+					aml_read_reg32(P_HHI_SYS_PLL_CNTL5),
+					aml_read_reg32(P_HHI_MPLL_CNTL6),
+					aml_read_reg32(P_HHI_DPLL_TOP_1)
+				);
+				if(!(aml_read_reg32(P_HHI_DPLL_TOP_1) & 0x2)){
+					printk(KERN_ERR"  SYS_TDC_CAL_DONE triggered, disable TDC_CAL_EN\n");
+					aml_set_reg32_bits(P_HHI_SYS_PLL_CNTL4, 0, 10, 1);
+					printk(KERN_ERR"  HHI_SYS_PLL_CNTL4: %08x\n",
+						aml_read_reg32(P_HHI_SYS_PLL_CNTL4));
+				}else{
+					latency.b.afc_dsel_bp_in = !latency.b.afc_dsel_bp_in;
+					printk(KERN_ERR"  INV afc_dsel_bp_in, new latency=%08x\n",latency.d32);
+					sys_pll_settings[idx][2] = latency.d32;/*write back afc_dsel_bp_in bit.*/
+				}
+				printk(KERN_ERR"  Try again!\n");
+			}
+			goto SETPLL;
+		};
+
+	}else {
+		//printk(KERN_INFO "(CTS_CPU_CLK) No Change (0x%x)\n", cpu_clk_cntl);
+	}
+
+	if (clk)
+		clk->rate = (idx * 24000000) + SYS_PLL_TABLE_MIN;
+
+	return idx;
+}
+
+static int set_hpll_pll(struct clk * clk, unsigned long dst)
+{
+	printk("TODO: set_hpll_pll not implement\n");
+	return 1;
+}
+static int set_fixed_pll(struct clk * clk, unsigned long dst)
+{
+	if(dst == 2000000000){
+		//fixed pll = xtal * M(0:8) * OD_FB(4) /N(9:13) /OD(16:17)
+		//M: 0~511  OD_FB:0~1 + 1, N:0~32 + 1 OD:0~3 + 1
+		//recommend this pll is fixed as 2G.
+		unsigned long xtal = 24000000;
+		unsigned cntl = aml_read_reg32(P_HHI_MPLL_CNTL);
+		unsigned m = cntl&0x1FF;
+		unsigned n = ((cntl>>9)&0x1F);
+		unsigned od = ((cntl >>16)&3) + 1;
+		unsigned od_fb = ((aml_read_reg32(P_HHI_MPLL_CNTL4)>>4)&1) + 1;
+		unsigned long rate;
+		if(clk->parent)
+			xtal = clk_get_rate(clk->parent);
+		xtal /= 1000000;
+		rate = xtal * m * od_fb;
+		rate /= n;
+		rate /= od;
+		rate *= 1000000;
+		if(dst != rate){
+			M8_PLL_RESET(P_HHI_MPLL_CNTL);
+			aml_write_reg32(P_HHI_MPLL_CNTL2, G9TV_MPLL_CNTL_2 );
+			aml_write_reg32(P_HHI_MPLL_CNTL3, G9TV_MPLL_CNTL_3 );
+			aml_write_reg32(P_HHI_MPLL_CNTL4, G9TV_MPLL_CNTL_4 );
+			aml_write_reg32(P_HHI_MPLL_CNTL5, G9TV_MPLL_CNTL_5 );
+			aml_write_reg32(P_HHI_MPLL_CNTL6, G9TV_MPLL_CNTL_6 );
+			aml_write_reg32(P_HHI_MPLL_CNTL7, G9TV_MPLL_CNTL_7 );
+			aml_write_reg32(P_HHI_MPLL_CNTL8, G9TV_MPLL_CNTL_8 );
+			aml_write_reg32(P_HHI_MPLL_CNTL9, G9TV_MPLL_CNTL_9 );
+			aml_write_reg32(P_HHI_MPLL_CNTL, G9TV_MPLL_CNTL );
+			M8_PLL_WAIT_FOR_LOCK(P_HHI_MPLL_CNTL);
+		}
+	}
+	else
+		return -1;
+	return 0;
+}
+
+static int set_vid_pll(struct clk * clk, unsigned long dst)
+{
+	printk("TODO: set_vid_pll not implement\n");
+	return 1;
+}
+
+//------------------------------------
+//return 0:not in the clock tree, 1:in the clock tree
+static int clk_in_clocktree(struct clk *clktree, struct clk *clk)
+{
+	struct clk *p;
+	int ret = 0;
+	if(IS_CLK_ERR(clk) || IS_CLK_ERR(clktree))
+		return 0;
+	if(clktree == clk)
+		return 1;
+	p = (struct clk*)clktree->sibling.next;
+	while(p){
+		if(p == clk){
+			ret = 1;
+			break;
+		}
+		p = (struct clk*)p->sibling.next;
+	}
+	if(ret == 1)
+		return ret;
+	return clk_in_clocktree((struct clk*)clktree->child.next, clk);
+}
+
+//return 0:ok, 1:fail
+static int meson_clk_register(struct clk* clk, struct clk* parent)
+{
+	if (clk_in_clocktree(parent,clk))
+			return 0;
+	mutex_lock(&clock_ops_lock);
+	clk->parent = parent;
+	if (parent->child.next == NULL) {
+		parent->child.next = (struct list_head*)clk;
+		clk->sibling.next = NULL;
+		clk->sibling.prev = NULL;
+	}
+	else {
+		struct clk* p = (       struct clk*)(parent->child.next);
+		while(p->sibling.next != NULL)
+			p = (       struct clk*)(p->sibling.next);
+		p->sibling.next = (struct list_head*)clk;
+		clk->sibling.prev = (struct list_head*)p;
+		clk->sibling.next = NULL;
+	}
+	mutex_unlock(&clock_ops_lock);
+	return 0;
+}
+
+int clk_register(struct clk *clk,const char *parent)
+{
+	struct clk* p = clk_get_sys(parent,0);
+	if(!IS_CLK_ERR(p))
+		return meson_clk_register(clk,p);
+	return 1;
+}
+EXPORT_SYMBOL(clk_register);
+
+void clk_unregister(struct clk *clk)
+{
+		if(IS_CLK_ERR(clk))
+			return;
+		mutex_lock(&clock_ops_lock);
+		if(clk->sibling.next){
+				struct clk* pnext = (struct clk*)(clk->sibling.next);
+				pnext->sibling.prev = clk->sibling.prev;
+				if(clk->sibling.prev)
+					((struct clk*)(clk->sibling.prev))->sibling.next = (struct list_head*)pnext;
+				else
+					clk->parent->child.next = (struct list_head*)pnext;
+
+		}
+		else if(clk->sibling.prev){
+				struct clk* prev = (struct clk*)(clk->sibling.prev);
+				prev->sibling.next = clk->sibling.next;
+				if(clk->sibling.next)
+					((struct clk*)(clk->sibling.next))->sibling.prev =(struct list_head*) prev;
+		}
+		else{
+			struct clk* parent = clk->parent;
+			if(parent)
+				parent->child.next = NULL;
+		}
+		clk->sibling.next = NULL;
+		clk->sibling.prev = NULL;
+		mutex_unlock(&clock_ops_lock);
+}
+EXPORT_SYMBOL(clk_unregister);
+
+/**
+ *  Check clock status.
+ *
+ *  0 -- Disabled
+ *  1 -- Enabled
+ *  2 -- Unknown
+ */
+int clk_get_status(struct clk *clk)
+{
+	int ret = 2;
+	unsigned long flags;
+
+	spin_lock_irqsave(&clockfw_lock, flags);
+	if (clk->status)
+		ret = clk->status(clk);
+	else if (clk->clk_gate_reg_adr != 0)
+		ret = ((aml_read_reg32(clk->clk_gate_reg_adr) & clk->clk_gate_reg_mask) ? 1 : 0);
+	spin_unlock_irqrestore(&clockfw_lock, flags);
+
+	return ret;
+}
+EXPORT_SYMBOL(clk_get_status);
+
+//return: 0:success  1: fail
+int clk_ops_register(struct clk *clk, struct clk_ops *ops)
+{
+	int found = 0;
+	struct clk_ops *p;
+
+	mutex_lock(&clock_ops_lock);
+	ops->next = NULL;
+	p = clk->clk_ops;
+	while(p != NULL){
+		if(p == ops){
+			found = 1;
+			break;
+		}
+		p = p->next;
+	}
+
+	if(found == 0){
+		if(clk->clk_ops	== NULL)
+			clk->clk_ops = ops;
+		else{
+			struct clk_ops* p = clk->clk_ops;
+			while(p->next)
+				p = p->next;
+			p->next = ops;
+		}
+	}
+	mutex_unlock(&clock_ops_lock);
+	return 0;
+}
+EXPORT_SYMBOL(clk_ops_register);
+
+//return: 0:success  1: fail
+int clk_ops_unregister(struct clk *clk, struct clk_ops *ops)
+{
+	if(ops == NULL || IS_CLK_ERR(clk))
+		return 0;
+
+	mutex_lock(&clock_ops_lock);
+
+	if(clk->clk_ops == ops){
+		if(clk->clk_ops->next == NULL)
+			clk->clk_ops = NULL;
+		else
+			clk->clk_ops = clk->clk_ops->next;
+	}
+	else if(clk->clk_ops){
+		struct clk_ops *p, *p1;
+		p = clk->clk_ops->next;
+		p1 = clk->clk_ops;
+		while(p != NULL && p != ops){
+			p1 = p;
+			p = p->next;
+		}
+		if(p == ops)
+			p1->next = p->next;
+	}
+	ops->next = NULL;
+	mutex_unlock(&clock_ops_lock);
+	return 0;
+}
+EXPORT_SYMBOL(clk_ops_unregister);
+
+///FIXME add data later
+#define PLL_CLK_DEFINE(name,msr)    		\
+	static unsigned pll_##name##_data[10];	\
+    CLK_DEFINE(pll_##name,xtal,msr,set_##name##_pll, \
+    		clk_msr_get,NULL,NULL,&pll_##name##_data)
+_Pragma("GCC diagnostic ignored \"-Wdeclaration-after-statement\"");
+#define PLL_RELATION_DEF(child,parent) meson_clk_register(&clk_pll_##child,&clk_##parent)
+#define CLK_PLL_CHILD_DEF(child,parent) meson_clk_register(&clk_##child,&clk_pll_##parent)
+
+
+#ifdef CONFIG_CLKTREE_DEBUG
+
+extern struct clk_lookup * lookup_clk(struct clk* clk);
+void print_clk_name(struct clk* clk)
+{
+		printk("Todo: we have not lookup_clk in 3.7 kernel!\n");
+		//struct clk_lookup * p = lookup_clk(clk);
+		//if(p)
+		//	printk("  %s  \n",p->dev_id);
+		//else
+		//	printk(" unknown \n");
+}
+
+void dump_child(int nlevel, struct clk* clk)
+{
+		if(!IS_CLK_ERR(clk)){
+			int i;
+			for(i = 0; i < nlevel; i++)
+				printk("  ");
+			print_clk_name(clk);
+			dump_child(nlevel+6,(struct clk*)(clk->child.next));
+			{
+				struct clk * p = (struct clk*)(clk->sibling.prev);
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)(p->sibling.prev);
+				}
+
+				p = (struct clk*)(clk->sibling.next);
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)(p->sibling.next);
+				}
+			}
+		}
+}
+
+void dump_clock_tree(struct clk* clk)
+{
+	printk("========= dump clock tree==============\n");
+	mutex_lock(&clock_ops_lock);
+
+	int nlevel = 0;
+	if(!IS_CLK_ERR(clk)){
+		print_clk_name(clk);
+		dump_child(nlevel + 6,(struct clk*)(clk->child.next));
+			{	int i;
+				struct clk * p = (struct clk*)clk->sibling.prev;
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)clk->sibling.prev;
+				}
+
+				p = (struct clk*)clk->sibling.next;
+				while(p){
+					for(i = 0; i < nlevel; i++)
+						printk("  ");
+					print_clk_name(p);
+					dump_child(nlevel+6,(struct clk*)(p->child.next));
+					p = (struct clk*)clk->sibling.next;
+				}
+			}
+	}
+	mutex_unlock(&clock_ops_lock);
+	printk("========= dump clock tree end ==============\n");
+}
+
+static ssize_t  clock_tree_store(struct class *cla, struct class_attribute *attr, const char *buf,size_t count)
+{
+	char* p = (char *)buf;
+	char cmd;
+	char name[20];
+	unsigned long rate = 0;
+	int idx = 0;
+	if(count < 1)
+		return -1;
+	while((idx < count) && ((*p == ' ') || (*p == '\t')|| (*p == '\r') || (*p == '\n'))){
+		 p++;
+		 idx++;
+	}
+
+	if(idx <= count){
+		int i;
+		cmd = *p;
+		p++;
+		while((idx < count) && ((*p == ' ') || (*p == '\t')|| (*p == '\r') || (*p == '\n'))){
+		 p++;
+		 idx++;
+		}
+		i = 0;
+		while((idx < count) && (*p != ' ') && (*p != '\t') && (*p != '\r') && (*p != '\n')){
+			name[i++] = *p;
+			p++;
+			idx++;
+		}
+		name[i] = '\0';
+		p++;
+		while((idx < count) && ((*p == ' ') || (*p == '\t')|| (*p == '\r') || (*p == '\n'))){
+		 p++;
+		 idx++;
+		}
+		if(idx < count){
+			int val;
+			sscanf(p, "%d", &val);
+			rate = val;
+		}
+
+		if(cmd == 'r'){
+			if(strcmp(name,"tree") == 0){
+				struct clk* clk = clk_get_sys("xtal",NULL);
+				if(!IS_CLK_ERR(clk))
+					dump_clock_tree(clk);
+			}
+			else{
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+					clk->rate = 0; //enforce update rate
+					printk("%s : %lu\n",name,clk_get_rate(clk));
+				}
+				else
+					printk("no %s in tree.\n",name);
+			}
+		}
+		else if(cmd == 'w'){
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+					if(rate < 1000000 || rate >1512000000)
+						printk("Invalid rate : %lu\n",rate);
+					else{
+						if(clk_set_rate(clk,rate) ==0)
+							printk("%s = %lu\n",name,rate);
+						else
+							printk("set %s = %lu failed.\n",name,rate);
+					}
+				}
+				else
+					printk("no %s in tree.\n",name);
+		}
+		else if(cmd == 'o'){
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+					if(clk_enable(clk) ==0)
+							printk("%s gate on\n",name);
+					else
+							printk("gate on %s failed.\n",name);
+				}
+				else
+					printk("no %s in tree.\n",name);
+
+		}
+		else if(cmd == 'f'){
+				struct clk* clk = clk_get_sys(name,NULL);
+				if(!IS_CLK_ERR(clk)){
+						clk_disable(clk);
+						printk("gate off %s.\n",name);
+				}
+				else
+					printk("no %s in tree.\n",name);
+		}
+		else
+			printk("command:%c invalid.\n",cmd);
+	}
+
+	return count;
+}
+
+static ssize_t  clock_tree_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+	printk("Usage:\n");
+	printk("1. echo r tree >clkTree       ,display the clock tree.\n");
+	printk("2. echo r clockname >clkTree  ,display the clock rate.\n");
+	printk("3. echo w clockname rate >clkTree  ,modify the clock rate.\n");
+	printk("4. echo o clockname >clkTree  ,gate on clock.\n");
+	printk("5. echo f clockname >clkTree  ,gate off clock.\n");
+
+	printk("Example:\n");
+	printk("1. display the clock tree.\n");
+	printk("   echo r tree >clkTree\n");
+	printk("2. display clk81 rate.\n");
+	printk("   echo r clk81 >clkTree\n");
+	printk("3. modify sys pll as 792M.\n");
+	printk("   echo w pll_sys 792000000 >clkTree\n");
+	return 0;
+}
+
+static struct class_attribute clktree_class_attrs[] = {
+
+
+	__ATTR(clkTree, S_IRWXU, clock_tree_show, clock_tree_store),
+	__ATTR_NULL,
+};
+
+static struct class meson_clktree_class = {
+	.name = "meson_clocktree",
+	.class_attrs = clktree_class_attrs,
+};
+#endif
+
+// -------------------- frequency limit sysfs ---------------------
+static ssize_t freq_limit_store(struct class *cla, struct class_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int input;
+	int ret;
+	ret = sscanf(buf, "%u", &input);
+	if (ret != 1)
+		return -EINVAL;
+	freq_limit = input;
+	return count;
+}
+static ssize_t freq_limit_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+	printk("%u\n", freq_limit);
+	return sprintf(buf, "%d\n", freq_limit);
+}
+
+
+static struct class_attribute freq_limit_class_attrs[] = {
+	__ATTR(limit, S_IRUGO|S_IWUSR|S_IWGRP, freq_limit_show, freq_limit_store),
+	__ATTR_NULL,
+};
+
+static struct class meson_freq_limit_class = {
+	.name = "freq_limit",
+	.class_attrs = freq_limit_class_attrs,
+};
+
+static int __init meson_clock_init(void)
+{
+#if 1
+	clkdev_add(&clk_lookup_xtal);
+	CLK_DEFINE(pll_ddr,xtal,-1/*=47??*/,NULL,NULL/*clk_msr_get*/,NULL,NULL,NULL);
+	PLL_CLK_DEFINE(sys,(unsigned long)-1);//clk_pll_sys
+	PLL_CLK_DEFINE(vid,6);    //clk_pll_vid
+	PLL_CLK_DEFINE(fixed,-1); //clk_pll_fixed
+	PLL_CLK_DEFINE(hpll,19);// clk_pll_hpll  /19 is right?
+	clk_pll_fixed.msr_mul = 425 * 24; //This value just let get fixed_pll = 2.55G
+	clk_pll_fixed.msr_div = 4;
+	clk_pll_sys.get_rate = clk_get_rate_sys;
+	clk_pll_vid.get_rate = clk_get_rate_vid;
+	clk_pll_fixed.get_rate = clk_get_rate_fixed;
+	clk_pll_hpll.get_rate = clk_get_rate_hpll;
+
+	clk_pll_vid.max = 3000000000U;//3.0G
+	clk_pll_vid.min = 1200000000U;//1.2G
+	clk_pll_hpll.max = 3000000000U;//3.0G
+	clk_pll_hpll.min = 1200000000U;//1.2G
+	clk_pll_sys.max = 2500000000U;//2.5G
+	clk_pll_sys.min = 1200000000U;//1.2G
+	clk_pll_ddr.max = 1512000000U;//1.5G
+	clk_pll_ddr.min = 750000000U;//750M
+	clk_pll_fixed.max = 2550000000U;//2.55G
+	clk_pll_fixed.min = 2550000000U;//2.55G
+
+	//create pll tree
+	PLL_RELATION_DEF(sys,xtal);
+	PLL_RELATION_DEF(ddr,xtal);
+	PLL_RELATION_DEF(vid,xtal);
+	PLL_RELATION_DEF(fixed,xtal);
+	PLL_RELATION_DEF(hpll,xtal);
+
+
+	// Add clk81
+	if(((aml_read_reg32(P_HHI_MPEG_CLK_CNTL) >> 12) & 0x7) >= 5)
+	{
+		CLK_DEFINE(clk81, pll_fixed, -1, NULL, clk_get_rate_clk81, NULL, NULL, NULL);
+
+		// Add clk81 as pll_fixed's child
+	    //CLK_PLL_CHILD_DEF(clk81, fixed);
+	    clk_clk81.clk_gate_reg_adr = P_HHI_MPEG_CLK_CNTL;
+	    clk_clk81.clk_gate_reg_mask = (1<<7);
+		clk_clk81.open_irq = 1;
+	}else{
+		printk("Error: clk81 not be selected at fixed_pll.\n");
+	}
+
+	// Add CPU clock
+	CLK_DEFINE(a9_clk, pll_sys, -1, clk_set_rate_a9, clk_get_rate_a9, NULL, NULL, NULL);
+	clk_a9_clk.min = setup_a9_clk_min;
+	clk_a9_clk.max = setup_a9_clk_max;
+	clk_a9_clk.round_rate = clk_round_rate_sys;
+	//clk_a9_clk.open_irq = 1;
+	CLK_PLL_CHILD_DEF(a9_clk,sys);
+
+
+#ifdef CONFIG_AMLOGIC_USB
+    // Add clk usb0
+    CLK_DEFINE(usb0,xtal,4,NULL,clk_msr_get,clk_enable_usb,clk_disable_usb,"usb0");
+    meson_clk_register(&clk_usb0,&clk_xtal);
+    //clk_usb0.clk_gate_reg_adr = P_USB_ADDR0;
+    //clk_usb0.clk_gate_reg_mask = (1<<0);
+
+    // Add clk usb1
+    CLK_DEFINE(usb1,xtal,5,NULL,clk_msr_get,clk_enable_usb,clk_disable_usb,"usb1");
+    meson_clk_register(&clk_usb1,&clk_xtal);
+    //clk_usb1.clk_gate_reg_adr = P_USB_ADDR8;
+    //clk_usb1.clk_gate_reg_mask = (1<<0);
+#endif
+
+	{
+		// Dump clocks
+		char *clks[] = {
+				"xtal",
+				"pll_sys",
+				"pll_fixed",
+				"pll_vid",
+				"pll_hpll",
+				"pll_ddr",
+				"a9_clk",
+				"clk81",
+		};
+		int i;
+		int count = ARRAY_SIZE(clks);
+		struct clk *clk;
+
+		for (i = 0; i < count; i++) {
+			char *clk_name = clks[i];
+
+			clk = clk_get_sys(clk_name, NULL);
+			if (!IS_CLK_ERR(clk))
+				printk("clkrate [ %s \t] : %lu\n", clk_name, clk_get_rate(clk));
+		}
+	}
+
+#ifdef CONFIG_CLKTREE_DEBUG
+	class_register(&meson_clktree_class);
+#endif
+	class_register(&meson_freq_limit_class);
+#endif
+
+	aml_write_reg32(P_PERIPHS_PIN_MUX_2, (aml_read_reg32(P_PERIPHS_PIN_MUX_2) &~(0X1<<22)));	
+	aml_write_reg32(P_PERIPHS_PIN_MUX_3, (aml_read_reg32(P_PERIPHS_PIN_MUX_3) &~(0X1<<19)));
+	aml_write_reg32(P_PREG_PAD_GPIO3_EN_N, (aml_read_reg32(P_PREG_PAD_GPIO3_EN_N) &~(0X1<<1)));
+	aml_write_reg32(P_HHI_GEN_CLK_CNTL, (aml_read_reg32(P_HHI_GEN_CLK_CNTL) |(0xb << 12) | (0x1 << 11) | (0x1 ))); //0x108a[10:0] =  1-->250 mhz ; 2-->170mhz
+	aml_write_reg32(P_PERIPHS_PIN_MUX_3, (aml_read_reg32(P_PERIPHS_PIN_MUX_3) | (0x1 << 19)));	
+	aml_write_reg32(P_AO_RTI_PWR_CNTL_REG0,((aml_read_reg32(P_AO_RTI_PWR_CNTL_REG0)&~(0x1 << 8))|(0x2 << 10)));
+	aml_write_reg32(P_HHI_MPEG_CLK_CNTL, (aml_read_reg32(P_HHI_MPEG_CLK_CNTL) |(0x5<<12)|(0x1<<9)|(0x1<<8)|(0x1<<7)|(0x03)));
+
+	return 0;
+}
+
+/* initialize clocking early to be available later in the boot */
+core_initcall(meson_clock_init);
diff --git a/arch/arm/mach-mesong9tv/cpu.c b/arch/arm/mach-mesong9tv/cpu.c
new file mode 100644
index 000000000000..cf56de803781
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/cpu.c
@@ -0,0 +1,67 @@
+/*
+ * arch/arm/mach-mesong9tv/cpu.c
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/printk.h>
+#include <linux/string.h>
+
+#include <mach/am_regs.h>
+
+#include <plat/io.h>
+#include <plat/cpu.h>
+
+static int meson_cpu_version[MESON_CPU_VERSION_LVL_MAX+1];
+
+int __init meson_cpu_version_init(void)
+{
+	unsigned int version,ver;
+	unsigned int  *version_map;
+
+	meson_cpu_version[MESON_CPU_VERSION_LVL_MAJOR] =
+		aml_read_reg32(P_ASSIST_HW_REV);
+
+	version_map = (unsigned int *)IO_BOOTROM_BASE;
+	meson_cpu_version[MESON_CPU_VERSION_LVL_MISC] = version_map[1];
+
+	version = aml_read_reg32(P_METAL_REVISION);
+	switch (version) {
+		case 0x11111111:
+			ver = 0xA;
+			break;
+		default:/*changed?*/
+			ver = 0xB;
+			break;
+	}
+	meson_cpu_version[MESON_CPU_VERSION_LVL_MINOR] = ver;
+	printk(KERN_INFO "Meson chip version = Rev%X (%X:%X - %X:%X)\n", ver,
+		meson_cpu_version[MESON_CPU_VERSION_LVL_MAJOR],
+		meson_cpu_version[MESON_CPU_VERSION_LVL_MINOR],
+		meson_cpu_version[MESON_CPU_VERSION_LVL_PACK],
+		meson_cpu_version[MESON_CPU_VERSION_LVL_MISC]
+		);
+
+	return 0;
+}
+EXPORT_SYMBOL(meson_cpu_version_init);
+
+int get_meson_cpu_version(int level)
+{
+	if(level >= 0 && level <= MESON_CPU_VERSION_LVL_MAX)
+		return meson_cpu_version[level];
+	return 0;
+}
+EXPORT_SYMBOL(get_meson_cpu_version);
diff --git a/arch/arm/mach-mesong9tv/gpio.c b/arch/arm/mach-mesong9tv/gpio.c
new file mode 100644
index 000000000000..d9ec032b54ef
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/gpio.c
@@ -0,0 +1,653 @@
+/*
+ * arch/arm/mach-mesong9tv/gpio.c
+ * Amlogic GPIO Driver
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/err.h>
+#include <linux/init.h>
+#include <linux/io.h>
+#include <linux/module.h>
+#include <linux/of.h>
+#include <linux/platform_device.h>
+#include <linux/pinctrl/machine.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/pinctrl/pinmux.h>
+#include <linux/pinctrl/pinconf.h>
+#include <linux/pinctrl/consumer.h>
+#include <mach/am_regs.h>
+#include <plat/io.h>
+#include <linux/of.h>
+#include <linux/slab.h>
+#include <linux/device.h>
+#include <linux/gpio.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include <linux/amlogic/gpio-amlogic.h>
+
+extern int g9tv_pin_to_pullup(unsigned int pin ,unsigned int *reg,unsigned int *bit,unsigned int *bit_en);
+extern struct amlogic_set_pullup pullup_ops;
+extern unsigned p_pull_up_addr[];
+extern unsigned p_pull_upen_addr[];
+extern unsigned int p_pin_mux_reg_addr[];
+extern int gpio_irq;
+extern int gpio_flag;
+
+
+//#define debug
+#ifdef debug
+	#define gpio_print(...) printk(__VA_ARGS__)
+#else
+	#define gpio_print(...)
+#endif
+
+
+unsigned p_gpio_oen_addr[] = {
+	P_PREG_PAD_GPIO0_EN_N,
+	P_PREG_PAD_GPIO1_EN_N,
+	P_PREG_PAD_GPIO2_EN_N,
+	P_PREG_PAD_GPIO3_EN_N,
+	P_PREG_PAD_GPIO4_EN_N,
+	P_PREG_PAD_GPIO5_EN_N,
+	P_AO_GPIO_O_EN_N,
+};
+
+static unsigned p_gpio_output_addr[] = {
+	P_PREG_PAD_GPIO0_O,
+	P_PREG_PAD_GPIO1_O,
+	P_PREG_PAD_GPIO2_O,
+	P_PREG_PAD_GPIO3_O,
+	P_PREG_PAD_GPIO4_O,
+	P_PREG_PAD_GPIO5_O,
+	P_AO_GPIO_O_EN_N,
+};
+
+static unsigned p_gpio_input_addr[] = {
+	P_PREG_PAD_GPIO0_I,
+	P_PREG_PAD_GPIO1_I,
+	P_PREG_PAD_GPIO2_I,
+	P_PREG_PAD_GPIO3_I,
+	P_PREG_PAD_GPIO4_I,
+	P_PREG_PAD_GPIO5_I,
+	P_AO_GPIO_I,
+};
+
+
+#define PMUX(reg, bit)		((reg << 5) | bit)
+#define PMUX_NONE		(0xFFFF)
+#define PMUX_SIZE		9
+
+static unsigned int g9tv_pinmux_table[][PMUX_SIZE] = {
+
+	[GPIOX_0]	=	{PMUX(5,14),	PMUX(8,5),	PMUX(0,1),	PMUX(0,6),	PMUX(6,17),	PMUX(7,0),	PMUX(8,27),	PMUX(3,17),	PMUX(9,18)},
+	[GPIOX_1]	=	{PMUX(5,13),	PMUX(8,4),	PMUX(0,1),	PMUX(0,6),	PMUX(6,16),	PMUX(7,1),	PMUX_NONE,	PMUX(3,16),	PMUX(9,17)},
+	[GPIOX_2]	=	{PMUX(5,13),	PMUX(8,3),	PMUX(0,0),	PMUX(0,6),	PMUX_NONE,	PMUX(7,2),	PMUX_NONE,	PMUX(3,15),	PMUX_NONE},
+	[GPIOX_3]	=	{PMUX(5,13),	PMUX(8,2),	PMUX(0,0),	PMUX(0,6),	PMUX_NONE,	PMUX(7,3),	PMUX_NONE,	PMUX(3,14),	PMUX_NONE},
+	[GPIOX_4]	=	{PMUX(5,12),	PMUX_NONE,	PMUX(0,0),	PMUX(0,6),	PMUX(3,30),	PMUX(7,4),	PMUX(4,17),	PMUX(3,13),	PMUX_NONE},
+	[GPIOX_5]	=	{PMUX(5,12),	PMUX_NONE,	PMUX(0,0),	PMUX(0,6),	PMUX(3,29),	PMUX(7,5),	PMUX(4,16),	PMUX(3,12),	PMUX_NONE},
+	[GPIOX_6]	=	{PMUX(5,12),	PMUX_NONE,	PMUX(0,0),	PMUX(0,6),	PMUX(3,28),	PMUX(7,6),	PMUX(4,15),	PMUX(3,12),	PMUX_NONE},
+	[GPIOX_7]	=	{PMUX(5,12),	PMUX_NONE,	PMUX(0,0),	PMUX(0,6),	PMUX(3,27),	PMUX(7,7),	PMUX(4,14),	PMUX(3,12),	PMUX_NONE},
+	[GPIOX_8]	=	{PMUX(5,11),	PMUX(8,1),	PMUX(0,3),	PMUX(0,6),	PMUX_NONE,	PMUX(7,8),	PMUX(8,26),	PMUX(3,12),	PMUX_NONE},
+	[GPIOX_9]	=	{PMUX(5,10),	PMUX(8,0),	PMUX(0,3),	PMUX(0,6),	PMUX_NONE,	PMUX(7,9),	PMUX(9,14),	PMUX(3,12),	PMUX_NONE},
+	[GPIOX_10]	=	{PMUX_NONE,	PMUX(3,22),	PMUX(0,2),	PMUX(0,6),	PMUX_NONE,	PMUX(7,10),	PMUX(7,31),	PMUX(3,12),	PMUX(9,19)},
+	[GPIOX_11]	=	{PMUX_NONE,	PMUX(3,18),	PMUX(0,2),	PMUX(0,6),	PMUX_NONE,	PMUX(7,11),	PMUX(2,3),	PMUX(3,12),	PMUX_NONE},
+	[GPIOX_12]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(0,2),	PMUX(0,6),	PMUX(3,7),	PMUX(7,12),	PMUX_NONE,	PMUX_NONE,	PMUX(4,13)},
+	[GPIOX_13]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(0,2),	PMUX(0,6),	PMUX(3,11),	PMUX(7,13),	PMUX_NONE,	PMUX_NONE,	PMUX(4,12)},
+	[GPIOX_14]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(0,2),	PMUX(0,6),	PMUX(3,11),	PMUX(7,14),	PMUX_NONE,	PMUX_NONE,	PMUX(4,11)},
+	[GPIOX_15]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(0,2),	PMUX(0,6),	PMUX(3,11),	PMUX(7,15),	PMUX_NONE,	PMUX_NONE,	PMUX(4,10)},
+	[GPIOX_16]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,5),	PMUX(0,6),	PMUX(3,11),	PMUX(7,16),	PMUX(8,25),	PMUX_NONE,	PMUX_NONE},
+	[GPIOX_17]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,5),	PMUX(0,6),	PMUX(3,11),	PMUX(7,18),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOX_18]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,4),	PMUX(0,6),	PMUX(3,11),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOX_19]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,4),	PMUX(0,6),	PMUX(3,11),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOX_20]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,4),	PMUX(0,6),	PMUX(3,9),	PMUX_NONE,	PMUX(1,17),	PMUX(1,0),	PMUX_NONE},
+	[GPIOX_21]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,4),	PMUX(0,6),	PMUX(3,7),	PMUX(1,3),	PMUX(1,16),	PMUX(1,4),	PMUX_NONE},
+	[GPIOX_22]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,4),	PMUX(0,6),	PMUX(3,10),	PMUX(1,1),	PMUX_NONE,	PMUX(1,2),	PMUX_NONE},
+	[GPIOX_23]	=	{PMUX_NONE,	PMUX(9,20),	PMUX(0,4),	PMUX(0,6),	PMUX(3,6),	PMUX_NONE,	PMUX_NONE,	PMUX(1,6),	PMUX_NONE},
+	[GPIOX_24]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(0,19),	PMUX(0,9),	PMUX_NONE,	PMUX(1,7),	PMUX(8,24),	PMUX(1,9),	PMUX(4,21)},
+	[GPIOX_25]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(0,18),	PMUX(0,8),	PMUX_NONE,	PMUX(1,8),	PMUX(8,23),	PMUX(1,5),	PMUX(4,20)},
+	[GPIOX_26]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(0,7),	PMUX(7,30),	PMUX(3,25),	PMUX(8,22),	PMUX_NONE,	PMUX(4,19)},
+	[GPIOX_27]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(8,29),	PMUX(0,10),	PMUX_NONE,	PMUX(8,19),	PMUX(8,28),	PMUX_NONE,	PMUX(4,18)},
+
+	[BOOT_0]	=	{PMUX_NONE,	PMUX(4,30),	PMUX_NONE,	PMUX(6,29),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_1]	=	{PMUX_NONE,	PMUX(4,29),	PMUX_NONE,	PMUX(6,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_2]	=	{PMUX_NONE,	PMUX(4,29),	PMUX_NONE,	PMUX(6,27),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_3]	=	{PMUX_NONE,	PMUX(4,29),	PMUX_NONE,	PMUX(6,25),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_4]	=	{PMUX_NONE,	PMUX(4,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_5]	=	{PMUX_NONE,	PMUX(4,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_6]	=	{PMUX_NONE,	PMUX(4,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_7]	=	{PMUX_NONE,	PMUX(4,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_8]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_9]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_10]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_11]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(5,1),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_12]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(5,3),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_13]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(5,2),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_14]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_15]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_16]	=	{PMUX_NONE,	PMUX(4,27),	PMUX_NONE,	PMUX(6,25),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_17]	=	{PMUX_NONE,	PMUX(4,26),	PMUX_NONE,	PMUX(6,24),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[BOOT_18]	=	{PMUX_NONE,	PMUX_NONE,	PMUX(5,0),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+
+	[GPIOH_0]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(7,20),	PMUX_NONE},
+	[GPIOH_1]	=	{PMUX_NONE,	PMUX(4,9),	PMUX_NONE,	PMUX(3,26),	PMUX(7,29),	PMUX_NONE,	PMUX_NONE,	PMUX(7,19),	PMUX_NONE},
+	[GPIOH_2]	=	{PMUX_NONE,	PMUX(4,8),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(7,28),	PMUX_NONE},
+	[GPIOH_3]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(1,25),	PMUX_NONE},
+	[GPIOH_4]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(1,24),	PMUX_NONE},
+	[GPIOH_5]	=	{PMUX_NONE,	PMUX(4,7),	PMUX_NONE,	PMUX(4,3),	PMUX_NONE,	PMUX(1,19),	PMUX_NONE,	PMUX(1,26),	PMUX_NONE},
+	[GPIOH_6]	=	{PMUX_NONE,	PMUX(4,6),	PMUX_NONE,	PMUX(4,2),	PMUX_NONE,	PMUX(1,18),	PMUX_NONE,	PMUX(1,23),	PMUX_NONE},
+	[GPIOH_7]	=	{PMUX_NONE,	PMUX(6,23),	PMUX_NONE,	PMUX(5,8),	PMUX_NONE,	PMUX(3,24),	PMUX_NONE,	PMUX(7,24),	PMUX_NONE},
+	[GPIOH_8]	=	{PMUX_NONE,	PMUX(6,22),	PMUX_NONE,	PMUX(5,9),	PMUX_NONE,	PMUX(9,15),	PMUX_NONE,	PMUX(7,23),	PMUX_NONE},
+	[GPIOH_9]	=	{PMUX_NONE,	PMUX(9,12),	PMUX_NONE,	PMUX(9,13),	PMUX_NONE,	PMUX(9,16),	PMUX_NONE,	PMUX(7,22),	PMUX_NONE},
+	[GPIOH_10]	=	{PMUX_NONE,	PMUX(9,10),	PMUX_NONE,	PMUX(9,22),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+
+	[GPIOZ_0]	=	{PMUX_NONE,	PMUX(2,23),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_1]	=	{PMUX_NONE,	PMUX(2,22),	PMUX_NONE,	PMUX(3,19),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_2]	=	{PMUX_NONE,	PMUX(2,21),	PMUX_NONE,	PMUX(2,20),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_3]	=	{PMUX_NONE,	PMUX(2,19),	PMUX_NONE,	PMUX(2,18),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_4]	=	{PMUX_NONE,	PMUX(2,17),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_5]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(2,16),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_6]	=	{PMUX_NONE,	PMUX(6,14),	PMUX_NONE,	PMUX(3,21),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_7]	=	{PMUX_NONE,	PMUX(6,13),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_8]	=	{PMUX_NONE,	PMUX(6,12),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_9]	=	{PMUX_NONE,	PMUX(6,11),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_10]	=	{PMUX_NONE,	PMUX(6,10),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_11]	=	{PMUX_NONE,	PMUX(6,9),	PMUX_NONE,	PMUX(1,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_12]	=	{PMUX_NONE,	PMUX(6,8),	PMUX_NONE,	PMUX(1,27),	PMUX_NONE,	PMUX_NONE,	PMUX(2,2),	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_13]	=	{PMUX_NONE,	PMUX(6,7),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_14]	=	{PMUX_NONE,	PMUX(6,6),	PMUX_NONE,	PMUX(3,20),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_15]	=	{PMUX_NONE,	PMUX(6,5),	PMUX_NONE,	PMUX_NONE,	PMUX(11,16),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_16]	=	{PMUX_NONE,	PMUX(6,4),	PMUX_NONE,	PMUX_NONE,	PMUX(11,15),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_17]	=	{PMUX_NONE,	PMUX(6,3),	PMUX_NONE,	PMUX(2,27),	PMUX_NONE,	PMUX(7,28),	PMUX(2,1),	PMUX(5,31),	PMUX_NONE},
+	[GPIOZ_18]	=	{PMUX_NONE,	PMUX(6,2),	PMUX_NONE,	PMUX(2,26),	PMUX_NONE,	PMUX(7,27),	PMUX(2,0),	PMUX(5,30),	PMUX_NONE},
+	[GPIOZ_19]	=	{PMUX_NONE,	PMUX(6,1),	PMUX_NONE,	PMUX(2,25),	PMUX(11,14),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOZ_20]	=	{PMUX_NONE,	PMUX(6,0),	PMUX_NONE,	PMUX(2,24),	PMUX(11,13),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+
+	[GPIOW_0]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(7,26),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(6,31),	PMUX_NONE},
+	[GPIOW_1]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(7,25),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(6,30),	PMUX_NONE},
+	[GPIOW_2]	=	{PMUX_NONE,	PMUX(8,16),	PMUX_NONE,	PMUX(8,15),	PMUX(11,18),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_3]	=	{PMUX_NONE,	PMUX(8,13),	PMUX_NONE,	PMUX(8,12),	PMUX(11,17),	PMUX(7,21),	PMUX(9,21),	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_4]	=	{PMUX_NONE,	PMUX(10,12),	PMUX_NONE,	PMUX_NONE,	PMUX(11,12),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_5]	=	{PMUX_NONE,	PMUX(10,11),	PMUX_NONE,	PMUX_NONE,	PMUX(11,11),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_6]	=	{PMUX_NONE,	PMUX(10,10),	PMUX_NONE,	PMUX_NONE,	PMUX(11,10),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_7]	=	{PMUX_NONE,	PMUX(10,9),	PMUX_NONE,	PMUX(11,22),	PMUX(11,9),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_8]	=	{PMUX_NONE,	PMUX(10,9),	PMUX_NONE,	PMUX(11,21),	PMUX(11,8),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_9]	=	{PMUX_NONE,	PMUX(10,8),	PMUX_NONE,	PMUX_NONE,	PMUX(11,7),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_10]	=	{PMUX_NONE,	PMUX(10,7),	PMUX_NONE,	PMUX_NONE,	PMUX(11,6),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_11]	=	{PMUX_NONE,	PMUX(10,6),	PMUX_NONE,	PMUX(11,20),	PMUX(11,5),	PMUX(10,13),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_12]	=	{PMUX_NONE,	PMUX(10,6),	PMUX_NONE,	PMUX(11,19),	PMUX(11,4),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_13]	=	{PMUX_NONE,	PMUX(10,5),	PMUX_NONE,	PMUX_NONE,	PMUX(11,3),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_14]	=	{PMUX_NONE,	PMUX(10,4),	PMUX_NONE,	PMUX_NONE,	PMUX(11,2),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_15]	=	{PMUX_NONE,	PMUX(10,3),	PMUX_NONE,	PMUX(11,24),	PMUX(11,2),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_16]	=	{PMUX_NONE,	PMUX(10,3),	PMUX_NONE,	PMUX(11,23),	PMUX(11,0),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOW_17]	=	{PMUX_NONE,	PMUX(10,2),	PMUX_NONE,	PMUX_NONE,	PMUX(6,21),	PMUX_NONE,	PMUX_NONE,	PMUX(10,25),	PMUX_NONE},
+	[GPIOW_18]	=	{PMUX_NONE,	PMUX(10,1),	PMUX_NONE,	PMUX_NONE,	PMUX(6,20),	PMUX_NONE,	PMUX_NONE,	PMUX(10,24),	PMUX_NONE},
+	[GPIOW_19]	=	{PMUX_NONE,	PMUX(10,0),	PMUX_NONE,	PMUX_NONE,	PMUX(6,19),	PMUX(10,29),	PMUX(10,28),	PMUX(10,23),	PMUX_NONE},
+	[GPIOW_20]	=	{PMUX_NONE,	PMUX(10,0),	PMUX_NONE,	PMUX_NONE,	PMUX(6,18),	PMUX(10,27),	PMUX(10,26),	PMUX(10,22),	PMUX_NONE},
+
+	[GPIOAO_0]	=	{PMUX_NONE,	PMUX(10,12),	PMUX_NONE,	PMUX(10,26),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_1]	=	{PMUX_NONE,	PMUX(10,11),	PMUX_NONE,	PMUX(10,25),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_2]	=	{PMUX_NONE,	PMUX(10,10),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_3]	=	{PMUX_NONE,	PMUX(10,9),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_4]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,24),	PMUX(10,2),	PMUX(10,6),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_5]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,23),	PMUX(10,1),	PMUX(10,5),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_6]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_7]	=	{PMUX_NONE,	PMUX(10,0),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_8]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,17),	PMUX(11,26),	PMUX(11,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_9]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,27),	PMUX(10,25),	PMUX(11,27),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_10]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_11]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,22),	PMUX(10,28),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_12]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,21),	PMUX(10,29),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOAO_13]	=	{PMUX_NONE,	PMUX(10,31),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+
+	[CARD_0]	=	{PMUX_NONE,	PMUX(2,14),	PMUX_NONE,	PMUX(2,7),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[CARD_1]	=	{PMUX_NONE,	PMUX(2,15),	PMUX_NONE,	PMUX(2,6),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[CARD_2]	=	{PMUX_NONE,	PMUX(2,11),	PMUX_NONE,	PMUX(2,5),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[CARD_3]	=	{PMUX_NONE,	PMUX(2,10),	PMUX_NONE,	PMUX(2,4),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[CARD_4]	=	{PMUX_NONE,	PMUX(2,12),	PMUX_NONE,	PMUX(2,7),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(8,10),	PMUX_NONE},
+	[CARD_5]	=	{PMUX_NONE,	PMUX(2,13),	PMUX_NONE,	PMUX(2,7),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(8,9),	PMUX_NONE},
+	[CARD_6]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[CARD_7]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[CARD_8]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+
+	[GPIOY_0]	=	{PMUX_NONE,	PMUX(3,3),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(1,15),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE},
+	[GPIOY_1]	=	{PMUX_NONE,	PMUX(3,2),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(1,14),	PMUX_NONE,	PMUX_NONE,	PMUX(9,3)},
+	[GPIOY_2]	=	{PMUX_NONE,	PMUX(3,1),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(1,13),	PMUX_NONE,	PMUX_NONE,	PMUX(9,2)},
+	[GPIOY_3]	=	{PMUX_NONE,	PMUX(3,0),	PMUX_NONE,	PMUX(9,4),	PMUX(9,5),	PMUX(1,12),	PMUX_NONE,	PMUX_NONE,	PMUX(9,1)},
+	[GPIOY_4]	=	{PMUX_NONE,	PMUX(3,4),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(5,29),	PMUX_NONE,	PMUX_NONE,	PMUX(9,0)},
+	[GPIOY_5]	=	{PMUX_NONE,	PMUX(3,5),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(5,28),	PMUX_NONE,	PMUX_NONE,	PMUX(9,0)},
+	[GPIOY_6]	=	{PMUX_NONE,	PMUX(3,5),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(5,27),	PMUX_NONE,	PMUX_NONE,	PMUX(9,0)},
+	[GPIOY_7]	=	{PMUX_NONE,	PMUX(3,5),	PMUX_NONE,	PMUX(9,26),	PMUX(9,25),	PMUX(5,26),	PMUX(10,19),	PMUX(10,21),	PMUX(9,0)},
+	[GPIOY_8]	=	{PMUX_NONE,	PMUX(3,5),	PMUX_NONE,	PMUX_NONE,	PMUX(9,24),	PMUX(5,25),	PMUX(10,18),	PMUX(10,20),	PMUX(9,0)},
+	[GPIOY_9]	=	{PMUX_NONE,	PMUX(3,5),	PMUX_NONE,	PMUX(9,22),	PMUX(9,23),	PMUX(5,24),	PMUX_NONE,	PMUX_NONE,	PMUX(9,0)},
+	[GPIOY_10]	=	{PMUX_NONE,	PMUX(3,5),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,17),	PMUX(9,9),	PMUX(9,0)},
+	[GPIOY_11]	=	{PMUX_NONE,	PMUX(3,5),	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(10,16),	PMUX(9,8),	PMUX(9,0)},
+	[GPIOY_12]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(9,31),	PMUX(9,30),	PMUX_NONE,	PMUX(10,15),	PMUX(9,7),	PMUX_NONE},
+	[GPIOY_13]	=	{PMUX_NONE,	PMUX_NONE,	PMUX_NONE,	PMUX(9,29),	PMUX(9,28),	PMUX_NONE,	PMUX(10,14),	PMUX(9,6),	PMUX_NONE},
+};
+
+
+#define PIN_MAP(pin,reg,bit) \
+{ \
+	.num=pin, \
+	.name=#pin, \
+	.out_en_reg_bit=GPIO_REG_BIT(reg,bit), \
+	.out_value_reg_bit=GPIO_REG_BIT(reg,bit), \
+	.input_value_reg_bit=GPIO_REG_BIT(reg,bit), \
+}
+
+#define PIN_AOMAP(pin,en_reg,en_bit,out_reg,out_bit,in_reg,in_bit) \
+{ \
+	.num=pin, \
+	.name=#pin, \
+	.out_en_reg_bit=GPIO_REG_BIT(en_reg,en_bit), \
+	.out_value_reg_bit=GPIO_REG_BIT(out_reg,out_bit), \
+	.input_value_reg_bit=GPIO_REG_BIT(in_reg,in_bit), \
+	.gpio_owner=NULL, \
+}
+
+struct amlogic_gpio_desc amlogic_pins[] = {
+
+	PIN_MAP(GPIOX_0,	4,	0),
+	PIN_MAP(GPIOX_1,	4,	1),
+	PIN_MAP(GPIOX_2,	4,	2),
+	PIN_MAP(GPIOX_3,	4,	3),
+	PIN_MAP(GPIOX_4,	4,	4),
+	PIN_MAP(GPIOX_5,	4,	5),
+	PIN_MAP(GPIOX_6,	4,	6),
+	PIN_MAP(GPIOX_7,	4,	7),
+	PIN_MAP(GPIOX_8,	4,	8),
+	PIN_MAP(GPIOX_9,	4,	9),
+	PIN_MAP(GPIOX_10,	4,	10),
+	PIN_MAP(GPIOX_11,	4,	11),
+	PIN_MAP(GPIOX_12,	4,	12),
+	PIN_MAP(GPIOX_13,	4,	13),
+	PIN_MAP(GPIOX_14,	4,	14),
+	PIN_MAP(GPIOX_15,	4,	15),
+	PIN_MAP(GPIOX_16,	4,	16),
+	PIN_MAP(GPIOX_17,	4,	17),
+	PIN_MAP(GPIOX_18,	4,	18),
+	PIN_MAP(GPIOX_19,	4,	19),
+	PIN_MAP(GPIOX_20,	4,	20),
+	PIN_MAP(GPIOX_21,	4,	21),
+	PIN_MAP(GPIOX_22,	4,	22),
+	PIN_MAP(GPIOX_23,	4,	23),
+	PIN_MAP(GPIOX_24,	4,	24),
+	PIN_MAP(GPIOX_25,	4,	25),
+	PIN_MAP(GPIOX_26,	4,	26),
+	PIN_MAP(GPIOX_27,	4,	27),
+
+	PIN_MAP(BOOT_0,		2,	0),
+	PIN_MAP(BOOT_1,		2,	1),
+	PIN_MAP(BOOT_2,		2,	2),
+	PIN_MAP(BOOT_3,		2,	3),
+	PIN_MAP(BOOT_4,		2,	4),
+	PIN_MAP(BOOT_5,		2,	5),
+	PIN_MAP(BOOT_6,		2,	6),
+	PIN_MAP(BOOT_7,		2,	7),
+	PIN_MAP(BOOT_8,		2,	8),
+	PIN_MAP(BOOT_9,		2,	9),
+	PIN_MAP(BOOT_10,	2,	10),
+	PIN_MAP(BOOT_11,	2,	11),
+	PIN_MAP(BOOT_12,	2,	12),
+	PIN_MAP(BOOT_13,	2,	13),
+	PIN_MAP(BOOT_14,	2,	14),
+	PIN_MAP(BOOT_15,	2,	15),
+	PIN_MAP(BOOT_16,	2,	16),
+	PIN_MAP(BOOT_17,	2,	17),
+	PIN_MAP(BOOT_18,	2,	18),
+
+	PIN_MAP(GPIOH_0,	1,	0),
+	PIN_MAP(GPIOH_1,	1,	1),
+	PIN_MAP(GPIOH_2,	1,	2),
+	PIN_MAP(GPIOH_3,	1,	3),
+	PIN_MAP(GPIOH_4,	1,	4),
+	PIN_MAP(GPIOH_5,	1,	5),
+	PIN_MAP(GPIOH_6,	1,	6),
+	PIN_MAP(GPIOH_7,	1,	7),
+	PIN_MAP(GPIOH_8,	1,	8),
+	PIN_MAP(GPIOH_9,	1,	9),
+	PIN_MAP(GPIOH_10,	1,	10),
+
+	PIN_MAP(GPIOZ_0,	3,	0),
+	PIN_MAP(GPIOZ_1,	3,	1),
+	PIN_MAP(GPIOZ_2,	3,	2),
+	PIN_MAP(GPIOZ_3,	3,	3),
+	PIN_MAP(GPIOZ_4,	3,	4),
+	PIN_MAP(GPIOZ_5,	3,	5),
+	PIN_MAP(GPIOZ_6,	3,	6),
+	PIN_MAP(GPIOZ_7,	3,	7),
+	PIN_MAP(GPIOZ_8,	3,	8),
+	PIN_MAP(GPIOZ_9,	3,	9),
+	PIN_MAP(GPIOZ_10,	3,	10),
+	PIN_MAP(GPIOZ_11,	3,	11),
+	PIN_MAP(GPIOZ_12,	3,	12),
+	PIN_MAP(GPIOZ_13,	3,	13),
+	PIN_MAP(GPIOZ_14,	3,	14),
+	PIN_MAP(GPIOZ_15,	3,	15),
+	PIN_MAP(GPIOZ_16,	3,	16),
+	PIN_MAP(GPIOZ_17,	3,	17),
+	PIN_MAP(GPIOZ_18,	3,	18),
+	PIN_MAP(GPIOZ_19,	3,	19),
+	PIN_MAP(GPIOZ_20,	3,	20),
+
+	PIN_MAP(GPIOW_0,	0,	0),
+	PIN_MAP(GPIOW_1,	0,	1),
+	PIN_MAP(GPIOW_2,	0,	2),
+	PIN_MAP(GPIOW_3,	0,	3),
+	PIN_MAP(GPIOW_4,	0,	4),
+	PIN_MAP(GPIOW_5,	0,	5),
+	PIN_MAP(GPIOW_6,	0,	6),
+	PIN_MAP(GPIOW_7,	0,	7),
+	PIN_MAP(GPIOW_8,	0,	8),
+	PIN_MAP(GPIOW_9,	0,	9),
+	PIN_MAP(GPIOW_10,	0,	10),
+	PIN_MAP(GPIOW_11,	0,	11),
+	PIN_MAP(GPIOW_12,	0,	12),
+	PIN_MAP(GPIOW_13,	0,	13),
+	PIN_MAP(GPIOW_14,	0,	14),
+	PIN_MAP(GPIOW_15,	0,	15),
+	PIN_MAP(GPIOW_16,	0,	16),
+	PIN_MAP(GPIOW_17,	0,	17),
+	PIN_MAP(GPIOW_18,	0,	18),
+	PIN_MAP(GPIOW_19,	0,	19),
+	PIN_MAP(GPIOW_20,	0,	20),
+
+	PIN_AOMAP(GPIOAO_0,	6,	0,	6,	0,	6,	0),
+	PIN_AOMAP(GPIOAO_1,	6,	1,	6,	1,	6,	1),
+	PIN_AOMAP(GPIOAO_2,	6,	2,	6,	2,	6,	2),
+	PIN_AOMAP(GPIOAO_3,	6,	3,	6,	3,	6,	3),
+	PIN_AOMAP(GPIOAO_4,	6,	4,	6,	4,	6,	4),
+	PIN_AOMAP(GPIOAO_5,	6,	5,	6,	5,	6,	5),
+	PIN_AOMAP(GPIOAO_6,	6,	6,	6,	6,	6,	6),
+	PIN_AOMAP(GPIOAO_7,	6,	7,	6,	7,	6,	7),
+	PIN_AOMAP(GPIOAO_8,	6,	8,	6,	8,	6,	8),
+	PIN_AOMAP(GPIOAO_9,	6,	9,	6,	9,	6,	9),
+	PIN_AOMAP(GPIOAO_10,	6,	10,	6,	10,	6,	10),
+	PIN_AOMAP(GPIOAO_11,	6,	11,	6,	11,	6,	11),
+	PIN_AOMAP(GPIOAO_12,	6,	12,	6,	12,	6,	12),
+	PIN_AOMAP(GPIOAO_13,	6,	13,	6,	13,	6,	13),
+
+	PIN_MAP(CARD_0,		2,	20),
+	PIN_MAP(CARD_1,		2,	21),
+	PIN_MAP(CARD_2,		2,	22),
+	PIN_MAP(CARD_3,		2,	23),
+	PIN_MAP(CARD_4,		2,	24),
+	PIN_MAP(CARD_5,		2,	25),
+	PIN_MAP(CARD_6,		2,	26),
+	PIN_MAP(CARD_7,		2,	27),
+	PIN_MAP(CARD_8,		2,	28),
+
+	PIN_MAP(GPIOY_0,	1,	0),
+	PIN_MAP(GPIOY_1,	1,	1),
+	PIN_MAP(GPIOY_2,	1,	2),
+	PIN_MAP(GPIOY_3,	1,	3),
+	PIN_MAP(GPIOY_4,	1,	4),
+	PIN_MAP(GPIOY_5,	1,	5),
+	PIN_MAP(GPIOY_6,	1,	6),
+	PIN_MAP(GPIOY_7,	1,	7),
+	PIN_MAP(GPIOY_8,	1,	8),
+	PIN_MAP(GPIOY_9,	1,	9),
+	PIN_MAP(GPIOY_10,	1,	10),
+	PIN_MAP(GPIOY_11,	1,	11),
+	PIN_MAP(GPIOY_12,	1,	12),
+	PIN_MAP(GPIOY_13,	1,	13)
+};
+
+/* amlogic request gpio interface*/
+int gpio_amlogic_requst(struct gpio_chip *chip,unsigned offset)
+{
+	int ret;
+	unsigned int i,reg,bit;
+	unsigned int *gpio_reg = &g9tv_pinmux_table[offset][0];
+	ret=pinctrl_request_gpio(offset);
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	if(!ret){
+		for(i=0;i<sizeof(g9tv_pinmux_table[offset])/sizeof(g9tv_pinmux_table[offset][0]);i++){
+			if(gpio_reg[i] != PMUX_NONE)
+			{
+				reg=GPIO_REG(gpio_reg[i]);
+				bit=GPIO_BIT(gpio_reg[i]);
+				aml_clr_reg32_mask(p_pin_mux_reg_addr[reg],1<<bit);
+				gpio_print("clr reg=%d,bit =%d\n",reg,bit);
+			}
+		}
+	}
+	return ret;
+}
+
+
+void	 gpio_amlogic_free(struct gpio_chip *chip,unsigned offset)
+{
+	 pinctrl_free_gpio(offset);
+	return;
+}
+
+int gpio_amlogic_to_irq(struct gpio_chip *chip,unsigned offset)
+{
+	unsigned reg, start_bit;
+	unsigned irq_bank = (gpio_flag)&0x7;
+	unsigned filter   = (gpio_flag>>8)&0x7;
+	unsigned irq_type = (gpio_flag>>16)&0x3;
+	unsigned type[] = {
+				0x0,		/*GPIO_IRQ_HIGH*/
+				0x10000,	/*GPIO_IRQ_LOW*/
+				0x1,		/*GPIO_IRQ_RISING*/
+				0x10001,	/*GPIO_IRQ_FALLING*/
+			  };
+
+	 /*set trigger type*/
+	aml_clrset_reg32_bits(P_GPIO_INTR_EDGE_POL, 0x10001<<irq_bank, type[irq_type]<<irq_bank);
+	printk(" reg:%x,clearmask=%x,setmask=%x\n",(P_GPIO_INTR_EDGE_POL&0xffff)>>2,0x10001<<irq_bank,(aml_read_reg32(P_GPIO_INTR_EDGE_POL)>>irq_bank)&0x10001);
+	/*select pin*/
+	reg = irq_bank < 4 ? P_GPIO_INTR_GPIO_SEL0 : P_GPIO_INTR_GPIO_SEL1;
+	start_bit = (irq_bank&3)*8;
+	aml_clrset_reg32_bits(reg, 0xff<<start_bit, amlogic_pins[offset].num<<start_bit);
+	printk("reg:%x,clearmask=%x,set pin=%d\n",(reg&0xffff)>>2,0xff<<start_bit,(aml_read_reg32(reg)>>start_bit)&0xff);
+	/*set filter*/
+	start_bit=(irq_bank)*4;
+	aml_clrset_reg32_bits(P_GPIO_INTR_FILTER_SEL0,0x7<<start_bit,filter<<start_bit);
+	printk("reg:%x,clearmask=%x,setmask=%x\n",(P_GPIO_INTR_FILTER_SEL0&0xffff)>>2,0x7<<start_bit,(aml_read_reg32(P_GPIO_INTR_FILTER_SEL0)>>start_bit)&0x7);
+	return 0;
+}
+
+int gpio_amlogic_direction_input(struct gpio_chip *chip,unsigned offset)
+{
+	unsigned int reg,bit;
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	reg=GPIO_REG(amlogic_pins[offset].out_en_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].out_en_reg_bit);
+	aml_set_reg32_mask(p_gpio_oen_addr[reg],1<<bit);
+	return 0;
+}
+
+int gpio_amlogic_get(struct gpio_chip *chip,unsigned offset)
+{
+	unsigned int reg,bit;
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	reg=GPIO_REG(amlogic_pins[offset].input_value_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].input_value_reg_bit);
+	return aml_get_reg32_bits(p_gpio_input_addr[reg],bit,1);
+}
+
+int gpio_amlogic_direction_output(struct gpio_chip *chip,unsigned offset, int value)
+{
+	unsigned int reg,bit;
+	if(value){
+		reg=GPIO_REG(amlogic_pins[offset].out_value_reg_bit);
+		bit=GPIO_BIT(amlogic_pins[offset].out_value_reg_bit);
+		aml_set_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+		gpio_print("out reg=%x,value=%x\n",p_gpio_output_addr[reg],aml_read_reg32(p_gpio_output_addr[reg]));
+	}
+	else{
+		reg=GPIO_REG(amlogic_pins[offset].out_value_reg_bit);
+		bit=GPIO_BIT(amlogic_pins[offset].out_value_reg_bit);
+		aml_clr_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+		gpio_print("out reg=%x,value=%x\n",p_gpio_output_addr[reg],aml_read_reg32(p_gpio_output_addr[reg]));
+	}
+	reg=GPIO_REG(amlogic_pins[offset].out_en_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].out_en_reg_bit);
+	aml_clr_reg32_mask(p_gpio_oen_addr[reg],1<<bit);
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	gpio_print("oen reg=%x,value=%x\n",p_gpio_oen_addr[reg],aml_read_reg32(p_gpio_oen_addr[reg]));
+	gpio_print("value=%d\n",value);
+	return 0;
+}
+
+void gpio_amlogic_set(struct gpio_chip *chip,unsigned offset, int value)
+{
+	unsigned int reg,bit;
+	reg=GPIO_REG(amlogic_pins[offset].out_value_reg_bit);
+	bit=GPIO_BIT(amlogic_pins[offset].out_value_reg_bit);
+	gpio_print("==%s==%d\n",__FUNCTION__,__LINE__);
+	if(value)
+		aml_set_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+	else
+		aml_clr_reg32_mask(p_gpio_output_addr[reg],1<<bit);
+}
+
+int gpio_amlogic_name_to_num(const char *name)
+{
+	int i,tmp=100,num=0;
+	int len=0;
+	char *p=NULL;
+	char *start=NULL;
+
+	if(!name)
+		return -1;
+
+
+	len=strlen(name);
+	p=kzalloc(len+1,GFP_KERNEL);
+	start=p;
+	if(!p)
+	{
+		printk("%s:malloc error\n",__func__);
+		return -1;
+	}
+	p = strcpy(p, name);
+	for(i=0; i<len ;p++,i++){
+		if (*p == '_'){
+			*p='\0';
+			tmp=i;
+		}
+		if(i>tmp&&*p>='0'&&*p<='9')
+			num=num*10+*p-'0';
+	}
+	p = start;
+	if (!strcmp(p, "GPIOX"))
+		num = num + 0;
+	else if (!strcmp(p, "BOOT"))
+		num = num + 28;
+	else if (!strcmp(p, "GPIOH"))
+		num = num + 47;
+	else if (!strcmp(p, "GPIOZ"))
+		num = num + 58;
+	else if(!strcmp(p, "GPIOW"))
+		num = num + 79;
+	else if(!strcmp(p, "GPIOAO"))
+		num = num + 100;
+	else if(!strcmp(p, "CARD"))
+		num = num + 114;
+	else if(!strcmp(p, "GPIOY"))
+		num = num + 123;
+	else
+		num= -1;
+	kzfree(start);
+	return num;
+}
+
+static struct gpio_chip g9tv_gpio_chip = {
+	.request		= gpio_amlogic_requst,
+	.free			= gpio_amlogic_free,
+	.direction_input	= gpio_amlogic_direction_input,
+	.get			= gpio_amlogic_get,
+	.direction_output	= gpio_amlogic_direction_output,
+	.set			= gpio_amlogic_set,
+	.to_irq			= gpio_amlogic_to_irq,
+};
+
+
+static const struct of_device_id amlogic_gpio_match[] =
+{
+	{
+	.compatible = "amlogic,g9tv-gpio",
+	},
+	{ },
+};
+
+struct amlogic_gpio_platform_data
+{
+	unsigned int base;
+	unsigned ngpios;
+	struct device_node	*of_node; /* associated device tree node */
+};
+
+static int g9tv_set_pullup(unsigned int pin,unsigned int val,unsigned int pullen)
+{
+	unsigned int reg=0,bit=0,bit_en=0,ret;
+	ret=g9tv_pin_to_pullup(pin,&reg,&bit,&bit_en);
+	if(!ret)
+	{
+		if(pullen){
+			if(!ret)
+			{
+				if(val)
+					aml_set_reg32_mask(p_pull_up_addr[reg],1<<bit);
+				else
+					aml_clr_reg32_mask(p_pull_up_addr[reg],1<<bit);
+			}
+			aml_set_reg32_mask(p_pull_upen_addr[reg],1<<bit_en);
+		}
+		else
+			aml_clr_reg32_mask(p_pull_upen_addr[reg],1<<bit_en);
+	}
+	return ret;
+}
+
+static int amlogic_gpio_probe(struct platform_device *pdev)
+{
+#ifdef CONFIG_OF_GPIO
+	g9tv_gpio_chip.of_node = pdev->dev.of_node;
+#endif
+
+	g9tv_gpio_chip.base = 0;
+	g9tv_gpio_chip.ngpio = ARRAY_SIZE(amlogic_pins);
+	gpiochip_add(&g9tv_gpio_chip);
+
+	pullup_ops.meson_set_pullup = g9tv_set_pullup;
+
+	dev_info(&pdev->dev, "Probed amlogic GPIO driver\n");
+
+	return 0;
+}
+
+
+
+static struct platform_driver amlogic_gpio_driver = {
+	.probe		= amlogic_gpio_probe,
+	.driver		= {
+		.name	= "amlogic_gpio",
+		.owner	= THIS_MODULE,
+		.of_match_table = of_match_ptr(amlogic_gpio_match),
+	},
+};
+
+/*
+ * gpio driver register needs to be done before
+ * machine_init functions access gpio APIs.
+ * Hence amlogic_gpio_drv_reg() is a postcore_initcall.
+ */
+static int __init amlogic_gpio_drv_reg(void)
+{
+	return platform_driver_register(&amlogic_gpio_driver);
+}
+postcore_initcall(amlogic_gpio_drv_reg);
diff --git a/arch/arm/mach-mesong9tv/headsmp.S b/arch/arm/mach-mesong9tv/headsmp.S
new file mode 100644
index 000000000000..58b71f1c2fc9
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/headsmp.S
@@ -0,0 +1,35 @@
+/*
+ *  linux/arch/arm/mach-realview/headsmp.S
+ *
+ *  Copyright (c) 2003 ARM Limited
+ *  All Rights Reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+#include <linux/linkage.h>
+#include <linux/init.h>
+
+	__CPUINIT
+
+ENTRY(meson_secondary_startup)
+	mrc	p15, 0, r0, c0, c0, 5		@Read MPIDR
+	and	r0, r0, #15							@Mask CPUID
+	adr	r4, 1f
+	ldmia	r4, {r5, r6}
+	sub	r4, r4, r5
+	add	r6, r6, r4
+pen:	ldr	r7, [r6]
+	cmp	r7, r0
+	bne	pen
+
+	/*
+	 * we've been released from the holding pen: secondary_stack
+	 * should now contain the SVC stack for this core
+	 */
+	b	secondary_startup
+
+	.align
+1:	.long	.
+	.long	pen_release
diff --git a/arch/arm/mach-mesong9tv/hotplug-asm.S b/arch/arm/mach-mesong9tv/hotplug-asm.S
new file mode 100644
index 000000000000..9d322fcec5e3
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/hotplug-asm.S
@@ -0,0 +1,73 @@
+#include <linux/linkage.h>
+
+#include <asm/assembler.h>
+#include <asm/cache.h>
+#include <asm/cp15.h>
+#include <asm/hardware/cache-l2x0.h>
+
+.macro cpu_id, rd
+	mrc	p15, 0, \rd, c0, c0, 5
+	and	\rd, \rd, #0xF
+.endm
+
+.macro mov32, reg, val
+	movw	\reg, #:lower16:\val
+	movt	\reg, #:upper16:\val
+.endm
+
+.macro exit_smp, tmp1, tmp2
+	mrc	p15, 0, \tmp1, c1, c0, 1	@ ACTLR
+	bic	\tmp1, \tmp1, #(1<<6) | (1<<0)	@ clear ACTLR.SMP | ACTLR.FW
+	mcr	p15, 0, \tmp1, c1, c0, 1	@ ACTLR
+	isb
+	cpu_id	\tmp1
+	mov	\tmp1, \tmp1, lsl #2
+	mov	\tmp2, #0xf
+	mov	\tmp2, \tmp2, lsl \tmp1
+	mov32	\tmp1, 0xFE00100C
+	str	\tmp2, [\tmp1]			@ invalidate SCU tags for CPU
+	dsb
+.endm
+
+ENTRY(meson_cleanup)
+	stmfd	sp!, {r0-r11, lr}
+	
+	@ disable interrupt
+	mrs r4, cpsr
+	orr r5, r4, #0xc0
+	msr cpsr_c, r5
+	
+	@ icache disable
+	mrc p15, 0, r4, c1, c0, 0
+	bic r4, r4, #(CR_I)
+	mcr p15, 0, r4, c1, c0, 0
+	
+	@ invalid i-cache
+	mov r4, #0
+	mcr p15, 0, r4, c7, c5, 6 @invalid BTAC
+	mcr p15, 0, r4, c7, c5, 0 @invalid icache
+	dsb
+	nop
+	nop
+	isb
+	
+	@ dcache disable
+	mrc p15, 0, r4, c1, c0, 0
+	bic r4, r4, #CR_C
+	mcr p15, 0, r4, c1, c0, 0
+	dsb
+	isb
+	
+	/* Flush the D-cache */
+	bl	v7_flush_dcache_louis
+	
+	mov r4, #0
+	mcr p15, 0, r4, c7, c10, 4
+	dsb 
+	isb
+	
+	/* Trun off coherency */
+	exit_smp r4, r5
+		
+	ldmfd	sp!, {r0-r11, pc}
+ENDPROC(meson_cleanup)
\ No newline at end of file
diff --git a/arch/arm/mach-mesong9tv/hotplug.c b/arch/arm/mach-mesong9tv/hotplug.c
new file mode 100644
index 000000000000..62a5cd2cf1f2
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/hotplug.c
@@ -0,0 +1,60 @@
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/jiffies.h>
+#include <linux/smp.h>
+#include <linux/io.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/cpu.h>
+#include <asm/smp_scu.h>
+#include <asm/hardware/gic.h>
+#include <asm/smp_plat.h>
+#include <asm/smp_scu.h>
+#include <asm/cacheflush.h>
+#include <asm/mach-types.h>
+#include <asm/cp15.h>
+
+extern void meson_cleanup(void);
+
+int meson_cpu_kill(unsigned int cpu)
+{
+	unsigned int value;
+	unsigned int offset=(cpu<<3);
+	do{
+		udelay(10);
+		value=aml_read_reg32(MESON_CPU_POWER_CTRL_REG);
+	}while((value&(3<<offset)) != (3<<offset));
+
+	udelay(10);
+	meson_set_cpu_power_ctrl(cpu, 0);
+	return 1;
+}
+
+
+void meson_cpu_die(unsigned int cpu)
+{
+	meson_set_cpu_ctrl_reg(cpu, 0);
+	flush_cache_all();
+	dsb();
+	dmb();	
+
+	meson_cleanup();
+	aml_set_reg32_bits(MESON_CPU_POWER_CTRL_REG,0x3,(cpu << 3),2);
+	asm volatile(
+		"dsb\n"
+		"wfi\n"
+	);
+	BUG();
+}
+
+int meson_cpu_disable(unsigned int cpu)
+{
+	/*
+	 * we don't allow CPU 0 to be shutdown (it is still too special
+	 * e.g. clock tick interrupts)
+	 */
+	return cpu == 0 ? -EPERM : 0;
+}
+
diff --git a/arch/arm/mach-mesong9tv/include/mach/am_eth_reg.h b/arch/arm/mach-mesong9tv/include/mach/am_eth_reg.h
new file mode 100644
index 000000000000..cd2e47dc9f52
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/am_eth_reg.h
@@ -0,0 +1,198 @@
+/*******************************************************************
+ *
+ *  Copyright C 2013 by Amlogic, Inc. All Rights Reserved.
+ *
+ *  Author: beijing-platform
+ *  Created: 2013-9-7
+ *
+ *******************************************************************/
+#ifndef __ETH_REG_H_
+#define __ETH_REG_H_
+#define ETH_DMA_0_Bus_Mode                  (0x1000)
+#define ETH_DMA_1_Tr_Poll_Demand        (0x1004)
+#define ETH_DMA_2_Re_Poll_Demand        (0x1008)
+#define ETH_DMA_3_Re_Descriptor_List_Addr   (0x100C)
+#define ETH_DMA_4_Tr_Descriptor_List_Addr   (0x1010)
+#define ETH_DMA_5_Status            (0x1014)
+#define ETH_DMA_6_Operation_Mode        (0x1018)
+#define ETH_DMA_7_Interrupt_Enable      (0x101C)
+#define ETH_DMA_8_Missed_Frame_and_Overflow (0x1020)
+#define ETH_DMA_9_Reserved          (0x1024)
+#define ETH_DMA_10_Reserved         (0x1028)
+#define ETH_DMA_11_Reserved         (0x102c)
+#define ETH_DMA_12_Reserved         (0x1030)
+#define ETH_DMA_13_Reserved         (0x1034)
+#define ETH_DMA_14_Reserved         (0x1038)
+#define ETH_DMA_15_Reserved         (0x103c)
+#define ETH_DMA_16_Reserved         (0x1040)
+#define ETH_DMA_17_Reserved         (0x1044)
+#define ETH_DMA_18_Curr_Host_Tr_Descriptor  (0x1048)
+#define ETH_DMA_19_Curr_Host_Re_Descriptor  (0x104C)
+#define ETH_DMA_20_Curr_Host_Tr_Buffer_Addr (0x1050)
+#define ETH_DMA_21_Curr_Host_Re_Buffer_Addr (0x1054)
+#define ETH_MAC_0_Configuration         (0x0000)
+#define ETH_MAC_1_Frame_Filter          (0x0004)
+#define ETH_MAC_2_Hash_Table_High       (0x0008)
+#define ETH_MAC_3_Hash_Table_Low        (0x000C)
+#define ETH_MAC_4_GMII_Addr         (0x0010)
+#define ETH_MAC_5_GMII_Data         (0x0014)
+#define ETH_MAC_6_Flow_Control          (0x0018)
+#define ETH_MAC_7_VLAN_Tag          (0x001C)
+#define ETH_MAC_8_Version           (0x0020)
+#define ETH_MAC_9_Reserved          (0x0024)
+#define ETH_MAC_Remote_Wake_Up_Frame_Filter (0x0028)
+#define ETH_MAC_PMT_Control_and_Status      (0x002C)
+#define ETH_MAC_12_Reserved         (0x0030)
+#define ETH_MAC_13_Reserved         (0x0034)
+#define ETH_MAC_Interrupt           (0x0038)
+#define ETH_MAC_Interrupt_Mask          (0x003C)
+#define ETH_MAC_Addr0_High          (0x0040)
+#define ETH_MAC_Addr0_Low           (0x0044)
+#define ETH_MAC_Addr1_High          (0x0048)
+#define ETH_MAC_Addr1_Low           (0x004C)
+#define ETH_MAC_Addr2_High          (0x0050)
+#define ETH_MAC_Addr2_Low           (0x0054)
+#define ETH_MAC_Addr3_High          (0x0058)
+#define ETH_MAC_Addr3_Low           (0x005C)
+#define ETH_MAC_Addr4_High          (0x0060)
+#define ETH_MAC_Addr4_Low           (0x0064)
+#define ETH_MAC_Addr5_High          (0x0068)
+#define ETH_MAC_Addr5_Low           (0x006C)
+#define ETH_MAC_Addr6_High          (0x0070)
+#define ETH_MAC_Addr6_Low           (0x0074)
+#define ETH_MAC_Addr7_High          (0x0078)
+#define ETH_MAC_Addr7_Low           (0x007C)
+#define ETH_MAC_Addr8_High          (0x0080)
+#define ETH_MAC_Addr8_Low           (0x0084)
+#define ETH_MAC_Addr9_High          (0x0088)
+#define ETH_MAC_Addr9_Low           (0x008C)
+#define ETH_MAC_Addr10_High         (0x0090)
+#define ETH_MAC_Addr10_Low          (0x0094)
+#define ETH_MAC_Addr11_High         (0x0098)
+#define ETH_MAC_Addr11_Low          (0x009C)
+#define ETH_MAC_Addr12_High         (0x00A0)
+#define ETH_MAC_Addr12_Low          (0x00A4)
+#define ETH_MAC_Addr13_High         (0x00A8)
+#define ETH_MAC_Addr13_Low          (0x00AC)
+#define ETH_MAC_Addr14_High         (0x00B0)
+#define ETH_MAC_Addr14_Low          (0x00B4)
+#define ETH_MAC_Addr15_High         (0x00B8)
+#define ETH_MAC_Addr15_Low          (0x00BC)
+#define ETH_MAC_48_AN_Control           (0x00C0)
+#define ETH_MAC_49_AN_Status            (0x00C4)
+#define ETH_MAC_50_AN_Advertisement     (0x00C8)
+#define ETH_MAC_51_AN_Link_Partner_Ability  (0x00CC)
+#define ETH_MAC_52_AN_Expansion         (0x00D0)
+#define ETH_MAC_53_TBI_Extended_Status      (0x00D4)
+#define ETH_MAC_54_SGMII_RGMII_Status       (0x00D8)
+#define ETH_MAC_55_Reserved         (0x00DC)
+#define ETH_MAC_56_Reserved         (0x00E0)
+#define ETH_MAC_57_Reserved         (0x00E4)
+#define ETH_MAC_58_Reserved         (0x00E8)
+#define ETH_MAC_59_Reserved         (0x00EC)
+#define ETH_MAC_60_Reserved         (0x00F0)
+#define ETH_MAC_61_Reserved         (0x00F4)
+#define ETH_MAC_62_Reserved         (0x00F8)
+#define ETH_MAC_63_Reserved         (0x00FC)
+#define ETH_MMC_cntrl               (0x0100)
+#define ETH_MMC_intr_rx             (0x0104)
+#define ETH_MMC_intr_tx             (0x0108)
+#define ETH_MMC_intr_mask_rx            (0x010C)
+#define ETH_MMC_intr_mask_tx            (0x0110)
+#define ETH_MMC_txoctetcount_gb         (0x0114)
+#define ETH_MMC_txframecount_gb         (0x0118)
+#define ETH_MMC_txbroadcastframes_g     (0x011C)
+#define ETH_MMC_txmulticastframes_g     (0x0120)
+#define ETH_MMC_tx64octets_gb           (0x0124)
+#define ETH_MMC_tx65to127octets_gb      (0x0128)
+#define ETH_MMC_tx128to255octets_gb     (0x012C)
+#define ETH_MMC_tx256to511octets_gb     (0x0130)
+#define ETH_MMC_tx512to1023octets_gb        (0x0134)
+#define ETH_MMC_tx1024tomaxoctets_gb        (0x0138)
+#define ETH_MMC_txunicastframes_gb      (0x013C)
+#define ETH_MMC_txmulticastframes_gb        (0x0140)
+#define ETH_MMC_txbroadcastframes_gb        (0x0144)
+#define ETH_MMC_txunderflowerror        (0x0148)
+#define ETH_MMC_txsinglecol_g           (0x014C)
+#define ETH_MMC_txmulticol_g            (0x0150)
+#define ETH_MMC_txdeferred          (0x0154)
+#define ETH_MMC_txlatecol           (0x0158)
+#define ETH_MMC_txexesscol          (0x015C)
+#define ETH_MMC_txcarriererror          (0x0160)
+#define ETH_MMC_txoctetcount_g          (0x0164)
+#define ETH_MMC_txframecount_g          (0x0168)
+#define ETH_MMC_txexcessdef         (0x016C)
+#define ETH_MMC_txpauseframes           (0x0170)
+#define ETH_MMC_txvlanframes_g          (0x0174)
+#define ETH_MMC_94_Reserved         (0x0178)
+#define ETH_MMC_95_Reserved         (0x017C)
+#define ETH_MMC_rxframecount_gb         (0x0180)
+#define ETH_MMC_rxoctetcount_gb         (0x0184)
+#define ETH_MMC_rxoctetcount_g          (0x0188)
+#define ETH_MMC_rxbroadcastframes_g     (0x018C)
+#define ETH_MMC_rxmulticastframes_g     (0x0190)
+#define ETH_MMC_rxcrcerror          (0x0194)
+#define ETH_MMC_rxalignmenterror        (0x0198)
+#define ETH_MMC_rxrunterror         (0x019C)
+#define ETH_MMC_rxjabbererror           (0x01A0)
+#define ETH_MMC_rxundersize_g           (0x01A4)
+#define ETH_MMC_rxoversize_g            (0x01A8)
+#define ETH_MMC_rx64octets_gb           (0x01AC)
+#define ETH_MMC_rx65to127octets_gb      (0x01B0)
+#define ETH_MMC_rx128to255octets_gb     (0x01B4)
+#define ETH_MMC_rx256to511octets_gb     (0x01B8)
+#define ETH_MMC_rx512to1023octets_gb        (0x01BC)
+#define ETH_MMC_rx1024tomaxoctets_gb        (0x01C0)
+#define ETH_MMC_rxunicastframes_g       (0x01C4)
+#define ETH_MMC_rxlengtherror           (0x01C8)
+#define ETH_MMC_rxoutofrangetype        (0x01CC)
+#define ETH_MMC_rxpauseframes           (0x01D0)
+#define ETH_MMC_rxfifooverflow          (0x01D4)
+#define ETH_MMC_rxvlanframes_gb         (0x01D8)
+#define ETH_MMC_rxwatchdogerror         (0x01DC)
+#define ETH_MMC_120_Reserved            (0x01E0)
+#define ETH_MMC_121_Reserved            (0x01E4)
+#define ETH_MMC_122_Reserved            (0x01E8)
+#define ETH_MMC_123_Reserved            (0x01EC)
+#define ETH_MMC_124_Reserved            (0x01F0)
+#define ETH_MMC_125_Reserved            (0x01F4)
+#define ETH_MMC_126_Reserved            (0x01F8)
+#define ETH_MMC_127_Reserved            (0x01FC)
+#define ETH_MMC_ipc_intr_mask_rx        (0x0200)
+#define ETH_MMC_129_Reserved            (0x0204)
+#define ETH_MMC_ipc_intr_rx         (0x0208)
+#define ETH_MMC_131_Reserved            (0x020C)
+#define ETH_MMC_rxipv4_gd_frms          (0x0210)
+#define ETH_MMC_rxipv4_hdrerr_frms      (0x0214)
+#define ETH_MMC_rxipv4_nopay_frms       (0x0218)
+#define ETH_MMC_rxipv4_frag_frms        (0x021C)
+#define ETH_MMC_rxipv4_udsbl_frms       (0x0220)
+#define ETH_MMC_rxipv6_gd_frms          (0x0224)
+#define ETH_MMC_rxipv6_hdrerr_frms      (0x0228)
+#define ETH_MMC_rxipv6_nopay_frms       (0x022C)
+#define ETH_MMC_rxudp_gd_frms           (0x0230)
+#define ETH_MMC_rxudp_err_frms          (0x0234)
+#define ETH_MMC_rxtcp_gd_frms           (0x0238)
+#define ETH_MMC_rxtcp_err_frms          (0x023C)
+#define ETH_MMC_rxicmp_gd_frms          (0x0240)
+#define ETH_MMC_rxicmp_err_frms         (0x0244)
+#define ETH_MMC_146_Reserved            (0x0248)
+#define ETH_MMC_147_Reserved            (0x024C)
+#define ETH_MMC_rxipv4_gd_octets        (0x0250)
+#define ETH_MMC_rxipv4_hdrerr_octets        (0x0254)
+#define ETH_MMC_rxipv4_nopay_octets     (0x0258)
+#define ETH_MMC_rxipv4_frag_octets      (0x025C)
+#define ETH_MMC_rxipv4_udsbl_octets     (0x0260)
+#define ETH_MMC_rxipv6_gd_octets        (0x0264)
+#define ETH_MMC_rxipv6_hdrerr_octets        (0x0268)
+#define ETH_MMC_rxipv6_nopay_octets     (0x026C)
+#define ETH_MMC_rxudp_gd_octets         (0x0270)
+#define ETH_MMC_rxudp_err_octets        (0x0274)
+#define ETH_MMC_rxtcp_gd_octets         (0x0278)
+#define ETH_MMC_rxtcp_err_octets        (0x027C)
+#define ETH_MMC_rxicmp_gd_octets        (0x0280)
+#define ETH_MMC_rxicmp_err_octets       (0x0284)
+
+
+#endif
+
diff --git a/arch/arm/mach-mesong9tv/include/mach/am_regs.h b/arch/arm/mach-mesong9tv/include/mach/am_regs.h
new file mode 100644
index 000000000000..455fef30c51d
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/am_regs.h
@@ -0,0 +1,29 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/am_regs.h
+ *
+ * Copyright (C) 2011-2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_AM_REGS_H
+#define __MACH_MESONG9TV_AM_REGS_H
+
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/register.h>
+#include <mach/common.h>
+
+#include <mach/cpu.h>
+#include <mach/canvas.h>
+#include <mach/vpp.h>
+#include <mach/audio.h>
+
+#endif //__MACH_MESONG9TV_AM_REGS_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/audio.h b/arch/arm/mach-mesong9tv/include/mach/audio.h
new file mode 100644
index 000000000000..9ca88e7b56dd
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/audio.h
@@ -0,0 +1,90 @@
+/*
+ * arch/arm/mach-meson6tvd/include/mach/audio.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESON_AUDIO_REGS_H
+#define __MACH_MESON_AUDIO_REGS_H
+
+#define SPDIF_EN			31
+#define SPDIF_INT_EN			30
+#define SPDIF_BURST_PRE_INT_EN		29
+#define SPDIF_TIE_0			24
+#define SPDIF_SAMPLE_SEL		23
+#define SPDIF_REVERSE_EN		22
+#define SPDIF_BIT_ORDER 		20
+#define SPDIF_CHNL_ORDER		19
+#define SPDIF_DATA_TYPE_SEL		18
+#define SPDIF_XTDCLK_UPD_ITVL		14	//16:14
+#define SPDIF_CLKNUM_54U		0	//13:0
+
+#define SPDIF_CLKNUM_192K		24	//29:24
+#define SPDIF_CLKNUM_96K		18	//23:18
+#define SPDIF_CLKNUM_48K		12	//17:12
+#define SPDIF_CLKNUM_44K		6	// 11:6
+#define SPDIF_CLKNUM_32K		0	// 5:0
+
+#define I2SIN_DIR			0	// I2S CLK and LRCLK direction. 0 : input 1 : output.
+#define I2SIN_CLK_SEL			1	// I2S clk selection : 0 : from pad input. 1 : from AIU.
+#define I2SIN_LRCLK_SEL			2
+#define I2SIN_POS_SYNC			3
+#define I2SIN_LRCLK_SKEW		4	// 6:4
+#define I2SIN_LRCLK_INVT		7
+#define I2SIN_SIZE			8	//9:8 : 0 16 bit. 1 : 18 bits 2 : 20 bits 3 : 24bits.
+#define I2SIN_CHAN_EN			10	//13:10.
+#define I2SIN_EN			15
+
+#define AUDIN_FIFO0_EN			0
+#define AUDIN_FIFO0_RST			1
+#define AUDIN_FIFO0_LOAD		2	//write 1 to load address to AUDIN_FIFO0.
+
+#define AUDIN_FIFO0_DIN_SEL		3
+	// 0	 spdifIN
+	// 1	 i2Sin
+	// 2	 PCMIN
+	// 3	 HDMI in
+	// 4	 DEMODULATOR IN
+#define AUDIN_FIFO0_ENDIAN		8	//10:8   data endian control.
+#define AUDIN_FIFO0_CHAN		11	//14:11   channel number.  in M1 suppose there's only 1 channel and 2 channel.
+#define AUDIN_FIFO0_UG			15	// urgent request enable.
+#define AUDIN_FIFO0_HOLD0_EN		19
+#define AUDIN_FIFO0_HOLD1_EN		20
+#define AUDIN_FIFO0_HOLD2_EN		21
+#define AUDIN_FIFO0_HOLD0_SEL		22	// 23:22
+#define AUDIN_FIFO0_HOLD1_SEL		24	// 25:24
+#define AUDIN_FIFO0_HOLD2_SEL		26	// 27:26
+#define AUDIN_FIFO0_HOLD_LVL		28	// 27:26
+
+#define AUDIN_FIFO1_EN			0
+#define AUDIN_FIFO1_RST			1
+#define AUDIN_FIFO1_LOAD		2	//write 1 to load address to AUDIN_FIFO0.
+
+#define AUDIN_FIFO1_DIN_SEL		3
+	// 0	 spdifIN
+	// 1	 i2Sin
+	// 2	 PCMIN
+	// 3	 HDMI in
+	// 4	 DEMODULATOR IN
+#define AUDIN_FIFO1_ENDIAN		8	//10:8   data endian control.
+#define AUDIN_FIFO1_CHAN		11	//14:11   channel number.  in M1 suppose there's only 1 channel and 2 channel.
+#define AUDIN_FIFO1_UG			15	// urgent request enable.
+#define AUDIN_FIFO1_HOLD0_EN		19
+#define AUDIN_FIFO1_HOLD1_EN		20
+#define AUDIN_FIFO1_HOLD2_EN		21
+#define AUDIN_FIFO1_HOLD0_SEL		22	// 23:22
+#define AUDIN_FIFO1_HOLD1_SEL		24	// 25:24
+#define AUDIN_FIFO1_HOLD2_SEL		26	// 27:26
+#define AUDIN_FIFO1_HOLD_LVL		28	// 27:26
+
+
+#endif // __MACH_MESON_AUDIO_REGS_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/avosstyle_io.h b/arch/arm/mach-mesong9tv/include/mach/avosstyle_io.h
new file mode 100644
index 000000000000..f853681912cd
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/avosstyle_io.h
@@ -0,0 +1,114 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/avosstyle.h
+ *
+ * Copyright (C) 2011-2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_AVOSSTYLE_IO_H
+#define __MACH_MESONG9TV_AVOSSTYLE_IO_H
+
+#ifndef __ASSEMBLY__
+
+#include <plat/io.h>
+
+#define WRITE_REG(bus, reg, val)	aml_write_reg32(bus##_REG_ADDR(reg), val)
+#define READ_REG(bus, reg)		aml_read_reg32(bus##_REG_ADDR(reg))
+#define WRITE_REG_BITS(bus, reg, val, start, len) \
+	aml_set_reg32_bits(bus##_REG_ADDR(reg), val, start, len)
+#define READ_REG_BITS(bus, reg, start, len) \
+	aml_get_reg32_bits(bus##_REG_ADDR(reg), start, len)
+#define CLEAR_REG_MASK(bus, reg, mask)	aml_clr_reg32_mask(bus##_REG_ADDR(reg), (mask))
+#define SET_REG_MASK(bus, reg, mask)	aml_set_reg32_mask(bus##_REG_ADDR(reg), (mask))
+
+#ifndef CONFIG_DISABLE_VCBUS_IO_FUNC
+///VCBUS BUS io operation
+#define WRITE_VCBUS_REG(a...)		WRITE_REG(VCBUS,a)
+#define READ_VCBUS_REG(a...)		READ_REG(VCBUS,a)
+#define WRITE_VCBUS_REG_BITS(a...)	WRITE_REG_BITS(VCBUS,a)
+#define READ_VCBUS_REG_BITS(a...)	READ_REG_BITS(VCBUS,a)
+#define CLEAR_VCBUS_REG_MASK(a...)	CLEAR_REG_MASK(VCBUS,a)
+#define SET_VCBUS_REG_MASK(a...)	SET_REG_MASK(VCBUS,a)
+#endif
+
+#ifndef CONFIG_DISABLE_CBUS_IO_FUNC
+///CBUS BUS io operation
+#define WRITE_CBUS_REG(a...)		WRITE_REG(CBUS,a)
+#define READ_CBUS_REG(a...)		READ_REG(CBUS,a)
+#define WRITE_CBUS_REG_BITS(a...)	WRITE_REG_BITS(CBUS,a)
+#define READ_CBUS_REG_BITS(a...)	READ_REG_BITS(CBUS,a)
+#define CLEAR_CBUS_REG_MASK(a...)	CLEAR_REG_MASK(CBUS,a)
+#define SET_CBUS_REG_MASK(a...)		SET_REG_MASK(CBUS,a)
+#endif
+
+#ifndef CONFIG_DISABLE_AXI_IO_FUNC
+///AXI BUS io operation
+#define WRITE_AXI_REG(a...)		WRITE_REG(AXI,a)
+#define READ_AXI_REG(a...)		READ_REG(AXI,a)
+#define WRITE_AXI_REG_BITS(a...)	WRITE_REG_BITS(AXI,a)
+#define READ_AXI_REG_BITS(a...)		READ_REG_BITS(AXI,a)
+#define CLEAR_AXI_REG_MASK(a...)	CLEAR_REG_MASK(AXI,a)
+#define SET_AXI_REG_MASK(a...)		SET_REG_MASK(AXI,a)
+#endif
+
+#ifndef CONFIG_DISABLE_AHB_IO_FUNC
+///AHB BUS io operation
+#define WRITE_AHB_REG(a...)		WRITE_REG(AHB,a)
+#define READ_AHB_REG(a...)		READ_REG(AHB,a)
+#define WRITE_AHB_REG_BITS(a...)	WRITE_REG_BITS(AHB,a)
+#define READ_AHB_REG_BITS(a...)		READ_REG_BITS(AHB,a)
+#define CLEAR_AHB_REG_MASK(a...)	CLEAR_REG_MASK(AHB,a)
+#define SET_AHB_REG_MASK(a...)		SET_REG_MASK(AHB,a)
+#endif
+
+#ifndef CONFIG_DISABLE_APB_IO_FUNC
+///APB BUS io operation
+#define WRITE_APB_REG(a...)		WRITE_REG(APB,a)
+#define READ_APB_REG(a...)		READ_REG(APB,a)
+#define WRITE_APB_REG_BITS(a...)	WRITE_REG_BITS(APB,a)
+#define READ_APB_REG_BITS(a...)		READ_REG_BITS(APB,a)
+#define CLEAR_APB_REG_MASK(a...)	CLEAR_REG_MASK(APB,a)
+#define SET_APB_REG_MASK(a...)		SET_REG_MASK(APB,a)
+#endif
+
+#ifndef CONFIG_DISABLE_MMC_IO_FUNC
+///APB BUS io operation
+#define WRITE_MMC_REG(a...)		WRITE_REG(MMC,a)
+#define READ_MMC_REG(a...)		READ_REG(MMC,a)
+#define WRITE_MMC_REG_BITS(a...)	WRITE_REG_BITS(MMC,a)
+#define READ_MMC_REG_BITS(a...)		READ_REG_BITS(MMC,a)
+#define CLEAR_MMC_REG_MASK(a...)	CLEAR_REG_MASK(MMC,a)
+#define SET_MMC_REG_MASK(a...)		SET_REG_MASK(MMC,a)
+#endif
+
+#ifndef CONFIG_DISABLE_AOBUS_IO_FUNC
+///AOBUS BUS io operation
+#define WRITE_AOBUS_REG(a...)		WRITE_REG(AOBUS,a)
+#define READ_AOBUS_REG(a...)		READ_REG(AOBUS,a)
+#define WRITE_AOBUS_REG_BITS(a...)	WRITE_REG_BITS(AOBUS,a)
+#define READ_AOBUS_REG_BITS(a...)	READ_REG_BITS(AOBUS,a)
+#define CLEAR_AOBUS_REG_MASK(a...)	CLEAR_REG_MASK(AOBUS,a)
+#define SET_AOBUS_REG_MASK(a...)	SET_REG_MASK(AOBUS,a)
+#endif
+
+#ifndef CONFIG_DISABLE_MPEG_IO_FUNC
+///MPEG BUS io operation
+#define WRITE_MPEG_REG			WRITE_CBUS_REG
+#define READ_MPEG_REG			READ_CBUS_REG
+#define WRITE_MPEG_REG_BITS		WRITE_CBUS_REG_BITS
+#define READ_MPEG_REG_BITS		READ_CBUS_REG_BITS
+#define CLEAR_MPEG_REG_MASK		CLEAR_CBUS_REG_MASK
+#define SET_MPEG_REG_MASK		SET_CBUS_REG_MASK
+#endif
+
+#endif //__ASSEMBLY__
+
+#endif //__MACH_MESONG9TV_AVOSSTYLE_IO_H
\ No newline at end of file
diff --git a/arch/arm/mach-mesong9tv/include/mach/c_stb_define.h b/arch/arm/mach-mesong9tv/include/mach/c_stb_define.h
new file mode 100644
index 000000000000..f8bb3131b1db
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/c_stb_define.h
@@ -0,0 +1,815 @@
+// ----------------------------------------------------------------------
+// This file is automatically generated from the script:
+//
+// ./create_stb_define_for_C_code.pl
+//
+// and was applied to the file
+//
+// ./stb_define.h
+//
+// DO NOT EDIT!!!!!
+// ----------------------------------------------------------------------
+//
+#ifdef C_STB_DEFINE_H
+#else
+#define C_STB_DEFINE_H
+
+//========================================================================
+//  STB Registers Start
+//========================================================================
+// -----------------------------------------------
+#define STB_CBUS_BASE           0x1600
+// -----------------------------------------------
+// There are two instantiations under one CBUS slave.  Each CBUS slave can support
+// 256 registers.  Each demux is allocated 128 registers so set the offset in
+// the middle
+// Copy this define but don't add a base address
+#define DEMUX_1_OFFSET         0x00
+#define DEMUX_2_OFFSET         0x50
+#define DEMUX_3_OFFSET         0xa0
+//========================================================================
+//  STB TOP Registers                   (8'hf0 - 8'hf7)
+//========================================================================
+// bit 22 -- invert fec_error for S2P1
+// bit 21 -- invert fec_data for S2P1
+// bit 20 -- invert fec_sync for S2P1
+// bit 19 -- invert fec_valid for S2P1
+// bit 18 -- invert fec_clk for S2P1
+// bit 17:16 -- fec_s_sel for S2P1  00 - select TS0, 01 -- select TS1, 10 -- select TS2, 11 - reserved
+// Bit 15 -- enable_des_pl_clk
+// Bit 14:13 -- reserved
+// Bit 12:10 -- ts_out_select, 0-TS0, 1-TS1, 2-TS2, 3,4-Reserved, 5-S2P1, 6-S2P0, 7-File
+// bit 9:8 -- des_i_sel 00 -- select demux0 as des input, 01 -- select_demux1, 10 -- select_demux2, 11 - reserved
+// bit 7 -- enable_des_pl
+// bit 6 -- invert fec_error for S2P0
+// bit 5 -- invert fec_data for S2P0
+// bit 4 -- invert fec_sync for S2P0
+// bit 3 -- invert fec_valid for S2P0
+// bit 2 -- invert fec_clk for S2P0
+// bit 1:0 -- fec_s_sel for S2P0  00 - select TS0, 01 -- select TS1, 10 -- select TS2, 11 - reserved
+//#define STB_TOP_CONFIG          (STB_CBUS_BASE + 0xf0) // 0x16f0
+/*----------- bit define -----------*/
+#define INVERT_S2P1_FEC_ERROR       22
+#define INVERT_S2P1_FEC_DATA        21
+#define INVERT_S2P1_FEC_SYNC        20
+#define INVERT_S2P1_FEC_VALID       19
+#define INVERT_S2P1_FEC_CLK         18
+#define S2P1_FEC_SERIAL_SEL         16
+#define ENABLE_DES_PL_CLK           15
+#define TS_OUTPUT_SOURCE            10
+#define DES_INPUT_SEL               8
+#define ENABLE_DES_PL               7
+#define INVERT_S2P0_FEC_ERROR       6
+#define INVERT_S2P0_FEC_DATA        5
+#define INVERT_S2P0_FEC_SYNC        4
+#define INVERT_S2P0_FEC_VALID       3
+#define INVERT_S2P0_FEC_CLK         2
+#define S2P0_FEC_SERIAL_SEL         0
+
+// 15:8 -- TS_package_length_sub_1 (default : 187)
+//  7:0 -- fec_sync_byte (default : 0x47)
+//#define TS_TOP_CONFIG           (STB_CBUS_BASE + 0xf1) // 0x16f1
+/*----------- bit define -----------*/
+#define TS_PACKAGE_LENGTH_SUB_1     8
+#define FEC_DEFAULT_SYNC_BYTE       0
+
+// Bit 23:16 -- file_m2ts_skip_bytes
+// Bit 15:8 -- des_out_dly
+// Bit 7:6 -- transport_scrambling_control_odd // should be 3
+// Bit 5 -- ts_hiu_enable
+// Bit 4:0 -- fec_clk_div
+//#define TS_FILE_CONFIG          (STB_CBUS_BASE + 0xf2) // 0x16f2
+/*----------- bit define -----------*/
+#define FILE_M2TS_SKIP_BYTES        16
+#define DES_OUT_DLY                 8
+#define TRANSPORT_SCRAMBLING_CONTROL_ODD 6
+#define TS_HIU_ENABLE               5
+#define FEC_FILE_CLK_DIV            0
+
+// Bit 13:8 -- des ts pl state   -- Read Only
+// Bit 3:0 PID index to 8 PID to get key-set
+// auto increse after TS_PL_PID_DATA read/write
+//#define TS_PL_PID_INDEX         (STB_CBUS_BASE + 0xf3) // 0x16f3
+/*----------- bit define -----------*/
+#define DES_TS_PL_STATE             8
+
+// Bit 13 -- PID match disble
+// Bit 12:0 -- PID
+//#define TS_PL_PID_DATA          (STB_CBUS_BASE + 0xf4) // 0x16f4
+/*----------- bit define -----------*/
+#define PID_MATCH_DISABLE_HIGH       29
+#define PID_MATCH_HIGH               16
+#define PID_MATCH_DISABLE_LOW        13
+#define PID_MATCH_LOW                0
+
+//#define COMM_DESC_KEY0          (STB_CBUS_BASE + 0xf5) // 0x16f5 // Common descrambler key (key bits[63:32])
+//#define COMM_DESC_KEY1          (STB_CBUS_BASE + 0xf6) // 0x16f6 // Common descrambler key (key bits[31:0])
+//#define COMM_DESC_KEY_RW        (STB_CBUS_BASE + 0xf7) // 0x16f7 // bits[3:0] point to the address to write the key {COMM_DESC_KEY1, COMM_DESC_KEY0}
+// Writing this register writes the key to RAM
+
+//========================================================================
+//  Multiple STB Registers                  (8'h00 - 8'h45)
+//========================================================================
+// STB registers are 8'h0x
+// Bit 15:0 -- version number : 0x0002  (v0.01)
+//#define STB_VERSION             (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x00)  // 0x1600 // read only
+//#define STB_VERSION_2           (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x00)  // 0x1650 // read only
+//#define STB_VERSION_3           (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x00)  // 0x16a0 // read only
+
+//#define STB_TEST_REG            (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x01)  // 0x1601
+//#define STB_TEST_REG_2          (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x01)  // 0x1651
+//#define STB_TEST_REG_3          (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x01)  // 0x16a1
+
+// Bit 15 -- fec_core_select 1 - select descramble output
+// Bit 14:12 -  fec_select 0-TS0, 1-TS1, 2-TS2, 3,4-Reserved, 5-S2P1, 6-S2P0, 7-File
+// Bit 11 -- FEC_CLK
+// Bit 10 -- SOP
+// Bit 9 -- D_VALID
+// Bit 8 -- D_FAIL
+// Bit 7:0 -- D_DATA 7:0
+//#define FEC_INPUT_CONTROL       (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x02)  // 0x1602
+//#define FEC_INPUT_CONTROL_2     (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x02)  // 0x1652
+//#define FEC_INPUT_CONTROL_3     (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x02)  // 0x16a2
+/*----------- bit define -----------*/
+#define FEC_CORE_SEL               15
+#define FEC_SEL                    12
+#define FEC_INPUT_FEC_CLK          11
+#define FEC_INPUT_SOP              10
+#define FEC_INPUT_D_VALID           9
+#define FEC_INPUT_D_FAIL            8
+
+//#define FEC_INPUT_DATA          (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x03)  // 0x1603 // read only
+//#define FEC_INPUT_DATA_2        (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x03)  // 0x1653 // read only
+//#define FEC_INPUT_DATA_3        (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x03)  // 0x16a3 // read only
+
+// bit 31 -- enable_free_clk_fec_data_valid
+// bit 30 -- enable_free_clk_stb_reg
+// bit 29:21 -- reserved
+// bit 20 (bit 4) -- Bypass use recoder path
+// bit 19 (bit 3) -- clear_PID_continuity_counter_valid
+// bit 18 (bit 2) -- Disable Splicing
+// bit 17 (bit 1) -- Insert PES_STRONG_SYNC in Audio PES
+// bit 16 (bit 0) -- Insert PES_STRONG_SYNC in Video PES
+// Bit 15 - do not trust section length
+// Bit 14 - om cmd push even zero
+// Bit 13 - reserved
+// Bit 12 - SUB, OTHER PES interrupt at beginning of PES
+// Bit 11 - discard_av_package -- for ts_recorder use only
+// Bit 10 - ts_recorder_select  0:after PID filter 1:before PID filter
+// Bit 9 - ts_recorder_enable
+// Bit 8 - (table_id == 0xff) means section_end
+// Bit 7 - do not send uncomplete section
+// Bit 6 - do not discard duplicate package
+// Bit 5 - search SOP when trasport_error_indicator
+// Bit 4 - stb demux enable
+// Bit 3 - do not reset state machine on SOP
+// Bit 2 - search SOP when error happened ( when ignore_fail_n_sop, will have this case)
+// Bit 1 - do not use SOP input ( check FEC sync byte instead )
+// Bit 0 - ignore fec_error bit when non sop ( check error on SOP only)
+//#define DEMUX_CONTROL           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x04)  // 0x1604
+//#define DEMUX_CONTROL_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x04)  // 0x1654
+//#define DEMUX_CONTROL_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x04)  // 0x16a4
+/*----------- bit define -----------*/
+#define ENABLE_FREE_CLK_FEC_DATA_VALID          31
+#define ENABLE_FREE_CLK_STB_REG                 30
+#define BYPASS_USE_RECODER_PATH                 20
+#define CLEAR_PID_CONTINUITY_COUNTER_VALID      19
+#define DISABLE_SPLICING                        18
+#define INSERT_AUDIO_PES_STRONG_SYNC            17
+#define INSERT_VIDEO_PES_STRONG_SYNC            16
+#define SECTION_LENGTH_UNTRUSTY                 15
+#define OM_CMD_PUSH_EVEN_ZERO                   14
+#define OTHER_INT_AT_PES_BEGINING               12
+#define DISCARD_AV_PACKAGE                      11
+#define TS_RECORDER_SELECT                      10
+#define TS_RECORDER_ENABLE                      9
+#define SECTION_END_WITH_TABLE_ID               8
+#define SEND_COMPLETE_SECTION_ONLY              7
+#define KEEP_DUPLICATE_PACKAGE                  6
+#define SEACH_SOP_ON_TRANSPORT_ERROR            5
+#define STB_DEMUX_ENABLE                        4
+#define NO_RESET_ON_SOP                         3
+#define SEARCH_SOP_ON_ERROR                     2
+#define NOT_USE_OF_SOP_INPUT                    1
+#define IGNORE_NONSOP_FEC_ERROR                 0
+
+// bit 15:8 demux package length - 1 ( default : 187 )
+// bit 7:0 default is 0x47
+//#define FEC_SYNC_BYTE           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x05)  // 0x1605
+//#define FEC_SYNC_BYTE_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x05)  // 0x1655
+//#define FEC_SYNC_BYTE_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x05)  // 0x16a5
+
+/******************************************************************************************************
+FM Memory Usage :
+0-15 (32 PID filter target) ---- 15:13-PID type 12:0-PID target or force data
+(force data : 1 will mask corespoding bit, 0 will disable this PID filter channel)
+advanced setting -- bit 7:0
+                    bit 7 -- PID bit 12:11 compare result force
+                    bit 6 -- PID bit 10:9 compare result force
+                    bit 5 -- PID bit 8:7 compare result force
+                    bit 4 -- PID bit 6:5 compare result force
+                    bit 3 -- PID bit 4:3 compare result force
+                    bit 2 -- PID bit 2 compare result force
+                    bit 1 -- PID bit 1 compare result force
+                    bit 0 -- PID bit 0 compare result force
+16-255(15x32 Section filter target)
+For first byte : Table_ID
+---- 15-Mask High 4-bits
+     14-Mask Low 4-bits
+     13-disable_PID_check
+     12:8-PIDindex
+     7:0-section target (always EQ)
+For rest of bytes :
+---- 15-Mask 14-EQ/NE 13-disable_PID_check 12:8-PIDindex 7:0-section target (or force data)
+advanced setting -- bit 7:0 force compare result
+******************************************************************************************************/
+/*----------- bit define -----------*/
+#define PID_TYPE                                13
+#define PID_TARGET                              0
+
+#define SECTION_FIRSTBYTE_MASKHIGH              15
+#define SECTION_FIRSTBYTE_MASKLOW               14
+#define SECTION_FIRSTBYTE_DISABLE_PID_CHECK     13
+#define SECTION_FIRSTBYTE_PID_INDEX             8
+#define SECTION_TARGET                          0
+
+#define SECTION_RESTBYTE_MASK                   15
+#define SECTION_RESTBYTE_MASK_EQ                14
+#define SECTION_RESTBYTE_DISABLE_PID_CHECK      13
+#define SECTION_RESTBYTE_PID_INDEX              8
+
+// bit 31:16 -- filter memory write data hi[31:16]
+// bit 15:0 -- filter memory write data low [15:0]
+//#define FM_WR_DATA              (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x06)  // 0x1606
+//#define FM_WR_DATA_2            (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x06)  // 0x1656
+//#define FM_WR_DATA_3            (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x06)  // 0x16a6
+/*----------- bit define -----------*/
+#define FM_WR_DATA_HI                           16
+
+// bit 31:24 -- advanced setting hi
+// bit 23:16 -- advanced setting low
+// bit 15 -- filter memory write data request
+// bit 7:0 -- filter memory write addr
+//#define FM_WR_ADDR              (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x07)  // 0x1607
+//#define FM_WR_ADDR_2            (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x07)  // 0x1657
+//#define FM_WR_ADDR_3            (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x07)  // 0x16a7
+/*----------- bit define -----------*/
+#define FM_ADVANCED_SETTING_HI                  24
+#define FM_ADVANCED_SETTING_LO                  16
+#define FM_WR_DATA_REQUEST                      15
+
+// bit 13:8 demux state  -- read only
+// bit 7:4 -- maxnum section filter compare address
+// bit 3:0 -- maxnum PID filter compare address
+//#define MAX_FM_COMP_ADDR        (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x08)  // 0x1608
+//#define MAX_FM_COMP_ADDR_2      (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x08)  // 0x1658
+//#define MAX_FM_COMP_ADDR_3      (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x08)  // 0x16a8
+/*----------- bit define -----------*/
+#define DEMUX_STATE                             8
+#define MAX_FM_SECTION_FILTER_COMP_ADDR         4
+
+// bit 15 - transport_error_indicator
+// bit 14 - payload_unit_start_indicator
+// bit 13 - transport_priority
+// bit 12:0 - PID
+//#define TS_HEAD_0               (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x09)  // 0x1609
+//#define TS_HEAD_0_2             (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x09)  // 0x1659
+//#define TS_HEAD_0_3             (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x09)  // 0x16a9
+/*----------- bit define -----------*/
+#define TRANSPORT_ERROR_INDICATOR               15
+#define PAYLOAD_UNIT_START_INDICATOR            14
+#define TRANSPORT_PRIORITY                      13
+
+// bit 7:6 transport_scrambling_control
+// bit 5:4 adaptation_field_control
+// bit 3:0 continuity_counter
+//#define TS_HEAD_1               (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x0a)  // 0x160a
+//#define TS_HEAD_1_2             (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x0a)  // 0x165a
+//#define TS_HEAD_1_3             (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x0a)  // 0x16aa
+/*----------- bit define -----------*/
+#define TRANSPORT_SCRAMBLING_CONTROL            6
+#define ADAPTATION_FIELD_CONTROL                4
+
+// bit 15:12 -- om_cmd_count (read only)
+// bit  11:9 -- overflow_count // bit  11:9 -- om_cmd_wr_ptr (read only)
+// bit   8:6 -- om_overwrite_count // bit   8:6 -- om_cmd_rd_ptr (read only)
+// bit   5:3 -- type_stb_om_w_rd (read only)
+// bit     2 -- unit_start_stb_om_w_rd (read only)
+// bit     1 -- om_cmd_overflow (read only)
+// bit     0 -- om_cmd_pending (read)
+// bit     0 -- om_cmd_read_finished (write)
+//#define OM_CMD_STATUS           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x0b)  // 0x160b
+//#define OM_CMD_STATUS_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x0b)  // 0x165b
+//#define OM_CMD_STATUS_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x0b)  // 0x16ab
+/*----------- bit define -----------*/
+#define OM_CMD_COUNT                            12
+#define OM_OVERFLOW_COUNT                       9
+#define OM_OVERWRITE_COUNT                      6
+#define TYPE_STB_OM_W_RD                        3
+#define UNIT_START_STB_OM_W_RD                  2
+#define OM_CMD_OVERFLOW                         1
+
+// bit 15:9 -- count_stb_om_w_rd  (read only)
+// bit 8:0 -- start_stb_om_wa_rd (read only)
+//#define OM_CMD_DATA             (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x0c)  // 0x160c
+//#define OM_CMD_DATA_2           (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x0c)  // 0x165c
+//#define OM_CMD_DATA_3           (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x0c)  // 0x16ac
+/*----------- bit define -----------*/
+#define COUNT_STB_OM_W_RD                       9
+
+// bit 11:0 -- offset for section data
+//#define OM_CMD_DATA2            (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x0d)  // 0x160d
+//#define OM_CMD_DATA2_2          (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x0d)  // 0x165d
+//#define OM_CMD_DATA2_3          (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x0d)  // 0x16ad
+
+// bit 31:16 -- base address for section buffer group 0 (*0x400 to get real address)
+// bit 15:0 -- base address for section buffer group 1 (*0x400 to get real address)
+//#define SEC_BUFF_01_START       (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x0e)  // 0x160e
+//#define SEC_BUFF_01_START_2     (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x0e)  // 0x165e
+//#define SEC_BUFF_01_START_3     (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x0e)  // 0x16ae
+/*----------- bit define -----------*/
+#define SEC_BUFF_0_BASE_ADDR                    16
+
+// bit 31:16 -- base address for section buffer group 2 (*0x400 to get real address)
+// bit 15:0 -- base address for section buffer group 3 (*0x400 to get real address)
+//#define SEC_BUFF_23_START       (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x0f)  // 0x160f
+//#define SEC_BUFF_23_START_2     (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x0f)  // 0x165f
+//#define SEC_BUFF_23_START_3     (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x0f)  // 0x16af
+/*----------- bit define -----------*/
+#define SEC_BUFF_2_BASE_ADDR                    16
+
+// bit 15:12 -- section buffer size for group 3
+// bit 11:8 -- section buffer size for group 2
+// bit 7:4 -- section buffer size for group 1
+// bit 3:0 -- section buffer size for group 0 (bit used,  for example, 10 means 1K)
+//#define SEC_BUFF_SIZE           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x10)  // 0x1610
+//#define SEC_BUFF_SIZE_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x10)  // 0x1660
+//#define SEC_BUFF_SIZE_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x10)  // 0x16b0
+/*----------- bit define -----------*/
+#define SEC_BUFF_3_SIZE                        12
+#define SEC_BUFF_2_SIZE                         8
+#define SEC_BUFF_1_SIZE                         4
+
+// section buffer busy status for buff 31:0 ( Read Only )
+//#define SEC_BUFF_BUSY           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x11)  // 0x1611
+//#define SEC_BUFF_BUSY_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x11)  // 0x1661
+//#define SEC_BUFF_BUSY_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x11)  // 0x16b1
+
+// section buffer write status for buff 31:0 -- Read
+// clear buffer status ( buff READY and BUSY ) -- write
+//#define SEC_BUFF_READY          (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x12)  // 0x1612
+//#define SEC_BUFF_READY_2        (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x12)  // 0x1662
+//#define SEC_BUFF_READY_3        (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x12)  // 0x16b2
+
+// bit 15 -- section_reset_busy (Read Only)
+// bit 14 -- output_section_buffer_valid
+// bit 12:8 -- SEC_BUFFER_NUMBER for the INDEX buffer  Read_Only
+// bit 4:0 -- SEC_BUFFER_INDEX   RW
+//#define SEC_BUFF_NUMBER         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x13)  // 0x1613
+//#define SEC_BUFF_NUMBER_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x13)  // 0x1663
+//#define SEC_BUFF_NUMBER_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x13)  // 0x16b3
+/*----------- bit define -----------*/
+#define SECTION_RESET_BUSY                      15
+#define OUTPUT_SECTION_BUFFER_VALID             14
+#define INDEXED_SEC_BUFF_NUMBER                 8
+
+// bit 9:5 -- BYPASS PID number
+// bit 4:0 -- PCR PID number
+//#define ASSIGN_PID_NUMBER       (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x14)  // 0x1614
+//#define ASSIGN_PID_NUMBER_2     (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x14)  // 0x1664
+//#define ASSIGN_PID_NUMBER_3     (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x14)  // 0x16b4
+/*----------- bit define -----------*/
+#define BYPASS_PID_NUMBER                       5
+
+// bit 15:0 -- stream_id filter bit enable
+// bit 7:0 -- stream_id filter target
+//#define VIDEO_STREAM_ID         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x15)  // 0x1615
+//#define VIDEO_STREAM_ID_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x15)  // 0x1665
+//#define VIDEO_STREAM_ID_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x15)  // 0x16b5
+
+//#define AUDIO_STREAM_ID         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x16)  // 0x1616
+//#define AUDIO_STREAM_ID_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x16)  // 0x1666
+//#define AUDIO_STREAM_ID_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x16)  // 0x16b6
+
+//#define SUB_STREAM_ID           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x17)  // 0x1617
+//#define SUB_STREAM_ID_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x17)  // 0x1667
+//#define SUB_STREAM_ID_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x17)  // 0x16b7
+
+//#define OTHER_STREAM_ID         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x18)  // 0x1618
+//#define OTHER_STREAM_ID_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x18)  // 0x1668
+//#define OTHER_STREAM_ID_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x18)  // 0x16b8
+
+// bit 12 -- PCR_EN
+// bit 11:0 -- PCR90K_DIV
+//#define PCR90K_CTL              (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x19)  // 0x1619
+//#define PCR90K_CTL_2            (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x19)  // 0x1669
+//#define PCR90K_CTL_3            (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x19)  // 0x16b9
+/*----------- bit define -----------*/
+#define PCR_EN                     12
+
+// bit 15:0 -- PCR[31:0] R/W
+//#define PCR_DEMUX               (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x1a)  // 0x161a
+//#define PCR_DEMUX_2             (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x1a)  // 0x166a
+//#define PCR_DEMUX_3             (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x1a)  // 0x16ba
+
+// bit 15:0 -- VPTS[31:0] R/W
+//#define VIDEO_PTS_DEMUX         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x1b)  // 0x161b
+//#define VIDEO_PTS_DEMUX_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x1b)  // 0x166b
+//#define VIDEO_PTS_DEMUX_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x1b)  // 0x16bb
+
+// bit 15:0 -- VDTS[31:0] R/W
+//#define VIDEO_DTS_DEMUX         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x1c)  // 0x161c
+//#define VIDEO_DTS_DEMUX_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x1c)  // 0x166c
+//#define VIDEO_DTS_DEMUX_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x1c)  // 0x16bc
+
+// bit 15:0 -- APTS[31:0] R/W
+//#define AUDIO_PTS_DEMUX         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x1d)  // 0x161d
+//#define AUDIO_PTS_DEMUX_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x1d)  // 0x166d
+//#define AUDIO_PTS_DEMUX_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x1d)  // 0x16bd
+
+// bit 15:0 -- SPTS[31:0] R/W
+//#define SUB_PTS_DEMUX           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x1e)  // 0x161e
+//#define SUB_PTS_DEMUX_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x1e)  // 0x166e
+//#define SUB_PTS_DEMUX_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x1e)  // 0x16be
+
+// read -- status, write 1 clear status
+// bit 15 -- SUB_PTS[32]
+// bit 14 -- AUDIO_PTS[32]
+// bit 13 -- VIDEO_DTS[32]
+// bit 12 -- VIDEO_PTS[32]
+// bit 3 -- sub_pts_ready
+// bit 2 -- audio_pts_ready
+// bit 1 -- video_dts_ready
+// bit 0 -- video_pts_ready
+//#define STB_PTS_DTS_STATUS      (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x1f)  // 0x161f
+//#define STB_PTS_DTS_STATUS_2    (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x1f)  // 0x166f
+//#define STB_PTS_DTS_STATUS_3    (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x1f)  // 0x16bf
+/*----------- bit define -----------*/
+#define SUB_PTS_BIT32              15
+#define AUDIO_PTS_BIT32            14
+#define VIDEO_DTS_BIT32            13
+#define VIDEO_PTS_BIT32            12
+#define SUB_PTS_READY              3
+#define AUDIO_PTS_READY            2
+#define VIDEO_DTS_READY            1
+#define VIDEO_PTS_READY            0
+
+// bit 3:0 --
+//  0 -- adaptation_field_length[7:0], adaption_field_byte_1[7:0]
+//  1 -- stream_id[7:0], pes_header_bytes_left[7:0]
+//  2 -- pes_package_bytes_left[15:0]
+//  3 -- pes_ctr_byte[7:0], pes_flag_byte[7:0]
+//#define STB_DEBUG_INDEX         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x20)  // 0x1620
+//#define STB_DEBUG_INDEX_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x20)  // 0x1670
+//#define STB_DEBUG_INDEX_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x20)  // 0x16c0
+
+// read only
+//#define STB_DEBUG_DATA_OUT      (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x21)  // 0x1621
+//#define STB_DEBUG_DATA_OUT_2    (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x21)  // 0x1671
+//#define STB_DEBUG_DATA_OUT_3    (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x21)  // 0x16c1
+
+// default : 0x807f
+// bit 15:9  -- MAX OM DMA COUNT  (default: 0x40)
+// bit 8:0   -- LAST ADDR OF OM ADDR (default: 127)
+#define STB_OM_CTL              (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x22)  // 0x1622
+#define STB_OM_CTL_2            (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x22)  // 0x1672
+#define STB_OM_CTL_3            (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x22)  // 0x16c2
+/*----------- bit define -----------*/
+#define MAX_OM_DMA_COUNT           9
+#define LAST_OM_ADDR               0
+
+// 15:0  WRITE 1 CLEAR to clear interrupt source
+// 9 -- splicing_point
+// 8 -- other_PES_int
+// 7 -- sub_PES_int
+// 6 -- discontinuity
+// 5 -- duplicated_pack_found
+// 4 -- New PDTS ready
+// 3 -- om_cmd_buffer ready for access
+// 2 -- section buffer ready
+// 1 -- transport_error_indicator
+// 0 -- TS ERROR PIN
+//#define STB_INT_STATUS          (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x23)  // 0x1623
+//#define STB_INT_STATUS_2        (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x23)  // 0x1673
+//#define STB_INT_STATUS_3        (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x23)  // 0x16c3
+/*----------- bit define -----------*/
+#define PCR_READY                  11
+#define AUDIO_SPLICING_POINT       10
+#define VIDEO_SPLICING_POINT       9
+#define OTHER_PES_READY            8
+#define SUB_PES_READY              7
+#define DIS_CONTINUITY_PACKET      6
+#define DUPLICATED_PACKET          5
+#define NEW_PDTS_READY             4
+#define OM_CMD_READ_PENDING        3
+#define SECTION_BUFFER_READY       2
+#define TS_ERROR_PACKAGE           1
+#define TS_ERROR_PIN               0
+
+// When Bit 31 - 1 write will indicate all type use sepertate endian (Write Only)
+// When Bit 31 - 0 write will indicate all type else use Bit 8:6
+// Bit 23:21 - demux om write endian control for OTHER_PES_PACKET
+// Bit 20:18 - demux om write endian control for SCR_ONLY_PACKET
+// Bit 17:15 - demux om write endian control for SUB_PACKET
+// Bit 14:12 - demux om write endian control for AUDIO_PACKET
+// Bit 11:9  - demux om write endian control for VIDEO_PACKET
+// Bit 8:6 - demux om write endian control for else
+// Bit 5:3 - demux om write endian control for bypass
+// Bit 2:0 - demux om write endian control for section
+//#define DEMUX_ENDIAN            (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x24)  // 0x1624
+//#define DEMUX_ENDIAN_2          (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x24)  // 0x1674
+//#define DEMUX_ENDIAN_3          (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x24)  // 0x16c4
+/*----------- bit define -----------*/
+#define SEPERATE_ENDIAN            31
+#define OTHER_PES_ENDIAN           21
+#define SCR_ENDIAN                 18
+#define SUB_ENDIAN                 15
+#define AUDIO_ENDIAN               12
+#define VIDEO_ENDIAN               9
+#define OTHER_ENDIAN               6
+#define BYPASS_ENDIAN              3
+#define SECTION_ENDIAN             0
+
+// Bit 7 -- use hi_bsf interface
+//#define TS_HIU_CTL              (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x25)  // 0x1625
+//#define TS_HIU_CTL_2            (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x25)  // 0x1675
+//#define TS_HIU_CTL_3            (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x25)  // 0x16c5
+/*----------- bit define -----------*/
+#define LAST_BURST_THRESHOLD       8
+#define USE_HI_BSF_INTERFACE       7
+
+// bit 15:0 -- base address for section buffer start (*0x10000 to get real base)
+//#define SEC_BUFF_BASE           (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x26)  // 0x1626
+//#define SEC_BUFF_BASE_2         (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x26)  // 0x1676
+//#define SEC_BUFF_BASE_3         (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x26)  // 0x16c6
+
+// bit 11 -- mask bit for OTHER_PES_AHB_DMA_EN
+// bit 10 -- mask bit for SUB_AHB_DMA_EN
+// bit 9 -- mask bit for BYPASS_AHB_DMA_EN
+// bit 8 -- mask bit for SECTION_AHB_DMA_EN
+// bit 7 -- mask bit for recoder stream
+// bit 6:0 -- mask bit for each type
+//#define DEMUX_MEM_REQ_EN        (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x27)  // 0x1627
+//#define DEMUX_MEM_REQ_EN_2      (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x27)  // 0x1677
+//#define DEMUX_MEM_REQ_EN_3      (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x27)  // 0x16c7
+/*----------- bit define -----------*/
+#define OTHER_PES_AHB_DMA_EN       11
+#define SUB_AHB_DMA_EN             10
+#define BYPASS_AHB_DMA_EN          9
+#define SECTION_AHB_DMA_EN         8
+#define RECORDER_STREAM            7
+#define OTHER_PES_PACKET           6
+#define SCR_ONLY_PACKET            5
+#define BYPASS_PACKET              4
+#define SECTION_PACKET             3
+#define SUB_PACKET                 2
+#define AUDIO_PACKET               1
+#define VIDEO_PACKET               0
+
+// bit 31:0 -- vb_wr_ptr for video PDTS
+//#define VIDEO_PDTS_WR_PTR       (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x28)  // 0x1628
+//#define VIDEO_PDTS_WR_PTR_2     (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x28)  // 0x1678
+//#define VIDEO_PDTS_WR_PTR_3     (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x28)  // 0x16c8
+
+// bit 31:0 -- ab_wr_ptr for audio PDTS
+//#define AUDIO_PDTS_WR_PTR       (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x29)  // 0x1629
+//#define AUDIO_PDTS_WR_PTR_2     (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x29)  // 0x1679
+//#define AUDIO_PDTS_WR_PTR_3     (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x29)  // 0x16c9
+
+// bit 20:0 -- SB_WRITE_PTR (sb_wr_ptr << 3 == byte write position)
+//#define SUB_WR_PTR              (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x2a)  // 0x162a
+//#define SUB_WR_PTR_2            (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x2a)  // 0x167a
+//#define SUB_WR_PTR_3            (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x2a)  // 0x16ca
+
+// bit 19:0 -- SB_START (sb_start << 12 == byte address);
+//#define SB_START                (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x2b)  // 0x162b
+//#define SB_START_2              (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x2b)  // 0x167b
+//#define SB_START_3              (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x2b)  // 0x16cb
+
+// bit 20:0 -- SB_SIZE (sb_size << 3 == byte size, 16M maximun)
+//#define SB_LAST_ADDR            (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x2c)  // 0x162c
+//#define SB_LAST_ADDR_2          (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x2c)  // 0x167c
+//#define SB_LAST_ADDR_3          (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x2c)  // 0x16cc
+
+// bit 31:0 -- sb_wr_ptr for sub PES
+//#define SB_PES_WRITE_PTR        (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x2d)  // 0x162d
+//#define SB_PES_WRITE_PTR_2      (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x2d)  // 0x167d
+//#define SB_PES_WRITE_PTR_3      (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x2d)  // 0x16cd
+
+// bit 31:16 -- ob_wr_ptr for other PES
+// bit 20:0 -- OB_WRITE_PTR (ob_wr_ptr << 3 == byte write position)
+//#define OTHER_WR_PTR            (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x2e)  // 0x162e
+//#define OTHER_WR_PTR_2          (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x2e)  // 0x167e
+//#define OTHER_WR_PTR_3          (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x2e)  // 0x16ce
+
+// bit 19:0 -- OB_START (ob_start << 12 == byte address);
+//#define OB_START                (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x2f)  // 0x162f
+//#define OB_START_2              (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x2f)  // 0x167f
+//#define OB_START_3              (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x2f)  // 0x16cf
+
+// bit 20:0 -- OB_SIZE (ob_size << 3 == byte size, 16M maximun)
+//#define OB_LAST_ADDR            (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x30)  // 0x1630
+//#define OB_LAST_ADDR_2          (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x30)  // 0x1680
+//#define OB_LAST_ADDR_3          (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x30)  // 0x16d0
+
+// bit 31:0 -- ob_wr_ptr for sub PES
+//#define OB_PES_WRITE_PTR        (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x31)  // 0x1631
+//#define OB_PES_WRITE_PTR_2      (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x31)  // 0x1681
+//#define OB_PES_WRITE_PTR_3      (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x31)  // 0x16d1
+
+// 15:0  DEMUX interrupt MASK
+// 11 -- PCR_READY
+// 10 -- audio_splicing_point
+// 9 -- video_splicing_point
+// 8 -- other_PES_int
+// 7 -- sub_PES_int
+// 6 -- discontinuity
+// 5 -- duplicated_pack_found
+// 4 -- New PDTS ready
+// 3 -- om_cmd_buffer ready for access
+// 2 -- section buffer ready
+// 1 -- transport_error_indicator
+// 0 -- TS ERROR PIN
+//#define STB_INT_MASK            (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x32)  // 0x1632
+//#define STB_INT_MASK_2          (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x32)  // 0x1682
+//#define STB_INT_MASK_3          (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x32)  // 0x16d2
+
+// 31:16 VIDEO PID filter data
+//15 -- splicing VIDEO PID change enable
+//14:10 -- VIDEO PID FILTER ADDRESS
+// 9 -- PES splicing active (Read Only)
+// 8 -- splicing active (Read Only)
+// 7:0  splicing countdown (Read Only)
+//#define VIDEO_SPLICING_CTL      (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x33)  // 0x1633
+//#define VIDEO_SPLICING_CTL_2    (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x33)  // 0x1683
+//#define VIDEO_SPLICING_CTL_3    (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x33)  // 0x16d3
+/*----------- bit define -----------*/
+#define VIDEO_PID_FILTER_DATA      16
+#define VIDEO_SPLICING_PID_CHANGE_ENABLE       15
+#define VIDEO_PID_FILTER_ADDRESS   10
+#define VIDEO_PES_SPLICING_ACTIVE  9
+#define VIDEO_SPLICING_ACTIVE      8
+
+
+// 31:16 AUDIO PID filter data
+//15 -- splicing AUDIO PID change enable
+//14:10 -- AUDIO PID FILTER ADDRESS
+// 9 -- PES splicing active (Read Only)
+// 8 -- splicing active (Read Only)
+// 7:0  splicing countdown (Read Only)
+//#define AUDIO_SPLICING_CTL      (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x34)  // 0x1634
+//#define AUDIO_SPLICING_CTL_2    (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x34)  // 0x1684
+//#define AUDIO_SPLICING_CTL_3    (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x34)  // 0x16d4
+/*----------- bit define -----------*/
+#define AUDIO_PID_FILTER_DATA      16
+#define AUDIO_SPLICING_PID_CHANGE_ENABLE       15
+#define AUDIO_PID_FILTER_ADDRESS   10
+#define AUDIO_PES_SPLICING_ACTIVE  9
+#define AUDIO_SPLICING_ACTIVE      8
+
+// 23:16 M2TS_SKIP_BYTES
+// 15:8 LAST TS PACKAGE BYTE COUNT (Read Only)
+// 7:0  PACKAGE BYTE COUNT (Read Only)
+//#define TS_PACKAGE_BYTE_COUNT   (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x35)  // 0x1635
+//#define TS_PACKAGE_BYTE_COUNT_2 (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x35)  // 0x1685
+//#define TS_PACKAGE_BYTE_COUNT_3 (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x35)  // 0x16d5
+/*----------- bit define -----------*/
+#define M2TS_SKIP_BYTES            16
+#define LAST_TS_PACKAGE_BYTE_COUNT 8
+
+// 15:0 2 bytes strong sync add to PES
+//#define PES_STRONG_SYNC         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x36)  // 0x1636
+//#define PES_STRONG_SYNC_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x36)  // 0x1686
+//#define PES_STRONG_SYNC_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x36)  // 0x16d6
+
+// bit 15 -- stb_om_ren
+// bit 14:11 -- reserved
+// bit  10:0 -- OM_DATA_RD_ADDR
+//#define OM_DATA_RD_ADDR         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x37)  // 0x1637
+//#define OM_DATA_RD_ADDR_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x37)  // 0x1687
+//#define OM_DATA_RD_ADDR_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x37)  // 0x16d7
+/*----------- bit define -----------*/
+#define STB_OM_REN                 15
+
+// bit 15:0 -- OM_DATA_RD
+//#define OM_DATA_RD              (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x38)  // 0x1638
+//#define OM_DATA_RD_2            (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x38)  // 0x1688
+//#define OM_DATA_RD_3            (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x38)  // 0x16d8
+
+// AUTO STOP SETTING for 32 channels
+// 4-bits per channel
+// when write
+// bit 3 -- set section active
+// bit 2:0 -- auto stop after count (0 means never stop)
+// when read
+// bit 3 -- current active status (1 - active, 0 - stopped )
+// bit 2:0 -- count down to auto stop
+// section 31:24
+//#define SECTION_AUTO_STOP_3     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x39)  // 0x1639
+//#define SECTION_AUTO_STOP_3_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x39)  // 0x1689
+//#define SECTION_AUTO_STOP_3_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x39)  // 0x16d9
+// section 23:16
+//#define SECTION_AUTO_STOP_2     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x3a)  // 0x163a
+//#define SECTION_AUTO_STOP_2_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x3a)  // 0x168a
+//#define SECTION_AUTO_STOP_2_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x3a)  // 0x16da
+// section 15:8
+//#define SECTION_AUTO_STOP_1     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x3b)  // 0x163b
+//#define SECTION_AUTO_STOP_1_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x3b)  // 0x168b
+//#define SECTION_AUTO_STOP_1_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x3b)  // 0x16db
+// section 7:0
+//#define SECTION_AUTO_STOP_0     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x3c)  // 0x163c
+//#define SECTION_AUTO_STOP_0_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x3c)  // 0x168c
+//#define SECTION_AUTO_STOP_0_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x3c)  // 0x16dc
+
+// bit 31:0 reset channel status - each bit reset each channel
+// read -- 32 channel status
+//#define DEMUX_CHANNEL_RESET     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x3d)  // 0x163d
+//#define DEMUX_CHANNEL_RESET_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x3d)  // 0x168d
+//#define DEMUX_CHANNEL_RESET_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x3d)  // 0x16dd
+
+//#define DEMUX_SCRAMBLING_STATE     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x3e)  // 0x163e
+//#define DEMUX_SCRAMBLING_STATE_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x3e)  // 0x168e
+//#define DEMUX_SCRAMBLING_STATE_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x3e)  // 0x16de
+
+//#define DEMUX_CHANNEL_ACTIVITY     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x3f)  // 0x163f
+//#define DEMUX_CHANNEL_ACTIVITY_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x3f)  // 0x168f
+//#define DEMUX_CHANNEL_ACTIVITY_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x3f)  // 0x16df
+
+// bit 4 -- video_stamp_use_dts
+// bit 3 -- audio_stamp_sync_1_en
+// bit 2 -- audio_stamp_insert_en
+// bit 1 -- video_stamp_sync_1_en
+// bit 0 -- video_stamp_insert_en
+//#define DEMUX_STAMP_CTL         (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x40)  // 0x1640
+//#define DEMUX_STAMP_CTL_2       (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x40)  // 0x1690
+//#define DEMUX_STAMP_CTL_3       (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x40)  // 0x16e0
+
+//#define DEMUX_VIDEO_STAMP_SYNC_0   (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x41)  // 0x1641
+//#define DEMUX_VIDEO_STAMP_SYNC_0_2 (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x41)  // 0x1691
+//#define DEMUX_VIDEO_STAMP_SYNC_0_3 (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x41)  // 0x16e1
+
+//#define DEMUX_VIDEO_STAMP_SYNC_1   (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x42)  // 0x1642
+//#define DEMUX_VIDEO_STAMP_SYNC_1_2 (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x42)  // 0x1692
+//#define DEMUX_VIDEO_STAMP_SYNC_1_3 (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x42)  // 0x16e2
+
+//#define DEMUX_AUDIO_STAMP_SYNC_0   (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x43)  // 0x1643
+//#define DEMUX_AUDIO_STAMP_SYNC_0_2 (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x43)  // 0x1693
+//#define DEMUX_AUDIO_STAMP_SYNC_0_3 (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x43)  // 0x16e3
+
+//#define DEMUX_AUDIO_STAMP_SYNC_1   (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x44)  // 0x1644
+//#define DEMUX_AUDIO_STAMP_SYNC_1_2 (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x44)  // 0x1694
+//#define DEMUX_AUDIO_STAMP_SYNC_1_3 (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x44)  // 0x16e4
+
+// Write : Bit[4:0] secter filter number for reset
+// Read  : select according to output_section_buffer_valid :
+//         per bit per section buffer valid status
+//         or section_buffer_ignore
+//#define DEMUX_SECTION_RESET     (STB_CBUS_BASE + DEMUX_1_OFFSET + 0x45)  // 0x1645
+//#define DEMUX_SECTION_RESET_2   (STB_CBUS_BASE + DEMUX_2_OFFSET + 0x45)  // 0x1695
+//#define DEMUX_SECTION_RESET_3   (STB_CBUS_BASE + DEMUX_3_OFFSET + 0x45)  // 0x16e5
+
+//========================================================================
+//  STB Registers End
+//========================================================================
+// ----------------------------
+// ASYNC FIFO (4)
+// ----------------------------
+//#define ASYNC_FIFO_REG0                            0x2310
+//#define ASYNC_FIFO_REG1                            0x2311
+    #define ASYNC_FIFO_FLUSH_STATUS     31
+    #define ASYNC_FIFO_ERR              30
+    #define ASYNC_FIFO_FIFO_EMPTY       29
+    #define ASYNC_FIFO_TO_HIU           24
+    #define ASYNC_FIFO_FLUSH            23
+    #define ASYNC_FIFO_RESET            22
+    #define ASYNC_FIFO_WRAP_EN          21
+    #define ASYNC_FIFO_FLUSH_EN         20
+    #define ASYNC_FIFO_RESIDUAL_MSB     19
+    #define ASYNC_FIFO_RESIDUAL_LSB     15
+    #define ASYNC_FIFO_FLUSH_CNT_MSB    14
+    #define ASYNC_FIFO_FLUSH_CNT_LSB    0
+//#define ASYNC_FIFO_REG2                            0x2312
+    #define ASYNC_FIFO_FIFO_FULL        26
+    #define ASYNC_FIFO_FILL_STATUS      25
+    #define ASYNC_FIFO_SOURCE_MSB       24
+    #define ASYNC_FIFO_SOURCE_LSB       23
+    #define ASYNC_FIFO_ENDIAN_MSB       22
+    #define ASYNC_FIFO_ENDIAN_LSB       21
+    #define ASYNC_FIFO_FILL_EN          20
+    #define ASYNC_FIFO_FILL_CNT_MSB     19
+    #define ASYNC_FIFO_FILL_CNT_LSB     0
+//#define ASYNC_FIFO_REG3                            0x2313
+    #define ASYNC_FLUSH_SIZE_IRQ_MSB    15
+    #define ASYNC_FLUSH_SIZE_IRQ_LSB    0
+// ----------------------------
+// ASYNC FIFO (4)
+// ----------------------------
+//#define ASYNC_FIFO2_REG0                           0x2314
+//#define ASYNC_FIFO2_REG1                           0x2315
+//#define ASYNC_FIFO2_REG2                           0x2316
+//#define ASYNC_FIFO2_REG3                           0x2317
+
+#define RESET_DEMUXSTB      (1<<1)
+
+#endif // C_STB_DEFINE_H
+
diff --git a/arch/arm/mach-mesong9tv/include/mach/canvas.h b/arch/arm/mach-mesong9tv/include/mach/canvas.h
new file mode 100644
index 000000000000..c98deacfe504
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/canvas.h
@@ -0,0 +1,63 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/canvas.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_CANVAS_H
+#define __MACH_MESONG9TV_CANVAS_H
+
+#define CANVAS_ADDR_LMASK		0x1fffffff
+#define CANVAS_WIDTH_LMASK		0x7
+#define CANVAS_WIDTH_LWID		3
+#define CANVAS_WIDTH_LBIT		29
+
+#define CANVAS_WIDTH_HMASK		0x1ff
+#define CANVAS_WIDTH_HBIT		0
+#define CANVAS_HEIGHT_MASK		0x1fff
+#define CANVAS_HEIGHT_BIT		9
+#define CANVAS_YWRAP			(1<<23)
+#define CANVAS_XWRAP			(1<<22)
+#define CANVAS_ADDR_NOWRAP		0x00
+#define CANVAS_ADDR_WRAPX		0x01
+#define CANVAS_ADDR_WRAPY		0x02
+#define CANVAS_BLKMODE_MASK		3
+#define CANVAS_BLKMODE_BIT		24
+#define CANVAS_BLKMODE_LINEAR		0x00
+#define CANVAS_BLKMODE_32X32		0x01
+#define CANVAS_BLKMODE_64X32		0x02
+
+#define CANVAS_LUT_INDEX_BIT		0
+#define CANVAS_LUT_INDEX_MASK		0x7
+#define CANVAS_LUT_WR_EN		(0x2 << 8)
+#define CANVAS_LUT_RD_EN		(0x1 << 8)
+
+#define MMC_PHY_CTRL			0x1380
+
+/**************** logo relative part ****************/
+#define ASSIST_MBOX1_CLR_REG		VDEC_ASSIST_MBOX1_CLR_REG
+#define ASSIST_MBOX1_MASK		VDEC_ASSIST_MBOX1_MASK
+#define RESET_PSCALE			(1<<4)
+#define RESET_IQIDCT			(1<<2)
+#define RESET_MC			(1<<3)
+#define MEM_BUFCTRL_MANUAL		(1<<1)
+#define MEM_BUFCTRL_INIT		(1<<0)
+#define MEM_LEVEL_CNT_BIT		18
+#define MEM_FIFO_CNT_BIT		16
+#define MEM_FILL_ON_LEVEL		(1<<10)
+#define MEM_CTRL_EMPTY_EN		(1<<2)
+#define MEM_CTRL_FILL_EN		(1<<1)
+#define MEM_CTRL_INIT			(1<<0)
+#define CANVAS_WRITE(x...)              WRITE_MMC_REG(x)
+#define CANVAS_READ(x...)               READ_MMC_REG(x)
+
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/clock.h b/arch/arm/mach-mesong9tv/include/mach/clock.h
new file mode 100644
index 000000000000..015718181378
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/clock.h
@@ -0,0 +1,157 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/clock.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_CLOCK_H
+#define __MACH_MESONG9TV_CLOCK_H
+
+#include <linux/types.h>
+#include <linux/list.h>
+
+struct clk_ops {
+	//return: 0:success  1:fail
+	int (*clk_ratechange_before)(unsigned long newrate,void* privdata);
+	//return: 0:success  1:fail
+	int (*clk_ratechange_after)(unsigned long newrate,void* privdata,int failed);
+	//return: 0:success  1:fail
+	int (*clk_enable_before)(void* privdata);
+	//return: 0:success  1:fail
+	int (*clk_enable_after)(void* privdata,int failed);
+	//return: 0:success  1:fail
+	int (*clk_disable_before)(void* privdata);
+	//return: 0:success  1:fail.
+	int (*clk_disable_after)(void* privdata,int failed);
+	void* privdata;
+	struct clk_ops* next;
+};
+
+struct clk {
+	#define CLK_RATE_UNKNOWN (-1)
+	unsigned long rate;///0xffffffff(-1) means unknown
+
+	unsigned long(*get_rate)(struct clk *);
+	int (*set_rate)(struct clk *, unsigned long);
+	long (*round_rate)(struct clk *, unsigned long);
+	int (*enable)(struct clk *);///disable my self
+	int (*disable)(struct clk *);///enable my self
+	bool (*status)(struct clk *);
+	int (*on_parent_changed)(struct clk *clk, int rate);
+	int (*need_parent_changed)(struct clk *clk, int rate);
+	int msr;
+	unsigned long msr_mul;
+	unsigned long msr_div;
+	unsigned long min;
+	unsigned long max;
+
+	unsigned clk_gate_reg_adr;
+	unsigned clk_gate_reg_mask;
+
+	int  open_irq;
+
+	struct list_head child;
+	struct list_head sibling;
+	struct clk * parent;
+	struct clk_ops* clk_ops;
+	void * priv;
+
+	unsigned long old_rate;//Just for store old cpu freq for set_sys_pll()
+};
+
+int  clk_register(struct clk *clk, const char *parent);
+void clk_unregister(struct clk *clk);
+int  clk_measure(char index );
+
+//return: 0:disabed. 1:enabled. 2:unknown
+int  clk_get_status(struct clk * clk);
+
+//return: 0:success  1: fail
+int clk_ops_register(struct clk *clk, struct clk_ops *ops);
+//return: 0:success  1: fail
+int clk_ops_unregister(struct clk *clk, struct clk_ops *ops);
+
+
+//M8 all pll controler use bit 29 as reset bit
+#define M8_PLL_RESET(pll) aml_set_reg32_mask(pll,(1<<29));
+
+//wait for pll lock
+//must wait first (100us+) then polling lock bit to check
+#define M8_PLL_WAIT_FOR_LOCK(pll) \
+	do { \
+		udelay(1000); \
+	} while((aml_read_reg32(pll)&0x80000000)==0);
+
+// @todo: G9TV PLL Definition
+#define G9TV_PLL_CNTL_CST2 (0x814d3928)
+#define G9TV_PLL_CNTL_CST3 (0x6b425012)
+#define G9TV_PLL_CNTL_CST4 (0x110)
+
+#define G9TV_PLL_CNTL_CST12 (0x04294000)
+#define G9TV_PLL_CNTL_CST13 (0x026b4250)
+#define G9TV_PLL_CNTL_CST14 (0x06278410)
+#define G9TV_PLL_CNTL_CST15 (0x1e1)
+#define G9TV_PLL_CNTL_CST16 (0xacac10ac)
+#define G9TV_PLL_CNTL_CST17 (0x0108e000)
+
+
+//DDR PLL
+#define G9TV_DDR_PLL_CNTL_2 (G9TV_PLL_CNTL_CST2)
+#define G9TV_DDR_PLL_CNTL_3 (G9TV_PLL_CNTL_CST3)
+#define G9TV_DDR_PLL_CNTL_4 (G9TV_PLL_CNTL_CST4)
+
+//SYS PLL
+/* ROMBOOT Ref
+#define G9TV_SYS_PLL_CNTL_2 (0x69c8c000)
+#define G9TV_SYS_PLL_CNTL_3 (0x0a57c221)
+#define G9TV_SYS_PLL_CNTL_4 (0x0001d407)
+#define G9TV_SYS_PLL_CNTL_5 (0x00000870)
+*/
+/* V1.0
+#define G9TV_SYS_PLL_CNTL_2 (0x59e8ce00)
+#define G9TV_SYS_PLL_CNTL_3 (0xca4b8823)
+#define G9TV_SYS_PLL_CNTL_4 (0x0286a027)
+#define G9TV_SYS_PLL_CNTL_5 (0x00003800)
+*/
+#define G9TV_SYS_PLL_CNTL_2 (0x59C88000)
+#define G9TV_SYS_PLL_CNTL_3 (0xCA45B823)
+#define G9TV_SYS_PLL_CNTL_4 (0x0001D407)
+#define G9TV_SYS_PLL_CNTL_5 (0x00000870)
+
+//VIID PLL
+#define G9TV_VIID_PLL_CNTL_2 (G9TV_PLL_CNTL_CST2)
+#define G9TV_VIID_PLL_CNTL_3 (G9TV_PLL_CNTL_CST3)
+#define G9TV_VIID_PLL_CNTL_4 (G9TV_PLL_CNTL_CST4)
+//Wr(HHI_VIID_PLL_CNTL,  0x20242 );	 //0x1047
+
+
+//VID PLL
+#define G9TV_VID_PLL_CNTL_2 (G9TV_PLL_CNTL_CST2)
+#define G9TV_VID_PLL_CNTL_3 (G9TV_PLL_CNTL_CST3)
+#define G9TV_VID_PLL_CNTL_4 (G9TV_PLL_CNTL_CST4)
+//Wr(HHI_VID_PLL_CNTL,  0xb0442 ); //0x109c
+
+//FIXED PLL/Multi-phase PLL
+#define G9TV_MPLL_CNTL     (0xc00009a9)
+#define G9TV_MPLL_CNTL_2 (0xadc80000)
+#define G9TV_MPLL_CNTL_3 (0x0a57ca21)
+#define G9TV_MPLL_CNTL_4 (0x00010006)
+#define G9TV_MPLL_CNTL_5 (0xa5500e1a)
+#define G9TV_MPLL_CNTL_6 (0xf4454545)
+#define G9TV_MPLL_CNTL_7 (0x00000000)
+#define G9TV_MPLL_CNTL_8 (0x00000000)
+#define G9TV_MPLL_CNTL_9 (0x00000000)
+
+extern unsigned long mali_clock_gating_lock(void);
+extern void mali_clock_gating_unlock(unsigned long flags);
+
+#endif //__MACH_MESONG9TV_CLOCK_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/common.h b/arch/arm/mach-mesong9tv/include/mach/common.h
new file mode 100644
index 000000000000..43d138d569ba
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/common.h
@@ -0,0 +1,58 @@
+/*
+ * common code header to arch and all modules.
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+
+#ifndef _MACH_MESONG9TV_PM_H
+#define _MACH_MESONG9TV_PM_H
+
+/*
+ * These led and vghl pwm registers are no longer used in g9tv.
+ * They are defined here to avoid some code compiling error.
+ * For example meson_cs_dcdc_regulator.c
+ */
+
+#define LED_PWM_REG0			0x21da
+#define P_LED_PWM_REG0			CBUS_REG_ADDR(LED_PWM_REG0)
+#define LED_PWM_REG1			0x21db
+#define P_LED_PWM_REG1			CBUS_REG_ADDR(LED_PWM_REG1)
+#define LED_PWM_REG2			0x21dc
+#define P_LED_PWM_REG2			CBUS_REG_ADDR(LED_PWM_REG2)
+#define LED_PWM_REG3			0x21dd
+#define P_LED_PWM_REG3			CBUS_REG_ADDR(LED_PWM_REG3)
+#define LED_PWM_REG4			0x21de
+#define P_LED_PWM_REG4			CBUS_REG_ADDR(LED_PWM_REG4)
+#define LED_PWM_REG5			0x21df
+#define P_LED_PWM_REG5			CBUS_REG_ADDR(LED_PWM_REG5)
+#define LED_PWM_REG6			0x21e0
+#define P_LED_PWM_REG6			CBUS_REG_ADDR(LED_PWM_REG6)
+
+#define VGHL_PWM_REG0			0x21e1
+#define P_VGHL_PWM_REG0 		CBUS_REG_ADDR(VGHL_PWM_REG0)
+#define VGHL_PWM_REG1			0x21e2
+#define P_VGHL_PWM_REG1 		CBUS_REG_ADDR(VGHL_PWM_REG1)
+#define VGHL_PWM_REG2			0x21e3
+#define P_VGHL_PWM_REG2 		CBUS_REG_ADDR(VGHL_PWM_REG2)
+#define VGHL_PWM_REG3			0x21e4
+#define P_VGHL_PWM_REG3 		CBUS_REG_ADDR(VGHL_PWM_REG3)
+#define VGHL_PWM_REG4			0x21e5
+#define P_VGHL_PWM_REG4 		CBUS_REG_ADDR(VGHL_PWM_REG4)
+#define VGHL_PWM_REG5			0x21e6
+#define P_VGHL_PWM_REG5 		CBUS_REG_ADDR(VGHL_PWM_REG5)
+#define VGHL_PWM_REG6			0x21e7
+#define P_VGHL_PWM_REG6			CBUS_REG_ADDR(VGHL_PWM_REG6)
+
+
+#endif
+
diff --git a/arch/arm/mach-mesong9tv/include/mach/cpu.h b/arch/arm/mach-mesong9tv/include/mach/cpu.h
new file mode 100644
index 000000000000..3d74bad6653f
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/cpu.h
@@ -0,0 +1,44 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/cpu.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+
+#ifndef __MACH_MESONG9TV_CPU_H
+#define __MACH_MESONG9TV_CPU_H
+
+#include <plat/cpu.h>
+
+extern int (*get_cpu_temperature_celius)(void);
+int get_cpu_temperature(void);
+
+#define MESON_CPU_TYPE			MESON_CPU_TYPE_MESONG9TV
+
+#define MESON_CPU_CONTROL_REG		(IO_SRAM_BASE + 0x1ff80)
+#define MESON_CPU1_CONTROL_ADDR_REG	(IO_SRAM_BASE + 0x1ff84)
+#define MESON_CPU_STATUS_REG(cpu)	(IO_SRAM_BASE + 0x1ff90 + (cpu<<2))
+
+#define MESON_CPU_POWER_CTRL_REG	(IO_A9_PERIPH_BASE + 0x8)
+
+#define MESON_CPU_SLEEP		1
+#define MESON_CPU_WAKEUP	2
+
+extern int meson_cpu_kill(unsigned int cpu);
+extern void meson_cpu_die(unsigned int cpu);
+extern int meson_cpu_disable(unsigned int cpu);
+extern void meson_secondary_startup(void);
+extern void meson_set_cpu_ctrl_reg(int cpu,int is_on);
+extern void meson_set_cpu_ctrl_addr(uint32_t cpu, const uint32_t addr);
+extern void meson_set_cpu_power_ctrl(uint32_t cpu,int is_power_on);
+
+#endif /* __MACH_MESONG9TV_CPU_H */
diff --git a/arch/arm/mach-mesong9tv/include/mach/cpufreq_table.h b/arch/arm/mach-mesong9tv/include/mach/cpufreq_table.h
new file mode 100644
index 000000000000..f55ed3370e80
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/cpufreq_table.h
@@ -0,0 +1,23 @@
+#include <linux/cpufreq.h>
+
+static struct cpufreq_frequency_table meson_freq_table[]=
+{
+    //	0	, CPUFREQ_ENTRY_INVALID    ,
+    //	1	, CPUFREQ_ENTRY_INVALID    ,
+    {0	, 96000    },
+    {1	, 192000   },
+    {2	, 312000   },
+    {3	, 408000   },
+    {4	, 504000   },
+    {5	, 600000   },
+    {6	, 696000   },
+    {7	, 816000   },
+    {8	, 912000   },
+    {9	, 1008000  },
+    {10	, 1104000  },
+    {11	, 1200000  },
+    {12	, 1296000  },
+    {13	, 1416000  },
+    {14	, 1512000  },
+    {15	, CPUFREQ_TABLE_END},
+};
\ No newline at end of file
diff --git a/arch/arm/mach-mesong9tv/include/mach/debug-macro.S b/arch/arm/mach-mesong9tv/include/mach/debug-macro.S
new file mode 100644
index 000000000000..31664b014b54
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/debug-macro.S
@@ -0,0 +1,46 @@
+/* arch/arm/mach-mesong9tv/include/mach/debug-macro.S
+ *
+ * Debugging macro include header
+ *
+ *  Copyright (C) 1994-1999 Russell King
+ *  Moved from linux/arch/arm/kernel/debug.S by Ben Dooks
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ */
+
+#define UART_PADDR                  0xc81004c0
+
+#define G9TV_IO_VAUART	            0xFE6004c0
+#define M6TV_IO_VAUART	            0xf11004c0
+
+#define UART_TX_FULL                0x00200000
+#define UART_TX_BUSY                0x02000000
+
+#define UART_VADDR	                G9TV_IO_VAUART
+
+
+#ifndef UART_PADDR
+#error "CONFIG_DEBUG_LL is incompatible with multiple archs"
+#endif
+
+
+		.macro	addruart, rp, rv, tmp
+		ldr	\rp, =UART_PADDR	    @ physical
+		ldr	\rv, =UART_VADDR	    @ virtual
+		.endm
+
+		.macro	senduart,rd,rx
+		str	\rd, [\rx, #0x0]	    @ TXDATA
+		.endm
+
+		.macro	waituart,rd,rx
+		.endm
+
+		.macro	busyuart,rd,rx
+1002:	ldr	\rd, [\rx, #0xc]	    @ SR2
+		tst	\rd, #UART_TX_FULL		@ TXDC
+		bne	1002b			        @ wait until transmit done
+		.endm
diff --git a/arch/arm/mach-mesong9tv/include/mach/efuse.h b/arch/arm/mach-mesong9tv/include/mach/efuse.h
new file mode 100644
index 000000000000..55707556a62f
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/efuse.h
@@ -0,0 +1,9 @@
+#ifndef __MESON_EFUSE_H
+#define __MESON_EFUSE_H
+
+#define EFUSE_BITS             4096
+#define EFUSE_BYTES            512  //(EFUSE_BITS/8)
+#define EFUSE_DWORDS            128  //(EFUSE_BITS/32)
+
+#endif
+
diff --git a/arch/arm/mach-mesong9tv/include/mach/gpio.h b/arch/arm/mach-mesong9tv/include/mach/gpio.h
new file mode 100644
index 000000000000..98602c41631c
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/gpio.h
@@ -0,0 +1,196 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/cpu.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_GPIO_H
+#define __MACH_MESONG9TV_GPIO_H
+
+typedef enum {
+	GPIOX_0		=	0,
+	GPIOX_1		=	1,
+	GPIOX_2		=	2,
+	GPIOX_3		=	3,
+	GPIOX_4		=	4,
+	GPIOX_5		=	5,
+	GPIOX_6		=	6,
+	GPIOX_7		=	7,
+	GPIOX_8		=	8,
+	GPIOX_9		=	9,
+	GPIOX_10	=	10,
+	GPIOX_11	=	11,
+	GPIOX_12	=	12,
+	GPIOX_13	=	13,
+	GPIOX_14	=	14,
+	GPIOX_15	=	15,
+	GPIOX_16	=	16,
+	GPIOX_17	=	17,
+	GPIOX_18	=	18,
+	GPIOX_19	=	19,
+	GPIOX_20	=	20,
+	GPIOX_21	=	21,
+	GPIOX_22	=	22,
+	GPIOX_23	=	23,
+	GPIOX_24	=	24,
+	GPIOX_25	=	25,
+	GPIOX_26	=	26,
+	GPIOX_27	=	27,
+
+	BOOT_0		=	28,
+	BOOT_1		=	29,
+	BOOT_2		=	30,
+	BOOT_3		=	31,
+	BOOT_4		=	32,
+	BOOT_5		=	33,
+	BOOT_6		=	34,
+	BOOT_7		=	35,
+	BOOT_8		=	36,
+	BOOT_9		=	37,
+	BOOT_10		=	38,
+	BOOT_11		=	39,
+	BOOT_12		=	40,
+	BOOT_13		=	41,
+	BOOT_14		=	42,
+	BOOT_15		=	43,
+	BOOT_16		=	44,
+	BOOT_17		=	45,
+	BOOT_18		=	46,
+
+	GPIOH_0		=	47,
+	GPIOH_1		=	48,
+	GPIOH_2		=	49,
+	GPIOH_3		=	50,
+	GPIOH_4		=	51,
+	GPIOH_5		=	52,
+	GPIOH_6		=	53,
+	GPIOH_7		=	54,
+	GPIOH_8		=	55,
+	GPIOH_9		=	56,
+	GPIOH_10	=	57,
+
+	GPIOZ_0		=	58,
+	GPIOZ_1		=	59,
+	GPIOZ_2		=	60,
+	GPIOZ_3		=	61,
+	GPIOZ_4		=	62,
+	GPIOZ_5		=	63,
+	GPIOZ_6		=	64,
+	GPIOZ_7		=	65,
+	GPIOZ_8		=	66,
+	GPIOZ_9		=	67,
+	GPIOZ_10	=	68,
+	GPIOZ_11	=	69,
+	GPIOZ_12	=	70,
+	GPIOZ_13	=	71,
+	GPIOZ_14	=	72,
+	GPIOZ_15	=	73,
+	GPIOZ_16	=	74,
+	GPIOZ_17	=	75,
+	GPIOZ_18	=	76,
+	GPIOZ_19	=	77,
+	GPIOZ_20	=	78,
+
+	GPIOW_0		=	79,
+	GPIOW_1		=	80,
+	GPIOW_2		=	81,
+	GPIOW_3		=	82,
+	GPIOW_4		=	83,
+	GPIOW_5		=	84,
+	GPIOW_6		=	85,
+	GPIOW_7		=	86,
+	GPIOW_8		=	87,
+	GPIOW_9		=	88,
+	GPIOW_10	=	89,
+	GPIOW_11	=	90,
+	GPIOW_12	=	91,
+	GPIOW_13	=	92,
+	GPIOW_14	=	93,
+	GPIOW_15	=	94,
+	GPIOW_16	=	95,
+	GPIOW_17	=	96,
+	GPIOW_18	=	97,
+	GPIOW_19	=	98,
+	GPIOW_20	=	99,
+
+	GPIOAO_0	=	100,
+	GPIOAO_1	=	101,
+	GPIOAO_2	=	102,
+	GPIOAO_3	=	103,
+	GPIOAO_4	=	104,
+	GPIOAO_5	=	105,
+	GPIOAO_6	=	106,
+	GPIOAO_7	=	107,
+	GPIOAO_8	=	108,
+	GPIOAO_9	=	109,
+	GPIOAO_10	=	110,
+	GPIOAO_11	=	111,
+	GPIOAO_12	=	112,
+	GPIOAO_13	=	113,
+
+	CARD_0		=	114,
+	CARD_1		=	115,
+	CARD_2		=	116,
+	CARD_3		=	117,
+	CARD_4		=	118,
+	CARD_5		=	119,
+	CARD_6		=	120,
+	CARD_7		=	121,
+	CARD_8		=	122,
+
+	GPIOY_0		=	123,
+	GPIOY_1		=	124,
+	GPIOY_2		=	125,
+	GPIOY_3		=	126,
+	GPIOY_4		=	127,
+	GPIOY_5		=	128,
+	GPIOY_6		=	129,
+	GPIOY_7		=	130,
+	GPIOY_8		=	131,
+	GPIOY_9		=	132,
+	GPIOY_10	=	133,
+	GPIOY_11	=	134,
+	GPIOY_12	=	135,
+	GPIOY_13	=	136,
+	GPIO_MAX	=	137,
+} gpio_t;
+
+enum {
+	GPIO_IRQ0=0,
+	GPIO_IRQ1,
+	GPIO_IRQ2,
+	GPIO_IRQ3,
+	GPIO_IRQ4,
+	GPIO_IRQ5,
+	GPIO_IRQ6,
+	GPIO_IRQ7,
+};
+
+enum {
+	GPIO_IRQ_HIGH=0,
+	GPIO_IRQ_LOW,
+	GPIO_IRQ_RISING,
+	GPIO_IRQ_FALLING,
+};
+
+enum {
+	FILTER_NUM0=0,
+	FILTER_NUM1,
+	FILTER_NUM2,
+	FILTER_NUM3,
+	FILTER_NUM4,
+	FILTER_NUM5,
+	FILTER_NUM6,
+	FILTER_NUM7,
+};
+
+#endif //__MACH_MESONG9TV_GPIO_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/hardware.h b/arch/arm/mach-mesong9tv/include/mach/hardware.h
new file mode 100644
index 000000000000..2fb4be4e8a1d
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/hardware.h
@@ -0,0 +1,5 @@
+/*
+ * arch/arm/mach-meson8b/include/mach/hardware.h
+ */
+#include <asm/sizes.h>
+#include <mach/io.h>
diff --git a/arch/arm/mach-mesong9tv/include/mach/io.h b/arch/arm/mach-mesong9tv/include/mach/io.h
new file mode 100644
index 000000000000..a94b91ac405f
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/io.h
@@ -0,0 +1,174 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/io.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_IO_H
+#define __MACH_MESONG9TV_IO_H
+
+///amlogic old style driver porting
+#if (defined CONFIG_MESON_LEGACY_REGISTER_API) && CONFIG_MESON_LEGACY_REGISTER_API
+#include "avosstyle_io.h"
+#else
+#warning "You should replace the register operation with \n" 	\
+	"writel/readl/setbits_le32/clrbits_le32/clrsetbits_le32.\n" \
+	"the register name must be replace with P_REG_NAME . \n"	\
+	"REG_NAME is the old stlye reg name . 	"
+#endif
+//#define IO_SPACE_LIMIT 0xffffffff
+
+//#define __io(a)     __typesafe_io(a)
+#define __mem_pci(a)    (a)
+
+
+/**
+ * U boot style operation
+ */
+
+
+#define clrbits_le32 aml_clr_reg32_mask
+#define setbits_le32 aml_set_reg32_mask
+#define clrsetbits_le32 aml_clrset_reg32_bits
+
+/**
+ * PHY IO MEMORY BASE
+ */
+#define IO_PHY_BASE			0xc0000000  ///value from vlsi team
+#define IO_CBUS_PHY_BASE		0xc1100000  ///2M
+#define IO_AXI_BUS_PHY_BASE		0xc1300000  ///1M
+#define IO_PL310_PHY_BASE		0xc4200000  ///4k
+#define IO_A9_PERIPH_PHY_BASE		0xc4300000  ///4k
+#define IO_MMC_PHY_BASE			0xc8000000  ///32k
+#define IO_TV_BASE				0xc8008000  ///32k
+#define IO_AOBUS_PHY_BASE		0xc8100000  ///1M
+#define IO_USB_A_PHY_BASE		0xc9040000  ///256k
+#define IO_USB_B_PHY_BASE		0xc90C0000  ///256k
+#define IO_ETH_PHY_BASE			0xc9410000  ///64k
+#define IO_SPIMEM_PHY_BASE		0xcc000000  ///64M
+#define IO_APB_BUS_PHY_BASE		0xd0000000  ///2M
+	#define IO_HDMI_PHY_BASE	0xd0042000
+	#define IO_AUDAC_PHY_BASE	0xd0044000  ///112k
+	#define IO_DOS_BUS_PHY_BASE	0xd0050000  ///64k
+	#define IO_MALI_APB_PHY_BASE	0xd00c0000  ///128k
+#define IO_SRAM_PHY_BASE		0xd9000000  ///128k
+#define IO_BOOTROM_PHY_BASE		0xd9040000  ///64k
+#define IO_SECBUS_PHY_BASE		0xda000000
+#define IO_EFUSE_PHY_BASE		0xda000000  ///4k
+#define IO_SECURE_PHY_BASE		(IO_SECBUS_PHY_BASE+0x2000)  ///16k
+
+#ifdef CONFIG_VMSPLIT_3G
+#define IO_REGS_BASE			0xFE000000
+#define IO_PL310_BASE			(IO_REGS_BASE + 0x000000) // 4k
+#define IO_A9_PERIPH_BASE		(IO_REGS_BASE + 0x001000) // 16k
+#define IO_RESERVED_1			(IO_REGS_BASE + 0x005000) // 20K
+#define IO_MMC_BUS_BASE			(IO_REGS_BASE + 0x008000) // 32K
+#define IO_BOOTROM_BASE			(IO_REGS_BASE + 0x010000) // 64K
+#define IO_SRAM_BASE			(IO_REGS_BASE + 0x020000) // 128K
+#define IO_USB_A_BASE			(IO_REGS_BASE + 0x040000) // 256K
+#define IO_USB_B_BASE			(IO_REGS_BASE + 0x080000) // 256K
+#define IO_ETH_BASE			(IO_REGS_BASE + 0x0C0000) // 64K
+#define IO_SECBUS_BASE			(IO_REGS_BASE + 0x0D0000) // 32k
+#define IO_TV_BUS_BASE			(IO_REGS_BASE + 0x0D8000) // 32k
+#define IO_RESERVED_2			(IO_REGS_BASE + 0x0E0000) // 128K
+#define IO_CBUS_BASE			(IO_REGS_BASE + 0x100000) // 1M
+#define IO_AXI_BUS_BASE			(IO_REGS_BASE + 0x200000) // 2M
+#define IO_APB_BUS_BASE			(IO_REGS_BASE + 0x400000) // 2M
+#define IO_AOBUS_BASE			(IO_REGS_BASE + 0x600000) // 1M
+#define IO_REGS_END			(IO_REGS_BASE + 0xF00000 - 1) // Total 15M
+
+#define IO_SPI_BASE			(IO_REGS_BASE - 0x4000000)
+#define IO_SPIMEM_BASE			(IO_SPI_BASE + 0x0000000)
+#define IO_SPI_END			(IO_SPI_BASE + 0x4000000 - 1) // Total 64M
+
+/* Quick reference */
+#define IO_HDMI_BUS_BASE		(IO_APB_BUS_BASE +  0x40000)
+#define IO_AUDAC_BASE			(IO_APB_BUS_BASE +  0x44000)
+#define IO_DOS_BUS_BASE			(IO_APB_BUS_BASE +  0x50000)
+#define IO_HDEC_BUS_BASE		(IO_APB_BUS_BASE +  0x54000)
+#define IO_NAND_BASE			(IO_APB_BUS_BASE +  0x48600)
+#define IO_MALI_APB_BASE		(IO_APB_BUS_BASE +  0xC0000)
+#define IO_VPU_BUS_BASE			(IO_APB_BUS_BASE + 0x100000)
+#define IO_MIPI_HOST_BASE		(IO_APB_BUS_BASE + 0x140000)
+#define IO_MIPI_PHY_BASE		(IO_APB_BUS_BASE + 0x142000)
+#define IO_MIPI_DSI_BASE		(IO_APB_BUS_BASE + 0x150000)
+#define IO_EDP_TX_BASE			(IO_APB_BUS_BASE + 0x160000)
+#define IO_EFUSE_BASE			IO_SECBUS_BASE
+#define IO_PERIPH_BASE			IO_A9_PERIPH_BASE
+#endif // CONFIG_VMSPLIT_3G
+
+#ifdef CONFIG_VMSPLIT_2G
+#define IO_CBUS_BASE			IO_CBUS_PHY_BASE       ///2M
+#define IO_AXI_BUS_BASE			IO_AXI_BUS_PHY_BASE    ///1M
+#define IO_PL310_BASE			IO_PL310_PHY_BASE      ///4k
+#define IO_PERIPH_BASE			IO_PERIPH_PHY_BASE     ///4k
+#define IO_APB_BUS_BASE			IO_APB_BUS_PHY_BASE    ///8k
+#define IO_DOS_BUS_BASE			IO_DOS_BUS_PHY_BASE    ///64k
+#define IO_AOBUS_BASE			IO_AOBUS_PHY_BASE      ///1M
+#define IO_USB_A_BASE			IO_USB_A_PHY_BASE      ///256k
+#define IO_USB_B_BASE			IO_USB_B_PHY_BASE      ///256k
+#define IO_WIFI_BASE			IO_WIFI_PHY_BASE       ///1M
+#define IO_SATA_BASE			IO_SATA_PHY_BASE       ///64k
+#define IO_ETH_BASE			IO_ETH_PHY_BASE        ///64k
+#define IO_SPIMEM_BASE			IO_SPIMEM_PHY_BASE     ///64M
+#define IO_A9_APB_BASE			IO_A9_APB_PHY_BASE     ///256k
+#define IO_DEMOD_APB_BASE		IO_DEMOD_APB_PHY_BASE  ///112k
+#define IO_MALI_APB_BASE		IO_MALI_APB_PHY_BASE   ///128k
+#define IO_APB2_BUS_BASE		IO_APB2_BUS_PHY_BASE
+#define IO_AHB_BASE			IO_AHB_PHY_BASE        ///128k
+#define IO_AHB_BUS_BASE			IO_AHB_BUS_PHY_BASE        ///128k
+
+#define IO_BOOTROM_BASE			IO_BOOTROM_PHY_BASE    ///64k
+#define IO_SECBUS_BASE			IO_SECBUS_PHY_BASE
+#define IO_EFUSE_BASE			IO_EFUSE_PHY_BASE      ///4k
+#define IO_SECURE_BASE			IO_SECURE_PHY_BASE     ///16k
+#endif // CONFIG_VMSPLIT_2G
+
+#ifdef CONFIG_VMSPLIT_1G
+#error Unsupported Memory Split Type
+#endif // CONFIG_VMSPLIT_1G
+
+
+#define MESON_PERIPHS1_VIRT_BASE	(IO_AOBUS_BASE+0x4c0)
+#define MESON_PERIPHS1_PHYS_BASE	(IO_AOBUS_PHY_BASE+0x4c0)
+
+
+#define CBUS_REG_OFFSET(reg)		((reg) << 2)
+#define CBUS_REG_ADDR(reg)		(IO_CBUS_BASE + CBUS_REG_OFFSET(reg))
+
+#define VCBUS_REG_ADDR(reg)		(IO_APB_BUS_BASE + 0x100000 +CBUS_REG_OFFSET(reg))
+
+#define DOS_REG_ADDR(reg)		(IO_DOS_BUS_BASE + CBUS_REG_OFFSET(reg))
+
+#define HDEC_REG_ADDR(reg)		(IO_HDEC_BUS_BASE + CBUS_REG_OFFSET(reg))
+#define MMC_REG_ADDR(reg)		(IO_MMC_BUS_BASE + (reg))
+
+#define AXI_REG_OFFSET(reg)		((reg) << 2)
+#define AXI_REG_ADDR(reg)		(IO_AXI_BUS_BASE + AXI_REG_OFFSET(reg))
+
+#define APB_REG_OFFSET(reg)		(reg&0xfffff)
+#define APB_REG_ADDR(reg)		(IO_APB_BUS_BASE + APB_REG_OFFSET(reg))
+#define APB_REG_ADDR_VALID(reg)		(((unsigned long)(reg) & 3) == 0)
+
+#define AOBUS_REG_OFFSET(reg)		((reg) )
+#define AOBUS_REG_ADDR(reg)		(IO_AOBUS_BASE + AOBUS_REG_OFFSET(reg))
+
+#define SECBUS_REG_OFFSET(reg)		((reg) <<2)
+#define SECBUS_REG_ADDR(reg)		(IO_SECBUS_BASE+SECBUS_REG_OFFSET(reg))
+#define SECBUS2_REG_ADDR(reg)		(IO_SECBUS_BASE+0x4000+SECBUS_REG_OFFSET(reg))
+#define SECBUS3_REG_ADDR(reg)		(IO_SECBUS_BASE+0x6000+SECBUS_REG_OFFSET(reg))
+
+#define TVBUS_REG_OFFSET(reg)           ((reg))
+#define TVBUS_REG_ADDR(reg)             (IO_TV_BUS_BASE-0x8000+TVBUS_REG_OFFSET(reg))
+void meson_map_default_io(void);
+
+#endif //__MACH_MESONG9TV_IO_H
\ No newline at end of file
diff --git a/arch/arm/mach-mesong9tv/include/mach/irqs.h b/arch/arm/mach-mesong9tv/include/mach/irqs.h
new file mode 100644
index 000000000000..93031b330b62
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/irqs.h
@@ -0,0 +1,176 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/irqs.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_IRQS_H
+#define __MACH_MESONG9TV_IRQS_H
+
+#define IRQ_BIT(irq)			((irq) & 0x1f)
+#define IRQ_INDEX(irq)			((irq) >> 5)
+
+#define BASE_IRQ			(32)
+#define NR_IRQS				(256)
+
+
+#define AM_IRQ(reg)			(reg + BASE_IRQ)
+
+#define INT_WATCHDOG			AM_IRQ(0)
+#define INT_MAILBOX			AM_IRQ(1)
+#define INT_VIU_HSYNC			AM_IRQ(2)
+#define INT_VIU_VSYNC			AM_IRQ(3)
+#define INT_DEMUX_1			AM_IRQ(5)
+#define INT_TIMER_C			AM_IRQ(6)
+#define INT_AUDIO_IN			AM_IRQ(7)
+#define INT_ETHERNET			AM_IRQ(8)
+#define INT_TIMER_A			AM_IRQ(10)
+#define INT_TIMER_B			AM_IRQ(11)
+#define INT_VIU2_HSYNC			AM_IRQ(12)
+#define INT_VIU2_VSYNC			AM_IRQ(13)
+#define INT_MIPI_PHY			AM_IRQ(14)
+#define INT_REMOTE			AM_IRQ(15)
+#define INT_ABUF_WR			AM_IRQ(16)
+#define INT_ABUF_RD			AM_IRQ(17)
+#define INT_ASYNC_FIFO_FILL		AM_IRQ(18)
+#define INT_ASYNC_FIFO_FLUSH		AM_IRQ(19)
+#define INT_BT656			AM_IRQ(20)
+#define INT_I2C_MASTER0			AM_IRQ(21)
+#define INT_ENCODER			AM_IRQ(22)
+#define INT_DEMUX			AM_IRQ(23)
+#define INT_ASYNC_FIFO2_FILL		AM_IRQ(24)
+#define INT_ASYNC_FIFO2_FLUSH		AM_IRQ(25)
+#define INT_UART_0			AM_IRQ(26)
+#define INT_MIPI_DSI_PHY		AM_IRQ(27)
+#define INT_SDIO			AM_IRQ(28)
+#define INT_TIMER_D			AM_IRQ(29)
+#define INT_USB_A			AM_IRQ(30)
+#define INT_USB_B			AM_IRQ(31)
+
+#define INT_PARSER			AM_IRQ(32)
+#define INT_VIFF_EMPTY			AM_IRQ(33)
+#define INT_NAND			AM_IRQ(34)
+#define INT_SPDIF			AM_IRQ(35)
+#define INT_NDMA			AM_IRQ(36)
+#define INT_SMART_CARD			AM_IRQ(37)
+#define INT_UART_AO_2			AM_IRQ(38)
+#define INT_I2C_MASTER3			AM_IRQ(39)
+#define INT_DOS_MAILBOX_0		AM_IRQ(43)
+#define INT_DOS_MAILBOX_1		AM_IRQ(44)
+#define INT_DOS_MAILBOX_2		AM_IRQ(45)
+#define INT_DEINTERLACE			AM_IRQ(46)
+#define INT_AIU_CRC			AM_IRQ(47)
+#define INT_I2S_DDR			AM_IRQ(48)
+#define INT_IEC958_DDR			AM_IRQ(49)
+#define INT_AI_IEC958			AM_IRQ(50)
+#define INT_DMC_SEC			AM_IRQ(51)
+#define INT_DMC				AM_IRQ(52)
+#define INT_DEMUX_2			AM_IRQ(53)
+#define INT_HDMI_CEC			AM_IRQ(55)
+#define INT_HDMI_RX			AM_IRQ(56)
+#define INT_HDMI_TX			AM_IRQ(57)
+#define INT_TIMER_F			AM_IRQ(60)
+#define INT_TIMER_G			AM_IRQ(61)
+#define INT_TIMER_H			AM_IRQ(62)
+#define INT_TIMER_I			AM_IRQ(63)
+
+#define INT_GPIO_0			AM_IRQ(64)
+#define INT_GPIO_1			AM_IRQ(65)
+#define INT_GPIO_2			AM_IRQ(66)
+#define INT_GPIO_3			AM_IRQ(67)
+#define INT_GPIO_4			AM_IRQ(68)
+#define INT_GPIO_5			AM_IRQ(69)
+#define INT_GPIO_6			AM_IRQ(70)
+#define INT_GPIO_7			AM_IRQ(71)
+#define INT_RTC				AM_IRQ(72)
+#define INT_SAR_ADC			AM_IRQ(73)
+#define INT_CSI2_HOST			AM_IRQ(74)
+#define INT_UART_1			AM_IRQ(75)
+#define INT_ACODEC_LEVEL		AM_IRQ(77)
+#define INT_SDHC			AM_IRQ(78)
+#define INT_VIDEO_0_WR			AM_IRQ(79)
+#define INT_SPI				AM_IRQ(80)
+#define INT_SPI_2			AM_IRQ(81)
+#define INT_VDIN0_HSYNC			AM_IRQ(82)
+#define INT_VDIN0_VSYNC			AM_IRQ(83)
+#define INT_VDIN1_HSYNC			AM_IRQ(84)
+#define INT_VDIN1_VSYNC			AM_IRQ(85)
+#define INT_VIDEO_1_WR			AM_IRQ(86)
+#define INT_CSI2_HOST_2			AM_IRQ(87)
+#define INT_I2S_CBUS			AM_IRQ(88)
+#define INT_RDMA			AM_IRQ(89)
+#define INT_UART_AO			AM_IRQ(90)
+#define INT_I2C_SLAVE_AO		AM_IRQ(91)
+#define INT_I2C_MASTER_AO		AM_IRQ(92)
+#define INT_UART_2			AM_IRQ(93)
+#define INT_UART_3			AM_IRQ(94)
+#define INT_CSI2_ADAPTER		AM_IRQ(95)
+
+
+#define INT_I2C_MASTER1			AM_IRQ(128)
+#define INT_I2C_MASTER2			AM_IRQ(129)
+#define INT_MMC				AM_IRQ(130)
+#define INT_MIPI_DSI_ERR		AM_IRQ(133)
+#define INT_MIPI_DSI_TE			AM_IRQ(134)
+#define INT_IR_BLASTER_AO		AM_IRQ(135)
+#define INT_A9_PMU0			AM_IRQ(137)
+#define INT_A9_PMU1			AM_IRQ(138)
+#define INT_A9_DBG_COMTX0		AM_IRQ(139)
+#define INT_A9_DBG_COMTX1		AM_IRQ(140)
+#define INT_A9_DBG_COMRX0		AM_IRQ(141)
+#define INT_A9_DBG_COMRX1		AM_IRQ(142)
+#define INT_L2_CACHE			AM_IRQ(143)
+#define INT_ASSIST_MBOX0		AM_IRQ(145)
+#define INT_ASSIST_MBOX1		AM_IRQ(146)
+#define INT_ASSIST_MBOX2		AM_IRQ(147)
+#define INT_ASSIST_MBOX3		AM_IRQ(148)
+#define INT_CUSAD			AM_IRQ(149)
+#define INT_GE2D			AM_IRQ(150)
+#define INT_AO_CEC			AM_IRQ(151)
+#define INT_VIU1_LINE_N			AM_IRQ(152)
+#define INT_A9_PMU2			AM_IRQ(153)
+#define INT_A9_PMU3			AM_IRQ(154)
+#define INT_A9_DBG_COMTX2		AM_IRQ(155)
+#define INT_A9_DBG_COMTX3		AM_IRQ(156)
+#define INT_A9_DBG_COMRX2		AM_IRQ(157)
+#define INT_A9_DBG_COMRX3		AM_IRQ(158)
+#define INT_VIU2_LINE_N			AM_IRQ(159)
+
+#define INT_MALI_GP			AM_IRQ(160)
+#define INT_MALI_GP_MMU			AM_IRQ(161)
+#define INT_MALI_PP			AM_IRQ(162)
+#define INT_MALI_PMU			AM_IRQ(163)
+#define INT_MALI_PP0			AM_IRQ(164)
+#define INT_MALI_PP0_MMU		AM_IRQ(165)
+#define INT_MALI_PP1			AM_IRQ(166)
+#define INT_MALI_PP1_MMU		AM_IRQ(167)
+#define INT_MALI_PP2			AM_IRQ(168)
+#define INT_MALI_PP2_MMU		AM_IRQ(169)
+#define INT_MALI_PP3			AM_IRQ(170)
+#define INT_MALI_PP3_MMU		AM_IRQ(171)
+#define INT_MALI_PP4			AM_IRQ(172)
+#define INT_MALI_PP4_MMU		AM_IRQ(173)
+#define INT_MALI_PP5			AM_IRQ(174)
+#define INT_MALI_PP5_MMU		AM_IRQ(175)
+#define INT_MALI_PP6			AM_IRQ(176)
+#define INT_MALI_PP6_MMU		AM_IRQ(177)
+#define INT_MALI_PP7			AM_IRQ(178)
+#define INT_MALI_PP7_MMU		AM_IRQ(179)
+
+
+
+/* All interrupts are FIQ capable */
+#define FIQ_START			AM_IRQ0(0)
+extern void request_fiq(unsigned fiq, void (*isr)(void));
+extern void free_fiq(unsigned fiq, void (*isr)(void));
+
+#endif //__MACH_MESONG9TV_IRQS_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/lcdoutc.h b/arch/arm/mach-mesong9tv/include/mach/lcdoutc.h
new file mode 100644
index 000000000000..a058677d450a
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/lcdoutc.h
@@ -0,0 +1,13 @@
+
+#ifndef MACH_LCDOUTC_H
+#define MACH_LCDOUTC_H
+
+#define CONFIG_LCD_TYPE_TV_VALID
+#define CONFIG_LCD_IF_LVDS_VALID
+
+/*
+// lcd driver global API, special by CPU
+*/
+
+
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/memory.h b/arch/arm/mach-mesong9tv/include/mach/memory.h
new file mode 100644
index 000000000000..2dda2816a368
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/memory.h
@@ -0,0 +1,26 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/memory.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_MEMORY_H
+#define __MACH_MESONG9TV_MEMORY_H
+
+/*
+ * Physical DRAM offset.
+ */
+#define PHYS_OFFSET		UL(0x00000000)
+
+#define BOOT_PARAMS_OFFSET	(PHYS_OFFSET + 0x100)
+
+#endif //__MACH_MESONG9TV_MEMORY_H
\ No newline at end of file
diff --git a/arch/arm/mach-mesong9tv/include/mach/mod_gate.h b/arch/arm/mach-mesong9tv/include/mach/mod_gate.h
new file mode 100644
index 000000000000..e48b369fcc24
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/mod_gate.h
@@ -0,0 +1,70 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/mod_gate.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_MOD_GATE_H
+#define __MACH_MESONG9TV_MOD_GATE_H
+
+#include <mach/power_gate.h>
+
+typedef enum {
+	MOD_VDEC = 0,
+	MOD_AUDIO,
+	MOD_HDMI,
+	MOD_VENC,
+	MOD_TCON,
+//	MOD_LVDS,
+	MOD_LCD,
+	MOD_SPI,
+	MOD_UART0,
+	MOD_UART1,
+	MOD_UART2,
+	MOD_SANA,
+	MOD_ROM,
+	MOD_EFUSE,
+	MOD_RANDOM_NUM_GEN,
+	MOD_ETHERNET,
+	MOD_MEDIA_CPU,
+	MOD_GE2D,
+	MOD_AHB,
+	MOD_DEMUX,
+	MOD_SMART_CARD,
+	MOD_SDHC,
+	MOD_STREAM,
+	MOD_BLK_MOV,
+	MOD_MISC_DVIN,
+	MOD_USB,
+	MOD_SDIO,
+	MOD_MAX_NUM,
+} mod_type_t;
+
+#define GATE_ON(_MOD) \
+	do { \
+		if (0) printk(KERN_INFO "gate on %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+		SET_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+	} while(0)
+
+
+#define GATE_OFF(_MOD) \
+	do { \
+		if (0) printk(KERN_INFO "gate off %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+		CLEAR_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+	} while(0)
+
+extern void switch_mod_gate_by_type(mod_type_t type, int flag);
+extern void switch_mod_gate_by_name(const char* mod_name, int flag);
+extern void power_gate_init(void);
+extern void switch_lcd_mod_gate(int flag);
+
+#endif // __MACH_MESONG9TV_MOD_GATE_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/pinmux.h b/arch/arm/mach-mesong9tv/include/mach/pinmux.h
new file mode 100644
index 000000000000..283a28584be9
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/pinmux.h
@@ -0,0 +1,76 @@
+//      pinmux.h
+//      
+//      Copyright 2011 Unknown <jerry.yu@jerryyu-Lenovo>
+//      
+//      This program is free software; you can redistribute it and/or modify
+//      it under the terms of the GNU General Public License as published by
+//      the Free Software Foundation; either version 2 of the License, or
+//      (at your option) any later version.
+//      
+//      This program is distributed in the hope that it will be useful,
+//      but WITHOUT ANY WARRANTY; without even the implied warranty of
+//      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//      GNU General Public License for more details.
+//      
+//      You should have received a copy of the GNU General Public License
+//      along with this program; if not, write to the Free Software
+//      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+//      MA 02110-1301, USA.
+//      
+//      
+#ifndef __INCLUDE_MACH_MESON3_H_
+#define __INCLUDE_MACH_MESON3_H_
+#include <linux/types.h>
+#define AO				10
+#define PINMUX_REG(n)	n
+#define PINMUX_END_ITEM {.reg=0xffffffff}
+
+
+
+/**
+ * structure and data type
+ */
+typedef struct __pinmux_item{
+	uint32_t reg;
+	uint32_t clrmask;
+	uint32_t setmask;
+}pinmux_item_t;
+struct __pinmux_set_s{
+	bool (* chip_select)(bool);///@todo implement it later .
+	pinmux_item_t * pinmux;
+};
+
+typedef struct __pinmux_set_s pinmux_set_t;
+
+/**
+ * UTIL interface  
+ * these function can be implement in a tools
+ */
+ /**
+  * @return NULL is fail
+  * 		errno NOTAVAILABLE , 
+  * 			  SOMEPIN IS LOCKED
+  */
+pinmux_set_t* pinmux_cacl_str(char * pad,char * sig ,...);
+pinmux_set_t* pinmux_cacl_int(uint32_t pad,uint32_t sig ,...);
+pinmux_set_t* pinmux_cacl(char * str);///formate is "pad=sig pad=sig "
+char ** pin_get_list(void);
+char ** sig_get_list(void);
+char * pin_getname(uint32_t pin);
+char * sig_getname(uint32_t sig);
+uint32_t pins_num(void);
+/**
+ * Util Get status function
+ */
+uint32_t pin_sig(uint32_t pin);
+uint32_t sig_pin(uint32_t sig);
+/**
+ * pinmux set function
+ * @return 0, success , 
+ * 		   SOMEPIN IS LOCKED, some pin is locked to the specail feature . You can not change it
+ * 		   NOTAVAILABLE, not available .
+ */
+int32_t pinmux_set(pinmux_set_t *);
+int32_t pinmux_clr(pinmux_set_t *);
+int32_t pinmux_set_locktable(pinmux_set_t*);
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/pm.h b/arch/arm/mach-mesong9tv/include/mach/pm.h
new file mode 100644
index 000000000000..a4095866e2da
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/pm.h
@@ -0,0 +1,32 @@
+#ifndef _MACH_MESON_PM_H
+#define _MACH_MESON_PM_H
+
+/*
+ * Caution: Assembly code in sleep.S makes assumtion on the order
+ * of the members of this structure.
+ */
+struct meson_pm_config {
+    void __iomem *pctl_reg_base;
+    void __iomem *mmc_reg_base;
+    void __iomem *hiu_reg_base;
+    unsigned power_key;
+    unsigned ddr_clk;
+    void __iomem *ddr_reg_backup;
+    unsigned core_voltage_adjust;
+    int sleepcount;
+    void (*set_vccx2)(int power_on);
+    void (*set_exgpio_early_suspend)(int power_on);
+};
+
+extern unsigned int meson_cpu_suspend_sz;
+extern void meson_cpu_suspend(struct meson_pm_config *);
+extern void power_gate_switch(int flag);
+extern void clk_switch(int flag);
+//extern void pll_switch(int flag);
+extern void early_power_gate_switch(int flag);
+extern void early_clk_switch(int flag);
+//extern void early_pll_switch(int flag);
+#ifdef CONFIG_MESON_SUSPEND
+extern int meson_power_suspend(void);
+#endif /*CONFIG_MESON_SUSPEND*/
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/power_gate.h b/arch/arm/mach-mesong9tv/include/mach/power_gate.h
new file mode 100644
index 000000000000..877824773d57
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/power_gate.h
@@ -0,0 +1,947 @@
+#/*
+ * arch/arm/mach-mesong9tv/include/mach/mod_gate.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_POWER_GATE_H
+#define __MACH_MESONG9TV_POWER_GATE_H
+
+#include <mach/am_regs.h>
+#include <mach/clock.h>
+#include <linux/spinlock.h>
+/* clock gate control */
+
+#define __CLK_GATE_ON(_MOD) \
+	do{                     \
+		if(GCLK_ref[GCLK_IDX_##_MOD]++ == 0){ \
+			if (0) printk(KERN_INFO "gate on %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+			SET_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+		} \
+	}while(0)
+
+
+#define __CLK_GATE_OFF(_MOD) \
+	do{                             \
+		if(--GCLK_ref[GCLK_IDX_##_MOD] <= 0){ \
+			if (0) printk(KERN_INFO "gate off %s %x, %x\n", GCLK_NAME_##_MOD, GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+			CLEAR_CBUS_REG_MASK(GCLK_REG_##_MOD, GCLK_MASK_##_MOD); \
+			GCLK_ref[GCLK_IDX_##_MOD] = 0; \
+		} \
+	}while(0)
+
+#define IS_CLK_GATE_ON(_MOD) (READ_CBUS_REG(GCLK_REG_##_MOD) & (GCLK_MASK_##_MOD))
+#define GATE_INIT(_MOD) GCLK_ref[GCLK_IDX_##_MOD] = IS_CLK_GATE_ON(_MOD)?1:0
+
+extern spinlock_t gate_lock;
+
+#define CLK_GATE_ON(_MOD) \
+	do{                     \
+		unsigned long flags; \
+		spin_lock_irqsave(&gate_lock, flags); \
+		__CLK_GATE_ON(_MOD); \
+		spin_unlock_irqrestore(&gate_lock, flags); \
+	}while(0)
+
+#define CLK_GATE_OFF(_MOD) \
+	do{                     \
+		unsigned long flags; \
+		spin_lock_irqsave(&gate_lock, flags); \
+		__CLK_GATE_OFF(_MOD); \
+		spin_unlock_irqrestore(&gate_lock, flags); \
+	}while(0)
+
+
+
+/*
+ * HHI_GCLK_MPEG0	0x1050
+ */
+
+#define GCLK_IDX_DDR				0
+#define GCLK_NAME_DDR				"DDR"
+#define GCLK_DEV_DDR				"CLKGATE_DDR"
+#define GCLK_REG_DDR				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_DDR				(1<<0)
+
+#define GCLK_IDX_DOS				1
+#define GCLK_NAME_DOS				"DOS"
+#define GCLK_DEV_DOS				"CLKGATE_DOS"
+#define GCLK_REG_DOS				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_DOS				(1<<1)
+
+#define GCLK_IDX_RESERVED0			2
+#define GCLK_NAME_RESERVED0			"RESERVED0"
+#define GCLK_DEV_RESERVED0			"CLKGATE_RESERVED0"
+#define GCLK_REG_RESERVED0			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED0			(1<<2)
+
+#define GCLK_IDX_RESERVED1			3
+#define GCLK_NAME_RESERVED1			"RESERVED1"
+#define GCLK_DEV_RESERVED1			"CLKGATE_RESERVED1"
+#define GCLK_REG_RESERVED1			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED1			(1<<3)
+
+#define GCLK_IDX_AHB_BRIDGE			4
+#define GCLK_NAME_AHB_BRIDGE			"AHB_BRIDGE"
+#define GCLK_DEV_AHB_BRIDGE			"CLKGATE_AHB_BRIDGE"
+#define GCLK_REG_AHB_BRIDGE			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_AHB_BRIDGE			(1<<4)
+
+#define GCLK_IDX_ISA				5
+#define GCLK_NAME_ISA				"ISA"
+#define GCLK_DEV_ISA				"CLKGATE_ISA"
+#define GCLK_REG_ISA				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_ISA				(1<<5)
+
+#define GCLK_IDX_PL310_CBUS			6
+#define GCLK_NAME_PL310_CBUS			"PL310_CBUS"
+#define GCLK_DEV_PL310_CBUS			"CLKGATE_PL310_CBUS"
+#define GCLK_REG_PL310_CBUS			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_PL310_CBUS			(1<<6)
+
+#define GCLK_IDX_PERIPHS_TOP			7
+#define GCLK_NAME_PERIPHS_TOP			"PERIPHS_TOP"
+#define GCLK_DEV_PERIPHS_TOP			"CLKGATE_PERIPHS_TOP"
+#define GCLK_REG_PERIPHS_TOP			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_PERIPHS_TOP			(1<<7)
+
+#define GCLK_IDX_SPICC				8
+#define GCLK_NAME_SPICC				"SPICC"
+#define GCLK_DEV_SPICC				"CLKGATE_SPICC"
+#define GCLK_REG_SPICC				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_SPICC				(1<<8)
+
+#define GCLK_IDX_I2C				9
+#define GCLK_NAME_I2C				"I2C"
+#define GCLK_DEV_I2C				"CLKGATE_I2C"
+#define GCLK_REG_I2C				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_I2C				(1<<9)
+
+#define GCLK_IDX_SAR_ADC			10
+#define GCLK_NAME_SAR_ADC			"SAR_ADC"
+#define GCLK_DEV_SAR_ADC			"CLKGATE_SAR_ADC"
+#define GCLK_REG_SAR_ADC			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_SAR_ADC			(1<<10)
+
+#define GCLK_IDX_SMART_CARD_MPEG_DOMAIN		11
+#define GCLK_NAME_SMART_CARD_MPEG_DOMAIN	"SMART_CARD_MPEG_DOMAIN"
+#define GCLK_DEV_SMART_CARD_MPEG_DOMAIN		"CLKGATE_SMART_CARD_MPEG_DOMAIN"
+#define GCLK_REG_SMART_CARD_MPEG_DOMAIN		(HHI_GCLK_MPEG0)
+#define GCLK_MASK_SMART_CARD_MPEG_DOMAIN	(1<<11)
+
+#define GCLK_IDX_RANDOM_NUM_GEN			12
+#define GCLK_NAME_RANDOM_NUM_GEN		"RANDOM_NUM_GEN"
+#define GCLK_DEV_RANDOM_NUM_GEN			"CLKGATE_RANDOM_NUM_GEN"
+#define GCLK_REG_RANDOM_NUM_GEN			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RANDOM_NUM_GEN		(1<<12)
+
+#define GCLK_IDX_UART0				13
+#define GCLK_NAME_UART0				"UART0"
+#define GCLK_DEV_UART0				"CLKGATE_UART0"
+#define GCLK_REG_UART0				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_UART0				(1<<13)
+
+#define GCLK_IDX_SDHC				14
+#define GCLK_NAME_SDHC				"SDHC"
+#define GCLK_DEV_SDHC				"CLKGATE_SDHC"
+#define GCLK_REG_SDHC				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_SDHC				(1<<14)
+
+#define GCLK_IDX_STREAM				15
+#define GCLK_NAME_STREAM			"STREAM"
+#define GCLK_DEV_STREAM				"CLKGATE_STREAM"
+#define GCLK_REG_STREAM				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_STREAM			(1<<15)
+
+#define GCLK_IDX_ASYNC_FIFO			16
+#define GCLK_NAME_ASYNC_FIFO			"ASYNC_FIFO"
+#define GCLK_DEV_ASYNC_FIFO			"CLKGATE_ASYNC_FIFO"
+#define GCLK_REG_ASYNC_FIFO			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_ASYNC_FIFO			(1<<16)
+
+#define GCLK_IDX_SDIO				17
+#define GCLK_NAME_SDIO				"SDIO"
+#define GCLK_DEV_SDIO				"CLKGATE_SDIO"
+#define GCLK_REG_SDIO				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_SDIO				(1<<17)
+
+#define GCLK_IDX_RESERVED2			18
+#define GCLK_NAME_RESERVED2			"RESERVED2"
+#define GCLK_DEV_RESERVED2			"CLKGATE_RESERVED2"
+#define GCLK_REG_RESERVED2			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED2 			(1<<18)
+
+#define GCLK_IDX_HIU_PARSER			19
+#define GCLK_NAME_HIU_PARSER			"HIU_PARSER"
+#define GCLK_DEV_HIU_PARSER			"CLKGATE_HIU_PARSER"
+#define GCLK_REG_HIU_PARSER			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_HIU_PARSER			(1<<19)
+
+#define GCLK_IDX_RESERVED3			20
+#define GCLK_NAME_RESERVED3			"RESERVED3"
+#define GCLK_DEV_RESERVED3			"CLKGATE_RESERVED3"
+#define GCLK_REG_RESERVED3			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED3			(1<<20)
+
+#define GCLK_IDX_HDMIRX_PCLK			21
+#define GCLK_NAME_HDMIRX_PCLK			"HDMIRX_PCLK"
+#define GCLK_DEV_HDMIRX_PCLK			"CLKGATE_HDMIRX_PCLK "
+#define GCLK_REG_HDMIRX_PCLK			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_HDMIRX_PCLK			(1<<21)
+
+#define GCLK_IDX_BT656				22
+#define GCLK_NAME_BT656				"BT656"
+#define GCLK_DEV_BT656				"CLKGATE_BT656"
+#define GCLK_REG_BT656				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_BT656				(1<<22)
+
+#define GCLK_IDX_ASSIST_MISC			23
+#define GCLK_NAME_ASSIST_MISC			"ASSIST_MISC"
+#define GCLK_DEV_ASSIST_MISC			"CLKGATE_ASSIST_MISC"
+#define GCLK_REG_ASSIST_MISC			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_ASSIST_MISC			(1<<23)
+
+
+#define GCLK_IDX_RESERVED5			24
+#define GCLK_NAME_RESERVED5			"RESERVED5"
+#define GCLK_DEV_RESERVED5			"CLKGATE_RESERVED5"
+#define GCLK_REG_RESERVED5			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED5			(1<<24)
+
+#define GCLK_IDX_RESERVED6			25
+#define GCLK_NAME_RESERVED6			"RESERVED6"
+#define GCLK_DEV_RESERVED6			"CLKGATE_RESERVED6"
+#define GCLK_REG_RESERVED6			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED6			(1<<25)
+
+#define GCLK_IDX_RESERVED7			26
+#define GCLK_NAME_RESERVED7			"RESERVED7"
+#define GCLK_DEV_RESERVED7			"CLKGATE_RESERVED7"
+#define GCLK_REG_RESERVED7			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED7			(1<<26)
+
+#define GCLK_IDX_RESERVED8			27
+#define GCLK_NAME_RESERVED8			"RESERVED8"
+#define GCLK_DEV_RESERVED8			"CLKGATE_RESERVED8"
+#define GCLK_REG_RESERVED8			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED8			(1<<27)
+
+#define GCLK_IDX_RESERVED9			28
+#define GCLK_NAME_RESERVED9			"RESERVED9"
+#define GCLK_DEV_RESERVED9			"CLKGATE_RESERVED9"
+#define GCLK_REG_RESERVED9			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED9			(1<<28)
+
+#define GCLK_IDX_RESERVED10			29
+#define GCLK_NAME_RESERVED10			"RESERVED10"
+#define GCLK_DEV_RESERVED10			"CLKGATE_RESERVED10"
+#define GCLK_REG_RESERVED10			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED10			(1<<29)
+
+#define GCLK_IDX_SPI				30
+#define GCLK_NAME_SPI				"SPI"
+#define GCLK_DEV_SPI				"CLKGATE_SPI"
+#define GCLK_REG_SPI				(HHI_GCLK_MPEG0)
+#define GCLK_MASK_SPI				(1<<30)
+
+#define GCLK_IDX_RESERVED11			31
+#define GCLK_NAME_RESERVED11			"RESERVED11"
+#define GCLK_DEV_RESERVED11			"CLKGATE_RESERVED11"
+#define GCLK_REG_RESERVED11			(HHI_GCLK_MPEG0)
+#define GCLK_MASK_RESERVED11			(1<<31)
+
+
+
+/*
+ * HHI_GCLK_MPEG1	0x1051
+ */
+
+#define GCLK_IDX_TVFE_PCLK			32
+#define GCLK_NAME_TVFE_PCLK			"TVFE_PCLK"
+#define GCLK_DEV_TVFE_PCLK			"CLKGATE_TVFE_PCLK"
+#define GCLK_REG_TVFE_PCLK			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_TVFE_PCLK			(1<<0)
+
+
+#define GCLK_IDX_RESERVED1_0			33
+#define GCLK_NAME_RESERVED1_0			"RESERVED1_0"
+#define GCLK_DEV_RESERVED1_0			"CLKGATE_RESERVED1_0"
+#define GCLK_REG_RESERVED1_0			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_0			(1<<1)
+
+
+#define GCLK_IDX_AUD_IN				34
+#define GCLK_NAME_AUD_IN			"AUD_IN"
+#define GCLK_DEV_AUD_IN				"CLKGATE_AUD_IN"
+#define GCLK_REG_AUD_IN				(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AUD_IN			(1<<2)
+
+#define GCLK_IDX_ETHERNET			35
+#define GCLK_NAME_ETHERNET			"ETHERNET"
+#define GCLK_DEV_ETHERNET			"CLKGATE_ETHERNET"
+#define GCLK_REG_ETHERNET			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_ETHERNET			(1<<3)
+
+#define GCLK_IDX_DEMUX				36
+#define GCLK_NAME_DEMUX				"DEMUX"
+#define GCLK_DEV_DEMUX				"CLKGATE_DEMUX"
+#define GCLK_REG_DEMUX				(HHI_GCLK_MPEG1)
+#define GCLK_MASK_DEMUX				(1<<4)
+
+#define GCLK_IDX_RESERVED1_1			37
+#define GCLK_NAME_RESERVED1_1			"RESERVED1_1"
+#define GCLK_DEV_RESERVED1_1			"CLKGATE_RESERVED1_1"
+#define GCLK_REG_RESERVED1_1			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_1			(1<<5)
+
+#define GCLK_IDX_AIU_AI_TOP_GLUE		38
+#define GCLK_NAME_AIU_AI_TOP_GLUE		"AIU_AI_TOP_GLUE"
+#define GCLK_DEV_AIU_AI_TOP_GLUE		"CLKGATE_AIU_AI_TOP_GLUE"
+#define GCLK_REG_AIU_AI_TOP_GLUE		(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AI_TOP_GLUE		(1<<6)
+
+#define GCLK_IDX_AIU_IEC958			39
+#define GCLK_NAME_AIU_IEC958			"AIU_IEC958"
+#define GCLK_DEV_AIU_IEC958			"CLKGATE_AIU_IEC958"
+#define GCLK_REG_AIU_IEC958			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_IEC958			(1<<7)
+
+#define GCLK_IDX_AIU_I2S_OUT			40
+#define GCLK_NAME_AIU_I2S_OUT			"AIU_I2S_OUT"
+#define GCLK_DEV_AIU_I2S_OUT			"CLKGATE_AIU_I2S_OUT"
+#define GCLK_REG_AIU_I2S_OUT			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_I2S_OUT			(1<<8)
+
+#define GCLK_IDX_AIU_AMCLK_MEASURE		41
+#define GCLK_NAME_AIU_AMCLK_MEASURE		"AIU_AMCLK_MEASURE"
+#define GCLK_DEV_AIU_AMCLK_MEASURE		"CLKGATE_AIU_AMCLK_MEASURE"
+#define GCLK_REG_AIU_AMCLK_MEASURE		(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AMCLK_MEASURE 		(1<<9)
+
+#define GCLK_IDX_AIU_AIFIFO2			42
+#define GCLK_NAME_AIU_AIFIFO2			"AIU_AIFIFO2"
+#define GCLK_DEV_AIU_AIFIFO2			"CLKGATE_AIU_AIFIFO2"
+#define GCLK_REG_AIU_AIFIFO2			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AIFIFO2			(1<<10)
+
+#define GCLK_IDX_AIU_AUD_MIXER			43
+#define GCLK_NAME_AIU_AUD_MIXER			"AIU_AUD_MIXER"
+#define GCLK_DEV_AIU_AUD_MIXER			"CLKGATE_AIU_AUD_MIXER"
+#define GCLK_REG_AIU_AUD_MIXER			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_AUD_MIXER			(1<<11)
+
+#define GCLK_IDX_AIU_MIXER_REG			44
+#define GCLK_NAME_AIU_MIXER_REG			"AIU_MIXER_REG"
+#define GCLK_DEV_AIU_MIXER_REG			"CLKGATE_AIU_MIXER_REG"
+#define GCLK_REG_AIU_MIXER_REG			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_MIXER_REG			(1<<12)
+
+#define GCLK_IDX_AIU_ADC			45
+#define GCLK_NAME_AIU_ADC			"AIU_ADC"
+#define GCLK_DEV_AIU_ADC			"CLKGATE_AIU_ADC"
+#define GCLK_REG_AIU_ADC			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_ADC			(1<<13)
+
+#define GCLK_IDX_BLK_MOV			46
+#define GCLK_NAME_BLK_MOV			"BLK_MOV"
+#define GCLK_DEV_BLK_MOV			"CLKGATE_BLK_MOV"
+#define GCLK_REG_BLK_MOV			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_BLK_MOV			(1<<14)
+
+#define GCLK_IDX_AIU_TOP_LEVEL			47
+#define GCLK_NAME_AIU_TOP_LEVEL			"AIU_TOP_LEVEL"
+#define GCLK_DEV_AIU_TOP_LEVEL			"CLKGATE_AIU_TOP_LEVEL"
+#define GCLK_REG_AIU_TOP_LEVEL			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AIU_TOP_LEVEL			(1<<15)
+
+#define GCLK_IDX_UART1				48
+#define GCLK_NAME_UART1				"UART1"
+#define GCLK_DEV_UART1				"CLKGATE_UART1"
+#define GCLK_REG_UART1				(HHI_GCLK_MPEG1)
+#define GCLK_MASK_UART1				(1<<16)
+
+#define GCLK_IDX_RESERVED1_3			49
+#define GCLK_NAME_RESERVED1_3			"RESERVED1_3"
+#define GCLK_DEV_RESERVED1_3			"CLKGATE_RESERVED1_3"
+#define GCLK_REG_RESERVED1_3			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_3			(1<<17)
+
+#define GCLK_IDX_RESERVED1_4			50
+#define GCLK_NAME_RESERVED1_4			"RESERVED1_4"
+#define GCLK_DEV_RESERVED1_4			"CLKGATE_RESERVED1_4"
+#define GCLK_REG_RESERVED1_4			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_4			(1<<18)
+
+#define GCLK_IDX_RESERVED1_5			51
+#define GCLK_NAME_RESERVED1_5			"RESERVED1_5"
+#define GCLK_DEV_RESERVED1_5			"CLKGATE_RESERVED1_5"
+#define GCLK_REG_RESERVED1_5			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_5			(1<<19)
+
+#define GCLK_IDX_GE2D				52
+#define GCLK_NAME_GE2D				"GE2D"
+#define GCLK_DEV_GE2D				"CLKGATE_GE2D"
+#define GCLK_REG_GE2D				(HHI_GCLK_MPEG1)
+#define GCLK_MASK_GE2D				(1<<20)
+
+#define GCLK_IDX_RESERVED1_6			53
+#define GCLK_NAME_RESERVED1_6			"RESERVED1_6"
+#define GCLK_DEV_RESERVED1_6			"CLKGATE_RESERVED1_6"
+#define GCLK_REG_RESERVED1_6			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_6			(1<<21)
+
+#define GCLK_IDX_RESERVED1_7			54
+#define GCLK_NAME_RESERVED1_7			"RESERVED1_7"
+#define GCLK_DEV_RESERVED1_7			"CLKGATE_RESERVED1_7"
+#define GCLK_REG_RESERVED1_7			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_7			(1<<22)
+
+#define GCLK_IDX_RESET				55
+#define GCLK_NAME_RESET				"RESET"
+#define GCLK_DEV_RESET				"CLKGATE_RESET"
+#define GCLK_REG_RESET				(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESET				(1<<23)
+
+#define GCLK_IDX_RESERVED1_8			56
+#define GCLK_NAME_RESERVED1_8			"RESERVED1_8"
+#define GCLK_DEV_RESERVED1_8			"CLKGATE_RESERVED1_8"
+#define GCLK_REG_RESERVED1_8			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_8			(1<<24)
+
+#define GCLK_IDX_HIU_PARSER_TOP			57
+#define GCLK_NAME_HIU_PARSER_TOP		"HIU_PARSER_TOP"
+#define GCLK_DEV_HIU_PARSER_TOP			"CLKGATE_HIU_PARSER_TOP"
+#define GCLK_REG_HIU_PARSER_TOP			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_HIU_PARSER_TOP		(1<<25)
+
+#define GCLK_IDX_USB_GENERAL			58
+#define GCLK_NAME_USB_GENERAL			"USB_GENERAL"
+#define GCLK_DEV_USB_GENERAL			"CLKGATE_USB_GENERAL"
+#define GCLK_REG_USB_GENERAL			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_USB_GENERAL			(1<<26)
+
+#define GCLK_IDX_RESERVED1_9			59
+#define GCLK_NAME_RESERVED1_9			"RESERVED1_9"
+#define GCLK_DEV_RESERVED1_9			"CLKGATE_RESERVED1_9"
+#define GCLK_REG_RESERVED1_9			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_RESERVED1_9			(1<<27)
+
+#define GCLK_IDX_VDIN1				60
+#define GCLK_NAME_VDIN1				"VDIN1"
+#define GCLK_DEV_VDIN1				"CLKGATE_VDIN1"
+#define GCLK_REG_VDIN1				(HHI_GCLK_MPEG1)
+#define GCLK_MASK_VDIN1				(1<<28)
+
+#define GCLK_IDX_AHB_ARB0			61
+#define GCLK_NAME_AHB_ARB0			"AHB_ARB0"
+#define GCLK_DEV_AHB_ARB0			"CLKGATE_AHB_ARB0"
+#define GCLK_REG_AHB_ARB0			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_AHB_ARB0			(1<<29)
+
+#define GCLK_IDX_EFUSE				62
+#define GCLK_NAME_EFUSE				"EFUSE"
+#define GCLK_DEV_EFUSE				"CLKGATE_EFUSE"
+#define GCLK_REG_EFUSE				(HHI_GCLK_MPEG1)
+#define GCLK_MASK_EFUSE				(1<<30)
+
+#define GCLK_IDX_ROM_CLK			63
+#define GCLK_NAME_ROM_CLK			"ROM_CLK"
+#define GCLK_DEV_ROM_CLK			"CLKGATE_ROM_CLK"
+#define GCLK_REG_ROM_CLK			(HHI_GCLK_MPEG1)
+#define GCLK_MASK_ROM_CLK			(1<<31)
+
+
+
+/*
+ * HHI_GCLK_MPEG2	0x1052
+ */
+
+#define GCLK_IDX_RESERVED2_0			64
+#define GCLK_NAME_RESERVED2_0			"RESERVED2_0"
+#define GCLK_DEV_RESERVED2_0			"CLKGATE_RESERVED2_0"
+#define GCLK_REG_RESERVED2_0			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_0			(1<<0)
+
+#define GCLK_IDX_AHB_DATA_BUS			65
+#define GCLK_NAME_AHB_DATA_BUS			"AHB_DATA_BUS"
+#define GCLK_DEV_AHB_DATA_BUS			"CLKGATE_AHB_DATA_BUS"
+#define GCLK_REG_AHB_DATA_BUS			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_AHB_DATA_BUS			(1<<1)
+
+#define GCLK_IDX_AHB_CONTROL_BUS		66
+#define GCLK_NAME_AHB_CONTROL_BUS		"AHB_CONTROL_BUS"
+#define GCLK_DEV_AHB_CONTROL_BUS		"CLKGATE_AHB_CONTROL_BUS"
+#define GCLK_REG_AHB_CONTROL_BUS		(HHI_GCLK_MPEG2)
+#define GCLK_MASK_AHB_CONTROL_BUS		(1<<2)
+
+#define GCLK_IDX_HDMI_INTR_SYNC			67
+#define GCLK_NAME_HDMI_INTR_SYNC		"HDMI_INTR_SYNC"
+#define GCLK_DEV_HDMI_INTR_SYNC			"CLKGATE_HDMI_INTR_SYNC"
+#define GCLK_REG_HDMI_INTR_SYNC			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_HDMI_INTR_SYNC		(1<<3)
+
+#define GCLK_IDX_HDMI_PCLK			68
+#define GCLK_NAME_HDMI_PCLK			"HDMI_PCLK"
+#define GCLK_DEV_HDMI_PCLK			"CLKGATE_HDMI_PCLK"
+#define GCLK_REG_HDMI_PCLK			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_HDMI_PCLK			(1<<4)
+
+#define GCLK_IDX_RESERVED2_1			69
+#define GCLK_NAME_RESERVED2_1			"RESERVED2_1"
+#define GCLK_DEV_RESERVED2_1			"CLKGATE_RESERVED2_1"
+#define GCLK_REG_RESERVED2_1			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_1			(1<<5)
+
+#define GCLK_IDX_RESERVED2_2			70
+#define GCLK_NAME_RESERVED2_2			"RESERVED2_2"
+#define GCLK_DEV_RESERVED2_2			"CLKGATE_RESERVED2_2"
+#define GCLK_REG_RESERVED2_2			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_2			(1<<6)
+
+#define GCLK_IDX_RESERVED2_3			71
+#define GCLK_NAME_RESERVED2_3			"RESERVED2_3"
+#define GCLK_DEV_RESERVED2_3			"CLKGATE_RESERVED2_3"
+#define GCLK_REG_RESERVED2_3			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_3			(1<<7)
+
+#define GCLK_IDX_MISC_USB_TO_DDR		72
+#define GCLK_NAME_MISC_USB_TO_DDR		"MISC_USB_TO_DDR"
+#define GCLK_DEV_MISC_USB_TO_DDR		"CLKGATE_MISC_USB_TO_DDR"
+#define GCLK_REG_MISC_USB_TO_DDR		(HHI_GCLK_MPEG2)
+#define GCLK_MASK_MISC_USB_TO_DDR		(1<<8)
+
+#define GCLK_IDX_MISC_RESERVED2_4		73
+#define GCLK_NAME_MISC_RESERVED2_4		"RESERVED2_4"
+#define GCLK_DEV_MISC_RESERVED2_4		"CLKGATE_RESERVED2_4"
+#define GCLK_REG_MISC_RESERVED2_4		(HHI_GCLK_MPEG2)
+#define GCLK_MASK_MISC_RESERVED2_4		(1<<9)
+
+#define GCLK_IDX_RESERVED2_5			74
+#define GCLK_NAME_RESERVED2_5			"RESERVED2_5"
+#define GCLK_DEV_RESERVED2_5			"CLKGATE_RESERVED2_5"
+#define GCLK_REG_RESERVED2_5			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_5			(1<<10)
+
+#define GCLK_IDX_MMC_PCLK			75
+#define GCLK_NAME_MMC_PCLK			"MMC_PCLK"
+#define GCLK_DEV_MMC_PCLK			"CLKGATE_MMC_PCLK"
+#define GCLK_REG_MMC_PCLK			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_MMC_PCLK			(1<<11)
+
+#define GCLK_IDX_MISC_DVIN			76
+#define GCLK_NAME_MISC_DVIN			"MISC_DVIN"
+#define GCLK_DEV_MISC_DVIN			"CLKGATE_MISC_DVIN"
+#define GCLK_REG_MISC_DVIN			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_MISC_DVIN			(1<<12)
+
+#define GCLK_IDX_RESERVED2_6			77
+#define GCLK_NAME_RESERVED2_6			"RESERVED2_6"
+#define GCLK_DEV_RESERVED2_6			"CLKGATE_RESERVED2_6"
+#define GCLK_REG_RESERVED2_6			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_6			(1<<13)
+
+#define GCLK_IDX_RESERVED2_7			78
+#define GCLK_NAME_RESERVED2_7			"RESERVED2_7"
+#define GCLK_DEV_RESERVED2_7			"CLKGATE_RESERVED2_7"
+#define GCLK_REG_RESERVED2_7			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_7			(1<<14)
+
+#define GCLK_IDX_UART2				79
+#define GCLK_NAME_UART2				"UART2"
+#define GCLK_DEV_UART2				"CLKGATE_UART2"
+#define GCLK_REG_UART2				(HHI_GCLK_MPEG2)
+#define GCLK_MASK_UART2				(1<<15)
+
+#define GCLK_IDX_RESERVED2_8			80
+#define GCLK_NAME_RESERVED2_8			"RESERVED2_8"
+#define GCLK_DEV_RESERVED2_8			"CLKGATE_RESERVED2_8"
+#define GCLK_REG_RESERVED2_8			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_8			(1<<16)
+
+#define GCLK_IDX_RESERVED2_9			81
+#define GCLK_NAME_RESERVED2_9			"RESERVED2_9"
+#define GCLK_DEV_RESERVED2_9			"CLKGATE_RESERVED2_9"
+#define GCLK_REG_RESERVED2_9			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_9			(1<<17)
+
+#define GCLK_IDX_RESERVED2_A			82
+#define GCLK_NAME_RESERVED2_A			"RESERVED2_A"
+#define GCLK_DEV_RESERVED2_A			"CLKGATE_RESERVED2_A"
+#define GCLK_REG_RESERVED2_A			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_A			(1<<18)
+
+#define GCLK_IDX_RESERVED2_B			83
+#define GCLK_NAME_RESERVED2_B			"RESERVED2_B"
+#define GCLK_DEV_RESERVED2_B			"CLKGATE_RESERVED2_B"
+#define GCLK_REG_RESERVED2_B			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_B			(1<<19)
+
+#define GCLK_IDX_RESERVED2_C			84
+#define GCLK_NAME_RESERVED2_C			"RESERVED2_C"
+#define GCLK_DEV_RESERVED2_C			"CLKGATE_RESERVED2_C"
+#define GCLK_REG_RESERVED2_C			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_C			(1<<20)
+
+#define GCLK_IDX_RESERVED2_D			85
+#define GCLK_NAME_RESERVED2_D			"RESERVED2_D"
+#define GCLK_DEV_RESERVED2_D			"CLKGATE_RESERVED2_D"
+#define GCLK_REG_RESERVED2_D			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_D			(1<<21)
+
+#define GCLK_IDX_SANA				86
+#define GCLK_NAME_SANA				"SANA"
+#define GCLK_DEV_SANA				"CLKGATE_SANA"
+#define GCLK_REG_SANA				(HHI_GCLK_MPEG2)
+#define GCLK_MASK_SANA				(1<<22)
+
+#define GCLK_IDX_RESERVED2_E			87
+#define GCLK_NAME_RESERVED2_E			"RESERVED2_E"
+#define GCLK_DEV_RESERVED2_E			"CLKGATE_RESERVED2_E"
+#define GCLK_REG_RESERVED2_E			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_E			(1<<23)
+
+#define GCLK_IDX_RESERVED2_F			88
+#define GCLK_NAME_RESERVED2_F			"RESERVED2_F"
+#define GCLK_DEV_RESERVED2_F			"CLKGATE_RESERVED2_F"
+#define GCLK_REG_RESERVED2_F			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_F			(1<<24)
+
+#define GCLK_IDX_VPU_INTR			89
+#define GCLK_NAME_VPU_INTR			"VPU_INTR"
+#define GCLK_DEV_VPU_INTR			"CLKGATE_VPU_INTR"
+#define GCLK_REG_VPU_INTR			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_VPU_INTR			(1<<25)
+
+#define GCLK_IDX_SECURE_AHP_APB3		90
+#define GCLK_NAME_SECURE_AHP_APB3		"SECURE_AHP_APB3"
+#define GCLK_DEV_SECURE_AHP_APB3		"CLKGATE_SECURE_AHP_APB3"
+#define GCLK_REG_SECURE_AHP_APB3		(HHI_GCLK_MPEG2)
+#define GCLK_MASK_SECURE_AHP_APB3		(1<<26)
+
+#define GCLK_IDX_DEMOD_PCLK 			91
+#define GCLK_NAME_DEMOD_PCLK			"DEMOD_PCLK"
+#define GCLK_DEV_DEMOD_PCLK			"CLKGATE_DEMOD_PCLK"
+#define GCLK_REG_DEMOD_PCLK			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_DEMOD_PCLK			(1<<27)
+
+#define GCLK_IDX_MCLK_TVFE			92
+#define GCLK_NAME_MCLK_TVFE			"MCLK_TVFE"
+#define GCLK_DEV_MCLK_TVFE			"CLKGATE_MCLK_TVFE"
+#define GCLK_REG_MCLK_TVFE			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_MCLK_TVFE			(1<<28)
+
+#define GCLK_IDX_CLK81_TO_A9			93
+#define GCLK_NAME_CLK81_TO_A9			"CLK81_TO_A9"
+#define GCLK_DEV_CLK81_TO_A9			"CLKGATE_CLK81_TO_A9"
+#define GCLK_REG_CLK81_TO_A9			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_CLK81_TO_A9			(1<<29)
+
+#define GCLK_IDX_RESERVED2_11			94
+#define GCLK_NAME_RESERVED2_11			"RESERVED2_11"
+#define GCLK_DEV_RESERVED2_11			"CLKGATE_RESERVED2_11"
+#define GCLK_REG_RESERVED2_11			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_11			(1<<30)
+
+#define GCLK_IDX_RESERVED2_12			95
+#define GCLK_NAME_RESERVED2_12			"RESERVED2_12"
+#define GCLK_DEV_RESERVED2_12			"CLKGATE_RESERVED2_12"
+#define GCLK_REG_RESERVED2_12			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED2_12			(1<<31)
+
+/*
+ * HHI_GCLK_MPEG3	0x1054
+ */
+
+#define GCLK_IDX_RESERVED3_0			96
+#define GCLK_NAME_RESERVED3_0			"RESERVED3_0"
+#define GCLK_DEV_RESERVED3_0			"CLKGATE_RESERVED3_0"
+#define GCLK_REG_RESERVED3_0			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_0 			(1<<0)
+
+#define GCLK_IDX_VCLK2_VENCI			97
+#define GCLK_NAME_VCLK2_VENCI			"VCLK2_VENCI"
+#define GCLK_DEV_VCLK2_VENCI			"CLKGATE_VCLK2_VENCI"
+#define GCLK_REG_VCLK2_VENCI			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCI			(1<<1)
+
+#define GCLK_IDX_VCLK2_VENCI1			98
+#define GCLK_NAME_VCLK2_VENCI1			"VCLK2_VENCI1"
+#define GCLK_DEV_VCLK2_VENCI1			"CLKGATE_VCLK2_VENCI1"
+#define GCLK_REG_VCLK2_VENCI1			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCI1			(1<<2)
+
+#define GCLK_IDX_VCLK2_VENCP			99
+#define GCLK_NAME_VCLK2_VENCP			"VCLK2_VENCP"
+#define GCLK_DEV_VCLK2_VENCP			"CLKGATE_VCLK2_VENCP"
+#define GCLK_REG_VCLK2_VENCP			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCP			(1<<3)
+
+#define GCLK_IDX_VCLK2_VENCP1			100
+#define GCLK_NAME_VCLK2_VENCP1			"VCLK2_VENCP1"
+#define GCLK_DEV_VCLK2_VENCP1			"CLKGATE_VCLK2_VENCP1"
+#define GCLK_REG_VCLK2_VENCP1			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCP1			(1<<4)
+
+#define GCLK_IDX_VCLK2_VENCT			101
+#define GCLK_NAME_VCLK2_VENCT			"VCLK2_VENCT"
+#define GCLK_DEV_VCLK2_VENCT			"CLKGATE_VCLK2_VENCT"
+#define GCLK_REG_VCLK2_VENCT			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCT			(1<<5)
+
+#define GCLK_IDX_VCLK2_VENCT1			102
+#define GCLK_NAME_VCLK2_VENCT1			"VCLK2_VENCT1"
+#define GCLK_DEV_VCLK2_VENCT1			"CLKGATE_VCLK2_VENCT1"
+#define GCLK_REG_VCLK2_VENCT1			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCT1			(1<<6)
+
+#define GCLK_IDX_VCLK2_OTHER			103
+#define GCLK_NAME_VCLK2_OTHER			"VCLK2_OTHER"
+#define GCLK_DEV_VCLK2_OTHER			"CLKGATE_VCLK2_OTHER"
+#define GCLK_REG_VCLK2_OTHER			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_OTHER			(1<<7)
+
+#define GCLK_IDX_VCLK2_ENCI			104
+#define GCLK_NAME_VCLK2_ENCI			"VCLK2_ENCI"
+#define GCLK_DEV_VCLK2_ENCI			"CLKGATE_VCLK2_ENCI"
+#define GCLK_REG_VCLK2_ENCI			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_ENCI			(1<<8)
+
+#define GCLK_IDX_VCLK2_ENCP			105
+#define GCLK_NAME_VCLK2_ENCP			"VCLK2_ENCP"
+#define GCLK_DEV_VCLK2_ENCP			"CLKGATE_VCLK2_ENCP"
+#define GCLK_REG_VCLK2_ENCP			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_ENCP			(1<<9)
+
+#define GCLK_IDX_DAC_CLK			106
+#define GCLK_NAME_DAC_CLK			"DAC_CLK"
+#define GCLK_DEV_DAC_CLK			"CLKGATE_DAC_CLK"
+#define GCLK_REG_DAC_CLK			(HHI_GCLK_OTHER)
+#define GCLK_MASK_DAC_CLK			(1<<10)
+
+#define GCLK_IDX_RESERVED3_1			107
+#define GCLK_NAME_RESERVED3_1			"RESERVED3_1"
+#define GCLK_DEV_RESERVED3_1			"CLKGATE_RESERVED3_1"
+#define GCLK_REG_RESERVED3_1			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED3_1			(1<<11)
+
+#define GCLK_IDX_RESERVED3_2			108
+#define GCLK_NAME_RESERVED3_2			"RESERVED3_2"
+#define GCLK_DEV_RESERVED3_2			"CLKGATE_RESERVED3_2"
+#define GCLK_REG_RESERVED3_2			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED3_2			(1<<12)
+
+#define GCLK_IDX_RESERVED3_3			109
+#define GCLK_NAME_RESERVED3_3			"RESERVED3_3"
+#define GCLK_DEV_RESERVED3_3			"CLKGATE_RESERVED3_3"
+#define GCLK_REG_RESERVED3_3			(HHI_GCLK_MPEG2)
+#define GCLK_MASK_RESERVED3_3			(1<<13)
+
+#define GCLK_IDX_AIU_AOCLK			110
+#define GCLK_NAME_AIU_AOCLK			"AIU_AOCLK"
+#define GCLK_DEV_AIU_AOCLK			"CLKGATE_AIU_AOCLK"
+#define GCLK_REG_AIU_AOCLK			(HHI_GCLK_OTHER)
+#define GCLK_MASK_AIU_AOCLK			(1<<14)
+
+#define GCLK_IDX_RESERVED3_4			111
+#define GCLK_NAME_RESERVED3_4			"RESERVED3_4"
+#define GCLK_DEV_RESERVED3_4			"CLKGATE_RESERVED3_4"
+#define GCLK_REG_RESERVED3_4			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_4			(1<<15)
+
+#define GCLK_IDX_AIU_ICE958_AMCLK		112
+#define GCLK_NAME_AIU_ICE958_AMCLK		"AIU_ICE958_AMCLK"
+#define GCLK_DEV_AIU_ICE958_AMCLK		"CLKGATE_AIU_ICE958_AMCLK"
+#define GCLK_REG_AIU_ICE958_AMCLK		(HHI_GCLK_OTHER)
+#define GCLK_MASK_AIU_ICE958_AMCLK		(1<<16)
+
+#define GCLK_IDX_RESERVED3_5			113
+#define GCLK_NAME_RESERVED3_5			"RESERVED3_5"
+#define GCLK_DEV_RESERVED3_5			"CLKGATE_RESERVED3_5"
+#define GCLK_REG_RESERVED3_5			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_5			(1<<17)
+
+#define GCLK_IDX_RESERVED3_6			114
+#define GCLK_NAME_RESERVED3_6			"RESERVED3_6"
+#define GCLK_DEV_RESERVED3_6			"CLKGATE_RESERVED3_6"
+#define GCLK_REG_RESERVED3_6			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_6			(1<<18)
+
+#define GCLK_IDX_RESERVED3_7			115
+#define GCLK_NAME_RESERVED3_7			"RESERVED3_7"
+#define GCLK_DEV_RESERVED3_7			"CLKGATE_RESERVED3_7"
+#define GCLK_REG_RESERVED3_7			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_7			(1<<19)
+
+#define GCLK_IDX_ENC480P			116
+#define GCLK_NAME_ENC480P			"ENC480P"
+#define GCLK_DEV_ENC480P			"CLKGATE_ENC480P"
+#define GCLK_REG_ENC480P			(HHI_GCLK_OTHER)
+#define GCLK_MASK_ENC480P			(1<<20)
+
+#define GCLK_IDX_RANDOM_NUM_GEN1		117
+#define GCLK_NAME_RANDOM_NUM_GEN1		"RANDOM_NUM_GEN1"
+#define GCLK_DEV_RANDOM_NUM_GEN1		"CLKGATE_RANDOM_NUM_GEN1"
+#define GCLK_REG_RANDOM_NUM_GEN1		(HHI_GCLK_OTHER)
+#define GCLK_MASK_RANDOM_NUM_GEN1		(1<<21)
+
+#define GCLK_IDX_GCLK_VENCL_INT			118
+#define GCLK_NAME_GCLK_VENCL_INT		"GCLK_VENCL_INT"
+#define GCLK_DEV_GCLK_VENCL_INT			"CLKGATE_GCLK_VENCL_INT"
+#define GCLK_REG_GCLK_VENCL_INT			(HHI_GCLK_OTHER)
+#define GCLK_MASK_GCLK_VENCL_INT		(1<<22)
+
+#define GCLK_IDX_VCLK2_ENCL			119
+#define GCLK_NAME_VCLK2_ENCL			"VCLK2_ENCL"
+#define GCLK_DEV_VCLK2_ENCL			"CLKGATE_VCLK2_ENCL"
+#define GCLK_REG_VCLK2_ENCL			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_ENCL			(1<<23)
+
+#define GCLK_IDX_MMC_CLK			120
+#define GCLK_NAME_MMC_CLK			"MMC_CLK"
+#define GCLK_DEV_MMC_CLK			"CLKGATE_MMC_CLK"
+#define GCLK_REG_MMC_CLK			(HHI_GCLK_OTHER)
+#define GCLK_MASK_MMC_CLK			(1<<24)
+
+#define GCLK_IDX_VCLK2_VENCL			121
+#define GCLK_NAME_VCLK2_VENCL			"VCLK2_VENCL"
+#define GCLK_DEV_VCLK2_VENCL			"CLKGATE_VCLK2_VENCL"
+#define GCLK_REG_VCLK2_VENCL			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_VENCL			(1<<25)
+
+#define GCLK_IDX_VCLK2_OTHER1			122
+#define GCLK_NAME_VCLK2_OTHER1			"VCLK2_OTHER1"
+#define GCLK_DEV_VCLK2_OTHER1			"CLKGATE_VCLK2_OTHER1"
+#define GCLK_REG_VCLK2_OTHER1			(HHI_GCLK_OTHER)
+#define GCLK_MASK_VCLK2_OTHER1			(1<<26)
+
+#define GCLK_IDX_RESERVED3_9			123
+#define GCLK_NAME_RESERVED3_9			"RESERVED3_9"
+#define GCLK_DEV_RESERVED3_9			"CLKGATE_RESERVED3_9"
+#define GCLK_REG_RESERVED3_9			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_9			(1<<27)
+
+#define GCLK_IDX_RESERVED3_A			124
+#define GCLK_NAME_RESERVED3_A			"RESERVED3_A"
+#define GCLK_DEV_RESERVED3_A			"CLKGATE_RESERVED3_A"
+#define GCLK_REG_RESERVED3_A			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_A			(1<<28)
+
+#define GCLK_IDX_RESERVED3_B			125
+#define GCLK_NAME_RESERVED3_B			"RESERVED3_B"
+#define GCLK_DEV_RESERVED3_B			"CLKGATE_RESERVED3_B"
+#define GCLK_REG_RESERVED3_B			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_B			(1<<29)
+
+#define GCLK_IDX_RESERVED3_C			126
+#define GCLK_NAME_RESERVED3_C			"RESERVED3_C"
+#define GCLK_DEV_RESERVED3_C			"CLKGATE_RESERVED3_C"
+#define GCLK_REG_RESERVED3_C			(HHI_GCLK_OTHER)
+#define GCLK_MASK_RESERVED3_C			(1<<30)
+
+#define GCLK_IDX_EDP_CLK			127
+#define GCLK_NAME_EDP_CLK			"EDP_CLK"
+#define GCLK_DEV_EDP_CLK			"CLKGATE_EDP_CLK"
+#define GCLK_REG_EDP_CLK			(HHI_GCLK_OTHER)
+#define GCLK_MASK_EDP_CLK 			(1<<31)
+
+/**************************************************************/
+
+#define GCLK_IDX_MEDIA_CPU			128
+#define GCLK_NAME_MEDIA_CPU			"MEDIA_CPU"
+#define GCLK_DEV_MEDIA_CPU			"CLKGATE_MEDIA_CPU"
+#define GCLK_REG_MEDIA_CPU			(HHI_GCLK_AO)
+#define GCLK_MASK_MEDIA_CPU			(1<<0)
+
+#define GCLK_IDX_AHB_SRAM			129
+#define GCLK_NAME_AHB_SRAM			"AHB_SRAM"
+#define GCLK_DEV_AHB_SRAM			"CLKGATE_AHB_SRAM"
+#define GCLK_REG_AHB_SRAM			(HHI_GCLK_AO)
+#define GCLK_MASK_AHB_SRAM			(1<<1)
+
+#define GCLK_IDX_AHB_BUS			130
+#define GCLK_NAME_AHB_BUS			"AHB_BUS"
+#define GCLK_DEV_AHB_BUS			"CLKGATE_AHB_BUS"
+#define GCLK_REG_AHB_BUS			(HHI_GCLK_AO)
+#define GCLK_MASK_AHB_BUS			(1<<2)
+
+#define GCLK_IDX_AO_REGS			131
+#define GCLK_NAME_AO_REGS			"AO_REGS"
+#define GCLK_DEV_AO_REGS			"CLKGATE_AO_REGS"
+#define GCLK_REG_AO_REGS			(HHI_GCLK_AO)
+#define GCLK_MASK_AO_REGS			(1<<3)
+
+#define GCLK_IDX_CTS_ENCI			132
+#define GCLK_NAME_CTS_ENCI			"CTS_ENCI"
+#define GCLK_DEV_CTS_ENCI			"CLKGATE_CTS_ENCI"
+#define GCLK_REG_CTS_ENCI			(HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_ENCI			(1<<0)
+
+#define GCLK_IDX_CTS_ENCP			133
+#define GCLK_NAME_CTS_ENCP			"CTS_ENCP"
+#define GCLK_DEV_CTS_ENCP			"CLKGATE_CTS_ENCP"
+#define GCLK_REG_CTS_ENCP			(HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_ENCP			(1<<2)
+
+#define GCLK_IDX_CTS_ENCL			134
+#define GCLK_NAME_CTS_ENCL			"CTS_ENCL"
+#define GCLK_DEV_CTS_ENCL			"CLKGATE_CTS_ENCL"
+#define GCLK_REG_CTS_ENCL			(HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_ENCL			(1<<3)
+
+#define GCLK_IDX_CTS_VDAC			135
+#define GCLK_NAME_CTS_VDAC			"CTS_VDAC"
+#define GCLK_DEV_CTS_VDAC			"CLKGATE_CTS_VDAC"
+#define GCLK_REG_CTS_VDAC			(HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_VDAC			(1<<4)
+
+#define GCLK_IDX_CTS_HDMI_TX_PIXEL		136
+#define GCLK_NAME_CTS_HDMI_TX_PIXEL		"CTS_HDMI_TX_PIXEL"
+#define GCLK_DEV_CTS_HDMI_TX_PIXEL		"CLKGATE_CTS_HDMI_TX_PIXEL"
+#define GCLK_REG_CTS_HDMI_TX_PIXEL		(HHI_VID_CLK_CNTL2)
+#define GCLK_MASK_CTS_HDMI_TX_PIXEL		(1<<5)
+
+#define GCLK_IDX_MAX 137
+extern short GCLK_ref[GCLK_IDX_MAX];
+
+#define REGISTER_CLK(_MOD) \
+static struct clk CLK_##_MOD = { \
+	.name			= GCLK_NAME_##_MOD, \
+	.clock_index		= GCLK_IDX_##_MOD, \
+	.clock_gate_reg_adr	= GCLK_REG_##_MOD, \
+	.clock_gate_reg_mask	= GCLK_MASK_##_MOD, \
+}
+
+#define CLK_LOOKUP_ITEM(_MOD) \
+	{ \
+		.dev_id = GCLK_DEV_##_MOD, \
+		.con_id = GCLK_NAME_##_MOD, \
+		.clk	= &CLK_##_MOD, \
+	}
+
+
+
+/**********************/
+/* internal audio dac control */
+#define ADAC_RESET			(0x5000+0x00*4)
+#define ADAC_LATCH			(0x5000+0x01*4)
+#define ADAC_POWER_CTRL_REG1		(0x5000+0x10*4)
+#define ADAC_POWER_CTRL_REG2		(0x5000+0x11*4)
+
+extern int audio_internal_dac_disable(void);
+
+/* video dac control */
+extern int  video_dac_enable(unsigned char enable_mask);
+
+extern int  video_dac_disable(void);
+
+
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/register.h b/arch/arm/mach-mesong9tv/include/mach/register.h
new file mode 100644
index 000000000000..2f4f571eddb2
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/register.h
@@ -0,0 +1,14867 @@
+/**
+ * This file is automaticly generated by genregs.sh. Please do not edit it.
+ * Created at Fri Nov 14 11:09:11 CST 2014
+ */
+
+#ifndef __MACH_G9TV_REGISTER_H
+#define __MACH_G9TV_REGISTER_H
+
+/*
+ * ucode/register.h
+ */
+#define SECOND_DEMUX_OFFSET_0			0x50
+#define THIRD_DEMUX_OFFSET_0			0xa0
+#define STB_TOP_CONFIG				0x16f0
+#define P_STB_TOP_CONFIG			CBUS_REG_ADDR(STB_TOP_CONFIG)
+#define TS_TOP_CONFIG				0x16f1
+#define P_TS_TOP_CONFIG				CBUS_REG_ADDR(TS_TOP_CONFIG)
+#define TS_FILE_CONFIG				0x16f2
+#define P_TS_FILE_CONFIG			CBUS_REG_ADDR(TS_FILE_CONFIG)
+#define TS_PL_PID_INDEX				0x16f3
+#define P_TS_PL_PID_INDEX			CBUS_REG_ADDR(TS_PL_PID_INDEX)
+#define TS_PL_PID_DATA				0x16f4
+#define P_TS_PL_PID_DATA			CBUS_REG_ADDR(TS_PL_PID_DATA)
+#define COMM_DESC_KEY0				0x16f5
+#define P_COMM_DESC_KEY0			CBUS_REG_ADDR(COMM_DESC_KEY0)
+#define COMM_DESC_KEY1				0x16f6
+#define P_COMM_DESC_KEY1			CBUS_REG_ADDR(COMM_DESC_KEY1)
+#define COMM_DESC_KEY_RW			0x16f7
+#define P_COMM_DESC_KEY_RW			CBUS_REG_ADDR(COMM_DESC_KEY_RW)
+#define CIPLUS_KEY0				0x16f8
+#define P_CIPLUS_KEY0				CBUS_REG_ADDR(CIPLUS_KEY0)
+#define CIPLUS_KEY1				0x16f9
+#define P_CIPLUS_KEY1				CBUS_REG_ADDR(CIPLUS_KEY1)
+#define CIPLUS_KEY2				0x16fa
+#define P_CIPLUS_KEY2				CBUS_REG_ADDR(CIPLUS_KEY2)
+#define CIPLUS_KEY3				0x16fb
+#define P_CIPLUS_KEY3				CBUS_REG_ADDR(CIPLUS_KEY3)
+#define CIPLUS_KEY_WR				0x16fc
+#define P_CIPLUS_KEY_WR				CBUS_REG_ADDR(CIPLUS_KEY_WR)
+#define CIPLUS_CONFIG				0x16fd
+#define P_CIPLUS_CONFIG				CBUS_REG_ADDR(CIPLUS_CONFIG)
+#define CIPLUS_ENDIAN				0x16fe
+#define P_CIPLUS_ENDIAN				CBUS_REG_ADDR(CIPLUS_ENDIAN)
+#define PREG_CTLREG0_ADDR			0x2000
+#define P_PREG_CTLREG0_ADDR			CBUS_REG_ADDR(PREG_CTLREG0_ADDR)
+#define PREG_PAD_GPIO6_EN_N			0x2008
+#define P_PREG_PAD_GPIO6_EN_N			CBUS_REG_ADDR(PREG_PAD_GPIO6_EN_N)
+#define PREG_PAD_GPIO6_O			0x2009
+#define P_PREG_PAD_GPIO6_O			CBUS_REG_ADDR(PREG_PAD_GPIO6_O)
+#define PREG_PAD_GPIO6_I			0x200a
+#define P_PREG_PAD_GPIO6_I			CBUS_REG_ADDR(PREG_PAD_GPIO6_I)
+#define PREG_JTAG_GPIO_ADDR			0x200b
+#define P_PREG_JTAG_GPIO_ADDR			CBUS_REG_ADDR(PREG_JTAG_GPIO_ADDR)
+#define PREG_PAD_GPIO0_EN_N			0x200c
+#define P_PREG_PAD_GPIO0_EN_N			CBUS_REG_ADDR(PREG_PAD_GPIO0_EN_N)
+#define PREG_PAD_GPIO0_O			0x200d
+#define P_PREG_PAD_GPIO0_O			CBUS_REG_ADDR(PREG_PAD_GPIO0_O)
+#define PREG_PAD_GPIO0_I			0x200e
+#define P_PREG_PAD_GPIO0_I			CBUS_REG_ADDR(PREG_PAD_GPIO0_I)
+#define PREG_PAD_GPIO1_EN_N			0x200f
+#define P_PREG_PAD_GPIO1_EN_N			CBUS_REG_ADDR(PREG_PAD_GPIO1_EN_N)
+#define PREG_PAD_GPIO1_O			0x2010
+#define P_PREG_PAD_GPIO1_O			CBUS_REG_ADDR(PREG_PAD_GPIO1_O)
+#define PREG_PAD_GPIO1_I			0x2011
+#define P_PREG_PAD_GPIO1_I			CBUS_REG_ADDR(PREG_PAD_GPIO1_I)
+#define PREG_PAD_GPIO2_EN_N			0x2012
+#define P_PREG_PAD_GPIO2_EN_N			CBUS_REG_ADDR(PREG_PAD_GPIO2_EN_N)
+#define PREG_PAD_GPIO2_O			0x2013
+#define P_PREG_PAD_GPIO2_O			CBUS_REG_ADDR(PREG_PAD_GPIO2_O)
+#define PREG_PAD_GPIO2_I			0x2014
+#define P_PREG_PAD_GPIO2_I			CBUS_REG_ADDR(PREG_PAD_GPIO2_I)
+#define PREG_PAD_GPIO3_EN_N			0x2015
+#define P_PREG_PAD_GPIO3_EN_N			CBUS_REG_ADDR(PREG_PAD_GPIO3_EN_N)
+#define PREG_PAD_GPIO3_O			0x2016
+#define P_PREG_PAD_GPIO3_O			CBUS_REG_ADDR(PREG_PAD_GPIO3_O)
+#define PREG_PAD_GPIO3_I			0x2017
+#define P_PREG_PAD_GPIO3_I			CBUS_REG_ADDR(PREG_PAD_GPIO3_I)
+#define PREG_PAD_GPIO4_EN_N			0x2018
+#define P_PREG_PAD_GPIO4_EN_N			CBUS_REG_ADDR(PREG_PAD_GPIO4_EN_N)
+#define PREG_PAD_GPIO4_O			0x2019
+#define P_PREG_PAD_GPIO4_O			CBUS_REG_ADDR(PREG_PAD_GPIO4_O)
+#define PREG_PAD_GPIO4_I			0x201a
+#define P_PREG_PAD_GPIO4_I			CBUS_REG_ADDR(PREG_PAD_GPIO4_I)
+#define PREG_PAD_GPIO5_EN_N			0x201b
+#define P_PREG_PAD_GPIO5_EN_N			CBUS_REG_ADDR(PREG_PAD_GPIO5_EN_N)
+#define PREG_PAD_GPIO5_O			0x201c
+#define P_PREG_PAD_GPIO5_O			CBUS_REG_ADDR(PREG_PAD_GPIO5_O)
+#define PREG_PAD_GPIO5_I			0x201d
+#define P_PREG_PAD_GPIO5_I			CBUS_REG_ADDR(PREG_PAD_GPIO5_I)
+#define A9_STATUS1				0x201f
+#define P_A9_STATUS1				CBUS_REG_ADDR(A9_STATUS1)
+#define A9_CFG0					0x2020
+#define P_A9_CFG0				CBUS_REG_ADDR(A9_CFG0)
+#define A9_CFG1					0x2021
+#define P_A9_CFG1				CBUS_REG_ADDR(A9_CFG1)
+#define A9_CFG2					0x2022
+#define P_A9_CFG2				CBUS_REG_ADDR(A9_CFG2)
+#define A9_PERIPH_BASE				0x2023
+#define P_A9_PERIPH_BASE			CBUS_REG_ADDR(A9_PERIPH_BASE)
+#define A9_L2_REG_BASE				0x2024
+#define P_A9_L2_REG_BASE			CBUS_REG_ADDR(A9_L2_REG_BASE)
+#define A9_L2_STATUS				0x2025
+#define P_A9_L2_STATUS				CBUS_REG_ADDR(A9_L2_STATUS)
+#define A9_POR_CFG				0x2026
+#define P_A9_POR_CFG				CBUS_REG_ADDR(A9_POR_CFG)
+#define A9_STATUS2				0x2027
+#define P_A9_STATUS2				CBUS_REG_ADDR(A9_STATUS2)
+#define AXI_REG_EN				0x2028
+#define P_AXI_REG_EN				CBUS_REG_ADDR(AXI_REG_EN)
+#define A9_CFG3					0x2029
+#define P_A9_CFG3				CBUS_REG_ADDR(A9_CFG3)
+#define A9_CFG4					0x202a
+#define P_A9_CFG4				CBUS_REG_ADDR(A9_CFG4)
+#define A9_STATUS3				0x202b
+#define P_A9_STATUS3				CBUS_REG_ADDR(A9_STATUS3)
+#define PERIPHS_PIN_MUX_0			0x202c
+#define P_PERIPHS_PIN_MUX_0			CBUS_REG_ADDR(PERIPHS_PIN_MUX_0)
+#define PERIPHS_PIN_MUX_1			0x202d
+#define P_PERIPHS_PIN_MUX_1			CBUS_REG_ADDR(PERIPHS_PIN_MUX_1)
+#define PERIPHS_PIN_MUX_2			0x202e
+#define P_PERIPHS_PIN_MUX_2			CBUS_REG_ADDR(PERIPHS_PIN_MUX_2)
+#define PERIPHS_PIN_MUX_3			0x202f
+#define P_PERIPHS_PIN_MUX_3			CBUS_REG_ADDR(PERIPHS_PIN_MUX_3)
+#define PERIPHS_PIN_MUX_4			0x2030
+#define P_PERIPHS_PIN_MUX_4			CBUS_REG_ADDR(PERIPHS_PIN_MUX_4)
+#define PERIPHS_PIN_MUX_5			0x2031
+#define P_PERIPHS_PIN_MUX_5			CBUS_REG_ADDR(PERIPHS_PIN_MUX_5)
+#define PERIPHS_PIN_MUX_6			0x2032
+#define P_PERIPHS_PIN_MUX_6			CBUS_REG_ADDR(PERIPHS_PIN_MUX_6)
+#define PERIPHS_PIN_MUX_7			0x2033
+#define P_PERIPHS_PIN_MUX_7			CBUS_REG_ADDR(PERIPHS_PIN_MUX_7)
+#define PERIPHS_PIN_MUX_8			0x2034
+#define P_PERIPHS_PIN_MUX_8			CBUS_REG_ADDR(PERIPHS_PIN_MUX_8)
+#define PERIPHS_PIN_MUX_9			0x2035
+#define P_PERIPHS_PIN_MUX_9			CBUS_REG_ADDR(PERIPHS_PIN_MUX_9)
+#define PERIPHS_PIN_MUX_10			0x2036
+#define P_PERIPHS_PIN_MUX_10			CBUS_REG_ADDR(PERIPHS_PIN_MUX_10)
+#define PERIPHS_PIN_MUX_11			0x2037
+#define P_PERIPHS_PIN_MUX_11			CBUS_REG_ADDR(PERIPHS_PIN_MUX_11)
+#define PERIPHS_PIN_MUX_12			0x2038
+#define P_PERIPHS_PIN_MUX_12			CBUS_REG_ADDR(PERIPHS_PIN_MUX_12)
+#define PAD_PULL_UP_REG6			0x2039
+#define P_PAD_PULL_UP_REG6			CBUS_REG_ADDR(PAD_PULL_UP_REG6)
+#define PAD_PULL_UP_REG0			0x203a
+#define P_PAD_PULL_UP_REG0			CBUS_REG_ADDR(PAD_PULL_UP_REG0)
+#define PAD_PULL_UP_REG1			0x203b
+#define P_PAD_PULL_UP_REG1			CBUS_REG_ADDR(PAD_PULL_UP_REG1)
+#define PAD_PULL_UP_REG2			0x203c
+#define P_PAD_PULL_UP_REG2			CBUS_REG_ADDR(PAD_PULL_UP_REG2)
+#define PAD_PULL_UP_REG3			0x203d
+#define P_PAD_PULL_UP_REG3			CBUS_REG_ADDR(PAD_PULL_UP_REG3)
+#define PAD_PULL_UP_REG4			0x203e
+#define P_PAD_PULL_UP_REG4			CBUS_REG_ADDR(PAD_PULL_UP_REG4)
+#define PAD_PULL_UP_REG5			0x203f
+#define P_PAD_PULL_UP_REG5			CBUS_REG_ADDR(PAD_PULL_UP_REG5)
+#define RAND64_ADDR0				0x2040
+#define P_RAND64_ADDR0				CBUS_REG_ADDR(RAND64_ADDR0)
+#define RAND64_ADDR1				0x2041
+#define P_RAND64_ADDR1				CBUS_REG_ADDR(RAND64_ADDR1)
+#define PREG_ETHERNET_ADDR0			0x2042
+#define P_PREG_ETHERNET_ADDR0			CBUS_REG_ADDR(PREG_ETHERNET_ADDR0)
+#define PREG_AM_ANALOG_ADDR			0x2043
+#define P_PREG_AM_ANALOG_ADDR			CBUS_REG_ADDR(PREG_AM_ANALOG_ADDR)
+#define PREG_MALI_BYTE_CNTL			0x2044
+#define P_PREG_MALI_BYTE_CNTL			CBUS_REG_ADDR(PREG_MALI_BYTE_CNTL)
+#define PREG_WIFI_CNTL				0x2045
+#define P_PREG_WIFI_CNTL			CBUS_REG_ADDR(PREG_WIFI_CNTL)
+#define PAD_PULL_UP_EN_REG0			0x2048
+#define P_PAD_PULL_UP_EN_REG0			CBUS_REG_ADDR(PAD_PULL_UP_EN_REG0)
+#define PAD_PULL_UP_EN_REG1			0x2049
+#define P_PAD_PULL_UP_EN_REG1			CBUS_REG_ADDR(PAD_PULL_UP_EN_REG1)
+#define PAD_PULL_UP_EN_REG2			0x204a
+#define P_PAD_PULL_UP_EN_REG2			CBUS_REG_ADDR(PAD_PULL_UP_EN_REG2)
+#define PAD_PULL_UP_EN_REG3			0x204b
+#define P_PAD_PULL_UP_EN_REG3			CBUS_REG_ADDR(PAD_PULL_UP_EN_REG3)
+#define PAD_PULL_UP_EN_REG4			0x204c
+#define P_PAD_PULL_UP_EN_REG4			CBUS_REG_ADDR(PAD_PULL_UP_EN_REG4)
+#define PAD_PULL_UP_EN_REG5			0x204d
+#define P_PAD_PULL_UP_EN_REG5			CBUS_REG_ADDR(PAD_PULL_UP_EN_REG5)
+#define PAD_PULL_UP_EN_REG6			0x204e
+#define P_PAD_PULL_UP_EN_REG6			CBUS_REG_ADDR(PAD_PULL_UP_EN_REG6)
+#define PREG_ETH_REG0				0x2050
+#define P_PREG_ETH_REG0				CBUS_REG_ADDR(PREG_ETH_REG0)
+#define PREG_ETH_REG1				0x2051
+#define P_PREG_ETH_REG1				CBUS_REG_ADDR(PREG_ETH_REG1)
+#define PROD_TEST_REG0				0x2060
+#define P_PROD_TEST_REG0			CBUS_REG_ADDR(PROD_TEST_REG0)
+#define PROD_TEST_REG1				0x2061
+#define P_PROD_TEST_REG1			CBUS_REG_ADDR(PROD_TEST_REG1)
+#define PROD_TEST_REG2				0x2062
+#define P_PROD_TEST_REG2			CBUS_REG_ADDR(PROD_TEST_REG2)
+#define PROD_TEST_REG3				0x2063
+#define P_PROD_TEST_REG3			CBUS_REG_ADDR(PROD_TEST_REG3)
+#define METAL_REVISION				0x206a
+#define P_METAL_REVISION			CBUS_REG_ADDR(METAL_REVISION)
+#define ADC_TOP_MISC				0x206b
+#define P_ADC_TOP_MISC				CBUS_REG_ADDR(ADC_TOP_MISC)
+#define DPLL_TOP_MISC				0x206c
+#define P_DPLL_TOP_MISC				CBUS_REG_ADDR(DPLL_TOP_MISC)
+#define ANALOG_TOP_MISC				0x206d
+#define P_ANALOG_TOP_MISC			CBUS_REG_ADDR(ANALOG_TOP_MISC)
+#define AM_ANALOG_TOP_REG0			0x206e
+#define P_AM_ANALOG_TOP_REG0			CBUS_REG_ADDR(AM_ANALOG_TOP_REG0)
+#define AM_ANALOG_TOP_REG1			0x206f
+#define P_AM_ANALOG_TOP_REG1			CBUS_REG_ADDR(AM_ANALOG_TOP_REG1)
+#define PREG_STICKY_REG0			0x207c
+#define P_PREG_STICKY_REG0			CBUS_REG_ADDR(PREG_STICKY_REG0)
+#define PREG_STICKY_REG1			0x207d
+#define P_PREG_STICKY_REG1			CBUS_REG_ADDR(PREG_STICKY_REG1)
+#define PREG_WRITE_ONCE_REG			0x207e
+#define P_PREG_WRITE_ONCE_REG			CBUS_REG_ADDR(PREG_WRITE_ONCE_REG)
+#define AM_RING_OSC_REG0			0x207f
+#define P_AM_RING_OSC_REG0			CBUS_REG_ADDR(AM_RING_OSC_REG0)
+#define HDMITX20_RNDNUM				0x2080
+#define P_HDMITX20_RNDNUM			CBUS_REG_ADDR(HDMITX20_RNDNUM)
+#define SMARTCARD_REG0				0x2110
+#define P_SMARTCARD_REG0			CBUS_REG_ADDR(SMARTCARD_REG0)
+#define SMARTCARD_REG1				0x2111
+#define P_SMARTCARD_REG1			CBUS_REG_ADDR(SMARTCARD_REG1)
+#define SMARTCARD_REG2				0x2112
+#define P_SMARTCARD_REG2			CBUS_REG_ADDR(SMARTCARD_REG2)
+#define SMARTCARD_STATUS			0x2113
+#define P_SMARTCARD_STATUS			CBUS_REG_ADDR(SMARTCARD_STATUS)
+#define SMARTCARD_INTR				0x2114
+#define P_SMARTCARD_INTR			CBUS_REG_ADDR(SMARTCARD_INTR)
+#define SMARTCARD_REG5				0x2115
+#define P_SMARTCARD_REG5			CBUS_REG_ADDR(SMARTCARD_REG5)
+#define SMARTCARD_REG6				0x2116
+#define P_SMARTCARD_REG6			CBUS_REG_ADDR(SMARTCARD_REG6)
+#define SMARTCARD_FIFO				0x2117
+#define P_SMARTCARD_FIFO			CBUS_REG_ADDR(SMARTCARD_FIFO)
+#define SMARTCARD_REG8				0x2118
+#define P_SMARTCARD_REG8			CBUS_REG_ADDR(SMARTCARD_REG8)
+#define IR_DEC_LDR_ACTIVE			0x2120
+#define P_IR_DEC_LDR_ACTIVE			CBUS_REG_ADDR(IR_DEC_LDR_ACTIVE)
+#define IR_DEC_LDR_IDLE				0x2121
+#define P_IR_DEC_LDR_IDLE			CBUS_REG_ADDR(IR_DEC_LDR_IDLE)
+#define IR_DEC_LDR_REPEAT			0x2122
+#define P_IR_DEC_LDR_REPEAT			CBUS_REG_ADDR(IR_DEC_LDR_REPEAT)
+#define IR_DEC_BIT_0				0x2123
+#define P_IR_DEC_BIT_0				CBUS_REG_ADDR(IR_DEC_BIT_0)
+#define IR_DEC_REG0				0x2124
+#define P_IR_DEC_REG0				CBUS_REG_ADDR(IR_DEC_REG0)
+#define IR_DEC_FRAME				0x2125
+#define P_IR_DEC_FRAME				CBUS_REG_ADDR(IR_DEC_FRAME)
+#define IR_DEC_STATUS				0x2126
+#define P_IR_DEC_STATUS				CBUS_REG_ADDR(IR_DEC_STATUS)
+#define IR_DEC_REG1				0x2127
+#define P_IR_DEC_REG1				CBUS_REG_ADDR(IR_DEC_REG1)
+#define DEMOD_ADC_SAMPLING			0x212d
+#define P_DEMOD_ADC_SAMPLING			CBUS_REG_ADDR(DEMOD_ADC_SAMPLING)
+#define UART0_WFIFO				0x2130
+#define P_UART0_WFIFO				CBUS_REG_ADDR(UART0_WFIFO)
+#define UART0_RFIFO				0x2131
+#define P_UART0_RFIFO				CBUS_REG_ADDR(UART0_RFIFO)
+#define UART0_CONTROL				0x2132
+#define P_UART0_CONTROL				CBUS_REG_ADDR(UART0_CONTROL)
+#define UART0_STATUS				0x2133
+#define P_UART0_STATUS				CBUS_REG_ADDR(UART0_STATUS)
+#define UART0_MISC				0x2134
+#define P_UART0_MISC				CBUS_REG_ADDR(UART0_MISC)
+#define UART0_REG5				0x2135
+#define P_UART0_REG5				CBUS_REG_ADDR(UART0_REG5)
+#define UART1_WFIFO				0x2137
+#define P_UART1_WFIFO				CBUS_REG_ADDR(UART1_WFIFO)
+#define UART1_RFIFO				0x2138
+#define P_UART1_RFIFO				CBUS_REG_ADDR(UART1_RFIFO)
+#define UART1_CONTROL				0x2139
+#define P_UART1_CONTROL				CBUS_REG_ADDR(UART1_CONTROL)
+#define UART1_STATUS				0x213a
+#define P_UART1_STATUS				CBUS_REG_ADDR(UART1_STATUS)
+#define UART1_MISC				0x213b
+#define P_UART1_MISC				CBUS_REG_ADDR(UART1_MISC)
+#define UART1_REG5				0x213c
+#define P_UART1_REG5				CBUS_REG_ADDR(UART1_REG5)
+#define I2C_M_0_CONTROL_REG			0x2140
+#define P_I2C_M_0_CONTROL_REG			CBUS_REG_ADDR(I2C_M_0_CONTROL_REG)
+#define I2C_M_0_SLAVE_ADDR			0x2141
+#define P_I2C_M_0_SLAVE_ADDR			CBUS_REG_ADDR(I2C_M_0_SLAVE_ADDR)
+#define I2C_M_0_TOKEN_LIST0			0x2142
+#define P_I2C_M_0_TOKEN_LIST0			CBUS_REG_ADDR(I2C_M_0_TOKEN_LIST0)
+#define I2C_M_0_TOKEN_LIST1			0x2143
+#define P_I2C_M_0_TOKEN_LIST1			CBUS_REG_ADDR(I2C_M_0_TOKEN_LIST1)
+#define I2C_M_0_WDATA_REG0			0x2144
+#define P_I2C_M_0_WDATA_REG0			CBUS_REG_ADDR(I2C_M_0_WDATA_REG0)
+#define I2C_M_0_WDATA_REG1			0x2145
+#define P_I2C_M_0_WDATA_REG1			CBUS_REG_ADDR(I2C_M_0_WDATA_REG1)
+#define I2C_M_0_RDATA_REG0			0x2146
+#define P_I2C_M_0_RDATA_REG0			CBUS_REG_ADDR(I2C_M_0_RDATA_REG0)
+#define I2C_M_0_RDATA_REG1			0x2147
+#define P_I2C_M_0_RDATA_REG1			CBUS_REG_ADDR(I2C_M_0_RDATA_REG1)
+#define I2C_S_CONTROL_REG			0x2150
+#define P_I2C_S_CONTROL_REG			CBUS_REG_ADDR(I2C_S_CONTROL_REG)
+#define I2C_S_SEND_REG				0x2151
+#define P_I2C_S_SEND_REG			CBUS_REG_ADDR(I2C_S_SEND_REG)
+#define I2C_S_RECV_REG				0x2152
+#define P_I2C_S_RECV_REG			CBUS_REG_ADDR(I2C_S_RECV_REG)
+#define I2C_S_CNTL1_REG				0x2153
+#define P_I2C_S_CNTL1_REG			CBUS_REG_ADDR(I2C_S_CNTL1_REG)
+#define PWM_PWM_A				0x2154
+#define P_PWM_PWM_A				CBUS_REG_ADDR(PWM_PWM_A)
+#define PWM_PWM_B				0x2155
+#define P_PWM_PWM_B				CBUS_REG_ADDR(PWM_PWM_B)
+#define PWM_MISC_REG_AB				0x2156
+#define P_PWM_MISC_REG_AB			CBUS_REG_ADDR(PWM_MISC_REG_AB)
+#define PWM_DELTA_SIGMA_AB			0x2157
+#define P_PWM_DELTA_SIGMA_AB			CBUS_REG_ADDR(PWM_DELTA_SIGMA_AB)
+#define ATAPI_IDEREG0				0x2160
+#define P_ATAPI_IDEREG0				CBUS_REG_ADDR(ATAPI_IDEREG0)
+#define ATAPI_IDEREG1				0x2161
+#define P_ATAPI_IDEREG1				CBUS_REG_ADDR(ATAPI_IDEREG1)
+#define ATAPI_IDEREG2				0x2162
+#define P_ATAPI_IDEREG2				CBUS_REG_ADDR(ATAPI_IDEREG2)
+#define ATAPI_CYCTIME				0x2163
+#define P_ATAPI_CYCTIME				CBUS_REG_ADDR(ATAPI_CYCTIME)
+#define ATAPI_IDETIME				0x2164
+#define P_ATAPI_IDETIME				CBUS_REG_ADDR(ATAPI_IDETIME)
+#define ATAPI_PIO_TIMING			0x2165
+#define P_ATAPI_PIO_TIMING			CBUS_REG_ADDR(ATAPI_PIO_TIMING)
+#define ATAPI_TABLE_ADD_REG			0x2166
+#define P_ATAPI_TABLE_ADD_REG			CBUS_REG_ADDR(ATAPI_TABLE_ADD_REG)
+#define ATAPI_IDEREG3				0x2167
+#define P_ATAPI_IDEREG3				CBUS_REG_ADDR(ATAPI_IDEREG3)
+#define ATAPI_UDMA_REG0				0x2168
+#define P_ATAPI_UDMA_REG0			CBUS_REG_ADDR(ATAPI_UDMA_REG0)
+#define ATAPI_UDMA_REG1				0x2169
+#define P_ATAPI_UDMA_REG1			CBUS_REG_ADDR(ATAPI_UDMA_REG1)
+#define TRANS_PWMA_REG0				0x2170
+#define P_TRANS_PWMA_REG0			CBUS_REG_ADDR(TRANS_PWMA_REG0)
+#define TRANS_PWMA_REG1				0x2171
+#define P_TRANS_PWMA_REG1			CBUS_REG_ADDR(TRANS_PWMA_REG1)
+#define TRANS_PWMA_MUX0				0x2172
+#define P_TRANS_PWMA_MUX0			CBUS_REG_ADDR(TRANS_PWMA_MUX0)
+#define TRANS_PWMA_MUX1				0x2173
+#define P_TRANS_PWMA_MUX1			CBUS_REG_ADDR(TRANS_PWMA_MUX1)
+#define TRANS_PWMA_MUX2				0x2174
+#define P_TRANS_PWMA_MUX2			CBUS_REG_ADDR(TRANS_PWMA_MUX2)
+#define TRANS_PWMA_MUX3				0x2175
+#define P_TRANS_PWMA_MUX3			CBUS_REG_ADDR(TRANS_PWMA_MUX3)
+#define TRANS_PWMA_MUX4				0x2176
+#define P_TRANS_PWMA_MUX4			CBUS_REG_ADDR(TRANS_PWMA_MUX4)
+#define TRANS_PWMA_MUX5				0x2177
+#define P_TRANS_PWMA_MUX5			CBUS_REG_ADDR(TRANS_PWMA_MUX5)
+#define TRANS_PWMB_REG0				0x2178
+#define P_TRANS_PWMB_REG0			CBUS_REG_ADDR(TRANS_PWMB_REG0)
+#define TRANS_PWMB_REG1				0x2179
+#define P_TRANS_PWMB_REG1			CBUS_REG_ADDR(TRANS_PWMB_REG1)
+#define TRANS_PWMB_MUX0				0x217a
+#define P_TRANS_PWMB_MUX0			CBUS_REG_ADDR(TRANS_PWMB_MUX0)
+#define TRANS_PWMB_MUX1				0x217b
+#define P_TRANS_PWMB_MUX1			CBUS_REG_ADDR(TRANS_PWMB_MUX1)
+#define TRANS_PWMB_MUX2				0x217c
+#define P_TRANS_PWMB_MUX2			CBUS_REG_ADDR(TRANS_PWMB_MUX2)
+#define TRANS_PWMB_MUX3				0x217d
+#define P_TRANS_PWMB_MUX3			CBUS_REG_ADDR(TRANS_PWMB_MUX3)
+#define TRANS_PWMB_MUX4				0x217e
+#define P_TRANS_PWMB_MUX4			CBUS_REG_ADDR(TRANS_PWMB_MUX4)
+#define TRANS_PWMB_MUX5				0x217f
+#define P_TRANS_PWMB_MUX5			CBUS_REG_ADDR(TRANS_PWMB_MUX5)
+#define NAND_START				0x2180
+#define P_NAND_START				CBUS_REG_ADDR(NAND_START)
+#define NAND_ADR_CMD				0x218a
+#define P_NAND_ADR_CMD				CBUS_REG_ADDR(NAND_ADR_CMD)
+#define NAND_ADR_STS				0x218b
+#define P_NAND_ADR_STS				CBUS_REG_ADDR(NAND_ADR_STS)
+#define NAND_END				0x218f
+#define P_NAND_END				CBUS_REG_ADDR(NAND_END)
+#define PWM_PWM_C				0x2194
+#define P_PWM_PWM_C				CBUS_REG_ADDR(PWM_PWM_C)
+#define PWM_PWM_D				0x2195
+#define P_PWM_PWM_D				CBUS_REG_ADDR(PWM_PWM_D)
+#define PWM_MISC_REG_CD				0x2196
+#define P_PWM_MISC_REG_CD			CBUS_REG_ADDR(PWM_MISC_REG_CD)
+#define PWM_DELTA_SIGMA_CD			0x2197
+#define P_PWM_DELTA_SIGMA_CD			CBUS_REG_ADDR(PWM_DELTA_SIGMA_CD)
+#define ISP_LED_CTRL				0x2198
+#define P_ISP_LED_CTRL				CBUS_REG_ADDR(ISP_LED_CTRL)
+#define ISP_LED_TIMING1				0x2199
+#define P_ISP_LED_TIMING1			CBUS_REG_ADDR(ISP_LED_TIMING1)
+#define ISP_LED_TIMING2				0x219a
+#define P_ISP_LED_TIMING2			CBUS_REG_ADDR(ISP_LED_TIMING2)
+#define ISP_LED_TIMING3				0x219b
+#define P_ISP_LED_TIMING3			CBUS_REG_ADDR(ISP_LED_TIMING3)
+#define ISP_LED_TIMING4				0x219c
+#define P_ISP_LED_TIMING4			CBUS_REG_ADDR(ISP_LED_TIMING4)
+#define ISP_LED_TIMING5				0x219d
+#define P_ISP_LED_TIMING5			CBUS_REG_ADDR(ISP_LED_TIMING5)
+#define ISP_LED_TIMING6				0x219e
+#define P_ISP_LED_TIMING6			CBUS_REG_ADDR(ISP_LED_TIMING6)
+#define PWM_PWM_E				0x21b0
+#define P_PWM_PWM_E				CBUS_REG_ADDR(PWM_PWM_E)
+#define PWM_PWM_F				0x21b1
+#define P_PWM_PWM_F				CBUS_REG_ADDR(PWM_PWM_F)
+#define PWM_MISC_REG_EF				0x21b2
+#define P_PWM_MISC_REG_EF			CBUS_REG_ADDR(PWM_MISC_REG_EF)
+#define PWM_DELTA_SIGMA_EF			0x21b3
+#define P_PWM_DELTA_SIGMA_EF			CBUS_REG_ADDR(PWM_DELTA_SIGMA_EF)
+#define UART2_WFIFO				0x21c0
+#define P_UART2_WFIFO				CBUS_REG_ADDR(UART2_WFIFO)
+#define UART2_RFIFO				0x21c1
+#define P_UART2_RFIFO				CBUS_REG_ADDR(UART2_RFIFO)
+#define UART2_CONTROL				0x21c2
+#define P_UART2_CONTROL				CBUS_REG_ADDR(UART2_CONTROL)
+#define UART2_STATUS				0x21c3
+#define P_UART2_STATUS				CBUS_REG_ADDR(UART2_STATUS)
+#define UART2_MISC				0x21c4
+#define P_UART2_MISC				CBUS_REG_ADDR(UART2_MISC)
+#define UART2_REG5				0x21c5
+#define P_UART2_REG5				CBUS_REG_ADDR(UART2_REG5)
+#define UART3_WFIFO				0x21c8
+#define P_UART3_WFIFO				CBUS_REG_ADDR(UART3_WFIFO)
+#define UART3_RFIFO				0x21c9
+#define P_UART3_RFIFO				CBUS_REG_ADDR(UART3_RFIFO)
+#define UART3_CONTROL				0x21ca
+#define P_UART3_CONTROL				CBUS_REG_ADDR(UART3_CONTROL)
+#define UART3_STATUS				0x21cb
+#define P_UART3_STATUS				CBUS_REG_ADDR(UART3_STATUS)
+#define UART3_MISC				0x21cc
+#define P_UART3_MISC				CBUS_REG_ADDR(UART3_MISC)
+#define UART3_REG5				0x21cd
+#define P_UART3_REG5				CBUS_REG_ADDR(UART3_REG5)
+#define RTC_ADDR0				0x21d0
+#define P_RTC_ADDR0				CBUS_REG_ADDR(RTC_ADDR0)
+#define RTC_ADDR1				0x21d1
+#define P_RTC_ADDR1				CBUS_REG_ADDR(RTC_ADDR1)
+#define RTC_ADDR2				0x21d2
+#define P_RTC_ADDR2				CBUS_REG_ADDR(RTC_ADDR2)
+#define RTC_ADDR3				0x21d3
+#define P_RTC_ADDR3				CBUS_REG_ADDR(RTC_ADDR3)
+#define RTC_ADDR4				0x21d4
+#define P_RTC_ADDR4				CBUS_REG_ADDR(RTC_ADDR4)
+#define MSR_CLK_DUTY				0x21d6
+#define P_MSR_CLK_DUTY				CBUS_REG_ADDR(MSR_CLK_DUTY)
+#define MSR_CLK_REG0				0x21d7
+#define P_MSR_CLK_REG0				CBUS_REG_ADDR(MSR_CLK_REG0)
+#define MSR_CLK_REG1				0x21d8
+#define P_MSR_CLK_REG1				CBUS_REG_ADDR(MSR_CLK_REG1)
+#define MSR_CLK_REG2				0x21d9
+#define P_MSR_CLK_REG2				CBUS_REG_ADDR(MSR_CLK_REG2)
+#define MSR_CLK_REG3				0x21da
+#define P_MSR_CLK_REG3				CBUS_REG_ADDR(MSR_CLK_REG3)
+#define MSR_CLK_REG4				0x21db
+#define P_MSR_CLK_REG4				CBUS_REG_ADDR(MSR_CLK_REG4)
+#define MSR_CLK_REG5				0x21de
+#define P_MSR_CLK_REG5				CBUS_REG_ADDR(MSR_CLK_REG5)
+#define I2C_M_1_CONTROL_REG			0x21f0
+#define P_I2C_M_1_CONTROL_REG			CBUS_REG_ADDR(I2C_M_1_CONTROL_REG)
+#define I2C_M_1_SLAVE_ADDR			0x21f1
+#define P_I2C_M_1_SLAVE_ADDR			CBUS_REG_ADDR(I2C_M_1_SLAVE_ADDR)
+#define I2C_M_1_TOKEN_LIST0			0x21f2
+#define P_I2C_M_1_TOKEN_LIST0			CBUS_REG_ADDR(I2C_M_1_TOKEN_LIST0)
+#define I2C_M_1_TOKEN_LIST1			0x21f3
+#define P_I2C_M_1_TOKEN_LIST1			CBUS_REG_ADDR(I2C_M_1_TOKEN_LIST1)
+#define I2C_M_1_WDATA_REG0			0x21f4
+#define P_I2C_M_1_WDATA_REG0			CBUS_REG_ADDR(I2C_M_1_WDATA_REG0)
+#define I2C_M_1_WDATA_REG1			0x21f5
+#define P_I2C_M_1_WDATA_REG1			CBUS_REG_ADDR(I2C_M_1_WDATA_REG1)
+#define I2C_M_1_RDATA_REG0			0x21f6
+#define P_I2C_M_1_RDATA_REG0			CBUS_REG_ADDR(I2C_M_1_RDATA_REG0)
+#define I2C_M_1_RDATA_REG1			0x21f7
+#define P_I2C_M_1_RDATA_REG1			CBUS_REG_ADDR(I2C_M_1_RDATA_REG1)
+#define I2C_M_2_CONTROL_REG			0x21f8
+#define P_I2C_M_2_CONTROL_REG			CBUS_REG_ADDR(I2C_M_2_CONTROL_REG)
+#define I2C_M_2_SLAVE_ADDR			0x21f9
+#define P_I2C_M_2_SLAVE_ADDR			CBUS_REG_ADDR(I2C_M_2_SLAVE_ADDR)
+#define I2C_M_2_TOKEN_LIST0			0x21fa
+#define P_I2C_M_2_TOKEN_LIST0			CBUS_REG_ADDR(I2C_M_2_TOKEN_LIST0)
+#define I2C_M_2_TOKEN_LIST1			0x21fb
+#define P_I2C_M_2_TOKEN_LIST1			CBUS_REG_ADDR(I2C_M_2_TOKEN_LIST1)
+#define I2C_M_2_WDATA_REG0			0x21fc
+#define P_I2C_M_2_WDATA_REG0			CBUS_REG_ADDR(I2C_M_2_WDATA_REG0)
+#define I2C_M_2_WDATA_REG1			0x21fd
+#define P_I2C_M_2_WDATA_REG1			CBUS_REG_ADDR(I2C_M_2_WDATA_REG1)
+#define I2C_M_2_RDATA_REG0			0x21fe
+#define P_I2C_M_2_RDATA_REG0			CBUS_REG_ADDR(I2C_M_2_RDATA_REG0)
+#define I2C_M_2_RDATA_REG1			0x21ff
+#define P_I2C_M_2_RDATA_REG1			CBUS_REG_ADDR(I2C_M_2_RDATA_REG1)
+#define USB_ADDR0				0x2200
+#define P_USB_ADDR0				CBUS_REG_ADDR(USB_ADDR0)
+#define USB_ADDR1				0x2201
+#define P_USB_ADDR1				CBUS_REG_ADDR(USB_ADDR1)
+#define USB_ADDR2				0x2202
+#define P_USB_ADDR2				CBUS_REG_ADDR(USB_ADDR2)
+#define USB_ADDR3				0x2203
+#define P_USB_ADDR3				CBUS_REG_ADDR(USB_ADDR3)
+#define USB_ADDR4				0x2204
+#define P_USB_ADDR4				CBUS_REG_ADDR(USB_ADDR4)
+#define USB_ADDR5				0x2205
+#define P_USB_ADDR5				CBUS_REG_ADDR(USB_ADDR5)
+#define USB_ADDR6				0x2206
+#define P_USB_ADDR6				CBUS_REG_ADDR(USB_ADDR6)
+#define USB_ADDR7				0x2207
+#define P_USB_ADDR7				CBUS_REG_ADDR(USB_ADDR7)
+#define USB_ADDR8				0x2208
+#define P_USB_ADDR8				CBUS_REG_ADDR(USB_ADDR8)
+#define USB_ADDR9				0x2209
+#define P_USB_ADDR9				CBUS_REG_ADDR(USB_ADDR9)
+#define USB_ADDR10				0x220a
+#define P_USB_ADDR10				CBUS_REG_ADDR(USB_ADDR10)
+#define USB_ADDR11				0x220b
+#define P_USB_ADDR11				CBUS_REG_ADDR(USB_ADDR11)
+#define USB_ADDR12				0x220c
+#define P_USB_ADDR12				CBUS_REG_ADDR(USB_ADDR12)
+#define USB_ADDR13				0x220d
+#define P_USB_ADDR13				CBUS_REG_ADDR(USB_ADDR13)
+#define USB_ADDR14				0x220e
+#define P_USB_ADDR14				CBUS_REG_ADDR(USB_ADDR14)
+#define USB_ADDR15				0x220f
+#define P_USB_ADDR15				CBUS_REG_ADDR(USB_ADDR15)
+#define USB_ADDR16				0x2210
+#define P_USB_ADDR16				CBUS_REG_ADDR(USB_ADDR16)
+#define USB_ADDR17				0x2211
+#define P_USB_ADDR17				CBUS_REG_ADDR(USB_ADDR17)
+#define USB_ADDR18				0x2212
+#define P_USB_ADDR18				CBUS_REG_ADDR(USB_ADDR18)
+#define USB_ADDR19				0x2213
+#define P_USB_ADDR19				CBUS_REG_ADDR(USB_ADDR19)
+#define USB_ADDR20				0x2214
+#define P_USB_ADDR20				CBUS_REG_ADDR(USB_ADDR20)
+#define USB_ADDR21				0x2215
+#define P_USB_ADDR21				CBUS_REG_ADDR(USB_ADDR21)
+#define USB_ADDR22				0x2216
+#define P_USB_ADDR22				CBUS_REG_ADDR(USB_ADDR22)
+#define USB_ADDR23				0x2217
+#define P_USB_ADDR23				CBUS_REG_ADDR(USB_ADDR23)
+#define USB_ADDR24				0x2218
+#define P_USB_ADDR24				CBUS_REG_ADDR(USB_ADDR24)
+#define USB_ADDR25				0x2219
+#define P_USB_ADDR25				CBUS_REG_ADDR(USB_ADDR25)
+#define USB_ADDR26				0x221a
+#define P_USB_ADDR26				CBUS_REG_ADDR(USB_ADDR26)
+#define USB_ADDR27				0x221b
+#define P_USB_ADDR27				CBUS_REG_ADDR(USB_ADDR27)
+#define USB_ADDR28				0x221c
+#define P_USB_ADDR28				CBUS_REG_ADDR(USB_ADDR28)
+#define USB_ADDR29				0x221d
+#define P_USB_ADDR29				CBUS_REG_ADDR(USB_ADDR29)
+#define USB_ADDR30				0x221e
+#define P_USB_ADDR30				CBUS_REG_ADDR(USB_ADDR30)
+#define USB_ADDR31				0x221f
+#define P_USB_ADDR31				CBUS_REG_ADDR(USB_ADDR31)
+#define SANA_STREAM_CONTROL			0x2220
+#define P_SANA_STREAM_CONTROL			CBUS_REG_ADDR(SANA_STREAM_CONTROL)
+#define SANA_STREAM_START_ADDR			0x2221
+#define P_SANA_STREAM_START_ADDR		CBUS_REG_ADDR(SANA_STREAM_START_ADDR)
+#define SANA_STREAM_END_ADDR			0x2222
+#define P_SANA_STREAM_END_ADDR			CBUS_REG_ADDR(SANA_STREAM_END_ADDR)
+#define SANA_STREAM_WR_PTR			0x2223
+#define P_SANA_STREAM_WR_PTR			CBUS_REG_ADDR(SANA_STREAM_WR_PTR)
+#define SANA_STREAM_RD_PTR			0x2224
+#define P_SANA_STREAM_RD_PTR			CBUS_REG_ADDR(SANA_STREAM_RD_PTR)
+#define SANA_STREAM_LEVEL			0x2225
+#define P_SANA_STREAM_LEVEL			CBUS_REG_ADDR(SANA_STREAM_LEVEL)
+#define SANA_STREAM_FIFO_CTL			0x2226
+#define P_SANA_STREAM_FIFO_CTL			CBUS_REG_ADDR(SANA_STREAM_FIFO_CTL)
+#define SANA_SHIFT_CONTROL			0x2227
+#define P_SANA_SHIFT_CONTROL			CBUS_REG_ADDR(SANA_SHIFT_CONTROL)
+#define SANA_SHIFT_STARTCODE			0x2228
+#define P_SANA_SHIFT_STARTCODE			CBUS_REG_ADDR(SANA_SHIFT_STARTCODE)
+#define SANA_SHIFT_EMULATECODE			0x2229
+#define P_SANA_SHIFT_EMULATECODE		CBUS_REG_ADDR(SANA_SHIFT_EMULATECODE)
+#define SANA_SHIFT_STATUS			0x222a
+#define P_SANA_SHIFT_STATUS			CBUS_REG_ADDR(SANA_SHIFT_STATUS)
+#define SANA_SHIFTED_DATA			0x222b
+#define P_SANA_SHIFTED_DATA			CBUS_REG_ADDR(SANA_SHIFTED_DATA)
+#define SANA_SHIFT_BYTE_COUNT			0x222c
+#define P_SANA_SHIFT_BYTE_COUNT			CBUS_REG_ADDR(SANA_SHIFT_BYTE_COUNT)
+#define SANA_SHIFT_COMMAND			0x222d
+#define P_SANA_SHIFT_COMMAND			CBUS_REG_ADDR(SANA_SHIFT_COMMAND)
+#define SANA_ELEMENT_RESULT			0x222e
+#define P_SANA_ELEMENT_RESULT			CBUS_REG_ADDR(SANA_ELEMENT_RESULT)
+#define ATOM_LOCK				0x222f
+#define P_ATOM_LOCK				CBUS_REG_ADDR(ATOM_LOCK)
+#define NDMA_CNTL_REG0				0x2270
+#define P_NDMA_CNTL_REG0			CBUS_REG_ADDR(NDMA_CNTL_REG0)
+#define NDMA_TABLE_ADD_REG			0x2272
+#define P_NDMA_TABLE_ADD_REG			CBUS_REG_ADDR(NDMA_TABLE_ADD_REG)
+#define NDMA_TDES_KEY_LO			0x2273
+#define P_NDMA_TDES_KEY_LO			CBUS_REG_ADDR(NDMA_TDES_KEY_LO)
+#define NDMA_TDES_KEY_HI			0x2274
+#define P_NDMA_TDES_KEY_HI			CBUS_REG_ADDR(NDMA_TDES_KEY_HI)
+#define NDMA_TDES_CONTROL			0x2275
+#define P_NDMA_TDES_CONTROL			CBUS_REG_ADDR(NDMA_TDES_CONTROL)
+#define NDMA_RIJNDAEL_CONTROL			0x2276
+#define P_NDMA_RIJNDAEL_CONTROL			CBUS_REG_ADDR(NDMA_RIJNDAEL_CONTROL)
+#define NDMA_RIJNDAEL_RK_FIFO			0x2277
+#define P_NDMA_RIJNDAEL_RK_FIFO			CBUS_REG_ADDR(NDMA_RIJNDAEL_RK_FIFO)
+#define NDMA_CRC_OUT				0x2278
+#define P_NDMA_CRC_OUT				CBUS_REG_ADDR(NDMA_CRC_OUT)
+#define NDMA_THREAD_REG				0x2279
+#define P_NDMA_THREAD_REG			CBUS_REG_ADDR(NDMA_THREAD_REG)
+#define NDMA_THREAD_TABLE_START0		0x2280
+#define P_NDMA_THREAD_TABLE_START0		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START0)
+#define NDMA_THREAD_TABLE_CURR0			0x2281
+#define P_NDMA_THREAD_TABLE_CURR0		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR0)
+#define NDMA_THREAD_TABLE_END0			0x2282
+#define P_NDMA_THREAD_TABLE_END0		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END0)
+#define NDMA_THREAD_TABLE_START1		0x2283
+#define P_NDMA_THREAD_TABLE_START1		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START1)
+#define NDMA_THREAD_TABLE_CURR1			0x2284
+#define P_NDMA_THREAD_TABLE_CURR1		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR1)
+#define NDMA_THREAD_TABLE_END1			0x2285
+#define P_NDMA_THREAD_TABLE_END1		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END1)
+#define NDMA_THREAD_TABLE_START2		0x2286
+#define P_NDMA_THREAD_TABLE_START2		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START2)
+#define NDMA_THREAD_TABLE_CURR2			0x2287
+#define P_NDMA_THREAD_TABLE_CURR2		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR2)
+#define NDMA_THREAD_TABLE_END2			0x2288
+#define P_NDMA_THREAD_TABLE_END2		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END2)
+#define NDMA_THREAD_TABLE_START3		0x2289
+#define P_NDMA_THREAD_TABLE_START3		CBUS_REG_ADDR(NDMA_THREAD_TABLE_START3)
+#define NDMA_THREAD_TABLE_CURR3			0x228a
+#define P_NDMA_THREAD_TABLE_CURR3		CBUS_REG_ADDR(NDMA_THREAD_TABLE_CURR3)
+#define NDMA_THREAD_TABLE_END3			0x228b
+#define P_NDMA_THREAD_TABLE_END3		CBUS_REG_ADDR(NDMA_THREAD_TABLE_END3)
+#define NDMA_CNTL_REG1				0x228c
+#define P_NDMA_CNTL_REG1			CBUS_REG_ADDR(NDMA_CNTL_REG1)
+#define NDMA_AES_KEY_0				0x2290
+#define P_NDMA_AES_KEY_0			CBUS_REG_ADDR(NDMA_AES_KEY_0)
+#define NDMA_AES_KEY_1				0x2291
+#define P_NDMA_AES_KEY_1			CBUS_REG_ADDR(NDMA_AES_KEY_1)
+#define NDMA_AES_KEY_2				0x2292
+#define P_NDMA_AES_KEY_2			CBUS_REG_ADDR(NDMA_AES_KEY_2)
+#define NDMA_AES_KEY_3				0x2293
+#define P_NDMA_AES_KEY_3			CBUS_REG_ADDR(NDMA_AES_KEY_3)
+#define NDMA_AES_KEY_4				0x2294
+#define P_NDMA_AES_KEY_4			CBUS_REG_ADDR(NDMA_AES_KEY_4)
+#define NDMA_AES_KEY_5				0x2295
+#define P_NDMA_AES_KEY_5			CBUS_REG_ADDR(NDMA_AES_KEY_5)
+#define NDMA_AES_KEY_6				0x2296
+#define P_NDMA_AES_KEY_6			CBUS_REG_ADDR(NDMA_AES_KEY_6)
+#define NDMA_AES_KEY_7				0x2297
+#define P_NDMA_AES_KEY_7			CBUS_REG_ADDR(NDMA_AES_KEY_7)
+#define NDMA_AES_IV_0				0x2298
+#define P_NDMA_AES_IV_0				CBUS_REG_ADDR(NDMA_AES_IV_0)
+#define NDMA_AES_IV_1				0x2299
+#define P_NDMA_AES_IV_1				CBUS_REG_ADDR(NDMA_AES_IV_1)
+#define NDMA_AES_IV_2				0x229a
+#define P_NDMA_AES_IV_2				CBUS_REG_ADDR(NDMA_AES_IV_2)
+#define NDMA_AES_IV_3				0x229b
+#define P_NDMA_AES_IV_3				CBUS_REG_ADDR(NDMA_AES_IV_3)
+#define NDMA_AES_REG0				0x229c
+#define P_NDMA_AES_REG0				CBUS_REG_ADDR(NDMA_AES_REG0)
+#define STREAM_EVENT_INFO			0x2300
+#define P_STREAM_EVENT_INFO			CBUS_REG_ADDR(STREAM_EVENT_INFO)
+#define STREAM_OUTPUT_CONFIG			0x2301
+#define P_STREAM_OUTPUT_CONFIG			CBUS_REG_ADDR(STREAM_OUTPUT_CONFIG)
+#define C_D_BUS_CONTROL				0x2302
+#define P_C_D_BUS_CONTROL			CBUS_REG_ADDR(C_D_BUS_CONTROL)
+#define C_DATA					0x2303
+#define P_C_DATA				CBUS_REG_ADDR(C_DATA)
+#define STREAM_BUS_CONFIG			0x2304
+#define P_STREAM_BUS_CONFIG			CBUS_REG_ADDR(STREAM_BUS_CONFIG)
+#define STREAM_DATA_IN_CONFIG			0x2305
+#define P_STREAM_DATA_IN_CONFIG			CBUS_REG_ADDR(STREAM_DATA_IN_CONFIG)
+#define STREAM_WAIT_IRQ_CONFIG			0x2306
+#define P_STREAM_WAIT_IRQ_CONFIG		CBUS_REG_ADDR(STREAM_WAIT_IRQ_CONFIG)
+#define STREAM_EVENT_CTL			0x2307
+#define P_STREAM_EVENT_CTL			CBUS_REG_ADDR(STREAM_EVENT_CTL)
+#define CMD_ARGUMENT				0x2308
+#define P_CMD_ARGUMENT				CBUS_REG_ADDR(CMD_ARGUMENT)
+#define CMD_SEND				0x2309
+#define P_CMD_SEND				CBUS_REG_ADDR(CMD_SEND)
+#define SDIO_CONFIG				0x230a
+#define P_SDIO_CONFIG				CBUS_REG_ADDR(SDIO_CONFIG)
+#define SDIO_STATUS_IRQ				0x230b
+#define P_SDIO_STATUS_IRQ			CBUS_REG_ADDR(SDIO_STATUS_IRQ)
+#define SDIO_IRQ_CONFIG				0x230c
+#define P_SDIO_IRQ_CONFIG			CBUS_REG_ADDR(SDIO_IRQ_CONFIG)
+#define SDIO_MULT_CONFIG			0x230d
+#define P_SDIO_MULT_CONFIG			CBUS_REG_ADDR(SDIO_MULT_CONFIG)
+#define SDIO_M_ADDR				0x230e
+#define P_SDIO_M_ADDR				CBUS_REG_ADDR(SDIO_M_ADDR)
+#define SDIO_EXTENSION				0x230f
+#define P_SDIO_EXTENSION			CBUS_REG_ADDR(SDIO_EXTENSION)
+#define ASYNC_FIFO_REG0				0x2310
+#define P_ASYNC_FIFO_REG0			CBUS_REG_ADDR(ASYNC_FIFO_REG0)
+#define ASYNC_FIFO_REG1				0x2311
+#define P_ASYNC_FIFO_REG1			CBUS_REG_ADDR(ASYNC_FIFO_REG1)
+#define ASYNC_FIFO_REG2				0x2312
+#define P_ASYNC_FIFO_REG2			CBUS_REG_ADDR(ASYNC_FIFO_REG2)
+#define ASYNC_FIFO_REG3				0x2313
+#define P_ASYNC_FIFO_REG3			CBUS_REG_ADDR(ASYNC_FIFO_REG3)
+#define ASYNC_FIFO2_REG0			0x2314
+#define P_ASYNC_FIFO2_REG0			CBUS_REG_ADDR(ASYNC_FIFO2_REG0)
+#define ASYNC_FIFO2_REG1			0x2315
+#define P_ASYNC_FIFO2_REG1			CBUS_REG_ADDR(ASYNC_FIFO2_REG1)
+#define ASYNC_FIFO2_REG2			0x2316
+#define P_ASYNC_FIFO2_REG2			CBUS_REG_ADDR(ASYNC_FIFO2_REG2)
+#define ASYNC_FIFO2_REG3			0x2317
+#define P_ASYNC_FIFO2_REG3			CBUS_REG_ADDR(ASYNC_FIFO2_REG3)
+#define SDIO_AHB_CBUS_CTRL			0x2318
+#define P_SDIO_AHB_CBUS_CTRL			CBUS_REG_ADDR(SDIO_AHB_CBUS_CTRL)
+#define SDIO_AHB_CBUS_M_DATA			0x2319
+#define P_SDIO_AHB_CBUS_M_DATA			CBUS_REG_ADDR(SDIO_AHB_CBUS_M_DATA)
+#define SPI_FLASH_CMD				0x2320
+#define P_SPI_FLASH_CMD				CBUS_REG_ADDR(SPI_FLASH_CMD)
+#define SPI_FLASH_ADDR				0x2321
+#define P_SPI_FLASH_ADDR			CBUS_REG_ADDR(SPI_FLASH_ADDR)
+#define SPI_FLASH_CTRL				0x2322
+#define P_SPI_FLASH_CTRL			CBUS_REG_ADDR(SPI_FLASH_CTRL)
+#define SPI_FLASH_CTRL1				0x2323
+#define P_SPI_FLASH_CTRL1			CBUS_REG_ADDR(SPI_FLASH_CTRL1)
+#define SPI_FLASH_STATUS			0x2324
+#define P_SPI_FLASH_STATUS			CBUS_REG_ADDR(SPI_FLASH_STATUS)
+#define SPI_FLASH_CTRL2				0x2325
+#define P_SPI_FLASH_CTRL2			CBUS_REG_ADDR(SPI_FLASH_CTRL2)
+#define SPI_FLASH_CLOCK				0x2326
+#define P_SPI_FLASH_CLOCK			CBUS_REG_ADDR(SPI_FLASH_CLOCK)
+#define SPI_FLASH_USER				0x2327
+#define P_SPI_FLASH_USER			CBUS_REG_ADDR(SPI_FLASH_USER)
+#define SPI_FLASH_USER1				0x2328
+#define P_SPI_FLASH_USER1			CBUS_REG_ADDR(SPI_FLASH_USER1)
+#define SPI_FLASH_USER2				0x2329
+#define P_SPI_FLASH_USER2			CBUS_REG_ADDR(SPI_FLASH_USER2)
+#define SPI_FLASH_USER3				0x232a
+#define P_SPI_FLASH_USER3			CBUS_REG_ADDR(SPI_FLASH_USER3)
+#define SPI_FLASH_USER4				0x232b
+#define P_SPI_FLASH_USER4			CBUS_REG_ADDR(SPI_FLASH_USER4)
+#define SPI_FLASH_SLAVE				0x232c
+#define P_SPI_FLASH_SLAVE			CBUS_REG_ADDR(SPI_FLASH_SLAVE)
+#define SPI_FLASH_SLAVE1			0x232d
+#define P_SPI_FLASH_SLAVE1			CBUS_REG_ADDR(SPI_FLASH_SLAVE1)
+#define SPI_FLASH_SLAVE2			0x232e
+#define P_SPI_FLASH_SLAVE2			CBUS_REG_ADDR(SPI_FLASH_SLAVE2)
+#define SPI_FLASH_SLAVE3			0x232f
+#define P_SPI_FLASH_SLAVE3			CBUS_REG_ADDR(SPI_FLASH_SLAVE3)
+#define SPI_FLASH_C0				0x2330
+#define P_SPI_FLASH_C0				CBUS_REG_ADDR(SPI_FLASH_C0)
+#define SPI_FLASH_C1				0x2331
+#define P_SPI_FLASH_C1				CBUS_REG_ADDR(SPI_FLASH_C1)
+#define SPI_FLASH_C2				0x2332
+#define P_SPI_FLASH_C2				CBUS_REG_ADDR(SPI_FLASH_C2)
+#define SPI_FLASH_C3				0x2333
+#define P_SPI_FLASH_C3				CBUS_REG_ADDR(SPI_FLASH_C3)
+#define SPI_FLASH_C4				0x2334
+#define P_SPI_FLASH_C4				CBUS_REG_ADDR(SPI_FLASH_C4)
+#define SPI_FLASH_C5				0x2335
+#define P_SPI_FLASH_C5				CBUS_REG_ADDR(SPI_FLASH_C5)
+#define SPI_FLASH_C6				0x2336
+#define P_SPI_FLASH_C6				CBUS_REG_ADDR(SPI_FLASH_C6)
+#define SPI_FLASH_C7				0x2337
+#define P_SPI_FLASH_C7				CBUS_REG_ADDR(SPI_FLASH_C7)
+#define SPI_FLASH_B8				0x2338
+#define P_SPI_FLASH_B8				CBUS_REG_ADDR(SPI_FLASH_B8)
+#define SPI_FLASH_B9				0x2339
+#define P_SPI_FLASH_B9				CBUS_REG_ADDR(SPI_FLASH_B9)
+#define SPI_FLASH_B10				0x233a
+#define P_SPI_FLASH_B10				CBUS_REG_ADDR(SPI_FLASH_B10)
+#define SPI_FLASH_B11				0x233b
+#define P_SPI_FLASH_B11				CBUS_REG_ADDR(SPI_FLASH_B11)
+#define SPI_FLASH_B12				0x233c
+#define P_SPI_FLASH_B12				CBUS_REG_ADDR(SPI_FLASH_B12)
+#define SPI_FLASH_B13				0x233d
+#define P_SPI_FLASH_B13				CBUS_REG_ADDR(SPI_FLASH_B13)
+#define SPI_FLASH_B14				0x233e
+#define P_SPI_FLASH_B14				CBUS_REG_ADDR(SPI_FLASH_B14)
+#define SPI_FLASH_B15				0x233f
+#define P_SPI_FLASH_B15				CBUS_REG_ADDR(SPI_FLASH_B15)
+#define I2C_M_3_CONTROL_REG			0x2348
+#define P_I2C_M_3_CONTROL_REG			CBUS_REG_ADDR(I2C_M_3_CONTROL_REG)
+#define I2C_M_3_SLAVE_ADDR			0x2349
+#define P_I2C_M_3_SLAVE_ADDR			CBUS_REG_ADDR(I2C_M_3_SLAVE_ADDR)
+#define I2C_M_3_TOKEN_LIST0			0x234a
+#define P_I2C_M_3_TOKEN_LIST0			CBUS_REG_ADDR(I2C_M_3_TOKEN_LIST0)
+#define I2C_M_3_TOKEN_LIST1			0x234b
+#define P_I2C_M_3_TOKEN_LIST1			CBUS_REG_ADDR(I2C_M_3_TOKEN_LIST1)
+#define I2C_M_3_WDATA_REG0			0x234c
+#define P_I2C_M_3_WDATA_REG0			CBUS_REG_ADDR(I2C_M_3_WDATA_REG0)
+#define I2C_M_3_WDATA_REG1			0x234d
+#define P_I2C_M_3_WDATA_REG1			CBUS_REG_ADDR(I2C_M_3_WDATA_REG1)
+#define I2C_M_3_RDATA_REG0			0x234e
+#define P_I2C_M_3_RDATA_REG0			CBUS_REG_ADDR(I2C_M_3_RDATA_REG0)
+#define I2C_M_3_RDATA_REG1			0x234f
+#define P_I2C_M_3_RDATA_REG1			CBUS_REG_ADDR(I2C_M_3_RDATA_REG1)
+#define SPICC_RXDATA				0x2360
+#define P_SPICC_RXDATA				CBUS_REG_ADDR(SPICC_RXDATA)
+#define SPICC_TXDATA				0x2361
+#define P_SPICC_TXDATA				CBUS_REG_ADDR(SPICC_TXDATA)
+#define SPICC_CONREG				0x2362
+#define P_SPICC_CONREG				CBUS_REG_ADDR(SPICC_CONREG)
+#define SPICC_INTREG				0x2363
+#define P_SPICC_INTREG				CBUS_REG_ADDR(SPICC_INTREG)
+#define SPICC_DMAREG				0x2364
+#define P_SPICC_DMAREG				CBUS_REG_ADDR(SPICC_DMAREG)
+#define SPICC_STATREG				0x2365
+#define P_SPICC_STATREG				CBUS_REG_ADDR(SPICC_STATREG)
+#define SPICC_PERIODREG				0x2366
+#define P_SPICC_PERIODREG			CBUS_REG_ADDR(SPICC_PERIODREG)
+#define SPICC_TESTREG				0x2367
+#define P_SPICC_TESTREG				CBUS_REG_ADDR(SPICC_TESTREG)
+#define SPICC_DRADDR				0x2368
+#define P_SPICC_DRADDR				CBUS_REG_ADDR(SPICC_DRADDR)
+#define SPICC_DWADDR				0x2369
+#define P_SPICC_DWADDR				CBUS_REG_ADDR(SPICC_DWADDR)
+#define SD_REG0_ARGU				0x2380
+#define P_SD_REG0_ARGU				CBUS_REG_ADDR(SD_REG0_ARGU)
+#define SD_REG1_SEND				0x2381
+#define P_SD_REG1_SEND				CBUS_REG_ADDR(SD_REG1_SEND)
+#define SD_REG2_CNTL				0x2382
+#define P_SD_REG2_CNTL				CBUS_REG_ADDR(SD_REG2_CNTL)
+#define SD_REG3_STAT				0x2383
+#define P_SD_REG3_STAT				CBUS_REG_ADDR(SD_REG3_STAT)
+#define SD_REG4_CLKC				0x2384
+#define P_SD_REG4_CLKC				CBUS_REG_ADDR(SD_REG4_CLKC)
+#define SD_REG5_ADDR				0x2385
+#define P_SD_REG5_ADDR				CBUS_REG_ADDR(SD_REG5_ADDR)
+#define SD_REG6_PDMA				0x2386
+#define P_SD_REG6_PDMA				CBUS_REG_ADDR(SD_REG6_PDMA)
+#define SD_REG7_MISC				0x2387
+#define P_SD_REG7_MISC				CBUS_REG_ADDR(SD_REG7_MISC)
+#define SD_REG8_DATA				0x2388
+#define P_SD_REG8_DATA				CBUS_REG_ADDR(SD_REG8_DATA)
+#define SD_REG9_ICTL				0x2389
+#define P_SD_REG9_ICTL				CBUS_REG_ADDR(SD_REG9_ICTL)
+#define SD_REGA_ISTA				0x238a
+#define P_SD_REGA_ISTA				CBUS_REG_ADDR(SD_REGA_ISTA)
+#define SD_REGB_SRST				0x238b
+#define P_SD_REGB_SRST				CBUS_REG_ADDR(SD_REGB_SRST)
+#define SD_REGC_ESTA				0x238c
+#define P_SD_REGC_ESTA				CBUS_REG_ADDR(SD_REGC_ESTA)
+#define SD_REGD_ENHC				0x238d
+#define P_SD_REGD_ENHC				CBUS_REG_ADDR(SD_REGD_ENHC)
+#define SD_REGE_CLK2				0x238e
+#define P_SD_REGE_CLK2				CBUS_REG_ADDR(SD_REGE_CLK2)
+#define ISA_DEBUG_REG0				0x2600
+#define P_ISA_DEBUG_REG0			CBUS_REG_ADDR(ISA_DEBUG_REG0)
+#define ISA_DEBUG_REG1				0x2601
+#define P_ISA_DEBUG_REG1			CBUS_REG_ADDR(ISA_DEBUG_REG1)
+#define ISA_DEBUG_REG2				0x2602
+#define P_ISA_DEBUG_REG2			CBUS_REG_ADDR(ISA_DEBUG_REG2)
+#define ISA_DEBUG_REG3				0x2603
+#define P_ISA_DEBUG_REG3			CBUS_REG_ADDR(ISA_DEBUG_REG3)
+#define ISA_PLL_CLK_SIM0			0x2608
+#define P_ISA_PLL_CLK_SIM0			CBUS_REG_ADDR(ISA_PLL_CLK_SIM0)
+#define ISA_CNTL_REG0				0x2609
+#define P_ISA_CNTL_REG0				CBUS_REG_ADDR(ISA_CNTL_REG0)
+#define AO_CPU_IRQ_IN0_INTR_STAT		0x2610
+#define P_AO_CPU_IRQ_IN0_INTR_STAT		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_STAT)
+#define AO_CPU_IRQ_IN0_INTR_STAT_CLR		0x2611
+#define P_AO_CPU_IRQ_IN0_INTR_STAT_CLR		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_STAT_CLR)
+#define AO_CPU_IRQ_IN0_INTR_MASK		0x2612
+#define P_AO_CPU_IRQ_IN0_INTR_MASK		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_MASK)
+#define AO_CPU_IRQ_IN0_INTR_FIRQ_SEL		0x2613
+#define P_AO_CPU_IRQ_IN0_INTR_FIRQ_SEL		CBUS_REG_ADDR(AO_CPU_IRQ_IN0_INTR_FIRQ_SEL)
+#define GPIO_INTR_EDGE_POL			0x2620
+#define P_GPIO_INTR_EDGE_POL			CBUS_REG_ADDR(GPIO_INTR_EDGE_POL)
+#define GPIO_INTR_GPIO_SEL0			0x2621
+#define P_GPIO_INTR_GPIO_SEL0			CBUS_REG_ADDR(GPIO_INTR_GPIO_SEL0)
+#define GPIO_INTR_GPIO_SEL1			0x2622
+#define P_GPIO_INTR_GPIO_SEL1			CBUS_REG_ADDR(GPIO_INTR_GPIO_SEL1)
+#define GPIO_INTR_FILTER_SEL0			0x2623
+#define P_GPIO_INTR_FILTER_SEL0			CBUS_REG_ADDR(GPIO_INTR_FILTER_SEL0)
+#define MEDIA_CPU_INTR_STAT			0x2628
+#define P_MEDIA_CPU_INTR_STAT			CBUS_REG_ADDR(MEDIA_CPU_INTR_STAT)
+#define MEDIA_CPU_INTR_STAT_CLR			0x2629
+#define P_MEDIA_CPU_INTR_STAT_CLR		CBUS_REG_ADDR(MEDIA_CPU_INTR_STAT_CLR)
+#define MEDIA_CPU_INTR_MASK			0x262a
+#define P_MEDIA_CPU_INTR_MASK			CBUS_REG_ADDR(MEDIA_CPU_INTR_MASK)
+#define MEDIA_CPU_INTR_FIRQ_SEL			0x262b
+#define P_MEDIA_CPU_INTR_FIRQ_SEL		CBUS_REG_ADDR(MEDIA_CPU_INTR_FIRQ_SEL)
+#define ISA_BIST_REG0				0x2630
+#define P_ISA_BIST_REG0				CBUS_REG_ADDR(ISA_BIST_REG0)
+#define ISA_BIST_REG1				0x2631
+#define P_ISA_BIST_REG1				CBUS_REG_ADDR(ISA_BIST_REG1)
+#define WATCHDOG_TC				0x2640
+#define P_WATCHDOG_TC				CBUS_REG_ADDR(WATCHDOG_TC)
+#define WATCHDOG_RESET				0x2641
+#define P_WATCHDOG_RESET			CBUS_REG_ADDR(WATCHDOG_RESET)
+#define AHB_ARBITER_REG				0x2642
+#define P_AHB_ARBITER_REG			CBUS_REG_ADDR(AHB_ARBITER_REG)
+#define AHB_ARBDEC_REG				0x2643
+#define P_AHB_ARBDEC_REG			CBUS_REG_ADDR(AHB_ARBDEC_REG)
+#define AHB_ARBITER2_REG			0x264a
+#define P_AHB_ARBITER2_REG			CBUS_REG_ADDR(AHB_ARBITER2_REG)
+#define DEVICE_MMCP_CNTL			0x264b
+#define P_DEVICE_MMCP_CNTL			CBUS_REG_ADDR(DEVICE_MMCP_CNTL)
+#define AUDIO_MMCP_CNTL				0x264c
+#define P_AUDIO_MMCP_CNTL			CBUS_REG_ADDR(AUDIO_MMCP_CNTL)
+#define ISA_TIMER_MUX				0x2650
+#define P_ISA_TIMER_MUX				CBUS_REG_ADDR(ISA_TIMER_MUX)
+#define ISA_TIMERA				0x2651
+#define P_ISA_TIMERA				CBUS_REG_ADDR(ISA_TIMERA)
+#define ISA_TIMERB				0x2652
+#define P_ISA_TIMERB				CBUS_REG_ADDR(ISA_TIMERB)
+#define ISA_TIMERC				0x2653
+#define P_ISA_TIMERC				CBUS_REG_ADDR(ISA_TIMERC)
+#define ISA_TIMERD				0x2654
+#define P_ISA_TIMERD				CBUS_REG_ADDR(ISA_TIMERD)
+#define ISA_TIMERE				0x2655
+#define P_ISA_TIMERE				CBUS_REG_ADDR(ISA_TIMERE)
+#define FBUF_ADDR				0x2656
+#define P_FBUF_ADDR				CBUS_REG_ADDR(FBUF_ADDR)
+#define SDRAM_CTL0				0x2657
+#define P_SDRAM_CTL0				CBUS_REG_ADDR(SDRAM_CTL0)
+#define SDRAM_CTL2				0x2658
+#define P_SDRAM_CTL2				CBUS_REG_ADDR(SDRAM_CTL2)
+#define SDRAM_CTL4				0x265a
+#define P_SDRAM_CTL4				CBUS_REG_ADDR(SDRAM_CTL4)
+#define SDRAM_CTL5				0x265b
+#define P_SDRAM_CTL5				CBUS_REG_ADDR(SDRAM_CTL5)
+#define SDRAM_CTL6				0x265c
+#define P_SDRAM_CTL6				CBUS_REG_ADDR(SDRAM_CTL6)
+#define SDRAM_CTL7				0x265d
+#define P_SDRAM_CTL7				CBUS_REG_ADDR(SDRAM_CTL7)
+#define SDRAM_CTL8				0x265e
+#define P_SDRAM_CTL8				CBUS_REG_ADDR(SDRAM_CTL8)
+#define AHB_MP4_MC_CTL				0x265f
+#define P_AHB_MP4_MC_CTL			CBUS_REG_ADDR(AHB_MP4_MC_CTL)
+#define MEDIA_CPU_PCR				0x2660
+#define P_MEDIA_CPU_PCR				CBUS_REG_ADDR(MEDIA_CPU_PCR)
+#define MEDIA_CPU_CTL				0x2661
+#define P_MEDIA_CPU_CTL				CBUS_REG_ADDR(MEDIA_CPU_CTL)
+#define ISA_TIMER_MUX1				0x2664
+#define P_ISA_TIMER_MUX1			CBUS_REG_ADDR(ISA_TIMER_MUX1)
+#define ISA_TIMERF				0x2665
+#define P_ISA_TIMERF				CBUS_REG_ADDR(ISA_TIMERF)
+#define ISA_TIMERG				0x2666
+#define P_ISA_TIMERG				CBUS_REG_ADDR(ISA_TIMERG)
+#define ISA_TIMERH				0x2667
+#define P_ISA_TIMERH				CBUS_REG_ADDR(ISA_TIMERH)
+#define ISA_TIMERI				0x2668
+#define P_ISA_TIMERI				CBUS_REG_ADDR(ISA_TIMERI)
+#define ABUF_WR_CTL0				0x2670
+#define P_ABUF_WR_CTL0				CBUS_REG_ADDR(ABUF_WR_CTL0)
+#define ABUF_WR_CTL1				0x2671
+#define P_ABUF_WR_CTL1				CBUS_REG_ADDR(ABUF_WR_CTL1)
+#define ABUF_WR_CTL2				0x2672
+#define P_ABUF_WR_CTL2				CBUS_REG_ADDR(ABUF_WR_CTL2)
+#define ABUF_WR_CTL3				0x2673
+#define P_ABUF_WR_CTL3				CBUS_REG_ADDR(ABUF_WR_CTL3)
+#define ABUF_RD_CTL0				0x2674
+#define P_ABUF_RD_CTL0				CBUS_REG_ADDR(ABUF_RD_CTL0)
+#define ABUF_RD_CTL1				0x2675
+#define P_ABUF_RD_CTL1				CBUS_REG_ADDR(ABUF_RD_CTL1)
+#define ABUF_RD_CTL2				0x2676
+#define P_ABUF_RD_CTL2				CBUS_REG_ADDR(ABUF_RD_CTL2)
+#define ABUF_RD_CTL3				0x2677
+#define P_ABUF_RD_CTL3				CBUS_REG_ADDR(ABUF_RD_CTL3)
+#define ABUF_ARB_CTL0				0x2678
+#define P_ABUF_ARB_CTL0				CBUS_REG_ADDR(ABUF_ARB_CTL0)
+#define ABUF_FIFO_CTL0				0x2679
+#define P_ABUF_FIFO_CTL0			CBUS_REG_ADDR(ABUF_FIFO_CTL0)
+#define AHB_BRIDGE_CNTL_WR			0x2680
+#define P_AHB_BRIDGE_CNTL_WR			CBUS_REG_ADDR(AHB_BRIDGE_CNTL_WR)
+#define AHB_BRIDGE_REMAP0			0x2681
+#define P_AHB_BRIDGE_REMAP0			CBUS_REG_ADDR(AHB_BRIDGE_REMAP0)
+#define AHB_BRIDGE_REMAP1			0x2682
+#define P_AHB_BRIDGE_REMAP1			CBUS_REG_ADDR(AHB_BRIDGE_REMAP1)
+#define AHB_BRIDGE_REMAP2			0x2683
+#define P_AHB_BRIDGE_REMAP2			CBUS_REG_ADDR(AHB_BRIDGE_REMAP2)
+#define AHB_BRIDGE_REMAP3			0x2684
+#define P_AHB_BRIDGE_REMAP3			CBUS_REG_ADDR(AHB_BRIDGE_REMAP3)
+#define AHB_BRIDGE_CNTL_REG1			0x2685
+#define P_AHB_BRIDGE_CNTL_REG1			CBUS_REG_ADDR(AHB_BRIDGE_CNTL_REG1)
+#define AHB_BRIDGE_CNTL_REG2			0x2686
+#define P_AHB_BRIDGE_CNTL_REG2			CBUS_REG_ADDR(AHB_BRIDGE_CNTL_REG2)
+#define BT_CTRL					0x1340
+#define P_BT_CTRL				CBUS_REG_ADDR(BT_CTRL)
+#define BT_VBISTART				0x1341
+#define P_BT_VBISTART				CBUS_REG_ADDR(BT_VBISTART)
+#define BT_VBIEND				0x1342
+#define P_BT_VBIEND				CBUS_REG_ADDR(BT_VBIEND)
+#define BT_FIELDSADR				0x1343
+#define P_BT_FIELDSADR				CBUS_REG_ADDR(BT_FIELDSADR)
+#define BT_LINECTRL				0x1344
+#define P_BT_LINECTRL				CBUS_REG_ADDR(BT_LINECTRL)
+#define BT_VIDEOSTART				0x1345
+#define P_BT_VIDEOSTART				CBUS_REG_ADDR(BT_VIDEOSTART)
+#define BT_VIDEOEND				0x1346
+#define P_BT_VIDEOEND				CBUS_REG_ADDR(BT_VIDEOEND)
+#define BT_SLICELINE0				0x1347
+#define P_BT_SLICELINE0				CBUS_REG_ADDR(BT_SLICELINE0)
+#define BT_SLICELINE1				0x1348
+#define P_BT_SLICELINE1				CBUS_REG_ADDR(BT_SLICELINE1)
+#define BT_PORT_CTRL				0x1349
+#define P_BT_PORT_CTRL				CBUS_REG_ADDR(BT_PORT_CTRL)
+#define BT_SWAP_CTRL				0x134a
+#define P_BT_SWAP_CTRL				CBUS_REG_ADDR(BT_SWAP_CTRL)
+#define BT_ANCISADR				0x134b
+#define P_BT_ANCISADR				CBUS_REG_ADDR(BT_ANCISADR)
+#define BT_ANCIEADR				0x134c
+#define P_BT_ANCIEADR				CBUS_REG_ADDR(BT_ANCIEADR)
+#define BT_AFIFO_CTRL				0x134d
+#define P_BT_AFIFO_CTRL				CBUS_REG_ADDR(BT_AFIFO_CTRL)
+#define BT_601_CTRL0				0x134e
+#define P_BT_601_CTRL0				CBUS_REG_ADDR(BT_601_CTRL0)
+#define BT_601_CTRL1				0x134f
+#define P_BT_601_CTRL1				CBUS_REG_ADDR(BT_601_CTRL1)
+#define BT_601_CTRL2				0x1350
+#define P_BT_601_CTRL2				CBUS_REG_ADDR(BT_601_CTRL2)
+#define BT_601_CTRL3				0x1351
+#define P_BT_601_CTRL3				CBUS_REG_ADDR(BT_601_CTRL3)
+#define BT_FIELD_LUMA				0x1352
+#define P_BT_FIELD_LUMA				CBUS_REG_ADDR(BT_FIELD_LUMA)
+#define BT_RAW_CTRL				0x1353
+#define P_BT_RAW_CTRL				CBUS_REG_ADDR(BT_RAW_CTRL)
+#define BT_STATUS				0x1354
+#define P_BT_STATUS				CBUS_REG_ADDR(BT_STATUS)
+#define BT_INT_CTRL				0x1355
+#define P_BT_INT_CTRL				CBUS_REG_ADDR(BT_INT_CTRL)
+#define BT_ANCI_STATUS				0x1356
+#define P_BT_ANCI_STATUS			CBUS_REG_ADDR(BT_ANCI_STATUS)
+#define BT_VLINE_STATUS				0x1357
+#define P_BT_VLINE_STATUS			CBUS_REG_ADDR(BT_VLINE_STATUS)
+#define BT_AFIFO_PTR				0x1358
+#define P_BT_AFIFO_PTR				CBUS_REG_ADDR(BT_AFIFO_PTR)
+#define BT_JPEGBYTENUM				0x1359
+#define P_BT_JPEGBYTENUM			CBUS_REG_ADDR(BT_JPEGBYTENUM)
+#define BT_ERR_CNT				0x135a
+#define P_BT_ERR_CNT				CBUS_REG_ADDR(BT_ERR_CNT)
+#define BT_JPEG_STATUS0				0x135b
+#define P_BT_JPEG_STATUS0			CBUS_REG_ADDR(BT_JPEG_STATUS0)
+#define BT_JPEG_STATUS1				0x135c
+#define P_BT_JPEG_STATUS1			CBUS_REG_ADDR(BT_JPEG_STATUS1)
+#define BT_LCNT_STATUS				0x135d
+#define P_BT_LCNT_STATUS			CBUS_REG_ADDR(BT_LCNT_STATUS)
+#define BT_PCNT_STATUS				0x135e
+#define P_BT_PCNT_STATUS			CBUS_REG_ADDR(BT_PCNT_STATUS)
+#define BT656_ADDR_END				0x135f
+#define P_BT656_ADDR_END			CBUS_REG_ADDR(BT656_ADDR_END)
+#define IQ_OM_WIDTH				0x2510
+#define P_IQ_OM_WIDTH				CBUS_REG_ADDR(IQ_OM_WIDTH)
+#define DBG_ADDR_START				0x2ff0
+#define P_DBG_ADDR_START			CBUS_REG_ADDR(DBG_ADDR_START)
+#define DBG_ADDR_END				0x2fff
+#define P_DBG_ADDR_END				CBUS_REG_ADDR(DBG_ADDR_END)
+#define DBG_CTRL				0x2ff1
+#define P_DBG_CTRL				CBUS_REG_ADDR(DBG_CTRL)
+#define DBG_LED					0x2ff2
+#define P_DBG_LED				CBUS_REG_ADDR(DBG_LED)
+#define DBG_SWITCH				0x2ff3
+#define P_DBG_SWITCH				CBUS_REG_ADDR(DBG_SWITCH)
+#define DBG_VERSION				0x2ff4
+#define P_DBG_VERSION				CBUS_REG_ADDR(DBG_VERSION)
+#define VERSION_CTRL				0x1100
+#define P_VERSION_CTRL				CBUS_REG_ADDR(VERSION_CTRL)
+#define RESET0_REGISTER				0x1101
+#define P_RESET0_REGISTER			CBUS_REG_ADDR(RESET0_REGISTER)
+#define RESET1_REGISTER				0x1102
+#define P_RESET1_REGISTER			CBUS_REG_ADDR(RESET1_REGISTER)
+#define RESET2_REGISTER				0x1103
+#define P_RESET2_REGISTER			CBUS_REG_ADDR(RESET2_REGISTER)
+#define RESET3_REGISTER				0x1104
+#define P_RESET3_REGISTER			CBUS_REG_ADDR(RESET3_REGISTER)
+#define RESET4_REGISTER				0x1105
+#define P_RESET4_REGISTER			CBUS_REG_ADDR(RESET4_REGISTER)
+#define RESET5_REGISTER				0x1106
+#define P_RESET5_REGISTER			CBUS_REG_ADDR(RESET5_REGISTER)
+#define RESET6_REGISTER				0x1107
+#define P_RESET6_REGISTER			CBUS_REG_ADDR(RESET6_REGISTER)
+#define RESET7_REGISTER				0x1108
+#define P_RESET7_REGISTER			CBUS_REG_ADDR(RESET7_REGISTER)
+#define RESET0_MASK				0x1110
+#define P_RESET0_MASK				CBUS_REG_ADDR(RESET0_MASK)
+#define RESET1_MASK				0x1111
+#define P_RESET1_MASK				CBUS_REG_ADDR(RESET1_MASK)
+#define RESET2_MASK				0x1112
+#define P_RESET2_MASK				CBUS_REG_ADDR(RESET2_MASK)
+#define RESET3_MASK				0x1113
+#define P_RESET3_MASK				CBUS_REG_ADDR(RESET3_MASK)
+#define RESET4_MASK				0x1114
+#define P_RESET4_MASK				CBUS_REG_ADDR(RESET4_MASK)
+#define RESET5_MASK				0x1115
+#define P_RESET5_MASK				CBUS_REG_ADDR(RESET5_MASK)
+#define RESET6_MASK				0x1116
+#define P_RESET6_MASK				CBUS_REG_ADDR(RESET6_MASK)
+#define CRT_MASK				0x1117
+#define P_CRT_MASK				CBUS_REG_ADDR(CRT_MASK)
+#define RESET7_MASK				0x1118
+#define P_RESET7_MASK				CBUS_REG_ADDR(RESET7_MASK)
+#define RESET0_LEVEL				0x1120
+#define P_RESET0_LEVEL				CBUS_REG_ADDR(RESET0_LEVEL)
+#define RESET1_LEVEL				0x1121
+#define P_RESET1_LEVEL				CBUS_REG_ADDR(RESET1_LEVEL)
+#define RESET2_LEVEL				0x1122
+#define P_RESET2_LEVEL				CBUS_REG_ADDR(RESET2_LEVEL)
+#define RESET3_LEVEL				0x1123
+#define P_RESET3_LEVEL				CBUS_REG_ADDR(RESET3_LEVEL)
+#define RESET4_LEVEL				0x1124
+#define P_RESET4_LEVEL				CBUS_REG_ADDR(RESET4_LEVEL)
+#define RESET5_LEVEL				0x1125
+#define P_RESET5_LEVEL				CBUS_REG_ADDR(RESET5_LEVEL)
+#define RESET6_LEVEL				0x1126
+#define P_RESET6_LEVEL				CBUS_REG_ADDR(RESET6_LEVEL)
+#define RESET7_LEVEL				0x1127
+#define P_RESET7_LEVEL				CBUS_REG_ADDR(RESET7_LEVEL)
+#define SCR_HIU					0x100b
+#define P_SCR_HIU				CBUS_REG_ADDR(SCR_HIU)
+#define HPG_TIMER				0x100f
+#define P_HPG_TIMER				CBUS_REG_ADDR(HPG_TIMER)
+#define HHI_GP0_PLL_CNTL			0x1010
+#define P_HHI_GP0_PLL_CNTL			CBUS_REG_ADDR(HHI_GP0_PLL_CNTL)
+#define HHI_GP0_PLL_CNTL2			0x1011
+#define P_HHI_GP0_PLL_CNTL2			CBUS_REG_ADDR(HHI_GP0_PLL_CNTL2)
+#define HHI_GP0_PLL_CNTL3			0x1012
+#define P_HHI_GP0_PLL_CNTL3			CBUS_REG_ADDR(HHI_GP0_PLL_CNTL3)
+#define HHI_GP0_PLL_CNTL4			0x1013
+#define P_HHI_GP0_PLL_CNTL4			CBUS_REG_ADDR(HHI_GP0_PLL_CNTL4)
+#define HHI_GP0_PLL_CNTL5			0x1014
+#define P_HHI_GP0_PLL_CNTL5			CBUS_REG_ADDR(HHI_GP0_PLL_CNTL5)
+#define HHI_GP1_PLL_CNTL			0x1016
+#define P_HHI_GP1_PLL_CNTL			CBUS_REG_ADDR(HHI_GP1_PLL_CNTL)
+#define HHI_GP1_PLL_CNTL2			0x1017
+#define P_HHI_GP1_PLL_CNTL2			CBUS_REG_ADDR(HHI_GP1_PLL_CNTL2)
+#define HHI_GP1_PLL_CNTL3			0x1018
+#define P_HHI_GP1_PLL_CNTL3			CBUS_REG_ADDR(HHI_GP1_PLL_CNTL3)
+#define HHI_GP1_PLL_CNTL4			0x1019
+#define P_HHI_GP1_PLL_CNTL4			CBUS_REG_ADDR(HHI_GP1_PLL_CNTL4)
+#define HHI_GP1_PLL_CNTL5			0x101a
+#define P_HHI_GP1_PLL_CNTL5			CBUS_REG_ADDR(HHI_GP1_PLL_CNTL5)
+#define HHI_CADC_CNTL				0x1020
+#define P_HHI_CADC_CNTL				CBUS_REG_ADDR(HHI_CADC_CNTL)
+#define HHI_CADC_CNTL2				0x1021
+#define P_HHI_CADC_CNTL2			CBUS_REG_ADDR(HHI_CADC_CNTL2)
+#define HHI_CADC_CNTL3				0x1022
+#define P_HHI_CADC_CNTL3			CBUS_REG_ADDR(HHI_CADC_CNTL3)
+#define HHI_CADC_CNTL4				0x1023
+#define P_HHI_CADC_CNTL4			CBUS_REG_ADDR(HHI_CADC_CNTL4)
+#define HHI_CADC_CNTL5				0x1024
+#define P_HHI_CADC_CNTL5			CBUS_REG_ADDR(HHI_CADC_CNTL5)
+#define HHI_CADC_CNTL6				0x1025
+#define P_HHI_CADC_CNTL6			CBUS_REG_ADDR(HHI_CADC_CNTL6)
+#define HHI_DADC_CNTL				0x1027
+#define P_HHI_DADC_CNTL				CBUS_REG_ADDR(HHI_DADC_CNTL)
+#define HHI_DADC_CNTL2				0x1028
+#define P_HHI_DADC_CNTL2			CBUS_REG_ADDR(HHI_DADC_CNTL2)
+#define HHI_DADC_RDBK0_I			0x1029
+#define P_HHI_DADC_RDBK0_I			CBUS_REG_ADDR(HHI_DADC_RDBK0_I)
+#define HHI_DADC_CNTL3				0x102a
+#define P_HHI_DADC_CNTL3			CBUS_REG_ADDR(HHI_DADC_CNTL3)
+#define HHI_DADC_CNTL4				0x102b
+#define P_HHI_DADC_CNTL4			CBUS_REG_ADDR(HHI_DADC_CNTL4)
+#define HARM_ASB_MB0				0x1030
+#define P_HARM_ASB_MB0				CBUS_REG_ADDR(HARM_ASB_MB0)
+#define HARM_ASB_MB1				0x1031
+#define P_HARM_ASB_MB1				CBUS_REG_ADDR(HARM_ASB_MB1)
+#define HARM_ASB_MB2				0x1032
+#define P_HARM_ASB_MB2				CBUS_REG_ADDR(HARM_ASB_MB2)
+#define HARM_ASB_MB3				0x1033
+#define P_HARM_ASB_MB3				CBUS_REG_ADDR(HARM_ASB_MB3)
+#define HASB_ARM_MB0				0x1034
+#define P_HASB_ARM_MB0				CBUS_REG_ADDR(HASB_ARM_MB0)
+#define HASB_ARM_MB1				0x1035
+#define P_HASB_ARM_MB1				CBUS_REG_ADDR(HASB_ARM_MB1)
+#define HASB_ARM_MB2				0x1036
+#define P_HASB_ARM_MB2				CBUS_REG_ADDR(HASB_ARM_MB2)
+#define HASB_ARM_MB3				0x1037
+#define P_HASB_ARM_MB3				CBUS_REG_ADDR(HASB_ARM_MB3)
+#define HHI_TIMER90K				0x103b
+#define P_HHI_TIMER90K				CBUS_REG_ADDR(HHI_TIMER90K)
+#define HHI_MEM_PD_REG0				0x1040
+#define P_HHI_MEM_PD_REG0			CBUS_REG_ADDR(HHI_MEM_PD_REG0)
+#define HHI_VPU_MEM_PD_REG0			0x1041
+#define P_HHI_VPU_MEM_PD_REG0			CBUS_REG_ADDR(HHI_VPU_MEM_PD_REG0)
+#define HHI_VPU_MEM_PD_REG1			0x1042
+#define P_HHI_VPU_MEM_PD_REG1			CBUS_REG_ADDR(HHI_VPU_MEM_PD_REG1)
+#define HHI_DEMOD_MEM_PD_REG			0x1043
+#define P_HHI_DEMOD_MEM_PD_REG			CBUS_REG_ADDR(HHI_DEMOD_MEM_PD_REG)
+#define HHI_AUD_DAC_CTRL			0x1044
+#define P_HHI_AUD_DAC_CTRL			CBUS_REG_ADDR(HHI_AUD_DAC_CTRL)
+#define HHI_VIID_CLK_DIV			0x104a
+#define P_HHI_VIID_CLK_DIV			CBUS_REG_ADDR(HHI_VIID_CLK_DIV)
+#define HHI_VIID_CLK_CNTL			0x104b
+#define P_HHI_VIID_CLK_CNTL			CBUS_REG_ADDR(HHI_VIID_CLK_CNTL)
+#define HHI_VIID_DIVIDER_CNTL			0x104c
+#define P_HHI_VIID_DIVIDER_CNTL			CBUS_REG_ADDR(HHI_VIID_DIVIDER_CNTL)
+#define HHI_GCLK_MPEG0				0x1050
+#define P_HHI_GCLK_MPEG0			CBUS_REG_ADDR(HHI_GCLK_MPEG0)
+#define HHI_GCLK_MPEG1				0x1051
+#define P_HHI_GCLK_MPEG1			CBUS_REG_ADDR(HHI_GCLK_MPEG1)
+#define HHI_GCLK_MPEG2				0x1052
+#define P_HHI_GCLK_MPEG2			CBUS_REG_ADDR(HHI_GCLK_MPEG2)
+#define HHI_GCLK_OTHER				0x1054
+#define P_HHI_GCLK_OTHER			CBUS_REG_ADDR(HHI_GCLK_OTHER)
+#define HHI_GCLK_AO				0x1055
+#define P_HHI_GCLK_AO				CBUS_REG_ADDR(HHI_GCLK_AO)
+#define HHI_SYS_CPU_CLK_CNTL1			0x1057
+#define P_HHI_SYS_CPU_CLK_CNTL1			CBUS_REG_ADDR(HHI_SYS_CPU_CLK_CNTL1)
+#define HHI_VID_CLK_DIV				0x1059
+#define P_HHI_VID_CLK_DIV			CBUS_REG_ADDR(HHI_VID_CLK_DIV)
+#define HHI_MPEG_CLK_CNTL			0x105d
+#define P_HHI_MPEG_CLK_CNTL			CBUS_REG_ADDR(HHI_MPEG_CLK_CNTL)
+#define HHI_AUD_CLK_CNTL			0x105e
+#define P_HHI_AUD_CLK_CNTL			CBUS_REG_ADDR(HHI_AUD_CLK_CNTL)
+#define HHI_VID_CLK_CNTL			0x105f
+#define P_HHI_VID_CLK_CNTL			CBUS_REG_ADDR(HHI_VID_CLK_CNTL)
+#define HHI_WIFI_CLK_CNTL			0x1060
+#define P_HHI_WIFI_CLK_CNTL			CBUS_REG_ADDR(HHI_WIFI_CLK_CNTL)
+#define HHI_WIFI_PLL_CNTL			0x1061
+#define P_HHI_WIFI_PLL_CNTL			CBUS_REG_ADDR(HHI_WIFI_PLL_CNTL)
+#define HHI_WIFI_PLL_CNTL2			0x1062
+#define P_HHI_WIFI_PLL_CNTL2			CBUS_REG_ADDR(HHI_WIFI_PLL_CNTL2)
+#define HHI_WIFI_PLL_CNTL3			0x1063
+#define P_HHI_WIFI_PLL_CNTL3			CBUS_REG_ADDR(HHI_WIFI_PLL_CNTL3)
+#define HHI_AUD_CLK_CNTL2			0x1064
+#define P_HHI_AUD_CLK_CNTL2			CBUS_REG_ADDR(HHI_AUD_CLK_CNTL2)
+#define HHI_VID_CLK_CNTL2			0x1065
+#define P_HHI_VID_CLK_CNTL2			CBUS_REG_ADDR(HHI_VID_CLK_CNTL2)
+#define HHI_VID_DIVIDER_CNTL			0x1066
+#define P_HHI_VID_DIVIDER_CNTL			CBUS_REG_ADDR(HHI_VID_DIVIDER_CNTL)
+#define HHI_SYS_CPU_CLK_CNTL			0x1067
+#define P_HHI_SYS_CPU_CLK_CNTL			CBUS_REG_ADDR(HHI_SYS_CPU_CLK_CNTL)
+#define HHI_VID_PLL_CLK_DIV			0x1068
+#define P_HHI_VID_PLL_CLK_DIV			CBUS_REG_ADDR(HHI_VID_PLL_CLK_DIV)
+#define HHI_MALI_CLK_CNTL			0x106c
+#define P_HHI_MALI_CLK_CNTL			CBUS_REG_ADDR(HHI_MALI_CLK_CNTL)
+#define HHI_MIPI_PHY_CLK_CNTL			0x106e
+#define P_HHI_MIPI_PHY_CLK_CNTL			CBUS_REG_ADDR(HHI_MIPI_PHY_CLK_CNTL)
+#define HHI_VPU_CLK_CNTL			0x106f
+#define P_HHI_VPU_CLK_CNTL			CBUS_REG_ADDR(HHI_VPU_CLK_CNTL)
+#define HHI_OTHER_PLL_CNTL			0x1070
+#define P_HHI_OTHER_PLL_CNTL			CBUS_REG_ADDR(HHI_OTHER_PLL_CNTL)
+#define HHI_OTHER_PLL_CNTL2			0x1071
+#define P_HHI_OTHER_PLL_CNTL2			CBUS_REG_ADDR(HHI_OTHER_PLL_CNTL2)
+#define HHI_OTHER_PLL_CNTL3			0x1072
+#define P_HHI_OTHER_PLL_CNTL3			CBUS_REG_ADDR(HHI_OTHER_PLL_CNTL3)
+#define HHI_HDMI_CLK_CNTL			0x1073
+#define P_HHI_HDMI_CLK_CNTL			CBUS_REG_ADDR(HHI_HDMI_CLK_CNTL)
+#define HHI_DEMOD_CLK_CNTL			0x1074
+#define P_HHI_DEMOD_CLK_CNTL			CBUS_REG_ADDR(HHI_DEMOD_CLK_CNTL)
+#define HHI_SATA_CLK_CNTL			0x1075
+#define P_HHI_SATA_CLK_CNTL			CBUS_REG_ADDR(HHI_SATA_CLK_CNTL)
+#define HHI_ETH_CLK_CNTL			0x1076
+#define P_HHI_ETH_CLK_CNTL			CBUS_REG_ADDR(HHI_ETH_CLK_CNTL)
+#define HHI_CLK_DOUBLE_CNTL			0x1077
+#define P_HHI_CLK_DOUBLE_CNTL			CBUS_REG_ADDR(HHI_CLK_DOUBLE_CNTL)
+#define HHI_VDEC_CLK_CNTL			0x1078
+#define P_HHI_VDEC_CLK_CNTL			CBUS_REG_ADDR(HHI_VDEC_CLK_CNTL)
+#define HHI_VDEC2_CLK_CNTL			0x1079
+#define P_HHI_VDEC2_CLK_CNTL			CBUS_REG_ADDR(HHI_VDEC2_CLK_CNTL)
+#define HHI_VDEC3_CLK_CNTL			0x107a
+#define P_HHI_VDEC3_CLK_CNTL			CBUS_REG_ADDR(HHI_VDEC3_CLK_CNTL)
+#define HHI_VDEC4_CLK_CNTL			0x107b
+#define P_HHI_VDEC4_CLK_CNTL			CBUS_REG_ADDR(HHI_VDEC4_CLK_CNTL)
+#define HHI_HDMI_AFC_CNTL			0x107f
+#define P_HHI_HDMI_AFC_CNTL			CBUS_REG_ADDR(HHI_HDMI_AFC_CNTL)
+#define HHI_HDMIRX_CLK_CNTL			0x1080
+#define P_HHI_HDMIRX_CLK_CNTL			CBUS_REG_ADDR(HHI_HDMIRX_CLK_CNTL)
+#define HHI_HDMIRX_AUD_CLK_CNTL			0x1081
+#define P_HHI_HDMIRX_AUD_CLK_CNTL		CBUS_REG_ADDR(HHI_HDMIRX_AUD_CLK_CNTL)
+#define HHI_EDP_APB_CLK_CNTL			0x1082
+#define P_HHI_EDP_APB_CLK_CNTL			CBUS_REG_ADDR(HHI_EDP_APB_CLK_CNTL)
+#define HHI_VID_PLL_MOD_CNTL0			0x1084
+#define P_HHI_VID_PLL_MOD_CNTL0			CBUS_REG_ADDR(HHI_VID_PLL_MOD_CNTL0)
+#define HHI_VID_PLL_MOD_LOW_TCNT		0x1085
+#define P_HHI_VID_PLL_MOD_LOW_TCNT		CBUS_REG_ADDR(HHI_VID_PLL_MOD_LOW_TCNT)
+#define HHI_VID_PLL_MOD_HIGH_TCNT		0x1086
+#define P_HHI_VID_PLL_MOD_HIGH_TCNT		CBUS_REG_ADDR(HHI_VID_PLL_MOD_HIGH_TCNT)
+#define HHI_VID_PLL_MOD_NOM_TCNT		0x1087
+#define P_HHI_VID_PLL_MOD_NOM_TCNT		CBUS_REG_ADDR(HHI_VID_PLL_MOD_NOM_TCNT)
+#define HHI_32K_CLK_CNTL			0x1089
+#define P_HHI_32K_CLK_CNTL			CBUS_REG_ADDR(HHI_32K_CLK_CNTL)
+#define HHI_GEN_CLK_CNTL			0x108a
+#define P_HHI_GEN_CLK_CNTL			CBUS_REG_ADDR(HHI_GEN_CLK_CNTL)
+#define HHI_GEN_CLK_CNTL2			0x108b
+#define P_HHI_GEN_CLK_CNTL2			CBUS_REG_ADDR(HHI_GEN_CLK_CNTL2)
+#define HHI_JTAG_CONFIG				0x108e
+#define P_HHI_JTAG_CONFIG			CBUS_REG_ADDR(HHI_JTAG_CONFIG)
+#define HHI_VAFE_CLKXTALIN_CNTL			0x108f
+#define P_HHI_VAFE_CLKXTALIN_CNTL		CBUS_REG_ADDR(HHI_VAFE_CLKXTALIN_CNTL)
+#define HHI_VAFE_CLKOSCIN_CNTL			0x1090
+#define P_HHI_VAFE_CLKOSCIN_CNTL		CBUS_REG_ADDR(HHI_VAFE_CLKOSCIN_CNTL)
+#define HHI_VAFE_CLKIN_CNTL			0x1091
+#define P_HHI_VAFE_CLKIN_CNTL			CBUS_REG_ADDR(HHI_VAFE_CLKIN_CNTL)
+#define HHI_TVFE_AUTOMODE_CLK_CNTL		0x1092
+#define P_HHI_TVFE_AUTOMODE_CLK_CNTL		CBUS_REG_ADDR(HHI_TVFE_AUTOMODE_CLK_CNTL)
+#define HHI_VAFE_CLKPI_CNTL			0x1093
+#define P_HHI_VAFE_CLKPI_CNTL			CBUS_REG_ADDR(HHI_VAFE_CLKPI_CNTL)
+#define HHI_VDIN_MEAS_CLK_CNTL			0x1094
+#define P_HHI_VDIN_MEAS_CLK_CNTL		CBUS_REG_ADDR(HHI_VDIN_MEAS_CLK_CNTL)
+#define HHI_PCM_CLK_CNTL			0x1096
+#define P_HHI_PCM_CLK_CNTL			CBUS_REG_ADDR(HHI_PCM_CLK_CNTL)
+#define HHI_NAND_CLK_CNTL			0x1097
+#define P_HHI_NAND_CLK_CNTL			CBUS_REG_ADDR(HHI_NAND_CLK_CNTL)
+#define HHI_ISP_LED_CLK_CNTL			0x1098
+#define P_HHI_ISP_LED_CLK_CNTL			CBUS_REG_ADDR(HHI_ISP_LED_CLK_CNTL)
+#define HHI_EDP_TX_PHY_CNTL0			0x109c
+#define P_HHI_EDP_TX_PHY_CNTL0			CBUS_REG_ADDR(HHI_EDP_TX_PHY_CNTL0)
+#define HHI_EDP_TX_PHY_CNTL1			0x109d
+#define P_HHI_EDP_TX_PHY_CNTL1			CBUS_REG_ADDR(HHI_EDP_TX_PHY_CNTL1)
+#define HHI_MPLL_CNTL				0x10a0
+#define P_HHI_MPLL_CNTL				CBUS_REG_ADDR(HHI_MPLL_CNTL)
+#define HHI_MPLL_CNTL2				0x10a1
+#define P_HHI_MPLL_CNTL2			CBUS_REG_ADDR(HHI_MPLL_CNTL2)
+#define HHI_MPLL_CNTL3				0x10a2
+#define P_HHI_MPLL_CNTL3			CBUS_REG_ADDR(HHI_MPLL_CNTL3)
+#define HHI_MPLL_CNTL4				0x10a3
+#define P_HHI_MPLL_CNTL4			CBUS_REG_ADDR(HHI_MPLL_CNTL4)
+#define HHI_MPLL_CNTL5				0x10a4
+#define P_HHI_MPLL_CNTL5			CBUS_REG_ADDR(HHI_MPLL_CNTL5)
+#define HHI_MPLL_CNTL6				0x10a5
+#define P_HHI_MPLL_CNTL6			CBUS_REG_ADDR(HHI_MPLL_CNTL6)
+#define HHI_MPLL_CNTL7				0x10a6
+#define P_HHI_MPLL_CNTL7			CBUS_REG_ADDR(HHI_MPLL_CNTL7)
+#define HHI_MPLL_CNTL8				0x10a7
+#define P_HHI_MPLL_CNTL8			CBUS_REG_ADDR(HHI_MPLL_CNTL8)
+#define HHI_MPLL_CNTL9				0x10a8
+#define P_HHI_MPLL_CNTL9			CBUS_REG_ADDR(HHI_MPLL_CNTL9)
+#define HHI_MPLL_CNTL10				0x10a9
+#define P_HHI_MPLL_CNTL10			CBUS_REG_ADDR(HHI_MPLL_CNTL10)
+#define HHI_ADC_PLL_CNTL			0x10aa
+#define P_HHI_ADC_PLL_CNTL			CBUS_REG_ADDR(HHI_ADC_PLL_CNTL)
+#define HHI_ADC_PLL_CNTL2			0x10ab
+#define P_HHI_ADC_PLL_CNTL2			CBUS_REG_ADDR(HHI_ADC_PLL_CNTL2)
+#define HHI_ADC_PLL_CNTL3			0x10ac
+#define P_HHI_ADC_PLL_CNTL3			CBUS_REG_ADDR(HHI_ADC_PLL_CNTL3)
+#define HHI_ADC_PLL_CNTL4			0x10ad
+#define P_HHI_ADC_PLL_CNTL4			CBUS_REG_ADDR(HHI_ADC_PLL_CNTL4)
+#define HHI_AUDCLK_PLL_CNTL			0x10b0
+#define P_HHI_AUDCLK_PLL_CNTL			CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL)
+#define HHI_AUDCLK_PLL_CNTL2			0x10b1
+#define P_HHI_AUDCLK_PLL_CNTL2			CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL2)
+#define HHI_AUDCLK_PLL_CNTL3			0x10b2
+#define P_HHI_AUDCLK_PLL_CNTL3			CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL3)
+#define HHI_AUDCLK_PLL_CNTL4			0x10b3
+#define P_HHI_AUDCLK_PLL_CNTL4			CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL4)
+#define HHI_AUDCLK_PLL_CNTL5			0x10b4
+#define P_HHI_AUDCLK_PLL_CNTL5			CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL5)
+#define HHI_AUDCLK_PLL_CNTL6			0x10b5
+#define P_HHI_AUDCLK_PLL_CNTL6			CBUS_REG_ADDR(HHI_AUDCLK_PLL_CNTL6)
+#define HHI_L2_DDR_CLK_CNTL			0x10b6
+#define P_HHI_L2_DDR_CLK_CNTL			CBUS_REG_ADDR(HHI_L2_DDR_CLK_CNTL)
+#define HHI_VDAC_CNTL0				0x10bd
+#define P_HHI_VDAC_CNTL0			CBUS_REG_ADDR(HHI_VDAC_CNTL0)
+#define HHI_VDAC_CNTL1				0x10be
+#define P_HHI_VDAC_CNTL1			CBUS_REG_ADDR(HHI_VDAC_CNTL1)
+#define HHI_SYS_PLL_CNTL			0x10c0
+#define P_HHI_SYS_PLL_CNTL			CBUS_REG_ADDR(HHI_SYS_PLL_CNTL)
+#define HHI_SYS_PLL_CNTL2			0x10c1
+#define P_HHI_SYS_PLL_CNTL2			CBUS_REG_ADDR(HHI_SYS_PLL_CNTL2)
+#define HHI_SYS_PLL_CNTL3			0x10c2
+#define P_HHI_SYS_PLL_CNTL3			CBUS_REG_ADDR(HHI_SYS_PLL_CNTL3)
+#define HHI_SYS_PLL_CNTL4			0x10c3
+#define P_HHI_SYS_PLL_CNTL4			CBUS_REG_ADDR(HHI_SYS_PLL_CNTL4)
+#define HHI_SYS_PLL_CNTL5			0x10c4
+#define P_HHI_SYS_PLL_CNTL5			CBUS_REG_ADDR(HHI_SYS_PLL_CNTL5)
+#define HHI_DPLL_TOP_0				0x10c6
+#define P_HHI_DPLL_TOP_0			CBUS_REG_ADDR(HHI_DPLL_TOP_0)
+#define HHI_DPLL_TOP_1				0x10c7
+#define P_HHI_DPLL_TOP_1			CBUS_REG_ADDR(HHI_DPLL_TOP_1)
+#define HHI_HDMI_PLL_CNTL			0x10c8
+#define P_HHI_HDMI_PLL_CNTL			CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL)
+#define HHI_VID_PLL_CNTL			0x10c8
+#define P_HHI_VID_PLL_CNTL			CBUS_REG_ADDR(HHI_VID_PLL_CNTL)
+#define HHI_HDMI_PLL_CNTL2			0x10c9
+#define P_HHI_HDMI_PLL_CNTL2			CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL2)
+#define HHI_VID_PLL_CNTL2			0x10c9
+#define P_HHI_VID_PLL_CNTL2			CBUS_REG_ADDR(HHI_VID_PLL_CNTL2)
+#define HHI_HDMI_PLL_CNTL3			0x10ca
+#define P_HHI_HDMI_PLL_CNTL3			CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL3)
+#define HHI_VID_PLL_CNTL3			0x10ca
+#define P_HHI_VID_PLL_CNTL3			CBUS_REG_ADDR(HHI_VID_PLL_CNTL3)
+#define HHI_HDMI_PLL_CNTL4			0x10cb
+#define P_HHI_HDMI_PLL_CNTL4			CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL4)
+#define HHI_VID_PLL_CNTL4			0x10cb
+#define P_HHI_VID_PLL_CNTL4			CBUS_REG_ADDR(HHI_VID_PLL_CNTL4)
+#define HHI_HDMI_PLL_CNTL5			0x10cc
+#define P_HHI_HDMI_PLL_CNTL5			CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL5)
+#define HHI_VID_PLL_CNTL5			0x10cc
+#define P_HHI_VID_PLL_CNTL5			CBUS_REG_ADDR(HHI_VID_PLL_CNTL5)
+#define HHI_HDMI_PLL_CNTL6			0x10cd
+#define P_HHI_HDMI_PLL_CNTL6			CBUS_REG_ADDR(HHI_HDMI_PLL_CNTL6)
+#define HHI_VID_PLL_CNTL6			0x10cd
+#define P_HHI_VID_PLL_CNTL6			CBUS_REG_ADDR(HHI_VID_PLL_CNTL6)
+#define HHI_DSI_LVDS_EDP_CNTL0			0x10d1
+#define P_HHI_DSI_LVDS_EDP_CNTL0		CBUS_REG_ADDR(HHI_DSI_LVDS_EDP_CNTL0)
+#define HHI_DSI_LVDS_EDP_CNTL1			0x10d2
+#define P_HHI_DSI_LVDS_EDP_CNTL1		CBUS_REG_ADDR(HHI_DSI_LVDS_EDP_CNTL1)
+#define HHI_CSI_PHY_CNTL0			0x10d3
+#define P_HHI_CSI_PHY_CNTL0			CBUS_REG_ADDR(HHI_CSI_PHY_CNTL0)
+#define HHI_CSI_PHY_CNTL1			0x10d4
+#define P_HHI_CSI_PHY_CNTL1			CBUS_REG_ADDR(HHI_CSI_PHY_CNTL1)
+#define HHI_CSI_PHY_CNTL2			0x10d5
+#define P_HHI_CSI_PHY_CNTL2			CBUS_REG_ADDR(HHI_CSI_PHY_CNTL2)
+#define HHI_CSI_PHY_CNTL3			0x10d6
+#define P_HHI_CSI_PHY_CNTL3			CBUS_REG_ADDR(HHI_CSI_PHY_CNTL3)
+#define HHI_CSI_PHY_CNTL4			0x10d7
+#define P_HHI_CSI_PHY_CNTL4			CBUS_REG_ADDR(HHI_CSI_PHY_CNTL4)
+#define HHI_DIF_CSI_PHY_CNTL0			0x10d8
+#define P_HHI_DIF_CSI_PHY_CNTL0			CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL0)
+#define HHI_DIF_CSI_PHY_CNTL1			0x10d9
+#define P_HHI_DIF_CSI_PHY_CNTL1			CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL1)
+#define HHI_DIF_CSI_PHY_CNTL2			0x10da
+#define P_HHI_DIF_CSI_PHY_CNTL2			CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL2)
+#define HHI_DIF_CSI_PHY_CNTL3			0x10db
+#define P_HHI_DIF_CSI_PHY_CNTL3			CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL3)
+#define HHI_DIF_CSI_PHY_CNTL4			0x10dc
+#define P_HHI_DIF_CSI_PHY_CNTL4			CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL4)
+#define HHI_DIF_CSI_PHY_CNTL5			0x10dd
+#define P_HHI_DIF_CSI_PHY_CNTL5			CBUS_REG_ADDR(HHI_DIF_CSI_PHY_CNTL5)
+#define HHI_LVDS_TX_PHY_CNTL0			0x10de
+#define P_HHI_LVDS_TX_PHY_CNTL0			CBUS_REG_ADDR(HHI_LVDS_TX_PHY_CNTL0)
+#define HHI_LVDS_TX_PHY_CNTL1			0x10df
+#define P_HHI_LVDS_TX_PHY_CNTL1			CBUS_REG_ADDR(HHI_LVDS_TX_PHY_CNTL1)
+#define HHI_VID2_PLL_CNTL			0x10e0
+#define P_HHI_VID2_PLL_CNTL			CBUS_REG_ADDR(HHI_VID2_PLL_CNTL)
+#define HHI_VID2_PLL_CNTL2			0x10e1
+#define P_HHI_VID2_PLL_CNTL2			CBUS_REG_ADDR(HHI_VID2_PLL_CNTL2)
+#define HHI_VID2_PLL_CNTL3			0x10e2
+#define P_HHI_VID2_PLL_CNTL3			CBUS_REG_ADDR(HHI_VID2_PLL_CNTL3)
+#define HHI_VID2_PLL_CNTL4			0x10e3
+#define P_HHI_VID2_PLL_CNTL4			CBUS_REG_ADDR(HHI_VID2_PLL_CNTL4)
+#define HHI_VID2_PLL_CNTL5			0x10e4
+#define P_HHI_VID2_PLL_CNTL5			CBUS_REG_ADDR(HHI_VID2_PLL_CNTL5)
+#define HHI_VID2_PLL_CNTL6			0x10e5
+#define P_HHI_VID2_PLL_CNTL6			CBUS_REG_ADDR(HHI_VID2_PLL_CNTL6)
+#define HHI_HDMI_PHY_CNTL0			0x10e8
+#define P_HHI_HDMI_PHY_CNTL0			CBUS_REG_ADDR(HHI_HDMI_PHY_CNTL0)
+#define HHI_HDMI_PHY_CNTL1			0x10e9
+#define P_HHI_HDMI_PHY_CNTL1			CBUS_REG_ADDR(HHI_HDMI_PHY_CNTL1)
+#define HHI_HDMI_PHY_CNTL2			0x10ea
+#define P_HHI_HDMI_PHY_CNTL2			CBUS_REG_ADDR(HHI_HDMI_PHY_CNTL2)
+#define HHI_HDMI_PHY_CNTL3			0x10eb
+#define P_HHI_HDMI_PHY_CNTL3			CBUS_REG_ADDR(HHI_HDMI_PHY_CNTL3)
+#define HHI_VID_LOCK_CLK_CNTL			0x10f2
+#define P_HHI_VID_LOCK_CLK_CNTL			CBUS_REG_ADDR(HHI_VID_LOCK_CLK_CNTL)
+#define HHI_ATV_DMD_SYS_CLK_CNTL		0x10f3
+#define P_HHI_ATV_DMD_SYS_CLK_CNTL		CBUS_REG_ADDR(HHI_ATV_DMD_SYS_CLK_CNTL)
+#define HHI_HDMIRX_AUD_PLL_CNTL			0x10f8
+#define P_HHI_HDMIRX_AUD_PLL_CNTL		CBUS_REG_ADDR(HHI_HDMIRX_AUD_PLL_CNTL)
+#define HHI_HDMIRX_AUD_PLL_CNTL2		0x10f9
+#define P_HHI_HDMIRX_AUD_PLL_CNTL2		CBUS_REG_ADDR(HHI_HDMIRX_AUD_PLL_CNTL2)
+#define HHI_HDMIRX_AUD_PLL_CNTL3		0x10fa
+#define P_HHI_HDMIRX_AUD_PLL_CNTL3		CBUS_REG_ADDR(HHI_HDMIRX_AUD_PLL_CNTL3)
+#define HHI_HDMIRX_AUD_PLL_CNTL4		0x10fb
+#define P_HHI_HDMIRX_AUD_PLL_CNTL4		CBUS_REG_ADDR(HHI_HDMIRX_AUD_PLL_CNTL4)
+#define HHI_HDMIRX_AUD_PLL_CNTL5		0x10fc
+#define P_HHI_HDMIRX_AUD_PLL_CNTL5		CBUS_REG_ADDR(HHI_HDMIRX_AUD_PLL_CNTL5)
+#define HHI_HDMIRX_AUD_PLL_CNTL6		0x10fd
+#define P_HHI_HDMIRX_AUD_PLL_CNTL6		CBUS_REG_ADDR(HHI_HDMIRX_AUD_PLL_CNTL6)
+#define PARSER_CONTROL				0x2960
+#define P_PARSER_CONTROL			CBUS_REG_ADDR(PARSER_CONTROL)
+#define PARSER_FETCH_ADDR			0x2961
+#define P_PARSER_FETCH_ADDR			CBUS_REG_ADDR(PARSER_FETCH_ADDR)
+#define PARSER_FETCH_CMD			0x2962
+#define P_PARSER_FETCH_CMD			CBUS_REG_ADDR(PARSER_FETCH_CMD)
+#define PARSER_FETCH_STOP_ADDR			0x2963
+#define P_PARSER_FETCH_STOP_ADDR		CBUS_REG_ADDR(PARSER_FETCH_STOP_ADDR)
+#define PARSER_FETCH_LEVEL			0x2964
+#define P_PARSER_FETCH_LEVEL			CBUS_REG_ADDR(PARSER_FETCH_LEVEL)
+#define PARSER_CONFIG				0x2965
+#define P_PARSER_CONFIG				CBUS_REG_ADDR(PARSER_CONFIG)
+#define PFIFO_WR_PTR				0x2966
+#define P_PFIFO_WR_PTR				CBUS_REG_ADDR(PFIFO_WR_PTR)
+#define PFIFO_RD_PTR				0x2967
+#define P_PFIFO_RD_PTR				CBUS_REG_ADDR(PFIFO_RD_PTR)
+#define PFIFO_DATA				0x2968
+#define P_PFIFO_DATA				CBUS_REG_ADDR(PFIFO_DATA)
+#define PARSER_SEARCH_PATTERN			0x2969
+#define P_PARSER_SEARCH_PATTERN			CBUS_REG_ADDR(PARSER_SEARCH_PATTERN)
+#define PARSER_SEARCH_MASK			0x296a
+#define P_PARSER_SEARCH_MASK			CBUS_REG_ADDR(PARSER_SEARCH_MASK)
+#define PARSER_INT_ENABLE			0x296b
+#define P_PARSER_INT_ENABLE			CBUS_REG_ADDR(PARSER_INT_ENABLE)
+#define PARSER_INT_STATUS			0x296c
+#define P_PARSER_INT_STATUS			CBUS_REG_ADDR(PARSER_INT_STATUS)
+#define PARSER_SCR_CTL				0x296d
+#define P_PARSER_SCR_CTL			CBUS_REG_ADDR(PARSER_SCR_CTL)
+#define PARSER_SCR				0x296e
+#define P_PARSER_SCR				CBUS_REG_ADDR(PARSER_SCR)
+#define PARSER_PARAMETER			0x296f
+#define P_PARSER_PARAMETER			CBUS_REG_ADDR(PARSER_PARAMETER)
+#define PARSER_INSERT_DATA			0x2970
+#define P_PARSER_INSERT_DATA			CBUS_REG_ADDR(PARSER_INSERT_DATA)
+#define VAS_STREAM_ID				0x2971
+#define P_VAS_STREAM_ID				CBUS_REG_ADDR(VAS_STREAM_ID)
+#define VIDEO_DTS				0x2972
+#define P_VIDEO_DTS				CBUS_REG_ADDR(VIDEO_DTS)
+#define VIDEO_PTS				0x2973
+#define P_VIDEO_PTS				CBUS_REG_ADDR(VIDEO_PTS)
+#define VIDEO_PTS_DTS_WR_PTR			0x2974
+#define P_VIDEO_PTS_DTS_WR_PTR			CBUS_REG_ADDR(VIDEO_PTS_DTS_WR_PTR)
+#define AUDIO_PTS				0x2975
+#define P_AUDIO_PTS				CBUS_REG_ADDR(AUDIO_PTS)
+#define AUDIO_PTS_WR_PTR			0x2976
+#define P_AUDIO_PTS_WR_PTR			CBUS_REG_ADDR(AUDIO_PTS_WR_PTR)
+#define PARSER_ES_CONTROL			0x2977
+#define P_PARSER_ES_CONTROL			CBUS_REG_ADDR(PARSER_ES_CONTROL)
+#define PFIFO_MONITOR				0x2978
+#define P_PFIFO_MONITOR				CBUS_REG_ADDR(PFIFO_MONITOR)
+#define PARSER_VIDEO_START_PTR			0x2980
+#define P_PARSER_VIDEO_START_PTR		CBUS_REG_ADDR(PARSER_VIDEO_START_PTR)
+#define PARSER_VIDEO_END_PTR			0x2981
+#define P_PARSER_VIDEO_END_PTR			CBUS_REG_ADDR(PARSER_VIDEO_END_PTR)
+#define PARSER_VIDEO_WP				0x2982
+#define P_PARSER_VIDEO_WP			CBUS_REG_ADDR(PARSER_VIDEO_WP)
+#define PARSER_VIDEO_RP				0x2983
+#define P_PARSER_VIDEO_RP			CBUS_REG_ADDR(PARSER_VIDEO_RP)
+#define PARSER_VIDEO_HOLE			0x2984
+#define P_PARSER_VIDEO_HOLE			CBUS_REG_ADDR(PARSER_VIDEO_HOLE)
+#define PARSER_AUDIO_START_PTR			0x2985
+#define P_PARSER_AUDIO_START_PTR		CBUS_REG_ADDR(PARSER_AUDIO_START_PTR)
+#define PARSER_AUDIO_END_PTR			0x2986
+#define P_PARSER_AUDIO_END_PTR			CBUS_REG_ADDR(PARSER_AUDIO_END_PTR)
+#define PARSER_AUDIO_WP				0x2987
+#define P_PARSER_AUDIO_WP			CBUS_REG_ADDR(PARSER_AUDIO_WP)
+#define PARSER_AUDIO_RP				0x2988
+#define P_PARSER_AUDIO_RP			CBUS_REG_ADDR(PARSER_AUDIO_RP)
+#define PARSER_AUDIO_HOLE			0x2989
+#define P_PARSER_AUDIO_HOLE			CBUS_REG_ADDR(PARSER_AUDIO_HOLE)
+#define PARSER_SUB_START_PTR			0x298a
+#define P_PARSER_SUB_START_PTR			CBUS_REG_ADDR(PARSER_SUB_START_PTR)
+#define PARSER_SUB_END_PTR			0x298b
+#define P_PARSER_SUB_END_PTR			CBUS_REG_ADDR(PARSER_SUB_END_PTR)
+#define PARSER_SUB_WP				0x298c
+#define P_PARSER_SUB_WP				CBUS_REG_ADDR(PARSER_SUB_WP)
+#define PARSER_SUB_RP				0x298d
+#define P_PARSER_SUB_RP				CBUS_REG_ADDR(PARSER_SUB_RP)
+#define PARSER_SUB_HOLE				0x298e
+#define P_PARSER_SUB_HOLE			CBUS_REG_ADDR(PARSER_SUB_HOLE)
+#define PARSER_FETCH_INFO			0x298f
+#define P_PARSER_FETCH_INFO			CBUS_REG_ADDR(PARSER_FETCH_INFO)
+#define PARSER_STATUS				0x2990
+#define P_PARSER_STATUS				CBUS_REG_ADDR(PARSER_STATUS)
+#define PARSER_AV_WRAP_COUNT			0x2991
+#define P_PARSER_AV_WRAP_COUNT			CBUS_REG_ADDR(PARSER_AV_WRAP_COUNT)
+#define WRRSP_PARSER				0x2992
+#define P_WRRSP_PARSER				CBUS_REG_ADDR(WRRSP_PARSER)
+#define PARSER_VIDEO2_START_PTR			0x2993
+#define P_PARSER_VIDEO2_START_PTR		CBUS_REG_ADDR(PARSER_VIDEO2_START_PTR)
+#define PARSER_VIDEO2_END_PTR			0x2994
+#define P_PARSER_VIDEO2_END_PTR			CBUS_REG_ADDR(PARSER_VIDEO2_END_PTR)
+#define PARSER_VIDEO2_WP			0x2995
+#define P_PARSER_VIDEO2_WP			CBUS_REG_ADDR(PARSER_VIDEO2_WP)
+#define PARSER_VIDEO2_RP			0x2996
+#define P_PARSER_VIDEO2_RP			CBUS_REG_ADDR(PARSER_VIDEO2_RP)
+#define PARSER_VIDEO2_HOLE			0x2997
+#define P_PARSER_VIDEO2_HOLE			CBUS_REG_ADDR(PARSER_VIDEO2_HOLE)
+#define PARSER_AV2_WRAP_COUNT			0x2998
+#define P_PARSER_AV2_WRAP_COUNT			CBUS_REG_ADDR(PARSER_AV2_WRAP_COUNT)
+#define DVIN_FRONT_END_CTRL			0x12e0
+#define P_DVIN_FRONT_END_CTRL			CBUS_REG_ADDR(DVIN_FRONT_END_CTRL)
+#define DVIN_HS_LEAD_VS_ODD			0x12e1
+#define P_DVIN_HS_LEAD_VS_ODD			CBUS_REG_ADDR(DVIN_HS_LEAD_VS_ODD)
+#define DVIN_ACTIVE_START_PIX			0x12e2
+#define P_DVIN_ACTIVE_START_PIX			CBUS_REG_ADDR(DVIN_ACTIVE_START_PIX)
+#define DVIN_ACTIVE_START_LINE			0x12e3
+#define P_DVIN_ACTIVE_START_LINE		CBUS_REG_ADDR(DVIN_ACTIVE_START_LINE)
+#define DVIN_DISPLAY_SIZE			0x12e4
+#define P_DVIN_DISPLAY_SIZE			CBUS_REG_ADDR(DVIN_DISPLAY_SIZE)
+#define DVIN_CTRL_STAT				0x12e5
+#define P_DVIN_CTRL_STAT			CBUS_REG_ADDR(DVIN_CTRL_STAT)
+#define AIU_958_BPF				0x1500
+#define P_AIU_958_BPF				CBUS_REG_ADDR(AIU_958_BPF)
+#define AIU_958_BRST				0x1501
+#define P_AIU_958_BRST				CBUS_REG_ADDR(AIU_958_BRST)
+#define AIU_958_LENGTH				0x1502
+#define P_AIU_958_LENGTH			CBUS_REG_ADDR(AIU_958_LENGTH)
+#define AIU_958_PADDSIZE			0x1503
+#define P_AIU_958_PADDSIZE			CBUS_REG_ADDR(AIU_958_PADDSIZE)
+#define AIU_958_MISC				0x1504
+#define P_AIU_958_MISC				CBUS_REG_ADDR(AIU_958_MISC)
+#define AIU_958_FORCE_LEFT			0x1505
+#define P_AIU_958_FORCE_LEFT			CBUS_REG_ADDR(AIU_958_FORCE_LEFT)
+#define AIU_958_DISCARD_NUM			0x1506
+#define P_AIU_958_DISCARD_NUM			CBUS_REG_ADDR(AIU_958_DISCARD_NUM)
+#define AIU_958_DCU_FF_CTRL			0x1507
+#define P_AIU_958_DCU_FF_CTRL			CBUS_REG_ADDR(AIU_958_DCU_FF_CTRL)
+#define AIU_958_CHSTAT_L0			0x1508
+#define P_AIU_958_CHSTAT_L0			CBUS_REG_ADDR(AIU_958_CHSTAT_L0)
+#define AIU_958_CHSTAT_L1			0x1509
+#define P_AIU_958_CHSTAT_L1			CBUS_REG_ADDR(AIU_958_CHSTAT_L1)
+#define AIU_958_CTRL				0x150a
+#define P_AIU_958_CTRL				CBUS_REG_ADDR(AIU_958_CTRL)
+#define AIU_958_RPT				0x150b
+#define P_AIU_958_RPT				CBUS_REG_ADDR(AIU_958_RPT)
+#define AIU_I2S_MUTE_SWAP			0x150c
+#define P_AIU_I2S_MUTE_SWAP			CBUS_REG_ADDR(AIU_I2S_MUTE_SWAP)
+#define AIU_I2S_SOURCE_DESC			0x150d
+#define P_AIU_I2S_SOURCE_DESC			CBUS_REG_ADDR(AIU_I2S_SOURCE_DESC)
+#define AIU_I2S_MED_CTRL			0x150e
+#define P_AIU_I2S_MED_CTRL			CBUS_REG_ADDR(AIU_I2S_MED_CTRL)
+#define AIU_I2S_MED_THRESH			0x150f
+#define P_AIU_I2S_MED_THRESH			CBUS_REG_ADDR(AIU_I2S_MED_THRESH)
+#define AIU_I2S_DAC_CFG				0x1510
+#define P_AIU_I2S_DAC_CFG			CBUS_REG_ADDR(AIU_I2S_DAC_CFG)
+#define AIU_I2S_SYNC				0x1511
+#define P_AIU_I2S_SYNC				CBUS_REG_ADDR(AIU_I2S_SYNC)
+#define AIU_I2S_MISC				0x1512
+#define P_AIU_I2S_MISC				CBUS_REG_ADDR(AIU_I2S_MISC)
+#define AIU_I2S_OUT_CFG				0x1513
+#define P_AIU_I2S_OUT_CFG			CBUS_REG_ADDR(AIU_I2S_OUT_CFG)
+#define AIU_I2S_FF_CTRL				0x1514
+#define P_AIU_I2S_FF_CTRL			CBUS_REG_ADDR(AIU_I2S_FF_CTRL)
+#define AIU_RST_SOFT				0x1515
+#define P_AIU_RST_SOFT				CBUS_REG_ADDR(AIU_RST_SOFT)
+#define AIU_CLK_CTRL				0x1516
+#define P_AIU_CLK_CTRL				CBUS_REG_ADDR(AIU_CLK_CTRL)
+#define AIU_MIX_ADCCFG				0x1517
+#define P_AIU_MIX_ADCCFG			CBUS_REG_ADDR(AIU_MIX_ADCCFG)
+#define AIU_MIX_CTRL				0x1518
+#define P_AIU_MIX_CTRL				CBUS_REG_ADDR(AIU_MIX_CTRL)
+#define AIU_CLK_CTRL_MORE			0x1519
+#define P_AIU_CLK_CTRL_MORE			CBUS_REG_ADDR(AIU_CLK_CTRL_MORE)
+#define AIU_958_POP				0x151a
+#define P_AIU_958_POP				CBUS_REG_ADDR(AIU_958_POP)
+#define AIU_MIX_GAIN				0x151b
+#define P_AIU_MIX_GAIN				CBUS_REG_ADDR(AIU_MIX_GAIN)
+#define AIU_958_SYNWORD1			0x151c
+#define P_AIU_958_SYNWORD1			CBUS_REG_ADDR(AIU_958_SYNWORD1)
+#define AIU_958_SYNWORD2			0x151d
+#define P_AIU_958_SYNWORD2			CBUS_REG_ADDR(AIU_958_SYNWORD2)
+#define AIU_958_SYNWORD3			0x151e
+#define P_AIU_958_SYNWORD3			CBUS_REG_ADDR(AIU_958_SYNWORD3)
+#define AIU_958_SYNWORD1_MASK			0x151f
+#define P_AIU_958_SYNWORD1_MASK			CBUS_REG_ADDR(AIU_958_SYNWORD1_MASK)
+#define AIU_958_SYNWORD2_MASK			0x1520
+#define P_AIU_958_SYNWORD2_MASK			CBUS_REG_ADDR(AIU_958_SYNWORD2_MASK)
+#define AIU_958_SYNWORD3_MASK			0x1521
+#define P_AIU_958_SYNWORD3_MASK			CBUS_REG_ADDR(AIU_958_SYNWORD3_MASK)
+#define AIU_958_FFRDOUT_THD			0x1522
+#define P_AIU_958_FFRDOUT_THD			CBUS_REG_ADDR(AIU_958_FFRDOUT_THD)
+#define AIU_958_LENGTH_PER_PAUSE		0x1523
+#define P_AIU_958_LENGTH_PER_PAUSE		CBUS_REG_ADDR(AIU_958_LENGTH_PER_PAUSE)
+#define AIU_958_PAUSE_NUM			0x1524
+#define P_AIU_958_PAUSE_NUM			CBUS_REG_ADDR(AIU_958_PAUSE_NUM)
+#define AIU_958_PAUSE_PAYLOAD			0x1525
+#define P_AIU_958_PAUSE_PAYLOAD			CBUS_REG_ADDR(AIU_958_PAUSE_PAYLOAD)
+#define AIU_958_AUTO_PAUSE			0x1526
+#define P_AIU_958_AUTO_PAUSE			CBUS_REG_ADDR(AIU_958_AUTO_PAUSE)
+#define AIU_958_PAUSE_PD_LENGTH			0x1527
+#define P_AIU_958_PAUSE_PD_LENGTH		CBUS_REG_ADDR(AIU_958_PAUSE_PD_LENGTH)
+#define AIU_CODEC_DAC_LRCLK_CTRL		0x1528
+#define P_AIU_CODEC_DAC_LRCLK_CTRL		CBUS_REG_ADDR(AIU_CODEC_DAC_LRCLK_CTRL)
+#define AIU_CODEC_ADC_LRCLK_CTRL		0x1529
+#define P_AIU_CODEC_ADC_LRCLK_CTRL		CBUS_REG_ADDR(AIU_CODEC_ADC_LRCLK_CTRL)
+#define AIU_HDMI_CLK_DATA_CTRL			0x152a
+#define P_AIU_HDMI_CLK_DATA_CTRL		CBUS_REG_ADDR(AIU_HDMI_CLK_DATA_CTRL)
+#define AIU_CODEC_CLK_DATA_CTRL			0x152b
+#define P_AIU_CODEC_CLK_DATA_CTRL		CBUS_REG_ADDR(AIU_CODEC_CLK_DATA_CTRL)
+#define AIU_958_CHSTAT_R0			0x1530
+#define P_AIU_958_CHSTAT_R0			CBUS_REG_ADDR(AIU_958_CHSTAT_R0)
+#define AIU_958_CHSTAT_R1			0x1531
+#define P_AIU_958_CHSTAT_R1			CBUS_REG_ADDR(AIU_958_CHSTAT_R1)
+#define AIU_958_VALID_CTRL			0x1532
+#define P_AIU_958_VALID_CTRL			CBUS_REG_ADDR(AIU_958_VALID_CTRL)
+#define AIU_AUDIO_AMP_REG0			0x153c
+#define P_AIU_AUDIO_AMP_REG0			CBUS_REG_ADDR(AIU_AUDIO_AMP_REG0)
+#define AIU_AUDIO_AMP_REG1			0x153d
+#define P_AIU_AUDIO_AMP_REG1			CBUS_REG_ADDR(AIU_AUDIO_AMP_REG1)
+#define AIU_AUDIO_AMP_REG2			0x153e
+#define P_AIU_AUDIO_AMP_REG2			CBUS_REG_ADDR(AIU_AUDIO_AMP_REG2)
+#define AIU_AUDIO_AMP_REG3			0x153f
+#define P_AIU_AUDIO_AMP_REG3			CBUS_REG_ADDR(AIU_AUDIO_AMP_REG3)
+#define AIU_AIFIFO2_CTRL			0x1540
+#define P_AIU_AIFIFO2_CTRL			CBUS_REG_ADDR(AIU_AIFIFO2_CTRL)
+#define AIU_AIFIFO2_STATUS			0x1541
+#define P_AIU_AIFIFO2_STATUS			CBUS_REG_ADDR(AIU_AIFIFO2_STATUS)
+#define AIU_AIFIFO2_GBIT			0x1542
+#define P_AIU_AIFIFO2_GBIT			CBUS_REG_ADDR(AIU_AIFIFO2_GBIT)
+#define AIU_AIFIFO2_CLB				0x1543
+#define P_AIU_AIFIFO2_CLB			CBUS_REG_ADDR(AIU_AIFIFO2_CLB)
+#define AIU_CRC_CTRL				0x1544
+#define P_AIU_CRC_CTRL				CBUS_REG_ADDR(AIU_CRC_CTRL)
+#define AIU_CRC_STATUS				0x1545
+#define P_AIU_CRC_STATUS			CBUS_REG_ADDR(AIU_CRC_STATUS)
+#define AIU_CRC_SHIFT_REG			0x1546
+#define P_AIU_CRC_SHIFT_REG			CBUS_REG_ADDR(AIU_CRC_SHIFT_REG)
+#define AIU_CRC_IREG				0x1547
+#define P_AIU_CRC_IREG				CBUS_REG_ADDR(AIU_CRC_IREG)
+#define AIU_CRC_CAL_REG1			0x1548
+#define P_AIU_CRC_CAL_REG1			CBUS_REG_ADDR(AIU_CRC_CAL_REG1)
+#define AIU_CRC_CAL_REG0			0x1549
+#define P_AIU_CRC_CAL_REG0			CBUS_REG_ADDR(AIU_CRC_CAL_REG0)
+#define AIU_CRC_POLY_COEF1			0x154a
+#define P_AIU_CRC_POLY_COEF1			CBUS_REG_ADDR(AIU_CRC_POLY_COEF1)
+#define AIU_CRC_POLY_COEF0			0x154b
+#define P_AIU_CRC_POLY_COEF0			CBUS_REG_ADDR(AIU_CRC_POLY_COEF0)
+#define AIU_CRC_BIT_SIZE1			0x154c
+#define P_AIU_CRC_BIT_SIZE1			CBUS_REG_ADDR(AIU_CRC_BIT_SIZE1)
+#define AIU_CRC_BIT_SIZE0			0x154d
+#define P_AIU_CRC_BIT_SIZE0			CBUS_REG_ADDR(AIU_CRC_BIT_SIZE0)
+#define AIU_CRC_BIT_CNT1			0x154e
+#define P_AIU_CRC_BIT_CNT1			CBUS_REG_ADDR(AIU_CRC_BIT_CNT1)
+#define AIU_CRC_BIT_CNT0			0x154f
+#define P_AIU_CRC_BIT_CNT0			CBUS_REG_ADDR(AIU_CRC_BIT_CNT0)
+#define AIU_AMCLK_GATE_HI			0x1550
+#define P_AIU_AMCLK_GATE_HI			CBUS_REG_ADDR(AIU_AMCLK_GATE_HI)
+#define AIU_AMCLK_GATE_LO			0x1551
+#define P_AIU_AMCLK_GATE_LO			CBUS_REG_ADDR(AIU_AMCLK_GATE_LO)
+#define AIU_AMCLK_MSR				0x1552
+#define P_AIU_AMCLK_MSR				CBUS_REG_ADDR(AIU_AMCLK_MSR)
+#define AIU_AUDAC_CTRL0				0x1553
+#define P_AIU_AUDAC_CTRL0			CBUS_REG_ADDR(AIU_AUDAC_CTRL0)
+#define AIU_DELTA_SIGMA0			0x1555
+#define P_AIU_DELTA_SIGMA0			CBUS_REG_ADDR(AIU_DELTA_SIGMA0)
+#define AIU_DELTA_SIGMA1			0x1556
+#define P_AIU_DELTA_SIGMA1			CBUS_REG_ADDR(AIU_DELTA_SIGMA1)
+#define AIU_DELTA_SIGMA2			0x1557
+#define P_AIU_DELTA_SIGMA2			CBUS_REG_ADDR(AIU_DELTA_SIGMA2)
+#define AIU_DELTA_SIGMA3			0x1558
+#define P_AIU_DELTA_SIGMA3			CBUS_REG_ADDR(AIU_DELTA_SIGMA3)
+#define AIU_DELTA_SIGMA4			0x1559
+#define P_AIU_DELTA_SIGMA4			CBUS_REG_ADDR(AIU_DELTA_SIGMA4)
+#define AIU_DELTA_SIGMA5			0x155a
+#define P_AIU_DELTA_SIGMA5			CBUS_REG_ADDR(AIU_DELTA_SIGMA5)
+#define AIU_DELTA_SIGMA6			0x155b
+#define P_AIU_DELTA_SIGMA6			CBUS_REG_ADDR(AIU_DELTA_SIGMA6)
+#define AIU_DELTA_SIGMA7			0x155c
+#define P_AIU_DELTA_SIGMA7			CBUS_REG_ADDR(AIU_DELTA_SIGMA7)
+#define AIU_DELTA_SIGMA_LCNTS			0x155d
+#define P_AIU_DELTA_SIGMA_LCNTS			CBUS_REG_ADDR(AIU_DELTA_SIGMA_LCNTS)
+#define AIU_DELTA_SIGMA_RCNTS			0x155e
+#define P_AIU_DELTA_SIGMA_RCNTS			CBUS_REG_ADDR(AIU_DELTA_SIGMA_RCNTS)
+#define AIU_MEM_I2S_START_PTR			0x1560
+#define P_AIU_MEM_I2S_START_PTR			CBUS_REG_ADDR(AIU_MEM_I2S_START_PTR)
+#define AIU_MEM_I2S_RD_PTR			0x1561
+#define P_AIU_MEM_I2S_RD_PTR			CBUS_REG_ADDR(AIU_MEM_I2S_RD_PTR)
+#define AIU_MEM_I2S_END_PTR			0x1562
+#define P_AIU_MEM_I2S_END_PTR			CBUS_REG_ADDR(AIU_MEM_I2S_END_PTR)
+#define AIU_MEM_I2S_MASKS			0x1563
+#define P_AIU_MEM_I2S_MASKS			CBUS_REG_ADDR(AIU_MEM_I2S_MASKS)
+#define AIU_MEM_I2S_CONTROL			0x1564
+#define P_AIU_MEM_I2S_CONTROL			CBUS_REG_ADDR(AIU_MEM_I2S_CONTROL)
+#define AIU_MEM_IEC958_START_PTR		0x1565
+#define P_AIU_MEM_IEC958_START_PTR		CBUS_REG_ADDR(AIU_MEM_IEC958_START_PTR)
+#define AIU_MEM_IEC958_RD_PTR			0x1566
+#define P_AIU_MEM_IEC958_RD_PTR			CBUS_REG_ADDR(AIU_MEM_IEC958_RD_PTR)
+#define AIU_MEM_IEC958_END_PTR			0x1567
+#define P_AIU_MEM_IEC958_END_PTR		CBUS_REG_ADDR(AIU_MEM_IEC958_END_PTR)
+#define AIU_MEM_IEC958_MASKS			0x1568
+#define P_AIU_MEM_IEC958_MASKS			CBUS_REG_ADDR(AIU_MEM_IEC958_MASKS)
+#define AIU_MEM_IEC958_CONTROL			0x1569
+#define P_AIU_MEM_IEC958_CONTROL		CBUS_REG_ADDR(AIU_MEM_IEC958_CONTROL)
+#define AIU_MEM_AIFIFO2_START_PTR		0x156a
+#define P_AIU_MEM_AIFIFO2_START_PTR		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_START_PTR)
+#define AIU_MEM_AIFIFO2_CURR_PTR		0x156b
+#define P_AIU_MEM_AIFIFO2_CURR_PTR		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_CURR_PTR)
+#define AIU_MEM_AIFIFO2_END_PTR			0x156c
+#define P_AIU_MEM_AIFIFO2_END_PTR		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_END_PTR)
+#define AIU_MEM_AIFIFO2_BYTES_AVAIL		0x156d
+#define P_AIU_MEM_AIFIFO2_BYTES_AVAIL		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_BYTES_AVAIL)
+#define AIU_MEM_AIFIFO2_CONTROL			0x156e
+#define P_AIU_MEM_AIFIFO2_CONTROL		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_CONTROL)
+#define AIU_MEM_AIFIFO2_MAN_WP			0x156f
+#define P_AIU_MEM_AIFIFO2_MAN_WP		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_MAN_WP)
+#define AIU_MEM_AIFIFO2_MAN_RP			0x1570
+#define P_AIU_MEM_AIFIFO2_MAN_RP		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_MAN_RP)
+#define AIU_MEM_AIFIFO2_LEVEL			0x1571
+#define P_AIU_MEM_AIFIFO2_LEVEL			CBUS_REG_ADDR(AIU_MEM_AIFIFO2_LEVEL)
+#define AIU_MEM_AIFIFO2_BUF_CNTL		0x1572
+#define P_AIU_MEM_AIFIFO2_BUF_CNTL		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_BUF_CNTL)
+#define AIU_MEM_I2S_MAN_WP			0x1573
+#define P_AIU_MEM_I2S_MAN_WP			CBUS_REG_ADDR(AIU_MEM_I2S_MAN_WP)
+#define AIU_MEM_I2S_MAN_RP			0x1574
+#define P_AIU_MEM_I2S_MAN_RP			CBUS_REG_ADDR(AIU_MEM_I2S_MAN_RP)
+#define AIU_MEM_I2S_LEVEL			0x1575
+#define P_AIU_MEM_I2S_LEVEL			CBUS_REG_ADDR(AIU_MEM_I2S_LEVEL)
+#define AIU_MEM_I2S_BUF_CNTL			0x1576
+#define P_AIU_MEM_I2S_BUF_CNTL			CBUS_REG_ADDR(AIU_MEM_I2S_BUF_CNTL)
+#define AIU_MEM_I2S_BUF_WRAP_COUNT		0x1577
+#define P_AIU_MEM_I2S_BUF_WRAP_COUNT		CBUS_REG_ADDR(AIU_MEM_I2S_BUF_WRAP_COUNT)
+#define AIU_MEM_I2S_MEM_CTL			0x1578
+#define P_AIU_MEM_I2S_MEM_CTL			CBUS_REG_ADDR(AIU_MEM_I2S_MEM_CTL)
+#define AIU_MEM_IEC958_MEM_CTL			0x1579
+#define P_AIU_MEM_IEC958_MEM_CTL		CBUS_REG_ADDR(AIU_MEM_IEC958_MEM_CTL)
+#define AIU_MEM_IEC958_WRAP_COUNT		0x157a
+#define P_AIU_MEM_IEC958_WRAP_COUNT		CBUS_REG_ADDR(AIU_MEM_IEC958_WRAP_COUNT)
+#define AIU_MEM_IEC958_IRQ_LEVEL		0x157b
+#define P_AIU_MEM_IEC958_IRQ_LEVEL		CBUS_REG_ADDR(AIU_MEM_IEC958_IRQ_LEVEL)
+#define AIU_MEM_IEC958_MAN_WP			0x157c
+#define P_AIU_MEM_IEC958_MAN_WP			CBUS_REG_ADDR(AIU_MEM_IEC958_MAN_WP)
+#define AIU_MEM_IEC958_MAN_RP			0x157d
+#define P_AIU_MEM_IEC958_MAN_RP			CBUS_REG_ADDR(AIU_MEM_IEC958_MAN_RP)
+#define AIU_MEM_IEC958_LEVEL			0x157e
+#define P_AIU_MEM_IEC958_LEVEL			CBUS_REG_ADDR(AIU_MEM_IEC958_LEVEL)
+#define AIU_MEM_IEC958_BUF_CNTL			0x157f
+#define P_AIU_MEM_IEC958_BUF_CNTL		CBUS_REG_ADDR(AIU_MEM_IEC958_BUF_CNTL)
+#define AIU_AIFIFO_CTRL				0x1580
+#define P_AIU_AIFIFO_CTRL			CBUS_REG_ADDR(AIU_AIFIFO_CTRL)
+#define AIU_AIFIFO_STATUS			0x1581
+#define P_AIU_AIFIFO_STATUS			CBUS_REG_ADDR(AIU_AIFIFO_STATUS)
+#define AIU_AIFIFO_GBIT				0x1582
+#define P_AIU_AIFIFO_GBIT			CBUS_REG_ADDR(AIU_AIFIFO_GBIT)
+#define AIU_AIFIFO_CLB				0x1583
+#define P_AIU_AIFIFO_CLB			CBUS_REG_ADDR(AIU_AIFIFO_CLB)
+#define AIU_MEM_AIFIFO_START_PTR		0x1584
+#define P_AIU_MEM_AIFIFO_START_PTR		CBUS_REG_ADDR(AIU_MEM_AIFIFO_START_PTR)
+#define AIU_MEM_AIFIFO_CURR_PTR			0x1585
+#define P_AIU_MEM_AIFIFO_CURR_PTR		CBUS_REG_ADDR(AIU_MEM_AIFIFO_CURR_PTR)
+#define AIU_MEM_AIFIFO_END_PTR			0x1586
+#define P_AIU_MEM_AIFIFO_END_PTR		CBUS_REG_ADDR(AIU_MEM_AIFIFO_END_PTR)
+#define AIU_MEM_AIFIFO_BYTES_AVAIL		0x1587
+#define P_AIU_MEM_AIFIFO_BYTES_AVAIL		CBUS_REG_ADDR(AIU_MEM_AIFIFO_BYTES_AVAIL)
+#define AIU_MEM_AIFIFO_CONTROL			0x1588
+#define P_AIU_MEM_AIFIFO_CONTROL		CBUS_REG_ADDR(AIU_MEM_AIFIFO_CONTROL)
+#define AIU_MEM_AIFIFO_MAN_WP			0x1589
+#define P_AIU_MEM_AIFIFO_MAN_WP			CBUS_REG_ADDR(AIU_MEM_AIFIFO_MAN_WP)
+#define AIU_MEM_AIFIFO_MAN_RP			0x158a
+#define P_AIU_MEM_AIFIFO_MAN_RP			CBUS_REG_ADDR(AIU_MEM_AIFIFO_MAN_RP)
+#define AIU_MEM_AIFIFO_LEVEL			0x158b
+#define P_AIU_MEM_AIFIFO_LEVEL			CBUS_REG_ADDR(AIU_MEM_AIFIFO_LEVEL)
+#define AIU_MEM_AIFIFO_BUF_CNTL			0x158c
+#define P_AIU_MEM_AIFIFO_BUF_CNTL		CBUS_REG_ADDR(AIU_MEM_AIFIFO_BUF_CNTL)
+#define AIU_MEM_AIFIFO_BUF_WRAP_COUNT		0x158d
+#define P_AIU_MEM_AIFIFO_BUF_WRAP_COUNT		CBUS_REG_ADDR(AIU_MEM_AIFIFO_BUF_WRAP_COUNT)
+#define AIU_MEM_AIFIFO2_BUF_WRAP_COUNT		0x158e
+#define P_AIU_MEM_AIFIFO2_BUF_WRAP_COUNT	CBUS_REG_ADDR(AIU_MEM_AIFIFO2_BUF_WRAP_COUNT)
+#define AIU_MEM_AIFIFO_MEM_CTL			0x158f
+#define P_AIU_MEM_AIFIFO_MEM_CTL		CBUS_REG_ADDR(AIU_MEM_AIFIFO_MEM_CTL)
+#define AIFIFO_TIME_STAMP_CNTL			0x1590
+#define P_AIFIFO_TIME_STAMP_CNTL		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_CNTL)
+#define AIFIFO_TIME_STAMP_SYNC_0		0x1591
+#define P_AIFIFO_TIME_STAMP_SYNC_0		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_SYNC_0)
+#define AIFIFO_TIME_STAMP_SYNC_1		0x1592
+#define P_AIFIFO_TIME_STAMP_SYNC_1		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_SYNC_1)
+#define AIFIFO_TIME_STAMP_0			0x1593
+#define P_AIFIFO_TIME_STAMP_0			CBUS_REG_ADDR(AIFIFO_TIME_STAMP_0)
+#define AIFIFO_TIME_STAMP_1			0x1594
+#define P_AIFIFO_TIME_STAMP_1			CBUS_REG_ADDR(AIFIFO_TIME_STAMP_1)
+#define AIFIFO_TIME_STAMP_2			0x1595
+#define P_AIFIFO_TIME_STAMP_2			CBUS_REG_ADDR(AIFIFO_TIME_STAMP_2)
+#define AIFIFO_TIME_STAMP_3			0x1596
+#define P_AIFIFO_TIME_STAMP_3			CBUS_REG_ADDR(AIFIFO_TIME_STAMP_3)
+#define AIFIFO_TIME_STAMP_LENGTH		0x1597
+#define P_AIFIFO_TIME_STAMP_LENGTH		CBUS_REG_ADDR(AIFIFO_TIME_STAMP_LENGTH)
+#define AIFIFO2_TIME_STAMP_CNTL			0x1598
+#define P_AIFIFO2_TIME_STAMP_CNTL		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_CNTL)
+#define AIFIFO2_TIME_STAMP_SYNC_0		0x1599
+#define P_AIFIFO2_TIME_STAMP_SYNC_0		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_SYNC_0)
+#define AIFIFO2_TIME_STAMP_SYNC_1		0x159a
+#define P_AIFIFO2_TIME_STAMP_SYNC_1		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_SYNC_1)
+#define AIFIFO2_TIME_STAMP_0			0x159b
+#define P_AIFIFO2_TIME_STAMP_0			CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_0)
+#define AIFIFO2_TIME_STAMP_1			0x159c
+#define P_AIFIFO2_TIME_STAMP_1			CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_1)
+#define AIFIFO2_TIME_STAMP_2			0x159d
+#define P_AIFIFO2_TIME_STAMP_2			CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_2)
+#define AIFIFO2_TIME_STAMP_3			0x159e
+#define P_AIFIFO2_TIME_STAMP_3			CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_3)
+#define AIFIFO2_TIME_STAMP_LENGTH		0x159f
+#define P_AIFIFO2_TIME_STAMP_LENGTH		CBUS_REG_ADDR(AIFIFO2_TIME_STAMP_LENGTH)
+#define IEC958_TIME_STAMP_CNTL			0x15a0
+#define P_IEC958_TIME_STAMP_CNTL		CBUS_REG_ADDR(IEC958_TIME_STAMP_CNTL)
+#define IEC958_TIME_STAMP_SYNC_0		0x15a1
+#define P_IEC958_TIME_STAMP_SYNC_0		CBUS_REG_ADDR(IEC958_TIME_STAMP_SYNC_0)
+#define IEC958_TIME_STAMP_SYNC_1		0x15a2
+#define P_IEC958_TIME_STAMP_SYNC_1		CBUS_REG_ADDR(IEC958_TIME_STAMP_SYNC_1)
+#define IEC958_TIME_STAMP_0			0x15a3
+#define P_IEC958_TIME_STAMP_0			CBUS_REG_ADDR(IEC958_TIME_STAMP_0)
+#define IEC958_TIME_STAMP_1			0x15a4
+#define P_IEC958_TIME_STAMP_1			CBUS_REG_ADDR(IEC958_TIME_STAMP_1)
+#define IEC958_TIME_STAMP_2			0x15a5
+#define P_IEC958_TIME_STAMP_2			CBUS_REG_ADDR(IEC958_TIME_STAMP_2)
+#define IEC958_TIME_STAMP_3			0x15a6
+#define P_IEC958_TIME_STAMP_3			CBUS_REG_ADDR(IEC958_TIME_STAMP_3)
+#define IEC958_TIME_STAMP_LENGTH		0x15a7
+#define P_IEC958_TIME_STAMP_LENGTH		CBUS_REG_ADDR(IEC958_TIME_STAMP_LENGTH)
+#define AIU_MEM_AIFIFO2_MEM_CTL			0x15a8
+#define P_AIU_MEM_AIFIFO2_MEM_CTL		CBUS_REG_ADDR(AIU_MEM_AIFIFO2_MEM_CTL)
+#define AIU_I2S_CBUS_DDR_CNTL			0x15a9
+#define P_AIU_I2S_CBUS_DDR_CNTL			CBUS_REG_ADDR(AIU_I2S_CBUS_DDR_CNTL)
+#define AIU_I2S_CBUS_DDR_WDATA			0x15aa
+#define P_AIU_I2S_CBUS_DDR_WDATA		CBUS_REG_ADDR(AIU_I2S_CBUS_DDR_WDATA)
+#define AIU_I2S_CBUS_DDR_ADDR			0x15ab
+#define P_AIU_I2S_CBUS_DDR_ADDR			CBUS_REG_ADDR(AIU_I2S_CBUS_DDR_ADDR)
+#define GE2D_GEN_CTRL0				0x18a0
+#define P_GE2D_GEN_CTRL0			CBUS_REG_ADDR(GE2D_GEN_CTRL0)
+#define GE2D_GEN_CTRL1				0x18a1
+#define P_GE2D_GEN_CTRL1			CBUS_REG_ADDR(GE2D_GEN_CTRL1)
+#define GE2D_GEN_CTRL2				0x18a2
+#define P_GE2D_GEN_CTRL2			CBUS_REG_ADDR(GE2D_GEN_CTRL2)
+#define GE2D_CMD_CTRL				0x18a3
+#define P_GE2D_CMD_CTRL				CBUS_REG_ADDR(GE2D_CMD_CTRL)
+#define GE2D_STATUS0				0x18a4
+#define P_GE2D_STATUS0				CBUS_REG_ADDR(GE2D_STATUS0)
+#define GE2D_STATUS1				0x18a5
+#define P_GE2D_STATUS1				CBUS_REG_ADDR(GE2D_STATUS1)
+#define GE2D_SRC1_DEF_COLOR			0x18a6
+#define P_GE2D_SRC1_DEF_COLOR			CBUS_REG_ADDR(GE2D_SRC1_DEF_COLOR)
+#define GE2D_SRC1_CLIPX_START_END		0x18a7
+#define P_GE2D_SRC1_CLIPX_START_END		CBUS_REG_ADDR(GE2D_SRC1_CLIPX_START_END)
+#define GE2D_SRC1_CLIPY_START_END		0x18a8
+#define P_GE2D_SRC1_CLIPY_START_END		CBUS_REG_ADDR(GE2D_SRC1_CLIPY_START_END)
+#define GE2D_SRC1_CANVAS			0x18a9
+#define P_GE2D_SRC1_CANVAS			CBUS_REG_ADDR(GE2D_SRC1_CANVAS)
+#define GE2D_SRC1_X_START_END			0x18aa
+#define P_GE2D_SRC1_X_START_END			CBUS_REG_ADDR(GE2D_SRC1_X_START_END)
+#define GE2D_SRC1_Y_START_END			0x18ab
+#define P_GE2D_SRC1_Y_START_END			CBUS_REG_ADDR(GE2D_SRC1_Y_START_END)
+#define GE2D_SRC1_LUT_ADDR			0x18ac
+#define P_GE2D_SRC1_LUT_ADDR			CBUS_REG_ADDR(GE2D_SRC1_LUT_ADDR)
+#define GE2D_SRC1_LUT_DAT			0x18ad
+#define P_GE2D_SRC1_LUT_DAT			CBUS_REG_ADDR(GE2D_SRC1_LUT_DAT)
+#define GE2D_SRC1_FMT_CTRL			0x18ae
+#define P_GE2D_SRC1_FMT_CTRL			CBUS_REG_ADDR(GE2D_SRC1_FMT_CTRL)
+#define GE2D_SRC2_DEF_COLOR			0x18af
+#define P_GE2D_SRC2_DEF_COLOR			CBUS_REG_ADDR(GE2D_SRC2_DEF_COLOR)
+#define GE2D_SRC2_CLIPX_START_END		0x18b0
+#define P_GE2D_SRC2_CLIPX_START_END		CBUS_REG_ADDR(GE2D_SRC2_CLIPX_START_END)
+#define GE2D_SRC2_CLIPY_START_END		0x18b1
+#define P_GE2D_SRC2_CLIPY_START_END		CBUS_REG_ADDR(GE2D_SRC2_CLIPY_START_END)
+#define GE2D_SRC2_X_START_END			0x18b2
+#define P_GE2D_SRC2_X_START_END			CBUS_REG_ADDR(GE2D_SRC2_X_START_END)
+#define GE2D_SRC2_Y_START_END			0x18b3
+#define P_GE2D_SRC2_Y_START_END			CBUS_REG_ADDR(GE2D_SRC2_Y_START_END)
+#define GE2D_DST_CLIPX_START_END		0x18b4
+#define P_GE2D_DST_CLIPX_START_END		CBUS_REG_ADDR(GE2D_DST_CLIPX_START_END)
+#define GE2D_DST_CLIPY_START_END		0x18b5
+#define P_GE2D_DST_CLIPY_START_END		CBUS_REG_ADDR(GE2D_DST_CLIPY_START_END)
+#define GE2D_DST_X_START_END			0x18b6
+#define P_GE2D_DST_X_START_END			CBUS_REG_ADDR(GE2D_DST_X_START_END)
+#define GE2D_DST_Y_START_END			0x18b7
+#define P_GE2D_DST_Y_START_END			CBUS_REG_ADDR(GE2D_DST_Y_START_END)
+#define GE2D_SRC2_DST_CANVAS			0x18b8
+#define P_GE2D_SRC2_DST_CANVAS			CBUS_REG_ADDR(GE2D_SRC2_DST_CANVAS)
+#define GE2D_VSC_START_PHASE_STEP		0x18b9
+#define P_GE2D_VSC_START_PHASE_STEP		CBUS_REG_ADDR(GE2D_VSC_START_PHASE_STEP)
+#define GE2D_VSC_PHASE_SLOPE			0x18ba
+#define P_GE2D_VSC_PHASE_SLOPE			CBUS_REG_ADDR(GE2D_VSC_PHASE_SLOPE)
+#define GE2D_VSC_INI_CTRL			0x18bb
+#define P_GE2D_VSC_INI_CTRL			CBUS_REG_ADDR(GE2D_VSC_INI_CTRL)
+#define GE2D_HSC_START_PHASE_STEP		0x18bc
+#define P_GE2D_HSC_START_PHASE_STEP		CBUS_REG_ADDR(GE2D_HSC_START_PHASE_STEP)
+#define GE2D_HSC_PHASE_SLOPE			0x18bd
+#define P_GE2D_HSC_PHASE_SLOPE			CBUS_REG_ADDR(GE2D_HSC_PHASE_SLOPE)
+#define GE2D_HSC_INI_CTRL			0x18be
+#define P_GE2D_HSC_INI_CTRL			CBUS_REG_ADDR(GE2D_HSC_INI_CTRL)
+#define GE2D_HSC_ADV_CTRL			0x18bf
+#define P_GE2D_HSC_ADV_CTRL			CBUS_REG_ADDR(GE2D_HSC_ADV_CTRL)
+#define GE2D_SC_MISC_CTRL			0x18c0
+#define P_GE2D_SC_MISC_CTRL			CBUS_REG_ADDR(GE2D_SC_MISC_CTRL)
+#define GE2D_VSC_NRND_POINT			0x18c1
+#define P_GE2D_VSC_NRND_POINT			CBUS_REG_ADDR(GE2D_VSC_NRND_POINT)
+#define GE2D_VSC_NRND_PHASE			0x18c2
+#define P_GE2D_VSC_NRND_PHASE			CBUS_REG_ADDR(GE2D_VSC_NRND_PHASE)
+#define GE2D_HSC_NRND_POINT			0x18c3
+#define P_GE2D_HSC_NRND_POINT			CBUS_REG_ADDR(GE2D_HSC_NRND_POINT)
+#define GE2D_HSC_NRND_PHASE			0x18c4
+#define P_GE2D_HSC_NRND_PHASE			CBUS_REG_ADDR(GE2D_HSC_NRND_PHASE)
+#define GE2D_MATRIX_PRE_OFFSET			0x18c5
+#define P_GE2D_MATRIX_PRE_OFFSET		CBUS_REG_ADDR(GE2D_MATRIX_PRE_OFFSET)
+#define GE2D_MATRIX_COEF00_01			0x18c6
+#define P_GE2D_MATRIX_COEF00_01			CBUS_REG_ADDR(GE2D_MATRIX_COEF00_01)
+#define GE2D_MATRIX_COEF02_10			0x18c7
+#define P_GE2D_MATRIX_COEF02_10			CBUS_REG_ADDR(GE2D_MATRIX_COEF02_10)
+#define GE2D_MATRIX_COEF11_12			0x18c8
+#define P_GE2D_MATRIX_COEF11_12			CBUS_REG_ADDR(GE2D_MATRIX_COEF11_12)
+#define GE2D_MATRIX_COEF20_21			0x18c9
+#define P_GE2D_MATRIX_COEF20_21			CBUS_REG_ADDR(GE2D_MATRIX_COEF20_21)
+#define GE2D_MATRIX_COEF22_CTRL			0x18ca
+#define P_GE2D_MATRIX_COEF22_CTRL		CBUS_REG_ADDR(GE2D_MATRIX_COEF22_CTRL)
+#define GE2D_MATRIX_OFFSET			0x18cb
+#define P_GE2D_MATRIX_OFFSET			CBUS_REG_ADDR(GE2D_MATRIX_OFFSET)
+#define GE2D_ALU_OP_CTRL			0x18cc
+#define P_GE2D_ALU_OP_CTRL			CBUS_REG_ADDR(GE2D_ALU_OP_CTRL)
+#define GE2D_ALU_CONST_COLOR			0x18cd
+#define P_GE2D_ALU_CONST_COLOR			CBUS_REG_ADDR(GE2D_ALU_CONST_COLOR)
+#define GE2D_SRC1_KEY				0x18ce
+#define P_GE2D_SRC1_KEY				CBUS_REG_ADDR(GE2D_SRC1_KEY)
+#define GE2D_SRC1_KEY_MASK			0x18cf
+#define P_GE2D_SRC1_KEY_MASK			CBUS_REG_ADDR(GE2D_SRC1_KEY_MASK)
+#define GE2D_SRC2_KEY				0x18d0
+#define P_GE2D_SRC2_KEY				CBUS_REG_ADDR(GE2D_SRC2_KEY)
+#define GE2D_SRC2_KEY_MASK			0x18d1
+#define P_GE2D_SRC2_KEY_MASK			CBUS_REG_ADDR(GE2D_SRC2_KEY_MASK)
+#define GE2D_DST_BITMASK			0x18d2
+#define P_GE2D_DST_BITMASK			CBUS_REG_ADDR(GE2D_DST_BITMASK)
+#define GE2D_DP_ONOFF_CTRL			0x18d3
+#define P_GE2D_DP_ONOFF_CTRL			CBUS_REG_ADDR(GE2D_DP_ONOFF_CTRL)
+#define GE2D_SCALE_COEF_IDX			0x18d4
+#define P_GE2D_SCALE_COEF_IDX			CBUS_REG_ADDR(GE2D_SCALE_COEF_IDX)
+#define GE2D_SCALE_COEF				0x18d5
+#define P_GE2D_SCALE_COEF			CBUS_REG_ADDR(GE2D_SCALE_COEF)
+#define GE2D_SRC_OUTSIDE_ALPHA			0x18d6
+#define P_GE2D_SRC_OUTSIDE_ALPHA		CBUS_REG_ADDR(GE2D_SRC_OUTSIDE_ALPHA)
+#define GE2D_ANTIFLICK_CTRL0			0x18d8
+#define P_GE2D_ANTIFLICK_CTRL0			CBUS_REG_ADDR(GE2D_ANTIFLICK_CTRL0)
+#define GE2D_ANTIFLICK_CTRL1			0x18d9
+#define P_GE2D_ANTIFLICK_CTRL1			CBUS_REG_ADDR(GE2D_ANTIFLICK_CTRL1)
+#define GE2D_ANTIFLICK_COLOR_FILT0		0x18da
+#define P_GE2D_ANTIFLICK_COLOR_FILT0		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT0)
+#define GE2D_ANTIFLICK_COLOR_FILT1		0x18db
+#define P_GE2D_ANTIFLICK_COLOR_FILT1		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT1)
+#define GE2D_ANTIFLICK_COLOR_FILT2		0x18dc
+#define P_GE2D_ANTIFLICK_COLOR_FILT2		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT2)
+#define GE2D_ANTIFLICK_COLOR_FILT3		0x18dd
+#define P_GE2D_ANTIFLICK_COLOR_FILT3		CBUS_REG_ADDR(GE2D_ANTIFLICK_COLOR_FILT3)
+#define GE2D_ANTIFLICK_ALPHA_FILT0		0x18de
+#define P_GE2D_ANTIFLICK_ALPHA_FILT0		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT0)
+#define GE2D_ANTIFLICK_ALPHA_FILT1		0x18df
+#define P_GE2D_ANTIFLICK_ALPHA_FILT1		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT1)
+#define GE2D_ANTIFLICK_ALPHA_FILT2		0x18e0
+#define P_GE2D_ANTIFLICK_ALPHA_FILT2		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT2)
+#define GE2D_ANTIFLICK_ALPHA_FILT3		0x18e1
+#define P_GE2D_ANTIFLICK_ALPHA_FILT3		CBUS_REG_ADDR(GE2D_ANTIFLICK_ALPHA_FILT3)
+#define GE2D_SRC1_RANGE_MAP_Y_CTRL		0x18e3
+#define P_GE2D_SRC1_RANGE_MAP_Y_CTRL		CBUS_REG_ADDR(GE2D_SRC1_RANGE_MAP_Y_CTRL)
+#define GE2D_SRC1_RANGE_MAP_CB_CTRL		0x18e4
+#define P_GE2D_SRC1_RANGE_MAP_CB_CTRL		CBUS_REG_ADDR(GE2D_SRC1_RANGE_MAP_CB_CTRL)
+#define GE2D_SRC1_RANGE_MAP_CR_CTRL		0x18e5
+#define P_GE2D_SRC1_RANGE_MAP_CR_CTRL		CBUS_REG_ADDR(GE2D_SRC1_RANGE_MAP_CR_CTRL)
+#define GE2D_ARB_BURST_NUM			0x18e6
+#define P_GE2D_ARB_BURST_NUM			CBUS_REG_ADDR(GE2D_ARB_BURST_NUM)
+#define GE2D_TID_TOKEN				0x18e7
+#define P_GE2D_TID_TOKEN			CBUS_REG_ADDR(GE2D_TID_TOKEN)
+#define GE2D_GEN_CTRL3				0x18e8
+#define P_GE2D_GEN_CTRL3			CBUS_REG_ADDR(GE2D_GEN_CTRL3)
+#define GE2D_STATUS2				0x18e9
+#define P_GE2D_STATUS2				CBUS_REG_ADDR(GE2D_STATUS2)
+#define GE2D_GEN_CTRL4				0x18ea
+#define P_GE2D_GEN_CTRL4			CBUS_REG_ADDR(GE2D_GEN_CTRL4)
+#define AUDIO_COP_CTL2				0x1f01
+#define P_AUDIO_COP_CTL2			CBUS_REG_ADDR(AUDIO_COP_CTL2)
+#define OPERAND_M_CTL				0x1f02
+#define P_OPERAND_M_CTL				CBUS_REG_ADDR(OPERAND_M_CTL)
+#define OPERAND1_ADDR				0x1f03
+#define P_OPERAND1_ADDR				CBUS_REG_ADDR(OPERAND1_ADDR)
+#define OPERAND2_ADDR				0x1f04
+#define P_OPERAND2_ADDR				CBUS_REG_ADDR(OPERAND2_ADDR)
+#define RESULT_M_CTL				0x1f05
+#define P_RESULT_M_CTL				CBUS_REG_ADDR(RESULT_M_CTL)
+#define RESULT1_ADDR				0x1f06
+#define P_RESULT1_ADDR				CBUS_REG_ADDR(RESULT1_ADDR)
+#define RESULT2_ADDR				0x1f07
+#define P_RESULT2_ADDR				CBUS_REG_ADDR(RESULT2_ADDR)
+#define ADD_SHFT_CTL				0x1f08
+#define P_ADD_SHFT_CTL				CBUS_REG_ADDR(ADD_SHFT_CTL)
+#define OPERAND_ONE_H				0x1f09
+#define P_OPERAND_ONE_H				CBUS_REG_ADDR(OPERAND_ONE_H)
+#define OPERAND_ONE_L				0x1f0a
+#define P_OPERAND_ONE_L				CBUS_REG_ADDR(OPERAND_ONE_L)
+#define OPERAND_TWO_H				0x1f0b
+#define P_OPERAND_TWO_H				CBUS_REG_ADDR(OPERAND_TWO_H)
+#define OPERAND_TWO_L				0x1f0c
+#define P_OPERAND_TWO_L				CBUS_REG_ADDR(OPERAND_TWO_L)
+#define RESULT_H				0x1f0d
+#define P_RESULT_H				CBUS_REG_ADDR(RESULT_H)
+#define RESULT_M				0x1f0e
+#define P_RESULT_M				CBUS_REG_ADDR(RESULT_M)
+#define RESULT_L				0x1f0f
+#define P_RESULT_L				CBUS_REG_ADDR(RESULT_L)
+#define WMEM_R_PTR				0x1f10
+#define P_WMEM_R_PTR				CBUS_REG_ADDR(WMEM_R_PTR)
+#define WMEM_W_PTR				0x1f11
+#define P_WMEM_W_PTR				CBUS_REG_ADDR(WMEM_W_PTR)
+#define AUDIO_LAYER				0x1f20
+#define P_AUDIO_LAYER				CBUS_REG_ADDR(AUDIO_LAYER)
+#define AC3_DECODING				0x1f21
+#define P_AC3_DECODING				CBUS_REG_ADDR(AC3_DECODING)
+#define AC3_DYNAMIC				0x1f22
+#define P_AC3_DYNAMIC				CBUS_REG_ADDR(AC3_DYNAMIC)
+#define AC3_MELODY				0x1f23
+#define P_AC3_MELODY				CBUS_REG_ADDR(AC3_MELODY)
+#define AC3_VOCAL				0x1f24
+#define P_AC3_VOCAL				CBUS_REG_ADDR(AC3_VOCAL)
+#define ASSIST_AMR_SCRATCH0			0x1f4f
+#define P_ASSIST_AMR_SCRATCH0			CBUS_REG_ADDR(ASSIST_AMR_SCRATCH0)
+#define ASSIST_AMR_SCRATCH1			0x1f50
+#define P_ASSIST_AMR_SCRATCH1			CBUS_REG_ADDR(ASSIST_AMR_SCRATCH1)
+#define ASSIST_AMR_SCRATCH2			0x1f51
+#define P_ASSIST_AMR_SCRATCH2			CBUS_REG_ADDR(ASSIST_AMR_SCRATCH2)
+#define ASSIST_AMR_SCRATCH3			0x1f52
+#define P_ASSIST_AMR_SCRATCH3			CBUS_REG_ADDR(ASSIST_AMR_SCRATCH3)
+#define ASSIST_HW_REV				0x1f53
+#define P_ASSIST_HW_REV				CBUS_REG_ADDR(ASSIST_HW_REV)
+#define ASSIST_POR_CONFIG			0x1f55
+#define P_ASSIST_POR_CONFIG			CBUS_REG_ADDR(ASSIST_POR_CONFIG)
+#define ASSIST_SPARE16_REG1			0x1f56
+#define P_ASSIST_SPARE16_REG1			CBUS_REG_ADDR(ASSIST_SPARE16_REG1)
+#define ASSIST_SPARE16_REG2			0x1f57
+#define P_ASSIST_SPARE16_REG2			CBUS_REG_ADDR(ASSIST_SPARE16_REG2)
+#define ASSIST_SPARE8_REG1			0x1f58
+#define P_ASSIST_SPARE8_REG1			CBUS_REG_ADDR(ASSIST_SPARE8_REG1)
+#define ASSIST_SPARE8_REG2			0x1f59
+#define P_ASSIST_SPARE8_REG2			CBUS_REG_ADDR(ASSIST_SPARE8_REG2)
+#define ASSIST_SPARE8_REG3			0x1f5a
+#define P_ASSIST_SPARE8_REG3			CBUS_REG_ADDR(ASSIST_SPARE8_REG3)
+#define AC3_CTRL_REG1				0x1f5b
+#define P_AC3_CTRL_REG1				CBUS_REG_ADDR(AC3_CTRL_REG1)
+#define AC3_CTRL_REG2				0x1f5c
+#define P_AC3_CTRL_REG2				CBUS_REG_ADDR(AC3_CTRL_REG2)
+#define AC3_CTRL_REG3				0x1f5d
+#define P_AC3_CTRL_REG3				CBUS_REG_ADDR(AC3_CTRL_REG3)
+#define AC3_CTRL_REG4				0x1f5e
+#define P_AC3_CTRL_REG4				CBUS_REG_ADDR(AC3_CTRL_REG4)
+#define ASSIST_GEN_CNTL				0x1f68
+#define P_ASSIST_GEN_CNTL			CBUS_REG_ADDR(ASSIST_GEN_CNTL)
+#define EE_ASSIST_MBOX0_IRQ_REG			0x1f70
+#define P_EE_ASSIST_MBOX0_IRQ_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX0_IRQ_REG)
+#define EE_ASSIST_MBOX0_CLR_REG			0x1f71
+#define P_EE_ASSIST_MBOX0_CLR_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX0_CLR_REG)
+#define EE_ASSIST_MBOX0_MASK			0x1f72
+#define P_EE_ASSIST_MBOX0_MASK			CBUS_REG_ADDR(EE_ASSIST_MBOX0_MASK)
+#define EE_ASSIST_MBOX0_FIQ_SEL			0x1f73
+#define P_EE_ASSIST_MBOX0_FIQ_SEL		CBUS_REG_ADDR(EE_ASSIST_MBOX0_FIQ_SEL)
+#define EE_ASSIST_MBOX1_IRQ_REG			0x1f74
+#define P_EE_ASSIST_MBOX1_IRQ_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX1_IRQ_REG)
+#define EE_ASSIST_MBOX1_CLR_REG			0x1f75
+#define P_EE_ASSIST_MBOX1_CLR_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX1_CLR_REG)
+#define EE_ASSIST_MBOX1_MASK			0x1f76
+#define P_EE_ASSIST_MBOX1_MASK			CBUS_REG_ADDR(EE_ASSIST_MBOX1_MASK)
+#define EE_ASSIST_MBOX1_FIQ_SEL			0x1f77
+#define P_EE_ASSIST_MBOX1_FIQ_SEL		CBUS_REG_ADDR(EE_ASSIST_MBOX1_FIQ_SEL)
+#define EE_ASSIST_MBOX2_IRQ_REG			0x1f78
+#define P_EE_ASSIST_MBOX2_IRQ_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX2_IRQ_REG)
+#define EE_ASSIST_MBOX2_CLR_REG			0x1f79
+#define P_EE_ASSIST_MBOX2_CLR_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX2_CLR_REG)
+#define EE_ASSIST_MBOX2_MASK			0x1f7a
+#define P_EE_ASSIST_MBOX2_MASK			CBUS_REG_ADDR(EE_ASSIST_MBOX2_MASK)
+#define EE_ASSIST_MBOX2_FIQ_SEL			0x1f7b
+#define P_EE_ASSIST_MBOX2_FIQ_SEL		CBUS_REG_ADDR(EE_ASSIST_MBOX2_FIQ_SEL)
+#define EE_ASSIST_MBOX3_IRQ_REG			0x1f7c
+#define P_EE_ASSIST_MBOX3_IRQ_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX3_IRQ_REG)
+#define EE_ASSIST_MBOX3_CLR_REG			0x1f7d
+#define P_EE_ASSIST_MBOX3_CLR_REG		CBUS_REG_ADDR(EE_ASSIST_MBOX3_CLR_REG)
+#define EE_ASSIST_MBOX3_MASK			0x1f7e
+#define P_EE_ASSIST_MBOX3_MASK			CBUS_REG_ADDR(EE_ASSIST_MBOX3_MASK)
+#define EE_ASSIST_MBOX3_FIQ_SEL			0x1f7f
+#define P_EE_ASSIST_MBOX3_FIQ_SEL		CBUS_REG_ADDR(EE_ASSIST_MBOX3_FIQ_SEL)
+#define AUDIN_SPDIF_MODE			0x2800
+#define P_AUDIN_SPDIF_MODE			CBUS_REG_ADDR(AUDIN_SPDIF_MODE)
+#define AUDIN_SPDIF_FS_CLK_RLTN			0x2801
+#define P_AUDIN_SPDIF_FS_CLK_RLTN		CBUS_REG_ADDR(AUDIN_SPDIF_FS_CLK_RLTN)
+#define AUDIN_SPDIF_CHNL_STS_A			0x2802
+#define P_AUDIN_SPDIF_CHNL_STS_A		CBUS_REG_ADDR(AUDIN_SPDIF_CHNL_STS_A)
+#define AUDIN_SPDIF_CHNL_STS_B			0x2803
+#define P_AUDIN_SPDIF_CHNL_STS_B		CBUS_REG_ADDR(AUDIN_SPDIF_CHNL_STS_B)
+#define AUDIN_SPDIF_MISC			0x2804
+#define P_AUDIN_SPDIF_MISC			CBUS_REG_ADDR(AUDIN_SPDIF_MISC)
+#define AUDIN_SPDIF_NPCM_PCPD			0x2805
+#define P_AUDIN_SPDIF_NPCM_PCPD			CBUS_REG_ADDR(AUDIN_SPDIF_NPCM_PCPD)
+#define AUDIN_SPDIF_END				0x280f
+#define P_AUDIN_SPDIF_END			CBUS_REG_ADDR(AUDIN_SPDIF_END)
+#define AUDIN_I2SIN_CTRL			0x2810
+#define P_AUDIN_I2SIN_CTRL			CBUS_REG_ADDR(AUDIN_I2SIN_CTRL)
+#define AUDIN_SOURCE_SEL			0x2811
+#define P_AUDIN_SOURCE_SEL			CBUS_REG_ADDR(AUDIN_SOURCE_SEL)
+#define AUDIN_DECODE_FORMAT			0x2812
+#define P_AUDIN_DECODE_FORMAT			CBUS_REG_ADDR(AUDIN_DECODE_FORMAT)
+#define AUDIN_DECODE_CONTROL_STATUS		0x2813
+#define P_AUDIN_DECODE_CONTROL_STATUS		CBUS_REG_ADDR(AUDIN_DECODE_CONTROL_STATUS)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_0		0x2814
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_0	CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_0)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_1		0x2815
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_1	CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_1)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_2		0x2816
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_2	CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_2)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_3		0x2817
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_3	CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_3)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_4		0x2818
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_4	CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_4)
+#define AUDIN_DECODE_CHANNEL_STATUS_A_5		0x2819
+#define P_AUDIN_DECODE_CHANNEL_STATUS_A_5	CBUS_REG_ADDR(AUDIN_DECODE_CHANNEL_STATUS_A_5)
+#define AUDIN_FIFO0_START			0x2820
+#define P_AUDIN_FIFO0_START			CBUS_REG_ADDR(AUDIN_FIFO0_START)
+#define AUDIN_FIFO0_END				0x2821
+#define P_AUDIN_FIFO0_END			CBUS_REG_ADDR(AUDIN_FIFO0_END)
+#define AUDIN_FIFO0_PTR				0x2822
+#define P_AUDIN_FIFO0_PTR			CBUS_REG_ADDR(AUDIN_FIFO0_PTR)
+#define AUDIN_FIFO0_INTR			0x2823
+#define P_AUDIN_FIFO0_INTR			CBUS_REG_ADDR(AUDIN_FIFO0_INTR)
+#define AUDIN_FIFO0_RDPTR			0x2824
+#define P_AUDIN_FIFO0_RDPTR			CBUS_REG_ADDR(AUDIN_FIFO0_RDPTR)
+#define AUDIN_FIFO0_CTRL			0x2825
+#define P_AUDIN_FIFO0_CTRL			CBUS_REG_ADDR(AUDIN_FIFO0_CTRL)
+#define AUDIN_FIFO0_CTRL1			0x2826
+#define P_AUDIN_FIFO0_CTRL1			CBUS_REG_ADDR(AUDIN_FIFO0_CTRL1)
+#define AUDIN_FIFO0_LVL0			0x2827
+#define P_AUDIN_FIFO0_LVL0			CBUS_REG_ADDR(AUDIN_FIFO0_LVL0)
+#define AUDIN_FIFO0_LVL1			0x2828
+#define P_AUDIN_FIFO0_LVL1			CBUS_REG_ADDR(AUDIN_FIFO0_LVL1)
+#define AUDIN_FIFO0_LVL2			0x2829
+#define P_AUDIN_FIFO0_LVL2			CBUS_REG_ADDR(AUDIN_FIFO0_LVL2)
+#define AUDIN_FIFO0_REQID			0x2830
+#define P_AUDIN_FIFO0_REQID			CBUS_REG_ADDR(AUDIN_FIFO0_REQID)
+#define AUDIN_FIFO0_WRAP			0x2831
+#define P_AUDIN_FIFO0_WRAP			CBUS_REG_ADDR(AUDIN_FIFO0_WRAP)
+#define AUDIN_FIFO1_START			0x2833
+#define P_AUDIN_FIFO1_START			CBUS_REG_ADDR(AUDIN_FIFO1_START)
+#define AUDIN_FIFO1_END				0x2834
+#define P_AUDIN_FIFO1_END			CBUS_REG_ADDR(AUDIN_FIFO1_END)
+#define AUDIN_FIFO1_PTR				0x2835
+#define P_AUDIN_FIFO1_PTR			CBUS_REG_ADDR(AUDIN_FIFO1_PTR)
+#define AUDIN_FIFO1_INTR			0x2836
+#define P_AUDIN_FIFO1_INTR			CBUS_REG_ADDR(AUDIN_FIFO1_INTR)
+#define AUDIN_FIFO1_RDPTR			0x2837
+#define P_AUDIN_FIFO1_RDPTR			CBUS_REG_ADDR(AUDIN_FIFO1_RDPTR)
+#define AUDIN_FIFO1_CTRL			0x2838
+#define P_AUDIN_FIFO1_CTRL			CBUS_REG_ADDR(AUDIN_FIFO1_CTRL)
+#define AUDIN_FIFO1_CTRL1			0x2839
+#define P_AUDIN_FIFO1_CTRL1			CBUS_REG_ADDR(AUDIN_FIFO1_CTRL1)
+#define AUDIN_FIFO1_LVL0			0x2840
+#define P_AUDIN_FIFO1_LVL0			CBUS_REG_ADDR(AUDIN_FIFO1_LVL0)
+#define AUDIN_FIFO1_LVL1			0x2841
+#define P_AUDIN_FIFO1_LVL1			CBUS_REG_ADDR(AUDIN_FIFO1_LVL1)
+#define AUDIN_FIFO1_LVL2			0x2842
+#define P_AUDIN_FIFO1_LVL2			CBUS_REG_ADDR(AUDIN_FIFO1_LVL2)
+#define AUDIN_FIFO1_REQID			0x2843
+#define P_AUDIN_FIFO1_REQID			CBUS_REG_ADDR(AUDIN_FIFO1_REQID)
+#define AUDIN_FIFO1_WRAP			0x2844
+#define P_AUDIN_FIFO1_WRAP			CBUS_REG_ADDR(AUDIN_FIFO1_WRAP)
+#define AUDIN_FIFO2_START			0x2845
+#define P_AUDIN_FIFO2_START			CBUS_REG_ADDR(AUDIN_FIFO2_START)
+#define AUDIN_FIFO2_END				0x2846
+#define P_AUDIN_FIFO2_END			CBUS_REG_ADDR(AUDIN_FIFO2_END)
+#define AUDIN_FIFO2_PTR				0x2847
+#define P_AUDIN_FIFO2_PTR			CBUS_REG_ADDR(AUDIN_FIFO2_PTR)
+#define AUDIN_FIFO2_INTR			0x2848
+#define P_AUDIN_FIFO2_INTR			CBUS_REG_ADDR(AUDIN_FIFO2_INTR)
+#define AUDIN_FIFO2_RDPTR			0x2849
+#define P_AUDIN_FIFO2_RDPTR			CBUS_REG_ADDR(AUDIN_FIFO2_RDPTR)
+#define AUDIN_FIFO2_CTRL			0x284a
+#define P_AUDIN_FIFO2_CTRL			CBUS_REG_ADDR(AUDIN_FIFO2_CTRL)
+#define AUDIN_FIFO2_CTRL1			0x284b
+#define P_AUDIN_FIFO2_CTRL1			CBUS_REG_ADDR(AUDIN_FIFO2_CTRL1)
+#define AUDIN_FIFO2_LVL0			0x284c
+#define P_AUDIN_FIFO2_LVL0			CBUS_REG_ADDR(AUDIN_FIFO2_LVL0)
+#define AUDIN_FIFO2_LVL1			0x284d
+#define P_AUDIN_FIFO2_LVL1			CBUS_REG_ADDR(AUDIN_FIFO2_LVL1)
+#define AUDIN_FIFO2_LVL2			0x284e
+#define P_AUDIN_FIFO2_LVL2			CBUS_REG_ADDR(AUDIN_FIFO2_LVL2)
+#define AUDIN_FIFO2_REQID			0x284f
+#define P_AUDIN_FIFO2_REQID			CBUS_REG_ADDR(AUDIN_FIFO2_REQID)
+#define AUDIN_FIFO2_WRAP			0x2850
+#define P_AUDIN_FIFO2_WRAP			CBUS_REG_ADDR(AUDIN_FIFO2_WRAP)
+#define AUDIN_INT_CTRL				0x2851
+#define P_AUDIN_INT_CTRL			CBUS_REG_ADDR(AUDIN_INT_CTRL)
+#define AUDIN_FIFO_INT				0x2852
+#define P_AUDIN_FIFO_INT			CBUS_REG_ADDR(AUDIN_FIFO_INT)
+#define PCMIN_CTRL0				0x2860
+#define P_PCMIN_CTRL0				CBUS_REG_ADDR(PCMIN_CTRL0)
+#define PCMIN_CTRL1				0x2861
+#define P_PCMIN_CTRL1				CBUS_REG_ADDR(PCMIN_CTRL1)
+#define PCMOUT_CTRL0				0x2870
+#define P_PCMOUT_CTRL0				CBUS_REG_ADDR(PCMOUT_CTRL0)
+#define PCMOUT_CTRL1				0x2871
+#define P_PCMOUT_CTRL1				CBUS_REG_ADDR(PCMOUT_CTRL1)
+#define PCMOUT_CTRL2				0x2872
+#define P_PCMOUT_CTRL2				CBUS_REG_ADDR(PCMOUT_CTRL2)
+#define PCMOUT_CTRL3				0x2873
+#define P_PCMOUT_CTRL3				CBUS_REG_ADDR(PCMOUT_CTRL3)
+#define AUDOUT_CTRL				0x2880
+#define P_AUDOUT_CTRL				CBUS_REG_ADDR(AUDOUT_CTRL)
+#define AUDOUT_CTRL1				0x2881
+#define P_AUDOUT_CTRL1				CBUS_REG_ADDR(AUDOUT_CTRL1)
+#define AUDOUT_BUF0_STA				0x2882
+#define P_AUDOUT_BUF0_STA			CBUS_REG_ADDR(AUDOUT_BUF0_STA)
+#define AUDOUT_BUF0_EDA				0x2883
+#define P_AUDOUT_BUF0_EDA			CBUS_REG_ADDR(AUDOUT_BUF0_EDA)
+#define AUDOUT_BUF0_WPTR			0x2884
+#define P_AUDOUT_BUF0_WPTR			CBUS_REG_ADDR(AUDOUT_BUF0_WPTR)
+#define AUDOUT_BUF1_STA				0x2885
+#define P_AUDOUT_BUF1_STA			CBUS_REG_ADDR(AUDOUT_BUF1_STA)
+#define AUDOUT_BUF1_EDA				0x2886
+#define P_AUDOUT_BUF1_EDA			CBUS_REG_ADDR(AUDOUT_BUF1_EDA)
+#define AUDOUT_BUF1_WPTR			0x2887
+#define P_AUDOUT_BUF1_WPTR			CBUS_REG_ADDR(AUDOUT_BUF1_WPTR)
+#define AUDOUT_FIFO_RPTR			0x2888
+#define P_AUDOUT_FIFO_RPTR			CBUS_REG_ADDR(AUDOUT_FIFO_RPTR)
+#define AUDOUT_INTR_PTR				0x2889
+#define P_AUDOUT_INTR_PTR			CBUS_REG_ADDR(AUDOUT_INTR_PTR)
+#define AUDOUT_FIFO_STS				0x288a
+#define P_AUDOUT_FIFO_STS			CBUS_REG_ADDR(AUDOUT_FIFO_STS)
+#define AUDIN_HDMI_MEAS_CTRL			0x28a0
+#define P_AUDIN_HDMI_MEAS_CTRL			CBUS_REG_ADDR(AUDIN_HDMI_MEAS_CTRL)
+#define AUDIN_HDMI_MEAS_CYCLES_M1		0x28a1
+#define P_AUDIN_HDMI_MEAS_CYCLES_M1		CBUS_REG_ADDR(AUDIN_HDMI_MEAS_CYCLES_M1)
+#define AUDIN_HDMI_MEAS_INTR_MASKN		0x28a2
+#define P_AUDIN_HDMI_MEAS_INTR_MASKN		CBUS_REG_ADDR(AUDIN_HDMI_MEAS_INTR_MASKN)
+#define AUDIN_HDMI_MEAS_INTR_STAT		0x28a3
+#define P_AUDIN_HDMI_MEAS_INTR_STAT		CBUS_REG_ADDR(AUDIN_HDMI_MEAS_INTR_STAT)
+#define AUDIN_HDMI_REF_CYCLES_STAT_0		0x28a4
+#define P_AUDIN_HDMI_REF_CYCLES_STAT_0		CBUS_REG_ADDR(AUDIN_HDMI_REF_CYCLES_STAT_0)
+#define AUDIN_HDMI_REF_CYCLES_STAT_1		0x28a5
+#define P_AUDIN_HDMI_REF_CYCLES_STAT_1		CBUS_REG_ADDR(AUDIN_HDMI_REF_CYCLES_STAT_1)
+#define AUDIN_HDMIRX_AFIFO_STAT			0x28a6
+#define P_AUDIN_HDMIRX_AFIFO_STAT		CBUS_REG_ADDR(AUDIN_HDMIRX_AFIFO_STAT)
+#define AUDIN_FIFO0_PIO_STS			0x28b0
+#define P_AUDIN_FIFO0_PIO_STS			CBUS_REG_ADDR(AUDIN_FIFO0_PIO_STS)
+#define AUDIN_FIFO0_PIO_RDL			0x28b1
+#define P_AUDIN_FIFO0_PIO_RDL			CBUS_REG_ADDR(AUDIN_FIFO0_PIO_RDL)
+#define AUDIN_FIFO0_PIO_RDH			0x28b2
+#define P_AUDIN_FIFO0_PIO_RDH			CBUS_REG_ADDR(AUDIN_FIFO0_PIO_RDH)
+#define AUDIN_FIFO1_PIO_STS			0x28b3
+#define P_AUDIN_FIFO1_PIO_STS			CBUS_REG_ADDR(AUDIN_FIFO1_PIO_STS)
+#define AUDIN_FIFO1_PIO_RDL			0x28b4
+#define P_AUDIN_FIFO1_PIO_RDL			CBUS_REG_ADDR(AUDIN_FIFO1_PIO_RDL)
+#define AUDIN_FIFO1_PIO_RDH			0x28b5
+#define P_AUDIN_FIFO1_PIO_RDH			CBUS_REG_ADDR(AUDIN_FIFO1_PIO_RDH)
+#define AUDIN_FIFO2_PIO_STS			0x28b6
+#define P_AUDIN_FIFO2_PIO_STS			CBUS_REG_ADDR(AUDIN_FIFO2_PIO_STS)
+#define AUDIN_FIFO2_PIO_RDL			0x28b7
+#define P_AUDIN_FIFO2_PIO_RDL			CBUS_REG_ADDR(AUDIN_FIFO2_PIO_RDL)
+#define AUDIN_FIFO2_PIO_RDH			0x28b8
+#define P_AUDIN_FIFO2_PIO_RDH			CBUS_REG_ADDR(AUDIN_FIFO2_PIO_RDH)
+#define AUDOUT_FIFO_PIO_STS			0x28b9
+#define P_AUDOUT_FIFO_PIO_STS			CBUS_REG_ADDR(AUDOUT_FIFO_PIO_STS)
+#define AUDOUT_FIFO_PIO_WRL			0x28ba
+#define P_AUDOUT_FIFO_PIO_WRL			CBUS_REG_ADDR(AUDOUT_FIFO_PIO_WRL)
+#define AUDOUT_FIFO_PIO_WRH			0x28bb
+#define P_AUDOUT_FIFO_PIO_WRH			CBUS_REG_ADDR(AUDOUT_FIFO_PIO_WRH)
+#define AUD_RESAMPLE_CTRL0			0x28bf
+#define P_AUD_RESAMPLE_CTRL0			CBUS_REG_ADDR(AUD_RESAMPLE_CTRL0)
+#define AUD_RESAMPLE_CTRL1			0x28c0
+#define P_AUD_RESAMPLE_CTRL1			CBUS_REG_ADDR(AUD_RESAMPLE_CTRL1)
+#define AUD_RESAMPLE_STATUS			0x28c1
+#define P_AUD_RESAMPLE_STATUS			CBUS_REG_ADDR(AUD_RESAMPLE_STATUS)
+#define AUDIN_ADDR_END				0x28c2
+#define P_AUDIN_ADDR_END			CBUS_REG_ADDR(AUDIN_ADDR_END)
+#define VDIN0_OFFSET				0x00
+#define VDIN1_OFFSET				0x70
+#define VDIN_SCALE_COEF_IDX			0x1200
+#define P_VDIN_SCALE_COEF_IDX			VCBUS_REG_ADDR(VDIN_SCALE_COEF_IDX)
+#define VDIN_SCALE_COEF				0x1201
+#define P_VDIN_SCALE_COEF			VCBUS_REG_ADDR(VDIN_SCALE_COEF)
+#define VDIN_COM_CTRL0				0x1202
+#define P_VDIN_COM_CTRL0			VCBUS_REG_ADDR(VDIN_COM_CTRL0)
+#define VDIN_ACTIVE_MAX_PIX_CNT_STATUS		0x1203
+#define P_VDIN_ACTIVE_MAX_PIX_CNT_STATUS	VCBUS_REG_ADDR(VDIN_ACTIVE_MAX_PIX_CNT_STATUS)
+#define VDIN_LCNT_STATUS			0x1204
+#define P_VDIN_LCNT_STATUS			VCBUS_REG_ADDR(VDIN_LCNT_STATUS)
+#define VDIN_COM_STATUS0			0x1205
+#define P_VDIN_COM_STATUS0			VCBUS_REG_ADDR(VDIN_COM_STATUS0)
+#define VDIN_COM_STATUS1			0x1206
+#define P_VDIN_COM_STATUS1			VCBUS_REG_ADDR(VDIN_COM_STATUS1)
+#define VDIN_LCNT_SHADOW_STATUS			0x1207
+#define P_VDIN_LCNT_SHADOW_STATUS		VCBUS_REG_ADDR(VDIN_LCNT_SHADOW_STATUS)
+#define VDIN_ASFIFO_CTRL0			0x1208
+#define P_VDIN_ASFIFO_CTRL0			VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL0)
+#define VDIN_ASFIFO_CTRL1			0x1209
+#define P_VDIN_ASFIFO_CTRL1			VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL1)
+#define VDIN_WIDTHM1I_WIDTHM1O			0x120a
+#define P_VDIN_WIDTHM1I_WIDTHM1O		VCBUS_REG_ADDR(VDIN_WIDTHM1I_WIDTHM1O)
+#define VDIN_SC_MISC_CTRL			0x120b
+#define P_VDIN_SC_MISC_CTRL			VCBUS_REG_ADDR(VDIN_SC_MISC_CTRL)
+#define VDIN_HSC_PHASE_STEP			0x120c
+#define P_VDIN_HSC_PHASE_STEP			VCBUS_REG_ADDR(VDIN_HSC_PHASE_STEP)
+#define VDIN_HSC_INI_CTRL			0x120d
+#define P_VDIN_HSC_INI_CTRL			VCBUS_REG_ADDR(VDIN_HSC_INI_CTRL)
+#define VDIN_COM_STATUS2			0x120e
+#define P_VDIN_COM_STATUS2			VCBUS_REG_ADDR(VDIN_COM_STATUS2)
+#define VDIN_ASFIFO_CTRL2			0x120f
+#define P_VDIN_ASFIFO_CTRL2			VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL2)
+#define VDIN_MATRIX_CTRL			0x1210
+#define P_VDIN_MATRIX_CTRL			VCBUS_REG_ADDR(VDIN_MATRIX_CTRL)
+#define VDIN_MATRIX_COEF00_01			0x1211
+#define P_VDIN_MATRIX_COEF00_01			VCBUS_REG_ADDR(VDIN_MATRIX_COEF00_01)
+#define VDIN_MATRIX_COEF02_10			0x1212
+#define P_VDIN_MATRIX_COEF02_10			VCBUS_REG_ADDR(VDIN_MATRIX_COEF02_10)
+#define VDIN_MATRIX_COEF11_12			0x1213
+#define P_VDIN_MATRIX_COEF11_12			VCBUS_REG_ADDR(VDIN_MATRIX_COEF11_12)
+#define VDIN_MATRIX_COEF20_21			0x1214
+#define P_VDIN_MATRIX_COEF20_21			VCBUS_REG_ADDR(VDIN_MATRIX_COEF20_21)
+#define VDIN_MATRIX_COEF22			0x1215
+#define P_VDIN_MATRIX_COEF22			VCBUS_REG_ADDR(VDIN_MATRIX_COEF22)
+#define VDIN_MATRIX_OFFSET0_1			0x1216
+#define P_VDIN_MATRIX_OFFSET0_1			VCBUS_REG_ADDR(VDIN_MATRIX_OFFSET0_1)
+#define VDIN_MATRIX_OFFSET2			0x1217
+#define P_VDIN_MATRIX_OFFSET2			VCBUS_REG_ADDR(VDIN_MATRIX_OFFSET2)
+#define VDIN_MATRIX_PRE_OFFSET0_1		0x1218
+#define P_VDIN_MATRIX_PRE_OFFSET0_1		VCBUS_REG_ADDR(VDIN_MATRIX_PRE_OFFSET0_1)
+#define VDIN_MATRIX_PRE_OFFSET2			0x1219
+#define P_VDIN_MATRIX_PRE_OFFSET2		VCBUS_REG_ADDR(VDIN_MATRIX_PRE_OFFSET2)
+#define VDIN_LFIFO_CTRL				0x121a
+#define P_VDIN_LFIFO_CTRL			VCBUS_REG_ADDR(VDIN_LFIFO_CTRL)
+#define VDIN_COM_GCLK_CTRL			0x121b
+#define P_VDIN_COM_GCLK_CTRL			VCBUS_REG_ADDR(VDIN_COM_GCLK_CTRL)
+#define VDIN_INTF_WIDTHM1			0x121c
+#define P_VDIN_INTF_WIDTHM1			VCBUS_REG_ADDR(VDIN_INTF_WIDTHM1)
+#define VDIN_LFIFO_URG_CTRL			0x121e
+#define P_VDIN_LFIFO_URG_CTRL			VCBUS_REG_ADDR(VDIN_LFIFO_URG_CTRL)
+#define VDIN_WR_CTRL2				0x121f
+#define P_VDIN_WR_CTRL2				VCBUS_REG_ADDR(VDIN_WR_CTRL2)
+#define VDIN_WR_CTRL				0x1220
+#define P_VDIN_WR_CTRL				VCBUS_REG_ADDR(VDIN_WR_CTRL)
+#define VDIN_WR_H_START_END			0x1221
+#define P_VDIN_WR_H_START_END			VCBUS_REG_ADDR(VDIN_WR_H_START_END)
+#define VDIN_WR_V_START_END			0x1222
+#define P_VDIN_WR_V_START_END			VCBUS_REG_ADDR(VDIN_WR_V_START_END)
+#define VDIN_VSC_PHASE_STEP			0x1223
+#define P_VDIN_VSC_PHASE_STEP			VCBUS_REG_ADDR(VDIN_VSC_PHASE_STEP)
+#define VDIN_VSC_INI_CTRL			0x1224
+#define P_VDIN_VSC_INI_CTRL			VCBUS_REG_ADDR(VDIN_VSC_INI_CTRL)
+#define VDIN_SCIN_HEIGHTM1			0x1225
+#define P_VDIN_SCIN_HEIGHTM1			VCBUS_REG_ADDR(VDIN_SCIN_HEIGHTM1)
+#define VDIN_DUMMY_DATA				0x1226
+#define P_VDIN_DUMMY_DATA			VCBUS_REG_ADDR(VDIN_DUMMY_DATA)
+#define VDIN_MATRIX_PROBE_COLOR			0x1228
+#define P_VDIN_MATRIX_PROBE_COLOR		VCBUS_REG_ADDR(VDIN_MATRIX_PROBE_COLOR)
+#define VDIN_MATRIX_HL_COLOR			0x1229
+#define P_VDIN_MATRIX_HL_COLOR			VCBUS_REG_ADDR(VDIN_MATRIX_HL_COLOR)
+#define VDIN_MATRIX_PROBE_POS			0x122a
+#define P_VDIN_MATRIX_PROBE_POS			VCBUS_REG_ADDR(VDIN_MATRIX_PROBE_POS)
+#define VDIN_CHROMA_ADDR_PORT			0x122b
+#define P_VDIN_CHROMA_ADDR_PORT			VCBUS_REG_ADDR(VDIN_CHROMA_ADDR_PORT)
+#define VDIN_CHROMA_DATA_PORT			0x122c
+#define P_VDIN_CHROMA_DATA_PORT			VCBUS_REG_ADDR(VDIN_CHROMA_DATA_PORT)
+#define VDIN_CM_BRI_CON_CTRL			0x122d
+#define P_VDIN_CM_BRI_CON_CTRL			VCBUS_REG_ADDR(VDIN_CM_BRI_CON_CTRL)
+#define VDIN_GO_LINE_CTRL			0x122f
+#define P_VDIN_GO_LINE_CTRL			VCBUS_REG_ADDR(VDIN_GO_LINE_CTRL)
+#define VDIN_HIST_CTRL				0x1230
+#define P_VDIN_HIST_CTRL			VCBUS_REG_ADDR(VDIN_HIST_CTRL)
+#define VDIN_HIST_H_START_END			0x1231
+#define P_VDIN_HIST_H_START_END			VCBUS_REG_ADDR(VDIN_HIST_H_START_END)
+#define VDIN_HIST_V_START_END			0x1232
+#define P_VDIN_HIST_V_START_END			VCBUS_REG_ADDR(VDIN_HIST_V_START_END)
+#define VDIN_HIST_MAX_MIN			0x1233
+#define P_VDIN_HIST_MAX_MIN			VCBUS_REG_ADDR(VDIN_HIST_MAX_MIN)
+#define VDIN_HIST_SPL_VAL			0x1234
+#define P_VDIN_HIST_SPL_VAL			VCBUS_REG_ADDR(VDIN_HIST_SPL_VAL)
+#define VDIN_HIST_SPL_PIX_CNT			0x1235
+#define P_VDIN_HIST_SPL_PIX_CNT			VCBUS_REG_ADDR(VDIN_HIST_SPL_PIX_CNT)
+#define VDIN_HIST_CHROMA_SUM			0x1236
+#define P_VDIN_HIST_CHROMA_SUM			VCBUS_REG_ADDR(VDIN_HIST_CHROMA_SUM)
+#define VDIN_DNLP_HIST00			0x1237
+#define P_VDIN_DNLP_HIST00			VCBUS_REG_ADDR(VDIN_DNLP_HIST00)
+#define VDIN_DNLP_HIST01			0x1238
+#define P_VDIN_DNLP_HIST01			VCBUS_REG_ADDR(VDIN_DNLP_HIST01)
+#define VDIN_DNLP_HIST02			0x1239
+#define P_VDIN_DNLP_HIST02			VCBUS_REG_ADDR(VDIN_DNLP_HIST02)
+#define VDIN_DNLP_HIST03			0x123a
+#define P_VDIN_DNLP_HIST03			VCBUS_REG_ADDR(VDIN_DNLP_HIST03)
+#define VDIN_DNLP_HIST04			0x123b
+#define P_VDIN_DNLP_HIST04			VCBUS_REG_ADDR(VDIN_DNLP_HIST04)
+#define VDIN_DNLP_HIST05			0x123c
+#define P_VDIN_DNLP_HIST05			VCBUS_REG_ADDR(VDIN_DNLP_HIST05)
+#define VDIN_DNLP_HIST06			0x123d
+#define P_VDIN_DNLP_HIST06			VCBUS_REG_ADDR(VDIN_DNLP_HIST06)
+#define VDIN_DNLP_HIST07			0x123e
+#define P_VDIN_DNLP_HIST07			VCBUS_REG_ADDR(VDIN_DNLP_HIST07)
+#define VDIN_DNLP_HIST08			0x123f
+#define P_VDIN_DNLP_HIST08			VCBUS_REG_ADDR(VDIN_DNLP_HIST08)
+#define VDIN_DNLP_HIST09			0x1240
+#define P_VDIN_DNLP_HIST09			VCBUS_REG_ADDR(VDIN_DNLP_HIST09)
+#define VDIN_DNLP_HIST10			0x1241
+#define P_VDIN_DNLP_HIST10			VCBUS_REG_ADDR(VDIN_DNLP_HIST10)
+#define VDIN_DNLP_HIST11			0x1242
+#define P_VDIN_DNLP_HIST11			VCBUS_REG_ADDR(VDIN_DNLP_HIST11)
+#define VDIN_DNLP_HIST12			0x1243
+#define P_VDIN_DNLP_HIST12			VCBUS_REG_ADDR(VDIN_DNLP_HIST12)
+#define VDIN_DNLP_HIST13			0x1244
+#define P_VDIN_DNLP_HIST13			VCBUS_REG_ADDR(VDIN_DNLP_HIST13)
+#define VDIN_DNLP_HIST14			0x1245
+#define P_VDIN_DNLP_HIST14			VCBUS_REG_ADDR(VDIN_DNLP_HIST14)
+#define VDIN_DNLP_HIST15			0x1246
+#define P_VDIN_DNLP_HIST15			VCBUS_REG_ADDR(VDIN_DNLP_HIST15)
+#define VDIN_DNLP_HIST16			0x1247
+#define P_VDIN_DNLP_HIST16			VCBUS_REG_ADDR(VDIN_DNLP_HIST16)
+#define VDIN_DNLP_HIST17			0x1248
+#define P_VDIN_DNLP_HIST17			VCBUS_REG_ADDR(VDIN_DNLP_HIST17)
+#define VDIN_DNLP_HIST18			0x1249
+#define P_VDIN_DNLP_HIST18			VCBUS_REG_ADDR(VDIN_DNLP_HIST18)
+#define VDIN_DNLP_HIST19			0x124a
+#define P_VDIN_DNLP_HIST19			VCBUS_REG_ADDR(VDIN_DNLP_HIST19)
+#define VDIN_DNLP_HIST20			0x124b
+#define P_VDIN_DNLP_HIST20			VCBUS_REG_ADDR(VDIN_DNLP_HIST20)
+#define VDIN_DNLP_HIST21			0x124c
+#define P_VDIN_DNLP_HIST21			VCBUS_REG_ADDR(VDIN_DNLP_HIST21)
+#define VDIN_DNLP_HIST22			0x124d
+#define P_VDIN_DNLP_HIST22			VCBUS_REG_ADDR(VDIN_DNLP_HIST22)
+#define VDIN_DNLP_HIST23			0x124e
+#define P_VDIN_DNLP_HIST23			VCBUS_REG_ADDR(VDIN_DNLP_HIST23)
+#define VDIN_DNLP_HIST24			0x124f
+#define P_VDIN_DNLP_HIST24			VCBUS_REG_ADDR(VDIN_DNLP_HIST24)
+#define VDIN_DNLP_HIST25			0x1250
+#define P_VDIN_DNLP_HIST25			VCBUS_REG_ADDR(VDIN_DNLP_HIST25)
+#define VDIN_DNLP_HIST26			0x1251
+#define P_VDIN_DNLP_HIST26			VCBUS_REG_ADDR(VDIN_DNLP_HIST26)
+#define VDIN_DNLP_HIST27			0x1252
+#define P_VDIN_DNLP_HIST27			VCBUS_REG_ADDR(VDIN_DNLP_HIST27)
+#define VDIN_DNLP_HIST28			0x1253
+#define P_VDIN_DNLP_HIST28			VCBUS_REG_ADDR(VDIN_DNLP_HIST28)
+#define VDIN_DNLP_HIST29			0x1254
+#define P_VDIN_DNLP_HIST29			VCBUS_REG_ADDR(VDIN_DNLP_HIST29)
+#define VDIN_DNLP_HIST30			0x1255
+#define P_VDIN_DNLP_HIST30			VCBUS_REG_ADDR(VDIN_DNLP_HIST30)
+#define VDIN_DNLP_HIST31			0x1256
+#define P_VDIN_DNLP_HIST31			VCBUS_REG_ADDR(VDIN_DNLP_HIST31)
+#define VDIN_LDIM_STTS_HIST_REGION_IDX		0x1257
+#define P_VDIN_LDIM_STTS_HIST_REGION_IDX	VCBUS_REG_ADDR(VDIN_LDIM_STTS_HIST_REGION_IDX)
+#define VDIN_LDIM_STTS_HIST_SET_REGION		0x1258
+#define P_VDIN_LDIM_STTS_HIST_SET_REGION	VCBUS_REG_ADDR(VDIN_LDIM_STTS_HIST_SET_REGION)
+#define VDIN_LDIM_STTS_HIST_READ_REGION		0x1259
+#define P_VDIN_LDIM_STTS_HIST_READ_REGION	VCBUS_REG_ADDR(VDIN_LDIM_STTS_HIST_READ_REGION)
+#define VDIN_MEAS_CTRL0				0x125a
+#define P_VDIN_MEAS_CTRL0			VCBUS_REG_ADDR(VDIN_MEAS_CTRL0)
+#define VDIN_MEAS_VS_COUNT_HI			0x125b
+#define P_VDIN_MEAS_VS_COUNT_HI			VCBUS_REG_ADDR(VDIN_MEAS_VS_COUNT_HI)
+#define VDIN_MEAS_VS_COUNT_LO			0x125c
+#define P_VDIN_MEAS_VS_COUNT_LO			VCBUS_REG_ADDR(VDIN_MEAS_VS_COUNT_LO)
+#define VDIN_MEAS_HS_RANGE			0x125d
+#define P_VDIN_MEAS_HS_RANGE			VCBUS_REG_ADDR(VDIN_MEAS_HS_RANGE)
+#define VDIN_MEAS_HS_COUNT			0x125e
+#define P_VDIN_MEAS_HS_COUNT			VCBUS_REG_ADDR(VDIN_MEAS_HS_COUNT)
+#define VDIN_BLKBAR_CTRL1			0x125f
+#define P_VDIN_BLKBAR_CTRL1			VCBUS_REG_ADDR(VDIN_BLKBAR_CTRL1)
+#define VDIN_BLKBAR_CTRL0			0x1260
+#define P_VDIN_BLKBAR_CTRL0			VCBUS_REG_ADDR(VDIN_BLKBAR_CTRL0)
+#define VDIN_BLKBAR_H_START_END			0x1261
+#define P_VDIN_BLKBAR_H_START_END		VCBUS_REG_ADDR(VDIN_BLKBAR_H_START_END)
+#define VDIN_BLKBAR_V_START_END			0x1262
+#define P_VDIN_BLKBAR_V_START_END		VCBUS_REG_ADDR(VDIN_BLKBAR_V_START_END)
+#define VDIN_BLKBAR_CNT_THRESHOLD		0x1263
+#define P_VDIN_BLKBAR_CNT_THRESHOLD		VCBUS_REG_ADDR(VDIN_BLKBAR_CNT_THRESHOLD)
+#define VDIN_BLKBAR_ROW_TH1_TH2			0x1264
+#define P_VDIN_BLKBAR_ROW_TH1_TH2		VCBUS_REG_ADDR(VDIN_BLKBAR_ROW_TH1_TH2)
+#define VDIN_BLKBAR_IND_LEFT_START_END		0x1265
+#define P_VDIN_BLKBAR_IND_LEFT_START_END	VCBUS_REG_ADDR(VDIN_BLKBAR_IND_LEFT_START_END)
+#define VDIN_BLKBAR_IND_RIGHT_START_END		0x1266
+#define P_VDIN_BLKBAR_IND_RIGHT_START_END	VCBUS_REG_ADDR(VDIN_BLKBAR_IND_RIGHT_START_END)
+#define VDIN_BLKBAR_IND_LEFT1_CNT		0x1267
+#define P_VDIN_BLKBAR_IND_LEFT1_CNT		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_LEFT1_CNT)
+#define VDIN_BLKBAR_IND_LEFT2_CNT		0x1268
+#define P_VDIN_BLKBAR_IND_LEFT2_CNT		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_LEFT2_CNT)
+#define VDIN_BLKBAR_IND_RIGHT1_CNT		0x1269
+#define P_VDIN_BLKBAR_IND_RIGHT1_CNT		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_RIGHT1_CNT)
+#define VDIN_BLKBAR_IND_RIGHT2_CNT		0x126a
+#define P_VDIN_BLKBAR_IND_RIGHT2_CNT		VCBUS_REG_ADDR(VDIN_BLKBAR_IND_RIGHT2_CNT)
+#define VDIN_BLKBAR_STATUS0			0x126b
+#define P_VDIN_BLKBAR_STATUS0			VCBUS_REG_ADDR(VDIN_BLKBAR_STATUS0)
+#define VDIN_BLKBAR_STATUS1			0x126c
+#define P_VDIN_BLKBAR_STATUS1			VCBUS_REG_ADDR(VDIN_BLKBAR_STATUS1)
+#define VDIN_WIN_H_START_END			0x126d
+#define P_VDIN_WIN_H_START_END			VCBUS_REG_ADDR(VDIN_WIN_H_START_END)
+#define VDIN_WIN_V_START_END			0x126e
+#define P_VDIN_WIN_V_START_END			VCBUS_REG_ADDR(VDIN_WIN_V_START_END)
+#define VDIN_ASFIFO_CTRL3			0x126f
+#define P_VDIN_ASFIFO_CTRL3			VCBUS_REG_ADDR(VDIN_ASFIFO_CTRL3)
+#define VDIN0_SCALE_COEF_IDX			((VDIN0_OFFSET << 2) + VDIN_SCALE_COEF_IDX)
+#define P_VDIN0_SCALE_COEF_IDX			VCBUS_REG_ADDR(VDIN0_SCALE_COEF_IDX)
+#define VDIN0_SCALE_COEF			((VDIN0_OFFSET << 2) + VDIN_SCALE_COEF)
+#define P_VDIN0_SCALE_COEF			VCBUS_REG_ADDR(VDIN0_SCALE_COEF)
+#define VDIN0_COM_CTRL0				((VDIN0_OFFSET << 2) + VDIN_COM_CTRL0)
+#define P_VDIN0_COM_CTRL0			VCBUS_REG_ADDR(VDIN0_COM_CTRL0)
+#define VDIN0_ACTIVE_MAX_PIX_CNT_STATUS		((VDIN0_OFFSET << 2) + VDIN_ACTIVE_MAX_PIX_CNT_STATUS)
+#define P_VDIN0_ACTIVE_MAX_PIX_CNT_STATUS	VCBUS_REG_ADDR(VDIN0_ACTIVE_MAX_PIX_CNT_STATUS)
+#define VDIN0_LCNT_STATUS			((VDIN0_OFFSET << 2) + VDIN_LCNT_STATUS)
+#define P_VDIN0_LCNT_STATUS			VCBUS_REG_ADDR(VDIN0_LCNT_STATUS)
+#define VDIN0_COM_STATUS0			((VDIN0_OFFSET << 2) + VDIN_COM_STATUS0)
+#define P_VDIN0_COM_STATUS0			VCBUS_REG_ADDR(VDIN0_COM_STATUS0)
+#define VDIN0_COM_STATUS1			((VDIN0_OFFSET << 2) + VDIN_COM_STATUS1)
+#define P_VDIN0_COM_STATUS1			VCBUS_REG_ADDR(VDIN0_COM_STATUS1)
+#define VDIN0_LCNT_SHADOW_STATUS		((VDIN0_OFFSET << 2) + VDIN_LCNT_SHADOW_STATUS)
+#define P_VDIN0_LCNT_SHADOW_STATUS		VCBUS_REG_ADDR(VDIN0_LCNT_SHADOW_STATUS)
+#define VDIN0_ASFIFO_CTRL0			((VDIN0_OFFSET << 2) + VDIN_ASFIFO_CTRL0)
+#define P_VDIN0_ASFIFO_CTRL0			VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL0)
+#define VDIN0_ASFIFO_CTRL1			((VDIN0_OFFSET << 2) + VDIN_ASFIFO_CTRL1)
+#define P_VDIN0_ASFIFO_CTRL1			VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL1)
+#define VDIN0_WIDTHM1I_WIDTHM1O			((VDIN0_OFFSET << 2) + VDIN_WIDTHM1I_WIDTHM1O)
+#define P_VDIN0_WIDTHM1I_WIDTHM1O		VCBUS_REG_ADDR(VDIN0_WIDTHM1I_WIDTHM1O)
+#define VDIN0_SC_MISC_CTRL			((VDIN0_OFFSET << 2) + VDIN_SC_MISC_CTRL)
+#define P_VDIN0_SC_MISC_CTRL			VCBUS_REG_ADDR(VDIN0_SC_MISC_CTRL)
+#define VDIN0_HSC_PHASE_STEP			((VDIN0_OFFSET << 2) + VDIN_HSC_PHASE_STEP)
+#define P_VDIN0_HSC_PHASE_STEP			VCBUS_REG_ADDR(VDIN0_HSC_PHASE_STEP)
+#define VDIN0_HSC_INI_CTRL			((VDIN0_OFFSET << 2) + VDIN_HSC_INI_CTRL)
+#define P_VDIN0_HSC_INI_CTRL			VCBUS_REG_ADDR(VDIN0_HSC_INI_CTRL)
+#define VDIN0_COM_STATUS2			((VDIN0_OFFSET << 2) + VDIN_COM_STATUS2)
+#define P_VDIN0_COM_STATUS2			VCBUS_REG_ADDR(VDIN0_COM_STATUS2)
+#define VDIN0_ASFIFO_CTRL2			((VDIN0_OFFSET << 2) + VDIN_ASFIFO_CTRL2)
+#define P_VDIN0_ASFIFO_CTRL2			VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL2)
+#define VDIN0_MATRIX_CTRL			((VDIN0_OFFSET << 2) + VDIN_MATRIX_CTRL)
+#define P_VDIN0_MATRIX_CTRL			VCBUS_REG_ADDR(VDIN0_MATRIX_CTRL)
+#define VDIN0_MATRIX_COEF00_01			((VDIN0_OFFSET << 2) + VDIN_MATRIX_COEF00_01)
+#define P_VDIN0_MATRIX_COEF00_01		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF00_01)
+#define VDIN0_MATRIX_COEF02_10			((VDIN0_OFFSET << 2) + VDIN_MATRIX_COEF02_10)
+#define P_VDIN0_MATRIX_COEF02_10		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF02_10)
+#define VDIN0_MATRIX_COEF11_12			((VDIN0_OFFSET << 2) + VDIN_MATRIX_COEF11_12)
+#define P_VDIN0_MATRIX_COEF11_12		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF11_12)
+#define VDIN0_MATRIX_COEF20_21			((VDIN0_OFFSET << 2) + VDIN_MATRIX_COEF20_21)
+#define P_VDIN0_MATRIX_COEF20_21		VCBUS_REG_ADDR(VDIN0_MATRIX_COEF20_21)
+#define VDIN0_MATRIX_COEF22			((VDIN0_OFFSET << 2) + VDIN_MATRIX_COEF22)
+#define P_VDIN0_MATRIX_COEF22			VCBUS_REG_ADDR(VDIN0_MATRIX_COEF22)
+#define VDIN0_MATRIX_OFFSET0_1			((VDIN0_OFFSET << 2) + VDIN_MATRIX_OFFSET0_1)
+#define P_VDIN0_MATRIX_OFFSET0_1		VCBUS_REG_ADDR(VDIN0_MATRIX_OFFSET0_1)
+#define VDIN0_MATRIX_OFFSET2			((VDIN0_OFFSET << 2) + VDIN_MATRIX_OFFSET2)
+#define P_VDIN0_MATRIX_OFFSET2			VCBUS_REG_ADDR(VDIN0_MATRIX_OFFSET2)
+#define VDIN0_MATRIX_PRE_OFFSET0_1		((VDIN0_OFFSET << 2) + VDIN_MATRIX_PRE_OFFSET0_1)
+#define P_VDIN0_MATRIX_PRE_OFFSET0_1		VCBUS_REG_ADDR(VDIN0_MATRIX_PRE_OFFSET0_1)
+#define VDIN0_MATRIX_PRE_OFFSET2		((VDIN0_OFFSET << 2) + VDIN_MATRIX_PRE_OFFSET2)
+#define P_VDIN0_MATRIX_PRE_OFFSET2		VCBUS_REG_ADDR(VDIN0_MATRIX_PRE_OFFSET2)
+#define VDIN0_LFIFO_CTRL			((VDIN0_OFFSET << 2) + VDIN_LFIFO_CTRL)
+#define P_VDIN0_LFIFO_CTRL			VCBUS_REG_ADDR(VDIN0_LFIFO_CTRL)
+#define VDIN0_COM_GCLK_CTRL			((VDIN0_OFFSET << 2) + VDIN_COM_GCLK_CTRL)
+#define P_VDIN0_COM_GCLK_CTRL			VCBUS_REG_ADDR(VDIN0_COM_GCLK_CTRL)
+#define VDIN0_INTF_WIDTHM1			((VDIN0_OFFSET << 2) + VDIN_INTF_WIDTHM1)
+#define P_VDIN0_INTF_WIDTHM1			VCBUS_REG_ADDR(VDIN0_INTF_WIDTHM1)
+#define VDIN0_WR_CTRL2				((VDIN0_OFFSET << 2) + VDIN_WR_CTRL2)
+#define P_VDIN0_WR_CTRL2			VCBUS_REG_ADDR(VDIN0_WR_CTRL2)
+#define VDIN0_WR_CTRL				((VDIN0_OFFSET << 2) + VDIN_WR_CTRL)
+#define P_VDIN0_WR_CTRL				VCBUS_REG_ADDR(VDIN0_WR_CTRL)
+#define VDIN0_WR_H_START_END			((VDIN0_OFFSET << 2) + VDIN_WR_H_START_END)
+#define P_VDIN0_WR_H_START_END			VCBUS_REG_ADDR(VDIN0_WR_H_START_END)
+#define VDIN0_WR_V_START_END			((VDIN0_OFFSET << 2) + VDIN_WR_V_START_END)
+#define P_VDIN0_WR_V_START_END			VCBUS_REG_ADDR(VDIN0_WR_V_START_END)
+#define VDIN0_VSC_PHASE_STEP			((VDIN0_OFFSET << 2) + VDIN_VSC_PHASE_STEP)
+#define P_VDIN0_VSC_PHASE_STEP			VCBUS_REG_ADDR(VDIN0_VSC_PHASE_STEP)
+#define VDIN0_VSC_INI_CTRL			((VDIN0_OFFSET << 2) + VDIN_VSC_INI_CTRL)
+#define P_VDIN0_VSC_INI_CTRL			VCBUS_REG_ADDR(VDIN0_VSC_INI_CTRL)
+#define VDIN0_SCIN_HEIGHTM1			((VDIN0_OFFSET << 2) + VDIN_SCIN_HEIGHTM1)
+#define P_VDIN0_SCIN_HEIGHTM1			VCBUS_REG_ADDR(VDIN0_SCIN_HEIGHTM1)
+#define VDIN0_DUMMY_DATA			((VDIN0_OFFSET << 2) + VDIN_DUMMY_DATA)
+#define P_VDIN0_DUMMY_DATA			VCBUS_REG_ADDR(VDIN0_DUMMY_DATA)
+#define VDIN0_MATRIX_PROBE_COLOR		((VDIN0_OFFSET << 2) + VDIN_MATRIX_PROBE_COLOR)
+#define P_VDIN0_MATRIX_PROBE_COLOR		VCBUS_REG_ADDR(VDIN0_MATRIX_PROBE_COLOR)
+#define VDIN0_MATRIX_HL_COLOR			((VDIN0_OFFSET << 2) + VDIN_MATRIX_HL_COLOR)
+#define P_VDIN0_MATRIX_HL_COLOR			VCBUS_REG_ADDR(VDIN0_MATRIX_HL_COLOR)
+#define VDIN0_MATRIX_PROBE_POS			((VDIN0_OFFSET << 2) + VDIN_MATRIX_PROBE_POS)
+#define P_VDIN0_MATRIX_PROBE_POS		VCBUS_REG_ADDR(VDIN0_MATRIX_PROBE_POS)
+#define VDIN0_CHROMA_ADDR_PORT			((VDIN0_OFFSET << 2) + VDIN_CHROMA_ADDR_PORT)
+#define P_VDIN0_CHROMA_ADDR_PORT		VCBUS_REG_ADDR(VDIN0_CHROMA_ADDR_PORT)
+#define VDIN0_CHROMA_DATA_PORT			((VDIN0_OFFSET << 2) + VDIN_CHROMA_DATA_PORT)
+#define P_VDIN0_CHROMA_DATA_PORT		VCBUS_REG_ADDR(VDIN0_CHROMA_DATA_PORT)
+#define VDIN0_CM_BRI_CON_CTRL			((VDIN0_OFFSET << 2) + VDIN_CM_BRI_CON_CTRL)
+#define P_VDIN0_CM_BRI_CON_CTRL			VCBUS_REG_ADDR(VDIN0_CM_BRI_CON_CTRL)
+#define VDIN0_HIST_CTRL				((VDIN0_OFFSET << 2) + VDIN_HIST_CTRL)
+#define P_VDIN0_HIST_CTRL			VCBUS_REG_ADDR(VDIN0_HIST_CTRL)
+#define VDIN0_HIST_H_START_END			((VDIN0_OFFSET << 2) + VDIN_HIST_H_START_END)
+#define P_VDIN0_HIST_H_START_END		VCBUS_REG_ADDR(VDIN0_HIST_H_START_END)
+#define VDIN0_HIST_V_START_END			((VDIN0_OFFSET << 2) + VDIN_HIST_V_START_END)
+#define P_VDIN0_HIST_V_START_END		VCBUS_REG_ADDR(VDIN0_HIST_V_START_END)
+#define VDIN0_HIST_MAX_MIN			((VDIN0_OFFSET << 2) + VDIN_HIST_MAX_MIN)
+#define P_VDIN0_HIST_MAX_MIN			VCBUS_REG_ADDR(VDIN0_HIST_MAX_MIN)
+#define VDIN0_HIST_SPL_VAL			((VDIN0_OFFSET << 2) + VDIN_HIST_SPL_VAL)
+#define P_VDIN0_HIST_SPL_VAL			VCBUS_REG_ADDR(VDIN0_HIST_SPL_VAL)
+#define VDIN0_HIST_SPL_PIX_CNT			((VDIN0_OFFSET << 2) + VDIN_HIST_SPL_PIX_CNT)
+#define P_VDIN0_HIST_SPL_PIX_CNT		VCBUS_REG_ADDR(VDIN0_HIST_SPL_PIX_CNT)
+#define VDIN0_HIST_CHROMA_SUM			((VDIN0_OFFSET << 2) + VDIN_HIST_CHROMA_SUM)
+#define P_VDIN0_HIST_CHROMA_SUM			VCBUS_REG_ADDR(VDIN0_HIST_CHROMA_SUM)
+#define VDIN0_DNLP_HIST00			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST00)
+#define P_VDIN0_DNLP_HIST00			VCBUS_REG_ADDR(VDIN0_DNLP_HIST00)
+#define VDIN0_DNLP_HIST01			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST01)
+#define P_VDIN0_DNLP_HIST01			VCBUS_REG_ADDR(VDIN0_DNLP_HIST01)
+#define VDIN0_DNLP_HIST02			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST02)
+#define P_VDIN0_DNLP_HIST02			VCBUS_REG_ADDR(VDIN0_DNLP_HIST02)
+#define VDIN0_DNLP_HIST03			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST03)
+#define P_VDIN0_DNLP_HIST03			VCBUS_REG_ADDR(VDIN0_DNLP_HIST03)
+#define VDIN0_DNLP_HIST04			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST04)
+#define P_VDIN0_DNLP_HIST04			VCBUS_REG_ADDR(VDIN0_DNLP_HIST04)
+#define VDIN0_DNLP_HIST05			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST05)
+#define P_VDIN0_DNLP_HIST05			VCBUS_REG_ADDR(VDIN0_DNLP_HIST05)
+#define VDIN0_DNLP_HIST06			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST06)
+#define P_VDIN0_DNLP_HIST06			VCBUS_REG_ADDR(VDIN0_DNLP_HIST06)
+#define VDIN0_DNLP_HIST07			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST07)
+#define P_VDIN0_DNLP_HIST07			VCBUS_REG_ADDR(VDIN0_DNLP_HIST07)
+#define VDIN0_DNLP_HIST08			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST08)
+#define P_VDIN0_DNLP_HIST08			VCBUS_REG_ADDR(VDIN0_DNLP_HIST08)
+#define VDIN0_DNLP_HIST09			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST09)
+#define P_VDIN0_DNLP_HIST09			VCBUS_REG_ADDR(VDIN0_DNLP_HIST09)
+#define VDIN0_DNLP_HIST10			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST10)
+#define P_VDIN0_DNLP_HIST10			VCBUS_REG_ADDR(VDIN0_DNLP_HIST10)
+#define VDIN0_DNLP_HIST11			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST11)
+#define P_VDIN0_DNLP_HIST11			VCBUS_REG_ADDR(VDIN0_DNLP_HIST11)
+#define VDIN0_DNLP_HIST12			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST12)
+#define P_VDIN0_DNLP_HIST12			VCBUS_REG_ADDR(VDIN0_DNLP_HIST12)
+#define VDIN0_DNLP_HIST13			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST13)
+#define P_VDIN0_DNLP_HIST13			VCBUS_REG_ADDR(VDIN0_DNLP_HIST13)
+#define VDIN0_DNLP_HIST14			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST14)
+#define P_VDIN0_DNLP_HIST14			VCBUS_REG_ADDR(VDIN0_DNLP_HIST14)
+#define VDIN0_DNLP_HIST15			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST15)
+#define P_VDIN0_DNLP_HIST15			VCBUS_REG_ADDR(VDIN0_DNLP_HIST15)
+#define VDIN0_DNLP_HIST16			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST16)
+#define P_VDIN0_DNLP_HIST16			VCBUS_REG_ADDR(VDIN0_DNLP_HIST16)
+#define VDIN0_DNLP_HIST17			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST17)
+#define P_VDIN0_DNLP_HIST17			VCBUS_REG_ADDR(VDIN0_DNLP_HIST17)
+#define VDIN0_DNLP_HIST18			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST18)
+#define P_VDIN0_DNLP_HIST18			VCBUS_REG_ADDR(VDIN0_DNLP_HIST18)
+#define VDIN0_DNLP_HIST19			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST19)
+#define P_VDIN0_DNLP_HIST19			VCBUS_REG_ADDR(VDIN0_DNLP_HIST19)
+#define VDIN0_DNLP_HIST20			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST20)
+#define P_VDIN0_DNLP_HIST20			VCBUS_REG_ADDR(VDIN0_DNLP_HIST20)
+#define VDIN0_DNLP_HIST21			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST21)
+#define P_VDIN0_DNLP_HIST21			VCBUS_REG_ADDR(VDIN0_DNLP_HIST21)
+#define VDIN0_DNLP_HIST22			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST22)
+#define P_VDIN0_DNLP_HIST22			VCBUS_REG_ADDR(VDIN0_DNLP_HIST22)
+#define VDIN0_DNLP_HIST23			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST23)
+#define P_VDIN0_DNLP_HIST23			VCBUS_REG_ADDR(VDIN0_DNLP_HIST23)
+#define VDIN0_DNLP_HIST24			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST24)
+#define P_VDIN0_DNLP_HIST24			VCBUS_REG_ADDR(VDIN0_DNLP_HIST24)
+#define VDIN0_DNLP_HIST25			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST25)
+#define P_VDIN0_DNLP_HIST25			VCBUS_REG_ADDR(VDIN0_DNLP_HIST25)
+#define VDIN0_DNLP_HIST26			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST26)
+#define P_VDIN0_DNLP_HIST26			VCBUS_REG_ADDR(VDIN0_DNLP_HIST26)
+#define VDIN0_DNLP_HIST27			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST27)
+#define P_VDIN0_DNLP_HIST27			VCBUS_REG_ADDR(VDIN0_DNLP_HIST27)
+#define VDIN0_DNLP_HIST28			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST28)
+#define P_VDIN0_DNLP_HIST28			VCBUS_REG_ADDR(VDIN0_DNLP_HIST28)
+#define VDIN0_DNLP_HIST29			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST29)
+#define P_VDIN0_DNLP_HIST29			VCBUS_REG_ADDR(VDIN0_DNLP_HIST29)
+#define VDIN0_DNLP_HIST30			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST30)
+#define P_VDIN0_DNLP_HIST30			VCBUS_REG_ADDR(VDIN0_DNLP_HIST30)
+#define VDIN0_DNLP_HIST31			((VDIN0_OFFSET << 2) + VDIN_DNLP_HIST31)
+#define P_VDIN0_DNLP_HIST31			VCBUS_REG_ADDR(VDIN0_DNLP_HIST31)
+#define VDIN0_LDIM_STTS_HIST_REGION_IDX		((VDIN0_OFFSET << 2) + VDIN_LDIM_STTS_HIST_REGION_IDX)
+#define P_VDIN0_LDIM_STTS_HIST_REGION_IDX	VCBUS_REG_ADDR(VDIN0_LDIM_STTS_HIST_REGION_IDX)
+#define VDIN0_LDIM_STTS_HIST_SET_REGION		((VDIN0_OFFSET << 2) + VDIN_LDIM_STTS_HIST_SET_REGION)
+#define P_VDIN0_LDIM_STTS_HIST_SET_REGION	VCBUS_REG_ADDR(VDIN0_LDIM_STTS_HIST_SET_REGION)
+#define VDIN0_LDIM_STTS_HIST_READ_REGION	((VDIN0_OFFSET << 2) + VDIN_LDIM_STTS_HIST_READ_REGION)
+#define P_VDIN0_LDIM_STTS_HIST_READ_REGION	VCBUS_REG_ADDR(VDIN0_LDIM_STTS_HIST_READ_REGION)
+#define VDIN0_MEAS_CTRL0			((VDIN0_OFFSET << 2) + VDIN_MEAS_CTRL0)
+#define P_VDIN0_MEAS_CTRL0			VCBUS_REG_ADDR(VDIN0_MEAS_CTRL0)
+#define VDIN0_MEAS_VS_COUNT_HI			((VDIN0_OFFSET << 2) + VDIN_MEAS_VS_COUNT_HI)
+#define P_VDIN0_MEAS_VS_COUNT_HI		VCBUS_REG_ADDR(VDIN0_MEAS_VS_COUNT_HI)
+#define VDIN0_MEAS_VS_COUNT_LO			((VDIN0_OFFSET << 2) + VDIN_MEAS_VS_COUNT_LO)
+#define P_VDIN0_MEAS_VS_COUNT_LO		VCBUS_REG_ADDR(VDIN0_MEAS_VS_COUNT_LO)
+#define VDIN0_MEAS_HS_RANGE			((VDIN0_OFFSET << 2) + VDIN_MEAS_HS_RANGE)
+#define P_VDIN0_MEAS_HS_RANGE			VCBUS_REG_ADDR(VDIN0_MEAS_HS_RANGE)
+#define VDIN0_MEAS_HS_COUNT			((VDIN0_OFFSET << 2) + VDIN_MEAS_HS_COUNT)
+#define P_VDIN0_MEAS_HS_COUNT			VCBUS_REG_ADDR(VDIN0_MEAS_HS_COUNT)
+#define VDIN0_BLKBAR_CTRL1			((VDIN0_OFFSET << 2) + VDIN_BLKBAR_CTRL1)
+#define P_VDIN0_BLKBAR_CTRL1			VCBUS_REG_ADDR(VDIN0_BLKBAR_CTRL1)
+#define VDIN0_BLKBAR_CTRL0			((VDIN0_OFFSET << 2) + VDIN_BLKBAR_CTRL0)
+#define P_VDIN0_BLKBAR_CTRL0			VCBUS_REG_ADDR(VDIN0_BLKBAR_CTRL0)
+#define VDIN0_BLKBAR_H_START_END		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_H_START_END)
+#define P_VDIN0_BLKBAR_H_START_END		VCBUS_REG_ADDR(VDIN0_BLKBAR_H_START_END)
+#define VDIN0_BLKBAR_V_START_END		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_V_START_END)
+#define P_VDIN0_BLKBAR_V_START_END		VCBUS_REG_ADDR(VDIN0_BLKBAR_V_START_END)
+#define VDIN0_BLKBAR_CNT_THRESHOLD		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_CNT_THRESHOLD)
+#define P_VDIN0_BLKBAR_CNT_THRESHOLD		VCBUS_REG_ADDR(VDIN0_BLKBAR_CNT_THRESHOLD)
+#define VDIN0_BLKBAR_ROW_TH1_TH2		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_ROW_TH1_TH2)
+#define P_VDIN0_BLKBAR_ROW_TH1_TH2		VCBUS_REG_ADDR(VDIN0_BLKBAR_ROW_TH1_TH2)
+#define VDIN0_BLKBAR_IND_LEFT_START_END		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_IND_LEFT_START_END)
+#define P_VDIN0_BLKBAR_IND_LEFT_START_END	VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_LEFT_START_END)
+#define VDIN0_BLKBAR_IND_RIGHT_START_END	((VDIN0_OFFSET << 2) + VDIN_BLKBAR_IND_RIGHT_START_END)
+#define P_VDIN0_BLKBAR_IND_RIGHT_START_END	VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_RIGHT_START_END)
+#define VDIN0_BLKBAR_IND_LEFT1_CNT		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_IND_LEFT1_CNT)
+#define P_VDIN0_BLKBAR_IND_LEFT1_CNT		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_LEFT1_CNT)
+#define VDIN0_BLKBAR_IND_LEFT2_CNT		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_IND_LEFT2_CNT)
+#define P_VDIN0_BLKBAR_IND_LEFT2_CNT		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_LEFT2_CNT)
+#define VDIN0_BLKBAR_IND_RIGHT1_CNT		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_IND_RIGHT1_CNT)
+#define P_VDIN0_BLKBAR_IND_RIGHT1_CNT		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_RIGHT1_CNT)
+#define VDIN0_BLKBAR_IND_RIGHT2_CNT		((VDIN0_OFFSET << 2) + VDIN_BLKBAR_IND_RIGHT2_CNT)
+#define P_VDIN0_BLKBAR_IND_RIGHT2_CNT		VCBUS_REG_ADDR(VDIN0_BLKBAR_IND_RIGHT2_CNT)
+#define VDIN0_BLKBAR_STATUS0			((VDIN0_OFFSET << 2) + VDIN_BLKBAR_STATUS0)
+#define P_VDIN0_BLKBAR_STATUS0			VCBUS_REG_ADDR(VDIN0_BLKBAR_STATUS0)
+#define VDIN0_BLKBAR_STATUS1			((VDIN0_OFFSET << 2) + VDIN_BLKBAR_STATUS1)
+#define P_VDIN0_BLKBAR_STATUS1			VCBUS_REG_ADDR(VDIN0_BLKBAR_STATUS1)
+#define VDIN0_WIN_H_START_END			((VDIN0_OFFSET << 2) + VDIN_WIN_H_START_END)
+#define P_VDIN0_WIN_H_START_END			VCBUS_REG_ADDR(VDIN0_WIN_H_START_END)
+#define VDIN0_WIN_V_START_END			((VDIN0_OFFSET << 2) + VDIN_WIN_V_START_END)
+#define P_VDIN0_WIN_V_START_END			VCBUS_REG_ADDR(VDIN0_WIN_V_START_END)
+#define VDIN0_ASFIFO_CTRL3			((VDIN0_OFFSET << 2) + VDIN_ASFIFO_CTRL3)
+#define P_VDIN0_ASFIFO_CTRL3			VCBUS_REG_ADDR(VDIN0_ASFIFO_CTRL3)
+#define VDIN1_SCALE_COEF_IDX			((VDIN1_OFFSET << 2) + VDIN_SCALE_COEF_IDX)
+#define P_VDIN1_SCALE_COEF_IDX			VCBUS_REG_ADDR(VDIN1_SCALE_COEF_IDX)
+#define VDIN1_SCALE_COEF			((VDIN1_OFFSET << 2) + VDIN_SCALE_COEF)
+#define P_VDIN1_SCALE_COEF			VCBUS_REG_ADDR(VDIN1_SCALE_COEF)
+#define VDIN1_COM_CTRL0				((VDIN1_OFFSET << 2) + VDIN_COM_CTRL0)
+#define P_VDIN1_COM_CTRL0			VCBUS_REG_ADDR(VDIN1_COM_CTRL0)
+#define VDIN1_ACTIVE_MAX_PIX_CNT_STATUS		((VDIN1_OFFSET << 2) + VDIN_ACTIVE_MAX_PIX_CNT_STATUS)
+#define P_VDIN1_ACTIVE_MAX_PIX_CNT_STATUS	VCBUS_REG_ADDR(VDIN1_ACTIVE_MAX_PIX_CNT_STATUS)
+#define VDIN1_LCNT_STATUS			((VDIN1_OFFSET << 2) + VDIN_LCNT_STATUS)
+#define P_VDIN1_LCNT_STATUS			VCBUS_REG_ADDR(VDIN1_LCNT_STATUS)
+#define VDIN1_COM_STATUS0			((VDIN1_OFFSET << 2) + VDIN_COM_STATUS0)
+#define P_VDIN1_COM_STATUS0			VCBUS_REG_ADDR(VDIN1_COM_STATUS0)
+#define VDIN1_COM_STATUS1			((VDIN1_OFFSET << 2) + VDIN_COM_STATUS1)
+#define P_VDIN1_COM_STATUS1			VCBUS_REG_ADDR(VDIN1_COM_STATUS1)
+#define VDIN1_LCNT_SHADOW_STATUS		((VDIN1_OFFSET << 2) + VDIN_LCNT_SHADOW_STATUS)
+#define P_VDIN1_LCNT_SHADOW_STATUS		VCBUS_REG_ADDR(VDIN1_LCNT_SHADOW_STATUS)
+#define VDIN1_ASFIFO_CTRL0			((VDIN1_OFFSET << 2) + VDIN_ASFIFO_CTRL0)
+#define P_VDIN1_ASFIFO_CTRL0			VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL0)
+#define VDIN1_ASFIFO_CTRL1			((VDIN1_OFFSET << 2) + VDIN_ASFIFO_CTRL1)
+#define P_VDIN1_ASFIFO_CTRL1			VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL1)
+#define VDIN1_WIDTHM1I_WIDTHM1O			((VDIN1_OFFSET << 2) + VDIN_WIDTHM1I_WIDTHM1O)
+#define P_VDIN1_WIDTHM1I_WIDTHM1O		VCBUS_REG_ADDR(VDIN1_WIDTHM1I_WIDTHM1O)
+#define VDIN1_SC_MISC_CTRL			((VDIN1_OFFSET << 2) + VDIN_SC_MISC_CTRL)
+#define P_VDIN1_SC_MISC_CTRL			VCBUS_REG_ADDR(VDIN1_SC_MISC_CTRL)
+#define VDIN1_HSC_PHASE_STEP			((VDIN1_OFFSET << 2) + VDIN_HSC_PHASE_STEP)
+#define P_VDIN1_HSC_PHASE_STEP			VCBUS_REG_ADDR(VDIN1_HSC_PHASE_STEP)
+#define VDIN1_HSC_INI_CTRL			((VDIN1_OFFSET << 2) + VDIN_HSC_INI_CTRL)
+#define P_VDIN1_HSC_INI_CTRL			VCBUS_REG_ADDR(VDIN1_HSC_INI_CTRL)
+#define VDIN1_COM_STATUS2			((VDIN1_OFFSET << 2) + VDIN_COM_STATUS2)
+#define P_VDIN1_COM_STATUS2			VCBUS_REG_ADDR(VDIN1_COM_STATUS2)
+#define VDIN1_ASFIFO_CTRL2			((VDIN1_OFFSET << 2) + VDIN_ASFIFO_CTRL2)
+#define P_VDIN1_ASFIFO_CTRL2			VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL2)
+#define VDIN1_MATRIX_CTRL			((VDIN1_OFFSET << 2) + VDIN_MATRIX_CTRL)
+#define P_VDIN1_MATRIX_CTRL			VCBUS_REG_ADDR(VDIN1_MATRIX_CTRL)
+#define VDIN1_MATRIX_COEF00_01			((VDIN1_OFFSET << 2) + VDIN_MATRIX_COEF00_01)
+#define P_VDIN1_MATRIX_COEF00_01		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF00_01)
+#define VDIN1_MATRIX_COEF02_10			((VDIN1_OFFSET << 2) + VDIN_MATRIX_COEF02_10)
+#define P_VDIN1_MATRIX_COEF02_10		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF02_10)
+#define VDIN1_MATRIX_COEF11_12			((VDIN1_OFFSET << 2) + VDIN_MATRIX_COEF11_12)
+#define P_VDIN1_MATRIX_COEF11_12		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF11_12)
+#define VDIN1_MATRIX_COEF20_21			((VDIN1_OFFSET << 2) + VDIN_MATRIX_COEF20_21)
+#define P_VDIN1_MATRIX_COEF20_21		VCBUS_REG_ADDR(VDIN1_MATRIX_COEF20_21)
+#define VDIN1_MATRIX_COEF22			((VDIN1_OFFSET << 2) + VDIN_MATRIX_COEF22)
+#define P_VDIN1_MATRIX_COEF22			VCBUS_REG_ADDR(VDIN1_MATRIX_COEF22)
+#define VDIN1_MATRIX_OFFSET0_1			((VDIN1_OFFSET << 2) + VDIN_MATRIX_OFFSET0_1)
+#define P_VDIN1_MATRIX_OFFSET0_1		VCBUS_REG_ADDR(VDIN1_MATRIX_OFFSET0_1)
+#define VDIN1_MATRIX_OFFSET2			((VDIN1_OFFSET << 2) + VDIN_MATRIX_OFFSET2)
+#define P_VDIN1_MATRIX_OFFSET2			VCBUS_REG_ADDR(VDIN1_MATRIX_OFFSET2)
+#define VDIN1_MATRIX_PRE_OFFSET0_1		((VDIN1_OFFSET << 2) + VDIN_MATRIX_PRE_OFFSET0_1)
+#define P_VDIN1_MATRIX_PRE_OFFSET0_1		VCBUS_REG_ADDR(VDIN1_MATRIX_PRE_OFFSET0_1)
+#define VDIN1_MATRIX_PRE_OFFSET2		((VDIN1_OFFSET << 2) + VDIN_MATRIX_PRE_OFFSET2)
+#define P_VDIN1_MATRIX_PRE_OFFSET2		VCBUS_REG_ADDR(VDIN1_MATRIX_PRE_OFFSET2)
+#define VDIN1_LFIFO_CTRL			((VDIN1_OFFSET << 2) + VDIN_LFIFO_CTRL)
+#define P_VDIN1_LFIFO_CTRL			VCBUS_REG_ADDR(VDIN1_LFIFO_CTRL)
+#define VDIN1_COM_GCLK_CTRL			((VDIN1_OFFSET << 2) + VDIN_COM_GCLK_CTRL)
+#define P_VDIN1_COM_GCLK_CTRL			VCBUS_REG_ADDR(VDIN1_COM_GCLK_CTRL)
+#define VDIN1_INTF_WIDTHM1			((VDIN1_OFFSET << 2) + VDIN_INTF_WIDTHM1)
+#define P_VDIN1_INTF_WIDTHM1			VCBUS_REG_ADDR(VDIN1_INTF_WIDTHM1)
+#define VDIN1_WR_CTRL2				((VDIN1_OFFSET << 2) + VDIN_WR_CTRL2)
+#define P_VDIN1_WR_CTRL2			VCBUS_REG_ADDR(VDIN1_WR_CTRL2)
+#define VDIN1_WR_CTRL				((VDIN1_OFFSET << 2) + VDIN_WR_CTRL)
+#define P_VDIN1_WR_CTRL				VCBUS_REG_ADDR(VDIN1_WR_CTRL)
+#define VDIN1_WR_H_START_END			((VDIN1_OFFSET << 2) + VDIN_WR_H_START_END)
+#define P_VDIN1_WR_H_START_END			VCBUS_REG_ADDR(VDIN1_WR_H_START_END)
+#define VDIN1_WR_V_START_END			((VDIN1_OFFSET << 2) + VDIN_WR_V_START_END)
+#define P_VDIN1_WR_V_START_END			VCBUS_REG_ADDR(VDIN1_WR_V_START_END)
+#define VDIN1_VSC_PHASE_STEP			((VDIN1_OFFSET << 2) + VDIN_VSC_PHASE_STEP)
+#define P_VDIN1_VSC_PHASE_STEP			VCBUS_REG_ADDR(VDIN1_VSC_PHASE_STEP)
+#define VDIN1_VSC_INI_CTRL			((VDIN1_OFFSET << 2) + VDIN_VSC_INI_CTRL)
+#define P_VDIN1_VSC_INI_CTRL			VCBUS_REG_ADDR(VDIN1_VSC_INI_CTRL)
+#define VDIN1_SCIN_HEIGHTM1			((VDIN1_OFFSET << 2) + VDIN_SCIN_HEIGHTM1)
+#define P_VDIN1_SCIN_HEIGHTM1			VCBUS_REG_ADDR(VDIN1_SCIN_HEIGHTM1)
+#define VDIN1_DUMMY_DATA			((VDIN1_OFFSET << 2) + VDIN_DUMMY_DATA)
+#define P_VDIN1_DUMMY_DATA			VCBUS_REG_ADDR(VDIN1_DUMMY_DATA)
+#define VDIN1_MATRIX_PROBE_COLOR		((VDIN1_OFFSET << 2) + VDIN_MATRIX_PROBE_COLOR)
+#define P_VDIN1_MATRIX_PROBE_COLOR		VCBUS_REG_ADDR(VDIN1_MATRIX_PROBE_COLOR)
+#define VDIN1_MATRIX_HL_COLOR			((VDIN1_OFFSET << 2) + VDIN_MATRIX_HL_COLOR)
+#define P_VDIN1_MATRIX_HL_COLOR			VCBUS_REG_ADDR(VDIN1_MATRIX_HL_COLOR)
+#define VDIN1_MATRIX_PROBE_POS			((VDIN1_OFFSET << 2) + VDIN_MATRIX_PROBE_POS)
+#define P_VDIN1_MATRIX_PROBE_POS		VCBUS_REG_ADDR(VDIN1_MATRIX_PROBE_POS)
+#define VDIN1_CHROMA_ADDR_PORT			((VDIN1_OFFSET << 2) + VDIN_CHROMA_ADDR_PORT)
+#define P_VDIN1_CHROMA_ADDR_PORT		VCBUS_REG_ADDR(VDIN1_CHROMA_ADDR_PORT)
+#define VDIN1_CHROMA_DATA_PORT			((VDIN1_OFFSET << 2) + VDIN_CHROMA_DATA_PORT)
+#define P_VDIN1_CHROMA_DATA_PORT		VCBUS_REG_ADDR(VDIN1_CHROMA_DATA_PORT)
+#define VDIN1_CM_BRI_CON_CTRL			((VDIN1_OFFSET << 2) + VDIN_CM_BRI_CON_CTRL)
+#define P_VDIN1_CM_BRI_CON_CTRL			VCBUS_REG_ADDR(VDIN1_CM_BRI_CON_CTRL)
+#define VDIN1_HIST_CTRL				((VDIN1_OFFSET << 2) + VDIN_HIST_CTRL)
+#define P_VDIN1_HIST_CTRL			VCBUS_REG_ADDR(VDIN1_HIST_CTRL)
+#define VDIN1_HIST_H_START_END			((VDIN1_OFFSET << 2) + VDIN_HIST_H_START_END)
+#define P_VDIN1_HIST_H_START_END		VCBUS_REG_ADDR(VDIN1_HIST_H_START_END)
+#define VDIN1_HIST_V_START_END			((VDIN1_OFFSET << 2) + VDIN_HIST_V_START_END)
+#define P_VDIN1_HIST_V_START_END		VCBUS_REG_ADDR(VDIN1_HIST_V_START_END)
+#define VDIN1_HIST_MAX_MIN			((VDIN1_OFFSET << 2) + VDIN_HIST_MAX_MIN)
+#define P_VDIN1_HIST_MAX_MIN			VCBUS_REG_ADDR(VDIN1_HIST_MAX_MIN)
+#define VDIN1_HIST_SPL_VAL			((VDIN1_OFFSET << 2) + VDIN_HIST_SPL_VAL)
+#define P_VDIN1_HIST_SPL_VAL			VCBUS_REG_ADDR(VDIN1_HIST_SPL_VAL)
+#define VDIN1_HIST_SPL_PIX_CNT			((VDIN1_OFFSET << 2) + VDIN_HIST_SPL_PIX_CNT)
+#define P_VDIN1_HIST_SPL_PIX_CNT		VCBUS_REG_ADDR(VDIN1_HIST_SPL_PIX_CNT)
+#define VDIN1_HIST_CHROMA_SUM			((VDIN1_OFFSET << 2) + VDIN_HIST_CHROMA_SUM)
+#define P_VDIN1_HIST_CHROMA_SUM			VCBUS_REG_ADDR(VDIN1_HIST_CHROMA_SUM)
+#define VDIN1_DNLP_HIST00			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST00)
+#define P_VDIN1_DNLP_HIST00			VCBUS_REG_ADDR(VDIN1_DNLP_HIST00)
+#define VDIN1_DNLP_HIST01			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST01)
+#define P_VDIN1_DNLP_HIST01			VCBUS_REG_ADDR(VDIN1_DNLP_HIST01)
+#define VDIN1_DNLP_HIST02			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST02)
+#define P_VDIN1_DNLP_HIST02			VCBUS_REG_ADDR(VDIN1_DNLP_HIST02)
+#define VDIN1_DNLP_HIST03			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST03)
+#define P_VDIN1_DNLP_HIST03			VCBUS_REG_ADDR(VDIN1_DNLP_HIST03)
+#define VDIN1_DNLP_HIST04			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST04)
+#define P_VDIN1_DNLP_HIST04			VCBUS_REG_ADDR(VDIN1_DNLP_HIST04)
+#define VDIN1_DNLP_HIST05			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST05)
+#define P_VDIN1_DNLP_HIST05			VCBUS_REG_ADDR(VDIN1_DNLP_HIST05)
+#define VDIN1_DNLP_HIST06			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST06)
+#define P_VDIN1_DNLP_HIST06			VCBUS_REG_ADDR(VDIN1_DNLP_HIST06)
+#define VDIN1_DNLP_HIST07			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST07)
+#define P_VDIN1_DNLP_HIST07			VCBUS_REG_ADDR(VDIN1_DNLP_HIST07)
+#define VDIN1_DNLP_HIST08			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST08)
+#define P_VDIN1_DNLP_HIST08			VCBUS_REG_ADDR(VDIN1_DNLP_HIST08)
+#define VDIN1_DNLP_HIST09			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST09)
+#define P_VDIN1_DNLP_HIST09			VCBUS_REG_ADDR(VDIN1_DNLP_HIST09)
+#define VDIN1_DNLP_HIST10			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST10)
+#define P_VDIN1_DNLP_HIST10			VCBUS_REG_ADDR(VDIN1_DNLP_HIST10)
+#define VDIN1_DNLP_HIST11			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST11)
+#define P_VDIN1_DNLP_HIST11			VCBUS_REG_ADDR(VDIN1_DNLP_HIST11)
+#define VDIN1_DNLP_HIST12			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST12)
+#define P_VDIN1_DNLP_HIST12			VCBUS_REG_ADDR(VDIN1_DNLP_HIST12)
+#define VDIN1_DNLP_HIST13			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST13)
+#define P_VDIN1_DNLP_HIST13			VCBUS_REG_ADDR(VDIN1_DNLP_HIST13)
+#define VDIN1_DNLP_HIST14			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST14)
+#define P_VDIN1_DNLP_HIST14			VCBUS_REG_ADDR(VDIN1_DNLP_HIST14)
+#define VDIN1_DNLP_HIST15			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST15)
+#define P_VDIN1_DNLP_HIST15			VCBUS_REG_ADDR(VDIN1_DNLP_HIST15)
+#define VDIN1_DNLP_HIST16			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST16)
+#define P_VDIN1_DNLP_HIST16			VCBUS_REG_ADDR(VDIN1_DNLP_HIST16)
+#define VDIN1_DNLP_HIST17			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST17)
+#define P_VDIN1_DNLP_HIST17			VCBUS_REG_ADDR(VDIN1_DNLP_HIST17)
+#define VDIN1_DNLP_HIST18			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST18)
+#define P_VDIN1_DNLP_HIST18			VCBUS_REG_ADDR(VDIN1_DNLP_HIST18)
+#define VDIN1_DNLP_HIST19			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST19)
+#define P_VDIN1_DNLP_HIST19			VCBUS_REG_ADDR(VDIN1_DNLP_HIST19)
+#define VDIN1_DNLP_HIST20			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST20)
+#define P_VDIN1_DNLP_HIST20			VCBUS_REG_ADDR(VDIN1_DNLP_HIST20)
+#define VDIN1_DNLP_HIST21			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST21)
+#define P_VDIN1_DNLP_HIST21			VCBUS_REG_ADDR(VDIN1_DNLP_HIST21)
+#define VDIN1_DNLP_HIST22			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST22)
+#define P_VDIN1_DNLP_HIST22			VCBUS_REG_ADDR(VDIN1_DNLP_HIST22)
+#define VDIN1_DNLP_HIST23			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST23)
+#define P_VDIN1_DNLP_HIST23			VCBUS_REG_ADDR(VDIN1_DNLP_HIST23)
+#define VDIN1_DNLP_HIST24			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST24)
+#define P_VDIN1_DNLP_HIST24			VCBUS_REG_ADDR(VDIN1_DNLP_HIST24)
+#define VDIN1_DNLP_HIST25			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST25)
+#define P_VDIN1_DNLP_HIST25			VCBUS_REG_ADDR(VDIN1_DNLP_HIST25)
+#define VDIN1_DNLP_HIST26			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST26)
+#define P_VDIN1_DNLP_HIST26			VCBUS_REG_ADDR(VDIN1_DNLP_HIST26)
+#define VDIN1_DNLP_HIST27			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST27)
+#define P_VDIN1_DNLP_HIST27			VCBUS_REG_ADDR(VDIN1_DNLP_HIST27)
+#define VDIN1_DNLP_HIST28			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST28)
+#define P_VDIN1_DNLP_HIST28			VCBUS_REG_ADDR(VDIN1_DNLP_HIST28)
+#define VDIN1_DNLP_HIST29			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST29)
+#define P_VDIN1_DNLP_HIST29			VCBUS_REG_ADDR(VDIN1_DNLP_HIST29)
+#define VDIN1_DNLP_HIST30			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST30)
+#define P_VDIN1_DNLP_HIST30			VCBUS_REG_ADDR(VDIN1_DNLP_HIST30)
+#define VDIN1_DNLP_HIST31			((VDIN1_OFFSET << 2) + VDIN_DNLP_HIST31)
+#define P_VDIN1_DNLP_HIST31			VCBUS_REG_ADDR(VDIN1_DNLP_HIST31)
+#define VDIN1_LDIM_STTS_HIST_REGION_IDX		((VDIN1_OFFSET << 2) + VDIN_LDIM_STTS_HIST_REGION_IDX)
+#define P_VDIN1_LDIM_STTS_HIST_REGION_IDX	VCBUS_REG_ADDR(VDIN1_LDIM_STTS_HIST_REGION_IDX)
+#define VDIN1_LDIM_STTS_HIST_SET_REGION		((VDIN1_OFFSET << 2) + VDIN_LDIM_STTS_HIST_SET_REGION)
+#define P_VDIN1_LDIM_STTS_HIST_SET_REGION	VCBUS_REG_ADDR(VDIN1_LDIM_STTS_HIST_SET_REGION)
+#define VDIN1_LDIM_STTS_HIST_READ_REGION	((VDIN1_OFFSET << 2) + VDIN_LDIM_STTS_HIST_READ_REGION)
+#define P_VDIN1_LDIM_STTS_HIST_READ_REGION	VCBUS_REG_ADDR(VDIN1_LDIM_STTS_HIST_READ_REGION)
+#define VDIN1_MEAS_CTRL0			((VDIN1_OFFSET << 2) + VDIN_MEAS_CTRL0)
+#define P_VDIN1_MEAS_CTRL0			VCBUS_REG_ADDR(VDIN1_MEAS_CTRL0)
+#define VDIN1_MEAS_VS_COUNT_HI			((VDIN1_OFFSET << 2) + VDIN_MEAS_VS_COUNT_HI)
+#define P_VDIN1_MEAS_VS_COUNT_HI		VCBUS_REG_ADDR(VDIN1_MEAS_VS_COUNT_HI)
+#define VDIN1_MEAS_VS_COUNT_LO			((VDIN1_OFFSET << 2) + VDIN_MEAS_VS_COUNT_LO)
+#define P_VDIN1_MEAS_VS_COUNT_LO		VCBUS_REG_ADDR(VDIN1_MEAS_VS_COUNT_LO)
+#define VDIN1_MEAS_HS_RANGE			((VDIN1_OFFSET << 2) + VDIN_MEAS_HS_RANGE)
+#define P_VDIN1_MEAS_HS_RANGE			VCBUS_REG_ADDR(VDIN1_MEAS_HS_RANGE)
+#define VDIN1_MEAS_HS_COUNT			((VDIN1_OFFSET << 2) + VDIN_MEAS_HS_COUNT)
+#define P_VDIN1_MEAS_HS_COUNT			VCBUS_REG_ADDR(VDIN1_MEAS_HS_COUNT)
+#define VDIN1_BLKBAR_CTRL1			((VDIN1_OFFSET << 2) + VDIN_BLKBAR_CTRL1)
+#define P_VDIN1_BLKBAR_CTRL1			VCBUS_REG_ADDR(VDIN1_BLKBAR_CTRL1)
+#define VDIN1_BLKBAR_CTRL0			((VDIN1_OFFSET << 2) + VDIN_BLKBAR_CTRL0)
+#define P_VDIN1_BLKBAR_CTRL0			VCBUS_REG_ADDR(VDIN1_BLKBAR_CTRL0)
+#define VDIN1_BLKBAR_H_START_END		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_H_START_END)
+#define P_VDIN1_BLKBAR_H_START_END		VCBUS_REG_ADDR(VDIN1_BLKBAR_H_START_END)
+#define VDIN1_BLKBAR_V_START_END		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_V_START_END)
+#define P_VDIN1_BLKBAR_V_START_END		VCBUS_REG_ADDR(VDIN1_BLKBAR_V_START_END)
+#define VDIN1_BLKBAR_CNT_THRESHOLD		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_CNT_THRESHOLD)
+#define P_VDIN1_BLKBAR_CNT_THRESHOLD		VCBUS_REG_ADDR(VDIN1_BLKBAR_CNT_THRESHOLD)
+#define VDIN1_BLKBAR_ROW_TH1_TH2		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_ROW_TH1_TH2)
+#define P_VDIN1_BLKBAR_ROW_TH1_TH2		VCBUS_REG_ADDR(VDIN1_BLKBAR_ROW_TH1_TH2)
+#define VDIN1_BLKBAR_IND_LEFT_START_END		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_IND_LEFT_START_END)
+#define P_VDIN1_BLKBAR_IND_LEFT_START_END	VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_LEFT_START_END)
+#define VDIN1_BLKBAR_IND_RIGHT_START_END	((VDIN1_OFFSET << 2) + VDIN_BLKBAR_IND_RIGHT_START_END)
+#define P_VDIN1_BLKBAR_IND_RIGHT_START_END	VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_RIGHT_START_END)
+#define VDIN1_BLKBAR_IND_LEFT1_CNT		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_IND_LEFT1_CNT)
+#define P_VDIN1_BLKBAR_IND_LEFT1_CNT		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_LEFT1_CNT)
+#define VDIN1_BLKBAR_IND_LEFT2_CNT		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_IND_LEFT2_CNT)
+#define P_VDIN1_BLKBAR_IND_LEFT2_CNT		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_LEFT2_CNT)
+#define VDIN1_BLKBAR_IND_RIGHT1_CNT		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_IND_RIGHT1_CNT)
+#define P_VDIN1_BLKBAR_IND_RIGHT1_CNT		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_RIGHT1_CNT)
+#define VDIN1_BLKBAR_IND_RIGHT2_CNT		((VDIN1_OFFSET << 2) + VDIN_BLKBAR_IND_RIGHT2_CNT)
+#define P_VDIN1_BLKBAR_IND_RIGHT2_CNT		VCBUS_REG_ADDR(VDIN1_BLKBAR_IND_RIGHT2_CNT)
+#define VDIN1_BLKBAR_STATUS0			((VDIN1_OFFSET << 2) + VDIN_BLKBAR_STATUS0)
+#define P_VDIN1_BLKBAR_STATUS0			VCBUS_REG_ADDR(VDIN1_BLKBAR_STATUS0)
+#define VDIN1_BLKBAR_STATUS1			((VDIN1_OFFSET << 2) + VDIN_BLKBAR_STATUS1)
+#define P_VDIN1_BLKBAR_STATUS1			VCBUS_REG_ADDR(VDIN1_BLKBAR_STATUS1)
+#define VDIN1_WIN_H_START_END			((VDIN1_OFFSET << 2) + VDIN_WIN_H_START_END)
+#define P_VDIN1_WIN_H_START_END			VCBUS_REG_ADDR(VDIN1_WIN_H_START_END)
+#define VDIN1_WIN_V_START_END			((VDIN1_OFFSET << 2) + VDIN_WIN_V_START_END)
+#define P_VDIN1_WIN_V_START_END			VCBUS_REG_ADDR(VDIN1_WIN_V_START_END)
+#define VDIN1_ASFIFO_CTRL3			((VDIN1_OFFSET << 2) + VDIN_ASFIFO_CTRL3)
+#define P_VDIN1_ASFIFO_CTRL3			VCBUS_REG_ADDR(VDIN1_ASFIFO_CTRL3)
+#define L_GAMMA_CNTL_PORT			0x1400
+#define P_L_GAMMA_CNTL_PORT			VCBUS_REG_ADDR(L_GAMMA_CNTL_PORT)
+#define L_GAMMA_DATA_PORT			0x1401
+#define P_L_GAMMA_DATA_PORT			VCBUS_REG_ADDR(L_GAMMA_DATA_PORT)
+#define L_GAMMA_ADDR_PORT			0x1402
+#define P_L_GAMMA_ADDR_PORT			VCBUS_REG_ADDR(L_GAMMA_ADDR_PORT)
+#define L_GAMMA_VCOM_HSWITCH_ADDR		0x1403
+#define P_L_GAMMA_VCOM_HSWITCH_ADDR		VCBUS_REG_ADDR(L_GAMMA_VCOM_HSWITCH_ADDR)
+#define L_RGB_BASE_ADDR				0x1405
+#define P_L_RGB_BASE_ADDR			VCBUS_REG_ADDR(L_RGB_BASE_ADDR)
+#define L_RGB_COEFF_ADDR			0x1406
+#define P_L_RGB_COEFF_ADDR			VCBUS_REG_ADDR(L_RGB_COEFF_ADDR)
+#define L_POL_CNTL_ADDR				0x1407
+#define P_L_POL_CNTL_ADDR			VCBUS_REG_ADDR(L_POL_CNTL_ADDR)
+#define L_DITH_CNTL_ADDR			0x1408
+#define P_L_DITH_CNTL_ADDR			VCBUS_REG_ADDR(L_DITH_CNTL_ADDR)
+#define L_GAMMA_PROBE_CTRL			0x1409
+#define P_L_GAMMA_PROBE_CTRL			VCBUS_REG_ADDR(L_GAMMA_PROBE_CTRL)
+#define L_GAMMA_PROBE_COLOR_L			0x140a
+#define P_L_GAMMA_PROBE_COLOR_L			VCBUS_REG_ADDR(L_GAMMA_PROBE_COLOR_L)
+#define L_GAMMA_PROBE_COLOR_H			0x140b
+#define P_L_GAMMA_PROBE_COLOR_H			VCBUS_REG_ADDR(L_GAMMA_PROBE_COLOR_H)
+#define L_GAMMA_PROBE_HL_COLOR			0x140c
+#define P_L_GAMMA_PROBE_HL_COLOR		VCBUS_REG_ADDR(L_GAMMA_PROBE_HL_COLOR)
+#define L_GAMMA_PROBE_POS_X			0x140d
+#define P_L_GAMMA_PROBE_POS_X			VCBUS_REG_ADDR(L_GAMMA_PROBE_POS_X)
+#define L_GAMMA_PROBE_POS_Y			0x140e
+#define P_L_GAMMA_PROBE_POS_Y			VCBUS_REG_ADDR(L_GAMMA_PROBE_POS_Y)
+#define L_STH1_HS_ADDR				0x1410
+#define P_L_STH1_HS_ADDR			VCBUS_REG_ADDR(L_STH1_HS_ADDR)
+#define L_STH1_HE_ADDR				0x1411
+#define P_L_STH1_HE_ADDR			VCBUS_REG_ADDR(L_STH1_HE_ADDR)
+#define L_STH1_VS_ADDR				0x1412
+#define P_L_STH1_VS_ADDR			VCBUS_REG_ADDR(L_STH1_VS_ADDR)
+#define L_STH1_VE_ADDR				0x1413
+#define P_L_STH1_VE_ADDR			VCBUS_REG_ADDR(L_STH1_VE_ADDR)
+#define L_STH2_HS_ADDR				0x1414
+#define P_L_STH2_HS_ADDR			VCBUS_REG_ADDR(L_STH2_HS_ADDR)
+#define L_STH2_HE_ADDR				0x1415
+#define P_L_STH2_HE_ADDR			VCBUS_REG_ADDR(L_STH2_HE_ADDR)
+#define L_STH2_VS_ADDR				0x1416
+#define P_L_STH2_VS_ADDR			VCBUS_REG_ADDR(L_STH2_VS_ADDR)
+#define L_STH2_VE_ADDR				0x1417
+#define P_L_STH2_VE_ADDR			VCBUS_REG_ADDR(L_STH2_VE_ADDR)
+#define L_OEH_HS_ADDR				0x1418
+#define P_L_OEH_HS_ADDR				VCBUS_REG_ADDR(L_OEH_HS_ADDR)
+#define L_OEH_HE_ADDR				0x1419
+#define P_L_OEH_HE_ADDR				VCBUS_REG_ADDR(L_OEH_HE_ADDR)
+#define L_OEH_VS_ADDR				0x141a
+#define P_L_OEH_VS_ADDR				VCBUS_REG_ADDR(L_OEH_VS_ADDR)
+#define L_OEH_VE_ADDR				0x141b
+#define P_L_OEH_VE_ADDR				VCBUS_REG_ADDR(L_OEH_VE_ADDR)
+#define L_VCOM_HSWITCH_ADDR			0x141c
+#define P_L_VCOM_HSWITCH_ADDR			VCBUS_REG_ADDR(L_VCOM_HSWITCH_ADDR)
+#define L_VCOM_VS_ADDR				0x141d
+#define P_L_VCOM_VS_ADDR			VCBUS_REG_ADDR(L_VCOM_VS_ADDR)
+#define L_VCOM_VE_ADDR				0x141e
+#define P_L_VCOM_VE_ADDR			VCBUS_REG_ADDR(L_VCOM_VE_ADDR)
+#define L_CPV1_HS_ADDR				0x141f
+#define P_L_CPV1_HS_ADDR			VCBUS_REG_ADDR(L_CPV1_HS_ADDR)
+#define L_CPV1_HE_ADDR				0x1420
+#define P_L_CPV1_HE_ADDR			VCBUS_REG_ADDR(L_CPV1_HE_ADDR)
+#define L_CPV1_VS_ADDR				0x1421
+#define P_L_CPV1_VS_ADDR			VCBUS_REG_ADDR(L_CPV1_VS_ADDR)
+#define L_CPV1_VE_ADDR				0x1422
+#define P_L_CPV1_VE_ADDR			VCBUS_REG_ADDR(L_CPV1_VE_ADDR)
+#define L_CPV2_HS_ADDR				0x1423
+#define P_L_CPV2_HS_ADDR			VCBUS_REG_ADDR(L_CPV2_HS_ADDR)
+#define L_CPV2_HE_ADDR				0x1424
+#define P_L_CPV2_HE_ADDR			VCBUS_REG_ADDR(L_CPV2_HE_ADDR)
+#define L_CPV2_VS_ADDR				0x1425
+#define P_L_CPV2_VS_ADDR			VCBUS_REG_ADDR(L_CPV2_VS_ADDR)
+#define L_CPV2_VE_ADDR				0x1426
+#define P_L_CPV2_VE_ADDR			VCBUS_REG_ADDR(L_CPV2_VE_ADDR)
+#define L_STV1_HS_ADDR				0x1427
+#define P_L_STV1_HS_ADDR			VCBUS_REG_ADDR(L_STV1_HS_ADDR)
+#define L_STV1_HE_ADDR				0x1428
+#define P_L_STV1_HE_ADDR			VCBUS_REG_ADDR(L_STV1_HE_ADDR)
+#define L_STV1_VS_ADDR				0x1429
+#define P_L_STV1_VS_ADDR			VCBUS_REG_ADDR(L_STV1_VS_ADDR)
+#define L_STV1_VE_ADDR				0x142a
+#define P_L_STV1_VE_ADDR			VCBUS_REG_ADDR(L_STV1_VE_ADDR)
+#define L_STV2_HS_ADDR				0x142b
+#define P_L_STV2_HS_ADDR			VCBUS_REG_ADDR(L_STV2_HS_ADDR)
+#define L_STV2_HE_ADDR				0x142c
+#define P_L_STV2_HE_ADDR			VCBUS_REG_ADDR(L_STV2_HE_ADDR)
+#define L_STV2_VS_ADDR				0x142d
+#define P_L_STV2_VS_ADDR			VCBUS_REG_ADDR(L_STV2_VS_ADDR)
+#define L_STV2_VE_ADDR				0x142e
+#define P_L_STV2_VE_ADDR			VCBUS_REG_ADDR(L_STV2_VE_ADDR)
+#define L_OEV1_HS_ADDR				0x142f
+#define P_L_OEV1_HS_ADDR			VCBUS_REG_ADDR(L_OEV1_HS_ADDR)
+#define L_OEV1_HE_ADDR				0x1430
+#define P_L_OEV1_HE_ADDR			VCBUS_REG_ADDR(L_OEV1_HE_ADDR)
+#define L_OEV1_VS_ADDR				0x1431
+#define P_L_OEV1_VS_ADDR			VCBUS_REG_ADDR(L_OEV1_VS_ADDR)
+#define L_OEV1_VE_ADDR				0x1432
+#define P_L_OEV1_VE_ADDR			VCBUS_REG_ADDR(L_OEV1_VE_ADDR)
+#define L_OEV2_HS_ADDR				0x1433
+#define P_L_OEV2_HS_ADDR			VCBUS_REG_ADDR(L_OEV2_HS_ADDR)
+#define L_OEV2_HE_ADDR				0x1434
+#define P_L_OEV2_HE_ADDR			VCBUS_REG_ADDR(L_OEV2_HE_ADDR)
+#define L_OEV2_VS_ADDR				0x1435
+#define P_L_OEV2_VS_ADDR			VCBUS_REG_ADDR(L_OEV2_VS_ADDR)
+#define L_OEV2_VE_ADDR				0x1436
+#define P_L_OEV2_VE_ADDR			VCBUS_REG_ADDR(L_OEV2_VE_ADDR)
+#define L_OEV3_HS_ADDR				0x1437
+#define P_L_OEV3_HS_ADDR			VCBUS_REG_ADDR(L_OEV3_HS_ADDR)
+#define L_OEV3_HE_ADDR				0x1438
+#define P_L_OEV3_HE_ADDR			VCBUS_REG_ADDR(L_OEV3_HE_ADDR)
+#define L_OEV3_VS_ADDR				0x1439
+#define P_L_OEV3_VS_ADDR			VCBUS_REG_ADDR(L_OEV3_VS_ADDR)
+#define L_OEV3_VE_ADDR				0x143a
+#define P_L_OEV3_VE_ADDR			VCBUS_REG_ADDR(L_OEV3_VE_ADDR)
+#define L_LCD_PWR_ADDR				0x143b
+#define P_L_LCD_PWR_ADDR			VCBUS_REG_ADDR(L_LCD_PWR_ADDR)
+#define L_LCD_PWM0_LO_ADDR			0x143c
+#define P_L_LCD_PWM0_LO_ADDR			VCBUS_REG_ADDR(L_LCD_PWM0_LO_ADDR)
+#define L_LCD_PWM0_HI_ADDR			0x143d
+#define P_L_LCD_PWM0_HI_ADDR			VCBUS_REG_ADDR(L_LCD_PWM0_HI_ADDR)
+#define L_LCD_PWM1_LO_ADDR			0x143e
+#define P_L_LCD_PWM1_LO_ADDR			VCBUS_REG_ADDR(L_LCD_PWM1_LO_ADDR)
+#define L_LCD_PWM1_HI_ADDR			0x143f
+#define P_L_LCD_PWM1_HI_ADDR			VCBUS_REG_ADDR(L_LCD_PWM1_HI_ADDR)
+#define L_INV_CNT_ADDR				0x1440
+#define P_L_INV_CNT_ADDR			VCBUS_REG_ADDR(L_INV_CNT_ADDR)
+#define L_TCON_MISC_SEL_ADDR			0x1441
+#define P_L_TCON_MISC_SEL_ADDR			VCBUS_REG_ADDR(L_TCON_MISC_SEL_ADDR)
+#define L_DUAL_PORT_CNTL_ADDR			0x1442
+#define P_L_DUAL_PORT_CNTL_ADDR			VCBUS_REG_ADDR(L_DUAL_PORT_CNTL_ADDR)
+#define MLVDS_CLK_CTL1_HI			0x1443
+#define P_MLVDS_CLK_CTL1_HI			VCBUS_REG_ADDR(MLVDS_CLK_CTL1_HI)
+#define MLVDS_CLK_CTL1_LO			0x1444
+#define P_MLVDS_CLK_CTL1_LO			VCBUS_REG_ADDR(MLVDS_CLK_CTL1_LO)
+#define L_TCON_DOUBLE_CTL			0x1449
+#define P_L_TCON_DOUBLE_CTL			VCBUS_REG_ADDR(L_TCON_DOUBLE_CTL)
+#define L_TCON_PATTERN_HI			0x144a
+#define P_L_TCON_PATTERN_HI			VCBUS_REG_ADDR(L_TCON_PATTERN_HI)
+#define L_TCON_PATTERN_LO			0x144b
+#define P_L_TCON_PATTERN_LO			VCBUS_REG_ADDR(L_TCON_PATTERN_LO)
+#define LDIM_BL_ADDR_PORT			0x144e
+#define P_LDIM_BL_ADDR_PORT			VCBUS_REG_ADDR(LDIM_BL_ADDR_PORT)
+#define LDIM_BL_DATA_PORT			0x144f
+#define P_LDIM_BL_DATA_PORT			VCBUS_REG_ADDR(LDIM_BL_DATA_PORT)
+#define L_DE_HS_ADDR				0x1451
+#define P_L_DE_HS_ADDR				VCBUS_REG_ADDR(L_DE_HS_ADDR)
+#define L_DE_HE_ADDR				0x1452
+#define P_L_DE_HE_ADDR				VCBUS_REG_ADDR(L_DE_HE_ADDR)
+#define L_DE_VS_ADDR				0x1453
+#define P_L_DE_VS_ADDR				VCBUS_REG_ADDR(L_DE_VS_ADDR)
+#define L_DE_VE_ADDR				0x1454
+#define P_L_DE_VE_ADDR				VCBUS_REG_ADDR(L_DE_VE_ADDR)
+#define L_HSYNC_HS_ADDR				0x1455
+#define P_L_HSYNC_HS_ADDR			VCBUS_REG_ADDR(L_HSYNC_HS_ADDR)
+#define L_HSYNC_HE_ADDR				0x1456
+#define P_L_HSYNC_HE_ADDR			VCBUS_REG_ADDR(L_HSYNC_HE_ADDR)
+#define L_HSYNC_VS_ADDR				0x1457
+#define P_L_HSYNC_VS_ADDR			VCBUS_REG_ADDR(L_HSYNC_VS_ADDR)
+#define L_HSYNC_VE_ADDR				0x1458
+#define P_L_HSYNC_VE_ADDR			VCBUS_REG_ADDR(L_HSYNC_VE_ADDR)
+#define L_VSYNC_HS_ADDR				0x1459
+#define P_L_VSYNC_HS_ADDR			VCBUS_REG_ADDR(L_VSYNC_HS_ADDR)
+#define L_VSYNC_HE_ADDR				0x145a
+#define P_L_VSYNC_HE_ADDR			VCBUS_REG_ADDR(L_VSYNC_HE_ADDR)
+#define L_VSYNC_VS_ADDR				0x145b
+#define P_L_VSYNC_VS_ADDR			VCBUS_REG_ADDR(L_VSYNC_VS_ADDR)
+#define L_VSYNC_VE_ADDR				0x145c
+#define P_L_VSYNC_VE_ADDR			VCBUS_REG_ADDR(L_VSYNC_VE_ADDR)
+#define L_LCD_MCU_CTL				0x145d
+#define P_L_LCD_MCU_CTL				VCBUS_REG_ADDR(L_LCD_MCU_CTL)
+#define MLVDS2_DUAL_GATE_WR_START		0x1477
+#define P_MLVDS2_DUAL_GATE_WR_START		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_WR_START)
+#define MLVDS2_DUAL_GATE_WR_END			0x1478
+#define P_MLVDS2_DUAL_GATE_WR_END		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_WR_END)
+#define MLVDS2_DUAL_GATE_RD_START		0x1479
+#define P_MLVDS2_DUAL_GATE_RD_START		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_RD_START)
+#define MLVDS2_DUAL_GATE_RD_END			0x147a
+#define P_MLVDS2_DUAL_GATE_RD_END		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_RD_END)
+#define MLVDS2_SECOND_RESET_CTL			0x147b
+#define P_MLVDS2_SECOND_RESET_CTL		VCBUS_REG_ADDR(MLVDS2_SECOND_RESET_CTL)
+#define MLVDS2_DUAL_GATE_CTL_HI			0x147c
+#define P_MLVDS2_DUAL_GATE_CTL_HI		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_CTL_HI)
+#define MLVDS2_DUAL_GATE_CTL_LO			0x147d
+#define P_MLVDS2_DUAL_GATE_CTL_LO		VCBUS_REG_ADDR(MLVDS2_DUAL_GATE_CTL_LO)
+#define MLVDS2_RESET_CONFIG_HI			0x147e
+#define P_MLVDS2_RESET_CONFIG_HI		VCBUS_REG_ADDR(MLVDS2_RESET_CONFIG_HI)
+#define MLVDS2_RESET_CONFIG_LO			0x147f
+#define P_MLVDS2_RESET_CONFIG_LO		VCBUS_REG_ADDR(MLVDS2_RESET_CONFIG_LO)
+#define VBO_CTRL_L				0x1460
+#define P_VBO_CTRL_L				VCBUS_REG_ADDR(VBO_CTRL_L)
+#define VBO_CTRL_H				0x1461
+#define P_VBO_CTRL_H				VCBUS_REG_ADDR(VBO_CTRL_H)
+#define VBO_SOFT_RST				0x1462
+#define P_VBO_SOFT_RST				VCBUS_REG_ADDR(VBO_SOFT_RST)
+#define VBO_LANES				0x1463
+#define P_VBO_LANES				VCBUS_REG_ADDR(VBO_LANES)
+#define VBO_VIN_CTRL				0x1464
+#define P_VBO_VIN_CTRL				VCBUS_REG_ADDR(VBO_VIN_CTRL)
+#define VBO_ACT_VSIZE				0x1465
+#define P_VBO_ACT_VSIZE				VCBUS_REG_ADDR(VBO_ACT_VSIZE)
+#define VBO_REGION_00				0x1466
+#define P_VBO_REGION_00				VCBUS_REG_ADDR(VBO_REGION_00)
+#define VBO_REGION_01				0x1467
+#define P_VBO_REGION_01				VCBUS_REG_ADDR(VBO_REGION_01)
+#define VBO_REGION_02				0x1468
+#define P_VBO_REGION_02				VCBUS_REG_ADDR(VBO_REGION_02)
+#define VBO_REGION_03				0x1469
+#define P_VBO_REGION_03				VCBUS_REG_ADDR(VBO_REGION_03)
+#define VBO_VBK_CTRL_0				0x146a
+#define P_VBO_VBK_CTRL_0			VCBUS_REG_ADDR(VBO_VBK_CTRL_0)
+#define VBO_VBK_CTRL_1				0x146b
+#define P_VBO_VBK_CTRL_1			VCBUS_REG_ADDR(VBO_VBK_CTRL_1)
+#define VBO_HBK_CTRL				0x146c
+#define P_VBO_HBK_CTRL				VCBUS_REG_ADDR(VBO_HBK_CTRL)
+#define VBO_PXL_CTRL				0x146d
+#define P_VBO_PXL_CTRL				VCBUS_REG_ADDR(VBO_PXL_CTRL)
+#define VBO_LANE_SKEW_L				0x146e
+#define P_VBO_LANE_SKEW_L			VCBUS_REG_ADDR(VBO_LANE_SKEW_L)
+#define VBO_LANE_SKEW_H				0x146f
+#define P_VBO_LANE_SKEW_H			VCBUS_REG_ADDR(VBO_LANE_SKEW_H)
+#define VBO_GCLK_LANE_L				0x1470
+#define P_VBO_GCLK_LANE_L			VCBUS_REG_ADDR(VBO_GCLK_LANE_L)
+#define VBO_GCLK_LANE_H				0x1471
+#define P_VBO_GCLK_LANE_H			VCBUS_REG_ADDR(VBO_GCLK_LANE_H)
+#define VBO_GCLK_MAIN				0x1472
+#define P_VBO_GCLK_MAIN				VCBUS_REG_ADDR(VBO_GCLK_MAIN)
+#define VBO_STATUS_L				0x1473
+#define P_VBO_STATUS_L				VCBUS_REG_ADDR(VBO_STATUS_L)
+#define VBO_STATUS_H				0x1474
+#define P_VBO_STATUS_H				VCBUS_REG_ADDR(VBO_STATUS_H)
+#define VBO_LANE_OUTPUT				0x1475
+#define P_VBO_LANE_OUTPUT			VCBUS_REG_ADDR(VBO_LANE_OUTPUT)
+#define LCD_PORT_SWAP				0x1476
+#define P_LCD_PORT_SWAP				VCBUS_REG_ADDR(LCD_PORT_SWAP)
+#define GAMMA_CNTL_PORT				0x1480
+#define P_GAMMA_CNTL_PORT			VCBUS_REG_ADDR(GAMMA_CNTL_PORT)
+#define GAMMA_DATA_PORT				0x1481
+#define P_GAMMA_DATA_PORT			VCBUS_REG_ADDR(GAMMA_DATA_PORT)
+#define GAMMA_ADDR_PORT				0x1482
+#define P_GAMMA_ADDR_PORT			VCBUS_REG_ADDR(GAMMA_ADDR_PORT)
+#define GAMMA_VCOM_HSWITCH_ADDR			0x1483
+#define P_GAMMA_VCOM_HSWITCH_ADDR		VCBUS_REG_ADDR(GAMMA_VCOM_HSWITCH_ADDR)
+#define RGB_BASE_ADDR				0x1485
+#define P_RGB_BASE_ADDR				VCBUS_REG_ADDR(RGB_BASE_ADDR)
+#define RGB_COEFF_ADDR				0x1486
+#define P_RGB_COEFF_ADDR			VCBUS_REG_ADDR(RGB_COEFF_ADDR)
+#define POL_CNTL_ADDR				0x1487
+#define P_POL_CNTL_ADDR				VCBUS_REG_ADDR(POL_CNTL_ADDR)
+#define DITH_CNTL_ADDR				0x1488
+#define P_DITH_CNTL_ADDR			VCBUS_REG_ADDR(DITH_CNTL_ADDR)
+#define GAMMA_PROBE_CTRL			0x1489
+#define P_GAMMA_PROBE_CTRL			VCBUS_REG_ADDR(GAMMA_PROBE_CTRL)
+#define GAMMA_PROBE_COLOR_L			0x148a
+#define P_GAMMA_PROBE_COLOR_L			VCBUS_REG_ADDR(GAMMA_PROBE_COLOR_L)
+#define GAMMA_PROBE_COLOR_H			0x148b
+#define P_GAMMA_PROBE_COLOR_H			VCBUS_REG_ADDR(GAMMA_PROBE_COLOR_H)
+#define GAMMA_PROBE_HL_COLOR			0x148c
+#define P_GAMMA_PROBE_HL_COLOR			VCBUS_REG_ADDR(GAMMA_PROBE_HL_COLOR)
+#define GAMMA_PROBE_POS_X			0x148d
+#define P_GAMMA_PROBE_POS_X			VCBUS_REG_ADDR(GAMMA_PROBE_POS_X)
+#define GAMMA_PROBE_POS_Y			0x148e
+#define P_GAMMA_PROBE_POS_Y			VCBUS_REG_ADDR(GAMMA_PROBE_POS_Y)
+#define STH1_HS_ADDR				0x1490
+#define P_STH1_HS_ADDR				VCBUS_REG_ADDR(STH1_HS_ADDR)
+#define STH1_HE_ADDR				0x1491
+#define P_STH1_HE_ADDR				VCBUS_REG_ADDR(STH1_HE_ADDR)
+#define STH1_VS_ADDR				0x1492
+#define P_STH1_VS_ADDR				VCBUS_REG_ADDR(STH1_VS_ADDR)
+#define STH1_VE_ADDR				0x1493
+#define P_STH1_VE_ADDR				VCBUS_REG_ADDR(STH1_VE_ADDR)
+#define STH2_HS_ADDR				0x1494
+#define P_STH2_HS_ADDR				VCBUS_REG_ADDR(STH2_HS_ADDR)
+#define STH2_HE_ADDR				0x1495
+#define P_STH2_HE_ADDR				VCBUS_REG_ADDR(STH2_HE_ADDR)
+#define STH2_VS_ADDR				0x1496
+#define P_STH2_VS_ADDR				VCBUS_REG_ADDR(STH2_VS_ADDR)
+#define STH2_VE_ADDR				0x1497
+#define P_STH2_VE_ADDR				VCBUS_REG_ADDR(STH2_VE_ADDR)
+#define OEH_HS_ADDR				0x1498
+#define P_OEH_HS_ADDR				VCBUS_REG_ADDR(OEH_HS_ADDR)
+#define OEH_HE_ADDR				0x1499
+#define P_OEH_HE_ADDR				VCBUS_REG_ADDR(OEH_HE_ADDR)
+#define OEH_VS_ADDR				0x149a
+#define P_OEH_VS_ADDR				VCBUS_REG_ADDR(OEH_VS_ADDR)
+#define OEH_VE_ADDR				0x149b
+#define P_OEH_VE_ADDR				VCBUS_REG_ADDR(OEH_VE_ADDR)
+#define VCOM_HSWITCH_ADDR			0x149c
+#define P_VCOM_HSWITCH_ADDR			VCBUS_REG_ADDR(VCOM_HSWITCH_ADDR)
+#define VCOM_VS_ADDR				0x149d
+#define P_VCOM_VS_ADDR				VCBUS_REG_ADDR(VCOM_VS_ADDR)
+#define VCOM_VE_ADDR				0x149e
+#define P_VCOM_VE_ADDR				VCBUS_REG_ADDR(VCOM_VE_ADDR)
+#define CPV1_HS_ADDR				0x149f
+#define P_CPV1_HS_ADDR				VCBUS_REG_ADDR(CPV1_HS_ADDR)
+#define CPV1_HE_ADDR				0x14a0
+#define P_CPV1_HE_ADDR				VCBUS_REG_ADDR(CPV1_HE_ADDR)
+#define CPV1_VS_ADDR				0x14a1
+#define P_CPV1_VS_ADDR				VCBUS_REG_ADDR(CPV1_VS_ADDR)
+#define CPV1_VE_ADDR				0x14a2
+#define P_CPV1_VE_ADDR				VCBUS_REG_ADDR(CPV1_VE_ADDR)
+#define CPV2_HS_ADDR				0x14a3
+#define P_CPV2_HS_ADDR				VCBUS_REG_ADDR(CPV2_HS_ADDR)
+#define CPV2_HE_ADDR				0x14a4
+#define P_CPV2_HE_ADDR				VCBUS_REG_ADDR(CPV2_HE_ADDR)
+#define CPV2_VS_ADDR				0x14a5
+#define P_CPV2_VS_ADDR				VCBUS_REG_ADDR(CPV2_VS_ADDR)
+#define CPV2_VE_ADDR				0x14a6
+#define P_CPV2_VE_ADDR				VCBUS_REG_ADDR(CPV2_VE_ADDR)
+#define STV1_HS_ADDR				0x14a7
+#define P_STV1_HS_ADDR				VCBUS_REG_ADDR(STV1_HS_ADDR)
+#define STV1_HE_ADDR				0x14a8
+#define P_STV1_HE_ADDR				VCBUS_REG_ADDR(STV1_HE_ADDR)
+#define STV1_VS_ADDR				0x14a9
+#define P_STV1_VS_ADDR				VCBUS_REG_ADDR(STV1_VS_ADDR)
+#define STV1_VE_ADDR				0x14aa
+#define P_STV1_VE_ADDR				VCBUS_REG_ADDR(STV1_VE_ADDR)
+#define STV2_HS_ADDR				0x14ab
+#define P_STV2_HS_ADDR				VCBUS_REG_ADDR(STV2_HS_ADDR)
+#define STV2_HE_ADDR				0x14ac
+#define P_STV2_HE_ADDR				VCBUS_REG_ADDR(STV2_HE_ADDR)
+#define STV2_VS_ADDR				0x14ad
+#define P_STV2_VS_ADDR				VCBUS_REG_ADDR(STV2_VS_ADDR)
+#define STV2_VE_ADDR				0x14ae
+#define P_STV2_VE_ADDR				VCBUS_REG_ADDR(STV2_VE_ADDR)
+#define OEV1_HS_ADDR				0x14af
+#define P_OEV1_HS_ADDR				VCBUS_REG_ADDR(OEV1_HS_ADDR)
+#define OEV1_HE_ADDR				0x14b0
+#define P_OEV1_HE_ADDR				VCBUS_REG_ADDR(OEV1_HE_ADDR)
+#define OEV1_VS_ADDR				0x14b1
+#define P_OEV1_VS_ADDR				VCBUS_REG_ADDR(OEV1_VS_ADDR)
+#define OEV1_VE_ADDR				0x14b2
+#define P_OEV1_VE_ADDR				VCBUS_REG_ADDR(OEV1_VE_ADDR)
+#define OEV2_HS_ADDR				0x14b3
+#define P_OEV2_HS_ADDR				VCBUS_REG_ADDR(OEV2_HS_ADDR)
+#define OEV2_HE_ADDR				0x14b4
+#define P_OEV2_HE_ADDR				VCBUS_REG_ADDR(OEV2_HE_ADDR)
+#define OEV2_VS_ADDR				0x14b5
+#define P_OEV2_VS_ADDR				VCBUS_REG_ADDR(OEV2_VS_ADDR)
+#define OEV2_VE_ADDR				0x14b6
+#define P_OEV2_VE_ADDR				VCBUS_REG_ADDR(OEV2_VE_ADDR)
+#define OEV3_HS_ADDR				0x14b7
+#define P_OEV3_HS_ADDR				VCBUS_REG_ADDR(OEV3_HS_ADDR)
+#define OEV3_HE_ADDR				0x14b8
+#define P_OEV3_HE_ADDR				VCBUS_REG_ADDR(OEV3_HE_ADDR)
+#define OEV3_VS_ADDR				0x14b9
+#define P_OEV3_VS_ADDR				VCBUS_REG_ADDR(OEV3_VS_ADDR)
+#define OEV3_VE_ADDR				0x14ba
+#define P_OEV3_VE_ADDR				VCBUS_REG_ADDR(OEV3_VE_ADDR)
+#define LCD_PWR_ADDR				0x14bb
+#define P_LCD_PWR_ADDR				VCBUS_REG_ADDR(LCD_PWR_ADDR)
+#define LCD_PWM0_LO_ADDR			0x14bc
+#define P_LCD_PWM0_LO_ADDR			VCBUS_REG_ADDR(LCD_PWM0_LO_ADDR)
+#define LCD_PWM0_HI_ADDR			0x14bd
+#define P_LCD_PWM0_HI_ADDR			VCBUS_REG_ADDR(LCD_PWM0_HI_ADDR)
+#define LCD_PWM1_LO_ADDR			0x14be
+#define P_LCD_PWM1_LO_ADDR			VCBUS_REG_ADDR(LCD_PWM1_LO_ADDR)
+#define LCD_PWM1_HI_ADDR			0x14bf
+#define P_LCD_PWM1_HI_ADDR			VCBUS_REG_ADDR(LCD_PWM1_HI_ADDR)
+#define INV_CNT_ADDR				0x14c0
+#define P_INV_CNT_ADDR				VCBUS_REG_ADDR(INV_CNT_ADDR)
+#define TCON_MISC_SEL_ADDR			0x14c1
+#define P_TCON_MISC_SEL_ADDR			VCBUS_REG_ADDR(TCON_MISC_SEL_ADDR)
+#define DUAL_PORT_CNTL_ADDR			0x14c2
+#define P_DUAL_PORT_CNTL_ADDR			VCBUS_REG_ADDR(DUAL_PORT_CNTL_ADDR)
+#define MLVDS_CONTROL				0x14c3
+#define P_MLVDS_CONTROL				VCBUS_REG_ADDR(MLVDS_CONTROL)
+#define MLVDS_RESET_PATTERN_HI			0x14c4
+#define P_MLVDS_RESET_PATTERN_HI		VCBUS_REG_ADDR(MLVDS_RESET_PATTERN_HI)
+#define MLVDS_RESET_PATTERN_LO			0x14c5
+#define P_MLVDS_RESET_PATTERN_LO		VCBUS_REG_ADDR(MLVDS_RESET_PATTERN_LO)
+#define MLVDS_RESET_PATTERN_EXT			0x14c6
+#define P_MLVDS_RESET_PATTERN_EXT		VCBUS_REG_ADDR(MLVDS_RESET_PATTERN_EXT)
+#define MLVDS_CONFIG_HI				0x14c7
+#define P_MLVDS_CONFIG_HI			VCBUS_REG_ADDR(MLVDS_CONFIG_HI)
+#define MLVDS_CONFIG_LO				0x14c8
+#define P_MLVDS_CONFIG_LO			VCBUS_REG_ADDR(MLVDS_CONFIG_LO)
+#define TCON_DOUBLE_CTL				0x14c9
+#define P_TCON_DOUBLE_CTL			VCBUS_REG_ADDR(TCON_DOUBLE_CTL)
+#define TCON_PATTERN_HI				0x14ca
+#define P_TCON_PATTERN_HI			VCBUS_REG_ADDR(TCON_PATTERN_HI)
+#define TCON_PATTERN_LO				0x14cb
+#define P_TCON_PATTERN_LO			VCBUS_REG_ADDR(TCON_PATTERN_LO)
+#define TCON_CONTROL_HI				0x14cc
+#define P_TCON_CONTROL_HI			VCBUS_REG_ADDR(TCON_CONTROL_HI)
+#define TCON_CONTROL_LO				0x14cd
+#define P_TCON_CONTROL_LO			VCBUS_REG_ADDR(TCON_CONTROL_LO)
+#define LVDS_BLANK_DATA_HI			0x14ce
+#define P_LVDS_BLANK_DATA_HI			VCBUS_REG_ADDR(LVDS_BLANK_DATA_HI)
+#define LVDS_BLANK_DATA_LO			0x14cf
+#define P_LVDS_BLANK_DATA_LO			VCBUS_REG_ADDR(LVDS_BLANK_DATA_LO)
+#define LVDS_PACK_CNTL_ADDR			0x14d0
+#define P_LVDS_PACK_CNTL_ADDR			VCBUS_REG_ADDR(LVDS_PACK_CNTL_ADDR)
+#define DE_HS_ADDR				0x14d1
+#define P_DE_HS_ADDR				VCBUS_REG_ADDR(DE_HS_ADDR)
+#define DE_HE_ADDR				0x14d2
+#define P_DE_HE_ADDR				VCBUS_REG_ADDR(DE_HE_ADDR)
+#define DE_VS_ADDR				0x14d3
+#define P_DE_VS_ADDR				VCBUS_REG_ADDR(DE_VS_ADDR)
+#define DE_VE_ADDR				0x14d4
+#define P_DE_VE_ADDR				VCBUS_REG_ADDR(DE_VE_ADDR)
+#define HSYNC_HS_ADDR				0x14d5
+#define P_HSYNC_HS_ADDR				VCBUS_REG_ADDR(HSYNC_HS_ADDR)
+#define HSYNC_HE_ADDR				0x14d6
+#define P_HSYNC_HE_ADDR				VCBUS_REG_ADDR(HSYNC_HE_ADDR)
+#define HSYNC_VS_ADDR				0x14d7
+#define P_HSYNC_VS_ADDR				VCBUS_REG_ADDR(HSYNC_VS_ADDR)
+#define HSYNC_VE_ADDR				0x14d8
+#define P_HSYNC_VE_ADDR				VCBUS_REG_ADDR(HSYNC_VE_ADDR)
+#define VSYNC_HS_ADDR				0x14d9
+#define P_VSYNC_HS_ADDR				VCBUS_REG_ADDR(VSYNC_HS_ADDR)
+#define VSYNC_HE_ADDR				0x14da
+#define P_VSYNC_HE_ADDR				VCBUS_REG_ADDR(VSYNC_HE_ADDR)
+#define VSYNC_VS_ADDR				0x14db
+#define P_VSYNC_VS_ADDR				VCBUS_REG_ADDR(VSYNC_VS_ADDR)
+#define VSYNC_VE_ADDR				0x14dc
+#define P_VSYNC_VE_ADDR				VCBUS_REG_ADDR(VSYNC_VE_ADDR)
+#define LCD_MCU_CTL				0x14dd
+#define P_LCD_MCU_CTL				VCBUS_REG_ADDR(LCD_MCU_CTL)
+#define LCD_MCU_DATA_0				0x14de
+#define P_LCD_MCU_DATA_0			VCBUS_REG_ADDR(LCD_MCU_DATA_0)
+#define LCD_MCU_DATA_1				0x14df
+#define P_LCD_MCU_DATA_1			VCBUS_REG_ADDR(LCD_MCU_DATA_1)
+#define LVDS_GEN_CNTL				0x14e0
+#define P_LVDS_GEN_CNTL				VCBUS_REG_ADDR(LVDS_GEN_CNTL)
+#define LVDS_PHY_CNTL0				0x14e1
+#define P_LVDS_PHY_CNTL0			VCBUS_REG_ADDR(LVDS_PHY_CNTL0)
+#define LVDS_PHY_CNTL1				0x14e2
+#define P_LVDS_PHY_CNTL1			VCBUS_REG_ADDR(LVDS_PHY_CNTL1)
+#define LVDS_PHY_CNTL2				0x14e3
+#define P_LVDS_PHY_CNTL2			VCBUS_REG_ADDR(LVDS_PHY_CNTL2)
+#define LVDS_PHY_CNTL3				0x14e4
+#define P_LVDS_PHY_CNTL3			VCBUS_REG_ADDR(LVDS_PHY_CNTL3)
+#define LVDS_PHY_CNTL4				0x14e5
+#define P_LVDS_PHY_CNTL4			VCBUS_REG_ADDR(LVDS_PHY_CNTL4)
+#define LVDS_PHY_CNTL5				0x14e6
+#define P_LVDS_PHY_CNTL5			VCBUS_REG_ADDR(LVDS_PHY_CNTL5)
+#define LVDS_SRG_TEST				0x14e8
+#define P_LVDS_SRG_TEST				VCBUS_REG_ADDR(LVDS_SRG_TEST)
+#define LVDS_BIST_MUX0				0x14e9
+#define P_LVDS_BIST_MUX0			VCBUS_REG_ADDR(LVDS_BIST_MUX0)
+#define LVDS_BIST_MUX1				0x14ea
+#define P_LVDS_BIST_MUX1			VCBUS_REG_ADDR(LVDS_BIST_MUX1)
+#define LVDS_BIST_FIXED0			0x14eb
+#define P_LVDS_BIST_FIXED0			VCBUS_REG_ADDR(LVDS_BIST_FIXED0)
+#define LVDS_BIST_FIXED1			0x14ec
+#define P_LVDS_BIST_FIXED1			VCBUS_REG_ADDR(LVDS_BIST_FIXED1)
+#define LVDS_BIST_CNTL0				0x14ed
+#define P_LVDS_BIST_CNTL0			VCBUS_REG_ADDR(LVDS_BIST_CNTL0)
+#define LVDS_CLKB_CLKA				0x14ee
+#define P_LVDS_CLKB_CLKA			VCBUS_REG_ADDR(LVDS_CLKB_CLKA)
+#define LVDS_PHY_CLK_CNTL			0x14ef
+#define P_LVDS_PHY_CLK_CNTL			VCBUS_REG_ADDR(LVDS_PHY_CLK_CNTL)
+#define LVDS_SER_EN				0x14f0
+#define P_LVDS_SER_EN				VCBUS_REG_ADDR(LVDS_SER_EN)
+#define LVDS_PHY_CNTL6				0x14f1
+#define P_LVDS_PHY_CNTL6			VCBUS_REG_ADDR(LVDS_PHY_CNTL6)
+#define LVDS_PHY_CNTL7				0x14f2
+#define P_LVDS_PHY_CNTL7			VCBUS_REG_ADDR(LVDS_PHY_CNTL7)
+#define LVDS_PHY_CNTL8				0x14f3
+#define P_LVDS_PHY_CNTL8			VCBUS_REG_ADDR(LVDS_PHY_CNTL8)
+#define MLVDS_CLK_CTL0_HI			0x14f4
+#define P_MLVDS_CLK_CTL0_HI			VCBUS_REG_ADDR(MLVDS_CLK_CTL0_HI)
+#define MLVDS_CLK_CTL0_LO			0x14f5
+#define P_MLVDS_CLK_CTL0_LO			VCBUS_REG_ADDR(MLVDS_CLK_CTL0_LO)
+#define MLVDS_DUAL_GATE_WR_START		0x14f6
+#define P_MLVDS_DUAL_GATE_WR_START		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_WR_START)
+#define MLVDS_DUAL_GATE_WR_END			0x14f7
+#define P_MLVDS_DUAL_GATE_WR_END		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_WR_END)
+#define MLVDS_DUAL_GATE_RD_START		0x14f8
+#define P_MLVDS_DUAL_GATE_RD_START		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_RD_START)
+#define MLVDS_DUAL_GATE_RD_END			0x14f9
+#define P_MLVDS_DUAL_GATE_RD_END		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_RD_END)
+#define MLVDS_SECOND_RESET_CTL			0x14fa
+#define P_MLVDS_SECOND_RESET_CTL		VCBUS_REG_ADDR(MLVDS_SECOND_RESET_CTL)
+#define MLVDS_DUAL_GATE_CTL_HI			0x14fb
+#define P_MLVDS_DUAL_GATE_CTL_HI		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_CTL_HI)
+#define MLVDS_DUAL_GATE_CTL_LO			0x14fc
+#define P_MLVDS_DUAL_GATE_CTL_LO		VCBUS_REG_ADDR(MLVDS_DUAL_GATE_CTL_LO)
+#define MLVDS_RESET_CONFIG_HI			0x14fd
+#define P_MLVDS_RESET_CONFIG_HI			VCBUS_REG_ADDR(MLVDS_RESET_CONFIG_HI)
+#define MLVDS_RESET_CONFIG_LO			0x14fe
+#define P_MLVDS_RESET_CONFIG_LO			VCBUS_REG_ADDR(MLVDS_RESET_CONFIG_LO)
+#define VPP2_DUMMY_DATA				0x1900
+#define P_VPP2_DUMMY_DATA			VCBUS_REG_ADDR(VPP2_DUMMY_DATA)
+#define VPP2_LINE_IN_LENGTH			0x1901
+#define P_VPP2_LINE_IN_LENGTH			VCBUS_REG_ADDR(VPP2_LINE_IN_LENGTH)
+#define VPP2_PIC_IN_HEIGHT			0x1902
+#define P_VPP2_PIC_IN_HEIGHT			VCBUS_REG_ADDR(VPP2_PIC_IN_HEIGHT)
+#define VPP2_SCALE_COEF_IDX			0x1903
+#define P_VPP2_SCALE_COEF_IDX			VCBUS_REG_ADDR(VPP2_SCALE_COEF_IDX)
+#define VPP2_SCALE_COEF				0x1904
+#define P_VPP2_SCALE_COEF			VCBUS_REG_ADDR(VPP2_SCALE_COEF)
+#define VPP2_VSC_REGION12_STARTP		0x1905
+#define P_VPP2_VSC_REGION12_STARTP		VCBUS_REG_ADDR(VPP2_VSC_REGION12_STARTP)
+#define VPP2_VSC_REGION34_STARTP		0x1906
+#define P_VPP2_VSC_REGION34_STARTP		VCBUS_REG_ADDR(VPP2_VSC_REGION34_STARTP)
+#define VPP2_VSC_REGION4_ENDP			0x1907
+#define P_VPP2_VSC_REGION4_ENDP			VCBUS_REG_ADDR(VPP2_VSC_REGION4_ENDP)
+#define VPP2_VSC_START_PHASE_STEP		0x1908
+#define P_VPP2_VSC_START_PHASE_STEP		VCBUS_REG_ADDR(VPP2_VSC_START_PHASE_STEP)
+#define VPP2_VSC_REGION0_PHASE_SLOPE		0x1909
+#define P_VPP2_VSC_REGION0_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_VSC_REGION0_PHASE_SLOPE)
+#define VPP2_VSC_REGION1_PHASE_SLOPE		0x190a
+#define P_VPP2_VSC_REGION1_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_VSC_REGION1_PHASE_SLOPE)
+#define VPP2_VSC_REGION3_PHASE_SLOPE		0x190b
+#define P_VPP2_VSC_REGION3_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_VSC_REGION3_PHASE_SLOPE)
+#define VPP2_VSC_REGION4_PHASE_SLOPE		0x190c
+#define P_VPP2_VSC_REGION4_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_VSC_REGION4_PHASE_SLOPE)
+#define VPP2_VSC_PHASE_CTRL			0x190d
+#define P_VPP2_VSC_PHASE_CTRL			VCBUS_REG_ADDR(VPP2_VSC_PHASE_CTRL)
+#define VPP2_VSC_INI_PHASE			0x190e
+#define P_VPP2_VSC_INI_PHASE			VCBUS_REG_ADDR(VPP2_VSC_INI_PHASE)
+#define VPP2_HSC_REGION12_STARTP		0x1910
+#define P_VPP2_HSC_REGION12_STARTP		VCBUS_REG_ADDR(VPP2_HSC_REGION12_STARTP)
+#define VPP2_HSC_REGION34_STARTP		0x1911
+#define P_VPP2_HSC_REGION34_STARTP		VCBUS_REG_ADDR(VPP2_HSC_REGION34_STARTP)
+#define VPP2_HSC_REGION4_ENDP			0x1912
+#define P_VPP2_HSC_REGION4_ENDP			VCBUS_REG_ADDR(VPP2_HSC_REGION4_ENDP)
+#define VPP2_HSC_START_PHASE_STEP		0x1913
+#define P_VPP2_HSC_START_PHASE_STEP		VCBUS_REG_ADDR(VPP2_HSC_START_PHASE_STEP)
+#define VPP2_HSC_REGION0_PHASE_SLOPE		0x1914
+#define P_VPP2_HSC_REGION0_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_HSC_REGION0_PHASE_SLOPE)
+#define VPP2_HSC_REGION1_PHASE_SLOPE		0x1915
+#define P_VPP2_HSC_REGION1_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_HSC_REGION1_PHASE_SLOPE)
+#define VPP2_HSC_REGION3_PHASE_SLOPE		0x1916
+#define P_VPP2_HSC_REGION3_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_HSC_REGION3_PHASE_SLOPE)
+#define VPP2_HSC_REGION4_PHASE_SLOPE		0x1917
+#define P_VPP2_HSC_REGION4_PHASE_SLOPE		VCBUS_REG_ADDR(VPP2_HSC_REGION4_PHASE_SLOPE)
+#define VPP2_HSC_PHASE_CTRL			0x1918
+#define P_VPP2_HSC_PHASE_CTRL			VCBUS_REG_ADDR(VPP2_HSC_PHASE_CTRL)
+#define VPP2_SC_MISC				0x1919
+#define P_VPP2_SC_MISC				VCBUS_REG_ADDR(VPP2_SC_MISC)
+#define VPP2_PREBLEND_VD1_H_START_END		0x191a
+#define P_VPP2_PREBLEND_VD1_H_START_END		VCBUS_REG_ADDR(VPP2_PREBLEND_VD1_H_START_END)
+#define VPP2_PREBLEND_VD1_V_START_END		0x191b
+#define P_VPP2_PREBLEND_VD1_V_START_END		VCBUS_REG_ADDR(VPP2_PREBLEND_VD1_V_START_END)
+#define VPP2_POSTBLEND_VD1_H_START_END		0x191c
+#define P_VPP2_POSTBLEND_VD1_H_START_END	VCBUS_REG_ADDR(VPP2_POSTBLEND_VD1_H_START_END)
+#define VPP2_POSTBLEND_VD1_V_START_END		0x191d
+#define P_VPP2_POSTBLEND_VD1_V_START_END	VCBUS_REG_ADDR(VPP2_POSTBLEND_VD1_V_START_END)
+#define VPP2_PREBLEND_H_SIZE			0x1920
+#define P_VPP2_PREBLEND_H_SIZE			VCBUS_REG_ADDR(VPP2_PREBLEND_H_SIZE)
+#define VPP2_POSTBLEND_H_SIZE			0x1921
+#define P_VPP2_POSTBLEND_H_SIZE			VCBUS_REG_ADDR(VPP2_POSTBLEND_H_SIZE)
+#define VPP2_HOLD_LINES				0x1922
+#define P_VPP2_HOLD_LINES			VCBUS_REG_ADDR(VPP2_HOLD_LINES)
+#define VPP2_BLEND_ONECOLOR_CTRL		0x1923
+#define P_VPP2_BLEND_ONECOLOR_CTRL		VCBUS_REG_ADDR(VPP2_BLEND_ONECOLOR_CTRL)
+#define VPP2_PREBLEND_CURRENT_XY		0x1924
+#define P_VPP2_PREBLEND_CURRENT_XY		VCBUS_REG_ADDR(VPP2_PREBLEND_CURRENT_XY)
+#define VPP2_POSTBLEND_CURRENT_XY		0x1925
+#define P_VPP2_POSTBLEND_CURRENT_XY		VCBUS_REG_ADDR(VPP2_POSTBLEND_CURRENT_XY)
+#define VPP2_MISC				0x1926
+#define P_VPP2_MISC				VCBUS_REG_ADDR(VPP2_MISC)
+#define VPP2_OFIFO_SIZE				0x1927
+#define P_VPP2_OFIFO_SIZE			VCBUS_REG_ADDR(VPP2_OFIFO_SIZE)
+#define VPP2_FIFO_STATUS			0x1928
+#define P_VPP2_FIFO_STATUS			VCBUS_REG_ADDR(VPP2_FIFO_STATUS)
+#define VPP2_SMOKE_CTRL				0x1929
+#define P_VPP2_SMOKE_CTRL			VCBUS_REG_ADDR(VPP2_SMOKE_CTRL)
+#define VPP2_SMOKE1_VAL				0x192a
+#define P_VPP2_SMOKE1_VAL			VCBUS_REG_ADDR(VPP2_SMOKE1_VAL)
+#define VPP2_SMOKE2_VAL				0x192b
+#define P_VPP2_SMOKE2_VAL			VCBUS_REG_ADDR(VPP2_SMOKE2_VAL)
+#define VPP2_SMOKE1_H_START_END			0x192d
+#define P_VPP2_SMOKE1_H_START_END		VCBUS_REG_ADDR(VPP2_SMOKE1_H_START_END)
+#define VPP2_SMOKE1_V_START_END			0x192e
+#define P_VPP2_SMOKE1_V_START_END		VCBUS_REG_ADDR(VPP2_SMOKE1_V_START_END)
+#define VPP2_SMOKE2_H_START_END			0x192f
+#define P_VPP2_SMOKE2_H_START_END		VCBUS_REG_ADDR(VPP2_SMOKE2_H_START_END)
+#define VPP2_SMOKE2_V_START_END			0x1930
+#define P_VPP2_SMOKE2_V_START_END		VCBUS_REG_ADDR(VPP2_SMOKE2_V_START_END)
+#define VPP2_SCO_FIFO_CTRL			0x1933
+#define P_VPP2_SCO_FIFO_CTRL			VCBUS_REG_ADDR(VPP2_SCO_FIFO_CTRL)
+#define VPP2_HSC_PHASE_CTRL1			0x1934
+#define P_VPP2_HSC_PHASE_CTRL1			VCBUS_REG_ADDR(VPP2_HSC_PHASE_CTRL1)
+#define VPP2_HSC_INI_PAT_CTRL			0x1935
+#define P_VPP2_HSC_INI_PAT_CTRL			VCBUS_REG_ADDR(VPP2_HSC_INI_PAT_CTRL)
+#define VPP2_VADJ_CTRL				0x1940
+#define P_VPP2_VADJ_CTRL			VCBUS_REG_ADDR(VPP2_VADJ_CTRL)
+#define VPP2_VADJ1_Y				0x1941
+#define P_VPP2_VADJ1_Y				VCBUS_REG_ADDR(VPP2_VADJ1_Y)
+#define VPP2_VADJ1_MA_MB			0x1942
+#define P_VPP2_VADJ1_MA_MB			VCBUS_REG_ADDR(VPP2_VADJ1_MA_MB)
+#define VPP2_VADJ1_MC_MD			0x1943
+#define P_VPP2_VADJ1_MC_MD			VCBUS_REG_ADDR(VPP2_VADJ1_MC_MD)
+#define VPP2_VADJ2_Y				0x1944
+#define P_VPP2_VADJ2_Y				VCBUS_REG_ADDR(VPP2_VADJ2_Y)
+#define VPP2_VADJ2_MA_MB			0x1945
+#define P_VPP2_VADJ2_MA_MB			VCBUS_REG_ADDR(VPP2_VADJ2_MA_MB)
+#define VPP2_VADJ2_MC_MD			0x1946
+#define P_VPP2_VADJ2_MC_MD			VCBUS_REG_ADDR(VPP2_VADJ2_MC_MD)
+#define VPP2_MATRIX_PROBE_COLOR			0x195c
+#define P_VPP2_MATRIX_PROBE_COLOR		VCBUS_REG_ADDR(VPP2_MATRIX_PROBE_COLOR)
+#define VPP2_MATRIX_HL_COLOR			0x195d
+#define P_VPP2_MATRIX_HL_COLOR			VCBUS_REG_ADDR(VPP2_MATRIX_HL_COLOR)
+#define VPP2_MATRIX_PROBE_POS			0x195e
+#define P_VPP2_MATRIX_PROBE_POS			VCBUS_REG_ADDR(VPP2_MATRIX_PROBE_POS)
+#define VPP2_MATRIX_CTRL			0x195f
+#define P_VPP2_MATRIX_CTRL			VCBUS_REG_ADDR(VPP2_MATRIX_CTRL)
+#define VPP2_MATRIX_COEF00_01			0x1960
+#define P_VPP2_MATRIX_COEF00_01			VCBUS_REG_ADDR(VPP2_MATRIX_COEF00_01)
+#define VPP2_MATRIX_COEF02_10			0x1961
+#define P_VPP2_MATRIX_COEF02_10			VCBUS_REG_ADDR(VPP2_MATRIX_COEF02_10)
+#define VPP2_MATRIX_COEF11_12			0x1962
+#define P_VPP2_MATRIX_COEF11_12			VCBUS_REG_ADDR(VPP2_MATRIX_COEF11_12)
+#define VPP2_MATRIX_COEF20_21			0x1963
+#define P_VPP2_MATRIX_COEF20_21			VCBUS_REG_ADDR(VPP2_MATRIX_COEF20_21)
+#define VPP2_MATRIX_COEF22			0x1964
+#define P_VPP2_MATRIX_COEF22			VCBUS_REG_ADDR(VPP2_MATRIX_COEF22)
+#define VPP2_MATRIX_OFFSET0_1			0x1965
+#define P_VPP2_MATRIX_OFFSET0_1			VCBUS_REG_ADDR(VPP2_MATRIX_OFFSET0_1)
+#define VPP2_MATRIX_OFFSET2			0x1966
+#define P_VPP2_MATRIX_OFFSET2			VCBUS_REG_ADDR(VPP2_MATRIX_OFFSET2)
+#define VPP2_MATRIX_PRE_OFFSET0_1		0x1967
+#define P_VPP2_MATRIX_PRE_OFFSET0_1		VCBUS_REG_ADDR(VPP2_MATRIX_PRE_OFFSET0_1)
+#define VPP2_MATRIX_PRE_OFFSET2			0x1968
+#define P_VPP2_MATRIX_PRE_OFFSET2		VCBUS_REG_ADDR(VPP2_MATRIX_PRE_OFFSET2)
+#define VPP2_DUMMY_DATA1			0x1969
+#define P_VPP2_DUMMY_DATA1			VCBUS_REG_ADDR(VPP2_DUMMY_DATA1)
+#define VPP2_GAINOFF_CTRL0			0x196a
+#define P_VPP2_GAINOFF_CTRL0			VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL0)
+#define VPP2_GAINOFF_CTRL1			0x196b
+#define P_VPP2_GAINOFF_CTRL1			VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL1)
+#define VPP2_GAINOFF_CTRL2			0x196c
+#define P_VPP2_GAINOFF_CTRL2			VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL2)
+#define VPP2_GAINOFF_CTRL3			0x196d
+#define P_VPP2_GAINOFF_CTRL3			VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL3)
+#define VPP2_GAINOFF_CTRL4			0x196e
+#define P_VPP2_GAINOFF_CTRL4			VCBUS_REG_ADDR(VPP2_GAINOFF_CTRL4)
+#define VPP2_CHROMA_ADDR_PORT			0x1970
+#define P_VPP2_CHROMA_ADDR_PORT			VCBUS_REG_ADDR(VPP2_CHROMA_ADDR_PORT)
+#define VPP2_CHROMA_DATA_PORT			0x1971
+#define P_VPP2_CHROMA_DATA_PORT			VCBUS_REG_ADDR(VPP2_CHROMA_DATA_PORT)
+#define VPP2_GCLK_CTRL0				0x1972
+#define P_VPP2_GCLK_CTRL0			VCBUS_REG_ADDR(VPP2_GCLK_CTRL0)
+#define VPP2_GCLK_CTRL1				0x1973
+#define P_VPP2_GCLK_CTRL1			VCBUS_REG_ADDR(VPP2_GCLK_CTRL1)
+#define VPP2_SC_GCLK_CTRL			0x1974
+#define P_VPP2_SC_GCLK_CTRL			VCBUS_REG_ADDR(VPP2_SC_GCLK_CTRL)
+#define VPP2_MISC1				0x1976
+#define P_VPP2_MISC1				VCBUS_REG_ADDR(VPP2_MISC1)
+#define VPP2_DNLP_CTRL_00			0x1981
+#define P_VPP2_DNLP_CTRL_00			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_00)
+#define VPP2_DNLP_CTRL_01			0x1982
+#define P_VPP2_DNLP_CTRL_01			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_01)
+#define VPP2_DNLP_CTRL_02			0x1983
+#define P_VPP2_DNLP_CTRL_02			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_02)
+#define VPP2_DNLP_CTRL_03			0x1984
+#define P_VPP2_DNLP_CTRL_03			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_03)
+#define VPP2_DNLP_CTRL_04			0x1985
+#define P_VPP2_DNLP_CTRL_04			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_04)
+#define VPP2_DNLP_CTRL_05			0x1986
+#define P_VPP2_DNLP_CTRL_05			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_05)
+#define VPP2_DNLP_CTRL_06			0x1987
+#define P_VPP2_DNLP_CTRL_06			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_06)
+#define VPP2_DNLP_CTRL_07			0x1988
+#define P_VPP2_DNLP_CTRL_07			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_07)
+#define VPP2_DNLP_CTRL_08			0x1989
+#define P_VPP2_DNLP_CTRL_08			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_08)
+#define VPP2_DNLP_CTRL_09			0x198a
+#define P_VPP2_DNLP_CTRL_09			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_09)
+#define VPP2_DNLP_CTRL_10			0x198b
+#define P_VPP2_DNLP_CTRL_10			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_10)
+#define VPP2_DNLP_CTRL_11			0x198c
+#define P_VPP2_DNLP_CTRL_11			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_11)
+#define VPP2_DNLP_CTRL_12			0x198d
+#define P_VPP2_DNLP_CTRL_12			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_12)
+#define VPP2_DNLP_CTRL_13			0x198e
+#define P_VPP2_DNLP_CTRL_13			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_13)
+#define VPP2_DNLP_CTRL_14			0x198f
+#define P_VPP2_DNLP_CTRL_14			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_14)
+#define VPP2_DNLP_CTRL_15			0x1990
+#define P_VPP2_DNLP_CTRL_15			VCBUS_REG_ADDR(VPP2_DNLP_CTRL_15)
+#define VPP2_VE_ENABLE_CTRL			0x19a1
+#define P_VPP2_VE_ENABLE_CTRL			VCBUS_REG_ADDR(VPP2_VE_ENABLE_CTRL)
+#define VPP2_VE_DEMO_LEFT_TOP_SCREEN_WIDTH	0x19a2
+#define P_VPP2_VE_DEMO_LEFT_TOP_SCREEN_WIDTH	VCBUS_REG_ADDR(VPP2_VE_DEMO_LEFT_TOP_SCREEN_WIDTH)
+#define VPP2_VE_DEMO_CENTER_BAR			0x19a3
+#define P_VPP2_VE_DEMO_CENTER_BAR		VCBUS_REG_ADDR(VPP2_VE_DEMO_CENTER_BAR)
+#define VPP2_VE_H_V_SIZE			0x19a4
+#define P_VPP2_VE_H_V_SIZE			VCBUS_REG_ADDR(VPP2_VE_H_V_SIZE)
+#define VPP2_VDO_MEAS_CTRL			0x19a8
+#define P_VPP2_VDO_MEAS_CTRL			VCBUS_REG_ADDR(VPP2_VDO_MEAS_CTRL)
+#define VPP2_VDO_MEAS_VS_COUNT_HI		0x19a9
+#define P_VPP2_VDO_MEAS_VS_COUNT_HI		VCBUS_REG_ADDR(VPP2_VDO_MEAS_VS_COUNT_HI)
+#define VPP2_VDO_MEAS_VS_COUNT_LO		0x19aa
+#define P_VPP2_VDO_MEAS_VS_COUNT_LO		VCBUS_REG_ADDR(VPP2_VDO_MEAS_VS_COUNT_LO)
+#define VPP2_OSD_VSC_PHASE_STEP			0x19c0
+#define P_VPP2_OSD_VSC_PHASE_STEP		VCBUS_REG_ADDR(VPP2_OSD_VSC_PHASE_STEP)
+#define VPP2_OSD_VSC_INI_PHASE			0x19c1
+#define P_VPP2_OSD_VSC_INI_PHASE		VCBUS_REG_ADDR(VPP2_OSD_VSC_INI_PHASE)
+#define VPP2_OSD_VSC_CTRL0			0x19c2
+#define P_VPP2_OSD_VSC_CTRL0			VCBUS_REG_ADDR(VPP2_OSD_VSC_CTRL0)
+#define VPP2_OSD_HSC_PHASE_STEP			0x19c3
+#define P_VPP2_OSD_HSC_PHASE_STEP		VCBUS_REG_ADDR(VPP2_OSD_HSC_PHASE_STEP)
+#define VPP2_OSD_HSC_INI_PHASE			0x19c4
+#define P_VPP2_OSD_HSC_INI_PHASE		VCBUS_REG_ADDR(VPP2_OSD_HSC_INI_PHASE)
+#define VPP2_OSD_HSC_CTRL0			0x19c5
+#define P_VPP2_OSD_HSC_CTRL0			VCBUS_REG_ADDR(VPP2_OSD_HSC_CTRL0)
+#define VPP2_OSD_HSC_INI_PAT_CTRL		0x19c6
+#define P_VPP2_OSD_HSC_INI_PAT_CTRL		VCBUS_REG_ADDR(VPP2_OSD_HSC_INI_PAT_CTRL)
+#define VPP2_OSD_SC_DUMMY_DATA			0x19c7
+#define P_VPP2_OSD_SC_DUMMY_DATA		VCBUS_REG_ADDR(VPP2_OSD_SC_DUMMY_DATA)
+#define VPP2_OSD_SC_CTRL0			0x19c8
+#define P_VPP2_OSD_SC_CTRL0			VCBUS_REG_ADDR(VPP2_OSD_SC_CTRL0)
+#define VPP2_OSD_SCI_WH_M1			0x19c9
+#define P_VPP2_OSD_SCI_WH_M1			VCBUS_REG_ADDR(VPP2_OSD_SCI_WH_M1)
+#define VPP2_OSD_SCO_H_START_END		0x19ca
+#define P_VPP2_OSD_SCO_H_START_END		VCBUS_REG_ADDR(VPP2_OSD_SCO_H_START_END)
+#define VPP2_OSD_SCO_V_START_END		0x19cb
+#define P_VPP2_OSD_SCO_V_START_END		VCBUS_REG_ADDR(VPP2_OSD_SCO_V_START_END)
+#define VPP2_OSD_SCALE_COEF_IDX			0x19cc
+#define P_VPP2_OSD_SCALE_COEF_IDX		VCBUS_REG_ADDR(VPP2_OSD_SCALE_COEF_IDX)
+#define VPP2_OSD_SCALE_COEF			0x19cd
+#define P_VPP2_OSD_SCALE_COEF			VCBUS_REG_ADDR(VPP2_OSD_SCALE_COEF)
+#define VPP2_INT_LINE_NUM			0x19ce
+#define P_VPP2_INT_LINE_NUM			VCBUS_REG_ADDR(VPP2_INT_LINE_NUM)
+#define VIU_ADDR_START				0x1a00
+#define P_VIU_ADDR_START			VCBUS_REG_ADDR(VIU_ADDR_START)
+#define VIU_ADDR_END				0x1aff
+#define P_VIU_ADDR_END				VCBUS_REG_ADDR(VIU_ADDR_END)
+#define VIU_SW_RESET				0x1a01
+#define P_VIU_SW_RESET				VCBUS_REG_ADDR(VIU_SW_RESET)
+#define VIU_SW_RESET0				0x1a02
+#define P_VIU_SW_RESET0				VCBUS_REG_ADDR(VIU_SW_RESET0)
+#define VIU_MISC_CTRL0				0x1a06
+#define P_VIU_MISC_CTRL0			VCBUS_REG_ADDR(VIU_MISC_CTRL0)
+#define D2D3_INTF_LENGTH			0x1a08
+#define P_D2D3_INTF_LENGTH			VCBUS_REG_ADDR(D2D3_INTF_LENGTH)
+#define D2D3_INTF_CTRL0				0x1a09
+#define P_D2D3_INTF_CTRL0			VCBUS_REG_ADDR(D2D3_INTF_CTRL0)
+#define VIU_OSD1_CTRL_STAT			0x1a10
+#define P_VIU_OSD1_CTRL_STAT			VCBUS_REG_ADDR(VIU_OSD1_CTRL_STAT)
+#define VIU_OSD1_CTRL_STAT2			0x1a2d
+#define P_VIU_OSD1_CTRL_STAT2			VCBUS_REG_ADDR(VIU_OSD1_CTRL_STAT2)
+#define VIU_OSD1_COLOR_ADDR			0x1a11
+#define P_VIU_OSD1_COLOR_ADDR			VCBUS_REG_ADDR(VIU_OSD1_COLOR_ADDR)
+#define VIU_OSD1_COLOR				0x1a12
+#define P_VIU_OSD1_COLOR			VCBUS_REG_ADDR(VIU_OSD1_COLOR)
+#define VIU_OSD1_TCOLOR_AG0			0x1a17
+#define P_VIU_OSD1_TCOLOR_AG0			VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG0)
+#define VIU_OSD1_TCOLOR_AG1			0x1a18
+#define P_VIU_OSD1_TCOLOR_AG1			VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG1)
+#define VIU_OSD1_TCOLOR_AG2			0x1a19
+#define P_VIU_OSD1_TCOLOR_AG2			VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG2)
+#define VIU_OSD1_TCOLOR_AG3			0x1a1a
+#define P_VIU_OSD1_TCOLOR_AG3			VCBUS_REG_ADDR(VIU_OSD1_TCOLOR_AG3)
+#define VIU_OSD1_BLK0_CFG_W0			0x1a1b
+#define P_VIU_OSD1_BLK0_CFG_W0			VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W0)
+#define VIU_OSD1_BLK1_CFG_W0			0x1a1f
+#define P_VIU_OSD1_BLK1_CFG_W0			VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W0)
+#define VIU_OSD1_BLK2_CFG_W0			0x1a23
+#define P_VIU_OSD1_BLK2_CFG_W0			VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W0)
+#define VIU_OSD1_BLK3_CFG_W0			0x1a27
+#define P_VIU_OSD1_BLK3_CFG_W0			VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W0)
+#define VIU_OSD1_BLK0_CFG_W1			0x1a1c
+#define P_VIU_OSD1_BLK0_CFG_W1			VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W1)
+#define VIU_OSD1_BLK1_CFG_W1			0x1a20
+#define P_VIU_OSD1_BLK1_CFG_W1			VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W1)
+#define VIU_OSD1_BLK2_CFG_W1			0x1a24
+#define P_VIU_OSD1_BLK2_CFG_W1			VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W1)
+#define VIU_OSD1_BLK3_CFG_W1			0x1a28
+#define P_VIU_OSD1_BLK3_CFG_W1			VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W1)
+#define VIU_OSD1_BLK0_CFG_W2			0x1a1d
+#define P_VIU_OSD1_BLK0_CFG_W2			VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W2)
+#define VIU_OSD1_BLK1_CFG_W2			0x1a21
+#define P_VIU_OSD1_BLK1_CFG_W2			VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W2)
+#define VIU_OSD1_BLK2_CFG_W2			0x1a25
+#define P_VIU_OSD1_BLK2_CFG_W2			VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W2)
+#define VIU_OSD1_BLK3_CFG_W2			0x1a29
+#define P_VIU_OSD1_BLK3_CFG_W2			VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W2)
+#define VIU_OSD1_BLK0_CFG_W3			0x1a1e
+#define P_VIU_OSD1_BLK0_CFG_W3			VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W3)
+#define VIU_OSD1_BLK1_CFG_W3			0x1a22
+#define P_VIU_OSD1_BLK1_CFG_W3			VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W3)
+#define VIU_OSD1_BLK2_CFG_W3			0x1a26
+#define P_VIU_OSD1_BLK2_CFG_W3			VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W3)
+#define VIU_OSD1_BLK3_CFG_W3			0x1a2a
+#define P_VIU_OSD1_BLK3_CFG_W3			VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W3)
+#define VIU_OSD1_BLK0_CFG_W4			0x1a13
+#define P_VIU_OSD1_BLK0_CFG_W4			VCBUS_REG_ADDR(VIU_OSD1_BLK0_CFG_W4)
+#define VIU_OSD1_BLK1_CFG_W4			0x1a14
+#define P_VIU_OSD1_BLK1_CFG_W4			VCBUS_REG_ADDR(VIU_OSD1_BLK1_CFG_W4)
+#define VIU_OSD1_BLK2_CFG_W4			0x1a15
+#define P_VIU_OSD1_BLK2_CFG_W4			VCBUS_REG_ADDR(VIU_OSD1_BLK2_CFG_W4)
+#define VIU_OSD1_BLK3_CFG_W4			0x1a16
+#define P_VIU_OSD1_BLK3_CFG_W4			VCBUS_REG_ADDR(VIU_OSD1_BLK3_CFG_W4)
+#define VIU_OSD1_FIFO_CTRL_STAT			0x1a2b
+#define P_VIU_OSD1_FIFO_CTRL_STAT		VCBUS_REG_ADDR(VIU_OSD1_FIFO_CTRL_STAT)
+#define VIU_OSD1_TEST_RDDATA			0x1a2c
+#define P_VIU_OSD1_TEST_RDDATA			VCBUS_REG_ADDR(VIU_OSD1_TEST_RDDATA)
+#define VIU_OSD1_PROT_CTRL			0x1a2e
+#define P_VIU_OSD1_PROT_CTRL			VCBUS_REG_ADDR(VIU_OSD1_PROT_CTRL)
+#define VIU_OSD2_CTRL_STAT			0x1a30
+#define P_VIU_OSD2_CTRL_STAT			VCBUS_REG_ADDR(VIU_OSD2_CTRL_STAT)
+#define VIU_OSD2_CTRL_STAT2			0x1a4d
+#define P_VIU_OSD2_CTRL_STAT2			VCBUS_REG_ADDR(VIU_OSD2_CTRL_STAT2)
+#define VIU_OSD2_COLOR_ADDR			0x1a31
+#define P_VIU_OSD2_COLOR_ADDR			VCBUS_REG_ADDR(VIU_OSD2_COLOR_ADDR)
+#define VIU_OSD2_COLOR				0x1a32
+#define P_VIU_OSD2_COLOR			VCBUS_REG_ADDR(VIU_OSD2_COLOR)
+#define VIU_OSD2_HL1_H_START_END		0x1a33
+#define P_VIU_OSD2_HL1_H_START_END		VCBUS_REG_ADDR(VIU_OSD2_HL1_H_START_END)
+#define VIU_OSD2_HL1_V_START_END		0x1a34
+#define P_VIU_OSD2_HL1_V_START_END		VCBUS_REG_ADDR(VIU_OSD2_HL1_V_START_END)
+#define VIU_OSD2_HL2_H_START_END		0x1a35
+#define P_VIU_OSD2_HL2_H_START_END		VCBUS_REG_ADDR(VIU_OSD2_HL2_H_START_END)
+#define VIU_OSD2_HL2_V_START_END		0x1a36
+#define P_VIU_OSD2_HL2_V_START_END		VCBUS_REG_ADDR(VIU_OSD2_HL2_V_START_END)
+#define VIU_OSD2_TCOLOR_AG0			0x1a37
+#define P_VIU_OSD2_TCOLOR_AG0			VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG0)
+#define VIU_OSD2_TCOLOR_AG1			0x1a38
+#define P_VIU_OSD2_TCOLOR_AG1			VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG1)
+#define VIU_OSD2_TCOLOR_AG2			0x1a39
+#define P_VIU_OSD2_TCOLOR_AG2			VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG2)
+#define VIU_OSD2_TCOLOR_AG3			0x1a3a
+#define P_VIU_OSD2_TCOLOR_AG3			VCBUS_REG_ADDR(VIU_OSD2_TCOLOR_AG3)
+#define VIU_OSD2_BLK0_CFG_W0			0x1a3b
+#define P_VIU_OSD2_BLK0_CFG_W0			VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W0)
+#define VIU_OSD2_BLK1_CFG_W0			0x1a3f
+#define P_VIU_OSD2_BLK1_CFG_W0			VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W0)
+#define VIU_OSD2_BLK2_CFG_W0			0x1a43
+#define P_VIU_OSD2_BLK2_CFG_W0			VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W0)
+#define VIU_OSD2_BLK3_CFG_W0			0x1a47
+#define P_VIU_OSD2_BLK3_CFG_W0			VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W0)
+#define VIU_OSD2_BLK0_CFG_W1			0x1a3c
+#define P_VIU_OSD2_BLK0_CFG_W1			VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W1)
+#define VIU_OSD2_BLK1_CFG_W1			0x1a40
+#define P_VIU_OSD2_BLK1_CFG_W1			VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W1)
+#define VIU_OSD2_BLK2_CFG_W1			0x1a44
+#define P_VIU_OSD2_BLK2_CFG_W1			VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W1)
+#define VIU_OSD2_BLK3_CFG_W1			0x1a48
+#define P_VIU_OSD2_BLK3_CFG_W1			VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W1)
+#define VIU_OSD2_BLK0_CFG_W2			0x1a3d
+#define P_VIU_OSD2_BLK0_CFG_W2			VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W2)
+#define VIU_OSD2_BLK1_CFG_W2			0x1a41
+#define P_VIU_OSD2_BLK1_CFG_W2			VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W2)
+#define VIU_OSD2_BLK2_CFG_W2			0x1a45
+#define P_VIU_OSD2_BLK2_CFG_W2			VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W2)
+#define VIU_OSD2_BLK3_CFG_W2			0x1a49
+#define P_VIU_OSD2_BLK3_CFG_W2			VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W2)
+#define VIU_OSD2_BLK0_CFG_W3			0x1a3e
+#define P_VIU_OSD2_BLK0_CFG_W3			VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W3)
+#define VIU_OSD2_BLK1_CFG_W3			0x1a42
+#define P_VIU_OSD2_BLK1_CFG_W3			VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W3)
+#define VIU_OSD2_BLK2_CFG_W3			0x1a46
+#define P_VIU_OSD2_BLK2_CFG_W3			VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W3)
+#define VIU_OSD2_BLK3_CFG_W3			0x1a4a
+#define P_VIU_OSD2_BLK3_CFG_W3			VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W3)
+#define VIU_OSD2_BLK0_CFG_W4			0x1a64
+#define P_VIU_OSD2_BLK0_CFG_W4			VCBUS_REG_ADDR(VIU_OSD2_BLK0_CFG_W4)
+#define VIU_OSD2_BLK1_CFG_W4			0x1a65
+#define P_VIU_OSD2_BLK1_CFG_W4			VCBUS_REG_ADDR(VIU_OSD2_BLK1_CFG_W4)
+#define VIU_OSD2_BLK2_CFG_W4			0x1a66
+#define P_VIU_OSD2_BLK2_CFG_W4			VCBUS_REG_ADDR(VIU_OSD2_BLK2_CFG_W4)
+#define VIU_OSD2_BLK3_CFG_W4			0x1a67
+#define P_VIU_OSD2_BLK3_CFG_W4			VCBUS_REG_ADDR(VIU_OSD2_BLK3_CFG_W4)
+#define VIU_OSD2_FIFO_CTRL_STAT			0x1a4b
+#define P_VIU_OSD2_FIFO_CTRL_STAT		VCBUS_REG_ADDR(VIU_OSD2_FIFO_CTRL_STAT)
+#define VIU_OSD2_TEST_RDDATA			0x1a4c
+#define P_VIU_OSD2_TEST_RDDATA			VCBUS_REG_ADDR(VIU_OSD2_TEST_RDDATA)
+#define VIU_OSD2_PROT_CTRL			0x1a4e
+#define P_VIU_OSD2_PROT_CTRL			VCBUS_REG_ADDR(VIU_OSD2_PROT_CTRL)
+#define VD1_IF0_GEN_REG				0x1a50
+#define P_VD1_IF0_GEN_REG			VCBUS_REG_ADDR(VD1_IF0_GEN_REG)
+#define VD1_IF0_CANVAS0				0x1a51
+#define P_VD1_IF0_CANVAS0			VCBUS_REG_ADDR(VD1_IF0_CANVAS0)
+#define VD1_IF0_CANVAS1				0x1a52
+#define P_VD1_IF0_CANVAS1			VCBUS_REG_ADDR(VD1_IF0_CANVAS1)
+#define VD1_IF0_LUMA_X0				0x1a53
+#define P_VD1_IF0_LUMA_X0			VCBUS_REG_ADDR(VD1_IF0_LUMA_X0)
+#define VD1_IF0_LUMA_Y0				0x1a54
+#define P_VD1_IF0_LUMA_Y0			VCBUS_REG_ADDR(VD1_IF0_LUMA_Y0)
+#define VD1_IF0_CHROMA_X0			0x1a55
+#define P_VD1_IF0_CHROMA_X0			VCBUS_REG_ADDR(VD1_IF0_CHROMA_X0)
+#define VD1_IF0_CHROMA_Y0			0x1a56
+#define P_VD1_IF0_CHROMA_Y0			VCBUS_REG_ADDR(VD1_IF0_CHROMA_Y0)
+#define VD1_IF0_LUMA_X1				0x1a57
+#define P_VD1_IF0_LUMA_X1			VCBUS_REG_ADDR(VD1_IF0_LUMA_X1)
+#define VD1_IF0_LUMA_Y1				0x1a58
+#define P_VD1_IF0_LUMA_Y1			VCBUS_REG_ADDR(VD1_IF0_LUMA_Y1)
+#define VD1_IF0_CHROMA_X1			0x1a59
+#define P_VD1_IF0_CHROMA_X1			VCBUS_REG_ADDR(VD1_IF0_CHROMA_X1)
+#define VD1_IF0_CHROMA_Y1			0x1a5a
+#define P_VD1_IF0_CHROMA_Y1			VCBUS_REG_ADDR(VD1_IF0_CHROMA_Y1)
+#define VD1_IF0_RPT_LOOP			0x1a5b
+#define P_VD1_IF0_RPT_LOOP			VCBUS_REG_ADDR(VD1_IF0_RPT_LOOP)
+#define VD1_IF0_LUMA0_RPT_PAT			0x1a5c
+#define P_VD1_IF0_LUMA0_RPT_PAT			VCBUS_REG_ADDR(VD1_IF0_LUMA0_RPT_PAT)
+#define VD1_IF0_CHROMA0_RPT_PAT			0x1a5d
+#define P_VD1_IF0_CHROMA0_RPT_PAT		VCBUS_REG_ADDR(VD1_IF0_CHROMA0_RPT_PAT)
+#define VD1_IF0_LUMA1_RPT_PAT			0x1a5e
+#define P_VD1_IF0_LUMA1_RPT_PAT			VCBUS_REG_ADDR(VD1_IF0_LUMA1_RPT_PAT)
+#define VD1_IF0_CHROMA1_RPT_PAT			0x1a5f
+#define P_VD1_IF0_CHROMA1_RPT_PAT		VCBUS_REG_ADDR(VD1_IF0_CHROMA1_RPT_PAT)
+#define VD1_IF0_LUMA_PSEL			0x1a60
+#define P_VD1_IF0_LUMA_PSEL			VCBUS_REG_ADDR(VD1_IF0_LUMA_PSEL)
+#define VD1_IF0_CHROMA_PSEL			0x1a61
+#define P_VD1_IF0_CHROMA_PSEL			VCBUS_REG_ADDR(VD1_IF0_CHROMA_PSEL)
+#define VD1_IF0_DUMMY_PIXEL			0x1a62
+#define P_VD1_IF0_DUMMY_PIXEL			VCBUS_REG_ADDR(VD1_IF0_DUMMY_PIXEL)
+#define VD1_IF0_LUMA_FIFO_SIZE			0x1a63
+#define P_VD1_IF0_LUMA_FIFO_SIZE		VCBUS_REG_ADDR(VD1_IF0_LUMA_FIFO_SIZE)
+#define VD1_IF0_RANGE_MAP_Y			0x1a6a
+#define P_VD1_IF0_RANGE_MAP_Y			VCBUS_REG_ADDR(VD1_IF0_RANGE_MAP_Y)
+#define VD1_IF0_RANGE_MAP_CB			0x1a6b
+#define P_VD1_IF0_RANGE_MAP_CB			VCBUS_REG_ADDR(VD1_IF0_RANGE_MAP_CB)
+#define VD1_IF0_RANGE_MAP_CR			0x1a6c
+#define P_VD1_IF0_RANGE_MAP_CR			VCBUS_REG_ADDR(VD1_IF0_RANGE_MAP_CR)
+#define VD1_IF0_GEN_REG2			0x1a6d
+#define P_VD1_IF0_GEN_REG2			VCBUS_REG_ADDR(VD1_IF0_GEN_REG2)
+#define VD1_IF0_PROT_CNTL			0x1a6e
+#define P_VD1_IF0_PROT_CNTL			VCBUS_REG_ADDR(VD1_IF0_PROT_CNTL)
+#define VD1_IF0_URGENT_CTRL			0x1a6f
+#define P_VD1_IF0_URGENT_CTRL			VCBUS_REG_ADDR(VD1_IF0_URGENT_CTRL)
+#define VIU_VD1_FMT_CTRL			0x1a68
+#define P_VIU_VD1_FMT_CTRL			VCBUS_REG_ADDR(VIU_VD1_FMT_CTRL)
+#define VIU_VD1_FMT_W				0x1a69
+#define P_VIU_VD1_FMT_W				VCBUS_REG_ADDR(VIU_VD1_FMT_W)
+#define VD2_IF0_GEN_REG				0x1a70
+#define P_VD2_IF0_GEN_REG			VCBUS_REG_ADDR(VD2_IF0_GEN_REG)
+#define VD2_IF0_CANVAS0				0x1a71
+#define P_VD2_IF0_CANVAS0			VCBUS_REG_ADDR(VD2_IF0_CANVAS0)
+#define VD2_IF0_CANVAS1				0x1a72
+#define P_VD2_IF0_CANVAS1			VCBUS_REG_ADDR(VD2_IF0_CANVAS1)
+#define VD2_IF0_LUMA_X0				0x1a73
+#define P_VD2_IF0_LUMA_X0			VCBUS_REG_ADDR(VD2_IF0_LUMA_X0)
+#define VD2_IF0_LUMA_Y0				0x1a74
+#define P_VD2_IF0_LUMA_Y0			VCBUS_REG_ADDR(VD2_IF0_LUMA_Y0)
+#define VD2_IF0_CHROMA_X0			0x1a75
+#define P_VD2_IF0_CHROMA_X0			VCBUS_REG_ADDR(VD2_IF0_CHROMA_X0)
+#define VD2_IF0_CHROMA_Y0			0x1a76
+#define P_VD2_IF0_CHROMA_Y0			VCBUS_REG_ADDR(VD2_IF0_CHROMA_Y0)
+#define VD2_IF0_LUMA_X1				0x1a77
+#define P_VD2_IF0_LUMA_X1			VCBUS_REG_ADDR(VD2_IF0_LUMA_X1)
+#define VD2_IF0_LUMA_Y1				0x1a78
+#define P_VD2_IF0_LUMA_Y1			VCBUS_REG_ADDR(VD2_IF0_LUMA_Y1)
+#define VD2_IF0_CHROMA_X1			0x1a79
+#define P_VD2_IF0_CHROMA_X1			VCBUS_REG_ADDR(VD2_IF0_CHROMA_X1)
+#define VD2_IF0_CHROMA_Y1			0x1a7a
+#define P_VD2_IF0_CHROMA_Y1			VCBUS_REG_ADDR(VD2_IF0_CHROMA_Y1)
+#define VD2_IF0_RPT_LOOP			0x1a7b
+#define P_VD2_IF0_RPT_LOOP			VCBUS_REG_ADDR(VD2_IF0_RPT_LOOP)
+#define VD2_IF0_LUMA0_RPT_PAT			0x1a7c
+#define P_VD2_IF0_LUMA0_RPT_PAT			VCBUS_REG_ADDR(VD2_IF0_LUMA0_RPT_PAT)
+#define VD2_IF0_CHROMA0_RPT_PAT			0x1a7d
+#define P_VD2_IF0_CHROMA0_RPT_PAT		VCBUS_REG_ADDR(VD2_IF0_CHROMA0_RPT_PAT)
+#define VD2_IF0_LUMA1_RPT_PAT			0x1a7e
+#define P_VD2_IF0_LUMA1_RPT_PAT			VCBUS_REG_ADDR(VD2_IF0_LUMA1_RPT_PAT)
+#define VD2_IF0_CHROMA1_RPT_PAT			0x1a7f
+#define P_VD2_IF0_CHROMA1_RPT_PAT		VCBUS_REG_ADDR(VD2_IF0_CHROMA1_RPT_PAT)
+#define VD2_IF0_LUMA_PSEL			0x1a80
+#define P_VD2_IF0_LUMA_PSEL			VCBUS_REG_ADDR(VD2_IF0_LUMA_PSEL)
+#define VD2_IF0_CHROMA_PSEL			0x1a81
+#define P_VD2_IF0_CHROMA_PSEL			VCBUS_REG_ADDR(VD2_IF0_CHROMA_PSEL)
+#define VD2_IF0_DUMMY_PIXEL			0x1a82
+#define P_VD2_IF0_DUMMY_PIXEL			VCBUS_REG_ADDR(VD2_IF0_DUMMY_PIXEL)
+#define VD2_IF0_LUMA_FIFO_SIZE			0x1a83
+#define P_VD2_IF0_LUMA_FIFO_SIZE		VCBUS_REG_ADDR(VD2_IF0_LUMA_FIFO_SIZE)
+#define VD2_IF0_RANGE_MAP_Y			0x1a8a
+#define P_VD2_IF0_RANGE_MAP_Y			VCBUS_REG_ADDR(VD2_IF0_RANGE_MAP_Y)
+#define VD2_IF0_RANGE_MAP_CB			0x1a8b
+#define P_VD2_IF0_RANGE_MAP_CB			VCBUS_REG_ADDR(VD2_IF0_RANGE_MAP_CB)
+#define VD2_IF0_RANGE_MAP_CR			0x1a8c
+#define P_VD2_IF0_RANGE_MAP_CR			VCBUS_REG_ADDR(VD2_IF0_RANGE_MAP_CR)
+#define VD2_IF0_GEN_REG2			0x1a8d
+#define P_VD2_IF0_GEN_REG2			VCBUS_REG_ADDR(VD2_IF0_GEN_REG2)
+#define VD2_IF0_PROT_CNTL			0x1a8e
+#define P_VD2_IF0_PROT_CNTL			VCBUS_REG_ADDR(VD2_IF0_PROT_CNTL)
+#define VD2_IF0_URGENT_CTRL			0x1a8f
+#define P_VD2_IF0_URGENT_CTRL			VCBUS_REG_ADDR(VD2_IF0_URGENT_CTRL)
+#define VIU_VD2_FMT_CTRL			0x1a88
+#define P_VIU_VD2_FMT_CTRL			VCBUS_REG_ADDR(VIU_VD2_FMT_CTRL)
+#define VIU_VD2_FMT_W				0x1a89
+#define P_VIU_VD2_FMT_W				VCBUS_REG_ADDR(VIU_VD2_FMT_W)
+#define LDIM_STTS_GCLK_CTRL0			0x1a90
+#define P_LDIM_STTS_GCLK_CTRL0			VCBUS_REG_ADDR(LDIM_STTS_GCLK_CTRL0)
+#define LDIM_STTS_CTRL0				0x1a91
+#define P_LDIM_STTS_CTRL0			VCBUS_REG_ADDR(LDIM_STTS_CTRL0)
+#define LDIM_STTS_WIDTHM1_HEIGHTM1		0x1a92
+#define P_LDIM_STTS_WIDTHM1_HEIGHTM1		VCBUS_REG_ADDR(LDIM_STTS_WIDTHM1_HEIGHTM1)
+#define LDIM_STTS_MATRIX_COEF00_01		0x1a93
+#define P_LDIM_STTS_MATRIX_COEF00_01		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF00_01)
+#define LDIM_STTS_MATRIX_COEF02_10		0x1a94
+#define P_LDIM_STTS_MATRIX_COEF02_10		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF02_10)
+#define LDIM_STTS_MATRIX_COEF11_12		0x1a95
+#define P_LDIM_STTS_MATRIX_COEF11_12		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF11_12)
+#define LDIM_STTS_MATRIX_COEF20_21		0x1a96
+#define P_LDIM_STTS_MATRIX_COEF20_21		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF20_21)
+#define LDIM_STTS_MATRIX_COEF22			0x1a97
+#define P_LDIM_STTS_MATRIX_COEF22		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_COEF22)
+#define LDIM_STTS_MATRIX_OFFSET0_1		0x1a98
+#define P_LDIM_STTS_MATRIX_OFFSET0_1		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_OFFSET0_1)
+#define LDIM_STTS_MATRIX_OFFSET2		0x1a99
+#define P_LDIM_STTS_MATRIX_OFFSET2		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_OFFSET2)
+#define LDIM_STTS_MATRIX_PRE_OFFSET0_1		0x1a9a
+#define P_LDIM_STTS_MATRIX_PRE_OFFSET0_1	VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PRE_OFFSET0_1)
+#define LDIM_STTS_MATRIX_PRE_OFFSET2		0x1a9b
+#define P_LDIM_STTS_MATRIX_PRE_OFFSET2		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PRE_OFFSET2)
+#define LDIM_STTS_MATRIX_HL_COLOR		0x1a9c
+#define P_LDIM_STTS_MATRIX_HL_COLOR		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_HL_COLOR)
+#define LDIM_STTS_MATRIX_PROBE_POS		0x1a9d
+#define P_LDIM_STTS_MATRIX_PROBE_POS		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PROBE_POS)
+#define LDIM_STTS_MATRIX_PROBE_COLOR		0x1a9e
+#define P_LDIM_STTS_MATRIX_PROBE_COLOR		VCBUS_REG_ADDR(LDIM_STTS_MATRIX_PROBE_COLOR)
+#define LDIM_STTS_HIST_REGION_IDX		0x1aa0
+#define P_LDIM_STTS_HIST_REGION_IDX		VCBUS_REG_ADDR(LDIM_STTS_HIST_REGION_IDX)
+#define LDIM_STTS_HIST_SET_REGION		0x1aa1
+#define P_LDIM_STTS_HIST_SET_REGION		VCBUS_REG_ADDR(LDIM_STTS_HIST_SET_REGION)
+#define LDIM_STTS_HIST_READ_REGION		0x1aa2
+#define P_LDIM_STTS_HIST_READ_REGION		VCBUS_REG_ADDR(LDIM_STTS_HIST_READ_REGION)
+#define DI_IF1_URGENT_CTRL			0x1aa3
+#define P_DI_IF1_URGENT_CTRL			VCBUS_REG_ADDR(DI_IF1_URGENT_CTRL)
+#define DI_INP_URGENT_CTRL			0x1aa4
+#define P_DI_INP_URGENT_CTRL			VCBUS_REG_ADDR(DI_INP_URGENT_CTRL)
+#define DI_MEM_URGENT_CTRL			0x1aa5
+#define P_DI_MEM_URGENT_CTRL			VCBUS_REG_ADDR(DI_MEM_URGENT_CTRL)
+#define DI_CHAN2_URGENT_CTRL			0x1aa6
+#define P_DI_CHAN2_URGENT_CTRL			VCBUS_REG_ADDR(DI_CHAN2_URGENT_CTRL)
+#define DI_PRE_CTRL				0x1700
+#define P_DI_PRE_CTRL				VCBUS_REG_ADDR(DI_PRE_CTRL)
+#define DI_POST_CTRL				0x1701
+#define P_DI_POST_CTRL				VCBUS_REG_ADDR(DI_POST_CTRL)
+#define DI_POST_SIZE				0x1702
+#define P_DI_POST_SIZE				VCBUS_REG_ADDR(DI_POST_SIZE)
+#define DI_PRE_SIZE				0x1703
+#define P_DI_PRE_SIZE				VCBUS_REG_ADDR(DI_PRE_SIZE)
+#define DI_EI_CTRL0				0x1704
+#define P_DI_EI_CTRL0				VCBUS_REG_ADDR(DI_EI_CTRL0)
+#define DI_EI_CTRL1				0x1705
+#define P_DI_EI_CTRL1				VCBUS_REG_ADDR(DI_EI_CTRL1)
+#define DI_EI_CTRL2				0x1706
+#define P_DI_EI_CTRL2				VCBUS_REG_ADDR(DI_EI_CTRL2)
+#define DI_NR_CTRL0				0x1707
+#define P_DI_NR_CTRL0				VCBUS_REG_ADDR(DI_NR_CTRL0)
+#define DI_NR_CTRL1				0x1708
+#define P_DI_NR_CTRL1				VCBUS_REG_ADDR(DI_NR_CTRL1)
+#define DI_NR_CTRL2				0x1709
+#define P_DI_NR_CTRL2				VCBUS_REG_ADDR(DI_NR_CTRL2)
+#define DI_MTN_CTRL1				0x170c
+#define P_DI_MTN_CTRL1				VCBUS_REG_ADDR(DI_MTN_CTRL1)
+#define DI_BLEND_CTRL				0x170d
+#define P_DI_BLEND_CTRL				VCBUS_REG_ADDR(DI_BLEND_CTRL)
+#define DI_BLEND_REG0_X				0x1710
+#define P_DI_BLEND_REG0_X			VCBUS_REG_ADDR(DI_BLEND_REG0_X)
+#define DI_BLEND_REG0_Y				0x1711
+#define P_DI_BLEND_REG0_Y			VCBUS_REG_ADDR(DI_BLEND_REG0_Y)
+#define DI_BLEND_REG1_X				0x1712
+#define P_DI_BLEND_REG1_X			VCBUS_REG_ADDR(DI_BLEND_REG1_X)
+#define DI_BLEND_REG1_Y				0x1713
+#define P_DI_BLEND_REG1_Y			VCBUS_REG_ADDR(DI_BLEND_REG1_Y)
+#define DI_BLEND_REG2_X				0x1714
+#define P_DI_BLEND_REG2_X			VCBUS_REG_ADDR(DI_BLEND_REG2_X)
+#define DI_BLEND_REG2_Y				0x1715
+#define P_DI_BLEND_REG2_Y			VCBUS_REG_ADDR(DI_BLEND_REG2_Y)
+#define DI_BLEND_REG3_X				0x1716
+#define P_DI_BLEND_REG3_X			VCBUS_REG_ADDR(DI_BLEND_REG3_X)
+#define DI_BLEND_REG3_Y				0x1717
+#define P_DI_BLEND_REG3_Y			VCBUS_REG_ADDR(DI_BLEND_REG3_Y)
+#define DI_CLKG_CTRL				0x1718
+#define P_DI_CLKG_CTRL				VCBUS_REG_ADDR(DI_CLKG_CTRL)
+#define DI_EI_CTRL3				0x1719
+#define P_DI_EI_CTRL3				VCBUS_REG_ADDR(DI_EI_CTRL3)
+#define DI_EI_CTRL4				0x171a
+#define P_DI_EI_CTRL4				VCBUS_REG_ADDR(DI_EI_CTRL4)
+#define DI_EI_CTRL5				0x171b
+#define P_DI_EI_CTRL5				VCBUS_REG_ADDR(DI_EI_CTRL5)
+#define DI_EI_CTRL6				0x171c
+#define P_DI_EI_CTRL6				VCBUS_REG_ADDR(DI_EI_CTRL6)
+#define DI_EI_CTRL7				0x171d
+#define P_DI_EI_CTRL7				VCBUS_REG_ADDR(DI_EI_CTRL7)
+#define DI_EI_CTRL8				0x171e
+#define P_DI_EI_CTRL8				VCBUS_REG_ADDR(DI_EI_CTRL8)
+#define DI_EI_CTRL9				0x171f
+#define P_DI_EI_CTRL9				VCBUS_REG_ADDR(DI_EI_CTRL9)
+#define DI_EI_CTRL10				0x1793
+#define P_DI_EI_CTRL10				VCBUS_REG_ADDR(DI_EI_CTRL10)
+#define DI_EI_CTRL11				0x179e
+#define P_DI_EI_CTRL11				VCBUS_REG_ADDR(DI_EI_CTRL11)
+#define DI_EI_CTRL12				0x179f
+#define P_DI_EI_CTRL12				VCBUS_REG_ADDR(DI_EI_CTRL12)
+#define DI_EI_CTRL13				0x17a8
+#define P_DI_EI_CTRL13				VCBUS_REG_ADDR(DI_EI_CTRL13)
+#define DI_EI_XWIN0				0x1798
+#define P_DI_EI_XWIN0				VCBUS_REG_ADDR(DI_EI_XWIN0)
+#define DI_EI_XWIN1				0x1799
+#define P_DI_EI_XWIN1				VCBUS_REG_ADDR(DI_EI_XWIN1)
+#define DI_MC_REG0_X				0x1720
+#define P_DI_MC_REG0_X				VCBUS_REG_ADDR(DI_MC_REG0_X)
+#define DI_MC_REG0_Y				0x1721
+#define P_DI_MC_REG0_Y				VCBUS_REG_ADDR(DI_MC_REG0_Y)
+#define DI_MC_REG1_X				0x1722
+#define P_DI_MC_REG1_X				VCBUS_REG_ADDR(DI_MC_REG1_X)
+#define DI_MC_REG1_Y				0x1723
+#define P_DI_MC_REG1_Y				VCBUS_REG_ADDR(DI_MC_REG1_Y)
+#define DI_MC_REG2_X				0x1724
+#define P_DI_MC_REG2_X				VCBUS_REG_ADDR(DI_MC_REG2_X)
+#define DI_MC_REG2_Y				0x1725
+#define P_DI_MC_REG2_Y				VCBUS_REG_ADDR(DI_MC_REG2_Y)
+#define DI_MC_REG3_X				0x1726
+#define P_DI_MC_REG3_X				VCBUS_REG_ADDR(DI_MC_REG3_X)
+#define DI_MC_REG3_Y				0x1727
+#define P_DI_MC_REG3_Y				VCBUS_REG_ADDR(DI_MC_REG3_Y)
+#define DI_MC_REG4_X				0x1728
+#define P_DI_MC_REG4_X				VCBUS_REG_ADDR(DI_MC_REG4_X)
+#define DI_MC_REG4_Y				0x1729
+#define P_DI_MC_REG4_Y				VCBUS_REG_ADDR(DI_MC_REG4_Y)
+#define DI_MC_32LVL0				0x172a
+#define P_DI_MC_32LVL0				VCBUS_REG_ADDR(DI_MC_32LVL0)
+#define DI_MC_32LVL1				0x172b
+#define P_DI_MC_32LVL1				VCBUS_REG_ADDR(DI_MC_32LVL1)
+#define DI_MC_22LVL0				0x172c
+#define P_DI_MC_22LVL0				VCBUS_REG_ADDR(DI_MC_22LVL0)
+#define DI_MC_22LVL1				0x172d
+#define P_DI_MC_22LVL1				VCBUS_REG_ADDR(DI_MC_22LVL1)
+#define DI_MC_22LVL2				0x172e
+#define P_DI_MC_22LVL2				VCBUS_REG_ADDR(DI_MC_22LVL2)
+#define DI_MC_CTRL				0x172f
+#define P_DI_MC_CTRL				VCBUS_REG_ADDR(DI_MC_CTRL)
+#define DI_INTR_CTRL				0x1730
+#define P_DI_INTR_CTRL				VCBUS_REG_ADDR(DI_INTR_CTRL)
+#define DI_INFO_ADDR				0x1731
+#define P_DI_INFO_ADDR				VCBUS_REG_ADDR(DI_INFO_ADDR)
+#define DI_INFO_DATA				0x1732
+#define P_DI_INFO_DATA				VCBUS_REG_ADDR(DI_INFO_DATA)
+#define DI_PRE_HOLD				0x1733
+#define P_DI_PRE_HOLD				VCBUS_REG_ADDR(DI_PRE_HOLD)
+#define DI_MTN_1_CTRL1				0x1740
+#define P_DI_MTN_1_CTRL1			VCBUS_REG_ADDR(DI_MTN_1_CTRL1)
+#define DI_MTN_1_CTRL2				0x1741
+#define P_DI_MTN_1_CTRL2			VCBUS_REG_ADDR(DI_MTN_1_CTRL2)
+#define DI_MTN_1_CTRL3				0x1742
+#define P_DI_MTN_1_CTRL3			VCBUS_REG_ADDR(DI_MTN_1_CTRL3)
+#define DI_MTN_1_CTRL4				0x1743
+#define P_DI_MTN_1_CTRL4			VCBUS_REG_ADDR(DI_MTN_1_CTRL4)
+#define DI_MTN_1_CTRL5				0x1744
+#define P_DI_MTN_1_CTRL5			VCBUS_REG_ADDR(DI_MTN_1_CTRL5)
+#define DI_MTN_1_CTRL6				0x17a9
+#define P_DI_MTN_1_CTRL6			VCBUS_REG_ADDR(DI_MTN_1_CTRL6)
+#define DI_MTN_1_CTRL7				0x17aa
+#define P_DI_MTN_1_CTRL7			VCBUS_REG_ADDR(DI_MTN_1_CTRL7)
+#define DI_MTN_1_CTRL8				0x17ab
+#define P_DI_MTN_1_CTRL8			VCBUS_REG_ADDR(DI_MTN_1_CTRL8)
+#define DI_MTN_1_CTRL9				0x17ac
+#define P_DI_MTN_1_CTRL9			VCBUS_REG_ADDR(DI_MTN_1_CTRL9)
+#define DI_MTN_1_CTRL10				0x17ad
+#define P_DI_MTN_1_CTRL10			VCBUS_REG_ADDR(DI_MTN_1_CTRL10)
+#define DI_MTN_1_CTRL11				0x17ae
+#define P_DI_MTN_1_CTRL11			VCBUS_REG_ADDR(DI_MTN_1_CTRL11)
+#define DI_MTN_1_CTRL12				0x17af
+#define P_DI_MTN_1_CTRL12			VCBUS_REG_ADDR(DI_MTN_1_CTRL12)
+#define DET3D_MOTN_CFG				0x1734
+#define P_DET3D_MOTN_CFG			VCBUS_REG_ADDR(DET3D_MOTN_CFG)
+#define DET3D_CB_CFG				0x1735
+#define P_DET3D_CB_CFG				VCBUS_REG_ADDR(DET3D_CB_CFG)
+#define DET3D_SPLT_CFG				0x1736
+#define P_DET3D_SPLT_CFG			VCBUS_REG_ADDR(DET3D_SPLT_CFG)
+#define DET3D_HV_MUTE				0x1737
+#define P_DET3D_HV_MUTE				VCBUS_REG_ADDR(DET3D_HV_MUTE)
+#define DET3D_MAT_STA_P1M1			0x1738
+#define P_DET3D_MAT_STA_P1M1			VCBUS_REG_ADDR(DET3D_MAT_STA_P1M1)
+#define DET3D_MAT_STA_P1TH			0x1739
+#define P_DET3D_MAT_STA_P1TH			VCBUS_REG_ADDR(DET3D_MAT_STA_P1TH)
+#define DET3D_MAT_STA_M1TH			0x173a
+#define P_DET3D_MAT_STA_M1TH			VCBUS_REG_ADDR(DET3D_MAT_STA_M1TH)
+#define DET3D_MAT_STA_RSFT			0x173b
+#define P_DET3D_MAT_STA_RSFT			VCBUS_REG_ADDR(DET3D_MAT_STA_RSFT)
+#define DET3D_MAT_SYMTC_TH			0x173c
+#define P_DET3D_MAT_SYMTC_TH			VCBUS_REG_ADDR(DET3D_MAT_SYMTC_TH)
+#define DET3D_RO_DET_CB_HOR			0x173d
+#define P_DET3D_RO_DET_CB_HOR			VCBUS_REG_ADDR(DET3D_RO_DET_CB_HOR)
+#define DET3D_RO_DET_CB_VER			0x173e
+#define P_DET3D_RO_DET_CB_VER			VCBUS_REG_ADDR(DET3D_RO_DET_CB_VER)
+#define DET3D_RO_SPLT_HT			0x173f
+#define P_DET3D_RO_SPLT_HT			VCBUS_REG_ADDR(DET3D_RO_SPLT_HT)
+#define NR2_MET_NM_CTRL				0x1745
+#define P_NR2_MET_NM_CTRL			VCBUS_REG_ADDR(NR2_MET_NM_CTRL)
+#define NR2_MET_NM_YCTRL			0x1746
+#define P_NR2_MET_NM_YCTRL			VCBUS_REG_ADDR(NR2_MET_NM_YCTRL)
+#define NR2_MET_NM_CCTRL			0x1747
+#define P_NR2_MET_NM_CCTRL			VCBUS_REG_ADDR(NR2_MET_NM_CCTRL)
+#define NR2_MET_NM_TNR				0x1748
+#define P_NR2_MET_NM_TNR			VCBUS_REG_ADDR(NR2_MET_NM_TNR)
+#define NR2_MET_NMFRM_TNR_YLEV			0x1749
+#define P_NR2_MET_NMFRM_TNR_YLEV		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_YLEV)
+#define NR2_MET_NMFRM_TNR_YCNT			0x174a
+#define P_NR2_MET_NMFRM_TNR_YCNT		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_YCNT)
+#define NR2_MET_NMFRM_TNR_CLEV			0x174b
+#define P_NR2_MET_NMFRM_TNR_CLEV		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_CLEV)
+#define NR2_MET_NMFRM_TNR_CCNT			0x174c
+#define P_NR2_MET_NMFRM_TNR_CCNT		VCBUS_REG_ADDR(NR2_MET_NMFRM_TNR_CCNT)
+#define NR2_3DEN_MODE				0x174d
+#define P_NR2_3DEN_MODE				VCBUS_REG_ADDR(NR2_3DEN_MODE)
+#define NR2_IIR_CTRL				0x174e
+#define P_NR2_IIR_CTRL				VCBUS_REG_ADDR(NR2_IIR_CTRL)
+#define NR2_SW_EN				0x174f
+#define P_NR2_SW_EN				VCBUS_REG_ADDR(NR2_SW_EN)
+#define NR2_FRM_SIZE				0x1750
+#define P_NR2_FRM_SIZE				VCBUS_REG_ADDR(NR2_FRM_SIZE)
+#define NR2_SNR_SAD_CFG				0x1751
+#define P_NR2_SNR_SAD_CFG			VCBUS_REG_ADDR(NR2_SNR_SAD_CFG)
+#define NR2_MATNR_SNR_OS			0x1752
+#define P_NR2_MATNR_SNR_OS			VCBUS_REG_ADDR(NR2_MATNR_SNR_OS)
+#define NR2_MATNR_SNR_NRM_CFG			0x1753
+#define P_NR2_MATNR_SNR_NRM_CFG			VCBUS_REG_ADDR(NR2_MATNR_SNR_NRM_CFG)
+#define NR2_MATNR_SNR_NRM_GAIN			0x1754
+#define P_NR2_MATNR_SNR_NRM_GAIN		VCBUS_REG_ADDR(NR2_MATNR_SNR_NRM_GAIN)
+#define NR2_MATNR_SNR_LPF_CFG			0x1755
+#define P_NR2_MATNR_SNR_LPF_CFG			VCBUS_REG_ADDR(NR2_MATNR_SNR_LPF_CFG)
+#define NR2_MATNR_SNR_USF_GAIN			0x1756
+#define P_NR2_MATNR_SNR_USF_GAIN		VCBUS_REG_ADDR(NR2_MATNR_SNR_USF_GAIN)
+#define NR2_MATNR_SNR_EDGE2B			0x1757
+#define P_NR2_MATNR_SNR_EDGE2B			VCBUS_REG_ADDR(NR2_MATNR_SNR_EDGE2B)
+#define NR2_MATNR_BETA_EGAIN			0x1758
+#define P_NR2_MATNR_BETA_EGAIN			VCBUS_REG_ADDR(NR2_MATNR_BETA_EGAIN)
+#define NR2_MATNR_BETA_BRT			0x1759
+#define P_NR2_MATNR_BETA_BRT			VCBUS_REG_ADDR(NR2_MATNR_BETA_BRT)
+#define NR2_MATNR_XBETA_CFG			0x175a
+#define P_NR2_MATNR_XBETA_CFG			VCBUS_REG_ADDR(NR2_MATNR_XBETA_CFG)
+#define NR2_MATNR_YBETA_SCL			0x175b
+#define P_NR2_MATNR_YBETA_SCL			VCBUS_REG_ADDR(NR2_MATNR_YBETA_SCL)
+#define NR2_MATNR_CBETA_SCL			0x175c
+#define P_NR2_MATNR_CBETA_SCL			VCBUS_REG_ADDR(NR2_MATNR_CBETA_SCL)
+#define NR2_SNR_MASK				0x175d
+#define P_NR2_SNR_MASK				VCBUS_REG_ADDR(NR2_SNR_MASK)
+#define NR2_SAD2NORM_LUT0			0x175e
+#define P_NR2_SAD2NORM_LUT0			VCBUS_REG_ADDR(NR2_SAD2NORM_LUT0)
+#define NR2_SAD2NORM_LUT1			0x175f
+#define P_NR2_SAD2NORM_LUT1			VCBUS_REG_ADDR(NR2_SAD2NORM_LUT1)
+#define NR2_SAD2NORM_LUT2			0x1760
+#define P_NR2_SAD2NORM_LUT2			VCBUS_REG_ADDR(NR2_SAD2NORM_LUT2)
+#define NR2_SAD2NORM_LUT3			0x1761
+#define P_NR2_SAD2NORM_LUT3			VCBUS_REG_ADDR(NR2_SAD2NORM_LUT3)
+#define NR2_EDGE2BETA_LUT0			0x1762
+#define P_NR2_EDGE2BETA_LUT0			VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT0)
+#define NR2_EDGE2BETA_LUT1			0x1763
+#define P_NR2_EDGE2BETA_LUT1			VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT1)
+#define NR2_EDGE2BETA_LUT2			0x1764
+#define P_NR2_EDGE2BETA_LUT2			VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT2)
+#define NR2_EDGE2BETA_LUT3			0x1765
+#define P_NR2_EDGE2BETA_LUT3			VCBUS_REG_ADDR(NR2_EDGE2BETA_LUT3)
+#define NR2_MOTION2BETA_LUT0			0x1766
+#define P_NR2_MOTION2BETA_LUT0			VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT0)
+#define NR2_MOTION2BETA_LUT1			0x1767
+#define P_NR2_MOTION2BETA_LUT1			VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT1)
+#define NR2_MOTION2BETA_LUT2			0x1768
+#define P_NR2_MOTION2BETA_LUT2			VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT2)
+#define NR2_MOTION2BETA_LUT3			0x1769
+#define P_NR2_MOTION2BETA_LUT3			VCBUS_REG_ADDR(NR2_MOTION2BETA_LUT3)
+#define NR2_MATNR_MTN_CRTL			0x176a
+#define P_NR2_MATNR_MTN_CRTL			VCBUS_REG_ADDR(NR2_MATNR_MTN_CRTL)
+#define NR2_MATNR_MTN_CRTL2			0x176b
+#define P_NR2_MATNR_MTN_CRTL2			VCBUS_REG_ADDR(NR2_MATNR_MTN_CRTL2)
+#define NR2_MATNR_MTN_COR			0x176c
+#define P_NR2_MATNR_MTN_COR			VCBUS_REG_ADDR(NR2_MATNR_MTN_COR)
+#define NR2_MATNR_MTN_GAIN			0x176d
+#define P_NR2_MATNR_MTN_GAIN			VCBUS_REG_ADDR(NR2_MATNR_MTN_GAIN)
+#define NR2_MATNR_DEGHOST			0x176e
+#define P_NR2_MATNR_DEGHOST			VCBUS_REG_ADDR(NR2_MATNR_DEGHOST)
+#define NR2_MATNR_ALPHALP_LUT0			0x176f
+#define P_NR2_MATNR_ALPHALP_LUT0		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT0)
+#define NR2_MATNR_ALPHALP_LUT1			0x1770
+#define P_NR2_MATNR_ALPHALP_LUT1		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT1)
+#define NR2_MATNR_ALPHALP_LUT2			0x1771
+#define P_NR2_MATNR_ALPHALP_LUT2		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT2)
+#define NR2_MATNR_ALPHALP_LUT3			0x1772
+#define P_NR2_MATNR_ALPHALP_LUT3		VCBUS_REG_ADDR(NR2_MATNR_ALPHALP_LUT3)
+#define NR2_MATNR_ALPHAHP_LUT0			0x1773
+#define P_NR2_MATNR_ALPHAHP_LUT0		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT0)
+#define NR2_MATNR_ALPHAHP_LUT1			0x1774
+#define P_NR2_MATNR_ALPHAHP_LUT1		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT1)
+#define NR2_MATNR_ALPHAHP_LUT2			0x1775
+#define P_NR2_MATNR_ALPHAHP_LUT2		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT2)
+#define NR2_MATNR_ALPHAHP_LUT3			0x1776
+#define P_NR2_MATNR_ALPHAHP_LUT3		VCBUS_REG_ADDR(NR2_MATNR_ALPHAHP_LUT3)
+#define NR2_MATNR_MTNB_BRT			0x1777
+#define P_NR2_MATNR_MTNB_BRT			VCBUS_REG_ADDR(NR2_MATNR_MTNB_BRT)
+#define NR2_CUE_MODE				0x1778
+#define P_NR2_CUE_MODE				VCBUS_REG_ADDR(NR2_CUE_MODE)
+#define NR2_CUE_CON_MOT_TH			0x1779
+#define P_NR2_CUE_CON_MOT_TH			VCBUS_REG_ADDR(NR2_CUE_CON_MOT_TH)
+#define NR2_CUE_CON_DIF0			0x177a
+#define P_NR2_CUE_CON_DIF0			VCBUS_REG_ADDR(NR2_CUE_CON_DIF0)
+#define NR2_CUE_CON_DIF1			0x177b
+#define P_NR2_CUE_CON_DIF1			VCBUS_REG_ADDR(NR2_CUE_CON_DIF1)
+#define NR2_CUE_CON_DIF2			0x177c
+#define P_NR2_CUE_CON_DIF2			VCBUS_REG_ADDR(NR2_CUE_CON_DIF2)
+#define NR2_CUE_CON_DIF3			0x177d
+#define P_NR2_CUE_CON_DIF3			VCBUS_REG_ADDR(NR2_CUE_CON_DIF3)
+#define NR2_CUE_PRG_DIF				0x177e
+#define P_NR2_CUE_PRG_DIF			VCBUS_REG_ADDR(NR2_CUE_PRG_DIF)
+#define NR2_CONV_MODE				0x177f
+#define P_NR2_CONV_MODE				VCBUS_REG_ADDR(NR2_CONV_MODE)
+#define DET3D_RO_SPLT_HB			0x1780
+#define P_DET3D_RO_SPLT_HB			VCBUS_REG_ADDR(DET3D_RO_SPLT_HB)
+#define DET3D_RO_SPLT_VL			0x1781
+#define P_DET3D_RO_SPLT_VL			VCBUS_REG_ADDR(DET3D_RO_SPLT_VL)
+#define DET3D_RO_SPLT_VR			0x1782
+#define P_DET3D_RO_SPLT_VR			VCBUS_REG_ADDR(DET3D_RO_SPLT_VR)
+#define DET3D_RO_MAT_LUMA_LR			0x1783
+#define P_DET3D_RO_MAT_LUMA_LR			VCBUS_REG_ADDR(DET3D_RO_MAT_LUMA_LR)
+#define DET3D_RO_MAT_LUMA_TB			0x1784
+#define P_DET3D_RO_MAT_LUMA_TB			VCBUS_REG_ADDR(DET3D_RO_MAT_LUMA_TB)
+#define DET3D_RO_MAT_CHRU_LR			0x1785
+#define P_DET3D_RO_MAT_CHRU_LR			VCBUS_REG_ADDR(DET3D_RO_MAT_CHRU_LR)
+#define DET3D_RO_MAT_CHRU_TB			0x1786
+#define P_DET3D_RO_MAT_CHRU_TB			VCBUS_REG_ADDR(DET3D_RO_MAT_CHRU_TB)
+#define DET3D_RO_MAT_CHRV_LR			0x1787
+#define P_DET3D_RO_MAT_CHRV_LR			VCBUS_REG_ADDR(DET3D_RO_MAT_CHRV_LR)
+#define DET3D_RO_MAT_CHRV_TB			0x1788
+#define P_DET3D_RO_MAT_CHRV_TB			VCBUS_REG_ADDR(DET3D_RO_MAT_CHRV_TB)
+#define DET3D_RO_MAT_HEDG_LR			0x1789
+#define P_DET3D_RO_MAT_HEDG_LR			VCBUS_REG_ADDR(DET3D_RO_MAT_HEDG_LR)
+#define DET3D_RO_MAT_HEDG_TB			0x178a
+#define P_DET3D_RO_MAT_HEDG_TB			VCBUS_REG_ADDR(DET3D_RO_MAT_HEDG_TB)
+#define DET3D_RO_MAT_VEDG_LR			0x178b
+#define P_DET3D_RO_MAT_VEDG_LR			VCBUS_REG_ADDR(DET3D_RO_MAT_VEDG_LR)
+#define DET3D_RO_MAT_VEDG_TB			0x178c
+#define P_DET3D_RO_MAT_VEDG_TB			VCBUS_REG_ADDR(DET3D_RO_MAT_VEDG_TB)
+#define DET3D_RO_MAT_MOTN_LR			0x178d
+#define P_DET3D_RO_MAT_MOTN_LR			VCBUS_REG_ADDR(DET3D_RO_MAT_MOTN_LR)
+#define DET3D_RO_MAT_MOTN_TB			0x178e
+#define P_DET3D_RO_MAT_MOTN_TB			VCBUS_REG_ADDR(DET3D_RO_MAT_MOTN_TB)
+#define DET3D_RO_FRM_MOTN			0x178f
+#define P_DET3D_RO_FRM_MOTN			VCBUS_REG_ADDR(DET3D_RO_FRM_MOTN)
+#define DET3D_RAMRD_ADDR_PORT			0x179a
+#define P_DET3D_RAMRD_ADDR_PORT			VCBUS_REG_ADDR(DET3D_RAMRD_ADDR_PORT)
+#define DET3D_RAMRD_DATA_PORT			0x179b
+#define P_DET3D_RAMRD_DATA_PORT			VCBUS_REG_ADDR(DET3D_RAMRD_DATA_PORT)
+#define NR2_CFR_PARA_CFG0			0x179c
+#define P_NR2_CFR_PARA_CFG0			VCBUS_REG_ADDR(NR2_CFR_PARA_CFG0)
+#define NR2_CFR_PARA_CFG1			0x179d
+#define P_NR2_CFR_PARA_CFG1			VCBUS_REG_ADDR(NR2_CFR_PARA_CFG1)
+#define DI_NR_1_CTRL0				0x1794
+#define P_DI_NR_1_CTRL0				VCBUS_REG_ADDR(DI_NR_1_CTRL0)
+#define DI_NR_1_CTRL1				0x1795
+#define P_DI_NR_1_CTRL1				VCBUS_REG_ADDR(DI_NR_1_CTRL1)
+#define DI_NR_1_CTRL2				0x1796
+#define P_DI_NR_1_CTRL2				VCBUS_REG_ADDR(DI_NR_1_CTRL2)
+#define DI_NR_1_CTRL3				0x1797
+#define P_DI_NR_1_CTRL3				VCBUS_REG_ADDR(DI_NR_1_CTRL3)
+#define DI_CONTWR_X				0x17a0
+#define P_DI_CONTWR_X				VCBUS_REG_ADDR(DI_CONTWR_X)
+#define DI_CONTWR_Y				0x17a1
+#define P_DI_CONTWR_Y				VCBUS_REG_ADDR(DI_CONTWR_Y)
+#define DI_CONTWR_CTRL				0x17a2
+#define P_DI_CONTWR_CTRL			VCBUS_REG_ADDR(DI_CONTWR_CTRL)
+#define DI_CONTPRD_X				0x17a3
+#define P_DI_CONTPRD_X				VCBUS_REG_ADDR(DI_CONTPRD_X)
+#define DI_CONTPRD_Y				0x17a4
+#define P_DI_CONTPRD_Y				VCBUS_REG_ADDR(DI_CONTPRD_Y)
+#define DI_CONTP2RD_X				0x17a5
+#define P_DI_CONTP2RD_X				VCBUS_REG_ADDR(DI_CONTP2RD_X)
+#define DI_CONTP2RD_Y				0x17a6
+#define P_DI_CONTP2RD_Y				VCBUS_REG_ADDR(DI_CONTP2RD_Y)
+#define DI_CONTRD_CTRL				0x17a7
+#define P_DI_CONTRD_CTRL			VCBUS_REG_ADDR(DI_CONTRD_CTRL)
+#define DI_NRWR_X				0x17c0
+#define P_DI_NRWR_X				VCBUS_REG_ADDR(DI_NRWR_X)
+#define DI_NRWR_Y				0x17c1
+#define P_DI_NRWR_Y				VCBUS_REG_ADDR(DI_NRWR_Y)
+#define DI_NRWR_CTRL				0x17c2
+#define P_DI_NRWR_CTRL				VCBUS_REG_ADDR(DI_NRWR_CTRL)
+#define DI_MTNWR_X				0x17c3
+#define P_DI_MTNWR_X				VCBUS_REG_ADDR(DI_MTNWR_X)
+#define DI_MTNWR_Y				0x17c4
+#define P_DI_MTNWR_Y				VCBUS_REG_ADDR(DI_MTNWR_Y)
+#define DI_MTNWR_CTRL				0x17c5
+#define P_DI_MTNWR_CTRL				VCBUS_REG_ADDR(DI_MTNWR_CTRL)
+#define DI_DIWR_X				0x17c6
+#define P_DI_DIWR_X				VCBUS_REG_ADDR(DI_DIWR_X)
+#define DI_DIWR_Y				0x17c7
+#define P_DI_DIWR_Y				VCBUS_REG_ADDR(DI_DIWR_Y)
+#define DI_DIWR_CTRL				0x17c8
+#define P_DI_DIWR_CTRL				VCBUS_REG_ADDR(DI_DIWR_CTRL)
+#define DI_MTNPRD_X				0x17cb
+#define P_DI_MTNPRD_X				VCBUS_REG_ADDR(DI_MTNPRD_X)
+#define DI_MTNPRD_Y				0x17cc
+#define P_DI_MTNPRD_Y				VCBUS_REG_ADDR(DI_MTNPRD_Y)
+#define DI_MTNRD_CTRL				0x17cd
+#define P_DI_MTNRD_CTRL				VCBUS_REG_ADDR(DI_MTNRD_CTRL)
+#define DI_INP_GEN_REG				0x17ce
+#define P_DI_INP_GEN_REG			VCBUS_REG_ADDR(DI_INP_GEN_REG)
+#define DI_INP_CANVAS0				0x17cf
+#define P_DI_INP_CANVAS0			VCBUS_REG_ADDR(DI_INP_CANVAS0)
+#define DI_INP_LUMA_X0				0x17d0
+#define P_DI_INP_LUMA_X0			VCBUS_REG_ADDR(DI_INP_LUMA_X0)
+#define DI_INP_LUMA_Y0				0x17d1
+#define P_DI_INP_LUMA_Y0			VCBUS_REG_ADDR(DI_INP_LUMA_Y0)
+#define DI_INP_CHROMA_X0			0x17d2
+#define P_DI_INP_CHROMA_X0			VCBUS_REG_ADDR(DI_INP_CHROMA_X0)
+#define DI_INP_CHROMA_Y0			0x17d3
+#define P_DI_INP_CHROMA_Y0			VCBUS_REG_ADDR(DI_INP_CHROMA_Y0)
+#define DI_INP_RPT_LOOP				0x17d4
+#define P_DI_INP_RPT_LOOP			VCBUS_REG_ADDR(DI_INP_RPT_LOOP)
+#define DI_INP_LUMA0_RPT_PAT			0x17d5
+#define P_DI_INP_LUMA0_RPT_PAT			VCBUS_REG_ADDR(DI_INP_LUMA0_RPT_PAT)
+#define DI_INP_CHROMA0_RPT_PAT			0x17d6
+#define P_DI_INP_CHROMA0_RPT_PAT		VCBUS_REG_ADDR(DI_INP_CHROMA0_RPT_PAT)
+#define DI_INP_DUMMY_PIXEL			0x17d7
+#define P_DI_INP_DUMMY_PIXEL			VCBUS_REG_ADDR(DI_INP_DUMMY_PIXEL)
+#define DI_INP_LUMA_FIFO_SIZE			0x17d8
+#define P_DI_INP_LUMA_FIFO_SIZE			VCBUS_REG_ADDR(DI_INP_LUMA_FIFO_SIZE)
+#define DI_INP_RANGE_MAP_Y			0x17ba
+#define P_DI_INP_RANGE_MAP_Y			VCBUS_REG_ADDR(DI_INP_RANGE_MAP_Y)
+#define DI_INP_RANGE_MAP_CB			0x17bb
+#define P_DI_INP_RANGE_MAP_CB			VCBUS_REG_ADDR(DI_INP_RANGE_MAP_CB)
+#define DI_INP_RANGE_MAP_CR			0x17bc
+#define P_DI_INP_RANGE_MAP_CR			VCBUS_REG_ADDR(DI_INP_RANGE_MAP_CR)
+#define DI_INP_GEN_REG2				0x1791
+#define P_DI_INP_GEN_REG2			VCBUS_REG_ADDR(DI_INP_GEN_REG2)
+#define DI_INP_FMT_CTRL				0x17d9
+#define P_DI_INP_FMT_CTRL			VCBUS_REG_ADDR(DI_INP_FMT_CTRL)
+#define DI_INP_FMT_W				0x17da
+#define P_DI_INP_FMT_W				VCBUS_REG_ADDR(DI_INP_FMT_W)
+#define DI_MEM_GEN_REG				0x17db
+#define P_DI_MEM_GEN_REG			VCBUS_REG_ADDR(DI_MEM_GEN_REG)
+#define DI_MEM_CANVAS0				0x17dc
+#define P_DI_MEM_CANVAS0			VCBUS_REG_ADDR(DI_MEM_CANVAS0)
+#define DI_MEM_LUMA_X0				0x17dd
+#define P_DI_MEM_LUMA_X0			VCBUS_REG_ADDR(DI_MEM_LUMA_X0)
+#define DI_MEM_LUMA_Y0				0x17de
+#define P_DI_MEM_LUMA_Y0			VCBUS_REG_ADDR(DI_MEM_LUMA_Y0)
+#define DI_MEM_CHROMA_X0			0x17df
+#define P_DI_MEM_CHROMA_X0			VCBUS_REG_ADDR(DI_MEM_CHROMA_X0)
+#define DI_MEM_CHROMA_Y0			0x17e0
+#define P_DI_MEM_CHROMA_Y0			VCBUS_REG_ADDR(DI_MEM_CHROMA_Y0)
+#define DI_MEM_RPT_LOOP				0x17e1
+#define P_DI_MEM_RPT_LOOP			VCBUS_REG_ADDR(DI_MEM_RPT_LOOP)
+#define DI_MEM_LUMA0_RPT_PAT			0x17e2
+#define P_DI_MEM_LUMA0_RPT_PAT			VCBUS_REG_ADDR(DI_MEM_LUMA0_RPT_PAT)
+#define DI_MEM_CHROMA0_RPT_PAT			0x17e3
+#define P_DI_MEM_CHROMA0_RPT_PAT		VCBUS_REG_ADDR(DI_MEM_CHROMA0_RPT_PAT)
+#define DI_MEM_DUMMY_PIXEL			0x17e4
+#define P_DI_MEM_DUMMY_PIXEL			VCBUS_REG_ADDR(DI_MEM_DUMMY_PIXEL)
+#define DI_MEM_LUMA_FIFO_SIZE			0x17e5
+#define P_DI_MEM_LUMA_FIFO_SIZE			VCBUS_REG_ADDR(DI_MEM_LUMA_FIFO_SIZE)
+#define DI_MEM_RANGE_MAP_Y			0x17bd
+#define P_DI_MEM_RANGE_MAP_Y			VCBUS_REG_ADDR(DI_MEM_RANGE_MAP_Y)
+#define DI_MEM_RANGE_MAP_CB			0x17be
+#define P_DI_MEM_RANGE_MAP_CB			VCBUS_REG_ADDR(DI_MEM_RANGE_MAP_CB)
+#define DI_MEM_RANGE_MAP_CR			0x17bf
+#define P_DI_MEM_RANGE_MAP_CR			VCBUS_REG_ADDR(DI_MEM_RANGE_MAP_CR)
+#define DI_MEM_GEN_REG2				0x1792
+#define P_DI_MEM_GEN_REG2			VCBUS_REG_ADDR(DI_MEM_GEN_REG2)
+#define DI_MEM_FMT_CTRL				0x17e6
+#define P_DI_MEM_FMT_CTRL			VCBUS_REG_ADDR(DI_MEM_FMT_CTRL)
+#define DI_MEM_FMT_W				0x17e7
+#define P_DI_MEM_FMT_W				VCBUS_REG_ADDR(DI_MEM_FMT_W)
+#define DI_IF1_GEN_REG				0x17e8
+#define P_DI_IF1_GEN_REG			VCBUS_REG_ADDR(DI_IF1_GEN_REG)
+#define DI_IF1_CANVAS0				0x17e9
+#define P_DI_IF1_CANVAS0			VCBUS_REG_ADDR(DI_IF1_CANVAS0)
+#define DI_IF1_LUMA_X0				0x17ea
+#define P_DI_IF1_LUMA_X0			VCBUS_REG_ADDR(DI_IF1_LUMA_X0)
+#define DI_IF1_LUMA_Y0				0x17eb
+#define P_DI_IF1_LUMA_Y0			VCBUS_REG_ADDR(DI_IF1_LUMA_Y0)
+#define DI_IF1_CHROMA_X0			0x17ec
+#define P_DI_IF1_CHROMA_X0			VCBUS_REG_ADDR(DI_IF1_CHROMA_X0)
+#define DI_IF1_CHROMA_Y0			0x17ed
+#define P_DI_IF1_CHROMA_Y0			VCBUS_REG_ADDR(DI_IF1_CHROMA_Y0)
+#define DI_IF1_RPT_LOOP				0x17ee
+#define P_DI_IF1_RPT_LOOP			VCBUS_REG_ADDR(DI_IF1_RPT_LOOP)
+#define DI_IF1_LUMA0_RPT_PAT			0x17ef
+#define P_DI_IF1_LUMA0_RPT_PAT			VCBUS_REG_ADDR(DI_IF1_LUMA0_RPT_PAT)
+#define DI_IF1_CHROMA0_RPT_PAT			0x17f0
+#define P_DI_IF1_CHROMA0_RPT_PAT		VCBUS_REG_ADDR(DI_IF1_CHROMA0_RPT_PAT)
+#define DI_IF1_DUMMY_PIXEL			0x17f1
+#define P_DI_IF1_DUMMY_PIXEL			VCBUS_REG_ADDR(DI_IF1_DUMMY_PIXEL)
+#define DI_IF1_LUMA_FIFO_SIZE			0x17f2
+#define P_DI_IF1_LUMA_FIFO_SIZE			VCBUS_REG_ADDR(DI_IF1_LUMA_FIFO_SIZE)
+#define DI_IF1_RANGE_MAP_Y			0x17fc
+#define P_DI_IF1_RANGE_MAP_Y			VCBUS_REG_ADDR(DI_IF1_RANGE_MAP_Y)
+#define DI_IF1_RANGE_MAP_CB			0x17fd
+#define P_DI_IF1_RANGE_MAP_CB			VCBUS_REG_ADDR(DI_IF1_RANGE_MAP_CB)
+#define DI_IF1_RANGE_MAP_CR			0x17fe
+#define P_DI_IF1_RANGE_MAP_CR			VCBUS_REG_ADDR(DI_IF1_RANGE_MAP_CR)
+#define DI_IF1_GEN_REG2				0x1790
+#define P_DI_IF1_GEN_REG2			VCBUS_REG_ADDR(DI_IF1_GEN_REG2)
+#define DI_IF1_FMT_CTRL				0x17f3
+#define P_DI_IF1_FMT_CTRL			VCBUS_REG_ADDR(DI_IF1_FMT_CTRL)
+#define DI_IF1_FMT_W				0x17f4
+#define P_DI_IF1_FMT_W				VCBUS_REG_ADDR(DI_IF1_FMT_W)
+#define DI_CHAN2_GEN_REG			0x17f5
+#define P_DI_CHAN2_GEN_REG			VCBUS_REG_ADDR(DI_CHAN2_GEN_REG)
+#define DI_CHAN2_CANVAS0			0x17f6
+#define P_DI_CHAN2_CANVAS0			VCBUS_REG_ADDR(DI_CHAN2_CANVAS0)
+#define DI_CHAN2_LUMA_X0			0x17f7
+#define P_DI_CHAN2_LUMA_X0			VCBUS_REG_ADDR(DI_CHAN2_LUMA_X0)
+#define DI_CHAN2_LUMA_Y0			0x17f8
+#define P_DI_CHAN2_LUMA_Y0			VCBUS_REG_ADDR(DI_CHAN2_LUMA_Y0)
+#define DI_CHAN2_CHROMA_X0			0x17f9
+#define P_DI_CHAN2_CHROMA_X0			VCBUS_REG_ADDR(DI_CHAN2_CHROMA_X0)
+#define DI_CHAN2_CHROMA_Y0			0x17fa
+#define P_DI_CHAN2_CHROMA_Y0			VCBUS_REG_ADDR(DI_CHAN2_CHROMA_Y0)
+#define DI_CHAN2_RPT_LOOP			0x17fb
+#define P_DI_CHAN2_RPT_LOOP			VCBUS_REG_ADDR(DI_CHAN2_RPT_LOOP)
+#define DI_CHAN2_LUMA0_RPT_PAT			0x17b0
+#define P_DI_CHAN2_LUMA0_RPT_PAT		VCBUS_REG_ADDR(DI_CHAN2_LUMA0_RPT_PAT)
+#define DI_CHAN2_CHROMA0_RPT_PAT		0x17b1
+#define P_DI_CHAN2_CHROMA0_RPT_PAT		VCBUS_REG_ADDR(DI_CHAN2_CHROMA0_RPT_PAT)
+#define DI_CHAN2_DUMMY_PIXEL			0x17b2
+#define P_DI_CHAN2_DUMMY_PIXEL			VCBUS_REG_ADDR(DI_CHAN2_DUMMY_PIXEL)
+#define DI_CHAN2_LUMA_FIFO_SIZE			0x17b3
+#define P_DI_CHAN2_LUMA_FIFO_SIZE		VCBUS_REG_ADDR(DI_CHAN2_LUMA_FIFO_SIZE)
+#define DI_CHAN2_RANGE_MAP_Y			0x17b4
+#define P_DI_CHAN2_RANGE_MAP_Y			VCBUS_REG_ADDR(DI_CHAN2_RANGE_MAP_Y)
+#define DI_CHAN2_RANGE_MAP_CB			0x17b5
+#define P_DI_CHAN2_RANGE_MAP_CB			VCBUS_REG_ADDR(DI_CHAN2_RANGE_MAP_CB)
+#define DI_CHAN2_RANGE_MAP_CR			0x17b6
+#define P_DI_CHAN2_RANGE_MAP_CR			VCBUS_REG_ADDR(DI_CHAN2_RANGE_MAP_CR)
+#define DI_CHAN2_GEN_REG2			0x17b7
+#define P_DI_CHAN2_GEN_REG2			VCBUS_REG_ADDR(DI_CHAN2_GEN_REG2)
+#define DI_CHAN2_FMT_CTRL			0x17b8
+#define P_DI_CHAN2_FMT_CTRL			VCBUS_REG_ADDR(DI_CHAN2_FMT_CTRL)
+#define DI_CHAN2_FMT_W				0x17b9
+#define P_DI_CHAN2_FMT_W			VCBUS_REG_ADDR(DI_CHAN2_FMT_W)
+#define DI_CANVAS_URGENT0			0x170a
+#define P_DI_CANVAS_URGENT0			VCBUS_REG_ADDR(DI_CANVAS_URGENT0)
+#define DI_CANVAS_URGENT1			0x170b
+#define P_DI_CANVAS_URGENT1			VCBUS_REG_ADDR(DI_CANVAS_URGENT1)
+#define DI_CANVAS_URGENT2			0x170e
+#define P_DI_CANVAS_URGENT2			VCBUS_REG_ADDR(DI_CANVAS_URGENT2)
+#define ENCP_VFIFO2VD_CTL			0x1b58
+#define P_ENCP_VFIFO2VD_CTL			VCBUS_REG_ADDR(ENCP_VFIFO2VD_CTL)
+#define ENCP_VFIFO2VD_PIXEL_START		0x1b59
+#define P_ENCP_VFIFO2VD_PIXEL_START		VCBUS_REG_ADDR(ENCP_VFIFO2VD_PIXEL_START)
+#define ENCP_VFIFO2VD_PIXEL_END			0x1b5a
+#define P_ENCP_VFIFO2VD_PIXEL_END		VCBUS_REG_ADDR(ENCP_VFIFO2VD_PIXEL_END)
+#define ENCP_VFIFO2VD_LINE_TOP_START		0x1b5b
+#define P_ENCP_VFIFO2VD_LINE_TOP_START		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_TOP_START)
+#define ENCP_VFIFO2VD_LINE_TOP_END		0x1b5c
+#define P_ENCP_VFIFO2VD_LINE_TOP_END		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_TOP_END)
+#define ENCP_VFIFO2VD_LINE_BOT_START		0x1b5d
+#define P_ENCP_VFIFO2VD_LINE_BOT_START		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_BOT_START)
+#define ENCP_VFIFO2VD_LINE_BOT_END		0x1b5e
+#define P_ENCP_VFIFO2VD_LINE_BOT_END		VCBUS_REG_ADDR(ENCP_VFIFO2VD_LINE_BOT_END)
+#define VENC_SYNC_ROUTE				0x1b60
+#define P_VENC_SYNC_ROUTE			VCBUS_REG_ADDR(VENC_SYNC_ROUTE)
+#define VENC_VIDEO_EXSRC			0x1b61
+#define P_VENC_VIDEO_EXSRC			VCBUS_REG_ADDR(VENC_VIDEO_EXSRC)
+#define VENC_DVI_SETTING			0x1b62
+#define P_VENC_DVI_SETTING			VCBUS_REG_ADDR(VENC_DVI_SETTING)
+#define VENC_C656_CTRL				0x1b63
+#define P_VENC_C656_CTRL			VCBUS_REG_ADDR(VENC_C656_CTRL)
+#define VENC_UPSAMPLE_CTRL0			0x1b64
+#define P_VENC_UPSAMPLE_CTRL0			VCBUS_REG_ADDR(VENC_UPSAMPLE_CTRL0)
+#define VENC_UPSAMPLE_CTRL1			0x1b65
+#define P_VENC_UPSAMPLE_CTRL1			VCBUS_REG_ADDR(VENC_UPSAMPLE_CTRL1)
+#define VENC_UPSAMPLE_CTRL2			0x1b66
+#define P_VENC_UPSAMPLE_CTRL2			VCBUS_REG_ADDR(VENC_UPSAMPLE_CTRL2)
+#define TCON_INVERT_CTL				0x1b67
+#define P_TCON_INVERT_CTL			VCBUS_REG_ADDR(TCON_INVERT_CTL)
+#define VENC_VIDEO_PROG_MODE			0x1b68
+#define P_VENC_VIDEO_PROG_MODE			VCBUS_REG_ADDR(VENC_VIDEO_PROG_MODE)
+#define VENC_ENCI_LINE				0x1b69
+#define P_VENC_ENCI_LINE			VCBUS_REG_ADDR(VENC_ENCI_LINE)
+#define VENC_ENCI_PIXEL				0x1b6a
+#define P_VENC_ENCI_PIXEL			VCBUS_REG_ADDR(VENC_ENCI_PIXEL)
+#define VENC_ENCP_LINE				0x1b6b
+#define P_VENC_ENCP_LINE			VCBUS_REG_ADDR(VENC_ENCP_LINE)
+#define VENC_ENCP_PIXEL				0x1b6c
+#define P_VENC_ENCP_PIXEL			VCBUS_REG_ADDR(VENC_ENCP_PIXEL)
+#define VENC_STATA				0x1b6d
+#define P_VENC_STATA				VCBUS_REG_ADDR(VENC_STATA)
+#define VENC_INTCTRL				0x1b6e
+#define P_VENC_INTCTRL				VCBUS_REG_ADDR(VENC_INTCTRL)
+#define VENC_INTFLAG				0x1b6f
+#define P_VENC_INTFLAG				VCBUS_REG_ADDR(VENC_INTFLAG)
+#define VENC_VIDEO_TST_EN			0x1b70
+#define P_VENC_VIDEO_TST_EN			VCBUS_REG_ADDR(VENC_VIDEO_TST_EN)
+#define VENC_VIDEO_TST_MDSEL			0x1b71
+#define P_VENC_VIDEO_TST_MDSEL			VCBUS_REG_ADDR(VENC_VIDEO_TST_MDSEL)
+#define VENC_VIDEO_TST_Y			0x1b72
+#define P_VENC_VIDEO_TST_Y			VCBUS_REG_ADDR(VENC_VIDEO_TST_Y)
+#define VENC_VIDEO_TST_CB			0x1b73
+#define P_VENC_VIDEO_TST_CB			VCBUS_REG_ADDR(VENC_VIDEO_TST_CB)
+#define VENC_VIDEO_TST_CR			0x1b74
+#define P_VENC_VIDEO_TST_CR			VCBUS_REG_ADDR(VENC_VIDEO_TST_CR)
+#define VENC_VIDEO_TST_CLRBAR_STRT		0x1b75
+#define P_VENC_VIDEO_TST_CLRBAR_STRT		VCBUS_REG_ADDR(VENC_VIDEO_TST_CLRBAR_STRT)
+#define VENC_VIDEO_TST_CLRBAR_WIDTH		0x1b76
+#define P_VENC_VIDEO_TST_CLRBAR_WIDTH		VCBUS_REG_ADDR(VENC_VIDEO_TST_CLRBAR_WIDTH)
+#define VENC_VIDEO_TST_VDCNT_STSET		0x1b77
+#define P_VENC_VIDEO_TST_VDCNT_STSET		VCBUS_REG_ADDR(VENC_VIDEO_TST_VDCNT_STSET)
+#define VENC_VDAC_DACSEL0			0x1b78
+#define P_VENC_VDAC_DACSEL0			VCBUS_REG_ADDR(VENC_VDAC_DACSEL0)
+#define VENC_VDAC_DACSEL1			0x1b79
+#define P_VENC_VDAC_DACSEL1			VCBUS_REG_ADDR(VENC_VDAC_DACSEL1)
+#define VENC_VDAC_DACSEL2			0x1b7a
+#define P_VENC_VDAC_DACSEL2			VCBUS_REG_ADDR(VENC_VDAC_DACSEL2)
+#define VENC_VDAC_DACSEL3			0x1b7b
+#define P_VENC_VDAC_DACSEL3			VCBUS_REG_ADDR(VENC_VDAC_DACSEL3)
+#define VENC_VDAC_DACSEL4			0x1b7c
+#define P_VENC_VDAC_DACSEL4			VCBUS_REG_ADDR(VENC_VDAC_DACSEL4)
+#define VENC_VDAC_DACSEL5			0x1b7d
+#define P_VENC_VDAC_DACSEL5			VCBUS_REG_ADDR(VENC_VDAC_DACSEL5)
+#define VENC_VDAC_SETTING			0x1b7e
+#define P_VENC_VDAC_SETTING			VCBUS_REG_ADDR(VENC_VDAC_SETTING)
+#define VENC_VDAC_TST_VAL			0x1b7f
+#define P_VENC_VDAC_TST_VAL			VCBUS_REG_ADDR(VENC_VDAC_TST_VAL)
+#define VENC_VDAC_DAC0_GAINCTRL			0x1bf0
+#define P_VENC_VDAC_DAC0_GAINCTRL		VCBUS_REG_ADDR(VENC_VDAC_DAC0_GAINCTRL)
+#define VENC_VDAC_DAC0_OFFSET			0x1bf1
+#define P_VENC_VDAC_DAC0_OFFSET			VCBUS_REG_ADDR(VENC_VDAC_DAC0_OFFSET)
+#define VENC_VDAC_DAC1_GAINCTRL			0x1bf2
+#define P_VENC_VDAC_DAC1_GAINCTRL		VCBUS_REG_ADDR(VENC_VDAC_DAC1_GAINCTRL)
+#define VENC_VDAC_DAC1_OFFSET			0x1bf3
+#define P_VENC_VDAC_DAC1_OFFSET			VCBUS_REG_ADDR(VENC_VDAC_DAC1_OFFSET)
+#define VENC_VDAC_DAC2_GAINCTRL			0x1bf4
+#define P_VENC_VDAC_DAC2_GAINCTRL		VCBUS_REG_ADDR(VENC_VDAC_DAC2_GAINCTRL)
+#define VENC_VDAC_DAC2_OFFSET			0x1bf5
+#define P_VENC_VDAC_DAC2_OFFSET			VCBUS_REG_ADDR(VENC_VDAC_DAC2_OFFSET)
+#define VENC_VDAC_DAC3_GAINCTRL			0x1bf6
+#define P_VENC_VDAC_DAC3_GAINCTRL		VCBUS_REG_ADDR(VENC_VDAC_DAC3_GAINCTRL)
+#define VENC_VDAC_DAC3_OFFSET			0x1bf7
+#define P_VENC_VDAC_DAC3_OFFSET			VCBUS_REG_ADDR(VENC_VDAC_DAC3_OFFSET)
+#define VENC_VDAC_DAC4_GAINCTRL			0x1bf8
+#define P_VENC_VDAC_DAC4_GAINCTRL		VCBUS_REG_ADDR(VENC_VDAC_DAC4_GAINCTRL)
+#define VENC_VDAC_DAC4_OFFSET			0x1bf9
+#define P_VENC_VDAC_DAC4_OFFSET			VCBUS_REG_ADDR(VENC_VDAC_DAC4_OFFSET)
+#define VENC_VDAC_DAC5_GAINCTRL			0x1bfa
+#define P_VENC_VDAC_DAC5_GAINCTRL		VCBUS_REG_ADDR(VENC_VDAC_DAC5_GAINCTRL)
+#define VENC_VDAC_DAC5_OFFSET			0x1bfb
+#define P_VENC_VDAC_DAC5_OFFSET			VCBUS_REG_ADDR(VENC_VDAC_DAC5_OFFSET)
+#define VENC_VDAC_FIFO_CTRL			0x1bfc
+#define P_VENC_VDAC_FIFO_CTRL			VCBUS_REG_ADDR(VENC_VDAC_FIFO_CTRL)
+#define ENCL_TCON_INVERT_CTL			0x1bfd
+#define P_ENCL_TCON_INVERT_CTL			VCBUS_REG_ADDR(ENCL_TCON_INVERT_CTL)
+#define ENCP_VIDEO_EN				0x1b80
+#define P_ENCP_VIDEO_EN				VCBUS_REG_ADDR(ENCP_VIDEO_EN)
+#define ENCP_VIDEO_SYNC_MODE			0x1b81
+#define P_ENCP_VIDEO_SYNC_MODE			VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_MODE)
+#define ENCP_MACV_EN				0x1b82
+#define P_ENCP_MACV_EN				VCBUS_REG_ADDR(ENCP_MACV_EN)
+#define ENCP_VIDEO_Y_SCL			0x1b83
+#define P_ENCP_VIDEO_Y_SCL			VCBUS_REG_ADDR(ENCP_VIDEO_Y_SCL)
+#define ENCP_VIDEO_PB_SCL			0x1b84
+#define P_ENCP_VIDEO_PB_SCL			VCBUS_REG_ADDR(ENCP_VIDEO_PB_SCL)
+#define ENCP_VIDEO_PR_SCL			0x1b85
+#define P_ENCP_VIDEO_PR_SCL			VCBUS_REG_ADDR(ENCP_VIDEO_PR_SCL)
+#define ENCP_VIDEO_SYNC_SCL			0x1b86
+#define P_ENCP_VIDEO_SYNC_SCL			VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_SCL)
+#define ENCP_VIDEO_MACV_SCL			0x1b87
+#define P_ENCP_VIDEO_MACV_SCL			VCBUS_REG_ADDR(ENCP_VIDEO_MACV_SCL)
+#define ENCP_VIDEO_Y_OFFST			0x1b88
+#define P_ENCP_VIDEO_Y_OFFST			VCBUS_REG_ADDR(ENCP_VIDEO_Y_OFFST)
+#define ENCP_VIDEO_PB_OFFST			0x1b89
+#define P_ENCP_VIDEO_PB_OFFST			VCBUS_REG_ADDR(ENCP_VIDEO_PB_OFFST)
+#define ENCP_VIDEO_PR_OFFST			0x1b8a
+#define P_ENCP_VIDEO_PR_OFFST			VCBUS_REG_ADDR(ENCP_VIDEO_PR_OFFST)
+#define ENCP_VIDEO_SYNC_OFFST			0x1b8b
+#define P_ENCP_VIDEO_SYNC_OFFST			VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_OFFST)
+#define ENCP_VIDEO_MACV_OFFST			0x1b8c
+#define P_ENCP_VIDEO_MACV_OFFST			VCBUS_REG_ADDR(ENCP_VIDEO_MACV_OFFST)
+#define ENCP_VIDEO_MODE				0x1b8d
+#define P_ENCP_VIDEO_MODE			VCBUS_REG_ADDR(ENCP_VIDEO_MODE)
+#define ENCP_VIDEO_MODE_ADV			0x1b8e
+#define P_ENCP_VIDEO_MODE_ADV			VCBUS_REG_ADDR(ENCP_VIDEO_MODE_ADV)
+#define ENCP_DBG_PX_RST				0x1b90
+#define P_ENCP_DBG_PX_RST			VCBUS_REG_ADDR(ENCP_DBG_PX_RST)
+#define ENCP_DBG_LN_RST				0x1b91
+#define P_ENCP_DBG_LN_RST			VCBUS_REG_ADDR(ENCP_DBG_LN_RST)
+#define ENCP_DBG_PX_INT				0x1b92
+#define P_ENCP_DBG_PX_INT			VCBUS_REG_ADDR(ENCP_DBG_PX_INT)
+#define ENCP_DBG_LN_INT				0x1b93
+#define P_ENCP_DBG_LN_INT			VCBUS_REG_ADDR(ENCP_DBG_LN_INT)
+#define ENCP_VIDEO_YFP1_HTIME			0x1b94
+#define P_ENCP_VIDEO_YFP1_HTIME			VCBUS_REG_ADDR(ENCP_VIDEO_YFP1_HTIME)
+#define ENCP_VIDEO_YFP2_HTIME			0x1b95
+#define P_ENCP_VIDEO_YFP2_HTIME			VCBUS_REG_ADDR(ENCP_VIDEO_YFP2_HTIME)
+#define ENCP_VIDEO_YC_DLY			0x1b96
+#define P_ENCP_VIDEO_YC_DLY			VCBUS_REG_ADDR(ENCP_VIDEO_YC_DLY)
+#define ENCP_VIDEO_MAX_PXCNT			0x1b97
+#define P_ENCP_VIDEO_MAX_PXCNT			VCBUS_REG_ADDR(ENCP_VIDEO_MAX_PXCNT)
+#define ENCP_VIDEO_HSPULS_BEGIN			0x1b98
+#define P_ENCP_VIDEO_HSPULS_BEGIN		VCBUS_REG_ADDR(ENCP_VIDEO_HSPULS_BEGIN)
+#define ENCP_VIDEO_HSPULS_END			0x1b99
+#define P_ENCP_VIDEO_HSPULS_END			VCBUS_REG_ADDR(ENCP_VIDEO_HSPULS_END)
+#define ENCP_VIDEO_HSPULS_SWITCH		0x1b9a
+#define P_ENCP_VIDEO_HSPULS_SWITCH		VCBUS_REG_ADDR(ENCP_VIDEO_HSPULS_SWITCH)
+#define ENCP_VIDEO_VSPULS_BEGIN			0x1b9b
+#define P_ENCP_VIDEO_VSPULS_BEGIN		VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_BEGIN)
+#define ENCP_VIDEO_VSPULS_END			0x1b9c
+#define P_ENCP_VIDEO_VSPULS_END			VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_END)
+#define ENCP_VIDEO_VSPULS_BLINE			0x1b9d
+#define P_ENCP_VIDEO_VSPULS_BLINE		VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_BLINE)
+#define ENCP_VIDEO_VSPULS_ELINE			0x1b9e
+#define P_ENCP_VIDEO_VSPULS_ELINE		VCBUS_REG_ADDR(ENCP_VIDEO_VSPULS_ELINE)
+#define ENCP_VIDEO_EQPULS_BEGIN			0x1b9f
+#define P_ENCP_VIDEO_EQPULS_BEGIN		VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_BEGIN)
+#define ENCP_VIDEO_EQPULS_END			0x1ba0
+#define P_ENCP_VIDEO_EQPULS_END			VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_END)
+#define ENCP_VIDEO_EQPULS_BLINE			0x1ba1
+#define P_ENCP_VIDEO_EQPULS_BLINE		VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_BLINE)
+#define ENCP_VIDEO_EQPULS_ELINE			0x1ba2
+#define P_ENCP_VIDEO_EQPULS_ELINE		VCBUS_REG_ADDR(ENCP_VIDEO_EQPULS_ELINE)
+#define ENCP_VIDEO_HAVON_END			0x1ba3
+#define P_ENCP_VIDEO_HAVON_END			VCBUS_REG_ADDR(ENCP_VIDEO_HAVON_END)
+#define ENCP_VIDEO_HAVON_BEGIN			0x1ba4
+#define P_ENCP_VIDEO_HAVON_BEGIN		VCBUS_REG_ADDR(ENCP_VIDEO_HAVON_BEGIN)
+#define ENCP_VIDEO_VAVON_ELINE			0x1baf
+#define P_ENCP_VIDEO_VAVON_ELINE		VCBUS_REG_ADDR(ENCP_VIDEO_VAVON_ELINE)
+#define ENCP_VIDEO_VAVON_BLINE			0x1ba6
+#define P_ENCP_VIDEO_VAVON_BLINE		VCBUS_REG_ADDR(ENCP_VIDEO_VAVON_BLINE)
+#define ENCP_VIDEO_HSO_BEGIN			0x1ba7
+#define P_ENCP_VIDEO_HSO_BEGIN			VCBUS_REG_ADDR(ENCP_VIDEO_HSO_BEGIN)
+#define ENCP_VIDEO_HSO_END			0x1ba8
+#define P_ENCP_VIDEO_HSO_END			VCBUS_REG_ADDR(ENCP_VIDEO_HSO_END)
+#define ENCP_VIDEO_VSO_BEGIN			0x1ba9
+#define P_ENCP_VIDEO_VSO_BEGIN			VCBUS_REG_ADDR(ENCP_VIDEO_VSO_BEGIN)
+#define ENCP_VIDEO_VSO_END			0x1baa
+#define P_ENCP_VIDEO_VSO_END			VCBUS_REG_ADDR(ENCP_VIDEO_VSO_END)
+#define ENCP_VIDEO_VSO_BLINE			0x1bab
+#define P_ENCP_VIDEO_VSO_BLINE			VCBUS_REG_ADDR(ENCP_VIDEO_VSO_BLINE)
+#define ENCP_VIDEO_VSO_ELINE			0x1bac
+#define P_ENCP_VIDEO_VSO_ELINE			VCBUS_REG_ADDR(ENCP_VIDEO_VSO_ELINE)
+#define ENCP_VIDEO_SYNC_WAVE_CURVE		0x1bad
+#define P_ENCP_VIDEO_SYNC_WAVE_CURVE		VCBUS_REG_ADDR(ENCP_VIDEO_SYNC_WAVE_CURVE)
+#define ENCP_VIDEO_MAX_LNCNT			0x1bae
+#define P_ENCP_VIDEO_MAX_LNCNT			VCBUS_REG_ADDR(ENCP_VIDEO_MAX_LNCNT)
+#define ENCP_VIDEO_SY_VAL			0x1bb0
+#define P_ENCP_VIDEO_SY_VAL			VCBUS_REG_ADDR(ENCP_VIDEO_SY_VAL)
+#define ENCP_VIDEO_SY2_VAL			0x1bb1
+#define P_ENCP_VIDEO_SY2_VAL			VCBUS_REG_ADDR(ENCP_VIDEO_SY2_VAL)
+#define ENCP_VIDEO_BLANKY_VAL			0x1bb2
+#define P_ENCP_VIDEO_BLANKY_VAL			VCBUS_REG_ADDR(ENCP_VIDEO_BLANKY_VAL)
+#define ENCP_VIDEO_BLANKPB_VAL			0x1bb3
+#define P_ENCP_VIDEO_BLANKPB_VAL		VCBUS_REG_ADDR(ENCP_VIDEO_BLANKPB_VAL)
+#define ENCP_VIDEO_BLANKPR_VAL			0x1bb4
+#define P_ENCP_VIDEO_BLANKPR_VAL		VCBUS_REG_ADDR(ENCP_VIDEO_BLANKPR_VAL)
+#define ENCP_VIDEO_HOFFST			0x1bb5
+#define P_ENCP_VIDEO_HOFFST			VCBUS_REG_ADDR(ENCP_VIDEO_HOFFST)
+#define ENCP_VIDEO_VOFFST			0x1bb6
+#define P_ENCP_VIDEO_VOFFST			VCBUS_REG_ADDR(ENCP_VIDEO_VOFFST)
+#define ENCP_VIDEO_RGB_CTRL			0x1bb7
+#define P_ENCP_VIDEO_RGB_CTRL			VCBUS_REG_ADDR(ENCP_VIDEO_RGB_CTRL)
+#define ENCP_VIDEO_FILT_CTRL			0x1bb8
+#define P_ENCP_VIDEO_FILT_CTRL			VCBUS_REG_ADDR(ENCP_VIDEO_FILT_CTRL)
+#define ENCP_VIDEO_OFLD_VPEQ_OFST		0x1bb9
+#define P_ENCP_VIDEO_OFLD_VPEQ_OFST		VCBUS_REG_ADDR(ENCP_VIDEO_OFLD_VPEQ_OFST)
+#define ENCP_VIDEO_OFLD_VOAV_OFST		0x1bba
+#define P_ENCP_VIDEO_OFLD_VOAV_OFST		VCBUS_REG_ADDR(ENCP_VIDEO_OFLD_VOAV_OFST)
+#define ENCP_VIDEO_MATRIX_CB			0x1bbb
+#define P_ENCP_VIDEO_MATRIX_CB			VCBUS_REG_ADDR(ENCP_VIDEO_MATRIX_CB)
+#define ENCP_VIDEO_MATRIX_CR			0x1bbc
+#define P_ENCP_VIDEO_MATRIX_CR			VCBUS_REG_ADDR(ENCP_VIDEO_MATRIX_CR)
+#define ENCP_VIDEO_RGBIN_CTRL			0x1bbd
+#define P_ENCP_VIDEO_RGBIN_CTRL			VCBUS_REG_ADDR(ENCP_VIDEO_RGBIN_CTRL)
+#define ENCP_MACV_BLANKY_VAL			0x1bc0
+#define P_ENCP_MACV_BLANKY_VAL			VCBUS_REG_ADDR(ENCP_MACV_BLANKY_VAL)
+#define ENCP_MACV_MAXY_VAL			0x1bc1
+#define P_ENCP_MACV_MAXY_VAL			VCBUS_REG_ADDR(ENCP_MACV_MAXY_VAL)
+#define ENCP_MACV_1ST_PSSYNC_STRT		0x1bc2
+#define P_ENCP_MACV_1ST_PSSYNC_STRT		VCBUS_REG_ADDR(ENCP_MACV_1ST_PSSYNC_STRT)
+#define ENCP_MACV_PSSYNC_STRT			0x1bc3
+#define P_ENCP_MACV_PSSYNC_STRT			VCBUS_REG_ADDR(ENCP_MACV_PSSYNC_STRT)
+#define ENCP_MACV_AGC_STRT			0x1bc4
+#define P_ENCP_MACV_AGC_STRT			VCBUS_REG_ADDR(ENCP_MACV_AGC_STRT)
+#define ENCP_MACV_AGC_END			0x1bc5
+#define P_ENCP_MACV_AGC_END			VCBUS_REG_ADDR(ENCP_MACV_AGC_END)
+#define ENCP_MACV_WAVE_END			0x1bc6
+#define P_ENCP_MACV_WAVE_END			VCBUS_REG_ADDR(ENCP_MACV_WAVE_END)
+#define ENCP_MACV_STRTLINE			0x1bc7
+#define P_ENCP_MACV_STRTLINE			VCBUS_REG_ADDR(ENCP_MACV_STRTLINE)
+#define ENCP_MACV_ENDLINE			0x1bc8
+#define P_ENCP_MACV_ENDLINE			VCBUS_REG_ADDR(ENCP_MACV_ENDLINE)
+#define ENCP_MACV_TS_CNT_MAX_L			0x1bc9
+#define P_ENCP_MACV_TS_CNT_MAX_L		VCBUS_REG_ADDR(ENCP_MACV_TS_CNT_MAX_L)
+#define ENCP_MACV_TS_CNT_MAX_H			0x1bca
+#define P_ENCP_MACV_TS_CNT_MAX_H		VCBUS_REG_ADDR(ENCP_MACV_TS_CNT_MAX_H)
+#define ENCP_MACV_TIME_DOWN			0x1bcb
+#define P_ENCP_MACV_TIME_DOWN			VCBUS_REG_ADDR(ENCP_MACV_TIME_DOWN)
+#define ENCP_MACV_TIME_LO			0x1bcc
+#define P_ENCP_MACV_TIME_LO			VCBUS_REG_ADDR(ENCP_MACV_TIME_LO)
+#define ENCP_MACV_TIME_UP			0x1bcd
+#define P_ENCP_MACV_TIME_UP			VCBUS_REG_ADDR(ENCP_MACV_TIME_UP)
+#define ENCP_MACV_TIME_RST			0x1bce
+#define P_ENCP_MACV_TIME_RST			VCBUS_REG_ADDR(ENCP_MACV_TIME_RST)
+#define ENCP_VBI_CTRL				0x1bd0
+#define P_ENCP_VBI_CTRL				VCBUS_REG_ADDR(ENCP_VBI_CTRL)
+#define ENCP_VBI_SETTING			0x1bd1
+#define P_ENCP_VBI_SETTING			VCBUS_REG_ADDR(ENCP_VBI_SETTING)
+#define ENCP_VBI_BEGIN				0x1bd2
+#define P_ENCP_VBI_BEGIN			VCBUS_REG_ADDR(ENCP_VBI_BEGIN)
+#define ENCP_VBI_WIDTH				0x1bd3
+#define P_ENCP_VBI_WIDTH			VCBUS_REG_ADDR(ENCP_VBI_WIDTH)
+#define ENCP_VBI_HVAL				0x1bd4
+#define P_ENCP_VBI_HVAL				VCBUS_REG_ADDR(ENCP_VBI_HVAL)
+#define ENCP_VBI_DATA0				0x1bd5
+#define P_ENCP_VBI_DATA0			VCBUS_REG_ADDR(ENCP_VBI_DATA0)
+#define ENCP_VBI_DATA1				0x1bd6
+#define P_ENCP_VBI_DATA1			VCBUS_REG_ADDR(ENCP_VBI_DATA1)
+#define C656_HS_ST				0x1be0
+#define P_C656_HS_ST				VCBUS_REG_ADDR(C656_HS_ST)
+#define C656_HS_ED				0x1be1
+#define P_C656_HS_ED				VCBUS_REG_ADDR(C656_HS_ED)
+#define C656_VS_LNST_E				0x1be2
+#define P_C656_VS_LNST_E			VCBUS_REG_ADDR(C656_VS_LNST_E)
+#define C656_VS_LNST_O				0x1be3
+#define P_C656_VS_LNST_O			VCBUS_REG_ADDR(C656_VS_LNST_O)
+#define C656_VS_LNED_E				0x1be4
+#define P_C656_VS_LNED_E			VCBUS_REG_ADDR(C656_VS_LNED_E)
+#define C656_VS_LNED_O				0x1be5
+#define P_C656_VS_LNED_O			VCBUS_REG_ADDR(C656_VS_LNED_O)
+#define C656_FS_LNST				0x1be6
+#define P_C656_FS_LNST				VCBUS_REG_ADDR(C656_FS_LNST)
+#define C656_FS_LNED				0x1be7
+#define P_C656_FS_LNED				VCBUS_REG_ADDR(C656_FS_LNED)
+#define ENCI_VIDEO_MODE				0x1b00
+#define P_ENCI_VIDEO_MODE			VCBUS_REG_ADDR(ENCI_VIDEO_MODE)
+#define ENCI_VIDEO_MODE_ADV			0x1b01
+#define P_ENCI_VIDEO_MODE_ADV			VCBUS_REG_ADDR(ENCI_VIDEO_MODE_ADV)
+#define ENCI_VIDEO_FSC_ADJ			0x1b02
+#define P_ENCI_VIDEO_FSC_ADJ			VCBUS_REG_ADDR(ENCI_VIDEO_FSC_ADJ)
+#define ENCI_VIDEO_BRIGHT			0x1b03
+#define P_ENCI_VIDEO_BRIGHT			VCBUS_REG_ADDR(ENCI_VIDEO_BRIGHT)
+#define ENCI_VIDEO_CONT				0x1b04
+#define P_ENCI_VIDEO_CONT			VCBUS_REG_ADDR(ENCI_VIDEO_CONT)
+#define ENCI_VIDEO_SAT				0x1b05
+#define P_ENCI_VIDEO_SAT			VCBUS_REG_ADDR(ENCI_VIDEO_SAT)
+#define ENCI_VIDEO_HUE				0x1b06
+#define P_ENCI_VIDEO_HUE			VCBUS_REG_ADDR(ENCI_VIDEO_HUE)
+#define ENCI_VIDEO_SCH				0x1b07
+#define P_ENCI_VIDEO_SCH			VCBUS_REG_ADDR(ENCI_VIDEO_SCH)
+#define ENCI_SYNC_MODE				0x1b08
+#define P_ENCI_SYNC_MODE			VCBUS_REG_ADDR(ENCI_SYNC_MODE)
+#define ENCI_SYNC_CTRL				0x1b09
+#define P_ENCI_SYNC_CTRL			VCBUS_REG_ADDR(ENCI_SYNC_CTRL)
+#define ENCI_SYNC_HSO_BEGIN			0x1b0a
+#define P_ENCI_SYNC_HSO_BEGIN			VCBUS_REG_ADDR(ENCI_SYNC_HSO_BEGIN)
+#define ENCI_SYNC_HSO_END			0x1b0b
+#define P_ENCI_SYNC_HSO_END			VCBUS_REG_ADDR(ENCI_SYNC_HSO_END)
+#define ENCI_SYNC_VSO_EVN			0x1b0c
+#define P_ENCI_SYNC_VSO_EVN			VCBUS_REG_ADDR(ENCI_SYNC_VSO_EVN)
+#define ENCI_SYNC_VSO_ODD			0x1b0d
+#define P_ENCI_SYNC_VSO_ODD			VCBUS_REG_ADDR(ENCI_SYNC_VSO_ODD)
+#define ENCI_SYNC_VSO_EVNLN			0x1b0e
+#define P_ENCI_SYNC_VSO_EVNLN			VCBUS_REG_ADDR(ENCI_SYNC_VSO_EVNLN)
+#define ENCI_SYNC_VSO_ODDLN			0x1b0f
+#define P_ENCI_SYNC_VSO_ODDLN			VCBUS_REG_ADDR(ENCI_SYNC_VSO_ODDLN)
+#define ENCI_SYNC_HOFFST			0x1b10
+#define P_ENCI_SYNC_HOFFST			VCBUS_REG_ADDR(ENCI_SYNC_HOFFST)
+#define ENCI_SYNC_VOFFST			0x1b11
+#define P_ENCI_SYNC_VOFFST			VCBUS_REG_ADDR(ENCI_SYNC_VOFFST)
+#define ENCI_SYNC_ADJ				0x1b12
+#define P_ENCI_SYNC_ADJ				VCBUS_REG_ADDR(ENCI_SYNC_ADJ)
+#define ENCI_RGB_SETTING			0x1b13
+#define P_ENCI_RGB_SETTING			VCBUS_REG_ADDR(ENCI_RGB_SETTING)
+#define ENCI_DE_H_BEGIN				0x1b16
+#define P_ENCI_DE_H_BEGIN			VCBUS_REG_ADDR(ENCI_DE_H_BEGIN)
+#define ENCI_DE_H_END				0x1b17
+#define P_ENCI_DE_H_END				VCBUS_REG_ADDR(ENCI_DE_H_END)
+#define ENCI_DE_V_BEGIN_EVEN			0x1b18
+#define P_ENCI_DE_V_BEGIN_EVEN			VCBUS_REG_ADDR(ENCI_DE_V_BEGIN_EVEN)
+#define ENCI_DE_V_END_EVEN			0x1b19
+#define P_ENCI_DE_V_END_EVEN			VCBUS_REG_ADDR(ENCI_DE_V_END_EVEN)
+#define ENCI_DE_V_BEGIN_ODD			0x1b1a
+#define P_ENCI_DE_V_BEGIN_ODD			VCBUS_REG_ADDR(ENCI_DE_V_BEGIN_ODD)
+#define ENCI_DE_V_END_ODD			0x1b1b
+#define P_ENCI_DE_V_END_ODD			VCBUS_REG_ADDR(ENCI_DE_V_END_ODD)
+#define ENCI_VBI_SETTING			0x1b20
+#define P_ENCI_VBI_SETTING			VCBUS_REG_ADDR(ENCI_VBI_SETTING)
+#define ENCI_VBI_CCDT_EVN			0x1b21
+#define P_ENCI_VBI_CCDT_EVN			VCBUS_REG_ADDR(ENCI_VBI_CCDT_EVN)
+#define ENCI_VBI_CCDT_ODD			0x1b22
+#define P_ENCI_VBI_CCDT_ODD			VCBUS_REG_ADDR(ENCI_VBI_CCDT_ODD)
+#define ENCI_VBI_CC525_LN			0x1b23
+#define P_ENCI_VBI_CC525_LN			VCBUS_REG_ADDR(ENCI_VBI_CC525_LN)
+#define ENCI_VBI_CC625_LN			0x1b24
+#define P_ENCI_VBI_CC625_LN			VCBUS_REG_ADDR(ENCI_VBI_CC625_LN)
+#define ENCI_VBI_WSSDT				0x1b25
+#define P_ENCI_VBI_WSSDT			VCBUS_REG_ADDR(ENCI_VBI_WSSDT)
+#define ENCI_VBI_WSS_LN				0x1b26
+#define P_ENCI_VBI_WSS_LN			VCBUS_REG_ADDR(ENCI_VBI_WSS_LN)
+#define ENCI_VBI_CGMSDT_L			0x1b27
+#define P_ENCI_VBI_CGMSDT_L			VCBUS_REG_ADDR(ENCI_VBI_CGMSDT_L)
+#define ENCI_VBI_CGMSDT_H			0x1b28
+#define P_ENCI_VBI_CGMSDT_H			VCBUS_REG_ADDR(ENCI_VBI_CGMSDT_H)
+#define ENCI_VBI_CGMS_LN			0x1b29
+#define P_ENCI_VBI_CGMS_LN			VCBUS_REG_ADDR(ENCI_VBI_CGMS_LN)
+#define ENCI_VBI_TTX_HTIME			0x1b2a
+#define P_ENCI_VBI_TTX_HTIME			VCBUS_REG_ADDR(ENCI_VBI_TTX_HTIME)
+#define ENCI_VBI_TTX_LN				0x1b2b
+#define P_ENCI_VBI_TTX_LN			VCBUS_REG_ADDR(ENCI_VBI_TTX_LN)
+#define ENCI_VBI_TTXDT0				0x1b2c
+#define P_ENCI_VBI_TTXDT0			VCBUS_REG_ADDR(ENCI_VBI_TTXDT0)
+#define ENCI_VBI_TTXDT1				0x1b2d
+#define P_ENCI_VBI_TTXDT1			VCBUS_REG_ADDR(ENCI_VBI_TTXDT1)
+#define ENCI_VBI_TTXDT2				0x1b2e
+#define P_ENCI_VBI_TTXDT2			VCBUS_REG_ADDR(ENCI_VBI_TTXDT2)
+#define ENCI_VBI_TTXDT3				0x1b2f
+#define P_ENCI_VBI_TTXDT3			VCBUS_REG_ADDR(ENCI_VBI_TTXDT3)
+#define ENCI_MACV_N0				0x1b30
+#define P_ENCI_MACV_N0				VCBUS_REG_ADDR(ENCI_MACV_N0)
+#define ENCI_MACV_N1				0x1b31
+#define P_ENCI_MACV_N1				VCBUS_REG_ADDR(ENCI_MACV_N1)
+#define ENCI_MACV_N2				0x1b32
+#define P_ENCI_MACV_N2				VCBUS_REG_ADDR(ENCI_MACV_N2)
+#define ENCI_MACV_N3				0x1b33
+#define P_ENCI_MACV_N3				VCBUS_REG_ADDR(ENCI_MACV_N3)
+#define ENCI_MACV_N4				0x1b34
+#define P_ENCI_MACV_N4				VCBUS_REG_ADDR(ENCI_MACV_N4)
+#define ENCI_MACV_N5				0x1b35
+#define P_ENCI_MACV_N5				VCBUS_REG_ADDR(ENCI_MACV_N5)
+#define ENCI_MACV_N6				0x1b36
+#define P_ENCI_MACV_N6				VCBUS_REG_ADDR(ENCI_MACV_N6)
+#define ENCI_MACV_N7				0x1b37
+#define P_ENCI_MACV_N7				VCBUS_REG_ADDR(ENCI_MACV_N7)
+#define ENCI_MACV_N8				0x1b38
+#define P_ENCI_MACV_N8				VCBUS_REG_ADDR(ENCI_MACV_N8)
+#define ENCI_MACV_N9				0x1b39
+#define P_ENCI_MACV_N9				VCBUS_REG_ADDR(ENCI_MACV_N9)
+#define ENCI_MACV_N10				0x1b3a
+#define P_ENCI_MACV_N10				VCBUS_REG_ADDR(ENCI_MACV_N10)
+#define ENCI_MACV_N11				0x1b3b
+#define P_ENCI_MACV_N11				VCBUS_REG_ADDR(ENCI_MACV_N11)
+#define ENCI_MACV_N12				0x1b3c
+#define P_ENCI_MACV_N12				VCBUS_REG_ADDR(ENCI_MACV_N12)
+#define ENCI_MACV_N13				0x1b3d
+#define P_ENCI_MACV_N13				VCBUS_REG_ADDR(ENCI_MACV_N13)
+#define ENCI_MACV_N14				0x1b3e
+#define P_ENCI_MACV_N14				VCBUS_REG_ADDR(ENCI_MACV_N14)
+#define ENCI_MACV_N15				0x1b3f
+#define P_ENCI_MACV_N15				VCBUS_REG_ADDR(ENCI_MACV_N15)
+#define ENCI_MACV_N16				0x1b40
+#define P_ENCI_MACV_N16				VCBUS_REG_ADDR(ENCI_MACV_N16)
+#define ENCI_MACV_N17				0x1b41
+#define P_ENCI_MACV_N17				VCBUS_REG_ADDR(ENCI_MACV_N17)
+#define ENCI_MACV_N18				0x1b42
+#define P_ENCI_MACV_N18				VCBUS_REG_ADDR(ENCI_MACV_N18)
+#define ENCI_MACV_N19				0x1b43
+#define P_ENCI_MACV_N19				VCBUS_REG_ADDR(ENCI_MACV_N19)
+#define ENCI_MACV_N20				0x1b44
+#define P_ENCI_MACV_N20				VCBUS_REG_ADDR(ENCI_MACV_N20)
+#define ENCI_MACV_N21				0x1b45
+#define P_ENCI_MACV_N21				VCBUS_REG_ADDR(ENCI_MACV_N21)
+#define ENCI_MACV_N22				0x1b46
+#define P_ENCI_MACV_N22				VCBUS_REG_ADDR(ENCI_MACV_N22)
+#define ENCI_DBG_PX_RST				0x1b48
+#define P_ENCI_DBG_PX_RST			VCBUS_REG_ADDR(ENCI_DBG_PX_RST)
+#define ENCI_DBG_FLDLN_RST			0x1b49
+#define P_ENCI_DBG_FLDLN_RST			VCBUS_REG_ADDR(ENCI_DBG_FLDLN_RST)
+#define ENCI_DBG_PX_INT				0x1b4a
+#define P_ENCI_DBG_PX_INT			VCBUS_REG_ADDR(ENCI_DBG_PX_INT)
+#define ENCI_DBG_FLDLN_INT			0x1b4b
+#define P_ENCI_DBG_FLDLN_INT			VCBUS_REG_ADDR(ENCI_DBG_FLDLN_INT)
+#define ENCI_DBG_MAXPX				0x1b4c
+#define P_ENCI_DBG_MAXPX			VCBUS_REG_ADDR(ENCI_DBG_MAXPX)
+#define ENCI_DBG_MAXLN				0x1b4d
+#define P_ENCI_DBG_MAXLN			VCBUS_REG_ADDR(ENCI_DBG_MAXLN)
+#define ENCI_MACV_MAX_AMP			0x1b50
+#define P_ENCI_MACV_MAX_AMP			VCBUS_REG_ADDR(ENCI_MACV_MAX_AMP)
+#define ENCI_MACV_PULSE_LO			0x1b51
+#define P_ENCI_MACV_PULSE_LO			VCBUS_REG_ADDR(ENCI_MACV_PULSE_LO)
+#define ENCI_MACV_PULSE_HI			0x1b52
+#define P_ENCI_MACV_PULSE_HI			VCBUS_REG_ADDR(ENCI_MACV_PULSE_HI)
+#define ENCI_MACV_BKP_MAX			0x1b53
+#define P_ENCI_MACV_BKP_MAX			VCBUS_REG_ADDR(ENCI_MACV_BKP_MAX)
+#define ENCI_CFILT_CTRL				0x1b54
+#define P_ENCI_CFILT_CTRL			VCBUS_REG_ADDR(ENCI_CFILT_CTRL)
+#define ENCI_CFILT7				0x1b55
+#define P_ENCI_CFILT7				VCBUS_REG_ADDR(ENCI_CFILT7)
+#define ENCI_YC_DELAY				0x1b56
+#define P_ENCI_YC_DELAY				VCBUS_REG_ADDR(ENCI_YC_DELAY)
+#define ENCI_VIDEO_EN				0x1b57
+#define P_ENCI_VIDEO_EN				VCBUS_REG_ADDR(ENCI_VIDEO_EN)
+#define ENCI_DVI_HSO_BEGIN			0x1c00
+#define P_ENCI_DVI_HSO_BEGIN			VCBUS_REG_ADDR(ENCI_DVI_HSO_BEGIN)
+#define ENCI_DVI_HSO_END			0x1c01
+#define P_ENCI_DVI_HSO_END			VCBUS_REG_ADDR(ENCI_DVI_HSO_END)
+#define ENCI_DVI_VSO_BLINE_EVN			0x1c02
+#define P_ENCI_DVI_VSO_BLINE_EVN		VCBUS_REG_ADDR(ENCI_DVI_VSO_BLINE_EVN)
+#define ENCI_DVI_VSO_BLINE_ODD			0x1c03
+#define P_ENCI_DVI_VSO_BLINE_ODD		VCBUS_REG_ADDR(ENCI_DVI_VSO_BLINE_ODD)
+#define ENCI_DVI_VSO_ELINE_EVN			0x1c04
+#define P_ENCI_DVI_VSO_ELINE_EVN		VCBUS_REG_ADDR(ENCI_DVI_VSO_ELINE_EVN)
+#define ENCI_DVI_VSO_ELINE_ODD			0x1c05
+#define P_ENCI_DVI_VSO_ELINE_ODD		VCBUS_REG_ADDR(ENCI_DVI_VSO_ELINE_ODD)
+#define ENCI_DVI_VSO_BEGIN_EVN			0x1c06
+#define P_ENCI_DVI_VSO_BEGIN_EVN		VCBUS_REG_ADDR(ENCI_DVI_VSO_BEGIN_EVN)
+#define ENCI_DVI_VSO_BEGIN_ODD			0x1c07
+#define P_ENCI_DVI_VSO_BEGIN_ODD		VCBUS_REG_ADDR(ENCI_DVI_VSO_BEGIN_ODD)
+#define ENCI_DVI_VSO_END_EVN			0x1c08
+#define P_ENCI_DVI_VSO_END_EVN			VCBUS_REG_ADDR(ENCI_DVI_VSO_END_EVN)
+#define ENCI_DVI_VSO_END_ODD			0x1c09
+#define P_ENCI_DVI_VSO_END_ODD			VCBUS_REG_ADDR(ENCI_DVI_VSO_END_ODD)
+#define ENCI_CFILT_CTRL2			0x1c0a
+#define P_ENCI_CFILT_CTRL2			VCBUS_REG_ADDR(ENCI_CFILT_CTRL2)
+#define ENCI_DACSEL_0				0x1c0b
+#define P_ENCI_DACSEL_0				VCBUS_REG_ADDR(ENCI_DACSEL_0)
+#define ENCI_DACSEL_1				0x1c0c
+#define P_ENCI_DACSEL_1				VCBUS_REG_ADDR(ENCI_DACSEL_1)
+#define ENCP_DACSEL_0				0x1c0d
+#define P_ENCP_DACSEL_0				VCBUS_REG_ADDR(ENCP_DACSEL_0)
+#define ENCP_DACSEL_1				0x1c0e
+#define P_ENCP_DACSEL_1				VCBUS_REG_ADDR(ENCP_DACSEL_1)
+#define ENCP_MAX_LINE_SWITCH_POINT		0x1c0f
+#define P_ENCP_MAX_LINE_SWITCH_POINT		VCBUS_REG_ADDR(ENCP_MAX_LINE_SWITCH_POINT)
+#define ENCI_TST_EN				0x1c10
+#define P_ENCI_TST_EN				VCBUS_REG_ADDR(ENCI_TST_EN)
+#define ENCI_TST_MDSEL				0x1c11
+#define P_ENCI_TST_MDSEL			VCBUS_REG_ADDR(ENCI_TST_MDSEL)
+#define ENCI_TST_Y				0x1c12
+#define P_ENCI_TST_Y				VCBUS_REG_ADDR(ENCI_TST_Y)
+#define ENCI_TST_CB				0x1c13
+#define P_ENCI_TST_CB				VCBUS_REG_ADDR(ENCI_TST_CB)
+#define ENCI_TST_CR				0x1c14
+#define P_ENCI_TST_CR				VCBUS_REG_ADDR(ENCI_TST_CR)
+#define ENCI_TST_CLRBAR_STRT			0x1c15
+#define P_ENCI_TST_CLRBAR_STRT			VCBUS_REG_ADDR(ENCI_TST_CLRBAR_STRT)
+#define ENCI_TST_CLRBAR_WIDTH			0x1c16
+#define P_ENCI_TST_CLRBAR_WIDTH			VCBUS_REG_ADDR(ENCI_TST_CLRBAR_WIDTH)
+#define ENCI_TST_VDCNT_STSET			0x1c17
+#define P_ENCI_TST_VDCNT_STSET			VCBUS_REG_ADDR(ENCI_TST_VDCNT_STSET)
+#define ENCI_VFIFO2VD_CTL			0x1c18
+#define P_ENCI_VFIFO2VD_CTL			VCBUS_REG_ADDR(ENCI_VFIFO2VD_CTL)
+#define ENCI_VFIFO2VD_PIXEL_START		0x1c19
+#define P_ENCI_VFIFO2VD_PIXEL_START		VCBUS_REG_ADDR(ENCI_VFIFO2VD_PIXEL_START)
+#define ENCI_VFIFO2VD_PIXEL_END			0x1c1a
+#define P_ENCI_VFIFO2VD_PIXEL_END		VCBUS_REG_ADDR(ENCI_VFIFO2VD_PIXEL_END)
+#define ENCI_VFIFO2VD_LINE_TOP_START		0x1c1b
+#define P_ENCI_VFIFO2VD_LINE_TOP_START		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_TOP_START)
+#define ENCI_VFIFO2VD_LINE_TOP_END		0x1c1c
+#define P_ENCI_VFIFO2VD_LINE_TOP_END		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_TOP_END)
+#define ENCI_VFIFO2VD_LINE_BOT_START		0x1c1d
+#define P_ENCI_VFIFO2VD_LINE_BOT_START		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_BOT_START)
+#define ENCI_VFIFO2VD_LINE_BOT_END		0x1c1e
+#define P_ENCI_VFIFO2VD_LINE_BOT_END		VCBUS_REG_ADDR(ENCI_VFIFO2VD_LINE_BOT_END)
+#define ENCI_VFIFO2VD_CTL2			0x1c1f
+#define P_ENCI_VFIFO2VD_CTL2			VCBUS_REG_ADDR(ENCI_VFIFO2VD_CTL2)
+#define ENCT_VFIFO2VD_CTL			0x1c20
+#define P_ENCT_VFIFO2VD_CTL			VCBUS_REG_ADDR(ENCT_VFIFO2VD_CTL)
+#define ENCT_VFIFO2VD_PIXEL_START		0x1c21
+#define P_ENCT_VFIFO2VD_PIXEL_START		VCBUS_REG_ADDR(ENCT_VFIFO2VD_PIXEL_START)
+#define ENCT_VFIFO2VD_PIXEL_END			0x1c22
+#define P_ENCT_VFIFO2VD_PIXEL_END		VCBUS_REG_ADDR(ENCT_VFIFO2VD_PIXEL_END)
+#define ENCT_VFIFO2VD_LINE_TOP_START		0x1c23
+#define P_ENCT_VFIFO2VD_LINE_TOP_START		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_TOP_START)
+#define ENCT_VFIFO2VD_LINE_TOP_END		0x1c24
+#define P_ENCT_VFIFO2VD_LINE_TOP_END		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_TOP_END)
+#define ENCT_VFIFO2VD_LINE_BOT_START		0x1c25
+#define P_ENCT_VFIFO2VD_LINE_BOT_START		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_BOT_START)
+#define ENCT_VFIFO2VD_LINE_BOT_END		0x1c26
+#define P_ENCT_VFIFO2VD_LINE_BOT_END		VCBUS_REG_ADDR(ENCT_VFIFO2VD_LINE_BOT_END)
+#define ENCT_VFIFO2VD_CTL2			0x1c27
+#define P_ENCT_VFIFO2VD_CTL2			VCBUS_REG_ADDR(ENCT_VFIFO2VD_CTL2)
+#define ENCT_TST_EN				0x1c28
+#define P_ENCT_TST_EN				VCBUS_REG_ADDR(ENCT_TST_EN)
+#define ENCT_TST_MDSEL				0x1c29
+#define P_ENCT_TST_MDSEL			VCBUS_REG_ADDR(ENCT_TST_MDSEL)
+#define ENCT_TST_Y				0x1c2a
+#define P_ENCT_TST_Y				VCBUS_REG_ADDR(ENCT_TST_Y)
+#define ENCT_TST_CB				0x1c2b
+#define P_ENCT_TST_CB				VCBUS_REG_ADDR(ENCT_TST_CB)
+#define ENCT_TST_CR				0x1c2c
+#define P_ENCT_TST_CR				VCBUS_REG_ADDR(ENCT_TST_CR)
+#define ENCT_TST_CLRBAR_STRT			0x1c2d
+#define P_ENCT_TST_CLRBAR_STRT			VCBUS_REG_ADDR(ENCT_TST_CLRBAR_STRT)
+#define ENCT_TST_CLRBAR_WIDTH			0x1c2e
+#define P_ENCT_TST_CLRBAR_WIDTH			VCBUS_REG_ADDR(ENCT_TST_CLRBAR_WIDTH)
+#define ENCT_TST_VDCNT_STSET			0x1c2f
+#define P_ENCT_TST_VDCNT_STSET			VCBUS_REG_ADDR(ENCT_TST_VDCNT_STSET)
+#define ENCP_DVI_HSO_BEGIN			0x1c30
+#define P_ENCP_DVI_HSO_BEGIN			VCBUS_REG_ADDR(ENCP_DVI_HSO_BEGIN)
+#define ENCP_DVI_HSO_END			0x1c31
+#define P_ENCP_DVI_HSO_END			VCBUS_REG_ADDR(ENCP_DVI_HSO_END)
+#define ENCP_DVI_VSO_BLINE_EVN			0x1c32
+#define P_ENCP_DVI_VSO_BLINE_EVN		VCBUS_REG_ADDR(ENCP_DVI_VSO_BLINE_EVN)
+#define ENCP_DVI_VSO_BLINE_ODD			0x1c33
+#define P_ENCP_DVI_VSO_BLINE_ODD		VCBUS_REG_ADDR(ENCP_DVI_VSO_BLINE_ODD)
+#define ENCP_DVI_VSO_ELINE_EVN			0x1c34
+#define P_ENCP_DVI_VSO_ELINE_EVN		VCBUS_REG_ADDR(ENCP_DVI_VSO_ELINE_EVN)
+#define ENCP_DVI_VSO_ELINE_ODD			0x1c35
+#define P_ENCP_DVI_VSO_ELINE_ODD		VCBUS_REG_ADDR(ENCP_DVI_VSO_ELINE_ODD)
+#define ENCP_DVI_VSO_BEGIN_EVN			0x1c36
+#define P_ENCP_DVI_VSO_BEGIN_EVN		VCBUS_REG_ADDR(ENCP_DVI_VSO_BEGIN_EVN)
+#define ENCP_DVI_VSO_BEGIN_ODD			0x1c37
+#define P_ENCP_DVI_VSO_BEGIN_ODD		VCBUS_REG_ADDR(ENCP_DVI_VSO_BEGIN_ODD)
+#define ENCP_DVI_VSO_END_EVN			0x1c38
+#define P_ENCP_DVI_VSO_END_EVN			VCBUS_REG_ADDR(ENCP_DVI_VSO_END_EVN)
+#define ENCP_DVI_VSO_END_ODD			0x1c39
+#define P_ENCP_DVI_VSO_END_ODD			VCBUS_REG_ADDR(ENCP_DVI_VSO_END_ODD)
+#define ENCP_DE_H_BEGIN				0x1c3a
+#define P_ENCP_DE_H_BEGIN			VCBUS_REG_ADDR(ENCP_DE_H_BEGIN)
+#define ENCP_DE_H_END				0x1c3b
+#define P_ENCP_DE_H_END				VCBUS_REG_ADDR(ENCP_DE_H_END)
+#define ENCP_DE_V_BEGIN_EVEN			0x1c3c
+#define P_ENCP_DE_V_BEGIN_EVEN			VCBUS_REG_ADDR(ENCP_DE_V_BEGIN_EVEN)
+#define ENCP_DE_V_END_EVEN			0x1c3d
+#define P_ENCP_DE_V_END_EVEN			VCBUS_REG_ADDR(ENCP_DE_V_END_EVEN)
+#define ENCP_DE_V_BEGIN_ODD			0x1c3e
+#define P_ENCP_DE_V_BEGIN_ODD			VCBUS_REG_ADDR(ENCP_DE_V_BEGIN_ODD)
+#define ENCP_DE_V_END_ODD			0x1c3f
+#define P_ENCP_DE_V_END_ODD			VCBUS_REG_ADDR(ENCP_DE_V_END_ODD)
+#define ENCI_SYNC_LINE_LENGTH			0x1c40
+#define P_ENCI_SYNC_LINE_LENGTH			VCBUS_REG_ADDR(ENCI_SYNC_LINE_LENGTH)
+#define ENCI_SYNC_PIXEL_EN			0x1c41
+#define P_ENCI_SYNC_PIXEL_EN			VCBUS_REG_ADDR(ENCI_SYNC_PIXEL_EN)
+#define ENCI_SYNC_TO_LINE_EN			0x1c42
+#define P_ENCI_SYNC_TO_LINE_EN			VCBUS_REG_ADDR(ENCI_SYNC_TO_LINE_EN)
+#define ENCI_SYNC_TO_PIXEL			0x1c43
+#define P_ENCI_SYNC_TO_PIXEL			VCBUS_REG_ADDR(ENCI_SYNC_TO_PIXEL)
+#define ENCP_SYNC_LINE_LENGTH			0x1c44
+#define P_ENCP_SYNC_LINE_LENGTH			VCBUS_REG_ADDR(ENCP_SYNC_LINE_LENGTH)
+#define ENCP_SYNC_PIXEL_EN			0x1c45
+#define P_ENCP_SYNC_PIXEL_EN			VCBUS_REG_ADDR(ENCP_SYNC_PIXEL_EN)
+#define ENCP_SYNC_TO_LINE_EN			0x1c46
+#define P_ENCP_SYNC_TO_LINE_EN			VCBUS_REG_ADDR(ENCP_SYNC_TO_LINE_EN)
+#define ENCP_SYNC_TO_PIXEL			0x1c47
+#define P_ENCP_SYNC_TO_PIXEL			VCBUS_REG_ADDR(ENCP_SYNC_TO_PIXEL)
+#define ENCT_SYNC_LINE_LENGTH			0x1c48
+#define P_ENCT_SYNC_LINE_LENGTH			VCBUS_REG_ADDR(ENCT_SYNC_LINE_LENGTH)
+#define ENCT_SYNC_PIXEL_EN			0x1c49
+#define P_ENCT_SYNC_PIXEL_EN			VCBUS_REG_ADDR(ENCT_SYNC_PIXEL_EN)
+#define ENCT_SYNC_TO_LINE_EN			0x1c4a
+#define P_ENCT_SYNC_TO_LINE_EN			VCBUS_REG_ADDR(ENCT_SYNC_TO_LINE_EN)
+#define ENCT_SYNC_TO_PIXEL			0x1c4b
+#define P_ENCT_SYNC_TO_PIXEL			VCBUS_REG_ADDR(ENCT_SYNC_TO_PIXEL)
+#define ENCL_SYNC_LINE_LENGTH			0x1c4c
+#define P_ENCL_SYNC_LINE_LENGTH			VCBUS_REG_ADDR(ENCL_SYNC_LINE_LENGTH)
+#define ENCL_SYNC_PIXEL_EN			0x1c4d
+#define P_ENCL_SYNC_PIXEL_EN			VCBUS_REG_ADDR(ENCL_SYNC_PIXEL_EN)
+#define ENCL_SYNC_TO_LINE_EN			0x1c4e
+#define P_ENCL_SYNC_TO_LINE_EN			VCBUS_REG_ADDR(ENCL_SYNC_TO_LINE_EN)
+#define ENCL_SYNC_TO_PIXEL			0x1c4f
+#define P_ENCL_SYNC_TO_PIXEL			VCBUS_REG_ADDR(ENCL_SYNC_TO_PIXEL)
+#define ENCP_VFIFO2VD_CTL2			0x1c50
+#define P_ENCP_VFIFO2VD_CTL2			VCBUS_REG_ADDR(ENCP_VFIFO2VD_CTL2)
+#define VENC_DVI_SETTING_MORE			0x1c51
+#define P_VENC_DVI_SETTING_MORE			VCBUS_REG_ADDR(VENC_DVI_SETTING_MORE)
+#define VENC_VDAC_DAC4_FILT_CTRL0		0x1c54
+#define P_VENC_VDAC_DAC4_FILT_CTRL0		VCBUS_REG_ADDR(VENC_VDAC_DAC4_FILT_CTRL0)
+#define VENC_VDAC_DAC4_FILT_CTRL1		0x1c55
+#define P_VENC_VDAC_DAC4_FILT_CTRL1		VCBUS_REG_ADDR(VENC_VDAC_DAC4_FILT_CTRL1)
+#define VENC_VDAC_DAC5_FILT_CTRL0		0x1c56
+#define P_VENC_VDAC_DAC5_FILT_CTRL0		VCBUS_REG_ADDR(VENC_VDAC_DAC5_FILT_CTRL0)
+#define VENC_VDAC_DAC5_FILT_CTRL1		0x1c57
+#define P_VENC_VDAC_DAC5_FILT_CTRL1		VCBUS_REG_ADDR(VENC_VDAC_DAC5_FILT_CTRL1)
+#define VENC_VDAC_DAC0_FILT_CTRL0		0x1c58
+#define P_VENC_VDAC_DAC0_FILT_CTRL0		VCBUS_REG_ADDR(VENC_VDAC_DAC0_FILT_CTRL0)
+#define VENC_VDAC_DAC0_FILT_CTRL1		0x1c59
+#define P_VENC_VDAC_DAC0_FILT_CTRL1		VCBUS_REG_ADDR(VENC_VDAC_DAC0_FILT_CTRL1)
+#define VENC_VDAC_DAC1_FILT_CTRL0		0x1c5a
+#define P_VENC_VDAC_DAC1_FILT_CTRL0		VCBUS_REG_ADDR(VENC_VDAC_DAC1_FILT_CTRL0)
+#define VENC_VDAC_DAC1_FILT_CTRL1		0x1c5b
+#define P_VENC_VDAC_DAC1_FILT_CTRL1		VCBUS_REG_ADDR(VENC_VDAC_DAC1_FILT_CTRL1)
+#define VENC_VDAC_DAC2_FILT_CTRL0		0x1c5c
+#define P_VENC_VDAC_DAC2_FILT_CTRL0		VCBUS_REG_ADDR(VENC_VDAC_DAC2_FILT_CTRL0)
+#define VENC_VDAC_DAC2_FILT_CTRL1		0x1c5d
+#define P_VENC_VDAC_DAC2_FILT_CTRL1		VCBUS_REG_ADDR(VENC_VDAC_DAC2_FILT_CTRL1)
+#define VENC_VDAC_DAC3_FILT_CTRL0		0x1c5e
+#define P_VENC_VDAC_DAC3_FILT_CTRL0		VCBUS_REG_ADDR(VENC_VDAC_DAC3_FILT_CTRL0)
+#define VENC_VDAC_DAC3_FILT_CTRL1		0x1c5f
+#define P_VENC_VDAC_DAC3_FILT_CTRL1		VCBUS_REG_ADDR(VENC_VDAC_DAC3_FILT_CTRL1)
+#define ENCT_VIDEO_EN				0x1c60
+#define P_ENCT_VIDEO_EN				VCBUS_REG_ADDR(ENCT_VIDEO_EN)
+#define ENCT_VIDEO_Y_SCL			0x1c61
+#define P_ENCT_VIDEO_Y_SCL			VCBUS_REG_ADDR(ENCT_VIDEO_Y_SCL)
+#define ENCT_VIDEO_PB_SCL			0x1c62
+#define P_ENCT_VIDEO_PB_SCL			VCBUS_REG_ADDR(ENCT_VIDEO_PB_SCL)
+#define ENCT_VIDEO_PR_SCL			0x1c63
+#define P_ENCT_VIDEO_PR_SCL			VCBUS_REG_ADDR(ENCT_VIDEO_PR_SCL)
+#define ENCT_VIDEO_Y_OFFST			0x1c64
+#define P_ENCT_VIDEO_Y_OFFST			VCBUS_REG_ADDR(ENCT_VIDEO_Y_OFFST)
+#define ENCT_VIDEO_PB_OFFST			0x1c65
+#define P_ENCT_VIDEO_PB_OFFST			VCBUS_REG_ADDR(ENCT_VIDEO_PB_OFFST)
+#define ENCT_VIDEO_PR_OFFST			0x1c66
+#define P_ENCT_VIDEO_PR_OFFST			VCBUS_REG_ADDR(ENCT_VIDEO_PR_OFFST)
+#define ENCT_VIDEO_MODE				0x1c67
+#define P_ENCT_VIDEO_MODE			VCBUS_REG_ADDR(ENCT_VIDEO_MODE)
+#define ENCT_VIDEO_MODE_ADV			0x1c68
+#define P_ENCT_VIDEO_MODE_ADV			VCBUS_REG_ADDR(ENCT_VIDEO_MODE_ADV)
+#define ENCT_DBG_PX_RST				0x1c69
+#define P_ENCT_DBG_PX_RST			VCBUS_REG_ADDR(ENCT_DBG_PX_RST)
+#define ENCT_DBG_LN_RST				0x1c6a
+#define P_ENCT_DBG_LN_RST			VCBUS_REG_ADDR(ENCT_DBG_LN_RST)
+#define ENCT_DBG_PX_INT				0x1c6b
+#define P_ENCT_DBG_PX_INT			VCBUS_REG_ADDR(ENCT_DBG_PX_INT)
+#define ENCT_DBG_LN_INT				0x1c6c
+#define P_ENCT_DBG_LN_INT			VCBUS_REG_ADDR(ENCT_DBG_LN_INT)
+#define ENCT_VIDEO_YFP1_HTIME			0x1c6d
+#define P_ENCT_VIDEO_YFP1_HTIME			VCBUS_REG_ADDR(ENCT_VIDEO_YFP1_HTIME)
+#define ENCT_VIDEO_YFP2_HTIME			0x1c6e
+#define P_ENCT_VIDEO_YFP2_HTIME			VCBUS_REG_ADDR(ENCT_VIDEO_YFP2_HTIME)
+#define ENCT_VIDEO_YC_DLY			0x1c6f
+#define P_ENCT_VIDEO_YC_DLY			VCBUS_REG_ADDR(ENCT_VIDEO_YC_DLY)
+#define ENCT_VIDEO_MAX_PXCNT			0x1c70
+#define P_ENCT_VIDEO_MAX_PXCNT			VCBUS_REG_ADDR(ENCT_VIDEO_MAX_PXCNT)
+#define ENCT_VIDEO_HAVON_END			0x1c71
+#define P_ENCT_VIDEO_HAVON_END			VCBUS_REG_ADDR(ENCT_VIDEO_HAVON_END)
+#define ENCT_VIDEO_HAVON_BEGIN			0x1c72
+#define P_ENCT_VIDEO_HAVON_BEGIN		VCBUS_REG_ADDR(ENCT_VIDEO_HAVON_BEGIN)
+#define ENCT_VIDEO_VAVON_ELINE			0x1c73
+#define P_ENCT_VIDEO_VAVON_ELINE		VCBUS_REG_ADDR(ENCT_VIDEO_VAVON_ELINE)
+#define ENCT_VIDEO_VAVON_BLINE			0x1c74
+#define P_ENCT_VIDEO_VAVON_BLINE		VCBUS_REG_ADDR(ENCT_VIDEO_VAVON_BLINE)
+#define ENCT_VIDEO_HSO_BEGIN			0x1c75
+#define P_ENCT_VIDEO_HSO_BEGIN			VCBUS_REG_ADDR(ENCT_VIDEO_HSO_BEGIN)
+#define ENCT_VIDEO_HSO_END			0x1c76
+#define P_ENCT_VIDEO_HSO_END			VCBUS_REG_ADDR(ENCT_VIDEO_HSO_END)
+#define ENCT_VIDEO_VSO_BEGIN			0x1c77
+#define P_ENCT_VIDEO_VSO_BEGIN			VCBUS_REG_ADDR(ENCT_VIDEO_VSO_BEGIN)
+#define ENCT_VIDEO_VSO_END			0x1c78
+#define P_ENCT_VIDEO_VSO_END			VCBUS_REG_ADDR(ENCT_VIDEO_VSO_END)
+#define ENCT_VIDEO_VSO_BLINE			0x1c79
+#define P_ENCT_VIDEO_VSO_BLINE			VCBUS_REG_ADDR(ENCT_VIDEO_VSO_BLINE)
+#define ENCT_VIDEO_VSO_ELINE			0x1c7a
+#define P_ENCT_VIDEO_VSO_ELINE			VCBUS_REG_ADDR(ENCT_VIDEO_VSO_ELINE)
+#define ENCT_VIDEO_MAX_LNCNT			0x1c7b
+#define P_ENCT_VIDEO_MAX_LNCNT			VCBUS_REG_ADDR(ENCT_VIDEO_MAX_LNCNT)
+#define ENCT_VIDEO_BLANKY_VAL			0x1c7c
+#define P_ENCT_VIDEO_BLANKY_VAL			VCBUS_REG_ADDR(ENCT_VIDEO_BLANKY_VAL)
+#define ENCT_VIDEO_BLANKPB_VAL			0x1c7d
+#define P_ENCT_VIDEO_BLANKPB_VAL		VCBUS_REG_ADDR(ENCT_VIDEO_BLANKPB_VAL)
+#define ENCT_VIDEO_BLANKPR_VAL			0x1c7e
+#define P_ENCT_VIDEO_BLANKPR_VAL		VCBUS_REG_ADDR(ENCT_VIDEO_BLANKPR_VAL)
+#define ENCT_VIDEO_HOFFST			0x1c7f
+#define P_ENCT_VIDEO_HOFFST			VCBUS_REG_ADDR(ENCT_VIDEO_HOFFST)
+#define ENCT_VIDEO_VOFFST			0x1c80
+#define P_ENCT_VIDEO_VOFFST			VCBUS_REG_ADDR(ENCT_VIDEO_VOFFST)
+#define ENCT_VIDEO_RGB_CTRL			0x1c81
+#define P_ENCT_VIDEO_RGB_CTRL			VCBUS_REG_ADDR(ENCT_VIDEO_RGB_CTRL)
+#define ENCT_VIDEO_FILT_CTRL			0x1c82
+#define P_ENCT_VIDEO_FILT_CTRL			VCBUS_REG_ADDR(ENCT_VIDEO_FILT_CTRL)
+#define ENCT_VIDEO_OFLD_VPEQ_OFST		0x1c83
+#define P_ENCT_VIDEO_OFLD_VPEQ_OFST		VCBUS_REG_ADDR(ENCT_VIDEO_OFLD_VPEQ_OFST)
+#define ENCT_VIDEO_OFLD_VOAV_OFST		0x1c84
+#define P_ENCT_VIDEO_OFLD_VOAV_OFST		VCBUS_REG_ADDR(ENCT_VIDEO_OFLD_VOAV_OFST)
+#define ENCT_VIDEO_MATRIX_CB			0x1c85
+#define P_ENCT_VIDEO_MATRIX_CB			VCBUS_REG_ADDR(ENCT_VIDEO_MATRIX_CB)
+#define ENCT_VIDEO_MATRIX_CR			0x1c86
+#define P_ENCT_VIDEO_MATRIX_CR			VCBUS_REG_ADDR(ENCT_VIDEO_MATRIX_CR)
+#define ENCT_VIDEO_RGBIN_CTRL			0x1c87
+#define P_ENCT_VIDEO_RGBIN_CTRL			VCBUS_REG_ADDR(ENCT_VIDEO_RGBIN_CTRL)
+#define ENCT_MAX_LINE_SWITCH_POINT		0x1c88
+#define P_ENCT_MAX_LINE_SWITCH_POINT		VCBUS_REG_ADDR(ENCT_MAX_LINE_SWITCH_POINT)
+#define ENCT_DACSEL_0				0x1c89
+#define P_ENCT_DACSEL_0				VCBUS_REG_ADDR(ENCT_DACSEL_0)
+#define ENCT_DACSEL_1				0x1c8a
+#define P_ENCT_DACSEL_1				VCBUS_REG_ADDR(ENCT_DACSEL_1)
+#define ENCL_VFIFO2VD_CTL			0x1c90
+#define P_ENCL_VFIFO2VD_CTL			VCBUS_REG_ADDR(ENCL_VFIFO2VD_CTL)
+#define ENCL_VFIFO2VD_PIXEL_START		0x1c91
+#define P_ENCL_VFIFO2VD_PIXEL_START		VCBUS_REG_ADDR(ENCL_VFIFO2VD_PIXEL_START)
+#define ENCL_VFIFO2VD_PIXEL_END			0x1c92
+#define P_ENCL_VFIFO2VD_PIXEL_END		VCBUS_REG_ADDR(ENCL_VFIFO2VD_PIXEL_END)
+#define ENCL_VFIFO2VD_LINE_TOP_START		0x1c93
+#define P_ENCL_VFIFO2VD_LINE_TOP_START		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_TOP_START)
+#define ENCL_VFIFO2VD_LINE_TOP_END		0x1c94
+#define P_ENCL_VFIFO2VD_LINE_TOP_END		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_TOP_END)
+#define ENCL_VFIFO2VD_LINE_BOT_START		0x1c95
+#define P_ENCL_VFIFO2VD_LINE_BOT_START		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_BOT_START)
+#define ENCL_VFIFO2VD_LINE_BOT_END		0x1c96
+#define P_ENCL_VFIFO2VD_LINE_BOT_END		VCBUS_REG_ADDR(ENCL_VFIFO2VD_LINE_BOT_END)
+#define ENCL_VFIFO2VD_CTL2			0x1c97
+#define P_ENCL_VFIFO2VD_CTL2			VCBUS_REG_ADDR(ENCL_VFIFO2VD_CTL2)
+#define ENCL_TST_EN				0x1c98
+#define P_ENCL_TST_EN				VCBUS_REG_ADDR(ENCL_TST_EN)
+#define ENCL_TST_MDSEL				0x1c99
+#define P_ENCL_TST_MDSEL			VCBUS_REG_ADDR(ENCL_TST_MDSEL)
+#define ENCL_TST_Y				0x1c9a
+#define P_ENCL_TST_Y				VCBUS_REG_ADDR(ENCL_TST_Y)
+#define ENCL_TST_CB				0x1c9b
+#define P_ENCL_TST_CB				VCBUS_REG_ADDR(ENCL_TST_CB)
+#define ENCL_TST_CR				0x1c9c
+#define P_ENCL_TST_CR				VCBUS_REG_ADDR(ENCL_TST_CR)
+#define ENCL_TST_CLRBAR_STRT			0x1c9d
+#define P_ENCL_TST_CLRBAR_STRT			VCBUS_REG_ADDR(ENCL_TST_CLRBAR_STRT)
+#define ENCL_TST_CLRBAR_WIDTH			0x1c9e
+#define P_ENCL_TST_CLRBAR_WIDTH			VCBUS_REG_ADDR(ENCL_TST_CLRBAR_WIDTH)
+#define ENCL_TST_VDCNT_STSET			0x1c9f
+#define P_ENCL_TST_VDCNT_STSET			VCBUS_REG_ADDR(ENCL_TST_VDCNT_STSET)
+#define ENCL_VIDEO_EN				0x1ca0
+#define P_ENCL_VIDEO_EN				VCBUS_REG_ADDR(ENCL_VIDEO_EN)
+#define ENCL_VIDEO_Y_SCL			0x1ca1
+#define P_ENCL_VIDEO_Y_SCL			VCBUS_REG_ADDR(ENCL_VIDEO_Y_SCL)
+#define ENCL_VIDEO_PB_SCL			0x1ca2
+#define P_ENCL_VIDEO_PB_SCL			VCBUS_REG_ADDR(ENCL_VIDEO_PB_SCL)
+#define ENCL_VIDEO_PR_SCL			0x1ca3
+#define P_ENCL_VIDEO_PR_SCL			VCBUS_REG_ADDR(ENCL_VIDEO_PR_SCL)
+#define ENCL_VIDEO_Y_OFFST			0x1ca4
+#define P_ENCL_VIDEO_Y_OFFST			VCBUS_REG_ADDR(ENCL_VIDEO_Y_OFFST)
+#define ENCL_VIDEO_PB_OFFST			0x1ca5
+#define P_ENCL_VIDEO_PB_OFFST			VCBUS_REG_ADDR(ENCL_VIDEO_PB_OFFST)
+#define ENCL_VIDEO_PR_OFFST			0x1ca6
+#define P_ENCL_VIDEO_PR_OFFST			VCBUS_REG_ADDR(ENCL_VIDEO_PR_OFFST)
+#define ENCL_VIDEO_MODE				0x1ca7
+#define P_ENCL_VIDEO_MODE			VCBUS_REG_ADDR(ENCL_VIDEO_MODE)
+#define ENCL_VIDEO_MODE_ADV			0x1ca8
+#define P_ENCL_VIDEO_MODE_ADV			VCBUS_REG_ADDR(ENCL_VIDEO_MODE_ADV)
+#define ENCL_DBG_PX_RST				0x1ca9
+#define P_ENCL_DBG_PX_RST			VCBUS_REG_ADDR(ENCL_DBG_PX_RST)
+#define ENCL_DBG_LN_RST				0x1caa
+#define P_ENCL_DBG_LN_RST			VCBUS_REG_ADDR(ENCL_DBG_LN_RST)
+#define ENCL_DBG_PX_INT				0x1cab
+#define P_ENCL_DBG_PX_INT			VCBUS_REG_ADDR(ENCL_DBG_PX_INT)
+#define ENCL_DBG_LN_INT				0x1cac
+#define P_ENCL_DBG_LN_INT			VCBUS_REG_ADDR(ENCL_DBG_LN_INT)
+#define ENCL_VIDEO_YFP1_HTIME			0x1cad
+#define P_ENCL_VIDEO_YFP1_HTIME			VCBUS_REG_ADDR(ENCL_VIDEO_YFP1_HTIME)
+#define ENCL_VIDEO_YFP2_HTIME			0x1cae
+#define P_ENCL_VIDEO_YFP2_HTIME			VCBUS_REG_ADDR(ENCL_VIDEO_YFP2_HTIME)
+#define ENCL_VIDEO_YC_DLY			0x1caf
+#define P_ENCL_VIDEO_YC_DLY			VCBUS_REG_ADDR(ENCL_VIDEO_YC_DLY)
+#define ENCL_VIDEO_MAX_PXCNT			0x1cb0
+#define P_ENCL_VIDEO_MAX_PXCNT			VCBUS_REG_ADDR(ENCL_VIDEO_MAX_PXCNT)
+#define ENCL_VIDEO_HAVON_END			0x1cb1
+#define P_ENCL_VIDEO_HAVON_END			VCBUS_REG_ADDR(ENCL_VIDEO_HAVON_END)
+#define ENCL_VIDEO_HAVON_BEGIN			0x1cb2
+#define P_ENCL_VIDEO_HAVON_BEGIN		VCBUS_REG_ADDR(ENCL_VIDEO_HAVON_BEGIN)
+#define ENCL_VIDEO_VAVON_ELINE			0x1cb3
+#define P_ENCL_VIDEO_VAVON_ELINE		VCBUS_REG_ADDR(ENCL_VIDEO_VAVON_ELINE)
+#define ENCL_VIDEO_VAVON_BLINE			0x1cb4
+#define P_ENCL_VIDEO_VAVON_BLINE		VCBUS_REG_ADDR(ENCL_VIDEO_VAVON_BLINE)
+#define ENCL_VIDEO_HSO_BEGIN			0x1cb5
+#define P_ENCL_VIDEO_HSO_BEGIN			VCBUS_REG_ADDR(ENCL_VIDEO_HSO_BEGIN)
+#define ENCL_VIDEO_HSO_END			0x1cb6
+#define P_ENCL_VIDEO_HSO_END			VCBUS_REG_ADDR(ENCL_VIDEO_HSO_END)
+#define ENCL_VIDEO_VSO_BEGIN			0x1cb7
+#define P_ENCL_VIDEO_VSO_BEGIN			VCBUS_REG_ADDR(ENCL_VIDEO_VSO_BEGIN)
+#define ENCL_VIDEO_VSO_END			0x1cb8
+#define P_ENCL_VIDEO_VSO_END			VCBUS_REG_ADDR(ENCL_VIDEO_VSO_END)
+#define ENCL_VIDEO_VSO_BLINE			0x1cb9
+#define P_ENCL_VIDEO_VSO_BLINE			VCBUS_REG_ADDR(ENCL_VIDEO_VSO_BLINE)
+#define ENCL_VIDEO_VSO_ELINE			0x1cba
+#define P_ENCL_VIDEO_VSO_ELINE			VCBUS_REG_ADDR(ENCL_VIDEO_VSO_ELINE)
+#define ENCL_VIDEO_MAX_LNCNT			0x1cbb
+#define P_ENCL_VIDEO_MAX_LNCNT			VCBUS_REG_ADDR(ENCL_VIDEO_MAX_LNCNT)
+#define ENCL_VIDEO_BLANKY_VAL			0x1cbc
+#define P_ENCL_VIDEO_BLANKY_VAL			VCBUS_REG_ADDR(ENCL_VIDEO_BLANKY_VAL)
+#define ENCL_VIDEO_BLANKPB_VAL			0x1cbd
+#define P_ENCL_VIDEO_BLANKPB_VAL		VCBUS_REG_ADDR(ENCL_VIDEO_BLANKPB_VAL)
+#define ENCL_VIDEO_BLANKPR_VAL			0x1cbe
+#define P_ENCL_VIDEO_BLANKPR_VAL		VCBUS_REG_ADDR(ENCL_VIDEO_BLANKPR_VAL)
+#define ENCL_VIDEO_HOFFST			0x1cbf
+#define P_ENCL_VIDEO_HOFFST			VCBUS_REG_ADDR(ENCL_VIDEO_HOFFST)
+#define ENCL_VIDEO_VOFFST			0x1cc0
+#define P_ENCL_VIDEO_VOFFST			VCBUS_REG_ADDR(ENCL_VIDEO_VOFFST)
+#define ENCL_VIDEO_RGB_CTRL			0x1cc1
+#define P_ENCL_VIDEO_RGB_CTRL			VCBUS_REG_ADDR(ENCL_VIDEO_RGB_CTRL)
+#define ENCL_VIDEO_FILT_CTRL			0x1cc2
+#define P_ENCL_VIDEO_FILT_CTRL			VCBUS_REG_ADDR(ENCL_VIDEO_FILT_CTRL)
+#define ENCL_VIDEO_OFLD_VPEQ_OFST		0x1cc3
+#define P_ENCL_VIDEO_OFLD_VPEQ_OFST		VCBUS_REG_ADDR(ENCL_VIDEO_OFLD_VPEQ_OFST)
+#define ENCL_VIDEO_OFLD_VOAV_OFST		0x1cc4
+#define P_ENCL_VIDEO_OFLD_VOAV_OFST		VCBUS_REG_ADDR(ENCL_VIDEO_OFLD_VOAV_OFST)
+#define ENCL_VIDEO_MATRIX_CB			0x1cc5
+#define P_ENCL_VIDEO_MATRIX_CB			VCBUS_REG_ADDR(ENCL_VIDEO_MATRIX_CB)
+#define ENCL_VIDEO_MATRIX_CR			0x1cc6
+#define P_ENCL_VIDEO_MATRIX_CR			VCBUS_REG_ADDR(ENCL_VIDEO_MATRIX_CR)
+#define ENCL_VIDEO_RGBIN_CTRL			0x1cc7
+#define P_ENCL_VIDEO_RGBIN_CTRL			VCBUS_REG_ADDR(ENCL_VIDEO_RGBIN_CTRL)
+#define ENCL_MAX_LINE_SWITCH_POINT		0x1cc8
+#define P_ENCL_MAX_LINE_SWITCH_POINT		VCBUS_REG_ADDR(ENCL_MAX_LINE_SWITCH_POINT)
+#define ENCL_DACSEL_0				0x1cc9
+#define P_ENCL_DACSEL_0				VCBUS_REG_ADDR(ENCL_DACSEL_0)
+#define ENCL_DACSEL_1				0x1cca
+#define P_ENCL_DACSEL_1				VCBUS_REG_ADDR(ENCL_DACSEL_1)
+#define RDMA_AHB_START_ADDR_MAN			0x1cf0
+#define P_RDMA_AHB_START_ADDR_MAN		VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_MAN)
+#define RDMA_AHB_END_ADDR_MAN			0x1cf1
+#define P_RDMA_AHB_END_ADDR_MAN			VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_MAN)
+#define RDMA_AHB_START_ADDR_1			0x1cf2
+#define P_RDMA_AHB_START_ADDR_1			VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_1)
+#define RDMA_AHB_END_ADDR_1			0x1cf3
+#define P_RDMA_AHB_END_ADDR_1			VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_1)
+#define RDMA_AHB_START_ADDR_2			0x1cf4
+#define P_RDMA_AHB_START_ADDR_2			VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_2)
+#define RDMA_AHB_END_ADDR_2			0x1cf5
+#define P_RDMA_AHB_END_ADDR_2			VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_2)
+#define RDMA_AHB_START_ADDR_3			0x1cf6
+#define P_RDMA_AHB_START_ADDR_3			VCBUS_REG_ADDR(RDMA_AHB_START_ADDR_3)
+#define RDMA_AHB_END_ADDR_3			0x1cf7
+#define P_RDMA_AHB_END_ADDR_3			VCBUS_REG_ADDR(RDMA_AHB_END_ADDR_3)
+#define RDMA_ACCESS_AUTO			0x1cf8
+#define P_RDMA_ACCESS_AUTO			VCBUS_REG_ADDR(RDMA_ACCESS_AUTO)
+#define RDMA_ACCESS_MAN				0x1cf9
+#define P_RDMA_ACCESS_MAN			VCBUS_REG_ADDR(RDMA_ACCESS_MAN)
+#define RDMA_CTRL				0x1cfa
+#define P_RDMA_CTRL				VCBUS_REG_ADDR(RDMA_CTRL)
+#define RDMA_STATUS				0x1cfb
+#define P_RDMA_STATUS				VCBUS_REG_ADDR(RDMA_STATUS)
+#define VPP_DUMMY_DATA				0x1d00
+#define P_VPP_DUMMY_DATA			VCBUS_REG_ADDR(VPP_DUMMY_DATA)
+#define VPP_LINE_IN_LENGTH			0x1d01
+#define P_VPP_LINE_IN_LENGTH			VCBUS_REG_ADDR(VPP_LINE_IN_LENGTH)
+#define VPP_PIC_IN_HEIGHT			0x1d02
+#define P_VPP_PIC_IN_HEIGHT			VCBUS_REG_ADDR(VPP_PIC_IN_HEIGHT)
+#define VPP_SCALE_COEF_IDX			0x1d03
+#define P_VPP_SCALE_COEF_IDX			VCBUS_REG_ADDR(VPP_SCALE_COEF_IDX)
+#define VPP_SCALE_COEF				0x1d04
+#define P_VPP_SCALE_COEF			VCBUS_REG_ADDR(VPP_SCALE_COEF)
+#define VPP_VSC_REGION12_STARTP			0x1d05
+#define P_VPP_VSC_REGION12_STARTP		VCBUS_REG_ADDR(VPP_VSC_REGION12_STARTP)
+#define VPP_VSC_REGION34_STARTP			0x1d06
+#define P_VPP_VSC_REGION34_STARTP		VCBUS_REG_ADDR(VPP_VSC_REGION34_STARTP)
+#define VPP_VSC_REGION4_ENDP			0x1d07
+#define P_VPP_VSC_REGION4_ENDP			VCBUS_REG_ADDR(VPP_VSC_REGION4_ENDP)
+#define VPP_VSC_START_PHASE_STEP		0x1d08
+#define P_VPP_VSC_START_PHASE_STEP		VCBUS_REG_ADDR(VPP_VSC_START_PHASE_STEP)
+#define VPP_VSC_REGION0_PHASE_SLOPE		0x1d09
+#define P_VPP_VSC_REGION0_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_VSC_REGION0_PHASE_SLOPE)
+#define VPP_VSC_REGION1_PHASE_SLOPE		0x1d0a
+#define P_VPP_VSC_REGION1_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_VSC_REGION1_PHASE_SLOPE)
+#define VPP_VSC_REGION3_PHASE_SLOPE		0x1d0b
+#define P_VPP_VSC_REGION3_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_VSC_REGION3_PHASE_SLOPE)
+#define VPP_VSC_REGION4_PHASE_SLOPE		0x1d0c
+#define P_VPP_VSC_REGION4_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_VSC_REGION4_PHASE_SLOPE)
+#define VPP_VSC_PHASE_CTRL			0x1d0d
+#define P_VPP_VSC_PHASE_CTRL			VCBUS_REG_ADDR(VPP_VSC_PHASE_CTRL)
+#define VPP_VSC_INI_PHASE			0x1d0e
+#define P_VPP_VSC_INI_PHASE			VCBUS_REG_ADDR(VPP_VSC_INI_PHASE)
+#define VPP_HSC_REGION12_STARTP			0x1d10
+#define P_VPP_HSC_REGION12_STARTP		VCBUS_REG_ADDR(VPP_HSC_REGION12_STARTP)
+#define VPP_HSC_REGION34_STARTP			0x1d11
+#define P_VPP_HSC_REGION34_STARTP		VCBUS_REG_ADDR(VPP_HSC_REGION34_STARTP)
+#define VPP_HSC_REGION4_ENDP			0x1d12
+#define P_VPP_HSC_REGION4_ENDP			VCBUS_REG_ADDR(VPP_HSC_REGION4_ENDP)
+#define VPP_HSC_START_PHASE_STEP		0x1d13
+#define P_VPP_HSC_START_PHASE_STEP		VCBUS_REG_ADDR(VPP_HSC_START_PHASE_STEP)
+#define VPP_HSC_REGION0_PHASE_SLOPE		0x1d14
+#define P_VPP_HSC_REGION0_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_HSC_REGION0_PHASE_SLOPE)
+#define VPP_HSC_REGION1_PHASE_SLOPE		0x1d15
+#define P_VPP_HSC_REGION1_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_HSC_REGION1_PHASE_SLOPE)
+#define VPP_HSC_REGION3_PHASE_SLOPE		0x1d16
+#define P_VPP_HSC_REGION3_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_HSC_REGION3_PHASE_SLOPE)
+#define VPP_HSC_REGION4_PHASE_SLOPE		0x1d17
+#define P_VPP_HSC_REGION4_PHASE_SLOPE		VCBUS_REG_ADDR(VPP_HSC_REGION4_PHASE_SLOPE)
+#define VPP_HSC_PHASE_CTRL			0x1d18
+#define P_VPP_HSC_PHASE_CTRL			VCBUS_REG_ADDR(VPP_HSC_PHASE_CTRL)
+#define VPP_SC_MISC				0x1d19
+#define P_VPP_SC_MISC				VCBUS_REG_ADDR(VPP_SC_MISC)
+#define VPP_PREBLEND_VD1_H_START_END		0x1d1a
+#define P_VPP_PREBLEND_VD1_H_START_END		VCBUS_REG_ADDR(VPP_PREBLEND_VD1_H_START_END)
+#define VPP_PREBLEND_VD1_V_START_END		0x1d1b
+#define P_VPP_PREBLEND_VD1_V_START_END		VCBUS_REG_ADDR(VPP_PREBLEND_VD1_V_START_END)
+#define VPP_POSTBLEND_VD1_H_START_END		0x1d1c
+#define P_VPP_POSTBLEND_VD1_H_START_END		VCBUS_REG_ADDR(VPP_POSTBLEND_VD1_H_START_END)
+#define VPP_POSTBLEND_VD1_V_START_END		0x1d1d
+#define P_VPP_POSTBLEND_VD1_V_START_END		VCBUS_REG_ADDR(VPP_POSTBLEND_VD1_V_START_END)
+#define VPP_BLEND_VD2_H_START_END		0x1d1e
+#define P_VPP_BLEND_VD2_H_START_END		VCBUS_REG_ADDR(VPP_BLEND_VD2_H_START_END)
+#define VPP_BLEND_VD2_V_START_END		0x1d1f
+#define P_VPP_BLEND_VD2_V_START_END		VCBUS_REG_ADDR(VPP_BLEND_VD2_V_START_END)
+#define VPP_PREBLEND_H_SIZE			0x1d20
+#define P_VPP_PREBLEND_H_SIZE			VCBUS_REG_ADDR(VPP_PREBLEND_H_SIZE)
+#define VPP_POSTBLEND_H_SIZE			0x1d21
+#define P_VPP_POSTBLEND_H_SIZE			VCBUS_REG_ADDR(VPP_POSTBLEND_H_SIZE)
+#define VPP_HOLD_LINES				0x1d22
+#define P_VPP_HOLD_LINES			VCBUS_REG_ADDR(VPP_HOLD_LINES)
+#define VPP_BLEND_ONECOLOR_CTRL			0x1d23
+#define P_VPP_BLEND_ONECOLOR_CTRL		VCBUS_REG_ADDR(VPP_BLEND_ONECOLOR_CTRL)
+#define VPP_PREBLEND_CURRENT_XY			0x1d24
+#define P_VPP_PREBLEND_CURRENT_XY		VCBUS_REG_ADDR(VPP_PREBLEND_CURRENT_XY)
+#define VPP_POSTBLEND_CURRENT_XY		0x1d25
+#define P_VPP_POSTBLEND_CURRENT_XY		VCBUS_REG_ADDR(VPP_POSTBLEND_CURRENT_XY)
+#define VPP_MISC				0x1d26
+#define P_VPP_MISC				VCBUS_REG_ADDR(VPP_MISC)
+#define VPP_OFIFO_SIZE				0x1d27
+#define P_VPP_OFIFO_SIZE			VCBUS_REG_ADDR(VPP_OFIFO_SIZE)
+#define VPP_FIFO_STATUS				0x1d28
+#define P_VPP_FIFO_STATUS			VCBUS_REG_ADDR(VPP_FIFO_STATUS)
+#define VPP_SMOKE_CTRL				0x1d29
+#define P_VPP_SMOKE_CTRL			VCBUS_REG_ADDR(VPP_SMOKE_CTRL)
+#define VPP_SMOKE1_VAL				0x1d2a
+#define P_VPP_SMOKE1_VAL			VCBUS_REG_ADDR(VPP_SMOKE1_VAL)
+#define VPP_SMOKE2_VAL				0x1d2b
+#define P_VPP_SMOKE2_VAL			VCBUS_REG_ADDR(VPP_SMOKE2_VAL)
+#define VPP_SMOKE3_VAL				0x1d2c
+#define P_VPP_SMOKE3_VAL			VCBUS_REG_ADDR(VPP_SMOKE3_VAL)
+#define VPP_SMOKE1_H_START_END			0x1d2d
+#define P_VPP_SMOKE1_H_START_END		VCBUS_REG_ADDR(VPP_SMOKE1_H_START_END)
+#define VPP_SMOKE1_V_START_END			0x1d2e
+#define P_VPP_SMOKE1_V_START_END		VCBUS_REG_ADDR(VPP_SMOKE1_V_START_END)
+#define VPP_SMOKE2_H_START_END			0x1d2f
+#define P_VPP_SMOKE2_H_START_END		VCBUS_REG_ADDR(VPP_SMOKE2_H_START_END)
+#define VPP_SMOKE2_V_START_END			0x1d30
+#define P_VPP_SMOKE2_V_START_END		VCBUS_REG_ADDR(VPP_SMOKE2_V_START_END)
+#define VPP_SMOKE3_H_START_END			0x1d31
+#define P_VPP_SMOKE3_H_START_END		VCBUS_REG_ADDR(VPP_SMOKE3_H_START_END)
+#define VPP_SMOKE3_V_START_END			0x1d32
+#define P_VPP_SMOKE3_V_START_END		VCBUS_REG_ADDR(VPP_SMOKE3_V_START_END)
+#define VPP_SCO_FIFO_CTRL			0x1d33
+#define P_VPP_SCO_FIFO_CTRL			VCBUS_REG_ADDR(VPP_SCO_FIFO_CTRL)
+#define VPP_HSC_PHASE_CTRL1			0x1d34
+#define P_VPP_HSC_PHASE_CTRL1			VCBUS_REG_ADDR(VPP_HSC_PHASE_CTRL1)
+#define VPP_HSC_INI_PAT_CTRL			0x1d35
+#define P_VPP_HSC_INI_PAT_CTRL			VCBUS_REG_ADDR(VPP_HSC_INI_PAT_CTRL)
+#define VPP_VADJ_CTRL				0x1d40
+#define P_VPP_VADJ_CTRL				VCBUS_REG_ADDR(VPP_VADJ_CTRL)
+#define VPP_VADJ1_Y				0x1d41
+#define P_VPP_VADJ1_Y				VCBUS_REG_ADDR(VPP_VADJ1_Y)
+#define VPP_VADJ1_MA_MB				0x1d42
+#define P_VPP_VADJ1_MA_MB			VCBUS_REG_ADDR(VPP_VADJ1_MA_MB)
+#define VPP_VADJ1_MC_MD				0x1d43
+#define P_VPP_VADJ1_MC_MD			VCBUS_REG_ADDR(VPP_VADJ1_MC_MD)
+#define VPP_VADJ2_Y				0x1d44
+#define P_VPP_VADJ2_Y				VCBUS_REG_ADDR(VPP_VADJ2_Y)
+#define VPP_VADJ2_MA_MB				0x1d45
+#define P_VPP_VADJ2_MA_MB			VCBUS_REG_ADDR(VPP_VADJ2_MA_MB)
+#define VPP_VADJ2_MC_MD				0x1d46
+#define P_VPP_VADJ2_MC_MD			VCBUS_REG_ADDR(VPP_VADJ2_MC_MD)
+#define VPP_HSHARP_CTRL				0x1d50
+#define P_VPP_HSHARP_CTRL			VCBUS_REG_ADDR(VPP_HSHARP_CTRL)
+#define VPP_HSHARP_LUMA_THRESH01		0x1d51
+#define P_VPP_HSHARP_LUMA_THRESH01		VCBUS_REG_ADDR(VPP_HSHARP_LUMA_THRESH01)
+#define VPP_HSHARP_LUMA_THRESH23		0x1d52
+#define P_VPP_HSHARP_LUMA_THRESH23		VCBUS_REG_ADDR(VPP_HSHARP_LUMA_THRESH23)
+#define VPP_HSHARP_CHROMA_THRESH01		0x1d53
+#define P_VPP_HSHARP_CHROMA_THRESH01		VCBUS_REG_ADDR(VPP_HSHARP_CHROMA_THRESH01)
+#define VPP_HSHARP_CHROMA_THRESH23		0x1d54
+#define P_VPP_HSHARP_CHROMA_THRESH23		VCBUS_REG_ADDR(VPP_HSHARP_CHROMA_THRESH23)
+#define VPP_HSHARP_LUMA_GAIN			0x1d55
+#define P_VPP_HSHARP_LUMA_GAIN			VCBUS_REG_ADDR(VPP_HSHARP_LUMA_GAIN)
+#define VPP_HSHARP_CHROMA_GAIN			0x1d56
+#define P_VPP_HSHARP_CHROMA_GAIN		VCBUS_REG_ADDR(VPP_HSHARP_CHROMA_GAIN)
+#define VPP_MATRIX_PROBE_COLOR			0x1d5c
+#define P_VPP_MATRIX_PROBE_COLOR		VCBUS_REG_ADDR(VPP_MATRIX_PROBE_COLOR)
+#define VPP_MATRIX_PROBE_COLOR1			0x1dd7
+#define P_VPP_MATRIX_PROBE_COLOR1		VCBUS_REG_ADDR(VPP_MATRIX_PROBE_COLOR1)
+#define VPP_MATRIX_HL_COLOR			0x1d5d
+#define P_VPP_MATRIX_HL_COLOR			VCBUS_REG_ADDR(VPP_MATRIX_HL_COLOR)
+#define VPP_MATRIX_PROBE_POS			0x1d5e
+#define P_VPP_MATRIX_PROBE_POS			VCBUS_REG_ADDR(VPP_MATRIX_PROBE_POS)
+#define VPP_MATRIX_CTRL				0x1d5f
+#define P_VPP_MATRIX_CTRL			VCBUS_REG_ADDR(VPP_MATRIX_CTRL)
+#define VPP_MATRIX_COEF00_01			0x1d60
+#define P_VPP_MATRIX_COEF00_01			VCBUS_REG_ADDR(VPP_MATRIX_COEF00_01)
+#define VPP_MATRIX_COEF02_10			0x1d61
+#define P_VPP_MATRIX_COEF02_10			VCBUS_REG_ADDR(VPP_MATRIX_COEF02_10)
+#define VPP_MATRIX_COEF11_12			0x1d62
+#define P_VPP_MATRIX_COEF11_12			VCBUS_REG_ADDR(VPP_MATRIX_COEF11_12)
+#define VPP_MATRIX_COEF20_21			0x1d63
+#define P_VPP_MATRIX_COEF20_21			VCBUS_REG_ADDR(VPP_MATRIX_COEF20_21)
+#define VPP_MATRIX_COEF22			0x1d64
+#define P_VPP_MATRIX_COEF22			VCBUS_REG_ADDR(VPP_MATRIX_COEF22)
+#define VPP_MATRIX_OFFSET0_1			0x1d65
+#define P_VPP_MATRIX_OFFSET0_1			VCBUS_REG_ADDR(VPP_MATRIX_OFFSET0_1)
+#define VPP_MATRIX_OFFSET2			0x1d66
+#define P_VPP_MATRIX_OFFSET2			VCBUS_REG_ADDR(VPP_MATRIX_OFFSET2)
+#define VPP_MATRIX_PRE_OFFSET0_1		0x1d67
+#define P_VPP_MATRIX_PRE_OFFSET0_1		VCBUS_REG_ADDR(VPP_MATRIX_PRE_OFFSET0_1)
+#define VPP_MATRIX_PRE_OFFSET2			0x1d68
+#define P_VPP_MATRIX_PRE_OFFSET2		VCBUS_REG_ADDR(VPP_MATRIX_PRE_OFFSET2)
+#define VPP_DUMMY_DATA1				0x1d69
+#define P_VPP_DUMMY_DATA1			VCBUS_REG_ADDR(VPP_DUMMY_DATA1)
+#define VPP_GAINOFF_CTRL0			0x1d6a
+#define P_VPP_GAINOFF_CTRL0			VCBUS_REG_ADDR(VPP_GAINOFF_CTRL0)
+#define VPP_GAINOFF_CTRL1			0x1d6b
+#define P_VPP_GAINOFF_CTRL1			VCBUS_REG_ADDR(VPP_GAINOFF_CTRL1)
+#define VPP_GAINOFF_CTRL2			0x1d6c
+#define P_VPP_GAINOFF_CTRL2			VCBUS_REG_ADDR(VPP_GAINOFF_CTRL2)
+#define VPP_GAINOFF_CTRL3			0x1d6d
+#define P_VPP_GAINOFF_CTRL3			VCBUS_REG_ADDR(VPP_GAINOFF_CTRL3)
+#define VPP_GAINOFF_CTRL4			0x1d6e
+#define P_VPP_GAINOFF_CTRL4			VCBUS_REG_ADDR(VPP_GAINOFF_CTRL4)
+#define VPP_CHROMA_ADDR_PORT			0x1d70
+#define P_VPP_CHROMA_ADDR_PORT			VCBUS_REG_ADDR(VPP_CHROMA_ADDR_PORT)
+#define VPP_CHROMA_DATA_PORT			0x1d71
+#define P_VPP_CHROMA_DATA_PORT			VCBUS_REG_ADDR(VPP_CHROMA_DATA_PORT)
+#define VPP_GCLK_CTRL0				0x1d72
+#define P_VPP_GCLK_CTRL0			VCBUS_REG_ADDR(VPP_GCLK_CTRL0)
+#define VPP_GCLK_CTRL1				0x1d73
+#define P_VPP_GCLK_CTRL1			VCBUS_REG_ADDR(VPP_GCLK_CTRL1)
+#define VPP_SC_GCLK_CTRL			0x1d74
+#define P_VPP_SC_GCLK_CTRL			VCBUS_REG_ADDR(VPP_SC_GCLK_CTRL)
+#define VPP_MISC1				0x1d76
+#define P_VPP_MISC1				VCBUS_REG_ADDR(VPP_MISC1)
+#define VPP_SRSCL_GCLK_CTRL			0x1d77
+#define P_VPP_SRSCL_GCLK_CTRL			VCBUS_REG_ADDR(VPP_SRSCL_GCLK_CTRL)
+#define VPP_OSDSR_GCLK_CTRL			0x1d78
+#define P_VPP_OSDSR_GCLK_CTRL			VCBUS_REG_ADDR(VPP_OSDSR_GCLK_CTRL)
+#define VPP_XVYCC_GCLK_CTRL			0x1d79
+#define P_VPP_XVYCC_GCLK_CTRL			VCBUS_REG_ADDR(VPP_XVYCC_GCLK_CTRL)
+#define VPP_BLACKEXT_CTRL			0x1d80
+#define P_VPP_BLACKEXT_CTRL			VCBUS_REG_ADDR(VPP_BLACKEXT_CTRL)
+#define VPP_DNLP_CTRL_00			0x1d81
+#define P_VPP_DNLP_CTRL_00			VCBUS_REG_ADDR(VPP_DNLP_CTRL_00)
+#define VPP_DNLP_CTRL_01			0x1d82
+#define P_VPP_DNLP_CTRL_01			VCBUS_REG_ADDR(VPP_DNLP_CTRL_01)
+#define VPP_DNLP_CTRL_02			0x1d83
+#define P_VPP_DNLP_CTRL_02			VCBUS_REG_ADDR(VPP_DNLP_CTRL_02)
+#define VPP_DNLP_CTRL_03			0x1d84
+#define P_VPP_DNLP_CTRL_03			VCBUS_REG_ADDR(VPP_DNLP_CTRL_03)
+#define VPP_DNLP_CTRL_04			0x1d85
+#define P_VPP_DNLP_CTRL_04			VCBUS_REG_ADDR(VPP_DNLP_CTRL_04)
+#define VPP_DNLP_CTRL_05			0x1d86
+#define P_VPP_DNLP_CTRL_05			VCBUS_REG_ADDR(VPP_DNLP_CTRL_05)
+#define VPP_DNLP_CTRL_06			0x1d87
+#define P_VPP_DNLP_CTRL_06			VCBUS_REG_ADDR(VPP_DNLP_CTRL_06)
+#define VPP_DNLP_CTRL_07			0x1d88
+#define P_VPP_DNLP_CTRL_07			VCBUS_REG_ADDR(VPP_DNLP_CTRL_07)
+#define VPP_DNLP_CTRL_08			0x1d89
+#define P_VPP_DNLP_CTRL_08			VCBUS_REG_ADDR(VPP_DNLP_CTRL_08)
+#define VPP_DNLP_CTRL_09			0x1d8a
+#define P_VPP_DNLP_CTRL_09			VCBUS_REG_ADDR(VPP_DNLP_CTRL_09)
+#define VPP_DNLP_CTRL_10			0x1d8b
+#define P_VPP_DNLP_CTRL_10			VCBUS_REG_ADDR(VPP_DNLP_CTRL_10)
+#define VPP_DNLP_CTRL_11			0x1d8c
+#define P_VPP_DNLP_CTRL_11			VCBUS_REG_ADDR(VPP_DNLP_CTRL_11)
+#define VPP_DNLP_CTRL_12			0x1d8d
+#define P_VPP_DNLP_CTRL_12			VCBUS_REG_ADDR(VPP_DNLP_CTRL_12)
+#define VPP_DNLP_CTRL_13			0x1d8e
+#define P_VPP_DNLP_CTRL_13			VCBUS_REG_ADDR(VPP_DNLP_CTRL_13)
+#define VPP_DNLP_CTRL_14			0x1d8f
+#define P_VPP_DNLP_CTRL_14			VCBUS_REG_ADDR(VPP_DNLP_CTRL_14)
+#define VPP_DNLP_CTRL_15			0x1d90
+#define P_VPP_DNLP_CTRL_15			VCBUS_REG_ADDR(VPP_DNLP_CTRL_15)
+#define VPP_PEAKING_HGAIN			0x1d91
+#define P_VPP_PEAKING_HGAIN			VCBUS_REG_ADDR(VPP_PEAKING_HGAIN)
+#define VPP_PEAKING_VGAIN			0x1d92
+#define P_VPP_PEAKING_VGAIN			VCBUS_REG_ADDR(VPP_PEAKING_VGAIN)
+#define VPP_PEAKING_NLP_1			0x1d93
+#define P_VPP_PEAKING_NLP_1			VCBUS_REG_ADDR(VPP_PEAKING_NLP_1)
+#define VPP_PEAKING_NLP_2			0x1d94
+#define P_VPP_PEAKING_NLP_2			VCBUS_REG_ADDR(VPP_PEAKING_NLP_2)
+#define VPP_PEAKING_NLP_3			0x1d95
+#define P_VPP_PEAKING_NLP_3			VCBUS_REG_ADDR(VPP_PEAKING_NLP_3)
+#define VPP_PEAKING_NLP_4			0x1d96
+#define P_VPP_PEAKING_NLP_4			VCBUS_REG_ADDR(VPP_PEAKING_NLP_4)
+#define VPP_PEAKING_NLP_5			0x1d97
+#define P_VPP_PEAKING_NLP_5			VCBUS_REG_ADDR(VPP_PEAKING_NLP_5)
+#define VPP_SHARP_LIMIT				0x1d98
+#define P_VPP_SHARP_LIMIT			VCBUS_REG_ADDR(VPP_SHARP_LIMIT)
+#define VPP_VLTI_CTRL				0x1d99
+#define P_VPP_VLTI_CTRL				VCBUS_REG_ADDR(VPP_VLTI_CTRL)
+#define VPP_HLTI_CTRL				0x1d9a
+#define P_VPP_HLTI_CTRL				VCBUS_REG_ADDR(VPP_HLTI_CTRL)
+#define VPP_CTI_CTRL				0x1d9b
+#define P_VPP_CTI_CTRL				VCBUS_REG_ADDR(VPP_CTI_CTRL)
+#define VPP_BLUE_STRETCH_1			0x1d9c
+#define P_VPP_BLUE_STRETCH_1			VCBUS_REG_ADDR(VPP_BLUE_STRETCH_1)
+#define VPP_BLUE_STRETCH_2			0x1d9d
+#define P_VPP_BLUE_STRETCH_2			VCBUS_REG_ADDR(VPP_BLUE_STRETCH_2)
+#define VPP_BLUE_STRETCH_3			0x1d9e
+#define P_VPP_BLUE_STRETCH_3			VCBUS_REG_ADDR(VPP_BLUE_STRETCH_3)
+#define VPP_CCORING_CTRL			0x1da0
+#define P_VPP_CCORING_CTRL			VCBUS_REG_ADDR(VPP_CCORING_CTRL)
+#define VPP_VE_ENABLE_CTRL			0x1da1
+#define P_VPP_VE_ENABLE_CTRL			VCBUS_REG_ADDR(VPP_VE_ENABLE_CTRL)
+#define VPP_VE_DEMO_LEFT_TOP_SCREEN_WIDTH	0x1da2
+#define P_VPP_VE_DEMO_LEFT_TOP_SCREEN_WIDTH	VCBUS_REG_ADDR(VPP_VE_DEMO_LEFT_TOP_SCREEN_WIDTH)
+#define VPP_VE_DEMO_CENTER_BAR			0x1da3
+#define P_VPP_VE_DEMO_CENTER_BAR		VCBUS_REG_ADDR(VPP_VE_DEMO_CENTER_BAR)
+#define VPP_VE_H_V_SIZE				0x1da4
+#define P_VPP_VE_H_V_SIZE			VCBUS_REG_ADDR(VPP_VE_H_V_SIZE)
+#define VPP_PSR_H_V_SIZE			0x1da5
+#define P_VPP_PSR_H_V_SIZE			VCBUS_REG_ADDR(VPP_PSR_H_V_SIZE)
+#define VPP_IN_H_V_SIZE				0x1da6
+#define P_VPP_IN_H_V_SIZE			VCBUS_REG_ADDR(VPP_IN_H_V_SIZE)
+#define VPP_VDO_MEAS_CTRL			0x1da8
+#define P_VPP_VDO_MEAS_CTRL			VCBUS_REG_ADDR(VPP_VDO_MEAS_CTRL)
+#define VPP_VDO_MEAS_VS_COUNT_HI		0x1da9
+#define P_VPP_VDO_MEAS_VS_COUNT_HI		VCBUS_REG_ADDR(VPP_VDO_MEAS_VS_COUNT_HI)
+#define VPP_VDO_MEAS_VS_COUNT_LO		0x1daa
+#define P_VPP_VDO_MEAS_VS_COUNT_LO		VCBUS_REG_ADDR(VPP_VDO_MEAS_VS_COUNT_LO)
+#define VPP_INPUT_CTRL				0x1dab
+#define P_VPP_INPUT_CTRL			VCBUS_REG_ADDR(VPP_INPUT_CTRL)
+#define VPP_CTI_CTRL2				0x1dac
+#define P_VPP_CTI_CTRL2				VCBUS_REG_ADDR(VPP_CTI_CTRL2)
+#define VPP_PEAKING_SAT_THD1			0x1dad
+#define P_VPP_PEAKING_SAT_THD1			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD1)
+#define VPP_PEAKING_SAT_THD2			0x1dae
+#define P_VPP_PEAKING_SAT_THD2			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD2)
+#define VPP_PEAKING_SAT_THD3			0x1daf
+#define P_VPP_PEAKING_SAT_THD3			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD3)
+#define VPP_PEAKING_SAT_THD4			0x1db0
+#define P_VPP_PEAKING_SAT_THD4			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD4)
+#define VPP_PEAKING_SAT_THD5			0x1db1
+#define P_VPP_PEAKING_SAT_THD5			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD5)
+#define VPP_PEAKING_SAT_THD6			0x1db2
+#define P_VPP_PEAKING_SAT_THD6			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD6)
+#define VPP_PEAKING_SAT_THD7			0x1db3
+#define P_VPP_PEAKING_SAT_THD7			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD7)
+#define VPP_PEAKING_SAT_THD8			0x1db4
+#define P_VPP_PEAKING_SAT_THD8			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD8)
+#define VPP_PEAKING_SAT_THD9			0x1db5
+#define P_VPP_PEAKING_SAT_THD9			VCBUS_REG_ADDR(VPP_PEAKING_SAT_THD9)
+#define VPP_PEAKING_GAIN_ADD1			0x1db6
+#define P_VPP_PEAKING_GAIN_ADD1			VCBUS_REG_ADDR(VPP_PEAKING_GAIN_ADD1)
+#define VPP_PEAKING_GAIN_ADD2			0x1db7
+#define P_VPP_PEAKING_GAIN_ADD2			VCBUS_REG_ADDR(VPP_PEAKING_GAIN_ADD2)
+#define VPP_PEAKING_DNLP			0x1db8
+#define P_VPP_PEAKING_DNLP			VCBUS_REG_ADDR(VPP_PEAKING_DNLP)
+#define VPP_SHARP_DEMO_WIN_CTRL1		0x1db9
+#define P_VPP_SHARP_DEMO_WIN_CTRL1		VCBUS_REG_ADDR(VPP_SHARP_DEMO_WIN_CTRL1)
+#define VPP_SHARP_DEMO_WIN_CTRL2		0x1dba
+#define P_VPP_SHARP_DEMO_WIN_CTRL2		VCBUS_REG_ADDR(VPP_SHARP_DEMO_WIN_CTRL2)
+#define VPP_FRONT_HLTI_CTRL			0x1dbb
+#define P_VPP_FRONT_HLTI_CTRL			VCBUS_REG_ADDR(VPP_FRONT_HLTI_CTRL)
+#define VPP_FRONT_CTI_CTRL			0x1dbc
+#define P_VPP_FRONT_CTI_CTRL			VCBUS_REG_ADDR(VPP_FRONT_CTI_CTRL)
+#define VPP_FRONT_CTI_CTRL2			0x1dbd
+#define P_VPP_FRONT_CTI_CTRL2			VCBUS_REG_ADDR(VPP_FRONT_CTI_CTRL2)
+#define VPP_OSD_VSC_PHASE_STEP			0x1dc0
+#define P_VPP_OSD_VSC_PHASE_STEP		VCBUS_REG_ADDR(VPP_OSD_VSC_PHASE_STEP)
+#define VPP_OSD_VSC_INI_PHASE			0x1dc1
+#define P_VPP_OSD_VSC_INI_PHASE			VCBUS_REG_ADDR(VPP_OSD_VSC_INI_PHASE)
+#define VPP_OSD_VSC_CTRL0			0x1dc2
+#define P_VPP_OSD_VSC_CTRL0			VCBUS_REG_ADDR(VPP_OSD_VSC_CTRL0)
+#define VPP_OSD_HSC_PHASE_STEP			0x1dc3
+#define P_VPP_OSD_HSC_PHASE_STEP		VCBUS_REG_ADDR(VPP_OSD_HSC_PHASE_STEP)
+#define VPP_OSD_HSC_INI_PHASE			0x1dc4
+#define P_VPP_OSD_HSC_INI_PHASE			VCBUS_REG_ADDR(VPP_OSD_HSC_INI_PHASE)
+#define VPP_OSD_HSC_CTRL0			0x1dc5
+#define P_VPP_OSD_HSC_CTRL0			VCBUS_REG_ADDR(VPP_OSD_HSC_CTRL0)
+#define VPP_OSD_HSC_INI_PAT_CTRL		0x1dc6
+#define P_VPP_OSD_HSC_INI_PAT_CTRL		VCBUS_REG_ADDR(VPP_OSD_HSC_INI_PAT_CTRL)
+#define VPP_OSD_SC_DUMMY_DATA			0x1dc7
+#define P_VPP_OSD_SC_DUMMY_DATA			VCBUS_REG_ADDR(VPP_OSD_SC_DUMMY_DATA)
+#define VPP_OSD_SC_CTRL0			0x1dc8
+#define P_VPP_OSD_SC_CTRL0			VCBUS_REG_ADDR(VPP_OSD_SC_CTRL0)
+#define VPP_OSD_SCI_WH_M1			0x1dc9
+#define P_VPP_OSD_SCI_WH_M1			VCBUS_REG_ADDR(VPP_OSD_SCI_WH_M1)
+#define VPP_OSD_SCO_H_START_END			0x1dca
+#define P_VPP_OSD_SCO_H_START_END		VCBUS_REG_ADDR(VPP_OSD_SCO_H_START_END)
+#define VPP_OSD_SCO_V_START_END			0x1dcb
+#define P_VPP_OSD_SCO_V_START_END		VCBUS_REG_ADDR(VPP_OSD_SCO_V_START_END)
+#define VPP_OSD_SCALE_COEF_IDX			0x1dcc
+#define P_VPP_OSD_SCALE_COEF_IDX		VCBUS_REG_ADDR(VPP_OSD_SCALE_COEF_IDX)
+#define VPP_OSD_SCALE_COEF			0x1dcd
+#define P_VPP_OSD_SCALE_COEF			VCBUS_REG_ADDR(VPP_OSD_SCALE_COEF)
+#define VPP_INT_LINE_NUM			0x1dce
+#define P_VPP_INT_LINE_NUM			VCBUS_REG_ADDR(VPP_INT_LINE_NUM)
+#define VPP_XVYCC_MISC				0x1dcf
+#define P_VPP_XVYCC_MISC			VCBUS_REG_ADDR(VPP_XVYCC_MISC)
+#define VPP_HLTI_DN_FLT				0x1dd0
+#define P_VPP_HLTI_DN_FLT			VCBUS_REG_ADDR(VPP_HLTI_DN_FLT)
+#define VPP_HLTI_GAIN				0x1dd1
+#define P_VPP_HLTI_GAIN				VCBUS_REG_ADDR(VPP_HLTI_GAIN)
+#define VPP_HLTI_PARA				0x1dd2
+#define P_VPP_HLTI_PARA				VCBUS_REG_ADDR(VPP_HLTI_PARA)
+#define VPP_HCTI_DN_FLT				0x1dd3
+#define P_VPP_HCTI_DN_FLT			VCBUS_REG_ADDR(VPP_HCTI_DN_FLT)
+#define VPP_HCTI_GAIN				0x1dd4
+#define P_VPP_HCTI_GAIN				VCBUS_REG_ADDR(VPP_HCTI_GAIN)
+#define VPP_HCTI_PARA				0x1dd5
+#define P_VPP_HCTI_PARA				VCBUS_REG_ADDR(VPP_HCTI_PARA)
+#define VPP_VCTI_PARA				0x1dd6
+#define P_VPP_VCTI_PARA				VCBUS_REG_ADDR(VPP_VCTI_PARA)
+#define VPP_OFIFO_URG_CTRL			0x1dd8
+#define P_VPP_OFIFO_URG_CTRL			VCBUS_REG_ADDR(VPP_OFIFO_URG_CTRL)
+#define VIU2_ADDR_START				0x1e00
+#define P_VIU2_ADDR_START			VCBUS_REG_ADDR(VIU2_ADDR_START)
+#define VIU2_ADDR_END				0x1eff
+#define P_VIU2_ADDR_END				VCBUS_REG_ADDR(VIU2_ADDR_END)
+#define VIU2_SW_RESET				0x1e01
+#define P_VIU2_SW_RESET				VCBUS_REG_ADDR(VIU2_SW_RESET)
+#define VIU2_OSD1_CTRL_STAT			0x1e10
+#define P_VIU2_OSD1_CTRL_STAT			VCBUS_REG_ADDR(VIU2_OSD1_CTRL_STAT)
+#define VIU2_OSD1_CTRL_STAT2			0x1e2d
+#define P_VIU2_OSD1_CTRL_STAT2			VCBUS_REG_ADDR(VIU2_OSD1_CTRL_STAT2)
+#define VIU2_OSD1_COLOR_ADDR			0x1e11
+#define P_VIU2_OSD1_COLOR_ADDR			VCBUS_REG_ADDR(VIU2_OSD1_COLOR_ADDR)
+#define VIU2_OSD1_COLOR				0x1e12
+#define P_VIU2_OSD1_COLOR			VCBUS_REG_ADDR(VIU2_OSD1_COLOR)
+#define VIU2_OSD1_TCOLOR_AG0			0x1e17
+#define P_VIU2_OSD1_TCOLOR_AG0			VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG0)
+#define VIU2_OSD1_TCOLOR_AG1			0x1e18
+#define P_VIU2_OSD1_TCOLOR_AG1			VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG1)
+#define VIU2_OSD1_TCOLOR_AG2			0x1e19
+#define P_VIU2_OSD1_TCOLOR_AG2			VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG2)
+#define VIU2_OSD1_TCOLOR_AG3			0x1e1a
+#define P_VIU2_OSD1_TCOLOR_AG3			VCBUS_REG_ADDR(VIU2_OSD1_TCOLOR_AG3)
+#define VIU2_OSD1_BLK0_CFG_W0			0x1e1b
+#define P_VIU2_OSD1_BLK0_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W0)
+#define VIU2_OSD1_BLK1_CFG_W0			0x1e1f
+#define P_VIU2_OSD1_BLK1_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W0)
+#define VIU2_OSD1_BLK2_CFG_W0			0x1e23
+#define P_VIU2_OSD1_BLK2_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W0)
+#define VIU2_OSD1_BLK3_CFG_W0			0x1e27
+#define P_VIU2_OSD1_BLK3_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W0)
+#define VIU2_OSD1_BLK0_CFG_W1			0x1e1c
+#define P_VIU2_OSD1_BLK0_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W1)
+#define VIU2_OSD1_BLK1_CFG_W1			0x1e20
+#define P_VIU2_OSD1_BLK1_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W1)
+#define VIU2_OSD1_BLK2_CFG_W1			0x1e24
+#define P_VIU2_OSD1_BLK2_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W1)
+#define VIU2_OSD1_BLK3_CFG_W1			0x1e28
+#define P_VIU2_OSD1_BLK3_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W1)
+#define VIU2_OSD1_BLK0_CFG_W2			0x1e1d
+#define P_VIU2_OSD1_BLK0_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W2)
+#define VIU2_OSD1_BLK1_CFG_W2			0x1e21
+#define P_VIU2_OSD1_BLK1_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W2)
+#define VIU2_OSD1_BLK2_CFG_W2			0x1e25
+#define P_VIU2_OSD1_BLK2_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W2)
+#define VIU2_OSD1_BLK3_CFG_W2			0x1e29
+#define P_VIU2_OSD1_BLK3_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W2)
+#define VIU2_OSD1_BLK0_CFG_W3			0x1e1e
+#define P_VIU2_OSD1_BLK0_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W3)
+#define VIU2_OSD1_BLK1_CFG_W3			0x1e22
+#define P_VIU2_OSD1_BLK1_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W3)
+#define VIU2_OSD1_BLK2_CFG_W3			0x1e26
+#define P_VIU2_OSD1_BLK2_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W3)
+#define VIU2_OSD1_BLK3_CFG_W3			0x1e2a
+#define P_VIU2_OSD1_BLK3_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W3)
+#define VIU2_OSD1_BLK0_CFG_W4			0x1e13
+#define P_VIU2_OSD1_BLK0_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD1_BLK0_CFG_W4)
+#define VIU2_OSD1_BLK1_CFG_W4			0x1e14
+#define P_VIU2_OSD1_BLK1_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD1_BLK1_CFG_W4)
+#define VIU2_OSD1_BLK2_CFG_W4			0x1e15
+#define P_VIU2_OSD1_BLK2_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD1_BLK2_CFG_W4)
+#define VIU2_OSD1_BLK3_CFG_W4			0x1e16
+#define P_VIU2_OSD1_BLK3_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD1_BLK3_CFG_W4)
+#define VIU2_OSD1_FIFO_CTRL_STAT		0x1e2b
+#define P_VIU2_OSD1_FIFO_CTRL_STAT		VCBUS_REG_ADDR(VIU2_OSD1_FIFO_CTRL_STAT)
+#define VIU2_OSD1_TEST_RDDATA			0x1e2c
+#define P_VIU2_OSD1_TEST_RDDATA			VCBUS_REG_ADDR(VIU2_OSD1_TEST_RDDATA)
+#define VIU2_OSD1_PROT_CTRL			0x1e2e
+#define P_VIU2_OSD1_PROT_CTRL			VCBUS_REG_ADDR(VIU2_OSD1_PROT_CTRL)
+#define VIU2_OSD2_CTRL_STAT			0x1e30
+#define P_VIU2_OSD2_CTRL_STAT			VCBUS_REG_ADDR(VIU2_OSD2_CTRL_STAT)
+#define VIU2_OSD2_CTRL_STAT2			0x1e4d
+#define P_VIU2_OSD2_CTRL_STAT2			VCBUS_REG_ADDR(VIU2_OSD2_CTRL_STAT2)
+#define VIU2_OSD2_COLOR_ADDR			0x1e31
+#define P_VIU2_OSD2_COLOR_ADDR			VCBUS_REG_ADDR(VIU2_OSD2_COLOR_ADDR)
+#define VIU2_OSD2_COLOR				0x1e32
+#define P_VIU2_OSD2_COLOR			VCBUS_REG_ADDR(VIU2_OSD2_COLOR)
+#define VIU2_OSD2_HL1_H_START_END		0x1e33
+#define P_VIU2_OSD2_HL1_H_START_END		VCBUS_REG_ADDR(VIU2_OSD2_HL1_H_START_END)
+#define VIU2_OSD2_HL1_V_START_END		0x1e34
+#define P_VIU2_OSD2_HL1_V_START_END		VCBUS_REG_ADDR(VIU2_OSD2_HL1_V_START_END)
+#define VIU2_OSD2_HL2_H_START_END		0x1e35
+#define P_VIU2_OSD2_HL2_H_START_END		VCBUS_REG_ADDR(VIU2_OSD2_HL2_H_START_END)
+#define VIU2_OSD2_HL2_V_START_END		0x1e36
+#define P_VIU2_OSD2_HL2_V_START_END		VCBUS_REG_ADDR(VIU2_OSD2_HL2_V_START_END)
+#define VIU2_OSD2_TCOLOR_AG0			0x1e37
+#define P_VIU2_OSD2_TCOLOR_AG0			VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG0)
+#define VIU2_OSD2_TCOLOR_AG1			0x1e38
+#define P_VIU2_OSD2_TCOLOR_AG1			VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG1)
+#define VIU2_OSD2_TCOLOR_AG2			0x1e39
+#define P_VIU2_OSD2_TCOLOR_AG2			VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG2)
+#define VIU2_OSD2_TCOLOR_AG3			0x1e3a
+#define P_VIU2_OSD2_TCOLOR_AG3			VCBUS_REG_ADDR(VIU2_OSD2_TCOLOR_AG3)
+#define VIU2_OSD2_BLK0_CFG_W0			0x1e3b
+#define P_VIU2_OSD2_BLK0_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W0)
+#define VIU2_OSD2_BLK1_CFG_W0			0x1e3f
+#define P_VIU2_OSD2_BLK1_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W0)
+#define VIU2_OSD2_BLK2_CFG_W0			0x1e43
+#define P_VIU2_OSD2_BLK2_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W0)
+#define VIU2_OSD2_BLK3_CFG_W0			0x1e47
+#define P_VIU2_OSD2_BLK3_CFG_W0			VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W0)
+#define VIU2_OSD2_BLK0_CFG_W1			0x1e3c
+#define P_VIU2_OSD2_BLK0_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W1)
+#define VIU2_OSD2_BLK1_CFG_W1			0x1e40
+#define P_VIU2_OSD2_BLK1_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W1)
+#define VIU2_OSD2_BLK2_CFG_W1			0x1e44
+#define P_VIU2_OSD2_BLK2_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W1)
+#define VIU2_OSD2_BLK3_CFG_W1			0x1e48
+#define P_VIU2_OSD2_BLK3_CFG_W1			VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W1)
+#define VIU2_OSD2_BLK0_CFG_W2			0x1e3d
+#define P_VIU2_OSD2_BLK0_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W2)
+#define VIU2_OSD2_BLK1_CFG_W2			0x1e41
+#define P_VIU2_OSD2_BLK1_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W2)
+#define VIU2_OSD2_BLK2_CFG_W2			0x1e45
+#define P_VIU2_OSD2_BLK2_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W2)
+#define VIU2_OSD2_BLK3_CFG_W2			0x1e49
+#define P_VIU2_OSD2_BLK3_CFG_W2			VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W2)
+#define VIU2_OSD2_BLK0_CFG_W3			0x1e3e
+#define P_VIU2_OSD2_BLK0_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W3)
+#define VIU2_OSD2_BLK1_CFG_W3			0x1e42
+#define P_VIU2_OSD2_BLK1_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W3)
+#define VIU2_OSD2_BLK2_CFG_W3			0x1e46
+#define P_VIU2_OSD2_BLK2_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W3)
+#define VIU2_OSD2_BLK3_CFG_W3			0x1e4a
+#define P_VIU2_OSD2_BLK3_CFG_W3			VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W3)
+#define VIU2_OSD2_BLK0_CFG_W4			0x1e64
+#define P_VIU2_OSD2_BLK0_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD2_BLK0_CFG_W4)
+#define VIU2_OSD2_BLK1_CFG_W4			0x1e65
+#define P_VIU2_OSD2_BLK1_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD2_BLK1_CFG_W4)
+#define VIU2_OSD2_BLK2_CFG_W4			0x1e66
+#define P_VIU2_OSD2_BLK2_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD2_BLK2_CFG_W4)
+#define VIU2_OSD2_BLK3_CFG_W4			0x1e67
+#define P_VIU2_OSD2_BLK3_CFG_W4			VCBUS_REG_ADDR(VIU2_OSD2_BLK3_CFG_W4)
+#define VIU2_OSD2_FIFO_CTRL_STAT		0x1e4b
+#define P_VIU2_OSD2_FIFO_CTRL_STAT		VCBUS_REG_ADDR(VIU2_OSD2_FIFO_CTRL_STAT)
+#define VIU2_OSD2_TEST_RDDATA			0x1e4c
+#define P_VIU2_OSD2_TEST_RDDATA			VCBUS_REG_ADDR(VIU2_OSD2_TEST_RDDATA)
+#define VIU2_OSD2_PROT_CTRL			0x1e4e
+#define P_VIU2_OSD2_PROT_CTRL			VCBUS_REG_ADDR(VIU2_OSD2_PROT_CTRL)
+#define VIU2_VD1_IF0_GEN_REG			0x1e50
+#define P_VIU2_VD1_IF0_GEN_REG			VCBUS_REG_ADDR(VIU2_VD1_IF0_GEN_REG)
+#define VIU2_VD1_IF0_CANVAS0			0x1e51
+#define P_VIU2_VD1_IF0_CANVAS0			VCBUS_REG_ADDR(VIU2_VD1_IF0_CANVAS0)
+#define VIU2_VD1_IF0_CANVAS1			0x1e52
+#define P_VIU2_VD1_IF0_CANVAS1			VCBUS_REG_ADDR(VIU2_VD1_IF0_CANVAS1)
+#define VIU2_VD1_IF0_LUMA_X0			0x1e53
+#define P_VIU2_VD1_IF0_LUMA_X0			VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_X0)
+#define VIU2_VD1_IF0_LUMA_Y0			0x1e54
+#define P_VIU2_VD1_IF0_LUMA_Y0			VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_Y0)
+#define VIU2_VD1_IF0_CHROMA_X0			0x1e55
+#define P_VIU2_VD1_IF0_CHROMA_X0		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_X0)
+#define VIU2_VD1_IF0_CHROMA_Y0			0x1e56
+#define P_VIU2_VD1_IF0_CHROMA_Y0		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_Y0)
+#define VIU2_VD1_IF0_LUMA_X1			0x1e57
+#define P_VIU2_VD1_IF0_LUMA_X1			VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_X1)
+#define VIU2_VD1_IF0_LUMA_Y1			0x1e58
+#define P_VIU2_VD1_IF0_LUMA_Y1			VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_Y1)
+#define VIU2_VD1_IF0_CHROMA_X1			0x1e59
+#define P_VIU2_VD1_IF0_CHROMA_X1		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_X1)
+#define VIU2_VD1_IF0_CHROMA_Y1			0x1e5a
+#define P_VIU2_VD1_IF0_CHROMA_Y1		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_Y1)
+#define VIU2_VD1_IF0_RPT_LOOP			0x1e5b
+#define P_VIU2_VD1_IF0_RPT_LOOP			VCBUS_REG_ADDR(VIU2_VD1_IF0_RPT_LOOP)
+#define VIU2_VD1_IF0_LUMA0_RPT_PAT		0x1e5c
+#define P_VIU2_VD1_IF0_LUMA0_RPT_PAT		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA0_RPT_PAT)
+#define VIU2_VD1_IF0_CHROMA0_RPT_PAT		0x1e5d
+#define P_VIU2_VD1_IF0_CHROMA0_RPT_PAT		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA0_RPT_PAT)
+#define VIU2_VD1_IF0_LUMA1_RPT_PAT		0x1e5e
+#define P_VIU2_VD1_IF0_LUMA1_RPT_PAT		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA1_RPT_PAT)
+#define VIU2_VD1_IF0_CHROMA1_RPT_PAT		0x1e5f
+#define P_VIU2_VD1_IF0_CHROMA1_RPT_PAT		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA1_RPT_PAT)
+#define VIU2_VD1_IF0_LUMA_PSEL			0x1e60
+#define P_VIU2_VD1_IF0_LUMA_PSEL		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_PSEL)
+#define VIU2_VD1_IF0_CHROMA_PSEL		0x1e61
+#define P_VIU2_VD1_IF0_CHROMA_PSEL		VCBUS_REG_ADDR(VIU2_VD1_IF0_CHROMA_PSEL)
+#define VIU2_VD1_IF0_DUMMY_PIXEL		0x1e62
+#define P_VIU2_VD1_IF0_DUMMY_PIXEL		VCBUS_REG_ADDR(VIU2_VD1_IF0_DUMMY_PIXEL)
+#define VIU2_VD1_IF0_LUMA_FIFO_SIZE		0x1e63
+#define P_VIU2_VD1_IF0_LUMA_FIFO_SIZE		VCBUS_REG_ADDR(VIU2_VD1_IF0_LUMA_FIFO_SIZE)
+#define VIU2_VD1_IF0_RANGE_MAP_Y		0x1e6a
+#define P_VIU2_VD1_IF0_RANGE_MAP_Y		VCBUS_REG_ADDR(VIU2_VD1_IF0_RANGE_MAP_Y)
+#define VIU2_VD1_IF0_RANGE_MAP_CB		0x1e6b
+#define P_VIU2_VD1_IF0_RANGE_MAP_CB		VCBUS_REG_ADDR(VIU2_VD1_IF0_RANGE_MAP_CB)
+#define VIU2_VD1_IF0_RANGE_MAP_CR		0x1e6c
+#define P_VIU2_VD1_IF0_RANGE_MAP_CR		VCBUS_REG_ADDR(VIU2_VD1_IF0_RANGE_MAP_CR)
+#define VIU2_VD1_IF0_GEN_REG2			0x1e6d
+#define P_VIU2_VD1_IF0_GEN_REG2			VCBUS_REG_ADDR(VIU2_VD1_IF0_GEN_REG2)
+#define VIU2_VD1_IF0_PROT_CNTL			0x1e6e
+#define P_VIU2_VD1_IF0_PROT_CNTL		VCBUS_REG_ADDR(VIU2_VD1_IF0_PROT_CNTL)
+#define VIU2_VD1_FMT_CTRL			0x1e68
+#define P_VIU2_VD1_FMT_CTRL			VCBUS_REG_ADDR(VIU2_VD1_FMT_CTRL)
+#define VIU2_VD1_FMT_W				0x1e69
+#define P_VIU2_VD1_FMT_W			VCBUS_REG_ADDR(VIU2_VD1_FMT_W)
+#define VPU_OSD1_MMC_CTRL			0x2701
+#define P_VPU_OSD1_MMC_CTRL			VCBUS_REG_ADDR(VPU_OSD1_MMC_CTRL)
+#define VPU_OSD2_MMC_CTRL			0x2702
+#define P_VPU_OSD2_MMC_CTRL			VCBUS_REG_ADDR(VPU_OSD2_MMC_CTRL)
+#define VPU_VD1_MMC_CTRL			0x2703
+#define P_VPU_VD1_MMC_CTRL			VCBUS_REG_ADDR(VPU_VD1_MMC_CTRL)
+#define VPU_VD2_MMC_CTRL			0x2704
+#define P_VPU_VD2_MMC_CTRL			VCBUS_REG_ADDR(VPU_VD2_MMC_CTRL)
+#define VPU_DI_IF1_MMC_CTRL			0x2705
+#define P_VPU_DI_IF1_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_IF1_MMC_CTRL)
+#define VPU_DI_MEM_MMC_CTRL			0x2706
+#define P_VPU_DI_MEM_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_MEM_MMC_CTRL)
+#define VPU_DI_INP_MMC_CTRL			0x2707
+#define P_VPU_DI_INP_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_INP_MMC_CTRL)
+#define VPU_DI_MTNRD_MMC_CTRL			0x2708
+#define P_VPU_DI_MTNRD_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_MTNRD_MMC_CTRL)
+#define VPU_DI_CHAN2_MMC_CTRL			0x2709
+#define P_VPU_DI_CHAN2_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_CHAN2_MMC_CTRL)
+#define VPU_DI_MTNWR_MMC_CTRL			0x270a
+#define P_VPU_DI_MTNWR_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_MTNWR_MMC_CTRL)
+#define VPU_DI_NRWR_MMC_CTRL			0x270b
+#define P_VPU_DI_NRWR_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_NRWR_MMC_CTRL)
+#define VPU_DI_DIWR_MMC_CTRL			0x270c
+#define P_VPU_DI_DIWR_MMC_CTRL			VCBUS_REG_ADDR(VPU_DI_DIWR_MMC_CTRL)
+#define VPU_VDIN0_MMC_CTRL			0x270d
+#define P_VPU_VDIN0_MMC_CTRL			VCBUS_REG_ADDR(VPU_VDIN0_MMC_CTRL)
+#define VPU_VDIN1_MMC_CTRL			0x270e
+#define P_VPU_VDIN1_MMC_CTRL			VCBUS_REG_ADDR(VPU_VDIN1_MMC_CTRL)
+#define VPU_BT656_MMC_CTRL			0x270f
+#define P_VPU_BT656_MMC_CTRL			VCBUS_REG_ADDR(VPU_BT656_MMC_CTRL)
+#define VPU_TVD3D_MMC_CTRL			0x2710
+#define P_VPU_TVD3D_MMC_CTRL			VCBUS_REG_ADDR(VPU_TVD3D_MMC_CTRL)
+#define VPU_TVDVBI_MMC_CTRL			0x2711
+#define P_VPU_TVDVBI_MMC_CTRL			VCBUS_REG_ADDR(VPU_TVDVBI_MMC_CTRL)
+#define VPU_VDIN_PRE_ARB_CTRL			0x2714
+#define P_VPU_VDIN_PRE_ARB_CTRL			VCBUS_REG_ADDR(VPU_VDIN_PRE_ARB_CTRL)
+#define VPU_VDISP_PRE_ARB_CTRL			0x2715
+#define P_VPU_VDISP_PRE_ARB_CTRL		VCBUS_REG_ADDR(VPU_VDISP_PRE_ARB_CTRL)
+#define VPU_VPUARB2_PRE_ARB_CTRL		0x2716
+#define P_VPU_VPUARB2_PRE_ARB_CTRL		VCBUS_REG_ADDR(VPU_VPUARB2_PRE_ARB_CTRL)
+#define VPU_OSD3_MMC_CTRL			0x2717
+#define P_VPU_OSD3_MMC_CTRL			VCBUS_REG_ADDR(VPU_OSD3_MMC_CTRL)
+#define VPU_OSD4_MMC_CTRL			0x2718
+#define P_VPU_OSD4_MMC_CTRL			VCBUS_REG_ADDR(VPU_OSD4_MMC_CTRL)
+#define VPU_VD3_MMC_CTRL			0x2719
+#define P_VPU_VD3_MMC_CTRL			VCBUS_REG_ADDR(VPU_VD3_MMC_CTRL)
+#define VPU_VIU_VENC_MUX_CTRL			0x271a
+#define P_VPU_VIU_VENC_MUX_CTRL			VCBUS_REG_ADDR(VPU_VIU_VENC_MUX_CTRL)
+#define VPU_HDMI_SETTING			0x271b
+#define P_VPU_HDMI_SETTING			VCBUS_REG_ADDR(VPU_HDMI_SETTING)
+#define ENCI_INFO_READ				0x271c
+#define P_ENCI_INFO_READ			VCBUS_REG_ADDR(ENCI_INFO_READ)
+#define ENCP_INFO_READ				0x271d
+#define P_ENCP_INFO_READ			VCBUS_REG_ADDR(ENCP_INFO_READ)
+#define ENCT_INFO_READ				0x271e
+#define P_ENCT_INFO_READ			VCBUS_REG_ADDR(ENCT_INFO_READ)
+#define ENCL_INFO_READ				0x271f
+#define P_ENCL_INFO_READ			VCBUS_REG_ADDR(ENCL_INFO_READ)
+#define VPU_SW_RESET				0x2720
+#define P_VPU_SW_RESET				VCBUS_REG_ADDR(VPU_SW_RESET)
+#define VPU_D2D3_MMC_CTRL			0x2721
+#define P_VPU_D2D3_MMC_CTRL			VCBUS_REG_ADDR(VPU_D2D3_MMC_CTRL)
+#define VPU_CONT_MMC_CTRL			0x2722
+#define P_VPU_CONT_MMC_CTRL			VCBUS_REG_ADDR(VPU_CONT_MMC_CTRL)
+#define VPU_CLK_GATE				0x2723
+#define P_VPU_CLK_GATE				VCBUS_REG_ADDR(VPU_CLK_GATE)
+#define VPU_RDMA_MMC_CTRL			0x2724
+#define P_VPU_RDMA_MMC_CTRL			VCBUS_REG_ADDR(VPU_RDMA_MMC_CTRL)
+#define VPU_MEM_PD_REG0				0x2725
+#define P_VPU_MEM_PD_REG0			VCBUS_REG_ADDR(VPU_MEM_PD_REG0)
+#define VPU_MEM_PD_REG1				0x2726
+#define P_VPU_MEM_PD_REG1			VCBUS_REG_ADDR(VPU_MEM_PD_REG1)
+#define VPU_HDMI_DATA_OVR			0x2727
+#define P_VPU_HDMI_DATA_OVR			VCBUS_REG_ADDR(VPU_HDMI_DATA_OVR)
+#define VPU_PROT1_MMC_CTRL			0x2728
+#define P_VPU_PROT1_MMC_CTRL			VCBUS_REG_ADDR(VPU_PROT1_MMC_CTRL)
+#define VPU_PROT2_MMC_CTRL			0x2729
+#define P_VPU_PROT2_MMC_CTRL			VCBUS_REG_ADDR(VPU_PROT2_MMC_CTRL)
+#define VPU_PROT3_MMC_CTRL			0x272a
+#define P_VPU_PROT3_MMC_CTRL			VCBUS_REG_ADDR(VPU_PROT3_MMC_CTRL)
+#define VPU_ARB4_V1_MMC_CTRL			0x272b
+#define P_VPU_ARB4_V1_MMC_CTRL			VCBUS_REG_ADDR(VPU_ARB4_V1_MMC_CTRL)
+#define VPU_ARB4_V2_MMC_CTRL			0x272c
+#define P_VPU_ARB4_V2_MMC_CTRL			VCBUS_REG_ADDR(VPU_ARB4_V2_MMC_CTRL)
+#define VPU_MCVEC_MMC_CTRL			0x272d
+#define P_VPU_MCVEC_MMC_CTRL			VCBUS_REG_ADDR(VPU_MCVEC_MMC_CTRL)
+#define VPU_MCINF_MMC_CTRL			0x272e
+#define P_VPU_MCINF_MMC_CTRL			VCBUS_REG_ADDR(VPU_MCINF_MMC_CTRL)
+#define VPU_VPU_PWM_V0				0x2730
+#define P_VPU_VPU_PWM_V0			VCBUS_REG_ADDR(VPU_VPU_PWM_V0)
+#define VPU_VPU_PWM_V1				0x2731
+#define P_VPU_VPU_PWM_V1			VCBUS_REG_ADDR(VPU_VPU_PWM_V1)
+#define VPU_VPU_PWM_V2				0x2732
+#define P_VPU_VPU_PWM_V2			VCBUS_REG_ADDR(VPU_VPU_PWM_V2)
+#define VPU_VPU_PWM_V3				0x2733
+#define P_VPU_VPU_PWM_V3			VCBUS_REG_ADDR(VPU_VPU_PWM_V3)
+#define VPU_VPU_PWM_H0				0x2734
+#define P_VPU_VPU_PWM_H0			VCBUS_REG_ADDR(VPU_VPU_PWM_H0)
+#define VPU_VPU_PWM_H1				0x2735
+#define P_VPU_VPU_PWM_H1			VCBUS_REG_ADDR(VPU_VPU_PWM_H1)
+#define VPU_VPU_PWM_H2				0x2736
+#define P_VPU_VPU_PWM_H2			VCBUS_REG_ADDR(VPU_VPU_PWM_H2)
+#define VPU_VPU_PWM_H3				0x2737
+#define P_VPU_VPU_PWM_H3			VCBUS_REG_ADDR(VPU_VPU_PWM_H3)
+#define VPU_VPU_3D_SYNC1			0x2738
+#define P_VPU_VPU_3D_SYNC1			VCBUS_REG_ADDR(VPU_VPU_3D_SYNC1)
+#define VPU_VPU_3D_SYNC2			0x2739
+#define P_VPU_VPU_3D_SYNC2			VCBUS_REG_ADDR(VPU_VPU_3D_SYNC2)
+#define VPU_MISC_CTRL				0x2740
+#define P_VPU_MISC_CTRL				VCBUS_REG_ADDR(VPU_MISC_CTRL)
+#define VPU_ISP_GCLK_CTRL0			0x2741
+#define P_VPU_ISP_GCLK_CTRL0			VCBUS_REG_ADDR(VPU_ISP_GCLK_CTRL0)
+#define VPU_ISP_GCLK_CTRL1			0x2742
+#define P_VPU_ISP_GCLK_CTRL1			VCBUS_REG_ADDR(VPU_ISP_GCLK_CTRL1)
+#define VPU_HDMI_FMT_CTRL			0x2743
+#define P_VPU_HDMI_FMT_CTRL			VCBUS_REG_ADDR(VPU_HDMI_FMT_CTRL)
+#define VPU_VDIN_ASYNC_HOLD_CTRL		0x2744
+#define P_VPU_VDIN_ASYNC_HOLD_CTRL		VCBUS_REG_ADDR(VPU_VDIN_ASYNC_HOLD_CTRL)
+#define VPU_VDISP_ASYNC_HOLD_CTRL		0x2745
+#define P_VPU_VDISP_ASYNC_HOLD_CTRL		VCBUS_REG_ADDR(VPU_VDISP_ASYNC_HOLD_CTRL)
+#define VPU_VPUARB2_ASYNC_HOLD_CTRL		0x2746
+#define P_VPU_VPUARB2_ASYNC_HOLD_CTRL		VCBUS_REG_ADDR(VPU_VPUARB2_ASYNC_HOLD_CTRL)
+#define VPU_ARB_URG_CTRL			0x2747
+#define P_VPU_ARB_URG_CTRL			VCBUS_REG_ADDR(VPU_ARB_URG_CTRL)
+#define VPU_PROT1_CLK_GATE			0x2750
+#define P_VPU_PROT1_CLK_GATE			VCBUS_REG_ADDR(VPU_PROT1_CLK_GATE)
+#define VPU_PROT1_GEN_CNTL			0x2751
+#define P_VPU_PROT1_GEN_CNTL			VCBUS_REG_ADDR(VPU_PROT1_GEN_CNTL)
+#define VPU_PROT1_X_START_END			0x2752
+#define P_VPU_PROT1_X_START_END			VCBUS_REG_ADDR(VPU_PROT1_X_START_END)
+#define VPU_PROT1_Y_START_END			0x2753
+#define P_VPU_PROT1_Y_START_END			VCBUS_REG_ADDR(VPU_PROT1_Y_START_END)
+#define VPU_PROT1_Y_LEN_STEP			0x2754
+#define P_VPU_PROT1_Y_LEN_STEP			VCBUS_REG_ADDR(VPU_PROT1_Y_LEN_STEP)
+#define VPU_PROT1_RPT_LOOP			0x2755
+#define P_VPU_PROT1_RPT_LOOP			VCBUS_REG_ADDR(VPU_PROT1_RPT_LOOP)
+#define VPU_PROT1_RPT_PAT			0x2756
+#define P_VPU_PROT1_RPT_PAT			VCBUS_REG_ADDR(VPU_PROT1_RPT_PAT)
+#define VPU_PROT1_DDR				0x2757
+#define P_VPU_PROT1_DDR				VCBUS_REG_ADDR(VPU_PROT1_DDR)
+#define VPU_PROT1_RBUF_ROOM			0x2758
+#define P_VPU_PROT1_RBUF_ROOM			VCBUS_REG_ADDR(VPU_PROT1_RBUF_ROOM)
+#define VPU_PROT1_STAT_0			0x2759
+#define P_VPU_PROT1_STAT_0			VCBUS_REG_ADDR(VPU_PROT1_STAT_0)
+#define VPU_PROT1_STAT_1			0x275a
+#define P_VPU_PROT1_STAT_1			VCBUS_REG_ADDR(VPU_PROT1_STAT_1)
+#define VPU_PROT1_STAT_2			0x275b
+#define P_VPU_PROT1_STAT_2			VCBUS_REG_ADDR(VPU_PROT1_STAT_2)
+#define VPU_PROT1_REQ_ONOFF			0x275c
+#define P_VPU_PROT1_REQ_ONOFF			VCBUS_REG_ADDR(VPU_PROT1_REQ_ONOFF)
+#define VPU_PROT2_CLK_GATE			0x2760
+#define P_VPU_PROT2_CLK_GATE			VCBUS_REG_ADDR(VPU_PROT2_CLK_GATE)
+#define VPU_PROT2_GEN_CNTL			0x2761
+#define P_VPU_PROT2_GEN_CNTL			VCBUS_REG_ADDR(VPU_PROT2_GEN_CNTL)
+#define VPU_PROT2_X_START_END			0x2762
+#define P_VPU_PROT2_X_START_END			VCBUS_REG_ADDR(VPU_PROT2_X_START_END)
+#define VPU_PROT2_Y_START_END			0x2763
+#define P_VPU_PROT2_Y_START_END			VCBUS_REG_ADDR(VPU_PROT2_Y_START_END)
+#define VPU_PROT2_Y_LEN_STEP			0x2764
+#define P_VPU_PROT2_Y_LEN_STEP			VCBUS_REG_ADDR(VPU_PROT2_Y_LEN_STEP)
+#define VPU_PROT2_RPT_LOOP			0x2765
+#define P_VPU_PROT2_RPT_LOOP			VCBUS_REG_ADDR(VPU_PROT2_RPT_LOOP)
+#define VPU_PROT2_RPT_PAT			0x2766
+#define P_VPU_PROT2_RPT_PAT			VCBUS_REG_ADDR(VPU_PROT2_RPT_PAT)
+#define VPU_PROT2_DDR				0x2767
+#define P_VPU_PROT2_DDR				VCBUS_REG_ADDR(VPU_PROT2_DDR)
+#define VPU_PROT2_RBUF_ROOM			0x2768
+#define P_VPU_PROT2_RBUF_ROOM			VCBUS_REG_ADDR(VPU_PROT2_RBUF_ROOM)
+#define VPU_PROT2_STAT_0			0x2769
+#define P_VPU_PROT2_STAT_0			VCBUS_REG_ADDR(VPU_PROT2_STAT_0)
+#define VPU_PROT2_STAT_1			0x276a
+#define P_VPU_PROT2_STAT_1			VCBUS_REG_ADDR(VPU_PROT2_STAT_1)
+#define VPU_PROT2_STAT_2			0x276b
+#define P_VPU_PROT2_STAT_2			VCBUS_REG_ADDR(VPU_PROT2_STAT_2)
+#define VPU_PROT2_REQ_ONOFF			0x276c
+#define P_VPU_PROT2_REQ_ONOFF			VCBUS_REG_ADDR(VPU_PROT2_REQ_ONOFF)
+#define VPU_PROT3_CLK_GATE			0x2770
+#define P_VPU_PROT3_CLK_GATE			VCBUS_REG_ADDR(VPU_PROT3_CLK_GATE)
+#define VPU_PROT3_GEN_CNTL			0x2771
+#define P_VPU_PROT3_GEN_CNTL			VCBUS_REG_ADDR(VPU_PROT3_GEN_CNTL)
+#define VPU_PROT3_X_START_END			0x2772
+#define P_VPU_PROT3_X_START_END			VCBUS_REG_ADDR(VPU_PROT3_X_START_END)
+#define VPU_PROT3_Y_START_END			0x2773
+#define P_VPU_PROT3_Y_START_END			VCBUS_REG_ADDR(VPU_PROT3_Y_START_END)
+#define VPU_PROT3_Y_LEN_STEP			0x2774
+#define P_VPU_PROT3_Y_LEN_STEP			VCBUS_REG_ADDR(VPU_PROT3_Y_LEN_STEP)
+#define VPU_PROT3_RPT_LOOP			0x2775
+#define P_VPU_PROT3_RPT_LOOP			VCBUS_REG_ADDR(VPU_PROT3_RPT_LOOP)
+#define VPU_PROT3_RPT_PAT			0x2776
+#define P_VPU_PROT3_RPT_PAT			VCBUS_REG_ADDR(VPU_PROT3_RPT_PAT)
+#define VPU_PROT3_DDR				0x2777
+#define P_VPU_PROT3_DDR				VCBUS_REG_ADDR(VPU_PROT3_DDR)
+#define VPU_PROT3_RBUF_ROOM			0x2778
+#define P_VPU_PROT3_RBUF_ROOM			VCBUS_REG_ADDR(VPU_PROT3_RBUF_ROOM)
+#define VPU_PROT3_STAT_0			0x2779
+#define P_VPU_PROT3_STAT_0			VCBUS_REG_ADDR(VPU_PROT3_STAT_0)
+#define VPU_PROT3_STAT_1			0x277a
+#define P_VPU_PROT3_STAT_1			VCBUS_REG_ADDR(VPU_PROT3_STAT_1)
+#define VPU_PROT3_STAT_2			0x277b
+#define P_VPU_PROT3_STAT_2			VCBUS_REG_ADDR(VPU_PROT3_STAT_2)
+#define VPU_PROT3_REQ_ONOFF			0x277c
+#define P_VPU_PROT3_REQ_ONOFF			VCBUS_REG_ADDR(VPU_PROT3_REQ_ONOFF)
+#define D2D3_GLB_CTRL				0x2b00
+#define P_D2D3_GLB_CTRL				VCBUS_REG_ADDR(D2D3_GLB_CTRL)
+#define D2D3_DPG_INPIC_SIZE			0x2b01
+#define P_D2D3_DPG_INPIC_SIZE			VCBUS_REG_ADDR(D2D3_DPG_INPIC_SIZE)
+#define D2D3_DBR_OUTPIC_SIZE			0x2b02
+#define P_D2D3_DBR_OUTPIC_SIZE			VCBUS_REG_ADDR(D2D3_DBR_OUTPIC_SIZE)
+#define D2D3_DGEN_WIN_HOR			0x2b03
+#define P_D2D3_DGEN_WIN_HOR			VCBUS_REG_ADDR(D2D3_DGEN_WIN_HOR)
+#define D2D3_DGEN_WIN_VER			0x2b04
+#define P_D2D3_DGEN_WIN_VER			VCBUS_REG_ADDR(D2D3_DGEN_WIN_VER)
+#define D2D3_PRE_SCD_H				0x2b05
+#define P_D2D3_PRE_SCD_H			VCBUS_REG_ADDR(D2D3_PRE_SCD_H)
+#define D2D3_SCALER_CTRL			0x2b06
+#define P_D2D3_SCALER_CTRL			VCBUS_REG_ADDR(D2D3_SCALER_CTRL)
+#define D2D3_CG_THRESHOLD_1			0x2b07
+#define P_D2D3_CG_THRESHOLD_1			VCBUS_REG_ADDR(D2D3_CG_THRESHOLD_1)
+#define D2D3_CG_THRESHOLD_2			0x2b08
+#define P_D2D3_CG_THRESHOLD_2			VCBUS_REG_ADDR(D2D3_CG_THRESHOLD_2)
+#define D2D3_CG_PARAM_1				0x2b09
+#define P_D2D3_CG_PARAM_1			VCBUS_REG_ADDR(D2D3_CG_PARAM_1)
+#define D2D3_CG_PARAM_2				0x2b0a
+#define P_D2D3_CG_PARAM_2			VCBUS_REG_ADDR(D2D3_CG_PARAM_2)
+#define D2D3_PRE_SCD_V				0x2b0b
+#define P_D2D3_PRE_SCD_V			VCBUS_REG_ADDR(D2D3_PRE_SCD_V)
+#define D2D3_D2P_PARAM_1			0x2b0c
+#define P_D2D3_D2P_PARAM_1			VCBUS_REG_ADDR(D2D3_D2P_PARAM_1)
+#define D2D3_D2P_PARAM_2			0x2b0d
+#define P_D2D3_D2P_PARAM_2			VCBUS_REG_ADDR(D2D3_D2P_PARAM_2)
+#define D2D3_D2P_PARAM_3			0x2b0e
+#define P_D2D3_D2P_PARAM_3			VCBUS_REG_ADDR(D2D3_D2P_PARAM_3)
+#define D2D3_SCU18_STEP				0x2b0f
+#define P_D2D3_SCU18_STEP			VCBUS_REG_ADDR(D2D3_SCU18_STEP)
+#define D2D3_DPF_LPF_CTRL			0x2b10
+#define P_D2D3_DPF_LPF_CTRL			VCBUS_REG_ADDR(D2D3_DPF_LPF_CTRL)
+#define D2D3_DBLD_CG_PARAM			0x2b11
+#define P_D2D3_DBLD_CG_PARAM			VCBUS_REG_ADDR(D2D3_DBLD_CG_PARAM)
+#define D2D3_DBLD_MG_PARAM			0x2b12
+#define P_D2D3_DBLD_MG_PARAM			VCBUS_REG_ADDR(D2D3_DBLD_MG_PARAM)
+#define D2D3_DBLD_LG_PARAM			0x2b13
+#define P_D2D3_DBLD_LG_PARAM			VCBUS_REG_ADDR(D2D3_DBLD_LG_PARAM)
+#define D2D3_DBLD_LPF_HCOEFF			0x2b14
+#define P_D2D3_DBLD_LPF_HCOEFF			VCBUS_REG_ADDR(D2D3_DBLD_LPF_HCOEFF)
+#define D2D3_DBLD_LPF_VCOEFF			0x2b15
+#define P_D2D3_DBLD_LPF_VCOEFF			VCBUS_REG_ADDR(D2D3_DBLD_LPF_VCOEFF)
+#define D2D3_DBLD_PATH_CTRL			0x2b16
+#define P_D2D3_DBLD_PATH_CTRL			VCBUS_REG_ADDR(D2D3_DBLD_PATH_CTRL)
+#define D2D3_SCU18_INPIC_SIZE			0x2b17
+#define P_D2D3_SCU18_INPIC_SIZE			VCBUS_REG_ADDR(D2D3_SCU18_INPIC_SIZE)
+#define D2D3_MBDG_CTRL				0x2b18
+#define P_D2D3_MBDG_CTRL			VCBUS_REG_ADDR(D2D3_MBDG_CTRL)
+#define D2D3_MBDG_PARAM_0			0x2b19
+#define P_D2D3_MBDG_PARAM_0			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_0)
+#define D2D3_MBDG_PARAM_1			0x2b1a
+#define P_D2D3_MBDG_PARAM_1			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_1)
+#define D2D3_MBDG_PARAM_2			0x2b1b
+#define P_D2D3_MBDG_PARAM_2			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_2)
+#define D2D3_MBDG_PARAM_3			0x2b1c
+#define P_D2D3_MBDG_PARAM_3			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_3)
+#define D2D3_MBDG_PARAM_4			0x2b1d
+#define P_D2D3_MBDG_PARAM_4			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_4)
+#define D2D3_MBDG_PARAM_5			0x2b1e
+#define P_D2D3_MBDG_PARAM_5			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_5)
+#define D2D3_MBDG_PARAM_6			0x2b1f
+#define P_D2D3_MBDG_PARAM_6			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_6)
+#define D2D3_MBDG_PARAM_7			0x2b20
+#define P_D2D3_MBDG_PARAM_7			VCBUS_REG_ADDR(D2D3_MBDG_PARAM_7)
+#define D2D3_DBG_CTRL				0x2b23
+#define P_D2D3_DBG_CTRL				VCBUS_REG_ADDR(D2D3_DBG_CTRL)
+#define D2D3_DWMIF_CTRL				0x2b24
+#define P_D2D3_DWMIF_CTRL			VCBUS_REG_ADDR(D2D3_DWMIF_CTRL)
+#define D2D3_DWMIF_HPOS				0x2b25
+#define P_D2D3_DWMIF_HPOS			VCBUS_REG_ADDR(D2D3_DWMIF_HPOS)
+#define D2D3_DWMIF_VPOS				0x2b26
+#define P_D2D3_DWMIF_VPOS			VCBUS_REG_ADDR(D2D3_DWMIF_VPOS)
+#define D2D3_DWMIF_SIZE				0x2b27
+#define P_D2D3_DWMIF_SIZE			VCBUS_REG_ADDR(D2D3_DWMIF_SIZE)
+#define D2D3_DRMIF_CTRL				0x2b28
+#define P_D2D3_DRMIF_CTRL			VCBUS_REG_ADDR(D2D3_DRMIF_CTRL)
+#define D2D3_DRMIF_HPOS				0x2b29
+#define P_D2D3_DRMIF_HPOS			VCBUS_REG_ADDR(D2D3_DRMIF_HPOS)
+#define D2D3_DRMIF_VPOS				0x2b2a
+#define P_D2D3_DRMIF_VPOS			VCBUS_REG_ADDR(D2D3_DRMIF_VPOS)
+#define D2D3_DBR_DDD_CTRL			0x2b2c
+#define P_D2D3_DBR_DDD_CTRL			VCBUS_REG_ADDR(D2D3_DBR_DDD_CTRL)
+#define D2D3_DBR_DDD_DBG			0x2b2d
+#define P_D2D3_DBR_DDD_DBG			VCBUS_REG_ADDR(D2D3_DBR_DDD_DBG)
+#define D2D3_DBR_LRDMX_CTRL			0x2b2f
+#define P_D2D3_DBR_LRDMX_CTRL			VCBUS_REG_ADDR(D2D3_DBR_LRDMX_CTRL)
+#define D2D3_CBDG_STATUS_1			0x2b30
+#define P_D2D3_CBDG_STATUS_1			VCBUS_REG_ADDR(D2D3_CBDG_STATUS_1)
+#define D2D3_MBDG_STATUS_1			0x2b31
+#define P_D2D3_MBDG_STATUS_1			VCBUS_REG_ADDR(D2D3_MBDG_STATUS_1)
+#define D2D3_MBDG_STATUS_2			0x2b32
+#define P_D2D3_MBDG_STATUS_2			VCBUS_REG_ADDR(D2D3_MBDG_STATUS_2)
+#define D2D3_MBDG_STATUS_3			0x2b33
+#define P_D2D3_MBDG_STATUS_3			VCBUS_REG_ADDR(D2D3_MBDG_STATUS_3)
+#define D2D3_MBDG_STATUS_4			0x2b34
+#define P_D2D3_MBDG_STATUS_4			VCBUS_REG_ADDR(D2D3_MBDG_STATUS_4)
+#define D2D3_MBDG_STATUS_5			0x2b35
+#define P_D2D3_MBDG_STATUS_5			VCBUS_REG_ADDR(D2D3_MBDG_STATUS_5)
+#define D2D3_MBDG_STATUS_6			0x2b36
+#define P_D2D3_MBDG_STATUS_6			VCBUS_REG_ADDR(D2D3_MBDG_STATUS_6)
+#define D2D3_MBDG_STATUS_7			0x2b37
+#define P_D2D3_MBDG_STATUS_7			VCBUS_REG_ADDR(D2D3_MBDG_STATUS_7)
+#define D2D3_DBG_STATUS_1			0x2b38
+#define P_D2D3_DBG_STATUS_1			VCBUS_REG_ADDR(D2D3_DBG_STATUS_1)
+#define D2D3_DBG_STATUS_2			0x2b39
+#define P_D2D3_DBG_STATUS_2			VCBUS_REG_ADDR(D2D3_DBG_STATUS_2)
+#define D2D3_DRMIF_STATUS			0x2b3a
+#define P_D2D3_DRMIF_STATUS			VCBUS_REG_ADDR(D2D3_DRMIF_STATUS)
+#define D2D3_DWMIF_STATUS			0x2b3b
+#define P_D2D3_DWMIF_STATUS			VCBUS_REG_ADDR(D2D3_DWMIF_STATUS)
+#define D2D3_CBDG_STATUS_2			0x2b3c
+#define P_D2D3_CBDG_STATUS_2			VCBUS_REG_ADDR(D2D3_CBDG_STATUS_2)
+#define D2D3_DBLD_STATUS			0x2b3d
+#define P_D2D3_DBLD_STATUS			VCBUS_REG_ADDR(D2D3_DBLD_STATUS)
+#define D2D3_RESEV_STATUS1			0x2b3e
+#define P_D2D3_RESEV_STATUS1			VCBUS_REG_ADDR(D2D3_RESEV_STATUS1)
+#define D2D3_RESEV_STATUS2			0x2b3f
+#define P_D2D3_RESEV_STATUS2			VCBUS_REG_ADDR(D2D3_RESEV_STATUS2)
+#define VI_HIST_CTRL				0x2e00
+#define P_VI_HIST_CTRL				VCBUS_REG_ADDR(VI_HIST_CTRL)
+#define VI_HIST_H_START_END			0x2e01
+#define P_VI_HIST_H_START_END			VCBUS_REG_ADDR(VI_HIST_H_START_END)
+#define VI_HIST_V_START_END			0x2e02
+#define P_VI_HIST_V_START_END			VCBUS_REG_ADDR(VI_HIST_V_START_END)
+#define VI_HIST_MAX_MIN				0x2e03
+#define P_VI_HIST_MAX_MIN			VCBUS_REG_ADDR(VI_HIST_MAX_MIN)
+#define VI_HIST_SPL_VAL				0x2e04
+#define P_VI_HIST_SPL_VAL			VCBUS_REG_ADDR(VI_HIST_SPL_VAL)
+#define VI_HIST_SPL_PIX_CNT			0x2e05
+#define P_VI_HIST_SPL_PIX_CNT			VCBUS_REG_ADDR(VI_HIST_SPL_PIX_CNT)
+#define VI_HIST_CHROMA_SUM			0x2e06
+#define P_VI_HIST_CHROMA_SUM			VCBUS_REG_ADDR(VI_HIST_CHROMA_SUM)
+#define VI_DNLP_HIST00				0x2e07
+#define P_VI_DNLP_HIST00			VCBUS_REG_ADDR(VI_DNLP_HIST00)
+#define VI_DNLP_HIST01				0x2e08
+#define P_VI_DNLP_HIST01			VCBUS_REG_ADDR(VI_DNLP_HIST01)
+#define VI_DNLP_HIST02				0x2e09
+#define P_VI_DNLP_HIST02			VCBUS_REG_ADDR(VI_DNLP_HIST02)
+#define VI_DNLP_HIST03				0x2e0a
+#define P_VI_DNLP_HIST03			VCBUS_REG_ADDR(VI_DNLP_HIST03)
+#define VI_DNLP_HIST04				0x2e0b
+#define P_VI_DNLP_HIST04			VCBUS_REG_ADDR(VI_DNLP_HIST04)
+#define VI_DNLP_HIST05				0x2e0c
+#define P_VI_DNLP_HIST05			VCBUS_REG_ADDR(VI_DNLP_HIST05)
+#define VI_DNLP_HIST06				0x2e0d
+#define P_VI_DNLP_HIST06			VCBUS_REG_ADDR(VI_DNLP_HIST06)
+#define VI_DNLP_HIST07				0x2e0e
+#define P_VI_DNLP_HIST07			VCBUS_REG_ADDR(VI_DNLP_HIST07)
+#define VI_DNLP_HIST08				0x2e0f
+#define P_VI_DNLP_HIST08			VCBUS_REG_ADDR(VI_DNLP_HIST08)
+#define VI_DNLP_HIST09				0x2e10
+#define P_VI_DNLP_HIST09			VCBUS_REG_ADDR(VI_DNLP_HIST09)
+#define VI_DNLP_HIST10				0x2e11
+#define P_VI_DNLP_HIST10			VCBUS_REG_ADDR(VI_DNLP_HIST10)
+#define VI_DNLP_HIST11				0x2e12
+#define P_VI_DNLP_HIST11			VCBUS_REG_ADDR(VI_DNLP_HIST11)
+#define VI_DNLP_HIST12				0x2e13
+#define P_VI_DNLP_HIST12			VCBUS_REG_ADDR(VI_DNLP_HIST12)
+#define VI_DNLP_HIST13				0x2e14
+#define P_VI_DNLP_HIST13			VCBUS_REG_ADDR(VI_DNLP_HIST13)
+#define VI_DNLP_HIST14				0x2e15
+#define P_VI_DNLP_HIST14			VCBUS_REG_ADDR(VI_DNLP_HIST14)
+#define VI_DNLP_HIST15				0x2e16
+#define P_VI_DNLP_HIST15			VCBUS_REG_ADDR(VI_DNLP_HIST15)
+#define VI_DNLP_HIST16				0x2e17
+#define P_VI_DNLP_HIST16			VCBUS_REG_ADDR(VI_DNLP_HIST16)
+#define VI_DNLP_HIST17				0x2e18
+#define P_VI_DNLP_HIST17			VCBUS_REG_ADDR(VI_DNLP_HIST17)
+#define VI_DNLP_HIST18				0x2e19
+#define P_VI_DNLP_HIST18			VCBUS_REG_ADDR(VI_DNLP_HIST18)
+#define VI_DNLP_HIST19				0x2e1a
+#define P_VI_DNLP_HIST19			VCBUS_REG_ADDR(VI_DNLP_HIST19)
+#define VI_DNLP_HIST20				0x2e1b
+#define P_VI_DNLP_HIST20			VCBUS_REG_ADDR(VI_DNLP_HIST20)
+#define VI_DNLP_HIST21				0x2e1c
+#define P_VI_DNLP_HIST21			VCBUS_REG_ADDR(VI_DNLP_HIST21)
+#define VI_DNLP_HIST22				0x2e1d
+#define P_VI_DNLP_HIST22			VCBUS_REG_ADDR(VI_DNLP_HIST22)
+#define VI_DNLP_HIST23				0x2e1e
+#define P_VI_DNLP_HIST23			VCBUS_REG_ADDR(VI_DNLP_HIST23)
+#define VI_DNLP_HIST24				0x2e1f
+#define P_VI_DNLP_HIST24			VCBUS_REG_ADDR(VI_DNLP_HIST24)
+#define VI_DNLP_HIST25				0x2e20
+#define P_VI_DNLP_HIST25			VCBUS_REG_ADDR(VI_DNLP_HIST25)
+#define VI_DNLP_HIST26				0x2e21
+#define P_VI_DNLP_HIST26			VCBUS_REG_ADDR(VI_DNLP_HIST26)
+#define VI_DNLP_HIST27				0x2e22
+#define P_VI_DNLP_HIST27			VCBUS_REG_ADDR(VI_DNLP_HIST27)
+#define VI_DNLP_HIST28				0x2e23
+#define P_VI_DNLP_HIST28			VCBUS_REG_ADDR(VI_DNLP_HIST28)
+#define VI_DNLP_HIST29				0x2e24
+#define P_VI_DNLP_HIST29			VCBUS_REG_ADDR(VI_DNLP_HIST29)
+#define VI_DNLP_HIST30				0x2e25
+#define P_VI_DNLP_HIST30			VCBUS_REG_ADDR(VI_DNLP_HIST30)
+#define VI_DNLP_HIST31				0x2e26
+#define P_VI_DNLP_HIST31			VCBUS_REG_ADDR(VI_DNLP_HIST31)
+#define VI_DNLP_HIST32				0x2e27
+#define P_VI_DNLP_HIST32			VCBUS_REG_ADDR(VI_DNLP_HIST32)
+#define VI_HIST_PIC_SIZE			0x2e28
+#define P_VI_HIST_PIC_SIZE			VCBUS_REG_ADDR(VI_HIST_PIC_SIZE)
+#define VI_HIST_BLACK_WHITE_VALUE		0x2e29
+#define P_VI_HIST_BLACK_WHITE_VALUE		VCBUS_REG_ADDR(VI_HIST_BLACK_WHITE_VALUE)
+#define VI_HIST_GCLK_CTRL			0x2e2a
+#define P_VI_HIST_GCLK_CTRL			VCBUS_REG_ADDR(VI_HIST_GCLK_CTRL)
+#define MCDI_HV_SIZEIN				0x2f00
+#define P_MCDI_HV_SIZEIN			VCBUS_REG_ADDR(MCDI_HV_SIZEIN)
+#define MCDI_HV_BLKSIZEIN			0x2f01
+#define P_MCDI_HV_BLKSIZEIN			VCBUS_REG_ADDR(MCDI_HV_BLKSIZEIN)
+#define MCDI_BLKTOTAL				0x2f02
+#define P_MCDI_BLKTOTAL				VCBUS_REG_ADDR(MCDI_BLKTOTAL)
+#define MCDI_MOTINEN				0x2f03
+#define P_MCDI_MOTINEN				VCBUS_REG_ADDR(MCDI_MOTINEN)
+#define MCDI_CTRL_MODE				0x2f04
+#define P_MCDI_CTRL_MODE			VCBUS_REG_ADDR(MCDI_CTRL_MODE)
+#define MCDI_UNI_MVDST				0x2f05
+#define P_MCDI_UNI_MVDST			VCBUS_REG_ADDR(MCDI_UNI_MVDST)
+#define MCDI_BI_MVDST				0x2f06
+#define P_MCDI_BI_MVDST				VCBUS_REG_ADDR(MCDI_BI_MVDST)
+#define MCDI_SAD_GAIN				0x2f07
+#define P_MCDI_SAD_GAIN				VCBUS_REG_ADDR(MCDI_SAD_GAIN)
+#define MCDI_TXT_THD				0x2f08
+#define P_MCDI_TXT_THD				VCBUS_REG_ADDR(MCDI_TXT_THD)
+#define MCDI_FLT_MODESEL			0x2f09
+#define P_MCDI_FLT_MODESEL			VCBUS_REG_ADDR(MCDI_FLT_MODESEL)
+#define MCDI_CHK_EDGE_THD			0x2f0a
+#define P_MCDI_CHK_EDGE_THD			VCBUS_REG_ADDR(MCDI_CHK_EDGE_THD)
+#define MCDI_CHK_EDGE_GAIN_OFFST		0x2f0b
+#define P_MCDI_CHK_EDGE_GAIN_OFFST		VCBUS_REG_ADDR(MCDI_CHK_EDGE_GAIN_OFFST)
+#define MCDI_LMV_RT				0x2f0c
+#define P_MCDI_LMV_RT				VCBUS_REG_ADDR(MCDI_LMV_RT)
+#define MCDI_LMV_GAINTHD			0x2f0d
+#define P_MCDI_LMV_GAINTHD			VCBUS_REG_ADDR(MCDI_LMV_GAINTHD)
+#define MCDI_RPTMV_THD0				0x2f0e
+#define P_MCDI_RPTMV_THD0			VCBUS_REG_ADDR(MCDI_RPTMV_THD0)
+#define MCDI_RPTMV_THD1				0x2f0f
+#define P_MCDI_RPTMV_THD1			VCBUS_REG_ADDR(MCDI_RPTMV_THD1)
+#define MCDI_RPTMV_THD2				0x2f10
+#define P_MCDI_RPTMV_THD2			VCBUS_REG_ADDR(MCDI_RPTMV_THD2)
+#define MCDI_RPTMV_SAD				0x2f11
+#define P_MCDI_RPTMV_SAD			VCBUS_REG_ADDR(MCDI_RPTMV_SAD)
+#define MCDI_RPTMV_FLG				0x2f12
+#define P_MCDI_RPTMV_FLG			VCBUS_REG_ADDR(MCDI_RPTMV_FLG)
+#define MCDI_RPTMV_GAIN				0x2f13
+#define P_MCDI_RPTMV_GAIN			VCBUS_REG_ADDR(MCDI_RPTMV_GAIN)
+#define MCDI_GMV_RT				0x2f14
+#define P_MCDI_GMV_RT				VCBUS_REG_ADDR(MCDI_GMV_RT)
+#define MCDI_GMV_GAIN				0x2f15
+#define P_MCDI_GMV_GAIN				VCBUS_REG_ADDR(MCDI_GMV_GAIN)
+#define MCDI_HOR_SADOFST			0x2f16
+#define P_MCDI_HOR_SADOFST			VCBUS_REG_ADDR(MCDI_HOR_SADOFST)
+#define MCDI_REF_MV_NUM				0x2f17
+#define P_MCDI_REF_MV_NUM			VCBUS_REG_ADDR(MCDI_REF_MV_NUM)
+#define MCDI_REF_BADW_THD_GAIN			0x2f18
+#define P_MCDI_REF_BADW_THD_GAIN		VCBUS_REG_ADDR(MCDI_REF_BADW_THD_GAIN)
+#define MCDI_REF_BADW_SUM_GAIN			0x2f19
+#define P_MCDI_REF_BADW_SUM_GAIN		VCBUS_REG_ADDR(MCDI_REF_BADW_SUM_GAIN)
+#define MCDI_REF_BS_THD_GAIN			0x2f1a
+#define P_MCDI_REF_BS_THD_GAIN			VCBUS_REG_ADDR(MCDI_REF_BS_THD_GAIN)
+#define MCDI_REF_ERR_GAIN0			0x2f1b
+#define P_MCDI_REF_ERR_GAIN0			VCBUS_REG_ADDR(MCDI_REF_ERR_GAIN0)
+#define MCDI_REF_ERR_GAIN1			0x2f1c
+#define P_MCDI_REF_ERR_GAIN1			VCBUS_REG_ADDR(MCDI_REF_ERR_GAIN1)
+#define MCDI_REF_ERR_FRQ_CHK			0x2f1d
+#define P_MCDI_REF_ERR_FRQ_CHK			VCBUS_REG_ADDR(MCDI_REF_ERR_FRQ_CHK)
+#define MCDI_QME_LPF_MSK			0x2f1e
+#define P_MCDI_QME_LPF_MSK			VCBUS_REG_ADDR(MCDI_QME_LPF_MSK)
+#define MCDI_REL_DIF_THD_02			0x2f1f
+#define P_MCDI_REL_DIF_THD_02			VCBUS_REG_ADDR(MCDI_REL_DIF_THD_02)
+#define MCDI_REL_DIF_THD_34			0x2f20
+#define P_MCDI_REL_DIF_THD_34			VCBUS_REG_ADDR(MCDI_REL_DIF_THD_34)
+#define MCDI_REL_BADW_GAIN_OFFST_01		0x2f21
+#define P_MCDI_REL_BADW_GAIN_OFFST_01		VCBUS_REG_ADDR(MCDI_REL_BADW_GAIN_OFFST_01)
+#define MCDI_REL_BADW_GAIN_OFFST_23		0x2f22
+#define P_MCDI_REL_BADW_GAIN_OFFST_23		VCBUS_REG_ADDR(MCDI_REL_BADW_GAIN_OFFST_23)
+#define MCDI_REL_BADW_THD_GAIN_OFFST		0x2f23
+#define P_MCDI_REL_BADW_THD_GAIN_OFFST		VCBUS_REG_ADDR(MCDI_REL_BADW_THD_GAIN_OFFST)
+#define MCDI_REL_BADW_THD_MIN_MAX		0x2f24
+#define P_MCDI_REL_BADW_THD_MIN_MAX		VCBUS_REG_ADDR(MCDI_REL_BADW_THD_MIN_MAX)
+#define MCDI_REL_SAD_GAIN_OFFST_01		0x2f25
+#define P_MCDI_REL_SAD_GAIN_OFFST_01		VCBUS_REG_ADDR(MCDI_REL_SAD_GAIN_OFFST_01)
+#define MCDI_REL_SAD_GAIN_OFFST_23		0x2f26
+#define P_MCDI_REL_SAD_GAIN_OFFST_23		VCBUS_REG_ADDR(MCDI_REL_SAD_GAIN_OFFST_23)
+#define MCDI_REL_SAD_THD_GAIN_OFFST		0x2f27
+#define P_MCDI_REL_SAD_THD_GAIN_OFFST		VCBUS_REG_ADDR(MCDI_REL_SAD_THD_GAIN_OFFST)
+#define MCDI_REL_SAD_THD_MIN_MAX		0x2f28
+#define P_MCDI_REL_SAD_THD_MIN_MAX		VCBUS_REG_ADDR(MCDI_REL_SAD_THD_MIN_MAX)
+#define MCDI_REL_DET_GAIN_00			0x2f29
+#define P_MCDI_REL_DET_GAIN_00			VCBUS_REG_ADDR(MCDI_REL_DET_GAIN_00)
+#define MCDI_REL_DET_GAIN_01			0x2f2a
+#define P_MCDI_REL_DET_GAIN_01			VCBUS_REG_ADDR(MCDI_REL_DET_GAIN_01)
+#define MCDI_REL_DET_GAIN_10			0x2f2b
+#define P_MCDI_REL_DET_GAIN_10			VCBUS_REG_ADDR(MCDI_REL_DET_GAIN_10)
+#define MCDI_REL_DET_GAIN_11			0x2f2c
+#define P_MCDI_REL_DET_GAIN_11			VCBUS_REG_ADDR(MCDI_REL_DET_GAIN_11)
+#define MCDI_REL_DET_GAIN_20			0x2f2d
+#define P_MCDI_REL_DET_GAIN_20			VCBUS_REG_ADDR(MCDI_REL_DET_GAIN_20)
+#define MCDI_REL_DET_GAIN_21			0x2f2e
+#define P_MCDI_REL_DET_GAIN_21			VCBUS_REG_ADDR(MCDI_REL_DET_GAIN_21)
+#define MCDI_REL_DET_GMV_DIF_CHK		0x2f2f
+#define P_MCDI_REL_DET_GMV_DIF_CHK		VCBUS_REG_ADDR(MCDI_REL_DET_GMV_DIF_CHK)
+#define MCDI_REL_DET_LMV_DIF_CHK		0x2f30
+#define P_MCDI_REL_DET_LMV_DIF_CHK		VCBUS_REG_ADDR(MCDI_REL_DET_LMV_DIF_CHK)
+#define MCDI_REL_DET_FRQ_CHK			0x2f31
+#define P_MCDI_REL_DET_FRQ_CHK			VCBUS_REG_ADDR(MCDI_REL_DET_FRQ_CHK)
+#define MCDI_REL_DET_PD22_CHK			0x2f32
+#define P_MCDI_REL_DET_PD22_CHK			VCBUS_REG_ADDR(MCDI_REL_DET_PD22_CHK)
+#define MCDI_REL_DET_RPT_CHK_ROW		0x2f33
+#define P_MCDI_REL_DET_RPT_CHK_ROW		VCBUS_REG_ADDR(MCDI_REL_DET_RPT_CHK_ROW)
+#define MCDI_REL_DET_RPT_CHK_GAIN_QMV		0x2f34
+#define P_MCDI_REL_DET_RPT_CHK_GAIN_QMV		VCBUS_REG_ADDR(MCDI_REL_DET_RPT_CHK_GAIN_QMV)
+#define MCDI_REL_DET_RPT_CHK_THD_0		0x2f35
+#define P_MCDI_REL_DET_RPT_CHK_THD_0		VCBUS_REG_ADDR(MCDI_REL_DET_RPT_CHK_THD_0)
+#define MCDI_REL_DET_RPT_CHK_THD_1		0x2f36
+#define P_MCDI_REL_DET_RPT_CHK_THD_1		VCBUS_REG_ADDR(MCDI_REL_DET_RPT_CHK_THD_1)
+#define MCDI_REL_DET_LPF_DIF_THD		0x2f37
+#define P_MCDI_REL_DET_LPF_DIF_THD		VCBUS_REG_ADDR(MCDI_REL_DET_LPF_DIF_THD)
+#define MCDI_REL_DET_LPF_MSK_00_03		0x2f38
+#define P_MCDI_REL_DET_LPF_MSK_00_03		VCBUS_REG_ADDR(MCDI_REL_DET_LPF_MSK_00_03)
+#define MCDI_REL_DET_LPF_MSK_04_12		0x2f39
+#define P_MCDI_REL_DET_LPF_MSK_04_12		VCBUS_REG_ADDR(MCDI_REL_DET_LPF_MSK_04_12)
+#define MCDI_REL_DET_LPF_MSK_13_21		0x2f3a
+#define P_MCDI_REL_DET_LPF_MSK_13_21		VCBUS_REG_ADDR(MCDI_REL_DET_LPF_MSK_13_21)
+#define MCDI_REL_DET_LPF_MSK_22_30		0x2f3b
+#define P_MCDI_REL_DET_LPF_MSK_22_30		VCBUS_REG_ADDR(MCDI_REL_DET_LPF_MSK_22_30)
+#define MCDI_REL_DET_LPF_MSK_31_34		0x2f3c
+#define P_MCDI_REL_DET_LPF_MSK_31_34		VCBUS_REG_ADDR(MCDI_REL_DET_LPF_MSK_31_34)
+#define MCDI_REL_DET_MIN			0x2f3d
+#define P_MCDI_REL_DET_MIN			VCBUS_REG_ADDR(MCDI_REL_DET_MIN)
+#define MCDI_REL_DET_LUT_0_3			0x2f3e
+#define P_MCDI_REL_DET_LUT_0_3			VCBUS_REG_ADDR(MCDI_REL_DET_LUT_0_3)
+#define MCDI_REL_DET_LUT_4_7			0x2f3f
+#define P_MCDI_REL_DET_LUT_4_7			VCBUS_REG_ADDR(MCDI_REL_DET_LUT_4_7)
+#define MCDI_REL_DET_LUT_8_11			0x2f40
+#define P_MCDI_REL_DET_LUT_8_11			VCBUS_REG_ADDR(MCDI_REL_DET_LUT_8_11)
+#define MCDI_REL_DET_LUT_12_15			0x2f41
+#define P_MCDI_REL_DET_LUT_12_15		VCBUS_REG_ADDR(MCDI_REL_DET_LUT_12_15)
+#define MCDI_REL_DET_COL_CFD_THD		0x2f42
+#define P_MCDI_REL_DET_COL_CFD_THD		VCBUS_REG_ADDR(MCDI_REL_DET_COL_CFD_THD)
+#define MCDI_REL_DET_COL_CFD_AVG_LUMA		0x2f43
+#define P_MCDI_REL_DET_COL_CFD_AVG_LUMA		VCBUS_REG_ADDR(MCDI_REL_DET_COL_CFD_AVG_LUMA)
+#define MCDI_REL_DET_BAD_THD_0			0x2f44
+#define P_MCDI_REL_DET_BAD_THD_0		VCBUS_REG_ADDR(MCDI_REL_DET_BAD_THD_0)
+#define MCDI_REL_DET_BAD_THD_1			0x2f45
+#define P_MCDI_REL_DET_BAD_THD_1		VCBUS_REG_ADDR(MCDI_REL_DET_BAD_THD_1)
+#define MCDI_PD22_CHK_THD			0x2f46
+#define P_MCDI_PD22_CHK_THD			VCBUS_REG_ADDR(MCDI_PD22_CHK_THD)
+#define MCDI_PD22_CHK_GAIN_OFFST_0		0x2f47
+#define P_MCDI_PD22_CHK_GAIN_OFFST_0		VCBUS_REG_ADDR(MCDI_PD22_CHK_GAIN_OFFST_0)
+#define MCDI_PD22_CHK_GAIN_OFFST_1		0x2f48
+#define P_MCDI_PD22_CHK_GAIN_OFFST_1		VCBUS_REG_ADDR(MCDI_PD22_CHK_GAIN_OFFST_1)
+#define MCDI_LMV_LOCK_CNT_THD_GAIN		0x2f49
+#define P_MCDI_LMV_LOCK_CNT_THD_GAIN		VCBUS_REG_ADDR(MCDI_LMV_LOCK_CNT_THD_GAIN)
+#define MCDI_LMV_LOCK_ABS_DIF_THD		0x2f4a
+#define P_MCDI_LMV_LOCK_ABS_DIF_THD		VCBUS_REG_ADDR(MCDI_LMV_LOCK_ABS_DIF_THD)
+#define MCDI_LMV_LOCK_ROW			0x2f4b
+#define P_MCDI_LMV_LOCK_ROW			VCBUS_REG_ADDR(MCDI_LMV_LOCK_ROW)
+#define MCDI_LMV_LOCK_RT_MODE			0x2f4c
+#define P_MCDI_LMV_LOCK_RT_MODE			VCBUS_REG_ADDR(MCDI_LMV_LOCK_RT_MODE)
+#define MCDI_GMV_LOCK_CNT_THD_GAIN		0x2f4d
+#define P_MCDI_GMV_LOCK_CNT_THD_GAIN		VCBUS_REG_ADDR(MCDI_GMV_LOCK_CNT_THD_GAIN)
+#define MCDI_GMV_LOCK_ABS_DIF_THD		0x2f4e
+#define P_MCDI_GMV_LOCK_ABS_DIF_THD		VCBUS_REG_ADDR(MCDI_GMV_LOCK_ABS_DIF_THD)
+#define MCDI_HIGH_VERT_FRQ_DIF_THD		0x2f4f
+#define P_MCDI_HIGH_VERT_FRQ_DIF_THD		VCBUS_REG_ADDR(MCDI_HIGH_VERT_FRQ_DIF_THD)
+#define MCDI_HIGH_VERT_FRQ_DIF_DIF_THD		0x2f50
+#define P_MCDI_HIGH_VERT_FRQ_DIF_DIF_THD	VCBUS_REG_ADDR(MCDI_HIGH_VERT_FRQ_DIF_DIF_THD)
+#define MCDI_HIGH_VERT_FRQ_RT_GAIN		0x2f51
+#define P_MCDI_HIGH_VERT_FRQ_RT_GAIN		VCBUS_REG_ADDR(MCDI_HIGH_VERT_FRQ_RT_GAIN)
+#define MCDI_MOTION_PARADOX_THD			0x2f52
+#define P_MCDI_MOTION_PARADOX_THD		VCBUS_REG_ADDR(MCDI_MOTION_PARADOX_THD)
+#define MCDI_MOTION_PARADOX_RT			0x2f53
+#define P_MCDI_MOTION_PARADOX_RT		VCBUS_REG_ADDR(MCDI_MOTION_PARADOX_RT)
+#define MCDI_MOTION_REF_THD			0x2f54
+#define P_MCDI_MOTION_REF_THD			VCBUS_REG_ADDR(MCDI_MOTION_REF_THD)
+#define MCDI_REL_COL_REF_RT			0x2f55
+#define P_MCDI_REL_COL_REF_RT			VCBUS_REG_ADDR(MCDI_REL_COL_REF_RT)
+#define MCDI_PD22_CHK_THD_RT			0x2f56
+#define P_MCDI_PD22_CHK_THD_RT			VCBUS_REG_ADDR(MCDI_PD22_CHK_THD_RT)
+#define MCDI_CHAR_DET_DIF_THD			0x2f57
+#define P_MCDI_CHAR_DET_DIF_THD			VCBUS_REG_ADDR(MCDI_CHAR_DET_DIF_THD)
+#define MCDI_CHAR_DET_CNT_THD			0x2f58
+#define P_MCDI_CHAR_DET_CNT_THD			VCBUS_REG_ADDR(MCDI_CHAR_DET_CNT_THD)
+#define MCDI_FIELD_MV				0x2f60
+#define P_MCDI_FIELD_MV				VCBUS_REG_ADDR(MCDI_FIELD_MV)
+#define MCDI_FIELD_HVF_PRDX_CNT			0x2f61
+#define P_MCDI_FIELD_HVF_PRDX_CNT		VCBUS_REG_ADDR(MCDI_FIELD_HVF_PRDX_CNT)
+#define MCDI_FIELD_LUMA_AVG_SUM_0		0x2f62
+#define P_MCDI_FIELD_LUMA_AVG_SUM_0		VCBUS_REG_ADDR(MCDI_FIELD_LUMA_AVG_SUM_0)
+#define MCDI_FIELD_LUMA_AVG_SUM_1		0x2f63
+#define P_MCDI_FIELD_LUMA_AVG_SUM_1		VCBUS_REG_ADDR(MCDI_FIELD_LUMA_AVG_SUM_1)
+#define MCDI_YCBCR_BLEND_CRTL			0x2f64
+#define P_MCDI_YCBCR_BLEND_CRTL			VCBUS_REG_ADDR(MCDI_YCBCR_BLEND_CRTL)
+#define MCDI_MCVECWR_CANVAS_SIZE		0x2f65
+#define P_MCDI_MCVECWR_CANVAS_SIZE		VCBUS_REG_ADDR(MCDI_MCVECWR_CANVAS_SIZE)
+#define MCDI_MCVECRD_CANVAS_SIZE		0x2f66
+#define P_MCDI_MCVECRD_CANVAS_SIZE		VCBUS_REG_ADDR(MCDI_MCVECRD_CANVAS_SIZE)
+#define MCDI_MCINFOWR_CANVAS_SIZE		0x2f67
+#define P_MCDI_MCINFOWR_CANVAS_SIZE		VCBUS_REG_ADDR(MCDI_MCINFOWR_CANVAS_SIZE)
+#define MCDI_MCINFORD_CANVAS_SIZE		0x2f68
+#define P_MCDI_MCINFORD_CANVAS_SIZE		VCBUS_REG_ADDR(MCDI_MCINFORD_CANVAS_SIZE)
+#define MCDI_MCVECWR_X				0x2f92
+#define P_MCDI_MCVECWR_X			VCBUS_REG_ADDR(MCDI_MCVECWR_X)
+#define MCDI_MCVECWR_Y				0x2f93
+#define P_MCDI_MCVECWR_Y			VCBUS_REG_ADDR(MCDI_MCVECWR_Y)
+#define MCDI_MCVECWR_CTRL			0x2f94
+#define P_MCDI_MCVECWR_CTRL			VCBUS_REG_ADDR(MCDI_MCVECWR_CTRL)
+#define MCDI_MCVECRD_X				0x2f95
+#define P_MCDI_MCVECRD_X			VCBUS_REG_ADDR(MCDI_MCVECRD_X)
+#define MCDI_MCVECRD_Y				0x2f96
+#define P_MCDI_MCVECRD_Y			VCBUS_REG_ADDR(MCDI_MCVECRD_Y)
+#define MCDI_MCVECRD_CTRL			0x2f97
+#define P_MCDI_MCVECRD_CTRL			VCBUS_REG_ADDR(MCDI_MCVECRD_CTRL)
+#define MCDI_MCINFOWR_X				0x2f98
+#define P_MCDI_MCINFOWR_X			VCBUS_REG_ADDR(MCDI_MCINFOWR_X)
+#define MCDI_MCINFOWR_Y				0x2f99
+#define P_MCDI_MCINFOWR_Y			VCBUS_REG_ADDR(MCDI_MCINFOWR_Y)
+#define MCDI_MCINFOWR_CTRL			0x2f9a
+#define P_MCDI_MCINFOWR_CTRL			VCBUS_REG_ADDR(MCDI_MCINFOWR_CTRL)
+#define MCDI_MCINFORD_X				0x2f9b
+#define P_MCDI_MCINFORD_X			VCBUS_REG_ADDR(MCDI_MCINFORD_X)
+#define MCDI_MCINFORD_Y				0x2f9c
+#define P_MCDI_MCINFORD_Y			VCBUS_REG_ADDR(MCDI_MCINFORD_Y)
+#define MCDI_MCINFORD_CTRL			0x2f9d
+#define P_MCDI_MCINFORD_CTRL			VCBUS_REG_ADDR(MCDI_MCINFORD_CTRL)
+#define MCDI_MC_CRTL				0x2f70
+#define P_MCDI_MC_CRTL				VCBUS_REG_ADDR(MCDI_MC_CRTL)
+#define MCDI_MC_LPF_MSK_0			0x2f71
+#define P_MCDI_MC_LPF_MSK_0			VCBUS_REG_ADDR(MCDI_MC_LPF_MSK_0)
+#define MCDI_MC_LPF_MSK_1			0x2f72
+#define P_MCDI_MC_LPF_MSK_1			VCBUS_REG_ADDR(MCDI_MC_LPF_MSK_1)
+#define MCDI_MC_LPF_MSK_2			0x2f73
+#define P_MCDI_MC_LPF_MSK_2			VCBUS_REG_ADDR(MCDI_MC_LPF_MSK_2)
+#define MCDI_MC_LPF_MSK_3			0x2f74
+#define P_MCDI_MC_LPF_MSK_3			VCBUS_REG_ADDR(MCDI_MC_LPF_MSK_3)
+#define MCDI_MC_LPF_MSK_4			0x2f75
+#define P_MCDI_MC_LPF_MSK_4			VCBUS_REG_ADDR(MCDI_MC_LPF_MSK_4)
+#define MCDI_MC_REL_GAIN_OFFST_0		0x2f76
+#define P_MCDI_MC_REL_GAIN_OFFST_0		VCBUS_REG_ADDR(MCDI_MC_REL_GAIN_OFFST_0)
+#define MCDI_MC_REL_GAIN_OFFST_1		0x2f77
+#define P_MCDI_MC_REL_GAIN_OFFST_1		VCBUS_REG_ADDR(MCDI_MC_REL_GAIN_OFFST_1)
+#define MCDI_MC_COL_CFD_0			0x2f78
+#define P_MCDI_MC_COL_CFD_0			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_0)
+#define MCDI_MC_COL_CFD_1			0x2f79
+#define P_MCDI_MC_COL_CFD_1			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_1)
+#define MCDI_MC_COL_CFD_2			0x2f7a
+#define P_MCDI_MC_COL_CFD_2			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_2)
+#define MCDI_MC_COL_CFD_3			0x2f7b
+#define P_MCDI_MC_COL_CFD_3			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_3)
+#define MCDI_MC_COL_CFD_4			0x2f7c
+#define P_MCDI_MC_COL_CFD_4			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_4)
+#define MCDI_MC_COL_CFD_5			0x2f7d
+#define P_MCDI_MC_COL_CFD_5			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_5)
+#define MCDI_MC_COL_CFD_6			0x2f7e
+#define P_MCDI_MC_COL_CFD_6			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_6)
+#define MCDI_MC_COL_CFD_7			0x2f7f
+#define P_MCDI_MC_COL_CFD_7			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_7)
+#define MCDI_MC_COL_CFD_8			0x2f80
+#define P_MCDI_MC_COL_CFD_8			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_8)
+#define MCDI_MC_COL_CFD_9			0x2f81
+#define P_MCDI_MC_COL_CFD_9			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_9)
+#define MCDI_MC_COL_CFD_10			0x2f82
+#define P_MCDI_MC_COL_CFD_10			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_10)
+#define MCDI_MC_COL_CFD_11			0x2f83
+#define P_MCDI_MC_COL_CFD_11			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_11)
+#define MCDI_MC_COL_CFD_12			0x2f84
+#define P_MCDI_MC_COL_CFD_12			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_12)
+#define MCDI_MC_COL_CFD_13			0x2f85
+#define P_MCDI_MC_COL_CFD_13			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_13)
+#define MCDI_MC_COL_CFD_14			0x2f86
+#define P_MCDI_MC_COL_CFD_14			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_14)
+#define MCDI_MC_COL_CFD_15			0x2f87
+#define P_MCDI_MC_COL_CFD_15			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_15)
+#define MCDI_MC_COL_CFD_16			0x2f88
+#define P_MCDI_MC_COL_CFD_16			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_16)
+#define MCDI_MC_COL_CFD_17			0x2f89
+#define P_MCDI_MC_COL_CFD_17			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_17)
+#define MCDI_MC_COL_CFD_18			0x2f8a
+#define P_MCDI_MC_COL_CFD_18			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_18)
+#define MCDI_MC_COL_CFD_19			0x2f8b
+#define P_MCDI_MC_COL_CFD_19			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_19)
+#define MCDI_MC_COL_CFD_20			0x2f8c
+#define P_MCDI_MC_COL_CFD_20			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_20)
+#define MCDI_MC_COL_CFD_21			0x2f8d
+#define P_MCDI_MC_COL_CFD_21			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_21)
+#define MCDI_MC_COL_CFD_22			0x2f8e
+#define P_MCDI_MC_COL_CFD_22			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_22)
+#define MCDI_MC_COL_CFD_23			0x2f8f
+#define P_MCDI_MC_COL_CFD_23			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_23)
+#define MCDI_MC_COL_CFD_24			0x2f90
+#define P_MCDI_MC_COL_CFD_24			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_24)
+#define MCDI_MC_COL_CFD_25			0x2f91
+#define P_MCDI_MC_COL_CFD_25			VCBUS_REG_ADDR(MCDI_MC_COL_CFD_25)
+#define MCDI_RO_FLD_LUMA_AVG_SUM		0x2fa0
+#define P_MCDI_RO_FLD_LUMA_AVG_SUM		VCBUS_REG_ADDR(MCDI_RO_FLD_LUMA_AVG_SUM)
+#define MCDI_RO_GMV_VLD_CNT			0x2fa1
+#define P_MCDI_RO_GMV_VLD_CNT			VCBUS_REG_ADDR(MCDI_RO_GMV_VLD_CNT)
+#define MCDI_RO_RPT_FLG_CNT			0x2fa2
+#define P_MCDI_RO_RPT_FLG_CNT			VCBUS_REG_ADDR(MCDI_RO_RPT_FLG_CNT)
+#define MCDI_RO_FLD_BAD_SAD_CNT			0x2fa3
+#define P_MCDI_RO_FLD_BAD_SAD_CNT		VCBUS_REG_ADDR(MCDI_RO_FLD_BAD_SAD_CNT)
+#define MCDI_RO_FLD_BAD_BADW_CNT		0x2fa4
+#define P_MCDI_RO_FLD_BAD_BADW_CNT		VCBUS_REG_ADDR(MCDI_RO_FLD_BAD_BADW_CNT)
+#define MCDI_RO_FLD_BAD_REL_CNT			0x2fa5
+#define P_MCDI_RO_FLD_BAD_REL_CNT		VCBUS_REG_ADDR(MCDI_RO_FLD_BAD_REL_CNT)
+#define MCDI_RO_FLD_MTN_CNT			0x2fa6
+#define P_MCDI_RO_FLD_MTN_CNT			VCBUS_REG_ADDR(MCDI_RO_FLD_MTN_CNT)
+#define MCDI_RO_FLD_VLD_CNT			0x2fa7
+#define P_MCDI_RO_FLD_VLD_CNT			VCBUS_REG_ADDR(MCDI_RO_FLD_VLD_CNT)
+#define MCDI_RO_FLD_PD_22_PRE_CNT		0x2fa8
+#define P_MCDI_RO_FLD_PD_22_PRE_CNT		VCBUS_REG_ADDR(MCDI_RO_FLD_PD_22_PRE_CNT)
+#define MCDI_RO_FLD_PD_22_FOR_CNT		0x2fa9
+#define P_MCDI_RO_FLD_PD_22_FOR_CNT		VCBUS_REG_ADDR(MCDI_RO_FLD_PD_22_FOR_CNT)
+#define MCDI_RO_FLD_PD_22_FLT_CNT		0x2faa
+#define P_MCDI_RO_FLD_PD_22_FLT_CNT		VCBUS_REG_ADDR(MCDI_RO_FLD_PD_22_FLT_CNT)
+#define MCDI_RO_HIGH_VERT_FRQ_FLG		0x2fab
+#define P_MCDI_RO_HIGH_VERT_FRQ_FLG		VCBUS_REG_ADDR(MCDI_RO_HIGH_VERT_FRQ_FLG)
+#define MCDI_RO_GMV_LOCK_FLG			0x2fac
+#define P_MCDI_RO_GMV_LOCK_FLG			VCBUS_REG_ADDR(MCDI_RO_GMV_LOCK_FLG)
+#define MCDI_RO_RPT_MV				0x2fad
+#define P_MCDI_RO_RPT_MV			VCBUS_REG_ADDR(MCDI_RO_RPT_MV)
+#define MCDI_RO_MOTION_PARADOX_FLG		0x2fae
+#define P_MCDI_RO_MOTION_PARADOX_FLG		VCBUS_REG_ADDR(MCDI_RO_MOTION_PARADOX_FLG)
+#define MCDI_RO_PD_22_FLG			0x2faf
+#define P_MCDI_RO_PD_22_FLG			VCBUS_REG_ADDR(MCDI_RO_PD_22_FLG)
+#define MCDI_RO_COL_CFD_0			0x2fb0
+#define P_MCDI_RO_COL_CFD_0			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_0)
+#define MCDI_RO_COL_CFD_1			0x2fb1
+#define P_MCDI_RO_COL_CFD_1			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_1)
+#define MCDI_RO_COL_CFD_2			0x2fb2
+#define P_MCDI_RO_COL_CFD_2			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_2)
+#define MCDI_RO_COL_CFD_3			0x2fb3
+#define P_MCDI_RO_COL_CFD_3			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_3)
+#define MCDI_RO_COL_CFD_4			0x2fb4
+#define P_MCDI_RO_COL_CFD_4			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_4)
+#define MCDI_RO_COL_CFD_5			0x2fb5
+#define P_MCDI_RO_COL_CFD_5			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_5)
+#define MCDI_RO_COL_CFD_6			0x2fb6
+#define P_MCDI_RO_COL_CFD_6			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_6)
+#define MCDI_RO_COL_CFD_7			0x2fb7
+#define P_MCDI_RO_COL_CFD_7			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_7)
+#define MCDI_RO_COL_CFD_8			0x2fb8
+#define P_MCDI_RO_COL_CFD_8			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_8)
+#define MCDI_RO_COL_CFD_9			0x2fb9
+#define P_MCDI_RO_COL_CFD_9			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_9)
+#define MCDI_RO_COL_CFD_10			0x2fba
+#define P_MCDI_RO_COL_CFD_10			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_10)
+#define MCDI_RO_COL_CFD_11			0x2fbb
+#define P_MCDI_RO_COL_CFD_11			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_11)
+#define MCDI_RO_COL_CFD_12			0x2fbc
+#define P_MCDI_RO_COL_CFD_12			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_12)
+#define MCDI_RO_COL_CFD_13			0x2fbd
+#define P_MCDI_RO_COL_CFD_13			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_13)
+#define MCDI_RO_COL_CFD_14			0x2fbe
+#define P_MCDI_RO_COL_CFD_14			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_14)
+#define MCDI_RO_COL_CFD_15			0x2fbf
+#define P_MCDI_RO_COL_CFD_15			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_15)
+#define MCDI_RO_COL_CFD_16			0x2fc0
+#define P_MCDI_RO_COL_CFD_16			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_16)
+#define MCDI_RO_COL_CFD_17			0x2fc1
+#define P_MCDI_RO_COL_CFD_17			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_17)
+#define MCDI_RO_COL_CFD_18			0x2fc2
+#define P_MCDI_RO_COL_CFD_18			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_18)
+#define MCDI_RO_COL_CFD_19			0x2fc3
+#define P_MCDI_RO_COL_CFD_19			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_19)
+#define MCDI_RO_COL_CFD_20			0x2fc4
+#define P_MCDI_RO_COL_CFD_20			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_20)
+#define MCDI_RO_COL_CFD_21			0x2fc5
+#define P_MCDI_RO_COL_CFD_21			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_21)
+#define MCDI_RO_COL_CFD_22			0x2fc6
+#define P_MCDI_RO_COL_CFD_22			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_22)
+#define MCDI_RO_COL_CFD_23			0x2fc7
+#define P_MCDI_RO_COL_CFD_23			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_23)
+#define MCDI_RO_COL_CFD_24			0x2fc8
+#define P_MCDI_RO_COL_CFD_24			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_24)
+#define MCDI_RO_COL_CFD_25			0x2fc9
+#define P_MCDI_RO_COL_CFD_25			VCBUS_REG_ADDR(MCDI_RO_COL_CFD_25)
+#define DIPD_COMB_CTRL0				0x2fd0
+#define P_DIPD_COMB_CTRL0			VCBUS_REG_ADDR(DIPD_COMB_CTRL0)
+#define DIPD_COMB_CTRL1				0x2fd1
+#define P_DIPD_COMB_CTRL1			VCBUS_REG_ADDR(DIPD_COMB_CTRL1)
+#define DIPD_COMB_CTRL2				0x2fd2
+#define P_DIPD_COMB_CTRL2			VCBUS_REG_ADDR(DIPD_COMB_CTRL2)
+#define DIPD_COMB_CTRL3				0x2fd3
+#define P_DIPD_COMB_CTRL3			VCBUS_REG_ADDR(DIPD_COMB_CTRL3)
+#define DIPD_COMB_CTRL4				0x2fd4
+#define P_DIPD_COMB_CTRL4			VCBUS_REG_ADDR(DIPD_COMB_CTRL4)
+#define DIPD_COMB_CTRL5				0x2fd5
+#define P_DIPD_COMB_CTRL5			VCBUS_REG_ADDR(DIPD_COMB_CTRL5)
+#define DIPD_RO_COMB_0				0x2fd6
+#define P_DIPD_RO_COMB_0			VCBUS_REG_ADDR(DIPD_RO_COMB_0)
+#define DIPD_RO_COMB_1				0x2fd7
+#define P_DIPD_RO_COMB_1			VCBUS_REG_ADDR(DIPD_RO_COMB_1)
+#define DIPD_RO_COMB_2				0x2fd8
+#define P_DIPD_RO_COMB_2			VCBUS_REG_ADDR(DIPD_RO_COMB_2)
+#define DIPD_RO_COMB_3				0x2fd9
+#define P_DIPD_RO_COMB_3			VCBUS_REG_ADDR(DIPD_RO_COMB_3)
+#define DIPD_RO_COMB_4				0x2fda
+#define P_DIPD_RO_COMB_4			VCBUS_REG_ADDR(DIPD_RO_COMB_4)
+#define DIPD_RO_COMB_5				0x2fdb
+#define P_DIPD_RO_COMB_5			VCBUS_REG_ADDR(DIPD_RO_COMB_5)
+#define DIPD_RO_COMB_6				0x2fdc
+#define P_DIPD_RO_COMB_6			VCBUS_REG_ADDR(DIPD_RO_COMB_6)
+#define DIPD_RO_COMB_7				0x2fdd
+#define P_DIPD_RO_COMB_7			VCBUS_REG_ADDR(DIPD_RO_COMB_7)
+#define DIPD_RO_COMB_8				0x2fde
+#define P_DIPD_RO_COMB_8			VCBUS_REG_ADDR(DIPD_RO_COMB_8)
+#define DIPD_RO_COMB_9				0x2fdf
+#define P_DIPD_RO_COMB_9			VCBUS_REG_ADDR(DIPD_RO_COMB_9)
+#define DIPD_RO_COMB_10				0x2fe0
+#define P_DIPD_RO_COMB_10			VCBUS_REG_ADDR(DIPD_RO_COMB_10)
+#define DIPD_RO_COMB_11				0x2fe1
+#define P_DIPD_RO_COMB_11			VCBUS_REG_ADDR(DIPD_RO_COMB_11)
+#define DIPD_RO_COMB_12				0x2fe2
+#define P_DIPD_RO_COMB_12			VCBUS_REG_ADDR(DIPD_RO_COMB_12)
+#define DIPD_RO_COMB_13				0x2fe3
+#define P_DIPD_RO_COMB_13			VCBUS_REG_ADDR(DIPD_RO_COMB_13)
+#define DIPD_RO_COMB_14				0x2fe4
+#define P_DIPD_RO_COMB_14			VCBUS_REG_ADDR(DIPD_RO_COMB_14)
+#define DIPD_RO_COMB_15				0x2fe5
+#define P_DIPD_RO_COMB_15			VCBUS_REG_ADDR(DIPD_RO_COMB_15)
+#define DIPD_RO_COMB_16				0x2fe6
+#define P_DIPD_RO_COMB_16			VCBUS_REG_ADDR(DIPD_RO_COMB_16)
+#define DIPD_RO_COMB_17				0x2fe7
+#define P_DIPD_RO_COMB_17			VCBUS_REG_ADDR(DIPD_RO_COMB_17)
+#define DIPD_RO_COMB_18				0x2fe8
+#define P_DIPD_RO_COMB_18			VCBUS_REG_ADDR(DIPD_RO_COMB_18)
+#define DIPD_RO_COMB_19				0x2fe9
+#define P_DIPD_RO_COMB_19			VCBUS_REG_ADDR(DIPD_RO_COMB_19)
+#define DIPD_RO_COMB_20				0x2fea
+#define P_DIPD_RO_COMB_20			VCBUS_REG_ADDR(DIPD_RO_COMB_20)
+#define NR3_MODE				0xfef0
+#define P_NR3_MODE				VCBUS_REG_ADDR(NR3_MODE)
+#define NR3_COOP_PARA				0xfef1
+#define P_NR3_COOP_PARA				VCBUS_REG_ADDR(NR3_COOP_PARA)
+#define NR3_CNOOP_GAIN				0xfef2
+#define P_NR3_CNOOP_GAIN			VCBUS_REG_ADDR(NR3_CNOOP_GAIN)
+#define NR3_YMOT_PARA				0xfef3
+#define P_NR3_YMOT_PARA				VCBUS_REG_ADDR(NR3_YMOT_PARA)
+#define NR3_CMOT_PARA				0xfef4
+#define P_NR3_CMOT_PARA				VCBUS_REG_ADDR(NR3_CMOT_PARA)
+#define NR3_SUREMOT_YGAIN			0xfef5
+#define P_NR3_SUREMOT_YGAIN			VCBUS_REG_ADDR(NR3_SUREMOT_YGAIN)
+#define NR3_SUREMOT_CGAIN			0xfef6
+#define P_NR3_SUREMOT_CGAIN			VCBUS_REG_ADDR(NR3_SUREMOT_CGAIN)
+#define VPU_VLOCK_CTRL				0x3000
+#define P_VPU_VLOCK_CTRL			VCBUS_REG_ADDR(VPU_VLOCK_CTRL)
+#define VPU_VLOCK_MISC_CTRL			0x3001
+#define P_VPU_VLOCK_MISC_CTRL			VCBUS_REG_ADDR(VPU_VLOCK_MISC_CTRL)
+#define VPU_VLOCK_LOOP0_ACCUM_LMT		0x3002
+#define P_VPU_VLOCK_LOOP0_ACCUM_LMT		VCBUS_REG_ADDR(VPU_VLOCK_LOOP0_ACCUM_LMT)
+#define VPU_VLOCK_LOOP0_CTRL0			0x3003
+#define P_VPU_VLOCK_LOOP0_CTRL0			VCBUS_REG_ADDR(VPU_VLOCK_LOOP0_CTRL0)
+#define VPU_VLOCK_LOOP1_CTRL0			0x3004
+#define P_VPU_VLOCK_LOOP1_CTRL0			VCBUS_REG_ADDR(VPU_VLOCK_LOOP1_CTRL0)
+#define VPU_VLOCK_LOOP1_IMISSYNC_MAX		0x3005
+#define P_VPU_VLOCK_LOOP1_IMISSYNC_MAX		VCBUS_REG_ADDR(VPU_VLOCK_LOOP1_IMISSYNC_MAX)
+#define VPU_VLOCK_LOOP1_IMISSYNC_MIN		0x3006
+#define P_VPU_VLOCK_LOOP1_IMISSYNC_MIN		VCBUS_REG_ADDR(VPU_VLOCK_LOOP1_IMISSYNC_MIN)
+#define VPU_VLOCK_OVWRITE_ACCUM0		0x3007
+#define P_VPU_VLOCK_OVWRITE_ACCUM0		VCBUS_REG_ADDR(VPU_VLOCK_OVWRITE_ACCUM0)
+#define VPU_VLOCK_OVWRITE_ACCUM1		0x3008
+#define P_VPU_VLOCK_OVWRITE_ACCUM1		VCBUS_REG_ADDR(VPU_VLOCK_OVWRITE_ACCUM1)
+#define VPU_VLOCK_OUTPUT0_CAPT_LMT		0x3009
+#define P_VPU_VLOCK_OUTPUT0_CAPT_LMT		VCBUS_REG_ADDR(VPU_VLOCK_OUTPUT0_CAPT_LMT)
+#define VPU_VLOCK_OUTPUT0_PLL_LMT		0x300a
+#define P_VPU_VLOCK_OUTPUT0_PLL_LMT		VCBUS_REG_ADDR(VPU_VLOCK_OUTPUT0_PLL_LMT)
+#define VPU_VLOCK_OUTPUT1_CAPT_LMT		0x300b
+#define P_VPU_VLOCK_OUTPUT1_CAPT_LMT		VCBUS_REG_ADDR(VPU_VLOCK_OUTPUT1_CAPT_LMT)
+#define VPU_VLOCK_OUTPUT1_PLL_LMT		0x300c
+#define P_VPU_VLOCK_OUTPUT1_PLL_LMT		VCBUS_REG_ADDR(VPU_VLOCK_OUTPUT1_PLL_LMT)
+#define VPU_VLOCK_LOOP1_PHSDIF_TGT		0x300d
+#define P_VPU_VLOCK_LOOP1_PHSDIF_TGT		VCBUS_REG_ADDR(VPU_VLOCK_LOOP1_PHSDIF_TGT)
+#define VPU_VLOCK_RO_LOOP0_ACCUM		0x300e
+#define P_VPU_VLOCK_RO_LOOP0_ACCUM		VCBUS_REG_ADDR(VPU_VLOCK_RO_LOOP0_ACCUM)
+#define VPU_VLOCK_RO_LOOP1_ACCUM		0x300f
+#define P_VPU_VLOCK_RO_LOOP1_ACCUM		VCBUS_REG_ADDR(VPU_VLOCK_RO_LOOP1_ACCUM)
+#define VPU_VLOCK_OROW_OCOL_MAX			0x3010
+#define P_VPU_VLOCK_OROW_OCOL_MAX		VCBUS_REG_ADDR(VPU_VLOCK_OROW_OCOL_MAX)
+#define VPU_VLOCK_RO_VS_I_DIST			0x3011
+#define P_VPU_VLOCK_RO_VS_I_DIST		VCBUS_REG_ADDR(VPU_VLOCK_RO_VS_I_DIST)
+#define VPU_VLOCK_RO_VS_O_DIST			0x3012
+#define P_VPU_VLOCK_RO_VS_O_DIST		VCBUS_REG_ADDR(VPU_VLOCK_RO_VS_O_DIST)
+#define VPU_VLOCK_RO_LINE_PIX_ADJ		0x3013
+#define P_VPU_VLOCK_RO_LINE_PIX_ADJ		VCBUS_REG_ADDR(VPU_VLOCK_RO_LINE_PIX_ADJ)
+#define VPU_VLOCK_RO_OUTPUT_00_01		0x3014
+#define P_VPU_VLOCK_RO_OUTPUT_00_01		VCBUS_REG_ADDR(VPU_VLOCK_RO_OUTPUT_00_01)
+#define VPU_VLOCK_RO_OUTPUT_10_11		0x3015
+#define P_VPU_VLOCK_RO_OUTPUT_10_11		VCBUS_REG_ADDR(VPU_VLOCK_RO_OUTPUT_10_11)
+#define VPU_VLOCK_MX4096			0x3016
+#define P_VPU_VLOCK_MX4096			VCBUS_REG_ADDR(VPU_VLOCK_MX4096)
+#define VPU_VLOCK_STBDET_WIN0_WIN1		0x3017
+#define P_VPU_VLOCK_STBDET_WIN0_WIN1		VCBUS_REG_ADDR(VPU_VLOCK_STBDET_WIN0_WIN1)
+#define VPU_VLOCK_STBDET_CLP			0x3018
+#define P_VPU_VLOCK_STBDET_CLP			VCBUS_REG_ADDR(VPU_VLOCK_STBDET_CLP)
+#define VPU_VLOCK_STBDET_ABS_WIN0		0x3019
+#define P_VPU_VLOCK_STBDET_ABS_WIN0		VCBUS_REG_ADDR(VPU_VLOCK_STBDET_ABS_WIN0)
+#define VPU_VLOCK_STBDET_ABS_WIN1		0x301a
+#define P_VPU_VLOCK_STBDET_ABS_WIN1		VCBUS_REG_ADDR(VPU_VLOCK_STBDET_ABS_WIN1)
+#define VPU_VLOCK_STBDET_SGN_WIN0		0x301b
+#define P_VPU_VLOCK_STBDET_SGN_WIN0		VCBUS_REG_ADDR(VPU_VLOCK_STBDET_SGN_WIN0)
+#define VPU_VLOCK_STBDET_SGN_WIN1		0x301c
+#define P_VPU_VLOCK_STBDET_SGN_WIN1		VCBUS_REG_ADDR(VPU_VLOCK_STBDET_SGN_WIN1)
+#define VPU_VLOCK_ADJ_EN_SYNC_CTRL		0x301d
+#define P_VPU_VLOCK_ADJ_EN_SYNC_CTRL		VCBUS_REG_ADDR(VPU_VLOCK_ADJ_EN_SYNC_CTRL)
+#define VPU_VLOCK_GCLK_EN			0x301e
+#define P_VPU_VLOCK_GCLK_EN			VCBUS_REG_ADDR(VPU_VLOCK_GCLK_EN)
+#define VPU_VLOCK_LOOP1_ACCUM_LMT		0x301f
+#define P_VPU_VLOCK_LOOP1_ACCUM_LMT		VCBUS_REG_ADDR(VPU_VLOCK_LOOP1_ACCUM_LMT)
+#define VPU_VLOCK_RO_M_INT_FRAC			0x3020
+#define P_VPU_VLOCK_RO_M_INT_FRAC		VCBUS_REG_ADDR(VPU_VLOCK_RO_M_INT_FRAC)
+#define SRSCL0_HV_SIZEIN			0x3100
+#define P_SRSCL0_HV_SIZEIN			VCBUS_REG_ADDR(SRSCL0_HV_SIZEIN)
+#define SRSCL0_CTRL_MODE			0x3101
+#define P_SRSCL0_CTRL_MODE			VCBUS_REG_ADDR(SRSCL0_CTRL_MODE)
+#define SRSCL0_YBIC_HCOEF			0x3102
+#define P_SRSCL0_YBIC_HCOEF			VCBUS_REG_ADDR(SRSCL0_YBIC_HCOEF)
+#define SRSCL0_CBIC_HCOEF			0x3103
+#define P_SRSCL0_CBIC_HCOEF			VCBUS_REG_ADDR(SRSCL0_CBIC_HCOEF)
+#define SRSCL0_YBIC_VCOEF			0x3104
+#define P_SRSCL0_YBIC_VCOEF			VCBUS_REG_ADDR(SRSCL0_YBIC_VCOEF)
+#define SRSCL0_CBIC_VCOEF			0x3105
+#define P_SRSCL0_CBIC_VCOEF			VCBUS_REG_ADDR(SRSCL0_CBIC_VCOEF)
+#define SRSCL0_VAR_PARA				0x3106
+#define P_SRSCL0_VAR_PARA			VCBUS_REG_ADDR(SRSCL0_VAR_PARA)
+#define SRSCL0_CONST_PARA			0x3107
+#define P_SRSCL0_CONST_PARA			VCBUS_REG_ADDR(SRSCL0_CONST_PARA)
+#define SRSCL0_RKE_EXTWIN			0x3108
+#define P_SRSCL0_RKE_EXTWIN			VCBUS_REG_ADDR(SRSCL0_RKE_EXTWIN)
+#define SRSCL0_UK_GRAD2DDIAG_TH_RATE		0x3109
+#define P_SRSCL0_UK_GRAD2DDIAG_TH_RATE		VCBUS_REG_ADDR(SRSCL0_UK_GRAD2DDIAG_TH_RATE)
+#define SRSCL0_UK_GRAD2DDIAG_LIMIT		0x310a
+#define P_SRSCL0_UK_GRAD2DDIAG_LIMIT		VCBUS_REG_ADDR(SRSCL0_UK_GRAD2DDIAG_LIMIT)
+#define SRSCL0_UK_GRAD2DADJA_TH_RATE		0x310b
+#define P_SRSCL0_UK_GRAD2DADJA_TH_RATE		VCBUS_REG_ADDR(SRSCL0_UK_GRAD2DADJA_TH_RATE)
+#define SRSCL0_UK_GRAD2DADJA_LIMIT		0x310c
+#define P_SRSCL0_UK_GRAD2DADJA_LIMIT		VCBUS_REG_ADDR(SRSCL0_UK_GRAD2DADJA_LIMIT)
+#define SRSCL0_UK_BST_GAIN			0x310d
+#define P_SRSCL0_UK_BST_GAIN			VCBUS_REG_ADDR(SRSCL0_UK_BST_GAIN)
+#define SRSCL0_HVBLEND_TH			0x310e
+#define P_SRSCL0_HVBLEND_TH			VCBUS_REG_ADDR(SRSCL0_HVBLEND_TH)
+#define SRSCL0_DEMO_WIND_TB			0x310f
+#define P_SRSCL0_DEMO_WIND_TB			VCBUS_REG_ADDR(SRSCL0_DEMO_WIND_TB)
+#define SRSCL0_DEMO_WIND_LR			0x3110
+#define P_SRSCL0_DEMO_WIND_LR			VCBUS_REG_ADDR(SRSCL0_DEMO_WIND_LR)
+#define SRSCL0_INT_BLANK_NUM			0x3111
+#define P_SRSCL0_INT_BLANK_NUM			VCBUS_REG_ADDR(SRSCL0_INT_BLANK_NUM)
+#define SRSCL0_YBIC_HCOEF0			0x3112
+#define P_SRSCL0_YBIC_HCOEF0			VCBUS_REG_ADDR(SRSCL0_YBIC_HCOEF0)
+#define SRSCL0_CBIC_HCOEF0			0x3113
+#define P_SRSCL0_CBIC_HCOEF0			VCBUS_REG_ADDR(SRSCL0_CBIC_HCOEF0)
+#define SRSCL0_YBIC_VCOEF0			0x3114
+#define P_SRSCL0_YBIC_VCOEF0			VCBUS_REG_ADDR(SRSCL0_YBIC_VCOEF0)
+#define SRSCL0_CBIC_VCOEF0			0x3115
+#define P_SRSCL0_CBIC_VCOEF0			VCBUS_REG_ADDR(SRSCL0_CBIC_VCOEF0)
+#define SRSCL1_HV_SIZEIN			0x3118
+#define P_SRSCL1_HV_SIZEIN			VCBUS_REG_ADDR(SRSCL1_HV_SIZEIN)
+#define SRSCL1_CTRL_MODE			0x3119
+#define P_SRSCL1_CTRL_MODE			VCBUS_REG_ADDR(SRSCL1_CTRL_MODE)
+#define SRSCL1_YBIC_HCOEF			0x311a
+#define P_SRSCL1_YBIC_HCOEF			VCBUS_REG_ADDR(SRSCL1_YBIC_HCOEF)
+#define SRSCL1_CBIC_HCOEF			0x311b
+#define P_SRSCL1_CBIC_HCOEF			VCBUS_REG_ADDR(SRSCL1_CBIC_HCOEF)
+#define SRSCL1_YBIC_VCOEF			0x311c
+#define P_SRSCL1_YBIC_VCOEF			VCBUS_REG_ADDR(SRSCL1_YBIC_VCOEF)
+#define SRSCL1_CBIC_VCOEF			0x311d
+#define P_SRSCL1_CBIC_VCOEF			VCBUS_REG_ADDR(SRSCL1_CBIC_VCOEF)
+#define SRSCL1_VAR_PARA				0x311e
+#define P_SRSCL1_VAR_PARA			VCBUS_REG_ADDR(SRSCL1_VAR_PARA)
+#define SRSCL1_CONST_PARA			0x311f
+#define P_SRSCL1_CONST_PARA			VCBUS_REG_ADDR(SRSCL1_CONST_PARA)
+#define SRSCL1_RKE_EXTWIN			0x3120
+#define P_SRSCL1_RKE_EXTWIN			VCBUS_REG_ADDR(SRSCL1_RKE_EXTWIN)
+#define SRSCL1_UK_GRAD2DDIAG_TH_RATE		0x3121
+#define P_SRSCL1_UK_GRAD2DDIAG_TH_RATE		VCBUS_REG_ADDR(SRSCL1_UK_GRAD2DDIAG_TH_RATE)
+#define SRSCL1_UK_GRAD2DDIAG_LIMIT		0x3122
+#define P_SRSCL1_UK_GRAD2DDIAG_LIMIT		VCBUS_REG_ADDR(SRSCL1_UK_GRAD2DDIAG_LIMIT)
+#define SRSCL1_UK_GRAD2DADJA_TH_RATE		0x3123
+#define P_SRSCL1_UK_GRAD2DADJA_TH_RATE		VCBUS_REG_ADDR(SRSCL1_UK_GRAD2DADJA_TH_RATE)
+#define SRSCL1_UK_GRAD2DADJA_LIMIT		0x3124
+#define P_SRSCL1_UK_GRAD2DADJA_LIMIT		VCBUS_REG_ADDR(SRSCL1_UK_GRAD2DADJA_LIMIT)
+#define SRSCL1_UK_BST_GAIN			0x3125
+#define P_SRSCL1_UK_BST_GAIN			VCBUS_REG_ADDR(SRSCL1_UK_BST_GAIN)
+#define SRSCL1_HVBLEND_TH			0x3126
+#define P_SRSCL1_HVBLEND_TH			VCBUS_REG_ADDR(SRSCL1_HVBLEND_TH)
+#define SRSCL1_DEMO_WIND_TB			0x3127
+#define P_SRSCL1_DEMO_WIND_TB			VCBUS_REG_ADDR(SRSCL1_DEMO_WIND_TB)
+#define SRSCL1_DEMO_WIND_LR			0x3128
+#define P_SRSCL1_DEMO_WIND_LR			VCBUS_REG_ADDR(SRSCL1_DEMO_WIND_LR)
+#define SRSCL1_INT_BLANK_NUM			0x3129
+#define P_SRSCL1_INT_BLANK_NUM			VCBUS_REG_ADDR(SRSCL1_INT_BLANK_NUM)
+#define SRSCL_FRM_END_STAT			0x312a
+#define P_SRSCL_FRM_END_STAT			VCBUS_REG_ADDR(SRSCL_FRM_END_STAT)
+#define SRSCL1_YBIC_HCOEF0			0x312b
+#define P_SRSCL1_YBIC_HCOEF0			VCBUS_REG_ADDR(SRSCL1_YBIC_HCOEF0)
+#define SRSCL1_CBIC_HCOEF0			0x312c
+#define P_SRSCL1_CBIC_HCOEF0			VCBUS_REG_ADDR(SRSCL1_CBIC_HCOEF0)
+#define SRSCL1_YBIC_VCOEF0			0x312d
+#define P_SRSCL1_YBIC_VCOEF0			VCBUS_REG_ADDR(SRSCL1_YBIC_VCOEF0)
+#define SRSCL1_CBIC_VCOEF0			0x312e
+#define P_SRSCL1_CBIC_VCOEF0			VCBUS_REG_ADDR(SRSCL1_CBIC_VCOEF0)
+#define OSDSR_HV_SIZEIN				0x3130
+#define P_OSDSR_HV_SIZEIN			VCBUS_REG_ADDR(OSDSR_HV_SIZEIN)
+#define OSDSR_CTRL_MODE				0x3131
+#define P_OSDSR_CTRL_MODE			VCBUS_REG_ADDR(OSDSR_CTRL_MODE)
+#define OSDSR_ABIC_HCOEF			0x3132
+#define P_OSDSR_ABIC_HCOEF			VCBUS_REG_ADDR(OSDSR_ABIC_HCOEF)
+#define OSDSR_YBIC_HCOEF			0x3133
+#define P_OSDSR_YBIC_HCOEF			VCBUS_REG_ADDR(OSDSR_YBIC_HCOEF)
+#define OSDSR_CBIC_HCOEF			0x3134
+#define P_OSDSR_CBIC_HCOEF			VCBUS_REG_ADDR(OSDSR_CBIC_HCOEF)
+#define OSDSR_ABIC_VCOEF			0x3135
+#define P_OSDSR_ABIC_VCOEF			VCBUS_REG_ADDR(OSDSR_ABIC_VCOEF)
+#define OSDSR_YBIC_VCOEF			0x3136
+#define P_OSDSR_YBIC_VCOEF			VCBUS_REG_ADDR(OSDSR_YBIC_VCOEF)
+#define OSDSR_CBIC_VCOEF			0x3137
+#define P_OSDSR_CBIC_VCOEF			VCBUS_REG_ADDR(OSDSR_CBIC_VCOEF)
+#define OSDSR_VAR_PARA				0x3138
+#define P_OSDSR_VAR_PARA			VCBUS_REG_ADDR(OSDSR_VAR_PARA)
+#define OSDSR_CONST_PARA			0x3139
+#define P_OSDSR_CONST_PARA			VCBUS_REG_ADDR(OSDSR_CONST_PARA)
+#define OSDSR_RKE_EXTWIN			0x313a
+#define P_OSDSR_RKE_EXTWIN			VCBUS_REG_ADDR(OSDSR_RKE_EXTWIN)
+#define OSDSR_UK_GRAD2DDIAG_TH_RATE		0x313b
+#define P_OSDSR_UK_GRAD2DDIAG_TH_RATE		VCBUS_REG_ADDR(OSDSR_UK_GRAD2DDIAG_TH_RATE)
+#define OSDSR_UK_GRAD2DDIAG_LIMIT		0x313c
+#define P_OSDSR_UK_GRAD2DDIAG_LIMIT		VCBUS_REG_ADDR(OSDSR_UK_GRAD2DDIAG_LIMIT)
+#define OSDSR_UK_GRAD2DADJA_TH_RATE		0x313d
+#define P_OSDSR_UK_GRAD2DADJA_TH_RATE		VCBUS_REG_ADDR(OSDSR_UK_GRAD2DADJA_TH_RATE)
+#define OSDSR_UK_GRAD2DADJA_LIMIT		0x313e
+#define P_OSDSR_UK_GRAD2DADJA_LIMIT		VCBUS_REG_ADDR(OSDSR_UK_GRAD2DADJA_LIMIT)
+#define OSDSR_UK_BST_GAIN			0x313f
+#define P_OSDSR_UK_BST_GAIN			VCBUS_REG_ADDR(OSDSR_UK_BST_GAIN)
+#define OSDSR_HVBLEND_TH			0x3140
+#define P_OSDSR_HVBLEND_TH			VCBUS_REG_ADDR(OSDSR_HVBLEND_TH)
+#define OSDSR_DEMO_WIND_TB			0x3141
+#define P_OSDSR_DEMO_WIND_TB			VCBUS_REG_ADDR(OSDSR_DEMO_WIND_TB)
+#define OSDSR_DEMO_WIND_LR			0x3142
+#define P_OSDSR_DEMO_WIND_LR			VCBUS_REG_ADDR(OSDSR_DEMO_WIND_LR)
+#define OSDSR_INT_BLANK_NUM			0x3143
+#define P_OSDSR_INT_BLANK_NUM			VCBUS_REG_ADDR(OSDSR_INT_BLANK_NUM)
+#define OSDSR_FRM_END_STAT			0x3144
+#define P_OSDSR_FRM_END_STAT			VCBUS_REG_ADDR(OSDSR_FRM_END_STAT)
+#define OSDSR_ABIC_HCOEF0			0x3145
+#define P_OSDSR_ABIC_HCOEF0			VCBUS_REG_ADDR(OSDSR_ABIC_HCOEF0)
+#define OSDSR_YBIC_HCOEF0			0x3146
+#define P_OSDSR_YBIC_HCOEF0			VCBUS_REG_ADDR(OSDSR_YBIC_HCOEF0)
+#define OSDSR_CBIC_HCOEF0			0x3147
+#define P_OSDSR_CBIC_HCOEF0			VCBUS_REG_ADDR(OSDSR_CBIC_HCOEF0)
+#define OSDSR_ABIC_VCOEF0			0x3148
+#define P_OSDSR_ABIC_VCOEF0			VCBUS_REG_ADDR(OSDSR_ABIC_VCOEF0)
+#define OSDSR_YBIC_VCOEF0			0x3149
+#define P_OSDSR_YBIC_VCOEF0			VCBUS_REG_ADDR(OSDSR_YBIC_VCOEF0)
+#define OSDSR_CBIC_VCOEF0			0x314a
+#define P_OSDSR_CBIC_VCOEF0			VCBUS_REG_ADDR(OSDSR_CBIC_VCOEF0)
+#define XVYCC_INV_LUT_Y_ADDR_PORT		0x3158
+#define P_XVYCC_INV_LUT_Y_ADDR_PORT		VCBUS_REG_ADDR(XVYCC_INV_LUT_Y_ADDR_PORT)
+#define XVYCC_INV_LUT_Y_DATA_PORT		0x3159
+#define P_XVYCC_INV_LUT_Y_DATA_PORT		VCBUS_REG_ADDR(XVYCC_INV_LUT_Y_DATA_PORT)
+#define XVYCC_INV_LUT_U_ADDR_PORT		0x315a
+#define P_XVYCC_INV_LUT_U_ADDR_PORT		VCBUS_REG_ADDR(XVYCC_INV_LUT_U_ADDR_PORT)
+#define XVYCC_INV_LUT_U_DATA_PORT		0x315b
+#define P_XVYCC_INV_LUT_U_DATA_PORT		VCBUS_REG_ADDR(XVYCC_INV_LUT_U_DATA_PORT)
+#define XVYCC_INV_LUT_V_ADDR_PORT		0x315c
+#define P_XVYCC_INV_LUT_V_ADDR_PORT		VCBUS_REG_ADDR(XVYCC_INV_LUT_V_ADDR_PORT)
+#define XVYCC_INV_LUT_V_DATA_PORT		0x315d
+#define P_XVYCC_INV_LUT_V_DATA_PORT		VCBUS_REG_ADDR(XVYCC_INV_LUT_V_DATA_PORT)
+#define XVYCC_LUT_R_ADDR_PORT			0x315e
+#define P_XVYCC_LUT_R_ADDR_PORT			VCBUS_REG_ADDR(XVYCC_LUT_R_ADDR_PORT)
+#define XVYCC_LUT_R_DATA_PORT			0x315f
+#define P_XVYCC_LUT_R_DATA_PORT			VCBUS_REG_ADDR(XVYCC_LUT_R_DATA_PORT)
+#define XVYCC_LUT_G_ADDR_PORT			0x3160
+#define P_XVYCC_LUT_G_ADDR_PORT			VCBUS_REG_ADDR(XVYCC_LUT_G_ADDR_PORT)
+#define XVYCC_LUT_G_DATA_PORT			0x3161
+#define P_XVYCC_LUT_G_DATA_PORT			VCBUS_REG_ADDR(XVYCC_LUT_G_DATA_PORT)
+#define XVYCC_LUT_B_ADDR_PORT			0x3162
+#define P_XVYCC_LUT_B_ADDR_PORT			VCBUS_REG_ADDR(XVYCC_LUT_B_ADDR_PORT)
+#define XVYCC_LUT_B_DATA_PORT			0x3163
+#define P_XVYCC_LUT_B_DATA_PORT			VCBUS_REG_ADDR(XVYCC_LUT_B_DATA_PORT)
+#define XVYCC_INV_LUT_CTL			0x3164
+#define P_XVYCC_INV_LUT_CTL			VCBUS_REG_ADDR(XVYCC_INV_LUT_CTL)
+#define XVYCC_LUT_CTL				0x3165
+#define P_XVYCC_LUT_CTL				VCBUS_REG_ADDR(XVYCC_LUT_CTL)
+#define XVYCC_VADJ1_CURV_0			0x3166
+#define P_XVYCC_VADJ1_CURV_0			VCBUS_REG_ADDR(XVYCC_VADJ1_CURV_0)
+#define XVYCC_VADJ1_CURV_1			0x3167
+#define P_XVYCC_VADJ1_CURV_1			VCBUS_REG_ADDR(XVYCC_VADJ1_CURV_1)
+#define XVYCC_VADJ1_CURV_2			0x3168
+#define P_XVYCC_VADJ1_CURV_2			VCBUS_REG_ADDR(XVYCC_VADJ1_CURV_2)
+#define XVYCC_VADJ1_CURV_3			0x3169
+#define P_XVYCC_VADJ1_CURV_3			VCBUS_REG_ADDR(XVYCC_VADJ1_CURV_3)
+#define XVYCC_VADJ2_CURV_0			0x316a
+#define P_XVYCC_VADJ2_CURV_0			VCBUS_REG_ADDR(XVYCC_VADJ2_CURV_0)
+#define XVYCC_VADJ2_CURV_1			0x316b
+#define P_XVYCC_VADJ2_CURV_1			VCBUS_REG_ADDR(XVYCC_VADJ2_CURV_1)
+#define XVYCC_VADJ2_CURV_2			0x316c
+#define P_XVYCC_VADJ2_CURV_2			VCBUS_REG_ADDR(XVYCC_VADJ2_CURV_2)
+#define XVYCC_VADJ2_CURV_3			0x316d
+#define P_XVYCC_VADJ2_CURV_3			VCBUS_REG_ADDR(XVYCC_VADJ2_CURV_3)
+#define XVYCC_VD1_RGB_CTRST			0x3170
+#define P_XVYCC_VD1_RGB_CTRST			VCBUS_REG_ADDR(XVYCC_VD1_RGB_CTRST)
+#define XVYCC_VD1_RGB_BRGHT			0x3171
+#define P_XVYCC_VD1_RGB_BRGHT			VCBUS_REG_ADDR(XVYCC_VD1_RGB_BRGHT)
+#define XVYCC_VD1_RGB_DLUT_0_3			0x3172
+#define P_XVYCC_VD1_RGB_DLUT_0_3		VCBUS_REG_ADDR(XVYCC_VD1_RGB_DLUT_0_3)
+#define XVYCC_VD1_RGB_DLUT_4_7			0x3173
+#define P_XVYCC_VD1_RGB_DLUT_4_7		VCBUS_REG_ADDR(XVYCC_VD1_RGB_DLUT_4_7)
+#define XVYCC_VD1_RGB_DLUT_8_11			0x3174
+#define P_XVYCC_VD1_RGB_DLUT_8_11		VCBUS_REG_ADDR(XVYCC_VD1_RGB_DLUT_8_11)
+#define XVYCC_POST_RGB_CTRST			0x3175
+#define P_XVYCC_POST_RGB_CTRST			VCBUS_REG_ADDR(XVYCC_POST_RGB_CTRST)
+#define XVYCC_POST_RGB_BRGHT			0x3176
+#define P_XVYCC_POST_RGB_BRGHT			VCBUS_REG_ADDR(XVYCC_POST_RGB_BRGHT)
+#define XVYCC_POST_RGB_DLUT_0_3			0x3177
+#define P_XVYCC_POST_RGB_DLUT_0_3		VCBUS_REG_ADDR(XVYCC_POST_RGB_DLUT_0_3)
+#define XVYCC_POST_RGB_DLUT_4_7			0x3178
+#define P_XVYCC_POST_RGB_DLUT_4_7		VCBUS_REG_ADDR(XVYCC_POST_RGB_DLUT_4_7)
+#define XVYCC_POST_RGB_DLUT_8_11		0x3179
+#define P_XVYCC_POST_RGB_DLUT_8_11		VCBUS_REG_ADDR(XVYCC_POST_RGB_DLUT_8_11)
+#define SHARP_HVSIZE				0x3180
+#define P_SHARP_HVSIZE				VCBUS_REG_ADDR(SHARP_HVSIZE)
+#define SHARP_HVBLANK_NUM			0x3181
+#define P_SHARP_HVBLANK_NUM			VCBUS_REG_ADDR(SHARP_HVBLANK_NUM)
+#define NR_GAUSSIAN_MODE			0x3182
+#define P_NR_GAUSSIAN_MODE			VCBUS_REG_ADDR(NR_GAUSSIAN_MODE)
+#define PK_HVCON_LPF_MODE			0x3183
+#define P_PK_HVCON_LPF_MODE			VCBUS_REG_ADDR(PK_HVCON_LPF_MODE)
+#define PK_CON_BLEND_GAIN			0x3184
+#define P_PK_CON_BLEND_GAIN			VCBUS_REG_ADDR(PK_CON_BLEND_GAIN)
+#define PK_CON_2CIRHPGAIN_TH_RATE		0x3185
+#define P_PK_CON_2CIRHPGAIN_TH_RATE		VCBUS_REG_ADDR(PK_CON_2CIRHPGAIN_TH_RATE)
+#define PK_CON_2CIRHPGAIN_LIMIT			0x3186
+#define P_PK_CON_2CIRHPGAIN_LIMIT		VCBUS_REG_ADDR(PK_CON_2CIRHPGAIN_LIMIT)
+#define PK_CON_2CIRBPGAIN_TH_RATE		0x3187
+#define P_PK_CON_2CIRBPGAIN_TH_RATE		VCBUS_REG_ADDR(PK_CON_2CIRBPGAIN_TH_RATE)
+#define PK_CON_2CIRBPGAIN_LIMIT			0x3188
+#define P_PK_CON_2CIRBPGAIN_LIMIT		VCBUS_REG_ADDR(PK_CON_2CIRBPGAIN_LIMIT)
+#define PK_CON_2DRTHPGAIN_TH_RATE		0x3189
+#define P_PK_CON_2DRTHPGAIN_TH_RATE		VCBUS_REG_ADDR(PK_CON_2DRTHPGAIN_TH_RATE)
+#define PK_CON_2DRTHPGAIN_LIMIT			0x318a
+#define P_PK_CON_2DRTHPGAIN_LIMIT		VCBUS_REG_ADDR(PK_CON_2DRTHPGAIN_LIMIT)
+#define PK_CON_2DRTBPGAIN_TH_RATE		0x318b
+#define P_PK_CON_2DRTBPGAIN_TH_RATE		VCBUS_REG_ADDR(PK_CON_2DRTBPGAIN_TH_RATE)
+#define PK_CON_2DRTBPGAIN_LIMIT			0x318c
+#define P_PK_CON_2DRTBPGAIN_LIMIT		VCBUS_REG_ADDR(PK_CON_2DRTBPGAIN_LIMIT)
+#define PK_CIRFB_LPF_MODE			0x318d
+#define P_PK_CIRFB_LPF_MODE			VCBUS_REG_ADDR(PK_CIRFB_LPF_MODE)
+#define PK_DRTFB_LPF_MODE			0x318e
+#define P_PK_DRTFB_LPF_MODE			VCBUS_REG_ADDR(PK_DRTFB_LPF_MODE)
+#define PK_CIRFB_HP_CORING			0x318f
+#define P_PK_CIRFB_HP_CORING			VCBUS_REG_ADDR(PK_CIRFB_HP_CORING)
+#define PK_CIRFB_BP_CORING			0x3190
+#define P_PK_CIRFB_BP_CORING			VCBUS_REG_ADDR(PK_CIRFB_BP_CORING)
+#define PK_DRTFB_HP_CORING			0x3191
+#define P_PK_DRTFB_HP_CORING			VCBUS_REG_ADDR(PK_DRTFB_HP_CORING)
+#define PK_DRTFB_BP_CORING			0x3192
+#define P_PK_DRTFB_BP_CORING			VCBUS_REG_ADDR(PK_DRTFB_BP_CORING)
+#define PK_CIRFB_BLEND_GAIN			0x3193
+#define P_PK_CIRFB_BLEND_GAIN			VCBUS_REG_ADDR(PK_CIRFB_BLEND_GAIN)
+#define NR_ALPY_SSD_GAIN_OFST			0x3194
+#define P_NR_ALPY_SSD_GAIN_OFST			VCBUS_REG_ADDR(NR_ALPY_SSD_GAIN_OFST)
+#define NR_ALP0Y_ERR2CURV_TH_RATE		0x3195
+#define P_NR_ALP0Y_ERR2CURV_TH_RATE		VCBUS_REG_ADDR(NR_ALP0Y_ERR2CURV_TH_RATE)
+#define NR_ALP0Y_ERR2CURV_LIMIT			0x3196
+#define P_NR_ALP0Y_ERR2CURV_LIMIT		VCBUS_REG_ADDR(NR_ALP0Y_ERR2CURV_LIMIT)
+#define NR_ALP0C_ERR2CURV_TH_RATE		0x3197
+#define P_NR_ALP0C_ERR2CURV_TH_RATE		VCBUS_REG_ADDR(NR_ALP0C_ERR2CURV_TH_RATE)
+#define NR_ALP0C_ERR2CURV_LIMIT			0x3198
+#define P_NR_ALP0C_ERR2CURV_LIMIT		VCBUS_REG_ADDR(NR_ALP0C_ERR2CURV_LIMIT)
+#define NR_ALP0_MIN_MAX				0x3199
+#define P_NR_ALP0_MIN_MAX			VCBUS_REG_ADDR(NR_ALP0_MIN_MAX)
+#define NR_ALP1_MIERR_CORING			0x319a
+#define P_NR_ALP1_MIERR_CORING			VCBUS_REG_ADDR(NR_ALP1_MIERR_CORING)
+#define NR_ALP1_ERR2CURV_TH_RATE		0x319b
+#define P_NR_ALP1_ERR2CURV_TH_RATE		VCBUS_REG_ADDR(NR_ALP1_ERR2CURV_TH_RATE)
+#define NR_ALP1_ERR2CURV_LIMIT			0x319c
+#define P_NR_ALP1_ERR2CURV_LIMIT		VCBUS_REG_ADDR(NR_ALP1_ERR2CURV_LIMIT)
+#define NR_ALP1_MIN_MAX				0x319d
+#define P_NR_ALP1_MIN_MAX			VCBUS_REG_ADDR(NR_ALP1_MIN_MAX)
+#define PK_ALP2_MIERR_CORING			0x319e
+#define P_PK_ALP2_MIERR_CORING			VCBUS_REG_ADDR(PK_ALP2_MIERR_CORING)
+#define PK_ALP2_ERR2CURV_TH_RATE		0x319f
+#define P_PK_ALP2_ERR2CURV_TH_RATE		VCBUS_REG_ADDR(PK_ALP2_ERR2CURV_TH_RATE)
+#define PK_ALP2_ERR2CURV_LIMIT			0x31a0
+#define P_PK_ALP2_ERR2CURV_LIMIT		VCBUS_REG_ADDR(PK_ALP2_ERR2CURV_LIMIT)
+#define PK_ALP2_MIN_MAX				0x31a1
+#define P_PK_ALP2_MIN_MAX			VCBUS_REG_ADDR(PK_ALP2_MIN_MAX)
+#define PK_FINALGAIN_HP_BP			0x31a2
+#define P_PK_FINALGAIN_HP_BP			VCBUS_REG_ADDR(PK_FINALGAIN_HP_BP)
+#define PK_OS_HORZ_CORE_GAIN			0x31a3
+#define P_PK_OS_HORZ_CORE_GAIN			VCBUS_REG_ADDR(PK_OS_HORZ_CORE_GAIN)
+#define PK_OS_VERT_CORE_GAIN			0x31a4
+#define P_PK_OS_VERT_CORE_GAIN			VCBUS_REG_ADDR(PK_OS_VERT_CORE_GAIN)
+#define PK_OS_ADPT_MISC				0x31a5
+#define P_PK_OS_ADPT_MISC			VCBUS_REG_ADDR(PK_OS_ADPT_MISC)
+#define PK_OS_STATIC				0x31a6
+#define P_PK_OS_STATIC				VCBUS_REG_ADDR(PK_OS_STATIC)
+#define PK_NR_ENABLE				0x31a7
+#define P_PK_NR_ENABLE				VCBUS_REG_ADDR(PK_NR_ENABLE)
+#define PK_DRT_SAD_MISC				0x31a8
+#define P_PK_DRT_SAD_MISC			VCBUS_REG_ADDR(PK_DRT_SAD_MISC)
+#define NR_TI_DNLP_BLEND			0x31a9
+#define P_NR_TI_DNLP_BLEND			VCBUS_REG_ADDR(NR_TI_DNLP_BLEND)
+#define LTI_DIR_CORE_ALPHA			0x31aa
+#define P_LTI_DIR_CORE_ALPHA			VCBUS_REG_ADDR(LTI_DIR_CORE_ALPHA)
+#define CTI_DIR_ALPHA				0x31ab
+#define P_CTI_DIR_ALPHA				VCBUS_REG_ADDR(CTI_DIR_ALPHA)
+#define LTI_CTI_DF_GAIN				0x31ac
+#define P_LTI_CTI_DF_GAIN			VCBUS_REG_ADDR(LTI_CTI_DF_GAIN)
+#define LTI_CTI_DIR_AC_DBG			0x31ad
+#define P_LTI_CTI_DIR_AC_DBG			VCBUS_REG_ADDR(LTI_CTI_DIR_AC_DBG)
+#define HCTI_FLT_CLP_DC				0x31ae
+#define P_HCTI_FLT_CLP_DC			VCBUS_REG_ADDR(HCTI_FLT_CLP_DC)
+#define HCTI_BST_GAIN				0x31af
+#define P_HCTI_BST_GAIN				VCBUS_REG_ADDR(HCTI_BST_GAIN)
+#define HCTI_BST_CORE				0x31b0
+#define P_HCTI_BST_CORE				VCBUS_REG_ADDR(HCTI_BST_CORE)
+#define HCTI_CON_2_GAIN_0			0x31b1
+#define P_HCTI_CON_2_GAIN_0			VCBUS_REG_ADDR(HCTI_CON_2_GAIN_0)
+#define HCTI_CON_2_GAIN_1			0x31b2
+#define P_HCTI_CON_2_GAIN_1			VCBUS_REG_ADDR(HCTI_CON_2_GAIN_1)
+#define HCTI_OS_MARGIN				0x31b3
+#define P_HCTI_OS_MARGIN			VCBUS_REG_ADDR(HCTI_OS_MARGIN)
+#define HLTI_FLT_CLP_DC				0x31b4
+#define P_HLTI_FLT_CLP_DC			VCBUS_REG_ADDR(HLTI_FLT_CLP_DC)
+#define HLTI_BST_GAIN				0x31b5
+#define P_HLTI_BST_GAIN				VCBUS_REG_ADDR(HLTI_BST_GAIN)
+#define HLTI_BST_CORE				0x31b6
+#define P_HLTI_BST_CORE				VCBUS_REG_ADDR(HLTI_BST_CORE)
+#define HLTI_CON_2_GAIN_0			0x31b7
+#define P_HLTI_CON_2_GAIN_0			VCBUS_REG_ADDR(HLTI_CON_2_GAIN_0)
+#define HLTI_CON_2_GAIN_1			0x31b8
+#define P_HLTI_CON_2_GAIN_1			VCBUS_REG_ADDR(HLTI_CON_2_GAIN_1)
+#define HLTI_OS_MARGIN				0x31b9
+#define P_HLTI_OS_MARGIN			VCBUS_REG_ADDR(HLTI_OS_MARGIN)
+#define VLTI_FLT_CON_CLP			0x31ba
+#define P_VLTI_FLT_CON_CLP			VCBUS_REG_ADDR(VLTI_FLT_CON_CLP)
+#define VLTI_BST_GAIN				0x31bb
+#define P_VLTI_BST_GAIN				VCBUS_REG_ADDR(VLTI_BST_GAIN)
+#define VLTI_BST_CORE				0x31bc
+#define P_VLTI_BST_CORE				VCBUS_REG_ADDR(VLTI_BST_CORE)
+#define VLTI_CON_2_GAIN_0			0x31bd
+#define P_VLTI_CON_2_GAIN_0			VCBUS_REG_ADDR(VLTI_CON_2_GAIN_0)
+#define VLTI_CON_2_GAIN_1			0x31be
+#define P_VLTI_CON_2_GAIN_1			VCBUS_REG_ADDR(VLTI_CON_2_GAIN_1)
+#define VCTI_FLT_CON_CLP			0x31bf
+#define P_VCTI_FLT_CON_CLP			VCBUS_REG_ADDR(VCTI_FLT_CON_CLP)
+#define VCTI_BST_GAIN				0x31c0
+#define P_VCTI_BST_GAIN				VCBUS_REG_ADDR(VCTI_BST_GAIN)
+#define VCTI_BST_CORE				0x31c1
+#define P_VCTI_BST_CORE				VCBUS_REG_ADDR(VCTI_BST_CORE)
+#define VCTI_CON_2_GAIN_0			0x31c2
+#define P_VCTI_CON_2_GAIN_0			VCBUS_REG_ADDR(VCTI_CON_2_GAIN_0)
+#define VCTI_CON_2_GAIN_1			0x31c3
+#define P_VCTI_CON_2_GAIN_1			VCBUS_REG_ADDR(VCTI_CON_2_GAIN_1)
+#define SHARP_3DLIMIT				0x31c4
+#define P_SHARP_3DLIMIT				VCBUS_REG_ADDR(SHARP_3DLIMIT)
+#define DNLP_EN					0x31c5
+#define P_DNLP_EN				VCBUS_REG_ADDR(DNLP_EN)
+#define DNLP_00					0x31c6
+#define P_DNLP_00				VCBUS_REG_ADDR(DNLP_00)
+#define DNLP_01					0x31c7
+#define P_DNLP_01				VCBUS_REG_ADDR(DNLP_01)
+#define DNLP_02					0x31c8
+#define P_DNLP_02				VCBUS_REG_ADDR(DNLP_02)
+#define DNLP_03					0x31c9
+#define P_DNLP_03				VCBUS_REG_ADDR(DNLP_03)
+#define DNLP_04					0x31ca
+#define P_DNLP_04				VCBUS_REG_ADDR(DNLP_04)
+#define DNLP_05					0x31cb
+#define P_DNLP_05				VCBUS_REG_ADDR(DNLP_05)
+#define DNLP_06					0x31cc
+#define P_DNLP_06				VCBUS_REG_ADDR(DNLP_06)
+#define DNLP_07					0x31cd
+#define P_DNLP_07				VCBUS_REG_ADDR(DNLP_07)
+#define DNLP_08					0x31ce
+#define P_DNLP_08				VCBUS_REG_ADDR(DNLP_08)
+#define DNLP_09					0x31cf
+#define P_DNLP_09				VCBUS_REG_ADDR(DNLP_09)
+#define DNLP_10					0x31d0
+#define P_DNLP_10				VCBUS_REG_ADDR(DNLP_10)
+#define DNLP_11					0x31d1
+#define P_DNLP_11				VCBUS_REG_ADDR(DNLP_11)
+#define DNLP_12					0x31d2
+#define P_DNLP_12				VCBUS_REG_ADDR(DNLP_12)
+#define DNLP_13					0x31d3
+#define P_DNLP_13				VCBUS_REG_ADDR(DNLP_13)
+#define DNLP_14					0x31d4
+#define P_DNLP_14				VCBUS_REG_ADDR(DNLP_14)
+#define DNLP_15					0x31d5
+#define P_DNLP_15				VCBUS_REG_ADDR(DNLP_15)
+#define DEMO_CRTL				0x31d6
+#define P_DEMO_CRTL				VCBUS_REG_ADDR(DEMO_CRTL)
+
+
+/*
+ * ucode/c_always_on_pointer.h
+ */
+#define AO_RTI_STATUS_REG0			((0x00 << 10) | (0x00 << 2))
+#define P_AO_RTI_STATUS_REG0			AOBUS_REG_ADDR(AO_RTI_STATUS_REG0)
+#define AO_RTI_STATUS_REG1			((0x00 << 10) | (0x01 << 2))
+#define P_AO_RTI_STATUS_REG1			AOBUS_REG_ADDR(AO_RTI_STATUS_REG1)
+#define AO_RTI_STATUS_REG2			((0x00 << 10) | (0x02 << 2))
+#define P_AO_RTI_STATUS_REG2			AOBUS_REG_ADDR(AO_RTI_STATUS_REG2)
+#define AO_RTI_PWR_CNTL_REG1			((0x00 << 10) | (0x03 << 2))
+#define P_AO_RTI_PWR_CNTL_REG1			AOBUS_REG_ADDR(AO_RTI_PWR_CNTL_REG1)
+#define AO_RTI_PWR_CNTL_REG0			((0x00 << 10) | (0x04 << 2))
+#define P_AO_RTI_PWR_CNTL_REG0			AOBUS_REG_ADDR(AO_RTI_PWR_CNTL_REG0)
+#define AO_RTI_PIN_MUX_REG			((0x00 << 10) | (0x05 << 2))
+#define P_AO_RTI_PIN_MUX_REG			AOBUS_REG_ADDR(AO_RTI_PIN_MUX_REG)
+#define AO_WD_GPIO_REG				((0x00 << 10) | (0x06 << 2))
+#define P_AO_WD_GPIO_REG			AOBUS_REG_ADDR(AO_WD_GPIO_REG)
+#define AO_REMAP_REG0				((0x00 << 10) | (0x07 << 2))
+#define P_AO_REMAP_REG0				AOBUS_REG_ADDR(AO_REMAP_REG0)
+#define AO_REMAP_REG1				((0x00 << 10) | (0x08 << 2))
+#define P_AO_REMAP_REG1				AOBUS_REG_ADDR(AO_REMAP_REG1)
+#define AO_GPIO_O_EN_N				((0x00 << 10) | (0x09 << 2))
+#define P_AO_GPIO_O_EN_N			AOBUS_REG_ADDR(AO_GPIO_O_EN_N)
+#define AO_GPIO_I				((0x00 << 10) | (0x0A << 2))
+#define P_AO_GPIO_I				AOBUS_REG_ADDR(AO_GPIO_I)
+#define AO_RTI_PULL_UP_REG			((0x00 << 10) | (0x0B << 2))
+#define P_AO_RTI_PULL_UP_REG			AOBUS_REG_ADDR(AO_RTI_PULL_UP_REG)
+#define AO_RTI_WD_MARK				((0x00 << 10) | (0x0D << 2))
+#define P_AO_RTI_WD_MARK			AOBUS_REG_ADDR(AO_RTI_WD_MARK)
+#define AO_CPU_CNTL				((0x00 << 10) | (0x0E << 2))
+#define P_AO_CPU_CNTL				AOBUS_REG_ADDR(AO_CPU_CNTL)
+#define AO_CPU_STAT				((0x00 << 10) | (0x0F << 2))
+#define P_AO_CPU_STAT				AOBUS_REG_ADDR(AO_CPU_STAT)
+#define AO_RTI_GEN_CNTL_REG0			((0x00 << 10) | (0x10 << 2))
+#define P_AO_RTI_GEN_CNTL_REG0			AOBUS_REG_ADDR(AO_RTI_GEN_CNTL_REG0)
+#define AO_WATCHDOG_REG				((0x00 << 10) | (0x11 << 2))
+#define P_AO_WATCHDOG_REG			AOBUS_REG_ADDR(AO_WATCHDOG_REG)
+#define AO_WATCHDOG_RESET			((0x00 << 10) | (0x12 << 2))
+#define P_AO_WATCHDOG_RESET			AOBUS_REG_ADDR(AO_WATCHDOG_RESET)
+#define AO_TIMER_REG				((0x00 << 10) | (0x13 << 2))
+#define P_AO_TIMER_REG				AOBUS_REG_ADDR(AO_TIMER_REG)
+#define AO_TIMERA_REG				((0x00 << 10) | (0x14 << 2))
+#define P_AO_TIMERA_REG				AOBUS_REG_ADDR(AO_TIMERA_REG)
+#define AO_TIMERE_REG				((0x00 << 10) | (0x15 << 2))
+#define P_AO_TIMERE_REG				AOBUS_REG_ADDR(AO_TIMERE_REG)
+#define AO_AHB2DDR_CNTL				((0x00 << 10) | (0x18 << 2))
+#define P_AO_AHB2DDR_CNTL			AOBUS_REG_ADDR(AO_AHB2DDR_CNTL)
+#define AO_TIMEBASE_CNTL			((0x00 << 10) | (0x19 << 2))
+#define P_AO_TIMEBASE_CNTL			AOBUS_REG_ADDR(AO_TIMEBASE_CNTL)
+#define AO_CRT_CLK_CNTL1			((0x00 << 10) | (0x1a << 2))
+#define P_AO_CRT_CLK_CNTL1			AOBUS_REG_ADDR(AO_CRT_CLK_CNTL1)
+#define AO_IRQ_MASK_FIQ_SEL			((0x00 << 10) | (0x20 << 2))
+#define P_AO_IRQ_MASK_FIQ_SEL			AOBUS_REG_ADDR(AO_IRQ_MASK_FIQ_SEL)
+#define AO_IRQ_GPIO_REG				((0x00 << 10) | (0x21 << 2))
+#define P_AO_IRQ_GPIO_REG			AOBUS_REG_ADDR(AO_IRQ_GPIO_REG)
+#define AO_IRQ_STAT				((0x00 << 10) | (0x22 << 2))
+#define P_AO_IRQ_STAT				AOBUS_REG_ADDR(AO_IRQ_STAT)
+#define AO_IRQ_STAT_CLR				((0x00 << 10) | (0x23 << 2))
+#define P_AO_IRQ_STAT_CLR			AOBUS_REG_ADDR(AO_IRQ_STAT_CLR)
+#define AO_SAR_CLK				((0x00 << 10) | (0x24 << 2))
+#define P_AO_SAR_CLK				AOBUS_REG_ADDR(AO_SAR_CLK)
+#define AO_DEBUG_REG0				((0x00 << 10) | (0x28 << 2))
+#define P_AO_DEBUG_REG0				AOBUS_REG_ADDR(AO_DEBUG_REG0)
+#define AO_DEBUG_REG1				((0x00 << 10) | (0x29 << 2))
+#define P_AO_DEBUG_REG1				AOBUS_REG_ADDR(AO_DEBUG_REG1)
+#define AO_DEBUG_REG2				((0x00 << 10) | (0x2a << 2))
+#define P_AO_DEBUG_REG2				AOBUS_REG_ADDR(AO_DEBUG_REG2)
+#define AO_DEBUG_REG3				((0x00 << 10) | (0x2b << 2))
+#define P_AO_DEBUG_REG3				AOBUS_REG_ADDR(AO_DEBUG_REG3)
+#define AO_IR_BLASTER_ADDR0			((0x00 << 10) | (0x30 << 2))
+#define P_AO_IR_BLASTER_ADDR0			AOBUS_REG_ADDR(AO_IR_BLASTER_ADDR0)
+#define AO_IR_BLASTER_ADDR1			((0x00 << 10) | (0x31 << 2))
+#define P_AO_IR_BLASTER_ADDR1			AOBUS_REG_ADDR(AO_IR_BLASTER_ADDR1)
+#define AO_IR_BLASTER_ADDR2			((0x00 << 10) | (0x32 << 2))
+#define P_AO_IR_BLASTER_ADDR2			AOBUS_REG_ADDR(AO_IR_BLASTER_ADDR2)
+#define AO_RTI_PWR_A9_CNTL0			((0x00 << 10) | (0x38 << 2))
+#define P_AO_RTI_PWR_A9_CNTL0			AOBUS_REG_ADDR(AO_RTI_PWR_A9_CNTL0)
+#define AO_RTI_PWR_A9_CNTL1			((0x00 << 10) | (0x39 << 2))
+#define P_AO_RTI_PWR_A9_CNTL1			AOBUS_REG_ADDR(AO_RTI_PWR_A9_CNTL1)
+#define AO_RTI_GEN_PWR_SLEEP0			((0x00 << 10) | (0x3a << 2))
+#define P_AO_RTI_GEN_PWR_SLEEP0			AOBUS_REG_ADDR(AO_RTI_GEN_PWR_SLEEP0)
+#define AO_RTI_GEN_PWR_ISO0			((0x00 << 10) | (0x3b << 2))
+#define P_AO_RTI_GEN_PWR_ISO0			AOBUS_REG_ADDR(AO_RTI_GEN_PWR_ISO0)
+#define AO_CEC_GEN_CNTL				((0x00 << 10) | (0x40 << 2))
+#define P_AO_CEC_GEN_CNTL			AOBUS_REG_ADDR(AO_CEC_GEN_CNTL)
+#define AO_CEC_RW_REG				((0x00 << 10) | (0x41 << 2))
+#define P_AO_CEC_RW_REG				AOBUS_REG_ADDR(AO_CEC_RW_REG)
+#define AO_CEC_INTR_MASKN			((0x00 << 10) | (0x42 << 2))
+#define P_AO_CEC_INTR_MASKN			AOBUS_REG_ADDR(AO_CEC_INTR_MASKN)
+#define AO_CEC_INTR_CLR				((0x00 << 10) | (0x43 << 2))
+#define P_AO_CEC_INTR_CLR			AOBUS_REG_ADDR(AO_CEC_INTR_CLR)
+#define AO_CEC_INTR_STAT			((0x00 << 10) | (0x44 << 2))
+#define P_AO_CEC_INTR_STAT			AOBUS_REG_ADDR(AO_CEC_INTR_STAT)
+#define AO_CRT_CLK_CNTL1			((0x00 << 10) | (0x1a << 2))
+#define P_AO_CRT_CLK_CNTL1			AOBUS_REG_ADDR(AO_CRT_CLK_CNTL1)
+#define AO_IR_DEC_LDR_ACTIVE			((0x01 << 10) | (0x20 << 2))
+#define P_AO_IR_DEC_LDR_ACTIVE			AOBUS_REG_ADDR(AO_IR_DEC_LDR_ACTIVE)
+#define AO_IR_DEC_LDR_IDLE			((0x01 << 10) | (0x21 << 2))
+#define P_AO_IR_DEC_LDR_IDLE			AOBUS_REG_ADDR(AO_IR_DEC_LDR_IDLE)
+#define AO_IR_DEC_LDR_REPEAT			((0x01 << 10) | (0x22 << 2))
+#define P_AO_IR_DEC_LDR_REPEAT			AOBUS_REG_ADDR(AO_IR_DEC_LDR_REPEAT)
+#define AO_IR_DEC_BIT_0				((0x01 << 10) | (0x23 << 2))
+#define P_AO_IR_DEC_BIT_0			AOBUS_REG_ADDR(AO_IR_DEC_BIT_0)
+#define AO_IR_DEC_REG0				((0x01 << 10) | (0x24 << 2))
+#define P_AO_IR_DEC_REG0			AOBUS_REG_ADDR(AO_IR_DEC_REG0)
+#define AO_IR_DEC_FRAME				((0x01 << 10) | (0x25 << 2))
+#define P_AO_IR_DEC_FRAME			AOBUS_REG_ADDR(AO_IR_DEC_FRAME)
+#define AO_IR_DEC_STATUS			((0x01 << 10) | (0x26 << 2))
+#define P_AO_IR_DEC_STATUS			AOBUS_REG_ADDR(AO_IR_DEC_STATUS)
+#define AO_IR_DEC_REG1				((0x01 << 10) | (0x27 << 2))
+#define P_AO_IR_DEC_REG1			AOBUS_REG_ADDR(AO_IR_DEC_REG1)
+#define AO_UART_WFIFO				((0x01 << 10) | (0x30 << 2))
+#define P_AO_UART_WFIFO				AOBUS_REG_ADDR(AO_UART_WFIFO)
+#define AO_UART_RFIFO				((0x01 << 10) | (0x31 << 2))
+#define P_AO_UART_RFIFO				AOBUS_REG_ADDR(AO_UART_RFIFO)
+#define AO_UART_CONTROL				((0x01 << 10) | (0x32 << 2))
+#define P_AO_UART_CONTROL			AOBUS_REG_ADDR(AO_UART_CONTROL)
+#define AO_UART_STATUS				((0x01 << 10) | (0x33 << 2))
+#define P_AO_UART_STATUS			AOBUS_REG_ADDR(AO_UART_STATUS)
+#define AO_UART_MISC				((0x01 << 10) | (0x34 << 2))
+#define P_AO_UART_MISC				AOBUS_REG_ADDR(AO_UART_MISC)
+#define AO_UART_REG5				((0x01 << 10) | (0x35 << 2))
+#define P_AO_UART_REG5				AOBUS_REG_ADDR(AO_UART_REG5)
+#define AO_UART2_WFIFO				((0x01 << 10) | (0x38 << 2))
+#define P_AO_UART2_WFIFO			AOBUS_REG_ADDR(AO_UART2_WFIFO)
+#define AO_UART2_RFIFO				((0x01 << 10) | (0x39 << 2))
+#define P_AO_UART2_RFIFO			AOBUS_REG_ADDR(AO_UART2_RFIFO)
+#define AO_UART2_CONTROL			((0x01 << 10) | (0x3a << 2))
+#define P_AO_UART2_CONTROL			AOBUS_REG_ADDR(AO_UART2_CONTROL)
+#define AO_UART2_STATUS				((0x01 << 10) | (0x3b << 2))
+#define P_AO_UART2_STATUS			AOBUS_REG_ADDR(AO_UART2_STATUS)
+#define AO_UART2_MISC				((0x01 << 10) | (0x3c << 2))
+#define P_AO_UART2_MISC				AOBUS_REG_ADDR(AO_UART2_MISC)
+#define AO_UART2_REG5				((0x01 << 10) | (0x3d << 2))
+#define P_AO_UART2_REG5				AOBUS_REG_ADDR(AO_UART2_REG5)
+#define AO_I2C_M_0_CONTROL_REG			((0x01 << 10) | (0x40 << 2))
+#define P_AO_I2C_M_0_CONTROL_REG		AOBUS_REG_ADDR(AO_I2C_M_0_CONTROL_REG)
+#define AO_I2C_M_0_SLAVE_ADDR			((0x01 << 10) | (0x41 << 2))
+#define P_AO_I2C_M_0_SLAVE_ADDR			AOBUS_REG_ADDR(AO_I2C_M_0_SLAVE_ADDR)
+#define AO_I2C_M_0_TOKEN_LIST0			((0x01 << 10) | (0x42 << 2))
+#define P_AO_I2C_M_0_TOKEN_LIST0		AOBUS_REG_ADDR(AO_I2C_M_0_TOKEN_LIST0)
+#define AO_I2C_M_0_TOKEN_LIST1			((0x01 << 10) | (0x43 << 2))
+#define P_AO_I2C_M_0_TOKEN_LIST1		AOBUS_REG_ADDR(AO_I2C_M_0_TOKEN_LIST1)
+#define AO_I2C_M_0_WDATA_REG0			((0x01 << 10) | (0x44 << 2))
+#define P_AO_I2C_M_0_WDATA_REG0			AOBUS_REG_ADDR(AO_I2C_M_0_WDATA_REG0)
+#define AO_I2C_M_0_WDATA_REG1			((0x01 << 10) | (0x45 << 2))
+#define P_AO_I2C_M_0_WDATA_REG1			AOBUS_REG_ADDR(AO_I2C_M_0_WDATA_REG1)
+#define AO_I2C_M_0_RDATA_REG0			((0x01 << 10) | (0x46 << 2))
+#define P_AO_I2C_M_0_RDATA_REG0			AOBUS_REG_ADDR(AO_I2C_M_0_RDATA_REG0)
+#define AO_I2C_M_0_RDATA_REG1			((0x01 << 10) | (0x47 << 2))
+#define P_AO_I2C_M_0_RDATA_REG1			AOBUS_REG_ADDR(AO_I2C_M_0_RDATA_REG1)
+#define AO_I2C_S_CONTROL_REG			((0x01 << 10) | (0x50 << 2))
+#define P_AO_I2C_S_CONTROL_REG			AOBUS_REG_ADDR(AO_I2C_S_CONTROL_REG)
+#define AO_I2C_S_SEND_REG			((0x01 << 10) | (0x51 << 2))
+#define P_AO_I2C_S_SEND_REG			AOBUS_REG_ADDR(AO_I2C_S_SEND_REG)
+#define AO_I2C_S_RECV_REG			((0x01 << 10) | (0x52 << 2))
+#define P_AO_I2C_S_RECV_REG			AOBUS_REG_ADDR(AO_I2C_S_RECV_REG)
+#define AO_I2C_S_CNTL1_REG			((0x01 << 10) | (0x53 << 2))
+#define P_AO_I2C_S_CNTL1_REG			AOBUS_REG_ADDR(AO_I2C_S_CNTL1_REG)
+#define AO_PWM_PWM_A				((0x01 << 10) | (0x54 << 2))
+#define P_AO_PWM_PWM_A				AOBUS_REG_ADDR(AO_PWM_PWM_A)
+#define AO_PWM_PWM_B				((0x01 << 10) | (0x55 << 2))
+#define P_AO_PWM_PWM_B				AOBUS_REG_ADDR(AO_PWM_PWM_B)
+#define AO_PWM_MISC_REG_AB			((0x01 << 10) | (0x56 << 2))
+#define P_AO_PWM_MISC_REG_AB			AOBUS_REG_ADDR(AO_PWM_MISC_REG_AB)
+#define AO_PWM_DELTA_SIGMA_AB			((0x01 << 10) | (0x57 << 2))
+#define P_AO_PWM_DELTA_SIGMA_AB			AOBUS_REG_ADDR(AO_PWM_DELTA_SIGMA_AB)
+#define AO_MF_IR_DEC_LDR_ACTIVE			((0x01 << 10) | (0x60 << 2))
+#define P_AO_MF_IR_DEC_LDR_ACTIVE		AOBUS_REG_ADDR(AO_MF_IR_DEC_LDR_ACTIVE)
+#define AO_MF_IR_DEC_LDR_IDLE			((0x01 << 10) | (0x61 << 2))
+#define P_AO_MF_IR_DEC_LDR_IDLE			AOBUS_REG_ADDR(AO_MF_IR_DEC_LDR_IDLE)
+#define AO_MF_IR_DEC_LDR_REPEAT			((0x01 << 10) | (0x62 << 2))
+#define P_AO_MF_IR_DEC_LDR_REPEAT		AOBUS_REG_ADDR(AO_MF_IR_DEC_LDR_REPEAT)
+#define AO_MF_IR_DEC_BIT_0			((0x01 << 10) | (0x63 << 2))
+#define P_AO_MF_IR_DEC_BIT_0			AOBUS_REG_ADDR(AO_MF_IR_DEC_BIT_0)
+#define AO_MF_IR_DEC_REG0			((0x01 << 10) | (0x64 << 2))
+#define P_AO_MF_IR_DEC_REG0			AOBUS_REG_ADDR(AO_MF_IR_DEC_REG0)
+#define AO_MF_IR_DEC_FRAME			((0x01 << 10) | (0x65 << 2))
+#define P_AO_MF_IR_DEC_FRAME			AOBUS_REG_ADDR(AO_MF_IR_DEC_FRAME)
+#define AO_MF_IR_DEC_STATUS			((0x01 << 10) | (0x66 << 2))
+#define P_AO_MF_IR_DEC_STATUS			AOBUS_REG_ADDR(AO_MF_IR_DEC_STATUS)
+#define AO_MF_IR_DEC_REG1			((0x01 << 10) | (0x67 << 2))
+#define P_AO_MF_IR_DEC_REG1			AOBUS_REG_ADDR(AO_MF_IR_DEC_REG1)
+#define AO_MF_IR_DEC_REG2			((0x01 << 10) | (0x68 << 2))
+#define P_AO_MF_IR_DEC_REG2			AOBUS_REG_ADDR(AO_MF_IR_DEC_REG2)
+#define AO_MF_IR_DEC_DURATN2			((0x01 << 10) | (0x69 << 2))
+#define P_AO_MF_IR_DEC_DURATN2			AOBUS_REG_ADDR(AO_MF_IR_DEC_DURATN2)
+#define AO_MF_IR_DEC_DURATN3			((0x01 << 10) | (0x6a << 2))
+#define P_AO_MF_IR_DEC_DURATN3			AOBUS_REG_ADDR(AO_MF_IR_DEC_DURATN3)
+#define AO_MF_IR_DEC_FRAME1			((0x01 << 10) | (0x6b << 2))
+#define P_AO_MF_IR_DEC_FRAME1			AOBUS_REG_ADDR(AO_MF_IR_DEC_FRAME1)
+#define AO_MF_IR_DEC_STATUS1			((0x01 << 10) | (0x6c << 2))
+#define P_AO_MF_IR_DEC_STATUS1			AOBUS_REG_ADDR(AO_MF_IR_DEC_STATUS1)
+#define AO_MF_IR_DEC_STATUS2			((0x01 << 10) | (0x6d << 2))
+#define P_AO_MF_IR_DEC_STATUS2			AOBUS_REG_ADDR(AO_MF_IR_DEC_STATUS2)
+#define AO_MF_IR_DEC_REG3			((0x01 << 10) | (0x6e << 2))
+#define P_AO_MF_IR_DEC_REG3			AOBUS_REG_ADDR(AO_MF_IR_DEC_REG3)
+#define AO_MF_IR_DEC_FRAME_RSV0			((0x01 << 10) | (0x6f << 2))
+#define P_AO_MF_IR_DEC_FRAME_RSV0		AOBUS_REG_ADDR(AO_MF_IR_DEC_FRAME_RSV0)
+#define AO_MF_IR_DEC_FRAME_RSV1			((0x01 << 10) | (0x70 << 2))
+#define P_AO_MF_IR_DEC_FRAME_RSV1		AOBUS_REG_ADDR(AO_MF_IR_DEC_FRAME_RSV1)
+#define AO_SAR_ADC_REG0				((0x01 << 10) | (0x80 << 2))
+#define P_AO_SAR_ADC_REG0			AOBUS_REG_ADDR(AO_SAR_ADC_REG0)
+#define AO_SAR_ADC_CHAN_LIST			((0x01 << 10) | (0x81 << 2))
+#define P_AO_SAR_ADC_CHAN_LIST			AOBUS_REG_ADDR(AO_SAR_ADC_CHAN_LIST)
+#define AO_SAR_ADC_AVG_CNTL			((0x01 << 10) | (0x82 << 2))
+#define P_AO_SAR_ADC_AVG_CNTL			AOBUS_REG_ADDR(AO_SAR_ADC_AVG_CNTL)
+#define AO_SAR_ADC_REG3				((0x01 << 10) | (0x83 << 2))
+#define P_AO_SAR_ADC_REG3			AOBUS_REG_ADDR(AO_SAR_ADC_REG3)
+#define AO_SAR_ADC_DELAY			((0x01 << 10) | (0x84 << 2))
+#define P_AO_SAR_ADC_DELAY			AOBUS_REG_ADDR(AO_SAR_ADC_DELAY)
+#define AO_SAR_ADC_LAST_RD			((0x01 << 10) | (0x85 << 2))
+#define P_AO_SAR_ADC_LAST_RD			AOBUS_REG_ADDR(AO_SAR_ADC_LAST_RD)
+#define AO_SAR_ADC_FIFO_RD			((0x01 << 10) | (0x86 << 2))
+#define P_AO_SAR_ADC_FIFO_RD			AOBUS_REG_ADDR(AO_SAR_ADC_FIFO_RD)
+#define AO_SAR_ADC_AUX_SW			((0x01 << 10) | (0x87 << 2))
+#define P_AO_SAR_ADC_AUX_SW			AOBUS_REG_ADDR(AO_SAR_ADC_AUX_SW)
+#define AO_SAR_ADC_CHAN_10_SW			((0x01 << 10) | (0x88 << 2))
+#define P_AO_SAR_ADC_CHAN_10_SW			AOBUS_REG_ADDR(AO_SAR_ADC_CHAN_10_SW)
+#define AO_SAR_ADC_DETECT_IDLE_SW		((0x01 << 10) | (0x89 << 2))
+#define P_AO_SAR_ADC_DETECT_IDLE_SW		AOBUS_REG_ADDR(AO_SAR_ADC_DETECT_IDLE_SW)
+#define AO_SAR_ADC_DELTA_10			((0x01 << 10) | (0x8a << 2))
+#define P_AO_SAR_ADC_DELTA_10			AOBUS_REG_ADDR(AO_SAR_ADC_DELTA_10)
+#define AO_SAR_ADC_REG11			((0x01 << 10) | (0x8b << 2))
+#define P_AO_SAR_ADC_REG11			AOBUS_REG_ADDR(AO_SAR_ADC_REG11)
+#define AO_SAR_ADC_REG12			((0x01 << 10) | (0x8c << 2))
+#define P_AO_SAR_ADC_REG12			AOBUS_REG_ADDR(AO_SAR_ADC_REG12)
+
+
+/*
+ * ucode/dos_register.h
+ */
+#define VDEC_ASSIST_MMC_CTRL0			0x0001
+#define P_VDEC_ASSIST_MMC_CTRL0			DOS_REG_ADDR(VDEC_ASSIST_MMC_CTRL0)
+#define VDEC_ASSIST_MMC_CTRL1			0x0002
+#define P_VDEC_ASSIST_MMC_CTRL1			DOS_REG_ADDR(VDEC_ASSIST_MMC_CTRL1)
+#define VDEC_ASSIST_MMC_CTRL2			0x0003
+#define P_VDEC_ASSIST_MMC_CTRL2			DOS_REG_ADDR(VDEC_ASSIST_MMC_CTRL2)
+#define VDEC_ASSIST_MMC_CTRL3			0x0004
+#define P_VDEC_ASSIST_MMC_CTRL3			DOS_REG_ADDR(VDEC_ASSIST_MMC_CTRL3)
+#define VDEC_ASSIST_AMR1_INT0			0x0025
+#define P_VDEC_ASSIST_AMR1_INT0			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT0)
+#define VDEC_ASSIST_AMR1_INT1			0x0026
+#define P_VDEC_ASSIST_AMR1_INT1			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT1)
+#define VDEC_ASSIST_AMR1_INT2			0x0027
+#define P_VDEC_ASSIST_AMR1_INT2			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT2)
+#define VDEC_ASSIST_AMR1_INT3			0x0028
+#define P_VDEC_ASSIST_AMR1_INT3			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT3)
+#define VDEC_ASSIST_AMR1_INT4			0x0029
+#define P_VDEC_ASSIST_AMR1_INT4			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT4)
+#define VDEC_ASSIST_AMR1_INT5			0x002a
+#define P_VDEC_ASSIST_AMR1_INT5			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT5)
+#define VDEC_ASSIST_AMR1_INT6			0x002b
+#define P_VDEC_ASSIST_AMR1_INT6			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT6)
+#define VDEC_ASSIST_AMR1_INT7			0x002c
+#define P_VDEC_ASSIST_AMR1_INT7			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT7)
+#define VDEC_ASSIST_AMR1_INT8			0x002d
+#define P_VDEC_ASSIST_AMR1_INT8			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT8)
+#define VDEC_ASSIST_AMR1_INT9			0x002e
+#define P_VDEC_ASSIST_AMR1_INT9			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INT9)
+#define VDEC_ASSIST_AMR1_INTA			0x002f
+#define P_VDEC_ASSIST_AMR1_INTA			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTA)
+#define VDEC_ASSIST_AMR1_INTB			0x0030
+#define P_VDEC_ASSIST_AMR1_INTB			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTB)
+#define VDEC_ASSIST_AMR1_INTC			0x0031
+#define P_VDEC_ASSIST_AMR1_INTC			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTC)
+#define VDEC_ASSIST_AMR1_INTD			0x0032
+#define P_VDEC_ASSIST_AMR1_INTD			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTD)
+#define VDEC_ASSIST_AMR1_INTE			0x0033
+#define P_VDEC_ASSIST_AMR1_INTE			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTE)
+#define VDEC_ASSIST_AMR1_INTF			0x0034
+#define P_VDEC_ASSIST_AMR1_INTF			DOS_REG_ADDR(VDEC_ASSIST_AMR1_INTF)
+#define VDEC_ASSIST_AMR2_INT0			0x0035
+#define P_VDEC_ASSIST_AMR2_INT0			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT0)
+#define VDEC_ASSIST_AMR2_INT1			0x0036
+#define P_VDEC_ASSIST_AMR2_INT1			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT1)
+#define VDEC_ASSIST_AMR2_INT2			0x0037
+#define P_VDEC_ASSIST_AMR2_INT2			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT2)
+#define VDEC_ASSIST_AMR2_INT3			0x0038
+#define P_VDEC_ASSIST_AMR2_INT3			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT3)
+#define VDEC_ASSIST_AMR2_INT4			0x0039
+#define P_VDEC_ASSIST_AMR2_INT4			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT4)
+#define VDEC_ASSIST_AMR2_INT5			0x003a
+#define P_VDEC_ASSIST_AMR2_INT5			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT5)
+#define VDEC_ASSIST_AMR2_INT6			0x003b
+#define P_VDEC_ASSIST_AMR2_INT6			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT6)
+#define VDEC_ASSIST_AMR2_INT7			0x003c
+#define P_VDEC_ASSIST_AMR2_INT7			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT7)
+#define VDEC_ASSIST_AMR2_INT8			0x003d
+#define P_VDEC_ASSIST_AMR2_INT8			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT8)
+#define VDEC_ASSIST_AMR2_INT9			0x003e
+#define P_VDEC_ASSIST_AMR2_INT9			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INT9)
+#define VDEC_ASSIST_AMR2_INTA			0x003f
+#define P_VDEC_ASSIST_AMR2_INTA			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTA)
+#define VDEC_ASSIST_AMR2_INTB			0x0040
+#define P_VDEC_ASSIST_AMR2_INTB			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTB)
+#define VDEC_ASSIST_AMR2_INTC			0x0041
+#define P_VDEC_ASSIST_AMR2_INTC			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTC)
+#define VDEC_ASSIST_AMR2_INTD			0x0042
+#define P_VDEC_ASSIST_AMR2_INTD			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTD)
+#define VDEC_ASSIST_AMR2_INTE			0x0043
+#define P_VDEC_ASSIST_AMR2_INTE			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTE)
+#define VDEC_ASSIST_AMR2_INTF			0x0044
+#define P_VDEC_ASSIST_AMR2_INTF			DOS_REG_ADDR(VDEC_ASSIST_AMR2_INTF)
+#define VDEC_ASSIST_MBX_SSEL			0x0045
+#define P_VDEC_ASSIST_MBX_SSEL			DOS_REG_ADDR(VDEC_ASSIST_MBX_SSEL)
+#define VDEC_ASSIST_TIMER0_LO			0x0060
+#define P_VDEC_ASSIST_TIMER0_LO			DOS_REG_ADDR(VDEC_ASSIST_TIMER0_LO)
+#define VDEC_ASSIST_TIMER0_HI			0x0061
+#define P_VDEC_ASSIST_TIMER0_HI			DOS_REG_ADDR(VDEC_ASSIST_TIMER0_HI)
+#define VDEC_ASSIST_TIMER1_LO			0x0062
+#define P_VDEC_ASSIST_TIMER1_LO			DOS_REG_ADDR(VDEC_ASSIST_TIMER1_LO)
+#define VDEC_ASSIST_TIMER1_HI			0x0063
+#define P_VDEC_ASSIST_TIMER1_HI			DOS_REG_ADDR(VDEC_ASSIST_TIMER1_HI)
+#define VDEC_ASSIST_DMA_INT			0x0064
+#define P_VDEC_ASSIST_DMA_INT			DOS_REG_ADDR(VDEC_ASSIST_DMA_INT)
+#define VDEC_ASSIST_DMA_INT_MSK			0x0065
+#define P_VDEC_ASSIST_DMA_INT_MSK		DOS_REG_ADDR(VDEC_ASSIST_DMA_INT_MSK)
+#define VDEC_ASSIST_DMA_INT2			0x0066
+#define P_VDEC_ASSIST_DMA_INT2			DOS_REG_ADDR(VDEC_ASSIST_DMA_INT2)
+#define VDEC_ASSIST_DMA_INT_MSK2		0x0067
+#define P_VDEC_ASSIST_DMA_INT_MSK2		DOS_REG_ADDR(VDEC_ASSIST_DMA_INT_MSK2)
+#define VDEC_ASSIST_MBOX0_IRQ_REG		0x0070
+#define P_VDEC_ASSIST_MBOX0_IRQ_REG		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_IRQ_REG)
+#define VDEC_ASSIST_MBOX0_CLR_REG		0x0071
+#define P_VDEC_ASSIST_MBOX0_CLR_REG		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_CLR_REG)
+#define VDEC_ASSIST_MBOX0_MASK			0x0072
+#define P_VDEC_ASSIST_MBOX0_MASK		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_MASK)
+#define VDEC_ASSIST_MBOX0_FIQ_SEL		0x0073
+#define P_VDEC_ASSIST_MBOX0_FIQ_SEL		DOS_REG_ADDR(VDEC_ASSIST_MBOX0_FIQ_SEL)
+#define VDEC_ASSIST_MBOX1_IRQ_REG		0x0074
+#define P_VDEC_ASSIST_MBOX1_IRQ_REG		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_IRQ_REG)
+#define VDEC_ASSIST_MBOX1_CLR_REG		0x0075
+#define P_VDEC_ASSIST_MBOX1_CLR_REG		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_CLR_REG)
+#define VDEC_ASSIST_MBOX1_MASK			0x0076
+#define P_VDEC_ASSIST_MBOX1_MASK		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_MASK)
+#define VDEC_ASSIST_MBOX1_FIQ_SEL		0x0077
+#define P_VDEC_ASSIST_MBOX1_FIQ_SEL		DOS_REG_ADDR(VDEC_ASSIST_MBOX1_FIQ_SEL)
+#define VDEC_ASSIST_MBOX2_IRQ_REG		0x0078
+#define P_VDEC_ASSIST_MBOX2_IRQ_REG		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_IRQ_REG)
+#define VDEC_ASSIST_MBOX2_CLR_REG		0x0079
+#define P_VDEC_ASSIST_MBOX2_CLR_REG		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_CLR_REG)
+#define VDEC_ASSIST_MBOX2_MASK			0x007a
+#define P_VDEC_ASSIST_MBOX2_MASK		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_MASK)
+#define VDEC_ASSIST_MBOX2_FIQ_SEL		0x007b
+#define P_VDEC_ASSIST_MBOX2_FIQ_SEL		DOS_REG_ADDR(VDEC_ASSIST_MBOX2_FIQ_SEL)
+#define VDEC2_ASSIST_MMC_CTRL0			0x2001
+#define P_VDEC2_ASSIST_MMC_CTRL0		DOS_REG_ADDR(VDEC2_ASSIST_MMC_CTRL0)
+#define VDEC2_ASSIST_MMC_CTRL1			0x2002
+#define P_VDEC2_ASSIST_MMC_CTRL1		DOS_REG_ADDR(VDEC2_ASSIST_MMC_CTRL1)
+#define VDEC2_ASSIST_AMR1_INT0			0x2025
+#define P_VDEC2_ASSIST_AMR1_INT0		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT0)
+#define VDEC2_ASSIST_AMR1_INT1			0x2026
+#define P_VDEC2_ASSIST_AMR1_INT1		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT1)
+#define VDEC2_ASSIST_AMR1_INT2			0x2027
+#define P_VDEC2_ASSIST_AMR1_INT2		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT2)
+#define VDEC2_ASSIST_AMR1_INT3			0x2028
+#define P_VDEC2_ASSIST_AMR1_INT3		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT3)
+#define VDEC2_ASSIST_AMR1_INT4			0x2029
+#define P_VDEC2_ASSIST_AMR1_INT4		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT4)
+#define VDEC2_ASSIST_AMR1_INT5			0x202a
+#define P_VDEC2_ASSIST_AMR1_INT5		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT5)
+#define VDEC2_ASSIST_AMR1_INT6			0x202b
+#define P_VDEC2_ASSIST_AMR1_INT6		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT6)
+#define VDEC2_ASSIST_AMR1_INT7			0x202c
+#define P_VDEC2_ASSIST_AMR1_INT7		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT7)
+#define VDEC2_ASSIST_AMR1_INT8			0x202d
+#define P_VDEC2_ASSIST_AMR1_INT8		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT8)
+#define VDEC2_ASSIST_AMR1_INT9			0x202e
+#define P_VDEC2_ASSIST_AMR1_INT9		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INT9)
+#define VDEC2_ASSIST_AMR1_INTA			0x202f
+#define P_VDEC2_ASSIST_AMR1_INTA		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTA)
+#define VDEC2_ASSIST_AMR1_INTB			0x2030
+#define P_VDEC2_ASSIST_AMR1_INTB		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTB)
+#define VDEC2_ASSIST_AMR1_INTC			0x2031
+#define P_VDEC2_ASSIST_AMR1_INTC		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTC)
+#define VDEC2_ASSIST_AMR1_INTD			0x2032
+#define P_VDEC2_ASSIST_AMR1_INTD		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTD)
+#define VDEC2_ASSIST_AMR1_INTE			0x2033
+#define P_VDEC2_ASSIST_AMR1_INTE		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTE)
+#define VDEC2_ASSIST_AMR1_INTF			0x2034
+#define P_VDEC2_ASSIST_AMR1_INTF		DOS_REG_ADDR(VDEC2_ASSIST_AMR1_INTF)
+#define VDEC2_ASSIST_AMR2_INT0			0x2035
+#define P_VDEC2_ASSIST_AMR2_INT0		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT0)
+#define VDEC2_ASSIST_AMR2_INT1			0x2036
+#define P_VDEC2_ASSIST_AMR2_INT1		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT1)
+#define VDEC2_ASSIST_AMR2_INT2			0x2037
+#define P_VDEC2_ASSIST_AMR2_INT2		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT2)
+#define VDEC2_ASSIST_AMR2_INT3			0x2038
+#define P_VDEC2_ASSIST_AMR2_INT3		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT3)
+#define VDEC2_ASSIST_AMR2_INT4			0x2039
+#define P_VDEC2_ASSIST_AMR2_INT4		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT4)
+#define VDEC2_ASSIST_AMR2_INT5			0x203a
+#define P_VDEC2_ASSIST_AMR2_INT5		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT5)
+#define VDEC2_ASSIST_AMR2_INT6			0x203b
+#define P_VDEC2_ASSIST_AMR2_INT6		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT6)
+#define VDEC2_ASSIST_AMR2_INT7			0x203c
+#define P_VDEC2_ASSIST_AMR2_INT7		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT7)
+#define VDEC2_ASSIST_AMR2_INT8			0x203d
+#define P_VDEC2_ASSIST_AMR2_INT8		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT8)
+#define VDEC2_ASSIST_AMR2_INT9			0x203e
+#define P_VDEC2_ASSIST_AMR2_INT9		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INT9)
+#define VDEC2_ASSIST_AMR2_INTA			0x203f
+#define P_VDEC2_ASSIST_AMR2_INTA		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTA)
+#define VDEC2_ASSIST_AMR2_INTB			0x2040
+#define P_VDEC2_ASSIST_AMR2_INTB		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTB)
+#define VDEC2_ASSIST_AMR2_INTC			0x2041
+#define P_VDEC2_ASSIST_AMR2_INTC		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTC)
+#define VDEC2_ASSIST_AMR2_INTD			0x2042
+#define P_VDEC2_ASSIST_AMR2_INTD		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTD)
+#define VDEC2_ASSIST_AMR2_INTE			0x2043
+#define P_VDEC2_ASSIST_AMR2_INTE		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTE)
+#define VDEC2_ASSIST_AMR2_INTF			0x2044
+#define P_VDEC2_ASSIST_AMR2_INTF		DOS_REG_ADDR(VDEC2_ASSIST_AMR2_INTF)
+#define VDEC2_ASSIST_MBX_SSEL			0x2045
+#define P_VDEC2_ASSIST_MBX_SSEL			DOS_REG_ADDR(VDEC2_ASSIST_MBX_SSEL)
+#define VDEC2_ASSIST_TIMER0_LO			0x2060
+#define P_VDEC2_ASSIST_TIMER0_LO		DOS_REG_ADDR(VDEC2_ASSIST_TIMER0_LO)
+#define VDEC2_ASSIST_TIMER0_HI			0x2061
+#define P_VDEC2_ASSIST_TIMER0_HI		DOS_REG_ADDR(VDEC2_ASSIST_TIMER0_HI)
+#define VDEC2_ASSIST_TIMER1_LO			0x2062
+#define P_VDEC2_ASSIST_TIMER1_LO		DOS_REG_ADDR(VDEC2_ASSIST_TIMER1_LO)
+#define VDEC2_ASSIST_TIMER1_HI			0x2063
+#define P_VDEC2_ASSIST_TIMER1_HI		DOS_REG_ADDR(VDEC2_ASSIST_TIMER1_HI)
+#define VDEC2_ASSIST_DMA_INT			0x2064
+#define P_VDEC2_ASSIST_DMA_INT			DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT)
+#define VDEC2_ASSIST_DMA_INT_MSK		0x2065
+#define P_VDEC2_ASSIST_DMA_INT_MSK		DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT_MSK)
+#define VDEC2_ASSIST_DMA_INT2			0x2066
+#define P_VDEC2_ASSIST_DMA_INT2			DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT2)
+#define VDEC2_ASSIST_DMA_INT_MSK2		0x2067
+#define P_VDEC2_ASSIST_DMA_INT_MSK2		DOS_REG_ADDR(VDEC2_ASSIST_DMA_INT_MSK2)
+#define VDEC2_ASSIST_MBOX0_IRQ_REG		0x2070
+#define P_VDEC2_ASSIST_MBOX0_IRQ_REG		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_IRQ_REG)
+#define VDEC2_ASSIST_MBOX0_CLR_REG		0x2071
+#define P_VDEC2_ASSIST_MBOX0_CLR_REG		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_CLR_REG)
+#define VDEC2_ASSIST_MBOX0_MASK			0x2072
+#define P_VDEC2_ASSIST_MBOX0_MASK		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_MASK)
+#define VDEC2_ASSIST_MBOX0_FIQ_SEL		0x2073
+#define P_VDEC2_ASSIST_MBOX0_FIQ_SEL		DOS_REG_ADDR(VDEC2_ASSIST_MBOX0_FIQ_SEL)
+#define VDEC2_ASSIST_MBOX1_IRQ_REG		0x2074
+#define P_VDEC2_ASSIST_MBOX1_IRQ_REG		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_IRQ_REG)
+#define VDEC2_ASSIST_MBOX1_CLR_REG		0x2075
+#define P_VDEC2_ASSIST_MBOX1_CLR_REG		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_CLR_REG)
+#define VDEC2_ASSIST_MBOX1_MASK			0x2076
+#define P_VDEC2_ASSIST_MBOX1_MASK		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_MASK)
+#define VDEC2_ASSIST_MBOX1_FIQ_SEL		0x2077
+#define P_VDEC2_ASSIST_MBOX1_FIQ_SEL		DOS_REG_ADDR(VDEC2_ASSIST_MBOX1_FIQ_SEL)
+#define VDEC2_ASSIST_MBOX2_IRQ_REG		0x2078
+#define P_VDEC2_ASSIST_MBOX2_IRQ_REG		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_IRQ_REG)
+#define VDEC2_ASSIST_MBOX2_CLR_REG		0x2079
+#define P_VDEC2_ASSIST_MBOX2_CLR_REG		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_CLR_REG)
+#define VDEC2_ASSIST_MBOX2_MASK			0x207a
+#define P_VDEC2_ASSIST_MBOX2_MASK		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_MASK)
+#define VDEC2_ASSIST_MBOX2_FIQ_SEL		0x207b
+#define P_VDEC2_ASSIST_MBOX2_FIQ_SEL		DOS_REG_ADDR(VDEC2_ASSIST_MBOX2_FIQ_SEL)
+#define HCODEC_ASSIST_MMC_CTRL0			0x1001
+#define P_HCODEC_ASSIST_MMC_CTRL0		DOS_REG_ADDR(HCODEC_ASSIST_MMC_CTRL0)
+#define HCODEC_ASSIST_MMC_CTRL1			0x1002
+#define P_HCODEC_ASSIST_MMC_CTRL1		DOS_REG_ADDR(HCODEC_ASSIST_MMC_CTRL1)
+#define HCODEC_ASSIST_MMC_CTRL2			0x1003
+#define P_HCODEC_ASSIST_MMC_CTRL2		DOS_REG_ADDR(HCODEC_ASSIST_MMC_CTRL2)
+#define HCODEC_ASSIST_MMC_CTRL3			0x1004
+#define P_HCODEC_ASSIST_MMC_CTRL3		DOS_REG_ADDR(HCODEC_ASSIST_MMC_CTRL3)
+#define HCODEC_MFDIN_REG0_CRST			0x1010
+#define P_HCODEC_MFDIN_REG0_CRST		DOS_REG_ADDR(HCODEC_MFDIN_REG0_CRST)
+#define HCODEC_MFDIN_REG1_CTRL			0x1011
+#define P_HCODEC_MFDIN_REG1_CTRL		DOS_REG_ADDR(HCODEC_MFDIN_REG1_CTRL)
+#define HCODEC_MFDIN_REG2_STAT			0x1012
+#define P_HCODEC_MFDIN_REG2_STAT		DOS_REG_ADDR(HCODEC_MFDIN_REG2_STAT)
+#define HCODEC_MFDIN_REG3_CANV			0x1013
+#define P_HCODEC_MFDIN_REG3_CANV		DOS_REG_ADDR(HCODEC_MFDIN_REG3_CANV)
+#define HCODEC_MFDIN_REG4_LNR0			0x1014
+#define P_HCODEC_MFDIN_REG4_LNR0		DOS_REG_ADDR(HCODEC_MFDIN_REG4_LNR0)
+#define HCODEC_MFDIN_REG5_LNR1			0x1015
+#define P_HCODEC_MFDIN_REG5_LNR1		DOS_REG_ADDR(HCODEC_MFDIN_REG5_LNR1)
+#define HCODEC_MFDIN_REG6_DCFG			0x1016
+#define P_HCODEC_MFDIN_REG6_DCFG		DOS_REG_ADDR(HCODEC_MFDIN_REG6_DCFG)
+#define HCODEC_MFDIN_REG7_SCMD			0x1017
+#define P_HCODEC_MFDIN_REG7_SCMD		DOS_REG_ADDR(HCODEC_MFDIN_REG7_SCMD)
+#define HCODEC_MFDIN_REG8_DMBL			0x1018
+#define P_HCODEC_MFDIN_REG8_DMBL		DOS_REG_ADDR(HCODEC_MFDIN_REG8_DMBL)
+#define HCODEC_MFDIN_REG9_ENDN			0x1019
+#define P_HCODEC_MFDIN_REG9_ENDN		DOS_REG_ADDR(HCODEC_MFDIN_REG9_ENDN)
+#define HCODEC_MFDIN_REGA_CAV1			0x101a
+#define P_HCODEC_MFDIN_REGA_CAV1		DOS_REG_ADDR(HCODEC_MFDIN_REGA_CAV1)
+#define HCODEC_MFDIN_REGB_AMPC			0x101b
+#define P_HCODEC_MFDIN_REGB_AMPC		DOS_REG_ADDR(HCODEC_MFDIN_REGB_AMPC)
+#define HCODEC_ASSIST_AMR1_INT0			0x1025
+#define P_HCODEC_ASSIST_AMR1_INT0		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT0)
+#define HCODEC_ASSIST_AMR1_INT1			0x1026
+#define P_HCODEC_ASSIST_AMR1_INT1		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT1)
+#define HCODEC_ASSIST_AMR1_INT2			0x1027
+#define P_HCODEC_ASSIST_AMR1_INT2		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT2)
+#define HCODEC_ASSIST_AMR1_INT3			0x1028
+#define P_HCODEC_ASSIST_AMR1_INT3		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT3)
+#define HCODEC_ASSIST_AMR1_INT4			0x1029
+#define P_HCODEC_ASSIST_AMR1_INT4		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT4)
+#define HCODEC_ASSIST_AMR1_INT5			0x102a
+#define P_HCODEC_ASSIST_AMR1_INT5		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT5)
+#define HCODEC_ASSIST_AMR1_INT6			0x102b
+#define P_HCODEC_ASSIST_AMR1_INT6		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT6)
+#define HCODEC_ASSIST_AMR1_INT7			0x102c
+#define P_HCODEC_ASSIST_AMR1_INT7		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT7)
+#define HCODEC_ASSIST_AMR1_INT8			0x102d
+#define P_HCODEC_ASSIST_AMR1_INT8		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT8)
+#define HCODEC_ASSIST_AMR1_INT9			0x102e
+#define P_HCODEC_ASSIST_AMR1_INT9		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INT9)
+#define HCODEC_ASSIST_AMR1_INTA			0x102f
+#define P_HCODEC_ASSIST_AMR1_INTA		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTA)
+#define HCODEC_ASSIST_AMR1_INTB			0x1030
+#define P_HCODEC_ASSIST_AMR1_INTB		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTB)
+#define HCODEC_ASSIST_AMR1_INTC			0x1031
+#define P_HCODEC_ASSIST_AMR1_INTC		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTC)
+#define HCODEC_ASSIST_AMR1_INTD			0x1032
+#define P_HCODEC_ASSIST_AMR1_INTD		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTD)
+#define HCODEC_ASSIST_AMR1_INTE			0x1033
+#define P_HCODEC_ASSIST_AMR1_INTE		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTE)
+#define HCODEC_ASSIST_AMR1_INTF			0x1034
+#define P_HCODEC_ASSIST_AMR1_INTF		DOS_REG_ADDR(HCODEC_ASSIST_AMR1_INTF)
+#define HCODEC_ASSIST_AMR2_INT0			0x1035
+#define P_HCODEC_ASSIST_AMR2_INT0		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT0)
+#define HCODEC_ASSIST_AMR2_INT1			0x1036
+#define P_HCODEC_ASSIST_AMR2_INT1		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT1)
+#define HCODEC_ASSIST_AMR2_INT2			0x1037
+#define P_HCODEC_ASSIST_AMR2_INT2		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT2)
+#define HCODEC_ASSIST_AMR2_INT3			0x1038
+#define P_HCODEC_ASSIST_AMR2_INT3		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT3)
+#define HCODEC_ASSIST_AMR2_INT4			0x1039
+#define P_HCODEC_ASSIST_AMR2_INT4		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT4)
+#define HCODEC_ASSIST_AMR2_INT5			0x103a
+#define P_HCODEC_ASSIST_AMR2_INT5		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT5)
+#define HCODEC_ASSIST_AMR2_INT6			0x103b
+#define P_HCODEC_ASSIST_AMR2_INT6		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT6)
+#define HCODEC_ASSIST_AMR2_INT7			0x103c
+#define P_HCODEC_ASSIST_AMR2_INT7		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT7)
+#define HCODEC_ASSIST_AMR2_INT8			0x103d
+#define P_HCODEC_ASSIST_AMR2_INT8		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT8)
+#define HCODEC_ASSIST_AMR2_INT9			0x103e
+#define P_HCODEC_ASSIST_AMR2_INT9		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INT9)
+#define HCODEC_ASSIST_AMR2_INTA			0x103f
+#define P_HCODEC_ASSIST_AMR2_INTA		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTA)
+#define HCODEC_ASSIST_AMR2_INTB			0x1040
+#define P_HCODEC_ASSIST_AMR2_INTB		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTB)
+#define HCODEC_ASSIST_AMR2_INTC			0x1041
+#define P_HCODEC_ASSIST_AMR2_INTC		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTC)
+#define HCODEC_ASSIST_AMR2_INTD			0x1042
+#define P_HCODEC_ASSIST_AMR2_INTD		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTD)
+#define HCODEC_ASSIST_AMR2_INTE			0x1043
+#define P_HCODEC_ASSIST_AMR2_INTE		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTE)
+#define HCODEC_ASSIST_AMR2_INTF			0x1044
+#define P_HCODEC_ASSIST_AMR2_INTF		DOS_REG_ADDR(HCODEC_ASSIST_AMR2_INTF)
+#define HCODEC_ASSIST_MBX_SSEL			0x1045
+#define P_HCODEC_ASSIST_MBX_SSEL		DOS_REG_ADDR(HCODEC_ASSIST_MBX_SSEL)
+#define HCODEC_ASSIST_TIMER0_LO			0x1060
+#define P_HCODEC_ASSIST_TIMER0_LO		DOS_REG_ADDR(HCODEC_ASSIST_TIMER0_LO)
+#define HCODEC_ASSIST_TIMER0_HI			0x1061
+#define P_HCODEC_ASSIST_TIMER0_HI		DOS_REG_ADDR(HCODEC_ASSIST_TIMER0_HI)
+#define HCODEC_ASSIST_TIMER1_LO			0x1062
+#define P_HCODEC_ASSIST_TIMER1_LO		DOS_REG_ADDR(HCODEC_ASSIST_TIMER1_LO)
+#define HCODEC_ASSIST_TIMER1_HI			0x1063
+#define P_HCODEC_ASSIST_TIMER1_HI		DOS_REG_ADDR(HCODEC_ASSIST_TIMER1_HI)
+#define HCODEC_ASSIST_DMA_INT			0x1064
+#define P_HCODEC_ASSIST_DMA_INT			DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT)
+#define HCODEC_ASSIST_DMA_INT_MSK		0x1065
+#define P_HCODEC_ASSIST_DMA_INT_MSK		DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT_MSK)
+#define HCODEC_ASSIST_DMA_INT2			0x1066
+#define P_HCODEC_ASSIST_DMA_INT2		DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT2)
+#define HCODEC_ASSIST_DMA_INT_MSK2		0x1067
+#define P_HCODEC_ASSIST_DMA_INT_MSK2		DOS_REG_ADDR(HCODEC_ASSIST_DMA_INT_MSK2)
+#define HCODEC_ASSIST_MBOX0_IRQ_REG		0x1070
+#define P_HCODEC_ASSIST_MBOX0_IRQ_REG		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_IRQ_REG)
+#define HCODEC_ASSIST_MBOX0_CLR_REG		0x1071
+#define P_HCODEC_ASSIST_MBOX0_CLR_REG		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_CLR_REG)
+#define HCODEC_ASSIST_MBOX0_MASK		0x1072
+#define P_HCODEC_ASSIST_MBOX0_MASK		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_MASK)
+#define HCODEC_ASSIST_MBOX0_FIQ_SEL		0x1073
+#define P_HCODEC_ASSIST_MBOX0_FIQ_SEL		DOS_REG_ADDR(HCODEC_ASSIST_MBOX0_FIQ_SEL)
+#define HCODEC_ASSIST_MBOX1_IRQ_REG		0x1074
+#define P_HCODEC_ASSIST_MBOX1_IRQ_REG		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_IRQ_REG)
+#define HCODEC_ASSIST_MBOX1_CLR_REG		0x1075
+#define P_HCODEC_ASSIST_MBOX1_CLR_REG		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_CLR_REG)
+#define HCODEC_ASSIST_MBOX1_MASK		0x1076
+#define P_HCODEC_ASSIST_MBOX1_MASK		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_MASK)
+#define HCODEC_ASSIST_MBOX1_FIQ_SEL		0x1077
+#define P_HCODEC_ASSIST_MBOX1_FIQ_SEL		DOS_REG_ADDR(HCODEC_ASSIST_MBOX1_FIQ_SEL)
+#define HCODEC_ASSIST_MBOX2_IRQ_REG		0x1078
+#define P_HCODEC_ASSIST_MBOX2_IRQ_REG		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_IRQ_REG)
+#define HCODEC_ASSIST_MBOX2_CLR_REG		0x1079
+#define P_HCODEC_ASSIST_MBOX2_CLR_REG		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_CLR_REG)
+#define HCODEC_ASSIST_MBOX2_MASK		0x107a
+#define P_HCODEC_ASSIST_MBOX2_MASK		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_MASK)
+#define HCODEC_ASSIST_MBOX2_FIQ_SEL		0x107b
+#define P_HCODEC_ASSIST_MBOX2_FIQ_SEL		DOS_REG_ADDR(HCODEC_ASSIST_MBOX2_FIQ_SEL)
+#define MC_CTRL_REG				0x0900
+#define P_MC_CTRL_REG				DOS_REG_ADDR(MC_CTRL_REG)
+#define MC_MB_INFO				0x0901
+#define P_MC_MB_INFO				DOS_REG_ADDR(MC_MB_INFO)
+#define MC_PIC_INFO				0x0902
+#define P_MC_PIC_INFO				DOS_REG_ADDR(MC_PIC_INFO)
+#define MC_HALF_PEL_ONE				0x0903
+#define P_MC_HALF_PEL_ONE			DOS_REG_ADDR(MC_HALF_PEL_ONE)
+#define MC_HALF_PEL_TWO				0x0904
+#define P_MC_HALF_PEL_TWO			DOS_REG_ADDR(MC_HALF_PEL_TWO)
+#define POWER_CTL_MC				0x0905
+#define P_POWER_CTL_MC				DOS_REG_ADDR(POWER_CTL_MC)
+#define MC_CMD					0x0906
+#define P_MC_CMD				DOS_REG_ADDR(MC_CMD)
+#define MC_CTRL0				0x0907
+#define P_MC_CTRL0				DOS_REG_ADDR(MC_CTRL0)
+#define MC_PIC_W_H				0x0908
+#define P_MC_PIC_W_H				DOS_REG_ADDR(MC_PIC_W_H)
+#define MC_STATUS0				0x0909
+#define P_MC_STATUS0				DOS_REG_ADDR(MC_STATUS0)
+#define MC_STATUS1				0x090a
+#define P_MC_STATUS1				DOS_REG_ADDR(MC_STATUS1)
+#define MC_CTRL1				0x090b
+#define P_MC_CTRL1				DOS_REG_ADDR(MC_CTRL1)
+#define MC_MIX_RATIO0				0x090c
+#define P_MC_MIX_RATIO0				DOS_REG_ADDR(MC_MIX_RATIO0)
+#define MC_MIX_RATIO1				0x090d
+#define P_MC_MIX_RATIO1				DOS_REG_ADDR(MC_MIX_RATIO1)
+#define MC_DP_MB_XY				0x090e
+#define P_MC_DP_MB_XY				DOS_REG_ADDR(MC_DP_MB_XY)
+#define MC_OM_MB_XY				0x090f
+#define P_MC_OM_MB_XY				DOS_REG_ADDR(MC_OM_MB_XY)
+#define PSCALE_RST				0x0910
+#define P_PSCALE_RST				DOS_REG_ADDR(PSCALE_RST)
+#define PSCALE_CTRL				0x0911
+#define P_PSCALE_CTRL				DOS_REG_ADDR(PSCALE_CTRL)
+#define PSCALE_PICI_W				0x0912
+#define P_PSCALE_PICI_W				DOS_REG_ADDR(PSCALE_PICI_W)
+#define PSCALE_PICI_H				0x0913
+#define P_PSCALE_PICI_H				DOS_REG_ADDR(PSCALE_PICI_H)
+#define PSCALE_PICO_W				0x0914
+#define P_PSCALE_PICO_W				DOS_REG_ADDR(PSCALE_PICO_W)
+#define PSCALE_PICO_H				0x0915
+#define P_PSCALE_PICO_H				DOS_REG_ADDR(PSCALE_PICO_H)
+#define PSCALE_PICO_START_X			0x0916
+#define P_PSCALE_PICO_START_X			DOS_REG_ADDR(PSCALE_PICO_START_X)
+#define PSCALE_PICO_START_Y			0x0917
+#define P_PSCALE_PICO_START_Y			DOS_REG_ADDR(PSCALE_PICO_START_Y)
+#define PSCALE_DUMMY				0x0918
+#define P_PSCALE_DUMMY				DOS_REG_ADDR(PSCALE_DUMMY)
+#define PSCALE_FILT0_COEF0			0x0919
+#define P_PSCALE_FILT0_COEF0			DOS_REG_ADDR(PSCALE_FILT0_COEF0)
+#define PSCALE_FILT0_COEF1			0x091a
+#define P_PSCALE_FILT0_COEF1			DOS_REG_ADDR(PSCALE_FILT0_COEF1)
+#define PSCALE_CMD_CTRL				0x091b
+#define P_PSCALE_CMD_CTRL			DOS_REG_ADDR(PSCALE_CMD_CTRL)
+#define PSCALE_CMD_BLK_X			0x091c
+#define P_PSCALE_CMD_BLK_X			DOS_REG_ADDR(PSCALE_CMD_BLK_X)
+#define PSCALE_CMD_BLK_Y			0x091d
+#define P_PSCALE_CMD_BLK_Y			DOS_REG_ADDR(PSCALE_CMD_BLK_Y)
+#define PSCALE_STATUS				0x091e
+#define P_PSCALE_STATUS				DOS_REG_ADDR(PSCALE_STATUS)
+#define PSCALE_BMEM_ADDR			0x091f
+#define P_PSCALE_BMEM_ADDR			DOS_REG_ADDR(PSCALE_BMEM_ADDR)
+#define PSCALE_BMEM_DAT				0x0920
+#define P_PSCALE_BMEM_DAT			DOS_REG_ADDR(PSCALE_BMEM_DAT)
+#define PSCALE_DRAM_BUF_CTRL			0x0921
+#define P_PSCALE_DRAM_BUF_CTRL			DOS_REG_ADDR(PSCALE_DRAM_BUF_CTRL)
+#define PSCALE_MCMD_CTRL			0x0922
+#define P_PSCALE_MCMD_CTRL			DOS_REG_ADDR(PSCALE_MCMD_CTRL)
+#define PSCALE_MCMD_XSIZE			0x0923
+#define P_PSCALE_MCMD_XSIZE			DOS_REG_ADDR(PSCALE_MCMD_XSIZE)
+#define PSCALE_MCMD_YSIZE			0x0924
+#define P_PSCALE_MCMD_YSIZE			DOS_REG_ADDR(PSCALE_MCMD_YSIZE)
+#define PSCALE_RBUF_START_BLKX			0x0925
+#define P_PSCALE_RBUF_START_BLKX		DOS_REG_ADDR(PSCALE_RBUF_START_BLKX)
+#define PSCALE_RBUF_START_BLKY			0x0926
+#define P_PSCALE_RBUF_START_BLKY		DOS_REG_ADDR(PSCALE_RBUF_START_BLKY)
+#define PSCALE_PICO_SHIFT_XY			0x0928
+#define P_PSCALE_PICO_SHIFT_XY			DOS_REG_ADDR(PSCALE_PICO_SHIFT_XY)
+#define PSCALE_CTRL1				0x0929
+#define P_PSCALE_CTRL1				DOS_REG_ADDR(PSCALE_CTRL1)
+#define PSCALE_SRCKEY_CTRL0			0x092a
+#define P_PSCALE_SRCKEY_CTRL0			DOS_REG_ADDR(PSCALE_SRCKEY_CTRL0)
+#define PSCALE_SRCKEY_CTRL1			0x092b
+#define P_PSCALE_SRCKEY_CTRL1			DOS_REG_ADDR(PSCALE_SRCKEY_CTRL1)
+#define PSCALE_CANVAS_RD_ADDR			0x092c
+#define P_PSCALE_CANVAS_RD_ADDR			DOS_REG_ADDR(PSCALE_CANVAS_RD_ADDR)
+#define PSCALE_CANVAS_WR_ADDR			0x092d
+#define P_PSCALE_CANVAS_WR_ADDR			DOS_REG_ADDR(PSCALE_CANVAS_WR_ADDR)
+#define PSCALE_CTRL2				0x092e
+#define P_PSCALE_CTRL2				DOS_REG_ADDR(PSCALE_CTRL2)
+#define HDEC_MC_OMEM_AUTO			0x0930
+#define P_HDEC_MC_OMEM_AUTO			DOS_REG_ADDR(HDEC_MC_OMEM_AUTO)
+#define HDEC_MC_MBRIGHT_IDX			0x0931
+#define P_HDEC_MC_MBRIGHT_IDX			DOS_REG_ADDR(HDEC_MC_MBRIGHT_IDX)
+#define HDEC_MC_MBRIGHT_RD			0x0932
+#define P_HDEC_MC_MBRIGHT_RD			DOS_REG_ADDR(HDEC_MC_MBRIGHT_RD)
+#define MC_MPORT_CTRL				0x0940
+#define P_MC_MPORT_CTRL				DOS_REG_ADDR(MC_MPORT_CTRL)
+#define MC_MPORT_DAT				0x0941
+#define P_MC_MPORT_DAT				DOS_REG_ADDR(MC_MPORT_DAT)
+#define MC_WT_PRED_CTRL				0x0942
+#define P_MC_WT_PRED_CTRL			DOS_REG_ADDR(MC_WT_PRED_CTRL)
+#define MC_MBBOT_ST_EVEN_ADDR			0x0944
+#define P_MC_MBBOT_ST_EVEN_ADDR			DOS_REG_ADDR(MC_MBBOT_ST_EVEN_ADDR)
+#define MC_MBBOT_ST_ODD_ADDR			0x0945
+#define P_MC_MBBOT_ST_ODD_ADDR			DOS_REG_ADDR(MC_MBBOT_ST_ODD_ADDR)
+#define MC_DPDN_MB_XY				0x0946
+#define P_MC_DPDN_MB_XY				DOS_REG_ADDR(MC_DPDN_MB_XY)
+#define MC_OMDN_MB_XY				0x0947
+#define P_MC_OMDN_MB_XY				DOS_REG_ADDR(MC_OMDN_MB_XY)
+#define MC_HCMDBUF_H				0x0948
+#define P_MC_HCMDBUF_H				DOS_REG_ADDR(MC_HCMDBUF_H)
+#define MC_HCMDBUF_L				0x0949
+#define P_MC_HCMDBUF_L				DOS_REG_ADDR(MC_HCMDBUF_L)
+#define MC_HCMD_H				0x094a
+#define P_MC_HCMD_H				DOS_REG_ADDR(MC_HCMD_H)
+#define MC_HCMD_L				0x094b
+#define P_MC_HCMD_L				DOS_REG_ADDR(MC_HCMD_L)
+#define MC_IDCT_DAT				0x094c
+#define P_MC_IDCT_DAT				DOS_REG_ADDR(MC_IDCT_DAT)
+#define MC_CTRL_GCLK_CTRL			0x094d
+#define P_MC_CTRL_GCLK_CTRL			DOS_REG_ADDR(MC_CTRL_GCLK_CTRL)
+#define MC_OTHER_GCLK_CTRL			0x094e
+#define P_MC_OTHER_GCLK_CTRL			DOS_REG_ADDR(MC_OTHER_GCLK_CTRL)
+#define MC_CTRL2				0x094f
+#define P_MC_CTRL2				DOS_REG_ADDR(MC_CTRL2)
+#define MDEC_PIC_DC_CTRL			0x098e
+#define P_MDEC_PIC_DC_CTRL			DOS_REG_ADDR(MDEC_PIC_DC_CTRL)
+#define MDEC_PIC_DC_STATUS			0x098f
+#define P_MDEC_PIC_DC_STATUS			DOS_REG_ADDR(MDEC_PIC_DC_STATUS)
+#define ANC0_CANVAS_ADDR			0x0990
+#define P_ANC0_CANVAS_ADDR			DOS_REG_ADDR(ANC0_CANVAS_ADDR)
+#define ANC1_CANVAS_ADDR			0x0991
+#define P_ANC1_CANVAS_ADDR			DOS_REG_ADDR(ANC1_CANVAS_ADDR)
+#define ANC2_CANVAS_ADDR			0x0992
+#define P_ANC2_CANVAS_ADDR			DOS_REG_ADDR(ANC2_CANVAS_ADDR)
+#define ANC3_CANVAS_ADDR			0x0993
+#define P_ANC3_CANVAS_ADDR			DOS_REG_ADDR(ANC3_CANVAS_ADDR)
+#define ANC4_CANVAS_ADDR			0x0994
+#define P_ANC4_CANVAS_ADDR			DOS_REG_ADDR(ANC4_CANVAS_ADDR)
+#define ANC5_CANVAS_ADDR			0x0995
+#define P_ANC5_CANVAS_ADDR			DOS_REG_ADDR(ANC5_CANVAS_ADDR)
+#define ANC6_CANVAS_ADDR			0x0996
+#define P_ANC6_CANVAS_ADDR			DOS_REG_ADDR(ANC6_CANVAS_ADDR)
+#define ANC7_CANVAS_ADDR			0x0997
+#define P_ANC7_CANVAS_ADDR			DOS_REG_ADDR(ANC7_CANVAS_ADDR)
+#define ANC8_CANVAS_ADDR			0x0998
+#define P_ANC8_CANVAS_ADDR			DOS_REG_ADDR(ANC8_CANVAS_ADDR)
+#define ANC9_CANVAS_ADDR			0x0999
+#define P_ANC9_CANVAS_ADDR			DOS_REG_ADDR(ANC9_CANVAS_ADDR)
+#define ANC10_CANVAS_ADDR			0x099a
+#define P_ANC10_CANVAS_ADDR			DOS_REG_ADDR(ANC10_CANVAS_ADDR)
+#define ANC11_CANVAS_ADDR			0x099b
+#define P_ANC11_CANVAS_ADDR			DOS_REG_ADDR(ANC11_CANVAS_ADDR)
+#define ANC12_CANVAS_ADDR			0x099c
+#define P_ANC12_CANVAS_ADDR			DOS_REG_ADDR(ANC12_CANVAS_ADDR)
+#define ANC13_CANVAS_ADDR			0x099d
+#define P_ANC13_CANVAS_ADDR			DOS_REG_ADDR(ANC13_CANVAS_ADDR)
+#define ANC14_CANVAS_ADDR			0x099e
+#define P_ANC14_CANVAS_ADDR			DOS_REG_ADDR(ANC14_CANVAS_ADDR)
+#define ANC15_CANVAS_ADDR			0x099f
+#define P_ANC15_CANVAS_ADDR			DOS_REG_ADDR(ANC15_CANVAS_ADDR)
+#define ANC16_CANVAS_ADDR			0x09a0
+#define P_ANC16_CANVAS_ADDR			DOS_REG_ADDR(ANC16_CANVAS_ADDR)
+#define ANC17_CANVAS_ADDR			0x09a1
+#define P_ANC17_CANVAS_ADDR			DOS_REG_ADDR(ANC17_CANVAS_ADDR)
+#define ANC18_CANVAS_ADDR			0x09a2
+#define P_ANC18_CANVAS_ADDR			DOS_REG_ADDR(ANC18_CANVAS_ADDR)
+#define ANC19_CANVAS_ADDR			0x09a3
+#define P_ANC19_CANVAS_ADDR			DOS_REG_ADDR(ANC19_CANVAS_ADDR)
+#define ANC20_CANVAS_ADDR			0x09a4
+#define P_ANC20_CANVAS_ADDR			DOS_REG_ADDR(ANC20_CANVAS_ADDR)
+#define ANC21_CANVAS_ADDR			0x09a5
+#define P_ANC21_CANVAS_ADDR			DOS_REG_ADDR(ANC21_CANVAS_ADDR)
+#define ANC22_CANVAS_ADDR			0x09a6
+#define P_ANC22_CANVAS_ADDR			DOS_REG_ADDR(ANC22_CANVAS_ADDR)
+#define ANC23_CANVAS_ADDR			0x09a7
+#define P_ANC23_CANVAS_ADDR			DOS_REG_ADDR(ANC23_CANVAS_ADDR)
+#define ANC24_CANVAS_ADDR			0x09a8
+#define P_ANC24_CANVAS_ADDR			DOS_REG_ADDR(ANC24_CANVAS_ADDR)
+#define ANC25_CANVAS_ADDR			0x09a9
+#define P_ANC25_CANVAS_ADDR			DOS_REG_ADDR(ANC25_CANVAS_ADDR)
+#define ANC26_CANVAS_ADDR			0x09aa
+#define P_ANC26_CANVAS_ADDR			DOS_REG_ADDR(ANC26_CANVAS_ADDR)
+#define ANC27_CANVAS_ADDR			0x09ab
+#define P_ANC27_CANVAS_ADDR			DOS_REG_ADDR(ANC27_CANVAS_ADDR)
+#define ANC28_CANVAS_ADDR			0x09ac
+#define P_ANC28_CANVAS_ADDR			DOS_REG_ADDR(ANC28_CANVAS_ADDR)
+#define ANC29_CANVAS_ADDR			0x09ad
+#define P_ANC29_CANVAS_ADDR			DOS_REG_ADDR(ANC29_CANVAS_ADDR)
+#define ANC30_CANVAS_ADDR			0x09ae
+#define P_ANC30_CANVAS_ADDR			DOS_REG_ADDR(ANC30_CANVAS_ADDR)
+#define ANC31_CANVAS_ADDR			0x09af
+#define P_ANC31_CANVAS_ADDR			DOS_REG_ADDR(ANC31_CANVAS_ADDR)
+#define DBKR_CANVAS_ADDR			0x09b0
+#define P_DBKR_CANVAS_ADDR			DOS_REG_ADDR(DBKR_CANVAS_ADDR)
+#define DBKW_CANVAS_ADDR			0x09b1
+#define P_DBKW_CANVAS_ADDR			DOS_REG_ADDR(DBKW_CANVAS_ADDR)
+#define REC_CANVAS_ADDR				0x09b2
+#define P_REC_CANVAS_ADDR			DOS_REG_ADDR(REC_CANVAS_ADDR)
+#define CURR_CANVAS_CTRL			0x09b3
+#define P_CURR_CANVAS_CTRL			DOS_REG_ADDR(CURR_CANVAS_CTRL)
+#define MDEC_PIC_DC_THRESH			0x09b8
+#define P_MDEC_PIC_DC_THRESH			DOS_REG_ADDR(MDEC_PIC_DC_THRESH)
+#define MDEC_PICR_BUF_STATUS			0x09b9
+#define P_MDEC_PICR_BUF_STATUS			DOS_REG_ADDR(MDEC_PICR_BUF_STATUS)
+#define MDEC_PICW_BUF_STATUS			0x09ba
+#define P_MDEC_PICW_BUF_STATUS			DOS_REG_ADDR(MDEC_PICW_BUF_STATUS)
+#define MCW_DBLK_WRRSP_CNT			0x09bb
+#define P_MCW_DBLK_WRRSP_CNT			DOS_REG_ADDR(MCW_DBLK_WRRSP_CNT)
+#define MC_MBBOT_WRRSP_CNT			0x09bc
+#define P_MC_MBBOT_WRRSP_CNT			DOS_REG_ADDR(MC_MBBOT_WRRSP_CNT)
+#define MDEC_PICW_BUF2_STATUS			0x09bd
+#define P_MDEC_PICW_BUF2_STATUS			DOS_REG_ADDR(MDEC_PICW_BUF2_STATUS)
+#define WRRSP_FIFO_PICW_DBK			0x09be
+#define P_WRRSP_FIFO_PICW_DBK			DOS_REG_ADDR(WRRSP_FIFO_PICW_DBK)
+#define WRRSP_FIFO_PICW_MC			0x09bf
+#define P_WRRSP_FIFO_PICW_MC			DOS_REG_ADDR(WRRSP_FIFO_PICW_MC)
+#define AV_SCRATCH_0				0x09c0
+#define P_AV_SCRATCH_0				DOS_REG_ADDR(AV_SCRATCH_0)
+#define AV_SCRATCH_1				0x09c1
+#define P_AV_SCRATCH_1				DOS_REG_ADDR(AV_SCRATCH_1)
+#define AV_SCRATCH_2				0x09c2
+#define P_AV_SCRATCH_2				DOS_REG_ADDR(AV_SCRATCH_2)
+#define AV_SCRATCH_3				0x09c3
+#define P_AV_SCRATCH_3				DOS_REG_ADDR(AV_SCRATCH_3)
+#define AV_SCRATCH_4				0x09c4
+#define P_AV_SCRATCH_4				DOS_REG_ADDR(AV_SCRATCH_4)
+#define AV_SCRATCH_5				0x09c5
+#define P_AV_SCRATCH_5				DOS_REG_ADDR(AV_SCRATCH_5)
+#define AV_SCRATCH_6				0x09c6
+#define P_AV_SCRATCH_6				DOS_REG_ADDR(AV_SCRATCH_6)
+#define AV_SCRATCH_7				0x09c7
+#define P_AV_SCRATCH_7				DOS_REG_ADDR(AV_SCRATCH_7)
+#define AV_SCRATCH_8				0x09c8
+#define P_AV_SCRATCH_8				DOS_REG_ADDR(AV_SCRATCH_8)
+#define AV_SCRATCH_9				0x09c9
+#define P_AV_SCRATCH_9				DOS_REG_ADDR(AV_SCRATCH_9)
+#define AV_SCRATCH_A				0x09ca
+#define P_AV_SCRATCH_A				DOS_REG_ADDR(AV_SCRATCH_A)
+#define AV_SCRATCH_B				0x09cb
+#define P_AV_SCRATCH_B				DOS_REG_ADDR(AV_SCRATCH_B)
+#define AV_SCRATCH_C				0x09cc
+#define P_AV_SCRATCH_C				DOS_REG_ADDR(AV_SCRATCH_C)
+#define AV_SCRATCH_D				0x09cd
+#define P_AV_SCRATCH_D				DOS_REG_ADDR(AV_SCRATCH_D)
+#define AV_SCRATCH_E				0x09ce
+#define P_AV_SCRATCH_E				DOS_REG_ADDR(AV_SCRATCH_E)
+#define AV_SCRATCH_F				0x09cf
+#define P_AV_SCRATCH_F				DOS_REG_ADDR(AV_SCRATCH_F)
+#define AV_SCRATCH_G				0x09d0
+#define P_AV_SCRATCH_G				DOS_REG_ADDR(AV_SCRATCH_G)
+#define AV_SCRATCH_H				0x09d1
+#define P_AV_SCRATCH_H				DOS_REG_ADDR(AV_SCRATCH_H)
+#define AV_SCRATCH_I				0x09d2
+#define P_AV_SCRATCH_I				DOS_REG_ADDR(AV_SCRATCH_I)
+#define AV_SCRATCH_J				0x09d3
+#define P_AV_SCRATCH_J				DOS_REG_ADDR(AV_SCRATCH_J)
+#define AV_SCRATCH_K				0x09d4
+#define P_AV_SCRATCH_K				DOS_REG_ADDR(AV_SCRATCH_K)
+#define AV_SCRATCH_L				0x09d5
+#define P_AV_SCRATCH_L				DOS_REG_ADDR(AV_SCRATCH_L)
+#define AV_SCRATCH_M				0x09d6
+#define P_AV_SCRATCH_M				DOS_REG_ADDR(AV_SCRATCH_M)
+#define AV_SCRATCH_N				0x09d7
+#define P_AV_SCRATCH_N				DOS_REG_ADDR(AV_SCRATCH_N)
+#define WRRSP_CO_MB				0x09d8
+#define P_WRRSP_CO_MB				DOS_REG_ADDR(WRRSP_CO_MB)
+#define WRRSP_DCAC				0x09d9
+#define P_WRRSP_DCAC				DOS_REG_ADDR(WRRSP_DCAC)
+#define WRRSP_VLD				0x09da
+#define P_WRRSP_VLD				DOS_REG_ADDR(WRRSP_VLD)
+#define MDEC_DOUBLEW_CFG0			0x09db
+#define P_MDEC_DOUBLEW_CFG0			DOS_REG_ADDR(MDEC_DOUBLEW_CFG0)
+#define MDEC_DOUBLEW_CFG1			0x09dc
+#define P_MDEC_DOUBLEW_CFG1			DOS_REG_ADDR(MDEC_DOUBLEW_CFG1)
+#define MDEC_DOUBLEW_CFG2			0x09dd
+#define P_MDEC_DOUBLEW_CFG2			DOS_REG_ADDR(MDEC_DOUBLEW_CFG2)
+#define MDEC_DOUBLEW_CFG3			0x09de
+#define P_MDEC_DOUBLEW_CFG3			DOS_REG_ADDR(MDEC_DOUBLEW_CFG3)
+#define MDEC_DOUBLEW_CFG4			0x09df
+#define P_MDEC_DOUBLEW_CFG4			DOS_REG_ADDR(MDEC_DOUBLEW_CFG4)
+#define MDEC_DOUBLEW_CFG5			0x09e0
+#define P_MDEC_DOUBLEW_CFG5			DOS_REG_ADDR(MDEC_DOUBLEW_CFG5)
+#define MDEC_DOUBLEW_CFG6			0x09e1
+#define P_MDEC_DOUBLEW_CFG6			DOS_REG_ADDR(MDEC_DOUBLEW_CFG6)
+#define MDEC_DOUBLEW_CFG7			0x09e2
+#define P_MDEC_DOUBLEW_CFG7			DOS_REG_ADDR(MDEC_DOUBLEW_CFG7)
+#define MDEC_DOUBLEW_STATUS			0x09e3
+#define P_MDEC_DOUBLEW_STATUS			DOS_REG_ADDR(MDEC_DOUBLEW_STATUS)
+#define DBLK_RST				0x0950
+#define P_DBLK_RST				DOS_REG_ADDR(DBLK_RST)
+#define DBLK_CTRL				0x0951
+#define P_DBLK_CTRL				DOS_REG_ADDR(DBLK_CTRL)
+#define DBLK_MB_WID_HEIGHT			0x0952
+#define P_DBLK_MB_WID_HEIGHT			DOS_REG_ADDR(DBLK_MB_WID_HEIGHT)
+#define DBLK_STATUS				0x0953
+#define P_DBLK_STATUS				DOS_REG_ADDR(DBLK_STATUS)
+#define DBLK_CMD_CTRL				0x0954
+#define P_DBLK_CMD_CTRL				DOS_REG_ADDR(DBLK_CMD_CTRL)
+#define DBLK_MB_XY				0x0955
+#define P_DBLK_MB_XY				DOS_REG_ADDR(DBLK_MB_XY)
+#define DBLK_QP					0x0956
+#define P_DBLK_QP				DOS_REG_ADDR(DBLK_QP)
+#define DBLK_Y_BHFILT				0x0957
+#define P_DBLK_Y_BHFILT				DOS_REG_ADDR(DBLK_Y_BHFILT)
+#define DBLK_Y_BHFILT_HIGH			0x0958
+#define P_DBLK_Y_BHFILT_HIGH			DOS_REG_ADDR(DBLK_Y_BHFILT_HIGH)
+#define DBLK_Y_BVFILT				0x0959
+#define P_DBLK_Y_BVFILT				DOS_REG_ADDR(DBLK_Y_BVFILT)
+#define DBLK_CB_BFILT				0x095a
+#define P_DBLK_CB_BFILT				DOS_REG_ADDR(DBLK_CB_BFILT)
+#define DBLK_CR_BFILT				0x095b
+#define P_DBLK_CR_BFILT				DOS_REG_ADDR(DBLK_CR_BFILT)
+#define DBLK_Y_HFILT				0x095c
+#define P_DBLK_Y_HFILT				DOS_REG_ADDR(DBLK_Y_HFILT)
+#define DBLK_Y_HFILT_HIGH			0x095d
+#define P_DBLK_Y_HFILT_HIGH			DOS_REG_ADDR(DBLK_Y_HFILT_HIGH)
+#define DBLK_Y_VFILT				0x095e
+#define P_DBLK_Y_VFILT				DOS_REG_ADDR(DBLK_Y_VFILT)
+#define DBLK_CB_FILT				0x095f
+#define P_DBLK_CB_FILT				DOS_REG_ADDR(DBLK_CB_FILT)
+#define DBLK_CR_FILT				0x0960
+#define P_DBLK_CR_FILT				DOS_REG_ADDR(DBLK_CR_FILT)
+#define DBLK_BETAX_QP_SEL			0x0961
+#define P_DBLK_BETAX_QP_SEL			DOS_REG_ADDR(DBLK_BETAX_QP_SEL)
+#define DBLK_CLIP_CTRL0				0x0962
+#define P_DBLK_CLIP_CTRL0			DOS_REG_ADDR(DBLK_CLIP_CTRL0)
+#define DBLK_CLIP_CTRL1				0x0963
+#define P_DBLK_CLIP_CTRL1			DOS_REG_ADDR(DBLK_CLIP_CTRL1)
+#define DBLK_CLIP_CTRL2				0x0964
+#define P_DBLK_CLIP_CTRL2			DOS_REG_ADDR(DBLK_CLIP_CTRL2)
+#define DBLK_CLIP_CTRL3				0x0965
+#define P_DBLK_CLIP_CTRL3			DOS_REG_ADDR(DBLK_CLIP_CTRL3)
+#define DBLK_CLIP_CTRL4				0x0966
+#define P_DBLK_CLIP_CTRL4			DOS_REG_ADDR(DBLK_CLIP_CTRL4)
+#define DBLK_CLIP_CTRL5				0x0967
+#define P_DBLK_CLIP_CTRL5			DOS_REG_ADDR(DBLK_CLIP_CTRL5)
+#define DBLK_CLIP_CTRL6				0x0968
+#define P_DBLK_CLIP_CTRL6			DOS_REG_ADDR(DBLK_CLIP_CTRL6)
+#define DBLK_CLIP_CTRL7				0x0969
+#define P_DBLK_CLIP_CTRL7			DOS_REG_ADDR(DBLK_CLIP_CTRL7)
+#define DBLK_CLIP_CTRL8				0x096a
+#define P_DBLK_CLIP_CTRL8			DOS_REG_ADDR(DBLK_CLIP_CTRL8)
+#define DBLK_STATUS1				0x096b
+#define P_DBLK_STATUS1				DOS_REG_ADDR(DBLK_STATUS1)
+#define DBLK_GCLK_FREE				0x096c
+#define P_DBLK_GCLK_FREE			DOS_REG_ADDR(DBLK_GCLK_FREE)
+#define DBLK_GCLK_OFF				0x096d
+#define P_DBLK_GCLK_OFF				DOS_REG_ADDR(DBLK_GCLK_OFF)
+#define DBLK_AVSFLAGS				0x096e
+#define P_DBLK_AVSFLAGS				DOS_REG_ADDR(DBLK_AVSFLAGS)
+#define DBLK_CBPY				0x0970
+#define P_DBLK_CBPY				DOS_REG_ADDR(DBLK_CBPY)
+#define DBLK_CBPY_ADJ				0x0971
+#define P_DBLK_CBPY_ADJ				DOS_REG_ADDR(DBLK_CBPY_ADJ)
+#define DBLK_CBPC				0x0972
+#define P_DBLK_CBPC				DOS_REG_ADDR(DBLK_CBPC)
+#define DBLK_CBPC_ADJ				0x0973
+#define P_DBLK_CBPC_ADJ				DOS_REG_ADDR(DBLK_CBPC_ADJ)
+#define DBLK_VHMVD				0x0974
+#define P_DBLK_VHMVD				DOS_REG_ADDR(DBLK_VHMVD)
+#define DBLK_STRONG				0x0975
+#define P_DBLK_STRONG				DOS_REG_ADDR(DBLK_STRONG)
+#define DBLK_RV8_QUANT				0x0976
+#define P_DBLK_RV8_QUANT			DOS_REG_ADDR(DBLK_RV8_QUANT)
+#define DBLK_CBUS_HCMD2				0x0977
+#define P_DBLK_CBUS_HCMD2			DOS_REG_ADDR(DBLK_CBUS_HCMD2)
+#define DBLK_CBUS_HCMD1				0x0978
+#define P_DBLK_CBUS_HCMD1			DOS_REG_ADDR(DBLK_CBUS_HCMD1)
+#define DBLK_CBUS_HCMD0				0x0979
+#define P_DBLK_CBUS_HCMD0			DOS_REG_ADDR(DBLK_CBUS_HCMD0)
+#define DBLK_VLD_HCMD2				0x097a
+#define P_DBLK_VLD_HCMD2			DOS_REG_ADDR(DBLK_VLD_HCMD2)
+#define DBLK_VLD_HCMD1				0x097b
+#define P_DBLK_VLD_HCMD1			DOS_REG_ADDR(DBLK_VLD_HCMD1)
+#define DBLK_VLD_HCMD0				0x097c
+#define P_DBLK_VLD_HCMD0			DOS_REG_ADDR(DBLK_VLD_HCMD0)
+#define DBLK_OST_YBASE				0x097d
+#define P_DBLK_OST_YBASE			DOS_REG_ADDR(DBLK_OST_YBASE)
+#define DBLK_OST_CBCRDIFF			0x097e
+#define P_DBLK_OST_CBCRDIFF			DOS_REG_ADDR(DBLK_OST_CBCRDIFF)
+#define DBLK_CTRL1				0x097f
+#define P_DBLK_CTRL1				DOS_REG_ADDR(DBLK_CTRL1)
+#define MCRCC_CTL1				0x0980
+#define P_MCRCC_CTL1				DOS_REG_ADDR(MCRCC_CTL1)
+#define MCRCC_CTL2				0x0981
+#define P_MCRCC_CTL2				DOS_REG_ADDR(MCRCC_CTL2)
+#define MCRCC_CTL3				0x0982
+#define P_MCRCC_CTL3				DOS_REG_ADDR(MCRCC_CTL3)
+#define GCLK_EN					0x0983
+#define P_GCLK_EN				DOS_REG_ADDR(GCLK_EN)
+#define MDEC_SW_RESET				0x0984
+#define P_MDEC_SW_RESET				DOS_REG_ADDR(MDEC_SW_RESET)
+#define VLD_STATUS_CTRL				0x0c00
+#define P_VLD_STATUS_CTRL			DOS_REG_ADDR(VLD_STATUS_CTRL)
+#define MPEG1_2_REG				0x0c01
+#define P_MPEG1_2_REG				DOS_REG_ADDR(MPEG1_2_REG)
+#define F_CODE_REG				0x0c02
+#define P_F_CODE_REG				DOS_REG_ADDR(F_CODE_REG)
+#define PIC_HEAD_INFO				0x0c03
+#define P_PIC_HEAD_INFO				DOS_REG_ADDR(PIC_HEAD_INFO)
+#define SLICE_VER_POS_PIC_TYPE			0x0c04
+#define P_SLICE_VER_POS_PIC_TYPE		DOS_REG_ADDR(SLICE_VER_POS_PIC_TYPE)
+#define QP_VALUE_REG				0x0c05
+#define P_QP_VALUE_REG				DOS_REG_ADDR(QP_VALUE_REG)
+#define MBA_INC					0x0c06
+#define P_MBA_INC				DOS_REG_ADDR(MBA_INC)
+#define MB_MOTION_MODE				0x0c07
+#define P_MB_MOTION_MODE			DOS_REG_ADDR(MB_MOTION_MODE)
+#define POWER_CTL_VLD				0x0c08
+#define P_POWER_CTL_VLD				DOS_REG_ADDR(POWER_CTL_VLD)
+#define MB_WIDTH				0x0c09
+#define P_MB_WIDTH				DOS_REG_ADDR(MB_WIDTH)
+#define SLICE_QP				0x0c0a
+#define P_SLICE_QP				DOS_REG_ADDR(SLICE_QP)
+#define PRE_START_CODE				0x0c0b
+#define P_PRE_START_CODE			DOS_REG_ADDR(PRE_START_CODE)
+#define SLICE_START_BYTE_01			0x0c0c
+#define P_SLICE_START_BYTE_01			DOS_REG_ADDR(SLICE_START_BYTE_01)
+#define SLICE_START_BYTE_23			0x0c0d
+#define P_SLICE_START_BYTE_23			DOS_REG_ADDR(SLICE_START_BYTE_23)
+#define RESYNC_MARKER_LENGTH			0x0c0e
+#define P_RESYNC_MARKER_LENGTH			DOS_REG_ADDR(RESYNC_MARKER_LENGTH)
+#define DECODER_BUFFER_INFO			0x0c0f
+#define P_DECODER_BUFFER_INFO			DOS_REG_ADDR(DECODER_BUFFER_INFO)
+#define FST_FOR_MV_X				0x0c10
+#define P_FST_FOR_MV_X				DOS_REG_ADDR(FST_FOR_MV_X)
+#define FST_FOR_MV_Y				0x0c11
+#define P_FST_FOR_MV_Y				DOS_REG_ADDR(FST_FOR_MV_Y)
+#define SCD_FOR_MV_X				0x0c12
+#define P_SCD_FOR_MV_X				DOS_REG_ADDR(SCD_FOR_MV_X)
+#define SCD_FOR_MV_Y				0x0c13
+#define P_SCD_FOR_MV_Y				DOS_REG_ADDR(SCD_FOR_MV_Y)
+#define FST_BAK_MV_X				0x0c14
+#define P_FST_BAK_MV_X				DOS_REG_ADDR(FST_BAK_MV_X)
+#define FST_BAK_MV_Y				0x0c15
+#define P_FST_BAK_MV_Y				DOS_REG_ADDR(FST_BAK_MV_Y)
+#define SCD_BAK_MV_X				0x0c16
+#define P_SCD_BAK_MV_X				DOS_REG_ADDR(SCD_BAK_MV_X)
+#define SCD_BAK_MV_Y				0x0c17
+#define P_SCD_BAK_MV_Y				DOS_REG_ADDR(SCD_BAK_MV_Y)
+#define VLD_DECODE_CONTROL			0x0c18
+#define P_VLD_DECODE_CONTROL			DOS_REG_ADDR(VLD_DECODE_CONTROL)
+#define VLD_REVERVED_19				0x0c19
+#define P_VLD_REVERVED_19			DOS_REG_ADDR(VLD_REVERVED_19)
+#define VIFF_BIT_CNT				0x0c1a
+#define P_VIFF_BIT_CNT				DOS_REG_ADDR(VIFF_BIT_CNT)
+#define BYTE_ALIGN_PEAK_HI			0x0c1b
+#define P_BYTE_ALIGN_PEAK_HI			DOS_REG_ADDR(BYTE_ALIGN_PEAK_HI)
+#define BYTE_ALIGN_PEAK_LO			0x0c1c
+#define P_BYTE_ALIGN_PEAK_LO			DOS_REG_ADDR(BYTE_ALIGN_PEAK_LO)
+#define NEXT_ALIGN_PEAK				0x0c1d
+#define P_NEXT_ALIGN_PEAK			DOS_REG_ADDR(NEXT_ALIGN_PEAK)
+#define VC1_CONTROL_REG				0x0c1e
+#define P_VC1_CONTROL_REG			DOS_REG_ADDR(VC1_CONTROL_REG)
+#define PMV1_X					0x0c20
+#define P_PMV1_X				DOS_REG_ADDR(PMV1_X)
+#define PMV1_Y					0x0c21
+#define P_PMV1_Y				DOS_REG_ADDR(PMV1_Y)
+#define PMV2_X					0x0c22
+#define P_PMV2_X				DOS_REG_ADDR(PMV2_X)
+#define PMV2_Y					0x0c23
+#define P_PMV2_Y				DOS_REG_ADDR(PMV2_Y)
+#define PMV3_X					0x0c24
+#define P_PMV3_X				DOS_REG_ADDR(PMV3_X)
+#define PMV3_Y					0x0c25
+#define P_PMV3_Y				DOS_REG_ADDR(PMV3_Y)
+#define PMV4_X					0x0c26
+#define P_PMV4_X				DOS_REG_ADDR(PMV4_X)
+#define PMV4_Y					0x0c27
+#define P_PMV4_Y				DOS_REG_ADDR(PMV4_Y)
+#define M4_TABLE_SELECT				0x0c28
+#define P_M4_TABLE_SELECT			DOS_REG_ADDR(M4_TABLE_SELECT)
+#define M4_CONTROL_REG				0x0c29
+#define P_M4_CONTROL_REG			DOS_REG_ADDR(M4_CONTROL_REG)
+#define BLOCK_NUM				0x0c2a
+#define P_BLOCK_NUM				DOS_REG_ADDR(BLOCK_NUM)
+#define PATTERN_CODE				0x0c2b
+#define P_PATTERN_CODE				DOS_REG_ADDR(PATTERN_CODE)
+#define MB_INFO					0x0c2c
+#define P_MB_INFO				DOS_REG_ADDR(MB_INFO)
+#define VLD_DC_PRED				0x0c2d
+#define P_VLD_DC_PRED				DOS_REG_ADDR(VLD_DC_PRED)
+#define VLD_ERROR_MASK				0x0c2e
+#define P_VLD_ERROR_MASK			DOS_REG_ADDR(VLD_ERROR_MASK)
+#define VLD_DC_PRED_C				0x0c2f
+#define P_VLD_DC_PRED_C				DOS_REG_ADDR(VLD_DC_PRED_C)
+#define LAST_SLICE_MV_ADDR			0x0c30
+#define P_LAST_SLICE_MV_ADDR			DOS_REG_ADDR(LAST_SLICE_MV_ADDR)
+#define LAST_MVX				0x0c31
+#define P_LAST_MVX				DOS_REG_ADDR(LAST_MVX)
+#define LAST_MVY				0x0c32
+#define P_LAST_MVY				DOS_REG_ADDR(LAST_MVY)
+#define VLD_C38					0x0c38
+#define P_VLD_C38				DOS_REG_ADDR(VLD_C38)
+#define VLD_C39					0x0c39
+#define P_VLD_C39				DOS_REG_ADDR(VLD_C39)
+#define VLD_STATUS				0x0c3a
+#define P_VLD_STATUS				DOS_REG_ADDR(VLD_STATUS)
+#define VLD_SHIFT_STATUS			0x0c3b
+#define P_VLD_SHIFT_STATUS			DOS_REG_ADDR(VLD_SHIFT_STATUS)
+#define VOFF_STATUS				0x0c3c
+#define P_VOFF_STATUS				DOS_REG_ADDR(VOFF_STATUS)
+#define VLD_C3D					0x0c3d
+#define P_VLD_C3D				DOS_REG_ADDR(VLD_C3D)
+#define VLD_DBG_INDEX				0x0c3e
+#define P_VLD_DBG_INDEX				DOS_REG_ADDR(VLD_DBG_INDEX)
+#define VLD_DBG_DATA				0x0c3f
+#define P_VLD_DBG_DATA				DOS_REG_ADDR(VLD_DBG_DATA)
+#define VLD_MEM_VIFIFO_START_PTR		0x0c40
+#define P_VLD_MEM_VIFIFO_START_PTR		DOS_REG_ADDR(VLD_MEM_VIFIFO_START_PTR)
+#define VLD_MEM_VIFIFO_CURR_PTR			0x0c41
+#define P_VLD_MEM_VIFIFO_CURR_PTR		DOS_REG_ADDR(VLD_MEM_VIFIFO_CURR_PTR)
+#define VLD_MEM_VIFIFO_END_PTR			0x0c42
+#define P_VLD_MEM_VIFIFO_END_PTR		DOS_REG_ADDR(VLD_MEM_VIFIFO_END_PTR)
+#define VLD_MEM_VIFIFO_BYTES_AVAIL		0x0c43
+#define P_VLD_MEM_VIFIFO_BYTES_AVAIL		DOS_REG_ADDR(VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define VLD_MEM_VIFIFO_CONTROL			0x0c44
+#define P_VLD_MEM_VIFIFO_CONTROL		DOS_REG_ADDR(VLD_MEM_VIFIFO_CONTROL)
+#define VLD_MEM_VIFIFO_WP			0x0c45
+#define P_VLD_MEM_VIFIFO_WP			DOS_REG_ADDR(VLD_MEM_VIFIFO_WP)
+#define VLD_MEM_VIFIFO_RP			0x0c46
+#define P_VLD_MEM_VIFIFO_RP			DOS_REG_ADDR(VLD_MEM_VIFIFO_RP)
+#define VLD_MEM_VIFIFO_LEVEL			0x0c47
+#define P_VLD_MEM_VIFIFO_LEVEL			DOS_REG_ADDR(VLD_MEM_VIFIFO_LEVEL)
+#define VLD_MEM_VIFIFO_BUF_CNTL			0x0c48
+#define P_VLD_MEM_VIFIFO_BUF_CNTL		DOS_REG_ADDR(VLD_MEM_VIFIFO_BUF_CNTL)
+#define VLD_TIME_STAMP_CNTL			0x0c49
+#define P_VLD_TIME_STAMP_CNTL			DOS_REG_ADDR(VLD_TIME_STAMP_CNTL)
+#define VLD_TIME_STAMP_SYNC_0			0x0c4a
+#define P_VLD_TIME_STAMP_SYNC_0			DOS_REG_ADDR(VLD_TIME_STAMP_SYNC_0)
+#define VLD_TIME_STAMP_SYNC_1			0x0c4b
+#define P_VLD_TIME_STAMP_SYNC_1			DOS_REG_ADDR(VLD_TIME_STAMP_SYNC_1)
+#define VLD_TIME_STAMP_0			0x0c4c
+#define P_VLD_TIME_STAMP_0			DOS_REG_ADDR(VLD_TIME_STAMP_0)
+#define VLD_TIME_STAMP_1			0x0c4d
+#define P_VLD_TIME_STAMP_1			DOS_REG_ADDR(VLD_TIME_STAMP_1)
+#define VLD_TIME_STAMP_2			0x0c4e
+#define P_VLD_TIME_STAMP_2			DOS_REG_ADDR(VLD_TIME_STAMP_2)
+#define VLD_TIME_STAMP_3			0x0c4f
+#define P_VLD_TIME_STAMP_3			DOS_REG_ADDR(VLD_TIME_STAMP_3)
+#define VLD_TIME_STAMP_LENGTH			0x0c50
+#define P_VLD_TIME_STAMP_LENGTH			DOS_REG_ADDR(VLD_TIME_STAMP_LENGTH)
+#define VLD_MEM_VIFIFO_WRAP_COUNT		0x0c51
+#define P_VLD_MEM_VIFIFO_WRAP_COUNT		DOS_REG_ADDR(VLD_MEM_VIFIFO_WRAP_COUNT)
+#define VLD_MEM_VIFIFO_MEM_CTL			0x0c52
+#define P_VLD_MEM_VIFIFO_MEM_CTL		DOS_REG_ADDR(VLD_MEM_VIFIFO_MEM_CTL)
+#define VLD_MEM_VBUF_RD_PTR			0x0c53
+#define P_VLD_MEM_VBUF_RD_PTR			DOS_REG_ADDR(VLD_MEM_VBUF_RD_PTR)
+#define VLD_MEM_VBUF2_RD_PTR			0x0c54
+#define P_VLD_MEM_VBUF2_RD_PTR			DOS_REG_ADDR(VLD_MEM_VBUF2_RD_PTR)
+#define VLD_MEM_SWAP_ADDR			0x0c55
+#define P_VLD_MEM_SWAP_ADDR			DOS_REG_ADDR(VLD_MEM_SWAP_ADDR)
+#define VLD_MEM_SWAP_CTL			0x0c56
+#define P_VLD_MEM_SWAP_CTL			DOS_REG_ADDR(VLD_MEM_SWAP_CTL)
+#define VCOP_CTRL_REG				0x0e00
+#define P_VCOP_CTRL_REG				DOS_REG_ADDR(VCOP_CTRL_REG)
+#define QP_CTRL_REG				0x0e01
+#define P_QP_CTRL_REG				DOS_REG_ADDR(QP_CTRL_REG)
+#define INTRA_QUANT_MATRIX			0x0e02
+#define P_INTRA_QUANT_MATRIX			DOS_REG_ADDR(INTRA_QUANT_MATRIX)
+#define NON_I_QUANT_MATRIX			0x0e03
+#define P_NON_I_QUANT_MATRIX			DOS_REG_ADDR(NON_I_QUANT_MATRIX)
+#define DC_SCALER				0x0e04
+#define P_DC_SCALER				DOS_REG_ADDR(DC_SCALER)
+#define DC_AC_CTRL				0x0e05
+#define P_DC_AC_CTRL				DOS_REG_ADDR(DC_AC_CTRL)
+#define DC_AC_SCALE_MUL				0x0e06
+#define P_DC_AC_SCALE_MUL			DOS_REG_ADDR(DC_AC_SCALE_MUL)
+#define DC_AC_SCALE_DIV				0x0e07
+#define P_DC_AC_SCALE_DIV			DOS_REG_ADDR(DC_AC_SCALE_DIV)
+#define POWER_CTL_IQIDCT			0x0e08
+#define P_POWER_CTL_IQIDCT			DOS_REG_ADDR(POWER_CTL_IQIDCT)
+#define RV_AI_Y_X				0x0e09
+#define P_RV_AI_Y_X				DOS_REG_ADDR(RV_AI_Y_X)
+#define RV_AI_U_X				0x0e0a
+#define P_RV_AI_U_X				DOS_REG_ADDR(RV_AI_U_X)
+#define RV_AI_V_X				0x0e0b
+#define P_RV_AI_V_X				DOS_REG_ADDR(RV_AI_V_X)
+#define RV_AI_MB_COUNT				0x0e0c
+#define P_RV_AI_MB_COUNT			DOS_REG_ADDR(RV_AI_MB_COUNT)
+#define NEXT_INTRA_DMA_ADDRESS			0x0e0d
+#define P_NEXT_INTRA_DMA_ADDRESS		DOS_REG_ADDR(NEXT_INTRA_DMA_ADDRESS)
+#define IQIDCT_CONTROL				0x0e0e
+#define P_IQIDCT_CONTROL			DOS_REG_ADDR(IQIDCT_CONTROL)
+#define IQIDCT_DEBUG_INFO_0			0x0e0f
+#define P_IQIDCT_DEBUG_INFO_0			DOS_REG_ADDR(IQIDCT_DEBUG_INFO_0)
+#define DEBLK_CMD				0x0e10
+#define P_DEBLK_CMD				DOS_REG_ADDR(DEBLK_CMD)
+#define IQIDCT_DEBUG_IDCT			0x0e11
+#define P_IQIDCT_DEBUG_IDCT			DOS_REG_ADDR(IQIDCT_DEBUG_IDCT)
+#define DCAC_DMA_CTRL				0x0e12
+#define P_DCAC_DMA_CTRL				DOS_REG_ADDR(DCAC_DMA_CTRL)
+#define DCAC_DMA_ADDRESS			0x0e13
+#define P_DCAC_DMA_ADDRESS			DOS_REG_ADDR(DCAC_DMA_ADDRESS)
+#define DCAC_CPU_ADDRESS			0x0e14
+#define P_DCAC_CPU_ADDRESS			DOS_REG_ADDR(DCAC_CPU_ADDRESS)
+#define DCAC_CPU_DATA				0x0e15
+#define P_DCAC_CPU_DATA				DOS_REG_ADDR(DCAC_CPU_DATA)
+#define DCAC_MB_COUNT				0x0e16
+#define P_DCAC_MB_COUNT				DOS_REG_ADDR(DCAC_MB_COUNT)
+#define IQ_QUANT				0x0e17
+#define P_IQ_QUANT				DOS_REG_ADDR(IQ_QUANT)
+#define VC1_BITPLANE_CTL			0x0e18
+#define P_VC1_BITPLANE_CTL			DOS_REG_ADDR(VC1_BITPLANE_CTL)
+#define MSP					0x0300
+#define P_MSP					DOS_REG_ADDR(MSP)
+#define MPSR					0x0301
+#define P_MPSR					DOS_REG_ADDR(MPSR)
+#define MINT_VEC_BASE				0x0302
+#define P_MINT_VEC_BASE				DOS_REG_ADDR(MINT_VEC_BASE)
+#define MCPU_INTR_GRP				0x0303
+#define P_MCPU_INTR_GRP				DOS_REG_ADDR(MCPU_INTR_GRP)
+#define MCPU_INTR_MSK				0x0304
+#define P_MCPU_INTR_MSK				DOS_REG_ADDR(MCPU_INTR_MSK)
+#define MCPU_INTR_REQ				0x0305
+#define P_MCPU_INTR_REQ				DOS_REG_ADDR(MCPU_INTR_REQ)
+#define MPC_P					0x0306
+#define P_MPC_P					DOS_REG_ADDR(MPC_P)
+#define MPC_D					0x0307
+#define P_MPC_D					DOS_REG_ADDR(MPC_D)
+#define MPC_E					0x0308
+#define P_MPC_E					DOS_REG_ADDR(MPC_E)
+#define MPC_W					0x0309
+#define P_MPC_W					DOS_REG_ADDR(MPC_W)
+#define MINDEX0_REG				0x030a
+#define P_MINDEX0_REG				DOS_REG_ADDR(MINDEX0_REG)
+#define MINDEX1_REG				0x030b
+#define P_MINDEX1_REG				DOS_REG_ADDR(MINDEX1_REG)
+#define MINDEX2_REG				0x030c
+#define P_MINDEX2_REG				DOS_REG_ADDR(MINDEX2_REG)
+#define MINDEX3_REG				0x030d
+#define P_MINDEX3_REG				DOS_REG_ADDR(MINDEX3_REG)
+#define MINDEX4_REG				0x030e
+#define P_MINDEX4_REG				DOS_REG_ADDR(MINDEX4_REG)
+#define MINDEX5_REG				0x030f
+#define P_MINDEX5_REG				DOS_REG_ADDR(MINDEX5_REG)
+#define MINDEX6_REG				0x0310
+#define P_MINDEX6_REG				DOS_REG_ADDR(MINDEX6_REG)
+#define MINDEX7_REG				0x0311
+#define P_MINDEX7_REG				DOS_REG_ADDR(MINDEX7_REG)
+#define MMIN_REG				0x0312
+#define P_MMIN_REG				DOS_REG_ADDR(MMIN_REG)
+#define MMAX_REG				0x0313
+#define P_MMAX_REG				DOS_REG_ADDR(MMAX_REG)
+#define MBREAK0_REG				0x0314
+#define P_MBREAK0_REG				DOS_REG_ADDR(MBREAK0_REG)
+#define MBREAK1_REG				0x0315
+#define P_MBREAK1_REG				DOS_REG_ADDR(MBREAK1_REG)
+#define MBREAK2_REG				0x0316
+#define P_MBREAK2_REG				DOS_REG_ADDR(MBREAK2_REG)
+#define MBREAK3_REG				0x0317
+#define P_MBREAK3_REG				DOS_REG_ADDR(MBREAK3_REG)
+#define MBREAK_TYPE				0x0318
+#define P_MBREAK_TYPE				DOS_REG_ADDR(MBREAK_TYPE)
+#define MBREAK_CTRL				0x0319
+#define P_MBREAK_CTRL				DOS_REG_ADDR(MBREAK_CTRL)
+#define MBREAK_STAUTS				0x031a
+#define P_MBREAK_STAUTS				DOS_REG_ADDR(MBREAK_STAUTS)
+#define MDB_ADDR_REG				0x031b
+#define P_MDB_ADDR_REG				DOS_REG_ADDR(MDB_ADDR_REG)
+#define MDB_DATA_REG				0x031c
+#define P_MDB_DATA_REG				DOS_REG_ADDR(MDB_DATA_REG)
+#define MDB_CTRL				0x031d
+#define P_MDB_CTRL				DOS_REG_ADDR(MDB_CTRL)
+#define MSFTINT0				0x031e
+#define P_MSFTINT0				DOS_REG_ADDR(MSFTINT0)
+#define MSFTINT1				0x031f
+#define P_MSFTINT1				DOS_REG_ADDR(MSFTINT1)
+#define CSP					0x0320
+#define P_CSP					DOS_REG_ADDR(CSP)
+#define CPSR					0x0321
+#define P_CPSR					DOS_REG_ADDR(CPSR)
+#define CINT_VEC_BASE				0x0322
+#define P_CINT_VEC_BASE				DOS_REG_ADDR(CINT_VEC_BASE)
+#define CCPU_INTR_GRP				0x0323
+#define P_CCPU_INTR_GRP				DOS_REG_ADDR(CCPU_INTR_GRP)
+#define CCPU_INTR_MSK				0x0324
+#define P_CCPU_INTR_MSK				DOS_REG_ADDR(CCPU_INTR_MSK)
+#define CCPU_INTR_REQ				0x0325
+#define P_CCPU_INTR_REQ				DOS_REG_ADDR(CCPU_INTR_REQ)
+#define CPC_P					0x0326
+#define P_CPC_P					DOS_REG_ADDR(CPC_P)
+#define CPC_D					0x0327
+#define P_CPC_D					DOS_REG_ADDR(CPC_D)
+#define CPC_E					0x0328
+#define P_CPC_E					DOS_REG_ADDR(CPC_E)
+#define CPC_W					0x0329
+#define P_CPC_W					DOS_REG_ADDR(CPC_W)
+#define CINDEX0_REG				0x032a
+#define P_CINDEX0_REG				DOS_REG_ADDR(CINDEX0_REG)
+#define CINDEX1_REG				0x032b
+#define P_CINDEX1_REG				DOS_REG_ADDR(CINDEX1_REG)
+#define CINDEX2_REG				0x032c
+#define P_CINDEX2_REG				DOS_REG_ADDR(CINDEX2_REG)
+#define CINDEX3_REG				0x032d
+#define P_CINDEX3_REG				DOS_REG_ADDR(CINDEX3_REG)
+#define CINDEX4_REG				0x032e
+#define P_CINDEX4_REG				DOS_REG_ADDR(CINDEX4_REG)
+#define CINDEX5_REG				0x032f
+#define P_CINDEX5_REG				DOS_REG_ADDR(CINDEX5_REG)
+#define CINDEX6_REG				0x0330
+#define P_CINDEX6_REG				DOS_REG_ADDR(CINDEX6_REG)
+#define CINDEX7_REG				0x0331
+#define P_CINDEX7_REG				DOS_REG_ADDR(CINDEX7_REG)
+#define CMIN_REG				0x0332
+#define P_CMIN_REG				DOS_REG_ADDR(CMIN_REG)
+#define CMAX_REG				0x0333
+#define P_CMAX_REG				DOS_REG_ADDR(CMAX_REG)
+#define CBREAK0_REG				0x0334
+#define P_CBREAK0_REG				DOS_REG_ADDR(CBREAK0_REG)
+#define CBREAK1_REG				0x0335
+#define P_CBREAK1_REG				DOS_REG_ADDR(CBREAK1_REG)
+#define CBREAK2_REG				0x0336
+#define P_CBREAK2_REG				DOS_REG_ADDR(CBREAK2_REG)
+#define CBREAK3_REG				0x0337
+#define P_CBREAK3_REG				DOS_REG_ADDR(CBREAK3_REG)
+#define CBREAK_TYPE				0x0338
+#define P_CBREAK_TYPE				DOS_REG_ADDR(CBREAK_TYPE)
+#define CBREAK_CTRL				0x0339
+#define P_CBREAK_CTRL				DOS_REG_ADDR(CBREAK_CTRL)
+#define CBREAK_STAUTS				0x033a
+#define P_CBREAK_STAUTS				DOS_REG_ADDR(CBREAK_STAUTS)
+#define CDB_ADDR_REG				0x033b
+#define P_CDB_ADDR_REG				DOS_REG_ADDR(CDB_ADDR_REG)
+#define CDB_DATA_REG				0x033c
+#define P_CDB_DATA_REG				DOS_REG_ADDR(CDB_DATA_REG)
+#define CDB_CTRL				0x033d
+#define P_CDB_CTRL				DOS_REG_ADDR(CDB_CTRL)
+#define CSFTINT0				0x033e
+#define P_CSFTINT0				DOS_REG_ADDR(CSFTINT0)
+#define CSFTINT1				0x033f
+#define P_CSFTINT1				DOS_REG_ADDR(CSFTINT1)
+#define IMEM_DMA_CTRL				0x0340
+#define P_IMEM_DMA_CTRL				DOS_REG_ADDR(IMEM_DMA_CTRL)
+#define IMEM_DMA_ADR				0x0341
+#define P_IMEM_DMA_ADR				DOS_REG_ADDR(IMEM_DMA_ADR)
+#define IMEM_DMA_COUNT				0x0342
+#define P_IMEM_DMA_COUNT			DOS_REG_ADDR(IMEM_DMA_COUNT)
+#define WRRSP_IMEM				0x0343
+#define P_WRRSP_IMEM				DOS_REG_ADDR(WRRSP_IMEM)
+#define LMEM_DMA_CTRL				0x0350
+#define P_LMEM_DMA_CTRL				DOS_REG_ADDR(LMEM_DMA_CTRL)
+#define LMEM_DMA_ADR				0x0351
+#define P_LMEM_DMA_ADR				DOS_REG_ADDR(LMEM_DMA_ADR)
+#define LMEM_DMA_COUNT				0x0352
+#define P_LMEM_DMA_COUNT			DOS_REG_ADDR(LMEM_DMA_COUNT)
+#define WRRSP_LMEM				0x0353
+#define P_WRRSP_LMEM				DOS_REG_ADDR(WRRSP_LMEM)
+#define MAC_CTRL1				0x0360
+#define P_MAC_CTRL1				DOS_REG_ADDR(MAC_CTRL1)
+#define ACC0REG1				0x0361
+#define P_ACC0REG1				DOS_REG_ADDR(ACC0REG1)
+#define ACC1REG1				0x0362
+#define P_ACC1REG1				DOS_REG_ADDR(ACC1REG1)
+#define MAC_CTRL2				0x0370
+#define P_MAC_CTRL2				DOS_REG_ADDR(MAC_CTRL2)
+#define ACC0REG2				0x0371
+#define P_ACC0REG2				DOS_REG_ADDR(ACC0REG2)
+#define ACC1REG2				0x0372
+#define P_ACC1REG2				DOS_REG_ADDR(ACC1REG2)
+#define CPU_TRACE				0x0380
+#define P_CPU_TRACE				DOS_REG_ADDR(CPU_TRACE)
+#define HENC_SCRATCH_0				0x1ac0
+#define P_HENC_SCRATCH_0			DOS_REG_ADDR(HENC_SCRATCH_0)
+#define HENC_SCRATCH_1				0x1ac1
+#define P_HENC_SCRATCH_1			DOS_REG_ADDR(HENC_SCRATCH_1)
+#define HENC_SCRATCH_2				0x1ac2
+#define P_HENC_SCRATCH_2			DOS_REG_ADDR(HENC_SCRATCH_2)
+#define HENC_SCRATCH_3				0x1ac3
+#define P_HENC_SCRATCH_3			DOS_REG_ADDR(HENC_SCRATCH_3)
+#define HENC_SCRATCH_4				0x1ac4
+#define P_HENC_SCRATCH_4			DOS_REG_ADDR(HENC_SCRATCH_4)
+#define HENC_SCRATCH_5				0x1ac5
+#define P_HENC_SCRATCH_5			DOS_REG_ADDR(HENC_SCRATCH_5)
+#define HENC_SCRATCH_6				0x1ac6
+#define P_HENC_SCRATCH_6			DOS_REG_ADDR(HENC_SCRATCH_6)
+#define HENC_SCRATCH_7				0x1ac7
+#define P_HENC_SCRATCH_7			DOS_REG_ADDR(HENC_SCRATCH_7)
+#define HENC_SCRATCH_8				0x1ac8
+#define P_HENC_SCRATCH_8			DOS_REG_ADDR(HENC_SCRATCH_8)
+#define HENC_SCRATCH_9				0x1ac9
+#define P_HENC_SCRATCH_9			DOS_REG_ADDR(HENC_SCRATCH_9)
+#define HENC_SCRATCH_A				0x1aca
+#define P_HENC_SCRATCH_A			DOS_REG_ADDR(HENC_SCRATCH_A)
+#define HENC_SCRATCH_B				0x1acb
+#define P_HENC_SCRATCH_B			DOS_REG_ADDR(HENC_SCRATCH_B)
+#define HENC_SCRATCH_C				0x1acc
+#define P_HENC_SCRATCH_C			DOS_REG_ADDR(HENC_SCRATCH_C)
+#define HENC_SCRATCH_D				0x1acd
+#define P_HENC_SCRATCH_D			DOS_REG_ADDR(HENC_SCRATCH_D)
+#define HENC_SCRATCH_E				0x1ace
+#define P_HENC_SCRATCH_E			DOS_REG_ADDR(HENC_SCRATCH_E)
+#define HENC_SCRATCH_F				0x1acf
+#define P_HENC_SCRATCH_F			DOS_REG_ADDR(HENC_SCRATCH_F)
+#define HENC_SCRATCH_G				0x1ad0
+#define P_HENC_SCRATCH_G			DOS_REG_ADDR(HENC_SCRATCH_G)
+#define HENC_SCRATCH_H				0x1ad1
+#define P_HENC_SCRATCH_H			DOS_REG_ADDR(HENC_SCRATCH_H)
+#define HENC_SCRATCH_I				0x1ad2
+#define P_HENC_SCRATCH_I			DOS_REG_ADDR(HENC_SCRATCH_I)
+#define HENC_SCRATCH_J				0x1ad3
+#define P_HENC_SCRATCH_J			DOS_REG_ADDR(HENC_SCRATCH_J)
+#define HENC_SCRATCH_K				0x1ad4
+#define P_HENC_SCRATCH_K			DOS_REG_ADDR(HENC_SCRATCH_K)
+#define HENC_SCRATCH_L				0x1ad5
+#define P_HENC_SCRATCH_L			DOS_REG_ADDR(HENC_SCRATCH_L)
+#define HENC_SCRATCH_M				0x1ad6
+#define P_HENC_SCRATCH_M			DOS_REG_ADDR(HENC_SCRATCH_M)
+#define HENC_SCRATCH_N				0x1ad7
+#define P_HENC_SCRATCH_N			DOS_REG_ADDR(HENC_SCRATCH_N)
+#define IE_DATA_FEED_BUFF_INFO			0x1ad8
+#define P_IE_DATA_FEED_BUFF_INFO		DOS_REG_ADDR(IE_DATA_FEED_BUFF_INFO)
+#define VLC_STATUS_CTRL				0x1d00
+#define P_VLC_STATUS_CTRL			DOS_REG_ADDR(VLC_STATUS_CTRL)
+#define VLC_CONFIG				0x1d01
+#define P_VLC_CONFIG				DOS_REG_ADDR(VLC_CONFIG)
+#define VLC_VB_START_PTR			0x1d10
+#define P_VLC_VB_START_PTR			DOS_REG_ADDR(VLC_VB_START_PTR)
+#define VLC_VB_END_PTR				0x1d11
+#define P_VLC_VB_END_PTR			DOS_REG_ADDR(VLC_VB_END_PTR)
+#define VLC_VB_WR_PTR				0x1d12
+#define P_VLC_VB_WR_PTR				DOS_REG_ADDR(VLC_VB_WR_PTR)
+#define VLC_VB_RD_PTR				0x1d13
+#define P_VLC_VB_RD_PTR				DOS_REG_ADDR(VLC_VB_RD_PTR)
+#define VLC_VB_SW_RD_PTR			0x1d14
+#define P_VLC_VB_SW_RD_PTR			DOS_REG_ADDR(VLC_VB_SW_RD_PTR)
+#define VLC_VB_LEFT				0x1d15
+#define P_VLC_VB_LEFT				DOS_REG_ADDR(VLC_VB_LEFT)
+#define VLC_VB_CONTROL				0x1d16
+#define P_VLC_VB_CONTROL			DOS_REG_ADDR(VLC_VB_CONTROL)
+#define VLC_VB_MEM_CTL				0x1d17
+#define P_VLC_VB_MEM_CTL			DOS_REG_ADDR(VLC_VB_MEM_CTL)
+#define VLC_VB_INT_PTR				0x1d18
+#define P_VLC_VB_INT_PTR			DOS_REG_ADDR(VLC_VB_INT_PTR)
+#define VLC_WRRSP				0x1d19
+#define P_VLC_WRRSP				DOS_REG_ADDR(VLC_WRRSP)
+#define VLC_TOTAL_BYTES				0x1d1a
+#define P_VLC_TOTAL_BYTES			DOS_REG_ADDR(VLC_TOTAL_BYTES)
+#define VLC_VB_BUFF				0x1d1b
+#define P_VLC_VB_BUFF				DOS_REG_ADDR(VLC_VB_BUFF)
+#define VLC_VB_PRE_BUFF_HI			0x1d1c
+#define P_VLC_VB_PRE_BUFF_HI			DOS_REG_ADDR(VLC_VB_PRE_BUFF_HI)
+#define VLC_VB_PRE_BUFF_LOW			0x1d1d
+#define P_VLC_VB_PRE_BUFF_LOW			DOS_REG_ADDR(VLC_VB_PRE_BUFF_LOW)
+#define VLC_STREAM_BUFF				0x1d1e
+#define P_VLC_STREAM_BUFF			DOS_REG_ADDR(VLC_STREAM_BUFF)
+#define VLC_PUSH_STREAM				0x1d1f
+#define P_VLC_PUSH_STREAM			DOS_REG_ADDR(VLC_PUSH_STREAM)
+#define VLC_PUSH_ELEMENT			0x1d20
+#define P_VLC_PUSH_ELEMENT			DOS_REG_ADDR(VLC_PUSH_ELEMENT)
+#define VLC_ELEMENT_DATA			0x1d21
+#define P_VLC_ELEMENT_DATA			DOS_REG_ADDR(VLC_ELEMENT_DATA)
+#define VLC_SPECIAL_CTL				0x1d22
+#define P_VLC_SPECIAL_CTL			DOS_REG_ADDR(VLC_SPECIAL_CTL)
+#define VLC_HCMD_T_L_INFO			0x1d23
+#define P_VLC_HCMD_T_L_INFO			DOS_REG_ADDR(VLC_HCMD_T_L_INFO)
+#define VLC_HCMD_CUR_INFO			0x1d24
+#define P_VLC_HCMD_CUR_INFO			DOS_REG_ADDR(VLC_HCMD_CUR_INFO)
+#define VLC_INT_CONTROL				0x1d30
+#define P_VLC_INT_CONTROL			DOS_REG_ADDR(VLC_INT_CONTROL)
+#define VLC_PIC_SIZE				0x1d31
+#define P_VLC_PIC_SIZE				DOS_REG_ADDR(VLC_PIC_SIZE)
+#define VLC_PIC_INFO				0x1d32
+#define P_VLC_PIC_INFO				DOS_REG_ADDR(VLC_PIC_INFO)
+#define VLC_PIC_POSITION			0x1d33
+#define P_VLC_PIC_POSITION			DOS_REG_ADDR(VLC_PIC_POSITION)
+#define VLC_INPUT_STATUS			0x1d34
+#define P_VLC_INPUT_STATUS			DOS_REG_ADDR(VLC_INPUT_STATUS)
+#define VLC_MB_INFO				0x1d35
+#define P_VLC_MB_INFO				DOS_REG_ADDR(VLC_MB_INFO)
+#define VLC_ENC_PEND_CMD			0x1d36
+#define P_VLC_ENC_PEND_CMD			DOS_REG_ADDR(VLC_ENC_PEND_CMD)
+#define HENC_TOP_INFO_0				0x1d37
+#define P_HENC_TOP_INFO_0			DOS_REG_ADDR(HENC_TOP_INFO_0)
+#define HENC_LEFT_INFO_0			0x1d38
+#define P_HENC_LEFT_INFO_0			DOS_REG_ADDR(HENC_LEFT_INFO_0)
+#define HENC_TOP_INFO_1				0x1d39
+#define P_HENC_TOP_INFO_1			DOS_REG_ADDR(HENC_TOP_INFO_1)
+#define HENC_LEFT_INFO_1			0x1d3a
+#define P_HENC_LEFT_INFO_1			DOS_REG_ADDR(HENC_LEFT_INFO_1)
+#define VLC_IPRED_MODE_HI			0x1d3b
+#define P_VLC_IPRED_MODE_HI			DOS_REG_ADDR(VLC_IPRED_MODE_HI)
+#define VLC_IPRED_MODE_LO			0x1d3c
+#define P_VLC_IPRED_MODE_LO			DOS_REG_ADDR(VLC_IPRED_MODE_LO)
+#define VLC_DELTA_QP				0x1d3d
+#define P_VLC_DELTA_QP				DOS_REG_ADDR(VLC_DELTA_QP)
+#define VLC_MB_HEADER_INFO			0x1d3e
+#define P_VLC_MB_HEADER_INFO			DOS_REG_ADDR(VLC_MB_HEADER_INFO)
+#define VLC_P_MB_HEADER_INFO			0x1d3f
+#define P_VLC_P_MB_HEADER_INFO			DOS_REG_ADDR(VLC_P_MB_HEADER_INFO)
+#define VLC_COEFF_BUF_STATUS			0x1d40
+#define P_VLC_COEFF_BUF_STATUS			DOS_REG_ADDR(VLC_COEFF_BUF_STATUS)
+#define VLC_COEFF_RD_REQ			0x1d41
+#define P_VLC_COEFF_RD_REQ			DOS_REG_ADDR(VLC_COEFF_RD_REQ)
+#define VLC_COEFF				0x1d42
+#define P_VLC_COEFF				DOS_REG_ADDR(VLC_COEFF)
+#define VLC_COEFF_INFO				0x1d43
+#define P_VLC_COEFF_INFO			DOS_REG_ADDR(VLC_COEFF_INFO)
+#define VLC_DC_BUF_STATUS			0x1d44
+#define P_VLC_DC_BUF_STATUS			DOS_REG_ADDR(VLC_DC_BUF_STATUS)
+#define VLC_DC_RD_REQ				0x1d45
+#define P_VLC_DC_RD_REQ				DOS_REG_ADDR(VLC_DC_RD_REQ)
+#define VLC_DC					0x1d46
+#define P_VLC_DC				DOS_REG_ADDR(VLC_DC)
+#define VLC_DC_INFO				0x1d47
+#define P_VLC_DC_INFO				DOS_REG_ADDR(VLC_DC_INFO)
+#define VLC_MV_INDEX				0x1d48
+#define P_VLC_MV_INDEX				DOS_REG_ADDR(VLC_MV_INDEX)
+#define VLC_MV					0x1d49
+#define P_VLC_MV				DOS_REG_ADDR(VLC_MV)
+#define HENC_TOP_MV_0				0x1d4a
+#define P_HENC_TOP_MV_0				DOS_REG_ADDR(HENC_TOP_MV_0)
+#define HENC_TOP_MV_1				0x1d4b
+#define P_HENC_TOP_MV_1				DOS_REG_ADDR(HENC_TOP_MV_1)
+#define HENC_TOP_MV_2				0x1d4c
+#define P_HENC_TOP_MV_2				DOS_REG_ADDR(HENC_TOP_MV_2)
+#define HENC_TOP_MV_3				0x1d4d
+#define P_HENC_TOP_MV_3				DOS_REG_ADDR(HENC_TOP_MV_3)
+#define HENC_LEFT_MV_0				0x1d4e
+#define P_HENC_LEFT_MV_0			DOS_REG_ADDR(HENC_LEFT_MV_0)
+#define HENC_LEFT_MV_1				0x1d4f
+#define P_HENC_LEFT_MV_1			DOS_REG_ADDR(HENC_LEFT_MV_1)
+#define HENC_LEFT_MV_2				0x1d50
+#define P_HENC_LEFT_MV_2			DOS_REG_ADDR(HENC_LEFT_MV_2)
+#define HENC_LEFT_MV_3				0x1d51
+#define P_HENC_LEFT_MV_3			DOS_REG_ADDR(HENC_LEFT_MV_3)
+#define TOP_LEFT_READY				0x1d52
+#define P_TOP_LEFT_READY			DOS_REG_ADDR(TOP_LEFT_READY)
+#define MB_SKIP_RUN				0x1d53
+#define P_MB_SKIP_RUN				DOS_REG_ADDR(MB_SKIP_RUN)
+#define VLC_HCMD_CONFIG				0x1d54
+#define P_VLC_HCMD_CONFIG			DOS_REG_ADDR(VLC_HCMD_CONFIG)
+#define VLC_HCMD_DBLK_INFO			0x1d55
+#define P_VLC_HCMD_DBLK_INFO			DOS_REG_ADDR(VLC_HCMD_DBLK_INFO)
+#define VLC_DBG_IDX				0x1d56
+#define P_VLC_DBG_IDX				DOS_REG_ADDR(VLC_DBG_IDX)
+#define VLC_DBG_READ				0x1d57
+#define P_VLC_DBG_READ				DOS_REG_ADDR(VLC_DBG_READ)
+#define VLC_JPEG_CTRL				0x1d58
+#define P_VLC_JPEG_CTRL				DOS_REG_ADDR(VLC_JPEG_CTRL)
+#define VLC_JPEG_COEFF_BUF_STAT			0x1d59
+#define P_VLC_JPEG_COEFF_BUF_STAT		DOS_REG_ADDR(VLC_JPEG_COEFF_BUF_STAT)
+#define VLC_HUFFMAN_ADDR			0x1d5a
+#define P_VLC_HUFFMAN_ADDR			DOS_REG_ADDR(VLC_HUFFMAN_ADDR)
+#define VLC_HUFFMAN_DATA			0x1d5b
+#define P_VLC_HUFFMAN_DATA			DOS_REG_ADDR(VLC_HUFFMAN_DATA)
+#define VLC_ENC_MV_BITS				0x1d5c
+#define P_VLC_ENC_MV_BITS			DOS_REG_ADDR(VLC_ENC_MV_BITS)
+#define VLC_ENC_COEFF_BITS			0x1d5d
+#define P_VLC_ENC_COEFF_BITS			DOS_REG_ADDR(VLC_ENC_COEFF_BITS)
+#define QDCT_STATUS_CTRL			0x1f00
+#define P_QDCT_STATUS_CTRL			DOS_REG_ADDR(QDCT_STATUS_CTRL)
+#define QDCT_CONFIG				0x1f01
+#define P_QDCT_CONFIG				DOS_REG_ADDR(QDCT_CONFIG)
+#define IGNORE_CONFIG				0x1f02
+#define P_IGNORE_CONFIG				DOS_REG_ADDR(IGNORE_CONFIG)
+#define IGNORE_CONFIG_2				0x1f03
+#define P_IGNORE_CONFIG_2			DOS_REG_ADDR(IGNORE_CONFIG_2)
+#define QDCT_MB_START_PTR			0x1f10
+#define P_QDCT_MB_START_PTR			DOS_REG_ADDR(QDCT_MB_START_PTR)
+#define QDCT_MB_END_PTR				0x1f11
+#define P_QDCT_MB_END_PTR			DOS_REG_ADDR(QDCT_MB_END_PTR)
+#define QDCT_MB_WR_PTR				0x1f12
+#define P_QDCT_MB_WR_PTR			DOS_REG_ADDR(QDCT_MB_WR_PTR)
+#define QDCT_MB_RD_PTR				0x1f13
+#define P_QDCT_MB_RD_PTR			DOS_REG_ADDR(QDCT_MB_RD_PTR)
+#define QDCT_MB_LEVEL				0x1f14
+#define P_QDCT_MB_LEVEL				DOS_REG_ADDR(QDCT_MB_LEVEL)
+#define QDCT_MB_CONTROL				0x1f15
+#define P_QDCT_MB_CONTROL			DOS_REG_ADDR(QDCT_MB_CONTROL)
+#define QDCT_MB_MEM_CTL				0x1f16
+#define P_QDCT_MB_MEM_CTL			DOS_REG_ADDR(QDCT_MB_MEM_CTL)
+#define QDCT_MB_BUFF				0x1f17
+#define P_QDCT_MB_BUFF				DOS_REG_ADDR(QDCT_MB_BUFF)
+#define QDCT_MB_MAGIC_WORD			0x1f18
+#define P_QDCT_MB_MAGIC_WORD			DOS_REG_ADDR(QDCT_MB_MAGIC_WORD)
+#define QDCT_DCT_STATUS				0x1f19
+#define P_QDCT_DCT_STATUS			DOS_REG_ADDR(QDCT_DCT_STATUS)
+#define QDCT_Q_STATUS				0x1f1a
+#define P_QDCT_Q_STATUS				DOS_REG_ADDR(QDCT_Q_STATUS)
+#define QDCT_PIC_INFO				0x1f1b
+#define P_QDCT_PIC_INFO				DOS_REG_ADDR(QDCT_PIC_INFO)
+#define QDCT_Q_QUANT_I				0x1f1c
+#define P_QDCT_Q_QUANT_I			DOS_REG_ADDR(QDCT_Q_QUANT_I)
+#define QDCT_Q_QUANT_P				0x1f1d
+#define P_QDCT_Q_QUANT_P			DOS_REG_ADDR(QDCT_Q_QUANT_P)
+#define QDCT_MB_PAUSE_CTL			0x1f1e
+#define P_QDCT_MB_PAUSE_CTL			DOS_REG_ADDR(QDCT_MB_PAUSE_CTL)
+#define QDCT_TOP_CONTROL			0x1f1f
+#define P_QDCT_TOP_CONTROL			DOS_REG_ADDR(QDCT_TOP_CONTROL)
+#define QDCT_TOP_BASE_MEM			0x1f20
+#define P_QDCT_TOP_BASE_MEM			DOS_REG_ADDR(QDCT_TOP_BASE_MEM)
+#define QDCT_TOP_MEM_CTL			0x1f21
+#define P_QDCT_TOP_MEM_CTL			DOS_REG_ADDR(QDCT_TOP_MEM_CTL)
+#define QDCT_TOP_WRRSP				0x1f22
+#define P_QDCT_TOP_WRRSP			DOS_REG_ADDR(QDCT_TOP_WRRSP)
+#define QDCT_DBG_IDX				0x1f23
+#define P_QDCT_DBG_IDX				DOS_REG_ADDR(QDCT_DBG_IDX)
+#define QDCT_DBG_READ				0x1f24
+#define P_QDCT_DBG_READ				DOS_REG_ADDR(QDCT_DBG_READ)
+#define QDCT_JPEG_CTRL				0x1f25
+#define P_QDCT_JPEG_CTRL			DOS_REG_ADDR(QDCT_JPEG_CTRL)
+#define QDCT_JPEG_X_START_END			0x1f26
+#define P_QDCT_JPEG_X_START_END			DOS_REG_ADDR(QDCT_JPEG_X_START_END)
+#define QDCT_JPEG_Y_START_END			0x1f27
+#define P_QDCT_JPEG_Y_START_END			DOS_REG_ADDR(QDCT_JPEG_Y_START_END)
+#define QDCT_JPEG_QUANT_ADDR			0x1f28
+#define P_QDCT_JPEG_QUANT_ADDR			DOS_REG_ADDR(QDCT_JPEG_QUANT_ADDR)
+#define QDCT_JPEG_QUANT_DATA			0x1f29
+#define P_QDCT_JPEG_QUANT_DATA			DOS_REG_ADDR(QDCT_JPEG_QUANT_DATA)
+#define QDCT_JPEG_SOF_RESUME			0x1f2a
+#define P_QDCT_JPEG_SOF_RESUME			DOS_REG_ADDR(QDCT_JPEG_SOF_RESUME)
+#define QDCT_JPEG_DCT_STATUS0			0x1f2b
+#define P_QDCT_JPEG_DCT_STATUS0			DOS_REG_ADDR(QDCT_JPEG_DCT_STATUS0)
+#define QDCT_JPEG_DCT_STATUS1			0x1f2c
+#define P_QDCT_JPEG_DCT_STATUS1			DOS_REG_ADDR(QDCT_JPEG_DCT_STATUS1)
+#define QDCT_JPEG_DCT_COEFF01			0x1f2d
+#define P_QDCT_JPEG_DCT_COEFF01			DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF01)
+#define QDCT_JPEG_DCT_COEFF23			0x1f2e
+#define P_QDCT_JPEG_DCT_COEFF23			DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF23)
+#define QDCT_JPEG_DCT_COEFF45			0x1f2f
+#define P_QDCT_JPEG_DCT_COEFF45			DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF45)
+#define QDCT_JPEG_DCT_COEFF67			0x1f30
+#define P_QDCT_JPEG_DCT_COEFF67			DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF67)
+#define QDCT_JPEG_DCT_COEFF89			0x1f31
+#define P_QDCT_JPEG_DCT_COEFF89			DOS_REG_ADDR(QDCT_JPEG_DCT_COEFF89)
+#define QDCT_I_PRED_REF_WR_IDX			0x1f32
+#define P_QDCT_I_PRED_REF_WR_IDX		DOS_REG_ADDR(QDCT_I_PRED_REF_WR_IDX)
+#define QDCT_I_PRED_REF_WR_DATA			0x1f33
+#define P_QDCT_I_PRED_REF_WR_DATA		DOS_REG_ADDR(QDCT_I_PRED_REF_WR_DATA)
+#define IE_CONTROL				0x1f40
+#define P_IE_CONTROL				DOS_REG_ADDR(IE_CONTROL)
+#define IE_MB_POSITION				0x1f41
+#define P_IE_MB_POSITION			DOS_REG_ADDR(IE_MB_POSITION)
+#define IE_ME_MB_INFO				0x1f42
+#define P_IE_ME_MB_INFO				DOS_REG_ADDR(IE_ME_MB_INFO)
+#define SAD_CONTROL				0x1f43
+#define P_SAD_CONTROL				DOS_REG_ADDR(SAD_CONTROL)
+#define IE_RESULT_BUFFER			0x1f44
+#define P_IE_RESULT_BUFFER			DOS_REG_ADDR(IE_RESULT_BUFFER)
+#define IE_I4_PRED_MODE_HI			0x1f45
+#define P_IE_I4_PRED_MODE_HI			DOS_REG_ADDR(IE_I4_PRED_MODE_HI)
+#define IE_I4_PRED_MODE_LO			0x1f46
+#define P_IE_I4_PRED_MODE_LO			DOS_REG_ADDR(IE_I4_PRED_MODE_LO)
+#define IE_C_PRED_MODE				0x1f47
+#define P_IE_C_PRED_MODE			DOS_REG_ADDR(IE_C_PRED_MODE)
+#define IE_CUR_REF_SEL				0x1f48
+#define P_IE_CUR_REF_SEL			DOS_REG_ADDR(IE_CUR_REF_SEL)
+#define ME_CONTROL				0x1f49
+#define P_ME_CONTROL				DOS_REG_ADDR(ME_CONTROL)
+#define ME_START_POSITION			0x1f4a
+#define P_ME_START_POSITION			DOS_REG_ADDR(ME_START_POSITION)
+#define ME_STATUS				0x1f4b
+#define P_ME_STATUS				DOS_REG_ADDR(ME_STATUS)
+#define ME_DEBUG				0x1f4c
+#define P_ME_DEBUG				DOS_REG_ADDR(ME_DEBUG)
+#define ME_SKIP_LINE				0x1f4d
+#define P_ME_SKIP_LINE				DOS_REG_ADDR(ME_SKIP_LINE)
+#define ME_AB_MEM_CTL				0x1f4e
+#define P_ME_AB_MEM_CTL				DOS_REG_ADDR(ME_AB_MEM_CTL)
+#define ME_PIC_INFO				0x1f4f
+#define P_ME_PIC_INFO				DOS_REG_ADDR(ME_PIC_INFO)
+#define ME_SAD_ENOUGH_01			0x1f50
+#define P_ME_SAD_ENOUGH_01			DOS_REG_ADDR(ME_SAD_ENOUGH_01)
+#define ME_SAD_ENOUGH_23			0x1f51
+#define P_ME_SAD_ENOUGH_23			DOS_REG_ADDR(ME_SAD_ENOUGH_23)
+#define ME_STEP0_CLOSE_MV			0x1f52
+#define P_ME_STEP0_CLOSE_MV			DOS_REG_ADDR(ME_STEP0_CLOSE_MV)
+#define ME_F_SKIP_SAD				0x1f53
+#define P_ME_F_SKIP_SAD				DOS_REG_ADDR(ME_F_SKIP_SAD)
+#define ME_F_SKIP_WEIGHT			0x1f54
+#define P_ME_F_SKIP_WEIGHT			DOS_REG_ADDR(ME_F_SKIP_WEIGHT)
+#define ME_MV_MERGE_CTL				0x1f55
+#define P_ME_MV_MERGE_CTL			DOS_REG_ADDR(ME_MV_MERGE_CTL)
+#define ME_MV_WEIGHT_01				0x1f56
+#define P_ME_MV_WEIGHT_01			DOS_REG_ADDR(ME_MV_WEIGHT_01)
+#define ME_MV_WEIGHT_23				0x1f57
+#define P_ME_MV_WEIGHT_23			DOS_REG_ADDR(ME_MV_WEIGHT_23)
+#define ME_SAD_RANGE_INC			0x1f58
+#define P_ME_SAD_RANGE_INC			DOS_REG_ADDR(ME_SAD_RANGE_INC)
+#define ME_SUB_MERGE_CTL			0x1f59
+#define P_ME_SUB_MERGE_CTL			DOS_REG_ADDR(ME_SUB_MERGE_CTL)
+#define ME_SUB_REF_MV_CTL			0x1f5a
+#define P_ME_SUB_REF_MV_CTL			DOS_REG_ADDR(ME_SUB_REF_MV_CTL)
+#define ME_SUB_ANY_WEIGHT_SAD			0x1f5b
+#define P_ME_SUB_ANY_WEIGHT_SAD			DOS_REG_ADDR(ME_SUB_ANY_WEIGHT_SAD)
+#define ME_SUB_FIX_SAD				0x1f5c
+#define P_ME_SUB_FIX_SAD			DOS_REG_ADDR(ME_SUB_FIX_SAD)
+#define ME_SUB_FIX_MIN_SAD			0x1f5d
+#define P_ME_SUB_FIX_MIN_SAD			DOS_REG_ADDR(ME_SUB_FIX_MIN_SAD)
+#define ME_SUB_SNAP_GLITCH			0x1f5e
+#define P_ME_SUB_SNAP_GLITCH			DOS_REG_ADDR(ME_SUB_SNAP_GLITCH)
+#define ME_SUB_ACT_CTL				0x1f5f
+#define P_ME_SUB_ACT_CTL			DOS_REG_ADDR(ME_SUB_ACT_CTL)
+#define HEVC_ASSIST_AFIFO_CTRL			0x3001
+#define P_HEVC_ASSIST_AFIFO_CTRL		DOS_REG_ADDR(HEVC_ASSIST_AFIFO_CTRL)
+#define HEVC_ASSIST_AFIFO_CTRL1			0x3002
+#define P_HEVC_ASSIST_AFIFO_CTRL1		DOS_REG_ADDR(HEVC_ASSIST_AFIFO_CTRL1)
+#define HEVC_ASSIST_GCLK_EN			0x3003
+#define P_HEVC_ASSIST_GCLK_EN			DOS_REG_ADDR(HEVC_ASSIST_GCLK_EN)
+#define HEVC_ASSIST_SW_RESET			0x3004
+#define P_HEVC_ASSIST_SW_RESET			DOS_REG_ADDR(HEVC_ASSIST_SW_RESET)
+#define HEVC_ASSIST_AMR1_INT0			0x3025
+#define P_HEVC_ASSIST_AMR1_INT0			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT0)
+#define HEVC_ASSIST_AMR1_INT1			0x3026
+#define P_HEVC_ASSIST_AMR1_INT1			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT1)
+#define HEVC_ASSIST_AMR1_INT2			0x3027
+#define P_HEVC_ASSIST_AMR1_INT2			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT2)
+#define HEVC_ASSIST_AMR1_INT3			0x3028
+#define P_HEVC_ASSIST_AMR1_INT3			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT3)
+#define HEVC_ASSIST_AMR1_INT4			0x3029
+#define P_HEVC_ASSIST_AMR1_INT4			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT4)
+#define HEVC_ASSIST_AMR1_INT5			0x302a
+#define P_HEVC_ASSIST_AMR1_INT5			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT5)
+#define HEVC_ASSIST_AMR1_INT6			0x302b
+#define P_HEVC_ASSIST_AMR1_INT6			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT6)
+#define HEVC_ASSIST_AMR1_INT7			0x302c
+#define P_HEVC_ASSIST_AMR1_INT7			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT7)
+#define HEVC_ASSIST_AMR1_INT8			0x302d
+#define P_HEVC_ASSIST_AMR1_INT8			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT8)
+#define HEVC_ASSIST_AMR1_INT9			0x302e
+#define P_HEVC_ASSIST_AMR1_INT9			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INT9)
+#define HEVC_ASSIST_AMR1_INTA			0x302f
+#define P_HEVC_ASSIST_AMR1_INTA			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTA)
+#define HEVC_ASSIST_AMR1_INTB			0x3030
+#define P_HEVC_ASSIST_AMR1_INTB			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTB)
+#define HEVC_ASSIST_AMR1_INTC			0x3031
+#define P_HEVC_ASSIST_AMR1_INTC			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTC)
+#define HEVC_ASSIST_AMR1_INTD			0x3032
+#define P_HEVC_ASSIST_AMR1_INTD			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTD)
+#define HEVC_ASSIST_AMR1_INTE			0x3033
+#define P_HEVC_ASSIST_AMR1_INTE			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTE)
+#define HEVC_ASSIST_AMR1_INTF			0x3034
+#define P_HEVC_ASSIST_AMR1_INTF			DOS_REG_ADDR(HEVC_ASSIST_AMR1_INTF)
+#define HEVC_ASSIST_AMR2_INT0			0x3035
+#define P_HEVC_ASSIST_AMR2_INT0			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT0)
+#define HEVC_ASSIST_AMR2_INT1			0x3036
+#define P_HEVC_ASSIST_AMR2_INT1			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT1)
+#define HEVC_ASSIST_AMR2_INT2			0x3037
+#define P_HEVC_ASSIST_AMR2_INT2			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT2)
+#define HEVC_ASSIST_AMR2_INT3			0x3038
+#define P_HEVC_ASSIST_AMR2_INT3			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT3)
+#define HEVC_ASSIST_AMR2_INT4			0x3039
+#define P_HEVC_ASSIST_AMR2_INT4			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT4)
+#define HEVC_ASSIST_AMR2_INT5			0x303a
+#define P_HEVC_ASSIST_AMR2_INT5			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT5)
+#define HEVC_ASSIST_AMR2_INT6			0x303b
+#define P_HEVC_ASSIST_AMR2_INT6			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT6)
+#define HEVC_ASSIST_AMR2_INT7			0x303c
+#define P_HEVC_ASSIST_AMR2_INT7			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT7)
+#define HEVC_ASSIST_AMR2_INT8			0x303d
+#define P_HEVC_ASSIST_AMR2_INT8			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT8)
+#define HEVC_ASSIST_AMR2_INT9			0x303e
+#define P_HEVC_ASSIST_AMR2_INT9			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INT9)
+#define HEVC_ASSIST_AMR2_INTA			0x303f
+#define P_HEVC_ASSIST_AMR2_INTA			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTA)
+#define HEVC_ASSIST_AMR2_INTB			0x3040
+#define P_HEVC_ASSIST_AMR2_INTB			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTB)
+#define HEVC_ASSIST_AMR2_INTC			0x3041
+#define P_HEVC_ASSIST_AMR2_INTC			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTC)
+#define HEVC_ASSIST_AMR2_INTD			0x3042
+#define P_HEVC_ASSIST_AMR2_INTD			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTD)
+#define HEVC_ASSIST_AMR2_INTE			0x3043
+#define P_HEVC_ASSIST_AMR2_INTE			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTE)
+#define HEVC_ASSIST_AMR2_INTF			0x3044
+#define P_HEVC_ASSIST_AMR2_INTF			DOS_REG_ADDR(HEVC_ASSIST_AMR2_INTF)
+#define HEVC_ASSIST_MBX_SSEL			0x3045
+#define P_HEVC_ASSIST_MBX_SSEL			DOS_REG_ADDR(HEVC_ASSIST_MBX_SSEL)
+#define HEVC_ASSIST_TIMER0_LO			0x3060
+#define P_HEVC_ASSIST_TIMER0_LO			DOS_REG_ADDR(HEVC_ASSIST_TIMER0_LO)
+#define HEVC_ASSIST_TIMER0_HI			0x3061
+#define P_HEVC_ASSIST_TIMER0_HI			DOS_REG_ADDR(HEVC_ASSIST_TIMER0_HI)
+#define HEVC_ASSIST_TIMER1_LO			0x3062
+#define P_HEVC_ASSIST_TIMER1_LO			DOS_REG_ADDR(HEVC_ASSIST_TIMER1_LO)
+#define HEVC_ASSIST_TIMER1_HI			0x3063
+#define P_HEVC_ASSIST_TIMER1_HI			DOS_REG_ADDR(HEVC_ASSIST_TIMER1_HI)
+#define HEVC_ASSIST_DMA_INT			0x3064
+#define P_HEVC_ASSIST_DMA_INT			DOS_REG_ADDR(HEVC_ASSIST_DMA_INT)
+#define HEVC_ASSIST_DMA_INT_MSK			0x3065
+#define P_HEVC_ASSIST_DMA_INT_MSK		DOS_REG_ADDR(HEVC_ASSIST_DMA_INT_MSK)
+#define HEVC_ASSIST_DMA_INT2			0x3066
+#define P_HEVC_ASSIST_DMA_INT2			DOS_REG_ADDR(HEVC_ASSIST_DMA_INT2)
+#define HEVC_ASSIST_DMA_INT_MSK2		0x3067
+#define P_HEVC_ASSIST_DMA_INT_MSK2		DOS_REG_ADDR(HEVC_ASSIST_DMA_INT_MSK2)
+#define HEVC_ASSIST_MBOX0_IRQ_REG		0x3070
+#define P_HEVC_ASSIST_MBOX0_IRQ_REG		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_IRQ_REG)
+#define HEVC_ASSIST_MBOX0_CLR_REG		0x3071
+#define P_HEVC_ASSIST_MBOX0_CLR_REG		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_CLR_REG)
+#define HEVC_ASSIST_MBOX0_MASK			0x3072
+#define P_HEVC_ASSIST_MBOX0_MASK		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_MASK)
+#define HEVC_ASSIST_MBOX0_FIQ_SEL		0x3073
+#define P_HEVC_ASSIST_MBOX0_FIQ_SEL		DOS_REG_ADDR(HEVC_ASSIST_MBOX0_FIQ_SEL)
+#define HEVC_ASSIST_MBOX1_IRQ_REG		0x3074
+#define P_HEVC_ASSIST_MBOX1_IRQ_REG		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_IRQ_REG)
+#define HEVC_ASSIST_MBOX1_CLR_REG		0x3075
+#define P_HEVC_ASSIST_MBOX1_CLR_REG		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_CLR_REG)
+#define HEVC_ASSIST_MBOX1_MASK			0x3076
+#define P_HEVC_ASSIST_MBOX1_MASK		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_MASK)
+#define HEVC_ASSIST_MBOX1_FIQ_SEL		0x3077
+#define P_HEVC_ASSIST_MBOX1_FIQ_SEL		DOS_REG_ADDR(HEVC_ASSIST_MBOX1_FIQ_SEL)
+#define HEVC_ASSIST_MBOX2_IRQ_REG		0x3078
+#define P_HEVC_ASSIST_MBOX2_IRQ_REG		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_IRQ_REG)
+#define HEVC_ASSIST_MBOX2_CLR_REG		0x3079
+#define P_HEVC_ASSIST_MBOX2_CLR_REG		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_CLR_REG)
+#define HEVC_ASSIST_MBOX2_MASK			0x307a
+#define P_HEVC_ASSIST_MBOX2_MASK		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_MASK)
+#define HEVC_ASSIST_MBOX2_FIQ_SEL		0x307b
+#define P_HEVC_ASSIST_MBOX2_FIQ_SEL		DOS_REG_ADDR(HEVC_ASSIST_MBOX2_FIQ_SEL)
+#define HEVC_ASSIST_AXI_CTRL			0x307c
+#define P_HEVC_ASSIST_AXI_CTRL			DOS_REG_ADDR(HEVC_ASSIST_AXI_CTRL)
+#define HEVC_ASSIST_AXI_STATUS			0x307d
+#define P_HEVC_ASSIST_AXI_STATUS		DOS_REG_ADDR(HEVC_ASSIST_AXI_STATUS)
+#define HEVC_ASSIST_SCRATCH_0			0x30c0
+#define P_HEVC_ASSIST_SCRATCH_0			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_0)
+#define HEVC_ASSIST_SCRATCH_1			0x30c1
+#define P_HEVC_ASSIST_SCRATCH_1			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_1)
+#define HEVC_ASSIST_SCRATCH_2			0x30c2
+#define P_HEVC_ASSIST_SCRATCH_2			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_2)
+#define HEVC_ASSIST_SCRATCH_3			0x30c3
+#define P_HEVC_ASSIST_SCRATCH_3			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_3)
+#define HEVC_ASSIST_SCRATCH_4			0x30c4
+#define P_HEVC_ASSIST_SCRATCH_4			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_4)
+#define HEVC_ASSIST_SCRATCH_5			0x30c5
+#define P_HEVC_ASSIST_SCRATCH_5			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_5)
+#define HEVC_ASSIST_SCRATCH_6			0x30c6
+#define P_HEVC_ASSIST_SCRATCH_6			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_6)
+#define HEVC_ASSIST_SCRATCH_7			0x30c7
+#define P_HEVC_ASSIST_SCRATCH_7			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_7)
+#define HEVC_ASSIST_SCRATCH_8			0x30c8
+#define P_HEVC_ASSIST_SCRATCH_8			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_8)
+#define HEVC_ASSIST_SCRATCH_9			0x30c9
+#define P_HEVC_ASSIST_SCRATCH_9			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_9)
+#define HEVC_ASSIST_SCRATCH_A			0x30ca
+#define P_HEVC_ASSIST_SCRATCH_A			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_A)
+#define HEVC_ASSIST_SCRATCH_B			0x30cb
+#define P_HEVC_ASSIST_SCRATCH_B			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_B)
+#define HEVC_ASSIST_SCRATCH_C			0x30cc
+#define P_HEVC_ASSIST_SCRATCH_C			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_C)
+#define HEVC_ASSIST_SCRATCH_D			0x30cd
+#define P_HEVC_ASSIST_SCRATCH_D			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_D)
+#define HEVC_ASSIST_SCRATCH_E			0x30ce
+#define P_HEVC_ASSIST_SCRATCH_E			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_E)
+#define HEVC_ASSIST_SCRATCH_F			0x30cf
+#define P_HEVC_ASSIST_SCRATCH_F			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_F)
+#define HEVC_ASSIST_SCRATCH_G			0x30d0
+#define P_HEVC_ASSIST_SCRATCH_G			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_G)
+#define HEVC_ASSIST_SCRATCH_H			0x30d1
+#define P_HEVC_ASSIST_SCRATCH_H			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_H)
+#define HEVC_ASSIST_SCRATCH_I			0x30d2
+#define P_HEVC_ASSIST_SCRATCH_I			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_I)
+#define HEVC_ASSIST_SCRATCH_J			0x30d3
+#define P_HEVC_ASSIST_SCRATCH_J			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_J)
+#define HEVC_ASSIST_SCRATCH_K			0x30d4
+#define P_HEVC_ASSIST_SCRATCH_K			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_K)
+#define HEVC_ASSIST_SCRATCH_L			0x30d5
+#define P_HEVC_ASSIST_SCRATCH_L			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_L)
+#define HEVC_ASSIST_SCRATCH_M			0x30d6
+#define P_HEVC_ASSIST_SCRATCH_M			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_M)
+#define HEVC_ASSIST_SCRATCH_N			0x30d7
+#define P_HEVC_ASSIST_SCRATCH_N			DOS_REG_ADDR(HEVC_ASSIST_SCRATCH_N)
+#define HEVC_PARSER_VERSION			0x3100
+#define P_HEVC_PARSER_VERSION			DOS_REG_ADDR(HEVC_PARSER_VERSION)
+#define HEVC_STREAM_CONTROL			0x3101
+#define P_HEVC_STREAM_CONTROL			DOS_REG_ADDR(HEVC_STREAM_CONTROL)
+#define HEVC_STREAM_START_ADDR			0x3102
+#define P_HEVC_STREAM_START_ADDR		DOS_REG_ADDR(HEVC_STREAM_START_ADDR)
+#define HEVC_STREAM_END_ADDR			0x3103
+#define P_HEVC_STREAM_END_ADDR			DOS_REG_ADDR(HEVC_STREAM_END_ADDR)
+#define HEVC_STREAM_WR_PTR			0x3104
+#define P_HEVC_STREAM_WR_PTR			DOS_REG_ADDR(HEVC_STREAM_WR_PTR)
+#define HEVC_STREAM_RD_PTR			0x3105
+#define P_HEVC_STREAM_RD_PTR			DOS_REG_ADDR(HEVC_STREAM_RD_PTR)
+#define HEVC_STREAM_LEVEL			0x3106
+#define P_HEVC_STREAM_LEVEL			DOS_REG_ADDR(HEVC_STREAM_LEVEL)
+#define HEVC_STREAM_FIFO_CTL			0x3107
+#define P_HEVC_STREAM_FIFO_CTL			DOS_REG_ADDR(HEVC_STREAM_FIFO_CTL)
+#define HEVC_SHIFT_CONTROL			0x3108
+#define P_HEVC_SHIFT_CONTROL			DOS_REG_ADDR(HEVC_SHIFT_CONTROL)
+#define HEVC_SHIFT_STARTCODE			0x3109
+#define P_HEVC_SHIFT_STARTCODE			DOS_REG_ADDR(HEVC_SHIFT_STARTCODE)
+#define HEVC_SHIFT_EMULATECODE			0x310a
+#define P_HEVC_SHIFT_EMULATECODE		DOS_REG_ADDR(HEVC_SHIFT_EMULATECODE)
+#define HEVC_SHIFT_STATUS			0x310b
+#define P_HEVC_SHIFT_STATUS			DOS_REG_ADDR(HEVC_SHIFT_STATUS)
+#define HEVC_SHIFTED_DATA			0x310c
+#define P_HEVC_SHIFTED_DATA			DOS_REG_ADDR(HEVC_SHIFTED_DATA)
+#define HEVC_SHIFT_BYTE_COUNT			0x310d
+#define P_HEVC_SHIFT_BYTE_COUNT			DOS_REG_ADDR(HEVC_SHIFT_BYTE_COUNT)
+#define HEVC_SHIFT_COMMAND			0x310e
+#define P_HEVC_SHIFT_COMMAND			DOS_REG_ADDR(HEVC_SHIFT_COMMAND)
+#define HEVC_ELEMENT_RESULT			0x310f
+#define P_HEVC_ELEMENT_RESULT			DOS_REG_ADDR(HEVC_ELEMENT_RESULT)
+#define HEVC_CABAC_CONTROL			0x3110
+#define P_HEVC_CABAC_CONTROL			DOS_REG_ADDR(HEVC_CABAC_CONTROL)
+#define HEVC_PARSER_SLICE_INFO			0x3111
+#define P_HEVC_PARSER_SLICE_INFO		DOS_REG_ADDR(HEVC_PARSER_SLICE_INFO)
+#define HEVC_PARSER_CMD_WRITE			0x3112
+#define P_HEVC_PARSER_CMD_WRITE			DOS_REG_ADDR(HEVC_PARSER_CMD_WRITE)
+#define HEVC_PARSER_CORE_CONTROL		0x3113
+#define P_HEVC_PARSER_CORE_CONTROL		DOS_REG_ADDR(HEVC_PARSER_CORE_CONTROL)
+#define HEVC_PARSER_CMD_FETCH			0x3114
+#define P_HEVC_PARSER_CMD_FETCH			DOS_REG_ADDR(HEVC_PARSER_CMD_FETCH)
+#define HEVC_PARSER_CMD_STATUS			0x3115
+#define P_HEVC_PARSER_CMD_STATUS		DOS_REG_ADDR(HEVC_PARSER_CMD_STATUS)
+#define HEVC_PARSER_LCU_INFO			0x3116
+#define P_HEVC_PARSER_LCU_INFO			DOS_REG_ADDR(HEVC_PARSER_LCU_INFO)
+#define HEVC_PARSER_HEADER_INFO			0x3117
+#define P_HEVC_PARSER_HEADER_INFO		DOS_REG_ADDR(HEVC_PARSER_HEADER_INFO)
+#define HEVC_PARSER_RESULT_0			0x3118
+#define P_HEVC_PARSER_RESULT_0			DOS_REG_ADDR(HEVC_PARSER_RESULT_0)
+#define HEVC_PARSER_RESULT_1			0x3119
+#define P_HEVC_PARSER_RESULT_1			DOS_REG_ADDR(HEVC_PARSER_RESULT_1)
+#define HEVC_PARSER_RESULT_2			0x311a
+#define P_HEVC_PARSER_RESULT_2			DOS_REG_ADDR(HEVC_PARSER_RESULT_2)
+#define HEVC_PARSER_RESULT_3			0x311b
+#define P_HEVC_PARSER_RESULT_3			DOS_REG_ADDR(HEVC_PARSER_RESULT_3)
+#define HEVC_CABAC_TOP_INFO			0x311c
+#define P_HEVC_CABAC_TOP_INFO			DOS_REG_ADDR(HEVC_CABAC_TOP_INFO)
+#define HEVC_CABAC_TOP_INFO_2			0x311d
+#define P_HEVC_CABAC_TOP_INFO_2			DOS_REG_ADDR(HEVC_CABAC_TOP_INFO_2)
+#define HEVC_CABAC_LEFT_INFO			0x311e
+#define P_HEVC_CABAC_LEFT_INFO			DOS_REG_ADDR(HEVC_CABAC_LEFT_INFO)
+#define HEVC_CABAC_LEFT_INFO_2			0x311f
+#define P_HEVC_CABAC_LEFT_INFO_2		DOS_REG_ADDR(HEVC_CABAC_LEFT_INFO_2)
+#define HEVC_PARSER_INT_CONTROL			0x3120
+#define P_HEVC_PARSER_INT_CONTROL		DOS_REG_ADDR(HEVC_PARSER_INT_CONTROL)
+#define HEVC_PARSER_INT_STATUS			0x3121
+#define P_HEVC_PARSER_INT_STATUS		DOS_REG_ADDR(HEVC_PARSER_INT_STATUS)
+#define HEVC_PARSER_IF_CONTROL			0x3122
+#define P_HEVC_PARSER_IF_CONTROL		DOS_REG_ADDR(HEVC_PARSER_IF_CONTROL)
+#define HEVC_PARSER_PICTURE_SIZE		0x3123
+#define P_HEVC_PARSER_PICTURE_SIZE		DOS_REG_ADDR(HEVC_PARSER_PICTURE_SIZE)
+#define HEVC_PARSER_LCU_START			0x3124
+#define P_HEVC_PARSER_LCU_START			DOS_REG_ADDR(HEVC_PARSER_LCU_START)
+#define HEVC_PARSER_HEADER_INFO2		0x3125
+#define P_HEVC_PARSER_HEADER_INFO2		DOS_REG_ADDR(HEVC_PARSER_HEADER_INFO2)
+#define HEVC_PARSER_QUANT_READ			0x3126
+#define P_HEVC_PARSER_QUANT_READ		DOS_REG_ADDR(HEVC_PARSER_QUANT_READ)
+#define HEVC_PARSER_RESERVED_27			0x3127
+#define P_HEVC_PARSER_RESERVED_27		DOS_REG_ADDR(HEVC_PARSER_RESERVED_27)
+#define HEVC_PARSER_CMD_SKIP_0			0x3128
+#define P_HEVC_PARSER_CMD_SKIP_0		DOS_REG_ADDR(HEVC_PARSER_CMD_SKIP_0)
+#define HEVC_PARSER_CMD_SKIP_1			0x3129
+#define P_HEVC_PARSER_CMD_SKIP_1		DOS_REG_ADDR(HEVC_PARSER_CMD_SKIP_1)
+#define HEVC_PARSER_CMD_SKIP_2			0x312a
+#define P_HEVC_PARSER_CMD_SKIP_2		DOS_REG_ADDR(HEVC_PARSER_CMD_SKIP_2)
+#define HEVC_PARSER_MANUAL_CMD			0x312b
+#define P_HEVC_PARSER_MANUAL_CMD		DOS_REG_ADDR(HEVC_PARSER_MANUAL_CMD)
+#define HEVC_PARSER_MEM_RD_ADDR			0x312c
+#define P_HEVC_PARSER_MEM_RD_ADDR		DOS_REG_ADDR(HEVC_PARSER_MEM_RD_ADDR)
+#define HEVC_PARSER_MEM_WR_ADDR			0x312d
+#define P_HEVC_PARSER_MEM_WR_ADDR		DOS_REG_ADDR(HEVC_PARSER_MEM_WR_ADDR)
+#define HEVC_PARSER_MEM_RW_DATA			0x312e
+#define P_HEVC_PARSER_MEM_RW_DATA		DOS_REG_ADDR(HEVC_PARSER_MEM_RW_DATA)
+#define HEVC_SAO_IF_STATUS			0x3130
+#define P_HEVC_SAO_IF_STATUS			DOS_REG_ADDR(HEVC_SAO_IF_STATUS)
+#define HEVC_SAO_IF_DATA_Y			0x3131
+#define P_HEVC_SAO_IF_DATA_Y			DOS_REG_ADDR(HEVC_SAO_IF_DATA_Y)
+#define HEVC_SAO_IF_DATA_U			0x3132
+#define P_HEVC_SAO_IF_DATA_U			DOS_REG_ADDR(HEVC_SAO_IF_DATA_U)
+#define HEVC_SAO_IF_DATA_V			0x3133
+#define P_HEVC_SAO_IF_DATA_V			DOS_REG_ADDR(HEVC_SAO_IF_DATA_V)
+#define HEVC_STREAM_SWAP_ADDR			0x3134
+#define P_HEVC_STREAM_SWAP_ADDR			DOS_REG_ADDR(HEVC_STREAM_SWAP_ADDR)
+#define HEVC_STREAM_SWAP_CTRL			0x3135
+#define P_HEVC_STREAM_SWAP_CTRL			DOS_REG_ADDR(HEVC_STREAM_SWAP_CTRL)
+#define HEVC_IQIT_IF_WAIT_CNT			0x3136
+#define P_HEVC_IQIT_IF_WAIT_CNT			DOS_REG_ADDR(HEVC_IQIT_IF_WAIT_CNT)
+#define HEVC_MPRED_IF_WAIT_CNT			0x3137
+#define P_HEVC_MPRED_IF_WAIT_CNT		DOS_REG_ADDR(HEVC_MPRED_IF_WAIT_CNT)
+#define HEVC_SAO_IF_WAIT_CNT			0x3138
+#define P_HEVC_SAO_IF_WAIT_CNT			DOS_REG_ADDR(HEVC_SAO_IF_WAIT_CNT)
+#define HEVC_PARSER_DEBUG_IDX			0x313e
+#define P_HEVC_PARSER_DEBUG_IDX			DOS_REG_ADDR(HEVC_PARSER_DEBUG_IDX)
+#define HEVC_PARSER_DEBUG_DAT			0x313f
+#define P_HEVC_PARSER_DEBUG_DAT			DOS_REG_ADDR(HEVC_PARSER_DEBUG_DAT)
+#define HEVC_MPRED_VERSION			0x3200
+#define P_HEVC_MPRED_VERSION			DOS_REG_ADDR(HEVC_MPRED_VERSION)
+#define HEVC_MPRED_CTRL0			0x3201
+#define P_HEVC_MPRED_CTRL0			DOS_REG_ADDR(HEVC_MPRED_CTRL0)
+#define HEVC_MPRED_CTRL1			0x3202
+#define P_HEVC_MPRED_CTRL1			DOS_REG_ADDR(HEVC_MPRED_CTRL1)
+#define HEVC_MPRED_INT_EN			0x3203
+#define P_HEVC_MPRED_INT_EN			DOS_REG_ADDR(HEVC_MPRED_INT_EN)
+#define HEVC_MPRED_INT_STATUS			0x3204
+#define P_HEVC_MPRED_INT_STATUS			DOS_REG_ADDR(HEVC_MPRED_INT_STATUS)
+#define HEVC_MPRED_PIC_SIZE			0x3205
+#define P_HEVC_MPRED_PIC_SIZE			DOS_REG_ADDR(HEVC_MPRED_PIC_SIZE)
+#define HEVC_MPRED_PIC_SIZE_LCU			0x3206
+#define P_HEVC_MPRED_PIC_SIZE_LCU		DOS_REG_ADDR(HEVC_MPRED_PIC_SIZE_LCU)
+#define HEVC_MPRED_TILE_START			0x3207
+#define P_HEVC_MPRED_TILE_START			DOS_REG_ADDR(HEVC_MPRED_TILE_START)
+#define HEVC_MPRED_TILE_SIZE_LCU		0x3208
+#define P_HEVC_MPRED_TILE_SIZE_LCU		DOS_REG_ADDR(HEVC_MPRED_TILE_SIZE_LCU)
+#define HEVC_MPRED_REF_NUM			0x3209
+#define P_HEVC_MPRED_REF_NUM			DOS_REG_ADDR(HEVC_MPRED_REF_NUM)
+#define HEVC_MPRED_LT_REF			0x320a
+#define P_HEVC_MPRED_LT_REF			DOS_REG_ADDR(HEVC_MPRED_LT_REF)
+#define HEVC_MPRED_LT_COLREF			0x320b
+#define P_HEVC_MPRED_LT_COLREF			DOS_REG_ADDR(HEVC_MPRED_LT_COLREF)
+#define HEVC_MPRED_REF_EN_L0			0x320c
+#define P_HEVC_MPRED_REF_EN_L0			DOS_REG_ADDR(HEVC_MPRED_REF_EN_L0)
+#define HEVC_MPRED_REF_EN_L1			0x320d
+#define P_HEVC_MPRED_REF_EN_L1			DOS_REG_ADDR(HEVC_MPRED_REF_EN_L1)
+#define HEVC_MPRED_COLREF_EN_L0			0x320e
+#define P_HEVC_MPRED_COLREF_EN_L0		DOS_REG_ADDR(HEVC_MPRED_COLREF_EN_L0)
+#define HEVC_MPRED_COLREF_EN_L1			0x320f
+#define P_HEVC_MPRED_COLREF_EN_L1		DOS_REG_ADDR(HEVC_MPRED_COLREF_EN_L1)
+#define HEVC_MPRED_AXI_WCTRL			0x3210
+#define P_HEVC_MPRED_AXI_WCTRL			DOS_REG_ADDR(HEVC_MPRED_AXI_WCTRL)
+#define HEVC_MPRED_AXI_RCTRL			0x3211
+#define P_HEVC_MPRED_AXI_RCTRL			DOS_REG_ADDR(HEVC_MPRED_AXI_RCTRL)
+#define HEVC_MPRED_ABV_START_ADDR		0x3212
+#define P_HEVC_MPRED_ABV_START_ADDR		DOS_REG_ADDR(HEVC_MPRED_ABV_START_ADDR)
+#define HEVC_MPRED_MV_WR_START_ADDR		0x3213
+#define P_HEVC_MPRED_MV_WR_START_ADDR		DOS_REG_ADDR(HEVC_MPRED_MV_WR_START_ADDR)
+#define HEVC_MPRED_MV_RD_START_ADDR		0x3214
+#define P_HEVC_MPRED_MV_RD_START_ADDR		DOS_REG_ADDR(HEVC_MPRED_MV_RD_START_ADDR)
+#define HEVC_MPRED_MV_WPTR			0x3215
+#define P_HEVC_MPRED_MV_WPTR			DOS_REG_ADDR(HEVC_MPRED_MV_WPTR)
+#define HEVC_MPRED_MV_RPTR			0x3216
+#define P_HEVC_MPRED_MV_RPTR			DOS_REG_ADDR(HEVC_MPRED_MV_RPTR)
+#define HEVC_MPRED_MV_WR_ROW_JUMP		0x3217
+#define P_HEVC_MPRED_MV_WR_ROW_JUMP		DOS_REG_ADDR(HEVC_MPRED_MV_WR_ROW_JUMP)
+#define HEVC_MPRED_MV_RD_ROW_JUMP		0x3218
+#define P_HEVC_MPRED_MV_RD_ROW_JUMP		DOS_REG_ADDR(HEVC_MPRED_MV_RD_ROW_JUMP)
+#define HEVC_MPRED_CURR_LCU			0x3219
+#define P_HEVC_MPRED_CURR_LCU			DOS_REG_ADDR(HEVC_MPRED_CURR_LCU)
+#define HEVC_MPRED_ABV_WPTR			0x321a
+#define P_HEVC_MPRED_ABV_WPTR			DOS_REG_ADDR(HEVC_MPRED_ABV_WPTR)
+#define HEVC_MPRED_ABV_RPTR			0x321b
+#define P_HEVC_MPRED_ABV_RPTR			DOS_REG_ADDR(HEVC_MPRED_ABV_RPTR)
+#define HEVC_MPRED_CTRL2			0x321c
+#define P_HEVC_MPRED_CTRL2			DOS_REG_ADDR(HEVC_MPRED_CTRL2)
+#define HEVC_MPRED_CTRL3			0x321d
+#define P_HEVC_MPRED_CTRL3			DOS_REG_ADDR(HEVC_MPRED_CTRL3)
+#define HEVC_MPRED_MV_WLCUY			0x321e
+#define P_HEVC_MPRED_MV_WLCUY			DOS_REG_ADDR(HEVC_MPRED_MV_WLCUY)
+#define HEVC_MPRED_MV_RLCUY			0x321f
+#define P_HEVC_MPRED_MV_RLCUY			DOS_REG_ADDR(HEVC_MPRED_MV_RLCUY)
+#define HEVC_MPRED_L0_REF00_POC			0x3220
+#define P_HEVC_MPRED_L0_REF00_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF00_POC)
+#define HEVC_MPRED_L0_REF01_POC			0x3221
+#define P_HEVC_MPRED_L0_REF01_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF01_POC)
+#define HEVC_MPRED_L0_REF02_POC			0x3222
+#define P_HEVC_MPRED_L0_REF02_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF02_POC)
+#define HEVC_MPRED_L0_REF03_POC			0x3223
+#define P_HEVC_MPRED_L0_REF03_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF03_POC)
+#define HEVC_MPRED_L0_REF04_POC			0x3224
+#define P_HEVC_MPRED_L0_REF04_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF04_POC)
+#define HEVC_MPRED_L0_REF05_POC			0x3225
+#define P_HEVC_MPRED_L0_REF05_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF05_POC)
+#define HEVC_MPRED_L0_REF06_POC			0x3226
+#define P_HEVC_MPRED_L0_REF06_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF06_POC)
+#define HEVC_MPRED_L0_REF07_POC			0x3227
+#define P_HEVC_MPRED_L0_REF07_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF07_POC)
+#define HEVC_MPRED_L0_REF08_POC			0x3228
+#define P_HEVC_MPRED_L0_REF08_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF08_POC)
+#define HEVC_MPRED_L0_REF09_POC			0x3229
+#define P_HEVC_MPRED_L0_REF09_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF09_POC)
+#define HEVC_MPRED_L0_REF10_POC			0x322a
+#define P_HEVC_MPRED_L0_REF10_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF10_POC)
+#define HEVC_MPRED_L0_REF11_POC			0x322b
+#define P_HEVC_MPRED_L0_REF11_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF11_POC)
+#define HEVC_MPRED_L0_REF12_POC			0x322c
+#define P_HEVC_MPRED_L0_REF12_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF12_POC)
+#define HEVC_MPRED_L0_REF13_POC			0x322d
+#define P_HEVC_MPRED_L0_REF13_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF13_POC)
+#define HEVC_MPRED_L0_REF14_POC			0x322e
+#define P_HEVC_MPRED_L0_REF14_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF14_POC)
+#define HEVC_MPRED_L0_REF15_POC			0x322f
+#define P_HEVC_MPRED_L0_REF15_POC		DOS_REG_ADDR(HEVC_MPRED_L0_REF15_POC)
+#define HEVC_MPRED_L1_REF00_POC			0x3230
+#define P_HEVC_MPRED_L1_REF00_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF00_POC)
+#define HEVC_MPRED_L1_REF01_POC			0x3231
+#define P_HEVC_MPRED_L1_REF01_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF01_POC)
+#define HEVC_MPRED_L1_REF02_POC			0x3232
+#define P_HEVC_MPRED_L1_REF02_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF02_POC)
+#define HEVC_MPRED_L1_REF03_POC			0x3233
+#define P_HEVC_MPRED_L1_REF03_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF03_POC)
+#define HEVC_MPRED_L1_REF04_POC			0x3234
+#define P_HEVC_MPRED_L1_REF04_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF04_POC)
+#define HEVC_MPRED_L1_REF05_POC			0x3235
+#define P_HEVC_MPRED_L1_REF05_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF05_POC)
+#define HEVC_MPRED_L1_REF06_POC			0x3236
+#define P_HEVC_MPRED_L1_REF06_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF06_POC)
+#define HEVC_MPRED_L1_REF07_POC			0x3237
+#define P_HEVC_MPRED_L1_REF07_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF07_POC)
+#define HEVC_MPRED_L1_REF08_POC			0x3238
+#define P_HEVC_MPRED_L1_REF08_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF08_POC)
+#define HEVC_MPRED_L1_REF09_POC			0x3239
+#define P_HEVC_MPRED_L1_REF09_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF09_POC)
+#define HEVC_MPRED_L1_REF10_POC			0x323a
+#define P_HEVC_MPRED_L1_REF10_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF10_POC)
+#define HEVC_MPRED_L1_REF11_POC			0x323b
+#define P_HEVC_MPRED_L1_REF11_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF11_POC)
+#define HEVC_MPRED_L1_REF12_POC			0x323c
+#define P_HEVC_MPRED_L1_REF12_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF12_POC)
+#define HEVC_MPRED_L1_REF13_POC			0x323d
+#define P_HEVC_MPRED_L1_REF13_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF13_POC)
+#define HEVC_MPRED_L1_REF14_POC			0x323e
+#define P_HEVC_MPRED_L1_REF14_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF14_POC)
+#define HEVC_MPRED_L1_REF15_POC			0x323f
+#define P_HEVC_MPRED_L1_REF15_POC		DOS_REG_ADDR(HEVC_MPRED_L1_REF15_POC)
+#define HEVC_MPRED_PIC_SIZE_EXT			0x3240
+#define P_HEVC_MPRED_PIC_SIZE_EXT		DOS_REG_ADDR(HEVC_MPRED_PIC_SIZE_EXT)
+#define HEVC_MPRED_DBG_MODE0			0x3241
+#define P_HEVC_MPRED_DBG_MODE0			DOS_REG_ADDR(HEVC_MPRED_DBG_MODE0)
+#define HEVC_MPRED_DBG_MODE1			0x3242
+#define P_HEVC_MPRED_DBG_MODE1			DOS_REG_ADDR(HEVC_MPRED_DBG_MODE1)
+#define HEVC_MPRED_DBG2_MODE			0x3243
+#define P_HEVC_MPRED_DBG2_MODE			DOS_REG_ADDR(HEVC_MPRED_DBG2_MODE)
+#define HEVC_MPRED_IMP_CMD0			0x3244
+#define P_HEVC_MPRED_IMP_CMD0			DOS_REG_ADDR(HEVC_MPRED_IMP_CMD0)
+#define HEVC_MPRED_IMP_CMD1			0x3245
+#define P_HEVC_MPRED_IMP_CMD1			DOS_REG_ADDR(HEVC_MPRED_IMP_CMD1)
+#define HEVC_MPRED_IMP_CMD2			0x3246
+#define P_HEVC_MPRED_IMP_CMD2			DOS_REG_ADDR(HEVC_MPRED_IMP_CMD2)
+#define HEVC_MPRED_IMP_CMD3			0x3247
+#define P_HEVC_MPRED_IMP_CMD3			DOS_REG_ADDR(HEVC_MPRED_IMP_CMD3)
+#define HEVC_MPRED_DBG2_DATA_0			0x3248
+#define P_HEVC_MPRED_DBG2_DATA_0		DOS_REG_ADDR(HEVC_MPRED_DBG2_DATA_0)
+#define HEVC_MPRED_DBG2_DATA_1			0x3249
+#define P_HEVC_MPRED_DBG2_DATA_1		DOS_REG_ADDR(HEVC_MPRED_DBG2_DATA_1)
+#define HEVC_MPRED_DBG2_DATA_2			0x324a
+#define P_HEVC_MPRED_DBG2_DATA_2		DOS_REG_ADDR(HEVC_MPRED_DBG2_DATA_2)
+#define HEVC_MPRED_DBG2_DATA_3			0x324b
+#define P_HEVC_MPRED_DBG2_DATA_3		DOS_REG_ADDR(HEVC_MPRED_DBG2_DATA_3)
+#define HEVC_MPRED_DBG_DATA_0			0x3250
+#define P_HEVC_MPRED_DBG_DATA_0			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_0)
+#define HEVC_MPRED_DBG_DATA_1			0x3251
+#define P_HEVC_MPRED_DBG_DATA_1			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_1)
+#define HEVC_MPRED_DBG_DATA_2			0x3252
+#define P_HEVC_MPRED_DBG_DATA_2			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_2)
+#define HEVC_MPRED_DBG_DATA_3			0x3253
+#define P_HEVC_MPRED_DBG_DATA_3			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_3)
+#define HEVC_MPRED_DBG_DATA_4			0x3254
+#define P_HEVC_MPRED_DBG_DATA_4			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_4)
+#define HEVC_MPRED_DBG_DATA_5			0x3255
+#define P_HEVC_MPRED_DBG_DATA_5			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_5)
+#define HEVC_MPRED_DBG_DATA_6			0x3256
+#define P_HEVC_MPRED_DBG_DATA_6			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_6)
+#define HEVC_MPRED_DBG_DATA_7			0x3257
+#define P_HEVC_MPRED_DBG_DATA_7			DOS_REG_ADDR(HEVC_MPRED_DBG_DATA_7)
+#define HEVC_MPRED_CUR_POC			0x3260
+#define P_HEVC_MPRED_CUR_POC			DOS_REG_ADDR(HEVC_MPRED_CUR_POC)
+#define HEVC_MPRED_COL_POC			0x3261
+#define P_HEVC_MPRED_COL_POC			DOS_REG_ADDR(HEVC_MPRED_COL_POC)
+#define HEVC_MPRED_MV_RD_END_ADDR		0x3262
+#define P_HEVC_MPRED_MV_RD_END_ADDR		DOS_REG_ADDR(HEVC_MPRED_MV_RD_END_ADDR)
+#define HEVCD_IPP_TOP_CNTL			0x3400
+#define P_HEVCD_IPP_TOP_CNTL			DOS_REG_ADDR(HEVCD_IPP_TOP_CNTL)
+#define HEVCD_IPP_TOP_STATUS			0x3401
+#define P_HEVCD_IPP_TOP_STATUS			DOS_REG_ADDR(HEVCD_IPP_TOP_STATUS)
+#define HEVCD_IPP_TOP_FRMCONFIG			0x3402
+#define P_HEVCD_IPP_TOP_FRMCONFIG		DOS_REG_ADDR(HEVCD_IPP_TOP_FRMCONFIG)
+#define HEVCD_IPP_TOP_TILECONFIG1		0x3403
+#define P_HEVCD_IPP_TOP_TILECONFIG1		DOS_REG_ADDR(HEVCD_IPP_TOP_TILECONFIG1)
+#define HEVCD_IPP_TOP_TILECONFIG2		0x3404
+#define P_HEVCD_IPP_TOP_TILECONFIG2		DOS_REG_ADDR(HEVCD_IPP_TOP_TILECONFIG2)
+#define HEVCD_IPP_TOP_TILECONFIG3		0x3405
+#define P_HEVCD_IPP_TOP_TILECONFIG3		DOS_REG_ADDR(HEVCD_IPP_TOP_TILECONFIG3)
+#define HEVCD_IPP_TOP_LCUCONFIG			0x3406
+#define P_HEVCD_IPP_TOP_LCUCONFIG		DOS_REG_ADDR(HEVCD_IPP_TOP_LCUCONFIG)
+#define HEVCD_IPP_TOP_FRMCTL			0x3407
+#define P_HEVCD_IPP_TOP_FRMCTL			DOS_REG_ADDR(HEVCD_IPP_TOP_FRMCTL)
+#define HEVCD_IPP_CONFIG			0x3408
+#define P_HEVCD_IPP_CONFIG			DOS_REG_ADDR(HEVCD_IPP_CONFIG)
+#define HEVCD_IPP_LINEBUFF_BASE			0x3409
+#define P_HEVCD_IPP_LINEBUFF_BASE		DOS_REG_ADDR(HEVCD_IPP_LINEBUFF_BASE)
+#define HEVCD_IPP_INTR_MASK			0x340a
+#define P_HEVCD_IPP_INTR_MASK			DOS_REG_ADDR(HEVCD_IPP_INTR_MASK)
+#define HEVCD_IPP_AXIIF_CONFIG			0x340b
+#define P_HEVCD_IPP_AXIIF_CONFIG		DOS_REG_ADDR(HEVCD_IPP_AXIIF_CONFIG)
+#define HEVCD_IPP_SWMPREDIF_CONFIG		0x3410
+#define P_HEVCD_IPP_SWMPREDIF_CONFIG		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_CONFIG)
+#define HEVCD_IPP_SWMPREDIF_STATUS		0x3411
+#define P_HEVCD_IPP_SWMPREDIF_STATUS		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_STATUS)
+#define HEVCD_IPP_SWMPREDIF_CTBINFO		0x3412
+#define P_HEVCD_IPP_SWMPREDIF_CTBINFO		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_CTBINFO)
+#define HEVCD_IPP_SWMPREDIF_PUINFO0		0x3413
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO0		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO0)
+#define HEVCD_IPP_SWMPREDIF_PUINFO1		0x3414
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO1		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO1)
+#define HEVCD_IPP_SWMPREDIF_PUINFO2		0x3415
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO2		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO2)
+#define HEVCD_IPP_SWMPREDIF_PUINFO3		0x3416
+#define P_HEVCD_IPP_SWMPREDIF_PUINFO3		DOS_REG_ADDR(HEVCD_IPP_SWMPREDIF_PUINFO3)
+#define HEVCD_IPP_DYNCLKGATE_CONFIG		0x3420
+#define P_HEVCD_IPP_DYNCLKGATE_CONFIG		DOS_REG_ADDR(HEVCD_IPP_DYNCLKGATE_CONFIG)
+#define HEVCD_IPP_DYNCLKGATE_STATUS		0x3421
+#define P_HEVCD_IPP_DYNCLKGATE_STATUS		DOS_REG_ADDR(HEVCD_IPP_DYNCLKGATE_STATUS)
+#define HEVCD_IPP_DBG_SEL			0x3430
+#define P_HEVCD_IPP_DBG_SEL			DOS_REG_ADDR(HEVCD_IPP_DBG_SEL)
+#define HEVCD_IPP_DBG_DATA			0x3431
+#define P_HEVCD_IPP_DBG_DATA			DOS_REG_ADDR(HEVCD_IPP_DBG_DATA)
+#define HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR		0x3460
+#define P_HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR	DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR)
+#define HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR		0x3461
+#define P_HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR	DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR)
+#define HEVCD_MPP_ANC2AXI_TBL_WDATA_ADDR	0x3462
+#define P_HEVCD_MPP_ANC2AXI_TBL_WDATA_ADDR	DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_WDATA_ADDR)
+#define HEVCD_MPP_ANC2AXI_TBL_RDATA_ADDR	0x3463
+#define P_HEVCD_MPP_ANC2AXI_TBL_RDATA_ADDR	DOS_REG_ADDR(HEVCD_MPP_ANC2AXI_TBL_RDATA_ADDR)
+#define HEVCD_MPP_WEIGHTPRED_CNTL_ADDR		0x347b
+#define P_HEVCD_MPP_WEIGHTPRED_CNTL_ADDR	DOS_REG_ADDR(HEVCD_MPP_WEIGHTPRED_CNTL_ADDR)
+#define HEVCD_MPP_L0_WEIGHT_FLAG_ADDR		0x347c
+#define P_HEVCD_MPP_L0_WEIGHT_FLAG_ADDR		DOS_REG_ADDR(HEVCD_MPP_L0_WEIGHT_FLAG_ADDR)
+#define HEVCD_MPP_L1_WEIGHT_FLAG_ADDR		0x347d
+#define P_HEVCD_MPP_L1_WEIGHT_FLAG_ADDR		DOS_REG_ADDR(HEVCD_MPP_L1_WEIGHT_FLAG_ADDR)
+#define HEVCD_MPP_YLOG2WGHTDENOM_ADDR		0x347e
+#define P_HEVCD_MPP_YLOG2WGHTDENOM_ADDR		DOS_REG_ADDR(HEVCD_MPP_YLOG2WGHTDENOM_ADDR)
+#define HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR	0x347f
+#define P_HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR	DOS_REG_ADDR(HEVCD_MPP_DELTACLOG2WGHTDENOM_ADDR)
+#define HEVCD_MPP_WEIGHT_ADDR			0x3480
+#define P_HEVCD_MPP_WEIGHT_ADDR			DOS_REG_ADDR(HEVCD_MPP_WEIGHT_ADDR)
+#define HEVCD_MPP_WEIGHT_DATA			0x3481
+#define P_HEVCD_MPP_WEIGHT_DATA			DOS_REG_ADDR(HEVCD_MPP_WEIGHT_DATA)
+#define HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR	0x34c0
+#define P_HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR	DOS_REG_ADDR(HEVCD_MPP_ANC_CANVAS_ACCCONFIG_ADDR)
+#define HEVCD_MPP_ANC_CANVAS_DATA_ADDR		0x34c1
+#define P_HEVCD_MPP_ANC_CANVAS_DATA_ADDR	DOS_REG_ADDR(HEVCD_MPP_ANC_CANVAS_DATA_ADDR)
+#define HEVCD_MCRCC_CTL1			0x34f0
+#define P_HEVCD_MCRCC_CTL1			DOS_REG_ADDR(HEVCD_MCRCC_CTL1)
+#define HEVCD_MCRCC_CTL2			0x34f1
+#define P_HEVCD_MCRCC_CTL2			DOS_REG_ADDR(HEVCD_MCRCC_CTL2)
+#define HEVCD_MCRCC_CTL3			0x34f2
+#define P_HEVCD_MCRCC_CTL3			DOS_REG_ADDR(HEVCD_MCRCC_CTL3)
+#define HEVCD_MCRCC_PERFMON_CTL			0x34f3
+#define P_HEVCD_MCRCC_PERFMON_CTL		DOS_REG_ADDR(HEVCD_MCRCC_PERFMON_CTL)
+#define HEVCD_MCRCC_PERFMON_DATA		0x34f4
+#define P_HEVCD_MCRCC_PERFMON_DATA		DOS_REG_ADDR(HEVCD_MCRCC_PERFMON_DATA)
+#define HEVC_DBLK_CFG0				0x3500
+#define P_HEVC_DBLK_CFG0			DOS_REG_ADDR(HEVC_DBLK_CFG0)
+#define HEVC_DBLK_CFG1				0x3501
+#define P_HEVC_DBLK_CFG1			DOS_REG_ADDR(HEVC_DBLK_CFG1)
+#define HEVC_DBLK_CFG2				0x3502
+#define P_HEVC_DBLK_CFG2			DOS_REG_ADDR(HEVC_DBLK_CFG2)
+#define HEVC_DBLK_CFG3				0x3503
+#define P_HEVC_DBLK_CFG3			DOS_REG_ADDR(HEVC_DBLK_CFG3)
+#define HEVC_DBLK_CFG4				0x3504
+#define P_HEVC_DBLK_CFG4			DOS_REG_ADDR(HEVC_DBLK_CFG4)
+#define HEVC_DBLK_CFG5				0x3505
+#define P_HEVC_DBLK_CFG5			DOS_REG_ADDR(HEVC_DBLK_CFG5)
+#define HEVC_DBLK_CFG6				0x3506
+#define P_HEVC_DBLK_CFG6			DOS_REG_ADDR(HEVC_DBLK_CFG6)
+#define HEVC_DBLK_CFG7				0x3507
+#define P_HEVC_DBLK_CFG7			DOS_REG_ADDR(HEVC_DBLK_CFG7)
+#define HEVC_DBLK_CFG8				0x3508
+#define P_HEVC_DBLK_CFG8			DOS_REG_ADDR(HEVC_DBLK_CFG8)
+#define HEVC_DBLK_CFG9				0x3509
+#define P_HEVC_DBLK_CFG9			DOS_REG_ADDR(HEVC_DBLK_CFG9)
+#define HEVC_DBLK_CFGA				0x350a
+#define P_HEVC_DBLK_CFGA			DOS_REG_ADDR(HEVC_DBLK_CFGA)
+#define HEVC_DBLK_STS0				0x350b
+#define P_HEVC_DBLK_STS0			DOS_REG_ADDR(HEVC_DBLK_STS0)
+#define HEVC_DBLK_STS1				0x350c
+#define P_HEVC_DBLK_STS1			DOS_REG_ADDR(HEVC_DBLK_STS1)
+#define HEVC_SAO_VERSION			0x3600
+#define P_HEVC_SAO_VERSION			DOS_REG_ADDR(HEVC_SAO_VERSION)
+#define HEVC_SAO_CTRL0				0x3601
+#define P_HEVC_SAO_CTRL0			DOS_REG_ADDR(HEVC_SAO_CTRL0)
+#define HEVC_SAO_CTRL1				0x3602
+#define P_HEVC_SAO_CTRL1			DOS_REG_ADDR(HEVC_SAO_CTRL1)
+#define HEVC_SAO_INT_EN				0x3603
+#define P_HEVC_SAO_INT_EN			DOS_REG_ADDR(HEVC_SAO_INT_EN)
+#define HEVC_SAO_INT_STATUS			0x3604
+#define P_HEVC_SAO_INT_STATUS			DOS_REG_ADDR(HEVC_SAO_INT_STATUS)
+#define HEVC_SAO_PIC_SIZE			0x3605
+#define P_HEVC_SAO_PIC_SIZE			DOS_REG_ADDR(HEVC_SAO_PIC_SIZE)
+#define HEVC_SAO_PIC_SIZE_LCU			0x3606
+#define P_HEVC_SAO_PIC_SIZE_LCU			DOS_REG_ADDR(HEVC_SAO_PIC_SIZE_LCU)
+#define HEVC_SAO_TILE_START			0x3607
+#define P_HEVC_SAO_TILE_START			DOS_REG_ADDR(HEVC_SAO_TILE_START)
+#define HEVC_SAO_TILE_SIZE_LCU			0x3608
+#define P_HEVC_SAO_TILE_SIZE_LCU		DOS_REG_ADDR(HEVC_SAO_TILE_SIZE_LCU)
+#define HEVC_SAO_AXI_WCTRL			0x3609
+#define P_HEVC_SAO_AXI_WCTRL			DOS_REG_ADDR(HEVC_SAO_AXI_WCTRL)
+#define HEVC_SAO_AXI_RCTRL			0x360a
+#define P_HEVC_SAO_AXI_RCTRL			DOS_REG_ADDR(HEVC_SAO_AXI_RCTRL)
+#define HEVC_SAO_Y_START_ADDR			0x360b
+#define P_HEVC_SAO_Y_START_ADDR			DOS_REG_ADDR(HEVC_SAO_Y_START_ADDR)
+#define HEVC_SAO_Y_LENGTH			0x360c
+#define P_HEVC_SAO_Y_LENGTH			DOS_REG_ADDR(HEVC_SAO_Y_LENGTH)
+#define HEVC_SAO_C_START_ADDR			0x360d
+#define P_HEVC_SAO_C_START_ADDR			DOS_REG_ADDR(HEVC_SAO_C_START_ADDR)
+#define HEVC_SAO_C_LENGTH			0x360e
+#define P_HEVC_SAO_C_LENGTH			DOS_REG_ADDR(HEVC_SAO_C_LENGTH)
+#define HEVC_SAO_Y_WPTR				0x360f
+#define P_HEVC_SAO_Y_WPTR			DOS_REG_ADDR(HEVC_SAO_Y_WPTR)
+#define HEVC_SAO_C_WPTR				0x3610
+#define P_HEVC_SAO_C_WPTR			DOS_REG_ADDR(HEVC_SAO_C_WPTR)
+#define HEVC_SAO_ABV_START_ADDR			0x3611
+#define P_HEVC_SAO_ABV_START_ADDR		DOS_REG_ADDR(HEVC_SAO_ABV_START_ADDR)
+#define HEVC_SAO_VB_WR_START_ADDR		0x3612
+#define P_HEVC_SAO_VB_WR_START_ADDR		DOS_REG_ADDR(HEVC_SAO_VB_WR_START_ADDR)
+#define HEVC_SAO_VB_RD_START_ADDR		0x3613
+#define P_HEVC_SAO_VB_RD_START_ADDR		DOS_REG_ADDR(HEVC_SAO_VB_RD_START_ADDR)
+#define HEVC_SAO_ABV_WPTR			0x3614
+#define P_HEVC_SAO_ABV_WPTR			DOS_REG_ADDR(HEVC_SAO_ABV_WPTR)
+#define HEVC_SAO_ABV_RPTR			0x3615
+#define P_HEVC_SAO_ABV_RPTR			DOS_REG_ADDR(HEVC_SAO_ABV_RPTR)
+#define HEVC_SAO_VB_WPTR			0x3616
+#define P_HEVC_SAO_VB_WPTR			DOS_REG_ADDR(HEVC_SAO_VB_WPTR)
+#define HEVC_SAO_VB_RPTR			0x3617
+#define P_HEVC_SAO_VB_RPTR			DOS_REG_ADDR(HEVC_SAO_VB_RPTR)
+#define HEVC_SAO_DBG_MODE0			0x361e
+#define P_HEVC_SAO_DBG_MODE0			DOS_REG_ADDR(HEVC_SAO_DBG_MODE0)
+#define HEVC_SAO_DBG_MODE1			0x361f
+#define P_HEVC_SAO_DBG_MODE1			DOS_REG_ADDR(HEVC_SAO_DBG_MODE1)
+#define HEVC_SAO_CTRL2				0x3620
+#define P_HEVC_SAO_CTRL2			DOS_REG_ADDR(HEVC_SAO_CTRL2)
+#define HEVC_SAO_CTRL3				0x3621
+#define P_HEVC_SAO_CTRL3			DOS_REG_ADDR(HEVC_SAO_CTRL3)
+#define HEVC_SAO_CTRL4				0x3622
+#define P_HEVC_SAO_CTRL4			DOS_REG_ADDR(HEVC_SAO_CTRL4)
+#define HEVC_SAO_CTRL5				0x3623
+#define P_HEVC_SAO_CTRL5			DOS_REG_ADDR(HEVC_SAO_CTRL5)
+#define HEVC_SAO_CTRL6				0x3624
+#define P_HEVC_SAO_CTRL6			DOS_REG_ADDR(HEVC_SAO_CTRL6)
+#define HEVC_SAO_CTRL7				0x3625
+#define P_HEVC_SAO_CTRL7			DOS_REG_ADDR(HEVC_SAO_CTRL7)
+#define HEVC_SAO_DBG_DATA_0			0x3630
+#define P_HEVC_SAO_DBG_DATA_0			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_0)
+#define HEVC_SAO_DBG_DATA_1			0x3631
+#define P_HEVC_SAO_DBG_DATA_1			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_1)
+#define HEVC_SAO_DBG_DATA_2			0x3632
+#define P_HEVC_SAO_DBG_DATA_2			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_2)
+#define HEVC_SAO_DBG_DATA_3			0x3633
+#define P_HEVC_SAO_DBG_DATA_3			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_3)
+#define HEVC_SAO_DBG_DATA_4			0x3634
+#define P_HEVC_SAO_DBG_DATA_4			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_4)
+#define HEVC_SAO_DBG_DATA_5			0x3635
+#define P_HEVC_SAO_DBG_DATA_5			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_5)
+#define HEVC_SAO_DBG_DATA_6			0x3636
+#define P_HEVC_SAO_DBG_DATA_6			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_6)
+#define HEVC_SAO_DBG_DATA_7			0x3637
+#define P_HEVC_SAO_DBG_DATA_7			DOS_REG_ADDR(HEVC_SAO_DBG_DATA_7)
+#define HEVC_IQIT_CLK_RST_CTRL			0x3700
+#define P_HEVC_IQIT_CLK_RST_CTRL		DOS_REG_ADDR(HEVC_IQIT_CLK_RST_CTRL)
+#define HEVC_IQIT_DEQUANT_CTRL			0x3701
+#define P_HEVC_IQIT_DEQUANT_CTRL		DOS_REG_ADDR(HEVC_IQIT_DEQUANT_CTRL)
+#define HEVC_IQIT_SCALELUT_WR_ADDR		0x3702
+#define P_HEVC_IQIT_SCALELUT_WR_ADDR		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_WR_ADDR)
+#define HEVC_IQIT_SCALELUT_RD_ADDR		0x3703
+#define P_HEVC_IQIT_SCALELUT_RD_ADDR		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_RD_ADDR)
+#define HEVC_IQIT_SCALELUT_DATA			0x3704
+#define P_HEVC_IQIT_SCALELUT_DATA		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_DATA)
+#define HEVC_IQIT_SCALELUT_IDX_4		0x3705
+#define P_HEVC_IQIT_SCALELUT_IDX_4		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_IDX_4)
+#define HEVC_IQIT_SCALELUT_IDX_8		0x3706
+#define P_HEVC_IQIT_SCALELUT_IDX_8		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_IDX_8)
+#define HEVC_IQIT_SCALELUT_IDX_16_32		0x3707
+#define P_HEVC_IQIT_SCALELUT_IDX_16_32		DOS_REG_ADDR(HEVC_IQIT_SCALELUT_IDX_16_32)
+#define HEVC_IQIT_STAT_GEN0			0x3708
+#define P_HEVC_IQIT_STAT_GEN0			DOS_REG_ADDR(HEVC_IQIT_STAT_GEN0)
+#define HEVC_QP_WRITE				0x3709
+#define P_HEVC_QP_WRITE				DOS_REG_ADDR(HEVC_QP_WRITE)
+#define HEVC_IQIT_STAT_GEN1			0x370a
+#define P_HEVC_IQIT_STAT_GEN1			DOS_REG_ADDR(HEVC_IQIT_STAT_GEN1)
+#define DOS_SW_RESET0				0x3f00
+#define P_DOS_SW_RESET0				DOS_REG_ADDR(DOS_SW_RESET0)
+#define DOS_GCLK_EN0				0x3f01
+#define P_DOS_GCLK_EN0				DOS_REG_ADDR(DOS_GCLK_EN0)
+#define DOS_GEN_CTRL0				0x3f02
+#define P_DOS_GEN_CTRL0				DOS_REG_ADDR(DOS_GEN_CTRL0)
+#define DOS_APB_ERR_CTRL			0x3f03
+#define P_DOS_APB_ERR_CTRL			DOS_REG_ADDR(DOS_APB_ERR_CTRL)
+#define DOS_APB_ERR_STAT			0x3f04
+#define P_DOS_APB_ERR_STAT			DOS_REG_ADDR(DOS_APB_ERR_STAT)
+#define DOS_VDEC_INT_EN				0x3f05
+#define P_DOS_VDEC_INT_EN			DOS_REG_ADDR(DOS_VDEC_INT_EN)
+#define DOS_HCODEC_INT_EN			0x3f06
+#define P_DOS_HCODEC_INT_EN			DOS_REG_ADDR(DOS_HCODEC_INT_EN)
+#define DOS_SW_RESET1				0x3f07
+#define P_DOS_SW_RESET1				DOS_REG_ADDR(DOS_SW_RESET1)
+#define DOS_SW_RESET2				0x3f08
+#define P_DOS_SW_RESET2				DOS_REG_ADDR(DOS_SW_RESET2)
+#define DOS_GCLK_EN1				0x3f09
+#define P_DOS_GCLK_EN1				DOS_REG_ADDR(DOS_GCLK_EN1)
+#define DOS_VDEC2_INT_EN			0x3f0a
+#define P_DOS_VDEC2_INT_EN			DOS_REG_ADDR(DOS_VDEC2_INT_EN)
+#define DOS_VDIN_LCNT				0x3f0b
+#define P_DOS_VDIN_LCNT				DOS_REG_ADDR(DOS_VDIN_LCNT)
+#define DOS_VDIN_FCNT				0x3f0c
+#define P_DOS_VDIN_FCNT				DOS_REG_ADDR(DOS_VDIN_FCNT)
+#define DOS_VDIN_CCTL				0x3f0d
+#define P_DOS_VDIN_CCTL				DOS_REG_ADDR(DOS_VDIN_CCTL)
+#define DOS_SCRATCH0				0x3f10
+#define P_DOS_SCRATCH0				DOS_REG_ADDR(DOS_SCRATCH0)
+#define DOS_SCRATCH1				0x3f11
+#define P_DOS_SCRATCH1				DOS_REG_ADDR(DOS_SCRATCH1)
+#define DOS_SCRATCH2				0x3f12
+#define P_DOS_SCRATCH2				DOS_REG_ADDR(DOS_SCRATCH2)
+#define DOS_SCRATCH3				0x3f13
+#define P_DOS_SCRATCH3				DOS_REG_ADDR(DOS_SCRATCH3)
+#define DOS_SCRATCH4				0x3f14
+#define P_DOS_SCRATCH4				DOS_REG_ADDR(DOS_SCRATCH4)
+#define DOS_SCRATCH5				0x3f15
+#define P_DOS_SCRATCH5				DOS_REG_ADDR(DOS_SCRATCH5)
+#define DOS_SCRATCH6				0x3f16
+#define P_DOS_SCRATCH6				DOS_REG_ADDR(DOS_SCRATCH6)
+#define DOS_SCRATCH7				0x3f17
+#define P_DOS_SCRATCH7				DOS_REG_ADDR(DOS_SCRATCH7)
+#define DOS_SCRATCH8				0x3f18
+#define P_DOS_SCRATCH8				DOS_REG_ADDR(DOS_SCRATCH8)
+#define DOS_SCRATCH9				0x3f19
+#define P_DOS_SCRATCH9				DOS_REG_ADDR(DOS_SCRATCH9)
+#define DOS_SCRATCH10				0x3f1a
+#define P_DOS_SCRATCH10				DOS_REG_ADDR(DOS_SCRATCH10)
+#define DOS_SCRATCH11				0x3f1b
+#define P_DOS_SCRATCH11				DOS_REG_ADDR(DOS_SCRATCH11)
+#define DOS_SCRATCH12				0x3f1c
+#define P_DOS_SCRATCH12				DOS_REG_ADDR(DOS_SCRATCH12)
+#define DOS_SCRATCH13				0x3f1d
+#define P_DOS_SCRATCH13				DOS_REG_ADDR(DOS_SCRATCH13)
+#define DOS_SCRATCH14				0x3f1e
+#define P_DOS_SCRATCH14				DOS_REG_ADDR(DOS_SCRATCH14)
+#define DOS_SCRATCH15				0x3f1f
+#define P_DOS_SCRATCH15				DOS_REG_ADDR(DOS_SCRATCH15)
+#define DOS_SCRATCH16				0x3f20
+#define P_DOS_SCRATCH16				DOS_REG_ADDR(DOS_SCRATCH16)
+#define DOS_SCRATCH17				0x3f21
+#define P_DOS_SCRATCH17				DOS_REG_ADDR(DOS_SCRATCH17)
+#define DOS_SCRATCH18				0x3f22
+#define P_DOS_SCRATCH18				DOS_REG_ADDR(DOS_SCRATCH18)
+#define DOS_SCRATCH19				0x3f23
+#define P_DOS_SCRATCH19				DOS_REG_ADDR(DOS_SCRATCH19)
+#define DOS_SCRATCH20				0x3f24
+#define P_DOS_SCRATCH20				DOS_REG_ADDR(DOS_SCRATCH20)
+#define DOS_SCRATCH21				0x3f25
+#define P_DOS_SCRATCH21				DOS_REG_ADDR(DOS_SCRATCH21)
+#define DOS_SCRATCH22				0x3f26
+#define P_DOS_SCRATCH22				DOS_REG_ADDR(DOS_SCRATCH22)
+#define DOS_SCRATCH23				0x3f27
+#define P_DOS_SCRATCH23				DOS_REG_ADDR(DOS_SCRATCH23)
+#define DOS_SCRATCH24				0x3f28
+#define P_DOS_SCRATCH24				DOS_REG_ADDR(DOS_SCRATCH24)
+#define DOS_SCRATCH25				0x3f29
+#define P_DOS_SCRATCH25				DOS_REG_ADDR(DOS_SCRATCH25)
+#define DOS_SCRATCH26				0x3f2a
+#define P_DOS_SCRATCH26				DOS_REG_ADDR(DOS_SCRATCH26)
+#define DOS_SCRATCH27				0x3f2b
+#define P_DOS_SCRATCH27				DOS_REG_ADDR(DOS_SCRATCH27)
+#define DOS_SCRATCH28				0x3f2c
+#define P_DOS_SCRATCH28				DOS_REG_ADDR(DOS_SCRATCH28)
+#define DOS_SCRATCH29				0x3f2d
+#define P_DOS_SCRATCH29				DOS_REG_ADDR(DOS_SCRATCH29)
+#define DOS_SCRATCH30				0x3f2e
+#define P_DOS_SCRATCH30				DOS_REG_ADDR(DOS_SCRATCH30)
+#define DOS_SCRATCH31				0x3f2f
+#define P_DOS_SCRATCH31				DOS_REG_ADDR(DOS_SCRATCH31)
+#define DOS_MEM_PD_VDEC				0x3f30
+#define P_DOS_MEM_PD_VDEC			DOS_REG_ADDR(DOS_MEM_PD_VDEC)
+#define DOS_MEM_PD_VDEC2			0x3f31
+#define P_DOS_MEM_PD_VDEC2			DOS_REG_ADDR(DOS_MEM_PD_VDEC2)
+#define DOS_MEM_PD_HCODEC			0x3f32
+#define P_DOS_MEM_PD_HCODEC			DOS_REG_ADDR(DOS_MEM_PD_HCODEC)
+#define DOS_MEM_PD_HEVC				0x3f33
+#define P_DOS_MEM_PD_HEVC			DOS_REG_ADDR(DOS_MEM_PD_HEVC)
+#define DOS_SW_RESET3				0x3f34
+#define P_DOS_SW_RESET3				DOS_REG_ADDR(DOS_SW_RESET3)
+#define DOS_GCLK_EN3				0x3f35
+#define P_DOS_GCLK_EN3				DOS_REG_ADDR(DOS_GCLK_EN3)
+#define DOS_HEVC_INT_EN				0x3f36
+#define P_DOS_HEVC_INT_EN			DOS_REG_ADDR(DOS_HEVC_INT_EN)
+#define DOS_VDEC_MCRCC_STALL_CTRL		0x3f40
+#define P_DOS_VDEC_MCRCC_STALL_CTRL		DOS_REG_ADDR(DOS_VDEC_MCRCC_STALL_CTRL)
+#define DOS_VDEC_MCRCC_STALL2_CTRL		0x3f42
+#define P_DOS_VDEC_MCRCC_STALL2_CTRL		DOS_REG_ADDR(DOS_VDEC_MCRCC_STALL2_CTRL)
+#define DOS_VDEC2_MCRCC_STALL_CTRL		0x3f41
+#define P_DOS_VDEC2_MCRCC_STALL_CTRL		DOS_REG_ADDR(DOS_VDEC2_MCRCC_STALL_CTRL)
+#define DOS_VDEC2_MCRCC_STALL2_CTRL		0x3f43
+#define P_DOS_VDEC2_MCRCC_STALL2_CTRL		DOS_REG_ADDR(DOS_VDEC2_MCRCC_STALL2_CTRL)
+#define HCODEC_MC_CTRL_REG			0x1900
+#define P_HCODEC_MC_CTRL_REG			DOS_REG_ADDR(HCODEC_MC_CTRL_REG)
+#define HCODEC_MC_MB_INFO			0x1901
+#define P_HCODEC_MC_MB_INFO			DOS_REG_ADDR(HCODEC_MC_MB_INFO)
+#define HCODEC_MC_PIC_INFO			0x1902
+#define P_HCODEC_MC_PIC_INFO			DOS_REG_ADDR(HCODEC_MC_PIC_INFO)
+#define HCODEC_MC_HALF_PEL_ONE			0x1903
+#define P_HCODEC_MC_HALF_PEL_ONE		DOS_REG_ADDR(HCODEC_MC_HALF_PEL_ONE)
+#define HCODEC_MC_HALF_PEL_TWO			0x1904
+#define P_HCODEC_MC_HALF_PEL_TWO		DOS_REG_ADDR(HCODEC_MC_HALF_PEL_TWO)
+#define HCODEC_POWER_CTL_MC			0x1905
+#define P_HCODEC_POWER_CTL_MC			DOS_REG_ADDR(HCODEC_POWER_CTL_MC)
+#define HCODEC_MC_CMD				0x1906
+#define P_HCODEC_MC_CMD				DOS_REG_ADDR(HCODEC_MC_CMD)
+#define HCODEC_MC_CTRL0				0x1907
+#define P_HCODEC_MC_CTRL0			DOS_REG_ADDR(HCODEC_MC_CTRL0)
+#define HCODEC_MC_PIC_W_H			0x1908
+#define P_HCODEC_MC_PIC_W_H			DOS_REG_ADDR(HCODEC_MC_PIC_W_H)
+#define HCODEC_MC_STATUS0			0x1909
+#define P_HCODEC_MC_STATUS0			DOS_REG_ADDR(HCODEC_MC_STATUS0)
+#define HCODEC_MC_STATUS1			0x190a
+#define P_HCODEC_MC_STATUS1			DOS_REG_ADDR(HCODEC_MC_STATUS1)
+#define HCODEC_MC_CTRL1				0x190b
+#define P_HCODEC_MC_CTRL1			DOS_REG_ADDR(HCODEC_MC_CTRL1)
+#define HCODEC_MC_MIX_RATIO0			0x190c
+#define P_HCODEC_MC_MIX_RATIO0			DOS_REG_ADDR(HCODEC_MC_MIX_RATIO0)
+#define HCODEC_MC_MIX_RATIO1			0x190d
+#define P_HCODEC_MC_MIX_RATIO1			DOS_REG_ADDR(HCODEC_MC_MIX_RATIO1)
+#define HCODEC_MC_DP_MB_XY			0x190e
+#define P_HCODEC_MC_DP_MB_XY			DOS_REG_ADDR(HCODEC_MC_DP_MB_XY)
+#define HCODEC_MC_OM_MB_XY			0x190f
+#define P_HCODEC_MC_OM_MB_XY			DOS_REG_ADDR(HCODEC_MC_OM_MB_XY)
+#define HCODEC_PSCALE_RST			0x1910
+#define P_HCODEC_PSCALE_RST			DOS_REG_ADDR(HCODEC_PSCALE_RST)
+#define HCODEC_PSCALE_CTRL			0x1911
+#define P_HCODEC_PSCALE_CTRL			DOS_REG_ADDR(HCODEC_PSCALE_CTRL)
+#define HCODEC_PSCALE_PICI_W			0x1912
+#define P_HCODEC_PSCALE_PICI_W			DOS_REG_ADDR(HCODEC_PSCALE_PICI_W)
+#define HCODEC_PSCALE_PICI_H			0x1913
+#define P_HCODEC_PSCALE_PICI_H			DOS_REG_ADDR(HCODEC_PSCALE_PICI_H)
+#define HCODEC_PSCALE_PICO_W			0x1914
+#define P_HCODEC_PSCALE_PICO_W			DOS_REG_ADDR(HCODEC_PSCALE_PICO_W)
+#define HCODEC_PSCALE_PICO_H			0x1915
+#define P_HCODEC_PSCALE_PICO_H			DOS_REG_ADDR(HCODEC_PSCALE_PICO_H)
+#define HCODEC_PSCALE_PICO_START_X		0x1916
+#define P_HCODEC_PSCALE_PICO_START_X		DOS_REG_ADDR(HCODEC_PSCALE_PICO_START_X)
+#define HCODEC_PSCALE_PICO_START_Y		0x1917
+#define P_HCODEC_PSCALE_PICO_START_Y		DOS_REG_ADDR(HCODEC_PSCALE_PICO_START_Y)
+#define HCODEC_PSCALE_DUMMY			0x1918
+#define P_HCODEC_PSCALE_DUMMY			DOS_REG_ADDR(HCODEC_PSCALE_DUMMY)
+#define HCODEC_PSCALE_FILT0_COEF0		0x1919
+#define P_HCODEC_PSCALE_FILT0_COEF0		DOS_REG_ADDR(HCODEC_PSCALE_FILT0_COEF0)
+#define HCODEC_PSCALE_FILT0_COEF1		0x191a
+#define P_HCODEC_PSCALE_FILT0_COEF1		DOS_REG_ADDR(HCODEC_PSCALE_FILT0_COEF1)
+#define HCODEC_PSCALE_CMD_CTRL			0x191b
+#define P_HCODEC_PSCALE_CMD_CTRL		DOS_REG_ADDR(HCODEC_PSCALE_CMD_CTRL)
+#define HCODEC_PSCALE_CMD_BLK_X			0x191c
+#define P_HCODEC_PSCALE_CMD_BLK_X		DOS_REG_ADDR(HCODEC_PSCALE_CMD_BLK_X)
+#define HCODEC_PSCALE_CMD_BLK_Y			0x191d
+#define P_HCODEC_PSCALE_CMD_BLK_Y		DOS_REG_ADDR(HCODEC_PSCALE_CMD_BLK_Y)
+#define HCODEC_PSCALE_STATUS			0x191e
+#define P_HCODEC_PSCALE_STATUS			DOS_REG_ADDR(HCODEC_PSCALE_STATUS)
+#define HCODEC_PSCALE_BMEM_ADDR			0x191f
+#define P_HCODEC_PSCALE_BMEM_ADDR		DOS_REG_ADDR(HCODEC_PSCALE_BMEM_ADDR)
+#define HCODEC_PSCALE_BMEM_DAT			0x1920
+#define P_HCODEC_PSCALE_BMEM_DAT		DOS_REG_ADDR(HCODEC_PSCALE_BMEM_DAT)
+#define HCODEC_PSCALE_DRAM_BUF_CTRL		0x1921
+#define P_HCODEC_PSCALE_DRAM_BUF_CTRL		DOS_REG_ADDR(HCODEC_PSCALE_DRAM_BUF_CTRL)
+#define HCODEC_PSCALE_MCMD_CTRL			0x1922
+#define P_HCODEC_PSCALE_MCMD_CTRL		DOS_REG_ADDR(HCODEC_PSCALE_MCMD_CTRL)
+#define HCODEC_PSCALE_MCMD_XSIZE		0x1923
+#define P_HCODEC_PSCALE_MCMD_XSIZE		DOS_REG_ADDR(HCODEC_PSCALE_MCMD_XSIZE)
+#define HCODEC_PSCALE_MCMD_YSIZE		0x1924
+#define P_HCODEC_PSCALE_MCMD_YSIZE		DOS_REG_ADDR(HCODEC_PSCALE_MCMD_YSIZE)
+#define HCODEC_PSCALE_RBUF_START_BLKX		0x1925
+#define P_HCODEC_PSCALE_RBUF_START_BLKX		DOS_REG_ADDR(HCODEC_PSCALE_RBUF_START_BLKX)
+#define HCODEC_PSCALE_RBUF_START_BLKY		0x1926
+#define P_HCODEC_PSCALE_RBUF_START_BLKY		DOS_REG_ADDR(HCODEC_PSCALE_RBUF_START_BLKY)
+#define HCODEC_PSCALE_PICO_SHIFT_XY		0x1928
+#define P_HCODEC_PSCALE_PICO_SHIFT_XY		DOS_REG_ADDR(HCODEC_PSCALE_PICO_SHIFT_XY)
+#define HCODEC_PSCALE_CTRL1			0x1929
+#define P_HCODEC_PSCALE_CTRL1			DOS_REG_ADDR(HCODEC_PSCALE_CTRL1)
+#define HCODEC_PSCALE_SRCKEY_CTRL0		0x192a
+#define P_HCODEC_PSCALE_SRCKEY_CTRL0		DOS_REG_ADDR(HCODEC_PSCALE_SRCKEY_CTRL0)
+#define HCODEC_PSCALE_SRCKEY_CTRL1		0x192b
+#define P_HCODEC_PSCALE_SRCKEY_CTRL1		DOS_REG_ADDR(HCODEC_PSCALE_SRCKEY_CTRL1)
+#define HCODEC_PSCALE_CANVAS_RD_ADDR		0x192c
+#define P_HCODEC_PSCALE_CANVAS_RD_ADDR		DOS_REG_ADDR(HCODEC_PSCALE_CANVAS_RD_ADDR)
+#define HCODEC_PSCALE_CANVAS_WR_ADDR		0x192d
+#define P_HCODEC_PSCALE_CANVAS_WR_ADDR		DOS_REG_ADDR(HCODEC_PSCALE_CANVAS_WR_ADDR)
+#define HCODEC_PSCALE_CTRL2			0x192e
+#define P_HCODEC_PSCALE_CTRL2			DOS_REG_ADDR(HCODEC_PSCALE_CTRL2)
+#define HCODEC_HDEC_MC_OMEM_AUTO		0x1930
+#define P_HCODEC_HDEC_MC_OMEM_AUTO		DOS_REG_ADDR(HCODEC_HDEC_MC_OMEM_AUTO)
+#define HCODEC_HDEC_MC_MBRIGHT_IDX		0x1931
+#define P_HCODEC_HDEC_MC_MBRIGHT_IDX		DOS_REG_ADDR(HCODEC_HDEC_MC_MBRIGHT_IDX)
+#define HCODEC_HDEC_MC_MBRIGHT_RD		0x1932
+#define P_HCODEC_HDEC_MC_MBRIGHT_RD		DOS_REG_ADDR(HCODEC_HDEC_MC_MBRIGHT_RD)
+#define HCODEC_MC_MPORT_CTRL			0x1940
+#define P_HCODEC_MC_MPORT_CTRL			DOS_REG_ADDR(HCODEC_MC_MPORT_CTRL)
+#define HCODEC_MC_MPORT_DAT			0x1941
+#define P_HCODEC_MC_MPORT_DAT			DOS_REG_ADDR(HCODEC_MC_MPORT_DAT)
+#define HCODEC_MC_WT_PRED_CTRL			0x1942
+#define P_HCODEC_MC_WT_PRED_CTRL		DOS_REG_ADDR(HCODEC_MC_WT_PRED_CTRL)
+#define HCODEC_MC_MBBOT_ST_EVEN_ADDR		0x1944
+#define P_HCODEC_MC_MBBOT_ST_EVEN_ADDR		DOS_REG_ADDR(HCODEC_MC_MBBOT_ST_EVEN_ADDR)
+#define HCODEC_MC_MBBOT_ST_ODD_ADDR		0x1945
+#define P_HCODEC_MC_MBBOT_ST_ODD_ADDR		DOS_REG_ADDR(HCODEC_MC_MBBOT_ST_ODD_ADDR)
+#define HCODEC_MC_DPDN_MB_XY			0x1946
+#define P_HCODEC_MC_DPDN_MB_XY			DOS_REG_ADDR(HCODEC_MC_DPDN_MB_XY)
+#define HCODEC_MC_OMDN_MB_XY			0x1947
+#define P_HCODEC_MC_OMDN_MB_XY			DOS_REG_ADDR(HCODEC_MC_OMDN_MB_XY)
+#define HCODEC_MC_HCMDBUF_H			0x1948
+#define P_HCODEC_MC_HCMDBUF_H			DOS_REG_ADDR(HCODEC_MC_HCMDBUF_H)
+#define HCODEC_MC_HCMDBUF_L			0x1949
+#define P_HCODEC_MC_HCMDBUF_L			DOS_REG_ADDR(HCODEC_MC_HCMDBUF_L)
+#define HCODEC_MC_HCMD_H			0x194a
+#define P_HCODEC_MC_HCMD_H			DOS_REG_ADDR(HCODEC_MC_HCMD_H)
+#define HCODEC_MC_HCMD_L			0x194b
+#define P_HCODEC_MC_HCMD_L			DOS_REG_ADDR(HCODEC_MC_HCMD_L)
+#define HCODEC_MC_IDCT_DAT			0x194c
+#define P_HCODEC_MC_IDCT_DAT			DOS_REG_ADDR(HCODEC_MC_IDCT_DAT)
+#define HCODEC_MC_CTRL_GCLK_CTRL		0x194d
+#define P_HCODEC_MC_CTRL_GCLK_CTRL		DOS_REG_ADDR(HCODEC_MC_CTRL_GCLK_CTRL)
+#define HCODEC_MC_OTHER_GCLK_CTRL		0x194e
+#define P_HCODEC_MC_OTHER_GCLK_CTRL		DOS_REG_ADDR(HCODEC_MC_OTHER_GCLK_CTRL)
+#define HCODEC_MC_CTRL2				0x194f
+#define P_HCODEC_MC_CTRL2			DOS_REG_ADDR(HCODEC_MC_CTRL2)
+#define HCODEC_MDEC_PIC_DC_CTRL			0x198e
+#define P_HCODEC_MDEC_PIC_DC_CTRL		DOS_REG_ADDR(HCODEC_MDEC_PIC_DC_CTRL)
+#define HCODEC_MDEC_PIC_DC_STATUS		0x198f
+#define P_HCODEC_MDEC_PIC_DC_STATUS		DOS_REG_ADDR(HCODEC_MDEC_PIC_DC_STATUS)
+#define HCODEC_ANC0_CANVAS_ADDR			0x1990
+#define P_HCODEC_ANC0_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC0_CANVAS_ADDR)
+#define HCODEC_ANC1_CANVAS_ADDR			0x1991
+#define P_HCODEC_ANC1_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC1_CANVAS_ADDR)
+#define HCODEC_ANC2_CANVAS_ADDR			0x1992
+#define P_HCODEC_ANC2_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC2_CANVAS_ADDR)
+#define HCODEC_ANC3_CANVAS_ADDR			0x1993
+#define P_HCODEC_ANC3_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC3_CANVAS_ADDR)
+#define HCODEC_ANC4_CANVAS_ADDR			0x1994
+#define P_HCODEC_ANC4_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC4_CANVAS_ADDR)
+#define HCODEC_ANC5_CANVAS_ADDR			0x1995
+#define P_HCODEC_ANC5_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC5_CANVAS_ADDR)
+#define HCODEC_ANC6_CANVAS_ADDR			0x1996
+#define P_HCODEC_ANC6_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC6_CANVAS_ADDR)
+#define HCODEC_ANC7_CANVAS_ADDR			0x1997
+#define P_HCODEC_ANC7_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC7_CANVAS_ADDR)
+#define HCODEC_ANC8_CANVAS_ADDR			0x1998
+#define P_HCODEC_ANC8_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC8_CANVAS_ADDR)
+#define HCODEC_ANC9_CANVAS_ADDR			0x1999
+#define P_HCODEC_ANC9_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC9_CANVAS_ADDR)
+#define HCODEC_ANC10_CANVAS_ADDR		0x199a
+#define P_HCODEC_ANC10_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC10_CANVAS_ADDR)
+#define HCODEC_ANC11_CANVAS_ADDR		0x199b
+#define P_HCODEC_ANC11_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC11_CANVAS_ADDR)
+#define HCODEC_ANC12_CANVAS_ADDR		0x199c
+#define P_HCODEC_ANC12_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC12_CANVAS_ADDR)
+#define HCODEC_ANC13_CANVAS_ADDR		0x199d
+#define P_HCODEC_ANC13_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC13_CANVAS_ADDR)
+#define HCODEC_ANC14_CANVAS_ADDR		0x199e
+#define P_HCODEC_ANC14_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC14_CANVAS_ADDR)
+#define HCODEC_ANC15_CANVAS_ADDR		0x199f
+#define P_HCODEC_ANC15_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC15_CANVAS_ADDR)
+#define HCODEC_ANC16_CANVAS_ADDR		0x19a0
+#define P_HCODEC_ANC16_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC16_CANVAS_ADDR)
+#define HCODEC_ANC17_CANVAS_ADDR		0x19a1
+#define P_HCODEC_ANC17_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC17_CANVAS_ADDR)
+#define HCODEC_ANC18_CANVAS_ADDR		0x19a2
+#define P_HCODEC_ANC18_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC18_CANVAS_ADDR)
+#define HCODEC_ANC19_CANVAS_ADDR		0x19a3
+#define P_HCODEC_ANC19_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC19_CANVAS_ADDR)
+#define HCODEC_ANC20_CANVAS_ADDR		0x19a4
+#define P_HCODEC_ANC20_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC20_CANVAS_ADDR)
+#define HCODEC_ANC21_CANVAS_ADDR		0x19a5
+#define P_HCODEC_ANC21_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC21_CANVAS_ADDR)
+#define HCODEC_ANC22_CANVAS_ADDR		0x19a6
+#define P_HCODEC_ANC22_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC22_CANVAS_ADDR)
+#define HCODEC_ANC23_CANVAS_ADDR		0x19a7
+#define P_HCODEC_ANC23_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC23_CANVAS_ADDR)
+#define HCODEC_ANC24_CANVAS_ADDR		0x19a8
+#define P_HCODEC_ANC24_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC24_CANVAS_ADDR)
+#define HCODEC_ANC25_CANVAS_ADDR		0x19a9
+#define P_HCODEC_ANC25_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC25_CANVAS_ADDR)
+#define HCODEC_ANC26_CANVAS_ADDR		0x19aa
+#define P_HCODEC_ANC26_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC26_CANVAS_ADDR)
+#define HCODEC_ANC27_CANVAS_ADDR		0x19ab
+#define P_HCODEC_ANC27_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC27_CANVAS_ADDR)
+#define HCODEC_ANC28_CANVAS_ADDR		0x19ac
+#define P_HCODEC_ANC28_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC28_CANVAS_ADDR)
+#define HCODEC_ANC29_CANVAS_ADDR		0x19ad
+#define P_HCODEC_ANC29_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC29_CANVAS_ADDR)
+#define HCODEC_ANC30_CANVAS_ADDR		0x19ae
+#define P_HCODEC_ANC30_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC30_CANVAS_ADDR)
+#define HCODEC_ANC31_CANVAS_ADDR		0x19af
+#define P_HCODEC_ANC31_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_ANC31_CANVAS_ADDR)
+#define HCODEC_DBKR_CANVAS_ADDR			0x19b0
+#define P_HCODEC_DBKR_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_DBKR_CANVAS_ADDR)
+#define HCODEC_DBKW_CANVAS_ADDR			0x19b1
+#define P_HCODEC_DBKW_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_DBKW_CANVAS_ADDR)
+#define HCODEC_REC_CANVAS_ADDR			0x19b2
+#define P_HCODEC_REC_CANVAS_ADDR		DOS_REG_ADDR(HCODEC_REC_CANVAS_ADDR)
+#define HCODEC_CURR_CANVAS_CTRL			0x19b3
+#define P_HCODEC_CURR_CANVAS_CTRL		DOS_REG_ADDR(HCODEC_CURR_CANVAS_CTRL)
+#define HCODEC_MDEC_PIC_DC_THRESH		0x19b8
+#define P_HCODEC_MDEC_PIC_DC_THRESH		DOS_REG_ADDR(HCODEC_MDEC_PIC_DC_THRESH)
+#define HCODEC_MDEC_PICR_BUF_STATUS		0x19b9
+#define P_HCODEC_MDEC_PICR_BUF_STATUS		DOS_REG_ADDR(HCODEC_MDEC_PICR_BUF_STATUS)
+#define HCODEC_MDEC_PICW_BUF_STATUS		0x19ba
+#define P_HCODEC_MDEC_PICW_BUF_STATUS		DOS_REG_ADDR(HCODEC_MDEC_PICW_BUF_STATUS)
+#define HCODEC_MCW_DBLK_WRRSP_CNT		0x19bb
+#define P_HCODEC_MCW_DBLK_WRRSP_CNT		DOS_REG_ADDR(HCODEC_MCW_DBLK_WRRSP_CNT)
+#define HCODEC_MC_MBBOT_WRRSP_CNT		0x19bc
+#define P_HCODEC_MC_MBBOT_WRRSP_CNT		DOS_REG_ADDR(HCODEC_MC_MBBOT_WRRSP_CNT)
+#define HCODEC_MDEC_PICW_BUF2_STATUS		0x19bd
+#define P_HCODEC_MDEC_PICW_BUF2_STATUS		DOS_REG_ADDR(HCODEC_MDEC_PICW_BUF2_STATUS)
+#define HCODEC_WRRSP_FIFO_PICW_DBK		0x19be
+#define P_HCODEC_WRRSP_FIFO_PICW_DBK		DOS_REG_ADDR(HCODEC_WRRSP_FIFO_PICW_DBK)
+#define HCODEC_WRRSP_FIFO_PICW_MC		0x19bf
+#define P_HCODEC_WRRSP_FIFO_PICW_MC		DOS_REG_ADDR(HCODEC_WRRSP_FIFO_PICW_MC)
+#define HCODEC_AV_SCRATCH_0			0x19c0
+#define P_HCODEC_AV_SCRATCH_0			DOS_REG_ADDR(HCODEC_AV_SCRATCH_0)
+#define HCODEC_AV_SCRATCH_1			0x19c1
+#define P_HCODEC_AV_SCRATCH_1			DOS_REG_ADDR(HCODEC_AV_SCRATCH_1)
+#define HCODEC_AV_SCRATCH_2			0x19c2
+#define P_HCODEC_AV_SCRATCH_2			DOS_REG_ADDR(HCODEC_AV_SCRATCH_2)
+#define HCODEC_AV_SCRATCH_3			0x19c3
+#define P_HCODEC_AV_SCRATCH_3			DOS_REG_ADDR(HCODEC_AV_SCRATCH_3)
+#define HCODEC_AV_SCRATCH_4			0x19c4
+#define P_HCODEC_AV_SCRATCH_4			DOS_REG_ADDR(HCODEC_AV_SCRATCH_4)
+#define HCODEC_AV_SCRATCH_5			0x19c5
+#define P_HCODEC_AV_SCRATCH_5			DOS_REG_ADDR(HCODEC_AV_SCRATCH_5)
+#define HCODEC_AV_SCRATCH_6			0x19c6
+#define P_HCODEC_AV_SCRATCH_6			DOS_REG_ADDR(HCODEC_AV_SCRATCH_6)
+#define HCODEC_AV_SCRATCH_7			0x19c7
+#define P_HCODEC_AV_SCRATCH_7			DOS_REG_ADDR(HCODEC_AV_SCRATCH_7)
+#define HCODEC_AV_SCRATCH_8			0x19c8
+#define P_HCODEC_AV_SCRATCH_8			DOS_REG_ADDR(HCODEC_AV_SCRATCH_8)
+#define HCODEC_AV_SCRATCH_9			0x19c9
+#define P_HCODEC_AV_SCRATCH_9			DOS_REG_ADDR(HCODEC_AV_SCRATCH_9)
+#define HCODEC_AV_SCRATCH_A			0x19ca
+#define P_HCODEC_AV_SCRATCH_A			DOS_REG_ADDR(HCODEC_AV_SCRATCH_A)
+#define HCODEC_AV_SCRATCH_B			0x19cb
+#define P_HCODEC_AV_SCRATCH_B			DOS_REG_ADDR(HCODEC_AV_SCRATCH_B)
+#define HCODEC_AV_SCRATCH_C			0x19cc
+#define P_HCODEC_AV_SCRATCH_C			DOS_REG_ADDR(HCODEC_AV_SCRATCH_C)
+#define HCODEC_AV_SCRATCH_D			0x19cd
+#define P_HCODEC_AV_SCRATCH_D			DOS_REG_ADDR(HCODEC_AV_SCRATCH_D)
+#define HCODEC_AV_SCRATCH_E			0x19ce
+#define P_HCODEC_AV_SCRATCH_E			DOS_REG_ADDR(HCODEC_AV_SCRATCH_E)
+#define HCODEC_AV_SCRATCH_F			0x19cf
+#define P_HCODEC_AV_SCRATCH_F			DOS_REG_ADDR(HCODEC_AV_SCRATCH_F)
+#define HCODEC_AV_SCRATCH_G			0x19d0
+#define P_HCODEC_AV_SCRATCH_G			DOS_REG_ADDR(HCODEC_AV_SCRATCH_G)
+#define HCODEC_AV_SCRATCH_H			0x19d1
+#define P_HCODEC_AV_SCRATCH_H			DOS_REG_ADDR(HCODEC_AV_SCRATCH_H)
+#define HCODEC_AV_SCRATCH_I			0x19d2
+#define P_HCODEC_AV_SCRATCH_I			DOS_REG_ADDR(HCODEC_AV_SCRATCH_I)
+#define HCODEC_AV_SCRATCH_J			0x19d3
+#define P_HCODEC_AV_SCRATCH_J			DOS_REG_ADDR(HCODEC_AV_SCRATCH_J)
+#define HCODEC_AV_SCRATCH_K			0x19d4
+#define P_HCODEC_AV_SCRATCH_K			DOS_REG_ADDR(HCODEC_AV_SCRATCH_K)
+#define HCODEC_AV_SCRATCH_L			0x19d5
+#define P_HCODEC_AV_SCRATCH_L			DOS_REG_ADDR(HCODEC_AV_SCRATCH_L)
+#define HCODEC_AV_SCRATCH_M			0x19d6
+#define P_HCODEC_AV_SCRATCH_M			DOS_REG_ADDR(HCODEC_AV_SCRATCH_M)
+#define HCODEC_AV_SCRATCH_N			0x19d7
+#define P_HCODEC_AV_SCRATCH_N			DOS_REG_ADDR(HCODEC_AV_SCRATCH_N)
+#define HCODEC_WRRSP_CO_MB			0x19d8
+#define P_HCODEC_WRRSP_CO_MB			DOS_REG_ADDR(HCODEC_WRRSP_CO_MB)
+#define HCODEC_WRRSP_DCAC			0x19d9
+#define P_HCODEC_WRRSP_DCAC			DOS_REG_ADDR(HCODEC_WRRSP_DCAC)
+#define HCODEC_WRRSP_VLD			0x19da
+#define P_HCODEC_WRRSP_VLD			DOS_REG_ADDR(HCODEC_WRRSP_VLD)
+#define HCODEC_MDEC_DOUBLEW_CFG0		0x19db
+#define P_HCODEC_MDEC_DOUBLEW_CFG0		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG0)
+#define HCODEC_MDEC_DOUBLEW_CFG1		0x19dc
+#define P_HCODEC_MDEC_DOUBLEW_CFG1		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG1)
+#define HCODEC_MDEC_DOUBLEW_CFG2		0x19dd
+#define P_HCODEC_MDEC_DOUBLEW_CFG2		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG2)
+#define HCODEC_MDEC_DOUBLEW_CFG3		0x19de
+#define P_HCODEC_MDEC_DOUBLEW_CFG3		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG3)
+#define HCODEC_MDEC_DOUBLEW_CFG4		0x19df
+#define P_HCODEC_MDEC_DOUBLEW_CFG4		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG4)
+#define HCODEC_MDEC_DOUBLEW_CFG5		0x19e0
+#define P_HCODEC_MDEC_DOUBLEW_CFG5		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG5)
+#define HCODEC_MDEC_DOUBLEW_CFG6		0x19e1
+#define P_HCODEC_MDEC_DOUBLEW_CFG6		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG6)
+#define HCODEC_MDEC_DOUBLEW_CFG7		0x19e2
+#define P_HCODEC_MDEC_DOUBLEW_CFG7		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_CFG7)
+#define HCODEC_MDEC_DOUBLEW_STATUS		0x19e3
+#define P_HCODEC_MDEC_DOUBLEW_STATUS		DOS_REG_ADDR(HCODEC_MDEC_DOUBLEW_STATUS)
+#define HCODEC_DBLK_RST				0x1950
+#define P_HCODEC_DBLK_RST			DOS_REG_ADDR(HCODEC_DBLK_RST)
+#define HCODEC_DBLK_CTRL			0x1951
+#define P_HCODEC_DBLK_CTRL			DOS_REG_ADDR(HCODEC_DBLK_CTRL)
+#define HCODEC_DBLK_MB_WID_HEIGHT		0x1952
+#define P_HCODEC_DBLK_MB_WID_HEIGHT		DOS_REG_ADDR(HCODEC_DBLK_MB_WID_HEIGHT)
+#define HCODEC_DBLK_STATUS			0x1953
+#define P_HCODEC_DBLK_STATUS			DOS_REG_ADDR(HCODEC_DBLK_STATUS)
+#define HCODEC_DBLK_CMD_CTRL			0x1954
+#define P_HCODEC_DBLK_CMD_CTRL			DOS_REG_ADDR(HCODEC_DBLK_CMD_CTRL)
+#define HCODEC_DBLK_MB_XY			0x1955
+#define P_HCODEC_DBLK_MB_XY			DOS_REG_ADDR(HCODEC_DBLK_MB_XY)
+#define HCODEC_DBLK_QP				0x1956
+#define P_HCODEC_DBLK_QP			DOS_REG_ADDR(HCODEC_DBLK_QP)
+#define HCODEC_DBLK_Y_BHFILT			0x1957
+#define P_HCODEC_DBLK_Y_BHFILT			DOS_REG_ADDR(HCODEC_DBLK_Y_BHFILT)
+#define HCODEC_DBLK_Y_BHFILT_HIGH		0x1958
+#define P_HCODEC_DBLK_Y_BHFILT_HIGH		DOS_REG_ADDR(HCODEC_DBLK_Y_BHFILT_HIGH)
+#define HCODEC_DBLK_Y_BVFILT			0x1959
+#define P_HCODEC_DBLK_Y_BVFILT			DOS_REG_ADDR(HCODEC_DBLK_Y_BVFILT)
+#define HCODEC_DBLK_CB_BFILT			0x195a
+#define P_HCODEC_DBLK_CB_BFILT			DOS_REG_ADDR(HCODEC_DBLK_CB_BFILT)
+#define HCODEC_DBLK_CR_BFILT			0x195b
+#define P_HCODEC_DBLK_CR_BFILT			DOS_REG_ADDR(HCODEC_DBLK_CR_BFILT)
+#define HCODEC_DBLK_Y_HFILT			0x195c
+#define P_HCODEC_DBLK_Y_HFILT			DOS_REG_ADDR(HCODEC_DBLK_Y_HFILT)
+#define HCODEC_DBLK_Y_HFILT_HIGH		0x195d
+#define P_HCODEC_DBLK_Y_HFILT_HIGH		DOS_REG_ADDR(HCODEC_DBLK_Y_HFILT_HIGH)
+#define HCODEC_DBLK_Y_VFILT			0x195e
+#define P_HCODEC_DBLK_Y_VFILT			DOS_REG_ADDR(HCODEC_DBLK_Y_VFILT)
+#define HCODEC_DBLK_CB_FILT			0x195f
+#define P_HCODEC_DBLK_CB_FILT			DOS_REG_ADDR(HCODEC_DBLK_CB_FILT)
+#define HCODEC_DBLK_CR_FILT			0x1960
+#define P_HCODEC_DBLK_CR_FILT			DOS_REG_ADDR(HCODEC_DBLK_CR_FILT)
+#define HCODEC_DBLK_BETAX_QP_SEL		0x1961
+#define P_HCODEC_DBLK_BETAX_QP_SEL		DOS_REG_ADDR(HCODEC_DBLK_BETAX_QP_SEL)
+#define HCODEC_DBLK_CLIP_CTRL0			0x1962
+#define P_HCODEC_DBLK_CLIP_CTRL0		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL0)
+#define HCODEC_DBLK_CLIP_CTRL1			0x1963
+#define P_HCODEC_DBLK_CLIP_CTRL1		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL1)
+#define HCODEC_DBLK_CLIP_CTRL2			0x1964
+#define P_HCODEC_DBLK_CLIP_CTRL2		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL2)
+#define HCODEC_DBLK_CLIP_CTRL3			0x1965
+#define P_HCODEC_DBLK_CLIP_CTRL3		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL3)
+#define HCODEC_DBLK_CLIP_CTRL4			0x1966
+#define P_HCODEC_DBLK_CLIP_CTRL4		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL4)
+#define HCODEC_DBLK_CLIP_CTRL5			0x1967
+#define P_HCODEC_DBLK_CLIP_CTRL5		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL5)
+#define HCODEC_DBLK_CLIP_CTRL6			0x1968
+#define P_HCODEC_DBLK_CLIP_CTRL6		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL6)
+#define HCODEC_DBLK_CLIP_CTRL7			0x1969
+#define P_HCODEC_DBLK_CLIP_CTRL7		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL7)
+#define HCODEC_DBLK_CLIP_CTRL8			0x196a
+#define P_HCODEC_DBLK_CLIP_CTRL8		DOS_REG_ADDR(HCODEC_DBLK_CLIP_CTRL8)
+#define HCODEC_DBLK_STATUS1			0x196b
+#define P_HCODEC_DBLK_STATUS1			DOS_REG_ADDR(HCODEC_DBLK_STATUS1)
+#define HCODEC_DBLK_GCLK_FREE			0x196c
+#define P_HCODEC_DBLK_GCLK_FREE			DOS_REG_ADDR(HCODEC_DBLK_GCLK_FREE)
+#define HCODEC_DBLK_GCLK_OFF			0x196d
+#define P_HCODEC_DBLK_GCLK_OFF			DOS_REG_ADDR(HCODEC_DBLK_GCLK_OFF)
+#define HCODEC_DBLK_AVSFLAGS			0x196e
+#define P_HCODEC_DBLK_AVSFLAGS			DOS_REG_ADDR(HCODEC_DBLK_AVSFLAGS)
+#define HCODEC_DBLK_CBPY			0x1970
+#define P_HCODEC_DBLK_CBPY			DOS_REG_ADDR(HCODEC_DBLK_CBPY)
+#define HCODEC_DBLK_CBPY_ADJ			0x1971
+#define P_HCODEC_DBLK_CBPY_ADJ			DOS_REG_ADDR(HCODEC_DBLK_CBPY_ADJ)
+#define HCODEC_DBLK_CBPC			0x1972
+#define P_HCODEC_DBLK_CBPC			DOS_REG_ADDR(HCODEC_DBLK_CBPC)
+#define HCODEC_DBLK_CBPC_ADJ			0x1973
+#define P_HCODEC_DBLK_CBPC_ADJ			DOS_REG_ADDR(HCODEC_DBLK_CBPC_ADJ)
+#define HCODEC_DBLK_VHMVD			0x1974
+#define P_HCODEC_DBLK_VHMVD			DOS_REG_ADDR(HCODEC_DBLK_VHMVD)
+#define HCODEC_DBLK_STRONG			0x1975
+#define P_HCODEC_DBLK_STRONG			DOS_REG_ADDR(HCODEC_DBLK_STRONG)
+#define HCODEC_DBLK_RV8_QUANT			0x1976
+#define P_HCODEC_DBLK_RV8_QUANT			DOS_REG_ADDR(HCODEC_DBLK_RV8_QUANT)
+#define HCODEC_DBLK_CBUS_HCMD2			0x1977
+#define P_HCODEC_DBLK_CBUS_HCMD2		DOS_REG_ADDR(HCODEC_DBLK_CBUS_HCMD2)
+#define HCODEC_DBLK_CBUS_HCMD1			0x1978
+#define P_HCODEC_DBLK_CBUS_HCMD1		DOS_REG_ADDR(HCODEC_DBLK_CBUS_HCMD1)
+#define HCODEC_DBLK_CBUS_HCMD0			0x1979
+#define P_HCODEC_DBLK_CBUS_HCMD0		DOS_REG_ADDR(HCODEC_DBLK_CBUS_HCMD0)
+#define HCODEC_DBLK_VLD_HCMD2			0x197a
+#define P_HCODEC_DBLK_VLD_HCMD2			DOS_REG_ADDR(HCODEC_DBLK_VLD_HCMD2)
+#define HCODEC_DBLK_VLD_HCMD1			0x197b
+#define P_HCODEC_DBLK_VLD_HCMD1			DOS_REG_ADDR(HCODEC_DBLK_VLD_HCMD1)
+#define HCODEC_DBLK_VLD_HCMD0			0x197c
+#define P_HCODEC_DBLK_VLD_HCMD0			DOS_REG_ADDR(HCODEC_DBLK_VLD_HCMD0)
+#define HCODEC_DBLK_OST_YBASE			0x197d
+#define P_HCODEC_DBLK_OST_YBASE			DOS_REG_ADDR(HCODEC_DBLK_OST_YBASE)
+#define HCODEC_DBLK_OST_CBCRDIFF		0x197e
+#define P_HCODEC_DBLK_OST_CBCRDIFF		DOS_REG_ADDR(HCODEC_DBLK_OST_CBCRDIFF)
+#define HCODEC_DBLK_CTRL1			0x197f
+#define P_HCODEC_DBLK_CTRL1			DOS_REG_ADDR(HCODEC_DBLK_CTRL1)
+#define HCODEC_MCRCC_CTL1			0x1980
+#define P_HCODEC_MCRCC_CTL1			DOS_REG_ADDR(HCODEC_MCRCC_CTL1)
+#define HCODEC_MCRCC_CTL2			0x1981
+#define P_HCODEC_MCRCC_CTL2			DOS_REG_ADDR(HCODEC_MCRCC_CTL2)
+#define HCODEC_MCRCC_CTL3			0x1982
+#define P_HCODEC_MCRCC_CTL3			DOS_REG_ADDR(HCODEC_MCRCC_CTL3)
+#define HCODEC_GCLK_EN				0x1983
+#define P_HCODEC_GCLK_EN			DOS_REG_ADDR(HCODEC_GCLK_EN)
+#define HCODEC_MDEC_SW_RESET			0x1984
+#define P_HCODEC_MDEC_SW_RESET			DOS_REG_ADDR(HCODEC_MDEC_SW_RESET)
+#define VDEC2_MC_CTRL_REG			0x2900
+#define P_VDEC2_MC_CTRL_REG			DOS_REG_ADDR(VDEC2_MC_CTRL_REG)
+#define VDEC2_MC_MB_INFO			0x2901
+#define P_VDEC2_MC_MB_INFO			DOS_REG_ADDR(VDEC2_MC_MB_INFO)
+#define VDEC2_MC_PIC_INFO			0x2902
+#define P_VDEC2_MC_PIC_INFO			DOS_REG_ADDR(VDEC2_MC_PIC_INFO)
+#define VDEC2_MC_HALF_PEL_ONE			0x2903
+#define P_VDEC2_MC_HALF_PEL_ONE			DOS_REG_ADDR(VDEC2_MC_HALF_PEL_ONE)
+#define VDEC2_MC_HALF_PEL_TWO			0x2904
+#define P_VDEC2_MC_HALF_PEL_TWO			DOS_REG_ADDR(VDEC2_MC_HALF_PEL_TWO)
+#define VDEC2_POWER_CTL_MC			0x2905
+#define P_VDEC2_POWER_CTL_MC			DOS_REG_ADDR(VDEC2_POWER_CTL_MC)
+#define VDEC2_MC_CMD				0x2906
+#define P_VDEC2_MC_CMD				DOS_REG_ADDR(VDEC2_MC_CMD)
+#define VDEC2_MC_CTRL0				0x2907
+#define P_VDEC2_MC_CTRL0			DOS_REG_ADDR(VDEC2_MC_CTRL0)
+#define VDEC2_MC_PIC_W_H			0x2908
+#define P_VDEC2_MC_PIC_W_H			DOS_REG_ADDR(VDEC2_MC_PIC_W_H)
+#define VDEC2_MC_STATUS0			0x2909
+#define P_VDEC2_MC_STATUS0			DOS_REG_ADDR(VDEC2_MC_STATUS0)
+#define VDEC2_MC_STATUS1			0x290a
+#define P_VDEC2_MC_STATUS1			DOS_REG_ADDR(VDEC2_MC_STATUS1)
+#define VDEC2_MC_CTRL1				0x290b
+#define P_VDEC2_MC_CTRL1			DOS_REG_ADDR(VDEC2_MC_CTRL1)
+#define VDEC2_MC_MIX_RATIO0			0x290c
+#define P_VDEC2_MC_MIX_RATIO0			DOS_REG_ADDR(VDEC2_MC_MIX_RATIO0)
+#define VDEC2_MC_MIX_RATIO1			0x290d
+#define P_VDEC2_MC_MIX_RATIO1			DOS_REG_ADDR(VDEC2_MC_MIX_RATIO1)
+#define VDEC2_MC_DP_MB_XY			0x290e
+#define P_VDEC2_MC_DP_MB_XY			DOS_REG_ADDR(VDEC2_MC_DP_MB_XY)
+#define VDEC2_MC_OM_MB_XY			0x290f
+#define P_VDEC2_MC_OM_MB_XY			DOS_REG_ADDR(VDEC2_MC_OM_MB_XY)
+#define VDEC2_PSCALE_RST			0x2910
+#define P_VDEC2_PSCALE_RST			DOS_REG_ADDR(VDEC2_PSCALE_RST)
+#define VDEC2_PSCALE_CTRL			0x2911
+#define P_VDEC2_PSCALE_CTRL			DOS_REG_ADDR(VDEC2_PSCALE_CTRL)
+#define VDEC2_PSCALE_PICI_W			0x2912
+#define P_VDEC2_PSCALE_PICI_W			DOS_REG_ADDR(VDEC2_PSCALE_PICI_W)
+#define VDEC2_PSCALE_PICI_H			0x2913
+#define P_VDEC2_PSCALE_PICI_H			DOS_REG_ADDR(VDEC2_PSCALE_PICI_H)
+#define VDEC2_PSCALE_PICO_W			0x2914
+#define P_VDEC2_PSCALE_PICO_W			DOS_REG_ADDR(VDEC2_PSCALE_PICO_W)
+#define VDEC2_PSCALE_PICO_H			0x2915
+#define P_VDEC2_PSCALE_PICO_H			DOS_REG_ADDR(VDEC2_PSCALE_PICO_H)
+#define VDEC2_PSCALE_PICO_START_X		0x2916
+#define P_VDEC2_PSCALE_PICO_START_X		DOS_REG_ADDR(VDEC2_PSCALE_PICO_START_X)
+#define VDEC2_PSCALE_PICO_START_Y		0x2917
+#define P_VDEC2_PSCALE_PICO_START_Y		DOS_REG_ADDR(VDEC2_PSCALE_PICO_START_Y)
+#define VDEC2_PSCALE_DUMMY			0x2918
+#define P_VDEC2_PSCALE_DUMMY			DOS_REG_ADDR(VDEC2_PSCALE_DUMMY)
+#define VDEC2_PSCALE_FILT0_COEF0		0x2919
+#define P_VDEC2_PSCALE_FILT0_COEF0		DOS_REG_ADDR(VDEC2_PSCALE_FILT0_COEF0)
+#define VDEC2_PSCALE_FILT0_COEF1		0x291a
+#define P_VDEC2_PSCALE_FILT0_COEF1		DOS_REG_ADDR(VDEC2_PSCALE_FILT0_COEF1)
+#define VDEC2_PSCALE_CMD_CTRL			0x291b
+#define P_VDEC2_PSCALE_CMD_CTRL			DOS_REG_ADDR(VDEC2_PSCALE_CMD_CTRL)
+#define VDEC2_PSCALE_CMD_BLK_X			0x291c
+#define P_VDEC2_PSCALE_CMD_BLK_X		DOS_REG_ADDR(VDEC2_PSCALE_CMD_BLK_X)
+#define VDEC2_PSCALE_CMD_BLK_Y			0x291d
+#define P_VDEC2_PSCALE_CMD_BLK_Y		DOS_REG_ADDR(VDEC2_PSCALE_CMD_BLK_Y)
+#define VDEC2_PSCALE_STATUS			0x291e
+#define P_VDEC2_PSCALE_STATUS			DOS_REG_ADDR(VDEC2_PSCALE_STATUS)
+#define VDEC2_PSCALE_BMEM_ADDR			0x291f
+#define P_VDEC2_PSCALE_BMEM_ADDR		DOS_REG_ADDR(VDEC2_PSCALE_BMEM_ADDR)
+#define VDEC2_PSCALE_BMEM_DAT			0x2920
+#define P_VDEC2_PSCALE_BMEM_DAT			DOS_REG_ADDR(VDEC2_PSCALE_BMEM_DAT)
+#define VDEC2_PSCALE_DRAM_BUF_CTRL		0x2921
+#define P_VDEC2_PSCALE_DRAM_BUF_CTRL		DOS_REG_ADDR(VDEC2_PSCALE_DRAM_BUF_CTRL)
+#define VDEC2_PSCALE_MCMD_CTRL			0x2922
+#define P_VDEC2_PSCALE_MCMD_CTRL		DOS_REG_ADDR(VDEC2_PSCALE_MCMD_CTRL)
+#define VDEC2_PSCALE_MCMD_XSIZE			0x2923
+#define P_VDEC2_PSCALE_MCMD_XSIZE		DOS_REG_ADDR(VDEC2_PSCALE_MCMD_XSIZE)
+#define VDEC2_PSCALE_MCMD_YSIZE			0x2924
+#define P_VDEC2_PSCALE_MCMD_YSIZE		DOS_REG_ADDR(VDEC2_PSCALE_MCMD_YSIZE)
+#define VDEC2_PSCALE_RBUF_START_BLKX		0x2925
+#define P_VDEC2_PSCALE_RBUF_START_BLKX		DOS_REG_ADDR(VDEC2_PSCALE_RBUF_START_BLKX)
+#define VDEC2_PSCALE_RBUF_START_BLKY		0x2926
+#define P_VDEC2_PSCALE_RBUF_START_BLKY		DOS_REG_ADDR(VDEC2_PSCALE_RBUF_START_BLKY)
+#define VDEC2_PSCALE_PICO_SHIFT_XY		0x2928
+#define P_VDEC2_PSCALE_PICO_SHIFT_XY		DOS_REG_ADDR(VDEC2_PSCALE_PICO_SHIFT_XY)
+#define VDEC2_PSCALE_CTRL1			0x2929
+#define P_VDEC2_PSCALE_CTRL1			DOS_REG_ADDR(VDEC2_PSCALE_CTRL1)
+#define VDEC2_PSCALE_SRCKEY_CTRL0		0x292a
+#define P_VDEC2_PSCALE_SRCKEY_CTRL0		DOS_REG_ADDR(VDEC2_PSCALE_SRCKEY_CTRL0)
+#define VDEC2_PSCALE_SRCKEY_CTRL1		0x292b
+#define P_VDEC2_PSCALE_SRCKEY_CTRL1		DOS_REG_ADDR(VDEC2_PSCALE_SRCKEY_CTRL1)
+#define VDEC2_PSCALE_CANVAS_RD_ADDR		0x292c
+#define P_VDEC2_PSCALE_CANVAS_RD_ADDR		DOS_REG_ADDR(VDEC2_PSCALE_CANVAS_RD_ADDR)
+#define VDEC2_PSCALE_CANVAS_WR_ADDR		0x292d
+#define P_VDEC2_PSCALE_CANVAS_WR_ADDR		DOS_REG_ADDR(VDEC2_PSCALE_CANVAS_WR_ADDR)
+#define VDEC2_PSCALE_CTRL2			0x292e
+#define P_VDEC2_PSCALE_CTRL2			DOS_REG_ADDR(VDEC2_PSCALE_CTRL2)
+#define VDEC2_HDEC_MC_OMEM_AUTO			0x2930
+#define P_VDEC2_HDEC_MC_OMEM_AUTO		DOS_REG_ADDR(VDEC2_HDEC_MC_OMEM_AUTO)
+#define VDEC2_HDEC_MC_MBRIGHT_IDX		0x2931
+#define P_VDEC2_HDEC_MC_MBRIGHT_IDX		DOS_REG_ADDR(VDEC2_HDEC_MC_MBRIGHT_IDX)
+#define VDEC2_HDEC_MC_MBRIGHT_RD		0x2932
+#define P_VDEC2_HDEC_MC_MBRIGHT_RD		DOS_REG_ADDR(VDEC2_HDEC_MC_MBRIGHT_RD)
+#define VDEC2_MC_MPORT_CTRL			0x2940
+#define P_VDEC2_MC_MPORT_CTRL			DOS_REG_ADDR(VDEC2_MC_MPORT_CTRL)
+#define VDEC2_MC_MPORT_DAT			0x2941
+#define P_VDEC2_MC_MPORT_DAT			DOS_REG_ADDR(VDEC2_MC_MPORT_DAT)
+#define VDEC2_MC_WT_PRED_CTRL			0x2942
+#define P_VDEC2_MC_WT_PRED_CTRL			DOS_REG_ADDR(VDEC2_MC_WT_PRED_CTRL)
+#define VDEC2_MC_MBBOT_ST_EVEN_ADDR		0x2944
+#define P_VDEC2_MC_MBBOT_ST_EVEN_ADDR		DOS_REG_ADDR(VDEC2_MC_MBBOT_ST_EVEN_ADDR)
+#define VDEC2_MC_MBBOT_ST_ODD_ADDR		0x2945
+#define P_VDEC2_MC_MBBOT_ST_ODD_ADDR		DOS_REG_ADDR(VDEC2_MC_MBBOT_ST_ODD_ADDR)
+#define VDEC2_MC_DPDN_MB_XY			0x2946
+#define P_VDEC2_MC_DPDN_MB_XY			DOS_REG_ADDR(VDEC2_MC_DPDN_MB_XY)
+#define VDEC2_MC_OMDN_MB_XY			0x2947
+#define P_VDEC2_MC_OMDN_MB_XY			DOS_REG_ADDR(VDEC2_MC_OMDN_MB_XY)
+#define VDEC2_MC_HCMDBUF_H			0x2948
+#define P_VDEC2_MC_HCMDBUF_H			DOS_REG_ADDR(VDEC2_MC_HCMDBUF_H)
+#define VDEC2_MC_HCMDBUF_L			0x2949
+#define P_VDEC2_MC_HCMDBUF_L			DOS_REG_ADDR(VDEC2_MC_HCMDBUF_L)
+#define VDEC2_MC_HCMD_H				0x294a
+#define P_VDEC2_MC_HCMD_H			DOS_REG_ADDR(VDEC2_MC_HCMD_H)
+#define VDEC2_MC_HCMD_L				0x294b
+#define P_VDEC2_MC_HCMD_L			DOS_REG_ADDR(VDEC2_MC_HCMD_L)
+#define VDEC2_MC_IDCT_DAT			0x294c
+#define P_VDEC2_MC_IDCT_DAT			DOS_REG_ADDR(VDEC2_MC_IDCT_DAT)
+#define VDEC2_MC_CTRL_GCLK_CTRL			0x294d
+#define P_VDEC2_MC_CTRL_GCLK_CTRL		DOS_REG_ADDR(VDEC2_MC_CTRL_GCLK_CTRL)
+#define VDEC2_MC_OTHER_GCLK_CTRL		0x294e
+#define P_VDEC2_MC_OTHER_GCLK_CTRL		DOS_REG_ADDR(VDEC2_MC_OTHER_GCLK_CTRL)
+#define VDEC2_MC_CTRL2				0x294f
+#define P_VDEC2_MC_CTRL2			DOS_REG_ADDR(VDEC2_MC_CTRL2)
+#define VDEC2_MDEC_PIC_DC_CTRL			0x298e
+#define P_VDEC2_MDEC_PIC_DC_CTRL		DOS_REG_ADDR(VDEC2_MDEC_PIC_DC_CTRL)
+#define VDEC2_MDEC_PIC_DC_STATUS		0x298f
+#define P_VDEC2_MDEC_PIC_DC_STATUS		DOS_REG_ADDR(VDEC2_MDEC_PIC_DC_STATUS)
+#define VDEC2_ANC0_CANVAS_ADDR			0x2990
+#define P_VDEC2_ANC0_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC0_CANVAS_ADDR)
+#define VDEC2_ANC1_CANVAS_ADDR			0x2991
+#define P_VDEC2_ANC1_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC1_CANVAS_ADDR)
+#define VDEC2_ANC2_CANVAS_ADDR			0x2992
+#define P_VDEC2_ANC2_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC2_CANVAS_ADDR)
+#define VDEC2_ANC3_CANVAS_ADDR			0x2993
+#define P_VDEC2_ANC3_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC3_CANVAS_ADDR)
+#define VDEC2_ANC4_CANVAS_ADDR			0x2994
+#define P_VDEC2_ANC4_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC4_CANVAS_ADDR)
+#define VDEC2_ANC5_CANVAS_ADDR			0x2995
+#define P_VDEC2_ANC5_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC5_CANVAS_ADDR)
+#define VDEC2_ANC6_CANVAS_ADDR			0x2996
+#define P_VDEC2_ANC6_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC6_CANVAS_ADDR)
+#define VDEC2_ANC7_CANVAS_ADDR			0x2997
+#define P_VDEC2_ANC7_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC7_CANVAS_ADDR)
+#define VDEC2_ANC8_CANVAS_ADDR			0x2998
+#define P_VDEC2_ANC8_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC8_CANVAS_ADDR)
+#define VDEC2_ANC9_CANVAS_ADDR			0x2999
+#define P_VDEC2_ANC9_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC9_CANVAS_ADDR)
+#define VDEC2_ANC10_CANVAS_ADDR			0x299a
+#define P_VDEC2_ANC10_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC10_CANVAS_ADDR)
+#define VDEC2_ANC11_CANVAS_ADDR			0x299b
+#define P_VDEC2_ANC11_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC11_CANVAS_ADDR)
+#define VDEC2_ANC12_CANVAS_ADDR			0x299c
+#define P_VDEC2_ANC12_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC12_CANVAS_ADDR)
+#define VDEC2_ANC13_CANVAS_ADDR			0x299d
+#define P_VDEC2_ANC13_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC13_CANVAS_ADDR)
+#define VDEC2_ANC14_CANVAS_ADDR			0x299e
+#define P_VDEC2_ANC14_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC14_CANVAS_ADDR)
+#define VDEC2_ANC15_CANVAS_ADDR			0x299f
+#define P_VDEC2_ANC15_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC15_CANVAS_ADDR)
+#define VDEC2_ANC16_CANVAS_ADDR			0x29a0
+#define P_VDEC2_ANC16_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC16_CANVAS_ADDR)
+#define VDEC2_ANC17_CANVAS_ADDR			0x29a1
+#define P_VDEC2_ANC17_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC17_CANVAS_ADDR)
+#define VDEC2_ANC18_CANVAS_ADDR			0x29a2
+#define P_VDEC2_ANC18_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC18_CANVAS_ADDR)
+#define VDEC2_ANC19_CANVAS_ADDR			0x29a3
+#define P_VDEC2_ANC19_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC19_CANVAS_ADDR)
+#define VDEC2_ANC20_CANVAS_ADDR			0x29a4
+#define P_VDEC2_ANC20_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC20_CANVAS_ADDR)
+#define VDEC2_ANC21_CANVAS_ADDR			0x29a5
+#define P_VDEC2_ANC21_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC21_CANVAS_ADDR)
+#define VDEC2_ANC22_CANVAS_ADDR			0x29a6
+#define P_VDEC2_ANC22_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC22_CANVAS_ADDR)
+#define VDEC2_ANC23_CANVAS_ADDR			0x29a7
+#define P_VDEC2_ANC23_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC23_CANVAS_ADDR)
+#define VDEC2_ANC24_CANVAS_ADDR			0x29a8
+#define P_VDEC2_ANC24_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC24_CANVAS_ADDR)
+#define VDEC2_ANC25_CANVAS_ADDR			0x29a9
+#define P_VDEC2_ANC25_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC25_CANVAS_ADDR)
+#define VDEC2_ANC26_CANVAS_ADDR			0x29aa
+#define P_VDEC2_ANC26_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC26_CANVAS_ADDR)
+#define VDEC2_ANC27_CANVAS_ADDR			0x29ab
+#define P_VDEC2_ANC27_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC27_CANVAS_ADDR)
+#define VDEC2_ANC28_CANVAS_ADDR			0x29ac
+#define P_VDEC2_ANC28_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC28_CANVAS_ADDR)
+#define VDEC2_ANC29_CANVAS_ADDR			0x29ad
+#define P_VDEC2_ANC29_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC29_CANVAS_ADDR)
+#define VDEC2_ANC30_CANVAS_ADDR			0x29ae
+#define P_VDEC2_ANC30_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC30_CANVAS_ADDR)
+#define VDEC2_ANC31_CANVAS_ADDR			0x29af
+#define P_VDEC2_ANC31_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_ANC31_CANVAS_ADDR)
+#define VDEC2_DBKR_CANVAS_ADDR			0x29b0
+#define P_VDEC2_DBKR_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_DBKR_CANVAS_ADDR)
+#define VDEC2_DBKW_CANVAS_ADDR			0x29b1
+#define P_VDEC2_DBKW_CANVAS_ADDR		DOS_REG_ADDR(VDEC2_DBKW_CANVAS_ADDR)
+#define VDEC2_REC_CANVAS_ADDR			0x29b2
+#define P_VDEC2_REC_CANVAS_ADDR			DOS_REG_ADDR(VDEC2_REC_CANVAS_ADDR)
+#define VDEC2_CURR_CANVAS_CTRL			0x29b3
+#define P_VDEC2_CURR_CANVAS_CTRL		DOS_REG_ADDR(VDEC2_CURR_CANVAS_CTRL)
+#define VDEC2_MDEC_PIC_DC_THRESH		0x29b8
+#define P_VDEC2_MDEC_PIC_DC_THRESH		DOS_REG_ADDR(VDEC2_MDEC_PIC_DC_THRESH)
+#define VDEC2_MDEC_PICR_BUF_STATUS		0x29b9
+#define P_VDEC2_MDEC_PICR_BUF_STATUS		DOS_REG_ADDR(VDEC2_MDEC_PICR_BUF_STATUS)
+#define VDEC2_MDEC_PICW_BUF_STATUS		0x29ba
+#define P_VDEC2_MDEC_PICW_BUF_STATUS		DOS_REG_ADDR(VDEC2_MDEC_PICW_BUF_STATUS)
+#define VDEC2_MCW_DBLK_WRRSP_CNT		0x29bb
+#define P_VDEC2_MCW_DBLK_WRRSP_CNT		DOS_REG_ADDR(VDEC2_MCW_DBLK_WRRSP_CNT)
+#define VDEC2_MC_MBBOT_WRRSP_CNT		0x29bc
+#define P_VDEC2_MC_MBBOT_WRRSP_CNT		DOS_REG_ADDR(VDEC2_MC_MBBOT_WRRSP_CNT)
+#define VDEC2_MDEC_PICW_BUF2_STATUS		0x29bd
+#define P_VDEC2_MDEC_PICW_BUF2_STATUS		DOS_REG_ADDR(VDEC2_MDEC_PICW_BUF2_STATUS)
+#define VDEC2_WRRSP_FIFO_PICW_DBK		0x29be
+#define P_VDEC2_WRRSP_FIFO_PICW_DBK		DOS_REG_ADDR(VDEC2_WRRSP_FIFO_PICW_DBK)
+#define VDEC2_WRRSP_FIFO_PICW_MC		0x29bf
+#define P_VDEC2_WRRSP_FIFO_PICW_MC		DOS_REG_ADDR(VDEC2_WRRSP_FIFO_PICW_MC)
+#define VDEC2_AV_SCRATCH_0			0x29c0
+#define P_VDEC2_AV_SCRATCH_0			DOS_REG_ADDR(VDEC2_AV_SCRATCH_0)
+#define VDEC2_AV_SCRATCH_1			0x29c1
+#define P_VDEC2_AV_SCRATCH_1			DOS_REG_ADDR(VDEC2_AV_SCRATCH_1)
+#define VDEC2_AV_SCRATCH_2			0x29c2
+#define P_VDEC2_AV_SCRATCH_2			DOS_REG_ADDR(VDEC2_AV_SCRATCH_2)
+#define VDEC2_AV_SCRATCH_3			0x29c3
+#define P_VDEC2_AV_SCRATCH_3			DOS_REG_ADDR(VDEC2_AV_SCRATCH_3)
+#define VDEC2_AV_SCRATCH_4			0x29c4
+#define P_VDEC2_AV_SCRATCH_4			DOS_REG_ADDR(VDEC2_AV_SCRATCH_4)
+#define VDEC2_AV_SCRATCH_5			0x29c5
+#define P_VDEC2_AV_SCRATCH_5			DOS_REG_ADDR(VDEC2_AV_SCRATCH_5)
+#define VDEC2_AV_SCRATCH_6			0x29c6
+#define P_VDEC2_AV_SCRATCH_6			DOS_REG_ADDR(VDEC2_AV_SCRATCH_6)
+#define VDEC2_AV_SCRATCH_7			0x29c7
+#define P_VDEC2_AV_SCRATCH_7			DOS_REG_ADDR(VDEC2_AV_SCRATCH_7)
+#define VDEC2_AV_SCRATCH_8			0x29c8
+#define P_VDEC2_AV_SCRATCH_8			DOS_REG_ADDR(VDEC2_AV_SCRATCH_8)
+#define VDEC2_AV_SCRATCH_9			0x29c9
+#define P_VDEC2_AV_SCRATCH_9			DOS_REG_ADDR(VDEC2_AV_SCRATCH_9)
+#define VDEC2_AV_SCRATCH_A			0x29ca
+#define P_VDEC2_AV_SCRATCH_A			DOS_REG_ADDR(VDEC2_AV_SCRATCH_A)
+#define VDEC2_AV_SCRATCH_B			0x29cb
+#define P_VDEC2_AV_SCRATCH_B			DOS_REG_ADDR(VDEC2_AV_SCRATCH_B)
+#define VDEC2_AV_SCRATCH_C			0x29cc
+#define P_VDEC2_AV_SCRATCH_C			DOS_REG_ADDR(VDEC2_AV_SCRATCH_C)
+#define VDEC2_AV_SCRATCH_D			0x29cd
+#define P_VDEC2_AV_SCRATCH_D			DOS_REG_ADDR(VDEC2_AV_SCRATCH_D)
+#define VDEC2_AV_SCRATCH_E			0x29ce
+#define P_VDEC2_AV_SCRATCH_E			DOS_REG_ADDR(VDEC2_AV_SCRATCH_E)
+#define VDEC2_AV_SCRATCH_F			0x29cf
+#define P_VDEC2_AV_SCRATCH_F			DOS_REG_ADDR(VDEC2_AV_SCRATCH_F)
+#define VDEC2_AV_SCRATCH_G			0x29d0
+#define P_VDEC2_AV_SCRATCH_G			DOS_REG_ADDR(VDEC2_AV_SCRATCH_G)
+#define VDEC2_AV_SCRATCH_H			0x29d1
+#define P_VDEC2_AV_SCRATCH_H			DOS_REG_ADDR(VDEC2_AV_SCRATCH_H)
+#define VDEC2_AV_SCRATCH_I			0x29d2
+#define P_VDEC2_AV_SCRATCH_I			DOS_REG_ADDR(VDEC2_AV_SCRATCH_I)
+#define VDEC2_AV_SCRATCH_J			0x29d3
+#define P_VDEC2_AV_SCRATCH_J			DOS_REG_ADDR(VDEC2_AV_SCRATCH_J)
+#define VDEC2_AV_SCRATCH_K			0x29d4
+#define P_VDEC2_AV_SCRATCH_K			DOS_REG_ADDR(VDEC2_AV_SCRATCH_K)
+#define VDEC2_AV_SCRATCH_L			0x29d5
+#define P_VDEC2_AV_SCRATCH_L			DOS_REG_ADDR(VDEC2_AV_SCRATCH_L)
+#define VDEC2_AV_SCRATCH_M			0x29d6
+#define P_VDEC2_AV_SCRATCH_M			DOS_REG_ADDR(VDEC2_AV_SCRATCH_M)
+#define VDEC2_AV_SCRATCH_N			0x29d7
+#define P_VDEC2_AV_SCRATCH_N			DOS_REG_ADDR(VDEC2_AV_SCRATCH_N)
+#define VDEC2_WRRSP_CO_MB			0x29d8
+#define P_VDEC2_WRRSP_CO_MB			DOS_REG_ADDR(VDEC2_WRRSP_CO_MB)
+#define VDEC2_WRRSP_DCAC			0x29d9
+#define P_VDEC2_WRRSP_DCAC			DOS_REG_ADDR(VDEC2_WRRSP_DCAC)
+#define VDEC2_WRRSP_VLD				0x29da
+#define P_VDEC2_WRRSP_VLD			DOS_REG_ADDR(VDEC2_WRRSP_VLD)
+#define VDEC2_MDEC_DOUBLEW_CFG0			0x29db
+#define P_VDEC2_MDEC_DOUBLEW_CFG0		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG0)
+#define VDEC2_MDEC_DOUBLEW_CFG1			0x29dc
+#define P_VDEC2_MDEC_DOUBLEW_CFG1		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG1)
+#define VDEC2_MDEC_DOUBLEW_CFG2			0x29dd
+#define P_VDEC2_MDEC_DOUBLEW_CFG2		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG2)
+#define VDEC2_MDEC_DOUBLEW_CFG3			0x29de
+#define P_VDEC2_MDEC_DOUBLEW_CFG3		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG3)
+#define VDEC2_MDEC_DOUBLEW_CFG4			0x29df
+#define P_VDEC2_MDEC_DOUBLEW_CFG4		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG4)
+#define VDEC2_MDEC_DOUBLEW_CFG5			0x29e0
+#define P_VDEC2_MDEC_DOUBLEW_CFG5		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG5)
+#define VDEC2_MDEC_DOUBLEW_CFG6			0x29e1
+#define P_VDEC2_MDEC_DOUBLEW_CFG6		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG6)
+#define VDEC2_MDEC_DOUBLEW_CFG7			0x29e2
+#define P_VDEC2_MDEC_DOUBLEW_CFG7		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_CFG7)
+#define VDEC2_MDEC_DOUBLEW_STATUS		0x29e3
+#define P_VDEC2_MDEC_DOUBLEW_STATUS		DOS_REG_ADDR(VDEC2_MDEC_DOUBLEW_STATUS)
+#define VDEC2_DBLK_RST				0x2950
+#define P_VDEC2_DBLK_RST			DOS_REG_ADDR(VDEC2_DBLK_RST)
+#define VDEC2_DBLK_CTRL				0x2951
+#define P_VDEC2_DBLK_CTRL			DOS_REG_ADDR(VDEC2_DBLK_CTRL)
+#define VDEC2_DBLK_MB_WID_HEIGHT		0x2952
+#define P_VDEC2_DBLK_MB_WID_HEIGHT		DOS_REG_ADDR(VDEC2_DBLK_MB_WID_HEIGHT)
+#define VDEC2_DBLK_STATUS			0x2953
+#define P_VDEC2_DBLK_STATUS			DOS_REG_ADDR(VDEC2_DBLK_STATUS)
+#define VDEC2_DBLK_CMD_CTRL			0x2954
+#define P_VDEC2_DBLK_CMD_CTRL			DOS_REG_ADDR(VDEC2_DBLK_CMD_CTRL)
+#define VDEC2_DBLK_MB_XY			0x2955
+#define P_VDEC2_DBLK_MB_XY			DOS_REG_ADDR(VDEC2_DBLK_MB_XY)
+#define VDEC2_DBLK_QP				0x2956
+#define P_VDEC2_DBLK_QP				DOS_REG_ADDR(VDEC2_DBLK_QP)
+#define VDEC2_DBLK_Y_BHFILT			0x2957
+#define P_VDEC2_DBLK_Y_BHFILT			DOS_REG_ADDR(VDEC2_DBLK_Y_BHFILT)
+#define VDEC2_DBLK_Y_BHFILT_HIGH		0x2958
+#define P_VDEC2_DBLK_Y_BHFILT_HIGH		DOS_REG_ADDR(VDEC2_DBLK_Y_BHFILT_HIGH)
+#define VDEC2_DBLK_Y_BVFILT			0x2959
+#define P_VDEC2_DBLK_Y_BVFILT			DOS_REG_ADDR(VDEC2_DBLK_Y_BVFILT)
+#define VDEC2_DBLK_CB_BFILT			0x295a
+#define P_VDEC2_DBLK_CB_BFILT			DOS_REG_ADDR(VDEC2_DBLK_CB_BFILT)
+#define VDEC2_DBLK_CR_BFILT			0x295b
+#define P_VDEC2_DBLK_CR_BFILT			DOS_REG_ADDR(VDEC2_DBLK_CR_BFILT)
+#define VDEC2_DBLK_Y_HFILT			0x295c
+#define P_VDEC2_DBLK_Y_HFILT			DOS_REG_ADDR(VDEC2_DBLK_Y_HFILT)
+#define VDEC2_DBLK_Y_HFILT_HIGH			0x295d
+#define P_VDEC2_DBLK_Y_HFILT_HIGH		DOS_REG_ADDR(VDEC2_DBLK_Y_HFILT_HIGH)
+#define VDEC2_DBLK_Y_VFILT			0x295e
+#define P_VDEC2_DBLK_Y_VFILT			DOS_REG_ADDR(VDEC2_DBLK_Y_VFILT)
+#define VDEC2_DBLK_CB_FILT			0x295f
+#define P_VDEC2_DBLK_CB_FILT			DOS_REG_ADDR(VDEC2_DBLK_CB_FILT)
+#define VDEC2_DBLK_CR_FILT			0x2960
+#define P_VDEC2_DBLK_CR_FILT			DOS_REG_ADDR(VDEC2_DBLK_CR_FILT)
+#define VDEC2_DBLK_BETAX_QP_SEL			0x2961
+#define P_VDEC2_DBLK_BETAX_QP_SEL		DOS_REG_ADDR(VDEC2_DBLK_BETAX_QP_SEL)
+#define VDEC2_DBLK_CLIP_CTRL0			0x2962
+#define P_VDEC2_DBLK_CLIP_CTRL0			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL0)
+#define VDEC2_DBLK_CLIP_CTRL1			0x2963
+#define P_VDEC2_DBLK_CLIP_CTRL1			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL1)
+#define VDEC2_DBLK_CLIP_CTRL2			0x2964
+#define P_VDEC2_DBLK_CLIP_CTRL2			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL2)
+#define VDEC2_DBLK_CLIP_CTRL3			0x2965
+#define P_VDEC2_DBLK_CLIP_CTRL3			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL3)
+#define VDEC2_DBLK_CLIP_CTRL4			0x2966
+#define P_VDEC2_DBLK_CLIP_CTRL4			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL4)
+#define VDEC2_DBLK_CLIP_CTRL5			0x2967
+#define P_VDEC2_DBLK_CLIP_CTRL5			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL5)
+#define VDEC2_DBLK_CLIP_CTRL6			0x2968
+#define P_VDEC2_DBLK_CLIP_CTRL6			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL6)
+#define VDEC2_DBLK_CLIP_CTRL7			0x2969
+#define P_VDEC2_DBLK_CLIP_CTRL7			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL7)
+#define VDEC2_DBLK_CLIP_CTRL8			0x296a
+#define P_VDEC2_DBLK_CLIP_CTRL8			DOS_REG_ADDR(VDEC2_DBLK_CLIP_CTRL8)
+#define VDEC2_DBLK_STATUS1			0x296b
+#define P_VDEC2_DBLK_STATUS1			DOS_REG_ADDR(VDEC2_DBLK_STATUS1)
+#define VDEC2_DBLK_GCLK_FREE			0x296c
+#define P_VDEC2_DBLK_GCLK_FREE			DOS_REG_ADDR(VDEC2_DBLK_GCLK_FREE)
+#define VDEC2_DBLK_GCLK_OFF			0x296d
+#define P_VDEC2_DBLK_GCLK_OFF			DOS_REG_ADDR(VDEC2_DBLK_GCLK_OFF)
+#define VDEC2_DBLK_AVSFLAGS			0x296e
+#define P_VDEC2_DBLK_AVSFLAGS			DOS_REG_ADDR(VDEC2_DBLK_AVSFLAGS)
+#define VDEC2_DBLK_CBPY				0x2970
+#define P_VDEC2_DBLK_CBPY			DOS_REG_ADDR(VDEC2_DBLK_CBPY)
+#define VDEC2_DBLK_CBPY_ADJ			0x2971
+#define P_VDEC2_DBLK_CBPY_ADJ			DOS_REG_ADDR(VDEC2_DBLK_CBPY_ADJ)
+#define VDEC2_DBLK_CBPC				0x2972
+#define P_VDEC2_DBLK_CBPC			DOS_REG_ADDR(VDEC2_DBLK_CBPC)
+#define VDEC2_DBLK_CBPC_ADJ			0x2973
+#define P_VDEC2_DBLK_CBPC_ADJ			DOS_REG_ADDR(VDEC2_DBLK_CBPC_ADJ)
+#define VDEC2_DBLK_VHMVD			0x2974
+#define P_VDEC2_DBLK_VHMVD			DOS_REG_ADDR(VDEC2_DBLK_VHMVD)
+#define VDEC2_DBLK_STRONG			0x2975
+#define P_VDEC2_DBLK_STRONG			DOS_REG_ADDR(VDEC2_DBLK_STRONG)
+#define VDEC2_DBLK_RV8_QUANT			0x2976
+#define P_VDEC2_DBLK_RV8_QUANT			DOS_REG_ADDR(VDEC2_DBLK_RV8_QUANT)
+#define VDEC2_DBLK_CBUS_HCMD2			0x2977
+#define P_VDEC2_DBLK_CBUS_HCMD2			DOS_REG_ADDR(VDEC2_DBLK_CBUS_HCMD2)
+#define VDEC2_DBLK_CBUS_HCMD1			0x2978
+#define P_VDEC2_DBLK_CBUS_HCMD1			DOS_REG_ADDR(VDEC2_DBLK_CBUS_HCMD1)
+#define VDEC2_DBLK_CBUS_HCMD0			0x2979
+#define P_VDEC2_DBLK_CBUS_HCMD0			DOS_REG_ADDR(VDEC2_DBLK_CBUS_HCMD0)
+#define VDEC2_DBLK_VLD_HCMD2			0x297a
+#define P_VDEC2_DBLK_VLD_HCMD2			DOS_REG_ADDR(VDEC2_DBLK_VLD_HCMD2)
+#define VDEC2_DBLK_VLD_HCMD1			0x297b
+#define P_VDEC2_DBLK_VLD_HCMD1			DOS_REG_ADDR(VDEC2_DBLK_VLD_HCMD1)
+#define VDEC2_DBLK_VLD_HCMD0			0x297c
+#define P_VDEC2_DBLK_VLD_HCMD0			DOS_REG_ADDR(VDEC2_DBLK_VLD_HCMD0)
+#define VDEC2_DBLK_OST_YBASE			0x297d
+#define P_VDEC2_DBLK_OST_YBASE			DOS_REG_ADDR(VDEC2_DBLK_OST_YBASE)
+#define VDEC2_DBLK_OST_CBCRDIFF			0x297e
+#define P_VDEC2_DBLK_OST_CBCRDIFF		DOS_REG_ADDR(VDEC2_DBLK_OST_CBCRDIFF)
+#define VDEC2_DBLK_CTRL1			0x297f
+#define P_VDEC2_DBLK_CTRL1			DOS_REG_ADDR(VDEC2_DBLK_CTRL1)
+#define VDEC2_MCRCC_CTL1			0x2980
+#define P_VDEC2_MCRCC_CTL1			DOS_REG_ADDR(VDEC2_MCRCC_CTL1)
+#define VDEC2_MCRCC_CTL2			0x2981
+#define P_VDEC2_MCRCC_CTL2			DOS_REG_ADDR(VDEC2_MCRCC_CTL2)
+#define VDEC2_MCRCC_CTL3			0x2982
+#define P_VDEC2_MCRCC_CTL3			DOS_REG_ADDR(VDEC2_MCRCC_CTL3)
+#define VDEC2_GCLK_EN				0x2983
+#define P_VDEC2_GCLK_EN				DOS_REG_ADDR(VDEC2_GCLK_EN)
+#define VDEC2_MDEC_SW_RESET			0x2984
+#define P_VDEC2_MDEC_SW_RESET			DOS_REG_ADDR(VDEC2_MDEC_SW_RESET)
+#define HEVC_MC_CTRL_REG			0x3900
+#define P_HEVC_MC_CTRL_REG			DOS_REG_ADDR(HEVC_MC_CTRL_REG)
+#define HEVC_MC_MB_INFO				0x3901
+#define P_HEVC_MC_MB_INFO			DOS_REG_ADDR(HEVC_MC_MB_INFO)
+#define HEVC_MC_PIC_INFO			0x3902
+#define P_HEVC_MC_PIC_INFO			DOS_REG_ADDR(HEVC_MC_PIC_INFO)
+#define HEVC_MC_HALF_PEL_ONE			0x3903
+#define P_HEVC_MC_HALF_PEL_ONE			DOS_REG_ADDR(HEVC_MC_HALF_PEL_ONE)
+#define HEVC_MC_HALF_PEL_TWO			0x3904
+#define P_HEVC_MC_HALF_PEL_TWO			DOS_REG_ADDR(HEVC_MC_HALF_PEL_TWO)
+#define HEVC_POWER_CTL_MC			0x3905
+#define P_HEVC_POWER_CTL_MC			DOS_REG_ADDR(HEVC_POWER_CTL_MC)
+#define HEVC_MC_CMD				0x3906
+#define P_HEVC_MC_CMD				DOS_REG_ADDR(HEVC_MC_CMD)
+#define HEVC_MC_CTRL0				0x3907
+#define P_HEVC_MC_CTRL0				DOS_REG_ADDR(HEVC_MC_CTRL0)
+#define HEVC_MC_PIC_W_H				0x3908
+#define P_HEVC_MC_PIC_W_H			DOS_REG_ADDR(HEVC_MC_PIC_W_H)
+#define HEVC_MC_STATUS0				0x3909
+#define P_HEVC_MC_STATUS0			DOS_REG_ADDR(HEVC_MC_STATUS0)
+#define HEVC_MC_STATUS1				0x390a
+#define P_HEVC_MC_STATUS1			DOS_REG_ADDR(HEVC_MC_STATUS1)
+#define HEVC_MC_CTRL1				0x390b
+#define P_HEVC_MC_CTRL1				DOS_REG_ADDR(HEVC_MC_CTRL1)
+#define HEVC_MC_MIX_RATIO0			0x390c
+#define P_HEVC_MC_MIX_RATIO0			DOS_REG_ADDR(HEVC_MC_MIX_RATIO0)
+#define HEVC_MC_MIX_RATIO1			0x390d
+#define P_HEVC_MC_MIX_RATIO1			DOS_REG_ADDR(HEVC_MC_MIX_RATIO1)
+#define HEVC_MC_DP_MB_XY			0x390e
+#define P_HEVC_MC_DP_MB_XY			DOS_REG_ADDR(HEVC_MC_DP_MB_XY)
+#define HEVC_MC_OM_MB_XY			0x390f
+#define P_HEVC_MC_OM_MB_XY			DOS_REG_ADDR(HEVC_MC_OM_MB_XY)
+#define HEVC_PSCALE_RST				0x3910
+#define P_HEVC_PSCALE_RST			DOS_REG_ADDR(HEVC_PSCALE_RST)
+#define HEVC_PSCALE_CTRL			0x3911
+#define P_HEVC_PSCALE_CTRL			DOS_REG_ADDR(HEVC_PSCALE_CTRL)
+#define HEVC_PSCALE_PICI_W			0x3912
+#define P_HEVC_PSCALE_PICI_W			DOS_REG_ADDR(HEVC_PSCALE_PICI_W)
+#define HEVC_PSCALE_PICI_H			0x3913
+#define P_HEVC_PSCALE_PICI_H			DOS_REG_ADDR(HEVC_PSCALE_PICI_H)
+#define HEVC_PSCALE_PICO_W			0x3914
+#define P_HEVC_PSCALE_PICO_W			DOS_REG_ADDR(HEVC_PSCALE_PICO_W)
+#define HEVC_PSCALE_PICO_H			0x3915
+#define P_HEVC_PSCALE_PICO_H			DOS_REG_ADDR(HEVC_PSCALE_PICO_H)
+#define HEVC_PSCALE_PICO_START_X		0x3916
+#define P_HEVC_PSCALE_PICO_START_X		DOS_REG_ADDR(HEVC_PSCALE_PICO_START_X)
+#define HEVC_PSCALE_PICO_START_Y		0x3917
+#define P_HEVC_PSCALE_PICO_START_Y		DOS_REG_ADDR(HEVC_PSCALE_PICO_START_Y)
+#define HEVC_PSCALE_DUMMY			0x3918
+#define P_HEVC_PSCALE_DUMMY			DOS_REG_ADDR(HEVC_PSCALE_DUMMY)
+#define HEVC_PSCALE_FILT0_COEF0			0x3919
+#define P_HEVC_PSCALE_FILT0_COEF0		DOS_REG_ADDR(HEVC_PSCALE_FILT0_COEF0)
+#define HEVC_PSCALE_FILT0_COEF1			0x391a
+#define P_HEVC_PSCALE_FILT0_COEF1		DOS_REG_ADDR(HEVC_PSCALE_FILT0_COEF1)
+#define HEVC_PSCALE_CMD_CTRL			0x391b
+#define P_HEVC_PSCALE_CMD_CTRL			DOS_REG_ADDR(HEVC_PSCALE_CMD_CTRL)
+#define HEVC_PSCALE_CMD_BLK_X			0x391c
+#define P_HEVC_PSCALE_CMD_BLK_X			DOS_REG_ADDR(HEVC_PSCALE_CMD_BLK_X)
+#define HEVC_PSCALE_CMD_BLK_Y			0x391d
+#define P_HEVC_PSCALE_CMD_BLK_Y			DOS_REG_ADDR(HEVC_PSCALE_CMD_BLK_Y)
+#define HEVC_PSCALE_STATUS			0x391e
+#define P_HEVC_PSCALE_STATUS			DOS_REG_ADDR(HEVC_PSCALE_STATUS)
+#define HEVC_PSCALE_BMEM_ADDR			0x391f
+#define P_HEVC_PSCALE_BMEM_ADDR			DOS_REG_ADDR(HEVC_PSCALE_BMEM_ADDR)
+#define HEVC_PSCALE_BMEM_DAT			0x3920
+#define P_HEVC_PSCALE_BMEM_DAT			DOS_REG_ADDR(HEVC_PSCALE_BMEM_DAT)
+#define HEVC_PSCALE_DRAM_BUF_CTRL		0x3921
+#define P_HEVC_PSCALE_DRAM_BUF_CTRL		DOS_REG_ADDR(HEVC_PSCALE_DRAM_BUF_CTRL)
+#define HEVC_PSCALE_MCMD_CTRL			0x3922
+#define P_HEVC_PSCALE_MCMD_CTRL			DOS_REG_ADDR(HEVC_PSCALE_MCMD_CTRL)
+#define HEVC_PSCALE_MCMD_XSIZE			0x3923
+#define P_HEVC_PSCALE_MCMD_XSIZE		DOS_REG_ADDR(HEVC_PSCALE_MCMD_XSIZE)
+#define HEVC_PSCALE_MCMD_YSIZE			0x3924
+#define P_HEVC_PSCALE_MCMD_YSIZE		DOS_REG_ADDR(HEVC_PSCALE_MCMD_YSIZE)
+#define HEVC_PSCALE_RBUF_START_BLKX		0x3925
+#define P_HEVC_PSCALE_RBUF_START_BLKX		DOS_REG_ADDR(HEVC_PSCALE_RBUF_START_BLKX)
+#define HEVC_PSCALE_RBUF_START_BLKY		0x3926
+#define P_HEVC_PSCALE_RBUF_START_BLKY		DOS_REG_ADDR(HEVC_PSCALE_RBUF_START_BLKY)
+#define HEVC_PSCALE_PICO_SHIFT_XY		0x3928
+#define P_HEVC_PSCALE_PICO_SHIFT_XY		DOS_REG_ADDR(HEVC_PSCALE_PICO_SHIFT_XY)
+#define HEVC_PSCALE_CTRL1			0x3929
+#define P_HEVC_PSCALE_CTRL1			DOS_REG_ADDR(HEVC_PSCALE_CTRL1)
+#define HEVC_PSCALE_SRCKEY_CTRL0		0x392a
+#define P_HEVC_PSCALE_SRCKEY_CTRL0		DOS_REG_ADDR(HEVC_PSCALE_SRCKEY_CTRL0)
+#define HEVC_PSCALE_SRCKEY_CTRL1		0x392b
+#define P_HEVC_PSCALE_SRCKEY_CTRL1		DOS_REG_ADDR(HEVC_PSCALE_SRCKEY_CTRL1)
+#define HEVC_PSCALE_CANVAS_RD_ADDR		0x392c
+#define P_HEVC_PSCALE_CANVAS_RD_ADDR		DOS_REG_ADDR(HEVC_PSCALE_CANVAS_RD_ADDR)
+#define HEVC_PSCALE_CANVAS_WR_ADDR		0x392d
+#define P_HEVC_PSCALE_CANVAS_WR_ADDR		DOS_REG_ADDR(HEVC_PSCALE_CANVAS_WR_ADDR)
+#define HEVC_PSCALE_CTRL2			0x392e
+#define P_HEVC_PSCALE_CTRL2			DOS_REG_ADDR(HEVC_PSCALE_CTRL2)
+#define HEVC_HDEC_MC_OMEM_AUTO			0x3930
+#define P_HEVC_HDEC_MC_OMEM_AUTO		DOS_REG_ADDR(HEVC_HDEC_MC_OMEM_AUTO)
+#define HEVC_HDEC_MC_MBRIGHT_IDX		0x3931
+#define P_HEVC_HDEC_MC_MBRIGHT_IDX		DOS_REG_ADDR(HEVC_HDEC_MC_MBRIGHT_IDX)
+#define HEVC_HDEC_MC_MBRIGHT_RD			0x3932
+#define P_HEVC_HDEC_MC_MBRIGHT_RD		DOS_REG_ADDR(HEVC_HDEC_MC_MBRIGHT_RD)
+#define HEVC_MC_MPORT_CTRL			0x3940
+#define P_HEVC_MC_MPORT_CTRL			DOS_REG_ADDR(HEVC_MC_MPORT_CTRL)
+#define HEVC_MC_MPORT_DAT			0x3941
+#define P_HEVC_MC_MPORT_DAT			DOS_REG_ADDR(HEVC_MC_MPORT_DAT)
+#define HEVC_MC_WT_PRED_CTRL			0x3942
+#define P_HEVC_MC_WT_PRED_CTRL			DOS_REG_ADDR(HEVC_MC_WT_PRED_CTRL)
+#define HEVC_MC_MBBOT_ST_EVEN_ADDR		0x3944
+#define P_HEVC_MC_MBBOT_ST_EVEN_ADDR		DOS_REG_ADDR(HEVC_MC_MBBOT_ST_EVEN_ADDR)
+#define HEVC_MC_MBBOT_ST_ODD_ADDR		0x3945
+#define P_HEVC_MC_MBBOT_ST_ODD_ADDR		DOS_REG_ADDR(HEVC_MC_MBBOT_ST_ODD_ADDR)
+#define HEVC_MC_DPDN_MB_XY			0x3946
+#define P_HEVC_MC_DPDN_MB_XY			DOS_REG_ADDR(HEVC_MC_DPDN_MB_XY)
+#define HEVC_MC_OMDN_MB_XY			0x3947
+#define P_HEVC_MC_OMDN_MB_XY			DOS_REG_ADDR(HEVC_MC_OMDN_MB_XY)
+#define HEVC_MC_HCMDBUF_H			0x3948
+#define P_HEVC_MC_HCMDBUF_H			DOS_REG_ADDR(HEVC_MC_HCMDBUF_H)
+#define HEVC_MC_HCMDBUF_L			0x3949
+#define P_HEVC_MC_HCMDBUF_L			DOS_REG_ADDR(HEVC_MC_HCMDBUF_L)
+#define HEVC_MC_HCMD_H				0x394a
+#define P_HEVC_MC_HCMD_H			DOS_REG_ADDR(HEVC_MC_HCMD_H)
+#define HEVC_MC_HCMD_L				0x394b
+#define P_HEVC_MC_HCMD_L			DOS_REG_ADDR(HEVC_MC_HCMD_L)
+#define HEVC_MC_IDCT_DAT			0x394c
+#define P_HEVC_MC_IDCT_DAT			DOS_REG_ADDR(HEVC_MC_IDCT_DAT)
+#define HEVC_MC_CTRL_GCLK_CTRL			0x394d
+#define P_HEVC_MC_CTRL_GCLK_CTRL		DOS_REG_ADDR(HEVC_MC_CTRL_GCLK_CTRL)
+#define HEVC_MC_OTHER_GCLK_CTRL			0x394e
+#define P_HEVC_MC_OTHER_GCLK_CTRL		DOS_REG_ADDR(HEVC_MC_OTHER_GCLK_CTRL)
+#define HEVC_MC_CTRL2				0x394f
+#define P_HEVC_MC_CTRL2				DOS_REG_ADDR(HEVC_MC_CTRL2)
+#define HEVC_MDEC_PIC_DC_CTRL			0x398e
+#define P_HEVC_MDEC_PIC_DC_CTRL			DOS_REG_ADDR(HEVC_MDEC_PIC_DC_CTRL)
+#define HEVC_MDEC_PIC_DC_STATUS			0x398f
+#define P_HEVC_MDEC_PIC_DC_STATUS		DOS_REG_ADDR(HEVC_MDEC_PIC_DC_STATUS)
+#define HEVC_ANC0_CANVAS_ADDR			0x3990
+#define P_HEVC_ANC0_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC0_CANVAS_ADDR)
+#define HEVC_ANC1_CANVAS_ADDR			0x3991
+#define P_HEVC_ANC1_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC1_CANVAS_ADDR)
+#define HEVC_ANC2_CANVAS_ADDR			0x3992
+#define P_HEVC_ANC2_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC2_CANVAS_ADDR)
+#define HEVC_ANC3_CANVAS_ADDR			0x3993
+#define P_HEVC_ANC3_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC3_CANVAS_ADDR)
+#define HEVC_ANC4_CANVAS_ADDR			0x3994
+#define P_HEVC_ANC4_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC4_CANVAS_ADDR)
+#define HEVC_ANC5_CANVAS_ADDR			0x3995
+#define P_HEVC_ANC5_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC5_CANVAS_ADDR)
+#define HEVC_ANC6_CANVAS_ADDR			0x3996
+#define P_HEVC_ANC6_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC6_CANVAS_ADDR)
+#define HEVC_ANC7_CANVAS_ADDR			0x3997
+#define P_HEVC_ANC7_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC7_CANVAS_ADDR)
+#define HEVC_ANC8_CANVAS_ADDR			0x3998
+#define P_HEVC_ANC8_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC8_CANVAS_ADDR)
+#define HEVC_ANC9_CANVAS_ADDR			0x3999
+#define P_HEVC_ANC9_CANVAS_ADDR			DOS_REG_ADDR(HEVC_ANC9_CANVAS_ADDR)
+#define HEVC_ANC10_CANVAS_ADDR			0x399a
+#define P_HEVC_ANC10_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC10_CANVAS_ADDR)
+#define HEVC_ANC11_CANVAS_ADDR			0x399b
+#define P_HEVC_ANC11_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC11_CANVAS_ADDR)
+#define HEVC_ANC12_CANVAS_ADDR			0x399c
+#define P_HEVC_ANC12_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC12_CANVAS_ADDR)
+#define HEVC_ANC13_CANVAS_ADDR			0x399d
+#define P_HEVC_ANC13_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC13_CANVAS_ADDR)
+#define HEVC_ANC14_CANVAS_ADDR			0x399e
+#define P_HEVC_ANC14_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC14_CANVAS_ADDR)
+#define HEVC_ANC15_CANVAS_ADDR			0x399f
+#define P_HEVC_ANC15_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC15_CANVAS_ADDR)
+#define HEVC_ANC16_CANVAS_ADDR			0x39a0
+#define P_HEVC_ANC16_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC16_CANVAS_ADDR)
+#define HEVC_ANC17_CANVAS_ADDR			0x39a1
+#define P_HEVC_ANC17_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC17_CANVAS_ADDR)
+#define HEVC_ANC18_CANVAS_ADDR			0x39a2
+#define P_HEVC_ANC18_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC18_CANVAS_ADDR)
+#define HEVC_ANC19_CANVAS_ADDR			0x39a3
+#define P_HEVC_ANC19_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC19_CANVAS_ADDR)
+#define HEVC_ANC20_CANVAS_ADDR			0x39a4
+#define P_HEVC_ANC20_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC20_CANVAS_ADDR)
+#define HEVC_ANC21_CANVAS_ADDR			0x39a5
+#define P_HEVC_ANC21_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC21_CANVAS_ADDR)
+#define HEVC_ANC22_CANVAS_ADDR			0x39a6
+#define P_HEVC_ANC22_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC22_CANVAS_ADDR)
+#define HEVC_ANC23_CANVAS_ADDR			0x39a7
+#define P_HEVC_ANC23_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC23_CANVAS_ADDR)
+#define HEVC_ANC24_CANVAS_ADDR			0x39a8
+#define P_HEVC_ANC24_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC24_CANVAS_ADDR)
+#define HEVC_ANC25_CANVAS_ADDR			0x39a9
+#define P_HEVC_ANC25_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC25_CANVAS_ADDR)
+#define HEVC_ANC26_CANVAS_ADDR			0x39aa
+#define P_HEVC_ANC26_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC26_CANVAS_ADDR)
+#define HEVC_ANC27_CANVAS_ADDR			0x39ab
+#define P_HEVC_ANC27_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC27_CANVAS_ADDR)
+#define HEVC_ANC28_CANVAS_ADDR			0x39ac
+#define P_HEVC_ANC28_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC28_CANVAS_ADDR)
+#define HEVC_ANC29_CANVAS_ADDR			0x39ad
+#define P_HEVC_ANC29_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC29_CANVAS_ADDR)
+#define HEVC_ANC30_CANVAS_ADDR			0x39ae
+#define P_HEVC_ANC30_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC30_CANVAS_ADDR)
+#define HEVC_ANC31_CANVAS_ADDR			0x39af
+#define P_HEVC_ANC31_CANVAS_ADDR		DOS_REG_ADDR(HEVC_ANC31_CANVAS_ADDR)
+#define HEVC_DBKR_CANVAS_ADDR			0x39b0
+#define P_HEVC_DBKR_CANVAS_ADDR			DOS_REG_ADDR(HEVC_DBKR_CANVAS_ADDR)
+#define HEVC_DBKW_CANVAS_ADDR			0x39b1
+#define P_HEVC_DBKW_CANVAS_ADDR			DOS_REG_ADDR(HEVC_DBKW_CANVAS_ADDR)
+#define HEVC_REC_CANVAS_ADDR			0x39b2
+#define P_HEVC_REC_CANVAS_ADDR			DOS_REG_ADDR(HEVC_REC_CANVAS_ADDR)
+#define HEVC_CURR_CANVAS_CTRL			0x39b3
+#define P_HEVC_CURR_CANVAS_CTRL			DOS_REG_ADDR(HEVC_CURR_CANVAS_CTRL)
+#define HEVC_MDEC_PIC_DC_THRESH			0x39b8
+#define P_HEVC_MDEC_PIC_DC_THRESH		DOS_REG_ADDR(HEVC_MDEC_PIC_DC_THRESH)
+#define HEVC_MDEC_PICR_BUF_STATUS		0x39b9
+#define P_HEVC_MDEC_PICR_BUF_STATUS		DOS_REG_ADDR(HEVC_MDEC_PICR_BUF_STATUS)
+#define HEVC_MDEC_PICW_BUF_STATUS		0x39ba
+#define P_HEVC_MDEC_PICW_BUF_STATUS		DOS_REG_ADDR(HEVC_MDEC_PICW_BUF_STATUS)
+#define HEVC_MCW_DBLK_WRRSP_CNT			0x39bb
+#define P_HEVC_MCW_DBLK_WRRSP_CNT		DOS_REG_ADDR(HEVC_MCW_DBLK_WRRSP_CNT)
+#define HEVC_MC_MBBOT_WRRSP_CNT			0x39bc
+#define P_HEVC_MC_MBBOT_WRRSP_CNT		DOS_REG_ADDR(HEVC_MC_MBBOT_WRRSP_CNT)
+#define HEVC_MDEC_PICW_BUF2_STATUS		0x39bd
+#define P_HEVC_MDEC_PICW_BUF2_STATUS		DOS_REG_ADDR(HEVC_MDEC_PICW_BUF2_STATUS)
+#define HEVC_WRRSP_FIFO_PICW_DBK		0x39be
+#define P_HEVC_WRRSP_FIFO_PICW_DBK		DOS_REG_ADDR(HEVC_WRRSP_FIFO_PICW_DBK)
+#define HEVC_WRRSP_FIFO_PICW_MC			0x39bf
+#define P_HEVC_WRRSP_FIFO_PICW_MC		DOS_REG_ADDR(HEVC_WRRSP_FIFO_PICW_MC)
+#define HEVC_AV_SCRATCH_0			0x39c0
+#define P_HEVC_AV_SCRATCH_0			DOS_REG_ADDR(HEVC_AV_SCRATCH_0)
+#define HEVC_AV_SCRATCH_1			0x39c1
+#define P_HEVC_AV_SCRATCH_1			DOS_REG_ADDR(HEVC_AV_SCRATCH_1)
+#define HEVC_AV_SCRATCH_2			0x39c2
+#define P_HEVC_AV_SCRATCH_2			DOS_REG_ADDR(HEVC_AV_SCRATCH_2)
+#define HEVC_AV_SCRATCH_3			0x39c3
+#define P_HEVC_AV_SCRATCH_3			DOS_REG_ADDR(HEVC_AV_SCRATCH_3)
+#define HEVC_AV_SCRATCH_4			0x39c4
+#define P_HEVC_AV_SCRATCH_4			DOS_REG_ADDR(HEVC_AV_SCRATCH_4)
+#define HEVC_AV_SCRATCH_5			0x39c5
+#define P_HEVC_AV_SCRATCH_5			DOS_REG_ADDR(HEVC_AV_SCRATCH_5)
+#define HEVC_AV_SCRATCH_6			0x39c6
+#define P_HEVC_AV_SCRATCH_6			DOS_REG_ADDR(HEVC_AV_SCRATCH_6)
+#define HEVC_AV_SCRATCH_7			0x39c7
+#define P_HEVC_AV_SCRATCH_7			DOS_REG_ADDR(HEVC_AV_SCRATCH_7)
+#define HEVC_AV_SCRATCH_8			0x39c8
+#define P_HEVC_AV_SCRATCH_8			DOS_REG_ADDR(HEVC_AV_SCRATCH_8)
+#define HEVC_AV_SCRATCH_9			0x39c9
+#define P_HEVC_AV_SCRATCH_9			DOS_REG_ADDR(HEVC_AV_SCRATCH_9)
+#define HEVC_AV_SCRATCH_A			0x39ca
+#define P_HEVC_AV_SCRATCH_A			DOS_REG_ADDR(HEVC_AV_SCRATCH_A)
+#define HEVC_AV_SCRATCH_B			0x39cb
+#define P_HEVC_AV_SCRATCH_B			DOS_REG_ADDR(HEVC_AV_SCRATCH_B)
+#define HEVC_AV_SCRATCH_C			0x39cc
+#define P_HEVC_AV_SCRATCH_C			DOS_REG_ADDR(HEVC_AV_SCRATCH_C)
+#define HEVC_AV_SCRATCH_D			0x39cd
+#define P_HEVC_AV_SCRATCH_D			DOS_REG_ADDR(HEVC_AV_SCRATCH_D)
+#define HEVC_AV_SCRATCH_E			0x39ce
+#define P_HEVC_AV_SCRATCH_E			DOS_REG_ADDR(HEVC_AV_SCRATCH_E)
+#define HEVC_AV_SCRATCH_F			0x39cf
+#define P_HEVC_AV_SCRATCH_F			DOS_REG_ADDR(HEVC_AV_SCRATCH_F)
+#define HEVC_AV_SCRATCH_G			0x39d0
+#define P_HEVC_AV_SCRATCH_G			DOS_REG_ADDR(HEVC_AV_SCRATCH_G)
+#define HEVC_AV_SCRATCH_H			0x39d1
+#define P_HEVC_AV_SCRATCH_H			DOS_REG_ADDR(HEVC_AV_SCRATCH_H)
+#define HEVC_AV_SCRATCH_I			0x39d2
+#define P_HEVC_AV_SCRATCH_I			DOS_REG_ADDR(HEVC_AV_SCRATCH_I)
+#define HEVC_AV_SCRATCH_J			0x39d3
+#define P_HEVC_AV_SCRATCH_J			DOS_REG_ADDR(HEVC_AV_SCRATCH_J)
+#define HEVC_AV_SCRATCH_K			0x39d4
+#define P_HEVC_AV_SCRATCH_K			DOS_REG_ADDR(HEVC_AV_SCRATCH_K)
+#define HEVC_AV_SCRATCH_L			0x39d5
+#define P_HEVC_AV_SCRATCH_L			DOS_REG_ADDR(HEVC_AV_SCRATCH_L)
+#define HEVC_AV_SCRATCH_M			0x39d6
+#define P_HEVC_AV_SCRATCH_M			DOS_REG_ADDR(HEVC_AV_SCRATCH_M)
+#define HEVC_AV_SCRATCH_N			0x39d7
+#define P_HEVC_AV_SCRATCH_N			DOS_REG_ADDR(HEVC_AV_SCRATCH_N)
+#define HEVC_WRRSP_CO_MB			0x39d8
+#define P_HEVC_WRRSP_CO_MB			DOS_REG_ADDR(HEVC_WRRSP_CO_MB)
+#define HEVC_WRRSP_DCAC				0x39d9
+#define P_HEVC_WRRSP_DCAC			DOS_REG_ADDR(HEVC_WRRSP_DCAC)
+#define HEVC_WRRSP_VLD				0x39da
+#define P_HEVC_WRRSP_VLD			DOS_REG_ADDR(HEVC_WRRSP_VLD)
+#define HEVC_MDEC_DOUBLEW_CFG0			0x39db
+#define P_HEVC_MDEC_DOUBLEW_CFG0		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG0)
+#define HEVC_MDEC_DOUBLEW_CFG1			0x39dc
+#define P_HEVC_MDEC_DOUBLEW_CFG1		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG1)
+#define HEVC_MDEC_DOUBLEW_CFG2			0x39dd
+#define P_HEVC_MDEC_DOUBLEW_CFG2		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG2)
+#define HEVC_MDEC_DOUBLEW_CFG3			0x39de
+#define P_HEVC_MDEC_DOUBLEW_CFG3		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG3)
+#define HEVC_MDEC_DOUBLEW_CFG4			0x39df
+#define P_HEVC_MDEC_DOUBLEW_CFG4		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG4)
+#define HEVC_MDEC_DOUBLEW_CFG5			0x39e0
+#define P_HEVC_MDEC_DOUBLEW_CFG5		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG5)
+#define HEVC_MDEC_DOUBLEW_CFG6			0x39e1
+#define P_HEVC_MDEC_DOUBLEW_CFG6		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG6)
+#define HEVC_MDEC_DOUBLEW_CFG7			0x39e2
+#define P_HEVC_MDEC_DOUBLEW_CFG7		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_CFG7)
+#define HEVC_MDEC_DOUBLEW_STATUS		0x39e3
+#define P_HEVC_MDEC_DOUBLEW_STATUS		DOS_REG_ADDR(HEVC_MDEC_DOUBLEW_STATUS)
+#define HEVC_DBLK_RST				0x3950
+#define P_HEVC_DBLK_RST				DOS_REG_ADDR(HEVC_DBLK_RST)
+#define HEVC_DBLK_CTRL				0x3951
+#define P_HEVC_DBLK_CTRL			DOS_REG_ADDR(HEVC_DBLK_CTRL)
+#define HEVC_DBLK_MB_WID_HEIGHT			0x3952
+#define P_HEVC_DBLK_MB_WID_HEIGHT		DOS_REG_ADDR(HEVC_DBLK_MB_WID_HEIGHT)
+#define HEVC_DBLK_STATUS			0x3953
+#define P_HEVC_DBLK_STATUS			DOS_REG_ADDR(HEVC_DBLK_STATUS)
+#define HEVC_DBLK_CMD_CTRL			0x3954
+#define P_HEVC_DBLK_CMD_CTRL			DOS_REG_ADDR(HEVC_DBLK_CMD_CTRL)
+#define HEVC_DBLK_MB_XY				0x3955
+#define P_HEVC_DBLK_MB_XY			DOS_REG_ADDR(HEVC_DBLK_MB_XY)
+#define HEVC_DBLK_QP				0x3956
+#define P_HEVC_DBLK_QP				DOS_REG_ADDR(HEVC_DBLK_QP)
+#define HEVC_DBLK_Y_BHFILT			0x3957
+#define P_HEVC_DBLK_Y_BHFILT			DOS_REG_ADDR(HEVC_DBLK_Y_BHFILT)
+#define HEVC_DBLK_Y_BHFILT_HIGH			0x3958
+#define P_HEVC_DBLK_Y_BHFILT_HIGH		DOS_REG_ADDR(HEVC_DBLK_Y_BHFILT_HIGH)
+#define HEVC_DBLK_Y_BVFILT			0x3959
+#define P_HEVC_DBLK_Y_BVFILT			DOS_REG_ADDR(HEVC_DBLK_Y_BVFILT)
+#define HEVC_DBLK_CB_BFILT			0x395a
+#define P_HEVC_DBLK_CB_BFILT			DOS_REG_ADDR(HEVC_DBLK_CB_BFILT)
+#define HEVC_DBLK_CR_BFILT			0x395b
+#define P_HEVC_DBLK_CR_BFILT			DOS_REG_ADDR(HEVC_DBLK_CR_BFILT)
+#define HEVC_DBLK_Y_HFILT			0x395c
+#define P_HEVC_DBLK_Y_HFILT			DOS_REG_ADDR(HEVC_DBLK_Y_HFILT)
+#define HEVC_DBLK_Y_HFILT_HIGH			0x395d
+#define P_HEVC_DBLK_Y_HFILT_HIGH		DOS_REG_ADDR(HEVC_DBLK_Y_HFILT_HIGH)
+#define HEVC_DBLK_Y_VFILT			0x395e
+#define P_HEVC_DBLK_Y_VFILT			DOS_REG_ADDR(HEVC_DBLK_Y_VFILT)
+#define HEVC_DBLK_CB_FILT			0x395f
+#define P_HEVC_DBLK_CB_FILT			DOS_REG_ADDR(HEVC_DBLK_CB_FILT)
+#define HEVC_DBLK_CR_FILT			0x3960
+#define P_HEVC_DBLK_CR_FILT			DOS_REG_ADDR(HEVC_DBLK_CR_FILT)
+#define HEVC_DBLK_BETAX_QP_SEL			0x3961
+#define P_HEVC_DBLK_BETAX_QP_SEL		DOS_REG_ADDR(HEVC_DBLK_BETAX_QP_SEL)
+#define HEVC_DBLK_CLIP_CTRL0			0x3962
+#define P_HEVC_DBLK_CLIP_CTRL0			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL0)
+#define HEVC_DBLK_CLIP_CTRL1			0x3963
+#define P_HEVC_DBLK_CLIP_CTRL1			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL1)
+#define HEVC_DBLK_CLIP_CTRL2			0x3964
+#define P_HEVC_DBLK_CLIP_CTRL2			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL2)
+#define HEVC_DBLK_CLIP_CTRL3			0x3965
+#define P_HEVC_DBLK_CLIP_CTRL3			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL3)
+#define HEVC_DBLK_CLIP_CTRL4			0x3966
+#define P_HEVC_DBLK_CLIP_CTRL4			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL4)
+#define HEVC_DBLK_CLIP_CTRL5			0x3967
+#define P_HEVC_DBLK_CLIP_CTRL5			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL5)
+#define HEVC_DBLK_CLIP_CTRL6			0x3968
+#define P_HEVC_DBLK_CLIP_CTRL6			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL6)
+#define HEVC_DBLK_CLIP_CTRL7			0x3969
+#define P_HEVC_DBLK_CLIP_CTRL7			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL7)
+#define HEVC_DBLK_CLIP_CTRL8			0x396a
+#define P_HEVC_DBLK_CLIP_CTRL8			DOS_REG_ADDR(HEVC_DBLK_CLIP_CTRL8)
+#define HEVC_DBLK_STATUS1			0x396b
+#define P_HEVC_DBLK_STATUS1			DOS_REG_ADDR(HEVC_DBLK_STATUS1)
+#define HEVC_DBLK_GCLK_FREE			0x396c
+#define P_HEVC_DBLK_GCLK_FREE			DOS_REG_ADDR(HEVC_DBLK_GCLK_FREE)
+#define HEVC_DBLK_GCLK_OFF			0x396d
+#define P_HEVC_DBLK_GCLK_OFF			DOS_REG_ADDR(HEVC_DBLK_GCLK_OFF)
+#define HEVC_DBLK_AVSFLAGS			0x396e
+#define P_HEVC_DBLK_AVSFLAGS			DOS_REG_ADDR(HEVC_DBLK_AVSFLAGS)
+#define HEVC_DBLK_CBPY				0x3970
+#define P_HEVC_DBLK_CBPY			DOS_REG_ADDR(HEVC_DBLK_CBPY)
+#define HEVC_DBLK_CBPY_ADJ			0x3971
+#define P_HEVC_DBLK_CBPY_ADJ			DOS_REG_ADDR(HEVC_DBLK_CBPY_ADJ)
+#define HEVC_DBLK_CBPC				0x3972
+#define P_HEVC_DBLK_CBPC			DOS_REG_ADDR(HEVC_DBLK_CBPC)
+#define HEVC_DBLK_CBPC_ADJ			0x3973
+#define P_HEVC_DBLK_CBPC_ADJ			DOS_REG_ADDR(HEVC_DBLK_CBPC_ADJ)
+#define HEVC_DBLK_VHMVD				0x3974
+#define P_HEVC_DBLK_VHMVD			DOS_REG_ADDR(HEVC_DBLK_VHMVD)
+#define HEVC_DBLK_STRONG			0x3975
+#define P_HEVC_DBLK_STRONG			DOS_REG_ADDR(HEVC_DBLK_STRONG)
+#define HEVC_DBLK_RV8_QUANT			0x3976
+#define P_HEVC_DBLK_RV8_QUANT			DOS_REG_ADDR(HEVC_DBLK_RV8_QUANT)
+#define HEVC_DBLK_CBUS_HCMD2			0x3977
+#define P_HEVC_DBLK_CBUS_HCMD2			DOS_REG_ADDR(HEVC_DBLK_CBUS_HCMD2)
+#define HEVC_DBLK_CBUS_HCMD1			0x3978
+#define P_HEVC_DBLK_CBUS_HCMD1			DOS_REG_ADDR(HEVC_DBLK_CBUS_HCMD1)
+#define HEVC_DBLK_CBUS_HCMD0			0x3979
+#define P_HEVC_DBLK_CBUS_HCMD0			DOS_REG_ADDR(HEVC_DBLK_CBUS_HCMD0)
+#define HEVC_DBLK_VLD_HCMD2			0x397a
+#define P_HEVC_DBLK_VLD_HCMD2			DOS_REG_ADDR(HEVC_DBLK_VLD_HCMD2)
+#define HEVC_DBLK_VLD_HCMD1			0x397b
+#define P_HEVC_DBLK_VLD_HCMD1			DOS_REG_ADDR(HEVC_DBLK_VLD_HCMD1)
+#define HEVC_DBLK_VLD_HCMD0			0x397c
+#define P_HEVC_DBLK_VLD_HCMD0			DOS_REG_ADDR(HEVC_DBLK_VLD_HCMD0)
+#define HEVC_DBLK_OST_YBASE			0x397d
+#define P_HEVC_DBLK_OST_YBASE			DOS_REG_ADDR(HEVC_DBLK_OST_YBASE)
+#define HEVC_DBLK_OST_CBCRDIFF			0x397e
+#define P_HEVC_DBLK_OST_CBCRDIFF		DOS_REG_ADDR(HEVC_DBLK_OST_CBCRDIFF)
+#define HEVC_DBLK_CTRL1				0x397f
+#define P_HEVC_DBLK_CTRL1			DOS_REG_ADDR(HEVC_DBLK_CTRL1)
+#define HEVC_MCRCC_CTL1				0x3980
+#define P_HEVC_MCRCC_CTL1			DOS_REG_ADDR(HEVC_MCRCC_CTL1)
+#define HEVC_MCRCC_CTL2				0x3981
+#define P_HEVC_MCRCC_CTL2			DOS_REG_ADDR(HEVC_MCRCC_CTL2)
+#define HEVC_MCRCC_CTL3				0x3982
+#define P_HEVC_MCRCC_CTL3			DOS_REG_ADDR(HEVC_MCRCC_CTL3)
+#define HEVC_GCLK_EN				0x3983
+#define P_HEVC_GCLK_EN				DOS_REG_ADDR(HEVC_GCLK_EN)
+#define HEVC_MDEC_SW_RESET			0x3984
+#define P_HEVC_MDEC_SW_RESET			DOS_REG_ADDR(HEVC_MDEC_SW_RESET)
+#define HCODEC_VLD_STATUS_CTRL			0x1c00
+#define P_HCODEC_VLD_STATUS_CTRL		DOS_REG_ADDR(HCODEC_VLD_STATUS_CTRL)
+#define HCODEC_MPEG1_2_REG			0x1c01
+#define P_HCODEC_MPEG1_2_REG			DOS_REG_ADDR(HCODEC_MPEG1_2_REG)
+#define HCODEC_F_CODE_REG			0x1c02
+#define P_HCODEC_F_CODE_REG			DOS_REG_ADDR(HCODEC_F_CODE_REG)
+#define HCODEC_PIC_HEAD_INFO			0x1c03
+#define P_HCODEC_PIC_HEAD_INFO			DOS_REG_ADDR(HCODEC_PIC_HEAD_INFO)
+#define HCODEC_SLICE_VER_POS_PIC_TYPE		0x1c04
+#define P_HCODEC_SLICE_VER_POS_PIC_TYPE		DOS_REG_ADDR(HCODEC_SLICE_VER_POS_PIC_TYPE)
+#define HCODEC_QP_VALUE_REG			0x1c05
+#define P_HCODEC_QP_VALUE_REG			DOS_REG_ADDR(HCODEC_QP_VALUE_REG)
+#define HCODEC_MBA_INC				0x1c06
+#define P_HCODEC_MBA_INC			DOS_REG_ADDR(HCODEC_MBA_INC)
+#define HCODEC_MB_MOTION_MODE			0x1c07
+#define P_HCODEC_MB_MOTION_MODE			DOS_REG_ADDR(HCODEC_MB_MOTION_MODE)
+#define HCODEC_POWER_CTL_VLD			0x1c08
+#define P_HCODEC_POWER_CTL_VLD			DOS_REG_ADDR(HCODEC_POWER_CTL_VLD)
+#define HCODEC_MB_WIDTH				0x1c09
+#define P_HCODEC_MB_WIDTH			DOS_REG_ADDR(HCODEC_MB_WIDTH)
+#define HCODEC_SLICE_QP				0x1c0a
+#define P_HCODEC_SLICE_QP			DOS_REG_ADDR(HCODEC_SLICE_QP)
+#define HCODEC_PRE_START_CODE			0x1c0b
+#define P_HCODEC_PRE_START_CODE			DOS_REG_ADDR(HCODEC_PRE_START_CODE)
+#define HCODEC_SLICE_START_BYTE_01		0x1c0c
+#define P_HCODEC_SLICE_START_BYTE_01		DOS_REG_ADDR(HCODEC_SLICE_START_BYTE_01)
+#define HCODEC_SLICE_START_BYTE_23		0x1c0d
+#define P_HCODEC_SLICE_START_BYTE_23		DOS_REG_ADDR(HCODEC_SLICE_START_BYTE_23)
+#define HCODEC_RESYNC_MARKER_LENGTH		0x1c0e
+#define P_HCODEC_RESYNC_MARKER_LENGTH		DOS_REG_ADDR(HCODEC_RESYNC_MARKER_LENGTH)
+#define HCODEC_DECODER_BUFFER_INFO		0x1c0f
+#define P_HCODEC_DECODER_BUFFER_INFO		DOS_REG_ADDR(HCODEC_DECODER_BUFFER_INFO)
+#define HCODEC_FST_FOR_MV_X			0x1c10
+#define P_HCODEC_FST_FOR_MV_X			DOS_REG_ADDR(HCODEC_FST_FOR_MV_X)
+#define HCODEC_FST_FOR_MV_Y			0x1c11
+#define P_HCODEC_FST_FOR_MV_Y			DOS_REG_ADDR(HCODEC_FST_FOR_MV_Y)
+#define HCODEC_SCD_FOR_MV_X			0x1c12
+#define P_HCODEC_SCD_FOR_MV_X			DOS_REG_ADDR(HCODEC_SCD_FOR_MV_X)
+#define HCODEC_SCD_FOR_MV_Y			0x1c13
+#define P_HCODEC_SCD_FOR_MV_Y			DOS_REG_ADDR(HCODEC_SCD_FOR_MV_Y)
+#define HCODEC_FST_BAK_MV_X			0x1c14
+#define P_HCODEC_FST_BAK_MV_X			DOS_REG_ADDR(HCODEC_FST_BAK_MV_X)
+#define HCODEC_FST_BAK_MV_Y			0x1c15
+#define P_HCODEC_FST_BAK_MV_Y			DOS_REG_ADDR(HCODEC_FST_BAK_MV_Y)
+#define HCODEC_SCD_BAK_MV_X			0x1c16
+#define P_HCODEC_SCD_BAK_MV_X			DOS_REG_ADDR(HCODEC_SCD_BAK_MV_X)
+#define HCODEC_SCD_BAK_MV_Y			0x1c17
+#define P_HCODEC_SCD_BAK_MV_Y			DOS_REG_ADDR(HCODEC_SCD_BAK_MV_Y)
+#define HCODEC_VLD_DECODE_CONTROL		0x1c18
+#define P_HCODEC_VLD_DECODE_CONTROL		DOS_REG_ADDR(HCODEC_VLD_DECODE_CONTROL)
+#define HCODEC_VLD_REVERVED_19			0x1c19
+#define P_HCODEC_VLD_REVERVED_19		DOS_REG_ADDR(HCODEC_VLD_REVERVED_19)
+#define HCODEC_VIFF_BIT_CNT			0x1c1a
+#define P_HCODEC_VIFF_BIT_CNT			DOS_REG_ADDR(HCODEC_VIFF_BIT_CNT)
+#define HCODEC_BYTE_ALIGN_PEAK_HI		0x1c1b
+#define P_HCODEC_BYTE_ALIGN_PEAK_HI		DOS_REG_ADDR(HCODEC_BYTE_ALIGN_PEAK_HI)
+#define HCODEC_BYTE_ALIGN_PEAK_LO		0x1c1c
+#define P_HCODEC_BYTE_ALIGN_PEAK_LO		DOS_REG_ADDR(HCODEC_BYTE_ALIGN_PEAK_LO)
+#define HCODEC_NEXT_ALIGN_PEAK			0x1c1d
+#define P_HCODEC_NEXT_ALIGN_PEAK		DOS_REG_ADDR(HCODEC_NEXT_ALIGN_PEAK)
+#define HCODEC_VC1_CONTROL_REG			0x1c1e
+#define P_HCODEC_VC1_CONTROL_REG		DOS_REG_ADDR(HCODEC_VC1_CONTROL_REG)
+#define HCODEC_PMV1_X				0x1c20
+#define P_HCODEC_PMV1_X				DOS_REG_ADDR(HCODEC_PMV1_X)
+#define HCODEC_PMV1_Y				0x1c21
+#define P_HCODEC_PMV1_Y				DOS_REG_ADDR(HCODEC_PMV1_Y)
+#define HCODEC_PMV2_X				0x1c22
+#define P_HCODEC_PMV2_X				DOS_REG_ADDR(HCODEC_PMV2_X)
+#define HCODEC_PMV2_Y				0x1c23
+#define P_HCODEC_PMV2_Y				DOS_REG_ADDR(HCODEC_PMV2_Y)
+#define HCODEC_PMV3_X				0x1c24
+#define P_HCODEC_PMV3_X				DOS_REG_ADDR(HCODEC_PMV3_X)
+#define HCODEC_PMV3_Y				0x1c25
+#define P_HCODEC_PMV3_Y				DOS_REG_ADDR(HCODEC_PMV3_Y)
+#define HCODEC_PMV4_X				0x1c26
+#define P_HCODEC_PMV4_X				DOS_REG_ADDR(HCODEC_PMV4_X)
+#define HCODEC_PMV4_Y				0x1c27
+#define P_HCODEC_PMV4_Y				DOS_REG_ADDR(HCODEC_PMV4_Y)
+#define HCODEC_M4_TABLE_SELECT			0x1c28
+#define P_HCODEC_M4_TABLE_SELECT		DOS_REG_ADDR(HCODEC_M4_TABLE_SELECT)
+#define HCODEC_M4_CONTROL_REG			0x1c29
+#define P_HCODEC_M4_CONTROL_REG			DOS_REG_ADDR(HCODEC_M4_CONTROL_REG)
+#define HCODEC_BLOCK_NUM			0x1c2a
+#define P_HCODEC_BLOCK_NUM			DOS_REG_ADDR(HCODEC_BLOCK_NUM)
+#define HCODEC_PATTERN_CODE			0x1c2b
+#define P_HCODEC_PATTERN_CODE			DOS_REG_ADDR(HCODEC_PATTERN_CODE)
+#define HCODEC_MB_INFO				0x1c2c
+#define P_HCODEC_MB_INFO			DOS_REG_ADDR(HCODEC_MB_INFO)
+#define HCODEC_VLD_DC_PRED			0x1c2d
+#define P_HCODEC_VLD_DC_PRED			DOS_REG_ADDR(HCODEC_VLD_DC_PRED)
+#define HCODEC_VLD_ERROR_MASK			0x1c2e
+#define P_HCODEC_VLD_ERROR_MASK			DOS_REG_ADDR(HCODEC_VLD_ERROR_MASK)
+#define HCODEC_VLD_DC_PRED_C			0x1c2f
+#define P_HCODEC_VLD_DC_PRED_C			DOS_REG_ADDR(HCODEC_VLD_DC_PRED_C)
+#define HCODEC_LAST_SLICE_MV_ADDR		0x1c30
+#define P_HCODEC_LAST_SLICE_MV_ADDR		DOS_REG_ADDR(HCODEC_LAST_SLICE_MV_ADDR)
+#define HCODEC_LAST_MVX				0x1c31
+#define P_HCODEC_LAST_MVX			DOS_REG_ADDR(HCODEC_LAST_MVX)
+#define HCODEC_LAST_MVY				0x1c32
+#define P_HCODEC_LAST_MVY			DOS_REG_ADDR(HCODEC_LAST_MVY)
+#define HCODEC_VLD_C38				0x1c38
+#define P_HCODEC_VLD_C38			DOS_REG_ADDR(HCODEC_VLD_C38)
+#define HCODEC_VLD_C39				0x1c39
+#define P_HCODEC_VLD_C39			DOS_REG_ADDR(HCODEC_VLD_C39)
+#define HCODEC_VLD_STATUS			0x1c3a
+#define P_HCODEC_VLD_STATUS			DOS_REG_ADDR(HCODEC_VLD_STATUS)
+#define HCODEC_VLD_SHIFT_STATUS			0x1c3b
+#define P_HCODEC_VLD_SHIFT_STATUS		DOS_REG_ADDR(HCODEC_VLD_SHIFT_STATUS)
+#define HCODEC_VOFF_STATUS			0x1c3c
+#define P_HCODEC_VOFF_STATUS			DOS_REG_ADDR(HCODEC_VOFF_STATUS)
+#define HCODEC_VLD_C3D				0x1c3d
+#define P_HCODEC_VLD_C3D			DOS_REG_ADDR(HCODEC_VLD_C3D)
+#define HCODEC_VLD_DBG_INDEX			0x1c3e
+#define P_HCODEC_VLD_DBG_INDEX			DOS_REG_ADDR(HCODEC_VLD_DBG_INDEX)
+#define HCODEC_VLD_DBG_DATA			0x1c3f
+#define P_HCODEC_VLD_DBG_DATA			DOS_REG_ADDR(HCODEC_VLD_DBG_DATA)
+#define HCODEC_VLD_MEM_VIFIFO_START_PTR		0x1c40
+#define P_HCODEC_VLD_MEM_VIFIFO_START_PTR	DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_START_PTR)
+#define HCODEC_VLD_MEM_VIFIFO_CURR_PTR		0x1c41
+#define P_HCODEC_VLD_MEM_VIFIFO_CURR_PTR	DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_CURR_PTR)
+#define HCODEC_VLD_MEM_VIFIFO_END_PTR		0x1c42
+#define P_HCODEC_VLD_MEM_VIFIFO_END_PTR		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_END_PTR)
+#define HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL	0x1c43
+#define P_HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL	DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define HCODEC_VLD_MEM_VIFIFO_CONTROL		0x1c44
+#define P_HCODEC_VLD_MEM_VIFIFO_CONTROL		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_CONTROL)
+#define HCODEC_VLD_MEM_VIFIFO_WP		0x1c45
+#define P_HCODEC_VLD_MEM_VIFIFO_WP		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_WP)
+#define HCODEC_VLD_MEM_VIFIFO_RP		0x1c46
+#define P_HCODEC_VLD_MEM_VIFIFO_RP		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_RP)
+#define HCODEC_VLD_MEM_VIFIFO_LEVEL		0x1c47
+#define P_HCODEC_VLD_MEM_VIFIFO_LEVEL		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_LEVEL)
+#define HCODEC_VLD_MEM_VIFIFO_BUF_CNTL		0x1c48
+#define P_HCODEC_VLD_MEM_VIFIFO_BUF_CNTL	DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_BUF_CNTL)
+#define HCODEC_VLD_TIME_STAMP_CNTL		0x1c49
+#define P_HCODEC_VLD_TIME_STAMP_CNTL		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_CNTL)
+#define HCODEC_VLD_TIME_STAMP_SYNC_0		0x1c4a
+#define P_HCODEC_VLD_TIME_STAMP_SYNC_0		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_SYNC_0)
+#define HCODEC_VLD_TIME_STAMP_SYNC_1		0x1c4b
+#define P_HCODEC_VLD_TIME_STAMP_SYNC_1		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_SYNC_1)
+#define HCODEC_VLD_TIME_STAMP_0			0x1c4c
+#define P_HCODEC_VLD_TIME_STAMP_0		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_0)
+#define HCODEC_VLD_TIME_STAMP_1			0x1c4d
+#define P_HCODEC_VLD_TIME_STAMP_1		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_1)
+#define HCODEC_VLD_TIME_STAMP_2			0x1c4e
+#define P_HCODEC_VLD_TIME_STAMP_2		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_2)
+#define HCODEC_VLD_TIME_STAMP_3			0x1c4f
+#define P_HCODEC_VLD_TIME_STAMP_3		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_3)
+#define HCODEC_VLD_TIME_STAMP_LENGTH		0x1c50
+#define P_HCODEC_VLD_TIME_STAMP_LENGTH		DOS_REG_ADDR(HCODEC_VLD_TIME_STAMP_LENGTH)
+#define HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT	0x1c51
+#define P_HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT	DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_WRAP_COUNT)
+#define HCODEC_VLD_MEM_VIFIFO_MEM_CTL		0x1c52
+#define P_HCODEC_VLD_MEM_VIFIFO_MEM_CTL		DOS_REG_ADDR(HCODEC_VLD_MEM_VIFIFO_MEM_CTL)
+#define HCODEC_VLD_MEM_VBUF_RD_PTR		0x1c53
+#define P_HCODEC_VLD_MEM_VBUF_RD_PTR		DOS_REG_ADDR(HCODEC_VLD_MEM_VBUF_RD_PTR)
+#define HCODEC_VLD_MEM_VBUF2_RD_PTR		0x1c54
+#define P_HCODEC_VLD_MEM_VBUF2_RD_PTR		DOS_REG_ADDR(HCODEC_VLD_MEM_VBUF2_RD_PTR)
+#define HCODEC_VLD_MEM_SWAP_ADDR		0x1c55
+#define P_HCODEC_VLD_MEM_SWAP_ADDR		DOS_REG_ADDR(HCODEC_VLD_MEM_SWAP_ADDR)
+#define HCODEC_VLD_MEM_SWAP_CTL			0x1c56
+#define P_HCODEC_VLD_MEM_SWAP_CTL		DOS_REG_ADDR(HCODEC_VLD_MEM_SWAP_CTL)
+#define VDEC2_VLD_STATUS_CTRL			0x2c00
+#define P_VDEC2_VLD_STATUS_CTRL			DOS_REG_ADDR(VDEC2_VLD_STATUS_CTRL)
+#define VDEC2_MPEG1_2_REG			0x2c01
+#define P_VDEC2_MPEG1_2_REG			DOS_REG_ADDR(VDEC2_MPEG1_2_REG)
+#define VDEC2_F_CODE_REG			0x2c02
+#define P_VDEC2_F_CODE_REG			DOS_REG_ADDR(VDEC2_F_CODE_REG)
+#define VDEC2_PIC_HEAD_INFO			0x2c03
+#define P_VDEC2_PIC_HEAD_INFO			DOS_REG_ADDR(VDEC2_PIC_HEAD_INFO)
+#define VDEC2_SLICE_VER_POS_PIC_TYPE		0x2c04
+#define P_VDEC2_SLICE_VER_POS_PIC_TYPE		DOS_REG_ADDR(VDEC2_SLICE_VER_POS_PIC_TYPE)
+#define VDEC2_QP_VALUE_REG			0x2c05
+#define P_VDEC2_QP_VALUE_REG			DOS_REG_ADDR(VDEC2_QP_VALUE_REG)
+#define VDEC2_MBA_INC				0x2c06
+#define P_VDEC2_MBA_INC				DOS_REG_ADDR(VDEC2_MBA_INC)
+#define VDEC2_MB_MOTION_MODE			0x2c07
+#define P_VDEC2_MB_MOTION_MODE			DOS_REG_ADDR(VDEC2_MB_MOTION_MODE)
+#define VDEC2_POWER_CTL_VLD			0x2c08
+#define P_VDEC2_POWER_CTL_VLD			DOS_REG_ADDR(VDEC2_POWER_CTL_VLD)
+#define VDEC2_MB_WIDTH				0x2c09
+#define P_VDEC2_MB_WIDTH			DOS_REG_ADDR(VDEC2_MB_WIDTH)
+#define VDEC2_SLICE_QP				0x2c0a
+#define P_VDEC2_SLICE_QP			DOS_REG_ADDR(VDEC2_SLICE_QP)
+#define VDEC2_PRE_START_CODE			0x2c0b
+#define P_VDEC2_PRE_START_CODE			DOS_REG_ADDR(VDEC2_PRE_START_CODE)
+#define VDEC2_SLICE_START_BYTE_01		0x2c0c
+#define P_VDEC2_SLICE_START_BYTE_01		DOS_REG_ADDR(VDEC2_SLICE_START_BYTE_01)
+#define VDEC2_SLICE_START_BYTE_23		0x2c0d
+#define P_VDEC2_SLICE_START_BYTE_23		DOS_REG_ADDR(VDEC2_SLICE_START_BYTE_23)
+#define VDEC2_RESYNC_MARKER_LENGTH		0x2c0e
+#define P_VDEC2_RESYNC_MARKER_LENGTH		DOS_REG_ADDR(VDEC2_RESYNC_MARKER_LENGTH)
+#define VDEC2_DECODER_BUFFER_INFO		0x2c0f
+#define P_VDEC2_DECODER_BUFFER_INFO		DOS_REG_ADDR(VDEC2_DECODER_BUFFER_INFO)
+#define VDEC2_FST_FOR_MV_X			0x2c10
+#define P_VDEC2_FST_FOR_MV_X			DOS_REG_ADDR(VDEC2_FST_FOR_MV_X)
+#define VDEC2_FST_FOR_MV_Y			0x2c11
+#define P_VDEC2_FST_FOR_MV_Y			DOS_REG_ADDR(VDEC2_FST_FOR_MV_Y)
+#define VDEC2_SCD_FOR_MV_X			0x2c12
+#define P_VDEC2_SCD_FOR_MV_X			DOS_REG_ADDR(VDEC2_SCD_FOR_MV_X)
+#define VDEC2_SCD_FOR_MV_Y			0x2c13
+#define P_VDEC2_SCD_FOR_MV_Y			DOS_REG_ADDR(VDEC2_SCD_FOR_MV_Y)
+#define VDEC2_FST_BAK_MV_X			0x2c14
+#define P_VDEC2_FST_BAK_MV_X			DOS_REG_ADDR(VDEC2_FST_BAK_MV_X)
+#define VDEC2_FST_BAK_MV_Y			0x2c15
+#define P_VDEC2_FST_BAK_MV_Y			DOS_REG_ADDR(VDEC2_FST_BAK_MV_Y)
+#define VDEC2_SCD_BAK_MV_X			0x2c16
+#define P_VDEC2_SCD_BAK_MV_X			DOS_REG_ADDR(VDEC2_SCD_BAK_MV_X)
+#define VDEC2_SCD_BAK_MV_Y			0x2c17
+#define P_VDEC2_SCD_BAK_MV_Y			DOS_REG_ADDR(VDEC2_SCD_BAK_MV_Y)
+#define VDEC2_VLD_DECODE_CONTROL		0x2c18
+#define P_VDEC2_VLD_DECODE_CONTROL		DOS_REG_ADDR(VDEC2_VLD_DECODE_CONTROL)
+#define VDEC2_VLD_REVERVED_19			0x2c19
+#define P_VDEC2_VLD_REVERVED_19			DOS_REG_ADDR(VDEC2_VLD_REVERVED_19)
+#define VDEC2_VIFF_BIT_CNT			0x2c1a
+#define P_VDEC2_VIFF_BIT_CNT			DOS_REG_ADDR(VDEC2_VIFF_BIT_CNT)
+#define VDEC2_BYTE_ALIGN_PEAK_HI		0x2c1b
+#define P_VDEC2_BYTE_ALIGN_PEAK_HI		DOS_REG_ADDR(VDEC2_BYTE_ALIGN_PEAK_HI)
+#define VDEC2_BYTE_ALIGN_PEAK_LO		0x2c1c
+#define P_VDEC2_BYTE_ALIGN_PEAK_LO		DOS_REG_ADDR(VDEC2_BYTE_ALIGN_PEAK_LO)
+#define VDEC2_NEXT_ALIGN_PEAK			0x2c1d
+#define P_VDEC2_NEXT_ALIGN_PEAK			DOS_REG_ADDR(VDEC2_NEXT_ALIGN_PEAK)
+#define VDEC2_VC1_CONTROL_REG			0x2c1e
+#define P_VDEC2_VC1_CONTROL_REG			DOS_REG_ADDR(VDEC2_VC1_CONTROL_REG)
+#define VDEC2_PMV1_X				0x2c20
+#define P_VDEC2_PMV1_X				DOS_REG_ADDR(VDEC2_PMV1_X)
+#define VDEC2_PMV1_Y				0x2c21
+#define P_VDEC2_PMV1_Y				DOS_REG_ADDR(VDEC2_PMV1_Y)
+#define VDEC2_PMV2_X				0x2c22
+#define P_VDEC2_PMV2_X				DOS_REG_ADDR(VDEC2_PMV2_X)
+#define VDEC2_PMV2_Y				0x2c23
+#define P_VDEC2_PMV2_Y				DOS_REG_ADDR(VDEC2_PMV2_Y)
+#define VDEC2_PMV3_X				0x2c24
+#define P_VDEC2_PMV3_X				DOS_REG_ADDR(VDEC2_PMV3_X)
+#define VDEC2_PMV3_Y				0x2c25
+#define P_VDEC2_PMV3_Y				DOS_REG_ADDR(VDEC2_PMV3_Y)
+#define VDEC2_PMV4_X				0x2c26
+#define P_VDEC2_PMV4_X				DOS_REG_ADDR(VDEC2_PMV4_X)
+#define VDEC2_PMV4_Y				0x2c27
+#define P_VDEC2_PMV4_Y				DOS_REG_ADDR(VDEC2_PMV4_Y)
+#define VDEC2_M4_TABLE_SELECT			0x2c28
+#define P_VDEC2_M4_TABLE_SELECT			DOS_REG_ADDR(VDEC2_M4_TABLE_SELECT)
+#define VDEC2_M4_CONTROL_REG			0x2c29
+#define P_VDEC2_M4_CONTROL_REG			DOS_REG_ADDR(VDEC2_M4_CONTROL_REG)
+#define VDEC2_BLOCK_NUM				0x2c2a
+#define P_VDEC2_BLOCK_NUM			DOS_REG_ADDR(VDEC2_BLOCK_NUM)
+#define VDEC2_PATTERN_CODE			0x2c2b
+#define P_VDEC2_PATTERN_CODE			DOS_REG_ADDR(VDEC2_PATTERN_CODE)
+#define VDEC2_MB_INFO				0x2c2c
+#define P_VDEC2_MB_INFO				DOS_REG_ADDR(VDEC2_MB_INFO)
+#define VDEC2_VLD_DC_PRED			0x2c2d
+#define P_VDEC2_VLD_DC_PRED			DOS_REG_ADDR(VDEC2_VLD_DC_PRED)
+#define VDEC2_VLD_ERROR_MASK			0x2c2e
+#define P_VDEC2_VLD_ERROR_MASK			DOS_REG_ADDR(VDEC2_VLD_ERROR_MASK)
+#define VDEC2_VLD_DC_PRED_C			0x2c2f
+#define P_VDEC2_VLD_DC_PRED_C			DOS_REG_ADDR(VDEC2_VLD_DC_PRED_C)
+#define VDEC2_LAST_SLICE_MV_ADDR		0x2c30
+#define P_VDEC2_LAST_SLICE_MV_ADDR		DOS_REG_ADDR(VDEC2_LAST_SLICE_MV_ADDR)
+#define VDEC2_LAST_MVX				0x2c31
+#define P_VDEC2_LAST_MVX			DOS_REG_ADDR(VDEC2_LAST_MVX)
+#define VDEC2_LAST_MVY				0x2c32
+#define P_VDEC2_LAST_MVY			DOS_REG_ADDR(VDEC2_LAST_MVY)
+#define VDEC2_VLD_C38				0x2c38
+#define P_VDEC2_VLD_C38				DOS_REG_ADDR(VDEC2_VLD_C38)
+#define VDEC2_VLD_C39				0x2c39
+#define P_VDEC2_VLD_C39				DOS_REG_ADDR(VDEC2_VLD_C39)
+#define VDEC2_VLD_STATUS			0x2c3a
+#define P_VDEC2_VLD_STATUS			DOS_REG_ADDR(VDEC2_VLD_STATUS)
+#define VDEC2_VLD_SHIFT_STATUS			0x2c3b
+#define P_VDEC2_VLD_SHIFT_STATUS		DOS_REG_ADDR(VDEC2_VLD_SHIFT_STATUS)
+#define VDEC2_VOFF_STATUS			0x2c3c
+#define P_VDEC2_VOFF_STATUS			DOS_REG_ADDR(VDEC2_VOFF_STATUS)
+#define VDEC2_VLD_C3D				0x2c3d
+#define P_VDEC2_VLD_C3D				DOS_REG_ADDR(VDEC2_VLD_C3D)
+#define VDEC2_VLD_DBG_INDEX			0x2c3e
+#define P_VDEC2_VLD_DBG_INDEX			DOS_REG_ADDR(VDEC2_VLD_DBG_INDEX)
+#define VDEC2_VLD_DBG_DATA			0x2c3f
+#define P_VDEC2_VLD_DBG_DATA			DOS_REG_ADDR(VDEC2_VLD_DBG_DATA)
+#define VDEC2_VLD_MEM_VIFIFO_START_PTR		0x2c40
+#define P_VDEC2_VLD_MEM_VIFIFO_START_PTR	DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_START_PTR)
+#define VDEC2_VLD_MEM_VIFIFO_CURR_PTR		0x2c41
+#define P_VDEC2_VLD_MEM_VIFIFO_CURR_PTR		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_CURR_PTR)
+#define VDEC2_VLD_MEM_VIFIFO_END_PTR		0x2c42
+#define P_VDEC2_VLD_MEM_VIFIFO_END_PTR		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_END_PTR)
+#define VDEC2_VLD_MEM_VIFIFO_BYTES_AVAIL	0x2c43
+#define P_VDEC2_VLD_MEM_VIFIFO_BYTES_AVAIL	DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define VDEC2_VLD_MEM_VIFIFO_CONTROL		0x2c44
+#define P_VDEC2_VLD_MEM_VIFIFO_CONTROL		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_CONTROL)
+#define VDEC2_VLD_MEM_VIFIFO_WP			0x2c45
+#define P_VDEC2_VLD_MEM_VIFIFO_WP		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_WP)
+#define VDEC2_VLD_MEM_VIFIFO_RP			0x2c46
+#define P_VDEC2_VLD_MEM_VIFIFO_RP		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_RP)
+#define VDEC2_VLD_MEM_VIFIFO_LEVEL		0x2c47
+#define P_VDEC2_VLD_MEM_VIFIFO_LEVEL		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_LEVEL)
+#define VDEC2_VLD_MEM_VIFIFO_BUF_CNTL		0x2c48
+#define P_VDEC2_VLD_MEM_VIFIFO_BUF_CNTL		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_BUF_CNTL)
+#define VDEC2_VLD_TIME_STAMP_CNTL		0x2c49
+#define P_VDEC2_VLD_TIME_STAMP_CNTL		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_CNTL)
+#define VDEC2_VLD_TIME_STAMP_SYNC_0		0x2c4a
+#define P_VDEC2_VLD_TIME_STAMP_SYNC_0		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_SYNC_0)
+#define VDEC2_VLD_TIME_STAMP_SYNC_1		0x2c4b
+#define P_VDEC2_VLD_TIME_STAMP_SYNC_1		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_SYNC_1)
+#define VDEC2_VLD_TIME_STAMP_0			0x2c4c
+#define P_VDEC2_VLD_TIME_STAMP_0		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_0)
+#define VDEC2_VLD_TIME_STAMP_1			0x2c4d
+#define P_VDEC2_VLD_TIME_STAMP_1		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_1)
+#define VDEC2_VLD_TIME_STAMP_2			0x2c4e
+#define P_VDEC2_VLD_TIME_STAMP_2		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_2)
+#define VDEC2_VLD_TIME_STAMP_3			0x2c4f
+#define P_VDEC2_VLD_TIME_STAMP_3		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_3)
+#define VDEC2_VLD_TIME_STAMP_LENGTH		0x2c50
+#define P_VDEC2_VLD_TIME_STAMP_LENGTH		DOS_REG_ADDR(VDEC2_VLD_TIME_STAMP_LENGTH)
+#define VDEC2_VLD_MEM_VIFIFO_WRAP_COUNT		0x2c51
+#define P_VDEC2_VLD_MEM_VIFIFO_WRAP_COUNT	DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_WRAP_COUNT)
+#define VDEC2_VLD_MEM_VIFIFO_MEM_CTL		0x2c52
+#define P_VDEC2_VLD_MEM_VIFIFO_MEM_CTL		DOS_REG_ADDR(VDEC2_VLD_MEM_VIFIFO_MEM_CTL)
+#define VDEC2_VLD_MEM_VBUF_RD_PTR		0x2c53
+#define P_VDEC2_VLD_MEM_VBUF_RD_PTR		DOS_REG_ADDR(VDEC2_VLD_MEM_VBUF_RD_PTR)
+#define VDEC2_VLD_MEM_VBUF2_RD_PTR		0x2c54
+#define P_VDEC2_VLD_MEM_VBUF2_RD_PTR		DOS_REG_ADDR(VDEC2_VLD_MEM_VBUF2_RD_PTR)
+#define VDEC2_VLD_MEM_SWAP_ADDR			0x2c55
+#define P_VDEC2_VLD_MEM_SWAP_ADDR		DOS_REG_ADDR(VDEC2_VLD_MEM_SWAP_ADDR)
+#define VDEC2_VLD_MEM_SWAP_CTL			0x2c56
+#define P_VDEC2_VLD_MEM_SWAP_CTL		DOS_REG_ADDR(VDEC2_VLD_MEM_SWAP_CTL)
+#define HEVC_VLD_STATUS_CTRL			0x3c00
+#define P_HEVC_VLD_STATUS_CTRL			DOS_REG_ADDR(HEVC_VLD_STATUS_CTRL)
+#define HEVC_MPEG1_2_REG			0x3c01
+#define P_HEVC_MPEG1_2_REG			DOS_REG_ADDR(HEVC_MPEG1_2_REG)
+#define HEVC_F_CODE_REG				0x3c02
+#define P_HEVC_F_CODE_REG			DOS_REG_ADDR(HEVC_F_CODE_REG)
+#define HEVC_PIC_HEAD_INFO			0x3c03
+#define P_HEVC_PIC_HEAD_INFO			DOS_REG_ADDR(HEVC_PIC_HEAD_INFO)
+#define HEVC_SLICE_VER_POS_PIC_TYPE		0x3c04
+#define P_HEVC_SLICE_VER_POS_PIC_TYPE		DOS_REG_ADDR(HEVC_SLICE_VER_POS_PIC_TYPE)
+#define HEVC_QP_VALUE_REG			0x3c05
+#define P_HEVC_QP_VALUE_REG			DOS_REG_ADDR(HEVC_QP_VALUE_REG)
+#define HEVC_MBA_INC				0x3c06
+#define P_HEVC_MBA_INC				DOS_REG_ADDR(HEVC_MBA_INC)
+#define HEVC_MB_MOTION_MODE			0x3c07
+#define P_HEVC_MB_MOTION_MODE			DOS_REG_ADDR(HEVC_MB_MOTION_MODE)
+#define HEVC_POWER_CTL_VLD			0x3c08
+#define P_HEVC_POWER_CTL_VLD			DOS_REG_ADDR(HEVC_POWER_CTL_VLD)
+#define HEVC_MB_WIDTH				0x3c09
+#define P_HEVC_MB_WIDTH				DOS_REG_ADDR(HEVC_MB_WIDTH)
+#define HEVC_SLICE_QP				0x3c0a
+#define P_HEVC_SLICE_QP				DOS_REG_ADDR(HEVC_SLICE_QP)
+#define HEVC_PRE_START_CODE			0x3c0b
+#define P_HEVC_PRE_START_CODE			DOS_REG_ADDR(HEVC_PRE_START_CODE)
+#define HEVC_SLICE_START_BYTE_01		0x3c0c
+#define P_HEVC_SLICE_START_BYTE_01		DOS_REG_ADDR(HEVC_SLICE_START_BYTE_01)
+#define HEVC_SLICE_START_BYTE_23		0x3c0d
+#define P_HEVC_SLICE_START_BYTE_23		DOS_REG_ADDR(HEVC_SLICE_START_BYTE_23)
+#define HEVC_RESYNC_MARKER_LENGTH		0x3c0e
+#define P_HEVC_RESYNC_MARKER_LENGTH		DOS_REG_ADDR(HEVC_RESYNC_MARKER_LENGTH)
+#define HEVC_DECODER_BUFFER_INFO		0x3c0f
+#define P_HEVC_DECODER_BUFFER_INFO		DOS_REG_ADDR(HEVC_DECODER_BUFFER_INFO)
+#define HEVC_FST_FOR_MV_X			0x3c10
+#define P_HEVC_FST_FOR_MV_X			DOS_REG_ADDR(HEVC_FST_FOR_MV_X)
+#define HEVC_FST_FOR_MV_Y			0x3c11
+#define P_HEVC_FST_FOR_MV_Y			DOS_REG_ADDR(HEVC_FST_FOR_MV_Y)
+#define HEVC_SCD_FOR_MV_X			0x3c12
+#define P_HEVC_SCD_FOR_MV_X			DOS_REG_ADDR(HEVC_SCD_FOR_MV_X)
+#define HEVC_SCD_FOR_MV_Y			0x3c13
+#define P_HEVC_SCD_FOR_MV_Y			DOS_REG_ADDR(HEVC_SCD_FOR_MV_Y)
+#define HEVC_FST_BAK_MV_X			0x3c14
+#define P_HEVC_FST_BAK_MV_X			DOS_REG_ADDR(HEVC_FST_BAK_MV_X)
+#define HEVC_FST_BAK_MV_Y			0x3c15
+#define P_HEVC_FST_BAK_MV_Y			DOS_REG_ADDR(HEVC_FST_BAK_MV_Y)
+#define HEVC_SCD_BAK_MV_X			0x3c16
+#define P_HEVC_SCD_BAK_MV_X			DOS_REG_ADDR(HEVC_SCD_BAK_MV_X)
+#define HEVC_SCD_BAK_MV_Y			0x3c17
+#define P_HEVC_SCD_BAK_MV_Y			DOS_REG_ADDR(HEVC_SCD_BAK_MV_Y)
+#define HEVC_VLD_DECODE_CONTROL			0x3c18
+#define P_HEVC_VLD_DECODE_CONTROL		DOS_REG_ADDR(HEVC_VLD_DECODE_CONTROL)
+#define HEVC_VLD_REVERVED_19			0x3c19
+#define P_HEVC_VLD_REVERVED_19			DOS_REG_ADDR(HEVC_VLD_REVERVED_19)
+#define HEVC_VIFF_BIT_CNT			0x3c1a
+#define P_HEVC_VIFF_BIT_CNT			DOS_REG_ADDR(HEVC_VIFF_BIT_CNT)
+#define HEVC_BYTE_ALIGN_PEAK_HI			0x3c1b
+#define P_HEVC_BYTE_ALIGN_PEAK_HI		DOS_REG_ADDR(HEVC_BYTE_ALIGN_PEAK_HI)
+#define HEVC_BYTE_ALIGN_PEAK_LO			0x3c1c
+#define P_HEVC_BYTE_ALIGN_PEAK_LO		DOS_REG_ADDR(HEVC_BYTE_ALIGN_PEAK_LO)
+#define HEVC_NEXT_ALIGN_PEAK			0x3c1d
+#define P_HEVC_NEXT_ALIGN_PEAK			DOS_REG_ADDR(HEVC_NEXT_ALIGN_PEAK)
+#define HEVC_VC1_CONTROL_REG			0x3c1e
+#define P_HEVC_VC1_CONTROL_REG			DOS_REG_ADDR(HEVC_VC1_CONTROL_REG)
+#define HEVC_PMV1_X				0x3c20
+#define P_HEVC_PMV1_X				DOS_REG_ADDR(HEVC_PMV1_X)
+#define HEVC_PMV1_Y				0x3c21
+#define P_HEVC_PMV1_Y				DOS_REG_ADDR(HEVC_PMV1_Y)
+#define HEVC_PMV2_X				0x3c22
+#define P_HEVC_PMV2_X				DOS_REG_ADDR(HEVC_PMV2_X)
+#define HEVC_PMV2_Y				0x3c23
+#define P_HEVC_PMV2_Y				DOS_REG_ADDR(HEVC_PMV2_Y)
+#define HEVC_PMV3_X				0x3c24
+#define P_HEVC_PMV3_X				DOS_REG_ADDR(HEVC_PMV3_X)
+#define HEVC_PMV3_Y				0x3c25
+#define P_HEVC_PMV3_Y				DOS_REG_ADDR(HEVC_PMV3_Y)
+#define HEVC_PMV4_X				0x3c26
+#define P_HEVC_PMV4_X				DOS_REG_ADDR(HEVC_PMV4_X)
+#define HEVC_PMV4_Y				0x3c27
+#define P_HEVC_PMV4_Y				DOS_REG_ADDR(HEVC_PMV4_Y)
+#define HEVC_M4_TABLE_SELECT			0x3c28
+#define P_HEVC_M4_TABLE_SELECT			DOS_REG_ADDR(HEVC_M4_TABLE_SELECT)
+#define HEVC_M4_CONTROL_REG			0x3c29
+#define P_HEVC_M4_CONTROL_REG			DOS_REG_ADDR(HEVC_M4_CONTROL_REG)
+#define HEVC_BLOCK_NUM				0x3c2a
+#define P_HEVC_BLOCK_NUM			DOS_REG_ADDR(HEVC_BLOCK_NUM)
+#define HEVC_PATTERN_CODE			0x3c2b
+#define P_HEVC_PATTERN_CODE			DOS_REG_ADDR(HEVC_PATTERN_CODE)
+#define HEVC_MB_INFO				0x3c2c
+#define P_HEVC_MB_INFO				DOS_REG_ADDR(HEVC_MB_INFO)
+#define HEVC_VLD_DC_PRED			0x3c2d
+#define P_HEVC_VLD_DC_PRED			DOS_REG_ADDR(HEVC_VLD_DC_PRED)
+#define HEVC_VLD_ERROR_MASK			0x3c2e
+#define P_HEVC_VLD_ERROR_MASK			DOS_REG_ADDR(HEVC_VLD_ERROR_MASK)
+#define HEVC_VLD_DC_PRED_C			0x3c2f
+#define P_HEVC_VLD_DC_PRED_C			DOS_REG_ADDR(HEVC_VLD_DC_PRED_C)
+#define HEVC_LAST_SLICE_MV_ADDR			0x3c30
+#define P_HEVC_LAST_SLICE_MV_ADDR		DOS_REG_ADDR(HEVC_LAST_SLICE_MV_ADDR)
+#define HEVC_LAST_MVX				0x3c31
+#define P_HEVC_LAST_MVX				DOS_REG_ADDR(HEVC_LAST_MVX)
+#define HEVC_LAST_MVY				0x3c32
+#define P_HEVC_LAST_MVY				DOS_REG_ADDR(HEVC_LAST_MVY)
+#define HEVC_VLD_C38				0x3c38
+#define P_HEVC_VLD_C38				DOS_REG_ADDR(HEVC_VLD_C38)
+#define HEVC_VLD_C39				0x3c39
+#define P_HEVC_VLD_C39				DOS_REG_ADDR(HEVC_VLD_C39)
+#define HEVC_VLD_STATUS				0x3c3a
+#define P_HEVC_VLD_STATUS			DOS_REG_ADDR(HEVC_VLD_STATUS)
+#define HEVC_VLD_SHIFT_STATUS			0x3c3b
+#define P_HEVC_VLD_SHIFT_STATUS			DOS_REG_ADDR(HEVC_VLD_SHIFT_STATUS)
+#define HEVC_VOFF_STATUS			0x3c3c
+#define P_HEVC_VOFF_STATUS			DOS_REG_ADDR(HEVC_VOFF_STATUS)
+#define HEVC_VLD_C3D				0x3c3d
+#define P_HEVC_VLD_C3D				DOS_REG_ADDR(HEVC_VLD_C3D)
+#define HEVC_VLD_DBG_INDEX			0x3c3e
+#define P_HEVC_VLD_DBG_INDEX			DOS_REG_ADDR(HEVC_VLD_DBG_INDEX)
+#define HEVC_VLD_DBG_DATA			0x3c3f
+#define P_HEVC_VLD_DBG_DATA			DOS_REG_ADDR(HEVC_VLD_DBG_DATA)
+#define HEVC_VLD_MEM_VIFIFO_START_PTR		0x3c40
+#define P_HEVC_VLD_MEM_VIFIFO_START_PTR		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_START_PTR)
+#define HEVC_VLD_MEM_VIFIFO_CURR_PTR		0x3c41
+#define P_HEVC_VLD_MEM_VIFIFO_CURR_PTR		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_CURR_PTR)
+#define HEVC_VLD_MEM_VIFIFO_END_PTR		0x3c42
+#define P_HEVC_VLD_MEM_VIFIFO_END_PTR		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_END_PTR)
+#define HEVC_VLD_MEM_VIFIFO_BYTES_AVAIL		0x3c43
+#define P_HEVC_VLD_MEM_VIFIFO_BYTES_AVAIL	DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_BYTES_AVAIL)
+#define HEVC_VLD_MEM_VIFIFO_CONTROL		0x3c44
+#define P_HEVC_VLD_MEM_VIFIFO_CONTROL		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_CONTROL)
+#define HEVC_VLD_MEM_VIFIFO_WP			0x3c45
+#define P_HEVC_VLD_MEM_VIFIFO_WP		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_WP)
+#define HEVC_VLD_MEM_VIFIFO_RP			0x3c46
+#define P_HEVC_VLD_MEM_VIFIFO_RP		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_RP)
+#define HEVC_VLD_MEM_VIFIFO_LEVEL		0x3c47
+#define P_HEVC_VLD_MEM_VIFIFO_LEVEL		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_LEVEL)
+#define HEVC_VLD_MEM_VIFIFO_BUF_CNTL		0x3c48
+#define P_HEVC_VLD_MEM_VIFIFO_BUF_CNTL		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_BUF_CNTL)
+#define HEVC_VLD_TIME_STAMP_CNTL		0x3c49
+#define P_HEVC_VLD_TIME_STAMP_CNTL		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_CNTL)
+#define HEVC_VLD_TIME_STAMP_SYNC_0		0x3c4a
+#define P_HEVC_VLD_TIME_STAMP_SYNC_0		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_SYNC_0)
+#define HEVC_VLD_TIME_STAMP_SYNC_1		0x3c4b
+#define P_HEVC_VLD_TIME_STAMP_SYNC_1		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_SYNC_1)
+#define HEVC_VLD_TIME_STAMP_0			0x3c4c
+#define P_HEVC_VLD_TIME_STAMP_0			DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_0)
+#define HEVC_VLD_TIME_STAMP_1			0x3c4d
+#define P_HEVC_VLD_TIME_STAMP_1			DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_1)
+#define HEVC_VLD_TIME_STAMP_2			0x3c4e
+#define P_HEVC_VLD_TIME_STAMP_2			DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_2)
+#define HEVC_VLD_TIME_STAMP_3			0x3c4f
+#define P_HEVC_VLD_TIME_STAMP_3			DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_3)
+#define HEVC_VLD_TIME_STAMP_LENGTH		0x3c50
+#define P_HEVC_VLD_TIME_STAMP_LENGTH		DOS_REG_ADDR(HEVC_VLD_TIME_STAMP_LENGTH)
+#define HEVC_VLD_MEM_VIFIFO_WRAP_COUNT		0x3c51
+#define P_HEVC_VLD_MEM_VIFIFO_WRAP_COUNT	DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_WRAP_COUNT)
+#define HEVC_VLD_MEM_VIFIFO_MEM_CTL		0x3c52
+#define P_HEVC_VLD_MEM_VIFIFO_MEM_CTL		DOS_REG_ADDR(HEVC_VLD_MEM_VIFIFO_MEM_CTL)
+#define HEVC_VLD_MEM_VBUF_RD_PTR		0x3c53
+#define P_HEVC_VLD_MEM_VBUF_RD_PTR		DOS_REG_ADDR(HEVC_VLD_MEM_VBUF_RD_PTR)
+#define HEVC_VLD_MEM_VBUF2_RD_PTR		0x3c54
+#define P_HEVC_VLD_MEM_VBUF2_RD_PTR		DOS_REG_ADDR(HEVC_VLD_MEM_VBUF2_RD_PTR)
+#define HEVC_VLD_MEM_SWAP_ADDR			0x3c55
+#define P_HEVC_VLD_MEM_SWAP_ADDR		DOS_REG_ADDR(HEVC_VLD_MEM_SWAP_ADDR)
+#define HEVC_VLD_MEM_SWAP_CTL			0x3c56
+#define P_HEVC_VLD_MEM_SWAP_CTL			DOS_REG_ADDR(HEVC_VLD_MEM_SWAP_CTL)
+#define HCODEC_VCOP_CTRL_REG			0x1e00
+#define P_HCODEC_VCOP_CTRL_REG			DOS_REG_ADDR(HCODEC_VCOP_CTRL_REG)
+#define HCODEC_QP_CTRL_REG			0x1e01
+#define P_HCODEC_QP_CTRL_REG			DOS_REG_ADDR(HCODEC_QP_CTRL_REG)
+#define HCODEC_INTRA_QUANT_MATRIX		0x1e02
+#define P_HCODEC_INTRA_QUANT_MATRIX		DOS_REG_ADDR(HCODEC_INTRA_QUANT_MATRIX)
+#define HCODEC_NON_I_QUANT_MATRIX		0x1e03
+#define P_HCODEC_NON_I_QUANT_MATRIX		DOS_REG_ADDR(HCODEC_NON_I_QUANT_MATRIX)
+#define HCODEC_DC_SCALER			0x1e04
+#define P_HCODEC_DC_SCALER			DOS_REG_ADDR(HCODEC_DC_SCALER)
+#define HCODEC_DC_AC_CTRL			0x1e05
+#define P_HCODEC_DC_AC_CTRL			DOS_REG_ADDR(HCODEC_DC_AC_CTRL)
+#define HCODEC_DC_AC_SCALE_MUL			0x1e06
+#define P_HCODEC_DC_AC_SCALE_MUL		DOS_REG_ADDR(HCODEC_DC_AC_SCALE_MUL)
+#define HCODEC_DC_AC_SCALE_DIV			0x1e07
+#define P_HCODEC_DC_AC_SCALE_DIV		DOS_REG_ADDR(HCODEC_DC_AC_SCALE_DIV)
+#define HCODEC_POWER_CTL_IQIDCT			0x1e08
+#define P_HCODEC_POWER_CTL_IQIDCT		DOS_REG_ADDR(HCODEC_POWER_CTL_IQIDCT)
+#define HCODEC_RV_AI_Y_X			0x1e09
+#define P_HCODEC_RV_AI_Y_X			DOS_REG_ADDR(HCODEC_RV_AI_Y_X)
+#define HCODEC_RV_AI_U_X			0x1e0a
+#define P_HCODEC_RV_AI_U_X			DOS_REG_ADDR(HCODEC_RV_AI_U_X)
+#define HCODEC_RV_AI_V_X			0x1e0b
+#define P_HCODEC_RV_AI_V_X			DOS_REG_ADDR(HCODEC_RV_AI_V_X)
+#define HCODEC_RV_AI_MB_COUNT			0x1e0c
+#define P_HCODEC_RV_AI_MB_COUNT			DOS_REG_ADDR(HCODEC_RV_AI_MB_COUNT)
+#define HCODEC_NEXT_INTRA_DMA_ADDRESS		0x1e0d
+#define P_HCODEC_NEXT_INTRA_DMA_ADDRESS		DOS_REG_ADDR(HCODEC_NEXT_INTRA_DMA_ADDRESS)
+#define HCODEC_IQIDCT_CONTROL			0x1e0e
+#define P_HCODEC_IQIDCT_CONTROL			DOS_REG_ADDR(HCODEC_IQIDCT_CONTROL)
+#define HCODEC_IQIDCT_DEBUG_INFO_0		0x1e0f
+#define P_HCODEC_IQIDCT_DEBUG_INFO_0		DOS_REG_ADDR(HCODEC_IQIDCT_DEBUG_INFO_0)
+#define HCODEC_DEBLK_CMD			0x1e10
+#define P_HCODEC_DEBLK_CMD			DOS_REG_ADDR(HCODEC_DEBLK_CMD)
+#define HCODEC_IQIDCT_DEBUG_IDCT		0x1e11
+#define P_HCODEC_IQIDCT_DEBUG_IDCT		DOS_REG_ADDR(HCODEC_IQIDCT_DEBUG_IDCT)
+#define HCODEC_DCAC_DMA_CTRL			0x1e12
+#define P_HCODEC_DCAC_DMA_CTRL			DOS_REG_ADDR(HCODEC_DCAC_DMA_CTRL)
+#define HCODEC_DCAC_DMA_ADDRESS			0x1e13
+#define P_HCODEC_DCAC_DMA_ADDRESS		DOS_REG_ADDR(HCODEC_DCAC_DMA_ADDRESS)
+#define HCODEC_DCAC_CPU_ADDRESS			0x1e14
+#define P_HCODEC_DCAC_CPU_ADDRESS		DOS_REG_ADDR(HCODEC_DCAC_CPU_ADDRESS)
+#define HCODEC_DCAC_CPU_DATA			0x1e15
+#define P_HCODEC_DCAC_CPU_DATA			DOS_REG_ADDR(HCODEC_DCAC_CPU_DATA)
+#define HCODEC_DCAC_MB_COUNT			0x1e16
+#define P_HCODEC_DCAC_MB_COUNT			DOS_REG_ADDR(HCODEC_DCAC_MB_COUNT)
+#define HCODEC_IQ_QUANT				0x1e17
+#define P_HCODEC_IQ_QUANT			DOS_REG_ADDR(HCODEC_IQ_QUANT)
+#define HCODEC_VC1_BITPLANE_CTL			0x1e18
+#define P_HCODEC_VC1_BITPLANE_CTL		DOS_REG_ADDR(HCODEC_VC1_BITPLANE_CTL)
+#define VDEC2_VCOP_CTRL_REG			0x2e00
+#define P_VDEC2_VCOP_CTRL_REG			DOS_REG_ADDR(VDEC2_VCOP_CTRL_REG)
+#define VDEC2_QP_CTRL_REG			0x2e01
+#define P_VDEC2_QP_CTRL_REG			DOS_REG_ADDR(VDEC2_QP_CTRL_REG)
+#define VDEC2_INTRA_QUANT_MATRIX		0x2e02
+#define P_VDEC2_INTRA_QUANT_MATRIX		DOS_REG_ADDR(VDEC2_INTRA_QUANT_MATRIX)
+#define VDEC2_NON_I_QUANT_MATRIX		0x2e03
+#define P_VDEC2_NON_I_QUANT_MATRIX		DOS_REG_ADDR(VDEC2_NON_I_QUANT_MATRIX)
+#define VDEC2_DC_SCALER				0x2e04
+#define P_VDEC2_DC_SCALER			DOS_REG_ADDR(VDEC2_DC_SCALER)
+#define VDEC2_DC_AC_CTRL			0x2e05
+#define P_VDEC2_DC_AC_CTRL			DOS_REG_ADDR(VDEC2_DC_AC_CTRL)
+#define VDEC2_DC_AC_SCALE_MUL			0x2e06
+#define P_VDEC2_DC_AC_SCALE_MUL			DOS_REG_ADDR(VDEC2_DC_AC_SCALE_MUL)
+#define VDEC2_DC_AC_SCALE_DIV			0x2e07
+#define P_VDEC2_DC_AC_SCALE_DIV			DOS_REG_ADDR(VDEC2_DC_AC_SCALE_DIV)
+#define VDEC2_POWER_CTL_IQIDCT			0x2e08
+#define P_VDEC2_POWER_CTL_IQIDCT		DOS_REG_ADDR(VDEC2_POWER_CTL_IQIDCT)
+#define VDEC2_RV_AI_Y_X				0x2e09
+#define P_VDEC2_RV_AI_Y_X			DOS_REG_ADDR(VDEC2_RV_AI_Y_X)
+#define VDEC2_RV_AI_U_X				0x2e0a
+#define P_VDEC2_RV_AI_U_X			DOS_REG_ADDR(VDEC2_RV_AI_U_X)
+#define VDEC2_RV_AI_V_X				0x2e0b
+#define P_VDEC2_RV_AI_V_X			DOS_REG_ADDR(VDEC2_RV_AI_V_X)
+#define VDEC2_RV_AI_MB_COUNT			0x2e0c
+#define P_VDEC2_RV_AI_MB_COUNT			DOS_REG_ADDR(VDEC2_RV_AI_MB_COUNT)
+#define VDEC2_NEXT_INTRA_DMA_ADDRESS		0x2e0d
+#define P_VDEC2_NEXT_INTRA_DMA_ADDRESS		DOS_REG_ADDR(VDEC2_NEXT_INTRA_DMA_ADDRESS)
+#define VDEC2_IQIDCT_CONTROL			0x2e0e
+#define P_VDEC2_IQIDCT_CONTROL			DOS_REG_ADDR(VDEC2_IQIDCT_CONTROL)
+#define VDEC2_IQIDCT_DEBUG_INFO_0		0x2e0f
+#define P_VDEC2_IQIDCT_DEBUG_INFO_0		DOS_REG_ADDR(VDEC2_IQIDCT_DEBUG_INFO_0)
+#define VDEC2_DEBLK_CMD				0x2e10
+#define P_VDEC2_DEBLK_CMD			DOS_REG_ADDR(VDEC2_DEBLK_CMD)
+#define VDEC2_IQIDCT_DEBUG_IDCT			0x2e11
+#define P_VDEC2_IQIDCT_DEBUG_IDCT		DOS_REG_ADDR(VDEC2_IQIDCT_DEBUG_IDCT)
+#define VDEC2_DCAC_DMA_CTRL			0x2e12
+#define P_VDEC2_DCAC_DMA_CTRL			DOS_REG_ADDR(VDEC2_DCAC_DMA_CTRL)
+#define VDEC2_DCAC_DMA_ADDRESS			0x2e13
+#define P_VDEC2_DCAC_DMA_ADDRESS		DOS_REG_ADDR(VDEC2_DCAC_DMA_ADDRESS)
+#define VDEC2_DCAC_CPU_ADDRESS			0x2e14
+#define P_VDEC2_DCAC_CPU_ADDRESS		DOS_REG_ADDR(VDEC2_DCAC_CPU_ADDRESS)
+#define VDEC2_DCAC_CPU_DATA			0x2e15
+#define P_VDEC2_DCAC_CPU_DATA			DOS_REG_ADDR(VDEC2_DCAC_CPU_DATA)
+#define VDEC2_DCAC_MB_COUNT			0x2e16
+#define P_VDEC2_DCAC_MB_COUNT			DOS_REG_ADDR(VDEC2_DCAC_MB_COUNT)
+#define VDEC2_IQ_QUANT				0x2e17
+#define P_VDEC2_IQ_QUANT			DOS_REG_ADDR(VDEC2_IQ_QUANT)
+#define VDEC2_VC1_BITPLANE_CTL			0x2e18
+#define P_VDEC2_VC1_BITPLANE_CTL		DOS_REG_ADDR(VDEC2_VC1_BITPLANE_CTL)
+#define HEVC_VCOP_CTRL_REG			0x3e00
+#define P_HEVC_VCOP_CTRL_REG			DOS_REG_ADDR(HEVC_VCOP_CTRL_REG)
+#define HEVC_QP_CTRL_REG			0x3e01
+#define P_HEVC_QP_CTRL_REG			DOS_REG_ADDR(HEVC_QP_CTRL_REG)
+#define HEVC_INTRA_QUANT_MATRIX			0x3e02
+#define P_HEVC_INTRA_QUANT_MATRIX		DOS_REG_ADDR(HEVC_INTRA_QUANT_MATRIX)
+#define HEVC_NON_I_QUANT_MATRIX			0x3e03
+#define P_HEVC_NON_I_QUANT_MATRIX		DOS_REG_ADDR(HEVC_NON_I_QUANT_MATRIX)
+#define HEVC_DC_SCALER				0x3e04
+#define P_HEVC_DC_SCALER			DOS_REG_ADDR(HEVC_DC_SCALER)
+#define HEVC_DC_AC_CTRL				0x3e05
+#define P_HEVC_DC_AC_CTRL			DOS_REG_ADDR(HEVC_DC_AC_CTRL)
+#define HEVC_DC_AC_SCALE_MUL			0x3e06
+#define P_HEVC_DC_AC_SCALE_MUL			DOS_REG_ADDR(HEVC_DC_AC_SCALE_MUL)
+#define HEVC_DC_AC_SCALE_DIV			0x3e07
+#define P_HEVC_DC_AC_SCALE_DIV			DOS_REG_ADDR(HEVC_DC_AC_SCALE_DIV)
+#define HEVC_POWER_CTL_IQIDCT			0x3e08
+#define P_HEVC_POWER_CTL_IQIDCT			DOS_REG_ADDR(HEVC_POWER_CTL_IQIDCT)
+#define HEVC_RV_AI_Y_X				0x3e09
+#define P_HEVC_RV_AI_Y_X			DOS_REG_ADDR(HEVC_RV_AI_Y_X)
+#define HEVC_RV_AI_U_X				0x3e0a
+#define P_HEVC_RV_AI_U_X			DOS_REG_ADDR(HEVC_RV_AI_U_X)
+#define HEVC_RV_AI_V_X				0x3e0b
+#define P_HEVC_RV_AI_V_X			DOS_REG_ADDR(HEVC_RV_AI_V_X)
+#define HEVC_RV_AI_MB_COUNT			0x3e0c
+#define P_HEVC_RV_AI_MB_COUNT			DOS_REG_ADDR(HEVC_RV_AI_MB_COUNT)
+#define HEVC_NEXT_INTRA_DMA_ADDRESS		0x3e0d
+#define P_HEVC_NEXT_INTRA_DMA_ADDRESS		DOS_REG_ADDR(HEVC_NEXT_INTRA_DMA_ADDRESS)
+#define HEVC_IQIDCT_CONTROL			0x3e0e
+#define P_HEVC_IQIDCT_CONTROL			DOS_REG_ADDR(HEVC_IQIDCT_CONTROL)
+#define HEVC_IQIDCT_DEBUG_INFO_0		0x3e0f
+#define P_HEVC_IQIDCT_DEBUG_INFO_0		DOS_REG_ADDR(HEVC_IQIDCT_DEBUG_INFO_0)
+#define HEVC_DEBLK_CMD				0x3e10
+#define P_HEVC_DEBLK_CMD			DOS_REG_ADDR(HEVC_DEBLK_CMD)
+#define HEVC_IQIDCT_DEBUG_IDCT			0x3e11
+#define P_HEVC_IQIDCT_DEBUG_IDCT		DOS_REG_ADDR(HEVC_IQIDCT_DEBUG_IDCT)
+#define HEVC_DCAC_DMA_CTRL			0x3e12
+#define P_HEVC_DCAC_DMA_CTRL			DOS_REG_ADDR(HEVC_DCAC_DMA_CTRL)
+#define HEVC_DCAC_DMA_ADDRESS			0x3e13
+#define P_HEVC_DCAC_DMA_ADDRESS			DOS_REG_ADDR(HEVC_DCAC_DMA_ADDRESS)
+#define HEVC_DCAC_CPU_ADDRESS			0x3e14
+#define P_HEVC_DCAC_CPU_ADDRESS			DOS_REG_ADDR(HEVC_DCAC_CPU_ADDRESS)
+#define HEVC_DCAC_CPU_DATA			0x3e15
+#define P_HEVC_DCAC_CPU_DATA			DOS_REG_ADDR(HEVC_DCAC_CPU_DATA)
+#define HEVC_DCAC_MB_COUNT			0x3e16
+#define P_HEVC_DCAC_MB_COUNT			DOS_REG_ADDR(HEVC_DCAC_MB_COUNT)
+#define HEVC_IQ_QUANT				0x3e17
+#define P_HEVC_IQ_QUANT				DOS_REG_ADDR(HEVC_IQ_QUANT)
+#define HEVC_VC1_BITPLANE_CTL			0x3e18
+#define P_HEVC_VC1_BITPLANE_CTL			DOS_REG_ADDR(HEVC_VC1_BITPLANE_CTL)
+#define HCODEC_MSP				0x1300
+#define P_HCODEC_MSP				DOS_REG_ADDR(HCODEC_MSP)
+#define HCODEC_MPSR				0x1301
+#define P_HCODEC_MPSR				DOS_REG_ADDR(HCODEC_MPSR)
+#define HCODEC_MINT_VEC_BASE			0x1302
+#define P_HCODEC_MINT_VEC_BASE			DOS_REG_ADDR(HCODEC_MINT_VEC_BASE)
+#define HCODEC_MCPU_INTR_GRP			0x1303
+#define P_HCODEC_MCPU_INTR_GRP			DOS_REG_ADDR(HCODEC_MCPU_INTR_GRP)
+#define HCODEC_MCPU_INTR_MSK			0x1304
+#define P_HCODEC_MCPU_INTR_MSK			DOS_REG_ADDR(HCODEC_MCPU_INTR_MSK)
+#define HCODEC_MCPU_INTR_REQ			0x1305
+#define P_HCODEC_MCPU_INTR_REQ			DOS_REG_ADDR(HCODEC_MCPU_INTR_REQ)
+#define HCODEC_MPC_P				0x1306
+#define P_HCODEC_MPC_P				DOS_REG_ADDR(HCODEC_MPC_P)
+#define HCODEC_MPC_D				0x1307
+#define P_HCODEC_MPC_D				DOS_REG_ADDR(HCODEC_MPC_D)
+#define HCODEC_MPC_E				0x1308
+#define P_HCODEC_MPC_E				DOS_REG_ADDR(HCODEC_MPC_E)
+#define HCODEC_MPC_W				0x1309
+#define P_HCODEC_MPC_W				DOS_REG_ADDR(HCODEC_MPC_W)
+#define HCODEC_MINDEX0_REG			0x130a
+#define P_HCODEC_MINDEX0_REG			DOS_REG_ADDR(HCODEC_MINDEX0_REG)
+#define HCODEC_MINDEX1_REG			0x130b
+#define P_HCODEC_MINDEX1_REG			DOS_REG_ADDR(HCODEC_MINDEX1_REG)
+#define HCODEC_MINDEX2_REG			0x130c
+#define P_HCODEC_MINDEX2_REG			DOS_REG_ADDR(HCODEC_MINDEX2_REG)
+#define HCODEC_MINDEX3_REG			0x130d
+#define P_HCODEC_MINDEX3_REG			DOS_REG_ADDR(HCODEC_MINDEX3_REG)
+#define HCODEC_MINDEX4_REG			0x130e
+#define P_HCODEC_MINDEX4_REG			DOS_REG_ADDR(HCODEC_MINDEX4_REG)
+#define HCODEC_MINDEX5_REG			0x130f
+#define P_HCODEC_MINDEX5_REG			DOS_REG_ADDR(HCODEC_MINDEX5_REG)
+#define HCODEC_MINDEX6_REG			0x1310
+#define P_HCODEC_MINDEX6_REG			DOS_REG_ADDR(HCODEC_MINDEX6_REG)
+#define HCODEC_MINDEX7_REG			0x1311
+#define P_HCODEC_MINDEX7_REG			DOS_REG_ADDR(HCODEC_MINDEX7_REG)
+#define HCODEC_MMIN_REG				0x1312
+#define P_HCODEC_MMIN_REG			DOS_REG_ADDR(HCODEC_MMIN_REG)
+#define HCODEC_MMAX_REG				0x1313
+#define P_HCODEC_MMAX_REG			DOS_REG_ADDR(HCODEC_MMAX_REG)
+#define HCODEC_MBREAK0_REG			0x1314
+#define P_HCODEC_MBREAK0_REG			DOS_REG_ADDR(HCODEC_MBREAK0_REG)
+#define HCODEC_MBREAK1_REG			0x1315
+#define P_HCODEC_MBREAK1_REG			DOS_REG_ADDR(HCODEC_MBREAK1_REG)
+#define HCODEC_MBREAK2_REG			0x1316
+#define P_HCODEC_MBREAK2_REG			DOS_REG_ADDR(HCODEC_MBREAK2_REG)
+#define HCODEC_MBREAK3_REG			0x1317
+#define P_HCODEC_MBREAK3_REG			DOS_REG_ADDR(HCODEC_MBREAK3_REG)
+#define HCODEC_MBREAK_TYPE			0x1318
+#define P_HCODEC_MBREAK_TYPE			DOS_REG_ADDR(HCODEC_MBREAK_TYPE)
+#define HCODEC_MBREAK_CTRL			0x1319
+#define P_HCODEC_MBREAK_CTRL			DOS_REG_ADDR(HCODEC_MBREAK_CTRL)
+#define HCODEC_MBREAK_STAUTS			0x131a
+#define P_HCODEC_MBREAK_STAUTS			DOS_REG_ADDR(HCODEC_MBREAK_STAUTS)
+#define HCODEC_MDB_ADDR_REG			0x131b
+#define P_HCODEC_MDB_ADDR_REG			DOS_REG_ADDR(HCODEC_MDB_ADDR_REG)
+#define HCODEC_MDB_DATA_REG			0x131c
+#define P_HCODEC_MDB_DATA_REG			DOS_REG_ADDR(HCODEC_MDB_DATA_REG)
+#define HCODEC_MDB_CTRL				0x131d
+#define P_HCODEC_MDB_CTRL			DOS_REG_ADDR(HCODEC_MDB_CTRL)
+#define HCODEC_MSFTINT0				0x131e
+#define P_HCODEC_MSFTINT0			DOS_REG_ADDR(HCODEC_MSFTINT0)
+#define HCODEC_MSFTINT1				0x131f
+#define P_HCODEC_MSFTINT1			DOS_REG_ADDR(HCODEC_MSFTINT1)
+#define HCODEC_CSP				0x1320
+#define P_HCODEC_CSP				DOS_REG_ADDR(HCODEC_CSP)
+#define HCODEC_CPSR				0x1321
+#define P_HCODEC_CPSR				DOS_REG_ADDR(HCODEC_CPSR)
+#define HCODEC_CINT_VEC_BASE			0x1322
+#define P_HCODEC_CINT_VEC_BASE			DOS_REG_ADDR(HCODEC_CINT_VEC_BASE)
+#define HCODEC_CCPU_INTR_GRP			0x1323
+#define P_HCODEC_CCPU_INTR_GRP			DOS_REG_ADDR(HCODEC_CCPU_INTR_GRP)
+#define HCODEC_CCPU_INTR_MSK			0x1324
+#define P_HCODEC_CCPU_INTR_MSK			DOS_REG_ADDR(HCODEC_CCPU_INTR_MSK)
+#define HCODEC_CCPU_INTR_REQ			0x1325
+#define P_HCODEC_CCPU_INTR_REQ			DOS_REG_ADDR(HCODEC_CCPU_INTR_REQ)
+#define HCODEC_CPC_P				0x1326
+#define P_HCODEC_CPC_P				DOS_REG_ADDR(HCODEC_CPC_P)
+#define HCODEC_CPC_D				0x1327
+#define P_HCODEC_CPC_D				DOS_REG_ADDR(HCODEC_CPC_D)
+#define HCODEC_CPC_E				0x1328
+#define P_HCODEC_CPC_E				DOS_REG_ADDR(HCODEC_CPC_E)
+#define HCODEC_CPC_W				0x1329
+#define P_HCODEC_CPC_W				DOS_REG_ADDR(HCODEC_CPC_W)
+#define HCODEC_CINDEX0_REG			0x132a
+#define P_HCODEC_CINDEX0_REG			DOS_REG_ADDR(HCODEC_CINDEX0_REG)
+#define HCODEC_CINDEX1_REG			0x132b
+#define P_HCODEC_CINDEX1_REG			DOS_REG_ADDR(HCODEC_CINDEX1_REG)
+#define HCODEC_CINDEX2_REG			0x132c
+#define P_HCODEC_CINDEX2_REG			DOS_REG_ADDR(HCODEC_CINDEX2_REG)
+#define HCODEC_CINDEX3_REG			0x132d
+#define P_HCODEC_CINDEX3_REG			DOS_REG_ADDR(HCODEC_CINDEX3_REG)
+#define HCODEC_CINDEX4_REG			0x132e
+#define P_HCODEC_CINDEX4_REG			DOS_REG_ADDR(HCODEC_CINDEX4_REG)
+#define HCODEC_CINDEX5_REG			0x132f
+#define P_HCODEC_CINDEX5_REG			DOS_REG_ADDR(HCODEC_CINDEX5_REG)
+#define HCODEC_CINDEX6_REG			0x1330
+#define P_HCODEC_CINDEX6_REG			DOS_REG_ADDR(HCODEC_CINDEX6_REG)
+#define HCODEC_CINDEX7_REG			0x1331
+#define P_HCODEC_CINDEX7_REG			DOS_REG_ADDR(HCODEC_CINDEX7_REG)
+#define HCODEC_CMIN_REG				0x1332
+#define P_HCODEC_CMIN_REG			DOS_REG_ADDR(HCODEC_CMIN_REG)
+#define HCODEC_CMAX_REG				0x1333
+#define P_HCODEC_CMAX_REG			DOS_REG_ADDR(HCODEC_CMAX_REG)
+#define HCODEC_CBREAK0_REG			0x1334
+#define P_HCODEC_CBREAK0_REG			DOS_REG_ADDR(HCODEC_CBREAK0_REG)
+#define HCODEC_CBREAK1_REG			0x1335
+#define P_HCODEC_CBREAK1_REG			DOS_REG_ADDR(HCODEC_CBREAK1_REG)
+#define HCODEC_CBREAK2_REG			0x1336
+#define P_HCODEC_CBREAK2_REG			DOS_REG_ADDR(HCODEC_CBREAK2_REG)
+#define HCODEC_CBREAK3_REG			0x1337
+#define P_HCODEC_CBREAK3_REG			DOS_REG_ADDR(HCODEC_CBREAK3_REG)
+#define HCODEC_CBREAK_TYPE			0x1338
+#define P_HCODEC_CBREAK_TYPE			DOS_REG_ADDR(HCODEC_CBREAK_TYPE)
+#define HCODEC_CBREAK_CTRL			0x1339
+#define P_HCODEC_CBREAK_CTRL			DOS_REG_ADDR(HCODEC_CBREAK_CTRL)
+#define HCODEC_CBREAK_STAUTS			0x133a
+#define P_HCODEC_CBREAK_STAUTS			DOS_REG_ADDR(HCODEC_CBREAK_STAUTS)
+#define HCODEC_CDB_ADDR_REG			0x133b
+#define P_HCODEC_CDB_ADDR_REG			DOS_REG_ADDR(HCODEC_CDB_ADDR_REG)
+#define HCODEC_CDB_DATA_REG			0x133c
+#define P_HCODEC_CDB_DATA_REG			DOS_REG_ADDR(HCODEC_CDB_DATA_REG)
+#define HCODEC_CDB_CTRL				0x133d
+#define P_HCODEC_CDB_CTRL			DOS_REG_ADDR(HCODEC_CDB_CTRL)
+#define HCODEC_CSFTINT0				0x133e
+#define P_HCODEC_CSFTINT0			DOS_REG_ADDR(HCODEC_CSFTINT0)
+#define HCODEC_CSFTINT1				0x133f
+#define P_HCODEC_CSFTINT1			DOS_REG_ADDR(HCODEC_CSFTINT1)
+#define HCODEC_IMEM_DMA_CTRL			0x1340
+#define P_HCODEC_IMEM_DMA_CTRL			DOS_REG_ADDR(HCODEC_IMEM_DMA_CTRL)
+#define HCODEC_IMEM_DMA_ADR			0x1341
+#define P_HCODEC_IMEM_DMA_ADR			DOS_REG_ADDR(HCODEC_IMEM_DMA_ADR)
+#define HCODEC_IMEM_DMA_COUNT			0x1342
+#define P_HCODEC_IMEM_DMA_COUNT			DOS_REG_ADDR(HCODEC_IMEM_DMA_COUNT)
+#define HCODEC_WRRSP_IMEM			0x1343
+#define P_HCODEC_WRRSP_IMEM			DOS_REG_ADDR(HCODEC_WRRSP_IMEM)
+#define HCODEC_LMEM_DMA_CTRL			0x1350
+#define P_HCODEC_LMEM_DMA_CTRL			DOS_REG_ADDR(HCODEC_LMEM_DMA_CTRL)
+#define HCODEC_LMEM_DMA_ADR			0x1351
+#define P_HCODEC_LMEM_DMA_ADR			DOS_REG_ADDR(HCODEC_LMEM_DMA_ADR)
+#define HCODEC_LMEM_DMA_COUNT			0x1352
+#define P_HCODEC_LMEM_DMA_COUNT			DOS_REG_ADDR(HCODEC_LMEM_DMA_COUNT)
+#define HCODEC_WRRSP_LMEM			0x1353
+#define P_HCODEC_WRRSP_LMEM			DOS_REG_ADDR(HCODEC_WRRSP_LMEM)
+#define HCODEC_MAC_CTRL1			0x1360
+#define P_HCODEC_MAC_CTRL1			DOS_REG_ADDR(HCODEC_MAC_CTRL1)
+#define HCODEC_ACC0REG1				0x1361
+#define P_HCODEC_ACC0REG1			DOS_REG_ADDR(HCODEC_ACC0REG1)
+#define HCODEC_ACC1REG1				0x1362
+#define P_HCODEC_ACC1REG1			DOS_REG_ADDR(HCODEC_ACC1REG1)
+#define HCODEC_MAC_CTRL2			0x1370
+#define P_HCODEC_MAC_CTRL2			DOS_REG_ADDR(HCODEC_MAC_CTRL2)
+#define HCODEC_ACC0REG2				0x1371
+#define P_HCODEC_ACC0REG2			DOS_REG_ADDR(HCODEC_ACC0REG2)
+#define HCODEC_ACC1REG2				0x1372
+#define P_HCODEC_ACC1REG2			DOS_REG_ADDR(HCODEC_ACC1REG2)
+#define HCODEC_CPU_TRACE			0x1380
+#define P_HCODEC_CPU_TRACE			DOS_REG_ADDR(HCODEC_CPU_TRACE)
+#define VDEC2_MSP				0x2300
+#define P_VDEC2_MSP				DOS_REG_ADDR(VDEC2_MSP)
+#define VDEC2_MPSR				0x2301
+#define P_VDEC2_MPSR				DOS_REG_ADDR(VDEC2_MPSR)
+#define VDEC2_MINT_VEC_BASE			0x2302
+#define P_VDEC2_MINT_VEC_BASE			DOS_REG_ADDR(VDEC2_MINT_VEC_BASE)
+#define VDEC2_MCPU_INTR_GRP			0x2303
+#define P_VDEC2_MCPU_INTR_GRP			DOS_REG_ADDR(VDEC2_MCPU_INTR_GRP)
+#define VDEC2_MCPU_INTR_MSK			0x2304
+#define P_VDEC2_MCPU_INTR_MSK			DOS_REG_ADDR(VDEC2_MCPU_INTR_MSK)
+#define VDEC2_MCPU_INTR_REQ			0x2305
+#define P_VDEC2_MCPU_INTR_REQ			DOS_REG_ADDR(VDEC2_MCPU_INTR_REQ)
+#define VDEC2_MPC_P				0x2306
+#define P_VDEC2_MPC_P				DOS_REG_ADDR(VDEC2_MPC_P)
+#define VDEC2_MPC_D				0x2307
+#define P_VDEC2_MPC_D				DOS_REG_ADDR(VDEC2_MPC_D)
+#define VDEC2_MPC_E				0x2308
+#define P_VDEC2_MPC_E				DOS_REG_ADDR(VDEC2_MPC_E)
+#define VDEC2_MPC_W				0x2309
+#define P_VDEC2_MPC_W				DOS_REG_ADDR(VDEC2_MPC_W)
+#define VDEC2_MINDEX0_REG			0x230a
+#define P_VDEC2_MINDEX0_REG			DOS_REG_ADDR(VDEC2_MINDEX0_REG)
+#define VDEC2_MINDEX1_REG			0x230b
+#define P_VDEC2_MINDEX1_REG			DOS_REG_ADDR(VDEC2_MINDEX1_REG)
+#define VDEC2_MINDEX2_REG			0x230c
+#define P_VDEC2_MINDEX2_REG			DOS_REG_ADDR(VDEC2_MINDEX2_REG)
+#define VDEC2_MINDEX3_REG			0x230d
+#define P_VDEC2_MINDEX3_REG			DOS_REG_ADDR(VDEC2_MINDEX3_REG)
+#define VDEC2_MINDEX4_REG			0x230e
+#define P_VDEC2_MINDEX4_REG			DOS_REG_ADDR(VDEC2_MINDEX4_REG)
+#define VDEC2_MINDEX5_REG			0x230f
+#define P_VDEC2_MINDEX5_REG			DOS_REG_ADDR(VDEC2_MINDEX5_REG)
+#define VDEC2_MINDEX6_REG			0x2310
+#define P_VDEC2_MINDEX6_REG			DOS_REG_ADDR(VDEC2_MINDEX6_REG)
+#define VDEC2_MINDEX7_REG			0x2311
+#define P_VDEC2_MINDEX7_REG			DOS_REG_ADDR(VDEC2_MINDEX7_REG)
+#define VDEC2_MMIN_REG				0x2312
+#define P_VDEC2_MMIN_REG			DOS_REG_ADDR(VDEC2_MMIN_REG)
+#define VDEC2_MMAX_REG				0x2313
+#define P_VDEC2_MMAX_REG			DOS_REG_ADDR(VDEC2_MMAX_REG)
+#define VDEC2_MBREAK0_REG			0x2314
+#define P_VDEC2_MBREAK0_REG			DOS_REG_ADDR(VDEC2_MBREAK0_REG)
+#define VDEC2_MBREAK1_REG			0x2315
+#define P_VDEC2_MBREAK1_REG			DOS_REG_ADDR(VDEC2_MBREAK1_REG)
+#define VDEC2_MBREAK2_REG			0x2316
+#define P_VDEC2_MBREAK2_REG			DOS_REG_ADDR(VDEC2_MBREAK2_REG)
+#define VDEC2_MBREAK3_REG			0x2317
+#define P_VDEC2_MBREAK3_REG			DOS_REG_ADDR(VDEC2_MBREAK3_REG)
+#define VDEC2_MBREAK_TYPE			0x2318
+#define P_VDEC2_MBREAK_TYPE			DOS_REG_ADDR(VDEC2_MBREAK_TYPE)
+#define VDEC2_MBREAK_CTRL			0x2319
+#define P_VDEC2_MBREAK_CTRL			DOS_REG_ADDR(VDEC2_MBREAK_CTRL)
+#define VDEC2_MBREAK_STAUTS			0x231a
+#define P_VDEC2_MBREAK_STAUTS			DOS_REG_ADDR(VDEC2_MBREAK_STAUTS)
+#define VDEC2_MDB_ADDR_REG			0x231b
+#define P_VDEC2_MDB_ADDR_REG			DOS_REG_ADDR(VDEC2_MDB_ADDR_REG)
+#define VDEC2_MDB_DATA_REG			0x231c
+#define P_VDEC2_MDB_DATA_REG			DOS_REG_ADDR(VDEC2_MDB_DATA_REG)
+#define VDEC2_MDB_CTRL				0x231d
+#define P_VDEC2_MDB_CTRL			DOS_REG_ADDR(VDEC2_MDB_CTRL)
+#define VDEC2_MSFTINT0				0x231e
+#define P_VDEC2_MSFTINT0			DOS_REG_ADDR(VDEC2_MSFTINT0)
+#define VDEC2_MSFTINT1				0x231f
+#define P_VDEC2_MSFTINT1			DOS_REG_ADDR(VDEC2_MSFTINT1)
+#define VDEC2_CSP				0x2320
+#define P_VDEC2_CSP				DOS_REG_ADDR(VDEC2_CSP)
+#define VDEC2_CPSR				0x2321
+#define P_VDEC2_CPSR				DOS_REG_ADDR(VDEC2_CPSR)
+#define VDEC2_CINT_VEC_BASE			0x2322
+#define P_VDEC2_CINT_VEC_BASE			DOS_REG_ADDR(VDEC2_CINT_VEC_BASE)
+#define VDEC2_CCPU_INTR_GRP			0x2323
+#define P_VDEC2_CCPU_INTR_GRP			DOS_REG_ADDR(VDEC2_CCPU_INTR_GRP)
+#define VDEC2_CCPU_INTR_MSK			0x2324
+#define P_VDEC2_CCPU_INTR_MSK			DOS_REG_ADDR(VDEC2_CCPU_INTR_MSK)
+#define VDEC2_CCPU_INTR_REQ			0x2325
+#define P_VDEC2_CCPU_INTR_REQ			DOS_REG_ADDR(VDEC2_CCPU_INTR_REQ)
+#define VDEC2_CPC_P				0x2326
+#define P_VDEC2_CPC_P				DOS_REG_ADDR(VDEC2_CPC_P)
+#define VDEC2_CPC_D				0x2327
+#define P_VDEC2_CPC_D				DOS_REG_ADDR(VDEC2_CPC_D)
+#define VDEC2_CPC_E				0x2328
+#define P_VDEC2_CPC_E				DOS_REG_ADDR(VDEC2_CPC_E)
+#define VDEC2_CPC_W				0x2329
+#define P_VDEC2_CPC_W				DOS_REG_ADDR(VDEC2_CPC_W)
+#define VDEC2_CINDEX0_REG			0x232a
+#define P_VDEC2_CINDEX0_REG			DOS_REG_ADDR(VDEC2_CINDEX0_REG)
+#define VDEC2_CINDEX1_REG			0x232b
+#define P_VDEC2_CINDEX1_REG			DOS_REG_ADDR(VDEC2_CINDEX1_REG)
+#define VDEC2_CINDEX2_REG			0x232c
+#define P_VDEC2_CINDEX2_REG			DOS_REG_ADDR(VDEC2_CINDEX2_REG)
+#define VDEC2_CINDEX3_REG			0x232d
+#define P_VDEC2_CINDEX3_REG			DOS_REG_ADDR(VDEC2_CINDEX3_REG)
+#define VDEC2_CINDEX4_REG			0x232e
+#define P_VDEC2_CINDEX4_REG			DOS_REG_ADDR(VDEC2_CINDEX4_REG)
+#define VDEC2_CINDEX5_REG			0x232f
+#define P_VDEC2_CINDEX5_REG			DOS_REG_ADDR(VDEC2_CINDEX5_REG)
+#define VDEC2_CINDEX6_REG			0x2330
+#define P_VDEC2_CINDEX6_REG			DOS_REG_ADDR(VDEC2_CINDEX6_REG)
+#define VDEC2_CINDEX7_REG			0x2331
+#define P_VDEC2_CINDEX7_REG			DOS_REG_ADDR(VDEC2_CINDEX7_REG)
+#define VDEC2_CMIN_REG				0x2332
+#define P_VDEC2_CMIN_REG			DOS_REG_ADDR(VDEC2_CMIN_REG)
+#define VDEC2_CMAX_REG				0x2333
+#define P_VDEC2_CMAX_REG			DOS_REG_ADDR(VDEC2_CMAX_REG)
+#define VDEC2_CBREAK0_REG			0x2334
+#define P_VDEC2_CBREAK0_REG			DOS_REG_ADDR(VDEC2_CBREAK0_REG)
+#define VDEC2_CBREAK1_REG			0x2335
+#define P_VDEC2_CBREAK1_REG			DOS_REG_ADDR(VDEC2_CBREAK1_REG)
+#define VDEC2_CBREAK2_REG			0x2336
+#define P_VDEC2_CBREAK2_REG			DOS_REG_ADDR(VDEC2_CBREAK2_REG)
+#define VDEC2_CBREAK3_REG			0x2337
+#define P_VDEC2_CBREAK3_REG			DOS_REG_ADDR(VDEC2_CBREAK3_REG)
+#define VDEC2_CBREAK_TYPE			0x2338
+#define P_VDEC2_CBREAK_TYPE			DOS_REG_ADDR(VDEC2_CBREAK_TYPE)
+#define VDEC2_CBREAK_CTRL			0x2339
+#define P_VDEC2_CBREAK_CTRL			DOS_REG_ADDR(VDEC2_CBREAK_CTRL)
+#define VDEC2_CBREAK_STAUTS			0x233a
+#define P_VDEC2_CBREAK_STAUTS			DOS_REG_ADDR(VDEC2_CBREAK_STAUTS)
+#define VDEC2_CDB_ADDR_REG			0x233b
+#define P_VDEC2_CDB_ADDR_REG			DOS_REG_ADDR(VDEC2_CDB_ADDR_REG)
+#define VDEC2_CDB_DATA_REG			0x233c
+#define P_VDEC2_CDB_DATA_REG			DOS_REG_ADDR(VDEC2_CDB_DATA_REG)
+#define VDEC2_CDB_CTRL				0x233d
+#define P_VDEC2_CDB_CTRL			DOS_REG_ADDR(VDEC2_CDB_CTRL)
+#define VDEC2_CSFTINT0				0x233e
+#define P_VDEC2_CSFTINT0			DOS_REG_ADDR(VDEC2_CSFTINT0)
+#define VDEC2_CSFTINT1				0x233f
+#define P_VDEC2_CSFTINT1			DOS_REG_ADDR(VDEC2_CSFTINT1)
+#define VDEC2_IMEM_DMA_CTRL			0x2340
+#define P_VDEC2_IMEM_DMA_CTRL			DOS_REG_ADDR(VDEC2_IMEM_DMA_CTRL)
+#define VDEC2_IMEM_DMA_ADR			0x2341
+#define P_VDEC2_IMEM_DMA_ADR			DOS_REG_ADDR(VDEC2_IMEM_DMA_ADR)
+#define VDEC2_IMEM_DMA_COUNT			0x2342
+#define P_VDEC2_IMEM_DMA_COUNT			DOS_REG_ADDR(VDEC2_IMEM_DMA_COUNT)
+#define VDEC2_WRRSP_IMEM			0x2343
+#define P_VDEC2_WRRSP_IMEM			DOS_REG_ADDR(VDEC2_WRRSP_IMEM)
+#define VDEC2_LMEM_DMA_CTRL			0x2350
+#define P_VDEC2_LMEM_DMA_CTRL			DOS_REG_ADDR(VDEC2_LMEM_DMA_CTRL)
+#define VDEC2_LMEM_DMA_ADR			0x2351
+#define P_VDEC2_LMEM_DMA_ADR			DOS_REG_ADDR(VDEC2_LMEM_DMA_ADR)
+#define VDEC2_LMEM_DMA_COUNT			0x2352
+#define P_VDEC2_LMEM_DMA_COUNT			DOS_REG_ADDR(VDEC2_LMEM_DMA_COUNT)
+#define VDEC2_WRRSP_LMEM			0x2353
+#define P_VDEC2_WRRSP_LMEM			DOS_REG_ADDR(VDEC2_WRRSP_LMEM)
+#define VDEC2_MAC_CTRL1				0x2360
+#define P_VDEC2_MAC_CTRL1			DOS_REG_ADDR(VDEC2_MAC_CTRL1)
+#define VDEC2_ACC0REG1				0x2361
+#define P_VDEC2_ACC0REG1			DOS_REG_ADDR(VDEC2_ACC0REG1)
+#define VDEC2_ACC1REG1				0x2362
+#define P_VDEC2_ACC1REG1			DOS_REG_ADDR(VDEC2_ACC1REG1)
+#define VDEC2_MAC_CTRL2				0x2370
+#define P_VDEC2_MAC_CTRL2			DOS_REG_ADDR(VDEC2_MAC_CTRL2)
+#define VDEC2_ACC0REG2				0x2371
+#define P_VDEC2_ACC0REG2			DOS_REG_ADDR(VDEC2_ACC0REG2)
+#define VDEC2_ACC1REG2				0x2372
+#define P_VDEC2_ACC1REG2			DOS_REG_ADDR(VDEC2_ACC1REG2)
+#define VDEC2_CPU_TRACE				0x2380
+#define P_VDEC2_CPU_TRACE			DOS_REG_ADDR(VDEC2_CPU_TRACE)
+#define HEVC_MSP				0x3300
+#define P_HEVC_MSP				DOS_REG_ADDR(HEVC_MSP)
+#define HEVC_MPSR				0x3301
+#define P_HEVC_MPSR				DOS_REG_ADDR(HEVC_MPSR)
+#define HEVC_MINT_VEC_BASE			0x3302
+#define P_HEVC_MINT_VEC_BASE			DOS_REG_ADDR(HEVC_MINT_VEC_BASE)
+#define HEVC_MCPU_INTR_GRP			0x3303
+#define P_HEVC_MCPU_INTR_GRP			DOS_REG_ADDR(HEVC_MCPU_INTR_GRP)
+#define HEVC_MCPU_INTR_MSK			0x3304
+#define P_HEVC_MCPU_INTR_MSK			DOS_REG_ADDR(HEVC_MCPU_INTR_MSK)
+#define HEVC_MCPU_INTR_REQ			0x3305
+#define P_HEVC_MCPU_INTR_REQ			DOS_REG_ADDR(HEVC_MCPU_INTR_REQ)
+#define HEVC_MPC_P				0x3306
+#define P_HEVC_MPC_P				DOS_REG_ADDR(HEVC_MPC_P)
+#define HEVC_MPC_D				0x3307
+#define P_HEVC_MPC_D				DOS_REG_ADDR(HEVC_MPC_D)
+#define HEVC_MPC_E				0x3308
+#define P_HEVC_MPC_E				DOS_REG_ADDR(HEVC_MPC_E)
+#define HEVC_MPC_W				0x3309
+#define P_HEVC_MPC_W				DOS_REG_ADDR(HEVC_MPC_W)
+#define HEVC_MINDEX0_REG			0x330a
+#define P_HEVC_MINDEX0_REG			DOS_REG_ADDR(HEVC_MINDEX0_REG)
+#define HEVC_MINDEX1_REG			0x330b
+#define P_HEVC_MINDEX1_REG			DOS_REG_ADDR(HEVC_MINDEX1_REG)
+#define HEVC_MINDEX2_REG			0x330c
+#define P_HEVC_MINDEX2_REG			DOS_REG_ADDR(HEVC_MINDEX2_REG)
+#define HEVC_MINDEX3_REG			0x330d
+#define P_HEVC_MINDEX3_REG			DOS_REG_ADDR(HEVC_MINDEX3_REG)
+#define HEVC_MINDEX4_REG			0x330e
+#define P_HEVC_MINDEX4_REG			DOS_REG_ADDR(HEVC_MINDEX4_REG)
+#define HEVC_MINDEX5_REG			0x330f
+#define P_HEVC_MINDEX5_REG			DOS_REG_ADDR(HEVC_MINDEX5_REG)
+#define HEVC_MINDEX6_REG			0x3310
+#define P_HEVC_MINDEX6_REG			DOS_REG_ADDR(HEVC_MINDEX6_REG)
+#define HEVC_MINDEX7_REG			0x3311
+#define P_HEVC_MINDEX7_REG			DOS_REG_ADDR(HEVC_MINDEX7_REG)
+#define HEVC_MMIN_REG				0x3312
+#define P_HEVC_MMIN_REG				DOS_REG_ADDR(HEVC_MMIN_REG)
+#define HEVC_MMAX_REG				0x3313
+#define P_HEVC_MMAX_REG				DOS_REG_ADDR(HEVC_MMAX_REG)
+#define HEVC_MBREAK0_REG			0x3314
+#define P_HEVC_MBREAK0_REG			DOS_REG_ADDR(HEVC_MBREAK0_REG)
+#define HEVC_MBREAK1_REG			0x3315
+#define P_HEVC_MBREAK1_REG			DOS_REG_ADDR(HEVC_MBREAK1_REG)
+#define HEVC_MBREAK2_REG			0x3316
+#define P_HEVC_MBREAK2_REG			DOS_REG_ADDR(HEVC_MBREAK2_REG)
+#define HEVC_MBREAK3_REG			0x3317
+#define P_HEVC_MBREAK3_REG			DOS_REG_ADDR(HEVC_MBREAK3_REG)
+#define HEVC_MBREAK_TYPE			0x3318
+#define P_HEVC_MBREAK_TYPE			DOS_REG_ADDR(HEVC_MBREAK_TYPE)
+#define HEVC_MBREAK_CTRL			0x3319
+#define P_HEVC_MBREAK_CTRL			DOS_REG_ADDR(HEVC_MBREAK_CTRL)
+#define HEVC_MBREAK_STAUTS			0x331a
+#define P_HEVC_MBREAK_STAUTS			DOS_REG_ADDR(HEVC_MBREAK_STAUTS)
+#define HEVC_MDB_ADDR_REG			0x331b
+#define P_HEVC_MDB_ADDR_REG			DOS_REG_ADDR(HEVC_MDB_ADDR_REG)
+#define HEVC_MDB_DATA_REG			0x331c
+#define P_HEVC_MDB_DATA_REG			DOS_REG_ADDR(HEVC_MDB_DATA_REG)
+#define HEVC_MDB_CTRL				0x331d
+#define P_HEVC_MDB_CTRL				DOS_REG_ADDR(HEVC_MDB_CTRL)
+#define HEVC_MSFTINT0				0x331e
+#define P_HEVC_MSFTINT0				DOS_REG_ADDR(HEVC_MSFTINT0)
+#define HEVC_MSFTINT1				0x331f
+#define P_HEVC_MSFTINT1				DOS_REG_ADDR(HEVC_MSFTINT1)
+#define HEVC_CSP				0x3320
+#define P_HEVC_CSP				DOS_REG_ADDR(HEVC_CSP)
+#define HEVC_CPSR				0x3321
+#define P_HEVC_CPSR				DOS_REG_ADDR(HEVC_CPSR)
+#define HEVC_CINT_VEC_BASE			0x3322
+#define P_HEVC_CINT_VEC_BASE			DOS_REG_ADDR(HEVC_CINT_VEC_BASE)
+#define HEVC_CCPU_INTR_GRP			0x3323
+#define P_HEVC_CCPU_INTR_GRP			DOS_REG_ADDR(HEVC_CCPU_INTR_GRP)
+#define HEVC_CCPU_INTR_MSK			0x3324
+#define P_HEVC_CCPU_INTR_MSK			DOS_REG_ADDR(HEVC_CCPU_INTR_MSK)
+#define HEVC_CCPU_INTR_REQ			0x3325
+#define P_HEVC_CCPU_INTR_REQ			DOS_REG_ADDR(HEVC_CCPU_INTR_REQ)
+#define HEVC_CPC_P				0x3326
+#define P_HEVC_CPC_P				DOS_REG_ADDR(HEVC_CPC_P)
+#define HEVC_CPC_D				0x3327
+#define P_HEVC_CPC_D				DOS_REG_ADDR(HEVC_CPC_D)
+#define HEVC_CPC_E				0x3328
+#define P_HEVC_CPC_E				DOS_REG_ADDR(HEVC_CPC_E)
+#define HEVC_CPC_W				0x3329
+#define P_HEVC_CPC_W				DOS_REG_ADDR(HEVC_CPC_W)
+#define HEVC_CINDEX0_REG			0x332a
+#define P_HEVC_CINDEX0_REG			DOS_REG_ADDR(HEVC_CINDEX0_REG)
+#define HEVC_CINDEX1_REG			0x332b
+#define P_HEVC_CINDEX1_REG			DOS_REG_ADDR(HEVC_CINDEX1_REG)
+#define HEVC_CINDEX2_REG			0x332c
+#define P_HEVC_CINDEX2_REG			DOS_REG_ADDR(HEVC_CINDEX2_REG)
+#define HEVC_CINDEX3_REG			0x332d
+#define P_HEVC_CINDEX3_REG			DOS_REG_ADDR(HEVC_CINDEX3_REG)
+#define HEVC_CINDEX4_REG			0x332e
+#define P_HEVC_CINDEX4_REG			DOS_REG_ADDR(HEVC_CINDEX4_REG)
+#define HEVC_CINDEX5_REG			0x332f
+#define P_HEVC_CINDEX5_REG			DOS_REG_ADDR(HEVC_CINDEX5_REG)
+#define HEVC_CINDEX6_REG			0x3330
+#define P_HEVC_CINDEX6_REG			DOS_REG_ADDR(HEVC_CINDEX6_REG)
+#define HEVC_CINDEX7_REG			0x3331
+#define P_HEVC_CINDEX7_REG			DOS_REG_ADDR(HEVC_CINDEX7_REG)
+#define HEVC_CMIN_REG				0x3332
+#define P_HEVC_CMIN_REG				DOS_REG_ADDR(HEVC_CMIN_REG)
+#define HEVC_CMAX_REG				0x3333
+#define P_HEVC_CMAX_REG				DOS_REG_ADDR(HEVC_CMAX_REG)
+#define HEVC_CBREAK0_REG			0x3334
+#define P_HEVC_CBREAK0_REG			DOS_REG_ADDR(HEVC_CBREAK0_REG)
+#define HEVC_CBREAK1_REG			0x3335
+#define P_HEVC_CBREAK1_REG			DOS_REG_ADDR(HEVC_CBREAK1_REG)
+#define HEVC_CBREAK2_REG			0x3336
+#define P_HEVC_CBREAK2_REG			DOS_REG_ADDR(HEVC_CBREAK2_REG)
+#define HEVC_CBREAK3_REG			0x3337
+#define P_HEVC_CBREAK3_REG			DOS_REG_ADDR(HEVC_CBREAK3_REG)
+#define HEVC_CBREAK_TYPE			0x3338
+#define P_HEVC_CBREAK_TYPE			DOS_REG_ADDR(HEVC_CBREAK_TYPE)
+#define HEVC_CBREAK_CTRL			0x3339
+#define P_HEVC_CBREAK_CTRL			DOS_REG_ADDR(HEVC_CBREAK_CTRL)
+#define HEVC_CBREAK_STAUTS			0x333a
+#define P_HEVC_CBREAK_STAUTS			DOS_REG_ADDR(HEVC_CBREAK_STAUTS)
+#define HEVC_CDB_ADDR_REG			0x333b
+#define P_HEVC_CDB_ADDR_REG			DOS_REG_ADDR(HEVC_CDB_ADDR_REG)
+#define HEVC_CDB_DATA_REG			0x333c
+#define P_HEVC_CDB_DATA_REG			DOS_REG_ADDR(HEVC_CDB_DATA_REG)
+#define HEVC_CDB_CTRL				0x333d
+#define P_HEVC_CDB_CTRL				DOS_REG_ADDR(HEVC_CDB_CTRL)
+#define HEVC_CSFTINT0				0x333e
+#define P_HEVC_CSFTINT0				DOS_REG_ADDR(HEVC_CSFTINT0)
+#define HEVC_CSFTINT1				0x333f
+#define P_HEVC_CSFTINT1				DOS_REG_ADDR(HEVC_CSFTINT1)
+#define HEVC_IMEM_DMA_CTRL			0x3340
+#define P_HEVC_IMEM_DMA_CTRL			DOS_REG_ADDR(HEVC_IMEM_DMA_CTRL)
+#define HEVC_IMEM_DMA_ADR			0x3341
+#define P_HEVC_IMEM_DMA_ADR			DOS_REG_ADDR(HEVC_IMEM_DMA_ADR)
+#define HEVC_IMEM_DMA_COUNT			0x3342
+#define P_HEVC_IMEM_DMA_COUNT			DOS_REG_ADDR(HEVC_IMEM_DMA_COUNT)
+#define HEVC_WRRSP_IMEM				0x3343
+#define P_HEVC_WRRSP_IMEM			DOS_REG_ADDR(HEVC_WRRSP_IMEM)
+#define HEVC_LMEM_DMA_CTRL			0x3350
+#define P_HEVC_LMEM_DMA_CTRL			DOS_REG_ADDR(HEVC_LMEM_DMA_CTRL)
+#define HEVC_LMEM_DMA_ADR			0x3351
+#define P_HEVC_LMEM_DMA_ADR			DOS_REG_ADDR(HEVC_LMEM_DMA_ADR)
+#define HEVC_LMEM_DMA_COUNT			0x3352
+#define P_HEVC_LMEM_DMA_COUNT			DOS_REG_ADDR(HEVC_LMEM_DMA_COUNT)
+#define HEVC_WRRSP_LMEM				0x3353
+#define P_HEVC_WRRSP_LMEM			DOS_REG_ADDR(HEVC_WRRSP_LMEM)
+#define HEVC_MAC_CTRL1				0x3360
+#define P_HEVC_MAC_CTRL1			DOS_REG_ADDR(HEVC_MAC_CTRL1)
+#define HEVC_ACC0REG1				0x3361
+#define P_HEVC_ACC0REG1				DOS_REG_ADDR(HEVC_ACC0REG1)
+#define HEVC_ACC1REG1				0x3362
+#define P_HEVC_ACC1REG1				DOS_REG_ADDR(HEVC_ACC1REG1)
+#define HEVC_MAC_CTRL2				0x3370
+#define P_HEVC_MAC_CTRL2			DOS_REG_ADDR(HEVC_MAC_CTRL2)
+#define HEVC_ACC0REG2				0x3371
+#define P_HEVC_ACC0REG2				DOS_REG_ADDR(HEVC_ACC0REG2)
+#define HEVC_ACC1REG2				0x3372
+#define P_HEVC_ACC1REG2				DOS_REG_ADDR(HEVC_ACC1REG2)
+#define HEVC_CPU_TRACE				0x3380
+#define P_HEVC_CPU_TRACE			DOS_REG_ADDR(HEVC_CPU_TRACE)
+#define HCODEC_HENC_SCRATCH_0			0x1ac0
+#define P_HCODEC_HENC_SCRATCH_0			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_0)
+#define HCODEC_HENC_SCRATCH_1			0x1ac1
+#define P_HCODEC_HENC_SCRATCH_1			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_1)
+#define HCODEC_HENC_SCRATCH_2			0x1ac2
+#define P_HCODEC_HENC_SCRATCH_2			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_2)
+#define HCODEC_HENC_SCRATCH_3			0x1ac3
+#define P_HCODEC_HENC_SCRATCH_3			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_3)
+#define HCODEC_HENC_SCRATCH_4			0x1ac4
+#define P_HCODEC_HENC_SCRATCH_4			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_4)
+#define HCODEC_HENC_SCRATCH_5			0x1ac5
+#define P_HCODEC_HENC_SCRATCH_5			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_5)
+#define HCODEC_HENC_SCRATCH_6			0x1ac6
+#define P_HCODEC_HENC_SCRATCH_6			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_6)
+#define HCODEC_HENC_SCRATCH_7			0x1ac7
+#define P_HCODEC_HENC_SCRATCH_7			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_7)
+#define HCODEC_HENC_SCRATCH_8			0x1ac8
+#define P_HCODEC_HENC_SCRATCH_8			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_8)
+#define HCODEC_HENC_SCRATCH_9			0x1ac9
+#define P_HCODEC_HENC_SCRATCH_9			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_9)
+#define HCODEC_HENC_SCRATCH_A			0x1aca
+#define P_HCODEC_HENC_SCRATCH_A			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_A)
+#define HCODEC_HENC_SCRATCH_B			0x1acb
+#define P_HCODEC_HENC_SCRATCH_B			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_B)
+#define HCODEC_HENC_SCRATCH_C			0x1acc
+#define P_HCODEC_HENC_SCRATCH_C			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_C)
+#define HCODEC_HENC_SCRATCH_D			0x1acd
+#define P_HCODEC_HENC_SCRATCH_D			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_D)
+#define HCODEC_HENC_SCRATCH_E			0x1ace
+#define P_HCODEC_HENC_SCRATCH_E			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_E)
+#define HCODEC_HENC_SCRATCH_F			0x1acf
+#define P_HCODEC_HENC_SCRATCH_F			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_F)
+#define HCODEC_HENC_SCRATCH_G			0x1ad0
+#define P_HCODEC_HENC_SCRATCH_G			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_G)
+#define HCODEC_HENC_SCRATCH_H			0x1ad1
+#define P_HCODEC_HENC_SCRATCH_H			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_H)
+#define HCODEC_HENC_SCRATCH_I			0x1ad2
+#define P_HCODEC_HENC_SCRATCH_I			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_I)
+#define HCODEC_HENC_SCRATCH_J			0x1ad3
+#define P_HCODEC_HENC_SCRATCH_J			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_J)
+#define HCODEC_HENC_SCRATCH_K			0x1ad4
+#define P_HCODEC_HENC_SCRATCH_K			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_K)
+#define HCODEC_HENC_SCRATCH_L			0x1ad5
+#define P_HCODEC_HENC_SCRATCH_L			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_L)
+#define HCODEC_HENC_SCRATCH_M			0x1ad6
+#define P_HCODEC_HENC_SCRATCH_M			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_M)
+#define HCODEC_HENC_SCRATCH_N			0x1ad7
+#define P_HCODEC_HENC_SCRATCH_N			DOS_REG_ADDR(HCODEC_HENC_SCRATCH_N)
+#define HCODEC_IE_DATA_FEED_BUFF_INFO		0x1ad8
+#define P_HCODEC_IE_DATA_FEED_BUFF_INFO		DOS_REG_ADDR(HCODEC_IE_DATA_FEED_BUFF_INFO)
+#define HCODEC_VLC_STATUS_CTRL			0x1d00
+#define P_HCODEC_VLC_STATUS_CTRL		DOS_REG_ADDR(HCODEC_VLC_STATUS_CTRL)
+#define HCODEC_VLC_CONFIG			0x1d01
+#define P_HCODEC_VLC_CONFIG			DOS_REG_ADDR(HCODEC_VLC_CONFIG)
+#define HCODEC_VLC_VB_START_PTR			0x1d10
+#define P_HCODEC_VLC_VB_START_PTR		DOS_REG_ADDR(HCODEC_VLC_VB_START_PTR)
+#define HCODEC_VLC_VB_END_PTR			0x1d11
+#define P_HCODEC_VLC_VB_END_PTR			DOS_REG_ADDR(HCODEC_VLC_VB_END_PTR)
+#define HCODEC_VLC_VB_WR_PTR			0x1d12
+#define P_HCODEC_VLC_VB_WR_PTR			DOS_REG_ADDR(HCODEC_VLC_VB_WR_PTR)
+#define HCODEC_VLC_VB_RD_PTR			0x1d13
+#define P_HCODEC_VLC_VB_RD_PTR			DOS_REG_ADDR(HCODEC_VLC_VB_RD_PTR)
+#define HCODEC_VLC_VB_SW_RD_PTR			0x1d14
+#define P_HCODEC_VLC_VB_SW_RD_PTR		DOS_REG_ADDR(HCODEC_VLC_VB_SW_RD_PTR)
+#define HCODEC_VLC_VB_LEFT			0x1d15
+#define P_HCODEC_VLC_VB_LEFT			DOS_REG_ADDR(HCODEC_VLC_VB_LEFT)
+#define HCODEC_VLC_VB_CONTROL			0x1d16
+#define P_HCODEC_VLC_VB_CONTROL			DOS_REG_ADDR(HCODEC_VLC_VB_CONTROL)
+#define HCODEC_VLC_VB_MEM_CTL			0x1d17
+#define P_HCODEC_VLC_VB_MEM_CTL			DOS_REG_ADDR(HCODEC_VLC_VB_MEM_CTL)
+#define HCODEC_VLC_VB_INT_PTR			0x1d18
+#define P_HCODEC_VLC_VB_INT_PTR			DOS_REG_ADDR(HCODEC_VLC_VB_INT_PTR)
+#define HCODEC_VLC_WRRSP			0x1d19
+#define P_HCODEC_VLC_WRRSP			DOS_REG_ADDR(HCODEC_VLC_WRRSP)
+#define HCODEC_VLC_TOTAL_BYTES			0x1d1a
+#define P_HCODEC_VLC_TOTAL_BYTES		DOS_REG_ADDR(HCODEC_VLC_TOTAL_BYTES)
+#define HCODEC_VLC_VB_BUFF			0x1d1b
+#define P_HCODEC_VLC_VB_BUFF			DOS_REG_ADDR(HCODEC_VLC_VB_BUFF)
+#define HCODEC_VLC_VB_PRE_BUFF_HI		0x1d1c
+#define P_HCODEC_VLC_VB_PRE_BUFF_HI		DOS_REG_ADDR(HCODEC_VLC_VB_PRE_BUFF_HI)
+#define HCODEC_VLC_VB_PRE_BUFF_LOW		0x1d1d
+#define P_HCODEC_VLC_VB_PRE_BUFF_LOW		DOS_REG_ADDR(HCODEC_VLC_VB_PRE_BUFF_LOW)
+#define HCODEC_VLC_STREAM_BUFF			0x1d1e
+#define P_HCODEC_VLC_STREAM_BUFF		DOS_REG_ADDR(HCODEC_VLC_STREAM_BUFF)
+#define HCODEC_VLC_PUSH_STREAM			0x1d1f
+#define P_HCODEC_VLC_PUSH_STREAM		DOS_REG_ADDR(HCODEC_VLC_PUSH_STREAM)
+#define HCODEC_VLC_PUSH_ELEMENT			0x1d20
+#define P_HCODEC_VLC_PUSH_ELEMENT		DOS_REG_ADDR(HCODEC_VLC_PUSH_ELEMENT)
+#define HCODEC_VLC_ELEMENT_DATA			0x1d21
+#define P_HCODEC_VLC_ELEMENT_DATA		DOS_REG_ADDR(HCODEC_VLC_ELEMENT_DATA)
+#define HCODEC_VLC_SPECIAL_CTL			0x1d22
+#define P_HCODEC_VLC_SPECIAL_CTL		DOS_REG_ADDR(HCODEC_VLC_SPECIAL_CTL)
+#define HCODEC_VLC_HCMD_T_L_INFO		0x1d23
+#define P_HCODEC_VLC_HCMD_T_L_INFO		DOS_REG_ADDR(HCODEC_VLC_HCMD_T_L_INFO)
+#define HCODEC_VLC_HCMD_CUR_INFO		0x1d24
+#define P_HCODEC_VLC_HCMD_CUR_INFO		DOS_REG_ADDR(HCODEC_VLC_HCMD_CUR_INFO)
+#define HCODEC_VLC_INT_CONTROL			0x1d30
+#define P_HCODEC_VLC_INT_CONTROL		DOS_REG_ADDR(HCODEC_VLC_INT_CONTROL)
+#define HCODEC_VLC_PIC_SIZE			0x1d31
+#define P_HCODEC_VLC_PIC_SIZE			DOS_REG_ADDR(HCODEC_VLC_PIC_SIZE)
+#define HCODEC_VLC_PIC_INFO			0x1d32
+#define P_HCODEC_VLC_PIC_INFO			DOS_REG_ADDR(HCODEC_VLC_PIC_INFO)
+#define HCODEC_VLC_PIC_POSITION			0x1d33
+#define P_HCODEC_VLC_PIC_POSITION		DOS_REG_ADDR(HCODEC_VLC_PIC_POSITION)
+#define HCODEC_VLC_INPUT_STATUS			0x1d34
+#define P_HCODEC_VLC_INPUT_STATUS		DOS_REG_ADDR(HCODEC_VLC_INPUT_STATUS)
+#define HCODEC_VLC_MB_INFO			0x1d35
+#define P_HCODEC_VLC_MB_INFO			DOS_REG_ADDR(HCODEC_VLC_MB_INFO)
+#define HCODEC_VLC_ENC_PEND_CMD			0x1d36
+#define P_HCODEC_VLC_ENC_PEND_CMD		DOS_REG_ADDR(HCODEC_VLC_ENC_PEND_CMD)
+#define HCODEC_HENC_TOP_INFO_0			0x1d37
+#define P_HCODEC_HENC_TOP_INFO_0		DOS_REG_ADDR(HCODEC_HENC_TOP_INFO_0)
+#define HCODEC_HENC_LEFT_INFO_0			0x1d38
+#define P_HCODEC_HENC_LEFT_INFO_0		DOS_REG_ADDR(HCODEC_HENC_LEFT_INFO_0)
+#define HCODEC_HENC_TOP_INFO_1			0x1d39
+#define P_HCODEC_HENC_TOP_INFO_1		DOS_REG_ADDR(HCODEC_HENC_TOP_INFO_1)
+#define HCODEC_HENC_LEFT_INFO_1			0x1d3a
+#define P_HCODEC_HENC_LEFT_INFO_1		DOS_REG_ADDR(HCODEC_HENC_LEFT_INFO_1)
+#define HCODEC_VLC_IPRED_MODE_HI		0x1d3b
+#define P_HCODEC_VLC_IPRED_MODE_HI		DOS_REG_ADDR(HCODEC_VLC_IPRED_MODE_HI)
+#define HCODEC_VLC_IPRED_MODE_LO		0x1d3c
+#define P_HCODEC_VLC_IPRED_MODE_LO		DOS_REG_ADDR(HCODEC_VLC_IPRED_MODE_LO)
+#define HCODEC_VLC_DELTA_QP			0x1d3d
+#define P_HCODEC_VLC_DELTA_QP			DOS_REG_ADDR(HCODEC_VLC_DELTA_QP)
+#define HCODEC_VLC_MB_HEADER_INFO		0x1d3e
+#define P_HCODEC_VLC_MB_HEADER_INFO		DOS_REG_ADDR(HCODEC_VLC_MB_HEADER_INFO)
+#define HCODEC_VLC_P_MB_HEADER_INFO		0x1d3f
+#define P_HCODEC_VLC_P_MB_HEADER_INFO		DOS_REG_ADDR(HCODEC_VLC_P_MB_HEADER_INFO)
+#define HCODEC_VLC_COEFF_BUF_STATUS		0x1d40
+#define P_HCODEC_VLC_COEFF_BUF_STATUS		DOS_REG_ADDR(HCODEC_VLC_COEFF_BUF_STATUS)
+#define HCODEC_VLC_COEFF_RD_REQ			0x1d41
+#define P_HCODEC_VLC_COEFF_RD_REQ		DOS_REG_ADDR(HCODEC_VLC_COEFF_RD_REQ)
+#define HCODEC_VLC_COEFF			0x1d42
+#define P_HCODEC_VLC_COEFF			DOS_REG_ADDR(HCODEC_VLC_COEFF)
+#define HCODEC_VLC_COEFF_INFO			0x1d43
+#define P_HCODEC_VLC_COEFF_INFO			DOS_REG_ADDR(HCODEC_VLC_COEFF_INFO)
+#define HCODEC_VLC_DC_BUF_STATUS		0x1d44
+#define P_HCODEC_VLC_DC_BUF_STATUS		DOS_REG_ADDR(HCODEC_VLC_DC_BUF_STATUS)
+#define HCODEC_VLC_DC_RD_REQ			0x1d45
+#define P_HCODEC_VLC_DC_RD_REQ			DOS_REG_ADDR(HCODEC_VLC_DC_RD_REQ)
+#define HCODEC_VLC_DC				0x1d46
+#define P_HCODEC_VLC_DC				DOS_REG_ADDR(HCODEC_VLC_DC)
+#define HCODEC_VLC_DC_INFO			0x1d47
+#define P_HCODEC_VLC_DC_INFO			DOS_REG_ADDR(HCODEC_VLC_DC_INFO)
+#define HCODEC_VLC_MV_INDEX			0x1d48
+#define P_HCODEC_VLC_MV_INDEX			DOS_REG_ADDR(HCODEC_VLC_MV_INDEX)
+#define HCODEC_VLC_MV				0x1d49
+#define P_HCODEC_VLC_MV				DOS_REG_ADDR(HCODEC_VLC_MV)
+#define HCODEC_HENC_TOP_MV_0			0x1d4a
+#define P_HCODEC_HENC_TOP_MV_0			DOS_REG_ADDR(HCODEC_HENC_TOP_MV_0)
+#define HCODEC_HENC_TOP_MV_1			0x1d4b
+#define P_HCODEC_HENC_TOP_MV_1			DOS_REG_ADDR(HCODEC_HENC_TOP_MV_1)
+#define HCODEC_HENC_TOP_MV_2			0x1d4c
+#define P_HCODEC_HENC_TOP_MV_2			DOS_REG_ADDR(HCODEC_HENC_TOP_MV_2)
+#define HCODEC_HENC_TOP_MV_3			0x1d4d
+#define P_HCODEC_HENC_TOP_MV_3			DOS_REG_ADDR(HCODEC_HENC_TOP_MV_3)
+#define HCODEC_HENC_LEFT_MV_0			0x1d4e
+#define P_HCODEC_HENC_LEFT_MV_0			DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_0)
+#define HCODEC_HENC_LEFT_MV_1			0x1d4f
+#define P_HCODEC_HENC_LEFT_MV_1			DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_1)
+#define HCODEC_HENC_LEFT_MV_2			0x1d50
+#define P_HCODEC_HENC_LEFT_MV_2			DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_2)
+#define HCODEC_HENC_LEFT_MV_3			0x1d51
+#define P_HCODEC_HENC_LEFT_MV_3			DOS_REG_ADDR(HCODEC_HENC_LEFT_MV_3)
+#define HCODEC_TOP_LEFT_READY			0x1d52
+#define P_HCODEC_TOP_LEFT_READY			DOS_REG_ADDR(HCODEC_TOP_LEFT_READY)
+#define HCODEC_MB_SKIP_RUN			0x1d53
+#define P_HCODEC_MB_SKIP_RUN			DOS_REG_ADDR(HCODEC_MB_SKIP_RUN)
+#define HCODEC_VLC_HCMD_CONFIG			0x1d54
+#define P_HCODEC_VLC_HCMD_CONFIG		DOS_REG_ADDR(HCODEC_VLC_HCMD_CONFIG)
+#define HCODEC_VLC_HCMD_DBLK_INFO		0x1d55
+#define P_HCODEC_VLC_HCMD_DBLK_INFO		DOS_REG_ADDR(HCODEC_VLC_HCMD_DBLK_INFO)
+#define HCODEC_VLC_DBG_IDX			0x1d56
+#define P_HCODEC_VLC_DBG_IDX			DOS_REG_ADDR(HCODEC_VLC_DBG_IDX)
+#define HCODEC_VLC_DBG_READ			0x1d57
+#define P_HCODEC_VLC_DBG_READ			DOS_REG_ADDR(HCODEC_VLC_DBG_READ)
+#define HCODEC_VLC_JPEG_CTRL			0x1d58
+#define P_HCODEC_VLC_JPEG_CTRL			DOS_REG_ADDR(HCODEC_VLC_JPEG_CTRL)
+#define HCODEC_VLC_JPEG_COEFF_BUF_STAT		0x1d59
+#define P_HCODEC_VLC_JPEG_COEFF_BUF_STAT	DOS_REG_ADDR(HCODEC_VLC_JPEG_COEFF_BUF_STAT)
+#define HCODEC_VLC_HUFFMAN_ADDR			0x1d5a
+#define P_HCODEC_VLC_HUFFMAN_ADDR		DOS_REG_ADDR(HCODEC_VLC_HUFFMAN_ADDR)
+#define HCODEC_VLC_HUFFMAN_DATA			0x1d5b
+#define P_HCODEC_VLC_HUFFMAN_DATA		DOS_REG_ADDR(HCODEC_VLC_HUFFMAN_DATA)
+#define HCODEC_VLC_ENC_MV_BITS			0x1d5c
+#define P_HCODEC_VLC_ENC_MV_BITS		DOS_REG_ADDR(HCODEC_VLC_ENC_MV_BITS)
+#define HCODEC_VLC_ENC_COEFF_BITS		0x1d5d
+#define P_HCODEC_VLC_ENC_COEFF_BITS		DOS_REG_ADDR(HCODEC_VLC_ENC_COEFF_BITS)
+#define HCODEC_QDCT_STATUS_CTRL			0x1f00
+#define P_HCODEC_QDCT_STATUS_CTRL		DOS_REG_ADDR(HCODEC_QDCT_STATUS_CTRL)
+#define HCODEC_QDCT_CONFIG			0x1f01
+#define P_HCODEC_QDCT_CONFIG			DOS_REG_ADDR(HCODEC_QDCT_CONFIG)
+#define HCODEC_IGNORE_CONFIG			0x1f02
+#define P_HCODEC_IGNORE_CONFIG			DOS_REG_ADDR(HCODEC_IGNORE_CONFIG)
+#define HCODEC_IGNORE_CONFIG_2			0x1f03
+#define P_HCODEC_IGNORE_CONFIG_2		DOS_REG_ADDR(HCODEC_IGNORE_CONFIG_2)
+#define HCODEC_QDCT_MB_START_PTR		0x1f10
+#define P_HCODEC_QDCT_MB_START_PTR		DOS_REG_ADDR(HCODEC_QDCT_MB_START_PTR)
+#define HCODEC_QDCT_MB_END_PTR			0x1f11
+#define P_HCODEC_QDCT_MB_END_PTR		DOS_REG_ADDR(HCODEC_QDCT_MB_END_PTR)
+#define HCODEC_QDCT_MB_WR_PTR			0x1f12
+#define P_HCODEC_QDCT_MB_WR_PTR			DOS_REG_ADDR(HCODEC_QDCT_MB_WR_PTR)
+#define HCODEC_QDCT_MB_RD_PTR			0x1f13
+#define P_HCODEC_QDCT_MB_RD_PTR			DOS_REG_ADDR(HCODEC_QDCT_MB_RD_PTR)
+#define HCODEC_QDCT_MB_LEVEL			0x1f14
+#define P_HCODEC_QDCT_MB_LEVEL			DOS_REG_ADDR(HCODEC_QDCT_MB_LEVEL)
+#define HCODEC_QDCT_MB_CONTROL			0x1f15
+#define P_HCODEC_QDCT_MB_CONTROL		DOS_REG_ADDR(HCODEC_QDCT_MB_CONTROL)
+#define HCODEC_QDCT_MB_MEM_CTL			0x1f16
+#define P_HCODEC_QDCT_MB_MEM_CTL		DOS_REG_ADDR(HCODEC_QDCT_MB_MEM_CTL)
+#define HCODEC_QDCT_MB_BUFF			0x1f17
+#define P_HCODEC_QDCT_MB_BUFF			DOS_REG_ADDR(HCODEC_QDCT_MB_BUFF)
+#define HCODEC_QDCT_MB_MAGIC_WORD		0x1f18
+#define P_HCODEC_QDCT_MB_MAGIC_WORD		DOS_REG_ADDR(HCODEC_QDCT_MB_MAGIC_WORD)
+#define HCODEC_QDCT_DCT_STATUS			0x1f19
+#define P_HCODEC_QDCT_DCT_STATUS		DOS_REG_ADDR(HCODEC_QDCT_DCT_STATUS)
+#define HCODEC_QDCT_Q_STATUS			0x1f1a
+#define P_HCODEC_QDCT_Q_STATUS			DOS_REG_ADDR(HCODEC_QDCT_Q_STATUS)
+#define HCODEC_QDCT_PIC_INFO			0x1f1b
+#define P_HCODEC_QDCT_PIC_INFO			DOS_REG_ADDR(HCODEC_QDCT_PIC_INFO)
+#define HCODEC_QDCT_Q_QUANT_I			0x1f1c
+#define P_HCODEC_QDCT_Q_QUANT_I			DOS_REG_ADDR(HCODEC_QDCT_Q_QUANT_I)
+#define HCODEC_QDCT_Q_QUANT_P			0x1f1d
+#define P_HCODEC_QDCT_Q_QUANT_P			DOS_REG_ADDR(HCODEC_QDCT_Q_QUANT_P)
+#define HCODEC_QDCT_MB_PAUSE_CTL		0x1f1e
+#define P_HCODEC_QDCT_MB_PAUSE_CTL		DOS_REG_ADDR(HCODEC_QDCT_MB_PAUSE_CTL)
+#define HCODEC_QDCT_TOP_CONTROL			0x1f1f
+#define P_HCODEC_QDCT_TOP_CONTROL		DOS_REG_ADDR(HCODEC_QDCT_TOP_CONTROL)
+#define HCODEC_QDCT_TOP_BASE_MEM		0x1f20
+#define P_HCODEC_QDCT_TOP_BASE_MEM		DOS_REG_ADDR(HCODEC_QDCT_TOP_BASE_MEM)
+#define HCODEC_QDCT_TOP_MEM_CTL			0x1f21
+#define P_HCODEC_QDCT_TOP_MEM_CTL		DOS_REG_ADDR(HCODEC_QDCT_TOP_MEM_CTL)
+#define HCODEC_QDCT_TOP_WRRSP			0x1f22
+#define P_HCODEC_QDCT_TOP_WRRSP			DOS_REG_ADDR(HCODEC_QDCT_TOP_WRRSP)
+#define HCODEC_QDCT_DBG_IDX			0x1f23
+#define P_HCODEC_QDCT_DBG_IDX			DOS_REG_ADDR(HCODEC_QDCT_DBG_IDX)
+#define HCODEC_QDCT_DBG_READ			0x1f24
+#define P_HCODEC_QDCT_DBG_READ			DOS_REG_ADDR(HCODEC_QDCT_DBG_READ)
+#define HCODEC_QDCT_JPEG_CTRL			0x1f25
+#define P_HCODEC_QDCT_JPEG_CTRL			DOS_REG_ADDR(HCODEC_QDCT_JPEG_CTRL)
+#define HCODEC_QDCT_JPEG_X_START_END		0x1f26
+#define P_HCODEC_QDCT_JPEG_X_START_END		DOS_REG_ADDR(HCODEC_QDCT_JPEG_X_START_END)
+#define HCODEC_QDCT_JPEG_Y_START_END		0x1f27
+#define P_HCODEC_QDCT_JPEG_Y_START_END		DOS_REG_ADDR(HCODEC_QDCT_JPEG_Y_START_END)
+#define HCODEC_QDCT_JPEG_QUANT_ADDR		0x1f28
+#define P_HCODEC_QDCT_JPEG_QUANT_ADDR		DOS_REG_ADDR(HCODEC_QDCT_JPEG_QUANT_ADDR)
+#define HCODEC_QDCT_JPEG_QUANT_DATA		0x1f29
+#define P_HCODEC_QDCT_JPEG_QUANT_DATA		DOS_REG_ADDR(HCODEC_QDCT_JPEG_QUANT_DATA)
+#define HCODEC_QDCT_JPEG_SOF_RESUME		0x1f2a
+#define P_HCODEC_QDCT_JPEG_SOF_RESUME		DOS_REG_ADDR(HCODEC_QDCT_JPEG_SOF_RESUME)
+#define HCODEC_QDCT_JPEG_DCT_STATUS0		0x1f2b
+#define P_HCODEC_QDCT_JPEG_DCT_STATUS0		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_STATUS0)
+#define HCODEC_QDCT_JPEG_DCT_STATUS1		0x1f2c
+#define P_HCODEC_QDCT_JPEG_DCT_STATUS1		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_STATUS1)
+#define HCODEC_QDCT_JPEG_DCT_COEFF01		0x1f2d
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF01		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF01)
+#define HCODEC_QDCT_JPEG_DCT_COEFF23		0x1f2e
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF23		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF23)
+#define HCODEC_QDCT_JPEG_DCT_COEFF45		0x1f2f
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF45		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF45)
+#define HCODEC_QDCT_JPEG_DCT_COEFF67		0x1f30
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF67		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF67)
+#define HCODEC_QDCT_JPEG_DCT_COEFF89		0x1f31
+#define P_HCODEC_QDCT_JPEG_DCT_COEFF89		DOS_REG_ADDR(HCODEC_QDCT_JPEG_DCT_COEFF89)
+#define HCODEC_QDCT_I_PRED_REF_WR_IDX		0x1f32
+#define P_HCODEC_QDCT_I_PRED_REF_WR_IDX		DOS_REG_ADDR(HCODEC_QDCT_I_PRED_REF_WR_IDX)
+#define HCODEC_QDCT_I_PRED_REF_WR_DATA		0x1f33
+#define P_HCODEC_QDCT_I_PRED_REF_WR_DATA	DOS_REG_ADDR(HCODEC_QDCT_I_PRED_REF_WR_DATA)
+#define HCODEC_IE_CONTROL			0x1f40
+#define P_HCODEC_IE_CONTROL			DOS_REG_ADDR(HCODEC_IE_CONTROL)
+#define HCODEC_IE_MB_POSITION			0x1f41
+#define P_HCODEC_IE_MB_POSITION			DOS_REG_ADDR(HCODEC_IE_MB_POSITION)
+#define HCODEC_IE_ME_MB_INFO			0x1f42
+#define P_HCODEC_IE_ME_MB_INFO			DOS_REG_ADDR(HCODEC_IE_ME_MB_INFO)
+#define HCODEC_SAD_CONTROL			0x1f43
+#define P_HCODEC_SAD_CONTROL			DOS_REG_ADDR(HCODEC_SAD_CONTROL)
+#define HCODEC_IE_RESULT_BUFFER			0x1f44
+#define P_HCODEC_IE_RESULT_BUFFER		DOS_REG_ADDR(HCODEC_IE_RESULT_BUFFER)
+#define HCODEC_IE_I4_PRED_MODE_HI		0x1f45
+#define P_HCODEC_IE_I4_PRED_MODE_HI		DOS_REG_ADDR(HCODEC_IE_I4_PRED_MODE_HI)
+#define HCODEC_IE_I4_PRED_MODE_LO		0x1f46
+#define P_HCODEC_IE_I4_PRED_MODE_LO		DOS_REG_ADDR(HCODEC_IE_I4_PRED_MODE_LO)
+#define HCODEC_IE_C_PRED_MODE			0x1f47
+#define P_HCODEC_IE_C_PRED_MODE			DOS_REG_ADDR(HCODEC_IE_C_PRED_MODE)
+#define HCODEC_IE_CUR_REF_SEL			0x1f48
+#define P_HCODEC_IE_CUR_REF_SEL			DOS_REG_ADDR(HCODEC_IE_CUR_REF_SEL)
+#define HCODEC_ME_CONTROL			0x1f49
+#define P_HCODEC_ME_CONTROL			DOS_REG_ADDR(HCODEC_ME_CONTROL)
+#define HCODEC_ME_START_POSITION		0x1f4a
+#define P_HCODEC_ME_START_POSITION		DOS_REG_ADDR(HCODEC_ME_START_POSITION)
+#define HCODEC_ME_STATUS			0x1f4b
+#define P_HCODEC_ME_STATUS			DOS_REG_ADDR(HCODEC_ME_STATUS)
+#define HCODEC_ME_DEBUG				0x1f4c
+#define P_HCODEC_ME_DEBUG			DOS_REG_ADDR(HCODEC_ME_DEBUG)
+#define HCODEC_ME_SKIP_LINE			0x1f4d
+#define P_HCODEC_ME_SKIP_LINE			DOS_REG_ADDR(HCODEC_ME_SKIP_LINE)
+#define HCODEC_ME_AB_MEM_CTL			0x1f4e
+#define P_HCODEC_ME_AB_MEM_CTL			DOS_REG_ADDR(HCODEC_ME_AB_MEM_CTL)
+#define HCODEC_ME_PIC_INFO			0x1f4f
+#define P_HCODEC_ME_PIC_INFO			DOS_REG_ADDR(HCODEC_ME_PIC_INFO)
+#define HCODEC_ME_SAD_ENOUGH_01			0x1f50
+#define P_HCODEC_ME_SAD_ENOUGH_01		DOS_REG_ADDR(HCODEC_ME_SAD_ENOUGH_01)
+#define HCODEC_ME_SAD_ENOUGH_23			0x1f51
+#define P_HCODEC_ME_SAD_ENOUGH_23		DOS_REG_ADDR(HCODEC_ME_SAD_ENOUGH_23)
+#define HCODEC_ME_STEP0_CLOSE_MV		0x1f52
+#define P_HCODEC_ME_STEP0_CLOSE_MV		DOS_REG_ADDR(HCODEC_ME_STEP0_CLOSE_MV)
+#define HCODEC_ME_F_SKIP_SAD			0x1f53
+#define P_HCODEC_ME_F_SKIP_SAD			DOS_REG_ADDR(HCODEC_ME_F_SKIP_SAD)
+#define HCODEC_ME_F_SKIP_WEIGHT			0x1f54
+#define P_HCODEC_ME_F_SKIP_WEIGHT		DOS_REG_ADDR(HCODEC_ME_F_SKIP_WEIGHT)
+#define HCODEC_ME_MV_MERGE_CTL			0x1f55
+#define P_HCODEC_ME_MV_MERGE_CTL		DOS_REG_ADDR(HCODEC_ME_MV_MERGE_CTL)
+#define HCODEC_ME_MV_WEIGHT_01			0x1f56
+#define P_HCODEC_ME_MV_WEIGHT_01		DOS_REG_ADDR(HCODEC_ME_MV_WEIGHT_01)
+#define HCODEC_ME_MV_WEIGHT_23			0x1f57
+#define P_HCODEC_ME_MV_WEIGHT_23		DOS_REG_ADDR(HCODEC_ME_MV_WEIGHT_23)
+#define HCODEC_ME_SAD_RANGE_INC			0x1f58
+#define P_HCODEC_ME_SAD_RANGE_INC		DOS_REG_ADDR(HCODEC_ME_SAD_RANGE_INC)
+#define HCODEC_ME_SUB_MERGE_CTL			0x1f59
+#define P_HCODEC_ME_SUB_MERGE_CTL		DOS_REG_ADDR(HCODEC_ME_SUB_MERGE_CTL)
+#define HCODEC_ME_SUB_REF_MV_CTL		0x1f5a
+#define P_HCODEC_ME_SUB_REF_MV_CTL		DOS_REG_ADDR(HCODEC_ME_SUB_REF_MV_CTL)
+#define HCODEC_ME_SUB_ANY_WEIGHT_SAD		0x1f5b
+#define P_HCODEC_ME_SUB_ANY_WEIGHT_SAD		DOS_REG_ADDR(HCODEC_ME_SUB_ANY_WEIGHT_SAD)
+#define HCODEC_ME_SUB_FIX_SAD			0x1f5c
+#define P_HCODEC_ME_SUB_FIX_SAD			DOS_REG_ADDR(HCODEC_ME_SUB_FIX_SAD)
+#define HCODEC_ME_SUB_FIX_MIN_SAD		0x1f5d
+#define P_HCODEC_ME_SUB_FIX_MIN_SAD		DOS_REG_ADDR(HCODEC_ME_SUB_FIX_MIN_SAD)
+#define HCODEC_ME_SUB_SNAP_GLITCH		0x1f5e
+#define P_HCODEC_ME_SUB_SNAP_GLITCH		DOS_REG_ADDR(HCODEC_ME_SUB_SNAP_GLITCH)
+#define HCODEC_ME_SUB_ACT_CTL			0x1f5f
+#define P_HCODEC_ME_SUB_ACT_CTL			DOS_REG_ADDR(HCODEC_ME_SUB_ACT_CTL)
+
+
+/*
+ * ucode/ddr3_reg.h
+ */
+#define AM_DDR_PLL_CNTL				0x0400
+#define P_AM_DDR_PLL_CNTL			MMC_REG_ADDR(AM_DDR_PLL_CNTL)
+#define AM_DDR_PLL_CNTL1			0x0404
+#define P_AM_DDR_PLL_CNTL1			MMC_REG_ADDR(AM_DDR_PLL_CNTL1)
+#define AM_DDR_PLL_CNTL2			0x0408
+#define P_AM_DDR_PLL_CNTL2			MMC_REG_ADDR(AM_DDR_PLL_CNTL2)
+#define AM_DDR_PLL_CNTL3			0x040c
+#define P_AM_DDR_PLL_CNTL3			MMC_REG_ADDR(AM_DDR_PLL_CNTL3)
+#define AM_DDR_PLL_CNTL4			0x0410
+#define P_AM_DDR_PLL_CNTL4			MMC_REG_ADDR(AM_DDR_PLL_CNTL4)
+#define AM_DDR_PLL_STS				0x0414
+#define P_AM_DDR_PLL_STS			MMC_REG_ADDR(AM_DDR_PLL_STS)
+#define DDR_CLK_CNTL				0x0418
+#define P_DDR_CLK_CNTL				MMC_REG_ADDR(DDR_CLK_CNTL)
+#define DDR_CLK_STS				0x041c
+#define P_DDR_CLK_STS				MMC_REG_ADDR(DDR_CLK_STS)
+#define DDR0_CLK_CTRL				0x0800
+#define P_DDR0_CLK_CTRL				MMC_REG_ADDR(DDR0_CLK_CTRL)
+#define DDR0_SOFT_RESET				0x0804
+#define P_DDR0_SOFT_RESET			MMC_REG_ADDR(DDR0_SOFT_RESET)
+#define DDR0_APD_CTRL				0x0808
+#define P_DDR0_APD_CTRL				MMC_REG_ADDR(DDR0_APD_CTRL)
+#define DDR0_PCTL_SCFG				0x0000
+#define P_DDR0_PCTL_SCFG			MMC_REG_ADDR(DDR0_PCTL_SCFG)
+#define DDR0_PCTL_SCTL				0x0004
+#define P_DDR0_PCTL_SCTL			MMC_REG_ADDR(DDR0_PCTL_SCTL)
+#define DDR0_PCTL_STAT				0x0008
+#define P_DDR0_PCTL_STAT			MMC_REG_ADDR(DDR0_PCTL_STAT)
+#define DDR0_PCTL_INTRSTAT			0x000c
+#define P_DDR0_PCTL_INTRSTAT			MMC_REG_ADDR(DDR0_PCTL_INTRSTAT)
+#define DDR0_PCTL_POWSTAT			0x0048
+#define P_DDR0_PCTL_POWSTAT			MMC_REG_ADDR(DDR0_PCTL_POWSTAT)
+#define DDR0_PCTL_MRRSTAT0			0x0064
+#define P_DDR0_PCTL_MRRSTAT0			MMC_REG_ADDR(DDR0_PCTL_MRRSTAT0)
+#define DDR0_PCTL_CMDTSTAT			0x004c
+#define P_DDR0_PCTL_CMDTSTAT			MMC_REG_ADDR(DDR0_PCTL_CMDTSTAT)
+#define DDR0_PCTL_MCMD				0x0040
+#define P_DDR0_PCTL_MCMD			MMC_REG_ADDR(DDR0_PCTL_MCMD)
+#define DDR0_PCTL_MRRSTAT1			0x0068
+#define P_DDR0_PCTL_MRRSTAT1			MMC_REG_ADDR(DDR0_PCTL_MRRSTAT1)
+#define DDR0_PCTL_MRRCFG0			0x0060
+#define P_DDR0_PCTL_MRRCFG0			MMC_REG_ADDR(DDR0_PCTL_MRRCFG0)
+#define DDR0_PCTL_CMDTSTATEN			0x0050
+#define P_DDR0_PCTL_CMDTSTATEN			MMC_REG_ADDR(DDR0_PCTL_CMDTSTATEN)
+#define DDR0_PCTL_POWCTL			0x0044
+#define P_DDR0_PCTL_POWCTL			MMC_REG_ADDR(DDR0_PCTL_POWCTL)
+#define DDR0_PCTL_PPCFG				0x0084
+#define P_DDR0_PCTL_PPCFG			MMC_REG_ADDR(DDR0_PCTL_PPCFG)
+#define DDR0_PCTL_LPDDR23ZQCFG			0x008c
+#define P_DDR0_PCTL_LPDDR23ZQCFG		MMC_REG_ADDR(DDR0_PCTL_LPDDR23ZQCFG)
+#define DDR0_PCTL_MCFG1				0x007c
+#define P_DDR0_PCTL_MCFG1			MMC_REG_ADDR(DDR0_PCTL_MCFG1)
+#define DDR0_PCTL_MSTAT				0x0088
+#define P_DDR0_PCTL_MSTAT			MMC_REG_ADDR(DDR0_PCTL_MSTAT)
+#define DDR0_PCTL_MCFG				0x0080
+#define P_DDR0_PCTL_MCFG			MMC_REG_ADDR(DDR0_PCTL_MCFG)
+#define DDR0_PCTL_DTUAWDT			0x00b0
+#define P_DDR0_PCTL_DTUAWDT			MMC_REG_ADDR(DDR0_PCTL_DTUAWDT)
+#define DDR0_PCTL_DTUPRD2			0x00a8
+#define P_DDR0_PCTL_DTUPRD2			MMC_REG_ADDR(DDR0_PCTL_DTUPRD2)
+#define DDR0_PCTL_DTUPRD3			0x00ac
+#define P_DDR0_PCTL_DTUPRD3			MMC_REG_ADDR(DDR0_PCTL_DTUPRD3)
+#define DDR0_PCTL_DTUNE				0x009c
+#define P_DDR0_PCTL_DTUNE			MMC_REG_ADDR(DDR0_PCTL_DTUNE)
+#define DDR0_PCTL_DTUPDES			0x0094
+#define P_DDR0_PCTL_DTUPDES			MMC_REG_ADDR(DDR0_PCTL_DTUPDES)
+#define DDR0_PCTL_DTUNA				0x0098
+#define P_DDR0_PCTL_DTUNA			MMC_REG_ADDR(DDR0_PCTL_DTUNA)
+#define DDR0_PCTL_DTUPRD0			0x00a0
+#define P_DDR0_PCTL_DTUPRD0			MMC_REG_ADDR(DDR0_PCTL_DTUPRD0)
+#define DDR0_PCTL_DTUPRD1			0x00a4
+#define P_DDR0_PCTL_DTUPRD1			MMC_REG_ADDR(DDR0_PCTL_DTUPRD1)
+#define DDR0_PCTL_TCKSRE			0x0124
+#define P_DDR0_PCTL_TCKSRE			MMC_REG_ADDR(DDR0_PCTL_TCKSRE)
+#define DDR0_PCTL_TZQCSI			0x011c
+#define P_DDR0_PCTL_TZQCSI			MMC_REG_ADDR(DDR0_PCTL_TZQCSI)
+#define DDR0_PCTL_TINIT				0x00c4
+#define P_DDR0_PCTL_TINIT			MMC_REG_ADDR(DDR0_PCTL_TINIT)
+#define DDR0_PCTL_TDPD				0x0144
+#define P_DDR0_PCTL_TDPD			MMC_REG_ADDR(DDR0_PCTL_TDPD)
+#define DDR0_PCTL_TOGCNT1U			0x00c0
+#define P_DDR0_PCTL_TOGCNT1U			MMC_REG_ADDR(DDR0_PCTL_TOGCNT1U)
+#define DDR0_PCTL_TCKE				0x012c
+#define P_DDR0_PCTL_TCKE			MMC_REG_ADDR(DDR0_PCTL_TCKE)
+#define DDR0_PCTL_TMOD				0x0130
+#define P_DDR0_PCTL_TMOD			MMC_REG_ADDR(DDR0_PCTL_TMOD)
+#define DDR0_PCTL_TEXSR				0x010c
+#define P_DDR0_PCTL_TEXSR			MMC_REG_ADDR(DDR0_PCTL_TEXSR)
+#define DDR0_PCTL_TAL				0x00e4
+#define P_DDR0_PCTL_TAL				MMC_REG_ADDR(DDR0_PCTL_TAL)
+#define DDR0_PCTL_TRTP				0x0100
+#define P_DDR0_PCTL_TRTP			MMC_REG_ADDR(DDR0_PCTL_TRTP)
+#define DDR0_PCTL_TCKSRX			0x0128
+#define P_DDR0_PCTL_TCKSRX			MMC_REG_ADDR(DDR0_PCTL_TCKSRX)
+#define DDR0_PCTL_TRTW				0x00e0
+#define P_DDR0_PCTL_TRTW			MMC_REG_ADDR(DDR0_PCTL_TRTW)
+#define DDR0_PCTL_TCWL				0x00ec
+#define P_DDR0_PCTL_TCWL			MMC_REG_ADDR(DDR0_PCTL_TCWL)
+#define DDR0_PCTL_TWR				0x0104
+#define P_DDR0_PCTL_TWR				MMC_REG_ADDR(DDR0_PCTL_TWR)
+#define DDR0_PCTL_TCL				0x00e8
+#define P_DDR0_PCTL_TCL				MMC_REG_ADDR(DDR0_PCTL_TCL)
+#define DDR0_PCTL_TDQS				0x0120
+#define P_DDR0_PCTL_TDQS			MMC_REG_ADDR(DDR0_PCTL_TDQS)
+#define DDR0_PCTL_TRSTH				0x00c8
+#define P_DDR0_PCTL_TRSTH			MMC_REG_ADDR(DDR0_PCTL_TRSTH)
+#define DDR0_PCTL_TRCD				0x00f8
+#define P_DDR0_PCTL_TRCD			MMC_REG_ADDR(DDR0_PCTL_TRCD)
+#define DDR0_PCTL_TXP				0x0110
+#define P_DDR0_PCTL_TXP				MMC_REG_ADDR(DDR0_PCTL_TXP)
+#define DDR0_PCTL_TOGCNT100N			0x00cc
+#define P_DDR0_PCTL_TOGCNT100N			MMC_REG_ADDR(DDR0_PCTL_TOGCNT100N)
+#define DDR0_PCTL_TMRD				0x00d4
+#define P_DDR0_PCTL_TMRD			MMC_REG_ADDR(DDR0_PCTL_TMRD)
+#define DDR0_PCTL_TRSTL				0x0134
+#define P_DDR0_PCTL_TRSTL			MMC_REG_ADDR(DDR0_PCTL_TRSTL)
+#define DDR0_PCTL_TREFI				0x00d0
+#define P_DDR0_PCTL_TREFI			MMC_REG_ADDR(DDR0_PCTL_TREFI)
+#define DDR0_PCTL_TRAS				0x00f0
+#define P_DDR0_PCTL_TRAS			MMC_REG_ADDR(DDR0_PCTL_TRAS)
+#define DDR0_PCTL_TREFI_MEM_DDR3		0x0148
+#define P_DDR0_PCTL_TREFI_MEM_DDR3		MMC_REG_ADDR(DDR0_PCTL_TREFI_MEM_DDR3)
+#define DDR0_PCTL_TWTR				0x0108
+#define P_DDR0_PCTL_TWTR			MMC_REG_ADDR(DDR0_PCTL_TWTR)
+#define DDR0_PCTL_TRC				0x00f4
+#define P_DDR0_PCTL_TRC				MMC_REG_ADDR(DDR0_PCTL_TRC)
+#define DDR0_PCTL_TRFC				0x00d8
+#define P_DDR0_PCTL_TRFC			MMC_REG_ADDR(DDR0_PCTL_TRFC)
+#define DDR0_PCTL_TMRR				0x013c
+#define P_DDR0_PCTL_TMRR			MMC_REG_ADDR(DDR0_PCTL_TMRR)
+#define DDR0_PCTL_TCKESR			0x0140
+#define P_DDR0_PCTL_TCKESR			MMC_REG_ADDR(DDR0_PCTL_TCKESR)
+#define DDR0_PCTL_TZQCL				0x0138
+#define P_DDR0_PCTL_TZQCL			MMC_REG_ADDR(DDR0_PCTL_TZQCL)
+#define DDR0_PCTL_TRRD				0x00fc
+#define P_DDR0_PCTL_TRRD			MMC_REG_ADDR(DDR0_PCTL_TRRD)
+#define DDR0_PCTL_TRP				0x00dc
+#define P_DDR0_PCTL_TRP				MMC_REG_ADDR(DDR0_PCTL_TRP)
+#define DDR0_PCTL_TZQCS				0x0118
+#define P_DDR0_PCTL_TZQCS			MMC_REG_ADDR(DDR0_PCTL_TZQCS)
+#define DDR0_PCTL_TXPDLL			0x0114
+#define P_DDR0_PCTL_TXPDLL			MMC_REG_ADDR(DDR0_PCTL_TXPDLL)
+#define DDR0_PCTL_ECCCFG			0x0180
+#define P_DDR0_PCTL_ECCCFG			MMC_REG_ADDR(DDR0_PCTL_ECCCFG)
+#define DDR0_PCTL_ECCLOG			0x018c
+#define P_DDR0_PCTL_ECCLOG			MMC_REG_ADDR(DDR0_PCTL_ECCLOG)
+#define DDR0_PCTL_ECCCLR			0x0188
+#define P_DDR0_PCTL_ECCCLR			MMC_REG_ADDR(DDR0_PCTL_ECCCLR)
+#define DDR0_PCTL_ECCTST			0x0184
+#define P_DDR0_PCTL_ECCTST			MMC_REG_ADDR(DDR0_PCTL_ECCTST)
+#define DDR0_PCTL_DTUWD0			0x0210
+#define P_DDR0_PCTL_DTUWD0			MMC_REG_ADDR(DDR0_PCTL_DTUWD0)
+#define DDR0_PCTL_DTUWD1			0x0214
+#define P_DDR0_PCTL_DTUWD1			MMC_REG_ADDR(DDR0_PCTL_DTUWD1)
+#define DDR0_PCTL_DTUWACTL			0x0200
+#define P_DDR0_PCTL_DTUWACTL			MMC_REG_ADDR(DDR0_PCTL_DTUWACTL)
+#define DDR0_PCTL_DTULFSRRD			0x0238
+#define P_DDR0_PCTL_DTULFSRRD			MMC_REG_ADDR(DDR0_PCTL_DTULFSRRD)
+#define DDR0_PCTL_DTUWD2			0x0218
+#define P_DDR0_PCTL_DTUWD2			MMC_REG_ADDR(DDR0_PCTL_DTUWD2)
+#define DDR0_PCTL_DTUWD3			0x021c
+#define P_DDR0_PCTL_DTUWD3			MMC_REG_ADDR(DDR0_PCTL_DTUWD3)
+#define DDR0_PCTL_DTULFSRWD			0x0234
+#define P_DDR0_PCTL_DTULFSRWD			MMC_REG_ADDR(DDR0_PCTL_DTULFSRWD)
+#define DDR0_PCTL_DTURACTL			0x0204
+#define P_DDR0_PCTL_DTURACTL			MMC_REG_ADDR(DDR0_PCTL_DTURACTL)
+#define DDR0_PCTL_DTUWDM			0x0220
+#define P_DDR0_PCTL_DTUWDM			MMC_REG_ADDR(DDR0_PCTL_DTUWDM)
+#define DDR0_PCTL_DTURD0			0x0224
+#define P_DDR0_PCTL_DTURD0			MMC_REG_ADDR(DDR0_PCTL_DTURD0)
+#define DDR0_PCTL_DTURD1			0x0228
+#define P_DDR0_PCTL_DTURD1			MMC_REG_ADDR(DDR0_PCTL_DTURD1)
+#define DDR0_PCTL_DTURD2			0x022c
+#define P_DDR0_PCTL_DTURD2			MMC_REG_ADDR(DDR0_PCTL_DTURD2)
+#define DDR0_PCTL_DTURD3			0x0230
+#define P_DDR0_PCTL_DTURD3			MMC_REG_ADDR(DDR0_PCTL_DTURD3)
+#define DDR0_PCTL_DTUCFG			0x0208
+#define P_DDR0_PCTL_DTUCFG			MMC_REG_ADDR(DDR0_PCTL_DTUCFG)
+#define DDR0_PCTL_DTUEAF			0x023c
+#define P_DDR0_PCTL_DTUEAF			MMC_REG_ADDR(DDR0_PCTL_DTUEAF)
+#define DDR0_PCTL_DTUECTL			0x020c
+#define P_DDR0_PCTL_DTUECTL			MMC_REG_ADDR(DDR0_PCTL_DTUECTL)
+#define DDR0_PCTL_DFIODTCFG1			0x0248
+#define P_DDR0_PCTL_DFIODTCFG1			MMC_REG_ADDR(DDR0_PCTL_DFIODTCFG1)
+#define DDR0_PCTL_DFITCTRLDELAY			0x0240
+#define P_DDR0_PCTL_DFITCTRLDELAY		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLDELAY)
+#define DDR0_PCTL_DFIODTRANKMAP			0x024c
+#define P_DDR0_PCTL_DFIODTRANKMAP		MMC_REG_ADDR(DDR0_PCTL_DFIODTRANKMAP)
+#define DDR0_PCTL_DFIODTCFG			0x0244
+#define P_DDR0_PCTL_DFIODTCFG			MMC_REG_ADDR(DDR0_PCTL_DFIODTCFG)
+#define DDR0_PCTL_DFITPHYWRLAT			0x0254
+#define P_DDR0_PCTL_DFITPHYWRLAT		MMC_REG_ADDR(DDR0_PCTL_DFITPHYWRLAT)
+#define DDR0_PCTL_DFITPHYWRDATA			0x0250
+#define P_DDR0_PCTL_DFITPHYWRDATA		MMC_REG_ADDR(DDR0_PCTL_DFITPHYWRDATA)
+#define DDR0_PCTL_DFITRDDATAEN			0x0260
+#define P_DDR0_PCTL_DFITRDDATAEN		MMC_REG_ADDR(DDR0_PCTL_DFITRDDATAEN)
+#define DDR0_PCTL_DFITPHYRDLAT			0x0264
+#define P_DDR0_PCTL_DFITPHYRDLAT		MMC_REG_ADDR(DDR0_PCTL_DFITPHYRDLAT)
+#define DDR0_PCTL_DFITREFMSKI			0x0294
+#define P_DDR0_PCTL_DFITREFMSKI			MMC_REG_ADDR(DDR0_PCTL_DFITREFMSKI)
+#define DDR0_PCTL_DFITPHYUPDTYPE0		0x0270
+#define P_DDR0_PCTL_DFITPHYUPDTYPE0		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE0)
+#define DDR0_PCTL_DFITPHYUPDTYPE1		0x0274
+#define P_DDR0_PCTL_DFITPHYUPDTYPE1		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE1)
+#define DDR0_PCTL_DFITCTRLUPDDLY		0x0288
+#define P_DDR0_PCTL_DFITCTRLUPDDLY		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDDLY)
+#define DDR0_PCTL_DFITPHYUPDTYPE2		0x0278
+#define P_DDR0_PCTL_DFITPHYUPDTYPE2		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE2)
+#define DDR0_PCTL_DFITCTRLUPDMIN		0x0280
+#define P_DDR0_PCTL_DFITCTRLUPDMIN		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDMIN)
+#define DDR0_PCTL_DFITPHYUPDTYPE3		0x027c
+#define P_DDR0_PCTL_DFITPHYUPDTYPE3		MMC_REG_ADDR(DDR0_PCTL_DFITPHYUPDTYPE3)
+#define DDR0_PCTL_DFIUPDCFG			0x0290
+#define P_DDR0_PCTL_DFIUPDCFG			MMC_REG_ADDR(DDR0_PCTL_DFIUPDCFG)
+#define DDR0_PCTL_DFITCTRLUPDMAX		0x0284
+#define P_DDR0_PCTL_DFITCTRLUPDMAX		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDMAX)
+#define DDR0_PCTL_DFITCTRLUPDI			0x0298
+#define P_DDR0_PCTL_DFITCTRLUPDI		MMC_REG_ADDR(DDR0_PCTL_DFITCTRLUPDI)
+#define DDR0_PCTL_DFITRRDLVLEN			0x02b8
+#define P_DDR0_PCTL_DFITRRDLVLEN		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLEN)
+#define DDR0_PCTL_DFITRSTAT0			0x02b0
+#define P_DDR0_PCTL_DFITRSTAT0			MMC_REG_ADDR(DDR0_PCTL_DFITRSTAT0)
+#define DDR0_PCTL_DFITRWRLVLEN			0x02b4
+#define P_DDR0_PCTL_DFITRWRLVLEN		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLEN)
+#define DDR0_PCTL_DFITRCFG0			0x02ac
+#define P_DDR0_PCTL_DFITRCFG0			MMC_REG_ADDR(DDR0_PCTL_DFITRCFG0)
+#define DDR0_PCTL_DFITRRDLVLGATEEN		0x02bc
+#define P_DDR0_PCTL_DFITRRDLVLGATEEN		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEEN)
+#define DDR0_PCTL_DFISTSTAT0			0x02c0
+#define P_DDR0_PCTL_DFISTSTAT0			MMC_REG_ADDR(DDR0_PCTL_DFISTSTAT0)
+#define DDR0_PCTL_DFISTPARLOG			0x02e0
+#define P_DDR0_PCTL_DFISTPARLOG			MMC_REG_ADDR(DDR0_PCTL_DFISTPARLOG)
+#define DDR0_PCTL_DFITDRAMCLKEN			0x02d0
+#define P_DDR0_PCTL_DFITDRAMCLKEN		MMC_REG_ADDR(DDR0_PCTL_DFITDRAMCLKEN)
+#define DDR0_PCTL_DFISTPARCLR			0x02dc
+#define P_DDR0_PCTL_DFISTPARCLR			MMC_REG_ADDR(DDR0_PCTL_DFISTPARCLR)
+#define DDR0_PCTL_DFISTCFG0			0x02c4
+#define P_DDR0_PCTL_DFISTCFG0			MMC_REG_ADDR(DDR0_PCTL_DFISTCFG0)
+#define DDR0_PCTL_DFISTCFG1			0x02c8
+#define P_DDR0_PCTL_DFISTCFG1			MMC_REG_ADDR(DDR0_PCTL_DFISTCFG1)
+#define DDR0_PCTL_DFISTCFG2			0x02d8
+#define P_DDR0_PCTL_DFISTCFG2			MMC_REG_ADDR(DDR0_PCTL_DFISTCFG2)
+#define DDR0_PCTL_DFITDRAMCLKDIS		0x02d4
+#define P_DDR0_PCTL_DFITDRAMCLKDIS		MMC_REG_ADDR(DDR0_PCTL_DFITDRAMCLKDIS)
+#define DDR0_PCTL_DFILPCFG0			0x02f0
+#define P_DDR0_PCTL_DFILPCFG0			MMC_REG_ADDR(DDR0_PCTL_DFILPCFG0)
+#define DDR0_PCTL_DFITRWRLVLDELAY0		0x0318
+#define P_DDR0_PCTL_DFITRWRLVLDELAY0		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLDELAY0)
+#define DDR0_PCTL_DFITRWRLVLDELAY1		0x031c
+#define P_DDR0_PCTL_DFITRWRLVLDELAY1		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLDELAY1)
+#define DDR0_PCTL_DFITRWRLVLDELAY2		0x0320
+#define P_DDR0_PCTL_DFITRWRLVLDELAY2		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLDELAY2)
+#define DDR0_PCTL_DFITRRDLVLRESP0		0x030c
+#define P_DDR0_PCTL_DFITRRDLVLRESP0		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLRESP0)
+#define DDR0_PCTL_DFITRRDLVLRESP1		0x0310
+#define P_DDR0_PCTL_DFITRRDLVLRESP1		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLRESP1)
+#define DDR0_PCTL_DFITRRDLVLRESP2		0x0314
+#define P_DDR0_PCTL_DFITRRDLVLRESP2		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLRESP2)
+#define DDR0_PCTL_DFITRWRLVLRESP0		0x0300
+#define P_DDR0_PCTL_DFITRWRLVLRESP0		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLRESP0)
+#define DDR0_PCTL_DFITRRDLVLDELAY0		0x0324
+#define P_DDR0_PCTL_DFITRRDLVLDELAY0		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLDELAY0)
+#define DDR0_PCTL_DFITRRDLVLDELAY1		0x0328
+#define P_DDR0_PCTL_DFITRRDLVLDELAY1		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLDELAY1)
+#define DDR0_PCTL_DFITRWRLVLRESP1		0x0304
+#define P_DDR0_PCTL_DFITRWRLVLRESP1		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLRESP1)
+#define DDR0_PCTL_DFITRRDLVLDELAY2		0x032c
+#define P_DDR0_PCTL_DFITRRDLVLDELAY2		MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLDELAY2)
+#define DDR0_PCTL_DFITRWRLVLRESP2		0x0308
+#define P_DDR0_PCTL_DFITRWRLVLRESP2		MMC_REG_ADDR(DDR0_PCTL_DFITRWRLVLRESP2)
+#define DDR0_PCTL_DFITRRDLVLGATEDELAY0		0x0330
+#define P_DDR0_PCTL_DFITRRDLVLGATEDELAY0	MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEDELAY0)
+#define DDR0_PCTL_DFITRCMD			0x033c
+#define P_DDR0_PCTL_DFITRCMD			MMC_REG_ADDR(DDR0_PCTL_DFITRCMD)
+#define DDR0_PCTL_DFITRRDLVLGATEDELAY1		0x0334
+#define P_DDR0_PCTL_DFITRRDLVLGATEDELAY1	MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEDELAY1)
+#define DDR0_PCTL_DFITRRDLVLGATEDELAY2		0x0338
+#define P_DDR0_PCTL_DFITRRDLVLGATEDELAY2	MMC_REG_ADDR(DDR0_PCTL_DFITRRDLVLGATEDELAY2)
+#define DDR0_PCTL_IPTR				0x03fc
+#define P_DDR0_PCTL_IPTR			MMC_REG_ADDR(DDR0_PCTL_IPTR)
+#define DDR0_PCTL_IPVR				0x03f8
+#define P_DDR0_PCTL_IPVR			MMC_REG_ADDR(DDR0_PCTL_IPVR)
+#define DDR0_PUB_RIDR				(0x1000 + (0x00 << 2))
+#define P_DDR0_PUB_RIDR				MMC_REG_ADDR(DDR0_PUB_RIDR)
+#define DDR0_PUB_PIR				(0x1000 + (0x01 << 2))
+#define P_DDR0_PUB_PIR				MMC_REG_ADDR(DDR0_PUB_PIR)
+#define DDR0_PUB_PGCR0				(0x1000 + (0x02 << 2))
+#define P_DDR0_PUB_PGCR0			MMC_REG_ADDR(DDR0_PUB_PGCR0)
+#define DDR0_PUB_PGCR1				(0x1000 + (0x03 << 2))
+#define P_DDR0_PUB_PGCR1			MMC_REG_ADDR(DDR0_PUB_PGCR1)
+#define DDR0_PUB_PGCR2				(0x1000 + (0x04 << 2))
+#define P_DDR0_PUB_PGCR2			MMC_REG_ADDR(DDR0_PUB_PGCR2)
+#define DDR0_PUB_PGCR3				(0x1000 + (0x05 << 2))
+#define P_DDR0_PUB_PGCR3			MMC_REG_ADDR(DDR0_PUB_PGCR3)
+#define DDR0_PUB_PGSR0				(0x1000 + (0x06 << 2))
+#define P_DDR0_PUB_PGSR0			MMC_REG_ADDR(DDR0_PUB_PGSR0)
+#define DDR0_PUB_PGSR1				(0x1000 + (0x07 << 2))
+#define P_DDR0_PUB_PGSR1			MMC_REG_ADDR(DDR0_PUB_PGSR1)
+#define DDR0_PUB_PLLCR				(0x1000 + (0x08 << 2))
+#define P_DDR0_PUB_PLLCR			MMC_REG_ADDR(DDR0_PUB_PLLCR)
+#define DDR0_PUB_PTR0				(0x1000 + (0x09 << 2))
+#define P_DDR0_PUB_PTR0				MMC_REG_ADDR(DDR0_PUB_PTR0)
+#define DDR0_PUB_PTR1				(0x1000 + (0x0A << 2))
+#define P_DDR0_PUB_PTR1				MMC_REG_ADDR(DDR0_PUB_PTR1)
+#define DDR0_PUB_PTR2				(0x1000 + (0x0B << 2))
+#define P_DDR0_PUB_PTR2				MMC_REG_ADDR(DDR0_PUB_PTR2)
+#define DDR0_PUB_PTR3				(0x1000 + (0x0C << 2))
+#define P_DDR0_PUB_PTR3				MMC_REG_ADDR(DDR0_PUB_PTR3)
+#define DDR0_PUB_PTR4				(0x1000 + (0x0D << 2))
+#define P_DDR0_PUB_PTR4				MMC_REG_ADDR(DDR0_PUB_PTR4)
+#define DDR0_PUB_ACMDLR				(0x1000 + (0x0E << 2))
+#define P_DDR0_PUB_ACMDLR			MMC_REG_ADDR(DDR0_PUB_ACMDLR)
+#define DDR0_PUB_ACLCDLR			(0x1000 + (0x0F << 2))
+#define P_DDR0_PUB_ACLCDLR			MMC_REG_ADDR(DDR0_PUB_ACLCDLR)
+#define DDR0_PUB_ACBDLR0			(0x1000 + (0x10 << 2))
+#define P_DDR0_PUB_ACBDLR0			MMC_REG_ADDR(DDR0_PUB_ACBDLR0)
+#define DDR0_PUB_ACBDLR1			(0x1000 + (0x11 << 2))
+#define P_DDR0_PUB_ACBDLR1			MMC_REG_ADDR(DDR0_PUB_ACBDLR1)
+#define DDR0_PUB_ACBDLR2			(0x1000 + (0x12 << 2))
+#define P_DDR0_PUB_ACBDLR2			MMC_REG_ADDR(DDR0_PUB_ACBDLR2)
+#define DDR0_PUB_ACBDLR3			(0x1000 + (0x13 << 2))
+#define P_DDR0_PUB_ACBDLR3			MMC_REG_ADDR(DDR0_PUB_ACBDLR3)
+#define DDR0_PUB_ACBDLR4			(0x1000 + (0x14 << 2))
+#define P_DDR0_PUB_ACBDLR4			MMC_REG_ADDR(DDR0_PUB_ACBDLR4)
+#define DDR0_PUB_ACBDLR5			(0x1000 + (0x15 << 2))
+#define P_DDR0_PUB_ACBDLR5			MMC_REG_ADDR(DDR0_PUB_ACBDLR5)
+#define DDR0_PUB_ACBDLR6			(0x1000 + (0x16 << 2))
+#define P_DDR0_PUB_ACBDLR6			MMC_REG_ADDR(DDR0_PUB_ACBDLR6)
+#define DDR0_PUB_ACBDLR7			(0x1000 + (0x17 << 2))
+#define P_DDR0_PUB_ACBDLR7			MMC_REG_ADDR(DDR0_PUB_ACBDLR7)
+#define DDR0_PUB_ACBDLR8			(0x1000 + (0x18 << 2))
+#define P_DDR0_PUB_ACBDLR8			MMC_REG_ADDR(DDR0_PUB_ACBDLR8)
+#define DDR0_PUB_ACBDLR9			(0x1000 + (0x19 << 2))
+#define P_DDR0_PUB_ACBDLR9			MMC_REG_ADDR(DDR0_PUB_ACBDLR9)
+#define DDR0_PUB_ACIOCR0			(0x1000 + (0x1A << 2))
+#define P_DDR0_PUB_ACIOCR0			MMC_REG_ADDR(DDR0_PUB_ACIOCR0)
+#define DDR0_PUB_ACIOCR1			(0x1000 + (0x1B << 2))
+#define P_DDR0_PUB_ACIOCR1			MMC_REG_ADDR(DDR0_PUB_ACIOCR1)
+#define DDR0_PUB_ACIOCR2			(0x1000 + (0x1C << 2))
+#define P_DDR0_PUB_ACIOCR2			MMC_REG_ADDR(DDR0_PUB_ACIOCR2)
+#define DDR0_PUB_ACIOCR3			(0x1000 + (0x1D << 2))
+#define P_DDR0_PUB_ACIOCR3			MMC_REG_ADDR(DDR0_PUB_ACIOCR3)
+#define DDR0_PUB_ACIOCR4			(0x1000 + (0x1E << 2))
+#define P_DDR0_PUB_ACIOCR4			MMC_REG_ADDR(DDR0_PUB_ACIOCR4)
+#define DDR0_PUB_ACIOCR5			(0x1000 + (0x1F << 2))
+#define P_DDR0_PUB_ACIOCR5			MMC_REG_ADDR(DDR0_PUB_ACIOCR5)
+#define DDR0_PUB_DXCCR				(0x1000 + (0x20 << 2))
+#define P_DDR0_PUB_DXCCR			MMC_REG_ADDR(DDR0_PUB_DXCCR)
+#define DDR0_PUB_DSGCR				(0x1000 + (0x21 << 2))
+#define P_DDR0_PUB_DSGCR			MMC_REG_ADDR(DDR0_PUB_DSGCR)
+#define DDR0_PUB_DCR				(0x1000 + (0x22 << 2))
+#define P_DDR0_PUB_DCR				MMC_REG_ADDR(DDR0_PUB_DCR)
+#define DDR0_PUB_DTPR0				(0x1000 + (0x23 << 2))
+#define P_DDR0_PUB_DTPR0			MMC_REG_ADDR(DDR0_PUB_DTPR0)
+#define DDR0_PUB_DTPR1				(0x1000 + (0x24 << 2))
+#define P_DDR0_PUB_DTPR1			MMC_REG_ADDR(DDR0_PUB_DTPR1)
+#define DDR0_PUB_DTPR2				(0x1000 + (0x25 << 2))
+#define P_DDR0_PUB_DTPR2			MMC_REG_ADDR(DDR0_PUB_DTPR2)
+#define DDR0_PUB_DTPR3				(0x1000 + (0x26 << 2))
+#define P_DDR0_PUB_DTPR3			MMC_REG_ADDR(DDR0_PUB_DTPR3)
+#define DDR0_PUB_MR0				(0x1000 + (0x27 << 2))
+#define P_DDR0_PUB_MR0				MMC_REG_ADDR(DDR0_PUB_MR0)
+#define DDR0_PUB_MR1				(0x1000 + (0x28 << 2))
+#define P_DDR0_PUB_MR1				MMC_REG_ADDR(DDR0_PUB_MR1)
+#define DDR0_PUB_MR2				(0x1000 + (0x29 << 2))
+#define P_DDR0_PUB_MR2				MMC_REG_ADDR(DDR0_PUB_MR2)
+#define DDR0_PUB_MR3				(0x1000 + (0x2A << 2))
+#define P_DDR0_PUB_MR3				MMC_REG_ADDR(DDR0_PUB_MR3)
+#define DDR0_PUB_ODTCR				(0x1000 + (0x2B << 2))
+#define P_DDR0_PUB_ODTCR			MMC_REG_ADDR(DDR0_PUB_ODTCR)
+#define DDR0_PUB_DTCR				(0x1000 + (0x2C << 2))
+#define P_DDR0_PUB_DTCR				MMC_REG_ADDR(DDR0_PUB_DTCR)
+#define DDR0_PUB_DTAR0				(0x1000 + (0x2D << 2))
+#define P_DDR0_PUB_DTAR0			MMC_REG_ADDR(DDR0_PUB_DTAR0)
+#define DDR0_PUB_DTAR1				(0x1000 + (0x2E << 2))
+#define P_DDR0_PUB_DTAR1			MMC_REG_ADDR(DDR0_PUB_DTAR1)
+#define DDR0_PUB_DTAR2				(0x1000 + (0x2F << 2))
+#define P_DDR0_PUB_DTAR2			MMC_REG_ADDR(DDR0_PUB_DTAR2)
+#define DDR0_PUB_DTAR3				(0x1000 + (0x30 << 2))
+#define P_DDR0_PUB_DTAR3			MMC_REG_ADDR(DDR0_PUB_DTAR3)
+#define DDR0_PUB_DTDR0				(0x1000 + (0x31 << 2))
+#define P_DDR0_PUB_DTDR0			MMC_REG_ADDR(DDR0_PUB_DTDR0)
+#define DDR0_PUB_DTDR1				(0x1000 + (0x32 << 2))
+#define P_DDR0_PUB_DTDR1			MMC_REG_ADDR(DDR0_PUB_DTDR1)
+#define DDR0_PUB_DTEDR0				(0x1000 + (0x33 << 2))
+#define P_DDR0_PUB_DTEDR0			MMC_REG_ADDR(DDR0_PUB_DTEDR0)
+#define DDR0_PUB_DTEDR1				(0x1000 + (0x34 << 2))
+#define P_DDR0_PUB_DTEDR1			MMC_REG_ADDR(DDR0_PUB_DTEDR1)
+#define DDR0_PUB_RDIMMGCR0			(0x1000 + (0x35 << 2))
+#define P_DDR0_PUB_RDIMMGCR0			MMC_REG_ADDR(DDR0_PUB_RDIMMGCR0)
+#define DDR0_PUB_RDIMMGCR1			(0x1000 + (0x36 << 2))
+#define P_DDR0_PUB_RDIMMGCR1			MMC_REG_ADDR(DDR0_PUB_RDIMMGCR1)
+#define DDR0_PUB_RDIMMCR0			(0x1000 + (0x37 << 2))
+#define P_DDR0_PUB_RDIMMCR0			MMC_REG_ADDR(DDR0_PUB_RDIMMCR0)
+#define DDR0_PUB_RDIMMCR1			(0x1000 + (0x38 << 2))
+#define P_DDR0_PUB_RDIMMCR1			MMC_REG_ADDR(DDR0_PUB_RDIMMCR1)
+#define DDR0_PUB_GPR0				(0x1000 + (0x39 << 2))
+#define P_DDR0_PUB_GPR0				MMC_REG_ADDR(DDR0_PUB_GPR0)
+#define DDR0_PUB_GPR1				(0x1000 + (0x3A << 2))
+#define P_DDR0_PUB_GPR1				MMC_REG_ADDR(DDR0_PUB_GPR1)
+#define DDR0_PUB_CATR0				(0x1000 + (0x3B << 2))
+#define P_DDR0_PUB_CATR0			MMC_REG_ADDR(DDR0_PUB_CATR0)
+#define DDR0_PUB_CATR1				(0x1000 + (0x3C << 2))
+#define P_DDR0_PUB_CATR1			MMC_REG_ADDR(DDR0_PUB_CATR1)
+#define DDR0_PUB_DCUAR				(0x1000 + (0x60 << 2))
+#define P_DDR0_PUB_DCUAR			MMC_REG_ADDR(DDR0_PUB_DCUAR)
+#define DDR0_PUB_DCUDR				(0x1000 + (0x61 << 2))
+#define P_DDR0_PUB_DCUDR			MMC_REG_ADDR(DDR0_PUB_DCUDR)
+#define DDR0_PUB_DCURR				(0x1000 + (0x62 << 2))
+#define P_DDR0_PUB_DCURR			MMC_REG_ADDR(DDR0_PUB_DCURR)
+#define DDR0_PUB_DCULR				(0x1000 + (0x63 << 2))
+#define P_DDR0_PUB_DCULR			MMC_REG_ADDR(DDR0_PUB_DCULR)
+#define DDR0_PUB_DCUGCR				(0x1000 + (0x64 << 2))
+#define P_DDR0_PUB_DCUGCR			MMC_REG_ADDR(DDR0_PUB_DCUGCR)
+#define DDR0_PUB_DCUTPR				(0x1000 + (0x65 << 2))
+#define P_DDR0_PUB_DCUTPR			MMC_REG_ADDR(DDR0_PUB_DCUTPR)
+#define DDR0_PUB_DCUSR0				(0x1000 + (0x66 << 2))
+#define P_DDR0_PUB_DCUSR0			MMC_REG_ADDR(DDR0_PUB_DCUSR0)
+#define DDR0_PUB_DCUSR1				(0x1000 + (0x67 << 2))
+#define P_DDR0_PUB_DCUSR1			MMC_REG_ADDR(DDR0_PUB_DCUSR1)
+#define DDR0_PUB_BISTRR				(0x1000 + (0x70 << 2))
+#define P_DDR0_PUB_BISTRR			MMC_REG_ADDR(DDR0_PUB_BISTRR)
+#define DDR0_PUB_BISTWCR			(0x1000 + (0x71 << 2))
+#define P_DDR0_PUB_BISTWCR			MMC_REG_ADDR(DDR0_PUB_BISTWCR)
+#define DDR0_PUB_BISTMSKR0			(0x1000 + (0x72 << 2))
+#define P_DDR0_PUB_BISTMSKR0			MMC_REG_ADDR(DDR0_PUB_BISTMSKR0)
+#define DDR0_PUB_BISTMSKR1			(0x1000 + (0x73 << 2))
+#define P_DDR0_PUB_BISTMSKR1			MMC_REG_ADDR(DDR0_PUB_BISTMSKR1)
+#define DDR0_PUB_BISTMSKR2			(0x1000 + (0x74 << 2))
+#define P_DDR0_PUB_BISTMSKR2			MMC_REG_ADDR(DDR0_PUB_BISTMSKR2)
+#define DDR0_PUB_BISTLSR			(0x1000 + (0x75 << 2))
+#define P_DDR0_PUB_BISTLSR			MMC_REG_ADDR(DDR0_PUB_BISTLSR)
+#define DDR0_PUB_BISTAR0			(0x1000 + (0x76 << 2))
+#define P_DDR0_PUB_BISTAR0			MMC_REG_ADDR(DDR0_PUB_BISTAR0)
+#define DDR0_PUB_BISTAR1			(0x1000 + (0x77 << 2))
+#define P_DDR0_PUB_BISTAR1			MMC_REG_ADDR(DDR0_PUB_BISTAR1)
+#define DDR0_PUB_BISTAR2			(0x1000 + (0x78 << 2))
+#define P_DDR0_PUB_BISTAR2			MMC_REG_ADDR(DDR0_PUB_BISTAR2)
+#define DDR0_PUB_BISTUDPR			(0x1000 + (0x79 << 2))
+#define P_DDR0_PUB_BISTUDPR			MMC_REG_ADDR(DDR0_PUB_BISTUDPR)
+#define DDR0_PUB_BISTGSR			(0x1000 + (0x7A << 2))
+#define P_DDR0_PUB_BISTGSR			MMC_REG_ADDR(DDR0_PUB_BISTGSR)
+#define DDR0_PUB_BISTWER			(0x1000 + (0x7B << 2))
+#define P_DDR0_PUB_BISTWER			MMC_REG_ADDR(DDR0_PUB_BISTWER)
+#define DDR0_PUB_BISTBER0			(0x1000 + (0x7C << 2))
+#define P_DDR0_PUB_BISTBER0			MMC_REG_ADDR(DDR0_PUB_BISTBER0)
+#define DDR0_PUB_BISTBER1			(0x1000 + (0x7D << 2))
+#define P_DDR0_PUB_BISTBER1			MMC_REG_ADDR(DDR0_PUB_BISTBER1)
+#define DDR0_PUB_BISTBER2			(0x1000 + (0x7E << 2))
+#define P_DDR0_PUB_BISTBER2			MMC_REG_ADDR(DDR0_PUB_BISTBER2)
+#define DDR0_PUB_BISTBER3			(0x1000 + (0x7F << 2))
+#define P_DDR0_PUB_BISTBER3			MMC_REG_ADDR(DDR0_PUB_BISTBER3)
+#define DDR0_PUB_BISTWCSR			(0x1000 + (0x80 << 2))
+#define P_DDR0_PUB_BISTWCSR			MMC_REG_ADDR(DDR0_PUB_BISTWCSR)
+#define DDR0_PUB_BISTFWR0			(0x1000 + (0x81 << 2))
+#define P_DDR0_PUB_BISTFWR0			MMC_REG_ADDR(DDR0_PUB_BISTFWR0)
+#define DDR0_PUB_BISTFWR1			(0x1000 + (0x82 << 2))
+#define P_DDR0_PUB_BISTFWR1			MMC_REG_ADDR(DDR0_PUB_BISTFWR1)
+#define DDR0_PUB_BISTFWR2			(0x1000 + (0x83 << 2))
+#define P_DDR0_PUB_BISTFWR2			MMC_REG_ADDR(DDR0_PUB_BISTFWR2)
+#define DDR0_PUB_IOVCR0				(0x1000 + (0x8E << 2))
+#define P_DDR0_PUB_IOVCR0			MMC_REG_ADDR(DDR0_PUB_IOVCR0)
+#define DDR0_PUB_IOVCR1				(0x1000 + (0x8F << 2))
+#define P_DDR0_PUB_IOVCR1			MMC_REG_ADDR(DDR0_PUB_IOVCR1)
+#define DDR0_PUB_ZQCR				(0x1000 + (0x90 << 2))
+#define P_DDR0_PUB_ZQCR				MMC_REG_ADDR(DDR0_PUB_ZQCR)
+#define DDR0_PUB_ZQ0PR				(0x1000 + (0x91 << 2))
+#define P_DDR0_PUB_ZQ0PR			MMC_REG_ADDR(DDR0_PUB_ZQ0PR)
+#define DDR0_PUB_ZQ0DR				(0x1000 + (0x92 << 2))
+#define P_DDR0_PUB_ZQ0DR			MMC_REG_ADDR(DDR0_PUB_ZQ0DR)
+#define DDR0_PUB_ZQ0SR				(0x1000 + (0x93 << 2))
+#define P_DDR0_PUB_ZQ0SR			MMC_REG_ADDR(DDR0_PUB_ZQ0SR)
+#define DDR0_PUB_ZQ1PR				(0x1000 + (0x95 << 2))
+#define P_DDR0_PUB_ZQ1PR			MMC_REG_ADDR(DDR0_PUB_ZQ1PR)
+#define DDR0_PUB_ZQ1DR				(0x1000 + (0x96 << 2))
+#define P_DDR0_PUB_ZQ1DR			MMC_REG_ADDR(DDR0_PUB_ZQ1DR)
+#define DDR0_PUB_ZQ1SR				(0x1000 + (0x97 << 2))
+#define P_DDR0_PUB_ZQ1SR			MMC_REG_ADDR(DDR0_PUB_ZQ1SR)
+#define DDR0_PUB_ZQ2PR				(0x1000 + (0x99 << 2))
+#define P_DDR0_PUB_ZQ2PR			MMC_REG_ADDR(DDR0_PUB_ZQ2PR)
+#define DDR0_PUB_ZQ2DR				(0x1000 + (0x9A << 2))
+#define P_DDR0_PUB_ZQ2DR			MMC_REG_ADDR(DDR0_PUB_ZQ2DR)
+#define DDR0_PUB_ZQ2SR				(0x1000 + (0x9B << 2))
+#define P_DDR0_PUB_ZQ2SR			MMC_REG_ADDR(DDR0_PUB_ZQ2SR)
+#define DDR0_PUB_ZQ3PR				(0x1000 + (0x9D << 2))
+#define P_DDR0_PUB_ZQ3PR			MMC_REG_ADDR(DDR0_PUB_ZQ3PR)
+#define DDR0_PUB_ZQ3DR				(0x1000 + (0x9E << 2))
+#define P_DDR0_PUB_ZQ3DR			MMC_REG_ADDR(DDR0_PUB_ZQ3DR)
+#define DDR0_PUB_ZQ3SR				(0x1000 + (0x9F << 2))
+#define P_DDR0_PUB_ZQ3SR			MMC_REG_ADDR(DDR0_PUB_ZQ3SR)
+#define DDR0_PUB_DX0GCR0			(0x1000 + (0xA0 << 2))
+#define P_DDR0_PUB_DX0GCR0			MMC_REG_ADDR(DDR0_PUB_DX0GCR0)
+#define DDR0_PUB_DX0GCR1			(0x1000 + (0xA1 << 2))
+#define P_DDR0_PUB_DX0GCR1			MMC_REG_ADDR(DDR0_PUB_DX0GCR1)
+#define DDR0_PUB_DX0GCR2			(0x1000 + (0xA2 << 2))
+#define P_DDR0_PUB_DX0GCR2			MMC_REG_ADDR(DDR0_PUB_DX0GCR2)
+#define DDR0_PUB_DX0GCR3			(0x1000 + (0xA3 << 2))
+#define P_DDR0_PUB_DX0GCR3			MMC_REG_ADDR(DDR0_PUB_DX0GCR3)
+#define DDR0_PUB_DX0GSR0			(0x1000 + (0xA4 << 2))
+#define P_DDR0_PUB_DX0GSR0			MMC_REG_ADDR(DDR0_PUB_DX0GSR0)
+#define DDR0_PUB_DX0GSR1			(0x1000 + (0xA5 << 2))
+#define P_DDR0_PUB_DX0GSR1			MMC_REG_ADDR(DDR0_PUB_DX0GSR1)
+#define DDR0_PUB_DX0GSR2			(0x1000 + (0xA6 << 2))
+#define P_DDR0_PUB_DX0GSR2			MMC_REG_ADDR(DDR0_PUB_DX0GSR2)
+#define DDR0_PUB_DX0BDLR0			(0x1000 + (0xA7 << 2))
+#define P_DDR0_PUB_DX0BDLR0			MMC_REG_ADDR(DDR0_PUB_DX0BDLR0)
+#define DDR0_PUB_DX0BDLR1			(0x1000 + (0xA8 << 2))
+#define P_DDR0_PUB_DX0BDLR1			MMC_REG_ADDR(DDR0_PUB_DX0BDLR1)
+#define DDR0_PUB_DX0BDLR2			(0x1000 + (0xA9 << 2))
+#define P_DDR0_PUB_DX0BDLR2			MMC_REG_ADDR(DDR0_PUB_DX0BDLR2)
+#define DDR0_PUB_DX0BDLR3			(0x1000 + (0xAA << 2))
+#define P_DDR0_PUB_DX0BDLR3			MMC_REG_ADDR(DDR0_PUB_DX0BDLR3)
+#define DDR0_PUB_DX0BDLR4			(0x1000 + (0xAB << 2))
+#define P_DDR0_PUB_DX0BDLR4			MMC_REG_ADDR(DDR0_PUB_DX0BDLR4)
+#define DDR0_PUB_DX0BDLR5			(0x1000 + (0xAC << 2))
+#define P_DDR0_PUB_DX0BDLR5			MMC_REG_ADDR(DDR0_PUB_DX0BDLR5)
+#define DDR0_PUB_DX0BDLR6			(0x1000 + (0xAD << 2))
+#define P_DDR0_PUB_DX0BDLR6			MMC_REG_ADDR(DDR0_PUB_DX0BDLR6)
+#define DDR0_PUB_DX0LCDLR0			(0x1000 + (0xAE << 2))
+#define P_DDR0_PUB_DX0LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX0LCDLR0)
+#define DDR0_PUB_DX0LCDLR1			(0x1000 + (0xAF << 2))
+#define P_DDR0_PUB_DX0LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX0LCDLR1)
+#define DDR0_PUB_DX0LCDLR2			(0x1000 + (0xB0 << 2))
+#define P_DDR0_PUB_DX0LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX0LCDLR2)
+#define DDR0_PUB_DX0MDLR			(0x1000 + (0xB1 << 2))
+#define P_DDR0_PUB_DX0MDLR			MMC_REG_ADDR(DDR0_PUB_DX0MDLR)
+#define DDR0_PUB_DX0GTR				(0x1000 + (0xB2 << 2))
+#define P_DDR0_PUB_DX0GTR			MMC_REG_ADDR(DDR0_PUB_DX0GTR)
+#define DDR0_PUB_DX1GCR0			(0x1000 + (0xC0 << 2))
+#define P_DDR0_PUB_DX1GCR0			MMC_REG_ADDR(DDR0_PUB_DX1GCR0)
+#define DDR0_PUB_DX1GCR1			(0x1000 + (0xC1 << 2))
+#define P_DDR0_PUB_DX1GCR1			MMC_REG_ADDR(DDR0_PUB_DX1GCR1)
+#define DDR0_PUB_DX1GCR2			(0x1000 + (0xC2 << 2))
+#define P_DDR0_PUB_DX1GCR2			MMC_REG_ADDR(DDR0_PUB_DX1GCR2)
+#define DDR0_PUB_DX1GCR3			(0x1000 + (0xC3 << 2))
+#define P_DDR0_PUB_DX1GCR3			MMC_REG_ADDR(DDR0_PUB_DX1GCR3)
+#define DDR0_PUB_DX1GSR0			(0x1000 + (0xC4 << 2))
+#define P_DDR0_PUB_DX1GSR0			MMC_REG_ADDR(DDR0_PUB_DX1GSR0)
+#define DDR0_PUB_DX1GSR1			(0x1000 + (0xC5 << 2))
+#define P_DDR0_PUB_DX1GSR1			MMC_REG_ADDR(DDR0_PUB_DX1GSR1)
+#define DDR0_PUB_DX1GSR2			(0x1000 + (0xC6 << 2))
+#define P_DDR0_PUB_DX1GSR2			MMC_REG_ADDR(DDR0_PUB_DX1GSR2)
+#define DDR0_PUB_DX1BDLR0			(0x1000 + (0xC7 << 2))
+#define P_DDR0_PUB_DX1BDLR0			MMC_REG_ADDR(DDR0_PUB_DX1BDLR0)
+#define DDR0_PUB_DX1BDLR1			(0x1000 + (0xC8 << 2))
+#define P_DDR0_PUB_DX1BDLR1			MMC_REG_ADDR(DDR0_PUB_DX1BDLR1)
+#define DDR0_PUB_DX1BDLR2			(0x1000 + (0xC9 << 2))
+#define P_DDR0_PUB_DX1BDLR2			MMC_REG_ADDR(DDR0_PUB_DX1BDLR2)
+#define DDR0_PUB_DX1BDLR3			(0x1000 + (0xCA << 2))
+#define P_DDR0_PUB_DX1BDLR3			MMC_REG_ADDR(DDR0_PUB_DX1BDLR3)
+#define DDR0_PUB_DX1BDLR4			(0x1000 + (0xCB << 2))
+#define P_DDR0_PUB_DX1BDLR4			MMC_REG_ADDR(DDR0_PUB_DX1BDLR4)
+#define DDR0_PUB_DX1BDLR5			(0x1000 + (0xCC << 2))
+#define P_DDR0_PUB_DX1BDLR5			MMC_REG_ADDR(DDR0_PUB_DX1BDLR5)
+#define DDR0_PUB_DX1BDLR6			(0x1000 + (0xCD << 2))
+#define P_DDR0_PUB_DX1BDLR6			MMC_REG_ADDR(DDR0_PUB_DX1BDLR6)
+#define DDR0_PUB_DX1LCDLR0			(0x1000 + (0xCE << 2))
+#define P_DDR0_PUB_DX1LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX1LCDLR0)
+#define DDR0_PUB_DX1LCDLR1			(0x1000 + (0xCF << 2))
+#define P_DDR0_PUB_DX1LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX1LCDLR1)
+#define DDR0_PUB_DX1LCDLR2			(0x1000 + (0xD0 << 2))
+#define P_DDR0_PUB_DX1LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX1LCDLR2)
+#define DDR0_PUB_DX1MDLR			(0x1000 + (0xD1 << 2))
+#define P_DDR0_PUB_DX1MDLR			MMC_REG_ADDR(DDR0_PUB_DX1MDLR)
+#define DDR0_PUB_DX1GTR				(0x1000 + (0xD2 << 2))
+#define P_DDR0_PUB_DX1GTR			MMC_REG_ADDR(DDR0_PUB_DX1GTR)
+#define DDR0_PUB_DX2GCR0			(0x1000 + (0xE0 << 2))
+#define P_DDR0_PUB_DX2GCR0			MMC_REG_ADDR(DDR0_PUB_DX2GCR0)
+#define DDR0_PUB_DX2GCR1			(0x1000 + (0xE1 << 2))
+#define P_DDR0_PUB_DX2GCR1			MMC_REG_ADDR(DDR0_PUB_DX2GCR1)
+#define DDR0_PUB_DX2GCR2			(0x1000 + (0xE2 << 2))
+#define P_DDR0_PUB_DX2GCR2			MMC_REG_ADDR(DDR0_PUB_DX2GCR2)
+#define DDR0_PUB_DX2GCR3			(0x1000 + (0xE3 << 2))
+#define P_DDR0_PUB_DX2GCR3			MMC_REG_ADDR(DDR0_PUB_DX2GCR3)
+#define DDR0_PUB_DX2GSR0			(0x1000 + (0xE4 << 2))
+#define P_DDR0_PUB_DX2GSR0			MMC_REG_ADDR(DDR0_PUB_DX2GSR0)
+#define DDR0_PUB_DX2GSR1			(0x1000 + (0xE5 << 2))
+#define P_DDR0_PUB_DX2GSR1			MMC_REG_ADDR(DDR0_PUB_DX2GSR1)
+#define DDR0_PUB_DX2GSR2			(0x1000 + (0xE6 << 2))
+#define P_DDR0_PUB_DX2GSR2			MMC_REG_ADDR(DDR0_PUB_DX2GSR2)
+#define DDR0_PUB_DX2BDLR0			(0x1000 + (0xE7 << 2))
+#define P_DDR0_PUB_DX2BDLR0			MMC_REG_ADDR(DDR0_PUB_DX2BDLR0)
+#define DDR0_PUB_DX2BDLR1			(0x1000 + (0xE8 << 2))
+#define P_DDR0_PUB_DX2BDLR1			MMC_REG_ADDR(DDR0_PUB_DX2BDLR1)
+#define DDR0_PUB_DX2BDLR2			(0x1000 + (0xE9 << 2))
+#define P_DDR0_PUB_DX2BDLR2			MMC_REG_ADDR(DDR0_PUB_DX2BDLR2)
+#define DDR0_PUB_DX2BDLR3			(0x1000 + (0xEA << 2))
+#define P_DDR0_PUB_DX2BDLR3			MMC_REG_ADDR(DDR0_PUB_DX2BDLR3)
+#define DDR0_PUB_DX2BDLR4			(0x1000 + (0xEB << 2))
+#define P_DDR0_PUB_DX2BDLR4			MMC_REG_ADDR(DDR0_PUB_DX2BDLR4)
+#define DDR0_PUB_DX2BDLR5			(0x1000 + (0xEC << 2))
+#define P_DDR0_PUB_DX2BDLR5			MMC_REG_ADDR(DDR0_PUB_DX2BDLR5)
+#define DDR0_PUB_DX2BDLR6			(0x1000 + (0xED << 2))
+#define P_DDR0_PUB_DX2BDLR6			MMC_REG_ADDR(DDR0_PUB_DX2BDLR6)
+#define DDR0_PUB_DX2LCDLR0			(0x1000 + (0xEE << 2))
+#define P_DDR0_PUB_DX2LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX2LCDLR0)
+#define DDR0_PUB_DX2LCDLR1			(0x1000 + (0xEF << 2))
+#define P_DDR0_PUB_DX2LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX2LCDLR1)
+#define DDR0_PUB_DX2LCDLR2			(0x1000 + (0xF0 << 2))
+#define P_DDR0_PUB_DX2LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX2LCDLR2)
+#define DDR0_PUB_DX2MDLR			(0x1000 + (0xF1 << 2))
+#define P_DDR0_PUB_DX2MDLR			MMC_REG_ADDR(DDR0_PUB_DX2MDLR)
+#define DDR0_PUB_DX2GTR				(0x1000 + (0xF2 << 2))
+#define P_DDR0_PUB_DX2GTR			MMC_REG_ADDR(DDR0_PUB_DX2GTR)
+#define DDR0_PUB_DX3GCR0			(0x1000 + (0x100 << 2))
+#define P_DDR0_PUB_DX3GCR0			MMC_REG_ADDR(DDR0_PUB_DX3GCR0)
+#define DDR0_PUB_DX3GCR1			(0x1000 + (0x101 << 2))
+#define P_DDR0_PUB_DX3GCR1			MMC_REG_ADDR(DDR0_PUB_DX3GCR1)
+#define DDR0_PUB_DX3GCR2			(0x1000 + (0x102 << 2))
+#define P_DDR0_PUB_DX3GCR2			MMC_REG_ADDR(DDR0_PUB_DX3GCR2)
+#define DDR0_PUB_DX3GCR3			(0x1000 + (0x103 << 2))
+#define P_DDR0_PUB_DX3GCR3			MMC_REG_ADDR(DDR0_PUB_DX3GCR3)
+#define DDR0_PUB_DX3GSR0			(0x1000 + (0x104 << 2))
+#define P_DDR0_PUB_DX3GSR0			MMC_REG_ADDR(DDR0_PUB_DX3GSR0)
+#define DDR0_PUB_DX3GSR1			(0x1000 + (0x105 << 2))
+#define P_DDR0_PUB_DX3GSR1			MMC_REG_ADDR(DDR0_PUB_DX3GSR1)
+#define DDR0_PUB_DX3GSR2			(0x1000 + (0x106 << 2))
+#define P_DDR0_PUB_DX3GSR2			MMC_REG_ADDR(DDR0_PUB_DX3GSR2)
+#define DDR0_PUB_DX3BDLR0			(0x1000 + (0x107 << 2))
+#define P_DDR0_PUB_DX3BDLR0			MMC_REG_ADDR(DDR0_PUB_DX3BDLR0)
+#define DDR0_PUB_DX3BDLR1			(0x1000 + (0x108 << 2))
+#define P_DDR0_PUB_DX3BDLR1			MMC_REG_ADDR(DDR0_PUB_DX3BDLR1)
+#define DDR0_PUB_DX3BDLR2			(0x1000 + (0x109 << 2))
+#define P_DDR0_PUB_DX3BDLR2			MMC_REG_ADDR(DDR0_PUB_DX3BDLR2)
+#define DDR0_PUB_DX3BDLR3			(0x1000 + (0x10A << 2))
+#define P_DDR0_PUB_DX3BDLR3			MMC_REG_ADDR(DDR0_PUB_DX3BDLR3)
+#define DDR0_PUB_DX3BDLR4			(0x1000 + (0x10B << 2))
+#define P_DDR0_PUB_DX3BDLR4			MMC_REG_ADDR(DDR0_PUB_DX3BDLR4)
+#define DDR0_PUB_DX3BDLR5			(0x1000 + (0x10C << 2))
+#define P_DDR0_PUB_DX3BDLR5			MMC_REG_ADDR(DDR0_PUB_DX3BDLR5)
+#define DDR0_PUB_DX3BDLR6			(0x1000 + (0x10D << 2))
+#define P_DDR0_PUB_DX3BDLR6			MMC_REG_ADDR(DDR0_PUB_DX3BDLR6)
+#define DDR0_PUB_DX3LCDLR0			(0x1000 + (0x10E << 2))
+#define P_DDR0_PUB_DX3LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX3LCDLR0)
+#define DDR0_PUB_DX3LCDLR1			(0x1000 + (0x10F << 2))
+#define P_DDR0_PUB_DX3LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX3LCDLR1)
+#define DDR0_PUB_DX3LCDLR2			(0x1000 + (0x110 << 2))
+#define P_DDR0_PUB_DX3LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX3LCDLR2)
+#define DDR0_PUB_DX3MDLR			(0x1000 + (0x111 << 2))
+#define P_DDR0_PUB_DX3MDLR			MMC_REG_ADDR(DDR0_PUB_DX3MDLR)
+#define DDR0_PUB_DX3GTR				(0x1000 + (0x112 << 2))
+#define P_DDR0_PUB_DX3GTR			MMC_REG_ADDR(DDR0_PUB_DX3GTR)
+#define DDR0_PUB_DX4GCR0			(0x1000 + (0x120 << 2))
+#define P_DDR0_PUB_DX4GCR0			MMC_REG_ADDR(DDR0_PUB_DX4GCR0)
+#define DDR0_PUB_DX4GCR1			(0x1000 + (0x121 << 2))
+#define P_DDR0_PUB_DX4GCR1			MMC_REG_ADDR(DDR0_PUB_DX4GCR1)
+#define DDR0_PUB_DX4GCR2			(0x1000 + (0x122 << 2))
+#define P_DDR0_PUB_DX4GCR2			MMC_REG_ADDR(DDR0_PUB_DX4GCR2)
+#define DDR0_PUB_DX4GCR3			(0x1000 + (0x123 << 2))
+#define P_DDR0_PUB_DX4GCR3			MMC_REG_ADDR(DDR0_PUB_DX4GCR3)
+#define DDR0_PUB_DX4GSR0			(0x1000 + (0x124 << 2))
+#define P_DDR0_PUB_DX4GSR0			MMC_REG_ADDR(DDR0_PUB_DX4GSR0)
+#define DDR0_PUB_DX4GSR1			(0x1000 + (0x125 << 2))
+#define P_DDR0_PUB_DX4GSR1			MMC_REG_ADDR(DDR0_PUB_DX4GSR1)
+#define DDR0_PUB_DX4GSR2			(0x1000 + (0x126 << 2))
+#define P_DDR0_PUB_DX4GSR2			MMC_REG_ADDR(DDR0_PUB_DX4GSR2)
+#define DDR0_PUB_DX4BDLR0			(0x1000 + (0x127 << 2))
+#define P_DDR0_PUB_DX4BDLR0			MMC_REG_ADDR(DDR0_PUB_DX4BDLR0)
+#define DDR0_PUB_DX4BDLR1			(0x1000 + (0x128 << 2))
+#define P_DDR0_PUB_DX4BDLR1			MMC_REG_ADDR(DDR0_PUB_DX4BDLR1)
+#define DDR0_PUB_DX4BDLR2			(0x1000 + (0x129 << 2))
+#define P_DDR0_PUB_DX4BDLR2			MMC_REG_ADDR(DDR0_PUB_DX4BDLR2)
+#define DDR0_PUB_DX4BDLR3			(0x1000 + (0x12A << 2))
+#define P_DDR0_PUB_DX4BDLR3			MMC_REG_ADDR(DDR0_PUB_DX4BDLR3)
+#define DDR0_PUB_DX4BDLR4			(0x1000 + (0x12B << 2))
+#define P_DDR0_PUB_DX4BDLR4			MMC_REG_ADDR(DDR0_PUB_DX4BDLR4)
+#define DDR0_PUB_DX4BDLR5			(0x1000 + (0x12C << 2))
+#define P_DDR0_PUB_DX4BDLR5			MMC_REG_ADDR(DDR0_PUB_DX4BDLR5)
+#define DDR0_PUB_DX4BDLR6			(0x1000 + (0x12D << 2))
+#define P_DDR0_PUB_DX4BDLR6			MMC_REG_ADDR(DDR0_PUB_DX4BDLR6)
+#define DDR0_PUB_DX4LCDLR0			(0x1000 + (0x12E << 2))
+#define P_DDR0_PUB_DX4LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX4LCDLR0)
+#define DDR0_PUB_DX4LCDLR1			(0x1000 + (0x12F << 2))
+#define P_DDR0_PUB_DX4LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX4LCDLR1)
+#define DDR0_PUB_DX4LCDLR2			(0x1000 + (0x130 << 2))
+#define P_DDR0_PUB_DX4LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX4LCDLR2)
+#define DDR0_PUB_DX4MDLR			(0x1000 + (0x131 << 2))
+#define P_DDR0_PUB_DX4MDLR			MMC_REG_ADDR(DDR0_PUB_DX4MDLR)
+#define DDR0_PUB_DX4GTR				(0x1000 + (0x132 << 2))
+#define P_DDR0_PUB_DX4GTR			MMC_REG_ADDR(DDR0_PUB_DX4GTR)
+#define DDR0_PUB_DX5GCR0			(0x1000 + (0x140 << 2))
+#define P_DDR0_PUB_DX5GCR0			MMC_REG_ADDR(DDR0_PUB_DX5GCR0)
+#define DDR0_PUB_DX5GCR1			(0x1000 + (0x141 << 2))
+#define P_DDR0_PUB_DX5GCR1			MMC_REG_ADDR(DDR0_PUB_DX5GCR1)
+#define DDR0_PUB_DX5GCR2			(0x1000 + (0x142 << 2))
+#define P_DDR0_PUB_DX5GCR2			MMC_REG_ADDR(DDR0_PUB_DX5GCR2)
+#define DDR0_PUB_DX5GCR3			(0x1000 + (0x143 << 2))
+#define P_DDR0_PUB_DX5GCR3			MMC_REG_ADDR(DDR0_PUB_DX5GCR3)
+#define DDR0_PUB_DX5GSR0			(0x1000 + (0x144 << 2))
+#define P_DDR0_PUB_DX5GSR0			MMC_REG_ADDR(DDR0_PUB_DX5GSR0)
+#define DDR0_PUB_DX5GSR1			(0x1000 + (0x145 << 2))
+#define P_DDR0_PUB_DX5GSR1			MMC_REG_ADDR(DDR0_PUB_DX5GSR1)
+#define DDR0_PUB_DX5GSR2			(0x1000 + (0x146 << 2))
+#define P_DDR0_PUB_DX5GSR2			MMC_REG_ADDR(DDR0_PUB_DX5GSR2)
+#define DDR0_PUB_DX5BDLR0			(0x1000 + (0x147 << 2))
+#define P_DDR0_PUB_DX5BDLR0			MMC_REG_ADDR(DDR0_PUB_DX5BDLR0)
+#define DDR0_PUB_DX5BDLR1			(0x1000 + (0x148 << 2))
+#define P_DDR0_PUB_DX5BDLR1			MMC_REG_ADDR(DDR0_PUB_DX5BDLR1)
+#define DDR0_PUB_DX5BDLR2			(0x1000 + (0x149 << 2))
+#define P_DDR0_PUB_DX5BDLR2			MMC_REG_ADDR(DDR0_PUB_DX5BDLR2)
+#define DDR0_PUB_DX5BDLR3			(0x1000 + (0x14A << 2))
+#define P_DDR0_PUB_DX5BDLR3			MMC_REG_ADDR(DDR0_PUB_DX5BDLR3)
+#define DDR0_PUB_DX5BDLR4			(0x1000 + (0x14B << 2))
+#define P_DDR0_PUB_DX5BDLR4			MMC_REG_ADDR(DDR0_PUB_DX5BDLR4)
+#define DDR0_PUB_DX5BDLR5			(0x1000 + (0x14C << 2))
+#define P_DDR0_PUB_DX5BDLR5			MMC_REG_ADDR(DDR0_PUB_DX5BDLR5)
+#define DDR0_PUB_DX5BDLR6			(0x1000 + (0x14D << 2))
+#define P_DDR0_PUB_DX5BDLR6			MMC_REG_ADDR(DDR0_PUB_DX5BDLR6)
+#define DDR0_PUB_DX5LCDLR0			(0x1000 + (0x14E << 2))
+#define P_DDR0_PUB_DX5LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX5LCDLR0)
+#define DDR0_PUB_DX5LCDLR1			(0x1000 + (0x14F << 2))
+#define P_DDR0_PUB_DX5LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX5LCDLR1)
+#define DDR0_PUB_DX5LCDLR2			(0x1000 + (0x150 << 2))
+#define P_DDR0_PUB_DX5LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX5LCDLR2)
+#define DDR0_PUB_DX5MDLR			(0x1000 + (0x151 << 2))
+#define P_DDR0_PUB_DX5MDLR			MMC_REG_ADDR(DDR0_PUB_DX5MDLR)
+#define DDR0_PUB_DX5GTR				(0x1000 + (0x152 << 2))
+#define P_DDR0_PUB_DX5GTR			MMC_REG_ADDR(DDR0_PUB_DX5GTR)
+#define DDR0_PUB_DX6GCR0			(0x1000 + (0x160 << 2))
+#define P_DDR0_PUB_DX6GCR0			MMC_REG_ADDR(DDR0_PUB_DX6GCR0)
+#define DDR0_PUB_DX6GCR1			(0x1000 + (0x161 << 2))
+#define P_DDR0_PUB_DX6GCR1			MMC_REG_ADDR(DDR0_PUB_DX6GCR1)
+#define DDR0_PUB_DX6GCR2			(0x1000 + (0x162 << 2))
+#define P_DDR0_PUB_DX6GCR2			MMC_REG_ADDR(DDR0_PUB_DX6GCR2)
+#define DDR0_PUB_DX6GCR3			(0x1000 + (0x163 << 2))
+#define P_DDR0_PUB_DX6GCR3			MMC_REG_ADDR(DDR0_PUB_DX6GCR3)
+#define DDR0_PUB_DX6GSR0			(0x1000 + (0x164 << 2))
+#define P_DDR0_PUB_DX6GSR0			MMC_REG_ADDR(DDR0_PUB_DX6GSR0)
+#define DDR0_PUB_DX6GSR1			(0x1000 + (0x165 << 2))
+#define P_DDR0_PUB_DX6GSR1			MMC_REG_ADDR(DDR0_PUB_DX6GSR1)
+#define DDR0_PUB_DX6GSR2			(0x1000 + (0x166 << 2))
+#define P_DDR0_PUB_DX6GSR2			MMC_REG_ADDR(DDR0_PUB_DX6GSR2)
+#define DDR0_PUB_DX6BDLR0			(0x1000 + (0x167 << 2))
+#define P_DDR0_PUB_DX6BDLR0			MMC_REG_ADDR(DDR0_PUB_DX6BDLR0)
+#define DDR0_PUB_DX6BDLR1			(0x1000 + (0x168 << 2))
+#define P_DDR0_PUB_DX6BDLR1			MMC_REG_ADDR(DDR0_PUB_DX6BDLR1)
+#define DDR0_PUB_DX6BDLR2			(0x1000 + (0x169 << 2))
+#define P_DDR0_PUB_DX6BDLR2			MMC_REG_ADDR(DDR0_PUB_DX6BDLR2)
+#define DDR0_PUB_DX6BDLR3			(0x1000 + (0x16A << 2))
+#define P_DDR0_PUB_DX6BDLR3			MMC_REG_ADDR(DDR0_PUB_DX6BDLR3)
+#define DDR0_PUB_DX6BDLR4			(0x1000 + (0x16B << 2))
+#define P_DDR0_PUB_DX6BDLR4			MMC_REG_ADDR(DDR0_PUB_DX6BDLR4)
+#define DDR0_PUB_DX6BDLR5			(0x1000 + (0x16C << 2))
+#define P_DDR0_PUB_DX6BDLR5			MMC_REG_ADDR(DDR0_PUB_DX6BDLR5)
+#define DDR0_PUB_DX6BDLR6			(0x1000 + (0x16D << 2))
+#define P_DDR0_PUB_DX6BDLR6			MMC_REG_ADDR(DDR0_PUB_DX6BDLR6)
+#define DDR0_PUB_DX6LCDLR0			(0x1000 + (0x16E << 2))
+#define P_DDR0_PUB_DX6LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX6LCDLR0)
+#define DDR0_PUB_DX6LCDLR1			(0x1000 + (0x16F << 2))
+#define P_DDR0_PUB_DX6LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX6LCDLR1)
+#define DDR0_PUB_DX6LCDLR2			(0x1000 + (0x170 << 2))
+#define P_DDR0_PUB_DX6LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX6LCDLR2)
+#define DDR0_PUB_DX6MDLR			(0x1000 + (0x171 << 2))
+#define P_DDR0_PUB_DX6MDLR			MMC_REG_ADDR(DDR0_PUB_DX6MDLR)
+#define DDR0_PUB_DX6GTR				(0x1000 + (0x172 << 2))
+#define P_DDR0_PUB_DX6GTR			MMC_REG_ADDR(DDR0_PUB_DX6GTR)
+#define DDR0_PUB_DX7GCR0			(0x1000 + (0x180 << 2))
+#define P_DDR0_PUB_DX7GCR0			MMC_REG_ADDR(DDR0_PUB_DX7GCR0)
+#define DDR0_PUB_DX7GCR1			(0x1000 + (0x181 << 2))
+#define P_DDR0_PUB_DX7GCR1			MMC_REG_ADDR(DDR0_PUB_DX7GCR1)
+#define DDR0_PUB_DX7GCR2			(0x1000 + (0x182 << 2))
+#define P_DDR0_PUB_DX7GCR2			MMC_REG_ADDR(DDR0_PUB_DX7GCR2)
+#define DDR0_PUB_DX7GCR3			(0x1000 + (0x183 << 2))
+#define P_DDR0_PUB_DX7GCR3			MMC_REG_ADDR(DDR0_PUB_DX7GCR3)
+#define DDR0_PUB_DX7GSR0			(0x1000 + (0x184 << 2))
+#define P_DDR0_PUB_DX7GSR0			MMC_REG_ADDR(DDR0_PUB_DX7GSR0)
+#define DDR0_PUB_DX7GSR1			(0x1000 + (0x185 << 2))
+#define P_DDR0_PUB_DX7GSR1			MMC_REG_ADDR(DDR0_PUB_DX7GSR1)
+#define DDR0_PUB_DX7GSR2			(0x1000 + (0x186 << 2))
+#define P_DDR0_PUB_DX7GSR2			MMC_REG_ADDR(DDR0_PUB_DX7GSR2)
+#define DDR0_PUB_DX7BDLR0			(0x1000 + (0x187 << 2))
+#define P_DDR0_PUB_DX7BDLR0			MMC_REG_ADDR(DDR0_PUB_DX7BDLR0)
+#define DDR0_PUB_DX7BDLR1			(0x1000 + (0x188 << 2))
+#define P_DDR0_PUB_DX7BDLR1			MMC_REG_ADDR(DDR0_PUB_DX7BDLR1)
+#define DDR0_PUB_DX7BDLR2			(0x1000 + (0x189 << 2))
+#define P_DDR0_PUB_DX7BDLR2			MMC_REG_ADDR(DDR0_PUB_DX7BDLR2)
+#define DDR0_PUB_DX7BDLR3			(0x1000 + (0x18A << 2))
+#define P_DDR0_PUB_DX7BDLR3			MMC_REG_ADDR(DDR0_PUB_DX7BDLR3)
+#define DDR0_PUB_DX7BDLR4			(0x1000 + (0x18B << 2))
+#define P_DDR0_PUB_DX7BDLR4			MMC_REG_ADDR(DDR0_PUB_DX7BDLR4)
+#define DDR0_PUB_DX7BDLR5			(0x1000 + (0x18C << 2))
+#define P_DDR0_PUB_DX7BDLR5			MMC_REG_ADDR(DDR0_PUB_DX7BDLR5)
+#define DDR0_PUB_DX7BDLR6			(0x1000 + (0x18D << 2))
+#define P_DDR0_PUB_DX7BDLR6			MMC_REG_ADDR(DDR0_PUB_DX7BDLR6)
+#define DDR0_PUB_DX7LCDLR0			(0x1000 + (0x18E << 2))
+#define P_DDR0_PUB_DX7LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX7LCDLR0)
+#define DDR0_PUB_DX7LCDLR1			(0x1000 + (0x18F << 2))
+#define P_DDR0_PUB_DX7LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX7LCDLR1)
+#define DDR0_PUB_DX7LCDLR2			(0x1000 + (0x190 << 2))
+#define P_DDR0_PUB_DX7LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX7LCDLR2)
+#define DDR0_PUB_DX7MDLR			(0x1000 + (0x191 << 2))
+#define P_DDR0_PUB_DX7MDLR			MMC_REG_ADDR(DDR0_PUB_DX7MDLR)
+#define DDR0_PUB_DX7GTR				(0x1000 + (0x192 << 2))
+#define P_DDR0_PUB_DX7GTR			MMC_REG_ADDR(DDR0_PUB_DX7GTR)
+#define DDR0_PUB_DX8GCR0			(0x1000 + (0x1A0 << 2))
+#define P_DDR0_PUB_DX8GCR0			MMC_REG_ADDR(DDR0_PUB_DX8GCR0)
+#define DDR0_PUB_DX8GCR1			(0x1000 + (0x1A1 << 2))
+#define P_DDR0_PUB_DX8GCR1			MMC_REG_ADDR(DDR0_PUB_DX8GCR1)
+#define DDR0_PUB_DX8GCR2			(0x1000 + (0x1A2 << 2))
+#define P_DDR0_PUB_DX8GCR2			MMC_REG_ADDR(DDR0_PUB_DX8GCR2)
+#define DDR0_PUB_DX8GCR3			(0x1000 + (0x1A3 << 2))
+#define P_DDR0_PUB_DX8GCR3			MMC_REG_ADDR(DDR0_PUB_DX8GCR3)
+#define DDR0_PUB_DX8GSR0			(0x1000 + (0x1A4 << 2))
+#define P_DDR0_PUB_DX8GSR0			MMC_REG_ADDR(DDR0_PUB_DX8GSR0)
+#define DDR0_PUB_DX8GSR1			(0x1000 + (0x1A5 << 2))
+#define P_DDR0_PUB_DX8GSR1			MMC_REG_ADDR(DDR0_PUB_DX8GSR1)
+#define DDR0_PUB_DX8GSR2			(0x1000 + (0x1A6 << 2))
+#define P_DDR0_PUB_DX8GSR2			MMC_REG_ADDR(DDR0_PUB_DX8GSR2)
+#define DDR0_PUB_DX8BDLR0			(0x1000 + (0x1A7 << 2))
+#define P_DDR0_PUB_DX8BDLR0			MMC_REG_ADDR(DDR0_PUB_DX8BDLR0)
+#define DDR0_PUB_DX8BDLR1			(0x1000 + (0x1A8 << 2))
+#define P_DDR0_PUB_DX8BDLR1			MMC_REG_ADDR(DDR0_PUB_DX8BDLR1)
+#define DDR0_PUB_DX8BDLR2			(0x1000 + (0x1A9 << 2))
+#define P_DDR0_PUB_DX8BDLR2			MMC_REG_ADDR(DDR0_PUB_DX8BDLR2)
+#define DDR0_PUB_DX8BDLR3			(0x1000 + (0x1AA << 2))
+#define P_DDR0_PUB_DX8BDLR3			MMC_REG_ADDR(DDR0_PUB_DX8BDLR3)
+#define DDR0_PUB_DX8BDLR4			(0x1000 + (0x1AB << 2))
+#define P_DDR0_PUB_DX8BDLR4			MMC_REG_ADDR(DDR0_PUB_DX8BDLR4)
+#define DDR0_PUB_DX8BDLR5			(0x1000 + (0x1AC << 2))
+#define P_DDR0_PUB_DX8BDLR5			MMC_REG_ADDR(DDR0_PUB_DX8BDLR5)
+#define DDR0_PUB_DX8BDLR6			(0x1000 + (0x1AD << 2))
+#define P_DDR0_PUB_DX8BDLR6			MMC_REG_ADDR(DDR0_PUB_DX8BDLR6)
+#define DDR0_PUB_DX8LCDLR0			(0x1000 + (0x1AE << 2))
+#define P_DDR0_PUB_DX8LCDLR0			MMC_REG_ADDR(DDR0_PUB_DX8LCDLR0)
+#define DDR0_PUB_DX8LCDLR1			(0x1000 + (0x1AF << 2))
+#define P_DDR0_PUB_DX8LCDLR1			MMC_REG_ADDR(DDR0_PUB_DX8LCDLR1)
+#define DDR0_PUB_DX8LCDLR2			(0x1000 + (0x1B0 << 2))
+#define P_DDR0_PUB_DX8LCDLR2			MMC_REG_ADDR(DDR0_PUB_DX8LCDLR2)
+#define DDR0_PUB_DX8MDLR			(0x1000 + (0x1B1 << 2))
+#define P_DDR0_PUB_DX8MDLR			MMC_REG_ADDR(DDR0_PUB_DX8MDLR)
+#define DDR0_PUB_DX8GTR				(0x1000 + (0x1B2 << 2))
+#define P_DDR0_PUB_DX8GTR			MMC_REG_ADDR(DDR0_PUB_DX8GTR)
+#define DDR1_CLK_CTRL				0x2800
+#define P_DDR1_CLK_CTRL				MMC_REG_ADDR(DDR1_CLK_CTRL)
+#define DDR1_SOFT_RESET				0x2804
+#define P_DDR1_SOFT_RESET			MMC_REG_ADDR(DDR1_SOFT_RESET)
+#define DDR1_APD_CTRL				0x2808
+#define P_DDR1_APD_CTRL				MMC_REG_ADDR(DDR1_APD_CTRL)
+#define DDR1_PCTL_SCFG				0x2000
+#define P_DDR1_PCTL_SCFG			MMC_REG_ADDR(DDR1_PCTL_SCFG)
+#define DDR1_PCTL_SCTL				0x2004
+#define P_DDR1_PCTL_SCTL			MMC_REG_ADDR(DDR1_PCTL_SCTL)
+#define DDR1_PCTL_STAT				0x2008
+#define P_DDR1_PCTL_STAT			MMC_REG_ADDR(DDR1_PCTL_STAT)
+#define DDR1_PCTL_INTRSTAT			0x200c
+#define P_DDR1_PCTL_INTRSTAT			MMC_REG_ADDR(DDR1_PCTL_INTRSTAT)
+#define DDR1_PCTL_POWSTAT			0x2048
+#define P_DDR1_PCTL_POWSTAT			MMC_REG_ADDR(DDR1_PCTL_POWSTAT)
+#define DDR1_PCTL_MRRSTAT0			0x2064
+#define P_DDR1_PCTL_MRRSTAT0			MMC_REG_ADDR(DDR1_PCTL_MRRSTAT0)
+#define DDR1_PCTL_CMDTSTAT			0x204c
+#define P_DDR1_PCTL_CMDTSTAT			MMC_REG_ADDR(DDR1_PCTL_CMDTSTAT)
+#define DDR1_PCTL_MCMD				0x2040
+#define P_DDR1_PCTL_MCMD			MMC_REG_ADDR(DDR1_PCTL_MCMD)
+#define DDR1_PCTL_MRRSTAT1			0x2068
+#define P_DDR1_PCTL_MRRSTAT1			MMC_REG_ADDR(DDR1_PCTL_MRRSTAT1)
+#define DDR1_PCTL_MRRCFG0			0x2060
+#define P_DDR1_PCTL_MRRCFG0			MMC_REG_ADDR(DDR1_PCTL_MRRCFG0)
+#define DDR1_PCTL_CMDTSTATEN			0x2050
+#define P_DDR1_PCTL_CMDTSTATEN			MMC_REG_ADDR(DDR1_PCTL_CMDTSTATEN)
+#define DDR1_PCTL_POWCTL			0x2044
+#define P_DDR1_PCTL_POWCTL			MMC_REG_ADDR(DDR1_PCTL_POWCTL)
+#define DDR1_PCTL_PPCFG				0x2084
+#define P_DDR1_PCTL_PPCFG			MMC_REG_ADDR(DDR1_PCTL_PPCFG)
+#define DDR1_PCTL_LPDDR23ZQCFG			0x208c
+#define P_DDR1_PCTL_LPDDR23ZQCFG		MMC_REG_ADDR(DDR1_PCTL_LPDDR23ZQCFG)
+#define DDR1_PCTL_MCFG1				0x207c
+#define P_DDR1_PCTL_MCFG1			MMC_REG_ADDR(DDR1_PCTL_MCFG1)
+#define DDR1_PCTL_MSTAT				0x2088
+#define P_DDR1_PCTL_MSTAT			MMC_REG_ADDR(DDR1_PCTL_MSTAT)
+#define DDR1_PCTL_MCFG				0x2080
+#define P_DDR1_PCTL_MCFG			MMC_REG_ADDR(DDR1_PCTL_MCFG)
+#define DDR1_PCTL_DTUAWDT			0x20b0
+#define P_DDR1_PCTL_DTUAWDT			MMC_REG_ADDR(DDR1_PCTL_DTUAWDT)
+#define DDR1_PCTL_DTUPRD2			0x20a8
+#define P_DDR1_PCTL_DTUPRD2			MMC_REG_ADDR(DDR1_PCTL_DTUPRD2)
+#define DDR1_PCTL_DTUPRD3			0x20ac
+#define P_DDR1_PCTL_DTUPRD3			MMC_REG_ADDR(DDR1_PCTL_DTUPRD3)
+#define DDR1_PCTL_DTUNE				0x209c
+#define P_DDR1_PCTL_DTUNE			MMC_REG_ADDR(DDR1_PCTL_DTUNE)
+#define DDR1_PCTL_DTUPDES			0x2094
+#define P_DDR1_PCTL_DTUPDES			MMC_REG_ADDR(DDR1_PCTL_DTUPDES)
+#define DDR1_PCTL_DTUNA				0x2098
+#define P_DDR1_PCTL_DTUNA			MMC_REG_ADDR(DDR1_PCTL_DTUNA)
+#define DDR1_PCTL_DTUPRD0			0x20a0
+#define P_DDR1_PCTL_DTUPRD0			MMC_REG_ADDR(DDR1_PCTL_DTUPRD0)
+#define DDR1_PCTL_DTUPRD1			0x20a4
+#define P_DDR1_PCTL_DTUPRD1			MMC_REG_ADDR(DDR1_PCTL_DTUPRD1)
+#define DDR1_PCTL_TCKSRE			0x2124
+#define P_DDR1_PCTL_TCKSRE			MMC_REG_ADDR(DDR1_PCTL_TCKSRE)
+#define DDR1_PCTL_TZQCSI			0x211c
+#define P_DDR1_PCTL_TZQCSI			MMC_REG_ADDR(DDR1_PCTL_TZQCSI)
+#define DDR1_PCTL_TINIT				0x20c4
+#define P_DDR1_PCTL_TINIT			MMC_REG_ADDR(DDR1_PCTL_TINIT)
+#define DDR1_PCTL_TDPD				0x2144
+#define P_DDR1_PCTL_TDPD			MMC_REG_ADDR(DDR1_PCTL_TDPD)
+#define DDR1_PCTL_TOGCNT1U			0x20c0
+#define P_DDR1_PCTL_TOGCNT1U			MMC_REG_ADDR(DDR1_PCTL_TOGCNT1U)
+#define DDR1_PCTL_TCKE				0x212c
+#define P_DDR1_PCTL_TCKE			MMC_REG_ADDR(DDR1_PCTL_TCKE)
+#define DDR1_PCTL_TMOD				0x2130
+#define P_DDR1_PCTL_TMOD			MMC_REG_ADDR(DDR1_PCTL_TMOD)
+#define DDR1_PCTL_TEXSR				0x210c
+#define P_DDR1_PCTL_TEXSR			MMC_REG_ADDR(DDR1_PCTL_TEXSR)
+#define DDR1_PCTL_TAL				0x20e4
+#define P_DDR1_PCTL_TAL				MMC_REG_ADDR(DDR1_PCTL_TAL)
+#define DDR1_PCTL_TRTP				0x2100
+#define P_DDR1_PCTL_TRTP			MMC_REG_ADDR(DDR1_PCTL_TRTP)
+#define DDR1_PCTL_TCKSRX			0x2128
+#define P_DDR1_PCTL_TCKSRX			MMC_REG_ADDR(DDR1_PCTL_TCKSRX)
+#define DDR1_PCTL_TRTW				0x20e0
+#define P_DDR1_PCTL_TRTW			MMC_REG_ADDR(DDR1_PCTL_TRTW)
+#define DDR1_PCTL_TCWL				0x20ec
+#define P_DDR1_PCTL_TCWL			MMC_REG_ADDR(DDR1_PCTL_TCWL)
+#define DDR1_PCTL_TWR				0x2104
+#define P_DDR1_PCTL_TWR				MMC_REG_ADDR(DDR1_PCTL_TWR)
+#define DDR1_PCTL_TCL				0x20e8
+#define P_DDR1_PCTL_TCL				MMC_REG_ADDR(DDR1_PCTL_TCL)
+#define DDR1_PCTL_TDQS				0x2120
+#define P_DDR1_PCTL_TDQS			MMC_REG_ADDR(DDR1_PCTL_TDQS)
+#define DDR1_PCTL_TRSTH				0x20c8
+#define P_DDR1_PCTL_TRSTH			MMC_REG_ADDR(DDR1_PCTL_TRSTH)
+#define DDR1_PCTL_TRCD				0x20f8
+#define P_DDR1_PCTL_TRCD			MMC_REG_ADDR(DDR1_PCTL_TRCD)
+#define DDR1_PCTL_TXP				0x2110
+#define P_DDR1_PCTL_TXP				MMC_REG_ADDR(DDR1_PCTL_TXP)
+#define DDR1_PCTL_TOGCNT100N			0x20cc
+#define P_DDR1_PCTL_TOGCNT100N			MMC_REG_ADDR(DDR1_PCTL_TOGCNT100N)
+#define DDR1_PCTL_TMRD				0x20d4
+#define P_DDR1_PCTL_TMRD			MMC_REG_ADDR(DDR1_PCTL_TMRD)
+#define DDR1_PCTL_TRSTL				0x2134
+#define P_DDR1_PCTL_TRSTL			MMC_REG_ADDR(DDR1_PCTL_TRSTL)
+#define DDR1_PCTL_TREFI				0x20d0
+#define P_DDR1_PCTL_TREFI			MMC_REG_ADDR(DDR1_PCTL_TREFI)
+#define DDR1_PCTL_TRAS				0x20f0
+#define P_DDR1_PCTL_TRAS			MMC_REG_ADDR(DDR1_PCTL_TRAS)
+#define DDR1_PCTL_TREFI_MEM_DDR3		0x2148
+#define P_DDR1_PCTL_TREFI_MEM_DDR3		MMC_REG_ADDR(DDR1_PCTL_TREFI_MEM_DDR3)
+#define DDR1_PCTL_TWTR				0x2108
+#define P_DDR1_PCTL_TWTR			MMC_REG_ADDR(DDR1_PCTL_TWTR)
+#define DDR1_PCTL_TRC				0x20f4
+#define P_DDR1_PCTL_TRC				MMC_REG_ADDR(DDR1_PCTL_TRC)
+#define DDR1_PCTL_TRFC				0x20d8
+#define P_DDR1_PCTL_TRFC			MMC_REG_ADDR(DDR1_PCTL_TRFC)
+#define DDR1_PCTL_TMRR				0x213c
+#define P_DDR1_PCTL_TMRR			MMC_REG_ADDR(DDR1_PCTL_TMRR)
+#define DDR1_PCTL_TCKESR			0x2140
+#define P_DDR1_PCTL_TCKESR			MMC_REG_ADDR(DDR1_PCTL_TCKESR)
+#define DDR1_PCTL_TZQCL				0x2138
+#define P_DDR1_PCTL_TZQCL			MMC_REG_ADDR(DDR1_PCTL_TZQCL)
+#define DDR1_PCTL_TRRD				0x20fc
+#define P_DDR1_PCTL_TRRD			MMC_REG_ADDR(DDR1_PCTL_TRRD)
+#define DDR1_PCTL_TRP				0x20dc
+#define P_DDR1_PCTL_TRP				MMC_REG_ADDR(DDR1_PCTL_TRP)
+#define DDR1_PCTL_TZQCS				0x2118
+#define P_DDR1_PCTL_TZQCS			MMC_REG_ADDR(DDR1_PCTL_TZQCS)
+#define DDR1_PCTL_TXPDLL			0x2114
+#define P_DDR1_PCTL_TXPDLL			MMC_REG_ADDR(DDR1_PCTL_TXPDLL)
+#define DDR1_PCTL_ECCCFG			0x2180
+#define P_DDR1_PCTL_ECCCFG			MMC_REG_ADDR(DDR1_PCTL_ECCCFG)
+#define DDR1_PCTL_ECCLOG			0x218c
+#define P_DDR1_PCTL_ECCLOG			MMC_REG_ADDR(DDR1_PCTL_ECCLOG)
+#define DDR1_PCTL_ECCCLR			0x2188
+#define P_DDR1_PCTL_ECCCLR			MMC_REG_ADDR(DDR1_PCTL_ECCCLR)
+#define DDR1_PCTL_ECCTST			0x2184
+#define P_DDR1_PCTL_ECCTST			MMC_REG_ADDR(DDR1_PCTL_ECCTST)
+#define DDR1_PCTL_DTUWD0			0x2210
+#define P_DDR1_PCTL_DTUWD0			MMC_REG_ADDR(DDR1_PCTL_DTUWD0)
+#define DDR1_PCTL_DTUWD1			0x2214
+#define P_DDR1_PCTL_DTUWD1			MMC_REG_ADDR(DDR1_PCTL_DTUWD1)
+#define DDR1_PCTL_DTUWACTL			0x2200
+#define P_DDR1_PCTL_DTUWACTL			MMC_REG_ADDR(DDR1_PCTL_DTUWACTL)
+#define DDR1_PCTL_DTULFSRRD			0x2238
+#define P_DDR1_PCTL_DTULFSRRD			MMC_REG_ADDR(DDR1_PCTL_DTULFSRRD)
+#define DDR1_PCTL_DTUWD2			0x2218
+#define P_DDR1_PCTL_DTUWD2			MMC_REG_ADDR(DDR1_PCTL_DTUWD2)
+#define DDR1_PCTL_DTUWD3			0x221c
+#define P_DDR1_PCTL_DTUWD3			MMC_REG_ADDR(DDR1_PCTL_DTUWD3)
+#define DDR1_PCTL_DTULFSRWD			0x2234
+#define P_DDR1_PCTL_DTULFSRWD			MMC_REG_ADDR(DDR1_PCTL_DTULFSRWD)
+#define DDR1_PCTL_DTURACTL			0x2204
+#define P_DDR1_PCTL_DTURACTL			MMC_REG_ADDR(DDR1_PCTL_DTURACTL)
+#define DDR1_PCTL_DTUWDM			0x2220
+#define P_DDR1_PCTL_DTUWDM			MMC_REG_ADDR(DDR1_PCTL_DTUWDM)
+#define DDR1_PCTL_DTURD0			0x2224
+#define P_DDR1_PCTL_DTURD0			MMC_REG_ADDR(DDR1_PCTL_DTURD0)
+#define DDR1_PCTL_DTURD1			0x2228
+#define P_DDR1_PCTL_DTURD1			MMC_REG_ADDR(DDR1_PCTL_DTURD1)
+#define DDR1_PCTL_DTURD2			0x222c
+#define P_DDR1_PCTL_DTURD2			MMC_REG_ADDR(DDR1_PCTL_DTURD2)
+#define DDR1_PCTL_DTURD3			0x2230
+#define P_DDR1_PCTL_DTURD3			MMC_REG_ADDR(DDR1_PCTL_DTURD3)
+#define DDR1_PCTL_DTUCFG			0x2208
+#define P_DDR1_PCTL_DTUCFG			MMC_REG_ADDR(DDR1_PCTL_DTUCFG)
+#define DDR1_PCTL_DTUEAF			0x223c
+#define P_DDR1_PCTL_DTUEAF			MMC_REG_ADDR(DDR1_PCTL_DTUEAF)
+#define DDR1_PCTL_DTUECTL			0x220c
+#define P_DDR1_PCTL_DTUECTL			MMC_REG_ADDR(DDR1_PCTL_DTUECTL)
+#define DDR1_PCTL_DFIODTCFG1			0x2248
+#define P_DDR1_PCTL_DFIODTCFG1			MMC_REG_ADDR(DDR1_PCTL_DFIODTCFG1)
+#define DDR1_PCTL_DFITCTRLDELAY			0x2240
+#define P_DDR1_PCTL_DFITCTRLDELAY		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLDELAY)
+#define DDR1_PCTL_DFIODTRANKMAP			0x224c
+#define P_DDR1_PCTL_DFIODTRANKMAP		MMC_REG_ADDR(DDR1_PCTL_DFIODTRANKMAP)
+#define DDR1_PCTL_DFIODTCFG			0x2244
+#define P_DDR1_PCTL_DFIODTCFG			MMC_REG_ADDR(DDR1_PCTL_DFIODTCFG)
+#define DDR1_PCTL_DFITPHYWRLAT			0x2254
+#define P_DDR1_PCTL_DFITPHYWRLAT		MMC_REG_ADDR(DDR1_PCTL_DFITPHYWRLAT)
+#define DDR1_PCTL_DFITPHYWRDATA			0x2250
+#define P_DDR1_PCTL_DFITPHYWRDATA		MMC_REG_ADDR(DDR1_PCTL_DFITPHYWRDATA)
+#define DDR1_PCTL_DFITRDDATAEN			0x2260
+#define P_DDR1_PCTL_DFITRDDATAEN		MMC_REG_ADDR(DDR1_PCTL_DFITRDDATAEN)
+#define DDR1_PCTL_DFITPHYRDLAT			0x2264
+#define P_DDR1_PCTL_DFITPHYRDLAT		MMC_REG_ADDR(DDR1_PCTL_DFITPHYRDLAT)
+#define DDR1_PCTL_DFITREFMSKI			0x2294
+#define P_DDR1_PCTL_DFITREFMSKI			MMC_REG_ADDR(DDR1_PCTL_DFITREFMSKI)
+#define DDR1_PCTL_DFITPHYUPDTYPE0		0x2270
+#define P_DDR1_PCTL_DFITPHYUPDTYPE0		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE0)
+#define DDR1_PCTL_DFITPHYUPDTYPE1		0x2274
+#define P_DDR1_PCTL_DFITPHYUPDTYPE1		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE1)
+#define DDR1_PCTL_DFITCTRLUPDDLY		0x2288
+#define P_DDR1_PCTL_DFITCTRLUPDDLY		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDDLY)
+#define DDR1_PCTL_DFITPHYUPDTYPE2		0x2278
+#define P_DDR1_PCTL_DFITPHYUPDTYPE2		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE2)
+#define DDR1_PCTL_DFITCTRLUPDMIN		0x2280
+#define P_DDR1_PCTL_DFITCTRLUPDMIN		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDMIN)
+#define DDR1_PCTL_DFITPHYUPDTYPE3		0x227c
+#define P_DDR1_PCTL_DFITPHYUPDTYPE3		MMC_REG_ADDR(DDR1_PCTL_DFITPHYUPDTYPE3)
+#define DDR1_PCTL_DFIUPDCFG			0x2290
+#define P_DDR1_PCTL_DFIUPDCFG			MMC_REG_ADDR(DDR1_PCTL_DFIUPDCFG)
+#define DDR1_PCTL_DFITCTRLUPDMAX		0x2284
+#define P_DDR1_PCTL_DFITCTRLUPDMAX		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDMAX)
+#define DDR1_PCTL_DFITCTRLUPDI			0x2298
+#define P_DDR1_PCTL_DFITCTRLUPDI		MMC_REG_ADDR(DDR1_PCTL_DFITCTRLUPDI)
+#define DDR1_PCTL_DFITRRDLVLEN			0x22b8
+#define P_DDR1_PCTL_DFITRRDLVLEN		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLEN)
+#define DDR1_PCTL_DFITRSTAT0			0x22b0
+#define P_DDR1_PCTL_DFITRSTAT0			MMC_REG_ADDR(DDR1_PCTL_DFITRSTAT0)
+#define DDR1_PCTL_DFITRWRLVLEN			0x22b4
+#define P_DDR1_PCTL_DFITRWRLVLEN		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLEN)
+#define DDR1_PCTL_DFITRCFG0			0x22ac
+#define P_DDR1_PCTL_DFITRCFG0			MMC_REG_ADDR(DDR1_PCTL_DFITRCFG0)
+#define DDR1_PCTL_DFITRRDLVLGATEEN		0x22bc
+#define P_DDR1_PCTL_DFITRRDLVLGATEEN		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEEN)
+#define DDR1_PCTL_DFISTSTAT0			0x22c0
+#define P_DDR1_PCTL_DFISTSTAT0			MMC_REG_ADDR(DDR1_PCTL_DFISTSTAT0)
+#define DDR1_PCTL_DFISTPARLOG			0x22e0
+#define P_DDR1_PCTL_DFISTPARLOG			MMC_REG_ADDR(DDR1_PCTL_DFISTPARLOG)
+#define DDR1_PCTL_DFITDRAMCLKEN			0x22d0
+#define P_DDR1_PCTL_DFITDRAMCLKEN		MMC_REG_ADDR(DDR1_PCTL_DFITDRAMCLKEN)
+#define DDR1_PCTL_DFISTPARCLR			0x22dc
+#define P_DDR1_PCTL_DFISTPARCLR			MMC_REG_ADDR(DDR1_PCTL_DFISTPARCLR)
+#define DDR1_PCTL_DFISTCFG0			0x22c4
+#define P_DDR1_PCTL_DFISTCFG0			MMC_REG_ADDR(DDR1_PCTL_DFISTCFG0)
+#define DDR1_PCTL_DFISTCFG1			0x22c8
+#define P_DDR1_PCTL_DFISTCFG1			MMC_REG_ADDR(DDR1_PCTL_DFISTCFG1)
+#define DDR1_PCTL_DFISTCFG2			0x22d8
+#define P_DDR1_PCTL_DFISTCFG2			MMC_REG_ADDR(DDR1_PCTL_DFISTCFG2)
+#define DDR1_PCTL_DFITDRAMCLKDIS		0x22d4
+#define P_DDR1_PCTL_DFITDRAMCLKDIS		MMC_REG_ADDR(DDR1_PCTL_DFITDRAMCLKDIS)
+#define DDR1_PCTL_DFILPCFG0			0x22f0
+#define P_DDR1_PCTL_DFILPCFG0			MMC_REG_ADDR(DDR1_PCTL_DFILPCFG0)
+#define DDR1_PCTL_DFITRWRLVLDELAY0		0x2318
+#define P_DDR1_PCTL_DFITRWRLVLDELAY0		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLDELAY0)
+#define DDR1_PCTL_DFITRWRLVLDELAY1		0x231c
+#define P_DDR1_PCTL_DFITRWRLVLDELAY1		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLDELAY1)
+#define DDR1_PCTL_DFITRWRLVLDELAY2		0x2320
+#define P_DDR1_PCTL_DFITRWRLVLDELAY2		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLDELAY2)
+#define DDR1_PCTL_DFITRRDLVLRESP0		0x230c
+#define P_DDR1_PCTL_DFITRRDLVLRESP0		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLRESP0)
+#define DDR1_PCTL_DFITRRDLVLRESP1		0x2310
+#define P_DDR1_PCTL_DFITRRDLVLRESP1		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLRESP1)
+#define DDR1_PCTL_DFITRRDLVLRESP2		0x2314
+#define P_DDR1_PCTL_DFITRRDLVLRESP2		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLRESP2)
+#define DDR1_PCTL_DFITRWRLVLRESP0		0x2300
+#define P_DDR1_PCTL_DFITRWRLVLRESP0		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLRESP0)
+#define DDR1_PCTL_DFITRRDLVLDELAY0		0x2324
+#define P_DDR1_PCTL_DFITRRDLVLDELAY0		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLDELAY0)
+#define DDR1_PCTL_DFITRRDLVLDELAY1		0x2328
+#define P_DDR1_PCTL_DFITRRDLVLDELAY1		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLDELAY1)
+#define DDR1_PCTL_DFITRWRLVLRESP1		0x2304
+#define P_DDR1_PCTL_DFITRWRLVLRESP1		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLRESP1)
+#define DDR1_PCTL_DFITRRDLVLDELAY2		0x232c
+#define P_DDR1_PCTL_DFITRRDLVLDELAY2		MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLDELAY2)
+#define DDR1_PCTL_DFITRWRLVLRESP2		0x2308
+#define P_DDR1_PCTL_DFITRWRLVLRESP2		MMC_REG_ADDR(DDR1_PCTL_DFITRWRLVLRESP2)
+#define DDR1_PCTL_DFITRRDLVLGATEDELAY0		0x2330
+#define P_DDR1_PCTL_DFITRRDLVLGATEDELAY0	MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEDELAY0)
+#define DDR1_PCTL_DFITRCMD			0x233c
+#define P_DDR1_PCTL_DFITRCMD			MMC_REG_ADDR(DDR1_PCTL_DFITRCMD)
+#define DDR1_PCTL_DFITRRDLVLGATEDELAY1		0x2334
+#define P_DDR1_PCTL_DFITRRDLVLGATEDELAY1	MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEDELAY1)
+#define DDR1_PCTL_DFITRRDLVLGATEDELAY2		0x2338
+#define P_DDR1_PCTL_DFITRRDLVLGATEDELAY2	MMC_REG_ADDR(DDR1_PCTL_DFITRRDLVLGATEDELAY2)
+#define DDR1_PCTL_IPTR				0x23fc
+#define P_DDR1_PCTL_IPTR			MMC_REG_ADDR(DDR1_PCTL_IPTR)
+#define DDR1_PCTL_IPVR				0x23f8
+#define P_DDR1_PCTL_IPVR			MMC_REG_ADDR(DDR1_PCTL_IPVR)
+#define DDR1_PUB_RIDR				(0x3000 + (0x00 << 2))
+#define P_DDR1_PUB_RIDR				MMC_REG_ADDR(DDR1_PUB_RIDR)
+#define DDR1_PUB_PIR				(0x3000 + (0x01 << 2))
+#define P_DDR1_PUB_PIR				MMC_REG_ADDR(DDR1_PUB_PIR)
+#define DDR1_PUB_PGCR0				(0x3000 + (0x02 << 2))
+#define P_DDR1_PUB_PGCR0			MMC_REG_ADDR(DDR1_PUB_PGCR0)
+#define DDR1_PUB_PGCR1				(0x3000 + (0x03 << 2))
+#define P_DDR1_PUB_PGCR1			MMC_REG_ADDR(DDR1_PUB_PGCR1)
+#define DDR1_PUB_PGCR2				(0x3000 + (0x04 << 2))
+#define P_DDR1_PUB_PGCR2			MMC_REG_ADDR(DDR1_PUB_PGCR2)
+#define DDR1_PUB_PGCR3				(0x3000 + (0x05 << 2))
+#define P_DDR1_PUB_PGCR3			MMC_REG_ADDR(DDR1_PUB_PGCR3)
+#define DDR1_PUB_PGSR0				(0x3000 + (0x06 << 2))
+#define P_DDR1_PUB_PGSR0			MMC_REG_ADDR(DDR1_PUB_PGSR0)
+#define DDR1_PUB_PGSR1				(0x3000 + (0x07 << 2))
+#define P_DDR1_PUB_PGSR1			MMC_REG_ADDR(DDR1_PUB_PGSR1)
+#define DDR1_PUB_PLLCR				(0x3000 + (0x08 << 2))
+#define P_DDR1_PUB_PLLCR			MMC_REG_ADDR(DDR1_PUB_PLLCR)
+#define DDR1_PUB_PTR0				(0x3000 + (0x09 << 2))
+#define P_DDR1_PUB_PTR0				MMC_REG_ADDR(DDR1_PUB_PTR0)
+#define DDR1_PUB_PTR1				(0x3000 + (0x0A << 2))
+#define P_DDR1_PUB_PTR1				MMC_REG_ADDR(DDR1_PUB_PTR1)
+#define DDR1_PUB_PTR2				(0x3000 + (0x0B << 2))
+#define P_DDR1_PUB_PTR2				MMC_REG_ADDR(DDR1_PUB_PTR2)
+#define DDR1_PUB_PTR3				(0x3000 + (0x0C << 2))
+#define P_DDR1_PUB_PTR3				MMC_REG_ADDR(DDR1_PUB_PTR3)
+#define DDR1_PUB_PTR4				(0x3000 + (0x0D << 2))
+#define P_DDR1_PUB_PTR4				MMC_REG_ADDR(DDR1_PUB_PTR4)
+#define DDR1_PUB_ACMDLR				(0x3000 + (0x0E << 2))
+#define P_DDR1_PUB_ACMDLR			MMC_REG_ADDR(DDR1_PUB_ACMDLR)
+#define DDR1_PUB_ACLCDLR			(0x3000 + (0x0F << 2))
+#define P_DDR1_PUB_ACLCDLR			MMC_REG_ADDR(DDR1_PUB_ACLCDLR)
+#define DDR1_PUB_ACBDLR0			(0x3000 + (0x10 << 2))
+#define P_DDR1_PUB_ACBDLR0			MMC_REG_ADDR(DDR1_PUB_ACBDLR0)
+#define DDR1_PUB_ACBDLR1			(0x3000 + (0x11 << 2))
+#define P_DDR1_PUB_ACBDLR1			MMC_REG_ADDR(DDR1_PUB_ACBDLR1)
+#define DDR1_PUB_ACBDLR2			(0x3000 + (0x12 << 2))
+#define P_DDR1_PUB_ACBDLR2			MMC_REG_ADDR(DDR1_PUB_ACBDLR2)
+#define DDR1_PUB_ACBDLR3			(0x3000 + (0x13 << 2))
+#define P_DDR1_PUB_ACBDLR3			MMC_REG_ADDR(DDR1_PUB_ACBDLR3)
+#define DDR1_PUB_ACBDLR4			(0x3000 + (0x14 << 2))
+#define P_DDR1_PUB_ACBDLR4			MMC_REG_ADDR(DDR1_PUB_ACBDLR4)
+#define DDR1_PUB_ACBDLR5			(0x3000 + (0x15 << 2))
+#define P_DDR1_PUB_ACBDLR5			MMC_REG_ADDR(DDR1_PUB_ACBDLR5)
+#define DDR1_PUB_ACBDLR6			(0x3000 + (0x16 << 2))
+#define P_DDR1_PUB_ACBDLR6			MMC_REG_ADDR(DDR1_PUB_ACBDLR6)
+#define DDR1_PUB_ACBDLR7			(0x3000 + (0x17 << 2))
+#define P_DDR1_PUB_ACBDLR7			MMC_REG_ADDR(DDR1_PUB_ACBDLR7)
+#define DDR1_PUB_ACBDLR8			(0x3000 + (0x18 << 2))
+#define P_DDR1_PUB_ACBDLR8			MMC_REG_ADDR(DDR1_PUB_ACBDLR8)
+#define DDR1_PUB_ACBDLR9			(0x3000 + (0x19 << 2))
+#define P_DDR1_PUB_ACBDLR9			MMC_REG_ADDR(DDR1_PUB_ACBDLR9)
+#define DDR1_PUB_ACIOCR0			(0x3000 + (0x1A << 2))
+#define P_DDR1_PUB_ACIOCR0			MMC_REG_ADDR(DDR1_PUB_ACIOCR0)
+#define DDR1_PUB_ACIOCR1			(0x3000 + (0x1B << 2))
+#define P_DDR1_PUB_ACIOCR1			MMC_REG_ADDR(DDR1_PUB_ACIOCR1)
+#define DDR1_PUB_ACIOCR2			(0x3000 + (0x1C << 2))
+#define P_DDR1_PUB_ACIOCR2			MMC_REG_ADDR(DDR1_PUB_ACIOCR2)
+#define DDR1_PUB_ACIOCR3			(0x3000 + (0x1D << 2))
+#define P_DDR1_PUB_ACIOCR3			MMC_REG_ADDR(DDR1_PUB_ACIOCR3)
+#define DDR1_PUB_ACIOCR4			(0x3000 + (0x1E << 2))
+#define P_DDR1_PUB_ACIOCR4			MMC_REG_ADDR(DDR1_PUB_ACIOCR4)
+#define DDR1_PUB_ACIOCR5			(0x3000 + (0x1F << 2))
+#define P_DDR1_PUB_ACIOCR5			MMC_REG_ADDR(DDR1_PUB_ACIOCR5)
+#define DDR1_PUB_DXCCR				(0x3000 + (0x20 << 2))
+#define P_DDR1_PUB_DXCCR			MMC_REG_ADDR(DDR1_PUB_DXCCR)
+#define DDR1_PUB_DSGCR				(0x3000 + (0x21 << 2))
+#define P_DDR1_PUB_DSGCR			MMC_REG_ADDR(DDR1_PUB_DSGCR)
+#define DDR1_PUB_DCR				(0x3000 + (0x22 << 2))
+#define P_DDR1_PUB_DCR				MMC_REG_ADDR(DDR1_PUB_DCR)
+#define DDR1_PUB_DTPR0				(0x3000 + (0x23 << 2))
+#define P_DDR1_PUB_DTPR0			MMC_REG_ADDR(DDR1_PUB_DTPR0)
+#define DDR1_PUB_DTPR1				(0x3000 + (0x24 << 2))
+#define P_DDR1_PUB_DTPR1			MMC_REG_ADDR(DDR1_PUB_DTPR1)
+#define DDR1_PUB_DTPR2				(0x3000 + (0x25 << 2))
+#define P_DDR1_PUB_DTPR2			MMC_REG_ADDR(DDR1_PUB_DTPR2)
+#define DDR1_PUB_DTPR3				(0x3000 + (0x26 << 2))
+#define P_DDR1_PUB_DTPR3			MMC_REG_ADDR(DDR1_PUB_DTPR3)
+#define DDR1_PUB_MR0				(0x3000 + (0x27 << 2))
+#define P_DDR1_PUB_MR0				MMC_REG_ADDR(DDR1_PUB_MR0)
+#define DDR1_PUB_MR1				(0x3000 + (0x28 << 2))
+#define P_DDR1_PUB_MR1				MMC_REG_ADDR(DDR1_PUB_MR1)
+#define DDR1_PUB_MR2				(0x3000 + (0x29 << 2))
+#define P_DDR1_PUB_MR2				MMC_REG_ADDR(DDR1_PUB_MR2)
+#define DDR1_PUB_MR3				(0x3000 + (0x2A << 2))
+#define P_DDR1_PUB_MR3				MMC_REG_ADDR(DDR1_PUB_MR3)
+#define DDR1_PUB_ODTCR				(0x3000 + (0x2B << 2))
+#define P_DDR1_PUB_ODTCR			MMC_REG_ADDR(DDR1_PUB_ODTCR)
+#define DDR1_PUB_DTCR				(0x3000 + (0x2C << 2))
+#define P_DDR1_PUB_DTCR				MMC_REG_ADDR(DDR1_PUB_DTCR)
+#define DDR1_PUB_DTAR0				(0x3000 + (0x2D << 2))
+#define P_DDR1_PUB_DTAR0			MMC_REG_ADDR(DDR1_PUB_DTAR0)
+#define DDR1_PUB_DTAR1				(0x3000 + (0x2E << 2))
+#define P_DDR1_PUB_DTAR1			MMC_REG_ADDR(DDR1_PUB_DTAR1)
+#define DDR1_PUB_DTAR2				(0x3000 + (0x2F << 2))
+#define P_DDR1_PUB_DTAR2			MMC_REG_ADDR(DDR1_PUB_DTAR2)
+#define DDR1_PUB_DTAR3				(0x3000 + (0x30 << 2))
+#define P_DDR1_PUB_DTAR3			MMC_REG_ADDR(DDR1_PUB_DTAR3)
+#define DDR1_PUB_DTDR0				(0x3000 + (0x31 << 2))
+#define P_DDR1_PUB_DTDR0			MMC_REG_ADDR(DDR1_PUB_DTDR0)
+#define DDR1_PUB_DTDR1				(0x3000 + (0x32 << 2))
+#define P_DDR1_PUB_DTDR1			MMC_REG_ADDR(DDR1_PUB_DTDR1)
+#define DDR1_PUB_DTEDR0				(0x3000 + (0x33 << 2))
+#define P_DDR1_PUB_DTEDR0			MMC_REG_ADDR(DDR1_PUB_DTEDR0)
+#define DDR1_PUB_DTEDR1				(0x3000 + (0x34 << 2))
+#define P_DDR1_PUB_DTEDR1			MMC_REG_ADDR(DDR1_PUB_DTEDR1)
+#define DDR1_PUB_RDIMMGCR0			(0x3000 + (0x35 << 2))
+#define P_DDR1_PUB_RDIMMGCR0			MMC_REG_ADDR(DDR1_PUB_RDIMMGCR0)
+#define DDR1_PUB_RDIMMGCR1			(0x3000 + (0x36 << 2))
+#define P_DDR1_PUB_RDIMMGCR1			MMC_REG_ADDR(DDR1_PUB_RDIMMGCR1)
+#define DDR1_PUB_RDIMMCR0			(0x3000 + (0x37 << 2))
+#define P_DDR1_PUB_RDIMMCR0			MMC_REG_ADDR(DDR1_PUB_RDIMMCR0)
+#define DDR1_PUB_RDIMMCR1			(0x3000 + (0x38 << 2))
+#define P_DDR1_PUB_RDIMMCR1			MMC_REG_ADDR(DDR1_PUB_RDIMMCR1)
+#define DDR1_PUB_GPR0				(0x3000 + (0x39 << 2))
+#define P_DDR1_PUB_GPR0				MMC_REG_ADDR(DDR1_PUB_GPR0)
+#define DDR1_PUB_GPR1				(0x3000 + (0x3A << 2))
+#define P_DDR1_PUB_GPR1				MMC_REG_ADDR(DDR1_PUB_GPR1)
+#define DDR1_PUB_CATR0				(0x3000 + (0x3B << 2))
+#define P_DDR1_PUB_CATR0			MMC_REG_ADDR(DDR1_PUB_CATR0)
+#define DDR1_PUB_CATR1				(0x3000 + (0x3C << 2))
+#define P_DDR1_PUB_CATR1			MMC_REG_ADDR(DDR1_PUB_CATR1)
+#define DDR1_PUB_DCUAR				(0x3000 + (0x60 << 2))
+#define P_DDR1_PUB_DCUAR			MMC_REG_ADDR(DDR1_PUB_DCUAR)
+#define DDR1_PUB_DCUDR				(0x3000 + (0x61 << 2))
+#define P_DDR1_PUB_DCUDR			MMC_REG_ADDR(DDR1_PUB_DCUDR)
+#define DDR1_PUB_DCURR				(0x3000 + (0x62 << 2))
+#define P_DDR1_PUB_DCURR			MMC_REG_ADDR(DDR1_PUB_DCURR)
+#define DDR1_PUB_DCULR				(0x3000 + (0x63 << 2))
+#define P_DDR1_PUB_DCULR			MMC_REG_ADDR(DDR1_PUB_DCULR)
+#define DDR1_PUB_DCUGCR				(0x3000 + (0x64 << 2))
+#define P_DDR1_PUB_DCUGCR			MMC_REG_ADDR(DDR1_PUB_DCUGCR)
+#define DDR1_PUB_DCUTPR				(0x3000 + (0x65 << 2))
+#define P_DDR1_PUB_DCUTPR			MMC_REG_ADDR(DDR1_PUB_DCUTPR)
+#define DDR1_PUB_DCUSR0				(0x3000 + (0x66 << 2))
+#define P_DDR1_PUB_DCUSR0			MMC_REG_ADDR(DDR1_PUB_DCUSR0)
+#define DDR1_PUB_DCUSR1				(0x3000 + (0x67 << 2))
+#define P_DDR1_PUB_DCUSR1			MMC_REG_ADDR(DDR1_PUB_DCUSR1)
+#define DDR1_PUB_BISTRR				(0x3000 + (0x70 << 2))
+#define P_DDR1_PUB_BISTRR			MMC_REG_ADDR(DDR1_PUB_BISTRR)
+#define DDR1_PUB_BISTWCR			(0x3000 + (0x71 << 2))
+#define P_DDR1_PUB_BISTWCR			MMC_REG_ADDR(DDR1_PUB_BISTWCR)
+#define DDR1_PUB_BISTMSKR0			(0x3000 + (0x72 << 2))
+#define P_DDR1_PUB_BISTMSKR0			MMC_REG_ADDR(DDR1_PUB_BISTMSKR0)
+#define DDR1_PUB_BISTMSKR1			(0x3000 + (0x73 << 2))
+#define P_DDR1_PUB_BISTMSKR1			MMC_REG_ADDR(DDR1_PUB_BISTMSKR1)
+#define DDR1_PUB_BISTMSKR2			(0x3000 + (0x74 << 2))
+#define P_DDR1_PUB_BISTMSKR2			MMC_REG_ADDR(DDR1_PUB_BISTMSKR2)
+#define DDR1_PUB_BISTLSR			(0x3000 + (0x75 << 2))
+#define P_DDR1_PUB_BISTLSR			MMC_REG_ADDR(DDR1_PUB_BISTLSR)
+#define DDR1_PUB_BISTAR0			(0x3000 + (0x76 << 2))
+#define P_DDR1_PUB_BISTAR0			MMC_REG_ADDR(DDR1_PUB_BISTAR0)
+#define DDR1_PUB_BISTAR1			(0x3000 + (0x77 << 2))
+#define P_DDR1_PUB_BISTAR1			MMC_REG_ADDR(DDR1_PUB_BISTAR1)
+#define DDR1_PUB_BISTAR2			(0x3000 + (0x78 << 2))
+#define P_DDR1_PUB_BISTAR2			MMC_REG_ADDR(DDR1_PUB_BISTAR2)
+#define DDR1_PUB_BISTUDPR			(0x3000 + (0x79 << 2))
+#define P_DDR1_PUB_BISTUDPR			MMC_REG_ADDR(DDR1_PUB_BISTUDPR)
+#define DDR1_PUB_BISTGSR			(0x3000 + (0x7A << 2))
+#define P_DDR1_PUB_BISTGSR			MMC_REG_ADDR(DDR1_PUB_BISTGSR)
+#define DDR1_PUB_BISTWER			(0x3000 + (0x7B << 2))
+#define P_DDR1_PUB_BISTWER			MMC_REG_ADDR(DDR1_PUB_BISTWER)
+#define DDR1_PUB_BISTBER0			(0x3000 + (0x7C << 2))
+#define P_DDR1_PUB_BISTBER0			MMC_REG_ADDR(DDR1_PUB_BISTBER0)
+#define DDR1_PUB_BISTBER1			(0x3000 + (0x7D << 2))
+#define P_DDR1_PUB_BISTBER1			MMC_REG_ADDR(DDR1_PUB_BISTBER1)
+#define DDR1_PUB_BISTBER2			(0x3000 + (0x7E << 2))
+#define P_DDR1_PUB_BISTBER2			MMC_REG_ADDR(DDR1_PUB_BISTBER2)
+#define DDR1_PUB_BISTBER3			(0x3000 + (0x7F << 2))
+#define P_DDR1_PUB_BISTBER3			MMC_REG_ADDR(DDR1_PUB_BISTBER3)
+#define DDR1_PUB_BISTWCSR			(0x3000 + (0x80 << 2))
+#define P_DDR1_PUB_BISTWCSR			MMC_REG_ADDR(DDR1_PUB_BISTWCSR)
+#define DDR1_PUB_BISTFWR0			(0x3000 + (0x81 << 2))
+#define P_DDR1_PUB_BISTFWR0			MMC_REG_ADDR(DDR1_PUB_BISTFWR0)
+#define DDR1_PUB_BISTFWR1			(0x3000 + (0x82 << 2))
+#define P_DDR1_PUB_BISTFWR1			MMC_REG_ADDR(DDR1_PUB_BISTFWR1)
+#define DDR1_PUB_BISTFWR2			(0x3000 + (0x83 << 2))
+#define P_DDR1_PUB_BISTFWR2			MMC_REG_ADDR(DDR1_PUB_BISTFWR2)
+#define DDR1_PUB_IOVCR0				(0x3000 + (0x8E << 2))
+#define P_DDR1_PUB_IOVCR0			MMC_REG_ADDR(DDR1_PUB_IOVCR0)
+#define DDR1_PUB_IOVCR1				(0x3000 + (0x8F << 2))
+#define P_DDR1_PUB_IOVCR1			MMC_REG_ADDR(DDR1_PUB_IOVCR1)
+#define DDR1_PUB_ZQCR				(0x3000 + (0x90 << 2))
+#define P_DDR1_PUB_ZQCR				MMC_REG_ADDR(DDR1_PUB_ZQCR)
+#define DDR1_PUB_ZQ0PR				(0x3000 + (0x91 << 2))
+#define P_DDR1_PUB_ZQ0PR			MMC_REG_ADDR(DDR1_PUB_ZQ0PR)
+#define DDR1_PUB_ZQ0DR				(0x3000 + (0x92 << 2))
+#define P_DDR1_PUB_ZQ0DR			MMC_REG_ADDR(DDR1_PUB_ZQ0DR)
+#define DDR1_PUB_ZQ0SR				(0x3000 + (0x93 << 2))
+#define P_DDR1_PUB_ZQ0SR			MMC_REG_ADDR(DDR1_PUB_ZQ0SR)
+#define DDR1_PUB_ZQ1PR				(0x3000 + (0x95 << 2))
+#define P_DDR1_PUB_ZQ1PR			MMC_REG_ADDR(DDR1_PUB_ZQ1PR)
+#define DDR1_PUB_ZQ1DR				(0x3000 + (0x96 << 2))
+#define P_DDR1_PUB_ZQ1DR			MMC_REG_ADDR(DDR1_PUB_ZQ1DR)
+#define DDR1_PUB_ZQ1SR				(0x3000 + (0x97 << 2))
+#define P_DDR1_PUB_ZQ1SR			MMC_REG_ADDR(DDR1_PUB_ZQ1SR)
+#define DDR1_PUB_ZQ2PR				(0x3000 + (0x99 << 2))
+#define P_DDR1_PUB_ZQ2PR			MMC_REG_ADDR(DDR1_PUB_ZQ2PR)
+#define DDR1_PUB_ZQ2DR				(0x3000 + (0x9A << 2))
+#define P_DDR1_PUB_ZQ2DR			MMC_REG_ADDR(DDR1_PUB_ZQ2DR)
+#define DDR1_PUB_ZQ2SR				(0x3000 + (0x9B << 2))
+#define P_DDR1_PUB_ZQ2SR			MMC_REG_ADDR(DDR1_PUB_ZQ2SR)
+#define DDR1_PUB_ZQ3PR				(0x3000 + (0x9D << 2))
+#define P_DDR1_PUB_ZQ3PR			MMC_REG_ADDR(DDR1_PUB_ZQ3PR)
+#define DDR1_PUB_ZQ3DR				(0x3000 + (0x9E << 2))
+#define P_DDR1_PUB_ZQ3DR			MMC_REG_ADDR(DDR1_PUB_ZQ3DR)
+#define DDR1_PUB_ZQ3SR				(0x3000 + (0x9F << 2))
+#define P_DDR1_PUB_ZQ3SR			MMC_REG_ADDR(DDR1_PUB_ZQ3SR)
+#define DDR1_PUB_DX0GCR0			(0x3000 + (0xA0 << 2))
+#define P_DDR1_PUB_DX0GCR0			MMC_REG_ADDR(DDR1_PUB_DX0GCR0)
+#define DDR1_PUB_DX0GCR1			(0x3000 + (0xA1 << 2))
+#define P_DDR1_PUB_DX0GCR1			MMC_REG_ADDR(DDR1_PUB_DX0GCR1)
+#define DDR1_PUB_DX0GCR2			(0x3000 + (0xA2 << 2))
+#define P_DDR1_PUB_DX0GCR2			MMC_REG_ADDR(DDR1_PUB_DX0GCR2)
+#define DDR1_PUB_DX0GCR3			(0x3000 + (0xA3 << 2))
+#define P_DDR1_PUB_DX0GCR3			MMC_REG_ADDR(DDR1_PUB_DX0GCR3)
+#define DDR1_PUB_DX0GSR0			(0x3000 + (0xA4 << 2))
+#define P_DDR1_PUB_DX0GSR0			MMC_REG_ADDR(DDR1_PUB_DX0GSR0)
+#define DDR1_PUB_DX0GSR1			(0x3000 + (0xA5 << 2))
+#define P_DDR1_PUB_DX0GSR1			MMC_REG_ADDR(DDR1_PUB_DX0GSR1)
+#define DDR1_PUB_DX0GSR2			(0x3000 + (0xA6 << 2))
+#define P_DDR1_PUB_DX0GSR2			MMC_REG_ADDR(DDR1_PUB_DX0GSR2)
+#define DDR1_PUB_DX0BDLR0			(0x3000 + (0xA7 << 2))
+#define P_DDR1_PUB_DX0BDLR0			MMC_REG_ADDR(DDR1_PUB_DX0BDLR0)
+#define DDR1_PUB_DX0BDLR1			(0x3000 + (0xA8 << 2))
+#define P_DDR1_PUB_DX0BDLR1			MMC_REG_ADDR(DDR1_PUB_DX0BDLR1)
+#define DDR1_PUB_DX0BDLR2			(0x3000 + (0xA9 << 2))
+#define P_DDR1_PUB_DX0BDLR2			MMC_REG_ADDR(DDR1_PUB_DX0BDLR2)
+#define DDR1_PUB_DX0BDLR3			(0x3000 + (0xAA << 2))
+#define P_DDR1_PUB_DX0BDLR3			MMC_REG_ADDR(DDR1_PUB_DX0BDLR3)
+#define DDR1_PUB_DX0BDLR4			(0x3000 + (0xAB << 2))
+#define P_DDR1_PUB_DX0BDLR4			MMC_REG_ADDR(DDR1_PUB_DX0BDLR4)
+#define DDR1_PUB_DX0BDLR5			(0x3000 + (0xAC << 2))
+#define P_DDR1_PUB_DX0BDLR5			MMC_REG_ADDR(DDR1_PUB_DX0BDLR5)
+#define DDR1_PUB_DX0BDLR6			(0x3000 + (0xAD << 2))
+#define P_DDR1_PUB_DX0BDLR6			MMC_REG_ADDR(DDR1_PUB_DX0BDLR6)
+#define DDR1_PUB_DX0LCDLR0			(0x3000 + (0xAE << 2))
+#define P_DDR1_PUB_DX0LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX0LCDLR0)
+#define DDR1_PUB_DX0LCDLR1			(0x3000 + (0xAF << 2))
+#define P_DDR1_PUB_DX0LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX0LCDLR1)
+#define DDR1_PUB_DX0LCDLR2			(0x3000 + (0xB0 << 2))
+#define P_DDR1_PUB_DX0LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX0LCDLR2)
+#define DDR1_PUB_DX0MDLR			(0x3000 + (0xB1 << 2))
+#define P_DDR1_PUB_DX0MDLR			MMC_REG_ADDR(DDR1_PUB_DX0MDLR)
+#define DDR1_PUB_DX0GTR				(0x3000 + (0xB2 << 2))
+#define P_DDR1_PUB_DX0GTR			MMC_REG_ADDR(DDR1_PUB_DX0GTR)
+#define DDR1_PUB_DX1GCR0			(0x3000 + (0xC0 << 2))
+#define P_DDR1_PUB_DX1GCR0			MMC_REG_ADDR(DDR1_PUB_DX1GCR0)
+#define DDR1_PUB_DX1GCR1			(0x3000 + (0xC1 << 2))
+#define P_DDR1_PUB_DX1GCR1			MMC_REG_ADDR(DDR1_PUB_DX1GCR1)
+#define DDR1_PUB_DX1GCR2			(0x3000 + (0xC2 << 2))
+#define P_DDR1_PUB_DX1GCR2			MMC_REG_ADDR(DDR1_PUB_DX1GCR2)
+#define DDR1_PUB_DX1GCR3			(0x3000 + (0xC3 << 2))
+#define P_DDR1_PUB_DX1GCR3			MMC_REG_ADDR(DDR1_PUB_DX1GCR3)
+#define DDR1_PUB_DX1GSR0			(0x3000 + (0xC4 << 2))
+#define P_DDR1_PUB_DX1GSR0			MMC_REG_ADDR(DDR1_PUB_DX1GSR0)
+#define DDR1_PUB_DX1GSR1			(0x3000 + (0xC5 << 2))
+#define P_DDR1_PUB_DX1GSR1			MMC_REG_ADDR(DDR1_PUB_DX1GSR1)
+#define DDR1_PUB_DX1GSR2			(0x3000 + (0xC6 << 2))
+#define P_DDR1_PUB_DX1GSR2			MMC_REG_ADDR(DDR1_PUB_DX1GSR2)
+#define DDR1_PUB_DX1BDLR0			(0x3000 + (0xC7 << 2))
+#define P_DDR1_PUB_DX1BDLR0			MMC_REG_ADDR(DDR1_PUB_DX1BDLR0)
+#define DDR1_PUB_DX1BDLR1			(0x3000 + (0xC8 << 2))
+#define P_DDR1_PUB_DX1BDLR1			MMC_REG_ADDR(DDR1_PUB_DX1BDLR1)
+#define DDR1_PUB_DX1BDLR2			(0x3000 + (0xC9 << 2))
+#define P_DDR1_PUB_DX1BDLR2			MMC_REG_ADDR(DDR1_PUB_DX1BDLR2)
+#define DDR1_PUB_DX1BDLR3			(0x3000 + (0xCA << 2))
+#define P_DDR1_PUB_DX1BDLR3			MMC_REG_ADDR(DDR1_PUB_DX1BDLR3)
+#define DDR1_PUB_DX1BDLR4			(0x3000 + (0xCB << 2))
+#define P_DDR1_PUB_DX1BDLR4			MMC_REG_ADDR(DDR1_PUB_DX1BDLR4)
+#define DDR1_PUB_DX1BDLR5			(0x3000 + (0xCC << 2))
+#define P_DDR1_PUB_DX1BDLR5			MMC_REG_ADDR(DDR1_PUB_DX1BDLR5)
+#define DDR1_PUB_DX1BDLR6			(0x3000 + (0xCD << 2))
+#define P_DDR1_PUB_DX1BDLR6			MMC_REG_ADDR(DDR1_PUB_DX1BDLR6)
+#define DDR1_PUB_DX1LCDLR0			(0x3000 + (0xCE << 2))
+#define P_DDR1_PUB_DX1LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX1LCDLR0)
+#define DDR1_PUB_DX1LCDLR1			(0x3000 + (0xCF << 2))
+#define P_DDR1_PUB_DX1LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX1LCDLR1)
+#define DDR1_PUB_DX1LCDLR2			(0x3000 + (0xD0 << 2))
+#define P_DDR1_PUB_DX1LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX1LCDLR2)
+#define DDR1_PUB_DX1MDLR			(0x3000 + (0xD1 << 2))
+#define P_DDR1_PUB_DX1MDLR			MMC_REG_ADDR(DDR1_PUB_DX1MDLR)
+#define DDR1_PUB_DX1GTR				(0x3000 + (0xD2 << 2))
+#define P_DDR1_PUB_DX1GTR			MMC_REG_ADDR(DDR1_PUB_DX1GTR)
+#define DDR1_PUB_DX2GCR0			(0x3000 + (0xE0 << 2))
+#define P_DDR1_PUB_DX2GCR0			MMC_REG_ADDR(DDR1_PUB_DX2GCR0)
+#define DDR1_PUB_DX2GCR1			(0x3000 + (0xE1 << 2))
+#define P_DDR1_PUB_DX2GCR1			MMC_REG_ADDR(DDR1_PUB_DX2GCR1)
+#define DDR1_PUB_DX2GCR2			(0x3000 + (0xE2 << 2))
+#define P_DDR1_PUB_DX2GCR2			MMC_REG_ADDR(DDR1_PUB_DX2GCR2)
+#define DDR1_PUB_DX2GCR3			(0x3000 + (0xE3 << 2))
+#define P_DDR1_PUB_DX2GCR3			MMC_REG_ADDR(DDR1_PUB_DX2GCR3)
+#define DDR1_PUB_DX2GSR0			(0x3000 + (0xE4 << 2))
+#define P_DDR1_PUB_DX2GSR0			MMC_REG_ADDR(DDR1_PUB_DX2GSR0)
+#define DDR1_PUB_DX2GSR1			(0x3000 + (0xE5 << 2))
+#define P_DDR1_PUB_DX2GSR1			MMC_REG_ADDR(DDR1_PUB_DX2GSR1)
+#define DDR1_PUB_DX2GSR2			(0x3000 + (0xE6 << 2))
+#define P_DDR1_PUB_DX2GSR2			MMC_REG_ADDR(DDR1_PUB_DX2GSR2)
+#define DDR1_PUB_DX2BDLR0			(0x3000 + (0xE7 << 2))
+#define P_DDR1_PUB_DX2BDLR0			MMC_REG_ADDR(DDR1_PUB_DX2BDLR0)
+#define DDR1_PUB_DX2BDLR1			(0x3000 + (0xE8 << 2))
+#define P_DDR1_PUB_DX2BDLR1			MMC_REG_ADDR(DDR1_PUB_DX2BDLR1)
+#define DDR1_PUB_DX2BDLR2			(0x3000 + (0xE9 << 2))
+#define P_DDR1_PUB_DX2BDLR2			MMC_REG_ADDR(DDR1_PUB_DX2BDLR2)
+#define DDR1_PUB_DX2BDLR3			(0x3000 + (0xEA << 2))
+#define P_DDR1_PUB_DX2BDLR3			MMC_REG_ADDR(DDR1_PUB_DX2BDLR3)
+#define DDR1_PUB_DX2BDLR4			(0x3000 + (0xEB << 2))
+#define P_DDR1_PUB_DX2BDLR4			MMC_REG_ADDR(DDR1_PUB_DX2BDLR4)
+#define DDR1_PUB_DX2BDLR5			(0x3000 + (0xEC << 2))
+#define P_DDR1_PUB_DX2BDLR5			MMC_REG_ADDR(DDR1_PUB_DX2BDLR5)
+#define DDR1_PUB_DX2BDLR6			(0x3000 + (0xED << 2))
+#define P_DDR1_PUB_DX2BDLR6			MMC_REG_ADDR(DDR1_PUB_DX2BDLR6)
+#define DDR1_PUB_DX2LCDLR0			(0x3000 + (0xEE << 2))
+#define P_DDR1_PUB_DX2LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX2LCDLR0)
+#define DDR1_PUB_DX2LCDLR1			(0x3000 + (0xEF << 2))
+#define P_DDR1_PUB_DX2LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX2LCDLR1)
+#define DDR1_PUB_DX2LCDLR2			(0x3000 + (0xF0 << 2))
+#define P_DDR1_PUB_DX2LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX2LCDLR2)
+#define DDR1_PUB_DX2MDLR			(0x3000 + (0xF1 << 2))
+#define P_DDR1_PUB_DX2MDLR			MMC_REG_ADDR(DDR1_PUB_DX2MDLR)
+#define DDR1_PUB_DX2GTR				(0x3000 + (0xF2 << 2))
+#define P_DDR1_PUB_DX2GTR			MMC_REG_ADDR(DDR1_PUB_DX2GTR)
+#define DDR1_PUB_DX3GCR0			(0x3000 + (0x100 << 2))
+#define P_DDR1_PUB_DX3GCR0			MMC_REG_ADDR(DDR1_PUB_DX3GCR0)
+#define DDR1_PUB_DX3GCR1			(0x3000 + (0x101 << 2))
+#define P_DDR1_PUB_DX3GCR1			MMC_REG_ADDR(DDR1_PUB_DX3GCR1)
+#define DDR1_PUB_DX3GCR2			(0x3000 + (0x102 << 2))
+#define P_DDR1_PUB_DX3GCR2			MMC_REG_ADDR(DDR1_PUB_DX3GCR2)
+#define DDR1_PUB_DX3GCR3			(0x3000 + (0x103 << 2))
+#define P_DDR1_PUB_DX3GCR3			MMC_REG_ADDR(DDR1_PUB_DX3GCR3)
+#define DDR1_PUB_DX3GSR0			(0x3000 + (0x104 << 2))
+#define P_DDR1_PUB_DX3GSR0			MMC_REG_ADDR(DDR1_PUB_DX3GSR0)
+#define DDR1_PUB_DX3GSR1			(0x3000 + (0x105 << 2))
+#define P_DDR1_PUB_DX3GSR1			MMC_REG_ADDR(DDR1_PUB_DX3GSR1)
+#define DDR1_PUB_DX3GSR2			(0x3000 + (0x106 << 2))
+#define P_DDR1_PUB_DX3GSR2			MMC_REG_ADDR(DDR1_PUB_DX3GSR2)
+#define DDR1_PUB_DX3BDLR0			(0x3000 + (0x107 << 2))
+#define P_DDR1_PUB_DX3BDLR0			MMC_REG_ADDR(DDR1_PUB_DX3BDLR0)
+#define DDR1_PUB_DX3BDLR1			(0x3000 + (0x108 << 2))
+#define P_DDR1_PUB_DX3BDLR1			MMC_REG_ADDR(DDR1_PUB_DX3BDLR1)
+#define DDR1_PUB_DX3BDLR2			(0x3000 + (0x109 << 2))
+#define P_DDR1_PUB_DX3BDLR2			MMC_REG_ADDR(DDR1_PUB_DX3BDLR2)
+#define DDR1_PUB_DX3BDLR3			(0x3000 + (0x10A << 2))
+#define P_DDR1_PUB_DX3BDLR3			MMC_REG_ADDR(DDR1_PUB_DX3BDLR3)
+#define DDR1_PUB_DX3BDLR4			(0x3000 + (0x10B << 2))
+#define P_DDR1_PUB_DX3BDLR4			MMC_REG_ADDR(DDR1_PUB_DX3BDLR4)
+#define DDR1_PUB_DX3BDLR5			(0x3000 + (0x10C << 2))
+#define P_DDR1_PUB_DX3BDLR5			MMC_REG_ADDR(DDR1_PUB_DX3BDLR5)
+#define DDR1_PUB_DX3BDLR6			(0x3000 + (0x10D << 2))
+#define P_DDR1_PUB_DX3BDLR6			MMC_REG_ADDR(DDR1_PUB_DX3BDLR6)
+#define DDR1_PUB_DX3LCDLR0			(0x3000 + (0x10E << 2))
+#define P_DDR1_PUB_DX3LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX3LCDLR0)
+#define DDR1_PUB_DX3LCDLR1			(0x3000 + (0x10F << 2))
+#define P_DDR1_PUB_DX3LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX3LCDLR1)
+#define DDR1_PUB_DX3LCDLR2			(0x3000 + (0x110 << 2))
+#define P_DDR1_PUB_DX3LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX3LCDLR2)
+#define DDR1_PUB_DX3MDLR			(0x3000 + (0x111 << 2))
+#define P_DDR1_PUB_DX3MDLR			MMC_REG_ADDR(DDR1_PUB_DX3MDLR)
+#define DDR1_PUB_DX3GTR				(0x3000 + (0x112 << 2))
+#define P_DDR1_PUB_DX3GTR			MMC_REG_ADDR(DDR1_PUB_DX3GTR)
+#define DDR1_PUB_DX4GCR0			(0x3000 + (0x120 << 2))
+#define P_DDR1_PUB_DX4GCR0			MMC_REG_ADDR(DDR1_PUB_DX4GCR0)
+#define DDR1_PUB_DX4GCR1			(0x3000 + (0x121 << 2))
+#define P_DDR1_PUB_DX4GCR1			MMC_REG_ADDR(DDR1_PUB_DX4GCR1)
+#define DDR1_PUB_DX4GCR2			(0x3000 + (0x122 << 2))
+#define P_DDR1_PUB_DX4GCR2			MMC_REG_ADDR(DDR1_PUB_DX4GCR2)
+#define DDR1_PUB_DX4GCR3			(0x3000 + (0x123 << 2))
+#define P_DDR1_PUB_DX4GCR3			MMC_REG_ADDR(DDR1_PUB_DX4GCR3)
+#define DDR1_PUB_DX4GSR0			(0x3000 + (0x124 << 2))
+#define P_DDR1_PUB_DX4GSR0			MMC_REG_ADDR(DDR1_PUB_DX4GSR0)
+#define DDR1_PUB_DX4GSR1			(0x3000 + (0x125 << 2))
+#define P_DDR1_PUB_DX4GSR1			MMC_REG_ADDR(DDR1_PUB_DX4GSR1)
+#define DDR1_PUB_DX4GSR2			(0x3000 + (0x126 << 2))
+#define P_DDR1_PUB_DX4GSR2			MMC_REG_ADDR(DDR1_PUB_DX4GSR2)
+#define DDR1_PUB_DX4BDLR0			(0x3000 + (0x127 << 2))
+#define P_DDR1_PUB_DX4BDLR0			MMC_REG_ADDR(DDR1_PUB_DX4BDLR0)
+#define DDR1_PUB_DX4BDLR1			(0x3000 + (0x128 << 2))
+#define P_DDR1_PUB_DX4BDLR1			MMC_REG_ADDR(DDR1_PUB_DX4BDLR1)
+#define DDR1_PUB_DX4BDLR2			(0x3000 + (0x129 << 2))
+#define P_DDR1_PUB_DX4BDLR2			MMC_REG_ADDR(DDR1_PUB_DX4BDLR2)
+#define DDR1_PUB_DX4BDLR3			(0x3000 + (0x12A << 2))
+#define P_DDR1_PUB_DX4BDLR3			MMC_REG_ADDR(DDR1_PUB_DX4BDLR3)
+#define DDR1_PUB_DX4BDLR4			(0x3000 + (0x12B << 2))
+#define P_DDR1_PUB_DX4BDLR4			MMC_REG_ADDR(DDR1_PUB_DX4BDLR4)
+#define DDR1_PUB_DX4BDLR5			(0x3000 + (0x12C << 2))
+#define P_DDR1_PUB_DX4BDLR5			MMC_REG_ADDR(DDR1_PUB_DX4BDLR5)
+#define DDR1_PUB_DX4BDLR6			(0x3000 + (0x12D << 2))
+#define P_DDR1_PUB_DX4BDLR6			MMC_REG_ADDR(DDR1_PUB_DX4BDLR6)
+#define DDR1_PUB_DX4LCDLR0			(0x3000 + (0x12E << 2))
+#define P_DDR1_PUB_DX4LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX4LCDLR0)
+#define DDR1_PUB_DX4LCDLR1			(0x3000 + (0x12F << 2))
+#define P_DDR1_PUB_DX4LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX4LCDLR1)
+#define DDR1_PUB_DX4LCDLR2			(0x3000 + (0x130 << 2))
+#define P_DDR1_PUB_DX4LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX4LCDLR2)
+#define DDR1_PUB_DX4MDLR			(0x3000 + (0x131 << 2))
+#define P_DDR1_PUB_DX4MDLR			MMC_REG_ADDR(DDR1_PUB_DX4MDLR)
+#define DDR1_PUB_DX4GTR				(0x3000 + (0x132 << 2))
+#define P_DDR1_PUB_DX4GTR			MMC_REG_ADDR(DDR1_PUB_DX4GTR)
+#define DDR1_PUB_DX5GCR0			(0x3000 + (0x140 << 2))
+#define P_DDR1_PUB_DX5GCR0			MMC_REG_ADDR(DDR1_PUB_DX5GCR0)
+#define DDR1_PUB_DX5GCR1			(0x3000 + (0x141 << 2))
+#define P_DDR1_PUB_DX5GCR1			MMC_REG_ADDR(DDR1_PUB_DX5GCR1)
+#define DDR1_PUB_DX5GCR2			(0x3000 + (0x142 << 2))
+#define P_DDR1_PUB_DX5GCR2			MMC_REG_ADDR(DDR1_PUB_DX5GCR2)
+#define DDR1_PUB_DX5GCR3			(0x3000 + (0x143 << 2))
+#define P_DDR1_PUB_DX5GCR3			MMC_REG_ADDR(DDR1_PUB_DX5GCR3)
+#define DDR1_PUB_DX5GSR0			(0x3000 + (0x144 << 2))
+#define P_DDR1_PUB_DX5GSR0			MMC_REG_ADDR(DDR1_PUB_DX5GSR0)
+#define DDR1_PUB_DX5GSR1			(0x3000 + (0x145 << 2))
+#define P_DDR1_PUB_DX5GSR1			MMC_REG_ADDR(DDR1_PUB_DX5GSR1)
+#define DDR1_PUB_DX5GSR2			(0x3000 + (0x146 << 2))
+#define P_DDR1_PUB_DX5GSR2			MMC_REG_ADDR(DDR1_PUB_DX5GSR2)
+#define DDR1_PUB_DX5BDLR0			(0x3000 + (0x147 << 2))
+#define P_DDR1_PUB_DX5BDLR0			MMC_REG_ADDR(DDR1_PUB_DX5BDLR0)
+#define DDR1_PUB_DX5BDLR1			(0x3000 + (0x148 << 2))
+#define P_DDR1_PUB_DX5BDLR1			MMC_REG_ADDR(DDR1_PUB_DX5BDLR1)
+#define DDR1_PUB_DX5BDLR2			(0x3000 + (0x149 << 2))
+#define P_DDR1_PUB_DX5BDLR2			MMC_REG_ADDR(DDR1_PUB_DX5BDLR2)
+#define DDR1_PUB_DX5BDLR3			(0x3000 + (0x14A << 2))
+#define P_DDR1_PUB_DX5BDLR3			MMC_REG_ADDR(DDR1_PUB_DX5BDLR3)
+#define DDR1_PUB_DX5BDLR4			(0x3000 + (0x14B << 2))
+#define P_DDR1_PUB_DX5BDLR4			MMC_REG_ADDR(DDR1_PUB_DX5BDLR4)
+#define DDR1_PUB_DX5BDLR5			(0x3000 + (0x14C << 2))
+#define P_DDR1_PUB_DX5BDLR5			MMC_REG_ADDR(DDR1_PUB_DX5BDLR5)
+#define DDR1_PUB_DX5BDLR6			(0x3000 + (0x14D << 2))
+#define P_DDR1_PUB_DX5BDLR6			MMC_REG_ADDR(DDR1_PUB_DX5BDLR6)
+#define DDR1_PUB_DX5LCDLR0			(0x3000 + (0x14E << 2))
+#define P_DDR1_PUB_DX5LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX5LCDLR0)
+#define DDR1_PUB_DX5LCDLR1			(0x3000 + (0x14F << 2))
+#define P_DDR1_PUB_DX5LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX5LCDLR1)
+#define DDR1_PUB_DX5LCDLR2			(0x3000 + (0x150 << 2))
+#define P_DDR1_PUB_DX5LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX5LCDLR2)
+#define DDR1_PUB_DX5MDLR			(0x3000 + (0x151 << 2))
+#define P_DDR1_PUB_DX5MDLR			MMC_REG_ADDR(DDR1_PUB_DX5MDLR)
+#define DDR1_PUB_DX5GTR				(0x3000 + (0x152 << 2))
+#define P_DDR1_PUB_DX5GTR			MMC_REG_ADDR(DDR1_PUB_DX5GTR)
+#define DDR1_PUB_DX6GCR0			(0x3000 + (0x160 << 2))
+#define P_DDR1_PUB_DX6GCR0			MMC_REG_ADDR(DDR1_PUB_DX6GCR0)
+#define DDR1_PUB_DX6GCR1			(0x3000 + (0x161 << 2))
+#define P_DDR1_PUB_DX6GCR1			MMC_REG_ADDR(DDR1_PUB_DX6GCR1)
+#define DDR1_PUB_DX6GCR2			(0x3000 + (0x162 << 2))
+#define P_DDR1_PUB_DX6GCR2			MMC_REG_ADDR(DDR1_PUB_DX6GCR2)
+#define DDR1_PUB_DX6GCR3			(0x3000 + (0x163 << 2))
+#define P_DDR1_PUB_DX6GCR3			MMC_REG_ADDR(DDR1_PUB_DX6GCR3)
+#define DDR1_PUB_DX6GSR0			(0x3000 + (0x164 << 2))
+#define P_DDR1_PUB_DX6GSR0			MMC_REG_ADDR(DDR1_PUB_DX6GSR0)
+#define DDR1_PUB_DX6GSR1			(0x3000 + (0x165 << 2))
+#define P_DDR1_PUB_DX6GSR1			MMC_REG_ADDR(DDR1_PUB_DX6GSR1)
+#define DDR1_PUB_DX6GSR2			(0x3000 + (0x166 << 2))
+#define P_DDR1_PUB_DX6GSR2			MMC_REG_ADDR(DDR1_PUB_DX6GSR2)
+#define DDR1_PUB_DX6BDLR0			(0x3000 + (0x167 << 2))
+#define P_DDR1_PUB_DX6BDLR0			MMC_REG_ADDR(DDR1_PUB_DX6BDLR0)
+#define DDR1_PUB_DX6BDLR1			(0x3000 + (0x168 << 2))
+#define P_DDR1_PUB_DX6BDLR1			MMC_REG_ADDR(DDR1_PUB_DX6BDLR1)
+#define DDR1_PUB_DX6BDLR2			(0x3000 + (0x169 << 2))
+#define P_DDR1_PUB_DX6BDLR2			MMC_REG_ADDR(DDR1_PUB_DX6BDLR2)
+#define DDR1_PUB_DX6BDLR3			(0x3000 + (0x16A << 2))
+#define P_DDR1_PUB_DX6BDLR3			MMC_REG_ADDR(DDR1_PUB_DX6BDLR3)
+#define DDR1_PUB_DX6BDLR4			(0x3000 + (0x16B << 2))
+#define P_DDR1_PUB_DX6BDLR4			MMC_REG_ADDR(DDR1_PUB_DX6BDLR4)
+#define DDR1_PUB_DX6BDLR5			(0x3000 + (0x16C << 2))
+#define P_DDR1_PUB_DX6BDLR5			MMC_REG_ADDR(DDR1_PUB_DX6BDLR5)
+#define DDR1_PUB_DX6BDLR6			(0x3000 + (0x16D << 2))
+#define P_DDR1_PUB_DX6BDLR6			MMC_REG_ADDR(DDR1_PUB_DX6BDLR6)
+#define DDR1_PUB_DX6LCDLR0			(0x3000 + (0x16E << 2))
+#define P_DDR1_PUB_DX6LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX6LCDLR0)
+#define DDR1_PUB_DX6LCDLR1			(0x3000 + (0x16F << 2))
+#define P_DDR1_PUB_DX6LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX6LCDLR1)
+#define DDR1_PUB_DX6LCDLR2			(0x3000 + (0x170 << 2))
+#define P_DDR1_PUB_DX6LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX6LCDLR2)
+#define DDR1_PUB_DX6MDLR			(0x3000 + (0x171 << 2))
+#define P_DDR1_PUB_DX6MDLR			MMC_REG_ADDR(DDR1_PUB_DX6MDLR)
+#define DDR1_PUB_DX6GTR				(0x3000 + (0x172 << 2))
+#define P_DDR1_PUB_DX6GTR			MMC_REG_ADDR(DDR1_PUB_DX6GTR)
+#define DDR1_PUB_DX7GCR0			(0x3000 + (0x180 << 2))
+#define P_DDR1_PUB_DX7GCR0			MMC_REG_ADDR(DDR1_PUB_DX7GCR0)
+#define DDR1_PUB_DX7GCR1			(0x3000 + (0x181 << 2))
+#define P_DDR1_PUB_DX7GCR1			MMC_REG_ADDR(DDR1_PUB_DX7GCR1)
+#define DDR1_PUB_DX7GCR2			(0x3000 + (0x182 << 2))
+#define P_DDR1_PUB_DX7GCR2			MMC_REG_ADDR(DDR1_PUB_DX7GCR2)
+#define DDR1_PUB_DX7GCR3			(0x3000 + (0x183 << 2))
+#define P_DDR1_PUB_DX7GCR3			MMC_REG_ADDR(DDR1_PUB_DX7GCR3)
+#define DDR1_PUB_DX7GSR0			(0x3000 + (0x184 << 2))
+#define P_DDR1_PUB_DX7GSR0			MMC_REG_ADDR(DDR1_PUB_DX7GSR0)
+#define DDR1_PUB_DX7GSR1			(0x3000 + (0x185 << 2))
+#define P_DDR1_PUB_DX7GSR1			MMC_REG_ADDR(DDR1_PUB_DX7GSR1)
+#define DDR1_PUB_DX7GSR2			(0x3000 + (0x186 << 2))
+#define P_DDR1_PUB_DX7GSR2			MMC_REG_ADDR(DDR1_PUB_DX7GSR2)
+#define DDR1_PUB_DX7BDLR0			(0x3000 + (0x187 << 2))
+#define P_DDR1_PUB_DX7BDLR0			MMC_REG_ADDR(DDR1_PUB_DX7BDLR0)
+#define DDR1_PUB_DX7BDLR1			(0x3000 + (0x188 << 2))
+#define P_DDR1_PUB_DX7BDLR1			MMC_REG_ADDR(DDR1_PUB_DX7BDLR1)
+#define DDR1_PUB_DX7BDLR2			(0x3000 + (0x189 << 2))
+#define P_DDR1_PUB_DX7BDLR2			MMC_REG_ADDR(DDR1_PUB_DX7BDLR2)
+#define DDR1_PUB_DX7BDLR3			(0x3000 + (0x18A << 2))
+#define P_DDR1_PUB_DX7BDLR3			MMC_REG_ADDR(DDR1_PUB_DX7BDLR3)
+#define DDR1_PUB_DX7BDLR4			(0x3000 + (0x18B << 2))
+#define P_DDR1_PUB_DX7BDLR4			MMC_REG_ADDR(DDR1_PUB_DX7BDLR4)
+#define DDR1_PUB_DX7BDLR5			(0x3000 + (0x18C << 2))
+#define P_DDR1_PUB_DX7BDLR5			MMC_REG_ADDR(DDR1_PUB_DX7BDLR5)
+#define DDR1_PUB_DX7BDLR6			(0x3000 + (0x18D << 2))
+#define P_DDR1_PUB_DX7BDLR6			MMC_REG_ADDR(DDR1_PUB_DX7BDLR6)
+#define DDR1_PUB_DX7LCDLR0			(0x3000 + (0x18E << 2))
+#define P_DDR1_PUB_DX7LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX7LCDLR0)
+#define DDR1_PUB_DX7LCDLR1			(0x3000 + (0x18F << 2))
+#define P_DDR1_PUB_DX7LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX7LCDLR1)
+#define DDR1_PUB_DX7LCDLR2			(0x3000 + (0x190 << 2))
+#define P_DDR1_PUB_DX7LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX7LCDLR2)
+#define DDR1_PUB_DX7MDLR			(0x3000 + (0x191 << 2))
+#define P_DDR1_PUB_DX7MDLR			MMC_REG_ADDR(DDR1_PUB_DX7MDLR)
+#define DDR1_PUB_DX7GTR				(0x3000 + (0x192 << 2))
+#define P_DDR1_PUB_DX7GTR			MMC_REG_ADDR(DDR1_PUB_DX7GTR)
+#define DDR1_PUB_DX8GCR0			(0x3000 + (0x1A0 << 2))
+#define P_DDR1_PUB_DX8GCR0			MMC_REG_ADDR(DDR1_PUB_DX8GCR0)
+#define DDR1_PUB_DX8GCR1			(0x3000 + (0x1A1 << 2))
+#define P_DDR1_PUB_DX8GCR1			MMC_REG_ADDR(DDR1_PUB_DX8GCR1)
+#define DDR1_PUB_DX8GCR2			(0x3000 + (0x1A2 << 2))
+#define P_DDR1_PUB_DX8GCR2			MMC_REG_ADDR(DDR1_PUB_DX8GCR2)
+#define DDR1_PUB_DX8GCR3			(0x3000 + (0x1A3 << 2))
+#define P_DDR1_PUB_DX8GCR3			MMC_REG_ADDR(DDR1_PUB_DX8GCR3)
+#define DDR1_PUB_DX8GSR0			(0x3000 + (0x1A4 << 2))
+#define P_DDR1_PUB_DX8GSR0			MMC_REG_ADDR(DDR1_PUB_DX8GSR0)
+#define DDR1_PUB_DX8GSR1			(0x3000 + (0x1A5 << 2))
+#define P_DDR1_PUB_DX8GSR1			MMC_REG_ADDR(DDR1_PUB_DX8GSR1)
+#define DDR1_PUB_DX8GSR2			(0x3000 + (0x1A6 << 2))
+#define P_DDR1_PUB_DX8GSR2			MMC_REG_ADDR(DDR1_PUB_DX8GSR2)
+#define DDR1_PUB_DX8BDLR0			(0x3000 + (0x1A7 << 2))
+#define P_DDR1_PUB_DX8BDLR0			MMC_REG_ADDR(DDR1_PUB_DX8BDLR0)
+#define DDR1_PUB_DX8BDLR1			(0x3000 + (0x1A8 << 2))
+#define P_DDR1_PUB_DX8BDLR1			MMC_REG_ADDR(DDR1_PUB_DX8BDLR1)
+#define DDR1_PUB_DX8BDLR2			(0x3000 + (0x1A9 << 2))
+#define P_DDR1_PUB_DX8BDLR2			MMC_REG_ADDR(DDR1_PUB_DX8BDLR2)
+#define DDR1_PUB_DX8BDLR3			(0x3000 + (0x1AA << 2))
+#define P_DDR1_PUB_DX8BDLR3			MMC_REG_ADDR(DDR1_PUB_DX8BDLR3)
+#define DDR1_PUB_DX8BDLR4			(0x3000 + (0x1AB << 2))
+#define P_DDR1_PUB_DX8BDLR4			MMC_REG_ADDR(DDR1_PUB_DX8BDLR4)
+#define DDR1_PUB_DX8BDLR5			(0x3000 + (0x1AC << 2))
+#define P_DDR1_PUB_DX8BDLR5			MMC_REG_ADDR(DDR1_PUB_DX8BDLR5)
+#define DDR1_PUB_DX8BDLR6			(0x3000 + (0x1AD << 2))
+#define P_DDR1_PUB_DX8BDLR6			MMC_REG_ADDR(DDR1_PUB_DX8BDLR6)
+#define DDR1_PUB_DX8LCDLR0			(0x3000 + (0x1AE << 2))
+#define P_DDR1_PUB_DX8LCDLR0			MMC_REG_ADDR(DDR1_PUB_DX8LCDLR0)
+#define DDR1_PUB_DX8LCDLR1			(0x3000 + (0x1AF << 2))
+#define P_DDR1_PUB_DX8LCDLR1			MMC_REG_ADDR(DDR1_PUB_DX8LCDLR1)
+#define DDR1_PUB_DX8LCDLR2			(0x3000 + (0x1B0 << 2))
+#define P_DDR1_PUB_DX8LCDLR2			MMC_REG_ADDR(DDR1_PUB_DX8LCDLR2)
+#define DDR1_PUB_DX8MDLR			(0x3000 + (0x1B1 << 2))
+#define P_DDR1_PUB_DX8MDLR			MMC_REG_ADDR(DDR1_PUB_DX8MDLR)
+#define DDR1_PUB_DX8GTR				(0x3000 + (0x1B2 << 2))
+#define P_DDR1_PUB_DX8GTR			MMC_REG_ADDR(DDR1_PUB_DX8GTR)
+
+
+/*
+ * ucode/dmc_reg.h
+ */
+#define S_DMC_REG_BASE				0x6000
+#define DMC_REQ_CTRL				(S_DMC_REG_BASE + (0x00 << 2))
+#define P_DMC_REQ_CTRL				MMC_REG_ADDR(DMC_REQ_CTRL)
+#define DMC_SOFT_RST				(S_DMC_REG_BASE + (0x01 << 2))
+#define P_DMC_SOFT_RST				MMC_REG_ADDR(DMC_SOFT_RST)
+#define DMC_SOFT_RST1				(S_DMC_REG_BASE + (0x02 << 2))
+#define P_DMC_SOFT_RST1				MMC_REG_ADDR(DMC_SOFT_RST1)
+#define DMC_RST_STS				(S_DMC_REG_BASE + (0x03 << 2))
+#define P_DMC_RST_STS				MMC_REG_ADDR(DMC_RST_STS)
+#define DMC_RST_STS1				(S_DMC_REG_BASE + (0x04 << 2))
+#define P_DMC_RST_STS1				MMC_REG_ADDR(DMC_RST_STS1)
+#define DMC_VERSION				(S_DMC_REG_BASE + (0x05 << 2))
+#define P_DMC_VERSION				MMC_REG_ADDR(DMC_VERSION)
+#define DMC_DDR_CTRL				(S_DMC_REG_BASE + (0x10 << 2))
+#define P_DMC_DDR_CTRL				MMC_REG_ADDR(DMC_DDR_CTRL)
+#define DMC_DDR_CTRL1				(S_DMC_REG_BASE + (0x11 << 2))
+#define P_DMC_DDR_CTRL1				MMC_REG_ADDR(DMC_DDR_CTRL1)
+#define DC_CAV_LUT_DATAL			(S_DMC_REG_BASE + (0x12 << 2))
+#define P_DC_CAV_LUT_DATAL			MMC_REG_ADDR(DC_CAV_LUT_DATAL)
+#define DC_CAV_LUT_DATAH			(S_DMC_REG_BASE + (0x13 << 2))
+#define P_DC_CAV_LUT_DATAH			MMC_REG_ADDR(DC_CAV_LUT_DATAH)
+#define DC_CAV_LUT_ADDR				(S_DMC_REG_BASE + (0x14 << 2))
+#define P_DC_CAV_LUT_ADDR			MMC_REG_ADDR(DC_CAV_LUT_ADDR)
+#define DC_CAV_LUT_RDATAL			(S_DMC_REG_BASE + (0x15 << 2))
+#define P_DC_CAV_LUT_RDATAL			MMC_REG_ADDR(DC_CAV_LUT_RDATAL)
+#define DC_CAV_LUT_RDATAH			(S_DMC_REG_BASE + (0x16 << 2))
+#define P_DC_CAV_LUT_RDATAH			MMC_REG_ADDR(DC_CAV_LUT_RDATAH)
+#define DMC_2ARB_CTRL				(S_DMC_REG_BASE + (0x20 << 2))
+#define P_DMC_2ARB_CTRL				MMC_REG_ADDR(DMC_2ARB_CTRL)
+#define DMC_REFR_CTRL1				(S_DMC_REG_BASE + (0x23 << 2))
+#define P_DMC_REFR_CTRL1			MMC_REG_ADDR(DMC_REFR_CTRL1)
+#define DMC_REFR_CTRL2				(S_DMC_REG_BASE + (0x24 << 2))
+#define P_DMC_REFR_CTRL2			MMC_REG_ADDR(DMC_REFR_CTRL2)
+#define DMC_PARB_CTRL				(S_DMC_REG_BASE + (0x25 << 2))
+#define P_DMC_PARB_CTRL				MMC_REG_ADDR(DMC_PARB_CTRL)
+#define DMC_MON_CTRL2				(S_DMC_REG_BASE + (0x26 << 2))
+#define P_DMC_MON_CTRL2				MMC_REG_ADDR(DMC_MON_CTRL2)
+#define DMC_MON_CTRL3				(S_DMC_REG_BASE + (0x27 << 2))
+#define P_DMC_MON_CTRL3				MMC_REG_ADDR(DMC_MON_CTRL3)
+#define DMC_MON_ALL_REQ_CNT			(S_DMC_REG_BASE + (0x28 << 2))
+#define P_DMC_MON_ALL_REQ_CNT			MMC_REG_ADDR(DMC_MON_ALL_REQ_CNT)
+#define DMC_MON_ALL_GRANT_CNT			(S_DMC_REG_BASE + (0x29 << 2))
+#define P_DMC_MON_ALL_GRANT_CNT			MMC_REG_ADDR(DMC_MON_ALL_GRANT_CNT)
+#define DMC_MON_ONE_GRANT_CNT			(S_DMC_REG_BASE + (0x2a << 2))
+#define P_DMC_MON_ONE_GRANT_CNT			MMC_REG_ADDR(DMC_MON_ONE_GRANT_CNT)
+#define DMC_CLKG_CTRL0				(S_DMC_REG_BASE + (0x30 << 2))
+#define P_DMC_CLKG_CTRL0			MMC_REG_ADDR(DMC_CLKG_CTRL0)
+#define DMC_CLKG_CTRL1				(S_DMC_REG_BASE + (0x31 << 2))
+#define P_DMC_CLKG_CTRL1			MMC_REG_ADDR(DMC_CLKG_CTRL1)
+#define DMC_CHAN_STS				(S_DMC_REG_BASE + (0x32 << 2))
+#define P_DMC_CHAN_STS				MMC_REG_ADDR(DMC_CHAN_STS)
+#define DMC_CMD_FILTER_CTRL1			(S_DMC_REG_BASE + (0x40 << 2))
+#define P_DMC_CMD_FILTER_CTRL1			MMC_REG_ADDR(DMC_CMD_FILTER_CTRL1)
+#define DMC_CMD_FILTER_CTRL2			(S_DMC_REG_BASE + (0x41 << 2))
+#define P_DMC_CMD_FILTER_CTRL2			MMC_REG_ADDR(DMC_CMD_FILTER_CTRL2)
+#define DMC_CMD_FILTER_CTRL3			(S_DMC_REG_BASE + (0x42 << 2))
+#define P_DMC_CMD_FILTER_CTRL3			MMC_REG_ADDR(DMC_CMD_FILTER_CTRL3)
+#define DMC_CMD_FILTER_CTRL4			(S_DMC_REG_BASE + (0x43 << 2))
+#define P_DMC_CMD_FILTER_CTRL4			MMC_REG_ADDR(DMC_CMD_FILTER_CTRL4)
+#define DMC_CMD_BUFFER_CTRL			(S_DMC_REG_BASE + (0x44 << 2))
+#define P_DMC_CMD_BUFFER_CTRL			MMC_REG_ADDR(DMC_CMD_BUFFER_CTRL)
+#define DMC_AM0_CHAN_CTRL			(S_DMC_REG_BASE + (0x60 << 2))
+#define P_DMC_AM0_CHAN_CTRL			MMC_REG_ADDR(DMC_AM0_CHAN_CTRL)
+#define DMC_AM0_HOLD_CTRL			(S_DMC_REG_BASE + (0x61 << 2))
+#define P_DMC_AM0_HOLD_CTRL			MMC_REG_ADDR(DMC_AM0_HOLD_CTRL)
+#define DMC_AM0_QOS_INC				(S_DMC_REG_BASE + (0x62 << 2))
+#define P_DMC_AM0_QOS_INC			MMC_REG_ADDR(DMC_AM0_QOS_INC)
+#define DMC_AM0_QOS_INCBK			(S_DMC_REG_BASE + (0x63 << 2))
+#define P_DMC_AM0_QOS_INCBK			MMC_REG_ADDR(DMC_AM0_QOS_INCBK)
+#define DMC_AM0_QOS_DEC				(S_DMC_REG_BASE + (0x64 << 2))
+#define P_DMC_AM0_QOS_DEC			MMC_REG_ADDR(DMC_AM0_QOS_DEC)
+#define DMC_AM0_QOS_DECBK			(S_DMC_REG_BASE + (0x65 << 2))
+#define P_DMC_AM0_QOS_DECBK			MMC_REG_ADDR(DMC_AM0_QOS_DECBK)
+#define DMC_AM0_QOS_DIS				(S_DMC_REG_BASE + (0x66 << 2))
+#define P_DMC_AM0_QOS_DIS			MMC_REG_ADDR(DMC_AM0_QOS_DIS)
+#define DMC_AM0_QOS_DISBK			(S_DMC_REG_BASE + (0x67 << 2))
+#define P_DMC_AM0_QOS_DISBK			MMC_REG_ADDR(DMC_AM0_QOS_DISBK)
+#define DMC_AM0_QOS_CTRL0			(S_DMC_REG_BASE + (0x68 << 2))
+#define P_DMC_AM0_QOS_CTRL0			MMC_REG_ADDR(DMC_AM0_QOS_CTRL0)
+#define DMC_AM0_QOS_CTRL1			(S_DMC_REG_BASE + (0x69 << 2))
+#define P_DMC_AM0_QOS_CTRL1			MMC_REG_ADDR(DMC_AM0_QOS_CTRL1)
+#define DMC_AM1_CHAN_CTRL			(S_DMC_REG_BASE + (0x6a << 2))
+#define P_DMC_AM1_CHAN_CTRL			MMC_REG_ADDR(DMC_AM1_CHAN_CTRL)
+#define DMC_AM1_HOLD_CTRL			(S_DMC_REG_BASE + (0x6b << 2))
+#define P_DMC_AM1_HOLD_CTRL			MMC_REG_ADDR(DMC_AM1_HOLD_CTRL)
+#define DMC_AM1_QOS_INC				(S_DMC_REG_BASE + (0x6c << 2))
+#define P_DMC_AM1_QOS_INC			MMC_REG_ADDR(DMC_AM1_QOS_INC)
+#define DMC_AM1_QOS_INCBK			(S_DMC_REG_BASE + (0x6d << 2))
+#define P_DMC_AM1_QOS_INCBK			MMC_REG_ADDR(DMC_AM1_QOS_INCBK)
+#define DMC_AM1_QOS_DEC				(S_DMC_REG_BASE + (0x6e << 2))
+#define P_DMC_AM1_QOS_DEC			MMC_REG_ADDR(DMC_AM1_QOS_DEC)
+#define DMC_AM1_QOS_DECBK			(S_DMC_REG_BASE + (0x6f << 2))
+#define P_DMC_AM1_QOS_DECBK			MMC_REG_ADDR(DMC_AM1_QOS_DECBK)
+#define DMC_AM1_QOS_DIS				(S_DMC_REG_BASE + (0x70 << 2))
+#define P_DMC_AM1_QOS_DIS			MMC_REG_ADDR(DMC_AM1_QOS_DIS)
+#define DMC_AM1_QOS_DISBK			(S_DMC_REG_BASE + (0x71 << 2))
+#define P_DMC_AM1_QOS_DISBK			MMC_REG_ADDR(DMC_AM1_QOS_DISBK)
+#define DMC_AM1_QOS_CTRL0			(S_DMC_REG_BASE + (0x72 << 2))
+#define P_DMC_AM1_QOS_CTRL0			MMC_REG_ADDR(DMC_AM1_QOS_CTRL0)
+#define DMC_AM1_QOS_CTRL1			(S_DMC_REG_BASE + (0x73 << 2))
+#define P_DMC_AM1_QOS_CTRL1			MMC_REG_ADDR(DMC_AM1_QOS_CTRL1)
+#define DMC_AM2_CHAN_CTRL			(S_DMC_REG_BASE + (0x74 << 2))
+#define P_DMC_AM2_CHAN_CTRL			MMC_REG_ADDR(DMC_AM2_CHAN_CTRL)
+#define DMC_AM2_HOLD_CTRL			(S_DMC_REG_BASE + (0x75 << 2))
+#define P_DMC_AM2_HOLD_CTRL			MMC_REG_ADDR(DMC_AM2_HOLD_CTRL)
+#define DMC_AM2_QOS_INC				(S_DMC_REG_BASE + (0x76 << 2))
+#define P_DMC_AM2_QOS_INC			MMC_REG_ADDR(DMC_AM2_QOS_INC)
+#define DMC_AM2_QOS_INCBK			(S_DMC_REG_BASE + (0x77 << 2))
+#define P_DMC_AM2_QOS_INCBK			MMC_REG_ADDR(DMC_AM2_QOS_INCBK)
+#define DMC_AM2_QOS_DEC				(S_DMC_REG_BASE + (0x78 << 2))
+#define P_DMC_AM2_QOS_DEC			MMC_REG_ADDR(DMC_AM2_QOS_DEC)
+#define DMC_AM2_QOS_DECBK			(S_DMC_REG_BASE + (0x79 << 2))
+#define P_DMC_AM2_QOS_DECBK			MMC_REG_ADDR(DMC_AM2_QOS_DECBK)
+#define DMC_AM2_QOS_DIS				(S_DMC_REG_BASE + (0x7a << 2))
+#define P_DMC_AM2_QOS_DIS			MMC_REG_ADDR(DMC_AM2_QOS_DIS)
+#define DMC_AM2_QOS_DISBK			(S_DMC_REG_BASE + (0x7b << 2))
+#define P_DMC_AM2_QOS_DISBK			MMC_REG_ADDR(DMC_AM2_QOS_DISBK)
+#define DMC_AM2_QOS_CTRL0			(S_DMC_REG_BASE + (0x7c << 2))
+#define P_DMC_AM2_QOS_CTRL0			MMC_REG_ADDR(DMC_AM2_QOS_CTRL0)
+#define DMC_AM2_QOS_CTRL1			(S_DMC_REG_BASE + (0x7d << 2))
+#define P_DMC_AM2_QOS_CTRL1			MMC_REG_ADDR(DMC_AM2_QOS_CTRL1)
+#define DMC_AM3_CHAN_CTRL			(S_DMC_REG_BASE + (0x7e << 2))
+#define P_DMC_AM3_CHAN_CTRL			MMC_REG_ADDR(DMC_AM3_CHAN_CTRL)
+#define DMC_AM3_HOLD_CTRL			(S_DMC_REG_BASE + (0x7f << 2))
+#define P_DMC_AM3_HOLD_CTRL			MMC_REG_ADDR(DMC_AM3_HOLD_CTRL)
+#define DMC_AM3_QOS_INC				(S_DMC_REG_BASE + (0x80 << 2))
+#define P_DMC_AM3_QOS_INC			MMC_REG_ADDR(DMC_AM3_QOS_INC)
+#define DMC_AM3_QOS_INCBK			(S_DMC_REG_BASE + (0x81 << 2))
+#define P_DMC_AM3_QOS_INCBK			MMC_REG_ADDR(DMC_AM3_QOS_INCBK)
+#define DMC_AM3_QOS_DEC				(S_DMC_REG_BASE + (0x82 << 2))
+#define P_DMC_AM3_QOS_DEC			MMC_REG_ADDR(DMC_AM3_QOS_DEC)
+#define DMC_AM3_QOS_DECBK			(S_DMC_REG_BASE + (0x83 << 2))
+#define P_DMC_AM3_QOS_DECBK			MMC_REG_ADDR(DMC_AM3_QOS_DECBK)
+#define DMC_AM3_QOS_DIS				(S_DMC_REG_BASE + (0x84 << 2))
+#define P_DMC_AM3_QOS_DIS			MMC_REG_ADDR(DMC_AM3_QOS_DIS)
+#define DMC_AM3_QOS_DISBK			(S_DMC_REG_BASE + (0x85 << 2))
+#define P_DMC_AM3_QOS_DISBK			MMC_REG_ADDR(DMC_AM3_QOS_DISBK)
+#define DMC_AM3_QOS_CTRL0			(S_DMC_REG_BASE + (0x86 << 2))
+#define P_DMC_AM3_QOS_CTRL0			MMC_REG_ADDR(DMC_AM3_QOS_CTRL0)
+#define DMC_AM3_QOS_CTRL1			(S_DMC_REG_BASE + (0x87 << 2))
+#define P_DMC_AM3_QOS_CTRL1			MMC_REG_ADDR(DMC_AM3_QOS_CTRL1)
+#define DMC_AM4_CHAN_CTRL			(S_DMC_REG_BASE + (0x88 << 2))
+#define P_DMC_AM4_CHAN_CTRL			MMC_REG_ADDR(DMC_AM4_CHAN_CTRL)
+#define DMC_AM4_HOLD_CTRL			(S_DMC_REG_BASE + (0x89 << 2))
+#define P_DMC_AM4_HOLD_CTRL			MMC_REG_ADDR(DMC_AM4_HOLD_CTRL)
+#define DMC_AM4_QOS_INC				(S_DMC_REG_BASE + (0x8a << 2))
+#define P_DMC_AM4_QOS_INC			MMC_REG_ADDR(DMC_AM4_QOS_INC)
+#define DMC_AM4_QOS_INCBK			(S_DMC_REG_BASE + (0x8b << 2))
+#define P_DMC_AM4_QOS_INCBK			MMC_REG_ADDR(DMC_AM4_QOS_INCBK)
+#define DMC_AM4_QOS_DEC				(S_DMC_REG_BASE + (0x8c << 2))
+#define P_DMC_AM4_QOS_DEC			MMC_REG_ADDR(DMC_AM4_QOS_DEC)
+#define DMC_AM4_QOS_DECBK			(S_DMC_REG_BASE + (0x8d << 2))
+#define P_DMC_AM4_QOS_DECBK			MMC_REG_ADDR(DMC_AM4_QOS_DECBK)
+#define DMC_AM4_QOS_DIS				(S_DMC_REG_BASE + (0x8e << 2))
+#define P_DMC_AM4_QOS_DIS			MMC_REG_ADDR(DMC_AM4_QOS_DIS)
+#define DMC_AM4_QOS_DISBK			(S_DMC_REG_BASE + (0x8f << 2))
+#define P_DMC_AM4_QOS_DISBK			MMC_REG_ADDR(DMC_AM4_QOS_DISBK)
+#define DMC_AM4_QOS_CTRL0			(S_DMC_REG_BASE + (0x90 << 2))
+#define P_DMC_AM4_QOS_CTRL0			MMC_REG_ADDR(DMC_AM4_QOS_CTRL0)
+#define DMC_AM4_QOS_CTRL1			(S_DMC_REG_BASE + (0x91 << 2))
+#define P_DMC_AM4_QOS_CTRL1			MMC_REG_ADDR(DMC_AM4_QOS_CTRL1)
+#define DMC_AM5_CHAN_CTRL			(S_DMC_REG_BASE + (0x92 << 2))
+#define P_DMC_AM5_CHAN_CTRL			MMC_REG_ADDR(DMC_AM5_CHAN_CTRL)
+#define DMC_AM5_HOLD_CTRL			(S_DMC_REG_BASE + (0x93 << 2))
+#define P_DMC_AM5_HOLD_CTRL			MMC_REG_ADDR(DMC_AM5_HOLD_CTRL)
+#define DMC_AM5_QOS_INC				(S_DMC_REG_BASE + (0x94 << 2))
+#define P_DMC_AM5_QOS_INC			MMC_REG_ADDR(DMC_AM5_QOS_INC)
+#define DMC_AM5_QOS_INCBK			(S_DMC_REG_BASE + (0x95 << 2))
+#define P_DMC_AM5_QOS_INCBK			MMC_REG_ADDR(DMC_AM5_QOS_INCBK)
+#define DMC_AM5_QOS_DEC				(S_DMC_REG_BASE + (0x96 << 2))
+#define P_DMC_AM5_QOS_DEC			MMC_REG_ADDR(DMC_AM5_QOS_DEC)
+#define DMC_AM5_QOS_DECBK			(S_DMC_REG_BASE + (0x97 << 2))
+#define P_DMC_AM5_QOS_DECBK			MMC_REG_ADDR(DMC_AM5_QOS_DECBK)
+#define DMC_AM5_QOS_DIS				(S_DMC_REG_BASE + (0x98 << 2))
+#define P_DMC_AM5_QOS_DIS			MMC_REG_ADDR(DMC_AM5_QOS_DIS)
+#define DMC_AM5_QOS_DISBK			(S_DMC_REG_BASE + (0x99 << 2))
+#define P_DMC_AM5_QOS_DISBK			MMC_REG_ADDR(DMC_AM5_QOS_DISBK)
+#define DMC_AM5_QOS_CTRL0			(S_DMC_REG_BASE + (0x9a << 2))
+#define P_DMC_AM5_QOS_CTRL0			MMC_REG_ADDR(DMC_AM5_QOS_CTRL0)
+#define DMC_AM5_QOS_CTRL1			(S_DMC_REG_BASE + (0x9b << 2))
+#define P_DMC_AM5_QOS_CTRL1			MMC_REG_ADDR(DMC_AM5_QOS_CTRL1)
+#define DMC_AM6_CHAN_CTRL			(S_DMC_REG_BASE + (0x9c << 2))
+#define P_DMC_AM6_CHAN_CTRL			MMC_REG_ADDR(DMC_AM6_CHAN_CTRL)
+#define DMC_AM6_HOLD_CTRL			(S_DMC_REG_BASE + (0x9d << 2))
+#define P_DMC_AM6_HOLD_CTRL			MMC_REG_ADDR(DMC_AM6_HOLD_CTRL)
+#define DMC_AM6_QOS_INC				(S_DMC_REG_BASE + (0x9e << 2))
+#define P_DMC_AM6_QOS_INC			MMC_REG_ADDR(DMC_AM6_QOS_INC)
+#define DMC_AM6_QOS_INCBK			(S_DMC_REG_BASE + (0x9f << 2))
+#define P_DMC_AM6_QOS_INCBK			MMC_REG_ADDR(DMC_AM6_QOS_INCBK)
+#define DMC_AM6_QOS_DEC				(S_DMC_REG_BASE + (0xa0 << 2))
+#define P_DMC_AM6_QOS_DEC			MMC_REG_ADDR(DMC_AM6_QOS_DEC)
+#define DMC_AM6_QOS_DECBK			(S_DMC_REG_BASE + (0xa1 << 2))
+#define P_DMC_AM6_QOS_DECBK			MMC_REG_ADDR(DMC_AM6_QOS_DECBK)
+#define DMC_AM6_QOS_DIS				(S_DMC_REG_BASE + (0xa2 << 2))
+#define P_DMC_AM6_QOS_DIS			MMC_REG_ADDR(DMC_AM6_QOS_DIS)
+#define DMC_AM6_QOS_DISBK			(S_DMC_REG_BASE + (0xa3 << 2))
+#define P_DMC_AM6_QOS_DISBK			MMC_REG_ADDR(DMC_AM6_QOS_DISBK)
+#define DMC_AM6_QOS_CTRL0			(S_DMC_REG_BASE + (0xa4 << 2))
+#define P_DMC_AM6_QOS_CTRL0			MMC_REG_ADDR(DMC_AM6_QOS_CTRL0)
+#define DMC_AM6_QOS_CTRL1			(S_DMC_REG_BASE + (0xa5 << 2))
+#define P_DMC_AM6_QOS_CTRL1			MMC_REG_ADDR(DMC_AM6_QOS_CTRL1)
+#define DMC_AM7_CHAN_CTRL			(S_DMC_REG_BASE + (0xa6 << 2))
+#define P_DMC_AM7_CHAN_CTRL			MMC_REG_ADDR(DMC_AM7_CHAN_CTRL)
+#define DMC_AM7_HOLD_CTRL			(S_DMC_REG_BASE + (0xa7 << 2))
+#define P_DMC_AM7_HOLD_CTRL			MMC_REG_ADDR(DMC_AM7_HOLD_CTRL)
+#define DMC_AM7_QOS_INC				(S_DMC_REG_BASE + (0xa8 << 2))
+#define P_DMC_AM7_QOS_INC			MMC_REG_ADDR(DMC_AM7_QOS_INC)
+#define DMC_AM7_QOS_INCBK			(S_DMC_REG_BASE + (0xa9 << 2))
+#define P_DMC_AM7_QOS_INCBK			MMC_REG_ADDR(DMC_AM7_QOS_INCBK)
+#define DMC_AM7_QOS_DEC				(S_DMC_REG_BASE + (0xaa << 2))
+#define P_DMC_AM7_QOS_DEC			MMC_REG_ADDR(DMC_AM7_QOS_DEC)
+#define DMC_AM7_QOS_DECBK			(S_DMC_REG_BASE + (0xab << 2))
+#define P_DMC_AM7_QOS_DECBK			MMC_REG_ADDR(DMC_AM7_QOS_DECBK)
+#define DMC_AM7_QOS_DIS				(S_DMC_REG_BASE + (0xac << 2))
+#define P_DMC_AM7_QOS_DIS			MMC_REG_ADDR(DMC_AM7_QOS_DIS)
+#define DMC_AM7_QOS_DISBK			(S_DMC_REG_BASE + (0xad << 2))
+#define P_DMC_AM7_QOS_DISBK			MMC_REG_ADDR(DMC_AM7_QOS_DISBK)
+#define DMC_AM7_QOS_CTRL0			(S_DMC_REG_BASE + (0xae << 2))
+#define P_DMC_AM7_QOS_CTRL0			MMC_REG_ADDR(DMC_AM7_QOS_CTRL0)
+#define DMC_AM7_QOS_CTRL1			(S_DMC_REG_BASE + (0xaf << 2))
+#define P_DMC_AM7_QOS_CTRL1			MMC_REG_ADDR(DMC_AM7_QOS_CTRL1)
+#define DMC_AXI0_CHAN_CTRL			(S_DMC_REG_BASE + (0xb0 << 2))
+#define P_DMC_AXI0_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI0_CHAN_CTRL)
+#define DMC_AXI0_HOLD_CTRL			(S_DMC_REG_BASE + (0xb1 << 2))
+#define P_DMC_AXI0_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI0_HOLD_CTRL)
+#define DMC_AXI0_QOS_INC			(S_DMC_REG_BASE + (0xb2 << 2))
+#define P_DMC_AXI0_QOS_INC			MMC_REG_ADDR(DMC_AXI0_QOS_INC)
+#define DMC_AXI0_QOS_INCBK			(S_DMC_REG_BASE + (0xb3 << 2))
+#define P_DMC_AXI0_QOS_INCBK			MMC_REG_ADDR(DMC_AXI0_QOS_INCBK)
+#define DMC_AXI0_QOS_DEC			(S_DMC_REG_BASE + (0xb4 << 2))
+#define P_DMC_AXI0_QOS_DEC			MMC_REG_ADDR(DMC_AXI0_QOS_DEC)
+#define DMC_AXI0_QOS_DECBK			(S_DMC_REG_BASE + (0xb5 << 2))
+#define P_DMC_AXI0_QOS_DECBK			MMC_REG_ADDR(DMC_AXI0_QOS_DECBK)
+#define DMC_AXI0_QOS_DIS			(S_DMC_REG_BASE + (0xb6 << 2))
+#define P_DMC_AXI0_QOS_DIS			MMC_REG_ADDR(DMC_AXI0_QOS_DIS)
+#define DMC_AXI0_QOS_DISBK			(S_DMC_REG_BASE + (0xb7 << 2))
+#define P_DMC_AXI0_QOS_DISBK			MMC_REG_ADDR(DMC_AXI0_QOS_DISBK)
+#define DMC_AXI0_QOS_CTRL0			(S_DMC_REG_BASE + (0xb8 << 2))
+#define P_DMC_AXI0_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI0_QOS_CTRL0)
+#define DMC_AXI0_QOS_CTRL1			(S_DMC_REG_BASE + (0xb9 << 2))
+#define P_DMC_AXI0_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI0_QOS_CTRL1)
+#define DMC_AXI1_CHAN_CTRL			(S_DMC_REG_BASE + (0xba << 2))
+#define P_DMC_AXI1_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI1_CHAN_CTRL)
+#define DMC_AXI1_HOLD_CTRL			(S_DMC_REG_BASE + (0xbb << 2))
+#define P_DMC_AXI1_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI1_HOLD_CTRL)
+#define DMC_AXI1_QOS_INC			(S_DMC_REG_BASE + (0xbc << 2))
+#define P_DMC_AXI1_QOS_INC			MMC_REG_ADDR(DMC_AXI1_QOS_INC)
+#define DMC_AXI1_QOS_INCBK			(S_DMC_REG_BASE + (0xbd << 2))
+#define P_DMC_AXI1_QOS_INCBK			MMC_REG_ADDR(DMC_AXI1_QOS_INCBK)
+#define DMC_AXI1_QOS_DEC			(S_DMC_REG_BASE + (0xbe << 2))
+#define P_DMC_AXI1_QOS_DEC			MMC_REG_ADDR(DMC_AXI1_QOS_DEC)
+#define DMC_AXI1_QOS_DECBK			(S_DMC_REG_BASE + (0xbf << 2))
+#define P_DMC_AXI1_QOS_DECBK			MMC_REG_ADDR(DMC_AXI1_QOS_DECBK)
+#define DMC_AXI1_QOS_DIS			(S_DMC_REG_BASE + (0xc0 << 2))
+#define P_DMC_AXI1_QOS_DIS			MMC_REG_ADDR(DMC_AXI1_QOS_DIS)
+#define DMC_AXI1_QOS_DISBK			(S_DMC_REG_BASE + (0xc1 << 2))
+#define P_DMC_AXI1_QOS_DISBK			MMC_REG_ADDR(DMC_AXI1_QOS_DISBK)
+#define DMC_AXI1_QOS_CTRL0			(S_DMC_REG_BASE + (0xc2 << 2))
+#define P_DMC_AXI1_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI1_QOS_CTRL0)
+#define DMC_AXI1_QOS_CTRL1			(S_DMC_REG_BASE + (0xc3 << 2))
+#define P_DMC_AXI1_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI1_QOS_CTRL1)
+#define DMC_AXI2_CHAN_CTRL			(S_DMC_REG_BASE + (0xc4 << 2))
+#define P_DMC_AXI2_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI2_CHAN_CTRL)
+#define DMC_AXI2_HOLD_CTRL			(S_DMC_REG_BASE + (0xc5 << 2))
+#define P_DMC_AXI2_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI2_HOLD_CTRL)
+#define DMC_AXI2_QOS_INC			(S_DMC_REG_BASE + (0xc6 << 2))
+#define P_DMC_AXI2_QOS_INC			MMC_REG_ADDR(DMC_AXI2_QOS_INC)
+#define DMC_AXI2_QOS_INCBK			(S_DMC_REG_BASE + (0xc7 << 2))
+#define P_DMC_AXI2_QOS_INCBK			MMC_REG_ADDR(DMC_AXI2_QOS_INCBK)
+#define DMC_AXI2_QOS_DEC			(S_DMC_REG_BASE + (0xc8 << 2))
+#define P_DMC_AXI2_QOS_DEC			MMC_REG_ADDR(DMC_AXI2_QOS_DEC)
+#define DMC_AXI2_QOS_DECBK			(S_DMC_REG_BASE + (0xc9 << 2))
+#define P_DMC_AXI2_QOS_DECBK			MMC_REG_ADDR(DMC_AXI2_QOS_DECBK)
+#define DMC_AXI2_QOS_DIS			(S_DMC_REG_BASE + (0xca << 2))
+#define P_DMC_AXI2_QOS_DIS			MMC_REG_ADDR(DMC_AXI2_QOS_DIS)
+#define DMC_AXI2_QOS_DISBK			(S_DMC_REG_BASE + (0xcb << 2))
+#define P_DMC_AXI2_QOS_DISBK			MMC_REG_ADDR(DMC_AXI2_QOS_DISBK)
+#define DMC_AXI2_QOS_CTRL0			(S_DMC_REG_BASE + (0xcc << 2))
+#define P_DMC_AXI2_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI2_QOS_CTRL0)
+#define DMC_AXI2_QOS_CTRL1			(S_DMC_REG_BASE + (0xcd << 2))
+#define P_DMC_AXI2_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI2_QOS_CTRL1)
+#define DMC_AXI3_CHAN_CTRL			(S_DMC_REG_BASE + (0xce << 2))
+#define P_DMC_AXI3_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI3_CHAN_CTRL)
+#define DMC_AXI3_HOLD_CTRL			(S_DMC_REG_BASE + (0xcf << 2))
+#define P_DMC_AXI3_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI3_HOLD_CTRL)
+#define DMC_AXI3_QOS_INC			(S_DMC_REG_BASE + (0xd0 << 2))
+#define P_DMC_AXI3_QOS_INC			MMC_REG_ADDR(DMC_AXI3_QOS_INC)
+#define DMC_AXI3_QOS_INCBK			(S_DMC_REG_BASE + (0xd1 << 2))
+#define P_DMC_AXI3_QOS_INCBK			MMC_REG_ADDR(DMC_AXI3_QOS_INCBK)
+#define DMC_AXI3_QOS_DEC			(S_DMC_REG_BASE + (0xd2 << 2))
+#define P_DMC_AXI3_QOS_DEC			MMC_REG_ADDR(DMC_AXI3_QOS_DEC)
+#define DMC_AXI3_QOS_DECBK			(S_DMC_REG_BASE + (0xd3 << 2))
+#define P_DMC_AXI3_QOS_DECBK			MMC_REG_ADDR(DMC_AXI3_QOS_DECBK)
+#define DMC_AXI3_QOS_DIS			(S_DMC_REG_BASE + (0xd4 << 2))
+#define P_DMC_AXI3_QOS_DIS			MMC_REG_ADDR(DMC_AXI3_QOS_DIS)
+#define DMC_AXI3_QOS_DISBK			(S_DMC_REG_BASE + (0xd5 << 2))
+#define P_DMC_AXI3_QOS_DISBK			MMC_REG_ADDR(DMC_AXI3_QOS_DISBK)
+#define DMC_AXI3_QOS_CTRL0			(S_DMC_REG_BASE + (0xd6 << 2))
+#define P_DMC_AXI3_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI3_QOS_CTRL0)
+#define DMC_AXI3_QOS_CTRL1			(S_DMC_REG_BASE + (0xd7 << 2))
+#define P_DMC_AXI3_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI3_QOS_CTRL1)
+#define DMC_AXI4_CHAN_CTRL			(S_DMC_REG_BASE + (0xd8 << 2))
+#define P_DMC_AXI4_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI4_CHAN_CTRL)
+#define DMC_AXI4_HOLD_CTRL			(S_DMC_REG_BASE + (0xd9 << 2))
+#define P_DMC_AXI4_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI4_HOLD_CTRL)
+#define DMC_AXI4_QOS_INC			(S_DMC_REG_BASE + (0xda << 2))
+#define P_DMC_AXI4_QOS_INC			MMC_REG_ADDR(DMC_AXI4_QOS_INC)
+#define DMC_AXI4_QOS_INCBK			(S_DMC_REG_BASE + (0xdb << 2))
+#define P_DMC_AXI4_QOS_INCBK			MMC_REG_ADDR(DMC_AXI4_QOS_INCBK)
+#define DMC_AXI4_QOS_DEC			(S_DMC_REG_BASE + (0xdc << 2))
+#define P_DMC_AXI4_QOS_DEC			MMC_REG_ADDR(DMC_AXI4_QOS_DEC)
+#define DMC_AXI4_QOS_DECBK			(S_DMC_REG_BASE + (0xdd << 2))
+#define P_DMC_AXI4_QOS_DECBK			MMC_REG_ADDR(DMC_AXI4_QOS_DECBK)
+#define DMC_AXI4_QOS_DIS			(S_DMC_REG_BASE + (0xde << 2))
+#define P_DMC_AXI4_QOS_DIS			MMC_REG_ADDR(DMC_AXI4_QOS_DIS)
+#define DMC_AXI4_QOS_DISBK			(S_DMC_REG_BASE + (0xdf << 2))
+#define P_DMC_AXI4_QOS_DISBK			MMC_REG_ADDR(DMC_AXI4_QOS_DISBK)
+#define DMC_AXI4_QOS_CTRL0			(S_DMC_REG_BASE + (0xe0 << 2))
+#define P_DMC_AXI4_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI4_QOS_CTRL0)
+#define DMC_AXI4_QOS_CTRL1			(S_DMC_REG_BASE + (0xe1 << 2))
+#define P_DMC_AXI4_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI4_QOS_CTRL1)
+#define DMC_AXI5_CHAN_CTRL			(S_DMC_REG_BASE + (0xe2 << 2))
+#define P_DMC_AXI5_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI5_CHAN_CTRL)
+#define DMC_AXI5_HOLD_CTRL			(S_DMC_REG_BASE + (0xe3 << 2))
+#define P_DMC_AXI5_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI5_HOLD_CTRL)
+#define DMC_AXI5_QOS_INC			(S_DMC_REG_BASE + (0xe4 << 2))
+#define P_DMC_AXI5_QOS_INC			MMC_REG_ADDR(DMC_AXI5_QOS_INC)
+#define DMC_AXI5_QOS_INCBK			(S_DMC_REG_BASE + (0xe5 << 2))
+#define P_DMC_AXI5_QOS_INCBK			MMC_REG_ADDR(DMC_AXI5_QOS_INCBK)
+#define DMC_AXI5_QOS_DEC			(S_DMC_REG_BASE + (0xe6 << 2))
+#define P_DMC_AXI5_QOS_DEC			MMC_REG_ADDR(DMC_AXI5_QOS_DEC)
+#define DMC_AXI5_QOS_DECBK			(S_DMC_REG_BASE + (0xe7 << 2))
+#define P_DMC_AXI5_QOS_DECBK			MMC_REG_ADDR(DMC_AXI5_QOS_DECBK)
+#define DMC_AXI5_QOS_DIS			(S_DMC_REG_BASE + (0xe8 << 2))
+#define P_DMC_AXI5_QOS_DIS			MMC_REG_ADDR(DMC_AXI5_QOS_DIS)
+#define DMC_AXI5_QOS_DISBK			(S_DMC_REG_BASE + (0xe9 << 2))
+#define P_DMC_AXI5_QOS_DISBK			MMC_REG_ADDR(DMC_AXI5_QOS_DISBK)
+#define DMC_AXI5_QOS_CTRL0			(S_DMC_REG_BASE + (0xea << 2))
+#define P_DMC_AXI5_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI5_QOS_CTRL0)
+#define DMC_AXI5_QOS_CTRL1			(S_DMC_REG_BASE + (0xeb << 2))
+#define P_DMC_AXI5_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI5_QOS_CTRL1)
+#define DMC_AXI6_CHAN_CTRL			(S_DMC_REG_BASE + (0xec << 2))
+#define P_DMC_AXI6_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI6_CHAN_CTRL)
+#define DMC_AXI6_HOLD_CTRL			(S_DMC_REG_BASE + (0xed << 2))
+#define P_DMC_AXI6_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI6_HOLD_CTRL)
+#define DMC_AXI6_QOS_INC			(S_DMC_REG_BASE + (0xee << 2))
+#define P_DMC_AXI6_QOS_INC			MMC_REG_ADDR(DMC_AXI6_QOS_INC)
+#define DMC_AXI6_QOS_INCBK			(S_DMC_REG_BASE + (0xef << 2))
+#define P_DMC_AXI6_QOS_INCBK			MMC_REG_ADDR(DMC_AXI6_QOS_INCBK)
+#define DMC_AXI6_QOS_DEC			(S_DMC_REG_BASE + (0xf0 << 2))
+#define P_DMC_AXI6_QOS_DEC			MMC_REG_ADDR(DMC_AXI6_QOS_DEC)
+#define DMC_AXI6_QOS_DECBK			(S_DMC_REG_BASE + (0xf1 << 2))
+#define P_DMC_AXI6_QOS_DECBK			MMC_REG_ADDR(DMC_AXI6_QOS_DECBK)
+#define DMC_AXI6_QOS_DIS			(S_DMC_REG_BASE + (0xf2 << 2))
+#define P_DMC_AXI6_QOS_DIS			MMC_REG_ADDR(DMC_AXI6_QOS_DIS)
+#define DMC_AXI6_QOS_DISBK			(S_DMC_REG_BASE + (0xf3 << 2))
+#define P_DMC_AXI6_QOS_DISBK			MMC_REG_ADDR(DMC_AXI6_QOS_DISBK)
+#define DMC_AXI6_QOS_CTRL0			(S_DMC_REG_BASE + (0xf4 << 2))
+#define P_DMC_AXI6_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI6_QOS_CTRL0)
+#define DMC_AXI6_QOS_CTRL1			(S_DMC_REG_BASE + (0xf5 << 2))
+#define P_DMC_AXI6_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI6_QOS_CTRL1)
+#define DMC_AXI7_CHAN_CTRL			(S_DMC_REG_BASE + (0xf6 << 2))
+#define P_DMC_AXI7_CHAN_CTRL			MMC_REG_ADDR(DMC_AXI7_CHAN_CTRL)
+#define DMC_AXI7_HOLD_CTRL			(S_DMC_REG_BASE + (0xf7 << 2))
+#define P_DMC_AXI7_HOLD_CTRL			MMC_REG_ADDR(DMC_AXI7_HOLD_CTRL)
+#define DMC_AXI7_QOS_INC			(S_DMC_REG_BASE + (0xf8 << 2))
+#define P_DMC_AXI7_QOS_INC			MMC_REG_ADDR(DMC_AXI7_QOS_INC)
+#define DMC_AXI7_QOS_INCBK			(S_DMC_REG_BASE + (0xf9 << 2))
+#define P_DMC_AXI7_QOS_INCBK			MMC_REG_ADDR(DMC_AXI7_QOS_INCBK)
+#define DMC_AXI7_QOS_DEC			(S_DMC_REG_BASE + (0xfa << 2))
+#define P_DMC_AXI7_QOS_DEC			MMC_REG_ADDR(DMC_AXI7_QOS_DEC)
+#define DMC_AXI7_QOS_DECBK			(S_DMC_REG_BASE + (0xfb << 2))
+#define P_DMC_AXI7_QOS_DECBK			MMC_REG_ADDR(DMC_AXI7_QOS_DECBK)
+#define DMC_AXI7_QOS_DIS			(S_DMC_REG_BASE + (0xfc << 2))
+#define P_DMC_AXI7_QOS_DIS			MMC_REG_ADDR(DMC_AXI7_QOS_DIS)
+#define DMC_AXI7_QOS_DISBK			(S_DMC_REG_BASE + (0xfd << 2))
+#define P_DMC_AXI7_QOS_DISBK			MMC_REG_ADDR(DMC_AXI7_QOS_DISBK)
+#define DMC_AXI7_QOS_CTRL0			(S_DMC_REG_BASE + (0xfe << 2))
+#define P_DMC_AXI7_QOS_CTRL0			MMC_REG_ADDR(DMC_AXI7_QOS_CTRL0)
+#define DMC_AXI7_QOS_CTRL1			(S_DMC_REG_BASE + (0xff << 2))
+#define P_DMC_AXI7_QOS_CTRL1			MMC_REG_ADDR(DMC_AXI7_QOS_CTRL1)
+
+
+/*
+ * ucode/c_stb_define.h
+ */
+#define STB_VERSION				0x1600
+#define P_STB_VERSION				CBUS_REG_ADDR(STB_VERSION)
+#define STB_VERSION_2				0x1650
+#define P_STB_VERSION_2				CBUS_REG_ADDR(STB_VERSION_2)
+#define STB_VERSION_3				0x16a0
+#define P_STB_VERSION_3				CBUS_REG_ADDR(STB_VERSION_3)
+#define STB_TEST_REG				0x1601
+#define P_STB_TEST_REG				CBUS_REG_ADDR(STB_TEST_REG)
+#define STB_TEST_REG_2				0x1651
+#define P_STB_TEST_REG_2			CBUS_REG_ADDR(STB_TEST_REG_2)
+#define STB_TEST_REG_3				0x16a1
+#define P_STB_TEST_REG_3			CBUS_REG_ADDR(STB_TEST_REG_3)
+#define FEC_INPUT_CONTROL			0x1602
+#define P_FEC_INPUT_CONTROL			CBUS_REG_ADDR(FEC_INPUT_CONTROL)
+#define FEC_INPUT_CONTROL_2			0x1652
+#define P_FEC_INPUT_CONTROL_2			CBUS_REG_ADDR(FEC_INPUT_CONTROL_2)
+#define FEC_INPUT_CONTROL_3			0x16a2
+#define P_FEC_INPUT_CONTROL_3			CBUS_REG_ADDR(FEC_INPUT_CONTROL_3)
+#define FEC_INPUT_DATA				0x1603
+#define P_FEC_INPUT_DATA			CBUS_REG_ADDR(FEC_INPUT_DATA)
+#define FEC_INPUT_DATA_2			0x1653
+#define P_FEC_INPUT_DATA_2			CBUS_REG_ADDR(FEC_INPUT_DATA_2)
+#define FEC_INPUT_DATA_3			0x16a3
+#define P_FEC_INPUT_DATA_3			CBUS_REG_ADDR(FEC_INPUT_DATA_3)
+#define DEMUX_CONTROL				0x1604
+#define P_DEMUX_CONTROL				CBUS_REG_ADDR(DEMUX_CONTROL)
+#define DEMUX_CONTROL_2				0x1654
+#define P_DEMUX_CONTROL_2			CBUS_REG_ADDR(DEMUX_CONTROL_2)
+#define DEMUX_CONTROL_3				0x16a4
+#define P_DEMUX_CONTROL_3			CBUS_REG_ADDR(DEMUX_CONTROL_3)
+#define FEC_SYNC_BYTE				0x1605
+#define P_FEC_SYNC_BYTE				CBUS_REG_ADDR(FEC_SYNC_BYTE)
+#define FEC_SYNC_BYTE_2				0x1655
+#define P_FEC_SYNC_BYTE_2			CBUS_REG_ADDR(FEC_SYNC_BYTE_2)
+#define FEC_SYNC_BYTE_3				0x16a5
+#define P_FEC_SYNC_BYTE_3			CBUS_REG_ADDR(FEC_SYNC_BYTE_3)
+#define FM_WR_DATA				0x1606
+#define P_FM_WR_DATA				CBUS_REG_ADDR(FM_WR_DATA)
+#define FM_WR_DATA_2				0x1656
+#define P_FM_WR_DATA_2				CBUS_REG_ADDR(FM_WR_DATA_2)
+#define FM_WR_DATA_3				0x16a6
+#define P_FM_WR_DATA_3				CBUS_REG_ADDR(FM_WR_DATA_3)
+#define FM_WR_ADDR				0x1607
+#define P_FM_WR_ADDR				CBUS_REG_ADDR(FM_WR_ADDR)
+#define FM_WR_ADDR_2				0x1657
+#define P_FM_WR_ADDR_2				CBUS_REG_ADDR(FM_WR_ADDR_2)
+#define FM_WR_ADDR_3				0x16a7
+#define P_FM_WR_ADDR_3				CBUS_REG_ADDR(FM_WR_ADDR_3)
+#define MAX_FM_COMP_ADDR			0x1608
+#define P_MAX_FM_COMP_ADDR			CBUS_REG_ADDR(MAX_FM_COMP_ADDR)
+#define MAX_FM_COMP_ADDR_2			0x1658
+#define P_MAX_FM_COMP_ADDR_2			CBUS_REG_ADDR(MAX_FM_COMP_ADDR_2)
+#define MAX_FM_COMP_ADDR_3			0x16a8
+#define P_MAX_FM_COMP_ADDR_3			CBUS_REG_ADDR(MAX_FM_COMP_ADDR_3)
+#define TS_HEAD_0				0x1609
+#define P_TS_HEAD_0				CBUS_REG_ADDR(TS_HEAD_0)
+#define TS_HEAD_0_2				0x1659
+#define P_TS_HEAD_0_2				CBUS_REG_ADDR(TS_HEAD_0_2)
+#define TS_HEAD_0_3				0x16a9
+#define P_TS_HEAD_0_3				CBUS_REG_ADDR(TS_HEAD_0_3)
+#define TS_HEAD_1				0x160a
+#define P_TS_HEAD_1				CBUS_REG_ADDR(TS_HEAD_1)
+#define TS_HEAD_1_2				0x165a
+#define P_TS_HEAD_1_2				CBUS_REG_ADDR(TS_HEAD_1_2)
+#define TS_HEAD_1_3				0x16aa
+#define P_TS_HEAD_1_3				CBUS_REG_ADDR(TS_HEAD_1_3)
+#define OM_CMD_STATUS				0x160b
+#define P_OM_CMD_STATUS				CBUS_REG_ADDR(OM_CMD_STATUS)
+#define OM_CMD_STATUS_2				0x165b
+#define P_OM_CMD_STATUS_2			CBUS_REG_ADDR(OM_CMD_STATUS_2)
+#define OM_CMD_STATUS_3				0x16ab
+#define P_OM_CMD_STATUS_3			CBUS_REG_ADDR(OM_CMD_STATUS_3)
+#define OM_CMD_DATA				0x160c
+#define P_OM_CMD_DATA				CBUS_REG_ADDR(OM_CMD_DATA)
+#define OM_CMD_DATA_2				0x165c
+#define P_OM_CMD_DATA_2				CBUS_REG_ADDR(OM_CMD_DATA_2)
+#define OM_CMD_DATA_3				0x16ac
+#define P_OM_CMD_DATA_3				CBUS_REG_ADDR(OM_CMD_DATA_3)
+#define OM_CMD_DATA2				0x160d
+#define P_OM_CMD_DATA2				CBUS_REG_ADDR(OM_CMD_DATA2)
+#define OM_CMD_DATA2_2				0x165d
+#define P_OM_CMD_DATA2_2			CBUS_REG_ADDR(OM_CMD_DATA2_2)
+#define OM_CMD_DATA2_3				0x16ad
+#define P_OM_CMD_DATA2_3			CBUS_REG_ADDR(OM_CMD_DATA2_3)
+#define SEC_BUFF_01_START			0x160e
+#define P_SEC_BUFF_01_START			CBUS_REG_ADDR(SEC_BUFF_01_START)
+#define SEC_BUFF_01_START_2			0x165e
+#define P_SEC_BUFF_01_START_2			CBUS_REG_ADDR(SEC_BUFF_01_START_2)
+#define SEC_BUFF_01_START_3			0x16ae
+#define P_SEC_BUFF_01_START_3			CBUS_REG_ADDR(SEC_BUFF_01_START_3)
+#define SEC_BUFF_23_START			0x160f
+#define P_SEC_BUFF_23_START			CBUS_REG_ADDR(SEC_BUFF_23_START)
+#define SEC_BUFF_23_START_2			0x165f
+#define P_SEC_BUFF_23_START_2			CBUS_REG_ADDR(SEC_BUFF_23_START_2)
+#define SEC_BUFF_23_START_3			0x16af
+#define P_SEC_BUFF_23_START_3			CBUS_REG_ADDR(SEC_BUFF_23_START_3)
+#define SEC_BUFF_SIZE				0x1610
+#define P_SEC_BUFF_SIZE				CBUS_REG_ADDR(SEC_BUFF_SIZE)
+#define SEC_BUFF_SIZE_2				0x1660
+#define P_SEC_BUFF_SIZE_2			CBUS_REG_ADDR(SEC_BUFF_SIZE_2)
+#define SEC_BUFF_SIZE_3				0x16b0
+#define P_SEC_BUFF_SIZE_3			CBUS_REG_ADDR(SEC_BUFF_SIZE_3)
+#define SEC_BUFF_BUSY				0x1611
+#define P_SEC_BUFF_BUSY				CBUS_REG_ADDR(SEC_BUFF_BUSY)
+#define SEC_BUFF_BUSY_2				0x1661
+#define P_SEC_BUFF_BUSY_2			CBUS_REG_ADDR(SEC_BUFF_BUSY_2)
+#define SEC_BUFF_BUSY_3				0x16b1
+#define P_SEC_BUFF_BUSY_3			CBUS_REG_ADDR(SEC_BUFF_BUSY_3)
+#define SEC_BUFF_READY				0x1612
+#define P_SEC_BUFF_READY			CBUS_REG_ADDR(SEC_BUFF_READY)
+#define SEC_BUFF_READY_2			0x1662
+#define P_SEC_BUFF_READY_2			CBUS_REG_ADDR(SEC_BUFF_READY_2)
+#define SEC_BUFF_READY_3			0x16b2
+#define P_SEC_BUFF_READY_3			CBUS_REG_ADDR(SEC_BUFF_READY_3)
+#define SEC_BUFF_NUMBER				0x1613
+#define P_SEC_BUFF_NUMBER			CBUS_REG_ADDR(SEC_BUFF_NUMBER)
+#define SEC_BUFF_NUMBER_2			0x1663
+#define P_SEC_BUFF_NUMBER_2			CBUS_REG_ADDR(SEC_BUFF_NUMBER_2)
+#define SEC_BUFF_NUMBER_3			0x16b3
+#define P_SEC_BUFF_NUMBER_3			CBUS_REG_ADDR(SEC_BUFF_NUMBER_3)
+#define ASSIGN_PID_NUMBER			0x1614
+#define P_ASSIGN_PID_NUMBER			CBUS_REG_ADDR(ASSIGN_PID_NUMBER)
+#define ASSIGN_PID_NUMBER_2			0x1664
+#define P_ASSIGN_PID_NUMBER_2			CBUS_REG_ADDR(ASSIGN_PID_NUMBER_2)
+#define ASSIGN_PID_NUMBER_3			0x16b4
+#define P_ASSIGN_PID_NUMBER_3			CBUS_REG_ADDR(ASSIGN_PID_NUMBER_3)
+#define VIDEO_STREAM_ID				0x1615
+#define P_VIDEO_STREAM_ID			CBUS_REG_ADDR(VIDEO_STREAM_ID)
+#define VIDEO_STREAM_ID_2			0x1665
+#define P_VIDEO_STREAM_ID_2			CBUS_REG_ADDR(VIDEO_STREAM_ID_2)
+#define VIDEO_STREAM_ID_3			0x16b5
+#define P_VIDEO_STREAM_ID_3			CBUS_REG_ADDR(VIDEO_STREAM_ID_3)
+#define AUDIO_STREAM_ID				0x1616
+#define P_AUDIO_STREAM_ID			CBUS_REG_ADDR(AUDIO_STREAM_ID)
+#define AUDIO_STREAM_ID_2			0x1666
+#define P_AUDIO_STREAM_ID_2			CBUS_REG_ADDR(AUDIO_STREAM_ID_2)
+#define AUDIO_STREAM_ID_3			0x16b6
+#define P_AUDIO_STREAM_ID_3			CBUS_REG_ADDR(AUDIO_STREAM_ID_3)
+#define SUB_STREAM_ID				0x1617
+#define P_SUB_STREAM_ID				CBUS_REG_ADDR(SUB_STREAM_ID)
+#define SUB_STREAM_ID_2				0x1667
+#define P_SUB_STREAM_ID_2			CBUS_REG_ADDR(SUB_STREAM_ID_2)
+#define SUB_STREAM_ID_3				0x16b7
+#define P_SUB_STREAM_ID_3			CBUS_REG_ADDR(SUB_STREAM_ID_3)
+#define OTHER_STREAM_ID				0x1618
+#define P_OTHER_STREAM_ID			CBUS_REG_ADDR(OTHER_STREAM_ID)
+#define OTHER_STREAM_ID_2			0x1668
+#define P_OTHER_STREAM_ID_2			CBUS_REG_ADDR(OTHER_STREAM_ID_2)
+#define OTHER_STREAM_ID_3			0x16b8
+#define P_OTHER_STREAM_ID_3			CBUS_REG_ADDR(OTHER_STREAM_ID_3)
+#define PCR90K_CTL				0x1619
+#define P_PCR90K_CTL				CBUS_REG_ADDR(PCR90K_CTL)
+#define PCR90K_CTL_2				0x1669
+#define P_PCR90K_CTL_2				CBUS_REG_ADDR(PCR90K_CTL_2)
+#define PCR90K_CTL_3				0x16b9
+#define P_PCR90K_CTL_3				CBUS_REG_ADDR(PCR90K_CTL_3)
+#define PCR_DEMUX				0x161a
+#define P_PCR_DEMUX				CBUS_REG_ADDR(PCR_DEMUX)
+#define PCR_DEMUX_2				0x166a
+#define P_PCR_DEMUX_2				CBUS_REG_ADDR(PCR_DEMUX_2)
+#define PCR_DEMUX_3				0x16ba
+#define P_PCR_DEMUX_3				CBUS_REG_ADDR(PCR_DEMUX_3)
+#define VIDEO_PTS_DEMUX				0x161b
+#define P_VIDEO_PTS_DEMUX			CBUS_REG_ADDR(VIDEO_PTS_DEMUX)
+#define VIDEO_PTS_DEMUX_2			0x166b
+#define P_VIDEO_PTS_DEMUX_2			CBUS_REG_ADDR(VIDEO_PTS_DEMUX_2)
+#define VIDEO_PTS_DEMUX_3			0x16bb
+#define P_VIDEO_PTS_DEMUX_3			CBUS_REG_ADDR(VIDEO_PTS_DEMUX_3)
+#define VIDEO_DTS_DEMUX				0x161c
+#define P_VIDEO_DTS_DEMUX			CBUS_REG_ADDR(VIDEO_DTS_DEMUX)
+#define VIDEO_DTS_DEMUX_2			0x166c
+#define P_VIDEO_DTS_DEMUX_2			CBUS_REG_ADDR(VIDEO_DTS_DEMUX_2)
+#define VIDEO_DTS_DEMUX_3			0x16bc
+#define P_VIDEO_DTS_DEMUX_3			CBUS_REG_ADDR(VIDEO_DTS_DEMUX_3)
+#define AUDIO_PTS_DEMUX				0x161d
+#define P_AUDIO_PTS_DEMUX			CBUS_REG_ADDR(AUDIO_PTS_DEMUX)
+#define AUDIO_PTS_DEMUX_2			0x166d
+#define P_AUDIO_PTS_DEMUX_2			CBUS_REG_ADDR(AUDIO_PTS_DEMUX_2)
+#define AUDIO_PTS_DEMUX_3			0x16bd
+#define P_AUDIO_PTS_DEMUX_3			CBUS_REG_ADDR(AUDIO_PTS_DEMUX_3)
+#define SUB_PTS_DEMUX				0x161e
+#define P_SUB_PTS_DEMUX				CBUS_REG_ADDR(SUB_PTS_DEMUX)
+#define SUB_PTS_DEMUX_2				0x166e
+#define P_SUB_PTS_DEMUX_2			CBUS_REG_ADDR(SUB_PTS_DEMUX_2)
+#define SUB_PTS_DEMUX_3				0x16be
+#define P_SUB_PTS_DEMUX_3			CBUS_REG_ADDR(SUB_PTS_DEMUX_3)
+#define STB_PTS_DTS_STATUS			0x161f
+#define P_STB_PTS_DTS_STATUS			CBUS_REG_ADDR(STB_PTS_DTS_STATUS)
+#define STB_PTS_DTS_STATUS_2			0x166f
+#define P_STB_PTS_DTS_STATUS_2			CBUS_REG_ADDR(STB_PTS_DTS_STATUS_2)
+#define STB_PTS_DTS_STATUS_3			0x16bf
+#define P_STB_PTS_DTS_STATUS_3			CBUS_REG_ADDR(STB_PTS_DTS_STATUS_3)
+#define STB_DEBUG_INDEX				0x1620
+#define P_STB_DEBUG_INDEX			CBUS_REG_ADDR(STB_DEBUG_INDEX)
+#define STB_DEBUG_INDEX_2			0x1670
+#define P_STB_DEBUG_INDEX_2			CBUS_REG_ADDR(STB_DEBUG_INDEX_2)
+#define STB_DEBUG_INDEX_3			0x16c0
+#define P_STB_DEBUG_INDEX_3			CBUS_REG_ADDR(STB_DEBUG_INDEX_3)
+#define STB_DEBUG_DATAUT_O			0x1621
+#define P_STB_DEBUG_DATAUT_O			CBUS_REG_ADDR(STB_DEBUG_DATAUT_O)
+#define STB_DEBUG_DATAUT_O_2			0x1671
+#define P_STB_DEBUG_DATAUT_O_2			CBUS_REG_ADDR(STB_DEBUG_DATAUT_O_2)
+#define STB_DEBUG_DATAUT_O_3			0x16c1
+#define P_STB_DEBUG_DATAUT_O_3			CBUS_REG_ADDR(STB_DEBUG_DATAUT_O_3)
+#define STBM_CTL_O				0x1622
+#define P_STBM_CTL_O				CBUS_REG_ADDR(STBM_CTL_O)
+#define STBM_CTL_O_2				0x1672
+#define P_STBM_CTL_O_2				CBUS_REG_ADDR(STBM_CTL_O_2)
+#define STBM_CTL_O_3				0x16c2
+#define P_STBM_CTL_O_3				CBUS_REG_ADDR(STBM_CTL_O_3)
+#define STB_INT_STATUS				0x1623
+#define P_STB_INT_STATUS			CBUS_REG_ADDR(STB_INT_STATUS)
+#define STB_INT_STATUS_2			0x1673
+#define P_STB_INT_STATUS_2			CBUS_REG_ADDR(STB_INT_STATUS_2)
+#define STB_INT_STATUS_3			0x16c3
+#define P_STB_INT_STATUS_3			CBUS_REG_ADDR(STB_INT_STATUS_3)
+#define DEMUX_ENDIAN				0x1624
+#define P_DEMUX_ENDIAN				CBUS_REG_ADDR(DEMUX_ENDIAN)
+#define DEMUX_ENDIAN_2				0x1674
+#define P_DEMUX_ENDIAN_2			CBUS_REG_ADDR(DEMUX_ENDIAN_2)
+#define DEMUX_ENDIAN_3				0x16c4
+#define P_DEMUX_ENDIAN_3			CBUS_REG_ADDR(DEMUX_ENDIAN_3)
+#define TS_HIU_CTL				0x1625
+#define P_TS_HIU_CTL				CBUS_REG_ADDR(TS_HIU_CTL)
+#define TS_HIU_CTL_2				0x1675
+#define P_TS_HIU_CTL_2				CBUS_REG_ADDR(TS_HIU_CTL_2)
+#define TS_HIU_CTL_3				0x16c5
+#define P_TS_HIU_CTL_3				CBUS_REG_ADDR(TS_HIU_CTL_3)
+#define SEC_BUFF_BASE				0x1626
+#define P_SEC_BUFF_BASE				CBUS_REG_ADDR(SEC_BUFF_BASE)
+#define SEC_BUFF_BASE_2				0x1676
+#define P_SEC_BUFF_BASE_2			CBUS_REG_ADDR(SEC_BUFF_BASE_2)
+#define SEC_BUFF_BASE_3				0x16c6
+#define P_SEC_BUFF_BASE_3			CBUS_REG_ADDR(SEC_BUFF_BASE_3)
+#define DEMUX_MEM_REQ_EN			0x1627
+#define P_DEMUX_MEM_REQ_EN			CBUS_REG_ADDR(DEMUX_MEM_REQ_EN)
+#define DEMUX_MEM_REQ_EN_2			0x1677
+#define P_DEMUX_MEM_REQ_EN_2			CBUS_REG_ADDR(DEMUX_MEM_REQ_EN_2)
+#define DEMUX_MEM_REQ_EN_3			0x16c7
+#define P_DEMUX_MEM_REQ_EN_3			CBUS_REG_ADDR(DEMUX_MEM_REQ_EN_3)
+#define VIDEO_PDTS_WR_PTR			0x1628
+#define P_VIDEO_PDTS_WR_PTR			CBUS_REG_ADDR(VIDEO_PDTS_WR_PTR)
+#define VIDEO_PDTS_WR_PTR_2			0x1678
+#define P_VIDEO_PDTS_WR_PTR_2			CBUS_REG_ADDR(VIDEO_PDTS_WR_PTR_2)
+#define VIDEO_PDTS_WR_PTR_3			0x16c8
+#define P_VIDEO_PDTS_WR_PTR_3			CBUS_REG_ADDR(VIDEO_PDTS_WR_PTR_3)
+#define AUDIO_PDTS_WR_PTR			0x1629
+#define P_AUDIO_PDTS_WR_PTR			CBUS_REG_ADDR(AUDIO_PDTS_WR_PTR)
+#define AUDIO_PDTS_WR_PTR_2			0x1679
+#define P_AUDIO_PDTS_WR_PTR_2			CBUS_REG_ADDR(AUDIO_PDTS_WR_PTR_2)
+#define AUDIO_PDTS_WR_PTR_3			0x16c9
+#define P_AUDIO_PDTS_WR_PTR_3			CBUS_REG_ADDR(AUDIO_PDTS_WR_PTR_3)
+#define SUB_WR_PTR				0x162a
+#define P_SUB_WR_PTR				CBUS_REG_ADDR(SUB_WR_PTR)
+#define SUB_WR_PTR_2				0x167a
+#define P_SUB_WR_PTR_2				CBUS_REG_ADDR(SUB_WR_PTR_2)
+#define SUB_WR_PTR_3				0x16ca
+#define P_SUB_WR_PTR_3				CBUS_REG_ADDR(SUB_WR_PTR_3)
+#define SB_START				0x162b
+#define P_SB_START				CBUS_REG_ADDR(SB_START)
+#define SB_START_2				0x167b
+#define P_SB_START_2				CBUS_REG_ADDR(SB_START_2)
+#define SB_START_3				0x16cb
+#define P_SB_START_3				CBUS_REG_ADDR(SB_START_3)
+#define SB_LAST_ADDR				0x162c
+#define P_SB_LAST_ADDR				CBUS_REG_ADDR(SB_LAST_ADDR)
+#define SB_LAST_ADDR_2				0x167c
+#define P_SB_LAST_ADDR_2			CBUS_REG_ADDR(SB_LAST_ADDR_2)
+#define SB_LAST_ADDR_3				0x16cc
+#define P_SB_LAST_ADDR_3			CBUS_REG_ADDR(SB_LAST_ADDR_3)
+#define SB_PES_WR_PTR				0x162d
+#define P_SB_PES_WR_PTR				CBUS_REG_ADDR(SB_PES_WR_PTR)
+#define SB_PES_WR_PTR_2				0x167d
+#define P_SB_PES_WR_PTR_2			CBUS_REG_ADDR(SB_PES_WR_PTR_2)
+#define SB_PES_WR_PTR_3				0x16cd
+#define P_SB_PES_WR_PTR_3			CBUS_REG_ADDR(SB_PES_WR_PTR_3)
+#define OTHER_WR_PTR				0x162e
+#define P_OTHER_WR_PTR				CBUS_REG_ADDR(OTHER_WR_PTR)
+#define OTHER_WR_PTR_2				0x167e
+#define P_OTHER_WR_PTR_2			CBUS_REG_ADDR(OTHER_WR_PTR_2)
+#define OTHER_WR_PTR_3				0x16ce
+#define P_OTHER_WR_PTR_3			CBUS_REG_ADDR(OTHER_WR_PTR_3)
+#define OB_START				0x162f
+#define P_OB_START				CBUS_REG_ADDR(OB_START)
+#define OB_START_2				0x167f
+#define P_OB_START_2				CBUS_REG_ADDR(OB_START_2)
+#define OB_START_3				0x16cf
+#define P_OB_START_3				CBUS_REG_ADDR(OB_START_3)
+#define OB_LAST_ADDR				0x1630
+#define P_OB_LAST_ADDR				CBUS_REG_ADDR(OB_LAST_ADDR)
+#define OB_LAST_ADDR_2				0x1680
+#define P_OB_LAST_ADDR_2			CBUS_REG_ADDR(OB_LAST_ADDR_2)
+#define OB_LAST_ADDR_3				0x16d0
+#define P_OB_LAST_ADDR_3			CBUS_REG_ADDR(OB_LAST_ADDR_3)
+#define OB_PES_WR_PTR				0x1631
+#define P_OB_PES_WR_PTR				CBUS_REG_ADDR(OB_PES_WR_PTR)
+#define OB_PES_WR_PTR_2				0x1681
+#define P_OB_PES_WR_PTR_2			CBUS_REG_ADDR(OB_PES_WR_PTR_2)
+#define OB_PES_WR_PTR_3				0x16d1
+#define P_OB_PES_WR_PTR_3			CBUS_REG_ADDR(OB_PES_WR_PTR_3)
+#define STB_INT_MASK				0x1632
+#define P_STB_INT_MASK				CBUS_REG_ADDR(STB_INT_MASK)
+#define STB_INT_MASK_2				0x1682
+#define P_STB_INT_MASK_2			CBUS_REG_ADDR(STB_INT_MASK_2)
+#define STB_INT_MASK_3				0x16d2
+#define P_STB_INT_MASK_3			CBUS_REG_ADDR(STB_INT_MASK_3)
+#define VIDEO_SPLICING_CTL			0x1633
+#define P_VIDEO_SPLICING_CTL			CBUS_REG_ADDR(VIDEO_SPLICING_CTL)
+#define VIDEO_SPLICING_CTL_2			0x1683
+#define P_VIDEO_SPLICING_CTL_2			CBUS_REG_ADDR(VIDEO_SPLICING_CTL_2)
+#define VIDEO_SPLICING_CTL_3			0x16d3
+#define P_VIDEO_SPLICING_CTL_3			CBUS_REG_ADDR(VIDEO_SPLICING_CTL_3)
+#define AUDIO_SPLICING_CTL			0x1634
+#define P_AUDIO_SPLICING_CTL			CBUS_REG_ADDR(AUDIO_SPLICING_CTL)
+#define AUDIO_SPLICING_CTL_2			0x1684
+#define P_AUDIO_SPLICING_CTL_2			CBUS_REG_ADDR(AUDIO_SPLICING_CTL_2)
+#define AUDIO_SPLICING_CTL_3			0x16d4
+#define P_AUDIO_SPLICING_CTL_3			CBUS_REG_ADDR(AUDIO_SPLICING_CTL_3)
+#define TS_PACKAGE_BYTE_COUNT			0x1635
+#define P_TS_PACKAGE_BYTE_COUNT			CBUS_REG_ADDR(TS_PACKAGE_BYTE_COUNT)
+#define TS_PACKAGE_BYTE_COUNT_2			0x1685
+#define P_TS_PACKAGE_BYTE_COUNT_2		CBUS_REG_ADDR(TS_PACKAGE_BYTE_COUNT_2)
+#define TS_PACKAGE_BYTE_COUNT_3			0x16d5
+#define P_TS_PACKAGE_BYTE_COUNT_3		CBUS_REG_ADDR(TS_PACKAGE_BYTE_COUNT_3)
+#define PES_STRONG_SYNC				0x1636
+#define P_PES_STRONG_SYNC			CBUS_REG_ADDR(PES_STRONG_SYNC)
+#define PES_STRONG_SYNC_2			0x1686
+#define P_PES_STRONG_SYNC_2			CBUS_REG_ADDR(PES_STRONG_SYNC_2)
+#define PES_STRONG_SYNC_3			0x16d6
+#define P_PES_STRONG_SYNC_3			CBUS_REG_ADDR(PES_STRONG_SYNC_3)
+#define OM_DATA_RD_ADDR				0x1637
+#define P_OM_DATA_RD_ADDR			CBUS_REG_ADDR(OM_DATA_RD_ADDR)
+#define OM_DATA_RD_ADDR_2			0x1687
+#define P_OM_DATA_RD_ADDR_2			CBUS_REG_ADDR(OM_DATA_RD_ADDR_2)
+#define OM_DATA_RD_ADDR_3			0x16d7
+#define P_OM_DATA_RD_ADDR_3			CBUS_REG_ADDR(OM_DATA_RD_ADDR_3)
+#define OM_DATA_RD				0x1638
+#define P_OM_DATA_RD				CBUS_REG_ADDR(OM_DATA_RD)
+#define OM_DATA_RD_2				0x1688
+#define P_OM_DATA_RD_2				CBUS_REG_ADDR(OM_DATA_RD_2)
+#define OM_DATA_RD_3				0x16d8
+#define P_OM_DATA_RD_3				CBUS_REG_ADDR(OM_DATA_RD_3)
+#define SECTION_AUTO_STOP_3			0x1639
+#define P_SECTION_AUTO_STOP_3			CBUS_REG_ADDR(SECTION_AUTO_STOP_3)
+#define SECTION_AUTO_STOP_3_2			0x1689
+#define P_SECTION_AUTO_STOP_3_2			CBUS_REG_ADDR(SECTION_AUTO_STOP_3_2)
+#define SECTION_AUTO_STOP_3_3			0x16d9
+#define P_SECTION_AUTO_STOP_3_3			CBUS_REG_ADDR(SECTION_AUTO_STOP_3_3)
+#define SECTION_AUTO_STOP_2			0x163a
+#define P_SECTION_AUTO_STOP_2			CBUS_REG_ADDR(SECTION_AUTO_STOP_2)
+#define SECTION_AUTO_STOP_2_2			0x168a
+#define P_SECTION_AUTO_STOP_2_2			CBUS_REG_ADDR(SECTION_AUTO_STOP_2_2)
+#define SECTION_AUTO_STOP_2_3			0x16da
+#define P_SECTION_AUTO_STOP_2_3			CBUS_REG_ADDR(SECTION_AUTO_STOP_2_3)
+#define SECTION_AUTO_STOP_1			0x163b
+#define P_SECTION_AUTO_STOP_1			CBUS_REG_ADDR(SECTION_AUTO_STOP_1)
+#define SECTION_AUTO_STOP_1_2			0x168b
+#define P_SECTION_AUTO_STOP_1_2			CBUS_REG_ADDR(SECTION_AUTO_STOP_1_2)
+#define SECTION_AUTO_STOP_1_3			0x16db
+#define P_SECTION_AUTO_STOP_1_3			CBUS_REG_ADDR(SECTION_AUTO_STOP_1_3)
+#define SECTION_AUTO_STOP_0			0x163c
+#define P_SECTION_AUTO_STOP_0			CBUS_REG_ADDR(SECTION_AUTO_STOP_0)
+#define SECTION_AUTO_STOP_0_2			0x168c
+#define P_SECTION_AUTO_STOP_0_2			CBUS_REG_ADDR(SECTION_AUTO_STOP_0_2)
+#define SECTION_AUTO_STOP_0_3			0x16dc
+#define P_SECTION_AUTO_STOP_0_3			CBUS_REG_ADDR(SECTION_AUTO_STOP_0_3)
+#define DEMUX_CHANNEL_RESET			0x163d
+#define P_DEMUX_CHANNEL_RESET			CBUS_REG_ADDR(DEMUX_CHANNEL_RESET)
+#define DEMUX_CHANNEL_RESET_2			0x168d
+#define P_DEMUX_CHANNEL_RESET_2			CBUS_REG_ADDR(DEMUX_CHANNEL_RESET_2)
+#define DEMUX_CHANNEL_RESET_3			0x16dd
+#define P_DEMUX_CHANNEL_RESET_3			CBUS_REG_ADDR(DEMUX_CHANNEL_RESET_3)
+#define DEMUX_SCRAMBLING_STATE			0x163e
+#define P_DEMUX_SCRAMBLING_STATE		CBUS_REG_ADDR(DEMUX_SCRAMBLING_STATE)
+#define DEMUX_SCRAMBLING_STATE_2		0x168e
+#define P_DEMUX_SCRAMBLING_STATE_2		CBUS_REG_ADDR(DEMUX_SCRAMBLING_STATE_2)
+#define DEMUX_SCRAMBLING_STATE_3		0x16de
+#define P_DEMUX_SCRAMBLING_STATE_3		CBUS_REG_ADDR(DEMUX_SCRAMBLING_STATE_3)
+#define DEMUX_CHANNEL_ACTIVITY			0x163f
+#define P_DEMUX_CHANNEL_ACTIVITY		CBUS_REG_ADDR(DEMUX_CHANNEL_ACTIVITY)
+#define DEMUX_CHANNEL_ACTIVITY_2		0x168f
+#define P_DEMUX_CHANNEL_ACTIVITY_2		CBUS_REG_ADDR(DEMUX_CHANNEL_ACTIVITY_2)
+#define DEMUX_CHANNEL_ACTIVITY_3		0x16df
+#define P_DEMUX_CHANNEL_ACTIVITY_3		CBUS_REG_ADDR(DEMUX_CHANNEL_ACTIVITY_3)
+#define DEMUX_STAMP_CTL				0x1640
+#define P_DEMUX_STAMP_CTL			CBUS_REG_ADDR(DEMUX_STAMP_CTL)
+#define DEMUX_STAMP_CTL_2			0x1690
+#define P_DEMUX_STAMP_CTL_2			CBUS_REG_ADDR(DEMUX_STAMP_CTL_2)
+#define DEMUX_STAMP_CTL_3			0x16e0
+#define P_DEMUX_STAMP_CTL_3			CBUS_REG_ADDR(DEMUX_STAMP_CTL_3)
+#define DEMUX_VIDEO_STAMP_SYNC_0		0x1641
+#define P_DEMUX_VIDEO_STAMP_SYNC_0		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_0)
+#define DEMUX_VIDEO_STAMP_SYNC_0_2		0x1691
+#define P_DEMUX_VIDEO_STAMP_SYNC_0_2		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_0_2)
+#define DEMUX_VIDEO_STAMP_SYNC_0_3		0x16e1
+#define P_DEMUX_VIDEO_STAMP_SYNC_0_3		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_0_3)
+#define DEMUX_VIDEO_STAMP_SYNC_1		0x1642
+#define P_DEMUX_VIDEO_STAMP_SYNC_1		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_1)
+#define DEMUX_VIDEO_STAMP_SYNC_1_2		0x1692
+#define P_DEMUX_VIDEO_STAMP_SYNC_1_2		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_1_2)
+#define DEMUX_VIDEO_STAMP_SYNC_1_3		0x16e2
+#define P_DEMUX_VIDEO_STAMP_SYNC_1_3		CBUS_REG_ADDR(DEMUX_VIDEO_STAMP_SYNC_1_3)
+#define DEMUX_AUDIO_STAMP_SYNC_0		0x1643
+#define P_DEMUX_AUDIO_STAMP_SYNC_0		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_0)
+#define DEMUX_AUDIO_STAMP_SYNC_0_2		0x1693
+#define P_DEMUX_AUDIO_STAMP_SYNC_0_2		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_0_2)
+#define DEMUX_AUDIO_STAMP_SYNC_0_3		0x16e3
+#define P_DEMUX_AUDIO_STAMP_SYNC_0_3		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_0_3)
+#define DEMUX_AUDIO_STAMP_SYNC_1		0x1644
+#define P_DEMUX_AUDIO_STAMP_SYNC_1		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_1)
+#define DEMUX_AUDIO_STAMP_SYNC_1_2		0x1694
+#define P_DEMUX_AUDIO_STAMP_SYNC_1_2		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_1_2)
+#define DEMUX_AUDIO_STAMP_SYNC_1_3		0x16e4
+#define P_DEMUX_AUDIO_STAMP_SYNC_1_3		CBUS_REG_ADDR(DEMUX_AUDIO_STAMP_SYNC_1_3)
+#define DEMUX_SECTION_RESET			0x1645
+#define P_DEMUX_SECTION_RESET			CBUS_REG_ADDR(DEMUX_SECTION_RESET)
+#define DEMUX_SECTION_RESET_2			0x1695
+#define P_DEMUX_SECTION_RESET_2			CBUS_REG_ADDR(DEMUX_SECTION_RESET_2)
+#define DEMUX_SECTION_RESET_3			0x16e5
+#define P_DEMUX_SECTION_RESET_3			CBUS_REG_ADDR(DEMUX_SECTION_RESET_3)
+
+
+/*
+ * ucode/secure_apb.h
+ */
+#define EFUSE_CNTL0				0x0
+#define P_EFUSE_CNTL0				SECBUS_REG_ADDR(EFUSE_CNTL0)
+#define EFUSE_CNTL1				0x1
+#define P_EFUSE_CNTL1				SECBUS_REG_ADDR(EFUSE_CNTL1)
+#define EFUSE_CNTL2				0x2
+#define P_EFUSE_CNTL2				SECBUS_REG_ADDR(EFUSE_CNTL2)
+#define EFUSE_CNTL3				0x3
+#define P_EFUSE_CNTL3				SECBUS_REG_ADDR(EFUSE_CNTL3)
+#define EFUSE_CNTL4				0x4
+#define P_EFUSE_CNTL4				SECBUS_REG_ADDR(EFUSE_CNTL4)
+#define AO_SECURE_REG0				0x00
+#define P_AO_SECURE_REG0			SECBUS2_REG_ADDR(AO_SECURE_REG0)
+#define AO_SECURE_REG1				0x01
+#define P_AO_SECURE_REG1			SECBUS2_REG_ADDR(AO_SECURE_REG1)
+#define AO_SECURE_REG2				0x02
+#define P_AO_SECURE_REG2			SECBUS2_REG_ADDR(AO_SECURE_REG2)
+#define AO_RTC_ADDR0				0xd0
+#define P_AO_RTC_ADDR0				SECBUS2_REG_ADDR(AO_RTC_ADDR0)
+#define AO_RTC_ADDR1				0xd1
+#define P_AO_RTC_ADDR1				SECBUS2_REG_ADDR(AO_RTC_ADDR1)
+#define AO_RTC_ADDR2				0xd2
+#define P_AO_RTC_ADDR2				SECBUS2_REG_ADDR(AO_RTC_ADDR2)
+#define AO_RTC_ADDR3				0xd3
+#define P_AO_RTC_ADDR3				SECBUS2_REG_ADDR(AO_RTC_ADDR3)
+#define AO_RTC_ADDR4				0xd4
+#define P_AO_RTC_ADDR4				SECBUS2_REG_ADDR(AO_RTC_ADDR4)
+#define SEC_BLKMV_AES_REG0			0x00
+#define P_SEC_BLKMV_AES_REG0			SECBUS3_REG_ADDR(SEC_BLKMV_AES_REG0)
+#define SEC_BLKMV_AES_W0			0x01
+#define P_SEC_BLKMV_AES_W0			SECBUS3_REG_ADDR(SEC_BLKMV_AES_W0)
+#define SEC_BLKMV_AES_W1			0x02
+#define P_SEC_BLKMV_AES_W1			SECBUS3_REG_ADDR(SEC_BLKMV_AES_W1)
+#define SEC_BLKMV_AES_W2			0x03
+#define P_SEC_BLKMV_AES_W2			SECBUS3_REG_ADDR(SEC_BLKMV_AES_W2)
+#define SEC_BLKMV_AES_W3			0x04
+#define P_SEC_BLKMV_AES_W3			SECBUS3_REG_ADDR(SEC_BLKMV_AES_W3)
+#define SEC_BLKMV_AES_R0			0x05
+#define P_SEC_BLKMV_AES_R0			SECBUS3_REG_ADDR(SEC_BLKMV_AES_R0)
+#define SEC_BLKMV_AES_R1			0x06
+#define P_SEC_BLKMV_AES_R1			SECBUS3_REG_ADDR(SEC_BLKMV_AES_R1)
+#define SEC_BLKMV_AES_R2			0x07
+#define P_SEC_BLKMV_AES_R2			SECBUS3_REG_ADDR(SEC_BLKMV_AES_R2)
+#define SEC_BLKMV_AES_R3			0x08
+#define P_SEC_BLKMV_AES_R3			SECBUS3_REG_ADDR(SEC_BLKMV_AES_R3)
+#define SEC_BLKMV_TDES_LAST_IV_LO		0x09
+#define P_SEC_BLKMV_TDES_LAST_IV_LO		SECBUS3_REG_ADDR(SEC_BLKMV_TDES_LAST_IV_LO)
+#define SEC_BLKMV_TDES_LAST_IV_HI		0x0a
+#define P_SEC_BLKMV_TDES_LAST_IV_HI		SECBUS3_REG_ADDR(SEC_BLKMV_TDES_LAST_IV_HI)
+#define SEC_BLKMV_AES_IV_0			0x0b
+#define P_SEC_BLKMV_AES_IV_0			SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_0)
+#define SEC_BLKMV_AES_IV_1			0x0c
+#define P_SEC_BLKMV_AES_IV_1			SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_1)
+#define SEC_BLKMV_AES_IV_2			0x0d
+#define P_SEC_BLKMV_AES_IV_2			SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_2)
+#define SEC_BLKMV_AES_IV_3			0x0e
+#define P_SEC_BLKMV_AES_IV_3			SECBUS3_REG_ADDR(SEC_BLKMV_AES_IV_3)
+#define SEC_BLKMV_AES_KEY_0			0x10
+#define P_SEC_BLKMV_AES_KEY_0			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_0)
+#define SEC_BLKMV_AES_KEY_1			0x11
+#define P_SEC_BLKMV_AES_KEY_1			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_1)
+#define SEC_BLKMV_AES_KEY_2			0x12
+#define P_SEC_BLKMV_AES_KEY_2			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_2)
+#define SEC_BLKMV_AES_KEY_3			0x13
+#define P_SEC_BLKMV_AES_KEY_3			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_3)
+#define SEC_BLKMV_AES_KEY_4			0x14
+#define P_SEC_BLKMV_AES_KEY_4			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_4)
+#define SEC_BLKMV_AES_KEY_5			0x15
+#define P_SEC_BLKMV_AES_KEY_5			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_5)
+#define SEC_BLKMV_AES_KEY_6			0x16
+#define P_SEC_BLKMV_AES_KEY_6			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_6)
+#define SEC_BLKMV_AES_KEY_7			0x17
+#define P_SEC_BLKMV_AES_KEY_7			SECBUS3_REG_ADDR(SEC_BLKMV_AES_KEY_7)
+#define SEC_BLKMV_THREAD_TABLE_START0		0x18
+#define P_SEC_BLKMV_THREAD_TABLE_START0		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START0)
+#define SEC_BLKMV_THREAD_TABLE_CURR0		0x19
+#define P_SEC_BLKMV_THREAD_TABLE_CURR0		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR0)
+#define SEC_BLKMV_THREAD_TABLE_END0		0x1a
+#define P_SEC_BLKMV_THREAD_TABLE_END0		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END0)
+#define SEC_BLKMV_THREAD_TABLE_START1		0x1b
+#define P_SEC_BLKMV_THREAD_TABLE_START1		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START1)
+#define SEC_BLKMV_THREAD_TABLE_CURR1		0x1c
+#define P_SEC_BLKMV_THREAD_TABLE_CURR1		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR1)
+#define SEC_BLKMV_THREAD_TABLE_END1		0x1d
+#define P_SEC_BLKMV_THREAD_TABLE_END1		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END1)
+#define SEC_BLKMV_THREAD_TABLE_START2		0x1e
+#define P_SEC_BLKMV_THREAD_TABLE_START2		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START2)
+#define SEC_BLKMV_THREAD_TABLE_CURR2		0x1f
+#define P_SEC_BLKMV_THREAD_TABLE_CURR2		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR2)
+#define SEC_BLKMV_THREAD_TABLE_END2		0x20
+#define P_SEC_BLKMV_THREAD_TABLE_END2		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END2)
+#define SEC_BLKMV_THREAD_TABLE_START3		0x21
+#define P_SEC_BLKMV_THREAD_TABLE_START3		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_START3)
+#define SEC_BLKMV_THREAD_TABLE_CURR3		0x22
+#define P_SEC_BLKMV_THREAD_TABLE_CURR3		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_CURR3)
+#define SEC_BLKMV_THREAD_TABLE_END3		0x23
+#define P_SEC_BLKMV_THREAD_TABLE_END3		SECBUS3_REG_ADDR(SEC_BLKMV_THREAD_TABLE_END3)
+#define SEC_BLKMV_GEN_REG0			0x24
+#define P_SEC_BLKMV_GEN_REG0			SECBUS3_REG_ADDR(SEC_BLKMV_GEN_REG0)
+
+
+/*
+ * ucode/hdmitx.h
+ */
+#define HDMITX_ADDR_PORT			0x42000
+#define P_HDMITX_ADDR_PORT			APB_REG_ADDR(HDMITX_ADDR_PORT)
+#define HDMITX_DATA_PORT			0x42004
+#define P_HDMITX_DATA_PORT			APB_REG_ADDR(HDMITX_DATA_PORT)
+#define HDMITX_CTRL_PORT			0x42008
+#define P_HDMITX_CTRL_PORT			APB_REG_ADDR(HDMITX_CTRL_PORT)
+
+
+
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/sd.h b/arch/arm/mach-mesong9tv/include/mach/sd.h
new file mode 100644
index 000000000000..a42bfa8fc006
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/sd.h
@@ -0,0 +1,704 @@
+/*
+ * SDHC definitions
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#ifndef __AML_SDHC_H__
+#define __AML_SDHC_H__
+
+#include <linux/types.h>
+#include <linux/device.h>
+#include <linux/mmc/host.h>
+#include <linux/earlysuspend.h>
+
+#include <mach/cpu.h>
+
+#define     AML_ERROR_RETRY_COUNTER         10
+#define     AML_TIMEOUT_RETRY_COUNTER       2
+
+#define AML_SDHC_MAGIC			 "amlsdhc"
+#define AML_SDIO_MAGIC			 "amlsdio"
+
+
+enum aml_mmc_waitfor {
+	XFER_INIT,              /* 0 */
+	XFER_START,				/* 1 */
+	XFER_AFTER_START,		/* 2 */
+	XFER_IRQ_OCCUR,			/* 3 */
+	XFER_IRQ_TASKLET_CMD,	/* 4 */
+	XFER_IRQ_TASKLET_DATA,	/* 5 */
+	XFER_IRQ_TASKLET_BUSY,	/* 6 */
+	XFER_IRQ_UNKNOWN_IRQ,	/* 7 */
+	XFER_TIMER_TIMEOUT,		/* 8 */
+	XFER_TASKLET_CMD,		/* 9 */
+	XFER_TASKLET_DATA,		/* 10 */
+	XFER_TASKLET_BUSY,		/* 11 */
+	XFER_TIMEDOUT,			/* 12 */
+	XFER_FINISHED,			/* 13 */
+};
+
+enum aml_host_status { /* Host controller status */
+	HOST_INVALID = 0,       /* 0, invalid value used for initialization */
+	HOST_RX_FIFO_FULL = 1,  /* 1, start with 1 */
+	HOST_TX_FIFO_EMPTY,	    /* 2 */
+	HOST_RSP_CRC_ERR,	    /* 3 */
+	HOST_DAT_CRC_ERR,	    /* 4 */
+	HOST_RSP_TIMEOUT_ERR,   /* 5 */
+	HOST_DAT_TIMEOUT_ERR,   /* 6 */
+    HOST_ERR_END,	        /* 7, end of errors */
+	HOST_TASKLET_CMD,	    /* 8 */
+	HOST_TASKLET_DATA,	    /* 9 */
+};
+
+struct amlsd_host;
+struct amlsd_platform {
+	struct amlsd_host* host;
+	struct mmc_host *mmc;
+	struct list_head sibling;
+	u32 ocr_avail;
+	u32 port;
+#define     PORT_SDIO_A     0
+#define     PORT_SDIO_B     1
+#define     PORT_SDIO_C     2
+#define     PORT_SDHC_A     3
+#define     PORT_SDHC_B     4
+#define     PORT_SDHC_C     5
+
+	unsigned int width;
+	unsigned int caps;
+	unsigned int caps2;
+    unsigned int card_capacity;
+
+	unsigned int f_min;
+	unsigned int f_max;
+	unsigned int f_max_w;
+	unsigned int clkc;
+	unsigned int clk2;
+	unsigned int clkc_w;
+	unsigned int ctrl;
+	unsigned int clock;
+	unsigned int tune_phase;            /* store tuning result */
+	unsigned char signal_voltage;		/* signalling voltage (1.8V or 3.3V) */
+
+	unsigned int low_burst;
+	unsigned int irq_in;
+	unsigned int irq_in_edge;
+	unsigned int irq_out;
+	unsigned int irq_out_edge;
+	unsigned int gpio_cd;
+	unsigned int gpio_cd_level;
+	unsigned int gpio_power;
+	unsigned int power_level;
+	char pinname[32];
+	unsigned int gpio_ro;
+    unsigned int gpio_dat3;
+    unsigned int jtag_pin;
+
+    int is_sduart;
+    bool is_in;
+    bool is_tuned;                      /* if card has been tuning */
+    bool need_retuning;
+    struct delayed_work retuning;
+
+    /* we used this flag to filter some unnecessary cmd before initialized flow */
+    bool is_fir_init; // has been initialized for the first time
+    unsigned int card_type; /* 0:unknown, 1:mmc card(include eMMC), 2:sd card(include tSD), 3:sdio device(ie:sdio-wifi), 4:SD combo (IO+mem) card, 5:NON sdio device(means sd/mmc card), other:reserved */
+#define CARD_TYPE_UNKNOWN           0        /* unknown */
+#define CARD_TYPE_MMC               1        /* MMC card */
+#define CARD_TYPE_SD                2        /* SD card */
+#define CARD_TYPE_SDIO              3        /* SDIO card */
+#define CARD_TYPE_SD_COMBO          4        /* SD combo (IO+mem) card */
+#define CARD_TYPE_NON_SDIO          5        /* NON sdio device (means SD/MMC card) */
+#define aml_card_type_unknown(c)    ((c)->card_type == CARD_TYPE_UNKNOWN)
+#define aml_card_type_mmc(c)        ((c)->card_type == CARD_TYPE_MMC)
+#define aml_card_type_sd(c)         ((c)->card_type == CARD_TYPE_SD)
+#define aml_card_type_sdio(c)       ((c)->card_type == CARD_TYPE_SDIO)
+#define aml_card_type_non_sdio(c)   ((c)->card_type == CARD_TYPE_NON_SDIO)
+
+    // struct pinctrl *uart_ao_pinctrl;
+	void (*irq_init)(struct amlsd_platform* pdata);
+
+	unsigned int max_blk_count;
+	unsigned int max_blk_size;
+	unsigned int max_req_size;
+	unsigned int max_seg_size;
+
+	/*for inand partition: struct mtd_partition, easy porting from nand*/
+	struct mtd_partition *parts;
+	unsigned int nr_parts;
+
+	struct resource* resource;
+	void (*xfer_pre)(struct amlsd_platform* pdata);
+	void (*xfer_post)(struct amlsd_platform* pdata);
+
+	int (*port_init)(struct amlsd_platform* pdata);
+	int (*cd)(struct amlsd_platform* pdata);
+	int (*ro)(struct amlsd_platform* pdata);
+	void (*pwr_pre)(struct amlsd_platform* pdata);
+	void (*pwr_on)(struct amlsd_platform* pdata);
+	void (*pwr_off)(struct amlsd_platform* pdata);
+
+};
+
+struct amlsd_host {
+	/* back-link to device */
+	struct device *dev;
+	struct list_head sibling;
+    struct platform_device *pdev;
+	struct amlsd_platform * pdata;
+	struct mmc_host		*mmc;
+	struct mmc_request	*request;
+	struct resource		*mem;
+	void __iomem		*base;
+	int			dma;
+	char*		bn_buf;
+	dma_addr_t		bn_dma_buf;
+	unsigned int f_max;
+	unsigned int f_max_w;
+	unsigned int f_min;
+	// struct tasklet_struct cmd_tlet;
+	// struct tasklet_struct data_tlet;
+	// struct tasklet_struct busy_tlet;
+	// struct tasklet_struct to_tlet;
+    // struct timer_list timeout_tlist;
+	struct delayed_work	timeout;
+	// struct early_suspend amlsd_early_suspend;
+
+    struct class            debug;
+
+	unsigned int send;
+	unsigned int ctrl;
+	unsigned int clkc;
+	// unsigned int clkc_w;
+	// unsigned int pdma;
+	// unsigned int pdma_s;
+	// unsigned int pdma_low;
+	unsigned int misc;
+	unsigned int ictl;
+	unsigned int ista;
+	unsigned int dma_addr;
+
+	unsigned long		clk_rate;
+
+	struct  mmc_request	*mrq;
+	struct  mmc_request	*mrq2;
+	spinlock_t	mrq_lock;
+	int			cmd_is_stop;
+	enum aml_mmc_waitfor	xfer_step;
+	enum aml_mmc_waitfor	xfer_step_prev;
+
+	int			bus_width;
+	int     port;
+	int     locked;
+    bool    is_gated;
+	// unsigned int		ccnt, dcnt;
+
+	int     status; // host status: xx_error/ok
+	int init_flag;
+
+    char    *msg_buf;
+#define MESSAGE_BUF_SIZE            512
+
+#ifdef CONFIG_DEBUG_FS
+	struct dentry		*debug_root;
+	struct dentry		*debug_state;
+	struct dentry		*debug_regs;
+#endif
+
+#ifdef CONFIG_CPU_FREQ
+	struct notifier_block	freq_transition;
+#endif
+
+    u32			opcode;
+	u32			arg;
+    u32         cmd25_cnt;
+
+#ifdef      CONFIG_MMC_AML_DEBUG
+    u32         req_cnt;
+    u32         trans_size;
+
+    u32         reg_buf[16];
+#endif
+    u32         time_req_sta; // request start time
+
+    struct pinctrl  *pinctrl;
+    char        pinctrl_name[30];
+
+    int         storage_flag; // used for judging if there is a tsd/emmc
+    int         version; // bit[7-0]--minor version, bit[31-8]--major version
+};
+
+/*-sdio-*/
+
+#define SDIO_ARGU       (0x0)
+#define SDIO_SEND       (0x4)
+#define SDIO_CONF       (0x8)
+#define SDIO_IRQS       (0xc)
+#define SDIO_IRQC       (0x10)
+#define SDIO_MULT       (0x14)
+#define SDIO_ADDR       (0x18)
+#define SDIO_EXT        (0x1c)
+#define SDIO_CCTL       (0x40)
+#define SDIO_CDAT       (0x44)
+
+#define CLK_DIV         (0x1f4)
+
+struct cmd_send{
+    u32 cmd_command:8; /*[7:0] Command Index*/
+    u32 cmd_response_bits:8; /*[15:8]
+        * 00 means no response
+        * others: Response bit number(cmd bits+response bits+crc bits-1)*/
+    u32 response_do_not_have_crc7:1; /*[16]
+        * 0:Response need check CRC7, 1: dont need check*/
+    u32 response_have_data:1; /*[17]
+        * 0:Receiving Response without data, 1:Receiving response with data*/
+    u32 response_crc7_from_8:1; /*[18]
+        * 0:Normal CRC7, Calculating CRC7 will be from bit0 of all response bits,
+        * 1:Calculating CRC7 will be from bit8 of all response bits*/
+    u32 check_busy_on_dat0:1; /*[19]
+        * used for R1b response 0: dont check busy on dat0, 1:need check*/
+    u32 cmd_send_data:1; /*[20]
+        * 0:This command is not for transmitting data,
+        * 1:This command is for transmitting data*/
+    u32 use_int_window:1; /*[21]
+        * 0:SDIO DAT1 interrupt window disabled, 1:Enabled*/
+    u32 reserved:2;/*[23:22]*/
+    u32 repeat_package_times:8; /*[31:24] Total packages to be sent*/
+};
+
+struct sdio_config{
+    u32 cmd_clk_divide:10; /*[9:0] Clock rate setting,
+        * Frequency of SD equals to Fsystem/((cmd_clk_divide+1)*2)*/
+    u32 cmd_disable_crc:1; /*[10]
+        * 0:CRC employed, 1:dont send CRC during command being sent*/
+    u32 cmd_out_at_posedge:1; /*[11]
+        * Command out at negedge normally, 1:at posedge*/
+    u32 cmd_argument_bits:6; /*[17:12] before CRC added, normally 39*/
+    u32 do_not_delay_data:1; /*[18]
+        *0:Delay one clock normally, 1:dont delay*/
+    u32 data_latch_at_negedge:1; /*[19]
+        * 0:Data caught at posedge normally, 1:negedge*/
+    u32 bus_width:1; /*[20] 0:1bit, 1:4bit*/
+    u32 m_endian:2; /*[22:21]
+        * Change ENDIAN(bytes order) from DMA data (e.g. dma_din[31:0]).
+        * (00: ENDIAN no change, data output equals to original dma_din[31:0];
+        * 01: data output equals to {dma_din[23:16],dma_din[31:24],
+        * dma_din[7:0],dma_din[15:8]};10: data output equals to
+        * {dma_din[15:0],dma_din[31:16]};11: data output equals to
+        * {dma_din[7:0],dma_din[15:8],dma_din[23:16],dma_din[31:24]})*/
+    u32 sdio_write_nwr:6; /*[28:23]
+        * Number of clock cycles waiting before writing data*/
+    u32 sdio_write_crc_ok_status:3; /*[31:29] if CRC status
+        * equals this register, sdio write can be consider as correct*/
+};
+
+struct sdio_status_irq{
+    u32 sdio_status:4; /*[3:0] Read Only
+        * SDIO State Machine Current State, just for debug*/
+    u32 sdio_cmd_busy:1; /*[4] Read Only
+        * SDIO Command Busy, 1:Busy State*/
+    u32 sdio_response_crc7_ok:1; /*[5] Read Only
+        * SDIO Response CRC7 status, 1:OK*/
+    u32 sdio_data_read_crc16_ok:1; /*[6] Read Only
+        * SDIO Data Read CRC16 status, 1:OK*/
+    u32 sdio_data_write_crc16_ok:1; /*[7] Read Only
+        * SDIO Data Write CRC16 status, 1:OK*/
+    u32 sdio_if_int:1; /*[8] write 1 clear this int bit
+        * SDIO DAT1 Interrupt Status*/
+    u32 sdio_cmd_int:1; /*[9] write 1 clear this int bit
+        * Command Done Interrupt Status*/
+    u32 sdio_soft_int:1; /*[10] write 1 clear this int bit
+        * Soft Interrupt Status*/
+    u32 sdio_set_soft_int:1; /*[11] write 1 to this bit
+        * will set Soft Interrupt, read out is m_req_sdio, just for debug*/
+    u32 sdio_status_info:4; /*[15:12]
+        * used for change information between ARC and Amrisc */
+    u32 sdio_timing_out_int:1; /*[16] write 1 clear this int bit
+        * Timeout Counter Interrupt Status*/
+    u32 amrisc_timing_out_int_en:1; /*[17]
+        * Timeout Counter Interrupt Enable for AMRISC*/
+    u32 arc_timing_out_int_en:1; /*[18]
+        * Timeout Counter Interrupt Enable for ARC/ARM*/
+    u32 sdio_timing_out_count:13; /*[31:19]
+        * Timeout Counter Preload Setting and Present Status*/
+};
+
+struct sdio_irq_config{
+    u32 amrisc_if_int_en:1; /*[0]
+        * 1:SDIO DAT1 Interrupt Enable for AMRISC*/
+    u32 amrisc_cmd_int_en:1; /*[1]
+        * 1:Command Done Interrupt Enable for AMRISC*/
+    u32 amrisc_soft_int_en:1; /*[2]
+        * 1:Soft Interrupt Enable for AMRISC*/
+    u32 arc_if_int_en:1; /*[3]
+        * 1:SDIO DAT1 Interrupt Enable for ARM/ARC*/
+    u32 arc_cmd_int_en:1; /*[4]
+        * 1:Command Done Interrupt Enable for ARM/ARC*/
+    u32 arc_soft_int_en:1; /*[5]
+        * 1:Soft Interrupt Enable for ARM/ARC*/
+    u32 sdio_if_int_config:2; /*[7:6]
+        * 00:sdio_if_interrupt window will reset after data Tx/Rx or command
+        * done, others: only after command done*/
+    u32 sdio_force_data:6; /*[13:8]
+        * Write operation: Data forced by software
+        * Read operation: {CLK,CMD,DAT[3:0]}*/
+    u32 sdio_force_enable:1; /*[14] Software Force Enable
+        * This is the software force mode, Software can directly
+        * write to sdio 6 ports (cmd, clk, dat0..3) if force_output_en
+        * is enabled. and hardware outputs will be bypassed.*/
+    u32 soft_reset:1; /*[15]
+        * Write 1 Soft Reset, Don't need to clear it*/
+    u32 sdio_force_output_en:6; /*[21:16]
+        * Force Data Output Enable,{CLK,CMD,DAT[3:0]}*/
+    u32 disable_mem_halt:2; /*[23:22] write and read
+        * 23:Disable write memory halt, 22:Disable read memory halt*/
+    u32 sdio_force_data_read:6; /*[29:24] Read Only
+        * Data read out which have been forced by software*/
+    u32 force_halt:1; /*[30] 1:Force halt SDIO by software
+        * Halt in this sdio host controller means stop to transmit or
+        * receive data from sd card. and then sd card clock will be shutdown.
+        * Software can force to halt anytime, and hardware will automatically
+        * halt the sdio when reading fifo is full or writing fifo is empty*/
+    u32 halt_hole:1; /*[31]
+        * 0: SDIO halt for 8bit mode, 1:SDIO halt for 16bit mode*/
+};
+
+struct sdio_mult_config{
+    u32 sdio_port_sel:2; /*[1:0] 0:sdio_a, 1:sdio_b, 2:sdio_c*/
+    u32 ms_enable:1; /*[2] 1:Memory Stick Enable*/
+    u32 ms_sclk_always:1; /*[3] 1: Always send ms_sclk*/
+    u32 stream_enable:1; /*[4] 1:Stream Enable*/
+    u32 stream_8_bits_mode:1; /*[5] Stream 8bits mode*/
+    u32 data_catch_level:2; /*[7:6] Level of data catch*/
+    u32 write_read_out_index:1; /*[8] Write response index Enable
+        * [31:16], [11:10], [7:0] is set only when  bit8 of this register is not set.
+        * And other bits are set only when bit8 of this register is also set.*/
+    u32 data_catch_readout_en:1; /*[9] Data catch readout Enable*/
+    u32 sdio_0_data_on_1:1; /*[10] 1:dat0 is on dat1*/
+    u32 sdio_1_data_swap01:1; /*[11] 1:dat1 and dat0 swapped*/
+    u32 response_read_index:4; /*[15:12] Index of internal read response*/
+    u32 data_catch_finish_point:12; /*[27:16] If internal data
+        * catch counter equals this register, it indicates data catching is finished*/
+    u32 reserved:4; /*[31:28]*/
+};
+
+struct sdio_extension{
+    u32 cmd_argument_ext:16; /*[15:0] for future use*/
+    u32 data_rw_number:14; /*[29:16]
+        * Data Read/Write Number in one packet, include CRC16 if has CRC16*/
+    u32 data_rw_do_not_have_crc16:1; /*[30]
+        * 0:data Read/Write has crc16, 1:without crc16*/
+    u32 crc_status_4line:1; /*[31] 1:4Lines check CRC Status*/
+};
+
+struct sdio_reg{
+    u32 argument; /*2308*/
+    struct cmd_send send; /*2309*/
+    struct sdio_config config; /*230a*/
+    struct sdio_status_irq status; /*230b*/
+    struct sdio_irq_config irqc; /*230c*/
+    struct sdio_mult_config mult; /*230d*/
+    u32 m_addr; /*230e*/
+    struct sdio_extension ext;/*230f*/
+};
+
+/*-sdhc-*/
+
+#define SDHC_ARGU				(0x00)
+#define SDHC_SEND				(0x04)
+#define SDHC_CTRL				(0x08)
+#define SDHC_STAT				(0x0C)
+#define SDHC_CLKC				(0x10)
+#define SDHC_ADDR				(0x14)
+#define SDHC_PDMA				(0x18)
+#define SDHC_MISC				(0x1C)
+#define SDHC_DATA				(0x20)
+#define SDHC_ICTL				(0x24)
+#define SDHC_ISTA				(0x28)
+#define SDHC_SRST				(0x2C)
+#define SDHC_ESTA				(0x30)
+#define SDHC_ENHC				(0x34)
+#define SDHC_CLK2				(0x38)
+
+struct sdhc_send{
+	u32 cmd_index:6; /*[5:0] command index*/
+	u32 cmd_has_resp:1; /*[6] 0:no resp 1:has resp*/
+	u32 cmd_has_data:1; /*[7] 0:no data 1:has data*/
+	u32 resp_len:1; /*[8] 0:48bit 1:136bit*/
+	u32 resp_no_crc:1; /*[9] 0:check crc7 1:don't check crc7*/
+	u32 data_dir:1; /*[10] 0:data rx, 1:data tx*/
+	u32 data_stop:1; /*[11] 0:rx or tx, 1:data stop,ATTN:will give rx a softreset*/
+	u32 r1b:1; /*[12] 0: resp with no busy, 1:R1B*/
+	u32 reserved:3; /*[15:13] reserved*/
+	u32 total_pack:16; /*[31:16] total package number for writing or reading*/
+};
+
+struct sdhc_ctrl{
+	u32 dat_type:2; /*[1:0] 0:1bit, 1:4bits, 2:8bits, 3:reserved*/
+	u32 ddr_mode:1; /*[2] 0:SDR mode, 1:Don't set it*/
+	u32 tx_crc_nocheck:1; /*[3] 0:check sd write crc result, 1:disable tx crc check*/
+	u32 pack_len:9; /*[12:4] 0:512Bytes, 1:1, 2:2, ..., 511:511Bytes*/
+	u32 rx_timeout:7; /*[19:13] cmd or wcrc Receiving Timeout, default 64*/
+	u32 rx_period:4; /*[23:20]Period between response/cmd and next cmd, default 8*/
+	u32 rx_endian:3; /*[26:24] Rx Endian Control*/
+	u32 sdio_irq_mode:1; /*[27]0:Normal mode, 1: support data block gap
+			(need turn off clock gating)*/
+	u32 dat0_irq_sel:1; /*[28] Dat0 Interrupt selection,
+			0:busy check after response, 1:any rising edge of dat0*/
+	u32 tx_endian:3; /*[31:29] Tx Endian Control*/
+};
+
+struct sdhc_stat{
+	u32 cmd_busy:1; /*[0] 0:Ready for command, 1:busy*/
+	u32 dat3_0:4; /*[4:1] DAT[3:0]*/
+	u32 cmd:1; /*[5] CMD*/
+	u32 rxfifo_cnt:7; /*[12:6] RxFIFO count*/
+	u32 txfifo_cnt:7; /*[19:13] TxFIFO count*/
+	u32 dat7_4:4; /*[23:20] DAT[7:4]*/
+	u32 reserved:8; /*[31:24] Reserved*/
+};
+
+/*
+* to avoid glitch issue,
+* 1. clk_switch_on better be set after cfg_en be set to 1'b1
+* 2. clk_switch_off shall be set before cfg_en be set to 1'b0
+* 3. rx_clk/sd_clk phase diff please see SD_REGE_CLK2.
+*/
+struct sdhc_clkc{
+	u32 clk_div:12; /*[11:0] clk_div for TX_CLK 0: don't set it,
+			1:div2, 2:div3, 3:div4 ...*/
+	u32 tx_clk_on:1; /*[12] TX_CLK 0:switch off, 1:switch on*/
+	u32 rx_clk_on:1; /*[13] RX_CLK 0:switch off, 1:switch on*/
+	u32 sd_clk_on:1; /*[14] SD_CLK 0:switch off, 1:switch on*/
+	u32 mod_clk_on:1; /*[15] Clock Module Enable, Should
+			set before bit[14:12] switch on, and after bit[14:12] switch off*/
+	u32 clk_src_sel:2; /*[17:16] 0:osc, 1:fclk_div4, 2:fclk_div3, 3:fclk_div5*/
+	u32 reserved:6; /*[23:18] Reserved*/
+	u32 clk_jic:1; /*[24] Clock JIC for clock gating control
+			1: will turn off clock gating*/
+	u32 mem_pwr_off:2; /*[26:25] 00:Memory Power Up, 11:Memory Power Off*/
+	u32 reserved2:5; /*[31:27] Reserved*/
+};
+
+/*
+* Note1: dma_urgent is just set when bandwidth is very tight
+* Note2: pio_rdresp need to be combined with REG0_ARGU;
+* For R0, when 0, reading REG0 will get the normal 32bit response;
+* For R2, when 1, reading REG0 will get CID[31:0], when 2, get CID[63:32],
+* and so on; 6 or 7, will get original command argument.
+*/
+struct sdhc_pdma{
+	u32 dma_mode:1; /*[0] 0:PIO mode, 1:DMA mode*/
+	u32 pio_rdresp:3; /*[3:1] 0:[39:8] 1:1st 32bits, 2:2nd ...,
+			6 or 7:command argument*/
+	u32 dma_urgent:1; /*[4] 0:not urgent, 1:urgent*/
+	u32 wr_burst:5; /*[9:5] Number in one Write request burst(0:1,1:2...)*/
+	u32 rd_burst:5; /*[14:10] Number in one Read request burst(0:1, 1:2...)*/
+	u32 rxfifo_th:7; /*[21:15] RxFIFO threshold, >=rxth, will request write*/
+	u32 txfifo_th:7; /*[28:22] TxFIFO threshold, <=txth, will request read*/
+	u32 rxfifo_manual_flush:2; /*[30:29] [30]self-clear-flush,
+			[29] mode: 0:hw, 1:sw*/
+	u32 txfifo_fill:1; /*[31] self-clear-fill, recommand to write before sd send*/
+};
+
+struct sdhc_misc{
+	u32 reserved:4; /*[3:0] reserved*/
+	u32 wcrc_err_patt:3; /*[6:4] WCRC Error Pattern*/
+	u32 wcrc_ok_patt:3; /*[9:7] WCRC OK Pattern*/
+	u32 reserved1:6; /*[15:10] reserved*/
+	u32 burst_num:6; /*[21:16] Burst Number*/
+	u32 thread_id:6; /*[27:22] Thread ID*/
+	u32 manual_stop:1; /*[28] 0:auto stop mode, 1:manual stop mode*/
+	u32 reserved2:3; /*[31:29] reserved*/
+};
+
+struct sdhc_ictl{
+	u32 resp_ok:1; /*[0] Response is received OK*/
+	u32 resp_timeout:1; /*[1] Response Timeout Error*/
+	u32 resp_err_crc:1; /*[2] Response CRC Error*/
+	u32 resp_ok_noclear:1; /*[3] Response is received OK(always no self reset)*/
+	u32 data_1pack_ok:1; /*[4] One Package Data Completed ok*/
+	u32 data_timeout:1; /*[5] One Package Data Failed (Timeout Error)*/
+	u32 data_err_crc:1; /*[6] One Package Data Failed (CRC Error)*/
+	u32 data_xfer_ok:1; /*[7] Data Transfer Completed ok*/
+	u32 rx_higher:1; /*[8] RxFIFO count > threshold*/
+	u32 tx_lower:1; /*[9] TxFIFO count < threshold*/
+	u32 dat1_irq:1; /*[10] SDIO DAT1 Interrupt*/
+	u32 dma_done:1; /*[11] DMA Done*/
+	u32 rxfifo_full:1; /*[12] RxFIFO Full*/
+	u32 txfifo_empty:1; /*[13] TxFIFO Empty*/
+	u32 addi_dat1_irq:1; /*[14] Additional SDIO DAT1 Interrupt*/
+	u32 reserved:1; /*[15] reserved*/
+	u32 dat1_irq_delay:2; /*[17:16] sdio dat1 interrupt mask windows clear
+			delay control,0:2cycle 1:1cycles*/
+	u32 reserved1:14; /*[31:18] reserved*/
+};
+
+/*Note1: W1C is write one clear.*/
+struct sdhc_ista{
+	u32 resp_ok:1; /*[0] Response is received OK (W1C)*/
+	u32 resp_timeout:1; /*[1] Response is received Failed (Timeout Error) (W1C)*/
+	u32 resp_err_crc:1; /*[2] Response is received Failed (CRC Error) (W1C)*/
+	u32 resp_ok_noclear:1; /*[3] Response is Received OK (always no self reset)*/
+	u32 data_1pack_ok:1; /*[4] One Package Data Completed ok (W1C)*/
+	u32 data_timeout:1; /*[5] One Package Data Failed (Timeout Error) (W1C)*/
+	u32 data_err_crc:1; /*[6] One Package Data Failed (CRC Error) (W1C)*/
+	u32 data_xfer_ok:1; /*[7] Data Transfer Completed ok (W1C)*/
+	u32 rx_higher:1; /*[8] RxFIFO count > threshold (W1C)*/
+	u32 tx_lower:1; /*[9] TxFIFO count < threshold (W1C)*/
+	u32 dat1_irq:1; /*[10] SDIO DAT1 Interrupt (W1C)*/
+	u32 dma_done:1; /*[11] DMA Done (W1C)*/
+	u32 rxfifo_full:1; /*[12] RxFIFO Full(W1C)*/
+	u32 txfifo_empty:1; /*[13] TxFIFO Empty(W1C)*/
+	u32 addi_dat1_irq:1; /*[14] Additional SDIO DAT1 Interrupt*/
+	u32 reserved:17; /*[31:13] reserved*/
+};
+
+/*
+* Note1: Soft reset for DPHY TX/RX needs programmer to set it
+* and then clear it manually.*/
+struct sdhc_srst{
+	u32 main_ctrl:1; /*[0] Soft reset for MAIN CTRL(self clear)*/
+	u32 rxfifo:1; /*[1] Soft reset for RX FIFO(self clear)*/
+	u32 txfifo:1; /*[2] Soft reset for TX FIFO(self clear)*/
+	u32 dphy_rx:1; /*[3] Soft reset for DPHY RX*/
+	u32 dphy_tx:1; /*[4] Soft reset for DPHY TX*/
+	u32 dma_if:1; /*[5] Soft reset for DMA IF(self clear)*/
+	u32 reserved:26; /*[31:6] reserved*/
+};
+
+struct sdhc_enhc{
+	u32 rx_timeout:8; /*[7:0] Data Rx Timeout Setting*/
+	u32 sdio_irq_period:8; /*[15:8] SDIO IRQ Period Setting
+			(IRQ checking window length)*/
+	u32 dma_rd_resp:1; /*[16] No Read DMA Response Check*/
+	u32 dma_wr_resp:1; /*[16] No Write DMA Response Check*/
+	u32 rxfifo_th:7; /*[24:18] RXFIFO Full Threshold,default 60*/
+	u32 txfifo_th:7; /*[31:25] TXFIFO Empty Threshold,default 0*/
+};
+
+struct sdhc_clk2{
+	u32 rx_clk_phase:12; /*[11:0] rx_clk phase diff(default 0:no diff,
+			1:one input clock cycle ...)*/
+	u32 sd_clk_phase:12; /*[23:12] sd_clk phase diff(default 0:half(180 degree),
+			1:half+one input clock cycle, 2:half+2 input clock cycles, ...)*/
+	u32 reserved:8; /*[31:24] reserved*/
+};
+
+#define SDHC_CLOCK_SRC_OSC              0 // 24MHz
+#define SDHC_CLOCK_SRC_FCLK_DIV4        1
+#define SDHC_CLOCK_SRC_FCLK_DIV3        2
+#define SDHC_CLOCK_SRC_FCLK_DIV5        3
+#define SDHC_ISTA_W1C_ALL               0x7fff
+#define SDHC_SRST_ALL                   0x3f
+#define SDHC_ICTL_ALL	                    0x7fff
+
+#define STAT_POLL_TIMEOUT				0xfffff
+
+#define MMC_RSP_136_NUM					4
+#define MMC_MAX_DEVICE					3
+#define MMC_TIMEOUT						5000
+
+//#define printk(a...)
+#define DBG_LINE_INFO()  printk(KERN_WARNING "[%s] : %s\n",__func__,__FILE__);
+//#define DBG_LINE_INFO()
+// #define dev_err(a,s) printk(KERN_INFO s);
+
+
+#define AML_MMC_DISABLED_TIMEOUT	100
+#define AML_MMC_SLEEP_TIMEOUT		1000
+#define AML_MMC_OFF_TIMEOUT 8000
+
+#define SDHC_BOUNCE_REQ_SIZE		(512*1024)
+#define SDIO_BOUNCE_REQ_SIZE		(128*1024)
+#define MMC_TIMEOUT_MS		20
+
+#define MESON_SDIO_PORT_A 0
+#define MESON_SDIO_PORT_B 1
+#define MESON_SDIO_PORT_C 2
+#define MESON_SDIO_PORT_XC_A 3
+#define MESON_SDIO_PORT_XC_B 4
+#define MESON_SDIO_PORT_XC_C 5
+
+void aml_sdhc_request(struct mmc_host *mmc, struct mmc_request *mrq);
+int aml_sdhc_get_cd(struct mmc_host *mmc);
+extern void amlsd_init_debugfs(struct mmc_host *host);
+
+extern struct mmc_host *sdio_host;
+
+#define     SPI_BOOT_FLAG                   0
+#define     NAND_BOOT_FLAG                  1
+#define     EMMC_BOOT_FLAG                  2
+#define     CARD_BOOT_FLAG                  3
+#define     SPI_NAND_FLAG                   4
+#define     SPI_EMMC_FLAG                   5
+
+#define R_BOOT_DEVICE_FLAG  READ_CBUS_REG(ASSIST_POR_CONFIG)
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+#define POR_BOOT_VALUE ((((R_BOOT_DEVICE_FLAG>>9)&1)<<2)|((R_BOOT_DEVICE_FLAG>>6)&3)) // {poc[9],poc[7:6]}
+#else
+#define POR_BOOT_VALUE (R_BOOT_DEVICE_FLAG & 7)
+#endif
+
+#define POR_NAND_BOOT() ((POR_BOOT_VALUE == 7) || (POR_BOOT_VALUE == 6))
+#define POR_SPI_BOOT() ((POR_BOOT_VALUE == 5) || (POR_BOOT_VALUE == 4))
+
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
+	#define POR_EMMC_BOOT() ((POR_BOOT_VALUE == 3) || ((POR_BOOT_VALUE == 1)))
+#else
+	#define POR_EMMC_BOOT()	 (POR_BOOT_VALUE == 3)
+#endif
+
+#define POR_CARD_BOOT() (POR_BOOT_VALUE == 0)
+
+#define print_tmp(fmt, args...) do{\
+		printk("[%s] " fmt, __FUNCTION__, ##args);	\
+}while(0)
+
+#define print_dbg(fmt, args...) do{\
+	printk("[%s]\033[0;40;35m " fmt "\033[0m", __FUNCTION__, ##args);  \
+}while(0)
+
+#ifdef CONFIG_SND_AML_M8_SOC
+//for external codec status, if using external codec, jtag should not be set.
+extern int ext_codec;
+#endif
+
+#ifndef CONFIG_MESON_TRUSTZONE
+// P_AO_SECURE_REG1 is "Secure Register 1" in <M8-Secure-AHB-Registers.doc>
+#ifdef CONFIG_SND_AML_M8_SOC
+#define aml_jtag_gpioao() do{\
+    aml_clr_reg32_mask(P_AO_SECURE_REG1, ((1<<5) | (1<<9))); \
+    if(!ext_codec)\
+        aml_set_reg32_mask(P_AO_SECURE_REG1, ((1<<8) | (1<<1))); \
+}while(0)
+#else
+#define aml_jtag_gpioao() do{\
+    aml_clr_reg32_mask(P_AO_SECURE_REG1, ((1<<5) | (1<<9))); \
+}while(0)
+#endif
+
+#define aml_jtag_sd() do{\
+    aml_clr_reg32_mask(P_AO_SECURE_REG1, ((1<<8) | (1<<1))); \
+    aml_set_reg32_mask(P_AO_SECURE_REG1, ((1<<5) | (1<<9))); \
+}while(0)
+#else
+/* Secure REG can only be accessed in Secure World if TrustZone enabled.*/
+#include <mach/meson-secure.h>
+#define aml_jtag_gpioao() do {\
+	meson_secure_reg_write(P_AO_SECURE_REG1, meson_secure_reg_read(P_AO_SECURE_REG1) & (~((1<<5) | (1<<9)))); \
+} while(0)
+#define aml_jtag_sd() do {\
+	meson_secure_reg_write(P_AO_SECURE_REG1, meson_secure_reg_read(P_AO_SECURE_REG1) & (~(1<<8) | (1<<1))); \
+	meson_secure_reg_write(P_AO_SECURE_REG1, meson_secure_reg_read(P_AO_SECURE_REG1) | ((1<<5) | (1<<9))); \
+} while(0)
+#endif /* CONFIG_MESON_TRUSTZONE */
+
+#define aml_uart_pinctrl() do {\
+    \
+}while(0)
+
+#endif
+
diff --git a/arch/arm/mach-mesong9tv/include/mach/smp.h b/arch/arm/mach-mesong9tv/include/mach/smp.h
new file mode 100644
index 000000000000..5ad49b78a6b2
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/smp.h
@@ -0,0 +1,19 @@
+/*
+ * mach/smp.h
+ *
+ */
+
+#ifndef __MACH_MESON8_SMP_H_
+#define __MACH_MESON8_SMP_H_
+
+#include <linux/smp.h>
+#include <asm/smp.h>
+
+extern struct smp_operations meson_smp_ops;
+
+typedef int (*exl_call_func_t)(void *p_arg);
+extern int try_exclu_cpu_exe(exl_call_func_t func, void * p_arg);
+extern int pm_notifier_call_chain(unsigned long val);
+
+
+#endif /* __MACH_MESON8_SMP_H_ */
diff --git a/arch/arm/mach-mesong9tv/include/mach/system.h b/arch/arm/mach-mesong9tv/include/mach/system.h
new file mode 100644
index 000000000000..c83ddf750da4
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/system.h
@@ -0,0 +1,45 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/system.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_SYSTEM_H
+#define __MACH_MESONG9TV_SYSTEM_H
+
+#include <linux/io.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/register.h>
+
+static inline void arch_idle(void)
+{
+	/*
+	 * This should do all the clock switching
+	 * and wait for interrupt tricks
+	 */
+	cpu_do_idle();
+}
+
+#define WATCHDOG_ENABLE_BIT		(1<<19)
+#define DUAL_CORE_RESET			(3<<24)
+
+static inline void arch_reset(char mode, const char *cmd)
+{
+	WRITE_MPEG_REG(VENC_VDAC_SETTING, 0xf);
+	WRITE_MPEG_REG(WATCHDOG_RESET, 0);
+	WRITE_MPEG_REG(WATCHDOG_TC, DUAL_CORE_RESET| WATCHDOG_ENABLE_BIT | 100);
+	while(1)
+		arch_idle();
+}
+
+#endif //__MACH_MESONG9TV_SYSTEM_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/thermal.h b/arch/arm/mach-mesong9tv/include/mach/thermal.h
new file mode 100644
index 000000000000..52ddfaeed1f7
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/thermal.h
@@ -0,0 +1,7 @@
+#ifndef ARCH__THERMAL_H__
+#define ARCH__THERMAL_H__
+
+extern int thermal_firmware_init(void);
+extern int get_cpu_temp(void);
+
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/timex.h b/arch/arm/mach-mesong9tv/include/mach/timex.h
new file mode 100644
index 000000000000..d5067e43be45
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/timex.h
@@ -0,0 +1,25 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/timex.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_TIMEX_H
+#define __MACH_MESONG9TV_TIMEX_H
+
+#ifndef CONFIG_MESON_CLOCK_TICK_RATE
+#define CLOCK_TICK_RATE		(24000000)
+#else
+#define CLOCK_TICK_RATE		(CONFIG_MESON_CLOCK_TICK_RATE)
+#endif
+
+#endif //__MACH_MESONG9TV_TIMEX_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/tvregs.h b/arch/arm/mach-mesong9tv/include/mach/tvregs.h
new file mode 100644
index 000000000000..09649a15726e
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/tvregs.h
@@ -0,0 +1,1192 @@
+/*
+ * Amlogic Apollo
+ * frame buffer driver
+ *
+ * Copyright (C) 2009 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the named License,
+ * or any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
+ *
+ * Author:  Tim Yao <timyao@amlogic.com>
+ *
+ */
+
+#ifndef TVREGS_H
+#define TVREGS_H
+#include <mach/register.h>
+#define MREG_END_MARKER 0xffff
+
+
+	#define VIDEO_CLOCK_HD_25	0x00101529
+	#define VIDEO_CLOCK_SD_25	0x00500a6c
+	#define VIDEO_CLOCK_HD_24	0x00140863
+	#define VIDEO_CLOCK_SD_24	0x0050042d
+
+
+typedef struct reg_s {
+    uint reg;
+    uint val;
+} reg_t;
+
+typedef struct tvinfo_s {
+    uint xres;
+    uint yres;
+    const char *id;
+} tvinfo_t;
+/*
+24M
+25M
+*/
+static const  reg_t tvreg_vclk_sd[]={
+	{HHI_VID_PLL_CNTL,VIDEO_CLOCK_SD_24},//SD.24
+    {HHI_VID_PLL_CNTL,VIDEO_CLOCK_SD_25},//SD,25
+};
+
+static const  reg_t tvreg_vclk_hd[]={
+    {HHI_VID_PLL_CNTL,VIDEO_CLOCK_HD_24},//HD,24
+    {HHI_VID_PLL_CNTL,VIDEO_CLOCK_HD_25},//HD,25
+};
+
+static const  reg_t tvregs_720p[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+
+    {HHI_VID_CLK_CNTL,           0x0,},
+
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+     {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {HHI_HDMI_AFC_CNTL,          0x8c0000c3},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x4040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {ENCP_VIDEO_YFP1_HTIME,      648,   },
+    {ENCP_VIDEO_YFP2_HTIME,      3207,  },
+    {ENCP_VIDEO_MAX_PXCNT,       3299,  },
+    {ENCP_VIDEO_HSPULS_BEGIN,    80,    },
+    {ENCP_VIDEO_HSPULS_END,      240,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    688,   },
+    {ENCP_VIDEO_VSPULS_END,      3248,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    4,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    8,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    4,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    8,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     648,   },
+    {ENCP_VIDEO_HAVON_END,       3207,  },
+    {ENCP_VIDEO_VAVON_BLINE,     29,    },
+    {ENCP_VIDEO_VAVON_ELINE,     748,   },
+    {ENCP_VIDEO_HSO_BEGIN,       256    },
+    {ENCP_VIDEO_HSO_END,         168,   },
+    {ENCP_VIDEO_VSO_BEGIN,       168,   },
+    {ENCP_VIDEO_VSO_END,         256,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {ENCP_VIDEO_MAX_LNCNT,       749,   },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VENC_UPSAMPLE_CTRL0,        0x9061,},
+    {VENC_UPSAMPLE_CTRL1,        0xa061,},
+    {VENC_UPSAMPLE_CTRL2,        0xb061,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {ENCP_VIDEO_EN,              1,     },
+    {ENCI_VIDEO_EN,              0,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const  reg_t tvregs_720p_50hz[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+
+    {VENC_DVI_SETTING,           0x202d,},
+    {ENCP_VIDEO_MAX_PXCNT,       3959,  },
+    {ENCP_VIDEO_MAX_LNCNT,       749,   },
+
+     //analog vidoe position in horizontal
+    {ENCP_VIDEO_HSPULS_BEGIN,    80,    },
+    {ENCP_VIDEO_HSPULS_END,      240,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+
+    //DE position in horizontal
+    {ENCP_VIDEO_HAVON_BEGIN,     648,   },
+    {ENCP_VIDEO_HAVON_END,       3207,  },
+
+    //ditital hsync positon in horizontal
+    {ENCP_VIDEO_HSO_BEGIN,       128 ,},
+    {ENCP_VIDEO_HSO_END,         208 , },
+
+    /* vsync horizontal timing */
+    {ENCP_VIDEO_VSPULS_BEGIN,    688,   },
+    {ENCP_VIDEO_VSPULS_END,      3248,  },
+
+    /* vertical timing settings */
+    {ENCP_VIDEO_VSPULS_BLINE,    4,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    8,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    4,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    8,     },
+
+    //DE position in vertical
+    {ENCP_VIDEO_VAVON_BLINE,     29,    },
+    {ENCP_VIDEO_VAVON_ELINE,     748,   },
+
+    //adjust the vsync start point and end point
+    {ENCP_VIDEO_VSO_BEGIN,       128,},  //168,   },
+    {ENCP_VIDEO_VSO_END,         128, },  //256,   },
+
+    //adjust the vsync start line and end line
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    /* filter & misc settings */
+    {ENCP_VIDEO_YFP1_HTIME,      648,   },
+    {ENCP_VIDEO_YFP2_HTIME,      3207,  },
+
+
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {ENCP_VIDEO_MODE,            0x4040,},  //Enable Hsync and equalization pulse switch in center
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},//bit6:swap PbPr; bit4:YPBPR gain as HDTV type;
+                                                 //bit3:Data input from VFIFO;bit[2}0]:repreat pixel a time
+
+     {ENCP_VIDEO_SYNC_MODE,       0x407,  },//Video input Synchronization mode ( bit[7:0] -- 4:Slave mode, 7:Master mode)
+                                                 //bit[15:6] -- adjust the vsync vertical position
+    {ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {ENCP_VIDEO_EN,              1,     },
+    {ENCI_VIDEO_EN,              0,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_480i[] = {
+    {VENC_VDAC_SETTING,            0xff,  },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,              0x12,},
+    {ENCI_CFILT_CTRL2,              0x12,},
+    {VENC_DVI_SETTING,             0,     },
+    {ENCI_VIDEO_MODE,              0,     },
+    {ENCI_VIDEO_MODE_ADV,          0,     },
+    {ENCI_SYNC_HSO_BEGIN,          5,     },
+    {ENCI_SYNC_HSO_END,            129,   },
+    {ENCI_SYNC_VSO_EVNLN,          0x0003 },
+    {ENCI_SYNC_VSO_ODDLN,          0x0104 },
+    {ENCI_MACV_MAX_AMP,            0x810b },
+    {VENC_VIDEO_PROG_MODE,         0xf0   },
+    {ENCI_VIDEO_MODE,              0x08   },
+    {ENCI_VIDEO_MODE_ADV,          0x26,  },
+    {ENCI_VIDEO_SCH,               0x20,  },
+    {ENCI_SYNC_MODE,               0x07,  },
+    {ENCI_YC_DELAY,                0x353, },
+    {ENCI_VFIFO2VD_PIXEL_START,    0xf3,  },
+    {ENCI_VFIFO2VD_PIXEL_END,      0x0693,},
+    {ENCI_VFIFO2VD_LINE_TOP_START, 0x12,  },
+    {ENCI_VFIFO2VD_LINE_TOP_END,   0x102, },
+    {ENCI_VFIFO2VD_LINE_BOT_START, 0x13,  },
+    {ENCI_VFIFO2VD_LINE_BOT_END,   0x103, },
+    {VENC_SYNC_ROUTE,              0,     },
+    {ENCI_DBG_PX_RST,              0,     },
+    {VENC_INTCTRL,                 0x2,   },
+    {ENCI_VFIFO2VD_CTL,            0x4e01,},
+    {VENC_VDAC_SETTING,            0,     },
+    {VENC_UPSAMPLE_CTRL0,          0x0061,},
+    {VENC_UPSAMPLE_CTRL1,          0x4061,},
+    {VENC_UPSAMPLE_CTRL2,          0x5061,},
+    {VENC_VDAC_DACSEL0,            0x0000,},
+    {VENC_VDAC_DACSEL1,            0x0000,},
+    {VENC_VDAC_DACSEL2,            0x0000,},
+    {VENC_VDAC_DACSEL3,            0x0000,},
+    {VENC_VDAC_DACSEL4,            0x0000,},
+    {VENC_VDAC_DACSEL5,            0x0000,},
+    {VPU_VIU_VENC_MUX_CTRL,        0x0005,},
+    {VENC_VDAC_FIFO_CTRL,          0x2000,},
+    {ENCI_DACSEL_0,                0x6405 },
+    {ENCI_DACSEL_1,                0x87   },
+    {ENCP_VIDEO_EN,                0,     },
+    {ENCI_VIDEO_EN,                1,     },
+    {MREG_END_MARKER,              0      }
+};
+
+static const reg_t tvregs_480cvbs[] = {
+     {VENC_VDAC_SETTING,            0xff,  },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,              0x12,},
+    {ENCI_CFILT_CTRL2,              0x12,},
+    {VENC_DVI_SETTING,             0,     },
+    {ENCI_VIDEO_MODE,              0,     },
+    {ENCI_VIDEO_MODE_ADV,          0,     },
+    {ENCI_SYNC_HSO_BEGIN,          5,     },
+    {ENCI_SYNC_HSO_END,            129,   },
+    {ENCI_SYNC_VSO_EVNLN,          0x0003 },
+    {ENCI_SYNC_VSO_ODDLN,          0x0104 },
+    {ENCI_MACV_MAX_AMP,            0x810b },
+    {VENC_VIDEO_PROG_MODE,         0xf0   },
+    {ENCI_VIDEO_MODE,              0x08   },
+    {ENCI_VIDEO_MODE_ADV,          0x26,  },
+    {ENCI_VIDEO_SCH,               0x20,  },
+    {ENCI_SYNC_MODE,               0x07,  },
+    {ENCI_YC_DELAY,                0x353, },
+    {ENCI_VFIFO2VD_PIXEL_START,    0xf3,  },
+    {ENCI_VFIFO2VD_PIXEL_END,      0x0693,},
+    {ENCI_VFIFO2VD_LINE_TOP_START, 0x12,  },
+    {ENCI_VFIFO2VD_LINE_TOP_END,   0x102, },
+    {ENCI_VFIFO2VD_LINE_BOT_START, 0x13,  },
+    {ENCI_VFIFO2VD_LINE_BOT_END,   0x103, },
+    {VENC_SYNC_ROUTE,              0,     },
+    {ENCI_DBG_PX_RST,              0,     },
+    {VENC_INTCTRL,                 0x2,   },
+    {ENCI_VFIFO2VD_CTL,            0x4e01,},
+    {VENC_VDAC_SETTING,            0,     },
+    {VENC_UPSAMPLE_CTRL0,          0x0061,},
+    {VENC_UPSAMPLE_CTRL1,          0x4061,},
+    {VENC_UPSAMPLE_CTRL2,          0x5061,},
+    {VENC_VDAC_DACSEL0,            0x0000,},
+    {VENC_VDAC_DACSEL1,            0x0000,},
+    {VENC_VDAC_DACSEL2,            0x0000,},
+    {VENC_VDAC_DACSEL3,            0x0000,},
+    {VENC_VDAC_DACSEL4,            0x0000,},
+    {VENC_VDAC_DACSEL5,            0x0000,},
+    {VPU_VIU_VENC_MUX_CTRL,        0x0005,},
+    {VENC_VDAC_FIFO_CTRL,          0x2000,},
+    {ENCI_DACSEL_0,                0x1111 },
+    {ENCI_DACSEL_1,                0x11   },
+    {ENCP_VIDEO_EN,                0,     },
+    {ENCI_VIDEO_EN,                1,     },
+    {MREG_END_MARKER,              0      }
+};
+
+static const reg_t tvregs_480p[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    //{HHI_VID_CLK_DIV,            0x01000100,},
+    {ENCP_VIDEO_FILT_CTRL,       0x2052,},
+    {VENC_DVI_SETTING,           0x21,  },
+    {ENCP_VIDEO_MODE,            0x4000,},
+    {ENCP_VIDEO_MODE_ADV,        9,     },
+    {ENCP_VIDEO_YFP1_HTIME,      244,   },
+    {ENCP_VIDEO_YFP2_HTIME,      1630,  },
+    {ENCP_VIDEO_YC_DLY,          0,     },
+    {ENCP_VIDEO_MAX_PXCNT,       1715,  },
+    {ENCP_VIDEO_MAX_LNCNT,       524,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0x22,  },
+    {ENCP_VIDEO_HSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0,     },
+    {ENCP_VIDEO_VSPULS_END,      1589   },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     249,   },
+    {ENCP_VIDEO_HAVON_END,       1689,  },
+    {ENCP_VIDEO_VAVON_BLINE,     42,    },
+    {ENCP_VIDEO_VAVON_ELINE,     521,   },
+    {ENCP_VIDEO_SYNC_MODE,       0x07,  },
+    {VENC_VIDEO_PROG_MODE,       0x0,   },
+    {VENC_VIDEO_EXSRC,           0x0,   },
+    {ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_HSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_VSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },  //added by JZD. Switch Panel to 480p first time, movie video flicks if not set this to 0
+    {ENCP_VIDEO_SY_VAL,          8,     },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VENC_UPSAMPLE_CTRL0,        0x9061,},
+    {VENC_UPSAMPLE_CTRL1,        0xa061,},
+    {VENC_UPSAMPLE_CTRL2,        0xb061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_576i[] = {
+    {VENC_VDAC_SETTING,               0xff,      },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,                 0x12,    },
+    {ENCI_CFILT_CTRL2,                 0x12,    },
+    {VENC_DVI_SETTING,                0,         },
+    {ENCI_VIDEO_MODE,                 0,         },
+    {ENCI_VIDEO_MODE_ADV,             0,         },
+    {ENCI_SYNC_HSO_BEGIN,             3,         },
+    {ENCI_SYNC_HSO_END,               129,       },
+    {ENCI_SYNC_VSO_EVNLN,             0x0003     },
+    {ENCI_SYNC_VSO_ODDLN,             0x0104     },
+    {ENCI_MACV_MAX_AMP,               0x8107     },
+    {VENC_VIDEO_PROG_MODE,            0xff       },
+    {ENCI_VIDEO_MODE,                 0x13       },
+    {ENCI_VIDEO_MODE_ADV,             0x26,      },
+    {ENCI_VIDEO_SCH,                  0x28,      },
+    {ENCI_SYNC_MODE,                  0x07,      },
+    {ENCI_YC_DELAY,                   0x353,     },
+    {ENCI_VFIFO2VD_PIXEL_START,       0x010b     },
+    {ENCI_VFIFO2VD_PIXEL_END,         0x06ab     },
+    {ENCI_VFIFO2VD_LINE_TOP_START,    0x0016     },
+    {ENCI_VFIFO2VD_LINE_TOP_END,      0x0136     },
+    {ENCI_VFIFO2VD_LINE_BOT_START,    0x0017     },
+    {ENCI_VFIFO2VD_LINE_BOT_END,      0x0137     },
+    {VENC_SYNC_ROUTE,                 0,         },
+    {ENCI_DBG_PX_RST,                 0,         },
+    {VENC_INTCTRL,                    0x2,       },
+    {ENCI_VFIFO2VD_CTL,               0x4e01,    },
+    {VENC_VDAC_SETTING,               0,         },
+    {VENC_UPSAMPLE_CTRL0,             0x0061,    },
+    {VENC_UPSAMPLE_CTRL1,             0x4061,    },
+    {VENC_UPSAMPLE_CTRL2,             0x5061,    },
+    {VENC_VDAC_DACSEL0,               0x0000,    },
+    {VENC_VDAC_DACSEL1,               0x0000,    },
+    {VENC_VDAC_DACSEL2,               0x0000,    },
+    {VENC_VDAC_DACSEL3,               0x0000,    },
+    {VENC_VDAC_DACSEL4,               0x0000,    },
+    {VENC_VDAC_DACSEL5,               0x0000,    },
+    {VPU_VIU_VENC_MUX_CTRL,           0x0005,    },
+    {VENC_VDAC_FIFO_CTRL,             0x2000,    },
+    {ENCI_DACSEL_0,                   0x6405     },
+    {ENCI_DACSEL_1,                   0x87       },
+    {ENCP_VIDEO_EN,                   0,         },
+    {ENCI_VIDEO_EN,                   1,         },
+    {MREG_END_MARKER,                 0          }
+};
+
+static const reg_t tvregs_576cvbs[] = {
+{VENC_VDAC_SETTING,               0xff,      },
+
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCI_CFILT_CTRL,                 0x12,    },
+    {ENCI_CFILT_CTRL2,                 0x12,    },
+    {VENC_DVI_SETTING,                0,         },
+    {ENCI_VIDEO_MODE,                 0,         },
+    {ENCI_VIDEO_MODE_ADV,             0,         },
+    {ENCI_SYNC_HSO_BEGIN,             3,         },
+    {ENCI_SYNC_HSO_END,               129,       },
+    {ENCI_SYNC_VSO_EVNLN,             0x0003     },
+    {ENCI_SYNC_VSO_ODDLN,             0x0104     },
+    {ENCI_MACV_MAX_AMP,               0x8107     },
+    {VENC_VIDEO_PROG_MODE,            0xff       },
+    {ENCI_VIDEO_MODE,                 0x13       },
+    {ENCI_VIDEO_MODE_ADV,             0x26,      },
+    {ENCI_VIDEO_SCH,                  0x28,      },
+    {ENCI_SYNC_MODE,                  0x07,      },
+    {ENCI_YC_DELAY,                   0x353,     },
+    {ENCI_VFIFO2VD_PIXEL_START,       0x010b     },
+    {ENCI_VFIFO2VD_PIXEL_END,         0x06ab     },
+    {ENCI_VFIFO2VD_LINE_TOP_START,    0x0016     },
+    {ENCI_VFIFO2VD_LINE_TOP_END,      0x0136     },
+    {ENCI_VFIFO2VD_LINE_BOT_START,    0x0017     },
+    {ENCI_VFIFO2VD_LINE_BOT_END,      0x0137     },
+    {VENC_SYNC_ROUTE,                 0,         },
+    {ENCI_DBG_PX_RST,                 0,         },
+    {VENC_INTCTRL,                    0x2,       },
+    {ENCI_VFIFO2VD_CTL,               0x4e01,    },
+    {VENC_VDAC_SETTING,               0,         },
+    {VENC_UPSAMPLE_CTRL0,             0x0061,    },
+    {VENC_UPSAMPLE_CTRL1,             0x4061,    },
+    {VENC_UPSAMPLE_CTRL2,             0x5061,    },
+    {VENC_VDAC_DACSEL0,               0x0000,    },
+    {VENC_VDAC_DACSEL1,               0x0000,    },
+    {VENC_VDAC_DACSEL2,               0x0000,    },
+    {VENC_VDAC_DACSEL3,               0x0000,    },
+    {VENC_VDAC_DACSEL4,               0x0000,    },
+    {VENC_VDAC_DACSEL5,               0x0000,    },
+    {VPU_VIU_VENC_MUX_CTRL,           0x0005,    },
+    {VENC_VDAC_FIFO_CTRL,             0x2000,    },
+    {ENCI_DACSEL_0,                   0x1111     },
+    {ENCI_DACSEL_1,                   0x11       },
+    {ENCP_VIDEO_EN,                   0,         },
+    {ENCI_VIDEO_EN,                   1,         },
+    {MREG_END_MARKER,                 0          }
+};
+
+static const reg_t tvregs_576p[] = {
+    {VENC_VDAC_SETTING,          0xff,      },
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042d,},
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {HHI_HDMI_AFC_CNTL,          0x8c0000c3,},
+    {ENCP_VIDEO_FILT_CTRL,       0x52,      },
+    {VENC_DVI_SETTING,           0x21,      },
+    {ENCP_VIDEO_MODE,            0x4000,    },
+    {ENCP_VIDEO_MODE_ADV,        9,         },
+    {ENCP_VIDEO_YFP1_HTIME,      235,       },
+    {ENCP_VIDEO_YFP2_HTIME,      1674,      },
+    {ENCP_VIDEO_YC_DLY,          0xf,       },
+    {ENCP_VIDEO_MAX_PXCNT,       1727,      },
+    {ENCP_VIDEO_MAX_LNCNT,       624,       },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,         },
+    {ENCP_VIDEO_HSPULS_END,      0x80,      },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,        },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0,         },
+    {ENCP_VIDEO_VSPULS_END,      1599       },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,         },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,         },
+    {ENCP_VIDEO_HAVON_BEGIN,     235,       },
+    {ENCP_VIDEO_HAVON_END,       1674,      },
+    {ENCP_VIDEO_VAVON_BLINE,     44,        },
+    {ENCP_VIDEO_VAVON_ELINE,     619,       },
+    {ENCP_VIDEO_SYNC_MODE,       0x07,      },
+    {VENC_VIDEO_PROG_MODE,       0x0,       },
+    {VENC_VIDEO_EXSRC,           0x0,       },
+    {ENCP_VIDEO_HSO_BEGIN,       0x80,      },
+    {ENCP_VIDEO_HSO_END,         0x0,       },
+    {ENCP_VIDEO_VSO_BEGIN,       0x0,       },
+    {ENCP_VIDEO_VSO_END,         0x5,       },
+    {ENCP_VIDEO_VSO_BLINE,       0,         },
+    {ENCP_VIDEO_SY_VAL,          8,         },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8,     },
+    {VENC_SYNC_ROUTE,            0,         },
+    {VENC_INTCTRL,               0x200,     },
+    {VFIFO2VD_CTL,               0,         },
+    {VENC_VDAC_SETTING,          0,         },
+    {VENC_UPSAMPLE_CTRL0,        0x9061,    },
+    {VENC_UPSAMPLE_CTRL1,        0xa061,    },
+    {VENC_UPSAMPLE_CTRL2,        0xb061,    },
+    {VENC_VDAC_DACSEL0,          0xf003,    },
+    {VENC_VDAC_DACSEL1,          0xf003,    },
+    {VENC_VDAC_DACSEL2,          0xf003,    },
+    {VENC_VDAC_DACSEL3,          0xf003,    },
+    {VENC_VDAC_DACSEL4,          0xf003,    },
+    {VENC_VDAC_DACSEL5,          0xf003,    },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,    },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,    },
+    {ENCP_DACSEL_0,              0x3102,    },
+    {ENCP_DACSEL_1,              0x0054,    },
+    {ENCI_VIDEO_EN,              0          },
+    {ENCP_VIDEO_EN,              1          },
+    {MREG_END_MARKER,            0          }
+};
+
+static const reg_t tvregs_1080i[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+//	{VCLK_HD},
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MAX_PXCNT,       4399,  },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    {ENCP_VIDEO_HSPULS_BEGIN,    88,    },
+    {ENCP_VIDEO_HSPULS_END,      264,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {ENCP_VIDEO_HAVON_BEGIN,     516,   },
+    {ENCP_VIDEO_HAVON_END,       4355,  },
+    {ENCP_VIDEO_HSO_BEGIN,       264,   },
+    {ENCP_VIDEO_HSO_END,         176,   },
+    {ENCP_VIDEO_EQPULS_BEGIN,    2288,  },
+    {ENCP_VIDEO_EQPULS_END,      2464,  },
+    {ENCP_VIDEO_VSPULS_BEGIN,    440,   },
+    {ENCP_VIDEO_VSPULS_END,      2200,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    4,     },
+    {ENCP_VIDEO_VAVON_BLINE,     20,    },
+    {ENCP_VIDEO_VAVON_ELINE,     559,   },
+    {ENCP_VIDEO_VSO_BEGIN,       88,    },
+    {ENCP_VIDEO_VSO_END,         88,    },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {ENCP_VIDEO_YFP1_HTIME,      516,   },
+    {ENCP_VIDEO_YFP2_HTIME,      4355,  },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {ENCP_VIDEO_OFLD_VOAV_OFST,  0x11   },
+    {ENCP_VIDEO_MODE,            0x5ffc,},
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {ENCP_VIDEO_SYNC_MODE,       0x207, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {VENC_VDAC_SETTING,          0,     },
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080i_50hz[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+//	{VCLK_HD},
+	    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+
+    {VENC_DVI_SETTING,           0x202d,},
+    {ENCP_VIDEO_MAX_PXCNT,       5279,  },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+
+    //analog vidoe position in horizontal
+    {ENCP_VIDEO_HSPULS_BEGIN,    88,    },
+    {ENCP_VIDEO_HSPULS_END,      264,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+
+    //DE position in horizontal
+    {ENCP_VIDEO_HAVON_BEGIN,     526,   },
+    {ENCP_VIDEO_HAVON_END,       4365,  },
+
+    //ditital hsync positon in horizontal
+    {ENCP_VIDEO_HSO_BEGIN,       142,   },
+    {ENCP_VIDEO_HSO_END,         230,   },
+
+    /* vsync horizontal timing */
+    {ENCP_VIDEO_EQPULS_BEGIN,    2728,  },
+    {ENCP_VIDEO_EQPULS_END,      2904,  },
+    {ENCP_VIDEO_VSPULS_BEGIN,    440,   },
+    {ENCP_VIDEO_VSPULS_END,      2200,  },
+
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    4,     },
+
+    //DE position in vertical
+    {ENCP_VIDEO_VAVON_BLINE,     20,    },
+    {ENCP_VIDEO_VAVON_ELINE,     559,   },
+
+    //adjust vsync start point and end point
+    {ENCP_VIDEO_VSO_BEGIN,       142,    },
+    {ENCP_VIDEO_VSO_END,         142,    },
+
+    //adjust the vsync start line and end line
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    /* filter & misc settings */
+    {ENCP_VIDEO_YFP1_HTIME,      526,   },
+    {ENCP_VIDEO_YFP2_HTIME,      4365,  },
+
+    {VENC_VIDEO_PROG_MODE,       0x100, },  // Select clk108 as DAC clock, progressive mode
+    {ENCP_VIDEO_OFLD_VOAV_OFST,  0x11   },//bit[15:12]: Odd field VSO  offset begin,
+                                                        //bit[11:8]: Odd field VSO  offset end,
+                                                        //bit[7:4]: Odd field VAVON offset begin,
+                                                        //bit[3:0]: Odd field VAVON offset end,
+    {ENCP_VIDEO_MODE,            0x5ffc,},//Enable Hsync and equalization pulse switch in center
+    {ENCP_VIDEO_MODE_ADV,        0x0019,}, //bit6:swap PbPr; bit4:YPBPR gain as HDTV type;
+                                                 //bit3:Data input from VFIFO;bit[2}0]:repreat pixel a time
+    {ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {VENC_VDAC_SETTING,          0,     },
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080p[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+
+     {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+     {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+
+
+    {ENCP_VIDEO_FILT_CTRL,       0x1052,},
+    {VENC_DVI_SETTING,           0x0001,},
+    {ENCP_VIDEO_MODE,            0x4040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0018,},
+    {ENCP_VIDEO_YFP1_HTIME,      140,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2060,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2199,  },
+    {ENCP_VIDEO_HSPULS_BEGIN,    2156,  },//1980
+    {ENCP_VIDEO_HSPULS_END,      44,    },
+    {ENCP_VIDEO_HSPULS_SWITCH,   44,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    140,   },
+    {ENCP_VIDEO_VSPULS_END,      2059,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
+    {ENCP_VIDEO_HAVON_BEGIN,     148,   },
+    {ENCP_VIDEO_HAVON_END,       2067,  },
+    {ENCP_VIDEO_VAVON_BLINE,     41,    },
+    {ENCP_VIDEO_VAVON_ELINE,     1120,  },
+    {ENCP_VIDEO_HSO_BEGIN,       44,    },
+    {ENCP_VIDEO_HSO_END,         2156,  },
+    {ENCP_VIDEO_VSO_BEGIN,       2100,  },
+    {ENCP_VIDEO_VSO_END,         2164,  },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},      //New Add. If not set, when system boots up, switch panel to HDMI 1080P, nothing on TV.
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+
+static const reg_t tvregs_1080p_50hz[] = {
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x1052,},
+
+    // bit 13    1          (delayed prog_vs)
+    // bit 5:4:  2          (pixel[0])
+    // bit 3:    1          invert vsync or not
+    // bit 2:    1          invert hsync or not
+    // bit1:     1          (select viu sync)
+    // bit0:     1          (progressive)
+    {VENC_DVI_SETTING,           0x000d,},
+    {ENCP_VIDEO_MAX_PXCNT,       2639,  },
+    {ENCP_VIDEO_MAX_LNCNT,       1124,  },
+    /* horizontal timing settings */
+    {ENCP_VIDEO_HSPULS_BEGIN,    44,  },//1980
+    {ENCP_VIDEO_HSPULS_END,      132,    },
+    {ENCP_VIDEO_HSPULS_SWITCH,   44,    },
+
+    //DE position in horizontal
+    {ENCP_VIDEO_HAVON_BEGIN,     271,   },
+    {ENCP_VIDEO_HAVON_END,       2190,  },
+
+    //ditital hsync positon in horizontal
+    {ENCP_VIDEO_HSO_BEGIN,       79 ,    },
+    {ENCP_VIDEO_HSO_END,         123,  },
+
+    /* vsync horizontal timing */
+    {ENCP_VIDEO_VSPULS_BEGIN,    220,   },
+    {ENCP_VIDEO_VSPULS_END,      2140,  },
+
+    /* vertical timing settings */
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    4,     },//35
+    {ENCP_VIDEO_VAVON_BLINE,     41,    },
+    {ENCP_VIDEO_VAVON_ELINE,     1120,  },
+
+    //adjust the hsync & vsync start point and end point
+    {ENCP_VIDEO_VSO_BEGIN,       79,  },
+    {ENCP_VIDEO_VSO_END,         79,  },
+
+    //adjust the vsync start line and end line
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+
+    {ENCP_VIDEO_YFP1_HTIME,      271,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2190,  },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0018,},
+
+    {ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
+
+    {ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
+
+    {ENCP_VIDEO_RGB_CTRL, 2,},       // enable sync on B
+
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_FIFO_CTRL,        0x1000,},
+    {VENC_VDAC_SETTING,          0,     },
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {ENCP_DACSEL_0,              0x3102,},
+    {ENCP_DACSEL_1,              0x0054,},
+    {VENC_VDAC_DACSEL0,          0x0001,},
+    {VENC_VDAC_DACSEL1,          0x0001,},
+    {VENC_VDAC_DACSEL2,          0x0001,},
+    {VENC_VDAC_DACSEL3,          0x0001,},
+    {VENC_VDAC_DACSEL4,          0x0001,},
+    {VENC_VDAC_DACSEL5,          0x0001,},
+    {ENCI_VIDEO_EN,              0,     },
+    {ENCP_VIDEO_EN,              1,     },
+    {MREG_END_MARKER,            0      }
+};
+static const reg_t tvregs_vga_640x480[] = { // 25.17mhz 800 *525
+     {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,       },
+    {HHI_VID_PLL_CNTL,           0x2001042d,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928,},
+    {HHI_VID_PLL_CNTL3,          0x6b425012,    },
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001042a,},//50
+
+    {HHI_VID_DIVIDER_CNTL,       0x00011943,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x1052,},
+    //{HHI_VID_CLK_DIV,            0x01000100,},
+    {ENCP_VIDEO_FILT_CTRL,       0x2052,},
+    {VENC_DVI_SETTING,           0x21,  },
+    {ENCP_VIDEO_MODE,            0,     },
+    {ENCP_VIDEO_MODE_ADV,        0x009,     },
+    {ENCP_VIDEO_YFP1_HTIME,      244,   },
+    {ENCP_VIDEO_YFP2_HTIME,      1630,  },
+    {ENCP_VIDEO_YC_DLY,          0,     },
+    {ENCP_VIDEO_MAX_PXCNT,       1599,  },
+    {ENCP_VIDEO_MAX_LNCNT,       525,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0x60,  },
+    {ENCP_VIDEO_HSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_HSPULS_SWITCH,   88,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0,     },
+    {ENCP_VIDEO_VSPULS_END,      1589   },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     153,   },
+    {ENCP_VIDEO_HAVON_END,       1433,  },
+    {ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {ENCP_VIDEO_VAVON_ELINE,     540,   },
+    {ENCP_VIDEO_SYNC_MODE,       0x07,  },
+    {VENC_VIDEO_PROG_MODE,       0x100,   },
+    {VENC_VIDEO_EXSRC,           0x0,   },
+    {ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_HSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_VSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_SY_VAL,          8,     },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    /////////////////////////////
+    {ENCP_VIDEO_RGB_CTRL,		 0,},
+    {VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {ENCP_DACSEL_0,              0x0543,},
+    {ENCP_DACSEL_1,              0x0000,},
+
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+/////////////////////////////////////
+};
+static const reg_t tvregs_svga_800x600[]={ //39.5mhz 1056 *628
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x00010422,},//79
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0019,},
+    {ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2112,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2111,  },
+    {ENCP_VIDEO_MAX_LNCNT,       628,   },//628
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {ENCP_VIDEO_HSPULS_END,      230,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0x58,   },
+    {ENCP_VIDEO_VSPULS_END,      0x80,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     267,   },//59
+    {ENCP_VIDEO_HAVON_END,       1866,  },//1659
+    {ENCP_VIDEO_VAVON_BLINE,    59,    },//59
+    {ENCP_VIDEO_VAVON_ELINE,     658,   },//659
+    {ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {ENCP_VIDEO_HSO_END,         260,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {ENCP_VIDEO_VSO_END,         2200,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_VIDEO_EXSRC,           0x0,   },
+    {ENCP_VIDEO_HSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_HSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0x3,   },
+    {ENCP_VIDEO_VSO_END,         0x5,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_SY_VAL,          8,     },
+    {ENCP_VIDEO_SY2_VAL,         0x1d8, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    //////////////////////////
+    {ENCP_VIDEO_RGB_CTRL,		 0,},
+    {VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {ENCP_DACSEL_0,              0x0543,},
+    {ENCP_DACSEL_1,              0x0000,},
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+	//////////////////////////////
+ };
+static const reg_t tvregs_xga_1024x768[] = {
+   /* {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x0001043e,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0009,},
+    {ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2500,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2531,  },
+    {ENCP_VIDEO_MAX_LNCNT,       804,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {ENCP_VIDEO_HSPULS_END,      230,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0x22,   },
+    {ENCP_VIDEO_VSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     59,   },
+    {ENCP_VIDEO_HAVON_END,       2106,  },
+    {ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {ENCP_VIDEO_VAVON_ELINE,     827,   },//827
+    {ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {ENCP_VIDEO_HSO_END,         260,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {ENCP_VIDEO_VSO_END,         2200,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },*/
+    {VENC_VDAC_SETTING,          0xff,  },
+    {HHI_VID_CLK_CNTL,           0x0,},
+    {HHI_VID_PLL_CNTL2,          0x814d3928},
+    {HHI_VID_PLL_CNTL3,          0x6b425012},
+    {HHI_VID_PLL_CNTL4,          0x110},
+    {HHI_VID_PLL_CNTL,           0x00010436,},
+    {HHI_VID_DIVIDER_CNTL,       0x00010843,},
+    {HHI_VID_CLK_DIV,            0x100},
+    {HHI_VID_CLK_CNTL,           0x80000,},
+    {HHI_VID_CLK_CNTL,           0x88001,},
+    {HHI_VID_CLK_CNTL,           0x80003,},
+    {HHI_VIID_CLK_DIV,           0x00000101,},
+    {ENCP_VIDEO_FILT_CTRL,       0x0052,},
+    {VENC_DVI_SETTING,           0x2029,},
+    {ENCP_VIDEO_MODE,            0x0040,},
+    {ENCP_VIDEO_MODE_ADV,        0x0009,},
+    {ENCP_VIDEO_YFP1_HTIME,      500,   },
+    {ENCP_VIDEO_YFP2_HTIME,      2500,  },
+    {ENCP_VIDEO_MAX_PXCNT,       2691,  },
+    {ENCP_VIDEO_MAX_LNCNT,       806,   },
+    {ENCP_VIDEO_HSPULS_BEGIN,    0,    },
+    {ENCP_VIDEO_HSPULS_END,      230,   },
+    {ENCP_VIDEO_HSPULS_SWITCH,   80,    },
+    {ENCP_VIDEO_VSPULS_BEGIN,    0x22,   },
+    {ENCP_VIDEO_VSPULS_END,      0xa0,  },
+    {ENCP_VIDEO_VSPULS_BLINE,    0,     },
+    {ENCP_VIDEO_VSPULS_ELINE,    5,     },
+    {ENCP_VIDEO_EQPULS_BLINE,    0,     },
+    {ENCP_VIDEO_EQPULS_ELINE,    5,     },
+    {ENCP_VIDEO_HAVON_BEGIN,     315,   },
+    {ENCP_VIDEO_HAVON_END,       2362,  },
+    {ENCP_VIDEO_VAVON_BLINE,     59,    },
+    {ENCP_VIDEO_VAVON_ELINE,     827,   },//827
+    {ENCP_VIDEO_HSO_BEGIN,       0,    },
+    {ENCP_VIDEO_HSO_END,         260,   },
+    {ENCP_VIDEO_VSO_BEGIN,       0,   },
+    {ENCP_VIDEO_VSO_END,         2200,   },
+    {ENCP_VIDEO_VSO_BLINE,       0,     },
+    {ENCP_VIDEO_VSO_ELINE,       5,     },
+    {VENC_VIDEO_PROG_MODE,       0x100, },
+    {VENC_SYNC_ROUTE,            0,     },
+    {VENC_INTCTRL,               0x200, },
+    {VFIFO2VD_CTL,               0,     },
+    {VENC_VDAC_SETTING,          0,     },
+    ////////////////////////
+    {ENCP_VIDEO_RGB_CTRL,		 0,},
+    {VENC_UPSAMPLE_CTRL0,        0xc061,},
+    {VENC_UPSAMPLE_CTRL1,        0xd061,},
+    {VENC_UPSAMPLE_CTRL2,        0xe061,},
+    {VENC_VDAC_DACSEL0,          0xf003,},
+    {VENC_VDAC_DACSEL1,          0xf003,},
+    {VENC_VDAC_DACSEL2,          0xf003,},
+    {VENC_VDAC_DACSEL3,          0xf003,},
+    {VENC_VDAC_DACSEL4,          0xf003,},
+    {VENC_VDAC_DACSEL5,          0xf003,},
+    {VPU_VIU_VENC_MUX_CTRL,      0x000a,},
+    {VENC_VDAC_FIFO_CTRL,        0x1fc0,},
+    {ENCP_DACSEL_0,              0x0543,},
+    {ENCP_DACSEL_1,              0x0000,},
+    {ENCI_VIDEO_EN,              0      },
+    {ENCP_VIDEO_EN,              1      },
+    {MREG_END_MARKER,            0      }
+	///////////////////////////////////
+
+};
+
+/* The sequence of register tables items must match the enum define in tvmode.h */
+static const reg_t *tvregsTab[] = {
+    tvregs_480i,
+    tvregs_480cvbs,
+    tvregs_480p,
+    tvregs_576i,
+    tvregs_576cvbs,
+    tvregs_576p,
+    tvregs_720p,
+    tvregs_1080i,       //Adjust tvregs_* sequences and match the enum define in tvmode.h
+    tvregs_1080p,
+    tvregs_720p_50hz,
+    tvregs_1080i_50hz,
+    tvregs_1080p_50hz,
+    tvregs_vga_640x480,
+    tvregs_svga_800x600,
+    tvregs_xga_1024x768
+};
+
+static const tvinfo_t tvinfoTab[] = {
+    {.xres =  720, .yres =  480, .id = "480i"},
+    {.xres =  720, .yres =  480, .id = "480cvbs"},
+    {.xres =  720, .yres =  480, .id = "480p"},
+    {.xres =  720, .yres =  576, .id = "576i"},
+    {.xres =  720, .yres =  576, .id = "576cvbs"},
+    {.xres =  720, .yres =  576, .id = "576p"},
+    {.xres = 1280, .yres =  720, .id = "720p"},
+    {.xres = 1920, .yres = 1080, .id = "1080i"},
+    {.xres = 1920, .yres = 1080, .id = "1080p"},
+    {.xres = 1280, .yres =  720, .id = "720p50hz"},
+    {.xres = 1920, .yres = 1080, .id = "1080i50hz"},
+    {.xres = 1920, .yres = 1080, .id = "1080p50hz"},
+    {.xres = 640, .yres = 480, .id = "vga"},
+    {.xres = 800, .yres = 600, .id = "svga"},
+    {.xres = 1024, .yres = 768, .id = "xga"},
+};
+
+static inline void setreg(const reg_t *r)
+{
+    aml_write_reg32(CBUS_REG_ADDR(r->reg), r->val);
+    printk("[0x%x] = 0x%x\n", r->reg, r->val);
+}
+
+#endif /* TVREGS_H */
+
diff --git a/arch/arm/mach-mesong9tv/include/mach/uart.h b/arch/arm/mach-mesong9tv/include/mach/uart.h
new file mode 100644
index 000000000000..8c6242bb12d7
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/uart.h
@@ -0,0 +1,39 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/uart.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_UART_H
+#define __MACH_MESONG9TV_UART_H
+
+#define UART_AO			0
+#define UART_A			1
+#define UART_B			2
+#define UART_C			3
+#define UART_D			4
+#define MESON_UART_PORT_NUM	5
+
+#define MESON_UART_NAME		"uart_ao","uart_a","uart_b","uart_c","uart_d"
+#define MESON_UART_LINE		UART_AO,UART_A,UART_B,UART_C,UART_D
+#define MESON_UART_FIFO		64,128,64,64,64
+
+#define MESON_UART_ADDRS	((void *)P_AO_UART_WFIFO),((void *)P_UART0_WFIFO), \
+				((void *)P_UART1_WFIFO),((void *)P_UART2_WFIFO),   \
+				((void *)P_UART3_WFIFO)
+
+#define MESON_UART_IRQS		INT_UART_AO, INT_UART_0, INT_UART_1, INT_UART_2    \
+				, INT_UART_3
+
+#define MESON_UART_CLK_NAME	"NULL","uart0","uart1","uart2","uart3"
+
+#endif //__MACH_MESONG9TV_UART_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/uncompress.h b/arch/arm/mach-mesong9tv/include/mach/uncompress.h
new file mode 100644
index 000000000000..273be46782ad
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/uncompress.h
@@ -0,0 +1,56 @@
+/*
+ * arch/arm/mach-meson/include/mach/uncompress.h
+ *
+ *  Copyright (C) 2010 AMLOGIC, INC.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#define UART0_RFIFO     (*(volatile unsigned int *)0xc11084c0)
+#define UART0_WFIFO     (*(volatile unsigned int *)0xc11084c4)
+#define UART0_CONTROL   (*(volatile unsigned int *)0xc11084c8)
+#define UART0_STATUS    (*(volatile unsigned int *)0xc11084cc)
+
+/*
+ * This does not append a newline
+ */
+static inline void putc(int c)
+{
+    /* wait TX FIFO not full */
+    while (UART0_STATUS & (1 << 21)) {
+        barrier();
+    }
+
+    UART0_WFIFO = c;
+}
+
+static inline void flush(void)
+{
+    /* wait TX FIFO not empty */
+    while ((UART0_STATUS & (1 << 22)) == 0) {
+        barrier();
+    }
+}
+
+static inline void arch_decomp_setup(void)
+{
+    /* 115200 bps at 180M MPEG clock */
+    UART0_CONTROL = 0x185;
+}
+
+/*
+ * nothing to do
+ */
+#define arch_decomp_wdog()
diff --git a/arch/arm/mach-mesong9tv/include/mach/usbclock.h b/arch/arm/mach-mesong9tv/include/mach/usbclock.h
new file mode 100644
index 000000000000..07a5a7e3a37e
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/usbclock.h
@@ -0,0 +1,216 @@
+#ifndef __USB_CLK_HEADER_
+#define __USB_CLK_HEADER_
+
+#include <plat/lm.h>
+#include <mach/clock.h>
+typedef struct usb_peri_reg {
+	volatile uint32_t config;
+	volatile uint32_t ctrl;
+	volatile uint32_t endp_intr;
+	volatile uint32_t adp_bc;
+	volatile uint32_t dbg_uart;
+	volatile uint32_t test;
+	volatile uint32_t tune;
+	volatile uint32_t reserved;
+} usb_peri_reg_t;
+
+typedef union usb_config_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+        unsigned clk_en:1;
+        unsigned clk_sel:3;
+        unsigned clk_div:7;
+        unsigned reserved0:4;
+        unsigned clk_32k_alt_sel:1;
+        unsigned reserved1:15;
+        unsigned test_trig:1;
+    } b;
+} usb_config_data_t;
+
+typedef union usb_ctrl_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+        unsigned soft_prst:1;
+        unsigned soft_hreset:1;
+        unsigned ss_scaledown_mode:2;
+        unsigned clk_det_rst:1;
+        unsigned intr_sel:1;
+        unsigned reserved:2;
+        unsigned clk_detected:1;
+        unsigned sof_sent_rcvd_tgl:1;
+        unsigned sof_toggle_out:1;
+        unsigned not_used:4;
+        unsigned por:1;
+        unsigned sleepm:1;
+        unsigned txbitstuffennh:1;
+        unsigned txbitstuffenn:1;
+        unsigned commononn:1;
+        unsigned refclksel:2;
+        unsigned fsel:3;
+        unsigned portreset:1;
+        unsigned thread_id:6;
+    } b;
+} usb_ctrl_data_t;
+
+typedef union usb_endp_intr_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+        unsigned int0:1;
+        unsigned int1:1;
+        unsigned int2:1;
+        unsigned int3:1;
+        unsigned int4:1;
+        unsigned int5:1;
+        unsigned int6:1;
+        unsigned int7:1;
+        unsigned int8:1;
+        unsigned int9:1;
+        unsigned int10:1;
+        unsigned int11:1;
+        unsigned int12:1;
+        unsigned int13:1;
+        unsigned int14:1;
+        unsigned int15:1;
+        unsigned int16:1;
+        unsigned int17:1;
+        unsigned int18:1;
+        unsigned int19:1;
+        unsigned int20:1;
+        unsigned int21:1;
+        unsigned int22:1;
+        unsigned int23:1;
+        unsigned int24:1;
+        unsigned int25:1;
+        unsigned int26:1;
+        unsigned int27:1;
+        unsigned int28:1;
+        unsigned int29:1;
+        unsigned int30:1;
+        unsigned int31:1;
+    } b;
+} usb_endp_intr_data_t;
+
+typedef union usb_adp_bc_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned vbusvldextsel:1;
+	unsigned vbusvldext:1;
+	unsigned otgdisable:1;
+	unsigned idpullup:1;
+	unsigned drvvbus:1;
+	unsigned adp_prb_en:1;
+	unsigned adp_dischrg:1;
+	unsigned adp_chrg:1;
+	unsigned sessend:1;
+	unsigned device_sess_vld:1;
+	unsigned bvalid:1;
+	unsigned avalid:1;
+	unsigned iddig:1;
+	unsigned vbusvalid:1;
+	unsigned adp_probe:1;
+	unsigned adp_sense:1;
+	unsigned aca_enable:1;
+	unsigned dcd_enable:1;
+	unsigned vdatdetenb:1;
+	unsigned vdatsrcenb:1;
+	unsigned chrgsel:1;
+	unsigned chg_det:1;
+	unsigned aca_pin_range_c:1;
+	unsigned aca_pin_range_b:1;
+	unsigned aca_pin_range_a:1;
+	unsigned aca_pin_gnd:1;
+	unsigned aca_pin_float:1;
+	unsigned not_used:5;
+    } b;
+} usb_adp_bc_data_t;
+
+typedef union usb_dbg_uart_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned bypass_sel:1;
+	unsigned bypass_dm_en:1;
+	unsigned bypass_dp_en:1;
+	unsigned bypass_dm_data:1;
+	unsigned bypass_dp_data:1;
+	unsigned fsv_minus:1;
+	unsigned fsv_plus:1;
+	unsigned burn_in_test:1;
+	unsigned loopbackenb:1;
+	unsigned set_iddq:1;
+	unsigned ate_reset:1;
+	unsigned reserved:4;
+	unsigned not_used:17;
+    } b;
+} usb_dbg_uart_data_t;
+
+typedef union phy_test_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned data_in:4;
+	unsigned data_in_en:4;
+	unsigned addr:4;
+	unsigned data_out_sel:1;
+	unsigned clk:1;
+	unsigned vatestenb:2;
+	unsigned data_out:4;
+	unsigned disable_idpull_up:1;
+	unsigned not_used:11;
+    } b;
+} phy_test_data_t;
+
+typedef union phy_tune_data {
+    /** raw register data */
+    uint32_t d32;
+    /** register bits */
+    struct {
+	unsigned tx_res_tune:2;
+	unsigned tx_hsxv_tune:2;
+	unsigned tx_vref_tune:4;
+	unsigned tx_rise_tune:2;
+	unsigned tx_preemp_pulse_tune:1;
+	unsigned tx_preemp_amp_tune:2;
+	unsigned tx_fsls_tune:4;
+	unsigned sqrx_tune:3;
+	unsigned otg_tune:3;
+	unsigned comp_dis_tune:3;
+	unsigned host_dmpulldown:1;
+	unsigned host_dppulldown:1;
+	unsigned not_used:4;
+    } b;
+} phy_tune_data_t;
+
+
+/*
+ * Clock source index must sync with chip's spec
+ * M1/M2/M3/M6 are different!
+ * This is only for M6
+ */
+#define USB_PHY_CLK_SEL_XTAL	0
+#define USB_PHY_CLK_SEL_XTAL_DIV_2	1
+#define USB_PHY_CLK_SEL_DDR_PLL	2
+#define USB_PHY_CLK_SEL_MPLL_0	3
+#define USB_PHY_CLK_SEL_MPLL_1	4
+#define USB_PHY_CLK_SEL_MPLL_2	5
+#define USB_PHY_CLK_SEL_FCLK_DIV_2	6
+#define USB_PHY_CLK_SEL_FCLK_DIV_3	7
+
+#define USB_BC_MODE_DISCONNECT	0	/* Disconnected */
+#define USB_BC_MODE_SDP		1	/* PC */
+#define USB_BC_MODE_DCP		2	/* Charger */
+#define USB_BC_MODE_CDP		3	/* PC + Charger */
+
+int clk_enable_usb(struct clk *clk);
+int clk_disable_usb(struct clk *clk);
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/vpp.h b/arch/arm/mach-mesong9tv/include/mach/vpp.h
new file mode 100644
index 000000000000..3dfcbc1fda82
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/vpp.h
@@ -0,0 +1,77 @@
+/*
+ * arch/arm/mach-meson6tvd/include/mach/vpp.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESON_VPP_REGS_H
+#define __MACH_MESON_VPP_REGS_H
+
+
+// Bit 28   color management enable
+// Bit 27,  if true, vd2 use viu2 output as the input, otherwise use normal vd2 from memory
+// Bit 26:18, vd2 alpha
+// Bit 17, osd2 enable for preblend
+// Bit 16, osd1 enable for preblend
+// Bit 15, vd2 enable for preblend
+// Bit 14, vd1 enable for preblend
+// Bit 13, osd2 enable for postblend
+// Bit 12, osd1 enable for postblend
+// Bit 11, vd2 enable for postblend
+// Bit 10, vd1 enable for postblend
+// Bit 9,  if true, osd1 is alpha premultipiled
+// Bit 8,  if true, osd2 is alpha premultipiled
+// Bit 7,  postblend module enable
+// Bit 6,  preblend module enable
+// Bit 5,  if true, osd2 foreground compared with osd1 in preblend
+// Bit 4,  if true, osd2 foreground compared with osd1 in postblend
+// Bit 3,
+// Bit 2,  if true, disable resetting async fifo every vsync, otherwise every vsync
+//			 the aync fifo will be reseted.
+// Bit 1,
+// Bit 0	if true, the output result of VPP is saturated
+#define VPP_VD2_ALPHA_WID		9
+#define VPP_VD2_ALPHA_MASK		0x1ff
+#define VPP_VD2_ALPHA_BIT		18
+#define VPP_OSD2_PREBLEND		(1 << 17)
+#define VPP_OSD1_PREBLEND		(1 << 16)
+#define VPP_VD2_PREBLEND		(1 << 15)
+#define VPP_VD1_PREBLEND		(1 << 14)
+#define VPP_OSD2_POSTBLEND		(1 << 13)
+#define VPP_OSD1_POSTBLEND		(1 << 12)
+#define VPP_VD2_POSTBLEND		(1 << 11)
+#define VPP_VD1_POSTBLEND		(1 << 10)
+#define VPP_OSD1_ALPHA			(1 << 9)
+#define VPP_OSD2_ALPHA			(1 << 8)
+#define VPP_POSTBLEND_EN		(1 << 7)
+#define VPP_PREBLEND_EN			(1 << 6)
+#define VPP_PRE_FG_SEL_MASK		(1 << 5)
+#define VPP_PRE_FG_OSD2			(1 << 5)
+#define VPP_PRE_FG_OSD1			(0 << 5)
+#define VPP_POST_FG_SEL_MASK		(1 << 4)
+#define VPP_POST_FG_OSD2 		(1 << 4)
+#define VPP_POST_FG_OSD1		(0 << 4)
+#define VPP_FIFO_RESET_DE		(1 << 2)
+#define VPP_OUT_SATURATE		(1 << 0)
+
+
+/*tv relative part*/
+#define VFIFO2VD_CTL			0x1b58
+#define VFIFO2VD_PIXEL_START		0x1b59
+#define VFIFO2VD_PIXEL_END		0x1b5a
+#define VFIFO2VD_LINE_TOP_START		0x1b5b
+#define VFIFO2VD_LINE_TOP_END		0x1b5c
+#define VFIFO2VD_LINE_BOT_START		0x1b5d
+#define VFIFO2VD_LINE_BOT_END		0x1b5e
+
+
+#endif // __MACH_MESON_VPP_REGS_H
diff --git a/arch/arm/mach-mesong9tv/include/mach/vpu.h b/arch/arm/mach-mesong9tv/include/mach/vpu.h
new file mode 100644
index 000000000000..da7185686c9d
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/vpu.h
@@ -0,0 +1,47 @@
+#ifndef __VPU_H__
+#define __VPU_H__
+
+//#define CONFIG_VPU_DYNAMIC_ADJ
+
+#define VPU_MOD_START	100
+typedef enum {
+    VPU_VIU_OSD1 = VPU_MOD_START, //reg0[1:0]
+    VPU_VIU_OSD2,        //reg0[3:2]
+	VPU_VIU_VD1,         //reg0[5:4]
+	VPU_VIU_VD2,         //reg0[7:6]
+	VPU_VIU_CHROMA,      //reg0[9:8]
+	VPU_VIU_OFIFO,       //reg0[11:10]
+	VPU_VIU_SCALE,       //reg0[13:12]
+	VPU_VIU_OSD_SCALE,   //reg0[15:14]
+	VPU_VIU_VDIN0,       //reg0[17:16]
+	VPU_VIU_VDIN1,       //reg0[19:18]
+	VPU_VIU_SRSCL,       //reg0[21:20]
+	VPU_VIU_OSDSR,       //reg0[23:22]
+	VPU_REV,             //reg0[25:24]
+	VPU_DI_PRE,          //reg0[27:26]
+	VPU_DI_POST,         //reg0[29:28]
+	VPU_SHARP,           //reg0[31:30]
+	VPU_D2D3,            //reg1[3:0]
+	VPU_VDIN_AM_ASYNC,   //reg1[15:14]
+	VPU_VDISP_AM_ASYNC,  //reg1[17:16]
+	VPU_VPUARB2_AM_ASYNC,//reg1[19:18]
+	VPU_VENCP,           //reg1[21:20]
+	VPU_VENCL,           //reg1[23:22]
+	VPU_VENCI,           //reg1[25:24]
+	VPU_CVD2,            //reg1[29:28]
+	VPU_ATV_DMD,         //reg1[31:30]
+	VPU_MAX,
+} vpu_mod_t;
+
+//VPU memory power down
+#define VPU_MEM_POWER_ON		0
+#define VPU_MEM_POWER_DOWN		1
+
+extern unsigned int get_vpu_clk(void);
+extern unsigned int get_vpu_clk_vmod(unsigned int vmod);
+extern int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod);
+extern int release_vpu_clk_vmod(unsigned int vmod);
+
+extern void switch_vpu_mem_pd_vmod(unsigned int vmod, int flag);
+extern int get_vpu_mem_pd_vmod(unsigned int vmod);
+#endif
diff --git a/arch/arm/mach-mesong9tv/include/mach/watchdog.h b/arch/arm/mach-mesong9tv/include/mach/watchdog.h
new file mode 100644
index 000000000000..e860dd858a7c
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/include/mach/watchdog.h
@@ -0,0 +1,32 @@
+/*
+ * arch/arm/mach-mesong9tv/include/mach/watchdog.h
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#ifndef __MACH_MESONG9TV_WATCHDOG_H
+#define __MACH_MESONG9TV_WATCHDOG_H
+
+#include <linux/io.h>
+#include <plat/io.h>
+#include <mach/hardware.h>
+#include <mach/register.h>
+
+#define WATCHDOG_ENABLE_BIT		19
+#define WATCHDOG_COUNT_BIT		15
+#define WATCHDOG_COUNT_MASK		((1<<(WATCHDOG_COUNT_BIT+1))-1)
+#define WDT_ONE_SECOND			100000
+
+#define MAX_TIMEOUT			(WATCHDOG_COUNT_MASK/100000)
+#define MIN_TIMEOUT			1
+
+#endif
diff --git a/arch/arm/mach-mesong9tv/iomapping.c b/arch/arm/mach-mesong9tv/iomapping.c
new file mode 100644
index 000000000000..45fef9557660
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/iomapping.c
@@ -0,0 +1,123 @@
+/*
+ * arch/arm/mach-mesong9tv/iomapping.c
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sizes.h>
+#include <linux/io.h>
+#include <linux/mm.h>
+#include <asm/memory.h>
+#include <asm/mach/map.h>
+#include <mach/io.h>
+
+static __initdata struct map_desc meson_default_io_desc[]  = {
+	{
+	.virtual	= IO_PL310_BASE,
+	.pfn		= __phys_to_pfn(IO_PL310_PHY_BASE),
+	.length		= SZ_4K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_A9_PERIPH_BASE,
+	.pfn		= __phys_to_pfn(IO_A9_PERIPH_PHY_BASE),
+	.length		= SZ_16K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_MMC_BUS_BASE,
+	.pfn		= __phys_to_pfn(IO_MMC_PHY_BASE),
+	.length		= SZ_32K,
+	.type		= MT_DEVICE,
+	},{
+	.virtual	= IO_BOOTROM_BASE,
+	.pfn		= __phys_to_pfn(IO_BOOTROM_PHY_BASE),
+	.length		= SZ_64K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_SRAM_BASE,
+	.pfn		= __phys_to_pfn(IO_SRAM_PHY_BASE),
+	.length		= SZ_128K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_USB_A_BASE,
+	.pfn		= __phys_to_pfn(IO_USB_A_PHY_BASE),
+	.length		= SZ_256K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_USB_B_BASE,
+	.pfn		= __phys_to_pfn(IO_USB_B_PHY_BASE),
+	.length		= SZ_256K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_ETH_BASE,
+	.pfn		= __phys_to_pfn(IO_ETH_PHY_BASE),
+	.length		= SZ_64K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_SECBUS_BASE,
+	.pfn		= __phys_to_pfn(IO_SECBUS_PHY_BASE),
+	.length		= SZ_32K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_TV_BUS_BASE,
+	.pfn		= __phys_to_pfn(IO_TV_BASE),
+	.length		= SZ_32K,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_CBUS_BASE,
+	.pfn		= __phys_to_pfn(IO_CBUS_PHY_BASE),
+	.length		= SZ_1M,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_AXI_BUS_BASE,
+	.pfn		= __phys_to_pfn(IO_AXI_BUS_PHY_BASE),
+	.length		= SZ_2M,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_APB_BUS_BASE,
+	.pfn		= __phys_to_pfn(IO_APB_BUS_PHY_BASE),
+	.length		= SZ_2M,
+	.type		= MT_DEVICE,
+	}, {
+	.virtual	= IO_AOBUS_BASE,
+	.pfn		= __phys_to_pfn(IO_AOBUS_PHY_BASE),
+	.length		= SZ_1M,
+	.type		= MT_DEVICE,
+	},
+
+#ifdef CONFIG_AMLOGIC_SPI_HW_MASTER
+	{
+	.virtual	= IO_SPIMEM_BASE,
+	.pfn		= __phys_to_pfn(IO_SPIMEM_PHY_BASE),
+	.length		= SZ_64M,
+	.type		= MT_ROM,
+	},
+#endif
+
+#ifdef CONFIG_MESON_SUSPEND
+	{
+	.virtual	= PAGE_ALIGN(__phys_to_virt(0x04f00000)),
+	.pfn		= __phys_to_pfn(0x04f00000),
+	.length		= SZ_1M,
+	.type		= MT_MEMORY_NONCACHED,
+	},
+#endif
+};
+
+unsigned int meson_uart_phy_addr = 0xc8100000;
+
+void __init meson_map_default_io(void)
+{
+	iotable_init(meson_default_io_desc, ARRAY_SIZE(meson_default_io_desc));
+	meson_uart_phy_addr = IO_AOBUS_BASE;
+}
diff --git a/arch/arm/mach-mesong9tv/pinctrl.c b/arch/arm/mach-mesong9tv/pinctrl.c
new file mode 100644
index 000000000000..db5baf4539e2
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/pinctrl.c
@@ -0,0 +1,476 @@
+/*
+ * arch/arm/mach-mesong9tv/pinctrl.c
+ * Amlogic Pin Controller Driver
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/machine.h>
+#include <linux/pinctrl/pinctrl.h>
+#include <linux/pinctrl/pinmux.h>
+#include <linux/pinctrl/pinconf.h>
+
+#include <plat/io.h>
+#include <mach/am_regs.h>
+#include <linux/amlogic/pinctrl-amlogic.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+
+DEFINE_MUTEX(spi_nand_mutex);
+
+unsigned p_pull_up_addr[] = {
+	P_PAD_PULL_UP_REG0,
+	P_PAD_PULL_UP_REG1,
+	P_PAD_PULL_UP_REG2,
+	P_PAD_PULL_UP_REG3,
+	P_PAD_PULL_UP_REG4,
+	P_AO_RTI_PULL_UP_REG,
+};
+
+unsigned int p_pin_mux_reg_addr[] = {
+	P_PERIPHS_PIN_MUX_0,
+	P_PERIPHS_PIN_MUX_1,
+	P_PERIPHS_PIN_MUX_2,
+	P_PERIPHS_PIN_MUX_3,
+	P_PERIPHS_PIN_MUX_4,
+	P_PERIPHS_PIN_MUX_5,
+	P_PERIPHS_PIN_MUX_6,
+	P_PERIPHS_PIN_MUX_7,
+	P_PERIPHS_PIN_MUX_8,
+	P_PERIPHS_PIN_MUX_9,
+	P_AO_RTI_PIN_MUX_REG,
+	P_PERIPHS_PIN_MUX_10,
+	P_PERIPHS_PIN_MUX_11,
+	P_PERIPHS_PIN_MUX_12,
+};
+
+unsigned p_pull_upen_addr[] = {
+	P_PAD_PULL_UP_EN_REG0,
+	P_PAD_PULL_UP_EN_REG1,
+	P_PAD_PULL_UP_EN_REG2,
+	P_PAD_PULL_UP_EN_REG3,
+	P_PAD_PULL_UP_EN_REG4,
+	P_AO_RTI_PULL_UP_REG,
+};
+
+/* Pad names for the pinmux subsystem */
+const static struct pinctrl_pin_desc g9tv_pads[] = {
+
+	PINCTRL_PIN(GPIOX_0,	"GPIOX_0"),
+	PINCTRL_PIN(GPIOX_1,	"GPIOX_1"),
+	PINCTRL_PIN(GPIOX_2,	"GPIOX_2"),
+	PINCTRL_PIN(GPIOX_3,	"GPIOX_3"),
+	PINCTRL_PIN(GPIOX_4,	"GPIOX_4"),
+	PINCTRL_PIN(GPIOX_5,	"GPIOX_5"),
+	PINCTRL_PIN(GPIOX_6,	"GPIOX_6"),
+	PINCTRL_PIN(GPIOX_7,	"GPIOX_7"),
+	PINCTRL_PIN(GPIOX_8,	"GPIOX_8"),
+	PINCTRL_PIN(GPIOX_9,	"GPIOX_9"),
+	PINCTRL_PIN(GPIOX_10,	"GPIOX_10"),
+	PINCTRL_PIN(GPIOX_11,	"GPIOX_11"),
+	PINCTRL_PIN(GPIOX_12,	"GPIOX_12"),
+	PINCTRL_PIN(GPIOX_13,	"GPIOX_13"),
+	PINCTRL_PIN(GPIOX_14,	"GPIOX_14"),
+	PINCTRL_PIN(GPIOX_15,	"GPIOX_15"),
+	PINCTRL_PIN(GPIOX_16,	"GPIOX_16"),
+	PINCTRL_PIN(GPIOX_17,	"GPIOX_17"),
+	PINCTRL_PIN(GPIOX_18,	"GPIOX_18"),
+	PINCTRL_PIN(GPIOX_19,	"GPIOX_19"),
+	PINCTRL_PIN(GPIOX_20,	"GPIOX_20"),
+	PINCTRL_PIN(GPIOX_21,	"GPIOX_21"),
+	PINCTRL_PIN(GPIOX_22,	"GPIOX_22"),
+	PINCTRL_PIN(GPIOX_23,	"GPIOX_23"),
+	PINCTRL_PIN(GPIOX_24,	"GPIOX_24"),
+	PINCTRL_PIN(GPIOX_25,	"GPIOX_25"),
+	PINCTRL_PIN(GPIOX_26,	"GPIOX_26"),
+	PINCTRL_PIN(GPIOX_27,	"GPIOX_27"),
+
+	PINCTRL_PIN(BOOT_0,	"BOOT_0"),
+	PINCTRL_PIN(BOOT_1,	"BOOT_1"),
+	PINCTRL_PIN(BOOT_2,	"BOOT_2"),
+	PINCTRL_PIN(BOOT_3,	"BOOT_3"),
+	PINCTRL_PIN(BOOT_4,	"BOOT_4"),
+	PINCTRL_PIN(BOOT_5,	"BOOT_5"),
+	PINCTRL_PIN(BOOT_6,	"BOOT_6"),
+	PINCTRL_PIN(BOOT_7,	"BOOT_7"),
+	PINCTRL_PIN(BOOT_8,	"BOOT_8"),
+	PINCTRL_PIN(BOOT_9,	"BOOT_9"),
+	PINCTRL_PIN(BOOT_10,	"BOOT_10"),
+	PINCTRL_PIN(BOOT_11,	"BOOT_11"),
+	PINCTRL_PIN(BOOT_12,	"BOOT_12"),
+	PINCTRL_PIN(BOOT_13,	"BOOT_13"),
+	PINCTRL_PIN(BOOT_14,	"BOOT_14"),
+	PINCTRL_PIN(BOOT_15,	"BOOT_15"),
+	PINCTRL_PIN(BOOT_16,	"BOOT_16"),
+	PINCTRL_PIN(BOOT_17,	"BOOT_17"),
+	PINCTRL_PIN(BOOT_18,	"BOOT_18"),
+
+	PINCTRL_PIN(GPIOH_0,	"GPIOH_0"),
+	PINCTRL_PIN(GPIOH_1,	"GPIOH_1"),
+	PINCTRL_PIN(GPIOH_2,	"GPIOH_2"),
+	PINCTRL_PIN(GPIOH_3,	"GPIOH_3"),
+	PINCTRL_PIN(GPIOH_4,	"GPIOH_4"),
+	PINCTRL_PIN(GPIOH_5,	"GPIOH_5"),
+	PINCTRL_PIN(GPIOH_6,	"GPIOH_6"),
+	PINCTRL_PIN(GPIOH_7,	"GPIOH_7"),
+	PINCTRL_PIN(GPIOH_8,	"GPIOH_8"),
+	PINCTRL_PIN(GPIOH_9,	"GPIOH_9"),
+	PINCTRL_PIN(GPIOH_10,	"GPIOH_10"),
+
+	PINCTRL_PIN(GPIOZ_0,	"GPIOZ_0"),
+	PINCTRL_PIN(GPIOZ_1,	"GPIOZ_1"),
+	PINCTRL_PIN(GPIOZ_2,	"GPIOZ_2"),
+	PINCTRL_PIN(GPIOZ_3,	"GPIOZ_3"),
+	PINCTRL_PIN(GPIOZ_4,	"GPIOZ_4"),
+	PINCTRL_PIN(GPIOZ_5,	"GPIOZ_5"),
+	PINCTRL_PIN(GPIOZ_6,	"GPIOZ_6"),
+	PINCTRL_PIN(GPIOZ_7,	"GPIOZ_7"),
+	PINCTRL_PIN(GPIOZ_8,	"GPIOZ_8"),
+	PINCTRL_PIN(GPIOZ_9,	"GPIOZ_9"),
+	PINCTRL_PIN(GPIOZ_10,	"GPIOZ_10"),
+	PINCTRL_PIN(GPIOZ_11,	"GPIOZ_11"),
+	PINCTRL_PIN(GPIOZ_12,	"GPIOZ_12"),
+	PINCTRL_PIN(GPIOZ_13,	"GPIOZ_13"),
+	PINCTRL_PIN(GPIOZ_14,	"GPIOZ_14"),
+	PINCTRL_PIN(GPIOZ_15,	"GPIOZ_15"),
+	PINCTRL_PIN(GPIOZ_16,	"GPIOZ_16"),
+	PINCTRL_PIN(GPIOZ_17,	"GPIOZ_17"),
+	PINCTRL_PIN(GPIOZ_18,	"GPIOZ_18"),
+	PINCTRL_PIN(GPIOZ_19,	"GPIOZ_19"),
+	PINCTRL_PIN(GPIOZ_20,	"GPIOZ_20"),
+
+	PINCTRL_PIN(GPIOW_0,	"GPIOW_0"),
+	PINCTRL_PIN(GPIOW_1,	"GPIOW_1"),
+	PINCTRL_PIN(GPIOW_2,	"GPIOW_2"),
+	PINCTRL_PIN(GPIOW_3,	"GPIOW_3"),
+	PINCTRL_PIN(GPIOW_4,	"GPIOW_4"),
+	PINCTRL_PIN(GPIOW_5,	"GPIOW_5"),
+	PINCTRL_PIN(GPIOW_6,	"GPIOW_6"),
+	PINCTRL_PIN(GPIOW_7,	"GPIOW_7"),
+	PINCTRL_PIN(GPIOW_8,	"GPIOW_8"),
+	PINCTRL_PIN(GPIOW_9,	"GPIOW_9"),
+	PINCTRL_PIN(GPIOW_10,	"GPIOW_10"),
+	PINCTRL_PIN(GPIOW_11,	"GPIOW_11"),
+	PINCTRL_PIN(GPIOW_12,	"GPIOW_12"),
+	PINCTRL_PIN(GPIOW_13,	"GPIOW_13"),
+	PINCTRL_PIN(GPIOW_14,	"GPIOW_14"),
+	PINCTRL_PIN(GPIOW_15,	"GPIOW_15"),
+	PINCTRL_PIN(GPIOW_16,	"GPIOW_16"),
+	PINCTRL_PIN(GPIOW_17,	"GPIOW_17"),
+	PINCTRL_PIN(GPIOW_18,	"GPIOW_18"),
+	PINCTRL_PIN(GPIOW_19,	"GPIOW_19"),
+	PINCTRL_PIN(GPIOW_20,	"GPIOW_20"),
+
+	PINCTRL_PIN(GPIOAO_0,	"GPIOAO_0"),
+	PINCTRL_PIN(GPIOAO_1,	"GPIOAO_1"),
+	PINCTRL_PIN(GPIOAO_2,	"GPIOAO_2"),
+	PINCTRL_PIN(GPIOAO_3,	"GPIOAO_3"),
+	PINCTRL_PIN(GPIOAO_4,	"GPIOAO_4"),
+	PINCTRL_PIN(GPIOAO_5,	"GPIOAO_5"),
+	PINCTRL_PIN(GPIOAO_6,	"GPIOAO_6"),
+	PINCTRL_PIN(GPIOAO_7,	"GPIOAO_7"),
+	PINCTRL_PIN(GPIOAO_8,	"GPIOAO_8"),
+	PINCTRL_PIN(GPIOAO_9,	"GPIOAO_9"),
+	PINCTRL_PIN(GPIOAO_10,	"GPIOAO_10"),
+	PINCTRL_PIN(GPIOAO_11,	"GPIOAO_11"),
+	PINCTRL_PIN(GPIOAO_12,	"GPIOAO_12"),
+	PINCTRL_PIN(GPIOAO_13,	"GPIOAO_13"),
+
+	PINCTRL_PIN(CARD_0,	"CARD_0"),
+	PINCTRL_PIN(CARD_1,	"CARD_1"),
+	PINCTRL_PIN(CARD_2,	"CARD_2"),
+	PINCTRL_PIN(CARD_3,	"CARD_3"),
+	PINCTRL_PIN(CARD_4,	"CARD_4"),
+	PINCTRL_PIN(CARD_5,	"CARD_5"),
+	PINCTRL_PIN(CARD_6,	"CARD_6"),
+	PINCTRL_PIN(CARD_7,	"CARD_7"),
+	PINCTRL_PIN(CARD_8,	"CARD_8"),
+
+	PINCTRL_PIN(GPIOY_0,	"GPIOY_0"),
+	PINCTRL_PIN(GPIOY_1,	"GPIOY_1"),
+	PINCTRL_PIN(GPIOY_2,	"GPIOY_2"),
+	PINCTRL_PIN(GPIOY_3,	"GPIOY_3"),
+	PINCTRL_PIN(GPIOY_4,	"GPIOY_4"),
+	PINCTRL_PIN(GPIOY_5,	"GPIOY_5"),
+	PINCTRL_PIN(GPIOY_6,	"GPIOY_6"),
+	PINCTRL_PIN(GPIOY_7,	"GPIOY_7"),
+	PINCTRL_PIN(GPIOY_8,	"GPIOY_8"),
+	PINCTRL_PIN(GPIOY_9,	"GPIOY_9"),
+	PINCTRL_PIN(GPIOY_10,	"GPIOY_10"),
+	PINCTRL_PIN(GPIOY_11,	"GPIOY_11"),
+	PINCTRL_PIN(GPIOY_12,	"GPIOY_12"),
+	PINCTRL_PIN(GPIOY_13,	"GPIOY_13"),
+};
+
+int g9tv_pin_to_pullup(unsigned int pin , unsigned int *reg, unsigned int *bit,
+	unsigned int *en)
+{
+	/*
+	PAD_PULL_UP_REG0 0x203a
+
+	31~21	R/W	0		Unused
+	20~0	R/W	0x2223F 	gpioW[20:0] 1 = pull up.  0 = pull down
+	*/
+	if(pin <= GPIOW_20)
+	{
+		*reg = 0;
+		*bit = pin - GPIOW_0;
+		*en  = *bit;
+	}
+	/*
+	PAD_PULL_UP_REG1 0x203b
+
+	31~27	R/W	0		Unused
+	26~16	R/W	0x1FC		gpioH[10:0]
+	15~14	R/W	0		Reserved
+	13~0	R/W	0x09FB		gpioY[13:0]
+	*/
+	else if(pin <= GPIOH_10)
+	{
+		*reg = 1;
+		*bit = pin - GPIOH_0 + 16;
+		*en  = *bit;
+	}
+	else if (pin <= GPIOY_13)
+	{
+		*reg = 1;
+		*bit = pin - GPIOY_0;
+		*en  = *bit;
+	}
+	/*
+	PAD_PULL_UP_REG2 0x203c
+
+	31~20	R/W	0		Reserved
+	28~20	R/W	0x1FF		card[8:0] 1 = pull up.	0 = pull down
+	19	R/W	1		Reserved
+	18~0	R/W	0x77FFF 	boot[18:0] 1 = pull up.  0 = pull down
+	*/
+	else if (pin <= CARD_8)
+	{
+		*reg = 2;
+		*bit = pin - CARD_0 + 20;
+		*en  = *bit;
+	}
+	else if (pin <= BOOT_18)
+	{
+		*reg = 2;
+		*bit = pin - BOOT_0;
+		*en  = *bit;
+	}
+	/*
+	PAD_PULL_UP_REG3 0x203d
+
+	31~21	R/W	0		Reserved
+	20~0	R/W	0x1FA040	gpioZ[20:0] 1 = pull up.  0 = pull down
+	*/
+	else if (pin <= GPIOZ_20)
+	{
+		*reg = 3;
+		*bit = pin - GPIOZ_0;
+		*en  = *bit;
+	}
+	/*
+	PAD_PULL_UP_REG4 0x203e
+
+	31~28	R/W	0		Unused
+	27~0	R/W	0x3000000	gpioX[27:0] 1 = pull up.  0 = pull down
+	*/
+	else if (pin <= GPIOX_27)
+	{
+		*reg = 4;
+		*bit = pin - GPIOX_0;
+		*en  = *bit;
+	}
+	/*
+	AO_RTI_PULL_UP_REG	0xc810002c
+
+	31	R	0	Reserved
+	30	R/W	0	TEST_N pull-up/down direction.
+	29-16	R/W	0	gpioAO[13:0] pull-up/down direction.
+	*/
+	else if (pin <= GPIOAO_13)
+	{
+		*reg = 5;
+		*bit = pin - GPIOAO_0 + 16;
+		*en  = *bit;
+	}
+	else
+		return -1;
+	return 0;
+
+}
+
+int g9tv_pin_map_to_direction(unsigned int pin,unsigned int *reg,unsigned int *bit)
+{
+	/*
+	PULL_UP_EN_REG0	0x2048
+
+	31~21	R/W	0		Unused
+	20~0	R/W	0x2223F		gpioW[20:0]
+	*/
+	if (pin <= GPIOW_20)
+	{
+		*reg = 0;
+		*bit = pin - GPIOW_0;
+	}
+	/*
+	PULL_UP_EN_REG1	0x2049
+
+	31~27	R/W	0		Unused
+	26~16	R/W	0x67D		gpioH[10:0]
+	15~14	R/W	0		Reserved
+	13~0	R/W	0x3FFF		gpioY[13:0]
+	*/
+	else if (pin <= GPIOH_10)
+	{
+		*reg = 1;
+		*bit = pin - GPIOH_0 + 16;
+	}
+	else if (pin <= GPIOY_13)
+	{
+		*reg = 1;
+		*bit = pin - GPIOY_0;
+	}
+	/*
+	PULL_UP_EN_REG2	0x204a
+
+	31~20	R/W	0		Reserved
+	28~20	R/W	0x1FF		card[8:0]
+	19	R/W	1		Reserved
+	18~0	R/W	0x7FFFF 	boot[18:0]
+	*/
+	else if (pin <= CARD_8)
+	{
+		*reg = 2;
+		*bit = pin - CARD_0 + 20;
+	}
+	else if (pin <= BOOT_18)
+	{
+		*reg = 2;
+		*bit = pin - BOOT_0;
+	}
+	/*
+	PULL_UP_EN_REG3	0x204b
+
+	31~21	R/W	0		Reserved
+	20~0	R/W	0x1FE07F	gpioZ[20:0]
+	*/
+	else if (pin <= GPIOZ_20)
+	{
+		*reg = 3;
+		*bit = pin - GPIOZ_0;
+	}
+	/*
+	PULL_UP_EN_REG4 0x204c
+
+	31~28	R/W	0		Unused
+	27~0	R/W	0xF000FFF	gpioX[27:0]
+	*/
+	else if (pin <= GPIOX_27)
+	{
+		*reg = 4;
+		*bit = pin - GPIOX_0;
+	}
+	/*
+	AO_RTI_PULL_UP_REG	0xc810002c
+
+	15	R	0	Reserved
+	14	R/W	0	TEST_N pull-up enable.
+	13-0	R/W	0	gpioAO[13:0] pull-up enable
+	*/
+	else if (pin < GPIOAO_13)
+	{
+		*reg = 5;
+		*bit = pin - GPIOAO_0;
+	}
+	else
+		return -1;
+	return 0;
+}
+
+static int g9tv_set_pullup(unsigned int pin, unsigned int config)
+{
+	unsigned int reg=0, bit=0, bit_en=0, ret;
+	u16 pullarg = AML_PINCONF_UNPACK_PULL_ARG(config);
+	u16 pullen = AML_PINCONF_UNPACK_PULL_EN(config);
+	ret = g9tv_pin_to_pullup(pin, &reg, &bit, &bit_en);
+
+	if (!ret)
+	{
+		if (pullen) {
+			if (pullarg)
+				aml_set_reg32_mask(p_pull_up_addr[reg], 1<<bit);
+			else
+				aml_clr_reg32_mask(p_pull_up_addr[reg], 1<<bit);
+			aml_set_reg32_mask(p_pull_upen_addr[reg], 1<<bit_en);
+		}
+		else
+			aml_clr_reg32_mask(p_pull_upen_addr[reg], 1<<bit_en);
+	}
+	return ret;
+}
+
+static struct amlogic_pinctrl_soc_data g9tv_pinctrl = {
+	.pins = g9tv_pads,
+	.npins = ARRAY_SIZE(g9tv_pads),
+	.meson_set_pullup = g9tv_set_pullup,
+	.pin_map_to_direction = g9tv_pin_map_to_direction,
+};
+
+static struct of_device_id g9tv_pinctrl_of_match[] = {
+	{
+		.compatible="amlogic,pinmux-g9tv",
+	},
+	{},
+};
+
+static int  g9tv_pmx_probe(struct platform_device *pdev)
+{
+	return amlogic_pmx_probe(pdev,&g9tv_pinctrl);
+}
+
+static int  g9tv_pmx_remove(struct platform_device *pdev)
+{
+	return amlogic_pmx_remove(pdev);
+}
+
+static struct platform_driver g9tv_pmx_driver = {
+	.driver = {
+		.name = "pinmux-g9tv",
+		.owner = THIS_MODULE,
+		.of_match_table=of_match_ptr(g9tv_pinctrl_of_match),
+	},
+	.probe  = g9tv_pmx_probe,
+	.remove = g9tv_pmx_remove,
+};
+
+static int __init g9tv_pmx_init(void)
+{
+	return platform_driver_register(&g9tv_pmx_driver);
+}
+arch_initcall(g9tv_pmx_init);
+
+static void __exit g9tv_pmx_exit(void)
+{
+	platform_driver_unregister(&g9tv_pmx_driver);
+}
+module_exit(g9tv_pmx_exit);
+
+MODULE_DESCRIPTION("Amlogic Pin Controller Driver");
+MODULE_LICENSE("GPL v2");
diff --git a/arch/arm/mach-mesong9tv/pm.c b/arch/arm/mach-mesong9tv/pm.c
new file mode 100755
index 000000000000..47a10c9e2c5f
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/pm.c
@@ -0,0 +1,450 @@
+/*
+ * Meson Power Management Routines
+ *
+ * Copyright (C) 2010 Amlogic, Inc. http://www.amlogic.com/
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/pm.h>
+#include <linux/suspend.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/spinlock.h>
+#include <linux/clk.h>
+#include <linux/fs.h>
+
+#include <asm/cacheflush.h>
+#include <asm/delay.h>
+#include <asm/uaccess.h>
+
+#include <mach/pm.h>
+#include <mach/am_regs.h>
+#include <plat/sram.h>
+#include <mach/power_gate.h>
+#include <mach/gpio.h>
+//#include <mach/pctl.h>
+#include <mach/clock.h>
+#include <plat/regops.h>
+#include <plat/io.h>
+#include <plat/wakeup.h>
+#ifdef CONFIG_MESON_TRUSTZONE
+#include <mach/meson-secure.h>
+#endif
+
+#ifdef CONFIG_SUSPEND_WATCHDOG
+#include <mach/watchdog.h>
+#endif /* CONFIG_SUSPEND_WATCHDOG */
+
+#include <mach/mod_gate.h>
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+#include <linux/earlysuspend.h>
+static struct early_suspend early_suspend;
+static int early_suspend_flag = 0;
+#endif
+
+#define ON  1
+#define OFF 0
+
+static struct meson_pm_config *pdata;
+
+#define CLK(addr)  \
+{ \
+	.clk_name=#addr, \
+	.clk_addr=addr, \
+	.clk_flag=0, \
+}
+
+struct clk_desc{
+    char* clk_name;
+    unsigned clk_addr;
+    unsigned clk_flag;
+} ;
+
+struct clk_desc clks[] = {
+	CLK(P_HHI_MPEG_CLK_CNTL),
+};
+
+static void uart_change_buad(unsigned reg,unsigned clk_rate){
+	aml_clr_reg32_mask(reg, 0x7FFFFF);
+	aml_set_reg32_bits(reg, (((clk_rate / (115200 * 4)) - 1) & 0x7fffff)|(1<<23), 0, 24);
+}
+static void wait_uart_empty(void)
+{
+	do{
+		udelay(100);
+	}while((aml_read_reg32(P_AO_UART_STATUS) & (1<<22)) == 0);
+}
+struct clk* clk81;
+struct clk* clkxtal;
+
+void clk_switch(int flag)
+{
+	int i;
+	int clk_count=sizeof(clks)/sizeof(clks[0]);
+	unsigned int uart_rate_clk;
+	if (flag) {
+		for (i = clk_count - 1; i >= 0; i--) {
+			if (clks[i].clk_flag) {
+				if (clks[i].clk_addr == P_HHI_MPEG_CLK_CNTL) {
+					uart_rate_clk = clk_get_rate(clk81);
+					wait_uart_empty();
+					aml_set_reg32_mask(clks[i].clk_addr,(1<<7));//gate on pll
+					udelay(10);
+					aml_set_reg32_mask(clks[i].clk_addr,(1<<8));//switch to pll
+					udelay(10);
+					uart_change_buad(P_AO_UART_REG5,uart_rate_clk);
+					clks[i].clk_flag = 0;
+				}
+                	printk(KERN_INFO "clk %s(%x) on\n", clks[i].clk_name, ((clks[i].clk_addr)&0xffff)>>2);
+			}
+		}
+	} else {
+	        for (i = 0; i < clk_count; i++) {
+	 		if (clks[i].clk_addr == P_HHI_MPEG_CLK_CNTL) {
+				if (aml_read_reg32(clks[i].clk_addr) & (1 << 8)) {
+					uart_rate_clk = clk_get_rate(clkxtal);
+					clks[i].clk_flag  = 1;
+					wait_uart_empty();
+					aml_clr_reg32_mask(clks[i].clk_addr, (1 << 8)); // gate off from pll
+					udelay(10);
+					aml_clr_reg32_mask(clks[i].clk_addr, (1 << 7)); // switch to 24M
+					udelay(10);
+					uart_change_buad(P_AO_UART_REG5,uart_rate_clk);
+					clks[i].clk_flag=1;
+				}
+			}
+			if (clks[i].clk_flag) {
+				printk(KERN_INFO "clk %s(%x) off\n", clks[i].clk_name, ((clks[i].clk_addr)&0xffff)>>2);
+			}
+		}
+	}
+}
+EXPORT_SYMBOL(clk_switch);
+
+
+typedef struct {
+    char name[32];
+    unsigned reg_addr;
+    unsigned set_bits;
+    unsigned clear_bits;
+    unsigned reg_value;
+    unsigned enable; // 1:cbus 2:apb 3:ahb 0:disable
+} analog_t;
+
+// ... Meson8 baby don't have LED_PWM_REG0
+#define ANALOG_COUNT    1
+static analog_t analog_regs[ANALOG_COUNT] = {
+    {"SAR_ADC",             P_AO_SAR_ADC_REG3,       1 << 28, (1 << 30) | (1 << 21),    0,  1},
+};
+/*
+#define ANALOG_COUNT    2
+static analog_t analog_regs[ANALOG_COUNT] = {
+    {"SAR_ADC",             P_SAR_ADC_REG3,       1 << 28, (1 << 30) | (1 << 21),    0,  1},
+#ifdef ADJUST_CORE_VOLTAGE
+    {"LED_PWM_REG0",        P_LED_PWM_REG0,       1 << 13,          1 << 12,              0,  0}, // needed for core voltage adjustment, so not off
+#else
+    {"LED_PWM_REG0",        P_LED_PWM_REG0,       1 << 13,          1 << 12,              0,  1},
+#endif
+};
+*/
+
+void analog_switch(int flag)
+{
+    int i;
+    unsigned reg_value = 0;
+
+    if (flag) {
+        printk(KERN_INFO "analog on\n");
+        aml_set_reg32_mask(P_AM_ANALOG_TOP_REG0, 1 << 1); // set 0x206e bit[1] 1 to power on top analog
+        for (i = 0; i < ANALOG_COUNT; i++) {
+            if (analog_regs[i].enable && (analog_regs[i].set_bits || analog_regs[i].clear_bits)) {
+                if (analog_regs[i].enable == 1) {
+                		aml_write_reg32(analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                } else if (analog_regs[i].enable == 2) {
+                    aml_write_reg32(analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                } else if (analog_regs[i].enable == 3) {
+                    aml_write_reg32(analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                }
+            }
+        }
+    } else {
+        printk(KERN_INFO "analog off\n");
+        for (i = 0; i < ANALOG_COUNT; i++) {
+            if (analog_regs[i].enable && (analog_regs[i].set_bits || analog_regs[i].clear_bits)) {
+                if (analog_regs[i].enable == 1) {
+                    analog_regs[i].reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk("%s(0x%x):0x%x", analog_regs[i].name, analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                    if (analog_regs[i].clear_bits) {
+                        aml_clr_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].clear_bits);
+                        printk(" & ~0x%x", analog_regs[i].clear_bits);
+                    }
+                    if (analog_regs[i].set_bits) {
+                        aml_set_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].set_bits);
+                        printk(" | 0x%x", analog_regs[i].set_bits);
+                    }
+                    reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk(" = 0x%x\n", reg_value);
+                } else if (analog_regs[i].enable == 2) {
+                    analog_regs[i].reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk("%s(0x%x):0x%x", analog_regs[i].name, analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                    if (analog_regs[i].clear_bits) {
+                    		aml_clr_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].clear_bits);
+                        printk(" & ~0x%x", analog_regs[i].clear_bits);
+                    }
+                    if (analog_regs[i].set_bits) {
+                    		aml_set_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].set_bits);
+                        printk(" | 0x%x", analog_regs[i].set_bits);
+                    }
+                    reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk(" = 0x%x\n", reg_value);
+                } else if (analog_regs[i].enable == 3) {
+                    analog_regs[i].reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk("%s(0x%x):0x%x", analog_regs[i].name, analog_regs[i].reg_addr, analog_regs[i].reg_value);
+                    if (analog_regs[i].clear_bits) {
+                        aml_clr_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].clear_bits);
+                        printk(" & ~0x%x", analog_regs[i].clear_bits);
+                    }
+                    if (analog_regs[i].set_bits) {
+                        aml_set_reg32_mask(analog_regs[i].reg_addr, analog_regs[i].set_bits);
+                        printk(" | 0x%x", analog_regs[i].set_bits);
+                    }
+                    reg_value = aml_read_reg32(analog_regs[i].reg_addr);
+                    printk(" = 0x%x\n", reg_value);
+                }
+            }
+        }
+        aml_clr_reg32_mask(P_AM_ANALOG_TOP_REG0, 1 << 1); // set 0x206e bit[1] 0 to shutdown top analog
+    }
+}
+
+#ifdef CONFIG_HAS_EARLYSUSPEND
+static void meson_system_early_suspend(struct early_suspend *h)
+{
+	if (!early_suspend_flag) {
+	printk(KERN_INFO "%s\n",__func__);
+	if (pdata->set_exgpio_early_suspend) {
+		pdata->set_exgpio_early_suspend(OFF);
+	}
+		//early_clk_switch(OFF);
+		//early_power_gate_switch(OFF);
+		early_suspend_flag = 1;
+	}
+}
+
+static void meson_system_late_resume(struct early_suspend *h)
+{
+	if (early_suspend_flag) {
+		//early_power_gate_switch(ON);
+		//early_clk_switch(ON);
+		early_suspend_flag = 0;
+		printk(KERN_INFO "%s\n",__func__);
+	}
+}
+#endif
+
+//extern int det_pwr_key(void);
+//extern void clr_pwr_key(void);
+
+/* add zhihua.xie*/
+static int det_pwr_key(void)
+{
+	return 0;
+}
+
+static void clr_pwr_key(void)
+{
+
+}
+/* end zhihua*/
+
+
+
+
+
+static void meson_pm_suspend(void)
+{
+	printk(KERN_INFO "enter meson_pm_suspend!\n");
+#ifdef CONFIG_SUSPEND_WATCHDOG
+	ENABLE_SUSPEND_WATCHDOG;
+#endif
+
+	//analog_switch(OFF);
+	 if (pdata->set_vccx2) {
+		pdata->set_vccx2(OFF);
+	}
+
+	clk_switch(OFF);
+	//power_gate_switch(OFF);
+	//switch_mod_gate_by_type(MOD_MEDIA_CPU, 1);
+	printk(KERN_INFO "sleep ...\n");
+	//switch A9 clock to xtal 24MHz
+	aml_clr_reg32_mask(P_HHI_SYS_CPU_CLK_CNTL, 1 << 7);
+	aml_clr_reg32_mask(P_HHI_SYS_PLL_CNTL, 1 << 30);//disable sys pll
+
+	if(det_pwr_key())//get pwr key and wakeup im
+	{
+		clr_pwr_key();
+		WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, FLAG_WAKEUP_PWRKEY);
+	}else{
+#ifdef CONFIG_MESON_SUSPEND
+#ifdef CONFIG_MESON_TRUSTZONE
+		meson_suspend_firmware();
+#else
+		meson_power_suspend();
+#endif
+#else
+#if 0
+		//k101 power key
+		aml_set_reg32_mask(P_AO_GPIO_O_EN_N, (1 << 3));
+		aml_set_reg32_mask(P_AO_RTI_PULL_UP_REG, (1 << 3)|(1<<19));
+		do{
+			udelay(1000);
+		}while((aml_read_reg32(P_AO_GPIO_I)&(1<<3)));
+#endif
+#endif
+	}
+	aml_set_reg32_mask(P_HHI_SYS_PLL_CNTL, (1 << 30)); //enable sys pll
+	printk(KERN_INFO "... wake up\n");
+#if 1
+	if (aml_read_reg32(P_AO_RTC_ADDR1) & (1<<12)) {
+	// Woke from alarm, not power button. Set flag to inform key_input driver.
+		WRITE_AOBUS_REG(AO_RTI_STATUS_REG2, FLAG_WAKEUP_ALARM);
+	}
+	// clear RTC interrupt
+	aml_write_reg32((P_AO_RTC_ADDR1),aml_read_reg32(P_AO_RTC_ADDR1)|(0xf000));
+	printk(KERN_INFO "RTCADD3=0x%x\n",aml_read_reg32(P_AO_RTC_ADDR3));
+	if(aml_read_reg32(P_AO_RTC_ADDR3)|(1<<29))
+	{
+		aml_write_reg32((P_AO_RTC_ADDR3),aml_read_reg32(P_AO_RTC_ADDR3)&(~(1<<29)));
+		udelay(1000);
+	}
+	printk(KERN_INFO "RTCADD3=0x%x\n",aml_read_reg32(P_AO_RTC_ADDR3));
+#endif
+	if (pdata->set_vccx2) {
+		pdata->set_vccx2(ON);
+	}
+	wait_uart_empty();
+	aml_set_reg32_mask(P_HHI_SYS_CPU_CLK_CNTL , (1 << 7)); //a9 use pll
+	//switch_mod_gate_by_type(MOD_MEDIA_CPU, 0);
+	//power_gate_switch(ON);
+	clk_switch(ON);
+	//analog_switch(ON);
+}
+
+static int meson_pm_prepare(void)
+{
+	  printk(KERN_INFO "enter meson_pm_prepare!\n");
+	  return 0;
+}
+
+static int meson_pm_enter(suspend_state_t state)
+{
+	int ret = 0;
+	switch (state) {
+	case PM_SUSPEND_STANDBY:
+	case PM_SUSPEND_MEM:
+		meson_pm_suspend();
+		break;
+	default:
+		ret = -EINVAL;
+	}
+	return ret;
+}
+
+static void meson_pm_finish(void)
+{
+    printk(KERN_INFO "enter meson_pm_finish!\n");
+}
+
+static struct platform_suspend_ops meson_pm_ops = {
+    .enter        = meson_pm_enter,
+    .prepare    = meson_pm_prepare,
+    .finish       = meson_pm_finish,
+    .valid        = suspend_valid_only_mem,
+};
+
+static void m6ref_set_vccx2(int power_on)
+{
+    if(power_on == OFF) {
+        printk("m6ref_set_vccx2: OFF");
+        CLEAR_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<15);
+        SET_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<31);
+    } else {
+        printk("m6ref_set_vccx2: ON");
+        CLEAR_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<15);
+        CLEAR_AOBUS_REG_MASK(AO_GPIO_O_EN_N, 1<<31);
+    }
+    return;
+}
+
+static struct meson_pm_config aml_pm_pdata = {
+    .pctl_reg_base = (void *)IO_APB_BUS_BASE,
+    .mmc_reg_base = (void *)APB_REG_ADDR(0x1000),
+    .hiu_reg_base = (void *)CBUS_REG_ADDR(0x1000),
+    .power_key = (1<<8),
+    .ddr_clk = 0x00110820,
+    .sleepcount = 128,
+    .set_vccx2 = m6ref_set_vccx2,
+    .core_voltage_adjust = 7,  //5,8
+};
+
+static int __init meson_pm_probe(struct platform_device *pdev)
+{
+	printk(KERN_INFO "enter meson_pm_probe!\n");
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	early_suspend.level = EARLY_SUSPEND_LEVEL_DISABLE_FB;
+	early_suspend.suspend = meson_system_early_suspend;
+	early_suspend.resume = meson_system_late_resume;
+	register_early_suspend(&early_suspend);
+#endif
+	pdev->dev.platform_data=&aml_pm_pdata;
+	pdata = pdev->dev.platform_data;
+	if (!pdata) {
+		dev_err(&pdev->dev, "cannot get platform data\n");
+		return -ENOENT;
+	}
+	suspend_set_ops(&meson_pm_ops);
+
+	clk81 = clk_get_sys("clk81", NULL);
+	clkxtal = clk_get_sys("xtal", NULL);
+	printk(KERN_INFO "meson_pm_probe done !\n");
+	return 0;
+}
+
+static int __exit meson_pm_remove(struct platform_device *pdev)
+{
+#ifdef CONFIG_HAS_EARLYSUSPEND
+	unregister_early_suspend(&early_suspend);
+#endif
+	return 0;
+}
+#ifdef CONFIG_OF
+static const struct of_device_id amlogic_pm_dt_match[]={
+	{	.compatible = "amlogic,pm-m8",
+	},
+};
+#else
+#define amlogic_nand_dt_match NULL
+#endif
+
+static struct platform_driver meson_pm_driver = {
+	.driver = {
+		.name     = "pm-meson",
+		.owner     = THIS_MODULE,
+		.of_match_table=amlogic_pm_dt_match,
+	},
+	.remove = __exit_p(meson_pm_remove),
+};
+
+static int __init meson_pm_init(void)
+{
+	printk("enter %s\n",__func__);
+	return platform_driver_probe(&meson_pm_driver, meson_pm_probe);
+}
+late_initcall(meson_pm_init);
+
diff --git a/arch/arm/mach-mesong9tv/power_gate.c b/arch/arm/mach-mesong9tv/power_gate.c
new file mode 100644
index 000000000000..b918500a020e
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/power_gate.c
@@ -0,0 +1,690 @@
+/*
+ * arch/arm/mach-mesong9tv/power_gate.c
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/module.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/hardirq.h>
+#include <linux/spinlock_types.h>
+#include <linux/spinlock.h>
+
+#include <mach/am_regs.h>
+#include <mach/power_gate.h>
+#include <mach/mod_gate.h>
+
+short GCLK_ref[GCLK_IDX_MAX];
+EXPORT_SYMBOL(GCLK_ref);
+
+#ifdef PRINT_DEBUG_INFO
+#define PRINT_INFO(...)		printk(__VA_ARGS__)
+#else
+#define PRINT_INFO(...)
+#endif
+
+typedef struct{
+	const char* name;
+	const mod_type_t type;
+	int ref;
+	int flag;
+	int dc_en;
+	int no_share;
+}mod_record_t;
+
+DEFINE_SPINLOCK(gate_lock);
+
+static mod_record_t mod_records[MOD_MAX_NUM + 1] = {
+	{
+		.name = "vdec",
+		.type = MOD_VDEC,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "audio",
+		.type = MOD_AUDIO,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "hdmi",
+		.type = MOD_HDMI,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "venc",
+		.type = MOD_VENC,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "tcon",
+		.type = MOD_TCON,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+		.no_share = 1,
+	},{
+		.name = "lcd",
+		.type = MOD_LCD,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+		.no_share = 1,
+	},{
+		.name = "spi",
+		.type = MOD_SPI,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "uart0",
+		.type = MOD_UART0,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "uart1",
+		.type = MOD_UART1,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "uart2",
+		.type = MOD_UART2,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "sana",
+		.type = MOD_SANA,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "rom",
+		.type = MOD_ROM,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "efuse",
+		.type = MOD_EFUSE,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "random_num_gen",
+		.type = MOD_RANDOM_NUM_GEN,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "ethernet",
+		.type = MOD_ETHERNET,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "media_cpu",
+		.type = MOD_MEDIA_CPU,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "ge2d",
+		.type = MOD_GE2D,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "ahb",
+		.type = MOD_AHB,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "demux",
+		.type = MOD_DEMUX,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "smart_card",
+		.type = MOD_SMART_CARD,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "sdhc",
+		.type = MOD_SDHC,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "stream",
+		.type = MOD_STREAM,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "blk_mov",
+		.type = MOD_BLK_MOV,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "dvin",
+		.type = MOD_MISC_DVIN,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "usb",
+		.type = MOD_USB,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 0,
+	},{
+		.name = "sdio",
+		.type = MOD_SDIO,
+		.ref = 0,
+		.flag = 1,
+		.dc_en = 1,
+	},{
+		.name = NULL,
+		.type = -1,
+		.ref = -1,
+		.flag = -1,
+		.dc_en = -1,
+	}, //end of the record array
+};
+
+
+static int _switch_gate(mod_type_t type, int flag)
+{
+	int ret = 0;
+	switch(type) {
+	case MOD_VDEC:
+		PRINT_INFO("turn %s vdec module\n", flag?"on":"off");
+		if (flag) {
+			//__CLK_GATE_ON(DOS);
+			//aml_set_reg32_mask(P_HHI_VDEC_CLK_CNTL, 1 << 8);
+		} else {
+			//__CLK_GATE_OFF(DOS);
+			//aml_clr_reg32_mask(P_HHI_VDEC_CLK_CNTL, 1 << 8);
+		}
+		break;
+	case MOD_AUDIO:
+		PRINT_INFO("turn %s audio module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(AIU_AI_TOP_GLUE);
+			__CLK_GATE_ON(AIU_IEC958);
+			__CLK_GATE_ON(AIU_I2S_OUT);
+			__CLK_GATE_ON(AIU_AMCLK_MEASURE);
+			__CLK_GATE_ON(AIU_AIFIFO2);
+			__CLK_GATE_ON(AIU_AUD_MIXER);
+			__CLK_GATE_ON(AIU_MIXER_REG);
+			__CLK_GATE_ON(AIU_ADC);
+			__CLK_GATE_ON(AIU_TOP_LEVEL);
+			//__CLK_GATE_ON(AIU_PCLK);
+			__CLK_GATE_ON(AIU_AOCLK);
+			__CLK_GATE_ON(AIU_ICE958_AMCLK);
+			__CLK_GATE_ON(AUD_IN);
+		} else {
+			__CLK_GATE_OFF(AIU_AI_TOP_GLUE);
+			__CLK_GATE_OFF(AIU_IEC958);
+			__CLK_GATE_OFF(AIU_I2S_OUT);
+			__CLK_GATE_OFF(AIU_AMCLK_MEASURE);
+			__CLK_GATE_OFF(AIU_AIFIFO2);
+			__CLK_GATE_OFF(AIU_AUD_MIXER);
+			__CLK_GATE_OFF(AIU_MIXER_REG);
+			__CLK_GATE_OFF(AIU_ADC);
+			__CLK_GATE_OFF(AIU_TOP_LEVEL);
+			//__CLK_GATE_OFF(AIU_PCLK);
+			__CLK_GATE_OFF(AIU_AOCLK);
+			__CLK_GATE_OFF(AIU_ICE958_AMCLK);
+			__CLK_GATE_OFF(AUD_IN);
+
+		}
+		break;
+	#if 0
+	case MOD_HDMI:
+		PRINT_INFO("turn %s hdmi module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(HDMI_INTR_SYNC);
+			//__CLK_GATE_ON(HDMI_RX);
+			__CLK_GATE_ON(HDMI_PCLK);
+		} else {
+			__CLK_GATE_OFF(HDMI_INTR_SYNC);
+			//__CLK_GATE_OFF(HDMI_RX);
+			__CLK_GATE_OFF(HDMI_PCLK);
+		}
+		break;
+	case MOD_VENC:
+		PRINT_INFO("turn %s venc module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(VCLK2_VENCI);
+			__CLK_GATE_ON(VCLK2_VENCI1);
+			__CLK_GATE_ON(VCLK2_VENCP);
+			__CLK_GATE_ON(VCLK2_VENCP1);
+			__CLK_GATE_ON(VCLK2_ENCI);
+			__CLK_GATE_ON(VCLK2_ENCP);
+			__CLK_GATE_ON(VCLK2_VENCT);
+			__CLK_GATE_ON(VCLK2_VENCT1);
+			__CLK_GATE_ON(VCLK2_OTHER);
+			__CLK_GATE_ON(VCLK2_OTHER1);
+			__CLK_GATE_ON(ENC480P);
+			//__CLK_GATE_ON(VENC_DAC);
+			__CLK_GATE_ON(DAC_CLK);
+		} else {
+			__CLK_GATE_OFF(VCLK2_VENCI);
+			__CLK_GATE_OFF(VCLK2_VENCI1);
+			__CLK_GATE_OFF(VCLK2_VENCP);
+		#ifndef CONFIG_MACH_MESON6_G02_DONGLE
+			__CLK_GATE_OFF(VCLK2_VENCP1);
+		#endif
+
+			__CLK_GATE_OFF(VCLK2_ENCI);
+		#ifndef CONFIG_MACH_MESON6_G02_DONGLE
+			__CLK_GATE_OFF(VCLK2_ENCP);
+		#endif
+			__CLK_GATE_OFF(VCLK2_VENCT);
+			__CLK_GATE_OFF(VCLK2_VENCT1);
+			__CLK_GATE_OFF(VCLK2_OTHER);
+			__CLK_GATE_OFF(VCLK2_OTHER1);
+			__CLK_GATE_OFF(ENC480P);
+			__CLK_GATE_OFF(DAC_CLK);
+		}
+		break;
+	case MOD_TCON:
+		//PRINT_INFO("turn %s tcon module\n", flag?"on":"off");
+		/*if (flag) {
+			//__CLK_GATE_ON(VCLK2_ENCT);
+		} else {
+			//__CLK_GATE_OFF(VCLK2_ENCT);
+		}*/
+		break;
+	case MOD_LCD:
+		PRINT_INFO("turn %s lcd module\n", flag?"on":"off");
+		if (flag) {
+			//__CLK_GATE_ON(VCLK2_ENCL);
+			__CLK_GATE_ON(VCLK2_VENCL);
+			__CLK_GATE_ON(EDP_CLK);
+		} else {
+			__CLK_GATE_OFF(EDP_CLK);
+			__CLK_GATE_OFF(VCLK2_VENCL);
+			//__CLK_GATE_OFF(VCLK2_ENCL);
+		}
+		break;
+	#endif
+	case MOD_SPI:
+		PRINT_INFO("turn %s spi module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(SPICC);
+			__CLK_GATE_ON(SPI);
+		} else {
+			__CLK_GATE_OFF(SPICC);
+			__CLK_GATE_OFF(SPI);
+		}
+		break;
+	case MOD_UART0:
+		PRINT_INFO("turn %s uart0 module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(UART0);
+		} else {
+			__CLK_GATE_OFF(UART0);
+		}
+		break;
+	case MOD_UART1:
+		PRINT_INFO("turn %s uart1 module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(UART1);
+		} else {
+			__CLK_GATE_OFF(UART1);
+		}
+		break;
+	case MOD_UART2:
+		PRINT_INFO("turn %s uart2 module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(UART2);
+		} else {
+			__CLK_GATE_OFF(UART2);
+		}
+		break;
+	case MOD_SANA:
+		PRINT_INFO("turn %s sana module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(SANA);
+		} else {
+			__CLK_GATE_OFF(SANA);
+		}
+		break;
+	case MOD_ROM:
+		PRINT_INFO("turn %s rom module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(ROM_CLK);
+		} else {
+			__CLK_GATE_OFF(ROM_CLK);
+		}
+		break;
+	case MOD_EFUSE:
+		PRINT_INFO("turn %s efuse module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(EFUSE);
+		} else {
+			__CLK_GATE_OFF(EFUSE);
+		}
+		break;
+	case MOD_RANDOM_NUM_GEN:
+		PRINT_INFO("turn %s random_num_gen module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(RANDOM_NUM_GEN);
+		} else {
+			__CLK_GATE_OFF(RANDOM_NUM_GEN);
+		}
+		break;
+	case MOD_ETHERNET:
+		PRINT_INFO("turn %s ethernet module\n", flag?"on":"off");
+		if (flag) {
+			__CLK_GATE_ON(ETHERNET);
+		} else {
+			__CLK_GATE_OFF(ETHERNET);
+		}
+		break;
+	case MOD_MEDIA_CPU:
+		PRINT_INFO("trun %s Audio DSP\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(MEDIA_CPU);
+		}else{
+			 __CLK_GATE_OFF(MEDIA_CPU);
+		}
+		break;
+	case MOD_GE2D:
+		PRINT_INFO("trun %s GE2D\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(GE2D);
+		}else{
+			__CLK_GATE_OFF(GE2D);
+		}
+		break;
+	case MOD_AHB:
+		PRINT_INFO("trun %s ahb\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(AHB_ARB0);
+			__CLK_GATE_ON(AHB_BRIDGE);
+			__CLK_GATE_ON(AHB_DATA_BUS);
+			__CLK_GATE_ON(AHB_CONTROL_BUS);
+		}else{
+			__CLK_GATE_OFF(AHB_ARB0);
+			__CLK_GATE_OFF(AHB_BRIDGE);
+			__CLK_GATE_OFF(AHB_DATA_BUS);
+			__CLK_GATE_OFF(AHB_CONTROL_BUS);
+		}
+		break;
+	case MOD_DEMUX:
+		PRINT_INFO("trun %s demux\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(DEMUX);
+		}else{
+			__CLK_GATE_OFF(DEMUX);
+		}
+		break;
+	case MOD_SMART_CARD:
+		PRINT_INFO("trun %s smart card\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(SMART_CARD_MPEG_DOMAIN);
+		}else{
+			__CLK_GATE_OFF(SMART_CARD_MPEG_DOMAIN);
+		}
+		break;
+	case MOD_SDHC:
+		PRINT_INFO("trun %s sdhc\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(SDHC);
+		}else{
+			__CLK_GATE_OFF(SDHC);
+		}
+		break;
+	case MOD_STREAM:
+		PRINT_INFO("trun %s stream\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(STREAM);
+		}else{
+			__CLK_GATE_OFF(STREAM);
+		}
+		break;
+	case MOD_BLK_MOV:
+		PRINT_INFO("trun %s blk_mov\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(BLK_MOV);
+		}else{
+			__CLK_GATE_OFF(BLK_MOV);
+		}
+		break;
+	case MOD_MISC_DVIN:
+		PRINT_INFO("trun %s dvin\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(MISC_DVIN);
+		}else{
+			__CLK_GATE_OFF(MISC_DVIN);
+		}
+		break;
+	case MOD_USB:
+		PRINT_INFO("trun %s usb\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(USB_GENERAL);
+			__CLK_GATE_ON(MISC_USB_TO_DDR);
+		}else{
+			__CLK_GATE_ON(MISC_USB_TO_DDR);
+			__CLK_GATE_OFF(USB_GENERAL);
+		}
+		break;
+	case MOD_SDIO:
+		PRINT_INFO("trun %s rdma\n", flag? " on" : "off");
+		if(flag){
+			__CLK_GATE_ON(SDIO);
+		}else{
+			__CLK_GATE_OFF(SDIO);
+		}
+		break;
+	default:
+		PRINT_INFO("mod type not support\n");
+		ret = -1;
+		break;
+	}
+	return ret;
+}
+
+static int get_mod(mod_record_t* mod_record)
+{
+	int ret = 0;
+	unsigned long flags;
+	PRINT_INFO("get mod  %s\n", mod_record->name);
+	spin_lock_irqsave(&gate_lock, flags);
+	ret = _switch_gate(mod_record->type, 1);
+	spin_unlock_irqrestore(&gate_lock, flags);
+	return ret;
+}
+
+static int put_mod(mod_record_t* mod_record)
+{
+	int ret = 0;
+	unsigned long flags;
+	PRINT_INFO("put mod  %s\n", mod_record->name);
+	spin_lock_irqsave(&gate_lock, flags);
+	ret = _switch_gate(mod_record->type, 0);
+	spin_unlock_irqrestore(&gate_lock, flags);
+	return ret;
+}
+
+void switch_mod_gate_by_type(mod_type_t type, int flag)
+{
+	if (flag)
+		get_mod(&mod_records[type]);
+	else
+		put_mod(&mod_records[type]);
+}
+EXPORT_SYMBOL(switch_mod_gate_by_type);
+
+void switch_mod_gate_by_name(const char* mod_name, int flag)
+{
+	int i = 0;
+	//PRINT_INFO("arg mod_name is %s\n", mod_name);
+	while(mod_records[i].name && i < MOD_MAX_NUM) {
+		//PRINT_INFO("mod%d name is %s\n", i, mod_records[i].name);
+		if (!strncmp(mod_name, mod_records[i].name, strlen(mod_name))) {
+			if (flag)
+				get_mod(&mod_records[i]);
+			else
+				put_mod(&mod_records[i]);
+			break;
+		}
+		i++;
+	}
+}
+EXPORT_SYMBOL(switch_mod_gate_by_name);
+
+void switch_lcd_mod_gate(int flag)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&gate_lock, flags);
+	PRINT_INFO("turn %s lcd module\n", flag?"on":"off");
+	if (flag) {
+		//__CLK_GATE_ON(VCLK2_ENCL);
+		__CLK_GATE_ON(VCLK2_VENCL);
+		__CLK_GATE_ON(EDP_CLK);
+	} else {
+		__CLK_GATE_OFF(EDP_CLK);
+		__CLK_GATE_OFF(VCLK2_VENCL);
+		//__CLK_GATE_OFF(VCLK2_ENCL);
+	}
+	spin_unlock_irqrestore(&gate_lock, flags);
+}
+EXPORT_SYMBOL(switch_lcd_mod_gate);
+
+void power_gate_init(void)
+{
+	GATE_INIT(DDR);
+	GATE_INIT(DOS);
+	GATE_INIT(AHB_BRIDGE);
+	GATE_INIT(ISA);
+	GATE_INIT(PL310_CBUS);
+	GATE_INIT(PERIPHS_TOP);
+	GATE_INIT(SPICC);
+	GATE_INIT(I2C);
+	GATE_INIT(SAR_ADC);
+	GATE_INIT(SMART_CARD_MPEG_DOMAIN);
+	GATE_INIT(RANDOM_NUM_GEN);
+	GATE_INIT(UART0);
+	GATE_INIT(SDHC);
+	GATE_INIT(STREAM);
+	GATE_INIT(ASYNC_FIFO);
+	GATE_INIT(SDIO);
+	//GATE_INIT(AUD_BUF);
+	GATE_INIT(HIU_PARSER);
+	//GATE_INIT(HDMI_RX);
+	GATE_INIT(ASSIST_MISC);
+	GATE_INIT(SPI);
+	GATE_INIT(AUD_IN);
+	GATE_INIT(ETHERNET);
+	GATE_INIT(DEMUX);
+	GATE_INIT(AIU_AI_TOP_GLUE);
+	GATE_INIT(AIU_IEC958);
+	GATE_INIT(AIU_I2S_OUT);
+	GATE_INIT(AIU_AMCLK_MEASURE);
+	GATE_INIT(AIU_AIFIFO2);
+	GATE_INIT(AIU_AUD_MIXER);
+	GATE_INIT(AIU_MIXER_REG);
+	GATE_INIT(AIU_ADC);
+	GATE_INIT(BLK_MOV);
+	GATE_INIT(AIU_TOP_LEVEL);
+	GATE_INIT(UART1);
+	//GATE_INIT(CSI_DIG_CLKIN);
+	GATE_INIT(GE2D);
+	//GATE_INIT(USB0);
+	//GATE_INIT(USB1);
+	GATE_INIT(RESET);
+	//GATE_INIT(NAND);
+	GATE_INIT(HIU_PARSER_TOP);
+	GATE_INIT(USB_GENERAL);
+	GATE_INIT(VDIN1);
+	GATE_INIT(AHB_ARB0);
+	GATE_INIT(EFUSE);
+	GATE_INIT(ROM_CLK);
+	GATE_INIT(AHB_DATA_BUS);
+	GATE_INIT(AHB_CONTROL_BUS);
+	GATE_INIT(HDMI_INTR_SYNC);
+	GATE_INIT(HDMI_PCLK);
+	GATE_INIT(MISC_USB_TO_DDR);
+	//GATE_INIT(MISC_USB0_TO_DDR);
+	//GATE_INIT(AIU_PCLK);
+	GATE_INIT(MMC_PCLK);
+	GATE_INIT(MISC_DVIN);
+	GATE_INIT(UART2);
+	GATE_INIT(SANA);
+	GATE_INIT(VPU_INTR);
+	GATE_INIT(SECURE_AHP_APB3);
+	GATE_INIT(CLK81_TO_A9);
+	GATE_INIT(VCLK2_VENCI);
+	GATE_INIT(VCLK2_VENCI1);
+	GATE_INIT(VCLK2_VENCP);
+	GATE_INIT(VCLK2_VENCP1);
+	GATE_INIT(VCLK2_VENCT);
+	GATE_INIT(VCLK2_VENCT1);
+	GATE_INIT(VCLK2_OTHER);
+	GATE_INIT(VCLK2_ENCI);
+	GATE_INIT(VCLK2_ENCP);
+	GATE_INIT(DAC_CLK);
+	GATE_INIT(AIU_AOCLK);
+	GATE_INIT(AIU_ICE958_AMCLK);
+	GATE_INIT(ENC480P);
+	GATE_INIT(RANDOM_NUM_GEN1);
+	GATE_INIT(GCLK_VENCL_INT);
+	//GATE_INIT(VCLK2_ENCL);
+	GATE_INIT(MMC_CLK);
+	GATE_INIT(VCLK2_VENCL);
+	GATE_INIT(VCLK2_OTHER1);
+	GATE_INIT(EDP_CLK);
+	GATE_INIT(MEDIA_CPU);
+}
+
+
+static int __init meson_mode_gate_init(void)
+{
+	power_gate_init();
+	return 0;
+}
+arch_initcall(meson_mode_gate_init);
+
+int  video_dac_enable(unsigned char enable_mask)
+{
+	//switch_mod_gate_by_name("venc", 1);
+	//CLEAR_CBUS_REG_MASK(VENC_VDAC_SETTING, enable_mask & 0x1f);
+	return 0;
+}
+EXPORT_SYMBOL(video_dac_enable);
+
+int  video_dac_disable()
+{
+	//SET_CBUS_REG_MASK(VENC_VDAC_SETTING, 0x1f);
+	//switch_mod_gate_by_name("venc", 0);
+
+	return 0;
+}
+EXPORT_SYMBOL(video_dac_disable);
+
+
diff --git a/arch/arm/mach-mesong9tv/power_suspend.c b/arch/arm/mach-mesong9tv/power_suspend.c
new file mode 100644
index 000000000000..27d842ba1f74
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/power_suspend.c
@@ -0,0 +1,131 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/mm.h>
+#include <linux/sched.h>
+#include <linux/interrupt.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/dma-mapping.h>
+#include <linux/mtd/mtd.h>
+#include <linux/mtd/nand.h>
+#include <linux/mtd/nand_ecc.h>
+#include <linux/mtd/partitions.h>
+#include <linux/device.h>
+#include <linux/spi/flash.h>
+#include <mach/hardware.h>
+#include <plat/platform.h>
+#include <mach/memory.h>
+#include <mach/clock.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/setup.h>
+//#include <mach/lm.h>
+#include <asm/memory.h>
+#include <asm/mach/map.h>
+//#include <mach/nand.h>
+#include <linux/i2c.h>
+#include <linux/i2c-aml.h>
+#include <mach/power_gate.h>
+//#include <linux/aml_bl.h>
+#include <linux/delay.h>
+#include <mach/usbclock.h>
+#include <mach/am_regs.h>
+#include <linux/file.h>
+#include <asm/cacheflush.h>
+#include <plat/regops.h>
+#include <linux/reboot.h>
+#ifdef CONFIG_SUSPEND_WATCHDOG
+#include <mach/watchdog.h>
+#endif /* CONFIG_SUSPEND_WATCHDOG */
+#include <linux/amlogic/aml_wdt.h>
+//appf functions
+#define APPF_INITIALIZE             0
+#define APPF_POWER_DOWN_CPU         1
+#define APPF_POWER_UP_CPUS          2
+//appf flags
+#define APPF_SAVE_PMU          (1<<0)
+#define APPF_SAVE_TIMERS       (1<<1)
+#define APPF_SAVE_VFP          (1<<2)
+#define APPF_SAVE_DEBUG        (1<<3)
+#define APPF_SAVE_L2           (1<<4)
+
+/******************
+***You need sync this param struct with arc_pwr.h is suspend firmware.
+***1st word is used for arc output control: serial_disable.
+***2nd word...
+***
+***If you need transfer more params, you need sync the struck define in arc_pwr.h
+*******************/
+#define PARAM_ADDR             (IO_SRAM_BASE + 0x10200)
+
+unsigned int arc_serial_disable;
+
+
+#if 0
+#ifdef CONFIG_HARDWARE_WATCHDOG
+void disable_watchdog(void)
+{
+	printk(KERN_INFO "** disable watchdog\n");
+    aml_write_reg32(P_WATCHDOG_RESET, 0);
+    aml_clr_reg32_mask(P_WATCHDOG_TC,(1 << WATCHDOG_ENABLE_BIT));
+}
+void enable_watchdog(void)
+{
+	printk(KERN_INFO "** enable watchdog\n");
+    aml_write_reg32(P_WATCHDOG_RESET, 0);
+    aml_write_reg32(P_WATCHDOG_TC, 1 << WATCHDOG_ENABLE_BIT | 0x1FFFFF);//about 20sec
+    
+    aml_write_reg32(P_AO_RTI_STATUS_REG1, MESON_NORMAL_BOOT);
+}
+void reset_watchdog(void)
+{
+	//printk(KERN_INFO "** reset watchdog\n");
+    aml_write_reg32(P_WATCHDOG_RESET, 0);	
+}
+#endif /* CONFIG_HARDWARE_WATCHDOG */
+#endif
+
+static void check_in_param(void)
+{
+	unsigned int p_addr;
+
+	p_addr = PARAM_ADDR;
+	*((unsigned int *)p_addr) = arc_serial_disable;
+
+	return;
+}
+
+int meson_power_suspend(void)
+{
+	static int test_flag = 0;
+	unsigned addr;
+	unsigned p_addr;
+	void	(*pwrtest_entry)(unsigned,unsigned,unsigned,unsigned);
+
+	check_in_param();
+	flush_cache_all();
+
+	addr = 0x04F04400;//entry.s start
+	p_addr = (unsigned)__phys_to_virt(addr);
+	pwrtest_entry = (void (*)(unsigned,unsigned,unsigned,unsigned))p_addr;
+	if(test_flag != 1234){
+		test_flag = 1234;
+		printk("initial appf\n");
+		pwrtest_entry(APPF_INITIALIZE,0,0,IO_PL310_BASE & 0xffff0000);
+	}
+	if(AML_WDT_ENABLED){
+		disable_watchdog();
+		if(awdtv)
+			enable_watchdog(awdtv->firmware_timeout*awdtv->one_second);
+	}
+
+	printk("power down cpu --\n");
+	pwrtest_entry(APPF_POWER_DOWN_CPU,0,0,APPF_SAVE_PMU|APPF_SAVE_VFP|APPF_SAVE_L2 |( IO_PL310_BASE & 0xffff0000));
+	if(AML_WDT_ENABLED){
+		disable_watchdog();
+		if(awdtv)
+			enable_watchdog(awdtv->suspend_timeout*awdtv->one_second);
+	}
+	return 0;
+}
diff --git a/arch/arm/mach-mesong9tv/smp.c b/arch/arm/mach-mesong9tv/smp.c
new file mode 100644
index 000000000000..d93d4c09f28a
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/smp.c
@@ -0,0 +1,299 @@
+/*
+ *  Copyright (C) 2002 ARM Ltd.
+ *  All Rights Reserved
+ *  Copyright (c) 2010, Code Aurora Forum. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+#include <linux/init.h>
+#include <linux/errno.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/jiffies.h>
+#include <linux/smp.h>
+#include <linux/io.h>
+#include <plat/io.h>
+#include <mach/io.h>
+#include <mach/cpu.h>
+#include <mach/smp.h>
+#include <asm/smp_scu.h>
+#include <asm/hardware/gic.h>
+#include <asm/smp_plat.h>
+#include <asm/smp_scu.h>
+#include <asm/cacheflush.h>
+#include <asm/mach-types.h>
+#include <linux/percpu.h>
+
+static DEFINE_SPINLOCK(boot_lock);
+
+#if 0
+static unsigned int cpu_entry_code[16];
+/*
+ * Write pen_release in a way that is guaranteed to be visible to all
+ * observers, irrespective of whether they're taking part in coherency
+ * or not.  This is necessary for the hotplug code to work reliably.
+ */
+void __init backup_cpu_entry_code(void)
+{
+	unsigned int* p = 0xc0000000;
+	unsigned int i;
+	unsigned int count = sizeof(cpu_entry_code)/sizeof(cpu_entry_code[0]);
+	for(i=0; i<count; i++)
+		cpu_entry_code[i] = p[i];
+}
+
+static void check_and_rewrite_cpu_entry(void)
+{
+	unsigned int i;
+	unsigned int *p=0xc0000000;
+	int changed=0;
+	unsigned int count=sizeof(cpu_entry_code)/sizeof(cpu_entry_code[0]);
+	for(i=0; i<count; i++){
+		if(cpu_entry_code[i] != p[i]){
+			changed=1;
+			break;
+		}
+	}
+	if(changed != 0){
+		printk("!!!CPU boot warning: cpu entry code has been changed!\n");
+		for(i=0, p=0xc0000000; i<count; i++)
+			p[i]=cpu_entry_code[i];
+
+		smp_wmb();
+		__cpuc_flush_dcache_area((void *)p, sizeof(cpu_entry_code));
+		outer_clean_range(__pa(p), __pa(p+count));
+	}
+}
+#endif
+
+static void write_pen_release(int val)
+{
+	pen_release = val;
+	smp_wmb();
+	__cpuc_flush_dcache_area((void *)&pen_release, sizeof(pen_release));
+	outer_clean_range(__pa(&pen_release), __pa(&pen_release + 1));
+}
+
+static void meson_secondary_set(unsigned int cpu)
+{
+	meson_set_cpu_ctrl_addr(cpu,
+		(const uint32_t)virt_to_phys(meson_secondary_startup));
+	meson_set_cpu_ctrl_reg(cpu, 1);
+	smp_wmb();
+	mb();
+}
+
+void __cpuinit meson_secondary_init(unsigned int cpu)
+{
+
+	/*
+	 * if any interrupts are already enabled for the primary
+	 * core (e.g. timer irq), then they will not have been enabled
+	 * for us: do so
+	 */
+//	gic_secondary_init(0);
+#ifdef CONFIG_MESON_ARM_GIC_FIQ
+extern void  init_fiq(void);
+	init_fiq();
+#endif
+
+	/*
+	 * let the primary processor know we're out of the
+	 * pen, then head off into the C entry point
+	 */
+	write_pen_release(-1);
+	smp_wmb();
+
+	/*
+	 * Synchronise with the boot thread.
+	 */
+	spin_lock(&boot_lock);
+	spin_unlock(&boot_lock);
+}
+
+int __cpuinit meson_boot_secondary(unsigned int cpu, struct task_struct *idle)
+{
+	unsigned long timeout;
+
+	/*
+	* Set synchronisation state between this boot processor
+	* and the secondary one
+	*/
+	spin_lock(&boot_lock);
+
+	/*
+	 * The secondary processor is waiting to be released from
+	 * the holding pen - release it, then wait for it to flag
+	 * that it has been released by resetting pen_release.
+	 */
+	//printk("write pen_release: %d\n",cpu_logical_map(cpu));
+	write_pen_release(cpu_logical_map(cpu));
+
+#ifndef CONFIG_MESON_TRUSTZONE
+	//check_and_rewrite_cpu_entry();
+	meson_set_cpu_power_ctrl(cpu, 1);
+#endif
+	meson_secondary_set(cpu);
+	dsb_sev();
+
+	smp_send_reschedule(cpu);
+	timeout = jiffies + (10* HZ);
+	while (time_before(jiffies, timeout)) {
+		smp_rmb();
+		if (pen_release == -1)
+			break;
+		udelay(10);
+	}
+
+	/*
+	 * now the secondary core is starting up let it run its
+	 * calibrations, then wait for it to finish
+	 */
+	spin_unlock(&boot_lock);
+	return pen_release != -1 ? -ENOSYS : 0;
+}
+
+/*
+ * Initialise the CPU possible map early - this describes the CPUs
+ * which may be present or become present in the system. The msm8x60
+ * does not support the ARM SCU, so just set the possible cpu mask to
+ * NR_CPUS.
+ */
+void __init meson_smp_init_cpus(void)
+{
+	unsigned int i;
+
+	for (i = 0; i < NR_CPUS; i++)
+		set_cpu_possible(i, true);
+
+	 set_smp_cross_call(gic_raise_softirq);
+}
+
+void __init meson_smp_prepare_cpus(unsigned int max_cpus)
+{
+	int i;
+
+	/*
+	* Initialise the present map, which describes the set of CPUs
+	* actually populated at the present time.
+	*/
+	for (i = 0; i < max_cpus; i++)
+		set_cpu_present(i, true);
+	/*
+	* Initialise the SCU and wake up the secondary core using
+	* wakeup_secondary().
+	*/
+	scu_enable((void __iomem *) IO_PERIPH_BASE);
+}
+
+struct smp_operations meson_smp_ops __initdata = {
+	.smp_init_cpus		= meson_smp_init_cpus,
+	.smp_prepare_cpus	= meson_smp_prepare_cpus,
+	.smp_secondary_init	= meson_secondary_init,
+	.smp_boot_secondary	= meson_boot_secondary,
+#ifdef CONFIG_HOTPLUG_CPU
+	.cpu_die		= meson_cpu_die,
+	.cpu_kill         =meson_cpu_kill,
+	.cpu_disable    =meson_cpu_disable,
+#endif
+};
+
+#ifdef CONFIG_SMP
+static DEFINE_PER_CPU(unsigned long, in_wait);
+static unsigned long timeout_flag;
+extern void cpu_maps_update_begin(void);
+extern void cpu_maps_update_done(void);
+
+typedef enum _ENUM_SMP_FLAG {
+    SMP_FLAG_IDLE = 0,
+    SMP_FLAG_GETED,
+    SMP_FLAG_FINISHED,
+    SMP_FLAG_NUM
+} ENUM_SCAL_FLAG;
+
+static void smp_wait(void * info)
+{
+/*This function is call under automic context. So, need not irq protect.*/
+	unsigned int cpu;
+
+	cpu = smp_processor_id();
+
+	info = info;
+
+	per_cpu(in_wait, cpu) = SMP_FLAG_GETED;
+
+	printk("cpu%d stall.\n", cpu);
+	while((per_cpu(in_wait, cpu) == SMP_FLAG_GETED) && !timeout_flag)//waiting until flag != SMP_FLAG_GETED
+		cpu_relax();
+
+	return;
+}
+
+/*
+Try exclusive cpu run func, the others wait it for finishing.
+ If try fail, you can try again.
+ NOTE: It need call at non-automatic context, because of mutex_lock @ cpu_maps_update_begin*/
+int try_exclu_cpu_exe(exl_call_func_t func, void * p_arg)
+{
+	unsigned int cpu;
+	unsigned long irq_flags;
+	unsigned long jiffy_timeout;
+	unsigned long count=0;
+	int ret;
+	/*Protect hotplug scenary*/
+	cpu_maps_update_begin();
+
+	timeout_flag = 0; // clean timeout flag;
+
+	for(cpu=0; cpu< CONFIG_NR_CPUS; cpu++)
+		if(per_cpu(in_wait, cpu))
+		{
+			printk("The previous call is not complete yet!\n");
+			ret = -1;
+			goto finish2;
+		}
+
+	smp_call_function(/*(void (*) (void * info))*/smp_wait, NULL, 0);
+
+	irq_flags = arch_local_irq_save();
+
+	jiffy_timeout = jiffies + HZ/2; //0.5s
+	while(count+1 != num_online_cpus())//the other cpus all in wait loop when count+1 == num_online_cpus()
+	{
+		if(time_after(jiffies, jiffy_timeout))
+		{
+			printk("Cannot stall other cpus. Timeout!\n");
+
+			timeout_flag = 1;
+
+			ret = -1;
+			goto finish1;
+		}
+
+		for(cpu=0, count=0; cpu< CONFIG_NR_CPUS; cpu++)
+			if(per_cpu(in_wait, cpu) == SMP_FLAG_GETED)
+				count ++;
+	}
+
+	ret = func(p_arg);
+
+finish1:
+	for(cpu=0; cpu< CONFIG_NR_CPUS; cpu++)
+		per_cpu(in_wait, cpu) = SMP_FLAG_IDLE;
+
+	arch_local_irq_restore(irq_flags);
+
+finish2:
+	cpu_maps_update_done();
+	return ret;
+}
+#else//CONFIG_SMP
+int try_exclu_cpu_exe(exl_call_func_t func, void * p_arg)
+{
+	return func(p_arg);
+}
+#endif
+
diff --git a/arch/arm/mach-mesong9tv/thermal.c b/arch/arm/mach-mesong9tv/thermal.c
new file mode 100644
index 000000000000..ec35de6f1076
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/thermal.c
@@ -0,0 +1,74 @@
+
+#include <linux/amlogic/efuse.h>
+#include <linux/amlogic/saradc.h>
+#include <mach/thermal.h>
+#include <linux/slab.h>
+
+#define  NOT_WRITE_EFUSE 0x0
+#define EFUSE_MIGHT_WRONG 0x8
+#define EFUEE_PRIVATE 0x4
+#define EFUSE_OPS 0xa
+struct temp_sensor{
+	int flag;
+	int trimming;
+	int adc_efuse;
+	int efuse_flag;
+};
+struct temp_sensor *temps;
+int thermal_firmware_init(void)
+{
+	int err;
+	char buf[4]={0};
+	int temp=-1,TS_C=-1,flag=0;
+	err=efuse_read_intlItem("temper_cvbs",buf,4);
+	if(err>=0){
+		printk("buf[0]=%x,buf[1]=%x,err=%d\n",buf[0],buf[1],err);
+		temps=kzalloc(sizeof(*temps),GFP_KERNEL);
+		temp=0;TS_C=0;
+		temp=buf[1];
+		temp=(temp<<8)|buf[0];
+		TS_C=temp&0x1f;
+		flag=0;
+		flag=(temp&0x8000)>>15;
+		temp=(temp&0x7fff)>>5;
+		printk("adc=%d,TS_C=%d,flag=%d\n",temp,TS_C,flag);
+		temps->flag=flag;
+		temps->trimming=TS_C;
+		temps->adc_efuse=temp;
+		temps->efuse_flag=buf[3]>>4;
+		printk("efuse_flag=%x\n",temps->efuse_flag);
+		if((temps->efuse_flag == EFUEE_PRIVATE) ||(temps->efuse_flag == EFUSE_OPS)){
+			if(temps->flag){
+				temps->flag=1;
+			}
+		}else{
+			temps->flag=0;
+		}
+	}
+	else{
+		temps->flag=flag;
+		temps->trimming=TS_C;
+		temps->adc_efuse=temp;
+		temps->efuse_flag=-1;
+	}
+	if(temps->flag){
+		temp_sensor_adc_init(temps->trimming);
+		return 0;
+	}
+	else
+		return -1;
+	
+}
+int get_cpu_temp(void)
+{
+	int ret=-1,tempa;
+	if(temps->flag){
+		ret=get_adc_sample(6);
+		if(ret>=0){
+			tempa=(10*(ret-temps->adc_efuse))/32+27;
+			ret=tempa;
+		}
+	}
+	return ret;
+}
+
diff --git a/arch/arm/mach-mesong9tv/time.c b/arch/arm/mach-mesong9tv/time.c
new file mode 100644
index 000000000000..e5ad5c9090e6
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/time.c
@@ -0,0 +1,595 @@
+/*
+ * arch/arm/mach-mesong9tv/time.c
+ *
+ * Copyright (C) 2014 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/irq.h>
+#include <linux/io.h>
+#include <linux/mm.h>
+#include <linux/clockchips.h>
+#include <linux/clocksource.h>
+#include <linux/delay.h>
+#include <asm/memory.h>
+#include <asm/mach/map.h>
+#include <asm/mach/time.h>
+#include <asm/sched_clock.h>
+#include <plat/io.h>
+#include <mach/am_regs.h>
+
+
+
+
+/***********************************************************************
+ * System timer
+ **********************************************************************/
+#define TIMER_E_RESOLUTION_BIT		8
+#define TIMER_E_ENABLE_BIT		20
+#define TIMER_E_RESOLUTION_MASK		(7UL << TIMER_E_RESOLUTION_BIT)
+#define TIMER_E_RESOLUTION_SYS		0
+#define TIMER_E_RESOLUTION_1us		1
+#define TIMER_E_RESOLUTION_10us		2
+#define TIMER_E_RESOLUTION_100us	3
+#define TIMER_E_RESOLUTION_1ms		4
+
+#define TIMER_DI_RESOLUTION_BIT		6
+#define TIMER_CH_RESOLUTION_BIT		4
+#define TIMER_BG_RESOLUTION_BIT		2
+#define TIMER_AF_RESOLUTION_BIT		0
+
+#define TIMER_DI_ENABLE_BIT		19
+#define TIMER_CH_ENABLE_BIT		18
+#define TIMER_BG_ENABLE_BIT		17
+#define TIMER_AF_ENABLE_BIT		16
+
+#define TIMER_DI_MODE_BIT		15
+#define TIMER_CH_MODE_BIT		14
+#define TIMER_BG_MODE_BIT		13
+#define TIMER_AF_MODE_BIT		12
+
+#define TIMER_RESOLUTION_1us		0
+#define TIMER_RESOLUTION_10us		1
+#define TIMER_RESOLUTION_100us		2
+#define TIMER_RESOLUTION_1ms		3
+
+
+
+
+/********** Clock Source Device, Timer-E *********/
+static cycle_t cycle_read_timerE(struct clocksource *cs)
+{
+	return (cycle_t) aml_read_reg32(P_ISA_TIMERE);
+}
+
+static unsigned long cycle_read_current_timer_E(void)
+{
+    return (unsigned long) aml_read_reg32(P_ISA_TIMERE);
+}
+
+static struct clocksource clocksource_timer_e = {
+	.name   = "Timer-E",
+	.rating = 300,
+	.read   = cycle_read_timerE,
+	.mask   = CLOCKSOURCE_MASK(32),
+	.flags  = CLOCK_SOURCE_IS_CONTINUOUS,
+};
+
+static struct delay_timer aml_delay_timer;
+
+static u32 notrace mesong9tv_read_sched_clock(void)
+{
+	return (u32)aml_read_reg32(P_ISA_TIMERE);
+}
+
+static void __init meson_clocksource_init(void)
+{
+	aml_clr_reg32_mask(P_ISA_TIMER_MUX, TIMER_E_RESOLUTION_MASK);
+	aml_set_reg32_mask(P_ISA_TIMER_MUX, TIMER_E_RESOLUTION_1us << TIMER_E_RESOLUTION_BIT);
+///    aml_write_reg32(P_ISA_TIMERE, 0);
+
+	/**
+	* (counter*mult)>>shift=xxx ns
+	*/
+	/**
+	* Constants generated by clocks_calc_mult_shift(m, s, 1MHz, NSEC_PER_SEC, 0).
+	* This gives a resolution of about 1us and a wrap period of about 1h11min.
+	*/
+	clocksource_timer_e.shift = 22;
+	clocksource_timer_e.mult = 4194304000u;
+	clocksource_register_khz(&clocksource_timer_e,1000);
+
+	setup_sched_clock(mesong9tv_read_sched_clock, 32, USEC_PER_SEC);
+
+}
+
+/********** Clock Event Device, Timer-ABCD/FGHI *********/
+
+struct meson_clock {
+	struct clock_event_device	clockevent;
+	struct irqaction	irq;
+	const char * name;	/*A,B,C,D,F,G,H,I*/
+	int	bit_enable;
+	int 	bit_mode;
+	int	bit_resolution;
+	unsigned int	mux_reg;
+	unsigned int	reg;
+};
+
+static irqreturn_t meson_timer_interrupt(int irq, void *dev_id);
+static int meson_set_next_event(unsigned long evt,
+                                struct clock_event_device *dev);
+static void meson_clkevt_set_mode(enum clock_event_mode mode,
+                                  struct clock_event_device *dev);
+
+#ifdef CONFIG_SMP
+/*
+static void meson_tick_set_mode(enum clock_event_mode mode,
+                                  struct clock_event_device *dev);
+static int meson_tick_set_next_event(unsigned long evt,
+                                struct clock_event_device *dev);
+*/
+#define meson_tick_rating 450
+#else
+/*
+#define meson_tick_set_mode meson_clkevt_set_mode
+#define meson_tick_set_next_event meson_set_next_event
+*/
+#define meson_tick_rating 300
+#endif
+
+#if 0
+static struct meson_clock meson_timer_a = {
+	.clockevent={
+		.name		= "MESON TIMER-A",
+		.rating		= 400, /* Reasonably fast and accurate clock event */
+
+		.features	= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode	= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-A",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler	= meson_timer_interrupt,
+		.irq		= INT_TIMER_A,
+	},
+	.name			= "A",
+	.bit_enable		= TIMER_AF_ENABLE_BIT,
+	.bit_mode		= TIMER_AF_MODE_BIT,
+	.bit_resolution		= TIMER_AF_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX,
+	.reg			= P_ISA_TIMERA
+};
+#endif
+
+static struct meson_clock meson_timer_f = {
+	.clockevent={
+		.name		= "MESON TIMER-F",
+		.rating		= 300,
+
+		.features		= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode		= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-F",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler		= meson_timer_interrupt,
+		.irq		= INT_TIMER_F,
+	},
+	.name			= "F",
+	.bit_enable		= TIMER_AF_ENABLE_BIT,
+	.bit_mode		= TIMER_AF_MODE_BIT,
+	.bit_resolution		= TIMER_AF_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX1,
+	.reg			= P_ISA_TIMERF,
+};
+
+#if 0
+static struct meson_clock meson_timer_b = {
+	.clockevent={
+		.name		= "MESON TIMER-B",
+		.rating		= 300,
+
+		.features	= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode	= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-B",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler	= meson_timer_interrupt,
+		.irq		= INT_TIMER_B,
+	},
+	.name			= "B",
+	.bit_enable		= TIMER_BG_ENABLE_BIT,
+	.bit_mode		= TIMER_BG_MODE_BIT,
+	.bit_resolution		= TIMER_BG_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX,
+	.reg			= P_ISA_TIMERB,
+};
+#endif
+
+static struct meson_clock meson_timer_g = {
+	.clockevent={
+		.name		= "MESON TIMER-G",
+		.rating		= 300,
+
+		.features	= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode	= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-G",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler	= meson_timer_interrupt,
+		.irq		= INT_TIMER_G,
+	},
+	.name			= "G",
+	.bit_enable		= TIMER_BG_ENABLE_BIT,
+	.bit_mode		= TIMER_BG_MODE_BIT,
+	.bit_resolution		= TIMER_BG_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX1,
+	.reg			= P_ISA_TIMERG,
+};
+
+#if 0
+static struct meson_clock meson_timer_c = {
+	.clockevent={
+		.name		= "MESON TIMER-C",
+		.rating		= 300,
+
+		.features	= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode	= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-C",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler	= meson_timer_interrupt,
+		.irq		=INT_TIMER_C,
+	},
+	.name			= "C",
+	.bit_enable		= TIMER_CH_ENABLE_BIT,
+	.bit_mode		= TIMER_CH_MODE_BIT,
+	.bit_resolution		= TIMER_CH_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX,
+	.reg			= P_ISA_TIMERC,
+};
+#endif
+
+static struct meson_clock meson_timer_h = {
+	.clockevent={
+		.name		= "MESON TIMER-H",
+		.rating		= 300,
+
+		.features	= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode	= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-H",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler	= meson_timer_interrupt,
+		.irq		= INT_TIMER_H,
+	},
+	.name			= "H",
+	.bit_enable		= TIMER_CH_ENABLE_BIT,
+	.bit_mode		= TIMER_CH_MODE_BIT,
+	.bit_resolution		= TIMER_CH_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX1,
+	.reg			= P_ISA_TIMERH,
+};
+
+#if 0
+static struct meson_clock meson_timer_d = {
+	.clockevent={
+		.name		= "MESON TIMER-D",
+		.rating		= 300,
+
+		.features	= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode	= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-D",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler	= meson_timer_interrupt,
+		.irq		= INT_TIMER_D,
+	},
+	.name			= "D",
+	.bit_enable		= TIMER_DI_ENABLE_BIT,
+	.bit_mode		= TIMER_DI_MODE_BIT,
+	.bit_resolution		= TIMER_DI_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX,
+	.reg			= P_ISA_TIMERD,
+};
+#endif
+
+static struct meson_clock meson_timer_i = {
+	.clockevent={
+		.name		= "MESON TIMER-I",
+		.rating		= 300,
+
+		.features	= CLOCK_EVT_FEAT_PERIODIC | CLOCK_EVT_FEAT_ONESHOT,
+		.shift		= 20,
+		.set_next_event	= meson_set_next_event,
+		.set_mode	= meson_clkevt_set_mode,
+	},
+	.irq={
+		.name		= "MESON TIMER-I",
+		.flags		= IRQF_DISABLED | IRQF_TIMER | IRQF_IRQPOLL,
+		.handler	= meson_timer_interrupt,
+		.irq		= INT_TIMER_I,
+	},
+	.name			= "I",
+	.bit_enable		= TIMER_DI_ENABLE_BIT,
+	.bit_mode		= TIMER_DI_MODE_BIT,
+	.bit_resolution		= TIMER_DI_RESOLUTION_BIT,
+	.mux_reg		= P_ISA_TIMER_MUX1,
+	.reg			= P_ISA_TIMERI,
+};
+
+static struct meson_clock *clockevent_to_clock(struct clock_event_device *evt)
+{
+	//return container_of(evt, struct meson_clock, clockevent);
+	return (struct meson_clock*)evt->private;
+}
+
+static DEFINE_SPINLOCK(time_lock);
+
+static void meson_clkevt_set_mode(enum clock_event_mode mode,
+                                  struct clock_event_device *dev)
+{
+	struct meson_clock * clk=clockevent_to_clock(dev);
+
+	spin_lock(&time_lock);
+	switch (mode) {
+		case CLOCK_EVT_MODE_RESUME:
+			printk(KERN_INFO"Resume timer%s\n", clk->name);
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_enable, 1);
+		break;
+
+		case CLOCK_EVT_MODE_PERIODIC:
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_mode, 1);
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_enable, 1);
+			//printk("Periodic timer %s!,mux_reg=%x\n", clk->name,aml_read_reg32(clk->mux_reg));
+		break;
+
+		case CLOCK_EVT_MODE_ONESHOT:
+			aml_set_reg32_bits(clk->mux_reg, 0, clk->bit_mode, 1);
+			aml_set_reg32_bits(clk->mux_reg, 1, clk->bit_enable, 1);
+			//printk("One shot timer %s!mux_reg=%x\n", clk->name,aml_read_reg32(clk->mux_reg));
+		break;
+		case CLOCK_EVT_MODE_SHUTDOWN:
+		case CLOCK_EVT_MODE_UNUSED:
+			//printk(KERN_INFO"Disable timer %p %s\n",dev, clk->name);
+			aml_set_reg32_bits(clk->mux_reg, 0, clk->bit_enable, 1);
+		break;
+	}
+	spin_unlock(&time_lock);
+}
+
+static int meson_set_next_event(unsigned long evt,
+                                struct clock_event_device *dev)
+{
+    struct meson_clock * clk=clockevent_to_clock(dev);
+    /* use a big number to clear previous trigger cleanly */
+    aml_set_reg32_mask(clk->reg, evt & 0xffff);
+
+    /* then set next event */
+    aml_set_reg32_bits(clk->reg, evt, 0, 16);
+    return 0;
+}
+
+
+/* Clock event timer interrupt handler */
+static irqreturn_t meson_timer_interrupt(int irq, void *dev_id)
+{
+	struct clock_event_device *evt = dev_id;
+	if(evt == NULL || evt->event_handler == NULL){
+		WARN_ONCE(evt == NULL || evt->event_handler == NULL,
+			"%p %s %p %d",evt,evt?evt->name:NULL,evt?evt->event_handler:NULL,irq);
+		return IRQ_HANDLED;
+	}
+	evt->event_handler(evt);
+	return IRQ_HANDLED;
+
+}
+
+static void __cpuinit meson_timer_init_device(struct clock_event_device *evt)
+{
+	evt->mult=div_sc(1000000, NSEC_PER_SEC, 20);
+	evt->max_delta_ns =
+		clockevent_delta2ns(0xfffe, evt);
+	evt->min_delta_ns=clockevent_delta2ns(1, evt);
+	evt->cpumask = cpumask_of(smp_processor_id());
+}
+
+static void __init meson_timer_setup(struct clock_event_device *evt, struct meson_clock * clk )
+{
+	/**
+	* Enable Timer and setting the time base;
+	*/
+	aml_set_reg32_mask(clk->mux_reg,
+		((1 << clk->bit_enable)
+		|(1 << clk->bit_mode)
+		|(TIMER_RESOLUTION_1us << clk->bit_resolution)) );
+	aml_write_reg32(clk->reg, 9999);
+	meson_timer_init_device(&clk->clockevent);
+	printk(KERN_ERR"Global timer: %s (%p) initialized\n",clk->clockevent.name,clk);
+
+	clk->irq.dev_id=&clk->clockevent;
+	clk->clockevent.private = (void *)clk;
+	clockevents_register_device(&(clk->clockevent));
+
+	/* Set up the IRQ handler */
+	setup_irq(clk->irq.irq, &clk->irq);
+}
+
+#ifdef CONFIG_SMP
+#include <asm/localtimer.h>
+
+struct meson_clock * mesong9tv_smp_local_timer[CONFIG_NR_CPUS]={
+	&meson_timer_f,	/* CPU0 f*/
+	&meson_timer_g,	/* CPU1 g*/
+	&meson_timer_h,	/* CPU2 h*/
+	&meson_timer_i	/* CPU3 i*/
+};
+
+int  __cpuinit meson_local_timer_setup(struct clock_event_device *evt)
+{
+	int cpu;
+	struct meson_clock * clk;
+	struct clock_event_device * meson_evt;
+
+	if(!evt){
+		printk(KERN_ERR"meson_local_timer_setup: null evt!\n");
+		return -EINVAL;
+	}
+
+	cpu = smp_processor_id();
+	if(cpu == 0)
+		return 0;
+
+	clk = mesong9tv_smp_local_timer[cpu];
+
+	aml_set_reg32_mask(clk->mux_reg,
+		((1 << clk->bit_enable)
+		|(1 << clk->bit_mode)
+		|(TIMER_RESOLUTION_1us << clk->bit_resolution)) );
+	aml_write_reg32(clk->reg, 9999);
+
+	meson_timer_init_device(&(clk->clockevent));
+	//printk(KERN_ERR"Local timer: %s (%p) for CPU%d initialized\n",
+	//	clk->clockevent.name,clk,cpu);
+
+	meson_evt = &clk->clockevent;
+	evt->name = meson_evt->name;
+	evt->rating = meson_evt->rating;
+	evt->features = meson_evt->features;
+	evt->shift = meson_evt->shift;
+	evt->set_next_event = meson_evt->set_next_event;
+	evt->set_mode = meson_evt->set_mode;
+	evt->private = clk;
+	evt->mult=div_sc(1000000, NSEC_PER_SEC, 20);
+	evt->max_delta_ns =
+		clockevent_delta2ns(0xfffe, evt);
+	evt->min_delta_ns=clockevent_delta2ns(1, evt);
+	clk->irq.dev_id=evt;
+
+	clockevents_register_device(evt);
+
+	if(cpu){
+		irq_set_affinity(clk->irq.irq, cpumask_of(cpu));
+	}
+	/* Set up the IRQ handler */
+	enable_percpu_irq(clk->irq.irq, 0);
+
+	return 0;
+}
+
+void  __cpuinit meson_local_timer_stop(struct clock_event_device *evt)
+{
+	struct meson_clock * clk;
+
+	if(!evt){
+		printk(KERN_ERR"meson_local_timer_stop: null evt!\n");
+		return;//return -EINVAL;
+	}
+
+	clk = clockevent_to_clock(evt);
+	evt->set_mode(CLOCK_EVT_MODE_UNUSED, evt);
+	aml_clr_reg32_mask(clk->mux_reg,(1 << clk->bit_enable));
+	disable_percpu_irq(clk->irq.irq);
+
+	return;
+}
+
+static struct local_timer_ops meson_local_timer_ops = {
+	.setup = meson_local_timer_setup,
+	.stop = meson_local_timer_stop,
+};
+
+inline int local_timer_ack(void)
+{
+    return 1;
+}
+#endif  /* CONFIG_SMP */
+
+static void __init meson_clockevent_init(void)
+{
+	/***
+	* Disable Timer A~D, and clean the time base
+	* Now all of the timer is 1us base
+	*/
+	aml_clr_reg32_mask(P_ISA_TIMER_MUX,~(TIMER_E_RESOLUTION_MASK));
+	/***
+	* Disable Timer F~I, and clean the time base
+	* Now all of the timer is 1us base
+	*/
+	aml_write_reg32(P_ISA_TIMER_MUX1,0);
+
+#ifdef CONFIG_SMP
+	meson_timer_setup(NULL,mesong9tv_smp_local_timer[0]);
+#else
+	meson_timer_setup(NULL,&meson_timer_a);
+	//    meson_timer_setup(NULL,&meson_timer_b);
+	//    meson_timer_setup(NULL,&meson_timer_c);
+	//    meson_timer_setup(NULL,&meson_timer_d);
+#endif
+}
+
+
+/*
+ * This sets up the system timers, clock source and clock event.
+ */
+void __init meson_timer_init(void)
+{
+
+#ifdef CONFIG_SMP
+	int i;
+	struct meson_clock *clk;
+#endif
+
+	meson_clocksource_init();
+	meson_clockevent_init();
+
+#ifdef CONFIG_SMP
+	for(i=1; i<NR_CPUS; i++){
+		clk = mesong9tv_smp_local_timer[i];
+		/* Set up the IRQ handler */
+		setup_irq(clk->irq.irq, &clk->irq);
+	}
+	local_timer_register(&meson_local_timer_ops);
+#endif
+
+	/* using H/W counter for delay instead of CPU tick */
+	aml_delay_timer.read_current_timer = &cycle_read_current_timer_E;
+	aml_delay_timer.freq = 1000*1000;//1us resolution
+	register_current_timer_delay(&aml_delay_timer);
+}
+
diff --git a/arch/arm/mach-mesong9tv/vpu.c b/arch/arm/mach-mesong9tv/vpu.c
new file mode 100644
index 000000000000..549b81f7b252
--- /dev/null
+++ b/arch/arm/mach-mesong9tv/vpu.c
@@ -0,0 +1,932 @@
+/*
+ * Driver for the amlogic vpu controller
+ *
+ *
+ */
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/slab.h>
+#include <linux/err.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/delay.h>
+#include <plat/io.h>
+#include <mach/am_regs.h>
+#include <mach/vpu.h>
+#ifdef CONFIG_SMP
+#include <mach/smp.h>
+#endif
+#include <linux/amlogic/vout/vinfo.h>
+
+#define VPU_VERION	"v03"
+
+//#define LIMIT_VPU_CLK_LOW
+static spinlock_t vpu_lock;
+static spinlock_t vpu_mem_lock;
+static DEFINE_MUTEX(vpu_mutex);
+
+static const char* vpu_mod_table[]={
+	"viu_osd1",
+	"viu_osd2",
+	"viu_vd1",
+	"viu_vd2",
+	"viu_chroma",
+	"viu_ofifo",
+	"viu_scaler",
+	"viu_osd_scaler",
+	"viu_vdin0",
+	"viu_vdin1",
+	"viu_video_super_scaler",
+	"viu_osd_super_scaler",
+	"reserved",
+	"di_pre",
+	"di_post",
+	"viu_sharpness_line_buffer",
+	"d2d3",
+	"vdin_arbitor_am_sync",
+	"display_arbitor_am_sync",
+	"vpu_arbitor_am_sync",
+	"vencp",
+	"vencl",
+	"venci",
+	"cvd2",
+	"atv_dmd",
+	"none",
+};
+
+typedef struct {
+	unsigned int clk_level_dft;
+	unsigned int clk_level_max;
+	unsigned int clk_level;
+	unsigned mem_pd0;
+	unsigned mem_pd1;
+}VPU_Conf_t;
+
+
+//!!! Only for g9tv vpu gp1 clock test, please double check these settings!!!!!
+#define GP1_CLK_TEST
+
+#ifdef GP1_CLK_TEST
+  #define CLK_LEVEL_DFT		10   // also need to check the dtd setting
+  #define CLK_LEVEL_MAX		11  // only for gp1_pll_clk test
+#else
+  #define CLK_LEVEL_DFT		7
+  #define CLK_LEVEL_MAX		10	//limit max clk to 637M
+#endif
+static unsigned int vpu_clk_setting[][3] = {
+	//frequency		clk_mux		div
+	{106250000,		1,			7},	//0
+	{127500000,		2,			3},	//1
+	{159375000,		0,			3},	//2
+	{212500000,		1,			3},	//3
+	{255000000,		2,			1},	//4
+	{283333000,		1,			2},	//5
+	{318750000,		0,			1},	//6
+	{425000000,		1,			1},	//7
+	{510000000,		2,			0},	//8
+	{637500000,		0,			0},	//9
+#ifdef GP1_CLK_TEST
+	{696000000,		7,			0},	//10
+	{850000000,		1,			0},	//11
+#else
+	{850000000,		1,			0},	//10
+#endif
+};
+
+static unsigned int vpu_clk_vmod[] = {
+	0,	//VPU_VIU_OSD1,
+	0,	//VPU_VIU_OSD2,
+	0,	//VPU_VIU_VD1,
+	0,	//VPU_VIU_VD2,
+	0,	//VPU_VIU_CHROMA,
+	0,	//VPU_VIU_OFIFO,
+	0,	//VPU_VIU_SCALE,
+	0,	//VPU_VIU_OSD_SCALE,
+	0,	//VPU_VIU_VDIN0,
+	0,	//VPU_VIU_VDIN1,
+	0,	//VPU_VIU_SRSCL,
+	0,	//VPU_VIU_OSDSR,
+	0,	//VPU_REV,
+	0,	//VPU_DI_PRE,
+	0,	//VPU_DI_POST,
+	0,	//VPU_SHARP
+	0,	//VPU_D2D3,
+	0,	//VPU_VDIN_AM_ASYNC,
+	0,	//VPU_VDISP_AM_ASYNC,
+	0,	//VPU_VPUARB2_AM_ASYNC,
+	0,	//VPU_VENCP,
+	0,	//VPU_VENCL,
+	0,	//VPU_VENCI,
+	0,	//VPU_CVD2,
+	0,	//VPU_ATV_DMD,
+	0,	//VPU_MAX,
+};
+
+static VPU_Conf_t vpu_config = {
+	.mem_pd0 = 0,
+	.mem_pd1 = 0,
+	.clk_level_dft = CLK_LEVEL_DFT,
+	.clk_level_max = CLK_LEVEL_MAX,
+	.clk_level = CLK_LEVEL_DFT,
+};
+
+static vpu_mod_t get_vpu_mod(unsigned int vmod)
+{
+	unsigned int vpu_mod;
+
+	if (vmod < VPU_MOD_START) {
+		switch (vmod) {
+			case VMODE_480P:
+            case VMODE_480P_RPT:
+			case VMODE_576P:
+			case VMODE_576P_RPT:
+			case VMODE_720P:
+			case VMODE_1080I:
+			case VMODE_1080P:
+			case VMODE_720P_50HZ:
+			case VMODE_1080I_50HZ:
+			case VMODE_1080P_50HZ:
+			case VMODE_1080P_24HZ:
+			case VMODE_4K2K_30HZ:
+			case VMODE_4K2K_25HZ:
+			case VMODE_4K2K_24HZ:
+			case VMODE_4K2K_SMPTE:
+			case VMODE_VGA:
+			case VMODE_SVGA:
+			case VMODE_XGA:
+			case VMODE_SXGA:
+				vpu_mod = VPU_VENCP;
+				break;
+			case VMODE_480I:
+			case VMODE_480I_RPT:
+			case VMODE_576I:
+			case VMODE_576I_RPT:
+			case VMODE_480CVBS:
+			case VMODE_576CVBS:
+				vpu_mod = VPU_VENCI;
+				break;
+			case VMODE_LCD:
+			case VMODE_LVDS_1080P:
+			case VMODE_LVDS_1080P_50HZ:
+				vpu_mod = VPU_VENCL;
+				break;
+			default:
+				vpu_mod = VPU_MAX;
+				break;
+		}
+	}
+	else if ((vmod >= VPU_MOD_START) && (vmod < VPU_MAX)) {
+		vpu_mod = vmod;
+	}
+	else {
+		vpu_mod = VPU_MAX;
+	}
+
+	return vpu_mod;
+}
+
+#ifdef CONFIG_VPU_DYNAMIC_ADJ
+static unsigned int get_vpu_clk_level_max_vmod(void)
+{
+	unsigned int max_level;
+	int i;
+
+	max_level = 0;
+	for (i=VPU_MOD_START; i<VPU_MAX; i++) {
+		if (vpu_clk_vmod[i-VPU_MOD_START] > max_level)
+			max_level = vpu_clk_vmod[i-VPU_MOD_START];
+	}
+
+	return max_level;
+}
+#endif
+
+static unsigned int get_vpu_clk_level(unsigned int video_clk)
+{
+	unsigned int video_bw;
+	unsigned clk_level;
+	int i;
+
+	video_bw = video_clk + 1000000;
+
+	for (i=0; i<vpu_config.clk_level_max; i++) {
+		if (video_bw <= vpu_clk_setting[i][0])
+			break;
+	}
+	clk_level = i;
+
+	return clk_level;
+}
+
+unsigned int get_vpu_clk(void)
+{
+	unsigned int clk_freq;
+	unsigned int clk_source, clk_div;
+
+	switch ((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 9) & 0x7) {
+		case 0:
+			clk_source = 637500000;
+			break;
+		case 1:
+			clk_source = 850000000;
+			break;
+		case 2:
+			clk_source = 510000000;
+			break;
+		case 3:
+			clk_source = 364300000;
+			break;
+		case 7:
+			clk_source = 696000000;
+			break;
+		default:
+			clk_source = 0;
+			break;
+	}
+
+	clk_div = ((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 0) & 0x7f) + 1;
+	clk_freq = clk_source / clk_div;
+
+	return clk_freq;
+}
+
+static int switch_gp1_pll(int flag)
+{
+	int cnt = 100;
+	int ret = 0;
+	
+	if (flag) { //enable gp1_pll
+		/* GP1 DPLL 696MHz output*/
+		aml_write_reg32(P_HHI_GP1_PLL_CNTL, 0x6a01023a);
+		aml_write_reg32(P_HHI_GP1_PLL_CNTL2, 0x69c80000 );
+		aml_write_reg32(P_HHI_GP1_PLL_CNTL3, 0x0a674a21 );
+		aml_write_reg32(P_HHI_GP1_PLL_CNTL4, 0x0000000d );
+		aml_write_reg32(P_HHI_GP1_PLL_CNTL, 0x4a01023a);
+		do{
+			udelay(10);
+			aml_set_reg32_bits(P_HHI_GP1_PLL_CNTL, 1, 29, 1); //reset
+			udelay(50);
+			aml_set_reg32_bits(P_HHI_GP1_PLL_CNTL, 0, 29, 1); //release reset
+			udelay(50);
+		}while(((aml_read_reg32(P_HHI_GP1_PLL_CNTL)&(1<<31)) == 0) && (cnt > 0));
+		if (cnt == 0) {
+			ret = 1;
+			aml_set_reg32_bits(P_HHI_GP1_PLL_CNTL, 0, 30, 1);
+			printk("[error]: GP_PLL lock failed, can't use the clk source!\n");
+		}
+	}
+	else { //disable gp1_pll
+		aml_set_reg32_bits(P_HHI_GP1_PLL_CNTL, 0, 30, 1);
+	}
+	
+	return ret;
+}
+
+#ifndef CONFIG_SMP
+static int _adjust_vpu_clk(void *pvconf)
+{
+	unsigned int clk_level;
+	VPU_Conf_t *vconf=(VPU_Conf_t *)pvconf;
+
+	clk_level = vconf->clk_level;
+	aml_write_reg32(P_HHI_VPU_CLK_CNTL, ((1 << 8) | (vpu_clk_setting[clk_level][1] << 9) | (vpu_clk_setting[clk_level][2] << 0)));
+	
+	return 0;
+}
+#endif
+
+static int adjust_vpu_clk(unsigned int clk_level)
+{
+	unsigned long flags = 0;
+	int ret = 0;
+	
+	spin_lock_irqsave(&vpu_lock, flags);
+	
+	vpu_config.clk_level = clk_level;
+	
+#ifdef GP1_CLK_TEST
+	if (clk_level == 10) {
+		ret = switch_gp1_pll(1);
+		if (ret)
+			clk_level = 9;
+	}
+	else
+		ret = switch_gp1_pll(0);
+	
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, vpu_clk_setting[0][1], 25, 3);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, vpu_clk_setting[0][2], 16, 7);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 24, 1);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 31, 1);
+	udelay(10);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 0, 8, 1);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, vpu_clk_setting[clk_level][1], 9, 3);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, vpu_clk_setting[clk_level][2], 0, 7);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 8, 1);
+	udelay(20);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 0, 31, 1);
+	aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 0, 24, 1);
+#else
+#ifdef CONFIG_SMP
+	try_exclu_cpu_exe(_adjust_vpu_clk, &vpu_config);
+#else
+	_adjust_vpu_clk(&vpu_config);
+#endif
+#endif
+	
+	if (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 8) & 1) == 0)
+		aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 1, 8, 1);
+	
+	printk("set vpu clk: %uHz, readback: %uHz(0x%x)\n", vpu_clk_setting[clk_level][0], get_vpu_clk(), (aml_read_reg32(P_HHI_VPU_CLK_CNTL)));
+	
+	spin_unlock_irqrestore(&vpu_lock, flags);
+	return ret;
+}
+
+static int set_vpu_clk(unsigned int vclk)
+{
+	int ret = 0;
+	unsigned clk_level;
+	mutex_lock(&vpu_mutex);
+
+	if (vclk >= 100) {	//regard as vpu_clk
+		clk_level = get_vpu_clk_level(vclk);
+	}
+	else {	//regard as clk_level
+		clk_level = vclk;
+	}
+
+	if (clk_level >= vpu_config.clk_level_max) {
+		ret = 1;
+		printk("set vpu clk out of supported range\n");
+		goto set_vpu_clk_limit;
+	}
+#ifdef LIMIT_VPU_CLK_LOW
+	else if (clk_level < vpu_config.clk_level_dft) {
+		ret = 3;
+		printk("set vpu clk less than system default\n");
+		goto set_vpu_clk_limit;
+	}
+#endif
+
+	if ((((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 9) & 0x7) != vpu_clk_setting[clk_level][1]) || (((aml_read_reg32(P_HHI_VPU_CLK_CNTL) >> 0) & 0x7f) != vpu_clk_setting[clk_level][2])) {
+		adjust_vpu_clk(clk_level);
+	}
+
+set_vpu_clk_limit:
+	mutex_unlock(&vpu_mutex);
+	return ret;
+}
+
+//***********************************************//
+//VPU_CLK control
+//***********************************************//
+/*
+ *  Function: get_vpu_clk_vmod
+ *      Get vpu clk holding frequency with specified vmod
+ *
+ *	Parameters:
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *
+ *  Returns:
+ *      unsigned int, vpu clk frequency unit in Hz
+ *
+ *	Example:
+ *      video_clk = get_vpu_clk_vmod(VMODE_720P);
+ *      video_clk = get_vpu_clk_vmod(VPU_VIU_OSD1);
+ *
+*/
+unsigned int get_vpu_clk_vmod(unsigned int vmod)
+{
+	unsigned int vpu_mod;
+	unsigned int vpu_clk;
+	mutex_lock(&vpu_mutex);
+
+	vpu_mod = get_vpu_mod(vmod);
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod < VPU_MAX)) {
+		vpu_clk = vpu_clk_vmod[vpu_mod - VPU_MOD_START];
+		vpu_clk = vpu_clk_setting[vpu_clk][0];
+	}
+	else {
+		vpu_clk = 0;
+		printk("unsupport vmod\n");
+	}
+
+	mutex_unlock(&vpu_mutex);
+	return vpu_clk;
+}
+
+/*
+ *  Function: request_vpu_clk_vmod
+ *      Request a new vpu clk holding frequency with specified vmod
+ *      Will change vpu clk if the max level in all vmod vpu clk holdings is unequal to current vpu clk level
+ *
+ *	Parameters:
+ *      vclk - unsigned int, vpu clk frequency unit in Hz
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *
+ *  Returns:
+ *      int, 0 for success, 1 for failed
+ *
+ *	Example:
+ *      ret = request_vpu_clk_vmod(100000000, VMODE_720P);
+ *      ret = request_vpu_clk_vmod(300000000, VPU_VIU_OSD1);
+ *
+*/
+int request_vpu_clk_vmod(unsigned int vclk, unsigned int vmod)
+{
+	int ret = 0;
+#ifdef CONFIG_VPU_DYNAMIC_ADJ
+	unsigned clk_level;
+	unsigned vpu_mod;
+	
+	mutex_lock(&vpu_mutex);
+
+	if (vclk >= 100) {	//regard as vpu_clk
+		clk_level = get_vpu_clk_level(vclk);
+	}
+	else {	//regard as clk_level
+		clk_level = vclk;
+	}
+
+	if (clk_level >= vpu_config.clk_level_max) {
+		ret = 1;
+		printk("set vpu clk out of supported range\n");
+		goto request_vpu_clk_limit;
+	}
+
+	vpu_mod = get_vpu_mod(vmod);
+	if (vpu_mod == VPU_MAX) {
+		ret = 2;
+		printk("unsupport vmod\n");
+		goto request_vpu_clk_limit;
+	}
+
+	vpu_clk_vmod[vpu_mod - VPU_MOD_START] = clk_level;
+	printk("request vpu clk holdings: %s %uHz\n", vpu_mod_table[vpu_mod - VPU_MOD_START], vpu_clk_setting[clk_level][0]);
+
+	clk_level = get_vpu_clk_level_max_vmod();
+	if (clk_level != vpu_config.clk_level) {
+		adjust_vpu_clk(clk_level);
+	}
+
+request_vpu_clk_limit:
+	mutex_unlock(&vpu_mutex);
+#endif
+	return ret;
+}
+
+/*
+ *  Function: release_vpu_clk_vmod
+ *      Release vpu clk holding frequency to 0 with specified vmod
+ *      Will change vpu clk if the max level in all vmod vpu clk holdings is unequal to current vpu clk level
+ *
+ *	Parameters:
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *
+ *  Returns:
+ *      int, 0 for success, 1 for failed
+ *
+ *	Example:
+ *      ret = release_vpu_clk_vmod(VMODE_720P);
+ *      ret = release_vpu_clk_vmod(VPU_VIU_OSD1);
+ *
+*/
+int release_vpu_clk_vmod(unsigned int vmod)
+{
+	int ret = 0;
+#ifdef CONFIG_VPU_DYNAMIC_ADJ
+	unsigned clk_level;
+	unsigned vpu_mod;
+	
+	mutex_lock(&vpu_mutex);
+
+	clk_level = 0;
+
+	vpu_mod = get_vpu_mod(vmod);
+	if (vpu_mod == VPU_MAX) {
+		ret = 2;
+		printk("unsupport vmod\n");
+		goto release_vpu_clk_limit;
+	}
+
+	vpu_clk_vmod[vpu_mod - VPU_MOD_START] = clk_level;
+	printk("release vpu clk holdings: %s\n", vpu_mod_table[vpu_mod - VPU_MOD_START]);
+
+	clk_level = get_vpu_clk_level_max_vmod();
+	if (clk_level != vpu_config.clk_level) {
+		adjust_vpu_clk(clk_level);
+	}
+
+release_vpu_clk_limit:
+	mutex_unlock(&vpu_mutex);
+#endif
+	return ret;
+}
+
+//***********************************************//
+//VPU_MEM_PD control
+//***********************************************//
+#define VPU_MEM_PD_MASK		0x3
+
+/*
+ *  Function: switch_vpu_mem_pd_vmod
+ *      switch vpu memory power down by specified vmod
+ *
+ *	Parameters:
+ *      vmod - unsigned int, must be one of the following constants:
+ *                 VMODE, VMODE is supported by VOUT
+ *                 VPU_MOD, supported by vpu_mod_t
+ *      flag - int, on/off switch flag, must be one of the following constants:
+ *                 VPU_MEM_POWER_ON
+ *                 VPU_MEM_POWER_DOWN
+ *
+ *	Example:
+ *      switch_vpu_mem_pd_vmod(VMODE_720P, VPU_MEM_POWER_ON);
+ *      switch_vpu_mem_pd_vmod(VPU_VIU_OSD1, VPU_MEM_POWER_DOWN);
+ *
+*/
+void switch_vpu_mem_pd_vmod(unsigned int vmod, int flag)
+{
+	unsigned vpu_mod;
+	unsigned vpu_mem_bit = 0;
+	unsigned long flags = 0;
+	spin_lock_irqsave(&vpu_mem_lock, flags);
+
+	flag = (flag > 0) ? 1 : 0;
+
+	vpu_mod = get_vpu_mod(vmod);
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod <= VPU_SHARP)) {//reg0
+		vpu_mem_bit = (vpu_mod - VPU_MOD_START) * 2;
+		if (flag)
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		else
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, 0, vpu_mem_bit, 2);
+	}
+	else if (vpu_mod == VPU_D2D3) {//reg1[3:0]
+		vpu_mem_bit = 0;
+		if (flag)
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0xf, vpu_mem_bit, 4);
+		else
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, vpu_mem_bit, 4);
+	}
+	else if ((vpu_mod >= VPU_VDIN_AM_ASYNC) && (vpu_mod <= VPU_VENCI)) {//reg1[25:14]
+		vpu_mem_bit = (vpu_mod - VPU_VDIN_AM_ASYNC + 7) * 2;
+		if (flag)
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		else
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, vpu_mem_bit, 2);
+	}
+	else if ((vpu_mod >= VPU_CVD2) && (vpu_mod < VPU_MAX)) {
+		vpu_mem_bit = (vpu_mod - VPU_CVD2 + 14) * 2;
+		if (flag) {
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, VPU_MEM_PD_MASK, vpu_mem_bit, 2);
+		}
+		else {
+			aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, vpu_mem_bit, 2);
+		}
+	}
+	else {
+		printk("switch_vpu_mem_pd: unsupport vpu mod\n");
+	}
+	//printk("switch_vpu_mem_pd: %s %s\n", vpu_mod_table[vpu_mod - VPU_MOD_START], ((flag > 0) ? "OFF" : "ON"));
+	spin_unlock_irqrestore(&vpu_mem_lock, flags);
+}
+//***********************************************//
+
+int get_vpu_mem_pd_vmod(unsigned int vmod)
+{
+	unsigned vpu_mod;
+	unsigned vpu_mem_bit = 0;
+
+	vpu_mod = get_vpu_mod(vmod);
+
+	if ((vpu_mod >= VPU_MOD_START) && (vpu_mod <= VPU_SHARP)) {//reg0
+		vpu_mem_bit = (vpu_mod - VPU_MOD_START) * 2;
+		return (aml_get_reg32_bits(P_HHI_VPU_MEM_PD_REG0, vpu_mem_bit, 2) == 0) ? VPU_MEM_POWER_ON : VPU_MEM_POWER_DOWN;
+	}
+	else if (vpu_mod == VPU_D2D3) {//reg1[3:0]
+		vpu_mem_bit = 0;
+		return (aml_get_reg32_bits(P_HHI_VPU_MEM_PD_REG1, vpu_mem_bit, 4) == 0) ? VPU_MEM_POWER_ON : VPU_MEM_POWER_DOWN;
+	}
+	else if ((vpu_mod >= VPU_VDIN_AM_ASYNC) && (vpu_mod <= VPU_VENCI)) {//reg1[25:14]
+		vpu_mem_bit = (vpu_mod - VPU_VDIN_AM_ASYNC + 7) * 2;
+		return (aml_get_reg32_bits(P_HHI_VPU_MEM_PD_REG1, vpu_mem_bit, 2) == 0) ? VPU_MEM_POWER_ON : VPU_MEM_POWER_DOWN;
+	}
+	else if ((vpu_mod >= VPU_CVD2) && (vpu_mod < VPU_MAX)) {
+		vpu_mem_bit = (vpu_mod - VPU_CVD2 + 14) * 2;
+		return (aml_get_reg32_bits(P_HHI_VPU_MEM_PD_REG1, vpu_mem_bit, 2) == 0) ? VPU_MEM_POWER_ON : VPU_MEM_POWER_DOWN;
+	}
+	else {
+		return -1;
+	}
+}
+
+//***********************************************//
+//VPU sysfs function
+//***********************************************//
+static const char * vpu_usage_str =
+{"Usage:\n"
+"	echo get > clk ; print current vpu clk\n"
+"	echo set <vclk> > clk ; force to set vpu clk\n"
+"	echo dump [vmod] > clk ; dump vpu clk by vmod, [vmod] is unnecessary\n"
+"	echo request <vclk> <vmod> > clk ; request vpu clk holding by vmod\n"
+"	echo release <vmod> > clk ; release vpu clk holding by vmod\n"
+"\n"
+"	request & release will change vpu clk if the max level in all vmod vpu clk holdings is unequal to current vpu clk level.\n"
+"	vclk both support level and frequency value unit in Hz.\n"
+"	vclk level & frequency:\n"
+"		0: 106.25M		1: 127.5M		2: 159.375M\n"
+"		3: 212.5M		4: 255M			5: 283.33M\n"
+"		6: 318.75M		7: 425M\n		8: 510M\n"
+"		9: 637.5M"//			10: 637.5M\n"
+};
+
+static ssize_t vpu_debug_help(struct class *class, struct class_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%s\n", vpu_usage_str);
+}
+
+static ssize_t vpu_debug(struct class *class, struct class_attribute *attr, const char *buf, size_t count)
+{
+	unsigned int ret;
+	int i;
+	unsigned tmp[2];
+
+	switch (buf[0])	{
+		case 'g':	//get
+			printk("get current vpu clk: %uHz\n", get_vpu_clk());
+			break;
+		case 's':	//set
+			tmp[0] = 4;
+			ret = sscanf(buf, "set %u", &tmp[0]);
+			if (tmp[0] > 100) {
+				printk("set vpu clk frequency: %uHz\n", tmp[0]);
+			}
+			else {
+				printk("set vpu clk level: %u\n", tmp[0]);
+			}
+			set_vpu_clk(tmp[0]);
+			break;
+		case 'r':
+			if (buf[2] == 'q') {	//request
+				tmp[0] = 0;
+				tmp[1] = VPU_MAX;
+				ret = sscanf(buf, "request %u %u", &tmp[0], &tmp[1]);
+				request_vpu_clk_vmod(tmp[0], tmp[1]);
+			}
+			else if (buf[2] == 'l') {	//release
+				tmp[0] = VPU_MAX;
+				ret = sscanf(buf, "release %u", &tmp[0]);
+				release_vpu_clk_vmod(tmp[0]);
+			}
+			break;
+		case 'd':
+			tmp[0] = VPU_MAX;
+			ret = sscanf(buf, "dump %u", &tmp[0]);
+			tmp[1] = get_vpu_mod(tmp[0]);
+			printk("vpu clk holdings:\n");
+			if (tmp[1] == VPU_MAX) {
+				for (i=VPU_MOD_START; i<VPU_MAX; i++) {
+					printk("%s:		%uHz(%u)\n", vpu_mod_table[i - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[i - VPU_MOD_START]][0], vpu_clk_vmod[i - VPU_MOD_START]);
+				}
+			}
+			else {
+				printk("%s:		%uHz(%u)\n", vpu_mod_table[tmp[1] - VPU_MOD_START], vpu_clk_setting[vpu_clk_vmod[tmp[1] - VPU_MOD_START]][0], vpu_clk_vmod[tmp[1] - VPU_MOD_START]);
+			}
+			break;
+		default:
+			printk("wrong format of vpu debug command.\n");
+			break;
+	}
+
+	if (ret != 1 || ret !=2)
+		return -EINVAL;
+
+	return count;
+	//return 0;
+}
+
+static struct class_attribute vpu_debug_class_attrs[] = {
+	__ATTR(clk, S_IRUGO | S_IWUSR, vpu_debug_help, vpu_debug),
+	__ATTR(help, S_IRUGO | S_IWUSR, vpu_debug_help, NULL),
+	__ATTR_NULL
+};
+
+static struct class aml_vpu_debug_class = {
+	.name = "vpu",
+	.class_attrs = vpu_debug_class_attrs,
+};
+//*********************************************************//
+#if 0
+static void vpu_driver_init(void)
+{
+    set_vpu_clk(vpu_config.clk_level);
+
+    aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 0, 8, 1); // [8] power on
+    aml_write_reg32(P_HHI_VPU_MEM_PD_REG0, vpu_config.mem_pd0);
+    aml_write_reg32(P_HHI_VPU_MEM_PD_REG1, vpu_config.mem_pd1);
+    aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0, 8, 8); // MEM-PD
+    udelay(2);
+
+    //Reset VIU + VENC
+    //Reset VENCI + VENCP + VADC + VENCL
+    //Reset HDMI-APB + HDMI-SYS + HDMI-TX + HDMI-CEC
+    aml_write_reg32(P_RESET0_MASK, aml_read_reg32(P_RESET0_MASK) & (~((0x1 << 5) | (0x1<<10))));
+    aml_write_reg32(P_RESET4_MASK, aml_read_reg32(P_RESET4_MASK) & (~((0x1 << 6) | (0x1<<7) | (0x1<<9) | (0x1<<13))));
+    aml_write_reg32(P_RESET2_MASK, aml_read_reg32(P_RESET2_MASK) & (~((0x1 << 2) | (0x1<<3) | (0x1<<11) | (0x1<<15))));
+    aml_write_reg32(P_RESET2_REGISTER, ((0x1 << 2) | (0x1<<3) | (0x1<<11) | (0x1<<15)));
+    aml_write_reg32(P_RESET4_REGISTER, ((0x1 << 6) | (0x1<<7) | (0x1<<9) | (0x1<<13)));    // reset this will cause VBUS reg to 0
+    aml_write_reg32(P_RESET0_REGISTER, ((0x1 << 5) | (0x1<<10)));
+    aml_write_reg32(P_RESET4_REGISTER, ((0x1 << 6) | (0x1<<7) | (0x1<<9) | (0x1<<13)));
+    aml_write_reg32(P_RESET2_REGISTER, ((0x1 << 2) | (0x1<<3) | (0x1<<11) | (0x1<<15)));
+    aml_write_reg32(P_RESET0_MASK, aml_read_reg32(P_RESET0_MASK) | ((0x1 << 5) | (0x1<<10)));
+    aml_write_reg32(P_RESET4_MASK, aml_read_reg32(P_RESET4_MASK) | ((0x1 << 6) | (0x1<<7) | (0x1<<9) | (0x1<<13)));
+    aml_write_reg32(P_RESET2_MASK, aml_read_reg32(P_RESET2_MASK) | ((0x1 << 2) | (0x1<<3) | (0x1<<11) | (0x1<<15)));
+
+    //Remove VPU_HDMI ISO
+    aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 0, 9, 1); // [9] VPU_HDMI
+}
+
+static void vpu_driver_disable(void)
+{
+    vpu_config.mem_pd0 = aml_read_reg32(P_HHI_VPU_MEM_PD_REG0);
+    vpu_config.mem_pd1 = aml_read_reg32(P_HHI_VPU_MEM_PD_REG1);
+
+    // Power down VPU_HDMI
+    // Enable Isolation
+    aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 1, 9, 1); // ISO
+    //Power off memory
+    aml_write_reg32(P_HHI_VPU_MEM_PD_REG0, 0xffffffff);
+    aml_write_reg32(P_HHI_VPU_MEM_PD_REG1, 0xffffffff);
+    aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0xff, 8, 8); // HDMI MEM-PD
+
+    //Power down VPU domain
+    aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 1, 8, 1); //PDN
+
+    aml_set_reg32_bits(P_HHI_VPU_CLK_CNTL, 0, 8, 1);
+}
+#endif
+
+#ifdef CONFIG_PM
+static int vpu_suspend(struct platform_device *pdev, pm_message_t state)
+{
+	//vpu_driver_disable();
+	return 0;
+}
+
+static int vpu_resume(struct platform_device *pdev)
+{
+	//vpu_driver_init();
+	return 0;
+}
+#endif
+
+static int get_vpu_config(struct platform_device *pdev)
+{
+	int ret=0;
+	unsigned int val;
+	struct device_node *vpu_np;
+
+	//mesonfb_np = of_find_node_by_name(NULL,"mesonfb");
+	vpu_np = pdev->dev.of_node;
+	if (!vpu_np) {
+		printk("don't find match vpu node\n");
+		return -1;
+	}
+
+	ret = of_property_read_u32(vpu_np,"clk_level",&val);
+	if(ret){
+		printk("don't find to match clk_level, use default setting.\n");
+	}
+	else {
+		if (val >= vpu_config.clk_level_max) {
+			printk("vpu clk_level in dts is out of support range, use default setting\n");
+			val = vpu_config.clk_level_dft;;
+		}
+
+		vpu_config.clk_level = val;
+		printk("load vpu_clk in dts: %uHz(%u)\n", vpu_clk_setting[vpu_config.clk_level][0], vpu_config.clk_level);
+	}
+
+	return ret;
+}
+
+static struct of_device_id vpu_of_table[]=
+{
+	{
+		.compatible="amlogic,vpu",
+	},
+	{},
+};
+
+static void power_switch_to_vpu_hdmi(int pwr_ctrl)
+{
+    unsigned int i;
+    if(pwr_ctrl == 1) {
+        // Powerup VPU_HDMI
+        aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 0, 8, 1);
+
+        // power up memories
+        for(i = 0; i < 32; i++) {
+            aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, 0, i, 1);
+            msleep(2);
+        }
+        for(i = 0; i < 32; i++) {
+            aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 0, i, 1);
+            msleep(2);
+        }
+        for(i = 8; i < 16; i++) {
+            aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0, i, 8); // MEM-PD
+            msleep(2);
+        }
+        // Remove VPU_HDMI ISO
+        aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 0, 9, 1);
+    } else {
+        // Add isolations
+        aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 1, 9, 1);
+        // Power off VPU_HDMI domain
+        for(i = 0; i < 32; i++) {
+            aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG0, 1, i, 1);
+            msleep(2);
+        }
+        for(i = 0; i < 32; i++) {
+            aml_set_reg32_bits(P_HHI_VPU_MEM_PD_REG1, 1, i, 1);
+            msleep(2);
+        }
+        for(i = 8; i < 16; i++) {
+            aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 1, i, 1);
+            msleep(2);
+        }
+        aml_set_reg32_bits(P_AO_RTI_GEN_PWR_SLEEP0, 1, 8, 1);  //PDN
+    }
+}
+
+static void set_vpu_defconf(void)
+{
+    power_switch_to_vpu_hdmi(1);
+}
+
+static int vpu_probe(struct platform_device *pdev)
+{
+	int ret;
+
+	spin_lock_init(&vpu_lock);
+	spin_lock_init(&vpu_mem_lock);
+
+	printk("VPU driver version: %s\n", VPU_VERION);
+
+    set_vpu_defconf();
+	get_vpu_config(pdev);
+	set_vpu_clk(vpu_config.clk_level);
+
+	ret = class_register(&aml_vpu_debug_class);
+	if(ret){
+		printk("class register aml_vpu_debug_class fail!\n");
+	}
+
+	printk("%s OK\n", __FUNCTION__);
+	return 0;
+}
+
+static int vpu_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver vpu_driver = {
+	.driver = {
+		.name = "vpu",
+		.owner = THIS_MODULE,
+		.of_match_table=of_match_ptr(vpu_of_table),
+	},
+	.probe = vpu_probe,
+	.remove = vpu_remove,
+#ifdef CONFIG_PM
+	.suspend    = vpu_suspend,
+	.resume     = vpu_resume,
+#endif
+};
+
+static int __init vpu_init(void)
+{
+	return platform_driver_register(&vpu_driver);
+}
+
+static void __exit vpu_exit(void)
+{
+	platform_driver_unregister(&vpu_driver);
+}
+
+postcore_initcall(vpu_init);
+module_exit(vpu_exit);
+
+MODULE_DESCRIPTION("m8 vpu control");
+MODULE_LICENSE("GPL v2");
diff --git a/scripts/amlogic/mk_g9tv.sh b/scripts/amlogic/mk_g9tv.sh
new file mode 100644
index 000000000000..77fae3884401
--- /dev/null
+++ b/scripts/amlogic/mk_g9tv.sh
@@ -0,0 +1,17 @@
+#! /bin/bash
+
+#make UIMAGE_COMPRESSION=none uImage -j
+make uImage -j16
+#make modules
+
+make mesong9tv_n300.dtd
+make mesong9tv_n300.dtb
+
+#ROOTFS="rootfs.cpio"
+ROOTFS="arch/arm/mach-mesong9tv/rootfs.cpio"
+
+./mkbootimg --kernel ./arch/arm/boot/uImage --ramdisk ./${ROOTFS} --second ./arch/arm/boot/dts/amlogic/mesong9tv_n300.dtb --output ./boot.img
+ls -l ./boot.img
+echo "boot.img done"
+
+xxd -p -c1 boot.img > boot.hex
diff --git a/scripts/amlogic/mk_g9tv_skt.sh b/scripts/amlogic/mk_g9tv_skt.sh
new file mode 100644
index 000000000000..9fff5e0af9a0
--- /dev/null
+++ b/scripts/amlogic/mk_g9tv_skt.sh
@@ -0,0 +1,17 @@
+#! /bin/bash
+
+#make UIMAGE_COMPRESSION=none uImage -j
+make uImage -j16
+#make modules
+
+make mesong9tv_skt.dtd
+make mesong9tv_skt.dtb
+
+#ROOTFS="rootfs.cpio"
+ROOTFS="arch/arm/mach-mesong9tv/rootfs.cpio"
+
+./mkbootimg --kernel ./arch/arm/boot/uImage --ramdisk ./${ROOTFS} --second ./arch/arm/boot/dts/amlogic/mesong9tv_skt.dtb --output ./boot.img
+ls -l ./boot.img
+echo "boot.img done"
+
+xxd -p -c1 boot.img > boot.hex
-- 
2.19.0

