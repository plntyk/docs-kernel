From ecac1cf6ab780da1f31ba263b240c6c33c449543 Mon Sep 17 00:00:00 2001
From: "qi.duan" <qi.duan@amlogic.com>
Date: Thu, 23 Oct 2014 14:18:42 +0800
Subject: [PATCH 5075/5965] USB: bringup USB 3.0 for G9TV

USB 2.0 can work.

Change-Id: Icc2be239fe24ab1024f66b986b95b27f5a01686e
---
 arch/arm/configs/mesong9tv_defconfig |  15 +-
 drivers/amlogic/usb/Kconfig          |  12 ++
 drivers/usb/Kconfig                  |   2 +-
 drivers/usb/core/usb.c               |   4 +-
 drivers/usb/dwc3/core.c              |  34 +++-
 drivers/usb/gadget/Makefile          |   4 +-
 drivers/usb/host/xhci.c              |   4 +-
 drivers/usb/phy/Kconfig              |  20 +++
 drivers/usb/phy/Makefile             |   3 +
 drivers/usb/phy/phy-aml-usb.c        |  29 ++++
 drivers/usb/phy/phy-aml-usb.h        | 223 ++++++++++++++++++++++++++
 drivers/usb/phy/phy-aml-usb2.c       | 230 +++++++++++++++++++++++++++
 drivers/usb/phy/phy-aml-usb3.c       | 221 +++++++++++++++++++++++++
 13 files changed, 793 insertions(+), 8 deletions(-)
 mode change 100644 => 100755 drivers/usb/Kconfig
 mode change 100644 => 100755 drivers/usb/core/usb.c
 mode change 100644 => 100755 drivers/usb/dwc3/core.c
 mode change 100644 => 100755 drivers/usb/host/xhci.c
 mode change 100644 => 100755 drivers/usb/phy/Kconfig
 mode change 100644 => 100755 drivers/usb/phy/Makefile
 create mode 100755 drivers/usb/phy/phy-aml-usb.c
 create mode 100755 drivers/usb/phy/phy-aml-usb.h
 create mode 100755 drivers/usb/phy/phy-aml-usb2.c
 create mode 100755 drivers/usb/phy/phy-aml-usb3.c

diff --git a/arch/arm/configs/mesong9tv_defconfig b/arch/arm/configs/mesong9tv_defconfig
index 4a6c309fab75..d88a08ae6acb 100755
--- a/arch/arm/configs/mesong9tv_defconfig
+++ b/arch/arm/configs/mesong9tv_defconfig
@@ -158,6 +158,7 @@ CONFIG_AML_PMU=y
 CONFIG_AML1220=y
 CONFIG_EFUSE=y
 CONFIG_AMLOGIC_THERMAL=y
+CONFIG_AMLOGIC_USB_3=y
 CONFIG_MMC_AML=y
 # CONFIG_AML_NFTL_NEW is not set
 # CONFIG_AM_NAND is not set
@@ -209,7 +210,19 @@ CONFIG_V4L_PLATFORM_DRIVERS=y
 CONFIG_SND_AML_M8_SOC=y
 CONFIG_SND_AML_G9TV=y
 CONFIG_UHID=y
-# CONFIG_USB_SUPPORT is not set
+CONFIG_USB=y
+CONFIG_USB_XHCI_HCD=y
+CONFIG_USB_ACM=y
+CONFIG_USB_STORAGE=y
+CONFIG_USB_DWC3=y
+CONFIG_USB_DWC3_HOST=y
+CONFIG_USB_SERIAL=y
+CONFIG_USB_SERIAL_OPTION=y
+CONFIG_USB_PHY=y
+CONFIG_AMLOGIC_USB2PHY=y
+CONFIG_AMLOGIC_USB3PHY=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_G_ANDROID=y
 CONFIG_RTC_CLASS=y
 CONFIG_UIO=y
 CONFIG_UIO_PDRV=y
diff --git a/drivers/amlogic/usb/Kconfig b/drivers/amlogic/usb/Kconfig
index bb5abc75f35a..993f7f44e3f2 100755
--- a/drivers/amlogic/usb/Kconfig
+++ b/drivers/amlogic/usb/Kconfig
@@ -1,6 +1,18 @@
 
 menu "USB Support"
 
+config AMLOGIC_USB_3
+	tristate "Amlogic USB 3.0 controller support"
+	select CONFIG_USB_DWC3
+	select CONFIG_USB_XHCI_HCD
+	select CONFIG_USB_ARCH_HAS_XHCI
+	select CONFIG_USB_PHY
+	select CONFIG_AMLOGIC_USB2PHY
+  select CONFIG_AMLOGIC_USB3PHY
+	depends on USB
+	help
+	   dwc3 USB host controller
+
 config AMLOGIC_USB
 	tristate "Amlogic USB controller support"
 	select USB_DWC_OTG_HCD
diff --git a/drivers/usb/Kconfig b/drivers/usb/Kconfig
old mode 100644
new mode 100755
index 92e1dc94ecc8..9d867fab4868
--- a/drivers/usb/Kconfig
+++ b/drivers/usb/Kconfig
@@ -54,7 +54,7 @@ config USB_ARCH_HAS_EHCI
 # some non-PCI HCDs implement xHCI
 config USB_ARCH_HAS_XHCI
 	boolean
-	default PCI
+	default y
 
 menuconfig USB_SUPPORT
 	bool "USB support"
diff --git a/drivers/usb/core/usb.c b/drivers/usb/core/usb.c
old mode 100644
new mode 100755
index f10a87b00b0b..be5337426b36
--- a/drivers/usb/core/usb.c
+++ b/drivers/usb/core/usb.c
@@ -307,11 +307,13 @@ static const struct dev_pm_ops usb_device_pm_ops = {
 	.thaw =		usb_dev_thaw,
 	.poweroff =	usb_dev_poweroff,
 	.restore =	usb_dev_restore,
-#if 0 //def CONFIG_PM_RUNTIME
+#ifdef CONFIG_PM_RUNTIME
+#ifndef CONFIG_AMLOGIC_USB 
 	.runtime_suspend =	usb_runtime_suspend,
 	.runtime_resume =	usb_runtime_resume,
 	.runtime_idle =		usb_runtime_idle,
 #endif
+#endif
 };
 
 #endif	/* CONFIG_PM */
diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
old mode 100644
new mode 100755
index 358375e0b291..800134957aba
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -99,6 +99,18 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0), reg);
 
+	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(1));
+	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(1), reg);
+
+	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(2));
+	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(2), reg);
+
+	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(3));
+	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(3), reg);
+
 	usb_phy_init(dwc->usb2_phy);
 	usb_phy_init(dwc->usb3_phy);
 	mdelay(100);
@@ -113,6 +125,21 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	reg &= ~DWC3_GUSB2PHYCFG_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0), reg);
 
+	/* Clear USB2 PHY reset */
+	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(1));
+	reg &= ~DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(1), reg);
+
+	/* Clear USB2 PHY reset */
+	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(2));
+	reg &= ~DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(2), reg);
+
+	/* Clear USB2 PHY reset */
+	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(3));
+	reg &= ~DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(3), reg);
+
 	mdelay(100);
 
 	/* After PHYs are stable we can take Core out of reset state */
@@ -365,6 +392,7 @@ static void dwc3_core_exit(struct dwc3 *dwc)
 
 #define DWC3_ALIGN_MASK		(16 - 1)
 
+static u64 dwc3_dmamask = DMA_BIT_MASK(32);
 static int dwc3_probe(struct platform_device *pdev)
 {
 	struct device_node	*node = pdev->dev.of_node;
@@ -426,6 +454,9 @@ static int dwc3_probe(struct platform_device *pdev)
 		return -ENOMEM;
 	}
 
+	printk(KERN_INFO"dwc3_core probe:mem:0x%8x, iomap base:0x%8x	\n",
+	               (unsigned int)res->start,(unsigned int)regs);
+
 	if (node) {
 		dwc->usb2_phy = devm_usb_get_phy_by_phandle(dev, "usb-phy", 0);
 		dwc->usb3_phy = devm_usb_get_phy_by_phandle(dev, "usb-phy", 1);
@@ -474,8 +505,7 @@ static int dwc3_probe(struct platform_device *pdev)
 	dwc->regs_size	= resource_size(res);
 	dwc->dev	= dev;
 
-	dev->dma_mask	= dev->parent->dma_mask;
-	dev->dma_parms	= dev->parent->dma_parms;
+	dev->dma_mask	= &dwc3_dmamask;
 	dma_set_coherent_mask(dev, dev->parent->coherent_dma_mask);
 
 	if (!strncmp("super", maximum_speed, 5))
diff --git a/drivers/usb/gadget/Makefile b/drivers/usb/gadget/Makefile
index a73c66915012..fcf9725ad473 100755
--- a/drivers/usb/gadget/Makefile
+++ b/drivers/usb/gadget/Makefile
@@ -3,7 +3,9 @@
 #
 ccflags-$(CONFIG_USB_GADGET_DEBUG) := -DDEBUG
 
-#obj-$(CONFIG_USB_GADGET)	+= udc-core.o
+ifeq ($(CONFIG_USB_DWC3),y)
+obj-$(CONFIG_USB_GADGET)	+= udc-core.o
+endif
 obj-$(CONFIG_USB_LIBCOMPOSITE)	+= libcomposite.o
 libcomposite-y			:= usbstring.o config.o epautoconf.o
 libcomposite-y			+= composite.o functions.o 
diff --git a/drivers/usb/host/xhci.c b/drivers/usb/host/xhci.c
old mode 100644
new mode 100755
index a90819b83224..00837afe93f9
--- a/drivers/usb/host/xhci.c
+++ b/drivers/usb/host/xhci.c
@@ -3499,7 +3499,7 @@ void xhci_free_dev(struct usb_hcd *hcd, struct usb_device *udev)
 {
 	struct xhci_hcd *xhci = hcd_to_xhci(hcd);
 	struct xhci_virt_device *virt_dev;
-	struct device *dev = hcd->self.controller;
+	//struct device *dev = hcd->self.controller;
 	unsigned long flags;
 	u32 state;
 	int i, ret;
@@ -3585,7 +3585,7 @@ static int xhci_reserve_host_control_ep_resources(struct xhci_hcd *xhci)
 int xhci_alloc_dev(struct usb_hcd *hcd, struct usb_device *udev)
 {
 	struct xhci_hcd *xhci = hcd_to_xhci(hcd);
-	struct device *dev = hcd->self.controller;
+	//struct device *dev = hcd->self.controller;
 	unsigned long flags;
 	int timeleft;
 	int ret;
diff --git a/drivers/usb/phy/Kconfig b/drivers/usb/phy/Kconfig
old mode 100644
new mode 100755
index 3312ad2bb67f..da4309c558c5
--- a/drivers/usb/phy/Kconfig
+++ b/drivers/usb/phy/Kconfig
@@ -218,4 +218,24 @@ config USB_ULPI_VIEWPORT
 	  Provides read/write operations to the ULPI phy register set for
 	  controllers with a viewport register (e.g. Chipidea/ARC controllers).
 
+config AMLOGIC_USBPHY
+	tristate "Amlogic USB PHY Driver"
+	help
+	  Enable this to support Amlogic USB phy helper driver for Amlogic SoCs.
+	  This driver provides common interface to interact, for Amlogic USB 2.0 PHY
+	  driver and later for Amlogic USB 3.0 PHY driver.
+
+config AMLOGIC_USB2PHY
+	tristate "Amlogic USB 2.0 PHY controller Driver"
+	select AMLOGIC_USBPHY
+	help
+	  Enable this to support Amlogic USB 2.0 (High Speed) PHY controller
+	  driver for Amlogic SoCs.
+
+config AMLOGIC_USB3PHY
+	tristate "Amlogic USB 3.0 PHY controller Driver"
+	select AMLOGIC_USBPHY
+	help
+	  Enable this to support Amlogic USB 3.0 (Super Speed) phy controller
+	  for Amlogic SoCs.
 endif # USB_PHY
diff --git a/drivers/usb/phy/Makefile b/drivers/usb/phy/Makefile
old mode 100644
new mode 100755
index a0a6cbad8806..3b9d1dc2bb58
--- a/drivers/usb/phy/Makefile
+++ b/drivers/usb/phy/Makefile
@@ -32,3 +32,6 @@ obj-$(CONFIG_USB_MXS_PHY)		+= phy-mxs-usb.o
 obj-$(CONFIG_USB_RCAR_PHY)		+= phy-rcar-usb.o
 obj-$(CONFIG_USB_ULPI)			+= phy-ulpi.o
 obj-$(CONFIG_USB_ULPI_VIEWPORT)		+= phy-ulpi-viewport.o
+obj-$(CONFIG_AMLOGIC_USBPHY)		+= phy-aml-usb.o
+obj-$(CONFIG_AMLOGIC_USB2PHY)		+= phy-aml-usb2.o
+obj-$(CONFIG_AMLOGIC_USB3PHY)		+= phy-aml-usb3.o
diff --git a/drivers/usb/phy/phy-aml-usb.c b/drivers/usb/phy/phy-aml-usb.c
new file mode 100755
index 000000000000..85098308eea2
--- /dev/null
+++ b/drivers/usb/phy/phy-aml-usb.c
@@ -0,0 +1,29 @@
+/* linux/drivers/usb/phy/phy-aml-usb.c
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/clk.h>
+#include <linux/device.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/of.h>
+#include <linux/of_address.h>
+#include <mach/am_regs.h>
+#include "phy-aml-usb.h"
+
+int amlogic_usbphy_reset(void)
+{
+	static int	init_count = 0;
+
+	if(!init_count)
+	{
+		init_count++;
+		aml_set_reg32_bits(P_RESET1_REGISTER, 1, 2, 1);
+	}
+
+	return 0;
+}
+EXPORT_SYMBOL_GPL(amlogic_usbphy_reset);
+
diff --git a/drivers/usb/phy/phy-aml-usb.h b/drivers/usb/phy/phy-aml-usb.h
new file mode 100755
index 000000000000..08aefbb10545
--- /dev/null
+++ b/drivers/usb/phy/phy-aml-usb.h
@@ -0,0 +1,223 @@
+/* linux/drivers/usb/phy/phy-aml-usb.h
+ *
+ */
+
+#include <linux/usb/phy.h>
+
+#define PHY_REGISTER_SIZE	0x20
+/* Register definitions */
+typedef struct u2p_aml_regs {
+	volatile uint32_t u2p_r0; 
+	volatile uint32_t u2p_r1;      
+	volatile uint32_t u2p_r2; 
+} u2p_aml_regs_t;
+
+typedef union u2p_r0 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned bypass_sel:1;   // 0
+		unsigned bypass_dm_en:1; // 1 
+		unsigned bypass_dp_en:1; // 2
+		unsigned txbitstuffenh:1;// 3
+  		unsigned txbitstuffen:1; // 4
+		unsigned dmpulldown:1;   // 5
+		unsigned dppulldown:1;   // 6
+		unsigned vbusvldextsel:1;// 7
+		unsigned vbusvldext:1;   // 8
+		unsigned adp_prb_en:1;   // 9
+		unsigned adp_dischrg:1;  // 10
+		unsigned adp_chrg:1;     // 11
+		unsigned drvvbus:1;      // 12
+		unsigned idpullup:1;     // 13
+		unsigned loopbackenb:1;  // 14
+		unsigned otgdisable:1;   // 15
+		unsigned commononn:1;    // 16
+ 		unsigned fsel:3;         // 17
+		unsigned refclksel:2;    // 20
+		unsigned por:1;          // 22
+		unsigned vatestenb:2;    // 23
+		unsigned set_iddq:1;     // 25
+		unsigned ate_reset:1;    // 26
+		unsigned fsv_minus:1;    // 27
+		unsigned fsv_plus:1;     // 28
+		unsigned bypass_dm_data:1; // 29 
+		unsigned bypass_dp_data:1; // 30
+        	unsigned not_used:1;
+	} b;
+} u2p_r0_t;
+
+typedef union u2p_r1 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned burn_in_test:1; // 0
+		unsigned aca_enable:1;   // 1
+		unsigned dcd_enable:1;   // 2
+		unsigned vdatsrcenb:1;   // 3
+		unsigned vdatdetenb:1;   // 4
+		unsigned chrgsel:1;      // 5 
+		unsigned tx_preemp_pulse_tune:1; // 6
+		unsigned tx_preemp_amp_tune:2;   // 7 
+		unsigned tx_res_tune:2;  // 9
+		unsigned tx_rise_tune:2; // 11
+		unsigned tx_vref_tune:4; // 13
+		unsigned tx_fsls_tune:4; // 17
+		unsigned tx_hsxv_tune:2; // 21
+		unsigned otg_tune:3;     // 23
+		unsigned sqrx_tune:3;    // 26
+		unsigned comp_dis_tune:3;// 29 
+	} b;
+} u2p_r1_t;
+
+typedef union u2p_r2 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned data_in:4;      // 0
+		unsigned data_in_en:4;   // 4
+		unsigned addr:4;         // 8
+		unsigned data_out_sel:1; // 12
+		unsigned clk:1;          // 13 
+		unsigned data_out:4;     // 14
+		unsigned aca_pin_range_c:1; // 18
+		unsigned aca_pin_range_b:1; // 19
+		unsigned aca_pin_range_a:1; // 20
+		unsigned aca_pin_gnd:1;     // 21
+		unsigned aca_pin_float:1;   // 22 
+		unsigned chg_det:1;         // 23
+		unsigned device_sess_vld:1; // 24
+		unsigned adp_probe:1;    // 25
+		unsigned adp_sense:1;    // 26
+		unsigned sessend:1;      // 27
+		unsigned vbusvalid:1;    // 28
+		unsigned bvalid:1;       // 29
+		unsigned avalid:1;       // 30
+		unsigned iddig:1;        // 31
+	} b;
+} u2p_r2_t;
+
+typedef struct usb_aml_regs {
+	volatile uint32_t usb_r0; 
+	volatile uint32_t usb_r1;      
+	volatile uint32_t usb_r2; 
+	volatile uint32_t usb_r3; 
+	volatile uint32_t usb_r4; 
+	volatile uint32_t usb_r5; 
+	volatile uint32_t usb_r6; 
+} usb_aml_regs_t;
+
+typedef union usb_r0 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned p30_fsel:6; // 0
+		unsigned p30_phy_reset:1; // 6
+		unsigned p30_test_powerdown_hsp:1; // 7
+		unsigned p30_test_powerdown_ssp:1; // 8
+		unsigned p30_acjt_level:5;         // 9
+		unsigned p30_tx_vboost_lvl:3;      // 14
+  		unsigned p30_lane0_tx2rx_loopbk:1; // 17
+		unsigned p30_lane0_ext_pclk_req:1; // 18
+		unsigned p30_pcs_rx_los_mask_val:10; // 19
+		unsigned u2d_ss_scaledown_mode:2;  // 29
+		unsigned u2d_act:1; // 31
+	} b;
+} usb_r0_t;
+
+typedef union usb_r1 {
+	/** raw register data */
+	uint32_t d32;
+ 	/** register bits */
+	struct {
+		unsigned u3h_bigendian_gs:1; // 0
+		unsigned u3h_pme_en:1; // 1
+		unsigned u3h_hub_port_overcurrent:5; // 2
+ 		unsigned u3h_hub_port_perm_attach:5; // 7
+		unsigned u3h_host_u2_port_disable:4; // 12
+ 		unsigned u3h_host_u3_port_disable:1; // 16
+		unsigned u3h_host_port_power_control_present:1; // 17
+		unsigned u3h_host_msi_enable:1; // 18
+  		unsigned u3h_fladj_30mhz_reg:6; // 19
+		unsigned p30_pcs_tx_swing_full:7; // 25
+	} b;
+} usb_r1_t;
+
+typedef union usb_r2 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned p30_cr_data_in:16;     // 0
+		unsigned p30_cr_read:1;         // 16
+		unsigned p30_cr_write:1;        // 17
+		unsigned p30_cr_cap_addr:1;     // 18
+		unsigned p30_cr_cap_data:1;     // 19 
+		unsigned p30_pcs_tx_deemph_3p5db:6; // 20
+		unsigned p30_pcs_tx_deemph_6db:6; // 26
+	} b;
+} usb_r2_t;
+
+typedef union usb_r3 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned p30_ssc_en:1; // 0
+		unsigned p30_ssc_range:3; // 1
+		unsigned p30_ssc_ref_clk_sel:9; // 4
+		unsigned p30_ref_ssp_en:1; // 13
+		unsigned reserved14:2; // 14
+		unsigned p30_los_bias:3; // 16
+		unsigned p30_los_level:5; // 19
+		unsigned p30_mpll_multiplier:7; // 24
+		unsigned reserved31:1; // 31        
+	} b;
+} usb_r3_t;
+
+typedef union usb_r4 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned p21_PORTRESET0:1; // 0
+		unsigned p21_SLEEPM0:1; // 1
+		unsigned mem_pd:2;
+		unsigned reserved4:28; // 31        
+	} b;
+} usb_r4_t;
+
+typedef union usb_r5 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned reserved0:32; // 32        
+	} b;
+} usb_r5_t;
+
+typedef union usb_r6 {
+	/** raw register data */
+	uint32_t d32;
+	/** register bits */
+	struct {
+		unsigned p30_cr_data_out:16; // 0
+		unsigned p30_cr_ack:1;       // 16
+		unsigned not_used:15;        // 17
+	} b;
+} usb_r6_t;
+
+struct amlogic_usb {
+	struct usb_phy		phy;
+	struct device		*dev;
+	void __iomem	*regs;
+	int portnum;
+};
+
+#define	phy_to_amlusb(x)	container_of((x), struct amlogic_usb, phy)
+
+extern int amlogic_usbphy_reset(void);
\ No newline at end of file
diff --git a/drivers/usb/phy/phy-aml-usb2.c b/drivers/usb/phy/phy-aml-usb2.c
new file mode 100755
index 000000000000..6d86df9c45a0
--- /dev/null
+++ b/drivers/usb/phy/phy-aml-usb2.c
@@ -0,0 +1,230 @@
+/*
+phy-aml-usb2.c
+ *
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/io.h>
+#include <linux/usb/phy_companion.h>
+#include <linux/clk.h>
+#include <linux/err.h>
+#include <linux/pm_runtime.h>
+#include <linux/delay.h>
+#include "phy-aml-usb.h"
+
+static int amlogic_usb2_init(struct usb_phy *x)
+{
+	int time_dly = 500; //usec
+	struct amlogic_usb *phy = phy_to_amlusb(x);
+	int i;
+
+	u2p_aml_regs_t *u2p_aml_regs;
+	u2p_r0_t reg0;
+
+	amlogic_usbphy_reset();
+
+	for(i=0;i<phy->portnum;i++)
+	{
+		u2p_aml_regs = (u2p_aml_regs_t *)((unsigned int)phy->regs+i*PHY_REGISTER_SIZE);
+
+		reg0.d32 = u2p_aml_regs->u2p_r0;
+		reg0.b.por = 1;
+		reg0.b.dmpulldown = 1;
+		reg0.b.dppulldown =1;
+		u2p_aml_regs->u2p_r0 = reg0.d32;
+
+		udelay(time_dly);
+
+		reg0.d32 = u2p_aml_regs->u2p_r0;
+		reg0.b.por = 0;
+		u2p_aml_regs->u2p_r0 = reg0.d32;		
+	}
+
+	return 0;
+}
+
+static int amlogic_usb2_suspend(struct usb_phy *x, int suspend)
+{
+#if 0
+	u32 ret;
+	struct omap_usb *phy = phy_to_omapusb(x);
+
+	if (suspend && !phy->is_suspended) {
+		omap_control_usb_phy_power(phy->control_dev, 0);
+		pm_runtime_put_sync(phy->dev);
+		phy->is_suspended = 1;
+	} else if (!suspend && phy->is_suspended) {
+		ret = pm_runtime_get_sync(phy->dev);
+		if (ret < 0) {
+			dev_err(phy->dev, "get_sync failed with err %d\n",
+									ret);
+			return ret;
+		}
+		omap_control_usb_phy_power(phy->control_dev, 1);
+		phy->is_suspended = 0;
+	}
+#endif
+	return 0;
+}
+
+static int amlogic_usb2_probe(struct platform_device *pdev)
+{
+	struct amlogic_usb			*phy;
+//	struct usb_otg			*otg;
+	struct device *dev = &pdev->dev;
+	struct resource *phy_mem;
+	void __iomem	*phy_base;
+	int portnum=0;
+	const void *prop;
+
+	prop = of_get_property(dev->of_node, "portnum", NULL);
+	if(prop)
+		portnum = of_read_ulong(prop,1);
+
+	if(!portnum)
+	{
+		dev_err(&pdev->dev, "This phy has no usb port\n");
+		return -ENOMEM;
+	}
+	
+	phy_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	phy_base = devm_ioremap_resource(dev, phy_mem);
+	if (IS_ERR(phy_base))
+		return PTR_ERR(phy_base);
+	phy = devm_kzalloc(&pdev->dev, sizeof(*phy), GFP_KERNEL);
+	if (!phy) {
+		dev_err(&pdev->dev, "unable to allocate memory for USB2 PHY\n");
+		return -ENOMEM;
+	}
+
+	printk(KERN_INFO"USB2 phy probe:phy_mem:0x%8x, iomap phy_base:0x%8x\n",
+		               (unsigned int)phy_mem->start,(unsigned int)phy_base);
+	
+//	otg = devm_kzalloc(&pdev->dev, sizeof(*otg), GFP_KERNEL);
+//	if (!otg) {
+//		dev_err(&pdev->dev, "unable to allocate memory for USB OTG\n");
+//		return -ENOMEM;
+//	}
+
+	phy->dev		= dev;
+	phy->regs		= phy_base;
+	phy->portnum      = portnum;
+	phy->phy.dev		= phy->dev;
+	phy->phy.label		= "amlogic-usbphy2";
+	phy->phy.init		= amlogic_usb2_init;
+	phy->phy.set_suspend	= amlogic_usb2_suspend;
+//	phy->phy.otg		= otg;
+	phy->phy.type		= USB_PHY_TYPE_USB2;
+
+//	otg->set_host		= omap_usb_set_host;
+//	otg->set_peripheral	= omap_usb_set_peripheral;
+//	otg->set_vbus		= omap_usb_set_vbus;
+//	otg->start_srp		= omap_usb_start_srp;
+//	otg->phy		= &phy->phy;
+
+	usb_add_phy_dev(&phy->phy);
+
+	platform_set_drvdata(pdev, phy);
+
+	pm_runtime_enable(phy->dev);
+
+	return 0;
+}
+
+static int amlogic_usb2_remove(struct platform_device *pdev)
+{
+#if 0
+	struct omap_usb	*phy = platform_get_drvdata(pdev);
+
+	clk_unprepare(phy->wkupclk);
+	if (!IS_ERR(phy->optclk))
+		clk_unprepare(phy->optclk);
+	usb_remove_phy(&phy->phy);
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_PM_RUNTIME
+
+static int amlogic_usb2_runtime_suspend(struct device *dev)
+{
+#if 0
+	struct platform_device	*pdev = to_platform_device(dev);
+	struct omap_usb	*phy = platform_get_drvdata(pdev);
+
+	clk_disable(phy->wkupclk);
+	if (!IS_ERR(phy->optclk))
+		clk_disable(phy->optclk);
+#endif
+	return 0;
+}
+
+static int amlogic_usb2_runtime_resume(struct device *dev)
+{
+	unsigned ret = 0;
+#if 0
+	struct platform_device	*pdev = to_platform_device(dev);
+	struct omap_usb	*phy = platform_get_drvdata(pdev);
+
+	ret = clk_enable(phy->wkupclk);
+	if (ret < 0) {
+		dev_err(phy->dev, "Failed to enable wkupclk %d\n", ret);
+		goto err0;
+	}
+
+	if (!IS_ERR(phy->optclk)) {
+		ret = clk_enable(phy->optclk);
+		if (ret < 0) {
+			dev_err(phy->dev, "Failed to enable optclk %d\n", ret);
+			goto err1;
+		}
+	}
+
+	return 0;
+
+err1:
+	clk_disable(phy->wkupclk);
+
+err0:
+#endif
+	return ret;
+}
+
+static const struct dev_pm_ops amlogic_usb2_pm_ops = {
+	SET_RUNTIME_PM_OPS(amlogic_usb2_runtime_suspend, amlogic_usb2_runtime_resume,
+		NULL)
+};
+
+#define DEV_PM_OPS     (&amlogic_usb2_pm_ops)
+#else
+#define DEV_PM_OPS     NULL
+#endif
+
+#ifdef CONFIG_OF
+static const struct of_device_id amlogic_usb2_id_table[] = {
+	{ .compatible = "amlogic,amlogic-usb2" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, amlogic_usb2_id_table);
+#endif
+
+static struct platform_driver amlogic_usb2_driver = {
+	.probe		= amlogic_usb2_probe,
+	.remove		= amlogic_usb2_remove,
+	.driver		= {
+		.name	= "amlogic-usb2",
+		.owner	= THIS_MODULE,
+		.pm	= DEV_PM_OPS,
+		.of_match_table = of_match_ptr(amlogic_usb2_id_table),
+	},
+};
+
+module_platform_driver(amlogic_usb2_driver);
+
+MODULE_ALIAS("platform: amlogic_usb2");
+MODULE_AUTHOR("Amlogic Inc.");
+MODULE_DESCRIPTION("amlogic USB2 phy driver");
+MODULE_LICENSE("GPL v2");
diff --git a/drivers/usb/phy/phy-aml-usb3.c b/drivers/usb/phy/phy-aml-usb3.c
new file mode 100755
index 000000000000..1c674ab84402
--- /dev/null
+++ b/drivers/usb/phy/phy-aml-usb3.c
@@ -0,0 +1,221 @@
+/*
+ * phy-aml-usb3.c
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/slab.h>
+#include <linux/of.h>
+#include <linux/clk.h>
+#include <linux/err.h>
+#include <linux/pm_runtime.h>
+#include <linux/delay.h>
+#include "phy-aml-usb.h"
+
+static int amlogic_usb3_suspend(struct usb_phy *x, int suspend)
+{
+#if 0
+	struct omap_usb *phy = phy_to_omapusb(x);
+	int	val;
+	int timeout = PLL_IDLE_TIME;
+
+	if (suspend && !phy->is_suspended) {
+		val = omap_usb_readl(phy->pll_ctrl_base, PLL_CONFIGURATION2);
+		val |= PLL_IDLE;
+		omap_usb_writel(phy->pll_ctrl_base, PLL_CONFIGURATION2, val);
+
+		do {
+			val = omap_usb_readl(phy->pll_ctrl_base, PLL_STATUS);
+			if (val & PLL_TICOPWDN)
+				break;
+			udelay(1);
+		} while (--timeout);
+
+		omap_control_usb3_phy_power(phy->control_dev, 0);
+
+		phy->is_suspended	= 1;
+	} else if (!suspend && phy->is_suspended) {
+		phy->is_suspended	= 0;
+
+		val = omap_usb_readl(phy->pll_ctrl_base, PLL_CONFIGURATION2);
+		val &= ~PLL_IDLE;
+		omap_usb_writel(phy->pll_ctrl_base, PLL_CONFIGURATION2, val);
+
+		do {
+			val = omap_usb_readl(phy->pll_ctrl_base, PLL_STATUS);
+			if (!(val & PLL_TICOPWDN))
+				break;
+			udelay(1);
+		} while (--timeout);
+	}
+#endif
+	return 0;
+}
+
+static int amlogic_usb3_init(struct usb_phy *x)
+{
+	struct amlogic_usb *phy = phy_to_amlusb(x);
+
+	usb_aml_regs_t *usb_aml_regs;
+	usb_r0_t r0 = {.d32 = 0};
+	int i;
+
+	amlogic_usbphy_reset();
+	
+	for(i=0;i<phy->portnum;i++)
+	{
+		usb_aml_regs = (usb_aml_regs_t *)((unsigned int)phy->regs+i*PHY_REGISTER_SIZE);
+
+		usb_aml_regs->usb_r3 = (1<<13) | (0x68<<24);
+		r0.d32 = usb_aml_regs->usb_r0;
+		r0.b.p30_phy_reset = 1;
+		usb_aml_regs->usb_r0 = r0.d32;
+    		udelay(2);
+		r0.b.p30_phy_reset = 0;
+		usb_aml_regs->usb_r0 = r0.d32;
+	}
+	return 0;
+}
+
+static int amlogic_usb3_probe(struct platform_device *pdev)
+{
+	struct amlogic_usb			*phy;
+	struct device *dev = &pdev->dev;
+	struct resource *phy_mem;
+	void __iomem	*phy_base;
+	int portnum=0;
+	const void *prop;
+	
+	prop = of_get_property(dev->of_node, "portnum", NULL);
+	if(prop)
+		portnum = of_read_ulong(prop,1);
+
+	if(!portnum)
+	{
+		dev_err(&pdev->dev, "This phy has no usb port\n");
+		return -ENOMEM;
+	}
+	phy_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	phy_base = devm_ioremap_resource(dev, phy_mem);
+	if (IS_ERR(phy_base))
+		return PTR_ERR(phy_base);
+	phy = devm_kzalloc(&pdev->dev, sizeof(*phy), GFP_KERNEL);
+	if (!phy) {
+		dev_err(&pdev->dev, "unable to allocate memory for USB3 PHY\n");
+		return -ENOMEM;
+	}
+
+	printk(KERN_INFO"USB3 phy probe:phy_mem:0x%8x, iomap phy_base:0x%8x	\n",
+	               (unsigned int)phy_mem->start,(unsigned int)phy_base);
+	
+	phy->dev		= dev;
+	phy->regs		= phy_base;
+	phy->portnum      = portnum;
+	phy->phy.dev		= phy->dev;
+	phy->phy.label		= "amlogic-usbphy2";
+	phy->phy.init		= amlogic_usb3_init;
+	phy->phy.set_suspend	= amlogic_usb3_suspend;
+	phy->phy.type		= USB_PHY_TYPE_USB3;
+
+	usb_add_phy_dev(&phy->phy);
+
+	platform_set_drvdata(pdev, phy);
+
+	pm_runtime_enable(phy->dev);
+
+	return 0;
+}
+
+static int amlogic_usb3_remove(struct platform_device *pdev)
+{
+#if 0
+	struct omap_usb *phy = platform_get_drvdata(pdev);
+
+	clk_unprepare(phy->wkupclk);
+	clk_unprepare(phy->optclk);
+	usb_remove_phy(&phy->phy);
+	if (!pm_runtime_suspended(&pdev->dev))
+		pm_runtime_put(&pdev->dev);
+	pm_runtime_disable(&pdev->dev);
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_PM_RUNTIME
+
+static int amlogic_usb3_runtime_suspend(struct device *dev)
+{
+#if 0
+	struct platform_device	*pdev = to_platform_device(dev);
+	struct omap_usb	*phy = platform_get_drvdata(pdev);
+
+	clk_disable(phy->wkupclk);
+	clk_disable(phy->optclk);
+#endif
+	return 0;
+}
+
+static int amlogic_usb3_runtime_resume(struct device *dev)
+{
+	u32 ret = 0;
+#if 0	
+	struct platform_device	*pdev = to_platform_device(dev);
+	struct omap_usb	*phy = platform_get_drvdata(pdev);
+
+	ret = clk_enable(phy->optclk);
+	if (ret) {
+		dev_err(phy->dev, "Failed to enable optclk %d\n", ret);
+		goto err1;
+	}
+
+	ret = clk_enable(phy->wkupclk);
+	if (ret) {
+		dev_err(phy->dev, "Failed to enable wkupclk %d\n", ret);
+		goto err2;
+	}
+
+	return 0;
+
+err2:
+	clk_disable(phy->optclk);
+
+err1:
+#endif
+	return ret;
+}
+
+static const struct dev_pm_ops amlogic_usb3_pm_ops = {
+	SET_RUNTIME_PM_OPS(amlogic_usb3_runtime_suspend, amlogic_usb3_runtime_resume,
+		NULL)
+};
+
+#define DEV_PM_OPS     (&amlogic_usb3_pm_ops)
+#else
+#define DEV_PM_OPS     NULL
+#endif
+
+#ifdef CONFIG_OF
+static const struct of_device_id amlogic_usb3_id_table[] = {
+	{ .compatible = "amlogic,amlogic-usb3" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, amlogic_usb3_id_table);
+#endif
+
+static struct platform_driver amlogic_usb3_driver = {
+	.probe		= amlogic_usb3_probe,
+	.remove		= amlogic_usb3_remove,
+	.driver		= {
+		.name	= "amlogic-usb3",
+		.owner	= THIS_MODULE,
+		.pm	= DEV_PM_OPS,
+		.of_match_table = of_match_ptr(amlogic_usb3_id_table),
+	},
+};
+
+module_platform_driver(amlogic_usb3_driver);
+
+MODULE_ALIAS("platform: amlogic_usb3");
+MODULE_AUTHOR("Amlogic Inc.");
+MODULE_DESCRIPTION("amlogic USB3 phy driver");
+MODULE_LICENSE("GPL v2");
-- 
2.19.0

