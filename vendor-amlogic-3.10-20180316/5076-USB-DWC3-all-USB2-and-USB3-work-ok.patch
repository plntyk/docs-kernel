From 2ba0b0305c0c4ab5ca7ce075e777b682a10e0fe2 Mon Sep 17 00:00:00 2001
From: "qi.duan" <qi.duan@amlogic.com>
Date: Fri, 24 Oct 2014 14:13:27 +0800
Subject: [PATCH 5076/5965] USB:DWC3: all USB2 and USB3 work ok

Change-Id: I9bc0fabd2bbe326820f670f52a1e0ddfcfff1dfa
---
 drivers/usb/Makefile           |   4 +-
 drivers/usb/dwc3/core.c        |  19 +++-
 drivers/usb/phy/phy-aml-usb3.c | 190 ++++++++++++++++++++++++++++++++-
 3 files changed, 207 insertions(+), 6 deletions(-)
 mode change 100644 => 100755 drivers/usb/Makefile

diff --git a/drivers/usb/Makefile b/drivers/usb/Makefile
old mode 100644
new mode 100755
index c41feba8d5c0..0b73079727fa
--- a/drivers/usb/Makefile
+++ b/drivers/usb/Makefile
@@ -6,8 +6,6 @@
 
 obj-$(CONFIG_USB)		+= core/
 
-obj-$(CONFIG_USB_DWC3)		+= dwc3/
-
 obj-$(CONFIG_USB_MON)		+= mon/
 
 obj-$(CONFIG_PCI)		+= host/
@@ -46,7 +44,7 @@ obj-$(CONFIG_USB_SERIAL)	+= serial/
 obj-$(CONFIG_USB)		+= misc/
 obj-$(CONFIG_USB_PHY)		+= phy/
 obj-$(CONFIG_EARLY_PRINTK_DBGP)	+= early/
-
+obj-$(CONFIG_USB_DWC3)		+= dwc3/
 obj-$(CONFIG_USB_ATM)		+= atm/
 obj-$(CONFIG_USB_SPEEDTOUCH)	+= atm/
 
diff --git a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
index 800134957aba..f3d4224fb986 100755
--- a/drivers/usb/dwc3/core.c
+++ b/drivers/usb/dwc3/core.c
@@ -99,6 +99,7 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0), reg);
 
+#ifdef CONFIG_AMLOGIC_USB_3
 	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(1));
 	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(1), reg);
@@ -110,7 +111,7 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(3));
 	reg |= DWC3_GUSB2PHYCFG_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(3), reg);
-
+#endif
 	usb_phy_init(dwc->usb2_phy);
 	usb_phy_init(dwc->usb3_phy);
 	mdelay(100);
@@ -120,9 +121,11 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	reg &= ~DWC3_GUSB3PIPECTL_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB3PIPECTL(0), reg);
 
+#ifdef CONFIG_AMLOGIC_USB_3
 	/* Clear USB2 PHY reset */
 	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(0));
 	reg &= ~DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	reg &= ~DWC3_GUSB2PHYCFG_SUSPHY;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0), reg);
 
 	/* Clear USB2 PHY reset */
@@ -139,7 +142,12 @@ static void dwc3_core_soft_reset(struct dwc3 *dwc)
 	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(3));
 	reg &= ~DWC3_GUSB2PHYCFG_PHYSOFTRST;
 	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(3), reg);
-
+#else
+	/* Clear USB2 PHY reset */
+	reg = dwc3_readl(dwc->regs, DWC3_GUSB2PHYCFG(0));
+	reg &= ~DWC3_GUSB2PHYCFG_PHYSOFTRST;
+	dwc3_writel(dwc->regs, DWC3_GUSB2PHYCFG(0), reg);
+#endif
 	mdelay(100);
 
 	/* After PHYs are stable we can take Core out of reset state */
@@ -392,7 +400,9 @@ static void dwc3_core_exit(struct dwc3 *dwc)
 
 #define DWC3_ALIGN_MASK		(16 - 1)
 
+#ifdef CONFIG_AMLOGIC_USB_3
 static u64 dwc3_dmamask = DMA_BIT_MASK(32);
+#endif
 static int dwc3_probe(struct platform_device *pdev)
 {
 	struct device_node	*node = pdev->dev.of_node;
@@ -505,7 +515,12 @@ static int dwc3_probe(struct platform_device *pdev)
 	dwc->regs_size	= resource_size(res);
 	dwc->dev	= dev;
 
+#ifdef CONFIG_AMLOGIC_USB_3
 	dev->dma_mask	= &dwc3_dmamask;
+#else
+	dev->dma_mask	= dev->parent->dma_mask;
+	dev->dma_parms	= dev->parent->dma_parms;
+#endif
 	dma_set_coherent_mask(dev, dev->parent->coherent_dma_mask);
 
 	if (!strncmp("super", maximum_speed, 5))
diff --git a/drivers/usb/phy/phy-aml-usb3.c b/drivers/usb/phy/phy-aml-usb3.c
index 1c674ab84402..34b1b602ff0e 100755
--- a/drivers/usb/phy/phy-aml-usb3.c
+++ b/drivers/usb/phy/phy-aml-usb3.c
@@ -12,6 +12,8 @@
 #include <linux/delay.h>
 #include "phy-aml-usb.h"
 
+usb_aml_regs_t *usb_aml_regs;
+
 static int amlogic_usb3_suspend(struct usb_phy *x, int suspend)
 {
 #if 0
@@ -52,13 +54,132 @@ static int amlogic_usb3_suspend(struct usb_phy *x, int suspend)
 	return 0;
 }
 
+void cr_bus_addr (int addr)
+{
+	usb_r2_t usb_r2 = {.d32 = 0};
+	usb_r6_t usb_r6 = {.d32 = 0};
+
+	// prepare addr
+	usb_r2.b.p30_cr_data_in = addr;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// cap addr rising edge
+	usb_r2.b.p30_cr_cap_addr = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+	usb_r2.b.p30_cr_cap_addr = 1;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 1
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 0);
+
+	// clear cap addr
+	usb_r2.b.p30_cr_cap_addr = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 0
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 1);
+}
+
+int cr_bus_read (int addr)
+{
+	int data;
+	usb_r2_t usb_r2 = {.d32 = 0};
+	usb_r6_t usb_r6 = {.d32 = 0};
+
+	cr_bus_addr ( addr );
+
+	// read rising edge
+	usb_r2.b.p30_cr_read = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+	usb_r2.b.p30_cr_read = 1;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 1
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 0);
+
+	// save data
+	data = usb_r6.b.p30_cr_data_out;
+
+	// clear read
+	usb_r2.b.p30_cr_read = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 0
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 1);
+
+	return data;
+}
+
+void cr_bus_write (int addr, int data)
+{
+	usb_r2_t usb_r2 = {.d32 = 0};
+	usb_r6_t usb_r6 = {.d32 = 0};
+
+	cr_bus_addr ( addr );
+
+	// prepare data
+	usb_r2.b.p30_cr_data_in = data;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// cap data rising edge
+	usb_r2.b.p30_cr_cap_data = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+	usb_r2.b.p30_cr_cap_data = 1;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 1
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 0);
+
+	// clear cap data
+	usb_r2.b.p30_cr_cap_data = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 0
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 1);
+
+	// write rising edge
+	usb_r2.b.p30_cr_write = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+	usb_r2.b.p30_cr_write = 1;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 1
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 0);
+
+	// clear write
+	usb_r2.b.p30_cr_write = 0;
+	usb_aml_regs->usb_r2 = usb_r2.d32;
+
+	// wait ack 0
+	do {
+		usb_r6.d32 = usb_aml_regs->usb_r6;
+	} while (usb_r6.b.p30_cr_ack == 1);
+}
+
 static int amlogic_usb3_init(struct usb_phy *x)
 {
 	struct amlogic_usb *phy = phy_to_amlusb(x);
 
-	usb_aml_regs_t *usb_aml_regs;
 	usb_r0_t r0 = {.d32 = 0};
+	usb_r1_t r1 = {.d32 = 0};
+	usb_r2_t r2 = {.d32 = 0};
+	usb_r3_t r3 = {.d32 = 0};
 	int i;
+	u32 data = 0;
 
 	amlogic_usbphy_reset();
 	
@@ -73,6 +194,73 @@ static int amlogic_usb3_init(struct usb_phy *x)
     		udelay(2);
 		r0.b.p30_phy_reset = 0;
 		usb_aml_regs->usb_r0 = r0.d32;
+	
+
+		/*
+	 	* WORKAROUND: There is SSPHY suspend bug due to which USB enumerates
+	 	* in HS mode instead of SS mode. Workaround it by asserting
+	 	* LANE0.TX_ALT_BLOCK.EN_ALT_BUS to enable TX to use alt bus mode
+	 	*/
+		data = cr_bus_read(0x102d);
+		data |= (1 << 7);
+		cr_bus_write(0x102D, data);
+
+		data = cr_bus_read(0x1010);
+		data &= ~0xff0;
+		data |= 0x20;
+		cr_bus_write(0x1010, data);
+
+		/*
+	 	* Fix RX Equalization setting as follows
+	 	* LANE0.RX_OVRD_IN_HI. RX_EQ_EN set to 0
+	 	* LANE0.RX_OVRD_IN_HI.RX_EQ_EN_OVRD set to 1
+	 	* LANE0.RX_OVRD_IN_HI.RX_EQ set to 3
+	 	* LANE0.RX_OVRD_IN_HI.RX_EQ_OVRD set to 1
+	 	*/
+		data = cr_bus_read(0x1006);
+		data &= ~(1 << 6);
+		data |= (1 << 7);
+		data &= ~(0x7 << 8);
+		data |= (0x3 << 8);
+		data |= (0x1 << 11);
+		cr_bus_write(0x1006, data);
+
+		/*
+	 	* Set EQ and TX launch amplitudes as follows
+	 	* LANE0.TX_OVRD_DRV_LO.PREEMPH set to 22
+	 	* LANE0.TX_OVRD_DRV_LO.AMPLITUDE set to 127
+		 * LANE0.TX_OVRD_DRV_LO.EN set to 1.
+	 	*/
+		data = cr_bus_read(0x1002);
+		data &= ~0x3f80;
+		data |= (0x16 << 7);
+		data &= ~0x7f;
+		data |= (0x7f | (1 << 14));
+		cr_bus_write(0x1002, data);
+
+		/*
+	 	* TX_FULL_SWING  to 127
+	 	*/
+		r1.d32 = usb_aml_regs->usb_r1;
+		r1.b.p30_pcs_tx_swing_full = 127;
+		usb_aml_regs->usb_r1 = r1.d32;
+
+		/*
+	  	* TX_DEEMPH_3_5DB  to 22
+	  	*/
+		r2.d32 = usb_aml_regs->usb_r2;
+		r2.b.p30_pcs_tx_deemph_3p5db = 22;
+		usb_aml_regs->usb_r2 = r2.d32;
+
+		/*
+	  	* LOS_BIAS  to 0x5
+	  	* LOS_LEVEL to 0x9
+	  	*/
+		r3.d32 = usb_aml_regs->usb_r3;
+		r3.b.p30_los_bias = 0x5;
+		r3.b.p30_los_level = 0x9;
+		usb_aml_regs->usb_r3 = r3.d32;
+
 	}
 	return 0;
 }
-- 
2.19.0

