From cf5c8863ef1178be05b7a3d22f6be924fb3a202f Mon Sep 17 00:00:00 2001
From: "wengang.lei" <wengang.lei@amlogic.com>
Date: Fri, 14 Nov 2014 13:59:22 +0800
Subject: [PATCH 5083/5965] g9tv: add support for eMMC/SD for G9TV

Change-Id: Ifb1bb798eeb56a08464367e09634882ff6ae1648
---
 arch/arm/mach-mesong9tv/include/mach/sd.h | 37 ++++++++++----
 drivers/amlogic/mmc/Makefile              |  4 ++
 drivers/amlogic/mmc/aml_sdhc_m8.c         | 61 +++++++++++++++++------
 drivers/amlogic/mmc/aml_sdio.c            | 19 +++++--
 drivers/amlogic/mmc/amlsd.c               | 35 ++++++++++---
 5 files changed, 117 insertions(+), 39 deletions(-)

diff --git a/arch/arm/mach-mesong9tv/include/mach/sd.h b/arch/arm/mach-mesong9tv/include/mach/sd.h
index a42bfa8fc006..317713353580 100644
--- a/arch/arm/mach-mesong9tv/include/mach/sd.h
+++ b/arch/arm/mach-mesong9tv/include/mach/sd.h
@@ -507,11 +507,11 @@ struct sdhc_misc{
 	u32 reserved:4; /*[3:0] reserved*/
 	u32 wcrc_err_patt:3; /*[6:4] WCRC Error Pattern*/
 	u32 wcrc_ok_patt:3; /*[9:7] WCRC OK Pattern*/
-	u32 reserved1:6; /*[15:10] reserved*/
+	u32 txstart_thres:6; /*[15:10] reserved*/
 	u32 burst_num:6; /*[21:16] Burst Number*/
 	u32 thread_id:6; /*[27:22] Thread ID*/
 	u32 manual_stop:1; /*[28] 0:auto stop mode, 1:manual stop mode*/
-	u32 reserved2:3; /*[31:29] reserved*/
+	u32 reserved1:3; /*[31:29] txstart_thres(if (txfifo_cnt/4)>(threshold*2), Tx will start)*/
 };
 
 struct sdhc_ictl{
@@ -569,14 +569,29 @@ struct sdhc_srst{
 	u32 reserved:26; /*[31:6] reserved*/
 };
 
-struct sdhc_enhc{
-	u32 rx_timeout:8; /*[7:0] Data Rx Timeout Setting*/
-	u32 sdio_irq_period:8; /*[15:8] SDIO IRQ Period Setting
-			(IRQ checking window length)*/
-	u32 dma_rd_resp:1; /*[16] No Read DMA Response Check*/
-	u32 dma_wr_resp:1; /*[16] No Write DMA Response Check*/
-	u32 rxfifo_th:7; /*[24:18] RXFIFO Full Threshold,default 60*/
-	u32 txfifo_th:7; /*[31:25] TXFIFO Empty Threshold,default 0*/
+struct  sdhc_enhc{	
+	union  {		
+		struct  {			
+			u32 wrrsp_mode:1; /*[0] 0:Wrrsp Check in DMA Rx FSM 1:No Check in FSM*/		    	
+			u32 chk_wrrsp:1; /*[1] Rx Done without checking if Wrrsp count is 0*/		    	
+			u32 chk_dma:1; /*[2] Rx Done without checking if DMA is IDLE*/		    	
+			u32 debug:3;  /*[5:3] debug only*/		    	
+			u32 reserved:2;		    	
+			u32 sdio_irq_period:8; /*[15:8] SDIO IRQ Period Setting*/		    	
+			u32 reserved1:2;		    	
+			u32 rxfifo_th:7; /*[24:18] RXFIFO Full Threshold,default 60*/		    	
+			u32 txfifo_th:7; /*[31:25] TXFIFO Empty Threshold,default 0*/				
+		}  meson8m2;		
+		struct  {			
+			u32 rx_timeout:8; /*[7:0] Data Rx Timeout Setting*/			
+			u32 sdio_irq_period:8; /*[15:8] SDIO IRQ Period Setting					
+				(IRQ checking window length)*/			
+			u32 dma_rd_resp:1; /*[16] No Read DMA Response Check*/			
+			u32 dma_wr_resp:1; /*[16] No Write DMA Response Check*/			
+			u32 rxfifo_th:7; /*[24:18] RXFIFO Full Threshold,default 60*/			
+			u32 txfifo_th:7; /*[31:25] TXFIFO Empty Threshold,default 0*/				
+		}  meson;		
+	}reg;
 };
 
 struct sdhc_clk2{
@@ -676,7 +691,7 @@ extern int ext_codec;
 }while(0)
 #else
 #define aml_jtag_gpioao() do{\
-    aml_clr_reg32_mask(P_AO_SECURE_REG1, ((1<<5) | (1<<9))); \
+	aml_clr_reg32_mask(P_AO_SECURE_REG1, ((1<<5) | (1<<9))); \
 }while(0)
 #endif
 
diff --git a/drivers/amlogic/mmc/Makefile b/drivers/amlogic/mmc/Makefile
index ba066d29a561..9b522c993c5e 100755
--- a/drivers/amlogic/mmc/Makefile
+++ b/drivers/amlogic/mmc/Makefile
@@ -15,6 +15,10 @@ endif
 ifeq ($(CONFIG_ARCH_MESON8B),y)
 	obj-$(CONFIG_MMC_AML) += aml_sdhc_m8.o
 endif
+ 
+ifeq ($(CONFIG_ARCH_MESONG9TV),y)
+	obj-$(CONFIG_MMC_AML) += aml_sdhc_m8.o
+endif
 
 # ifeq ($(CONFIG_ARCH_MESON6),y)
 # obj-$(CONFIG_MMC_AML) += aml_sdhc.o
diff --git a/drivers/amlogic/mmc/aml_sdhc_m8.c b/drivers/amlogic/mmc/aml_sdhc_m8.c
index cfe5b85e07cd..5d426f040db5 100755
--- a/drivers/amlogic/mmc/aml_sdhc_m8.c
+++ b/drivers/amlogic/mmc/aml_sdhc_m8.c
@@ -497,10 +497,17 @@ static void aml_sdhc_reg_init(struct amlsd_host* host)
 
     pdma->dma_mode = 0;
     pdma->dma_urgent = 1;
-
     pdma->wr_burst = 7;//3; // means 4
+ 
+    
+#ifdef CONFIG_ARCH_MESONG9TV
+    pdma->rd_burst = 7;//15;  //7
+    pdma->txfifo_th = 57; // means 49
+    
+#else    
     pdma->txfifo_th = 49; // means 49
     pdma->rd_burst = 15; // means 8
+#endif    
     pdma->rxfifo_th = 7; // means 8
     //pdma->rxfifo_manual_flush = 1; // bit[29]=1, bit[30]=0
     // pdma->rd_burst = 3;
@@ -509,19 +516,24 @@ static void aml_sdhc_reg_init(struct amlsd_host* host)
     // pdma->txfifo_th = 0x18;
     writel(vpdma, host->base+SDHC_PDMA);
 
+#ifdef CONFIG_ARCH_MESONG9TV
+    misc.txstart_thres = 57;//49;  //57
+#else
     /*Send Stop Cmd automatically*/
     if(IS_MESON_M8M2_CPU)
          misc.txstart_thres = 6;//4; // [29:31] = 7
     else
          misc.txstart_thres = 7; // [29:31] = 7
+#endif
+         
     misc.manual_stop = 0;
     misc.wcrc_err_patt = 5;
     misc.wcrc_ok_patt = 2;
     writel(*(u32*)&misc, host->base + SDHC_MISC);
 
     venhc = readl(host->base+SDHC_ENHC);
-    
-    if(IS_MESON_M8M2_CPU){
+
+    if((IS_MESON_M8M2_CPU) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV)){
 	    enhc->reg.meson8m2.rxfifo_th = 64;
 	    enhc->reg.meson8m2.sdio_irq_period = 12;
 	    enhc->reg.meson8m2.debug = 1;
@@ -536,6 +548,7 @@ static void aml_sdhc_reg_init(struct amlsd_host* host)
 	    enhc->reg.meson.sdio_irq_period = 12;
 	    enhc->reg.meson.rx_timeout = 255;
     }
+
     writel(venhc, host->base + SDHC_ENHC);
 
     /*Disable All Irq*/
@@ -639,10 +652,12 @@ void aml_sdhc_set_pdma(struct amlsd_platform* pdata, struct mmc_request* mrq)
     BUG_ON(!mrq->data);
 #if 1
     pdma->dma_mode = 1;
-    if(IS_MESON_M8M2_CPU){
+
+    if((IS_MESON_M8M2_CPU) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV)){
 	    writel(*(u32*)pdma, host->base+SDHC_PDMA);
 	    return;
     }
+    
     if(mrq->data->flags & MMC_DATA_WRITE){
         /*self-clear-fill, recommend to write before sd send*/
         //init sets rd_burst to 15
@@ -844,15 +859,16 @@ void aml_sdhc_start_cmd(struct amlsd_platform* pdata, struct mmc_request* mrq)
          * wait dma done interrupt(int[11]), don't need care about
          * dat0 busy or not.
          */
-        if(IS_MESON_M8M2_CPU)
-        	ictl.dma_done = 1; // for hardware automatical flush
+
+    if((IS_MESON_M8M2_CPU) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV))
+    	ictl.dma_done = 1; // for hardware automatical flush
 	 else{         
 	        if((mrq->data->flags & MMC_DATA_WRITE) 
 	            || aml_card_type_sdio(pdata))
 	            ictl.dma_done = 1; // for hardware automatical flush
 	        else
 	            ictl.data_xfer_ok = 1; // for software flush
-	 }            
+	 }
     }else
         ictl.resp_ok = 1;
 
@@ -895,7 +911,7 @@ void aml_sdhc_start_cmd(struct amlsd_platform* pdata, struct mmc_request* mrq)
     }
 #endif
 
-    if(!IS_MESON_M8M2_CPU){
+    if(!((IS_MESON_M8M2_CPU) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV))){
 	    loop_limit = 100;
 	    for (i = 0; i < loop_limit; i++) {
 	        vesta = readl(host->base + SDHC_ESTA);
@@ -1358,10 +1374,10 @@ void aml_sdhc_request(struct mmc_host *mmc, struct mmc_request *mrq)
     else
         timeout = 500;//mod_timer(&host->timeout_tlist,
                 //jiffies + 500/*10*nsecs_to_jiffies(mrq->data->timeout_ns)*/); // 5s
-    
-    if(mrq->cmd->opcode == MMC_ERASE) //about 30S for erase cmd.
-        timeout = 3000;
-             
+
+    if(mrq->cmd->opcode == MMC_ERASE) //about 30S for erase cmd.       
+	  timeout = 3000;	
+	
     schedule_delayed_work(&host->timeout, timeout);
 
     spin_lock_irqsave(&host->mrq_lock, flags);
@@ -1610,13 +1626,15 @@ irqreturn_t aml_sdhc_data_thread(int irq, void *data)
     struct sdhc_stat* stat = (struct sdhc_stat*)&vstat;
     struct amlsd_platform* pdata = mmc_priv(host->mmc);
     int cnt=0;
+
+#ifndef CONFIG_ARCH_MESONG9TV               
        
     u32 esta = readl(host->base + SDHC_ESTA);
     int i;        
     u32 dmc_sts = 0;
     u32 vpdma = readl(host->base+SDHC_PDMA);   
     struct sdhc_pdma* pdma = (struct sdhc_pdma*)&vpdma;
-
+#endif
 
     spin_lock_irqsave(&host->mrq_lock, flags);
     mrq = host->mrq;
@@ -1669,7 +1687,8 @@ irqreturn_t aml_sdhc_data_thread(int irq, void *data)
             xfer_bytes = mrq->data->blksz*mrq->data->blocks;
             /* copy buffer from dma to data->sg in read cmd*/
             if(host->mrq->data->flags & MMC_DATA_READ){
-	     	    if(!IS_MESON_M8M2_CPU){
+#ifndef CONFIG_ARCH_MESONG9TV                
+	     	    if(!(IS_MESON_M8M2_CPU)){
 	                if(!aml_card_type_sdio(pdata)){
 	                    for(i=0; i< STAT_POLL_TIMEOUT; i++){
 	                          
@@ -1709,7 +1728,7 @@ irqreturn_t aml_sdhc_data_thread(int irq, void *data)
 	                  
 	                }                              
 		   }
-
+#endif
                 aml_sg_copy_buffer(mrq->data->sg, mrq->data->sg_len, host->bn_buf,
                             xfer_bytes, 0);
                 sdhc_dbg(AMLSD_DBG_RD_DATA, "R Cmd%d, arg %x, size=%d\n",
@@ -2442,16 +2461,28 @@ static int aml_sdhc_probe(struct platform_device *pdev)
         /*Register card detect irq : plug in & unplug*/
         if(pdata->irq_in && pdata->irq_out){
             pdata->irq_init(pdata);
+#ifdef CONFIG_ARCH_MESONG9TV            
+            ret = request_threaded_irq(pdata->irq_in+INT_GPIO_1,
+                    (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
+                    IRQF_DISABLED, "sdhc_mmc_in", (void*)pdata);
+#else
             ret = request_threaded_irq(pdata->irq_in+INT_GPIO_0,
                     (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
                     IRQF_DISABLED, "sdhc_mmc_in", (void*)pdata);
+#endif                   
             if (ret) {
                 sdhc_err("Failed to request mmc IN detect\n");
                 goto probe_free_host;
             }
+#ifdef CONFIG_ARCH_MESONG9TV
+            ret |= request_threaded_irq(pdata->irq_out+INT_GPIO_1,
+                    (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
+                    IRQF_DISABLED, "sdhc_mmc_out", (void*)pdata);
+#else            
             ret |= request_threaded_irq(pdata->irq_out+INT_GPIO_0,
                     (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
                     IRQF_DISABLED, "sdhc_mmc_out", (void*)pdata);
+#endif                      
             // ret = request_irq(pdata->irq_in+INT_GPIO_0, aml_sdhc_irq_cd,
                         // IRQF_DISABLED, "sdhc_mmc_in", pdata);
             // ret |= request_irq(pdata->irq_out+INT_GPIO_0, aml_sdhc_irq_cd,
diff --git a/drivers/amlogic/mmc/aml_sdio.c b/drivers/amlogic/mmc/aml_sdio.c
index c3c6bc01342c..b36445767731 100755
--- a/drivers/amlogic/mmc/aml_sdio.c
+++ b/drivers/amlogic/mmc/aml_sdio.c
@@ -360,7 +360,7 @@ void aml_sdio_request_done(struct mmc_host *mmc, struct mmc_request *mrq)
     // }
     //del_timer(&host->timeout_tlist);
     if(delayed_work_pending(&host->timeout))
-    		cancel_delayed_work(&host->timeout);
+    		cancel_delayed_work_sync(&host->timeout);
   //  cancel_delayed_work(&host->timeout_cmd);
 
     spin_lock_irqsave(&host->mrq_lock, flags);
@@ -755,7 +755,6 @@ void aml_sdio_request(struct mmc_host *mmc, struct mmc_request *mrq)
     sdio_dbg(AMLSD_DBG_REQ ,"%s: starting CMD%u arg %08x flags %08x\n",
         mmc_hostname(mmc), mrq->cmd->opcode,
         mrq->cmd->arg, mrq->cmd->flags);
-
     if(mrq->data) {
         /*Copy data to dma buffer for write request*/
         aml_sdio_prepare_dma(host, mrq);
@@ -1351,7 +1350,7 @@ static int aml_sdio_probe(struct platform_device *pdev)
             ret = -ENOMEM;
             goto probe_free_host;
         }
-
+	
         pdata = mmc_priv(mmc);
         memset(pdata, 0, sizeof(struct amlsd_platform));
         if(amlsd_get_platform_data(pdev, pdata, mmc, i)) {
@@ -1416,10 +1415,8 @@ static int aml_sdio_probe(struct platform_device *pdev)
             mmc->host_rescan_disable = false;
 			mmc->rescan_entered = 0; 
         }
-         
         if(pdata->port_init)
             pdata->port_init(pdata);
-
         aml_sduart_pre(pdata);
 
         ret = mmc_add_host(mmc);
@@ -1441,16 +1438,28 @@ static int aml_sdio_probe(struct platform_device *pdev)
         /*Register card detect irq : plug in & unplug*/
         if(pdata->irq_in && pdata->irq_out){
             pdata->irq_init(pdata);
+#ifdef CONFIG_ARCH_MESONG9TV
+            ret = request_threaded_irq(pdata->irq_in+INT_GPIO_1,
+                    (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
+                    IRQF_DISABLED, "mmc_in", (void*)pdata);
+#else
             ret = request_threaded_irq(pdata->irq_in+INT_GPIO_0,
                     (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
                     IRQF_DISABLED, "mmc_in", (void*)pdata);
+#endif                    
             if (ret) {
                 sdio_err("Failed to request mmc IN detect\n");
                 goto probe_free_host;
             }
+#ifdef CONFIG_ARCH_MESONG9TV            
+            ret |= request_threaded_irq(pdata->irq_out+INT_GPIO_1,
+                    (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
+                    IRQF_DISABLED, "mmc_out", (void*)pdata);
+#else
             ret |= request_threaded_irq(pdata->irq_out+INT_GPIO_0,
                     (irq_handler_t)aml_sd_irq_cd, aml_irq_cd_thread,
                     IRQF_DISABLED, "mmc_out", (void*)pdata);
+#endif                    
             //ret = request_irq(pdata->irq_in+INT_GPIO_0, aml_sd_irq_cd, IRQF_DISABLED, "mmc_in", pdata);
             //ret |= request_irq(pdata->irq_out+INT_GPIO_0, aml_sd_irq_cd, IRQF_DISABLED, "mmc_out", pdata);
             if (ret) {
diff --git a/drivers/amlogic/mmc/amlsd.c b/drivers/amlogic/mmc/amlsd.c
index 01f93ab14d39..f5d9e1d35c7b 100755
--- a/drivers/amlogic/mmc/amlsd.c
+++ b/drivers/amlogic/mmc/amlsd.c
@@ -588,14 +588,14 @@ void aml_sdhc_init_debugfs(struct mmc_host *mmc)
 		goto err;
 	}
 
-	debugfs_create_x32("sdhc_dbg", S_IRUGO | S_IWUSR, root, (u32 *)&sdhc_debug);
+	debugfs_create_x32("sdhc_dbg", S_IRWXUGO, root, (u32 *)&sdhc_debug);
 
-	node = debugfs_create_file("sdhc_regs", S_IRUGO, root, mmc,
+	node = debugfs_create_file("sdhc_regs", S_IRWXUGO, root, mmc,
                 &aml_sdhc_regs_fops);
 	if (IS_ERR(node))
 		return;
 
-	node = debugfs_create_file("params", S_IRUGO, root, mmc,
+	node = debugfs_create_file("params", S_IRWXUGO, root, mmc,
                 &amlsd_param_fops);
 	if (IS_ERR(node))
 		return;
@@ -627,14 +627,14 @@ void aml_sdio_init_debugfs(struct mmc_host *mmc)
 		goto err;
 	}
 
-	debugfs_create_x32("sdio_dbg", S_IRUGO | S_IWUSR, root, (u32 *)&sdio_debug);
+	debugfs_create_x32("sdio_dbg", S_IRWXUGO, root, (u32 *)&sdio_debug);
 
-	node = debugfs_create_file("sdio_regs", S_IRUGO, root, mmc,
+	node = debugfs_create_file("sdio_regs", S_IRWXUGO, root, mmc,
                 &aml_sdio_regs_fops);
 	if (IS_ERR(node))
 		return;
 
-	node = debugfs_create_file("params", S_IRUGO, root, mmc,
+	node = debugfs_create_file("params", S_IRWXUGO, root, mmc,
                 &amlsd_param_fops);
 	if (IS_ERR(node))
 		return;
@@ -927,7 +927,11 @@ static int aml_is_card_insert (struct amlsd_platform * pdata)
 static int aml_is_sdjtag(struct amlsd_platform * pdata)
 {
     int card0;
-    card0 = aml_get_reg32_bits(P_PREG_PAD_GPIO0_I, 22, 1);
+#ifdef CONFIG_ARCH_MESONG9TV
+	card0 = aml_get_reg32_bits(P_PREG_PAD_GPIO2_I, 20, 1);
+#else
+       card0 = aml_get_reg32_bits(P_PREG_PAD_GPIO0_I, 22, 1);
+#endif
     if(card0 == 1){
         return 1;
     }
@@ -961,7 +965,12 @@ static int aml_is_sduart(struct amlsd_platform * pdata)
         return 1;
 
     for (i = 0; i < 10; i++) {
-        dat3 = aml_get_reg32_bits(P_PREG_PAD_GPIO0_I,26,1);
+#ifdef CONFIG_ARCH_MESONG9TV
+	dat3 = aml_get_reg32_bits(P_PREG_PAD_GPIO2_I,24,1);
+#else
+       dat3 = aml_get_reg32_bits(P_PREG_PAD_GPIO0_I,26,1);
+#endif
+         return 0;
         if(dat3 == 1){
             // if (cnt)
                 // sdhc_err("cnt=%d\n", cnt);
@@ -1348,6 +1357,16 @@ void aml_emmc_hw_reset(struct mmc_host *mmc)
     //high
     aml_set_reg32_mask(P_PREG_PAD_GPIO3_O, (1<<9));
     mdelay(1);
+#elif ((defined CONFIG_ARCH_MESONG9TV))  
+     aml_clr_reg32_mask(P_PREG_PAD_GPIO2_EN_N, (1<<9));  //high+    
+     aml_set_reg32_mask(P_PREG_PAD_GPIO2_O, (1<<9));
+     mdelay(1);
+	 //low    
+    aml_clr_reg32_mask(P_PREG_PAD_GPIO2_O, (1<<9));
+    mdelay(2);
+	 //high
+    aml_set_reg32_mask(P_PREG_PAD_GPIO2_O, (1<<9));
+    mdelay(1);  
  #endif
 
     return;
-- 
2.19.0

