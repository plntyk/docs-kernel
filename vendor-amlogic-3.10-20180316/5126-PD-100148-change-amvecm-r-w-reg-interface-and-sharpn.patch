From ca38a3d309c264ff364ca53577215452d2a32785 Mon Sep 17 00:00:00 2001
From: "dezhi.kong" <dezhi.kong@amlogic.com>
Date: Thu, 27 Nov 2014 10:55:15 +0800
Subject: [PATCH 5126/5965] PD#100148: change amvecm r/w reg interface and
 sharpness h/v blank num

Change-Id: Ia768beb34af3291f023360e4994da13b57f90c17
---
 drivers/amlogic/amports/video.c              |    6 +-
 drivers/amlogic/amports/video2.c             |    8 -
 drivers/amlogic/amvecm/amcm.c                |   62 +-
 drivers/amlogic/amvecm/amcm.h                |   18 +-
 drivers/amlogic/amvecm/amcm_regmap.h         | 1032 +++++++++---------
 drivers/amlogic/amvecm/amve.c                |  161 ++-
 drivers/amlogic/amvecm/amve.h                |   22 +-
 drivers/amlogic/amvecm/amvecm.c              |  300 +++--
 drivers/amlogic/amvecm/amvecm_vlock_regmap.h |   80 +-
 include/linux/amlogic/aml_common.h           |    3 +-
 include/linux/amlogic/amvecm.h               |   22 +-
 11 files changed, 822 insertions(+), 892 deletions(-)

diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 80fe38c4b91b..e944cacdf31c 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -2831,10 +2831,6 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
     }
 #endif
 
-#if defined(CONFIG_AM_VECM)
-	/* amvecm video latch function */
-	amvecm_video_latch();
-#endif
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 
@@ -3007,7 +3003,7 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
             amlog_mask_if(toggle_cnt > 0, LOG_MASK_FRAMESKIP, "skipped\n");
 
 #if defined(CONFIG_AM_VECM)
-            ve_on_vs(vf);
+            amvecm_on_vs(vf);
 #endif
 
             vf = video_vf_get();
diff --git a/drivers/amlogic/amports/video2.c b/drivers/amlogic/amports/video2.c
index 76d464a8152b..8970682d5b59 100755
--- a/drivers/amlogic/amports/video2.c
+++ b/drivers/amlogic/amports/video2.c
@@ -75,14 +75,6 @@ MODULE_AMLOG(LOG_LEVEL_ERROR, 0, LOG_DEFAULT_LEVEL_DESC, LOG_MASK_DESC);
 
 #undef CONFIG_AM_DEINTERLACE
 
-#include "linux/amlogic/ve.h"
-#include "linux/amlogic/cm.h"
-
-//#include "ve_regs.h"
-//#include "amve.h"
-//#include "cm_regs.h"
-//#include "amcm.h"
-
 
 //*************************************************
 #if 0
diff --git a/drivers/amlogic/amvecm/amcm.c b/drivers/amlogic/amvecm/amcm.c
index 2a83b7042231..a5ec1ee94e1f 100755
--- a/drivers/amlogic/amvecm/amcm.c
+++ b/drivers/amlogic/amvecm/amcm.c
@@ -104,46 +104,26 @@ void am_set_regmap(struct am_regs_s *p)
 				else
 					cm2_patch_flag = 0;
 			}
-#if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
-			WRITE_VCBUS_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
+			WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
 			if (p->am_reg[i].mask == 0xffffffff)
-				WRITE_VCBUS_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
+				WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
 			else{
-				temp = READ_VCBUS_REG(VPP_CHROMA_DATA_PORT);
-				WRITE_VCBUS_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
-				WRITE_VCBUS_REG(VPP_CHROMA_DATA_PORT, (temp & (~(p->am_reg[i].mask))) | (p->am_reg[i].val & p->am_reg[i].mask));
+				temp = READ_VPP_REG(VPP_CHROMA_DATA_PORT);
+				WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
+				WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, (temp & (~(p->am_reg[i].mask))) | (p->am_reg[i].val & p->am_reg[i].mask));
 			}
-#else
-			WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
-			if (p->am_reg[i].mask == 0xffffffff)
-				WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
-			else{
-				temp = READ_CBUS_REG(VPP_CHROMA_DATA_PORT);
-				WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
-				WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, (temp & (~(p->am_reg[i].mask))) | (p->am_reg[i].val & p->am_reg[i].mask));
-			}
-#endif
 			break;
 		case REG_TYPE_INDEX_GAMMA:
 			break;
 		case VALUE_TYPE_CONTRAST_BRIGHTNESS:
 			break;
 		case REG_TYPE_INDEX_VPP_COEF:
-#if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
 			if (((p->am_reg[i].addr&0xf) == 0)||((p->am_reg[i].addr&0xf) == 0x8)){
-				WRITE_VCBUS_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
-				WRITE_VCBUS_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
+				WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
+				WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
 			}
 			else
-				WRITE_VCBUS_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
-#else
-			if (((p->am_reg[i].addr&0xf) == 0)||((p->am_reg[i].addr&0xf) == 0x8)){
-				WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, p->am_reg[i].addr);
-				WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
-			}
-			else
-				WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
-#endif
+				WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, p->am_reg[i].val);
 			break;
 #if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
 		case REG_TYPE_VCBUS:
@@ -162,7 +142,7 @@ void am_set_regmap(struct am_regs_s *p)
 
 void amcm_enable(void)
 {
-	WRITE_CBUS_REG_BITS(VPP_MISC,0,28,1);//CM manage enable
+	WRITE_VPP_REG_BITS(VPP_MISC,0,28,1);//CM manage enable
 }
 
 void cm_regmap_latch(am_regs_t *am_regs,unsigned int reg_map)
@@ -184,27 +164,27 @@ void amcm_level_sel(unsigned int cm_level)
 		am_set_regmap(&cmreg_enhancement);
 	else
 		am_set_regmap(&cmreg_optimize);
-	WRITE_CBUS_REG_BITS(VPP_MISC,1,28,1);//CM manage enable
+	WRITE_VPP_REG_BITS(VPP_MISC,1,28,1);//CM manage enable
 }
 
 void cm2_frame_size_patch(unsigned int width,unsigned int height)
 {
 	unsigned int vpp_size;
 	/*check if the cm2 enable/disable to config the cm2 size*/
-	if(!(READ_CBUS_REG(VPP_MISC)&(0x1<<28)))
+	if(!(READ_VPP_REG(VPP_MISC)&(0x1<<28)))
 		return;
 	vpp_size = width|(height << 16);
 	if(cm_size == 0){
-		WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, 0x205);
-		cm_size = READ_CBUS_REG(VPP_CHROMA_DATA_PORT);
+		WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, 0x205);
+		cm_size = READ_VPP_REG(VPP_CHROMA_DATA_PORT);
 	}
 	if (cm_size != vpp_size) {
-		WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, 0x205);
-		WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, vpp_size);
-		WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, 0x209);
-		WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, width<<15);
-		WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, 0x20a);
-		WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, height<<16);
+		WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, 0x205);
+		WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, vpp_size);
+		WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, 0x209);
+		WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, width<<15);
+		WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, 0x20a);
+		WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, height<<16);
 		cm_size =  vpp_size;
 		pr_amcm_dbg("\n[amcm..]cm2_frame_patch: set cm2 framesize %x, set demo mode  %x\n",
 				vpp_size, cm2_patch_flag);
@@ -216,8 +196,8 @@ void cm2_frame_size_patch(unsigned int width,unsigned int height)
 */
 void cm2_frame_switch_patch(void)
 {
-	WRITE_CBUS_REG(VPP_CHROMA_ADDR_PORT, 0x20f);
-	WRITE_CBUS_REG(VPP_CHROMA_DATA_PORT, cm2_patch_flag);
+	WRITE_VPP_REG(VPP_CHROMA_ADDR_PORT, 0x20f);
+	WRITE_VPP_REG(VPP_CHROMA_DATA_PORT, cm2_patch_flag);
 }
 
 void cm_latch_process(void)
diff --git a/drivers/amlogic/amvecm/amcm.h b/drivers/amlogic/amvecm/amcm.h
index ab49f0a062b5..8b6535aa3255 100755
--- a/drivers/amlogic/amvecm/amcm.h
+++ b/drivers/amlogic/amvecm/amcm.h
@@ -45,15 +45,15 @@ extern void cm_latch_process(void);
 extern int cm_load_reg(am_regs_t *arg);
 
 #if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8)
-#undef WRITE_CBUS_REG
-#undef WRITE_CBUS_REG_BITS
-#undef READ_CBUS_REG
-#undef READ_CBUS_REG_BITS
-
-#define WRITE_CBUS_REG(x,val)				WRITE_VCBUS_REG(x,val)
-#define WRITE_CBUS_REG_BITS(x,val,start,length)		WRITE_VCBUS_REG_BITS(x,val,start,length)
-#define READ_CBUS_REG(x)				READ_VCBUS_REG(x)
-#define READ_CBUS_REG_BITS(x,start,length)		READ_VCBUS_REG_BITS(x,start,length)
+#define WRITE_VPP_REG(x,val)				WRITE_VCBUS_REG(x,val)
+#define WRITE_VPP_REG_BITS(x,val,start,length)		WRITE_VCBUS_REG_BITS(x,val,start,length)
+#define READ_VPP_REG(x)					READ_VCBUS_REG(x)
+#define READ_VPP_REG_BITS(x,start,length)		READ_VCBUS_REG_BITS(x,start,length)
+#else
+#define WRITE_VPP_REG(x,val)				WRITE_CBUS_REG(x,val)
+#define WRITE_VPP_REG_BITS(x,val,start,length)		WRITE_CBUS_REG_BITS(x,val,start,length)
+#define READ_VPP_REG(x)					READ_CBUS_REG(x)
+#define READ_VPP_REG_BITS(x,start,length)		READ_CBUS_REG_BITS(x,start,length)
 #endif
 
 #endif
diff --git a/drivers/amlogic/amvecm/amcm_regmap.h b/drivers/amlogic/amvecm/amcm_regmap.h
index 3262de154c52..2ec259aa4cf0 100755
--- a/drivers/amlogic/amvecm/amcm_regmap.h
+++ b/drivers/amlogic/amvecm/amcm_regmap.h
@@ -19,178 +19,178 @@ static am_regs_t cmreg_lever1={
 	172,
 	{
 /* optimize */
-{6,	512,	    0xffffffff,	0           },
-{6,	513,	    0xffffffff,	0           },
-{6,	514,	    0xffffffff,	0           },
-{6,	515,	    0xffffffff,	134218752   },
-{6,	516,	    0xffffffff,	144         },
-{6,	518,	    0xffffffff,	0           },
-{6,	519,	    0xffffffff,	33554432    },
-{6,	520,	    0xffffffff,	118         },
-{6,	521,	    0xffffffff,	0           },
-{6,	522,	    0xffffffff,	0           },
-{6,	527,	    0xf,	0           },
-{6,	517,	    0xffffffff,	70715263    },
-{9,	256,	    0xffffffff,	532992      },
-{9,	257,	    0xffffffff,	0xf3f600af  },
-{9,	258,	    0xffffffff,	0xe3000000  },
-{9,	259,	    0xffffffff,	240         },
-{9,	260,	    0xffffffff,	63506       },
-{9,	264,	    0xffffffff,	16650496    },
-{9,	265,	    0xffffffff,	249         },
-{9,	266,	    0xffffffff,	0           },
-{9,	267,	    0xffffffff,	0           },
-{9,	268,	    0xffffffff,	0           },
-{9,	272,	    0xffffffff,	135936      },
-{9,	273,	    0xffffffff,	253         },
-{9,	274,	    0xffffffff,	0           },
-{9,	275,	    0xffffffff,	0           },
-{9,	276,	    0xffffffff,	0           },
-{9,	280,	    0xffffffff,	0xf3f11300  },
-{9,	281,	    0xffffffff,	214         },
-{9,	282,	    0xffffffff,	0           },
-{9,	283,	    0xffffffff,	0           },
-{9,	284,	    0xffffffff,	0           },
-{9,	288,	    0xffffffff,	0xede91300  },
-{9,	289,	    0xffffffff,	177         },
-{9,	290,	    0xffffffff,	0           },
-{9,	291,	    0xffffffff,	0           },
-{9,	292,	    0xffffffff,	15660544    },
-{9,	296,	    0xffffffff,	0xe9e61100  },
-{9,	297,	    0xffffffff,	184         },
-{9,	298,	    0xffffffff,	0           },
-{9,	299,	    0xffffffff,	0           },
-{9,	300,	    0xffffffff,	15464448    },
-{9,	304,	    0xffffffff,	0xeff80f00  },
-{9,	305,	    0xffffffff,	232         },
-{9,	306,	    0xffffffff,	0           },
-{9,	307,	    0xffffffff,	0           },
-{9,	308,	    0xffffffff,	0           },
-{9,	312,	    0xffffffff,	0xf60a0d00  },
-{9,	313,	    0xffffffff,	245         },
-{9,	314,	    0xffffffff,	0           },
-{9,	315,	    0xffffffff,	0           },
-{9,	316,	    0xffffffff,	0           },
-{9,	320,	    0xffffffff,	526848      },
-{9,	321,	    0xffffffff,	238         },
-{9,	322,	    0xffffffff,	0           },
-{9,	323,	    0xffffffff,	10          },
-{9,	324,	    0xffffffff,	0           },
-{9,	328,	    0xffffffff,	527616      },
-{9,	329,	    0xffffffff,	134742245   },
-{9,	330,	    0xffffffff,	167903232   },
-{9,	331,	    0xffffffff,	21          },
-{9,	332,	    0xffffffff,	3328        },
-{9,	336,	    0xffffffff,	397056      },
-{9,	337,	    0xffffffff,	0xf80d00da  },
-{9,	338,	    0xffffffff,	0xf80500fb  },
-{9,	339,	    0xffffffff,	2           },
-{9,	340,	    0xffffffff,	132357      },
-{9,	344,	    0xffffffff,	526848      },
-{9,	345,	    0xffffffff,	0xfb0a00c7  },
-{9,	346,	    0xffffffff,	0xf6020002  },
-{9,	347,	    0xffffffff,	251         },
-{9,	348,	    0xffffffff,	16646656    },
-{9,	352,	    0xffffffff,	657408      },
-{9,	353,	    0xffffffff,	327857      },
-{9,	354,	    0xffffffff,	0xf6050000  },
-{9,	355,	    0xffffffff,	2           },
-{9,	356,	    0xffffffff,	0           },
-{9,	360,	    0xffffffff,	526336      },
-{9,	361,	    0xffffffff,	162         },
-{9,	362,	    0xffffffff,	0xf600f600  },
-{9,	363,	    0xffffffff,	254         },
-{9,	364,	    0xffffffff,	33554432    },
-{9,	368,	    0xffffffff,	986368      },
-{9,	369,	    0xffffffff,	166         },
-{9,	370,	    0xffffffff,	0xf300eef6  },
-{9,	371,	    0xffffffff,	243         },
-{9,	372,	    0xffffffff,	0xfb050000  },
-{9,	376,	    0xffffffff,	34541312    },
-{9,	377,	    0xffffffff,	83886277    },
-{9,	378,	    0xffffffff,	0xfbfef8f8  },
-{9,	379,	    0xffffffff,	246         },
-{9,	380,	    0xffffffff,	0xf8080200  },
-{9,	384,	    0xffffffff,	286331136   },
-{9,	385,	    0xffffffff,	353698041   },
-{9,	386,	    0xffffffff,	168427768   },
-{9,	387,	    0xffffffff,	13          },
-{9,	388,	    0xffffffff,	0xfb081000  },
-{9,	392,	    0xffffffff,	218960128   },
-{9,	393,	    0xffffffff,	674758687   },
-{9,	394,	    0xffffffff,	573177856   },
-{9,	395,	    0xffffffff,	21          },
-{9,	396,	    0xffffffff,	854766      },
-{9,	400,	    0xffffffff,	168430080   },
-{9,	401,	    0xffffffff,	809304110   },
-{9,	402,	    0xffffffff,	674234389   },
-{9,	403,	    0xffffffff,	13          },
-{9,	404,	    0xffffffff,	716515      },
-{9,	408,	    0xffffffff,	134745344   },
-{9,	409,	    0xffffffff,	807731246   },
-{9,	410,	    0xffffffff,	403308562   },
-{9,	411,	    0xffffffff,	0           },
-{9,	412,	    0xffffffff,	59590       },
-{9,	416,	    0xffffffff,	67504640    },
-{9,	417,	    0xffffffff,	269484072   },
-{9,	418,	    0xffffffff,	182845440   },
-{9,	419,	    0xffffffff,	0           },
-{9,	420,	    0xffffffff,	61139       },
-{9,	424,	    0xffffffff,	396544      },
-{9,	425,	    0xffffffff,	134217757   },
-{9,	426,	    0xffffffff,	0xfb0b0000  },
-{9,	427,	    0xffffffff,	0           },
-{9,	428,	    0xffffffff,	246         },
-{9,	432,	    0xffffffff,	527616      },
-{9,	433,	    0xffffffff,	12          },
-{9,	434,	    0xffffffff,	15597568    },
-{9,	435,	    0xffffffff,	0           },
-{9,	436,	    0xffffffff,	0           },
-{9,	440,	    0xffffffff,	658688      },
-{9,	441,	    0xffffffff,	7           },
-{9,	442,	    0xffffffff,	0           },
-{9,	443,	    0xffffffff,	0           },
-{9,	444,	    0xffffffff,	0           },
-{9,	448,	    0xffffffff,	986880      },
-{9,	449,	    0xffffffff,	255         },
-{9,	450,	    0xffffffff,	0           },
-{9,	451,	    0xffffffff,	0           },
-{9,	452,	    0xffffffff,	0           },
-{9,	456,	    0xffffffff,	219811584   },
-{9,	457,	    0xffffffff,	238         },
-{9,	458,	    0xffffffff,	0           },
-{9,	459,	    0xffffffff,	0           },
-{9,	460,	    0xffffffff,	0           },
-{9,	464,	    0xffffffff,	287183104   },
-{9,	465,	    0xffffffff,	197         },
-{9,	466,	    0xffffffff,	0xf3000000  },
-{9,	467,	    0xffffffff,	246         },
-{9,	468,	    0xffffffff,	0xfb000000  },
-{9,	472,	    0xffffffff,	219943168   },
-{9,	473,	    0xffffffff,	169         },
-{9,	474,	    0xffffffff,	0xf0000000  },
-{9,	475,	    0xffffffff,	232         },
-{9,	476,	    0xffffffff,	0           },
-{9,	480,	    0xffffffff,	1707264     },
-{9,	481,	    0xffffffff,	0xfb0000ab  },
-{9,	482,	    0xffffffff,	0xe300f3f3  },
-{9,	483,	    0xffffffff,	219         },
-{9,	484,	    0xffffffff,	15597568    },
-{9,	488,	    0xffffffff,	1509888     },
-{9,	489,	    0xffffffff,	0xf30000b6  },
-{9,	490,	    0xffffffff,	0xd800e8e3  },
-{9,	491,	    0xffffffff,	222         },
-{9,	492,	    0xffffffff,	14876680    },
-{9,	496,	    0xffffffff,	1117440     },
-{9,	497,	    0xffffffff,	0xf3fb00ba  },
-{9,	498,	    0xffffffff,	0xd300ebe6  },
-{9,	499,	    0xffffffff,	232         },
-{9,	500,	    0xffffffff,	15661840    },
-{9,	504,	    0xffffffff,	989696      },
-{9,	505,	    0xffffffff,	0xf6f800b6  },
-{9,	506,	    0xffffffff,	0xe600f3f3  },
-{9,	507,	    0xffffffff,	235         },
-{9,	508,	    0xffffffff,	18          },
+{REG_TYPE_INDEX_VPPCHROMA,	512,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPPCHROMA,	513,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPPCHROMA,	514,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPPCHROMA,	515,	    0xffffffff,	134218752   },
+{REG_TYPE_INDEX_VPPCHROMA,	516,	    0xffffffff,	144         },
+{REG_TYPE_INDEX_VPPCHROMA,	518,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPPCHROMA,	519,	    0xffffffff,	33554432    },
+{REG_TYPE_INDEX_VPPCHROMA,	520,	    0xffffffff,	118         },
+{REG_TYPE_INDEX_VPPCHROMA,	521,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPPCHROMA,	522,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPPCHROMA,	527,	    0xf,	0           },
+{REG_TYPE_INDEX_VPPCHROMA,	517,	    0xffffffff,	70715263    },
+{REG_TYPE_INDEX_VPP_COEF,	256,	    0xffffffff,	532992      },
+{REG_TYPE_INDEX_VPP_COEF,	257,	    0xffffffff,	0xf3f600af  },
+{REG_TYPE_INDEX_VPP_COEF,	258,	    0xffffffff,	0xe3000000  },
+{REG_TYPE_INDEX_VPP_COEF,	259,	    0xffffffff,	240         },
+{REG_TYPE_INDEX_VPP_COEF,	260,	    0xffffffff,	63506       },
+{REG_TYPE_INDEX_VPP_COEF,	264,	    0xffffffff,	16650496    },
+{REG_TYPE_INDEX_VPP_COEF,	265,	    0xffffffff,	249         },
+{REG_TYPE_INDEX_VPP_COEF,	266,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	267,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	268,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	272,	    0xffffffff,	135936      },
+{REG_TYPE_INDEX_VPP_COEF,	273,	    0xffffffff,	253         },
+{REG_TYPE_INDEX_VPP_COEF,	274,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	275,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	276,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	280,	    0xffffffff,	0xf3f11300  },
+{REG_TYPE_INDEX_VPP_COEF,	281,	    0xffffffff,	214         },
+{REG_TYPE_INDEX_VPP_COEF,	282,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	283,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	284,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	288,	    0xffffffff,	0xede91300  },
+{REG_TYPE_INDEX_VPP_COEF,	289,	    0xffffffff,	177         },
+{REG_TYPE_INDEX_VPP_COEF,	290,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	291,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	292,	    0xffffffff,	15660544    },
+{REG_TYPE_INDEX_VPP_COEF,	296,	    0xffffffff,	0xe9e61100  },
+{REG_TYPE_INDEX_VPP_COEF,	297,	    0xffffffff,	184         },
+{REG_TYPE_INDEX_VPP_COEF,	298,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	299,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	300,	    0xffffffff,	15464448    },
+{REG_TYPE_INDEX_VPP_COEF,	304,	    0xffffffff,	0xeff80f00  },
+{REG_TYPE_INDEX_VPP_COEF,	305,	    0xffffffff,	232         },
+{REG_TYPE_INDEX_VPP_COEF,	306,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	307,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	308,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	312,	    0xffffffff,	0xf60a0d00  },
+{REG_TYPE_INDEX_VPP_COEF,	313,	    0xffffffff,	245         },
+{REG_TYPE_INDEX_VPP_COEF,	314,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	315,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	316,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	320,	    0xffffffff,	526848      },
+{REG_TYPE_INDEX_VPP_COEF,	321,	    0xffffffff,	238         },
+{REG_TYPE_INDEX_VPP_COEF,	322,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	323,	    0xffffffff,	10          },
+{REG_TYPE_INDEX_VPP_COEF,	324,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	328,	    0xffffffff,	527616      },
+{REG_TYPE_INDEX_VPP_COEF,	329,	    0xffffffff,	134742245   },
+{REG_TYPE_INDEX_VPP_COEF,	330,	    0xffffffff,	167903232   },
+{REG_TYPE_INDEX_VPP_COEF,	331,	    0xffffffff,	21          },
+{REG_TYPE_INDEX_VPP_COEF,	332,	    0xffffffff,	3328        },
+{REG_TYPE_INDEX_VPP_COEF,	336,	    0xffffffff,	397056      },
+{REG_TYPE_INDEX_VPP_COEF,	337,	    0xffffffff,	0xf80d00da  },
+{REG_TYPE_INDEX_VPP_COEF,	338,	    0xffffffff,	0xf80500fb  },
+{REG_TYPE_INDEX_VPP_COEF,	339,	    0xffffffff,	2           },
+{REG_TYPE_INDEX_VPP_COEF,	340,	    0xffffffff,	132357      },
+{REG_TYPE_INDEX_VPP_COEF,	344,	    0xffffffff,	526848      },
+{REG_TYPE_INDEX_VPP_COEF,	345,	    0xffffffff,	0xfb0a00c7  },
+{REG_TYPE_INDEX_VPP_COEF,	346,	    0xffffffff,	0xf6020002  },
+{REG_TYPE_INDEX_VPP_COEF,	347,	    0xffffffff,	251         },
+{REG_TYPE_INDEX_VPP_COEF,	348,	    0xffffffff,	16646656    },
+{REG_TYPE_INDEX_VPP_COEF,	352,	    0xffffffff,	657408      },
+{REG_TYPE_INDEX_VPP_COEF,	353,	    0xffffffff,	327857      },
+{REG_TYPE_INDEX_VPP_COEF,	354,	    0xffffffff,	0xf6050000  },
+{REG_TYPE_INDEX_VPP_COEF,	355,	    0xffffffff,	2           },
+{REG_TYPE_INDEX_VPP_COEF,	356,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	360,	    0xffffffff,	526336      },
+{REG_TYPE_INDEX_VPP_COEF,	361,	    0xffffffff,	162         },
+{REG_TYPE_INDEX_VPP_COEF,	362,	    0xffffffff,	0xf600f600  },
+{REG_TYPE_INDEX_VPP_COEF,	363,	    0xffffffff,	254         },
+{REG_TYPE_INDEX_VPP_COEF,	364,	    0xffffffff,	33554432    },
+{REG_TYPE_INDEX_VPP_COEF,	368,	    0xffffffff,	986368      },
+{REG_TYPE_INDEX_VPP_COEF,	369,	    0xffffffff,	166         },
+{REG_TYPE_INDEX_VPP_COEF,	370,	    0xffffffff,	0xf300eef6  },
+{REG_TYPE_INDEX_VPP_COEF,	371,	    0xffffffff,	243         },
+{REG_TYPE_INDEX_VPP_COEF,	372,	    0xffffffff,	0xfb050000  },
+{REG_TYPE_INDEX_VPP_COEF,	376,	    0xffffffff,	34541312    },
+{REG_TYPE_INDEX_VPP_COEF,	377,	    0xffffffff,	83886277    },
+{REG_TYPE_INDEX_VPP_COEF,	378,	    0xffffffff,	0xfbfef8f8  },
+{REG_TYPE_INDEX_VPP_COEF,	379,	    0xffffffff,	246         },
+{REG_TYPE_INDEX_VPP_COEF,	380,	    0xffffffff,	0xf8080200  },
+{REG_TYPE_INDEX_VPP_COEF,	384,	    0xffffffff,	286331136   },
+{REG_TYPE_INDEX_VPP_COEF,	385,	    0xffffffff,	353698041   },
+{REG_TYPE_INDEX_VPP_COEF,	386,	    0xffffffff,	168427768   },
+{REG_TYPE_INDEX_VPP_COEF,	387,	    0xffffffff,	13          },
+{REG_TYPE_INDEX_VPP_COEF,	388,	    0xffffffff,	0xfb081000  },
+{REG_TYPE_INDEX_VPP_COEF,	392,	    0xffffffff,	218960128   },
+{REG_TYPE_INDEX_VPP_COEF,	393,	    0xffffffff,	674758687   },
+{REG_TYPE_INDEX_VPP_COEF,	394,	    0xffffffff,	573177856   },
+{REG_TYPE_INDEX_VPP_COEF,	395,	    0xffffffff,	21          },
+{REG_TYPE_INDEX_VPP_COEF,	396,	    0xffffffff,	854766      },
+{REG_TYPE_INDEX_VPP_COEF,	400,	    0xffffffff,	168430080   },
+{REG_TYPE_INDEX_VPP_COEF,	401,	    0xffffffff,	809304110   },
+{REG_TYPE_INDEX_VPP_COEF,	402,	    0xffffffff,	674234389   },
+{REG_TYPE_INDEX_VPP_COEF,	403,	    0xffffffff,	13          },
+{REG_TYPE_INDEX_VPP_COEF,	404,	    0xffffffff,	716515      },
+{REG_TYPE_INDEX_VPP_COEF,	408,	    0xffffffff,	134745344   },
+{REG_TYPE_INDEX_VPP_COEF,	409,	    0xffffffff,	807731246   },
+{REG_TYPE_INDEX_VPP_COEF,	410,	    0xffffffff,	403308562   },
+{REG_TYPE_INDEX_VPP_COEF,	411,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	412,	    0xffffffff,	59590       },
+{REG_TYPE_INDEX_VPP_COEF,	416,	    0xffffffff,	67504640    },
+{REG_TYPE_INDEX_VPP_COEF,	417,	    0xffffffff,	269484072   },
+{REG_TYPE_INDEX_VPP_COEF,	418,	    0xffffffff,	182845440   },
+{REG_TYPE_INDEX_VPP_COEF,	419,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	420,	    0xffffffff,	61139       },
+{REG_TYPE_INDEX_VPP_COEF,	424,	    0xffffffff,	396544      },
+{REG_TYPE_INDEX_VPP_COEF,	425,	    0xffffffff,	134217757   },
+{REG_TYPE_INDEX_VPP_COEF,	426,	    0xffffffff,	0xfb0b0000  },
+{REG_TYPE_INDEX_VPP_COEF,	427,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	428,	    0xffffffff,	246         },
+{REG_TYPE_INDEX_VPP_COEF,	432,	    0xffffffff,	527616      },
+{REG_TYPE_INDEX_VPP_COEF,	433,	    0xffffffff,	12          },
+{REG_TYPE_INDEX_VPP_COEF,	434,	    0xffffffff,	15597568    },
+{REG_TYPE_INDEX_VPP_COEF,	435,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	436,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	440,	    0xffffffff,	658688      },
+{REG_TYPE_INDEX_VPP_COEF,	441,	    0xffffffff,	7           },
+{REG_TYPE_INDEX_VPP_COEF,	442,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	443,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	444,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	448,	    0xffffffff,	986880      },
+{REG_TYPE_INDEX_VPP_COEF,	449,	    0xffffffff,	255         },
+{REG_TYPE_INDEX_VPP_COEF,	450,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	451,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	452,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	456,	    0xffffffff,	219811584   },
+{REG_TYPE_INDEX_VPP_COEF,	457,	    0xffffffff,	238         },
+{REG_TYPE_INDEX_VPP_COEF,	458,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	459,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	460,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	464,	    0xffffffff,	287183104   },
+{REG_TYPE_INDEX_VPP_COEF,	465,	    0xffffffff,	197         },
+{REG_TYPE_INDEX_VPP_COEF,	466,	    0xffffffff,	0xf3000000  },
+{REG_TYPE_INDEX_VPP_COEF,	467,	    0xffffffff,	246         },
+{REG_TYPE_INDEX_VPP_COEF,	468,	    0xffffffff,	0xfb000000  },
+{REG_TYPE_INDEX_VPP_COEF,	472,	    0xffffffff,	219943168   },
+{REG_TYPE_INDEX_VPP_COEF,	473,	    0xffffffff,	169         },
+{REG_TYPE_INDEX_VPP_COEF,	474,	    0xffffffff,	0xf0000000  },
+{REG_TYPE_INDEX_VPP_COEF,	475,	    0xffffffff,	232         },
+{REG_TYPE_INDEX_VPP_COEF,	476,	    0xffffffff,	0           },
+{REG_TYPE_INDEX_VPP_COEF,	480,	    0xffffffff,	1707264     },
+{REG_TYPE_INDEX_VPP_COEF,	481,	    0xffffffff,	0xfb0000ab  },
+{REG_TYPE_INDEX_VPP_COEF,	482,	    0xffffffff,	0xe300f3f3  },
+{REG_TYPE_INDEX_VPP_COEF,	483,	    0xffffffff,	219         },
+{REG_TYPE_INDEX_VPP_COEF,	484,	    0xffffffff,	15597568    },
+{REG_TYPE_INDEX_VPP_COEF,	488,	    0xffffffff,	1509888     },
+{REG_TYPE_INDEX_VPP_COEF,	489,	    0xffffffff,	0xf30000b6  },
+{REG_TYPE_INDEX_VPP_COEF,	490,	    0xffffffff,	0xd800e8e3  },
+{REG_TYPE_INDEX_VPP_COEF,	491,	    0xffffffff,	222         },
+{REG_TYPE_INDEX_VPP_COEF,	492,	    0xffffffff,	14876680    },
+{REG_TYPE_INDEX_VPP_COEF,	496,	    0xffffffff,	1117440     },
+{REG_TYPE_INDEX_VPP_COEF,	497,	    0xffffffff,	0xf3fb00ba  },
+{REG_TYPE_INDEX_VPP_COEF,	498,	    0xffffffff,	0xd300ebe6  },
+{REG_TYPE_INDEX_VPP_COEF,	499,	    0xffffffff,	232         },
+{REG_TYPE_INDEX_VPP_COEF,	500,	    0xffffffff,	15661840    },
+{REG_TYPE_INDEX_VPP_COEF,	504,	    0xffffffff,	989696      },
+{REG_TYPE_INDEX_VPP_COEF,	505,	    0xffffffff,	0xf6f800b6  },
+{REG_TYPE_INDEX_VPP_COEF,	506,	    0xffffffff,	0xe600f3f3  },
+{REG_TYPE_INDEX_VPP_COEF,	507,	    0xffffffff,	235         },
+{REG_TYPE_INDEX_VPP_COEF,	508,	    0xffffffff,	18          },
 {0}
 	}
 };
@@ -198,178 +198,178 @@ static am_regs_t cmreg_lever2={
 	172,
 	{
 /* optimize */
-{6,	512,	    0xffffffff,	0          },
-{6,	513,	    0xffffffff,	0          },
-{6,	514,	    0xffffffff,	0          },
-{6,	515,	    0xffffffff,	134218752  },
-{6,	516,	    0xffffffff,	144        },
-{6,	518,	    0xffffffff,	0          },
-{6,	519,	    0xffffffff,	33554432   },
-{6,	520,	    0xffffffff,	122        },
-{6,	521,	    0xffffffff,	0          },
-{6,	522,	    0xffffffff,	0          },
-{6,	527,	    0xf,	0          },
-{6,	517,	    0xffffffff,	70715263   },
-{9,	256,	    0xffffffff,	2840064    },
-{9,	257,	    0xffffffff,	12         },
-{9,	258,	    0xffffffff,	0          },
-{9,	259,	    0xffffffff,	0          },
-{9,	260,	    0xffffffff,	0          },
-{9,	264,	    0xffffffff,	2708992    },
-{9,	265,	    0xffffffff,	31         },
-{9,	266,	    0xffffffff,	0          },
-{9,	267,	    0xffffffff,	0          },
-{9,	268,	    0xffffffff,	0          },
-{9,	272,	    0xffffffff,	2708992    },
-{9,	273,	    0xffffffff,	51         },
-{9,	274,	    0xffffffff,	0          },
-{9,	275,	    0xffffffff,	0          },
-{9,	276,	    0xffffffff,	0          },
-{9,	280,	    0xffffffff,	2840064    },
-{9,	281,	    0xffffffff,	63         },
-{9,	282,	    0xffffffff,	0          },
-{9,	283,	    0xffffffff,	0          },
-{9,	284,	    0xffffffff,	0          },
-{9,	288,	    0xffffffff,	2840064    },
-{9,	289,	    0xffffffff,	63         },
-{9,	290,	    0xffffffff,	0          },
-{9,	291,	    0xffffffff,	0          },
-{9,	292,	    0xffffffff,	0          },
-{9,	296,	    0xffffffff,	2708992    },
-{9,	297,	    0xffffffff,	63         },
-{9,	298,	    0xffffffff,	0          },
-{9,	299,	    0xffffffff,	0          },
-{9,	300,	    0xffffffff,	0          },
-{9,	304,	    0xffffffff,	2708480    },
-{9,	305,	    0xffffffff,	63         },
-{9,	306,	    0xffffffff,	0          },
-{9,	307,	    0xffffffff,	0          },
-{9,	308,	    0xffffffff,	0          },
-{9,	312,	    0xffffffff,	2708480    },
-{9,	313,	    0xffffffff,	51         },
-{9,	314,	    0xffffffff,	0          },
-{9,	315,	    0xffffffff,	0          },
-{9,	316,	    0xffffffff,	0          },
-{9,	320,	    0xffffffff,	2708480    },
-{9,	321,	    0xffffffff,	9          },
-{9,	322,	    0xffffffff,	0          },
-{9,	323,	    0xffffffff,	0          },
-{9,	324,	    0xffffffff,	0          },
-{9,	328,	    0xffffffff,	2708480    },
-{9,	329,	    0xffffffff,	234        },
-{9,	330,	    0xffffffff,	0          },
-{9,	331,	    0xffffffff,	0          },
-{9,	332,	    0xffffffff,	0          },
-{9,	336,	    0xffffffff,	2708480    },
-{9,	337,	    0xffffffff,	212        },
-{9,	338,	    0xffffffff,	0          },
-{9,	339,	    0xffffffff,	0          },
-{9,	340,	    0xffffffff,	0          },
-{9,	344,	    0xffffffff,	2708480    },
-{9,	345,	    0xffffffff,	197        },
-{9,	346,	    0xffffffff,	0          },
-{9,	347,	    0xffffffff,	0          },
-{9,	348,	    0xffffffff,	0          },
-{9,	352,	    0xffffffff,	2708480    },
-{9,	353,	    0xffffffff,	193        },
-{9,	354,	    0xffffffff,	0          },
-{9,	355,	    0xffffffff,	0          },
-{9,	356,	    0xffffffff,	0          },
-{9,	360,	    0xffffffff,	2708480    },
-{9,	361,	    0xffffffff,	203        },
-{9,	362,	    0xffffffff,	0          },
-{9,	363,	    0xffffffff,	0          },
-{9,	364,	    0xffffffff,	0          },
-{9,	368,	    0xffffffff,	2708480    },
-{9,	369,	    0xffffffff,	214        },
-{9,	370,	    0xffffffff,	0          },
-{9,	371,	    0xffffffff,	0          },
-{9,	372,	    0xffffffff,	0          },
-{9,	376,	    0xffffffff,	2708992    },
-{9,	377,	    0xffffffff,	219        },
-{9,	378,	    0xffffffff,	0          },
-{9,	379,	    0xffffffff,	0          },
-{9,	380,	    0xffffffff,	0          },
-{9,	384,	    0xffffffff,	2708480    },
-{9,	385,	    0xffffffff,	236        },
-{9,	386,	    0xffffffff,	0          },
-{9,	387,	    0xffffffff,	0          },
-{9,	388,	    0xffffffff,	0          },
-{9,	392,	    0xffffffff,	2708992    },
-{9,	393,	    0xffffffff,	249        },
-{9,	394,	    0xffffffff,	0          },
-{9,	395,	    0xffffffff,	0          },
-{9,	396,	    0xffffffff,	0          },
-{9,	400,	    0xffffffff,	2708992    },
-{9,	401,	    0xffffffff,	3          },
-{9,	402,	    0xffffffff,	0          },
-{9,	403,	    0xffffffff,	0          },
-{9,	404,	    0xffffffff,	0          },
-{9,	408,	    0xffffffff,	2708992    },
-{9,	409,	    0xffffffff,	9          },
-{9,	410,	    0xffffffff,	0          },
-{9,	411,	    0xffffffff,	0          },
-{9,	412,	    0xffffffff,	0          },
-{9,	416,	    0xffffffff,	2708480    },
-{9,	417,	    0xffffffff,	12         },
-{9,	418,	    0xffffffff,	0          },
-{9,	419,	    0xffffffff,	0          },
-{9,	420,	    0xffffffff,	0          },
-{9,	424,	    0xffffffff,	2708480    },
-{9,	425,	    0xffffffff,	14         },
-{9,	426,	    0xffffffff,	0          },
-{9,	427,	    0xffffffff,	0          },
-{9,	428,	    0xffffffff,	0          },
-{9,	432,	    0xffffffff,	2708480    },
-{9,	433,	    0xffffffff,	12         },
-{9,	434,	    0xffffffff,	0          },
-{9,	435,	    0xffffffff,	0          },
-{9,	436,	    0xffffffff,	0          },
-{9,	440,	    0xffffffff,	2708480    },
-{9,	441,	    0xffffffff,	7          },
-{9,	442,	    0xffffffff,	0          },
-{9,	443,	    0xffffffff,	0          },
-{9,	444,	    0xffffffff,	0          },
-{9,	448,	    0xffffffff,	2708480    },
-{9,	449,	    0xffffffff,	251        },
-{9,	450,	    0xffffffff,	0          },
-{9,	451,	    0xffffffff,	0          },
-{9,	452,	    0xffffffff,	0          },
-{9,	456,	    0xffffffff,	2708480    },
-{9,	457,	    0xffffffff,	242        },
-{9,	458,	    0xffffffff,	0          },
-{9,	459,	    0xffffffff,	0          },
-{9,	460,	    0xffffffff,	0          },
-{9,	464,	    0xffffffff,	36262912   },
-{9,	465,	    0xffffffff,	238        },
-{9,	466,	    0xffffffff,	0          },
-{9,	467,	    0xffffffff,	0          },
-{9,	468,	    0xffffffff,	0          },
-{9,	472,	    0xffffffff,	69817344   },
-{9,	473,	    0xffffffff,	245        },
-{9,	474,	    0xffffffff,	0          },
-{9,	475,	    0xffffffff,	0          },
-{9,	476,	    0xffffffff,	0          },
-{9,	480,	    0xffffffff,	136926208  },
-{9,	481,	    0xffffffff,	1          },
-{9,	482,	    0xffffffff,	0          },
-{9,	483,	    0xffffffff,	0          },
-{9,	484,	    0xffffffff,	0          },
-{9,	488,	    0xffffffff,	136926208  },
-{9,	489,	    0xffffffff,	5          },
-{9,	490,	    0xffffffff,	0          },
-{9,	491,	    0xffffffff,	0          },
-{9,	492,	    0xffffffff,	0          },
-{9,	496,	    0xffffffff,	136926208  },
-{9,	497,	    0xffffffff,	5          },
-{9,	498,	    0xffffffff,	0          },
-{9,	499,	    0xffffffff,	0          },
-{9,	500,	    0xffffffff,	0          },
-{9,	504,	    0xffffffff,	69817344   },
-{9,	505,	    0xffffffff,	7          },
-{9,	506,	    0xffffffff,	0          },
-{9,	507,	    0xffffffff,	0          },
-{9,	508,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	512,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	513,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	514,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	515,	    0xffffffff,	134218752  },
+{REG_TYPE_INDEX_VPPCHROMA,	516,	    0xffffffff,	144        },
+{REG_TYPE_INDEX_VPPCHROMA,	518,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	519,	    0xffffffff,	33554432   },
+{REG_TYPE_INDEX_VPPCHROMA,	520,	    0xffffffff,	122        },
+{REG_TYPE_INDEX_VPPCHROMA,	521,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	522,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	527,	    0xf,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	517,	    0xffffffff,	70715263   },
+{REG_TYPE_INDEX_VPP_COEF,	256,	    0xffffffff,	2840064    },
+{REG_TYPE_INDEX_VPP_COEF,	257,	    0xffffffff,	12         },
+{REG_TYPE_INDEX_VPP_COEF,	258,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	259,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	260,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	264,	    0xffffffff,	2708992    },
+{REG_TYPE_INDEX_VPP_COEF,	265,	    0xffffffff,	31         },
+{REG_TYPE_INDEX_VPP_COEF,	266,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	267,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	268,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	272,	    0xffffffff,	2708992    },
+{REG_TYPE_INDEX_VPP_COEF,	273,	    0xffffffff,	51         },
+{REG_TYPE_INDEX_VPP_COEF,	274,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	275,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	276,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	280,	    0xffffffff,	2840064    },
+{REG_TYPE_INDEX_VPP_COEF,	281,	    0xffffffff,	63         },
+{REG_TYPE_INDEX_VPP_COEF,	282,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	283,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	284,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	288,	    0xffffffff,	2840064    },
+{REG_TYPE_INDEX_VPP_COEF,	289,	    0xffffffff,	63         },
+{REG_TYPE_INDEX_VPP_COEF,	290,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	291,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	292,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	296,	    0xffffffff,	2708992    },
+{REG_TYPE_INDEX_VPP_COEF,	297,	    0xffffffff,	63         },
+{REG_TYPE_INDEX_VPP_COEF,	298,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	299,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	300,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	304,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	305,	    0xffffffff,	63         },
+{REG_TYPE_INDEX_VPP_COEF,	306,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	307,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	308,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	312,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	313,	    0xffffffff,	51         },
+{REG_TYPE_INDEX_VPP_COEF,	314,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	315,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	316,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	320,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	321,	    0xffffffff,	9          },
+{REG_TYPE_INDEX_VPP_COEF,	322,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	323,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	324,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	328,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	329,	    0xffffffff,	234        },
+{REG_TYPE_INDEX_VPP_COEF,	330,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	331,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	332,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	336,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	337,	    0xffffffff,	212        },
+{REG_TYPE_INDEX_VPP_COEF,	338,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	339,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	340,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	344,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	345,	    0xffffffff,	197        },
+{REG_TYPE_INDEX_VPP_COEF,	346,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	347,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	348,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	352,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	353,	    0xffffffff,	193        },
+{REG_TYPE_INDEX_VPP_COEF,	354,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	355,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	356,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	360,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	361,	    0xffffffff,	203        },
+{REG_TYPE_INDEX_VPP_COEF,	362,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	363,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	364,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	368,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	369,	    0xffffffff,	214        },
+{REG_TYPE_INDEX_VPP_COEF,	370,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	371,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	372,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	376,	    0xffffffff,	2708992    },
+{REG_TYPE_INDEX_VPP_COEF,	377,	    0xffffffff,	219        },
+{REG_TYPE_INDEX_VPP_COEF,	378,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	379,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	380,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	384,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	385,	    0xffffffff,	236        },
+{REG_TYPE_INDEX_VPP_COEF,	386,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	387,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	388,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	392,	    0xffffffff,	2708992    },
+{REG_TYPE_INDEX_VPP_COEF,	393,	    0xffffffff,	249        },
+{REG_TYPE_INDEX_VPP_COEF,	394,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	395,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	396,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	400,	    0xffffffff,	2708992    },
+{REG_TYPE_INDEX_VPP_COEF,	401,	    0xffffffff,	3          },
+{REG_TYPE_INDEX_VPP_COEF,	402,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	403,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	404,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	408,	    0xffffffff,	2708992    },
+{REG_TYPE_INDEX_VPP_COEF,	409,	    0xffffffff,	9          },
+{REG_TYPE_INDEX_VPP_COEF,	410,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	411,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	412,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	416,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	417,	    0xffffffff,	12         },
+{REG_TYPE_INDEX_VPP_COEF,	418,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	419,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	420,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	424,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	425,	    0xffffffff,	14         },
+{REG_TYPE_INDEX_VPP_COEF,	426,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	427,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	428,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	432,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	433,	    0xffffffff,	12         },
+{REG_TYPE_INDEX_VPP_COEF,	434,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	435,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	436,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	440,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	441,	    0xffffffff,	7          },
+{REG_TYPE_INDEX_VPP_COEF,	442,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	443,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	444,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	448,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	449,	    0xffffffff,	251        },
+{REG_TYPE_INDEX_VPP_COEF,	450,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	451,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	452,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	456,	    0xffffffff,	2708480    },
+{REG_TYPE_INDEX_VPP_COEF,	457,	    0xffffffff,	242        },
+{REG_TYPE_INDEX_VPP_COEF,	458,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	459,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	460,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	464,	    0xffffffff,	36262912   },
+{REG_TYPE_INDEX_VPP_COEF,	465,	    0xffffffff,	238        },
+{REG_TYPE_INDEX_VPP_COEF,	466,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	467,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	468,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	472,	    0xffffffff,	69817344   },
+{REG_TYPE_INDEX_VPP_COEF,	473,	    0xffffffff,	245        },
+{REG_TYPE_INDEX_VPP_COEF,	474,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	475,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	476,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	480,	    0xffffffff,	136926208  },
+{REG_TYPE_INDEX_VPP_COEF,	481,	    0xffffffff,	1          },
+{REG_TYPE_INDEX_VPP_COEF,	482,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	483,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	484,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	488,	    0xffffffff,	136926208  },
+{REG_TYPE_INDEX_VPP_COEF,	489,	    0xffffffff,	5          },
+{REG_TYPE_INDEX_VPP_COEF,	490,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	491,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	492,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	496,	    0xffffffff,	136926208  },
+{REG_TYPE_INDEX_VPP_COEF,	497,	    0xffffffff,	5          },
+{REG_TYPE_INDEX_VPP_COEF,	498,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	499,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	500,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	504,	    0xffffffff,	69817344   },
+{REG_TYPE_INDEX_VPP_COEF,	505,	    0xffffffff,	7          },
+{REG_TYPE_INDEX_VPP_COEF,	506,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	507,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	508,	    0xffffffff,	0          },
 {0}
 	}
 };
@@ -377,178 +377,178 @@ static am_regs_t cmreg_lever3={
 	172,
 	{
 /* optimize */
-{6,	512,	    0xffffffff,	0          },
-{6,	513,	    0xffffffff,	0          },
-{6,	514,	    0xffffffff,	0          },
-{6,	515,	    0xffffffff,	134218752  },
-{6,	516,	    0xffffffff,	144        },
-{6,	518,	    0xffffffff,	0          },
-{6,	519,	    0xffffffff,	33554432   },
-{6,	520,	    0xffffffff,	118        },
-{6,	521,	    0xffffffff,	62914560   },
-{6,	522,	    0xffffffff,	70778880   },
-{6,	527,	           0xf,	1          },
-{6,	517,	    0xffffffff,	70780799   },
-{9,	256,	    0xffffffff,	16648704   },
-{9,	257,	    0xffffffff,	0xf3f6000b },
-{9,	258,	    0xffffffff,	0xe3000000 },
-{9,	259,	    0xffffffff,	240        },
-{9,	260,	    0xffffffff,	63742      },
-{9,	264,	    0xffffffff,	16650496   },
-{9,	265,	    0xffffffff,	14         },
-{9,	266,	    0xffffffff,	0          },
-{9,	267,	    0xffffffff,	0          },
-{9,	268,	    0xffffffff,	0          },
-{9,	272,	    0xffffffff,	135936     },
-{9,	273,	    0xffffffff,	253        },
-{9,	274,	    0xffffffff,	0          },
-{9,	275,	    0xffffffff,	0          },
-{9,	276,	    0xffffffff,	0          },
-{9,	280,	    0xffffffff,	0xf3f11300 },
-{9,	281,	    0xffffffff,	214        },
-{9,	282,	    0xffffffff,	0          },
-{9,	283,	    0xffffffff,	0          },
-{9,	284,	    0xffffffff,	0          },
-{9,	288,	    0xffffffff,	0xede91300 },
-{9,	289,	    0xffffffff,	177        },
-{9,	290,	    0xffffffff,	0          },
-{9,	291,	    0xffffffff,	0          },
-{9,	292,	    0xffffffff,	15660544   },
-{9,	296,	    0xffffffff,	0xe9e61100 },
-{9,	297,	    0xffffffff,	184        },
-{9,	298,	    0xffffffff,	0          },
-{9,	299,	    0xffffffff,	0          },
-{9,	300,	    0xffffffff,	15464448   },
-{9,	304,	    0xffffffff,	0xeff80f00 },
-{9,	305,	    0xffffffff,	232        },
-{9,	306,	    0xffffffff,	0          },
-{9,	307,	    0xffffffff,	0          },
-{9,	308,	    0xffffffff,	0          },
-{9,	312,	    0xffffffff,	0xf60a0d00 },
-{9,	313,	    0xffffffff,	5          },
-{9,	314,	    0xffffffff,	0          },
-{9,	315,	    0xffffffff,	0          },
-{9,	316,	    0xffffffff,	0          },
-{9,	320,	    0xffffffff,	526848     },
-{9,	321,	    0xffffffff,	5          },
-{9,	322,	    0xffffffff,	0          },
-{9,	323,	    0xffffffff,	10         },
-{9,	324,	    0xffffffff,	0          },
-{9,	328,	    0xffffffff,	526848     },
-{9,	329,	    0xffffffff,	134742265  },
-{9,	330,	    0xffffffff,	167903232  },
-{9,	331,	    0xffffffff,	21         },
-{9,	332,	    0xffffffff,	3328       },
-{9,	336,	    0xffffffff,	131072     },
-{9,	337,	    0xffffffff,	0xf80d00ea },
-{9,	338,	    0xffffffff,	0xf80500fb },
-{9,	339,	    0xffffffff,	2          },
-{9,	340,	    0xffffffff,	132357     },
-{9,	344,	    0xffffffff,	131584     },
-{9,	345,	    0xffffffff,	0xfb0100da },
-{9,	346,	    0xffffffff,	0xf6020002 },
-{9,	347,	    0xffffffff,	251        },
-{9,	348,	    0xffffffff,	16646656   },
-{9,	352,	    0xffffffff,	657408     },
-{9,	353,	    0xffffffff,	327872     },
-{9,	354,	    0xffffffff,	0xf6050000 },
-{9,	355,	    0xffffffff,	2          },
-{9,	356,	    0xffffffff,	0          },
-{9,	360,	    0xffffffff,	526336     },
-{9,	361,	    0xffffffff,	175        },
-{9,	362,	    0xffffffff,	0xf600f600 },
-{9,	363,	    0xffffffff,	254        },
-{9,	364,	    0xffffffff,	33554432   },
-{9,	368,	    0xffffffff,	986368     },
-{9,	369,	    0xffffffff,	169        },
-{9,	370,	    0xffffffff,	0xf300eef6 },
-{9,	371,	    0xffffffff,	243        },
-{9,	372,	    0xffffffff,	0xfb050000 },
-{9,	376,	    0xffffffff,	34541312   },
-{9,	377,	    0xffffffff,	83886277   },
-{9,	378,	    0xffffffff,	0xfbfef8f8 },
-{9,	379,	    0xffffffff,	246        },
-{9,	380,	    0xffffffff,	0xf8080200 },
-{9,	384,	    0xffffffff,	135339520  },
-{9,	385,	    0xffffffff,	353697836  },
-{9,	386,	    0xffffffff,	168427768  },
-{9,	387,	    0xffffffff,	13         },
-{9,	388,	    0xffffffff,	0xfb080800 },
-{9,	392,	    0xffffffff,	219356160  },
-{9,	393,	    0xffffffff,	674758739  },
-{9,	394,	    0xffffffff,	573177856  },
-{9,	395,	    0xffffffff,	21         },
-{9,	396,	    0xffffffff,	657920     },
-{9,	400,	    0xffffffff,	219223808  },
-{9,	401,	    0xffffffff,	809304160  },
-{9,	402,	    0xffffffff,	674562069  },
-{9,	403,	    0xffffffff,	13         },
-{9,	404,	    0xffffffff,	657920     },
-{9,	408,	    0xffffffff,	168629504  },
-{9,	409,	    0xffffffff,	807731289  },
-{9,	410,	    0xffffffff,	403308562  },
-{9,	411,	    0xffffffff,	0          },
-{9,	412,	    0xffffffff,	526848     },
-{9,	416,	    0xffffffff,	395776     },
-{9,	417,	    0xffffffff,	269484098  },
-{9,	418,	    0xffffffff,	167772160  },
-{9,	419,	    0xffffffff,	0          },
-{9,	420,	    0xffffffff,	0          },
-{9,	424,	    0xffffffff,	396544     },
-{9,	425,	    0xffffffff,	134217757  },
-{9,	426,	    0xffffffff,	0          },
-{9,	427,	    0xffffffff,	0          },
-{9,	428,	    0xffffffff,	0          },
-{9,	432,	    0xffffffff,	527616     },
-{9,	433,	    0xffffffff,	12         },
-{9,	434,	    0xffffffff,	0          },
-{9,	435,	    0xffffffff,	0          },
-{9,	436,	    0xffffffff,	0          },
-{9,	440,	    0xffffffff,	658688     },
-{9,	441,	    0xffffffff,	7          },
-{9,	442,	    0xffffffff,	0          },
-{9,	443,	    0xffffffff,	0          },
-{9,	444,	    0xffffffff,	0          },
-{9,	448,	    0xffffffff,	986880     },
-{9,	449,	    0xffffffff,	5          },
-{9,	450,	    0xffffffff,	0          },
-{9,	451,	    0xffffffff,	0          },
-{9,	452,	    0xffffffff,	0          },
-{9,	456,	    0xffffffff,	219811584  },
-{9,	457,	    0xffffffff,	244        },
-{9,	458,	    0xffffffff,	0          },
-{9,	459,	    0xffffffff,	0          },
-{9,	460,	    0xffffffff,	0          },
-{9,	464,	    0xffffffff,	287183104  },
-{9,	465,	    0xffffffff,	186        },
-{9,	466,	    0xffffffff,	0xf3000000 },
-{9,	467,	    0xffffffff,	246        },
-{9,	468,	    0xffffffff,	0xfb000000 },
-{9,	472,	    0xffffffff,	219944192  },
-{9,	473,	    0xffffffff,	158        },
-{9,	474,	    0xffffffff,	0xf0000000 },
-{9,	475,	    0xffffffff,	232        },
-{9,	476,	    0xffffffff,	0          },
-{9,	480,	    0xffffffff,	1382912    },
-{9,	481,	    0xffffffff,	0xfb0000a4 },
-{9,	482,	    0xffffffff,	0xe300f3f3 },
-{9,	483,	    0xffffffff,	219        },
-{9,	484,	    0xffffffff,	0          },
-{9,	488,	    0xffffffff,	1514496    },
-{9,	489,	    0xffffffff,	0xf30000ba },
-{9,	490,	    0xffffffff,	0xe600f3f0 },
-{9,	491,	    0xffffffff,	222        },
-{9,	492,	    0xffffffff,	0          },
-{9,	496,	    0xffffffff,	1120000    },
-{9,	497,	    0xffffffff,	0xf3fb00db },
-{9,	498,	    0xffffffff,	0xe800f6ee },
-{9,	499,	    0xffffffff,	232        },
-{9,	500,	    0xffffffff,	64256      },
-{9,	504,	    0xffffffff,	397056     },
-{9,	505,	    0xffffffff,	0xf6f800f7 },
-{9,	506,	    0xffffffff,	0xe60000f8 },
-{9,	507,	    0xffffffff,	235        },
-{9,	508,	    0xffffffff,	65278      },
+{REG_TYPE_INDEX_VPPCHROMA,	512,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	513,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	514,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	515,	    0xffffffff,	134218752  },
+{REG_TYPE_INDEX_VPPCHROMA,	516,	    0xffffffff,	144        },
+{REG_TYPE_INDEX_VPPCHROMA,	518,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPPCHROMA,	519,	    0xffffffff,	33554432   },
+{REG_TYPE_INDEX_VPPCHROMA,	520,	    0xffffffff,	118        },
+{REG_TYPE_INDEX_VPPCHROMA,	521,	    0xffffffff,	62914560   },
+{REG_TYPE_INDEX_VPPCHROMA,	522,	    0xffffffff,	70778880   },
+{REG_TYPE_INDEX_VPPCHROMA,	527,	           0xf,	1          },
+{REG_TYPE_INDEX_VPPCHROMA,	517,	    0xffffffff,	70780799   },
+{REG_TYPE_INDEX_VPP_COEF,	256,	    0xffffffff,	16648704   },
+{REG_TYPE_INDEX_VPP_COEF,	257,	    0xffffffff,	0xf3f6000b },
+{REG_TYPE_INDEX_VPP_COEF,	258,	    0xffffffff,	0xe3000000 },
+{REG_TYPE_INDEX_VPP_COEF,	259,	    0xffffffff,	240        },
+{REG_TYPE_INDEX_VPP_COEF,	260,	    0xffffffff,	63742      },
+{REG_TYPE_INDEX_VPP_COEF,	264,	    0xffffffff,	16650496   },
+{REG_TYPE_INDEX_VPP_COEF,	265,	    0xffffffff,	14         },
+{REG_TYPE_INDEX_VPP_COEF,	266,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	267,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	268,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	272,	    0xffffffff,	135936     },
+{REG_TYPE_INDEX_VPP_COEF,	273,	    0xffffffff,	253        },
+{REG_TYPE_INDEX_VPP_COEF,	274,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	275,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	276,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	280,	    0xffffffff,	0xf3f11300 },
+{REG_TYPE_INDEX_VPP_COEF,	281,	    0xffffffff,	214        },
+{REG_TYPE_INDEX_VPP_COEF,	282,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	283,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	284,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	288,	    0xffffffff,	0xede91300 },
+{REG_TYPE_INDEX_VPP_COEF,	289,	    0xffffffff,	177        },
+{REG_TYPE_INDEX_VPP_COEF,	290,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	291,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	292,	    0xffffffff,	15660544   },
+{REG_TYPE_INDEX_VPP_COEF,	296,	    0xffffffff,	0xe9e61100 },
+{REG_TYPE_INDEX_VPP_COEF,	297,	    0xffffffff,	184        },
+{REG_TYPE_INDEX_VPP_COEF,	298,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	299,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	300,	    0xffffffff,	15464448   },
+{REG_TYPE_INDEX_VPP_COEF,	304,	    0xffffffff,	0xeff80f00 },
+{REG_TYPE_INDEX_VPP_COEF,	305,	    0xffffffff,	232        },
+{REG_TYPE_INDEX_VPP_COEF,	306,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	307,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	308,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	312,	    0xffffffff,	0xf60a0d00 },
+{REG_TYPE_INDEX_VPP_COEF,	313,	    0xffffffff,	5          },
+{REG_TYPE_INDEX_VPP_COEF,	314,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	315,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	316,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	320,	    0xffffffff,	526848     },
+{REG_TYPE_INDEX_VPP_COEF,	321,	    0xffffffff,	5          },
+{REG_TYPE_INDEX_VPP_COEF,	322,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	323,	    0xffffffff,	10         },
+{REG_TYPE_INDEX_VPP_COEF,	324,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	328,	    0xffffffff,	526848     },
+{REG_TYPE_INDEX_VPP_COEF,	329,	    0xffffffff,	134742265  },
+{REG_TYPE_INDEX_VPP_COEF,	330,	    0xffffffff,	167903232  },
+{REG_TYPE_INDEX_VPP_COEF,	331,	    0xffffffff,	21         },
+{REG_TYPE_INDEX_VPP_COEF,	332,	    0xffffffff,	3328       },
+{REG_TYPE_INDEX_VPP_COEF,	336,	    0xffffffff,	131072     },
+{REG_TYPE_INDEX_VPP_COEF,	337,	    0xffffffff,	0xf80d00ea },
+{REG_TYPE_INDEX_VPP_COEF,	338,	    0xffffffff,	0xf80500fb },
+{REG_TYPE_INDEX_VPP_COEF,	339,	    0xffffffff,	2          },
+{REG_TYPE_INDEX_VPP_COEF,	340,	    0xffffffff,	132357     },
+{REG_TYPE_INDEX_VPP_COEF,	344,	    0xffffffff,	131584     },
+{REG_TYPE_INDEX_VPP_COEF,	345,	    0xffffffff,	0xfb0100da },
+{REG_TYPE_INDEX_VPP_COEF,	346,	    0xffffffff,	0xf6020002 },
+{REG_TYPE_INDEX_VPP_COEF,	347,	    0xffffffff,	251        },
+{REG_TYPE_INDEX_VPP_COEF,	348,	    0xffffffff,	16646656   },
+{REG_TYPE_INDEX_VPP_COEF,	352,	    0xffffffff,	657408     },
+{REG_TYPE_INDEX_VPP_COEF,	353,	    0xffffffff,	327872     },
+{REG_TYPE_INDEX_VPP_COEF,	354,	    0xffffffff,	0xf6050000 },
+{REG_TYPE_INDEX_VPP_COEF,	355,	    0xffffffff,	2          },
+{REG_TYPE_INDEX_VPP_COEF,	356,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	360,	    0xffffffff,	526336     },
+{REG_TYPE_INDEX_VPP_COEF,	361,	    0xffffffff,	175        },
+{REG_TYPE_INDEX_VPP_COEF,	362,	    0xffffffff,	0xf600f600 },
+{REG_TYPE_INDEX_VPP_COEF,	363,	    0xffffffff,	254        },
+{REG_TYPE_INDEX_VPP_COEF,	364,	    0xffffffff,	33554432   },
+{REG_TYPE_INDEX_VPP_COEF,	368,	    0xffffffff,	986368     },
+{REG_TYPE_INDEX_VPP_COEF,	369,	    0xffffffff,	169        },
+{REG_TYPE_INDEX_VPP_COEF,	370,	    0xffffffff,	0xf300eef6 },
+{REG_TYPE_INDEX_VPP_COEF,	371,	    0xffffffff,	243        },
+{REG_TYPE_INDEX_VPP_COEF,	372,	    0xffffffff,	0xfb050000 },
+{REG_TYPE_INDEX_VPP_COEF,	376,	    0xffffffff,	34541312   },
+{REG_TYPE_INDEX_VPP_COEF,	377,	    0xffffffff,	83886277   },
+{REG_TYPE_INDEX_VPP_COEF,	378,	    0xffffffff,	0xfbfef8f8 },
+{REG_TYPE_INDEX_VPP_COEF,	379,	    0xffffffff,	246        },
+{REG_TYPE_INDEX_VPP_COEF,	380,	    0xffffffff,	0xf8080200 },
+{REG_TYPE_INDEX_VPP_COEF,	384,	    0xffffffff,	135339520  },
+{REG_TYPE_INDEX_VPP_COEF,	385,	    0xffffffff,	353697836  },
+{REG_TYPE_INDEX_VPP_COEF,	386,	    0xffffffff,	168427768  },
+{REG_TYPE_INDEX_VPP_COEF,	387,	    0xffffffff,	13         },
+{REG_TYPE_INDEX_VPP_COEF,	388,	    0xffffffff,	0xfb080800 },
+{REG_TYPE_INDEX_VPP_COEF,	392,	    0xffffffff,	219356160  },
+{REG_TYPE_INDEX_VPP_COEF,	393,	    0xffffffff,	674758739  },
+{REG_TYPE_INDEX_VPP_COEF,	394,	    0xffffffff,	573177856  },
+{REG_TYPE_INDEX_VPP_COEF,	395,	    0xffffffff,	21         },
+{REG_TYPE_INDEX_VPP_COEF,	396,	    0xffffffff,	657920     },
+{REG_TYPE_INDEX_VPP_COEF,	400,	    0xffffffff,	219223808  },
+{REG_TYPE_INDEX_VPP_COEF,	401,	    0xffffffff,	809304160  },
+{REG_TYPE_INDEX_VPP_COEF,	402,	    0xffffffff,	674562069  },
+{REG_TYPE_INDEX_VPP_COEF,	403,	    0xffffffff,	13         },
+{REG_TYPE_INDEX_VPP_COEF,	404,	    0xffffffff,	657920     },
+{REG_TYPE_INDEX_VPP_COEF,	408,	    0xffffffff,	168629504  },
+{REG_TYPE_INDEX_VPP_COEF,	409,	    0xffffffff,	807731289  },
+{REG_TYPE_INDEX_VPP_COEF,	410,	    0xffffffff,	403308562  },
+{REG_TYPE_INDEX_VPP_COEF,	411,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	412,	    0xffffffff,	526848     },
+{REG_TYPE_INDEX_VPP_COEF,	416,	    0xffffffff,	395776     },
+{REG_TYPE_INDEX_VPP_COEF,	417,	    0xffffffff,	269484098  },
+{REG_TYPE_INDEX_VPP_COEF,	418,	    0xffffffff,	167772160  },
+{REG_TYPE_INDEX_VPP_COEF,	419,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	420,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	424,	    0xffffffff,	396544     },
+{REG_TYPE_INDEX_VPP_COEF,	425,	    0xffffffff,	134217757  },
+{REG_TYPE_INDEX_VPP_COEF,	426,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	427,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	428,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	432,	    0xffffffff,	527616     },
+{REG_TYPE_INDEX_VPP_COEF,	433,	    0xffffffff,	12         },
+{REG_TYPE_INDEX_VPP_COEF,	434,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	435,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	436,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	440,	    0xffffffff,	658688     },
+{REG_TYPE_INDEX_VPP_COEF,	441,	    0xffffffff,	7          },
+{REG_TYPE_INDEX_VPP_COEF,	442,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	443,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	444,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	448,	    0xffffffff,	986880     },
+{REG_TYPE_INDEX_VPP_COEF,	449,	    0xffffffff,	5          },
+{REG_TYPE_INDEX_VPP_COEF,	450,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	451,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	452,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	456,	    0xffffffff,	219811584  },
+{REG_TYPE_INDEX_VPP_COEF,	457,	    0xffffffff,	244        },
+{REG_TYPE_INDEX_VPP_COEF,	458,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	459,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	460,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	464,	    0xffffffff,	287183104  },
+{REG_TYPE_INDEX_VPP_COEF,	465,	    0xffffffff,	186        },
+{REG_TYPE_INDEX_VPP_COEF,	466,	    0xffffffff,	0xf3000000 },
+{REG_TYPE_INDEX_VPP_COEF,	467,	    0xffffffff,	246        },
+{REG_TYPE_INDEX_VPP_COEF,	468,	    0xffffffff,	0xfb000000 },
+{REG_TYPE_INDEX_VPP_COEF,	472,	    0xffffffff,	219944192  },
+{REG_TYPE_INDEX_VPP_COEF,	473,	    0xffffffff,	158        },
+{REG_TYPE_INDEX_VPP_COEF,	474,	    0xffffffff,	0xf0000000 },
+{REG_TYPE_INDEX_VPP_COEF,	475,	    0xffffffff,	232        },
+{REG_TYPE_INDEX_VPP_COEF,	476,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	480,	    0xffffffff,	1382912    },
+{REG_TYPE_INDEX_VPP_COEF,	481,	    0xffffffff,	0xfb0000a4 },
+{REG_TYPE_INDEX_VPP_COEF,	482,	    0xffffffff,	0xe300f3f3 },
+{REG_TYPE_INDEX_VPP_COEF,	483,	    0xffffffff,	219        },
+{REG_TYPE_INDEX_VPP_COEF,	484,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	488,	    0xffffffff,	1514496    },
+{REG_TYPE_INDEX_VPP_COEF,	489,	    0xffffffff,	0xf30000ba },
+{REG_TYPE_INDEX_VPP_COEF,	490,	    0xffffffff,	0xe600f3f0 },
+{REG_TYPE_INDEX_VPP_COEF,	491,	    0xffffffff,	222        },
+{REG_TYPE_INDEX_VPP_COEF,	492,	    0xffffffff,	0          },
+{REG_TYPE_INDEX_VPP_COEF,	496,	    0xffffffff,	1120000    },
+{REG_TYPE_INDEX_VPP_COEF,	497,	    0xffffffff,	0xf3fb00db },
+{REG_TYPE_INDEX_VPP_COEF,	498,	    0xffffffff,	0xe800f6ee },
+{REG_TYPE_INDEX_VPP_COEF,	499,	    0xffffffff,	232        },
+{REG_TYPE_INDEX_VPP_COEF,	500,	    0xffffffff,	64256      },
+{REG_TYPE_INDEX_VPP_COEF,	504,	    0xffffffff,	397056     },
+{REG_TYPE_INDEX_VPP_COEF,	505,	    0xffffffff,	0xf6f800f7 },
+{REG_TYPE_INDEX_VPP_COEF,	506,	    0xffffffff,	0xe60000f8 },
+{REG_TYPE_INDEX_VPP_COEF,	507,	    0xffffffff,	235        },
+{REG_TYPE_INDEX_VPP_COEF,	508,	    0xffffffff,	65278      },
 {0}
 	}
 };
diff --git a/drivers/amlogic/amvecm/amve.c b/drivers/amlogic/amvecm/amve.c
index 1ff6510f7a1c..623005e6a489 100755
--- a/drivers/amlogic/amvecm/amve.c
+++ b/drivers/amlogic/amvecm/amve.c
@@ -161,7 +161,7 @@ static void ve_dnlp_calculate_tgt_ext(vframe_t *vf)
 	ulong div1  = 0, div2  = 0, step_h  = 0, step_l  = 0;
 	ulong data[55];
 	bool  flag[55], previous_state_high = false;
-	unsigned int cnt = READ_CBUS_REG(ASSIST_SPARE8_REG1);
+	unsigned int cnt = READ_VPP_REG(ASSIST_SPARE8_REG1);
 	// old historic luma sum
 	sum_b = sum_c;
 	sum_c = ve_dnlp_luma_sum;
@@ -271,7 +271,7 @@ static void ve_dnlp_calculate_tgt_ext(vframe_t *vf)
 		if(cnt){
 			for(i=0;i<64;i++)
 				pr_amve_dbg(" ve_dnlp_tgte[%ld]=%d\n",i,ve_dnlp_tgt[i]);
-			WRITE_CBUS_REG(ASSIST_SPARE8_REG1, 0);
+			WRITE_VPP_REG(ASSIST_SPARE8_REG1, 0);
 		}
 	}
 }
@@ -315,8 +315,8 @@ static void ve_dnlp_calculate_tgtx(vframe_t *vf)
 	ulong i = 0, j = 0, sum = 0, max = 0;
 	ulong cLmt=0, nStp=0, stp=0, uLmt=0;
 	long nExc=0;
-	unsigned int cnt = READ_CBUS_REG(ASSIST_SPARE8_REG1);
-	unsigned int cnt2 = READ_CBUS_REG(ASSIST_SPARE8_REG2);
+	unsigned int cnt = READ_VPP_REG(ASSIST_SPARE8_REG1);
+	unsigned int cnt2 = READ_VPP_REG(ASSIST_SPARE8_REG2);
 	unsigned int clip_rate = ve_dnlp_cliprate; //8bit
 	unsigned int low_range = ve_dnlp_lowrange;//18; //6bit [0-54]
 	unsigned int hgh_range = ve_dnlp_hghrange;//18; //6bit [0-54]
@@ -371,7 +371,7 @@ static void ve_dnlp_calculate_tgtx(vframe_t *vf)
 	uLmt = cLmt-nStp;
 	if(cnt2){
 		pr_amve_dbg(" ve_dnlp_tgtx:cLmt=%ld,nStp=%ld,uLmt=%ld\n",cLmt,nStp,uLmt);
-		WRITE_CBUS_REG(ASSIST_SPARE8_REG2, 0);
+		WRITE_VPP_REG(ASSIST_SPARE8_REG2, 0);
 	}
 	if(clip_rate<=4 || tAvg<=2){
 		cLmt = (sum+28)/55;
@@ -465,7 +465,7 @@ static void ve_dnlp_calculate_tgtx(vframe_t *vf)
 	if(cnt){
 		for(i=0;i<64;i++)
 			pr_amve_dbg(" ve_dnlp_tgtx[%ld]=%d\n",i,ve_dnlp_tgt[i]);
-		WRITE_CBUS_REG(ASSIST_SPARE8_REG1, 0);
+		WRITE_VPP_REG(ASSIST_SPARE8_REG1, 0);
 	}
 	return;
 }
@@ -476,7 +476,7 @@ static void ve_dnlp_calculate_tgt(vframe_t *vf)
 	ulong data[5];
 	static unsigned int sum_b = 0, sum_c = 0;
 	ulong i = 0, j = 0, ave = 0, max = 0, div = 0;
-	unsigned int cnt = READ_CBUS_REG(ASSIST_SPARE8_REG1);
+	unsigned int cnt = READ_VPP_REG(ASSIST_SPARE8_REG1);
 	// old historic luma sum
 	sum_b = sum_c;
 	sum_c = ve_dnlp_luma_sum;
@@ -562,7 +562,7 @@ static void ve_dnlp_calculate_tgt(vframe_t *vf)
 	if(cnt){
 		for(i=0;i<64;i++)
 			pr_amve_dbg(" ve_dnlp_tgt[%ld]=%d\n",i,ve_dnlp_tgt[i]);
-		WRITE_CBUS_REG(ASSIST_SPARE8_REG1, 0);
+		WRITE_VPP_REG(ASSIST_SPARE8_REG1, 0);
 	}
 }
 
@@ -591,39 +591,39 @@ static void ve_dnlp_calculate_reg(void)
 static void ve_dnlp_load_reg(void)
 {
 #ifdef NEW_DNLP_IN_SHARPNESS
-	WRITE_CBUS_REG(DNLP_00, ve_dnlp_reg[0]);
-	WRITE_CBUS_REG(DNLP_01, ve_dnlp_reg[1]);
-	WRITE_CBUS_REG(DNLP_02, ve_dnlp_reg[2]);
-	WRITE_CBUS_REG(DNLP_03, ve_dnlp_reg[3]);
-	WRITE_CBUS_REG(DNLP_04, ve_dnlp_reg[4]);
-	WRITE_CBUS_REG(DNLP_05, ve_dnlp_reg[5]);
-	WRITE_CBUS_REG(DNLP_06, ve_dnlp_reg[6]);
-	WRITE_CBUS_REG(DNLP_07, ve_dnlp_reg[7]);
-	WRITE_CBUS_REG(DNLP_08, ve_dnlp_reg[8]);
-	WRITE_CBUS_REG(DNLP_09, ve_dnlp_reg[9]);
-	WRITE_CBUS_REG(DNLP_10, ve_dnlp_reg[10]);
-	WRITE_CBUS_REG(DNLP_11, ve_dnlp_reg[11]);
-	WRITE_CBUS_REG(DNLP_12, ve_dnlp_reg[12]);
-	WRITE_CBUS_REG(DNLP_13, ve_dnlp_reg[13]);
-	WRITE_CBUS_REG(DNLP_14, ve_dnlp_reg[14]);
-	WRITE_CBUS_REG(DNLP_15, ve_dnlp_reg[15]);
+	WRITE_VPP_REG(DNLP_00, ve_dnlp_reg[0]);
+	WRITE_VPP_REG(DNLP_01, ve_dnlp_reg[1]);
+	WRITE_VPP_REG(DNLP_02, ve_dnlp_reg[2]);
+	WRITE_VPP_REG(DNLP_03, ve_dnlp_reg[3]);
+	WRITE_VPP_REG(DNLP_04, ve_dnlp_reg[4]);
+	WRITE_VPP_REG(DNLP_05, ve_dnlp_reg[5]);
+	WRITE_VPP_REG(DNLP_06, ve_dnlp_reg[6]);
+	WRITE_VPP_REG(DNLP_07, ve_dnlp_reg[7]);
+	WRITE_VPP_REG(DNLP_08, ve_dnlp_reg[8]);
+	WRITE_VPP_REG(DNLP_09, ve_dnlp_reg[9]);
+	WRITE_VPP_REG(DNLP_10, ve_dnlp_reg[10]);
+	WRITE_VPP_REG(DNLP_11, ve_dnlp_reg[11]);
+	WRITE_VPP_REG(DNLP_12, ve_dnlp_reg[12]);
+	WRITE_VPP_REG(DNLP_13, ve_dnlp_reg[13]);
+	WRITE_VPP_REG(DNLP_14, ve_dnlp_reg[14]);
+	WRITE_VPP_REG(DNLP_15, ve_dnlp_reg[15]);
 #else
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_00, ve_dnlp_reg[0]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_01, ve_dnlp_reg[1]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_02, ve_dnlp_reg[2]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_03, ve_dnlp_reg[3]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_04, ve_dnlp_reg[4]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_05, ve_dnlp_reg[5]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_06, ve_dnlp_reg[6]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_07, ve_dnlp_reg[7]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_08, ve_dnlp_reg[8]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_09, ve_dnlp_reg[9]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_10, ve_dnlp_reg[10]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_11, ve_dnlp_reg[11]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_12, ve_dnlp_reg[12]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_13, ve_dnlp_reg[13]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_14, ve_dnlp_reg[14]);
-	WRITE_CBUS_REG(VPP_DNLP_CTRL_15, ve_dnlp_reg[15]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_00, ve_dnlp_reg[0]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_01, ve_dnlp_reg[1]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_02, ve_dnlp_reg[2]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_03, ve_dnlp_reg[3]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_04, ve_dnlp_reg[4]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_05, ve_dnlp_reg[5]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_06, ve_dnlp_reg[6]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_07, ve_dnlp_reg[7]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_08, ve_dnlp_reg[8]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_09, ve_dnlp_reg[9]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_10, ve_dnlp_reg[10]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_11, ve_dnlp_reg[11]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_12, ve_dnlp_reg[12]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_13, ve_dnlp_reg[13]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_14, ve_dnlp_reg[14]);
+	WRITE_VPP_REG(VPP_DNLP_CTRL_15, ve_dnlp_reg[15]);
 #endif
 }
 
@@ -666,7 +666,6 @@ void ve_on_vs(vframe_t *vf)
 				lock_range_60hz_slow);
 	}
 }
-EXPORT_SYMBOL(ve_on_vs);
 
 // ***************************************************************************
 // *** IOCTL-oriented functions *********************************************
@@ -674,27 +673,27 @@ EXPORT_SYMBOL(ve_on_vs);
 
 void vpp_enable_lcd_gamma_table(void)
 {
-	WRITE_CBUS_REG_BITS(L_GAMMA_CNTL_PORT, 1, GAMMA_EN, 1);
+	WRITE_VPP_REG_BITS(L_GAMMA_CNTL_PORT, 1, GAMMA_EN, 1);
 }
 
 void vpp_disable_lcd_gamma_table(void)
 {
-	WRITE_CBUS_REG_BITS(L_GAMMA_CNTL_PORT, 0, GAMMA_EN, 1);
+	WRITE_VPP_REG_BITS(L_GAMMA_CNTL_PORT, 0, GAMMA_EN, 1);
 }
 
 void vpp_set_lcd_gamma_table(u16 *data, u32 rgb_mask)
 {
 	int i;
-	while (!(READ_CBUS_REG(L_GAMMA_CNTL_PORT) & (0x1 << ADR_RDY)));
-	WRITE_CBUS_REG(L_GAMMA_ADDR_PORT, (0x1 << H_AUTO_INC) |
+	while (!(READ_VPP_REG(L_GAMMA_CNTL_PORT) & (0x1 << ADR_RDY)));
+	WRITE_VPP_REG(L_GAMMA_ADDR_PORT, (0x1 << H_AUTO_INC) |
 	                            (0x1 << rgb_mask)   |
 	                            (0x0 << HADR));
 	for (i=0;i<256;i++){
-		while (!( READ_CBUS_REG(L_GAMMA_CNTL_PORT) & (0x1 << WR_RDY) )) ;
-		WRITE_CBUS_REG(L_GAMMA_DATA_PORT, data[i]);
+		while (!( READ_VPP_REG(L_GAMMA_CNTL_PORT) & (0x1 << WR_RDY) )) ;
+		WRITE_VPP_REG(L_GAMMA_DATA_PORT, data[i]);
 	}
-	while (!(READ_CBUS_REG(L_GAMMA_CNTL_PORT) & (0x1 << ADR_RDY)));
-	WRITE_CBUS_REG(L_GAMMA_ADDR_PORT, (0x1 << H_AUTO_INC) |
+	while (!(READ_VPP_REG(L_GAMMA_CNTL_PORT) & (0x1 << ADR_RDY)));
+	WRITE_VPP_REG(L_GAMMA_ADDR_PORT, (0x1 << H_AUTO_INC) |
 	                            (0x1 << rgb_mask)   |
 	                            (0x23 << HADR));
 }
@@ -702,25 +701,25 @@ void vpp_set_lcd_gamma_table(u16 *data, u32 rgb_mask)
 void vpp_set_rgb_ogo(struct tcon_rgb_ogo_s *p)
 {
 	// write to registers
-	WRITE_CBUS_REG(VPP_GAINOFF_CTRL0, ((p->en << 31) & 0x80000000) |
+	WRITE_VPP_REG(VPP_GAINOFF_CTRL0, ((p->en << 31) & 0x80000000) |
 	                      ((p->r_gain << 16) & 0x07ff0000) |
 	                      ((p->g_gain <<  0) & 0x000007ff));
-	WRITE_CBUS_REG(VPP_GAINOFF_CTRL1, ((p->b_gain        << 16) & 0x07ff0000) |
+	WRITE_VPP_REG(VPP_GAINOFF_CTRL1, ((p->b_gain        << 16) & 0x07ff0000) |
 	                      ((p->r_post_offset <<  0) & 0x000007ff));
-	WRITE_CBUS_REG(VPP_GAINOFF_CTRL2, ((p->g_post_offset << 16) & 0x07ff0000) |
+	WRITE_VPP_REG(VPP_GAINOFF_CTRL2, ((p->g_post_offset << 16) & 0x07ff0000) |
 	                      ((p->b_post_offset <<  0) & 0x000007ff));
-	WRITE_CBUS_REG(VPP_GAINOFF_CTRL3, ((p->r_pre_offset  << 16) & 0x07ff0000) |
+	WRITE_VPP_REG(VPP_GAINOFF_CTRL3, ((p->r_pre_offset  << 16) & 0x07ff0000) |
 	                      ((p->g_pre_offset  <<  0) & 0x000007ff));
-	WRITE_CBUS_REG(VPP_GAINOFF_CTRL4, ((p->b_pre_offset  <<  0) & 0x000007ff));
+	WRITE_VPP_REG(VPP_GAINOFF_CTRL4, ((p->b_pre_offset  <<  0) & 0x000007ff));
 }
 
 void ve_enable_dnlp(void)
 {
 	ve_en = 1;
 #ifdef NEW_DNLP_IN_SHARPNESS
-	WRITE_CBUS_REG_BITS(DNLP_EN, 1, 0, 1);
+	WRITE_VPP_REG_BITS(DNLP_EN, 1, 0, 1);
 #else
-	WRITE_CBUS_REG_BITS(VPP_VE_ENABLE_CTRL, 1, DNLP_EN_BIT, DNLP_EN_WID);
+	WRITE_VPP_REG_BITS(VPP_VE_ENABLE_CTRL, 1, DNLP_EN_BIT, DNLP_EN_WID);
 #endif
 }
 
@@ -728,9 +727,9 @@ void ve_disable_dnlp(void)
 {
 	ve_en = 0;
 #ifdef NEW_DNLP_IN_SHARPNESS
-	WRITE_CBUS_REG_BITS(DNLP_EN, 0, 0, 1);
+	WRITE_VPP_REG_BITS(DNLP_EN, 0, 0, 1);
 #else
-	WRITE_CBUS_REG_BITS(VPP_VE_ENABLE_CTRL, 0, DNLP_EN_BIT, DNLP_EN_WID);
+	WRITE_VPP_REG_BITS(VPP_VE_ENABLE_CTRL, 0, DNLP_EN_BIT, DNLP_EN_WID);
 #endif
 }
 
@@ -758,17 +757,17 @@ void ve_set_dnlp(struct ve_dnlp_s *p)
 		ve_dnlp_load_reg();
 #ifdef NEW_DNLP_IN_SHARPNESS
 		// enable dnlp
-		WRITE_CBUS_REG_BITS(DNLP_EN, 1, 0, 1);
+		WRITE_VPP_REG_BITS(DNLP_EN, 1, 0, 1);
 	}else{
 		// disable dnlp
-		WRITE_CBUS_REG_BITS(DNLP_EN, 0, 0, 1);
+		WRITE_VPP_REG_BITS(DNLP_EN, 0, 0, 1);
 	}
 #else
 	// enable dnlp
-		WRITE_CBUS_REG_BITS(VPP_VE_ENABLE_CTRL, 1, DNLP_EN_BIT, DNLP_EN_WID);
+		WRITE_VPP_REG_BITS(VPP_VE_ENABLE_CTRL, 1, DNLP_EN_BIT, DNLP_EN_WID);
 	}else{
 		// disable dnlp
-		WRITE_CBUS_REG_BITS(VPP_VE_ENABLE_CTRL, 0, DNLP_EN_BIT, DNLP_EN_WID);
+		WRITE_VPP_REG_BITS(VPP_VE_ENABLE_CTRL, 0, DNLP_EN_BIT, DNLP_EN_WID);
 	}
 #endif
 }
@@ -823,24 +822,24 @@ void ve_set_new_dnlp(struct ve_dnlp_table_s *p)
 		ve_dnlp_load_reg();
 #ifdef NEW_DNLP_IN_SHARPNESS
 		// enable dnlp
-		WRITE_CBUS_REG_BITS(DNLP_EN, 1, 0, 1);
+		WRITE_VPP_REG_BITS(DNLP_EN, 1, 0, 1);
 	}else{
 		// disable dnlp
-		WRITE_CBUS_REG_BITS(DNLP_EN, 0, 0, 1);
+		WRITE_VPP_REG_BITS(DNLP_EN, 0, 0, 1);
 	}
 #else
 		// enable dnlp
-		WRITE_CBUS_REG_BITS(VPP_VE_ENABLE_CTRL, 1, DNLP_EN_BIT, DNLP_EN_WID);
+		WRITE_VPP_REG_BITS(VPP_VE_ENABLE_CTRL, 1, DNLP_EN_BIT, DNLP_EN_WID);
 	}else{
 		// disable dnlp
-		WRITE_CBUS_REG_BITS(VPP_VE_ENABLE_CTRL, 0, DNLP_EN_BIT, DNLP_EN_WID);
+		WRITE_VPP_REG_BITS(VPP_VE_ENABLE_CTRL, 0, DNLP_EN_BIT, DNLP_EN_WID);
 	}
 #endif
 }
 
 unsigned int ve_get_vs_cnt(void)
 {
-	return (READ_CBUS_REG(VPP_VDO_MEAS_VS_COUNT_LO));
+	return (READ_VPP_REG(VPP_VDO_MEAS_VS_COUNT_LO));
 }
 
 void vpp_phase_lock_on_vs(unsigned int cycle,
@@ -849,12 +848,12 @@ void vpp_phase_lock_on_vs(unsigned int cycle,
                           unsigned int range_fast,
                           unsigned int range_slow)
 {
-	unsigned int vtotal_ori = READ_CBUS_REG(ENCL_VIDEO_MAX_LNCNT);
+	unsigned int vtotal_ori = READ_VPP_REG(ENCL_VIDEO_MAX_LNCNT);
 	unsigned int vtotal     = lock50 ? 1349 : 1124;
-	unsigned int stamp_in   = READ_CBUS_REG(VDIN_MEAS_VS_COUNT_LO);
+	unsigned int stamp_in   = READ_VPP_REG(VDIN_MEAS_VS_COUNT_LO);
 	unsigned int stamp_out  = ve_get_vs_cnt();
 	unsigned int phase      = 0;
-	unsigned int cnt = READ_CBUS_REG(ASSIST_SPARE8_REG1);
+	unsigned int cnt = READ_VPP_REG(ASSIST_SPARE8_REG1);
 	int step = 0, i = 0;
 	// get phase
 	if (stamp_out < stamp)
@@ -881,10 +880,10 @@ void vpp_phase_lock_on_vs(unsigned int cycle,
 		step = 0;
 	}
 	if (vtotal != vtotal_ori)
-		WRITE_CBUS_REG(ENCL_VIDEO_MAX_LNCNT, vtotal);
+		WRITE_VPP_REG(ENCL_VIDEO_MAX_LNCNT, vtotal);
 	if (cnt){
 		cnt--;
-		WRITE_CBUS_REG(ASSIST_SPARE8_REG1, cnt);
+		WRITE_VPP_REG(ASSIST_SPARE8_REG1, cnt);
 		if (cnt){
 			vpp_log[cnt][0] = stamp;
 			vpp_log[cnt][1] = stamp_in;
@@ -909,7 +908,7 @@ void ve_frame_size_patch(unsigned int width,unsigned int height)
 {
 	unsigned int vpp_size = height|(width << 16);
 	if(ve_size != vpp_size){
-		WRITE_CBUS_REG(VPP_VE_H_V_SIZE, vpp_size);
+		WRITE_VPP_REG(VPP_VE_H_V_SIZE, vpp_size);
 		ve_size = vpp_size;
 	}
 }
@@ -1002,24 +1001,24 @@ void lvds_freq_process(void)
 	/* lvds freq 50Hz/60Hz */
 	if (frame_lock_freq == 1){//50 hz
 		// panel freq is 60Hz => change back to 50Hz
-		if (READ_CBUS_REG(ENCP_VIDEO_MAX_LNCNT) < 1237) // (1124 + 1349 +1) / 2
-			WRITE_CBUS_REG(ENCP_VIDEO_MAX_LNCNT, 1349);
+		if (READ_VPP_REG(ENCP_VIDEO_MAX_LNCNT) < 1237) // (1124 + 1349 +1) / 2
+			WRITE_VPP_REG(ENCP_VIDEO_MAX_LNCNT, 1349);
 	}
 	else if (frame_lock_freq == 2){//60 hz
 		// panel freq is 50Hz => change back to 60Hz
-		if(READ_CBUS_REG(ENCP_VIDEO_MAX_LNCNT) >= 1237) // (1124 + 1349 + 1) / 2
-			WRITE_CBUS_REG(ENCP_VIDEO_MAX_LNCNT, 1124);
+		if(READ_VPP_REG(ENCP_VIDEO_MAX_LNCNT) >= 1237) // (1124 + 1349 + 1) / 2
+			WRITE_VPP_REG(ENCP_VIDEO_MAX_LNCNT, 1124);
 	}
 	else if (frame_lock_freq == 0){
 		/* lvds freq 50Hz/60Hz */
 		if (vecm_latch_flag & FLAG_LVDS_FREQ_SW){  //50 hz
 			// panel freq is 60Hz => change back to 50Hz
-			if (READ_CBUS_REG(ENCP_VIDEO_MAX_LNCNT) < 1237) // (1124 + 1349 +1) / 2
-				WRITE_CBUS_REG(ENCP_VIDEO_MAX_LNCNT, 1349);
+			if (READ_VPP_REG(ENCP_VIDEO_MAX_LNCNT) < 1237) // (1124 + 1349 +1) / 2
+				WRITE_VPP_REG(ENCP_VIDEO_MAX_LNCNT, 1349);
 		}else{	 //60 hz
 			// panel freq is 50Hz => change back to 60Hz
-			if (READ_CBUS_REG(ENCP_VIDEO_MAX_LNCNT) >= 1237) // (1124 + 1349 + 1) / 2
-				WRITE_CBUS_REG(ENCP_VIDEO_MAX_LNCNT, 1124);
+			if (READ_VPP_REG(ENCP_VIDEO_MAX_LNCNT) >= 1237) // (1124 + 1349 + 1) / 2
+				WRITE_VPP_REG(ENCP_VIDEO_MAX_LNCNT, 1124);
 		}
 	}
 #endif
diff --git a/drivers/amlogic/amvecm/amve.h b/drivers/amlogic/amvecm/amve.h
index 4474aa2d6c8c..dfdc3cf0e7c7 100755
--- a/drivers/amlogic/amvecm/amve.h
+++ b/drivers/amlogic/amvecm/amve.h
@@ -17,16 +17,16 @@
 #include "linux/amlogic/vframe.h"
 #include "linux/amlogic/ve.h"
 
-#if ((MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8))//&&(MESON_CPU_TYPE != MESON_CPU_TYPE_MESONG9TV))
-#undef WRITE_CBUS_REG
-#undef WRITE_CBUS_REG_BITS
-#undef READ_CBUS_REG
-#undef READ_CBUS_REG_BITS
-
-#define WRITE_CBUS_REG(x,val)				WRITE_VCBUS_REG(x,val)
-#define WRITE_CBUS_REG_BITS(x,val,start,length)		WRITE_VCBUS_REG_BITS(x,val,start,length)
-#define READ_CBUS_REG(x)				READ_VCBUS_REG(x)
-#define READ_CBUS_REG_BITS(x,start,length)		READ_VCBUS_REG_BITS(x,start,length)
+#if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8)
+#define WRITE_VPP_REG(x,val)				WRITE_VCBUS_REG(x,val)
+#define WRITE_VPP_REG_BITS(x,val,start,length)		WRITE_VCBUS_REG_BITS(x,val,start,length)
+#define READ_VPP_REG(x)					READ_VCBUS_REG(x)
+#define READ_VPP_REG_BITS(x,start,length)		READ_VCBUS_REG_BITS(x,start,length)
+#else
+#define WRITE_VPP_REG(x,val)				WRITE_CBUS_REG(x,val)
+#define WRITE_VPP_REG_BITS(x,val,start,length)		WRITE_CBUS_REG_BITS(x,val,start,length)
+#define READ_VPP_REG(x)					READ_CBUS_REG(x)
+#define READ_VPP_REG_BITS(x,start,length)		READ_CBUS_REG_BITS(x,start,length)
 #endif
 
 typedef struct ve_regs_s {
@@ -44,7 +44,7 @@ typedef struct ve_regs_s {
 } ve_regs_t;
 
 
-//void ve_on_vs(vframe_t *vf, int* change_notify);
+void ve_on_vs(vframe_t *vf);
 
 void ve_set_bext(struct ve_bext_s *p);
 void ve_set_dnlp(struct ve_dnlp_s *p);
diff --git a/drivers/amlogic/amvecm/amvecm.c b/drivers/amlogic/amvecm/amvecm.c
index 82b9e668a342..a539f0865871 100755
--- a/drivers/amlogic/amvecm/amvecm.c
+++ b/drivers/amlogic/amvecm/amvecm.c
@@ -68,13 +68,12 @@ module_param(vecm_latch_flag, uint, 0664);
 MODULE_PARM_DESC(vecm_latch_flag, "\n vecm_latch_flag \n");
 
 #if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
-unsigned int vlock_en = 0;
-module_param(vlock_en, uint, 0664);
-MODULE_PARM_DESC(vlock_en, "\n vlock_en \n");
+#define VLOCK_MODE_ENC          0
+#define VLOCK_MODE_PLL         	1
 
-unsigned int sync_3d_en = 0;
-module_param(sync_3d_en, uint, 0664);
-MODULE_PARM_DESC(sync_3d_en, "\n 3d_sync_en \n");
+unsigned int vlock_mode = VLOCK_MODE_ENC;//0:enc;1:pll
+module_param(vlock_mode, uint, 0664);
+MODULE_PARM_DESC(vlock_mode, "\n vlock_mode \n");
 
 unsigned int sync_3d_h_start = 0;
 module_param(sync_3d_h_start, uint, 0664);
@@ -100,10 +99,6 @@ unsigned int sync_3d_out_inv = 0;
 module_param(sync_3d_out_inv, uint, 0664);
 MODULE_PARM_DESC(sync_3d_out_inv, "\n sync_3d_out_inv \n");
 
-unsigned int sync_3d_black_en = 0;
-module_param(sync_3d_black_en, uint, 0664);
-MODULE_PARM_DESC(sync_3d_black_en, "\n sync_3d_black_en \n");
-
 unsigned int sync_3d_black_color = 0x008080;//yuv black
 module_param(sync_3d_black_color, uint, 0664);
 MODULE_PARM_DESC(sync_3d_black_color, "\n sync_3d_black_color \n");
@@ -142,11 +137,11 @@ extern struct tcon_rgb_ogo_s     video_rgb_ogo;
 static void amvecm_size_patch(void)
 {
 	unsigned int hs, he, vs, ve;
-	hs = READ_CBUS_REG_BITS(VPP_POSTBLEND_VD1_H_START_END,16,12);
-	he = READ_CBUS_REG_BITS(VPP_POSTBLEND_VD1_H_START_END,0,12);
+	hs = READ_VPP_REG_BITS(VPP_POSTBLEND_VD1_H_START_END,16,12);
+	he = READ_VPP_REG_BITS(VPP_POSTBLEND_VD1_H_START_END,0,12);
 
-	vs = READ_CBUS_REG_BITS(VPP_POSTBLEND_VD1_V_START_END,16,12);
-	ve = READ_CBUS_REG_BITS(VPP_POSTBLEND_VD1_V_START_END,0,12);
+	vs = READ_VPP_REG_BITS(VPP_POSTBLEND_VD1_V_START_END,16,12);
+	ve = READ_VPP_REG_BITS(VPP_POSTBLEND_VD1_V_START_END,0,12);
 #if ((MESON_CPU_TYPE==MESON_CPU_TYPE_MESON8)||(MESON_CPU_TYPE==MESON_CPU_TYPE_MESON8B))
 	if(cm_en)
 #endif
@@ -165,7 +160,7 @@ static void vd1_brightness_contrast(signed int brightness, signed int contrast)
 	unsigned int gc0 =    0, gc1 =    0, gc2 =    0, gc3 =    0, gc4 =   0;
 	unsigned int a01 =    0, a_2 =    0, p01 =    0, p_2 =    0;
 	// enable vd0_csc
-	unsigned int ori = READ_CBUS_REG(VPP_MATRIX_CTRL) | 0x00000020;
+	unsigned int ori = READ_VPP_REG(VPP_MATRIX_CTRL) | 0x00000020;
 	// point to vd0_csc
 	unsigned int ctl = (ori & 0xfffffcff) | 0x00000100;
 	po0 += brightness >> 1;
@@ -209,17 +204,17 @@ static void vd1_brightness_contrast(signed int brightness, signed int contrast)
 	p01 = ((po0 << 16) & 0x07ff0000) | ((po1 <<  0) & 0x000007ff);
 	p_2 = ((po2 <<  0) & 0x000007ff);
 	#endif
-	WRITE_CBUS_REG(VPP_MATRIX_CTRL         , ctl);
-	WRITE_CBUS_REG(VPP_MATRIX_COEF00_01    , gc0);
-	WRITE_CBUS_REG(VPP_MATRIX_COEF02_10    , gc1);
-	WRITE_CBUS_REG(VPP_MATRIX_COEF11_12    , gc2);
-	WRITE_CBUS_REG(VPP_MATRIX_COEF20_21    , gc3);
-	WRITE_CBUS_REG(VPP_MATRIX_COEF22       , gc4);
-	WRITE_CBUS_REG(VPP_MATRIX_PRE_OFFSET0_1, a01);
-	WRITE_CBUS_REG(VPP_MATRIX_PRE_OFFSET2  , a_2);
-	WRITE_CBUS_REG(VPP_MATRIX_OFFSET0_1    , p01);
-	WRITE_CBUS_REG(VPP_MATRIX_OFFSET2      , p_2);
-	WRITE_CBUS_REG(VPP_MATRIX_CTRL         , ori);
+	WRITE_VPP_REG(VPP_MATRIX_CTRL         , ctl);
+	WRITE_VPP_REG(VPP_MATRIX_COEF00_01    , gc0);
+	WRITE_VPP_REG(VPP_MATRIX_COEF02_10    , gc1);
+	WRITE_VPP_REG(VPP_MATRIX_COEF11_12    , gc2);
+	WRITE_VPP_REG(VPP_MATRIX_COEF20_21    , gc3);
+	WRITE_VPP_REG(VPP_MATRIX_COEF22       , gc4);
+	WRITE_VPP_REG(VPP_MATRIX_PRE_OFFSET0_1, a01);
+	WRITE_VPP_REG(VPP_MATRIX_PRE_OFFSET2  , a_2);
+	WRITE_VPP_REG(VPP_MATRIX_OFFSET0_1    , p01);
+	WRITE_VPP_REG(VPP_MATRIX_OFFSET2      , p_2);
+	WRITE_VPP_REG(VPP_MATRIX_CTRL         , ori);
 }
 
 static void amvecm_bricon_process(void)
@@ -233,40 +228,39 @@ static void amvecm_bricon_process(void)
 #if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
 static void amvecm_vlock_process(void)
 {
-	return;
-	if(vlock_en == 0){
-		WRITE_CBUS_REG_BITS(VPU_VLOCK_CTRL,0,31,1);//disable vid_lock_en
+	if(vecm_latch_flag & FLAG_VLOCK_DIS){
+		WRITE_VPP_REG_BITS(VPU_VLOCK_CTRL,0,31,1);//disable vid_lock_en
+		vecm_latch_flag &= ~FLAG_VLOCK_DIS;
 		return;
 	}
-	WRITE_CBUS_REG(HHI_VID_LOCK_CLK_CNTL,0x80);
-	if (vecm_latch_flag & FLAG_VLOCK_ENC){
-		am_set_regmap(&vlock_enc);
-		vecm_latch_flag &= ~FLAG_VLOCK_ENC;
-	}
-	if (vecm_latch_flag & FLAG_VLOCK_PLL){
-		am_set_regmap(&vlock_pll);
-		vecm_latch_flag &= ~FLAG_VLOCK_PLL;
+	if(vecm_latch_flag & FLAG_VLOCK_EN){
+		WRITE_CBUS_REG(HHI_VID_LOCK_CLK_CNTL,0x80);
+		if (vlock_mode == VLOCK_MODE_ENC)
+			am_set_regmap(&vlock_enc);
+		if (vlock_mode == VLOCK_MODE_PLL)
+			am_set_regmap(&vlock_pll);
+		WRITE_VPP_REG(ENCL_MAX_LINE_SWITCH_POINT,READ_VPP_REG(ENCL_MAX_LINE_SWITCH_POINT)|0x2000);
+		vecm_latch_flag &= ~FLAG_VLOCK_EN;
 	}
-	WRITE_CBUS_REG(ENCL_MAX_LINE_SWITCH_POINT,READ_CBUS_REG(ENCL_MAX_LINE_SWITCH_POINT)|0x2000);
 }
 static void amvecm_3d_black_process(void)
 {
 	if(vecm_latch_flag & FLAG_3D_BLACK_DIS){
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,0,31,1);//disable reg_3dsync_enable
-		WRITE_CBUS_REG_BITS(VIU_MISC_CTRL0,0,8,1);
-		WRITE_CBUS_REG_BITS(VPP_BLEND_ONECOLOR_CTRL,0,26,1);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,0,13,1);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC2,0,31,1);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,0,31,1);//disable reg_3dsync_enable
+		WRITE_VPP_REG_BITS(VIU_MISC_CTRL0,0,8,1);
+		WRITE_VPP_REG_BITS(VPP_BLEND_ONECOLOR_CTRL,0,26,1);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,0,13,1);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC2,0,31,1);
 		vecm_latch_flag &= ~FLAG_3D_BLACK_DIS;
 	}
 	if(vecm_latch_flag & FLAG_3D_BLACK_EN){
-		WRITE_CBUS_REG_BITS(VIU_MISC_CTRL0,1,8,1);
-		WRITE_CBUS_REG_BITS(VPP_BLEND_ONECOLOR_CTRL,1,26,1);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC2,1,31,1);
-		WRITE_CBUS_REG_BITS(VPP_BLEND_ONECOLOR_CTRL,sync_3d_black_color&0xffffff,0,24);
+		WRITE_VPP_REG_BITS(VIU_MISC_CTRL0,1,8,1);
+		WRITE_VPP_REG_BITS(VPP_BLEND_ONECOLOR_CTRL,1,26,1);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC2,1,31,1);
+		WRITE_VPP_REG_BITS(VPP_BLEND_ONECOLOR_CTRL,sync_3d_black_color&0xffffff,0,24);
 		if(sync_3d_sync_to_vbo)
-			WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,1,13,1);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,1,31,1);//enable
+			WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,1,13,1);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,1,31,1);//enable
 		vecm_latch_flag &= ~FLAG_3D_BLACK_EN;
 	}
 }
@@ -274,17 +268,17 @@ static void amvecm_3d_sync_process(void)
 {
 
 	if(vecm_latch_flag & FLAG_3D_SYNC_DIS){
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,0,31,1);//disable reg_3dsync_enable
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,0,31,1);//disable reg_3dsync_enable
 		vecm_latch_flag &= ~FLAG_3D_SYNC_DIS;
 	}
 	if(vecm_latch_flag & FLAG_3D_SYNC_EN){
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC2,sync_3d_h_start,0,13);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC2,sync_3d_h_end,16,13);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_v_start,0,13);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_v_end,16,13);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_polarity,29,1);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_out_inv,15,1);
-		WRITE_CBUS_REG_BITS(VPU_VPU_3D_SYNC1,1,31,1);//enable
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC2,sync_3d_h_start,0,13);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC2,sync_3d_h_end,16,13);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_v_start,0,13);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_v_end,16,13);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_polarity,29,1);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,sync_3d_out_inv,15,1);
+		WRITE_VPP_REG_BITS(VPU_VPU_3D_SYNC1,1,31,1);//enable
 		vecm_latch_flag &= ~FLAG_3D_SYNC_EN;
 	}
 }
@@ -305,7 +299,12 @@ void amvecm_video_latch(void)
 	amvecm_3d_black_process();
 #endif
 }
-EXPORT_SYMBOL(amvecm_video_latch);
+void amvecm_on_vs(vframe_t *vf)
+{
+	amvecm_video_latch();
+	ve_on_vs(vf);
+}
+EXPORT_SYMBOL(amvecm_on_vs);
 
 static int amvecm_open(struct inode *inode, struct file *file)
 {
@@ -345,9 +344,9 @@ static long amvecm_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 		}
 		if(copy_from_user(&amregs_ext, (void __user *)arg, sizeof(struct am_regs_s))) {
 			pr_amvecm_dbg(KERN_ERR "[amcm..]0x%x load reg errors: can't get buffer lenght\n",FLAG_REG_MAP0);
-			ret = 0;
-		}
-		ret = cm_load_reg(&amregs_ext);
+			ret = -EFAULT;
+		} else
+			ret = cm_load_reg(&amregs_ext);
 		break;
 	case AMVECM_IOC_VE_DNLP_EN:
 		vecm_latch_flag |= FLAG_VE_DNLP_EN;
@@ -509,7 +508,7 @@ static ssize_t amvecm_contrast_store(struct class *cla, struct class_attribute *
 
 static ssize_t amvecm_saturation_hue_show(struct class *cla, struct class_attribute *attr, char *buf)
 {
-	return sprintf(buf, "0x%x\n", READ_CBUS_REG(VPP_VADJ1_MA_MB));
+	return sprintf(buf, "0x%x\n", READ_VPP_REG(VPP_VADJ1_MA_MB));
 }
 
 static ssize_t amvecm_saturation_hue_store(struct class *cla, struct class_attribute *attr, const char *buf,size_t count)
@@ -521,15 +520,15 @@ static ssize_t amvecm_saturation_hue_store(struct class *cla, struct class_attri
 	if ((r != 1) || (mab&0xfc00fc00)) {
 		return -EINVAL;
 	}
-	WRITE_CBUS_REG(VPP_VADJ1_MA_MB, mab);
+	WRITE_VPP_REG(VPP_VADJ1_MA_MB, mab);
 	mc = (s16)((mab<<22)>>22); // mc = -mb
 	mc = 0 - mc;
 	if (mc> 511) mc= 511;
 	if (mc<-512) mc = -512;
 	md = (s16)((mab<<6)>>22);  // md =  ma;
 	mab = ((mc&0x3ff)<<16)|(md&0x3ff);
-	WRITE_CBUS_REG(VPP_VADJ1_MC_MD, mab);
-	WRITE_CBUS_REG_BITS(VPP_VADJ_CTRL, 1, 0, 1);
+	WRITE_VPP_REG(VPP_VADJ1_MC_MD, mab);
+	WRITE_VPP_REG_BITS(VPP_VADJ_CTRL, 1, 0, 1);
 	pr_amvecm_dbg(KERN_INFO "%s set video_saturation_hue OK!!!\n", __func__);
 	return count;
 }
@@ -598,15 +597,15 @@ static ssize_t amvecm_saturation_hue_pre_store(struct class *cla, struct class_a
 	if (mb < -512) mb = -512;
 	mab =  ((ma & 0x3ff) << 16) | (mb & 0x3ff);
 	printk("\n[amvideo..] saturation_pre:%d hue_pre:%d mab:%x\n", saturation_pre,hue_pre,mab);
-	WRITE_CBUS_REG(VPP_VADJ2_MA_MB, mab);
+	WRITE_VPP_REG(VPP_VADJ2_MA_MB, mab);
 	mc = (s16)((mab<<22)>>22); // mc = -mb
 	mc = 0 - mc;
 	if (mc > 511)  mc = 511;
 	if (mc < -512) mc = -512;
 	md = (s16)((mab<<6)>>22);  // md =	ma;
 	mab = ((mc&0x3ff)<<16)|(md&0x3ff);
-	WRITE_CBUS_REG(VPP_VADJ1_MC_MD, mab);
-	WRITE_CBUS_REG_BITS(VPP_VADJ_CTRL, 1, 0, 1);
+	WRITE_VPP_REG(VPP_VADJ1_MC_MD, mab);
+	WRITE_VPP_REG_BITS(VPP_VADJ_CTRL, 1, 0, 1);
 	return count;
 }
 
@@ -647,15 +646,15 @@ static ssize_t amvecm_saturation_hue_post_store(struct class *cla, struct class_
 	if (mb < -512) mb = -512;
 	mab =  ((ma & 0x3ff) << 16) | (mb & 0x3ff);
 	printk("\n[amvideo..] saturation_post:%d hue_post:%d mab:%x\n", saturation_post,hue_post,mab);
-	WRITE_CBUS_REG(VPP_VADJ2_MA_MB, mab);
+	WRITE_VPP_REG(VPP_VADJ2_MA_MB, mab);
 	mc = (s16)((mab<<22)>>22); // mc = -mb
 	mc = 0 - mc;
 	if (mc > 511)  mc = 511;
 	if (mc < -512) mc = -512;
 	md = (s16)((mab<<6)>>22);  // md =	ma;
 	mab = ((mc&0x3ff)<<16)|(md&0x3ff);
-	WRITE_CBUS_REG(VPP_VADJ2_MC_MD, mab);
-	WRITE_CBUS_REG_BITS(VPP_VADJ_CTRL, 1, 2, 1);
+	WRITE_VPP_REG(VPP_VADJ2_MC_MD, mab);
+	WRITE_VPP_REG_BITS(VPP_VADJ_CTRL, 1, 2, 1);
 	return count;
 }
 
@@ -704,29 +703,16 @@ static ssize_t amvecm_cm2_store(struct class *cls,
 		data[2] = simple_strtol(parm[4], NULL, 16);
 		data[3] = simple_strtol(parm[5], NULL, 16);
 		data[4] = simple_strtol(parm[6], NULL, 16);
-#if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr);
-		aml_write_reg32(VCBUS_REG_ADDR(data_port), data[0]);
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr + 1);
-		aml_write_reg32(VCBUS_REG_ADDR(data_port), data[1]);
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr + 2);
-		aml_write_reg32(VCBUS_REG_ADDR(data_port), data[2]);
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr + 3);
-		aml_write_reg32(VCBUS_REG_ADDR(data_port), data[3]);
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr + 4);
-		aml_write_reg32(VCBUS_REG_ADDR(data_port), data[4]);
-#else
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr);
-		aml_write_reg32(CBUS_REG_ADDR(data_port), data[0]);
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr + 1);
-		aml_write_reg32(CBUS_REG_ADDR(data_port), data[1]);
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr + 2);
-		aml_write_reg32(CBUS_REG_ADDR(data_port), data[2]);
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr + 3);
-		aml_write_reg32(CBUS_REG_ADDR(data_port), data[3]);
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr + 4);
-		aml_write_reg32(CBUS_REG_ADDR(data_port), data[4]);
-#endif
+		WRITE_VPP_REG(addr_port, addr);
+		WRITE_VPP_REG(data_port, data[0]);
+		WRITE_VPP_REG(addr_port, addr + 1);
+		WRITE_VPP_REG(data_port, data[1]);
+		WRITE_VPP_REG(addr_port, addr + 2);
+		WRITE_VPP_REG(data_port, data[2]);
+		WRITE_VPP_REG(addr_port, addr + 3);
+		WRITE_VPP_REG(data_port, data[3]);
+		WRITE_VPP_REG(addr_port, addr + 4);
+		WRITE_VPP_REG(data_port, data[4]);
 		pr_info("wm: [0x%x] <-- 0x0 \n",addr);
 	}
 	else if ((parm[0][0] == 'r') && parm[0][1] == 'm' ) {
@@ -738,49 +724,26 @@ static ssize_t amvecm_cm2_store(struct class *cls,
 		}
 		addr = simple_strtol(parm[1], NULL, 16);
 		addr = addr - addr%8;
-#if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr);
-		data[0] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[0] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[0] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr+1);
-		data[1] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[1] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[1] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr+2);
-		data[2] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[2] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[2] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr+3);
-		data[3] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[3] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[3] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		aml_write_reg32(VCBUS_REG_ADDR(addr_port), addr+4);
-		data[4] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[4] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-		data[4] = aml_read_reg32(VCBUS_REG_ADDR(data_port));
-#else
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr);
-		data[0] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[0] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[0] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr+1);
-		data[1] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[1] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[1] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr+2);
-		data[2] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[2] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[2] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr+3);
-		data[3] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[3] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[3] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		aml_write_reg32(CBUS_REG_ADDR(addr_port), addr+4);
-		data[4] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[4] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-		data[4] = aml_read_reg32(CBUS_REG_ADDR(data_port));
-#endif
+		WRITE_VPP_REG(addr_port, addr);
+		data[0] = READ_VPP_REG(data_port);
+		data[0] = READ_VPP_REG(data_port);
+		data[0] = READ_VPP_REG(data_port);
+		WRITE_VPP_REG(addr_port, addr+1);
+		data[1] = READ_VPP_REG(data_port);
+		data[1] = READ_VPP_REG(data_port);
+		data[1] = READ_VPP_REG(data_port);
+		WRITE_VPP_REG(addr_port, addr+2);
+		data[2] = READ_VPP_REG(data_port);
+		data[2] = READ_VPP_REG(data_port);
+		data[2] = READ_VPP_REG(data_port);
+		WRITE_VPP_REG(addr_port, addr+3);
+		data[3] = READ_VPP_REG(data_port);
+		data[3] = READ_VPP_REG(data_port);
+		data[3] = READ_VPP_REG(data_port);
+		WRITE_VPP_REG(addr_port, addr+4);
+		data[4] = READ_VPP_REG(data_port);
+		data[4] = READ_VPP_REG(data_port);
+		data[4] = READ_VPP_REG(data_port);
 		pr_info("rm:[0x%x]-->[0x%x][0x%x][0x%x][0x%x][0x%x] \n",addr, data[0],data[1],data[2],data[3],data[4]);
 	} else {
 		pr_info("invalid command\n");
@@ -879,37 +842,38 @@ static ssize_t amvecm_gamma_store(struct class *cls,
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV)
 void init_sharpness(void)
 {
-	WRITE_CBUS_REG(VPP_VE_ENABLE_CTRL, 0x2);
-	WRITE_CBUS_REG(NR_GAUSSIAN_MODE, 0x0);
-	WRITE_CBUS_REG(PK_HVCON_LPF_MODE, 0x11111111);
-	WRITE_CBUS_REG(PK_CON_2CIRHPGAIN_LIMIT, 0x05600500);
-	WRITE_CBUS_REG(PK_CON_2CIRBPGAIN_LIMIT, 0x05280500);
-	WRITE_CBUS_REG(PK_CON_2DRTHPGAIN_LIMIT, 0x05600500);
-	WRITE_CBUS_REG(PK_CON_2DRTBPGAIN_LIMIT, 0x05280500);
-
-	WRITE_CBUS_REG(PK_CIRFB_BLEND_GAIN, 0x8f808f80);
-	WRITE_CBUS_REG(NR_ALP0_MIN_MAX, 0x003f003f);
-	WRITE_CBUS_REG(PK_ALP2_MIERR_CORING, 0x00010101);
-	WRITE_CBUS_REG(PK_ALP2_ERR2CURV_TH_RATE, 0x50504010);
-	WRITE_CBUS_REG(PK_FINALGAIN_HP_BP, 0x00002820);
-	WRITE_CBUS_REG(PK_OS_STATIC, 0x22014014);
-	WRITE_CBUS_REG(PK_DRT_SAD_MISC, 0x18180418);
-	WRITE_CBUS_REG(NR_TI_DNLP_BLEND, 0x00000406);
-	WRITE_CBUS_REG(LTI_CTI_DF_GAIN, 0x18181818);
-	WRITE_CBUS_REG(LTI_CTI_DIR_AC_DBG, 0x57ff0000);
-	WRITE_CBUS_REG(HCTI_FLT_CLP_DC, 0x1a555310);
-	WRITE_CBUS_REG(HCTI_BST_CORE, 0x05050503);
-	WRITE_CBUS_REG(HCTI_CON_2_GAIN_0, 0x28193c00);
-	WRITE_CBUS_REG(HLTI_FLT_CLP_DC, 0x19552104);
-	WRITE_CBUS_REG(HLTI_BST_GAIN, 0x20201c0c);
-	WRITE_CBUS_REG(HLTI_CON_2_GAIN_0, 0x24193c5a);
-	WRITE_CBUS_REG(VLTI_FLT_CON_CLP, 0x00006a90);
-	WRITE_CBUS_REG(VLTI_CON_2_GAIN_0, 0x193c0560);
-	WRITE_CBUS_REG(VCTI_FLT_CON_CLP, 0x00006a90);
-	WRITE_CBUS_REG(VCTI_BST_GAIN, 0x00101010);
-	WRITE_CBUS_REG(VCTI_BST_CORE, 0x00050503);
-	WRITE_CBUS_REG(PK_CIRFB_BP_CORING, 0x00043f04);
-	WRITE_CBUS_REG(PK_DRTFB_HP_CORING, 0x00043f04);
+	WRITE_VPP_REG_BITS(VPP_VE_ENABLE_CTRL, 1,1,1);
+	WRITE_VPP_REG(NR_GAUSSIAN_MODE, 0x0);
+	WRITE_VPP_REG(PK_HVCON_LPF_MODE, 0x11111111);
+	WRITE_VPP_REG(PK_CON_2CIRHPGAIN_LIMIT, 0x05600500);
+	WRITE_VPP_REG(PK_CON_2CIRBPGAIN_LIMIT, 0x05280500);
+	WRITE_VPP_REG(PK_CON_2DRTHPGAIN_LIMIT, 0x05600500);
+	WRITE_VPP_REG(PK_CON_2DRTBPGAIN_LIMIT, 0x05280500);
+
+	WRITE_VPP_REG(PK_CIRFB_BLEND_GAIN, 0x8f808f80);
+	WRITE_VPP_REG(NR_ALP0_MIN_MAX, 0x003f003f);
+	WRITE_VPP_REG(PK_ALP2_MIERR_CORING, 0x00010101);
+	WRITE_VPP_REG(PK_ALP2_ERR2CURV_TH_RATE, 0x50504010);
+	WRITE_VPP_REG(PK_FINALGAIN_HP_BP, 0x00002820);
+	WRITE_VPP_REG(PK_OS_STATIC, 0x22014014);
+	WRITE_VPP_REG(PK_DRT_SAD_MISC, 0x18180418);
+	WRITE_VPP_REG(NR_TI_DNLP_BLEND, 0x00000406);
+	WRITE_VPP_REG(LTI_CTI_DF_GAIN, 0x18181818);
+	WRITE_VPP_REG(LTI_CTI_DIR_AC_DBG, 0x57ff0000);
+	WRITE_VPP_REG(HCTI_FLT_CLP_DC, 0x1a555310);
+	WRITE_VPP_REG(HCTI_BST_CORE, 0x05050503);
+	WRITE_VPP_REG(HCTI_CON_2_GAIN_0, 0x28193c00);
+	WRITE_VPP_REG(HLTI_FLT_CLP_DC, 0x19552104);
+	WRITE_VPP_REG(HLTI_BST_GAIN, 0x20201c0c);
+	WRITE_VPP_REG(HLTI_CON_2_GAIN_0, 0x24193c5a);
+	WRITE_VPP_REG(VLTI_FLT_CON_CLP, 0x00006a90);
+	WRITE_VPP_REG(VLTI_CON_2_GAIN_0, 0x193c0560);
+	WRITE_VPP_REG(VCTI_FLT_CON_CLP, 0x00006a90);
+	WRITE_VPP_REG(VCTI_BST_GAIN, 0x00101010);
+	WRITE_VPP_REG(VCTI_BST_CORE, 0x00050503);
+	WRITE_VPP_REG(PK_CIRFB_BP_CORING, 0x00043f04);
+	WRITE_VPP_REG(PK_DRTFB_HP_CORING, 0x00043f04);
+	WRITE_VPP_REG(SHARP_HVBLANK_NUM, 0x00003c3c);
 	printk("**********sharpness init ok!*********\n");
 }
 #endif
diff --git a/drivers/amlogic/amvecm/amvecm_vlock_regmap.h b/drivers/amlogic/amvecm/amvecm_vlock_regmap.h
index 95c5abba7181..f3ee6911d2bc 100755
--- a/drivers/amlogic/amvecm/amvecm_vlock_regmap.h
+++ b/drivers/amlogic/amvecm/amvecm_vlock_regmap.h
@@ -20,26 +20,26 @@ static am_regs_t vlock_enc={
 	20,
 	{
 /* optimize */
-{REG_TYPE_CBUS,	0x3000,	    0xffffffff,	0xE0f50f1b  },
-{REG_TYPE_CBUS, 0x3001,     0xffffffff, 0x41E3c3c   },
-{REG_TYPE_CBUS, 0x3002,     0xffffffff, 0x6000000   },
-{REG_TYPE_CBUS, 0x3003,     0xffffffff, 0x40280280  },
-{REG_TYPE_CBUS, 0x3004,     0xffffffff, 0x280280    },
-{REG_TYPE_CBUS, 0x3005,     0xffffffff, 0x8020000   },
-{REG_TYPE_CBUS, 0x3006,     0xffffffff, 0x0008000   },
-{REG_TYPE_CBUS, 0x3007,     0xffffffff, 0x6000000   },
-{REG_TYPE_CBUS, 0x3008,     0xffffffff, 0x6000000   },
-{REG_TYPE_CBUS, 0x3009,     0xffffffff, 0x0008000   },
-{REG_TYPE_CBUS, 0x300a,     0xffffffff, 0x8000000   },
-{REG_TYPE_CBUS, 0x300b,     0xffffffff, 0x0008000   },
-{REG_TYPE_CBUS, 0x300c,     0xffffffff, 0xa000000   },
-{REG_TYPE_CBUS, 0x300d,     0xffffffff, 0x0004000   },
-{REG_TYPE_CBUS, 0x3010,     0xffffffff, 0x20001000  },
-{REG_TYPE_CBUS, 0x3016,     0xffffffff, 0x18000     },
-{REG_TYPE_CBUS, 0x3017,     0xffffffff, 0x01080     },
-{REG_TYPE_CBUS, 0x301d,     0xffffffff, 0x30501080  },
-{REG_TYPE_CBUS, 0x301e,     0xffffffff, 0x7	    },
-{REG_TYPE_CBUS, 0x301f,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS, 0x3000,     0xffffffff, 0xE0f50f1b  },
+{REG_TYPE_VCBUS, 0x3001,     0xffffffff, 0x41E3c3c   },
+{REG_TYPE_VCBUS, 0x3002,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS, 0x3003,     0xffffffff, 0x40280280  },
+{REG_TYPE_VCBUS, 0x3004,     0xffffffff, 0x280280    },
+{REG_TYPE_VCBUS, 0x3005,     0xffffffff, 0x8020000   },
+{REG_TYPE_VCBUS, 0x3006,     0xffffffff, 0x0008000   },
+{REG_TYPE_VCBUS, 0x3007,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS, 0x3008,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS, 0x3009,     0xffffffff, 0x0008000   },
+{REG_TYPE_VCBUS, 0x300a,     0xffffffff, 0x8000000   },
+{REG_TYPE_VCBUS, 0x300b,     0xffffffff, 0x0008000   },
+{REG_TYPE_VCBUS, 0x300c,     0xffffffff, 0xa000000   },
+{REG_TYPE_VCBUS, 0x300d,     0xffffffff, 0x0004000   },
+{REG_TYPE_VCBUS, 0x3010,     0xffffffff, 0x20001000  },
+{REG_TYPE_VCBUS, 0x3016,     0xffffffff, 0x18000     },
+{REG_TYPE_VCBUS, 0x3017,     0xffffffff, 0x01080     },
+{REG_TYPE_VCBUS, 0x301d,     0xffffffff, 0x30501080  },
+{REG_TYPE_VCBUS, 0x301e,     0xffffffff, 0x7	    },
+{REG_TYPE_VCBUS, 0x301f,     0xffffffff, 0x6000000   },
 {0}
 	}
 };
@@ -47,26 +47,26 @@ static am_regs_t vlock_pll={
 	20,
 	{
 /* optimize */
-{REG_TYPE_CBUS,	0x3000,	    0xffffffff,	0xE0f50f1b  },
-{REG_TYPE_CBUS, 0x3001,     0xffffffff, 0x4013c3c   },
-{REG_TYPE_CBUS, 0x3002,     0xffffffff, 0x6000000   },
-{REG_TYPE_CBUS, 0x3003,     0xffffffff, 0x40240280  },
-{REG_TYPE_CBUS, 0x3004,     0xffffffff, 0x240280    },
-{REG_TYPE_CBUS, 0x3005,     0xffffffff, 0x8020000   },
-{REG_TYPE_CBUS, 0x3006,     0xffffffff, 0x0100000   },
-{REG_TYPE_CBUS, 0x3007,     0xffffffff, 0x6000000   },
-{REG_TYPE_CBUS, 0x3008,     0xffffffff, 0x6000000   },
-{REG_TYPE_CBUS, 0x3009,     0xffffffff, 0x0100000   },
-{REG_TYPE_CBUS, 0x300a,     0xffffffff, 0x8000000   },
-{REG_TYPE_CBUS, 0x300b,     0xffffffff, 0x0100000   },
-{REG_TYPE_CBUS, 0x300c,     0xffffffff, 0x0100000   },
-{REG_TYPE_CBUS, 0x300d,     0xffffffff, 0x0000100   },
-{REG_TYPE_CBUS, 0x3010,     0xffffffff, 0x20001000  },
-{REG_TYPE_CBUS, 0x3016,     0xffffffff, 0x81eff     },
-{REG_TYPE_CBUS, 0x3017,     0xffffffff, 0x01080     },
-{REG_TYPE_CBUS, 0x301d,     0xffffffff, 0x30501080  },
-{REG_TYPE_CBUS, 0x301e,     0xffffffff, 0x7	    },
-{REG_TYPE_CBUS, 0x301f,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS,	0x3000,	    0xffffffff,	0xE0f50f1b  },
+{REG_TYPE_VCBUS, 0x3001,     0xffffffff, 0x4013c3c   },
+{REG_TYPE_VCBUS, 0x3002,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS, 0x3003,     0xffffffff, 0x40240280  },
+{REG_TYPE_VCBUS, 0x3004,     0xffffffff, 0x240280    },
+{REG_TYPE_VCBUS, 0x3005,     0xffffffff, 0x8020000   },
+{REG_TYPE_VCBUS, 0x3006,     0xffffffff, 0x0100000   },
+{REG_TYPE_VCBUS, 0x3007,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS, 0x3008,     0xffffffff, 0x6000000   },
+{REG_TYPE_VCBUS, 0x3009,     0xffffffff, 0x0100000   },
+{REG_TYPE_VCBUS, 0x300a,     0xffffffff, 0x8000000   },
+{REG_TYPE_VCBUS, 0x300b,     0xffffffff, 0x0100000   },
+{REG_TYPE_VCBUS, 0x300c,     0xffffffff, 0x0100000   },
+{REG_TYPE_VCBUS, 0x300d,     0xffffffff, 0x0000100   },
+{REG_TYPE_VCBUS, 0x3010,     0xffffffff, 0x20001000  },
+{REG_TYPE_VCBUS, 0x3016,     0xffffffff, 0x81eff     },
+{REG_TYPE_VCBUS, 0x3017,     0xffffffff, 0x01080     },
+{REG_TYPE_VCBUS, 0x301d,     0xffffffff, 0x30501080  },
+{REG_TYPE_VCBUS, 0x301e,     0xffffffff, 0x7	    },
+{REG_TYPE_VCBUS, 0x301f,     0xffffffff, 0x6000000   },
 {0}
 	}
 };
diff --git a/include/linux/amlogic/aml_common.h b/include/linux/amlogic/aml_common.h
index a6dc85b1350c..90461756feee 100755
--- a/include/linux/amlogic/aml_common.h
+++ b/include/linux/amlogic/aml_common.h
@@ -63,8 +63,7 @@ extern void set_foreign_affairs(enum foreign_affairs_e foreign_affairs);
 extern void rst_foreign_affairs(enum foreign_affairs_e foreign_affairs);
 
 #if defined(CONFIG_AM_VECM)
-extern void amvecm_video_latch(void);
-extern void ve_on_vs(vframe_t *vf);
+extern void amvecm_on_vs(vframe_t *vf);
 #endif
 
 #endif /* __AML_COMMON_H */
diff --git a/include/linux/amlogic/amvecm.h b/include/linux/amlogic/amvecm.h
index 6a14534d8c75..e93765d60f0e 100755
--- a/include/linux/amlogic/amvecm.h
+++ b/include/linux/amlogic/amvecm.h
@@ -39,8 +39,8 @@
 #define FLAG_3D_BLACK_EN        (1 << 24)
 #define FLAG_3D_SYNC_DIS        (1 << 23)
 #define FLAG_3D_SYNC_EN         (1 << 22)
-#define FLAG_VLOCK_PLL          (1 << 21)
-#define FLAG_VLOCK_ENC          (1 << 20)
+#define FLAG_VLOCK_DIS          (1 << 21)
+#define FLAG_VLOCK_EN          (1 << 20)
 #define FLAG_VE_DNLP_EN         (1 << 19)
 #define FLAG_VE_DNLP_DIS        (1 << 18)
 #define FLAG_RSV17              (1 << 17)
@@ -85,15 +85,15 @@
 #define AMVECM_IOC_S_RGB_OGO      _IOW(AMVECM_IOC_MAGIC, 0x45, struct tcon_rgb_ogo_s)
 #define AMVECM_IOC_G_RGB_OGO      _IOR(AMVECM_IOC_MAGIC, 0x46, struct tcon_rgb_ogo_s)
 #if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8)
-#undef WRITE_CBUS_REG
-#undef WRITE_CBUS_REG_BITS
-#undef READ_CBUS_REG
-#undef READ_CBUS_REG_BITS
-
-#define WRITE_CBUS_REG(x,val)				WRITE_VCBUS_REG(x,val)
-#define WRITE_CBUS_REG_BITS(x,val,start,length)		WRITE_VCBUS_REG_BITS(x,val,start,length)
-#define READ_CBUS_REG(x)				READ_VCBUS_REG(x)
-#define READ_CBUS_REG_BITS(x,start,length)		READ_VCBUS_REG_BITS(x,start,length)
+#define WRITE_VPP_REG(x,val)				WRITE_VCBUS_REG(x,val)
+#define WRITE_VPP_REG_BITS(x,val,start,length)		WRITE_VCBUS_REG_BITS(x,val,start,length)
+#define READ_VPP_REG(x)					READ_VCBUS_REG(x)
+#define READ_VPP_REG_BITS(x,start,length)		READ_VCBUS_REG_BITS(x,start,length)
+#else
+#define WRITE_VPP_REG(x,val)				WRITE_CBUS_REG(x,val)
+#define WRITE_VPP_REG_BITS(x,val,start,length)		WRITE_CBUS_REG_BITS(x,val,start,length)
+#define READ_VPP_REG(x)					READ_CBUS_REG(x)
+#define READ_VPP_REG_BITS(x,start,length)		READ_CBUS_REG_BITS(x,start,length)
 #endif
 
 #endif /* AMVECM_H */
-- 
2.19.0

