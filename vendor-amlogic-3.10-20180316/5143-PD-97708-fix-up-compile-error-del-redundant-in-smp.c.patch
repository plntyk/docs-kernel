From 55156359d3d526fdd4c47ed9c7da7ed7c8ca42c5 Mon Sep 17 00:00:00 2001
From: "qiufang.dai" <qiufang.dai@amlogic.com>
Date: Wed, 12 Nov 2014 14:30:33 +0800
Subject: [PATCH 5143/5965] PD#97708: fix up compile error & del redundant ';'
 in smp.c

Change-Id: I2d88461eebd25f59507ac88b94056eb4c4b1c10c
---
 arch/arm/mach-meson6/power_suspend.c    | 2 --
 arch/arm/mach-meson8/smp.c              | 2 +-
 arch/arm/mach-meson8/time.c             | 9 ++++++---
 arch/arm/mach-meson8b/smp.c             | 2 +-
 drivers/amlogic/cpufreq/meson-cpufreq.c | 4 +++-
 drivers/cpufreq/cpufreq.c               | 9 ++++++---
 6 files changed, 17 insertions(+), 11 deletions(-)

diff --git a/arch/arm/mach-meson6/power_suspend.c b/arch/arm/mach-meson6/power_suspend.c
index ab7f88c3f6d3..2d30b2de2fe1 100755
--- a/arch/arm/mach-meson6/power_suspend.c
+++ b/arch/arm/mach-meson6/power_suspend.c
@@ -74,10 +74,8 @@ void reset_watchdog(void)
 #ifdef CONFIG_MESON_TRUSTZONE
 int meson_power_suspend(void)
 {
-	static int test_flag = 0;
 	unsigned addr;
 	unsigned p_addr;
-	void (*pwrtest_entry)(unsigned,unsigned,unsigned,unsigned);
 
 	addr = 0x9FF04400;//entry.s start
 	p_addr = (unsigned)__phys_to_virt(addr);
diff --git a/arch/arm/mach-meson8/smp.c b/arch/arm/mach-meson8/smp.c
index bbadb4b2a0d7..2c017ed98001 100755
--- a/arch/arm/mach-meson8/smp.c
+++ b/arch/arm/mach-meson8/smp.c
@@ -136,7 +136,7 @@ int __cpuinit meson_boot_secondary(unsigned int cpu, struct task_struct *idle)
 			(const uint32_t)virt_to_phys(meson_secondary_startup));
 	meson_set_cpu_power_ctrl(cpu, 1);
 	timeout = jiffies + (10* HZ);
-	while(meson_get_cpu_ctrl_addr(cpu));
+	while(meson_get_cpu_ctrl_addr(cpu))
 	{
 		if(!time_before(jiffies, timeout))
 			return -EPERM;
diff --git a/arch/arm/mach-meson8/time.c b/arch/arm/mach-meson8/time.c
index 20a1d2cbee42..c70cde0f3b94 100755
--- a/arch/arm/mach-meson8/time.c
+++ b/arch/arm/mach-meson8/time.c
@@ -153,7 +153,7 @@ static int meson_tick_set_next_event(unsigned long evt,
 #define meson_tick_rating 300
 #endif
 
-#if 0
+#ifndef CONFIG_SMP
 static struct meson_clock meson_timer_a = {
         .clockevent={
             .name           = "MESON TIMER-A",
@@ -177,7 +177,8 @@ static struct meson_clock meson_timer_a = {
         .mux_reg=P_ISA_TIMER_MUX,
         .reg=P_ISA_TIMERA
 };
-#endif
+
+#else
 
 static struct meson_clock meson_timer_f = {
         .clockevent={
@@ -352,7 +353,7 @@ static struct meson_clock meson_timer_i = {
         .mux_reg=P_ISA_TIMER_MUX1,
         .reg=P_ISA_TIMERI,
 };
-
+#endif
 static struct meson_clock *clockevent_to_clock(struct clock_event_device *evt)
 {
 	//return container_of(evt, struct meson_clock, clockevent);
@@ -567,8 +568,10 @@ static void __init meson_clockevent_init(void)
  */
 void __init meson_timer_init(void)
 {
+#ifdef CONFIG_SMP
 	int i;
 	struct meson_clock *clk;
+#endif
 	meson_clocksource_init();
 	meson_clockevent_init();
 #ifdef CONFIG_SMP
diff --git a/arch/arm/mach-meson8b/smp.c b/arch/arm/mach-meson8b/smp.c
index 92d4bc97f22a..b025e3854327 100755
--- a/arch/arm/mach-meson8b/smp.c
+++ b/arch/arm/mach-meson8b/smp.c
@@ -136,7 +136,7 @@ int __cpuinit meson_boot_secondary(unsigned int cpu, struct task_struct *idle)
 				(const uint32_t)virt_to_phys(meson_secondary_startup));
 	meson_set_cpu_power_ctrl(cpu, 1);
 	timeout = jiffies + (10* HZ);
-	while(meson_get_cpu_ctrl_addr(cpu));
+	while(meson_get_cpu_ctrl_addr(cpu))
 	{
 		if(!time_before(jiffies, timeout))
 			return -EPERM;
diff --git a/drivers/amlogic/cpufreq/meson-cpufreq.c b/drivers/amlogic/cpufreq/meson-cpufreq.c
index c2799e4cbda9..5167043b571b 100755
--- a/drivers/amlogic/cpufreq/meson-cpufreq.c
+++ b/drivers/amlogic/cpufreq/meson-cpufreq.c
@@ -74,8 +74,8 @@ static int meson_cpufreq_verify(struct cpufreq_policy *policy)
     return 0;
 }
 
-static int early_suspend_flag = 0;
 #if (defined CONFIG_SMP) && (defined CONFIG_HAS_EARLYSUSPEND)
+static int early_suspend_flag = 0;
 #include <linux/earlysuspend.h>
 static void meson_system_early_suspend(struct early_suspend *h)
 {
@@ -462,7 +462,9 @@ static unsigned long global_l_p_j_ref_freq;
 
 static void adjust_jiffies(unsigned int freqOld, unsigned int freqNew)
 {
+#ifdef	CONFIG_SMP
     int i;
+#endif
 
     if (!global_l_p_j_ref) {
         global_l_p_j_ref = loops_per_jiffy;
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index d7652b534c82..4a67e2213fbb 100755
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -95,8 +95,9 @@ static int __cpufreq_governor(struct cpufreq_policy *policy,
 		unsigned int event);
 static unsigned int __cpufreq_get(unsigned int cpu);
 static void handle_update(struct work_struct *work);
+#ifdef CONFIG_SMP
 static void handle_up_cpu(struct work_struct *work);
-
+#endif
 /**
  * Two notifier lists: the "policy" list is involved in the
  * validation process for a new CPU frequency policy; the
@@ -925,8 +926,9 @@ static int cpufreq_add_dev(struct device *dev, struct subsys_interface *sif)
 
 	init_completion(&policy->kobj_unregister);
 	INIT_WORK(&policy->update, handle_update);
+#ifdef CONFIG_SMP
 	INIT_WORK(&policy->up_cpu, handle_up_cpu);
-
+#endif
 	/* call driver. From then on the cpufreq must be able
 	 * to accept all calls to ->verify and ->setpolicy for this CPU
 	 */
@@ -1144,6 +1146,7 @@ static void handle_update(struct work_struct *work)
 	pr_debug("handle_update for cpu %u called\n", cpu);
 	cpufreq_update_policy(cpu);
 }
+#ifdef CONFIG_SMP
 static void __ref handle_up_cpu(struct work_struct *work)
 {
 	int i;
@@ -1154,7 +1157,7 @@ static void __ref handle_up_cpu(struct work_struct *work)
 		cpu_up(i);
 	}
 }
-
+#endif
 /**
  *	cpufreq_out_of_sync - If actual and saved CPU frequency differs, we're in deep trouble.
  *	@cpu: cpu number
-- 
2.19.0

