From 58f47f566418dedf8ac227d624c97a025528b958 Mon Sep 17 00:00:00 2001
From: "ying.liu" <ying.liu@amlogic.com>
Date: Tue, 2 Dec 2014 09:53:40 +0800
Subject: [PATCH 5145/5965] PD #100168 [DVB] Fix add clear reset for each demux
 bug.

Change-Id: Id81e7b268707e9b1a3ce97ac7652277c6fc93216
---
 drivers/amlogic/dvb_tv/aml_dmx.c | 308 ++++++++++++++++++++++++++++---
 drivers/amlogic/dvb_tv/aml_dvb.c |  70 ++++---
 drivers/amlogic/dvb_tv/aml_dvb.h |  13 +-
 3 files changed, 347 insertions(+), 44 deletions(-)

diff --git a/drivers/amlogic/dvb_tv/aml_dmx.c b/drivers/amlogic/dvb_tv/aml_dmx.c
index d03b4f2aed08..bfadcc3b4745 100755
--- a/drivers/amlogic/dvb_tv/aml_dmx.c
+++ b/drivers/amlogic/dvb_tv/aml_dmx.c
@@ -135,8 +135,13 @@ module_param(debug_irq, int, S_IRUGO);
 
 
 /*Reset the demux device*/
-void dmx_reset_hw(struct aml_dvb *dvb);
-void dmx_reset_hw_ex(struct aml_dvb *dvb, int reset_irq);
+#define RESET_DEMUX2      (1<<15)
+#define RESET_DEMUX1      (1<<14)
+#define RESET_DEMUX0      (1<<13)
+#define RESET_S2P1        (1<<12)
+#define RESET_S2P0        (1<<11)
+#define RESET_DES         (1<<10)
+#define RESET_TOP         (1<<9)
 static int dmx_remove_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed);
 static void reset_async_fifos(struct aml_dvb *dvb);
 static int dmx_add_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed);
@@ -164,8 +169,12 @@ static void section_buffer_watchdog_func(unsigned long arg)
 	spin_lock_irqsave(&dvb->slock, flags);
 
 	for(device_no=0; device_no<DMX_DEV_COUNT; device_no++) {
+
 		dmx = &dvb->dmx[device_no];
 
+		if(dvb->dmx_watchdog_disable[device_no])
+			continue;
+
 		if(dmx->init) {
 			om_cmd_status32 = DMX_READ_REG(device_no, OM_CMD_STATUS);
 			demux_channel_activity32 = DMX_READ_REG(device_no, DEMUX_CHANNEL_ACTIVITY);
@@ -191,7 +200,7 @@ static void section_buffer_watchdog_func(unsigned long arg)
 							dmx->id,
 							om_cmd_status32);
 
-				dmx_reset_hw_ex(dvb, 0);
+				dmx_reset_dmx_hw_ex_unlock(dvb, dmx, 0);
 				goto end;
 			}
 #else
@@ -791,7 +800,7 @@ static void stb_enable(struct aml_dvb *dvb)
 			src = dvb->stb_source;
 		break;
 	}
-	printk("[dmx]src is %d\n",src);
+
 	switch(src) {
 		case AM_TS_SRC_TS0:
 			fec_clk = tsfile_clkdiv;
@@ -828,17 +837,17 @@ static void stb_enable(struct aml_dvb *dvb)
 	}
 
 	switch(dvb->dsc_source) {
-		case AM_DMX_0:
+		case AM_TS_SRC_DMX0:
 			des_in = 0;
 			en_des = 1;
 			dec_clk_en=1;
 		break;
-		case AM_DMX_1:
+		case AM_TS_SRC_DMX1:
 			des_in = 1;
 			en_des = 1;
 			dec_clk_en=1;
 		break;
-		case AM_DMX_2:
+		case AM_TS_SRC_DMX2:
 			des_in = 2;
 			en_des = 1;
 			dec_clk_en=1;
@@ -888,6 +897,9 @@ static void stb_enable(struct aml_dvb *dvb)
 		break;
 	}
 
+	printk("[stb]src: %d, dsc: %d, tso: %d\n",
+			src, des_in, out_src);
+
 	fec_s0  = 0;
 	fec_s1  = 0;
 	invert0 = 0;
@@ -1307,7 +1319,7 @@ static int dmx_enable(struct aml_dmx *dmx)
 {
 	struct aml_dvb *dvb = (struct aml_dvb*)dmx->demux.priv;
 	int fec_sel, hi_bsf, fec_ctrl, record;
-	int fec_core_sel;
+	int fec_core_sel=0;
 	int set_stb = 0, fec_s = 0;
 	int s2p_id;
 	u32 invert0 = 0, invert1 = 0, fec_s0 = 0, fec_s1 = 0;
@@ -1361,16 +1373,19 @@ static int dmx_enable(struct aml_dmx *dmx)
 			record   = 0;
 		break;
 	}
-	pr_dbg("dmx %d enable: src %d, record %d\n", dmx->id, dmx->source, record);
 
 	if(dmx->channel[0].used || dmx->channel[1].used)
 		hi_bsf = 1;
 	else
 		hi_bsf = 0;
-	if (dvb->dsc_source == dmx->id)
+
+	if ((dvb->dsc_source!=-1)
+		&& ((dvb->dsc_source-AM_TS_SRC_DMX0)== dmx->id))
 		fec_core_sel = 1;
-	else
-		fec_core_sel = 0;
+
+	pr_dbg("[dmx-%d]src: %d, rec: %d, hi_bsf: %d, dsc: %d\n",
+			dmx->id, dmx->source, record, hi_bsf, fec_core_sel);
+
 	if(dmx->chan_count) {
 		if(set_stb){
 			u32 v = READ_MPEG_REG(STB_TOP_CONFIG);
@@ -1453,6 +1468,28 @@ static int dmx_enable(struct aml_dmx *dmx)
 	return 0;
 }
 
+static int dmx_set_misc(struct aml_dmx *dmx, int hi_bsf, int en_dsc)
+{
+	if(hi_bsf>=0) {
+		DMX_WRITE_REG(dmx->id, TS_HIU_CTL,
+			hi_bsf? (DMX_READ_REG(dmx->id, TS_HIU_CTL) |(1<<USE_HI_BSF_INTERFACE))
+				: (DMX_READ_REG(dmx->id, TS_HIU_CTL) & (~(1<<USE_HI_BSF_INTERFACE))));
+	}
+
+	if(en_dsc>=0) {
+		DMX_WRITE_REG(dmx->id, FEC_INPUT_CONTROL,
+			en_dsc? (DMX_READ_REG(dmx->id, FEC_INPUT_CONTROL) | (1<<FEC_CORE_SEL))
+				: (DMX_READ_REG(dmx->id, FEC_INPUT_CONTROL) & (~(1<<FEC_CORE_SEL))));
+	}
+
+	return 0;
+}
+
+static int dmx_set_misc_id(struct aml_dvb *dvb, int id, int hi_bsf, int en_dsc)
+{
+	return dmx_set_misc(&dvb->dmx[id], hi_bsf, en_dsc);
+}
+
 /*Get the channel's ID by its PID*/
 static int dmx_get_chan(struct aml_dmx *dmx, int pid)
 {
@@ -2013,6 +2050,194 @@ void dmx_reset_hw_ex(struct aml_dvb *dvb, int reset_irq)
 	pr_dbg("demux reset end\n");
 }
 
+/*Reset the individual demux*/
+void dmx_reset_dmx_hw_ex_unlock(struct aml_dvb *dvb, struct aml_dmx *dmx, int reset_irq)
+{
+	{
+		if(!dmx->init)
+			return;
+		if(reset_irq){
+			if(dmx->dmx_irq!=-1) {
+				disable_irq(dmx->dmx_irq);
+			}
+			if(dmx->dvr_irq!=-1) {
+				disable_irq(dmx->dvr_irq);
+			}
+		}
+	}
+#ifdef ENABLE_SEC_BUFF_WATCHDOG
+	if(reset_irq){
+		//del_timer_sync(&dvb->watchdog_timer);
+		dvb->dmx_watchdog_disable[dmx->id] = 1;
+	}
+#endif
+
+	WRITE_MPEG_REG(RESET3_REGISTER, (dmx->id)? ((dmx->id==1)? RESET_DEMUX1 : RESET_DEMUX2) : RESET_DEMUX0);
+
+	{
+		int times;
+
+		times = 0;
+		while(times++ < 1000000) {
+			if (!(DMX_READ_REG(dmx->id, OM_CMD_STATUS)&0x01))
+				break;
+		}
+	}
+
+	//WRITE_MPEG_REG(STB_TOP_CONFIG, 0);
+
+	{
+		u32 version, data;
+
+		if(!dmx->init)
+			return ;
+
+		if(reset_irq){
+			if(dmx->dmx_irq!=-1) {
+				enable_irq(dmx->dmx_irq);
+			}
+			if(dmx->dvr_irq!=-1) {
+				enable_irq(dmx->dvr_irq);
+			}
+		}
+		DMX_WRITE_REG(dmx->id, DEMUX_CONTROL, 0x0000);
+		version = DMX_READ_REG(dmx->id, STB_VERSION);
+		DMX_WRITE_REG(dmx->id, STB_TEST_REG, version);
+		pr_dbg("STB %d hardware version : %d\n", dmx->id, version);
+		DMX_WRITE_REG(dmx->id, STB_TEST_REG, 0x5550);
+		data = DMX_READ_REG(dmx->id, STB_TEST_REG);
+		if(data!=0x5550)
+			pr_error("STB %d register access failed\n", dmx->id);
+		DMX_WRITE_REG(dmx->id, STB_TEST_REG, 0xaaa0);
+		data = DMX_READ_REG(dmx->id, STB_TEST_REG);
+		if(data!=0xaaa0)
+			pr_error("STB %d register access failed\n", dmx->id);
+		DMX_WRITE_REG(dmx->id, MAX_FM_COMP_ADDR, 0x0000);
+		DMX_WRITE_REG(dmx->id, STB_INT_MASK, 0);
+		DMX_WRITE_REG(dmx->id, STB_INT_STATUS, 0xffff);
+		DMX_WRITE_REG(dmx->id, FEC_INPUT_CONTROL, 0);
+	}
+
+	stb_enable(dvb);
+
+	{
+		int n;
+		unsigned long addr;
+		unsigned long base;
+		unsigned long grp_addr[SEC_BUF_GRP_COUNT];
+		int grp_len[SEC_BUF_GRP_COUNT];
+
+		if(!dmx->init)
+			return ;
+
+		if(dmx->sec_pages) {
+			grp_len[0] = (1<<SEC_GRP_LEN_0)*8;
+			grp_len[1] = (1<<SEC_GRP_LEN_1)*8;
+			grp_len[2] = (1<<SEC_GRP_LEN_2)*8;
+			grp_len[3] = (1<<SEC_GRP_LEN_3)*8;
+
+			grp_addr[0] = virt_to_phys((void*)dmx->sec_pages);
+			grp_addr[1] = grp_addr[0]+grp_len[0];
+			grp_addr[2] = grp_addr[1]+grp_len[1];
+			grp_addr[3] = grp_addr[2]+grp_len[2];
+
+			base = grp_addr[0]&0xFFFF0000;
+			DMX_WRITE_REG(dmx->id, SEC_BUFF_BASE, base>>16);
+			DMX_WRITE_REG(dmx->id, SEC_BUFF_01_START, (((grp_addr[0]-base)>>8)<<16)|((grp_addr[1]-base)>>8));
+			DMX_WRITE_REG(dmx->id, SEC_BUFF_23_START, (((grp_addr[2]-base)>>8)<<16)|((grp_addr[3]-base)>>8));
+			DMX_WRITE_REG(dmx->id, SEC_BUFF_SIZE, SEC_GRP_LEN_0|
+				(SEC_GRP_LEN_1<<4)|
+				(SEC_GRP_LEN_2<<8)|
+				(SEC_GRP_LEN_3<<12));
+		}
+
+		if(dmx->sub_pages) {
+			addr = virt_to_phys((void*)dmx->sub_pages);
+			DMX_WRITE_REG(dmx->id, SB_START, addr>>12);
+			DMX_WRITE_REG(dmx->id, SB_LAST_ADDR, (dmx->sub_buf_len>>3)-1);
+		}
+
+		if(dmx->pes_pages) {
+			addr = virt_to_phys((void*)dmx->pes_pages);
+			DMX_WRITE_REG(dmx->id, OB_START, addr>>12);
+			DMX_WRITE_REG(dmx->id, OB_LAST_ADDR, (dmx->pes_buf_len>>3)-1);
+		}
+
+		for(n=0; n<CHANNEL_COUNT; n++)
+		{
+			//struct aml_channel *chan = &dmx->channel[n];
+
+			//if(chan->used)
+			{
+				dmx_set_chan_regs(dmx, n);
+			}
+		}
+
+		for(n=0; n<FILTER_COUNT; n++)
+		{
+			struct aml_filter *filter = &dmx->filter[n];
+
+			if(filter->used)
+			{
+				dmx_set_filter_regs(dmx, n);
+			}
+		}
+
+		dmx_enable(dmx);
+	}
+
+	{
+		int id;
+		for(id=0; id<DSC_COUNT; id++)
+		{
+			struct aml_dsc *dsc = &dvb->dsc[id];
+
+			if(dsc->used)
+			{
+				dsc_set_pid(dsc, dsc->pid);
+
+				if(dsc->set&1)
+					dsc_set_key(dsc, 0, dsc->even);
+				if(dsc->set&2)
+					dsc_set_key(dsc, 1, dsc->odd);
+			}
+		}
+	}
+#ifdef ENABLE_SEC_BUFF_WATCHDOG
+	if(reset_irq){
+		//mod_timer(&dvb->watchdog_timer, jiffies+msecs_to_jiffies(WATCHDOG_TIMER));
+		dvb->dmx_watchdog_disable[dmx->id] = 0;
+	}
+#endif
+}
+
+void dmx_reset_dmx_id_hw_ex_unlock(struct aml_dvb *dvb, int id, int reset_irq)
+{
+	dmx_reset_dmx_hw_ex_unlock(dvb, &dvb->dmx[id], reset_irq);
+}
+
+void dmx_reset_dmx_hw_ex(struct aml_dvb *dvb, struct aml_dmx *dmx, int reset_irq)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&dvb->slock, flags);
+	dmx_reset_dmx_hw_ex_unlock(dvb, dmx, reset_irq);
+	spin_unlock_irqrestore(&dvb->slock, flags);
+}
+
+void dmx_reset_dmx_id_hw_ex(struct aml_dvb *dvb, int id, int reset_irq)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&dvb->slock, flags);
+	dmx_reset_dmx_id_hw_ex_unlock(dvb, id, reset_irq);
+	spin_unlock_irqrestore(&dvb->slock, flags);
+}
+
+void dmx_reset_dmx_hw(struct aml_dvb *dvb, int id)
+{
+	dmx_reset_dmx_id_hw_ex(dvb, id, 1);
+}
 /*Allocate subtitle pes buffer*/
 static int alloc_subtitle_pes_buffer(struct aml_dmx * dmx)
 {
@@ -2495,7 +2720,7 @@ int aml_dmx_hw_set_source(struct dmx_demux* demux, dmx_source_t src)
 
 	if(hw_src != dmx->source) {
 		dmx->source = hw_src;
-		dmx_reset_hw_ex(dvb, 0);
+		dmx_reset_dmx_hw_ex_unlock(dvb, dmx, 0);
 	}
 
 	spin_unlock_irqrestore(&dvb->slock, flags);
@@ -2503,6 +2728,8 @@ int aml_dmx_hw_set_source(struct dmx_demux* demux, dmx_source_t src)
 	return ret;
 }
 
+#define IS_SRC_DMX(_src) ((_src)>=AM_TS_SRC_DMX0 &&( _src)<=AM_TS_SRC_DMX2) 
+
 int aml_stb_hw_set_source(struct aml_dvb *dvb, dmx_source_t src)
 {
 	unsigned long flags;
@@ -2541,9 +2768,24 @@ int aml_stb_hw_set_source(struct aml_dvb *dvb, dmx_source_t src)
 		break;
 	}
 
-	if(dvb->stb_source != hw_src){
+	if(dvb->stb_source != hw_src) {
+		int old_source = dvb->stb_source;
 		dvb->stb_source = hw_src;
-		dmx_reset_hw_ex(dvb, 0);
+
+		if(IS_SRC_DMX(old_source)) {
+			dmx_set_misc_id(dvb,(old_source-AM_TS_SRC_DMX0), 0, -1);
+		} else {
+			/*which dmx for av-play is unknown, can't avoid reset-all*/
+			dmx_reset_hw_ex(dvb, 0);
+		}
+
+		if(IS_SRC_DMX(dvb->stb_source)) {
+			dmx_set_misc_id(dvb,(dvb->stb_source-AM_TS_SRC_DMX0), 1, -1);
+			//dmx_reset_dmx_id_hw_ex_unlock(dvb, (dvb->stb_source-AM_TS_SRC_DMX0), 0);
+		} else {
+			/*which dmx for av-play is unknown, can't avoid reset-all*/
+			dmx_reset_hw_ex(dvb, 0);
+		}
 	}
 
 	spin_unlock_irqrestore(&dvb->slock, flags);
@@ -2551,16 +2793,38 @@ int aml_stb_hw_set_source(struct aml_dvb *dvb, dmx_source_t src)
 	return ret;
 }
 
-int aml_dsc_hw_set_source(struct aml_dvb *dvb, aml_ts_source_t src)
+int aml_dsc_hw_set_source(struct aml_dvb *dvb, dmx_source_t src)
 {
 	int ret = 0;
 	unsigned long flags;
+	int hw_src;
 
 	spin_lock_irqsave(&dvb->slock, flags);
 
-	if(src != dvb->dsc_source){
-		dvb->dsc_source = src;
-		dmx_reset_hw_ex(dvb, 0);
+	hw_src = dvb->dsc_source;
+
+	switch(src) {
+		case DMX_SOURCE_FRONT0_OFFSET:
+			hw_src = AM_TS_SRC_DMX0;
+		break;
+		case DMX_SOURCE_FRONT1_OFFSET:
+			hw_src = AM_TS_SRC_DMX1;
+		break;
+		case DMX_SOURCE_FRONT2_OFFSET:
+			hw_src = AM_TS_SRC_DMX2;
+		break;
+		default:
+			hw_src=-1;
+		break;
+	}
+
+	if(hw_src != dvb->dsc_source){
+		int old_source = dvb->dsc_source;
+		dvb->dsc_source = hw_src;
+		if(old_source != -1)
+			dmx_reset_dmx_id_hw_ex_unlock(dvb, (old_source-AM_TS_SRC_DMX0), 0);
+		if(hw_src != -1)
+			dmx_reset_dmx_id_hw_ex_unlock(dvb, (hw_src-AM_TS_SRC_DMX0), 0);
 	}
 
 	spin_unlock_irqrestore(&dvb->slock, flags);
@@ -2601,14 +2865,14 @@ int aml_tso_hw_set_source(struct aml_dvb *dvb, dmx_source_t src)
 			hw_src = AM_TS_SRC_DMX2;
 		break;
 		default:
-			pr_error("illegal demux source %d\n", src);
+			hw_src = -1;
 			ret = -EINVAL;
 		break;
 	}
 
 	if(hw_src != dvb->tso_source){
 		dvb->tso_source = hw_src;
-		dmx_reset_hw_ex(dvb, 0);
+		stb_enable(dvb);
 	}
 
 	spin_unlock_irqrestore(&dvb->slock, flags);
@@ -2660,7 +2924,7 @@ int aml_dmx_hw_set_dump_ts_select(struct dmx_demux* demux, int dump_ts_select)
 	dump_ts_select = !!dump_ts_select;
 	if (dmx->dump_ts_select != dump_ts_select){
 		dmx->dump_ts_select = dump_ts_select;
-		dmx_reset_hw_ex(dvb, 0);
+		dmx_reset_dmx_hw_ex_unlock(dvb, dmx, 0);
 	}
 	spin_unlock_irqrestore(&dvb->slock, flags);
 
diff --git a/drivers/amlogic/dvb_tv/aml_dvb.c b/drivers/amlogic/dvb_tv/aml_dvb.c
index 5ade62fd670d..b7ad86dc1bf6 100755
--- a/drivers/amlogic/dvb_tv/aml_dvb.c
+++ b/drivers/amlogic/dvb_tv/aml_dvb.c
@@ -402,7 +402,7 @@ static ssize_t stb_show_source(struct class *class, struct class_attribute *attr
 			src = "dmx2";
 		break;
 		default:
-			src = "";
+			src = "disable";
 		break;
 	}
 
@@ -446,17 +446,17 @@ static ssize_t dsc_show_source(struct class *class,struct class_attribute *attr,
 	char *src;
 
 	switch(dvb->dsc_source) {
-		case AM_DMX_0:
+		case AM_TS_SRC_DMX0:
 			src = "dmx0";
 		break;
-		case AM_DMX_1:
+		case AM_TS_SRC_DMX1:
 			src = "dmx1";
 		break;
-		case AM_DMX_2:
+		case AM_TS_SRC_DMX2:
 			src = "dmx2";
 		break;
 		default:
-			src = "";
+			src = "bypass";
 		break;
 	}
 
@@ -472,16 +472,13 @@ static ssize_t dsc_store_source(struct class *class,struct class_attribute *attr
 	dmx_source_t src = -1;
 
 	if(!strncmp("dmx0", buf, 4)) {
-		src = AM_DMX_0;
+		src = DMX_SOURCE_FRONT0+100;
 	} else if(!strncmp("dmx1", buf, 4)) {
-		src = AM_DMX_1;
-	}else if(!strncmp("dmx2", buf, 4)) {
-		src = AM_DMX_2;
-	}
-
-	if(src!=-1) {
-		aml_dsc_hw_set_source(&aml_dvb_device, src);
+		src = DMX_SOURCE_FRONT1+100;
+	} else if(!strncmp("dmx2", buf, 4)) {
+		src = DMX_SOURCE_FRONT2+100;
 	}
+	aml_dsc_hw_set_source(&aml_dvb_device, src);
 
 	return size;
 }
@@ -519,7 +516,7 @@ static ssize_t tso_show_source(struct class *class, struct class_attribute *attr
 			src = "dmx2";
 		break;
 		default:
-			src = "";
+			src = "default";
 		break;
 	}
 
@@ -549,9 +546,8 @@ static ssize_t tso_store_source(struct class *class,struct class_attribute *attr
     } else if(!strncmp("dmx2", buf, 4)) {
         src = DMX_SOURCE_FRONT2+100;
     }
-    if(src!=-1) {
-    	aml_tso_hw_set_source(&aml_dvb_device, src);
-    }
+
+	aml_tso_hw_set_source(&aml_dvb_device, src);
 
     return size;
 }
@@ -873,8 +869,6 @@ static ssize_t asyncfifo##i##_store_flush_size(struct class *class,  struct clas
 #endif
 
 
-extern void dmx_reset_hw_ex(struct aml_dvb *dvb, int reset_irq);
-
 /*Reset the Demux*/
 static ssize_t demux_do_reset(struct class *class,struct class_attribute *attr,
                           const char *buf,
@@ -1036,6 +1030,26 @@ static ssize_t stb_store_hw_setting(struct class *class, struct class_attribute
 	return count;
 }
 
+#define DEMUX_RESET_FUNC_DECL(i)  \
+static ssize_t demux##i##_reset_store(struct class *class,  struct class_attribute *attr,const char *buf, size_t size)\
+{\
+	if(!strncmp("1", buf, 1)) { \
+		struct aml_dvb *dvb = &aml_dvb_device; \
+		pr_info("Reset demux["#i"], call dmx_reset_dmx_hw\n"); \
+		dmx_reset_dmx_id_hw_ex(dvb, i, 0); \
+	} \
+	return size; \
+}
+#if DMX_DEV_COUNT>0
+	DEMUX_RESET_FUNC_DECL(0)
+#endif
+#if DMX_DEV_COUNT>1
+	DEMUX_RESET_FUNC_DECL(1)
+#endif
+#if DMX_DEV_COUNT>2
+	DEMUX_RESET_FUNC_DECL(2)
+#endif
+
 static struct file_operations dvb_dsc_fops = {
         .owner          = THIS_MODULE,
         .read           = NULL,
@@ -1117,6 +1131,18 @@ static struct class_attribute aml_stb_class_attrs[] = {
 	__ATTR(first_video_pts,  S_IRUGO | S_IWUSR, demux_show_first_video_pts, NULL),
 	__ATTR(first_audio_pts,  S_IRUGO | S_IWUSR, demux_show_first_audio_pts, NULL),
 	__ATTR(free_dscs,  S_IRUGO | S_IWUSR, dsc_show_free_dscs, NULL),
+
+#define DMX_RESET_ATTR_DECL(i)\
+		__ATTR(demux##i##_reset,  S_IRUGO | S_IWUSR, NULL, demux##i##_reset_store)
+#if DMX_DEV_COUNT>0
+	DMX_RESET_ATTR_DECL(0),
+#endif
+#if DMX_DEV_COUNT>1
+	DMX_RESET_ATTR_DECL(1),
+#endif
+#if DMX_DEV_COUNT>2
+	DMX_RESET_ATTR_DECL(2),
+#endif
 	__ATTR_NULL
 };
 
@@ -1145,7 +1171,7 @@ static int aml_dvb_probe(struct platform_device *pdev)
 
 	advb->dev  = &pdev->dev;
 	advb->pdev = pdev;
-	advb->dsc_source=AM_DMX_MAX;
+	advb->dsc_source=-1;
 	advb->stb_source=-1;
 	advb->tso_source=-1;
 
@@ -1378,8 +1404,10 @@ static int aml_tsdemux_reset(void)
 
 	spin_lock_irqsave(&dvb->slock, flags);
 	if(dvb->reset_flag) {
+		struct aml_dmx *dmx = get_stb_dmx();
 		dvb->reset_flag = 0;
-		dmx_reset_hw_ex(dvb, 0);
+		if(dmx)
+			dmx_reset_dmx_hw_ex_unlock(dvb, dmx, 0);
 	}
 	spin_unlock_irqrestore(&dvb->slock, flags);
 
diff --git a/drivers/amlogic/dvb_tv/aml_dvb.h b/drivers/amlogic/dvb_tv/aml_dvb.h
index b043dd9bbc7e..fe6c173ff7ee 100755
--- a/drivers/amlogic/dvb_tv/aml_dvb.h
+++ b/drivers/amlogic/dvb_tv/aml_dvb.h
@@ -202,6 +202,7 @@ struct aml_dvb {
 	int                  reset_flag;
 	spinlock_t           slock;
 	struct timer_list    watchdog_timer;
+	int                  dmx_watchdog_disable[DMX_DEV_COUNT];
 };
 
 
@@ -212,7 +213,7 @@ extern int aml_dmx_hw_start_feed(struct dvb_demux_feed *dvbdmxfeed);
 extern int aml_dmx_hw_stop_feed(struct dvb_demux_feed *dvbdmxfeed);
 extern int aml_dmx_hw_set_source(struct dmx_demux* demux, dmx_source_t src);
 extern int aml_stb_hw_set_source(struct aml_dvb *dvb, dmx_source_t src);
-extern int aml_dsc_hw_set_source(struct aml_dvb *dvb, aml_ts_source_t src);
+extern int aml_dsc_hw_set_source(struct aml_dvb *dvb, dmx_source_t src);
 extern int aml_tso_hw_set_source(struct aml_dvb *dvb, dmx_source_t src);
 extern int aml_dmx_set_skipbyte(struct aml_dvb *dvb, int skipbyte);
 extern int aml_dmx_set_demux(struct aml_dvb *dvb, int id);
@@ -257,6 +258,16 @@ struct devio_aml_platform_data {
 	int (*io_reset)(void *, int enable);
 };
 
+/*Reset the demux device*/
+void dmx_reset_hw(struct aml_dvb *dvb);
+void dmx_reset_hw_ex(struct aml_dvb *dvb, int reset_irq);
+
+/*Reset the individual demux*/
+void dmx_reset_dmx_hw(struct aml_dvb *dvb, int id);
+void dmx_reset_dmx_id_hw_ex(struct aml_dvb *dvb, int id, int reset_irq);
+void dmx_reset_dmx_id_hw_ex_unlock(struct aml_dvb *dvb, int id, int reset_irq);
+void dmx_reset_dmx_hw_ex(struct aml_dvb *dvb, struct aml_dmx *dmx, int reset_irq);
+void dmx_reset_dmx_hw_ex_unlock(struct aml_dvb *dvb, struct aml_dmx *dmx, int reset_irq);
 
 #endif
 
-- 
2.19.0

