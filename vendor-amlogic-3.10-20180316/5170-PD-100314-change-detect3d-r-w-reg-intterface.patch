From 9bb08fe73ed572fa9df2f353085035c1164b0677 Mon Sep 17 00:00:00 2001
From: "dezhi.kong" <dezhi.kong@amlogic.com>
Date: Mon, 1 Dec 2014 19:48:44 +0800
Subject: [PATCH 5170/5965] PD#100314: change detect3d r/w reg intterface

Change-Id: I93b421a72d5e081fd81ac5dab8a287a9c9dbd5f1
---
 drivers/amlogic/deinterlace/detect3d.c | 151 ++++++++++++-------------
 drivers/amlogic/deinterlace/detect3d.h |  19 +++-
 2 files changed, 90 insertions(+), 80 deletions(-)

diff --git a/drivers/amlogic/deinterlace/detect3d.c b/drivers/amlogic/deinterlace/detect3d.c
index 3621ad45b6c8..66a0e0c208a5 100755
--- a/drivers/amlogic/deinterlace/detect3d.c
+++ b/drivers/amlogic/deinterlace/detect3d.c
@@ -4,7 +4,7 @@
 /* Amlogic Headers */
 #include <mach/am_regs.h>
 
-#if (MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TV)||(MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TVD)||( MESON_CPU_TYPE==MESON_CPU_TYPE_MESONG9TV) 
+#if (MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TV)||(MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TVD)||( MESON_CPU_TYPE==MESON_CPU_TYPE_MESONG9TV)
 /* Local include */
 #include <linux/amlogic/tvin/tvin.h>
 #include "detect3d.h"
@@ -32,14 +32,14 @@
 #define NOT_INTERLACE_SCORE_UPPER_LIMIT		(-12)	//if score < this limit, input is sure to be not interlace format
 #define NOT_CHESSBOAD_SCORE_UPPER_LIMIT		(-12)	//if score < this limit, input is sure to be not chessboard format
 
-#define LR_SYMMETRY_LOWER_LIMIT			44	//if > this limit,input is translational-symmety in left half and right half 
+#define LR_SYMMETRY_LOWER_LIMIT			44	//if > this limit,input is translational-symmety in left half and right half
 #define TB_SYMMETRY_LOWER_LIMIT			44	//if > this limit,input is translational-symmety in top half and bottom half
 
 static int chessbd_vrate = 29;
 static bool det3d_debug = 0;
 
 /***************************Local variables **********************************/
-const unsigned int det3d_table[DET3D_REG_NUM] = 
+const unsigned int det3d_table[DET3D_REG_NUM] =
 {
 	0x00000002,0x00000027,0x00000065,0x00444400,
 	0xc8404733,0x00060606,0x00060606,0x0000002a,
@@ -71,22 +71,22 @@ void det3d_enable(bool flag)
 
 	if(flag == 1){
 		//disable 3D detection
-		WRITE_CBUS_REG_BITS(NR2_SW_EN, 0, DET3D_EN_BIT, DET3D_EN_WID);
+		WRITE_DET3D_REG_BITS(NR2_SW_EN, 0, DET3D_EN_BIT, DET3D_EN_WID);
 
 		//initalize the registers
 		for (i = 0; i < DET3D_REG_NUM; i++){
-			WRITE_CBUS_REG((DET3D_BASE_ADD + i), det3d_table[i]);
+			WRITE_DET3D_REG((DET3D_BASE_ADD + i), det3d_table[i]);
 		}
 
 		//Det 3D interrupt enble
-		WRITE_CBUS_REG_BITS(DET3D_MOTN_CFG, 1, DET3D_INTR_EN_BIT, DET3D_INTR_EN_WID);
+		WRITE_DET3D_REG_BITS(DET3D_MOTN_CFG, 1, DET3D_INTR_EN_BIT, DET3D_INTR_EN_WID);
 		//enable 3D detection
-		WRITE_CBUS_REG_BITS(NR2_SW_EN, 1, DET3D_EN_BIT, DET3D_EN_WID);
+		WRITE_DET3D_REG_BITS(NR2_SW_EN, 1, DET3D_EN_BIT, DET3D_EN_WID);
 	}else{
 		//Det 3D interrupt disable
-		WRITE_CBUS_REG_BITS(DET3D_MOTN_CFG, 0, DET3D_INTR_EN_BIT, DET3D_INTR_EN_WID);
+		WRITE_DET3D_REG_BITS(DET3D_MOTN_CFG, 0, DET3D_INTR_EN_BIT, DET3D_INTR_EN_WID);
 		//disable 3D detection
-		WRITE_CBUS_REG_BITS(NR2_SW_EN, 0, DET3D_EN_BIT, DET3D_EN_WID);
+		WRITE_DET3D_REG_BITS(NR2_SW_EN, 0, DET3D_EN_BIT, DET3D_EN_WID);
 		memset(&det3d_info,0,sizeof(det3d_info));
 	}
 }
@@ -103,7 +103,7 @@ int read_cbus_reg_signed_bits(unsigned int reg, unsigned int startbit, unsigned
 
 	if(length > 31)
 		length = 31;
-	val = READ_CBUS_REG_BITS(reg, startbit, length);
+	val = READ_DET3D_REG_BITS(reg, startbit, length);
 	tmp = tmp << (length - 1);
 
 	//pr_info("len = %d, unsigned value = %d, signed value = %d",length,val,((val >= tmp )?(val - (tmp << 1)):val));
@@ -119,15 +119,15 @@ static void det3d_accumulate_score(int lr_score, int tb_score, int int_score, in
 	int tmp2 = 0;
 	int m;
 
-	// accumulate the frame to frame scores         
+	// accumulate the frame to frame scores
 	if (det3d_info.nfrm < 1){
 		det3d_info.score_3d_lr = lr_score;
 		det3d_info.score_3d_tb = tb_score;
 
 		//initialize the temporary score buffer
-		det3d_info.tscore_3d_lr[0] = lr_score;  
+		det3d_info.tscore_3d_lr[0] = lr_score;
 		det3d_info.tscore_3d_tb[0] = tb_score;
-		det3d_info.chs_valid_his[0]= chessbd_score; 
+		det3d_info.chs_valid_his[0]= chessbd_score;
 		det3d_info.int_valid_his[0]= int_score;
 		det3d_info.tscore_3d_lr_accum = (lr_score <= 0) ? 1 : 0;
 		det3d_info.tscore_3d_tb_accum = (tb_score <= 0) ? 1 : 0;
@@ -144,29 +144,29 @@ static void det3d_accumulate_score(int lr_score, int tb_score, int int_score, in
 		//--------------------------------------------
 		//detection result agreement in frame to frame
 		//--------------------------------------------
-		det3d_info.tscore_3d_lr[0] = lr_score;  
-		det3d_info.tscore_3d_tb[0] = tb_score;        
+		det3d_info.tscore_3d_lr[0] = lr_score;
+		det3d_info.tscore_3d_tb[0] = tb_score;
 		det3d_info.tscore_3d_lr_accum = det3d_info.tscore_3d_lr_accum + (lr_score <= 0) - (det3d_info.tscore_3d_lr[5] <= 0);
 		det3d_info.tscore_3d_tb_accum = det3d_info.tscore_3d_tb_accum + (tb_score <= 0) - (det3d_info.tscore_3d_tb[5] <= 0);
 		// Clip to s12
-		det3d_info.score_3d_lr = (det3d_info.score_3d_lr > LR_FMT_SCORE_MAX) ? 1800: det3d_info.score_3d_lr; 
+		det3d_info.score_3d_lr = (det3d_info.score_3d_lr > LR_FMT_SCORE_MAX) ? 1800: det3d_info.score_3d_lr;
 		det3d_info.score_3d_lr = (det3d_info.score_3d_lr < LR_FMT_SCORE_MIN) ? -1800: det3d_info.score_3d_lr;
-		det3d_info.score_3d_tb = (det3d_info.score_3d_tb > TB_FMT_SCORE_MAX) ? 1800: det3d_info.score_3d_tb; 
+		det3d_info.score_3d_tb = (det3d_info.score_3d_tb > TB_FMT_SCORE_MAX) ? 1800: det3d_info.score_3d_tb;
 		det3d_info.score_3d_tb = (det3d_info.score_3d_tb < TB_FMT_SCORE_MIN) ? -1800: det3d_info.score_3d_tb;
-		
+
 		//-------------------------------------
 		// Chessboard frame to frame agreement
 		//-------------------------------------
-		det3d_info.score_3d_chs    = ((chessbd_score == det3d_info.chs_valid_his[0]))? det3d_info.score_3d_chs: 0;  
-		//det3d_info.score_3d_int    = ((int_score == det3d_info.int_valid_his[0]))? det3d_info.score_3d_int: 0;            
-		det3d_info.chs_valid_his[0]= chessbd_score; 
-		det3d_info.int_valid_his[0]= int_score;  
+		det3d_info.score_3d_chs    = ((chessbd_score == det3d_info.chs_valid_his[0]))? det3d_info.score_3d_chs: 0;
+		//det3d_info.score_3d_int    = ((int_score == det3d_info.int_valid_his[0]))? det3d_info.score_3d_int: 0;
+		det3d_info.chs_valid_his[0]= chessbd_score;
+		det3d_info.int_valid_his[0]= int_score;
 
 
 		for (m = 0; m < 8; m++){
-			tmp1= tmp1 + (det3d_info.chs_valid_his[m]); 
+			tmp1= tmp1 + (det3d_info.chs_valid_his[m]);
 			tmp2= tmp2 + (det3d_info.int_valid_his[m]);
-		}        
+		}
 		det3d_info.score_3d_chs = det3d_info.score_3d_chs + tmp1;
 		det3d_info.score_3d_int = det3d_info.score_3d_int + tmp2;
 		if(det3d_debug)
@@ -176,7 +176,7 @@ static void det3d_accumulate_score(int lr_score, int tb_score, int int_score, in
 		det3d_info.score_3d_chs = (det3d_info.score_3d_chs > CHESSBOAD_FMT_SCORE_MAX) ? CHESSBOAD_FMT_SCORE_MAX : det3d_info.score_3d_chs;
 		det3d_info.score_3d_chs = (det3d_info.score_3d_chs < CHESSBOAD_FMT_SCORE_MIN) ? CHESSBOAD_FMT_SCORE_MIN : det3d_info.score_3d_chs;
 		det3d_info.score_3d_int = (det3d_info.score_3d_int > INTERLACE_FMT_SCORE_MAX) ? INTERLACE_FMT_SCORE_MAX : det3d_info.score_3d_int;
-		det3d_info.score_3d_int = (det3d_info.score_3d_int < INTERLACE_FMT_SCORE_MIN) ? INTERLACE_FMT_SCORE_MIN : det3d_info.score_3d_int;        
+		det3d_info.score_3d_int = (det3d_info.score_3d_int < INTERLACE_FMT_SCORE_MIN) ? INTERLACE_FMT_SCORE_MIN : det3d_info.score_3d_int;
 	}
 
 }
@@ -185,42 +185,42 @@ static void det3d_accumulate_score(int lr_score, int tb_score, int int_score, in
  * detect 3D format
  * execute one or more frame after init;
  */
-enum det3d_fmt_e det3d_fmt_detect(void) 
+enum det3d_fmt_e det3d_fmt_detect(void)
 {
 	//FW registers
 	int chessbd_hor_rate = 31;// 8bits: norm to 16
 	//int chessbd_ver_rate = 31;// 8bits: norm to 16
-	int chessbd_hor_thrd = 4; // 8bits: 
-	int chessbd_ver_thrd = 4; // 8bits: 
+	int chessbd_hor_thrd = 4; // 8bits:
+	int chessbd_ver_thrd = 4; // 8bits:
 
 	// local FW variables
 	int m;
-	int tmp_sp_lr, tmp_sp_tb;   
-	int tmp_lr, tmp_tb, tmp1, tmp2; 
+	int tmp_sp_lr, tmp_sp_tb;
+	int tmp_lr, tmp_tb, tmp1, tmp2;
 	int tmp_chs, tmp_int;
-	int tmp_symtc_lr, tmp_symtc_tb, tmp_frmstill;  
+	int tmp_symtc_lr, tmp_symtc_tb, tmp_frmstill;
 	int chessbd_hor_valid, chessbd_ver_valid;
 	//int dump_valid = 0;
-	//static int call_first = 1;  
+	//static int call_first = 1;
 
-	if (det3d_info.nfrm < (FRAME_MAX)) 
+	if (det3d_info.nfrm < (FRAME_MAX))
 		det3d_info.nfrm++;
-	else              
+	else
 		det3d_info.nfrm = 256; // reset to smaller number
 
 	// Split line contribution
-	tmp_sp_lr = READ_CBUS_REG_BITS(DET3D_RO_SPLT_HT, DET3D_SPLIT_HT_VAILID_BIT, DET3D_SPLIT_HT_VAILID_WID)
-		+ READ_CBUS_REG_BITS(DET3D_RO_SPLT_HB, DET3D_SPLIT_HB_VAILID_BIT, DET3D_SPLIT_HB_VAILID_WID);
-	tmp_sp_tb = READ_CBUS_REG_BITS(DET3D_RO_SPLT_VL, DET3D_SPLIT_VL_VAILID_BIT, DET3D_SPLIT_VL_VAILID_WID)
-		+ READ_CBUS_REG_BITS(DET3D_RO_SPLT_VR, DET3D_SPLIT_VR_VAILID_BIT, DET3D_SPLIT_VR_VAILID_WID);
+	tmp_sp_lr = READ_DET3D_REG_BITS(DET3D_RO_SPLT_HT, DET3D_SPLIT_HT_VAILID_BIT, DET3D_SPLIT_HT_VAILID_WID)
+		+ READ_DET3D_REG_BITS(DET3D_RO_SPLT_HB, DET3D_SPLIT_HB_VAILID_BIT, DET3D_SPLIT_HB_VAILID_WID);
+	tmp_sp_tb = READ_DET3D_REG_BITS(DET3D_RO_SPLT_VL, DET3D_SPLIT_VL_VAILID_BIT, DET3D_SPLIT_VL_VAILID_WID)
+		+ READ_DET3D_REG_BITS(DET3D_RO_SPLT_VR, DET3D_SPLIT_VR_VAILID_BIT, DET3D_SPLIT_VR_VAILID_WID);
 
 	// protect static graphics pattern
 	if ((tmp_sp_lr == 2)&&(tmp_sp_tb == 2)) {
-		tmp_sp_lr = -1; 
+		tmp_sp_lr = -1;
 		tmp_sp_tb = -1; // -1: bias towards 2D; 0: keep previous status
 	}
 
-	// 8x8 statistics scores for being LR and TB   
+	// 8x8 statistics scores for being LR and TB
 	tmp_lr = tmp_sp_lr
 		+ read_cbus_reg_signed_bits(DET3D_RO_MAT_LUMA_LR, DET3D_LUMA_LR_SUM_BIT, DET3D_LUMA_LR_SUM_WID)
 		+ read_cbus_reg_signed_bits(DET3D_RO_MAT_CHRV_LR, DET3D_CHRV_LR_SUM_BIT, DET3D_CHRV_LR_SUM_WID)
@@ -242,50 +242,50 @@ enum det3d_fmt_e det3d_fmt_detect(void)
 	tmp_symtc_tb = 0;
 
 	for (m=0; m<8; m++){
-		tmp_symtc_lr = tmp_symtc_lr 
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_LUMA_LR, DET3D_LUMA_LR_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_CHRU_LR, DET3D_CHRU_LR_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_CHRV_LR, DET3D_CHRV_LR_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_HEDG_LR, DET3D_HEDG_LR_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_VEDG_LR, DET3D_VEDG_LR_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_MOTN_LR, DET3D_MOTN_LR_SYMTC_BIT + m, 1);
+		tmp_symtc_lr = tmp_symtc_lr
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_LUMA_LR, DET3D_LUMA_LR_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_CHRU_LR, DET3D_CHRU_LR_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_CHRV_LR, DET3D_CHRV_LR_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_HEDG_LR, DET3D_HEDG_LR_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_VEDG_LR, DET3D_VEDG_LR_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_MOTN_LR, DET3D_MOTN_LR_SYMTC_BIT + m, 1);
 		tmp_symtc_tb = tmp_symtc_tb
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_LUMA_TB, DET3D_LUMA_TB_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_CHRU_TB, DET3D_CHRU_TB_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_CHRV_TB, DET3D_CHRV_TB_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_HEDG_TB, DET3D_HEDG_TB_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_VEDG_TB, DET3D_VEDG_TB_SYMTC_BIT + m, 1)
-			+ READ_CBUS_REG_BITS(DET3D_RO_MAT_MOTN_TB, DET3D_MOTN_TB_SYMTC_BIT + m, 1);
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_LUMA_TB, DET3D_LUMA_TB_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_CHRU_TB, DET3D_CHRU_TB_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_CHRV_TB, DET3D_CHRV_TB_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_HEDG_TB, DET3D_HEDG_TB_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_VEDG_TB, DET3D_VEDG_TB_SYMTC_BIT + m, 1)
+			+ READ_DET3D_REG_BITS(DET3D_RO_MAT_MOTN_TB, DET3D_MOTN_TB_SYMTC_BIT + m, 1);
 	}
 
-	tmp_symtc_lr = tmp_symtc_lr > LR_SYMMETRY_LOWER_LIMIT;     
-	tmp_symtc_tb = tmp_symtc_tb > TB_SYMMETRY_LOWER_LIMIT; 
-	tmp_frmstill = READ_CBUS_REG_BITS(DET3D_RO_FRM_MOTN, DET3D_FRAME_MOTION_BIT, DET3D_FRAME_MOTION_WID) < 100;
+	tmp_symtc_lr = tmp_symtc_lr > LR_SYMMETRY_LOWER_LIMIT;
+	tmp_symtc_tb = tmp_symtc_tb > TB_SYMMETRY_LOWER_LIMIT;
+	tmp_frmstill = READ_DET3D_REG_BITS(DET3D_RO_FRM_MOTN, DET3D_FRAME_MOTION_BIT, DET3D_FRAME_MOTION_WID) < 100;
 
-	// if FrmStill && score>=0, force score decrease 1 
-	if (tmp_frmstill && (tmp_lr >= -1)) 
-		tmp_lr = tmp_lr - 1; 
-	if (tmp_frmstill && (tmp_tb >= -1)) 
-		tmp_tb = tmp_tb - 1; 
+	// if FrmStill && score>=0, force score decrease 1
+	if (tmp_frmstill && (tmp_lr >= -1))
+		tmp_lr = tmp_lr - 1;
+	if (tmp_frmstill && (tmp_tb >= -1))
+		tmp_tb = tmp_tb - 1;
 
-	// if FrmStill && symtc && score>=0, force score to 0/-1 
-	//if (tmp_frmstill&&tmp_symtc_lr&&(tmp_lr>=0)) tmp_lr = 0; 
-	//if (tmp_frmstill&&tmp_symtc_tb&&(tmp_tb>=0)) tmp_tb = 0;     
+	// if FrmStill && symtc && score>=0, force score to 0/-1
+	//if (tmp_frmstill&&tmp_symtc_lr&&(tmp_lr>=0)) tmp_lr = 0;
+	//if (tmp_frmstill&&tmp_symtc_tb&&(tmp_tb>=0)) tmp_tb = 0;
 
 	//ChessBoard/interlace mode score
-	tmp1 = READ_CBUS_REG_BITS(DET3D_RO_DET_CB_HOR, DET3D_CHESSBD_HOR_VALUE_BIT, DET3D_CHESSBD_HOR_VALUE_WID);
-	tmp2 = READ_CBUS_REG_BITS(DET3D_RO_DET_CB_HOR, DET3D_CHESSBD_NHOR_VALUE_BIT, DET3D_CHESSBD_NHOR_VALUE_WID);
+	tmp1 = READ_DET3D_REG_BITS(DET3D_RO_DET_CB_HOR, DET3D_CHESSBD_HOR_VALUE_BIT, DET3D_CHESSBD_HOR_VALUE_WID);
+	tmp2 = READ_DET3D_REG_BITS(DET3D_RO_DET_CB_HOR, DET3D_CHESSBD_NHOR_VALUE_BIT, DET3D_CHESSBD_NHOR_VALUE_WID);
 	chessbd_hor_valid = tmp1 > (((tmp2 * chessbd_hor_rate) >> 4) + chessbd_hor_thrd);
 
-	tmp1 = READ_CBUS_REG_BITS(DET3D_RO_DET_CB_VER, DET3D_CHESSBD_VER_VALUE_BIT, DET3D_CHESSBD_VER_VALUE_WID);
-	tmp2 = READ_CBUS_REG_BITS(DET3D_RO_DET_CB_VER, DET3D_CHESSBD_NVER_VALUE_BIT, DET3D_CHESSBD_NVER_VALUE_WID);	
-	chessbd_ver_valid = tmp1 > (((tmp2 * chessbd_vrate) >> 4) + chessbd_ver_thrd);  
+	tmp1 = READ_DET3D_REG_BITS(DET3D_RO_DET_CB_VER, DET3D_CHESSBD_VER_VALUE_BIT, DET3D_CHESSBD_VER_VALUE_WID);
+	tmp2 = READ_DET3D_REG_BITS(DET3D_RO_DET_CB_VER, DET3D_CHESSBD_NVER_VALUE_BIT, DET3D_CHESSBD_NVER_VALUE_WID);
+	chessbd_ver_valid = tmp1 > (((tmp2 * chessbd_vrate) >> 4) + chessbd_ver_thrd);
 
 	tmp_chs = chessbd_hor_valid & chessbd_ver_valid;
 	tmp_chs = 2 * tmp_chs - 1;
 	tmp_int = (chessbd_hor_valid==0) & chessbd_ver_valid;
 	tmp_int = 2 * tmp_int - 1;
-	
+
 	det3d_accumulate_score(tmp_lr, tmp_tb, tmp_int, tmp_chs);
 
 	// quick reset to get faster converse
@@ -293,7 +293,7 @@ enum det3d_fmt_e det3d_fmt_detect(void)
 		det3d_info.score_3d_lr = 0;
 
 	if (((tmp_tb > 8) && (tmp_lr < -8) && (det3d_info.score_3d_tb < -127)) || ((det3d_info.tscore_3d_tb_accum >= 4) && (det3d_info.score_3d_tb > 63)))
-		det3d_info.score_3d_tb = 0;     
+		det3d_info.score_3d_tb = 0;
 
 	if ((det3d_info.score_3d_chs > CHESSBOADE_SCORE_LOWER_LIMIT) && (det3d_info.score_3d_int < NOT_INTERLACE_SCORE_UPPER_LIMIT)){
 		det3d_info.tfw_det3d_fmt= TVIN_TFMT_3D_DET_CHESSBOARD;
@@ -309,21 +309,20 @@ enum det3d_fmt_e det3d_fmt_detect(void)
 		det3d_info.tfw_det3d_fmt = TVIN_TFMT_3D_TB;
 	}else if ((det3d_info.score_3d_tb < NOT_LR_SCORE_UPPER_LIMIT) && (det3d_info.score_3d_lr < NOT_TB_SCORE_UPPER_LIMIT)){
 		det3d_info.tfw_det3d_fmt = TVIN_TFMT_2D;
-	}else{ 
+	}else{
 		// keep previous status
 		det3d_info.tfw_det3d_fmt = det3d_info.tfw_det3d_fmt;
 
-		if ((det3d_info.score_3d_lr > LR_SCORE_LOWER_LIMIT) && (det3d_info.score_3d_tb > TB_SCORE_LOWER_LIMIT)){ 
+		if ((det3d_info.score_3d_lr > LR_SCORE_LOWER_LIMIT) && (det3d_info.score_3d_tb > TB_SCORE_LOWER_LIMIT)){
 			// if both LR and TB detected, reset the score
 			det3d_info.score_3d_lr = 0;
 			det3d_info.score_3d_tb = 0;
 		}
-	}  
+	}
 
-#if defined DER3D_DEBUG_EN
+	if(det3d_debug)
 	pr_info("det3d:frame = %d, 3D_fmt = %d, score_3d_lr = %d, score_3d_tb = %d, score_3d_int = %d, score_3d_chs = %d",
 			det3d_info.nfrm, det3d_info.tfw_det3d_fmt, det3d_info.score_3d_lr, det3d_info.score_3d_tb, det3d_info.score_3d_int, det3d_info.score_3d_chs);
-#endif
 	return det3d_info.tfw_det3d_fmt;
 }
 
diff --git a/drivers/amlogic/deinterlace/detect3d.h b/drivers/amlogic/deinterlace/detect3d.h
index 2bcb1f6c2bfc..fba2a535833d 100755
--- a/drivers/amlogic/deinterlace/detect3d.h
+++ b/drivers/amlogic/deinterlace/detect3d.h
@@ -1,7 +1,7 @@
 #ifndef _DET3D_H
 #define _DET3D_H
 
-#if (MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TV)||(MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TVD)||( MESON_CPU_TYPE==MESON_CPU_TYPE_MESONG9TV) 
+#if (MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TV)||(MESON_CPU_TYPE==MESON_CPU_TYPE_MESON6TVD)||( MESON_CPU_TYPE==MESON_CPU_TYPE_MESONG9TV)
 //***************************************************************************
 //******** DET3D REGISTERS ********
 //***************************************************************************
@@ -11,7 +11,7 @@
     #define DET3D_EN_BIT					5
     #define DET3D_EN_WID					1
 
-//#define DET3D_MOTN_CFG					0x1734  
+//#define DET3D_MOTN_CFG					0x1734
     #define DET3D_INTR_EN_BIT					16
     #define DET3D_INTR_EN_WID					1
     #define DET3D_MOTION_MODE_BIT				8
@@ -246,7 +246,7 @@ typedef struct det3d_info_s {
 	//Frame counter, max number is defined in FRAME_MAX macro
 	int nfrm;
 
-	//3D format 
+	//3D format
 	int tfw_det3d_fmt;
 
 	//signed number, when the score is close to 0, it is means we can not confirm if input is LR format;
@@ -261,7 +261,7 @@ typedef struct det3d_info_s {
 
 	//
 	int tscore_3d_lr_accum;
-	int tscore_3d_tb_accum; 
+	int tscore_3d_tb_accum;
 
 	//
 	int score_3d_chs;
@@ -290,6 +290,17 @@ typedef enum det3d_fmt_e {
 //****************************************************************************
 extern void det3d_enable(bool flag);
 extern enum det3d_fmt_e det3d_fmt_detect(void);
+#if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV)
+#define WRITE_DET3D_REG(x,val)				WRITE_VCBUS_REG(x,val)
+#define WRITE_DET3D_REG_BITS(x,val,start,length)		WRITE_VCBUS_REG_BITS(x,val,start,length)
+#define READ_DET3D_REG(x)					READ_VCBUS_REG(x)
+#define READ_DET3D_REG_BITS(x,start,length)		READ_VCBUS_REG_BITS(x,start,length)
+#else
+#define WRITE_DET3D_REG(x,val)				WRITE_CBUS_REG(x,val)
+#define WRITE_DET3D_REG_BITS(x,val,start,length)		WRITE_CBUS_REG_BITS(x,val,start,length)
+#define READ_DET3D_REG(x)					READ_CBUS_REG(x)
+#define READ_DET3D_REG_BITS(x,start,length)		READ_CBUS_REG_BITS(x,start,length)
+#endif
 
 #endif  // _DET3D_H
 
-- 
2.19.0

