From 29ac8bc9af2cf0e40ff7b06e7176700a802f8ecf Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Wed, 10 Dec 2014 14:54:54 +0800
Subject: [PATCH 5185/5965] PD#99700: lcd driver: Optimize mipi-dsi init code
 function, to avoid overflow error

Squashed commit of the following:

commit 4037dc8ad39a3481f1da55ff1df22506ec28a87d
Author: Evoke Zhang <evoke.zhang@amlogic.com>
Date:   Mon Nov 17 11:04:18 2014 +0800

    PD#99700: correct lcd_ports_ctrl mistake

    Change-Id: I4b9b8c0e27ff616ba3d0b0b2a6d88866cef2ddd2

commit 9c3984f58d249c10007ac222ed3219d537897987
Author: Evoke Zhang <evoke.zhang@amlogic.com>
Date:   Fri Nov 14 09:28:38 2014 +0800

    PD#99700: lcd driver: Optimize mipi-dsi init code function, to avoid overflow error

    Change-Id: I390338558caa14cc10bbfd3f1731812fa3ed3fe2

Change-Id: I0d11a79e7532f484591819d1a158295a94e8e7c4
---
 arch/arm/mach-meson6/lcd/lcd_config.c     |  4 +--
 arch/arm/mach-meson6/lcd/lcd_config.h     | 17 +++++++++-
 arch/arm/mach-meson8/lcd/lcd_config.c     | 18 +++++------
 arch/arm/mach-meson8/lcd/lcd_config.h     | 38 ++++++++++++++++++++++-
 arch/arm/mach-meson8/lcd/mipi_dsi_util.c  | 15 ++++++++-
 arch/arm/mach-meson8b/lcd/lcd_config.c    | 12 +++----
 arch/arm/mach-meson8b/lcd/lcd_config.h    | 28 ++++++++++++++++-
 arch/arm/mach-meson8b/lcd/mipi_dsi_util.c | 15 ++++++++-
 drivers/amlogic/display/vout/lcdoutc.c    | 20 ++++++++++--
 9 files changed, 143 insertions(+), 24 deletions(-)

diff --git a/arch/arm/mach-meson6/lcd/lcd_config.c b/arch/arm/mach-meson6/lcd/lcd_config.c
index b08daaa74ee3..fdfd9827faaa 100755
--- a/arch/arm/mach-meson6/lcd/lcd_config.c
+++ b/arch/arm/mach-meson6/lcd/lcd_config.c
@@ -75,9 +75,9 @@ static void lcd_ports_ctrl_lvds(Bool_t status)
 	if (status) {
 		WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 1, 3, 1); //enable lvds fifo
 		if (lcd_Conf->lcd_basic.lcd_bits == 6)
-			WRITE_LCD_REG_BITS(LVDS_PHY_CNTL4, 0x27, 0, 7);	//enable LVDS 3 channels
+			WRITE_LCD_REG_BITS(LVDS_PHY_CNTL4, LVDS_LANE_COUNT_3, BIT_PHY_LANE, 7);
 		else
-			WRITE_LCD_REG_BITS(LVDS_PHY_CNTL4, 0x2f, 0, 7); //enable LVDS 4 channels
+			WRITE_LCD_REG_BITS(LVDS_PHY_CNTL4, LVDS_LANE_COUNT_4, BIT_PHY_LANE, 7);
 	}
 	else {
 		WRITE_LCD_REG_BITS(LVDS_PHY_CNTL3, 0, 0, 1);
diff --git a/arch/arm/mach-meson6/lcd/lcd_config.h b/arch/arm/mach-meson6/lcd/lcd_config.h
index 95009cb0addb..e50e4a8a12b1 100755
--- a/arch/arm/mach-meson6/lcd/lcd_config.h
+++ b/arch/arm/mach-meson6/lcd/lcd_config.h
@@ -8,7 +8,7 @@
 //lcd driver version
 //**********************************
 #define LCD_DRV_TYPE      "c6"
-#define LCD_DRV_DATE      "20140903"
+#define LCD_DRV_DATE      "20141113"
 //**********************************
 
 /* for GAMMA_CNTL_PORT */
@@ -175,4 +175,19 @@ static const unsigned od_table[4] = {1,2,4,8};
 static const unsigned div_pre_table[6] = {1,2,3,4,5,6};
 //********************************************//
 
+//********************************************//
+//PHY Config
+//********************************************//
+#define BIT_PHY_LANE             0 //[6:0]
+
+//LVDS
+#define LVDS_LANE_0              (1 << 0)
+#define LVDS_LANE_1              (1 << 1)
+#define LVDS_LANE_2              (1 << 2)
+#define LVDS_LANE_3              (1 << 3)
+#define LVDS_LANE_CLK            (1 << 5)
+#define LVDS_LANE_COUNT_3        (LVDS_LANE_CLK | LVDS_LANE_0 | LVDS_LANE_1 | LVDS_LANE_2)
+#define LVDS_LANE_COUNT_4        (LVDS_LANE_CLK | LVDS_LANE_0 | LVDS_LANE_1 | LVDS_LANE_2 | LVDS_LANE_3)
+//********************************************//
+
 #endif
diff --git a/arch/arm/mach-meson8/lcd/lcd_config.c b/arch/arm/mach-meson8/lcd/lcd_config.c
index 9a905e5629ba..8653bf6bcf8a 100755
--- a/arch/arm/mach-meson8/lcd/lcd_config.c
+++ b/arch/arm/mach-meson8/lcd/lcd_config.c
@@ -82,9 +82,9 @@ static void lcd_ports_ctrl_lvds(Bool_t status)
 	if (status) {
 		WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 1, 3, 1); //enable lvds fifo
 		if (lcd_Conf->lcd_basic.lcd_bits == 6)
-			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1e, 11, 5);	//enable LVDS phy 3 channels
+			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, LVDS_LANE_COUNT_3, BIT_DPHY_LANE, 5);
 		else
-			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1f, 11, 5);	//enable LVDS phy 4 channels
+			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, LVDS_LANE_COUNT_4, BIT_DPHY_LANE, 5);
 	}
 	else {
 		WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, 0x0);
@@ -100,16 +100,16 @@ static void lcd_ports_ctrl_mipi(Bool_t status)
     if (status) {
         switch (lcd_Conf->lcd_control.mipi_config->lane_num) {
             case 1:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x11, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_1, BIT_DPHY_LANE, 5);
                 break;
             case 2:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x19, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_2, BIT_DPHY_LANE, 5);
                 break;
             case 3:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1d, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_3, BIT_DPHY_LANE, 5);
                 break;
             case 4:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1f, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_4, BIT_DPHY_LANE, 5);
                 break;
             default:
                 break;
@@ -129,13 +129,13 @@ static void lcd_ports_ctrl_edp(Bool_t status)
 	if (status) {
 		switch (lcd_Conf->lcd_control.edp_config->lane_count) {
 			case 1:
-				WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x18, 11, 5);
+				WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, EDP_LANE_COUNT_1, BIT_DPHY_LANE, 5);
 				break;
 			case 2:
-				WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1c, 11, 5);
+				WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, EDP_LANE_COUNT_2, BIT_DPHY_LANE, 5);
 				break;
 			case 4:
-				WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1f, 11, 5);
+				WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, EDP_LANE_COUNT_4, BIT_DPHY_LANE, 5);
 				break;
 			default:
 				break;
diff --git a/arch/arm/mach-meson8/lcd/lcd_config.h b/arch/arm/mach-meson8/lcd/lcd_config.h
index e6b12ca948c4..f0a49a159e3b 100755
--- a/arch/arm/mach-meson8/lcd/lcd_config.h
+++ b/arch/arm/mach-meson8/lcd/lcd_config.h
@@ -7,7 +7,7 @@
 //lcd driver version
 //**********************************
 #define LCD_DRV_TYPE      "c8"
-#define LCD_DRV_DATE      "20140903"
+#define LCD_DRV_DATE      "20141113"
 //**********************************
 
 /* for GAMMA_CNTL_PORT */
@@ -187,4 +187,40 @@ static const unsigned edp_div0_table[15] = {1,2,3,4,5,7,8,9,11,13,17,19,23,29,31
 static const unsigned edp_div1_table[8] = {1,2,4,5,6,7,9,13};
 //********************************************//
 
+//********************************************//
+//DPHY Config
+//********************************************//
+#define BIT_DPHY_LANE            11 //[15:11]
+
+//LVDS
+#define LVDS_LANE_0              (1 << 4)
+#define LVDS_LANE_1              (1 << 3)
+#define LVDS_LANE_2              (1 << 1)
+#define LVDS_LANE_3              (1 << 0)
+#define LVDS_LANE_CLK            (1 << 2)
+#define LVDS_LANE_COUNT_3        (LVDS_LANE_CLK | LVDS_LANE_0 | LVDS_LANE_1 | LVDS_LANE_2)
+#define LVDS_LANE_COUNT_4        (LVDS_LANE_CLK | LVDS_LANE_0 | LVDS_LANE_1 | LVDS_LANE_2 | LVDS_LANE_3)
+
+//MIPI-DSI
+#define MIPI_DSI_LANE_0          (1 << 4)
+#define MIPI_DSI_LANE_1          (1 << 3)
+#define MIPI_DSI_LANE_2          (1 << 2)
+#define MIPI_DSI_LANE_3          (1 << 1)
+#define MIPI_DSI_LANE_CLK        (1 << 0)
+#define MIPI_DSI_LANE_COUNT_1    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0)
+#define MIPI_DSI_LANE_COUNT_2    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0 | MIPI_DSI_LANE_1)
+#define MIPI_DSI_LANE_COUNT_3    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0 | MIPI_DSI_LANE_1 | MIPI_DSI_LANE_2)
+#define MIPI_DSI_LANE_COUNT_4    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0 | MIPI_DSI_LANE_1 | MIPI_DSI_LANE_2 | MIPI_DSI_LANE_3)
+
+//eDP
+#define EDP_LANE_AUX             (1 << 4)
+#define EDP_LANE_0               (1 << 3)
+#define EDP_LANE_1               (1 << 2)
+#define EDP_LANE_2               (1 << 1)
+#define EDP_LANE_3               (1 << 0)
+#define EDP_LANE_COUNT_1         (EDP_LANE_AUX | EDP_LANE_0)
+#define EDP_LANE_COUNT_2         (EDP_LANE_AUX | EDP_LANE_0 | EDP_LANE_1)
+#define EDP_LANE_COUNT_4         (EDP_LANE_AUX | EDP_LANE_0 | EDP_LANE_1 | EDP_LANE_2 | EDP_LANE_3)
+//********************************************//
+
 #endif
diff --git a/arch/arm/mach-meson8/lcd/mipi_dsi_util.c b/arch/arm/mach-meson8/lcd/mipi_dsi_util.c
index 02030f25b3f5..4bc890ea506f 100755
--- a/arch/arm/mach-meson8/lcd/mipi_dsi_util.c
+++ b/arch/arm/mach-meson8/lcd/mipi_dsi_util.c
@@ -120,6 +120,10 @@ static void print_info(void)
                     DPRINT("    0x%02x,%d,\n", dsi_config->dsi_init_on[i], dsi_config->dsi_init_on[i+1]);
                 }
             }
+            else if ((dsi_config->dsi_init_on[i] & 0xf) == 0x0) {
+                DPRINT("dsi_init_on wrong data_type: 0x%02x\n", dsi_config->dsi_init_on[i]);
+                break;
+            }
             else {
                 n = 3 + dsi_config->dsi_init_on[i+2];
                 DPRINT("    ");
@@ -148,6 +152,10 @@ static void print_info(void)
                     DPRINT("    0x%02x,%d,\n", dsi_config->dsi_init_off[i], dsi_config->dsi_init_off[i+1]);
                 }
             }
+            else if ((dsi_config->dsi_init_off[i] & 0xf) == 0x0) {
+                DPRINT("dsi_init_off wrong data_type: 0x%02x\n", dsi_config->dsi_init_off[i]);
+                break;
+            }
             else {
                 n = 3 + dsi_config->dsi_init_off[i+2];
                 DPRINT("    ");
@@ -339,7 +347,7 @@ static unsigned int generic_if_rd(unsigned int address)
         lcd_print(" Error Address : %x\n", address);
     }
 
-    data_out = READ_DSI_REG(address);
+    data_out = READ_LCD_REG(address);
 
     return data_out;
 }
@@ -522,6 +530,10 @@ int dsi_write_cmd(unsigned char* payload)
             else
                 mdelay(payload[i+1]);
         }
+        else if ((payload[i] & 0xf) == 0x0) {
+            DPRINT("[error]dsi data_type: 0x%02x\n", payload[i]);
+            break;
+        }
         else {
             j = 3 + payload[i+2]; //payload[i+2] is parameter num
             switch (payload[i]) {//analysis data_type
@@ -553,6 +565,7 @@ int dsi_write_cmd(unsigned char* payload)
                     break;
                 default:
                     DPRINT("un-support data_type: 0x%02x\n", payload[i]);
+                    break;
             }
         }
         i += j;
diff --git a/arch/arm/mach-meson8b/lcd/lcd_config.c b/arch/arm/mach-meson8b/lcd/lcd_config.c
index 81b89f8646e3..1b24896178ad 100755
--- a/arch/arm/mach-meson8b/lcd/lcd_config.c
+++ b/arch/arm/mach-meson8b/lcd/lcd_config.c
@@ -74,9 +74,9 @@ static void lcd_ports_ctrl_lvds(Bool_t status)
 	if (status) {
 		WRITE_LCD_REG_BITS(LVDS_GEN_CNTL, 1, 3, 1); //enable lvds fifo
 		if (lcd_Conf->lcd_basic.lcd_bits == 6)
-			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1e, 11, 5);	//enable LVDS phy 3 channels
+			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, LVDS_LANE_COUNT_3, BIT_DPHY_LANE, 5);
 		else
-			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1f, 11, 5);	//enable LVDS phy 4 channels
+			WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, LVDS_LANE_COUNT_4, BIT_DPHY_LANE, 5);
 	}
 	else {
 		WRITE_LCD_CBUS_REG(HHI_DIF_CSI_PHY_CNTL1, 0x0);
@@ -92,16 +92,16 @@ static void lcd_ports_ctrl_mipi(Bool_t status)
     if (status) {
         switch (lcd_Conf->lcd_control.mipi_config->lane_num) {
             case 1:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x14, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_1, BIT_DPHY_LANE, 5);
                 break;
             case 2:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1c, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_2, BIT_DPHY_LANE, 5);
                 break;
             case 3:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1e, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_3, BIT_DPHY_LANE, 5);
                 break;
             case 4:
-                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, 0x1f, 11, 5);
+                WRITE_LCD_CBUS_REG_BITS(HHI_DIF_CSI_PHY_CNTL3, MIPI_DSI_LANE_COUNT_4, BIT_DPHY_LANE, 5);
                 break;
             default:
                 break;
diff --git a/arch/arm/mach-meson8b/lcd/lcd_config.h b/arch/arm/mach-meson8b/lcd/lcd_config.h
index 1696cf05dc36..574f0905693a 100755
--- a/arch/arm/mach-meson8b/lcd/lcd_config.h
+++ b/arch/arm/mach-meson8b/lcd/lcd_config.h
@@ -7,7 +7,7 @@
 //lcd driver version
 //**********************************
 #define LCD_DRV_TYPE      "c8b"
-#define LCD_DRV_DATE      "20140903"
+#define LCD_DRV_DATE      "20141113"
 //**********************************
 
 /* for GAMMA_CNTL_PORT */
@@ -179,4 +179,30 @@ static const unsigned od_table[4] = {1,2,4,8};
 static const unsigned div_pre_table[6] = {1,2,3,4,5,6};
 //********************************************//
 
+//********************************************//
+//DPHY Config
+//********************************************//
+#define BIT_DPHY_LANE            11 //[15:11]
+
+//LVDS
+#define LVDS_LANE_0              (1 << 4)
+#define LVDS_LANE_1              (1 << 3)
+#define LVDS_LANE_2              (1 << 1)
+#define LVDS_LANE_3              (1 << 0)
+#define LVDS_LANE_CLK            (1 << 2)
+#define LVDS_LANE_COUNT_3        (LVDS_LANE_CLK | LVDS_LANE_0 | LVDS_LANE_1 | LVDS_LANE_2)
+#define LVDS_LANE_COUNT_4        (LVDS_LANE_CLK | LVDS_LANE_0 | LVDS_LANE_1 | LVDS_LANE_2 | LVDS_LANE_3)
+
+//MIPI-DSI
+#define MIPI_DSI_LANE_0          (1 << 4)
+#define MIPI_DSI_LANE_1          (1 << 3)
+#define MIPI_DSI_LANE_2          (1 << 1)
+#define MIPI_DSI_LANE_3          (1 << 0)
+#define MIPI_DSI_LANE_CLK        (1 << 2)
+#define MIPI_DSI_LANE_COUNT_1    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0)
+#define MIPI_DSI_LANE_COUNT_2    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0 | MIPI_DSI_LANE_1)
+#define MIPI_DSI_LANE_COUNT_3    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0 | MIPI_DSI_LANE_1 | MIPI_DSI_LANE_2)
+#define MIPI_DSI_LANE_COUNT_4    (MIPI_DSI_LANE_CLK | MIPI_DSI_LANE_0 | MIPI_DSI_LANE_1 | MIPI_DSI_LANE_2 | MIPI_DSI_LANE_3)
+//********************************************//
+
 #endif
diff --git a/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c b/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c
index 02030f25b3f5..4bc890ea506f 100755
--- a/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c
+++ b/arch/arm/mach-meson8b/lcd/mipi_dsi_util.c
@@ -120,6 +120,10 @@ static void print_info(void)
                     DPRINT("    0x%02x,%d,\n", dsi_config->dsi_init_on[i], dsi_config->dsi_init_on[i+1]);
                 }
             }
+            else if ((dsi_config->dsi_init_on[i] & 0xf) == 0x0) {
+                DPRINT("dsi_init_on wrong data_type: 0x%02x\n", dsi_config->dsi_init_on[i]);
+                break;
+            }
             else {
                 n = 3 + dsi_config->dsi_init_on[i+2];
                 DPRINT("    ");
@@ -148,6 +152,10 @@ static void print_info(void)
                     DPRINT("    0x%02x,%d,\n", dsi_config->dsi_init_off[i], dsi_config->dsi_init_off[i+1]);
                 }
             }
+            else if ((dsi_config->dsi_init_off[i] & 0xf) == 0x0) {
+                DPRINT("dsi_init_off wrong data_type: 0x%02x\n", dsi_config->dsi_init_off[i]);
+                break;
+            }
             else {
                 n = 3 + dsi_config->dsi_init_off[i+2];
                 DPRINT("    ");
@@ -339,7 +347,7 @@ static unsigned int generic_if_rd(unsigned int address)
         lcd_print(" Error Address : %x\n", address);
     }
 
-    data_out = READ_DSI_REG(address);
+    data_out = READ_LCD_REG(address);
 
     return data_out;
 }
@@ -522,6 +530,10 @@ int dsi_write_cmd(unsigned char* payload)
             else
                 mdelay(payload[i+1]);
         }
+        else if ((payload[i] & 0xf) == 0x0) {
+            DPRINT("[error]dsi data_type: 0x%02x\n", payload[i]);
+            break;
+        }
         else {
             j = 3 + payload[i+2]; //payload[i+2] is parameter num
             switch (payload[i]) {//analysis data_type
@@ -553,6 +565,7 @@ int dsi_write_cmd(unsigned char* payload)
                     break;
                 default:
                     DPRINT("un-support data_type: 0x%02x\n", payload[i]);
+                    break;
             }
         }
         i += j;
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index 3f5ab1bbdb0a..b9564b5adba0 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -1679,11 +1679,19 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
                             if (val == 0xff)
                                 break;
                         }
+                        else if ((val & 0xf) == 0x0) {
+                            printk("get dsi_init_on wrong data_type: 0x%02x\n", val);
+                            break;
+                        }
                         else {
                             ret = of_property_read_u32_index(lcd_model_node,"dsi_init_on", (i+2), &val);
-                            i = i + 3 + val;
+                            if (val > 0xffff)
+                                break;
+                            else
+                                i = i + 3 + (val & 0xff);
                         }
                     }
+                    i = (i > DSI_INIT_ON_MAX) ? DSI_INIT_ON_MAX : i;
                     ret = of_property_read_u32_array(lcd_model_node,"dsi_init_on", &lcd_para[0], i);
                     if(ret){
                         printk("faild to get dsi_init_on\n");
@@ -1714,11 +1722,19 @@ static int _get_lcd_model_timing(Lcd_Config_t *pConf, struct platform_device *pd
                             if (val == 0xff)
                                 break;
                         }
+                        else if ((val & 0xf) == 0x0) {
+                            printk("get dsi_init_off wrong data_type: 0x%02x\n", val);
+                            break;
+                        }
                         else {
                             ret = of_property_read_u32_index(lcd_model_node,"dsi_init_off", (i+2), &val);
-                            i = i + 3 + val;
+                            if (val > 0xffff)
+                                break;
+                            else
+                                i = i + 3 + (val & 0xff);
                         }
                     }
+                    i = (i > DSI_INIT_OFF_MAX) ? DSI_INIT_OFF_MAX : i;
                     ret = of_property_read_u32_array(lcd_model_node,"dsi_init_off", &lcd_para[0], i);
                     if(ret){
                         printk("faild to get dsi_init_off\n");
-- 
2.19.0

