From 59e6337be5a9c6cf06b1324f372f38c8fd46eaf0 Mon Sep 17 00:00:00 2001
From: "wenjie.li" <wenjie.li@amlogic.com>
Date: Wed, 10 Dec 2014 15:13:44 +0800
Subject: [PATCH 5186/5965] PD#97989 add function of choice backlight high and
 low level enable

Squashed commit of the following:

commit c8e0cfe92941f2bbd9ad099e089acc0eeaadec42
Author: wenjie.li <wenjie.li@amlogic.com>
Date:   Fri Oct 31 18:04:52 2014 +0800

    PD#97989: fix m102 backlight enable on and off output

    Change-Id: I84e421f4cfe0c37681baeedaa1eae197028d4cc7

commit 222620777d3919703a7594a7dedd134c229d0767
Author: wenjie.li <wenjie.li@amlogic.com>
Date:   Wed Oct 8 10:39:08 2014 +0800

    PD#97989 add enable choice fuction for i2c and mipi backlight control mode

    Change-Id: I2acebd43441f47174166bf4e986b2cb752353d2b

commit c1afb55e4a20c8464bceceeb356028d865e56097
Author: wenjie.li <wenjie.li@amlogic.com>
Date:   Mon Sep 29 15:53:22 2014 +0800

    PD#97989 add function of choice backlight high and low level enable

    Change-Id: Id9eac3a301a9748fab421e04517c975001b0125a

Change-Id: I46429d31702b4aeda025e470d86f5ce662535bcc
---
 arch/arm/boot/dts/amlogic/meson6_g24.dtd      |  2 +-
 arch/arm/boot/dts/amlogic/meson6_g33_1212.dtd |  2 +-
 arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd   |  2 +-
 arch/arm/boot/dts/amlogic/meson6_g33_512M.dtd |  2 +-
 arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd  |  2 +-
 arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd  |  2 +-
 arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd  |  2 +-
 .../arm/boot/dts/amlogic/meson8_k101_512M.dtd |  2 +-
 arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd  |  2 +-
 arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd  |  2 +-
 arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd  |  2 +-
 .../boot/dts/amlogic/meson8b_m101_512M.dtd    |  4 +-
 arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd |  4 +-
 drivers/amlogic/display/backlight/aml_bl.c    | 81 ++++++++++++++++---
 .../display/backlight/aml_bl_extern/aml.dtd   |  6 +-
 .../backlight/aml_bl_extern/aml_bl_extern.c   | 28 ++++++-
 .../backlight/aml_bl_extern/i2c_lp8556.c      | 10 ++-
 .../backlight/aml_bl_extern/mipi_LT070ME05.c  | 10 ++-
 .../backlight/aml_bl_extern/pmu_aml1218.c     | 10 ++-
 drivers/amlogic/display/vout/lcdoutc.c        |  2 +-
 include/linux/amlogic/aml_bl_extern.h         |  2 +
 21 files changed, 141 insertions(+), 38 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson6_g24.dtd b/arch/arm/boot/dts/amlogic/meson6_g24.dtd
index aa836f5038e0..b0c6bd8d76cd 100755
--- a/arch/arm/boot/dts/amlogic/meson6_g24.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6_g24.dtd
@@ -447,7 +447,7 @@
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<0>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
 		
-		bl_gpio_port="GPIOD_1";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIOD_1","1","0";	/** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_D","0";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<400>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson6_g33_1212.dtd b/arch/arm/boot/dts/amlogic/meson6_g33_1212.dtd
index 77f2189919de..a7258af7de53 100755
--- a/arch/arm/boot/dts/amlogic/meson6_g33_1212.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6_g33_1212.dtd
@@ -812,7 +812,7 @@ void root_func(){
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<0>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
 		
-		bl_gpio_port="GPIOD_1";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIOD_1","1","0";	/** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_D","0";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<400>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd b/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd
index 3f0e89c8a9d8..3d9f06ecabb4 100755
--- a/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6_g33_1G.dtd
@@ -812,7 +812,7 @@ void root_func(){
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<0>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
 		
-		bl_gpio_port="GPIOD_1";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIOD_1","1","0";	/** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_D","0";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<400>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson6_g33_512M.dtd b/arch/arm/boot/dts/amlogic/meson6_g33_512M.dtd
index 3f662f199c47..b8dca8ae8db4 100755
--- a/arch/arm/boot/dts/amlogic/meson6_g33_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson6_g33_512M.dtd
@@ -826,7 +826,7 @@ void root_func(){
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<0>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive. decided by hardware design) */
 		
-		bl_gpio_port="GPIOD_1";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIOD_1","1","0";	/** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_D","0";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<400>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
index 76768a869c4a..95d19d826e91 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_1G.dtd
@@ -926,7 +926,7 @@ sdio{
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
index b53b2d6d1186..6f7a2c785190 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k100_2G.dtd
@@ -916,7 +916,7 @@ sdio{
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
index 80c28b646b62..f9b2f7309be2 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_1G.dtd
@@ -857,7 +857,7 @@ sdio{
 		bl_power_on_delay=<100>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<3>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
index 96a3a96889f5..8a6ee3406f9b 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k101_512M.dtd
@@ -858,7 +858,7 @@ sdio{
 		bl_power_on_delay=<100>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<3>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
index 9c94b792ad6d..a02a9933455f 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k102_v1.dtd
@@ -908,7 +908,7 @@ sdio{
 		bl_power_on_delay=<100>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
index c549d5ca755b..4fbf43395b56 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k150_v1.dtd
@@ -871,7 +871,7 @@ sdio{
 		bl_power_on_delay=<100>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<1>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd b/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
index 2ba6d54feeea..5fa9f2225c8b 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k160_v1.dtd
@@ -891,7 +891,7 @@ sdio{
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<4>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
index 1b367ecd11f2..7fa345666817 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m101_512M.dtd
@@ -1030,7 +1030,7 @@ void root_func(){
 		bl_power_on_delay=<200>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<4>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
@@ -1058,7 +1058,7 @@ void root_func(){
 		dev_name ="bl_pmu_aml1218";
 		status = "okay"; /** "disabled" or "okay" */
 
-		gpio_enable = "GPIODV_28"; /** "n" for none */
+		gpio_enable_on_off = "GPIODV_28","1","0"; /** gpio ="n"for none, (on/off:1=output high, 0=output low, 2=input)*/
 		type = <2>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
 		dim_max_min = <0x1 0x1b>;
 	};
diff --git a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
index a559f5260f41..fb10662f06d3 100755
--- a/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m102_1G.dtd
@@ -1009,7 +1009,7 @@ void root_func(){
 		bl_power_on_delay=<110>; /** delay time before backlight power on(unit: ms) */
 		bl_ctrl_method=<4>;	/** backlight control method(0=gpio, 1=pwm_negative, 2=pwm_positive, 3=pwm_combo. 4=extern. decided by hardware design) */
 		
-		bl_gpio_port="GPIODV_28";	/** backlight control gpio port */
+		bl_gpio_port_on_off="GPIODV_28","1","0"; /** backlight control gpio port (on/off:1=output high, 0=output low, 2=input)*/
 		bl_gpio_dim_max_min=<0x0 0xf>;	/** brightness diming level_max, level_min : (0x0~0xf, negative logic, only for gpio control method) */
 		bl_pwm_port_gpio_used="PWM_C","1";	/** pwm_port_name(for pwm control method), pwm_gpio_used(0=use pwm_port only, 1=use bl_gpio_port to control on/off) */
 		bl_pwm_freq=<300000>;	/** backlight control pwm frequency(unit: Hz, only for pwm control method) */
@@ -1037,7 +1037,7 @@ void root_func(){
 		dev_name ="bl_pmu_aml1218";
 		status = "okay"; /** "disabled" or "okay" */
 
-		gpio_enable = "GPIODV_28"; /** "n" for none */
+		gpio_enable_on_off = "GPIODV_28","1","0"; /** gpio ="n"for none, (on/off:1=output high, 0=output low, 2=input)*/
 		type = <2>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
 		dim_max_min = <0x1 0x1b>;
 	};
diff --git a/drivers/amlogic/display/backlight/aml_bl.c b/drivers/amlogic/display/backlight/aml_bl.c
index 71190a14cb55..3abb19c1dd26 100755
--- a/drivers/amlogic/display/backlight/aml_bl.c
+++ b/drivers/amlogic/display/backlight/aml_bl.c
@@ -43,6 +43,7 @@
 #include <linux/amlogic/aml_lcd_bl.h>
 #include <linux/amlogic/aml_bl_extern.h>
 #endif
+#include <linux/amlogic/vout/lcdoutc.h>
 
 //#define MESON_BACKLIGHT_DEBUG
 #ifdef MESON_BACKLIGHT_DEBUG
@@ -100,6 +101,8 @@ typedef struct {
     unsigned char method;
 
     int gpio;
+    unsigned char gpio_on;
+    unsigned char gpio_off;
     unsigned dim_max;
     unsigned dim_min;
     unsigned char pwm_port;
@@ -175,7 +178,7 @@ static void power_on_bl(int bl_flag)
             aml_set_reg32_bits(P_LED_PWM_REG0, 1, 12, 2);
 #endif
             mdelay(20);
-            bl_gpio_direction_output(bl_config.gpio, 1);
+            bl_gpio_direction_output(bl_config.gpio, bl_config.gpio_on);
             break;
         case BL_CTL_PWM_NEGATIVE:
         case BL_CTL_PWM_POSITIVE:
@@ -228,7 +231,7 @@ static void power_on_bl(int bl_flag)
             mdelay(20);
             if (bl_config.pwm_gpio_used) {
                 if (bl_config.gpio)
-                    bl_gpio_direction_output(bl_config.gpio, 1);
+                    bl_gpio_direction_output(bl_config.gpio, bl_config.gpio_on);
             }
             break;
         case BL_CTL_PWM_COMBO:
@@ -388,13 +391,13 @@ void bl_power_off(int bl_flag)
 
     switch (bl_config.method) {
         case BL_CTL_GPIO:
-            bl_gpio_direction_output(bl_config.gpio, 0);
+            bl_gpio_direction_output(bl_config.gpio, bl_config.gpio_off);
             break;
         case BL_CTL_PWM_NEGATIVE:
         case BL_CTL_PWM_POSITIVE:
             if (bl_config.pwm_gpio_used) {
                 if (bl_config.gpio)
-                    bl_gpio_direction_output(bl_config.gpio, 0);
+                    bl_gpio_direction_output(bl_config.gpio, bl_config.gpio_off);
             }
             switch (bl_config.pwm_port) {
                 case BL_PWM_A:
@@ -1031,9 +1034,9 @@ static inline int _get_backlight_config(struct platform_device *pdev)
         DPRINT("bl control_method: %s(%u)\n", bl_ctrl_method_table[bl_config.method], bl_config.method);
 
         if (bl_config.method == BL_CTL_GPIO) {
-            ret = of_property_read_string(pdev->dev.of_node, "bl_gpio_port", &str);
+            ret = of_property_read_string_index(pdev->dev.of_node, "bl_gpio_port_on_off", 0, &str);
             if (ret) {
-                printk("faild to get bl_gpio_port!\n");
+                printk("faild to get bl_gpio_port_on_off!\n");
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
                 str = "GPIOD_1";
 #elif ((MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B))
@@ -1046,12 +1049,39 @@ static inline int _get_backlight_config(struct platform_device *pdev)
                 if (ret) {
                     printk("faild to alloc bl gpio (%s)!\n", str);
                 }
-                bl_config.gpio = val;
+                bl_config.gpio = val;                
                 DPRINT("bl gpio = %s(%d)\n", str, bl_config.gpio);
             }
             else {
                 bl_config.gpio = -1;
             }
+            ret = of_property_read_string_index(pdev->dev.of_node, "bl_gpio_port_on_off", 1, &str);
+            if (ret) {
+                printk("faild to get bl_gpio_port_on!\n");
+                bl_config.gpio_on = LCD_POWER_GPIO_OUTPUT_HIGH;
+            }
+            else {
+								if (strcmp(str, "2") == 0)
+                    bl_config.gpio_on = LCD_POWER_GPIO_INPUT;
+                else if(strcmp(str, "0") == 0)
+                		bl_config.gpio_on = LCD_POWER_GPIO_OUTPUT_LOW; 
+                else
+                		bl_config.gpio_on = LCD_POWER_GPIO_OUTPUT_HIGH; 		   
+            }
+            ret = of_property_read_string_index(pdev->dev.of_node, "bl_gpio_port_on_off", 2, &str);
+            if (ret) {
+                printk("faild to get bl_gpio_port_off!\n");
+                bl_config.gpio_off = LCD_POWER_GPIO_OUTPUT_LOW;
+            }
+            else {
+								if (strcmp(str, "2") == 0)
+                    bl_config.gpio_off = LCD_POWER_GPIO_INPUT;
+                else if(strcmp(str, "1") == 0)
+                		bl_config.gpio_off = LCD_POWER_GPIO_OUTPUT_HIGH; 
+                else
+                		bl_config.gpio_off = LCD_POWER_GPIO_OUTPUT_LOW; 		   
+            } 	
+            DPRINT("bl gpio_on=%u, bl gpio_off=%u\n", bl_config.gpio_on, bl_config.gpio_off);
             ret = of_property_read_u32_array(pdev->dev.of_node,"bl_gpio_dim_max_min",&bl_para[0],2);
             if (ret) {
                 printk("faild to get bl_gpio_dim_max_min\n");
@@ -1078,9 +1108,9 @@ static inline int _get_backlight_config(struct platform_device *pdev)
                 DPRINT("bl_pwm gpio_used: %u\n", bl_config.pwm_gpio_used);
             }
             if (bl_config.pwm_gpio_used == 1) {
-                ret = of_property_read_string(pdev->dev.of_node, "bl_gpio_port", &str);
+                ret = of_property_read_string(pdev->dev.of_node, "bl_gpio_port_on_off", &str);
                 if (ret) {
-                    printk("faild to get bl_gpio_port!\n");
+                    printk("faild to get bl_gpio_port_on_off!\n");
 #if (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6)
                     str = "GPIOD_1";
 #elif ((MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8) || (MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B))
@@ -1099,7 +1129,34 @@ static inline int _get_backlight_config(struct platform_device *pdev)
                 else {
                     bl_config.gpio = -1;
                 }
+                          ret = of_property_read_string_index(pdev->dev.of_node, "bl_gpio_port_on_off", 1, &str);
+            if (ret) {
+                printk("faild to get bl_gpio_port_on!\n");
+                bl_config.gpio_on = LCD_POWER_GPIO_OUTPUT_HIGH;
+            }
+            else {
+								if (strcmp(str, "2") == 0)
+                    bl_config.gpio_on = LCD_POWER_GPIO_INPUT;
+                else if(strcmp(str, "0") == 0)
+                		bl_config.gpio_on = LCD_POWER_GPIO_OUTPUT_LOW; 
+                else
+                		bl_config.gpio_on = LCD_POWER_GPIO_OUTPUT_HIGH; 		   
             }
+            ret = of_property_read_string_index(pdev->dev.of_node, "bl_gpio_port_on_off", 2, &str);
+            if (ret) {
+                printk("faild to get bl_gpio_port_off!\n");
+                bl_config.gpio_off = LCD_POWER_GPIO_OUTPUT_LOW;
+            }
+            else {
+								if (strcmp(str, "2") == 0)
+                    bl_config.gpio_off = LCD_POWER_GPIO_INPUT;
+                else if(strcmp(str, "1") == 0)
+                		bl_config.gpio_off = LCD_POWER_GPIO_OUTPUT_HIGH; 
+                else
+                		bl_config.gpio_off = LCD_POWER_GPIO_OUTPUT_LOW; 		   
+            } 	
+            DPRINT("gpio_on=%u, gpio_off=%u\n", bl_config.gpio_on, bl_config.gpio_off);
+          }
             ret = of_property_read_string_index(pdev->dev.of_node, "bl_pwm_port_gpio_used", 0, &str);
             if (ret) {
                 printk("faild to get bl_pwm_port_gpio_used!\n");
@@ -1153,7 +1210,7 @@ static inline int _get_backlight_config(struct platform_device *pdev)
             }
             bl_config.pwm_max = (bl_config.pwm_cnt * bl_para[0] / 100);
             bl_config.pwm_min = (bl_config.pwm_cnt * bl_para[1] / 100);
-            DPRINT("bl pwm_duty max=%u\%, min=%u\%\n", bl_para[0], bl_para[1]);
+            DPRINT("bl pwm_duty max=%u%%, min=%u%%\n", bl_para[0], bl_para[1]);
         }
         else if (bl_config.method == BL_CTL_PWM_COMBO) {
             ret = of_property_read_u32(pdev->dev.of_node,"bl_pwm_combo_high_low_level_switch",&val);
@@ -1249,7 +1306,7 @@ static inline int _get_backlight_config(struct platform_device *pdev)
             bl_config.combo_high_pre_div = pwm_pre_div;
             bl_config.combo_high_duty_max = (bl_config.combo_high_cnt * bl_para[1] / 100);
             bl_config.combo_high_duty_min = (bl_config.combo_high_cnt * bl_para[2] / 100);
-            DPRINT("bl pwm_combo high freq=%uHz, duty_max=%u\%, duty_min=%u\%\n", pwm_freq, bl_para[1], bl_para[2]);
+            DPRINT("bl pwm_combo high freq=%uHz, duty_max=%u%%, duty_min=%u%%\n", pwm_freq, bl_para[1], bl_para[2]);
             ret = of_property_read_u32_array(pdev->dev.of_node,"bl_pwm_combo_low_freq_duty_max_min",&bl_para[0],3);
             if (ret) {
                 printk("faild to get bl_pwm_combo_low_freq_duty_max_min\n");
@@ -1268,7 +1325,7 @@ static inline int _get_backlight_config(struct platform_device *pdev)
             bl_config.combo_low_pre_div = pwm_pre_div;
             bl_config.combo_low_duty_max = (bl_config.combo_low_cnt * bl_para[1] / 100);
             bl_config.combo_low_duty_min = (bl_config.combo_low_cnt * bl_para[2] / 100);
-            DPRINT("bl pwm_combo low freq=%uHz, duty_max=%u\%, duty_min=%u\%\n", pwm_freq, bl_para[1], bl_para[2]);
+            DPRINT("bl pwm_combo low freq=%uHz, duty_max=%u%%, duty_min=%u%%\n", pwm_freq, bl_para[1], bl_para[2]);
         }
 
         //pinmux
diff --git a/drivers/amlogic/display/backlight/aml_bl_extern/aml.dtd b/drivers/amlogic/display/backlight/aml_bl_extern/aml.dtd
index b1e0ce993512..e78f1817a21c 100755
--- a/drivers/amlogic/display/backlight/aml_bl_extern/aml.dtd
+++ b/drivers/amlogic/display/backlight/aml_bl_extern/aml.dtd
@@ -14,7 +14,7 @@
 		dev_name ="bl_pmu_aml1218";
 		status = "disabled"; /** "disabled" or "okay" */
 
-		gpio_enable = "GPIODV_28"; /** "n" for none */
+		gpio_enable_on_off = "GPIODV_28","1","0"; /** gpio ="n"for none, (on/off:1=output high, 0=output low, 2=input)*/
 		type = <2>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
 		dim_max_min = <0x1 0x1b>;
 	};
@@ -30,7 +30,7 @@
 		dev_name ="bl_i2c_lp8556";
 		status = "disabled"; /** "disabled" or "okay" */
 
-		gpio_enable = "GPIODV_28"; /** "n" for none */
+		gpio_enable_on_off = "GPIODV_28","1","0"; /** gpio ="n"for none, (on/off:1=output high, 0=output low, 2=input)*/
 		type = <0>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
 		i2c_address = <0x2c>; /** 7bit i2c address */
 		i2c_bus = "i2c_bus_b";
@@ -47,7 +47,7 @@
 		dev_name ="bl_mipi_LT070ME056";
 		status = "disabled"; /** "disabled" or "okay" */
 
-		gpio_enable = "GPIODV_28"; /** "n" for none */
+		gpio_enable_on_off = "GPIODV_28","1","0"; /** gpio ="n"for none, (on/off:1=output high, 0=output low, 2=input)*/
 		type = <2>;	/** bl_extern_driver type: 0=i2c, 1=spi, 2=other */
 		dim_max_min = <255 10>;
 	};
diff --git a/drivers/amlogic/display/backlight/aml_bl_extern/aml_bl_extern.c b/drivers/amlogic/display/backlight/aml_bl_extern/aml_bl_extern.c
index 93b4b6bfc114..a23d2a2c49cf 100644
--- a/drivers/amlogic/display/backlight/aml_bl_extern/aml_bl_extern.c
+++ b/drivers/amlogic/display/backlight/aml_bl_extern/aml_bl_extern.c
@@ -11,6 +11,7 @@
 #include <mach/am_regs.h>
 #include <mach/gpio.h>
 #include <linux/amlogic/aml_bl_extern.h>
+#include <linux/amlogic/vout/lcdoutc.h>
 
 //#define BL_EXT_DEBUG_INFO
 #ifdef BL_EXT_DEBUG_INFO
@@ -72,7 +73,7 @@ int get_bl_extern_dt_data(struct device_node* of_node, struct bl_extern_config_t
     }
     pdata->gpio_used = 0;
     pdata->gpio = GPIO_MAX;
-    ret = of_property_read_string(of_node, "gpio_enable", &str);
+    ret = of_property_read_string_index(of_node, "gpio_enable_on_off", 0, &str);
     if (ret) {
         printk("%s warning: get gpio_enable failed\n", pdata->name);
     }
@@ -88,6 +89,31 @@ int get_bl_extern_dt_data(struct device_node* of_node, struct bl_extern_config_t
         }
         DBG_PRINT("%s: gpio_enable %s\n", pdata->name, ((pdata->gpio_used) ? str:"none"));
     }
+    ret = of_property_read_string_index(of_node, "gpio_enable_on_off", 1, &str);
+    if (ret) {
+        printk("%s warning: get gpio_enable_on failed\n", pdata->name);
+    }
+    else {
+    		if (strncmp(str, "2", 1) == 0)
+    				pdata->gpio_on = LCD_POWER_GPIO_INPUT;
+    		else if (strncmp(str, "0", 1) == 0)
+    				pdata->gpio_on = LCD_POWER_GPIO_OUTPUT_LOW;
+    		else
+    				pdata->gpio_on = LCD_POWER_GPIO_OUTPUT_HIGH;			
+    }
+    ret = of_property_read_string_index(of_node, "gpio_enable_on_off", 2, &str);
+    if (ret) {
+        printk("%s warning: get gpio_enable_off failed\n", pdata->name);
+    }
+    else {
+    		if (strncmp(str, "2", 1) == 0)
+    				pdata->gpio_off = LCD_POWER_GPIO_INPUT;
+    		else if (strncmp(str, "1", 1) == 0)
+    				pdata->gpio_off = LCD_POWER_GPIO_OUTPUT_HIGH;
+    		else
+    				pdata->gpio_off = LCD_POWER_GPIO_OUTPUT_LOW;			
+    }
+    DBG_PRINT("%s: gpio_on = %d, gpio_off = %d \n", pdata->name, pdata->gpio_on, pdata->gpio_off);
     switch (pdata->type) {
         case BL_EXTERN_I2C:
             ret = of_property_read_u32(of_node,"i2c_address",&pdata->i2c_addr);
diff --git a/drivers/amlogic/display/backlight/aml_bl_extern/i2c_lp8556.c b/drivers/amlogic/display/backlight/aml_bl_extern/i2c_lp8556.c
index d8b048ff0378..12aaa3b10064 100755
--- a/drivers/amlogic/display/backlight/aml_bl_extern/i2c_lp8556.c
+++ b/drivers/amlogic/display/backlight/aml_bl_extern/i2c_lp8556.c
@@ -128,7 +128,10 @@ static int bl_extern_power_on(void)
     int ret=0;
 
     if (bl_ext_config->gpio_used > 0) {
-        bl_extern_gpio_direction_output(bl_ext_config->gpio, 1);
+    	if(bl_ext_config->gpio_on == 2)
+    			bl_extern_gpio_direction_input(bl_ext_config->gpio);
+    	else		
+        	bl_extern_gpio_direction_output(bl_ext_config->gpio, bl_ext_config->gpio_on);
     }
 
     while (ending_flag == 0) {
@@ -158,7 +161,10 @@ static int bl_extern_power_off(void)
 {
     bl_status = 0;
     if (bl_ext_config->gpio_used > 0) {
-        bl_extern_gpio_direction_output(bl_ext_config->gpio, 0);
+    	if(bl_ext_config->gpio_off == 2)
+    		bl_extern_gpio_direction_input(bl_ext_config->gpio);
+    	else
+        bl_extern_gpio_direction_output(bl_ext_config->gpio, bl_ext_config->gpio_off);
     }
 
     printk("%s\n", __FUNCTION__);
diff --git a/drivers/amlogic/display/backlight/aml_bl_extern/mipi_LT070ME05.c b/drivers/amlogic/display/backlight/aml_bl_extern/mipi_LT070ME05.c
index c1ddfbdd066a..a7a99bec8440 100755
--- a/drivers/amlogic/display/backlight/aml_bl_extern/mipi_LT070ME05.c
+++ b/drivers/amlogic/display/backlight/aml_bl_extern/mipi_LT070ME05.c
@@ -61,7 +61,10 @@ static int bl_extern_set_level(unsigned int level)
 static int bl_extern_power_on(void)
 {
     if (bl_ext_config->gpio_used > 0) {
-        bl_extern_gpio_direction_output(bl_ext_config->gpio, 1);
+      if(bl_ext_config->gpio_on == 2)
+    			bl_extern_gpio_direction_input(bl_ext_config->gpio);
+    	else		
+        	bl_extern_gpio_direction_output(bl_ext_config->gpio, bl_ext_config->gpio_on);
     }
 
     bl_status = 1;
@@ -74,7 +77,10 @@ static int bl_extern_power_on(void)
 static int bl_extern_power_off(void)
 {
     if (bl_ext_config->gpio_used > 0) {
-        bl_extern_gpio_direction_output(bl_ext_config->gpio, 0);
+      if(bl_ext_config->gpio_off == 2)
+    			bl_extern_gpio_direction_input(bl_ext_config->gpio);
+    	else
+        	bl_extern_gpio_direction_output(bl_ext_config->gpio, bl_ext_config->gpio_off);
     }
 
     printk("%s\n", __FUNCTION__);
diff --git a/drivers/amlogic/display/backlight/aml_bl_extern/pmu_aml1218.c b/drivers/amlogic/display/backlight/aml_bl_extern/pmu_aml1218.c
index ebb6af74338f..d5a747037d0a 100755
--- a/drivers/amlogic/display/backlight/aml_bl_extern/pmu_aml1218.c
+++ b/drivers/amlogic/display/backlight/aml_bl_extern/pmu_aml1218.c
@@ -102,7 +102,10 @@ static int bl_extern_power_on(void)
     }
 #endif
     if (bl_ext_config->gpio_used > 0) {
-        bl_extern_gpio_direction_output(bl_ext_config->gpio, 1);
+    	  if(bl_ext_config->gpio_on == 2)
+    				bl_extern_gpio_direction_input(bl_ext_config->gpio);
+    		else		
+        		bl_extern_gpio_direction_output(bl_ext_config->gpio, bl_ext_config->gpio_on);
     }
 
     printk("%s\n", __FUNCTION__);
@@ -118,7 +121,10 @@ static int bl_extern_power_off(void)
     int ret = 0;
 
     if (bl_ext_config->gpio_used > 0) {
-        bl_extern_gpio_direction_output(bl_ext_config->gpio, 0);
+    		if(bl_ext_config->gpio_off == 2)
+    				bl_extern_gpio_direction_input(bl_ext_config->gpio);
+    		else		
+        		bl_extern_gpio_direction_output(bl_ext_config->gpio, bl_ext_config->gpio_off);
     }
 #ifdef CONFIG_AMLOGIC_BOARD_HAS_PMU
     pmu_driver = aml_pmu_get_driver();
diff --git a/drivers/amlogic/display/vout/lcdoutc.c b/drivers/amlogic/display/vout/lcdoutc.c
index b9564b5adba0..5d380bfbd9fc 100755
--- a/drivers/amlogic/display/vout/lcdoutc.c
+++ b/drivers/amlogic/display/vout/lcdoutc.c
@@ -53,7 +53,7 @@
 #endif
 
 #define PANEL_NAME		"panel"
-
+ 
 #ifdef LCD_DEBUG_INFO
 unsigned int lcd_print_flag = 1;
 #else
diff --git a/include/linux/amlogic/aml_bl_extern.h b/include/linux/amlogic/aml_bl_extern.h
index 05683d9d54d4..d38f877e04ad 100755
--- a/include/linux/amlogic/aml_bl_extern.h
+++ b/include/linux/amlogic/aml_bl_extern.h
@@ -26,6 +26,8 @@ struct bl_extern_config_t {
 	Bl_Extern_Type_t type;
 	unsigned int gpio_used;
 	int gpio;
+	unsigned char gpio_on;
+	unsigned char gpio_off;
 	int i2c_addr;
 	int i2c_bus;
 	int spi_cs;
-- 
2.19.0

