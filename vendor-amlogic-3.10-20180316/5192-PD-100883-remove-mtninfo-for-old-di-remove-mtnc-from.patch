From 691d9bef795b0061a6d00c5e2e096dc35b67913f Mon Sep 17 00:00:00 2001
From: "kele.bai" <kele.bai@amlogic.com>
Date: Wed, 10 Dec 2014 14:44:52 +0800
Subject: [PATCH 5192/5965] PD #100883:remove mtninfo for old di,remove mtnc
 from di v2.

Change-Id: Ic860536f8f7267aa4259fcdf2dfa1cf34fbe6a22
---
 drivers/amlogic/deinterlace/deinterlace.c    | 55 +++++++++++++++-----
 drivers/amlogic/deinterlace/deinterlace.h    | 34 ++++++++----
 drivers/amlogic/deinterlace/deinterlace_hw.c | 54 +++++++++++++------
 3 files changed, 105 insertions(+), 38 deletions(-)

diff --git a/drivers/amlogic/deinterlace/deinterlace.c b/drivers/amlogic/deinterlace/deinterlace.c
index c35a03d341bd..642c48d02ab0 100755
--- a/drivers/amlogic/deinterlace/deinterlace.c
+++ b/drivers/amlogic/deinterlace/deinterlace.c
@@ -186,7 +186,7 @@ static dev_t di_id;
 static struct class *di_class;
 
 #define INIT_FLAG_NOT_LOAD 0x80
-static char version_s[] = "2014-12-2a";//remove pd patch coded by wf
+static char version_s[] = "2014-12-10a";//remove mtninfo,mtnc
 static unsigned char boot_init_flag=0;
 static int receiver_is_amvideo = 1;
 
@@ -836,9 +836,9 @@ typedef struct{
     uint* param;
     int (*proc_fun)(void);
 }di_param_t;
-
+#ifndef NEW_DI_V1
 unsigned long reg_mtn_info[7];
-
+#endif
 di_param_t di_params[]=
 {
     {"di_mtn_1_ctrl1", &di_mtn_1_ctrl1, NULL},
@@ -868,10 +868,12 @@ di_param_t di_params[]=
     {"blend_ctrl2",  &blend_ctrl2, NULL },
     {"blend_ctrl2_black_level", &blend_ctrl2_black_level, NULL},
     {"blend_ctrl2_mtn_no_mov", &blend_ctrl2_mtn_no_mov, NULL},
+#ifndef NEW_DI_V1
     {"mtn_thre_1_low",&mtn_thre_1_low,NULL},
     {"mtn_thre_1_high",&mtn_thre_1_high,NULL},
     {"mtn_thre_2_low",&mtn_thre_2_low,NULL},
     {"mtn_thre_2_high",&mtn_thre_2_high,NULL},
+
     {"mtn_info0",((uint*)&reg_mtn_info[0]) ,NULL},
     {"mtn_info1",((uint*)&reg_mtn_info[1]) ,NULL},
     {"mtn_info2",((uint*)&reg_mtn_info[2]) ,NULL},
@@ -879,7 +881,7 @@ di_param_t di_params[]=
     {"mtn_info4",((uint*)&reg_mtn_info[4]) ,NULL},
     {"mtn_info5",((uint*)&reg_mtn_info[5]) ,NULL},
  	{"mtn_info6",((uint*)&reg_mtn_info[6]) ,NULL},
-
+#endif
 
     {"post_ctrl__di_blend_en",  &post_ctrl__di_blend_en, NULL},
     {"post_ctrl__di_post_repeat",  &post_ctrl__di_post_repeat, NULL},
@@ -1695,7 +1697,9 @@ static void dump_di_pre_stru(void)
 typedef struct{
     DI_MIF_t di_buf0_mif;
     DI_MIF_t di_buf1_mif;
+    #ifndef NEW_DI_V2
     DI_SIM_MIF_t di_mtncrd_mif;
+    #endif
     DI_SIM_MIF_t di_mtnprd_mif;
     #ifdef NEW_DI_V3
     DI_MC_MIF_t di_mcvecrd_mif;
@@ -2469,7 +2473,7 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
     }
     memset(&di_pre_stru, 0, sizeof(di_pre_stru));
 #ifdef D2D3_SUPPORT
-    dp_buf_size = 256*canvas_height/2;
+    dp_buf_size = 256*canvas_height/2;//139264 bytes
 #endif
     if(prog_flag){
         di_pre_stru.prog_proc_type = 1;
@@ -2499,9 +2503,9 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 	/*nr_size(bits)=w*active_h*8*2(yuv422) mtn(bits)=w*active_h*4 cont(bits)=w*active_h*4 mv(bits)=w*active_h/5*16 mcinfo(bits)=active_h*16*/
 	di_buf_size = width*canvas_height*6/4 + width*canvas_height/5 + canvas_height;//3552320 bytes
 #elif defined NEW_DI_V1
-        di_buf_size = width*canvas_height*6/4;
+        di_buf_size = width*canvas_height*6/4;//3133440 bytes
 #else
-        di_buf_size = width*canvas_height*5/4;
+        di_buf_size = width*canvas_height*5/4;//2611200 bytes
 #endif
 #ifdef D2D3_SUPPORT
         if(d2d3_enable){
@@ -3560,8 +3564,9 @@ static void pre_de_done_buf_config(void)
         read_pulldown_info(&(di_pre_stru.di_wr_buf->field_pd_info),
                             &(di_pre_stru.di_wr_buf->win_pd_info[0])
                             );
+        #ifndef NEW_DI_V1
         read_mtn_info(di_pre_stru.di_wr_buf->mtn_info,reg_mtn_info);
-
+        #endif
         if(di_pre_stru.cur_prog_flag){
             if(di_pre_stru.prog_proc_type == 0){
                 if((di_pre_stru.process_count>0)
@@ -4815,10 +4820,12 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	     di_post_stru.di_buf1_mif.luma_x_end0 	= di_end_x;
 	     di_post_stru.di_buf1_mif.luma_y_start0 	= di_start_y>>1;
 	     di_post_stru.di_buf1_mif.luma_y_end0 	= di_end_y >>1;
+	     #ifndef NEW_DI_V2
 	     di_post_stru.di_mtncrd_mif.start_x 	= di_start_x;
 	     di_post_stru.di_mtncrd_mif.end_x 	        = di_end_x;
 	     di_post_stru.di_mtncrd_mif.start_y 	= di_start_y>>1;
 	     di_post_stru.di_mtncrd_mif.end_y 	        = di_end_y >>1;
+	     #endif
 	     di_post_stru.di_mtnprd_mif.start_x 	= di_start_x;
 	     di_post_stru.di_mtnprd_mif.end_x 	        = di_end_x;
 	     di_post_stru.di_mtnprd_mif.start_y 	= di_start_y>>1;
@@ -4849,7 +4856,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
 		config_canvas_idx(di_buf->di_buf_dup_p[2], -1, di_post_mtnprd_canvas_idx[di_post_stru.canvas_id]);
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
+		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);//remove from m8
+		#endif
 		#ifdef NEW_DI_V3
 		config_mcvec_canvas_idx(di_buf->di_buf_dup_p[2], di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id]);
 		#endif
@@ -4858,7 +4867,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
 		config_canvas_idx(di_buf->di_buf_dup_p[2], -1, di_post_mtnprd_canvas_idx[di_post_stru.canvas_id]);
 		config_canvas_idx(di_buf->di_buf_dup_p[2], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
+		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
+		#endif
 		#ifdef NEW_DI_V3
 		config_mcvec_canvas_idx(di_buf->di_buf_dup_p[2], di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id]);
 		#endif
@@ -4867,13 +4878,17 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
 		config_canvas_idx(di_buf->di_buf_dup_p[2], -1, di_post_mtnprd_canvas_idx[di_post_stru.canvas_id]);
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
+		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
+		#endif
 		break;
 	    case PULL_DOWN_BUF1://wave with buf1
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtnprd_canvas_idx[di_post_stru.canvas_id]);
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
+		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[0], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
+		#endif
 		break;
 	    case PULL_DOWN_EI:
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
@@ -4888,7 +4903,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	    case PULL_DOWN_NORMAL:
 		di_post_stru.di_buf0_mif.canvas0_addr0 = di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+		#endif
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
 		#ifdef NEW_DI_V3
 		di_post_stru.di_mcvecrd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
@@ -4902,7 +4919,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_buf0_mif.canvas0_addr0 = di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[2]->nr_canvas_idx;
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
+		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+		#endif
 		#ifdef NEW_DI_V3
 		di_post_stru.di_mcvecrd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
 		#endif
@@ -4915,7 +4934,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_buf0_mif.canvas0_addr0 = di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[0]->nr_canvas_idx;
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
+		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+		#endif
 		post_blend_mode = 0;
 		blend_mtn_en = 1;
 		ei_en = 1;
@@ -4925,7 +4946,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_buf0_mif.canvas0_addr0 = di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[0]->mtn_canvas_idx;
+		#endif
 		post_blend_mode = 1;
 		blend_mtn_en = 1;//must enable
 		ei_en = 1;//must enable
@@ -4959,7 +4982,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	    		&di_post_stru.di_buf0_mif,
 	    		&di_post_stru.di_buf1_mif,
 	    		NULL,
+	    		#ifndef NEW_DI_V2
 	    		&di_post_stru.di_mtncrd_mif,
+	    		#endif
 	    		&di_post_stru.di_mtnprd_mif,
 	    		ei_en, 																// ei enable
 	    		post_blend_en,													// blend enable
@@ -4969,8 +4994,10 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	    		0,                 												// di_ddr_en.
 	    		(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)==VIDTYPE_INTERLACE_TOP ? 0 : 1,		// 1 bottom generate top
 	    		hold_line,
-	    		post_urgent,
-	    		reg_mtn_info
+	    		post_urgent
+                        #ifndef NEW_DI_V1
+	    		, reg_mtn_info
+                        #endif
 	    	);
     	#ifdef NEW_DI_V3
 	enable_mc_di_post(&di_post_stru.di_mcvecrd_mif);
@@ -4981,7 +5008,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	    		&di_post_stru.di_buf0_mif,
 	    		&di_post_stru.di_buf1_mif,
 	    		NULL,
+	    		#ifndef NEW_DI_V2
 	    		&di_post_stru.di_mtncrd_mif,
+	    		#endif
 	    		&di_post_stru.di_mtnprd_mif,
 	    		#ifdef NEW_DI_V3
 	    		&di_post_stru.di_mcvecrd_mif,
@@ -4994,8 +5023,10 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	    		0,                 												// di_ddr_en.
 	    		(di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)==VIDTYPE_INTERLACE_TOP ? 0 : 1,		// 1 bottom generate top
 	    		hold_line,
-	    		post_urgent,
-	    		reg_mtn_info
+	    		post_urgent
+                        #ifndef NEW_DI_V1
+	    		, reg_mtn_info
+                        #endif
 	    	);
 
 #ifdef NEW_DI_V1
diff --git a/drivers/amlogic/deinterlace/deinterlace.h b/drivers/amlogic/deinterlace/deinterlace.h
index b4d08fd1ebad..bc584e044689 100755
--- a/drivers/amlogic/deinterlace/deinterlace.h
+++ b/drivers/amlogic/deinterlace/deinterlace.h
@@ -200,8 +200,9 @@ typedef struct di_buf_s{
     /* pull down information */
     pulldown_detect_info_t field_pd_info;
     pulldown_detect_info_t win_pd_info[MAX_WIN_NUM];
-
+#ifndef NEW_DI_V1
     unsigned long mtn_info[5];
+#endif
     pulldown_mode_t pulldown_mode;
     int win_pd_mode[5];
     process_fun_index_t process_fun_index;
@@ -223,6 +224,7 @@ extern uint ei_ctrl3;
 #ifdef DET3D
 extern bool det3d_en;
 #endif
+
 extern uint mtn_ctrl;
 extern uint mtn_ctrl_char_diff_cnt;
 extern uint mtn_ctrl_low_level;
@@ -235,6 +237,7 @@ extern uint blend_ctrl;
 extern uint kdeint0;
 extern uint kdeint1;
 extern uint kdeint2;
+#ifndef NEW_DI_V1
 extern uint reg_mtn_info0;
 extern uint reg_mtn_info1;
 extern uint reg_mtn_info2;
@@ -244,6 +247,7 @@ extern uint mtn_thre_1_low;
 extern uint mtn_thre_1_high;
 extern uint mtn_thre_2_low;
 extern uint mtn_thre_2_high;
+#endif
 
 extern uint blend_ctrl1;
 extern uint blend_ctrl1_char_level;
@@ -257,8 +261,6 @@ extern uint post_ctrl__di_blend_en;
 extern uint post_ctrl__di_post_repeat;
 extern uint di_pre_ctrl__di_pre_repeat;
 
-extern uint noise_reduction_level;
-
 extern uint field_32lvl;
 extern uint field_22lvl;
 extern pd_detect_threshold_t field_pd_th;
@@ -386,25 +388,35 @@ void enable_di_post_2 (
    DI_MIF_t        *di_buf0_mif,
    DI_MIF_t        *di_buf1_mif,
    DI_SIM_MIF_t    *di_diwr_mif,
+   #ifndef NEW_DI_V2
    DI_SIM_MIF_t    *di_mtncrd_mif,
+   #endif
    DI_SIM_MIF_t    *di_mtnprd_mif,
    int ei_en, int blend_en, int blend_mtn_en, int blend_mode, int di_vpp_en, int di_ddr_en,
-   int post_field_num, int hold_line , int urgent,
-   unsigned long * reg_mtn_info);
+   int post_field_num, int hold_line , int urgent
+   #ifndef NEW_DI_V1
+   , unsigned long * reg_mtn_info
+   #endif
+);
 
 void di_post_switch_buffer (
    DI_MIF_t        *di_buf0_mif,
    DI_MIF_t        *di_buf1_mif,
    DI_SIM_MIF_t    *di_diwr_mif,
+   #ifndef NEW_DI_V2
    DI_SIM_MIF_t    *di_mtncrd_mif,
+   #endif
    DI_SIM_MIF_t    *di_mtnprd_mif,
    #ifdef NEW_DI_V3
    DI_MC_MIF_t     *di_mcvecrd_mif,
    #endif
    int ei_en, int blend_en, int blend_mtn_en, int blend_mode, int di_vpp_en, int di_ddr_en,
-   int post_field_num, int hold_line, int urgent,
-   unsigned long * reg_mtn_info );
-
+   int post_field_num, int hold_line, int urgent
+   #ifndef NEW_DI_V1
+   , unsigned long * reg_mtn_info 
+   #endif
+);
+#if 0
 void enable_di_post_pd(
     DI_MIF_t        *di_buf0_mif,
     DI_MIF_t        *di_buf1_mif,
@@ -422,12 +434,12 @@ void di_post_switch_buffer_pd(
     DI_SIM_MIF_t    *di_mtnprd_mif,
     int ei_en, int blend_en, int blend_mtn_en, int blend_mode, int di_vpp_en, int di_ddr_en,
     int post_field_num, int hold_line, int urgent);
-
+#endif
 void read_pulldown_info(pulldown_detect_info_t* field_pd_info,
                         pulldown_detect_info_t* win_pd_info);
-
+#ifndef NEW_DI_V1
 void read_mtn_info(unsigned long* mtn_info, unsigned long* );
-
+#endif
 void reset_pulldown_state(void);
 
 void cal_pd_parameters(pulldown_detect_info_t* cur_info, pulldown_detect_info_t* pre_info, pulldown_detect_info_t* next_info, pd_detect_threshold_t* pd_th);
diff --git a/drivers/amlogic/deinterlace/deinterlace_hw.c b/drivers/amlogic/deinterlace/deinterlace_hw.c
index 3063dcb0433d..369c884acc0d 100755
--- a/drivers/amlogic/deinterlace/deinterlace_hw.c
+++ b/drivers/amlogic/deinterlace/deinterlace_hw.c
@@ -50,10 +50,13 @@ uint blend_ctrl;
 uint kdeint0;
 uint kdeint1;
 uint kdeint2;
+
+#ifndef NEW_DI_V1
 uint mtn_thre_1_high;
 uint mtn_thre_1_low;
 uint mtn_thre_2_high;
 uint mtn_thre_2_low;
+#endif
 
 uint blend_ctrl1;
 uint blend_ctrl1_char_level;
@@ -68,7 +71,6 @@ uint post_ctrl__di_blend_en;
 uint post_ctrl__di_post_repeat;
 uint di_pre_ctrl__di_pre_repeat;
 
-uint noise_reduction_level = 2;
 static bool cue_enable = 1;
 
 uint field_32lvl;
@@ -1559,14 +1561,20 @@ void di_post_switch_buffer (
    DI_MIF_t        *di_buf0_mif,
    DI_MIF_t        *di_buf1_mif,
    DI_SIM_MIF_t    *di_diwr_mif,
+#ifndef NEW_DI_V2
    DI_SIM_MIF_t    *di_mtncrd_mif,
+#endif
    DI_SIM_MIF_t    *di_mtnprd_mif,
 #ifdef NEW_DI_V3
    DI_MC_MIF_t     *di_mcvecrd_mif,
 #endif
    int ei_en, int blend_en, int blend_mtn_en, int blend_mode, int di_vpp_en, int di_ddr_en,
-   int post_field_num, int hold_line, int urgent,
-   unsigned long * reg_mtn_info )
+   int post_field_num, int hold_line, int urgent
+#ifndef NEW_DI_V1
+   , unsigned long * reg_mtn_info
+   
+#endif 
+)
 {
   	int ei_only;
   	int buf1_en;
@@ -1592,16 +1600,19 @@ void di_post_switch_buffer (
   	}
 
    	// motion for current display field.
-    if ( blend_mtn_en )
+    if (blend_mtn_en)
     {
 
         VSYNC_WR_MPEG_REG(DI_MTNRD_CTRL, (di_mtnprd_mif->canvas_num <<8 )|//mtnp canvas index.
-					 (urgent << 16) |// urgent
-					 di_mtncrd_mif->canvas_num ); // current field mtn canvas index.
+					 (urgent << 16) // urgent
+					 #ifndef NEW_DI_V2
+					 | di_mtncrd_mif->canvas_num
+					 #endif
+					 ); // current field mtn canvas index.
 
     }
 
-    if ( di_ddr_en )
+    if (di_ddr_en)
     {
        VSYNC_WR_MPEG_REG(DI_DIWR_CTRL, di_diwr_mif->canvas_num |               							// canvas index.
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
@@ -1610,11 +1621,12 @@ void di_post_switch_buffer (
                         (urgent << 8));            													// urgent.
 #endif
     }
-   	if ( ei_only == 0)
+   	if (ei_only == 0)
    	{
 
 	//VSYNC_WR_MPEG_REG(DI_BLEND_CTRL, (blend_ctrl&(~(3<<20))&~(0xff))|(blend_mode<<20)|kdeint);
     VSYNC_WR_MPEG_REG(DI_BLEND_CTRL, (blend_ctrl&0xffcfff00)| (blend_mode<<20) | (0xff&kdeint0));
+    #ifndef NEW_DI_V1
     //if (di_pre_stru.di_wr_buf->mtn_info[4] > di_pre_stru.di_wr_buf->mtn_info[3] & di_pre_stru.di_wr_buf->mtn_info[3] > di_pre_stru.di_wr_buf->mtn_info[2])
     if((reg_mtn_info[0]>mtn_thre_1_high)&(reg_mtn_info[4]<mtn_thre_2_low)){
  	VSYNC_WR_MPEG_REG(DI_BLEND_CTRL,((blend_ctrl&0xffcfff00) | (blend_mode<<20)| (0xff&kdeint1)));}
@@ -1623,6 +1635,7 @@ void di_post_switch_buffer (
 	if(reg_mtn_info[4]>mtn_thre_2_high){
 	VSYNC_WR_MPEG_REG(DI_BLEND_CTRL,((blend_ctrl&0xffcfff00) | (blend_mode<<20)| (0xff&kdeint2)));
 	}
+	#endif
 	#ifndef NEW_DI_V3
     VSYNC_WR_MPEG_REG(DI_BLEND_CTRL1, (blend_ctrl1_char_level<< 24 ) |    ( blend_ctrl1_angle_thd << 16 ) |    ( blend_ctrl1_filt_thd<< 8 )  |    ( blend_ctrl1_diff_thd));
     VSYNC_WR_MPEG_REG(DI_BLEND_CTRL2,   (blend_ctrl2_black_level<< 8 ) |     (blend_ctrl2_mtn_no_mov)  );
@@ -1645,11 +1658,16 @@ void enable_di_post_2 (
    DI_MIF_t        *di_buf0_mif,
    DI_MIF_t        *di_buf1_mif,
    DI_SIM_MIF_t    *di_diwr_mif,
+   #ifndef NEW_DI_V2
    DI_SIM_MIF_t    *di_mtncrd_mif,
+   #endif
    DI_SIM_MIF_t    *di_mtnprd_mif,
    int ei_en, int blend_en, int blend_mtn_en, int blend_mode, int di_vpp_en, int di_ddr_en,
-   int post_field_num, int hold_line, int urgent,
-   unsigned long * reg_mtn_info )
+   int post_field_num, int hold_line, int urgent
+#ifndef NEW_DI_V1
+   , unsigned long * reg_mtn_info
+#endif 
+)
 {
   	int ei_only;
   	int buf1_en;
@@ -1677,17 +1695,20 @@ void enable_di_post_2 (
 //printk("%s: ei_only %d,buf1_en %d,ei_en %d,di_vpp_en %d,di_ddr_en %d,blend_mtn_en %d,blend_mode %d.\n",
 			 //__func__,ei_only,buf1_en,ei_en,di_vpp_en,di_ddr_en,blend_mtn_en,blend_mode);
    	// motion for current display field.
-    if ( blend_mtn_en )
+    if (blend_mtn_en)
     {
         VSYNC_WR_MPEG_REG(DI_MTNPRD_X, (di_mtnprd_mif->start_x <<16) | (di_mtnprd_mif->end_x));   			// start_x 0 end_x 719.
         VSYNC_WR_MPEG_REG(DI_MTNPRD_Y, (di_mtnprd_mif->start_y <<16) | (di_mtnprd_mif->end_y));   			// start_y 0 end_y 239.
-   #ifndef NEW_DI_V3
+   #ifndef NEW_DI_V2
       	VSYNC_WR_MPEG_REG(DI_MTNCRD_X, (di_mtncrd_mif->start_x <<16) | (di_mtncrd_mif->end_x));   				// start_x 0 end_x 719.
       	VSYNC_WR_MPEG_REG(DI_MTNCRD_Y, (di_mtncrd_mif->start_y <<16) | (di_mtncrd_mif->end_y));             	// start_y 0 end_y 239.
 	 #endif
 	VSYNC_WR_MPEG_REG(DI_MTNRD_CTRL, (di_mtnprd_mif->canvas_num <<8 ) |									//mtnp canvas index.
-					 (urgent << 16) |// urgent
-					 di_mtncrd_mif->canvas_num );
+					 (urgent << 16) // urgent
+					 #ifndef NEW_DI_V2
+					 |di_mtncrd_mif->canvas_num
+					 #endif
+					 );
                                          // current field mtn canvas index
     }
 
@@ -1708,6 +1729,7 @@ void enable_di_post_2 (
 
 	//VSYNC_WR_MPEG_REG(DI_BLEND_CTRL, (blend_ctrl&(~(3<<20))&~(0xff))|(blend_mode<<20)|kdeint);
     VSYNC_WR_MPEG_REG(DI_BLEND_CTRL, (blend_ctrl&0xffcfff00)|(blend_mode<<20)|(0xff&kdeint0));
+    #ifndef NEW_DI_V1
     //if (di_pre_stru.di_wr_buf->mtn_info[4] > di_pre_stru.di_wr_buf->mtn_info[3] & di_pre_stru.di_wr_buf->mtn_info[3] > di_pre_stru.di_wr_buf->mtn_info[2])
     if((reg_mtn_info[0]>mtn_thre_1_high)&(reg_mtn_info[4]<mtn_thre_2_low)){
  	VSYNC_WR_MPEG_REG(DI_BLEND_CTRL,((blend_ctrl&0xffcfff00) | (blend_mode<<20)| (0xff&kdeint1)));
@@ -1717,6 +1739,7 @@ void enable_di_post_2 (
 	if(reg_mtn_info[4]>mtn_thre_2_high){
 	VSYNC_WR_MPEG_REG(DI_BLEND_CTRL,((blend_ctrl&0xffcfff00) | (blend_mode<<20)| (0xff&kdeint2)));
 	}
+	#endif
 	#ifndef NEW_DI_V3
     VSYNC_WR_MPEG_REG(DI_BLEND_CTRL1, (blend_ctrl1_char_level<< 24 ) |    ( blend_ctrl1_angle_thd << 16 ) |    ( blend_ctrl1_filt_thd<< 8 )  |    ( blend_ctrl1_diff_thd));
     VSYNC_WR_MPEG_REG(DI_BLEND_CTRL2,   (blend_ctrl2_black_level<< 8 ) |     (blend_ctrl2_mtn_no_mov)  );
@@ -2031,7 +2054,7 @@ void read_pulldown_info(pulldown_detect_info_t* field_pd_info,
     }
 }
 
-
+#ifndef NEW_DI_V1
 void read_mtn_info(unsigned long* mtn_info, unsigned long * reg_mtn_info)
 {
     int i;
@@ -2058,6 +2081,7 @@ void read_mtn_info(unsigned long* mtn_info, unsigned long * reg_mtn_info)
 
     return;
 }
+#endif
 void di_post_read_reverse(bool reverse)
 {
 #ifdef NEW_DI_TV
-- 
2.19.0

