From 348f052ffbf1eae699401687350b744963a36f2c Mon Sep 17 00:00:00 2001
From: FFT <zh.cao@amlogic.com>
Date: Fri, 12 Dec 2014 16:05:10 +0800
Subject: [PATCH 5204/5965] PD#100946(96897):video toggle first frame earlier &
 fix wrong first checkout vpts

Change-Id: I5639927b988225eaa755921dcbc989c95ca3f98b
---
 drivers/amlogic/amports/ptsserv.c         | 21 ++++++++++++-------
 drivers/amlogic/amports/timestamp.c       | 16 +++++++++++++++
 drivers/amlogic/amports/tsync.c           | 11 ++++++++++
 drivers/amlogic/amports/tsync_pcr.c       | 23 +++++++++++++++------
 drivers/amlogic/amports/vh264.c           | 25 ++++++++++++++++++++++-
 include/linux/amlogic/amports/timestamp.h |  4 ++++
 6 files changed, 86 insertions(+), 14 deletions(-)

diff --git a/drivers/amlogic/amports/ptsserv.c b/drivers/amlogic/amports/ptsserv.c
index 450779e5368c..988c7c7b25a9 100755
--- a/drivers/amlogic/amports/ptsserv.c
+++ b/drivers/amlogic/amports/ptsserv.c
@@ -346,15 +346,16 @@ static int pts_checkin_offset_inline(u8 type, u32 offset, u32 val,u64 uS64)
 
         if (type == PTS_TYPE_VIDEO && pTable->first_checkin_pts == -1) {
             pTable->first_checkin_pts = val;
-            if(tsync_get_debug_pts_checkin() && tsync_get_debug_vpts()) {
+            timestamp_checkin_firstvpts_set(val);
+            //if(tsync_get_debug_pts_checkin() && tsync_get_debug_vpts()) {
                 printk("first check in vpts <0x%x:0x%x> ok!\n", offset, val);
-            }
+            //}
         }
         if (type == PTS_TYPE_AUDIO && pTable->first_checkin_pts == -1) {
-            pTable->first_checkin_pts = val;
-            if (tsync_get_debug_pts_checkin() && tsync_get_debug_apts()) {
+            pTable->first_checkin_pts = val;            
+            //if (tsync_get_debug_pts_checkin() && tsync_get_debug_apts()) {
                 printk("first check in apts <0x%x:0x%x> ok!\n", offset, val);
-            }
+            //}
         }
 
         if (tsync_get_debug_pts_checkin()) {
@@ -695,9 +696,11 @@ static int _pts_lookup_offset_inline(
 
             if (!pTable->first_lookup_ok) {
                 pTable->first_lookup_ok = 1;
+                if (type == PTS_TYPE_VIDEO)
+                    timestamp_firstvpts_set(*val);
                 if (tsync_get_debug_pts_checkout()) {
                     if (tsync_get_debug_vpts() && (type == PTS_TYPE_VIDEO)) {
-                        printk("=====first vpts look up offset<0x%x> --> <0x%x:0x%x> ok!\n", offset, p2->offset, p2->val);
+                        printk("=====first vpts look up offset<0x%x> --> <0x%x:0x%x> ok!\n", offset, p2->offset, p2->val);                        
                     }
                     if (tsync_get_debug_apts() && (type == PTS_TYPE_AUDIO)) {
                         printk("====first apts look up offset<0x%x> --> <0x%x:0x%x> ok!\n", offset, p2->offset, p2->val);
@@ -796,6 +799,7 @@ static int pts_lookup_offset_inline(
     u8 type, u32 offset, u32 *val, u32 pts_margin, u64 *uS64){
     int res = _pts_lookup_offset_inline(type,offset,val,pts_margin,uS64);
 
+#if 0
     if(timestamp_firstvpts_get()==0&&res==0&&(*val)!=0&&type==PTS_TYPE_VIDEO){
     	timestamp_firstvpts_set(*val);
     }
@@ -804,7 +808,10 @@ static int pts_lookup_offset_inline(
     	timestamp_firstvpts_set(*val);
     }
 #endif    
-    else if(timestamp_firstapts_get()==0&&res==0&&(*val)!=0&&type==PTS_TYPE_AUDIO){
+    else 
+#endif
+
+    if(timestamp_firstapts_get()==0&&res==0&&(*val)!=0&&type==PTS_TYPE_AUDIO){
     	timestamp_firstapts_set(*val);
     }    
 
diff --git a/drivers/amlogic/amports/timestamp.c b/drivers/amlogic/amports/timestamp.c
index a2286bc0c4ed..a219032b00c8 100755
--- a/drivers/amlogic/amports/timestamp.c
+++ b/drivers/amlogic/amports/timestamp.c
@@ -22,6 +22,7 @@ static u32 system_time_up = 0;
 static u32 audio_pts_up = 0;
 static u32 audio_pts_started = 0;
 static u32 first_vpts = 0;
+static u32 first_checkin_vpts = 0;
 static u32 first_apts = 0;
 
 static u32 system_time_scale_base = 1;
@@ -157,6 +158,21 @@ u32 timestamp_firstvpts_get(void)
 }
 EXPORT_SYMBOL(timestamp_firstvpts_get);
 
+
+void timestamp_checkin_firstvpts_set(u32 pts)
+{
+    first_checkin_vpts = pts;
+    printk("video first checkin pts = %x\n", first_checkin_vpts);
+}
+EXPORT_SYMBOL(timestamp_checkin_firstvpts_set);
+
+u32 timestamp_checkin_firstvpts_get(void)
+{
+    return first_checkin_vpts;
+}
+EXPORT_SYMBOL(timestamp_checkin_firstvpts_get);
+
+
 void timestamp_firstapts_set(u32 pts)
 {
     first_apts = pts;
diff --git a/drivers/amlogic/amports/tsync.c b/drivers/amlogic/amports/tsync.c
index 88226b012c44..a6a753c550fd 100755
--- a/drivers/amlogic/amports/tsync.c
+++ b/drivers/amlogic/amports/tsync.c
@@ -1557,6 +1557,16 @@ static ssize_t store_firstapts(struct class *class,
 
     return size;
 }
+
+
+
+static ssize_t show_checkin_firstvpts(struct class *class,
+                         struct class_attribute *attr,
+                         char *buf)
+{
+    return sprintf(buf, "0x%x\n", timestamp_checkin_firstvpts_get());
+}
+
 static ssize_t show_vpause_flag(struct class *class,
                          struct class_attribute *attr,
                          char *buf)
@@ -1648,6 +1658,7 @@ static struct class_attribute tsync_class_attrs[] = {
     __ATTR(slowsync_enable, S_IRUGO | S_IWUSR, show_slowsync_enable, store_slowsync_enable),
     __ATTR(startsync_mode, S_IRUGO | S_IWUSR, show_startsync_mode, store_startsync_mode),
 	__ATTR(firstapts,  S_IRUGO | S_IWUSR | S_IWGRP, show_firstapts,    store_firstapts),
+    __ATTR(checkin_firstvpts, S_IRUGO | S_IWUSR, show_checkin_firstvpts, NULL),
     __ATTR_NULL
 };
 
diff --git a/drivers/amlogic/amports/tsync_pcr.c b/drivers/amlogic/amports/tsync_pcr.c
index 36d7d79d9a3d..7d18948514c9 100755
--- a/drivers/amlogic/amports/tsync_pcr.c
+++ b/drivers/amlogic/amports/tsync_pcr.c
@@ -218,13 +218,24 @@ void tsync_pcr_avevent_locked(avevent_t event, u32 param)
                 }
 
                 if (wait_pcr_count >= 20){
-                    timestamp_pcrscr_set(first_vpts -tsync_pcr_ref_latency*10);                    
-                    tsync_pcr_usepcr=0;
-                    tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_VPTS;
-                    if (!tsync_pcr_vpause_flag) {
-                        timestamp_pcrscr_enable(1);
+                    if (cur_pcr){
+                        timestamp_pcrscr_set(cur_pcr-tsync_pcr_ref_latency);    
+                        tsync_pcr_usepcr=1;
+                        tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_PCR;
+                        if (!tsync_pcr_vpause_flag) {
+                            timestamp_pcrscr_enable(1);
+                        }
+                        printk("use cur_pcr wait_pcr_count time out!\n");
+                    }
+                    else {
+                        timestamp_pcrscr_set(first_vpts -tsync_pcr_ref_latency*10);                    
+                        tsync_pcr_usepcr=0;
+                        tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_VPTS;
+                        if (!tsync_pcr_vpause_flag) {
+                            timestamp_pcrscr_enable(1);
+                        }
+                        printk("use first_vpts !\n");
                     }
-                    printk("use first_vpts !\n");
                 }else{
                     printk("wait_pcr_count = %d \n", wait_pcr_count);
 
diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index 0ce47650065d..59b4f94eefb2 100755
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -239,6 +239,10 @@ static struct dec_sysinfo vh264_amstream_dec_info;
 extern u32 trickmode_i;
 static dma_addr_t mc_dma_handle;
 static void *mc_cpu_addr;
+static u32 first_offset;
+static u32 first_pts;
+static u64 first_pts64;
+static bool first_pts_cached;
 
 #define MC_OFFSET_HEADER    0x0000
 #define MC_OFFSET_DATA      0x1000
@@ -1041,7 +1045,16 @@ static void vh264_isr(void)
             }
 
             // add 64bit pts us ;
-            if (pts_lookup_offset_us64(PTS_TYPE_VIDEO, b_offset, &pts, 0,&pts_us64) == 0){
+            if (unlikely((b_offset == first_offset) && (first_pts_cached))) {
+                pts = first_pts;
+                pts_us64 = first_pts64;
+                first_pts_cached = false;
+                pts_valid = 1;
+#ifdef DEBUG_PTS
+                pts_hit++;
+#endif
+            }
+            else if (pts_lookup_offset_us64(PTS_TYPE_VIDEO, b_offset, &pts, 0,&pts_us64) == 0){
                 pts_valid = 1;
 #ifdef DEBUG_PTS
                 pts_hit++;
@@ -1335,6 +1348,12 @@ static void vh264_isr(void)
         frame_height = (READ_VREG(AV_SCRATCH_1) + 1) * 16;
         printk("Over decoder supported size, height = %d\n", frame_height);
         fatal_error_flag = DECODER_FATAL_ERROR_SIZE_OVERFLOW;
+    } else if ((cpu_cmd & 0xff) == 9) {
+        first_offset = READ_VREG(AV_SCRATCH_1);
+        if (pts_lookup_offset_us64(PTS_TYPE_VIDEO, first_offset, &first_pts, 0,&first_pts64) == 0) {
+            first_pts_cached = true;
+        }
+        WRITE_VREG(AV_SCRATCH_0, 0);        
     }
 
 #ifdef HANDLE_H264_IRQ
@@ -1671,6 +1690,10 @@ static s32 vh264_init(void)
     vh264_running = 0;    //init here to reset last_mb_width&last_mb_height
     vh264_eos = 0;
     duration_on_correcting=0;
+    first_pts = 0;
+    first_pts64 = 0;
+    first_offset = 0;
+    first_pts_cached = false;
     vh264_local_init();
 
     query_video_status(0, &trickmode_fffb);
diff --git a/include/linux/amlogic/amports/timestamp.h b/include/linux/amlogic/amports/timestamp.h
index 89d2d0ceaaa1..564c9455dd82 100755
--- a/include/linux/amlogic/amports/timestamp.h
+++ b/include/linux/amlogic/amports/timestamp.h
@@ -58,6 +58,10 @@ extern void timestamp_firstvpts_set(u32 pts);
 
 extern u32 timestamp_firstvpts_get(void);
 
+extern void timestamp_checkin_firstvpts_set(u32 pts);
+
+extern u32 timestamp_checkin_firstvpts_get(void);
+
 extern void timestamp_firstapts_set(u32 pts);
 
 extern u32 timestamp_firstapts_get(void);
-- 
2.19.0

