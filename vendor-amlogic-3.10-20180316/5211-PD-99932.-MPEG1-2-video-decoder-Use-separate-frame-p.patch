From a6210fa77161f76eb8b2753baef77c8c138f48b2 Mon Sep 17 00:00:00 2001
From: timyao <tim.yao@amlogic.com>
Date: Tue, 2 Dec 2014 21:30:03 -0800
Subject: [PATCH 5211/5965] PD #99932. MPEG1/2 video decoder: Use separate
 frame pool to handle different decoding sessions (before and after watchdog
 reset) to work around buffer resource lifecycle problem.

Change-Id: I67d0ae4561ff344826c9d1061ffdb0e4866ce80a
---
 drivers/amlogic/amports/vmpeg12.c | 25 ++++++++++++++++++++++---
 1 file changed, 22 insertions(+), 3 deletions(-)

diff --git a/drivers/amlogic/amports/vmpeg12.c b/drivers/amlogic/amports/vmpeg12.c
index ec70071a637e..5a17a71cfce6 100755
--- a/drivers/amlogic/amports/vmpeg12.c
+++ b/drivers/amlogic/amports/vmpeg12.c
@@ -148,6 +148,8 @@ static const u32 frame_rate_tab[16] = {
 };
 
 static struct vframe_s vfpool[VF_POOL_SIZE];
+static struct vframe_s vfpool2[VF_POOL_SIZE];
+static int cur_pool_idx = 0;
 static s32 vfbuf_use[DECODE_BUFFER_NUM_MAX];
 static u32 dec_control = 0;
 static u32 frame_width, frame_height, frame_dur, frame_prog;
@@ -166,6 +168,17 @@ static s32 error_frame_skip_level = 0;
 static s32 wait_buffer_counter = 0;
 static u32 first_i_frame_ready = 0;
 
+static inline int pool_index(vframe_t *vf)
+{
+    if ((vf >= &vfpool[0]) && (vf <= &vfpool[VF_POOL_SIZE-1])) {
+        return 0;
+    } else if ((vf >= &vfpool[1]) && (vf <= &vfpool2[VF_POOL_SIZE-1])) {
+        return 1;
+    } else {
+        return -1;
+    }
+}
+
 static inline u32 index2canvas(u32 index)
 {
     const u32 canvas_tab[8] = {
@@ -476,7 +489,9 @@ static vframe_t *vmpeg_vf_get(void* op_arg)
 
 static void vmpeg_vf_put(vframe_t *vf, void* op_arg)
 {
-    kfifo_put(&recycle_q, (const vframe_t **)&vf);
+    if (pool_index(vf) == cur_pool_idx) {
+        kfifo_put(&recycle_q, (const vframe_t **)&vf);
+    }
 }
 
 static int vmpeg_event_cb(int type, void *data, void *private_data)
@@ -582,7 +597,9 @@ static void vmpeg_put_timer_func(unsigned long arg)
                 vf->index = -1;
             }
 
-            kfifo_put(&newframe_q, (const vframe_t **)&vf);
+            if (pool_index(vf) == cur_pool_idx) {
+                kfifo_put(&newframe_q, (const vframe_t **)&vf);
+            }
         }
     }
 
@@ -772,8 +789,10 @@ static void vmpeg12_local_init(void)
     INIT_KFIFO(recycle_q);
     INIT_KFIFO(newframe_q);
 
+    cur_pool_idx ^= 1;
+
     for (i=0; i<VF_POOL_SIZE; i++) {
-        const vframe_t *vf = &vfpool[i];
+        const vframe_t *vf = (cur_pool_idx == 0) ? &vfpool[i] : &vfpool2[i];
         vfpool[i].index = -1;
         kfifo_put(&newframe_q, &vf);
     }
-- 
2.19.0

