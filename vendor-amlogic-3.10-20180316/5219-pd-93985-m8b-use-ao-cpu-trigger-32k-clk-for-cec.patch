From 29c7a216590ac0fde9f194a9c81c62ecf7334488 Mon Sep 17 00:00:00 2001
From: "qiufang.dai" <qiufang.dai@amlogic.com>
Date: Mon, 8 Dec 2014 21:14:26 +0800
Subject: [PATCH 5219/5965] pd#93985: m8b: use ao cpu trigger 32k clk for cec.

Change-Id: I047088744a237feb401cc3432684041ad931d1c1
---
 arch/arm/mach-meson8b/arc_trig_clk.h | 67 ++++++++++++++++++++++++++
 arch/arm/mach-meson8b/pm.c           | 72 ++++++++++++++++++++++++++++
 2 files changed, 139 insertions(+)
 create mode 100644 arch/arm/mach-meson8b/arc_trig_clk.h

diff --git a/arch/arm/mach-meson8b/arc_trig_clk.h b/arch/arm/mach-meson8b/arc_trig_clk.h
new file mode 100644
index 000000000000..6ab8c3271bcd
--- /dev/null
+++ b/arch/arm/mach-meson8b/arc_trig_clk.h
@@ -0,0 +1,67 @@
+const unsigned arc_code[]={
+	0x00000284 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x00000000 , 0x00000000 , 0x00000000,
+	0x00000000 , 0x0000204a , 0x0000214a , 0x0000224a,
+	0x0000234a , 0x0000244a , 0x0000254a , 0x0000264a,
+	0x0000274a , 0x1000204a , 0x1000214a , 0x1000224a,
+	0x1000234a , 0x1000244a , 0x1000254a , 0x1000264a,
+	0x1000274a , 0x2000204a , 0x2000214a , 0x2000224a,
+	0x2000234a , 0x2000244a , 0x2000254a , 0x2000264a,
+	0x2000274a , 0x3000204a , 0x3000214a , 0x3000224a,
+	0x3000234a , 0x3000244a , 0x3f80240a , 0x80000000,
+	0x7000264a , 0x7000264a , 0x0000204a , 0x0f80210a,
+	0x040c0000 , 0x00001900 , 0x01012140 , 0x8f80210c,
+	0x04140000 , 0xffc207f0 , 0x0000084a , 0x7000264a,
+	0x7000264a , 0x7000264a , 0x003f216f , 0x7000264a,
+	0x7000264a , 0x0f802020 , 0x03440000 , 0x0f802020,
+	0x034c0000 , 0x70041600 , 0x0054c810 , 0x0f80230a,
+	0x0054c810 , 0x22028340 , 0x0afd0102 , 0x7ee08004,
+	0x1cf0c0f1 , 0xc641b348 , 0x1c0cc742 , 0x42c33400,
+	0x004cc810 , 0x23458260 , 0xa26007c3 , 0xeeee42c3,
+	0x1e00aaaa , 0xc8107080 , 0x42c30004 , 0x0014c810,
+	0xbb928260 , 0x42c3a260 , 0x0740c810 , 0xbb858260,
+	0x4548a260 , 0x000047cb , 0x46cb090d , 0x0004c810,
+	0x2000204a , 0x0a0d8540 , 0xbaa4011e , 0x78e0f003,
+	0xa540ba84 , 0xffef0f82 , 0x864040e1 , 0x8f810ae9,
+	0xeeeedddd , 0x14001e00 , 0x003f236f , 0x00402069,
+	0x7000264a , 0x7000264a , 0x7000264a , 0x78e0f1e4,
+	0x00010200 , 0x0000001a , 0x000001b2 , 0x00000000
+};
diff --git a/arch/arm/mach-meson8b/pm.c b/arch/arm/mach-meson8b/pm.c
index 6dbccef4b8e0..c293dd9af15a 100755
--- a/arch/arm/mach-meson8b/pm.c
+++ b/arch/arm/mach-meson8b/pm.c
@@ -47,6 +47,11 @@ static struct early_suspend early_suspend;
 static int early_suspend_flag = 0;
 #endif
 
+#define CONFIG_AO_TRIG_CLK 1
+#ifdef CONFIG_AO_TRIG_CLK
+#include "arc_trig_clk.h"
+#endif
+
 #define ON  1
 #define OFF 0
 
@@ -250,6 +255,61 @@ static void meson_system_late_resume(struct early_suspend *h)
 }
 #endif
 
+#ifdef CONFIG_AO_TRIG_CLK
+int run_arc_program(void)
+{
+//	int i;
+	unsigned vaddr2,v;
+	unsigned* pbuffer;
+	vaddr2 = IO_SRAM_BASE;
+
+	aml_write_reg32(P_AO_REMAP_REG0,0);
+	udelay(10);
+	pbuffer = (unsigned*)vaddr2;
+
+	memcpy(pbuffer,arc_code,sizeof(arc_code));//need not flush cache for sram. Sram locates at io mapping.
+
+//	for(i = 0; i<sizeof(arc_code)/4; i+=4,pbuffer+=4)
+//		printk(" 0x%x	0x%x	0x%x	0x%x \n",*(pbuffer),*(pbuffer+1),*(pbuffer+2),*(pbuffer+3));
+    v = ((IO_SRAM_PHY_BASE & 0xFFFFF)>>12);
+    aml_write_reg32(P_AO_SECURE_REG0, v<<8 | aml_read_reg32(P_AO_SECURE_REG0)); //TEST_N : 1->output mode; 0->input mode
+
+    aml_write_reg32(P_AO_RTI_STATUS_REG1, 0);//clean status
+
+//	writel(0x200,P_AO_CPU_CNTL);//halt first
+	aml_write_reg32(P_RESET2_REGISTER, aml_read_reg32(P_RESET2_REGISTER)|(1<<13));//reset AO_CPU
+
+	udelay(10);
+
+  //enable arc
+    aml_write_reg32(P_AO_CPU_CNTL, 0x0c900101);//remap is right?
+
+	udelay(20);
+	if(aml_read_reg32(P_AO_RTI_STATUS_REG1) == 0xeeeeaaaa){
+		printk("AO cpu runs ok.\n");
+		return 0;
+	}
+	else{
+		printk("AO cpu runs fail. 0x%x\n",aml_read_reg32(P_AO_RTI_STATUS_REG1));
+		return -1;
+	}
+}
+
+int stop_ao_cpu(void)
+{
+	aml_write_reg32(P_AO_RTI_STATUS_REG1, 0xddddeeee); //ask ao to halt.
+	udelay(15);
+	if(aml_read_reg32(P_AO_RTI_STATUS_REG1) == 0x0){
+		printk("AO cpu stop ok.\n");
+		return 0;
+	}
+	else{
+		printk("AO cpu stop fail.\n");
+		return -1;
+	}
+}
+#endif
+
 extern int det_pwr_key(void);
 extern void clr_pwr_key(void);
 
@@ -260,6 +320,9 @@ static void meson_pm_suspend(void)
 	ENABLE_SUSPEND_WATCHDOG;
 #endif    
 
+#ifdef CONFIG_AO_TRIG_CLK
+	stop_ao_cpu();
+#endif
 	//analog_switch(OFF);
 	 if (pdata->set_vccx2) {
 		pdata->set_vccx2(OFF);
@@ -324,6 +387,10 @@ static void meson_pm_suspend(void)
 	//power_gate_switch(ON);
 	clk_switch(ON);
 	//analog_switch(ON);
+
+#ifdef CONFIG_AO_TRIG_CLK
+	run_arc_program();
+#endif
 }
 
 static int meson_pm_prepare(void)
@@ -403,7 +470,12 @@ static int __init meson_pm_probe(struct platform_device *pdev)
 	clk81 = clk_get_sys("clk81", NULL);
 	clkxtal = clk_get_sys("xtal", NULL);
 	printk(KERN_INFO "meson_pm_probe done !\n");
+
+#ifdef CONFIG_AO_TRIG_CLK
+	return run_arc_program();
+#else
 	return 0;
+#endif
 }
 
 static int __exit meson_pm_remove(struct platform_device *pdev)
-- 
2.19.0

