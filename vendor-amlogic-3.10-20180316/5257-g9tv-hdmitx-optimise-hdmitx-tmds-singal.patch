From f4b8b938e238630f4ed5a414a4edc2f5b13b2ec7 Mon Sep 17 00:00:00 2001
From: Zongdong Jiao <zongdong.jiao@amlogic.com>
Date: Fri, 26 Dec 2014 21:33:29 +0800
Subject: [PATCH 5257/5965] g9tv: hdmitx: optimise hdmitx tmds singal

In order to better compliance with FBC, optimise hdmitx mode change:
1) set_AVMUTE and wait 50ms
2) if current mode use same VCO setting as previous, not reset VCO
3) clear_AVMUTE after all setting done
---
 arch/arm/mach-mesong9tv/enc_clk_config.c      | 302 ++----------------
 .../mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c |  11 +-
 drivers/amlogic/display/vout/tvoutc.c         |   4 +
 drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c |   2 +-
 4 files changed, 47 insertions(+), 272 deletions(-)

diff --git a/arch/arm/mach-mesong9tv/enc_clk_config.c b/arch/arm/mach-mesong9tv/enc_clk_config.c
index b5ec1adea09d..31e663febbcd 100644
--- a/arch/arm/mach-mesong9tv/enc_clk_config.c
+++ b/arch/arm/mach-mesong9tv/enc_clk_config.c
@@ -37,7 +37,9 @@
 #include <linux/amlogic/vout/enc_clk_config.h>
 #include "hw_enc_clk_config.h"
 
+static void hpll_load_initial(void);
 static DEFINE_MUTEX(enc_clock_lock);
+static unsigned int hpll_vco_clk = 0xffff;      // not initial value
 
 #define check_clk_config(para)\
     if (para == -1)\
@@ -117,6 +119,8 @@ static void set_hdmitx_sys_clk(void)
 
 static void set_hpll_clk_out(unsigned clk)
 {
+    hpll_load_initial();
+
     check_clk_config(clk);
     printk("config HPLL\n");
     switch(clk){
@@ -353,226 +357,6 @@ static void hpll_load_en(void)
     aml_set_reg32_bits(P_HHI_VID_CLK_CNTL, 0, 16, 3);  // use vid_pll
 }
 
-#define MAX_CLK_INDEX   4
-#define MAX_SAME_CONF   (4 + 1)
-struct cts_mode_clk {
-    vmode_t mode[MAX_SAME_CONF];
-    struct {
-        unsigned int cts_idx;
-        unsigned char *name;
-        unsigned int target_clk;
-    }idx_clk[MAX_CLK_INDEX];
-};
-
-struct cts_mode_clk hdmitx_clk[] = {
-    {
-        .mode = {VMODE_1080P, VMODE_1080P_50HZ, VMODE_MAX},
-        .idx_clk[0] = {
-            .cts_idx = 55,
-            .name = "VID_PLL_DIV_CLK_OUT",
-            .target_clk = -1,//148000000,
-        },
-    },
-    {
-        .mode = {VMODE_4K2K_30HZ, VMODE_4K2K_25HZ, VMODE_4K2K_24HZ, VMODE_4K2K_SMPTE, VMODE_MAX},
-        .idx_clk[0] = {
-            .cts_idx = 55,
-            .name = "VID_PLL_DIV_CLK_OUT",
-            .target_clk = -1,//297000000 * 2,
-        },
-    },
-    {
-        .mode = {VMODE_4K2K_FAKE_5G, VMODE_4K2K_60HZ, VMODE_MAX},
-        .idx_clk[0] = {
-            .cts_idx = 55,
-            .name = "VID_PLL_DIV_CLK_OUT",
-            .target_clk = -1,//494000000,
-        },
-    },
-};
-/*
- * Please refer to clock tree document to check related clocks
- * 
- */
-static unsigned int cts_clk_match(vmode_t mode)
-{
-    unsigned int i = 0, j = 0;
-    unsigned int clk_msr = 0;
-return 1;
-    for(i = 0; i < ARRAY_SIZE(hdmitx_clk); i ++) {
-        for(j = 0; j < MAX_SAME_CONF; j ++) {
-            if((mode == hdmitx_clk[i].mode[j]) && (hdmitx_clk[i].mode[j] != VMODE_MAX)) {
-                clk_msr = clk_measure(hdmitx_clk[i].idx_clk[0].cts_idx);
-                if(hdmitx_clk[i].idx_clk[0].target_clk == -1)
-                    return 1;   // not check
-                if(clk_msr == hdmitx_clk[i].idx_clk[0].target_clk) {
-                    return 1;
-                }
-                else {
-                    printk("mode: %d  %s(%d)  TargetClk: %d  !=  MsrClk: %d\n", mode, hdmitx_clk[i].idx_clk[0].name,
-                           hdmitx_clk[i].idx_clk[0].cts_idx, hdmitx_clk[i].idx_clk[0].target_clk, clk_msr);
-                    return 0;
-                }
-            }
-        }
-    }
-
-    return 0;
-}
-
-#define MAX_CHK_TIMES   10
-static void cts_clk_check(vmode_t mode)
-{
-    unsigned int chk_times = 0;
-
-    while(chk_times < MAX_CHK_TIMES) {
-        msleep_interruptible(100);
-        if(cts_clk_match(mode))
-            return;
-        else {
-            chk_times ++;
-            WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
-        }
-    }
-    if(chk_times == MAX_CHK_TIMES) {
-        printk("**************************************************\n");
-        printk("HDMI TX clock ABNORMAL STATE\n");
-        printk("**************************************************\n");
-    }
-}
-
-static int vmode_clk_match(vmode_t mode)
-{
-    unsigned int clk_msr = 0;
-
-    if(!(aml_read_reg32(P_HHI_HDMI_PLL_CNTL) & (1 << 31)))
-        return 0;
-    if((aml_read_reg32(P_HHI_HDMI_PLL_CNTL) & 0xfff) != 0x23d)
-        return 0;
-    if((mode == VMODE_4K2K_FAKE_5G) || (mode == VMODE_4K2K_5G))
-        return 0;
-
-    clk_msr = clk_measure(55);
-    printk("%s[%d], mode = %d, clkmsr = %d\n", __func__, __LINE__, mode, clk_msr);
-    switch(mode) {
-    case VMODE_720P:
-    case VMODE_1080I:
-    case VMODE_1080P:
-    case VMODE_720P_50HZ:
-    case VMODE_1080I_50HZ:
-    case VMODE_1080P_50HZ:
-    case VMODE_1080P_24HZ:
-    case VMODE_4K2K_30HZ:
-    case VMODE_4K2K_25HZ:
-    case VMODE_4K2K_24HZ:
-    case VMODE_4K2K_SMPTE:
-    case VMODE_4K2K_60HZ:
-        if(  (clk_msr == 148000000) || (clk_msr == 149000000)
-          || (clk_msr == 593000000) || (clk_msr == 594000000) || (clk_msr == 595000000)
-          || (clk_msr == 74000000) || (clk_msr == 73000000) || (clk_msr == 75000000))
-            return 1;
-        break;
-    case VMODE_4K2K_FAKE_5G:
-    case VMODE_4K2K_5G:
-        if((clk_msr == 493000000) || (clk_msr == 494000000) || (clk_msr == 493000000) || (clk_msr == 247000000))
-            return 1;
-        break;
-    default:
-        break;
-    }
-    return 0;
-}
-
-void set_vmode_clk_va(vmode_t mode)
-{
-    hpll_load_initial();
-printk("set_vmode_clk mode is %d\n", mode);
-
-	if( (VMODE_576CVBS==mode) || (VMODE_480CVBS==mode) )
-	{
-		printk("g9tv: cvbs clk!\n");
-		aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x5000022d);
-	    aml_write_reg32(P_HHI_HDMI_PLL_CNTL2, 0x00890000);
-	    aml_write_reg32(P_HHI_HDMI_PLL_CNTL3, 0x135c5091);
-	    aml_write_reg32(P_HHI_HDMI_PLL_CNTL4, 0x801da72c);
-		// P_HHI_HDMI_PLL_CNTL5
-		// 0x71c86900 for div2 disable inside PLL2 of HPLL
-		// 0x71486900 for div2 enable inside PLL2 of HPLL
-	    aml_write_reg32(P_HHI_HDMI_PLL_CNTL5, 0x71c86900);
-	    aml_write_reg32(P_HHI_HDMI_PLL_CNTL6, 0x00000e55);
-	    aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x4000022d);
-
-	    WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
-
-	    clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_5);
-
-		// select vid_pll_clk for muxing
-		aml_write_reg32(P_HHI_VID_CLK_CNTL, (aml_read_reg32(P_HHI_VID_CLK_CNTL)&(~(0x7<<16))) );
-		// disable divider for clk_rst_tst()
-		aml_write_reg32(P_HHI_VID_CLK_DIV, (aml_read_reg32(P_HHI_VID_CLK_DIV)&(~0xff)) );
-		// select clk_div1 for enci clk muxing
-		aml_write_reg32(P_HHI_VID_CLK_DIV, (aml_read_reg32(P_HHI_VID_CLK_DIV)&(~(0xf<<28))) );
-		// select clk_div1 for vdac clk muxing
-		aml_write_reg32(P_HHI_VIID_CLK_DIV, (aml_read_reg32(P_HHI_VIID_CLK_DIV)&(~(0x1<<19))) );
-		aml_write_reg32(P_HHI_VIID_CLK_DIV, (aml_read_reg32(P_HHI_VIID_CLK_DIV)&(~(0xf<<28))) );
-		// clk gate for enci(bit0) and vdac(bit4)
-		aml_write_reg32(P_HHI_VID_CLK_CNTL2, (aml_read_reg32(P_HHI_VID_CLK_CNTL2)|0x1|(0x1<<4)) );
-
-		return;
-	}
-    aml_write_reg32(P_HHI_HDMI_PLL_CNTL2, 0x00444e00);
-    aml_write_reg32(P_HHI_HDMI_PLL_CNTL3, 0x135c5091);
-    aml_write_reg32(P_HHI_HDMI_PLL_CNTL4, 0x801da72c);
-    aml_write_reg32(P_HHI_HDMI_PLL_CNTL5, 0x71486900);    //5940 0x71c86900      // 0x71486900 2970
-    aml_write_reg32(P_HHI_HDMI_PLL_CNTL6, 0x00000e55);
-    if(!vmode_clk_match(mode)) {
-        printk("%s[%d] reset hdmi hpll\n", __func__, __LINE__);
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x0000023d);
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x5000023d);
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x4000023d);
-
-        WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
-    }
-    aml_write_reg32(P_HHI_HDMI_CLK_CNTL, 0x100);
-
-    switch(mode) {
-    case VMODE_1080P:
-    case VMODE_1080P_50HZ:
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x44, 16, 8);
-        break;
-    case VMODE_4K2K_30HZ:
-    case VMODE_4K2K_25HZ:
-    case VMODE_4K2K_24HZ:
-    case VMODE_4K2K_SMPTE:
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 1, 0, 8);
-        break;
-    case VMODE_4K2K_60HZ:
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 0, 0, 8);
-        break;
-    case VMODE_4K2K_FAKE_5G:
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x50000266);
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x40000266);
-        WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x40, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 0, 0, 8);
-        break;
-    case VMODE_4K2K_5G:
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x50000266);
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x40000266);
-        WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x44, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 1, 0, 8);
-        break;
-    default:
-        break;
-    }
-    clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_5);
-    cts_clk_check(mode);
-return;
-}
-
 // mode viu_path viu_type hpll_clk_out od1 od2 od3
 // vid_pll_div vid_clk_div hdmi_tx_pixel_div encp_div enci_div enct_div encl_div vdac0_div
 static hw_enc_clk_val_t setting_enc_clk_val[] = {
@@ -592,15 +376,37 @@ static hw_enc_clk_val_t setting_enc_clk_val[] = {
 
 void set_vmode_clk(vmode_t mode)
 {
+    unsigned int val = 0;
     int i = 0;
     int j = 0;
     hw_enc_clk_val_t *p_enc =NULL;
 
-    hpll_load_initial();
-printk("set_vmode_clk mode is %d\n", mode);
+    printk("set_vmode_clk mode is %d\n", mode);
+
+    val = aml_read_reg32(P_HHI_HDMI_PLL_CNTL);
+    if((val >> 30) == 0x3) {
+        switch(val & 0xffff) {
+        case 0x23d:
+            hpll_vco_clk = 2970;
+            break;
+        case 0x266:
+            hpll_vco_clk = 2448;
+            break;
+        default:
+            hpll_vco_clk = 0xffff;
+        }
+    } else {
+        hpll_vco_clk = 0xffff;
+    }
+    if(hpll_vco_clk != 0xffff) {
+        printk("hpll already clk: %d\n", hpll_vco_clk);
+    } else {
+        printk("hpll already clk: -1\n");
+    }
 
 	if( (VMODE_576CVBS==mode) || (VMODE_480CVBS==mode) )
 	{
+        hpll_load_initial();
 		printk("g9tv: cvbs clk!\n");
 		aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x5000022d);
 	    aml_write_reg32(P_HHI_HDMI_PLL_CNTL2, 0x00890000);
@@ -631,20 +437,21 @@ printk("set_vmode_clk mode is %d\n", mode);
 
 		return;
 	}
-    if(!vmode_clk_match(mode)) {
-    }
-
     p_enc=&setting_enc_clk_val[0];
     i = sizeof(setting_enc_clk_val) / sizeof(enc_clk_val_t);
 
-    printk("mode is: %d\n", mode);
     for (j = 0; j < i; j++){
         if(mode == p_enc[j].mode)
             break;
     }
+    if(j == i) {
+        printk("set_vmode_clk: not valid mode %d\n", mode);
+        return;
+    }
     set_viu_path(p_enc[j].viu_path, p_enc[j].viu_type);
     set_hdmitx_sys_clk();
-    set_hpll_clk_out(p_enc[j].hpll_clk_out);
+    if(hpll_vco_clk != p_enc[j].hpll_clk_out)
+        set_hpll_clk_out(p_enc[j].hpll_clk_out);
     set_hpll_od1(p_enc[j].od1);
     set_hpll_od2(p_enc[j].od2);
     set_hpll_od3(p_enc[j].od3);
@@ -655,46 +462,5 @@ printk("set_vmode_clk mode is %d\n", mode);
     set_enci_div(p_enc[j].enci_div);
     set_encl_div(p_enc[j].encl_div);
     set_vdac0_div(p_enc[j].vdac0_div);
-return;
-    
-
-    switch(mode) {
-    case VMODE_1080P:
-    case VMODE_1080P_50HZ:
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x44, 16, 8);
-        break;
-    case VMODE_4K2K_30HZ:
-    case VMODE_4K2K_25HZ:
-    case VMODE_4K2K_24HZ:
-    case VMODE_4K2K_SMPTE:
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 1, 0, 8);
-        break;
-    case VMODE_4K2K_60HZ:
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 0, 0, 8);
-        break;
-    case VMODE_4K2K_60HZ_Y420:
-        printk("%s[%d]TODO\n", __func__, __LINE__);
-        break;
-    case VMODE_4K2K_FAKE_5G:
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x50000266);
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x40000266);
-        WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x40, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 0, 0, 8);
-        break;
-    case VMODE_4K2K_5G:
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x50000266);
-        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x40000266);
-        WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
-        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x44, 16, 8);
-        aml_set_reg32_bits(P_HHI_VID_CLK_DIV, 1, 0, 8);
-        break;
-    default:
-        break;
-    }
-    clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_5);
-    cts_clk_check(mode);
 }
  
diff --git a/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c b/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c
index c13b5e4f32c7..a34f160f9e5a 100755
--- a/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c
+++ b/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c
@@ -1764,6 +1764,7 @@ static void hdmitx_set_phy(hdmitx_dev_t* hdmitx_device)
         aml_write_reg32(P_HHI_HDMI_PHY_CNTL3, 0x303e005b);
         break;
     }
+#if 0   // tmp mark
 // P_HHI_HDMI_PHY_CNTL1     bit[1]: enable clock    bit[0]: soft reset
 #define RESET_HDMI_PHY()                        \
     aml_write_reg32(P_HHI_HDMI_PHY_CNTL1, 0xf);   \
@@ -1776,6 +1777,7 @@ static void hdmitx_set_phy(hdmitx_dev_t* hdmitx_device)
     RESET_HDMI_PHY();
     RESET_HDMI_PHY();
 #undef RESET_HDMI_PHY
+#endif
     hdmi_print(IMP, SYS "phy setting done\n");
 }
 
@@ -1820,6 +1822,9 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdev, Hdmi_tx_video_para_t *param)
     if(color_space_f != 0){
         param->color = color_space_f;
     }
+    hdmitx_set_reg_bits(HDMITX_DWC_FC_GCP, 1, 1, 1);    // set_AVMUTE to 1
+    hdmitx_set_reg_bits(HDMITX_DWC_FC_GCP, 0, 0, 1);    // clear_AVMUTE to 0
+    msleep(50);
     hdmitx_set_pll(hdev);
     hdmitx_set_phy(hdev);
     switch(param->VIC){
@@ -1897,6 +1902,9 @@ printk("%s[%d]\n", __func__, __LINE__);     //?????
     msleep(1);
     hdmitx_set_reg_bits(HDMITX_DWC_FC_INVIDCONF, 1, 3, 1);
 
+    hdmitx_set_reg_bits(HDMITX_DWC_FC_GCP, 0, 1, 1);    // set_AVMUTE to 0
+    hdmitx_set_reg_bits(HDMITX_DWC_FC_GCP, 1, 0, 1);    // clear_AVMUTE to 1
+
     return 0;
 }
 
@@ -3629,9 +3637,6 @@ void config_hdmi20_tx ( HDMI_Video_Codes_t vic, struct hdmi_format_para *para,
     // wire            wr_enable           = control[3];
     // wire            fifo_enable         = control[2];    
     // assign          phy_clk_en          = control[1];
-    aml_set_reg32_bits(P_HHI_HDMI_PHY_CNTL1, 1, 1, 1);   // Enable tmds_clk
-    aml_set_reg32_bits(P_HHI_HDMI_PHY_CNTL1, 1, 2, 1);   // Enable the decoupling FIFO
-    aml_set_reg32_bits(P_HHI_HDMI_PHY_CNTL1, 1, 3, 1);   // Enable enable the write/read decoupling state machine 
     aml_set_reg32_bits(P_HHI_MEM_PD_REG0, 0, 8, 8);      // Bring HDMITX MEM output of power down
 
     // Enable APB3 fail on error
diff --git a/drivers/amlogic/display/vout/tvoutc.c b/drivers/amlogic/display/vout/tvoutc.c
index 5f6940bfce81..e6176c52bf53 100755
--- a/drivers/amlogic/display/vout/tvoutc.c
+++ b/drivers/amlogic/display/vout/tvoutc.c
@@ -497,7 +497,11 @@ int tvoutc_setmode(tvmode_t mode)
 		(mode==TVMODE_4K2K_25HZ) || (mode==TVMODE_4K2K_30HZ) || (mode==TVMODE_4K2K_FAKE_5G) ||
 		(mode==TVMODE_4K2K_SMPTE) || (mode==TVMODE_4K2K_60HZ) )
 	{
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV
+    // NOTE: for G9TV, DO NOT TURN OFF HPLL
+#else
 		WRITE_CBUS_REG_BITS(HHI_VID_PLL_CNTL, 0x0, 30, 1);
+#endif
 	}
 
     cvbs_cntl_output(0);
diff --git a/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c b/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c
index f64c3846c377..17994b4a6989 100644
--- a/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c
+++ b/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c
@@ -289,7 +289,7 @@ static void hdmitx_pre_display_init(void)
     hdmitx_device.HWOp.CntlConfig(&hdmitx_device, CONF_AUDIO_MUTE_OP, AUDIO_MUTE);
     hdmitx_device.HWOp.CntlDDC(&hdmitx_device, DDC_HDCP_OP, HDCP_OFF);
     //msleep(10);
-    hdmitx_device.HWOp.CntlMisc(&hdmitx_device, MISC_TMDS_PHY_OP, TMDS_PHY_DISABLE);
+//    hdmitx_device.HWOp.CntlMisc(&hdmitx_device, MISC_TMDS_PHY_OP, TMDS_PHY_DISABLE);
 //    hdmitx_device.HWOp.Cntl(&hdmitx_device, HDMITX_INTR_MASKN_CNTL, INTR_MASKN_ENABLE);
 //    hdmitx_device.HWOp.Cntl(&hdmitx_device, HDMITX_CBUS_RST, 0);
 //    hdmitx_device.HWOp.Cntl(&hdmitx_device, HDMITX_IP_SW_RST, TX_SYS_SW_RST);
-- 
2.19.0

