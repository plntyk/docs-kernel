From 23c3dcafa0b3c195395de4714203155eeabb40f0 Mon Sep 17 00:00:00 2001
From: "simon.zheng" <simon@ubuntu.(none)>
Date: Fri, 12 Dec 2014 17:15:56 +0800
Subject: [PATCH 5266/5965] PD#99537:MVC support on M8

---
 .../m8/ucode/h264mvc/h264c_mvc_linux.h        |   4 +-
 .../m8/ucode/h264mvc/h264header_mvc_linux.h   |   7 +-
 .../m8/ucode/h264mvc/h264slice_mvc_linux.h    | 318 +++++++++---------
 drivers/amlogic/amports/vh264mvc.c            | 225 +++++++++++--
 drivers/amlogic/amports/video.c               |  96 +++++-
 drivers/amlogic/ppmgr/ppmgr_vpp.c             |  10 +
 include/linux/amlogic/amports/vframe.h        |   1 +
 7 files changed, 452 insertions(+), 209 deletions(-)
 mode change 100755 => 100644 drivers/amlogic/amports/m8/ucode/h264mvc/h264c_mvc_linux.h
 mode change 100755 => 100644 drivers/amlogic/amports/m8/ucode/h264mvc/h264header_mvc_linux.h
 mode change 100755 => 100644 drivers/amlogic/amports/m8/ucode/h264mvc/h264slice_mvc_linux.h

diff --git a/drivers/amlogic/amports/m8/ucode/h264mvc/h264c_mvc_linux.h b/drivers/amlogic/amports/m8/ucode/h264mvc/h264c_mvc_linux.h
old mode 100755
new mode 100644
index fb502bb24d8b..4cdf2465b217
--- a/drivers/amlogic/amports/m8/ucode/h264mvc/h264c_mvc_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/h264mvc/h264c_mvc_linux.h
@@ -4,12 +4,12 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0xc7ffd00,0xa60c141,0xc781b00,0x0800000,0xa608181,0xc7ffbc0,0xa6081c1,0xc783740,
 	0xc7ffb00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0xc781dc0,0x0000000,0xcc00000,0x0400000,0xcb80003,0x0000000,0xcc00000,0x0400000,
-	0xc7a0e80,0x0000000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xc7a0d00,0x0000000,
+	0xc7a1280,0x0000000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xc7a1100,0x0000000,
 	0xc781a40,0x0000000,0xcc00000,0x0400000,0x6800000,0x6800001,0x7400040,0xb2fc881,
 	0x4001041,0x7c01c00,0x7c01c40,0x7c01c80,0x6800380,0x7c007c0,0x7c00780,0x6803fc0,
 	0x7c013c0,0x69fffc0,0x7c021c0,0x7c00280,0x64c4000,0x64c4201,0x2401001,0x4008041,
 	0x7c00801,0x5810041,0x7c00841,0xcc00000,0x0000000,0x649d100,0xaa18080,0x6800000,
-	0x680f901,0xc000300,0x6800042,0x809d102,0x80c0a00,0x80c2800,0x80c0002,0x6bffe80,
+	0x680fa81,0xc000300,0x6800042,0x809d102,0x80c0a00,0x80c2800,0x80c0002,0x6bffe80,
 	0x6030400,0x6810003,0x809ca02,0xc7fea40,0x0400000,0x6034201,0x649ce01,0x2000040,
 	0x6034100,0x6a10000,0x6c001c0,0x6034000,0xa60c042,0xc000980,0x0000000,0xa60c082,
 	0xc000ac0,0x0000000,0xa60c0c2,0xc000a80,0x0000000,0x6434000,0x580f000,0xbef8040,
diff --git a/drivers/amlogic/amports/m8/ucode/h264mvc/h264header_mvc_linux.h b/drivers/amlogic/amports/m8/ucode/h264mvc/h264header_mvc_linux.h
old mode 100755
new mode 100644
index 368dc3addc8a..c21a328105d6
--- a/drivers/amlogic/amports/m8/ucode/h264mvc/h264header_mvc_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/h264mvc/h264header_mvc_linux.h
@@ -42,8 +42,8 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x680000d,0xb80238d,0xcc00000,0xc0079c0,0x80c2301,0xb6f004d,0x400134d,0xb6e8090,
 	0xc7ffe40,0x7400308,0x6800050,0xb4073d0,0xc07fc40,0x68014cc,0xc07fbc0,0x680150c,
 	0xc7ffec0,0x4001410,0xc7faf00,0x0000000,0x64c5109,0x64c460a,0x7800848,0x5410208,
-	0x780080b,0x20082c8,0x580a208,0xe000248,0x0000000,0x0000000,0x0000000,0xf000200,
-	0xf010240,0x9708209,0x540a208,0x2008288,0x64c4309,0x2408248,0x64c4009,0x2408248,
+	0x780080b,0x20082c8,0x5801208,0xe000248,0x0000000,0x0000000,0x0000000,0xf000200,
+	0xf010240,0x9708209,0x5401208,0x2008288,0x64c4309,0x2408248,0x64c4009,0x2408248,
 	0x7c01308,0x5810208,0x7c012c8,0xcc00000,0x0000000,0x6800008,0x7c01188,0x6808012,
 	0xc006e80,0x80c2301,0xb20bfc8,0xc7fa6c0,0x7c00d88,0xc006d40,0x80c2301,0x7c00dc8,
 	0x649cb09,0x3809209,0xbe0c049,0xc7fa4c0,0x0000000,0xfc01200,0x7c00e08,0xfc01200,
@@ -123,5 +123,6 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x6800d8a,0x68011ca,0x680044a,0xc0003c0,0x6b00d8b,0x7801189,0xaa28009,0x6900009,
 	0x6c00049,0x5409288,0x2009289,0x680100a,0x2009289,0x680380a,0xc000100,0x6b0800b,
 	0xcc00000,0x0000000,0x603520a,0x649ce0a,0x200a24a,0x603510a,0x603500b,0x6435009,
-	0x580f249,0xbef8049,0xcc00000,0x0000000,0x0000000,0x0000000
+	0x580f249,0xbef8049,0x0000000,0x6435309,0x900c249,0xa6f8009,0x0000000,0xcc00000,
+	0x0000000,0x0000000,0x0000000
 };
diff --git a/drivers/amlogic/amports/m8/ucode/h264mvc/h264slice_mvc_linux.h b/drivers/amlogic/amports/m8/ucode/h264mvc/h264slice_mvc_linux.h
old mode 100755
new mode 100644
index fae8f4480c41..01c1d53d91fb
--- a/drivers/amlogic/amports/m8/ucode/h264mvc/h264slice_mvc_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/h264mvc/h264slice_mvc_linux.h
@@ -8,183 +8,183 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x6800008,0x60c2108,0xc001bc0,0x0000000,0x80c0001,0x8030504,0xc7ef380,0x0400000,
 	0x6bfd98a,0x603040a,0x0400000,0x64c430a,0x580128a,0xbaf980a,0x64c0008,0xbe3c048,
 	0x0000000,0x0800000,0x6bffe8a,0x603040a,0xcc00000,0x0400000,0xc780000,0xc780000,
-	0xc780000,0x0000000,0xbef9008,0x0000000,0xc78b540,0x680000a,0xaa4c048,0xbeed208,
+	0xc780000,0x0000000,0xbef9008,0x0000000,0xc78b700,0x680000a,0xaa4c048,0xbeed208,
 	0x683ffcb,0xaadc00b,0x44012cb,0x64e0f08,0x9003248,0x9063288,0xb40324a,0x240a24a,
 	0x400828a,0xba180ca,0xaedc0ca,0x80c3e00,0x64c3f08,0x9002208,0xa6cc0c8,0xcb80024,
 	0x0000000,0x680000a,0x649d308,0xaa24008,0xaa18011,0xa60c048,0xc780180,0x809d300,
-	0x4401208,0x680004a,0xc78ae40,0x609d308,0x680000a,0x7802108,0xaa18008,0xaa0c011,
-	0x0000000,0x680004a,0xc78ac40,0x0000000,0x7800bc8,0xaa14388,0x7801748,0xaa08088,
-	0xc784600,0xc7875c0,0xaa08088,0xc782f40,0xc786740,0x0000000,0x649c908,0x4001208,
+	0x4401208,0x680004a,0xc78b000,0x609d308,0x680000a,0x7802108,0xaa18008,0xaa0c011,
+	0x0000000,0x680004a,0xc78ae00,0x0000000,0x7800bc8,0xaa14388,0x7801748,0xaa08088,
+	0xc7847c0,0xc787780,0xaa08088,0xc783100,0xc786900,0x0000000,0x649c908,0x4001208,
 	0x609c908,0x6800015,0x7c02155,0x7c02195,0x7c021d5,0x7c02215,0x7c02255,0x6803fc8,
 	0x7c022c8,0x6800008,0x7c02388,0x7c02408,0x7c02448,0x7802548,0x4001208,0x7c02588,
 	0x6800048,0x60e0c08,0x7c02788,0x7c025c8,0x6800008,0x7c027c8,0x68003c8,0x7c02608,
-	0x6805c08,0x60c2108,0x80c2170,0x6800088,0x7c02708,0xc013380,0x0000000,0xcc00000,
-	0x6800016,0x78027cb,0xa6fc00b,0x0000000,0xc013640,0x0000000,0xc013bc0,0x0000000,
-	0x7801748,0x6900009,0x6c000c9,0x649ce0a,0x2009289,0x5c0c289,0x6819324,0xaa18088,
-	0x6800009,0x68162a4,0xaa0c148,0x6800049,0x6800089,0x7c02509,0x78017c8,0x94c2248,
-	0x60c0409,0x7c0264a,0x581028a,0x7c0268a,0x6800008,0x7c02748,0x7800b4b,0x7800b88,
-	0xa630008,0x78017ca,0xaa280ca,0x54012cb,0x58012cb,0x6490708,0x9808088,0x98080c8,
-	0x6090708,0x6495108,0x98083c8,0x6095108,0x7c026cb,0x7800bc8,0x944220a,0x7c00bc8,
-	0xa630388,0x68000ca,0x6495108,0x940420a,0x6095108,0x6490708,0x9808448,0x6090708,
-	0x7801748,0xaa0c088,0x6818324,0x6814aa4,0x7800e08,0xa610008,0x7801a88,0xc780b00,
-	0x60c0a08,0xfc07200,0x80c2940,0x7801a88,0x9808188,0x98083c8,0x60c0a08,0x9c083c8,
-	0x9808388,0xc00b0c0,0x60c0a08,0x7802509,0x64c0a08,0x91c2208,0xa6f8008,0x780285b,
-	0x6c0001b,0x680001c,0x6c0001c,0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,
-	0xa628009,0x7800bc8,0x680030a,0xaa18388,0x7c0280a,0x680018a,0x7c0280a,0xcc00000,
-	0x60c0715,0xcc00000,0x680030a,0xaa18388,0x7c0280a,0x680018a,0x7c0280a,0xcc00000,
-	0x60c0715,0xcc00000,0x0000000,0xc00a840,0x80c0600,0x780285b,0x6c0001b,0x680001c,
-	0x6c0001c,0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,0x7802509,0xa628009,
+	0x6805c08,0x60c2108,0x80c2170,0x6800088,0x7c02708,0xc013680,0x0000000,0xcc00000,
+	0x6800016,0x78027cb,0xa6fc00b,0x0000000,0xc013940,0x0000000,0xc013ec0,0x0000000,
+	0x7801748,0x6900009,0x6c000c9,0x649ce0a,0x2009289,0x5c0c289,0x68194e4,0xaa18088,
+	0x6800009,0x6816464,0xaa0c148,0x6800049,0x6800089,0x7c02509,0x78017c8,0x94c2248,
+	0x60c0409,0x7c0264a,0x6800008,0x7c02748,0x7800b0b,0xb20c2cb,0x68004cb,0x6800c0b,
+	0x6495108,0x970620b,0x6095108,0x7800b4b,0x7800b88,0xa630008,0x78017ca,0xaa280ca,
+	0x54012cb,0x58012cb,0x6490708,0x9808088,0x98080c8,0x6090708,0x6495108,0x98083c8,
+	0x6095108,0x7c026cb,0x7800bc8,0x944220a,0x7c00bc8,0xa638388,0x68000ca,0x6495108,
+	0x940420a,0x680000a,0x979d20a,0x6095108,0x6490708,0x9808448,0x6090708,0x7801748,
+	0xaa0c088,0x68184e4,0x6814c64,0x7800e08,0xa610008,0x7801a88,0xc780b00,0x60c0a08,
+	0xfc07200,0x80c2940,0x7801a88,0x9808188,0x98083c8,0x60c0a08,0x9c083c8,0x9808388,
+	0xc00b0c0,0x60c0a08,0x7802509,0x64c0a08,0x91c2208,0xa6f8008,0x780285b,0x6c0001b,
+	0x680001c,0x6c0001c,0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,0xa628009,
 	0x7800bc8,0x680030a,0xaa18388,0x7c0280a,0x680018a,0x7c0280a,0xcc00000,0x60c0715,
 	0xcc00000,0x680030a,0xaa18388,0x7c0280a,0x680018a,0x7c0280a,0xcc00000,0x60c0715,
-	0xcc00000,0x0000000,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0xa224055,
-	0x7802888,0x7c028c8,0x4000817,0x4000858,0x4000899,0x40008da,0xc781400,0x60c0715,
-	0x683ffc8,0x4401208,0xaa0c008,0x78027cb,0xa6f400b,0x68000cb,0x7802908,0x95102c8,
-	0x7802148,0x97082c8,0x6031e0b,0xaa08008,0xc780b00,0x80c0700,0x7802849,0x6c00009,
-	0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,
-	0x6c00009,0x60c0209,0x6bfffca,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x78028c9,
-	0x961024a,0x60c2709,0x80c0701,0x7802849,0x6c00009,0x60c0209,0x6800009,0x6c00009,
-	0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x60c0317,
-	0x60c0318,0x60c0319,0x60c031a,0x780288b,0x96102ca,0x60c270b,0xc780580,0x60c0715,
-	0x64c270a,0x921028a,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x78028c9,0x961024a,
-	0x60c2709,0x80c0701,0x64c270a,0x921028a,0x60c0317,0x60c0318,0x60c0319,0x60c031a,
-	0x7802889,0x961024a,0x60c2709,0x60c0715,0x6431e0a,0xbefc04a,0x7802a08,0x4c30208,
-	0xc780b40,0x60c2508,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0x60c0715,
-	0x921029f,0x7802148,0xa638008,0x7802849,0x6c00009,0x60c0209,0x6800009,0x6c00009,
-	0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6bfffca,
-	0x60c0317,0x60c0318,0x60c0319,0x60c031a,0x7802889,0x961024a,0x60c2709,0x7802a08,
-	0x4c30208,0x60c2508,0x683ffca,0x78027cb,0xaa0c00b,0xa6f800a,0x440128a,0x68000cb,
-	0x780290a,0x95102ca,0x780214a,0x97082ca,0x6031e0b,0x7802a4c,0x7802608,0x7c02988,
-	0x64c2308,0x9304248,0xa6f8009,0x90a1248,0x9024208,0x9521209,0xaa0c00c,0x7c02608,
-	0xc781040,0xaa64248,0x60c2508,0xaa64288,0xaa58348,0xaa1c049,0xaa58388,0xa60c008,
-	0xc7801c0,0x0000000,0x80c2605,0x80c2606,0x80c2602,0x80c260f,0x80c2603,0x7802709,
-	0xaa100c9,0x680008a,0xc782940,0x7c0270a,0x78027cc,0xa6fc00c,0x0000000,0x7c02749,
-	0xc7827c0,0x7c0270a,0x80c2602,0x80c260f,0x80c2603,0x7802709,0xaa50089,0x68000ca,
-	0x7802149,0xaa0c009,0xc782540,0x7c0270a,0xaa08725,0xbef4055,0x683ffcc,0x7802789,
-	0x64e0c0a,0x901028a,0xb804289,0xaa0c00c,0xc7ffec0,0x440130c,0x6800089,0x68000ca,
-	0x680180c,0x60c210c,0x683ffcd,0xaa2c00d,0x64e110c,0x910130c,0xa6f400c,0x440134d,
-	0x64e110c,0x910130c,0xa6e400c,0x78027cc,0xa6dc00c,0x0000000,0x7c02749,0xc781e00,
-	0x7c0270a,0x6800008,0x7c02608,0x60c2508,0x6431e08,0xbefc048,0x68fdfc8,0x6fcffc8,
-	0x64e0407,0x2807207,0xc7ff140,0x60e0408,0x64c031b,0x64c031c,0x64c271f,0xa228055,
-	0x7802888,0x7c028c8,0x4000817,0x4000858,0x60c0715,0x7802a08,0x4c30208,0xc781500,
-	0x60c2508,0x7802148,0xa658008,0x80c0700,0x7802849,0x6c00009,0x60c0209,0x80c0200,
-	0x6bfffca,0x60c0320,0x60c0321,0x78028cb,0x96102ca,0x60c270b,0x80c0701,0x60c0209,
-	0x80c0200,0x60c0317,0x60c0318,0x780288b,0x96102ca,0x60c270b,0xc780480,0x60c0715,
-	0x64c270a,0x921028a,0x60c0320,0x60c0321,0x78028c9,0x961024a,0x60c2709,0x80c0701,
-	0x64c270a,0x921028a,0x60c0317,0x60c0318,0x7802889,0x961024a,0x60c2709,0x60c0715,
-	0x7802a08,0x4c30208,0x60c2508,0x78027cb,0xa6fc00b,0x68000cb,0x780290a,0x95102ca,
-	0x780214a,0x97082ca,0xc780840,0x6031e0b,0x64c031b,0x64c031c,0x64c271f,0x60c0715,
-	0x921029f,0x7802148,0xa618008,0x7802849,0x6c00009,0x60c0209,0x80c0200,0x6bfffca,
-	0x60c0317,0x60c0318,0x7802889,0x961024a,0x60c2709,0x7802a08,0x4c30208,0x60c2508,
-	0x683ffca,0x440128a,0xaa0c00a,0x78027cb,0xa6f400b,0x68000cb,0x780290a,0x95102ca,
-	0x780214a,0x97082ca,0x6031e0b,0x7802608,0x7c02988,0x64c2308,0x9304248,0xa6f8009,
-	0x9024208,0x7c02608,0xaa10288,0x60c2508,0x80c2602,0x80c260f,0x80c2603,0x4c00208,
-	0x9808208,0x60c2108,0x7802388,0xaa14008,0x6a01009,0xaa0c048,0x6a22009,0x6a40009,
-	0x6431e0a,0xbefc04a,0x6c00109,0x7800bca,0xa66838a,0xa264055,0x780298b,0xaa1c00b,
-	0x780274b,0x0800000,0x780278a,0x400128a,0x7c0278a,0x0400000,0xb61408b,0x0000000,
-	0x80c2170,0xc7807c0,0x80c260e,0x683ffcb,0x44012cb,0xaa0c00b,0x78027ca,0xa6f400a,
-	0x780278a,0x440128a,0xc006b00,0x7c0278a,0xc780500,0x8030580,0x60e0509,0x7802749,
-	0x680180a,0x9502289,0x60c210a,0x80c260e,0x6800089,0x7c023c8,0xba0c088,0x4001208,
-	0x6800008,0x7c02388,0x7802148,0x7c02288,0x7802988,0x7c029c8,0x7c027c9,0x8030580,
-	0x7802908,0xaa14725,0x4001208,0x7802189,0xa20c049,0x0000000,0x7c02908,0x683ffc9,
-	0x64c2308,0x9304208,0xaa2c008,0x0000000,0x80c3e01,0x64c3f08,0x93e1208,0xaae4008,
-	0xb6e0049,0x4401249,0x6bfffc9,0xc7f6140,0x7c02a89,0x64c2b08,0x60c2b08,0x78022ce,
-	0xba13fce,0x6800009,0xc781140,0x7c022c9,0x6808009,0xba1070e,0x400028e,0x441c28a,
-	0x680c009,0x54032ca,0x200b28b,0x20092c9,0x740025f,0x4001249,0x921031b,0x740024c,
-	0x4001249,0x740025b,0x4001249,0x740025c,0x4001249,0x921031c,0x740024c,0x4001249,
-	0x740025d,0x4001249,0x921031d,0x740024c,0x4001249,0x740025e,0x4001249,0x921031e,
-	0x740024c,0x7800b09,0xac07949,0x780214b,0xaa38725,0x400030b,0x780218b,0xc7802c0,
-	0x942f2cc,0xa61000b,0xaa14725,0x780218b,0xa20c04b,0xa6146ca,0x40012ce,0xb60c70e,
-	0x680000b,0x680070b,0x7c022cb,0xb014949,0xaa0800b,0xa64870b,0x780230b,0xa20c04b,
-	0x6a0800c,0x6a0c00c,0x690000a,0x6c0024a,0x649ce0b,0x200a2ca,0x780234d,0x54092cd,
-	0x200b28b,0x603510b,0x6803f0b,0x603520b,0x603500c,0xc004880,0x0000000,0x7800bc8,
-	0xaa64388,0x7802148,0x4001208,0x7c02148,0x78021c9,0x4001249,0x7c021c9,0x7800b09,
-	0xb82a248,0x6800008,0x7c02148,0x7802189,0x4001249,0x78026ca,0xb824289,0x7c02189,
-	0x680004a,0xc001ec0,0x0000000,0xc066540,0x0000000,0x8032100,0x809ca01,0xc7f4680,
-	0x6802a43,0x7802189,0xbe10049,0x4001209,0xc780580,0x7c02188,0x4401209,0x7c02188,
-	0x7802148,0x4001208,0x7c02148,0x78021c9,0x4001249,0x7c021c9,0x7800b09,0xb80b248,
-	0x6800008,0x7c02148,0x7802189,0x4002249,0x78026ca,0xb805289,0x7c02189,0x6800008,
-	0xc7ff800,0x7c021c8,0x64c3b08,0x920c208,0xb20ca08,0x680204b,0x7c02a4b,0x7802148,
-	0x9508548,0x780218a,0x940854a,0x7800b0a,0xb01494a,0x6808009,0xa628725,0xc780a40,
-	0x0000000,0x780218b,0xa20c04b,0x50012cb,0x4001208,0x5401208,0xc780a40,0x940120b,
-	0x4001208,0xa418288,0x78022ca,0x7802188,0xa27c048,0x400220a,0xc780380,0x6800008,
-	0xaa7c725,0x780218b,0xa2bc04b,0x40012c8,0xa4ed28b,0xc780680,0x6800008,0xaa14725,
-	0x6800008,0x7802188,0x5001208,0x4801208,0xb60c70a,0x6808009,0x680c009,0xc780400,
-	0x0000000,0xa628048,0x400220a,0x7802188,0xbe1c048,0x400220a,0xc7ffd80,0x6800048,
-	0xaabc008,0x78022ca,0x400120a,0xba10708,0xb6ace08,0x680c009,0x441c208,0x5403288,
-	0x200a20a,0x2009289,0x700024a,0x7c0288a,0x4001249,0x700024a,0x4001249,0x7000257,
-	0x96105ca,0x4001249,0x7000258,0x4001249,0x700024a,0x961060a,0x4001249,0x7000259,
-	0x4001249,0x700024a,0x961064a,0x4001249,0x700025a,0x4001249,0x700024a,0x961068a,
-	0x6bfda8a,0x603040a,0xcc00000,0x0400000,0x78027c8,0xa6fc008,0x0000000,0x64c0008,
-	0xa2f0048,0x64c3d08,0x580a208,0xbef80c8,0x6a00008,0x60c3d08,0x64c3d08,0x580a208,
-	0xbef80c8,0x0000000,0xcc00000,0x0000000,0x7800bcc,0xa60c38c,0x6800725,0x5801965,
-	0x6bfffcc,0x680001b,0x7802857,0x6800018,0x680001c,0x6800019,0x680001d,0x680001a,
-	0x680001e,0x4000817,0x4000858,0x4000899,0x40008da,0x680800b,0x680070f,0x74002cc,
-	0x40012cb,0x74002db,0x40012cb,0x74002d7,0x40012cb,0x74002d8,0x40012cb,0x74002dc,
-	0x40012cb,0x74002d9,0x40012cb,0x74002dd,0x40012cb,0x74002da,0x40012cb,0x74002de,
-	0xd07fbcf,0x40012cb,0x7c0288c,0x7c028cc,0x961030c,0x80c0700,0x60c270c,0x96105db,
-	0x60c0217,0x961061c,0x780250f,0xaa1800f,0x60c0218,0x961065d,0x60c0219,0x961069e,
-	0x60c021a,0x80c0701,0x60c270c,0x60c0217,0xaa1000f,0x60c0218,0x60c0219,0x60c021a,
-	0x7800b0f,0xb00a94f,0x6900008,0x6c00248,0x649ce09,0x2008248,0x6035108,0x6803f08,
-	0x6035208,0x6a08008,0x6035008,0x7802148,0xa60c008,0x6803fc8,0x7c022c8,0x6800008,
-	0x7c02908,0xac0b94f,0x78022c8,0xb613fc8,0xba0c708,0x441c208,0x7c022c8,0x6435008,
-	0x580f208,0xbef8048,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x6900008,
-	0x6c00248,0x649ce09,0x2008248,0x6035108,0x6803f08,0x6035208,0x6b0c008,0x6035008,
-	0x5401225,0xac0520f,0x6800088,0x7c02308,0xc7ff980,0x7c02348,0x6910009,0x6c00249,
-	0x649ce0a,0x2009289,0x54012a5,0x200a94a,0x680008b,0x7c0230b,0x68000cb,0x6435008,
-	0x580f208,0xbef8048,0x6803f08,0x6035109,0x6035208,0x6a08008,0x6035008,0xac0328f,
-	0xc7ff480,0x7c0234b,0x6808008,0x2009209,0x200a94a,0xc7ffc80,0x40012cb,0x400134d,
-	0x480f34d,0x7c0234d,0x980c38c,0x780230d,0x54092cd,0x690000a,0x6c0024a,0x200b28b,
-	0x649ce0a,0x200b28b,0x400134d,0x480f34d,0x7c0230d,0x643500d,0x580f34d,0xbef804d,
-	0x0000000,0x603510b,0x6803f0b,0x603520b,0xc7feec0,0x603500c,0x780238c,0xa60c00c,
+	0xcc00000,0x0000000,0xc00a840,0x80c0600,0x780285b,0x6c0001b,0x680001c,0x6c0001c,
+	0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,0x7802509,0xa628009,0x7800bc8,
+	0x680030a,0xaa18388,0x7c0280a,0x680018a,0x7c0280a,0xcc00000,0x60c0715,0xcc00000,
+	0x680030a,0xaa18388,0x7c0280a,0x680018a,0x7c0280a,0xcc00000,0x60c0715,0xcc00000,
+	0x0000000,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0xa224055,0x7802888,
+	0x7c028c8,0x4000817,0x4000858,0x4000899,0x40008da,0xc781400,0x60c0715,0x683ffc8,
+	0x4401208,0xaa0c008,0x78027cb,0xa6f400b,0x68000cb,0x7802908,0x95102c8,0x7802148,
+	0x97082c8,0x6031e0b,0xaa08008,0xc780b00,0x80c0700,0x7802849,0x6c00009,0x60c0209,
+	0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,
+	0x60c0209,0x6bfffca,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x78028c9,0x961024a,
+	0x60c2709,0x80c0701,0x7802849,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,
+	0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x60c0317,0x60c0318,
+	0x60c0319,0x60c031a,0x780288b,0x96102ca,0x60c270b,0xc780580,0x60c0715,0x64c270a,
+	0x921028a,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x78028c9,0x961024a,0x60c2709,
+	0x80c0701,0x64c270a,0x921028a,0x60c0317,0x60c0318,0x60c0319,0x60c031a,0x7802889,
+	0x961024a,0x60c2709,0x60c0715,0x6431e0a,0xbefc04a,0x7802a08,0x4c30208,0xc780b40,
+	0x60c2508,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0x60c0715,0x921029f,
+	0x7802148,0xa638008,0x7802849,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,
+	0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6bfffca,0x60c0317,
+	0x60c0318,0x60c0319,0x60c031a,0x7802889,0x961024a,0x60c2709,0x7802a08,0x4c30208,
+	0x60c2508,0x683ffca,0x78027cb,0xaa0c00b,0xa6f800a,0x440128a,0x68000cb,0x780290a,
+	0x95102ca,0x780214a,0x97082ca,0x6031e0b,0x7802a4c,0x7802608,0x7c02988,0x64c2308,
+	0x9304248,0xa6f8009,0x90a1248,0x9024208,0x9521209,0xaa0c00c,0x7c02608,0xc781040,
+	0xaa64248,0x60c2508,0xaa64288,0xaa58348,0xaa1c049,0xaa58388,0xa60c008,0xc7801c0,
+	0x0000000,0x80c2605,0x80c2606,0x80c2602,0x80c260f,0x80c2603,0x7802709,0xaa100c9,
+	0x680008a,0xc782940,0x7c0270a,0x78027cc,0xa6fc00c,0x0000000,0x7c02749,0xc7827c0,
+	0x7c0270a,0x80c2602,0x80c260f,0x80c2603,0x7802709,0xaa50089,0x68000ca,0x7802149,
+	0xaa0c009,0xc782540,0x7c0270a,0xaa08725,0xbef4055,0x683ffcc,0x7802789,0x64e0c0a,
+	0x901028a,0xb804289,0xaa0c00c,0xc7ffec0,0x440130c,0x6800089,0x68000ca,0x680180c,
+	0x60c210c,0x683ffcd,0xaa2c00d,0x64e110c,0x910130c,0xa6f400c,0x440134d,0x64e110c,
+	0x910130c,0xa6e400c,0x78027cc,0xa6dc00c,0x0000000,0x7c02749,0xc781e00,0x7c0270a,
+	0x6800008,0x7c02608,0x60c2508,0x6431e08,0xbefc048,0x68fdfc8,0x6fcffc8,0x64e0407,
+	0x2807207,0xc7ff140,0x60e0408,0x64c031b,0x64c031c,0x64c271f,0xa228055,0x7802888,
+	0x7c028c8,0x4000817,0x4000858,0x60c0715,0x7802a08,0x4c30208,0xc781500,0x60c2508,
+	0x7802148,0xa658008,0x80c0700,0x7802849,0x6c00009,0x60c0209,0x80c0200,0x6bfffca,
+	0x60c0320,0x60c0321,0x78028cb,0x96102ca,0x60c270b,0x80c0701,0x60c0209,0x80c0200,
+	0x60c0317,0x60c0318,0x780288b,0x96102ca,0x60c270b,0xc780480,0x60c0715,0x64c270a,
+	0x921028a,0x60c0320,0x60c0321,0x78028c9,0x961024a,0x60c2709,0x80c0701,0x64c270a,
+	0x921028a,0x60c0317,0x60c0318,0x7802889,0x961024a,0x60c2709,0x60c0715,0x7802a08,
+	0x4c30208,0x60c2508,0x78027cb,0xa6fc00b,0x68000cb,0x780290a,0x95102ca,0x780214a,
+	0x97082ca,0xc780840,0x6031e0b,0x64c031b,0x64c031c,0x64c271f,0x60c0715,0x921029f,
+	0x7802148,0xa618008,0x7802849,0x6c00009,0x60c0209,0x80c0200,0x6bfffca,0x60c0317,
+	0x60c0318,0x7802889,0x961024a,0x60c2709,0x7802a08,0x4c30208,0x60c2508,0x683ffca,
+	0x440128a,0xaa0c00a,0x78027cb,0xa6f400b,0x68000cb,0x780290a,0x95102ca,0x780214a,
+	0x97082ca,0x6031e0b,0x7802608,0x7c02988,0x64c2308,0x9304248,0xa6f8009,0x9024208,
+	0x7c02608,0xaa10288,0x60c2508,0x80c2602,0x80c260f,0x80c2603,0x4c00208,0x9808208,
+	0x60c2108,0x7802388,0xaa14008,0x6a01009,0xaa0c048,0x6a22009,0x6a40009,0x6431e0a,
+	0xbefc04a,0x6c00109,0x7800bca,0xa66838a,0xa264055,0x780298b,0xaa1c00b,0x780274b,
+	0x0800000,0x780278a,0x400128a,0x7c0278a,0x0400000,0xb61408b,0x0000000,0x80c2170,
+	0xc7807c0,0x80c260e,0x683ffcb,0x44012cb,0xaa0c00b,0x78027ca,0xa6f400a,0x780278a,
+	0x440128a,0xc006d40,0x7c0278a,0xc780500,0x8030580,0x60e0509,0x7802749,0x680180a,
+	0x9502289,0x60c210a,0x80c260e,0x6800089,0x7c023c8,0xba0c088,0x4001208,0x6800008,
+	0x7c02388,0x7802148,0x7c02288,0x7802988,0x7c029c8,0x7c027c9,0x8030580,0x7802908,
+	0xaa14725,0x4001208,0x7802189,0xa20c049,0x0000000,0x7c02908,0x683ffc9,0x64c2308,
+	0x9304208,0xaa2c008,0x0000000,0x80c3e01,0x64c3f08,0x93e1208,0xaae4008,0xb6e0049,
+	0x4401249,0x6bfffc9,0xc7f5f80,0x7c02a89,0x64c2b08,0x60c2b08,0x78022ce,0xba13fce,
+	0x6800009,0xc781140,0x7c022c9,0x6808009,0xba1070e,0x400028e,0x441c28a,0x680c009,
+	0x54032ca,0x200b28b,0x20092c9,0x740025f,0x4001249,0x921031b,0x740024c,0x4001249,
+	0x740025b,0x4001249,0x740025c,0x4001249,0x921031c,0x740024c,0x4001249,0x740025d,
+	0x4001249,0x921031d,0x740024c,0x4001249,0x740025e,0x4001249,0x921031e,0x740024c,
+	0x7800b09,0xac07949,0x780214b,0xaa38725,0x400030b,0x780218b,0xc7802c0,0x942f2cc,
+	0xa61000b,0xaa14725,0x780218b,0xa20c04b,0xa6146ca,0x40012ce,0xb60c70e,0x680000b,
+	0x680070b,0x7c022cb,0xb014949,0xaa0800b,0xa64870b,0x780230b,0xa20c04b,0x6a0800c,
+	0x6a0c00c,0x690000a,0x6c0024a,0x649ce0b,0x200a2ca,0x780234d,0x54092cd,0x200b28b,
+	0x603510b,0x6803f0b,0x603520b,0x603500c,0xc0049c0,0x0000000,0x7800bc8,0xaa64388,
+	0x7802148,0x4001208,0x7c02148,0x78021c9,0x4001249,0x7c021c9,0x7800b09,0xb82a248,
+	0x6800008,0x7c02148,0x7802189,0x4001249,0x78026ca,0xb824289,0x7c02189,0x680004a,
+	0xc001ec0,0x0000000,0xc066380,0x0000000,0x8032100,0x809ca01,0xc7f44c0,0x6802a43,
+	0x7802189,0xbe10049,0x4001209,0xc780580,0x7c02188,0x4401209,0x7c02188,0x7802148,
+	0x4001208,0x7c02148,0x78021c9,0x4001249,0x7c021c9,0x7800b09,0xb80b248,0x6800008,
+	0x7c02148,0x7802189,0x4002249,0x78026ca,0xb805289,0x7c02189,0x6800008,0xc7ff800,
+	0x7c021c8,0x64c3b08,0x920c208,0xb20ca08,0x680204b,0x7c02a4b,0x7802148,0x9508548,
+	0x780218a,0x940854a,0x7800b0a,0xb01494a,0x6808009,0xa628725,0xc780a40,0x0000000,
+	0x780218b,0xa20c04b,0x50012cb,0x4001208,0x5401208,0xc780a40,0x940120b,0x4001208,
+	0xa418288,0x78022ca,0x7802188,0xa27c048,0x400220a,0xc780380,0x6800008,0xaa7c725,
+	0x780218b,0xa2bc04b,0x40012c8,0xa4ed28b,0xc780680,0x6800008,0xaa14725,0x6800008,
+	0x7802188,0x5001208,0x4801208,0xb60c70a,0x6808009,0x680c009,0xc780400,0x0000000,
+	0xa628048,0x400220a,0x7802188,0xbe1c048,0x400220a,0xc7ffd80,0x6800048,0xaabc008,
+	0x78022ca,0x400120a,0xba10708,0xb6ace08,0x680c009,0x441c208,0x5403288,0x200a20a,
+	0x2009289,0x700024a,0x7c0288a,0x4001249,0x700024a,0x4001249,0x7000257,0x96105ca,
+	0x4001249,0x7000258,0x4001249,0x700024a,0x961060a,0x4001249,0x7000259,0x4001249,
+	0x700024a,0x961064a,0x4001249,0x700025a,0x4001249,0x700024a,0x961068a,0x6bfda8a,
+	0x603040a,0xcc00000,0x0400000,0x78027c8,0xa6fc008,0x0000000,0x64c0008,0xa2f0048,
+	0x64c3d08,0x580a208,0xbef80c8,0x6a00008,0x60c3d08,0x64c3d08,0x580a208,0xbef80c8,
+	0x0000000,0xcc00000,0x0000000,0x7800bcc,0xa60c38c,0x6800725,0x5801965,0x6bfffcc,
+	0x680001b,0x7802857,0x6800018,0x680001c,0x6800019,0x680001d,0x680001a,0x680001e,
+	0x4000817,0x4000858,0x4000899,0x40008da,0x680800b,0x680070f,0x74002cc,0x40012cb,
+	0x74002db,0x40012cb,0x74002d7,0x40012cb,0x74002d8,0x40012cb,0x74002dc,0x40012cb,
+	0x74002d9,0x40012cb,0x74002dd,0x40012cb,0x74002da,0x40012cb,0x74002de,0xd07fbcf,
+	0x40012cb,0x7c0288c,0x7c028cc,0x961030c,0x80c0700,0x60c270c,0x96105db,0x60c0217,
+	0x961061c,0x780250f,0xaa1800f,0x60c0218,0x961065d,0x60c0219,0x961069e,0x60c021a,
+	0x80c0701,0x60c270c,0x60c0217,0xaa1000f,0x60c0218,0x60c0219,0x60c021a,0x7800b0f,
+	0xb00a94f,0x6900008,0x6c00248,0x649ce09,0x2008248,0x6035108,0x6803f08,0x6035208,
+	0x6a08008,0x6035008,0x7802148,0xa60c008,0x6803fc8,0x7c022c8,0x6800008,0x7c02908,
+	0xac0b94f,0x78022c8,0xb613fc8,0xba0c708,0x441c208,0x7c022c8,0x6435008,0x580f208,
+	0xbef8048,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x6435308,
+	0x900c208,0xa6f8008,0x0000000,0x6900008,0x6c00248,0x649ce09,0x2008248,0x6035108,
+	0x6803f08,0x6035208,0x6b0c008,0x6035008,0x5401225,0xac0520f,0x6800088,0x7c02308,
+	0xc7ff840,0x7c02348,0x6910009,0x6c00249,0x649ce0a,0x2009289,0x54012a5,0x200a94a,
+	0x680008b,0x7c0230b,0x68000cb,0x6435008,0x580f208,0xbef8048,0x6803f08,0x6035109,
+	0x6035208,0x6a08008,0x6035008,0xac0328f,0xc7ff340,0x7c0234b,0x6808008,0x2009209,
+	0x200a94a,0xc7ffc80,0x40012cb,0x400134d,0x480f34d,0x7c0234d,0x980c38c,0x780230d,
+	0x54092cd,0x690000a,0x6c0024a,0x200b28b,0x649ce0a,0x200b28b,0x400134d,0x480f34d,
+	0x7c0230d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,
+	0x0000000,0x603510b,0x6803f0b,0x603520b,0xc7fec80,0x603500c,0x780238c,0xa60c00c,
 	0x440120c,0x6800088,0xaa14008,0x6a01009,0xaa0c048,0x6a22009,0x6a40009,0x6c00109,
 	0x60e0509,0x7c023c8,0x7802749,0x680180a,0x9502289,0x60c210a,0x80c260e,0x680004a,
 	0x7c0294a,0x7802149,0x7c02289,0x7802989,0x7c029c9,0x6800089,0xcc00000,0x7c027c9,
-	0xcc00000,0x0400000,0x64e1226,0x91e19a6,0xbef0066,0x78027e6,0xaa4c0a6,0xc782ac0,
-	0x6800027,0x6c04027,0x7802969,0x97c19e9,0x60e1227,0x78021a7,0x6a00016,0xa210067,
-	0x6c00256,0x6a80016,0x6c00256,0x649ce26,0x2016996,0x6800026,0x7c02766,0xc782400,
-	0x6800126,0x7802767,0xaa080a7,0xc781340,0x78025a8,0xaeac0a8,0x7802969,0xaa54725,
-	0x78022a6,0x54069a6,0x78021a8,0x5801a28,0x6a00027,0xbe10068,0x6c00267,0x6a80027,
-	0x6c00267,0x649ce28,0x2027a27,0x20269e6,0x44409a6,0x60e1326,0xaa4c029,0x40c05a6,
-	0x6805c28,0x60c2128,0xc7803c0,0x4040596,0x54059a6,0x78021a8,0x6a00027,0xbe10068,
-	0x6c00267,0x6a80027,0x6c00267,0x649ce28,0x2027a27,0x20269e6,0x44209a6,0x60e1326,
-	0x40605a6,0x78023e8,0xaa14028,0x6a2c227,0xaa0c068,0x6a2c027,0x6a2c127,0xaa10029,
-	0x6c04027,0x68003e6,0x95069e6,0x97c19e9,0x60e1227,0x6800026,0x7c02766,0x6800126,
-	0xc781b80,0x7c027e6,0x7802427,0x7802828,0x2427a27,0x2427a27,0x7802969,0xaa0c029,
-	0x2427a27,0x2427a27,0x7802666,0x78026a7,0x96109a7,0x54099a6,0x20269e6,0x54039e6,
-	0x60e1327,0x78023e8,0xaa34028,0x6a44227,0xaa2c068,0x6a44027,0xc780240,0x6a44127,
-	0xa64c0e7,0x78027a6,0x64e0c28,0x9010a28,0xb8e6a26,0xcc00000,0x0400000,0xaa10029,
-	0x6c0c027,0x68005e6,0x95069e6,0x97c19e9,0x60e1227,0x6800016,0x6800026,0x7c02766,
-	0x6800166,0xc781140,0x7c027e6,0x78025e7,0xaa1c027,0x44019e7,0x7c025e7,0x78025a7,
-	0x44019e7,0xc780dc0,0x7c025a7,0x7802467,0x7c024a7,0x7802666,0x78026a8,0x96109a8,
+	0xcc00000,0x0400000,0x64e1226,0x91e19a6,0xbef0066,0x7802827,0x649d926,0x900c9a6,
+	0xacfe9e6,0x78027e6,0xaa4c0a6,0xc7829c0,0x6800027,0x6c04027,0x7802969,0x97c19e9,
+	0x60e1227,0x78021a7,0x6a00016,0xa210067,0x6c00256,0x6a80016,0x6c00256,0x649ce26,
+	0x2016996,0x6800026,0x7c02766,0xc782300,0x6800126,0x7802767,0xaa080a7,0xc7812c0,
+	0x78025a8,0xaeac0a8,0x7802969,0xaa54725,0x78022a6,0x54069a6,0x78021a8,0x5801a28,
+	0x6a00027,0xbe10068,0x6c00267,0x6a80027,0x6c00267,0x649ce28,0x2027a27,0x20269e6,
+	0x44409a6,0x60e1326,0xaa4c029,0x40c05a6,0x6805c28,0x60c2128,0xc7803c0,0x4040596,
+	0x54059a6,0x78021a8,0x6a00027,0xbe10068,0x6c00267,0x6a80027,0x6c00267,0x649ce28,
+	0x2027a27,0x20269e6,0x44209a6,0x60e1326,0x40605a6,0x78023e8,0xaa14028,0x6a2c227,
+	0xaa0c068,0x6a2c027,0x6a2c127,0xaa10029,0x6c04027,0x68003e6,0x95069e6,0x97c19e9,
+	0x60e1227,0x6800026,0x7c02766,0x6800126,0xc781a80,0x7c027e6,0x7802427,0x7802828,
+	0x2427a27,0x2427a27,0x7802969,0xaa0c029,0x2427a27,0x2427a27,0x7802666,0x54099a6,
+	0x20269e6,0x54039e6,0x60e1327,0x78023e8,0xaa34028,0x6a44227,0xaa2c068,0x6a44027,
+	0xc780240,0x6a44127,0xa64c0e7,0x78027a6,0x64e0c28,0x9010a28,0xb8e8a26,0xcc00000,
+	0x0400000,0xaa10029,0x6c0c027,0x68005e6,0x95069e6,0x97c19e9,0x60e1227,0x6800016,
+	0x6800026,0x7c02766,0x6800166,0xc7810c0,0x7c027e6,0x78025e7,0xaa1c027,0x44019e7,
+	0x7c025e7,0x78025a7,0x44019e7,0xc780d40,0x7c025a7,0x7802467,0x7c024a7,0x7802666,
 	0x54099a6,0x20269e6,0x7802828,0x2027a27,0x7c02467,0x54039e6,0x60e1327,0x78023e8,
 	0xaa14028,0x6a16227,0xaa0c068,0x6a16027,0x6a16127,0x78029e8,0xaa28028,0x78027a6,
 	0x64e0c28,0x9010a28,0xb804a26,0x78024a8,0xc7fd900,0x7c02468,0x40019a6,0x7c027a6,
 	0x7c024e7,0x6c00027,0x60e1227,0x6800066,0xc780680,0x7c027e6,0xba58126,0x7802967,
-	0xa608027,0xc7ff480,0x78027a7,0x40019e7,0x7c027a7,0xaa0c126,0x6800027,0x80c2170,
+	0xa608027,0xc7ff500,0x78027a7,0x40019e7,0x7c027a7,0xaa0c126,0x6800027,0x80c2170,
 	0xc780300,0x7c02967,0xa6d0066,0x78025a7,0xaa30027,0x44019e7,0xb228067,0x7c025a7,
 	0x7802726,0xaa0c0e6,0x0000000,0x80c2170,0x6800026,0x7c027e6,0xcc00000,0x0400000,
 	0xc7805c0,0x0000000,0x6a80016,0xaa10026,0x6c00256,0x6a00016,0x6c00256,0x649ce28,
-	0xc780b00,0x2016a16,0xaa0c725,0x90a8996,0x90c7996,0x7800b28,0xb826a26,0xa8f3a26,
-	0x91a1996,0x6a80016,0xaa24026,0x6c00256,0x6a00016,0xc780180,0x6c00256,0xaa74016,
-	0x7802427,0xc7ffc40,0x0000000,0x649ce28,0x2016a16,0x7802666,0x78026a8,0x96109a8,
-	0x54099a6,0x7802828,0x2427a27,0x20269e6,0x54039e6,0x60e1327,0x78024e6,0x90049e6,
-	0xaa14027,0x6a14226,0xaa0c127,0x6a14026,0x6a14126,0x6c08026,0x60e0d16,0xaa0c725,
-	0x4020596,0x4020596,0xc7ff300,0x60e1226,0x7802666,0x78026a8,0x96109a8,0x54099a6,
-	0x20269e6,0x7802828,0x2027a27,0x7c02427,0x54039e6,0x60e1327,0x78024e6,0xa618016,
-	0x9c261e6,0x60e1226,0x68000e6,0xc7feec0,0x7c027e6,0x6c08026,0x60e0d16,0xaae8725,
-	0x4020596,0xc7ffe00,0x4020596,0x64e120a,0x91e128a,0xbef804a,0x64e000a,0x64e030b,
-	0x64e0e0c,0x64e0c0d,0x680100e,0x63f000e,0x83f0000,0x680020e,0xd00000e,0x0000000,
-	0x60e000a,0x60e030b,0x60e0e0c,0xcc00000,0x60e0c0d,0xc0007c0,0x0000000,0x681010a,
-	0x6c3474a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
-	0x6090b0a,0x6a0000a,0x6c0024a,0x649ce0b,0x200a2ca,0x609440a,0x6a8000a,0x6c0024a,
-	0x649ce0b,0x200a2ca,0x609450a,0xcc00000,0x0000000,0xc000580,0x0000000,0x8095003,
-	0x8095000,0x6820889,0xcc00000,0x6095109,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,
-	0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
-	0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x6495309,0xa210049,0xaa0c00a,0xc7fff40,
-	0x440128a,0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0xc780a80,0x2016a16,0xaa0c725,0x90a8996,0x90c7996,0x7800b28,0xb824a26,0xa8f3a26,
+	0x91a1996,0x6a80016,0xaa24026,0x6c00256,0x6a00016,0xc780180,0x6c00256,0xaa6c016,
+	0x7802427,0xc7ffc40,0x0000000,0x649ce28,0x2016a16,0x7802666,0x54099a6,0x7802828,
+	0x2427a27,0x20269e6,0x54039e6,0x60e1327,0x78024e6,0x90049e6,0xaa14027,0x6a14226,
+	0xaa0c127,0x6a14026,0x6a14126,0x6c08026,0x60e0d16,0xaa0c725,0x4020596,0x4020596,
+	0xc7ff380,0x60e1226,0x7802666,0x54099a6,0x20269e6,0x7802828,0x2027a27,0x7c02427,
+	0x54039e6,0x60e1327,0x78024e6,0xa618016,0x9c261e6,0x60e1226,0x68000e6,0xc7fefc0,
+	0x7c027e6,0x6c08026,0x60e0d16,0xaae8725,0x4020596,0xc7ffe00,0x4020596,0x64e120a,
+	0x91e128a,0xbef804a,0x64e000a,0x64e030b,0x64e0e0c,0x64e0c0d,0x680100e,0x63f000e,
+	0x83f0000,0x680020e,0xd00000e,0x0000000,0x60e000a,0x60e030b,0x60e0e0c,0xcc00000,
+	0x60e0c0d,0xc000b00,0x0000000,0x681010a,0x6c3474a,0x609070a,0x6490b0a,0x980a00a,
+	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x6a0000a,0x6c0024a,0x649ce0b,
+	0x200a2ca,0x609440a,0x6a8000a,0x6c0024a,0x649ce0b,0x200a2ca,0x609450a,0xcc00000,
+	0x0000000,0xc0008c0,0x0000000,0x8095007,0x8095000,0x6800049,0x7800b0b,0x68002ca,
+	0xb00328b,0x0000000,0x6800009,0x6498e0b,0x97c12c9,0x6098e0b,0x6497f09,0x68000cb,
+	0x970224b,0x6097f09,0x6820889,0xcc00000,0x6095109,0x683ffc9,0x649090a,0xa21004a,
+	0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,
+	0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x6495309,0xa210049,0xaa0c00a,
+	0xc7fff40,0x440128a,0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
diff --git a/drivers/amlogic/amports/vh264mvc.c b/drivers/amlogic/amports/vh264mvc.c
index affe61465e46..47e1a4fcd351 100755
--- a/drivers/amlogic/amports/vh264mvc.c
+++ b/drivers/amlogic/amports/vh264mvc.c
@@ -23,21 +23,29 @@
 #include <linux/interrupt.h>
 #include <linux/timer.h>
 #include <linux/platform_device.h>
+#include <mach/am_regs.h>
 #include <linux/amlogic/amports/amstream.h>
 #include <linux/amlogic/amports/ptsserv.h>
 #include <linux/amlogic/amports/canvas.h>
 #include <linux/amlogic/amports/vframe.h>
 #include <linux/amlogic/amports/vframe_provider.h>
 #include <linux/amlogic/amports/vframe_receiver.h>
+#include <linux/amlogic/amports/vformat.h>
 #include <linux/workqueue.h>
 #include <linux/dma-mapping.h>
 #include <asm/atomic.h>
+#include <plat/io.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include "amports_priv.h"
 
-#include <mach/am_regs.h>
+#include "vdec.h"
 #include "vdec_reg.h"
 
 #include "amvdec.h"
 #include "vh264mvc_mc.h"
+#define TIME_TASK_PRINT_ENABLE  0x100
+#define PUT_PRINT_ENABLE	0x200
 
 #define DRIVER_NAME "amvdec_h264mvc"
 #define MODULE_NAME "amvdec_h264mvc"
@@ -57,7 +65,10 @@
 #define STAT_VDEC_RUN       0x20
 
 #define DROPPING_THREAD_HOLD    4
-#define DROPPING_FIRST_WAIT     6
+#define DROPPING_FIRST_WAIT     16
+#define DISPLAY_INVALID_POS    -65536
+
+#define INIT_DROP_FRAME_CNT    8
 
 static int  vh264mvc_vf_states(vframe_states_t *states, void*);
 static vframe_t *vh264mvc_vf_peek(void*);
@@ -90,6 +101,7 @@ static u32 sync_outside = 0;
 static u32 vh264mvc_ratio;
 static u32 h264mvc_ar;
 static u32 no_dropping_cnt;
+static s32 init_drop_cnt;
 
 #ifdef DEBUG_SKIP
 static unsigned long view_total, view_dropped;
@@ -107,10 +119,7 @@ extern u32 trickmode_i;
 
 static DEFINE_SPINLOCK(lock);
 
-#define MODE_ERROR 0
-#define MODE_FULL  1
-
-static int vh264mvc_stop(int mode);
+static int vh264mvc_stop(void);
 static s32 vh264mvc_init(void);
 
 /***************************
@@ -152,6 +161,7 @@ static s32 vh264mvc_init(void);
 #define CMD_ALLOC_VIEW_0           1
 #define CMD_ALLOC_VIEW_1           2
 #define CMD_FRAME_DISPLAY          3
+#define CMD_FATAL_ERROR            4 
 
 #define CANVAS_INDEX_START         AMVDEC_H264MVC_CANVAS_INDEX
 
@@ -203,6 +213,7 @@ static int dbg_mode = 0;
 static int dbg_cmd = 0;
 static int view_mode = 3; /* 0, left; 1 ,right ; 2, left<->right 3, right<->left */
 static int drop_rate = 2;
+static int drop_thread_hold = 0;
 /**/
 
 #define MVC_BUF_NUM     (DECODE_BUFFER_NUM_MAX+DISPLAY_BUFFER_NUM)
@@ -243,7 +254,10 @@ static void uninit_vf_buf(void)
 typedef struct {
 	int view0_buf_id;
 	int view1_buf_id;
+    int view0_drop;
+    int view1_drop;	
 	int display_pos;
+	int used;
 	int slot;
 	unsigned stream_offset;
 } mvc_info_t;
@@ -255,6 +269,10 @@ static s32 view0_vfbuf_use[DECODE_BUFFER_NUM_MAX];
 static s32 view1_vfbuf_use[DECODE_BUFFER_NUM_MAX];
 
 static s32 fill_ptr, get_ptr, putting_ptr, put_ptr;
+static s32 dirty_frame_num = 0; 
+static s32 enable_recycle = 0 ;
+
+static s32 init_drop_frame_id[INIT_DROP_FRAME_CNT];
 #define INCPTR(p) ptr_atomic_wrap_inc(&p)
 static inline void ptr_atomic_wrap_inc(u32 *ptr)
 {
@@ -315,6 +333,43 @@ static int  vh264mvc_vf_states(vframe_states_t *states, void* op_arg)
     return 0;
 }
 
+void send_drop_cmd(void)
+{
+	int ready_cnt = 0;
+    int temp_get_ptr = get_ptr;
+    int temp_fill_ptr = fill_ptr;
+	while(temp_get_ptr != temp_fill_ptr){
+		if((vfpool_idx[temp_get_ptr].view0_buf_id >= 0)&&(vfpool_idx[temp_get_ptr].view1_buf_id >= 0)
+		&&(vfpool_idx[temp_get_ptr].view0_drop == 0)&&(vfpool_idx[temp_get_ptr].view1_drop == 0)){
+			ready_cnt++;
+		}
+		INCPTR(temp_get_ptr);
+	}
+	if(dbg_mode&0x40){
+		printk("ready_cnt is %d ; no_dropping_cnt is %d \n", ready_cnt,no_dropping_cnt);
+	}
+    if((no_dropping_cnt >= DROPPING_FIRST_WAIT) && (ready_cnt < drop_thread_hold)) {
+        WRITE_VREG(DROP_CONTROL, (1 << 31) | (drop_rate));
+    } else {
+        WRITE_VREG(DROP_CONTROL, 0);
+    }   	
+}
+#if 0
+int get_valid_frame(void)
+{
+	int ready_cnt = 0;
+    int temp_get_ptr = get_ptr;
+    int temp_fill_ptr = fill_ptr;
+	while(temp_get_ptr != temp_fill_ptr){
+		if((vfpool_idx[temp_get_ptr].view0_buf_id >= 0)&&(vfpool_idx[temp_get_ptr].view1_buf_id >= 0)
+		&&(vfpool_idx[temp_get_ptr].view0_drop == 0)&&(vfpool_idx[temp_get_ptr].view1_drop == 0)){
+			ready_cnt++;
+		}
+		INCPTR(temp_get_ptr);
+	}
+	return ready_cnt;	
+}
+#endif
 static vframe_t *vh264mvc_vf_peek(void* op_arg)
 {
 
@@ -322,9 +377,7 @@ static vframe_t *vh264mvc_vf_peek(void* op_arg)
      if (get_ptr == fill_ptr) {
         return NULL;
     }
-	if((vfpool_idx[get_ptr].view0_buf_id < 0)||(vfpool_idx[get_ptr].view1_buf_id < 0)){
-		return NULL;
-	}
+    send_drop_cmd();
     return &vfpool[get_ptr];
 
 }
@@ -342,6 +395,8 @@ static vframe_t *vh264mvc_vf_get(void* op_arg)
     view0_buf_id = vfpool_idx[get_ptr].view0_buf_id;
     view1_buf_id = vfpool_idx[get_ptr].view1_buf_id;
     vf = &vfpool[get_ptr];
+    
+    if((view0_buf_id >=0 )&&(view1_buf_id >= 0)){
     if(view_mode==0 || view_mode==1){
         vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
         vf->canvas0Addr = vf->canvas1Addr = (view_mode==0)?spec2canvas(&buffer_spec0[view0_buf_id]):
@@ -370,6 +425,13 @@ static vframe_t *vh264mvc_vf_get(void* op_arg)
             vf->canvas1Addr = spec2canvas(&buffer_spec1[view1_buf_id]);
         }
     }
+	}
+    
+    if (((vfpool_idx[get_ptr].view0_drop != 0)||(vfpool_idx[get_ptr].view1_drop != 0))&&((no_dropping_cnt >= DROPPING_FIRST_WAIT))){
+    	vf->frame_dirty	= 1;
+    }else{
+        vf->frame_dirty = 0;
+    }
 
     INCPTR(get_ptr);
 
@@ -383,8 +445,9 @@ static vframe_t *vh264mvc_vf_get(void* op_arg)
 
         vf->width = frame_width;
         vf->height = frame_height;
-        vf->flag = 0;
     }
+    if ((no_dropping_cnt < DROPPING_FIRST_WAIT)&&(vf->frame_dirty ==0))
+        no_dropping_cnt++;    
     return vf;
 
 }
@@ -395,7 +458,26 @@ static void vh264mvc_vf_put(vframe_t *vf, void* op_arg)
     if(vf_buf_init_flag == 0){
         return;
     }
+    if(vf->frame_dirty){
+
+    	vf->frame_dirty = 0;	    
+    	dirty_frame_num++;	
+    	enable_recycle = 0;
+    	if(dbg_mode &PUT_PRINT_ENABLE){
+    		printk("invalid: dirty_frame_num is !!! %d\n",dirty_frame_num);	
+    	}    	
+    }else{
 	INCPTR(putting_ptr);
+		while(dirty_frame_num >0){
+			INCPTR(putting_ptr);
+			dirty_frame_num--;	
+		}
+		enable_recycle = 1;
+    	if(dbg_mode &PUT_PRINT_ENABLE){
+    		printk("valid: dirty_frame_num is @@@ %d \n",dirty_frame_num);	
+    	}  		
+    	//send_drop_cmd();		
+	}
 
 }
 
@@ -420,7 +502,7 @@ static int vh264mvc_event_cb(int type, void *data, void *private_data)
 }
 
 /**/
-long init_canvas( int start_addr, long dpb_size, int dpb_number, int mb_width, int mb_height, buffer_spec_t* buffer_spec) {
+static long init_canvas( int start_addr, long dpb_size, int dpb_number, int mb_width, int mb_height, buffer_spec_t* buffer_spec) {
 
   int dpb_addr, addr;
   int i;
@@ -555,7 +637,7 @@ int check_in_list(int pos , int* slot)
 	int i;
 	int ret = 0 ;
 	for(i = 0 ; i < VF_POOL_SIZE ; i++){
-		if(vfpool_idx[i].display_pos == pos){
+		if((vfpool_idx[i].display_pos == pos)&&(vfpool_idx[i].used == 0)){
 			ret =1;
 			*slot = vfpool_idx[i].slot ;
 			break;
@@ -572,6 +654,8 @@ static void vh264mvc_isr(void)
 {
         int drop_status;
         vframe_t *vf;
+        unsigned int pts, pts_valid = 0;
+	    u64 pts_us64;
         int ret = READ_VREG(MAILBOX_COMMAND);
         //printk("vh264mvc_isr, cmd =%x\n", ret);
         switch(ret & 0xff) {
@@ -764,39 +848,75 @@ static void vh264mvc_isr(void)
 				int slot =0 ;
 				in_list_flag  =  check_in_list(display_POC ,&slot);
 
+				if((dbg_mode&0x40)&&(drop_status)){
+					printk("drop_status:%dview_id=%d,buff_id=%d,offset=%d, display_POC = %d,fill_ptr=0x%x\n", drop_status, display_view_id, display_buff_id, stream_offset, display_POC, fill_ptr);
+				}	
+				
+				if((in_list_flag)&&(stream_offset !=0)){
+					printk("error case ,display_POC is %d, slot is %d \n",display_POC ,slot);
+					in_list_flag =0;	
+				}
 				if(!in_list_flag){
 					if(display_view_id ==0){
 						vfpool_idx[fill_ptr].view0_buf_id = display_buff_id;
 						view0_vfbuf_use[display_buff_id]++;
 						vfpool_idx[fill_ptr].stream_offset = stream_offset ;
-
+                        vfpool_idx[fill_ptr].view0_drop = drop_status;
 					}
 					if(display_view_id == 1){
 						vfpool_idx[fill_ptr].view1_buf_id = display_buff_id;
+						vfpool_idx[fill_ptr].view1_drop = drop_status;
 						view1_vfbuf_use[display_buff_id]++;
 					}
 					vfpool_idx[fill_ptr].slot = fill_ptr;
 					vfpool_idx[fill_ptr].display_pos = display_POC;
-					INCPTR(fill_ptr);
+					
 				}else{
 					if(display_view_id ==0){
 						vfpool_idx[slot].view0_buf_id = display_buff_id;
 						view0_vfbuf_use[display_buff_id]++;
 						vfpool_idx[slot].stream_offset = stream_offset ;
+						vfpool_idx[slot].view0_drop = drop_status;
+						
 					}
 					if(display_view_id == 1){
 						vfpool_idx[slot].view1_buf_id = display_buff_id;
 						view1_vfbuf_use[display_buff_id]++;
+						vfpool_idx[slot].view1_drop = drop_status;
 					}
 					vf = &vfpool[slot];
+#if 0					
 					if (pts_lookup_offset(PTS_TYPE_VIDEO, vfpool_idx[slot].stream_offset, &vf->pts, 0) != 0) {
                     	vf->pts = 0;
                     }
+#endif                
+					if(vfpool_idx[slot].stream_offset == 0){
+						printk("error case , invalid stream offset \n");
+					}
+					if (pts_lookup_offset_us64(PTS_TYPE_VIDEO, vfpool_idx[slot].stream_offset, &pts, 0x10000,&pts_us64) == 0){
+						pts_valid = 1;
+					} else {
+						pts_valid = 0;
+					}                    
+					vf->pts = (pts_valid) ? pts : 0;
+					vf->pts_us64= (pts_valid) ? pts_us64 : 0;  
+					//vf->pts =  vf->pts_us64 ? vf->pts_us64 : vf->pts ;  
+					//vf->pts =  vf->pts_us64;               
+					if(dbg_mode&0x80){
+						printk("vf->pts:%d\n", vf->pts);
+					}
+					vfpool_idx[slot].used = 1;
+					INCPTR(fill_ptr);	
                     set_frame_info(vf);
                     vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
+                    
 				}
             }
             break;
+            case CMD_FATAL_ERROR:
+            printk("fatal error !!!\n");
+            schedule_work(&error_wd_work);
+            break;
           default : break;
         }
 exit:
@@ -813,22 +933,43 @@ static void vh264mvc_put_timer_func(unsigned long arg)
 {
     struct timer_list *timer = (struct timer_list *)arg;
 
+    int valid_frame = 0;
+    if(enable_recycle == 0){
+    	if(dbg_mode&TIME_TASK_PRINT_ENABLE){
+    		//valid_frame = get_valid_frame();
+    		printk("dirty_frame_num is %d , valid frame is %d\n",dirty_frame_num,valid_frame);
+    		
+    	}
+    	//goto RESTART;	    	
+    }
+
+
     while ((putting_ptr != put_ptr) && (READ_VREG(BUFFER_RECYCLE) == 0)) {
     	int view0_buf_id = vfpool_idx[put_ptr].view0_buf_id;
     	int view1_buf_id = vfpool_idx[put_ptr].view1_buf_id;
-		if(view0_vfbuf_use[view0_buf_id] == 1){
+		if((view0_buf_id >= 0)&&(view0_vfbuf_use[view0_buf_id] == 1)){
+                    if(dbg_mode&0x100){
+                        printk("round 0: put_ptr is %d ; view0_buf_id is %d==\n", put_ptr, view0_buf_id);
+                    }	
 			WRITE_VREG(BUFFER_RECYCLE, (0<<8)|( view0_buf_id +1));
 			view0_vfbuf_use[view0_buf_id] = 0;
 			vfpool_idx[put_ptr].view0_buf_id = -1;
-		}else if(view1_vfbuf_use[view1_buf_id] == 1){
+                    vfpool_idx[put_ptr].view0_drop = 0;
+		}else if((view1_buf_id >= 0)&&(view1_vfbuf_use[view1_buf_id] == 1)){
+                    if(dbg_mode&0x100){
+                        printk("round 1: put_ptr is %d ; view1_buf_id %d==\n", put_ptr , view1_buf_id);
+                    }	
 			 WRITE_VREG(BUFFER_RECYCLE, (1<<8)|( view1_buf_id +1));
 			 view1_vfbuf_use[view1_buf_id] = 0;
-			 vfpool_idx[put_ptr].display_pos = -1;
+                    vfpool_idx[put_ptr].display_pos = DISPLAY_INVALID_POS;
 			 vfpool_idx[put_ptr].view1_buf_id = -1;
+                    vfpool_idx[put_ptr].view1_drop = 0;
+                    vfpool_idx[put_ptr].used = 0;
 			 INCPTR(put_ptr);
 		}
     }
 
+//RESTART:
     timer->expires = jiffies + PUT_INTERVAL;
 
     add_timer(timer);
@@ -988,6 +1129,9 @@ static void vh264mvc_prot_init(void)
     WRITE_VREG(BUFFER_RECYCLE, 0);
     WRITE_VREG(DROP_CONTROL, 0);
     CLEAR_VREG_MASK(MDEC_PIC_DC_CTRL, 1<<17);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+    WRITE_VREG(MDEC_PIC_DC_THRESH, 0x404038aa);
+#endif
 }
 
 static void vh264mvc_local_init(void)
@@ -997,6 +1141,11 @@ static void vh264mvc_local_init(void)
     display_view_id = -1;
     display_POC = -1;
     no_dropping_cnt = 0;
+    init_drop_cnt = INIT_DROP_FRAME_CNT;
+
+    for (i=0;i<INIT_DROP_FRAME_CNT;i++) {
+        init_drop_frame_id[i] = 0;
+    }
 
 #ifdef DEBUG_PTS
     pts_missed = 0;
@@ -1027,6 +1176,7 @@ static void vh264mvc_local_init(void)
     max_dec_frame_buffering[0] = -1;
     max_dec_frame_buffering[1] = -1;
 	fill_ptr = get_ptr = put_ptr = putting_ptr = 0;
+	dirty_frame_num = 0;
 	for (i = 0; i < DECODE_BUFFER_NUM_MAX; i++) {
         view0_vfbuf_use[i] = 0;
         view1_vfbuf_use[i] = 0;
@@ -1034,8 +1184,14 @@ static void vh264mvc_local_init(void)
 
     for(i=0 ;i < VF_POOL_SIZE ; i++){
     	vfpool_idx[i].display_pos = -1;
-    	vfpool_idx[i].view0_buf_id = -1;
+    	vfpool_idx[i].view0_buf_id = DISPLAY_INVALID_POS;
     	vfpool_idx[i].view1_buf_id = -1;
+    	vfpool_idx[i].view0_drop = 0;
+    	vfpool_idx[i].view1_drop = 0;    	
+    	vfpool_idx[i].used = 0;
+	}
+	for(i=0 ;i < VF_POOL_SIZE ; i++){
+		memset(&vfpool[i],0, sizeof(struct vframe_s)) ;	
 	}
     init_vf_buf();
     return;
@@ -1095,8 +1251,6 @@ static s32 vh264mvc_init(void)
     vf_reg_provider(&vh264mvc_vf_prov);
     vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_START,NULL);
 
-    vf_notify_receiver(PROVIDER_NAME, VFRAME_EVENT_PROVIDER_FR_HINT, (void *)vh264mvc_amstream_dec_info.rate);
-
     stat |= STAT_VF_HOOK;
 
     recycle_timer.data = (ulong) & recycle_timer;
@@ -1117,7 +1271,7 @@ static s32 vh264mvc_init(void)
     return 0;
 }
 
-static int vh264mvc_stop(int mode)
+static int vh264mvc_stop(void)
 {
     if (stat & STAT_VDEC_RUN) {
         amvdec_stop();
@@ -1140,11 +1294,6 @@ static int vh264mvc_stop(int mode)
 
     if (stat & STAT_VF_HOOK) {
         ulong flags;
-
-        if (mode == MODE_FULL) {
-            vf_notify_receiver(PROVIDER_NAME, VFRAME_EVENT_PROVIDER_FR_END_HINT, NULL);
-        }
-
         spin_lock_irqsave(&lock, flags);
         spin_unlock_irqrestore(&lock, flags);
         vf_unreg_provider(&vh264mvc_vf_prov);
@@ -1160,34 +1309,33 @@ static int vh264mvc_stop(int mode)
 static void error_do_work(struct work_struct *work)
 {
     if (atomic_read(&vh264mvc_active)) {
-        vh264mvc_stop(MODE_ERROR);
+        vh264mvc_stop();
         vh264mvc_init();
     }
 }
 
 static int amvdec_h264mvc_probe(struct platform_device *pdev)
 {
-    struct vdec_dev_reg_s *pdata = (struct vdec_dev_reg_s *)pdev->dev.platform_data;
+    struct resource *mem;
     int buf_size;
 
     printk("amvdec_h264mvc probe start.\n");
 
-    if (pdata == NULL) {
+    if (!(mem = platform_get_resource(pdev, IORESOURCE_MEM, 0))) {
         printk("\namvdec_h264mvc memory resource undefined.\n");
         return -EFAULT;
     }
 
-    buf_size = pdata->mem_end - pdata->mem_start + 1;
-    work_space_adr = pdata->mem_start;
+    buf_size = mem->end - mem->start + 1;
+    //buf_offset = mem->start - DEF_BUF_START_ADDR;
+    work_space_adr = mem->start;
     DECODE_BUFFER_START = work_space_adr + work_space_size;
-    DECODE_BUFFER_END = pdata->mem_start + buf_size;
-
-    if (pdata->sys_info) {
-        vh264mvc_amstream_dec_info = *pdata->sys_info;
-    }
+    DECODE_BUFFER_END = mem->start + buf_size;
 
     printk("work_space_adr %x, DECODE_BUFFER_START %x, DECODE_BUFFER_END %x\n", work_space_adr, DECODE_BUFFER_START, DECODE_BUFFER_END);
+    memcpy(&vh264mvc_amstream_dec_info, (void *)mem[1].start, sizeof(vh264mvc_amstream_dec_info));
 
+	vdec_power_mode(1);
     if (vh264mvc_init() < 0) {
         printk("\namvdec_h264mvc init failed.\n");
 
@@ -1206,7 +1354,8 @@ static int amvdec_h264mvc_probe(struct platform_device *pdev)
 static int amvdec_h264mvc_remove(struct platform_device *pdev)
 {
     printk("amvdec_h264mvc_remove\n");
-    vh264mvc_stop(MODE_FULL);
+    cancel_work_sync(&error_wd_work);
+    vh264mvc_stop();
 
     atomic_set(&vh264mvc_active, 0);
 
@@ -1278,6 +1427,8 @@ MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264mvc cmd mode \n");
 module_param(drop_rate, uint, 0664);
 MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264mvc drop rate \n");
 
+module_param(drop_thread_hold, uint, 0664);
+MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264mvc drop thread hold \n");
 module_init(amvdec_h264mvc_driver_init_module);
 module_exit(amvdec_h264mvc_driver_remove_module);
 
diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 228bad1baebd..72b0b451d8ff 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -146,6 +146,8 @@ static u32 next_peek_underflow;
 
 static DEFINE_SPINLOCK(video_onoff_lock);
 static int video_onoff_state = VIDEO_ENABLE_STATE_IDLE;
+static DEFINE_SPINLOCK(video2_onoff_lock);
+static int video2_onoff_state = VIDEO_ENABLE_STATE_IDLE;
 
 #ifdef FIQ_VSYNC
 #define BRIDGE_IRQ INT_TIMER_C
@@ -236,6 +238,25 @@ static int video_onoff_state = VIDEO_ENABLE_STATE_IDLE;
         video_onoff_state = VIDEO_ENABLE_STATE_OFF_REQ; \
         spin_unlock_irqrestore(&video_onoff_lock, flags); \
     } while (0)
+    
+#define VIDEO_LAYER2_ON() \
+    do { \
+        unsigned long flags; \
+        spin_lock_irqsave(&video2_onoff_lock, flags); \
+        video2_onoff_state = VIDEO_ENABLE_STATE_ON_REQ; \
+        spin_unlock_irqrestore(&video2_onoff_lock, flags); \
+    } while (0)
+
+#define VIDEO_LAYER2_OFF() \
+    do { \
+        unsigned long flags; \
+        spin_lock_irqsave(&video2_onoff_lock, flags); \
+        video2_onoff_state = VIDEO_ENABLE_STATE_OFF_REQ; \
+        spin_unlock_irqrestore(&video2_onoff_lock, flags); \
+    } while (0)    
+    
+    
+    
 #if HAS_VPU_PROT
 #define EnableVideoLayer()  \
     do { \
@@ -268,8 +289,7 @@ static int video_onoff_state = VIDEO_ENABLE_STATE_IDLE;
 #define EnableVideoLayer2()  \
     do { \
          VD2_MEM_POWER_ON(); \
-         SET_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, \
-           VPP_VD2_PREBLEND | (0x1ff << VPP_VD2_ALPHA_BIT)); \
+        VIDEO_LAYER2_ON(); \
     } while (0)
 #endif
 #define VSYNC_EnableVideoLayer2()  \
@@ -1342,8 +1362,8 @@ static void vpp_settings_h(vpp_frame_par_t *framePtr)
                    ((framePtr->VPP_hsc_endp   & VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
 
     VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_H_START_END + cur_dev->vpp_off,
-                   ((framePtr->VPP_hsc_startp & VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
-                   ((framePtr->VPP_hsc_endp   & VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+                   ((framePtr->VPP_hd_start_lines_ & VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
+                   ((framePtr->VPP_hd_end_lines_   & VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
     }
     VSYNC_WR_MPEG_REG(VPP_HSC_REGION12_STARTP + cur_dev->vpp_off,
                    (0 << VPP_REGION1_BIT) |
@@ -1408,8 +1428,8 @@ static void vpp_settings_v(vpp_frame_par_t *framePtr)
                    (((VPP_PREBLEND_VD_V_END_LIMIT-1) & VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
     }
     VSYNC_WR_MPEG_REG(VPP_BLEND_VD2_V_START_END + cur_dev->vpp_off,
-                   (((framePtr->VPP_vsc_endp / 2) & VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
-                   (((framePtr->VPP_vsc_endp) & VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
+                   (((framePtr->VPP_vd_end_lines_ / 2) & VPP_VD_SIZE_MASK) << VPP_VD1_START_BIT) |
+                   (((framePtr->VPP_vd_end_lines_) & VPP_VD_SIZE_MASK) << VPP_VD1_END_BIT));
     }
     VSYNC_WR_MPEG_REG(VPP_VSC_REGION12_STARTP + cur_dev->vpp_off, 0);
     VSYNC_WR_MPEG_REG(VPP_VSC_REGION34_STARTP + cur_dev->vpp_off,
@@ -2324,8 +2344,8 @@ static void viu_set_dcu(vpp_frame_par_t *frame_par, vframe_t *vf)
   	} else {
         VSYNC_WR_MPEG_REG(VD1_IF0_LUMA_PSEL + cur_dev->viu_off, 0);
         VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA_PSEL + cur_dev->viu_off, 0);
-	VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL + cur_dev->viu_off,   0x4000000);
-	VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL + cur_dev->viu_off, 0x4000000);
+        VSYNC_WR_MPEG_REG(VD2_IF0_LUMA_PSEL, 0);
+        VSYNC_WR_MPEG_REG(VD2_IF0_CHROMA_PSEL, 0);
   	}
     }
 #endif
@@ -3036,6 +3056,32 @@ static irqreturn_t vsync_isr(int irq, void *dev_id)
 
             vf = video_vf_get();
             if (!vf) break;
+			if(vf->frame_dirty){
+				if (cur_dispbuf != vf) {
+					if(vf->source_type != VFRAME_SOURCE_TYPE_OSD){
+						 if (vf->pts != 0) {
+							 amlog_mask(LOG_MASK_TIMESTAMP,
+							 "vpts to vf->pts: 0x%x, scr: 0x%x, abs_scr: 0x%x\n",
+							 vf->pts, timestamp_pcrscr_get(), READ_MPEG_REG(SCR_HIU));
+							 timestamp_vpts_set(vf->pts);
+						} else if (cur_dispbuf) {
+							 amlog_mask(LOG_MASK_TIMESTAMP,
+							 "vpts inc: 0x%x, scr: 0x%x, abs_scr: 0x%x\n",
+							 timestamp_vpts_get() + DUR2PTS(cur_dispbuf->duration),
+							 timestamp_pcrscr_get(), READ_MPEG_REG(SCR_HIU));
+							 timestamp_vpts_inc(DUR2PTS(cur_dispbuf->duration));
+						
+							vpts_remainder += DUR2PTS_RM(cur_dispbuf->duration);
+							if (vpts_remainder >= 0xf) {
+								vpts_remainder -= 0xf;
+								timestamp_vpts_inc(-1);
+							}
+						}
+					}
+				}
+				video_vf_put(vf);
+				break;
+			}            
             force_blackout = 0;
 #ifdef TV_3D_FUNCTION_OPEN
 
@@ -3426,6 +3472,39 @@ exit:
         spin_unlock_irqrestore(&video_onoff_lock, flags);
     }
 
+    if (likely(video2_onoff_state != VIDEO_ENABLE_STATE_IDLE)) {
+        /* state change for video layer2 enable/disable */
+
+        spin_lock_irqsave(&video2_onoff_lock, flags);
+
+        if (video2_onoff_state == VIDEO_ENABLE_STATE_ON_REQ) {
+            /* the video layer 2 is enabled one vsync later, assumming
+             * all registers are ready from RDMA.
+             */
+            video2_onoff_state = VIDEO_ENABLE_STATE_ON_PENDING;
+        } else if (video2_onoff_state == VIDEO_ENABLE_STATE_ON_PENDING) {
+            SET_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, VPP_PREBLEND_EN|VPP_VD2_PREBLEND|(0x1ff << VPP_VD2_ALPHA_BIT));
+
+            video2_onoff_state = VIDEO_ENABLE_STATE_IDLE;
+
+            if(debug_flag& DEBUG_FLAG_BLACKOUT){
+                printk("VsyncEnableVideoLayer\n");
+            }
+        } else if (video2_onoff_state == VIDEO_ENABLE_STATE_OFF_REQ) {
+        #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+            CLEAR_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, VPP_VD2_PREBLEND|VPP_VD2_POSTBLEND);
+        #else
+            CLEAR_VCBUS_REG_MASK(VPP_MISC + cur_dev->vpp_off, VPP_VD2_PREBLEND|VPP_VD2_POSTBLEND);
+        #endif
+            video2_onoff_state = VIDEO_ENABLE_STATE_IDLE;
+
+            if(debug_flag& DEBUG_FLAG_BLACKOUT){
+                printk("VsyncDisableVideoLayer2\n");
+            }
+        }
+
+        spin_unlock_irqrestore(&video2_onoff_lock, flags);
+    }
 #ifdef CONFIG_VSYNC_RDMA
     cur_rdma_buf = cur_dispbuf;
     //vsync_rdma_config();
@@ -5899,6 +5978,7 @@ static int __init video_early_init(void)
 
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
     WRITE_VCBUS_REG(VPP_PREBLEND_VD1_H_START_END, 4096);
+    WRITE_VCBUS_REG(VPP_BLEND_VD2_H_START_END, 4096);
 #endif
 
     if(NULL==init_logo_obj || !init_logo_obj->para.loaded)
diff --git a/drivers/amlogic/ppmgr/ppmgr_vpp.c b/drivers/amlogic/ppmgr/ppmgr_vpp.c
index b880bc09d8d1..97128d650e0c 100755
--- a/drivers/amlogic/ppmgr/ppmgr_vpp.c
+++ b/drivers/amlogic/ppmgr/ppmgr_vpp.c
@@ -679,6 +679,9 @@ static int process_vf_deinterlace_nv21(vframe_t *vf, ge2d_context_t *context, co
     if (!vf)
         return -1;
 
+    if(vf->type & VIDTYPE_MVC){
+		return 0;
+	}
     if ((vf->canvas0Addr == vf->canvas1Addr)||(ppmgr_device.angle == 0)){
         //printk("++ppmgr interlace skip.\n");
         return 0;
@@ -834,6 +837,9 @@ static int process_vf_deinterlace(vframe_t *vf, ge2d_context_t *context, config_
     if (!vf)
         return -1;
 
+    if(vf->type & VIDTYPE_MVC){
+		return 0;
+	}
     if ((vf->canvas0Addr == vf->canvas1Addr)||(ppmgr_device.bypass)||(ppmgr_device.angle == 0)){
         //printk("++ppmgr interlace skip.\n");
         return 0;
@@ -1297,6 +1303,9 @@ static void process_vf_rotate(vframe_t *vf, ge2d_context_t *context, config_para
         pp_vf->dec_frame = NULL;
 #endif
 
+   if(vf->type & VIDTYPE_MVC){
+		pp_vf->dec_frame = vf;
+	}
     if (pp_vf->dec_frame) {
         /* bypass mode */
         *new_vf = *vf;
@@ -2362,6 +2371,7 @@ static int ppmgr_task(void *data)
                 break;
             if (vf && ppmgr_device.started) {
                 if (!(vf->type & (VIDTYPE_VIU_422 | VIDTYPE_VIU_444 | VIDTYPE_VIU_NV21)) || (vf->type & VIDTYPE_INTERLACE) || ppmgr_device.disable_prot
+                || (vf->type & VIDTYPE_MVC)
 #ifdef CONFIG_POST_PROCESS_MANAGER_PPSCALER
                 || amvideo_get_scaler_mode()
 #endif
diff --git a/include/linux/amlogic/amports/vframe.h b/include/linux/amlogic/amports/vframe.h
index 4dc66e2e0274..8e82b6884ac6 100755
--- a/include/linux/amlogic/amports/vframe.h
+++ b/include/linux/amlogic/amports/vframe.h
@@ -195,6 +195,7 @@ typedef struct vframe_s {
         enum pixel_aspect_ratio_e pixel_ratio;
         u64 ready_jiffies64;//ready from decode on  jiffies_64
         atomic_t use_cnt;
+		u32  frame_dirty;
 } vframe_t;
 
 #if 0
-- 
2.19.0

