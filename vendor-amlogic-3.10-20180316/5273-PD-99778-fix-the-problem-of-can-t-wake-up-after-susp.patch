From e8b4b0e14c20280fa4fc8b915df5924a8e012c8d Mon Sep 17 00:00:00 2001
From: Hang Cheng <hang.cheng@amlogic.com>
Date: Tue, 30 Dec 2014 13:33:39 +0800
Subject: [PATCH 5273/5965] PD #99778: fix the problem of can't wake up after
 suspend during playing fps stream and implement continuing fps process after
 (un)plug HDMI port on m8/m8b/m8m2

Change-Id: I3d104cf44b962117f229fe570da0cbf82c7e46f4
---
 drivers/amlogic/display/vout/enc_clk_config.c | 24 ++---
 drivers/amlogic/display/vout/tvconf.c         | 29 ++++--
 drivers/amlogic/display/vout/vout_serve.c     | 99 +++++++++++++++++--
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c        | 20 +++-
 4 files changed, 143 insertions(+), 29 deletions(-)

diff --git a/drivers/amlogic/display/vout/enc_clk_config.c b/drivers/amlogic/display/vout/enc_clk_config.c
index 2edd37a9138d..a442ae0f5ecc 100755
--- a/drivers/amlogic/display/vout/enc_clk_config.c
+++ b/drivers/amlogic/display/vout/enc_clk_config.c
@@ -128,7 +128,7 @@ static void set_hpll_clk_out(unsigned clk)
             WAIT_FOR_PLL_LOCKED(P_HHI_VID_PLL_CNTL);
             break;
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
-		case 2161:
+		case 2161:/*for N200/M200 480p59hz*/
             aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84f48);
             aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x8a46c023);
             aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x0123b100);
@@ -144,7 +144,7 @@ static void set_hpll_clk_out(unsigned clk)
             WAIT_FOR_PLL_LOCKED(P_HHI_VID_PLL_CNTL);
             break;
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION		
-		case 1081:
+		case 1081:/*for N200/M200 480p59hz*/
 			aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c8cf48);
 			aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x6000042c);
             aml_write_reg32(P_HHI_VID_PLL_CNTL,  0x4000042c);
@@ -192,7 +192,7 @@ static void set_hpll_clk_out(unsigned clk)
             aml_write_reg32(P_HHI_VID_PLL_CNTL5, 0x00016385);   // optimise HPLL VCO 2.97GHz performance
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 			if( clk == 2975 )
-				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84d04); // lower div_frac to get clk*0.999
+				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84cf8); // lower div_frac to get clk*0.999
 			else
 				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84e00);
 #else
@@ -200,7 +200,7 @@ static void set_hpll_clk_out(unsigned clk)
 #endif
             break;
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
-		case 2161:
+		case 2161:/*for N200/M200 480p59hz*/
             aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84f48);
             aml_write_reg32(P_HHI_VID_PLL_CNTL3, 0x8a46c023);
             aml_write_reg32(P_HHI_VID_PLL_CNTL4, 0x0123b100);
@@ -472,7 +472,7 @@ static enc_clk_val_t setting_enc_clk_val_m8m2[] = {
 		{VMODE_720P,       2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		// 2975 for hpll: vco2970 * 0.999
-		{VMODE_720P,       2975, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+		{VMODE_720P_59HZ,  2975, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
 #endif
 		{VMODE_1080I,      2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
@@ -482,7 +482,7 @@ static enc_clk_val_t setting_enc_clk_val_m8m2[] = {
 		{VMODE_1080P,      2970, 2, 2, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		// 2975 for hpll: vco2970 * 0.999
-		{VMODE_1080P,      2975, 2, 2, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+		{VMODE_1080P_59HZ, 2975, 2, 2, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
 #endif
 		{VMODE_720P_50HZ,  2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
 		{VMODE_1080I_50HZ, 2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
@@ -490,18 +490,18 @@ static enc_clk_val_t setting_enc_clk_val_m8m2[] = {
 		{VMODE_1080P_24HZ, 2970, 4, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		// 2975 for hpll: vco2970 * 0.999
-		{VMODE_1080P_24HZ, 2975, 4, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
+		{VMODE_1080P_23HZ, 2975, 4, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
 #endif
 		{VMODE_4K2K_30HZ,  2971, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		// 2976 for hpll: vco2970(4k) * 0.999
-		{VMODE_4K2K_30HZ,  2976, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
+		{VMODE_4K2K_29HZ,  2976, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
 #endif
 		{VMODE_4K2K_25HZ,  2971, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
 		{VMODE_4K2K_24HZ,  2971, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		// 2976 for hpll: vco2970(4k) * 0.999
-		{VMODE_4K2K_24HZ,  2976, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
+		{VMODE_4K2K_23HZ,  2976, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
 #endif
 		{VMODE_4K2K_SMPTE, 2971, 1, 2, 1, VIU_ENCP,  5, 1, 1, 1, -1, -1, -1,  1,  -1},
 		{VMODE_VGA,  1066, 3, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
@@ -523,7 +523,7 @@ static enc_clk_val_t setting_enc_clk_val[] = {
     {VMODE_720P,       2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 	// 2975 for hpll: vco2970 * 0.999
-	{VMODE_720P,       2975, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
+	{VMODE_720P_59HZ,  2975, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
 #endif
     {VMODE_1080I,      2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
@@ -533,7 +533,7 @@ static enc_clk_val_t setting_enc_clk_val[] = {
     {VMODE_1080P,      2970, 2, 2, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 	// 2975 for hpll: vco2970 * 0.999
-	{VMODE_1080P,      2975, 2, 2, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
+	{VMODE_1080P_59HZ, 2975, 2, 2, 1, VIU_ENCP, 10, 1, 1, 1, -1, -1, -1,  1,  -1},
 #endif
     {VMODE_720P_50HZ,  2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
     {VMODE_1080I_50HZ, 2970, 4, 2, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  -1},
@@ -541,7 +541,7 @@ static enc_clk_val_t setting_enc_clk_val[] = {
     {VMODE_1080P_24HZ, 2970, 4, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 	// 2975 for hpll: vco2970 * 0.999
-	{VMODE_1080P_24HZ, 2975, 4, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
+	{VMODE_1080P_23HZ, 2975, 4, 2, 1, VIU_ENCP, 10, 2, 1, 1, -1, -1, -1,  1,  -1},
 #endif
     {VMODE_VGA,  1066, 3, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
     {VMODE_SVGA, 1058, 2, 1, 1, VIU_ENCP, 10, 1, 2, 1, -1, -1, -1,  1,  1},
diff --git a/drivers/amlogic/display/vout/tvconf.c b/drivers/amlogic/display/vout/tvconf.c
index b2a345ca36a1..5d55cba3f9cd 100755
--- a/drivers/amlogic/display/vout/tvconf.c
+++ b/drivers/amlogic/display/vout/tvconf.c
@@ -63,6 +63,8 @@ SET_TV_CLASS_ATTR(vdac_setting,parse_vdac_setting)
 #define DEFAULT_POLICY_FR_AUTO	1
 
 static int fr_auto_policy = DEFAULT_POLICY_FR_AUTO;
+int fps_playing_flag=0 ;//1:  23.976/29.97/59.94 fps stream is playing
+vmode_t fps_target_mode=VMODE_INIT_NULL;
 static void policy_framerate_automation_store(char* para);
 
 SET_TV_CLASS_ATTR(policy_fr_auto, policy_framerate_automation_store)
@@ -121,7 +123,7 @@ static struct vmode_tvmode_tab_t mode_tab[] = {
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
     {TVMODE_480P_59HZ, VMODE_480P_59HZ},
     {TVMODE_720P_59HZ, VMODE_720P_59HZ}, // for 720p 59.94hz
-    {TVMODE_1080I_59HZ, VMODE_1080P_59HZ},
+    {TVMODE_1080I_59HZ, VMODE_1080I_59HZ},
     {TVMODE_1080P_59HZ, VMODE_1080P_59HZ}, // for 1080p 59.94hz
     {TVMODE_1080P_23HZ, VMODE_1080P_23HZ}, // for 1080p 23.97hz
     {TVMODE_4K2K_29HZ, VMODE_4K2K_29HZ}, // for 4k2k 29.97hz
@@ -684,6 +686,7 @@ static int tv_set_current_vmode(vmode_t mod)
         return 1;
     }
 //	info->vinfo = &tv_info[mod & VMODE_MODE_BIT_MASK];
+	printk("mode is %d,sync_duration_den=%d,sync_duration_num=%d\n", mod,info->vinfo->sync_duration_den,info->vinfo->sync_duration_num);
 	if(mod&VMODE_LOGO_BIT_MASK)  return 0;
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	switch_vpu_mem_pd_vmod(info->vinfo->mode, VPU_MEM_POWER_ON);
@@ -728,8 +731,7 @@ static int tv_module_disable(vmode_t cur_vmod)
 }
 
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
-
-static char* get_name_from_vmode(vmode_t mode)
+char* get_name_from_vmode(vmode_t mode)
 {
 	int i = 0, count = 0;
 	
@@ -885,6 +887,7 @@ static int get_target_vmode(int framerate_target)
 			break;
 	}
 */
+	fps_target_mode=mode_target;
 	return mode_target;
 }
 
@@ -937,7 +940,10 @@ static int clock_fine_tune(void)
 		case VMODE_1080P_59HZ:
 		case VMODE_4K2K_29HZ:
 		case VMODE_4K2K_23HZ:
-			aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84d04);
+			if( MESON_CPU_TYPE==MESON_CPU_TYPE_MESON8B )
+				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84cf8);
+			else
+				aml_write_reg32(P_HHI_VID_PLL_CNTL2, 0x69c84d04);
 			break;
 		case VMODE_720P:
 		case VMODE_1080I:
@@ -1036,11 +1042,21 @@ static int framerate_automation_process(int duration)
 
 	fr_vsource = get_vsource_frame_rate(duration);
 	fr_target = get_target_frame_rate(fr_vsource, policy);
-
+	
 	pvinfo = tv_get_current_info();
 	if( (pvinfo->sync_duration_num==fr_target) || (pvinfo->sync_duration_num==(fr_target/100)) )
 		return 0;
-
+	switch(fr_vsource){
+	case 5994:
+	case 2997:
+	case 2397:
+    	fps_playing_flag=1;
+		break;
+	default:
+		fps_playing_flag=0;
+		break;
+	}
+	printk("%s[%d] fps_playing_flag = %d\n", __FUNCTION__,__LINE__, fps_playing_flag);
 	mode_target = get_target_vmode(fr_target);
 	
 	framerate_automation_set_mode(mode_target);
@@ -1073,6 +1089,7 @@ static int tv_set_vframe_rate_end_hint(void)
 	printk("vout [%s] return mode = %d, policy = %d!\n", __FUNCTION__, mode_by_user, fr_auto_policy);
 	if( fr_auto_policy != 0 )
 	{
+		fps_playing_flag=0;
 		framerate_automation_set_mode(mode_by_user);
 	}
 
diff --git a/drivers/amlogic/display/vout/vout_serve.c b/drivers/amlogic/display/vout/vout_serve.c
index 71aa0007f3f5..4ce12bdb79aa 100755
--- a/drivers/amlogic/display/vout/vout_serve.c
+++ b/drivers/amlogic/display/vout/vout_serve.c
@@ -136,6 +136,87 @@ static int  meson_vout_resume(struct platform_device *pdev);
 
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 vmode_t mode_by_user = VMODE_INIT_NULL;
+extern int fps_playing_flag;
+extern vmode_t fps_target_mode;
+extern char* get_name_from_vmode(vmode_t mode);
+
+//for hdmi (un)plug during fps automation
+static int want_hdmi_mode(vmode_t mode)
+{
+	int ret=0;
+	switch(mode){
+		case VMODE_480I:
+		case VMODE_480I_RPT:
+		case VMODE_480P:
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION    
+		case VMODE_480P_59HZ:// for framerate automation 480p 59.94hz
+#endif   
+		case VMODE_480P_RPT:
+		case VMODE_576I:
+		case VMODE_576I_RPT:
+		case VMODE_576P:
+		case VMODE_576P_RPT:
+		case VMODE_720P:
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+		case VMODE_720P_59HZ: // for framerate automation 720p 59.94hz
+#endif
+		case VMODE_1080I:
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+		case VMODE_1080I_59HZ: // for framerate automation 1080i 59.94hz
+#endif   
+		case VMODE_1080P:
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+		case VMODE_1080P_59HZ: // for framerate automation 1080p 59.94hz
+#endif
+		case VMODE_720P_50HZ:
+		case VMODE_1080I_50HZ:
+		case VMODE_1080P_50HZ:
+		case VMODE_1080P_24HZ:
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+		case VMODE_1080P_23HZ: // for framerate automation 1080p 23.97hz
+#endif
+		case VMODE_4K2K_30HZ:
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+		case VMODE_4K2K_29HZ: // for framerate automation 4k2k 29.97hz
+#endif
+		case VMODE_4K2K_25HZ:
+		case VMODE_4K2K_24HZ:
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+		case VMODE_4K2K_23HZ: // for framerate automation 4k2k 23.97hz
+#endif
+		case VMODE_4K2K_SMPTE:
+		case VMODE_4K2K_FAKE_5G:  // timing same as 4k2k30hz, Vsync from 30hz to 50hz
+		case VMODE_4K2K_60HZ:	  // timing same as 4k2k30hz, Vsync from 30hz to 60hz
+		case VMODE_4K2K_5G:
+			ret=1;
+			break;
+		default:
+			ret=0;
+			break;
+	}
+	return ret;
+}
+
+//if plug hdmi during fps (stream is playing), then adjust mode to fps vmode
+static void fps_auto_adjust_mode( vmode_t *pmode)
+{
+	if( fps_playing_flag == 1 )
+	{
+		if( want_hdmi_mode(*pmode) == 1 )
+		{
+			*pmode = fps_target_mode;
+			printk("%s[%d]\n",__func__,__LINE__);
+		}
+	}
+}
+
+void update_vmode_status(char* name)
+{
+	snprintf(mode, 40, "%s\n", name);
+}
+
+EXPORT_SYMBOL(update_vmode_status);
+
 #endif
 
 static  void  set_vout_mode(char * name)
@@ -159,21 +240,21 @@ static  void  set_vout_mode(char * name)
 		amlog_mask_level(LOG_MASK_PARA,LOG_LEVEL_HIGH,"don't set the same mode as current.\n");
 		return ;
 	}
-
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+	//if plug hdmi during fps (stream is playing), then adjust mode to fps vmode
+	fps_auto_adjust_mode(&mode);
+	printk("%s[%d]fps_target_mode=%d\n",__func__,__LINE__,mode);
+	update_vmode_status(get_name_from_vmode(mode));
+#endif
 	set_current_vmode(mode);
-	amlog_mask_level(LOG_MASK_PARA,LOG_LEVEL_HIGH,"new mode %s set ok\n",name);
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+	amlog_mask_level(LOG_MASK_PARA,LOG_LEVEL_HIGH,"new mode =%s set ok\n",get_name_from_vmode(mode));
+#endif
 	vout_notifier_call_chain(VOUT_EVENT_MODE_CHANGE,&mode) ;
 	printk("%s[%d]\n", __func__, __LINE__);
 }
 
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
-void update_vmode_status(char* name)
-{
-	snprintf(mode, 40, "%s\n", name);
-}
-
-EXPORT_SYMBOL(update_vmode_status);
-
 void set_vout_mode_fr_auto(char* name)
 {
 	vmode_t    vmode;
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index 9ce8cdfb2dca..8c0b065fc69a 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -63,6 +63,9 @@ static int set_disp_mode_auto(void);
 const vinfo_t * hdmi_get_current_vinfo(void);
 
 struct hdmi_config_platform_data *hdmi_pdata;
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+static int suspend_flag=0;
+#endif
 
 static hdmitx_dev_t hdmitx_device;
 static struct switch_dev sdev = {      // android ics switch device
@@ -76,6 +79,9 @@ static void hdmitx_early_suspend(struct early_suspend *h)
     hdmitx_dev_t * phdmi = (hdmitx_dev_t *)h->param;
     if (info && (strncmp(info->name, "panel", 5) == 0 || strncmp(info->name, "null", 4) == 0))
         return;
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+	suspend_flag=1;
+#endif
     phdmi->hpd_lock = 1;
     phdmi->HWOp.Cntl((hdmitx_dev_t *)h->param, HDMITX_EARLY_SUSPEND_RESUME_CNTL, HDMITX_EARLY_SUSPEND);
     phdmi->cur_VIC = HDMI_Unkown;
@@ -102,6 +108,9 @@ static void hdmitx_late_resume(struct early_suspend *h)
     hdmitx_device.HWOp.CntlDDC(&hdmitx_device, DDC_HDCP_OP, HDCP_OFF);
     hdmitx_device.internal_mode_change = 0;
     set_disp_mode_auto();
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+	suspend_flag=0;
+#endif
     pr_info("amhdmitx: late resume module %d\n", __LINE__);
     phdmi->HWOp.Cntl((hdmitx_dev_t *)h->param, HDMITX_EARLY_SUSPEND_RESUME_CNTL, HDMITX_LATE_RESUME);
     hdmi_print(INF, SYS "late resume\n");
@@ -312,6 +321,7 @@ static void hdmitx_pre_display_init(void)
 // "vic_old==HDMI_720P60" means old vic is HDMI_1080p60, but vmode maybe VMODE_1080P or VMODE_1080P_59HZ 
 static int is_similar_hdmi_vic(HDMI_Video_Codes_t vic_old, vmode_t mode_new)
 {
+	printk("%s[%d] vic_old=%d,mode_new=%d\n", __FUNCTION__, __LINE__,vic_old,mode_new);
 	if( (vic_old==HDMI_480p60_16x9) && (mode_new==VMODE_480P_59HZ) )
 		return 1;	
 	if( (vic_old==HDMI_720p60) && (mode_new==VMODE_720P_59HZ) )
@@ -417,8 +427,12 @@ static int set_disp_mode_auto(void)
     }
 
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
-	if( is_similar_hdmi_vic(vic_ready, info->mode) )
+	if(suspend_flag==1)
+ 		vic_ready = HDMI_Unkown;
+	else if( is_similar_hdmi_vic(vic_ready, info->mode) ){
 		vic_ready = HDMI_Unkown;
+		printk("%s[%d] is similiar vic\n", __FUNCTION__, __LINE__);
+	}
 #endif
 
     if((vic_ready != HDMI_Unkown) && (vic_ready == vic)) {
@@ -950,7 +964,9 @@ static int hdmitx_notify_callback_v(struct notifier_block *block, unsigned long
         return 0;
 	
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION	
-    // vic_ready got from IP
+	if(suspend_flag==1)
+ 		return 0;
+	// vic_ready got from IP
     vic_ready = hdmitx_device.HWOp.GetState(&hdmitx_device, STAT_VIDEO_VIC, 0);
 	// get current vinfo
     info = hdmi_get_current_vinfo();
-- 
2.19.0

