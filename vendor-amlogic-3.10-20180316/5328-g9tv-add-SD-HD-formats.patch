From 6c4b36809856c8c9254a9560b403c1ea90704517 Mon Sep 17 00:00:00 2001
From: Zongdong Jiao <zongdong.jiao@amlogic.com>
Date: Wed, 31 Dec 2014 09:57:47 +0800
Subject: [PATCH 5328/5965] g9tv: add SD/HD formats

---
 arch/arm/mach-mesong9tv/enc_clk_config.c      |  28 +-
 .../mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c | 560 +-----------------
 .../hdmi/hdmi_common/hdmi_parameters.c        |  16 +-
 drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c |   4 +-
 4 files changed, 62 insertions(+), 546 deletions(-)

diff --git a/arch/arm/mach-mesong9tv/enc_clk_config.c b/arch/arm/mach-mesong9tv/enc_clk_config.c
index e2990651f058..b5c530c1123d 100755
--- a/arch/arm/mach-mesong9tv/enc_clk_config.c
+++ b/arch/arm/mach-mesong9tv/enc_clk_config.c
@@ -134,7 +134,18 @@ static void set_hpll_clk_out(unsigned clk)
         aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x0000023d);
         aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x5, 28, 3);  //reset hpll
         aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x4, 28, 3);
-        printk("waiting HPLL lock\n");
+        WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
+        break;
+    case 4320:
+        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0, 14, 1); // div mode
+        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x000, 0, 12); // div_frac
+        aml_write_reg32(P_HHI_HDMI_PLL_CNTL3, 0x135c5091);
+        aml_write_reg32(P_HHI_HDMI_PLL_CNTL4, 0x801da72c);
+        aml_write_reg32(P_HHI_HDMI_PLL_CNTL5, 0x71c86900);    //5940 0x71c86900      // 0x71486900 2970
+        aml_write_reg32(P_HHI_HDMI_PLL_CNTL6, 0x00000e55);
+        aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x0000022d);
+        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x5, 28, 3);  //reset hpll
+        aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x4, 28, 3);
         WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
         break;
     case 2448:
@@ -147,7 +158,6 @@ static void set_hpll_clk_out(unsigned clk)
         aml_write_reg32(P_HHI_HDMI_PLL_CNTL, 0x00000266);
         aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x5, 28, 3);  //reset hpll
         aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x4, 28, 3);
-        printk("waiting HPLL lock\n");
         WAIT_FOR_PLL_LOCKED(P_HHI_HDMI_PLL_CNTL);
         break;
     default:
@@ -357,10 +367,19 @@ static void hpll_load_en(void)
 }
 
 // mode viu_path viu_type hpll_clk_out od1 od2 od3
-// vid_pll_div vid_clk_div hdmi_tx_pixel_div encp_div enci_div enct_div encl_div vdac0_div
+// vid_pll_div vid_clk_div hdmi_tx_pixel_div encp_div enci_div encl_div vdac0_div
 static hw_enc_clk_val_t setting_enc_clk_val[] = {
+    {VMODE_480I,           1, VIU_ENCI, 4320, 4, 4, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, -1, 2, -1, -1},
+    {VMODE_576I,           1, VIU_ENCI, 4320, 4, 4, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, -1, 2, -1, -1},
+    {VMODE_576P,           1, VIU_ENCP, 4320, 4, 4, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, 1, -1, -1, -1},
+    {VMODE_480P,           1, VIU_ENCP, 4320, 4, 4, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, 1, -1, -1, -1},
+    {VMODE_720P_50HZ,      1, VIU_ENCP, 2970, 4, 1, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, 1, -1, -1, -1},
+    {VMODE_720P,           1, VIU_ENCP, 2970, 4, 1, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, 1, -1, -1, -1},
+    {VMODE_1080I,          1, VIU_ENCP, 2970, 4, 1, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, 1, -1, -1, -1},
+    {VMODE_1080I_50HZ,     1, VIU_ENCP, 2970, 4, 1, 1, CLK_UTIL_VID_PLL_DIV_5, 1, 2, 1, -1, -1, -1},
     {VMODE_1080P,          1, VIU_ENCP, 2970, 1, 2, 2, CLK_UTIL_VID_PLL_DIV_5, 1, 1, 1, -1, -1, -1},
     {VMODE_1080P_50HZ,     1, VIU_ENCP, 2970, 1, 2, 2, CLK_UTIL_VID_PLL_DIV_5, 1, 1, 1, -1, -1, -1},
+    {VMODE_1080P_24HZ,     1, VIU_ENCP, 2970, 2, 2, 2, CLK_UTIL_VID_PLL_DIV_5, 1, 1, 1, -1, -1, -1},
     {VMODE_4K2K_30HZ,      1, VIU_ENCP, 2970, 1, 1, 1, CLK_UTIL_VID_PLL_DIV_5, 2, 1, 1, -1, -1, -1},
     {VMODE_4K2K_25HZ,      1, VIU_ENCP, 2970, 1, 1, 1, CLK_UTIL_VID_PLL_DIV_5, 2, 1, 1, -1, -1, -1},
     {VMODE_4K2K_24HZ,      1, VIU_ENCP, 2970, 1, 1, 1, CLK_UTIL_VID_PLL_DIV_5, 2, 1, 1, -1, -1, -1},
@@ -391,6 +410,9 @@ void set_vmode_clk(vmode_t mode)
         case 0x266:
             hpll_vco_clk = 2448;
             break;
+        case 0x22d:
+            hpll_vco_clk = 4320;
+            break;
         default:
             hpll_vco_clk = 0xffff;
         }
diff --git a/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c b/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c
index a34f160f9e5a..3c1056bb7007 100755
--- a/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c
+++ b/arch/arm/mach-mesong9tv/hdmi_tx_hw_20/hdmi_tx_hw.c
@@ -726,7 +726,7 @@ static void hdmi_tvenc1080i_set(Hdmi_tx_video_para_t* param)
                          (HSYNC_POLARITY                    << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
                          (VSYNC_POLARITY                    << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
                          (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
-                         (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                         (4                                 << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
                                                                     //                          0=output CrYCb(BRG);
                                                                     //                          1=output YCbCr(RGB);
                                                                     //                          2=output YCrCb(RBG);
@@ -764,7 +764,7 @@ static void hdmi_tvenc4k2k_set(Hdmi_tx_video_para_t* param)
     unsigned long vs_bline_evn = 0, vs_eline_evn = 0, vs_bline_odd = 0, vs_eline_odd = 0;
     unsigned long vso_begin_evn = 0, vso_begin_odd = 0;
 
-    if((param->VIC==HDMI_4k2k_30) || (param->VIC==HDMI_3840x2160p60_16x9) || (param->VIC==HDMI_3840x2160p50_16x9)){
+    if((param->VIC==HDMI_4k2k_30) || (param->VIC==HDMI_3840x2160p60_16x9)){
          INTERLACE_MODE     = 0;
          PIXEL_REPEAT_VENC  = 0;
          PIXEL_REPEAT_HDMI  = 0;
@@ -780,7 +780,7 @@ static void hdmi_tvenc4k2k_set(Hdmi_tx_video_para_t* param)
          SOF_LINES          = 72 + 1;
          TOTAL_FRAMES       = 3;
     }
-    else if(param->VIC==HDMI_4k2k_25){
+    else if((param->VIC==HDMI_4k2k_25) || (param->VIC==HDMI_3840x2160p50_16x9)){
          INTERLACE_MODE     = 0;
          PIXEL_REPEAT_VENC  = 0;
          PIXEL_REPEAT_HDMI  = 0;
@@ -932,6 +932,7 @@ static void hdmi_tvenc480i_set(Hdmi_tx_video_para_t* param)
     unsigned long vs_bline_evn = 0, vs_eline_evn = 0, vs_bline_odd = 0, vs_eline_odd = 0;
     unsigned long vso_begin_evn = 0, vso_begin_odd = 0;
 
+    aml_set_reg32_bits(P_HHI_GCLK_OTHER, 1, 8, 1);      // open gclk_venci_int
     switch(param->VIC) {
     case HDMI_480i60:
     case HDMI_480i60_16x9:
@@ -1083,7 +1084,7 @@ static void hdmi_tvenc480i_set(Hdmi_tx_video_para_t* param)
                          (0                                 << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
                          (0                                 << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
                          (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
-                         (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                         (4                                 << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
                                                                     //                          0=output CrYCb(BRG);
                                                                     //                          1=output YCbCr(RGB);
                                                                     //                          2=output YCrCb(RBG);
@@ -1100,88 +1101,8 @@ static void hdmi_tvenc480i_set(Hdmi_tx_video_para_t* param)
     aml_set_reg32_bits(P_VPU_HDMI_SETTING, 1, 0, 1);  // [    0] src_sel_enci: Enable ENCI output to HDMI
 }    
 
-const reg_t tvenc_regs_4k2k30hz[] = {
-    {P_ENCP_DVI_HSO_BEGIN    , 0x00001046},
-    {P_ENCP_DVI_HSO_END      , 0x0000109e},
-    {P_ENCP_DVI_VSO_BLINE_EVN, 0x00000006},
-    {P_ENCP_DVI_VSO_BLINE_ODD, 0x00000028},
-    {P_ENCP_DVI_VSO_ELINE_EVN, 0x00000010},
-    {P_ENCP_DVI_VSO_ELINE_ODD, 0x0000002a},
-    {P_ENCP_DVI_VSO_BEGIN_EVN, 0x00001046},
-    {P_ENCP_DVI_VSO_BEGIN_ODD, 0x00000010},
-    {P_ENCP_DVI_VSO_END_EVN  , 0x00001046},
-    {P_ENCP_DVI_VSO_END_ODD  , 0x00000020},
-    {P_ENCP_DE_H_BEGIN       , 0x00000096},
-    {P_ENCP_DE_H_END         , 0x00000f96},
-    {P_ENCP_DE_V_BEGIN_EVEN  , 0x00000059},
-    {P_ENCP_DE_V_END_EVEN    , 0x000008c9},
-    {P_ENCP_DE_V_BEGIN_ODD   , 0x0000002a},
-    {P_ENCP_DE_V_END_ODD     , 0x00000207},
-    {MREG_END_MARKER,     MREG_END_MARKER},
-};
-
-const reg_t tvenc_regs_1080p60hz[] = {
-    {P_ENCP_DVI_HSO_BEGIN    , 0x0000086e},
-    {P_ENCP_DVI_HSO_END      , 0x00000002},
-    {P_ENCP_DVI_VSO_BLINE_EVN, 0x00000464},
-    {P_ENCP_DVI_VSO_BLINE_ODD, 0x00000028},
-    {P_ENCP_DVI_VSO_ELINE_EVN, 0x00000004},
-    {P_ENCP_DVI_VSO_ELINE_ODD, 0x0000002a},
-    {P_ENCP_DVI_VSO_BEGIN_EVN, 0x0000086e},
-    {P_ENCP_DVI_VSO_BEGIN_ODD, 0x00000010},
-    {P_ENCP_DVI_VSO_END_EVN  , 0x0000086e},
-    {P_ENCP_DVI_VSO_END_ODD  , 0x00000020},
-    {P_ENCP_DE_H_BEGIN       , 0x00000096},
-    {P_ENCP_DE_H_END         , 0x00000816},
-    {P_ENCP_DE_V_BEGIN_EVEN  , 0x00000029},
-    {P_ENCP_DE_V_END_EVEN    , 0x00000461},
-    {P_ENCP_DE_V_BEGIN_ODD   , 0x0000002a},
-    {P_ENCP_DE_V_END_ODD     , 0x00000207},
-    {MREG_END_MARKER,     MREG_END_MARKER},
-};
-
-const reg_t tvenc_regs_4k2k25hz[] = {
-    {P_ENCP_DVI_HSO_BEGIN    , 0x000013b6},
-    {P_ENCP_DVI_HSO_END      , 0x0000140e},
-    {P_ENCP_DVI_VSO_BLINE_EVN, 0x00000006},
-    {P_ENCP_DVI_VSO_BLINE_ODD, 0x00000232},
-    {P_ENCP_DVI_VSO_ELINE_EVN, 0x00000010},
-    {P_ENCP_DVI_VSO_ELINE_ODD, 0x00000237},
-    {P_ENCP_DVI_VSO_BEGIN_EVN, 0x000013b6},
-    {P_ENCP_DVI_VSO_BEGIN_ODD, 0x0000091d},
-    {P_ENCP_DVI_VSO_END_EVN  , 0x000013b6},
-    {P_ENCP_DVI_VSO_END_ODD  , 0x0000091d},
-    {P_ENCP_DE_H_BEGIN       , 0x00000096},
-    {P_ENCP_DE_H_END         , 0x00000f96},
-    {P_ENCP_DE_V_BEGIN_EVEN  , 0x00000059},
-    {P_ENCP_DE_V_END_EVEN    , 0x000008c9},
-    {P_ENCP_DE_V_BEGIN_ODD   , 0x00000247},
-    {P_ENCP_DE_V_END_ODD     , 0x00000463},
-    {MREG_END_MARKER,     MREG_END_MARKER},
-};
-
-struct tv_hdmi_set_t hdmi_tvenc_regs_set[] = {
-    {HDMI_3840x2160p25_16x9, tvenc_regs_4k2k25hz},
-    {HDMI_3840x2160p50_16x9, tvenc_regs_4k2k25hz},
-    {HDMI_3840x2160p30_16x9, tvenc_regs_4k2k30hz},
-    {HDMI_3840x2160p60_16x9, tvenc_regs_4k2k30hz},
-    {HDMI_1920x1080p60_16x9, tvenc_regs_1080p60hz},
-};
-
-static const reg_t * tvregs_setting_mode(HDMI_Video_Codes_t vic)
-{
-    int i = 0;
-    for(i = 0; i < ARRAY_SIZE(hdmi_tvenc_regs_set); i++) {
-        if(vic == hdmi_tvenc_regs_set[i].vic)
-            return hdmi_tvenc_regs_set[i].reg_setting;
-    }
-    return NULL;
-}
-
 static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
 {
-    const reg_t *s = NULL;
-
     unsigned long VFIFO2VD_TO_HDMI_LATENCY = 2; // Annie 01Sep2011: Change value from 3 to 2, due to video encoder path delay change.
     unsigned long TOTAL_PIXELS = 0, PIXEL_REPEAT_HDMI = 0, PIXEL_REPEAT_VENC = 0, ACTIVE_PIXELS = 0;
     unsigned FRONT_PORCH = 0, HSYNC_PIXELS = 0, ACTIVE_LINES = 0, INTERLACE_MODE = 0, TOTAL_LINES = 0, SOF_LINES = 0, VSYNC_LINES = 0;
@@ -1386,16 +1307,6 @@ static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
     }
     // Annie 01Sep2011: Remove the following line as register VENC_DVI_SETTING_MORE is no long valid, use VPU_HDMI_SETTING instead.
     //Wr(VENC_DVI_SETTING_MORE, (TX_INPUT_COLOR_FORMAT==0)? 1 : 0); // [0] 0=Map data pins from Venc to Hdmi Tx as CrYCb mode;
-
-    s = tvregs_setting_mode(param->VIC);
-    if(!s) {
-        printk("vic %d regs setting failed\n", param->VIC);
-        return;
-    }
-    while (MREG_END_MARKER != s->reg) {
-        aml_write_reg32(s->reg, s->val);
-        s++;
-    }
     switch(param->VIC) {
     case HDMI_480i60:
     case HDMI_480i60_16x9:
@@ -1409,7 +1320,7 @@ static void hdmi_tvenc_set(Hdmi_tx_video_para_t *param)
                              (0                                 << 2) | // [    2] inv_hsync. 1=Invert Hsync polarity.
                              (0                                 << 3) | // [    3] inv_vsync. 1=Invert Vsync polarity.
                              (0                                 << 4) | // [    4] inv_dvi_clk. 1=Invert clock to external DVI, (clock invertion exists at internal HDMI).
-                             (((TX_INPUT_COLOR_FORMAT==0)?1:0)  << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
+                             (4                                 << 5) | // [ 7: 5] data_comp_map. Input data is CrYCb(BRG), map the output data to desired format:
                                                                         //                          0=output CrYCb(BRG);
                                                                         //                          1=output YCbCr(RGB);
                                                                         //                          2=output YCrCb(RBG);
@@ -1851,7 +1762,6 @@ static int hdmitx_set_dispmode(hdmitx_dev_t* hdev, Hdmi_tx_video_para_t *param)
     default:
         hdmi_tvenc_set(param);
     }
-    hdmi_tvenc_set(param);
     aml_write_reg32(P_VPU_HDMI_FMT_CTRL,(((TX_INPUT_COLOR_FORMAT==HDMI_COLOR_FORMAT_420)?2:0)  << 0) | // [ 1: 0] hdmi_vid_fmt. 0=444; 1=convert to 422; 2=convert to 420.
                          (2                                                     << 2) | // [ 3: 2] chroma_dnsmp. 0=use pixel 0; 1=use pixel 1; 2=use average.
                          (((TX_COLOR_DEPTH==HDMI_COLOR_DEPTH_24B)? 1:0)         << 4) | // [    4] dith_en. 1=enable dithering before HDMI TX input.
@@ -2130,6 +2040,22 @@ static void hdmitx_set_aud_cts(audio_type_t type, Hdmi_tx_audio_cts_t cts_mode,
 }
 #endif
 
+static void hdmitx_set_aud_chnls(void)
+{
+    int i;
+    printk("set default 48k 2ch pcm channel status\n");
+    for(i = 0; i < 9; i++) {
+        // set all status to 0
+        hdmitx_wr_reg(HDMITX_DWC_FC_AUDSCHNLS0+i, 0x00);
+    }
+    // set default 48k 2ch pcm
+    hdmitx_wr_reg(HDMITX_DWC_FC_AUDSCHNLS2, 0x02);
+    hdmitx_wr_reg(HDMITX_DWC_FC_AUDSCHNLS3, 0x01);
+    hdmitx_wr_reg(HDMITX_DWC_FC_AUDSCHNLS5, 0x02);
+    hdmitx_wr_reg(HDMITX_DWC_FC_AUDSCHNLS7, 0x02);
+    hdmitx_wr_reg(HDMITX_DWC_FC_AUDSCHNLS8, 0xd2);
+}
+
 static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdev, Hdmi_tx_audio_para_t* audio_param)
 {
     unsigned int data32;
@@ -2220,7 +2146,8 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdev, Hdmi_tx_audio_para_t*
     //audio packetizer config
     hdmitx_wr_reg(HDMITX_DWC_AUD_INPUTCLKFS, TX_I2S_SPDIF? 4 : 0); // lfsfactor: use 2*F_i2s or F_spdif as audio_master_clk for CTS calculation
 
-    
+    hdmitx_set_aud_chnls();
+
     if (TX_I2S_SPDIF) {
         hdmitx_wr_reg(HDMITX_DWC_AUD_CONF0,  hdmitx_rd_reg(HDMITX_DWC_AUD_CONF0) | ((TX_I2S_8_CHANNEL? 0xf : 0x1) << 0));
         // Enable audi2s_fifo_overrun interrupt
@@ -3148,418 +3075,6 @@ static void hdmi_phy_wakeup(hdmitx_dev_t* hdmitx_device)
     //hdmi_print(INF, SYS "phy wakeup\n");
 }
 
-
-
-static struct hdmi_format_para hdmi_1080p50hz_fmt_para = {
-    .vic = HDMI_1080p50,
-    .pixel_repetition_factor = 0,
-    .progress_mode = 1,
-    .scrambler_en = 0,
-    .tmds_clk_div40 = 0,
-    .timing = {
-        .vsync_polarity = 1,
-        .hsync_polarity = 1,
-        .h_active = 1920,
-        .h_total = 2640,
-        .h_blank = 720,
-        .h_front = 528,
-        .h_sync = 44,
-        .h_back = 148,
-        .v_active = 1080,
-        .v_total = 1125,
-        .v_blank = 45,
-        .v_back = 36,
-        .v_sync = 5,
-        .v_front = 4,
-    },
-};
-
-struct hdmi_format_para hdmi_1080p_fmt_para = {
-    .vic = HDMI_1080p60,
-    .pixel_repetition_factor = 0,
-    .progress_mode = 1,
-    .scrambler_en = 0,
-    .tmds_clk_div40 = 0,
-    .timing = {
-        .vsync_polarity = 1,
-        .hsync_polarity = 1,
-        .h_active = 1920,
-        .h_front = 88,
-        .h_sync = 44,
-        .h_back = 148,
-        .h_blank = (88 + 44 + 148),
-        .h_total = (1920 + 88 + 44 + 148),
-        .v_active = 1080,
-        .v_front = 4,
-        .v_sync = 5,
-        .v_back = 36,
-        .v_blank = (4 + 5 + 36),
-        .v_total = (1080 + 4 + 5 + 36),
-    },
-};
-
-struct hdmi_format_para hdmi_4k2k30hz_fmt_para = {
-    .vic = HDMI_3840x2160p30_16x9,
-    .pixel_repetition_factor = 0,
-    .progress_mode = 1,
-    .scrambler_en = 0,
-    .tmds_clk_div40 = 0,
-    .timing = {
-        .vsync_polarity = 1,
-        .hsync_polarity = 1,
-        .h_active = 3840,
-        .h_front = 176,
-        .h_sync = 88,
-        .h_back = 296,
-        .h_blank = (176 + 88 + 296),
-        .h_total = (3840 + 176 + 88 + 296),
-        .v_active = 2160,
-        .v_front = 8,
-        .v_sync = 10,
-        .v_back = 72,
-        .v_blank = (8 + 10 + 72),
-        .v_total = (2160 + 8 + 10 + 72),
-    },
-};
-
-struct hdmi_format_para hdmi_4k2k50hz_fmt_para = {
-    .vic = HDMI_3840x2160p50_16x9,
-    .pixel_repetition_factor = 0,
-    .progress_mode = 1,
-    .scrambler_en = 1,
-    .tmds_clk_div40 = 1,
-    .timing = {
-        .vsync_polarity = 1,
-        .hsync_polarity = 1,
-        .h_active = 3840,
-        .h_front = 176,
-        .h_sync = 88,
-        .h_back = 296,
-        .h_blank = (176 + 88 + 296),
-        .h_total = (3840 + 176 + 88 + 296),
-        .v_active = 2160,
-        .v_front = 8,
-        .v_sync = 10,
-        .v_back = 72,
-        .v_blank = (8 + 10 + 72),
-        .v_total = (2160 + 8 + 10 + 72),
-    },
-};
-
-struct hdmi_format_para hdmi_4k2k60hz_fmt_para = {
-    .vic = HDMI_3840x2160p60_16x9,
-    .pixel_repetition_factor = 0,
-    .progress_mode = 1,
-    .scrambler_en = 1,
-    .tmds_clk_div40 = 1,
-    .timing = {
-        .vsync_polarity = 1,
-        .hsync_polarity = 1,
-        .h_active = 3840,
-        .h_front = 176,
-        .h_sync = 88,
-        .h_back = 296,
-        .h_blank = (176 + 88 + 296),
-        .h_total = (3840 + 176 + 88 + 296),
-        .v_active = 2160,
-        .v_front = 8,
-        .v_sync = 10,
-        .v_back = 72,
-        .v_blank = (8 + 10 + 72),
-        .v_total = (2160 + 8 + 10 + 72),
-    },
-};
-
-// TODO
-struct hdmi_format_para *all_fmt_paras[] = {
-    &hdmi_4k2k60hz_fmt_para,
-    &hdmi_4k2k50hz_fmt_para,
-    &hdmi_1080p50hz_fmt_para,
-    &hdmi_4k2k30hz_fmt_para,
-    &hdmi_1080p_fmt_para,
-};
-
-//TODO VIC
-static struct hdmi_format_para * get_fmt_paras(HDMI_Video_Codes_t vic)
-{
-    int i;
-    for(i = 0; i < sizeof(all_fmt_paras) / sizeof(struct hdmi_format_para*); i++) {
-        if(vic == all_fmt_paras[i]->vic)
-            return all_fmt_paras[i];
-    }
-    return NULL;
-}
-
-static struct reg_s tvregs_1080p50hz_set[] = {
-    {P_VENC_VDAC_SETTING,          0xff,  },
-
-    {P_ENCP_VIDEO_FILT_CTRL,       0x1052,},
-
-    // bit 13    1          (delayed prog_vs)
-    // bit 5:4:  2          (pixel[0])
-    // bit 3:    1          invert vsync or not
-    // bit 2:    1          invert hsync or not
-    // bit1:     1          (select viu sync)
-    // bit0:     1          (progressive)
-    {P_VENC_DVI_SETTING,           0x000d,},
-    {P_ENCP_VIDEO_MAX_PXCNT,       2639,  },
-    {P_ENCP_VIDEO_MAX_LNCNT,       1124,  },
-    /* horizontal timing settings */
-    {P_ENCP_VIDEO_HSPULS_BEGIN,    44,  },//1980
-    {P_ENCP_VIDEO_HSPULS_END,      132,    },
-    {P_ENCP_VIDEO_HSPULS_SWITCH,   44,    },
-
-    //DE position in horizontal
-    {P_ENCP_VIDEO_HAVON_BEGIN,     271,   },
-    {P_ENCP_VIDEO_HAVON_END,       2190,  },
-
-    //ditital hsync positon in horizontal
-    {P_ENCP_VIDEO_HSO_BEGIN,       79 ,    },
-    {P_ENCP_VIDEO_HSO_END,         123,  },
-
-    /* vsync horizontal timing */
-    {P_ENCP_VIDEO_VSPULS_BEGIN,    220,   },
-    {P_ENCP_VIDEO_VSPULS_END,      2140,  },
-
-    /* vertical timing settings */
-    {P_ENCP_VIDEO_VSPULS_BLINE,    0,     },
-    {P_ENCP_VIDEO_VSPULS_ELINE,    4,     },//35
-    {P_ENCP_VIDEO_EQPULS_BLINE,    0,     },
-    {P_ENCP_VIDEO_EQPULS_ELINE,    4,     },//35
-    {P_ENCP_VIDEO_VAVON_BLINE,     41,    },
-    {P_ENCP_VIDEO_VAVON_ELINE,     1120,  },
-
-    //adjust the hsync & vsync start point and end point
-    {P_ENCP_VIDEO_VSO_BEGIN,       79,  },
-    {P_ENCP_VIDEO_VSO_END,         79,  },
-
-    //adjust the vsync start line and end line
-    {P_ENCP_VIDEO_VSO_BLINE,       0,     },
-    {P_ENCP_VIDEO_VSO_ELINE,       5,     },
-
-    {P_ENCP_VIDEO_YFP1_HTIME,      271,   },
-    {P_ENCP_VIDEO_YFP2_HTIME,      2190,  },
-    {P_VENC_VIDEO_PROG_MODE,       0x100, },
-    {P_ENCP_VIDEO_MODE,            0x4040,},
-    {P_ENCP_VIDEO_MODE_ADV,        0x0018,},
-
-    {P_ENCP_VIDEO_SYNC_MODE,       0x7, }, //bit[15:8] -- adjust the vsync vertical position
-
-    {P_ENCP_VIDEO_YC_DLY,          0,     },      //Y/Cb/Cr delay
-
-    {P_ENCP_VIDEO_RGB_CTRL, 2,},       // enable sync on B
-
-    {P_VENC_SYNC_ROUTE,            0,     },
-    {P_VENC_INTCTRL,               0x200, },
-    {P_ENCP_VFIFO2VD_CTL,               0,     },
-    {P_VENC_VDAC_FIFO_CTRL,        0x1000,},
-    {P_VENC_VDAC_SETTING,          0,     },
-    {P_VPU_VIU_VENC_MUX_CTRL,      0x000a,},
-    {P_ENCP_DACSEL_0,              0x3102,},
-    {P_ENCP_DACSEL_1,              0x0054,},
-    {P_VENC_VDAC_DACSEL0,          0x0001,},
-    {P_VENC_VDAC_DACSEL1,          0x0001,},
-    {P_VENC_VDAC_DACSEL2,          0x0001,},
-    {P_VENC_VDAC_DACSEL3,          0x0001,},
-    {P_VENC_VDAC_DACSEL4,          0x0001,},
-    {P_VENC_VDAC_DACSEL5,          0x0001,},
-    {P_ENCI_VIDEO_EN,              0,     },
-    {P_ENCP_VIDEO_EN,              1,     },
-    {MREG_END_MARKER,       MREG_END_MARKER},
-};
-
-static struct reg_s enc_1080p_set[] = {
-    {P_ENCP_VIDEO_MODE,             0x0040 | (1<<14)}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
-    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
-    {P_ENCP_VIDEO_YFP1_HTIME,       140},
-    {P_ENCP_VIDEO_YFP2_HTIME,       140 + 1920},//2060},
-    {P_ENCP_VIDEO_MAX_PXCNT,        2200 - 1},//2199},
-    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156},
-    {P_ENCP_VIDEO_HSPULS_END,       44},
-    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
-    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
-    {P_ENCP_VIDEO_VSPULS_END,       140 + 1920 - 1},//2059},
-    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
-    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
-    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
-    {P_ENCP_VIDEO_HAVON_END,        148 + 1920 - 1},//2067},
-    {P_ENCP_VIDEO_VAVON_BLINE,      45},
-    {P_ENCP_VIDEO_VAVON_ELINE,      45 + 1080 - 1},//1124},
-    {P_ENCP_VIDEO_HSO_BEGIN,        44},
-    {P_ENCP_VIDEO_HSO_END,          2156},
-    {P_ENCP_VIDEO_VSO_BEGIN,        2100},
-    {P_ENCP_VIDEO_VSO_END,          2164},
-    {P_ENCP_VIDEO_VSO_BLINE,        3},
-    {P_ENCP_VIDEO_VSO_ELINE,        5},
-    {P_ENCP_VIDEO_MAX_LNCNT,        1125 - 1},//1124},
-    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
-    {P_VENC_VDAC_DACSEL0,           0x9},
-    {P_VENC_VDAC_DACSEL1,           0xa},
-    {P_VENC_VDAC_DACSEL2,           0xb},
-    {P_VENC_VDAC_DACSEL3,           0xc},
-    {P_VENC_VDAC_DACSEL4,           0xd},
-    {P_VENC_VDAC_DACSEL5,           0xe},
-    {MREG_END_MARKER,       MREG_END_MARKER},
-};
-
-static struct reg_s enc_4k2k50hz_set[] = {
-    {P_ENCP_VIDEO_EN,              0,     },
-    {P_ENCI_VIDEO_EN,              0,     },
-    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
-    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
-    {P_ENCP_VIDEO_YFP1_HTIME,       140},
-    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840},
-    {P_ENCP_VIDEO_MAX_PXCNT,        3840+1440-1},
-    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
-    {P_ENCP_VIDEO_HSPULS_END,       44},
-    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
-    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
-    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
-    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
-    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
-    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
-    {P_ENCP_VIDEO_HAVON_END,        3987},
-    {P_ENCP_VIDEO_VAVON_BLINE,      89},
-    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
-    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
-    {P_ENCP_VIDEO_HSO_END, 		    2156+1920},
-    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920},
-    {P_ENCP_VIDEO_VSO_END, 		    2164+1920},
-    {P_ENCP_VIDEO_VSO_BLINE,        51},
-    {P_ENCP_VIDEO_VSO_ELINE,        53},
-    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
-    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
-    {P_ENCP_VIDEO_EN,              1,     },
-    {P_ENCI_VIDEO_EN,              0,     },
-    {MREG_END_MARKER,       MREG_END_MARKER},
-};
-
-static struct reg_s enc_4k2k30hz_set[] = {
-    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
-    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
-    {P_ENCP_VIDEO_YFP1_HTIME,       140},
-    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840},
-    {P_ENCP_VIDEO_MAX_PXCNT,        3840+560-1},
-    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
-    {P_ENCP_VIDEO_HSPULS_END,       44},
-    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
-    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
-    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
-    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
-    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
-
-    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
-    {P_ENCP_VIDEO_HAVON_END,        3987},
-    {P_ENCP_VIDEO_VAVON_BLINE,      89},
-    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
-
-    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
-    {P_ENCP_VIDEO_HSO_END, 		    2156+1920},
-    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920},
-    {P_ENCP_VIDEO_VSO_END, 		    2164+1920},
-
-    {P_ENCP_VIDEO_VSO_BLINE,        51},
-    {P_ENCP_VIDEO_VSO_ELINE,        53},
-    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
-
-    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
-    {MREG_END_MARKER,       MREG_END_MARKER},
-};
-
-static struct reg_s enc_4k2k5g_set[] = {
-    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
-    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
-    {P_ENCP_VIDEO_YFP1_HTIME,       140},
-    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840},
-    {P_ENCP_VIDEO_MAX_PXCNT,        3840+560-1},
-    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
-    {P_ENCP_VIDEO_HSPULS_END,       44},
-    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
-    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
-    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
-    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
-    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
-
-    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
-    {P_ENCP_VIDEO_HAVON_END,        3987},
-    {P_ENCP_VIDEO_VAVON_BLINE,      89},
-    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
-
-    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
-    {P_ENCP_VIDEO_HSO_END, 		    2156+1920},
-    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920},
-    {P_ENCP_VIDEO_VSO_END, 		    2164+1920},
-
-    {P_ENCP_VIDEO_VSO_BLINE,        51},
-    {P_ENCP_VIDEO_VSO_ELINE,        53},
-    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
-
-    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
-    {MREG_END_MARKER,       MREG_END_MARKER},
-};
-
-static struct reg_s enc_4k2k60hz_set[] = {
-    {P_ENCP_VIDEO_MODE,             0x4040}, // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
-    {P_ENCP_VIDEO_MODE_ADV,         0x0008}, // Sampling rate: 1
-    {P_ENCP_VIDEO_YFP1_HTIME,       140},
-    {P_ENCP_VIDEO_YFP2_HTIME,       140+3840},
-    {P_ENCP_VIDEO_MAX_PXCNT,        3840+560-1},
-    {P_ENCP_VIDEO_HSPULS_BEGIN,     2156+1920},
-    {P_ENCP_VIDEO_HSPULS_END,       44},
-    {P_ENCP_VIDEO_HSPULS_SWITCH,    44},
-    {P_ENCP_VIDEO_VSPULS_BEGIN,     140},
-    {P_ENCP_VIDEO_VSPULS_END,       2059+1920},
-    {P_ENCP_VIDEO_VSPULS_BLINE,     0},
-    {P_ENCP_VIDEO_VSPULS_ELINE,     4},
-
-    {P_ENCP_VIDEO_HAVON_BEGIN,      148},
-    {P_ENCP_VIDEO_HAVON_END,        3987},
-    {P_ENCP_VIDEO_VAVON_BLINE,      89},
-    {P_ENCP_VIDEO_VAVON_ELINE,      2248},
-
-    {P_ENCP_VIDEO_HSO_BEGIN,	    44},
-    {P_ENCP_VIDEO_HSO_END, 		    2156+1920},
-    {P_ENCP_VIDEO_VSO_BEGIN,	    2100+1920},
-    {P_ENCP_VIDEO_VSO_END, 		    2164+1920},
-
-    {P_ENCP_VIDEO_VSO_BLINE,        51},
-    {P_ENCP_VIDEO_VSO_ELINE,        53},
-    {P_ENCP_VIDEO_MAX_LNCNT,        2249},
-
-    {P_ENCP_VIDEO_FILT_CTRL,        0x1000}, //bypass filter
-    {MREG_END_MARKER,       MREG_END_MARKER},
-};
-
-// TODO, add other formats timing here
-static struct tvregs_set_t enc_reg_array[] = {
-    {TVMODE_1080P, &enc_1080p_set[0]},
-    {TVMODE_4K2K_30HZ, &enc_4k2k30hz_set[0]},
-    {TVMODE_1080P_50HZ, &tvregs_1080p50hz_set[0]},
-    {TVMODE_4K2K_FAKE_5G, &enc_4k2k5g_set[0]},
-    {TVMODE_4K2K_60HZ, &enc_4k2k60hz_set[0]},
-    {TVMODE_4K2K_50HZ, &enc_4k2k50hz_set[0]},
-};
-
-void config_tv_enc(tvmode_t tvmode )
-{
-    int i;
-    const struct reg_s *reg;
-
-    for(i = 0; i < sizeof(enc_reg_array) / sizeof(struct tvregs_set_t); i++) {
-        if(tvmode == enc_reg_array[i].tvmode) {
-            reg = enc_reg_array[i].reg_setting;
-            while(reg->reg != MREG_END_MARKER) {
-                aml_write_reg32(reg->reg, reg->val);
-                reg ++;
-            }
-            break;
-        }
-    }
-    if(i == sizeof(enc_reg_array) / sizeof(struct tvregs_set_t)) {
-        printk("not find output_type %d\n", tvmode);
-    }
-} /* config_tv_enc */
-
 static void power_switch_to_vpu_hdmi(int pwr_ctrl)
 {
     unsigned int i;
@@ -4239,13 +3754,14 @@ void hdmitx_csc_config (unsigned char input_color_format,
     hdmitx_wr_reg(HDMITX_DWC_CSC_SCALE,         data32);
 }   /* hdmitx_csc_config */
 
+
 static void C_Entry(HDMI_Video_Codes_t vic)
 {
-    struct hdmi_format_para * para = get_fmt_paras(vic);
+    struct hdmi_format_para * para = hdmi_get_fmt_paras(vic);
     struct hdmi_cea_timing * t = NULL;
 
     if(para == NULL) {
-        printk("error at %s[%d]\n", __func__, __LINE__);
+        printk("error at %s[%d] vic = %d\n", __func__, __LINE__, vic);
         return;
     }
     printk("%s[%d] set VIC = %d\n", __func__, __LINE__, para->vic);
@@ -4256,28 +3772,6 @@ static void C_Entry(HDMI_Video_Codes_t vic)
     // --------------------------------------------------------
     printk("Configure VENC\n");
 
-    switch (vic) {
-        case HDMI_1920x1080p60_16x9: // 1920x1080p@59.94/60Hz
-            //                      viu1_sel    viu2_sel    enable)
-            config_tv_enc(TVMODE_1080P);
-            break;
-        case HDMI_1920x1080p50_16x9:
-            //                      viu1_sel    viu2_sel    enable)
-            config_tv_enc(TVMODE_1080P_50HZ);
-            break;
-        case HDMI_3840x2160p50_16x9:
-            config_tv_enc(TVMODE_4K2K_50HZ);
-            break;
-        case HDMI_3840x2160p30_16x9:
-        case HDMI_3840x2160p60_16x9:
-            config_tv_enc(TVMODE_4K2K_30HZ);
-            break;
-        default :
-            printk("Error: Unkown HDMI Video Identification Code (VIC)!\n");
-            break;
-    }
-//    aml_set_reg32_bits(P_VPU_VIU_VENC_MUX_CTRL, 2, 0, 2); // [1:0] cntl_viu1_sel_venc: 0=ENCL, 1=ENCI, 2=ENCP, 3=ENCT.
-
     // --------------------------------------------------------
     // Configure video format timing for HDMI:
     // Based on the corresponding settings in set_tv_enc.c, calculate
diff --git a/drivers/amlogic/hdmi/hdmi_common/hdmi_parameters.c b/drivers/amlogic/hdmi/hdmi_common/hdmi_parameters.c
index aa80412ebb97..1d682b8afde2 100644
--- a/drivers/amlogic/hdmi/hdmi_common/hdmi_parameters.c
+++ b/drivers/amlogic/hdmi/hdmi_common/hdmi_parameters.c
@@ -291,9 +291,9 @@ static struct hdmi_format_para fmt_para_1920x1080i60_16x9 = {
         .h_front = 88,
         .h_sync = 44,
         .h_back = 148,
-        .v_active = 1080,
+        .v_active = 1080/2,
         .v_total = 1125,
-        .v_blank = 45,
+        .v_blank = 45/2,
         .v_front = 2,
         .v_sync = 5,
         .v_back = 15,
@@ -321,9 +321,9 @@ static struct hdmi_format_para fmt_para_1920x1080i50_16x9 = {
         .h_front = 528,
         .h_sync = 44,
         .h_back = 148,
-        .v_active = 1080,
+        .v_active = 1080/2,
         .v_total = 1125,
-        .v_blank = 45,
+        .v_blank = 45/2,
         .v_front = 2,
         .v_sync = 5,
         .v_back = 15,
@@ -441,9 +441,9 @@ static struct hdmi_format_para fmt_para_720x480i60_16x9 = {
         .h_front = 38,
         .h_sync = 124,
         .h_back = 114,
-        .v_active = 480,
+        .v_active = 480/2,
         .v_total = 525,
-        .v_blank = 45,
+        .v_blank = 45/2,
         .v_front = 4,
         .v_sync = 3,
         .v_back = 15,
@@ -501,9 +501,9 @@ static struct hdmi_format_para fmt_para_720x576i50_16x9 = {
         .h_front = 24,
         .h_sync = 126,
         .h_back = 138,
-        .v_active = 576,
+        .v_active = 576/2,
         .v_total = 625,
-        .v_blank = 49,
+        .v_blank = 49/2,
         .v_front = 2,
         .v_sync = 3,
         .v_back = 19,
diff --git a/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c b/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c
index 17994b4a6989..721e32f2c082 100644
--- a/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c
+++ b/drivers/amlogic/hdmi/hdmi_tx_2/hdmi_tx_main.c
@@ -1469,7 +1469,7 @@ static int amhdmitx_probe(struct platform_device *pdev)
 #ifdef CONFIG_AM_TV_OUTPUT2
     vout2_register_client(&hdmitx_notifier_nb_v2);
 #endif
-//    aout_register_client(&hdmitx_notifier_nb_a);
+    aout_register_client(&hdmitx_notifier_nb_a);
 
 #ifdef CONFIG_USE_OF
     if(pdev->dev.of_node){
@@ -1571,7 +1571,7 @@ static int amhdmitx_remove(struct platform_device *pdev)
 #ifdef CONFIG_AM_TV_OUTPUT2
     vout2_unregister_client(&hdmitx_notifier_nb_v2);
 #endif
-//    aout_unregister_client(&hdmitx_notifier_nb_a);
+    aout_unregister_client(&hdmitx_notifier_nb_a);
 
     /* Remove the cdev */
     device_remove_file(hdmitx_dev, &dev_attr_disp_mode);
-- 
2.19.0

