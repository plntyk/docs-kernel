From 4ff2526f1ee340e4c7c2ec293b995bce6ae9f3d6 Mon Sep 17 00:00:00 2001
From: rainzhang <rain.zhang@amlogic.com>
Date: Thu, 15 Jan 2015 16:33:46 +0800
Subject: [PATCH 5333/5965] PD#100111:h265, fix problem, decoder read wrong dat

Conflicts:
	drivers/amlogic/amports/vh265.c

Change-Id: I365177ef512277f23683dc1f93692e0c2e60b3f8
---
 .../amlogic/amports/m8/ucode/h265/vh265_mc.c  | 711 ++++++++-------
 drivers/amlogic/amports/vh265.c               | 852 +++++++++++++-----
 2 files changed, 993 insertions(+), 570 deletions(-)

diff --git a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
index cc1225cf5832..266cb197f508 100755
--- a/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
+++ b/drivers/amlogic/amports/m8/ucode/h265/vh265_mc.c
@@ -21,76 +21,80 @@
 
 #include <linux/types.h>
 //project_dos revision 3000
+//ucode commit 1aa473ad03f418f496ed6e15fd80902ac0c30199
+//    h265, fix bug 101914, pps parser error
+
 //#undef SEND_PARAM_WITH_REG
+const u32 h265_ucode_v = 3;
 const u32 vh265_mc[] __attribute__((aligned(8))) = {
 	0x6810001,0x6800000,0xd000001,0x7400040,0xc000900,0x0000000,0x6bffe40,0x7c00000,
-	0x6030400,0x0400000,0x800c0ff,0xc030640,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x6030400,0x0400000,0x800c0ff,0xc030780,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0xc7ffd80,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0xc7a3f00,0x0000000,0xc79ec00,0x6412108,0xc780900,0x0000000,0xcc00000,0x0400000,
+	0xc7a4040,0x0000000,0xc79ed40,0x6412108,0xc780900,0x0000000,0xcc00000,0x0400000,
 	0x800c000,0x8002515,0x8002608,0x6bfbb80,0x6ffbfc0,0x6070500,0x6070600,0x6070700,
 	0x6803fc0,0x7c00140,0x7c007c0,0x7c015c0,0x640d000,0x7c03500,0x640d200,0x7c03480,
 	0x640c108,0x6035108,0x6800408,0x6035208,0x6a04008,0x6035008,0x6435008,0x580f208,
 	0xbef8048,0x0000000,0x6435308,0x900c208,0xa6f8008,0x0000000,0xcc00000,0x0000000,
-	0x6bfff88,0x6030408,0x0400000,0x640c008,0xa6181c8,0x0000000,0xc02d4c0,0x0000000,
-	0xc79dc00,0x800c0ff,0xaa0c048,0xc781cc0,0x0000000,0x6410c08,0x8010e90,0x9326208,
-	0xaa0c808,0xc79d9c0,0x800c0fe,0x78034c8,0x9808008,0x7c034c8,0x6410c08,0x8010e90,
+	0x6bfff88,0x6030408,0x0400000,0x640c008,0xa6181c8,0x0000000,0xc02d600,0x0000000,
+	0xc79dd40,0x800c0ff,0xaa0c048,0xc781cc0,0x0000000,0x6410c08,0x8010e90,0x9326208,
+	0xaa0c808,0xc79db00,0x800c0fe,0x78034c8,0x9808008,0x7c034c8,0x6410c08,0x8010e90,
 	0x9384288,0x9223248,0x7c00189,0x9201248,0x7c001c9,0x8010e90,0x7800148,0xa805288,
-	0x7c0010a,0xaa0ffc8,0xc025680,0x5407308,0x780010a,0x7c0014a,0x6410c08,0x8010e88,
+	0x7c0010a,0xaa0ffc8,0xc0257c0,0x5407308,0x780010a,0x7c0014a,0x6410c08,0x8010e88,
 	0x9305248,0x7c00209,0x6410c08,0x8010e90,0x9210248,0x7c00249,0x6410c08,0x8010e90,
 	0x9210248,0x7c00289,0x6410c08,0x8010e84,0x8010e90,0x8010e90,0x8010e8c,0x6410c08,
 	0x8010e88,0x9308248,0x7c002c9,0x780018b,0xaa3800b,0x0000000,0x6410c0a,0x8010e90,
 	0xaa2800b,0x93e124a,0xaa08009,0xc780000,0x93c124a,0xaa08009,0xc780000,0x540228a,
 	0xc7ffe00,0x44012cb,0x6410c08,0x8010e81,0x93e1248,0x780018b,0xa60c009,0x680000a,
-	0x780018a,0xac0a2ca,0x0000000,0xc01ca40,0x6800309,0xc01c9c0,0x6800409,0xc01c940,
+	0x780018a,0xac0a2ca,0x0000000,0xc01cb80,0x6800309,0xc01cb00,0x6800409,0xc01ca80,
 	0x6800509,0xc7ffe00,0x400128a,0x8010e86,0x6806008,0x6010e08,0x6410f08,0xbefc0c8,
 	0x9118208,0xaa08008,0xc780000,0x6410c08,0x8010e81,0x93e1248,0xaa38009,0x8010e90,
-	0x8010e90,0x8010e90,0x8010e90,0x6410c08,0x8010e81,0x93e1248,0xaa0c009,0xc01c340,
-	0x6800049,0xc01c2c0,0x6800049,0xaa04008,0x8010e81,0x7800148,0xaa0ffc8,0xc024140,
-	0x5407308,0x6800067,0xc02ee00,0x0000000,0xc79bf00,0x800c0ff,0xaa0c088,0xc78bb00,
-	0x0000000,0x6410c08,0x8010e90,0x9326208,0xaa0c848,0xc79bcc0,0x800c0fe,0x78034c8,
+	0x8010e90,0x8010e90,0x8010e90,0x6410c08,0x8010e81,0x93e1248,0xaa0c009,0xc01c480,
+	0x6800049,0xc01c400,0x6800049,0xaa04008,0x8010e81,0x7800148,0xaa0ffc8,0xc024280,
+	0x5407308,0x6800067,0xc02f300,0x0000000,0xc79c040,0x800c0ff,0xaa0c088,0xc78bc40,
+	0x0000000,0x6410c08,0x8010e90,0x9326208,0xaa0c848,0xc79be00,0x800c0fe,0x78034c8,
 	0x9808048,0x7c034c8,0x6410c08,0x8010e88,0x9384288,0x7c0060a,0x9323248,0x7c00649,
-	0x9301248,0x7c00689,0x7800148,0xa808288,0x7c0010a,0xc0239c0,0x5407308,0x780010a,
-	0x7c0014a,0xc024540,0x540730a,0x6410c08,0x8010e88,0x9305248,0x7c006c9,0x6410c08,
+	0x9301248,0x7c00689,0x7800148,0xa808288,0x7c0010a,0xc023b00,0x5407308,0x780010a,
+	0x7c0014a,0xc024680,0x540730a,0x6410c08,0x8010e88,0x9305248,0x7c006c9,0x6410c08,
 	0x8010e90,0x9210248,0x7c00709,0x6410c08,0x8010e90,0x9210248,0x7c00749,0x6410c08,
 	0x8010e84,0x8010e90,0x8010e90,0x8010e8c,0x6410c08,0x8010e88,0x9308248,0x7c00789,
 	0x780064b,0xaa3800b,0x0000000,0x6410c0a,0x8010e90,0xaa2800b,0x93e124a,0xaa08009,
-	0xc780000,0x93c124a,0xaa08009,0xc780000,0x540228a,0xc7ffe00,0x44012cb,0xc01af40,
-	0x6800049,0x78007c9,0xa805209,0x7c00108,0xaa0ffc9,0xc023400,0x5407309,0x7800108,
-	0x7c007c8,0xc01acc0,0x6800809,0xc01ac40,0x6800849,0xc01abc0,0x6800889,0x7800848,
-	0x7800889,0x9610209,0x6012308,0x6410c08,0x8010e81,0x93e1248,0xaa24009,0xc01a940,
-	0x6800049,0xc01a8c0,0x6800049,0xc01a840,0x6800049,0xc01a7c0,0x6800049,0xc01a740,
-	0x68008c9,0xc01a6c0,0x6800909,0xc01a640,0x6800949,0x6410c08,0x8010e81,0x93e1248,
-	0x780064b,0xa60c009,0x680000a,0x780064a,0xac0a2ca,0x0000000,0xc01a380,0x6800989,
-	0xc01a300,0x6800a89,0xc01a280,0x6800b89,0xc7ffe00,0x400128a,0xc01a180,0x6800c89,
-	0x7800c89,0x7c00d09,0xc01a080,0x6800cc9,0x7800c89,0x7800cc8,0x2009209,0x7c00d49,
+	0xc780000,0x93c124a,0xaa08009,0xc780000,0x540228a,0xc7ffe00,0x44012cb,0xc01b080,
+	0x6800049,0x78007c9,0xa805209,0x7c00108,0xaa0ffc9,0xc023540,0x5407309,0x7800108,
+	0x7c007c8,0xc01ae00,0x6800809,0xc01ad80,0x6800849,0xc01ad00,0x6800889,0x7800848,
+	0x7800889,0x9610209,0x6012308,0x6410c08,0x8010e81,0x93e1248,0xaa24009,0xc01aa80,
+	0x6800049,0xc01aa00,0x6800049,0xc01a980,0x6800049,0xc01a900,0x6800049,0xc01a880,
+	0x68008c9,0xc01a800,0x6800909,0xc01a780,0x6800949,0x6410c08,0x8010e81,0x93e1248,
+	0x780064b,0xa60c009,0x680000a,0x780064a,0xac0a2ca,0x0000000,0xc01a4c0,0x6800989,
+	0xc01a440,0x6800a89,0xc01a3c0,0x6800b89,0xc7ffe00,0x400128a,0xc01a2c0,0x6800c89,
+	0x7800c89,0x7c00d09,0xc01a1c0,0x6800cc9,0x7800c89,0x7800cc8,0x2009209,0x7c00d49,
 	0x7800d48,0xa6300c8,0x7800849,0x403f249,0x5806249,0x7c00e09,0x7800889,0x403f249,
-	0x5806249,0x7c00e49,0x8040640,0xc780900,0x6822d20,0xa630088,0x7800849,0x401f249,
+	0x5806249,0x7c00e49,0x8040640,0xc780900,0x6822e60,0xa630088,0x7800849,0x401f249,
 	0x5805249,0x7c00e09,0x7800889,0x401f249,0x5805249,0x7c00e49,0x8040620,0xc780600,
-	0x68232a0,0xa630048,0x7800849,0x400f249,0x5804249,0x7c00e09,0x7800889,0x400f249,
-	0x5804249,0x7c00e49,0x8040610,0xc780300,0x6823ae0,0x7800849,0x4007249,0x5803249,
-	0x7c00e09,0x7800889,0x4007249,0x5803249,0x7c00e49,0x8040608,0x6824620,0x7800e08,
+	0x68233e0,0xa630048,0x7800849,0x400f249,0x5804249,0x7c00e09,0x7800889,0x400f249,
+	0x5804249,0x7c00e49,0x8040610,0xc780300,0x6823c20,0x7800849,0x4007249,0x5803249,
+	0x7c00e09,0x7800889,0x4007249,0x5803249,0x7c00e49,0x8040608,0x6824760,0x7800e08,
 	0x7800e49,0xe000248,0x0000000,0x0000000,0x6800009,0xf000200,0x4401208,0xaa10008,
 	0x5801208,0xc7fff80,0x4001249,0x7c01449,0x7800849,0x780088a,0x960f24a,0x6040209,
-	0x7800e09,0x7800e4a,0x960c24a,0x6040309,0x8040400,0xc018dc0,0x6800049,0x7800049,
-	0x7c00d89,0xc018cc0,0x6800089,0x7800049,0x7800088,0x2009209,0x7c00dc9,0xc018b40,
-	0x6800ec9,0xc018ac0,0x6800f09,0x6410c08,0x8010e81,0x93e1248,0xaa38009,0x7c00f49,
+	0x7800e09,0x7800e4a,0x960c24a,0x6040309,0x8040400,0xc018f00,0x6800049,0x7800049,
+	0x7c00d89,0xc018e00,0x6800089,0x7800049,0x7800088,0x2009209,0x7c00dc9,0xc018c80,
+	0x6800ec9,0xc018c00,0x6800f09,0x6410c08,0x8010e81,0x93e1248,0xaa38009,0x7c00f49,
 	0x6410c08,0x8010e81,0x93e1248,0xaa0c009,0xc001b40,0x0000000,0x78007c8,0xaa0c008,
-	0x68f000c,0x69f000c,0xc0226c0,0x0000000,0x6410c08,0x8010e83,0x93e1248,0x7c00f89,
+	0x68f000c,0x69f000c,0xc022800,0x0000000,0x6410c08,0x8010e83,0x93e1248,0x7c00f89,
 	0x93c1248,0x7c00fc9,0x93a1248,0xaa58009,0x6800009,0x6410c08,0x8010e88,0x9384248,
-	0x4001249,0x7c01049,0x9304248,0x4001249,0x7c01089,0xc0181c0,0x68010c9,0xc018140,
+	0x4001249,0x7c01049,0x9304248,0x4001249,0x7c01089,0xc018300,0x68010c9,0xc018280,
 	0x6801109,0x78010c9,0x2008248,0x7c01108,0x6410c08,0x8010e81,0x93e1248,0x7c01149,
-	0x6800049,0x7c01009,0xc017e80,0x6801189,0x680000e,0x780118f,0x44013cf,0xaa1000f,
+	0x6800049,0x7c01009,0xc017fc0,0x6801189,0x680000e,0x780118f,0x44013cf,0xaa1000f,
 	0x58013cf,0xc7fff80,0x400138e,0x7c011ce,0x780118f,0x680000e,0xb4143ce,0x0000000,
 	0x480f20e,0x5404208,0x680800d,0x200d20d,0xc002a00,0x0000000,0x480f20e,0xaa1c3c8,
 	0x0000000,0x400120e,0xb4043c8,0x0000000,0xc780100,0x0000000,0xc004a80,0x0000000,
-	0xc7ffb80,0x400138e,0x6410c08,0x8010e81,0x93e1248,0x7c01209,0xaa28009,0xc017540,
+	0xc7ffb80,0x400138e,0x6410c08,0x8010e81,0x93e1248,0x7c01209,0xaa28009,0xc017680,
 	0x6801249,0xaa1c008,0x6410c08,0x8010e89,0x9308248,0x92e1248,0xc7ffec0,0x4401208,
 	0x6410c08,0x8010e83,0x93e1248,0x7c01289,0x93c1248,0x7c012c9,0x93a1248,0x6800008,
 	0x7c014c8,0x7c01508,0x7c01548,0x7c01588,0xaa0c009,0xc004c40,0x0000000,0x8010e81,
-	0x78007c8,0xaa0ffc8,0xc01f4c0,0x5407308,0x68000a7,0xc029b40,0x0000000,0xc796c40,
+	0x78007c8,0xaa0ffc8,0xc01f600,0x5407308,0x68000a7,0xc02a040,0x0000000,0xc796d80,
 	0x800c0ff,0x68c8408,0x6c41508,0x6070508,0x6070608,0x6070708,0x680000b,0x680000a,
-	0x6410c08,0x8010e81,0x93e1248,0xaa08009,0xc780f00,0xc0169c0,0x6800049,0xaa140cb,
+	0x6410c08,0x8010e81,0x93e1248,0xaa08009,0xc780f00,0xc016b00,0x6800049,0xaa140cb,
 	0x400e3ca,0xba0c0ca,0x680038f,0x68003cf,0xa60c00b,0xc780180,0x647050d,0xa60c04b,
 	0xc7800c0,0x647060d,0x647070d,0xaa38008,0x400038f,0xaa300cb,0x680000e,0x240f20a,
 	0xaa2410f,0x920438d,0xaa1c0cf,0x918438d,0xaa1408f,0x910438d,0xaa0c04f,0x908438d,
@@ -98,15 +102,15 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 	0xaa1c00a,0xaa2004a,0xaa2408a,0xaa280ca,0xaa2c10a,0xc7802c0,0x968434e,0xc780240,
 	0x940434e,0xc7801c0,0x948434e,0xc780140,0x950434e,0xc7800c0,0x958434e,0x960434e,
 	0xaa1000b,0xaa1404b,0xc7809c0,0x607070d,0xc780940,0x607050d,0xc7808c0,0x607060d,
-	0xba2c08b,0x680020c,0xc015c40,0x6800049,0x4008308,0xaa0c08b,0x680f808,0x680f988,
+	0xba2c08b,0x680020c,0xc015d80,0x6800049,0x4008308,0xaa0c08b,0x680f808,0x680f988,
 	0x2008288,0x6070208,0x607040c,0xaa1c00b,0x680e008,0xaa1404b,0x6800008,0xaa0c08b,
 	0x6806008,0x680c008,0x680040e,0xaa1000b,0x540424a,0x680100e,0x540624a,0x2008248,
-	0x6070208,0x680004d,0xc015640,0x6800049,0x200c20c,0x48ff30c,0x607040c,0xb8fb38d,
+	0x6070208,0x680004d,0xc015780,0x6800049,0x200c20c,0x48ff30c,0x607040c,0xb8fb38d,
 	0x400134d,0xba0c0cb,0x6800149,0x6800049,0xb40324a,0xc7fe6c0,0x400128a,0xb60c0cb,
 	0xc7fe5c0,0x40012cb,0xcc00000,0x0000000,0xaa1400e,0x6800009,0x6410c08,0x8010e81,
-	0x93e1248,0xa608009,0xc781540,0x7801189,0xa40624e,0x440144e,0xc014d80,0x6800049,
+	0x93e1248,0xa608009,0xc781540,0x7801189,0xa40624e,0x440144e,0xc014ec0,0x6800049,
 	0xc002500,0x2411211,0x480f451,0x5404451,0x6808008,0x2011211,0x6800010,0x6800012,
-	0x6410c08,0x8010e81,0x93e1288,0xc014a40,0x6800049,0xaa1000a,0x40014c8,0x6800009,
+	0x6410c08,0x8010e81,0x93e1288,0xc014b80,0x6800049,0xaa1000a,0x40014c8,0x6800009,
 	0x24134c9,0xb60c412,0x6a0000b,0x700044b,0x4001451,0x4001492,0x200c2d3,0x91e12cb,
 	0x900e30c,0x6410c08,0x8010e81,0x93e1288,0x95c130a,0xa62000a,0x6410c08,0x8010e81,
 	0x93e1288,0xa61000a,0xa62400b,0xc7ffb80,0x0000000,0x740034c,0x400134d,0x4001410,
@@ -114,11 +118,11 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 	0x440134d,0x7000351,0x900e451,0x91a1491,0x6900013,0xaa0c012,0x2012453,0x2412453,
 	0x680004c,0xb41240c,0x241130d,0x7000451,0x900e451,0x91a12d1,0x6900013,0xaa0c00b,
 	0x200b453,0x240b453,0xb4072d2,0x241130d,0x400048b,0x700044b,0x7000353,0x740034b,
-	0x7400453,0xc7ffc00,0x400130c,0xc7ff8c0,0x4401410,0xcc00000,0x0000000,0xc013940,
-	0x6800049,0xc0138c0,0x6800089,0x6800010,0x680000a,0x680000b,0x780004c,0xb41130b,
-	0xc013700,0x68000c9,0x240a20a,0x440128a,0x6410c08,0x8010e81,0x93e1248,0x900e20a,
+	0x7400453,0xc7ffc00,0x400130c,0xc7ff8c0,0x4401410,0xcc00000,0x0000000,0xc013a80,
+	0x6800049,0xc013a00,0x6800089,0x6800010,0x680000a,0x680000b,0x780004c,0xb41130b,
+	0xc013840,0x68000c9,0x240a20a,0x440128a,0x6410c08,0x8010e81,0x93e1248,0x900e20a,
 	0x95c1209,0x7400348,0x400134d,0x4001410,0xbacc410,0x40012cb,0xcc00000,0x0000000,
-	0x680000a,0x680000b,0x780008c,0xb41130b,0xc013200,0x68000c9,0x200a20a,0x400128a,
+	0x680000a,0x680000b,0x780008c,0xb41130b,0xc013340,0x68000c9,0x200a20a,0x400128a,
 	0x6410c08,0x8010e81,0x93e1248,0x900e20a,0x95c1209,0x7400348,0x400134d,0x4001410,
 	0xbacc410,0x40012cb,0xcc00000,0x0000000,0x6a00008,0x7400348,0xcc00000,0x0000000,
 	0x580424e,0x7c01489,0x5409249,0x640c208,0x2008248,0x6035108,0x6808008,0x6035208,
@@ -127,310 +131,333 @@ const u32 vh265_mc[] __attribute__((aligned(8))) = {
 	0x5409249,0x640c208,0x2008248,0x6035108,0x6808008,0x6035208,0x6b08008,0x6035008,
 	0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x6410c08,0x8010e81,
 	0x93e1248,0xaa1c009,0x0000000,0x6410c08,0x8010e88,0x9301248,0x7c01309,0xaa03fc9,
-	0x6410c08,0x8010e81,0x93e1248,0xaa08009,0xc780000,0x6410c08,0x8010e81,0x93e1248,
-	0xaa24009,0x6410c08,0x8010e85,0x9361248,0xaa14009,0x0000000,0x8010e88,0x0000000,
-	0x8010e90,0x6410c08,0x8010e81,0x93e1248,0xaa14009,0xc011bc0,0x6800089,0xc011b40,
-	0x6800089,0x6410c08,0x8010e84,0x93e1248,0x93c1248,0x93a1248,0x9381248,0xaa38009,
-	0x6410c08,0x9118208,0xa60c008,0xcc00000,0x0000000,0xc0117c0,0x6801349,0xc011740,
-	0x6801389,0xc0116c0,0x68013c9,0xc011640,0x6801409,0x6410c08,0x8010e81,0x93e1248,
-	0xaa7c009,0x6410c08,0x8010e90,0x9210248,0x7c014c9,0x6410c08,0x8010e90,0x9210248,
-	0x7c01509,0x6410c08,0x8010e90,0x9210248,0x7c01549,0x6410c08,0x8010e90,0x9210248,
-	0x7c01589,0x6410c08,0x8010e81,0x93e1248,0xaa10009,0xc010fc0,0x6800049,0x4001208,
-	0x6410c08,0x8010e81,0x93e1248,0xaa10009,0x680004a,0xc000100,0x780064b,0xcc00000,
-	0x0000000,0xa60c00a,0xc7807c0,0x0000000,0x6410c08,0x8010e82,0x93c2248,0xaaec009,
-	0x6410c08,0x8010e81,0x93e1308,0xaa2400c,0x6410c08,0x8010e88,0x9308248,0x6410c08,
-	0x8010e8b,0x9365248,0x9341248,0x92a5248,0x6410c08,0x8010e88,0x9384248,0x9304248,
-	0xaa1000c,0x6410c08,0x8010e84,0x9384248,0x6410c08,0x8010e8f,0x9365248,0x92c5248,
-	0x9225248,0xcc00000,0x0000000,0xaa0c0c8,0xc783240,0x0000000,0x6410c08,0x8010e90,
-	0x9326208,0xaa0c888,0xc790180,0x800c0fe,0x78034c8,0x9808088,0x7c034c8,0xc010140,
-	0x6800049,0x78015c9,0xa805209,0x7c00108,0xaa0ffc9,0xc0196c0,0x5407309,0x7800108,
-	0x7c015c8,0xc00fec0,0x6801609,0x78007ca,0xa806288,0x7c00108,0x780010a,0x7c007ca,
-	0xc018ec0,0x540730a,0x780060a,0x7800148,0xa804288,0x7c0014a,0xc018800,0x540730a,
-	0x6410c08,0x8010e87,0x93e1248,0x7c01649,0x93c1248,0x7c01689,0x9363248,0x7c016c9,
-	0x9341248,0x7c01709,0x9321248,0x7c01749,0xc00f800,0x6801789,0x4001208,0x7c01788,
-	0xc00f700,0x68017c9,0x4001208,0x7c017c8,0xc00f7c0,0x6801809,0x401a208,0x7c01808,
-	0x6410c08,0x8010e83,0x93e1248,0x7c01849,0x93c1248,0x7c01889,0x93a1248,0x7c018c9,
-	0xaa10009,0x6800008,0xc00f280,0x6801909,0x7c01908,0xc00f380,0x6801949,0xc00f300,
-	0x6801989,0x6410c08,0x8010e86,0x93e1248,0x7c019c9,0x93c1248,0x7c01a09,0x93a1248,
-	0x7c01a49,0x9381248,0x7c01a89,0x9361248,0x7c01ac9,0x9341248,0x7c01e09,0xaa0c009,
-	0xc014440,0x0000000,0x6800048,0x7c01dc8,0x7801ac8,0xa608008,0xc780a80,0xc00eb40,
-	0x6801b49,0x7800e08,0x7c01bc8,0xc00ea40,0x6801b89,0x7800e48,0x7c01cc8,0x6410c08,
-	0x8010e81,0x93e1248,0x7c01b09,0xaa14009,0xc014780,0x0000000,0xc780580,0x0000000,
-	0x7801b4b,0xae0010b,0x680000a,0xb4072ca,0xc00e600,0x406f24a,0x4001208,0x7400248,
-	0xc7ffec0,0x400128a,0x7801b8b,0xae0010b,0x680000a,0xb4072ca,0xc00e380,0x407324a,
-	0x4001208,0x7400248,0xc7ffec0,0x400128a,0x6410c08,0x8010e81,0x93e1248,0x7c01dc9,
-	0x6410c08,0x8010e82,0x93e1248,0x7c01e49,0x93c1248,0xa618009,0x7c01e89,0x7c01ec9,
-	0x7c01f09,0xc780340,0x7c01f49,0x6410c08,0x8010e82,0x93e1248,0x7c01e89,0x93c1248,
-	0xa618009,0x7c01ec9,0xc00de40,0x6801f09,0xc00ddc0,0x6801f49,0x6410c08,0x8010e81,
-	0x93e1248,0xa628009,0x7800f48,0xaa28008,0x7801608,0xaa0c008,0x68f000c,0x69f000c,
-	0xc018cc0,0x0000000,0xc7800c0,0xc076b80,0x0000000,0x6410c08,0x8010e81,0x93e1248,
-	0x7c01f89,0xc00d6c0,0x6801fc9,0x4002208,0x7c01fc8,0x6410c08,0x8010e81,0x93e1248,
-	0x7c02009,0x8010e81,0xc019300,0x0000000,0x78015c8,0xaa0ffc8,0xc016a80,0x5407308,
-	0x68000e7,0xc020040,0x78015e8,0xc78d140,0x800c0ff,0xaa0c108,0xc7876c0,0x0000000,
-	0x69fff89,0x640d408,0x9010208,0xa8fe248,0x0000000,0x6410c08,0x8010e90,0x9326208,
-	0xb210548,0x7c02048,0xc78cd80,0x800c0fe,0x6410c08,0x8010e81,0x93e1248,0x7c02089,
-	0x7802048,0xba1c408,0x6800009,0xae14548,0x6800009,0x6410c08,0x8010e81,0x93e1248,
-	0x7c020c9,0xc00cac0,0x6800049,0x78015c9,0xa815248,0x7c00108,0xa633fc9,0x0000000,
-	0xc015580,0x680000c,0xc015a40,0x680000c,0xc017bc0,0x0000000,0x680000c,0x7c00e8c,
-	0xc01fac0,0x0000000,0x7800108,0x7c015c8,0xc017100,0x5407308,0x68004e7,0xc01f2c0,
-	0x0000000,0x7801608,0x78007c9,0xa809248,0x7c00108,0x7800109,0x7c007c9,0xc015500,
-	0x5407309,0x68004a7,0xc01f000,0x0000000,0x780060a,0x7800148,0xa807288,0x7c0014a,
-	0xc014d80,0x540730a,0x6800467,0xc01edc0,0x0000000,0x7802088,0x6800009,0xaa10008,
-	0x7c02149,0xc780440,0x7c02109,0x7801648,0xaa14008,0x6800009,0x6410c08,0x8010e81,
-	0x93e1248,0x7c02149,0x7801449,0x6410c08,0x680080a,0x240a24a,0x98091c9,0x6010e09,
-	0x3808288,0x7c02108,0x7802148,0xaa0c008,0xc784d00,0x0000000,0xc01bb80,0x0000000,
-	0x78016c8,0xaa0c008,0x98081c8,0x6010e08,0xc00b800,0x6802189,0x7801688,0xaa14008,
-	0x6800049,0x6410c08,0x8010e81,0x93e1248,0x7c021c9,0x7802049,0xaa084c9,0xa610509,
-	0x6800008,0xc7818c0,0x7c02208,0x6410c08,0x7800949,0x4004249,0x680080a,0x240a24a,
-	0x98091c9,0x6010e09,0x3808288,0x7c02208,0x6410c08,0x8010e81,0x93e1248,0xa614009,
-	0x680400d,0xc0760c0,0x780118e,0xc780600,0x78011c9,0x6410c08,0x68007ca,0x240a24a,
-	0x98091c9,0x6010e09,0x3808288,0x5801208,0x7c02248,0xc0785c0,0x4000448,0x480f211,
-	0x5404208,0x6808009,0x2009209,0x680400d,0x6800008,0x700024a,0x740034a,0x400134d,
-	0x4001208,0xbaf0408,0x4001249,0x7801208,0xa608008,0xc780b80,0x780124a,0xaa1400a,
-	0x680000b,0xc00a8c0,0x6800049,0x40002c8,0xc00a800,0x6800049,0x200c20b,0xa60800c,
-	0xc7808c0,0xac0f2cc,0x7801248,0xba60048,0x7801248,0xb21c088,0x6802049,0xb214108,
-	0x6802089,0xb20c208,0x68020c9,0x6802109,0x6410c08,0x6010e09,0xc780340,0x0000000,
+	0x6410c08,0x8010e81,0x93e1248,0xaa0c009,0x93c1248,0x8010e81,0x6410c08,0x8010e81,
+	0x93e1248,0xaa24009,0x6410c08,0x8010e85,0x9361248,0xaa14009,0x0000000,0x8010e88,
+	0x0000000,0x8010e90,0x6410c08,0x8010e81,0x93e1248,0xaa14009,0xc011cc0,0x6800089,
+	0xc011c40,0x6800089,0x6410c08,0x8010e84,0x93e1248,0x93c1248,0x93a1248,0x9381248,
+	0xaa38009,0x6410c08,0x9118208,0xa60c008,0xcc00000,0x0000000,0xc0118c0,0x6801349,
+	0xc011840,0x6801389,0xc0117c0,0x68013c9,0xc011740,0x6801409,0x6410c08,0x8010e81,
+	0x93e1248,0xaa10009,0x6410c08,0x9018208,0xa608008,0xc7807c0,0x6410c08,0x8010e90,
+	0x9210248,0x7c014c9,0x6410c08,0x8010e90,0x9210248,0x7c01509,0x6410c08,0x8010e90,
+	0x9210248,0x7c01549,0x6410c08,0x8010e90,0x9210248,0x7c01589,0x6410c08,0x8010e81,
+	0x93e1248,0xaa10009,0xc010fc0,0x6800049,0x4001208,0x6410c08,0x8010e81,0x93e1248,
+	0xaa10009,0x680004a,0xc000100,0x780064b,0xcc00000,0x0000000,0xa60c00a,0xc7807c0,
+	0x0000000,0x6410c08,0x8010e82,0x93c2248,0xaaec009,0x6410c08,0x8010e81,0x93e1308,
+	0xaa2400c,0x6410c08,0x8010e88,0x9308248,0x6410c08,0x8010e8b,0x9365248,0x9341248,
+	0x92a5248,0x6410c08,0x8010e88,0x9384248,0x9304248,0xaa1000c,0x6410c08,0x8010e84,
+	0x9384248,0x6410c08,0x8010e8f,0x9365248,0x92c5248,0x9225248,0xcc00000,0x0000000,
+	0xaa0c0c8,0xc783240,0x0000000,0x6410c08,0x8010e90,0x9326208,0xaa0c888,0xc790180,
+	0x800c0fe,0x78034c8,0x9808088,0x7c034c8,0xc010140,0x6800049,0x78015c9,0xa805209,
+	0x7c00108,0xaa0ffc9,0xc0196c0,0x5407309,0x7800108,0x7c015c8,0xc00fec0,0x6801609,
+	0x78007ca,0xa806288,0x7c00108,0x780010a,0x7c007ca,0xc018ec0,0x540730a,0x780060a,
+	0x7800148,0xa804288,0x7c0014a,0xc018800,0x540730a,0x6410c08,0x8010e87,0x93e1248,
+	0x7c01649,0x93c1248,0x7c01689,0x9363248,0x7c016c9,0x9341248,0x7c01709,0x9321248,
+	0x7c01749,0xc00f800,0x6801789,0x4001208,0x7c01788,0xc00f700,0x68017c9,0x4001208,
+	0x7c017c8,0xc00f7c0,0x6801809,0x401a208,0x7c01808,0x6410c08,0x8010e83,0x93e1248,
+	0x7c01849,0x93c1248,0x7c01889,0x93a1248,0x7c018c9,0xaa10009,0x6800008,0xc00f280,
+	0x6801909,0x7c01908,0xc00f380,0x6801949,0xc00f300,0x6801989,0x6410c08,0x8010e86,
+	0x93e1248,0x7c019c9,0x93c1248,0x7c01a09,0x93a1248,0x7c01a49,0x9381248,0x7c01a89,
+	0x9361248,0x7c01ac9,0x9341248,0x7c01e09,0xaa0c009,0xc014440,0x0000000,0x6800048,
+	0x7c01dc8,0x7801ac8,0xa608008,0xc780a80,0xc00eb40,0x6801b49,0x7800e08,0x7c01bc8,
+	0xc00ea40,0x6801b89,0x7800e48,0x7c01cc8,0x6410c08,0x8010e81,0x93e1248,0x7c01b09,
+	0xaa14009,0xc014780,0x0000000,0xc780580,0x0000000,0x7801b4b,0xae0010b,0x680000a,
+	0xb4072ca,0xc00e600,0x406f24a,0x4001208,0x7400248,0xc7ffec0,0x400128a,0x7801b8b,
+	0xae0010b,0x680000a,0xb4072ca,0xc00e380,0x407324a,0x4001208,0x7400248,0xc7ffec0,
+	0x400128a,0x6410c08,0x8010e81,0x93e1248,0x7c01dc9,0x6410c08,0x8010e82,0x93e1248,
+	0x7c01e49,0x93c1248,0xa618009,0x7c01e89,0x7c01ec9,0x7c01f09,0xc780340,0x7c01f49,
+	0x6410c08,0x8010e82,0x93e1248,0x7c01e89,0x93c1248,0xa618009,0x7c01ec9,0xc00de40,
+	0x6801f09,0xc00ddc0,0x6801f49,0x6410c08,0x8010e81,0x93e1248,0xa628009,0x7800f48,
+	0xaa28008,0x7801608,0xaa0c008,0x68f000c,0x69f000c,0xc018cc0,0x0000000,0xc7800c0,
+	0xc076a40,0x0000000,0x6410c08,0x8010e81,0x93e1248,0x7c01f89,0xc00d6c0,0x6801fc9,
+	0x4002208,0x7c01fc8,0x6410c08,0x8010e81,0x93e1248,0x7c02009,0x8010e81,0xc019300,
+	0x0000000,0x78015c8,0xaa0ffc8,0xc016a80,0x5407308,0x68000e7,0xc020400,0x78015e8,
+	0xc78d140,0x800c0ff,0xaa0c108,0xc7876c0,0x0000000,0x69fff89,0x640d408,0x9010208,
+	0xa8fe248,0x0000000,0x6410c08,0x8010e90,0x9326208,0xb210548,0x7c02048,0xc78cd80,
+	0x800c0fe,0x6410c08,0x8010e81,0x93e1248,0x7c02089,0x7802048,0xba1c408,0x6800009,
+	0xae14548,0x6800009,0x6410c08,0x8010e81,0x93e1248,0x7c020c9,0xc00cac0,0x6800049,
+	0x78015c9,0xa815248,0x7c00108,0xa633fc9,0x0000000,0xc015580,0x680000c,0xc015a40,
+	0x680000c,0xc017bc0,0x0000000,0x680000c,0x7c00e8c,0xc01fe80,0x0000000,0x7800108,
+	0x7c015c8,0xc017100,0x5407308,0x68004e7,0xc01f680,0x0000000,0x7801608,0x78007c9,
+	0xa809248,0x7c00108,0x7800109,0x7c007c9,0xc015500,0x5407309,0x68004a7,0xc01f3c0,
+	0x0000000,0x780060a,0x7800148,0xa807288,0x7c0014a,0xc014d80,0x540730a,0x6800467,
+	0xc01f180,0x0000000,0x7802088,0x6800009,0xaa10008,0x7c02149,0xc780440,0x7c02109,
+	0x7801648,0xaa14008,0x6800009,0x6410c08,0x8010e81,0x93e1248,0x7c02149,0x7801449,
+	0x6410c08,0x680080a,0x240a24a,0x98091c9,0x6010e09,0x3808288,0x7c02108,0x7802148,
+	0xaa0c008,0xc784d00,0x0000000,0xc01bb80,0x0000000,0x78016c8,0xaa0c008,0x98081c8,
+	0x6010e08,0xc00b800,0x6802189,0x7801688,0xaa14008,0x6800049,0x6410c08,0x8010e81,
+	0x93e1248,0x7c021c9,0x7802049,0xaa084c9,0xa610509,0x6800008,0xc7818c0,0x7c02208,
 	0x6410c08,0x7800949,0x4004249,0x680080a,0x240a24a,0x98091c9,0x6010e09,0x3808288,
-	0x6410c08,0x8010e81,0x93e1248,0x6410c08,0x8010e81,0x93e1248,0xaa0c009,0xc009f40,
-	0x6800049,0xc7ff780,0x440130c,0xc019940,0x0000000,0x7801288,0xaa14008,0x6800009,
-	0x6410c08,0x8010e81,0x93e1248,0x7c02289,0x7800fc8,0xa610008,0x7c022c8,0xc780200,
-	0x7c02308,0x6410c08,0x8010e82,0x93e1248,0x7c022c9,0x93c1248,0x7c02309,0x780218b,
-	0xa60c08b,0xc781700,0x0000000,0x641170a,0x6410c08,0x8010e81,0x93e1248,0xa628009,
-	0x7801789,0x9546289,0x7c02349,0xa60c00b,0x6800009,0x78017c9,0x9606289,0xc7803c0,
-	0x7c02389,0xc0094c0,0x6802349,0x7802349,0x4001249,0x9546289,0x7c02349,0xaa1c04b,
-	0xc009300,0x6802389,0x7802389,0x4001249,0x9606289,0x7c02389,0x601170a,0x6800009,
-	0x7c02ac9,0x7801f89,0xaa14009,0x7802a89,0xb20c049,0xc019540,0x0000000,0xa61400b,
-	0x6800009,0x6410c08,0x8010e81,0x93e1248,0x641170a,0x96c1289,0x601170a,0x7c023c9,
-	0x7801749,0xaa14009,0x6800009,0x6410c08,0x8010e81,0x93e1248,0x7c02409,0x6411008,
-	0x9581209,0x6011008,0x7802289,0xaa48009,0xa61400b,0x6800049,0x6410c08,0x8010e81,
-	0x93e1248,0x7c02449,0xaa1808b,0xaa0c009,0x6802389,0x6802349,0x7000249,0xae10049,
-	0x6800009,0xc780100,0x7c02489,0xc008640,0x6802489,0xaa0c04b,0x7801a09,0x7801a49,
-	0x6047b09,0x8047c00,0xaa10009,0x8047d00,0xc006dc0,0x0000000,0xc008380,0x68024c9,
-	0x6800149,0x2409209,0x6411708,0x96e3209,0x6011708,0xc008380,0x6802509,0x7801808,
-	0x7902509,0x2008248,0x7c02548,0x7802189,0x9446248,0x7802308,0x9501248,0x78022c8,
-	0x9521248,0x7800d08,0x9542248,0x7800d48,0x9582248,0x7800d88,0x95c2248,0x7800dc8,
-	0x9602248,0x7801948,0x9647248,0x7801988,0x9727248,0x6011109,0x6411009,0x9809389,
-	0x6011009,0x78019c8,0xaa3c008,0xc007c00,0x6802589,0xc007b80,0x68025c9,0x6411109,
-	0x7801948,0x780258a,0x2008288,0x9647248,0x7801988,0x78025ca,0x2008288,0x9727248,
-	0x6011109,0x7801e88,0xaa14008,0x6800009,0x6410c08,0x8010e81,0x93e1248,0x7c02609,
-	0xa620009,0x7801ec9,0x7c02649,0x7801f09,0x7c02689,0x7801f49,0xc7802c0,0x7c026c9,
-	0x6410c08,0x8010e81,0x93e1248,0xa618009,0x7c02649,0xc007380,0x6802689,0xc007300,
-	0x68026c9,0x7801e48,0xaa34008,0x6800009,0x78022c8,0xa61c008,0x7802308,0xa614008,
-	0x7802648,0xaa0c008,0xc780140,0x6800009,0x6410c08,0x8010e81,0x93e1248,0x7c02709,
-	0x7801ac8,0xa610008,0x7801e08,0xa608008,0xc780440,0xc006bc0,0x6802749,0x780274b,
-	0xaa3400b,0xc006ac0,0x6800049,0x4001308,0x680080a,0x240a30a,0x980c1cc,0x6410c08,
-	0x6010e0c,0x3808288,0x7c00048,0xaef004b,0x44012cb,0x7802008,0xaa20008,0xc006740,
-	0x6800049,0xaa14008,0x0000000,0x8010e88,0xc7fff40,0x4401208,0xc0137c0,0x0000000,
-	0x640ce09,0xa238089,0x6420408,0xa2fc048,0x0000000,0x9c08748,0x6020408,0x6460108,
-	0xa216008,0x0000000,0x6460408,0xa2fc048,0x0000000,0x6460408,0x6060408,0x69fffc9,
-	0x640d408,0x9010208,0xa8fe248,0x0000000,0x640d208,0xa240208,0x78034c8,0xbe30208,
-	0x7802109,0xa60c009,0x7802189,0xaa20089,0x640d209,0x928c209,0x4001208,0x968c248,
-	0x600d209,0xc785bc0,0x800c0ff,0x98080c8,0x7c034c8,0x800c008,0x8007401,0xc785a40,
-	0x0000000,0xaa0c148,0xc784300,0x0000000,0x8010e81,0x6812008,0x6010e08,0x0000000,
-	0x8010e00,0x7802148,0xa60c008,0x6800008,0x7c02788,0x7802088,0xaa58008,0x6800008,
-	0x7c029c8,0x7c02a08,0x7c00e88,0x7c027c8,0x7c02808,0x7c02848,0x7c02888,0x7801ac9,
-	0xaa0c009,0x7800e08,0x7801bc8,0x7c028c8,0x7c02948,0xaa0c009,0x7800e48,0x7801cc8,
-	0x7c02908,0x7c02988,0xc780280,0x68001df,0x7802108,0x7800e89,0xa806248,0x6800827,
-	0xc017bc0,0x7802128,0xc784f80,0x800c0ff,0x7802148,0xa61c008,0x0000000,0x68001df,
-	0x78029c9,0x7802a08,0x9508248,0x7c02b49,0x78029c9,0xa614049,0x7801e09,0xaa0c009,
-	0x0000000,0x981f15f,0x78029c9,0x7802a08,0x958c248,0x978425f,0x6011609,0xc000400,
-	0x0000000,0x7800e88,0x9808788,0x98087c8,0x6012408,0x7800e88,0x640d409,0x9010249,
-	0xaa0c009,0xa8fd209,0x0000000,0x6a00008,0x6011408,0xc785fc0,0x0000000,0x78028c9,
-	0x7c02b09,0x7802a09,0x780288a,0xa40b289,0x680000c,0x78029cb,0x780284a,0xa40728b,
-	0x680000c,0xa614009,0x680008c,0xa60c00a,0x680008c,0x68000cc,0x7802148,0x9441308,
-	0x6460109,0x94a324c,0x6060109,0x6420109,0x944324c,0x7802188,0x9402248,0x7800d48,
-	0x4003208,0x9604248,0x7800d08,0x4003208,0x9684248,0x6020109,0x7800848,0x7800889,
-	0x9610209,0x6020508,0x7802848,0x7802889,0x9610209,0x6020708,0x6060708,0x7802948,
-	0x7802989,0x9610209,0x6020808,0x6060808,0x7800e08,0x4401208,0x7800e49,0x4401249,
-	0x9610209,0x6020608,0x6800048,0x541f208,0x6020408,0x6450a08,0x9005208,0xa6f8008,
-	0x6800008,0x7801ac9,0xa60c009,0x6f00008,0x6d00008,0x6050a08,0x6450108,0x78008c9,
-	0x9602209,0x7800909,0x9642209,0x6050108,0x7802848,0x7802889,0x960a209,0x7801ac9,
-	0x97e1209,0x6050608,0x780294a,0x7802989,0x960a289,0x605070a,0x9c087c8,0x78029ca,
-	0x7802a09,0x960a289,0xa403288,0x0000000,0x98087c8,0x6050808,0x7802a09,0x780288a,
-	0xa404289,0x78029c9,0x780284a,0xa802289,0xc780740,0x640c908,0xe000248,0x640ca0a,
-	0x0000000,0xf000240,0x200a24a,0x606110a,0x606150a,0x606140a,0x4020208,0x7802a09,
-	0xe000248,0x640cc0a,0x640cb0c,0xf000340,0x78027c8,0xe000308,0x200b34a,0x402028b,
-	0x0000000,0xf000240,0x200a24a,0x606120a,0x606160a,0x2409309,0x200b24b,0x606130b,
-	0x606170b,0x6460408,0x6060408,0x6800048,0x541f208,0x6060408,0x7801ac8,0x6040508,
-	0x7802948,0x7802989,0x9610209,0x6040308,0x7802848,0x7802889,0x9610209,0x6040408,
-	0x7802148,0xa638008,0x6804808,0x6043008,0x6443108,0x900a248,0xa6f0009,0x91e5248,
-	0xa6e8009,0x0000000,0x6440008,0x9808008,0x6040008,0x9c08008,0x6040008,0x8040701,
-	0x7802148,0xaa4c008,0x78029c8,0xa614008,0x7801e09,0xaa0c009,0xc007b80,0x0000000,
-	0x6411009,0x91c1249,0xa6f8009,0x0000000,0x6411009,0x98093c9,0x6011009,0x6411009,
-	0x91e1249,0xa6f8009,0xcc00000,0x0000000,0x6411009,0x91c1249,0xa6f8009,0x0000000,
-	0x7800e09,0xae0c049,0xc007400,0x0000000,0x6411009,0x98093c9,0x6011009,0x8011c00,
-	0x8011e00,0x6411009,0x91e1249,0xa6f8009,0xcc00000,0x0000000,0xa60fc08,0x0000000,
-	0x8010e90,0xc7815c0,0x800c0ff,0x780080b,0xc001600,0x6800049,0x6047e08,0xaa1000b,
-	0xc0016c0,0x6800049,0x6047f08,0x8048000,0xc0002c0,0x780234a,0x6047c0c,0x780218a,
-	0xa61400a,0x8048020,0xc000140,0x780238a,0x6047d0c,0xcc00000,0x0000000,0x400034a,
-	0x6410c0e,0x980d1cd,0x6010e0d,0x680000c,0x400034a,0xaa1c00d,0x93e13ce,0x580130c,
-	0x97e130f,0x540138e,0xc7ffec0,0x440134d,0x680040d,0x240d28d,0x380c34c,0xaa4000b,
-	0x400034a,0x6410c0e,0x980d1cd,0x6010e0d,0x400034a,0xaa1c00d,0x93e13ce,0x580130c,
-	0x97e130f,0x540138e,0xc7ffec0,0x440134d,0x680040d,0x240d28d,0x380c34c,0x400034c,
-	0xae0c00a,0xcc00000,0x0000000,0x680000e,0x680000f,0x900140d,0xaa1c010,0xc000900,
-	0x6800049,0x9408388,0xc000840,0x6800049,0x94083c8,0x920140d,0xaa34010,0xc000700,
-	0x6800049,0x9508388,0xc000640,0x6800049,0x950a3c8,0xc000580,0x6800049,0x9608388,
-	0xc0004c0,0x6800049,0x964a3c8,0x604810e,0x604810f,0x580134d,0xc7ff880,0x440128a,
-	0x0800000,0x7800008,0xc7e1900,0x6030408,0x6806008,0x6010e08,0x6410f08,0xbefc0c8,
-	0x9118208,0xcc00000,0x7400248,0x680e008,0x6010e08,0x6410f08,0xbefc0c8,0x9118208,
-	0xcc00000,0x7400248,0x6410509,0x6bfff89,0x6030409,0x0400000,0xbe0c108,0xc7ffa40,
-	0x0000000,0x8012104,0x7800e09,0xae0c049,0x6411c22,0x4000862,0xa26891f,0x6011c21,
-	0xa21481f,0xc005240,0x0000000,0xa25411f,0x9c1f15f,0x7801e09,0xaa48009,0x8011e00,
-	0xbe42022,0x6a907c9,0x6012b09,0x0000000,0x0000000,0x6412b09,0xc005180,0x0000000,
-	0x6411009,0x98093c9,0x6011009,0x6411009,0x91e1249,0xa6f8009,0xc780840,0x0000000,
-	0xa27e022,0x6a907c9,0x6012b09,0x0000000,0x0000000,0x6412b09,0xc010140,0x0000000,
-	0x6411609,0x93e1249,0xaa4c009,0x6800008,0x7c02788,0x6411109,0x7802548,0x9446248,
-	0x6011109,0x6411009,0x9809389,0x6011009,0x6411e08,0xbe22008,0x68001df,0xc07a600,
-	0x978479f,0x6420409,0x9c09749,0xc780100,0x6020409,0xc7feac0,0x800c0ff,0x601161e,
-	0x7800e88,0x9808788,0x98087c8,0x6012408,0x7800e88,0x640d409,0x9010249,0xaa0c009,
-	0xa8fd209,0x0000000,0x6a00008,0x6011408,0x7801ac8,0xaa0c008,0xc00f8c0,0x0000000,
-	0x9c1f09f,0x7800e88,0x4001208,0x7c00e88,0x7802788,0x4001208,0x7c02788,0xa21409f,
-	0x7802949,0xb803248,0x0000000,0x9c1f05f,0x78029c8,0xa618048,0x4001208,0x7801e09,
-	0xaa0c009,0x0000000,0x981f15f,0x78028c9,0xb815248,0x7c029c8,0x7802848,0x7c029c8,
-	0x981f09f,0x7800e88,0x7800e09,0x2008248,0x7802949,0x2408248,0x7c00e88,0x7802a08,
-	0x4001208,0x7802909,0xb807248,0x7c02a08,0x7801ac8,0xaa0c008,0xc7806c0,0x0000000,
-	0x981f0df,0x7802a08,0x4001208,0x7802909,0xb80f248,0x78029c8,0x4001208,0x78028c9,
-	0xb80b248,0x7800e09,0xb807248,0x7802a08,0x4001208,0x7800e49,0xb803248,0xc7800c0,
-	0x9c1f11f,0x981f11f,0x981f0df,0x78029de,0x7802a08,0x958c788,0x978479f,0xcb80020,
-	0x0000000,0x6800048,0x7c02148,0x78027c8,0x7801b4c,0xb41a308,0x6801bc9,0x2009209,
-	0x700024a,0x780284b,0x200b28b,0x7c0284b,0x7c029cb,0x780288b,0x7c02a0b,0x4001208,
-	0xb808308,0x7c027c8,0x7800e09,0x7c028c9,0x780284a,0x2409289,0xc780ac0,0x7c02949,
-	0x4001249,0x700024a,0x7c0294a,0x78028cb,0x200b28b,0xc780900,0x7c028cb,0x7802808,
-	0x7801b8c,0xb802308,0xc7ff600,0x6800008,0x7c027c8,0x7c029c8,0x7c02848,0x7801bc9,
-	0x7c02949,0x7c028c9,0x7802808,0x6801cc9,0x2009209,0x700024a,0x780288b,0x200b28b,
-	0x7c0288b,0x7c02a0b,0x4001208,0xb808308,0x7c02808,0x7800e49,0x7c02909,0x780288a,
-	0x2409289,0xc780200,0x7c02989,0x4001249,0x700024a,0x7c0298a,0x780290b,0x200b28b,
-	0x7c0290b,0x7802888,0x7800e09,0xe000248,0x0000000,0x0000000,0x7802849,0xf000200,
-	0x2008248,0x7c00e88,0xc7fe780,0x4c177df,0x78029c9,0x780284a,0x400228a,0xb407289,
-	0x4402209,0x440128a,0x78028c8,0xb403289,0x4401208,0x4401208,0x680c009,0x2009209,
-	0x7400262,0xa21009f,0x6800021,0xc7fbf40,0x0000000,0x78029c8,0x680c009,0x2009209,
-	0xc7fbe00,0x7000261,0x78029c9,0x780284a,0x400228a,0xb407289,0x4402209,0x440128a,
-	0x78028c8,0xb403289,0x4401208,0x4401208,0x680c009,0x5801288,0x2009289,0x700024a,
-	0xa20c048,0xc7800c0,0x94082a2,0x95102a2,0x740024a,0xa21009f,0x6800021,0xc7fb840,
-	0x0000000,0x78029c8,0x680c009,0x5801288,0x2009289,0x700024a,0xa20c048,0x911084a,
-	0x900884a,0xc7fb5c0,0x0000000,0x78029c9,0x780284a,0x400228a,0xb407289,0x4402209,
-	0x440128a,0x78028c8,0xb403289,0x4401208,0x4401208,0x680c009,0x5802288,0x2009289,
-	0x700024a,0x9002208,0xa60c008,0xc780240,0x95842a2,0xa60c048,0xc780180,0x95042a2,
-	0xa60c088,0xc7800c0,0x94842a2,0x94042a2,0x740024a,0xa21009f,0x6800021,0xc7fae40,
-	0x0000000,0x78029c8,0x680c009,0x5802288,0x2009289,0x700024a,0x9002208,0xaa1c008,
-	0x918484a,0xaa14048,0x910484a,0xaa0c088,0x908484a,0x900484a,0xc7faa80,0x0000000,
-	0xc780080,0x6800021,0xc7fa980,0x0000000,0x6412106,0x90c1186,0xa6f8006,0xc7dc1c0,
-	0x0000000,0x6804009,0x6012d09,0x6800f8a,0x8012e00,0x0000000,0xd07ff8a,0x0000000,
-	0xcc00000,0x0000000,0x6804009,0x6012c09,0x6809009,0x6012d09,0x6800f8a,0x6412e09,
-	0xd07ffca,0x6012e09,0xcc00000,0x0000000,0x6809009,0x6012c09,0x6804009,0x6012d09,
-	0x6800f8a,0x6412e09,0xd07ffca,0x6012e09,0x6411109,0x7802548,0x9446248,0x6011109,
-	0xcc00000,0x0000000,0x7800e08,0x7801b49,0xa608009,0xc780880,0xaa18049,0xaa20089,
-	0xaa640c9,0xa608109,0xc7806c0,0xc780000,0x5801288,0xc780680,0x7c01bca,0x5802288,
-	0x540124a,0x2009289,0xb0fe209,0x400128a,0x440224a,0x7c01bc9,0x5401289,0x400128a,
-	0x540124a,0x2009289,0x5401208,0xb003209,0x7801bc9,0x440128a,0x240a24a,0xc780200,
-	0x7c01c0a,0xc000b40,0x6801bcc,0xc780100,0x0000000,0xc000dc0,0x6801bcc,0x7800e48,
-	0x7801b89,0xa608009,0xc780880,0xaa18049,0xaa20089,0xaa640c9,0xa608109,0xc7806c0,
-	0xc780000,0x5801288,0xc780680,0x7c01cca,0x5802288,0x540124a,0x2009289,0xb0fe209,
-	0x400128a,0x440224a,0x7c01cc9,0x5401289,0x400128a,0x540124a,0x2009289,0x5401208,
-	0xb003209,0x7801cc9,0x440128a,0x240a24a,0xc780200,0x7c01d0a,0xc000200,0x6801ccc,
-	0xcc00000,0x0000000,0xc000480,0x6801ccc,0xcc00000,0x0000000,0x5802348,0x740030d,
-	0x5801248,0x240a349,0x400130c,0x740030a,0x54012c8,0x200b20b,0x58022cb,0x240a24b,
-	0x400130c,0x740030a,0xcc00000,0x0000000,0x5803288,0x540224a,0x2009289,0xb0fe209,
-	0x400128a,0x440224a,0x7400309,0x54012c8,0x4000349,0x540224a,0x2009289,0xb0fe2c9,
-	0x400128a,0x440224a,0x240a349,0x400130c,0x740030a,0x54012c8,0x200b20b,0x4000349,
-	0x540224a,0x2009289,0xb0fe2c9,0x400128a,0x440224a,0x240a349,0x400130c,0x740030a,
-	0x54022c8,0x4000349,0x540224a,0x2009289,0xb0fe2c9,0x400128a,0x440224a,0x240a349,
-	0x400130c,0x740030a,0xcc00000,0x0000000,0x640c308,0x2008308,0x6035108,0x6800808,
-	0x6035208,0x6800149,0x680c00a,0x700024b,0x740028b,0xb6105c9,0x4001249,0xc7fff00,
-	0x400128a,0x6a0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x6435308,
-	0x900c208,0xa6f8008,0x0000000,0xcc00000,0x0000000,0x640c408,0x2008308,0x6035108,
-	0x6801008,0x6035208,0x6800609,0x680c00a,0x700024b,0x740028b,0xb611589,0x4001249,
-	0xc7fff00,0x400128a,0x6a0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,
-	0x6435308,0x900c208,0xa6f8008,0x0000000,0xcc00000,0x0000000,0x640c308,0x2008308,
-	0x6035108,0x6800808,0x6035208,0x6b0c008,0x6035008,0x6435008,0x580f208,0xbef8048,
-	0x0000000,0x6800149,0x680c00a,0x700028b,0x740024b,0xb6105c9,0x4001249,0xc7fff00,
-	0x400128a,0xcc00000,0x0000000,0x640c408,0x2008308,0x6035108,0x6801008,0x6035208,
-	0x6b0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x6800609,0x680c00a,
-	0x700028b,0x740024b,0xb611589,0x4001249,0xc7fff00,0x400128a,0xcc00000,0x0000000,
-	0x640c508,0x2008308,0x6035108,0x6801467,0xc0092c0,0x6435128,0x6800c08,0x6035208,
-	0x68015c9,0x680c00a,0x700024b,0x740028b,0xb612009,0x4001249,0xc7fff00,0x400128a,
-	0x6a0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x6435308,0x900c208,
-	0xa6f8008,0x0000000,0x7800f48,0xaa20008,0x540330c,0x7801608,0xaa0c008,0x6800008,
-	0x6900008,0xc000100,0x200c20c,0xcc00000,0x0000000,0x680000d,0x8070300,0x680c00b,
-	0x680000a,0x6470408,0x6470409,0x9508209,0x74002c8,0x40012cb,0xbaeffca,0x400128a,
-	0xaa3800d,0x0000000,0x6470508,0x7c0fe88,0x9210208,0x7c0fec8,0x6470608,0x7c0ff08,
-	0x9210208,0x7c0ff48,0x6470708,0x7c0ff88,0x9210208,0x7c0ffc8,0x640cd08,0x2008308,
-	0x540924d,0x2008248,0x6035108,0x6804008,0x6035208,0x6a0c008,0x6035008,0x6435008,
-	0x580f208,0xbef8048,0x0000000,0xba0c04d,0xcc00000,0x0000000,0xc7ff640,0x400134d,
-	0x640c508,0x2008308,0x6035108,0x6801427,0xc007ec0,0x6435128,0x6800c08,0x6035208,
-	0x6b0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x68015c9,0x680c00a,
-	0x700028b,0x740024b,0xb612009,0x4001249,0xc7fff00,0x400128a,0xc000e00,0x0000000,
-	0x7800f48,0xaa20008,0x540330c,0x7801608,0xaa0c008,0x6800008,0x6900008,0xc000100,
-	0x200c20c,0xcc00000,0x0000000,0x680000d,0x8070200,0x640cd08,0x2008308,0x540924d,
-	0x2008248,0x6035108,0x6804008,0x6035208,0x6b0c008,0x6035008,0x6435008,0x580f208,
-	0xbef8048,0x0000000,0x680c00b,0x680000a,0x70002c8,0x40012cb,0x6070408,0x9108248,
-	0x6070409,0xbaeffca,0x400128a,0xaa3800d,0x0000000,0x780fe88,0x780fec9,0x9610209,
-	0x6070508,0x780ff08,0x780ff49,0x9610209,0x6070608,0x780ff88,0x780ffc9,0x9610209,
-	0x6070708,0xba0c04d,0xcc00000,0x0000000,0xc7ff640,0x400134d,0x7801708,0x7801889,
-	0x9421209,0x7801849,0x9441209,0x7801a89,0x9461209,0x7800f09,0x9483209,0x7800ec9,
-	0x94e3209,0x7800f89,0x9741209,0x78018c9,0x9761209,0x7800d49,0x780190a,0x2409289,
-	0x9782209,0x6011708,0x6412508,0x7801009,0x9401209,0x78010c9,0x9482209,0x7801109,
-	0x94c2209,0x7801049,0x9504209,0x7801089,0x9584209,0x6800cc9,0x9706209,0x78008c9,
-	0x9442209,0xaa18009,0x680018a,0x4401249,0x340a24a,0x960420a,0x9808048,0x7800909,
-	0x97c2209,0xaa18009,0x680018a,0x4401249,0x340a24a,0x968420a,0x9808048,0x6012508,
-	0x6470108,0x7800f49,0x9401209,0x9421209,0x9441209,0x7800d49,0x9482209,0x6070108,
-	0x6470b08,0x78008c9,0x9402209,0x7800909,0x9482209,0x9502209,0x6070b08,0x6440808,
-	0x78012c9,0x9401209,0x7801849,0x9421209,0x6040808,0x6440c08,0x78008c9,0x9402209,
-	0x7800909,0x9442209,0x6040c08,0xcc00000,0x0000000,0xc003100,0x0000000,0x7802348,
-	0x7c04408,0x7802388,0x7c04448,0x7802188,0x7c04488,0x7802288,0x7c044c8,0x7802148,
-	0x7c04508,0x7802108,0x7c04548,0x7800848,0x7c045c8,0x7800888,0x7c04608,0x7800c88,
-	0x7c04648,0x7800cc8,0x7c04688,0x7800948,0x7c046c8,0x7802208,0x7c04708,0x7802448,
-	0x7c04748,0x7802488,0x7c04788,0x7801fc8,0x7c047c8,0x78024c8,0x7c04808,0x7800a88,
-	0x7c04848,0x7802ac8,0x7c04888,0x7801ac8,0x7801b09,0x5401249,0x2c08248,0x7c048c8,
-	0x7801b48,0x7c04908,0x7801b88,0x7c04948,0x7801bc8,0x7c04988,0x7801c08,0x7c049c8,
-	0x7801c48,0x7c04a08,0x7801c88,0x7c04a48,0x7801cc8,0x7c04a88,0x7801d08,0x7c04ac8,
-	0x7801d48,0x7c04b08,0x7801d88,0x7c04b48,0x7801f08,0x7c04bc8,0x7801f48,0x7c04c08,
-	0x7802688,0x7c04c48,0x78026c8,0x7c04c88,0x7801948,0x7c04cc8,0x7801988,0x7c04d08,
-	0x7802088,0x7c04d48,0x78014c8,0x7c04e08,0x7801508,0x7c04e48,0x7801548,0x7c04e88,
-	0x7801588,0x7c04ec8,0x78008c8,0x7800909,0x9484209,0x7c04f08,0x6800009,0x7801148,
-	0xa20c048,0x7801008,0x9809009,0xa20c048,0x7801dc8,0x9809049,0xa20c048,0x7801e48,
-	0x9809089,0xa20c048,0x7801e88,0x98090c9,0xa20c048,0x7801ec8,0x9809109,0xa20c048,
-	0x7802608,0x9809149,0xa20c048,0x7802648,0x9809189,0xa20c048,0x78022c8,0x98091c9,
-	0xa20c048,0x7802308,0x9809209,0xa20c048,0x7802708,0x9809249,0xa20c048,0x0000000,
-	0x9809289,0x7c04b89,0x680500a,0x6802b88,0x7000209,0x7400289,0x400128a,0xbaf7348,
-	0x4001208,0x640c108,0x6035108,0x6802008,0x6035208,0x6a04008,0x6035008,0x6435008,
-	0x580f208,0xbef8048,0x0000000,0x6435308,0x900c208,0xa6f8008,0x0000000,0xcc00000,
-	0x0000000,0x800cf00,0x800c0ff,0x6800009,0x680ffca,0x7000248,0x9808408,0x600cf08,
-	0x0000000,0x640cf08,0xa6fc008,0xb403289,0xc7ffe40,0x4001249,0xcc00000,0x0000000,
-	0x680000a,0x680000b,0x6804008,0x7000209,0x580f209,0xbe20048,0x580e209,0xa20c048,
-	0x400128a,0x40012cb,0x6804008,0xbae040a,0x2008288,0x7c02a8b,0xcc00000,0x0000000,
-	0x6800009,0x7c02a89,0x68003ca,0x68043c8,0x7400209,0x440128a,0xaef800a,0x4401208,
-	0x6a00009,0x7400209,0xcc00000,0x0000000,0x6800048,0x7c02448,0x7c02288,0xcc00000,
-	0x0000000,0x680580a,0x6802048,0x7000209,0x7400289,0x400128a,0xbaf6748,0x4001208,
-	0xcc00000,0x0000000,0x6802b8d,0x6410c08,0x8010e81,0x93e1248,0xaa10009,0x7c02ac9,
-	0xc0003c0,0x780234c,0xa62c00b,0x0000000,0x6410c08,0x8010e81,0x93e1248,0xaa18009,
-	0x7802ac9,0x9809049,0x7c02ac9,0xc000100,0x780238c,0xcc00000,0x0000000,0x7802a88,
-	0xb21c088,0x6800049,0xb214108,0x6800089,0xb20c208,0x68000c9,0x6800109,0x680080a,
-	0x240a24a,0x98091c9,0x6410c08,0x6010e09,0x3808288,0x7400348,0x400134d,0xaeec04c,
-	0x440130c,0xcc00000,0x0000000,0x6460409,0x9001289,0xaaf800a,0x0000000,0xcc00000,
-	0x0000000,0x78029c8,0x680d009,0x2009209,0x700024d,0x7802a08,0x680ee09,0x2009209,
-	0x700024e,0x680000f,0xac0338d,0x6ee000f,0x6ea000f,0x6050a0f,0x78029c8,0xb615e08,
-	0x680d009,0x2009209,0x7802b4d,0x740024d,0x7802a08,0xb615108,0x680ee09,0x2009209,
-	0x7802b4e,0x740024e,0xcc00000,0x0000000,0x67f2f23,0xbefc063,0x640c023,0xa6f7fe3,
-	0x0000000,0x6410b23,0x98230a3,0x6010b23,0x6412123,0xa2fc063,0x0000000,0x6410c23,
+	0x7c02208,0x6410c08,0x8010e81,0x93e1248,0xa614009,0x680400d,0xc075f80,0x780118e,
+	0xc780600,0x78011c9,0x6410c08,0x68007ca,0x240a24a,0x98091c9,0x6010e09,0x3808288,
+	0x5801208,0x7c02248,0xc078480,0x4000448,0x480f211,0x5404208,0x6808009,0x2009209,
+	0x680400d,0x6800008,0x700024a,0x740034a,0x400134d,0x4001208,0xbaf0408,0x4001249,
+	0x7801208,0xa608008,0xc780b80,0x780124a,0xaa1400a,0x680000b,0xc00a8c0,0x6800049,
+	0x40002c8,0xc00a800,0x6800049,0x200c20b,0xa60800c,0xc7808c0,0xac0f2cc,0x7801248,
+	0xba60048,0x7801248,0xb21c088,0x6802049,0xb214108,0x6802089,0xb20c208,0x68020c9,
+	0x6802109,0x6410c08,0x6010e09,0xc780340,0x0000000,0x6410c08,0x7800949,0x4004249,
+	0x680080a,0x240a24a,0x98091c9,0x6010e09,0x3808288,0x6410c08,0x8010e81,0x93e1248,
+	0x6410c08,0x8010e81,0x93e1248,0xaa0c009,0xc009f40,0x6800049,0xc7ff780,0x440130c,
+	0xc019940,0x0000000,0x7801288,0xaa14008,0x6800009,0x6410c08,0x8010e81,0x93e1248,
+	0x7c02289,0x7800fc8,0xa610008,0x7c022c8,0xc780200,0x7c02308,0x6410c08,0x8010e82,
+	0x93e1248,0x7c022c9,0x93c1248,0x7c02309,0x780218b,0xa60c08b,0xc781700,0x0000000,
+	0x641170a,0x6410c08,0x8010e81,0x93e1248,0xa628009,0x7801789,0x9546289,0x7c02349,
+	0xa60c00b,0x6800009,0x78017c9,0x9606289,0xc7803c0,0x7c02389,0xc0094c0,0x6802349,
+	0x7802349,0x4001249,0x9546289,0x7c02349,0xaa1c04b,0xc009300,0x6802389,0x7802389,
+	0x4001249,0x9606289,0x7c02389,0x601170a,0x6800009,0x7c02ac9,0x7801f89,0xaa14009,
+	0x7802a89,0xb20c049,0xc019540,0x0000000,0xa61400b,0x6800009,0x6410c08,0x8010e81,
+	0x93e1248,0x641170a,0x96c1289,0x601170a,0x7c023c9,0x7801749,0xaa14009,0x6800009,
+	0x6410c08,0x8010e81,0x93e1248,0x7c02409,0x6411008,0x9581209,0x6011008,0x7802289,
+	0xaa48009,0xa61400b,0x6800049,0x6410c08,0x8010e81,0x93e1248,0x7c02449,0xaa1808b,
+	0xaa0c009,0x6802389,0x6802349,0x7000249,0xae10049,0x6800009,0xc780100,0x7c02489,
+	0xc008640,0x6802489,0xaa0c04b,0x7801a09,0x7801a49,0x6047b09,0x8047c00,0xaa10009,
+	0x8047d00,0xc006dc0,0x0000000,0xc008380,0x68024c9,0x6800149,0x2409209,0x6411708,
+	0x96e3209,0x6011708,0xc008380,0x6802509,0x7801808,0x7902509,0x2008248,0x7c02548,
+	0x7802189,0x9446248,0x7802308,0x9501248,0x78022c8,0x9521248,0x7800d08,0x9542248,
+	0x7800d48,0x9582248,0x7800d88,0x95c2248,0x7800dc8,0x9602248,0x7801948,0x9647248,
+	0x7801988,0x9727248,0x6011109,0x6411009,0x9809389,0x6011009,0x78019c8,0xaa3c008,
+	0xc007c00,0x6802589,0xc007b80,0x68025c9,0x6411109,0x7801948,0x780258a,0x2008288,
+	0x9647248,0x7801988,0x78025ca,0x2008288,0x9727248,0x6011109,0x7801e88,0xaa14008,
+	0x6800009,0x6410c08,0x8010e81,0x93e1248,0x7c02609,0xa620009,0x7801ec9,0x7c02649,
+	0x7801f09,0x7c02689,0x7801f49,0xc7802c0,0x7c026c9,0x6410c08,0x8010e81,0x93e1248,
+	0xa618009,0x7c02649,0xc007380,0x6802689,0xc007300,0x68026c9,0x7801e48,0xaa34008,
+	0x6800009,0x78022c8,0xa61c008,0x7802308,0xa614008,0x7802648,0xaa0c008,0xc780140,
+	0x6800009,0x6410c08,0x8010e81,0x93e1248,0x7c02709,0x7801ac8,0xa610008,0x7801e08,
+	0xa608008,0xc780440,0xc006bc0,0x6802749,0x780274b,0xaa3400b,0xc006ac0,0x6800049,
+	0x4001308,0x680080a,0x240a30a,0x980c1cc,0x6410c08,0x6010e0c,0x3808288,0x7c00048,
+	0xaef004b,0x44012cb,0x7802008,0xaa20008,0xc006740,0x6800049,0xaa14008,0x0000000,
+	0x8010e88,0xc7fff40,0x4401208,0xc0137c0,0x0000000,0x640ce09,0xa238089,0x6420408,
+	0xa2fc048,0x0000000,0x9c08748,0x6020408,0x6460108,0xa216008,0x0000000,0x6460408,
+	0xa2fc048,0x0000000,0x6460408,0x6060408,0x69fffc9,0x640d408,0x9010208,0xa8fe248,
+	0x0000000,0x640d208,0xa240208,0x78034c8,0xbe30208,0x7802109,0xa60c009,0x7802189,
+	0xaa20089,0x640d209,0x928c209,0x4001208,0x968c248,0x600d209,0xc785bc0,0x800c0ff,
+	0x98080c8,0x7c034c8,0x800c008,0x8007401,0xc785a40,0x0000000,0xaa0c148,0xc784300,
+	0x0000000,0x8010e81,0x6812008,0x6010e08,0x0000000,0x8010e00,0x7802148,0xa60c008,
+	0x6800008,0x7c02788,0x7802088,0xaa58008,0x6800008,0x7c029c8,0x7c02a08,0x7c00e88,
+	0x7c027c8,0x7c02808,0x7c02848,0x7c02888,0x7801ac9,0xaa0c009,0x7800e08,0x7801bc8,
+	0x7c028c8,0x7c02948,0xaa0c009,0x7800e48,0x7801cc8,0x7c02908,0x7c02988,0xc780280,
+	0x68001df,0x7802108,0x7800e89,0xa806248,0x6800827,0xc017f80,0x7802128,0xc784f80,
+	0x800c0ff,0x7802148,0xa61c008,0x0000000,0x68001df,0x78029c9,0x7802a08,0x9508248,
+	0x7c02b49,0x78029c9,0xa614049,0x7801e09,0xaa0c009,0x0000000,0x981f15f,0x78029c9,
+	0x7802a08,0x958c248,0x978425f,0x6011609,0xc000400,0x0000000,0x7800e88,0x9808788,
+	0x98087c8,0x6012408,0x7800e88,0x640d409,0x9010249,0xaa0c009,0xa8fd209,0x0000000,
+	0x6a00008,0x6011408,0xc785fc0,0x0000000,0x78028c9,0x7c02b09,0x7802a09,0x780288a,
+	0xa40b289,0x680000c,0x78029cb,0x780284a,0xa40728b,0x680000c,0xa614009,0x680008c,
+	0xa60c00a,0x680008c,0x68000cc,0x7802148,0x9441308,0x6460109,0x94a324c,0x6060109,
+	0x6420109,0x944324c,0x7802188,0x9402248,0x7800d48,0x4003208,0x9604248,0x7800d08,
+	0x4003208,0x9684248,0x6020109,0x7800848,0x7800889,0x9610209,0x6020508,0x7802848,
+	0x7802889,0x9610209,0x6020708,0x6060708,0x7802948,0x7802989,0x9610209,0x6020808,
+	0x6060808,0x7800e08,0x4401208,0x7800e49,0x4401249,0x9610209,0x6020608,0x6800048,
+	0x541f208,0x6020408,0x6450a08,0x9005208,0xa6f8008,0x6800008,0x7801ac9,0xa60c009,
+	0x6f00008,0x6d00008,0x6050a08,0x6450108,0x78008c9,0x9602209,0x7800909,0x9642209,
+	0x6050108,0x7802848,0x7802889,0x960a209,0x7801ac9,0x97e1209,0x6050608,0x780294a,
+	0x7802989,0x960a289,0x605070a,0x9c087c8,0x78029ca,0x7802a09,0x960a289,0xa403288,
+	0x0000000,0x98087c8,0x6050808,0x7802a09,0x780288a,0xa404289,0x78029c9,0x780284a,
+	0xa802289,0xc780740,0x640c908,0xe000248,0x640ca0a,0x0000000,0xf000240,0x200a24a,
+	0x606110a,0x606150a,0x606140a,0x4020208,0x7802a09,0xe000248,0x640cc0a,0x640cb0c,
+	0xf000340,0x78027c8,0xe000308,0x200b34a,0x402028b,0x0000000,0xf000240,0x200a24a,
+	0x606120a,0x606160a,0x2409309,0x200b24b,0x606130b,0x606170b,0x6460408,0x6060408,
+	0x6800048,0x541f208,0x6060408,0x7801ac8,0x6040508,0x7802948,0x7802989,0x9610209,
+	0x6040308,0x7802848,0x7802889,0x9610209,0x6040408,0x7802148,0xa638008,0x6804808,
+	0x6043008,0x6443108,0x900a248,0xa6f0009,0x91e5248,0xa6e8009,0x0000000,0x6440008,
+	0x9808008,0x6040008,0x9c08008,0x6040008,0x8040701,0x7802148,0xaa4c008,0x78029c8,
+	0xa614008,0x7801e09,0xaa0c009,0xc007b80,0x0000000,0x6411009,0x91c1249,0xa6f8009,
+	0x0000000,0x6411009,0x98093c9,0x6011009,0x6411009,0x91e1249,0xa6f8009,0xcc00000,
+	0x0000000,0x6411009,0x91c1249,0xa6f8009,0x0000000,0x7800e09,0xae0c049,0xc007400,
+	0x0000000,0x6411009,0x98093c9,0x6011009,0x8011c00,0x8011e00,0x6411009,0x91e1249,
+	0xa6f8009,0xcc00000,0x0000000,0xa60fc08,0x0000000,0x8010e90,0xc7815c0,0x800c0ff,
+	0x780080b,0xc001600,0x6800049,0x6047e08,0xaa1000b,0xc0016c0,0x6800049,0x6047f08,
+	0x8048000,0xc0002c0,0x780234a,0x6047c0c,0x780218a,0xa61400a,0x8048020,0xc000140,
+	0x780238a,0x6047d0c,0xcc00000,0x0000000,0x400034a,0x6410c0e,0x980d1cd,0x6010e0d,
+	0x680000c,0x400034a,0xaa1c00d,0x93e13ce,0x580130c,0x97e130f,0x540138e,0xc7ffec0,
+	0x440134d,0x680040d,0x240d28d,0x380c34c,0xaa4000b,0x400034a,0x6410c0e,0x980d1cd,
+	0x6010e0d,0x400034a,0xaa1c00d,0x93e13ce,0x580130c,0x97e130f,0x540138e,0xc7ffec0,
+	0x440134d,0x680040d,0x240d28d,0x380c34c,0x400034c,0xae0c00a,0xcc00000,0x0000000,
+	0x680000e,0x680000f,0x900140d,0xaa1c010,0xc000900,0x6800049,0x9408388,0xc000840,
+	0x6800049,0x94083c8,0x920140d,0xaa34010,0xc000700,0x6800049,0x9508388,0xc000640,
+	0x6800049,0x950a3c8,0xc000580,0x6800049,0x9608388,0xc0004c0,0x6800049,0x964a3c8,
+	0x604810e,0x604810f,0x580134d,0xc7ff880,0x440128a,0x0800000,0x7800008,0xc7e17c0,
+	0x6030408,0x6806008,0x6010e08,0x6410f08,0xbefc0c8,0x9118208,0xcc00000,0x7400248,
+	0x680e008,0x6010e08,0x6410f08,0xbefc0c8,0x9118208,0xcc00000,0x7400248,0x6410509,
+	0x6bfff89,0x6030409,0x0400000,0xbe0c108,0xc7ffa40,0x0000000,0x8012104,0x7800e09,
+	0xae0c049,0x6411c22,0x4000862,0xa26891f,0x6011c21,0xa21481f,0xc005240,0x0000000,
+	0xa25411f,0x9c1f15f,0x7801e09,0xaa48009,0x8011e00,0xbe42022,0x6a907c9,0x6012b09,
+	0x0000000,0x0000000,0x6412b09,0xc005180,0x0000000,0x6411009,0x98093c9,0x6011009,
+	0x6411009,0x91e1249,0xa6f8009,0xc780840,0x0000000,0xa27e022,0x6a907c9,0x6012b09,
+	0x0000000,0x0000000,0x6412b09,0xc010140,0x0000000,0x6411609,0x93e1249,0xaa4c009,
+	0x6800008,0x7c02788,0x6411109,0x7802548,0x9446248,0x6011109,0x6411009,0x9809389,
+	0x6011009,0x6411e08,0xbe22008,0x68001df,0xc07a600,0x978479f,0x6420409,0x9c09749,
+	0xc780100,0x6020409,0xc7feac0,0x800c0ff,0x601161e,0x7800e88,0x9808788,0x98087c8,
+	0x6012408,0x7800e88,0x640d409,0x9010249,0xaa0c009,0xa8fd209,0x0000000,0x6a00008,
+	0x6011408,0x7801ac8,0xaa0c008,0xc00f8c0,0x0000000,0x9c1f09f,0x7800e88,0x4001208,
+	0x7c00e88,0x7802788,0x4001208,0x7c02788,0xa21409f,0x7802949,0xb803248,0x0000000,
+	0x9c1f05f,0x78029c8,0xa618048,0x4001208,0x7801e09,0xaa0c009,0x0000000,0x981f15f,
+	0x78028c9,0xb815248,0x7c029c8,0x7802848,0x7c029c8,0x981f09f,0x7800e88,0x7800e09,
+	0x2008248,0x7802949,0x2408248,0x7c00e88,0x7802a08,0x4001208,0x7802909,0xb807248,
+	0x7c02a08,0x7801ac8,0xaa0c008,0xc7806c0,0x0000000,0x981f0df,0x7802a08,0x4001208,
+	0x7802909,0xb80f248,0x78029c8,0x4001208,0x78028c9,0xb80b248,0x7800e09,0xb807248,
+	0x7802a08,0x4001208,0x7800e49,0xb803248,0xc7800c0,0x9c1f11f,0x981f11f,0x981f0df,
+	0x78029de,0x7802a08,0x958c788,0x978479f,0xcb80020,0x0000000,0x6800048,0x7c02148,
+	0x78027c8,0x7801b4c,0xb41a308,0x6801bc9,0x2009209,0x700024a,0x780284b,0x200b28b,
+	0x7c0284b,0x7c029cb,0x780288b,0x7c02a0b,0x4001208,0xb808308,0x7c027c8,0x7800e09,
+	0x7c028c9,0x780284a,0x2409289,0xc780ac0,0x7c02949,0x4001249,0x700024a,0x7c0294a,
+	0x78028cb,0x200b28b,0xc780900,0x7c028cb,0x7802808,0x7801b8c,0xb802308,0xc7ff600,
+	0x6800008,0x7c027c8,0x7c029c8,0x7c02848,0x7801bc9,0x7c02949,0x7c028c9,0x7802808,
+	0x6801cc9,0x2009209,0x700024a,0x780288b,0x200b28b,0x7c0288b,0x7c02a0b,0x4001208,
+	0xb808308,0x7c02808,0x7800e49,0x7c02909,0x780288a,0x2409289,0xc780200,0x7c02989,
+	0x4001249,0x700024a,0x7c0298a,0x780290b,0x200b28b,0x7c0290b,0x7802888,0x7800e09,
+	0xe000248,0x0000000,0x0000000,0x7802849,0xf000200,0x2008248,0x7c00e88,0xc7fe780,
+	0x4c177df,0x78029c9,0x780284a,0x400228a,0xb407289,0x4402209,0x440128a,0x78028c8,
+	0xb403289,0x4401208,0x4401208,0x680c009,0x2009209,0x7400262,0xa21009f,0x6800021,
+	0xc7fbf40,0x0000000,0x78029c8,0x680c009,0x2009209,0xc7fbe00,0x7000261,0x78029c9,
+	0x780284a,0x400228a,0xb407289,0x4402209,0x440128a,0x78028c8,0xb403289,0x4401208,
+	0x4401208,0x680c009,0x5801288,0x2009289,0x700024a,0xa20c048,0xc7800c0,0x94082a2,
+	0x95102a2,0x740024a,0xa21009f,0x6800021,0xc7fb840,0x0000000,0x78029c8,0x680c009,
+	0x5801288,0x2009289,0x700024a,0xa20c048,0x911084a,0x900884a,0xc7fb5c0,0x0000000,
+	0x78029c9,0x780284a,0x400228a,0xb407289,0x4402209,0x440128a,0x78028c8,0xb403289,
+	0x4401208,0x4401208,0x680c009,0x5802288,0x2009289,0x700024a,0x9002208,0xa60c008,
+	0xc780240,0x95842a2,0xa60c048,0xc780180,0x95042a2,0xa60c088,0xc7800c0,0x94842a2,
+	0x94042a2,0x740024a,0xa21009f,0x6800021,0xc7fae40,0x0000000,0x78029c8,0x680c009,
+	0x5802288,0x2009289,0x700024a,0x9002208,0xaa1c008,0x918484a,0xaa14048,0x910484a,
+	0xaa0c088,0x908484a,0x900484a,0xc7faa80,0x0000000,0xc780080,0x6800021,0xc7fa980,
+	0x0000000,0x6412106,0x90c1186,0xa6f8006,0xc7dc080,0x0000000,0x6804009,0x6012d09,
+	0x6800f8a,0x8012e00,0x0000000,0xd07ff8a,0x0000000,0xcc00000,0x0000000,0x6804009,
+	0x6012c09,0x6809009,0x6012d09,0x6800f8a,0x6412e09,0xd07ffca,0x6012e09,0xcc00000,
+	0x0000000,0x6809009,0x6012c09,0x6804009,0x6012d09,0x6800f8a,0x6412e09,0xd07ffca,
+	0x6012e09,0x6411109,0x7802548,0x9446248,0x6011109,0xcc00000,0x0000000,0x7800e08,
+	0x7801b49,0xa608009,0xc780880,0xaa18049,0xaa20089,0xaa640c9,0xa608109,0xc7806c0,
+	0xc780000,0x5801288,0xc780680,0x7c01bca,0x5802288,0x540124a,0x2009289,0xb0fe209,
+	0x400128a,0x440224a,0x7c01bc9,0x5401289,0x400128a,0x540124a,0x2009289,0x5401208,
+	0xb003209,0x7801bc9,0x440128a,0x240a24a,0xc780200,0x7c01c0a,0xc000b40,0x6801bcc,
+	0xc780100,0x0000000,0xc000dc0,0x6801bcc,0x7800e48,0x7801b89,0xa608009,0xc780880,
+	0xaa18049,0xaa20089,0xaa640c9,0xa608109,0xc7806c0,0xc780000,0x5801288,0xc780680,
+	0x7c01cca,0x5802288,0x540124a,0x2009289,0xb0fe209,0x400128a,0x440224a,0x7c01cc9,
+	0x5401289,0x400128a,0x540124a,0x2009289,0x5401208,0xb003209,0x7801cc9,0x440128a,
+	0x240a24a,0xc780200,0x7c01d0a,0xc000200,0x6801ccc,0xcc00000,0x0000000,0xc000480,
+	0x6801ccc,0xcc00000,0x0000000,0x5802348,0x740030d,0x5801248,0x240a349,0x400130c,
+	0x740030a,0x54012c8,0x200b20b,0x58022cb,0x240a24b,0x400130c,0x740030a,0xcc00000,
+	0x0000000,0x5803288,0x540224a,0x2009289,0xb0fe209,0x400128a,0x440224a,0x7400309,
+	0x54012c8,0x4000349,0x540224a,0x2009289,0xb0fe2c9,0x400128a,0x440224a,0x240a349,
+	0x400130c,0x740030a,0x54012c8,0x200b20b,0x4000349,0x540224a,0x2009289,0xb0fe2c9,
+	0x400128a,0x440224a,0x240a349,0x400130c,0x740030a,0x54022c8,0x4000349,0x540224a,
+	0x2009289,0xb0fe2c9,0x400128a,0x440224a,0x240a349,0x400130c,0x740030a,0xcc00000,
+	0x0000000,0x640c308,0x2008308,0x6035108,0x6800808,0x6035208,0x6800149,0x680c00a,
+	0x700024b,0x740028b,0xb6105c9,0x4001249,0xc7fff00,0x400128a,0x6a0c008,0x6035008,
+	0x6435008,0x580f208,0xbef8048,0x0000000,0x6435308,0x900c208,0xa6f8008,0x0000000,
+	0xcc00000,0x0000000,0x640c408,0x2008308,0x6035108,0x6801008,0x6035208,0x6800609,
+	0x680c00a,0x700024b,0x740028b,0xb611589,0x4001249,0xc7fff00,0x400128a,0x6a0c008,
+	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x6435308,0x900c208,0xa6f8008,
+	0x0000000,0xcc00000,0x0000000,0x640c308,0x2008308,0x6035108,0x6800808,0x6035208,
+	0x6b0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x6800149,0x680c00a,
+	0x700028b,0x740024b,0xb6105c9,0x4001249,0xc7fff00,0x400128a,0xcc00000,0x0000000,
+	0x640c408,0x2008308,0x6035108,0x6801008,0x6035208,0x6b0c008,0x6035008,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x6800609,0x680c00a,0x700028b,0x740024b,0xb611589,
+	0x4001249,0xc7fff00,0x400128a,0xcc00000,0x0000000,0x640c508,0x2008308,0x6035108,
+	0x6801467,0xc009680,0x6435128,0x6800c08,0x6035208,0x68015c9,0x680c00a,0x700024b,
+	0x740028b,0xb612009,0x4001249,0xc7fff00,0x400128a,0x6a0c008,0x6035008,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x6435308,0x900c208,0xa6f8008,0x0000000,0x7800f48,
+	0xaa20008,0x540330c,0x7801608,0xaa0c008,0x6800008,0x6900008,0xc000100,0x200c20c,
+	0xcc00000,0x0000000,0x680000d,0x8070300,0x680c00b,0x680000a,0x6470408,0x6470409,
+	0x9508209,0x74002c8,0x40012cb,0xbaeffca,0x400128a,0xaa3800d,0x0000000,0x6470508,
+	0x7c0fe88,0x9210208,0x7c0fec8,0x6470608,0x7c0ff08,0x9210208,0x7c0ff48,0x6470708,
+	0x7c0ff88,0x9210208,0x7c0ffc8,0x640cd08,0x2008308,0x540924d,0x2008248,0x6035108,
+	0x6804008,0x6035208,0x6a0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0xba0c04d,0xcc00000,0x0000000,0xc7ff640,0x400134d,0x640c508,0x2008308,0x6035108,
+	0x6801427,0xc008280,0x6435128,0x6800c08,0x6035208,0x6b0c008,0x6035008,0x6435008,
+	0x580f208,0xbef8048,0x0000000,0x68015c9,0x680c00a,0x700028b,0x740024b,0xb612009,
+	0x4001249,0xc7fff00,0x400128a,0xc000e00,0x0000000,0x7800f48,0xaa20008,0x540330c,
+	0x7801608,0xaa0c008,0x6800008,0x6900008,0xc000100,0x200c20c,0xcc00000,0x0000000,
+	0x680000d,0x8070200,0x640cd08,0x2008308,0x540924d,0x2008248,0x6035108,0x6804008,
+	0x6035208,0x6b0c008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x680c00b,
+	0x680000a,0x70002c8,0x40012cb,0x6070408,0x9108248,0x6070409,0xbaeffca,0x400128a,
+	0xaa3800d,0x0000000,0x780fe88,0x780fec9,0x9610209,0x6070508,0x780ff08,0x780ff49,
+	0x9610209,0x6070608,0x780ff88,0x780ffc9,0x9610209,0x6070708,0xba0c04d,0xcc00000,
+	0x0000000,0xc7ff640,0x400134d,0x7801708,0x7801889,0x9421209,0x7801849,0x9441209,
+	0x7801a89,0x9461209,0x7800f09,0x9483209,0x7800ec9,0x94e3209,0x7800f89,0x9741209,
+	0x78018c9,0x9761209,0x7800d49,0x780190a,0x2409289,0x9782209,0x6011708,0x6412508,
+	0x7801009,0x9401209,0x78010c9,0x9482209,0x7801109,0x94c2209,0x7801049,0x9504209,
+	0x7801089,0x9584209,0x6800cc9,0x9706209,0x78008c9,0x9442209,0xaa18009,0x680018a,
+	0x4401249,0x340a24a,0x960420a,0x9808048,0x7800909,0x97c2209,0xaa18009,0x680018a,
+	0x4401249,0x340a24a,0x968420a,0x9808048,0x6012508,0x6470108,0x7800f49,0x9401209,
+	0x9421209,0x9441209,0x7800d49,0x9482209,0x6070108,0x6470b08,0x78008c9,0x9402209,
+	0x7800909,0x9482209,0x9502209,0x6070b08,0x6440808,0x78012c9,0x9401209,0x7801849,
+	0x9421209,0x6040808,0x6440c08,0x78008c9,0x9402209,0x7800909,0x9442209,0x6040c08,
+	0xcc00000,0x0000000,0xc003100,0x0000000,0x7802348,0x7c04408,0x7802388,0x7c04448,
+	0x7802188,0x7c04488,0x7802288,0x7c044c8,0x7802148,0x7c04508,0x7802108,0x7c04548,
+	0x7800848,0x7c045c8,0x7800888,0x7c04608,0x7800c88,0x7c04648,0x7800cc8,0x7c04688,
+	0x7800948,0x7c046c8,0x7802208,0x7c04708,0x7802448,0x7c04748,0x7802488,0x7c04788,
+	0x7801fc8,0x7c047c8,0x78024c8,0x7c04808,0x7800a88,0x7c04848,0x7802ac8,0x7c04888,
+	0x7801ac8,0x7801b09,0x5401249,0x2c08248,0x7c048c8,0x7801b48,0x7c04908,0x7801b88,
+	0x7c04948,0x7801bc8,0x7c04988,0x7801c08,0x7c049c8,0x7801c48,0x7c04a08,0x7801c88,
+	0x7c04a48,0x7801cc8,0x7c04a88,0x7801d08,0x7c04ac8,0x7801d48,0x7c04b08,0x7801d88,
+	0x7c04b48,0x7801f08,0x7c04bc8,0x7801f48,0x7c04c08,0x7802688,0x7c04c48,0x78026c8,
+	0x7c04c88,0x7801948,0x7c04cc8,0x7801988,0x7c04d08,0x7802088,0x7c04d48,0x78014c8,
+	0x7c04e08,0x7801508,0x7c04e48,0x7801548,0x7c04e88,0x7801588,0x7c04ec8,0x78008c8,
+	0x7800909,0x9484209,0x7c04f08,0x6800009,0x7801148,0xa20c048,0x7801008,0x9809009,
+	0xa20c048,0x7801dc8,0x9809049,0xa20c048,0x7801e48,0x9809089,0xa20c048,0x7801e88,
+	0x98090c9,0xa20c048,0x7801ec8,0x9809109,0xa20c048,0x7802608,0x9809149,0xa20c048,
+	0x7802648,0x9809189,0xa20c048,0x78022c8,0x98091c9,0xa20c048,0x7802308,0x9809209,
+	0xa20c048,0x7802708,0x9809249,0xa20c048,0x0000000,0x9809289,0x7c04b89,0x680500a,
+	0x6802b88,0x7000209,0x7400289,0x400128a,0xbaf7348,0x4001208,0x640c108,0x6035108,
+	0x6802008,0x6035208,0x6a04008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,
+	0x6435308,0x900c208,0xa6f8008,0x0000000,0xcc00000,0x0000000,0x800cf00,0x800c0ff,
+	0x6800009,0x680ffca,0x7000248,0x9808408,0x600cf08,0x0000000,0x640cf08,0xa6fc008,
+	0xb403289,0xc7ffe40,0x4001249,0xcc00000,0x0000000,0x680000a,0x680000b,0x6804008,
+	0x7000209,0x580f209,0xbe20048,0x580e209,0xa20c048,0x400128a,0x40012cb,0x6804008,
+	0xbae040a,0x2008288,0x7c02a8b,0xcc00000,0x0000000,0x6800009,0x7c02a89,0x68003ca,
+	0x68043c8,0x7400209,0x440128a,0xaef800a,0x4401208,0x6a00009,0x7400209,0xcc00000,
+	0x0000000,0x6800048,0x7c02448,0x7c02288,0xcc00000,0x0000000,0x680580a,0x6802048,
+	0x7000209,0x7400289,0x400128a,0xbaf6748,0x4001208,0xcc00000,0x0000000,0x6802b8d,
+	0x6410c08,0x8010e81,0x93e1248,0xaa10009,0x7c02ac9,0xc0003c0,0x780234c,0xa62c00b,
+	0x0000000,0x6410c08,0x8010e81,0x93e1248,0xaa18009,0x7802ac9,0x9809049,0x7c02ac9,
+	0xc000100,0x780238c,0xcc00000,0x0000000,0x7802a88,0xb21c088,0x6800049,0xb214108,
+	0x6800089,0xb20c208,0x68000c9,0x6800109,0x680080a,0x240a24a,0x98091c9,0x6410c08,
+	0x6010e09,0x3808288,0x7400348,0x400134d,0xaeec04c,0x440130c,0xcc00000,0x0000000,
+	0x6460409,0x9001289,0xaaf800a,0x0000000,0xcc00000,0x0000000,0x78029c8,0x680d009,
+	0x2009209,0x700024d,0x7802a08,0x680ee09,0x2009209,0x700024e,0x680000f,0xac0338d,
+	0x6ee000f,0x6ea000f,0x6050a0f,0x78029c8,0xb615e08,0x680d009,0x2009209,0x7802b4d,
+	0x740024d,0x7802a08,0xb615108,0x680ee09,0x2009209,0x7802b4e,0x740024e,0xcc00000,
+	0x0000000,0x67f2f23,0xbefc063,0x640c023,0xa6f7fe3,0x0000000,0x640d223,0xbe0c063,
+	0x908c9a3,0x6800026,0x40019a6,0xaa10066,0x68004a7,0xc001380,0x4000a26,0x6410b23,
+	0x98230a3,0x6010b23,0x6412123,0xa2fc063,0x0000000,0xd07fda6,0x0000000,0x6410c23,
 	0x92039a3,0x7c04da6,0x93269a3,0x7c04de6,0x6410d23,0x6410b23,0x600d326,0xa61c8a6,
 	0x0000000,0x640ce24,0xa2100a4,0x6440123,0xa2fc063,0x0000000,0x8012101,0x640d224,
-	0xa214064,0x0000000,0x800c009,0xc7ff840,0x8007401,0x640d224,0xbe480a4,0x6803c25,
-	0x78034e3,0xaa3c826,0xa25c063,0xaa34866,0xaa308a6,0xa2500a3,0xa24c123,0xbe24124,
-	0xbe18223,0xa20c224,0xb218566,0xc780380,0xaa08526,0xa6304e6,0x98230e3,0x7c034e3,
-	0xaa24826,0x6800065,0xaa1c866,0x68000a5,0xaa148a6,0x68000e5,0xb20c566,0x6800125,
-	0x6803c25,0xae1c566,0xa61bc25,0x640d224,0x910c8e4,0x40018e3,0x950c923,0x600d224,
-	0x68000a7,0xc000180,0x4000a25,0x600c025,0x8030504,0xc7fedc0,0x0000000,0x600d128,
-	0x7803528,0xaa18028,0x0000000,0x600d027,0x8007401,0x640d027,0xa6fc027,0x0000000,
-	0xcc00000,0x0000000,0x600d128,0x7803528,0xaa54028,0x0000000,0x640cf28,0x6035128,
-	0x680fc28,0x6035228,0x6a00028,0x6035028,0x6435028,0x580fa28,0xbef8068,0x0000000,
-	0x6435328,0x900ca28,0xa6f8028,0x0000000,0x9827427,0x600d027,0x8007401,0x640d027,
-	0xa6fc027,0xcc00000,0x0000000,0x7800848,0x7800889,0x9610209,0x6012308,0x6800208,
-	0x7800d49,0x3408248,0x6040608,0x7800849,0x780088a,0x960f24a,0x6040209,0x7800e09,
-	0x7800e4a,0x960c24a,0x6040309,0x8040400,0xcc00000,0x0000000,0x0000000,0x0000000,
+	0xa214064,0x0000000,0x800c009,0xc7ff580,0x8007401,0x640d224,0xbe580a4,0x9042924,
+	0xbe0c0e4,0x68001e3,0x7c034e3,0x6803c25,0x78034e3,0xaa3c826,0xa25c063,0xaa34866,
+	0xaa308a6,0xa2500a3,0xa24c123,0xaa24064,0xbe18223,0xa20c0a4,0xb218566,0xc780380,
+	0xaa08526,0xa6304e6,0x98230e3,0x7c034e3,0xaa24826,0x6800065,0xaa1c866,0x68000a5,
+	0xaa148a6,0x68000e5,0xb20c566,0x6800125,0x6803c25,0xae1c566,0xa61bc25,0x640d224,
+	0x920c8e4,0x40018e3,0x960c923,0x600d224,0x68000a7,0xc000180,0x4000a25,0x600c025,
+	0x8030504,0xc7fea00,0x0000000,0x600d128,0x7803528,0xaa18028,0x0000000,0x600d027,
+	0x8007401,0x640d027,0xa6fc027,0x0000000,0xcc00000,0x0000000,0x600d128,0x7803528,
+	0xaa54028,0x0000000,0x640cf28,0x6035128,0x680fc28,0x6035228,0x6a00028,0x6035028,
+	0x6435028,0x580fa28,0xbef8068,0x0000000,0x6435328,0x900ca28,0xa6f8028,0x0000000,
+	0x9827427,0x600d027,0x8007401,0x640d027,0xa6fc027,0xcc00000,0x0000000,0x7800848,
+	0x7800889,0x9610209,0x6012308,0x6800208,0x7800d49,0x3408248,0x6040608,0x7800849,
+	0x780088a,0x960f24a,0x6040209,0x7800e09,0x7800e4a,0x960c24a,0x6040309,0x8040400,
+	0xcc00000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
+	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
 	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-};
\ No newline at end of file
+};
diff --git a/drivers/amlogic/amports/vh265.c b/drivers/amlogic/amports/vh265.c
index 49a8df303809..1aaea7d1dba3 100755
--- a/drivers/amlogic/amports/vh265.c
+++ b/drivers/amlogic/amports/vh265.c
@@ -16,7 +16,6 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
  *
  */
-
 #include <linux/kernel.h>
 #include <linux/module.h>
 #include <linux/types.h>
@@ -38,6 +37,8 @@
 #include <linux/amlogic/amports/vframe_receiver.h>
 #include <linux/dma-mapping.h>
 #include <linux/dma-contiguous.h>
+#include <linux/slab.h>
+#include "amports_priv.h"
 
 #include <mach/am_regs.h>
 #include "vdec_reg.h"
@@ -47,6 +48,13 @@
 #include "vh265_mc.h"
 
 //#define ERROR_HANDLE_DEBUG
+#define USE_BUF_BLOCK
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
+#undef SUPPORT_4K2K
+#else
+#define SUPPORT_4K2K
+#endif
+
 #ifndef STAT_KTHREAD
 #define STAT_KTHREAD 0x40
 #endif
@@ -65,6 +73,8 @@
 
 #define DUR2PTS(x) ((x)*90/96)
 
+extern u32 get_blackout_policy(void);
+
 static int  vh265_vf_states(vframe_states_t *states, void*);
 static vframe_t *vh265_vf_peek(void*);
 static vframe_t *vh265_vf_get(void*);
@@ -118,7 +128,8 @@ static u32 error_system_watchdog_count;
 #define H265_DEBUG_LOAD_UCODE_FROM_FILE   0x200000
 #define H265_DEBUG_ERROR_TRIG             0x400000
 
-
+extern const u32 h265_ucode_v;
+const u32 h265_version = 2;
 static u32 debug = 0;
 #ifdef ERROR_HANDLE_DEBUG
 static u32 dbg_nal_skip_flag = 0;   //bit[0], skip vps; bit[1], skip sps; bit[2], skip pps
@@ -130,6 +141,21 @@ static u32 decode_stop_pos_pre = 0;
 static u32 decode_pic_begin = 0;
 static uint slice_parse_begin=0;
 static u32 step = 0;
+#ifdef SUPPORT_4K2K
+static u32 buf_alloc_width = 4096;
+static u32 buf_alloc_height = 2304;
+#else
+static u32 buf_alloc_width = 1920;
+static u32 buf_alloc_height = 1088;
+#endif
+static u32 buf_alloc_size = 0;
+/* 
+bit[0]: 0, 
+    buf[1]: 0, always release cma buffer when stop
+    buf[1]: 1, never release cma buffer when stop
+buf[0]: 1, when stop, release cma buffer if blackout is 1; do not release cma buffer is blackout is not 1
+*/
+static u32 cma_mode = 1;
 /**/
 /* 
 bit[1:0]PB_skip_mode: 0, start decoding at begin; 1, start decoding after first I;  2, only decode and display none error picture; 3, start decoding and display after IDR,etc
@@ -147,7 +173,13 @@ struct task_struct *h265_task = NULL;
 /*
 error handling
 */
-static u32 error_handle_policy = 0;  /* bit 0: 1, wait vps/sps/pps after error recovery; */
+/*error_handle_policy:
+     bit 0: 0, auto skip error_skip_nal_count nals before error recovery;   1, skip error_skip_nal_count nals before error recovery;
+     bit 1 (valid only when bit0 == 1): 1, wait vps/sps/pps after error recovery; 
+     bit 2 (valid only when bit0 == 0): 0, auto search after error recovery (hevc_recover() called); 
+                                        1, manual search after error recovery (change to auto search after get IDR: WRITE_VREG(NAL_SEARCH_CTL, 0x2))
+*/
+static u32 error_handle_policy = 0;  
 static u32 error_skip_nal_count = 6;
 static u32 error_handle_threshold = 30;
 static u32 error_handle_nal_skip_threshold = 10;
@@ -381,7 +413,10 @@ bit 1:  0, auto skip for noneseamless stream; 1, no skip
 bit [3:2]: valid when bit1==0;  
 0, auto skip nal before first vps/sps/pps/idr; 
 1, auto skip nal before first vps/sps/pps
-2, auto skip nal before fist  vps/sps/pps, and not decode until the first I slice (with slice address of 0)
+2, auto skip nal before first  vps/sps/pps, and not decode until the first I slice (with slice address of 0)
+
+3, auto skip before first I slice (nal_type >=16 && nal_type<=21)
+bit [16:4] nal skip count (valid when bit0 == 1 (manual mode) )
 */
 #define NAL_SEARCH_CTL		      HEVC_ASSIST_SCRATCH_I
 #define CUR_NAL_UNIT_TYPE       HEVC_ASSIST_SCRATCH_J
@@ -689,11 +724,30 @@ enum SliceType
   I_SLICE
 };
 
+#ifdef USE_BUF_BLOCK
+#define MAX_BUF_NUM 16
+typedef struct BUF_{
+  int index;
+  unsigned int alloc_flag;
+	/*buffer*/
+  unsigned int  cma_page_count;
+  struct page *alloc_pages;
+	unsigned long start_adr;
+	unsigned long size;
+	
+	unsigned long free_start_adr;
+}BUF_t;
+static BUF_t m_BUF[MAX_BUF_NUM];
+static u32 max_buf_num = MAX_BUF_NUM;
+#endif
+
 #define MAX_REF_PIC_NUM 16
-#define MAX_SLICE_NUM 1024
+#define MAX_REF_ACTIVE  MAX_REF_PIC_NUM
+//level 6, 6.1 maximum slice number is 800; other is 200
+#define MAX_SLICE_NUM 800
 typedef struct PIC_{
-	struct PIC_ * next;
-        int index;
+  int index;
+  int BUF_index;
 	int POC;
 	int decode_idx;
 	int slice_type;
@@ -718,6 +772,11 @@ typedef struct PIC_{
 	unsigned long mc_u_v_adr;
 	int mc_canvas_y;
 	int mc_canvas_u_v;
+	int width;
+	int height;
+ 
+  int y_canvas_index;
+  int uv_canvas_index;
 }PIC_t;
 static PIC_t m_PIC[MAX_REF_PIC_NUM ];
 
@@ -729,8 +788,6 @@ typedef struct hevc_state_{
     unsigned int pic_list_init_flag;
     unsigned int use_cma_flag;
     
-    PIC_t* free_pic_list;
-    PIC_t* decode_pic_list;
     unsigned short* rpm_ptr;
     unsigned short* lmem_ptr;
     unsigned short* debug_ptr;
@@ -810,8 +867,12 @@ typedef struct hevc_state_{
 	u32 shift_byte_count_hi;
     int pts_mode_switching_count;
     int pts_mode_recovery_count;
+    
+    int buf_num;
+    int pic_num;
 }hevc_stru_t;
 
+static void set_canvas(PIC_t* pic);
 
 static void hevc_init_stru(hevc_stru_t* hevc, BuffInfo_t* buf_spec_i, buff_t* mc_buf_i)
 {
@@ -820,8 +881,6 @@ static void hevc_init_stru(hevc_stru_t* hevc, BuffInfo_t* buf_spec_i, buff_t* mc
     hevc->mc_buf = mc_buf_i;
 
     hevc->curr_POC = INVALID_POC;
-    hevc->free_pic_list = NULL;
-    hevc->decode_pic_list = NULL;
 
     hevc->pic_list_init_flag = 0;
     hevc->use_cma_flag = 0;
@@ -876,9 +935,11 @@ static void hevc_init_stru(hevc_stru_t* hevc, BuffInfo_t* buf_spec_i, buff_t* mc
     for(i=0; i<MAX_REF_PIC_NUM; i++){
         m_PIC[i].index = -1;
     }
+    hevc->buf_num = 0;
+    hevc->pic_num = 0;
 }    
 
-static int prepare_display_buf(hevc_stru_t* hevc, int display_buff_id, int stream_offset, unsigned short slice_type);
+static int prepare_display_buf(hevc_stru_t* hevc, PIC_t* pic);
 
 static void get_rpm_param(param_t* params)
 {
@@ -896,35 +957,15 @@ static void get_rpm_param(param_t* params)
 }
 
 
-static void in_q(PIC_t** list_head, PIC_t* pic)
-{
-	PIC_t* list_tail = *list_head;	
-	pic->next = NULL;
-	if(*list_head == NULL){
-		*list_head = pic;	
-	}
-	else{
-		while(list_tail->next){
-			list_tail = list_tail->next;		
-		}
-		list_tail->next = pic;
-	}
-}
-
-static PIC_t* out_q(PIC_t** list_head)
-{
-	PIC_t* pic = *list_head;
-	if(pic){
-		*list_head = pic->next;
-	}
-	return pic;
-}
-
 static PIC_t* get_pic_by_POC(hevc_stru_t* hevc, int POC)
 {
-	PIC_t* pic = hevc->decode_pic_list;
+  int i;
+	PIC_t* pic;
 	PIC_t* ret_pic = NULL;
-	while(pic){
+  for(i=0; i<MAX_REF_PIC_NUM; i++){
+    pic = &m_PIC[i];
+    if(pic->index == -1) 
+        continue;
 		if(pic->POC==POC){
 			if(ret_pic==NULL){
 				ret_pic = pic;		
@@ -934,16 +975,19 @@ static PIC_t* get_pic_by_POC(hevc_stru_t* hevc, int POC)
 					ret_pic = pic;			
 			}
 		}
-		pic = pic->next;
 	}
 	return ret_pic;
 }
 
 static PIC_t* get_ref_pic_by_POC(hevc_stru_t* hevc, int POC)
 {
-	PIC_t* pic = hevc->decode_pic_list;
+	int i;
+	PIC_t* pic;
 	PIC_t* ret_pic = NULL;
-	while(pic){
+  for(i=0; i<MAX_REF_PIC_NUM; i++){
+    pic = &m_PIC[i];
+    if(pic->index == -1) 
+        continue;
 		if((pic->POC==POC)&&(pic->referenced)){
 			if(ret_pic==NULL){
 			    ret_pic = pic;
@@ -953,7 +997,6 @@ static PIC_t* get_ref_pic_by_POC(hevc_stru_t* hevc, int POC)
 				    ret_pic = pic;			
 			}
 		}
-		pic = pic->next;
 	}
 	
 	if(ret_pic==NULL){
@@ -963,19 +1006,6 @@ static PIC_t* get_ref_pic_by_POC(hevc_stru_t* hevc, int POC)
 	return ret_pic;
 }
 
-static PIC_t* get_pic_by_IDX(hevc_stru_t* hevc, int idx)
-{
-	int i = 0;
-	PIC_t* pic = hevc->decode_pic_list;
-	while(pic){
-		if(i==idx)
-			break;
-		pic = pic->next;
-		i++;
-	}
-	return pic;
-}
-
 static unsigned int log2i (unsigned int val) {
     unsigned int ret = -1;
     while (val != 0) {
@@ -986,26 +1016,124 @@ static unsigned int log2i (unsigned int val) {
 }
 
 static int init_buf_spec(hevc_stru_t* hevc);
-extern u32 get_blackout_policy(void);
-static void uninit_pic_list(hevc_stru_t* hevc)
+
+#ifdef USE_BUF_BLOCK
+static void uninit_buf_list(hevc_stru_t* hevc)
 {
 	int i;
+	unsigned char release_cma_flag = 0;
+	if(cma_mode&1){
+    	if (get_blackout_policy() == 1) {
+	        release_cma_flag = 1;
+    	}
+	}
+	else{
+	    if(cma_mode&2){
+	    }
+	    else{
+	        release_cma_flag = 1;
+	    }
+	}
+	    
+	if(release_cma_flag){    
+    	for(i=0; i<max_buf_num; i++){
+        if(m_BUF[i].alloc_pages!=NULL && m_BUF[i].cma_page_count>0){
+            dma_release_from_contiguous(cma_dev, m_BUF[i].alloc_pages, m_BUF[i].cma_page_count);
+            printk("release cma buffer[%d] (%d %x)\n", i, m_BUF[i].cma_page_count, (unsigned)m_BUF[i].alloc_pages);
+            m_BUF[i].alloc_pages=NULL;
+            m_BUF[i].cma_page_count=0;
+        }
+      }    
+  }
+  hevc->pic_list_init_flag = 0;
+  hevc->buf_num = 0;
+}
 
-	if (get_blackout_policy() == 1) {
-		for(i=0; i<MAX_REF_PIC_NUM; i++){
-			if(m_PIC[i].alloc_pages!=NULL && m_PIC[i].cma_page_count>0){
-				dma_release_from_contiguous(cma_dev,m_PIC[i].alloc_pages, m_PIC[i].cma_page_count);
-				printk("release cma buffer[%d] (%d %x)\n", i, m_PIC[i].cma_page_count, (unsigned)m_PIC[i].alloc_pages);
-				m_PIC[i].alloc_pages=NULL;
-				m_PIC[i].cma_page_count=0;
-			}
+static void init_buf_list(hevc_stru_t* hevc)
+{
+	int i;
+	int buf_size;
+ 	int mc_buffer_end = hevc->mc_buf->buf_start + hevc->mc_buf->buf_size;
+	
+	if(buf_alloc_size>0){
+	    buf_size = buf_alloc_size;
+	    if(debug)printk("[Buffer Management] init_buf_list:\n");	
+	}
+	else{
+    	int pic_width = buf_alloc_width?buf_alloc_width:hevc->pic_w;
+    	int pic_height = buf_alloc_height?buf_alloc_height:hevc->pic_h;
+    	int lcu_size = hevc->lcu_size ;
+            int pic_width_lcu  = ( pic_width %lcu_size  ) ? pic_width /lcu_size  + 1 : pic_width /lcu_size; 
+            int pic_height_lcu = ( pic_height %lcu_size ) ? pic_height/lcu_size + 1 : pic_height/lcu_size; 
+            int lcu_total       =pic_width_lcu*pic_height_lcu;
+    	int mc_buffer_size_u_v = lcu_total*lcu_size*lcu_size/2; 
+    	int mc_buffer_size_u_v_h = (mc_buffer_size_u_v + 0xffff)>>16; //64k alignment
+
+      buf_size = (mc_buffer_size_u_v_h<<16)*3;
+	    if(debug)printk("[Buffer Management] init_buf_list (width %d height %d):\n", pic_width, pic_height);	
+  }  
+
+	for(i=0; i<max_buf_num; i++){
+		if(((i+1)*buf_size) > hevc->mc_buf->buf_size){
+        if(use_cma){
+            hevc->use_cma_flag = 1;
+        }
+        else{
+            if(debug)printk("%s maximum buf size is used\n", __func__);
+              break;
+        }
+    }
+    m_BUF[i].alloc_flag = 0;
+    m_BUF[i].index = i;
+		
+		if(hevc->use_cma_flag){
+		    if((m_BUF[i].cma_page_count!=0) && (m_BUF[i].alloc_pages!=NULL) &&
+		        (m_BUF[i].size != buf_size)){
+            dma_release_from_contiguous(cma_dev, m_BUF[i].alloc_pages, m_BUF[i].cma_page_count);
+            printk("release cma buffer[%d] (%d %x)\n", i, m_BUF[i].cma_page_count, (unsigned)m_BUF[i].alloc_pages);
+            m_BUF[i].alloc_pages=NULL;
+            m_BUF[i].cma_page_count=0;		        
+		    }
+		    if(m_BUF[i].alloc_pages == NULL){
+    		    m_BUF[i].cma_page_count = PAGE_ALIGN(buf_size)/PAGE_SIZE;
+            m_BUF[i].alloc_pages = dma_alloc_from_contiguous(cma_dev, m_BUF[i].cma_page_count, 4);
+            if(m_BUF[i].alloc_pages == NULL){
+                printk("allocate cma buffer[%d] fail\n", i);
+                m_BUF[i].cma_page_count = 0;
+                break;
+            }
+            m_BUF[i].start_adr = page_to_phys(m_BUF[i].alloc_pages);
+            printk("allocate cma buffer[%d] (%d,%x,%x)\n", i, m_BUF[i].cma_page_count , (unsigned)m_BUF[i].alloc_pages, (unsigned)m_BUF[i].start_adr);
+        }
+        else{
+            printk("reuse cma buffer[%d] (%d,%x,%x)\n", i, m_BUF[i].cma_page_count , (unsigned)m_BUF[i].alloc_pages, (unsigned)m_BUF[i].start_adr);
+        }
 		}
+		else{
+		    m_BUF[i].cma_page_count = 0;
+		    m_BUF[i].alloc_pages = NULL;
+		    m_BUF[i].start_adr = hevc->mc_buf->buf_start + i*buf_size;
+    }		    
+    m_BUF[i].size = buf_size;
+    m_BUF[i].free_start_adr = m_BUF[i].start_adr;
+
+		if(((m_BUF[i].start_adr+buf_size) > mc_buffer_end) && (m_BUF[i].alloc_pages==NULL)){
+	    if(debug) printk("Max mc buffer or mpred_mv buffer is used\n");		
+			break;
+		}
+
+    if(debug){
+        printk("Buffer %d: start_adr %lx size %lx\n", i, m_BUF[i].start_adr, m_BUF[i].size);
+    }
 	}
-	hevc->pic_list_init_flag = 0;
+	
+	hevc->buf_num = i;
+
 }
 
-static void init_pic_list(hevc_stru_t* hevc)
+static int config_pic(hevc_stru_t* hevc, PIC_t* pic)
 {
+	int ret = -1;
 	int i;
 	int pic_width = hevc->pic_w;
 	int pic_height = hevc->pic_h;
@@ -1017,6 +1145,138 @@ static void init_pic_list(hevc_stru_t* hevc)
 	//int MV_MEM_UNIT=lcu_size_log2==6 ? 0x100 : lcu_size_log2==5 ? 0x40 : 0x10;
 	int MV_MEM_UNIT=lcu_size_log2==6 ? 0x200 : lcu_size_log2==5 ? 0x80 : 0x20;
 	int mc_buffer_size_u_v = lcu_total*lcu_size*lcu_size/2;
+	int mc_buffer_size_u_v_h = (mc_buffer_size_u_v + 0xffff)>>16; //64k alignment
+	int mpred_mv_end = hevc->work_space_buf->mpred_mv.buf_start + hevc->work_space_buf->mpred_mv.buf_size;
+  int y_adr = 0;
+  
+  if((hevc->work_space_buf->mpred_mv.buf_start + (((pic->index+1) * lcu_total)*MV_MEM_UNIT)) <= mpred_mv_end){
+      for(i=0; i<hevc->buf_num; i++){
+        y_adr = ((m_BUF[i].free_start_adr + 0xffff)>>16)<<16; //64k alignment
+    		if( (y_adr+((mc_buffer_size_u_v_h<<16)*3)) <= (m_BUF[i].start_adr+m_BUF[i].size) ){
+            m_BUF[i].free_start_adr = y_adr+((mc_buffer_size_u_v_h<<16)*3);
+            break;
+        }
+      }
+      if(i<hevc->buf_num){
+        pic->BUF_index = i;
+        pic->mc_y_adr = y_adr;
+    		pic->mc_u_v_adr = y_adr + ((mc_buffer_size_u_v_h<<16)<<1);
+    
+    		pic->mc_canvas_y = (pic->index<<1);
+    		pic->mc_canvas_u_v = (pic->index<<1)+1;
+    
+		    pic->mpred_mv_wr_start_addr = hevc->work_space_buf->mpred_mv.buf_start + ((pic->index * lcu_total)*MV_MEM_UNIT);
+        if(debug){
+            printk("%s index %d BUF_index %d mc_y_adr %lx mc_u_v_adr %lx mpred_mv_wr_start_adr %lx\n", __func__,
+                pic->index, pic->BUF_index, pic->mc_y_adr, pic->mc_u_v_adr, pic->mpred_mv_wr_start_addr);
+        }
+        ret = 0;
+      }
+  }  
+  return ret;
+}
+
+/*
+free m_BUF[..] for all free m_PIC[..] with the different size of hevc->pic_w,hevc->pic_h
+*/
+static int recycle_buf(hevc_stru_t* hevc)
+{
+    int i,j;
+    for(i=0; i<MAX_REF_PIC_NUM; i++){
+        PIC_t* pic = &m_PIC[i];
+        if(pic->index == -1)
+            continue;
+        if(pic->width!=hevc->pic_w || pic->height!=hevc->pic_h){
+            if(pic->output_mark == 0 && pic->referenced == 0
+                    && pic->output_ready == 0
+                ){
+                pic->BUF_index = -1;
+                if(debug)
+                    printk("%s: %d\n", __func__, pic->index);
+            }
+        }        
+    }    
+    
+    for(i=0; i<hevc->buf_num; i++){
+        if(m_BUF[i].free_start_adr!=m_BUF[i].start_adr){
+            for(j=0; j<MAX_REF_PIC_NUM; j++){
+                PIC_t* pic = &m_PIC[j];
+                if(pic->index == -1) 
+                    continue;
+                if(pic->BUF_index == i)
+                    break;    
+            }
+            if(j==MAX_REF_PIC_NUM){
+                m_BUF[i].free_start_adr = m_BUF[i].start_adr;    
+            }
+        }
+    }
+    return 0;
+}
+
+static void init_pic_list(hevc_stru_t* hevc)
+{
+    int i;
+    for(i=0; i<MAX_REF_PIC_NUM; i++){
+        PIC_t* pic = &m_PIC[i];
+        memset(pic, 0, sizeof(PIC_t));
+        pic->index = i;
+        pic->BUF_index = -1;
+        if(config_pic(hevc, pic)<0){
+            if(debug)
+                printk("Config_pic %d fail\n", pic->index);
+            break;
+        }
+        pic->width = hevc->pic_w;
+        pic->height = hevc->pic_h;
+        set_canvas(pic);
+    }    
+}
+
+#else
+static void uninit_pic_list(hevc_stru_t* hevc)
+{
+	int i;
+	unsigned char release_cma_flag = 0;
+	if(cma_mode&1){
+    	if (get_blackout_policy() == 1) {
+	        release_cma_flag = 1;
+    	}
+	}
+	else{
+	    if(cma_mode&2){
+	    }
+	    else{
+	        release_cma_flag = 1;
+	    }
+	}
+	    
+	if(release_cma_flag){    
+    	for(i=0; i<MAX_REF_PIC_NUM; i++){
+        if(m_PIC[i].alloc_pages!=NULL && m_PIC[i].cma_page_count>0){
+            dma_release_from_contiguous(cma_dev, m_PIC[i].alloc_pages, m_PIC[i].cma_page_count);
+            printk("release cma buffer[%d] (%d %x)\n", i, m_PIC[i].cma_page_count, (unsigned)m_PIC[i].alloc_pages);
+            m_PIC[i].alloc_pages=NULL;
+            m_PIC[i].cma_page_count=0;
+        }
+      }    
+  }
+  hevc->pic_list_init_flag = 0;
+}
+
+static void init_pic_list(hevc_stru_t* hevc)
+{
+	int i;
+	int pic_width = buf_alloc_width?buf_alloc_width:hevc->pic_w;
+	int pic_height = buf_alloc_height?buf_alloc_height:hevc->pic_h;
+	int lcu_size = hevc->lcu_size ;
+        int pic_width_lcu  = ( pic_width %lcu_size  ) ? pic_width /lcu_size  + 1 : pic_width /lcu_size; 
+        int pic_height_lcu = ( pic_height %lcu_size ) ? pic_height/lcu_size + 1 : pic_height/lcu_size; 
+        int lcu_total       =pic_width_lcu*pic_height_lcu;
+        int lcu_size_log2 = hevc->lcu_size_log2;
+	//int MV_MEM_UNIT=lcu_size_log2==6 ? 0x100 : lcu_size_log2==5 ? 0x40 : 0x10;
+	int MV_MEM_UNIT=lcu_size_log2==6 ? 0x200 : lcu_size_log2==5 ? 0x80 : 0x20;
+	int mc_buffer_size_u_v = lcu_total*lcu_size*lcu_size/2;
 	int mc_buffer_size_u_v_h = (mc_buffer_size_u_v + 0xffff)>>16;
 	int mpred_mv_end = hevc->work_space_buf->mpred_mv.buf_start + hevc->work_space_buf->mpred_mv.buf_size;
 	int mc_buffer_end = hevc->mc_buf->buf_start + hevc->mc_buf->buf_size;
@@ -1024,9 +1284,11 @@ static void init_pic_list(hevc_stru_t* hevc)
 		mc_buffer_size_u_v_h+=1;
 	}
 
-	if(debug)printk("[Buffer Management] init_pic_list (%d %d):\n", hevc->pic_w, hevc->pic_h);	
+	if(debug)printk("[Buffer Management] init_pic_list (%d %d):\n", pic_width, pic_height);	
 
-	WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR, 0x0);
+	//WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR, 0x0);
+	
+	
 	for(i=0; i<MAX_REF_PIC_NUM; i++){
 		if(((i+1)*(mc_buffer_size_u_v_h<<16)*3) > hevc->mc_buf->buf_size){
         if(use_cma){
@@ -1037,6 +1299,7 @@ static void init_pic_list(hevc_stru_t* hevc)
               break;
         }
     }
+    memset(&(m_PIC[i]), 0, sizeof(PIC_t));
     m_PIC[i].index = i;
 		m_PIC[i].mpred_mv_wr_start_addr = hevc->work_space_buf->mpred_mv.buf_start + ((i * lcu_total)*MV_MEM_UNIT);
 		
@@ -1078,16 +1341,19 @@ static void init_pic_list(hevc_stru_t* hevc)
 	    if(debug) printk("Max mc buffer or mpred_mv buffer is used\n");		
 			break;
 		}
-    in_q(&hevc->free_pic_list, &m_PIC[i]);
 
 
-		WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR, m_PIC[i].mc_y_adr|(m_PIC[i].mc_canvas_y<<8)|0x1);
-		WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR, m_PIC[i].mc_u_v_adr|(m_PIC[i].mc_canvas_u_v<<8)|0x1);
+		//WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR, m_PIC[i].mc_y_adr|(m_PIC[i].mc_canvas_y<<8)|0x1);
+		//WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR, m_PIC[i].mc_u_v_adr|(m_PIC[i].mc_canvas_u_v<<8)|0x1);
 
     if(debug&H265_DEBUG_BUFMGR){
         printk("Buffer %d: canv_y %x  canv_u_v %x mc_y_adr %lx mc_u_v_adr %lx mpred_mv_wr_start_addr %lx\n", i, m_PIC[i].mc_canvas_y,m_PIC[i].mc_canvas_u_v,m_PIC[i].mc_y_adr, m_PIC[i].mc_u_v_adr, m_PIC[i].mpred_mv_wr_start_addr);
     }
 	}
+	
+	hevc->pic_num = i;
+	
+#if 0
 	WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR, 0x1);
 
 
@@ -1096,16 +1362,19 @@ static void init_pic_list(hevc_stru_t* hevc)
 		for(i=0; i<32; i++){
 				WRITE_VREG(HEVCD_MPP_ANC_CANVAS_DATA_ADDR, 0);
         }
-
+#endif
 }
+#endif
 
 static void init_pic_list_hw(void)
 {
 	int i;
 	WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CONF_ADDR, 0x0);
 	for(i=0; i<MAX_REF_PIC_NUM; i++){
+#ifndef USE_BUF_BLOCK
       if(m_PIC[i].index == -1)
          break;
+#endif         
 		  WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR, m_PIC[i].mc_y_adr|(m_PIC[i].mc_canvas_y<<8)|0x1);
 		  WRITE_VREG(HEVCD_MPP_ANC2AXI_TBL_CMD_ADDR, m_PIC[i].mc_u_v_adr|(m_PIC[i].mc_canvas_u_v<<8)|0x1);
 	}
@@ -1122,39 +1391,51 @@ static void init_pic_list_hw(void)
 
 static void dump_pic_list(hevc_stru_t* hevc)
 {
-	PIC_t* pic = hevc->decode_pic_list;
-	printk("pic_list_init_flag is %d\n", hevc->pic_list_init_flag);
-	while(pic){
+	int i;
+	PIC_t* pic;
+	printk("pic_list_init_flag is %d\r\n", hevc->pic_list_init_flag);
+  for(i=0; i<MAX_REF_PIC_NUM; i++){
+    pic = &m_PIC[i];
+    if(pic->index == -1) 
+        continue;
 		printk("index %d decode_idx:%d,	POC:%d,	referenced:%d,	num_reorder_pic:%d, output_mark:%d, output_ready:%d, mv_wr_start %lx\n", pic->index, pic->decode_idx, pic->POC, pic->referenced, pic->num_reorder_pic, pic->output_mark, pic->output_ready, pic->mpred_mv_wr_start_addr);
-		pic = pic->next;
 	}
 }
 
 static PIC_t* output_pic(hevc_stru_t* hevc, unsigned char flush_flag)
 {
 	int num_pic_not_yet_display = 0;
-	PIC_t* pic = hevc->decode_pic_list;
+	int i;
+	PIC_t* pic;
 	PIC_t* pic_display = NULL;
-	while(pic){
+  for(i=0; i<MAX_REF_PIC_NUM; i++){
+    pic = &m_PIC[i];
+    if(pic->index == -1) 
+        continue;
 		if(pic->output_mark){
 			num_pic_not_yet_display++;
 		}
-		pic = pic->next;
 	}
 
-	pic = hevc->decode_pic_list;
-	while(pic){
+  for(i=0; i<MAX_REF_PIC_NUM; i++){
+    pic = &m_PIC[i];
+    if(pic->index == -1) 
+        continue;
 		if(pic->output_mark){
 			if(pic_display){
 				if(pic->POC < pic_display->POC){
 					pic_display = pic;
 				}
+				else if(pic->POC == pic_display->POC){
+				    if(pic->decode_idx < pic_display->decode_idx){
+				        pic_display = pic;    
+				    }   
+				}
 			}
 			else{
 				pic_display = pic;			
 			}
 		}
-		pic = pic->next;
 	}
 	if(pic_display){
 		if((num_pic_not_yet_display > pic_display->num_reorder_pic)||flush_flag){
@@ -1221,14 +1502,17 @@ static int config_mc_buffer(hevc_stru_t* hevc, PIC_t* cur_pic)
 
 static void apply_ref_pic_set(hevc_stru_t* hevc, int cur_poc, param_t* params)
 {
-	int i;
+	int ii,i;
 	int poc_tmp;
-	PIC_t* pic = hevc->decode_pic_list;
+	PIC_t* pic;
 	unsigned char is_referenced;
 	//printk("%s cur_poc %d\n", __func__, cur_poc);	
-	while(pic){
+  for(ii=0; ii<MAX_REF_PIC_NUM; ii++){
+    pic = &m_PIC[ii];
+    if(pic->index == -1) 
+        continue;
+
 		if((pic->referenced == 0 || pic->POC == cur_poc)){
-			pic = pic->next;
 			continue;
 		}
 		is_referenced = 0;
@@ -1253,7 +1537,6 @@ static void apply_ref_pic_set(hevc_stru_t* hevc, int cur_poc, param_t* params)
 			pic->referenced = 0;
 			//printk("set poc %d reference to 0\n", pic->POC);
 		}
-		pic = pic->next;
 	}
 
 }
@@ -1264,8 +1547,9 @@ static void set_ref_pic_list(PIC_t* pic,  param_t* params)
 	int num_neg = 0;
 	int num_pos = 0;
 	int total_num;
-	int num_ref_idx_l0_active = params->p.num_ref_idx_l0_active;
-	int num_ref_idx_l1_active = params->p.num_ref_idx_l1_active;
+	int num_ref_idx_l0_active = (params->p.num_ref_idx_l0_active>MAX_REF_ACTIVE)?MAX_REF_ACTIVE:params->p.num_ref_idx_l0_active;
+	int num_ref_idx_l1_active = (params->p.num_ref_idx_l1_active>MAX_REF_ACTIVE)?MAX_REF_ACTIVE:params->p.num_ref_idx_l1_active;
+
 	int RefPicSetStCurr0[16];
 	int RefPicSetStCurr1[16];
 	for(i=0;i<16;i++){
@@ -1295,6 +1579,16 @@ static void set_ref_pic_list(PIC_t* pic,  param_t* params)
 	    printk("%s: curpoc %d slice_type %d, total %d num_neg %d num_list0 %d num_list1 %d\n", __func__,
 		        pic->POC, params->p.slice_type, total_num, num_neg,num_ref_idx_l0_active, num_ref_idx_l1_active);
 	}
+
+	if(debug&H265_DEBUG_BUFMGR){
+    printk("HEVC Stream buf start %x end %x wr %x rd %x lev %x ctl %x intctl %x\n",READ_VREG(HEVC_STREAM_START_ADDR), 
+                    READ_VREG(HEVC_STREAM_END_ADDR),
+                    READ_VREG(HEVC_STREAM_WR_PTR),
+                    READ_VREG(HEVC_STREAM_RD_PTR),
+                    READ_VREG(HEVC_STREAM_LEVEL),
+                    READ_VREG(HEVC_STREAM_FIFO_CTL),
+                    READ_VREG(HEVC_PARSER_INT_CONTROL));
+  }
 	
 	if(total_num>0){
 		if(params->p.modification_flag&0x1){
@@ -1382,6 +1676,15 @@ static void update_tile_info(hevc_stru_t* hevc,  int pic_width_cu, int pic_heigh
 	if(params->p.tiles_enabled_flag&1){
 		hevc->num_tile_col = params->p.num_tile_columns_minus1 + 1;
 		hevc->num_tile_row = params->p.num_tile_rows_minus1 + 1;
+		
+		if(hevc->num_tile_row > MAX_TILE_ROW_NUM  || hevc->num_tile_row <= 0){
+		    hevc->num_tile_row = 1;    
+		    printk("%s: num_tile_rows_minus1 (%d) error!!\n", __func__, params->p.num_tile_rows_minus1);
+		}
+		if(hevc->num_tile_col > MAX_TILE_COL_NUM  || hevc->num_tile_col <= 0){
+		    hevc->num_tile_col = 1;    
+		    printk("%s: num_tile_columns_minus1 (%d) error!!\n", __func__, params->p.num_tile_columns_minus1);
+		}
 		if(debug&H265_DEBUG_BUFMGR){
 		    printk("%s pic_w_cu %d pic_h_cu %d tile_enabled num_tile_col %d num_tile_row %d:\n", __func__, pic_width_cu, pic_height_cu, hevc->num_tile_col, hevc->num_tile_row);
 		}
@@ -1594,7 +1897,10 @@ static void hevc_init_decoder_hw(int decode_pic_begin, int decode_pic_num)
     if(debug&H265_DEBUG_BUFMGR) 
         printk("[test.c] Enable HEVC Parser Interrupt\n");
     data32 = READ_VREG(HEVC_PARSER_INT_CONTROL);
+    data32 &=0x03ffffff;
     data32 = data32 | 
+             (3<<29)|
+             (2<<26)|             
              (1 << 24) |  // stream_buffer_empty_int_amrisc_enable
              (1 << 22) |  // stream_fifo_empty_int_amrisc_enable
              (1 << 7) |  // dec_done_int_cpu_enable
@@ -1716,7 +2022,10 @@ static void decoder_hw_reset(void)
     WRITE_VREG(HEVC_SHIFT_EMULATECODE, 0x00000300);
 
     data32 = READ_VREG(HEVC_PARSER_INT_CONTROL);
+    data32 &=0x03ffffff;
     data32 = data32 | 
+             (3<<29)|
+             (2<<26)|             
              (1 << 24) |  // stream_buffer_empty_int_amrisc_enable
              (1 << 22) |  // stream_fifo_empty_int_amrisc_enable
              (1 << 7) |  // dec_done_int_cpu_enable
@@ -2250,58 +2559,100 @@ static void config_sao_hw(hevc_stru_t* hevc, param_t* params)
 
 static PIC_t* get_new_pic(hevc_stru_t* hevc, param_t* rpm_param)
 {
-    PIC_t* new_pic;
+    PIC_t* new_pic=NULL;
     PIC_t* pic;
-    new_pic = out_q(&hevc->free_pic_list);
-    if(new_pic == NULL){
-        /* recycle un-used pic */
-        int ii = 0;
-      
-        while(1){
-            pic = get_pic_by_IDX(hevc, ii++);
-            if(pic == NULL)
-                break;
-            if(pic->output_mark == 0 && pic->referenced == 0
-                    && pic->output_ready == 0
-                ){
-                if(new_pic){
-                    if(pic->POC < new_pic->POC)
-                        new_pic = pic;
-                }
-                else{
+    /* recycle un-used pic */
+    int i;
+    for(i=0; i<MAX_REF_PIC_NUM; i++){
+        pic = &m_PIC[i];
+        if(pic->index == -1) 
+            continue;
+        if(pic->output_mark == 0 && pic->referenced == 0
+                && pic->output_ready == 0
+            ){
+            if(new_pic){
+                if(pic->POC < new_pic->POC)
                     new_pic = pic;
-                }
+            }
+            else{
+                new_pic = pic;
             }
         }
-        if(new_pic == NULL){
-            //printk("Error: Buffer management, no free buffer\n");
-            return NULL;
+    }
+
+#ifdef USE_BUF_BLOCK
+    if(new_pic == NULL){
+        int ii;
+        for(ii=0; ii<MAX_REF_PIC_NUM; ii++){
+            if(m_PIC[ii].index == -1){
+                break;    
+            }    
         }
+        if(ii < MAX_REF_PIC_NUM){
+            new_pic = &m_PIC[ii];
+            memset(new_pic, 0, sizeof(PIC_t));
+            new_pic->index = ii;
+            new_pic->BUF_index = -1;
+        }   
     }
-    else{
-        in_q(&hevc->decode_pic_list, new_pic);
+#endif  
+
+    if(new_pic == NULL){
+        //printk("Error: Buffer management, no free buffer\n");
+        return new_pic;
     }
-    new_pic->decode_idx = hevc->decode_idx;
-    new_pic->slice_idx = 0;
+
     new_pic->referenced = 1;
-    new_pic->output_mark = 0;
-    new_pic->recon_mark = 0;
-    new_pic->error_mark = 0;
-    //new_pic->output_ready = 0;
-    new_pic->num_reorder_pic = rpm_param->p.sps_num_reorder_pics_0;
-    new_pic->POC = hevc->curr_POC;
+    if(new_pic->width != hevc->pic_w || new_pic->height != hevc->pic_h){
+#ifdef USE_BUF_BLOCK
+        recycle_buf(hevc);
+        //if(new_pic->BUF_index == -1){
+            if(config_pic(hevc, new_pic)<0){
+                if(debug){
+                    printk("Config_pic %d fail\n", new_pic->index);
+                    dump_pic_list(hevc);
+                }
+                new_pic->index = -1;
+                new_pic = NULL;
+            }
+            else{
+                init_pic_list_hw();
+            }            
+        //}
+        //else{
+        //   printk("++++++++++++++++++++++Error: can not happen!!!\n");
+        //}
+#endif
+        if(new_pic){
+            new_pic->width = hevc->pic_w;
+            new_pic->height = hevc->pic_h;
+            set_canvas(new_pic);
+        }
+    }
+    if(new_pic){
+        new_pic->decode_idx = hevc->decode_idx;
+        new_pic->slice_idx = 0;
+        new_pic->referenced = 1;
+        new_pic->output_mark = 0;
+        new_pic->recon_mark = 0;
+        new_pic->error_mark = 0;
+        //new_pic->output_ready = 0;
+        new_pic->num_reorder_pic = rpm_param->p.sps_num_reorder_pics_0;
+        new_pic->POC = hevc->curr_POC;
+    }        
     return new_pic;
 }
 
 static int get_display_pic_num(hevc_stru_t* hevc)
 {
-    int ii = 0;
+    int i;
     PIC_t* pic;
     int num = 0;      
-    while(1){
-        pic = get_pic_by_IDX(hevc, ii++);
-        if(pic == NULL)
-            break;
+    for(i=0; i<MAX_REF_PIC_NUM; i++){
+        pic = &m_PIC[i];
+        if(pic->index == -1) 
+            continue;
+
         if(pic->output_ready == 1){
             num++;
         }
@@ -2341,6 +2692,12 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
         //hevc->curr_predFlag_L1=(hevc->slice_type==0) ? 1:0;
         hevc->TMVPFlag	= rpm_param->p.slice_temporal_mvp_enable_flag;
         hevc->isNextSliceSegment=rpm_param->p.dependent_slice_segment_flag?1:0;
+        if(hevc->pic_w!=rpm_param->p.pic_width_in_luma_samples || 
+            hevc->pic_h!=rpm_param->p.pic_height_in_luma_samples){
+            printk("Picture Width/Height Change (%d,%d)=>(%d,%d)\n", 
+                hevc->pic_w, hevc->pic_h,
+                rpm_param->p.pic_width_in_luma_samples, rpm_param->p.pic_height_in_luma_samples);
+        }
         
         hevc->pic_w           =rpm_param->p.pic_width_in_luma_samples;
         hevc->pic_h           =rpm_param->p.pic_height_in_luma_samples;
@@ -2413,8 +2770,8 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
                 }
             }
         }
-        hevc->RefNum_L0       =rpm_param->p.num_ref_idx_l0_active;
-        hevc->RefNum_L1       =rpm_param->p.num_ref_idx_l1_active;
+        hevc->RefNum_L0       =(rpm_param->p.num_ref_idx_l0_active>MAX_REF_ACTIVE)?MAX_REF_ACTIVE:rpm_param->p.num_ref_idx_l0_active;
+        hevc->RefNum_L1       =(rpm_param->p.num_ref_idx_l1_active>MAX_REF_ACTIVE)?MAX_REF_ACTIVE:rpm_param->p.num_ref_idx_l1_active;
         
         //if(curr_POC==0x10) dump_lmem();
         
@@ -2449,7 +2806,11 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
             /**/
             if(use_cma == 0){
                 if(hevc->pic_list_init_flag == 0){
+#ifdef USE_BUF_BLOCK
+                    init_buf_list(hevc);
+#endif            
                     init_pic_list(hevc);
+                    init_pic_list_hw();
                     init_buf_spec(hevc);
                     hevc->pic_list_init_flag = 3;
                 }
@@ -2487,54 +2848,56 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
                             if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d ==> Debug mode or error, recycle it\n", pic_display->POC, pic_display->decode_idx);
                         }
                         else{                    
-                            prepare_display_buf(hevc, pic_display->index, pic_display->stream_offset, pic_display->slice_type);
+                            prepare_display_buf(hevc, pic_display);
                             if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
                         }
                     }
                 }while(pic_display);
             }
-            else if(hevc->iPrevPOC!=0){ /* flush */
-                PIC_t* pic_display;
-                if(debug&H265_DEBUG_BUFMGR){
-                    printk("[Buffer Management] current pic is IDR, clear referenced flag of all buffers\n");
-                }
-                if(debug&H265_DEBUG_BUFMGR){
-                    dump_pic_list(hevc);
-                }
-                pic = get_pic_by_POC(hevc, hevc->iPrevPOC);
-                if(pic){
-                    /*PB skip control*/
-                    if(pic->error_mark==0 && hevc->PB_skip_mode==1){
-                        hevc->ignore_bufmgr_error|=0x1;  //start decoding after first I
+            else{ 
+                //if(hevc->iPrevPOC!=0){ /* flush */
+                    PIC_t* pic_display;
+                    if(debug&H265_DEBUG_BUFMGR){
+                        printk("[Buffer Management] current pic is IDR, clear referenced flag of all buffers\n");
                     }
-                    if(hevc->ignore_bufmgr_error&1){
-                        if(hevc->PB_skip_count_after_decoding>0){
-                            hevc->PB_skip_count_after_decoding--;
-                        }
-                        else{
-                            hevc->ignore_bufmgr_error|=0x2; //start displaying
-                        }
+                    if(debug&H265_DEBUG_BUFMGR){
+                        dump_pic_list(hevc);
                     }
-                    /**/
-                    pic->output_mark = 1;
-                    pic->recon_mark = 1;
-                }
-                do{			
-                    pic_display = output_pic(hevc, 1);
-    
-                    if(pic_display){
-                        pic_display->referenced = 0;
-                        if((pic_display->error_mark && ((hevc->ignore_bufmgr_error&0x2)==0))
-                            ||(debug&H265_DEBUG_DISPLAY_CUR_FRAME)||(debug&H265_DEBUG_NO_DISPLAY)){
-                       			 pic_display->output_ready = 0;
-                             if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d ==> Debug mode or error, recycle it\n", pic_display->POC, pic_display->decode_idx);
+                    pic = get_pic_by_POC(hevc, hevc->iPrevPOC);
+                    if(pic){
+                        /*PB skip control*/
+                        if(pic->error_mark==0 && hevc->PB_skip_mode==1){
+                            hevc->ignore_bufmgr_error|=0x1;  //start decoding after first I
                         }
-                        else{
-                            prepare_display_buf(hevc, pic_display->index, pic_display->stream_offset, pic_display->slice_type);
-                            if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
+                        if(hevc->ignore_bufmgr_error&1){
+                            if(hevc->PB_skip_count_after_decoding>0){
+                                hevc->PB_skip_count_after_decoding--;
+                            }
+                            else{
+                                hevc->ignore_bufmgr_error|=0x2; //start displaying
+                            }
                         }
+                        /**/
+                        pic->output_mark = 1;
+                        pic->recon_mark = 1;
                     }
-                }while(pic_display);
+                    do{			
+                        pic_display = output_pic(hevc, 1);
+        
+                        if(pic_display){
+                            pic_display->referenced = 0;
+                            if((pic_display->error_mark && ((hevc->ignore_bufmgr_error&0x2)==0))
+                                ||(debug&H265_DEBUG_DISPLAY_CUR_FRAME)||(debug&H265_DEBUG_NO_DISPLAY)){
+                           			 pic_display->output_ready = 0;
+                                 if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d ==> Debug mode or error, recycle it\n", pic_display->POC, pic_display->decode_idx);
+                            }
+                            else{
+                                prepare_display_buf(hevc, pic_display);
+                                if(debug&H265_DEBUG_BUFMGR) printk("[Buffer Management] Display: POC %d, decoding index %d\n", pic_display->POC, pic_display->decode_idx);
+                            }
+                        }
+                    }while(pic_display);
+                //}
             }
             
             apply_ref_pic_set(hevc, hevc->curr_POC, rpm_param); //update referenced of old pictures (cur_pic->referenced is 1 and not updated)
@@ -2549,7 +2912,8 @@ static int hevc_slice_segment_header_process(hevc_stru_t* hevc, param_t* rpm_par
             }            
             if(debug&H265_DEBUG_DISPLAY_CUR_FRAME){
                 hevc->cur_pic->output_ready = 1;
-                prepare_display_buf(hevc, hevc->cur_pic->index, READ_VREG(HEVC_SHIFT_BYTE_COUNT), hevc->cur_pic->slice_type);    
+                hevc->cur_pic->stream_offset = READ_VREG(HEVC_SHIFT_BYTE_COUNT);
+                prepare_display_buf(hevc, hevc->cur_pic);    
                 hevc->wait_buf = 2;
                 return -1;
             }        
@@ -2757,14 +3121,15 @@ static int hevc_local_init(void)
 {
     int ret = -1;
     BuffInfo_t* cur_buf_info = NULL;
+  	//int pic_width = buf_alloc_width?buf_alloc_width:frame_width;
+	  //int pic_height = buf_alloc_height?buf_alloc_height:frame_height;
     memset(&rpm_param, 0, sizeof(rpm_param));
     
-    if (frame_width <= 1920 &&  frame_height <= 1088) {
-        cur_buf_info = &amvh265_workbuff_spec[0]; //1080p work space
-    }
-    else{
-        cur_buf_info = &amvh265_workbuff_spec[1]; //4k2k work space
-    }
+#ifdef SUPPORT_4K2K
+    cur_buf_info = &amvh265_workbuff_spec[1]; //4k2k work space
+#else
+    cur_buf_info = &amvh265_workbuff_spec[0]; //1080p work space
+#endif    
  
     init_buff_spec(cur_buf_info);
 
@@ -2833,16 +3198,6 @@ static unsigned reserved_buffer;
 #define video_domain_addr(adr) (adr&0x7fffffff)
 #define DECODER_WORK_SPACE_SIZE 0x800000
 
-typedef struct {
-    unsigned int y_addr;
-    unsigned int uv_addr;
-
-    int y_canvas_index;
-    int uv_canvas_index;
-} buffer_spec_t;
-
-static buffer_spec_t buffer_spec[DECODE_BUFFER_NUM_MAX+DISPLAY_BUFFER_NUM];
-
 #define spec2canvas(x)  \
     (((x)->uv_canvas_index << 16) | \
      ((x)->uv_canvas_index << 8)  | \
@@ -2856,9 +3211,18 @@ static DECLARE_KFIFO(display_q, vframe_t *, VF_POOL_SIZE);
 static s32 vfbuf_use[DECODE_BUFFER_NUM_MAX];
 static vframe_t vfpool[VF_POOL_SIZE];
 
+static void set_canvas(PIC_t* pic)
+{
+    pic->y_canvas_index = 128 + pic->index * 2;
+    pic->uv_canvas_index = 128 + pic->index * 2 + 1;
+    canvas_config(pic->y_canvas_index, pic->mc_y_adr, ALIGN(pic->width, 64), ALIGN(pic->height, 32),
+                  CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_64X32);
+    canvas_config(pic->uv_canvas_index, pic->mc_u_v_adr, ALIGN(pic->width, 64), ALIGN(pic->height>>1, 32),
+                  CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_64X32);
+}
+
 static int init_buf_spec(hevc_stru_t* hevc)
 {
-    int i;
     int pic_width = hevc->pic_w;
     int pic_height = hevc->pic_h;
 
@@ -2866,22 +3230,6 @@ static int init_buf_spec(hevc_stru_t* hevc)
     printk("%s2 %d %d \n", __func__, pic_width, pic_height);
     //pic_width = hevc->pic_w;
     //pic_height = hevc->pic_h;
-    for(i=0; i<MAX_REF_PIC_NUM; i++) { 
-        if (m_PIC[i].index == -1) {
-            break;
-        }
-
-        buffer_spec[i].y_addr = m_PIC[i].mc_y_adr;
-        buffer_spec[i].uv_addr = m_PIC[i].mc_u_v_adr;
-
-        buffer_spec[i].y_canvas_index = 128 + i * 2;
-        buffer_spec[i].uv_canvas_index = 128 + i * 2 + 1;
-
-        canvas_config(128 + i * 2, buffer_spec[i].y_addr, ALIGN(pic_width, 64), ALIGN(pic_height, 32),
-                      CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_64X32);
-        canvas_config(128 + i * 2 + 1, buffer_spec[i].uv_addr, ALIGN(pic_width, 64), ALIGN(pic_height>>1, 32),
-                      CANVAS_ADDR_NOWRAP, CANVAS_BLKMODE_64X32);
-    }
 
     if(frame_width == 0 || frame_height == 0){
         frame_width = pic_width;
@@ -2988,18 +3336,18 @@ static int vh265_event_cb(int type, void *data, void *private_data)
     return 0;
 }
 
-static int prepare_display_buf(hevc_stru_t* hevc, int display_buff_id, int stream_offset, unsigned short slice_type)
+static int prepare_display_buf(hevc_stru_t* hevc, PIC_t* pic)
 {
     vframe_t *vf = NULL;
+    int stream_offset = pic->stream_offset;
+    unsigned short slice_type = pic->slice_type;
+
     if (kfifo_get(&newframe_q, &vf) == 0) {
         printk("fatal error, no available buffer slot.");
         return -1;
     }
     
     if (vf) {
-        /*
-        vfbuf_use[display_buff_id]++;
-         */
         //if (pts_lookup_offset(PTS_TYPE_VIDEO, stream_offset, &vf->pts, 0) != 0) {
         if (pts_lookup_offset_us64(PTS_TYPE_VIDEO, stream_offset, &vf->pts, 0, &vf->pts_us64)!= 0){
 #ifdef DEBUG_PTS
@@ -3056,11 +3404,15 @@ static int prepare_display_buf(hevc_stru_t* hevc, int display_buff_id, int strea
             printk("H265 decoder out pts: vf->pts=%d, vf->pts_us64 = %lld\n", vf->pts, vf->pts_us64);
         }
 
-        vf->index = display_buff_id;
+        vf->index = pic->index;
         vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
         vf->type |= VIDTYPE_VIU_NV21;
-        vf->canvas0Addr = vf->canvas1Addr = spec2canvas(&buffer_spec[display_buff_id]);
+        vf->canvas0Addr = vf->canvas1Addr = spec2canvas(pic);
         set_frame_info(vf);
+        //if((vf->width!=pic->width)||(vf->height!=pic->height))
+        //    printk("aaa: %d/%d, %d/%d\n", vf->width,vf->height, pic->width, pic->height);
+        vf->width = pic->width;
+        vf->height = pic->height;
 
         kfifo_put(&display_q, (const vframe_t **)&vf);
 
@@ -3163,7 +3515,15 @@ static void hevc_recover(hevc_stru_t* hevc)
         WRITE_VREG(DEBUG_REG1, 0x0);
     }
     
-    WRITE_VREG(NAL_SEARCH_CTL, 0x1); //manual parser NAL
+    if((error_handle_policy&1)==0){
+        if((error_handle_policy&4)==0)
+            WRITE_VREG(NAL_SEARCH_CTL, 0xc); //ucode auto mode, and do not check vps/sps/pps/idr
+        else
+            WRITE_VREG(NAL_SEARCH_CTL, 0x1); //manual parser NAL
+    }
+    else{
+        WRITE_VREG(NAL_SEARCH_CTL, 0x1); //manual parser NAL
+    }
         
     WRITE_VREG(DECODE_STOP_POS, decode_stop_pos);
 
@@ -3221,7 +3581,7 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
    if(debug&H265_DEBUG_UCODE){
        if(READ_HREG(DEBUG_REG1)&0x10000){
 #if 0
-            printk("PPS\n");
+            printk("PPS \r\n");
             for(i=0; i<(hevc->debug_ptr_size/2); i+=4){
                 int ii;
                 for(ii=0; ii<4; ii++){
@@ -3258,8 +3618,14 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
     }
     
     if(hevc->error_flag==1){
-        hevc->error_skip_nal_count = error_skip_nal_count;
-        WRITE_VREG(NAL_SEARCH_CTL, 0x1); //manual parser NAL
+        if((error_handle_policy&1)==0){
+            hevc->error_skip_nal_count = 1;
+            WRITE_VREG(NAL_SEARCH_CTL, (error_skip_nal_count<<4)|0x1); //manual search nal, skip  error_skip_nal_count of nal and trigger the HEVC_NAL_SEARCH_DONE irq
+        }
+        else{
+            hevc->error_skip_nal_count = error_skip_nal_count;
+            WRITE_VREG(NAL_SEARCH_CTL, 0x1); //manual parser NAL
+        }
         WRITE_VREG(HEVC_DEC_STATUS_REG, HEVC_ACTION_DONE); //search new nal
 
         //printk("%s: error handle\n", __func__);
@@ -3269,7 +3635,7 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
         printk("error_flag=3, hevc_recover");
         hevc_recover(hevc);
         hevc->error_flag = 0;
-        if((error_handle_policy&0x1)==0){
+        if((error_handle_policy&0x2)==0){
             hevc->have_vps = 1;
             hevc->have_sps = 1;
             hevc->have_pps = 1;
@@ -3299,7 +3665,7 @@ static irqreturn_t vh265_isr(int irq, void *dev_id)
             if(hevc->error_skip_nal_count==0){
                 hevc_recover(hevc);
                 hevc->error_flag = 0;
-                if((error_handle_policy&0x1)==0){
+                if((error_handle_policy&0x2)==0){
                     hevc->have_vps = 1;
                     hevc->have_sps = 1;
                     hevc->have_pps = 1;
@@ -3604,7 +3970,11 @@ static int h265_task_handle(void *data)
         }
         ret = down_interruptible(&h265_sema);
         if((init_flag!=0) && (gHevc.pic_list_init_flag == 1)){
+#ifdef USE_BUF_BLOCK
+            init_buf_list(&gHevc);
+#endif
             init_pic_list(&gHevc);
+            init_pic_list_hw();
             init_buf_spec(&gHevc);
             gHevc.pic_list_init_flag = 2;
             printk("set pic_list_init_flag to 2\n");
@@ -3613,7 +3983,11 @@ static int h265_task_handle(void *data)
         }
         
         if(uninit_list){    
+#ifndef USE_BUF_BLOCK
             uninit_pic_list(&gHevc);
+#else            
+            uninit_buf_list(&gHevc);
+#endif            
             printk("uninit list\n");
             uninit_list = 0;
         }
@@ -3721,7 +4095,7 @@ static int vh265_local_init(void)
     }
     error_watchdog_count = 0;
 
-    printk("h265: decinfo: %dx%d rate=%d\n", frame_width, frame_height, frame_dur);
+    printk("h265: ver (%d,%d) decinfo: %dx%d rate=%d\n",  h265_version, h265_ucode_v, frame_width, frame_height, frame_dur);
 
     if(frame_dur == 0){
         frame_dur = 96000/24;
@@ -3747,7 +4121,6 @@ static int vh265_local_init(void)
     return ret;
 }
 
-extern unsigned char ucode_buf[4*1024*8];
 static s32 vh265_init(void)
 {
     init_timer(&recycle_timer);
@@ -3758,27 +4131,33 @@ static s32 vh265_init(void)
        return -EBUSY; 
 
     amhevc_enable();
-#if 0
     if(debug &H265_DEBUG_LOAD_UCODE_FROM_FILE){
-        printk("load ucode from file\n");
-        if (amhevc_loadmc(ucode_buf) < 0) {
+		    int size;
+        char *mbuf;
+        printk("load ucode from file of vh265_mc\n");
+        mbuf=kmalloc(4096 * 8, GFP_KERNEL);
+        if (!mbuf) {
+            printk("vh265_init: Cannot malloc mbuf  memory1\n");
+            return -EBUSY;
+        }
+        memset(mbuf,0,4096 * 8);
+        size=request_video_firmware("vh265_mc",mbuf,4096 * 8);
+        if(size<=0){
+            printk("vh265_init: not valied ucode for vh265");
+            kfree(mbuf);
+            return -EBUSY;
+        }
+        if (amhevc_loadmc((const u32 *)mbuf) < 0) {
             amhevc_disable();
+            kfree(mbuf);
             return -EBUSY;
         }
+        kfree(mbuf);
     }
-    else 
-#endif
-    if(debug&H265_DEBUG_SEND_PARAM_WITH_REG){
-        printk("Error, H265_DEBUG_SEND_PARAM_WITH_REG not support!!!\n");
+    else if (amhevc_loadmc(vh265_mc) < 0) {
         amhevc_disable();
         return -EBUSY;
     }
-    else{
-        if (amhevc_loadmc(vh265_mc) < 0) {
-            amhevc_disable();
-            return -EBUSY;
-        }
-    }
     stat |= STAT_MC_LOAD;
 
     /* enable AMRISC side protocol */
@@ -4056,6 +4435,23 @@ MODULE_PARM_DESC(error_handle_system_threshold, "\n amvdec_h265 error_handle_sys
 module_param(error_skip_nal_count, uint, 0664);
 MODULE_PARM_DESC(error_skip_nal_count, "\n amvdec_h265 error_skip_nal_count \n");
 
+module_param(buf_alloc_width, uint, 0664);
+MODULE_PARM_DESC(buf_alloc_width, "\n buf_alloc_width \n");
+
+module_param(buf_alloc_height, uint, 0664);
+MODULE_PARM_DESC(buf_alloc_height, "\n buf_alloc_height \n");
+
+module_param(buf_alloc_size, uint, 0664);
+MODULE_PARM_DESC(buf_alloc_size, "\n buf_alloc_size \n");
+
+module_param(cma_mode, uint, 0664);
+MODULE_PARM_DESC(cma_mode, "\n cma_mode \n");
+
+#ifdef USE_BUF_BLOCK
+module_param(max_buf_num, uint, 0664);
+MODULE_PARM_DESC(max_buf_num, "\n max_buf_num \n");
+#endif
+
 module_init(amvdec_h265_driver_init_module);
 module_exit(amvdec_h265_driver_remove_module);
 
-- 
2.19.0

