From a653b6d203fce48bfeaa55366d57575d355f4ae2 Mon Sep 17 00:00:00 2001
From: "zhe.wang" <zhe.wang@amlogic.com>
Date: Fri, 9 Jan 2015 14:58:42 +0800
Subject: [PATCH 5341/5965] PD#100654: add spdif in audio type detect

Change-Id: Ieb73c42edba6039cc145244775f01a018e2afefd
---
 sound/soc/aml/m8/aml_g9tv.c | 35 ++++++++++++++++++
 sound/soc/aml/m8/aml_m8.c   | 73 ++++++++++++++++++++++++++++++++++++-
 2 files changed, 107 insertions(+), 1 deletion(-)

diff --git a/sound/soc/aml/m8/aml_g9tv.c b/sound/soc/aml/m8/aml_g9tv.c
index ea5eb336b9b7..36b8ec427701 100755
--- a/sound/soc/aml/m8/aml_g9tv.c
+++ b/sound/soc/aml/m8/aml_g9tv.c
@@ -256,6 +256,37 @@ static int aml_hdmi_audio_type_set_enum(struct snd_kcontrol *kcontrol,
     return 0;
 }
 
+/* spdif in audio format detect: LPCM or NONE-LPCM */
+static const char *spdif_audio_type_texts[] = {
+    "LPCM","NONE-LPCM","UN-KNOWN"
+};          
+static const struct soc_enum spdif_audio_type_enum =
+    SOC_ENUM_SINGLE(SND_SOC_NOPM, 0,
+            ARRAY_SIZE(spdif_audio_type_texts),
+            spdif_audio_type_texts);
+
+static int aml_spdif_audio_type_get_enum(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+	int ch_status = 0;
+    //if ((READ_MPEG_REG(AUDIN_SPDIF_MISC)>>0x7)&0x1){
+        ch_status = READ_MPEG_REG(AUDIN_SPDIF_CHNL_STS_A)&0x3;
+        if (ch_status&2) //NONE-LPCM
+            ucontrol->value.enumerated.item[0] = 1;
+        else //LPCM
+            ucontrol->value.enumerated.item[0] = 0;     
+    //}
+    //else
+    //    ucontrol->value.enumerated.item[0] = 2; //un-stable. un-known       
+    return 0;
+}
+
+static int aml_spdif_audio_type_set_enum(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+    return 0;
+}
+
 #define RESAMPLE_BUFFER_SOURCE 1 //audioin fifo0
 #define RESAMPLE_CNT_CONTROL 255 //Cnt_ctrl = mclk/fs_out-1 ; fest 256fs
 
@@ -356,6 +387,10 @@ static const struct snd_kcontrol_new aml_g9tv_controls[] = {
         aml_hdmi_audio_type_get_enum,
         aml_hdmi_audio_type_set_enum),
 
+    SOC_ENUM_EXT("SPDIFIN Audio Type", spdif_audio_type_enum,
+        aml_spdif_audio_type_get_enum,
+        aml_spdif_audio_type_set_enum),
+    
     SOC_ENUM_EXT("Hardware resample enable", hardware_resample_enum,
         aml_hardware_resample_get_enum,
         aml_hardware_resample_set_enum),
diff --git a/sound/soc/aml/m8/aml_m8.c b/sound/soc/aml/m8/aml_m8.c
index 26733f7d0dc7..2cbbf3c4d3f4 100755
--- a/sound/soc/aml/m8/aml_m8.c
+++ b/sound/soc/aml/m8/aml_m8.c
@@ -568,6 +568,69 @@ static struct snd_soc_jack_pin jack_pins[] = {
     }
 };
 
+/* HDMI in audio format detect: LPCM or NONE-LPCM */           
+static const char *hdmi_audio_type_texts[] = {
+    "LPCM","NONE-LPCM","UN-KNOWN"
+};          
+static const struct soc_enum hdmi_audio_type_enum =
+    SOC_ENUM_SINGLE(SND_SOC_NOPM, 0,
+            ARRAY_SIZE(hdmi_audio_type_texts),
+            hdmi_audio_type_texts);
+
+static int aml_hdmi_audio_type_get_enum(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+    int ch_status = 0;
+    if ((READ_MPEG_REG(AUDIN_DECODE_CONTROL_STATUS)>>24)&0x1){
+        ch_status = READ_MPEG_REG(AUDIN_DECODE_CHANNEL_STATUS_A_0);
+        if (ch_status&2) //NONE-LPCM
+            ucontrol->value.enumerated.item[0] = 1;
+        else //LPCM
+            ucontrol->value.enumerated.item[0] = 0;     
+    }
+    else
+        ucontrol->value.enumerated.item[0] = 2; //un-stable. un-known       
+    
+    return 0;
+}
+
+static int aml_hdmi_audio_type_set_enum(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+    return 0;
+}
+
+/* spdif in audio format detect: LPCM or NONE-LPCM */
+static const char *spdif_audio_type_texts[] = {
+    "LPCM","NONE-LPCM","UN-KNOWN"
+};          
+static const struct soc_enum spdif_audio_type_enum =
+    SOC_ENUM_SINGLE(SND_SOC_NOPM, 0,
+            ARRAY_SIZE(spdif_audio_type_texts),
+            spdif_audio_type_texts);
+
+static int aml_spdif_audio_type_get_enum(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+	int ch_status = 0;
+    //if ((READ_MPEG_REG(AUDIN_SPDIF_MISC)>>0x7)&0x1){
+        ch_status = READ_MPEG_REG(AUDIN_SPDIF_CHNL_STS_A)&0x3;
+        if (ch_status&2) //NONE-LPCM
+            ucontrol->value.enumerated.item[0] = 1;
+        else //LPCM
+            ucontrol->value.enumerated.item[0] = 0;     
+    //}
+    //else
+    //    ucontrol->value.enumerated.item[0] = 2; //un-stable. un-known       
+    return 0;
+}
+
+static int aml_spdif_audio_type_set_enum(struct snd_kcontrol *kcontrol,
+    struct snd_ctl_elem_value *ucontrol)
+{
+    return 0;
+}
+
 static const struct snd_kcontrol_new aml_m8_controls[] = {
 	//SOC_DAPM_PIN_SWITCH("Ext Spk"),
 
@@ -582,7 +645,15 @@ static const struct snd_kcontrol_new aml_m8_controls[] = {
 	SOC_SINGLE_BOOL_EXT("Ext Spk Switch", 0,
 		aml_m8_get_spk,
 		aml_m8_set_spk),
-       
+
+	SOC_ENUM_EXT("HDMI Audio Type", hdmi_audio_type_enum,
+        aml_hdmi_audio_type_get_enum,
+        aml_hdmi_audio_type_set_enum),
+
+	SOC_ENUM_EXT("SPDIFIN Audio Type", spdif_audio_type_enum,
+        aml_spdif_audio_type_get_enum,
+        aml_spdif_audio_type_set_enum),
+    
    /*
     SOC_SINGLE_BOOL_EXT("Audio MPLL9 Switch", 0,
     aml_m8_get_MPLL9,
-- 
2.19.0

