From 2f874954cb397902f3552be3a0cade775677afc3 Mon Sep 17 00:00:00 2001
From: "qi.duan" <qi.duan@amlogic.com>
Date: Mon, 19 Jan 2015 13:39:12 +0800
Subject: [PATCH 5381/5965] PD#101566:UART:printk running with no block

Change-Id: I465bed8e52a711ab235360f57aa8fe490561b588
---
 drivers/amlogic/uart/Kconfig           |   8 +
 drivers/amlogic/uart/uart/meson_uart.c | 367 ++++++++++++++++++++++---
 drivers/amlogic/uart/uart/meson_uart.h |   2 +-
 3 files changed, 342 insertions(+), 35 deletions(-)

diff --git a/drivers/amlogic/uart/Kconfig b/drivers/amlogic/uart/Kconfig
index 232cd933718a..e05e8257e960 100755
--- a/drivers/amlogic/uart/Kconfig
+++ b/drivers/amlogic/uart/Kconfig
@@ -17,4 +17,12 @@ config AM_UART_CONSOLE
 	default y
 	help
 		Support for running a console on the Amlogic serial
+		
+config PRINTK_NOBLOCK_MODE
+	bool "Printk run with no block"
+	depends on AM_UART_CONSOLE
+	select SERIAL_CORE_CONSOLE
+	default n
+	help
+		Support for printk running with no block
 source "drivers/amlogic/uart/gps_um220/Kconfig"
diff --git a/drivers/amlogic/uart/uart/meson_uart.c b/drivers/amlogic/uart/uart/meson_uart.c
index ecef54fdcf8f..18b12130e558 100755
--- a/drivers/amlogic/uart/uart/meson_uart.c
+++ b/drivers/amlogic/uart/uart/meson_uart.c
@@ -39,6 +39,7 @@
 #include <mach/uart.h>
 //#include <mach/pinmux.h>
 #include <linux/clk.h>
+#include <linux/vmalloc.h>
 #include <linux/amlogic/uart-aml.h>
 
 #include <asm/io.h>
@@ -57,14 +58,35 @@
 #define MESON_SERIAL_NAME		"ttyS"
 #define MESON_SERIAL_MAJOR	4
 #define MESON_SERIAL_MINOR	64
-
+#define MESON_SERIAL_BUFFER_SIZE (1024 * 128)
+#define DEFAULT_STR_LEN	4
+#define DEFAULT_STR   "..."
 static int meson_uart_console_index =  -1;
 struct console * meson_register_uart_console = NULL;
 static int meson_uart_max_port = MESON_UART_PORT_NUM;
-static struct uart_driver meson_uart_driver; 
+static struct uart_driver meson_uart_driver;
 static struct aml_uart_platform  aml_uart_driver_data;
 static const struct of_device_id meson_uart_dt_match[];
-
+struct meson_uart_struct {
+	struct console *co;
+	const char *s;
+	u_int offset;
+	int count;
+	struct list_head list;
+};
+struct meson_uart_management{
+	int user_count;
+	struct list_head list_head;
+	struct spinlock lock;
+};
+struct meson_uart_list{
+	int user_count;
+	struct meson_uart_struct *co_head;
+	struct meson_uart_struct *co_tail;
+};
+static struct meson_uart_management cur_col_management;
+static struct meson_uart_list cur_col_list[MESON_UART_PORT_NUM];
+static char * data_cache;
 struct meson_uart_port {
 	struct uart_port	port;
 
@@ -121,6 +143,34 @@ struct meson_uart_port {
 static struct meson_uart_port am_ports[MESON_UART_PORT_NUM];
 
 static void meson_uart_start_port(struct meson_uart_port *mup);
+void get_next_node(struct meson_uart_list *cur_col, struct meson_uart_struct *co_struct,
+				   int index);
+
+/**
+ * Global printk mode.
+ */
+uint32_t g_printk_mode = 0;		/*0: old mode
+                                                            1: new mode */
+/**
+ * This function show printk_mode.
+ */
+static ssize_t printk_mode_show(struct device_driver *drv, char *buf)
+{
+	return sprintf(buf, "0x%0x\n", g_printk_mode);
+}
+
+/**
+ * This function stores printk_mode.
+ */
+static ssize_t printk_mode_store(struct device_driver *drv, const char *buf,
+			       size_t count)
+{
+	g_printk_mode = simple_strtoul(buf, NULL, 16);
+	return count;
+}
+
+static DRIVER_ATTR(printkmode, S_IRUGO | S_IWUSR, printk_mode_show,
+		   printk_mode_store);
 
 /*********************************************/
 static struct bt_wake_ops *am_bt_ops = NULL;
@@ -253,7 +303,7 @@ static void am_uart_put_poll_char(struct uart_port *port,
 	struct meson_uart_port * mup = &am_ports[port->line];
 	am_uart_t *uart = mup->uart;
 
-	while ((readl(&uart->status) & UART_TXFULL)) 
+	while ((readl(&uart->status) & UART_TXFULL))
 		;
 	writel(c, &uart->wdata);
 
@@ -267,9 +317,9 @@ static int am_uart_startup(struct uart_port *port)
 	unsigned long mode;
 	struct meson_uart_port * mup = &am_ports[port->line];
 	am_uart_t *uart = mup->uart;
-	
+
 	mutex_init(&mup->info_mutex);
-	
+
 	mutex_lock(&mup->info_mutex);
     aml_set_reg32_mask((uint32_t)&uart->mode, UART_RXRST|UART_TXRST|UART_CLEAR_ERR);
     aml_clr_reg32_mask((uint32_t)&uart->mode, UART_RXRST|UART_TXRST|UART_CLEAR_ERR);
@@ -390,7 +440,7 @@ am_uart_set_termios(struct uart_port *port, struct ktermios *termios,
     } else {
         tmp &=~(0x3 << 16);
     }
-    
+
     if(termios->c_cflag & CRTSCTS) {
         tmp &= ~(0x1 << 15);
     } else {
@@ -535,7 +585,7 @@ static void meson_receive_chars(struct meson_uart_port *mup, struct pt_regs *reg
 		mode = readl(&uart->mode) | UART_CLEAR_ERR;
 		writel(mode, &uart->mode);
 	}
-	
+
 	do {
 		ch = (rx & 0x00ff);
                 tty_insert_flip_char(tport,ch,flag);
@@ -545,7 +595,7 @@ static void meson_receive_chars(struct meson_uart_port *mup, struct pt_regs *reg
 		if (!status)
 			rx = readl(&uart->rdata);
 	} while (!status);
-	   
+
 clear_and_exit:
 	return;
 }
@@ -562,7 +612,7 @@ static void meson_BH_receive_chars(struct meson_uart_port *mup)
 		printk(KERN_ERR"Uart : missing tty on line %d\n", mup->line);
 		goto clear_and_exit;
 	}
-	
+
 	tport->low_latency = 1;	// Originally added by Sameer, serial I/O slow without this
 	flag = TTY_NORMAL;
 	status = mup->rx_error;
@@ -576,7 +626,7 @@ static void meson_BH_receive_chars(struct meson_uart_port *mup)
 		printk(KERN_ERR"Uart %d Driver: Parity Error while receiving a character\n", mup->line);
 		flag = TTY_PARITY;
 	}
-	
+
 	mup->rx_error = 0;
 	if(cnt){
 		mup->rx_cnt =0;
@@ -654,16 +704,18 @@ clear_and_return:
     return;
 }
 
+int print_more(struct meson_uart_port *mup);
 /*
  * This is the serial driver's generic interrupt routine
  */
 static irqreturn_t meson_uart_interrupt(int irq, void *dev, struct pt_regs *regs)
 {
-    struct meson_uart_port *mup=(struct meson_uart_port *)dev;
+	struct meson_uart_port *mup=(struct meson_uart_port *)dev;
     am_uart_t *uart = NULL;
     struct tty_struct *tty = NULL;
 
-    if (!mup || !mup->uart)
+
+	if (!mup || !mup->uart)
         goto out;
 
     uart = mup->uart;
@@ -679,10 +731,13 @@ static irqreturn_t meson_uart_interrupt(int irq, void *dev, struct pt_regs *regs
     if ((readl(&uart->mode) & UART_TXENB)&&!(readl(&uart->status) & UART_TXFULL)) {
         meson_transmit_chars(mup);
     }
+
+    if(!list_empty(&cur_col_management.list_head)){
+	 print_more(mup);
+    }
 out:
     meson_uart_sched_event(mup, 0);
     return IRQ_HANDLED;
-
 }
 
 static void meson_uart_start_port(struct meson_uart_port *mup)
@@ -690,7 +745,7 @@ static void meson_uart_start_port(struct meson_uart_port *mup)
 	int index = mup->line;
 	struct uart_port *up = &mup->port;
 	am_uart_t *uart = mup->uart;
-	
+
 //	void * pinmux = mup->aup->pinmux_uart[index];
     unsigned int fifo_level = mup->aup->fifo_level[mup->line];
 
@@ -721,7 +776,7 @@ static void meson_uart_start_port(struct meson_uart_port *mup)
 		printk("set %s pinmux use pinctrl subsystem\n",mup->aup->port_name[index]);
 		printk("P_AO_RTI_PIN_MUX_REG:%x\n",aml_read_reg32(P_AO_RTI_PIN_MUX_REG));
 	}
-	// need put pinctrl      
+	// need put pinctrl
 	aml_set_reg32_mask((uint32_t)&uart->mode, UART_RXRST);
 	aml_clr_reg32_mask((uint32_t)&uart->mode, UART_RXRST);
 	aml_set_reg32_mask((uint32_t)&uart->mode, UART_RXINT_EN | UART_TXINT_EN);
@@ -772,7 +827,7 @@ static int meson_uart_register_port(struct platform_device *pdev,struct aml_uart
 		up->cons = meson_register_uart_console;
 		up->cons->flags |= CON_ENABLED;
 	}
-	
+
 	ret = uart_add_one_port(&meson_uart_driver, up);
     meson_uart_start_port(mup);
 
@@ -801,7 +856,7 @@ static inline struct aml_uart_platform   *aml_get_driver_data(
 			port_name = of_get_property(pdev->dev.of_node, "port_name", NULL);
 			enable = of_get_property(pdev->dev.of_node, "status", NULL);
 
-			/* 
+			/*
 			  * Find matched port index by port name
 			  *  the index indecate the location of driver data arrary
 			 */
@@ -846,7 +901,7 @@ static int meson_uart_remove(struct platform_device *pdev)
        int ret = 0;
 
 	/* Todo, unregister ports */
-	
+
 	return ret;
 }
 
@@ -881,7 +936,7 @@ static int  meson_serial_console_setup(struct console *co, char *options)
 	if (co->index >= MESON_UART_PORT_NUM)
 		co->index = 0;
 
-	/* 
+	/*
 	 * Find line index to match co->index
 	 */
 	for(index = 0; index < MESON_UART_PORT_NUM; index++){
@@ -906,25 +961,167 @@ static int  meson_serial_console_setup(struct console *co, char *options)
 	meson_uart_console_index = index;
 	meson_register_uart_console = co;
 //	return uart_set_options(&am_ports->port,co,baud,parity,bits,flow)
-	return 0;	
+	return 0;
+}
+
+bool new_printk_enabled = 0;
+static int __init new_printk_enable(char *str)
+{
+	new_printk_enabled = 1;
+	return 1;
 }
+__setup("printk_no_block", new_printk_enable);
+module_param_named(new_printk, new_printk_enabled,
+		bool, S_IRUGO | S_IWUSR);
+
+MODULE_PARM_DESC(new_printk, "printk use no block mode"
+	" ");
 
 static void meson_serial_console_write(struct console *co, const char *s, u_int count)
 {
+	struct meson_uart_struct *head_s = NULL;
+	struct meson_uart_struct *tail_s = NULL;
+	struct list_head *list_head = NULL;
+	const char *cur_s = NULL;
+	int tmp_count = 0, struct_size = sizeof(struct meson_uart_struct);
+	int tmp_count_1 = 0;
+	struct meson_uart_list *cur_col = NULL;
+	struct meson_uart_struct *co_struct = NULL;
+	am_uart_t *uart = NULL;
+	unsigned long flags = 0;
 	int index = co->index;
+	int mode;
+	int need_default=0;
+	static int last_msg_full = 0;
+
+#ifdef CONFIG_PRINTK_NOBLOCK_MODE
+	mode = 1;
+#else
+	mode = 0;
+#endif
+
+	if(g_printk_mode||new_printk_enabled)
+		mode = 1-mode;
+
+	if(!mode  || !data_cache){
+		uart = aml_uart_driver_data.regaddr[index];
+		if (index!= meson_uart_console_index)
+			meson_serial_console_setup(co, NULL);
+		while (count-- > 0) {
+			if (*s == '\n')
+				am_uart_put_char(uart, index, '\r');
+			am_uart_put_char(uart, index, *s++);
+		}
+		return;
+	}
+	spin_lock_irqsave(&cur_col_management.lock, flags);
+	if(count > 0 && count < MESON_SERIAL_BUFFER_SIZE){
+		list_head = &cur_col_management.list_head;
+		cur_s = NULL;
+		if(list_empty(list_head)){
+			cur_s = data_cache;
+		}
+		else{
+			head_s = list_entry(list_head->prev, struct meson_uart_struct, list);
+			tail_s = list_entry(list_head->next, struct meson_uart_struct, list);
+			tmp_count_1 = (int)((struct_size << 1) + tail_s->s + tail_s->offset + tail_s->count);
+			if(head_s->s <= tail_s->s){
+				tmp_count = data_cache + MESON_SERIAL_BUFFER_SIZE - tail_s->s - tail_s->offset - tail_s->count;
+				if(tmp_count < count + struct_size+(struct_size+DEFAULT_STR_LEN)){
+					if((head_s->s > (data_cache + (struct_size << 1))) &&
+					   ((head_s->s - (data_cache + (struct_size << 1))) > count+(struct_size+DEFAULT_STR_LEN))){
+						cur_s = data_cache;
+					}
+					else{
+						cur_s = data_cache;
+						need_default = 1;
+					}
+				}
+				else{
+					cur_s = tail_s->s + tail_s->offset + tail_s->count;
+				}
+			}
+			else if(((int)head_s->s > tmp_count_1) &&
+					((int)head_s->s - tmp_count_1 > count+(struct_size+DEFAULT_STR_LEN))){
+				cur_s = tail_s->s + tail_s->offset + tail_s->count;
+			}
+			else{
+				cur_s =  tail_s->s + tail_s->offset + tail_s->count;
+				need_default = 1;
+			}
+		}
 	
-	am_uart_t *uart = aml_uart_driver_data.regaddr[index];
+		if(need_default==0){
+			co_struct = (struct meson_uart_struct *)cur_s;
+			co_struct->s = cur_s + struct_size;
+			co_struct->count = count;
+			co_struct->co = co;
+			co_struct->offset = 0;
+			cur_col = &cur_col_list[index];
+			cur_col->co_tail = co_struct;
+			if(!cur_col->co_head){
+				cur_col->co_head = co_struct;
+			}
+			cur_col->user_count++;
+			cur_col_management.user_count++;
+			memcpy((char *)(co_struct->s), (char *)s, count);
+			
+			list_add(&co_struct->list, &cur_col_management.list_head);
+			last_msg_full = 0; 
+		}
+		else
+		{
+			if(last_msg_full==0)
+			{
+				co_struct = (struct meson_uart_struct *)cur_s;
+				co_struct->s = cur_s + struct_size;
+				co_struct->count = DEFAULT_STR_LEN;
+				co_struct->co = co;
+				co_struct->offset = 0;
+				cur_col = &cur_col_list[index];
+				cur_col->co_tail = co_struct;
+				if(!cur_col->co_head){
+					cur_col->co_head = co_struct;
+				}
+				cur_col->user_count++;
+				cur_col_management.user_count++;
+				memcpy((char *)(co_struct->s), DEFAULT_STR, DEFAULT_STR_LEN);
+				s = co_struct->s;
+				*((char *)s + DEFAULT_STR_LEN-1) = '\n';
+			
+				list_add(&co_struct->list, &cur_col_management.list_head);
+				last_msg_full = 1;
+			}
+		}
 
-       if (index!= meson_uart_console_index)
-		meson_serial_console_setup(co, NULL);
+		cur_col = &cur_col_list[index];
+		if( cur_col->co_head){
+			co_struct = cur_col->co_head;
+			s = co_struct->s + co_struct->offset;
+			uart = aml_uart_driver_data.regaddr[index];
+			if (index!= meson_uart_console_index)
+				meson_serial_console_setup(co, NULL);
+			while ((readl(&uart->mode) & UART_TXENB)&&
+				   !(readl(&uart->status) & UART_TXFULL)) {
+				if(co_struct->count <= 0){
+					get_next_node(cur_col, co_struct, index);
+					if(!cur_col->co_head)
+						break;
+					co_struct = cur_col->co_head;
+					s = co_struct->s + co_struct->offset;
+				}
+				if (*s == '\n')
+					writel('\r', &uart->wdata);
+				writel(*s++, &uart->wdata);
+				co_struct->count--;
+				co_struct->offset++;
+			}
+		}
 
-       //spin_lock(wr_lock);
-	while (count-- > 0) {
-		if (*s == '\n')
-			am_uart_put_char(uart, index, '\r');
-		am_uart_put_char(uart, index, *s++);
 	}
-       //spin_unlock(wr_lock);
+	spin_unlock_irqrestore(&cur_col_management.lock, flags);
+		
+	return;
 }
 
 static int meson_uart_resume(struct platform_device *pdev)
@@ -1009,12 +1206,12 @@ static struct platform_device_id meson_uart_driver_ids[] = {
 	{
 		.name		= "aml-uart",
 		.driver_data	= MESON_SERIAL_DRV_DATA,
-	}, 
+	},
 	{},
 };
 MODULE_DEVICE_TABLE(platform, meson_uart_driver_ids);
 /*
-static struct ktermios meson_std_termios = {	
+static struct ktermios meson_std_termios = {
 	.c_iflag = ICRNL | IXON,
 	.c_oflag = OPOST | ONLCR,
 	.c_cflag = B115200 | CS8 | CREAD | HUPCL,
@@ -1047,12 +1244,102 @@ static  struct platform_driver meson_uart_platform_driver = {
 		.of_match_table=meson_uart_dt_match,
 	},
 };
+void get_next_node(struct meson_uart_list *cur_col, struct meson_uart_struct *co_struct,
+				   int index)
+{
+	struct list_head *entry;
+	struct console *co = NULL;
+	struct list_head *list_head = NULL;
+	
+
+	cur_col->user_count--;
+	
+	list_del(&co_struct->list);
+	
+	co_struct = NULL;
+	list_head = &cur_col_management.list_head;
+	if(!list_empty(list_head)){
+		cur_col_management.user_count--;
+		list_for_each_prev(entry, list_head){
+			co_struct = list_entry(entry, struct meson_uart_struct, list);
+			co = co_struct->co;
+			if(co->index == index)
+				break;
+		}
+	}
+	if(co_struct && (co->index == index)){
+		cur_col->co_head = co_struct;
+	}
+	else{
+		cur_col->co_head = NULL;
+		cur_col->co_tail = NULL;
+		cur_col->user_count = 0;
+	}
+}
+int print_more(struct meson_uart_port *mup)
+{
+	int index = 0;
+	struct meson_uart_struct *co_struct = NULL;
+	struct meson_uart_port *mup_tmp = NULL;
+	struct meson_uart_list *cur_col = NULL;
+	struct console *co = NULL;
+	am_uart_t *uart = NULL;
+	const char *s = NULL;
+	unsigned long flags = 0;
+	spin_lock_irqsave(&cur_col_management.lock, flags);
+	if(!data_cache || list_empty(&cur_col_management.list_head)){
+		goto no_data_print;
+	}
+	for(index = 0; index < MESON_UART_PORT_NUM; index++){
+		mup_tmp = &am_ports[index];
+		if(mup == mup_tmp)
+			break;
+	}
+	if(index >= MESON_UART_PORT_NUM)
+		goto no_data_print;
+
+	cur_col = &cur_col_list[index];
+	if((cur_col->user_count == 0) || !cur_col->co_head)
+		goto no_data_print;
+
+	co_struct = cur_col->co_head;
+	co = co_struct->co;
+	index = co->index;
+	if(index < 0)
+		goto no_data_print;
+
+	uart = aml_uart_driver_data.regaddr[index];
+	s = co_struct->s + co_struct->offset;
+
+	spin_lock(&mup->wr_lock);
+	if (index!= meson_uart_console_index)
+		meson_serial_console_setup(co, NULL);
+	while ((readl(&uart->mode) & UART_TXENB)&&!(readl(&uart->status) & UART_TXFULL)) {
+		if(co_struct->count <= 0){
+			get_next_node(cur_col, co_struct, index);
+			if(!cur_col->co_head)
+				break;
+			co_struct = cur_col->co_head;
+			s = co_struct->s + co_struct->offset;
+		}
+		if (*s == '\n')
+			writel('\r', &uart->wdata);
+		writel(*s++, &uart->wdata);
+		co_struct->count--;
+		co_struct->offset++;
+	}
 
+	spin_unlock(&mup->wr_lock);
+	
+no_data_print:
+	spin_unlock_irqrestore(&cur_col_management.lock, flags);
+	return 0;
+}
 /*****************************************************/
 static int __init meson_uart_init(void)
 {
 	int ret;
-
+	int error;
 	ret = uart_register_driver(&meson_uart_driver);
 	if (ret){
 		printk(KERN_ERR"meson_uart_driver register failed\n");
@@ -1067,12 +1354,24 @@ static int __init meson_uart_init(void)
 		printk(KERN_ERR"meson_uart_platform_driver register failed\n");
 		uart_unregister_driver(&meson_uart_driver);
 	}
+	error = driver_create_file(&meson_uart_platform_driver.driver, &driver_attr_printkmode);
+	INIT_LIST_HEAD(&cur_col_management.list_head);
+	spin_lock_init(&cur_col_management.lock);
+	data_cache = vmalloc(MESON_SERIAL_BUFFER_SIZE);
+	if(!data_cache){
+		printk("buffer alloc failed for uart\n");
+		platform_driver_unregister(&meson_uart_platform_driver);
+		uart_unregister_driver(&meson_uart_driver);
+		return -ENOMEM;
+	}
 
 	return ret;
 }
 static void __exit meson_uart_exit(void)
 {
-       platform_driver_unregister(&meson_uart_platform_driver);
+	vfree(data_cache);
+	driver_remove_file(&meson_uart_platform_driver.driver, &driver_attr_printkmode);
+	platform_driver_unregister(&meson_uart_platform_driver);
 	uart_unregister_driver(&meson_uart_driver);
 }
 
diff --git a/drivers/amlogic/uart/uart/meson_uart.h b/drivers/amlogic/uart/uart/meson_uart.h
index 590baf61f6ab..4eaa1188189d 100755
--- a/drivers/amlogic/uart/uart/meson_uart.h
+++ b/drivers/amlogic/uart/uart/meson_uart.h
@@ -11,7 +11,7 @@
 #ifndef _LINUX_AM_UART_H
 #define _LINUX_AM_UART_H
 #include <mach/am_regs.h>
-#define UART_OVERFLOW_ERR (0x01<<18)
+#define UART_OVERFLOW_ERR (0x01<<24)
 #define UART_FRAME_ERR (0x01<<17)
 #define UART_PARITY_ERR (0x01<<16)
 
-- 
2.19.0

