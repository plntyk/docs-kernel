From 08454b6a3e802d2073742fb557f50b8952148add Mon Sep 17 00:00:00 2001
From: Zhiqiang Han <zhiqiang.han@amlogic.com>
Date: Fri, 6 Feb 2015 15:10:08 +0800
Subject: [PATCH 5399/5965] PD #102204: DVB: add swfilter support

  1. add a flag bit in filter param to enable the swfilter mode.

     #define DMX_USE_SWFILTER    0x100

  2. swfilter mode for pes and sct are all supported.
  3. *dmx2* and *asyncfifo1* are dedicated for swfilter.
     That means if any filter in swfilter mode exists,
     the dmx2 and the asyncfifo1 can not be used by user.
  4. set the */sys/class/stb/asyncfifo1_flush_size* to get the
     suitable callback interval.
  5. more than one stream with pes format can be filtered in swfilter mode:
       dmx_pes_filter_params.output = DMX_OUT_TAP;
  6. more than one stream with ts format can be filtered in swfilter mode:
       dmx_pes_filter_params.output = DMX_OUT_TSDEMUX_TAP;

PD #102204: fix /sys/class/stb/demuxN_free_filters

Change-Id: Ia7578bca59051e1733909ed6c265b59c74d27b60
---
 drivers/amlogic/dvb_tv/aml_dmx.c | 472 ++++++++++++++++++++++++++++---
 drivers/amlogic/dvb_tv/aml_dvb.c |  12 +-
 drivers/amlogic/dvb_tv/aml_dvb.h |  13 +
 include/uapi/linux/dvb/dmx.h     |   2 +
 4 files changed, 453 insertions(+), 46 deletions(-)

diff --git a/drivers/amlogic/dvb_tv/aml_dmx.c b/drivers/amlogic/dvb_tv/aml_dmx.c
index 211434b64fcb..b6bb86faa1b0 100755
--- a/drivers/amlogic/dvb_tv/aml_dmx.c
+++ b/drivers/amlogic/dvb_tv/aml_dmx.c
@@ -53,14 +53,33 @@
 #include <mach/power_gate.h>
 #endif
 
+#include <linux/vmalloc.h>
+
+
 #define ENABLE_SEC_BUFF_WATCHDOG
 #define USE_AHB_MODE
 
 #define pr_dbg(fmt, args...)\
-	do{\
-		if(debug_dmx)\
+	do {\
+		if (debug_dmx&0x1)\
 			printk("DVB: " fmt, ## args);\
 	}while(0)
+
+#define pr_dbg_sf(fmt, args...)\
+	do {\
+		if (debug_dmx&0x2)\
+			printk("DVB:SF " fmt, ## args);\
+	}while(0)
+
+#define pr_dbg_irq(fmt, args...)\
+	printk(fmt, ## args)
+
+#define pr_dbg_irq_sf(fmt, args...)\
+	do { \
+		if (debug_irq&2) \
+			pr_dbg_sf(fmt, ## args); \
+	}while(0)
+
 #define pr_error(fmt, args...) printk("DVB: " fmt, ## args)
 
 MODULE_PARM_DESC(debug_dmx, "\n\t\t Enable demux debug information");
@@ -71,6 +90,36 @@ MODULE_PARM_DESC(debug_irq, "\n\t\t Enable demux IRQ debug information");
 static int debug_irq = 0;
 module_param(debug_irq, int, S_IRUGO);
 
+static int npids=CHANNEL_COUNT;
+#define MOD_PARAM_DECLARE_CHANPIDS(_dmx) \
+MODULE_PARM_DESC(debug_dmx##_dmx##_chanpids, "\n\t\t pids of dmx channels"); \
+static short debug_dmx##_dmx##_chanpids[CHANNEL_COUNT] = {[0 ... (CHANNEL_COUNT - 1)] = -1}; \
+module_param_array(debug_dmx##_dmx##_chanpids, short, &npids, 0444)
+
+MOD_PARAM_DECLARE_CHANPIDS(0);
+MOD_PARAM_DECLARE_CHANPIDS(1);
+MOD_PARAM_DECLARE_CHANPIDS(2);
+
+#define set_debug_dmx_chanpids(_dmx, _idx, _pid)\
+	do { \
+		if     ((_dmx) == 0) {debug_dmx0_chanpids[(_idx)] = (_pid);} \
+		else if((_dmx) == 1) {debug_dmx1_chanpids[(_idx)] = (_pid);} \
+		else if((_dmx) == 2) {debug_dmx2_chanpids[(_idx)] = (_pid);} \
+	}while(0)
+
+MODULE_PARM_DESC(debug_sf_user, "\n\t\t only for sf mode check");
+static int debug_sf_user = 0;
+module_param(debug_sf_user, int, 0444);
+
+
+MODULE_PARM_DESC(force_sec_sf, "\n\t\t force sf mode for sec filter");
+static int force_sec_sf = 0;
+module_param(force_sec_sf, int, 0644);
+
+MODULE_PARM_DESC(force_pes_sf, "\n\t\t force sf mode for pes filter");
+static int force_pes_sf = 0;
+module_param(force_pes_sf, int, 0644);
+
 
 #define DMX_READ_REG(i,r)\
 	((i)?((i==1)?READ_MPEG_REG(r##_2):READ_MPEG_REG(r##_3)):READ_MPEG_REG(r))
@@ -154,6 +203,21 @@ static u32 first_audio_pts = 0;
 static int demux_skipbyte = 0;
 static int tsfile_clkdiv = 4;
 
+
+#define SF_DMX_ID 2
+#define SF_AFIFO_ID 1
+#define sf_dmx_sf(_dmx) (((_dmx)->id==SF_DMX_ID) && ((struct aml_dvb*)(_dmx)->demux.priv)->swfilter.user)
+#define sf_afifo_sf(_afifo) (((_afifo)->id==SF_AFIFO_ID) && (_afifo)->dvb->swfilter.user)
+#define dump(b, l) \
+	do { \
+		int i; \
+		printk("dump: "); \
+		for (i=0; i<(l); i++) \
+			printk("%02x ", *(((unsigned char*)(b))+i)); \
+		printk("\n"); \
+	}while(0)
+
+
 /*Section buffer watchdog*/
 static void section_buffer_watchdog_func(unsigned long arg)
 {
@@ -613,8 +677,8 @@ static irqreturn_t dmx_irq_handler(int irq_number, void *para)
 	status = DMX_READ_REG(dmx->id, STB_INT_STATUS);
 	if(!status) goto irq_handled;
 
-	if(debug_irq){
-		pr_dbg("demux %d irq status: 0x08%x\n", dmx->id, status);
+	if (debug_irq&1) {
+		pr_dbg_irq("demux %d irq status: 0x08%x\n", dmx->id, status);
 	}
 
 	if(status & (1<<SECTION_BUFFER_READY)) {
@@ -704,6 +768,93 @@ irq_handled:
 	return IRQ_HANDLED;
 }
 
+
+static int sf_rbuf_write(struct dvb_ringbuffer *buf, const u8 *src, size_t len)
+{
+	ssize_t free;
+
+	if (!len)
+		return 0;
+	if (!buf->data)
+		return 0;
+
+	free = dvb_ringbuffer_free(buf);
+	if (len > free) {
+		pr_error("sf: buffer overflow\n");
+		return -EOVERFLOW;
+	}
+
+	return dvb_ringbuffer_write(buf, src, len);
+}
+
+static int sf_rbuf_filter_pkts(struct aml_swfilter *sf,
+				void (*swfilter_packets)(struct dvb_demux *demux, const u8 *buf, size_t count),
+				struct dvb_demux *demux)
+{
+	struct dvb_ringbuffer *rb = &sf->rbuf;
+	ssize_t len1 = 0;
+	ssize_t len2 = 0;
+	size_t off;
+	size_t count;
+	size_t size;
+
+	//dump(&rb->data[rb->pread], 16);
+
+	/*
+	    rb|====--------===[0x47]====|
+		       ^             ^
+		       wr            rd
+	*/
+
+	len1 = rb->pwrite - rb->pread;
+	if (len1 < 0) {
+		len1 = rb->size - rb->pread;
+		len2 = rb->pwrite;
+	}
+
+	for (off=0; off<len1; off++) {
+		if (rb->data[rb->pread+off] == 0x47)
+			break;
+	}
+
+	if (off) {
+		pr_dbg_irq_sf("off ->|%d\n", off);
+	}
+
+	len1 -= off;
+	rb->pread = (rb->pread + off) % rb->size;
+
+	count = len1/188;
+	if (count) {
+		pr_dbg_irq_sf("pkt >> 1[%d<->%d]\n", rb->pread, rb->pwrite);
+		swfilter_packets(demux, rb->data+rb->pread, count);
+
+		size = count*188;
+		len1 -= size;
+		rb->pread += size;
+	}
+
+	if (len2 && len1 && ((len1+len2)>188)) {
+		pr_dbg_irq_sf("pkt >> 2[%d<->%d]\n", rb->pread, rb->pwrite);
+		size = 188-len1;
+		memcpy(sf->wrapbuf, rb->data+rb->pread, len1);
+		memcpy(sf->wrapbuf+len1, rb->data, size);
+		swfilter_packets(demux, sf->wrapbuf, 1);
+		rb->pread = size;
+		len2 -= size;
+	}
+
+	if (len2) {
+		pr_dbg_irq_sf("pkt >> 3[%d<->%d]\n", rb->pread, rb->pwrite);
+		count = len2/188;
+		if (count) {
+			swfilter_packets(demux, rb->data+rb->pread, count);
+			rb->pread += count*188;
+		}
+	}
+	return 0;
+}
+
 static inline int dmx_get_order(unsigned long size){
 	int order;
 
@@ -725,8 +876,8 @@ static void dvr_irq_bh_handler(unsigned long arg)
 	int i, factor;
 	unsigned long flags;
 
-	if(debug_irq){
-		pr_dbg("async fifo %d irq\n", afifo->id);
+	if (debug_irq&2) {
+		pr_dbg_irq("async fifo %d irq\n", afifo->id);
 	}
 
 	spin_lock_irqsave(&dvb->slock, flags);
@@ -734,29 +885,52 @@ static void dvr_irq_bh_handler(unsigned long arg)
 	if (dvb && afifo->source >= AM_DMX_0 && afifo->source < AM_DMX_MAX) {
 		dmx = &dvb->dmx[afifo->source];
 		if (dmx->init && dmx->record) {
+			struct aml_swfilter *sf = &dvb->swfilter;
+			int issf = 0;
+
 			total  = afifo->buf_len/afifo->flush_size;
 			factor = dmx_get_order(total);
 			size   = afifo->buf_len >> factor;
 
+			if (sf->user && (sf->afifo == afifo))
+				issf = 1;
+
 			for(i=0; i<CHANNEL_COUNT; i++) {
 				if(dmx->channel[i].used && dmx->channel[i].dvr_feed) {
 					int cnt;
+					int ret=0;
 
 					if(afifo->buf_read > afifo->buf_toggle){
 						cnt = total - afifo->buf_read;
 						dma_sync_single_for_cpu(NULL, afifo->pages_map+afifo->buf_read*size, cnt*size, DMA_FROM_DEVICE);
-						dmx->channel[i].dvr_feed->cb.ts((u8*)afifo->pages+afifo->buf_read*size, cnt*size, NULL, 0, &dmx->channel[i].dvr_feed->feed.ts, DMX_OK);
+						if (issf)
+							ret = sf_rbuf_write(&sf->rbuf, (u8*)afifo->pages+afifo->buf_read*size, cnt*size);
+						else
+							dmx->channel[i].dvr_feed->cb.ts((u8*)afifo->pages+afifo->buf_read*size, cnt*size, NULL, 0, &dmx->channel[i].dvr_feed->feed.ts, DMX_OK);
 						afifo->buf_read = 0;
 					}
 
 					if(afifo->buf_toggle > afifo->buf_read){
 						cnt = afifo->buf_toggle - afifo->buf_read;
 						dma_sync_single_for_cpu(NULL, afifo->pages_map+afifo->buf_read*size, cnt*size, DMA_FROM_DEVICE);
-						dmx->channel[i].dvr_feed->cb.ts((u8*)afifo->pages+afifo->buf_read*size, cnt*size, NULL, 0, &dmx->channel[i].dvr_feed->feed.ts, DMX_OK);
+						if (issf) {
+							if (ret >= 0)
+								ret = sf_rbuf_write(&sf->rbuf, (u8*)afifo->pages+afifo->buf_read*size, cnt*size);
+						} else
+							dmx->channel[i].dvr_feed->cb.ts((u8*)afifo->pages+afifo->buf_read*size, cnt*size, NULL, 0, &dmx->channel[i].dvr_feed->feed.ts, DMX_OK);
 						afifo->buf_read = afifo->buf_toggle;
 					}
 
-					pr_dbg("write data to dvr\n");
+					if (issf) {
+						if (ret>0) {
+							sf_rbuf_filter_pkts(sf, dvb_dmx_swfilter_packets, dmx->channel[i].dvr_feed->demux);
+						} else {
+							pr_error("sf rbuf write error[%d]\n", ret);
+						}
+					} else if (debug_irq&2) {
+						pr_dbg_irq("write data to dvr\n");
+					}
+
 					break;
 				}
 			}
@@ -1285,7 +1459,9 @@ static int dmx_get_record_flag(struct aml_dmx *dmx)
 	for (i=0; i<ASYNCFIFO_COUNT; i++) {
 		if (! dvb->asyncfifo[i].init)
 			continue;
-		if (dvb->asyncfifo[i].source == dmx->id) {
+		if ((dvb->asyncfifo[i].source == dmx->id)
+			//&& !(dvb->swfilter.user && (i==SF_AFIFO_ID))/*sf mode reserved*/
+			) {
 			linked = 1;
 			break;
 		}
@@ -2357,6 +2533,8 @@ int dmx_alloc_chan(struct aml_dmx *dmx, int type, int pes_type, int pid)
 
 	dmx_set_chan_regs(dmx, id);
 
+	set_debug_dmx_chanpids(dmx->id, id, pid);
+
 	dmx->chan_count++;
 
 	dmx_enable(dmx);
@@ -2380,6 +2558,7 @@ void dmx_free_chan(struct aml_dmx *dmx, int cid)
 		WRITE_MPEG_REG(PARSER_SUB_WP, parser_sub_start_ptr);
 	}
 
+	set_debug_dmx_chanpids(dmx->id, cid, -1);
 	dmx->chan_count--;
 
 	dmx_enable(dmx);
@@ -2432,11 +2611,178 @@ static void dmx_remove_filter(struct aml_dmx *dmx, int cid, int fid)
 	dmx_clear_filter_buffer(dmx, fid);
 }
 
+static int sf_add_feed(struct aml_dmx *src_dmx, struct dvb_demux_feed *feed)
+{
+	int ret;
+
+	struct aml_dvb *dvb = (struct aml_dvb*)src_dmx->demux.priv;
+	struct aml_swfilter *sf = &dvb->swfilter;
+
+	pr_dbg_sf("sf add pid[%d]\n", feed->pid);
+
+	/*init sf*/
+	if (!sf->user) {
+		void *mem;
+		mem = vmalloc(SF_BUFFER_SIZE);
+		if (!mem) {
+			return -ENOMEM;
+		}
+		dvb_ringbuffer_init(&sf->rbuf, mem, SF_BUFFER_SIZE);
+
+		sf->dmx = &dvb->dmx[SF_DMX_ID];
+		sf->afifo = &dvb->asyncfifo[SF_AFIFO_ID];
+
+		sf->dmx->source = src_dmx->source;
+		sf->afifo->source = sf->dmx->id;
+		sf->track_dmx = src_dmx->id;
+		//sf->afifo->flush_size = 188*10;
+
+		pr_dbg_sf("init sf mode.\n");
+
+	} else if (sf->dmx->source != src_dmx->source) {
+		pr_error(" pid=%d[src:%d] already used with sfdmx%d[src:%d]\n",
+			feed->pid, src_dmx->source, sf->dmx->id, sf->dmx->source);
+		return -EBUSY;
+	}
+
+	/*setup feed*/
+	if ((ret=dmx_get_chan(sf->dmx, feed->pid)) >= 0) {
+		pr_error(" pid=%d[dmx:%d] already used [dmx:%d].\n",
+			feed->pid, src_dmx->id,
+			((struct aml_dmx*)sf->dmx->channel[ret].feed->demux)->id);
+		return -EBUSY;
+	}
+	if ((ret=dmx_alloc_chan(sf->dmx, DMX_TYPE_TS, DMX_PES_OTHER, feed->pid))<0) {
+		pr_error(" %s: alloc chan error, ret=%d\n", __func__, ret);
+		return ret;
+	}
+	sf->dmx->channel[ret].feed = feed;
+	feed->priv = (void*)ret;
+
+	sf->dmx->channel[ret].dvr_feed = feed;
+
+	sf->user++;
+	debug_sf_user = sf->user;
+
+	dmx_enable(sf->dmx);
+
+	return 0;
+}
+
+static int sf_remove_feed(struct aml_dmx *src_dmx, struct dvb_demux_feed *feed)
+{
+	int ret;
+
+	struct aml_dvb *dvb = (struct aml_dvb*)src_dmx->demux.priv;
+	struct aml_swfilter *sf = &dvb->swfilter;
+
+	if (!sf->user || (sf->dmx->source != src_dmx->source)) {
+		return 0;
+	}
+
+	if ((ret=dmx_get_chan(sf->dmx, feed->pid))<0) {
+		return 0;
+	}
+
+	pr_dbg_sf("sf remove pid[%d]\n", feed->pid);
+
+	dmx_free_chan(sf->dmx, (int)feed->priv);
+
+	sf->dmx->channel[ret].feed = NULL;
+	sf->dmx->channel[ret].dvr_feed = NULL;
+
+	sf->user--;
+	debug_sf_user = sf->user;
+
+	if (!sf->user) {
+		sf->dmx->source = -1;
+		sf->afifo->source = AM_DMX_MAX;
+		sf->track_dmx = -1;
+		//sf->afifo->flush_size = sf->afifo->buf_len>>1;
+
+		if (sf->rbuf.data) {
+			void *mem = sf->rbuf.data;
+			sf->rbuf.data=NULL;
+			vfree(mem);
+		}
+		pr_dbg_sf("exit sf mode.\n");
+	}
+
+	return 0;
+}
+
+static int sf_feed_sf(struct aml_dmx *dmx, struct dvb_demux_feed *feed, int add_not_remove)
+{
+	int sf=0;
+
+	if (sf_dmx_sf(dmx)) {
+		pr_error("%s: demux %d is in sf mode\n", __func__, dmx->id);
+		return -EINVAL;
+	}
+
+	switch (feed->type)
+	{
+		case DMX_TYPE_TS: {
+			struct dmxdev_filter *dmxdevfilter = feed->feed.ts.priv;
+			if (!DVR_FEED(feed)) {
+				if (dmxdevfilter->params.pes.flags & DMX_USE_SWFILTER)
+					sf = 1;
+				if (force_pes_sf)
+					sf = 1;
+			}
+		}break;
+
+		case DMX_TYPE_SEC: {
+			struct dvb_demux_filter *filter;
+			for (filter=feed->filter; filter; filter=filter->next) {
+				struct dmxdev_filter *dmxdevfilter = filter->filter.priv;
+				if (dmxdevfilter->params.sec.flags & DMX_USE_SWFILTER)
+					sf = 1;
+				if (add_not_remove)
+					filter->hw_handle = (u16)-1;
+			}
+			if (force_sec_sf)
+				sf = 1;
+		}break;
+	}
+
+	return sf? 0 : 1;
+}
+
+static int sf_check_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed, int add_not_remove)
+{
+	int ret=0;
+
+	ret = sf_feed_sf(dmx, feed, add_not_remove);
+	if (ret)
+		return ret;
+
+	pr_dbg_sf("%s [pid:%d] %s\n",
+		(feed->type==DMX_TYPE_TS)? "DMX_TYPE_TS" : "DMX_TYPE_SEC",
+		feed->pid,
+		add_not_remove? "-> sf mode":"sf mode ->");
+
+	if (add_not_remove)
+		ret = sf_add_feed(dmx, feed);
+	else
+		ret = sf_remove_feed(dmx, feed);
+
+	if (ret<0) {
+		pr_error("sf %s feed fail[%d]\n", add_not_remove? "add" : "remove", ret);
+	}
+	return ret;
+}
+
 static int dmx_add_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed)
 {
-	int id, ret;
+	int id, ret=0;
 	struct dvb_demux_filter *filter;
 	struct dvb_demux_feed *dfeed = NULL;
+	int sf_ret = 0;/*<0:error, =0:sf_on, >0:sf_off*/
+
+	sf_ret = sf_check_feed(dmx, feed, 1/*SF_FEED_OP_ADD*/);
+	if (sf_ret<0)
+		return sf_ret;
 
 	switch(feed->type)
 	{
@@ -2449,8 +2795,12 @@ static int dmx_add_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed)
 						pr_error("PID %d already used(DVR)\n", feed->pid);
 						return -EBUSY;
 					}
-					dfeed = dmx->channel[ret].feed;
-					dmx_remove_feed(dmx, dfeed);
+					if (sf_ret) {
+						/*if sf_on, we do not reset the previous dvr feed,
+						   just load the pes feed on the sf, a diffrent data path.*/
+						dfeed = dmx->channel[ret].feed;
+						dmx_remove_feed(dmx, dfeed);
+					}
 				} else {
 					if (DVR_FEED(feed) && (! dmx->channel[ret].dvr_feed)){
 						/*just store the dvr_feed*/
@@ -2466,13 +2816,16 @@ static int dmx_add_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed)
 					}
 				}
 			}
-			if((ret=dmx_alloc_chan(dmx, feed->type, feed->pes_type, feed->pid))<0) {
-				pr_dbg("%s: alloc chan error, ret=%d\n", __func__, ret);
-				return ret;
+
+			if (sf_ret) {/*not sf feed.*/
+				if ((ret=dmx_alloc_chan(dmx, feed->type, feed->pes_type, feed->pid))<0) {
+					pr_dbg("%s: alloc chan error, ret=%d\n", __func__, ret);
+					return ret;
+				}
+				dmx->channel[ret].feed = feed;
+				feed->priv = (void*)ret;
+				dmx->channel[ret].dvr_feed = NULL;
 			}
-			dmx->channel[ret].feed = feed;
-			feed->priv = (void*)ret;
-			dmx->channel[ret].dvr_feed = NULL;
 			/*dvr*/
 			if (DVR_FEED(feed)){
 				dmx->channel[ret].dvr_feed = feed;
@@ -2480,7 +2833,7 @@ static int dmx_add_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed)
 				if (! dmx->record){
 					dmx_enable(dmx);
 				}
-			}else if (dfeed){
+			}else if (dfeed && sf_ret){
 				dmx->channel[ret].dvr_feed = dfeed;
 				dfeed->priv = (void*)ret;
 				if (! dmx->record){
@@ -2491,33 +2844,41 @@ static int dmx_add_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed)
 		break;
 		case DMX_TYPE_SEC:
 			pr_dbg("%s: DMX_TYPE_SEC\n", __func__);
+
 			if((ret=dmx_get_chan(dmx, feed->pid))>=0) {
 				if (DVR_FEED(dmx->channel[ret].feed)){
-					dfeed = dmx->channel[ret].feed;
-					dmx_remove_feed(dmx, dfeed);
+					if (sf_ret) {
+						/*if sf_on, we do not reset the previous dvr feed,
+						just load the pes feed on the sf, a diffrent data path.*/
+						dfeed = dmx->channel[ret].feed;
+						dmx_remove_feed(dmx, dfeed);
+					}
 				} else {
 					pr_error("PID %d already used\n", feed->pid);
 					return -EBUSY;
 				}
 			}
-			if((id=dmx_alloc_chan(dmx, feed->type, feed->pes_type, feed->pid))<0) {
-				return id;
-			}
-			for(filter=feed->filter; filter; filter=filter->next) {
-				if((ret=dmx_chan_add_filter(dmx, id, filter))>=0) {
-					filter->hw_handle = ret;
-				} else {
-					filter->hw_handle = (u16)-1;
+			if (sf_ret) {/*not sf feed.*/
+				if ((id=dmx_alloc_chan(dmx, feed->type, feed->pes_type, feed->pid))<0) {
+					return id;
 				}
-			}
-			dmx->channel[id].feed = feed;
-			feed->priv = (void*)id;
-			dmx->channel[id].dvr_feed = NULL;
-			if (dfeed){
-				dmx->channel[id].dvr_feed = dfeed;
-				dfeed->priv = (void*)id;
-				if (! dmx->record){
-					dmx_enable(dmx);
+				for (filter=feed->filter; filter; filter=filter->next) {
+					if ((ret=dmx_chan_add_filter(dmx, id, filter)) >= 0) {
+						filter->hw_handle = ret;
+					} else {
+						filter->hw_handle = (u16)-1;
+					}
+				}
+				dmx->channel[id].feed = feed;
+				feed->priv = (void*)id;
+				dmx->channel[id].dvr_feed = NULL;
+
+				if (dfeed) {
+					dmx->channel[id].dvr_feed = dfeed;
+					dfeed->priv = (void*)id;
+					if (! dmx->record) {
+						dmx_enable(dmx);
+					}
 				}
 			}
 		break;
@@ -2536,6 +2897,12 @@ static int dmx_remove_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed)
 	struct dvb_demux_filter *filter;
 	struct dvb_demux_feed *dfeed = NULL;
 
+	int sf_ret = 0;/*<0:error, =0:sf_on, >0:sf_off*/
+
+	sf_ret = sf_check_feed(dmx, feed, 0/*SF_FEED_OP_RM*/);
+	if (sf_ret <= 0)
+		return sf_ret;
+
 	switch(feed->type)
 	{
 		case DMX_TYPE_TS:
@@ -2568,6 +2935,7 @@ static int dmx_remove_feed(struct aml_dmx *dmx, struct dvb_demux_feed *feed)
 				if(filter->hw_handle!=(u16)-1)
 					dmx_remove_filter(dmx, (int)feed->priv, (int)filter->hw_handle);
 			}
+
 			dfeed = dmx->channel[(int)feed->priv].dvr_feed;
 			dmx_free_chan(dmx, (int)feed->priv);
 			if (dfeed) {
@@ -2697,6 +3065,19 @@ int aml_dmx_hw_stop_feed(struct dvb_demux_feed *dvbdmxfeed)
 	return 0;
 }
 
+int sf_dmx_track_source(struct aml_dmx *dmx)
+{
+	struct aml_dvb *dvb = (struct aml_dvb*)dmx->demux.priv;
+	struct aml_swfilter *sf = &dvb->swfilter;
+	if (sf->user && (dmx->id == sf->track_dmx)) {
+		pr_dbg_sf("tracking dmx src [%d -> %d]\n",
+					sf->dmx->source, dmx->source);
+		sf->dmx->source = dmx->source;
+		dmx_reset_dmx_hw_ex_unlock(dvb, sf->dmx, 0);
+	}
+	return 0;
+}
+
 int aml_dmx_hw_set_source(struct dmx_demux* demux, dmx_source_t src)
 {
 	struct aml_dmx *dmx = (struct aml_dmx*)demux;
@@ -2705,6 +3086,11 @@ int aml_dmx_hw_set_source(struct dmx_demux* demux, dmx_source_t src)
 	int hw_src;
 	unsigned long flags;
 
+	if (sf_dmx_sf(dmx)) {
+		pr_error("%s: demux %d is in sf mode\n", __func__, dmx->id);
+		return -EINVAL;
+	}
+
 	spin_lock_irqsave(&dvb->slock, flags);
 
 	hw_src = dmx->source;
@@ -2728,9 +3114,10 @@ int aml_dmx_hw_set_source(struct dmx_demux* demux, dmx_source_t src)
 		break;
 	}
 
-	if(hw_src != dmx->source) {
+	if (hw_src != dmx->source) {
 		dmx->source = hw_src;
 		dmx_reset_dmx_hw_ex_unlock(dvb, dmx, 0);
+		sf_dmx_track_source(dmx);
 	}
 
 	spin_unlock_irqrestore(&dvb->slock, flags);
@@ -2896,6 +3283,11 @@ int aml_asyncfifo_hw_set_source(struct aml_asyncfifo *afifo, aml_dmx_id_t src)
 	int ret = -1;
 	unsigned long flags;
 
+	if (sf_afifo_sf(afifo)) {
+		pr_error("%s: afifo %d is in sf mode\n", __func__, afifo->id);
+		return -EINVAL;
+	}
+
 	spin_lock_irqsave(&dvb->slock, flags);
 
 	pr_dbg("asyncfifo %d set source %d->%d", afifo->id, afifo->source, src);
diff --git a/drivers/amlogic/dvb_tv/aml_dvb.c b/drivers/amlogic/dvb_tv/aml_dvb.c
index b7ad86dc1bf6..b243857e60e1 100755
--- a/drivers/amlogic/dvb_tv/aml_dvb.c
+++ b/drivers/amlogic/dvb_tv/aml_dvb.c
@@ -621,17 +621,17 @@ static ssize_t demux##i##_store_source(struct class *class,  struct class_attrib
 static ssize_t demux##i##_show_free_filters(struct class *class,  struct class_attribute *attr,char *buf)\
 {\
 	struct aml_dvb *dvb = &aml_dvb_device;\
-	struct aml_dmx *dmx = &dvb->dmx[i];\
+	struct dvb_demux *dmx = &dvb->dmx[i].demux;\
 	int fid, count;\
 	ssize_t ret = 0;\
-	unsigned long flags;\
-	spin_lock_irqsave(&dvb->slock, flags);\
+	if (mutex_lock_interruptible(&dmx->mutex)) \
+		return -ERESTARTSYS; \
 	count = 0;\
-	for(fid = 0; fid < FILTER_COUNT; fid++){\
-		if(!dmx->filter[fid].used)\
+	for (fid = 0; fid < dmx->filternum; fid++) {\
+		if (!dmx->filter[fid].state != DMX_STATE_FREE)\
 			count++;\
 	}\
-	spin_unlock_irqrestore(&dvb->slock, flags);\
+	mutex_unlock(&dmx->mutex);\
 	ret = sprintf(buf, "%d\n", count);\
 	return ret;\
 }
diff --git a/drivers/amlogic/dvb_tv/aml_dvb.h b/drivers/amlogic/dvb_tv/aml_dvb.h
index fe6c173ff7ee..2915ff2ae891 100755
--- a/drivers/amlogic/dvb_tv/aml_dvb.h
+++ b/drivers/amlogic/dvb_tv/aml_dvb.h
@@ -184,6 +184,18 @@ struct aml_s2p {
 	int    invert;
 };
 
+struct aml_swfilter {
+	int    user;
+	struct aml_dmx *dmx;
+	struct aml_asyncfifo *afifo;
+
+	struct dvb_ringbuffer rbuf;
+#define SF_BUFFER_SIZE (10*188*1024)
+
+	u8     wrapbuf[188];
+	int    track_dmx;
+};
+
 struct aml_dvb {
 	struct dvb_device    dvb_dev;
 	struct aml_ts_input  ts[TS_IN_COUNT];
@@ -203,6 +215,7 @@ struct aml_dvb {
 	spinlock_t           slock;
 	struct timer_list    watchdog_timer;
 	int                  dmx_watchdog_disable[DMX_DEV_COUNT];
+	struct aml_swfilter  swfilter;
 };
 
 
diff --git a/include/uapi/linux/dvb/dmx.h b/include/uapi/linux/dvb/dmx.h
index cb9fbab55cd7..240c6ad72885 100755
--- a/include/uapi/linux/dvb/dmx.h
+++ b/include/uapi/linux/dvb/dmx.h
@@ -105,6 +105,8 @@ struct dmx_sct_filter_params
 #define DMX_ONESHOT         2
 #define DMX_IMMEDIATE_START 4
 #define DMX_KERNEL_CLIENT   0x8000
+#define DMX_USE_SWFILTER    0x100
+
 };
 
 
-- 
2.19.0

