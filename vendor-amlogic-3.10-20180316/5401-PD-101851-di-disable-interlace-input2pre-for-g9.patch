From 2cd88eac45fefad47eeb89caaed5fa103fa6588f Mon Sep 17 00:00:00 2001
From: KeLe Bai <kele.bai@amlogic.com>
Date: Thu, 5 Feb 2015 16:41:46 +0800
Subject: [PATCH 5401/5965] PD #101851: di: disable interlace input2pre for g9

Change-Id: I7868b2f3e8b73024ec90dca048d8aaae8d0b50b6
---
 drivers/amlogic/amports/rdma.c               |  4 +-
 drivers/amlogic/deinterlace/deinterlace.c    | 35 ++++++++--------
 drivers/amlogic/deinterlace/deinterlace.h    |  6 +--
 drivers/amlogic/deinterlace/deinterlace_hw.c | 42 ++++++++++----------
 4 files changed, 45 insertions(+), 42 deletions(-)

diff --git a/drivers/amlogic/amports/rdma.c b/drivers/amlogic/amports/rdma.c
index 9885d6b5b072..db45f7282135 100755
--- a/drivers/amlogic/amports/rdma.c
+++ b/drivers/amlogic/amports/rdma.c
@@ -209,7 +209,7 @@ void rdma_table_prepare_read(unsigned long reg_adr)
 #else
 void rdma2_table_prepare_write(unsigned long reg_adr, unsigned long val)
 {
-    if(((rmda2_item_count<<1)+1)<(RDMA_TABLE_SIZE/4)){
+    if(((rmda2_item_count<<1)+1)<(RDMA2_TABLE_SIZE/4)){
         rmda2_table[rmda2_item_count<<1] = reg_adr; //CBUS_REG_ADDR(reg_adr);
         rmda2_table[(rmda2_item_count<<1)+1] = val;
         rmda2_item_count++;
@@ -252,7 +252,7 @@ int rdma2_config(unsigned int trigger_signal)
 		Wr(RDMA_ACCESS_AUTO, data32);
 	}
 	else{
-		data32 &= 0xff00ffff;
+		data32 &= 0xfffdffbf;
 		Wr(RDMA_ACCESS_AUTO, data32);
 	}
     rmda2_item_count = 0;
diff --git a/drivers/amlogic/deinterlace/deinterlace.c b/drivers/amlogic/deinterlace/deinterlace.c
index 3f3c5623a7ec..bc48998f1b5e 100755
--- a/drivers/amlogic/deinterlace/deinterlace.c
+++ b/drivers/amlogic/deinterlace/deinterlace.c
@@ -155,6 +155,10 @@ MODULE_PARM_DESC(overturn,"overturn /disable reverse");
 static bool check_start_drop_prog = false;
 module_param(check_start_drop_prog,bool,0644);
 MODULE_PARM_DESC(check_start_drop_prog,"enable/disable progress start drop function");
+
+static bool mcpre_en = true;
+module_param(mcpre_en,bool,0644);
+MODULE_PARM_DESC(mcpre_en,"enable/disable me in pre");
 #define CHECK_VDIN_BUF_ERROR
 
 #define DEVICE_NAME "deinterlace"
@@ -186,7 +190,7 @@ static dev_t di_id;
 static struct class *di_class;
 
 #define INIT_FLAG_NOT_LOAD 0x80
-static char version_s[] = "2015-1-8a";//disable cue for side-effect
+static char version_s[] = "2015-1-29a";//enable pre vdin link when input2pre
 static unsigned char boot_init_flag=0;
 static int receiver_is_amvideo = 1;
 
@@ -278,7 +282,7 @@ static bool use_2_interlace_buff = false;
 #endif
 static int input2pre_buf_miss_count = 0;
 static int input2pre_proc_miss_count = 0;
-static int input2pre_throw_count = 1;
+static int input2pre_throw_count = 0;
 
 #ifdef NEW_DI_V1
 static int input2pre_miss_policy = 0; /* 0, do not force pre_de_busy to 0, use di_wr_buf after de_irq happen; 1, force pre_de_busy to 0 and call pre_de_done_buf_clear to clear di_wr_buf */
@@ -1691,8 +1695,9 @@ static void dump_di_pre_stru(void)
 #ifdef DET3D
     printk("vframe_interleave_flag = %d\n", di_pre_stru.vframe_interleave_flag);
 #endif
-    printk("left_right 		 = %d\n", di_pre_stru.left_right);
+    printk("left_right 		   = %d\n", di_pre_stru.left_right);
     printk("force_interlace        = %s\n",di_pre_stru.force_interlace?"true":"false");
+    printk("vdin2nr 		   = %d\n", di_pre_stru.vdin2nr);
 }
 
 typedef struct{
@@ -2361,18 +2366,16 @@ static unsigned char is_bypass_post(void)
 #ifdef RUN_DI_PROCESS_IN_IRQ
 static unsigned char is_input2pre(void)
 {
-    if( input2pre
-        &&vdin_source_flag
-        &&(bypass_state==0)){
-#ifdef NEW_DI_V1
-        pre_urgent = 1;
-#endif
+    if(input2pre
+    	#ifdef NEW_DI_V3
+    	&& di_pre_stru.cur_prog_flag
+    	#endif
+        && vdin_source_flag
+        && (bypass_state==0)){
+
         return 1;
     }
 
-#ifdef NEW_DI_V1
-    pre_urgent = 0;
-#endif
     return 0;
 }
 #endif
@@ -3448,13 +3451,13 @@ static void pre_de_process(void)
                di_pre_stru.enable_pulldown_check,                                  // pd22 check_en
 			         0,                      											// hist check_en
                chan2_field_num,                      //  field num for chan2. 1 bottom, 0 top.
-               0,                      // pre viu link.
+               di_pre_stru.vdin2nr,                  // pre vdin link.
                pre_hold_line,                     //hold line.
                pre_urgent
              );
 		Wr(DI_PRE_CTRL, Rd(DI_PRE_CTRL)|(0x3 << 30)); //add for M6, reset
 #ifdef NEW_DI_V3
-    enable_mc_di_pre(&di_pre_stru.di_mcinford_mif,&di_pre_stru.di_mcinfowr_mif,&di_pre_stru.di_mcvecwr_mif);
+    enable_mc_di_pre(&di_pre_stru.di_mcinford_mif,&di_pre_stru.di_mcinfowr_mif,&di_pre_stru.di_mcvecwr_mif,pre_urgent);
 #endif
 #ifdef NEW_DI_V1
     if(get_new_mode_flag() == 1){
@@ -3480,7 +3483,7 @@ static void pre_de_process(void)
             Wr(DI_PRE_CTRL, Rd(DI_PRE_CTRL)|(cont_rd<<25));
             #ifdef NEW_DI_V3
             if(di_pre_stru.cur_prog_flag == 0)
-                Wr(DI_MTN_CTRL1, 0x3000|Rd(DI_MTN_CTRL1));//enable me(mc di)
+                Wr(DI_MTN_CTRL1, (mcpre_en?0x3000:0)|Rd(DI_MTN_CTRL1));//enable me(mc di)
             if(di_pre_stru.field_count_for_cont == 4){
             	di_mtn_1_ctrl1 &= (~(1<<30)); // enable contp2rd and contprd
             	Wr(MCDI_MOTINEN,1<<1|1);    //enable motin refinement
@@ -5015,7 +5018,7 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
                         #endif
 	    	);
     	#ifdef NEW_DI_V3
-	enable_mc_di_post(&di_post_stru.di_mcvecrd_mif);
+	enable_mc_di_post(&di_post_stru.di_mcvecrd_mif,post_urgent);
 	#endif
 	}
 	else
diff --git a/drivers/amlogic/deinterlace/deinterlace.h b/drivers/amlogic/deinterlace/deinterlace.h
index bc584e044689..e2e7dc515a2e 100755
--- a/drivers/amlogic/deinterlace/deinterlace.h
+++ b/drivers/amlogic/deinterlace/deinterlace.h
@@ -359,12 +359,12 @@ void enable_di_pre_aml (
    DI_SIM_MIF_t    *di_contwr_mif,
 #endif
    		int nr_en, int mtn_en, int pd32_check_en, int pd22_check_en, int hist_check_en,
-   		int pre_field_num, int pre_viu_link, int hold_line, int urgent
+   		int pre_field_num, int pre_vdin_link, int hold_line, int urgent
    	);
 
 #ifdef NEW_DI_V3
-void enable_mc_di_pre(DI_MC_MIF_t *di_mcinford_mif,DI_MC_MIF_t *di_mcinfowr_mif,DI_MC_MIF_t *di_mcvecwr_mif);
-void enable_mc_di_post(DI_MC_MIF_t *di_mcvecrd_mif);
+void enable_mc_di_pre(DI_MC_MIF_t *di_mcinford_mif,DI_MC_MIF_t *di_mcinfowr_mif,DI_MC_MIF_t *di_mcvecwr_mif,int urgent);
+void enable_mc_di_post(DI_MC_MIF_t *di_mcvecrd_mif,int urgent);
 #endif
 
 void enable_region_blend (
diff --git a/drivers/amlogic/deinterlace/deinterlace_hw.c b/drivers/amlogic/deinterlace/deinterlace_hw.c
index 726f49edfe80..0dbd1971ad4a 100755
--- a/drivers/amlogic/deinterlace/deinterlace_hw.c
+++ b/drivers/amlogic/deinterlace/deinterlace_hw.c
@@ -354,8 +354,6 @@ unsigned int nr2_en = 0x1;
 module_param(nr2_en,uint,0644);
 MODULE_PARM_DESC(nr2_en,"\n nr2_en\n");
 
-
-
 void enable_di_pre_aml (
    DI_MIF_t        *di_inp_mif,
    DI_MIF_t        *di_mem_mif,
@@ -368,7 +366,7 @@ void enable_di_pre_aml (
    DI_SIM_MIF_t    *di_contwr_mif,
 #endif
    int nr_en, int mtn_en, int pd32_check_en, int pd22_check_en, int hist_check_en,
-   int pre_field_num, int pre_viu_link, int hold_line, int urgent)
+   int pre_field_num, int pre_vdin_link, int hold_line, int urgent)
 {
     int hist_check_only = 0;
 #ifdef NEW_DI_V1
@@ -484,16 +482,17 @@ void enable_di_pre_aml (
                     (pd22_check_en << 9) |        					// line buffer 2 enable
                     (0 << 10) |        								// pre drop first.
                     ((di_pre_ctrl__di_pre_repeat!=0xff)?(di_pre_ctrl__di_pre_repeat&0x1):(0 << 11)) |      //pre repeat.
-                    (0 << 12) |        								// pre viu link
-                    (hold_line << 16) |      						// pre hold line number
-                    (1 << 22 ) |                   					// MTN after NR.
-                    (pre_field_num << 29) |        					// pre field number.
-                    (0x1 << 30 )      								// pre soft rst, pre frame rst.
+                    (0 << 12) |        			   // pre viu link
+                    (pre_vdin_link<< 13) |                 //pre vdin link
+                    (hold_line << 16) |      		   // pre hold line number
+                    (1 << 22 ) |                   	   // MTN after NR.
+                    (pre_field_num << 29) |        	   // pre field number.
+                    (0x1 << 30 )      			   // pre soft rst, pre frame rst.
                    );
 
 #ifdef SUPPORT_MPEG_TO_VDIN
 	if(mpeg2vdin_flag)
-		WRITE_MPEG_REG_BITS(DI_PRE_CTRL,1,13,1);// pre sync with vdin vsync
+	    WRITE_MPEG_REG_BITS(DI_PRE_CTRL,1,13,1);// pre sync with vdin vsync
 #endif
 #ifdef DET3D
     if(det3d_en && (!det3d_cfg)) {
@@ -506,7 +505,7 @@ void enable_di_pre_aml (
 #endif
 }
 #ifdef NEW_DI_V3
-void enable_mc_di_pre(DI_MC_MIF_t *di_mcinford_mif,DI_MC_MIF_t *di_mcinfowr_mif,DI_MC_MIF_t *di_mcvecwr_mif)
+void enable_mc_di_pre(DI_MC_MIF_t *di_mcinford_mif,DI_MC_MIF_t *di_mcinfowr_mif,DI_MC_MIF_t *di_mcvecwr_mif,int urgent)
 {
     Wr(MCDI_MCVECWR_X, di_mcvecwr_mif->size_x);
     Wr(MCDI_MCVECWR_Y, di_mcvecwr_mif->size_y);
@@ -523,30 +522,31 @@ void enable_mc_di_pre(DI_MC_MIF_t *di_mcinford_mif,DI_MC_MIF_t *di_mcinfowr_mif,
     
    Wr(MCDI_MCVECWR_CTRL ,di_mcvecwr_mif->canvas_num |
                          (0<<14) |   // sync latch en
-			 (0<<8 ) |   //urgent
+			 (urgent<<8 ) |   //urgent
 			 (1<<12) |   // enable reset by frame rst
-			 (0xc031<<16));   
+			 (0x4031<<16));   
    Wr(MCDI_MCINFOWR_CTRL,di_mcinfowr_mif->canvas_num |
                          (0<<14) |   // sync latch en
-		         (0<<8 ) |   //urgent
+		         (urgent<<8 ) |   //urgent
 			 (1<<12) |   // enable reset by frame rst
-			 (0xc042<<16));          
+			 (0x4042<<16));          
    Wr(MCDI_MCINFORD_CTRL,di_mcinford_mif->canvas_num |
                          (0<<10) |   // sync latch en
-			 (0<<8 ) |   //urgent
+			 (urgent<<8 ) |   //urgent
 			 (1<<9)  |      // enable reset by frame rst
-			 (0x8042<<16));
+			 (0x42<<16));
 }
 
-void enable_mc_di_post(DI_MC_MIF_t *di_mcvecrd_mif)
+void enable_mc_di_post(DI_MC_MIF_t *di_mcvecrd_mif,int urgent)
 {
     VSYNC_WR_MPEG_REG(MCDI_MCVECRD_X, di_mcvecrd_mif->start_x<<16|(di_mcvecrd_mif->size_x+di_mcvecrd_mif->start_x));
     VSYNC_WR_MPEG_REG(MCDI_MCVECRD_Y, di_mcvecrd_mif->start_y<<16|(di_mcvecrd_mif->size_y+di_mcvecrd_mif->start_y));
     VSYNC_WR_MPEG_REG(MCDI_MCVECRD_CANVAS_SIZE,(di_mcvecrd_mif->size_x<<16)+di_mcvecrd_mif->size_y);
     VSYNC_WR_MPEG_REG(MCDI_MCVECRD_CTRL, di_mcvecrd_mif->canvas_num |  // canvas index. 
+					 (urgent<<8 ) |   //urgent
                                          (1<<9)   |  // canvas enable
                                          (0<< 10) |
-                                         (0x8031<<16));  
+                                         (0x31<<16));  
    if(di_mcvecrd_mif->blend_mode == 3)  
        VSYNC_WR_MPEG_REG_BITS(MCDI_MC_CRTL,mcen_mode,0,2);  //open mc
    else
@@ -1651,9 +1651,9 @@ void di_post_switch_buffer (
     VSYNC_WR_MPEG_REG(DI_BLEND_CTRL2,   (blend_ctrl2_black_level<< 8 ) |     (blend_ctrl2_mtn_no_mov)  );
   #else
   	VSYNC_WR_MPEG_REG(MCDI_MCVECRD_CTRL, (Rd(MCDI_MCVECRD_CTRL) & 0xffffff00 ) |
-			( 1<<9 ) |									  // canvas enable
-							di_mcvecrd_mif->canvas_num |  // canvas index.
-		    (0 << 8));
+			( 1<<9 ) |	  // canvas enable
+			di_mcvecrd_mif->canvas_num |  // canvas index.
+		        (urgent << 8));
         if(di_mcvecrd_mif->blend_mode == 3)  
             VSYNC_WR_MPEG_REG_BITS(MCDI_MC_CRTL,mcen_mode,0,2);  //open mc
         else
-- 
2.19.0

