From 168146ef06ccb4a54d0840de28c3e5018468d469 Mon Sep 17 00:00:00 2001
From: Zhiqiang Han <zhiqiang.han@amlogic.com>
Date: Tue, 10 Feb 2015 15:40:53 +0800
Subject: [PATCH 5410/5965] PD #103432: dvb: add 5v3v control for smartcard

Change-Id: I83d7609ce5897b5380443ef090611a6036d92ff3
---
 .../dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd |  10 +-
 drivers/amlogic/smartcard/smartcard.c         | 106 ++++++++++++++++--
 2 files changed, 104 insertions(+), 12 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd b/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd
index d5c15e76ed71..cd83822be528 100755
--- a/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8_k200b_1G_emmc_sdhc.dtd
@@ -1863,12 +1863,12 @@ sdio{
 //$$ L2 PROP_U32 8 = "amlogic,clrmask"
 //$$ L2 PROP_STR 12 = "amlogic,pins"
 		dvb_p_ts0_pins: dvb_p_ts0_pins {
-			amlogic,setmask = <3 0x3F>;
+			amlogic,setmask = <3 0x37>;
 			amlogic,clrmask = <1 0xCCE41
 								4 0x2000000
 								7 0x20000000
 								9 0x431F>;
-			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+			amlogic,pins = "GPIOY_9","GPIOY_10","GPIOY_11","GPIOY_12","GPIOY_13","GPIOY_14","GPIOY_15","GPIOY_16","GPIOY_0","GPIOY_1","GPIOY_8";
 		};
 
 //$$ MATCH "dvb_s_ts0_pins_match" = "&dvb_s_ts0_pins"
@@ -1876,11 +1876,11 @@ sdio{
 //$$ L2 PROP_U32 6 = "amlogic,clrmask"
 //$$ L2 PROP_STR 5 = "amlogic,pins"
 		dvb_s_ts0_pins: dvb_s_ts0_pins {
-			amlogic,setmask = <3 0x1F>;
+			amlogic,setmask = <3 0x17>;
 			amlogic,clrmask = <1 0xCCE41
 								4 0x2000000
 								9 0x310>;
-			amlogic,pins = "GPIOY_9","GPIOY_0","GPIOY_1","GPIOY_4","GPIOY_8";
+			amlogic,pins = "GPIOY_9","GPIOY_0","GPIOY_1","GPIOY_8";
 		};
 
 //$$ MATCH "dvb_fe_pins_match" = "&dvb_fe_pins"
@@ -1970,6 +1970,8 @@ sdio{
 		smc0_clock_source = <0>;
 		//smc0_enable_pin = "GPIOX_16";
 		//smc0_enable_level = <1>;
+		//smc0_5v3v_pin = "GPIOY_4";
+		//smc0_5v3v_level = <0>;
 		smc0_reset_pin = "GPIOX_17";
 		smc0_reset_level = <0>;
 		smc0_clk_pinmux_reg = <0x2030>;
diff --git a/drivers/amlogic/smartcard/smartcard.c b/drivers/amlogic/smartcard/smartcard.c
index 9e81269caf63..7ee517f352d0 100755
--- a/drivers/amlogic/smartcard/smartcard.c
+++ b/drivers/amlogic/smartcard/smartcard.c
@@ -218,6 +218,10 @@ typedef struct {
 #define SMC_ENABLE_PIN_NAME "smc:ENABLE"
 	int 			   enable_level;
 
+	u32 			   enable_5v3v_pin;
+#define SMC_ENABLE_5V3V_PIN_NAME "smc:5V3V"
+	int 			   enable_5v3v_level;
+
 	int                (*reset)(void *, int);
 	u32                irq_num;
 	int                reset_level;
@@ -296,6 +300,7 @@ static const unsigned char inv_table[256] = {
 	pr_dbg("\n"); \
 	}while(0)
 
+static int _gpio_out(unsigned int gpio, int val, const char *owner);
 
 static ssize_t show_gpio_pull(struct class *class, struct class_attribute *attr,	char *buf)
 {
@@ -307,20 +312,57 @@ static ssize_t show_gpio_pull(struct class *class, struct class_attribute *attr,
 
 static ssize_t set_gpio_pull(struct class *class, struct class_attribute *attr,	const char *buf, size_t count)
 {
-    unsigned int dbg;
-    ssize_t r;
+	unsigned int dbg;
+	ssize_t r;
+
+	r = sscanf(buf, "%d", &dbg);
+	if (r != 1)
+		return -EINVAL;
+
+	ENA_GPIO_PULL = dbg;
+	printk("Smartcard the ENA_GPIO_PULL is:%d.\n", ENA_GPIO_PULL);
+	return count;
+}
+
+static ssize_t show_5v3v(struct class *class, struct class_attribute *attr,	char *buf)
+{
+	smc_dev_t *smc = NULL;
+	int enable_5v3v = 0;
 
-    r = sscanf(buf, "%d", &dbg);
-    if (r != 1)
-    return -EINVAL;
+	mutex_lock(&smc_lock);
+	smc = &smc_dev[0];
+	enable_5v3v = smc->enable_5v3v_level;
+	mutex_unlock(&smc_lock);
 
-    ENA_GPIO_PULL = dbg;
-    printk("Smartcard the ENA_GPIO_PULL is:%d.\n", ENA_GPIO_PULL);
-    return count;
+	return sprintf(buf, "5v3v_pin level=%d\n", enable_5v3v);
+}
+
+static ssize_t store_5v3v(struct class *class, struct class_attribute *attr,	const char *buf, size_t count)
+{
+	unsigned int enable_5v3v=0;
+	ssize_t r;
+	smc_dev_t *smc = NULL;
+
+	r = sscanf(buf, "%d", &enable_5v3v);
+	if (r != 1)
+		return -EINVAL;
+
+	mutex_lock(&smc_lock);
+	smc = &smc_dev[0];
+	smc->enable_5v3v_level = enable_5v3v;
+
+	if (smc->enable_5v3v_pin != -1) {
+		_gpio_out(smc->enable_5v3v_pin, smc->enable_5v3v_level, SMC_ENABLE_5V3V_PIN_NAME);
+		pr_error("enable_pin: -->(%d)\n", (smc->enable_5v3v_level)? 1 : 0);
+	}
+	mutex_unlock(&smc_lock);
+
+	return count;
 }
 
 static struct class_attribute smc_class_attrs[] = {
 	__ATTR(smc_gpio_pull,  S_IRUGO | S_IWUSR, show_gpio_pull,    set_gpio_pull),
+	__ATTR(ctrl_5v3v,      S_IRUGO | S_IWUSR, show_5v3v,         store_5v3v),
     __ATTR_NULL
 };
 
@@ -1905,6 +1947,54 @@ static int smc_dev_init(smc_dev_t *smc, int id)
 #endif /*CONFIG_OF*/
 	}
 
+	smc->enable_5v3v_pin = -1;
+	if (smc->enable_5v3v_pin == -1) {
+		snprintf(buf, sizeof(buf), "smc%d_5v3v_pin", id);
+#ifdef CONFIG_OF
+		ret = of_property_read_string(smc->pdev->dev.of_node, buf, &str);
+		if (!ret) {
+			smc->enable_5v3v_pin = amlogic_gpio_name_map_num(str);
+			ret = _gpio_request(smc->enable_5v3v_pin, SMC_ENABLE_5V3V_PIN_NAME);
+			pr_error("%s: %s [%d]\n", buf, str, ret);
+		} else {
+			pr_error("cannot find resource \"%s\"\n", buf);
+		}
+#else /*CONFIG_OF*/
+		res = platform_get_resource_byname(smc->pdev, IORESOURCE_MEM, buf);
+		if (!res) {
+			pr_error("cannot get resource \"%s\"\n", buf);
+		} else {
+			smc->enable_5v3v_pin = res->start;
+			gpio_request(smc->enable_5v3v_pin, SMC_ENABLE_5V3V_PIN_NAME);
+		}
+#endif /*CONFIG_OF*/
+	}
+
+	smc->enable_5v3v_level = 0;
+	if (1) {
+		snprintf(buf, sizeof(buf), "smc%d_5v3v_level", id);
+#ifdef CONFIG_OF
+		ret = of_property_read_u32(smc->pdev->dev.of_node, buf, &value);
+		if (!ret) {
+			smc->enable_5v3v_level = value;
+			pr_error("%s: %d\n", buf, smc->enable_5v3v_level);
+			if (smc->enable_5v3v_pin != -1) {
+				_gpio_out(smc->enable_5v3v_pin, smc->enable_5v3v_level, SMC_ENABLE_5V3V_PIN_NAME);
+				pr_error("enable_pin: -->(%d)\n", (smc->enable_5v3v_level)? 1 : 0);
+			}
+		} else {
+			pr_error("cannot find resource \"%s\"\n", buf);
+		}
+#else /*CONFIG_OF*/
+		res = platform_get_resource_byname(smc->pdev, IORESOURCE_MEM, buf);
+		if (!res) {
+			pr_error("cannot get resource \"%s\"\n", buf);
+		} else {
+			smc->enable_5v3v_level = res->start;
+		}
+#endif /*CONFIG_OF*/
+	}
+
 	init_waitqueue_head(&smc->rd_wq);
 	init_waitqueue_head(&smc->wr_wq);
 
-- 
2.19.0

