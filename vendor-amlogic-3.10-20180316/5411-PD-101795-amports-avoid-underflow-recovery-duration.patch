From 64e4b3d8db2b78c37ef9fb0847c0bbd4a0ee06e3 Mon Sep 17 00:00:00 2001
From: Le Yang <le.yang@amlogic.com>
Date: Mon, 9 Feb 2015 18:45:54 +0800
Subject: [PATCH 5411/5965] PD#101795: amports: avoid underflow recovery
 duration

add reset machine to avoid underflow recovery duration

Change-Id: I59825eaa0a1cda2e9a43a46d6322b8510953a42c
---
 drivers/amlogic/amports/amstream.c  |    1 +
 drivers/amlogic/amports/ptsserv.c   |    2 +-
 drivers/amlogic/amports/tsdemux.c   |  129 +--
 drivers/amlogic/amports/tsync_pcr.c | 1177 +++++++++++++++------------
 drivers/amlogic/amports/vh264.c     |   18 +-
 drivers/amlogic/amports/video.c     |    5 +-
 6 files changed, 750 insertions(+), 582 deletions(-)

diff --git a/drivers/amlogic/amports/amstream.c b/drivers/amlogic/amports/amstream.c
index 840c0dcc1815..fefdfb7a5da5 100755
--- a/drivers/amlogic/amports/amstream.c
+++ b/drivers/amlogic/amports/amstream.c
@@ -51,6 +51,7 @@
 #include <linux/dma-mapping.h>
 #include <linux/dma-contiguous.h>
 #include <asm/uaccess.h>
+#include <linux/clk.h>
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 #include <mach/mod_gate.h>
 #include <mach/power_gate.h>
diff --git a/drivers/amlogic/amports/ptsserv.c b/drivers/amlogic/amports/ptsserv.c
index 9bf9457e9ebe..dc6dc358fbe8 100755
--- a/drivers/amlogic/amports/ptsserv.c
+++ b/drivers/amlogic/amports/ptsserv.c
@@ -299,7 +299,7 @@ int calculation_acached_delayed(void){
 
 	pTable = &pts_table[PTS_TYPE_AUDIO];
 
-	delay = pTable->last_checkin_pts-pTable->last_checkout_pts;
+	delay = pTable->last_checkin_pts-timestamp_apts_get();
 	if (0<delay && delay<5*90000) 
 		return delay;
 
diff --git a/drivers/amlogic/amports/tsdemux.c b/drivers/amlogic/amports/tsdemux.c
index d9cb5aab659f..baaa658adc0f 100755
--- a/drivers/amlogic/amports/tsdemux.c
+++ b/drivers/amlogic/amports/tsdemux.c
@@ -34,7 +34,7 @@
 
 #include <asm/uaccess.h>
 #include <mach/am_regs.h>
-
+#include <linux/clk.h>
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 #include <mach/mod_gate.h>
 #endif
@@ -447,44 +447,59 @@ static ssize_t _tsdemux_write(const char __user *buf, size_t count, int isphybuf
     return count - r;
 }
 
-static void reset_pcr_regs(void)
+static int reset_pcr_regs(void)
 {
     u32 pcr_num;
 
     if (curr_pcr_id >= 0x1FFF)
-		return;
+        return 0;
 
     /* set paramater to fetch pcr */  
     pcr_num=0;
     if(curr_pcr_id == curr_vid_id)
-    	pcr_num=0;
+        pcr_num=0;
     else if(curr_pcr_id == curr_aud_id)
-    	pcr_num=1;
+        pcr_num=1;
     else if(curr_pcr_id == curr_sub_id)
-    	pcr_num=2;
+        pcr_num=2;
     else
-    	pcr_num=3;
-	
-	if(pcr_num == curr_pcr_num)
-		return;
+        pcr_num=3;
+
+    if (pcr_num != curr_pcr_num) {
+        u32 clk_unit=0;
+        u32 clk_81=0;
+        struct clk *clk;
+        clk = clk_get_sys("clk81", NULL);
+        if (IS_ERR(clk) || clk == 0) {
+            printk("[%s:%d] error clock \n",__FUNCTION__,__LINE__);
+            return 0;
+        }
 
-    if(READ_MPEG_REG(TS_HIU_CTL_2) & 0x40){
-    	WRITE_MPEG_REG(PCR90K_CTL_2, 12 << 1);    
-    	WRITE_MPEG_REG(ASSIGN_PID_NUMBER_2, pcr_num);    
-    	printk("[tsdemux_init] To use device 2,pcr_num=%d \n",pcr_num);
-    }
-    else if(READ_MPEG_REG(TS_HIU_CTL_3) & 0x40){
-    	WRITE_MPEG_REG(PCR90K_CTL_3, 12 << 1); 
-    	WRITE_MPEG_REG(ASSIGN_PID_NUMBER_3, pcr_num);    
-    	printk("[tsdemux_init] To use device 3,pcr_num=%d \n",pcr_num);
-    }
-    else{
-    	WRITE_MPEG_REG(PCR90K_CTL, 12 << 1); 
-    	WRITE_MPEG_REG(ASSIGN_PID_NUMBER, pcr_num);    
-    	printk("[tsdemux_init] To use device 1,pcr_num=%d \n",pcr_num);
+        clk_81=clk_get_rate(clk);
+        clk_unit = clk_81/80000;
+
+        printk("[%s:%d] clk_81 = %x clk_unit =%x \n",__FUNCTION__,__LINE__,clk_81,clk_unit);
+
+        if (READ_MPEG_REG(TS_HIU_CTL_2) & 0x40) {
+            WRITE_MPEG_REG(PCR90K_CTL_2, (12 << 1)|clk_unit);
+            WRITE_MPEG_REG(ASSIGN_PID_NUMBER_2, pcr_num);
+            printk("[tsdemux_init] To use device 2,pcr_num=%d \n",pcr_num);
+        }
+        else if (READ_MPEG_REG(TS_HIU_CTL_3) & 0x40) {
+            WRITE_MPEG_REG(PCR90K_CTL_3, (12 << 1)|clk_unit);
+            WRITE_MPEG_REG(ASSIGN_PID_NUMBER_3, pcr_num);
+            printk("[tsdemux_init] To use device 3,pcr_num=%d \n",pcr_num);
+        }
+        else{
+            WRITE_MPEG_REG(PCR90K_CTL, (12 << 1)|clk_unit);
+            WRITE_MPEG_REG(ASSIGN_PID_NUMBER, pcr_num);
+            printk("[tsdemux_init] To use device 1,pcr_num=%d \n",pcr_num);
+        }
+
+        curr_pcr_num = pcr_num;
     }
 
-	curr_pcr_num = pcr_num;
+    return 1;
 }
 
 s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid, bool is_hevc)
@@ -676,12 +691,11 @@ s32 tsdemux_init(u32 vid, u32 aid, u32 sid, u32 pcrid, bool is_hevc)
 
     curr_pcr_id = pcrid;
     if ((pcrid < 0x1FFF) && (pcrid != vid) && (pcrid != aid) && (pcrid != sid)) {
-    	tsdemux_set_pcrid(pcrid);
+        tsdemux_set_pcrid(pcrid);
     }
 #endif
 
-    pcrscr_valid=(pcrid < 0x1FFF)? 1 : 0; 	
-    reset_pcr_regs();
+    pcrscr_valid=reset_pcr_regs();
     first_pcr = 0;
 
     return 0;
@@ -725,11 +739,11 @@ void tsdemux_release(void)
     tsdemux_set_pcrid(0xffff);
     tsdemux_free_irq();
 
-	curr_vid_id  = 0xffff;
-	curr_aud_id  = 0xffff;
-	curr_sub_id  = 0xffff;
-	curr_pcr_id  = 0xffff;
-	curr_pcr_num = 0xffff;
+    curr_vid_id  = 0xffff;
+    curr_aud_id  = 0xffff;
+    curr_sub_id  = 0xffff;
+    curr_pcr_id  = 0xffff;
+    curr_pcr_num = 0xffff;
 
 #endif
 
@@ -953,13 +967,13 @@ void tsdemux_change_avid(unsigned int vid, unsigned int aid)
         ;
     }
 #else
-	curr_vid_id = vid;
-	curr_aud_id = aid;
+    curr_vid_id = vid;
+    curr_aud_id = aid;
 
     tsdemux_set_vid(vid);
     tsdemux_set_aid(aid);
 
-	reset_pcr_regs();
+    reset_pcr_regs();
 #endif
     return;
 }
@@ -974,11 +988,11 @@ void tsdemux_change_sid(unsigned int sid)
         ;
     }
 #else
-	curr_sub_id = sid;
+    curr_sub_id = sid;
 
     tsdemux_set_sid(sid);
 
-	reset_pcr_regs();
+    reset_pcr_regs();
 #endif
     return;
 }
@@ -986,7 +1000,7 @@ void tsdemux_change_sid(unsigned int sid)
 void tsdemux_audio_reset(void)
 {
     ulong flags;
-	DEFINE_SPINLOCK(lock);
+    DEFINE_SPINLOCK(lock);
 
     spin_lock_irqsave(&lock, flags);
 
@@ -1012,7 +1026,7 @@ void tsdemux_audio_reset(void)
 void tsdemux_sub_reset(void)
 {
     ulong flags;
-	DEFINE_SPINLOCK(lock);
+    DEFINE_SPINLOCK(lock);
     u32 parser_sub_start_ptr;
     u32 parser_sub_end_ptr;
 
@@ -1061,29 +1075,44 @@ u32 tsdemux_pcrscr_get(void)
     u32 pcr=0;
 
     if(pcrscr_valid==0)
-    	return 0;
+        return 0;
 
     if(READ_MPEG_REG(TS_HIU_CTL_2) & 0x40){
-    	
-    	pcr = READ_MPEG_REG(PCR_DEMUX_2);
+        pcr = READ_MPEG_REG(PCR_DEMUX_2);
     }
     else if(READ_MPEG_REG(TS_HIU_CTL_3) & 0x40){
-    	pcr = READ_MPEG_REG(PCR_DEMUX_3);
+        pcr = READ_MPEG_REG(PCR_DEMUX_3);
     }
     else{
-    	pcr = READ_MPEG_REG(PCR_DEMUX);    
+        pcr = READ_MPEG_REG(PCR_DEMUX);
    }
     if(first_pcr == 0)
-    	first_pcr = pcr;
+        first_pcr = pcr;
     return pcr;
 }
 
  u32 tsdemux_first_pcrscr_get(void)
  {
- 	if(pcrscr_valid==0)
-		return 0;
- 	return first_pcr;
- }
+     if (pcrscr_valid == 0)
+        return 0;
+
+    if (first_pcr == 0) {
+        u32 pcr;
+        if (READ_MPEG_REG(TS_HIU_CTL_2) & 0x40) {
+            pcr = READ_MPEG_REG(PCR_DEMUX_2);
+        }
+        else if (READ_MPEG_REG(TS_HIU_CTL_3) & 0x40) {
+            pcr = READ_MPEG_REG(PCR_DEMUX_3);
+        }
+        else{
+            pcr = READ_MPEG_REG(PCR_DEMUX);
+        }
+        first_pcr = pcr;
+       // printk("set first_pcr = 0x%x\n", pcr);
+    }
+
+    return first_pcr;
+}
 u8 tsdemux_pcrscr_valid(void)
 {
     return pcrscr_valid;
diff --git a/drivers/amlogic/amports/tsync_pcr.c b/drivers/amlogic/amports/tsync_pcr.c
index 20057a70ba09..0e768ee17462 100755
--- a/drivers/amlogic/amports/tsync_pcr.c
+++ b/drivers/amlogic/amports/tsync_pcr.c
@@ -35,12 +35,21 @@ typedef enum {
     PLAY_MODE_FORCE_SPEED,
 } play_mode_t;
 
+typedef enum {
+    INIT_MODE_VIDEO=0,
+    INIT_MODE_AUDIO,
+} pcr_init_mode_t;
+
+#define PCR_DISCONTINUE		0x01
+#define VIDEO_DISCONTINUE	0x02
+#define AUDIO_DISCONTINUE	0x10
+
 #define CHECK_INTERVAL  (HZ * 5)
 
 #define START_AUDIO_LEVEL       256
-#define START_VIDEO_LEVEL       20480
-#define PAUSE_AUDIO_LEVEL         16
-#define PAUSE_VIDEO_LEVEL         256
+#define START_VIDEO_LEVEL       2048
+#define PAUSE_AUDIO_LEVEL         32
+#define PAUSE_VIDEO_LEVEL         2560
 #define UP_RESAMPLE_AUDIO_LEVEL      128
 #define UP_RESAMPLE_VIDEO_LEVEL      1024
 #define DOWN_RESAMPLE_CACHE_TIME     90000*2
@@ -51,6 +60,8 @@ typedef enum {
 #define CLOSE_RECOVERY_THRESHOLD 300
 #define RECOVERY_SPAN 3
 #define FORCE_RECOVERY_SPAN 20
+#define PAUSE_CHECK_TIME   2700
+#define PAUSE_RESUME_TIME   18000
 
 /* the delay from ts demuxer to the amvideo  */
 #define DEFAULT_VSTREAM_DELAY 18000
@@ -70,21 +81,27 @@ typedef enum {
 #define TSYNC_PCR_INITCHECK_RECORD      0x0008
 #define TSYNC_PCR_INITCHECK_END       0x0010
 
-
 #define MIN_GAP 90000*3 // 3s
-#define MAX_GAP 90000*10 //10s
+#define MAX_GAP 90000*3 // 4s
+
+// av sync monitor threshold
+#define MAX_SYNC_VGAP_TIME   90000
+#define MIN_SYNC_VCHACH_TIME   45000
+
+#define MAX_SYNC_AGAP_TIME   45000
+#define MIN_SYNC_ACHACH_TIME   27000
 
 // ------------------------------------------------------------------
 // The const 
 
 static u32 tsync_pcr_discontinue_threshold = (TIME_UNIT90K * 1.5);
-static u32 tsync_pcr_ref_latency = (TIME_UNIT90K * 0.2);				//TIME_UNIT90K*0.2
+static u32 tsync_pcr_ref_latency = (TIME_UNIT90K * 0.3);				//TIME_UNIT90K*0.3
 
 // use for pcr valid mode
-static u32 tsync_pcr_max_cache_time = TIME_UNIT90K*1;				//TIME_UNIT90K*2;
-static u32 tsync_pcr_up_cache_time = TIME_UNIT90K*0.8;				//TIME_UNIT90K*1.5;
-static u32 tsync_pcr_down_cache_time = TIME_UNIT90K*0.6;			//TIME_UNIT90K*1.2;
-static u32 tsync_pcr_min_cache_time = TIME_UNIT90K*0.4;			//TIME_UNIT90K*0.8;
+static u32 tsync_pcr_max_cache_time = TIME_UNIT90K*2;				//TIME_UNIT90K*2;
+static u32 tsync_pcr_up_cache_time = TIME_UNIT90K*1.5;				//TIME_UNIT90K*1.5;
+static u32 tsync_pcr_down_cache_time = TIME_UNIT90K*0.8;			//TIME_UNIT90K*0.8;
+static u32 tsync_pcr_min_cache_time = TIME_UNIT90K*0.5;			//TIME_UNIT90K*0.5;
 
 
 // use for pcr invalid mode
@@ -95,7 +112,12 @@ static u32 tsync_pcr_min_delay_time = TIME_UNIT90K*1;				//TIME_UNIT90K*0.8;
 
 
 static u32 tsync_pcr_first_video_frame_pts = 0;				
-static u32 tsync_pcr_first_audio_frame_pts = 0;				
+static u32 tsync_pcr_first_audio_frame_pts = 0;
+
+// reset control flag
+static u8 tsync_pcr_reset_flag = 0;
+static int tsync_pcr_asynccheck_cnt = 0;
+static int tsync_pcr_vsynccheck_cnt = 0;
 
 // ------------------------------------------------------------------
 // The variate
@@ -109,7 +131,15 @@ static int tsync_pcr_vpause_flag = 0;
 static int tsync_pcr_apause_flag = 0;
 static int tsync_pcr_vstart_flag = 0;
 static int tsync_pcr_astart_flag = 0;
-static int tsync_pcr_inited_flag = 0;
+static u8 tsync_pcr_inited_flag = 0;
+static u8 tsync_pcr_inited_mode = INIT_MODE_VIDEO;
+static u32 tsync_pcr_freerun_mode=0;
+
+// pause handle paramter
+static int tsync_pcr_lastcheckin_vpts=0;
+static int tsync_pcr_lastcheckin_apts=0;
+static int tsync_pcr_pausecheck_cnt=0;
+static int64_t tsync_pcr_stream_delta=0;
 
 // the really ts demuxer pcr, haven't delay
 static u32 tsync_pcr_last_tsdemuxpcr = 0;
@@ -127,78 +157,237 @@ static u8 tsync_pcr_started=0;
 static int tsync_pcr_read_cnt=0;
 static u8 tsync_pcr_usepcr=1;
 //static int tsync_pcr_debug_pcrscr = 100;
-static u32 first_pcr_record = 0;
+static u64 first_time_record = 0;
 static u8 wait_pcr_count = 0;
 
+static DEFINE_SPINLOCK(tsync_pcr_lock);
+
 #define LTRACE() printk("[%s:%d] \n", __FUNCTION__,__LINE__);
 
 extern int get_vsync_pts_inc_mode(void);
 
+u32 get_stbuf_rp(int type){
+    stream_buf_t *pbuf=NULL;
+    if (type == 0) {
+        // video
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+        pbuf=get_buf_by_type(PTS_TYPE_HEVC);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_rp(pbuf);
+        }
+#endif
+
+        pbuf=get_buf_by_type(PTS_TYPE_VIDEO);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_rp(pbuf);
+        }
+    }
+    else{
+        // audio
+        pbuf=get_buf_by_type(PTS_TYPE_AUDIO);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_rp(pbuf);
+        }
+    }
+
+    return 0;
+}
+
 int get_stream_buffer_level(int type){
-	stream_buf_t *pbuf=NULL;
-	if(type==0){
-		// video
+    stream_buf_t *pbuf=NULL;
+    if (type == 0) {
+        // video
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-		pbuf=get_buf_by_type(PTS_TYPE_HEVC);
-		if(pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE){
-			return stbuf_level(pbuf);
-		}
+        pbuf=get_buf_by_type(PTS_TYPE_HEVC);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_level(pbuf);
+        }
 #endif
 
-		pbuf=get_buf_by_type(PTS_TYPE_VIDEO);
-		if(pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE){
-			return stbuf_level(pbuf);
-		}
-	}
-	else{
-		// audio
-		pbuf=get_buf_by_type(PTS_TYPE_AUDIO);
-		if(pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE){
-			return stbuf_level(pbuf);
-		}
-	}
-
-	return 0;
+        pbuf=get_buf_by_type(PTS_TYPE_VIDEO);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_level(pbuf);
+        }
+    }
+    else{
+        // audio
+        pbuf=get_buf_by_type(PTS_TYPE_AUDIO);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_level(pbuf);
+        }
+    }
+
+    return 0;
 }
 
 int get_stream_buffer_size(int type){
-	stream_buf_t *pbuf=NULL;
-	if(type==0){
-		// video
+    stream_buf_t *pbuf=NULL;
+    if (type == 0) {
+        // video
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
-		pbuf=get_buf_by_type(PTS_TYPE_HEVC);
-		if(pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE){
-			return stbuf_size(pbuf);
-		}
+        pbuf=get_buf_by_type(PTS_TYPE_HEVC);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_size(pbuf);
+        }
 #endif
 
-		pbuf=get_buf_by_type(PTS_TYPE_VIDEO);
-		if(pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE){
-			return stbuf_size(pbuf);
-		}
-	}
-	else{
-		// audio
-		pbuf=get_buf_by_type(PTS_TYPE_AUDIO);
-		if(pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE){
-			return stbuf_size(pbuf);
-		}
-	}
-
-	return 0;
+        pbuf=get_buf_by_type(PTS_TYPE_VIDEO);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_size(pbuf);
+        }
+    }
+    else{
+        // audio
+        pbuf=get_buf_by_type(PTS_TYPE_AUDIO);
+        if (pbuf != NULL && pbuf->flag&BUF_FLAG_IN_USE) {
+            return stbuf_size(pbuf);
+        }
+    }
+
+    return 0;
+}
+
+int get_min_cache_delay(void){
+    int video_cache_time = calculation_vcached_delayed();
+    int audio_cache_time = calculation_vcached_delayed();
+
+    if (video_cache_time>0 && audio_cache_time>0) {
+        return min(video_cache_time,audio_cache_time);
+    }
+    else if (video_cache_time>0)
+        return video_cache_time;
+    else if (audio_cache_time>0)
+        return audio_cache_time;
+    else
+        return 0;
 }
 
 u32 tsync_pcr_vstream_delayed(void)
 {
     int cur_delay = calculation_vcached_delayed();	
-    if(cur_delay == -1)
-    	return DEFAULT_VSTREAM_DELAY;
+    if (cur_delay == -1)
+        return DEFAULT_VSTREAM_DELAY;
 
     return cur_delay;
 }
 
+u32 tsync_pcr_get_min_checkinpts(void)
+{
+    u32 last_checkin_vpts=get_last_checkin_pts(PTS_TYPE_VIDEO);
+    u32 last_checkin_apts=get_last_checkin_pts(PTS_TYPE_AUDIO);
+    if (last_checkin_apts>0 && last_checkin_apts>0) {
+        return min(last_checkin_vpts,last_checkin_apts);
+    }
+    else if (last_checkin_apts>0) {
+        return last_checkin_apts;
+    }
+    else if (last_checkin_vpts>0) {
+        return last_checkin_vpts;
+    }
+    else{
+        return 0;
+    }
+}
+
+void tsync_pcr_get_delta(void)
+{
+    // calculate delta
+    u64 cur_pcr=timestamp_pcrscr_get();
+    u64 demux_pcr=tsdemux_pcrscr_get();
+    if (cur_pcr == 0 || demux_pcr == 0) {
+        tsync_pcr_stream_delta=0;
+        return;
+    }
+
+    if (tsync_pcr_usepcr == 1) {
+        tsync_pcr_stream_delta=(int64_t)demux_pcr-(int64_t)cur_pcr;
+    }
+    else{
+        tsync_pcr_stream_delta=(int64_t)(jiffies*TIME_UNIT90K)/HZ - (int64_t)cur_pcr;
+    }
+
+    printk("[%s:%d]tsync_pcr_stream_delta = %lld\n",__FUNCTION__,__LINE__,tsync_pcr_stream_delta);
+}
+
+void tsync_pcr_pcrscr_set(void)
+{
+    u32 first_pcr=0 ,first_vpts = 0, first_apts = 0;
+    u32 cur_checkin_apts=0, cur_checkin_vpts=0, min_checkinpts=0;
+    u32 cur_pcr = 0, ref_pcr=0;
+    u8 complete_init_flag=TSYNC_PCR_INITCHECK_PCR|TSYNC_PCR_INITCHECK_VPTS|TSYNC_PCR_INITCHECK_APTS;
+
+    if (tsync_pcr_inited_flag & complete_init_flag) {
+        //printk("pcr already inited.flag=0x%x \n",tsync_pcr_inited_flag);
+        return;
+    }
+
+    first_pcr =tsdemux_first_pcrscr_get();
+    first_apts = timestamp_firstapts_get();
+    first_vpts = timestamp_firstvpts_get();
+    cur_checkin_vpts = get_last_checkin_pts(PTS_TYPE_VIDEO);
+    cur_checkin_apts = get_last_checkin_pts(PTS_TYPE_AUDIO);
+    min_checkinpts=tsync_pcr_get_min_checkinpts();
+    cur_pcr = tsdemux_pcrscr_get();
+    abuf_level=get_stream_buffer_level(1);
+    vbuf_level=get_stream_buffer_level(0);
+
+    // check the valid of the pcr
+    if (cur_pcr && cur_checkin_vpts && cur_checkin_apts) {
+        u32 gap_pa, gap_pv, gap_av;
+        gap_pa = abs(cur_pcr-cur_checkin_apts);
+        gap_av = abs(cur_checkin_apts-cur_checkin_vpts);
+        gap_pv = abs(cur_pcr-cur_checkin_vpts);
+        if ((gap_pa>MAX_GAP) && (gap_pv>MAX_GAP)) {
+            //printk("[%d]invalid cur_pcr = 0x%x, gap_pa = %d, gap_pv = %d, gap_av = %d \n", __LINE__,cur_pcr, gap_pa,gap_pv,gap_pv);
+            cur_pcr = 0;
+        }
+    }
+
+    // decide use which para to init
+    if (cur_pcr && first_apts && first_vpts && !(tsync_pcr_inited_flag&complete_init_flag) && (cur_pcr<min_checkinpts)) {
+        tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_PCR;
+        ref_pcr=cur_pcr-tsync_pcr_ref_latency;
+        timestamp_pcrscr_set(ref_pcr);
+        tsync_pcr_usepcr=1;
+
+        timestamp_pcrscr_enable(1);
+        printk("check init.first_pcr=0x%x, first_apts=0x%x, first_vpts=0x%x, cur_pcr = 0x%x, checkin_vpts=0x%x, checkin_apts=0x%x alevel=%d vlevel=%d\n",
+            first_pcr, first_apts, first_vpts, cur_pcr, cur_checkin_vpts, cur_checkin_apts,abuf_level, vbuf_level);
+        printk("[%d]init by pcr. pcr=%x usepcr=%d \n", __LINE__,ref_pcr,tsync_pcr_usepcr);
+    }
+
+    if (first_vpts && !(tsync_pcr_inited_flag&complete_init_flag) && first_vpts<min_checkinpts) {
+        tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_VPTS;
+        ref_pcr = first_vpts - tsync_pcr_ref_latency * 2;
+        timestamp_pcrscr_set(ref_pcr);
+        if (cur_pcr>0)
+            tsync_pcr_usepcr=1;
+
+        timestamp_pcrscr_enable(1);
+        printk("check init.first_pcr=0x%x, first_apts=0x%x, first_vpts=0x%x, cur_pcr = 0x%x, checkin_vpts=0x%x, checkin_apts=0x%x alevel=%d vlevel=%d \n",
+            first_pcr, first_apts, first_vpts, cur_pcr, cur_checkin_vpts, cur_checkin_apts,abuf_level, vbuf_level);
+        printk("[%d]init by vpts. pcr=%x usepcr=%d \n", __LINE__,ref_pcr,tsync_pcr_usepcr);
+    }
+
+    if (first_apts && !(tsync_pcr_inited_flag&complete_init_flag) && first_apts<min_checkinpts && tsync_pcr_inited_mode >= INIT_MODE_AUDIO) {
+        tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_APTS;
+        ref_pcr=first_apts;
+        timestamp_pcrscr_set(ref_pcr);
+        if (cur_pcr > 0)
+            tsync_pcr_usepcr=1;
+
+        timestamp_pcrscr_enable(1);
+        printk("check init.first_pcr=0x%x, first_apts=0x%x, first_vpts=0x%x, cur_pcr = 0x%x, checkin_vpts=0x%x, checkin_apts=0x%x alevel=%d vlevel=%d \n",
+            first_pcr, first_apts, first_vpts, cur_pcr, cur_checkin_vpts, cur_checkin_apts,abuf_level, vbuf_level);
+        printk("[%d]init by apts. pcr=%x usepcr=%d \n", __LINE__,ref_pcr,tsync_pcr_usepcr);
+    }
+}
+
 void tsync_pcr_avevent_locked(avevent_t event, u32 param)
 {
+    ulong flags;
+    spin_lock_irqsave(&tsync_pcr_lock, flags);
+
     switch (event) {
     case VIDEO_START:        
         if (tsync_pcr_vstart_flag == 0) {
@@ -206,155 +395,82 @@ void tsync_pcr_avevent_locked(avevent_t event, u32 param)
             tsync_pcr_first_video_frame_pts = param;
             printk("video start! param=%x cur_pcr=%x\n",param,timestamp_pcrscr_get());
         }
-#if 1
-            printk("tsync_pcr_inited_flag = %d \n", tsync_pcr_inited_flag);
-            if ((!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_VPTS)) && (!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_PCR)) && (!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_APTS))){	
-                u32 first_pcr =0;	
-                u32 first_vpts = 0;
-                u32 cur_pcr = 0;
-                u32 first_apts = 0;
-                abuf_level= get_stream_buffer_level(1);
-                vbuf_level= get_stream_buffer_level(0);
-
-                first_pcr =tsdemux_first_pcrscr_get();
-                first_vpts = timestamp_firstvpts_get();
-                cur_pcr = tsdemux_pcrscr_get();
-                first_apts = timestamp_firstapts_get();
-                    
-                printk("use the param to set systemtime! param = 0x%x, first_vpts = 0x%x, first pcr =  0x%x, cur_pcr = 0x%x, first_apts = 0x%x, tsync_pcr_ref_latency = %d \n", 
-                    param,first_vpts, first_pcr, cur_pcr, first_apts,tsync_pcr_ref_latency);
-		printk("video start abuf_level = %d, vbuf_level = %d \n", abuf_level, vbuf_level);
-                if (cur_pcr&&first_apts&&first_vpts){
-                    u32 gap_pa, gap_pv, gap_av;
-                    
-                    gap_pa = abs(cur_pcr-first_apts);
-                    gap_av = abs(first_vpts-first_apts);
-                    gap_pv = abs(cur_pcr-first_vpts);
-                    if ((gap_av<MIN_GAP) && (gap_pa>MAX_GAP) && (gap_pv>MAX_GAP)){
-                        printk("invalid cur_pcr = 0x%x, gap_pa = %d, gap_pv = %d, gap_av = %d", cur_pcr, gap_pa,gap_pv,gap_pv);
-                        cur_pcr = 0;
-                    }
-                }
-#if 0
-                if (!first_apts && first_pcr){
-                    timestamp_pcrscr_set(first_pcr-tsync_pcr_ref_latency);	                    
-                    tsync_pcr_usepcr=1;
-                    tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_PCR;
-                    if (!tsync_pcr_vpause_flag) {
-                        timestamp_pcrscr_enable(1);
-                    }
-                    printk("use first_pcr !\n");
-                }
-                else 
-#endif                    
-                if (cur_pcr && first_apts){
-                    timestamp_pcrscr_set(cur_pcr-tsync_pcr_ref_latency);	
-                    tsync_pcr_usepcr=1;
-                    tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_PCR;
-                    if (!tsync_pcr_vpause_flag) {
-                        timestamp_pcrscr_enable(1);
-                    }
-                    printk("use cur_pcr !\n");
-                }
-                else if(first_apts){                    
-                    timestamp_pcrscr_set(first_apts-tsync_pcr_ref_latency);  
-                    tsync_pcr_usepcr=0;
-                    tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_APTS;
-                    if (!tsync_pcr_vpause_flag) {
-                        timestamp_pcrscr_enable(1);
-                    }
-                    printk("use first_apts !\n");
-                }
-                else {
-                    printk("wait_pcr_count = %d ++\n", wait_pcr_count);
-                    wait_pcr_count++;
 
-                }
+        tsync_pcr_inited_mode=INIT_MODE_VIDEO;
+        tsync_pcr_pcrscr_set();
 
-                if (wait_pcr_count >= 20){
-                    if (cur_pcr){
-                        timestamp_pcrscr_set(cur_pcr-tsync_pcr_ref_latency);    
-                        tsync_pcr_usepcr=1;
-                        tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_PCR;
-                        if (!tsync_pcr_vpause_flag) {
-                            timestamp_pcrscr_enable(1);
-                        }
-                        printk("use cur_pcr wait_pcr_count time out!\n");
-                    }
-                    else {
-                        timestamp_pcrscr_set(first_vpts -tsync_pcr_ref_latency*10);                    
-                        tsync_pcr_usepcr=0;
-                        tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_VPTS;
-                        if (!tsync_pcr_vpause_flag) {
-                            timestamp_pcrscr_enable(1);
-                        }
-                        printk("use first_vpts !\n");
-                    }
-                }else{
-                    printk("wait_pcr_count = %d \n", wait_pcr_count);
+        tsync_pcr_vstart_flag=1;
+        break;
 
+    case VIDEO_STOP:
+        timestamp_pcrscr_enable(0);
+        printk("timestamp_firstvpts_set !\n");
+        timestamp_firstvpts_set(0);
+        timestamp_firstapts_set(0);
+        timestamp_vpts_set(0);
+        //tsync_pcr_debug_pcrscr=100;
+
+        tsync_pcr_vpause_flag=0;
+        tsync_pcr_vstart_flag=0;
+        tsync_pcr_inited_flag=0;
+        wait_pcr_count = 0;
+
+        printk("wait_pcr_count = 0 \n");
+        tsync_pcr_tsdemuxpcr_discontinue=0;
+        tsync_pcr_discontinue_point=0;
+        tsync_pcr_discontinue_local_point=0;
+        tsync_pcr_discontinue_waited=0;
+        tsync_pcr_first_video_frame_pts=0;
+
+        tsync_pcr_tsdemux_startpcr = 0;
+        tsync_pcr_system_startpcr = 0;
+        play_mode=PLAY_MODE_NORMAL;
+        printk("video stop! \n");
+        break;
+        
+    case VIDEO_TSTAMP_DISCONTINUITY:  	 
+        {
+            //unsigned oldpts=timestamp_vpts_get();
+            u32 tsdemux_pcr = tsdemux_pcrscr_get();
+            //if((abs(param-oldpts)>AV_DISCONTINUE_THREDHOLD_MIN) && (!get_vsync_pts_inc_mode())){
+            if (!get_vsync_pts_inc_mode()) {
+                u32 last_checkin_minpts=tsync_pcr_get_min_checkinpts();
+                u32 ref_pcr = 0;
+                if (last_checkin_minpts<param && last_checkin_minpts) {
+                    ref_pcr= last_checkin_minpts-tsync_pcr_ref_latency;
+                    printk("[%s]Use checkin minpts. minpts=%x param=%x ref_pcr=%x\n",__FUNCTION__,last_checkin_minpts,param,ref_pcr);
                 }
+                else{
+                    ref_pcr = param-tsync_pcr_ref_latency;
+                    printk("[%s]Use param. minpts=%x param=%x ref_pcr=%x\n",__FUNCTION__,last_checkin_minpts,param,ref_pcr);
+                }
+                //if(ref_pcr == 0)
+                //ref_pcr=tsdemux_pcr-tsync_pcr_vstream_delayed();
 
-            }
+                timestamp_pcrscr_set(ref_pcr);
 
-#endif
-	tsync_pcr_vstart_flag=1;
-	break;
+                tsync_pcr_tsdemux_startpcr = tsdemux_pcr;
+                tsync_pcr_system_startpcr = ref_pcr;
+                //play_mode=PLAY_MODE_FORCE_SLOW;
+                printk("[%s]video discontinue happen and slow play.discontinue=%d\n",__FUNCTION__,tsync_pcr_tsdemuxpcr_discontinue);
 
-    case VIDEO_STOP:
-	 timestamp_pcrscr_enable(0);
-	 printk("timestamp_firstvpts_set !\n");
-     timestamp_firstvpts_set(0);
-            timestamp_firstapts_set(0);
-	 timestamp_vpts_set(0);
-	 //tsync_pcr_debug_pcrscr=100;
-
-	 tsync_pcr_vpause_flag=0;
-	 tsync_pcr_vstart_flag=0;
-	 tsync_pcr_inited_flag=0;
-	 wait_pcr_count = 0;
-     
-     printk("wait_pcr_count = 0 \n");
-	 tsync_pcr_tsdemuxpcr_discontinue=0;
-	 tsync_pcr_discontinue_point=0;
-	 tsync_pcr_discontinue_local_point=0;
-	 tsync_pcr_discontinue_waited=0;
-	tsync_pcr_first_video_frame_pts=0;
-
-	 tsync_pcr_tsdemux_startpcr = 0;
-	 tsync_pcr_system_startpcr = 0;
-	 play_mode=PLAY_MODE_NORMAL;
-	 printk("video stop! \n");
+                /* to resume the pcr check*/
+                tsync_pcr_tsdemuxpcr_discontinue|=VIDEO_DISCONTINUE;
+                tsync_pcr_discontinue_point=0;
+                tsync_pcr_discontinue_local_point=0;
+                tsync_pcr_discontinue_waited=0;
+            }
+            timestamp_vpts_set(param);
+
+            break;
+        }
+    case AUDIO_TSTAMP_DISCONTINUITY:
+        {
+            printk("[%s]audio discontinue happen.discontinue=%d param=%x\n",__FUNCTION__,tsync_pcr_tsdemuxpcr_discontinue,param);
+            tsync_pcr_tsdemuxpcr_discontinue|=AUDIO_DISCONTINUE;
+        }
         break;
-        
-    case VIDEO_TSTAMP_DISCONTINUITY:  	 
-    	{		    	
-		//unsigned oldpts=timestamp_vpts_get();
-		u32 tsdemux_pcr = tsdemux_pcrscr_get();
-		//if((abs(param-oldpts)>AV_DISCONTINUE_THREDHOLD_MIN) && (!get_vsync_pts_inc_mode())){
-		if(!get_vsync_pts_inc_mode()){
-		    	u32 ref_pcr = param-tsync_pcr_ref_latency*2;
-		    	//if(ref_pcr == 0)
-		    	//	ref_pcr=tsdemux_pcr-tsync_pcr_vstream_delayed();
-			
-			timestamp_pcrscr_set(ref_pcr);
-
-			tsync_pcr_tsdemux_startpcr = tsdemux_pcr;
-			tsync_pcr_system_startpcr = ref_pcr;
-			//play_mode=PLAY_MODE_FORCE_SLOW;
-			printk("[tsync_pcr_avevent_locked] video discontinue happen and slow play.ref_pcr=%x,param=%x,discontinue=%d\n",ref_pcr,param,tsync_pcr_tsdemuxpcr_discontinue);
-
-		    	/* to resume the pcr check*/
-			tsync_pcr_tsdemuxpcr_discontinue=0;	 
-		    	tsync_pcr_discontinue_point=0;
-			tsync_pcr_discontinue_local_point=0;
-		    	tsync_pcr_discontinue_waited=0;
-		}
-		//}
-		timestamp_vpts_set(param);
-
-		break;
-    	} 
+
     case AUDIO_PRE_START:
         timestamp_apts_start(0);
         tsync_pcr_astart_flag=0;
@@ -362,26 +478,29 @@ void tsync_pcr_avevent_locked(avevent_t event, u32 param)
         break;
 
     case AUDIO_START:		
-	timestamp_apts_set(param);
+        timestamp_apts_set(param);
         timestamp_apts_enable(1);
         timestamp_apts_start(1);
-	tsync_pcr_first_audio_frame_pts=param;
-
+        tsync_pcr_first_audio_frame_pts=param;
         tsync_pcr_astart_flag=1;
         tsync_pcr_apause_flag=0;
-        printk("audio start!timestamp_apts_set =%x.   \n",param);
+
+        tsync_pcr_inited_mode=INIT_MODE_AUDIO;
+        tsync_pcr_pcrscr_set();
+
+        printk("audio start!timestamp_apts_set =%x. \n",param);
         break;
 
     case AUDIO_RESUME:
-	 timestamp_apts_enable(1);
+        timestamp_apts_enable(1);
         tsync_pcr_apause_flag=0;
         printk("audio resume!   \n");
         break;
 
     case AUDIO_STOP:
-	timestamp_apts_enable(0);
-	timestamp_apts_set(-1);
-        timestamp_firstapts_set(0);            
+        timestamp_apts_enable(0);
+        timestamp_apts_set(-1);
+        timestamp_firstapts_set(0);
         timestamp_apts_start(0);
         tsync_pcr_astart_flag=0;
         tsync_pcr_apause_flag=0;
@@ -390,22 +509,22 @@ void tsync_pcr_avevent_locked(avevent_t event, u32 param)
         break;
 
     case AUDIO_PAUSE:
-  	timestamp_apts_enable(0);
+        timestamp_apts_enable(0);
         tsync_pcr_apause_flag=1;
         printk("audio pause!   \n");
         break;
 
     case VIDEO_PAUSE:
-       if(param == 1){
-      	 	timestamp_pcrscr_enable(0);
-      	 	tsync_pcr_vpause_flag = 1;
-		printk("video pause!\n");
-	 }else{
-		timestamp_pcrscr_enable(1);
-		tsync_pcr_vpause_flag = 0;
-		printk("video resume\n");
-	 }
-        break;	
+        if (param == 1) {
+            timestamp_pcrscr_enable(0);
+            tsync_pcr_vpause_flag = 1;
+            printk("video pause!\n");
+        }else {
+            timestamp_pcrscr_enable(1);
+            tsync_pcr_vpause_flag = 0;
+            printk("video resume\n");
+        }
+        break;
 
     default:
         break;
@@ -431,6 +550,7 @@ void tsync_pcr_avevent_locked(avevent_t event, u32 param)
         break;
     }
 
+    spin_unlock_irqrestore(&tsync_pcr_lock, flags);
 }
 
 // timer to check the system with the referrence time in ts stream.
@@ -440,293 +560,253 @@ static unsigned long tsync_pcr_check(void)
     u32 tsdemux_pcr_diff=0;
     int need_recovery=1;
     unsigned long res=1;
-    if(tsync_get_mode() != TSYNC_MODE_PCRMASTER){
-	return res;
+    int64_t last_checkin_vpts=0;
+    int64_t last_checkin_apts=0;
+    int64_t last_cur_pcr=0;
+    int64_t last_checkin_minpts=0;
+    u32 cur_apts=0;
+    u32 cur_vpts=0;
+
+    if (tsync_get_mode() != TSYNC_MODE_PCRMASTER || tsync_pcr_freerun_mode == 1) {
+        return res;
     }
 
     tsdemux_pcr=tsdemux_pcrscr_get();
-    if(tsync_pcr_usepcr==1){
-	// To monitor the pcr discontinue 
-	tsdemux_pcr_diff=abs(tsdemux_pcr - tsync_pcr_last_tsdemuxpcr);
-	if(tsync_pcr_last_tsdemuxpcr!=0&&tsdemux_pcr!=0&&tsdemux_pcr_diff > tsync_pcr_discontinue_threshold && tsync_pcr_inited_flag==1){
-		u32 video_delayed=0;
-		tsync_pcr_tsdemuxpcr_discontinue=1;
-		video_delayed = tsync_pcr_vstream_delayed();
-		if(TIME_UNIT90K*2<=video_delayed&&video_delayed<=TIME_UNIT90K*4)  
-			tsync_pcr_discontinue_waited=video_delayed+TIME_UNIT90K;
-		else if(TIME_UNIT90K*2>video_delayed)  
-			tsync_pcr_discontinue_waited=TIME_UNIT90K*3;
-		else 
-			tsync_pcr_discontinue_waited=TIME_UNIT90K*5;
-			
-		printk("[tsync_pcr_check] refpcr_discontinue. tsdemux_pcr_diff=%x, last refpcr=%x, repcr=%x,waited=%x\n",tsdemux_pcr_diff,tsync_pcr_last_tsdemuxpcr,tsdemux_pcr,tsync_pcr_discontinue_waited);
-		tsync_pcr_discontinue_local_point=timestamp_pcrscr_get();
-		tsync_pcr_discontinue_point=tsdemux_pcr-tsync_pcr_ref_latency;
-		need_recovery=0;
-	}
-	else if(tsync_pcr_tsdemuxpcr_discontinue == 1){
-		// to pause the pcr check
-		if(abs(timestamp_pcrscr_get()-tsync_pcr_discontinue_local_point)>tsync_pcr_discontinue_waited){			
-		 	printk("[tsync_pcr_check] video discontinue didn't happen, waited=%x\n",tsync_pcr_discontinue_waited);
-			// the v-discontinue did'n happen
-	 		tsync_pcr_tsdemuxpcr_discontinue=0;	 
-		 	tsync_pcr_discontinue_point=0;
-		 	tsync_pcr_discontinue_local_point=0;
-		 	tsync_pcr_discontinue_waited=0;	
-		}
-		need_recovery=0;
-	}
-	tsync_pcr_last_tsdemuxpcr=tsdemux_pcr;
-    }
-
-#if 0	
-    abuf_level= stbuf_level(get_buf_by_type(BUF_TYPE_AUDIO));
-    abuf_size= stbuf_size(get_buf_by_type(BUF_TYPE_AUDIO));
-    vbuf_level= stbuf_level(get_buf_by_type(BUF_TYPE_VIDEO));
-    vbuf_size= stbuf_size(get_buf_by_type(BUF_TYPE_VIDEO));
-
-    // The inited processing
-    if(tsync_pcr_inited_flag == 0){	
-	// check the video and audio stream buffer, to check to start
-	u32 first_pcr =tsdemux_first_pcrscr_get();	
-    	u32 first_vpts = timestamp_firstvpts_get();
-	u32 first_apts = timestamp_firstapts_get();
-	u32 ref_pcr=0;
-	u8 ref_pcr_valid=0;
-
-	if(tsync_pcr_usepcr==1){
-		if(first_pcr != 0 && first_vpts != 0){
-			// pcr is valid, use 
-			u32 diff = abs(first_vpts-first_pcr);
-			if(diff<270000 && first_vpts>first_pcr){
-				ref_pcr = tsdemux_pcr - tsync_pcr_ref_latency;
-				ref_pcr_valid=1;
-				printk("[tsync_pcr_check]Inited use pcr mode.ref_pcr=%x tsdemux_pcr=%x first_pcr=%x first_vpts=%x first_apts=%x \n",ref_pcr,tsdemux_pcr,first_pcr,first_vpts,first_apts);
-			}
-			else{
-				tsync_pcr_usepcr = 0;
-				printk("[tsync_pcr_check]unvalid pcr use other mode.first_pcr=%x first_vpts=%x first_apts=%x \n",first_pcr,first_vpts,first_apts);
-			}
-		}else{
-			if(first_vpts!=0 && first_pcr == 0){
-				tsync_pcr_usepcr=0;
-				printk("[tsync_pcr_check]can't read valid pcr, use other mode. read_cnt=%d \n",tsync_pcr_read_cnt);
-			}
-			tsync_pcr_read_cnt++;
-		}	
-	}
-	else{ 
-		// pcr is invalid, use vmaster or amaster mode
-		if(tsync_pcr_astart_flag==1&&tsync_pcr_vstart_flag==1&&first_vpts!=0&&first_apts!=0&&vbuf_level>=START_VIDEO_LEVEL){
-			if(first_vpts <= first_apts){
-				//play_mode=PLAY_MODE_FORCE_SLOW;
-				ref_pcr = first_vpts - tsync_pcr_ref_latency;
-				printk("[tsync_pcr_check]Inited use video pts and slow play.ref_pcr=%x first_pcr=%x first_vpts=%x first_apts=%x \n",ref_pcr,first_pcr,first_vpts,first_apts);				
-			}
-			else{
-				//play_mode=PLAY_MODE_FORCE_SLOW;
-				ref_pcr=first_apts;
-				printk("[tsync_pcr_check]Inited use audio pts and slow play.ref_pcr=%x first_pcr=%x first_vpts=%x first_apts=%x \n",ref_pcr,first_pcr,first_vpts,first_apts);	
-			}
-			ref_pcr_valid=1;
-		}
-		else if(tsync_pcr_astart_flag==0&&tsync_pcr_vstart_flag==1&&first_vpts!=0&&(vbuf_level*20)>vbuf_size&&abuf_level==0){
-			int vdelayed=calculation_vcached_delayed();
-			if(tsync_pcr_max_cache_time<vdelayed){
-				//play_mode=PLAY_MODE_FORCE_SLOW;
-				ref_pcr = first_vpts;
-				printk("[tsync_pcr_check]No audio.Inited video pts and slow play.ref_pcr=%x first_pcr=%x first_vpts=%x vdelayed=%x \n",ref_pcr,first_pcr,first_vpts,vdelayed);				
-				ref_pcr_valid=1;
-			}
-       		}
-       		else if(tsync_pcr_astart_flag==1&&tsync_pcr_vstart_flag==0&&first_apts!=0&&(abuf_level*20)>abuf_size&&vbuf_level==0){
-       			int adelayed=calculation_acached_delayed();
-			if(tsync_pcr_max_cache_time<adelayed){
-				//play_mode=PLAY_MODE_FORCE_SLOW;
-				ref_pcr = first_apts;
-				ref_pcr_valid=1;
-				printk("[tsync_pcr_check]No video.Inited audio pts and slow play.ref_pcr=%x first_pcr=%x adelayed=%x first_apts=%x \n",ref_pcr,first_pcr,adelayed,first_apts);				
-			}
-       		}
-       }
-
-	if(ref_pcr_valid==1){
-		timestamp_pcrscr_set(ref_pcr);
-		tsync_pcr_inited_flag = 1;
-		printk("[tsync_pcr_check] inited.ref_pcr=%x abuf_level=%x vbuf_level=%x \n", ref_pcr,abuf_level,vbuf_level);	
-		
-	    	if (!tsync_pcr_vpause_flag) {
-	        	timestamp_pcrscr_enable(1);
-	    	}	
-	}else{
-		return res;
-	}
-    }
-
-    if(tsync_pcr_usepcr==0){
-    	if(!tsync_pcr_vpause_flag){
-		if(vbuf_level < PAUSE_VIDEO_LEVEL/*||abuf_level<PAUSE_AUDIO_LEVEL*/){
-			tsync_pcr_avevent_locked(VIDEO_PAUSE,1);						// to pause
-			printk("[tsync_pcr_check] to pause abuf_level=%x vbuf_level=%x play_mode=%d \n",abuf_level,vbuf_level,play_mode);
-			return res;
-		}	
-    	}else{ 	
-		if(vbuf_level < START_VIDEO_LEVEL/*||abuf_level < START_AUDIO_LEVEL*/)
-			return res;
-
-		printk("[tsync_pcr_check] resume and show play. abuf_level=%x vbuf_level=%x play_mode=%d\n",abuf_level,vbuf_level,play_mode);
-		// to resume
-		tsync_pcr_avevent_locked(VIDEO_PAUSE,0);
-		play_mode=PLAY_MODE_FORCE_SLOW;
-    	}
-    }
-#else
+    if (tsync_pcr_usepcr == 1) {
+        // To monitor the pcr discontinue
+        tsdemux_pcr_diff=abs(tsdemux_pcr - tsync_pcr_last_tsdemuxpcr);
+        if (tsync_pcr_last_tsdemuxpcr != 0 && tsdemux_pcr != 0 && tsdemux_pcr_diff > tsync_pcr_discontinue_threshold && tsync_pcr_inited_flag >= TSYNC_PCR_INITCHECK_PCR) {
+            u32 video_delayed=0;
+            tsync_pcr_tsdemuxpcr_discontinue|=PCR_DISCONTINUE;
+            video_delayed = tsync_pcr_vstream_delayed();
+            if (TIME_UNIT90K*2 <= video_delayed && video_delayed <= TIME_UNIT90K*4)
+                tsync_pcr_discontinue_waited=video_delayed+TIME_UNIT90K;
+            else if (TIME_UNIT90K*2 > video_delayed)
+                tsync_pcr_discontinue_waited=TIME_UNIT90K*3;
+            else
+                tsync_pcr_discontinue_waited=TIME_UNIT90K*5;
+
+            printk("[tsync_pcr_check] refpcr_discontinue. tsdemux_pcr_diff=%x, last refpcr=%x, repcr=%x,waited=%x\n",tsdemux_pcr_diff,tsync_pcr_last_tsdemuxpcr,tsdemux_pcr,tsync_pcr_discontinue_waited);
+            tsync_pcr_discontinue_local_point=timestamp_pcrscr_get();
+            tsync_pcr_discontinue_point=tsdemux_pcr-tsync_pcr_ref_latency;
+            need_recovery=0;
+        }
+        else if (tsync_pcr_tsdemuxpcr_discontinue & PCR_DISCONTINUE) {
+            // to pause the pcr check
+            if (abs(timestamp_pcrscr_get() - tsync_pcr_discontinue_local_point) > tsync_pcr_discontinue_waited) {
+                printk("[tsync_pcr_check] audio or video discontinue didn't happen, waited=%x\n",tsync_pcr_discontinue_waited);
+                // the v-discontinue did'n happen
+                tsync_pcr_tsdemuxpcr_discontinue=0;
+                tsync_pcr_discontinue_point=0;
+                tsync_pcr_discontinue_local_point=0;
+                tsync_pcr_discontinue_waited=0;
+            }
+            need_recovery=0;
+        }
+        else if (tsync_pcr_tsdemuxpcr_discontinue & (PCR_DISCONTINUE|VIDEO_DISCONTINUE|AUDIO_DISCONTINUE)) {
+            tsync_pcr_tsdemuxpcr_discontinue=0;
+        }
+        tsync_pcr_last_tsdemuxpcr=tsdemux_pcr;
+    }
+
      //if(!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_PCR)||!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_VPTS)){
     if ((!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_VPTS)) && (!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_PCR)) && (!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_APTS))){
-        u32 cur_pcr = tsdemux_pcrscr_get();	
-        if (!(tsync_pcr_inited_flag&TSYNC_PCR_INITCHECK_RECORD)){
-            first_pcr_record = tsdemux_first_pcrscr_get();
-            if (!first_pcr_record){
-                first_pcr_record = tsdemux_pcrscr_get();
-            }
-            if (first_pcr_record){
-                tsync_pcr_inited_flag |= TSYNC_PCR_INITCHECK_RECORD;
-                abuf_level= get_stream_buffer_level(1);
-                vbuf_level= get_stream_buffer_level(0);            
-                printk("pcr first record abuf_level = %d, vbuf_level = %d \n", abuf_level, vbuf_level);
-            }
-		}
-        else if (!cur_pcr){
-            printk("cur_pcr = 0, first_pcr_record = 0x%x \n",first_pcr_record);
+        u64 cur_system_time=(jiffies * TIME_UNIT90K) / HZ;
+        if (cur_system_time - first_time_record < 270000) {
+            tsync_pcr_inited_mode=INIT_MODE_VIDEO;
+            tsync_pcr_pcrscr_set();
         }
-        else if ((cur_pcr - first_pcr_record) > 270000){
-            timestamp_pcrscr_set(cur_pcr-270000);                                            
-            tsync_pcr_inited_flag|=TSYNC_PCR_INITCHECK_PCR;
-            if (!tsync_pcr_vpause_flag) {
-                timestamp_pcrscr_enable(1);
-            }
-            tsync_pcr_usepcr=1;
-            printk("use pcr, cur_pcr = 0x%x, first_pcr_record = 0x%x, diff = %d, tsync_pcr_usepcr = %d\n", cur_pcr,first_pcr_record, cur_pcr-first_pcr_record,tsync_pcr_usepcr );  
+        else {
+            tsync_pcr_inited_mode=INIT_MODE_AUDIO;
+            tsync_pcr_pcrscr_set();
         }
-        //printk("waiting for the first vpts, cur_pcr = 0x%x, first_pcr_record = 0x%x, diff = %d, tsync_pcr_usepcr = %d\n", cur_pcr,first_pcr_record, cur_pcr-first_pcr_record,tsync_pcr_usepcr );    
-  
-	return res;
+
+        return res;
      }
 
+    if (tsync_pcr_stream_delta == 0)
+        tsync_pcr_get_delta();
+
     abuf_level= get_stream_buffer_level(1);
     abuf_size= get_stream_buffer_size(1);
     vbuf_level= get_stream_buffer_level(0);
     vbuf_size= get_stream_buffer_size(0);
-#endif
 
-    if(((vbuf_level * 5 > vbuf_size * 4 && vbuf_size > 0) || (abuf_level * 5 > abuf_size * 4 && abuf_size > 0)) && play_mode != PLAY_MODE_FORCE_SPEED){
-	// the video stream buffer will happen overflow
-	u32 new_pcr=0;
-	play_mode=PLAY_MODE_FORCE_SPEED;
-	new_pcr=timestamp_pcrscr_get()+72000;		// 90000*0.8
-    	if(new_pcr < timestamp_pcrscr_get())
-             printk("[%s]set the system pts now system 0x%x  pcr 0x%x!\n",__func__,timestamp_pcrscr_get(),new_pcr);
-    	timestamp_pcrscr_set(new_pcr);
-    	printk("[tsync_pcr_check]Buffer will overflow and speed play. new_pcr=%x vlevel=%x vsize=%x alevel=%x asize=%x play_mode=%d\n",
-    		new_pcr,vbuf_level,vbuf_size,abuf_level,abuf_size, play_mode);
+    last_checkin_vpts=(u32)get_last_checkin_pts(PTS_TYPE_VIDEO);
+    last_checkin_apts=(u32)get_last_checkin_pts(PTS_TYPE_AUDIO);
+    last_cur_pcr=timestamp_pcrscr_get();
+    last_checkin_minpts=tsync_pcr_get_min_checkinpts();
+    cur_apts=timestamp_apts_get();
+    cur_vpts=timestamp_vpts_get();
+
+    // check whether it need reset
+    if (last_checkin_minpts > 0 && last_checkin_minpts - last_cur_pcr < PAUSE_CHECK_TIME) {
+        if (tsync_pcr_lastcheckin_apts == last_checkin_apts && tsync_pcr_lastcheckin_vpts == last_checkin_vpts) {
+            ++tsync_pcr_pausecheck_cnt;
+            if (tsync_pcr_pausecheck_cnt > 250 && tsync_pcr_reset_flag == 0) {
+                printk("[tsync_pcr_check]reset abuf_level=%x vbuf_level=%x stream_delta=%lld apts=%llx vpts=%llx\n",
+                    abuf_level,vbuf_level,tsync_pcr_stream_delta, last_checkin_apts,last_checkin_vpts);
+                tsync_pcr_reset_flag=1;
+                return res;
+            }
+            else if (240 < tsync_pcr_pausecheck_cnt && tsync_pcr_pausecheck_cnt < 250) {
+                //printk("[tsync_pcr_check] abuf_level=%x vbuf_level=%x apts=%llx vpts=%llx cnt=%d\n",
+                    //abuf_level,vbuf_level, last_checkin_apts,last_checkin_vpts,tsync_pcr_pausecheck_cnt);
+            }
+        }
+        else{
+            tsync_pcr_lastcheckin_apts = last_checkin_apts;
+            tsync_pcr_lastcheckin_vpts= last_checkin_vpts;
+            tsync_pcr_pausecheck_cnt=0;
+        }
     }
-    
-    if(play_mode == PLAY_MODE_FORCE_SLOW){
-    	/*if((vbuf_level * 50 > vbuf_size && abuf_level * 50 > abuf_size)||			
-    	    vbuf_level * 20 > vbuf_size ||
-	    abuf_level * 20 > abuf_size){*/
-    	if(vbuf_level * 20 > vbuf_size && vbuf_size > 0){
-	    	play_mode=PLAY_MODE_NORMAL;
-		printk("[tsync_pcr_check]Buffer to vlevel=%x vsize=%x alevel=%x asize=%x. slow to normal play\n",
-			vbuf_level,vbuf_size,abuf_level,abuf_size);	  
-    	}
-    }
-    else if(play_mode == PLAY_MODE_FORCE_SPEED){
-	if((vbuf_size > 0 && vbuf_level * 4 < vbuf_size && abuf_size > 0 && abuf_level * 4 < abuf_size) ||
-	    (vbuf_size > 0 && vbuf_level * 4 < vbuf_size && abuf_level == 0)||
-	    (abuf_size > 0 && abuf_level * 4 < abuf_size && vbuf_level == 0)){
-		play_mode=PLAY_MODE_NORMAL;
-		tsync_pcr_tsdemux_startpcr = tsdemux_pcr;
-		tsync_pcr_system_startpcr = timestamp_pcrscr_get();
-		printk("[tsync_pcr_check]Buffer to vlevel=%x vsize=%x alevel=%x asize=%x. speed to normal play\n",
-			vbuf_level,vbuf_size,abuf_level,abuf_size);
-	}
+    else{
+        tsync_pcr_lastcheckin_apts = last_checkin_apts;
+        tsync_pcr_lastcheckin_vpts= last_checkin_vpts;
+        tsync_pcr_pausecheck_cnt=0;
+   }
+
+    // check whether audio and video can sync
+    if (last_cur_pcr-cur_apts > MAX_SYNC_AGAP_TIME &&
+        abs(cur_apts-cur_vpts) > MAX_SYNC_AGAP_TIME &&
+        last_checkin_apts > 0 && last_checkin_apts - last_cur_pcr < MIN_SYNC_ACHACH_TIME &&
+        !(tsync_pcr_tsdemuxpcr_discontinue & PCR_DISCONTINUE)) {
+        tsync_pcr_asynccheck_cnt++;
+    }
+    else
+        tsync_pcr_asynccheck_cnt=0;
+
+    if (last_cur_pcr - cur_vpts > MAX_SYNC_VGAP_TIME &&
+        abs(cur_apts - cur_vpts) > MAX_SYNC_VGAP_TIME &&
+        last_checkin_vpts > 0 && last_checkin_vpts - last_cur_pcr < MIN_SYNC_VCHACH_TIME &&
+        !(tsync_pcr_tsdemuxpcr_discontinue & PCR_DISCONTINUE)) {
+        tsync_pcr_vsynccheck_cnt++;
+    }
+    else
+        tsync_pcr_vsynccheck_cnt=0;
+
+    if (tsync_pcr_vsynccheck_cnt > 100 && last_checkin_minpts > 0) {
+        int64_t  new_pcr =  last_checkin_minpts-tsync_pcr_ref_latency*2;
+        int64_t  old_pcr=timestamp_pcrscr_get();
+        timestamp_pcrscr_set(new_pcr);
+        printk("[tsync_pcr_check] video stream underrun,force slow play. apts=%d vpts=%d pcr=%lld new_pcr=%lld checkin_apts=%lld checkin_vpts=%lld\n",
+            cur_apts,cur_vpts,old_pcr,new_pcr,last_checkin_apts,last_checkin_vpts);
+    }
+    else if (tsync_pcr_asynccheck_cnt > 100 && last_checkin_minpts > 0) {
+        int64_t  new_pcr =  last_checkin_minpts-tsync_pcr_ref_latency*2;
+        int64_t  old_pcr=timestamp_pcrscr_get();
+        timestamp_pcrscr_set(new_pcr);
+        printk("[tsync_pcr_check] audio stream underrun,force slow play. apts=%d vpts=%d pcr=%lld new_pcr=%lld checkin_apts=%lld checkin_vpts=%lld\n",
+            cur_apts,cur_vpts,old_pcr,new_pcr,last_checkin_apts,last_checkin_vpts);
+    }
+
+    if (((vbuf_level * 5 > vbuf_size * 4 && vbuf_size > 0) || (abuf_level * 5 > abuf_size * 4 && abuf_size > 0)) && play_mode != PLAY_MODE_FORCE_SPEED) {
+        // the video stream buffer will happen overflow
+        u32 new_pcr=0;
+        play_mode=PLAY_MODE_FORCE_SPEED;
+        new_pcr=timestamp_pcrscr_get()+72000;		// 90000*0.8
+        if (new_pcr < timestamp_pcrscr_get())
+            printk("[%s]set the system pts now system 0x%x  pcr 0x%x!\n",__func__,timestamp_pcrscr_get(),new_pcr);
+        timestamp_pcrscr_set(new_pcr);
+        printk("[tsync_pcr_check]Buffer will overflow and speed play. new_pcr=%x vlevel=%x vsize=%x alevel=%x asize=%x play_mode=%d\n",
+            new_pcr,vbuf_level,vbuf_size,abuf_level,abuf_size, play_mode);
+    }
+
+    if (play_mode == PLAY_MODE_FORCE_SLOW) {
+        if ((vbuf_level * 50 > vbuf_size && abuf_level * 50 > abuf_size && vbuf_size > 0 && abuf_size > 0) ||
+            (vbuf_level * 20 > vbuf_size && vbuf_size > 0) ||
+            (abuf_level * 20 > abuf_size && abuf_size > 0)) {
+            play_mode=PLAY_MODE_NORMAL;
+            printk("[tsync_pcr_check]Buffer to vlevel=%x vsize=%x alevel=%x asize=%x. slow to normal play\n",
+                vbuf_level,vbuf_size,abuf_level,abuf_size);
+        }
+    }
+    else if (play_mode == PLAY_MODE_FORCE_SPEED) {
+        if ((vbuf_size > 0 && vbuf_level * 4 < vbuf_size && abuf_size > 0 && abuf_level * 4 < abuf_size) ||
+            (vbuf_size > 0 && vbuf_level * 4 < vbuf_size && abuf_level == 0)||
+            (abuf_size > 0 && abuf_level * 4 < abuf_size && vbuf_level == 0)) {
+            play_mode=PLAY_MODE_NORMAL;
+            tsync_pcr_tsdemux_startpcr = tsdemux_pcr;
+            tsync_pcr_system_startpcr = timestamp_pcrscr_get();
+            printk("[tsync_pcr_check]Buffer to vlevel=%x vsize=%x alevel=%x asize=%x. speed to normal play\n",
+                vbuf_level,vbuf_size,abuf_level,abuf_size);
+        }
     }
 /*
     tsync_pcr_debug_pcrscr++;
     if(tsync_pcr_debug_pcrscr>=100){    	
-    	printk("[tsync_pcr_check]debug pcr=%x,refer lock=%x, vpts =%x, apts=%x\n",pcr,tsdemux_pcr,timestamp_vpts_get(),timestamp_apts_get());
-    	tsync_pcr_debug_pcrscr=0;
+        printk("[tsync_pcr_check]debug pcr=%x,refer lock=%x, vpts =%x, apts=%x\n",pcr,tsdemux_pcr,timestamp_vpts_get(),timestamp_apts_get());
+        tsync_pcr_debug_pcrscr=0;
     }
 */
-	
 
     //if(need_recovery==1 || play_mode == PLAY_MODE_FORCE_SLOW || play_mode == PLAY_MODE_FORCE_SPEED){
     /* To check the system time with ts demuxer pcr */
-    if((play_mode != PLAY_MODE_FORCE_SLOW) && (play_mode != PLAY_MODE_FORCE_SPEED) && (tsync_pcr_usepcr==1)){
-	// use the pcr to adjust
-	//u32 ref_pcr=tsdemux_pcr-calculation_vcached_delayed();
-	int64_t ref_pcr=(int64_t)tsdemux_pcr;//(int64_t)tsdemux_pcr- (int64_t)tsync_pcr_ref_latency;
-	int64_t cur_pcr=(int64_t)timestamp_pcrscr_get();
-	int64_t diff=abs(ref_pcr - cur_pcr);
-	
-	//if(diff > OPEN_RECOVERY_THRESHOLD && cur_pcr<ref_pcr && play_mode!=PLAY_MODE_SPEED && need_recovery){
-	if(((ref_pcr -cur_pcr) > (tsync_pcr_max_cache_time))  && (play_mode!=PLAY_MODE_SPEED) && need_recovery){
-		play_mode=PLAY_MODE_SPEED;
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] diff=%lld to speed play  \n",diff);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] ref_pcr=%lld to speed play  \n",ref_pcr);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] cur_pcr=%lld to speed play  \n",cur_pcr);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] tsync_pcr_max_cache_time=%d to speed play  \n",tsync_pcr_max_cache_time);	
-	}
-	//else if(diff > OPEN_RECOVERY_THRESHOLD && cur_pcr>ref_pcr && play_mode!=PLAY_MODE_SLOW && need_recovery){
-	else if((ref_pcr - cur_pcr) < (tsync_pcr_min_cache_time) && (play_mode!=PLAY_MODE_SLOW) && need_recovery){
-		play_mode=PLAY_MODE_SLOW;
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] diff=%lld to slow play  \n",diff);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] ref_pcr=%lld to slow play  \n",ref_pcr);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] cur_pcr=%lld to slow play  \n",cur_pcr);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] tsync_pcr_max_cache_time=%d to slow play  \n",tsync_pcr_max_cache_time);	
-	}	
-	//else if(diff < CLOSE_RECOVERY_THRESHOLD && play_mode!=PLAY_MODE_NORMAL){
-	else if((!need_recovery||((tsync_pcr_down_cache_time<ref_pcr-cur_pcr)&&(ref_pcr-cur_pcr<tsync_pcr_up_cache_time)))&&(play_mode!=PLAY_MODE_NORMAL)){
-		play_mode=PLAY_MODE_NORMAL;
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] ref_pcr=%lld to nomal play  \n",ref_pcr);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] cur_pcr=%lld to nomal play  \n",cur_pcr);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] tsync_pcr_max_cache_time=%d to nomal play  \n",tsync_pcr_max_cache_time);	
-		amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] diff=%lld,need_recovery=%d to nomal play  \n",diff,need_recovery);	
-	}
+    if ((play_mode != PLAY_MODE_FORCE_SLOW) && (play_mode != PLAY_MODE_FORCE_SPEED) && (tsync_pcr_usepcr == 1) && tsync_pcr_stream_delta != 0) {
+        // use the pcr to adjust
+        //u32 ref_pcr=tsdemux_pcr-calculation_vcached_delayed();
+        u64 ref_pcr=(u64)tsdemux_pcr;//(int64_t)tsdemux_pcr- (int64_t)tsync_pcr_ref_latency;
+        u64 cur_pcr=(u64)timestamp_pcrscr_get();
+        int64_t cur_delta =  (int64_t)ref_pcr - (int64_t)cur_pcr;
+        int64_t diff=(cur_delta -tsync_pcr_stream_delta);
+
+        //if(diff > OPEN_RECOVERY_THRESHOLD && cur_pcr<ref_pcr && play_mode!=PLAY_MODE_SPEED && need_recovery){
+        if ((diff > (tsync_pcr_max_cache_time))  && (play_mode != PLAY_MODE_SPEED) && need_recovery) {
+            play_mode=PLAY_MODE_SPEED;
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] diff=%lld to speed play  \n",diff);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] ref_pcr=%lld to speed play  \n",ref_pcr);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] cur_pcr=%lld to speed play  \n",cur_pcr);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] tsync_pcr_max_cache_time=%d to speed play  \n",tsync_pcr_max_cache_time);
+        }
+        //else if(diff > OPEN_RECOVERY_THRESHOLD && cur_pcr>ref_pcr && play_mode!=PLAY_MODE_SLOW && need_recovery){
+        else if(diff< (tsync_pcr_min_cache_time) && (play_mode!=PLAY_MODE_SLOW) && need_recovery){
+            play_mode=PLAY_MODE_SLOW;
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] diff=%lld to slow play  \n",diff);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] ref_pcr=%lld to slow play  \n",ref_pcr);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] cur_pcr=%lld to slow play  \n",cur_pcr);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] tsync_pcr_max_cache_time=%d to slow play  \n",tsync_pcr_max_cache_time);
+        }
+        //else if(diff < CLOSE_RECOVERY_THRESHOLD && play_mode!=PLAY_MODE_NORMAL){
+        else if((!need_recovery||((tsync_pcr_down_cache_time<diff)&&(diff<tsync_pcr_up_cache_time)))&&(play_mode!=PLAY_MODE_NORMAL)){
+            play_mode=PLAY_MODE_NORMAL;
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] ref_pcr=%lld to nomal play  \n",ref_pcr);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] cur_pcr=%lld to nomal play  \n",cur_pcr);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] tsync_pcr_max_cache_time=%d to nomal play  \n",tsync_pcr_max_cache_time);
+            amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] diff=%lld,need_recovery=%d to nomal play  \n",diff,need_recovery);
+        }
     }
     else if((play_mode != PLAY_MODE_FORCE_SLOW) && (play_mode != PLAY_MODE_FORCE_SPEED) && (tsync_pcr_usepcr==0)){
-	// use the video cache time to adjust
-	int video_cache_time = calculation_vcached_delayed();	
-	if(video_cache_time > tsync_pcr_max_delay_time){
-		if(play_mode!=PLAY_MODE_SPEED){
-			play_mode=	PLAY_MODE_SPEED;
-			amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] video_delay_time=%d to speed play  \n",video_cache_time);
-		}
-	}
-	else if( video_cache_time < tsync_pcr_min_delay_time && video_cache_time>=0 ){
-		if(play_mode!=PLAY_MODE_SLOW){
-			play_mode=PLAY_MODE_SLOW;
-			amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] video_delay_time=%d to show play  \n",video_cache_time);
-		}
-	}
-	else{ 
-		if(tsync_pcr_down_delay_time<=video_cache_time&&video_cache_time<=tsync_pcr_up_delay_time&&play_mode!=PLAY_MODE_NORMAL){
-			play_mode=PLAY_MODE_NORMAL;
-			amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] video_delay_time=%d to nomal play  \n", video_cache_time);	
-		}
-	}
+        // use the min cache time to adjust
+        int min_cache_time = get_min_cache_delay();
+        if (min_cache_time > tsync_pcr_max_delay_time) {
+            if (play_mode != PLAY_MODE_SPEED) {
+                play_mode=PLAY_MODE_SPEED;
+                amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] min_cache_time=%d to speed play  \n",min_cache_time);
+            }
+        }
+        else if (min_cache_time < tsync_pcr_min_delay_time && min_cache_time>0 ) {
+            if (play_mode != PLAY_MODE_SLOW) {
+                play_mode=PLAY_MODE_SLOW;
+                amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] min_cache_time=%d to show play  \n",min_cache_time);
+            }
+        }
+        else{
+            if (tsync_pcr_down_delay_time <= min_cache_time && min_cache_time <= tsync_pcr_up_delay_time && play_mode != PLAY_MODE_NORMAL) {
+                play_mode=PLAY_MODE_NORMAL;
+                amlog_level(LOG_LEVEL_INFO, "[tsync_pcr_check] min_cache_time=%d to nomal play  \n", min_cache_time);
+            }
+        }
     }
  
-    if(need_recovery&&!tsync_pcr_vpause_flag){   
-    	if(play_mode == PLAY_MODE_SLOW)
-    		timestamp_pcrscr_set(timestamp_pcrscr_get()-RECOVERY_SPAN);
-    	else if( play_mode == PLAY_MODE_FORCE_SLOW)
-    		timestamp_pcrscr_set(timestamp_pcrscr_get()-FORCE_RECOVERY_SPAN);
-    	else if(play_mode == PLAY_MODE_SPEED)
-    		timestamp_pcrscr_set(timestamp_pcrscr_get()+RECOVERY_SPAN);
-    	else if( play_mode == PLAY_MODE_FORCE_SPEED)
-    		timestamp_pcrscr_set(timestamp_pcrscr_get()+FORCE_RECOVERY_SPAN);
+    if (need_recovery && !tsync_pcr_vpause_flag) {
+        if (play_mode == PLAY_MODE_SLOW)
+            timestamp_pcrscr_set(timestamp_pcrscr_get()-RECOVERY_SPAN);
+        else if ( play_mode == PLAY_MODE_FORCE_SLOW)
+            timestamp_pcrscr_set(timestamp_pcrscr_get()-FORCE_RECOVERY_SPAN);
+        else if (play_mode == PLAY_MODE_SPEED)
+            timestamp_pcrscr_set(timestamp_pcrscr_get()+RECOVERY_SPAN);
+        else if ( play_mode == PLAY_MODE_FORCE_SPEED)
+            timestamp_pcrscr_set(timestamp_pcrscr_get()+FORCE_RECOVERY_SPAN);
     }
     //}
 
@@ -735,42 +815,51 @@ static unsigned long tsync_pcr_check(void)
 
 static void tsync_pcr_check_timer_func(unsigned long arg)
 {
+    ulong flags;
+    spin_lock_irqsave(&tsync_pcr_lock, flags);
     tsync_pcr_check();
+    spin_unlock_irqrestore(&tsync_pcr_lock, flags);
+
     tsync_pcr_check_timer.expires = jiffies+TEN_MS_INTERVAL;
-    
+
     add_timer(&tsync_pcr_check_timer);
 }
 
 static void tsync_pcr_param_reset(void){
-	tsync_pcr_system_startpcr=0;
-	tsync_pcr_tsdemux_startpcr=0;
-
-	tsync_pcr_vpause_flag = 0;
-	tsync_pcr_apause_flag = 0;
-	tsync_pcr_vstart_flag = 0;
-	tsync_pcr_astart_flag = 0;
-	tsync_pcr_inited_flag = 0;
-    	wait_pcr_count = 0;
-    	printk("wait_pcr_count = 0 \n");
-
-	tsync_pcr_last_tsdemuxpcr = 0;
-	tsync_pcr_discontinue_local_point=0;
-	tsync_pcr_discontinue_point = 0;
-	tsync_pcr_discontinue_waited = 0;							// the time waited the v-discontinue to happen
-	tsync_pcr_tsdemuxpcr_discontinue = 0;						// the boolean value		
-
-	abuf_level=0;
-	abuf_size=0;
-	vbuf_level=0;
-	vbuf_size=0;
-	play_mode=PLAY_MODE_NORMAL;
-	tsync_pcr_started=0;
+    tsync_pcr_system_startpcr=0;
+    tsync_pcr_tsdemux_startpcr=0;
+
+    tsync_pcr_vpause_flag = 0;
+    tsync_pcr_apause_flag = 0;
+    tsync_pcr_vstart_flag = 0;
+    tsync_pcr_astart_flag = 0;
+    tsync_pcr_inited_flag = 0;
+    wait_pcr_count = 0;
+    tsync_pcr_reset_flag=0;
+    tsync_pcr_asynccheck_cnt=0;
+    tsync_pcr_vsynccheck_cnt=0;
+    printk("wait_pcr_count = 0 \n");
+
+    tsync_pcr_last_tsdemuxpcr = 0;
+    tsync_pcr_discontinue_local_point=0;
+    tsync_pcr_discontinue_point = 0;
+    tsync_pcr_discontinue_waited = 0;                                               // the time waited the v-discontinue to happen
+    tsync_pcr_tsdemuxpcr_discontinue = 0;                                       // the boolean value
+
+    abuf_level=0;
+    abuf_size=0;
+    vbuf_level=0;
+    vbuf_size=0;
+    play_mode=PLAY_MODE_NORMAL;
+    tsync_pcr_started=0;
+    tsync_pcr_inited_mode = INIT_MODE_VIDEO;
+    tsync_pcr_stream_delta=0;
 }
 int tsync_pcr_set_apts(unsigned pts)
 {
-	timestamp_apts_set(pts);
-	//printk("[tsync_pcr_set_apts]set apts=%x",pts);
-	return 0;
+    timestamp_apts_set(pts);
+    //printk("[tsync_pcr_set_apts]set apts=%x",pts);
+    return 0;
 }
 int tsync_pcr_start(void)
 {
@@ -778,29 +867,30 @@ int tsync_pcr_start(void)
     timestamp_pcrscr_set(0);
     
     tsync_pcr_param_reset();
-    
-    if(tsync_get_mode() == TSYNC_MODE_PCRMASTER){
-    	printk("[tsync_pcr_start]PCRMASTER started success. \n");
-	init_timer(&tsync_pcr_check_timer);
-
-	tsync_pcr_check_timer.function = tsync_pcr_check_timer_func;
-	tsync_pcr_check_timer.expires = jiffies;
-
-	tsync_pcr_started=1;
-	tsync_pcr_usepcr=tsdemux_pcrscr_valid();
-	tsync_pcr_read_cnt=0;
-    	printk("[tsync_pcr_start]usepcr=%d\n",tsync_pcr_usepcr);
-	add_timer(&tsync_pcr_check_timer);
+    if (tsync_get_mode() == TSYNC_MODE_PCRMASTER) {
+        printk("[tsync_pcr_start]PCRMASTER started success. \n");
+        init_timer(&tsync_pcr_check_timer);
+
+        tsync_pcr_check_timer.function = tsync_pcr_check_timer_func;
+        tsync_pcr_check_timer.expires = jiffies;
+
+        first_time_record = (jiffies * TIME_UNIT90K) / HZ;
+        tsync_pcr_started=1;
+        tsync_pcr_usepcr=tsdemux_pcrscr_valid();
+        tsync_pcr_read_cnt=0;
+        printk("[tsync_pcr_start]usepcr=%d\n",tsync_pcr_usepcr);
+        add_timer(&tsync_pcr_check_timer);
     }
     return 0;
 }
 
 void tsync_pcr_stop(void)
 {
-    if(tsync_pcr_started==1){
-    	del_timer_sync(&tsync_pcr_check_timer);
-    	printk("[tsync_pcr_start]PCRMASTER stop success. \n");
+    if (tsync_pcr_started == 1) {
+        del_timer_sync(&tsync_pcr_check_timer);
+        printk("[tsync_pcr_stop]PCRMASTER stop success. \n");
     }
+    tsync_pcr_freerun_mode=0;
     tsync_pcr_started=0;
 }
 
@@ -818,7 +908,7 @@ static ssize_t show_tsync_pcr_dispoint(struct class *class,
                            struct class_attribute *attr,
                            char *buf)
 {
-printk("[%s:%d] tsync_pcr_discontinue_point:%x, HZ:%x, \n", __FUNCTION__, __LINE__, tsync_pcr_discontinue_point, HZ);
+    printk("[%s:%d] tsync_pcr_discontinue_point:%x, HZ:%x, \n", __FUNCTION__, __LINE__, tsync_pcr_discontinue_point, HZ);
     return sprintf(buf, "0x%x\n", tsync_pcr_discontinue_point);
 }
 
@@ -836,7 +926,7 @@ static ssize_t store_tsync_pcr_dispoint(struct class *class,
     }
 
     tsync_pcr_discontinue_point = pts;
-	printk("[%s:%d] tsync_pcr_discontinue_point:%x, \n", __FUNCTION__, __LINE__, tsync_pcr_discontinue_point);
+    printk("[%s:%d] tsync_pcr_discontinue_point:%x, \n", __FUNCTION__, __LINE__, tsync_pcr_discontinue_point);
 
     return size;
 }
@@ -855,11 +945,47 @@ static ssize_t store_tsync_pcr_audio_resample_type(struct class *class,
     }
 
     if(type==RESAMPLE_DOWN_FORCE_PCR_SLOW){
-	play_mode=PLAY_MODE_SLOW;
-	printk("[%s:%d] Audio to FORCE_PCR_SLOW\n", __FUNCTION__, __LINE__);
+        play_mode=PLAY_MODE_SLOW;
+        printk("[%s:%d] Audio to FORCE_PCR_SLOW\n", __FUNCTION__, __LINE__);
     }
     return size;
 }
+
+static ssize_t tsync_pcr_freerun_mode_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+    return sprintf(buf, "%d\n", tsync_pcr_freerun_mode);
+}
+
+static ssize_t tsync_pcr_freerun_mode_store(struct class *cla, struct class_attribute *attr, const char *buf,
+                                   size_t count)
+{
+    size_t r;
+
+    r = sscanf(buf, "%d", &tsync_pcr_freerun_mode);
+
+    printk("%s(%d)\n", __func__, tsync_pcr_freerun_mode);
+
+    if (r != 1) {
+        return -EINVAL;
+    }
+
+    return count;
+}
+
+static ssize_t show_reset_flag(struct class *class,
+                         struct class_attribute *attr,
+                         char *buf)
+{
+    return sprintf(buf, "%d\n", tsync_pcr_reset_flag);
+}
+
+static ssize_t show_apause_flag(struct class *class,
+                         struct class_attribute *attr,
+                         char *buf)
+{
+    return sprintf(buf, "%d\n", tsync_pcr_apause_flag);
+}
+
 // --------------------------------------------------------------------------------
 // define of tsync pcr module
 
@@ -867,6 +993,9 @@ static struct class_attribute tsync_pcr_class_attrs[] = {
     __ATTR(play_mode,  S_IRUGO | S_IWUSR | S_IWGRP, show_play_mode, NULL),
     __ATTR(tsync_pcr_discontinue_point, S_IRUGO | S_IWUSR, show_tsync_pcr_dispoint,  store_tsync_pcr_dispoint),
     __ATTR(audio_resample_type, S_IRUGO | S_IWUSR, NULL,  store_tsync_pcr_audio_resample_type),
+    __ATTR(tsync_pcr_freerun_mode, S_IRUGO | S_IWUSR, tsync_pcr_freerun_mode_show, tsync_pcr_freerun_mode_store),
+    __ATTR(tsync_pcr_reset_flag,  S_IRUGO | S_IWUSR | S_IWGRP, show_reset_flag, NULL),
+    __ATTR(tsync_pcr_apause_flag,  S_IRUGO | S_IWUSR | S_IWGRP, show_apause_flag, NULL),
     __ATTR_NULL
 };
 static struct class tsync_pcr_class = {
@@ -889,7 +1018,7 @@ static int __init tsync_pcr_init(void)
     timestamp_apts_set(-1);
     timestamp_vpts_set(0);
     timestamp_pcrscr_set(0);
-	wait_pcr_count = 0;
+    wait_pcr_count = 0;
     printk("[tsync_pcr_init]init success. \n");
     return (0);
 }
diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index ef304ed59ef0..997b43e5eb85 100755
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -167,7 +167,7 @@ static const struct vframe_operations_s vh264_vf_provider_ops = {
 static struct vframe_provider_s vh264_vf_prov;
 
 static u32 frame_buffer_size;
-static u32 frame_width, frame_height, frame_dur, frame_prog, frame_packing_type;
+static u32 frame_width, frame_height, frame_dur, frame_prog, frame_packing_type, last_duration;
 static u32 last_mb_width, last_mb_height;
 
 static DECLARE_KFIFO(newframe_q, vframe_t *, VF_POOL_SIZE);
@@ -567,6 +567,7 @@ static int vh264_set_params(void)
     mb_mv_byte = (mb_width & 0x80000000) ? 24 : 96;
     mb_width = mb_width & 0xff;
     mb_height = mb_total / mb_width;
+    last_duration=0;
 
     /* AV_SCRATCH_2
        bit 15: frame_mbs_only_flag
@@ -1169,16 +1170,23 @@ static void vh264_isr(void)
                             }
 
                             if (duration_from_pts_done == 0) {
-			        if (close_to(pts_duration, old_duration, RATE_CORRECTION_THRESHOLD)) {
-                                    //printk("finished correct frame duration new=%d,old_duration=%d,cnt=%d\n",pts_duration,old_duration,h264_pts_count);
+                                if (close_to(pts_duration, old_duration, RATE_CORRECTION_THRESHOLD)) {
+                                    printk("finished correct frame duration new=%d,old_duration=%d,cnt=%d\n",pts_duration,old_duration,h264_pts_count);
                                     duration_from_pts_done = 1;
-                                }else{/*not the same,redo it.*/
-                                    //printk("restart correct frame duration new=%d,old_duration=%d,cnt=%d\n",pts_duration,old_duration,h264_pts_count);
+                                }
+                                else{/*not the same,redo it.*/
+                                    if (!close_to(pts_duration, old_duration, 1000) &&
+                                        !close_to(pts_duration, frame_dur, 1000) &&
+                                        close_to(pts_duration, last_duration, 200))	// yangle: frame_dur must wrong,recover it.
+                                        frame_dur=pts_duration;
+
+                                    printk("restart correct frame duration new=%d,old_duration=%d,cnt=%d\n",pts_duration,old_duration,h264_pts_count);
                                     h264pts1 = h264pts2;
                                     h264_pts_count = 0;
                                     duration_from_pts_done = 0;
                                 }
                             }
+                            last_duration=pts_duration;
                         }
                     }
                 }
diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 62575ad66740..0367f12230b2 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -2524,12 +2524,13 @@ static inline bool vpts_expire(vframe_t *cur_vf, vframe_t *next_vf)
         pts = timestamp_vpts_get() + (cur_vf ? DUR2PTS(cur_vf->duration) : 0);
     }
     /* check video PTS discontinuity */
-    else if ((enable_video_discontinue_report) &&
+    else if (timestamp_pcrscr_enable_state()>0&&
+             (enable_video_discontinue_report) &&
              (abs(systime - pts) > tsync_vpts_discontinuity_margin()) &&
              ((next_vf->flag & VFRAME_FLAG_NO_DISCONTINUE) == 0)) {
         pts = timestamp_vpts_get() + (cur_vf ? DUR2PTS(cur_vf->duration) : 0);
 			//printk("system=0x%x vpts=0x%x\n", systime, timestamp_vpts_get());
-        if ((int)(systime - pts) >= 0){
+        if ((int)(systime - pts) >= 0) {
 		if(next_vf->pts != 0)
       			tsync_avevent_locked(VIDEO_TSTAMP_DISCONTINUITY, next_vf->pts);
 		else
-- 
2.19.0

