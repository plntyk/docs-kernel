From bb4e2cc6426fcb727b4eea443e6c10c245f48058 Mon Sep 17 00:00:00 2001
From: Tim Yao <tim.yao@amlogic.com>
Date: Wed, 18 Feb 2015 13:57:45 -0800
Subject: [PATCH 5417/5965] amports: remove m8m2 garbage files.

Change-Id: I83ffafae19d60446303f6160ca1d8342b5138d1b
---
 .../amports/m8/ucode/h264_4k2k/vh264_4k2k.c   | 1271 -----------------
 drivers/amlogic/amports/m8m2/Makefile         |    4 -
 drivers/amlogic/amports/m8m2/ucode/Makefile   |   14 -
 drivers/amlogic/amports/m8m2/ucode/avs        |    1 -
 .../amports/m8m2/ucode/encoder/Makefile       |    2 -
 .../amports/m8m2/ucode/encoder/encoder_mc.c   |   43 -
 .../m8m2/ucode/encoder/h264_enc_mix_dump.h    |  302 ----
 .../ucode/encoder/h264_enc_mix_dump_dblk.h    |  300 ----
 .../m8m2/ucode/encoder/h264_enc_mix_sw.h      |  384 -----
 .../encoder/h264_enc_mix_sw_hdec_m2_dblk.h    |  382 -----
 .../m8m2/ucode/encoder/half_encoder_linux.h   |  141 --
 drivers/amlogic/amports/m8m2/ucode/h264       |    1 -
 .../amports/m8m2/ucode/h264_4k2k/Makefile     |    3 -
 .../m8m2/ucode/h264_4k2k/h264c_linux_single.h |   69 -
 .../ucode/h264_4k2k/h264header_linux_single.h |  128 --
 .../ucode/h264_4k2k/h264mmc_linux_single.h    |  175 ---
 .../ucode/h264_4k2k/h264slice_linux_single.h  |  269 ----
 .../amports/m8m2/ucode/h264_4k2k/vh264_4k2k.c | 1271 -----------------
 .../m8m2/ucode/h264_4k2k/vh264_4k2k_mc.c      |   38 -
 .../m8m2/ucode/h264_4k2k/vh264_4k2k_mc.h      |   30 -
 drivers/amlogic/amports/m8m2/ucode/h264mvc    |    1 -
 drivers/amlogic/amports/m8m2/ucode/h265       |    1 -
 drivers/amlogic/amports/m8m2/ucode/jpeg       |    1 -
 drivers/amlogic/amports/m8m2/ucode/jpegenc    |    1 -
 drivers/amlogic/amports/m8m2/ucode/mjpeg      |    1 -
 drivers/amlogic/amports/m8m2/ucode/mpeg12     |    1 -
 drivers/amlogic/amports/m8m2/ucode/mpeg4      |    1 -
 drivers/amlogic/amports/m8m2/ucode/real       |    1 -
 drivers/amlogic/amports/m8m2/ucode/vc1        |    1 -
 drivers/amlogic/amports/m8m2/vdec_clk.c       |  189 ---
 30 files changed, 5026 deletions(-)
 delete mode 100755 drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k.c
 delete mode 100755 drivers/amlogic/amports/m8m2/Makefile
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/Makefile
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/avs
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/Makefile
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h
 delete mode 100644 drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/h264
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/Makefile
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264c_linux_single.h
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264header_linux_single.h
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264mmc_linux_single.h
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264slice_linux_single.h
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k.c
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.c
 delete mode 100755 drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.h
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/h264mvc
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/h265
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/jpeg
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/jpegenc
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/mjpeg
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/mpeg12
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/mpeg4
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/real
 delete mode 120000 drivers/amlogic/amports/m8m2/ucode/vc1
 delete mode 100755 drivers/amlogic/amports/m8m2/vdec_clk.c

diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k.c b/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k.c
deleted file mode 100755
index f5e85da8e374..000000000000
--- a/drivers/amlogic/amports/m8/ucode/h264_4k2k/vh264_4k2k.c
+++ /dev/null
@@ -1,1271 +0,0 @@
-/*
- * AMLOGIC Audio/Video streaming port driver.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the named License,
- * or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
- *
- */
-
-#include <linux/kernel.h>
-#include <linux/types.h>
-#include <linux/errno.h>
-#include <linux/interrupt.h>
-#include <linux/timer.h>
-#include <linux/platform_device.h>
-#include <linux/amports/amstream.h>
-#include <linux/amports/ptsserv.h>
-#include <linux/amports/canvas.h>
-#include <linux/amports/vframe.h>
-#include <linux/amports/vframe_provider.h>
-#include <linux/amports/vframe_receiver.h>
-#include <linux/workqueue.h>
-#include <linux/dma-mapping.h>
-#include <asm/atomic.h>
-
-#include <mach/am_regs.h>
-#include "vdec_reg.h"
-
-#include "amvdec.h"
-#include "vh264_4k2k_mc.h"
-
-#define DRIVER_NAME "amvdec_h264_4k2k"
-#define MODULE_NAME "amvdec_h264_4k2k"
-
-#define HANDLE_h264_4k2k_IRQ
-
-#define DEBUG_PTS
-#define DEBUG_SKIP
-
-#define PUT_INTERVAL        (HZ/100)
-
-#define STAT_TIMER_INIT     0x01
-#define STAT_MC_LOAD        0x02
-#define STAT_ISR_REG        0x04
-#define STAT_VF_HOOK        0x08
-#define STAT_TIMER_ARM      0x10
-#define STAT_VDEC_RUN       0x20
-
-#define DROPPING_THREAD_HOLD    4
-#define DROPPING_FIRST_WAIT     6
-
-static int  vh264_4k2k_vf_states(vframe_states_t *states, void*);
-static vframe_t *vh264_4k2k_vf_peek(void*);
-static vframe_t *vh264_4k2k_vf_get(void*);
-static void vh264_4k2k_vf_put(vframe_t *, void*);
-static int vh264_4k2k_event_cb(int type, void *data, void *private_data);
-
-static void vh264_4k2k_prot_init(void);
-static void vh264_4k2k_local_init(void);
-static void vh264_4k2k_put_timer_func(unsigned long arg);
-
-static const char vh264_4k2k_dec_id[] = "vh264_4k2k-dev";
-
-#define PROVIDER_NAME   "decoder.h264_4k2k"
-
-static const struct vframe_operations_s vh264_4k2k_vf_provider = {
-    .peek = vh264_4k2k_vf_peek,
-    .get = vh264_4k2k_vf_get,
-    .put = vh264_4k2k_vf_put,
-    .event_cb = vh264_4k2k_event_cb,
-    .vf_states=vh264_4k2k_vf_states,
-};
-static struct vframe_provider_s vh264_4k2k_vf_prov;
-
-static u32 frame_width, frame_height, frame_dur;
-static struct timer_list recycle_timer;
-static u32 stat;
-static u32 pts_outside = 0;
-static u32 sync_outside = 0;
-static u32 vh264_4k2k_ratio;
-static u32 h264_4k2k_ar;
-static u32 no_dropping_cnt;
-
-#ifdef DEBUG_SKIP
-static unsigned long view_total, view_dropped;
-#endif
-
-#ifdef DEBUG_PTS
-static unsigned long pts_missed, pts_hit;
-#endif
-
-static atomic_t vh264_4k2k_active = ATOMIC_INIT(0);
-static struct work_struct error_wd_work;
-
-static struct dec_sysinfo vh264_4k2k_amstream_dec_info;
-extern u32 trickmode_i;
-
-static DEFINE_SPINLOCK(lock);
-
-static int vh264_4k2k_stop(void);
-static s32 vh264_4k2k_init(void);
-
-/***************************
-*   new
-***************************/
-
-// bit[3:0] command :
-//           0 - command finished
-//               (DATA0 - {level_idc_mmco, max_reference_frame_num, width, height}
-//           1 - alloc view_0 display_buffer and reference_data_area
-//           2 - alloc view_1 display_buffer and reference_data_area
-#define MAILBOX_COMMAND         AV_SCRATCH_0
-#define MAILBOX_DATA_0          AV_SCRATCH_1
-#define MAILBOX_DATA_1          AV_SCRATCH_2
-#define MAILBOX_DATA_2          AV_SCRATCH_3
-#define CANVAS_START            AV_SCRATCH_6
-#define BUFFER_RECYCLE          AV_SCRATCH_7
-#define DROP_CONTROL            AV_SCRATCH_8
-#define PICTURE_COUNT           AV_SCRATCH_9
-#define DECODE_STATUS           AV_SCRATCH_A
-#define SPS_STATUS              AV_SCRATCH_B
-#define PPS_STATUS              AV_SCRATCH_C
-#define SIM_RESERV_D            AV_SCRATCH_D
-#define WORKSPACE_START         AV_SCRATCH_E
-#define SIM_RESERV_F            AV_SCRATCH_F
-#define DECODE_ERROR_CNT        AV_SCRATCH_G
-#define CURRENT_UCODE           AV_SCRATCH_H
-#define CURRENT_SPS_PPS         AV_SCRATCH_I // bit[15:9]-SPS, bit[8:0]-PPS
-#define DECODE_SKIP_PICTURE     AV_SCRATCH_J
-#define SIM_RESERV_K            AV_SCRATCH_K
-#define SIM_RESERV_L            AV_SCRATCH_L
-#define REF_START_VIEW_0        AV_SCRATCH_M
-#define REF_START_VIEW_1        AV_SCRATCH_N
-
-/********************************************
- *  Mailbox command
- ********************************************/
-#define CMD_FINISHED               0
-#define CMD_ALLOC_VIEW_0           1
-#define CMD_ALLOC_VIEW_1           2
-#define CMD_FRAME_DISPLAY          3
-
-#define CANVAS_INDEX_START         AMVDEC_H264_4K2K_CANVAS_INDEX
-
-unsigned  DECODE_BUFFER_START=0x00200000;
-unsigned DECODE_BUFFER_END=0x05000000;
-
-#define DECODE_BUFFER_NUM_MAX    16
-#define DISPLAY_BUFFER_NUM         4
-
-static unsigned int ANC_CANVAS_ADDR;
-static unsigned int index;
-static unsigned int dpb_start_addr[3];
-static unsigned int ref_start_addr[2];
-static unsigned int max_dec_frame_buffering[2];
-static unsigned int total_dec_frame_buffering[2];
-static unsigned int level_idc, max_reference_frame_num, mb_width, mb_height;
-static unsigned int dpb_size, ref_size;
-
-static int display_buff_id;
-static int display_view_id;
-static int display_POC;
-static int stream_offset;
-
-#define video_domain_addr(adr) (adr&0x7fffffff)
-static unsigned work_space_adr;
-static unsigned work_space_size = 0xa0000;
-
-typedef struct {
-    unsigned int y_addr;
-    unsigned int u_addr;
-    unsigned int v_addr;
-
-    int y_canvas_index;
-    int u_canvas_index;
-    int v_canvas_index;
-} buffer_spec_t;
-static buffer_spec_t buffer_spec0[DECODE_BUFFER_NUM_MAX+DISPLAY_BUFFER_NUM];
-static buffer_spec_t buffer_spec1[DECODE_BUFFER_NUM_MAX+DISPLAY_BUFFER_NUM];
-
-
-/*
-    dbg_mode:
-    bit 0: 1, print debug information
-    bit 4: 1, recycle buffer without displaying;
-    bit 5: 1, buffer single frame step , set dbg_cmd to 1 to step
-
-*/
-static int dbg_mode = 0;
-static int dbg_cmd = 0;
-static int view_mode = 3; /* 0, left; 1 ,right ; 2, left<->right 3, right<->left */
-static int drop_rate = 2;
-/**/
-
-typedef struct buf_s{
-    struct list_head list;
-    vframe_t vframe;
-    int display_POC;
-    int view0_buff_id;
-    int view1_buff_id;
-    int view0_drop;
-    int view1_drop;
-    int stream_offset;
-    unsigned pts;
-}buf_t;
-
-#define spec2canvas(x)  \
-    (((x)->v_canvas_index << 16) | \
-     ((x)->u_canvas_index << 8)  | \
-     ((x)->y_canvas_index << 0))
-
-#define to_buf(vf)	\
-	container_of(vf, struct buf_s, vframe)
-
-static int vf_buf_init_flag = 0;
-
-static void init_vf_buf(void)
-{
-
-    vf_buf_init_flag = 1;
-}
-
-static void uninit_vf_buf(void)
-{
-
-}
-//#define QUEUE_SUPPORT
-
-typedef struct {
-	int view0_buf_id;
-	int view1_buf_id;
-	int display_pos;
-	int slot;
-	unsigned stream_offset;
-} info_t;
-
-#define VF_POOL_SIZE        20
-static struct vframe_s vfpool[VF_POOL_SIZE];
-static info_t vfpool_idx[VF_POOL_SIZE];
-static s32 view0_vfbuf_use[DECODE_BUFFER_NUM_MAX];
-static s32 view1_vfbuf_use[DECODE_BUFFER_NUM_MAX];
-
-static s32 fill_ptr, get_ptr, putting_ptr, put_ptr;
-#define INCPTR(p) ptr_atomic_wrap_inc(&p)
-static inline void ptr_atomic_wrap_inc(u32 *ptr)
-{
-    u32 i = *ptr;
-
-    i++;
-
-    if (i >= VF_POOL_SIZE) {
-        i = 0;
-    }
-
-    *ptr = i;
-}
-
-
-
-static void set_frame_info(vframe_t *vf)
-{
-    unsigned int ar = 0;
-
-    vf->width = frame_width;
-    vf->height = frame_height;
-    vf->duration = frame_dur;
-    vf->duration_pulldown = 0;
-
-    if (vh264_4k2k_ratio == 0) {
-        vf->ratio_control |= (0x90 << DISP_RATIO_ASPECT_RATIO_BIT); // always stretch to 16:9
-    } else {
-        //h264_4k2k_ar = ((float)frame_height/frame_width)*customer_ratio;
-        ar = min(h264_4k2k_ar, (u32)DISP_RATIO_ASPECT_RATIO_MAX);
-
-        vf->ratio_control = (ar << DISP_RATIO_ASPECT_RATIO_BIT);
-    }
-
-    return;
-}
-
-static int  vh264_4k2k_vf_states(vframe_states_t *states, void* op_arg)
-{
-    unsigned long flags;
-    int i;
-    spin_lock_irqsave(&lock, flags);
-    states->vf_pool_size = VF_POOL_SIZE;
-
-    i = put_ptr - fill_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_free_num = i;
-
-    i = putting_ptr - put_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_recycle_num = i;
-
-    i = fill_ptr - get_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_avail_num = i;
-
-    spin_unlock_irqrestore(&lock, flags);
-    return 0;
-}
-
-static vframe_t *vh264_4k2k_vf_peek(void* op_arg)
-{
-
-
-     if (get_ptr == fill_ptr) {
-        return NULL;
-    }
-	if((vfpool_idx[get_ptr].view0_buf_id < 0)||(vfpool_idx[get_ptr].view1_buf_id < 0)){
-		return NULL;
-	}
-    return &vfpool[get_ptr];
-
-}
-
-static vframe_t *vh264_4k2k_vf_get(void* op_arg)
-{
-
-    vframe_t *vf;
-	int view0_buf_id;
-	int view1_buf_id;
-    if (get_ptr == fill_ptr) {
-        return NULL;
-    }
-
-    view0_buf_id = vfpool_idx[get_ptr].view0_buf_id;
-    view1_buf_id = vfpool_idx[get_ptr].view1_buf_id;
-    vf = &vfpool[get_ptr];
-    if(view_mode==0 || view_mode==1){
-        vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
-        vf->canvas0Addr = vf->canvas1Addr = (view_mode==0)?spec2canvas(&buffer_spec0[view0_buf_id]):
-                spec2canvas(&buffer_spec1[view1_buf_id]);
-    }
-    else{
-        vf->type = VIDTYPE_PROGRESSIVE;
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-        vf->left_eye.start_x = 0; vf->left_eye.start_y = 0; vf->left_eye.width = vf->width; vf->left_eye.height = vf->height;
-        vf->right_eye.start_x = 0; vf->right_eye.start_y = 0; vf->right_eye.width = vf->width; vf->right_eye.height = vf->height;
-        vf->trans_fmt = TVIN_TFMT_3D_TB;
-#endif
-
-        if(view_mode==2){
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-            //vf->trans_fmt = TVIN_TFMT_3D_LRH_OLER;
-#endif
-            vf->canvas0Addr = spec2canvas(&buffer_spec1[view1_buf_id]);
-            vf->canvas1Addr = spec2canvas(&buffer_spec0[view0_buf_id]);
-        }
-        else{
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-    		  //      vf->trans_fmt = TVIN_TFMT_3D_LRH_ELOR
-#endif
-            vf->canvas0Addr = spec2canvas(&buffer_spec0[view0_buf_id]);
-            vf->canvas1Addr = spec2canvas(&buffer_spec1[view1_buf_id]);
-        }
-    }
-
-    INCPTR(get_ptr);
-
-    if(vf){
-        if(frame_width==0){
-            frame_width = vh264_4k2k_amstream_dec_info.width;
-        }
-        if(frame_height==0){
-            frame_height = vh264_4k2k_amstream_dec_info.height;
-        }
-
-        vf->width = frame_width;
-        vf->height = frame_height;
-    }
-    return vf;
-
-}
-
-static void vh264_4k2k_vf_put(vframe_t *vf, void* op_arg)
-{
-
-    if(vf_buf_init_flag == 0){
-        return;
-    }
-	INCPTR(putting_ptr);
-
-}
-
-static int vh264_4k2k_event_cb(int type, void *data, void *private_data)
-{
-    if(type & VFRAME_EVENT_RECEIVER_RESET){
-        unsigned long flags;
-        amvdec_stop();
-#ifndef CONFIG_POST_PROCESS_MANAGER
-        vf_light_unreg_provider(&vh264_4k2k_vf_prov);
-#endif
-        spin_lock_irqsave(&lock, flags);
-        vh264_4k2k_local_init();
-        vh264_4k2k_prot_init();
-        spin_unlock_irqrestore(&lock, flags);
-#ifndef CONFIG_POST_PROCESS_MANAGER
-        vf_reg_provider(&vh264_4k2k_vf_prov);
-#endif
-        amvdec_start();
-    }
-    return 0;
-}
-
-/**/
-long init_canvas( int start_addr, long dpb_size, int dpb_number, int mb_width, int mb_height, buffer_spec_t* buffer_spec) {
-
-  int dpb_addr, addr;
-  int i;
-  int mb_total;
-
-  //cav_con canvas;
-
-    dpb_addr = start_addr;
-
-    mb_total = mb_width * mb_height;
-
-    for ( i = 0 ; i < dpb_number ; i++ )
-    {
-        WRITE_VREG(ANC_CANVAS_ADDR, index | ((index+1)<<8) | ((index+2)<<16));
-        ANC_CANVAS_ADDR++;
-
-        addr = dpb_addr;
-        buffer_spec[i].y_addr = addr;
-        buffer_spec[i].y_canvas_index = index;
-        canvas_config(index,
-                  addr,
-                  mb_width << 4,
-                  mb_height << 4,
-                  CANVAS_ADDR_NOWRAP,
-                  CANVAS_BLKMODE_32X32);
-
-        addr += mb_total << 8;
-        index++;
-        buffer_spec[i].u_addr = addr;
-        buffer_spec[i].u_canvas_index = index;
-        canvas_config(index,
-                  addr,
-                  mb_width << 3,
-                  mb_height << 3,
-                  CANVAS_ADDR_NOWRAP,
-                  CANVAS_BLKMODE_32X32);
-
-        addr += mb_total << 6;
-        index++;
-        buffer_spec[i].v_addr = addr;
-        buffer_spec[i].v_canvas_index = index;
-        canvas_config(index,
-                  addr,
-                  mb_width << 3,
-                  mb_height << 3,
-                  CANVAS_ADDR_NOWRAP,
-                  CANVAS_BLKMODE_32X32);
-
-
-        addr += mb_total << 6;
-        index++;
-
-        dpb_addr = dpb_addr + dpb_size;
-        if(dpb_addr >= DECODE_BUFFER_END) return -1;
-    }
-
-    return dpb_addr;
-}
-
-
-static int get_max_dec_frame_buf_size(int level_idc, int max_reference_frame_num, int mb_width, int mb_height)
-{
-  int pic_size = mb_width * mb_height * 384;
-
-  int size = 0;
-
-  switch (level_idc)
-  {
-  case 9:
-    size = 152064;
-    break;
-  case 10:
-    size = 152064;
-    break;
-  case 11:
-    size = 345600;
-    break;
-  case 12:
-    size = 912384;
-    break;
-  case 13:
-    size = 912384;
-    break;
-  case 20:
-    size = 912384;
-    break;
-  case 21:
-    size = 1824768;
-    break;
-  case 22:
-    size = 3110400;
-    break;
-  case 30:
-    size = 3110400;
-    break;
-  case 31:
-    size = 6912000;
-    break;
-  case 32:
-    size = 7864320;
-    break;
-  case 40:
-    size = 12582912;
-    break;
-  case 41:
-    size = 12582912;
-    break;
-  case 42:
-    size = 13369344;
-    break;
-  case 50:
-    size = 42393600;
-    break;
-  case 51:
-    size = 70778880;
-    break;
-  default:
-    break;
-  }
-
-  size /= pic_size;
-  size = size + 1; // need one more buffer
-  if(max_reference_frame_num > size) size = max_reference_frame_num;
-  if(size > DECODE_BUFFER_NUM_MAX) size = DECODE_BUFFER_NUM_MAX;
-
-  return size;
-}
-
-
-int check_in_list(int pos , int* slot)
-{
-	int i;
-	int ret = 0 ;
-	for(i = 0 ; i < VF_POOL_SIZE ; i++){
-		if(vfpool_idx[i].display_pos == pos){
-			ret =1;
-			*slot = vfpool_idx[i].slot ;
-			break;
-		}
-	}
-	return ret ;
-}
-
-#ifdef HANDLE_h264_4k2k_IRQ
-static irqreturn_t vh264_4k2k_isr(int irq, void *dev_id)
-#else
-static void vh264_4k2k_isr(void)
-#endif
-{
-        int drop_status;
-        vframe_t *vf;
-        int ret = READ_VREG(MAILBOX_COMMAND);
-        //printk("vh264_4k2k_isr, cmd =%x\n", ret);
-        switch(ret & 0xff) {
-          case CMD_ALLOC_VIEW_0:
-            if(dbg_mode&0x1)
-                printk("Start H264 display buffer allocation for view 0\n");
-            if((dpb_start_addr[0] != -1) | (dpb_start_addr[1] != -1)){
-              dpb_start_addr[0] = -1;
-              dpb_start_addr[1] = -1;
-            }
-            dpb_start_addr[0] = DECODE_BUFFER_START;
-            ret = READ_VREG(MAILBOX_DATA_0);
-            level_idc = (ret >> 24) & 0xff;
-            max_reference_frame_num = (ret >> 16) & 0xff;
-            mb_width = (ret >> 8) & 0xff;
-            mb_height = (ret >> 0) & 0xff;
-            max_dec_frame_buffering[0] = get_max_dec_frame_buf_size(level_idc, max_reference_frame_num, mb_width, mb_height);
-
-            total_dec_frame_buffering[0] = max_dec_frame_buffering[0] + DISPLAY_BUFFER_NUM;
-
-            mb_width = (mb_width+3) & 0xfffffffc;
-            mb_height = (mb_height+3) & 0xfffffffc;
-
-            dpb_size = mb_width * mb_height * 384;
-            ref_size = mb_width * mb_height * 96;
-
-            if(dbg_mode&0x1){
-                printk("dpb_size: 0x%x\n", dpb_size);
-                printk("ref_size: 0x%x\n", ref_size);
-                printk("total_dec_frame_buffering[0] : 0x%x\n", total_dec_frame_buffering[0]);
-                printk("max_reference_frame_num: 0x%x\n", max_reference_frame_num);
-            }
-            ref_start_addr[0] = dpb_start_addr[0] +
-                                (dpb_size * total_dec_frame_buffering[0]);
-            dpb_start_addr[1] = ref_start_addr[0] +
-                                (ref_size * (max_reference_frame_num+1));
-
-            if(dbg_mode&0x1){
-                printk("dpb_start_addr[0]: 0x%x\n", dpb_start_addr[0]);
-                printk("ref_start_addr[0]: 0x%x\n", ref_start_addr[0]);
-                printk("dpb_start_addr[1]: 0x%x\n", dpb_start_addr[1]);
-            }
-            if(dpb_start_addr[1] >= DECODE_BUFFER_END)
-            {
-               printk(" No enough memory for alloc view 0\n");
-               goto exit;
-            }
-
-            index = CANVAS_INDEX_START;
-            ANC_CANVAS_ADDR = ANC0_CANVAS_ADDR;
-
-            ret = init_canvas(dpb_start_addr[0], dpb_size, total_dec_frame_buffering[0], mb_width, mb_height, buffer_spec0);
-
-            if(ret == -1) {
-               printk(" Un-expected memory alloc problem\n");
-               goto exit;
-            }
-
-            WRITE_VREG(REF_START_VIEW_0, video_domain_addr(ref_start_addr[0]));
-            WRITE_VREG(MAILBOX_DATA_0,
-                (max_dec_frame_buffering[0] << 8) |
-                (total_dec_frame_buffering[0] << 0)
-              );
-            WRITE_VREG(MAILBOX_DATA_1, ref_size);
-            WRITE_VREG(MAILBOX_COMMAND, CMD_FINISHED);
-
-            if(dbg_mode&0x1){
-                printk("End H264 display buffer allocation for view 0\n");
-            }
-            if(frame_width == 0){
-                frame_width = mb_width<<4;
-            }
-            if(frame_height == 0){
-                frame_height = mb_height<<4;
-                if(frame_height == 1088) frame_height = 1080;
-            }
-            break;
-          case CMD_ALLOC_VIEW_1:
-            if(dbg_mode&0x1){
-                printk("Start H264 display buffer allocation for view 1\n");
-            }
-            if((dpb_start_addr[0] == -1) | (dpb_start_addr[1] == -1)){
-              printk("Error : allocation view 1 before view 0 !!!\n");
-              break;
-            }
-            ret = READ_VREG(MAILBOX_DATA_0);
-            level_idc = (ret >> 24) & 0xff;
-            max_reference_frame_num = (ret >> 16) & 0xff;
-            mb_width = (ret >> 8) & 0xff;
-            mb_height = (ret >> 0) & 0xff;
-            max_dec_frame_buffering[1] = get_max_dec_frame_buf_size(level_idc, max_reference_frame_num, mb_width, mb_height);
-            if(max_dec_frame_buffering[1] != max_dec_frame_buffering[0]){
-              printk(" Warning : view0/1 max_dec_frame_buffering different : 0x%x/0x%x, Use View0\n",
-                max_dec_frame_buffering[0], max_dec_frame_buffering[1]);
-              max_dec_frame_buffering[1] = max_dec_frame_buffering[0];
-            }
-
-            total_dec_frame_buffering[1] = max_dec_frame_buffering[1] + DISPLAY_BUFFER_NUM;
-
-            mb_width = (mb_width+3) & 0xfffffffc;
-            mb_height = (mb_height+3) & 0xfffffffc;
-
-            dpb_size = mb_width * mb_height * 384;
-            ref_size = mb_width * mb_height * 96;
-
-            if(dbg_mode&0x1){
-                printk("dpb_size: 0x%x\n", dpb_size);
-                printk("ref_size: 0x%x\n", ref_size);
-                printk("total_dec_frame_buffering[1] : 0x%x\n", total_dec_frame_buffering[1]);
-                printk("max_reference_frame_num: 0x%x\n", max_reference_frame_num);
-            }
-            ref_start_addr[1] = dpb_start_addr[1] +
-                                (dpb_size * total_dec_frame_buffering[1]);
-            dpb_start_addr[2] = ref_start_addr[1] +
-                                (ref_size * (max_reference_frame_num+1));
-
-            if(dbg_mode&0x1){
-                printk("dpb_start_addr[1]: 0x%x\n", dpb_start_addr[1]);
-                printk("ref_start_addr[1]: 0x%x\n", ref_start_addr[1]);
-                printk("dpb_start_addr[2]: 0x%x\n", dpb_start_addr[2]);
-            }
-            if(dpb_start_addr[2] >= DECODE_BUFFER_END)
-            {
-               printk(" No enough memory for alloc view 1\n");
-               goto exit;
-            }
-
-            index = CANVAS_INDEX_START + total_dec_frame_buffering[0] * 3;
-            ANC_CANVAS_ADDR = ANC0_CANVAS_ADDR + total_dec_frame_buffering[0];
-
-            ret = init_canvas(dpb_start_addr[1], dpb_size, total_dec_frame_buffering[1], mb_width, mb_height, buffer_spec1);
-
-            if(ret == -1) {
-               printk(" Un-expected memory alloc problem\n");
-               goto exit;
-            }
-
-            WRITE_VREG(REF_START_VIEW_1, video_domain_addr(ref_start_addr[1]));
-            WRITE_VREG(MAILBOX_DATA_0,
-                (max_dec_frame_buffering[1] << 8) |
-                (total_dec_frame_buffering[1] << 0)
-              );
-            WRITE_VREG(MAILBOX_DATA_1, ref_size);
-            WRITE_VREG(MAILBOX_COMMAND, CMD_FINISHED);
-
-            if(dbg_mode&0x1){
-                printk("End H264 display buffer allocation for view 1\n");
-            }
-            if(frame_width == 0){
-                frame_width = mb_width<<4;
-            }
-            if(frame_height == 0){
-                frame_height = mb_height<<4;
-                if(frame_height == 1088) frame_height = 1080;
-            }
-            break;
-          case CMD_FRAME_DISPLAY:
-            ret = READ_VREG(MAILBOX_DATA_0);
-            display_buff_id = (ret >> 0) & 0x3f;
-            display_view_id = (ret >> 6) & 0x3;
-            drop_status = (ret >> 8) & 0x1;
-            display_POC = READ_VREG(MAILBOX_DATA_1);
-            stream_offset = READ_VREG(MAILBOX_DATA_2);
-//if (display_view_id == 0)
-//printk("view_id=%d,buff_id=%d,offset=%d, display_POC = %d,ret=0x%x\n", display_view_id, display_buff_id, stream_offset, display_POC, ret);
-            WRITE_VREG(MAILBOX_COMMAND, CMD_FINISHED);
-
-#ifdef DEBUG_SKIP
-            view_total++;
-            if (drop_status)
-                view_dropped++;
-#endif
-            if(dbg_mode&0x1){
-                printk(" H264 display frame ready -------------- View : %x, Buffer : %x\n", display_view_id, display_buff_id);
-                printk(" H264 display frame POC -------------- Buffer : %x, POC : %x\n", display_buff_id, display_POC);
-                printk("H264 display frame ready\n");
-            }
-            if(dbg_mode&0x10){
-                if((dbg_mode&0x20)==0){
-                    while(READ_VREG(BUFFER_RECYCLE) !=0) {}
-                    WRITE_VREG(BUFFER_RECYCLE, (display_view_id<<8)|(display_buff_id+1));
-                    display_buff_id = -1;
-                    display_view_id = -1;
-                    display_POC = -1;
-                }
-            }
-            else{
-            	unsigned char in_list_flag = 0;
-
-				int slot =0 ;
-				in_list_flag  =  check_in_list(display_POC ,&slot);
-
-				if(!in_list_flag){
-					if(display_view_id ==0){
-						vfpool_idx[fill_ptr].view0_buf_id = display_buff_id;
-						view0_vfbuf_use[display_buff_id]++;
-						vfpool_idx[fill_ptr].stream_offset = stream_offset ;
-
-					}
-					if(display_view_id == 1){
-						vfpool_idx[fill_ptr].view1_buf_id = display_buff_id;
-						view1_vfbuf_use[display_buff_id]++;
-					}
-					vfpool_idx[fill_ptr].slot = fill_ptr;
-					vfpool_idx[fill_ptr].display_pos = display_POC;
-					INCPTR(fill_ptr);
-				}else{
-					if(display_view_id ==0){
-						vfpool_idx[slot].view0_buf_id = display_buff_id;
-						view0_vfbuf_use[display_buff_id]++;
-						vfpool_idx[slot].stream_offset = stream_offset ;
-					}
-					if(display_view_id == 1){
-						vfpool_idx[slot].view1_buf_id = display_buff_id;
-						view1_vfbuf_use[display_buff_id]++;
-					}
-					vf = &vfpool[slot];
-					if (pts_lookup_offset(PTS_TYPE_VIDEO, vfpool_idx[slot].stream_offset, &vf->pts, 0) != 0) {
-                    	vf->pts = 0;
-                    }
-                    set_frame_info(vf);
-                    vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
-				}
-            }
-            break;
-          default : break;
-        }
-exit:
-#ifdef HANDLE_h264_4k2k_IRQ
-    return IRQ_HANDLED;
-#else
-    return;
-#endif
-}
-
-
-
-static void vh264_4k2k_put_timer_func(unsigned long arg)
-{
-    struct timer_list *timer = (struct timer_list *)arg;
-
-    while ((putting_ptr != put_ptr) && (READ_VREG(BUFFER_RECYCLE) == 0)) {
-    	int view0_buf_id = vfpool_idx[put_ptr].view0_buf_id;
-    	int view1_buf_id = vfpool_idx[put_ptr].view1_buf_id;
-		if(view0_vfbuf_use[view0_buf_id] == 1){
-			WRITE_VREG(BUFFER_RECYCLE, (0<<8)|( view0_buf_id +1));
-			view0_vfbuf_use[view0_buf_id] = 0;
-			vfpool_idx[put_ptr].view0_buf_id = -1;
-		}else if(view1_vfbuf_use[view1_buf_id] == 1){
-			 WRITE_VREG(BUFFER_RECYCLE, (1<<8)|( view1_buf_id +1));
-			 view1_vfbuf_use[view1_buf_id] = 0;
-			 vfpool_idx[put_ptr].display_pos = -1;
-			 vfpool_idx[put_ptr].view1_buf_id = -1;
-			 INCPTR(put_ptr);
-		}
-    }
-
-    timer->expires = jiffies + PUT_INTERVAL;
-
-    add_timer(timer);
-}
-
-int vh264_4k2k_dec_status(struct vdec_status *vstatus)
-{
-    vstatus->width = frame_width;
-    vstatus->height = frame_height;
-    if (frame_dur != 0) {
-        vstatus->fps = 96000 / frame_dur;
-    } else {
-        vstatus->fps = -1;
-    }
-    vstatus->error_count = READ_VREG(AV_SCRATCH_D);
-    vstatus->status = stat;
-    return 0;
-}
-
-int vh264_4k2k_set_trickmode(unsigned long trickmode)
-{
-    if (trickmode == TRICKMODE_I) {
-        WRITE_VREG(AV_SCRATCH_F, (READ_VREG(AV_SCRATCH_F) & 0xfffffffc) | 2);
-        trickmode_i = 1;
-    } else if (trickmode == TRICKMODE_NONE) {
-        WRITE_VREG(AV_SCRATCH_F, READ_VREG(AV_SCRATCH_F) & 0xfffffffc);
-        trickmode_i = 0;
-    }
-
-    return 0;
-}
-
-static void H264_DECODE_INIT(void)
-{
-    int i;
-    i = READ_VREG(DECODE_SKIP_PICTURE);
-
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-    WRITE_VREG(DOS_SW_RESET0, (1<<7) | (1<<6) | (1<<4));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-
-    WRITE_VREG(DOS_SW_RESET0, (1<<7) | (1<<6) | (1<<4));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    WRITE_VREG(DOS_SW_RESET0, (1<<9) | (1<<8));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-
-#else
-    WRITE_MPEG_REG(RESET0_REGISTER, RESET_IQIDCT | RESET_MC | RESET_VLD_PART);
-    READ_MPEG_REG(RESET0_REGISTER);
-    WRITE_MPEG_REG(RESET0_REGISTER, RESET_IQIDCT | RESET_MC | RESET_VLD_PART);
-    WRITE_MPEG_REG(RESET2_REGISTER, RESET_PIC_DC | RESET_DBLK);
-#endif
-
-
-    // Wait for some time for RESET
-    READ_VREG(DECODE_SKIP_PICTURE);
-    READ_VREG(DECODE_SKIP_PICTURE);
-
-    WRITE_VREG(DECODE_SKIP_PICTURE, i);
-
-    // fill_weight_pred
-    WRITE_VREG(MC_MPORT_CTRL, 0x0300);
-    for(i=0; i<192; i++) WRITE_VREG(MC_MPORT_DAT, 0x100);
-    WRITE_VREG(MC_MPORT_CTRL, 0);
-
-    WRITE_VREG(MB_WIDTH, 0xff); // invalid mb_width
-
-    // set slice start to 0x000000 or 0x000001 for check more_rbsp_data
-    WRITE_VREG(SLICE_START_BYTE_01, 0x00000000);
-    WRITE_VREG(SLICE_START_BYTE_23, 0x01010000);
-
-    WRITE_VREG(MPEG1_2_REG, 1); // set to mpeg2 to enable mismatch logic
-    WRITE_VREG(VLD_ERROR_MASK, 0x1011); // disable COEF_GT_64 , error_m4_table and voff_rw_err
-
-    // Config MCPU Amrisc interrupt
-    WRITE_VREG(ASSIST_AMR1_INT0, 0x1 ); // viu_vsync_int
-    WRITE_VREG(ASSIST_AMR1_INT1, 0x5 ); // mbox_isr
-    WRITE_VREG(ASSIST_AMR1_INT2, 0x8 ); // vld_isr
-    WRITE_VREG(ASSIST_AMR1_INT3, 0x15); // vififo_empty
-    WRITE_VREG(ASSIST_AMR1_INT4, 0xd ); // rv_ai_mb_finished_int
-    WRITE_VREG(ASSIST_AMR1_INT7, 0x14); // dcac_dma_done
-
-    // Config MCPU Amrisc interrupt
-    WRITE_VREG(ASSIST_AMR1_INT5, 0x9 ); // MCPU interrupt
-    WRITE_VREG(ASSIST_AMR1_INT6, 0x17); // CCPU interrupt
-
-    WRITE_VREG(CPC_P, 0xc00); // CCPU Code will start from 0xc00
-    WRITE_VREG(CINT_VEC_BASE, (0xc20>>5));
-#if 0
-    WRITE_VREG(POWER_CTL_VLD, READ_VREG(POWER_CTL_VLD) | (0 << 10) | (1 << 9) | (1 << 6));
-#else
-    WRITE_VREG(
-      POWER_CTL_VLD,
-      (
-        (1<<10) | // disable cabac_step_2
-        (1<<9)  | // viff_drop_flag_en
-        (1<<6)    // h264_000003_en
-      )
-    );
-#endif
-    WRITE_VREG(M4_CONTROL_REG, (1<<13));  // H264_DECODE_INFO - h264_en
-
-    WRITE_VREG(CANVAS_START , CANVAS_INDEX_START);
-#if 1
-    WRITE_VREG(WORKSPACE_START, video_domain_addr(work_space_adr)); // Start Address of Workspace (UCODE, temp_data...)
-#else
-    WRITE_VREG(WORKSPACE_START, 0x05000000); // Start Address of Workspace (UCODE, temp_data...)
-#endif
-    WRITE_VREG(SPS_STATUS, 0); // Clear all sequence parameter set available
-    WRITE_VREG(PPS_STATUS, 0); // Clear all picture parameter set available
-    WRITE_VREG(CURRENT_UCODE, 0xff); // Set current microcode to NULL
-    WRITE_VREG(CURRENT_SPS_PPS, 0xffff); // Set current SPS/PPS to NULL
-    WRITE_VREG(DECODE_STATUS, 1); // Set decode status to DECODE_START_HEADER
-}
-
-static void vh264_4k2k_prot_init(void)
-{
-    while (READ_VREG(DCAC_DMA_CTRL) & 0x8000) {
-        ;
-    }
-    while (READ_VREG(LMEM_DMA_CTRL) & 0x8000) {
-        ;    // reg address is 0x350
-    }
-    /* clear mailbox interrupt */
-    WRITE_VREG(ASSIST_MBOX1_CLR_REG, 1);
-
-    /* enable mailbox interrupt */
-    WRITE_VREG(ASSIST_MBOX1_MASK, 1);
-
-    /* disable PSCALE for hardware sharing */
-    WRITE_VREG(PSCALE_CTRL, 0);
-
-    H264_DECODE_INIT();
-
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-    WRITE_VREG(DOS_SW_RESET0, (1<<11));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-
-#else
-    WRITE_MPEG_REG(RESET0_REGISTER, 0x80); // RESET MCPU
-#endif
-
-    WRITE_VREG(MAILBOX_COMMAND, 0);
-    WRITE_VREG(BUFFER_RECYCLE, 0);
-    WRITE_VREG(DROP_CONTROL, 0);
-    CLEAR_VREG_MASK(MDEC_PIC_DC_CTRL, 1<<17);
-}
-
-static void vh264_4k2k_local_init(void)
-{
-	int i;
-    display_buff_id = -1;
-    display_view_id = -1;
-    display_POC = -1;
-    no_dropping_cnt = 0;
-
-#ifdef DEBUG_PTS
-    pts_missed = 0;
-    pts_hit = 0;
-#endif
-
-#ifdef DEBUG_SKIP
-    view_total = 0;
-    view_dropped = 0;
-#endif
-
-    //vh264_4k2k_ratio = vh264_4k2k_amstream_dec_info.ratio;
-    vh264_4k2k_ratio = 0x100;
-
-    //frame_width = vh264_4k2k_amstream_dec_info.width;
-    //frame_height = vh264_4k2k_amstream_dec_info.height;
-    frame_dur = vh264_4k2k_amstream_dec_info.rate;
-    if(frame_dur == 0){
-        frame_dur = 96000/24;
-    }
-
-    pts_outside = ((u32)vh264_4k2k_amstream_dec_info.param) & 0x01;
-    sync_outside = ((u32)vh264_4k2k_amstream_dec_info.param & 0x02) >> 1;
-
-    /**/
-    dpb_start_addr[0] = -1;
-    dpb_start_addr[1] = -1;
-    max_dec_frame_buffering[0] = -1;
-    max_dec_frame_buffering[1] = -1;
-	fill_ptr = get_ptr = put_ptr = putting_ptr = 0;
-	for (i = 0; i < DECODE_BUFFER_NUM_MAX; i++) {
-        view0_vfbuf_use[i] = 0;
-        view1_vfbuf_use[i] = 0;
-    }
-
-    for(i=0 ;i < VF_POOL_SIZE ; i++){
-    	vfpool_idx[i].display_pos = -1;
-    	vfpool_idx[i].view0_buf_id = -1;
-    	vfpool_idx[i].view1_buf_id = -1;
-	}
-    init_vf_buf();
-    return;
-}
-
-static s32 vh264_4k2k_init(void)
-{
-    void __iomem *p = ioremap_nocache(work_space_adr, work_space_size);
-
-    if (!p) {
-        printk("\nvh264_4k2k_init: Cannot remap ucode swapping memory\n");
-        return -ENOMEM;
-    }
-
-    printk("\nvh264_4k2k_init\n");
-    init_timer(&recycle_timer);
-
-    stat |= STAT_TIMER_INIT;
-
-    vh264_4k2k_local_init();
-
-    amvdec_enable();
-
-    if (amvdec_loadmc(vh264_4k2k_mc) < 0) {
-        amvdec_disable();
-        return -EBUSY;
-    }
-
-    memcpy(p,
-           vh264_4k2k_header_mc, sizeof(vh264_4k2k_header_mc));
-
-    memcpy((void *)((ulong)p + 0x1000),
-           vh264_4k2k_mmco_mc, sizeof(vh264_4k2k_mmco_mc));
-
-    memcpy((void *)((ulong)p + 0x3000),
-           vh264_4k2k_slice_mc, sizeof(vh264_4k2k_slice_mc));
-
-    iounmap(p);
-
-    stat |= STAT_MC_LOAD;
-
-    /* enable AMRISC side protocol */
-    vh264_4k2k_prot_init();
-
-#ifdef HANDLE_h264_4k2k_IRQ
-    if (request_irq(INT_VDEC, vh264_4k2k_isr,
-                    IRQF_SHARED, "vh264_4k2k-irq", (void *)vh264_4k2k_dec_id)) {
-        printk("vh264_4k2k irq register error.\n");
-        amvdec_disable();
-        return -ENOENT;
-    }
-#endif
-
-    stat |= STAT_ISR_REG;
-
-    vf_provider_init(&vh264_4k2k_vf_prov, PROVIDER_NAME, &vh264_4k2k_vf_provider, NULL);
-    vf_reg_provider(&vh264_4k2k_vf_prov);
-    vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_START,NULL);
-
-    stat |= STAT_VF_HOOK;
-
-    recycle_timer.data = (ulong) & recycle_timer;
-    recycle_timer.function = vh264_4k2k_put_timer_func;
-    recycle_timer.expires = jiffies + PUT_INTERVAL;
-
-    add_timer(&recycle_timer);
-
-    stat |= STAT_TIMER_ARM;
-
-    amvdec_start();
-
-    stat |= STAT_VDEC_RUN;
-
-    set_vdec_func(&vh264_4k2k_dec_status);
-    //set_trickmode_func(&vh264_4k2k_set_trickmode);
-
-    return 0;
-}
-
-static int vh264_4k2k_stop(void)
-{
-    if (stat & STAT_VDEC_RUN) {
-        amvdec_stop();
-        stat &= ~STAT_VDEC_RUN;
-    }
-
-    if (stat & STAT_ISR_REG) {
-        WRITE_VREG(ASSIST_MBOX1_MASK, 0);
-#ifdef HANDLE_h264_4k2k_IRQ
-        free_irq(INT_VDEC,
-                 (void *)vh264_4k2k_dec_id);
-#endif
-        stat &= ~STAT_ISR_REG;
-    }
-
-    if (stat & STAT_TIMER_ARM) {
-        del_timer_sync(&recycle_timer);
-        stat &= ~STAT_TIMER_ARM;
-    }
-
-    if (stat & STAT_VF_HOOK) {
-        ulong flags;
-        spin_lock_irqsave(&lock, flags);
-        spin_unlock_irqrestore(&lock, flags);
-        vf_unreg_provider(&vh264_4k2k_vf_prov);
-        stat &= ~STAT_VF_HOOK;
-    }
-
-    amvdec_disable();
-
-    uninit_vf_buf();
-    return 0;
-}
-
-static void error_do_work(struct work_struct *work)
-{
-    if (atomic_read(&vh264_4k2k_active)) {
-        vh264_4k2k_stop();
-        vh264_4k2k_init();
-    }
-}
-
-static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
-{
-    struct resource *mem;
-    int buf_size;
-
-    printk("amvdec_h264_4k2k probe start.\n");
-
-    if (!(mem = platform_get_resource(pdev, IORESOURCE_MEM, 0))) {
-        printk("\namvdec_h264_4k2k memory resource undefined.\n");
-        return -EFAULT;
-    }
-
-    buf_size = mem->end - mem->start + 1;
-    //buf_offset = mem->start - DEF_BUF_START_ADDR;
-    work_space_adr = mem->start;
-    DECODE_BUFFER_START = work_space_adr + work_space_size;
-    DECODE_BUFFER_END = mem->start + buf_size;
-
-    printk("work_space_adr %x, DECODE_BUFFER_START %x, DECODE_BUFFER_END %x\n", work_space_adr, DECODE_BUFFER_START, DECODE_BUFFER_END);
-    memcpy(&vh264_4k2k_amstream_dec_info, (void *)mem[1].start, sizeof(vh264_4k2k_amstream_dec_info));
-
-    if (vh264_4k2k_init() < 0) {
-        printk("\namvdec_h264_4k2k init failed.\n");
-
-        return -ENODEV;
-    }
-
-    INIT_WORK(&error_wd_work, error_do_work);
-
-    atomic_set(&vh264_4k2k_active, 1);
-
-    printk("amvdec_h264_4k2k probe end.\n");
-
-    return 0;
-}
-
-static int amvdec_h264_4k2k_remove(struct platform_device *pdev)
-{
-    printk("amvdec_h264_4k2k_remove\n");
-    vh264_4k2k_stop();
-
-    atomic_set(&vh264_4k2k_active, 0);
-
-#ifdef DEBUG_PTS
-    printk("pts missed %ld, pts hit %ld, pts_outside %d, duration %d, sync_outside %d\n",
-           pts_missed, pts_hit, pts_outside, frame_dur, sync_outside);
-#endif
-
-#ifdef DEBUG_SKIP
-    printk("view_total = %ld, dropped %ld\n", view_total, view_dropped);
-#endif
-
-    return 0;
-}
-
-/****************************************/
-
-static struct platform_driver amvdec_h264_4k2k_driver = {
-    .probe   = amvdec_h264_4k2k_probe,
-    .remove  = amvdec_h264_4k2k_remove,
-#ifdef CONFIG_PM
-    .suspend = amvdec_suspend,
-    .resume  = amvdec_resume,
-#endif
-    .driver  = {
-        .name = DRIVER_NAME,
-    }
-};
-
-static int __init amvdec_h264_4k2k_driver_init_module(void)
-{
-    printk("amvdec_h264_4k2k module init\n");
-
-    if (platform_driver_register(&amvdec_h264_4k2k_driver)) {
-        printk("failed to register amvdec_h264_4k2k driver\n");
-        return -ENODEV;
-    }
-
-    return 0;
-}
-
-static void __exit amvdec_h264_4k2k_driver_remove_module(void)
-{
-    printk("amvdec_h264_4k2k module remove.\n");
-
-    platform_driver_unregister(&amvdec_h264_4k2k_driver);
-}
-
-/****************************************/
-
-#if 0
-module_param(stat, uint, 0664);
-MODULE_PARM_DESC(stat, "\n amvdec_h264_4k2k stat \n");
-
-module_param(dbg_mode, uint, 0664);
-MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264_4k2k dbg mode \n");
-
-module_param(view_mode, uint, 0664);
-MODULE_PARM_DESC(view_mode, "\n amvdec_h264_4k2k view mode \n");
-
-module_param(dbg_cmd, uint, 0664);
-MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264_4k2k cmd mode \n");
-
-module_param(drop_rate, uint, 0664);
-MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264_4k2k drop rate \n");
-
-#endif
-
-module_init(amvdec_h264_4k2k_driver_init_module);
-module_exit(amvdec_h264_4k2k_driver_remove_module);
-
-MODULE_DESCRIPTION("AMLOGIC h264_4k2k Video Decoder Driver");
-MODULE_LICENSE("GPL");
-MODULE_AUTHOR("Tim Yao <tim.yao@amlogic.com>");
-
-
diff --git a/drivers/amlogic/amports/m8m2/Makefile b/drivers/amlogic/amports/m8m2/Makefile
deleted file mode 100755
index 40d685b1c983..000000000000
--- a/drivers/amlogic/amports/m8m2/Makefile
+++ /dev/null
@@ -1,4 +0,0 @@
-
-obj-y                           += vdec_clk.o
-
-obj-y				+= ucode/
diff --git a/drivers/amlogic/amports/m8m2/ucode/Makefile b/drivers/amlogic/amports/m8m2/ucode/Makefile
deleted file mode 100755
index 9294d6489f7b..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/Makefile
+++ /dev/null
@@ -1,14 +0,0 @@
-
-obj-$(CONFIG_AM_VDEC_MPEG12) += mpeg12/
-obj-$(CONFIG_AM_VDEC_MPEG4) += mpeg4/
-obj-$(CONFIG_AM_VDEC_VC1) += vc1/
-obj-$(CONFIG_AM_VDEC_H264) += h264/
-obj-$(CONFIG_AM_VDEC_H265) += h265/
-obj-$(CONFIG_AM_VDEC_H264MVC) += h264mvc/
-obj-$(CONFIG_AM_VDEC_MJPEG) += mjpeg/
-obj-$(CONFIG_AM_VDEC_REAL) += real/
-obj-$(CONFIG_AM_JPEGDEC) += jpeg/
-obj-$(CONFIG_AM_VDEC_H264_4K2K) += h264_4k2k/
-obj-$(CONFIG_AM_ENCODER) += encoder/
-obj-$(CONFIG_AM_JPEG_ENCODER) += jpegenc/
-obj-$(CONFIG_AM_VDEC_AVS) += avs/
diff --git a/drivers/amlogic/amports/m8m2/ucode/avs b/drivers/amlogic/amports/m8m2/ucode/avs
deleted file mode 120000
index cd7f2e5c1c81..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/avs
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/avs
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/Makefile b/drivers/amlogic/amports/m8m2/ucode/encoder/Makefile
deleted file mode 100755
index fb2033b368dd..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/Makefile
+++ /dev/null
@@ -1,2 +0,0 @@
-
-obj-y				+= encoder_mc.o 
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c b/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
deleted file mode 100755
index 04c9f78590c0..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/encoder_mc.c
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * AMLOGIC Audio/Video streaming port driver.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the named License,
- * or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
- *
- * Author:  Brian Zhu <brian.zhu@amlogic.com>
- *
- */
-
-#include <linux/types.h>
-
-#define MicroCode mix_dump_mc
-#include "h264_enc_mix_dump.h"
-
-#undef MicroCode
-#define MicroCode half_encoder_mc
-#include "half_encoder_linux.h"
-
-#undef MicroCode
-#define MicroCode mix_sw_mc
-#include "h264_enc_mix_sw.h"
-
-
-#undef MicroCode
-#define MicroCode mix_sw_mc_hdec_m2_dblk
-#include "h264_enc_mix_sw_hdec_m2_dblk.h"
-
-#undef MicroCode
-#define MicroCode mix_dump_mc_dblk
-#include "h264_enc_mix_dump_dblk.h"
-
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h
deleted file mode 100755
index 7c3daa3b02c9..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump.h
+++ /dev/null
@@ -1,302 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc000980,0x0000000,0xc018440,0x0000000,
-	0xc000e40,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
-	0xc7a4dc0,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0xc7967c0,0x0000000,0xc780980,0x0000000,0xc78d780,0x64d3008,0xc796800,0x0000000,
-	0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,0x0000000,0x64ac808,
-	0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,0x64ac708,
-	0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c01008,0xcc00000,
-	0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,
-	0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,0x64ac008,0xaa0c048,
-	0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,0x0000000,0x80d5c00,
-	0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,0x7c00ac9,0x7c00b09,
-	0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,0x7c00889,0x7c008c9,
-	0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785380,0xa6080c8,0xc782e00,0xa608348,
-	0xc797f80,0xa608388,0xc79ac00,0xc789cc0,0x0000000,0xc07ee80,0x0000000,0x6bc0008,
-	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
-	0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,
-	0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,0x80d2100,0x7800148,
-	0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,0x4404208,0xc07eb00,
-	0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,
-	0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,
-	0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x9004248,
-	0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,0x5801249,0x80d1f30,
-	0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,0xc07e140,0x60d2109,
-	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc788840,0x8007801,0xc07da00,
-	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,0x80d1f20,0xc07d900,
-	0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,
-	0xc008080,0x441a208,0xc07d640,0x60d2108,0xc007f80,0x6800008,0xc07d540,0x60d2108,
-	0xc07d4c0,0x80d2100,0x80d1f30,0x80d5501,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,
-	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
-	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
-	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0xc787400,0x8007801,
-	0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,0x9210289,0x400f28a,
-	0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,0xc014000,0x0000000,
-	0x6498e08,0x9c08788,0x6098e08,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,
-	0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,
-	0xc014480,0x0000000,0xc013a80,0x0000000,0xc07bcc0,0x0000000,0x64f4908,0x9c08048,
-	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,
-	0xc07bac0,0x60d2108,0xc07ba40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,
-	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,
-	0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
-	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
-	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07b180,0x80d2100,0x7800148,
-	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af00,
-	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
-	0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc005540,0x2408248,0xc07ab00,
-	0x60d2108,0x80d3d00,0xc07aa40,0x80d2100,0x80d5500,0xc07a980,0x80d2100,0xc07a900,
-	0x80d2100,0x64acd08,0x60f4208,0xc0053c0,0x0000000,0x680e703,0x6817204,0x80d300f,
-	0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,
-	0x60d0008,0x64acf08,0x60f4808,0x6800289,0x7801008,0x9485248,0x60f4009,0x80ac005,
-	0xc784b80,0x8030502,0xc012640,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc0119c0,
-	0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,
-	0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc011f00,0x0000000,
-	0xc011500,0x0000000,0xc079740,0x0000000,0x64d3109,0x9010209,0x400f208,0x5804208,
-	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
-	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,0x8098000,
-	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
-	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,
-	0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,
-	0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,0x9808008,
-	0x60f4908,0x7801009,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,0x9808788,
-	0x9808748,0x9808688,0x9808648,0x9808608,0x9c08288,0x9c08248,0x98081c8,0x9808088,
-	0x9808048,0x60f4908,0x4801249,0xaa10049,0x0000000,0xc7810c0,0x0000000,0x6800c08,
-	0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800008,0x6800009,
-	0x9508209,0x680c0c8,0x6c00008,0x60f5808,0x6800388,0x6800489,0x9508209,0x6800149,
-	0x9604209,0x68000c9,0x9684209,0x6800109,0x9704209,0x6800089,0x9704209,0x60f5a08,
-	0x6800008,0x6800009,0x9508209,0x6800809,0x9608209,0x6801409,0x9708209,0x60f5b08,
-	0x6800608,0x6801409,0x9508209,0x6800809,0x9608209,0x6801809,0x9708209,0x60f5d08,
-	0x68000c8,0x6801809,0x948c209,0x6800449,0x9607209,0x6800009,0x96e1209,0x6800c09,
-	0x9708209,0x60f5e08,0x68000c8,0x6800009,0x9461209,0x6800049,0x9481209,0x6800009,
-	0x94a2209,0x6803009,0x950c209,0x6801c09,0x968c209,0x60f5f08,0xc780380,0x0000000,
-	0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800c08,
-	0x6801009,0x9508209,0x680c0c8,0x6c0c0c8,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
-	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,
-	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077140,0x60d2108,
-	0xc0770c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
-	0xc076ec0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,
-	0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
-	0x80d1f20,0x80d1f20,0x80d1f20,0x64ad209,0x9008209,0x7c00e48,0x9108209,0x7c00e08,
-	0xc013880,0x7c005c8,0x60f1d0b,0x6800015,0x64ad308,0x9008248,0x7c00c09,0x9108248,
-	0x7c00c49,0x9208248,0x7c00c89,0x9308248,0x7c00cc9,0x64ad408,0x9008248,0x7c00d09,
-	0x9108248,0x7c00d49,0x9208248,0x7c00d89,0x9308248,0x7c00dc9,0xc013300,0x7800e08,
-	0x60f1d0b,0x780034a,0x960f24a,0x60f1e09,0x7800049,0xc000b40,0x2408248,0xc076100,
-	0x60d2108,0x80d3d00,0x80d5300,0xc076000,0x80d2101,0x80d5501,0x6803fc8,0x6ffffc8,
-	0x60f4208,0xc001900,0x0000000,0x68119c3,0x6817fc4,0x6800008,0x6c00448,0x60d3008,
-	0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,
-	0x9808048,0x9808088,0x98080c8,0x9808188,0x9808148,0x98081c8,0x60d0008,0x6800048,
-	0x7800309,0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,
-	0xc7f5000,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
-	0xcc00000,0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,
-	0x680000b,0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,
-	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,
-	0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
-	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,
-	0x680800d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,
-	0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,
-	0x60d3919,0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,
-	0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800019,0x6c00019,
-	0x4000699,0x6800009,0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,
-	0x740039b,0x400138e,0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,
-	0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,
-	0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,
-	0xbef804d,0x0000000,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,
-	0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,
-	0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,
-	0x60d4d1e,0x60d4a1b,0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,
-	0xcc00000,0x0000000,0x680000e,0xa817388,0x64d370e,0x4000216,0x64d5c16,0x2408216,
-	0x7c00408,0x4000217,0x64d5d17,0x2408217,0x7c00448,0x64d3e25,0x9104965,0x64d3b23,
-	0x64d3c24,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,
-	0xcb80003,0x64d390f,0xc7f2380,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,
-	0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,
-	0xaa1c249,0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,
-	0x80d3603,0x80d3604,0x80d3605,0x80d3606,0x80d360f,0xc013040,0x0000000,0xc013c00,
-	0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,
-	0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,
-	0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,
-	0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,
-	0xc7f1400,0x961064f,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,
-	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,
-	0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
-	0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,
-	0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
-	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb848248,0x4001208,0x920c210,0x7800349,
-	0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa43d288,
-	0x6800008,0xc010480,0x0000000,0x80ac00d,0xc7f0500,0x8030502,0x80d3000,0x80d1f30,
-	0x6bc0008,0x60d1f08,0x7800308,0x5401208,0x6804009,0x2009248,0x680000a,0x740024a,
-	0x4001249,0x740024a,0xc011b40,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
-	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
-	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
-	0xc008880,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,
-	0x80d3300,0x80ac009,0xc7ef780,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,
-	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,
-	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
-	0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fdac0,0x680c00a,0x64d4a11,
-	0x64d4b12,0x64d4c13,0x64d4d14,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x78006c9,
-	0xa62c009,0x60d3919,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
-	0x6800009,0x6c00009,0x60d3a09,0x80d3607,0x80d3601,0x80d3608,0x64d340a,0x91c128a,
-	0xaaf800a,0x80d4800,0x64d3533,0x64d4923,0x64d4924,0x64d4925,0x64d4926,0x64d4927,
-	0x64d4928,0x64d4929,0x64d492a,0x64d492b,0x64d492c,0x64d492d,0x64d492e,0x64d492f,
-	0x64d4930,0x64d4931,0x64d4932,0x80d5201,0x80d3609,0x80d3604,0x6800008,0x7c00748,
-	0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,
-	0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,
-	0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800448,0x7800649,
-	0x680000a,0xa436289,0x78006c9,0x780030a,0xb433289,0x7800c09,0xb819248,0x78005cb,
-	0x7800e4c,0xb42e30b,0x7800c49,0x40012cb,0xb40c30b,0xb80b248,0x7800c89,0x40012cb,
-	0xb40830b,0xb807248,0x7800cc9,0x40012cb,0xb40430b,0xb803248,0x0000000,0x40012cb,
-	0x78005cc,0x240a30b,0x540128a,0xc009c80,0x440128a,0xc780980,0x0000000,0x7800e0c,
-	0xb01730b,0x7800d09,0xac0f248,0x7800d49,0x44012cb,0xb00c30b,0xac0b248,0x7800d89,
-	0x44012cb,0xb00830b,0xac07248,0x7800dc9,0x44012cb,0xb00430b,0xac03248,0x0000000,
-	0x44012cb,0x78005cc,0x240a2cc,0xc009680,0x540128a,0xc780380,0x0000000,0xaa2c015,
-	0x0000000,0x64d3e08,0x9008208,0xaaf7fc8,0xa618008,0x78005c8,0x2408548,0xc00a4c0,
-	0x7c005c8,0x60f1d0b,0x6800015,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,
-	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,
-	0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,
-	0x7c00749,0x80d3606,0x80d360f,0xc00dac0,0x0000000,0xc00f1c0,0x0000000,0x78006c8,
-	0xaa10008,0x680bfca,0xc001180,0x4401208,0x78006c8,0x7800309,0xb836248,0x0000000,
-	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,
-	0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,
-	0xa410289,0xc00c900,0x0000000,0x80ac00e,0xc7ebf00,0x8030502,0x64d5309,0xaa1c009,
-	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fb800,0x0000000,
-	0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,
-	0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001840,0x680c00a,0x60d4a1b,0x60d4b1c,
-	0x60d4c1d,0x60d4d1e,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,
-	0xb004248,0xc0009c0,0x78006d1,0x680c50a,0xc001440,0x0000000,0xc7eb480,0x0000000,
-	0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,
-	0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,
-	0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,
-	0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,
-	0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,0x780028f,
-	0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
-	0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,
-	0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
-	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
-	0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,0x400128a,
-	0x7000289,0x9610689,0x400128a,0x700029b,0x400128a,0x7000289,0x96106c9,0x400128a,
-	0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,
-	0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,0xcc00000,0x9610789,0x64d1602,
-	0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e9900,0x0000000,0xcb80004,0x64f1f08,
-	0x9361248,0xaa10009,0x9042248,0xc7e9740,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,
-	0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb812248,
-	0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,
-	0x64ad50b,0x90102cb,0xa4072cc,0x0000000,0x64f010a,0x980a20a,0x60f010a,0xc7e9040,
-	0x0000000,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,
-	0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,0x7800248,
-	0xaa0c008,0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7e8ac0,0x0000000,0x64f4b08,
-	0x9384248,0xaa10009,0x64f4a08,0xc7e8940,0x0000000,0x920c248,0x780034a,0xb40e289,
-	0x4001249,0x64d330a,0x910828a,0x240b289,0x64ad50a,0x921028a,0xa80728b,0x5410209,
-	0x60f4a08,0x6800048,0x7800309,0x948c209,0x60f4b08,0xc7e84c0,0x0000000,0x64ac11f,
-	0x80ac102,0x80ac200,0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,
-	0x6800008,0x6094008,0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,
-	0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,
-	0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
-	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,
-	0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,
-	0xcc00000,0x0000000,0xc000600,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,
-	0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,
-	0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,
-	0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,
-	0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x6490b08,0x9808008,
-	0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x64f4908,0x9c08048,0x60f4908,
-	0x6401108,0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,
-	0x6001008,0x80f4209,0x64f4308,0x9808088,0x60f4308,0x9808048,0x9c08088,0x98080c8,
-	0x60f4308,0x64f1508,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9c08448,0x9c08488,
-	0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808508,0x98084c8,
-	0x9808748,0x9808488,0x9808448,0x9808348,0x9808308,0x9c08248,0x9c08008,0x60f1508,
-	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
-	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,
-	0xaa0c048,0x6a10408,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,
-	0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc066140,0x60d2108,
-	0xc0660c0,0x80d2107,0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
-	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
-	0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc065b00,
-	0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
-	0x7800248,0xa610008,0x78001c8,0xc065800,0x60d2108,0x7800108,0x7800209,0x680040a,
-	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,
-	0x80d1f20,0x64f1c08,0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc002300,0x9206208,
-	0x60f1c0b,0x64ad008,0x9206208,0x7800049,0xc06fb80,0x2408248,0xc065140,0x60d2108,
-	0xc0650c0,0x80d2100,0x80d5500,0xc065000,0x80d2100,0xc064f80,0x80d2100,0xc06fac0,
-	0x0000000,0x680e703,0x6817204,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,
-	0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,
-	0x9c08048,0x60d0008,0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,
-	0xc7ef180,0x8030502,0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,
-	0x6090b08,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,
-	0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x64d3308,0x9108248,
-	0x960c209,0x6800009,0x9504209,0xc7eab40,0x60f4a08,0x400030a,0x400034b,0xc0010c0,
-	0x400020b,0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,
-	0xae24049,0x80f2308,0x78005c8,0x2408548,0xc000d80,0x7c005c8,0x60f1d0b,0xcc00000,
-	0x6800015,0x64f2408,0x91e2208,0xaa1c048,0xaad0015,0x4401249,0xa613fce,0x64d3e08,
-	0xc7ffc00,0x9008388,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xa6f7fc8,0x0000000,
-	0x60f1d0b,0x7800a08,0xaa4c288,0xaa48015,0x64d3e08,0x9008208,0xa63c008,0x78005c8,
-	0x2408548,0x7c005c8,0x6800015,0x240820d,0xaa24008,0x680000c,0xba14008,0x6800009,
-	0x5401208,0xc780100,0x4401308,0x240c209,0x540130c,0x64d3508,0x908c208,0x4001208,
-	0x7800309,0xb003248,0x0000000,0x6800008,0x7c00688,0x7c0064c,0x78005c8,0x241520d,
-	0xcc00000,0x7c005cd,0x5401248,0x2009209,0x681e1ca,0x2009289,0xcb80009,0x680000b,
-	0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,
-	0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,
-	0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,
-	0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,
-	0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,
-	0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,
-	0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,
-	0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,
-	0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,
-	0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,
-	0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,
-	0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,
-	0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,
-	0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,
-	0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,
-	0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,
-	0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,
-	0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,
-	0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,
-	0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,
-	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc078d00,0x0000000,
-	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
-	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x7800709,
-	0x4001249,0x780030a,0x400128a,0xe00024a,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,
-	0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,
-	0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,
-	0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,
-	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,
-	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc077cc0,
-	0x0000000,0x80d3000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x78006c8,0xa60c008,
-	0x4401208,0x7800308,0x5401208,0x6804009,0x2009248,0x780040a,0x700024b,0x948c2ca,
-	0x740024b,0x4001249,0x780044a,0x740024a,0x78006c8,0xaa0c008,0xcc00000,0x0000000,
-	0x7800708,0xaaf4008,0x0000000,0xc000100,0x0000000,0xcc00000,0x0000000,0x6435008,
-	0x580f208,0xbef8048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,0x5401249,
-	0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,0x6a04008,
-	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,
-	0x5401248,0x680400a,0x2009289,0x7400265,0x483f208,0x5402208,0x6808009,0x2009248,
-	0x7400263,0x4001249,0x92108e3,0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,
-	0x7400264,0x4001249,0x78006c8,0x7800309,0xb405248,0x483f208,0xaa0cfc8,0xcc00000,
-	0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,0x6035108,0x6804009,
-	0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,0x6435008,0x580f208,
-	0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,0x680400a,0x2009289,
-	0x7400273,0x4807208,0x5405208,0x6808009,0x2009248,0x7400263,0x4001249,0x92108e3,
-	0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,0x4001249,0x7400265,
-	0x4001249,0x9210965,0x7400265,0x4001249,0x7400266,0x4001249,0x92109a6,0x7400266,
-	0x4001249,0x7400267,0x4001249,0x92109e7,0x7400267,0x4001249,0x7400268,0x4001249,
-	0x9210a28,0x7400268,0x4001249,0x7400269,0x4001249,0x9210a69,0x7400269,0x4001249,
-	0x740026a,0x4001249,0x9210aaa,0x740026a,0x4001249,0x740026b,0x4001249,0x9210aeb,
-	0x740026b,0x4001249,0x740026c,0x4001249,0x9210b2c,0x740026c,0x4001249,0x740026d,
-	0x4001249,0x9210b6d,0x740026d,0x4001249,0x740026e,0x4001249,0x9210bae,0x740026e,
-	0x4001249,0x740026f,0x4001249,0x9210bef,0x740026f,0x4001249,0x7400270,0x4001249,
-	0x9210c30,0x7400270,0x4001249,0x7400271,0x4001249,0x9210c71,0x7400271,0x4001249,
-	0x7400272,0x4001249,0x9210cb2,0x7400272,0x4001249,0x78006c8,0x7800309,0xb405248,
-	0x4807208,0xaa0c1c8,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
-	0x64ad708,0x6035108,0x6804009,0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,
-	0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x6432434,
-	0xaa0c034,0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,
-	0x0000000,0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h
deleted file mode 100755
index 419d5a444fe0..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_dump_dblk.h
+++ /dev/null
@@ -1,300 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc000980,0x0000000,0xc0181c0,0x0000000,
-	0xc000e40,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
-	0xc7a4980,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0xc796540,0x0000000,0xc780980,0x0000000,0xc78d500,0x64d3008,0xc796580,0x0000000,
-	0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,0x0000000,0x64ac808,
-	0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,0x64ac708,
-	0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,0x7c01008,0xcc00000,
-	0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,
-	0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,0x64ac008,0xaa0c048,
-	0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,0x0000000,0x80d5c00,
-	0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,0x7c00ac9,0x7c00b09,
-	0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,0x7c00889,0x7c008c9,
-	0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc7851c0,0xa6080c8,0xc782e00,0xa608348,
-	0xc797d00,0xa608388,0xc79a7c0,0xc789a40,0x0000000,0xc07ee80,0x0000000,0x6bc0008,
-	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
-	0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,
-	0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,0x80d2100,0x7800148,
-	0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,0x4404208,0xc07eb00,
-	0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,
-	0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,
-	0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x9004248,
-	0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,0x5801249,0x80d1f30,
-	0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,0xc07e140,0x60d2109,
-	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc7885c0,0x8007801,0xc07da00,
-	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,0x80d1f20,0xc07d900,
-	0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,0x80d1f40,0x7800048,
-	0xc007e00,0x441a208,0xc07d640,0x60d2108,0xc007d00,0x6800008,0xc07d540,0x60d2108,
-	0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,0x80d1f30,0x6bc0008,
-	0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
-	0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x64d1b08,
-	0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,0xc787180,0x8007801,
-	0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,0x9210289,0x400f28a,
-	0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,0xc013d80,0x0000000,
-	0x6498e08,0x9c08788,0x6098e08,0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401108,
-	0x9c08748,0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,
-	0xc014200,0x0000000,0xc013800,0x0000000,0xc07bcc0,0x0000000,0x64f4908,0x9c08048,
-	0x60f4908,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,
-	0xc07bac0,0x60d2108,0xc07ba40,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,
-	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x6800008,
-	0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
-	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
-	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07b180,0x80d2100,0x7800148,
-	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af00,
-	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
-	0x80d1f20,0x80d1f20,0x64f1c08,0x9206208,0x7800049,0xc0052c0,0x2408248,0xc07ab00,
-	0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc005300,0x0000000,0x680e483,0x6816f84,
-	0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,0x9c08188,
-	0x9c081c8,0x60d0008,0x64acf08,0x60f4808,0x6800289,0x7801008,0x9485248,0x60f4009,
-	0x80ac005,0xc784ac0,0x8030502,0xc012580,0x0000000,0x64f4008,0x9c08048,0x60f4008,
-	0xc011900,0x0000000,0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,
-	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0xc011e40,
-	0x0000000,0xc011440,0x0000000,0xc079900,0x0000000,0x64d3109,0x9010209,0x400f208,
-	0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,
-	0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,
-	0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,
-	0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,
-	0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,
-	0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x64f4908,0x9c08048,0x9c081c8,
-	0x9808008,0x60f4908,0x7801009,0x5805249,0x96e1209,0x5801249,0x9761209,0x98087c8,
-	0x9808788,0x9808748,0x9808688,0x9808648,0x9808608,0x9c08288,0x9c08248,0x98081c8,
-	0x9808088,0x9808048,0x60f4908,0x4801249,0xaa10049,0x0000000,0xc7810c0,0x0000000,
-	0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,0x6800008,
-	0x6800009,0x9508209,0x680c0c8,0x6c00008,0x60f5808,0x6800388,0x6800489,0x9508209,
-	0x6800149,0x9604209,0x68000c9,0x9684209,0x6800109,0x9704209,0x6800089,0x9704209,
-	0x60f5a08,0x6800008,0x6800009,0x9508209,0x6800809,0x9608209,0x6801409,0x9708209,
-	0x60f5b08,0x6800608,0x6801409,0x9508209,0x6800809,0x9608209,0x6801809,0x9708209,
-	0x60f5d08,0x68000c8,0x6801809,0x948c209,0x6800449,0x9607209,0x6800009,0x96e1209,
-	0x6800c09,0x9708209,0x60f5e08,0x68000c8,0x6800009,0x9461209,0x6800049,0x9481209,
-	0x6800009,0x94a2209,0x6803009,0x950c209,0x6801c09,0x968c209,0x60f5f08,0xc780380,
-	0x0000000,0x6800c08,0x6800809,0x94e8209,0x6800c09,0x9608209,0x6801009,0x9708209,
-	0x6800c08,0x6801009,0x9508209,0x680c0c8,0x6c0c0c8,0x6bc0008,0x60d1f08,0x64d1e08,
-	0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,
-	0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc077300,
-	0x60d2108,0xc077280,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,
-	0x60d3208,0xc077080,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,
-	0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,
-	0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64ad209,0x9008209,0x7c00e48,0x9108209,
-	0x7c00e08,0xc013600,0x7c005c8,0x60f1d0b,0x6800015,0x64ad308,0x9008248,0x7c00c09,
-	0x9108248,0x7c00c49,0x9208248,0x7c00c89,0x9308248,0x7c00cc9,0x64ad408,0x9008248,
-	0x7c00d09,0x9108248,0x7c00d49,0x9208248,0x7c00d89,0x9308248,0x7c00dc9,0xc013080,
-	0x7800e08,0x60f1d0b,0x780034a,0x960f24a,0x60f1e09,0x7800049,0xc000a80,0x2408248,
-	0xc0762c0,0x60d2108,0x80d3d00,0x80d5300,0x6803fc8,0x6ffffc8,0x60f4208,0xc001900,
-	0x0000000,0x6811743,0x6817d44,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9c08008,
-	0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,0x9808048,0x9808088,
-	0x98080c8,0x9808188,0x9808148,0x98081c8,0x60d0008,0x6800048,0x7800309,0x948c209,
-	0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,0xc7f5280,0x6030408,
-	0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,
-	0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,0x680000b,0x680c00e,
-	0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,0x400138e,0x740038b,
-	0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
-	0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffc00,
-	0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,
-	0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,0x60d3919,0x60d3818,
-	0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,0x6d0001c,0x6a0001d,
-	0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800019,0x6c00019,0x4000699,0x6800009,
-	0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
-	0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,
-	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
-	0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
-	0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,
-	0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,
-	0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,
-	0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,
-	0x680000e,0xa817388,0x64d370e,0x4000216,0x64d5c16,0x2408216,0x7c00408,0x4000217,
-	0x64d5d17,0x2408217,0x7c00448,0x64d3e25,0x9104965,0x64d3b23,0x64d3c24,0x64d3508,
-	0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,0xcb80003,0x64d390f,
-	0xc7f2600,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,0x60d3919,0x6bfffc9,
-	0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,0x80d3601,
-	0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,0x80d3604,
-	0x80d3605,0x80d3606,0x80d360f,0xc012e80,0x0000000,0xc013a40,0x0000000,0x908c210,
-	0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,
-	0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,
-	0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,0x7000298,0x400128a,
-	0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,0xc7f1680,0x961064f,
-	0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,
-	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,
-	0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,
-	0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,0x200e3ce,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,
-	0x908c210,0x7800309,0xb848248,0x4001208,0x920c210,0x7800349,0xb40e248,0x64d330a,
-	0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa43d288,0x6800008,0xc0102c0,
-	0x0000000,0x80ac00d,0xc7f0780,0x8030502,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,
-	0x7800308,0x5401208,0x6804009,0x2009248,0x680000a,0x740024a,0x4001249,0x740024a,
-	0xc011980,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,
-	0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0xc008880,0x0000000,
-	0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80d3300,0x80ac009,
-	0xc7efa00,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,
-	0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0xc7fdac0,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,
-	0x64d4d14,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x78006c9,0xa62c009,0x60d3919,
-	0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6800009,0x6c00009,
-	0x60d3a09,0x80d3607,0x80d3601,0x80d3608,0x64d340a,0x91c128a,0xaaf800a,0x80d4800,
-	0x64d3533,0x64d4923,0x64d4924,0x64d4925,0x64d4926,0x64d4927,0x64d4928,0x64d4929,
-	0x64d492a,0x64d492b,0x64d492c,0x64d492d,0x64d492e,0x64d492f,0x64d4930,0x64d4931,
-	0x64d4932,0x80d5201,0x80d3609,0x80d3604,0x6800008,0x7c00748,0x7800648,0xaa3c008,
-	0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,0x6800009,
-	0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,0x7800748,
-	0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800448,0x7800649,0x680000a,0xa436289,
-	0x78006c9,0x780030a,0xb433289,0x7800c09,0xb819248,0x78005cb,0x7800e4c,0xb42e30b,
-	0x7800c49,0x40012cb,0xb40c30b,0xb80b248,0x7800c89,0x40012cb,0xb40830b,0xb807248,
-	0x7800cc9,0x40012cb,0xb40430b,0xb803248,0x0000000,0x40012cb,0x78005cc,0x240a30b,
-	0x540128a,0xc009ac0,0x440128a,0xc780980,0x0000000,0x7800e0c,0xb01730b,0x7800d09,
-	0xac0f248,0x7800d49,0x44012cb,0xb00c30b,0xac0b248,0x7800d89,0x44012cb,0xb00830b,
-	0xac07248,0x7800dc9,0x44012cb,0xb00430b,0xac03248,0x0000000,0x44012cb,0x78005cc,
-	0x240a2cc,0xc0094c0,0x540128a,0xc780380,0x0000000,0xaa2c015,0x0000000,0x64d3e08,
-	0x9008208,0xaaf7fc8,0xa618008,0x78005c8,0x2408548,0xc00a300,0x7c005c8,0x60f1d0b,
-	0x6800015,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
-	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
-	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
-	0x80d360f,0xc00d900,0x0000000,0xc00f000,0x0000000,0x78006c8,0xaa10008,0x680bfca,
-	0xc001180,0x4401208,0x78006c8,0x7800309,0xb836248,0x0000000,0x64d0009,0x9384249,
-	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,0x780034a,0xb40d289,
-	0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,0xa410289,0xc00c740,
-	0x0000000,0x80ac00e,0xc7ec180,0x8030502,0x64d5309,0xaa1c009,0x0000000,0x60d2109,
-	0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7fb800,0x0000000,0x64d390f,0x64d4a11,
-	0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,0x7800308,0xc000e40,0x6800011,0x6a00014,
-	0x6d00014,0x60d4d14,0xc001840,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,
-	0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,0xb004248,0xc0009c0,
-	0x78006d1,0x680c50a,0xc001440,0x0000000,0xc7eb700,0x0000000,0x7800289,0x240a248,
-	0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,0x58103cf,
-	0x740028f,0x400128a,0x7400291,0x400128a,0x5810451,0x7400291,0x400128a,0x7400292,
-	0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,0x400128a,0x58104d3,0x7400293,
-	0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,0x7400294,0x643500e,0x580f38e,
-	0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x540434f,0x54023cf,
-	0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x7c00291,
-	0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,0x200e7ce,
-	0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,
-	0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,
-	0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,0x400128a,0x7000289,0x9610689,
-	0x400128a,0x700029b,0x400128a,0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,
-	0x7000289,0x9610709,0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,
-	0x700029e,0x400128a,0x7000289,0xcc00000,0x9610789,0x64d1602,0x9162082,0xaa0c002,
-	0xc7fff40,0x0000000,0xc7e9b80,0x0000000,0xcb80004,0x64f1f08,0x9361248,0xaa10009,
-	0x9042248,0xc7e99c0,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,
-	0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb812248,0x4001208,0x6800008,
-	0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,
-	0xa4072cc,0x0000000,0x64f010a,0x980a20a,0x60f010a,0xc7e92c0,0x0000000,0x7c00088,
-	0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,
-	0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,0x7800248,0xaa0c008,0x0000000,
-	0x980a54a,0x980a7ca,0x60f1f0a,0xc7e8d40,0x0000000,0x64f4b08,0x9384248,0xaa10009,
-	0x64f4a08,0xc7e8bc0,0x0000000,0x920c248,0x780034a,0xb40e289,0x4001249,0x64d330a,
-	0x910828a,0x240b289,0x64ad50a,0x921028a,0xa80728b,0x5410209,0x60f4a08,0x6800048,
-	0x7800309,0x948c209,0x60f4b08,0xc7e8740,0x0000000,0x64ac11f,0x80ac102,0x80ac200,
-	0x680c008,0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,
-	0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,
-	0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,
-	0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,
-	0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,
-	0x200a7ca,0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,
-	0xc000600,0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,
-	0x0000000,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,
-	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,
-	0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,
-	0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x6490b08,0x9808008,0x98080c8,0x6090b08,
-	0x9c08008,0x9c080c8,0x6090b08,0x64f4908,0x9c08048,0x60f4908,0x6401108,0x9c08748,
-	0x9c08788,0x6001108,0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x80f4209,
-	0x64f4308,0x9808088,0x60f4308,0x9808048,0x9c08088,0x98080c8,0x60f4308,0x64f1508,
-	0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9c08448,0x9c08488,0x9c08348,0x9c08308,
-	0x9808248,0x9808008,0x60f1508,0x80d3400,0x9808508,0x98084c8,0x9808748,0x9808488,
-	0x9808448,0x9808348,0x9808308,0x9c08248,0x9c08008,0x60f1508,0x6490b08,0x9c08608,
-	0x9c08648,0x6090b08,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
-	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,
-	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
-	0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc0663c0,0x60d2108,0xc066340,0x80d2107,
-	0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
-	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
-	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc065d80,0x80d2100,0x7800148,
-	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,
-	0x78001c8,0xc065a80,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
-	0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,
-	0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc002140,0x9206208,0x60f1c0b,0x64ad008,
-	0x9206208,0x7800049,0xc06fb80,0x2408248,0xc0653c0,0x60d2108,0xc06fc80,0x0000000,
-	0x680e483,0x6816f84,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,
-	0x9808088,0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,
-	0x60d0008,0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7ef340,
-	0x8030502,0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,
-	0x6490b08,0x9c08608,0x9808648,0x6090b08,0x6401108,0x9808748,0x9c08788,0x6001108,
-	0x6401008,0x9808008,0x6001008,0x9c08008,0x6001008,0x64d3308,0x9108248,0x960c209,
-	0x6800009,0x9504209,0xc7eadc0,0x60f4a08,0x400030a,0x400034b,0xc0010c0,0x400020b,
-	0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae24049,
-	0x80f2308,0x78005c8,0x2408548,0xc000d80,0x7c005c8,0x60f1d0b,0xcc00000,0x6800015,
-	0x64f2408,0x91e2208,0xaa1c048,0xaad0015,0x4401249,0xa613fce,0x64d3e08,0xc7ffc00,
-	0x9008388,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xa6f7fc8,0x0000000,0x60f1d0b,
-	0x7800a08,0xaa4c288,0xaa48015,0x64d3e08,0x9008208,0xa63c008,0x78005c8,0x2408548,
-	0x7c005c8,0x6800015,0x240820d,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,
-	0xc780100,0x4401308,0x240c209,0x540130c,0x64d3508,0x908c208,0x4001208,0x7800309,
-	0xb003248,0x0000000,0x6800008,0x7c00688,0x7c0064c,0x78005c8,0x241520d,0xcc00000,
-	0x7c005cd,0x5401248,0x2009209,0x681dd8a,0x2009289,0xcb80009,0x680000b,0xcc00000,
-	0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,0x68c0c0b,
-	0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,0x6c0514b,
-	0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,0xcc00000,
-	0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,0x694544b,
-	0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,0x6c0d34b,
-	0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,0xcc00000,
-	0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,0x684c4cb,
-	0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,0x6c1554b,
-	0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,0xcc00000,
-	0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,0x68d0d0b,
-	0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,0x6c1d74b,
-	0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,0xcc00000,
-	0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,0x68d554b,
-	0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,0x6c2294b,
-	0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,0xcc00000,
-	0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,0x68585cb,
-	0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,0x6c26b4b,
-	0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,0xcc00000,
-	0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,0x68d8e0b,
-	0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,0x9384249,
-	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc078ec0,0x0000000,0x64f4308,
-	0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,0x9c08448,
-	0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x7800709,0x4001249,
-	0x780030a,0x400128a,0xe00024a,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0xf000280,
-	0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,0x780030b,
-	0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,0x0000000,
-	0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,0x9384249,
-	0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,0x0000000,
-	0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc077e80,0x0000000,
-	0x80d3000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x78006c8,0xa60c008,0x4401208,
-	0x7800308,0x5401208,0x6804009,0x2009248,0x780040a,0x700024b,0x948c2ca,0x740024b,
-	0x4001249,0x780044a,0x740024a,0x78006c8,0xaa0c008,0xcc00000,0x0000000,0x7800708,
-	0xaaf4008,0x0000000,0xc000100,0x0000000,0xcc00000,0x0000000,0x6435008,0x580f208,
-	0xbef8048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,0x5401249,0x401f249,
-	0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,0x6a04008,0x6035008,
-	0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,
-	0x680400a,0x2009289,0x7400265,0x483f208,0x5402208,0x6808009,0x2009248,0x7400263,
-	0x4001249,0x92108e3,0x7400263,0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,
-	0x4001249,0x78006c8,0x7800309,0xb405248,0x483f208,0xaa0cfc8,0xcc00000,0x0000000,
-	0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,0x6035108,0x6804009,0x6035209,
-	0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,
-	0x0000000,0xcc00000,0x0000000,0x78006c8,0x5401248,0x680400a,0x2009289,0x7400273,
-	0x4807208,0x5405208,0x6808009,0x2009248,0x7400263,0x4001249,0x92108e3,0x7400263,
-	0x4001249,0x7400264,0x4001249,0x9210924,0x7400264,0x4001249,0x7400265,0x4001249,
-	0x9210965,0x7400265,0x4001249,0x7400266,0x4001249,0x92109a6,0x7400266,0x4001249,
-	0x7400267,0x4001249,0x92109e7,0x7400267,0x4001249,0x7400268,0x4001249,0x9210a28,
-	0x7400268,0x4001249,0x7400269,0x4001249,0x9210a69,0x7400269,0x4001249,0x740026a,
-	0x4001249,0x9210aaa,0x740026a,0x4001249,0x740026b,0x4001249,0x9210aeb,0x740026b,
-	0x4001249,0x740026c,0x4001249,0x9210b2c,0x740026c,0x4001249,0x740026d,0x4001249,
-	0x9210b6d,0x740026d,0x4001249,0x740026e,0x4001249,0x9210bae,0x740026e,0x4001249,
-	0x740026f,0x4001249,0x9210bef,0x740026f,0x4001249,0x7400270,0x4001249,0x9210c30,
-	0x7400270,0x4001249,0x7400271,0x4001249,0x9210c71,0x7400271,0x4001249,0x7400272,
-	0x4001249,0x9210cb2,0x7400272,0x4001249,0x78006c8,0x7800309,0xb405248,0x4807208,
-	0xaa0c1c8,0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x64ad708,
-	0x6035108,0x6804009,0x6035209,0x5401249,0x2008248,0x60ad708,0x6a08008,0x6035008,
-	0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,0x6432434,0xaa0c034,
-	0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,0x0000000,
-	0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h
deleted file mode 100755
index 6f82ae0c4357..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw.h
+++ /dev/null
@@ -1,384 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01b980,0x0000000,
-	0xc000ec0,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
-	0xc7af240,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0xc799cc0,0x0000000,0xc780a00,0x0000000,0xc78c100,0x64d3008,0xc799d00,0x0000000,
-	0xc7ac380,0x0000000,0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,
-	0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,
-	0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,
-	0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,
-	0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,
-	0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,
-	0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,
-	0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,
-	0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785640,0xa6080c8,
-	0xc782e00,0xa608348,0xc79b440,0xa608388,0xc79d500,0xc788440,0x0000000,0xc07ee80,
-	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,
-	0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,
-	0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,
-	0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,
-	0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,
-	0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,
-	0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,
-	0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc786fc0,
-	0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
-	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,
-	0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,
-	0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,
-	0x80d1f40,0x7800048,0xc006800,0x441a208,0xc07d640,0x60d2108,0xc006700,0x6800008,
-	0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f30,0x80d5501,0x80d1f20,0x80d1f20,
-	0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
-	0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,
-	0xc785b80,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,
-	0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,
-	0x64f4008,0x9c08048,0x60f4008,0xc017400,0x0000000,0x6498e08,0x9c08788,0x6098e08,
-	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc017a00,
-	0x0000000,0xc017000,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,0x60f4908,
-	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
-	0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
-	0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc07bb80,
-	0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,0x9010208,
-	0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
-	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
-	0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,0x7800148,
-	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af80,
-	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
-	0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,0x7c00588,
-	0x68002a3,0xc01c900,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,
-	0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc018d80,0x7c005c8,0x60f1c0b,0x7800049,
-	0xc003880,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0xc07a600,0x80d2100,0x80d5500,
-	0xc07a540,0x80d2100,0xc07a4c0,0x80d2100,0x64acd08,0x60f4208,0xc003700,0x0000000,
-	0x680d343,0x681a704,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,
-	0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc783040,0x8030502,0xc015840,
-	0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc014bc0,0x0000000,0x6498e08,0x9808788,
-	0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,
-	0xc0151c0,0x0000000,0xc0147c0,0x0000000,0xc079540,0x0000000,0x64d3109,0x9010209,
-	0x400f208,0x5804208,0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,
-	0x7c00348,0x7800309,0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,
-	0x8098002,0x8098000,0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,
-	0x9c084c8,0x9c08748,0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,
-	0x60f1508,0x80d3400,0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,
-	0x9808648,0x9c08688,0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,
-	0xc078940,0x60d2108,0xc0788c0,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
-	0x946d209,0x60d3208,0xc0786c0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
-	0x3409289,0x9605248,0x60d1f09,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
-	0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,
-	0x78005c8,0xc780580,0x7c00588,0xc019e80,0x0000000,0x7804009,0x90c1209,0x7c007c8,
-	0x9006209,0x7c00608,0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc016300,0x7c005c8,
-	0x60f1d0b,0x6940009,0x6c00009,0x20097c9,0x60f2009,0x6800009,0x60f1e09,0x7800049,
-	0xc000c80,0x2408248,0xc077ac0,0x60d2108,0x80d3d00,0x80d5300,0xc0779c0,0x80d2101,
-	0x80d5501,0x6803fc8,0x6ffffc8,0x60f4208,0xc001a40,0x0000000,0x6811603,0x681b684,
-	0x64d3308,0x9010208,0xaa14008,0x0000000,0x80ac005,0xc780640,0x8030502,0x6800008,
-	0x6c00448,0x60d3008,0x64d0008,0x9c08008,0x9c08048,0x9c08088,0x9c08188,0x9c081c8,
-	0x60d0008,0x9808008,0x9808048,0x9808088,0x98080c8,0x98081c8,0x60d0008,0x6800048,
-	0x7800309,0x948c209,0x60f4b08,0x80ac005,0xc780080,0x8030502,0x0800000,0x7800008,
-	0xc7f6880,0x6030408,0x6800009,0xb005248,0x2409209,0x5401208,0xcc00000,0x4401208,
-	0xcc00000,0x5401209,0x6bfffd8,0x6c00018,0x6800009,0x6800019,0x6c00019,0x4000699,
-	0x680000b,0x680c00e,0x680100f,0x7400398,0x400138e,0x7400389,0x400138e,0x7400399,
-	0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,
-	0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
-	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,
-	0x680800d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,
-	0x0000000,0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,
-	0x60d3919,0x60d3818,0x60d3a19,0xcc00000,0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,
-	0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,0x690000a,0x6800023,0x6800028,
-	0x6800029,0x6bfffd8,0x6c00018,0x4000918,0x6800019,0x6c00019,0x4000699,0x6800009,
-	0x680c00e,0x680064f,0x7400399,0x400138e,0x7400389,0x400138e,0x740039b,0x400138e,
-	0x740038a,0x400138e,0x740039c,0x400138e,0x740038a,0x400138e,0x740039d,0x400138e,
-	0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0xaeb004f,0x44013cf,
-	0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,
-	0x0000000,0x40193cf,0xb611e8f,0x6807d0d,0xc7ffc00,0x200e34e,0x64d330d,0x900834d,
-	0x680000e,0x680064f,0xb8053cd,0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,
-	0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,
-	0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,0x60d501d,0x60d511e,0xcc00000,0x0000000,
-	0x680000e,0xa822388,0x64d370e,0x78009c8,0xaa2c008,0xa624048,0x6800008,0x80d3000,
-	0x80d300f,0x64d0009,0x9c09149,0x60d0009,0xc7f3d80,0x7c009c8,0x7c009c8,0xb60c223,
-	0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,
-	0x6800009,0x7c00a49,0x64d3508,0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,
-	0x7c00709,0xcb80003,0x64d390f,0xc7f37c0,0x0000000,0x60d3718,0x64d3510,0x908c250,
-	0xa620009,0x60d3919,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,
-	0x9004250,0xaa10249,0x80d3601,0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,
-	0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,
-	0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,
-	0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,
-	0x7800649,0x680000a,0xa408289,0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015840,
-	0x0000000,0xc780400,0x78005c9,0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,
-	0x64d3e08,0x9008208,0xaafbfc8,0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,
-	0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
-	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
-	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
-	0x80d360f,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
-	0x960f248,0x60f1e09,0xc015d00,0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,
-	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
-	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
-	0xb40d248,0x7800309,0xb40b248,0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,
-	0x7000299,0x400128a,0x700028f,0xc7f15c0,0x961064f,0x908c210,0x7800289,0x2409248,
-	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
-	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
-	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
-	0x200e7ce,0x780028f,0x54033cf,0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb83e248,
-	0x4001208,0x920c210,0x7800349,0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,
-	0x64ad50a,0x901028a,0xa433288,0x6800008,0xc011bc0,0x0000000,0x80ac00d,0xc7f06c0,
-	0x8030502,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,
-	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
-	0x0000000,0xc00c180,0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,
-	0x7c00208,0x80d3300,0x80ac009,0xc7efbc0,0x8007801,0x7c00288,0x403f248,0x7c002c9,
-	0x5403208,0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
-	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fdd40,0x680c00a,
-	0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,
-	0x60d4d1e,0x60d3718,0x5401a28,0x9402a29,0x6800029,0x78006c9,0xa638009,0x60d3919,
-	0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,
-	0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x7800789,0x680000a,0xa842289,0x7800a89,
-	0x60d2109,0x80d2001,0x80d5300,0x6800009,0x7c00a89,0x7800a09,0x680024a,0xa826289,
-	0x64d3e09,0x9008249,0xbe14809,0x680038a,0xbe0c409,0x680028a,0x680018a,0xa20c3c9,
-	0x0000000,0x400c28a,0x64d3c09,0x9002249,0x200a24a,0x64d2009,0xbefc049,0x0000000,
-	0x60d210a,0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,
-	0x0000000,0x688888b,0x64d3709,0x941024b,0x60d3709,0x64d3809,0x941024b,0x60d3809,
-	0x80d3601,0x0000000,0x60d320a,0xc780d40,0x80d3603,0x64d2009,0xbefc049,0x0000000,
-	0x80d2105,0x80d2001,0x64d320a,0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,
-	0x0000000,0x80d3601,0x0000000,0x60d320a,0x80d3602,0x80d3603,0xc780880,0x80d3604,
-	0x9004228,0xa60c008,0xc780640,0x80d5201,0x78006c9,0xa224208,0x780030a,0xb807289,
-	0x4807208,0xa614008,0xc018280,0x0000000,0xc7803c0,0x0000000,0xa62c009,0x0000000,
-	0x4c01208,0x64d3209,0x9c09009,0x60d3209,0x6bfffca,0x6c0000a,0x60d380a,0x9809009,
-	0x60d3209,0xc016300,0x0000000,0x80d3607,0x80d3601,0x80d3608,0x80d3609,0x80d3604,
-	0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,
-	0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,
-	0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,
-	0x7800649,0x680000a,0xa40d289,0x7800789,0x78007ca,0xa803289,0xc011780,0x0000000,
-	0x64f1d09,0x9205249,0x780060a,0xa804289,0xc00fe40,0x0000000,0xc7804c0,0x78005c9,
-	0x780058a,0xa810289,0x7800a08,0xaa30288,0x0000000,0x64d3e08,0x9008208,0xaafbfc8,
-	0xa61c008,0x7800588,0x78005c9,0xc010dc0,0x2408209,0xc780100,0x0000000,0x78005c9,
-	0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,
-	0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,
-	0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,
-	0x80d360f,0x78009c9,0x680000a,0xa86a289,0x680004a,0xa446289,0xc010c40,0x681a844,
-	0x64f1509,0x9c09449,0x60f1509,0x9809449,0x60f1509,0x80d3609,0x64d0009,0x9c09049,
-	0x60d0009,0x9809049,0x60d0009,0x6800009,0x780030a,0x946d24a,0x60d3209,0x6800223,
-	0x64d5309,0x7c00a89,0x78006e6,0x7800327,0xb8059e6,0x6bfffe6,0x6c00026,0x60d3826,
-	0x6800018,0x60d3718,0x68888a7,0x64d4e26,0x93e19a6,0x96619e6,0x64d4f26,0x93e19a6,
-	0x96419e6,0x64d5026,0x93e19a6,0x96219e6,0x64d5126,0x93e19a6,0x96019e6,0x60d3827,
-	0x64f1509,0x9c09589,0x60f1509,0xc010700,0x0000000,0x6490b09,0x9c09609,0x9c09649,
-	0x6090b09,0x64f1509,0x9c095c9,0x9c09609,0x9c09649,0x9c096c9,0x9809509,0x98094c9,
-	0x64f1f08,0x9383208,0xa6f8008,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
-	0x9809589,0xc780900,0x60f1509,0xc00fb00,0x681b684,0x6800049,0x780030a,0x946d24a,
-	0x60d3209,0x68001e3,0x9829029,0x64d3727,0x92619a7,0x541f9a6,0x60d4e26,0x92419a7,
-	0x541f9a6,0x60d4f26,0x92219a7,0x541f9a6,0x60d5026,0x92019a7,0x541f9a6,0x60d5126,
-	0x6490b09,0x9809609,0x9c09649,0x6090b09,0x64f1509,0x98095c9,0x9809609,0x9809649,
-	0x98096c9,0x9c09509,0x9c094c9,0x9c09749,0x60f1509,0x78007c9,0x7c00789,0x78006c9,
-	0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,
-	0xc00e180,0x0000000,0x78006c8,0xaa10008,0x680bfca,0xc0016c0,0x4401208,0x78006c8,
-	0x7800309,0xb844248,0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
-	0xa6ec009,0x0000000,0x7800709,0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,
-	0x2409289,0x64ad50a,0x921028a,0xa410289,0xc00b640,0x0000000,0x80ac00e,0xc7e9ac0,
-	0x8030502,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
-	0x0000000,0xc7f9200,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,
-	0x64d3725,0xb60c223,0x4001223,0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,
-	0xaa0c188,0x6800049,0x6800009,0x7c00a49,0xc000900,0x7800308,0xc001500,0x6800011,
-	0x6a00014,0x6d00014,0x60d4d14,0xc001f00,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,
-	0x60d4d1e,0x9402a29,0x6800029,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,
-	0x78002c9,0xb004248,0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,
-	0xaa18008,0xa614048,0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8b00,0x0000000,
-	0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,
-	0x400128a,0x58103cf,0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,
-	0x960f466,0x90109a5,0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,
-	0x92219a5,0x541f4e6,0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,
-	0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,
-	0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,
-	0xcc00000,0x7400294,0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,
-	0x200e7ce,0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,
-	0x603520d,0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,
-	0x2008248,0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,
-	0x603520f,0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,
-	0x700029a,0x400128a,0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,
-	0x400128a,0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,
-	0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,
-	0x7000289,0x9610789,0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,
-	0x68888a4,0x93e199b,0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,
-	0xcc00000,0x9601926,0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,
-	0x9829069,0xcc00000,0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,
-	0xc7e6480,0x0000000,0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e62c0,
-	0x0000000,0x7800ac9,0xaa10009,0x6800049,0xc7e6180,0x7c00b09,0x93e1248,0xaa10009,
-	0x9042248,0xc7e6040,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,
-	0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,
-	0x78000c9,0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,
-	0xa4032cc,0x0000000,0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,
-	0xa403248,0x0000000,0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,
-	0x980a54a,0x980a7ca,0x60f1f0a,0x681a84a,0xa404284,0x680004a,0xc012000,0x7c00aca,
-	0xc7e5480,0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e5300,0x0000000,
-	0x920c248,0x780034a,0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,
-	0x948c209,0x60f4b08,0xc7e5000,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,
-	0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,
-	0x0000000,0xcc00000,0x0000000,0xc000b40,0x0000000,0x780034a,0x400128a,0x40002ca,
-	0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,0x681010a,
-	0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
-	0x6090b0a,0x698000a,0x6c0000a,0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,
-	0x609450a,0x780030a,0x400128a,0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,
-	0x0000000,0x8095003,0x8095000,0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,
-	0x683ffc9,0x649090a,0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,
-	0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,
-	0x649530b,0x90012cb,0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,
-	0x440128a,0xcc00000,0x0000000,0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,
-	0xc7e7e00,0x6001008,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,
-	0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,
-	0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,
-	0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc063840,0x60d2108,0xc0637c0,0x80d2107,
-	0x6800008,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,
-	0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,
-	0x60f1f08,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc063200,0x80d2100,0x7800148,
-	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,
-	0x78001c8,0xc062f00,0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,
-	0x9605248,0x60d1f09,0x7800249,0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,
-	0xc780240,0x9206208,0x80d1f20,0x64ad008,0xc000f80,0x9206208,0x60f1c0b,0x64ad008,
-	0x9206208,0x7800049,0xc06ba00,0x2408248,0xc062840,0x60d2108,0xc0627c0,0x80d2100,
-	0x80d5500,0xc062700,0x80d2100,0xc062680,0x80d2100,0xc06b940,0x0000000,0x680d343,
-	0x681a704,0x80d300f,0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,
-	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,
-	0x9808048,0x60d0008,0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7eb000,0x8030502,
-	0x6490b08,0x9808008,0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6498e08,
-	0x9808788,0x6098e08,0x6490b08,0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,
-	0xc7e8d80,0x6001008,0x5401248,0x2009209,0x681f7ca,0x2009289,0xcb80009,0x680000b,
-	0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,0x688080b,0xcc00000,0x6c0208b,
-	0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,0x6c0410b,0x694140b,0xcc00000,
-	0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,0xcc00000,0x6c071cb,0x688484b,
-	0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,0x690504b,0xcc00000,0x6c0a28b,
-	0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,0x6c0c30b,0x684848b,0xcc00000,
-	0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,0xcc00000,0x6c0f3cb,0x690908b,
-	0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,0x680c0cb,0xcc00000,0x6c1248b,
-	0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,0x6c1450b,0x68ccccb,0xcc00000,
-	0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,0xcc00000,0x6c175cb,0x681010b,
-	0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,0x689090b,0xcc00000,0x6c1a68b,
-	0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,0x6c1c70b,0x695150b,0xcc00000,
-	0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,0xcc00000,0x6c1e7cb,0x685494b,
-	0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,0x689514b,0xcc00000,0x6c2088b,
-	0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,0x6c2290b,0x691458b,0xcc00000,
-	0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,0xcc00000,0x6c239cb,0x681918b,
-	0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,0x68581cb,0xcc00000,0x6c25a8b,
-	0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,0x6c25b0b,0x6898dcb,0xcc00000,
-	0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,0xcc00000,0x6c26bcb,0x68d820b,
-	0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,0x68d8a0b,0xcc00000,0x6c27c8b,
-	0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,0x9c08048,0x60f4008,0x64d0009,
-	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0xc07ac40,0x0000000,
-	0x7800709,0x4001249,0x780030a,0x400128a,0xe00024a,0x80d1f30,0x6bc0008,0x60d1f08,
-	0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,0x6430008,0x78006c9,0x780070a,
-	0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,0x40012cb,0x4000309,0xe0002ca,
-	0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,0x961024b,0x60d3309,0x64d0009,
-	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d5309,0xaa1c009,
-	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0x80d5300,0xc07a000,
-	0x0000000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,0x7800708,0x7800349,0xb809248,
-	0x6804008,0x6800409,0x680080a,0x740020a,0xd07ffc9,0x4001208,0xcc00000,0x0000000,
-	0x6435008,0x580f208,0xbecc048,0x0000000,0x64ad608,0x6035108,0x7800309,0x4001249,
-	0x5801249,0x401f249,0x5805249,0x5405249,0x6035209,0x5401249,0x2008248,0x60ad608,
-	0x6be4008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0xcc00000,0x0000000,
-	0xc07be80,0x7800608,0x64d3e08,0x9008288,0xaafbfca,0x0000000,0x60f1c0b,0x7800a08,
-	0xaa10288,0xa60c00a,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc001500,0x2408248,
-	0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0xc07b940,0x7800608,0x64f1d0a,
-	0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,0x6803fce,0xae14049,0x80f2308,
-	0x7800588,0xcc00000,0x7c005c8,0x64f2408,0x91e2208,0xaa18048,0x64d3e08,0x9008388,
-	0xa60ffce,0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,0x64f2408,0x9208208,0xaa17fc8,
-	0x64d3e08,0x9008208,0xaaebfce,0x0000000,0x60f1d0b,0xa60ffce,0x64d3e08,0x9008388,
-	0x7800a08,0xaa10288,0xa60c00e,0x7800588,0x7c005c8,0x7800608,0x78005c9,0xc0008c0,
-	0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,0x78006c8,0x4001208,
-	0x7800309,0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,0xc07e3c0,0x0000000,
-	0x7804009,0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,0x5801248,0x680400a,
-	0x2009289,0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,0x9006209,0x7c007ca,
-	0xcc00000,0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,0x5401208,0xc780100,
-	0x4401308,0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,0x7800309,0xb003248,
-	0x0000000,0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,0x6800049,0xcc00000,
-	0x7c009c9,0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,0x7c009c9,0x64d0009,
-	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x80f2306,0x64f2409,
-	0x90c2249,0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,0x6490b09,0x9809009,
-	0x98090c9,0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,0x0000000,0x6803c0e,
-	0x78006c9,0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,0x400128a,0x950c389,
-	0xa60c009,0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,0x980e58e,0x64d3308,
-	0x9108208,0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,0x7800709,0x5404209,
-	0x64acc0a,0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,0x20262e6,0x20262a6,
-	0x7800709,0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,0x540428a,0xf0002c0,
-	0x20102d0,0x2010290,0x78006ca,0x400128a,0x7800309,0x4001249,0xb80424a,0x7800708,
-	0x4001208,0x240a24a,0x2420289,0x64ac32d,0x5404208,0x64acc09,0x242d26d,0xe000248,
-	0x540428a,0x202d2ad,0xf0002c0,0x202d2ed,0x78006ca,0x400128a,0x7800309,0x4001249,
-	0xb80424a,0x7800708,0x4001208,0x240a24a,0x2422289,0x64ac42e,0x5403208,0x64acc09,
-	0x242e26e,0xe000248,0x540428a,0x202e2ae,0xf0002c0,0x202e2ee,0x694002f,0x6c0002f,
-	0x202f7ef,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,0x5405249,
-	0x202f26f,0xc075980,0x0000000,0x680830a,0x680020c,0x6035126,0x8035208,0x6b0a008,
-	0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,
-	0x6035126,0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2026226,0x6435008,0x580f208,
-	0xbef8048,0x0000000,0x780a1cb,0x95082c9,0x740028b,0xa60c14c,0x0000000,0x440828a,
-	0xd07f94c,0x400128a,0x680800a,0x680010c,0x6035110,0x8035208,0x6b0a008,0x6035008,
-	0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,0x0000000,0x780a1c9,0x6035110,
-	0x8035208,0x6b0a008,0x6035008,0x64acc08,0x2010210,0x6435008,0x580f208,0xbef8048,
-	0x0000000,0x780a1cb,0x9008209,0x910834b,0x940824d,0x95082c8,0x740028b,0x400428a,
-	0x7400289,0xd07f8cc,0x440328a,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,
-	0x2409209,0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,0x6035108,0x8035210,
-	0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,
-	0xa6f800d,0x0000000,0xc006180,0x60f1f0e,0x64d3c08,0x9004208,0xaa0c048,0x6800049,
-	0x68000c9,0x7c00b49,0xc004900,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
-	0xc004cc0,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xc005380,0x0000000,
-	0x6435008,0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,
-	0x7800b49,0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,
-	0xb220049,0x60f1f0e,0x4401249,0x7c00b49,0xc005700,0x0000000,0xc7ff700,0x4420bef,
-	0xc003f80,0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,
-	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
-	0xc0031c0,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
-	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,
-	0x78006c8,0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,
-	0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,
-	0x60d510a,0xc002980,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,
-	0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,
-	0x68fffc9,0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,
-	0xb807289,0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,
-	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,
-	0x60d5109,0x64d320a,0x69ffe49,0x60d3209,0xc001ec0,0x80d5201,0xcc00000,0x60d320a,
-	0x64d3309,0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,
-	0x64d4a09,0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,
-	0x90612a8,0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,
-	0x60d4c09,0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,
-	0x60d3209,0xc001580,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,
-	0x91e12eb,0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,
-	0x920f289,0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,
-	0xaa2400a,0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,
-	0x960facb,0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,
-	0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,
-	0xc7fd580,0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,
-	0x680002b,0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x60d4a2a,
-	0x60d4b2a,0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,0x60d4e2c,
-	0x60d4f2c,0x60d502c,0x60d512c,0xc000300,0x80d5201,0x64d4a0a,0x60d4a0a,0x60d4b0a,
-	0x60d4c0a,0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x80d5602,
-	0x64d5709,0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,0x8006402,0x7800acf,
-	0xa60c00f,0xc7d3c40,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0xa61804f,
-	0x6800088,0xc000a80,0x7c00ac8,0xc7d39c0,0x0000000,0xa61808f,0x68000c8,0xc001140,
-	0x7c00ac8,0xc7d3840,0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,
-	0x7800b09,0xaa0c009,0x7c00ac8,0x8030508,0xc7d3580,0x0000000,0x6435008,0x580f208,
-	0xbef8048,0x0000000,0x603512d,0x8035208,0x6b08808,0x6035008,0x4401820,0x4010b6d,
-	0xaa0c020,0xcc00000,0x0000000,0x7800320,0x4001820,0x5404220,0x242d22d,0x64acc08,
-	0x5404208,0xcc00000,0x202d22d,0x603512e,0x8035208,0x6b09008,0x6035008,0x7808908,
-	0x7c08208,0x7808948,0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,
-	0x7c08308,0x7808848,0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0x44018a2,
-	0x4010bae,0xaa0c022,0xcc00000,0x0000000,0x7800322,0x40018a2,0x5404222,0x242e22e,
-	0x64acc08,0x5403208,0xcc00000,0x202e22e,0x6435008,0x580f208,0xbef8048,0x0000000,
-	0x6809008,0x680800e,0x6800109,0x700020a,0x90082ca,0x4001208,0x700020c,0x910834c,
-	0x950830b,0x740038c,0x400438e,0x940828d,0x740038a,0x440338e,0xd07fd49,0x4001208,
-	0x6940008,0x6c00008,0x20087c8,0x7800309,0x4001249,0x5405249,0x2008248,0xb80322f,
-	0x0000000,0x242f26f,0x603512f,0x8035210,0x6a08008,0x6035008,0xcc00000,0x4020bef,
-	0x64f1508,0x9c08308,0x9c085c8,0x9c08608,0x9c08648,0x9c086c8,0x9808508,0x98084c8,
-	0x60f1508,0x78006c9,0x7800708,0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,
-	0x960f248,0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,0x0000000,0x80d300f,0x80f4003,
-	0x64f1508,0x9808248,0x9c08508,0x9c084c8,0x60f1508,0x64d0009,0x9c09009,0x60d0009,
-	0x9809009,0x60d0009,0x9c08248,0x9808508,0x98084c8,0x9808308,0x60f1508,0xcc00000,
-	0x80f4000,0x6432434,0xaa0c034,0x8032400,0x6699334,0x64ac034,0xaa1c074,0xaa180b4,
-	0xaa14134,0xaa100f4,0x0000000,0xc7ffd80,0x0000000,0x8030502,0xc7ffcc0,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h b/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h
deleted file mode 100644
index 9a566aeb2d26..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/h264_enc_mix_sw_hdec_m2_dblk.h
+++ /dev/null
@@ -1,382 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc000a00,0x0000000,0xc01bf40,0x0000000,
-	0xc000ec0,0x0000000,0x6bff840,0x7c00000,0x6030400,0x0400000,0x0000000,0x0000000,
-	0xc7aed00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0xc79a280,0x0000000,0xc78c080,0x64d3008,0xc780980,0x0000000,0xc79a2c0,0x0000000,
-	0xc7ac000,0x0000000,0xcc00000,0x0400000,0x80d1a00,0x6800008,0x7c003c8,0xcc00000,
-	0x0000000,0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,
-	0x7c001c8,0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0x64ace08,
-	0x7c01008,0xcc00000,0x0000000,0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,
-	0xcc00000,0x0000000,0x64f0108,0x9808388,0x60f0108,0x6bfff88,0x6030408,0x0400000,
-	0x64ac008,0xaa0c048,0xa60c088,0xc781d80,0xc7808c0,0x78003c9,0xa60c009,0xc0030c0,
-	0x0000000,0x80d5c00,0x80d5d00,0x6800009,0x7c00489,0x7c009c9,0x7c00a49,0x7c00a89,
-	0x7c00ac9,0x7c00b09,0x6800016,0x6800017,0x7c00657,0x7c00697,0x7c00809,0x7c00849,
-	0x7c00889,0x7c008c9,0x7c00909,0x7c00949,0x7c00989,0xa608108,0xc785480,0xa6080c8,
-	0xc782e00,0xa608348,0xc79bb80,0xa608388,0xc79da80,0xc788340,0x0000000,0xc07ee80,
-	0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,
-	0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,0x60d1f08,0x64d1e08,0x98087c8,
-	0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,0x6a0a008,0x60d1f08,0xc07ed80,
-	0x80d2100,0x7800148,0x4404208,0xc07ec80,0x60d2108,0xc07ec00,0x80d2100,0x7800108,
-	0x4404208,0xc07eb00,0x60d2108,0xc07ea80,0x80d2101,0x80d1f20,0x64d3109,0x9010209,
-	0x400f208,0x5804208,0x4401208,0x7c00308,0xc07e840,0x60d2108,0x9210209,0x400f208,
-	0x5804208,0x4401208,0x7c00348,0xc07e680,0x60d2108,0x80d1f30,0x80d1f30,0x64d3108,
-	0x9210208,0x9004248,0xa60c009,0xc7803c0,0x80d1f20,0x6800408,0x6c00008,0x2409248,
-	0x5801249,0x80d1f30,0xc07e2c0,0x80d2100,0xc07e240,0x80d2100,0xc07e1c0,0x80d2100,
-	0xc07e140,0x60d2109,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x80ac007,0xc786ec0,
-	0x8007801,0xc07da00,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
-	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,0x60d1f08,
-	0x64d1e08,0x98087c8,0x60d1e08,0xc07da80,0x80d2100,0xc07da00,0x80d2100,0x80d1f20,
-	0x80d1f20,0xc07d900,0x80d2100,0xc07d880,0x80d2100,0xc07d800,0x80d2100,0x80d1f20,
-	0x80d1f40,0x7800048,0xc006700,0x441a208,0xc07d640,0x60d2108,0xc006600,0x6800008,
-	0xc07d540,0x60d2108,0xc07d4c0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,0x80d1f20,
-	0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,
-	0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0x80ac008,
-	0xc785a80,0x8007801,0x64d3109,0x9010289,0x400f28a,0x580428a,0x440128a,0x7c0030a,
-	0x9210289,0x400f28a,0x580428a,0x440128a,0x7c0034a,0x6800049,0xcc00000,0x7c003c9,
-	0x64f4008,0x9c08048,0x60f4008,0xc017a40,0x0000000,0x6498e08,0x9c08788,0x6098e08,
-	0x6490b08,0x9c08608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc018140,
-	0x0000000,0xc017640,0x0000000,0xc07bd80,0x0000000,0x64f4908,0x9c08048,0x60f4908,
-	0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,
-	0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,
-	0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,0x9210208,0xc07bb80,
-	0x60d2108,0xc07bb00,0x80d2107,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,
-	0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x64d3308,0x9010208,
-	0xa654008,0x6800008,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,0x6940008,
-	0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,0x9008249,0x9508209,0x9808508,
-	0x9808548,0x98087c8,0x60f1f08,0x6800009,0x60f1e09,0xc07b200,0x80d2100,0x7800148,
-	0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07af80,
-	0x60d2108,0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,
-	0x80d1f20,0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780440,0x7c00588,
-	0x68002a3,0xc01cdc0,0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,
-	0x91c1209,0x7c00788,0x9106209,0x7c00588,0xc019240,0x7c005c8,0x60f1c0b,0x7800049,
-	0xc003780,0x2408248,0xc07a6c0,0x60d2108,0x80d3d00,0x64acd08,0x60f4208,0xc0037c0,
-	0x0000000,0x680d483,0x681acc4,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,
-	0x9c080c8,0x9c08148,0x9c08188,0x9c081c8,0x60d0008,0x80ac005,0xc783100,0x8030504,
-	0xc016140,0x0000000,0x64f4008,0x9c08048,0x60f4008,0xc0153c0,0x0000000,0x6490b08,
-	0x9808608,0x9c08648,0x6090b08,0x6401008,0x9808008,0x6001008,0xc015b80,0x0000000,
-	0xc015080,0x0000000,0xc0797c0,0x0000000,0x64d3109,0x9010209,0x400f208,0x5804208,
-	0x4401208,0x7c00308,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0x7800309,
-	0x7800348,0x958c248,0x6499008,0x9708248,0x60f4f09,0x80f4a00,0x8098002,0x8098000,
-	0x64f4308,0x9c08048,0x9c080c8,0x60f4308,0x64f1508,0x9c08508,0x9c084c8,0x9c08748,
-	0x9c08448,0x9c08488,0x9c08348,0x9c08308,0x9808248,0x9808008,0x60f1508,0x80d3400,
-	0x9808488,0x9808448,0x9808348,0x9808308,0x98085c8,0x9808608,0x9808648,0x9c08688,
-	0x98086c8,0x9c08248,0x9c08008,0x60f1508,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
-	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a10408,
-	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,0xc078bc0,0x60d2108,
-	0xc078b40,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,0x946d209,0x60d3208,
-	0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6800009,0x60f1e09,0xc0787c0,0x80d2100,
-	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,
-	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
-	0x80d1f20,0x64d3308,0x9010208,0xaa10008,0x78005c8,0xc780640,0x7c00588,0xc01a440,
-	0x0000000,0x7804009,0x90c1209,0x7c007c8,0x9006209,0x7c00608,0x91c1209,0x7c00788,
-	0x9106209,0x7c00588,0xc0168c0,0x7c005c8,0x60f1d0b,0x92c620b,0x920624b,0x94c6209,
-	0x7800789,0x9581209,0x60d2408,0x680002e,0x60d232e,0x78005c8,0x7800049,0xc000bc0,
-	0x2408248,0xc077b00,0x60d2108,0x80d3d00,0x80d5300,0x6803fc8,0x6ffffc8,0x60f4208,
-	0xc001a40,0x0000000,0x6811743,0x681bc44,0x64d3308,0x9010208,0xaa14008,0x0000000,
-	0x80ac005,0xc780640,0x8030504,0x6800008,0x6c00448,0x60d3008,0x64d0008,0x9c08008,
-	0x9c08048,0x9c08088,0x9c08188,0x9c081c8,0x60d0008,0x9808008,0x9808048,0x9808088,
-	0x98080c8,0x98081c8,0x60d0008,0x6800048,0x7800309,0x948c209,0x60f4b08,0x80ac005,
-	0xc780080,0x8030504,0x0800000,0x7800008,0xc7f6980,0x6030408,0x6800009,0xb005248,
-	0x2409209,0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffd8,0x6c00018,
-	0x6800009,0x6800019,0x6c00019,0x4000699,0x680000b,0x680c00e,0x680100f,0x7400398,
-	0x400138e,0x7400389,0x400138e,0x7400399,0x400138e,0x740038b,0x400138e,0xaee004f,
-	0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,0x643500d,0x580f34d,0xbef804d,
-	0x0000000,0x603510e,0x680400d,0x603520d,0x6a0c00d,0x603500d,0x643500d,0x580f34d,
-	0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,0xc7ffc00,0x200e34e,0x64d330d,
-	0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,0x404038e,0xc7fff40,0x40403cf,
-	0x7c0028e,0x44013cf,0x7c002cf,0x60d3718,0x60d3919,0x60d3818,0x60d3a19,0xcc00000,
-	0x0000000,0x6a0001b,0x6d0001b,0x6a0001c,0x6d0001c,0x6a0001d,0x6d0001d,0x6a0001e,
-	0x6d0001e,0x690000a,0x6800023,0x6800028,0x6800029,0x6bfffd8,0x6c00018,0x4000918,
-	0x6800019,0x6c00019,0x4000699,0x6800009,0x680c00e,0x680064f,0x7400399,0x400138e,
-	0x7400389,0x400138e,0x740039b,0x400138e,0x740038a,0x400138e,0x740039c,0x400138e,
-	0x740038a,0x400138e,0x740039d,0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,
-	0x740038a,0x400138e,0xaeb004f,0x44013cf,0x690000e,0x6c0000e,0x200e7ce,0x680000f,
-	0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,
-	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,0x6807d0d,
-	0xc7ffc00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,0x0000000,
-	0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d3919,0x60d4a1b,
-	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d4a1b,0x60d4a1b,0x60d3a19,0x60d4e1b,0x60d4f1c,
-	0x60d501d,0x60d511e,0xcc00000,0x0000000,0x680000e,0xa82b388,0x64d370e,0x78009c8,
-	0xaa2c008,0xa624048,0x6800008,0x80d3000,0x80d300f,0x64d0009,0x9c09149,0x60d0009,
-	0xc7f3e80,0x7c009c8,0x7c009c8,0xb60c223,0x4001223,0x4401223,0xba18188,0x40008c8,
-	0xb614288,0x6800049,0xaa0c188,0x6800049,0x6800009,0x7c00a49,0xc012bc0,0x78005c8,
-	0x92c620b,0x920624b,0x94c6209,0x7800789,0x9581209,0x60d2408,0x60d232e,0x64d3508,
-	0x9004248,0x7c00a09,0x908c248,0x7c006c9,0x920c248,0x7c00709,0xcb80003,0x64d390f,
-	0xc7f3680,0x0000000,0x60d3718,0x64d3510,0x908c250,0xa620009,0x60d3919,0x6bfffc9,
-	0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa10249,0x80d3601,
-	0xc780140,0x80d3603,0x80d3602,0x80d3603,0x80d3604,0x6800008,0x7c00748,0x7800648,
-	0xaa3c008,0x80d3d00,0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,
-	0x6800009,0x7c00649,0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,
-	0x7800748,0xa610008,0x0000000,0x80d3606,0x80d360f,0x7800649,0x680000a,0xa408289,
-	0x64f1c09,0x9205249,0x780060a,0xa804289,0xc015bc0,0x0000000,0xc780400,0x78005c9,
-	0x780058a,0xa80d289,0x7800a08,0xaa24288,0x0000000,0x64d3e08,0x9008208,0xaafbfc8,
-	0xa610008,0x7800588,0xc780100,0x7c005c8,0x78005c9,0x7c00589,0x7800748,0xaa5c008,
-	0x0000000,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
-	0x7800a09,0xaa10289,0x64d3e09,0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,
-	0x64d2009,0xbefc049,0x6800009,0x7c00749,0x80d3606,0x80d360f,0x78006c9,0x7800708,
-	0x780030a,0xb804289,0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0xc016080,
-	0x0000000,0x908c210,0x680c10a,0x7800289,0xa814248,0x2409248,0x4401249,0x5402249,
-	0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,
-	0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,0xb40d248,0x7800309,0xb40b248,
-	0x7000298,0x400128a,0x700028e,0x961060e,0x400128a,0x7000299,0x400128a,0x700028f,
-	0xc7f1480,0x961064f,0x908c210,0x7800289,0x2409248,0x5402249,0x680c00a,0x200a289,
-	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x64d370e,
-	0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,0x400128a,0x740028f,0x400128a,
-	0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,0x200e7ce,0x780028f,0x54033cf,
-	0x200e3ce,0x643500d,0x580f34d,0xbef804d,0x0000000,0x603510e,0x680400d,0x603520d,
-	0x6a0c00d,0x603500d,0x908c210,0x7800309,0xb83e248,0x4001208,0x920c210,0x7800349,
-	0xb40e248,0x64d330a,0x910828a,0x4001248,0x2408289,0x64ad50a,0x901028a,0xa433288,
-	0x6800008,0xc011f40,0x0000000,0x80ac00d,0xc7f0580,0x8030504,0x80d3000,0x80d1f30,
-	0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,0x80d1d00,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,
-	0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,0xc00c780,0x0000000,
-	0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80d3300,0x80ac009,
-	0xc7efa80,0x8007801,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,0x6c0000e,
-	0x200e7ce,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,
-	0x580f34d,0xbef804d,0x0000000,0xc7fdd40,0x680c00a,0x64d4a11,0x64d4b12,0x64d4c13,
-	0x64d4d14,0x64d3725,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x60d3718,0x5401a28,
-	0x9402a29,0x6800029,0x78006c9,0xa638009,0x60d3919,0x6a00009,0x6d00009,0x60d4e09,
-	0x60d4f09,0x60d5009,0x60d5109,0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,
-	0x60d3a09,0x7800789,0x680000a,0xa842289,0x7800a89,0x60d2109,0x80d2001,0x80d5300,
-	0x6800009,0x7c00a89,0x7800a09,0x680024a,0xa826289,0x64d3e09,0x9008249,0xbe14809,
-	0x680038a,0xbe0c409,0x680028a,0x680018a,0xa20c3c9,0x0000000,0x400c28a,0x64d3c09,
-	0x9002249,0x200a24a,0x64d2009,0xbefc049,0x0000000,0x60d210a,0x80d2001,0x64d320a,
-	0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x688888b,0x64d3709,
-	0x941024b,0x60d3709,0x64d3809,0x941024b,0x60d3809,0x80d3601,0x0000000,0x60d320a,
-	0xc7810c0,0x80d3603,0x64d2009,0xbefc049,0x0000000,0x80d2105,0x80d2001,0x64d320a,
-	0x980a00a,0x60d320a,0x9c0a00a,0x64d2009,0xbefc049,0x0000000,0x80d3601,0x0000000,
-	0x60d320a,0x80d3602,0x80d3603,0xc780c00,0x80d3604,0x78005c9,0x780058a,0xa80c289,
-	0x0000000,0x64d3e09,0x9008249,0xaafbfc9,0xa61c009,0x0000000,0x64d2309,0x920c249,
-	0x64d240a,0x940c289,0x60d240a,0x9004228,0xa60c008,0xc780640,0x80d5201,0x78006c9,
-	0xa224208,0x780030a,0xb807289,0x4807208,0xa614008,0xc017580,0x0000000,0xc7803c0,
-	0x0000000,0xa62c009,0x0000000,0x4c01208,0x64d3209,0x9c09009,0x60d3209,0x6bfffca,
-	0x6c0000a,0x60d380a,0x9809009,0x60d3209,0xc015600,0x0000000,0x80d3607,0x80d3601,
-	0x80d3608,0x80d3609,0x80d3604,0x6800008,0x7c00748,0x7800648,0xaa3c008,0x80d3d00,
-	0x78006c9,0x780068a,0xa40b289,0xb21c388,0x0000000,0x7c00748,0x6800009,0x7c00649,
-	0xc780180,0x60d3d08,0x6800009,0x7c00649,0x60d3d08,0x80d3605,0x7800748,0xa610008,
-	0x0000000,0x80d3606,0x80d360f,0x7800649,0x680000a,0xa40d289,0x7800789,0x78007ca,
-	0xa803289,0xc011d40,0x0000000,0x64f1d09,0x9205249,0x780060a,0xa804289,0xc00fe40,
-	0x0000000,0xc7804c0,0x78005c9,0x780058a,0xa810289,0x7800a08,0xaa30288,0x0000000,
-	0x64d3e08,0x9008208,0xaafbfc8,0xa61c008,0x7800588,0x78005c9,0xc011380,0x2408209,
-	0xc780100,0x0000000,0x78005c9,0x7c00589,0x7800748,0xaa5c008,0x0000000,0x64d0009,
-	0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800a09,0xaa10289,
-	0x64d3e09,0x9008249,0xaa18009,0x7800749,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
-	0x6800009,0x7c00749,0x80d3606,0x80d360f,0x78009c9,0x680000a,0xa86a289,0x680004a,
-	0xa446289,0xc011200,0x681ae04,0x64f1509,0x9c09449,0x60f1509,0x9809449,0x60f1509,
-	0x80d3609,0x64d0009,0x9c09049,0x60d0009,0x9809049,0x60d0009,0x6800009,0x780030a,
-	0x946d24a,0x60d3209,0x6800223,0x64d5309,0x7c00a89,0x78006e6,0x7800327,0xb8059e6,
-	0x6bfffe6,0x6c00026,0x60d3826,0x6800018,0x60d3718,0x68888a7,0x64d4e26,0x93e19a6,
-	0x96619e6,0x64d4f26,0x93e19a6,0x96419e6,0x64d5026,0x93e19a6,0x96219e6,0x64d5126,
-	0x93e19a6,0x96019e6,0x60d3827,0x64f1509,0x9c09589,0x60f1509,0xc010cc0,0x0000000,
-	0x6490b09,0x9c09609,0x9c09649,0x6090b09,0x64f1509,0x9c095c9,0x9c09609,0x9c09649,
-	0x9c096c9,0x9809509,0x98094c9,0x64f1f08,0x9383208,0xa6f8008,0x0000000,0x6435008,
-	0x580f208,0xbef8048,0x0000000,0x9809589,0xc780900,0x60f1509,0xc0100c0,0x681bc44,
-	0x6800049,0x780030a,0x946d24a,0x60d3209,0x68001e3,0x9829029,0x64d3727,0x92619a7,
-	0x541f9a6,0x60d4e26,0x92419a7,0x541f9a6,0x60d4f26,0x92219a7,0x541f9a6,0x60d5026,
-	0x92019a7,0x541f9a6,0x60d5126,0x6490b09,0x9809609,0x9c09649,0x6090b09,0x64f1509,
-	0x98095c9,0x9809609,0x9809649,0x98096c9,0x9c09509,0x9c094c9,0x9c09749,0x60f1509,
-	0x7800789,0x7c00b89,0x78007c9,0x7c00789,0x78006c9,0x7800708,0x780030a,0xb804289,
-	0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0xc00e100,0x0000000,0x78006c8,
-	0xaa10008,0x680bfca,0xc001740,0x4401208,0x78006c8,0x7800309,0xb846248,0x0000000,
-	0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,0x7800709,
-	0x780034a,0xb40d289,0x64d330a,0x910828a,0x4001249,0x2409289,0x64ad50a,0x921028a,
-	0xa410289,0xc00b5c0,0x0000000,0x80ac00e,0xc7e9580,0x8030504,0x64d5309,0xaa1c009,
-	0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,0xc7f8e00,0x0000000,
-	0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0x64d3725,0xb60c223,0x4001223,
-	0x4401223,0xba18188,0x40008c8,0xb614288,0x6800049,0xaa0c188,0x6800049,0x6800009,
-	0x7c00a49,0xc000980,0x7800308,0xc001580,0x6800011,0x6a00014,0x6d00014,0x60d4d14,
-	0xc001f80,0x680c00a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0x60d4d1e,0x9402a29,0x6800029,
-	0x90212a8,0x9581b8a,0xc780280,0x680c28a,0x401528a,0x78006c8,0x4002208,0x78002c9,
-	0xb004248,0xc001000,0x78006d1,0x680c50a,0xc001a80,0x0000000,0x78009c8,0xaa18008,
-	0xa614048,0x0000000,0x64f1f08,0x93e1208,0xa6f8008,0xc7e8540,0x0000000,0x7800289,
-	0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,0x200a289,0x740028f,0x400128a,
-	0x58103cf,0x740028f,0x400128a,0x7800a66,0xaa44026,0x68fffe6,0x6800027,0x960f466,
-	0x90109a5,0x9410466,0x92619a5,0x97e1466,0x92419a5,0x541f4a6,0x941f4a7,0x92219a5,
-	0x541f4e6,0x941f4e7,0x92019a5,0x541f526,0x941f527,0x7400291,0x400128a,0x5810451,
-	0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,0x7400293,
-	0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,0xcc00000,
-	0x7400294,0x643500e,0x580f38e,0xbef804e,0x0000000,0x690000e,0x6c0000e,0x200e7ce,
-	0x780028f,0x540434f,0x54023cf,0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,
-	0x6a0c00d,0x603500d,0x7c00291,0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,
-	0x690000e,0x6c0000e,0x200e7ce,0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,
-	0xbef804d,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,
-	0x6035010,0x643500d,0x580f34d,0xbef804d,0xcc00000,0x0000000,0x400065a,0x700029a,
-	0x400128a,0x7000289,0x9610689,0x4000cb1,0x4000c5b,0x400128a,0x700029b,0x400128a,
-	0x7000289,0x96106c9,0x400128a,0x700029c,0x400128a,0x7000289,0x9610709,0x400128a,
-	0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,0x7000289,
-	0x9610789,0x4000624,0x920f99b,0x68fffe7,0xa8109e6,0x6900027,0xa80b9e6,0x68888a4,
-	0x93e199b,0x9661926,0x93e199c,0x9641926,0x93e199d,0x9621926,0x93e199e,0xcc00000,
-	0x9601926,0x6bfffe4,0xcc00000,0x6c00024,0x901091b,0x93e199b,0x680001b,0x9829069,
-	0xcc00000,0x97e16e6,0x64d1602,0x9162082,0xaa0c002,0xc7fff40,0x0000000,0xc7e5ec0,
-	0x0000000,0xcb80004,0x64f1f08,0x93e1248,0xaa38009,0x9042248,0xc7e5d00,0x0000000,
-	0x7800ac9,0xaa10009,0x6800049,0xc7e5bc0,0x7c00b09,0x93e1248,0xaa10009,0x9042248,
-	0xc7e5a80,0x0000000,0x64f010a,0x9c0a20a,0x60f010a,0xaa14009,0x680324a,0xaa0c049,
-	0x680348a,0x680390a,0x7800088,0x7800309,0xb80e248,0x4001208,0x6800008,0x78000c9,
-	0x4001249,0x7c000c9,0x64d330b,0x91082cb,0x240c2c9,0x64ad50b,0x90102cb,0xa4032cc,
-	0x0000000,0x980a54a,0x7c00088,0x950c288,0xa60c008,0x7800309,0x980a50a,0xa403248,
-	0x0000000,0x980a58a,0x78000c8,0x64d3309,0x9108249,0xa403248,0x60f4108,0x980a54a,
-	0x980a7ca,0x60f1f0a,0x681ae0a,0xa404284,0x680004a,0xc0115c0,0x7c00aca,0xc7e4ec0,
-	0x0000000,0x64f4b08,0x9384248,0xaa10009,0x64f4a08,0xc7e4d40,0x0000000,0x920c248,
-	0x780034a,0xb408289,0x4001249,0x5410209,0x60f4a08,0x6800048,0x7800309,0x948c209,
-	0x60f4b08,0xc7e4a40,0x0000000,0x64ac11f,0x80ac102,0x80ac200,0x680c008,0x6094008,
-	0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0x6803c08,0x60d2208,
-	0xcc00000,0x0000000,0xcc00000,0x0000000,0xc000c40,0x0000000,0x780034a,0x400128a,
-	0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,0x968c2c9,0x609080b,
-	0x780030a,0x541028a,0x980a7ca,0x609300a,0x681010a,0x6c3474a,0x609070a,0x6490b0a,
-	0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,
-	0x200a7ca,0x609440a,0x6a0000a,0x6c0000a,0x200a7ca,0x609450a,0x780030a,0x400128a,
-	0x540528a,0x7c00bca,0xcc00000,0x0000000,0xc000600,0x0000000,0x8095003,0x8095000,
-	0x6820889,0x6c00209,0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,0xa21004a,
-	0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,
-	0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,
-	0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,
-	0x64f4908,0x9c08048,0x60f4908,0x6401008,0x9808008,0xc7e76c0,0x6001008,0x6bc0008,
-	0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,
-	0x6c00408,0x60d1f08,0x7800248,0xaa0c048,0x6a10408,0x6a19408,0x60d1f08,0x64d1e08,
-	0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,0x60f4109,
-	0x9210208,0xc063100,0x60d2108,0xc063080,0x80d2107,0x6800008,0x60f1b08,0x7800309,
-	0x946d209,0x60d3208,0x6940008,0x6c00008,0x20087c8,0x60f2008,0x6803908,0x64d3309,
-	0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,0x7800348,
-	0x960f248,0x60f1e09,0xc062ac0,0x80d2100,0x7800148,0x7800189,0x680040a,0x240a20a,
-	0x3409289,0x9605248,0x60d1f09,0x7800248,0xa610008,0x78001c8,0xc0627c0,0x60d2108,
-	0x7800108,0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800249,
-	0xaa1c049,0x0000000,0x80d1f20,0x80d1f20,0x64f1c08,0xc780240,0x9206208,0x80d1f20,
-	0x64ad008,0xc000d00,0x9206208,0x60f1c0b,0x64ad008,0x9206208,0x7800049,0xc06b1c0,
-	0x2408248,0xc062100,0x60d2108,0xc06b2c0,0x0000000,0x680d483,0x681acc4,0x80d300f,
-	0x64d0008,0x9c08008,0x60d0008,0x9808008,0x9808048,0x9808088,0x9c080c8,0x9c08148,
-	0x9c08188,0x9c081c8,0x60d0008,0x80d3609,0x9c08048,0x60d0008,0x9808048,0x60d0008,
-	0x64f4008,0x9808048,0x60f4008,0x80ac005,0xc7ea980,0x8030504,0x6490b08,0x9808008,
-	0x98080c8,0x6090b08,0x9c08008,0x9c080c8,0x6090b08,0x6490b08,0x9808608,0x9c08648,
-	0x6090b08,0x6401008,0x9808008,0xc7e8640,0x6001008,0x5401248,0x2009209,0x681fc8a,
-	0x2009289,0xcb80009,0x680000b,0xcc00000,0x6c0000b,0x684040b,0xcc00000,0x6c0104b,
-	0x688080b,0xcc00000,0x6c0208b,0x68c0c0b,0xcc00000,0x6c030cb,0x690100b,0xcc00000,
-	0x6c0410b,0x694140b,0xcc00000,0x6c0514b,0x680404b,0xcc00000,0x6c0618b,0x684444b,
-	0xcc00000,0x6c071cb,0x688484b,0xcc00000,0x6c0820b,0x68c4c4b,0xcc00000,0x6c0924b,
-	0x690504b,0xcc00000,0x6c0a28b,0x694544b,0xcc00000,0x6c0b2cb,0x680808b,0xcc00000,
-	0x6c0c30b,0x684848b,0xcc00000,0x6c0d34b,0x688888b,0xcc00000,0x6c0e38b,0x68c8c8b,
-	0xcc00000,0x6c0f3cb,0x690908b,0xcc00000,0x6c1040b,0x694948b,0xcc00000,0x6c1144b,
-	0x680c0cb,0xcc00000,0x6c1248b,0x684c4cb,0xcc00000,0x6c134cb,0x688c8cb,0xcc00000,
-	0x6c1450b,0x68ccccb,0xcc00000,0x6c1554b,0x690d0cb,0xcc00000,0x6c1658b,0x694d4cb,
-	0xcc00000,0x6c175cb,0x681010b,0xcc00000,0x6c1860b,0x685050b,0xcc00000,0x6c1964b,
-	0x689090b,0xcc00000,0x6c1a68b,0x68d0d0b,0xcc00000,0x6c1b6cb,0x691110b,0xcc00000,
-	0x6c1c70b,0x695150b,0xcc00000,0x6c1d74b,0x695014b,0xcc00000,0x6c1d78b,0x681454b,
-	0xcc00000,0x6c1e7cb,0x685494b,0xcc00000,0x6c1f80b,0x6894d4b,0xcc00000,0x6c2084b,
-	0x689514b,0xcc00000,0x6c2088b,0x68d554b,0xcc00000,0x6c218cb,0x691418b,0xcc00000,
-	0x6c2290b,0x691458b,0xcc00000,0x6c2294b,0x695498b,0xcc00000,0x6c2398b,0x6954d8b,
-	0xcc00000,0x6c239cb,0x681918b,0xcc00000,0x6c24a0b,0x681958b,0xcc00000,0x6c24a4b,
-	0x68581cb,0xcc00000,0x6c25a8b,0x68585cb,0xcc00000,0x6c25acb,0x68589cb,0xcc00000,
-	0x6c25b0b,0x6898dcb,0xcc00000,0x6c26b4b,0x68991cb,0xcc00000,0x6c26b8b,0x68995cb,
-	0xcc00000,0x6c26bcb,0x68d820b,0xcc00000,0x6c27c0b,0x68d860b,0xcc00000,0x6c27c4b,
-	0x68d8a0b,0xcc00000,0x6c27c8b,0x68d8e0b,0xcc00000,0x6c27ccb,0x6430008,0x64f4008,
-	0x9c08048,0x60f4008,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
-	0x0000000,0xc07aec0,0x0000000,0x7800709,0x4001249,0x780030a,0x400128a,0xe00024a,
-	0x80d1f30,0x6bc0008,0x60d1f08,0xf000280,0x5408249,0x961024a,0xcc00000,0x60d3309,
-	0x6430008,0x78006c9,0x780070a,0x780030b,0xb8042c9,0x4001249,0x6800009,0x400128a,
-	0x40012cb,0x4000309,0xe0002ca,0x0000000,0x0000000,0x950824a,0xf0002c0,0x200b30b,
-	0x961024b,0x60d3309,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,
-	0x0000000,0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,
-	0x0000000,0x80d5300,0xc07a280,0x0000000,0x80d1f30,0x6bc0008,0xcc00000,0x60d1f08,
-	0x7800708,0x7800349,0xb809248,0x6804008,0x6800409,0x680080a,0x740020a,0xd07ffc9,
-	0x4001208,0xcc00000,0x0000000,0x6435008,0x580f208,0xbecc048,0x0000000,0x64ad608,
-	0x6035108,0x7800309,0x4001249,0x5801249,0x401f249,0x5805249,0x5405249,0x6035209,
-	0x5401249,0x2008248,0x60ad608,0x6be4008,0x6035008,0x6435008,0x580f208,0xbef8048,
-	0x0000000,0xcc00000,0x0000000,0xc07be80,0x7800608,0x64d3e08,0x9008288,0xaafbfca,
-	0x0000000,0x60f1c0b,0x7800a08,0xaa10288,0xa60c00a,0x7800588,0x7c005c8,0x7800608,
-	0x78005c9,0xc001ac0,0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,0x7c005c8,
-	0xc07b940,0x7800608,0x64f1d0a,0x900824b,0x9408289,0x920624b,0x9606289,0x6804b09,
-	0x6803fce,0xae14049,0x80f2308,0x7800588,0xcc00000,0x7c005c8,0x64f2408,0x91e2208,
-	0xaa18048,0x64d3e08,0x9008388,0xa60ffce,0xc7ffd40,0x4401249,0x60f1d0a,0x80f2308,
-	0x64f2408,0x9208208,0xaa17fc8,0x64d3e08,0x9008208,0xaaebfce,0x0000000,0x60f1d0b,
-	0xa60ffce,0x64d3e08,0x9008388,0x7800a08,0xaa10288,0xa60c00e,0x7800588,0x7c005c8,
-	0x7800608,0x78005c9,0xc000e80,0x2408248,0x78005c8,0x7c00588,0x7800608,0xcc00000,
-	0x7c005c8,0xc07ad00,0x7800588,0x92c620b,0x920624b,0x94c6209,0x7800b89,0x9581209,
-	0x5410b88,0x78006ca,0x680a009,0x2009289,0x64d2408,0x7400248,0x7800309,0xb80324a,
-	0x400128a,0x680000a,0x680a009,0x2009289,0x7000248,0x940cb88,0x9021228,0x9581b88,
-	0x78006c8,0x4001208,0x7800309,0xb80d248,0x4001208,0x2408248,0xb628088,0x4401208,
-	0xc07de00,0x0000000,0x7804009,0x91c1209,0x7c007c8,0x9106209,0xcc00000,0x7c00608,
-	0x5801248,0x680400a,0x2009289,0x7000249,0x91c1289,0xa210048,0x9106209,0x90c1289,
-	0x9006209,0x7c007ca,0xcc00000,0x7c00608,0xaa24008,0x680000c,0xba14008,0x6800009,
-	0x5401208,0xc780100,0x4401308,0x240c209,0x540130c,0x7c0064c,0x78006c8,0x4001208,
-	0x7800309,0xb003248,0x0000000,0x6800008,0xcc00000,0x7c00688,0x78007c9,0xaa10009,
-	0x6800049,0xcc00000,0x7c009c9,0x6800009,0x6c00449,0x60d3009,0x6800089,0xcc00000,
-	0x7c009c9,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,0xa6ec009,0x0000000,
-	0x80f2306,0x64f2409,0x90c2249,0xa6f4009,0x0000000,0x6490909,0xbefc049,0x0000000,
-	0x6490b09,0x9809009,0x98090c9,0x6090b09,0x9c09009,0x9c090c9,0x6090b09,0xcc00000,
-	0x0000000,0x6803c0e,0x78006c9,0x780070a,0x7800308,0xb804209,0x4001249,0x6800009,
-	0x400128a,0x950c389,0xa60c009,0x7c00089,0x980e50e,0x7800308,0xb803209,0x7c000ca,
-	0x980e58e,0x64d3308,0x9108208,0xa403288,0x0000000,0x980e54e,0x980e7ce,0x4000c0e,
-	0x7800709,0x5404209,0x64acc0a,0xe000288,0x64ac326,0x78006ca,0x540428a,0xf0002c0,
-	0x20262e6,0x20262a6,0x7800709,0x5403209,0x64acc0a,0xe000288,0x64ac410,0x78006ca,
-	0x540428a,0xf0002c0,0x20102d0,0x2010290,0x780070a,0x6a0002d,0xa21004a,0x6c0002d,
-	0x698002d,0x6c0002d,0x202d7ed,0x78006ca,0x400328a,0x540528a,0x202d2ad,0x694002f,
-	0x6c0002f,0x202f7ef,0x78006c9,0x4003249,0x7800308,0xb003209,0x4001208,0x2409209,
-	0x5405249,0x202f26f,0x78006c8,0x7800309,0xa403248,0x4001208,0x6800008,0x6493009,
-	0x9008249,0xa4fe209,0x6800209,0x680800a,0x8093100,0x6493208,0x92102c8,0x740028b,
-	0x400128a,0x90102c8,0x740028b,0xd07fe89,0x400128a,0x78006c9,0x4003249,0x7800308,
-	0xb003209,0x4001208,0x2409209,0x5405249,0x6940008,0x6c00008,0x20087c8,0x2008248,
-	0x6035108,0x8035210,0x6a08008,0x6035008,0x6435008,0x580f208,0xbef8048,0x0000000,
-	0x643530d,0x900c34d,0xa6f800d,0x0000000,0xc0063c0,0x60f1f0e,0x64d3c08,0x9004208,
-	0xaa10048,0x6800049,0x4440b6d,0x68000c9,0x7c00b49,0xc004bc0,0x0000000,0x6435008,
-	0x580f208,0xbef8048,0x0000000,0xc005280,0x0000000,0xc005680,0x0000000,0x6435008,
-	0x580f208,0xbef8048,0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x7800b49,
-	0xaa14049,0x6803908,0xaa0c089,0x6803248,0x6803488,0x40003b0,0x9408388,0xb220049,
-	0x60f1f0e,0x4401249,0x7c00b49,0xc005a00,0x0000000,0xc7ff800,0x4420bef,0xc004340,
-	0x0000000,0x6800048,0xcc00000,0x7c00ac8,0xa65c188,0x64d4e09,0x901f249,0x60d4a09,
-	0x60d4b09,0x60d4c09,0x60d4d09,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0xc003680,
-	0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,0x60d4b1c,
-	0x60d4c1d,0xcc00000,0x60d4d1e,0x68000c9,0xa420248,0x64d4a09,0x901f249,0x78006c8,
-	0xa610008,0x4000289,0x6a0000a,0x6d0000a,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,
-	0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x60d4e0a,0x60d4f0a,0x60d500a,0x60d510a,
-	0xc002e40,0x80d5201,0x64d4a08,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
-	0x60d4b1c,0x60d4c1d,0xcc00000,0x60d4d1e,0x6800149,0xa422248,0x901f25b,0x68fffc9,
-	0x6cfffc9,0x60d4a09,0x60d4b09,0x60d4c09,0x60d4d09,0x78006c9,0x780030a,0xb807289,
-	0x0000000,0x60d4a32,0x60d4b32,0x60d4c32,0xc780180,0x60d4d32,0x60d4a1b,0x60d4b1c,
-	0x60d4c1d,0x60d4d1e,0x6b00049,0x6d00049,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
-	0x64d320a,0x69ffe49,0x60d3209,0xc002380,0x80d5201,0xcc00000,0x60d320a,0x64d3309,
-	0x9108249,0x780070a,0xa80824a,0x680004a,0xa440288,0x78006c9,0xaa10009,0x64d4a09,
-	0x901f249,0xa60c009,0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa41628b,0x90612a8,
-	0xaa0c00a,0xc7feb00,0x0000000,0x64d4a09,0x901f249,0x60d4a09,0x60d4b09,0x60d4c09,
-	0x60d4d09,0x60d4a32,0x60d4b32,0x60d4c32,0x60d4d32,0x64d320a,0x69ffe49,0x60d3209,
-	0xc001a40,0x80d5201,0xcc00000,0x60d320a,0x9010a89,0x9010adb,0x91e12aa,0x91e12eb,
-	0x200a2ca,0xaa1800a,0x6bfffec,0xaa1008a,0x680006c,0x6bfffea,0x680002b,0x920f289,
-	0x960fa8a,0x920f29b,0x960faca,0x93c12aa,0x93c12eb,0x200a2ca,0x6bfffcb,0xaa2400a,
-	0x960fb0b,0x680004b,0xaa1808a,0x960fb0b,0x6bfffcb,0x960fa8b,0x680000b,0x960facb,
-	0xc000780,0x0000000,0xcc00000,0x0000000,0xa638108,0x64d4e09,0x901f249,0xa60c009,
-	0xcc00000,0x80d5201,0x78006cb,0x780030a,0xa40428b,0x90612a8,0xaae800a,0xc7fd580,
-	0xc7ff500,0x0000000,0xa6281c8,0x68fffec,0x6cfffec,0x6b0006a,0x6d0006a,0x680002b,
-	0xc000180,0x0000000,0xcc00000,0x0000000,0xcc00000,0x80d5201,0x64d4a08,0x64d4e0a,
-	0x60d4a2a,0x60d4b2a,0x60d4c2a,0x60d4d2a,0x60d4a2b,0x60d4b2b,0x60d4c2b,0x60d4d2b,
-	0x60d4e2c,0x60d4f2c,0x60d502c,0x60d512c,0xc000740,0x80d5201,0x60d4e0a,0x60d4f0a,
-	0x60d500a,0x60d510a,0x64d4a0a,0x60d4a08,0x60d4b08,0x60d4c08,0x60d4d08,0x60d4a1b,
-	0x60d4b1c,0x60d4c1d,0x60d4d1e,0x80d5201,0x60d4e0a,0x60d4f0a,0x60d500a,0x60d510a,
-	0x60d4a0a,0x60d4b0a,0x60d4c0a,0x60d4d0a,0x60d4a1b,0x60d4b1c,0x60d4c1d,0xcc00000,
-	0x60d4d1e,0x80d5602,0x64d5709,0x9005249,0xaaf4009,0x0000000,0xcc00000,0x0000000,
-	0x8006402,0x7800acf,0xa60c00f,0xc7d3fc0,0x0000000,0x6435008,0x580f208,0xbef8048,
-	0x0000000,0xa62004f,0xc000cc0,0x0000000,0x68000c8,0xc001080,0x7c00ac8,0xc7d3cc0,
-	0x0000000,0xa6240cf,0x6435308,0x900c208,0xa6f8008,0x6800008,0x7800b09,0xaa0c009,
-	0x7c00ac8,0x8030508,0xc7d3a00,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,
-	0x7800bc8,0x6a00009,0x6c00009,0x20097c9,0x200a209,0xb8072ad,0x240a2ad,0x6980009,
-	0x6c00009,0x20097c9,0xc780340,0x202d289,0xb40b26d,0x6980009,0x6c00009,0x20097c9,
-	0x200a209,0xb8062ad,0x240a2ad,0x6a00009,0x6c00009,0x20097c9,0x202d289,0x603512d,
-	0x8035210,0x6b08808,0x6035008,0xcc00000,0x4020b6d,0x7808908,0x7c08208,0x7808948,
-	0x7c08248,0x7808988,0x7c08288,0x78089c8,0x7c082c8,0x7808808,0x7c08308,0x7808848,
-	0x7c08348,0x7808888,0x7c08388,0x78088c8,0x7c083c8,0xcc00000,0x0000000,0x6435008,
-	0x580f208,0xbef8048,0x0000000,0x7808a08,0x7c08108,0x7808a48,0x7c08148,0x7808a88,
-	0x7c08188,0x7808ac8,0x7c081c8,0x7808b08,0x7c08008,0x7808b48,0x7c08048,0x7808b88,
-	0x7c08088,0x7808bc8,0x7c080c8,0x6940008,0x6c00008,0x20087c8,0x7800309,0x4001249,
-	0x5405249,0x2008248,0xb80322f,0x0000000,0x242f26f,0x603512f,0x8035210,0x6a08008,
-	0x6035008,0xcc00000,0x4020bef,0x64f1508,0x9c08308,0x9c085c8,0x9c08608,0x9c08648,
-	0x9c086c8,0x9808508,0x98084c8,0x60f1508,0x78006c9,0x7800708,0x780030a,0xb804289,
-	0x4001249,0x6800009,0x4001208,0x960f248,0x60f1e09,0x64f1f08,0x9384208,0xa6f8008,
-	0x0000000,0x80d300f,0x80f4003,0x64f1508,0x9808248,0x9c08508,0x9c084c8,0x60f1508,
-	0x64d0009,0x9c09009,0x60d0009,0x9809009,0x60d0009,0x9c08248,0x9808508,0x98084c8,
-	0x9808308,0x60f1508,0xcc00000,0x80f4000,0x6432434,0xaa0c034,0x8032400,0x6699334,
-	0x64ac034,0xaa1c074,0xaa180b4,0xaa14134,0xaa100f4,0x0000000,0xc7ffd80,0x0000000,
-	0x8030504,0xc7ffcc0,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h b/drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h
deleted file mode 100755
index 89a55599298e..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/encoder/half_encoder_linux.h
+++ /dev/null
@@ -1,141 +0,0 @@
-const u32 MicroCode[] __attribute__((aligned(8))) = {
-	0x6810001,0x6800000,0xd000001,0x7400040,0xc0009c0,0x0000000,0xc00fc00,0x0000000,
-	0xc000e00,0x0000000,0x6bffc40,0x7c00000,0x6030400,0x0400000,0xc780e40,0x0000000,
-	0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0xc78eb00,0x0000000,0xc788e80,0x64d3008,0xc780880,0x0000000,0xc78eb40,
-	0x64f1f08,0xcc00000,0x0400000,0x80d1a00,0x80ac300,0x80ac400,0xcc00000,0x0000000,
-	0x64ac808,0x7c00108,0x64ac908,0x7c00148,0x64ac608,0x7c00188,0x64ac508,0x7c001c8,
-	0x64ac708,0x7c00208,0x64aca08,0x7c00388,0x64acb08,0x7c00048,0xcc00000,0x0000000,
-	0xcc00000,0x0000000,0x80d2001,0x64d2008,0xbefc048,0xcc00000,0x0000000,0x6432421,
-	0xaa0c021,0x8032400,0x6699321,0x64ac021,0xaaec021,0xaa34061,0xa60c0a1,0xc7816c0,
-	0x0000000,0xa60c121,0xc7844c0,0x0000000,0xa6100e1,0x0000000,0xc782980,0x0000000,
-	0xc7ffbc0,0x0000000,0xc07f580,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
-	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19c08,
-	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x6a10808,0x60d1f08,0x6a00008,0x60d1f08,
-	0x6a0a008,0x60d1f08,0xc07f400,0x80d2100,0x7800148,0x4404208,0xc07f300,0x60d2108,
-	0xc07f280,0x80d2100,0x7800108,0x4404208,0xc07f180,0x60d2108,0xc07f100,0x80d2101,
-	0x80d1f20,0x64d3109,0x9010209,0x400f208,0x5804208,0x4401208,0x7c00308,0xc07eec0,
-	0x60d2108,0x9210209,0x400f208,0x5804208,0x4401208,0x7c00348,0xc07ed00,0x60d2108,
-	0x80d1f30,0x80d1f30,0x64d3108,0x9210208,0x6810e09,0xa803248,0xc7802c0,0x80d1f20,
-	0x80d1f30,0xc07ea40,0x80d2100,0xc07e9c0,0x80d2100,0xc07e940,0x80d2100,0xc07e8c0,
-	0x80d2104,0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x80ac007,0x8007801,
-	0xc7fe7c0,0x0000000,0xc07e180,0x0000000,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,
-	0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a1a008,
-	0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0xc07e180,0x80d2100,0xc07e100,0x80d2100,
-	0x80d1f20,0x80d1f20,0xc07e000,0x80d2100,0xc07df80,0x80d2100,0xc07df00,0x80d2100,
-	0x80d1f20,0x80d1f40,0x7800048,0xc004080,0x441a208,0xc07dd40,0x60d2108,0xc003f80,
-	0x6800008,0xc07dc40,0x60d2108,0xc07dbc0,0x80d2100,0x80d1f20,0x80d5500,0x80d1f20,
-	0x80d1f20,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,0x60d1c08,
-	0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x64d1608,
-	0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,0x0000000,
-	0x80ac008,0x8007801,0xc7fd340,0x0000000,0xc00c1c0,0x0000000,0x6490b08,0x9c08608,
-	0x9c08648,0x6090b08,0xc00cb00,0x0000000,0xc00bf40,0x0000000,0xc07ca80,0x0000000,
-	0x64ac408,0x4001208,0x60ac408,0x6bc0008,0x60d1f08,0x64d1e08,0x9c087c8,0x60d1e08,
-	0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,0x60d1f08,0x6a19408,0x60d1f08,
-	0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9008248,0x7c00089,0x9108248,0x7c000c9,
-	0x9210208,0xc07c840,0x60d2108,0xc07c7c0,0x80d2107,0x6800008,0x7c00248,0x60f1b08,
-	0x7800309,0x946d209,0x60d3208,0x6940008,0x6c00008,0x2008308,0x60f2008,0x6803908,
-	0x64d3309,0x9008249,0x9508209,0x9808508,0x9808548,0x98087c8,0x60f1f08,0x7800309,
-	0x7800348,0x960f248,0x60f1e09,0xc07c1c0,0x80d2100,0x7800148,0x7800189,0x680040a,
-	0x240a20a,0x3409289,0x9605248,0x60d1f09,0x78001c8,0xc07bf40,0x60d2108,0x7800108,
-	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
-	0x64f1c08,0x9206208,0x7800049,0xc001e80,0x2408248,0xc07bb40,0x60d2108,0x80d3d00,
-	0xc001f40,0x0000000,0x68098c3,0x80d300f,0x64d0008,0x9808008,0x9808048,0x9808088,
-	0x60d0008,0x80ac005,0x8007801,0xc7fb900,0x0000000,0xc00a780,0x0000000,0x6490b08,
-	0x9808608,0x9c08648,0x6090b08,0xc00b0c0,0x0000000,0xc00a500,0x0000000,0xc07b040,
-	0x0000000,0x64f1508,0x9c08508,0x9c084c8,0x9c08588,0x9c08448,0x9c08488,0x60f1508,
-	0x9808488,0x9808448,0x98085c8,0x9808608,0x98086c8,0x60f1508,0x6bc0008,0x60d1f08,
-	0x64d1e08,0x9c087c8,0x60d1e08,0x6800008,0x6c00408,0x60d1f08,0x6800048,0x6c00408,
-	0x60d1f08,0x6a10408,0x60d1f08,0x64d1e08,0x98087c8,0x60d1e08,0x64d3308,0x9210208,
-	0xc07ac80,0x60d2108,0xc07ac00,0x80d2105,0x6800048,0x7c00248,0x60f1b08,0x7800309,
-	0x946d209,0x60d3208,0x7800309,0x7800348,0x960f248,0x60f1e09,0xc07a900,0x80d2100,
-	0x7800148,0x7800189,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x7800108,
-	0x7800209,0x680040a,0x240a20a,0x3409289,0x9605248,0x60d1f09,0x80d1f20,0x80d1f20,
-	0x80d1f20,0x64f1d08,0x9206208,0x7800049,0xc000640,0x2408248,0xc07a300,0x60d2108,
-	0x80d3d00,0x80d5300,0xc001480,0x0000000,0x680c383,0x6800008,0x6c00448,0x60d3008,
-	0x64d0008,0x9808008,0x9808048,0x9808088,0x60d0008,0x80ac005,0x8007801,0xc7fa000,
-	0x0000000,0x0800000,0x7800008,0xc7f9780,0x6030408,0x6800009,0xb005248,0x2409209,
-	0x5401208,0xcc00000,0x4401208,0xcc00000,0x5401209,0x6bfffda,0x6c0001a,0x6800009,
-	0x680001b,0x6c0001b,0x400071b,0x680000b,0x680c00e,0x680100f,0x740039a,0x400138e,
-	0x7400389,0x400138e,0x740039b,0x400138e,0x740038b,0x400138e,0xaee004f,0x44013cf,
-	0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x680400d,0x603520d,0x6a0c00d,
-	0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40403cf,0xb611e8f,0x680800d,
-	0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680100f,0xb8053cd,0x0000000,
-	0x404038e,0xc7fff40,0x40403cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d371a,0x60d391b,
-	0x60d381a,0x60d3a1b,0xcc00000,0x0000000,0x6a0001d,0x6d0001d,0x6a0001e,0x6d0001e,
-	0x6a0001f,0x6d0001f,0x6a00020,0x6d00020,0x690000a,0x680001b,0x6c0001b,0x400071b,
-	0x6800009,0x680c00e,0x680064f,0x740039b,0x400138e,0x7400389,0x400138e,0x740039d,
-	0x400138e,0x740038a,0x400138e,0x740039e,0x400138e,0x740038a,0x400138e,0x740039f,
-	0x400138e,0x740038a,0x400138e,0x74003a0,0x400138e,0x740038a,0x400138e,0xaeb004f,
-	0x44013cf,0x690000e,0x6c0000e,0x200e30e,0x680000f,0x603510e,0x6803e8d,0x603520d,
-	0x6a0c00d,0x603500d,0x643500d,0x580f34d,0xbef804d,0x0000000,0x40193cf,0xb611e8f,
-	0x6807d0d,0xc7ffd00,0x200e34e,0x64d330d,0x900834d,0x680000e,0x680064f,0xb8053cd,
-	0x0000000,0x401938e,0xc7fff40,0x40193cf,0x7c0028e,0x44013cf,0x7c002cf,0x60d391b,
-	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x60d4a1d,0x60d4a1d,0x60d3a1b,0x60d4e1d,
-	0x60d4f1e,0x60d501f,0x60d5120,0xcc00000,0x0000000,0xaa10008,0x64d370e,0xcb80003,
-	0x64d390f,0xc7f7200,0x0000000,0x60d371a,0x64d3510,0x908c250,0xa620009,0x60d391b,
-	0x6bfffc9,0x6c00009,0x60d3809,0x6800009,0x6c00009,0x60d3a09,0x9004250,0xaa1c249,
-	0x80d3601,0x80d3603,0x80d3605,0x80d3606,0xc780200,0x80d360f,0x80d3602,0x80d3603,
-	0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0x680c10a,0x7800289,0xa814248,
-	0x2409248,0x4401249,0x5402249,0x680c00a,0x200a289,0x740028e,0x400128a,0x581038e,
-	0x740028e,0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400528a,0x78002c9,
-	0xb40d248,0x7800309,0xb40b248,0x700029a,0x400128a,0x700028e,0x961068e,0x400128a,
-	0x700029b,0x400128a,0x700028f,0xc7f6380,0x96106cf,0x908c210,0x7800289,0x2409248,
-	0x5402249,0x680c00a,0x200a289,0x64d0009,0x9384249,0xa6f8009,0x0000000,0x64d3609,
-	0xa6ec009,0x0000000,0x64d370e,0x64d390f,0x740028e,0x400128a,0x581038e,0x740028e,
-	0x400128a,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x690000e,0x6c0000e,
-	0x200e30e,0x780028f,0x54033cf,0x200e3ce,0x603510e,0x680400d,0x603520d,0x6a0c00d,
-	0x603500d,0x908c210,0x7800309,0xb830248,0x4001208,0x920c210,0x7800349,0xb82c248,
-	0x6800008,0x80d3000,0x80d1f30,0x6bc0008,0x60d1f08,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x64d1608,0xbefc108,0x0000000,0x6800008,0x6e00008,
-	0x60d1c08,0x80d1d00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x64d1608,0xbefc108,0x0000000,0x64d1b08,0x9808648,0x60d1b08,0x64d1608,0xbefc108,
-	0x0000000,0x7800188,0x4001208,0x7c00188,0x7800208,0x4002208,0x7c00208,0x80ac009,
-	0x8007801,0xc7f4e00,0x0000000,0x7c00288,0x403f248,0x7c002c9,0x5403208,0x690000e,
-	0x6c0000e,0x200e30e,0x200e20e,0x680400f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,
-	0x0000000,0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,
-	0x643500d,0x580f34d,0xbef804d,0x0000000,0xc7fe1c0,0x680c00a,0x64d4a11,0x64d4b12,
-	0x64d4c13,0x64d4d14,0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0x64d3510,0x908c250,
-	0xa62c009,0x60d391b,0x6a00009,0x6d00009,0x60d4e09,0x60d4f09,0x60d5009,0x60d5109,
-	0x6800009,0x6c00009,0x60d3a09,0x80d5201,0x80d3607,0x80d3601,0x80d3608,0x80d3609,
-	0x80d3604,0x80d3605,0x80d3606,0x80d360f,0x908c210,0xaa10008,0x680bfca,0xc000ec0,
-	0x4401208,0x908c210,0x7800309,0xb82b248,0x0000000,0x64d0009,0x9384249,0xa6f8009,
-	0x0000000,0x64d3609,0xa6ec009,0x0000000,0x920c290,0x7800349,0xb80c24a,0x0000000,
-	0x64d5309,0xaa1c009,0x0000000,0x60d2109,0x80d2001,0x64d2009,0xbefc049,0x0000000,
-	0xc7fe040,0x0000000,0x64d390f,0x64d4a11,0x64d4b12,0x64d4c13,0x64d4d14,0xc0006c0,
-	0x7800308,0xc000e40,0x6800011,0x6a00014,0x6d00014,0x60d4d14,0xc001740,0x680c00a,
-	0x60d4a1d,0x60d4b1e,0x60d4c1f,0x60d4d20,0xc780280,0x680c28a,0x401528a,0x908c210,
-	0x4002208,0x78002c9,0xb004248,0xc0009c0,0x908c450,0x680c50a,0xc001340,0x0000000,
-	0xc7f3040,0x0000000,0x7800289,0x240a248,0x540324a,0x540128a,0x2009289,0x680c00a,
-	0x200a289,0x740028f,0x400128a,0x58103cf,0x740028f,0x400128a,0x7400291,0x400128a,
-	0x5810451,0x7400291,0x400128a,0x7400292,0x400128a,0x5810492,0x7400292,0x400128a,
-	0x7400293,0x400128a,0x58104d3,0x7400293,0x400128a,0x7400294,0x400128a,0x5810514,
-	0xcc00000,0x7400294,0x690000e,0x6c0000e,0x200e30e,0x780028f,0x540434f,0x54023cf,
-	0x200f34f,0x200e3ce,0x603510e,0x6803e8d,0x603520d,0x6a0c00d,0x603500d,0x7c00291,
-	0x4018251,0x7c002c9,0x5404251,0x5402211,0x2008248,0x690000e,0x6c0000e,0x200e30e,
-	0x200e20e,0x6803e8f,0x6b0c010,0x643500d,0x580f34d,0xbef804d,0x0000000,0x643530d,
-	0x900c34d,0xa6f800d,0x0000000,0x603510e,0x603520f,0x6035010,0x643500d,0x580f34d,
-	0xbef804d,0xcc00000,0x0000000,0x40006dc,0x700029c,0x400128a,0x7000289,0x9610709,
-	0x400128a,0x700029d,0x400128a,0x7000289,0x9610749,0x400128a,0x700029e,0x400128a,
-	0x7000289,0x9610789,0x400128a,0x700029f,0x400128a,0x7000289,0x96107c9,0x400128a,
-	0x70002a0,0x400128a,0x7000289,0xcc00000,0x9610809,0x64d1602,0x9162082,0xaa0c002,
-	0xc7fff40,0x0000000,0xc7f15c0,0x0000000,0x93e1248,0xaa10009,0x9042248,0xc7f1480,
-	0x0000000,0xaa14009,0x680324a,0xaa0c049,0x680348a,0x680390a,0x7800088,0x7800309,
-	0xb806248,0x4001208,0x6800008,0x78000c9,0x4001249,0x7c000c9,0x7c00088,0x950c288,
-	0xa60c008,0x7800309,0x980a50a,0xa403248,0x0000000,0x980a58a,0x78000c8,0xa60c008,
-	0x0000000,0x980a54a,0x980a7ca,0x60f1f0a,0xc7f0d40,0x0000000,0x64ac10c,0x680c008,
-	0x6094008,0x6803009,0x6804008,0xd000009,0x6094108,0x6800008,0x6094008,0xcc00000,
-	0x0000000,0xcc00000,0x0000000,0xc000cc0,0x0000000,0x64d310a,0x90102ca,0x400f2cb,
-	0x58042cb,0x44012cb,0x7c0030b,0x92102ca,0x400f2cb,0x58042cb,0x44012cb,0x7c0034b,
-	0x780034a,0x400128a,0x40002ca,0x7800309,0x4001249,0x96102c9,0x609520b,0x54042ca,
-	0x968c2c9,0x609080b,0x681010a,0x6c3454a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
-	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x698000a,0x6c0000a,0x200a30a,0x609440a,
-	0x6a0000a,0x6c0000a,0x200a30a,0x609450a,0xcc00000,0x0000000,0xc0005c0,0x0000000,
-	0x8095003,0x8095000,0x6820889,0x6c00209,0xcc00000,0x6095109,0x683ffc9,0x649090a,
-	0xa21004a,0xaa0c009,0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,
-	0x9c0a00a,0x9c0a0ca,0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,
-	0x649bb09,0x920c249,0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264 b/drivers/amlogic/amports/m8m2/ucode/h264
deleted file mode 120000
index 1898b8fde52b..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/h264
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/Makefile b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/Makefile
deleted file mode 100755
index 652255b6e99c..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/Makefile
+++ /dev/null
@@ -1,3 +0,0 @@
-
-obj-y				+= vh264_4k2k_mc.o
-
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264c_linux_single.h b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264c_linux_single.h
deleted file mode 100755
index f4a69b4fd6e2..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264c_linux_single.h
+++ /dev/null
@@ -1,69 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0xc002800,0x0000000,0x0000000,0x0000000,0xc005b00,0x0000000,0x649ca01,0xa60c041,
-	0xc782d40,0x0800000,0xa608081,0xc7ffe40,0xa60c0c1,0xc783540,0x0800000,0xa608101,
-	0xc7ffd00,0xa60c141,0xc783700,0x0800000,0xa608181,0xc7ffbc0,0xa6081c1,0xc785440,
-	0xc7ffb00,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0xc7839c0,0x0000000,0xcc00000,0x0400000,0xcb80003,0x0000000,0xcc00000,0x0400000,
-	0xc7a3340,0x0000000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xc7a31c0,0x0000000,
-	0xc783640,0x0000000,0xcc00000,0x0400000,0xc000800,0x64c380f,0x64c080a,0x64c090c,
-	0x680040b,0x63f000b,0x680000b,0x63f000b,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x60c080a,0x60c090c,0x688000b,0x60c290b,0xc000640,0x0000000,0x680000b,0x60c0c0b,
-	0x6c0404b,0x60c0d0b,0x80c0101,0x684044b,0x60c2e0b,0x688000b,0x60c290b,0x60c380f,
-	0xc001040,0x0000000,0xcc00000,0x0000000,0x683ffca,0xaa1800a,0x649470b,0x91082cb,
-	0x78021c9,0xa4fc24b,0x440128a,0xcc00000,0x0000000,0xc000880,0x0000000,0x6490b0a,
-	0x980a00a,0x980a08a,0x6090b0a,0x9c0a00a,0x9c0a08a,0x6090b0a,0x8095003,0x8095000,
-	0x683ffca,0x6498f0b,0xaa0c00a,0xa6f800b,0x440128a,0x64c3d0b,0x580a2cb,0xbef80cb,
-	0x0000000,0x6498e0b,0x980b00b,0x68007ca,0x97062ca,0x6098e0b,0x680000a,0x97062ca,
-	0x9c0b00b,0x6098e0b,0x649b80b,0x6800fca,0x95082ca,0xcc00000,0x609b80b,0x64e120a,
-	0x91e128a,0xbef804a,0x64e000a,0x64e030b,0x64e0e0c,0x64e0c0d,0x680100e,0x609840e,
-	0x8098400,0x680020e,0xd00000e,0x0000000,0x60e000a,0x60e030b,0x60e0e0c,0xcc00000,
-	0x60e0c0d,0x680004b,0x60e0c0b,0x7c0288b,0x7c0270b,0x68003cb,0x7c0274b,0x6805c0b,
-	0x60c210b,0x80c2170,0x680008b,0x7c0280b,0x6800016,0x680000b,0xcc00000,0x7c028cb,
-	0x6800000,0x6800001,0x7400040,0xb2fc7c1,0x4001041,0x7c01c80,0x7c01cc0,0x7c01d00,
-	0x7c01100,0x7c01140,0x7c00c40,0x7c00c80,0x68002c0,0x7c00700,0x7c006c0,0x6803fc0,
-	0x7c01380,0x69fffc0,0x7c02240,0x7c00280,0x64c4000,0x64c4201,0x2401001,0x4008041,
-	0x7c00741,0x5810041,0x7c00781,0xcc00000,0x0000000,0x649d100,0xaa18080,0x6800000,
-	0x680fa01,0xc000300,0x6800042,0x809d102,0x80c0a01,0x80c2800,0x80c0002,0x6bffe80,
-	0x6030400,0x6810003,0x809ca02,0xc7fce40,0x0400000,0x6034201,0x649ce01,0x2000040,
-	0x6034100,0x6a10000,0x6c001c0,0x6034000,0xa60c042,0xc000980,0x0000000,0xa60c082,
-	0xc000ac0,0x0000000,0xa60c0c2,0xc000a80,0x0000000,0x6434000,0x580f000,0xbef8040,
-	0xcc00000,0x0000000,0x649d100,0xaa180c0,0x6840000,0x6815881,0xc07f9c0,0x6800082,
-	0x809d103,0x6bffd80,0x6030400,0x809ca04,0xc78c500,0x0400000,0x649d100,0xaa18100,
-	0x68c0000,0x6821401,0xc07f6c0,0x68000c2,0x809d104,0x6bffe80,0x6030400,0x6810ec3,
-	0x809ca06,0xc78c1c0,0x0400000,0x6800000,0x7c01300,0x7c01580,0x6803fc0,0x7c01500,
-	0x7c01540,0xcc00000,0x0000000,0xcc00000,0x0000000,0xcc00000,0x0000000,0xc7fcac0,
-	0x0000000,0x64c4404,0x9101104,0xa6f8004,0xc7fc980,0x0000000,0x64c2305,0xbefc045,
-	0xcc00000,0x64c2005,0x4001145,0x6800006,0xa20c045,0x5801145,0x2405146,0xcc00000,
-	0x0000000,0xcc00000,0x0400000,0x683ffc5,0x4401145,0xb224005,0x64c4406,0x9101186,
-	0xa6f0006,0x80c3e00,0x64c3f06,0x9002186,0xa2e0046,0x0000000,0xcc00000,0x0000000,
-	0x683ffc5,0x4401145,0xb224005,0x64c4406,0x9101186,0xa6f0006,0x80c3e00,0x64c3f06,
-	0x9002186,0xa2e0046,0x0000000,0x683ffc5,0x4401145,0xb254005,0x64e0006,0x9021186,
-	0xaaf0006,0x0000000,0x64e0f06,0x91c91c6,0xa6e0007,0x90631c6,0x9003186,0xa4f51c6,
-	0x6981807,0x64e1106,0x9010186,0xaa08006,0xa4f01c6,0x64e1106,0x9210186,0xaa0c006,
-	0xa4ec1c6,0x0000000,0x683ffc5,0x4401145,0xb210005,0x6490906,0xbef4046,0x0000000,
-	0x683ffc5,0x4401145,0xb220005,0x6495307,0x90011c7,0x649bb06,0x920c186,0x20061c6,
-	0xa6e4006,0x0000000,0x683ffc5,0x4401145,0xb210005,0x6491e06,0xa6f4006,0x0000000,
-	0x683ffc5,0x4401145,0xb210005,0x6498f06,0xa6f4006,0x0000000,0xcc00000,0x0000000,
-	0xc000e00,0x0000000,0x649c700,0xaaf4000,0xc000280,0x0000000,0xc7fdd00,0x0800000,
-	0xc000180,0x0000000,0xc000b80,0x0000000,0xcc00000,0x0000000,0x649c700,0xa60c000,
-	0xcc00000,0x0000000,0x0800000,0x649c700,0xa60c000,0xcc00000,0x0400000,0xc000100,
-	0x0000000,0xcc00000,0x0400000,0x809c700,0x9104040,0xaa0c001,0x6804041,0x6806041,
-	0x48ff000,0x4401000,0x5403000,0x2000040,0x7000001,0x9c01281,0x9c012c1,0xcc00000,
-	0x7400001,0x6035202,0x649ce02,0x2002042,0x6035102,0x6035000,0x6435001,0x580f041,
-	0xbef8041,0x0000000,0x6435301,0x900c041,0xa6f8001,0x0000000,0xcc00000,0x0000000,
-	0x78006c0,0x7800701,0xa403040,0xcc00000,0x0000000,0x649c000,0xaa0c000,0xcc00000,
-	0x0000000,0x0800000,0x78006c0,0x7800701,0xa403040,0xcc00000,0x0400000,0xc000100,
-	0x0000000,0xcc00000,0x0400000,0x78006c0,0x7000001,0x609c001,0x90c2081,0xaa0c002,
-	0x6804002,0x6806002,0x483f041,0x5403041,0x2001081,0x4001041,0x7000042,0x9121082,
-	0x649c000,0x9501002,0x609c000,0x7000042,0x9183082,0x649c000,0x9523002,0x609c000,
-	0x7000042,0x91e1082,0x649c000,0x9581002,0x609c000,0x7000042,0x9101082,0xaa0c002,
-	0x4001041,0x4002041,0x4001081,0x7000041,0x7000082,0x9610042,0x609c101,0x78006c1,
-	0x7000041,0x90c2081,0xa62c002,0x809c200,0x483f041,0x5401041,0x6802bc2,0x2002042,
-	0x7000081,0x4001082,0x7000082,0x9610081,0x609c202,0x649c002,0x5408082,0x4c03082,
-	0x609c002,0x8007401,0x78006c0,0x4001000,0x68006c1,0xb803040,0x0000000,0x68002c0,
-	0xcc00000,0x7c006c0,0x649c002,0xa6fc002,0x0000000,0x609c100,0x609c201,0x809c00a,
-	0x649cd00,0xbe0e000,0xc7800c0,0x8007001,0x8007401,0x649c000,0xa6fc000,0x0000000,
-	0xcc00000,0x0000000,0x649c007,0xa6bc007,0x0000000,0x609c105,0x609c206,0x809c00a,
-	0x649cd05,0xbe12005,0xc780140,0x8007001,0x0000000,0x8007401,0x0000000,0x649c005,
-	0xa6b4005,0x0000000,0xcc00000,0x0000000,0x0000000
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264header_linux_single.h b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264header_linux_single.h
deleted file mode 100755
index 72f8b3b465df..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264header_linux_single.h
+++ /dev/null
@@ -1,128 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0x6bffd8a,0x603040a,0x0400000,0x64c430a,0x580128a,0xbaf980a,0x64c0008,0xbe44048,
-	0x0000000,0x0800000,0x6bffe8a,0x603040a,0xcc00000,0x0400000,0x64c0008,0xa2fc048,
-	0x0000000,0x64c3a08,0x9006208,0xaaec648,0x0000000,0x80c0002,0xc7ffcc0,0x0000000,
-	0xbe1c808,0x0000000,0x649d008,0x4001208,0x609d008,0xc7ffb00,0x80c0002,0xfc08200,
-	0x90a2248,0x7c01189,0x481f208,0x7c011c8,0xaa10388,0xaa0c508,0xc780780,0x0000000,
-	0xfc01240,0xfc01240,0xa614508,0xaa0c049,0x6800049,0x6800149,0x7c011c9,0xfc06240,
-	0xfc0a240,0x7c01509,0x7801388,0xaa1bfc8,0xa806209,0x6800008,0x78013c8,0xa805209,
-	0x6800048,0xc7ff540,0x6800049,0x7c00249,0x7c01548,0xfc03240,0xfc01240,0x7c01589,
-	0xfc01240,0x7c015c9,0xfc01240,0x78011c8,0xaa24148,0xaa20048,0xa608188,0xc78af00,
-	0xaa1c1c8,0xaa183c8,0xa608208,0xc784780,0xc7ff080,0xc785e40,0x0000000,0x6800008,
-	0x7c00c88,0x6808012,0xfc10200,0x9108208,0x7c007c8,0xfc08200,0x7c00808,0xc00b480,
-	0x80c2301,0xb2087c8,0xc7fed00,0x7c00848,0x78007c8,0xb61d908,0x6800048,0x7c00888,
-	0x6800008,0x7c008c8,0xc780540,0x0000000,0xc00b140,0x80c2301,0x7c00888,0xc00b080,
-	0x80c2301,0xc00b000,0x80c2301,0xfc01200,0xfc01200,0x7c008c8,0xaa24008,0x6800010,
-	0x68001c8,0x7c01608,0x78008ce,0x7c00c8e,0x680000f,0xc008940,0x680000a,0xc00ac80,
-	0x80c2301,0x4004208,0x7c00908,0xc00ab80,0x80c2301,0x7c00948,0xaa24088,0xaa10008,
-	0x0000000,0x83f2001,0xc780000,0xc00a980,0x80c2301,0x4004208,0x7c00988,0xc00a880,
-	0x80c2301,0x7c009c8,0xfc01200,0x7c00a08,0xc00a740,0x80c2301,0xb20bfc8,0xc7fdfc0,
-	0x4001208,0x7c00a48,0xc00a5c0,0x80c2301,0xb20bfc8,0xc7fde40,0x4001208,0x7c00a88,
-	0xfc01200,0x7c00ac8,0xa60c008,0x6800009,0xfc01240,0x9421209,0x7c00b08,0xfc01240,
-	0x7c00b49,0xfc01200,0xaa24008,0x6800109,0x7c00c88,0xc00a100,0x80c2301,0x7400488,
-	0xd07ff49,0x4001492,0xc780100,0x6800008,0x7c00b88,0x7c00bc8,0xfc01240,0xa610009,
-	0x7c00c09,0xc781600,0x0000000,0x7c00c89,0xfc01200,0x9421248,0x7400489,0xaa30008,
-	0x4001492,0xfc08200,0x7400488,0xa623fc8,0x4001492,0xfc10200,0x7400488,0x4001492,
-	0xfc10200,0x7400488,0x4001492,0xfc01200,0xaa0c008,0x0000000,0xfc01200,0xfc01200,
-	0xaa1c008,0x0000000,0xfc05200,0xa210048,0x0000000,0xfc10200,0xfc08200,0xfc01200,
-	0xaa18008,0x0000000,0xc0095c0,0x80c2301,0xc009540,0x80c2301,0xfc01200,0x7400488,
-	0xaa3c008,0x4001492,0xfc10200,0x7400488,0x4001492,0xfc10200,0x7400488,0x4001492,
-	0xfc10200,0x7400488,0x4001492,0xfc10200,0x7400488,0x4001492,0xfc01200,0x680000f,
-	0xfc01200,0xaa18008,0x94013c8,0xc0082c0,0x0000000,0x90aa248,0x7c00c49,0xfc01200,
-	0xaa1c008,0x94213c8,0xc008100,0x0000000,0xbe0c04f,0x90aa248,0x7c00c49,0xa20c0cf,
-	0x0000000,0xfc01200,0xfc01200,0x94413c8,0xfc01200,0x94613c8,0x740048f,0x4001492,
-	0xaa24008,0x6800189,0xfc01200,0xc008980,0x80c2301,0xd07ff89,0x0000000,0x7400488,
-	0x4001492,0xc008ac0,0x0000000,0x7800848,0x6800049,0x3409209,0x649cb0a,0x2c0a24a,
-	0x609cb0a,0x649d209,0x9527248,0xc009d00,0x609d209,0x78011c8,0xaa0c3c8,0xc7fbdc0,
-	0x0000000,0xfc01200,0xc0083c0,0x80c2301,0x40013c8,0x7c0134f,0x680138a,0x6800010,
-	0xb4083d0,0xc008200,0x80c2301,0xb6f4090,0x4001410,0x7400288,0xc7ffe80,0x400128a,
-	0x6bfffc8,0x7c01408,0x7c01448,0x7c01488,0x7c014c8,0x6800050,0xb4183d0,0xc000180,
-	0x680140c,0xc000100,0x680144c,0xc7ffec0,0x4001410,0xc007d00,0x80c2301,0xb2103c8,
-	0x0000000,0x83f2002,0xc780000,0x4000388,0x680000d,0xb80238d,0xcc00000,0xc007a80,
-	0x80c2301,0xb6f004d,0x400134d,0xb6e8090,0xc7ffe40,0x7400308,0x6800050,0xb4073d0,
-	0xc07fb40,0x680148c,0xc07fac0,0x68014cc,0xc7ffec0,0x4001410,0xc7fb000,0x0000000,
-	0x64c5109,0x64c460a,0x7800788,0x5410208,0x780074b,0x20082c8,0x580a208,0xe000248,
-	0x0000000,0x0000000,0x0000000,0xf000200,0xf010240,0x9708209,0x540a208,0x2008288,
-	0x64c4309,0x2408248,0x64c4009,0x2408248,0x7c012c8,0x5810208,0x7c01288,0xcc00000,
-	0x0000000,0x6800008,0x7c010c8,0x6808012,0xc006f40,0x80c2301,0xb20bfc8,0xc7fa7c0,
-	0x7c00cc8,0xc006e00,0x80c2301,0x7c00d08,0x649cb09,0x3809209,0xbe0c049,0xc7fa5c0,
-	0x0000000,0xfc01200,0x7c00d48,0xfc01200,0x7c00d88,0xc006b00,0x80c2301,0xaa0c008,
-	0xc7fa380,0x0000000,0xc0069c0,0x80c2301,0x7c00dc8,0xc006900,0x80c2301,0x7c00e08,
-	0xfc01200,0x7c00e48,0xfc02200,0x7c00e88,0xc006740,0x80c2301,0xc0067c0,0x0000000,
-	0x7c00ec8,0xc006600,0x80c2301,0xc006580,0x80c2301,0xc006600,0x0000000,0x7c00f08,
-	0x7c01088,0xfc01200,0x7c00f48,0xfc01200,0x7c00f88,0xfc01200,0x7c00fc8,0x64c2908,
-	0x91c2208,0xa6140c8,0x6800008,0x7c01008,0x7c01048,0xc780480,0xfc01200,0x7c01008,
-	0xfc01200,0x7c01048,0xaa20008,0x68001c8,0x7c01608,0x780104e,0x7c010ce,0x680000f,
-	0xc003a80,0x680000a,0xc005dc0,0x80c2301,0xc005e40,0x0000000,0x7c01088,0xc006b00,
-	0x0000000,0x7800cc8,0xb618808,0x6800049,0x3409209,0x649cc0a,0x2c0a24a,0x609cc0a,
-	0x649d209,0x9409248,0xc007b40,0x609d209,0xc7f9280,0x0000000,0xc07e280,0x0000000,
-	0xc005840,0x80c2301,0x7c016c8,0x7802249,0x69fffd1,0xa404449,0xaa40008,0x6800051,
-	0xc7f8f80,0xaa1c008,0xa804248,0x6800049,0xc7f8e80,0x7c01749,0xc780200,0x6800011,
-	0x7802209,0x78027d1,0xb404449,0x6800051,0x6800049,0x7c01749,0x78012c9,0x7c01249,
-	0x7801288,0x7c01208,0xc0051c0,0x80c2301,0xaa681c8,0xaa6c008,0xaa70048,0x7c01708,
-	0x7801149,0xa618009,0xaa0c088,0xc7f88c0,0x0000000,0x6800049,0x7c01149,0x78011c9,
-	0xaa14149,0x649d408,0xa20c048,0xc7f86c0,0x0000000,0xc004d00,0x80c2301,0x7c017c8,
-	0xb630808,0x649cc09,0x3809209,0xbe24049,0xc7f8480,0x0000000,0xc7ffa40,0x6800088,
-	0xc7ff9c0,0x6800148,0xc7ff940,0x6800188,0x649d209,0x9009289,0xa80620a,0x9409248,
-	0xc006ec0,0x609d209,0xc005640,0x0000000,0x7800d08,0x649d209,0x9127289,0xa80620a,
-	0x9527248,0xc006280,0x609d209,0xc004840,0x0000000,0x7800909,0xf800209,0xa614011,
-	0x7801809,0xa803248,0x0000000,0x9811051,0x7c01808,0x7800ac8,0xa61c008,0x68000ca,
-	0xfc01200,0xaa10008,0x0000000,0xfc01200,0x4001288,0xa614011,0x7801849,0xa80324a,
-	0x0000000,0x9811091,0x7c0184a,0x7801848,0x4401208,0x7800b09,0x2809248,0x9021249,
-	0x2008248,0x7c01888,0x78011c8,0xa628148,0x0000000,0xc003d00,0x80c2301,0xa614011,
-	0x78018c9,0xa803248,0x0000000,0x98110d1,0x7c018c8,0x7800948,0xa654008,0x7800988,
-	0xf800208,0xa614011,0x7801909,0xa803248,0x0000000,0x9811111,0x7c01908,0x7800d89,
-	0xaa20009,0x6800008,0x7801849,0xa6140c9,0xc003740,0x80c2301,0xc0037c0,0x0000000,
-	0x7c01948,0x5810208,0x7c01988,0x7800948,0xa608048,0xc780000,0x7800fc8,0xaa10008,
-	0x0000000,0xc003400,0x80c2301,0x7800dc8,0x7c01a08,0x7800e08,0x7c01a48,0x6800008,
-	0x7c019c8,0x7801708,0xaa5c188,0xaa28148,0x78011c8,0xaa0c148,0xc7809c0,0x0000000,
-	0xfc01200,0x7c01a88,0xfc01200,0xc780880,0x7c01ac8,0xfc01200,0x6800809,0xaa14008,
-	0x7801a08,0xc002e00,0x80c2301,0x7c01a08,0x9505248,0x7800b08,0x96a2248,0xc780580,
-	0x60c2109,0xfc01200,0x7c019c8,0x6800809,0x96e1248,0x7801a08,0x9505248,0xfc01200,
-	0xaa24008,0x7801a48,0xc0029c0,0x80c2301,0x7c01a08,0x9505248,0xc0028c0,0x80c2301,
-	0x7c01a48,0x9605248,0x7800b08,0x96a2248,0x60c2109,0xc06a380,0x7c01691,0x809ca03,
-	0xc7f5e40,0x6804643,0xba0c18a,0x680020d,0x680080d,0x7801608,0xb80420a,0x400128a,
-	0xcc00000,0x0000000,0x540138e,0x54013cf,0xfc01240,0x7400489,0x4001492,0x9401389,
-	0xaac8009,0x680020b,0x680020c,0xba0c18a,0x68003cd,0x6800fcd,0xaa4400c,0x0000000,
-	0xc002040,0x80c2301,0x7400488,0x4001492,0xc002040,0x0000000,0x20082c8,0x48ff308,
-	0xa61800c,0xaa0cfcd,0xb61418a,0xa6103cd,0xc7ff780,0x980f00f,0x40002cc,0x5408410,
-	0xbe0c04d,0x940840b,0x6c00010,0xaeac00d,0x440134d,0x7801608,0xb80320a,0xcc00000,
-	0x0000000,0xc7ff640,0x400128a,0xba0c18a,0x680020d,0x680080d,0x64e020b,0x200b34b,
-	0x6c0004b,0x60e020b,0xba101ca,0x400128a,0xcc00000,0x0000000,0x540138e,0x54013cf,
-	0x7801609,0xac0424a,0x6800009,0x7000489,0x4001492,0x9401389,0xaab4009,0x680020b,
-	0x680020c,0xba0c18a,0x68003cd,0x6800fcd,0xaa3800c,0x7000488,0x4001492,0xc001380,
-	0x0000000,0x20082c8,0x48ff308,0xa61800c,0xaa0cfcd,0xb61418a,0xa6103cd,0xc7ff700,
-	0x980f00f,0x40002cc,0x5408410,0xbe1004d,0x940840b,0x6c00010,0x60e0210,0xaeb400d,
-	0x440134d,0xba0c1ca,0xcc00000,0x0000000,0xc7ff680,0x400128a,0xc000cc0,0x80c2301,
-	0x4001388,0xfc08200,0xc000bc0,0x80c2301,0xc000b40,0x80c2301,0xd07ff0e,0xfc01200,
-	0xfc05200,0xcc00000,0xfc0f200,0x680000d,0x680001a,0x64c2908,0xa20c408,0xc7f41c0,
-	0x0000000,0xfc08200,0xaaeffc8,0x200d20d,0x64c2908,0xa20c408,0xc7f4000,0x0000000,
-	0xfc08200,0xaaeffc8,0x201a21a,0xaa5000d,0xaa1018d,0xa61404d,0xc780480,0x0000000,
-	0x6800048,0x7c01648,0x64c0008,0xbe14208,0x64c2908,0xbe0c408,0xd07ff1a,0xfc08200,
-	0x64c0008,0xbe10208,0x64c2908,0xbe08408,0xc7ff7c0,0xc7f3a40,0x0000000,0xc7ffcc0,
-	0xc7ffc80,0x64c2308,0xbefc048,0xcc00000,0x64c2008,0x4001208,0x6800009,0xa20c048,
-	0x5801208,0x2408209,0xcc00000,0x0000000,0x6808012,0x64c2908,0x9c082c8,0x9c08308,
-	0x7800889,0xaa0c009,0x98080c8,0x9c080c8,0x60c2908,0x78008ce,0xaa3000e,0x680000f,
-	0x680000a,0x6c0004a,0x60e020a,0x68001c8,0x7c01608,0xc07e240,0x680000a,0x680000a,
-	0x6c0004a,0x60e020a,0x64e0008,0x96e920e,0x60e0008,0x64e0308,0x950820f,0x60e0308,
-	0x7800a48,0x60c0908,0x7800a8a,0x7800ac8,0xa60c008,0x0000000,0x540128a,0x40002ca,
-	0x7800a49,0x95082c9,0x7c0000b,0x40002ca,0x96102c9,0x609520b,0x54042ca,0x968c2c9,
-	0x609080b,0xcc00000,0x0000000,0x6808012,0x6800809,0x7800dc8,0x9505248,0x7800e08,
-	0x9605248,0x7800b08,0x96a2248,0x60c2109,0x7800f08,0x6801009,0x9505248,0x60c2109,
-	0x7801088,0x6801409,0x9505248,0x60c2109,0x780104e,0xaa2800e,0x680000f,0x6801c0a,
-	0x6c0004a,0x60e020a,0xc07d500,0x680000a,0x680000a,0x6c0004a,0x60e020a,0x64e0008,
-	0x95c920e,0x60e0008,0x64e0308,0x940820f,0x60e0308,0xcc00000,0x0000000,0x6800009,
-	0x6c00049,0x540a288,0x2009289,0x680050a,0xc001340,0x6a007cb,0x7800c89,0xaa28009,
-	0x6800009,0x6c00049,0x540a288,0x2009289,0x680400a,0x2009289,0x680600a,0xc001080,
-	0x6a0800b,0xcc00000,0x0000000,0x6800009,0x6c00049,0x540a288,0x2009289,0x680050a,
-	0xc000e40,0x6b007cb,0x7800c89,0xaa28009,0x6800009,0x6c00049,0x540a288,0x2009289,
-	0x680400a,0x2009289,0x680600a,0xc000b80,0x6b0800b,0xcc00000,0x0000000,0x6900009,
-	0x6c00049,0x5409288,0x2009289,0x680044a,0xc000940,0x6a00ccb,0x78010c9,0xaa28009,
-	0x6900009,0x6c00049,0x5409288,0x2009289,0x680100a,0x2009289,0x680380a,0xc000680,
-	0x6a0800b,0xcc00000,0x0000000,0x6900009,0x6c00049,0x5409288,0x2009289,0x6800cca,
-	0x680110a,0x680044a,0xc0003c0,0x6b00ccb,0x78010c9,0xaa28009,0x6900009,0x6c00049,
-	0x5409288,0x2009289,0x680100a,0x2009289,0x680380a,0xc000100,0x6b0800b,0xcc00000,
-	0x0000000,0x603520a,0x649ce0a,0x200a24a,0x603510a,0x603500b,0x6435009,0x580f249,
-	0xbef8049,0x0000000,0x6435309,0x900c249,0xa6f8009,0x0000000,0xcc00000,0x0000000,
-	0x0000000,0x0000000
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264mmc_linux_single.h b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264mmc_linux_single.h
deleted file mode 100755
index fdbe21cead66..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264mmc_linux_single.h
+++ /dev/null
@@ -1,175 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0x7801698,0x7801548,0xa613fc8,0x0000000,0x6800008,0x7c01548,0xa60c018,0x4000658,
-	0xc7817c0,0x6804049,0x7801b8a,0x48ff28a,0x540328a,0x2009289,0x700024a,0x91832ca,
-	0xa60c08b,0x780174c,0x7c0178c,0x780178b,0x2c0b30b,0x7c0178b,0x2c0b30b,0x95e128b,
-	0x740024a,0xaa0c008,0x6800049,0x6800089,0x700024a,0x780000b,0xa8182ca,0x740024b,
-	0x7800809,0x97082c9,0x78009c9,0x96082c9,0x609c10b,0x40012c8,0x609c00b,0x8007401,
-	0x649c00b,0xa6fc00b,0x0000000,0x649c10b,0x910828b,0x7c001ca,0x900828b,0x7c0020a,
-	0x649c20b,0x7c0014b,0x92102cb,0x7c0018b,0xc004100,0x0000000,0x78011c8,0xa630148,
-	0x7801548,0xa628008,0x6800008,0x7c01c88,0x7c01cc8,0x7c01d08,0xc007ac0,0x0000000,
-	0x6800008,0x7c000c8,0x7c00108,0xc004000,0x0000000,0xa24200b,0x910820b,0xbe32008,
-	0x780154b,0xaa0c00b,0x68000cb,0x680010b,0x680004a,0x340a20a,0x6bfffc8,0x300a20a,
-	0x70002c8,0x2808288,0x74002c8,0xc7eec40,0x809ca07,0x7c01bc9,0x7c01c4a,0x7801548,
-	0xa62c008,0x900820b,0x7c020c8,0x7800248,0xa60c008,0x6800048,0x7c015c8,0x6800008,
-	0x7c00248,0x78015c8,0x7c02108,0xc011580,0x0000000,0xc010100,0x0000000,0x7801708,
-	0xaa08088,0xc780980,0x78011c9,0xaa20149,0x7801189,0xaa18009,0x0000000,0xfc01240,
-	0xaa0c009,0xc00ba40,0x0000000,0xc0726c0,0x80c2301,0xc072740,0x0000000,0x401a205,
-	0x7800ec9,0x2008248,0x7c01b08,0x7800f48,0xaa40008,0x680000a,0xc072400,0x80c2301,
-	0xaa30045,0x9402285,0xc072300,0x80c2301,0xc072380,0x0000000,0x94c4285,0xc0721c0,
-	0x80c2301,0xc072240,0x0000000,0x9444285,0x60c310a,0xc7eddc0,0x809ca05,0xaa08148,
-	0xc781240,0xaa4c019,0xc0073c0,0x7801808,0x7801548,0xaa3c008,0x7802108,0xaa34008,
-	0x7801588,0xaa0c008,0x7901488,0x7901408,0x6bfffc9,0xa807248,0x7801bc9,0x78020c8,
-	0x4c80208,0x7400248,0x4001249,0x7c01bc9,0xfc01200,0xaa10008,0x7801a16,0xc00bdc0,
-	0x6808011,0xaa18019,0x6808008,0x7801bca,0x7801a13,0xc009bc0,0x6800012,0x7800e48,
-	0x4000248,0xaa34008,0x6094209,0xc0716c0,0x80c2301,0x9484245,0xc071600,0x80c2301,
-	0x9504245,0x6094209,0x680c008,0x6094008,0xc011ac0,0x7801a0a,0x6494008,0x9c08248,
-	0x6094008,0x7801188,0xaa38008,0x0000000,0x78011c8,0xa61c148,0x0000000,0xfc01200,
-	0x7c01a88,0xfc01200,0xc780180,0x7c01ac8,0xfc01200,0xaa0c008,0xc00a300,0x0000000,
-	0x7800d48,0xaa18008,0x6800c09,0xc070ec0,0x80c2301,0x9402245,0x60c2109,0xc7fe700,
-	0x0000000,0xaa68019,0xc006c40,0x0000000,0xc006f40,0x6808008,0x7c02088,0x7801bc8,
-	0x4020208,0xc007a80,0x7c01c08,0x7801548,0xaa3c008,0x7802108,0xaa34008,0x7801588,
-	0xaa0c008,0x7901488,0x7901408,0x6bfffc9,0xa807248,0x7801bc9,0x78020c8,0x4c80208,
-	0x7400248,0x4001249,0x7c01bc9,0xfc01200,0xaa10008,0x7801a16,0xc00aa00,0x6808011,
-	0xaa44019,0x7801548,0xaa3c008,0x7802108,0xaa34008,0x7801588,0xaa0c008,0x79014c8,
-	0x7901448,0x6bfffc9,0xa807248,0x7801c09,0x78020c8,0x4c80208,0x7400248,0x4001249,
-	0x7c01c09,0xfc01200,0xaa24008,0x7801c08,0x7c01bc8,0x7801a56,0xc00a400,0x6808811,
-	0x7801c08,0x4420208,0x7c01bc8,0xaa34019,0x6808008,0x7801bca,0x7801a13,0xc008140,
-	0x6800012,0x6808808,0x7801c0a,0x7801a53,0xc008000,0x6800212,0xc0087c0,0x6808808,
-	0x7800e88,0xa60c088,0x6800009,0x6815409,0x9402248,0xa644048,0x6094209,0xc06f9c0,
-	0x80c2301,0x9484245,0xc06f900,0x80c2301,0x9504245,0x6094209,0x680c008,0x6094008,
-	0xc00fdc0,0x7801a0a,0x680d808,0x6094008,0xc00fcc0,0x7801a4a,0xc7fe200,0x0000000,
-	0x7801548,0xaa0c008,0x6804049,0x6806049,0x6800008,0x780020a,0x7400248,0xd07ffca,
-	0x4008249,0xcc00000,0x0000000,0xc000d40,0x6a0200b,0x649cd09,0xa226009,0x67f2909,
-	0xa21c049,0xc0709c0,0x0000000,0x67f2609,0x93e1249,0xaaf0009,0x0000000,0x6808009,
-	0x680900a,0x680000c,0x7801548,0xaa0c008,0x6804048,0x6806048,0x700020d,0xa20c04d,
-	0x914238d,0xc780240,0xaa0c00e,0xc780300,0x0000000,0xa25200b,0xc000d00,0x94082cc,
-	0xc780440,0x7c01b8b,0x740028c,0x400128a,0x740024c,0xc780300,0x4001249,0xaa2808e,
-	0xa61004e,0x904438d,0x740028c,0x400128a,0xaa1400e,0x0000000,0x740024c,0xc780080,
-	0x4001249,0x780020d,0x440134d,0x4008208,0xb8e234c,0x400130c,0xcc00000,0x0000000,
-	0x7801188,0xa60c008,0xcc00000,0x980b38b,0x7801548,0xaa0c008,0x68000c8,0x6800108,
-	0x78009cc,0x400130c,0x7000209,0x680000a,0xa21c049,0x5801249,0xb8fe30a,0x400128a,
-	0xc780000,0xcc00000,0x0000000,0x95082ca,0x680004c,0x340c28c,0x7000209,0x2c09309,
-	0xcc00000,0x7400209,0x649c80e,0x93e13ce,0xaa1800f,0x91083ce,0xaa1000f,0x44013cf,
-	0x950838f,0x609c80e,0x780118e,0xaa1000e,0x680000e,0xc780480,0x7c0214e,0x649c80e,
-	0x93e13ce,0xa61000f,0x680000e,0xc780300,0x7c0214e,0x780154e,0xa62400e,0x649c80e,
-	0x91083ce,0xa6e400f,0x90083ce,0x950838f,0x609c80e,0x680004e,0x7c0214e,0x6a0000e,
-	0x60c3d0e,0x4401388,0x91083cb,0x740038f,0x400138e,0x6810010,0x7801191,0xaa3c011,
-	0x6bfffd1,0x4c0c410,0x7800151,0x7800192,0x9610452,0xe0003d1,0x7801552,0xaa0c012,
-	0x649d612,0x649d712,0xf000440,0xf0103c0,0x970844f,0x2011491,0x64c3d0f,0x91613cf,
-	0xa6f800f,0x0000000,0x60c3811,0x7801891,0x94c2411,0x7400390,0xc008f80,0x0000000,
-	0x7800290,0x69fff8f,0xa81640f,0x780170f,0xa62c08f,0x780154f,0xaa1000f,0x69fffcf,
-	0xa80e40f,0xc7803c0,0xa80e40f,0x7c00292,0x69fff8f,0xc7802c0,0x7c0028f,0x69fffcf,
-	0xa80640f,0x91e13d0,0xaa0c00f,0x6c00010,0x6ffffd0,0xb403412,0x680004f,0x7c0214f,
-	0x4000812,0x7000390,0x780214f,0x952140f,0x780170f,0x958340f,0xb004452,0x9c10210,
-	0x9810210,0x4000811,0x7400390,0x80c3000,0x60c3220,0x60c3212,0x60c3211,0x7801850,
-	0xa610090,0x400138e,0xc780180,0x400138e,0x7400392,0x9210492,0x400138e,0x7400392,
-	0xa610090,0x400138e,0xc780180,0x400138e,0x7400391,0x9210451,0x400138e,0x7400391,
-	0x400138e,0x7801810,0x7400390,0x6806010,0xb40c40e,0x440638e,0x6804010,0x240e40e,
-	0x580238e,0x6802bd0,0x200e40e,0x7801210,0x7400390,0x7801250,0x400138e,0x7400390,
-	0x7801551,0xaa10011,0x900844b,0x7800212,0x2011491,0x5401451,0x649c612,0x2011491,
-	0x4000491,0x4001451,0x9508491,0x9608491,0x609b212,0x609b012,0x609b112,0xcc00000,
-	0x0000000,0x7801548,0xaa0c008,0xcc00000,0x0000000,0x680000f,0xc000340,0x680400b,
-	0x4000512,0x7800089,0x780000a,0xa405289,0x680004f,0xc000180,0x680600b,0xa6c8012,
-	0xa6c4014,0xcc00000,0x0000000,0x6800012,0x6bfffca,0x6dfffca,0x7800213,0x6bfffcd,
-	0x400134d,0xb41b4cd,0x400038d,0x400044e,0x540338e,0x200e2ce,0x400138e,0x700038c,
-	0xa21004c,0x9c0c00c,0xc7ffd80,0x740038c,0x914224c,0xa6cc049,0x910130c,0xaa0c00c,
-	0x400138e,0x400238e,0x400130e,0x700038e,0x700030c,0x961038c,0xb0ea38a,0x0000000,
-	0x6800052,0x400028e,0xc7ff980,0x4000411,0xaa0c012,0xc00a740,0x0000000,0xcc00000,
-	0x0000000,0x680004c,0x780090b,0x340c2cc,0x6808009,0x7801bcf,0xb8033c9,0xcc00000,
-	0x0000000,0x780154b,0xaa0c00b,0x680400b,0x680600b,0x700024a,0x540328a,0x200a2ca,
-	0x400628a,0x700028a,0xb00320a,0x4000349,0x240a30a,0x400134d,0xb4113cd,0x700034e,
-	0x540338e,0x200e2ce,0x400638e,0x700038e,0xb00320e,0x0000000,0x240e30e,0xb4f638a,
-	0x0000000,0x400028e,0x700024e,0x7000350,0x740034e,0xc7ffc00,0x7400250,0x4001249,
-	0xb8e53c9,0xcc00000,0x0000000,0x6808009,0x7801bca,0x240a24a,0x78009c9,0xac0324a,
-	0xcc00000,0x0000000,0xc07f3c0,0x7801808,0x6808009,0x78009ca,0x2009289,0xcc00000,
-	0x7c01bc9,0x6808009,0x7801bcf,0x780154b,0xaa0c00b,0x680400b,0x680600b,0x700024a,
-	0x540328a,0x200a2ca,0x400128a,0x700028c,0x910130c,0xaa0c00c,0x400128a,0x400228a,
-	0x400130a,0x700028a,0x700030c,0x961028c,0x4000349,0x400134d,0xb4163cd,0x700034e,
-	0x540338e,0x200e2ce,0x400138e,0x700038c,0x910130c,0xaa0c00c,0x400138e,0x400238e,
-	0x400130e,0x700038e,0x700030c,0x961038c,0xb4f138a,0x0000000,0x400028e,0x700024e,
-	0x7000350,0x740034e,0xc7ffac0,0x7400250,0xb00380a,0x0000000,0x4001208,0x4001249,
-	0xb8d73c9,0xcc00000,0x0000000,0x6808809,0x680800a,0x7802088,0x4401208,0xb806288,
-	0x700020b,0x740024b,0x4001249,0xc7fff00,0x4401208,0x7802088,0x7801bca,0xb406288,
-	0x700020b,0x740024b,0x4001249,0xc7fff00,0x4001208,0x6808009,0x7801bca,0x7802088,
-	0xb406288,0x700020b,0x740024b,0x4001249,0xc7fff00,0x4001208,0x6808808,0x780208a,
-	0x402028a,0xb406288,0x700020b,0x740024b,0x4001249,0xc7fff00,0x4001208,0xcc00000,
-	0x0000000,0xa23600e,0x487f38e,0x400040e,0x54013d0,0x200f40f,0x40103cf,0x60c240f,
-	0x540830c,0x9405310,0x540338e,0x6804010,0xc7802c0,0x200e40e,0x201044e,0x54013d0,
-	0x200f40f,0x40103cf,0x60c240f,0x540830c,0x9405310,0x540338e,0x200e34e,0x400138e,
-	0x7000390,0x60c2210,0x90c23d0,0xaa0c0cf,0x0000000,0x40013cf,0x94a230f,0x400138e,
-	0x700038f,0x400138e,0x7000390,0x96103d0,0x60c220f,0x400138e,0x700038f,0x400138e,
-	0x7000390,0x96103d0,0xcc00000,0x60c220f,0x680000b,0x680000c,0x6800011,0x780154d,
-	0xaa1000d,0x680400d,0x680600d,0x7800211,0xb40d288,0xac0c4cb,0xc07f2c0,0x700020e,
-	0x90023cb,0xa6140cf,0x58023cb,0x200f48f,0x60c240f,0x60c220c,0x40012cb,0xc7ffd40,
-	0x4001208,0xa2280cb,0x580234b,0x200d48d,0x60c240d,0x90022cb,0x680010d,0x240b2cd,
-	0x54032cb,0x340c2cc,0x60c220c,0xcc00000,0x0000000,0x7000208,0x5403208,0x7801549,
-	0xaa0c009,0x6804009,0x6806009,0x2008248,0x700020f,0x90043cf,0x7800151,0x7800192,
-	0x9610452,0xe0003d1,0x7801552,0xaa0c012,0x649d612,0x649d712,0xf000440,0xf0103c0,
-	0x970844f,0x2011491,0x5803451,0x4001208,0x700020f,0x90c23cf,0x97c244f,0x60c3911,
-	0xcc00000,0x0000000,0xc066d00,0x80c2301,0xaa20005,0xae18185,0xa610045,0xc0001c0,
-	0x0000000,0xc7ffe40,0xc780000,0xc780000,0xcc00000,0x0000000,0xc066a00,0x80c2301,
-	0xa608019,0xcc00000,0x4001205,0x7801809,0x6800055,0x780090f,0x34153d5,0xb403209,
-	0x2410209,0x2010550,0x7801888,0xb610088,0x0000000,0x2010250,0x4001410,0x6800009,
-	0x780020f,0x780154b,0xaa0c00b,0x680400b,0x680600b,0x5403289,0x200a2ca,0x400128a,
-	0x700028c,0xa21034c,0x400528a,0x700028c,0xa80540c,0x4001249,0xb8f73c9,0xcc00000,
-	0x0000000,0x440528a,0x700028c,0x9c0c0cc,0x9c0c08c,0x9c0c00c,0x740028c,0x440128a,
-	0x700028c,0x481f30c,0x7801548,0xaa0c008,0x68000c8,0x6800108,0x680004a,0x340a30a,
-	0x6bfffcc,0x300a30a,0x7000209,0x2809289,0xcc00000,0x7400209,0x7c02191,0x7801810,
-	0x6bfffd2,0x7801553,0xaa0c013,0x6804013,0x6806013,0xc065a40,0x80c2301,0xaa400c5,
-	0xae38145,0xa610005,0xc0003c0,0x0000000,0xc7ffe40,0xa610045,0xc000980,0x0000000,
-	0xc7ffd40,0xa610145,0xc000b40,0x0000000,0xc7ffc40,0xc780000,0xc780000,0xcc00000,
-	0x0000000,0xc065540,0x80c2301,0xaa5c019,0x4001205,0x6800055,0x7800909,0x3415255,
-	0xb403210,0x2410210,0x2010550,0x4000510,0x7802188,0x7801bc9,0xb40c248,0x700020a,
-	0xbe1a00a,0x540328a,0x200a4ca,0x400628a,0x700028a,0xa80350a,0xc7ffe00,0x4001208,
-	0xc000800,0x0000000,0xcc00000,0x0000000,0xc064e80,0x80c2301,0xaaf0019,0x4001205,
-	0x6800055,0x7800909,0x3415255,0x2010210,0xb8e7550,0xc7ff980,0x2410550,0xc064bc0,
-	0x80c2301,0xaa34019,0x4001205,0x2012212,0xa628012,0x7802188,0x7801bc9,0xb407248,
-	0x700020a,0xbe0e00a,0xc7fff40,0x4001208,0xc000100,0x0000000,0xcc00000,0x0000000,
-	0x7801bcb,0x700020f,0xb00644b,0x440130b,0x700030c,0x74002cc,0xc7fff00,0x44012cb,
-	0x740044f,0x4001451,0x4000251,0x4000291,0x780218b,0x200b58b,0x40012cb,0xac072ca,
-	0x700028c,0xa8fe3cc,0x400128a,0x740024c,0xc7ffec0,0x4001249,0x7801bc9,0x4001249,
-	0xcc00000,0x7c01bc9,0xc780000,0x0000000,0x780094f,0x460040f,0xc480900,0x780098f,
-	0x6800050,0x34173d0,0x5801597,0x7801c95,0x7801ccf,0x961054f,0x7801d13,0x7801914,
-	0xb4054d4,0x240f513,0xb80758f,0xc780180,0x20155d5,0x240f4d4,0xb00358f,0xc780080,
-	0x24155d5,0x40004d4,0x780118f,0xaa1400f,0x58103d5,0x7c01c95,0x7c01ccf,0x7c01d13,
-	0x7801854,0xaa100d4,0x20124d5,0xc780bc0,0x4000452,0x780194f,0x7801990,0x96103d0,
-	0xc780a80,0x20113d2,0x780090f,0x6800050,0x34173d0,0x78011cf,0xa61c14f,0x680000f,
-	0x7c01d4f,0x7c01d8f,0x7c01dcf,0x7c01f8f,0x7c01fcf,0x7801d56,0x7801d95,0x7801dcf,
-	0x961054f,0x7801814,0xb403594,0x0000000,0x20155d5,0x780094f,0x460240f,0xc5000c0,
-	0xc780000,0x0000000,0x78011cf,0xa61014f,0x6800012,0xc780280,0x6800011,0x2013515,
-	0x54014d3,0x780118f,0xa60c00f,0x0000000,0x44014d3,0x4000493,0x4000453,0x7c01d95,
-	0x58103d5,0x7c01dcf,0xb803452,0x4000412,0x4000411,0x7c01e10,0x58103d0,0x7c01e4f,
-	0x7c01e92,0x58103d2,0x7c01ecf,0x7c01f11,0x58103d1,0x7c01f4f,0x7801814,0xcc00000,
-	0x7c01d54,0x7801188,0xaa1c008,0x6808008,0x78009c9,0x4001249,0x2009209,0x7801bc8,
-	0xb403248,0xcc00000,0x0000000,0x6808009,0x7801bcf,0x780154b,0xaa0c00b,0x680400b,
-	0x680600b,0x700024a,0x400040a,0x540328a,0x200a2ca,0x400628a,0x700028a,0x780180c,
-	0xb00530a,0x680004c,0x7800912,0x340c48c,0x240a30a,0x4000349,0x400134d,0xb4123cd,
-	0x700034e,0x400044e,0x540338e,0x200e2ce,0x400638e,0x700038e,0x780180c,0xb00530e,
-	0x680004c,0x7800912,0x340c48c,0x240e30e,0xb0f238a,0x0000000,0x400028e,0xc7ffbc0,
-	0x4000411,0xc000100,0x780154f,0xcc00000,0x0000000,0xaa0c00f,0x680400b,0x680600b,
-	0x5403390,0x200e2ce,0x400138e,0x700038c,0xbe0804c,0xa24830c,0x9c0c0cc,0x9c0c08c,
-	0x9c0c00c,0x740038c,0x440138e,0x700038c,0x481f30c,0xaa0c00f,0x68000c8,0x6800108,
-	0x680004a,0x340a30a,0x6bfffcc,0x300a30a,0x7000209,0x2809289,0x7400209,0xcc00000,
-	0x0000000,0x6809008,0x78001c9,0x2009209,0x7801c48,0x2412248,0xb60c052,0xcc00000,
-	0x0000000,0x6809009,0x7801c4f,0x780154b,0xaa0c00b,0x680400b,0x680600b,0x700024a,
-	0x400040a,0x540328a,0x200a2ca,0x400128a,0x700028c,0x91424cc,0xa60c053,0xa21804c,
-	0x0000000,0x4001249,0xb8f53c9,0xcc00000,0x0000000,0x910130c,0xaa0c00c,0x400128a,
-	0x400228a,0x400130a,0x700028a,0x700030c,0x961028c,0x4000349,0x400134d,0xb4173cd,
-	0x700034e,0x400044e,0x540338e,0x200e2ce,0x400138e,0x700038c,0x91424cc,0xa6dc053,
-	0xbed804c,0x910130c,0xaa0c00c,0x400138e,0x400238e,0x400130e,0x700038e,0x700030c,
-	0x961038c,0xb0ed38a,0x0000000,0x400028e,0xc7ffa80,0x4000411,0xc000100,0x780154f,
-	0xc7ff180,0x4401492,0x6800011,0xaa0c00f,0x680400b,0x680600b,0x5403390,0x200e2ce,
-	0x400138e,0x700038d,0x400030d,0x980d2cd,0x9c0d28d,0x9c0d0cd,0x9c0d08d,0x9c0d00d,
-	0x740038d,0xa21c30c,0x980d00d,0x740038d,0x6800051,0x440138e,0x700038c,0x481f30c,
-	0x94c240f,0x780070b,0x74002d0,0x40012cb,0x68006cc,0xb80330b,0x0000000,0x68002cb,
-	0x78006cc,0xa40c30b,0x0000000,0x649c70c,0xaa0c00c,0xc061980,0x0000000,0x649c00c,
-	0xaa0c00c,0xc7ffe80,0x0000000,0xc062400,0x0000000,0xcc00000,0x7c0070b,0x680000b,
-	0x400128a,0xfc01200,0xaa20048,0x680004c,0x6494208,0x9084208,0x340c20c,0x540830c,
-	0xc780340,0x609410c,0xc05f700,0x80c2301,0xc05f780,0x0000000,0x4000305,0xc05f5c0,
-	0x80c2301,0xc05f640,0x0000000,0x950914c,0x6094105,0xfc01200,0xaa24048,0x680004c,
-	0x6494208,0x9104208,0x340c20c,0x540830c,0x609410c,0xc780600,0x609410c,0xc05f1c0,
-	0x80c2301,0xc05f240,0x0000000,0x4000305,0xc05f080,0x80c2301,0xc05f100,0x0000000,
-	0x950914c,0x6094105,0xc05ef00,0x80c2301,0xc05ef80,0x0000000,0x4000305,0xc05edc0,
-	0x80c2301,0xc05ee40,0x0000000,0x950914c,0x6094105,0x40012cb,0xb8cb28b,0xcc00000,
-	0x0000000,0x0000000,0x0000000
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264slice_linux_single.h b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264slice_linux_single.h
deleted file mode 100755
index 55afc678985c..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/h264slice_linux_single.h
+++ /dev/null
@@ -1,269 +0,0 @@
-const u32 MicroCode[] __attribute__ ((aligned (8))) = {
-	0x7801691,0x6840009,0x6098409,0x8098400,0x8002a09,0x8002b17,0x6830009,0x6032609,
-	0x8032261,0x8032101,0x7800f88,0x64e0e09,0x9401248,0x60e0e09,0x7800a49,0x4401249,
-	0x7c02689,0x680006c,0x7800d49,0xaa10009,0x6800009,0x687ffc9,0x680002c,0x7c02949,
-	0x6800809,0x7801a08,0x9505248,0x7801a48,0x9605248,0x7800b08,0x96a2248,0x78019c8,
-	0x96e1248,0x60c2109,0x7800b48,0xaa10008,0x5401208,0x7800ac9,0x9441209,0x7801009,
-	0x9401209,0x7c02b08,0x6800009,0x7c02b49,0x7c02a49,0x78016c9,0x7c02b89,0xaa10011,
-	0x6800016,0xc001180,0x0000000,0x6800008,0x60c2108,0xc001a00,0x0000000,0x80c0001,
-	0x8030504,0xc7ef2c0,0x0400000,0x6bfd98a,0x603040a,0x0400000,0x64c430a,0x580128a,
-	0xbaf980a,0x64c0008,0xbe40048,0x0000000,0x0800000,0x6bffe8a,0x603040a,0xcc00000,
-	0x0400000,0xc780000,0xc780000,0x83f2001,0xc780000,0x0000000,0xbef5008,0x0000000,
-	0xc78bb40,0x680000a,0xaa4c048,0xbeed208,0x683ffcb,0xaad800b,0x44012cb,0x64e0f08,
-	0x9003248,0x9063288,0xb40324a,0x240a24a,0x400828a,0xba180ca,0xaedc0ca,0x80c3e00,
-	0x64c3f08,0x9002208,0xa6cc0c8,0xcb80024,0x0000000,0x680000a,0x7802148,0xaa18008,
-	0xaa0c011,0x0000000,0x680004a,0xc78b500,0x0000000,0x7800b08,0xaa14388,0x7801708,
-	0xaa08088,0xc7847c0,0xc787d80,0xaa08088,0xc783100,0xc786f00,0x0000000,0x649c908,
-	0x4001208,0x609c908,0x6800015,0x7c021d5,0x7c02215,0x7c02255,0x7c02295,0x7c022d5,
-	0x7c01755,0x6803fc8,0x7c02348,0x6800008,0x7c02408,0x7c02488,0x7c024c8,0x7c02508,
-	0x7c02548,0x7802688,0x4001208,0x7c026c8,0x6800048,0x60e0c08,0x7c02888,0x7c02708,
-	0x6800008,0x7c028c8,0x68003c8,0x7c02748,0x6805c08,0x60c2108,0x80c2170,0x6800088,
-	0x7c02808,0xc015b40,0x0000000,0xcc00000,0x0000000,0x78028cb,0xa6fc00b,0x0000000,
-	0x6a0002b,0x6c007ab,0x690002a,0x6c007aa,0xc015d00,0x0000000,0xc016200,0x0000000,
-	0x6900009,0x6c000c9,0x7801708,0x5c0c289,0x6819924,0xaa18088,0x6800009,0x68162a4,
-	0xaa0c148,0x6800049,0x6800089,0x7c02649,0x7801848,0x94c2248,0x60c0409,0x7c0278a,
-	0x6800008,0x7c02848,0x7800a8b,0x7800ac8,0xa630008,0x780184a,0xaa280ca,0x54012cb,
-	0x58012cb,0x6490708,0x9808088,0x98080c8,0x6090708,0x6495108,0x98083c8,0x6095108,
-	0x7c027cb,0x7800b08,0x944220a,0x7c00b08,0xa640388,0x68000ca,0x6495108,0x940420a,
-	0x9808648,0x6095108,0x6490708,0x9808448,0x6090708,0x6498e08,0x9808788,0x6098e08,
-	0x7801708,0xaa0c088,0x6818924,0x6814aa4,0x7800d48,0xa610008,0x7801b08,0xc780b00,
-	0x60c0a08,0xfc07200,0x80c2940,0x7801b08,0x9808188,0x98083c8,0x60c0a08,0x9c083c8,
-	0x9808388,0xc00b840,0x60c0a08,0x7802649,0x64c0a08,0x91c2208,0xa6f8008,0x780295b,
-	0x6c0001b,0x680001c,0x6c0001c,0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,
-	0xa628009,0x7800b08,0x680030a,0xaa18388,0x7c0290a,0x680018a,0x7c0290a,0xcc00000,
-	0x60c0715,0xcc00000,0x680030a,0xaa18388,0x7c0290a,0x680018a,0x7c0290a,0xcc00000,
-	0x60c0715,0xcc00000,0x0000000,0xc00afc0,0x80c0600,0x780295b,0x6c0001b,0x680001c,
-	0x6c0001c,0x680001d,0x6c0001d,0x680001e,0x6c0001e,0x6bfffdf,0x7802649,0xa628009,
-	0x7800b08,0x680030a,0xaa18388,0x7c0290a,0x680018a,0x7c0290a,0xcc00000,0x60c0715,
-	0xcc00000,0x680030a,0xaa18388,0x7c0290a,0x680018a,0x7c0290a,0xcc00000,0x60c0715,
-	0xcc00000,0x0000000,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0xa224055,
-	0x7802988,0x7c029c8,0x4000817,0x4000858,0x4000899,0x40008da,0xc781400,0x60c0715,
-	0x683ffc8,0x4401208,0xaa0c008,0x78028cb,0xa6f400b,0x68000cb,0x7802a08,0x95102c8,
-	0x78021c8,0x97082c8,0x6031e0b,0xaa08008,0xc780b00,0x80c0700,0x7802949,0x6c00009,
-	0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,
-	0x6c00009,0x60c0209,0x6bfffca,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x78029c9,
-	0x961024a,0x60c2709,0x80c0701,0x7802949,0x6c00009,0x60c0209,0x6800009,0x6c00009,
-	0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x60c0317,
-	0x60c0318,0x60c0319,0x60c031a,0x780298b,0x96102ca,0x60c270b,0xc780580,0x60c0715,
-	0x64c270a,0x921028a,0x60c0320,0x60c0321,0x60c0322,0x60c0323,0x78029c9,0x961024a,
-	0x60c2709,0x80c0701,0x64c270a,0x921028a,0x60c0317,0x60c0318,0x60c0319,0x60c031a,
-	0x7802989,0x961024a,0x60c2709,0x60c0715,0x6431e0a,0xbefc04a,0x7802b08,0x4c30208,
-	0xc780b40,0x60c2508,0x64c031b,0x64c031c,0x64c031d,0x64c031e,0x64c271f,0x60c0715,
-	0x921029f,0x78021c8,0xa638008,0x7802949,0x6c00009,0x60c0209,0x6800009,0x6c00009,
-	0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6800009,0x6c00009,0x60c0209,0x6bfffca,
-	0x60c0317,0x60c0318,0x60c0319,0x60c031a,0x7802989,0x961024a,0x60c2709,0x7802b08,
-	0x4c30208,0x60c2508,0x683ffca,0x78028cb,0xaa0c00b,0xa6f800a,0x440128a,0x68000cb,
-	0x7802a0a,0x95102ca,0x78021ca,0x97082ca,0x6031e0b,0x7802b4c,0x7802748,0x7c02a88,
-	0x64c2308,0x9304248,0xa6f8009,0x90a1248,0x9024208,0x9521209,0xaa0c00c,0x7c02748,
-	0xc781640,0xaa6002c,0xa65c008,0xa62406c,0x64c200a,0x91942ca,0xba4c20b,0x44022cb,
-	0x959428b,0x60c060a,0xc7803c0,0x68000ac,0xa6240ac,0x64c060a,0x91832ca,0xae2814b,
-	0x40022cb,0x958328b,0x60c060a,0xc780180,0x68000ec,0x900f2ca,0xae0c04b,0xc780080,
-	0x680006c,0xaa64248,0x60c2508,0xaa64288,0xaa58348,0xaa1c049,0xaa58388,0xa60c008,
-	0xc7801c0,0x0000000,0x80c2605,0x80c2606,0x80c2602,0x80c260f,0x80c2603,0x7802809,
-	0xaa100c9,0x680008a,0xc782940,0x7c0280a,0x78028cc,0xa6fc00c,0x0000000,0x7c02849,
-	0xc7827c0,0x7c0280a,0x80c2602,0x80c260f,0x80c2603,0x7802809,0xaa50089,0x68000ca,
-	0x78021c9,0xaa0c009,0xc782540,0x7c0280a,0xaa08725,0xbef4055,0x683ffcc,0x7802889,
-	0x64e0c0a,0x901028a,0xb804289,0xaa0c00c,0xc7ffec0,0x440130c,0x6800089,0x68000ca,
-	0x680180c,0x60c210c,0x683ffcd,0xaa2c00d,0x64e110c,0x910130c,0xa6f400c,0x440134d,
-	0x64e110c,0x910130c,0xa6e400c,0x78028cc,0xa6dc00c,0x0000000,0x7c02849,0xc781e00,
-	0x7c0280a,0x6800008,0x7c02748,0x60c2508,0x6431e08,0xbefc048,0x68fdfc8,0x6fcffc8,
-	0x64e0407,0x2807207,0xc7ff140,0x60e0408,0x64c031b,0x64c031c,0x64c271f,0xa228055,
-	0x7802988,0x7c029c8,0x4000817,0x4000858,0x60c0715,0x7802b08,0x4c30208,0xc781500,
-	0x60c2508,0x78021c8,0xa658008,0x80c0700,0x7802949,0x6c00009,0x60c0209,0x80c0200,
-	0x6bfffca,0x60c0320,0x60c0321,0x78029cb,0x96102ca,0x60c270b,0x80c0701,0x60c0209,
-	0x80c0200,0x60c0317,0x60c0318,0x780298b,0x96102ca,0x60c270b,0xc780480,0x60c0715,
-	0x64c270a,0x921028a,0x60c0320,0x60c0321,0x78029c9,0x961024a,0x60c2709,0x80c0701,
-	0x64c270a,0x921028a,0x60c0317,0x60c0318,0x7802989,0x961024a,0x60c2709,0x60c0715,
-	0x7802b08,0x4c30208,0x60c2508,0x78028cb,0xa6fc00b,0x68000cb,0x7802a0a,0x95102ca,
-	0x78021ca,0x97082ca,0xc780840,0x6031e0b,0x64c031b,0x64c031c,0x64c271f,0x60c0715,
-	0x921029f,0x78021c8,0xa618008,0x7802949,0x6c00009,0x60c0209,0x80c0200,0x6bfffca,
-	0x60c0317,0x60c0318,0x7802989,0x961024a,0x60c2709,0x7802b08,0x4c30208,0x60c2508,
-	0x683ffca,0x440128a,0xaa0c00a,0x78028cb,0xa6f400b,0x68000cb,0x7802a0a,0x95102ca,
-	0x78021ca,0x97082ca,0x6031e0b,0x7802748,0x7c02a88,0x64c2308,0x9304248,0xa6f8009,
-	0x9024208,0x7c02748,0xaa10288,0x60c2508,0x80c2602,0x80c260f,0x80c2603,0x4c00208,
-	0x9808208,0x60c2108,0x7802408,0xaa14008,0x6a01009,0xaa0c048,0x6a22009,0x6a40009,
-	0x6431e0a,0xbefc04a,0x6c00109,0x7800b0a,0xa66838a,0xa264055,0x7802a8b,0xaa1c00b,
-	0x780284b,0x0800000,0x780288a,0x400128a,0x7c0288a,0x0400000,0xb61408b,0x0000000,
-	0x80c2170,0xc780880,0x80c260e,0x683ffcb,0x44012cb,0xaa0c00b,0x78028ca,0xa6f400a,
-	0x780288a,0x440128a,0xc0089c0,0x7c0288a,0xc7805c0,0x8030580,0x78028ca,0xa6fc00a,
-	0x0000000,0x60e0509,0x7802849,0x680180a,0x9502289,0x60c210a,0x80c260e,0x6800089,
-	0x7c02448,0xba0c088,0x4001208,0x6800008,0x7c02408,0x78021c8,0x7c02308,0x7802a88,
-	0x7c02ac8,0x7c028c9,0x8030580,0x7802a08,0xaa14725,0x4001208,0x7802209,0xa20c049,
-	0x0000000,0x7c02a08,0x683ffc9,0x64c2308,0x9304208,0xaa30008,0x0000000,0x80c3e01,
-	0x64c3f08,0x93e1208,0xaae4008,0xb6e0049,0x4401249,0xc0655c0,0x0000000,0xc781740,
-	0x0000000,0x64c2b08,0x60c2b08,0x780234e,0xba13fce,0x6800009,0xc7810c0,0x7c02349,
-	0x6808009,0xba1070e,0x400028e,0x441c28a,0x680c009,0x54032ca,0x200b28b,0x20092c9,
-	0x740025f,0x4001249,0x921031b,0x740024c,0x4001249,0x740025b,0x4001249,0x740025c,
-	0x4001249,0x921031c,0x740024c,0x4001249,0x740025d,0x4001249,0x921031d,0x740024c,
-	0x4001249,0x740025e,0x4001249,0x921031e,0x740024c,0x7800a49,0xac07949,0x78021cb,
-	0xaa38725,0x400030b,0x780220b,0xc7802c0,0x942f2cc,0xa61000b,0xaa14725,0x780220b,
-	0xa20c04b,0xa6146ca,0x40012ce,0xb60c70e,0x680000b,0x680070b,0x7c0234b,0xb012949,
-	0xaa0800b,0xa64070b,0x780238b,0xa20c04b,0x6a0800c,0x6a0c00c,0x649ce0b,0x200a2ea,
-	0x78023cd,0x54092cd,0x200b28b,0x603510b,0x6803f0b,0x603520b,0x603500c,0xc006640,
-	0x0000000,0x7800b08,0xaa6c388,0x78021c8,0x4001208,0x7c021c8,0x7802249,0x4001249,
-	0x7c02249,0x7800a49,0xb82c248,0x6800008,0x7c021c8,0x7802209,0x4001249,0x78027ca,
-	0xb404289,0x7c02209,0xc780900,0x0000000,0x680004a,0xc001f40,0x0000000,0xc067a40,
-	0x0000000,0x8032100,0x809ca01,0xc7f4040,0x6804643,0x7802209,0xbe10049,0x4001209,
-	0xc780580,0x7c02208,0x4401209,0x7c02208,0x78021c8,0x4001208,0x7c021c8,0x7802249,
-	0x4001249,0x7c02249,0x7800a49,0xb80b248,0x6800008,0x7c021c8,0x7802209,0x4002249,
-	0x78027ca,0xb805289,0x7c02209,0x6800008,0xc7ff800,0x7c02248,0x64c3b08,0x920c208,
-	0xb214a08,0x680004b,0x7c0174b,0x680204b,0x7c02b4b,0x78021c8,0x9508548,0x780220a,
-	0x940854a,0x7800a4a,0xb01494a,0x6808009,0xa628725,0xc780a40,0x0000000,0x780220b,
-	0xa20c04b,0x50012cb,0x4001208,0x5401208,0xc780a40,0x940120b,0x4001208,0xa418288,
-	0x780234a,0x7802208,0xa27c048,0x400220a,0xc780380,0x6800008,0xaa7c725,0x780220b,
-	0xa2bc04b,0x40012c8,0xa4ed28b,0xc780680,0x6800008,0xaa14725,0x6800008,0x7802208,
-	0x5001208,0x4801208,0xb60c70a,0x6808009,0x680c009,0xc780400,0x0000000,0xa628048,
-	0x400220a,0x7802208,0xbe1c048,0x400220a,0xc7ffd80,0x6800048,0xaabc008,0x780234a,
-	0x400120a,0xba10708,0xb6ace08,0x680c009,0x441c208,0x5403288,0x200a20a,0x2009289,
-	0x700024a,0x7c0298a,0x4001249,0x700024a,0x4001249,0x7000257,0x96105ca,0x4001249,
-	0x7000258,0x4001249,0x700024a,0x961060a,0x4001249,0x7000259,0x4001249,0x700024a,
-	0x961064a,0x4001249,0x700025a,0x4001249,0x700024a,0x961068a,0x6bfda8a,0x603040a,
-	0xcc00000,0x0400000,0x78028c8,0xa6fc008,0x0000000,0x64c0008,0xa2f0048,0x64c3d08,
-	0x580a208,0xbef80c8,0x6a00008,0x60c3d08,0x64c3d08,0x580a208,0xbef80c8,0x0000000,
-	0xcc00000,0x0000000,0x7801688,0xaa18008,0x7801708,0xa614088,0x0000000,0x8098002,
-	0x80980f0,0xc780a80,0x80c2400,0x64c2208,0x9305248,0x93a22c8,0x9205288,0x92a2308,
-	0x540230c,0x2c0b30b,0x9105388,0x91a2308,0x540430c,0x2c0b30b,0x90053c8,0x90a2308,
-	0x540630c,0x2c0b30b,0x7801708,0xa63c188,0x80c2408,0x64c2208,0x480330b,0xaa340cc,
-	0x0000000,0x480f2cb,0x9305388,0x93a2308,0x540430c,0x2c0b30b,0x92053c8,0x92a2308,
-	0x540630c,0x2c0b30b,0xc780280,0x0000000,0x48032cb,0x9305288,0x93a2308,0x540230c,
-	0x2c0b30b,0xc7800c0,0x0000000,0xc780600,0x5418249,0x609b309,0x649b309,0x541828a,
-	0x609b30a,0x649b30a,0x541838e,0x609b30e,0x649b30e,0x54183cf,0x609b30f,0x649b30f,
-	0x8098002,0x6bfffcc,0x541030c,0x6bfffcd,0x2c0d30d,0x609820d,0x480330b,0xa6540cc,
-	0x0000000,0xc7800c0,0x0000000,0xc7806c0,0x5410309,0x581030c,0x5410349,0x2c0d30d,
-	0x609810d,0x540430b,0x609800c,0xa813289,0x0000000,0x541030a,0x581030c,0x541034a,
-	0x2c0d30d,0x609820d,0xc780300,0x0000000,0x5410309,0x581030c,0x541034a,0x2c0d30d,
-	0x609810d,0x540430b,0x4c0430c,0x609800c,0xc7800c0,0x0000000,0xc780380,0x480330b,
-	0x541830c,0x2c0c24c,0x483034b,0x541434d,0x2c0d38d,0xa80734c,0x0000000,0x541030e,
-	0x581030c,0x541034f,0x2c0d30d,0x609820d,0x7800b0c,0xa60c38c,0x6800725,0x5801965,
-	0x6bfffcc,0x680001b,0x7802957,0x6800018,0x680001c,0x6800019,0x680001d,0x680001a,
-	0x680001e,0x4000817,0x4000858,0x4000899,0x40008da,0x680800b,0x680070f,0x74002cc,
-	0x40012cb,0x74002db,0x40012cb,0x74002d7,0x40012cb,0x74002d8,0x40012cb,0x74002dc,
-	0x40012cb,0x74002d9,0x40012cb,0x74002dd,0x40012cb,0x74002da,0x40012cb,0x74002de,
-	0xd07fbcf,0x40012cb,0x7c0298c,0x7c029cc,0x961030c,0x80c0700,0x60c270c,0x96105db,
-	0x60c0217,0x961061c,0x780264f,0xaa1800f,0x60c0218,0x961065d,0x60c0219,0x961069e,
-	0x60c021a,0x80c0701,0x60c270c,0x60c0217,0xaa1000f,0x60c0218,0x60c0219,0x60c021a,
-	0x7800a4f,0xb00894f,0x649ce09,0x200826a,0x6035108,0x6803f08,0x6035208,0x6a08008,
-	0x6035008,0x78021c8,0xa60c008,0x6803fc8,0x7c02348,0x6800008,0x7c02a08,0xac0b94f,
-	0x7802348,0xb613fc8,0xba0c708,0x441c208,0x7c02348,0x6435008,0x580f208,0xbef8048,
-	0xcc00000,0x0000000,0x6435008,0x580f208,0xbef8048,0x0000000,0x6435308,0x900c208,
-	0xa6f8008,0x0000000,0x649ce09,0x200826a,0x6035108,0x6803f08,0x6035208,0x6b0c008,
-	0x6035008,0x5401225,0xac0520f,0x6800088,0x7c02388,0xc7ff8c0,0x7c023c8,0x681000a,
-	0x20092aa,0x649ce0a,0x2009289,0x54012a5,0x200a94a,0x680008b,0x7c0238b,0x68000cb,
-	0x6435008,0x580f208,0xbef8048,0x6803f08,0x6035109,0x6035208,0x6a08008,0x6035008,
-	0xac0328f,0xc7ff3c0,0x7c023cb,0x6808008,0x2009209,0x200a94a,0xc7ffc80,0x40012cb,
-	0x400134d,0x481f34d,0x7c023cd,0x980c38c,0x780238d,0x54092cd,0x200ba8b,0x649ce0a,
-	0x200b28b,0x400134d,0x481f34d,0x7c0238d,0x643500d,0x580f34d,0xbef804d,0x0000000,
-	0x643530d,0x900c34d,0xa6f800d,0x0000000,0x603510b,0x6803f0b,0x603520b,0xc7fed80,
-	0x603500c,0x780240c,0xa60c00c,0x440120c,0x6800088,0xaa14008,0x6a01009,0xaa0c048,
-	0x6a22009,0x6a40009,0x6c00109,0x60e0509,0x7c02448,0x7802849,0x680180a,0x9502289,
-	0x60c210a,0x80c260e,0x680004a,0x7c02a4a,0x78021c9,0x7c02309,0x7802a89,0x7c02ac9,
-	0x6800089,0xcc00000,0x7c028c9,0xcc00000,0x0400000,0x64e1226,0x91e19a6,0xbef0066,
-	0x78028e6,0xaa480a6,0xc782c40,0x6800027,0x6c04027,0x7802a69,0x97c19e9,0x60e1227,
-	0x7802227,0xa210067,0x40005ab,0x6900016,0x2016ad6,0x649ce26,0x2016996,0x6800026,
-	0x7c02866,0xc7825c0,0x6800126,0x7802867,0xaa080a7,0xc781340,0x78026e8,0xaeb00a8,
-	0x7802a69,0xaa50725,0x7802326,0x54069a6,0x7802228,0x5801a28,0xbe10068,0x40009eb,
-	0x6900027,0x2027ae7,0x649ce28,0x2027a27,0x20269e6,0x44409a6,0x60e1326,0xaa48029,
-	0x40c05a6,0x6805c28,0x60c2128,0xc780380,0x4040596,0x54059a6,0x7802228,0xbe10068,
-	0x40009eb,0x6900027,0x2027ae7,0x649ce28,0x2027a27,0x20269e6,0x44209a6,0x60e1326,
-	0x40605a6,0x7802468,0xaa14028,0x6a2c227,0xaa0c068,0x6a2c027,0x6a2c127,0xaa10029,
-	0x6c04027,0x68003e6,0x95069e6,0x97c19e9,0x60e1227,0x6800026,0x7c02866,0x6800126,
-	0xc781dc0,0x7c028e6,0x78024a7,0x78024e8,0x96109e8,0x7802928,0x2427a27,0x2427a27,
-	0x7802a69,0xaa0c029,0x2427a27,0x2427a27,0x78027a6,0x54099a6,0x20269e6,0x54039e6,
-	0x649ce28,0x2027a27,0x60e1327,0x7802468,0xaa34028,0x6a44227,0xaa2c068,0x6a44027,
-	0xc780240,0x6a44127,0xa64c0e7,0x78028a6,0x64e0c28,0x9010a28,0xb8e4a26,0xcc00000,
-	0x0400000,0xaa10029,0x6c0c027,0x68005e6,0x95069e6,0x97c19e9,0x60e1227,0x6800016,
-	0x6800026,0x7c02866,0x6800166,0xc781300,0x7c028e6,0x7802727,0xaa1c027,0x44019e7,
-	0x7c02727,0x78026e7,0x44019e7,0xc780f80,0x7c026e7,0x7802527,0x7c025a7,0x7802566,
-	0x7c025e6,0x96109e6,0x78027a6,0x54099a6,0x20269e6,0x7802928,0x2027a27,0x7c02527,
-	0x92109e7,0x7c02567,0x54039e6,0x649ce28,0x2027a27,0x60e1327,0x7802468,0xaa14028,
-	0x6a16227,0xaa0c068,0x6a16027,0x6a16127,0x7802ae8,0xaa30028,0x78028a6,0x64e0c28,
-	0x9010a28,0xb806a26,0x78025a8,0x7c02528,0x78025e8,0xc7fd780,0x7c02568,0x40019a6,
-	0x7c028a6,0x7c02627,0x6c00027,0x60e1227,0x6800066,0xc780680,0x7c028e6,0xba58126,
-	0x7802a67,0xa608027,0xc7ff2c0,0x78028a7,0x40019e7,0x7c028a7,0xaa0c126,0x6800027,
-	0x80c2170,0xc780300,0x7c02a67,0xa6d0066,0x78026e7,0xaa30027,0x44019e7,0xb228067,
-	0x7c026e7,0x7802826,0xaa0c0e6,0x0000000,0x80c2170,0x6800026,0x7c028e6,0xcc00000,
-	0x0400000,0xc780540,0x0000000,0xa610026,0x40005ab,0x6900016,0x2016ad6,0x649ce28,
-	0xc780b40,0x2016a16,0xaa0c725,0x90a8996,0x90c7996,0x7800a68,0xb827a26,0xa8f4a26,
-	0x91c1996,0xa62c026,0x40005ab,0x6900016,0xc780200,0x2016ad6,0x78024a7,0x78024e8,
-	0xaa74016,0x96109e8,0xc7ffc00,0x0000000,0x649ce28,0x2016a16,0x78027a6,0x54099a6,
-	0x7802928,0x2427a27,0x20269e6,0x54039e6,0x649ce26,0x20279a7,0x60e1327,0x7802626,
-	0x90049e6,0xaa14027,0x6a14226,0xaa0c127,0x6a14026,0x6a14126,0x6c08026,0x60e0d16,
-	0xaa0c725,0x4020596,0x4020596,0xc7ff300,0x60e1226,0x78027a6,0x54099a6,0x20269e6,
-	0x7802928,0x2027a27,0x7c024a7,0x92109e7,0x7c024e7,0x54039e6,0x649ce26,0x20279a7,
-	0x60e1327,0x7802626,0xa618016,0x9c261e6,0x60e1226,0x68000e6,0xc7fee40,0x7c028e6,
-	0x6c08026,0x60e0d16,0xaae8725,0x4020596,0xc7ffe00,0x4020596,0x64e120a,0x91e128a,
-	0xbef804a,0x64e000a,0x64e030b,0x64e0e0c,0x64e0c0d,0x680100e,0x609840e,0x8098400,
-	0x680020e,0xd00000e,0x0000000,0x60e000a,0x60e030b,0x60e0e0c,0xcc00000,0x60e0c0d,
-	0xc000d00,0x0000000,0x681010a,0x6c3474a,0x609070a,0x6490b0a,0x980a00a,0x980a0ca,
-	0x6090b0a,0x9c0a00a,0x9c0a0ca,0x6090b0a,0x649ce0b,0x200a2eb,0x609440a,0x690000a,
-	0x200aaca,0x649ce0b,0x200a2ca,0x609450a,0xcc00000,0x0000000,0xc000b40,0x0000000,
-	0x8095007,0x8095000,0x6800049,0x7800a4b,0x68002ca,0xb00328b,0x0000000,0x6800009,
-	0x6498e0b,0x97c12c9,0x6098e0b,0x6497f09,0x68000cb,0x970224b,0x6097f09,0x6820889,
-	0x6c00209,0x6095109,0x7800a4b,0xb20c2cb,0x680040b,0x6800c0b,0x6495109,0x970624b,
-	0x9809649,0x6095109,0xcc00000,0x0000000,0x683ffc9,0x649090a,0xa21004a,0xaa0c009,
-	0xc7fff40,0x4401249,0x6490b0a,0x980a00a,0x980a0ca,0x6090b0a,0x9c0a00a,0x9c0a0ca,
-	0x6090b0a,0xcc00000,0x0000000,0x683ffca,0x649530b,0x90012cb,0x649bb09,0x920c249,
-	0x20092c9,0xaa10009,0xaa0c00a,0xc7ffe40,0x440128a,0xcc00000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x6bff7c0,0x6032400,0x0400000,0xc780000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,0x0000000,
-	0xcc00000,0x0400000,0xcc00000,0x0400000,0xcc00000,0x0400000,0xcc00000,0x0400000,
-	0xcc00000,0x0400000,0xc780200,0x6431e07,0xcc00000,0x0400000,0xcc00000,0x0400000,
-	0xcc00000,0x0400000,0x9027207,0xa668048,0x68fdfca,0x6fcffca,0x64e0408,0x2808288,
-	0x9110287,0x64c0909,0xac0924a,0xb80324a,0xc7801c0,0x9808688,0x400128a,0x98083c8,
-	0xa40324a,0x440128a,0x98086c8,0xaa1000a,0x9308287,0xa60c00a,0x400128a,0x9808388,
-	0xb80324a,0x0000000,0x98081c8,0xc780080,0x60e0408,0x8031e00,0xcc00000,0x0400000,
-	0x0000000,0x0000000
-};
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k.c b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k.c
deleted file mode 100755
index f5e85da8e374..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k.c
+++ /dev/null
@@ -1,1271 +0,0 @@
-/*
- * AMLOGIC Audio/Video streaming port driver.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the named License,
- * or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
- *
- */
-
-#include <linux/kernel.h>
-#include <linux/types.h>
-#include <linux/errno.h>
-#include <linux/interrupt.h>
-#include <linux/timer.h>
-#include <linux/platform_device.h>
-#include <linux/amports/amstream.h>
-#include <linux/amports/ptsserv.h>
-#include <linux/amports/canvas.h>
-#include <linux/amports/vframe.h>
-#include <linux/amports/vframe_provider.h>
-#include <linux/amports/vframe_receiver.h>
-#include <linux/workqueue.h>
-#include <linux/dma-mapping.h>
-#include <asm/atomic.h>
-
-#include <mach/am_regs.h>
-#include "vdec_reg.h"
-
-#include "amvdec.h"
-#include "vh264_4k2k_mc.h"
-
-#define DRIVER_NAME "amvdec_h264_4k2k"
-#define MODULE_NAME "amvdec_h264_4k2k"
-
-#define HANDLE_h264_4k2k_IRQ
-
-#define DEBUG_PTS
-#define DEBUG_SKIP
-
-#define PUT_INTERVAL        (HZ/100)
-
-#define STAT_TIMER_INIT     0x01
-#define STAT_MC_LOAD        0x02
-#define STAT_ISR_REG        0x04
-#define STAT_VF_HOOK        0x08
-#define STAT_TIMER_ARM      0x10
-#define STAT_VDEC_RUN       0x20
-
-#define DROPPING_THREAD_HOLD    4
-#define DROPPING_FIRST_WAIT     6
-
-static int  vh264_4k2k_vf_states(vframe_states_t *states, void*);
-static vframe_t *vh264_4k2k_vf_peek(void*);
-static vframe_t *vh264_4k2k_vf_get(void*);
-static void vh264_4k2k_vf_put(vframe_t *, void*);
-static int vh264_4k2k_event_cb(int type, void *data, void *private_data);
-
-static void vh264_4k2k_prot_init(void);
-static void vh264_4k2k_local_init(void);
-static void vh264_4k2k_put_timer_func(unsigned long arg);
-
-static const char vh264_4k2k_dec_id[] = "vh264_4k2k-dev";
-
-#define PROVIDER_NAME   "decoder.h264_4k2k"
-
-static const struct vframe_operations_s vh264_4k2k_vf_provider = {
-    .peek = vh264_4k2k_vf_peek,
-    .get = vh264_4k2k_vf_get,
-    .put = vh264_4k2k_vf_put,
-    .event_cb = vh264_4k2k_event_cb,
-    .vf_states=vh264_4k2k_vf_states,
-};
-static struct vframe_provider_s vh264_4k2k_vf_prov;
-
-static u32 frame_width, frame_height, frame_dur;
-static struct timer_list recycle_timer;
-static u32 stat;
-static u32 pts_outside = 0;
-static u32 sync_outside = 0;
-static u32 vh264_4k2k_ratio;
-static u32 h264_4k2k_ar;
-static u32 no_dropping_cnt;
-
-#ifdef DEBUG_SKIP
-static unsigned long view_total, view_dropped;
-#endif
-
-#ifdef DEBUG_PTS
-static unsigned long pts_missed, pts_hit;
-#endif
-
-static atomic_t vh264_4k2k_active = ATOMIC_INIT(0);
-static struct work_struct error_wd_work;
-
-static struct dec_sysinfo vh264_4k2k_amstream_dec_info;
-extern u32 trickmode_i;
-
-static DEFINE_SPINLOCK(lock);
-
-static int vh264_4k2k_stop(void);
-static s32 vh264_4k2k_init(void);
-
-/***************************
-*   new
-***************************/
-
-// bit[3:0] command :
-//           0 - command finished
-//               (DATA0 - {level_idc_mmco, max_reference_frame_num, width, height}
-//           1 - alloc view_0 display_buffer and reference_data_area
-//           2 - alloc view_1 display_buffer and reference_data_area
-#define MAILBOX_COMMAND         AV_SCRATCH_0
-#define MAILBOX_DATA_0          AV_SCRATCH_1
-#define MAILBOX_DATA_1          AV_SCRATCH_2
-#define MAILBOX_DATA_2          AV_SCRATCH_3
-#define CANVAS_START            AV_SCRATCH_6
-#define BUFFER_RECYCLE          AV_SCRATCH_7
-#define DROP_CONTROL            AV_SCRATCH_8
-#define PICTURE_COUNT           AV_SCRATCH_9
-#define DECODE_STATUS           AV_SCRATCH_A
-#define SPS_STATUS              AV_SCRATCH_B
-#define PPS_STATUS              AV_SCRATCH_C
-#define SIM_RESERV_D            AV_SCRATCH_D
-#define WORKSPACE_START         AV_SCRATCH_E
-#define SIM_RESERV_F            AV_SCRATCH_F
-#define DECODE_ERROR_CNT        AV_SCRATCH_G
-#define CURRENT_UCODE           AV_SCRATCH_H
-#define CURRENT_SPS_PPS         AV_SCRATCH_I // bit[15:9]-SPS, bit[8:0]-PPS
-#define DECODE_SKIP_PICTURE     AV_SCRATCH_J
-#define SIM_RESERV_K            AV_SCRATCH_K
-#define SIM_RESERV_L            AV_SCRATCH_L
-#define REF_START_VIEW_0        AV_SCRATCH_M
-#define REF_START_VIEW_1        AV_SCRATCH_N
-
-/********************************************
- *  Mailbox command
- ********************************************/
-#define CMD_FINISHED               0
-#define CMD_ALLOC_VIEW_0           1
-#define CMD_ALLOC_VIEW_1           2
-#define CMD_FRAME_DISPLAY          3
-
-#define CANVAS_INDEX_START         AMVDEC_H264_4K2K_CANVAS_INDEX
-
-unsigned  DECODE_BUFFER_START=0x00200000;
-unsigned DECODE_BUFFER_END=0x05000000;
-
-#define DECODE_BUFFER_NUM_MAX    16
-#define DISPLAY_BUFFER_NUM         4
-
-static unsigned int ANC_CANVAS_ADDR;
-static unsigned int index;
-static unsigned int dpb_start_addr[3];
-static unsigned int ref_start_addr[2];
-static unsigned int max_dec_frame_buffering[2];
-static unsigned int total_dec_frame_buffering[2];
-static unsigned int level_idc, max_reference_frame_num, mb_width, mb_height;
-static unsigned int dpb_size, ref_size;
-
-static int display_buff_id;
-static int display_view_id;
-static int display_POC;
-static int stream_offset;
-
-#define video_domain_addr(adr) (adr&0x7fffffff)
-static unsigned work_space_adr;
-static unsigned work_space_size = 0xa0000;
-
-typedef struct {
-    unsigned int y_addr;
-    unsigned int u_addr;
-    unsigned int v_addr;
-
-    int y_canvas_index;
-    int u_canvas_index;
-    int v_canvas_index;
-} buffer_spec_t;
-static buffer_spec_t buffer_spec0[DECODE_BUFFER_NUM_MAX+DISPLAY_BUFFER_NUM];
-static buffer_spec_t buffer_spec1[DECODE_BUFFER_NUM_MAX+DISPLAY_BUFFER_NUM];
-
-
-/*
-    dbg_mode:
-    bit 0: 1, print debug information
-    bit 4: 1, recycle buffer without displaying;
-    bit 5: 1, buffer single frame step , set dbg_cmd to 1 to step
-
-*/
-static int dbg_mode = 0;
-static int dbg_cmd = 0;
-static int view_mode = 3; /* 0, left; 1 ,right ; 2, left<->right 3, right<->left */
-static int drop_rate = 2;
-/**/
-
-typedef struct buf_s{
-    struct list_head list;
-    vframe_t vframe;
-    int display_POC;
-    int view0_buff_id;
-    int view1_buff_id;
-    int view0_drop;
-    int view1_drop;
-    int stream_offset;
-    unsigned pts;
-}buf_t;
-
-#define spec2canvas(x)  \
-    (((x)->v_canvas_index << 16) | \
-     ((x)->u_canvas_index << 8)  | \
-     ((x)->y_canvas_index << 0))
-
-#define to_buf(vf)	\
-	container_of(vf, struct buf_s, vframe)
-
-static int vf_buf_init_flag = 0;
-
-static void init_vf_buf(void)
-{
-
-    vf_buf_init_flag = 1;
-}
-
-static void uninit_vf_buf(void)
-{
-
-}
-//#define QUEUE_SUPPORT
-
-typedef struct {
-	int view0_buf_id;
-	int view1_buf_id;
-	int display_pos;
-	int slot;
-	unsigned stream_offset;
-} info_t;
-
-#define VF_POOL_SIZE        20
-static struct vframe_s vfpool[VF_POOL_SIZE];
-static info_t vfpool_idx[VF_POOL_SIZE];
-static s32 view0_vfbuf_use[DECODE_BUFFER_NUM_MAX];
-static s32 view1_vfbuf_use[DECODE_BUFFER_NUM_MAX];
-
-static s32 fill_ptr, get_ptr, putting_ptr, put_ptr;
-#define INCPTR(p) ptr_atomic_wrap_inc(&p)
-static inline void ptr_atomic_wrap_inc(u32 *ptr)
-{
-    u32 i = *ptr;
-
-    i++;
-
-    if (i >= VF_POOL_SIZE) {
-        i = 0;
-    }
-
-    *ptr = i;
-}
-
-
-
-static void set_frame_info(vframe_t *vf)
-{
-    unsigned int ar = 0;
-
-    vf->width = frame_width;
-    vf->height = frame_height;
-    vf->duration = frame_dur;
-    vf->duration_pulldown = 0;
-
-    if (vh264_4k2k_ratio == 0) {
-        vf->ratio_control |= (0x90 << DISP_RATIO_ASPECT_RATIO_BIT); // always stretch to 16:9
-    } else {
-        //h264_4k2k_ar = ((float)frame_height/frame_width)*customer_ratio;
-        ar = min(h264_4k2k_ar, (u32)DISP_RATIO_ASPECT_RATIO_MAX);
-
-        vf->ratio_control = (ar << DISP_RATIO_ASPECT_RATIO_BIT);
-    }
-
-    return;
-}
-
-static int  vh264_4k2k_vf_states(vframe_states_t *states, void* op_arg)
-{
-    unsigned long flags;
-    int i;
-    spin_lock_irqsave(&lock, flags);
-    states->vf_pool_size = VF_POOL_SIZE;
-
-    i = put_ptr - fill_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_free_num = i;
-
-    i = putting_ptr - put_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_recycle_num = i;
-
-    i = fill_ptr - get_ptr;
-    if (i < 0) i += VF_POOL_SIZE;
-    states->buf_avail_num = i;
-
-    spin_unlock_irqrestore(&lock, flags);
-    return 0;
-}
-
-static vframe_t *vh264_4k2k_vf_peek(void* op_arg)
-{
-
-
-     if (get_ptr == fill_ptr) {
-        return NULL;
-    }
-	if((vfpool_idx[get_ptr].view0_buf_id < 0)||(vfpool_idx[get_ptr].view1_buf_id < 0)){
-		return NULL;
-	}
-    return &vfpool[get_ptr];
-
-}
-
-static vframe_t *vh264_4k2k_vf_get(void* op_arg)
-{
-
-    vframe_t *vf;
-	int view0_buf_id;
-	int view1_buf_id;
-    if (get_ptr == fill_ptr) {
-        return NULL;
-    }
-
-    view0_buf_id = vfpool_idx[get_ptr].view0_buf_id;
-    view1_buf_id = vfpool_idx[get_ptr].view1_buf_id;
-    vf = &vfpool[get_ptr];
-    if(view_mode==0 || view_mode==1){
-        vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
-        vf->canvas0Addr = vf->canvas1Addr = (view_mode==0)?spec2canvas(&buffer_spec0[view0_buf_id]):
-                spec2canvas(&buffer_spec1[view1_buf_id]);
-    }
-    else{
-        vf->type = VIDTYPE_PROGRESSIVE;
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-        vf->left_eye.start_x = 0; vf->left_eye.start_y = 0; vf->left_eye.width = vf->width; vf->left_eye.height = vf->height;
-        vf->right_eye.start_x = 0; vf->right_eye.start_y = 0; vf->right_eye.width = vf->width; vf->right_eye.height = vf->height;
-        vf->trans_fmt = TVIN_TFMT_3D_TB;
-#endif
-
-        if(view_mode==2){
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-            //vf->trans_fmt = TVIN_TFMT_3D_LRH_OLER;
-#endif
-            vf->canvas0Addr = spec2canvas(&buffer_spec1[view1_buf_id]);
-            vf->canvas1Addr = spec2canvas(&buffer_spec0[view0_buf_id]);
-        }
-        else{
-#ifdef CONFIG_POST_PROCESS_MANAGER_3D_PROCESS
-    		  //      vf->trans_fmt = TVIN_TFMT_3D_LRH_ELOR
-#endif
-            vf->canvas0Addr = spec2canvas(&buffer_spec0[view0_buf_id]);
-            vf->canvas1Addr = spec2canvas(&buffer_spec1[view1_buf_id]);
-        }
-    }
-
-    INCPTR(get_ptr);
-
-    if(vf){
-        if(frame_width==0){
-            frame_width = vh264_4k2k_amstream_dec_info.width;
-        }
-        if(frame_height==0){
-            frame_height = vh264_4k2k_amstream_dec_info.height;
-        }
-
-        vf->width = frame_width;
-        vf->height = frame_height;
-    }
-    return vf;
-
-}
-
-static void vh264_4k2k_vf_put(vframe_t *vf, void* op_arg)
-{
-
-    if(vf_buf_init_flag == 0){
-        return;
-    }
-	INCPTR(putting_ptr);
-
-}
-
-static int vh264_4k2k_event_cb(int type, void *data, void *private_data)
-{
-    if(type & VFRAME_EVENT_RECEIVER_RESET){
-        unsigned long flags;
-        amvdec_stop();
-#ifndef CONFIG_POST_PROCESS_MANAGER
-        vf_light_unreg_provider(&vh264_4k2k_vf_prov);
-#endif
-        spin_lock_irqsave(&lock, flags);
-        vh264_4k2k_local_init();
-        vh264_4k2k_prot_init();
-        spin_unlock_irqrestore(&lock, flags);
-#ifndef CONFIG_POST_PROCESS_MANAGER
-        vf_reg_provider(&vh264_4k2k_vf_prov);
-#endif
-        amvdec_start();
-    }
-    return 0;
-}
-
-/**/
-long init_canvas( int start_addr, long dpb_size, int dpb_number, int mb_width, int mb_height, buffer_spec_t* buffer_spec) {
-
-  int dpb_addr, addr;
-  int i;
-  int mb_total;
-
-  //cav_con canvas;
-
-    dpb_addr = start_addr;
-
-    mb_total = mb_width * mb_height;
-
-    for ( i = 0 ; i < dpb_number ; i++ )
-    {
-        WRITE_VREG(ANC_CANVAS_ADDR, index | ((index+1)<<8) | ((index+2)<<16));
-        ANC_CANVAS_ADDR++;
-
-        addr = dpb_addr;
-        buffer_spec[i].y_addr = addr;
-        buffer_spec[i].y_canvas_index = index;
-        canvas_config(index,
-                  addr,
-                  mb_width << 4,
-                  mb_height << 4,
-                  CANVAS_ADDR_NOWRAP,
-                  CANVAS_BLKMODE_32X32);
-
-        addr += mb_total << 8;
-        index++;
-        buffer_spec[i].u_addr = addr;
-        buffer_spec[i].u_canvas_index = index;
-        canvas_config(index,
-                  addr,
-                  mb_width << 3,
-                  mb_height << 3,
-                  CANVAS_ADDR_NOWRAP,
-                  CANVAS_BLKMODE_32X32);
-
-        addr += mb_total << 6;
-        index++;
-        buffer_spec[i].v_addr = addr;
-        buffer_spec[i].v_canvas_index = index;
-        canvas_config(index,
-                  addr,
-                  mb_width << 3,
-                  mb_height << 3,
-                  CANVAS_ADDR_NOWRAP,
-                  CANVAS_BLKMODE_32X32);
-
-
-        addr += mb_total << 6;
-        index++;
-
-        dpb_addr = dpb_addr + dpb_size;
-        if(dpb_addr >= DECODE_BUFFER_END) return -1;
-    }
-
-    return dpb_addr;
-}
-
-
-static int get_max_dec_frame_buf_size(int level_idc, int max_reference_frame_num, int mb_width, int mb_height)
-{
-  int pic_size = mb_width * mb_height * 384;
-
-  int size = 0;
-
-  switch (level_idc)
-  {
-  case 9:
-    size = 152064;
-    break;
-  case 10:
-    size = 152064;
-    break;
-  case 11:
-    size = 345600;
-    break;
-  case 12:
-    size = 912384;
-    break;
-  case 13:
-    size = 912384;
-    break;
-  case 20:
-    size = 912384;
-    break;
-  case 21:
-    size = 1824768;
-    break;
-  case 22:
-    size = 3110400;
-    break;
-  case 30:
-    size = 3110400;
-    break;
-  case 31:
-    size = 6912000;
-    break;
-  case 32:
-    size = 7864320;
-    break;
-  case 40:
-    size = 12582912;
-    break;
-  case 41:
-    size = 12582912;
-    break;
-  case 42:
-    size = 13369344;
-    break;
-  case 50:
-    size = 42393600;
-    break;
-  case 51:
-    size = 70778880;
-    break;
-  default:
-    break;
-  }
-
-  size /= pic_size;
-  size = size + 1; // need one more buffer
-  if(max_reference_frame_num > size) size = max_reference_frame_num;
-  if(size > DECODE_BUFFER_NUM_MAX) size = DECODE_BUFFER_NUM_MAX;
-
-  return size;
-}
-
-
-int check_in_list(int pos , int* slot)
-{
-	int i;
-	int ret = 0 ;
-	for(i = 0 ; i < VF_POOL_SIZE ; i++){
-		if(vfpool_idx[i].display_pos == pos){
-			ret =1;
-			*slot = vfpool_idx[i].slot ;
-			break;
-		}
-	}
-	return ret ;
-}
-
-#ifdef HANDLE_h264_4k2k_IRQ
-static irqreturn_t vh264_4k2k_isr(int irq, void *dev_id)
-#else
-static void vh264_4k2k_isr(void)
-#endif
-{
-        int drop_status;
-        vframe_t *vf;
-        int ret = READ_VREG(MAILBOX_COMMAND);
-        //printk("vh264_4k2k_isr, cmd =%x\n", ret);
-        switch(ret & 0xff) {
-          case CMD_ALLOC_VIEW_0:
-            if(dbg_mode&0x1)
-                printk("Start H264 display buffer allocation for view 0\n");
-            if((dpb_start_addr[0] != -1) | (dpb_start_addr[1] != -1)){
-              dpb_start_addr[0] = -1;
-              dpb_start_addr[1] = -1;
-            }
-            dpb_start_addr[0] = DECODE_BUFFER_START;
-            ret = READ_VREG(MAILBOX_DATA_0);
-            level_idc = (ret >> 24) & 0xff;
-            max_reference_frame_num = (ret >> 16) & 0xff;
-            mb_width = (ret >> 8) & 0xff;
-            mb_height = (ret >> 0) & 0xff;
-            max_dec_frame_buffering[0] = get_max_dec_frame_buf_size(level_idc, max_reference_frame_num, mb_width, mb_height);
-
-            total_dec_frame_buffering[0] = max_dec_frame_buffering[0] + DISPLAY_BUFFER_NUM;
-
-            mb_width = (mb_width+3) & 0xfffffffc;
-            mb_height = (mb_height+3) & 0xfffffffc;
-
-            dpb_size = mb_width * mb_height * 384;
-            ref_size = mb_width * mb_height * 96;
-
-            if(dbg_mode&0x1){
-                printk("dpb_size: 0x%x\n", dpb_size);
-                printk("ref_size: 0x%x\n", ref_size);
-                printk("total_dec_frame_buffering[0] : 0x%x\n", total_dec_frame_buffering[0]);
-                printk("max_reference_frame_num: 0x%x\n", max_reference_frame_num);
-            }
-            ref_start_addr[0] = dpb_start_addr[0] +
-                                (dpb_size * total_dec_frame_buffering[0]);
-            dpb_start_addr[1] = ref_start_addr[0] +
-                                (ref_size * (max_reference_frame_num+1));
-
-            if(dbg_mode&0x1){
-                printk("dpb_start_addr[0]: 0x%x\n", dpb_start_addr[0]);
-                printk("ref_start_addr[0]: 0x%x\n", ref_start_addr[0]);
-                printk("dpb_start_addr[1]: 0x%x\n", dpb_start_addr[1]);
-            }
-            if(dpb_start_addr[1] >= DECODE_BUFFER_END)
-            {
-               printk(" No enough memory for alloc view 0\n");
-               goto exit;
-            }
-
-            index = CANVAS_INDEX_START;
-            ANC_CANVAS_ADDR = ANC0_CANVAS_ADDR;
-
-            ret = init_canvas(dpb_start_addr[0], dpb_size, total_dec_frame_buffering[0], mb_width, mb_height, buffer_spec0);
-
-            if(ret == -1) {
-               printk(" Un-expected memory alloc problem\n");
-               goto exit;
-            }
-
-            WRITE_VREG(REF_START_VIEW_0, video_domain_addr(ref_start_addr[0]));
-            WRITE_VREG(MAILBOX_DATA_0,
-                (max_dec_frame_buffering[0] << 8) |
-                (total_dec_frame_buffering[0] << 0)
-              );
-            WRITE_VREG(MAILBOX_DATA_1, ref_size);
-            WRITE_VREG(MAILBOX_COMMAND, CMD_FINISHED);
-
-            if(dbg_mode&0x1){
-                printk("End H264 display buffer allocation for view 0\n");
-            }
-            if(frame_width == 0){
-                frame_width = mb_width<<4;
-            }
-            if(frame_height == 0){
-                frame_height = mb_height<<4;
-                if(frame_height == 1088) frame_height = 1080;
-            }
-            break;
-          case CMD_ALLOC_VIEW_1:
-            if(dbg_mode&0x1){
-                printk("Start H264 display buffer allocation for view 1\n");
-            }
-            if((dpb_start_addr[0] == -1) | (dpb_start_addr[1] == -1)){
-              printk("Error : allocation view 1 before view 0 !!!\n");
-              break;
-            }
-            ret = READ_VREG(MAILBOX_DATA_0);
-            level_idc = (ret >> 24) & 0xff;
-            max_reference_frame_num = (ret >> 16) & 0xff;
-            mb_width = (ret >> 8) & 0xff;
-            mb_height = (ret >> 0) & 0xff;
-            max_dec_frame_buffering[1] = get_max_dec_frame_buf_size(level_idc, max_reference_frame_num, mb_width, mb_height);
-            if(max_dec_frame_buffering[1] != max_dec_frame_buffering[0]){
-              printk(" Warning : view0/1 max_dec_frame_buffering different : 0x%x/0x%x, Use View0\n",
-                max_dec_frame_buffering[0], max_dec_frame_buffering[1]);
-              max_dec_frame_buffering[1] = max_dec_frame_buffering[0];
-            }
-
-            total_dec_frame_buffering[1] = max_dec_frame_buffering[1] + DISPLAY_BUFFER_NUM;
-
-            mb_width = (mb_width+3) & 0xfffffffc;
-            mb_height = (mb_height+3) & 0xfffffffc;
-
-            dpb_size = mb_width * mb_height * 384;
-            ref_size = mb_width * mb_height * 96;
-
-            if(dbg_mode&0x1){
-                printk("dpb_size: 0x%x\n", dpb_size);
-                printk("ref_size: 0x%x\n", ref_size);
-                printk("total_dec_frame_buffering[1] : 0x%x\n", total_dec_frame_buffering[1]);
-                printk("max_reference_frame_num: 0x%x\n", max_reference_frame_num);
-            }
-            ref_start_addr[1] = dpb_start_addr[1] +
-                                (dpb_size * total_dec_frame_buffering[1]);
-            dpb_start_addr[2] = ref_start_addr[1] +
-                                (ref_size * (max_reference_frame_num+1));
-
-            if(dbg_mode&0x1){
-                printk("dpb_start_addr[1]: 0x%x\n", dpb_start_addr[1]);
-                printk("ref_start_addr[1]: 0x%x\n", ref_start_addr[1]);
-                printk("dpb_start_addr[2]: 0x%x\n", dpb_start_addr[2]);
-            }
-            if(dpb_start_addr[2] >= DECODE_BUFFER_END)
-            {
-               printk(" No enough memory for alloc view 1\n");
-               goto exit;
-            }
-
-            index = CANVAS_INDEX_START + total_dec_frame_buffering[0] * 3;
-            ANC_CANVAS_ADDR = ANC0_CANVAS_ADDR + total_dec_frame_buffering[0];
-
-            ret = init_canvas(dpb_start_addr[1], dpb_size, total_dec_frame_buffering[1], mb_width, mb_height, buffer_spec1);
-
-            if(ret == -1) {
-               printk(" Un-expected memory alloc problem\n");
-               goto exit;
-            }
-
-            WRITE_VREG(REF_START_VIEW_1, video_domain_addr(ref_start_addr[1]));
-            WRITE_VREG(MAILBOX_DATA_0,
-                (max_dec_frame_buffering[1] << 8) |
-                (total_dec_frame_buffering[1] << 0)
-              );
-            WRITE_VREG(MAILBOX_DATA_1, ref_size);
-            WRITE_VREG(MAILBOX_COMMAND, CMD_FINISHED);
-
-            if(dbg_mode&0x1){
-                printk("End H264 display buffer allocation for view 1\n");
-            }
-            if(frame_width == 0){
-                frame_width = mb_width<<4;
-            }
-            if(frame_height == 0){
-                frame_height = mb_height<<4;
-                if(frame_height == 1088) frame_height = 1080;
-            }
-            break;
-          case CMD_FRAME_DISPLAY:
-            ret = READ_VREG(MAILBOX_DATA_0);
-            display_buff_id = (ret >> 0) & 0x3f;
-            display_view_id = (ret >> 6) & 0x3;
-            drop_status = (ret >> 8) & 0x1;
-            display_POC = READ_VREG(MAILBOX_DATA_1);
-            stream_offset = READ_VREG(MAILBOX_DATA_2);
-//if (display_view_id == 0)
-//printk("view_id=%d,buff_id=%d,offset=%d, display_POC = %d,ret=0x%x\n", display_view_id, display_buff_id, stream_offset, display_POC, ret);
-            WRITE_VREG(MAILBOX_COMMAND, CMD_FINISHED);
-
-#ifdef DEBUG_SKIP
-            view_total++;
-            if (drop_status)
-                view_dropped++;
-#endif
-            if(dbg_mode&0x1){
-                printk(" H264 display frame ready -------------- View : %x, Buffer : %x\n", display_view_id, display_buff_id);
-                printk(" H264 display frame POC -------------- Buffer : %x, POC : %x\n", display_buff_id, display_POC);
-                printk("H264 display frame ready\n");
-            }
-            if(dbg_mode&0x10){
-                if((dbg_mode&0x20)==0){
-                    while(READ_VREG(BUFFER_RECYCLE) !=0) {}
-                    WRITE_VREG(BUFFER_RECYCLE, (display_view_id<<8)|(display_buff_id+1));
-                    display_buff_id = -1;
-                    display_view_id = -1;
-                    display_POC = -1;
-                }
-            }
-            else{
-            	unsigned char in_list_flag = 0;
-
-				int slot =0 ;
-				in_list_flag  =  check_in_list(display_POC ,&slot);
-
-				if(!in_list_flag){
-					if(display_view_id ==0){
-						vfpool_idx[fill_ptr].view0_buf_id = display_buff_id;
-						view0_vfbuf_use[display_buff_id]++;
-						vfpool_idx[fill_ptr].stream_offset = stream_offset ;
-
-					}
-					if(display_view_id == 1){
-						vfpool_idx[fill_ptr].view1_buf_id = display_buff_id;
-						view1_vfbuf_use[display_buff_id]++;
-					}
-					vfpool_idx[fill_ptr].slot = fill_ptr;
-					vfpool_idx[fill_ptr].display_pos = display_POC;
-					INCPTR(fill_ptr);
-				}else{
-					if(display_view_id ==0){
-						vfpool_idx[slot].view0_buf_id = display_buff_id;
-						view0_vfbuf_use[display_buff_id]++;
-						vfpool_idx[slot].stream_offset = stream_offset ;
-					}
-					if(display_view_id == 1){
-						vfpool_idx[slot].view1_buf_id = display_buff_id;
-						view1_vfbuf_use[display_buff_id]++;
-					}
-					vf = &vfpool[slot];
-					if (pts_lookup_offset(PTS_TYPE_VIDEO, vfpool_idx[slot].stream_offset, &vf->pts, 0) != 0) {
-                    	vf->pts = 0;
-                    }
-                    set_frame_info(vf);
-                    vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
-				}
-            }
-            break;
-          default : break;
-        }
-exit:
-#ifdef HANDLE_h264_4k2k_IRQ
-    return IRQ_HANDLED;
-#else
-    return;
-#endif
-}
-
-
-
-static void vh264_4k2k_put_timer_func(unsigned long arg)
-{
-    struct timer_list *timer = (struct timer_list *)arg;
-
-    while ((putting_ptr != put_ptr) && (READ_VREG(BUFFER_RECYCLE) == 0)) {
-    	int view0_buf_id = vfpool_idx[put_ptr].view0_buf_id;
-    	int view1_buf_id = vfpool_idx[put_ptr].view1_buf_id;
-		if(view0_vfbuf_use[view0_buf_id] == 1){
-			WRITE_VREG(BUFFER_RECYCLE, (0<<8)|( view0_buf_id +1));
-			view0_vfbuf_use[view0_buf_id] = 0;
-			vfpool_idx[put_ptr].view0_buf_id = -1;
-		}else if(view1_vfbuf_use[view1_buf_id] == 1){
-			 WRITE_VREG(BUFFER_RECYCLE, (1<<8)|( view1_buf_id +1));
-			 view1_vfbuf_use[view1_buf_id] = 0;
-			 vfpool_idx[put_ptr].display_pos = -1;
-			 vfpool_idx[put_ptr].view1_buf_id = -1;
-			 INCPTR(put_ptr);
-		}
-    }
-
-    timer->expires = jiffies + PUT_INTERVAL;
-
-    add_timer(timer);
-}
-
-int vh264_4k2k_dec_status(struct vdec_status *vstatus)
-{
-    vstatus->width = frame_width;
-    vstatus->height = frame_height;
-    if (frame_dur != 0) {
-        vstatus->fps = 96000 / frame_dur;
-    } else {
-        vstatus->fps = -1;
-    }
-    vstatus->error_count = READ_VREG(AV_SCRATCH_D);
-    vstatus->status = stat;
-    return 0;
-}
-
-int vh264_4k2k_set_trickmode(unsigned long trickmode)
-{
-    if (trickmode == TRICKMODE_I) {
-        WRITE_VREG(AV_SCRATCH_F, (READ_VREG(AV_SCRATCH_F) & 0xfffffffc) | 2);
-        trickmode_i = 1;
-    } else if (trickmode == TRICKMODE_NONE) {
-        WRITE_VREG(AV_SCRATCH_F, READ_VREG(AV_SCRATCH_F) & 0xfffffffc);
-        trickmode_i = 0;
-    }
-
-    return 0;
-}
-
-static void H264_DECODE_INIT(void)
-{
-    int i;
-    i = READ_VREG(DECODE_SKIP_PICTURE);
-
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-    WRITE_VREG(DOS_SW_RESET0, (1<<7) | (1<<6) | (1<<4));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-
-    WRITE_VREG(DOS_SW_RESET0, (1<<7) | (1<<6) | (1<<4));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    WRITE_VREG(DOS_SW_RESET0, (1<<9) | (1<<8));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-
-#else
-    WRITE_MPEG_REG(RESET0_REGISTER, RESET_IQIDCT | RESET_MC | RESET_VLD_PART);
-    READ_MPEG_REG(RESET0_REGISTER);
-    WRITE_MPEG_REG(RESET0_REGISTER, RESET_IQIDCT | RESET_MC | RESET_VLD_PART);
-    WRITE_MPEG_REG(RESET2_REGISTER, RESET_PIC_DC | RESET_DBLK);
-#endif
-
-
-    // Wait for some time for RESET
-    READ_VREG(DECODE_SKIP_PICTURE);
-    READ_VREG(DECODE_SKIP_PICTURE);
-
-    WRITE_VREG(DECODE_SKIP_PICTURE, i);
-
-    // fill_weight_pred
-    WRITE_VREG(MC_MPORT_CTRL, 0x0300);
-    for(i=0; i<192; i++) WRITE_VREG(MC_MPORT_DAT, 0x100);
-    WRITE_VREG(MC_MPORT_CTRL, 0);
-
-    WRITE_VREG(MB_WIDTH, 0xff); // invalid mb_width
-
-    // set slice start to 0x000000 or 0x000001 for check more_rbsp_data
-    WRITE_VREG(SLICE_START_BYTE_01, 0x00000000);
-    WRITE_VREG(SLICE_START_BYTE_23, 0x01010000);
-
-    WRITE_VREG(MPEG1_2_REG, 1); // set to mpeg2 to enable mismatch logic
-    WRITE_VREG(VLD_ERROR_MASK, 0x1011); // disable COEF_GT_64 , error_m4_table and voff_rw_err
-
-    // Config MCPU Amrisc interrupt
-    WRITE_VREG(ASSIST_AMR1_INT0, 0x1 ); // viu_vsync_int
-    WRITE_VREG(ASSIST_AMR1_INT1, 0x5 ); // mbox_isr
-    WRITE_VREG(ASSIST_AMR1_INT2, 0x8 ); // vld_isr
-    WRITE_VREG(ASSIST_AMR1_INT3, 0x15); // vififo_empty
-    WRITE_VREG(ASSIST_AMR1_INT4, 0xd ); // rv_ai_mb_finished_int
-    WRITE_VREG(ASSIST_AMR1_INT7, 0x14); // dcac_dma_done
-
-    // Config MCPU Amrisc interrupt
-    WRITE_VREG(ASSIST_AMR1_INT5, 0x9 ); // MCPU interrupt
-    WRITE_VREG(ASSIST_AMR1_INT6, 0x17); // CCPU interrupt
-
-    WRITE_VREG(CPC_P, 0xc00); // CCPU Code will start from 0xc00
-    WRITE_VREG(CINT_VEC_BASE, (0xc20>>5));
-#if 0
-    WRITE_VREG(POWER_CTL_VLD, READ_VREG(POWER_CTL_VLD) | (0 << 10) | (1 << 9) | (1 << 6));
-#else
-    WRITE_VREG(
-      POWER_CTL_VLD,
-      (
-        (1<<10) | // disable cabac_step_2
-        (1<<9)  | // viff_drop_flag_en
-        (1<<6)    // h264_000003_en
-      )
-    );
-#endif
-    WRITE_VREG(M4_CONTROL_REG, (1<<13));  // H264_DECODE_INFO - h264_en
-
-    WRITE_VREG(CANVAS_START , CANVAS_INDEX_START);
-#if 1
-    WRITE_VREG(WORKSPACE_START, video_domain_addr(work_space_adr)); // Start Address of Workspace (UCODE, temp_data...)
-#else
-    WRITE_VREG(WORKSPACE_START, 0x05000000); // Start Address of Workspace (UCODE, temp_data...)
-#endif
-    WRITE_VREG(SPS_STATUS, 0); // Clear all sequence parameter set available
-    WRITE_VREG(PPS_STATUS, 0); // Clear all picture parameter set available
-    WRITE_VREG(CURRENT_UCODE, 0xff); // Set current microcode to NULL
-    WRITE_VREG(CURRENT_SPS_PPS, 0xffff); // Set current SPS/PPS to NULL
-    WRITE_VREG(DECODE_STATUS, 1); // Set decode status to DECODE_START_HEADER
-}
-
-static void vh264_4k2k_prot_init(void)
-{
-    while (READ_VREG(DCAC_DMA_CTRL) & 0x8000) {
-        ;
-    }
-    while (READ_VREG(LMEM_DMA_CTRL) & 0x8000) {
-        ;    // reg address is 0x350
-    }
-    /* clear mailbox interrupt */
-    WRITE_VREG(ASSIST_MBOX1_CLR_REG, 1);
-
-    /* enable mailbox interrupt */
-    WRITE_VREG(ASSIST_MBOX1_MASK, 1);
-
-    /* disable PSCALE for hardware sharing */
-    WRITE_VREG(PSCALE_CTRL, 0);
-
-    H264_DECODE_INIT();
-
-#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-    WRITE_VREG(DOS_SW_RESET0, (1<<11));
-    WRITE_VREG(DOS_SW_RESET0, 0);
-
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-    READ_VREG(DOS_SW_RESET0);
-
-#else
-    WRITE_MPEG_REG(RESET0_REGISTER, 0x80); // RESET MCPU
-#endif
-
-    WRITE_VREG(MAILBOX_COMMAND, 0);
-    WRITE_VREG(BUFFER_RECYCLE, 0);
-    WRITE_VREG(DROP_CONTROL, 0);
-    CLEAR_VREG_MASK(MDEC_PIC_DC_CTRL, 1<<17);
-}
-
-static void vh264_4k2k_local_init(void)
-{
-	int i;
-    display_buff_id = -1;
-    display_view_id = -1;
-    display_POC = -1;
-    no_dropping_cnt = 0;
-
-#ifdef DEBUG_PTS
-    pts_missed = 0;
-    pts_hit = 0;
-#endif
-
-#ifdef DEBUG_SKIP
-    view_total = 0;
-    view_dropped = 0;
-#endif
-
-    //vh264_4k2k_ratio = vh264_4k2k_amstream_dec_info.ratio;
-    vh264_4k2k_ratio = 0x100;
-
-    //frame_width = vh264_4k2k_amstream_dec_info.width;
-    //frame_height = vh264_4k2k_amstream_dec_info.height;
-    frame_dur = vh264_4k2k_amstream_dec_info.rate;
-    if(frame_dur == 0){
-        frame_dur = 96000/24;
-    }
-
-    pts_outside = ((u32)vh264_4k2k_amstream_dec_info.param) & 0x01;
-    sync_outside = ((u32)vh264_4k2k_amstream_dec_info.param & 0x02) >> 1;
-
-    /**/
-    dpb_start_addr[0] = -1;
-    dpb_start_addr[1] = -1;
-    max_dec_frame_buffering[0] = -1;
-    max_dec_frame_buffering[1] = -1;
-	fill_ptr = get_ptr = put_ptr = putting_ptr = 0;
-	for (i = 0; i < DECODE_BUFFER_NUM_MAX; i++) {
-        view0_vfbuf_use[i] = 0;
-        view1_vfbuf_use[i] = 0;
-    }
-
-    for(i=0 ;i < VF_POOL_SIZE ; i++){
-    	vfpool_idx[i].display_pos = -1;
-    	vfpool_idx[i].view0_buf_id = -1;
-    	vfpool_idx[i].view1_buf_id = -1;
-	}
-    init_vf_buf();
-    return;
-}
-
-static s32 vh264_4k2k_init(void)
-{
-    void __iomem *p = ioremap_nocache(work_space_adr, work_space_size);
-
-    if (!p) {
-        printk("\nvh264_4k2k_init: Cannot remap ucode swapping memory\n");
-        return -ENOMEM;
-    }
-
-    printk("\nvh264_4k2k_init\n");
-    init_timer(&recycle_timer);
-
-    stat |= STAT_TIMER_INIT;
-
-    vh264_4k2k_local_init();
-
-    amvdec_enable();
-
-    if (amvdec_loadmc(vh264_4k2k_mc) < 0) {
-        amvdec_disable();
-        return -EBUSY;
-    }
-
-    memcpy(p,
-           vh264_4k2k_header_mc, sizeof(vh264_4k2k_header_mc));
-
-    memcpy((void *)((ulong)p + 0x1000),
-           vh264_4k2k_mmco_mc, sizeof(vh264_4k2k_mmco_mc));
-
-    memcpy((void *)((ulong)p + 0x3000),
-           vh264_4k2k_slice_mc, sizeof(vh264_4k2k_slice_mc));
-
-    iounmap(p);
-
-    stat |= STAT_MC_LOAD;
-
-    /* enable AMRISC side protocol */
-    vh264_4k2k_prot_init();
-
-#ifdef HANDLE_h264_4k2k_IRQ
-    if (request_irq(INT_VDEC, vh264_4k2k_isr,
-                    IRQF_SHARED, "vh264_4k2k-irq", (void *)vh264_4k2k_dec_id)) {
-        printk("vh264_4k2k irq register error.\n");
-        amvdec_disable();
-        return -ENOENT;
-    }
-#endif
-
-    stat |= STAT_ISR_REG;
-
-    vf_provider_init(&vh264_4k2k_vf_prov, PROVIDER_NAME, &vh264_4k2k_vf_provider, NULL);
-    vf_reg_provider(&vh264_4k2k_vf_prov);
-    vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_START,NULL);
-
-    stat |= STAT_VF_HOOK;
-
-    recycle_timer.data = (ulong) & recycle_timer;
-    recycle_timer.function = vh264_4k2k_put_timer_func;
-    recycle_timer.expires = jiffies + PUT_INTERVAL;
-
-    add_timer(&recycle_timer);
-
-    stat |= STAT_TIMER_ARM;
-
-    amvdec_start();
-
-    stat |= STAT_VDEC_RUN;
-
-    set_vdec_func(&vh264_4k2k_dec_status);
-    //set_trickmode_func(&vh264_4k2k_set_trickmode);
-
-    return 0;
-}
-
-static int vh264_4k2k_stop(void)
-{
-    if (stat & STAT_VDEC_RUN) {
-        amvdec_stop();
-        stat &= ~STAT_VDEC_RUN;
-    }
-
-    if (stat & STAT_ISR_REG) {
-        WRITE_VREG(ASSIST_MBOX1_MASK, 0);
-#ifdef HANDLE_h264_4k2k_IRQ
-        free_irq(INT_VDEC,
-                 (void *)vh264_4k2k_dec_id);
-#endif
-        stat &= ~STAT_ISR_REG;
-    }
-
-    if (stat & STAT_TIMER_ARM) {
-        del_timer_sync(&recycle_timer);
-        stat &= ~STAT_TIMER_ARM;
-    }
-
-    if (stat & STAT_VF_HOOK) {
-        ulong flags;
-        spin_lock_irqsave(&lock, flags);
-        spin_unlock_irqrestore(&lock, flags);
-        vf_unreg_provider(&vh264_4k2k_vf_prov);
-        stat &= ~STAT_VF_HOOK;
-    }
-
-    amvdec_disable();
-
-    uninit_vf_buf();
-    return 0;
-}
-
-static void error_do_work(struct work_struct *work)
-{
-    if (atomic_read(&vh264_4k2k_active)) {
-        vh264_4k2k_stop();
-        vh264_4k2k_init();
-    }
-}
-
-static int amvdec_h264_4k2k_probe(struct platform_device *pdev)
-{
-    struct resource *mem;
-    int buf_size;
-
-    printk("amvdec_h264_4k2k probe start.\n");
-
-    if (!(mem = platform_get_resource(pdev, IORESOURCE_MEM, 0))) {
-        printk("\namvdec_h264_4k2k memory resource undefined.\n");
-        return -EFAULT;
-    }
-
-    buf_size = mem->end - mem->start + 1;
-    //buf_offset = mem->start - DEF_BUF_START_ADDR;
-    work_space_adr = mem->start;
-    DECODE_BUFFER_START = work_space_adr + work_space_size;
-    DECODE_BUFFER_END = mem->start + buf_size;
-
-    printk("work_space_adr %x, DECODE_BUFFER_START %x, DECODE_BUFFER_END %x\n", work_space_adr, DECODE_BUFFER_START, DECODE_BUFFER_END);
-    memcpy(&vh264_4k2k_amstream_dec_info, (void *)mem[1].start, sizeof(vh264_4k2k_amstream_dec_info));
-
-    if (vh264_4k2k_init() < 0) {
-        printk("\namvdec_h264_4k2k init failed.\n");
-
-        return -ENODEV;
-    }
-
-    INIT_WORK(&error_wd_work, error_do_work);
-
-    atomic_set(&vh264_4k2k_active, 1);
-
-    printk("amvdec_h264_4k2k probe end.\n");
-
-    return 0;
-}
-
-static int amvdec_h264_4k2k_remove(struct platform_device *pdev)
-{
-    printk("amvdec_h264_4k2k_remove\n");
-    vh264_4k2k_stop();
-
-    atomic_set(&vh264_4k2k_active, 0);
-
-#ifdef DEBUG_PTS
-    printk("pts missed %ld, pts hit %ld, pts_outside %d, duration %d, sync_outside %d\n",
-           pts_missed, pts_hit, pts_outside, frame_dur, sync_outside);
-#endif
-
-#ifdef DEBUG_SKIP
-    printk("view_total = %ld, dropped %ld\n", view_total, view_dropped);
-#endif
-
-    return 0;
-}
-
-/****************************************/
-
-static struct platform_driver amvdec_h264_4k2k_driver = {
-    .probe   = amvdec_h264_4k2k_probe,
-    .remove  = amvdec_h264_4k2k_remove,
-#ifdef CONFIG_PM
-    .suspend = amvdec_suspend,
-    .resume  = amvdec_resume,
-#endif
-    .driver  = {
-        .name = DRIVER_NAME,
-    }
-};
-
-static int __init amvdec_h264_4k2k_driver_init_module(void)
-{
-    printk("amvdec_h264_4k2k module init\n");
-
-    if (platform_driver_register(&amvdec_h264_4k2k_driver)) {
-        printk("failed to register amvdec_h264_4k2k driver\n");
-        return -ENODEV;
-    }
-
-    return 0;
-}
-
-static void __exit amvdec_h264_4k2k_driver_remove_module(void)
-{
-    printk("amvdec_h264_4k2k module remove.\n");
-
-    platform_driver_unregister(&amvdec_h264_4k2k_driver);
-}
-
-/****************************************/
-
-#if 0
-module_param(stat, uint, 0664);
-MODULE_PARM_DESC(stat, "\n amvdec_h264_4k2k stat \n");
-
-module_param(dbg_mode, uint, 0664);
-MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264_4k2k dbg mode \n");
-
-module_param(view_mode, uint, 0664);
-MODULE_PARM_DESC(view_mode, "\n amvdec_h264_4k2k view mode \n");
-
-module_param(dbg_cmd, uint, 0664);
-MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264_4k2k cmd mode \n");
-
-module_param(drop_rate, uint, 0664);
-MODULE_PARM_DESC(dbg_mode, "\n amvdec_h264_4k2k drop rate \n");
-
-#endif
-
-module_init(amvdec_h264_4k2k_driver_init_module);
-module_exit(amvdec_h264_4k2k_driver_remove_module);
-
-MODULE_DESCRIPTION("AMLOGIC h264_4k2k Video Decoder Driver");
-MODULE_LICENSE("GPL");
-MODULE_AUTHOR("Tim Yao <tim.yao@amlogic.com>");
-
-
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.c b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.c
deleted file mode 100755
index 0fb240731392..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.c
+++ /dev/null
@@ -1,38 +0,0 @@
-/*
- * AMLOGIC Audio/Video streaming port driver.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the named License,
- * or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
- *
- * Author:  Tim Yao <timyao@amlogic.com>
- *
- */
-
-#include <linux/types.h>
-
-#define MicroCode vh264_4k2k_mc
-#include "h264c_linux_single.h"
-
-#undef MicroCode
-#define MicroCode vh264_4k2k_header_mc
-#include "h264header_linux_single.h"
-
-#undef MicroCode
-#define MicroCode vh264_4k2k_mmco_mc
-#include "h264mmc_linux_single.h"
-
-#undef MicroCode
-#define MicroCode vh264_4k2k_slice_mc
-#include "h264slice_linux_single.h"
-
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.h b/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.h
deleted file mode 100755
index c7fa365e81ea..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264_4k2k/vh264_4k2k_mc.h
+++ /dev/null
@@ -1,30 +0,0 @@
-/*
- * AMLOGIC Audio/Video streaming port driver.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the named License,
- * or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
- *
- * Author:  Tim Yao <timyao@amlogic.com>
- *
- */
-
-#ifndef VH264_4K2K_MC_H
-#define VH264_4K2K_MC_H
-
-extern const u32 vh264_4k2k_mc[0x1000];
-extern const u32 vh264_4k2k_header_mc[0x400];
-extern const u32 vh264_4k2k_mmco_mc[0x800];
-extern const u32 vh264_4k2k_slice_mc[0x1000];
-
-#endif
diff --git a/drivers/amlogic/amports/m8m2/ucode/h264mvc b/drivers/amlogic/amports/m8m2/ucode/h264mvc
deleted file mode 120000
index 0381c9dd85fe..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h264mvc
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/h264mvc
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/h265 b/drivers/amlogic/amports/m8m2/ucode/h265
deleted file mode 120000
index 29c0726c252e..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/h265
+++ /dev/null
@@ -1 +0,0 @@
-../../m8b/ucode/h265
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/jpeg b/drivers/amlogic/amports/m8m2/ucode/jpeg
deleted file mode 120000
index 3cad186f8e55..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/jpeg
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/jpeg
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/jpegenc b/drivers/amlogic/amports/m8m2/ucode/jpegenc
deleted file mode 120000
index 13e06087c38f..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/jpegenc
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/jpegenc
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/mjpeg b/drivers/amlogic/amports/m8m2/ucode/mjpeg
deleted file mode 120000
index be881ebf477c..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/mjpeg
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/mjpeg
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/mpeg12 b/drivers/amlogic/amports/m8m2/ucode/mpeg12
deleted file mode 120000
index f124f0b688ab..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/mpeg12
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/mpeg12
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/mpeg4 b/drivers/amlogic/amports/m8m2/ucode/mpeg4
deleted file mode 120000
index 718a38e61454..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/mpeg4
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/mpeg4
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/real b/drivers/amlogic/amports/m8m2/ucode/real
deleted file mode 120000
index 88db662c79d4..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/real
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/real
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/ucode/vc1 b/drivers/amlogic/amports/m8m2/ucode/vc1
deleted file mode 120000
index 2f3d77bb43a9..000000000000
--- a/drivers/amlogic/amports/m8m2/ucode/vc1
+++ /dev/null
@@ -1 +0,0 @@
-../../m8/ucode/vc1
\ No newline at end of file
diff --git a/drivers/amlogic/amports/m8m2/vdec_clk.c b/drivers/amlogic/amports/m8m2/vdec_clk.c
deleted file mode 100755
index 7c01fc670d07..000000000000
--- a/drivers/amlogic/amports/m8m2/vdec_clk.c
+++ /dev/null
@@ -1,189 +0,0 @@
-/*
- * AMLOGIC Audio/Video streaming port driver.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the named License,
- * or any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- :*
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
- *
- * Author:  Tim Yao <timyao@amlogic.com>
- *
- */
-
-#include <linux/kernel.h>
-#include <linux/types.h>
-
-#include <mach/am_regs.h>
-
-#include "../vdec_reg.h"
-
-#include "../amports_config.h"
-
-#include "../vdec.h"
-#include "../vdec_clk.h"
-
-/*
-HHI_VDEC_CLK_CNTL
-0x1078[11:9] (fclk = 2550MHz)
-    0: fclk_div4
-    1: fclk_div3
-    2: fclk_div5
-    3: fclk_div7
-    4: mpll_clk_out1
-    5: mpll_clk_out2
-0x1078[6:0]
-    devider
-0x1078[8]
-    enable
-*/
-
-//182.14M <-- (2550/7)/2
-#define VDEC1_182M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (3 << 9) | (1), 0, 16)
-
-//212.50M <-- (2550/3)/4
-#define VDEC1_212M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (1 << 9) | (3), 0, 16)
-
-//255.00M <-- (2550/5)/2
-#define VDEC1_255M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (2 << 9) | (1), 0, 16)
-#define HCODEC_255M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, (2 << 9) | (1), 16, 16)
-#define HEVC_255M()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (2 << 9) | (1), 16, 16)
-
-//283.33M <-- (2550/3)/3
-#define VDEC1_283M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (1 << 9) | (2), 0, 16)
-
-//318.75M <-- (2550/4)/2
-#define VDEC1_319M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (0 << 9) | (1), 0, 16)
-
-//364.29M <-- (2550/7)/1
-#define VDEC1_364M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (3 << 9) | (0), 0, 16)
-
-//425.00M <-- (2550/3)/2
-#define VDEC1_425M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (1 << 9) | (2), 0, 16)
-
-//510.00M <-- (2550/5)/1
-#define VDEC1_510M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (2 << 9) | (0), 0, 16)
-#define HEVC_510M()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (2 << 9) | (0), 16, 16)
-
-//637.50M <-- (2550/4)/1
-#define VDEC1_638M() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  (0 << 9) | (0), 0, 16)
-#define HEVC_638M()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (0 << 9) | (0), 16, 16)
-
-#define VDEC1_CLOCK_ON()   WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, 1, 8, 1); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 0, 15, 1); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 0, 8, 1); \
-                           WRITE_VREG_BITS(DOS_GCLK_EN0, 0x3ff,0,10)
-#define HCODEC_CLOCK_ON()  WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  1, 24, 1); \
-                           WRITE_VREG_BITS(DOS_GCLK_EN0, 0x7fff, 12, 15)
-#define HEVC_CLOCK_ON()    WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 0, 24, 1); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 0, 31, 1); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 1, 24, 1); \
-                           WRITE_VREG(DOS_GCLK_EN3, 0xffffffff)
-#define VDEC1_SAFE_CLOCK() WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, READ_MPEG_REG(HHI_VDEC_CLK_CNTL) & 0x7f, 0, 7); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 1, 8, 1); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC3_CLK_CNTL, 1, 15, 1);
-#define VDEC1_CLOCK_OFF()  WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL,  0, 8, 1)
-#define HCODEC_CLOCK_OFF() WRITE_MPEG_REG_BITS(HHI_VDEC_CLK_CNTL, 0, 24, 1)
-#define HEVC_SAFE_CLOCK()  WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, (READ_MPEG_REG(HHI_VDEC2_CLK_CNTL) >> 16) & 0x7f, 16, 7); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 1, 24, 1); \
-                           WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 1, 31, 1)
-#define HEVC_CLOCK_OFF()   WRITE_MPEG_REG_BITS(HHI_VDEC2_CLK_CNTL, 0, 24, 1)
-
-static int clock_level[VDEC_MAX+1];
-
-void vdec_clock_enable(void)
-{
-    VDEC1_CLOCK_OFF();
-    VDEC1_255M();
-    VDEC1_CLOCK_ON();
-    clock_level[VDEC_1] = 0;
-}
-
-void vdec_clock_hi_enable(void)
-{
-    VDEC1_CLOCK_OFF();
-    VDEC1_638M();
-    VDEC1_CLOCK_ON();
-    clock_level[VDEC_1] = 1;
-}
-
-void vdec_clock_on(void)
-{
-    VDEC1_CLOCK_ON();
-}
-
-void vdec_clock_off(void)
-{
-    VDEC1_CLOCK_OFF();
-}
-
-void hcodec_clock_enable(void)
-{
-    HCODEC_CLOCK_OFF();
-    HCODEC_255M();
-    HCODEC_CLOCK_ON();
-}
-
-void hcodec_clock_on(void)
-{
-    HCODEC_CLOCK_ON();
-}
-
-void hcodec_clock_off(void)
-{
-    HCODEC_CLOCK_OFF();
-}
-
-void hevc_clock_enable(void)
-{
-    HEVC_CLOCK_OFF();
-//    HEVC_255M();
-    HEVC_638M();
-    HEVC_CLOCK_ON();
-}
-
-void hevc_clock_hi_enable(void)
-{
-    HEVC_CLOCK_OFF();
-    HEVC_638M();
-    HEVC_CLOCK_ON();
-    clock_level[VDEC_HEVC] = 1;
-}
-
-void hevc_clock_on(void)
-{
-    HEVC_CLOCK_ON();
-}
-
-void hevc_clock_off(void)
-{
-    HEVC_CLOCK_OFF();
-}
-
-void vdec_clock_prepare_switch(void)
-{
-    VDEC1_SAFE_CLOCK();
-}
-
-void hevc_clock_prepare_switch(void)
-{
-    HEVC_SAFE_CLOCK();
-}
-
-int vdec_clock_level(vdec_type_t core)
-{
-    if (core >= VDEC_MAX) {
-        return 0; 
-    }
-
-    return clock_level[core];
-}
-
-- 
2.19.0

