From 85ab9ed6906adab823aa7e9a34e62f2b3d24ddc5 Mon Sep 17 00:00:00 2001
From: Cheng Wang <cheng.wang@amlogic.com>
Date: Thu, 12 Mar 2015 14:16:19 +0800
Subject: [PATCH 5447/5965] PD#94026: securekey: support m8baby and secureos
 case

this is secure-check function which used in ota upgrade

Change-Id: I4a9eb04638d47c518e3f8ca4d3abf9ad5b3dfeee
---
 .../mach-meson6/include/mach/meson-secure.h   |  1 +
 .../mach-meson8/include/mach/meson-secure.h   |  1 +
 .../mach-meson8b/include/mach/meson-secure.h  |  1 +
 drivers/amlogic/defendkey/securekey.c         | 26 ++++++++++++++++++-
 4 files changed, 28 insertions(+), 1 deletion(-)

diff --git a/arch/arm/mach-meson6/include/mach/meson-secure.h b/arch/arm/mach-meson6/include/mach/meson-secure.h
index 48462a1f9230..3339c5e59914 100755
--- a/arch/arm/mach-meson6/include/mach/meson-secure.h
+++ b/arch/arm/mach-meson6/include/mach/meson-secure.h
@@ -107,6 +107,7 @@ struct efuse_hal_api_arg{
 };
 #define EFUSE_HAL_API_READ	0
 #define EFUSE_HAL_API_WRITE 1
+#define EFUSE_HAL_API_VERIFY_IMG 3
 extern int meson_trustzone_efuse(struct efuse_hal_api_arg* arg);
 
 
diff --git a/arch/arm/mach-meson8/include/mach/meson-secure.h b/arch/arm/mach-meson8/include/mach/meson-secure.h
index a2a5dc0d57fb..32a4c240f240 100755
--- a/arch/arm/mach-meson8/include/mach/meson-secure.h
+++ b/arch/arm/mach-meson8/include/mach/meson-secure.h
@@ -106,6 +106,7 @@ struct efuse_hal_api_arg{
 };
 #define EFUSE_HAL_API_READ	0
 #define EFUSE_HAL_API_WRITE 1
+#define EFUSE_HAL_API_VERIFY_IMG 3
 extern int meson_trustzone_efuse(struct efuse_hal_api_arg* arg);
 
 
diff --git a/arch/arm/mach-meson8b/include/mach/meson-secure.h b/arch/arm/mach-meson8b/include/mach/meson-secure.h
index a2a5dc0d57fb..32a4c240f240 100755
--- a/arch/arm/mach-meson8b/include/mach/meson-secure.h
+++ b/arch/arm/mach-meson8b/include/mach/meson-secure.h
@@ -106,6 +106,7 @@ struct efuse_hal_api_arg{
 };
 #define EFUSE_HAL_API_READ	0
 #define EFUSE_HAL_API_WRITE 1
+#define EFUSE_HAL_API_VERIFY_IMG 3
 extern int meson_trustzone_efuse(struct efuse_hal_api_arg* arg);
 
 
diff --git a/drivers/amlogic/defendkey/securekey.c b/drivers/amlogic/defendkey/securekey.c
index 27d7d5cb357d..4c669f574912 100644
--- a/drivers/amlogic/defendkey/securekey.c
+++ b/drivers/amlogic/defendkey/securekey.c
@@ -1,6 +1,10 @@
 #include <linux/types.h>
 #include <linux/slab.h>
 
+#ifdef CONFIG_MESON_TRUSTZONE
+#include <mach/meson-secure.h>
+#include <plat/io.h>
+#endif
 
 #include "../efuse/efuse_regs.h"
 
@@ -22,6 +26,7 @@ int aml_is_secure_set(void)
 	type = secure_chip_type();
 	switch(type)
 	{
+		case EFUSE_SOC_CHIP_M8BABY:
 		case EFUSE_SOC_CHIP_M8:{
 			unsigned int info1=0,info2=-1;
 			loff_t pos=0;
@@ -113,6 +118,10 @@ static int aml_kernelkey_verify(unsigned char *pSRC,int nLen)
 	unsigned char *pBuf = (unsigned char *)&chk_blk;
 	unsigned int nState  = 0;
 	loff_t pos=0;
+#ifdef CONFIG_MESON_TRUSTZONE
+	struct efuse_hal_api_arg arg;
+	unsigned int retcnt;
+#endif
 
 	if(nLen & 0xF){
 		printk("source data is not 16 byte aligned\n");
@@ -126,17 +135,31 @@ static int aml_kernelkey_verify(unsigned char *pSRC,int nLen)
 		nRet = 0;
 		goto exit;
 	}
-	boot_rsa_read_puk(&cb1_ctx,(nState & (1<<23)) ? 1 : 0);
+
 	cb1_ctx.len = (nState & (1<<23)) ? 256 : 128;
 
 	memcpy((unsigned char*)&chk_blk,(unsigned char*)(pSRC+nLen-sizeof(chk_blk)),sizeof(chk_blk));
 
+#ifndef CONFIG_MESON_TRUSTZONE
+	boot_rsa_read_puk(&cb1_ctx,(nState & (1<<23)) ? 1 : 0);
+
 	for(i = 0;i< sizeof(chk_blk);i+=cb1_ctx.len){
 		if(rsa_public(&cb1_ctx, pBuf+i, pBuf+i )){
 			printk("rsa decrypt fail, %s:%d\n",__func__,__LINE__);
 			goto exit;
 		}
 	}
+#else
+	arg.cmd=EFUSE_HAL_API_VERIFY_IMG;
+	arg.size = sizeof(chk_blk);
+	arg.buffer_phy=virt_to_phys(&chk_blk);
+	arg.retcnt_phy=virt_to_phys(&retcnt);
+	nRet = meson_trustzone_efuse(&arg);
+	if (nRet) {
+		printk("meson trustzone verify failed.\n");
+		goto exit;
+	}
+#endif
 
 	if(AMLOGIC_CHKBLK_ID != chk_blk.unAMLID ||
 		AMLOGIC_CHKBLK_VER < chk_blk.nVer)
@@ -169,6 +192,7 @@ int aml_img_key_check(unsigned char *pSRC,int nLen)
 	efuse_socchip_type_e type;
 	type = secure_chip_type();
 	switch(type){
+		case EFUSE_SOC_CHIP_M8BABY:
 		case EFUSE_SOC_CHIP_M8:
 		ret = aml_kernelkey_verify(pSRC,nLen);
 		break;
-- 
2.19.0

