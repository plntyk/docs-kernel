From 0602c3c6e975e995591de1abcee942333fd474c7 Mon Sep 17 00:00:00 2001
From: Yan Wang <yan.wang@amlogic.com>
Date: Tue, 3 Mar 2015 17:09:43 +0800
Subject: [PATCH 5460/5965] PD#97649: meson8: fix secureos hotplug fail during
 reboot.

Change-Id: I76d8c8d9bd1f88931dc9962fb5a452a90e4bb1b5
---
 arch/arm/mach-meson8/clock.c       | 11 +++++++++--
 arch/arm/mach-meson8/hotplug-asm.S |  8 +++++++-
 arch/arm/mach-meson8/hotplug.c     | 30 ++++++++++++++++++++++--------
 3 files changed, 38 insertions(+), 11 deletions(-)

diff --git a/arch/arm/mach-meson8/clock.c b/arch/arm/mach-meson8/clock.c
index ea1ba6a278a2..475a09c631bf 100755
--- a/arch/arm/mach-meson8/clock.c
+++ b/arch/arm/mach-meson8/clock.c
@@ -887,8 +887,9 @@ void meson_set_cpu_ctrl_reg(int cpu,int is_on)
 {
 #ifdef CONFIG_MESON_TRUSTZONE
 	uint32_t value = 0;
-#endif
+#else
 	spin_lock(&clockfw_lock);
+#endif
 
 #ifdef CONFIG_MESON_TRUSTZONE
 	value = meson_read_corectrl();
@@ -900,12 +901,16 @@ void meson_set_cpu_ctrl_reg(int cpu,int is_on)
 	aml_set_reg32_bits(MESON_CPU_CONTROL_REG,1,0,1);
 #endif
 
+#ifndef CONFIG_MESON_TRUSTZONE
 	spin_unlock(&clockfw_lock);
+#endif
 }
 
 void meson_set_cpu_ctrl_addr(uint32_t cpu, const uint32_t addr)
 {
+#ifndef CONFIG_MESON_TRUSTZONE
 	spin_lock(&clockfw_lock);
+#endif
 
 #ifdef CONFIG_MESON_TRUSTZONE
 	meson_auxcoreboot_addr(cpu, addr);
@@ -913,7 +918,9 @@ void meson_set_cpu_ctrl_addr(uint32_t cpu, const uint32_t addr)
 	aml_write_reg32((MESON_CPU1_CONTROL_ADDR_REG + ((cpu-1) << 2)), addr);
 #endif
 
-	spin_unlock(&clockfw_lock);	
+#ifndef CONFIG_MESON_TRUSTZONE
+	spin_unlock(&clockfw_lock);
+#endif
 }
 
 int meson_get_cpu_ctrl_addr(int cpu)
diff --git a/arch/arm/mach-meson8/hotplug-asm.S b/arch/arm/mach-meson8/hotplug-asm.S
index 9d322fcec5e3..b2656b41a754 100755
--- a/arch/arm/mach-meson8/hotplug-asm.S
+++ b/arch/arm/mach-meson8/hotplug-asm.S
@@ -61,6 +61,12 @@ ENTRY(meson_cleanup)
 	/* Flush the D-cache */
 	bl	v7_flush_dcache_louis
 	
+	ldmfd	sp!, {r0-r11, pc}
+ENDPROC(meson_cleanup)
+
+ENTRY(meson_turn_off_smp)
+	stmfd	sp!, {r0-r11, lr}
+
 	mov r4, #0
 	mcr p15, 0, r4, c7, c10, 4
 	dsb 
@@ -70,4 +76,4 @@ ENTRY(meson_cleanup)
 	exit_smp r4, r5
 		
 	ldmfd	sp!, {r0-r11, pc}
-ENDPROC(meson_cleanup)
\ No newline at end of file
+ENDPROC(meson_turn_off_smp)
diff --git a/arch/arm/mach-meson8/hotplug.c b/arch/arm/mach-meson8/hotplug.c
index 62a5cd2cf1f2..642b26b343ac 100755
--- a/arch/arm/mach-meson8/hotplug.c
+++ b/arch/arm/mach-meson8/hotplug.c
@@ -16,32 +16,46 @@
 #include <asm/mach-types.h>
 #include <asm/cp15.h>
 
+extern void meson_turn_off_smp(void);
 extern void meson_cleanup(void);
 
 int meson_cpu_kill(unsigned int cpu)
 {
-	unsigned int value;
+	unsigned int value=0;
 	unsigned int offset=(cpu<<3);
-	do{
-		udelay(10);
-		value=aml_read_reg32(MESON_CPU_POWER_CTRL_REG);
-	}while((value&(3<<offset)) != (3<<offset));
+	unsigned long timeout;
 
-	udelay(10);
+	timeout = jiffies + (50 * HZ);
+	while (time_before(jiffies, timeout)) {
+		msleep(10);
+		smp_rmb();
+		value=aml_read_reg32(MESON_CPU_POWER_CTRL_REG);
+		if ((value&(3<<offset)) == (3<<offset))
+			break;
+	}
+	//printk("cpu %d timeout, value=0x%x, compare=%d\n", cpu, value, ((value&(3<<offset)) == (3<<offset)));
+	msleep(30);
 	meson_set_cpu_power_ctrl(cpu, 0);
 	return 1;
 }
 
 
+
+
 void meson_cpu_die(unsigned int cpu)
 {
 	meson_set_cpu_ctrl_reg(cpu, 0);
+	//printk("[cpu hotplug]cpu:%d shutdown\n", cpu);
 	flush_cache_all();
 	dsb();
-	dmb();	
+	dmb();
 
-	meson_cleanup();
 	aml_set_reg32_bits(MESON_CPU_POWER_CTRL_REG,0x3,(cpu << 3),2);
+	dmb();
+	dsb();
+
+	meson_cleanup();
+	meson_turn_off_smp();
 	asm volatile(
 		"dsb\n"
 		"wfi\n"
-- 
2.19.0

