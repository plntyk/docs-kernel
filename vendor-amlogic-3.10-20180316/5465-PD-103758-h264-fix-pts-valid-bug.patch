From 55c810fce5f3b4c758139d642b17df896a54ae28 Mon Sep 17 00:00:00 2001
From: Hui Zhang <hui.zhang@amlogic.com>
Date: Thu, 12 Mar 2015 10:16:26 +0800
Subject: [PATCH 5465/5965] PD#103758: h264: fix pts valid bug

Change-Id: I5deeabb21d2489e7eac91cf69040af9d87d324ab
---
 drivers/amlogic/amports/vh264.c | 7 +++----
 drivers/amlogic/amports/video.c | 2 +-
 2 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index e0a0f24b99c2..c0ee813e99f8 100755
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -945,7 +945,7 @@ static void vh264_isr(void)
     unsigned int buffer_index;
     vframe_t *vf;
     unsigned int cpu_cmd;
-    unsigned int pts,pts_lookup_save, pts_valid = 0, pts_duration = 0;
+    unsigned int pts,pts_lookup_save,pts_valid_save, pts_valid = 0, pts_duration = 0;
     u64 pts_us64;
     bool force_interlaced_frame = false;
     unsigned int sei_itu35_flags;
@@ -1096,6 +1096,7 @@ static void vh264_isr(void)
              * if large than frame_dur,we think it is uncorrect.
              */
             pts_lookup_save = pts;
+            pts_valid_save = pts_valid;
             if (fixed_frame_rate_flag && (fixed_frame_rate_check_count <= FIX_FRAME_RATE_CHECK_IDRFRAME_NUM)) {
                 if (idr_flag && pts_valid) {
                     fixed_frame_rate_check_count ++ ;
@@ -1222,7 +1223,6 @@ static void vh264_isr(void)
                 last_pts = pts - DUR2PTS(frame_dur);
                 last_pts_remainder = 0;
             }
-
             // calculate PTS of next frame and smooth PTS for fixed rate source
             if (pts_valid) {
                 if ((fixed_frame_rate_flag) &&
@@ -1266,7 +1266,7 @@ static void vh264_isr(void)
 
             last_pts = pts;
 
-            if (fixed_frame_rate_flag && (fixed_frame_rate_check_count <= FIX_FRAME_RATE_CHECK_IDRFRAME_NUM) && (sync_outside == 0)) {
+            if (fixed_frame_rate_flag && (fixed_frame_rate_check_count <= FIX_FRAME_RATE_CHECK_IDRFRAME_NUM) && (sync_outside == 0) && pts_valid_save) {
                 pts = pts_lookup_save;
             }
 
@@ -1301,7 +1301,6 @@ static void vh264_isr(void)
                 vf->pts_us64= (pts_valid) ? pts_us64 : 0;
                 vf->canvas0Addr = vf->canvas1Addr = spec2canvas(&buffer_spec[buffer_index]);
                 vfbuf_use[buffer_index]++;
-
                 if ((error_recovery_mode_use & 2) && error) {
                     kfifo_put(&recycle_q, (const vframe_t **)&vf);
                 } else {
diff --git a/drivers/amlogic/amports/video.c b/drivers/amlogic/amports/video.c
index 17650531c8a6..53d9beb0322a 100755
--- a/drivers/amlogic/amports/video.c
+++ b/drivers/amlogic/amports/video.c
@@ -2540,7 +2540,7 @@ static inline bool vpts_expire(vframe_t *cur_vf, vframe_t *next_vf)
 		else
 			tsync_avevent_locked(VIDEO_TSTAMP_DISCONTINUITY, pts);
 
-    		printk(" discontinue, system=0x%x vpts=0x%x\n", systime, pts);
+		printk(" discontinue, system=0x%x vpts=0x%x   next_vf->pts = 0x%x \n", systime, pts,next_vf->pts);
 
 		if(systime>next_vf->pts || next_vf->pts==0){// pts==0 is a keep frame maybe.
             		return true;
-- 
2.19.0

