From 5d5045c02cf14c26345678b254139350e0f064c4 Mon Sep 17 00:00:00 2001
From: Hui Zhang <hui.zhang@amlogic.com>
Date: Wed, 18 Mar 2015 13:30:47 +0800
Subject: [PATCH 5484/5965] PD#103426: h264: add ucode swap area in 4k2k
 decoder

Change-Id: Ifc17c5ff5e2a2f41f3bdc3d46efa1cc111bc7ebc
---
 .../m6tvd/ucode/h264_4k2k/h264c_linux.h       |  2 +-
 .../ucode/h264_4k2k/h264c_linux_single.h      |  2 +-
 .../amports/m8/ucode/h264_4k2k/h264c_linux.h  |  2 +-
 .../m8/ucode/h264_4k2k/h264c_linux_single.h   |  2 +-
 drivers/amlogic/amports/vh264_4k2k.c          | 56 +++++++++++++------
 5 files changed, 43 insertions(+), 21 deletions(-)

diff --git a/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux.h b/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux.h
index 7d6600ab1fe2..15fa8cbafb25 100755
--- a/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux.h
+++ b/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux.h
@@ -11,7 +11,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x7c02240,0x7c00280,0x64c4000,0x64c4201,0x2401001,0x4008041,0x7c00741,0x5810041,
 	0x7c00781,0xcc00000,0x0000000,0x649d100,0xaa18080,0x6800000,0x680f881,0xc000300,
 	0x6800042,0x809d102,0x80c0a01,0x80c2800,0x80c0002,0x6bffe80,0x6030400,0x6810003,
-	0x809ca02,0xc7fe8c0,0x0400000,0x6034201,0x649ce01,0x2000040,0x6034100,0x6a10000,
+	0x809ca02,0xc7fe8c0,0x0400000,0x6034201,0x649d501,0x2000040,0x6034100,0x6a10000,
 	0x6c001c0,0x6034000,0xa60c042,0xc000980,0x0000000,0xa60c082,0xc000ac0,0x0000000,
 	0xa60c0c2,0xc000a80,0x0000000,0x6434000,0x580f000,0xbef8040,0xcc00000,0x0000000,
 	0x649d100,0xaa180c0,0x6840000,0x681a401,0xc07f9c0,0x6800082,0x809d103,0x6bffd80,
diff --git a/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux_single.h b/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux_single.h
index e099ac3c6447..f1c22371a32e 100755
--- a/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux_single.h
+++ b/drivers/amlogic/amports/m6tvd/ucode/h264_4k2k/h264c_linux_single.h
@@ -11,7 +11,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x64c4000,0x64c4201,0x2401001,0x4008041,0x7c00741,0x5810041,0x7c00781,0xcc00000,
 	0x0000000,0x649d100,0xaa18080,0x6800000,0x680f901,0xc000300,0x6800042,0x809d102,
 	0x80c0a01,0x80c2800,0x80c0002,0x6bffe80,0x6030400,0x6810003,0x809ca02,0xc7fe940,
-	0x0400000,0x6034201,0x649ce01,0x2000040,0x6034100,0x6a10000,0x6c001c0,0x6034000,
+	0x0400000,0x6034201,0x649d501,0x2000040,0x6034100,0x6a10000,0x6c001c0,0x6034000,
 	0xa60c042,0xc000980,0x0000000,0xa60c082,0xc000ac0,0x0000000,0xa60c0c2,0xc000a80,
 	0x0000000,0x6434000,0x580f000,0xbef8040,0xcc00000,0x0000000,0x649d100,0xaa180c0,
 	0x6840000,0x6815981,0xc07f9c0,0x6800082,0x809d103,0x6bffd80,0x6030400,0x809ca04,
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux.h b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux.h
index a82e72091c9d..6aa59ca7006f 100755
--- a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux.h
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux.h
@@ -11,7 +11,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x7c02240,0x7c00280,0x64c4000,0x64c4201,0x2401001,0x4008041,0x7c00741,0x5810041,
 	0x7c00781,0xcc00000,0x0000000,0x649d100,0xaa18080,0x6800000,0x680f881,0xc000300,
 	0x6800042,0x809d102,0x80c0a01,0x80c2800,0x80c0002,0x6bffe80,0x6030400,0x6810003,
-	0x809ca02,0xc7fe8c0,0x0400000,0x6034201,0x649ce01,0x2000040,0x6034100,0x6a10000,
+	0x809ca02,0xc7fe8c0,0x0400000,0x6034201,0x649d501,0x2000040,0x6034100,0x6a10000,
 	0x6c001c0,0x6034000,0xa60c042,0xc000980,0x0000000,0xa60c082,0xc000ac0,0x0000000,
 	0xa60c0c2,0xc000a80,0x0000000,0x6434000,0x580f000,0xbef8040,0xcc00000,0x0000000,
 	0x649d100,0xaa180c0,0x6840000,0x681a301,0xc07f9c0,0x6800082,0x809d103,0x6bffd80,
diff --git a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h
index f4a69b4fd6e2..6cf9f30d1997 100755
--- a/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h
+++ b/drivers/amlogic/amports/m8/ucode/h264_4k2k/h264c_linux_single.h
@@ -24,7 +24,7 @@ const u32 MicroCode[] __attribute__ ((aligned (8))) = {
 	0x7c01380,0x69fffc0,0x7c02240,0x7c00280,0x64c4000,0x64c4201,0x2401001,0x4008041,
 	0x7c00741,0x5810041,0x7c00781,0xcc00000,0x0000000,0x649d100,0xaa18080,0x6800000,
 	0x680fa01,0xc000300,0x6800042,0x809d102,0x80c0a01,0x80c2800,0x80c0002,0x6bffe80,
-	0x6030400,0x6810003,0x809ca02,0xc7fce40,0x0400000,0x6034201,0x649ce01,0x2000040,
+	0x6030400,0x6810003,0x809ca02,0xc7fce40,0x0400000,0x6034201,0x649d501,0x2000040,
 	0x6034100,0x6a10000,0x6c001c0,0x6034000,0xa60c042,0xc000980,0x0000000,0xa60c082,
 	0xc000ac0,0x0000000,0xa60c0c2,0xc000a80,0x0000000,0x6434000,0x580f000,0xbef8040,
 	0xcc00000,0x0000000,0x649d100,0xaa180c0,0x6840000,0x6815881,0xc07f9c0,0x6800082,
diff --git a/drivers/amlogic/amports/vh264_4k2k.c b/drivers/amlogic/amports/vh264_4k2k.c
index f903b1c8d838..ec908fe7395f 100755
--- a/drivers/amlogic/amports/vh264_4k2k.c
+++ b/drivers/amlogic/amports/vh264_4k2k.c
@@ -109,6 +109,8 @@ static unsigned long pts_missed, pts_hit;
 
 static struct dec_sysinfo vh264_4k2k_amstream_dec_info;
 extern u32 trickmode_i;
+static dma_addr_t mc_dma_handle;
+static void *mc_cpu_addr;
 
 static DEFINE_SPINLOCK(lock);
 static int fatal_error;
@@ -213,6 +215,10 @@ static struct device *cma_dev;
 #define CMD_FRAME_DISPLAY          3
 #define CMD_DEBUG                  10
 
+#define MC_TOTAL_SIZE       (28*SZ_1K)
+#define MC_SWAP_SIZE        ( 4*SZ_1K)
+
+
 static unsigned work_space_adr, decoder_buffer_start, decoder_buffer_end;
 static unsigned reserved_buffer;
 
@@ -1216,12 +1222,6 @@ static void vh264_4k2k_local_init(void)
 
 static s32 vh264_4k2k_init(void)
 {
-    void __iomem *p = ioremap_nocache(work_space_adr, DECODER_WORK_SPACE_SIZE);
-
-    if (!p) {
-        printk("\nvh264_4k2k_init: Cannot remap ucode swapping memory\n");
-        return -ENOMEM;
-    }
 
     printk("\nvh264_4k2k_init\n");
 
@@ -1233,16 +1233,31 @@ static s32 vh264_4k2k_init(void)
 
     amvdec_enable();
 
+   //-- ucode loading (amrisc and swap code)
+    mc_cpu_addr = dma_alloc_coherent(NULL, MC_TOTAL_SIZE, &mc_dma_handle, GFP_KERNEL);
+    if (!mc_cpu_addr) {
+    amvdec_disable();
+    printk("vh264_4k2k init: Can not allocate mc memory.\n");
+    return -ENOMEM;
+   }
+
+    printk("4k2k ucode swap area: physical address 0x%x, cpu virtual addr %p\n", mc_dma_handle, mc_cpu_addr);
+
+    WRITE_VREG(AV_SCRATCH_L, mc_dma_handle);
+                if (!H264_4K2K_SINGLE_CORE)
+                   WRITE_VREG(VDEC2_AV_SCRATCH_L,mc_dma_handle);
     if (H264_4K2K_SINGLE_CORE) {
         if (amvdec_loadmc(vh264_4k2k_mc_single) < 0) {
             amvdec_disable();
-            iounmap(p);
+            dma_free_coherent(NULL, MC_TOTAL_SIZE, mc_cpu_addr, mc_dma_handle);
+            mc_cpu_addr = NULL;
             return -EBUSY;
         }
     } else {
         if (amvdec_loadmc(vh264_4k2k_mc) < 0) {
             amvdec_disable();
-            iounmap(p);
+          dma_free_coherent(NULL, MC_TOTAL_SIZE, mc_cpu_addr, mc_dma_handle);
+            mc_cpu_addr = NULL;
             return -EBUSY;
         }
     }
@@ -1253,33 +1268,32 @@ static s32 vh264_4k2k_init(void)
         if (amvdec2_loadmc(vh264_4k2k_mc) < 0) {
             amvdec_disable();
             amvdec2_disable();
-            iounmap(p);
+            dma_free_coherent(NULL, MC_TOTAL_SIZE, mc_cpu_addr, mc_dma_handle);
+            mc_cpu_addr = NULL;
             return -EBUSY;
         }
     }
 
     if (H264_4K2K_SINGLE_CORE) {
-        memcpy(p,
+        memcpy(mc_cpu_addr,
                vh264_4k2k_header_mc_single, sizeof(vh264_4k2k_header_mc_single));
 
-        memcpy((void *)((ulong)p + 0x1000),
+        memcpy((void *)((ulong)mc_cpu_addr + 0x1000),
                vh264_4k2k_mmco_mc_single, sizeof(vh264_4k2k_mmco_mc_single));
 
-        memcpy((void *)((ulong)p + 0x3000),
+        memcpy((void *)((ulong)mc_cpu_addr + 0x3000),
                vh264_4k2k_slice_mc_single, sizeof(vh264_4k2k_slice_mc_single));
     } else {
-        memcpy(p,
+        memcpy(mc_cpu_addr,
                vh264_4k2k_header_mc, sizeof(vh264_4k2k_header_mc));
 
-        memcpy((void *)((ulong)p + 0x1000),
+        memcpy((void *)((ulong)mc_cpu_addr + 0x1000),
                vh264_4k2k_mmco_mc, sizeof(vh264_4k2k_mmco_mc));
 
-        memcpy((void *)((ulong)p + 0x3000),
+        memcpy((void *)((ulong)mc_cpu_addr + 0x3000),
                vh264_4k2k_slice_mc, sizeof(vh264_4k2k_slice_mc));
     }
 
-    iounmap(p);
-
     stat |= STAT_MC_LOAD;
 
     /* enable AMRISC side protocol */
@@ -1391,6 +1405,14 @@ static int vh264_4k2k_stop(void)
     }
 #endif
 
+    if (stat & STAT_MC_LOAD) {
+     if (mc_cpu_addr != NULL) {
+        dma_free_coherent(NULL, MC_TOTAL_SIZE, mc_cpu_addr, mc_dma_handle);
+        mc_cpu_addr = NULL;
+     }
+     stat &= ~STAT_MC_LOAD;
+    }
+
     amvdec_disable();
     if (!H264_4K2K_SINGLE_CORE) {
         amvdec2_disable();
-- 
2.19.0

