From b94880705068107a50857b9d14f21b9a73976fcc Mon Sep 17 00:00:00 2001
From: Hang Cheng <hang.cheng@amlogic.com>
Date: Fri, 13 Mar 2015 14:51:29 +0800
Subject: [PATCH 5490/5965] PD#103453: hdmi: optimize ACR N to solve audio
 caton under 1080p23hz

Change-Id: I71ad315c9ad0e203b776abd5ff2e98edf34d5e5a
---
 arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c  |  99 ++++++++++++--
 arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c | 121 +++++++++++++++++-
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c        |   6 +
 .../linux/amlogic/hdmi_tx/hdmi_tx_module.h    |   1 +
 4 files changed, 209 insertions(+), 18 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
index 4464ac369d4d..5a4c1bbbe633 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_hw.c
@@ -2410,10 +2410,33 @@ static Cts_conf_tab cts_table_192k[] = {
     {46592,  74250 * 1000 / 1001, 140625},
     {24576, 148500, 148500},
     {23296, 148500 * 1000 / 1001, 140625},
-    {24576, 297000, 247500},
+    {20480, 297000, 247500},
     {23296, 297000 * 1000 / 1001, 281250},
 };
 
+static Cts_conf_tab cts_table_48k[] = {
+    {6144,  27000,  27000},
+    {6144,  54000,  54000},
+    {6144,  74250,  74250},
+    {23296,  74250 * 1000 / 1001, 140625},
+    {6144, 148500, 148500},
+    {5824, 148500 * 1000 / 1001, 140625},
+    {5120, 297000, 247500},
+    {5824, 297000 * 1000 / 1001, 281250},
+};
+
+static unsigned int get_n_48k(unsigned int clk)
+{
+    int i;
+
+    for (i = 0; i < ARRAY_SIZE(cts_table_48k); i++) {
+        if (clk == cts_table_48k[i].tmds_clk)
+            return cts_table_48k[i].fixed_n;
+    }
+
+    return 0;
+}
+
 static unsigned int get_cts(unsigned int clk)
 {
     int i;
@@ -2492,6 +2515,7 @@ static int hdmitx_is_framerate_automation(void)
     }
     return 0;
 }
+
 #endif
 
 static unsigned int vic_map_clk(HDMI_Video_Codes_t vic)
@@ -2557,12 +2581,53 @@ static void hdmitx_set_aud_cts(audio_type_t type, Hdmi_tx_audio_cts_t cts_mode,
     }
 }
 
+static unsigned int hdmitx_get_aud_n(HDMI_Video_Codes_t vic)
+{
+    unsigned int n_val = 0;
+    unsigned int clk = vic_map_clk(vic);
+    if (clk) {
+        n_val = get_n_48k(clk);
+        printk("get n = %d\n", n_val);
+        if (!n_val) {
+            hdmi_print(ERR, AUD "not find n\n");
+            return 0;
+        }
+    }
+    else {
+        hdmi_print(ERR, AUD "not find tmds clk\n");
+        return 0;
+    }
+    return n_val;
+}
+
+static unsigned int audio_N_1080p24=0;
+static void hdmitx_set_aud_n(void)
+{
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+    unsigned int audio_N_para = 6272 ;
+    unsigned int audio_N_tolerance = 3;
+    const vinfo_t *vinfo = get_current_vinfo();
+    if (strncmp(vinfo->name, "1080p23hz", strlen("1080p23hz")) == 0) {
+        audio_N_para = 23296;
+        hdmi_wr_reg(TX_SYS1_ACR_N_0, (audio_N_para&0xff)); // N[7:0]
+        hdmi_wr_reg(TX_SYS1_ACR_N_1, (audio_N_para>>8)&0xff); // N[15:8]
+        hdmi_wr_reg(TX_SYS1_ACR_N_2, (audio_N_tolerance<<4)|((audio_N_para>>16)&0xf)); // N[19:16]
+    }
+    else if (strncmp(vinfo->name, "1080p24hz", strlen("1080p24hz")) == 0) {
+        audio_N_para = audio_N_1080p24;//for recovery audio_N from 1080p23hz
+        hdmi_wr_reg(TX_SYS1_ACR_N_0, (audio_N_para&0xff)); // N[7:0]
+        hdmi_wr_reg(TX_SYS1_ACR_N_1, (audio_N_para>>8)&0xff); // N[15:8]
+        hdmi_wr_reg(TX_SYS1_ACR_N_2, (audio_N_tolerance<<4)|((audio_N_para>>16)&0xf)); // N[19:16]
+    }
+#endif
+}
+
 static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio_para_t* audio_param)
 {
     unsigned int audio_N_para = 6272;
     unsigned int audio_N_tolerance = 3;
 //    unsigned int audio_CTS = 30000;
-    
+    const vinfo_t *vinfo = get_current_vinfo();
     hdmi_print(INF, AUD "audio channel num is %d\n", hdmitx_device->cur_audio_param.channel_num);
 
     hdmi_wr_reg(TX_PACKET_CONTROL_2, hdmi_rd_reg(TX_PACKET_CONTROL_2) & (~(1<<3)));
@@ -2635,15 +2700,21 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
         break;
     }
 
-	if(audio_param->sample_rate == FS_48K){
-		if((hdmitx_device->cur_VIC == HDMI_1080p24) ||
-			(hdmitx_device->cur_VIC == HDMI_480p60) ||
-			(hdmitx_device->cur_VIC == HDMI_480p60_16x9) ||
-			(hdmitx_device->cur_VIC == HDMI_480i60) ||
-			(hdmitx_device->cur_VIC == HDMI_480i60_16x9) ){
-			audio_N_para = 6144 * 3;
-		}
-	}
+    if (audio_param->sample_rate == FS_48K) {
+        if ((hdmitx_device->cur_VIC == HDMI_1080p24) ||
+            (hdmitx_device->cur_VIC == HDMI_480p60) ||
+            (hdmitx_device->cur_VIC == HDMI_480p60_16x9) ||
+            (hdmitx_device->cur_VIC == HDMI_480i60) ||
+            (hdmitx_device->cur_VIC == HDMI_480i60_16x9) ){
+            audio_N_para = 6144 * 3;
+       }
+    }
+    if (audio_param->sample_rate == FS_48K) {
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+        if (strncmp(vinfo->name, "1080p23hz", strlen("1080p23hz")) == 0)
+            audio_N_para=hdmitx_get_aud_n(hdmitx_device->cur_VIC);
+#endif
+    }
     hdmi_print(INF, AUD "set audio N para\n");
 
     hdmitx_set_aud_pkt_type(audio_param->type);
@@ -2683,7 +2754,10 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
         default:
             break;
     }
-
+    if (strncmp(vinfo->name, "1080p24hz", strlen("1080p24hz")) == 0)
+    {
+        audio_N_1080p24=audio_N_para;//for recovery audio_N from 1080p23hz
+    }
     hdmi_wr_reg(TX_SYS1_ACR_N_0, (audio_N_para&0xff)); // N[7:0]
     hdmi_wr_reg(TX_SYS1_ACR_N_1, (audio_N_para>>8)&0xff); // N[15:8]
     hdmi_wr_reg(TX_SYS1_ACR_N_2, (audio_N_tolerance<<4)|((audio_N_para>>16)&0xf)); // N[19:16]
@@ -3590,6 +3664,7 @@ void HDMITX_Meson_Init(hdmitx_dev_t* hdmitx_device)
     hdmitx_device->HWOp.SetAudioInfoFrame = hdmitx_setaudioinfoframe;
     hdmitx_device->HWOp.SetDispMode = hdmitx_set_dispmode;
     hdmitx_device->HWOp.SetAudMode = hdmitx_set_audmode;
+    hdmitx_device->HWOp.SetAudN = hdmitx_set_aud_n;
     hdmitx_device->HWOp.SetupIRQ = hdmitx_setupirq;
     hdmitx_device->HWOp.DebugFun = hdmitx_debug;
     hdmitx_device->HWOp.UnInit = hdmitx_uninit;
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
index 2927c5294e31..4ecc4f9c4caa 100755
--- a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_hw.c
@@ -2149,10 +2149,36 @@ static Cts_conf_tab cts_table_192k[] = {
     {24576,  54000,  54000},
     {24576, 108000, 108000},
     {24576,  74250,  74250},
+    {46592,  74250 * 1000 / 1001, 140625},
     {24576, 148500, 148500},
-    {24576, 297000, 247500},
+    {23296, 148500 * 1000 / 1001, 140625},
+    {20480, 297000, 247500},
+    {23296, 297000 * 1000 / 1001, 281250},
 };
 
+static Cts_conf_tab cts_table_48k[] = {
+    {6144,  27000,  27000},
+    {6144,  54000,  54000},
+    {6144,  74250,  74250},
+    {23296,  74250 * 1000 / 1001, 140625},
+    {6144, 148500, 148500},
+    {5824, 148500 * 1000 / 1001, 140625},
+    {5120, 297000, 247500},
+    {5824, 297000 * 1000 / 1001, 281250},
+};
+
+static unsigned int get_n_48k(unsigned int clk)
+{
+    int i;
+
+    for (i = 0; i < ARRAY_SIZE(cts_table_48k); i++) {
+        if (clk == cts_table_48k[i].tmds_clk)
+            return cts_table_48k[i].fixed_n;
+    }
+
+    return 0;
+}
+
 static unsigned int get_cts(unsigned int clk)
 {
     int i;
@@ -2196,15 +2222,48 @@ static Vic_attr_map vic_attr_map_table[] = {
     {HDMI_4k2k_smpte_24,    297000},
 };
 
-static unsigned int vic_map_clk(HDMI_Video_Codes_t vic)
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+
+const static char *fr_auto_mode[] = {
+    "480p59hz",
+    "720p59hz",
+    "1080i59hz",
+    "1080p59hz",
+    "1080p23hz",
+    "4k2k29hz",
+    "4k2k23hz",
+};
+
+static int hdmitx_is_framerate_automation(void)
 {
     int i;
+    const vinfo_t *vinfo = get_current_vinfo();
+    for (i = 0; i < ARRAY_SIZE(fr_auto_mode); i ++) {
+        if (strncmp(vinfo->name, fr_auto_mode[i], strlen(fr_auto_mode[i])) == 0) {
+            return 1;
+        }
+    }
+    return 0;
+}
 
-    for(i = 0; i < ARRAY_SIZE(vic_attr_map_table); i++) {
+#endif
+
+static unsigned int vic_map_clk(HDMI_Video_Codes_t vic)
+{
+    int i;
+    for (i = 0; i < ARRAY_SIZE(vic_attr_map_table); i++) {
         if(vic == vic_attr_map_table[i].VIC)
+#ifndef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
             return vic_attr_map_table[i].tmds_clk;
+#else
+        {
+            if (hdmitx_is_framerate_automation())
+                return ((vic_attr_map_table[i].tmds_clk) * 1000 / 1001);
+            else
+                return vic_attr_map_table[i].tmds_clk;
+        }
+#endif
     }
-
     return 0;
 }
 
@@ -2244,12 +2303,52 @@ static void hdmitx_set_aud_cts(audio_type_t type, Hdmi_tx_audio_cts_t cts_mode,
     }
 }
 
+static unsigned int hdmitx_get_aud_n(HDMI_Video_Codes_t vic)
+{
+    unsigned int n_val = 0;
+    unsigned int clk = vic_map_clk(vic);
+    if (clk) {
+        n_val = get_n_48k(clk);
+        printk("get n = %d\n", n_val);
+        if (!n_val) {
+            hdmi_print(ERR, AUD "not find n\n");
+            return 0;
+        }
+    }
+    else {
+        hdmi_print(ERR, AUD "not find tmds clk\n");
+        return 0;
+    }
+    return n_val;
+}
+
+static unsigned int audio_N_1080p24=0;
+static void hdmitx_set_aud_n(void)
+{
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+    unsigned int audio_N_para = 6272 ;
+    unsigned int audio_N_tolerance = 3;
+    const vinfo_t *vinfo = get_current_vinfo();
+    if (strncmp(vinfo->name, "1080p23hz", strlen("1080p23hz")) == 0) {
+        audio_N_para = 23296;
+        hdmi_wr_reg(TX_SYS1_ACR_N_0, (audio_N_para&0xff)); // N[7:0]
+        hdmi_wr_reg(TX_SYS1_ACR_N_1, (audio_N_para>>8)&0xff); // N[15:8]
+        hdmi_wr_reg(TX_SYS1_ACR_N_2, (audio_N_tolerance<<4)|((audio_N_para>>16)&0xf)); // N[19:16]
+    }
+    else if (strncmp(vinfo->name, "1080p24hz", strlen("1080p24hz")) == 0) {
+        audio_N_para = audio_N_1080p24;
+        hdmi_wr_reg(TX_SYS1_ACR_N_0, (audio_N_para&0xff)); // N[7:0]
+        hdmi_wr_reg(TX_SYS1_ACR_N_1, (audio_N_para>>8)&0xff); // N[15:8]
+        hdmi_wr_reg(TX_SYS1_ACR_N_2, (audio_N_tolerance<<4)|((audio_N_para>>16)&0xf)); // N[19:16]
+    }
+#endif
+}
 static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio_para_t* audio_param)
 {
     unsigned int audio_N_para = 6272;
     unsigned int audio_N_tolerance = 3;
 //    unsigned int audio_CTS = 30000;
-    
+    const vinfo_t *vinfo = get_current_vinfo();
     hdmi_print(INF, AUD "audio channel num is %d\n", hdmitx_device->cur_audio_param.channel_num);
 
     hdmi_wr_reg(TX_PACKET_CONTROL_2, hdmi_rd_reg(TX_PACKET_CONTROL_2) & (~(1<<3)));
@@ -2395,6 +2494,12 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
         default:
             break;
     }
+    if (audio_param->sample_rate == FS_48K) {
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+        if (strncmp(vinfo->name, "1080p23hz", strlen("1080p23hz")) == 0)
+            audio_N_para=hdmitx_get_aud_n(hdmitx_device->cur_VIC);
+#endif
+    }
 
     hdmitx_set_aud_pkt_type(audio_param->type);
 
@@ -2433,7 +2538,10 @@ static int hdmitx_set_audmode(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio
         default:
             break;
     }
-
+    if (strncmp(vinfo->name, "1080p24hz", strlen("1080p24hz")) == 0)
+    {
+        audio_N_1080p24=audio_N_para;
+    }
     hdmi_wr_reg(TX_SYS1_ACR_N_0, (audio_N_para&0xff)); // N[7:0]
     hdmi_wr_reg(TX_SYS1_ACR_N_1, (audio_N_para>>8)&0xff); // N[15:8]
     hdmi_wr_reg(TX_SYS1_ACR_N_2, (audio_N_tolerance<<4)|((audio_N_para>>16)&0xf)); // N[19:16]
@@ -3323,6 +3431,7 @@ void HDMITX_Meson_Init(hdmitx_dev_t* hdmitx_device)
     hdmitx_device->HWOp.SetAudioInfoFrame = hdmitx_setaudioinfoframe;
     hdmitx_device->HWOp.SetDispMode = hdmitx_set_dispmode;
     hdmitx_device->HWOp.SetAudMode = hdmitx_set_audmode;
+    hdmitx_device->HWOp.SetAudN = hdmitx_set_aud_n;
     hdmitx_device->HWOp.SetupIRQ = hdmitx_setupirq;
     hdmitx_device->HWOp.DebugFun = hdmitx_debug;
     hdmitx_device->HWOp.UnInit = hdmitx_uninit;
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index 7e26c4666626..0ce5e1f3a2a1 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -976,6 +976,12 @@ static int hdmitx_notify_callback_v(struct notifier_block *block, unsigned long
     }
     else {
         hdmi_print(IMP, VID "get current mode: %s\n", info->name);
+    }
+    if ( ((vic_ready == HDMI_1080p24) && (info->mode == VMODE_1080P_23HZ)) ||
+        ((vic_ready == HDMI_1080p24) && (info->mode == VMODE_1080P_24HZ)) ) {
+        if (hdmitx_device.HWOp.SetAudN) {
+            hdmitx_device.HWOp.SetAudN();
+        }
     }
 	if( is_similar_hdmi_vic(vic_ready, info->mode) )
 		return 0;
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
index 86a2ba93d67d..87111f2e80a5 100755
--- a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
@@ -106,6 +106,7 @@ typedef struct hdmi_tx_dev_s {
         void (*SetAudioInfoFrame)(unsigned char* AUD_DB, unsigned char* CHAN_STAT_BUF);
         int (*SetDispMode)(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_video_para_t *param);
         int (*SetAudMode)(struct hdmi_tx_dev_s* hdmitx_device, Hdmi_tx_audio_para_t* audio_param);
+        void (*SetAudN)(void);
         void (*SetupIRQ)(struct hdmi_tx_dev_s* hdmitx_device);
         void (*DebugFun)(struct hdmi_tx_dev_s* hdmitx_device, const char * buf);
         void (*UnInit)(struct hdmi_tx_dev_s* hdmitx_device);
-- 
2.19.0

