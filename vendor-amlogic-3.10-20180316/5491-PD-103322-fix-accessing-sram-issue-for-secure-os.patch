From bf720fd984815189d0b715361aedae68b1c05403 Mon Sep 17 00:00:00 2001
From: XueYue Ma <xueyue.ma@amlogic.com>
Date: Thu, 19 Mar 2015 10:44:48 +0800
Subject: [PATCH 5491/5965] PD#103322: fix accessing sram issue for secure os

Change-Id: I85469d79d32e40e1e38e3cd61c66c380a41d1307
---
 .../mach-meson8b/include/mach/meson-secure.h  |  12 ++
 arch/arm/mach-meson8b/meson-secure.c          |  11 ++
 arch/arm/mach-meson8b/pm.c                    | 128 +++++++++++++-----
 drivers/amlogic/rtc/aml_rtc.c                 |   6 +-
 4 files changed, 120 insertions(+), 37 deletions(-)

diff --git a/arch/arm/mach-meson8b/include/mach/meson-secure.h b/arch/arm/mach-meson8b/include/mach/meson-secure.h
index 32a4c240f240..11bf8f24bb7f 100755
--- a/arch/arm/mach-meson8b/include/mach/meson-secure.h
+++ b/arch/arm/mach-meson8b/include/mach/meson-secure.h
@@ -74,6 +74,7 @@
 #define TRUSTZONE_HAL_API_STORAGE               0x200
 #define TRUSTZONE_HAL_API_MEMCONFIG             0x300
 #define TRUSTZONE_HAL_API_MEMCONFIG_GE2D        0x301
+#define TRUSTZONE_HAL_API_SRAM			0x400
 
 #ifndef __ASSEMBLER__
 extern int meson_smc1(u32 fn, u32 arg);
@@ -125,6 +126,17 @@ extern int meson_trustzone_memconfig(void);
 extern unsigned int meson_trustzone_getmemsecure_size(void);
 extern int meson_trustzone_getmemconfig(unsigned char* name, unsigned int* startphyaddr, unsigned int* endphyaddr);
 
+
+#define TRUSTZONE_HAL_API_SRAM_WR_ADDR		0x406
+struct sram_hal_api_arg {
+        unsigned int cmd;
+        unsigned int req_len;
+        unsigned int res_len;
+        unsigned int req_phy_addr;
+        unsigned int res_phy_addr;
+        unsigned int ret_phy_addr;
+};
+extern int32_t meson_secure_sram_copy(struct sram_hal_api_arg *arg);
 #endif
 
 #endif
diff --git a/arch/arm/mach-meson8b/meson-secure.c b/arch/arm/mach-meson8b/meson-secure.c
index f1ca9231a980..f03f586cfe5a 100755
--- a/arch/arm/mach-meson8b/meson-secure.c
+++ b/arch/arm/mach-meson8b/meson-secure.c
@@ -188,3 +188,14 @@ int32_t meson_secure_mem_ge2d_access(uint32_t msec)
 
 	return ret;
 }
+
+int32_t meson_secure_sram_copy(struct sram_hal_api_arg *arg)
+{
+	int ret = -1;
+
+	set_cpus_allowed_ptr(current, cpumask_of(0));
+	ret = meson_smc_hal_api(TRUSTZONE_HAL_API_SRAM, __pa(arg));
+	set_cpus_allowed_ptr(current, cpu_all_mask);
+
+	return ret;
+}
diff --git a/arch/arm/mach-meson8b/pm.c b/arch/arm/mach-meson8b/pm.c
index 2d0b0d23ff9e..8358ed355886 100755
--- a/arch/arm/mach-meson8b/pm.c
+++ b/arch/arm/mach-meson8b/pm.c
@@ -259,51 +259,111 @@ static void meson_system_late_resume(struct early_suspend *h)
 #endif
 
 #ifdef CONFIG_AO_TRIG_CLK
+int run_arc_program_rtc(void)
+{
+	//int i;
+	unsigned v;
+
+	if (cec_config & 0x1)// 4 bytes: use to control cec switch on/off,distinguish between Mbox and Tablet. bit[0]:1:Mbox; 0:Tablet
+	{
+		aml_write_reg32(P_AO_REMAP_REG0,0);
+		udelay(10);
+
+		v = ((IO_SRAM_PHY_BASE & 0xFFFFF)>>12);
+#ifdef CONFIG_MESON_TRUSTZONE
+		meson_secure_reg_write(P_AO_SECURE_REG0, v<<8 | meson_secure_reg_read(P_AO_SECURE_REG0)); //TEST_N : 1->output mode; 0->input mode
+#else
+		aml_write_reg32(P_AO_SECURE_REG0, v<<8 | aml_read_reg32(P_AO_SECURE_REG0)); //TEST_N : 1->output mode; 0->input mode
+#endif
+
+		aml_write_reg32(P_AO_RTI_STATUS_REG1, 0);//clean status
+
+		//    	writel(0x200,P_AO_CPU_CNTL);//halt first
+		aml_write_reg32(P_RESET2_REGISTER, aml_read_reg32(P_RESET2_REGISTER)|(1<<13));//reset AO_CPU
+
+		udelay(10);
+
+		//      enable arc
+		aml_write_reg32(P_AO_CPU_CNTL, 0x0c900101);//remap is right?
+
+		udelay(20);
+		if (aml_read_reg32(P_AO_RTI_STATUS_REG1) == 0xeeeeaaaa) {
+			printk("AO cpu runs ok.\n");
+			return 0;
+		}
+		else{
+			printk("AO cpu runs fail. 0x%x\n",aml_read_reg32(P_AO_RTI_STATUS_REG1));
+			return -1;
+		}
+	}
+	return -1;
+}
+
 int run_arc_program(void)
 {
 //	int i;
 	unsigned vaddr2,v;
+#ifndef CONFIG_MESON_TRUSTZONE
 	unsigned* pbuffer;
+#endif
+
+#ifdef CONFIG_MESON_TRUSTZONE
+	int ret_val;
+	struct sram_hal_api_arg arg;
+
+	vaddr2 = IO_SRAM_PHY_BASE;
+#else
 	vaddr2 = IO_SRAM_BASE;
+#endif
 	
 	if(cec_config & 0x1)// 4 bytes: use to control cec switch on/off,distinguish between Mbox and Tablet. bit[0]:1:Mbox; 0:Tablet
-    {
-    	aml_write_reg32(P_AO_REMAP_REG0,0);
-    	udelay(10);
-    	pbuffer = (unsigned*)vaddr2;
-    
-    	memcpy(pbuffer,arc_code,sizeof(arc_code));//need not flush cache for sram. Sram locates at io mapping.
-    
-//    	for(i = 0; i<sizeof(arc_code)/4; i+=4,pbuffer+=4)
-//    		printk(" 0x%x	0x%x	0x%x	0x%x \n",*(pbuffer),*(pbuffer+1),*(pbuffer+2),*(pbuffer+3));
-        v = ((IO_SRAM_PHY_BASE & 0xFFFFF)>>12);
+	{
+		aml_write_reg32(P_AO_REMAP_REG0,0);
+		udelay(10);
+
+
 #ifdef CONFIG_MESON_TRUSTZONE
-        meson_secure_reg_write(P_AO_SECURE_REG0, v<<8 | meson_secure_reg_read(P_AO_SECURE_REG0)); //TEST_N : 1->output mode; 0->input mode
+		arg.cmd = (unsigned int)TRUSTZONE_HAL_API_SRAM_WR_ADDR;
+		arg.req_len = sizeof(arc_code);
+		arg.res_len = sizeof(arc_code);
+		arg.req_phy_addr = vaddr2;
+		arg.res_phy_addr = virt_to_phys(arc_code);
+		arg.ret_phy_addr = virt_to_phys(&ret_val);
+		meson_secure_sram_copy(&arg);
 #else
-        aml_write_reg32(P_AO_SECURE_REG0, v<<8 | aml_read_reg32(P_AO_SECURE_REG0)); //TEST_N : 1->output mode; 0->input mode
+		pbuffer = (unsigned*)vaddr2;
+		memcpy(pbuffer,arc_code,sizeof(arc_code));//need not flush cache for sram. Sram locates at io mapping.
 #endif
-    
-        aml_write_reg32(P_AO_RTI_STATUS_REG1, 0);//clean status
-    
-//    	writel(0x200,P_AO_CPU_CNTL);//halt first
-    	aml_write_reg32(P_RESET2_REGISTER, aml_read_reg32(P_RESET2_REGISTER)|(1<<13));//reset AO_CPU
-    
-    	udelay(10);
-    
-//      enable arc
-        aml_write_reg32(P_AO_CPU_CNTL, 0x0c900101);//remap is right?
-    
-    	udelay(20);
-    	if(aml_read_reg32(P_AO_RTI_STATUS_REG1) == 0xeeeeaaaa){
-    		printk("AO cpu runs ok.\n");
-    		return 0;
-    	}
-    	else{
-    		printk("AO cpu runs fail. 0x%x\n",aml_read_reg32(P_AO_RTI_STATUS_REG1));
-    		return -1;
-    	}
-    }
-    return -1;
+
+		//    	for(i = 0; i<sizeof(arc_code)/4; i+=4,pbuffer+=4)
+		//    		printk(" 0x%x	0x%x	0x%x	0x%x \n",*(pbuffer),*(pbuffer+1),*(pbuffer+2),*(pbuffer+3));
+		v = ((IO_SRAM_PHY_BASE & 0xFFFFF)>>12);
+#ifdef CONFIG_MESON_TRUSTZONE
+		meson_secure_reg_write(P_AO_SECURE_REG0, v<<8 | meson_secure_reg_read(P_AO_SECURE_REG0)); //TEST_N : 1->output mode; 0->input mode
+#else
+		aml_write_reg32(P_AO_SECURE_REG0, v<<8 | aml_read_reg32(P_AO_SECURE_REG0)); //TEST_N : 1->output mode; 0->input mode
+#endif
+
+		aml_write_reg32(P_AO_RTI_STATUS_REG1, 0);//clean status
+
+		//    	writel(0x200,P_AO_CPU_CNTL);//halt first
+		aml_write_reg32(P_RESET2_REGISTER, aml_read_reg32(P_RESET2_REGISTER)|(1<<13));//reset AO_CPU
+
+		udelay(10);
+		//      enable arc
+		aml_write_reg32(P_AO_CPU_CNTL, 0x0c900101);//remap is right?
+
+		udelay(20);
+		if (aml_read_reg32(P_AO_RTI_STATUS_REG1) == 0xeeeeaaaa) {
+			printk("AO cpu runs ok.\n");
+			return 0;
+		}
+		else {
+			printk("AO cpu runs fail. 0x%x\n",aml_read_reg32(P_AO_RTI_STATUS_REG1));
+			return -1;
+		}
+	}
+	return -1;
 }
 
 int stop_ao_cpu(void)
diff --git a/drivers/amlogic/rtc/aml_rtc.c b/drivers/amlogic/rtc/aml_rtc.c
index baf5f091f6df..91448bfdc06e 100755
--- a/drivers/amlogic/rtc/aml_rtc.c
+++ b/drivers/amlogic/rtc/aml_rtc.c
@@ -337,7 +337,7 @@ static void aml_rtc_reset(void)
 }
 
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
-extern int run_arc_program(void);
+extern int run_arc_program_rtc(void);
 extern int stop_ao_cpu(void);
 #endif
 
@@ -376,7 +376,7 @@ static unsigned int _ser_access_read_locked(unsigned long addr)
 out:
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
 	if (ret >= 0)
-		run_arc_program();
+		run_arc_program_rtc();
 #endif
 	return val;
 }
@@ -415,7 +415,7 @@ static void _ser_access_write_locked(unsigned long addr, unsigned long data)
 out:
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON8B
 	if (ret >= 0)
-		run_arc_program();
+		run_arc_program_rtc();
 #endif
 	return;
 }
-- 
2.19.0

