From df375661bdabcd1d4ad010b6d26dce3d44cf1dbf Mon Sep 17 00:00:00 2001
From: Baoqi Wang <baoqi.wang@amlogic.com>
Date: Wed, 25 Mar 2015 19:23:56 +0800
Subject: [PATCH 5508/5965] PD#104674 ethernet: mac dynamically update MDC

Change-Id: I1c6871b6a7d86f9b54c03f8c2ec1292df047f116
---
 .../net/ethernet/stmicro/stmmac/stmmac_main.c | 36 ++++++++++++++++---
 .../net/ethernet/stmicro/stmmac/stmmac_mdio.c |  4 +--
 2 files changed, 33 insertions(+), 7 deletions(-)

diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
index 67b6cbad310a..b5d0865c7299 100755
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
@@ -55,6 +55,7 @@
 #include<plat/cpu.h>
 #include <mach/am_regs.h>
 #include <mach/am_eth_reg.h>
+#include <linux/clk.h>
 #endif
 //#undef STMMAC_DEBUG
 //#define STMMAC_DEBUG
@@ -218,6 +219,24 @@ static void stmmac_clk_csr_set(struct stmmac_priv *priv)
 			priv->clk_csr = STMMAC_CSR_250_300M;
 	}
 }
+#else
+static void amlmac_clk_csr_set(struct stmmac_priv *priv,u32 clk_rate)
+{
+	if (!(priv->clk_csr & MAC_CSR_H_FRQ_MASK)) {
+		if (clk_rate < CSR_F_35M)
+			priv->clk_csr = STMMAC_CSR_20_35M;
+		else if ((clk_rate >= CSR_F_35M) && (clk_rate < CSR_F_60M))
+			priv->clk_csr = STMMAC_CSR_35_60M;
+		else if ((clk_rate >= CSR_F_60M) && (clk_rate < CSR_F_100M))
+			priv->clk_csr = STMMAC_CSR_60_100M;
+		else if ((clk_rate >= CSR_F_100M) && (clk_rate < CSR_F_150M))
+			priv->clk_csr = STMMAC_CSR_100_150M;
+		else if ((clk_rate >= CSR_F_150M) && (clk_rate < CSR_F_250M))
+			priv->clk_csr = STMMAC_CSR_150_250M;
+		else if ((clk_rate >= CSR_F_250M) && (clk_rate < CSR_F_300M))
+			priv->clk_csr = STMMAC_CSR_250_300M;
+	}
+}
 #endif
 #if defined(STMMAC_XMIT_DEBUG) || defined(STMMAC_RX_DEBUG)
 static void print_pkt(unsigned char *buf, int len)
@@ -3141,7 +3160,10 @@ struct stmmac_priv *stmmac_dvr_probe(struct device *device,
 	int ret = 0;
 	struct net_device *ndev = NULL;
 	struct stmmac_priv *priv;
-
+#ifdef CONFIG_DWMAC_MESON
+	struct clk * clk81;
+	u32 clk_rate;
+#endif
 	ndev = alloc_etherdev(sizeof(struct stmmac_priv));
 	if (!ndev)
 		return NULL;
@@ -3210,8 +3232,14 @@ struct stmmac_priv *stmmac_dvr_probe(struct device *device,
 		goto error_netdev_register;
 	}
 #ifdef CONFIG_DWMAC_MESON
-	priv->clk_csr = STMMAC_CSR_100_150M;
-//	priv->clk_csr = STMMAC_CSR_150_250M;
+	clk81 = clk_get_sys("clk81", "pll_fixed");
+        if (IS_ERR_OR_NULL(clk81)) {
+		pr_info("meson_eth_change_speed: clk81 is not available\n");
+		goto error_clk_get;
+	}
+	msleep(1);
+	clk_rate = clk_get_rate(clk81);
+	amlmac_clk_csr_set(priv,clk_rate);
 #else
 	priv->stmmac_clk = clk_get(priv->device, STMMAC_RESOURCE_NAME);
 	if (IS_ERR(priv->stmmac_clk)) {
@@ -3251,10 +3279,8 @@ struct stmmac_priv *stmmac_dvr_probe(struct device *device,
 
 error_mdio_register:
 	clk_put(priv->stmmac_clk);
-#ifndef CONFIG_DWMAC_MESON
 error_clk_get:
 	unregister_netdev(ndev);
-#endif
 error_netdev_register:
 	netif_napi_del(&priv->napi);
 error_free_netdev:
diff --git a/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c b/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
index 23ca2fa29e05..65f6a8d09f54 100755
--- a/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
+++ b/drivers/net/ethernet/stmicro/stmmac/stmmac_mdio.c
@@ -34,7 +34,7 @@
 #define MII_BUSY 0x00000001
 #define MII_WRITE 0x00000002
 
-#ifdef CONFIG_DWMAC_MESON
+#ifndef CONFIG_DWMAC_MESON
 #define ETH_MAC_4_GMII_Addr         (0x0010)
 #define ETH_MAC_5_GMII_Data         (0x0014)
 #define ETH_MAC_4_GMII_Addr_CR_P                2
@@ -223,7 +223,7 @@ int stmmac_mdio_register(struct net_device *ndev)
 	else
 		irqlist = priv->mii_irq;
 	new_bus->name = "stmmac";
-#ifdef CONFIG_DWMAC_MESON
+#ifndef CONFIG_DWMAC_MESON
 	new_bus->read = &mdio_read;
 	new_bus->write = &mdio_write;
 	new_bus->reset = &mdio_reset;
-- 
2.19.0

