From b9facd036698497891985f197f342d75211ec9dc Mon Sep 17 00:00:00 2001
From: Qi Duan <qi.duan@amlogic.com>
Date: Fri, 27 Mar 2015 10:24:13 +0800
Subject: [PATCH 5524/5965] PD#103761: dwc_otg2: add api to force dwc_otg to
 device mode

Change-Id: Ie97a6d531fb498ef4723ab86d385f8a50629069c
---
 .../amlogic/usb/dwc_otg/310/dwc_otg_driver.c  | 51 ++++++++++++-------
 1 file changed, 34 insertions(+), 17 deletions(-)

diff --git a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c
index e131bf8bd70c..e7978f2c73f0 100755
--- a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c
+++ b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_driver.c
@@ -76,13 +76,13 @@
 static const char dwc_driver_name[] = "dwc_otg";
 
 static struct aml_usb_platform usb_platform_data = {
-	.port_name 	= {MESON_USB_NAMES},
-	.ctrl_regaddr 	= {MESON_USB_CTRL_ADDRS},
-	.ctrl_size 	= {MESON_USB_CTRL_SIZES},
-	.phy_regaddr 	= {MESON_USB_PHY_ADDRS},
-	.phy_size 	= {MESON_USB_PHY_SIZES},
-	.irq_no 		= {MESON_USB_IRQS},
-	.fifo_size 	= {MESON_USB_FIFOS},
+	.port_name	= {MESON_USB_NAMES},
+	.ctrl_regaddr	= {MESON_USB_CTRL_ADDRS},
+	.ctrl_size	= {MESON_USB_CTRL_SIZES},
+	.phy_regaddr	= {MESON_USB_PHY_ADDRS},
+	.phy_size	= {MESON_USB_PHY_SIZES},
+	.irq_no			= {MESON_USB_IRQS},
+	.fifo_size	= {MESON_USB_FIFOS},
 };
 
 extern int pcd_init(
@@ -511,7 +511,7 @@ static int set_parameters(dwc_otg_core_if_t * core_if)
 		    dwc_otg_set_param_lpm_enable(core_if,
 						 dwc_otg_module_params.
 						 lpm_enable);
-	}	
+	}
 	if (dwc_otg_module_params.besl_enable != -1) {
 		retval +=
 		    dwc_otg_set_param_besl_enable(core_if,
@@ -529,7 +529,7 @@ static int set_parameters(dwc_otg_core_if_t * core_if)
 		    dwc_otg_set_param_deep_besl(core_if,
 						 dwc_otg_module_params.
 						 deep_besl);
-	}		
+	}
 	if (dwc_otg_module_params.ic_usb_cap != -1) {
 		retval +=
 		    dwc_otg_set_param_ic_usb_cap(core_if,
@@ -689,7 +689,7 @@ void set_usb_vbus_power(int pin,char is_power_on)
 
         printk( "set usb port power on (board gpio %d)!\n",pin);
 	 if(pin!=-2)
-        	amlogic_gpio_direction_output(pin,is_power_on,VBUS_POWER_GPIO_OWNER);		//set vbus on by gpio	 
+		amlogic_gpio_direction_output(pin,is_power_on,VBUS_POWER_GPIO_OWNER);		//set vbus on by gpio
     }
     else    {
         printk("set usb port power off (board gpio %d)!\n",pin);
@@ -859,6 +859,20 @@ static const struct of_device_id dwc_otg_dt_match[]={
 	},
 	{},
 };
+
+bool force_device_mode = 0;
+static int __init force_otg_mode(char *str)
+{
+	force_device_mode = 1;
+	return 1;
+}
+__setup("otg_device", force_otg_mode);
+module_param_named(otg_device, force_device_mode,
+	bool, S_IRUGO | S_IWUSR);
+
+MODULE_PARM_DESC(otg_device, "set otg to force device mode"
+	" ");
+
 /**
  * This function is called when an lm_device is bound to a
  * dwc_otg_driver. It creates the driver components required to
@@ -956,7 +970,7 @@ static int dwc_otg_driver_probe(
 			prop = of_get_property(of_node, "charger_detect", NULL);
 			if(prop)
 				charger_detect = of_read_ulong(prop,1);
-				
+
 			prop = of_get_property(of_node, "non_normal_usb_charger_detect_delay", NULL);
       if(prop)
 				non_normal_usb_charger_detect_delay = of_read_ulong(prop,1);
@@ -973,7 +987,7 @@ static int dwc_otg_driver_probe(
 				}
 				prop = of_get_property(of_node, "gpio-work-mask", NULL);
 				if(prop)
-					gpio_work_mask = of_read_ulong(prop,1);	
+					gpio_work_mask = of_read_ulong(prop,1);
 			}
 
 			prop = of_get_property(of_node, "host-only-core", NULL);
@@ -983,7 +997,7 @@ static int dwc_otg_driver_probe(
 			prop = of_get_property(of_node, "pmu-apply-power", NULL);
 			if(prop)
 				pmu_apply_power = of_read_ulong(prop,1);
-			
+
 			ctrl_reg_addr = (unsigned long)usb_platform_data.ctrl_regaddr[port_index];
 			phy_reg_addr = (unsigned long)usb_platform_data.phy_regaddr[port_index];
 			_dev->irq = usb_platform_data.irq_no[port_index];
@@ -1103,6 +1117,9 @@ static int dwc_otg_driver_probe(
 
 	pcore_para = &dwc_otg_module_params;
 
+	if ( force_device_mode && ( port_index == 0 ))
+		port_type = USB_PORT_TYPE_SLAVE;
+
 	if(port_type == USB_PORT_TYPE_HOST)
 		pcore_para->host_only = 1;
 	else
@@ -1963,22 +1980,22 @@ MODULE_PARM_DESC(otg_ver, "OTG revision supported 0=OTG 1.3 1=OTG 2.0");
  - 0: LPM disabled
  - 1: LPM enable (default, if available)
  </td></tr>
-  
+
  <tr>
  <td>besl_enable</td>
  <td>Specifies whether to enable LPM Errata support.
  The driver will automatically detect the value for this parameter if none is
  specified.
  - 0: LPM Errata disabled (default)
- - 1: LPM Errata enable 
+ - 1: LPM Errata enable
  </td></tr>
- 
+
   <tr>
  <td>baseline_besl</td>
  <td>Specifies the baseline besl value.
  - Values: 0 to 15 (default 0)
  </td></tr>
- 
+
   <tr>
  <td>deep_besl</td>
  <td>Specifies the deep besl value.
-- 
2.19.0

