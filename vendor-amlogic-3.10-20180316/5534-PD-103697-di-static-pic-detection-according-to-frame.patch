From 2a71a0d4cdc3e246833ac29219a9df74b415b640 Mon Sep 17 00:00:00 2001
From: KeLe Bai <kele.bai@amlogic.com>
Date: Wed, 1 Apr 2015 09:58:57 +0800
Subject: [PATCH 5534/5965] PD#103697: di: static pic detection according to
 frame diff num

Change-Id: I528c8575afcc6ab6c7924514f22529027775d342
---
 drivers/amlogic/deinterlace/deinterlace.c    | 55 ++++++++++++++------
 drivers/amlogic/deinterlace/deinterlace.h    |  2 +-
 drivers/amlogic/deinterlace/deinterlace_hw.c |  3 +-
 3 files changed, 42 insertions(+), 18 deletions(-)

diff --git a/drivers/amlogic/deinterlace/deinterlace.c b/drivers/amlogic/deinterlace/deinterlace.c
index b5d8f121d8ca..7ae95da9f33e 100644
--- a/drivers/amlogic/deinterlace/deinterlace.c
+++ b/drivers/amlogic/deinterlace/deinterlace.c
@@ -198,7 +198,7 @@ static dev_t di_id;
 static struct class *di_class;
 
 #define INIT_FLAG_NOT_LOAD 0x80
-static char version_s[] = "2015-3-27a";//enable skip process in post
+static char version_s[] = "2015-3-31a";//add static pic detection
 static unsigned char boot_init_flag=0;
 static int receiver_is_amvideo = 1;
 
@@ -295,7 +295,7 @@ static bool use_2_interlace_buff = false;
 static int input2pre_buf_miss_count = 0;
 static int input2pre_proc_miss_count = 0;
 static int input2pre_throw_count = 0;
-
+static int static_pic_threshold = 10;
 #ifdef NEW_DI_V1
 static int input2pre_miss_policy = 0; /* 0, do not force pre_de_busy to 0, use di_wr_buf after de_irq happen; 1, force pre_de_busy to 0 and call pre_de_done_buf_clear to clear di_wr_buf */
 #else
@@ -1676,6 +1676,8 @@ typedef struct{
     int pre_de_irq_timeout_count;
     int pre_throw_flag;
     int bad_frame_throw_count;
+    /*for static pic*/
+    int static_frame_count;
     bool force_interlace;
     bool bypass_pre;
 }di_pre_stru_t;
@@ -3587,6 +3589,7 @@ static void top_bot_config(di_buf_t* di_buf)
 static void pre_de_done_buf_config(void)
 {
     ulong fiq_flag=0, irq_flag2=0;
+    bool dynamic_flag = false;
     if(di_pre_stru.di_wr_buf){
         if(di_pre_stru.pre_throw_flag>0){
             di_pre_stru.di_wr_buf->throw_flag = 1;
@@ -3595,9 +3598,17 @@ static void pre_de_done_buf_config(void)
         else{
             di_pre_stru.di_wr_buf->throw_flag = 0;
         }
-        read_pulldown_info(&(di_pre_stru.di_wr_buf->field_pd_info),
+
+        dynamic_flag = read_pulldown_info(&(di_pre_stru.di_wr_buf->field_pd_info),
                             &(di_pre_stru.di_wr_buf->win_pd_info[0])
                             );
+        di_pre_stru.static_frame_count = dynamic_flag?0:(di_pre_stru.static_frame_count+1);
+        if (di_pre_stru.static_frame_count > static_pic_threshold) {
+	    di_pre_stru.static_frame_count = static_pic_threshold;
+            di_pre_stru.di_wr_buf->pulldown_mode = PULL_DOWN_BLEND_0;
+        } else {
+	    di_pre_stru.di_wr_buf->pulldown_mode = PULL_DOWN_NORMAL;
+        }
         #ifndef NEW_DI_V1
         read_mtn_info(di_pre_stru.di_wr_buf->mtn_info,reg_mtn_info);
         #endif
@@ -5762,12 +5773,12 @@ static void force_bob_vframe(di_buf_t* di_buf)
 }
 #endif
 #ifdef NEW_DI_TV
-static int blend_mode = -2;
+static int pulldown_mode = 1;
 #else
-static int blend_mode = 5;
+static int pulldown_mode = 0;
 #endif
-module_param(blend_mode,int,0664);
-MODULE_PARM_DESC(blend_mode,"\n force post blend mode \n");
+static int debug_blend_mode = -1;
+
 static int process_post_vframe(void)
 {
 /*
@@ -5875,8 +5886,17 @@ static int process_post_vframe(void)
                         di_buf->pulldown_mode = PULL_DOWN_BLEND_2; /* blend with di_buf->di_buf_dup_p[2] */
                     }
                     else{
-                    	if(blend_mode == -2)
+                        if (pulldown_mode&1) {
                             pulldown_mode_hise = pulldown_process(di_buf, buffer_keep_count);
+                            if (di_buf->pulldown_mode == -1)
+                                di_buf->pulldown_mode = PULL_DOWN_NORMAL;
+                            else if (di_buf->pulldown_mode == 0)
+                                di_buf->pulldown_mode = PULL_DOWN_BLEND_0;
+                            else if (di_buf->pulldown_mode == 1)
+                                di_buf->pulldown_mode = PULL_DOWN_BLEND_2;
+                        } else {
+                            di_buf->pulldown_mode = di_buf->di_buf_dup_p[1]->pulldown_mode;
+                        }
                     }
 #ifdef FORCE_BOB_SUPPORT
                     if(force_bob_flag!=0){
@@ -5903,15 +5923,10 @@ static int process_post_vframe(void)
                             di_buf->process_fun_index = PROCESS_FUN_NULL;
                         }
                         else {
-                            if (di_buf->pulldown_mode == -1)
-                                di_buf->pulldown_mode = PULL_DOWN_NORMAL;
-                            else if (di_buf->pulldown_mode == 0)
-                                di_buf->pulldown_mode = PULL_DOWN_BLEND_0;
-                            else if (di_buf->pulldown_mode == 1)
-                                di_buf->pulldown_mode = PULL_DOWN_BLEND_2;
+
                		    /*for debug*/
-                            if (blend_mode != -2)
-                                di_buf->pulldown_mode = blend_mode;
+                            if (debug_blend_mode != -1)
+                                di_buf->pulldown_mode = debug_blend_mode;
                             di_buf->vframe->process_fun = de_post_process;
                             di_buf->process_fun_index = PROCESS_FUN_DI;
                             inc_post_ref_count(di_buf);
@@ -7789,6 +7804,14 @@ module_param(update_post_reg_count, uint, 0664);
 module_param(use_2_interlace_buff,bool,0664);
 MODULE_PARM_DESC(use_2_interlace_buff,"/n debug for progress interlace mixed source /n");
 
+module_param(pulldown_mode,int,0664);
+MODULE_PARM_DESC(pulldown_mode,"\n option for pulldown \n");
+
+module_param(debug_blend_mode,int,0664);
+MODULE_PARM_DESC(debug_blend_mode,"\n force post blend mode \n");
+
+module_param(static_pic_threshold,int,0664);
+MODULE_PARM_DESC(static_pic_threshold,"/n threshold for static pic /n");
 MODULE_DESCRIPTION("AMLOGIC DEINTERLACE driver");
 MODULE_LICENSE("GPL");
 MODULE_VERSION("1.0.0");
diff --git a/drivers/amlogic/deinterlace/deinterlace.h b/drivers/amlogic/deinterlace/deinterlace.h
index cfcad4962594..bde2d35a9a42 100755
--- a/drivers/amlogic/deinterlace/deinterlace.h
+++ b/drivers/amlogic/deinterlace/deinterlace.h
@@ -443,7 +443,7 @@ void di_post_switch_buffer_pd(
     int ei_en, int blend_en, int blend_mtn_en, int blend_mode, int di_vpp_en, int di_ddr_en,
     int post_field_num, int hold_line, int urgent);
 #endif
-void read_pulldown_info(pulldown_detect_info_t* field_pd_info,
+bool read_pulldown_info(pulldown_detect_info_t* field_pd_info,
                         pulldown_detect_info_t* win_pd_info);
 #ifndef NEW_DI_V1
 void read_mtn_info(unsigned long* mtn_info, unsigned long* );
diff --git a/drivers/amlogic/deinterlace/deinterlace_hw.c b/drivers/amlogic/deinterlace/deinterlace_hw.c
index 7f877b589047..5991d8efa948 100755
--- a/drivers/amlogic/deinterlace/deinterlace_hw.c
+++ b/drivers/amlogic/deinterlace/deinterlace_hw.c
@@ -1813,7 +1813,7 @@ void enable_di_mode_check_2( int win0_start_x, int win0_end_x, int win0_start_y,
 }
 
 static int fdn[5] = {0};
-void read_pulldown_info(pulldown_detect_info_t* field_pd_info,
+bool read_pulldown_info(pulldown_detect_info_t* field_pd_info,
                         pulldown_detect_info_t* win_pd_info)
 {
     int i;
@@ -1873,6 +1873,7 @@ void read_pulldown_info(pulldown_detect_info_t* field_pd_info,
     for(i = 0; i< MAX_WIN_NUM; i++){
         win_pd_info[i].field_diff_num = (Rd(DI_INFO_DATA)&0xfffff)<<4;
     }
+    return frame_dynamic;
 }
 
 #ifndef NEW_DI_V1
-- 
2.19.0

