From eda4e8cb5f7d6d651ff43d9800999d5aa2375fad Mon Sep 17 00:00:00 2001
From: Kieth Liu <kieth.liu@amlogic.com>
Date: Tue, 14 Apr 2015 12:47:23 +0800
Subject: [PATCH 5552/5965] PD#103901: lcd, vout: add vx1/lvds 50hz mode

Change-Id: Idea75ae487b9775020694f8483cd805b4096f17b
---
 drivers/amlogic/display/lcd/aml_lcd_v2.c  | 91 +++++++++++++++--------
 drivers/amlogic/display/vout/vout_serve.c | 71 +++++++++---------
 2 files changed, 98 insertions(+), 64 deletions(-)

diff --git a/drivers/amlogic/display/lcd/aml_lcd_v2.c b/drivers/amlogic/display/lcd/aml_lcd_v2.c
index 8d8ef37f2664..1ad762b33602 100755
--- a/drivers/amlogic/display/lcd/aml_lcd_v2.c
+++ b/drivers/amlogic/display/lcd/aml_lcd_v2.c
@@ -500,6 +500,7 @@ void vclk_set_encl_lvds(vmode_t vmode, int lvds_ports)
 		//pll_video.pl 3500 pll_out
 		switch(vmode) {
 			case VMODE_1080P: //total: 2200x1125 pixel clk = 148.5MHz,phy_clk(s)=(pclk*7)= 1039.5 = 2079/2
+			case VMODE_1080P_50HZ:
 				hdmi_clk_out = 2079;
 				vx1_phy_div  = 2/2;
 				encl_div     = vx1_phy_div*7;
@@ -595,31 +596,57 @@ static void venc_set_lvds(Lcd_Config_t *pConf)
 static void venc_set_vx1(Lcd_Config_t *pConf)
 {
 	pr_info("%s\n", __FUNCTION__);
-
-	aml_write_reg32(P_ENCL_VIDEO_EN, 0);
-	//int havon_begin = 80;
-	aml_write_reg32(P_VPU_VIU_VENC_MUX_CTRL, (0<<0) |    // viu1 select encl
-											(3<<2) );     // viu2 select encl
-	aml_write_reg32(P_ENCL_VIDEO_MODE, 40);//0); // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
-	aml_write_reg32(P_ENCL_VIDEO_MODE_ADV,     0x18);//0x0418); // Sampling rate: 1
-
-	// bypass filter
-	aml_write_reg32(P_ENCL_VIDEO_FILT_CTRL, 0x1000); //??
-
-	aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT, 3840+560-1);//pConf->lcd_basic.h_period - 1);
-	aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT, 2160+90-1);//pConf->lcd_basic.v_period - 1);
-
-	aml_write_reg32(P_ENCL_VIDEO_HAVON_BEGIN, 560-3);//pConf->lcd_timing.video_on_pixel);
-	aml_write_reg32(P_ENCL_VIDEO_HAVON_END, 3839+560-3);//pConf->lcd_basic.h_active - 1 + pConf->lcd_timing.video_on_pixel);
-	aml_write_reg32(P_ENCL_VIDEO_VAVON_BLINE,	90);//pConf->lcd_timing.video_on_line);
-	aml_write_reg32(P_ENCL_VIDEO_VAVON_ELINE,	2159+90);//pConf->lcd_basic.v_active - 1  + pConf->lcd_timing.video_on_line);
-
-	aml_write_reg32(P_ENCL_VIDEO_HSO_BEGIN,48-1);//	pConf->lcd_timing.sth1_hs_addr);//10);
-	aml_write_reg32(P_ENCL_VIDEO_HSO_END,	48-1+32);//pConf->lcd_timing.sth1_he_addr);//20);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_BEGIN,	48-1);//pConf->lcd_timing.stv1_hs_addr);//10);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_END,	48-1);//pConf->lcd_timing.stv1_he_addr);//20);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_BLINE,	3);//pConf->lcd_timing.stv1_vs_addr);//2);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_ELINE,	9);//pConf->lcd_timing.stv1_ve_addr);//4);
+	if (cur_vmode == VMODE_4K2K_60HZ) {
+		aml_write_reg32(P_ENCL_VIDEO_EN, 0);
+		//int havon_begin = 80;
+		aml_write_reg32(P_VPU_VIU_VENC_MUX_CTRL, (0<<0) |    // viu1 select encl
+												(3<<2) );     // viu2 select encl
+		aml_write_reg32(P_ENCL_VIDEO_MODE, 40);//0); // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
+		aml_write_reg32(P_ENCL_VIDEO_MODE_ADV,     0x18);//0x0418); // Sampling rate: 1
+
+		// bypass filter
+		aml_write_reg32(P_ENCL_VIDEO_FILT_CTRL, 0x1000); //??
+
+		aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT, 3840+560-1);//pConf->lcd_basic.h_period - 1);
+		aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT, 2160+90-1);//pConf->lcd_basic.v_period - 1);
+
+		aml_write_reg32(P_ENCL_VIDEO_HAVON_BEGIN, 560-3);//pConf->lcd_timing.video_on_pixel);
+		aml_write_reg32(P_ENCL_VIDEO_HAVON_END, 3839+560-3);//pConf->lcd_basic.h_active - 1 + pConf->lcd_timing.video_on_pixel);
+		aml_write_reg32(P_ENCL_VIDEO_VAVON_BLINE,	90);//pConf->lcd_timing.video_on_line);
+		aml_write_reg32(P_ENCL_VIDEO_VAVON_ELINE,	2159+90);//pConf->lcd_basic.v_active - 1  + pConf->lcd_timing.video_on_line);
+
+		aml_write_reg32(P_ENCL_VIDEO_HSO_BEGIN,48-1);//	pConf->lcd_timing.sth1_hs_addr);//10);
+		aml_write_reg32(P_ENCL_VIDEO_HSO_END,	48-1+32);//pConf->lcd_timing.sth1_he_addr);//20);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_BEGIN,	48-1);//pConf->lcd_timing.stv1_hs_addr);//10);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_END,	48-1);//pConf->lcd_timing.stv1_he_addr);//20);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_BLINE,	3);//pConf->lcd_timing.stv1_vs_addr);//2);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_ELINE,	9);//pConf->lcd_timing.stv1_ve_addr);//4);
+	}else if (cur_vmode == VMODE_4K2K_50HZ) {
+		aml_write_reg32(P_ENCL_VIDEO_EN, 0);
+		//int havon_begin = 80;
+		aml_write_reg32(P_VPU_VIU_VENC_MUX_CTRL, (0<<0) |    // viu1 select encl
+												(3<<2) );     // viu2 select encl
+		aml_write_reg32(P_ENCL_VIDEO_MODE, 40);//0); // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
+		aml_write_reg32(P_ENCL_VIDEO_MODE_ADV,     0x18);//0x0418); // Sampling rate: 1
+
+		// bypass filter
+		aml_write_reg32(P_ENCL_VIDEO_FILT_CTRL, 0x1000); //??
+
+		aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT, 3840+1440-1);//pConf->lcd_basic.h_period - 1);
+		aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT, 2160+90-1);//pConf->lcd_basic.v_period - 1);
+
+		aml_write_reg32(P_ENCL_VIDEO_HAVON_BEGIN, 1440-3);//pConf->lcd_timing.video_on_pixel);
+		aml_write_reg32(P_ENCL_VIDEO_HAVON_END, 3839+1440-3);//pConf->lcd_basic.h_active - 1 + pConf->lcd_timing.video_on_pixel);
+		aml_write_reg32(P_ENCL_VIDEO_VAVON_BLINE,	90);//pConf->lcd_timing.video_on_line);
+		aml_write_reg32(P_ENCL_VIDEO_VAVON_ELINE,	2159+90);//pConf->lcd_basic.v_active - 1  + pConf->lcd_timing.video_on_line);
+
+		aml_write_reg32(P_ENCL_VIDEO_HSO_BEGIN,48-1);//	pConf->lcd_timing.sth1_hs_addr);//10);
+		aml_write_reg32(P_ENCL_VIDEO_HSO_END,	48-1+32);//pConf->lcd_timing.sth1_he_addr);//20);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_BEGIN,	48-1);//pConf->lcd_timing.stv1_hs_addr);//10);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_END,	48-1);//pConf->lcd_timing.stv1_he_addr);//20);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_BLINE,	3);//pConf->lcd_timing.stv1_vs_addr);//2);
+		aml_write_reg32(P_ENCL_VIDEO_VSO_ELINE,	9);//pConf->lcd_timing.stv1_ve_addr);//4);
+	}
 
 	aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL, 0);
 
@@ -1092,7 +1119,7 @@ static void change_panel(lcd_dev_t *pDev)
 		(cur_vmode == VMODE_1080P_50HZ))
 	{
 		pDev->conf.lcd_basic.lcd_type = LCD_DIGITAL_LVDS;
-	}else if(cur_vmode == VMODE_4K2K_60HZ)
+	}else if((cur_vmode == VMODE_4K2K_60HZ)||(cur_vmode == VMODE_4K2K_50HZ))
 	{
 		pDev->conf.lcd_basic.lcd_type = LCD_DIGITAL_VBYONE;
 	}else if(cur_vmode == VMODE_720P)
@@ -1213,7 +1240,7 @@ static inline int _get_lcd_default_config(struct platform_device *pdev)
 		pDev->conf.lcd_timing.oeh_hs_addr = lvds_para[10];
 		pDev->conf.lcd_timing.oeh_he_addr = lvds_para[11];
 		pDev->conf.lcd_timing.oeh_vs_addr = lvds_para[12];
-		pDev->conf.lcd_timing.oeh_ve_addr = lvds_para[13];		
+		pDev->conf.lcd_timing.oeh_ve_addr = lvds_para[13];
 	}
 	ret = of_property_read_u32_array(pdev->dev.of_node,"delay_setting",&lvds_para[0], 8);
 	if(ret){
@@ -1341,11 +1368,15 @@ static void lcd_output_mode_info(void)
 	info = get_current_vinfo();
 	if(info){
 		if(strncmp(info->name, "720p", 4) == 0){
-			cur_vmode = VMODE_720P;	
+			cur_vmode = VMODE_720P;
 		}else if(strncmp(info->name, "1080p", 5) == 0){
 			cur_vmode = VMODE_1080P;
+		}else if(strncmp(info->name, "1080p50hz", 5) == 0){
+			cur_vmode = VMODE_1080P_50HZ;
 		}else if(strncmp(info->name, "4k2k60hz", 8) == 0){
 			cur_vmode = VMODE_4K2K_60HZ;
+		}else if(strncmp(info->name, "4k2k50hz", 8) == 0){
+			cur_vmode = VMODE_4K2K_50HZ;
 		}else{
 			cur_vmode = VMODE_1080P;
 			printk("the output mode is not support,use default mode!\n");
@@ -1471,6 +1502,8 @@ int __init outputmode_setup(char *s)
 	        cur_vmode = VMODE_1080P_50HZ;
 	}else  if(!strcmp(s,"4k2k60hz")){
 		cur_vmode = VMODE_4K2K_60HZ;
+	}else  if(!strcmp(s,"4k2k50hz")){
+		cur_vmode = VMODE_4K2K_50HZ;
 	}else  if(!strcmp(s,"720p")){
 		cur_vmode = VMODE_720P;
 	}else{
@@ -1478,7 +1511,7 @@ int __init outputmode_setup(char *s)
 		printk("the output mode is not support!\n");
 	}
 	printk("the output mode is %d\n",cur_vmode);
-	return 0;	
+	return 0;
 }
 __setup("vmode=",outputmode_setup) ;
 
diff --git a/drivers/amlogic/display/vout/vout_serve.c b/drivers/amlogic/display/vout/vout_serve.c
index 8aa1e1acabef..a642bb4bba8a 100755
--- a/drivers/amlogic/display/vout/vout_serve.c
+++ b/drivers/amlogic/display/vout/vout_serve.c
@@ -1,5 +1,5 @@
 /*************************************************************
- * Amlogic 
+ * Amlogic
  * vout  serve program
  *
  * Copyright (C) 2010 Amlogic, Inc.
@@ -19,8 +19,8 @@
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA
  *
  * Author:   jianfeng_wang@amlogic
- *		   
- *		   
+ *
+ *
  **************************************************************/
 #include <linux/version.h>
 #include <linux/module.h>
@@ -86,7 +86,7 @@ EXPORT_SYMBOL(get_power_level);
 
 /*****************************************************************
 **
-**	sysfs impletement part  
+**	sysfs impletement part
 **
 ******************************************************************/
 static  void   func_default_null(char  *str)
@@ -95,7 +95,7 @@ static  void   func_default_null(char  *str)
 }
 static   int* parse_para(char *para,char   *para_num)
 {
-	 static unsigned   int  buffer[MAX_NUMBER_PARA] ; 
+	 static unsigned   int  buffer[MAX_NUMBER_PARA] ;
 	 char  *endp ;
 	 int *pt=NULL;
 	 int len=0,count=0;
@@ -107,20 +107,20 @@ static   int* parse_para(char *para,char   *para_num)
 	endp=(char*)buffer;
 	do
 	{
-		//filter space out 
+		//filter space out
 		while(para && ( isspace(*para) || !isalnum(*para)) && len)
 		{
 			para++;
-			len --; 
+			len --;
 		}
 		if(len==0) break;
 		*pt++=simple_strtoul(para,&endp,0);
-		
+
 		para=endp;
 		len=strlen(para);
 	}while(endp && ++count<*para_num&&count<MAX_NUMBER_PARA) ;
 	*para_num=count;
-	
+
 	return  buffer;
 }
 
@@ -137,7 +137,7 @@ static  void  write_reg(char *para)
 }
 
 
-	
+
 #ifdef  CONFIG_PM
 static int  meson_vout_suspend(struct platform_device *pdev, pm_message_t state);
 static int  meson_vout_resume(struct platform_device *pdev);
@@ -157,9 +157,9 @@ static int want_hdmi_mode(vmode_t mode)
 		case VMODE_480I:
 		case VMODE_480I_RPT:
 		case VMODE_480P:
-#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION    
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		case VMODE_480P_59HZ:// for framerate automation 480p 59.94hz
-#endif   
+#endif
 		case VMODE_480P_RPT:
 		case VMODE_576I:
 		case VMODE_576I_RPT:
@@ -172,7 +172,7 @@ static int want_hdmi_mode(vmode_t mode)
 		case VMODE_1080I:
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		case VMODE_1080I_59HZ: // for framerate automation 1080i 59.94hz
-#endif   
+#endif
 		case VMODE_1080P:
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
 		case VMODE_1080P_59HZ: // for framerate automation 1080p 59.94hz
@@ -196,6 +196,7 @@ static int want_hdmi_mode(vmode_t mode)
 		case VMODE_4K2K_SMPTE:
 		case VMODE_4K2K_FAKE_5G:  // timing same as 4k2k30hz, Vsync from 30hz to 50hz
 		case VMODE_4K2K_60HZ:	  // timing same as 4k2k30hz, Vsync from 30hz to 60hz
+		case VMODE_4K2K_50HZ:	  // timing same as 4k2k30hz, Vsync from 30hz to 60hz
 		case VMODE_4K2K_5G:
 			ret=1;
 			break;
@@ -237,7 +238,7 @@ static  void  set_vout_mode(char * name)
 	if(VMODE_MAX==mode)
 	{
 		amlog_mask_level(LOG_MASK_PARA,LOG_LEVEL_HIGH,"no matched vout mode\n");
-		return ; 
+		return ;
 	}
 
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
@@ -274,14 +275,14 @@ void set_vout_mode_fr_auto(char* name)
 	if(VMODE_MAX==vmode)
 	{
 		amlog_mask_level(LOG_MASK_PARA,LOG_LEVEL_HIGH,"no matched vout mode\n");
-		return ; 
+		return ;
 	}
 	if(vmode==get_current_vmode())
 	{
 		amlog_mask_level(LOG_MASK_PARA,LOG_LEVEL_HIGH,"don't set the same mode as current.\n");
 		return ;
 	}
-	
+
 	update_vmode_status(name);
 
 	set_current_vmode(vmode);
@@ -300,17 +301,17 @@ char* get_vout_mode_internal(void)
 EXPORT_SYMBOL(get_vout_mode_internal);
 
 //axis type : 0x12  0x100 0x120 0x130
-static void  set_vout_window(char *para) 
+static void  set_vout_window(char *para)
 {
 #define   OSD_COUNT   2
 	static  disp_rect_t  disp_rect[OSD_COUNT];
-	char  count=OSD_COUNT*4;	
+	char  count=OSD_COUNT*4;
 	int   *pt=&disp_rect[0].x;
-	
+
 
 	//parse window para .
 	memcpy(pt,parse_para(para,&count),sizeof(disp_rect_t)*OSD_COUNT);
-	
+
 	if(count >=4 && count <8 )
 	{
 		disp_rect[1]=disp_rect[0] ;
@@ -322,13 +323,13 @@ static void  set_vout_window(char *para)
 
 /*****************************************************************
 **
-**	sysfs  declare part 
+**	sysfs  declare part
 **
 ******************************************************************/
 
 static  struct  class_attribute   *vout_attr[]={
 &class_vout_attr_enable,
-&class_vout_attr_mode,	
+&class_vout_attr_mode,
 &class_vout_attr_axis ,
 &class_vout_attr_wr_reg,
 &class_vout_attr_rd_reg,
@@ -390,7 +391,7 @@ static int  meson_vout_resume(struct platform_device *pdev)
     vout_resume(PM_EVENT_RESUME);
     return 0;
 }
-#endif 
+#endif
 
 #ifdef CONFIG_HIBERNATION
 static int  meson_vout_freeze(struct device *dev)
@@ -447,14 +448,14 @@ static void meson_vout_late_resume(struct early_suspend *h)
 
 /*****************************************************************
 **
-**	vout driver interface  
+**	vout driver interface
 **
 ******************************************************************/
-static int 
+static int
  meson_vout_probe(struct platform_device *pdev)
 {
 	int ret =-1;
-	
+
 	vout_info.base_class=NULL;
 	amlog_mask_level(LOG_MASK_INIT,LOG_LEVEL_HIGH,"start init vout module\n");
 #ifdef CONFIG_HAS_EARLYSUSPEND
@@ -488,14 +489,14 @@ static int
 #ifdef CONFIG_HAS_EARLYSUSPEND
     unregister_early_suspend(&early_suspend);
 #endif
-	
+
 	for(i=0;i<VOUT_ATTR_MAX;i++)
 	{
 		class_remove_file(vout_info.base_class,vout_attr[i]) ;
 	}
-		
+
 	class_destroy(vout_info.base_class);
-	
+
 	return 0;
 }
 
@@ -518,10 +519,10 @@ static struct platform_driver
 vout_driver = {
     .probe      = meson_vout_probe,
     .remove     = meson_vout_remove,
-#ifdef  CONFIG_PM      
+#ifdef  CONFIG_PM
     .suspend  =meson_vout_suspend,
     .resume    =meson_vout_resume,
-#endif    
+#endif
     .driver     = {
         .name   = "mesonvout",
         .of_match_table=meson_vout_dt_match,
@@ -533,20 +534,20 @@ vout_driver = {
 static int __init vout_init_module(void)
 {
 	int ret =0;
-    
+
     printk("%s\n", __func__);
-	if (platform_driver_register(&vout_driver)) 
+	if (platform_driver_register(&vout_driver))
 	{
        		amlog_level(LOG_LEVEL_HIGH,"failed to register osd driver\n");
         	ret= -ENODEV;
     	}
-	
+
 	return ret;
 
 }
 static __exit void vout_exit_module(void)
 {
-	
+
 	amlog_level(LOG_LEVEL_HIGH,"osd_remove_module.\n");
 
     	platform_driver_unregister(&vout_driver);
-- 
2.19.0

