From 1f3f0dbbaec8ea34de95ae8b667cbbd81a3784c5 Mon Sep 17 00:00:00 2001
From: Shi Liu <shi.liu@amlogic.com>
Date: Thu, 16 Apr 2015 11:21:29 +0800
Subject: [PATCH 5554/5965] PD#104382: mm: optimize mm core statistics
 parameter

Change-Id: I0c16edb73e118570783316aa69d1e19db8718179
---
 include/linux/vmstat.h |  2 +-
 mm/compaction.c        |  2 +-
 mm/page_alloc.c        | 29 ++++++++++++++++++-----------
 3 files changed, 20 insertions(+), 13 deletions(-)

diff --git a/include/linux/vmstat.h b/include/linux/vmstat.h
index 601c9f495207..071e5a2a2910 100644
--- a/include/linux/vmstat.h
+++ b/include/linux/vmstat.h
@@ -262,7 +262,7 @@ static inline void __mod_zone_freepage_state(struct zone *zone, int nr_pages,
 					     int migratetype)
 {
 	__mod_zone_page_state(zone, NR_FREE_PAGES, nr_pages);
-	if (is_migrate_cma(migratetype) || is_migrate_isolate(migratetype))
+	if (is_migrate_cma(migratetype))
 		__mod_zone_page_state(zone, NR_FREE_CMA_PAGES, nr_pages);
 }
 
diff --git a/mm/compaction.c b/mm/compaction.c
index 99ed413ebfd9..998e7be4fd26 100755
--- a/mm/compaction.c
+++ b/mm/compaction.c
@@ -349,7 +349,7 @@ unsigned long
 isolate_freepages_range(struct compact_control *cc,
 			unsigned long start_pfn, unsigned long end_pfn)
 {
-	unsigned long isolated, pfn, block_end_pfn;
+	unsigned long isolated = 0, pfn, block_end_pfn;
 	LIST_HEAD(freelist);
 
 	for (pfn = start_pfn; pfn < end_pfn; pfn += isolated) {
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 07731bef3997..3b78a20043bf 100755
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -584,7 +584,7 @@ static inline void __free_one_page(struct page *page,
 			list_del(&buddy->lru);
 			zone->free_area[order].nr_free--;
 			rmv_page_order(buddy);
-			if (is_migrate_cma(migratetype) || is_migrate_isolate(migratetype))
+			if (is_migrate_cma(get_pageblock_migratetype(buddy)))
 				zone->free_area[order].nr_free_cma--;
 		}
 		combined_idx = buddy_idx & page_idx;
@@ -618,7 +618,7 @@ static inline void __free_one_page(struct page *page,
 	list_add(&page->lru, &zone->free_area[order].free_list[migratetype]);
 out:
 	zone->free_area[order].nr_free++;
-	if (is_migrate_cma(migratetype) || is_migrate_isolate(migratetype))
+	if (is_migrate_cma(migratetype))
 		zone->free_area[order].nr_free_cma++;
 }
 
@@ -687,7 +687,7 @@ static void free_pcppages_bulk(struct zone *zone, int count,
 			page = list_entry(list->prev, struct page, lru);
 			/* must delete as __free_one_page list manipulates */
 			list_del(&page->lru);
-			mt = get_freepage_migratetype(page);
+			mt = get_pageblock_migratetype(page);
 			/* MIGRATE_MOVABLE list may include MIGRATE_RESERVEs */
 			__free_one_page(page, zone, 0, mt);
 			trace_mm_page_pcpu_drain(page, 0, mt);
@@ -850,7 +850,7 @@ static inline void expand(struct zone *zone, struct page *page,
 #endif
 		list_add(&page[size].lru, &area->free_list[migratetype]);
 		area->nr_free++;
-		if (is_migrate_cma(migratetype) || is_migrate_isolate(migratetype))
+		if (is_migrate_cma(migratetype))
 			area->nr_free_cma++;
 		set_page_order(&page[size], high);
 	}
@@ -924,7 +924,7 @@ struct page *__rmqueue_smallest(struct zone *zone, unsigned int order,
 		list_del(&page->lru);
 		rmv_page_order(page);
 		area->nr_free--;
-		if (is_migrate_cma(migratetype) || is_migrate_isolate(migratetype))
+		if (is_migrate_cma(migratetype))
 			area->nr_free_cma--;
 		expand(zone, page, order, current_order, area, migratetype);
 		return page;
@@ -994,6 +994,14 @@ int move_freepages(struct zone *zone,
 		order = page_order(page);
 		list_move(&page->lru,
 			  &zone->free_area[order].free_list[migratetype]);
+#ifdef CONFIG_CMA
+		if (migratetype == MIGRATE_ISOLATE) {
+			zone->free_area[order].nr_free_cma--;
+		}
+		if (migratetype == MIGRATE_CMA) {
+			zone->free_area[order].nr_free_cma++;
+		}
+#endif
 		set_freepage_migratetype(page, migratetype);
 		page += 1 << order;
 		pages_moved += 1 << order;
@@ -1067,7 +1075,7 @@ __rmqueue_fallback(struct zone *zone, int order, int start_migratetype)
 			page = list_entry(area->free_list[migratetype].next,
 					struct page, lru);
 			area->nr_free--;
-			if (is_migrate_cma(migratetype) || is_migrate_isolate(migratetype))
+			if (is_migrate_cma(migratetype))
 				area->nr_free_cma--;
 
 			/*
@@ -1228,11 +1236,11 @@ static int rmqueue_bulk(struct zone *zone, unsigned int order,
 		}
 		set_freepage_migratetype(page, mt);
 		list = &page->lru;
-		if (is_migrate_cma(mt) || is_migrate_isolate(mt))
+		if (is_migrate_cma(mt))
 			__mod_zone_page_state(zone, NR_FREE_CMA_PAGES,
 					      -(1 << order));
+		__mod_zone_page_state(zone, NR_FREE_PAGES, -(1 << order));
 	}
-	__mod_zone_page_state(zone, NR_FREE_PAGES, -(i << order));
 	spin_unlock(&zone->lock);
 	return i;
 }
@@ -1496,7 +1504,7 @@ static int __isolate_free_page(struct page *page, unsigned int order)
 	list_del(&page->lru);
 	zone->free_area[order].nr_free--;
 	rmv_page_order(page);
-	if (is_migrate_cma(mt) || is_migrate_isolate(mt))
+	if (is_migrate_cma(mt))
 		zone->free_area[order].nr_free_cma--;
 	/* Set the pageblock if the isolated page is at least a pageblock */
 	if (order >= pageblock_order - 1) {
@@ -6267,8 +6275,7 @@ __offline_isolated_pages(unsigned long start_pfn, unsigned long end_pfn)
 		list_del(&page->lru);
 		rmv_page_order(page);
 		zone->free_area[order].nr_free--;
-		if (is_migrate_cma(get_pageblock_migratetype(page)) ||
-		   is_migrate_isolate(get_pageblock_migratetype(page)))
+		if (is_migrate_cma(get_pageblock_migratetype(page)))
 			zone->free_area[order].nr_free_cma--;
 #ifdef CONFIG_HIGHMEM
 		if (PageHighMem(page))
-- 
2.19.0

