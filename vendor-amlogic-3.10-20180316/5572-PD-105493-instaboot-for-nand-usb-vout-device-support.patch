From eda052ba1b3a45b4e13a815cd6db23f70c51dcc4 Mon Sep 17 00:00:00 2001
From: Zhenfei Li <zhenfei.li@amlogic.com>
Date: Thu, 16 Apr 2015 17:17:18 +0800
Subject: [PATCH 5572/5965] PD#105493: instaboot: for nand/usb/vout device
 support.

Change-Id: I2d3f306d581ae25d608666349d564e6bbdd476ae
---
 arch/arm/plat-meson/Makefile                  |   1 +
 arch/arm/plat-meson/plat-hibernate.c          |  60 ++++++++++
 drivers/amlogic/Makefile                      |   2 +-
 drivers/amlogic/display/osd/osd_rdma.c        |   1 +
 drivers/amlogic/display/vout/enc_clk_config.c |   5 +
 drivers/amlogic/display/vout/vout_notify.c    |   9 ++
 drivers/amlogic/display/vout/vout_serve.c     |   5 +-
 drivers/amlogic/instaboot/Makefile            |   3 +-
 drivers/amlogic/instaboot/instaboot_kernel.c  | 108 ++++++++++++++----
 drivers/amlogic/usb/dwc_otg/310/dwc_otg_hcd.c |  25 +++-
 kernel/power/hibernate.c                      |   7 ++
 11 files changed, 197 insertions(+), 29 deletions(-)
 mode change 100755 => 100644 arch/arm/plat-meson/Makefile
 create mode 100644 arch/arm/plat-meson/plat-hibernate.c
 mode change 100755 => 100644 drivers/amlogic/display/vout/enc_clk_config.c
 mode change 100755 => 100644 drivers/amlogic/display/vout/vout_notify.c
 mode change 100755 => 100644 drivers/amlogic/display/vout/vout_serve.c
 mode change 100755 => 100644 drivers/amlogic/usb/dwc_otg/310/dwc_otg_hcd.c

diff --git a/arch/arm/plat-meson/Makefile b/arch/arm/plat-meson/Makefile
old mode 100755
new mode 100644
index ff62ca9b4f71..a14c09a5f3c7
--- a/arch/arm/plat-meson/Makefile
+++ b/arch/arm/plat-meson/Makefile
@@ -18,3 +18,4 @@ obj-$(CONFIG_ARM_GIC) +=gic-irq.o
 #obj-$(CONFIG_AM_FB_EXT) += plat_dev_fb_ext.o
 #obj-$(CONFIG_AML_HDMI_TX) +=plat_dev_hdmi.o
 obj-$(CONFIG_CPU_IDLE) +=plat-cpuidle.o
+obj-$(CONFIG_HIBERNATION) +=plat-hibernate.o
diff --git a/arch/arm/plat-meson/plat-hibernate.c b/arch/arm/plat-meson/plat-hibernate.c
new file mode 100644
index 000000000000..84db45dc46ae
--- /dev/null
+++ b/arch/arm/plat-meson/plat-hibernate.c
@@ -0,0 +1,60 @@
+/*
+ * arch/arm/plat-meson/plat-hibernate.c
+ *
+ * Copyright (C) 2015 Amlogic, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#include <linux/kernel.h>
+#include <mach/am_regs.h>
+
+typedef struct {
+	const unsigned int reg_addr;
+	unsigned int reg_val;
+} plat_reg_rcd_t;
+
+#define PLATE_REG_RECORD(_REG) \
+static plat_reg_rcd_t PLAT_RCD_##_REG = { \
+	.reg_addr = P_##_REG, \
+	.reg_val = 0, \
+}
+
+#define SAVE_PLAT_REG(_REG) \
+do { \
+PLAT_RCD_##_REG.reg_val = aml_read_reg32(P_##_REG); \
+} while(0)
+
+
+#define RESTORE_PLAT_REG(_REG) \
+do { \
+aml_write_reg32(PLAT_RCD_##_REG.reg_addr, PLAT_RCD_##_REG.reg_val); \
+} while(0);
+
+
+PLATE_REG_RECORD(ISA_TIMERD);
+PLATE_REG_RECORD(ISA_TIMER_MUX);
+
+void platform_reg_save(void)
+{
+	SAVE_PLAT_REG(ISA_TIMERD);
+	SAVE_PLAT_REG(ISA_TIMER_MUX);
+}
+
+void platform_reg_restore(void)
+{
+	RESTORE_PLAT_REG(ISA_TIMERD);
+	RESTORE_PLAT_REG(ISA_TIMER_MUX);
+}
\ No newline at end of file
diff --git a/drivers/amlogic/Makefile b/drivers/amlogic/Makefile
index 49f4fe0c3c85..97eeedbd3d92 100644
--- a/drivers/amlogic/Makefile
+++ b/drivers/amlogic/Makefile
@@ -131,7 +131,7 @@ endif
 
 obj-$(CONFIG_AMLOGIC_ION) += ion_dev/
 
-obj-$(CONFIG_HIBERNATION) += instaboot/
+obj-y += instaboot/
 
 obj-y += crypto/
 
diff --git a/drivers/amlogic/display/osd/osd_rdma.c b/drivers/amlogic/display/osd/osd_rdma.c
index c378fa1c594d..f0c9f44cf94c 100644
--- a/drivers/amlogic/display/osd/osd_rdma.c
+++ b/drivers/amlogic/display/osd/osd_rdma.c
@@ -268,6 +268,7 @@ int osd_rdma_enable(u32  enable)
 		msleep(10);
 	}
 	if (enable) {
+		reset_rdma_table();
 		aml_write_reg32(START_ADDR, table_paddr);
 		//enable then start it.
 		OSD_RDMA_STATUS_CLEAR_ALL;
diff --git a/drivers/amlogic/display/vout/enc_clk_config.c b/drivers/amlogic/display/vout/enc_clk_config.c
old mode 100755
new mode 100644
index 8441c8773ffc..9a2fddb02866
--- a/drivers/amlogic/display/vout/enc_clk_config.c
+++ b/drivers/amlogic/display/vout/enc_clk_config.c
@@ -447,17 +447,20 @@ static void set_hdmi_tx_pixel_div(unsigned div)
 {
     check_div();
     WRITE_CBUS_REG_BITS(HHI_HDMI_CLK_CNTL, div, 16, 4);
+    WRITE_CBUS_REG_BITS(HHI_VID_CLK_CNTL2, 1, 5, 1);
 }
 static void set_encp_div(unsigned div)
 {
     check_div();
     WRITE_CBUS_REG_BITS(HHI_VID_CLK_DIV, div, 24, 4);
+    WRITE_CBUS_REG_BITS(HHI_VID_CLK_CNTL2, 1, 2, 1);
 }
 
 static void set_enci_div(unsigned div)
 {
     check_div();
     WRITE_CBUS_REG_BITS(HHI_VID_CLK_DIV, div, 28, 4);
+    WRITE_CBUS_REG_BITS(HHI_VID_CLK_CNTL2, 1, 0, 1);
 }
 
 static void set_enct_div(unsigned div)
@@ -470,12 +473,14 @@ static void set_encl_div(unsigned div)
 {
     check_div();
     WRITE_CBUS_REG_BITS(HHI_VIID_CLK_DIV, div, 12, 4);
+    WRITE_CBUS_REG_BITS(HHI_VID_CLK_CNTL2, 1, 3, 1);
 }
 
 static void set_vdac0_div(unsigned div)
 {
     check_div();
     WRITE_CBUS_REG_BITS(HHI_VIID_CLK_DIV, div, 28, 4);
+    WRITE_CBUS_REG_BITS(HHI_VID_CLK_CNTL2, 1, 4, 1);
 }
 
 static void set_vdac1_div(unsigned div)
diff --git a/drivers/amlogic/display/vout/vout_notify.c b/drivers/amlogic/display/vout/vout_notify.c
old mode 100755
new mode 100644
index 006dca189195..42dda7efb4a9
--- a/drivers/amlogic/display/vout/vout_notify.c
+++ b/drivers/amlogic/display/vout/vout_notify.c
@@ -14,6 +14,9 @@
 #include <linux/delay.h>
 #include <linux/sched.h>
 
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+extern vmode_t mode_by_user;
+#endif
 
 static BLOCKING_NOTIFIER_HEAD(vout_notifier_list);
 static DEFINE_MUTEX(vout_mutex);
@@ -212,6 +215,12 @@ int set_current_vmode(vmode_t mode)
 			{
 				BUG_ON(vout_module.curr_vout_server->op.get_vinfo == NULL);
 				update_vout_mode_attr(vout_module.curr_vout_server->op.get_vinfo());
+#ifdef CONFIG_HIBERNATION
+#ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
+				if (VMODE_INIT_NULL == mode_by_user)
+					mode_by_user = mode;
+#endif /* CONFIG_AML_VOUT_FRAMERATE_AUTOMATION */
+#endif /* CONFIG_HIBERNATION */
 			}
 		}
 		else
diff --git a/drivers/amlogic/display/vout/vout_serve.c b/drivers/amlogic/display/vout/vout_serve.c
old mode 100755
new mode 100644
index a642bb4bba8a..8ae30f9698b0
--- a/drivers/amlogic/display/vout/vout_serve.c
+++ b/drivers/amlogic/display/vout/vout_serve.c
@@ -144,7 +144,7 @@ static int  meson_vout_resume(struct platform_device *pdev);
 #endif
 
 #ifdef CONFIG_AML_VOUT_FRAMERATE_AUTOMATION
-vmode_t mode_by_user = VMODE_INIT_NULL;
+__nosavedata vmode_t mode_by_user = VMODE_INIT_NULL;
 extern int fps_playing_flag;
 extern vmode_t fps_target_mode;
 extern char* get_name_from_vmode(vmode_t mode);
@@ -408,7 +408,10 @@ static int  meson_vout_thaw(struct device *dev)
 
 static int  meson_vout_restore(struct device *dev)
 {
+    vmode_t mode;
     vout_resume(PM_EVENT_RESTORE);
+    mode = get_current_vmode();
+    vout_notifier_call_chain(VOUT_EVENT_MODE_CHANGE, &mode);
     return 0;
 }
 #endif
diff --git a/drivers/amlogic/instaboot/Makefile b/drivers/amlogic/instaboot/Makefile
index 07501d6d9661..7759efbe6b0d 100644
--- a/drivers/amlogic/instaboot/Makefile
+++ b/drivers/amlogic/instaboot/Makefile
@@ -1 +1,2 @@
-obj-$(CONFIG_HIBERNATION) += instaboot_hook.o instaboot_kernel.o
\ No newline at end of file
+obj-y += instaboot_kernel.o
+obj-$(CONFIG_HIBERNATION) += instaboot_hook.o
\ No newline at end of file
diff --git a/drivers/amlogic/instaboot/instaboot_kernel.c b/drivers/amlogic/instaboot/instaboot_kernel.c
index a37a1eb93e28..a40f615b4466 100644
--- a/drivers/amlogic/instaboot/instaboot_kernel.c
+++ b/drivers/amlogic/instaboot/instaboot_kernel.c
@@ -3,6 +3,14 @@
 #include <linux/atomic.h>
 #include <linux/init.h>
 #include <linux/printk.h>
+#include <linux/list.h>
+#include <linux/slab.h>
+#include <asm/memory.h>
+
+static void* nftl_info_trans_buffer[3]  __nosavedata;
+EXPORT_SYMBOL(nftl_info_trans_buffer);
+
+#ifdef CONFIG_HIBERNATION
 
 atomic_t snapshot_device_available = ATOMIC_INIT(1);
 
@@ -76,7 +84,6 @@ EXPORT_SYMBOL(aml_bio_set_pages_dirty);
    in kernel booting process, acquire some memory for device probe,
    which will not be crush when recovery the instaboot image.
 */
-static int alloc_permission = 1;
 struct reserve_mem{
 	unsigned long long startaddr;
 	unsigned long long size;
@@ -95,47 +102,106 @@ struct reserve_mgr{
 	struct reserve_mem reserve[MAX_RESERVE_BLOCK];
 };
 
+struct mem_block {
+	struct list_head hook;
+	unsigned long start;
+	unsigned long end;
+};
+
+static LIST_HEAD(mem_list);
+
 extern struct reserve_mgr *get_reserve_mgr(void);
 extern unsigned long long get_reserve_base(void);
 
 void* aml_boot_alloc_mem(size_t size)
 {
-	phys_addr_t buf;
+	phys_addr_t buf = 0;
+	unsigned int page_num, blk_pfn_n;
+	struct mem_block* mem_blk;
+	unsigned long buf_pfn = 0;
+
+	page_num = (size + (1 << PAGE_SHIFT) - 1) >> PAGE_SHIFT;
+
+	list_for_each_entry(mem_blk, &mem_list, hook) {
+		blk_pfn_n = mem_blk->end - mem_blk->start;
+		if (page_num < blk_pfn_n) {
+			buf_pfn = mem_blk->start;
+			mem_blk->start += page_num;
+			break;
+		}
+	}
+	if (buf_pfn) {
+		buf = (phys_addr_t)pfn_to_kaddr(buf_pfn);
+	}
+	pr_info("alloc buf: 0x%x, size: %lu\n", buf, (unsigned long)size);
+	return (void*)buf;
+}
+EXPORT_SYMBOL(aml_boot_alloc_mem);
+
+static int regist_free_memblk(unsigned long start, unsigned long end)
+{
+	struct mem_block* mem_blk;
+	unsigned long s_pfn, e_pfn;
+
+	s_pfn = (start + (1 << PAGE_SHIFT) - 1) >> PAGE_SHIFT;
+	e_pfn = (end + (1 << PAGE_SHIFT) - 1) >> PAGE_SHIFT;
+	list_for_each_entry(mem_blk, &mem_list, hook) {
+		if (!mem_blk)
+			break;
+		if (s_pfn > mem_blk->end || e_pfn < mem_blk->start)
+			continue;
+		if (s_pfn <= mem_blk->start)
+			mem_blk->start = s_pfn;
+		if (e_pfn >= mem_blk->end)
+			mem_blk->end = e_pfn;
+		return 0;
+	}
+
+	mem_blk = kzalloc(sizeof(struct mem_block), GFP_KERNEL);
+	if (!mem_blk)
+		return -ENOMEM;
+
+	mem_blk->start = s_pfn;
+	mem_blk->end = e_pfn;
+
+	list_add(&mem_blk->hook, &mem_list);
+	/*pr_info("reg memblk: 0x%lx ~ 0x%lx\n", start, end);*/
+
+	return 0;
+}
+
+static int __init aml_boot_mem_init(void)
+{
 	struct reserve_mgr* rsv_mgr;
 	struct reserve_mem* prm;
-	unsigned long addr = 0;
+	unsigned long start = 0, end = 0;
 	int i;
 	unsigned long long base_addr;
 
-	if (!alloc_permission) {
-		pr_err("%s can only be useful in booting time\n", __FUNCTION__);
-		return NULL;
-	}
-
 	base_addr = get_reserve_base();
 
 	rsv_mgr = get_reserve_mgr();
 	if (!rsv_mgr)
-		return NULL;
+		return 0;
 
 	for (i = 0; i < rsv_mgr->count; i++) {
 		prm = &rsv_mgr->reserve[i];
-		if ((!(prm->flag & 2)) && prm->size > size) {
-			addr = (unsigned long)(prm->startaddr + base_addr);
-			break;
+		if ((!(prm->flag & 2))) {
+			start = (unsigned long)(prm->startaddr + base_addr);
+			end = (unsigned long)(prm->startaddr +
+					prm->size - 1 + base_addr);
+			regist_free_memblk(start, end);
 		}
 	}
 
-	buf = (phys_addr_t)phys_to_virt(addr);
-	/* pr_info("alloc nosave buffer: 0x%x\n", buf); */
-
-	return (void*)buf;
+	return 0;
 }
-EXPORT_SYMBOL(aml_boot_alloc_mem);
+core_initcall(aml_boot_mem_init);
 
-static int __init aml_boot_complete(void)
+#else
+void* aml_boot_alloc_mem(size_t size)
 {
-	alloc_permission = 0;
-	return 0;
+	return NULL;
 }
-late_initcall(aml_boot_complete);
\ No newline at end of file
+EXPORT_SYMBOL(aml_boot_alloc_mem);
+#endif /* CONFIG_HIBERNATION */
diff --git a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_hcd.c b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_hcd.c
old mode 100755
new mode 100644
index f52eba0303c3..1ce35dbdd195
--- a/drivers/amlogic/usb/dwc_otg/310/dwc_otg_hcd.c
+++ b/drivers/amlogic/usb/dwc_otg/310/dwc_otg_hcd.c
@@ -481,6 +481,21 @@ void dwc_otg_hcd_stop(dwc_otg_hcd_t * hcd)
 	dwc_mdelay(1);
 }
 
+void host_hibernation_restore(dwc_otg_hcd_t * hcd)
+{
+	hprt0_data_t hprt0 = {.d32 = 0 };
+
+	hprt0.d32 = DWC_READ_REG32(hcd->core_if->host_if->hprt0);
+	hprt0.b.prtpwr = 0;
+	DWC_WRITE_REG32(hcd->core_if->host_if->hprt0, hprt0.d32);
+
+	dwc_mdelay(1);
+
+	hprt0.d32 = DWC_READ_REG32(hcd->core_if->host_if->hprt0);
+	hprt0.b.prtpwr = 1;
+	DWC_WRITE_REG32(hcd->core_if->host_if->hprt0, hprt0.d32);
+
+}
 static void dwc_otg_hcd_power_save(dwc_otg_hcd_t * hcd, int power_on)
 {
 	usb_dbg_uart_data_t uart = {.d32 = 0 };
@@ -521,8 +536,7 @@ int dwc_otg_hcd_suspend(dwc_otg_hcd_t * hcd)
 	hcd->core_if->suspend_mode = 1;
 	DWC_DEBUGPL(DBG_HCD, "DWC OTG HCD SUSPEND\n");
 
-	if (!hcd->pm_freeze_flag)
-		dwc_otg_hcd_power_save(hcd, 0);
+	dwc_otg_hcd_power_save(hcd, 0);
 
  	return 0;
 }
@@ -542,9 +556,10 @@ int dwc_otg_hcd_resume(dwc_otg_hcd_t *hcd)
 
 	hcd->core_if->suspend_mode = 0;
 
-	if (!hcd->pm_freeze_flag)
-		dwc_otg_hcd_power_save(hcd, 1);
-	
+	dwc_otg_hcd_power_save(hcd, 1);
+	if (hcd->pm_freeze_flag) {
+		host_hibernation_restore(hcd);
+	}
 	return 0;
 }
 
diff --git a/kernel/power/hibernate.c b/kernel/power/hibernate.c
index 83209a115994..55273f45aa67 100644
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@ -330,6 +330,9 @@ static int create_image(int platform_mode)
 	return error;
 }
 
+extern void platform_reg_save(void);
+extern void platform_reg_restore(void);
+
 /**
  * hibernation_snapshot - Quiesce devices and create a hibernation image.
  * @platform_mode: If set, use platform driver to prepare for the transition.
@@ -369,6 +372,7 @@ int hibernation_snapshot(int platform_mode)
 		dpm_complete(PMSG_RECOVER);
 		goto Thaw;
 	}
+	platform_reg_save();
 
 	suspend_console();
 	ftrace_stop();
@@ -381,6 +385,9 @@ int hibernation_snapshot(int platform_mode)
 	else
 		error = create_image(platform_mode);
 
+	if (!in_suspend)
+		platform_reg_restore();
+
 	/*
 	 * In the case that we call create_image() above, the control
 	 * returns here (1) after the image has been created or the
-- 
2.19.0

