From 1fd157b07ee2deac9d366e8c0cda464fadf60f03 Mon Sep 17 00:00:00 2001
From: Tao Zeng <tao.zeng@amlogic.com>
Date: Tue, 28 Apr 2015 15:21:00 +0800
Subject: [PATCH 5586/5965] PD#105939: cec: add timer to check rx buffer.

CEC RX buffer will be full sometimes if there are multi-CEC devices
on bus. And IRQ will not generated if RX buffer is full. So software
need to check it manually.

Change-Id: I9145f0dc89b1b78ba15b2cb398729d1584c7bcf4
---
 .../mach-meson6/hdmi_tx_hw/hdmi_tx_cec_hw.c   |  5 +++
 .../mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c   | 33 ++++++++++--------
 .../mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c  | 34 +++++++++++--------
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c    | 19 +++++++++--
 include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h   |  1 +
 5 files changed, 60 insertions(+), 32 deletions(-)

diff --git a/arch/arm/mach-meson6/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson6/hdmi_tx_hw/hdmi_tx_cec_hw.c
index 96978a6be4e0..b4506611be0f 100755
--- a/arch/arm/mach-meson6/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson6/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -56,6 +56,11 @@ void cec_enable_irq(void)
     hdmi_print(INF, CEC "enable:int mask:0x%x\n", aml_read_reg32(P_SYS_CPU_0_IRQ_IN1_INTR_MASK));
 }
 
+void cec_rx_buf_clear(void)
+{
+
+}
+
 int cec_rx_buf_check(void)
 {
     // TODO
diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
index 56ab98fc30db..cc925aa505ad 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -66,19 +66,21 @@ void cec_hw_reset(void)
 
 }
 
+void cec_rx_buf_clear(void)
+{
+    aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x1);
+    aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x0);
+    hdmi_print(INF, CEC "rx buf clean\n");
+}
+
 int cec_rx_buf_check(void)
 {
     unsigned long rx_num_msg = aocec_rd_reg(CEC_RX_NUM_MSG);
 
-    hdmi_print(INF, CEC "rx msg num:0x%02x\n", rx_num_msg);
-    if (0xf == rx_num_msg)
-    {
-        aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x1);
-        aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x0);
-        hdmi_print(INF, CEC "rx buf clean\n");
-        return 1;
-    }
-    return 0;
+    if (rx_num_msg)
+        hdmi_print(INF, CEC "rx msg num:0x%02x\n", rx_num_msg);
+
+    return rx_num_msg;
 }
 
 int cec_ll_rx( unsigned char *msg, unsigned char *len)
@@ -86,10 +88,12 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
     int i;
     int ret = -1;
     int pos;
+    int rx_stat;
 
-    if ((RX_DONE != aocec_rd_reg(CEC_RX_MSG_STATUS)) || (1 != aocec_rd_reg(CEC_RX_NUM_MSG)))
+    rx_stat = aocec_rd_reg(CEC_RX_MSG_STATUS);
+    if ((RX_DONE != rx_stat) || (1 != aocec_rd_reg(CEC_RX_NUM_MSG)))
     {
-        //cec_rx_buf_check();
+        hdmi_print(INF, CEC, "rx status:%x\n", rx_stat);
         aml_write_reg32(P_AO_CEC_INTR_CLR, aml_read_reg32(P_AO_CEC_INTR_CLR) | (1 << 2));
         aocec_wr_reg(CEC_RX_MSG_CMD,  RX_ACK_CURRENT);
         aocec_wr_reg(CEC_RX_MSG_CMD,  RX_NO_OP);
@@ -103,12 +107,13 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
         msg[i]= aocec_rd_reg(CEC_RX_MSG_0_HEADER +i);
     }
 
-    ret = aocec_rd_reg(CEC_RX_MSG_STATUS);
+    ret = rx_stat;
 
     if (cec_msg_dbg_en  == 1)
     {
         pos = 0;
-        pos += sprintf(msg_log_buf + pos, "CEC: rx msg len: %d   dat: ", *len);
+        pos += sprintf(msg_log_buf + pos, "CEC[%d]: rx msg len: %d   dat: ",
+                       cec_global_info.my_node_index, *len);
         for (i = 0; i < (*len); i++)
         {
             pos += sprintf(msg_log_buf + pos, "%02x ", msg[i]);
@@ -120,7 +125,7 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
 
     //cec_rx_buf_check();
     aml_write_reg32(P_AO_CEC_INTR_CLR, aml_read_reg32(P_AO_CEC_INTR_CLR) | (1 << 2));
-    aocec_wr_reg(CEC_RX_MSG_CMD,  RX_ACK_CURRENT);
+    aocec_wr_reg(CEC_RX_MSG_CMD, RX_ACK_NEXT);
     aocec_wr_reg(CEC_RX_MSG_CMD, RX_NO_OP);
     //aml_write_reg32(P_AO_CEC_INTR_CLR, aml_read_reg32(P_AO_CEC_INTR_CLR) | (1 << 2));
 
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
index b779ede2fe37..ffa7e5bcfc15 100755
--- a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -91,19 +91,21 @@ void cec_hw_reset(void)
 
 }
 
+void cec_rx_buf_clear(void)
+{
+    aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x1);
+    aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x0);
+    hdmi_print(INF, CEC "rx buf clean\n");
+}
+
 int cec_rx_buf_check(void)
 {
     unsigned long rx_num_msg = aocec_rd_reg(CEC_RX_NUM_MSG);
 
-    hdmi_print(INF, CEC "rx msg num:0x%02x\n", rx_num_msg);
-    if (0xf == rx_num_msg)
-    {
-        aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x1);
-        aocec_wr_reg(CEC_RX_CLEAR_BUF, 0x0);
-        hdmi_print(INF, CEC "rx buf clean\n");
-        return 1;
-    }
-    return 0;
+    if (rx_num_msg)
+        hdmi_print(INF, CEC "rx msg num:0x%02x\n", rx_num_msg);
+
+    return rx_num_msg;
 }
 
 int cec_ll_rx( unsigned char *msg, unsigned char *len)
@@ -111,10 +113,12 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
     int i;
     int ret = -1;
     int pos;
+    int rx_stat;
 
-    if ((RX_DONE != aocec_rd_reg(CEC_RX_MSG_STATUS)) || (1 != aocec_rd_reg(CEC_RX_NUM_MSG)))
+    rx_stat = aocec_rd_reg(CEC_RX_MSG_STATUS);
+    if ((RX_DONE != rx_stat) || (1 != aocec_rd_reg(CEC_RX_NUM_MSG)))
     {
-        //cec_rx_buf_check();
+        hdmi_print(INF, CEC, "rx status:%x\n", rx_stat);
         aml_write_reg32(P_AO_CEC_INTR_CLR, aml_read_reg32(P_AO_CEC_INTR_CLR) | (1 << 2));
         aocec_wr_reg(CEC_RX_MSG_CMD,  RX_ACK_CURRENT);
         aocec_wr_reg(CEC_RX_MSG_CMD,  RX_NO_OP);
@@ -122,18 +126,18 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
     }
 
     *len = aocec_rd_reg(CEC_RX_MSG_LENGTH) + 1;
-printk("--------------rx start::\n");
     for (i = 0; i < (*len) && i < MAX_MSG; i++)
     {
         msg[i]= aocec_rd_reg(CEC_RX_MSG_0_HEADER +i);
     }
 
-    ret = aocec_rd_reg(CEC_RX_MSG_STATUS);
+    ret = rx_stat;
 
     if (cec_msg_dbg_en  == 1)
     {
         pos = 0;
-        pos += sprintf(msg_log_buf + pos, "CEC: rx msg len: %d   dat: ", *len);
+        pos += sprintf(msg_log_buf + pos, "CEC[%d]: rx msg len: %d   dat: ",
+                       cec_global_info.my_node_index, *len);
         for (i = 0; i < (*len); i++)
         {
             pos += sprintf(msg_log_buf + pos, "%02x ", msg[i]);
@@ -145,7 +149,7 @@ printk("--------------rx start::\n");
 
     //cec_rx_buf_check();
     aml_write_reg32(P_AO_CEC_INTR_CLR, aml_read_reg32(P_AO_CEC_INTR_CLR) | (1 << 2));
-    aocec_wr_reg(CEC_RX_MSG_CMD,  RX_ACK_CURRENT);
+    aocec_wr_reg(CEC_RX_MSG_CMD, RX_ACK_NEXT);
     aocec_wr_reg(CEC_RX_MSG_CMD, RX_NO_OP);
 
     return ret;
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
index 9677618f7648..0922a50ea38c 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
@@ -140,7 +140,9 @@ static void hdmitx_cec_early_suspend(struct early_suspend *h)
 static void hdmitx_cec_late_resume(struct early_suspend *h)
 {
     cec_enable_irq();
-    cec_rx_buf_check();
+    if (cec_rx_buf_check()) {
+        cec_rx_buf_clear();
+    }
     hdmitx_device->hpd_state = hdmitx_device->HWOp.CntlMisc(hdmitx_device, MISC_HPD_GPI_ST, 0);
     if (!hdmitx_device->hpd_state)
     { //if none HDMI out,no CEC features.
@@ -391,6 +393,15 @@ static enum hrtimer_restart cec_late_check_rx_buffer(struct hrtimer *timer)
         /*
          * start another check if rx buffer is full
          */
+        if ((-1) == cec_ll_rx(rx_msg, &rx_len)) {
+            hdmi_print(INF, CEC, "buffer got unrecorgnized msg\n");
+            cec_rx_buf_clear();
+        } else {
+            register_cec_rx_msg(rx_msg, rx_len);
+            queue_work(cec_workqueue, &hdmitx_device->cec_work);
+        }
+    }
+    if (hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)) {
         hrtimer_start(&cec_late_timer, ktime_set(0, 384*1000*1000), HRTIMER_MODE_REL);
     }
 
@@ -422,8 +433,10 @@ static void cec_task(struct work_struct *work)
     if (!hdmitx_device->hpd_state) {
         hdp_status = 0;
     }
-    /* start timer for late cec rx buffer check */
-    hrtimer_start(&cec_late_timer, ktime_set(0, 384*1000*1000), HRTIMER_MODE_REL);
+    if (hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)) {
+        /* start timer for late cec rx buffer check */
+        hrtimer_start(&cec_late_timer, ktime_set(0, 384*1000*1000), HRTIMER_MODE_REL);
+    }
 }
 
 /***************************** cec low level code end *****************************/
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h b/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h
index 5cb9ab24f44e..5b72518eae52 100755
--- a/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h
@@ -535,6 +535,7 @@ void dumpaocecreg(void);
 void raocec(unsigned int addr);
 void waocec(unsigned int addr, unsigned int value);
 int cec_rx_buf_check(void);
+void cec_rx_buf_clear(void);
 void cec_hw_reset(void);
 
 unsigned int dispatch_buffer_parse(const char *buf, const char *string,  char *param, size_t count);
-- 
2.19.0

