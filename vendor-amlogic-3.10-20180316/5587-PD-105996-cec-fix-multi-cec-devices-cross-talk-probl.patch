From c2b2180960475ee02b36e8c4abc1aa2c2e89c66a Mon Sep 17 00:00:00 2001
From: Tao Zeng <tao.zeng@amlogic.com>
Date: Wed, 29 Apr 2015 15:48:37 +0800
Subject: [PATCH 5587/5965] PD#105996: cec: fix multi cec devices cross-talk
 problem

1. use high 16bit of P_AO_DEBUG_REG1 to store kernel CEC
   logical address so uboot can use it.
2. Add retry mechanism of CEC logical address allocating
   when boot if CEC bus is busy

Change-Id: I299623b62117f4654d8c499227e7ae9405537a5f
---
 .../mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c   | 43 +++++++++++--------
 .../mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c  | 43 +++++++++++--------
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c    | 12 +++++-
 3 files changed, 61 insertions(+), 37 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
index cc925aa505ad..24575ad1f8b8 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -196,16 +196,12 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     unsigned int n;
     unsigned int j = 30;
     int pos;
+    unsigned tx_stat;
 
-    while ( (aocec_rd_reg(CEC_TX_MSG_STATUS) || aocec_rd_reg(CEC_RX_MSG_STATUS)) && j)
-    {
-        if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS))
-        {
-            if (cec_msg_dbg_en  == 1)
-                hdmi_print(INF, CEC "tx polling:tx error!.\n");
-            //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
-            aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
-            //cec_hw_reset();
+    while (1) {
+        tx_stat = aocec_rd_reg(CEC_TX_MSG_STATUS);
+        hdmi_print(INF, CEC "tx_stat:%x\n", tx_stat);
+        if (tx_stat != TX_BUSY) {
             break;
         }
         if (!(j--))
@@ -219,6 +215,13 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
         msleep(5);
     }
 
+    if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS)) {
+        if (cec_msg_dbg_en  == 1)
+            hdmi_print(INF, CEC "tx polling:tx error!.\n");
+        //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+        aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+        //cec_hw_reset();
+    }
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x0, 1, 1);
     for (i = 0; i < len; i++)
     {
@@ -236,11 +239,8 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     }
 
     ret = aocec_rd_reg(CEC_TX_MSG_STATUS);
+    hdmi_print(INF, CEC "tx_stat:%x\n", ret);
 
-    if (ret == TX_DONE)
-        ret = 1;
-    else
-        ret = 0;
     aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 1, 1, 1);
 
@@ -311,6 +311,7 @@ void cec_polling_online_dev(int log_addr, int *bool)
 {
     unsigned long r;
     unsigned char msg[1];
+    int retry = 5;
 
     cec_global_info.my_node_index = log_addr;
     msg[0] = (log_addr<<4) | log_addr;
@@ -318,15 +319,21 @@ void cec_polling_online_dev(int log_addr, int *bool)
     aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | 0xf);
     if (cec_msg_dbg_en  == 1)
         hdmi_print(INF, CEC "CEC_LOGICAL_ADDR0:0x%lx\n",aocec_rd_reg(CEC_LOGICAL_ADDR0));
-    r = cec_ll_tx_polling(msg, 1);
+    while (retry) {
+        r = cec_ll_tx_polling(msg, 1);
+        if (r == TX_BUSY) {
+            retry--;
+            hdmi_print(INF, CEC "try log addr %x busy, retry:%d\n", log_addr, retry);
+        } else {
+            break;
+        }
+    }
     cec_hw_reset();
 
-    if (r == 0)
+    if (r == TX_ERROR)
     {
         *bool = 0;
-    }
-    else
-    {
+    } else if (r == TX_DONE) {
         memset(&(cec_global_info.cec_node_info[log_addr]), 0, sizeof(cec_node_info_t));
         cec_global_info.cec_node_info[log_addr].dev_type = cec_log_addr_to_dev_type(log_addr);
         *bool = 1;
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
index ffa7e5bcfc15..c4d832e92a99 100755
--- a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -219,16 +219,12 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     unsigned int n;
     unsigned int j = 30;
     int pos;
+    unsigned tx_stat;
 
-    while ( (aocec_rd_reg(CEC_TX_MSG_STATUS) || aocec_rd_reg(CEC_RX_MSG_STATUS)) && j)
-    {
-        if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS))
-        {
-            if (cec_msg_dbg_en  == 1)
-                hdmi_print(INF, CEC "tx polling:tx error!.\n");
-            //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
-            aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
-            //cec_hw_reset();
+    while (1) {
+        tx_stat = aocec_rd_reg(CEC_TX_MSG_STATUS);
+        hdmi_print(INF, CEC "tx_stat:%x\n", tx_stat);
+        if (tx_stat != TX_BUSY) {
             break;
         }
         if (!(j--))
@@ -242,6 +238,13 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
         msleep(5);
     }
 
+    if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS)) {
+        if (cec_msg_dbg_en  == 1)
+            hdmi_print(INF, CEC "tx polling:tx error!.\n");
+        //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+        aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
+        //cec_hw_reset();
+    }
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x0, 1, 1);
     for (i = 0; i < len; i++)
     {
@@ -259,11 +262,8 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     }
 
     ret = aocec_rd_reg(CEC_TX_MSG_STATUS);
+    hdmi_print(INF, CEC "tx_stat:%x\n", ret);
 
-    if (ret == TX_DONE)
-        ret = 1;
-    else
-        ret = 0;
     aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 1, 1, 1);
 
@@ -334,6 +334,7 @@ void cec_polling_online_dev(int log_addr, int *bool)
 {
     unsigned long r;
     unsigned char msg[1];
+    int retry = 5;
 
     cec_global_info.my_node_index = log_addr;
     msg[0] = (log_addr<<4) | log_addr;
@@ -341,15 +342,21 @@ void cec_polling_online_dev(int log_addr, int *bool)
     aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | 0xf);
     if (cec_msg_dbg_en  == 1)
         hdmi_print(INF, CEC "CEC_LOGICAL_ADDR0:0x%lx\n",aocec_rd_reg(CEC_LOGICAL_ADDR0));
-    r = cec_ll_tx_polling(msg, 1);
+    while (retry) {
+        r = cec_ll_tx_polling(msg, 1);
+        if (r == TX_BUSY) {
+            retry--;
+            hdmi_print(INF, CEC "try log addr %x busy, retry:%d\n", log_addr, retry);
+        } else {
+            break;
+        }
+    }
     cec_hw_reset();
 
-    if (r == 0)
+    if (r == TX_ERROR)
     {
         *bool = 0;
-    }
-    else
-    {
+    } else if (r == TX_DONE) {
         memset(&(cec_global_info.cec_node_info[log_addr]), 0, sizeof(cec_node_info_t));
         cec_global_info.cec_node_info[log_addr].dev_type = cec_log_addr_to_dev_type(log_addr);
         *bool = 1;
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
index 0922a50ea38c..0b6610d84d3a 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
@@ -202,7 +202,8 @@ static int detect_tv_support_cec(unsigned addr)
     ret = cec_ll_tx_polling(msg, 1);
     cec_hw_reset();
     hdmi_print(INF, CEC "tv%s have CEC feature\n", ret ? " " : " don\'t ");
-    return (hdmitx_device->tv_cec_support = ret);
+    hdmitx_device->tv_cec_support = (ret == TX_DONE) ? 1 : 0;
+    return hdmitx_device->tv_cec_support;
 }
 
 void cec_node_init(hdmitx_dev_t* hdmitx_device)
@@ -216,6 +217,7 @@ void cec_node_init(hdmitx_dev_t* hdmitx_device)
                                                    };
 
     unsigned long cec_phy_addr;
+    unsigned int reg;
 
     if ((hdmitx_device->cec_init_ready == 0) || (hdmitx_device->hpd_state == 0))
     {   // If no connect, return directly
@@ -316,6 +318,14 @@ void cec_node_init(hdmitx_dev_t* hdmitx_device)
 
             cec_global_info.cec_node_info[cec_global_info.my_node_index].power_status = TRANS_STANDBY_TO_ON;
             cec_global_info.my_node_index = player_dev[i];
+            /*
+             * use DEBUG_REG1 bit 16 ~ 31 to save logic address.
+             * So uboot can use this logic address directly
+             */
+            reg  = (aml_read_reg32(P_AO_DEBUG_REG1) & 0xffff);
+            reg |= player_dev[i] << 16;
+            aml_write_reg32(P_AO_DEBUG_REG1, reg);
+
             aml_write_reg32(P_AO_DEBUG_REG3, aml_read_reg32(P_AO_DEBUG_REG3) | (cec_global_info.my_node_index & 0xf));
             cec_global_info.cec_node_info[player_dev[i]].log_addr = player_dev[i];
             // Set Physical address
-- 
2.19.0

