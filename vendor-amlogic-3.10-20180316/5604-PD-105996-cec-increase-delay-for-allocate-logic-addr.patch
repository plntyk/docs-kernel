From c0da060b7455209de4d7c6c35d93f6373316e79d Mon Sep 17 00:00:00 2001
From: Tao Zeng <tao.zeng@amlogic.com>
Date: Mon, 11 May 2015 15:19:45 +0800
Subject: [PATCH 5604/5965] PD#105996: cec: increase delay for allocate logic
 address

1. increase delay for polling Logical address;
2. try to reset CEC hw if detect tx is always busy;
3. change code-logic of delay a long time for CEC node init;

Change-Id: If8243a0a131cbf8bc840894abf641437a0605d53
---
 .../mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c   | 52 +++++++++++++------
 .../mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c  | 52 +++++++++++++------
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c    |  7 ++-
 3 files changed, 75 insertions(+), 36 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
index 24575ad1f8b8..1c8d41db9474 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -194,13 +194,21 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     int i;
     unsigned int ret = 0xf;
     unsigned int n;
-    unsigned int j = 30;
+    unsigned int j = 50;
     int pos;
     unsigned tx_stat;
+    int flag = 0;
 
+    /*
+     * wait until tx is free
+     */
     while (1) {
         tx_stat = aocec_rd_reg(CEC_TX_MSG_STATUS);
-        hdmi_print(INF, CEC "tx_stat:%x\n", tx_stat);
+        if (!flag && tx_stat == TX_BUSY) {
+            hdmi_print(INF, CEC "tx_stat is busy, waiting free...\n");
+            aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+            flag = 1;
+        }
         if (tx_stat != TX_BUSY) {
             break;
         }
@@ -208,19 +216,21 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
         {
             if (cec_msg_dbg_en  == 1)
                 hdmi_print(INF, CEC "tx busy time out.\n");
-            aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+            //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
             aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
             break;
         }
         msleep(5);
     }
 
-    if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS)) {
-        if (cec_msg_dbg_en  == 1)
-            hdmi_print(INF, CEC "tx polling:tx error!.\n");
+    hdmi_print(INF, CEC "now tx_stat:%d\n", tx_stat);
+    if (TX_ERROR == tx_stat) {
+        hdmi_print(INF, CEC "tx polling:tx error!.\n");
         //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
         aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
         //cec_hw_reset();
+    } else if (TX_BUSY == tx_stat) {
+        return TX_BUSY;
     }
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x0, 1, 1);
     for (i = 0; i < len; i++)
@@ -230,16 +240,22 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     aocec_wr_reg(CEC_TX_MSG_LENGTH, len-1);
     aocec_wr_reg(CEC_TX_MSG_CMD, RX_ACK_CURRENT);
 
-    j = 30;
-    while ((TX_DONE != aocec_rd_reg(CEC_TX_MSG_STATUS)) && (j--))
-    {
-        if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS))
+    j = 50;
+    hdmi_print(INF, CEC "start poll\n");
+    while (j--) {
+        ret = aocec_rd_reg(CEC_TX_MSG_STATUS);
+        if (ret != TX_BUSY) {
             break;
+        }
         msleep(5);
     }
 
     ret = aocec_rd_reg(CEC_TX_MSG_STATUS);
-    hdmi_print(INF, CEC "tx_stat:%x\n", ret);
+    hdmi_print(INF, CEC "end poll, tx_stat:%x\n", ret);
+    if (ret == TX_BUSY) {
+        hdmi_print(INF, CEC "tx busy timeout\n");
+        aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+    }
 
     aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 1, 1, 1);
@@ -252,9 +268,8 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
         {
             pos += sprintf(msg_log_buf + pos, "%02x ", msg[n]);
         }
-        pos += sprintf(msg_log_buf + pos, "\nCEC: tx state: %d\n", ret);
         msg_log_buf[pos] = '\0';
-        printk("%s", msg_log_buf);
+        printk("%s\n", msg_log_buf);
     }
     return ret;
 }
@@ -309,7 +324,7 @@ int cec_ll_tx(const unsigned char *msg, unsigned char len)
 
 void cec_polling_online_dev(int log_addr, int *bool)
 {
-    unsigned long r;
+    unsigned int r;
     unsigned char msg[1];
     int retry = 5;
 
@@ -324,14 +339,17 @@ void cec_polling_online_dev(int log_addr, int *bool)
         if (r == TX_BUSY) {
             retry--;
             hdmi_print(INF, CEC "try log addr %x busy, retry:%d\n", log_addr, retry);
+            /*
+             * try to reset CEC if tx busy is found
+             */
+            cec_hw_reset();
         } else {
             break;
         }
     }
-    cec_hw_reset();
+//    cec_hw_reset();
 
-    if (r == TX_ERROR)
-    {
+    if (r == TX_ERROR) {
         *bool = 0;
     } else if (r == TX_DONE) {
         memset(&(cec_global_info.cec_node_info[log_addr]), 0, sizeof(cec_node_info_t));
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
index c4d832e92a99..8e7e4effd01d 100755
--- a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -217,13 +217,21 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     int i;
     unsigned int ret = 0xf;
     unsigned int n;
-    unsigned int j = 30;
+    unsigned int j = 50;
     int pos;
     unsigned tx_stat;
+    int flag = 0;
 
+    /*
+     * wait until tx is free
+     */
     while (1) {
         tx_stat = aocec_rd_reg(CEC_TX_MSG_STATUS);
-        hdmi_print(INF, CEC "tx_stat:%x\n", tx_stat);
+        if (!flag && tx_stat == TX_BUSY) {
+            hdmi_print(INF, CEC "tx_stat is busy, waiting free...\n");
+            aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+            flag = 1;
+        }
         if (tx_stat != TX_BUSY) {
             break;
         }
@@ -231,19 +239,21 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
         {
             if (cec_msg_dbg_en  == 1)
                 hdmi_print(INF, CEC "tx busy time out.\n");
-            aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+            //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
             aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
             break;
         }
         msleep(5);
     }
 
-    if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS)) {
-        if (cec_msg_dbg_en  == 1)
-            hdmi_print(INF, CEC "tx polling:tx error!.\n");
+    hdmi_print(INF, CEC "now tx_stat:%d\n", tx_stat);
+    if (TX_ERROR == tx_stat) {
+        hdmi_print(INF, CEC "tx polling:tx error!.\n");
         //aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
         aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
         //cec_hw_reset();
+    } else if (TX_BUSY == tx_stat) {
+        return TX_BUSY;
     }
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 0x0, 1, 1);
     for (i = 0; i < len; i++)
@@ -253,16 +263,22 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
     aocec_wr_reg(CEC_TX_MSG_LENGTH, len-1);
     aocec_wr_reg(CEC_TX_MSG_CMD, RX_ACK_CURRENT);
 
-    j = 30;
-    while ((TX_DONE != aocec_rd_reg(CEC_TX_MSG_STATUS)) && (j--))
-    {
-        if (TX_ERROR == aocec_rd_reg(CEC_TX_MSG_STATUS))
+    j = 50;
+    hdmi_print(INF, CEC "start poll\n");
+    while (j--) {
+        ret = aocec_rd_reg(CEC_TX_MSG_STATUS);
+        if (ret != TX_BUSY) {
             break;
+        }
         msleep(5);
     }
 
     ret = aocec_rd_reg(CEC_TX_MSG_STATUS);
-    hdmi_print(INF, CEC "tx_stat:%x\n", ret);
+    hdmi_print(INF, CEC "end poll, tx_stat:%x\n", ret);
+    if (ret == TX_BUSY) {
+        hdmi_print(INF, CEC "tx busy timeout\n");
+        aocec_wr_reg(CEC_TX_MSG_CMD, TX_ABORT);
+    }
 
     aocec_wr_reg(CEC_TX_MSG_CMD, TX_NO_OP);
     aml_set_reg32_bits(P_AO_CEC_INTR_MASKN, 1, 1, 1);
@@ -275,9 +291,8 @@ int cec_ll_tx_polling(const unsigned char *msg, unsigned char len)
         {
             pos += sprintf(msg_log_buf + pos, "%02x ", msg[n]);
         }
-        pos += sprintf(msg_log_buf + pos, "\nCEC: tx state: %d\n", ret);
         msg_log_buf[pos] = '\0';
-        printk("%s", msg_log_buf);
+        printk("%s\n", msg_log_buf);
     }
     return ret;
 }
@@ -332,7 +347,7 @@ int cec_ll_tx(const unsigned char *msg, unsigned char len)
 
 void cec_polling_online_dev(int log_addr, int *bool)
 {
-    unsigned long r;
+    unsigned int r;
     unsigned char msg[1];
     int retry = 5;
 
@@ -347,14 +362,17 @@ void cec_polling_online_dev(int log_addr, int *bool)
         if (r == TX_BUSY) {
             retry--;
             hdmi_print(INF, CEC "try log addr %x busy, retry:%d\n", log_addr, retry);
+            /*
+             * try to reset CEC if tx busy is found
+             */
+            cec_hw_reset();
         } else {
             break;
         }
     }
-    cec_hw_reset();
+//    cec_hw_reset();
 
-    if (r == TX_ERROR)
-    {
+    if (r == TX_ERROR) {
         *bool = 0;
     } else if (r == TX_DONE) {
         memset(&(cec_global_info.cec_node_info[log_addr]), 0, sizeof(cec_node_info_t));
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
index 0b6610d84d3a..b660c696a2da 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
@@ -423,14 +423,16 @@ static void cec_task(struct work_struct *work)
     extern void dump_hdmi_cec_reg(void);
     static int hdp_status = 0;
     hdmitx_dev_t* hdmitx_device = (hdmitx_dev_t*)container_of(work, hdmitx_dev_t, cec_work);
-    cec_global_info.cec_flag.cec_init_flag = 1;
 
     // Get logical address
     hdmi_print(INF, CEC "CEC task process\n");
     if (hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK) &&
        (hdmitx_device->hpd_state && !hdp_status))
     {
-        msleep_interruptible(15000);
+        if (cec_global_info.cec_flag.cec_init_flag == 0) {
+            msleep_interruptible(15000);
+            cec_global_info.cec_flag.cec_init_flag = 1;
+        }
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
         cec_gpi_init();
 #endif
@@ -1782,6 +1784,7 @@ static int __init cec_init(void)
 #endif
 
     hdmitx_device->cec_init_ready = 1;
+    cec_global_info.cec_flag.cec_init_flag = 0;
     hdmi_print(INF, CEC "hdmitx_device->cec_init_ready:0x%x", hdmitx_device->cec_init_ready);
     queue_work(cec_workqueue, &hdmitx_device->cec_work);    // for init
     return 0;
-- 
2.19.0

