From c847434d58df5439579e4a5d260941ffe5d02293 Mon Sep 17 00:00:00 2001
From: Bo Yang <bo.yang@amlogic.com>
Date: Fri, 22 May 2015 13:44:19 +0800
Subject: [PATCH 5614/5965] PD#106532: backlight: add new backlight support for
 g9tv, g9bb

set backlight:
echo 200 > /sys/class/backlight/aml-bl/brightness

power off
echo 1 > /sys/class/backlight/aml-bl/bl_power

power on
echo 0 > /sys/class/backlight/aml-bl/bl_power

lcd sequence when system power on/off are done in uboot.

Change-Id: I5f3560a18a79a8f4bc89287760c2871ad10333c8
---
 arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd  |  35 +-
 arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd  |  37 +-
 arch/arm/configs/mesong9bb_defconfig          |   2 +-
 arch/arm/configs/mesong9tv_defconfig          |   3 +-
 drivers/amlogic/display/backlight/Kconfig     |  22 +-
 drivers/amlogic/display/backlight/Makefile    |   2 +
 drivers/amlogic/display/backlight/aml_tv_bl.c | 581 ++++++++++++++++++
 drivers/amlogic/display/backlight/aml_tv_bl.h |  91 +++
 8 files changed, 744 insertions(+), 29 deletions(-)
 create mode 100644 drivers/amlogic/display/backlight/aml_tv_bl.c
 create mode 100644 drivers/amlogic/display/backlight/aml_tv_bl.h

diff --git a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
index 735272229268..6b08352b57cc 100644
--- a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
@@ -717,15 +717,25 @@
 		delay_setting = <500 50 20 20 50 0 0 200>;  /** CLK ON/OFF,PWM ON/OFF,PANEL_PWR ON/OFF,BL ON/OFF delay */
 	};
 
-	backlight{
+	backlight {
 		compatible = "amlogic,backlight";
 		dev_name = "backlight";
 		status = "okay";
-//		power_pin = "GPIOX_2";
-		pwm_hz = <160>;   /* Hz */
-//		pinctrl-names = "pwm_a","pwm_vs";
-//		pinctrl-0 = <&lcd_bl_pwm_a_pins>;	/* pwma pinmux */
-//		pinctrl-1 = <&lcd_bl_pwm_vs_pins>;	/* pwm_vs pinmux */
+		bl_en_gpio = "GPIOY_6";
+		bl_en_on = <0>; /** 1=output high, 0=output low **/
+		bl_pwm_port = "PWM_B";
+		pwm_positive = <0>; /* 1: positive 0: negative */
+
+		pinctrl-names = "default";
+		pinctrl-0 = <&aml_bl_pwm_pins>;
+
+		bl_level_default_uboot = <100>;
+		bl_level_default_kernel = <100>;
+		bl_level_max_min = <255 10>;
+		bl_power_on_delay = <200>;  /* unit: ms */
+		bl_power_off_delay = <200>; /* unit: ms */
+		bl_pwm_freq = <1000>;
+		bl_pwm_duty_max_min = <100 25>; /* 100% - 25%*/
 	};
 
 
@@ -1267,6 +1277,19 @@
 			amlogic,pins = "GPIOY_8";
 		};
 
+		//$$ MATCH "aml_bl_pwm_pin_match" = "&aml_bl_pwm_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		aml_bl_pwm_pins:bl_pwm_pins {
+			amlogic,setmask = <9  0x02000000>;
+			amlogic,clrmask = <3  0x00000020
+					   5  0x04000000
+					   9  0x04000001
+					   10 0x00280000>;
+			amlogic,pins = "GPIOY_7";
+		};
+
 		//$$ MATCH "uart_ao_pin_match" = "&ao_uart_pins"
 		//$$ L2 PROP_U32 2 = "amlogic,setmask"
 		//$$ L2 PROP_STR 2 = "amlogic,pins"
diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
index 982bb64957d7..19b823631166 100644
--- a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
@@ -783,17 +783,29 @@
 		};
 	};
 
-	backlight{
+	backlight {
 		compatible = "amlogic,backlight";
 		dev_name = "backlight";
 		status = "okay";
-//		power_pin = "GPIOX_2";
-		pwm_hz = <160>;   /* Hz */
-//		pinctrl-names = "pwm_a","pwm_vs";
-//		pinctrl-0 = <&lcd_bl_pwm_a_pins>;	/* pwma pinmux */
-//		pinctrl-1 = <&lcd_bl_pwm_vs_pins>;	/* pwm_vs pinmux */
+		bl_en_gpio = "GPIOY_6";
+		bl_en_on = <0>; /** 1=output high, 0=output low **/
+		bl_pwm_port = "PWM_B";
+		pwm_positive = <0>; /* 1: positive 0: negative */
+
+		pinctrl-names = "default";
+		pinctrl-0 = <&aml_bl_pwm_pins>;
+
+		bl_level_default_uboot = <100>;
+		bl_level_default_kernel = <100>;
+		bl_level_max_min = <255 10>;
+		bl_power_on_delay = <200>;  /* unit: ms */
+		bl_power_off_delay = <200>; /* unit: ms */
+		bl_pwm_freq = <1000>;
+		bl_pwm_duty_max_min = <100 25>; /* 100% - 25%*/
 	};
 
+
+
 /// ****************************************************************************
 /// -   DISP&MM-FB
 //$$ MODULE = "DISP&MM-FB"
@@ -1268,6 +1280,19 @@
 			amlogic,pins = "GPIOY_8";
 		};
 
+		//$$ MATCH "aml_bl_pwm_pin_match" = "&aml_bl_pwm_pins"
+		//$$ L2 PROP_U32 2 = "amlogic,setmask"
+		//$$ L2 PROP_U32 2 = "amlogic,clrmask"
+		//$$ L2 PROP_STR 2 = "amlogic,pins"
+		aml_bl_pwm_pins:bl_pwm_pins {
+			amlogic,setmask = <9  0x02000000>;
+			amlogic,clrmask = <3  0x00000020
+					   5  0x04000000
+					   9  0x04000001
+					   10 0x00280000>;
+			amlogic,pins = "GPIOY_7";
+		};
+
 		//$$ MATCH "uart_ao_pin_match" = "&ao_uart_pins"
 		//$$ L2 PROP_U32 2 = "amlogic,setmask"
 		//$$ L2 PROP_STR 2 = "amlogic,pins"
diff --git a/arch/arm/configs/mesong9bb_defconfig b/arch/arm/configs/mesong9bb_defconfig
index df0e96378cf1..2c0a49d98a5d 100644
--- a/arch/arm/configs/mesong9bb_defconfig
+++ b/arch/arm/configs/mesong9bb_defconfig
@@ -193,6 +193,7 @@ CONFIG_FB_OSD1_DEFAULT_HEIGHT=1080
 CONFIG_FB_OSD1_DEFAULT_WIDTH_VIRTUAL=1920
 CONFIG_FB_OSD1_DEFAULT_HEIGHT_VIRTUAL=2160
 # CONFIG_AMLOGIC_BACKLIGHT is not set
+CONFIG_AMLOGIC_TV_BACKLIGHT=y
 CONFIG_AM_GE2D=y
 CONFIG_AM_LOGO=y
 CONFIG_AML_HDMI_TX_20=y
@@ -245,7 +246,6 @@ CONFIG_MEDIA_USB_SUPPORT=y
 CONFIG_USB_VIDEO_CLASS=y
 CONFIG_V4L_PLATFORM_DRIVERS=y
 CONFIG_BACKLIGHT_LCD_SUPPORT=y
-CONFIG_BACKLIGHT_CLASS_DEVICE=y
 CONFIG_SND_USB_AUDIO=y
 CONFIG_SND_AML_M8_SOC=y
 CONFIG_SND_AML_G9TV=y
diff --git a/arch/arm/configs/mesong9tv_defconfig b/arch/arm/configs/mesong9tv_defconfig
index 054e1c6cbe49..897bdea005e6 100644
--- a/arch/arm/configs/mesong9tv_defconfig
+++ b/arch/arm/configs/mesong9tv_defconfig
@@ -194,7 +194,8 @@ CONFIG_FB_OSD1_DEFAULT_WIDTH=1920
 CONFIG_FB_OSD1_DEFAULT_HEIGHT=1080
 CONFIG_FB_OSD1_DEFAULT_WIDTH_VIRTUAL=1920
 CONFIG_FB_OSD1_DEFAULT_HEIGHT_VIRTUAL=2160
-CONFIG_AML_BL_CTL_PWM=y
+# CONFIG_AMLOGIC_BACKLIGHT is not set
+CONFIG_AMLOGIC_TV_BACKLIGHT=y
 CONFIG_AM_LOGO=y
 CONFIG_AML_HDMI_TX_20=y
 # CONFIG_AML_HDMI_TX is not set
diff --git a/drivers/amlogic/display/backlight/Kconfig b/drivers/amlogic/display/backlight/Kconfig
index 13347d587028..c9194d7431f9 100755
--- a/drivers/amlogic/display/backlight/Kconfig
+++ b/drivers/amlogic/display/backlight/Kconfig
@@ -8,6 +8,13 @@ config AMLOGIC_BACKLIGHT
 	help
 		Say Y here if you want to use the Amlogic backlight management.
 
+config AMLOGIC_TV_BACKLIGHT
+	bool "Amlogic TV backlight support"
+	select BACKLIGHT_CLASS_DEVICE
+	default n
+	help
+		Amlogic TV backlight management.
+
 config AML_BL_LATCH_ON_VSYNC
 	bool "Backlight latch on vsync"
 	depends on AMLOGIC_BACKLIGHT
@@ -21,21 +28,6 @@ config AML_BL_PWM_ATTR
 	help
 	  Say Y if you want to enable the Amlogic backlight sys pwm attr.
 
-choice
-	prompt "Backlight control mode"
-	depends on AMLOGIC_BACKLIGHT
-	default AML_BL_CTL_GPIO
-	help
-	  Backlight control mode, by GPIO or PWM.
-
-config AML_BL_CTL_GPIO
-	bool "GPIO"
-
-config AML_BL_CTL_PWM
-	bool "PWM"
-
-endchoice
-
 config AML_LCD_BACKLIGHT_SUPPORT
 	tristate "AML lcd backlight support"
 	default y
diff --git a/drivers/amlogic/display/backlight/Makefile b/drivers/amlogic/display/backlight/Makefile
index 5d6910e37282..3813f107ed21 100755
--- a/drivers/amlogic/display/backlight/Makefile
+++ b/drivers/amlogic/display/backlight/Makefile
@@ -1,6 +1,8 @@
 obj-$(CONFIG_AMLOGIC_BACKLIGHT)			+= aml_bl.o
 obj-$(CONFIG_AML_LCD_BACKLIGHT_SUPPORT)	+= aml_bl_extern/
 
+obj-$(CONFIG_AMLOGIC_TV_BACKLIGHT)		+= aml_tv_bl.o
+
 obj-$(CONFIG_AML_LOCAL_DIMMING)			+= aml_local_dimming.o
 aml_local_dimming-objs := localdimming.o ld_notify.o aml_ldim_drv.o
 
diff --git a/drivers/amlogic/display/backlight/aml_tv_bl.c b/drivers/amlogic/display/backlight/aml_tv_bl.c
new file mode 100644
index 000000000000..c60db4d67a3b
--- /dev/null
+++ b/drivers/amlogic/display/backlight/aml_tv_bl.c
@@ -0,0 +1,581 @@
+/*
+ * drivers/amlogic/display/backlight/aml_tv_bl.c
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/sysfs.h>
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/backlight.h>
+#include <linux/fb.h>
+#include <linux/slab.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/delay.h>
+#include <linux/string.h>
+#include <linux/printk.h>
+
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include <mach/register.h>
+#include <mach/io.h>
+#include <plat/io.h>
+#include "aml_tv_bl.h"
+
+#define AML_BL_NAME		"aml-bl"
+
+#define INFO(format, arg...) printk(KERN_INFO "%s: " format, \
+	__FUNCTION__ , ## arg)
+#define ERR(format, arg...)  printk(KERN_ERR  "%s: " format, \
+	__FUNCTION__ , ## arg)
+
+
+
+static void aml_bl_pwm_init(struct backlight_device *bd)
+{
+	unsigned int port;
+	unsigned int div;
+	struct aml_bl *bdev;
+
+	bdev = bl_get_data(bd);;
+	port = bdev->d->pwm_port;
+	div  = bdev->pwm_clk_div;
+
+	switch (port) {
+	case AML_BL_PWM_A:
+		/* pwm_a_clk_div: bit[14-8] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, div, 8, 7);
+		/* pwm_a_clk_sel: bit[5-4] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, 0, 4, 2);
+		/* pwm_a_clk_en: bit[15] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, 1, 15, 1);
+		break;
+	case AML_BL_PWM_B:
+		/* pwm_b_clk_div: bit[22-16] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, div, 16, 7);
+		/* pwm_b_clk_sel: bit[7-6] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, 0, 6, 2);
+		/* pwm_b_clk_en: bit[23] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, 1, 23, 1);
+		break;
+	case AML_BL_PWM_C:
+		/* pwm_c_clk_div: bit[14-8] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, div, 8, 7);
+		/* pwm_c_clk_sel: bit[5-4] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, 0, 4, 2);
+		/* pwm_c_clk_en: bit[15] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, 1, 15, 1);
+		break;
+	case AML_BL_PWM_D:
+		/* pwm_d_clk_div: bit[22-16] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, div, 16, 7);
+		/* pwm_d_clk_sel: bit[7-6] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, 0, 6, 2);
+		/* pwm_d_clk_en: bit[23] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, 1, 23, 1);
+		break;
+	default:
+		ERR("unsupport pwm port %u\n", port);
+		break;
+	}
+	INFO("pwm select port %d ok\n", port);
+}
+
+static void aml_bl_pwm_on_off(struct backlight_device *bd, unsigned int en)
+{
+	unsigned int port;
+	struct aml_bl *bdev;
+
+	bdev = bl_get_data(bd);
+	port = bdev->d->pwm_port;
+	en = en ? 1 : 0;
+
+	switch (port) {
+	case AML_BL_PWM_A:
+		/* pwm_a_en bit[0] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, en, 0, 1);
+		break;
+	case AML_BL_PWM_B:
+		/* pwm_b_en bit[1] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_AB, en, 1, 1);
+		break;
+	case AML_BL_PWM_C:
+		/* pwm_c_en bit[0] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, en, 0, 1);
+		break;
+	case AML_BL_PWM_D:
+		/* pwm_d_en bit[1] */
+		aml_set_reg32_bits(P_PWM_MISC_REG_CD, en, 1, 1);
+		break;
+	default:
+		ERR("unsupport pwm port %u\n", port);
+		break;
+	}
+	INFO("pwm port %d %s\n", port, (en ? "enable" : "disable"));
+}
+
+static void aml_bl_power_on(struct backlight_device *bd)
+{
+	struct aml_bl *bdev;
+	int on;
+
+	bdev = bl_get_data(bd);
+	on = bdev->d->bl_en_on;
+
+	amlogic_gpio_direction_output(bdev->d->bl_en_gpio, on, AML_BL_NAME);
+	msleep(bdev->d->power_on_delay);
+	aml_bl_pwm_on_off(bd, AML_BL_PWM_ON);
+
+	/* set state flag */
+	bdev->bd->props.state |= AML_BL_FLAG_POWERON;
+	INFO("power on\n");
+}
+
+static void aml_bl_power_off(struct backlight_device *bd)
+{
+	struct aml_bl *bdev;
+	int off;
+
+	bdev = bl_get_data(bd);
+	off = bdev->d->bl_en_on ? 0 : 1;
+
+	aml_bl_pwm_on_off(bd, AML_BL_PWM_OFF);
+	msleep(bdev->d->power_off_delay);
+	amlogic_gpio_direction_output(bdev->d->bl_en_gpio, off, AML_BL_NAME);
+
+	bdev->bd->props.state &= ~AML_BL_FLAG_POWERON;
+	INFO("power off\n");
+}
+
+
+static void aml_bl_pwm_duty_set(struct backlight_device *bd,
+	unsigned int pwm_high, unsigned int pwm_low)
+{
+	struct aml_bl *bdev = bl_get_data(bd);
+
+	switch (bdev->d->pwm_port) {
+	case AML_BL_PWM_A:
+		aml_write_reg32(P_PWM_PWM_A, (pwm_high << 16) | (pwm_low));
+		break;
+	case AML_BL_PWM_B:
+		aml_write_reg32(P_PWM_PWM_B, (pwm_high << 16) | (pwm_low));
+		break;
+	case AML_BL_PWM_C:
+		aml_write_reg32(P_PWM_PWM_C, (pwm_high << 16) | (pwm_low));
+		break;
+	case AML_BL_PWM_D:
+		aml_write_reg32(P_PWM_PWM_D, (pwm_high << 16) | (pwm_low));
+		break;
+	default:
+		break;
+	}
+}
+
+static void aml_bl_set_level(struct backlight_device *bd, unsigned level)
+{
+	unsigned int pw, lw, lv;
+	unsigned int pwm_high, pwm_low;
+	struct aml_bl *bdev = bl_get_data(bd);
+
+	INFO("input level %u\n", level);
+
+	/* validate value */
+	if (level > bdev->d->level_max)
+		level = bdev->d->level_max;
+	if (level < bdev->d->level_min)
+		level = bdev->d->level_min;
+
+	/* save the validated level */
+	bdev->curr_level = level;
+
+	pw = bdev->pwm_max - bdev->pwm_min;
+	lw = bdev->d->level_max - bdev->d->level_min;
+	lv = level - bdev->d->level_min;
+	level = pw * lv / lw + bdev->pwm_min;
+
+	if (bdev->d->pwm_positive) {
+		pwm_high = level;
+		pwm_low = bdev->pwm_cnt - level;
+	}
+	else {
+		pwm_high = bdev->pwm_cnt - level;
+		pwm_low = level;
+	}
+
+	aml_bl_pwm_duty_set(bd, pwm_high, pwm_low);
+
+	INFO("set level ok\n");
+}
+
+static int aml_bl_get_brightness(struct backlight_device *bd)
+{
+	struct aml_bl *bdev = bl_get_data(bd);
+	return bdev->curr_level;
+}
+
+static int aml_bl_update_status(struct backlight_device *bd)
+{
+	int brightness = bd->props.brightness;
+
+	if (brightness < 0)
+		brightness = 0;
+	if (brightness > 255)
+		brightness = 255;
+
+	if (bd->props.power != FB_BLANK_UNBLANK) {
+		INFO("!FB_BLANK_UNBLANK props.power = %d\n", bd->props.power);
+		brightness = 0;
+	}
+
+	INFO("brightness = %d\n", brightness);
+
+	if (brightness == 0) {
+		aml_bl_power_off(bd);
+		return 0;
+	}
+
+	aml_bl_set_level(bd, brightness);
+
+	if (!(bd->props.state & AML_BL_FLAG_POWERON)) {
+		aml_bl_power_on(bd);
+	}
+	return 0;
+}
+
+static const struct backlight_ops aml_bl_ops = {
+	.get_brightness = aml_bl_get_brightness,
+	.update_status = aml_bl_update_status,
+};
+
+static int aml_bl_register_backlight(struct platform_device *pdev)
+{
+	struct aml_bl *bdev;
+	struct backlight_properties props;
+	int ret = 0;
+
+	memset(&props, 0, sizeof(struct backlight_properties));
+
+	bdev = platform_get_drvdata(pdev);
+
+	if (bdev->d->level_max > 0)
+		props.max_brightness = bdev->d->level_max;
+	else
+		props.max_brightness = AML_BL_LEVEL_MAX;
+
+	if (bdev->d->level_def > 0)
+		props.brightness = bdev->d->level_def;
+	else
+		props.brightness = AML_BL_LEVEL_DEF;
+
+	props.type = BACKLIGHT_RAW;
+	props.power = FB_BLANK_UNBLANK;
+	props.state &= ~AML_BL_FLAG_POWERON;
+
+	bdev->bd = backlight_device_register(AML_BL_NAME, &pdev->dev, bdev,
+					&aml_bl_ops, &props);
+	if (IS_ERR(bdev->bd)) {
+		ERR("failed to register backlight\n");
+		return -ENODEV;
+	}
+	INFO("register backlight ok\n");
+	return ret;
+}
+
+#define XTAL_FREQ_HZ		(24*1000*1000) /* 24M in HZ */
+#define XTAL_HALF_FREQ_HZ	(24*1000*500)  /* 24M/2 in HZ */
+#define AML_BL_PWM_FREQ_DEF	(1000)
+
+static void aml_bl_pwm_param_init(struct platform_device *pdev)
+{
+	struct aml_bl *bdev;
+	unsigned int pwm_freq;
+	unsigned int pwm_clk_div;
+	unsigned int pwm_cnt;
+	int i;
+
+	bdev = platform_get_drvdata(pdev);
+	pwm_freq = bdev->d->pwm_freq;
+
+
+	/* 0x7f(7bit): PWMA[14:8] or PWMB[22:6]*/
+	/*
+	 * pwm_clk_in = xtal / clk_div
+	 * pwm_out = pwm_clk_in/((high + 1) + (low + 1))
+	 *
+	 */
+	for (i = 0; i < 0x7f; i++) {
+		pwm_clk_div = i;
+		pwm_cnt = XTAL_FREQ_HZ / (pwm_freq * (pwm_clk_div + 1)) - 2;
+		if (pwm_cnt <= 0xffff) /* 16bit */
+			break;
+	}
+
+	bdev->pwm_cnt = pwm_cnt;
+	bdev->pwm_clk_div = pwm_clk_div;
+	INFO("pwm_cnt = %u, pwm_clk_div = %u\n", pwm_cnt, pwm_clk_div);
+
+	bdev->pwm_max = (pwm_cnt * bdev->d->pwm_duty_max / 100);
+	bdev->pwm_min = (pwm_cnt * bdev->d->pwm_duty_min / 100);
+	INFO("pwm_max = %u, pwm_min = %u\n", bdev->pwm_max, bdev->pwm_min);
+}
+
+static struct aml_bl_dt aml_bl_dt_def = {
+	.level_def = AML_BL_LEVEL_DEF,
+	.pwm_positive = 1,
+	.bl_en_on = 0,
+	//...
+};
+
+static int aml_bl_dt_parse(struct platform_device *pdev)
+{
+	struct device_node *node;
+	struct aml_bl *bdev;
+	unsigned int val;
+	const char *str;
+	unsigned int array[2];
+	int ret;
+
+	bdev = platform_get_drvdata(pdev);
+	node = pdev->dev.of_node;
+	if (!node) {
+		ERR("failed to find backlight node\n");
+		return -EINVAL;
+	}
+
+	/* BL_EN */
+	ret = of_property_read_string(pdev->dev.of_node, "bl_en_gpio", &str);
+	if (ret) {
+		ERR("faild to get bl_en_gpio\n");
+		bdev->d->bl_en_gpio = GPIOY_6;
+	}
+	else {
+		bdev->d->bl_en_gpio = amlogic_gpio_name_map_num(str);
+		ret = amlogic_gpio_request(bdev->d->bl_en_gpio, AML_BL_NAME);
+		if (ret)
+			ERR("failed to request gpio %s(%u)\n", str, bdev->d->bl_en_gpio);
+	}
+	INFO("bl_en_gpio = %s(%u)\n", str, bdev->d->bl_en_gpio);
+
+
+	/* BL_EN */
+	ret = of_property_read_u32(pdev->dev.of_node, "bl_en_on", &val);
+	if (ret) {
+		ERR("faild to get bl_en_gpio\n");
+	}
+	else {
+		bdev->d->bl_en_on = val;
+	}
+	INFO("bl_en_on = %u\n", bdev->d->bl_en_on);
+
+	/* BL_PWM PORT */
+	ret = of_property_read_string(pdev->dev.of_node, "bl_pwm_port", &str);
+	if (ret) {
+		ERR("faild to get bl_pwm_port\n");
+		bdev->d->pwm_port = AML_BL_PWM_B;
+	}
+	else {
+		if (strcmp(str, "PWM_A") == 0)
+			bdev->d->pwm_port = AML_BL_PWM_A;
+		else if (strcmp(str, "PWM_B") == 0)
+			bdev->d->pwm_port = AML_BL_PWM_B;
+		else if (strcmp(str, "PWM_C") == 0)
+			bdev->d->pwm_port = AML_BL_PWM_C;
+		else if (strcmp(str, "PWM_D") == 0)
+			bdev->d->pwm_port = AML_BL_PWM_D;
+		else
+			bdev->d->pwm_port = AML_BL_PWM_MAX;
+	}
+	INFO("bl_pwm_port = %u\n", bdev->d->pwm_port);
+
+	/* PWM POSITIVE */
+	ret = of_property_read_u32(pdev->dev.of_node, "pwm_positive", &val);
+	if (ret) {
+		ERR("faild to get pwm_positive\n");
+	}
+	else {
+		bdev->d->pwm_positive = val;
+	}
+	INFO("pwm_positive = %u\n", bdev->d->pwm_positive);
+
+	/* BL PWM FREQ */
+	ret = of_property_read_u32(node, "bl_pwm_freq", &val);
+	if (ret) {
+		ERR("failed to get bl_pwm_freq\n");
+		val = AML_BL_FREQ_DEF;
+	}
+	/* validate: less than the half of xtal */
+	if (val > XTAL_HALF_FREQ_HZ)
+		bdev->d->pwm_freq = XTAL_HALF_FREQ_HZ;
+	else
+		bdev->d->pwm_freq = val;
+	INFO("bl_pwm_freq = %u\n",  bdev->d->pwm_freq);
+
+	ret = of_property_read_u32(node, "bl_power_on_delay", &val);
+	if (ret) {
+		ERR("faild to get bl_power_on_delay\n");
+		bdev->d->power_on_delay = AML_BL_DEALY_DEF;
+	}
+	else {
+		bdev->d->power_on_delay = val & 0xffff;
+	}
+	INFO("bl_power_on_delay = %u\n", bdev->d->power_on_delay);
+
+	ret = of_property_read_u32(node, "bl_power_off_delay", &val);
+	if (ret) {
+		ERR("faild to get bl_power_off_delay\n");
+		bdev->d->power_off_delay = AML_BL_DEALY_DEF;
+	}
+	else {
+		bdev->d->power_off_delay = val & 0xffff;
+	}
+	INFO("bl_power_off_delay = %u\n", bdev->d->power_off_delay);
+
+	ret = of_property_read_u32(node, "bl_level_default_kernel", &val);
+	if (ret) {
+		ERR("faild to get bl_level_default_kernel\n");
+		bdev->d->level_def = AML_BL_LEVEL_DEF;
+	}
+	else {
+		bdev->d->level_def = val;
+	}
+	INFO("bl_level_default_kernel = %u\n", bdev->d->level_def);
+
+	ret = of_property_read_u32_array(node, "bl_level_max_min",
+		array, ARRAY_SIZE(array));
+	if (ret) {
+		ERR("failed to bl_level_max_min\n");
+		bdev->d->level_min = AML_BL_LEVEL_MIN;
+		bdev->d->level_max = AML_BL_LEVEL_MAX;
+	}
+	else {
+		bdev->d->level_max = array[0];
+		bdev->d->level_min = array[1];
+	}
+	INFO("bl_level_max_min = <%u, %u>\n", bdev->d->level_max,
+		bdev->d->level_min);
+
+	ret = of_property_read_u32_array(node, "bl_pwm_duty_max_min",
+		array, ARRAY_SIZE(array));
+	if (ret) {
+		ERR("failed to get bl_pwm_duty_max_min\n");
+		bdev->d->pwm_duty_max = AML_BL_DUTY_MIN;
+		bdev->d->pwm_duty_min = AML_BL_DUTY_MIN;
+	}
+	else {
+		bdev->d->pwm_duty_max = array[0];
+		bdev->d->pwm_duty_min = array[1];
+	}
+	INFO("bl_pwm_duty_max_min = <%u, %u>\n", bdev->d->pwm_duty_max,
+		bdev->d->pwm_duty_min);
+
+	return 0;
+}
+
+
+static const struct of_device_id aml_bl_dt_match[] = {
+	{
+		.compatible = "amlogic,backlight",
+	},
+	{},
+};
+
+static int aml_bl_probe(struct platform_device *pdev)
+{
+	struct aml_bl *bdev;
+	int ret;
+
+	bdev = kzalloc(sizeof(struct aml_bl), GFP_KERNEL);
+	if (!bdev ) {
+	    ERR("kzalloc error\n");
+	    return -ENOMEM;
+	}
+
+	platform_set_drvdata(pdev, bdev);
+	bdev->pdev = pdev;
+
+	/* parse dt param */
+	bdev->d = &aml_bl_dt_def;
+	aml_bl_dt_parse(pdev);
+	aml_bl_pwm_param_init(pdev);
+
+	/* setup pinmux */
+	bdev->p = devm_pinctrl_get_select_default(&pdev->dev);
+	if (IS_ERR(bdev->p))
+		ERR("failed to setup pinmux\n");
+
+	ret = aml_bl_register_backlight(pdev);
+	if (ret < 0) {
+		kfree(bdev);
+		return ret;
+	}
+
+	/* pwm init */
+	aml_bl_pwm_init(bdev->bd);
+	aml_bl_update_status(bdev->bd);
+
+	INFO("module probed ok\n");
+	return 0;
+}
+
+static int __exit aml_bl_remove(struct platform_device *pdev)
+{
+	struct aml_bl *bdev = platform_get_drvdata(pdev);
+
+	amlogic_gpio_free(bdev->d->bl_en_gpio, AML_BL_NAME);
+	backlight_device_unregister(bdev->bd);
+	platform_set_drvdata(pdev, NULL);
+	kfree(bdev);
+
+	INFO("module removed ok\n");
+	return 0;
+}
+
+static struct platform_driver aml_bl_driver = {
+	.driver = {
+		.name = AML_BL_NAME,
+		.owner = THIS_MODULE,
+#ifdef CONFIG_USE_OF
+		.of_match_table = aml_bl_dt_match,
+#endif
+	},
+	.probe = aml_bl_probe,
+	.remove = __exit_p(aml_bl_remove),
+};
+
+static int __init aml_bl_init(void)
+{
+	INFO("module init\n");
+	if (platform_driver_register(&aml_bl_driver)) {
+		ERR("failed to register bl driver module\n");
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+static void __exit aml_bl_exit(void)
+{
+	INFO("module exit\n");
+	platform_driver_unregister(&aml_bl_driver);
+}
+
+module_init(aml_bl_init);
+module_exit(aml_bl_exit);
+
+MODULE_DESCRIPTION("Meson Backlight Driver");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Amlogic, Inc.");
diff --git a/drivers/amlogic/display/backlight/aml_tv_bl.h b/drivers/amlogic/display/backlight/aml_tv_bl.h
new file mode 100644
index 000000000000..50c7fbc6e695
--- /dev/null
+++ b/drivers/amlogic/display/backlight/aml_tv_bl.h
@@ -0,0 +1,91 @@
+/*
+ * drivers/amlogic/display/backlight/aml_tv_bl.h
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+#ifndef __AML_TV_BL_H
+#define __AML_TV_BL_H
+
+#define AML_BL_FREQ_DEF			1000	/* unit: HZ */
+
+#define AML_BL_LEVEL_DEF		128
+#define AML_BL_LEVEL_MAX		255
+#define AML_BL_LEVEL_MIN		10
+#define AML_BL_LEVEL_OFF		1
+
+#define AML_BL_DUTY_MAX			100	/* unit: % */
+#define AML_BL_DUTY_MIN			20
+#define AML_BL_DEALY_DEF		100	/* unit: s */
+
+typedef enum {
+	AML_BL_PWM_A = 0,
+	AML_BL_PWM_B,
+	AML_BL_PWM_C,
+	AML_BL_PWM_D,
+	AML_BL_PWM_MAX,
+} aml_bl_pwm_port_t;
+
+enum {
+	AML_BL_PWM_OFF = 0,
+	AML_BL_PWM_ON,
+};
+
+/* backlight properties state flag */
+#define AML_BL_FLAG_POWERON		BL_CORE_DRIVER1 // (1 << 31)
+
+
+struct aml_bl_dt {
+	unsigned int bl_en_gpio; /* bl_en gpio */
+	unsigned int bl_en_on;
+	unsigned int pwm_port;
+
+	unsigned int level_def;
+	unsigned int level_mid;
+	unsigned int level_mid_mapping;
+	unsigned int level_min;
+	unsigned int level_max;
+	unsigned int level_off;
+	unsigned int power_on_delay; /* unit: ms */
+	unsigned int power_off_delay; /* unit: ms */
+
+	unsigned int pwm_freq;
+	unsigned int pwm_duty_min;
+	unsigned int pwm_duty_max;
+	unsigned int pwm_positive; /* 1: positive 0: negative */
+
+};
+
+struct aml_bl {
+
+	void (*power_on)(void);
+	void (*power_off)(void);
+	unsigned (*get_level)(void);
+	void (*set_level)(unsigned);
+
+	struct aml_bl_dt *d;
+	struct pinctrl *p;
+	struct backlight_device *bd;
+	struct platform_device *pdev;
+
+	unsigned int pwm_cnt;
+	unsigned int pwm_clk_div;
+	unsigned int pwm_max;
+	unsigned int pwm_min;
+
+
+	int curr_level;
+};
+
+#endif
-- 
2.19.0

