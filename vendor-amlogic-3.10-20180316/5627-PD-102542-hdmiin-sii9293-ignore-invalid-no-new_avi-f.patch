From 8604cc669ed0945eac1a5c87b76487680c761b9d Mon Sep 17 00:00:00 2001
From: Jets Yan <jets.yan@amlogic.com>
Date: Sat, 21 Mar 2015 20:25:49 +0800
Subject: [PATCH 5627/5965] PD#102542: hdmiin: sii9293: ignore invalid
 no/new_avi from HA-TV box.

Change-Id: I7a5c2223a786fd83a84898910d2bac777aaaab3f
---
 .../sii9293/driver/rx_drv/si_drv_device.c     |   4 +-
 .../sii9293/driver/rx_drv/si_drv_rx_isr.c     | 113 +++++++++++++++++-
 .../sii9293/driver/rx_drv/si_drv_rx_isr.h     |   2 +-
 .../application/mhl_linuxdrv_main.c           |   3 +
 4 files changed, 114 insertions(+), 8 deletions(-)

diff --git a/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_device.c b/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_device.c
index 53a151868faf..c6733afa8a00 100755
--- a/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_device.c
+++ b/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_device.c
@@ -386,8 +386,8 @@ void SiiDrvDeviceManageInterrupts (void)
         if(intStatus2 & BIT_RX_INTR)
         {
             DEBUG_PRINT(MSG_DBG, ("RX Interrupt\n"));
-            SiiRxInterruptHandler();
-            SiiRxSetVideoStableTimer();
+            if (0 == SiiRxInterruptHandler())
+                SiiRxSetVideoStableTimer();
         }
         if(intStatus2 & BIT_CBUS_INTR)
         {
diff --git a/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.c b/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.c
index 6b49f47d9b2b..c56a052d2803 100755
--- a/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.c
+++ b/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.c
@@ -410,11 +410,62 @@ void sii_signal_notify(unsigned int status)
     return ;
 }
 
+static int is_only_noavi_intr(uint8_t *intrs)
+{
+	if ((intrs[INT1] == 0x00) && (intrs[INT2] == 0x00) && (intrs[INT3] == 0x00) &&
+        (intrs[INT5] == 0x00) && (intrs[INT6] == 0x00) && (intrs[INT7] == 0x00) &&
+        (intrs[INT8] == 0x00))
+    {
+		if (intrs[INT4] = =RX_M__INTR4__NO_AVI)
+            return 1;
+    }
+
+    return 0;
+}
+
+static int is_only_newavi_intr(uint8_t *intrs)
+{
+	if ((intrs[INT1] == 0x00) && (intrs[INT2] == 0x00) && (intrs[INT4] == 0x00) &&
+        (intrs[INT5] == 0x00) && (intrs[INT6] == 0x00) && (intrs[INT7] == 0x00) &&
+        (intrs[INT8] == 0x00))
+    {
+		if (intrs[INT3] == RX_M__INTR3__NEW_AVI_PACKET)
+            return 1;
+    }
+
+    return 0;
+}
+
+extern int debug_level;
+unsigned int avi_checksum = 0;
+static int is_duplicated_avi(void)
+{
+    uint8_t d[IF_BUFFER_LENGTH];
+    unsigned int length = IF_MAX_AVI_LENGTH + IF_HEADER_LENGTH;
+    unsigned int checksum = 0;
+
+    SiiRegReadBlock(RX_A__AVI_TYPE, d, length);
+    checksum = (d[length-4]<24) | (d[length-3]<<16) | (d[length-2]<<8) | (d[length-1]);
+
+    if ( debug_level == 2 )
+        printk("[%s] checksum = 0x%x, 0x%x\n", __FUNCTION__, avi_checksum, checksum);
+    if ( avi_checksum == checksum )
+        return 1;
+    if (checksum == 0xffffff)
+        return 1;
+
+    avi_checksum = checksum;
+
+    return 0;
+}
 extern void sii9293_cable_status_notify(unsigned int cable_status);
-void SiiRxInterruptHandler(void)
+// return value:
+//	0 for normal process
+//	1 for invalid status, for repeatly no_avi/new_avi from HA-TV box, it will block 9293.
+int SiiRxInterruptHandler(void)
 {
     uint8_t interrupts[NMB_OF_RX_INTERRUPTS];
-   
+
     //DEBUG_PRINT(MSG_STAT, ("RX Interrupt detected!\n"));
     // get interrupt requests
     SiiRegReadBlock(RX_A__INTR1, &interrupts[INT1], 4);
@@ -440,20 +491,46 @@ void SiiRxInterruptHandler(void)
     SiiRegWriteBlock(RX_A__INTR5, &interrupts[INT5], 2);
     SiiRegWriteBlock(RX_A__INTR7, &interrupts[INT7], 2);
 
+/*---------------------------------------*/
+// for no_avi/new_avi repeatly.
+	if (is_only_noavi_intr(&interrupts[INT1]))
+        return -1;
+
+    interrupts[INT4] &= ~RX_M__INTR4__NO_AVI;
+
+    if (interrupts[INT3] & RX_M__INTR3__NEW_AVI_PACKET)
+    {
+        if (is_duplicated_avi() == 1)
+        {
+            if (is_only_newavi_intr(&interrupts[INT1]))
+                return -2;
+
+            interrupts[INT3] &= ~RX_M__INTR3__NEW_AVI_PACKET;
+        }
+    }
+// for no_avi/new_avi repeatly
+/*---------------------------------------*/
+
     if(interrupts[INT1] & RX_M__INTR1__AUTH_DONE)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR1__AUTH_DONE\n");
         DEBUG_PRINT(MSG_STAT, ("RX: Authentication done!\n"));
         switch_hdcp_failure_check_with_v_sync_rate(OFF);
     }
 
     if(interrupts[INT2] & RX_M__INTR2__VID_CLK_CHANGED)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR2__VID_CLK_CHANGED\n");
         rx_isr.bVidStableChgEvent = true;
         DEBUG_PRINT(MSG_STAT, ("RX: video clock change\n"));
     }
 
     if(interrupts[INT2] & RX_M__INTR2__SCDT)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR2__SCDT\n");
         switch_hdcp_failure_check_with_v_sync_rate(OFF);
         SiiDrvRxMuteVideo(ON);
         rx_isr.bVidStableChgEvent = true;
@@ -466,7 +543,7 @@ void SiiRxInterruptHandler(void)
             rx_isr.bScdtState = true;
 #if defined(__KERNEL__)
             SiiConnectionStateNotify(true);
-#endif  
+#endif
         }
         else
         {
@@ -474,6 +551,7 @@ void SiiRxInterruptHandler(void)
 			printk("sii9293 irq lost SCDT!\n");
 			sii_signal_notify(0);
 
+			avi_checksum = 0;
             rx_isr.bScdtState = false;
             SiiDrvSoftwareReset(RX_M__SRST__SRST);
             VMD_ResetTimingData();
@@ -486,40 +564,54 @@ void SiiRxInterruptHandler(void)
 
     if(interrupts[INT2] & RX_M__INTR2__HDMI_MODE)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR2__HDMI_MODE\n");
         DEBUG_PRINT(MSG_STAT, ("RX: HDMI mode change!\n"));
         RxIsr_HdmiDviTransition();
     }
 
     if(interrupts[INT2] & RX_M__INTR2__VSYNC)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR2__VSYNC\n");
         hdcp_error_handler(true);
     }
 
     if(interrupts[INT4] & RX_M__INTR4__HDCP)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR4__HDCP\n");
         hdcp_error_handler(false);
     }
 
     if((interrupts[INT5] & RX_M__INTR5__AUDIO_FS_CHANGED) || (interrupts[INT6] & RX_M__INTR6__CHST_READY))
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: OnChannelStatusChange\n");
         // Note: RX_M__INTR6__CHST_READY interrupt may be disabled
         //DEBUG_PRINT(MSG_STAT, ("RX: New Audio Fs\n"));
         RxAudio_OnChannelStatusChange();
     }
     if(interrupts[INT4] & RX_M__INTR4__NO_AVI)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR4__NO_AVI\n");
         RxInfo_NoAviHandler();
         rx_isr.bVidStableChgEvent = true;
     }
 
     if(interrupts[INT3] & RX_M__INTR3__NEW_AVI_PACKET)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR3__NEW_AVI_PACKET\n");
         RxInfo_InterruptHandler(INFO_AVI);
         rx_isr.bVidStableChgEvent = true;
     }
 
     if(interrupts[INT7] & RX_M__INTR7__NO_VSI_PACKET)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR7__NO_VSI_PACKET\n");
         // Clear also vsif_received flag (indicating any VSIF packet detection).
         // If there is any other VSIF packet, the flag will be set again shortly.
         RxInfo_NoVsiHandler();
@@ -527,22 +619,31 @@ void SiiRxInterruptHandler(void)
 
     if(interrupts[INT7] & RX_M__INTR7__NEW_VSI_PACKET)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR7__NEW_VSI_PACKET\n");
         RxInfo_InterruptHandler(INFO_VSI);
     }
 
     if(interrupts[INT3] & RX_M__INTR3__NEW_AUD_PACKET)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR3__NEW_AUD_PACKET\n");
         RxInfo_InterruptHandler(INFO_AUD);
     }
 
     if(interrupts[INT6] & RX_M__INTR6__NEW_ACP_PACKET)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR6__NEW_ACP_PACKET\n");
         RxInfo_InterruptHandler(INFO_AUD);
     }
     if (interrupts[INT6] & RX_M__INTR6__CABLE_UNPLUG)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR6__CABLE_UNPLUG\n");
         if (SiiRegRead(RX_A__INTR6) & RX_M__INTR6__CABLE_UNPLUG)
         {
+            avi_checksum = 0;
             rx_isr.bCableChgEvent = true;
             rx_isr.bCableState = false;
             rx_isr.shadow_interrupt_mask[INT6] &= ~RX_M__INTR6__CABLE_UNPLUG;       // Disable 5v plug-out interrup
@@ -550,12 +651,12 @@ void SiiRxInterruptHandler(void)
             SiiRegWrite(RX_A__INTR6_MASK, rx_isr.shadow_interrupt_mask[INT6]);
             SiiRegWrite(RX_A__INTR8_MASK, rx_isr.shadow_interrupt_mask[INT8]);
             sii9293_cable_status_notify(0);
-            
         }
-            
     }
     if (interrupts[INT8] & RX_M__INTR8__CABLE_IN)
     {
+        if (debug_level == 2)
+            printk("sii9293_intr: RX_M__INTR8__CABLE_IN\n");
         if (SiiRegRead(RX_A__INTR8) & RX_M__INTR8__CABLE_IN)
         {
             rx_isr.bCableChgEvent = true;
@@ -567,6 +668,8 @@ void SiiRxInterruptHandler(void)
 			sii9293_cable_status_notify(1);
         }
     }
+
+    return 0;
 }
 
 bool_t SiiDrvCableStatusGet ( bool_t *pData )
diff --git a/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.h b/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.h
index a31eda0ba2ea..5f12e2ebe7d1 100755
--- a/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.h
+++ b/drivers/amlogic/ext_hdmiin/sii9293/driver/rx_drv/si_drv_rx_isr.h
@@ -14,7 +14,7 @@
 
 void RxIsr_Init(void);
 
-void SiiRxInterruptHandler(void);
+int SiiRxInterruptHandler(void);
 
 bool_t SiiDrvCableStatusGet ( bool_t *pData );
 
diff --git a/drivers/amlogic/ext_hdmiin/sii9293/linux_driver/application/mhl_linuxdrv_main.c b/drivers/amlogic/ext_hdmiin/sii9293/linux_driver/application/mhl_linuxdrv_main.c
index 2b8effe780db..1aa15e24d374 100755
--- a/drivers/amlogic/ext_hdmiin/sii9293/linux_driver/application/mhl_linuxdrv_main.c
+++ b/drivers/amlogic/ext_hdmiin/sii9293/linux_driver/application/mhl_linuxdrv_main.c
@@ -1558,6 +1558,9 @@ unsigned int sii5293_get_output_mode(void)
 {
 	unsigned int mode = 0;
 
+	if (debug_level & 0x1)
+		printk("sii9293 output mode index = %d\n", gDriverContext.input_video_mode);
+
 	if( (gDriverContext.input_video_mode == 0) || (gDriverContext.input_video_mode >= NMB_OF_CEA861_VIDEO_MODES) )
 		return mode;
 
-- 
2.19.0

