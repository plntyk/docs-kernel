From f5a059c266fbcf198b02a0dd7290ae8b5362e3f1 Mon Sep 17 00:00:00 2001
From: Zhenfei Li <zhenfei.li@amlogic.com>
Date: Wed, 13 May 2015 19:47:25 +0800
Subject: [PATCH 5661/5965] PD#106310: instaboot: check if the booting is for
 instaboot.

Change-Id: I75a24805e088337c4c3c8a85506b5d4c95a0e269
---
 arch/arm/plat-meson/plat-hibernate.c         |  6 ++
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c       |  4 +-
 drivers/amlogic/instaboot/instaboot_kernel.c |  8 ++
 drivers/of/fdt.c                             | 83 ++++++++++++++++++++
 kernel/power/hibernate.c                     | 41 +++++++---
 5 files changed, 130 insertions(+), 12 deletions(-)
 mode change 100755 => 100644 drivers/of/fdt.c

diff --git a/arch/arm/plat-meson/plat-hibernate.c b/arch/arm/plat-meson/plat-hibernate.c
index 84db45dc46ae..39666eed96c6 100644
--- a/arch/arm/plat-meson/plat-hibernate.c
+++ b/arch/arm/plat-meson/plat-hibernate.c
@@ -46,15 +46,21 @@ aml_write_reg32(PLAT_RCD_##_REG.reg_addr, PLAT_RCD_##_REG.reg_val); \
 
 PLATE_REG_RECORD(ISA_TIMERD);
 PLATE_REG_RECORD(ISA_TIMER_MUX);
+PLATE_REG_RECORD(HHI_AUD_CLK_CNTL2);
+PLATE_REG_RECORD(HHI_MPLL_CNTL8);
 
 void platform_reg_save(void)
 {
 	SAVE_PLAT_REG(ISA_TIMERD);
 	SAVE_PLAT_REG(ISA_TIMER_MUX);
+	SAVE_PLAT_REG(HHI_AUD_CLK_CNTL2);
+	SAVE_PLAT_REG(HHI_MPLL_CNTL8);
 }
 
 void platform_reg_restore(void)
 {
 	RESTORE_PLAT_REG(ISA_TIMERD);
 	RESTORE_PLAT_REG(ISA_TIMER_MUX);
+	RESTORE_PLAT_REG(HHI_AUD_CLK_CNTL2);
+	RESTORE_PLAT_REG(HHI_MPLL_CNTL8);
 }
\ No newline at end of file
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index 667f084a1122..393e21026e01 100644
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -1790,7 +1790,9 @@ static int amhdmitx_remove(struct platform_device *pdev)
 #ifdef CONFIG_PM
 static int amhdmitx_suspend(struct platform_device *pdev,pm_message_t state)
 {
-    hdmitx_device.HWOp.CntlMisc(&hdmitx_device,MISC_HPLL_OP,HPLL_DISABLE);
+    if (PM_EVENT_FREEZE != state.event
+            && PM_EVENT_QUIESCE != state.event)
+        hdmitx_device.HWOp.CntlMisc(&hdmitx_device,MISC_HPLL_OP,HPLL_DISABLE);
 #if 0
     pr_info("amhdmitx: hdmirx_suspend\n");
     hdmitx_pre_display_init();
diff --git a/drivers/amlogic/instaboot/instaboot_kernel.c b/drivers/amlogic/instaboot/instaboot_kernel.c
index a40f615b4466..78787a8c2144 100644
--- a/drivers/amlogic/instaboot/instaboot_kernel.c
+++ b/drivers/amlogic/instaboot/instaboot_kernel.c
@@ -6,6 +6,7 @@
 #include <linux/list.h>
 #include <linux/slab.h>
 #include <asm/memory.h>
+#include <linux/utsname.h>
 
 static void* nftl_info_trans_buffer[3]  __nosavedata;
 EXPORT_SYMBOL(nftl_info_trans_buffer);
@@ -80,6 +81,13 @@ void aml_bio_set_pages_dirty(struct bio *bio)
 }
 EXPORT_SYMBOL(aml_bio_set_pages_dirty);
 
+void aml_get_utsname(struct new_utsname * un)
+{
+	if (un)
+		memcpy(un, init_utsname(), sizeof(struct new_utsname));
+}
+EXPORT_SYMBOL(aml_get_utsname);
+
 /*
    in kernel booting process, acquire some memory for device probe,
    which will not be crush when recovery the instaboot image.
diff --git a/drivers/of/fdt.c b/drivers/of/fdt.c
old mode 100755
new mode 100644
index 187a97acfb17..d1fdd4ae9d5b
--- a/drivers/of/fdt.c
+++ b/drivers/of/fdt.c
@@ -582,6 +582,87 @@ inline void early_init_dt_check_for_initrd(unsigned long node)
 }
 #endif /* CONFIG_BLK_DEV_INITRD */
 
+#ifdef CONFIG_HIBERNATION
+#include <linux/utsname.h>
+#include <linux/version.h>
+
+int is_instabooting;
+inline void early_init_dt_check_for_instaboot(unsigned long node)
+{
+	unsigned long version_code, len;
+	__be32 *prop;
+	char* p;
+
+	pr_debug("Looking for instaboot properties... ");
+
+	prop = of_get_flat_dt_prop(node, "instaboot,version_code", &len);
+	if (!prop) {
+		pr_info("no prop version_code \n");
+		return;
+	}
+	version_code = of_read_ulong(prop, len/4);
+	if (version_code != LINUX_VERSION_CODE) {
+		pr_info("version code unmatch\n");
+		return;
+	}
+
+	p = of_get_flat_dt_prop(node, "instaboot,sysname", &len);
+	if (p != NULL && len > 0) {
+		if (strncmp(init_utsname()->sysname, p,
+				min((int)len, __NEW_UTS_LEN))) {
+			pr_info("sysname unmatch\n");
+			return ;
+		}
+	} else {
+		pr_info("no prop sysname\n");
+		return;
+	}
+
+	p = of_get_flat_dt_prop(node, "instaboot,release", &len);
+	if (p != NULL && len > 0) {
+		if (strncmp(init_utsname()->release, p,
+				min((int)len, __NEW_UTS_LEN))) {
+			pr_info("release unmatch\n");
+			return ;
+		}
+	} else {
+		pr_info("no prop release\n");
+		return;
+	}
+
+	p = of_get_flat_dt_prop(node, "instaboot,version", &len);
+	if (p != NULL && len > 0) {
+		if (strncmp(init_utsname()->version, p,
+				min((int)len, __NEW_UTS_LEN))) {
+			pr_info("version unmatch\n");
+			return ;
+		}
+	} else {
+		pr_info("no prop version\n");
+		return;
+	}
+
+	p = of_get_flat_dt_prop(node, "instaboot,machine", &len);
+	if (p != NULL && len > 0) {
+		if (strncmp(init_utsname()->machine, p,
+				min((int)len, __NEW_UTS_LEN))) {
+			pr_info("machine unmatch\n");
+			return ;
+		}
+	} else {
+		pr_info("no prop machine\n");
+		return;
+	}
+
+	is_instabooting = 1;
+	return;
+}
+#else
+inline void early_init_dt_check_for_instaboot(unsigned long node)
+{
+}
+#endif
+
 /**
  * early_init_dt_scan_root - fetch the top level address and size cells
  */
@@ -974,6 +1055,8 @@ int __init early_init_dt_scan_chosen(unsigned long node, const char *uname,
 
 	early_init_dt_check_for_initrd(node);
 
+	early_init_dt_check_for_instaboot(node);
+
 	/* Retrieve command line */
 	p = of_get_flat_dt_prop(node, "bootargs", &l);
 	if (p != NULL && l > 0)
diff --git a/kernel/power/hibernate.c b/kernel/power/hibernate.c
index 55273f45aa67..c572a07cbcaf 100644
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@ -42,15 +42,15 @@ dev_t swsusp_resume_device;
 sector_t swsusp_resume_block;
 int in_suspend __nosavedata;
 
-#ifndef CONFIG_MK_SNAPSHOT_ONLY
 extern int osd_show_progress_bar(u32 percent);
 extern int osd_init_progress_bar(void);
-#endif
 
 extern void l2x0_resume(void);
 
 #define BOOT_TYPE_NORMAL	0
 #define BOOT_TYPE_FAST		1
+#define BOOT_TYPE_SNAPSHOTTED	2
+#define BOOT_TYPE_BOOTING	3
 
 static int boot_type __nosavedata;
 
@@ -687,10 +687,8 @@ int hibernate(void)
 	if (in_suspend) {
 		unsigned int flags = 0;
 
-#ifndef CONFIG_MK_SNAPSHOT_ONLY
 		osd_init_progress_bar();
 		osd_show_progress_bar(1);
-#endif
 
 		if (hibernation_mode == HIBERNATION_PLATFORM)
 			flags |= SF_PLATFORM_MODE;
@@ -703,9 +701,7 @@ int hibernate(void)
 			swsusp_resume_device = name_to_dev_t(resume_file);
 
 		pr_debug("PM: writing image.\n");
-#ifndef CONFIG_MK_SNAPSHOT_ONLY
 		osd_show_progress_bar(5);
-#endif
 		error = swsusp_write(flags);
 		swsusp_free();
 #ifndef CONFIG_MK_SNAPSHOT_ONLY
@@ -713,6 +709,7 @@ int hibernate(void)
 			power_down();
 #endif
 		in_suspend = 0;
+		boot_type = BOOT_TYPE_SNAPSHOTTED;
 		pm_restore_gfp_mask();
 	} else {
 		pr_debug("PM: Image restored successfully.\n");
@@ -754,9 +751,6 @@ int software_resume(void)
 {
 	int error;
 	unsigned int flags;
-
-	boot_type = BOOT_TYPE_NORMAL;
-
 	/*
 	 * If the user said "noresume".. bail out early.
 	 */
@@ -1084,7 +1078,25 @@ power_attr(reserved_size);
 static ssize_t boot_type_show(struct kobject *kobj,
 				  struct kobj_attribute *attr, char *buf)
 {
-	return sprintf(buf, "%s\n", boot_type ? "fast" : "normal");
+	char* type_str;
+	switch (boot_type) {
+	case BOOT_TYPE_NORMAL:
+		type_str = "normal";
+		break;
+	case BOOT_TYPE_FAST:
+		type_str = "fast";
+		break;
+	case BOOT_TYPE_SNAPSHOTTED:
+		type_str = "snapshotted";
+		break;
+	case BOOT_TYPE_BOOTING:
+		type_str = "instabooting";
+		break;
+	default:
+		type_str = "normal";
+		break;
+	}
+	return sprintf(buf, "%s\n", type_str);
 }
 
 static struct kobj_attribute boot_type_attr = {
@@ -1110,8 +1122,15 @@ static struct attribute_group attr_group = {
 	.attrs = g,
 };
 
+extern unsigned int is_instabooting;
+
 static int __init pm_disk_init(void)
 {
+	pr_info("instabooting: %d\n", is_instabooting);
+	if (is_instabooting)
+		boot_type = BOOT_TYPE_BOOTING;
+	else
+		boot_type = BOOT_TYPE_NORMAL;
 	return sysfs_create_group(power_kobj, &attr_group);
 }
 
@@ -1178,4 +1197,4 @@ __setup("resume_offset=", resume_offset_setup);
 __setup("resume=", resume_setup);
 __setup("hibernate=", hibernate_setup);
 __setup("resumewait", resumewait_setup);
-__setup("resumedelay=", resumedelay_setup);
+__setup("resumedelay=", resumedelay_setup);
\ No newline at end of file
-- 
2.19.0

