From 26db46d25ddd8c9b3efffdb89c783405e5fed954 Mon Sep 17 00:00:00 2001
From: Sandy Luo <sandy.luo@amlogic.com>
Date: Mon, 29 Jun 2015 16:51:52 +0800
Subject: [PATCH 5671/5965] PD#108251: picdec: fix 1080p display issue for
 NativieImagePlayer

Change-Id: I2d4f8f921d87b8906c8935e1787a921bdcc5eb4d
---
 drivers/amlogic/amports/picdec.c | 61 ++++++++++++++++++++++++--------
 drivers/amlogic/amports/picdec.h |  3 ++
 2 files changed, 50 insertions(+), 14 deletions(-)
 mode change 100755 => 100644 drivers/amlogic/amports/picdec.c
 mode change 100755 => 100644 drivers/amlogic/amports/picdec.h

diff --git a/drivers/amlogic/amports/picdec.c b/drivers/amlogic/amports/picdec.c
old mode 100755
new mode 100644
index 25008f2a22f3..fdc9dfcfab7d
--- a/drivers/amlogic/amports/picdec.c
+++ b/drivers/amlogic/amports/picdec.c
@@ -260,11 +260,23 @@ static int render_frame(ge2d_context_t *context,config_para_ex_t* ge2d_config)
 		//return -1;
 		index = fill_ptr;
 	}
+	if (picdec_device.p2p_mode) {
+		picdec_device.target_width  = picdec_device.disp_width;
+		picdec_device.target_height = picdec_device.disp_height;
+	} else {
+		if ((picdec_input.frame_width < picdec_device.disp_width) && (picdec_input.frame_height < picdec_device.disp_width)) {
+			picdec_device.target_width  = picdec_input.frame_width;
+			picdec_device.target_height = picdec_input.frame_height;
+		}else{
+			picdec_device.target_width  = picdec_device.disp_width;
+			picdec_device.target_height = picdec_device.disp_height;
+		}
+	}
 	//printk("render buffer index is %d!!!!!\n", index);	
 	new_vf = &vfpool[fill_ptr];
 	new_vf->canvas0Addr =new_vf->canvas1Addr = index2canvas(index);
-	new_vf->width = picdec_device.disp_width;
-	new_vf->height = picdec_device.disp_height;
+	new_vf->width = picdec_device.target_width;
+	new_vf->height = picdec_device.target_height;
 	new_vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD | VIDTYPE_VIU_NV21;
 	new_vf->duration_pulldown = 0;
 	new_vf->index = index;
@@ -303,8 +315,21 @@ static int render_frame_block(void)
 	//printk("render buffer index is %d$$$$$$$$$$$$$$$\n", index);		
 	new_vf = &vfpool[fill_ptr];
 	new_vf->canvas0Addr =new_vf->canvas1Addr = index2canvas(index);
-	new_vf->width = picdec_device.disp_width;
-	new_vf->height = picdec_device.disp_height;
+	if (picdec_device.p2p_mode) {
+		picdec_device.target_width  = picdec_device.disp_width;
+		picdec_device.target_height = picdec_device.disp_height;
+	} else {
+		if ((picdec_input.frame_width < picdec_device.disp_width) && (picdec_input.frame_height < picdec_device.disp_width)) {
+			picdec_device.target_width  = picdec_input.frame_width;
+			picdec_device.target_height = picdec_input.frame_height;
+		} else {
+			picdec_device.target_width  = picdec_device.disp_width;
+			picdec_device.target_height = picdec_device.disp_height;
+		}
+	}
+
+	new_vf->width = picdec_device.target_width;
+	new_vf->height = picdec_device.target_height;
 	new_vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD | VIDTYPE_VIU_NV21;
 	new_vf->duration_pulldown = 0;
 	new_vf->index = index;
@@ -629,8 +654,8 @@ int fill_color(vframe_t* vf, ge2d_context_t *context,config_para_ex_t* ge2d_conf
 	ge2d_config->dst_para.color = 0;
 	ge2d_config->dst_para.top = 0;
 	ge2d_config->dst_para.left = 0;
-	ge2d_config->dst_para.width = picdec_device.disp_width;
-	ge2d_config->dst_para.height = picdec_device.disp_height;	
+	ge2d_config->dst_para.width = picdec_device.target_width;
+	ge2d_config->dst_para.height = picdec_device.target_height;
 
 	if(ge2d_context_config_ex(context,ge2d_config)<0) {
 		printk("++ge2d configing error.\n");
@@ -638,8 +663,8 @@ int fill_color(vframe_t* vf, ge2d_context_t *context,config_para_ex_t* ge2d_conf
 	}
 	dst_top = 0;
 	dst_left = 0 ;
-	dst_width =  picdec_device.disp_width ;
-	dst_height = picdec_device.disp_height ;
+	dst_width =  picdec_device.target_width ;
+	dst_height = picdec_device.target_height ;
 
 	stretchblt_noalpha(context,0 ,0 ,640, 480,dst_left,dst_top,dst_width,dst_height);	
 	io_mapping_unmap_atomic( buffer_start );
@@ -889,14 +914,21 @@ int picdec_fill_buffer(vframe_t* vf, ge2d_context_t *context,config_para_ex_t* g
 	}
 	dst_top = 0;
 	dst_left = 0 ;
-	dst_width =  picdec_device.disp_width ;
-	dst_height = picdec_device.disp_height ;
+	dst_width =  picdec_device.target_width ;
+	dst_height = picdec_device.target_height ;
 	
 	rotate_adjust(frame_width ,frame_height,&dst_width ,&dst_height,picdec_input.rotate);
-	
-	dst_left = (picdec_device.disp_width -dst_width) >>1;	
-
-	dst_top = (picdec_device.disp_height -dst_height) >>1;
+	dst_width  = (dst_width +0x1) & ~0x1;
+	dst_height = (dst_height +0x1) & ~0x1;
+	if (picdec_device.p2p_mode) {
+		dst_left = (picdec_device.disp_width -dst_width) >>1;
+		dst_top = (picdec_device.disp_height -dst_height) >>1;
+	} else {
+		dst_left = 0;
+		dst_top = 0;
+		vf->width  = dst_width;
+		vf->height = dst_height;
+	}
 
 	stretchblt_noalpha(context,0 ,0 ,frame_width, frame_height,dst_left,dst_top,dst_width,dst_height);	
 	return 0;
@@ -1487,6 +1519,7 @@ static int picdec_driver_probe(struct platform_device *pdev)
 
 	set_picdec_buf_info((resource_size_t)buf_start,buf_size);
 	picdec_device.mapping = 0; 
+	picdec_device.p2p_mode = 0;
 	picdec_device.pdev = pdev;
 	init_picdec_device();
 	return 0;
diff --git a/drivers/amlogic/amports/picdec.h b/drivers/amlogic/amports/picdec.h
old mode 100755
new mode 100644
index 7235ad5069f3..4e4923502b5e
--- a/drivers/amlogic/amports/picdec.h
+++ b/drivers/amlogic/amports/picdec.h
@@ -43,6 +43,9 @@ typedef  struct picdec_device_s{
 	int disp_height;	
 	int frame_render;
 	int frame_post;
+	int target_width;
+	int target_height;
+	int p2p_mode ;
 	ge2d_context_t *context;
 	int cur_index;
 	struct io_mapping *mapping;
-- 
2.19.0

