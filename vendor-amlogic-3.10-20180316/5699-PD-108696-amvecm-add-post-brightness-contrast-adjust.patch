From de428c31b4b92fab66e8e26801edfc45cd2fd36c Mon Sep 17 00:00:00 2001
From: Dezhi Kong <dezhi.kong@amlogic.com>
Date: Tue, 14 Jul 2015 19:01:40 +0800
Subject: [PATCH 5699/5965] PD#108696: amvecm:add post brightness contrast
 adjust interface

Change-Id: I2568f465ed1ff6552ca6950385fe564f76442a75
---
 drivers/amlogic/amvecm/amvecm.c | 154 +++++++++++++++++++++++++++++---
 include/linux/amlogic/amvecm.h  |   4 +
 2 files changed, 147 insertions(+), 11 deletions(-)

diff --git a/drivers/amlogic/amvecm/amvecm.c b/drivers/amlogic/amvecm/amvecm.c
index 9093928475e6..1e4fbda08fed 100755
--- a/drivers/amlogic/amvecm/amvecm.c
+++ b/drivers/amlogic/amvecm/amvecm.c
@@ -191,6 +191,128 @@ static void amvecm_size_patch(void)
 
 }
 
+
+//video adj1
+static ssize_t video_adj1_brightness_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+    s32 val = (READ_VPP_REG(VPP_VADJ1_Y) >> 8) & 0x1ff;
+
+    val = (val << 23) >> 23;
+
+    return sprintf(buf, "%d\n", val);
+}
+
+static ssize_t video_adj1_brightness_store(struct class *cla, struct class_attribute *attr, const char *buf,
+                                      size_t count)
+{
+    size_t r;
+    int val;
+
+    r = sscanf(buf, "%d", &val);
+    if ((r != 1) || (val < -255) || (val > 255)) {
+        return -EINVAL;
+    }
+
+    WRITE_VPP_REG_BITS(VPP_VADJ1_Y, val, 8, 9);
+    WRITE_VPP_REG(VPP_VADJ_CTRL, VPP_VADJ1_EN);
+
+    return count;
+}
+
+static ssize_t video_adj1_contrast_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+    return sprintf(buf, "%d\n", (int)(READ_VPP_REG(VPP_VADJ1_Y) & 0xff) - 0x80);
+}
+
+static ssize_t video_adj1_contrast_store(struct class *cla, struct class_attribute *attr, const char *buf,
+                                    size_t count)
+{
+    size_t r;
+    int val;
+
+    r = sscanf(buf, "%d", &val);
+    if ((r != 1) || (val < -127) || (val > 127)) {
+        return -EINVAL;
+    }
+
+    val += 0x80;
+
+    WRITE_VPP_REG_BITS(VPP_VADJ1_Y, val, 0, 8);
+    WRITE_VPP_REG(VPP_VADJ_CTRL, VPP_VADJ1_EN);
+
+    return count;
+}
+
+//video adj2
+static ssize_t video_adj2_brightness_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+    s32 val = (READ_VPP_REG(VPP_VADJ2_Y) >> 8) & 0x1ff;
+
+    val = (val << 23) >> 23;
+
+    return sprintf(buf, "%d\n", val);
+}
+
+static ssize_t video_adj2_brightness_store(struct class *cla, struct class_attribute *attr, const char *buf,
+                                      size_t count)
+{
+    size_t r;
+    int val;
+
+    r = sscanf(buf, "%d", &val);
+    if ((r != 1) || (val < -255) || (val > 255)) {
+        return -EINVAL;
+    }
+
+    WRITE_VPP_REG_BITS(VPP_VADJ2_Y, val, 8, 9);
+    WRITE_VPP_REG(VPP_VADJ_CTRL, VPP_VADJ2_EN);
+
+    return count;
+}
+
+static ssize_t video_adj2_contrast_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+    return sprintf(buf, "%d\n", (int)(READ_VPP_REG(VPP_VADJ2_Y) & 0xff) - 0x80);
+}
+
+static ssize_t video_adj2_contrast_store(struct class *cla, struct class_attribute *attr, const char *buf,
+                                    size_t count)
+{
+    size_t r;
+    int val;
+
+    r = sscanf(buf, "%d", &val);
+    if ((r != 1) || (val < -127) || (val > 127)) {
+        return -EINVAL;
+    }
+
+    val += 0x80;
+
+    WRITE_VPP_REG_BITS(VPP_VADJ2_Y, val, 0, 8);
+    WRITE_VPP_REG(VPP_VADJ_CTRL, VPP_VADJ2_EN);
+
+    return count;
+}
+
+static ssize_t amvecm_usage_show(struct class *cla, struct class_attribute *attr, char *buf)
+{
+	pr_info("Usage:");
+	pr_info("brightness_val range:-255~255\n");
+	pr_info("contrast_val range:-127~127\n");
+	pr_info("saturation_val range:-128~128\n");
+	pr_info("hue_val range:-25~25\n");
+	pr_info("************video brightness & contrast & saturation_hue adj as flow************* \n");
+	pr_info("	echo brightness_val > /sys/class/amvecm/brightness1 \n");
+	pr_info("	echo contrast_val > /sys/class/amvecm/contrast1 \n");
+	pr_info("	echo saturation_val hue_val > /sys/class/amvecm/saturation_hue1 \n");
+	pr_info("************after video+osd blender, brightness & contrast & saturation_hue adj as flow************* \n");
+	pr_info("	echo brightness_val > /sys/class/amvecm/brightness2 \n");
+	pr_info("	echo contrast_val > /sys/class/amvecm/contrast2 \n");
+	pr_info("	echo saturation_val hue_val > /sys/class/amvecm/saturation_hue2 \n");
+	return 0;
+}
+
+
 static void vd1_brightness_contrast(signed int brightness, signed int contrast)
 {
 	signed int ao0 =  -64, g00 = 1024, g01 =    0, g02 =    0, po0 =  64;
@@ -894,12 +1016,12 @@ static int parse_para_pq(const char *para, int para_num, int *result)
 	return count;
 }
 
-static ssize_t amvecm_saturation_hue_pre_show(struct class *cla, struct class_attribute *attr, char *buf)
+static ssize_t video_adj1_saturation_hue_show(struct class *cla, struct class_attribute *attr, char *buf)
 {
 	return snprintf(buf, 20, "%d %d\n", saturation_pre, hue_pre);
 }
 
-static ssize_t amvecm_saturation_hue_pre_store(struct class *cla, struct class_attribute *attr, const char *buf,size_t count)
+static ssize_t video_adj1_saturation_hue_store(struct class *cla, struct class_attribute *attr, const char *buf,size_t count)
 {
 	int parsed[2];
 	int i, ma, mb, mab, mc, md;
@@ -931,7 +1053,7 @@ static ssize_t amvecm_saturation_hue_pre_store(struct class *cla, struct class_a
 	if (mb < -512) mb = -512;
 	mab =  ((ma & 0x3ff) << 16) | (mb & 0x3ff);
 	printk("\n[amvideo..] saturation_pre:%d hue_pre:%d mab:%x\n", saturation_pre,hue_pre,mab);
-	WRITE_VPP_REG(VPP_VADJ2_MA_MB, mab);
+	WRITE_VPP_REG(VPP_VADJ1_MA_MB, mab);
 	mc = (s16)((mab<<22)>>22); // mc = -mb
 	mc = 0 - mc;
 	if (mc > 511)  mc = 511;
@@ -943,12 +1065,12 @@ static ssize_t amvecm_saturation_hue_pre_store(struct class *cla, struct class_a
 	return count;
 }
 
-static ssize_t amvecm_saturation_hue_post_show(struct class *cla, struct class_attribute *attr, char *buf)
+static ssize_t video_adj2_saturation_hue_show(struct class *cla, struct class_attribute *attr, char *buf)
 {
 	return snprintf(buf, 20, "%d %d\n", saturation_post, hue_post);
 }
 
-static ssize_t amvecm_saturation_hue_post_store(struct class *cla, struct class_attribute *attr, const char *buf,size_t count)
+static ssize_t video_adj2_saturation_hue_store(struct class *cla, struct class_attribute *attr, const char *buf,size_t count)
 {
 	int parsed[2];
 	int i, ma, mb, mab, mc, md;
@@ -1221,18 +1343,28 @@ static struct class_attribute amvecm_class_attrs[] = {
 	__ATTR(saturation_hue,S_IRUGO | S_IWUSR,
 		amvecm_saturation_hue_show,
 		amvecm_saturation_hue_store),
-	__ATTR(saturation_hue_pre,S_IRUGO | S_IWUSR,
-		amvecm_saturation_hue_pre_show,
-		amvecm_saturation_hue_pre_store),
-	__ATTR(saturation_hue_post,S_IRUGO | S_IWUSR,
-		amvecm_saturation_hue_post_show,
-		amvecm_saturation_hue_post_store),
+	__ATTR(saturation_hue1,S_IRUGO | S_IWUSR,
+		video_adj1_saturation_hue_show,
+		video_adj1_saturation_hue_store),
+	__ATTR(saturation_hue2,S_IRUGO | S_IWUSR,
+		video_adj2_saturation_hue_show,
+		video_adj2_saturation_hue_store),
 	__ATTR(cm2,S_IRUGO | S_IWUSR,
 		amvecm_cm2_show,
 		amvecm_cm2_store),
 	__ATTR(gamma,S_IRUGO | S_IWUSR,
 		amvecm_gamma_show,
 		amvecm_gamma_store),
+	__ATTR(brightness1, S_IRUGO | S_IWUSR,
+		video_adj1_brightness_show, video_adj1_brightness_store),
+	__ATTR(contrast1, S_IRUGO | S_IWUSR,
+		video_adj1_contrast_show, video_adj1_contrast_store),
+	__ATTR(brightness2, S_IRUGO | S_IWUSR,
+		video_adj2_brightness_show, video_adj2_brightness_store),
+	__ATTR(contrast2, S_IRUGO | S_IWUSR,
+		video_adj2_contrast_show, video_adj2_contrast_store),
+	__ATTR(help, S_IRUGO | S_IWUSR,
+		amvecm_usage_show, NULL),
 #if (MESON_CPU_TYPE >= MESON_CPU_TYPE_MESONG9TV)
 	__ATTR(sync_3d,S_IRUGO | S_IWUSR,
 		amvecm_3d_sync_show,
diff --git a/include/linux/amlogic/amvecm.h b/include/linux/amlogic/amvecm.h
index e93765d60f0e..308c8a87a766 100755
--- a/include/linux/amlogic/amvecm.h
+++ b/include/linux/amlogic/amvecm.h
@@ -62,6 +62,10 @@
 #define FLAG_REG_MAP1           (1 <<  1)
 #define FLAG_REG_MAP0           (1 <<  0)
 
+#define VPP_VADJ2_BLMINUS_EN        (1 << 3)
+#define VPP_VADJ2_EN                (1 << 2)
+#define VPP_VADJ1_BLMINUS_EN        (1 << 1)
+#define VPP_VADJ1_EN                (1 << 0)
 
 #define AMVECM_IOC_MAGIC  'C'
 
-- 
2.19.0

