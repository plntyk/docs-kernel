From 3a9b0e9d9bc3a0a90e5ffa9333d6758124576cde Mon Sep 17 00:00:00 2001
From: Tao Zeng <tao.zeng@amlogic.com>
Date: Thu, 6 Aug 2015 13:33:13 +0800
Subject: [PATCH 5756/5965] PD#110484: cec: add tv support cec check

1. add tv support cec check before allocate CEC logical address;
2. fix bug of wakelock if tv not support cec;
3. add sysfs tv_cec_support for upper layer UI usage.

Change-Id: Ib9f9b8cb34b06a4c0ad421b27d2f76c047d4d003
---
 .../mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c   |  29 ++-
 .../mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c  |  29 ++-
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c        |   9 +
 drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c    | 179 +++++++++++-------
 include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h   |   3 +-
 .../linux/amlogic/hdmi_tx/hdmi_tx_module.h    |   2 +-
 6 files changed, 168 insertions(+), 83 deletions(-)

diff --git a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
index 4515585fda59..e2242deb8b15 100755
--- a/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -42,6 +42,11 @@ struct cec_tx_msg {
 
 struct cec_tx_msg cec_tx_msgs = {};
 
+void cec_logicaddr_set(int logicaddr)
+{
+    aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | (logicaddr & 0xf));
+}
+
 void cec_disable_irq(void)
 {
     // disable all AO_CEC interrupt sources
@@ -124,6 +129,7 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
     int ret = -1;
     int pos;
     int rx_stat;
+    hdmitx_dev_t *hdev;
 
     rx_stat = aocec_rd_reg(CEC_RX_MSG_STATUS);
     if ((RX_DONE != rx_stat) || (1 != aocec_rd_reg(CEC_RX_NUM_MSG)))
@@ -142,6 +148,12 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
     }
 
     ret = rx_stat;
+    hdev = get_hdmitx_device();
+    if (hdev && !hdev->tv_cec_support) {
+        /* received msg from TV */
+        if (!(msg[0] & 0xf0))
+            hdev->tv_cec_support = 1;
+    }
 
     if (cec_msg_dbg_en  == 1)
     {
@@ -361,6 +373,9 @@ void tx_irq_handle(void)
             } else {
                 hdmi_print(INF, CEC "TX retry too much, abort msg\n");
                 cec_tx_msgs.send_idx = (cec_tx_msgs.send_idx + 1) & CEC_TX_MSG_BUF_MASK;
+                if (cec_tx_msgs.send_idx != cec_tx_msgs.queue_idx) {
+                    cec_ll_trigle_tx();
+                }
             }
         }
         break;
@@ -382,8 +397,17 @@ void tx_irq_handle(void)
 int cec_ll_tx(const unsigned char *msg, unsigned char len)
 {
     int ret = 0;
+    hdmitx_dev_t *hdev;
+
     if (cec_int_disable_flag)
         return 2;
+
+    /*
+     * do not send messanges if tv is not support CEC
+     */
+    hdev = get_hdmitx_device();
+    if (hdev && !hdev->tv_cec_support)
+        return 0;
 
     mutex_lock(&cec_mutex);
     cec_queue_tx_msg(msg, len);
@@ -399,7 +423,6 @@ void cec_polling_online_dev(int log_addr, int *bool)
     unsigned char msg[1];
     int retry = 5;
 
-    cec_global_info.my_node_index = log_addr;
     msg[0] = (log_addr<<4) | log_addr;
 
     aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | 0xf);
@@ -427,10 +450,6 @@ void cec_polling_online_dev(int log_addr, int *bool)
         cec_global_info.cec_node_info[log_addr].dev_type = cec_log_addr_to_dev_type(log_addr);
         *bool = 1;
     }
-    if (*bool == 0)
-    {
-        aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | log_addr);
-    }
     hdmi_print(INF, CEC "CEC: poll online logic device: 0x%x BOOL: %d\n", log_addr, *bool);
 
 }
diff --git a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
index 8c311c5683d6..555ca88543fa 100755
--- a/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
+++ b/arch/arm/mach-meson8b/hdmi_tx_hw/hdmi_tx_cec_hw.c
@@ -42,6 +42,11 @@ struct cec_tx_msg {
 
 struct cec_tx_msg cec_tx_msgs = {};
 
+void cec_logicaddr_set(int logicaddr)
+{
+    aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | (logicaddr & 0xf));
+}
+
 void cec_disable_irq(void)
 {
     // disable all AO_CEC interrupt sources
@@ -149,6 +154,7 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
     int ret = -1;
     int pos;
     int rx_stat;
+    hdmitx_dev_t *hdev;
 
     rx_stat = aocec_rd_reg(CEC_RX_MSG_STATUS);
     if ((RX_DONE != rx_stat) || (1 != aocec_rd_reg(CEC_RX_NUM_MSG)))
@@ -167,6 +173,12 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len)
     }
 
     ret = rx_stat;
+    hdev = get_hdmitx_device();
+    if (hdev && !hdev->tv_cec_support) {
+        /* received msg from TV */
+        if (!(msg[0] & 0xf0))
+            hdev->tv_cec_support = 1;
+    }
 
     if (cec_msg_dbg_en  == 1)
     {
@@ -386,6 +398,9 @@ void tx_irq_handle(void)
             } else {
                 hdmi_print(INF, CEC "TX retry too much, abort msg\n");
                 cec_tx_msgs.send_idx = (cec_tx_msgs.send_idx + 1) & CEC_TX_MSG_BUF_MASK;
+                if (cec_tx_msgs.send_idx != cec_tx_msgs.queue_idx) {
+                    cec_ll_trigle_tx();
+                }
             }
         }
         break;
@@ -407,9 +422,18 @@ void tx_irq_handle(void)
 int cec_ll_tx(const unsigned char *msg, unsigned char len)
 {
     int ret = 0;
+    hdmitx_dev_t *hdev;
+
     if (cec_int_disable_flag)
         return 2;
 
+    /*
+     * do not send messanges if tv is not support CEC
+     */
+    hdev = get_hdmitx_device();
+    if (hdev && !hdev->tv_cec_support)
+        return 0;
+
     mutex_lock(&cec_mutex);
     cec_queue_tx_msg(msg, len);
     cec_ll_trigle_tx();
@@ -424,7 +448,6 @@ void cec_polling_online_dev(int log_addr, int *bool)
     unsigned char msg[1];
     int retry = 5;
 
-    cec_global_info.my_node_index = log_addr;
     msg[0] = (log_addr<<4) | log_addr;
 
     aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | 0xf);
@@ -452,10 +475,6 @@ void cec_polling_online_dev(int log_addr, int *bool)
         cec_global_info.cec_node_info[log_addr].dev_type = cec_log_addr_to_dev_type(log_addr);
         *bool = 1;
     }
-    if (*bool == 0)
-    {
-        aocec_wr_reg(CEC_LOGICAL_ADDR0, (0x1 << 4) | log_addr);
-    }
     hdmi_print(INF, CEC "CEC: poll online logic device: 0x%x BOOL: %d\n", log_addr, *bool);
 
 }
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
index 1223cdd127c0..eb31ec4758ab 100644
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx.c
@@ -970,6 +970,12 @@ void hdmi_print(int dbg_lvl, const char *fmt, ...)
     }
 }
 
+static ssize_t show_tv_support_cec(struct device *dev, struct device_attribute *attr, char *buf)
+{
+    return snprintf(buf, PAGE_SIZE, "%d\n", hdmitx_device.tv_cec_support);
+}
+
+
 static DEVICE_ATTR(disp_mode, S_IWUSR | S_IRUGO | S_IWGRP, show_disp_mode, store_disp_mode);
 static DEVICE_ATTR(aud_mode, S_IWUSR | S_IRUGO, show_aud_mode, store_aud_mode);
 static DEVICE_ATTR(edid, S_IWUSR | S_IRUGO, show_edid, store_edid);
@@ -987,6 +993,7 @@ static DEVICE_ATTR(cec_config, S_IWUSR | S_IRUGO | S_IWGRP, show_cec_config, sto
 //static DEVICE_ATTR(cec_config, S_IWUGO | S_IRUGO , NULL, store_cec_config);
 static DEVICE_ATTR(cec_active_status, S_IWUSR | S_IRUGO , show_cec_active_status, NULL);
 static DEVICE_ATTR(cec_lang_config, S_IWUSR | S_IRUGO | S_IWGRP, show_cec_lang_config, store_cec_lang_config);
+static DEVICE_ATTR(tv_support_cec, S_IRUGO , show_tv_support_cec, NULL);
 
 /*****************************
 *    hdmitx display client interface
@@ -1667,6 +1674,7 @@ static int amhdmitx_probe(struct platform_device *pdev)
     ret=device_create_file(hdmitx_dev, &dev_attr_cec_config);
     ret=device_create_file(hdmitx_dev, &dev_attr_cec_lang_config);
     ret=device_create_file(hdmitx_dev, &dev_attr_cec_active_status);
+    ret=device_create_file(hdmitx_dev, &dev_attr_tv_support_cec);
 
     if (hdmitx_dev == NULL) {
         hdmi_print(ERR, SYS "device_create create error\n");
@@ -1793,6 +1801,7 @@ static int amhdmitx_remove(struct platform_device *pdev)
     device_remove_file(hdmitx_dev, &dev_attr_hpd_state);
     device_remove_file(hdmitx_dev, &dev_attr_support_3d);
     device_remove_file(hdmitx_dev, &dev_attr_cec);
+    device_remove_file(hdmitx_dev, &dev_attr_tv_support_cec);
 
     cdev_del(&hdmitx_device.cdev);
 
diff --git a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
index 9ec3feb4897b..c4822856fd65 100755
--- a/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
+++ b/drivers/amlogic/hdmi/hdmi_tx/hdmi_tx_cec.c
@@ -58,10 +58,11 @@
 #include <linux/amlogic/hdmi_tx/hdmi_tx_cec.h>
 #include <linux/notifier.h>
 #include <linux/reboot.h>
+#define CEC_FRAME_DELAY     msecs_to_jiffies(400)
 extern hdmitx_dev_t * get_hdmitx_device(void);
 static hdmitx_dev_t* hdmitx_device = NULL;
 static struct workqueue_struct *cec_workqueue = NULL;
-static struct hrtimer cec_late_timer;
+static struct completion menu_comp;
 static unsigned char rx_msg[MAX_MSG];
 static unsigned char rx_len;
 static int cec_suspend = 0;
@@ -79,10 +80,29 @@ bool cec_msg_dbg_en = 1;
 ssize_t cec_lang_config_state(struct switch_dev *sdev, char *buf)
 {
     int pos=0;
-    pos+=snprintf(buf+pos, PAGE_SIZE, "%c%c%c\n", (cec_global_info.cec_node_info[cec_global_info.my_node_index].menu_lang >>16) & 0xff, 
-                                                  (cec_global_info.cec_node_info[cec_global_info.my_node_index].menu_lang >> 8) & 0xff,
-                                                  (cec_global_info.cec_node_info[cec_global_info.my_node_index].menu_lang >> 0) & 0xff);
-    return pos;
+    int retry = 0;
+    int idx = cec_global_info.my_node_index;
+    int ret = 0, language;
+
+    /*
+     * try to get tv menu language if we don't know which language
+     * current is
+     */
+    if (!(hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)))
+        return 0;
+    while (retry < 5 && !cec_global_info.cec_node_info[idx].menu_lang) {
+        cec_get_menu_language_smp();
+        ret = wait_for_completion_timeout(&menu_comp, CEC_FRAME_DELAY);
+        if (ret)
+            break;
+        retry++;
+    }
+    language = cec_global_info.cec_node_info[idx].menu_lang;
+    pos += snprintf(buf + pos, PAGE_SIZE, "%c%c%c\n",
+                   (language >> 16) & 0xff,
+                   (language >>  8) & 0xff,
+                   (language >>  0) & 0xff);
+    return pos;
 };
 
 struct switch_dev lang_dev = {    // android ics switch device
@@ -212,6 +232,7 @@ void cec_isr_post_process(void)
     /* isr post process */
     while (cec_global_info.cec_rx_msg_buf.rx_read_pos != cec_global_info.cec_rx_msg_buf.rx_write_pos)
     {
+        hdmi_print(INF, CEC "cec handle rx msgs\n");
         cec_handle_message(&(cec_global_info.cec_rx_msg_buf.cec_rx_message[cec_global_info.cec_rx_msg_buf.rx_read_pos]));
         (cec_global_info.cec_rx_msg_buf.rx_read_pos == cec_global_info.cec_rx_msg_buf.rx_buf_size - 1) ? (cec_global_info.cec_rx_msg_buf.rx_read_pos = 0) : (cec_global_info.cec_rx_msg_buf.rx_read_pos++);
     }
@@ -228,19 +249,18 @@ void cec_usr_cmd_post_process(void)
     }
 }
 
-static int detect_tv_support_cec(unsigned addr)
-{
-    unsigned int ret = 0;
-    unsigned char msg[1];
-    msg[0] = (addr<<4) | 0x0;       // 0x0, TV's root address
-    ret = cec_ll_tx_polling(msg, 1);
-    cec_hw_reset();
-    hdmi_print(INF, CEC "tv%s have CEC feature\n", ret ? " " : " don\'t ");
-    hdmitx_device->tv_cec_support = (ret == TX_DONE) ? 1 : 0;
-    return hdmitx_device->tv_cec_support;
-}
+static int detect_tv_support_cec(unsigned addr)
+{
+    unsigned int ret = 0;
+    unsigned char msg[1];
+    msg[0] = (addr << 4) | 0x0;	/* 0x0, TV's root address */
+    cec_polling_online_dev(msg[0], &ret);
+    hdmi_print(INF, CEC "TV %s support CEC\n", ret ? "is" : "not");
+    hdmitx_device->tv_cec_support = ret;
+    return hdmitx_device->tv_cec_support;
+}
 
-void cec_node_init(hdmitx_dev_t* hdmitx_device)
+int cec_node_init(hdmitx_dev_t* hdmitx_device)
 {
     struct vendor_info_data *vend_data = NULL;
 
@@ -256,7 +276,7 @@ void cec_node_init(hdmitx_dev_t* hdmitx_device)
     if ((hdmitx_device->cec_init_ready == 0) || (hdmitx_device->hpd_state == 0))
     {   // If no connect, return directly
         hdmi_print(INF, CEC "CEC not ready\n");
-        return;
+        return -1;
     }
     else
     {
@@ -291,7 +311,7 @@ void cec_node_init(hdmitx_dev_t* hdmitx_device)
     }
 
     if (!(hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)))
-        return ;
+        return -1;
 
     hdmi_print(INF, CEC "cec_func_config: 0x%x; P_AO_DEBUG_REG0:0x%x\n", hdmitx_device->cec_func_config, aml_read_reg32(P_AO_DEBUG_REG0));
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
@@ -321,8 +341,14 @@ void cec_node_init(hdmitx_dev_t* hdmitx_device)
                    (((hdmitx_device->hdmi_info.vsdb_phy_addr.b) & 0xf) << 8)  |
                    (((hdmitx_device->hdmi_info.vsdb_phy_addr.c) & 0xf) << 4)  |
                    (((hdmitx_device->hdmi_info.vsdb_phy_addr.d) & 0xf) << 0);
-
-
+
+    /*
+     * if TV is not support CEC, we do not need to try allocate CEC
+     * logical address
+     */
+    if (!(hdmitx_device->tv_cec_support) && (!detect_tv_support_cec(0xE)))
+        return -1;
+
     for (i = 0; i < 3; i++)
     {
         hdmi_print(INF, CEC "CEC: start poll dev\n");
@@ -331,6 +357,7 @@ void cec_node_init(hdmitx_dev_t* hdmitx_device)
         if (bool == 0)
         {   // 0 means that no any respond
             // If VSDB is not valid,use last or default physical address.
+            cec_logicaddr_set(player_dev[i]);
             if (hdmitx_device->hdmi_info.vsdb_phy_addr.valid == 0)
             {
                 hdmi_print(INF, CEC "no valid cec physical address\n");
@@ -397,20 +424,24 @@ void cec_node_init(hdmitx_dev_t* hdmitx_device)
             //{
             //    break;
             //}
-            cec_get_menu_language_smp();
-
             cec_active_source_smp();
 
             cec_menu_status_smp(DEVICE_MENU_ACTIVE);
 
+            msleep(100);
+            cec_get_menu_language_smp();
+
             cec_global_info.cec_node_info[cec_global_info.my_node_index].menu_status = DEVICE_MENU_ACTIVE;
             break;
         }
     }
-    if (bool == 1)
+    if (bool == 1) {
         hdmi_print(INF, CEC "Can't get a valid logical address\n");
-    else
+        return -1;
+    } else {
         hdmi_print(INF, CEC "cec node init: cec features ok !\n");
+        return 0;
+    }
 }
 
 void cec_node_uninit(hdmitx_dev_t* hdmitx_device)
@@ -422,53 +453,60 @@ void cec_node_uninit(hdmitx_dev_t* hdmitx_device)
     cec_global_info.cec_node_info[cec_global_info.my_node_index].power_status = POWER_STANDBY;
 }
 
-static enum hrtimer_restart cec_late_check_rx_buffer(struct hrtimer *timer)
-{
-    int ret;
-
-    ret = cec_rx_buf_check();
-    if (ret) {
-        /*
-         * start another check if rx buffer is full
-         */
-        if ((-1) == cec_ll_rx(rx_msg, &rx_len)) {
-            hdmi_print(INF, CEC, "buffer got unrecorgnized msg\n");
-            cec_rx_buf_clear();
-        } else {
-            register_cec_rx_msg(rx_msg, rx_len);
-            queue_work(cec_workqueue, &hdmitx_device->cec_work);
-        }
-    }
-    if (hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)) {
-        hrtimer_start(&cec_late_timer, ktime_set(0, 384*1000*1000), HRTIMER_MODE_REL);
-    }
-
-    return HRTIMER_NORESTART;
-}
+static int cec_late_check_rx_buffer(void)
+{
+    int ret;
+    struct delayed_work *dwork = &hdmitx_device->cec_work;
+
+    ret = cec_rx_buf_check();
+    if (!ret)
+        return 0;
+    /*
+     * start another check if rx buffer is full
+     */
+    if ((-1) == cec_ll_rx(rx_msg, &rx_len)) {
+        hdmi_print(INF, CEC, "buffer got unrecorgnized msg\n");
+        cec_rx_buf_clear();
+        return 0;
+    } else {
+        register_cec_rx_msg(rx_msg, rx_len);
+        mod_delayed_work(cec_workqueue, dwork, 0);
+        return 1;
+    }
+}
 
 static void cec_task(struct work_struct *work)
 {
-    extern void dump_hdmi_cec_reg(void);
-    hdmitx_dev_t* hdmitx_device = (hdmitx_dev_t*)container_of(work, hdmitx_dev_t, cec_work);
+    hdmitx_dev_t *hdmitx_device;
+    struct delayed_work *dwork;
+    int    ret;
 
-    // Get logical address
-    hdmi_print(INF, CEC "CEC task process\n");
-    if ((hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)) &&
-        !cec_global_info.cec_flag.cec_init_flag) {
-        msleep_interruptible(15000);
-        cec_global_info.cec_flag.cec_init_flag = 1;
+    hdmitx_device = container_of(work, hdmitx_dev_t, cec_work.work);
+    dwork = &hdmitx_device->cec_work;
+    /*
+     * do not process cec task if not enabled
+     */
+    if (!(hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)))
+        return;
+
+    /*
+     * some tv can't be ping OK if it's CEC funtion is disabled by
+     * TV settings, but when CEC function is reopened, we should
+     * init CEC logical address
+     */
+    if (!cec_global_info.my_node_index) {
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
         cec_gpi_init();
 #endif
-        cec_node_init(hdmitx_device);
+        ret = cec_node_init(hdmitx_device);
+        if (ret < 0) {
+            queue_delayed_work(cec_workqueue, dwork, msecs_to_jiffies(20 * 1000));
+            return;
+        }
     }
-    //cec_rx_buf_check();
     cec_isr_post_process();
-    //cec_usr_cmd_post_process();
-    if (hdmitx_device->cec_func_config & (1 << CEC_FUNC_MSAK)) {
-        /* start timer for late cec rx buffer check */
-        hrtimer_start(&cec_late_timer, ktime_set(0, 384*1000*1000), HRTIMER_MODE_REL);
-    }
+    if (!cec_late_check_rx_buffer())
+        queue_delayed_work(cec_workqueue, dwork, CEC_FRAME_DELAY);
 }
 
 /***************************** cec low level code end *****************************/
@@ -798,7 +836,7 @@ static irqreturn_t cec_isr_handler(int irq, void *dev_instance)
     if (!cec_suspend) {      // do not process messages if suspend
         hdmitx = (hdmitx_dev_t*)dev_instance;
         register_cec_rx_msg(rx_msg, rx_len);
-        queue_work(cec_workqueue, &hdmitx->cec_work);
+        mod_delayed_work(cec_workqueue, &hdmitx->cec_work, 0);
     }
     //cec_rx_buf_check();
 
@@ -1267,6 +1305,7 @@ void cec_set_menu_language(cec_rx_message_t* pcec_message)
         hdmi_print(INF, CEC "cec_set_menu_language:%c.%c.%c\n", (cec_global_info.cec_node_info[index].menu_lang >>16) & 0xff,
                                                                 (cec_global_info.cec_node_info[index].menu_lang >> 8) & 0xff,
                                                                 (cec_global_info.cec_node_info[index].menu_lang >> 0) & 0xff);
+        complete(&menu_comp);
     }
 }
 
@@ -1789,15 +1828,14 @@ static int aml_cec_probe(struct platform_device *pdev)
     cec_global_info.cec_rx_msg_buf.rx_buf_size = sizeof(cec_global_info.cec_rx_msg_buf.cec_rx_message)/sizeof(cec_global_info.cec_rx_msg_buf.cec_rx_message[0]);
 
     cec_global_info.hdmitx_device = hdmitx_device;
-
+    init_completion(&menu_comp);
+    wake_lock_init(&cec_lock, WAKE_LOCK_SUSPEND, "hdmi_cec");
     cec_workqueue = create_workqueue("cec_work");
     if (cec_workqueue == NULL) {
         printk("create work queue failed\n");
         return -EFAULT;
     }
-    INIT_WORK(&hdmitx_device->cec_work, cec_task);
-    hrtimer_init(&cec_late_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
-    cec_late_timer.function = cec_late_check_rx_buffer;
+    INIT_DELAYED_WORK(&hdmitx_device->cec_work, cec_task);
 #if MESON_CPU_TYPE == MESON_CPU_TYPE_MESON6
     if (request_irq(INT_HDMI_CEC, &cec_isr_handler,
     IRQF_SHARED, "amhdmitx-cec",(void *)hdmitx_device))
@@ -1847,12 +1885,11 @@ static int aml_cec_probe(struct platform_device *pdev)
 
     register_early_suspend(&hdmitx_cec_early_suspend_handler);
 #endif
-    wake_lock_init(&cec_lock, WAKE_LOCK_SUSPEND, "hdmi_cec");
 
     hdmitx_device->cec_init_ready = 1;
     cec_global_info.cec_flag.cec_init_flag = 0;
     hdmi_print(INF, CEC "hdmitx_device->cec_init_ready:0x%x", hdmitx_device->cec_init_ready);
-    queue_work(cec_workqueue, &hdmitx_device->cec_work);    // for init
+    queue_delayed_work(cec_workqueue, &hdmitx_device->cec_work, 0);   // for init
     cec_reboot_nb.notifier_call = cec_reboot;
     register_reboot_notifier(&cec_reboot_nb);
     return 0;
@@ -1879,7 +1916,7 @@ static int aml_cec_remove(struct platform_device *dev)
     }
 
     if (cec_workqueue) {
-        cancel_work_sync(&hdmitx_device->cec_work);
+        cancel_delayed_work_sync(&hdmitx_device->cec_work);
         destroy_workqueue(cec_workqueue);
     }
     hdmitx_device->cec_init_ready = 0;
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h b/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h
index 3ce4d82dc983..2bfd3df68830 100755
--- a/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_tx_cec.h
@@ -528,8 +528,9 @@ int cec_ll_rx( unsigned char *msg, unsigned char *len);
 int cec_rx_irq_handle(unsigned char *msg, unsigned char *len);
 unsigned int cec_intr_stat(void);
 
+void cec_logicaddr_set(int logicaddr);
 void cec_test_function(unsigned char* arg, unsigned char arg_cnt);
-void cec_node_init(hdmitx_dev_t* hdmitx_device);
+int  cec_node_init(hdmitx_dev_t* hdmitx_device);
 void cec_node_uninit(hdmitx_dev_t* hdmitx_device);
 void dumpaocecreg(void);
 void raocec(unsigned int addr);
diff --git a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
index 5b942121006d..5e88aac67f70 100644
--- a/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
+++ b/include/linux/amlogic/hdmi_tx/hdmi_tx_module.h
@@ -101,7 +101,7 @@ typedef struct hdmi_tx_dev_s {
     struct delayed_work work_hpd_plugin;
     struct delayed_work work_hpd_plugout;
     struct work_struct work_internal_intr;
-	struct work_struct cec_work;
+	struct delayed_work cec_work;
     wait_queue_head_t cec_wait_rx;
     struct {
         void (*SetPacket)(int type, unsigned char* DB, unsigned char* HB);
-- 
2.19.0

