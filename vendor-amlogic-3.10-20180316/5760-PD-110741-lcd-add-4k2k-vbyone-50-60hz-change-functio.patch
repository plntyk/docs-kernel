From ff5dd12ef38ebaa9ab756b7aea94ee00f4b7bffc Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Mon, 10 Aug 2015 14:38:17 +0800
Subject: [PATCH 5760/5965] PD#110741: lcd: add 4k2k vbyone 50/60hz change
 function

Change-Id: I280e731b46c96e06664a650e4c3681de979434fe
---
 arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd  |   5 +
 .../boot/dts/amlogic/mesong9bb_t828_skt.dtd   |   5 +
 arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd  |   5 +
 drivers/amlogic/display/lcd/aml_lcd_tv.c      |  55 +++-
 drivers/amlogic/display/lcd/aml_lcd_tv.h      |   5 +-
 .../display/lcd/aml_tv_lcd_port/lcd_common.c  |  21 +-
 .../display/lcd/aml_tv_lcd_port/lcd_common.h  |  20 +-
 .../display/lcd/aml_tv_lcd_port/lvds_drv.c    |   2 +-
 .../display/lcd/aml_tv_lcd_port/vbyone_drv.c  | 297 +++++++++++++++---
 9 files changed, 339 insertions(+), 76 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
index 1081de278acf..b1586ec8bd0c 100644
--- a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
@@ -739,6 +739,7 @@
 			pixel_clock=<148000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1920 1080 2200 1125 148 41>; /**h_active v_active h_period v_period h_blank v_blank*/
 			lcd_timing = <0x500404ad 0x00414400 0x71486980 44 2156 0 1079 2100 2164 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 1 1 0x3>;	/** lvds_bits lvds_repack pn_swap dual_port port_reverse lvds_fifo_wr_mode*/
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -750,6 +751,7 @@
 			pixel_clock=<80000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1648 810 280 42>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -760,6 +762,7 @@
 			interface="lvds";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <1366 768 1560 806 190 30>;
 			lcd_timing = <0x500404ad 0x00454400 0x71486980 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -771,6 +774,7 @@
 			pixel_clock=<82000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1696 806 300 38>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -781,6 +785,7 @@
 			interface="vbyone";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <3840 2160 4400 2250 557 90>;
 			lcd_timing = <0xffffffff 0xffffffff 0xffffffff 47 80 47 80 47 47 3 9>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			vbyone_att = <8 4 2 4>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
diff --git a/arch/arm/boot/dts/amlogic/mesong9bb_t828_skt.dtd b/arch/arm/boot/dts/amlogic/mesong9bb_t828_skt.dtd
index f499da820dcf..fdfedc4492e5 100644
--- a/arch/arm/boot/dts/amlogic/mesong9bb_t828_skt.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9bb_t828_skt.dtd
@@ -745,6 +745,7 @@
 			interface="lvds";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <1920 1080 2200 1125 148 41>; /**h_active v_active h_period v_period h_blank v_blank*/
 			lcd_timing = <0x500404ad 0x00414400 0x71486900 44 2156 0 1079 2100 2164 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 1 1 0x3>;	/** lvds_bits lvds_repack pn_swap dual_port port_reverse lvds_fifo_wr_mode*/
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -755,6 +756,7 @@
 			interface="lvds";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <1366 768 1648 810 280 42>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -765,6 +767,7 @@
 			interface="lvds";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <1366 768 1560 806 190 30>;
 			lcd_timing = <0x500404ad 0x00454400 0x71486900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -775,6 +778,7 @@
 			interface="lvds";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <1366 768 1696 806 300 38>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -785,6 +789,7 @@
 			interface="vbyone";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <3840 2160 4400 2250 557 90>;
 			lcd_timing = <0xffffffff 0xffffffff 0xffffffff 47 80 47 80 47 47 3 9>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			vbyone_att = <8 4 2 4>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
index 6b724d0ba6dd..88eadae209a1 100644
--- a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
@@ -768,6 +768,7 @@
 			pixel_clock=<148000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1920 1080 2200 1125 148 41>; /**h_active v_active h_period v_period h_blank v_blank*/
 			lcd_timing = <0x500404ad 0x00414400 0x71486900 44 2156 0 1079 2100 2164 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 1 1 0x3>;	/** lvds_bits lvds_repack pn_swap dual_port port_reverse lvds_fifo_wr_mode*/
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -779,6 +780,7 @@
 			pixel_clock=<80000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1648 810 280 42>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -790,6 +792,7 @@
 			pixel_clock=<74250000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1560 806 190 30>;
 			lcd_timing = <0x500404ad 0x00454400 0x71486900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -801,6 +804,7 @@
 			pixel_clock=<82000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1696 806 300 38>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -811,6 +815,7 @@
 			interface="vbyone";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <3840 2160 4400 2250 557 90>;
 			lcd_timing = <0xffffffff 0xffffffff 0xffffffff 47 80 47 80 47 47 3 9>;
+			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
 			vbyone_att = <8 4 2 4>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
diff --git a/drivers/amlogic/display/lcd/aml_lcd_tv.c b/drivers/amlogic/display/lcd/aml_lcd_tv.c
index 1ad6b8c4c7d1..d4f71caa1255 100644
--- a/drivers/amlogic/display/lcd/aml_lcd_tv.c
+++ b/drivers/amlogic/display/lcd/aml_lcd_tv.c
@@ -392,6 +392,14 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 			plcd_config->lcd_basic.lcd_type = val;
 		}
 
+		if (of_property_read_u32(child, "frame_rate_adjust_type", &val)) {
+			printk("failed to get frame_rate_adjust_type, default to 0\n");
+			/* default use clock adjust */
+			plcd_config->lcd_timing.frame_rate_adj_type = 1;
+		} else {
+			plcd_config->lcd_timing.frame_rate_adj_type = (unsigned char)val;
+		}
+
 		if (aml_lcd_get_property_array(child, "basic_setting", &lcd_para[0], 6)) {
 			kfree(lcd_para);
 			kfree(pd);
@@ -457,7 +465,7 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 		}
 
 		if (plcd_config->lcd_basic.lcd_type == LCD_DIGITAL_LVDS) {
-			if (aml_lcd_get_property_array(child, "pixel_clock", &lcd_para[0], 1)) {
+/*			if (aml_lcd_get_property_array(child, "pixel_clock", &lcd_para[0], 1)) {
 				kfree(lcd_para);
 				kfree(pd);
 				kfree(plcd_config);
@@ -466,7 +474,7 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 			} else {
 				plcd_config->lcd_timing.lcd_clk = lcd_para[0];
 			}
-
+*/
 			if (aml_lcd_get_property_array(child, "lvds_att", &lcd_para[0], 6)) {
 				kfree(lcd_para);
 				kfree(pd);
@@ -516,8 +524,8 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 				memset(pvbyone_config, 0, sizeof(*pvbyone_config));
 				pd->pConf->lcd_control.vbyone_config= pvbyone_config;
 
-				pvbyone_config->lane_count	 = lcd_para[0];
-				pvbyone_config->byte		= lcd_para[1];
+				pvbyone_config->lane_count	= lcd_para[0];
+				pvbyone_config->byte_mode	= lcd_para[1];
 				pvbyone_config->region		= lcd_para[2];
 				pvbyone_config->color_fmt 	= lcd_para[3];
 			}
@@ -535,6 +543,7 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 	TV_LCD_INFO("sth1_vs_addr = %u, sth1_ve_addr = %u \n", pd->pConf->lcd_timing.sth1_vs_addr, pd->pConf->lcd_timing.sth1_ve_addr);
 	TV_LCD_INFO("stv1_hs_addr = %u, stv1_he_addr = %u \n", pd->pConf->lcd_timing.stv1_hs_addr, pd->pConf->lcd_timing.stv1_he_addr);
 	TV_LCD_INFO("stv1_vs_addr = %u, stv1_ve_addr = %u \n", pd->pConf->lcd_timing.stv1_vs_addr, pd->pConf->lcd_timing.stv1_ve_addr);
+	TV_LCD_INFO("frame_rate_adjust_type = %u\n", pd->pConf->lcd_timing.frame_rate_adj_type);
 
 	TV_LCD_INFO("panel_power_pin: %s--%d \n",str,pd->pConf->lcd_power_ctrl.panel_power->gpio);
 	TV_LCD_INFO("on_value = %d \n",pd->pConf->lcd_power_ctrl.panel_power->on_value);
@@ -549,10 +558,10 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 		TV_LCD_INFO("dual_port = %d \n",pd->pConf->lcd_control.lvds_config->dual_port);
 		TV_LCD_INFO("port_reverse = %d \n",pd->pConf->lcd_control.lvds_config->port_reverse);
 		TV_LCD_INFO("lvds_fifo_wr_mode = %d \n",pd->pConf->lcd_control.lvds_config->lvds_fifo_wr_mode);
-		TV_LCD_INFO("pixel_clock = %d \n", pd->pConf->lcd_timing.lcd_clk);
+		//TV_LCD_INFO("pixel_clock = %d \n", pd->pConf->lcd_timing.lcd_clk);
 	} else if (pd->pConf->lcd_basic.lcd_type == LCD_DIGITAL_VBYONE) {
 		TV_LCD_INFO("lane_count = %d \n",pd->pConf->lcd_control.vbyone_config->lane_count);
-		TV_LCD_INFO("byte = %d \n",pd->pConf->lcd_control.vbyone_config->byte);
+		TV_LCD_INFO("byte_mode = %d \n",pd->pConf->lcd_control.vbyone_config->byte_mode);
 		TV_LCD_INFO("region = %d \n",pd->pConf->lcd_control.vbyone_config->region);
 		TV_LCD_INFO("color_fmt = %d \n",pd->pConf->lcd_control.vbyone_config->color_fmt);
 	} else if (pd->pConf->lcd_basic.lcd_type == LCD_DIGITAL_TTL) {
@@ -563,6 +572,15 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 
 	return pd;
 }
+
+static void init_lcd_config(struct aml_lcd *pDev)
+{
+	unsigned int h_period = pDev->pConf->lcd_basic.h_period;
+	unsigned int v_period = pDev->pConf->lcd_basic.v_period;
+
+	/* prepare 60hz clock */
+	pDev->pConf->lcd_timing.lcd_clk = h_period * v_period * 60;
+}
 #endif
 
 static void panel_power_ctrl(Bool_t status)
@@ -603,12 +621,28 @@ static inline void _init_display_driver(struct aml_lcd *pDev)
 static int lcd_vmode_change(int index)
 {
 	unsigned int pclk;
+	unsigned char type = pDev->pConf->lcd_timing.frame_rate_adj_type;
 	unsigned int h_period = pDev->pConf->lcd_basic.h_period;
 	unsigned int v_period = pDev->pConf->lcd_basic.v_period;
-
-	pclk = (h_period * v_period * lcd_info[index].sync_duration_num) / lcd_info[index].sync_duration_den;
-
-	pDev->pConf->lcd_timing.lcd_clk = pclk;
+	unsigned int sync_duration_num = lcd_info[index].sync_duration_num;
+	unsigned int sync_duration_den = lcd_info[index].sync_duration_den;
+
+	/* frame rate adjust */
+	if (type) { /* adjust clock */
+		pclk = (h_period * v_period * sync_duration_num) / sync_duration_den;
+		printk("%s: adjust pclk %u.%03uMHz -> %u.%03uMHz\n",
+			__func__, (pDev->pConf->lcd_timing.lcd_clk / 1000000),
+			((pDev->pConf->lcd_timing.lcd_clk / 1000) % 1000),
+			(pclk / 1000000), ((pclk / 1000) % 1000));
+		pDev->pConf->lcd_timing.lcd_clk = pclk;
+	} else { /* adjust h_period */
+		pclk = pDev->pConf->lcd_timing.lcd_clk;
+		h_period = ((pclk / v_period) * sync_duration_den * 10) / sync_duration_num;
+		h_period = (h_period + 5) / 10; /* round off */
+		printk("%s: adjust h_period %u -> %u\n",
+			__func__, pDev->pConf->lcd_basic.h_period, h_period);
+		pDev->pConf->lcd_basic.h_period = h_period;
+	}
 
 	return 0;
 }
@@ -791,6 +825,7 @@ static int lcd_probe(struct platform_device *pdev)
 	}
 	pDev->pConf = pdata->pConf;
 	pDev->pd = pdata;
+	init_lcd_config(pDev);
 
 	mutex_init(&pDev->init_lock);
 
diff --git a/drivers/amlogic/display/lcd/aml_lcd_tv.h b/drivers/amlogic/display/lcd/aml_lcd_tv.h
index 16e86ac442ec..19d1cc3ace41 100644
--- a/drivers/amlogic/display/lcd/aml_lcd_tv.h
+++ b/drivers/amlogic/display/lcd/aml_lcd_tv.h
@@ -120,6 +120,7 @@ typedef struct {
 	u32 pll_ctrl;		/* video PLL settings */
 	u32 div_ctrl;		/* video pll div settings */
 	u32 clk_ctrl;		/* video clock settings */  //[31]clk_auto, [11:8]ss_ctrl, [7:0]xd
+	unsigned char frame_rate_adj_type; /* 0=htotal adjust, 1=clock adjust */
 
     u16 sync_duration_num;
     u16 sync_duration_den;
@@ -146,9 +147,11 @@ typedef struct {
 
 typedef struct {
 	int lane_count;
-    int byte;
+    int byte_mode;
     int region;
     int color_fmt;
+    int phy_div;
+    unsigned int bit_rate;
 } Vbyone_Config_t;
 
 typedef struct {
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
index 7d8bee4ded1e..f56b27609e1a 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
@@ -136,13 +136,14 @@ static int check_pll(struct pll_para_s *pll, unsigned int pll_fout)
 
 	done = 0;
 	fin = FIN_FREQ; /* kHz */
+	/* od3 >= od2 */
 	for (od3_sel = OD_SEL_MAX; od3_sel > 0; od3_sel--) {
 		od3 = od_table[od3_sel - 1];
 		pll_fod3_in = pll_fout * od3;
 		for (od2_sel = od3_sel; od2_sel > 0; od2_sel--) {
 			od2 = od_table[od2_sel - 1];
 			pll_fod2_in = pll_fod3_in * od2;
-			for (od1_sel = od2_sel; od1_sel > 0; od1_sel--) {
+			for (od1_sel = OD_SEL_MAX; od1_sel > 0; od1_sel--) {
 				od1 = od_table[od1_sel - 1];
 				pll_fvco = pll_fod2_in * od1;
 
@@ -169,6 +170,7 @@ static int check_pll(struct pll_para_s *pll, unsigned int pll_fout)
 									(od3_sel - 1),	pll_fvco);
 				printk(" pll_m=%d, pll_n=%d, pll_frac=%d\n",pll->m, pll->n, pll_frac);
 */				done = 1;
+				return done;
 			}
 		}
 	}
@@ -322,7 +324,14 @@ void generate_clk_parameter(Lcd_Config_t *pconf)
 		if (ret)
 			goto generate_clk_done;
 		break;
-
+	case LCD_DIGITAL_VBYONE:
+		fout_pll = pconf->lcd_control.vbyone_config->bit_rate / 1000;
+		if (fout_pll > CLK_DIV_MAX_CLK_IN)
+			goto generate_clk_done;
+		ret = check_pll(&pll, fout_pll);
+		if (ret)
+			goto generate_clk_done;
+		break;
 	default:
 		break;
 	}
@@ -342,7 +351,7 @@ generate_clk_done:
 			((crt_xd << CLK_CTRL_XD) |
 			(pll.frac << CLK_CTRL_FRAC)));
 
-		printk("pll_ctrl=%x div_ctrl=%x clk_ctrl=%x \n",
+		printk("pll_ctrl=0x%x div_ctrl=0x%x clk_ctrl=0x%x \n",
 			pconf->lcd_timing.pll_ctrl, pconf->lcd_timing.div_ctrl,pconf->lcd_timing.clk_ctrl);
 
 	} else {
@@ -372,12 +381,12 @@ static void lcd_set_pll(unsigned int pll_reg, unsigned int clk_ctrl_reg)
 	frac = (clk_ctrl_reg >> CLK_CTRL_FRAC) & 0xfff;
 
 	pll_ctrl = ((1 << 30) | (n << 9) | (m << 0));
-	pll_ctrl2 = ((od1 << 16) | (od2 << 22) | (od3 << 18));
+	pll_ctrl2 = ((1 << 30) | (od1 << 16) | (od2 << 18) | (od3 << 22));
 	if (frac > 0)
 		pll_ctrl2 |= ((1 << 14) | (frac << 0));
 
-	printk("pll_ctrl : %x \n",pll_ctrl | (1 << 28));
-	printk("pll_ctrl2 : %x \n",pll_ctrl2);
+	//printk("pll_ctrl : 0x%x \n",pll_ctrl | (1 << 28));
+	//printk("pll_ctrl2 : 0x%x \n",pll_ctrl2);
 
 	aml_write_reg32(P_HHI_HDMI_PLL_CNTL, pll_ctrl | (1 << 28));
 	aml_write_reg32(P_HHI_HDMI_PLL_CNTL2, pll_ctrl2);
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.h b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.h
index 12d2d6d3bd00..f91d4805b60f 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.h
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.h
@@ -64,8 +64,8 @@ enum div_sel_e {
 #define PLL_CTRL_LOCK			31
 #define PLL_CTRL_EN			30
 #define PLL_CTRL_RST			28
-#define PLL_CTRL_OD2			22 /* [23:22] */
-#define PLL_CTRL_OD3			18 /* [19:18] */
+#define PLL_CTRL_OD3			22 /* [23:22] */
+#define PLL_CTRL_OD2			18 /* [19:18] */
 #define PLL_CTRL_OD1			16 /* [17:16] */
 #define PLL_CTRL_N			9 /* [13:9] */
 #define PLL_CTRL_M			0 /* [8:0] */
@@ -75,20 +75,20 @@ enum div_sel_e {
 
 /* clk_ctrl */
 #define CLK_CTRL_FRAC			16 /* [27:16] */
+#define CLK_CTRL_XD 			0  //[7:0]
 
 #define PLL_WAIT_LOCK_CNT		500
 
-#define FIN_FREQ				 (24 * 1000)
-#define OD_SEL_MAX				3
-#define CLK_CTRL_XD 			  0  //[7:0]
-
-#define PLL_VCO_MIN 		(3000 * 1000)
-#define PLL_VCO_MAX 		(6000 * 1000)
-
+/* freq: unit in kHz */
+#define FIN_FREQ			(24 * 1000)
+#define PLL_VCO_MIN 			(3000 * 1000)
+#define PLL_VCO_MAX 			(6000 * 1000)
 /* VIDEO */
 #define CLK_DIV_MAX_CLK_IN		(3000 * 1000)
 #define CRT_VID_MAX_CLK_IN		(3000 * 1000)
-#define ENCL_MAX_CLK_IN 		(333 * 1000)
+#define ENCL_MAX_CLK_IN 		(666 * 1000)
+
+#define OD_SEL_MAX			3
 
 void lcd_clocks_set_vid_clk_div(int div_sel);
 int set_hpll_pll(int freq, int od1,int hdmi_pll_cntl5);
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c
index 1ec0bc255a30..bad8dc6725ca 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c
@@ -172,7 +172,7 @@ static void set_pll_lvds(Lcd_Config_t *pConf)
 
 unsigned int  lvds_init(struct aml_lcd *pDev)
 {
-	TV_LCD_INFO("lcd: lvds mode is selected!\n");
+	TV_LCD_INFO("lvds mode is selected\n");
 
 	mutex_lock(&pDev->init_lock);
 	set_pll_lvds(pDev->pConf);
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
index 8a944acc31cb..4e24cb4f0fe2 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
@@ -90,47 +90,6 @@ static void init_vbyone_phy(Lcd_Config_t *pConf)
 	aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL1, 0xc1000000);
 }
 
-int config_vbyone(int lane, int byte, int region, int hsize, int vsize)
-{
-   int sublane_num;
-   int region_size[4];
-   int tmp;
-
-   if ((lane == 0) || (lane == 3) || (lane == 5) || (lane == 6) || (lane == 7) || (lane>8))
-      return 1;
-   if ((region == 0) || (region== 3) || (region>4))
-      return 1;
-   if (lane%region)
-      return 1;
-   if ((byte<3) || (byte>4))
-      return 1;
-
-   sublane_num = lane/region;
-   aml_set_reg32_bits(P_VBO_LANES,lane-1,  VBO_LANE_NUM_BIT,    VBO_LANE_NUM_WID);
-   aml_set_reg32_bits(P_VBO_LANES,region-1,VBO_LANE_REGION_BIT, VBO_LANE_REGION_WID);
-   aml_set_reg32_bits(P_VBO_LANES,sublane_num-1,VBO_SUBLANE_NUM_BIT, VBO_SUBLANE_NUM_WID);
-   aml_set_reg32_bits(P_VBO_LANES,byte-1,VBO_BYTE_MODE_BIT, VBO_BYTE_MODE_WID);
-
-   if (region>1) {
-       region_size[3] = (hsize/lane)*sublane_num;
-       tmp = (hsize%lane);
-       region_size[0] = region_size[3] + (((tmp/sublane_num)>0) ? sublane_num : (tmp%sublane_num));
-       region_size[1] = region_size[3] + (((tmp/sublane_num)>1) ? sublane_num : (tmp%sublane_num));
-       region_size[2] = region_size[3] + (((tmp/sublane_num)>2) ? sublane_num : (tmp%sublane_num));
-       aml_write_reg32(P_VBO_REGION_00,region_size[0]);
-       aml_write_reg32(P_VBO_REGION_01,region_size[1]);
-       aml_write_reg32(P_VBO_REGION_02,region_size[2]);
-       aml_write_reg32(P_VBO_REGION_03,region_size[3]);
-   }
-   aml_write_reg32(P_VBO_ACT_VSIZE,vsize);
-   //aml_set_reg32_bits(P_VBO_CTRL_H,0x80,VBO_CTL_MODE_BIT,VBO_CTL_MODE_WID);  // different from FBC code!!!
-   aml_set_reg32_bits(P_VBO_CTRL_H,0x0,VBO_CTL_MODE2_BIT,VBO_CTL_MODE2_WID); // different from simulation code!!!
-   aml_set_reg32_bits(P_VBO_CTRL_H,0x1,VBO_VIN2ENC_HVSYNC_DLY_BIT,VBO_VIN2ENC_HVSYNC_DLY_WID);
-   //aml_set_reg32_bits(P_VBO_CTRL_L,enable,VBO_ENABLE_BIT,VBO_EBABLE_WID);
-
-   return 0;
-}
-
 void set_vbyone_ctlbits(int p3d_en, int p3d_lr, int mode)
 {
 	if (mode == 0)  //insert at the first pixel
@@ -148,6 +107,104 @@ void set_vbyone_sync_pol(int hsync_pol, int vsync_pol)
     aml_set_reg32_bits(P_VBO_VIN_CTRL,vsync_pol,VBO_VOUT_VSYNC_POL_BIT,VBO_VOUT_VSYNC_POL_WID);
 }
 
+static void set_vbyone_clk_util(Lcd_Config_t *pConf)
+{
+    unsigned int lcd_bits;
+    unsigned int div_sel, phy_div;
+
+    lcd_bits = 10;
+    switch (lcd_bits) {
+    case 6:
+        div_sel = 0;
+        break;
+    case 8:
+        div_sel = 2;
+        break;
+    case 10:
+        div_sel = 3;
+        break;
+    default:
+        div_sel = 3;
+        break;
+    }
+    /* set fifo_clk_sel */
+    aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL0, (div_sel << 6));
+    /* set cntl_ser_en:  8-channel to 1 */
+    aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL0, 0xfff, 16, 12);
+
+    phy_div = pConf->lcd_control.vbyone_config->phy_div;
+    /* decoupling fifo enable, gated clock enable */
+    aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL1,
+        (1 << 30) | ((phy_div - 1) << 25) | (1 << 24));
+    /* decoupling fifo write enable after fifo enable */
+    aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL1, 1, 31, 1);
+}
+
+static int set_vbyone_lanes(int lane_num, int byte_mode, int region_num,
+        int hsize, int vsize)
+{
+    int sublane_num;
+    int region_size[4];
+    int tmp;
+
+    switch (lane_num) {
+    case 1:
+    case 2:
+    case 4:
+    case 8:
+        break;
+    default:
+        return -1;
+    }
+    switch (region_num) {
+    case 1:
+    case 2:
+    case 4:
+        break;
+    default:
+        return -1;
+    }
+    if (lane_num % region_num)
+        return -1;
+    switch (byte_mode) {
+    case 3:
+    case 4:
+        break;
+    default:
+        return -1;
+    }
+    TV_LCD_INFO("byte_mode=%d, lane_num=%d, region_num=%d\n",
+        byte_mode, lane_num, region_num);
+
+    sublane_num = lane_num / region_num; /* lane num in each region */
+    aml_set_reg32_bits(P_VBO_LANES, lane_num - 1, VBO_LANE_NUM_BIT, 3);
+    aml_set_reg32_bits(P_VBO_LANES, region_num - 1, VBO_LANE_REGION_BIT, 2);
+    aml_set_reg32_bits(P_VBO_LANES, sublane_num - 1, VBO_SUBLANE_NUM_BIT, 3);
+    aml_set_reg32_bits(P_VBO_LANES, byte_mode - 1, VBO_BYTE_MODE_BIT, 2);
+
+    if (region_num > 1) {
+        region_size[3] = (hsize / lane_num) * sublane_num;
+        tmp = (hsize % lane_num);
+        region_size[0] = region_size[3] + (((tmp / sublane_num) > 0) ?
+                sublane_num : (tmp % sublane_num));
+        region_size[1] = region_size[3] + (((tmp / sublane_num) > 1) ?
+                sublane_num : (tmp % sublane_num));
+        region_size[2] = region_size[3] + (((tmp / sublane_num) > 2) ?
+                sublane_num : (tmp % sublane_num));
+        aml_write_reg32(P_VBO_REGION_00, region_size[0]);
+        aml_write_reg32(P_VBO_REGION_01, region_size[1]);
+        aml_write_reg32(P_VBO_REGION_02, region_size[2]);
+        aml_write_reg32(P_VBO_REGION_03, region_size[3]);
+    }
+    aml_write_reg32(P_VBO_ACT_VSIZE, vsize);
+    //aml_set_reg32_bits(P_VBO_CTRL_H,0x80,VBO_CTL_MODE_BIT,VBO_CTL_MODE_WID);  // different from FBC code!!!
+    aml_set_reg32_bits(P_VBO_CTRL_H, 0x0, VBO_CTL_MODE2_BIT, VBO_CTL_MODE2_WID); // different from simulation code!!!
+    aml_set_reg32_bits(P_VBO_CTRL_H, 0x1, VBO_VIN2ENC_HVSYNC_DLY_BIT, VBO_VIN2ENC_HVSYNC_DLY_WID);
+    //aml_set_reg32_bits(P_VBO_CTRL_L,enable,VBO_ENABLE_BIT,VBO_EBABLE_WID);
+
+    return 0;
+}
+
 static void set_control_vbyone(Lcd_Config_t *pConf)
 {
     int lane, byte, region,hsize, vsize,color_fmt;
@@ -156,10 +213,12 @@ static void set_control_vbyone(Lcd_Config_t *pConf)
     hsize = pConf->lcd_basic.h_active;
 	vsize = pConf->lcd_basic.v_active;
     lane = pConf->lcd_control.vbyone_config->lane_count;		//lane;8
-	byte = pConf->lcd_control.vbyone_config->byte;		       //byte;4
+    byte = pConf->lcd_control.vbyone_config->byte_mode;		       //byte;4
 	region = pConf->lcd_control.vbyone_config->region;		//region_num;2
 	color_fmt = pConf->lcd_control.vbyone_config->color_fmt;  //color_fmt;4
 
+	set_vbyone_clk_util(pConf);
+
     switch (color_fmt) {
         case 0://SDVT_VBYONE_18BPP_RGB
                   vin_color = 4;
@@ -206,12 +265,12 @@ static void set_control_vbyone(Lcd_Config_t *pConf)
    // aml_set_reg32_bits(P_PERIPHS_PIN_MUX_3,3,8,2);
 
     // set Vbyone
-    TV_LCD_INFO("lcd: VbyOne Configuration ......\n");
+    //TV_LCD_INFO("lcd: VbyOne Configuration ......\n");
     //set_vbyone_vfmt(vin_color,vin_bpp);
     aml_set_reg32_bits(P_VBO_VIN_CTRL, vin_color, VBO_VIN_PACK_BIT,VBO_VIN_PACK_WID);
     aml_set_reg32_bits(P_VBO_VIN_CTRL, vin_bpp,   VBO_VIN_BPP_BIT,VBO_VIN_BPP_WID);
 
-    config_vbyone(lane, byte, region, hsize, vsize);
+    set_vbyone_lanes(lane, byte, region, hsize, vsize);
 
     set_vbyone_sync_pol(0, 0); //set hsync/vsync polarity to let the polarity is low active inside the VbyOne
 
@@ -224,7 +283,7 @@ static void set_control_vbyone(Lcd_Config_t *pConf)
     //aml_set_reg32_bits(P_VBO_PXL_CTRL,0x3,VBO_PXL_CTR1_BIT,VBO_PXL_CTR1_WID);
     //set_vbyone_ctlbits(1,0,0);
     //set fifo_clk_sel: 3 for 10-bits
-    aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL0,3,6,2);
+    //aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL0,3,6,2);
 
     //PAD select:
 	if ((lane == 1) || (lane == 2)) {
@@ -288,7 +347,7 @@ static void set_pll_vbyone(Lcd_Config_t *pConf)
 	int minlane;
 
     lane = pConf->lcd_control.vbyone_config->lane_count;//lane_num;8
-    byte = pConf->lcd_control.vbyone_config->byte;//byte_num;4
+    byte = pConf->lcd_control.vbyone_config->byte_mode;//byte_num;4
 
 	//phy_clk = pixel_clk*10*byte_num/lane_num;
 	//                                   lane_num      byte_num      phy_clk
@@ -402,12 +461,154 @@ static void set_pll_vbyone(Lcd_Config_t *pConf)
 	aml_set_reg32_bits(P_HHI_VID_CLK_CNTL2, 1, 3, 1); //gclk_encl_clk:hi_vid_clk_cntl2[3]
 }
 
+static unsigned int vbyone_lane_num[] = {
+	1,
+	2,
+	4,
+	8,
+	8,
+};
+
+#define VBYONE_BIT_RATE_MAX		2970 //MHz
+#define VBYONE_BIT_RATE_MIN		600
+static void set_vbyone_config(Lcd_Config_t *pConf)
+{
+	unsigned int band_width, bit_rate, pclk, phy_div;
+	unsigned int byte_mode, lane_count, minlane;
+	unsigned int lcd_bits;
+	unsigned int temp, i;
+
+	//auto calculate bandwidth, clock
+	lane_count = pConf->lcd_control.vbyone_config->lane_count;
+	lcd_bits = 10;
+	byte_mode = (lcd_bits == 10) ? 4 : 3;
+	/* byte_mode * byte2bit * 8/10_encoding * pclk =
+	   byte_mode * 8 * 10 / 8 * pclk */
+	pclk = pConf->lcd_timing.lcd_clk / 1000; /* kHz */
+	band_width = byte_mode * 10 * pclk;
+
+	temp = VBYONE_BIT_RATE_MAX * 1000;
+	temp = (band_width + temp - 1) / temp;
+	for (i = 0; i < 4; i++) {
+		if (temp <= vbyone_lane_num[i])
+			break;
+	}
+	minlane = vbyone_lane_num[i];
+	if (lane_count < minlane) {
+		printk("[warning]:vbyone lane_num(%d) is less than min requirement(%d)\n",
+			lane_count, minlane);
+		lane_count = minlane;
+		pConf->lcd_control.vbyone_config->lane_count = lane_count;
+		printk("change to min lane_num %d\n", minlane);
+	}
+
+	bit_rate = band_width / lane_count;
+	if (bit_rate > (VBYONE_BIT_RATE_MAX * 1000)) {
+		printk("[error]:vbyone bit rate(%dKHz) is out of max range(%dKHz)\n",
+			bit_rate, (VBYONE_BIT_RATE_MAX * 1000));
+	}
+	if (bit_rate < (VBYONE_BIT_RATE_MIN * 1000)) {
+		printk("[error]:vbyone bit rate(%dKHz) is out of min range(%dKHz)\n",
+			bit_rate, (VBYONE_BIT_RATE_MIN * 1000));
+	}
+	bit_rate = bit_rate * 1000; /* Hz */
+
+	phy_div = lane_count / minlane;
+	if (phy_div == 8) {
+		phy_div/= 2;
+		bit_rate /= 2;
+	}
+	pConf->lcd_control.vbyone_config->phy_div = phy_div;
+	pConf->lcd_control.vbyone_config->bit_rate = bit_rate;
+	printk("lane_count=%u, bit_rate = %uMHz, clk=%u.%03uMhz\n",
+		lane_count, (bit_rate / 1000000), (pclk / 1000), (pclk % 1000));
+}
+
+static void adjust_vx1_pll_by_parameters(Lcd_Config_t *pConf)
+{
+	unsigned int pll_ctrl, clk_ctrl;
+	unsigned int m, n, od1, od2, od3, frac;
+	unsigned int wait_loop = 200;
+	unsigned int pll_lock;
+	unsigned int temp;
+
+	pll_ctrl = pConf->lcd_timing.pll_ctrl;
+	clk_ctrl = pConf->lcd_timing.clk_ctrl;
+	m = (pll_ctrl >> PLL_CTRL_M) & 0x1ff;
+	n = (pll_ctrl >> PLL_CTRL_N) & 0x1f;
+	od1 = (pll_ctrl >> PLL_CTRL_OD1) & 0x3;
+	od2 = (pll_ctrl >> PLL_CTRL_OD2) & 0x3;
+	od3 = (pll_ctrl >> PLL_CTRL_OD3) & 0x3;
+	frac = (clk_ctrl >> CLK_CTRL_FRAC) & 0xfff;
+
+	temp = ((1 << 30) | (n << 9) | (m << 0));
+	aml_write_reg32(P_HHI_HDMI_PLL_CNTL, temp);
+	aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, frac, 0, 12);
+	aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, od1, 16, 2);
+	aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, od2, 18, 2);
+	aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, od3, 22, 2);
+	aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 1, 30, 1);
+	do {
+		udelay(50);
+		pll_lock = (aml_read_reg32(P_HHI_HDMI_PLL_CNTL) >> 31) & 0x1;
+		wait_loop--;
+	} while ((pll_lock == 0) && (wait_loop > 0));
+	if (wait_loop == 0)
+		printk("[error]: hpll lock failed\n");
+}
+
+static void adjust_vx1_pll_by_bit_rate(unsigned int bit_rate)
+{
+	unsigned int wait_loop = 200;
+	unsigned int pll_lock;
+
+	switch (bit_rate) {
+	case 2970:
+		aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x3d, 0, 9);
+		aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0xe00, 0, 12);
+		break;
+	case 2475:
+		aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL, 0x33, 0, 9);
+		aml_set_reg32_bits(P_HHI_HDMI_PLL_CNTL2, 0x900, 0, 12);
+		break;
+	default:
+		printk("don't support yet\n");
+		break;
+	}
+	do {
+		udelay(50);
+		pll_lock = (aml_read_reg32(P_HHI_HDMI_PLL_CNTL) >> 31) & 0x1;
+		wait_loop--;
+	} while ((pll_lock == 0) && (wait_loop > 0));
+	if (wait_loop == 0)
+		printk("[error]: hpll lock failed\n");
+}
+
+#define VX1_PLL_ADJUST		1
+static void set_clk_vbyone(Lcd_Config_t *pConf)
+{
+	unsigned int bit_rate;
+
+	if (pConf->lcd_timing.frame_rate_adj_type) {
+		bit_rate = pConf->lcd_control.vbyone_config->bit_rate / 1000000;
+		printk("bit rate change to %dMHz\n", bit_rate);
+		if (VX1_PLL_ADJUST) {
+			generate_clk_parameter(pConf);
+			adjust_vx1_pll_by_parameters(pConf);
+		} else {
+			adjust_vx1_pll_by_bit_rate(bit_rate);
+		}
+	}
+	set_pll_vbyone(pConf);
+}
+
 unsigned int vbyone_init(struct aml_lcd *pDev)
 {
-	TV_LCD_INFO("lcd: vx1 mode is selected!\n");
+	TV_LCD_INFO("vbyone mode is selected\n");
 
 	mutex_lock(&pDev->init_lock);
-	set_pll_vbyone(pDev->pConf);
+	set_vbyone_config(pDev->pConf);
+	set_clk_vbyone(pDev->pConf);
 	venc_set_vbyone(pDev->pConf);
 	set_control_vbyone(pDev->pConf);
 	init_vbyone_phy(pDev->pConf);
-- 
2.19.0

