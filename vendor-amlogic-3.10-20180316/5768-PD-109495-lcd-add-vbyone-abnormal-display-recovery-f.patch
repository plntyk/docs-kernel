From d75aee2de02fb421859821f667ae39c5bb98b31e Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Mon, 17 Aug 2015 10:53:07 +0800
Subject: [PATCH 5768/5965] PD#109495: lcd: add vbyone abnormal display
 recovery function

Change-Id: I15464dd2257c238cc42f48936176fa6037705d99
---
 drivers/amlogic/display/lcd/aml_lcd_tv.c      |  46 +-
 drivers/amlogic/display/lcd/aml_lcd_tv.h      |   7 +-
 .../display/lcd/aml_tv_lcd_port/lcd_common.c  |   4 +-
 .../display/lcd/aml_tv_lcd_port/vbyone_drv.c  | 531 ++++++++++--------
 4 files changed, 359 insertions(+), 229 deletions(-)

diff --git a/drivers/amlogic/display/lcd/aml_lcd_tv.c b/drivers/amlogic/display/lcd/aml_lcd_tv.c
index d4f71caa1255..5ca3c3f5e8dc 100644
--- a/drivers/amlogic/display/lcd/aml_lcd_tv.c
+++ b/drivers/amlogic/display/lcd/aml_lcd_tv.c
@@ -206,7 +206,8 @@ static ssize_t tv_lcd_spread_stroe(struct class *cls,
 
 static const char * lcd_usage_str =
 {"Usage:\n"
-"	 echo pattern <num> > debug ; bist pattern test, 0=pattern off, 1~7=different pattern\n"
+"    echo test <num> > debug ; bist pattern test, 0=pattern off, 1~7=different pattern\n"
+"    echo fr_type <type> > debug ; set frame_rate change type: 0=hotal adjust, 1=clock adjust\n"
 };
 
 static ssize_t tv_lcd_debug_show(struct class *class,
@@ -240,8 +241,7 @@ static ssize_t tv_lcd_debug_store(struct class *cls,
 
 	cmd = argv[0][0];
 	switch (cmd) {
-	case 'p':
-	case 'P':
+	case 't':
 		if (argn != 2) {
 			printk("%s",lcd_usage_str);
 			goto end;
@@ -249,6 +249,12 @@ static ssize_t tv_lcd_debug_store(struct class *cls,
 		value = simple_strtol(argv[1], NULL, 16);
 		lcd_test(value, pDev);
 		break;
+	case 'f':
+		value = simple_strtol(argv[1], NULL, 10);
+		value = (value > 0) ? 1 : 0;
+		pDev->pConf->lcd_timing.frame_rate_adj_type = (unsigned char)value;
+		printk("change lcd frame rate change type: %d\n", value);
+		break;
 	default:
 		goto end;
 	}
@@ -802,6 +808,38 @@ static int lcd_power_notifier(struct notifier_block *nb, unsigned long event, vo
 	return NOTIFY_OK;
 }
 
+void lcd_function_remove(void)
+{
+	switch (pDev->pConf->lcd_basic.lcd_type) {
+	case LCD_DIGITAL_LVDS:
+		break;
+	case LCD_DIGITAL_VBYONE:
+		del_timer_sync(&pDev->timer);
+		printk("remove vbyone timer handler\n");
+		break;
+	default:
+		break;
+	}
+}
+
+static void lcd_function_probe(struct aml_lcd *pDev)
+{
+	switch (pDev->pConf->lcd_basic.lcd_type) {
+	case LCD_DIGITAL_LVDS:
+		break;
+	case LCD_DIGITAL_VBYONE:
+		init_timer(&pDev->timer);
+		pDev->timer.data = (ulong)pDev;
+		pDev->timer.function = vbyone_timer_handler;
+		pDev->timer.expires = jiffies + VX1_INTERVAL;
+		add_timer(&pDev->timer);
+		printk("add vbyone timer handler\n");
+		break;
+	default:
+		break;
+	}
+}
+
 static int lcd_probe(struct platform_device *pdev)
 {
 	unsigned int ret = 0;
@@ -847,6 +885,8 @@ static int lcd_probe(struct platform_device *pdev)
 		TV_LCD_ERR("lcd_register_client fail!\n");
 	}
 
+	lcd_function_probe(pDev);
+
 	/* first_init = 0; */
 	TV_LCD_INFO("LCD probe ok\n");
 
diff --git a/drivers/amlogic/display/lcd/aml_lcd_tv.h b/drivers/amlogic/display/lcd/aml_lcd_tv.h
index 19d1cc3ace41..f003a17b5089 100644
--- a/drivers/amlogic/display/lcd/aml_lcd_tv.h
+++ b/drivers/amlogic/display/lcd/aml_lcd_tv.h
@@ -193,18 +193,23 @@ struct aml_lcd {
 
 	struct device		*dev;
 	struct mutex init_lock;
+	struct timer_list timer;
 };
 
 struct aml_lcd_platdata {
 	Lcd_Config_t *pConf;
 };
 
-#define TV_LCD_INFO(format, arg...) printk(KERN_INFO "lcd info: %s: " format, \
+#define TV_LCD_INFO(format, arg...) printk(KERN_INFO "lcd: %s: " format, \
 		__FUNCTION__ , ## arg)
 #define TV_LCD_ERR(format, arg...)  printk(KERN_ERR "lcd error: %s: " format, \
 		__FUNCTION__ , ## arg)
 
+#define VX1_INTERVAL (HZ)
+
 extern unsigned int  lvds_init(struct aml_lcd *pDev);
 extern unsigned int vbyone_init(struct aml_lcd *pDev);
+extern void lcd_function_remove(void);
+extern void vbyone_timer_handler(unsigned long arg);
 
 #endif
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
index f56b27609e1a..8e72928fe79f 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
@@ -597,9 +597,11 @@ void _disable_display_driver(void)
 
 	vclk_sel = 0;//((pConf->lcd_timing.clk_ctrl) >>4) & 0x1;
 
+	lcd_function_remove();
+
 	aml_set_reg32_bits(P_HHI_VIID_DIVIDER_CNTL, 0, 11, 1);	//close lvds phy clk gate: 0x104c[11]
 
-	aml_write_reg32(P_ENCT_VIDEO_EN, 0);	//disable enct
+	//aml_write_reg32(P_ENCT_VIDEO_EN, 0);	//disable enct
 	aml_write_reg32(P_ENCL_VIDEO_EN, 0);	//disable encl
 
 	if (vclk_sel)
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
index 4e24cb4f0fe2..46eba45252ec 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
@@ -55,9 +55,15 @@
 #define  VBO_PXL_CTR0_BIT     0
 #define  VBO_PXL_CTR0_WID     4
 
+static bool vx1_debug_log = true;
+static bool vx1_init_flag = false;
+
+static bool vx1_cdr_status_check = false;
+static bool vx1_irq_check = false;
+static bool vx1_irq_reset = false;
 
 //set VX1_LOCKN && VX1_HTPDN
-void set_vbyone_pinmux(void)
+static void set_vbyone_pinmux(void)
 {
 	aml_set_reg32_bits(P_PERIPHS_PIN_MUX_7, 3, 18, 2);
 	aml_clr_reg32_mask(P_PERIPHS_PIN_MUX_4, 1<<9);
@@ -68,11 +74,11 @@ void set_vbyone_pinmux(void)
 
 static void set_tcon_vbyone(Lcd_Config_t *pConf)
 {
-    vpp_set_matrix_ycbcr2rgb(2, 0);
-    aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL, 3);
-    aml_write_reg32(P_L_RGB_BASE_ADDR, 0);
-    aml_write_reg32(P_L_RGB_COEFF_ADDR, 0x400);
-    aml_write_reg32(P_VPP_MISC, aml_read_reg32(P_VPP_MISC) & ~(VPP_OUT_SATURATE));
+	vpp_set_matrix_ycbcr2rgb(2, 0);
+	aml_write_reg32(P_L_RGB_BASE_ADDR, 0);
+	aml_write_reg32(P_L_RGB_COEFF_ADDR, 0x400);
+	//aml_set_reg32_bits(P_L_GAMMA_CNTL_PORT, 0, 0, 1);
+	aml_write_reg32(P_VPP_MISC, aml_read_reg32(P_VPP_MISC) & ~(VPP_OUT_SATURATE));
 }
 
 static void init_vbyone_phy(Lcd_Config_t *pConf)
@@ -100,207 +106,217 @@ void set_vbyone_ctlbits(int p3d_en, int p3d_lr, int mode)
 
 void set_vbyone_sync_pol(int hsync_pol, int vsync_pol)
 {
-    aml_set_reg32_bits(P_VBO_VIN_CTRL,hsync_pol,VBO_VIN_HSYNC_POL_BIT,VBO_VIN_HSYNC_POL_WID);
-    aml_set_reg32_bits(P_VBO_VIN_CTRL,vsync_pol,VBO_VIN_VSYNC_POL_BIT,VBO_VIN_VSYNC_POL_WID);
+	aml_set_reg32_bits(P_VBO_VIN_CTRL,hsync_pol,VBO_VIN_HSYNC_POL_BIT,VBO_VIN_HSYNC_POL_WID);
+	aml_set_reg32_bits(P_VBO_VIN_CTRL,vsync_pol,VBO_VIN_VSYNC_POL_BIT,VBO_VIN_VSYNC_POL_WID);
 
-    aml_set_reg32_bits(P_VBO_VIN_CTRL,hsync_pol,VBO_VOUT_HSYNC_POL_BIT,VBO_VOUT_HSYNC_POL_WID);
-    aml_set_reg32_bits(P_VBO_VIN_CTRL,vsync_pol,VBO_VOUT_VSYNC_POL_BIT,VBO_VOUT_VSYNC_POL_WID);
+	aml_set_reg32_bits(P_VBO_VIN_CTRL,hsync_pol,VBO_VOUT_HSYNC_POL_BIT,VBO_VOUT_HSYNC_POL_WID);
+	aml_set_reg32_bits(P_VBO_VIN_CTRL,vsync_pol,VBO_VOUT_VSYNC_POL_BIT,VBO_VOUT_VSYNC_POL_WID);
 }
 
 static void set_vbyone_clk_util(Lcd_Config_t *pConf)
 {
-    unsigned int lcd_bits;
-    unsigned int div_sel, phy_div;
-
-    lcd_bits = 10;
-    switch (lcd_bits) {
-    case 6:
-        div_sel = 0;
-        break;
-    case 8:
-        div_sel = 2;
-        break;
-    case 10:
-        div_sel = 3;
-        break;
-    default:
-        div_sel = 3;
-        break;
-    }
-    /* set fifo_clk_sel */
-    aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL0, (div_sel << 6));
-    /* set cntl_ser_en:  8-channel to 1 */
-    aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL0, 0xfff, 16, 12);
-
-    phy_div = pConf->lcd_control.vbyone_config->phy_div;
-    /* decoupling fifo enable, gated clock enable */
-    aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL1,
-        (1 << 30) | ((phy_div - 1) << 25) | (1 << 24));
-    /* decoupling fifo write enable after fifo enable */
-    aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL1, 1, 31, 1);
+	unsigned int lcd_bits;
+	unsigned int div_sel, phy_div;
+
+	lcd_bits = 10;
+	switch (lcd_bits) {
+	case 6:
+		div_sel = 0;
+		break;
+	case 8:
+		div_sel = 2;
+		break;
+	case 10:
+		div_sel = 3;
+		break;
+	default:
+		div_sel = 3;
+		break;
+	}
+	/* set fifo_clk_sel */
+	aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL0, (div_sel << 6));
+	/* set cntl_ser_en:  8-channel to 1 */
+	aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL0, 0xfff, 16, 12);
+
+	phy_div = pConf->lcd_control.vbyone_config->phy_div;
+	/* decoupling fifo enable, gated clock enable */
+	aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL1,
+		(1 << 30) | ((phy_div - 1) << 25) | (1 << 24));
+	/* decoupling fifo write enable after fifo enable */
+	aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL1, 1, 31, 1);
 }
 
 static int set_vbyone_lanes(int lane_num, int byte_mode, int region_num,
-        int hsize, int vsize)
+		int hsize, int vsize)
 {
-    int sublane_num;
-    int region_size[4];
-    int tmp;
-
-    switch (lane_num) {
-    case 1:
-    case 2:
-    case 4:
-    case 8:
-        break;
-    default:
-        return -1;
-    }
-    switch (region_num) {
-    case 1:
-    case 2:
-    case 4:
-        break;
-    default:
-        return -1;
-    }
-    if (lane_num % region_num)
-        return -1;
-    switch (byte_mode) {
-    case 3:
-    case 4:
-        break;
-    default:
-        return -1;
-    }
-    TV_LCD_INFO("byte_mode=%d, lane_num=%d, region_num=%d\n",
-        byte_mode, lane_num, region_num);
-
-    sublane_num = lane_num / region_num; /* lane num in each region */
-    aml_set_reg32_bits(P_VBO_LANES, lane_num - 1, VBO_LANE_NUM_BIT, 3);
-    aml_set_reg32_bits(P_VBO_LANES, region_num - 1, VBO_LANE_REGION_BIT, 2);
-    aml_set_reg32_bits(P_VBO_LANES, sublane_num - 1, VBO_SUBLANE_NUM_BIT, 3);
-    aml_set_reg32_bits(P_VBO_LANES, byte_mode - 1, VBO_BYTE_MODE_BIT, 2);
-
-    if (region_num > 1) {
-        region_size[3] = (hsize / lane_num) * sublane_num;
-        tmp = (hsize % lane_num);
-        region_size[0] = region_size[3] + (((tmp / sublane_num) > 0) ?
-                sublane_num : (tmp % sublane_num));
-        region_size[1] = region_size[3] + (((tmp / sublane_num) > 1) ?
-                sublane_num : (tmp % sublane_num));
-        region_size[2] = region_size[3] + (((tmp / sublane_num) > 2) ?
-                sublane_num : (tmp % sublane_num));
-        aml_write_reg32(P_VBO_REGION_00, region_size[0]);
-        aml_write_reg32(P_VBO_REGION_01, region_size[1]);
-        aml_write_reg32(P_VBO_REGION_02, region_size[2]);
-        aml_write_reg32(P_VBO_REGION_03, region_size[3]);
-    }
-    aml_write_reg32(P_VBO_ACT_VSIZE, vsize);
-    //aml_set_reg32_bits(P_VBO_CTRL_H,0x80,VBO_CTL_MODE_BIT,VBO_CTL_MODE_WID);  // different from FBC code!!!
-    aml_set_reg32_bits(P_VBO_CTRL_H, 0x0, VBO_CTL_MODE2_BIT, VBO_CTL_MODE2_WID); // different from simulation code!!!
-    aml_set_reg32_bits(P_VBO_CTRL_H, 0x1, VBO_VIN2ENC_HVSYNC_DLY_BIT, VBO_VIN2ENC_HVSYNC_DLY_WID);
-    //aml_set_reg32_bits(P_VBO_CTRL_L,enable,VBO_ENABLE_BIT,VBO_EBABLE_WID);
-
-    return 0;
+	int sublane_num;
+	int region_size[4];
+	int tmp;
+
+	switch (lane_num) {
+	case 1:
+	case 2:
+	case 4:
+	case 8:
+		break;
+	default:
+		return -1;
+	}
+	switch (region_num) {
+	case 1:
+	case 2:
+	case 4:
+		break;
+	default:
+		return -1;
+	}
+	if (lane_num % region_num)
+		return -1;
+	switch (byte_mode) {
+	case 3:
+	case 4:
+		break;
+	default:
+		return -1;
+	}
+	TV_LCD_INFO("byte_mode=%d, lane_num=%d, region_num=%d\n",
+		byte_mode, lane_num, region_num);
+
+	sublane_num = lane_num / region_num; /* lane num in each region */
+	aml_set_reg32_bits(P_VBO_LANES, lane_num - 1, VBO_LANE_NUM_BIT, 3);
+	aml_set_reg32_bits(P_VBO_LANES, region_num - 1, VBO_LANE_REGION_BIT, 2);
+	aml_set_reg32_bits(P_VBO_LANES, sublane_num - 1, VBO_SUBLANE_NUM_BIT, 3);
+	aml_set_reg32_bits(P_VBO_LANES, byte_mode - 1, VBO_BYTE_MODE_BIT, 2);
+
+	if (region_num > 1) {
+		region_size[3] = (hsize / lane_num) * sublane_num;
+		tmp = (hsize % lane_num);
+		region_size[0] = region_size[3] + (((tmp / sublane_num) > 0) ?
+			sublane_num : (tmp % sublane_num));
+		region_size[1] = region_size[3] + (((tmp / sublane_num) > 1) ?
+			sublane_num : (tmp % sublane_num));
+		region_size[2] = region_size[3] + (((tmp / sublane_num) > 2) ?
+			sublane_num : (tmp % sublane_num));
+		aml_write_reg32(P_VBO_REGION_00, region_size[0]);
+		aml_write_reg32(P_VBO_REGION_01, region_size[1]);
+		aml_write_reg32(P_VBO_REGION_02, region_size[2]);
+		aml_write_reg32(P_VBO_REGION_03, region_size[3]);
+	}
+	aml_write_reg32(P_VBO_ACT_VSIZE, vsize);
+	//aml_set_reg32_bits(P_VBO_CTRL_H,0x80,VBO_CTL_MODE_BIT,VBO_CTL_MODE_WID);  // different from FBC code!!!
+	aml_set_reg32_bits(P_VBO_CTRL_H, 0x0, VBO_CTL_MODE2_BIT, VBO_CTL_MODE2_WID); // different from simulation code!!!
+	aml_set_reg32_bits(P_VBO_CTRL_H, 0x1, VBO_VIN2ENC_HVSYNC_DLY_BIT, VBO_VIN2ENC_HVSYNC_DLY_WID);
+	//aml_set_reg32_bits(P_VBO_CTRL_L,enable,VBO_ENABLE_BIT,VBO_EBABLE_WID);
+
+	return 0;
 }
 
 static void set_control_vbyone(Lcd_Config_t *pConf)
 {
-    int lane, byte, region,hsize, vsize,color_fmt;
-    int vin_color, vin_bpp;
+	int lane, byte, region,hsize, vsize,color_fmt;
+	int vin_color, vin_bpp;
 
-    hsize = pConf->lcd_basic.h_active;
+	hsize = pConf->lcd_basic.h_active;
 	vsize = pConf->lcd_basic.v_active;
-    lane = pConf->lcd_control.vbyone_config->lane_count;		//lane;8
-    byte = pConf->lcd_control.vbyone_config->byte_mode;		       //byte;4
-	region = pConf->lcd_control.vbyone_config->region;		//region_num;2
-	color_fmt = pConf->lcd_control.vbyone_config->color_fmt;  //color_fmt;4
+	lane = pConf->lcd_control.vbyone_config->lane_count; //lane;8
+	byte = pConf->lcd_control.vbyone_config->byte_mode;  //byte;4
+	region = pConf->lcd_control.vbyone_config->region;   //region_num;2
+	color_fmt = pConf->lcd_control.vbyone_config->color_fmt; //color_fmt;4
 
 	set_vbyone_clk_util(pConf);
 
-    switch (color_fmt) {
-        case 0://SDVT_VBYONE_18BPP_RGB
-                  vin_color = 4;
-                  vin_bpp   = 2;
-                  break;
-        case 1://SDVT_VBYONE_18BPP_YCBCR444
-                  vin_color = 0;
-                  vin_bpp   = 2;
-                  break;
-        case 2://SDVT_VBYONE_24BPP_RGB
-                  vin_color = 4;
-                  vin_bpp   = 1;
-                  break;
-        case 3://SDVT_VBYONE_24BPP_YCBCR444
-                  vin_color = 0;
-                  vin_bpp   = 1;
-                  break;
-        case 4://SDVT_VBYONE_30BPP_RGB
-                  vin_color = 4;
-                  vin_bpp   = 0;
-                  break;
-        case 5://SDVT_VBYONE_30BPP_YCBCR444
-                  vin_color = 0;
-                  vin_bpp   = 0;
-                  break;
-        default:
-            TV_LCD_ERR("lcd error:VBYONE_COLOR_FORMAT!\n");
-                  return;
+	switch (color_fmt) {
+	case 0://SDVT_VBYONE_18BPP_RGB
+		vin_color = 4;
+		vin_bpp   = 2;
+		break;
+	case 1://SDVT_VBYONE_18BPP_YCBCR444
+		vin_color = 0;
+		vin_bpp   = 2;
+		break;
+	case 2://SDVT_VBYONE_24BPP_RGB
+		vin_color = 4;
+		vin_bpp   = 1;
+		break;
+	case 3://SDVT_VBYONE_24BPP_YCBCR444
+		vin_color = 0;
+		vin_bpp   = 1;
+		break;
+	case 4://SDVT_VBYONE_30BPP_RGB
+		vin_color = 4;
+		vin_bpp   = 0;
+		break;
+	case 5://SDVT_VBYONE_30BPP_YCBCR444
+		vin_color = 0;
+		vin_bpp   = 0;
+		break;
+	default:
+		TV_LCD_ERR("vbyone COLOR_FORMAT unsupport\n");
+		return;
 	}
-    // clock seting for VX1
-    //vclk_set_encl_vx1(vfromat, lane, byte);
-
-    // set encl format
-    //set_tv_encl (TV_ENC_LCD3840x2160p_vic03,1,0,0);
+	// clock seting for VX1
+	//vclk_set_encl_vx1(vfromat, lane, byte);
 
-    // vpu clock setting
-    //aml_set_reg32(P_HHI_VPU_CLK_CNTL,   (0 << 9)    |   // vpu   clk_sel
-    //                       						 (0 << 0) );     // vpu   clk_div
-    //aml_set_reg32(P_HHI_VPU_CLK_CNTL, (Rd(HHI_VPU_CLK_CNTL) | (1 << 8)) );
+	//PIN_MUX for VX1 need to add this to dtd
 
-    //PIN_MUX for VX1 need to add this to dtd
+	// printf("Set VbyOne PIN MUX ......\n");
+	// aml_set_reg32_bits(P_PERIPHS_PIN_MUX_3,3,8,2);
 
-   // printf("Set VbyOne PIN MUX ......\n");
-   // aml_set_reg32_bits(P_PERIPHS_PIN_MUX_3,3,8,2);
+	// set Vbyone
+	//TV_LCD_INFO("lcd: VbyOne Configuration ......\n");
+	//set_vbyone_vfmt(vin_color,vin_bpp);
+	aml_set_reg32_bits(P_VBO_VIN_CTRL, vin_color, VBO_VIN_PACK_BIT,VBO_VIN_PACK_WID);
+	aml_set_reg32_bits(P_VBO_VIN_CTRL, vin_bpp,   VBO_VIN_BPP_BIT,VBO_VIN_BPP_WID);
 
-    // set Vbyone
-    //TV_LCD_INFO("lcd: VbyOne Configuration ......\n");
-    //set_vbyone_vfmt(vin_color,vin_bpp);
-    aml_set_reg32_bits(P_VBO_VIN_CTRL, vin_color, VBO_VIN_PACK_BIT,VBO_VIN_PACK_WID);
-    aml_set_reg32_bits(P_VBO_VIN_CTRL, vin_bpp,   VBO_VIN_BPP_BIT,VBO_VIN_BPP_WID);
+	set_vbyone_lanes(lane, byte, region, hsize, vsize);
 
-    set_vbyone_lanes(lane, byte, region, hsize, vsize);
+	set_vbyone_sync_pol(0, 0); //set hsync/vsync polarity to let the polarity is low active inside the VbyOne
 
-    set_vbyone_sync_pol(0, 0); //set hsync/vsync polarity to let the polarity is low active inside the VbyOne
+	// below line copy from simulation
+	aml_set_reg32_bits(P_VBO_VIN_CTRL, 1, 0, 2); //gate the input when vsync asserted
+	///aml_set_reg32(P_VBO_VBK_CTRL_0,0x13);
+	//aml_set_reg32(P_VBO_VBK_CTRL_1,0x56);
+	//aml_set_reg32(P_VBO_HBK_CTRL,0x3478);
+	//aml_set_reg32_bits(P_VBO_PXL_CTRL,0x2,VBO_PXL_CTR0_BIT,VBO_PXL_CTR0_WID);
+	//aml_set_reg32_bits(P_VBO_PXL_CTRL,0x3,VBO_PXL_CTR1_BIT,VBO_PXL_CTR1_WID);
+	//set_vbyone_ctlbits(1,0,0);
+	//set fifo_clk_sel: 3 for 10-bits
+	//aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL0,3,6,2);
 
-    // below line copy from simulation
-    aml_set_reg32_bits(P_VBO_VIN_CTRL, 1, 0, 2); //gate the input when vsync asserted
-    ///aml_set_reg32(P_VBO_VBK_CTRL_0,0x13);
-    //aml_set_reg32(P_VBO_VBK_CTRL_1,0x56);
-    //aml_set_reg32(P_VBO_HBK_CTRL,0x3478);
-    //aml_set_reg32_bits(P_VBO_PXL_CTRL,0x2,VBO_PXL_CTR0_BIT,VBO_PXL_CTR0_WID);
-    //aml_set_reg32_bits(P_VBO_PXL_CTRL,0x3,VBO_PXL_CTR1_BIT,VBO_PXL_CTR1_WID);
-    //set_vbyone_ctlbits(1,0,0);
-    //set fifo_clk_sel: 3 for 10-bits
-    //aml_set_reg32_bits(P_HHI_LVDS_TX_PHY_CNTL0,3,6,2);
-
-    //PAD select:
+	//PAD select:
 	if ((lane == 1) || (lane == 2)) {
 		aml_set_reg32_bits(P_LCD_PORT_SWAP,1,9,2);
-	} else if(lane == 4) {
+	} else if (lane == 4) {
 		aml_set_reg32_bits(P_LCD_PORT_SWAP,2,9,2);
 	} else {
 		aml_set_reg32_bits(P_LCD_PORT_SWAP,0,9,2);
 	}
-    //aml_set_reg32_bits(P_LCD_PORT_SWAP, 1, 8, 1);//reverse lane output order
+	//aml_set_reg32_bits(P_LCD_PORT_SWAP, 1, 8, 1);//reverse lane output order
+
+	// Mux pads in combo-phy: 0 for dsi; 1 for lvds or vbyone; 2 for edp
+	aml_write_reg32(P_HHI_DSI_LVDS_EDP_CNTL0, 0x1); // Select vbyone in combo-phy
+	aml_set_reg32_bits(P_VBO_CTRL_L, 1, VBO_ENABLE_BIT, VBO_EBABLE_WID);
+
+	//force vencl clk enable, otherwise, it might auto turn off by mipi DSI
+	//WRITE_VCBUS_REG_BITS(VPU_MISC_CTRL, 1, 0, 1);
 
-    // Mux pads in combo-phy: 0 for dsi; 1 for lvds or vbyone; 2 for edp
-    aml_write_reg32(P_HHI_DSI_LVDS_EDP_CNTL0, 0x1); // Select vbyone in combo-phy
-    aml_set_reg32_bits(P_VBO_CTRL_L, 1, VBO_ENABLE_BIT, VBO_EBABLE_WID);
+	//write REG_VBO_GCLK_LANE[3:2] == 0x0 to open the aln_clk
+	//for vbyone timer handler correction
+	aml_write_reg32(P_VBO_GCLK_LANE_L, 0);
+}
+
+static void vbyone_wait_stable(void)
+{
+	int i = 1000;
 
-    //force vencl clk enable, otherwise, it might auto turn off by mipi DSI
-    //WRITE_VCBUS_REG_BITS(VPU_MISC_CTRL, 1, 0, 1);
+	printk("%s ", __func__);
+	while ((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) != 0x20) {
+		udelay(5);
+		if (i-- == 0)
+			break;
+	}
+	vx1_cdr_status_check = false;
+	printk("status: 0x%x\n", aml_read_reg32(P_VBO_STATUS_L));
 }
 
 static void venc_set_vbyone(Lcd_Config_t *pConf)
@@ -308,29 +324,29 @@ static void venc_set_vbyone(Lcd_Config_t *pConf)
 	aml_write_reg32(P_ENCL_VIDEO_EN, 0);
 
 	//int havon_begin = 80;
-	aml_write_reg32(P_VPU_VIU_VENC_MUX_CTRL,	(0<<0)|(3<<2));	 // viu1 select encl  | viu2 select encl
-	aml_write_reg32(P_ENCL_VIDEO_MODE,			40);	//0); // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
-	aml_write_reg32(P_ENCL_VIDEO_MODE_ADV,		0x18);//0x0418); // Sampling rate: 1
+	aml_write_reg32(P_VPU_VIU_VENC_MUX_CTRL, (0<<0)|(3<<2));  // viu1 select encl  | viu2 select encl
+	aml_write_reg32(P_ENCL_VIDEO_MODE,       40); //0); // Enable Hsync and equalization pulse switch in center; bit[14] cfg_de_v = 1
+	aml_write_reg32(P_ENCL_VIDEO_MODE_ADV,   0x18);//0x0418); // Sampling rate: 1
 
 	// bypass filter
-	aml_write_reg32(P_ENCL_VIDEO_FILT_CTRL,		0x1000);
+	aml_write_reg32(P_ENCL_VIDEO_FILT_CTRL, 0x1000);
 
-	aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT,		pConf->lcd_basic.h_period - 1);
-	aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT,		pConf->lcd_basic.v_period - 1);
+	aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT, pConf->lcd_basic.h_period - 1);
+	aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT, pConf->lcd_basic.v_period - 1);
 
-	aml_write_reg32(P_ENCL_VIDEO_HAVON_BEGIN, 	pConf->lcd_basic.video_on_pixel);
-	aml_write_reg32(P_ENCL_VIDEO_HAVON_END, 	pConf->lcd_basic.h_active - 1 + pConf->lcd_basic.video_on_pixel);
-	aml_write_reg32(P_ENCL_VIDEO_VAVON_BLINE,	pConf->lcd_basic.video_on_line);
-	aml_write_reg32(P_ENCL_VIDEO_VAVON_ELINE,	pConf->lcd_basic.v_active - 1  + pConf->lcd_basic.video_on_line);
+	aml_write_reg32(P_ENCL_VIDEO_HAVON_BEGIN, pConf->lcd_basic.video_on_pixel);
+	aml_write_reg32(P_ENCL_VIDEO_HAVON_END,   pConf->lcd_basic.h_active - 1 + pConf->lcd_basic.video_on_pixel);
+	aml_write_reg32(P_ENCL_VIDEO_VAVON_BLINE, pConf->lcd_basic.video_on_line);
+	aml_write_reg32(P_ENCL_VIDEO_VAVON_ELINE, pConf->lcd_basic.v_active - 1  + pConf->lcd_basic.video_on_line);
 
-	aml_write_reg32(P_ENCL_VIDEO_HSO_BEGIN,		pConf->lcd_timing.sth1_hs_addr);
-	aml_write_reg32(P_ENCL_VIDEO_HSO_END,		pConf->lcd_timing.sth1_he_addr);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_BEGIN, 	pConf->lcd_timing.stv1_hs_addr);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_END,		pConf->lcd_timing.stv1_he_addr);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_BLINE, 	pConf->lcd_timing.stv1_vs_addr);
-	aml_write_reg32(P_ENCL_VIDEO_VSO_ELINE, 	pConf->lcd_timing.stv1_ve_addr);
+	aml_write_reg32(P_ENCL_VIDEO_HSO_BEGIN, pConf->lcd_timing.sth1_hs_addr);
+	aml_write_reg32(P_ENCL_VIDEO_HSO_END,   pConf->lcd_timing.sth1_he_addr);
+	aml_write_reg32(P_ENCL_VIDEO_VSO_BEGIN, pConf->lcd_timing.stv1_hs_addr);
+	aml_write_reg32(P_ENCL_VIDEO_VSO_END,   pConf->lcd_timing.stv1_he_addr);
+	aml_write_reg32(P_ENCL_VIDEO_VSO_BLINE, pConf->lcd_timing.stv1_vs_addr);
+	aml_write_reg32(P_ENCL_VIDEO_VSO_ELINE, pConf->lcd_timing.stv1_ve_addr);
 
-	aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL,	0);
+	aml_write_reg32(P_ENCL_VIDEO_RGBIN_CTRL, 3);
 	// enable encl
 	aml_write_reg32(P_ENCL_VIDEO_EN, 1);
 }
@@ -338,7 +354,7 @@ static void venc_set_vbyone(Lcd_Config_t *pConf)
 //clock seting for VX1
 static void set_pll_vbyone(Lcd_Config_t *pConf)
 {
-    int  lane, byte;//vfromat,
+	int lane, byte;//vfromat,
 	//int hdmi_clk_out;
 	//int hdmi_vx1_clk_od1;
 	int pclk_div;
@@ -346,8 +362,8 @@ static void set_pll_vbyone(Lcd_Config_t *pConf)
 	int xd = 0;
 	int minlane;
 
-    lane = pConf->lcd_control.vbyone_config->lane_count;//lane_num;8
-    byte = pConf->lcd_control.vbyone_config->byte_mode;//byte_num;4
+	lane = pConf->lcd_control.vbyone_config->lane_count;//lane_num;8
+	byte = pConf->lcd_control.vbyone_config->byte_mode;//byte_num;4
 
 	//phy_clk = pixel_clk*10*byte_num/lane_num;
 	//                                   lane_num      byte_num      phy_clk
@@ -377,15 +393,15 @@ static void set_pll_vbyone(Lcd_Config_t *pConf)
 	//                                      4            4            5940        (pclk*10)
 	//                                      2            4           11880        (pclk*20)
 	//                                      1            4           23760        (pclk*40)
-    //if (byte_num == 3)
-    //	hdmi_clk_out = 2227.5*2;  //OD1 = 1
-    //else //4
-    //	hdmi_clk_out = 2970*2;    //OD1 = 1
-    minlane = 8;
-    //hdmi_vx1_clk_od1 = 1;
+	//if (byte_num == 3)
+	//	hdmi_clk_out = 2227.5*2;  //OD1 = 1
+	//else //4
+	//	hdmi_clk_out = 2970*2;    //OD1 = 1
+	minlane = 8;
+	//hdmi_vx1_clk_od1 = 1;
 
 	if (lane < minlane) {
-		TV_LCD_ERR("lcd error: VX1 cannot support this configuration!\n");
+		TV_LCD_ERR("lcd error: VX1 cannot support this configuration\n");
 		return;
 	}
 
@@ -396,32 +412,32 @@ static void set_pll_vbyone(Lcd_Config_t *pConf)
 		//	printf("VX1 cannot support this configuration!\n");
 		//	return;
 		//}
-    //	hdmi_vx1_clk_od1=1;
+		// hdmi_vx1_clk_od1=1;
 	}
 	//need check whether we need to set this dpll !!!!!!!
 	//if (set_hdmi_dpll(hdmi_clk_out,hdmi_vx1_clk_od1)){
-    //   printf("Unsupported HDMI_DPLL out frequency!\n");
-    //    return;
-    //}
-
-   pclk_div = (((byte == 3) ? 30:40)*100)/minlane;
-   TV_LCD_INFO("lcd: vbyone byte=%d, lane=%d, pclk=%d, phy_div=%d \n", byte, lane, pclk_div, phy_div);
-   //configure vid_clk_div_top
-   if (byte == 3) {
-	   if (pclk_div == 375) {
-		   //lcd_clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_3p75);
-		   lcd_set_clk_div(CLK_DIV_SEL_3p75 << 0);
-		   xd = 1;
-	   } else if (pclk_div == 750) {
-		   //lcd_clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_7p5);
-		   lcd_set_clk_div(CLK_DIV_SEL_7p5 <<0) ;
-
-		   xd = 1;
-	   } else {
-		   //lcd_clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_15);
-		   lcd_set_clk_div(CLK_DIV_SEL_15 <<0 );
-		   xd = pclk_div/100/15;
-	   }
+	//   printf("Unsupported HDMI_DPLL out frequency!\n");
+	//    return;
+	//}
+
+	pclk_div = (((byte == 3) ? 30:40)*100)/minlane;
+	TV_LCD_INFO("vbyone byte=%d, lane=%d, pclk=%d, phy_div=%d \n", byte, lane, pclk_div, phy_div);
+	//configure vid_clk_div_top
+	if (byte == 3) {
+		if (pclk_div == 375) {
+			//lcd_clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_3p75);
+			lcd_set_clk_div(CLK_DIV_SEL_3p75 << 0);
+			xd = 1;
+		} else if (pclk_div == 750) {
+			//lcd_clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_7p5);
+			lcd_set_clk_div(CLK_DIV_SEL_7p5 <<0) ;
+
+			xd = 1;
+		} else {
+			//lcd_clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_15);
+			lcd_set_clk_div(CLK_DIV_SEL_15 <<0 );
+			xd = pclk_div/100/15;
+		}
 	} else if (byte == 4) {
 		//lcd_clocks_set_vid_clk_div(CLK_UTIL_VID_PLL_DIV_5);
 		lcd_set_clk_div(CLK_DIV_SEL_5<<0);
@@ -442,7 +458,7 @@ static void set_pll_vbyone(Lcd_Config_t *pConf)
 		udelay(5);  // delay 5uS
 		aml_set_reg32_bits(P_HHI_VID_CLK_CNTL, 1, 19, 1); //[19] -enable clk_div0
 	}
-    //else { //V2
+	//else { //V2
 	//	aml_set_reg32_bits(P_HHI_VIID_CLK_CNTL, 0, 19, 1); //[19] -disable clk_div0
 	//	udelay(2);  //delay 2uS
 	//	aml_set_reg32_bits(P_HHI_VIID_CLK_CNTL, insel,  16, 3); // [18:16] - cntl_clk_in_sel
@@ -607,6 +623,7 @@ unsigned int vbyone_init(struct aml_lcd *pDev)
 	TV_LCD_INFO("vbyone mode is selected\n");
 
 	mutex_lock(&pDev->init_lock);
+	vx1_init_flag = true; //flag to bypass vx1_cdr_status_check
 	set_vbyone_config(pDev->pConf);
 	set_clk_vbyone(pDev->pConf);
 	venc_set_vbyone(pDev->pConf);
@@ -615,8 +632,74 @@ unsigned int vbyone_init(struct aml_lcd *pDev)
 	set_tcon_vbyone(pDev->pConf);
 	set_vbyone_pinmux();
 	_enable_vsync_interrupt();
+	vbyone_wait_stable();
+	vx1_init_flag = false;
 	mutex_unlock(&pDev->init_lock);
 
 	return 0;
 }
 
+static void vbyone_handler(void)
+{
+	int i = 200;
+
+	if (vx1_cdr_status_check == false) { //In normal status
+		//if (vx1_debug_log)
+		//	printk("\nvx1_cdr_status_check->1\n");
+		if ((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) == 0x20) {
+			aml_write_reg32(P_VBO_GCLK_LANE_L, 4); //write REG_VBO_GCLK_LANE[3:2] == 0x1 to close the aln_clk);
+			vx1_cdr_status_check = true;
+			vx1_irq_check = false;
+			if (vx1_debug_log)
+				printk("\nvx1_cdr_status_check->2\n");
+		}
+	}
+	//if(vx1_cdr_status_check == true) {
+		if (((aml_read_reg32(P_VBO_STATUS_L) & 0x1c) != 0) ||
+			(vx1_irq_reset == true)) { //in ALN status
+			if (vx1_debug_log)
+				printk("\nvx1 reset\n");
+			//1) force phy output all 1, let tcon pull lockn high
+			vx1_irq_reset = false;
+			aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL0, aml_read_reg32(P_HHI_LVDS_TX_PHY_CNTL0)|0xc00);
+			//2) while((Rd(REG_VBO_STATUS_L) & 0x3f) == 0x10)
+			while ((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) != 0x8) {
+				udelay(1);
+				if (i-- == 0)
+					break;
+			}
+			if (vx1_debug_log)
+				printk("status 0x%x\n",aml_read_reg32(P_VBO_STATUS_L));
+			//3) reset VX1; // write 1 then write 0
+			aml_write_reg32(P_VBO_SOFT_RST, 0x1ff);
+			aml_write_reg32(P_VBO_SOFT_RST, 0);
+			udelay(2);
+			//4) //write REG_VBO_GCLK_LANE[3:2] == 0x0 to open the aln_clk);
+			aml_write_reg32(P_VBO_GCLK_LANE_L, 0);
+			//5) relese the phy output
+			aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL0, aml_read_reg32(P_HHI_LVDS_TX_PHY_CNTL0)&0xfffff3ff);
+			//if((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) != 0x8){
+			vx1_irq_check = true;
+			udelay(10);
+			if ((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) == 0x20) {
+				aml_write_reg32(P_VBO_GCLK_LANE_L, 4);   //write REG_VBO_GCLK_LANE[3:2] == 0x1 to close the aln_clk);
+				vx1_cdr_status_check = true;
+				if (vx1_debug_log)
+					printk("\nvx1_cdr_status_check-->3\n");
+			} else {
+				vx1_cdr_status_check = false;
+			}
+		}
+	//}
+}
+
+void vbyone_timer_handler(unsigned long arg)
+{
+	struct aml_lcd *pDev = (struct aml_lcd *)arg;
+
+	if (vx1_init_flag == false)
+		vbyone_handler();
+	pDev->timer.expires = jiffies + VX1_INTERVAL;
+	add_timer(&pDev->timer);
+}
+
-- 
2.19.0

