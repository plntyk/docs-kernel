From b1c3fae0d11af816a5a8c5eb866c100590a2dafe Mon Sep 17 00:00:00 2001
From: Tao Zeng <tao.zeng@amlogic.com>
Date: Tue, 25 Aug 2015 13:47:17 +0800
Subject: [PATCH 5781/5965] PD#111373: clock: use lock to protect critical
 section of pll change

Old method(atomic) has risk to protect critical section on mulity-core
architeture. Spinlock and disable local irq is better for this useage
and verified on projects.

Change-Id: Ic73ae29c482dc902c935abb1fe88b2b19b090700
---
 arch/arm/mach-meson8/clock.c    | 48 ++++++++++++++++++++++++---------
 arch/arm/mach-meson8b/clock.c   | 48 ++++++++++++++++++++++++---------
 arch/arm/mach-mesong9bb/clock.c | 48 ++++++++++++++++++++++++---------
 arch/arm/mach-mesong9tv/clock.c | 48 ++++++++++++++++++++++++---------
 4 files changed, 140 insertions(+), 52 deletions(-)

diff --git a/arch/arm/mach-meson8/clock.c b/arch/arm/mach-meson8/clock.c
index cb5351924662..f9cbdb95d929 100644
--- a/arch/arm/mach-meson8/clock.c
+++ b/arch/arm/mach-meson8/clock.c
@@ -54,7 +54,7 @@ extern struct arm_delay_ops arm_delay_ops;
 
 #ifdef CONFIG_FIX_SYSPLL
 #include <linux/hrtimer.h>
-static int swing_inteval = 5000;
+static int swing_inteval = 25000;
 extern unsigned int fixpll_target;
 extern int fix_syspll;
 extern int fixpll_freq_verify(unsigned long rate);
@@ -64,7 +64,7 @@ struct virtual_clock {
 };
 static struct virtual_clock fixpll_clock;
 
-static atomic_t pll_changing;
+DEFINE_SPINLOCK(pll_changing);
 static int in_virtual_clock = 0;
 static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 {
@@ -75,6 +75,7 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 		{0, 1, 0, 0}
 	};
 	struct virtual_clock *clk = container_of(timer, struct virtual_clock, virtual_clock_timer);
+	unsigned long flag;
 	unsigned int tmp = (fixpll_target * 3 / 4);
 
 	if (tmp == clk->cur_rate) {
@@ -84,17 +85,21 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 	} else {
 		tmp = 0;
 	}
-	if (atomic_read(&pll_changing) == 0) {
-		cnt++;
+	if (!spin_trylock_irqsave(&pll_changing, flag)) {
+		return HRTIMER_NORESTART;
+	}
+	cnt++;
 		/* swing ext od */
+	if (aml_get_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 2, 1) != bitmap[tmp][cnt & 0x03]) {
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0, 7, 1);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, bitmap[tmp][cnt & 0x03], 2, 2);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 1, 7, 1);
-		udelay(5);
-		hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+		udelay(100);
 	}
+	hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+	spin_unlock_irqrestore(&pll_changing, flag);
 	return HRTIMER_NORESTART;
 }
 #endif
@@ -868,6 +873,10 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	unsigned long oldcpu = clk_get_rate_a9(clk);
 	unsigned int cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
 	int test_n = 0;
+#ifdef CONFIG_FIX_SYSPLL
+	unsigned long flag = 0, cnt = 0;
+	int ret;
+#endif
 	
 //	if ((cpu_clk_cntl & 3) == 1) {
 	{
@@ -876,7 +885,18 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 		// CPU switch to xtal 
 	#ifdef CONFIG_FIX_SYSPLL
 		if (fix_syspll) {
-			atomic_set(&pll_changing, 1);
+			while (cnt < 10) {
+				ret = hrtimer_try_to_cancel(&fixpll_clock.virtual_clock_timer);
+				if (ret >= 0)
+					break;
+				else
+					cnt++;
+			}
+			if (cnt >= 10) {
+				printk(KERN_ERR "ignore pll change\n");
+				return -1;
+			}
+			spin_lock_irqsave(&pll_changing, flag);
 			in_virtual_clock = 0;
 		}
 	#endif
@@ -922,6 +942,12 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	pr_debug("(CTS_CPU_CLK) CPU %ld.%ldMHz\n", clk_get_rate_a9(clk) / 1000000, clk_get_rate_a9(clk)%1000000);
 #endif /* CONFIG_CPU_FREQ_DEBUG */
 
+#ifdef CONFIG_FIX_SYSPLL
+	if (fix_syspll) {
+		spin_unlock_irqrestore(&pll_changing, flag);
+		in_virtual_clock = 0;
+	}
+#endif
 	return 0;
 }
 
@@ -1257,8 +1283,6 @@ static int set_sys_pll(struct clk *clk,  unsigned long dst)
 	if (fix_syspll) {
 		if (fixpll_freq_verify(dst)) {
 			virtual = 1;
-		} else {
-			hrtimer_cancel(&fixpll_clock.virtual_clock_timer);
 		}
 		div = fixpll_target / (dst / 1000);
 		rem = (fixpll_target * 1000) - (div * dst);
@@ -1362,7 +1386,6 @@ SETPLL:
 			clk->rate = dst;
 		}
 		if (virtual) {
-			atomic_set(&pll_changing, 0);
 			in_virtual_clock = 1;
 			fixpll_clock.cur_rate = dst / 1000;
 			hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
@@ -1987,7 +2010,6 @@ static int __init meson_clock_init(void)
 	class_register(&meson_freq_limit_class);
 #endif
 #ifdef CONFIG_FIX_SYSPLL
-	atomic_set(&pll_changing, 0);
 	hrtimer_init(&fixpll_clock.virtual_clock_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	fixpll_clock.virtual_clock_timer.function = virtual_clock_work;
 	printk("hrtimer for fix pll ok\n");
diff --git a/arch/arm/mach-meson8b/clock.c b/arch/arm/mach-meson8b/clock.c
index 3e96faa23efb..bc4a67ccedb2 100644
--- a/arch/arm/mach-meson8b/clock.c
+++ b/arch/arm/mach-meson8b/clock.c
@@ -54,7 +54,7 @@ extern struct arm_delay_ops arm_delay_ops;
 
 #ifdef CONFIG_FIX_SYSPLL
 #include <linux/hrtimer.h>
-static int swing_inteval = 5000;
+static int swing_inteval = 25000;
 extern unsigned int fixpll_target;
 extern int fix_syspll;
 extern int fixpll_freq_verify(unsigned long rate);
@@ -64,7 +64,7 @@ struct virtual_clock {
 };
 static struct virtual_clock fixpll_clock;
 
-static atomic_t pll_changing;
+DEFINE_SPINLOCK(pll_changing);
 static int in_virtual_clock = 0;
 static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 {
@@ -75,6 +75,7 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 		{0, 1, 0, 0}
 	};
 	struct virtual_clock *clk = container_of(timer, struct virtual_clock, virtual_clock_timer);
+	unsigned long flag;
 	unsigned int tmp = (fixpll_target * 3 / 4);
 
 	if (tmp == clk->cur_rate) {
@@ -84,17 +85,21 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 	} else {
 		tmp = 0;
 	}
-	if (atomic_read(&pll_changing) == 0) {
-		cnt++;
+	if (!spin_trylock_irqsave(&pll_changing, flag)) {
+		return HRTIMER_NORESTART;
+	}
+	cnt++;
 		/* swing ext od */
+	if (aml_get_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 2, 1) != bitmap[tmp][cnt & 0x03]) {
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0, 7, 1);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, bitmap[tmp][cnt & 0x03], 2, 2);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 1, 7, 1);
-		udelay(5);
-		hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+		udelay(100);
 	}
+	hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+	spin_unlock_irqrestore(&pll_changing, flag);
 	return HRTIMER_NORESTART;
 }
 #endif
@@ -872,6 +877,10 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	unsigned long oldcpu = clk_get_rate_a9(clk);
 	unsigned int cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
 	int test_n = 0;
+#ifdef CONFIG_FIX_SYSPLL
+	unsigned long flag = 0, cnt = 0;
+	int ret;
+#endif
 	
 //	if ((cpu_clk_cntl & 3) == 1) {
 	{
@@ -880,7 +889,18 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 		// CPU switch to xtal 
 	#ifdef CONFIG_FIX_SYSPLL
 		if (fix_syspll) {
-			atomic_set(&pll_changing, 1);
+			while (cnt < 10) {
+				ret = hrtimer_try_to_cancel(&fixpll_clock.virtual_clock_timer);
+				if (ret >= 0)
+					break;
+				else
+					cnt++;
+			}
+			if (cnt >= 10) {
+				printk(KERN_ERR "ignore pll change\n");
+				return -1;
+			}
+			spin_lock_irqsave(&pll_changing, flag);
 			in_virtual_clock = 0;
 		}
 	#endif
@@ -938,6 +958,12 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	pr_debug("(CTS_CPU_CLK) CPU %ld.%ldMHz\n", clk_get_rate_a9(clk) / 1000000, clk_get_rate_a9(clk)%1000000);
 #endif /* CONFIG_CPU_FREQ_DEBUG */
 
+#ifdef CONFIG_FIX_SYSPLL
+	if (fix_syspll) {
+		spin_unlock_irqrestore(&pll_changing, flag);
+		in_virtual_clock = 0;
+	}
+#endif
 	return 0;
 }
 
@@ -1280,8 +1306,6 @@ static int set_sys_pll(struct clk *clk,  unsigned long dst)
 	if (fix_syspll) {
 		if (fixpll_freq_verify(dst)) {
 			virtual = 1;
-		} else {
-			hrtimer_cancel(&fixpll_clock.virtual_clock_timer);
 		}
 		div = fixpll_target / (dst / 1000);
 		rem = (fixpll_target * 1000) - (div * dst);
@@ -1388,7 +1412,6 @@ SETPLL:
 			clk->rate = dst;
 		}
 		if (virtual) {
-			atomic_set(&pll_changing, 0);
 			in_virtual_clock = 1;
 			fixpll_clock.cur_rate = dst / 1000;
 			hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
@@ -2012,7 +2035,6 @@ static int __init meson_clock_init(void)
 	class_register(&meson_freq_limit_class);
 #endif
 #ifdef CONFIG_FIX_SYSPLL
-	atomic_set(&pll_changing, 0);
 	hrtimer_init(&fixpll_clock.virtual_clock_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	fixpll_clock.virtual_clock_timer.function = virtual_clock_work;
 	printk("hrtimer for fix pll ok\n");
diff --git a/arch/arm/mach-mesong9bb/clock.c b/arch/arm/mach-mesong9bb/clock.c
index 552c4c2ebf45..3a0907631913 100644
--- a/arch/arm/mach-mesong9bb/clock.c
+++ b/arch/arm/mach-mesong9bb/clock.c
@@ -49,7 +49,7 @@ extern struct arm_delay_ops arm_delay_ops;
 
 #ifdef CONFIG_FIX_SYSPLL
 #include <linux/hrtimer.h>
-static int swing_inteval = 5000;
+static int swing_inteval = 25000;
 extern unsigned int fixpll_target;
 extern int fix_syspll;
 extern int fixpll_freq_verify(unsigned long rate);
@@ -59,7 +59,7 @@ struct virtual_clock {
 };
 static struct virtual_clock fixpll_clock;
 
-static atomic_t pll_changing;
+DEFINE_SPINLOCK(pll_changing);
 static int in_virtual_clock = 0;
 static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 {
@@ -70,6 +70,7 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 		{0, 1, 0, 0}
 	};
 	struct virtual_clock *clk = container_of(timer, struct virtual_clock, virtual_clock_timer);
+	unsigned long flag;
 	unsigned int tmp = (fixpll_target * 3 / 4);
 
 	if (tmp == clk->cur_rate) {
@@ -79,17 +80,21 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 	} else {
 		tmp = 0;
 	}
-	if (atomic_read(&pll_changing) == 0) {
-		cnt++;
+	if (!spin_trylock_irqsave(&pll_changing, flag)) {
+		return HRTIMER_NORESTART;
+	}
+	cnt++;
 		/* swing ext od */
+	if (aml_get_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 2, 1) != bitmap[tmp][cnt & 0x03]) {
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0, 7, 1);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, bitmap[tmp][cnt & 0x03], 2, 2);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 1, 7, 1);
-		udelay(5);
-		hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+		udelay(100);
 	}
+	hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+	spin_unlock_irqrestore(&pll_changing, flag);
 	return HRTIMER_NORESTART;
 }
 #endif
@@ -883,6 +888,10 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	unsigned long oldcpu = clk_get_rate_a9(clk);
 	unsigned int cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
 	int test_n = 0;
+#ifdef CONFIG_FIX_SYSPLL
+	unsigned long flag = 0, cnt = 0;
+	int ret;
+#endif
 
 //	if ((cpu_clk_cntl & 3) == 1) {
 	{
@@ -891,7 +900,18 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 		// CPU switch to xtal
 	#ifdef CONFIG_FIX_SYSPLL
 		if (fix_syspll) {
-			atomic_set(&pll_changing, 1);
+			while (cnt < 10) {
+				ret = hrtimer_try_to_cancel(&fixpll_clock.virtual_clock_timer);
+				if (ret >= 0)
+					break;
+				else
+					cnt++;
+			}
+			if (cnt >= 10) {
+				printk(KERN_ERR "ignore pll change\n");
+				return -1;
+			}
+			spin_lock_irqsave(&pll_changing, flag);
 			in_virtual_clock = 0;
 		}
 	#endif
@@ -949,6 +969,12 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	pr_debug("(CTS_CPU_CLK) CPU %ld.%ldMHz\n", clk_get_rate_a9(clk) / 1000000, clk_get_rate_a9(clk)%1000000);
 #endif /* CONFIG_CPU_FREQ_DEBUG */
 
+#ifdef CONFIG_FIX_SYSPLL
+	if (fix_syspll) {
+		spin_unlock_irqrestore(&pll_changing, flag);
+		in_virtual_clock = 0;
+	}
+#endif
 	return 0;
 }
 
@@ -1291,8 +1317,6 @@ static int set_sys_pll(struct clk *clk,  unsigned long dst)
 	if (fix_syspll) {
 		if (fixpll_freq_verify(dst)) {
 			virtual = 1;
-		} else {
-			hrtimer_cancel(&fixpll_clock.virtual_clock_timer);
 		}
 		div = fixpll_target / (dst / 1000);
 		rem = (fixpll_target * 1000) - (div * dst);
@@ -1398,7 +1422,6 @@ SETPLL:
 			clk->rate = dst;
 		}
 		if (virtual) {
-			atomic_set(&pll_changing, 0);
 			in_virtual_clock = 1;
 			fixpll_clock.cur_rate = dst / 1000;
 			hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
@@ -2029,7 +2052,6 @@ static int __init meson_clock_init(void)
 	class_register(&meson_freq_limit_class);
 #endif
 #ifdef CONFIG_FIX_SYSPLL
-	atomic_set(&pll_changing, 0);
 	hrtimer_init(&fixpll_clock.virtual_clock_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	fixpll_clock.virtual_clock_timer.function = virtual_clock_work;
 	printk("hrtimer for fix pll ok\n");
diff --git a/arch/arm/mach-mesong9tv/clock.c b/arch/arm/mach-mesong9tv/clock.c
index b9bb2f109181..cb6fb829e3b8 100644
--- a/arch/arm/mach-mesong9tv/clock.c
+++ b/arch/arm/mach-mesong9tv/clock.c
@@ -48,7 +48,7 @@ extern struct arm_delay_ops arm_delay_ops;
 
 #ifdef CONFIG_FIX_SYSPLL
 #include <linux/hrtimer.h>
-static int swing_inteval = 5000;
+static int swing_inteval = 25000;
 extern unsigned int fixpll_target;
 extern int fix_syspll;
 extern int fixpll_freq_verify(unsigned long rate);
@@ -58,7 +58,7 @@ struct virtual_clock {
 };
 static struct virtual_clock fixpll_clock;
 
-static atomic_t pll_changing;
+DEFINE_SPINLOCK(pll_changing);
 static int in_virtual_clock = 0;
 static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 {
@@ -69,6 +69,7 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 		{0, 1, 0, 0}
 	};
 	struct virtual_clock *clk = container_of(timer, struct virtual_clock, virtual_clock_timer);
+	unsigned long flag;
 	unsigned int tmp = (fixpll_target * 3 / 4);
 
 	if (tmp == clk->cur_rate) {
@@ -78,17 +79,21 @@ static enum hrtimer_restart virtual_clock_work(struct hrtimer *timer)
 	} else {
 		tmp = 0;
 	}
-	if (atomic_read(&pll_changing) == 0) {
-		cnt++;
+	if (!spin_trylock_irqsave(&pll_changing, flag)) {
+		return HRTIMER_NORESTART;
+	}
+	cnt++;
 		/* swing ext od */
+	if (aml_get_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 2, 1) != bitmap[tmp][cnt & 0x03]) {
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 0, 7, 1);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, bitmap[tmp][cnt & 0x03], 2, 2);
-		udelay(5);
+		udelay(100);
 		aml_set_reg32_bits(P_HHI_SYS_CPU_CLK_CNTL, 1, 7, 1);
-		udelay(5);
-		hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+		udelay(100);
 	}
+	hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
+	spin_unlock_irqrestore(&pll_changing, flag);
 	return HRTIMER_NORESTART;
 }
 #endif
@@ -879,6 +884,10 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	unsigned long oldcpu = clk_get_rate_a9(clk);
 	unsigned int cpu_clk_cntl = aml_read_reg32(P_HHI_SYS_CPU_CLK_CNTL);
 	int test_n = 0;
+#ifdef CONFIG_FIX_SYSPLL
+	unsigned long flag = 0, cnt = 0;
+	int ret;
+#endif
 
 //	if ((cpu_clk_cntl & 3) == 1) {
 	{
@@ -887,7 +896,18 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 		// CPU switch to xtal
 	#ifdef CONFIG_FIX_SYSPLL
 		if (fix_syspll) {
-			atomic_set(&pll_changing, 1);
+			while (cnt < 10) {
+				ret = hrtimer_try_to_cancel(&fixpll_clock.virtual_clock_timer);
+				if (ret >= 0)
+					break;
+				else
+					cnt++;
+			}
+			if (cnt >= 10) {
+				printk(KERN_ERR "ignore pll change\n");
+				return -1;
+			}
+			spin_lock_irqsave(&pll_changing, flag);
 			in_virtual_clock = 0;
 		}
 	#endif
@@ -935,6 +955,12 @@ static int _clk_set_rate_cpu(struct clk *clk, unsigned long cpu, unsigned long g
 	pr_debug("(CTS_CPU_CLK) CPU %ld.%ldMHz\n", clk_get_rate_a9(clk) / 1000000, clk_get_rate_a9(clk)%1000000);
 #endif /* CONFIG_CPU_FREQ_DEBUG */
 
+#ifdef CONFIG_FIX_SYSPLL
+	if (fix_syspll) {
+		spin_unlock_irqrestore(&pll_changing, flag);
+		in_virtual_clock = 0;
+	}
+#endif
 	return 0;
 }
 
@@ -1261,8 +1287,6 @@ static int set_sys_pll(struct clk *clk,  unsigned long dst)
 	if (fix_syspll) {
 		if (fixpll_freq_verify(dst)) {
 			virtual = 1;
-		} else {
-			hrtimer_cancel(&fixpll_clock.virtual_clock_timer);
 		}
 		div = fixpll_target / (dst / 1000);
 		rem = (fixpll_target * 1000) - (div * dst);
@@ -1366,7 +1390,6 @@ SETPLL:
 			clk->rate = dst;
 		}
 		if (virtual) {
-			atomic_set(&pll_changing, 0);
 			in_virtual_clock = 1;
 			fixpll_clock.cur_rate = dst / 1000;
 			hrtimer_start(&fixpll_clock.virtual_clock_timer, ktime_set(0, swing_inteval * 1000), HRTIMER_MODE_REL);
@@ -2001,7 +2024,6 @@ static int __init meson_clock_init(void)
 	aml_write_reg32(P_HHI_MPEG_CLK_CNTL, (aml_read_reg32(P_HHI_MPEG_CLK_CNTL) |(0x5<<12)|(0x1<<9)|(0x1<<8)|(0x1<<7)|(0x03)));
 	}
 #ifdef CONFIG_FIX_SYSPLL
-	atomic_set(&pll_changing, 0);
 	hrtimer_init(&fixpll_clock.virtual_clock_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
 	fixpll_clock.virtual_clock_timer.function = virtual_clock_work;
 	printk("hrtimer for fix pll ok\n");
-- 
2.19.0

