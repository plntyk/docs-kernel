From 643e8156978ed08195e15a78788489fe579eaacb Mon Sep 17 00:00:00 2001
From: Rongjun Chen <rongjun.chen@amlogic.com>
Date: Fri, 7 Aug 2015 12:20:09 +0800
Subject: [PATCH 5794/5965] PD#102620: wifi: usb_sdio wifi compatible

Change-Id: I729a607bc736af5fc7e47761a4d58ab414242956
---
 drivers/amlogic/mmc/aml_sdio.c    | 25 ++++++++++--
 drivers/amlogic/wifi/wifi_power.c | 67 ++++++++++++++++++++++---------
 drivers/mmc/core/sdio.c           |  4 +-
 3 files changed, 74 insertions(+), 22 deletions(-)

diff --git a/drivers/amlogic/mmc/aml_sdio.c b/drivers/amlogic/mmc/aml_sdio.c
index 9450300b9435..4881ca954ce3 100755
--- a/drivers/amlogic/mmc/aml_sdio.c
+++ b/drivers/amlogic/mmc/aml_sdio.c
@@ -10,6 +10,7 @@
 #include <linux/interrupt.h>
 #include <linux/delay.h>
 #include <linux/dma-mapping.h>
+#include <linux/mmc/sdio_func.h>
 #include <linux/platform_device.h>
 #include <linux/timer.h>
 #include <linux/clk.h>
@@ -1246,6 +1247,24 @@ static struct amlsd_host* aml_sdio_init_host(void)
     return host;
 }
 
+/* determine whether the funcs support sdio data irqs */
+int sdio_card_irq_get(struct mmc_card *card)
+{
+    struct sdio_func *func;
+    int i;
+    for (i = 0; i < card->sdio_funcs; i++) {
+        func = card->sdio_func[i];/*the vender is realtek */
+	if (func && func->vendor == (unsigned short) 0x024c) {
+            card->host->caps |= MMC_CAP_SDIO_IRQ;
+            SDIO_IRQ_SUPPORT = 1;
+            printk("The func support sdio data1 irq!\n");
+            return 1;
+        }
+    }
+    return 0;
+}
+
+
 static int aml_sdio_probe(struct platform_device *pdev)
 {
     struct mmc_host *mmc = NULL;
@@ -1306,9 +1325,9 @@ static int aml_sdio_probe(struct platform_device *pdev)
        if (pdata->caps & MMC_PM_KEEP_POWER)
             mmc->pm_caps |= MMC_PM_KEEP_POWER;
 
-		if(pdata->caps& MMC_CAP_SDIO_IRQ){
-			SDIO_IRQ_SUPPORT = 1;
-		}
+//		if(pdata->caps& MMC_CAP_SDIO_IRQ){
+//			SDIO_IRQ_SUPPORT = 1;
+//		}
 		
         pdata->host = host;
         // host->pdata = pdata; // should not do this here, it will conflict with aml_sdio_request
diff --git a/drivers/amlogic/wifi/wifi_power.c b/drivers/amlogic/wifi/wifi_power.c
index 03e84ff4ac0e..a7f3929689c6 100644
--- a/drivers/amlogic/wifi/wifi_power.c
+++ b/drivers/amlogic/wifi/wifi_power.c
@@ -22,14 +22,19 @@
 #include <linux/suspend.h>
 #include <linux/notifier.h>
 #include <uapi/linux/reboot.h>
+#include <linux/amlogic/wifi_dt.h>
 
 #define WIFI_POWER_MODULE_NAME	"wifi_power"
 #define WIFI_POWER_DRIVER_NAME	"wifi_power"
 #define WIFI_POWER_DEVICE_NAME	"wifi_power"
 #define WIFI_POWER_CLASS_NAME		"wifi_power"
 
-#define POWER_UP    _IO('m',1)
-#define POWER_DOWN  _IO('m',2)
+#define USB_POWER_UP    _IO('m',1)
+#define USB_POWER_DOWN  _IO('m',2)
+#define SDIO_POWER_UP    _IO('m',3)
+#define SDIO_POWER_DOWN  _IO('m',4)
+
+extern  void sdio_reinit(void);
 
 static dev_t wifi_power_devno;
 static struct cdev *wifi_power_cdev = NULL;
@@ -102,8 +107,10 @@ void set_bt_power(int is_power)
     if (wifi_power_on_pin2) {
         amlogic_gpio_request(pdata->power_gpio2,WIFI_POWER_MODULE_NAME);
     }
-
-	usb_power_control(is_power, BT_BIT);
+    if (is_power == 0)
+        usb_power_control(power_gpio_valid_level, BT_BIT);
+    else
+        usb_power_control(!power_gpio_valid_level, BT_BIT);
 }
 
 EXPORT_SYMBOL(set_bt_power);
@@ -154,21 +161,45 @@ static int  wifi_power_release(struct inode *inode,struct file *file)
 
 static long wifi_power_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)
 {
-	switch (cmd)
-	{
-		case POWER_UP:
-			wifi_power_control(1);
-			break;
-
-		case POWER_DOWN:
-			wifi_power_control(0);
-			break;
+    struct wifi_power_platform_data *pdata = NULL;
+    pdata = (struct wifi_power_platform_data*)devp->platform_data;
+    if (pdata == NULL)
+    {
+        printk("%s platform data is required!\n",__FUNCTION__);
+        return -1;
+    }
 
-		default:
-			pr_err("usb wifi_power_ioctl: default !!!\n");
-			return -EINVAL;
-	}
-	return 0;
+    switch (cmd)
+    {
+        case USB_POWER_UP:
+            wifi_power_control(0);
+            mdelay(200);
+            wifi_power_control(1);
+            break;
+        case USB_POWER_DOWN:
+            wifi_power_control(0);
+            amlogic_gpio_free(pdata->power_gpio,WIFI_POWER_MODULE_NAME);
+            if (wifi_power_on_pin2)
+                amlogic_gpio_free(pdata->power_gpio2,WIFI_POWER_MODULE_NAME);
+            printk(KERN_INFO "Set usb_sdio wifi power down!\n");
+            break;
+        case SDIO_POWER_UP:
+            wifi_setup_dt();
+            extern_wifi_set_enable(0);
+            mdelay(200);
+            extern_wifi_set_enable(1);
+            mdelay(200);
+            sdio_reinit();
+            break;
+        case SDIO_POWER_DOWN:
+            extern_wifi_set_enable(0);
+            wifi_teardown_dt();
+            break;
+        default:
+            pr_err("usb wifi_power_ioctl: default !!!\n");
+            return -EINVAL;
+    }
+    return 0;
 }
 
 int wifi_power_control(int power_up)
diff --git a/drivers/mmc/core/sdio.c b/drivers/mmc/core/sdio.c
index 76dc8ec74199..38c2ae4ffdea 100755
--- a/drivers/mmc/core/sdio.c
+++ b/drivers/mmc/core/sdio.c
@@ -35,6 +35,8 @@
 #include <linux/mmc/sdio_ids.h>
 #endif
 
+extern int sdio_card_irq_get(struct mmc_card *card);
+
 static int sdio_read_fbr(struct sdio_func *func)
 {
 	int ret;
@@ -1224,7 +1226,7 @@ int mmc_attach_sdio(struct mmc_host *host)
 		if (err)
 			goto remove_added;
 	}
-
+	sdio_card_irq_get(host->card);
 	mmc_claim_host(host);
 	return 0;
 
-- 
2.19.0

