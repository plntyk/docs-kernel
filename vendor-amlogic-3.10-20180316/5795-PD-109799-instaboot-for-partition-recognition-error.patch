From 4cb8950c3bf0b6bf954cc8d9d06661cb6ae0a6e2 Mon Sep 17 00:00:00 2001
From: Zhenfei Li <zhenfei.li@amlogic.com>
Date: Thu, 30 Jul 2015 16:26:10 +0800
Subject: [PATCH 5795/5965] PD#109799: instaboot: for partition recognition
 error

Change-Id: Ifd4dd06ee6946736a945c868b15f7c999d6e4faf
---
 drivers/amlogic/instaboot/instaboot_kernel.c |  6 ++++
 include/linux/amlogic/instaboot/instaboot.h  |  5 ++++
 init/do_mounts.c                             |  5 ++--
 kernel/power/hibernate.c                     | 25 ++++++++++------
 kernel/power/snapshot.c                      | 30 +++++++++++++++-----
 5 files changed, 52 insertions(+), 19 deletions(-)

diff --git a/drivers/amlogic/instaboot/instaboot_kernel.c b/drivers/amlogic/instaboot/instaboot_kernel.c
index 78787a8c2144..29714955052a 100644
--- a/drivers/amlogic/instaboot/instaboot_kernel.c
+++ b/drivers/amlogic/instaboot/instaboot_kernel.c
@@ -88,6 +88,12 @@ void aml_get_utsname(struct new_utsname * un)
 }
 EXPORT_SYMBOL(aml_get_utsname);
 
+int ib_show_progress_bar(u32 percent)
+{
+	return osd_show_progress_bar(percent);
+}
+EXPORT_SYMBOL(ib_show_progress_bar);
+
 /*
    in kernel booting process, acquire some memory for device probe,
    which will not be crush when recovery the instaboot image.
diff --git a/include/linux/amlogic/instaboot/instaboot.h b/include/linux/amlogic/instaboot/instaboot.h
index 0f2435eaa5d4..e91f59045748 100644
--- a/include/linux/amlogic/instaboot/instaboot.h
+++ b/include/linux/amlogic/instaboot/instaboot.h
@@ -53,6 +53,7 @@ extern void aml_snapshot_write_finalize(struct snapshot_handle *handle);
 extern unsigned long aml_snapshot_get_image_size(void);
 extern int aml_snapshot_image_loaded(struct snapshot_handle *handle);
 extern dev_t aml_get_swsusp_resume_device(void);
+extern int ib_show_progress_bar(u32 percent);
 
 extern end_swap_bio_read_p_t aml_get_end_swap_bio_read(void);
 extern unsigned int aml_nr_free_highpages (void);
@@ -62,4 +63,8 @@ extern void* aml_boot_alloc_rsvmem(size_t size);
 
 extern int aml_istbt_reg_fun(aml_istbt_fun_t fun_type, void* fun_p);
 extern int aml_istbt_unreg_fun(aml_istbt_fun_t fun_type);
+
+extern int osd_show_progress_bar(u32 percent);
+extern int osd_init_progress_bar(void);
+
 #endif /* _INSTABOOT_H__ */
\ No newline at end of file
diff --git a/init/do_mounts.c b/init/do_mounts.c
index 65120c60a7d5..f1e9c4e0c143 100644
--- a/init/do_mounts.c
+++ b/init/do_mounts.c
@@ -101,9 +101,8 @@ static int match_dev_by_name(struct device *dev, const void *data)
 {
 	const char* name = data;
 
-	//printk("cmp partition dev: %s, name: %s\n", dev_name(dev), name);
-
-	if (!strstr(name, dev_name(dev)))
+	/* delete string "block/" */
+	if (strcmp(&name[6], dev_name(dev)))
 		goto no_match;
 
 	return 1;
diff --git a/kernel/power/hibernate.c b/kernel/power/hibernate.c
index c572a07cbcaf..b1fef6226be8 100644
--- a/kernel/power/hibernate.c
+++ b/kernel/power/hibernate.c
@@ -41,10 +41,6 @@ static char resume_file[256] = CONFIG_PM_STD_PARTITION;
 dev_t swsusp_resume_device;
 sector_t swsusp_resume_block;
 int in_suspend __nosavedata;
-
-extern int osd_show_progress_bar(u32 percent);
-extern int osd_init_progress_bar(void);
-
 extern void l2x0_resume(void);
 
 #define BOOT_TYPE_NORMAL	0
@@ -1124,13 +1120,16 @@ static struct attribute_group attr_group = {
 
 extern unsigned int is_instabooting;
 
+static int normal_boot_flag __nosavedata;
 static int __init pm_disk_init(void)
 {
-	pr_info("instabooting: %d\n", is_instabooting);
-	if (is_instabooting)
-		boot_type = BOOT_TYPE_BOOTING;
-	else
-		boot_type = BOOT_TYPE_NORMAL;
+	if (!normal_boot_flag) {
+		pr_info("instabooting: %d\n", is_instabooting);
+		if (is_instabooting)
+			boot_type = BOOT_TYPE_BOOTING;
+		else
+			boot_type = BOOT_TYPE_NORMAL;
+	}
 	return sysfs_create_group(power_kobj, &attr_group);
 }
 
@@ -1158,6 +1157,13 @@ static int __init resume_offset_setup(char *str)
 	return 1;
 }
 
+static int __init normalboot_setup(char *str)
+{
+	boot_type = BOOT_TYPE_FAST;
+	normal_boot_flag = 1;
+	return 1;
+}
+
 static int __init hibernate_setup(char *str)
 {
 	if (!strncmp(str, "noresume", 8))
@@ -1193,6 +1199,7 @@ static int __init resumedelay_setup(char *str)
 
 __setup("wipeinstaboot", wipeinstaboot_setup);
 __setup("noresume", noresume_setup);
+__setup("normalboot", normalboot_setup);
 __setup("resume_offset=", resume_offset_setup);
 __setup("resume=", resume_setup);
 __setup("hibernate=", hibernate_setup);
diff --git a/kernel/power/snapshot.c b/kernel/power/snapshot.c
index 3e82688312e7..5b7307c00373 100644
--- a/kernel/power/snapshot.c
+++ b/kernel/power/snapshot.c
@@ -39,8 +39,8 @@
 #include "power.h"
 
 static int swsusp_page_is_free(struct page *);
-void swsusp_set_page_forbidden(struct page *);
-void swsusp_unset_page_forbidden(struct page *);
+static void swsusp_set_page_forbidden(struct page *);
+static void swsusp_unset_page_forbidden(struct page *);
 
 /*
  * Number of bytes to reserve for memory allocations made by device drivers
@@ -121,7 +121,13 @@ unsigned long get_safe_page(gfp_t gfp_mask)
 #ifdef CONFIG_INSTABOOT_MEM_MG
 static inline struct page* alloc_image_page(gfp_t gfp_mask)
 {
-	return istbt_alloc_image_page(gfp_mask);
+	struct page *page;
+	page = istbt_alloc_image_page(gfp_mask);
+	if (page) {
+		swsusp_set_page_forbidden(page);
+		swsusp_set_page_free(page);
+	}
+	return page;
 }
 #else
 static struct page *alloc_image_page(gfp_t gfp_mask)
@@ -144,7 +150,17 @@ static struct page *alloc_image_page(gfp_t gfp_mask)
 #ifdef CONFIG_INSTABOOT_MEM_MG
 static inline void free_image_page(void *addr, int clear_nosave_free)
 {
+	struct page *page;
+
+	BUG_ON(!virt_addr_valid(addr));
+
+	page = virt_to_page(addr);
+
 	istbt_free_image_page(addr, clear_nosave_free);
+
+	swsusp_unset_page_forbidden(page);
+	if (clear_nosave_free)
+		swsusp_unset_page_free(page);
 }
 #else
 static inline void free_image_page(void *addr, int clear_nosave_free)
@@ -665,10 +681,10 @@ __register_nosave_region(unsigned long start_pfn, unsigned long end_pfn,
  * Set bits in this map correspond to the page frames the contents of which
  * should not be saved during the suspend.
  */
-struct memory_bitmap *forbidden_pages_map;
+static struct memory_bitmap *forbidden_pages_map;
 
 /* Set bits in this map correspond to free page frames. */
-struct memory_bitmap *free_pages_map;
+static struct memory_bitmap *free_pages_map;
 
 /*
  * Each page frame allocated for creating the image is marked by setting the
@@ -707,7 +723,7 @@ void swsusp_unset_page_free(struct page *page)
 }
 EXPORT_SYMBOL(swsusp_unset_page_free);
 
-void swsusp_set_page_forbidden(struct page *page)
+static void swsusp_set_page_forbidden(struct page *page)
 {
 	if (forbidden_pages_map)
 		memory_bm_set_bit(forbidden_pages_map, page_to_pfn(page));
@@ -720,7 +736,7 @@ int swsusp_page_is_forbidden(struct page *page)
 		memory_bm_test_bit(forbidden_pages_map, page_to_pfn(page)) : 0;
 }
 
-void swsusp_unset_page_forbidden(struct page *page)
+static void swsusp_unset_page_forbidden(struct page *page)
 {
 	if (forbidden_pages_map)
 		memory_bm_clear_bit(forbidden_pages_map, page_to_pfn(page));
-- 
2.19.0

