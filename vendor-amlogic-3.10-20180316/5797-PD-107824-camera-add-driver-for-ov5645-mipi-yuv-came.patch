From 8102e75dffabaf55cb9dac8062997ab2198d94f2 Mon Sep 17 00:00:00 2001
From: Alex Deng <alex.deng@amlogic.com>
Date: Fri, 7 Aug 2015 15:25:26 +0800
Subject: [PATCH 5797/5965] PD#107824: camera: add driver for ov5645 mipi yuv
 camera

Change-Id: If4d2181c7b0b63072f11d04ff37341c990388d75
---
 drivers/amlogic/camera/Kconfig             |   13 +
 drivers/amlogic/camera/Makefile            |    2 +
 drivers/amlogic/camera/common/cam_prober.c | 3409 ++++++++--------
 drivers/amlogic/camera/ov5645.c            | 4102 ++++++++++++++++++++
 drivers/amlogic/camera/ov5645_firmware.h   |  581 +++
 5 files changed, 6432 insertions(+), 1675 deletions(-)
 create mode 100644 drivers/amlogic/camera/ov5645.c
 create mode 100644 drivers/amlogic/camera/ov5645_firmware.h

diff --git a/drivers/amlogic/camera/Kconfig b/drivers/amlogic/camera/Kconfig
index 4edf7d085b88..ecb634aa861b 100755
--- a/drivers/amlogic/camera/Kconfig
+++ b/drivers/amlogic/camera/Kconfig
@@ -351,6 +351,19 @@ config VIDEO_AMLOGIC_CAPTURE_OV3660
 	  Amlogic capture driver.
 	  Say Y here if you want this driver.
 	  
+config VIDEO_AMLOGIC_CAPTURE_OV5645
+	tristate "Amlogic Platform Capture Driver for OV5645"
+	depends on VIDEO_AMLOGIC_CAPTURE
+	select VIDEOBUF_VMALLOC
+	select AMLOGIC_VIDEOIN_MANAGER
+	select TVIN
+	select TVIN_BT656
+	select TVIN_VDIN
+	default n
+	---help---
+	  Amlogic capture driver.
+	  Say Y here if you want this driver.
+
 config VIDEO_AMLOGIC_CAPTURE_OV5647
 	tristate "Amlogic Platform Capture Driver for OV5647"
 	depends on VIDEO_AMLOGIC_CAPTURE
diff --git a/drivers/amlogic/camera/Makefile b/drivers/amlogic/camera/Makefile
index 4a659ede1f09..7fe202fd3a4a 100755
--- a/drivers/amlogic/camera/Makefile
+++ b/drivers/amlogic/camera/Makefile
@@ -13,6 +13,7 @@ gc2035dri-objs := gc2035.o
 gc2155dri-objs := gc2155.o 
 ov5640dri-objs := ov5640.o
 ov5642dri-objs := ov5642.o
+ov5645dri-objs := ov5645.o
 ov5647dri-objs := ov5647.o
 ov7675dri-objs := ov7675.o
 ov2655dri-objs := ov2655.o
@@ -48,6 +49,7 @@ obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2035) += gc2035dri.o
 obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2155) += gc2155dri.o 
 obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5640) += ov5640dri.o
 obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5642) += ov5642dri.o
+obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5645) += ov5645dri.o
 obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5647) += ov5647dri.o
 obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_OV7675) += ov7675dri.o
 obj-$(CONFIG_VIDEO_AMLOGIC_CAPTURE_OV2655) += ov2655dri.o
diff --git a/drivers/amlogic/camera/common/cam_prober.c b/drivers/amlogic/camera/common/cam_prober.c
index 47b5c3874ec7..e0e30dbff281 100755
--- a/drivers/amlogic/camera/common/cam_prober.c
+++ b/drivers/amlogic/camera/common/cam_prober.c
@@ -1,1675 +1,1734 @@
-/*******************************************************************
- *
- *  Copyright C 2010 by Amlogic, Inc. All Rights Reserved.
- *
- *  Description:
- *
- *  Author: Amlogic Software
- *  Created: 2013/1/31   18:20
- *
- *******************************************************************/
-#include <linux/i2c.h>
-#include <linux/init.h>
-#include <linux/kernel.h>
-#include <linux/module.h>
-#include <linux/err.h>
-#include <linux/platform_device.h>
-#include <linux/of.h>
-#include <linux/slab.h>
-#include <linux/pinctrl/consumer.h>
-#include <mach/am_regs.h>
-#include <linux/delay.h>
-#include <mach/gpio.h>
-//#include <mach/gpio_data.h>
-#include <linux/amlogic/tvin/tvin.h>
-
-#include <linux/amlogic/camera/aml_cam_info.h>
-#include <linux/amlogic/aml_gpio_consumer.h>
-
-//extern int amlogic_gpio_name_map_num(const char *name);
-//extern int32_t gpio_out(uint32_t pin,bool high);
-
-static int aml_camera_read_buff(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, char *buf, int addr_len, int data_len)
-{
-	int  i2c_flag = -1;
-	struct i2c_msg msgs[] = {
-		{
-			.addr	= dev_addr,
-			.flags	= 0,
-			.len	= addr_len,
-			.buf	= buf,
-		},{
-			.addr	= dev_addr,
-			.flags	= I2C_M_RD,
-			.len	= data_len,
-			.buf	= buf,
-		}
-	};
-
-	i2c_flag = i2c_transfer(adapter, msgs, 2);
-
-	return i2c_flag;
-}
-
-static int aml_camera_write_buff(struct i2c_adapter *adapter, 
-				unsigned short dev_addr, char *buf, int len)
-{
-	struct i2c_msg msg[] = {
-		{
-			.addr	= dev_addr,
-			.flags	= 0,    //|I2C_M_TEN,
-			.len	= len,
-			.buf	= buf,
-		}
-	};
-
-	if (i2c_transfer(adapter, msg, 1) < 0) {
-		return -1;
-	} else
-		return 0;
-}
-
-static int aml_i2c_get_byte(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned short addr)
-{
-	unsigned char buff[4];
-	buff[0] = (unsigned char)((addr >> 8) & 0xff);
-	buff[1] = (unsigned char)(addr & 0xff);
-       
-	if (aml_camera_read_buff(adapter, dev_addr, buff, 2, 1) <0)
-		return -1;
-	return buff[0];
-}
-
-static int aml_i2c_put_byte(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned short addr, unsigned char data)
-{
-	unsigned char buff[4];
-	buff[0] = (unsigned char)((addr >> 8) & 0xff);
-	buff[1] = (unsigned char)(addr & 0xff);
-	buff[2] = data;
-	if (aml_camera_write_buff(adapter, dev_addr, buff, 3) <0)
-		return -1;
-	return  0;
-}
-
-
-static int aml_i2c_get_byte_add8(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned short addr)
-{
-	unsigned char buff[4];
-	buff[0] = (unsigned char)(addr & 0xff);
-       
-	if (aml_camera_read_buff(adapter, dev_addr, buff, 1, 1) <0)
-		return -1;
-	return buff[0];
-}
-
-static int aml_i2c_put_byte_add8(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned short addr, unsigned char data)
-{
-	unsigned char buff[4];
-	buff[0] = (unsigned char)(addr & 0xff);
-	buff[1] = data;
-	if (aml_camera_write_buff(adapter, dev_addr, buff, 2) <0)
-		return -1;
-	return  0;
-}
-
-int aml_i2c_put_word(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned short addr, unsigned short data)
-{
-	unsigned char buff[4];
-	buff[0] = (unsigned char)((addr >> 8) & 0xff);
-	buff[1] = (unsigned char)(addr & 0xff);
-	buff[2] = (unsigned char)((data >> 8) & 0xff);
-	buff[3] = (unsigned char)(data & 0xff);
-	if (aml_camera_write_buff(adapter, dev_addr, buff, 4) <0)
-		return -1;
-	return 0;
-}
-
-static int aml_i2c_get_word(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned short addr)
-{
-	int ret;
-	unsigned char buff[4];
-	buff[0] = (unsigned char)((addr >> 8) & 0xff);
-	buff[1] = (unsigned char)(addr & 0xff);
-	if (aml_camera_read_buff(adapter, dev_addr, buff, 2, 2) <0)
-		return -1;
-	ret =  (buff[0]<< 8)|(buff[1]);
-	return ret;
-}
-
-static int aml_i2c_get_word_add8(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned short addr)
-{
-	int ret;
-	unsigned char buff[4];
-	buff[0] = (unsigned char)((addr >> 8) & 0xff);
-	buff[1] = (unsigned char)(addr & 0xff);
-	if (aml_camera_read_buff(adapter, dev_addr, buff, 2, 2) <0)
-		return -1;
-	ret =  buff[0] | (buff[1] << 8);
-	return ret;
-}
-
-
-static int aml_i2c_put_word_add8(struct i2c_adapter *adapter, 
-		unsigned short dev_addr, unsigned char addr, unsigned short data)
-{
-	unsigned char buff[4];
-	buff[0] = (unsigned char)(addr & 0xff);
-	buff[1] = (unsigned char)(data >> 8 & 0xff);
-	buff[2] = (unsigned char)(data & 0xff);
-	if (aml_camera_write_buff(adapter, dev_addr, buff, 3) <0)
-		return -1;
-	return  0;
-}
-
-
-extern struct i2c_client *
-i2c_new_existing_device(struct i2c_adapter *adap, 
-			struct i2c_board_info const *info);
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0307
-int gc0307_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg;  
-	reg = aml_i2c_get_byte_add8(adapter, 0x21, 0x00);
-	if (reg == 0x99)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0308
-int gc0308_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg;   
-	reg = aml_i2c_get_byte_add8(adapter, 0x21, 0x00);
-	if (reg == 0x9b)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0328
-int gc0328_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg;   
-	reg = aml_i2c_get_byte_add8(adapter, 0x21, 0xf0);
-	if (reg == 0x9d)
-		ret = 1;
-	return ret;
-}
-#endif 
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0329
-int gc0329_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg;  
-	aml_i2c_put_byte_add8(adapter, 0x31, 0xfc, 0x16); //select page 0
-	reg = aml_i2c_get_byte_add8(adapter, 0x31, 0x00);
-	if (reg == 0xc0)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2015
-int gc2015_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x30, 0x00);
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x30, 0x01);
-	if (reg[0] == 0x20 && reg[1] == 0x05)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM2057
-int hm2057_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte(adapter, 0x24, 0x0001);
-	reg[1] = aml_i2c_get_byte(adapter, 0x24, 0x0002);
-	if (reg[0] == 0x20 && reg[1] == 0x56)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2035
-int gc2035_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf0);
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf1);
-	if (reg[0] == 0x20 && reg[1] == 0x35)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2155
-int gc2155_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf0);
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf1);
-	if (reg[0] == 0x21 && reg[1] == 0x55)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GT2005
-int gt2005_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];
-	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x0000);
-	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x0001);
-	if (reg[0] == 0x51 && reg[1] == 0x38)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV2659
-int ov2659_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte(adapter, 0x30, 0x300a);
-	reg[1] = aml_i2c_get_byte(adapter, 0x30, 0x300b);
-	if (reg[0] == 0x26 && reg[1] == 0x56)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3640
-int ov3640_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
-	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
-	if (reg[0] == 0x36 && reg[1] == 0x4c)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3660
-int ov3660_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
-	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
-	if (reg[0] == 0x36 && reg[1] == 0x60)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5640
-int ov5640_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
-	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
-	if (reg[0] == 0x56 && reg[1] == 0x40)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5642
-int ov5642_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
-	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
-	if (reg[0] == 0x56 && reg[1] == 0x42)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV7675
-int ov7675_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x21, 0x0a);
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x21, 0x0b);
-	if (reg[0] == 0x76 && reg[1] == 0x73)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0A19
-int sp0a19_v4l2_probe(struct i2c_adapter *adapter)
-{
-    int ret = 0;
-    unsigned char reg;
-    reg = aml_i2c_get_byte_add8(adapter, 0x21, 0x02);
-    if (reg == 0xa6)
-        ret = 1;
-    return ret;
-}
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP2518
-int sp2518_v4l2_probe(struct i2c_adapter *adapter)
-{
-    int ret = 0;
-    unsigned char reg;
-    reg = aml_i2c_get_byte_add8(adapter, 0x30, 0x02);
-    if (reg == 0x53)
-        ret = 1;
-    return ret;
-}
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0838
-int sp0838_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg;    
-	reg = aml_i2c_get_byte_add8(adapter, 0x18, 0x02);
-	if (reg == 0x27)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI253
-int hi253_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg;   
-	reg = aml_i2c_get_byte_add8(adapter, 0x20, 0x04);
-	if (reg == 0x92)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM5065
-int hm5065_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte(adapter, 0x1F, 0x0000);
-	reg[1] = aml_i2c_get_byte(adapter, 0x1F, 0x0001);
-	if (reg[0] == 0x03 && reg[1] == 0x9e)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM1375
-int hm1375_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte(adapter, 0x24, 0x0001);
-	reg[1] = aml_i2c_get_byte(adapter, 0x24, 0x0002);
-	printk("hm1375_v4l2_probe: device ID: 0x%x%x",reg[0], reg[1]);
-	if ((reg[0] == 0x13 || reg[0]==0x03)&& reg[1] == 0x75)
-		ret = 1;
-    ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI2056
-int hi2056_v4l2_probe(struct i2c_adapter *adapter)
-{
-	int ret = 0;
-	unsigned char reg[2];
-	reg[0] = aml_i2c_get_byte(adapter, 0x24, 0x0001);
-	reg[1] = aml_i2c_get_byte(adapter, 0x24, 0x0002);
-        printk("reg[0]=%x, reg[1]=%x\n", reg[0], reg[1]);
-	if (reg[0] == 0x20 && reg[1] == 0x56)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5647
-int ov5647_v4l2_probe(struct i2c_adapter *adapter)
-{
- 	int ret = 0;
-	unsigned char reg[2];  
-	reg[0] = aml_i2c_get_byte(adapter, 0x36, 0x300a);
-	reg[1] = aml_i2c_get_byte(adapter, 0x36, 0x300b);
-	printk("reg[0]:%x,reg[1]:%x\n",reg[0],reg[1]);
-	if (reg[0] == 0x56 && reg[1] == 0x47)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0543
-int ar0543_v4l2_probe(struct i2c_adapter *adapter)
-{
- 	int ret = 0, reg_val;
-	reg_val = aml_i2c_get_word(adapter, 0x36, 0x3000);
-	printk("reg:0x%x\n",reg_val);
-	if (reg_val == 0x4800)
-		ret = 1;
-	return ret;
-}
-#endif
-
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0833
-int ar0833_v4l2_probe(struct i2c_adapter *adapter)
-{
- 	int ret = 0, reg_val;
-	reg_val = aml_i2c_get_word(adapter, 0x36, 0x3000);
-	printk("reg:0x%x\n",reg_val);
-	if (reg_val == 0x4B03)
-		ret = 1;
-	return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP1628
-int sp1628_v4l2_probe(struct i2c_adapter *adapter)
-{
-    int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x3c, 0x02);
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xa0);
-	if (reg[0] == 0x16 && reg[1] == 0x28)
-		ret = 1;
-    return ret;
-}
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3720
-int bf3720_v4l2_probe(struct i2c_adapter *adapter)
-{
-    int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfc);
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfd);
-	if (reg[0] == 0x37 && reg[1] == 0x20)
-		ret = 1;
-    return ret;
-}
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3703
-int __init bf3703_v4l2_probe(struct i2c_adapter *adapter)
-{
-    int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfc); //i2c addr:0x6f
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfd);
-	if (reg[0] == 0x37 && reg[1] == 0x03)
-		ret = 1;
-    return ret;
-}
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3920
-int __init bf3920_v4l2_probe(struct i2c_adapter *adapter)
-{
-    int ret = 0;
-	unsigned char reg[2];   
-	reg[0] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfc); //i2c addr:0x6f
-	reg[1] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfd);
-	if (reg[0] == 0x39 && reg[1] == 0x20)
-		ret = 1;
-    return ret;
-}
-#endif
-
-typedef struct {
-	unsigned char addr;
-	char* name;
-	unsigned char pwdn;
-	resolution_size_t max_cap_size;
-	aml_cam_probe_fun_t probe_func;
-}aml_cam_dev_info_t;
-
-static aml_cam_dev_info_t cam_devs[] = {
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0307
-	{
-		.addr = 0x21,
-		.name = "gc0307",
-		.pwdn = 1,
-		.max_cap_size = SIZE_640X480,
-		.probe_func = gc0307_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0308
-	{
-		.addr = 0x21,
-		.name = "gc0308",
-		.pwdn = 1,
-		.max_cap_size = SIZE_640X480,
-		.probe_func = gc0308_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0328
-	{
-		.addr = 0x21,
-		.name = "gc0328",
-		.pwdn = 1,
-		.max_cap_size = SIZE_640X480,
-		.probe_func = gc0328_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0329
-	{
-		.addr = 0x31,
-		.name = "gc0329",
-		.pwdn = 1,
-		.max_cap_size = SIZE_640X480,
-		.probe_func = gc0329_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2015
-	{
-		.addr = 0x30,
-		.name = "gc2015",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = gc2015_v4l2_probe,
-	},
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM2057
-	{
-		.addr = 0x24,
-		.name = "hm2057",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = hm2057_v4l2_probe,
-	},
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2035
-	{
-		.addr = 0x3c,
-		.name = "gc2035",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = gc2035_v4l2_probe,
-	},
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2155
-	{
-		.addr = 0x3c,
-		.name = "gc2155",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = gc2155_v4l2_probe,
-	},
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GT2005
-	{
-		.addr = 0x3c,
-		.name = "gt2005",
-		.pwdn = 0,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = gt2005_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV2659
-	{
-		.addr = 0x30,
-		.name = "ov2659",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = ov2659_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3640
-	{
-		.addr = 0x3c,
-		.name = "ov3640",
-		.pwdn = 1,
-		.max_cap_size = SIZE_2048X1536;
-		.probe_func = ov3640_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3660
-	{
-		.addr = 0x3c,
-		.name = "ov3660",
-		.pwdn = 1,
-		.max_cap_size = SIZE_2048X1536,
-		.probe_func = ov3660_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5640
-	{
-		.addr = 0x3c,
-		.name = "ov5640",
-		.pwdn = 1,
-		.max_cap_size = SIZE_2592X1944,
-		.probe_func = ov5640_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5642
-	{
-		.addr = 0x3c,
-		.name = "ov5642",
-		.pwdn = 1,
-		.max_cap_size = SIZE_2592X1944,
-		.probe_func = ov5642_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5647
-    {
-		.addr = 0x36, // really value should be 0x6c
-		.name = "ov5647",
-		.pwdn = 1,
-		.max_cap_size = SIZE_2592X1944,
-		.probe_func = ov5647_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV7675
-	{
-		.addr = 0x21,
-		.name = "ov7675",
-		.pwdn = 1,
-		.max_cap_size = SIZE_640X480,
-		.probe_func = ov7675_v4l2_probe,
-	},
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0A19
-	{
-		.addr = 0x21,
-		.name = "sp0a19",
-		.pwdn =1,
-        .max_cap_size = SIZE_640X480,
-		.probe_func = sp0a19_v4l2_probe,
-	},
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0838
-	{
-		.addr = 0x18,
-		.name = "sp0838",
-		.pwdn = 1,
-		.max_cap_size = SIZE_640X480,
-		.probe_func = sp0838_v4l2_probe,
-	},
-#endif
-		
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP2518
-	{
-		.addr = 0x30,
-		.name = "sp2518",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = sp2518_v4l2_probe,
-	},
-#endif
-
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI253
-	{
-		.addr = 0x20,
-		.name = "hi253",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = hi253_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM5065
-	{
-		.addr = 0x1f,
-		.name = "hm5065",
-		.pwdn = 0,
-		.max_cap_size = SIZE_2592X1944,
-		.probe_func = hm5065_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM1375
-	{
-		.addr = 0x24,
-		.name = "hm1375",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1280X1024,
-		.probe_func = hm1375_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI2056
-	{
-		.addr = 0x24,
-		.name = "mipi-hi2056",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = hi2056_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0543
-	{
-		.addr = 0x36,
-		.name = "ar0543",
-		.pwdn = 0,
-		.max_cap_size = SIZE_2592X1944,
-		.probe_func = ar0543_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0833
-	{
-		.addr = 0x36,
-		.name = "ar0833",
-		.pwdn = 0,
-		.max_cap_size = SIZE_2592X1944,
-		.probe_func = ar0833_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP1628
-	{
-		.addr = 0x3c,
-		.name = "sp1628",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1280X960,
-		.probe_func = sp1628_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3720
-	{
-		.addr = 0x6e,
-		.name = "bf3720",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = bf3720_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3703
-	{
-		.addr = 0x6e,
-		.name = "bf3703",
-		.pwdn = 1,
-		.max_cap_size = SIZE_640X480,
-		.probe_func = bf3703_v4l2_probe,
-	},
-#endif
-#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3920
-	{
-		.addr = 0x6e,
-		.name = "bf3920",
-		.pwdn = 1,
-		.max_cap_size = SIZE_1600X1200,
-		.probe_func = bf3920_v4l2_probe,
-	},
-#endif
-};
-
-static aml_cam_dev_info_t* get_cam_info_by_name(const char* name)
-{
-	int i;
-	if (!name)
-		return NULL;
-	printk("cam_devs num is %d\n", ARRAY_SIZE(cam_devs));
-	for (i = 0; i < ARRAY_SIZE(cam_devs); i++) {
-		if (!strcmp(name, cam_devs[i].name)) {
-			printk("camera dev %s found\n", cam_devs[i].name);
-			printk("camera i2c addr: 0x%x\n", cam_devs[i].addr);
-			return &cam_devs[i];
-		}
-	}
-	return NULL;
-}
-
-struct res_item {
-	resolution_size_t size;
-	char* name;
-};
-
-struct res_item res_item_array[] = {
-	{SIZE_320X240, "320X240"},
-	{SIZE_640X480, "640X480"},
-	{SIZE_720X405, "720X405"},
-	{SIZE_800X600, "800X600"},
-	{SIZE_960X540, "960X540"},
-	{SIZE_1024X576, "1024X576"},
-	{SIZE_960X720, "960X720"},
-	{SIZE_1024X768, "1024X768"},
-	{SIZE_1280X720, "1280X720"},
-	{SIZE_1152X864, "1152X864"},
-	{SIZE_1366X768, "1366X768"},
-	{SIZE_1280X960, "1280X960"},
-	{SIZE_1280X1024, "1280X1024"},
-	{SIZE_1400X1050, "1400X1050"},
-	{SIZE_1600X900, "1600X900"},
-	{SIZE_1600X1200, "1600X1200"},
-	{SIZE_1920X1080, "1920X1080"},
-	{SIZE_1792X1344, "1792X1344"},
-	{SIZE_2048X1152, "2048X1152"},
-	{SIZE_2048X1536, "2048X1536"},
-	{SIZE_2304X1728, "2304X1728"},
-	{SIZE_2560X1440, "2560X1440"},
-	{SIZE_2592X1944, "2592X1944"},
-	{SIZE_3072X1728, "3072X1728"},
-	{SIZE_2816X2112, "2816X2112"},
-	{SIZE_3072X2304, "3072X2304"},
-	{SIZE_3200X2400, "3200X2400"},
-	{SIZE_3264X2448, "3264X2448"},
-	{SIZE_3840X2160, "3840X2160"},
-	{SIZE_3456X2592, "3456X2592"},
-	{SIZE_3600X2700, "3600X2700"},
-	{SIZE_4096X2304, "4096X2304"},
-	{SIZE_3672X2754, "3672X2754"},
-	{SIZE_3840X2880, "3840X2880"},
-	{SIZE_4000X3000, "4000X3000"},
-	{SIZE_4608X2592, "4608X2592"},
-	{SIZE_4096X3072, "4096X3072"},
-	{SIZE_4800X3200, "4800X3200"},
-	{SIZE_5120X2880, "5120X2880"},
-	{SIZE_5120X3840, "5120X3840"},
-	{SIZE_6400X4800, "6400X480"},
-	
-};
-
-
-static resolution_size_t get_res_size(const char* res_str)
-{
-	resolution_size_t ret = SIZE_NULL;
-	struct res_item* item;
-	int i;
-	if (!res_str)
-		return SIZE_NULL;
-	for (i = 0; i < ARRAY_SIZE(res_item_array); i++) {
-		item = &res_item_array[i];
-		if (!strcmp(item->name, res_str)) {
-			ret = item->size;
-			return ret;
-		}
-	}
-	
-	return ret;
-}
-
-#ifdef CONFIG_ARCH_MESON8B
-static inline void cam_spread_spectrum(int spread_spectrum)
-{
-	printk("spread_spectrum = %d\n", spread_spectrum);
-	if (spread_spectrum == 1)
-		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x1c1, 0, 9);
-	else if (spread_spectrum == 2)
-		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x1a1, 0, 9);
-	else if (spread_spectrum == 3)
-		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x181, 0, 9);
-	else if (spread_spectrum == 4)
-		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x141, 0, 9);
-	else if (spread_spectrum == 5)
-		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x121, 0, 9);
-}
-
-static inline void cam_enable_clk(int clk, int spread_spectrum)
-{
-	if (spread_spectrum) {
-		cam_spread_spectrum(spread_spectrum);
-		aml_set_reg32_bits(P_HHI_MPLL_CNTL7, 0x15d063, 0, 25);
-		if (clk == 12000)
-			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x6809, 0, 16);
-		else
-			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x6804, 0, 16);
-	} else {
-		if (clk == 12000)
-			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 3, 16, 2);
-		else
-			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 16, 2);
-	}
-}
-
-static inline void cam_disable_clk(int spread_spectrum)
-{
-	if (spread_spectrum) {
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 16); //close clock
-	} else {
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 16, 2); //close clock
-	}
-}
-#elif defined CONFIG_ARCH_MESON8
-static inline void cam_enable_clk(int clk, int spread_spectrum)
-{
-	if (clk == 12000) {
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 12, 4);
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 0, 7);
-	} else if (clk == 18000) {
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0xd, 12, 4);
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x13, 0, 7);
-	} else { //default
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 12, 4);
-		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 7);
-	}
-	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 11, 1);
-}
-
-static inline void cam_disable_clk(int spread_spectrum)
-{
-	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 11, 5); //close clock
-	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 7);
-}
-#elif defined CONFIG_ARCH_MESON6
-static inline void cam_enable_clk(int clk, int spread_spectrum)
-{
-	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 8, 5); 
-}
-
-static inline void cam_disable_clk(int spread_spectrum)
-{
-	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 8, 5);  //close clock
-}
-#else
-static inline void cam_enable_clk(int clk, int spread_spectrum)
-{
-}
-
-static inline void cam_disable_clk(int spread_spectrum)
-{	
-}
-#endif
-
-static struct platform_device* cam_pdev = NULL;
-
-void aml_cam_init(aml_cam_info_t* cam_dev)
-{
-	 struct pinctrl* pin_ctrl;
-	//pinmux_set;
-	if (cam_dev->bt_path == BT_PATH_GPIO)
-		pin_ctrl = pinctrl_get_select((struct device*)(&cam_pdev->dev), "gpio");
-	else if (cam_dev->bt_path == BT_PATH_CSI2)
-		pin_ctrl = pinctrl_get_select((struct device*)(&cam_pdev->dev), "csi");
-	else
-		pin_ctrl = pinctrl_get_select((struct device*)(&cam_pdev->dev), "gpio");
-
-	//select XTAL as camera clock
-	cam_enable_clk(cam_dev->mclk, cam_dev->spread_spectrum);
-	
-	msleep(20);
-	// set camera power enable
-	amlogic_gpio_request(cam_dev->pwdn_pin,"camera");
-	amlogic_gpio_direction_output(cam_dev->pwdn_pin,cam_dev->pwdn_act,"camera");
-	msleep(20);
-	
-	amlogic_gpio_request(cam_dev->rst_pin,"camera");
-	amlogic_gpio_direction_output(cam_dev->rst_pin,0,"camera");
-	msleep(20);
-	
-	amlogic_gpio_direction_output(cam_dev->rst_pin,1,"camera");
-	msleep(20);
-	
-	// set camera power enable
-	amlogic_gpio_direction_output(cam_dev->pwdn_pin,!(cam_dev->pwdn_act),"camera");
-	msleep(20);
-	
-	printk("aml_cams: %s init OK\n",  cam_dev->name);
-
-}
-
-void aml_cam_uninit(aml_cam_info_t* cam_dev)
-{
-	struct pinctrl *p;
-	printk( "aml_cams: %s uninit.\n", cam_dev->name);
-	// set camera power disable
-	amlogic_gpio_direction_output(cam_dev->pwdn_pin,
-					cam_dev->pwdn_act,"camera");
-	msleep(5);
-	
-	cam_disable_clk(cam_dev->spread_spectrum);
-	
-	p = pinctrl_get(&cam_pdev->dev);
-	if (IS_ERR(p))
-		return;
-	devm_pinctrl_put(p);
-}
-
-void aml_cam_flash(aml_cam_info_t* cam_dev, int is_on)
-{
-	if (cam_dev->flash_support) {
-		printk( "aml_cams: %s flash %s.\n", 
-				cam_dev->name, is_on ? "on" : "off");
-		amlogic_gpio_direction_output(cam_dev->flash_ctrl_pin, 
-			cam_dev->flash_ctrl_level ? is_on : !is_on, "camera");
-	}
-}
-
-void aml_cam_torch(aml_cam_info_t* cam_dev, int is_on)
-{
-	if (cam_dev->torch_support) {
-		printk( "aml_cams: %s torch %s.\n", 
-				cam_dev->name, is_on ? "on" : "off");
-		amlogic_gpio_direction_output(cam_dev->torch_ctrl_pin, 
-			cam_dev->torch_ctrl_level ? is_on : !is_on, "camera");
-	} 
-}
-
-static struct list_head cam_head = LIST_HEAD_INIT(cam_head);
-
-#define DEBUG_DUMP_CAM_INFO
-
-static int fill_csi_dev(struct device_node* p_node, aml_cam_info_t* cam_dev)
-{
-	const char* str;
-	int ret = 0;
-	//aml_cam_dev_info_t* cam_info = NULL;
-	//struct i2c_adapter *adapter;
-
-	ret = of_property_read_string(p_node, "clk_channel", &str);
-	if (ret) {
-		printk("failed to read clock channel, \"a or b\"\n");
-		cam_dev->clk_channel = CLK_CHANNEL_A;
-	} else {
-		printk("clock channel:clk %s\n", str);
-		if (strncmp("a", str, 1) == 0){
-                        cam_dev->clk_channel = CLK_CHANNEL_A;
-                }else{
-                        cam_dev->clk_channel = CLK_CHANNEL_B;
-                }
-	}
-
-        return ret;
-
-}
-static int fill_cam_dev(struct device_node* p_node, aml_cam_info_t* cam_dev)
-{
-	const char* str;
-	int ret = 0;
-	aml_cam_dev_info_t* cam_info = NULL;
-	struct i2c_adapter *adapter;
-	unsigned mclk = 0;
-	unsigned vcm_mode = 0;
-	
-	if (!p_node || !cam_dev)
-		return -1;
-		
-	ret = of_property_read_string(p_node, "cam_name", &cam_dev->name);
-	if (ret) {
-		printk("get camera name failed!\n");
-		goto err_out;
-	}
-	
-	ret = of_property_read_string(p_node, "gpio_pwdn", &str);
-	if (ret) {
-		printk("%s: faild to get gpio_pwdn!\n", cam_dev->name);
-		goto err_out;
-	}
-	ret = amlogic_gpio_name_map_num(str);
-	if (ret < 0) {
-		printk("%s: faild to map gpio_pwdn !\n", cam_dev->name);
-		goto err_out;
-	}
-	cam_dev->pwdn_pin = ret;
-	
-	ret = of_property_read_string(p_node, "gpio_rst", &str);
-	if (ret) {
-		printk("%s: faild to get gpio_rst!\n", cam_dev->name);
-		goto err_out;
-	}
-	ret = amlogic_gpio_name_map_num(str);
-	if (ret < 0) {
-		printk("%s: faild to map gpio_rst !\n", cam_dev->name);
-		goto err_out;
-	}
-	cam_dev->rst_pin = ret;
-	
-	ret = of_property_read_string(p_node, "i2c_bus", &str);
-	if (ret) {
-		printk("%s: faild to get i2c_bus str!\n", cam_dev->name);
-		cam_dev->i2c_bus_num = AML_I2C_MASTER_A;
-	} else {
-		if (!strncmp(str, "i2c_bus_a", 9))
-			cam_dev->i2c_bus_num = AML_I2C_MASTER_A;
-		else if (!strncmp(str, "i2c_bus_b", 9))
-			cam_dev->i2c_bus_num = AML_I2C_MASTER_B;
-		else if (!strncmp(str, "i2c_bus_c", 9))
-			cam_dev->i2c_bus_num = AML_I2C_MASTER_C;
-		else if (!strncmp(str, "i2c_bus_d", 9))
-			cam_dev->i2c_bus_num = AML_I2C_MASTER_D;
-		else if (!strncmp(str, "i2c_bus_ao", 9))
-			cam_dev->i2c_bus_num = AML_I2C_MASTER_AO;
-		else
-			cam_dev->i2c_bus_num = AML_I2C_MASTER_A; 
-	}
-	
-	cam_info = get_cam_info_by_name(cam_dev->name);
-	if (cam_info == NULL) {
-		printk("camera %s is not support\n", cam_dev->name);
-		ret = -1;
-		goto err_out;
-	} 
-	
-	of_property_read_u32(p_node, "spread_spectrum", &cam_dev->spread_spectrum);
-	
-	cam_dev->pwdn_act = cam_info->pwdn;
-	cam_dev->i2c_addr = cam_info->addr;
-	printk("camer addr: 0x%x\n", cam_dev->i2c_addr);
-	printk("camer i2c bus: %d\n", cam_dev->i2c_bus_num);
-	
-	/* test if the camera is exist */
-	adapter = i2c_get_adapter(cam_dev->i2c_bus_num);
-	if (adapter && cam_info->probe_func) {
-		aml_cam_init(cam_dev);
-		if (cam_info->probe_func(adapter)!= 1) {
-			printk("camera %s not on board\n", cam_dev->name);
-			ret = -1;
-			aml_cam_uninit(cam_dev);
-			goto err_out;
-		}
-		aml_cam_uninit(cam_dev);
-	} else {
-		printk("can not do probe function\n");
-		ret = -1;
-		goto err_out;
-	}
-	
-	of_property_read_u32(p_node, "front_back", &cam_dev->front_back);
-	of_property_read_u32(p_node, "mirror_flip", &cam_dev->m_flip);
-	of_property_read_u32(p_node, "vertical_flip", &cam_dev->v_flip);
-	
-	ret = of_property_read_string(p_node, "max_cap_size", &str);
-	if (ret) {
-		printk("failed to read max_cap_size\n");
-	} else {
-		printk("max_cap_size :%s\n",str);
-		cam_dev->max_cap_size = get_res_size(str);
-	}
-	if (cam_dev->max_cap_size == SIZE_NULL)
-		cam_dev->max_cap_size = cam_info->max_cap_size;
-	
-	ret = of_property_read_string(p_node, "bt_path", &str);
-	if (ret) {
-		printk("failed to read bt_path\n");
-		cam_dev->bt_path = BT_PATH_GPIO;
-	} else {
-		printk("bt_path :%s\n", (char*)cam_dev->bt_path);
-		if (strncmp("csi", str, 3) == 0) 
-			cam_dev->bt_path = BT_PATH_CSI2;
-		else
-			cam_dev->bt_path = BT_PATH_GPIO;
-	}
-
-	ret = of_property_read_u32(p_node, "mclk", &mclk);
-	if (ret) {
-		cam_dev->mclk = 24000;
-	} else {
-		cam_dev->mclk = mclk;
-	}
-	
-	ret = of_property_read_u32(p_node, "vcm_mode", &vcm_mode);
-	if (ret) {
-		cam_dev->vcm_mode = 0;
-	} else {
-		cam_dev->vcm_mode = vcm_mode;
-	}
-	printk("vcm mode is %d\n", cam_dev->vcm_mode);
-	
-	ret = of_property_read_u32(p_node, "flash_support", &cam_dev->flash_support);
-	if (cam_dev->flash_support){
-                of_property_read_u32(p_node, "flash_ctrl_level", &cam_dev->flash_ctrl_level);
-                ret = of_property_read_string(p_node, "flash_ctrl_pin", &str);
-		if (ret) {
-			printk("%s: faild to get flash_ctrl_pin!\n", cam_dev->name);
-			cam_dev->flash_support = 0;
-		} else {
-			ret = amlogic_gpio_name_map_num(str);
-			if (ret < 0) {
-				printk("%s: faild to map flash_ctrl_pin !\n", cam_dev->name);
-				cam_dev->flash_support = 0;
-				cam_dev->flash_ctrl_level = 0;
-			}
-			cam_dev->flash_ctrl_pin = ret;  
-			amlogic_gpio_request(cam_dev->flash_ctrl_pin,"camera");
-		}
-        }
-        
-        ret = of_property_read_u32(p_node, "torch_support", &cam_dev->torch_support);
-	if (cam_dev->torch_support){
-                of_property_read_u32(p_node, "torch_ctrl_level", &cam_dev->torch_ctrl_level);
-                ret = of_property_read_string(p_node, "torch_ctrl_pin", &str);
-		if (ret) {
-			printk("%s: faild to get torch_ctrl_pin!\n", cam_dev->name);
-			cam_dev->torch_support = 0;
-		} else {
-			ret = amlogic_gpio_name_map_num(str);
-			if (ret < 0) {
-				printk("%s: faild to map flash_ctrl_pin !\n", cam_dev->name);
-				cam_dev->torch_support = 0;
-				cam_dev->torch_ctrl_level = 0;
-			}
-			cam_dev->torch_ctrl_pin = ret;  
-			amlogic_gpio_request(cam_dev->torch_ctrl_pin,"camera");
-		}
-        }
-
-	ret = of_property_read_string(p_node, "interface", &str);
-	if (ret) {
-		printk("failed to read camera interface \"mipi or dvp\"\n");
-		cam_dev->interface = CAM_DVP;
-	} else {
-		printk("camera interface:%s\n", str);
-		if (strncmp("dvp", str, 1) == 0){
-                        cam_dev->interface = CAM_DVP;
-                }else{
-                        cam_dev->interface = CAM_MIPI;
-                }
-	}
-        if( CAM_MIPI == cam_dev->interface ){
-		ret = fill_csi_dev( p_node, cam_dev);
-                if ( ret < 0 )
-                        goto err_out;
-        }
-        
-        ret = of_property_read_string(p_node, "bayer_fmt", &str);
-	if (ret) {
-		printk("failed to read camera bayer fmt \n");
-		cam_dev->bayer_fmt = TVIN_GBRG;
-	} else {
-		printk("color format:%s\n", str);
-		if (strncmp("BGGR", str, 4) == 0){
-                        cam_dev->bayer_fmt = TVIN_BGGR;
-                } else if (strncmp("RGGB", str, 4) == 0){
-                        cam_dev->bayer_fmt = TVIN_RGGB;
-                } else if (strncmp("GBRG", str, 4) == 0){
-                        cam_dev->bayer_fmt = TVIN_GBRG;
-                } else if (strncmp("GRBG", str, 4) == 0){
-                        cam_dev->bayer_fmt = TVIN_GRBG;
-                } else {
-                	cam_dev->bayer_fmt = TVIN_GBRG;
-                }
-	}
-
-	ret = of_property_read_string(p_node, "config_path", &cam_dev->config);
-	// cam_dev->config = "/system/etc/myconfig";
-	//ret = 0;
-	if(ret){
-		printk("failed to read config_file path\n");
-	}else{
-		printk("config path :%s\n",cam_dev->config);
-	}
-	
-#ifdef DEBUG_DUMP_CAM_INFO
-	printk("=======cam %s info=======\n"
-		"i2c_bus_num: %d\n"
-		"pwdn_act: %d\n"
-		"front_back: %d\n"
-		"m_flip: %d\n"
-		"v_flip: %d\n"
-		"i2c_addr: 0x%x\n"
-		"config path:%s\n"
-		"bt_path:%d\n",
-		cam_dev->name,
-		cam_dev->i2c_bus_num, cam_dev->pwdn_act, cam_dev->front_back,
-		cam_dev->m_flip, cam_dev->v_flip, cam_dev->i2c_addr,cam_dev->config,
-		cam_dev->bt_path);
-#endif /* DEBUG_DUMP_CAM_INFO */
-	
-	ret = 0;
-	
-err_out:
-	return ret;	
-}
-
-static int  do_read_work(char argn ,char **argv)
-{
-	unsigned int dev_addr, reg_addr, data_len = 1, result;     
-	unsigned int i2c_bus;    
-	struct i2c_adapter *adapter;   
-
-	if (argn < 4){
-		printk("args num error");
-		return -1;
-	}
-	
-	
-	if (!strncmp(argv[1], "i2c_bus_ao", 9))
-		i2c_bus = AML_I2C_MASTER_AO;
-	else if (!strncmp(argv[1], "i2c_bus_a", 9))
-		i2c_bus = AML_I2C_MASTER_A;
-	else if (!strncmp(argv[1], "i2c_bus_b", 9))
-		i2c_bus = AML_I2C_MASTER_B;
-	else if (!strncmp(argv[1], "i2c_bus_c", 9))
-		i2c_bus = AML_I2C_MASTER_C;
-	else if (!strncmp(argv[1], "i2c_bus_d", 9))
-		i2c_bus = AML_I2C_MASTER_D;
-	else {
-		printk("bus name error!\n");
-		return -1;
-	}
-	
-        adapter = i2c_get_adapter(i2c_bus);
-        
-        if (adapter == NULL) {
-        	printk("no adapter!\n");
-		return -1;
-	}
-        
-	dev_addr = simple_strtol(argv[2],NULL,16);
-	reg_addr = simple_strtol(argv[3],NULL,16);
-	if (argn == 5) {
-		printk("argv[4] is %s\n", argv[4]);
-		data_len = simple_strtol(argv[4],NULL,16);
-	}
-	
-	if (reg_addr > 256) {
-		if (data_len != 2) {
-			result = aml_i2c_get_byte(adapter, dev_addr, reg_addr);
-			printk("register [0x%04x]=0x%02x\n", reg_addr, result);
-		} else {
-			result = aml_i2c_get_word(adapter, dev_addr, reg_addr);
-			printk("register [0x%04x]=0x%04x\n", reg_addr, result);
-		}
-	} else {
-		if (data_len != 2) {
-			result = aml_i2c_get_byte_add8(adapter, dev_addr, reg_addr);
-			printk("register [0x%02x]=0x%02x\n", reg_addr, result);
-		} else {
-			result = aml_i2c_get_word_add8(adapter, dev_addr, reg_addr);
-			printk("register [0x%02x]=0x%04x\n", reg_addr, result);
-		}
-	}
-		
-	return 0;
-}
-
-static int do_write_work(char argn ,char **argv)
-{
-	unsigned int dev_addr, reg_addr, reg_val, data_len = 1, ret = 0;     
-	unsigned int i2c_bus;    
-	struct i2c_adapter *adapter;   
-
-
-	if (argn < 5){
-		printk("args num error");
-		return -1;
-	}
-	
-	if (!strncmp(argv[1], "i2c_bus_a", 9))
-		i2c_bus = AML_I2C_MASTER_A;
-	else if (!strncmp(argv[1], "i2c_bus_b", 9))
-		i2c_bus = AML_I2C_MASTER_B;
-	else if (!strncmp(argv[1], "i2c_bus_c", 9))
-		i2c_bus = AML_I2C_MASTER_C;
-	else if (!strncmp(argv[1], "i2c_bus_d", 9))
-		i2c_bus = AML_I2C_MASTER_D;
-	else if (!strncmp(argv[1], "i2c_bus_ao", 9))
-		i2c_bus = AML_I2C_MASTER_AO;
-	else {
-		printk("bus name error!\n");
-		return -1;
-	}
-	
-        adapter = i2c_get_adapter(i2c_bus);
-        
-        if (adapter == NULL) {
-        	printk("no adapter!\n");
-		return -1;
-	}
-        
-	dev_addr = simple_strtol(argv[2],NULL,16);
-	reg_addr = simple_strtol(argv[3],NULL,16);
-	reg_val = simple_strtol(argv[4],NULL,16);
-	if (argn == 6)
-		data_len = simple_strtol(argv[5],NULL,16);
-	if (reg_addr > 256) {
-		if (data_len != 2) {
-			if(aml_i2c_put_byte(adapter, dev_addr, reg_addr, reg_val) < 0) {
-				printk("write error\n");
-				ret = -1;
-			} else {
-				printk("write ok\n");
-				ret = 0;
-			}
-		} else {
-			if(aml_i2c_put_word(adapter, dev_addr, reg_addr, reg_val) < 0) {
-				printk("write error\n");
-				ret = -1;
-			} else {
-				printk("write ok\n");
-				ret = 0;
-			}
-		}
-	} else {
-		if (data_len != 2) {
-			if (aml_i2c_put_byte_add8(adapter, dev_addr, reg_addr, reg_val) < 0){
-				printk("write error\n");
-				ret = -1;
-			} else {
-				printk("write ok\n");
-				ret = 0;
-			}
-		} else {
-			if (aml_i2c_put_word_add8(adapter, dev_addr, reg_addr, reg_val) < 0){
-				printk("write error\n");
-				ret = -1;
-			} else {
-				printk("write ok\n");
-				ret = 0;
-			}
-		}
-	}
-		
-	return ret;
-}
-
-static struct class* cam_clsp;
-
-
-static ssize_t show_help(struct class* class, struct class_attribute* attr,
-	char* buf)
-{
-	ssize_t size = 0;
-	printk( "echo [read | write] i2c_bus_type device_address register_address [value] [data_len] > i2c_debug\n"
-		"i2c_bus_type are: i2c_bus_ao, i2c_bus_a, i2c_bus_b, i2c_bus_c, i2c_bus_d\n"
-		"e.g.: echo read i2c_bus_ao 0x3c 0x18 1\n"
-		"      echo write i2c_bus_ao 0x3c 0x18 0x24 1\n");
-	return size;
-}
-
-static ssize_t store_i2c_debug(struct class* class, struct class_attribute* attr,
-   const char* buf, size_t count )
-{
-	int argn;
-	char * buf_work,*p,*para;
-	char cmd;
-	char * argv[6];
-	
-	buf_work = kstrdup(buf, GFP_KERNEL);
-	p = buf_work;
-	
-	for(argn = 0; argn < 6; argn++){
-		para = strsep(&p," ");
-		if(para == NULL)
-			break;
-		argv[argn] = para;
-		printk("argv[%d] = %s\n",argn,para);
-	}
-	
-	if(argn < 4 || argn > 6)
-		goto end;
-		
-	cmd = argv[0][0];
-	switch (cmd){
-	case 'r':
-	case 'R':
-		do_read_work(argn,argv);
-		break;
-	case 'w':
-	case 'W':
-		do_write_work(argn,argv);
-		break;
-	}
-	return count;
-end:
-	printk("error command!\n");
-	kfree(buf_work);
-	return -EINVAL;	
-}
-
-static LIST_HEAD(info_head);
-
-static ssize_t cam_info_show(struct class* class, 
-			struct class_attribute* attr, char* buf)
-{
-	struct list_head* p;
-	aml_cam_info_t* cam_info = NULL;
-	int count = 0;
-	if (!list_empty(&info_head)) {
-		count += sprintf(&buf[count], "name\t\tversion\t\t\t\tface_dir\t"
-					"i2c_addr\n");
-		list_for_each(p, &info_head) {
-			cam_info = list_entry(p, aml_cam_info_t, info_entry);
-			if (cam_info) {
-				count += sprintf(&buf[count], "%s\t\t%s\t\t%s"
-					"\t\t0x%x\n", 
-					cam_info->name, cam_info->version, 
-					cam_info->front_back?"front":"back",
-					cam_info->i2c_addr);
-			}
-		}
-	}
-	return count;
-}
-
-static struct class_attribute aml_cam_attrs[]={
-	__ATTR(i2c_debug,  S_IRUGO | S_IWUSR, show_help, store_i2c_debug),
-	__ATTR_RO(cam_info),
-	__ATTR(help,  S_IRUGO | S_IWUSR, show_help, NULL),
-	__ATTR_NULL,
-};
-
-int aml_cam_info_reg(aml_cam_info_t* cam_info)
-{
-	int ret = -1;
-	if (cam_info) {
-		//printk("reg camera %s\n", cam_info->name);
-		list_add(&cam_info->info_entry, &info_head);
-		ret = 0;
-	}
-	return ret;
-}
-
-int aml_cam_info_unreg(aml_cam_info_t* cam_info)
-{
-	int ret = -1;
-	struct list_head* p, *n;
-	aml_cam_info_t* tmp_info = NULL;
-	if (cam_info) {
-		list_for_each_safe(p, n, &info_head) {
-			tmp_info = list_entry(p, aml_cam_info_t, info_entry);
-			if (tmp_info == cam_info) {
-				list_del(p);
-				return 0;
-			}
-		}
-	}
-	return ret;
-}
-
-static int aml_cams_probe(struct platform_device *pdev)
-{
-	//printk("##############aml_cams_probe start############\n");
-	
-	struct device_node* cams_node = pdev->dev.of_node;
-	struct device_node* child;
-	struct i2c_board_info board_info;
-	struct i2c_adapter *adapter;
-	int i;
-	aml_cam_info_t temp_cam;
-	cam_pdev = pdev;
-	for_each_child_of_node(cams_node, child) {
-		/*
-		temp_cam = kzalloc(sizeof(aml_cam_info_t), GFP_KERNEL); 
-		if (!temp_cam) {
-			printk("alloc mem error\n");
-			return -ENOMEM;
-		}
-		*/
-		memset(&temp_cam, 0, sizeof(aml_cam_info_t));
-		
-		if (fill_cam_dev(child, &temp_cam)) {
-			continue;
-		}
-		
-		/* register exist camera */
-		memset(&board_info, 0, sizeof(board_info));
-		strncpy(board_info.type, temp_cam.name, I2C_NAME_SIZE);
-		adapter = i2c_get_adapter(temp_cam.i2c_bus_num);
-		board_info.addr = temp_cam.i2c_addr;
-		board_info.platform_data = &temp_cam;
-		printk("new i2c device\n");
-		i2c_new_existing_device(adapter, &board_info);	
-	}
-	//printk("aml probe finish\n");
-	cam_clsp = class_create(THIS_MODULE, "aml_camera");
-	for(i = 0; aml_cam_attrs[i].attr.name; i++){
-		if(class_create_file(cam_clsp, &aml_cam_attrs[i]) < 0)
-			return -1;
-	}
-	return 0;
-}
-
-static int aml_cams_remove(struct platform_device *pdev)
-{
-	return 0;
-}
-
-static const struct of_device_id cams_prober_dt_match[]={
-	{	
-		.compatible = "amlogic,cams_prober",
-	},
-	{},
-};
-
-static  struct platform_driver aml_cams_prober_driver = {
-	.probe		= aml_cams_probe,
-	.remove		= aml_cams_remove,
-	.driver		= {
-		.name	= "aml_cams_prober",
-		.owner	= THIS_MODULE,
-		.of_match_table = cams_prober_dt_match,
-	},
-};
-
-static int __init aml_cams_prober_init(void)
-{
-	if (platform_driver_register(&aml_cams_prober_driver)){
-		printk(KERN_ERR"aml_cams_probre_driver register failed\n");
-		return -ENODEV;
-	}
-
-	return 0;
-}
-
-static void __exit aml_cams_prober_exit(void)
-{
-	platform_driver_unregister(&aml_cams_prober_driver);
-}
-
-module_init(aml_cams_prober_init);
-module_exit(aml_cams_prober_exit);
-
-MODULE_LICENSE("GPL v2");
-MODULE_DESCRIPTION("Amlogic Cameras prober driver");
-
-
+/*******************************************************************
+ *
+ *  Copyright C 2010 by Amlogic, Inc. All Rights Reserved.
+ *
+ *  Description:
+ *
+ *  Author: Amlogic Software
+ *  Created: 2013/1/31   18:20
+ *
+ *******************************************************************/
+#include <linux/i2c.h>
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/err.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/slab.h>
+#include <linux/pinctrl/consumer.h>
+#include <mach/am_regs.h>
+#include <linux/delay.h>
+#include <mach/gpio.h>
+/* #include <mach/gpio_data.h> */
+#include <linux/amlogic/tvin/tvin.h>
+
+#include <linux/amlogic/camera/aml_cam_info.h>
+#include <linux/amlogic/aml_gpio_consumer.h>
+
+/* extern int amlogic_gpio_name_map_num(const char *name); */
+/* extern int32_t gpio_out(uint32_t pin,bool high); */
+
+static int aml_camera_read_buff(struct i2c_adapter *adapter,
+		unsigned short dev_addr, char *buf, int addr_len, int data_len)
+{
+	int  i2c_flag = -1;
+	struct i2c_msg msgs[] = {
+		{
+			.addr	= dev_addr,
+			.flags	= 0,
+			.len	= addr_len,
+			.buf	= buf,
+		}, {
+			.addr	= dev_addr,
+			.flags	= I2C_M_RD,
+			.len	= data_len,
+			.buf	= buf,
+		}
+	};
+
+	i2c_flag = i2c_transfer(adapter, msgs, 2);
+
+	return i2c_flag;
+}
+
+static int aml_camera_write_buff(struct i2c_adapter *adapter,
+				unsigned short dev_addr, char *buf, int len)
+{
+	struct i2c_msg msg[] = {
+		{
+			.addr	= dev_addr,
+			.flags	= 0,    /* |I2C_M_TEN, */
+			.len	= len,
+			.buf	= buf,
+		}
+	};
+
+	if (i2c_transfer(adapter, msg, 1) < 0)
+		return -1;
+	else
+		return 0;
+}
+
+static int aml_i2c_get_byte(struct i2c_adapter *adapter,
+		unsigned short dev_addr, unsigned short addr)
+{
+	unsigned char buff[4];
+	buff[0] = (unsigned char)((addr >> 8) & 0xff);
+	buff[1] = (unsigned char)(addr & 0xff);
+
+	if (aml_camera_read_buff(adapter, dev_addr, buff, 2, 1) < 0)
+		return -1;
+	return buff[0];
+}
+
+static int aml_i2c_put_byte(struct i2c_adapter *adapter,
+		unsigned short dev_addr,
+		unsigned short addr, unsigned char data)
+{
+	unsigned char buff[4];
+	buff[0] = (unsigned char)((addr >> 8) & 0xff);
+	buff[1] = (unsigned char)(addr & 0xff);
+	buff[2] = data;
+	if (aml_camera_write_buff(adapter, dev_addr, buff, 3) < 0)
+		return -1;
+	return  0;
+}
+
+
+static int aml_i2c_get_byte_add8(struct i2c_adapter *adapter,
+		unsigned short dev_addr, unsigned short addr)
+{
+	unsigned char buff[4];
+	buff[0] = (unsigned char)(addr & 0xff);
+
+	if (aml_camera_read_buff(adapter, dev_addr, buff, 1, 1) < 0)
+		return -1;
+	return buff[0];
+}
+
+static int aml_i2c_put_byte_add8(struct i2c_adapter *adapter,
+		unsigned short dev_addr, unsigned short addr,
+		unsigned char data)
+{
+	unsigned char buff[4];
+	buff[0] = (unsigned char)(addr & 0xff);
+	buff[1] = data;
+	if (aml_camera_write_buff(adapter, dev_addr, buff, 2) < 0)
+		return -1;
+	return  0;
+}
+
+int aml_i2c_put_word(struct i2c_adapter *adapter,
+		unsigned short dev_addr, unsigned short addr,
+		unsigned short data)
+{
+	unsigned char buff[4];
+	buff[0] = (unsigned char)((addr >> 8) & 0xff);
+	buff[1] = (unsigned char)(addr & 0xff);
+	buff[2] = (unsigned char)((data >> 8) & 0xff);
+	buff[3] = (unsigned char)(data & 0xff);
+	if (aml_camera_write_buff(adapter, dev_addr, buff, 4) < 0)
+		return -1;
+	return 0;
+}
+
+static int aml_i2c_get_word(struct i2c_adapter *adapter,
+		unsigned short dev_addr, unsigned short addr)
+{
+	int ret;
+	unsigned char buff[4];
+	buff[0] = (unsigned char)((addr >> 8) & 0xff);
+	buff[1] = (unsigned char)(addr & 0xff);
+	if (aml_camera_read_buff(adapter, dev_addr, buff, 2, 2) < 0)
+		return -1;
+	ret =  (buff[0] << 8)|(buff[1]);
+	return ret;
+}
+
+static int aml_i2c_get_word_add8(struct i2c_adapter *adapter,
+		unsigned short dev_addr, unsigned short addr)
+{
+	int ret;
+	unsigned char buff[4];
+	buff[0] = (unsigned char)((addr >> 8) & 0xff);
+	buff[1] = (unsigned char)(addr & 0xff);
+	if (aml_camera_read_buff(adapter, dev_addr, buff, 2, 2) < 0)
+		return -1;
+	ret =  buff[0] | (buff[1] << 8);
+	return ret;
+}
+
+
+static int aml_i2c_put_word_add8(struct i2c_adapter *adapter,
+		unsigned short dev_addr, unsigned char addr,
+		unsigned short data)
+{
+	unsigned char buff[4];
+	buff[0] = (unsigned char)(addr & 0xff);
+	buff[1] = (unsigned char)(data >> 8 & 0xff);
+	buff[2] = (unsigned char)(data & 0xff);
+	if (aml_camera_write_buff(adapter, dev_addr, buff, 3) < 0)
+		return -1;
+	return  0;
+}
+
+
+extern struct i2c_client *
+i2c_new_existing_device(struct i2c_adapter *adap,
+			struct i2c_board_info const *info);
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0307
+int gc0307_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	reg = aml_i2c_get_byte_add8(adapter, 0x21, 0x00);
+	if (reg == 0x99)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0308
+int gc0308_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	reg = aml_i2c_get_byte_add8(adapter, 0x21, 0x00);
+	if (reg == 0x9b)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0328
+int gc0328_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	reg = aml_i2c_get_byte_add8(adapter, 0x21, 0xf0);
+	if (reg == 0x9d)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0329
+int gc0329_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	aml_i2c_put_byte_add8(adapter, 0x31, 0xfc, 0x16); /* select page 0 */
+	reg = aml_i2c_get_byte_add8(adapter, 0x31, 0x00);
+	if (reg == 0xc0)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2015
+int gc2015_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x30, 0x00);
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x30, 0x01);
+	if (reg[0] == 0x20 && reg[1] == 0x05)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM2057
+int hm2057_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x24, 0x0001);
+	reg[1] = aml_i2c_get_byte(adapter, 0x24, 0x0002);
+	if (reg[0] == 0x20 && reg[1] == 0x56)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2035
+int gc2035_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf0);
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf1);
+	if (reg[0] == 0x20 && reg[1] == 0x35)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2155
+int gc2155_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf0);
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xf1);
+	if (reg[0] == 0x21 && reg[1] == 0x55)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GT2005
+int gt2005_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x0000);
+	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x0001);
+	if (reg[0] == 0x51 && reg[1] == 0x38)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV2659
+int ov2659_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x30, 0x300a);
+	reg[1] = aml_i2c_get_byte(adapter, 0x30, 0x300b);
+	if (reg[0] == 0x26 && reg[1] == 0x56)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3640
+int ov3640_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
+	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
+	if (reg[0] == 0x36 && reg[1] == 0x4c)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3660
+int ov3660_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
+	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
+	if (reg[0] == 0x36 && reg[1] == 0x60)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5640
+int ov5640_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
+	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
+	if (reg[0] == 0x56 && reg[1] == 0x40)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5642
+int ov5642_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x3c, 0x300a);
+	reg[1] = aml_i2c_get_byte(adapter, 0x3c, 0x300b);
+	if (reg[0] == 0x56 && reg[1] == 0x42)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV7675
+int ov7675_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x21, 0x0a);
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x21, 0x0b);
+	if (reg[0] == 0x76 && reg[1] == 0x73)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0A19
+int sp0a19_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	reg = aml_i2c_get_byte_add8(adapter, 0x21, 0x02);
+	if (reg == 0xa6)
+		ret = 1;
+	return ret;
+}
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP2518
+int sp2518_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	reg = aml_i2c_get_byte_add8(adapter, 0x30, 0x02);
+	if (reg == 0x53)
+		ret = 1;
+	return ret;
+}
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0838
+int sp0838_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	reg = aml_i2c_get_byte_add8(adapter, 0x18, 0x02);
+	if (reg == 0x27)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI253
+int hi253_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg;
+	reg = aml_i2c_get_byte_add8(adapter, 0x20, 0x04);
+	if (reg == 0x92)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM5065
+int hm5065_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x1F, 0x0000);
+	reg[1] = aml_i2c_get_byte(adapter, 0x1F, 0x0001);
+	if (reg[0] == 0x03 && reg[1] == 0x9e)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM1375
+int hm1375_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x24, 0x0001);
+	reg[1] = aml_i2c_get_byte(adapter, 0x24, 0x0002);
+	pr_info("hm1375_v4l2_probe: device ID: 0x%x%x", reg[0], reg[1]);
+	if ((reg[0] == 0x13 || reg[0] == 0x03) && reg[1] == 0x75)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI2056
+int hi2056_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x24, 0x0001);
+	reg[1] = aml_i2c_get_byte(adapter, 0x24, 0x0002);
+	pr_info("reg[0]=%x, reg[1]=%x\n", reg[0], reg[1]);
+	if (reg[0] == 0x20 && reg[1] == 0x56)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5645
+int ov5645_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x3C, 0x300a);
+	reg[1] = aml_i2c_get_byte(adapter, 0x3C, 0x300b);
+	pr_info("reg[0]:%x,reg[1]:%x\n", reg[0], reg[1]);
+	if (reg[0] == 0x56 && reg[1] == 0x45)
+		ret = 1;
+
+	pr_info("ov5645mipi read id: %x\n", ((reg[0]<<8) | reg[1]));
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5647
+int ov5647_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte(adapter, 0x36, 0x300a);
+	reg[1] = aml_i2c_get_byte(adapter, 0x36, 0x300b);
+	pr_info("reg[0]:%x,reg[1]:%x\n", reg[0], reg[1]);
+	if (reg[0] == 0x56 && reg[1] == 0x47)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0543
+int ar0543_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0, reg_val;
+	reg_val = aml_i2c_get_word(adapter, 0x36, 0x3000);
+	pr_info("reg:0x%x\n", reg_val);
+	if (reg_val == 0x4800)
+		ret = 1;
+	return ret;
+}
+#endif
+
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0833
+int ar0833_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0, reg_val;
+	reg_val = aml_i2c_get_word(adapter, 0x36, 0x3000);
+	pr_info("reg:0x%x\n", reg_val);
+	if (reg_val == 0x4B03)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP1628
+int sp1628_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x3c, 0x02);
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x3c, 0xa0);
+	if (reg[0] == 0x16 && reg[1] == 0x28)
+		ret = 1;
+	return ret;
+}
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3720
+int bf3720_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfc);
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfd);
+	if (reg[0] == 0x37 && reg[1] == 0x20)
+		ret = 1;
+	return ret;
+}
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3703
+int __init bf3703_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfc); /* i2c :0x6f */
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfd);
+	if (reg[0] == 0x37 && reg[1] == 0x03)
+		ret = 1;
+	return ret;
+}
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3920
+int __init bf3920_v4l2_probe(struct i2c_adapter *adapter)
+{
+	int ret = 0;
+	unsigned char reg[2];
+	reg[0] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfc); /* i2c :0x6f */
+	reg[1] = aml_i2c_get_byte_add8(adapter, 0x6e, 0xfd);
+	if (reg[0] == 0x39 && reg[1] == 0x20)
+		ret = 1;
+	return ret;
+}
+#endif
+
+typedef struct {
+	unsigned char addr;
+	char *name;
+	unsigned char pwdn;
+	resolution_size_t max_cap_size;
+	aml_cam_probe_fun_t probe_func;
+} aml_cam_dev_info_t;
+
+static aml_cam_dev_info_t cam_devs[] = {
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0307
+	{
+		.addr = 0x21,
+		.name = "gc0307",
+		.pwdn = 1,
+		.max_cap_size = SIZE_640X480,
+		.probe_func = gc0307_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0308
+	{
+		.addr = 0x21,
+		.name = "gc0308",
+		.pwdn = 1,
+		.max_cap_size = SIZE_640X480,
+		.probe_func = gc0308_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0328
+	{
+		.addr = 0x21,
+		.name = "gc0328",
+		.pwdn = 1,
+		.max_cap_size = SIZE_640X480,
+		.probe_func = gc0328_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC0329
+	{
+		.addr = 0x31,
+		.name = "gc0329",
+		.pwdn = 1,
+		.max_cap_size = SIZE_640X480,
+		.probe_func = gc0329_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2015
+	{
+		.addr = 0x30,
+		.name = "gc2015",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = gc2015_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM2057
+	{
+		.addr = 0x24,
+		.name = "hm2057",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = hm2057_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2035
+	{
+		.addr = 0x3c,
+		.name = "gc2035",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = gc2035_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GC2155
+	{
+		.addr = 0x3c,
+		.name = "gc2155",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = gc2155_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_GT2005
+	{
+		.addr = 0x3c,
+		.name = "gt2005",
+		.pwdn = 0,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = gt2005_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV2659
+	{
+		.addr = 0x30,
+		.name = "ov2659",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = ov2659_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3640
+	{
+		.addr = 0x3c,
+		.name = "ov3640",
+		.pwdn = 1,
+		.max_cap_size = SIZE_2048X1536;
+		.probe_func = ov3640_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV3660
+	{
+		.addr = 0x3c,
+		.name = "ov3660",
+		.pwdn = 1,
+		.max_cap_size = SIZE_2048X1536,
+		.probe_func = ov3660_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5640
+	{
+		.addr = 0x3c,
+		.name = "ov5640",
+		.pwdn = 1,
+		.max_cap_size = SIZE_2592X1944,
+		.probe_func = ov5640_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5642
+	{
+		.addr = 0x3c,
+		.name = "ov5642",
+		.pwdn = 1,
+		.max_cap_size = SIZE_2592X1944,
+		.probe_func = ov5642_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5645
+	{
+		.addr = 0x3C,
+		.name = "ov5645",
+		.pwdn = 0,
+		.max_cap_size = SIZE_2592X1944,
+		.probe_func = ov5645_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5647
+	{
+		.addr = 0x36, /* really value should be 0x6c */
+		.name = "ov5647",
+		.pwdn = 1,
+		.max_cap_size = SIZE_2592X1944,
+		.probe_func = ov5647_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV7675
+	{
+		.addr = 0x21,
+		.name = "ov7675",
+		.pwdn = 1,
+		.max_cap_size = SIZE_640X480,
+		.probe_func = ov7675_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0A19
+	{
+		.addr = 0x21,
+		.name = "sp0a19",
+		.pwdn = 1,
+	.max_cap_size = SIZE_640X480,
+		.probe_func = sp0a19_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP0838
+	{
+		.addr = 0x18,
+		.name = "sp0838",
+		.pwdn = 1,
+		.max_cap_size = SIZE_640X480,
+		.probe_func = sp0838_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP2518
+	{
+		.addr = 0x30,
+		.name = "sp2518",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = sp2518_v4l2_probe,
+	},
+#endif
+
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI253
+	{
+		.addr = 0x20,
+		.name = "hi253",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = hi253_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM5065
+	{
+		.addr = 0x1f,
+		.name = "hm5065",
+		.pwdn = 0,
+		.max_cap_size = SIZE_2592X1944,
+		.probe_func = hm5065_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HM1375
+	{
+		.addr = 0x24,
+		.name = "hm1375",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1280X1024,
+		.probe_func = hm1375_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_HI2056
+	{
+		.addr = 0x24,
+		.name = "mipi-hi2056",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = hi2056_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0543
+	{
+		.addr = 0x36,
+		.name = "ar0543",
+		.pwdn = 0,
+		.max_cap_size = SIZE_2592X1944,
+		.probe_func = ar0543_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_AR0833
+	{
+		.addr = 0x36,
+		.name = "ar0833",
+		.pwdn = 0,
+		.max_cap_size = SIZE_2592X1944,
+		.probe_func = ar0833_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_SP1628
+	{
+		.addr = 0x3c,
+		.name = "sp1628",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1280X960,
+		.probe_func = sp1628_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3720
+	{
+		.addr = 0x6e,
+		.name = "bf3720",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = bf3720_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3703
+	{
+		.addr = 0x6e,
+		.name = "bf3703",
+		.pwdn = 1,
+		.max_cap_size = SIZE_640X480,
+		.probe_func = bf3703_v4l2_probe,
+	},
+#endif
+#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_BF3920
+	{
+		.addr = 0x6e,
+		.name = "bf3920",
+		.pwdn = 1,
+		.max_cap_size = SIZE_1600X1200,
+		.probe_func = bf3920_v4l2_probe,
+	},
+#endif
+};
+
+static aml_cam_dev_info_t *get_cam_info_by_name(const char *name)
+{
+	int i;
+	if (!name)
+		return NULL;
+	pr_info("cam_devs num is %d\n", ARRAY_SIZE(cam_devs));
+	for (i = 0; i < ARRAY_SIZE(cam_devs); i++) {
+		if (!strcmp(name, cam_devs[i].name)) {
+			pr_info("camera dev %s found\n", cam_devs[i].name);
+			pr_info("camera i2c addr: 0x%x\n", cam_devs[i].addr);
+			return &cam_devs[i];
+		}
+	}
+	return NULL;
+}
+
+struct res_item {
+	resolution_size_t size;
+	char *name;
+};
+
+struct res_item res_item_array[] = {
+	{SIZE_320X240, "320X240"},
+	{SIZE_640X480, "640X480"},
+	{SIZE_720X405, "720X405"},
+	{SIZE_800X600, "800X600"},
+	{SIZE_960X540, "960X540"},
+	{SIZE_1024X576, "1024X576"},
+	{SIZE_960X720, "960X720"},
+	{SIZE_1024X768, "1024X768"},
+	{SIZE_1280X720, "1280X720"},
+	{SIZE_1152X864, "1152X864"},
+	{SIZE_1366X768, "1366X768"},
+	{SIZE_1280X960, "1280X960"},
+	{SIZE_1280X1024, "1280X1024"},
+	{SIZE_1400X1050, "1400X1050"},
+	{SIZE_1600X900, "1600X900"},
+	{SIZE_1600X1200, "1600X1200"},
+	{SIZE_1920X1080, "1920X1080"},
+	{SIZE_1792X1344, "1792X1344"},
+	{SIZE_2048X1152, "2048X1152"},
+	{SIZE_2048X1536, "2048X1536"},
+	{SIZE_2304X1728, "2304X1728"},
+	{SIZE_2560X1440, "2560X1440"},
+	{SIZE_2592X1944, "2592X1944"},
+	{SIZE_3072X1728, "3072X1728"},
+	{SIZE_2816X2112, "2816X2112"},
+	{SIZE_3072X2304, "3072X2304"},
+	{SIZE_3200X2400, "3200X2400"},
+	{SIZE_3264X2448, "3264X2448"},
+	{SIZE_3840X2160, "3840X2160"},
+	{SIZE_3456X2592, "3456X2592"},
+	{SIZE_3600X2700, "3600X2700"},
+	{SIZE_4096X2304, "4096X2304"},
+	{SIZE_3672X2754, "3672X2754"},
+	{SIZE_3840X2880, "3840X2880"},
+	{SIZE_4000X3000, "4000X3000"},
+	{SIZE_4608X2592, "4608X2592"},
+	{SIZE_4096X3072, "4096X3072"},
+	{SIZE_4800X3200, "4800X3200"},
+	{SIZE_5120X2880, "5120X2880"},
+	{SIZE_5120X3840, "5120X3840"},
+	{SIZE_6400X4800, "6400X480"},
+
+};
+
+
+static resolution_size_t get_res_size(const char *res_str)
+{
+	resolution_size_t ret = SIZE_NULL;
+	struct res_item *item;
+	int i;
+	if (!res_str)
+		return SIZE_NULL;
+	for (i = 0; i < ARRAY_SIZE(res_item_array); i++) {
+		item = &res_item_array[i];
+		if (!strcmp(item->name, res_str)) {
+			ret = item->size;
+			return ret;
+		}
+	}
+
+	return ret;
+}
+
+#ifdef CONFIG_ARCH_MESON8B
+static inline void cam_spread_spectrum(int spread_spectrum)
+{
+	pr_info("spread_spectrum = %d\n", spread_spectrum);
+	if (spread_spectrum == 1)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x1c1, 0, 9);
+	else if (spread_spectrum == 2)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x1a1, 0, 9);
+	else if (spread_spectrum == 3)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x181, 0, 9);
+	else if (spread_spectrum == 4)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x141, 0, 9);
+	else if (spread_spectrum == 5)
+		aml_set_reg32_bits(P_HHI_DPLL_TOP_0, 0x121, 0, 9);
+}
+
+static inline void cam_enable_clk(int clk, int spread_spectrum)
+{
+	if (spread_spectrum) {
+		cam_spread_spectrum(spread_spectrum);
+		aml_set_reg32_bits(P_HHI_MPLL_CNTL7, 0x15d063, 0, 25);
+		if (clk == 12000)
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x6809, 0, 16);
+		else
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x6804, 0, 16);
+	} else {
+		if (clk == 12000)
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 3, 16, 2);
+		else
+			aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 16, 2);
+	}
+}
+
+static inline void cam_disable_clk(int spread_spectrum)
+{
+	if (spread_spectrum)
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 16);
+	else
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 16, 2);
+}
+#elif defined CONFIG_ARCH_MESON8
+static inline void cam_enable_clk(int clk, int spread_spectrum)
+{
+	if (clk == 12000) {
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 12, 4);
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 0, 7);
+	} else if (clk == 18000) {
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0xd, 12, 4);
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0x13, 0, 7);
+	} else { /* default */
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 12, 4);
+		aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 7);
+	}
+	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 11, 1);
+}
+
+static inline void cam_disable_clk(int spread_spectrum)
+{
+	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 11, 5); /* close clock */
+	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 0, 7);
+}
+#elif defined CONFIG_ARCH_MESON6
+static inline void cam_enable_clk(int clk, int spread_spectrum)
+{
+	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 1, 8, 5);
+}
+
+static inline void cam_disable_clk(int spread_spectrum)
+{
+	aml_set_reg32_bits(P_HHI_GEN_CLK_CNTL, 0, 8, 5);  /* close clock */
+}
+#else
+static inline void cam_enable_clk(int clk, int spread_spectrum)
+{
+}
+
+static inline void cam_disable_clk(int spread_spectrum)
+{
+}
+#endif
+
+static struct platform_device *cam_pdev;
+
+void aml_cam_init(aml_cam_info_t *cam_dev)
+{
+	 struct pinctrl *pin_ctrl;
+	 char *str = NULL;
+	/* pinmux_set; */
+	if (cam_dev->bt_path == BT_PATH_GPIO)
+		str = "gpio";
+	else if (cam_dev->bt_path == BT_PATH_CSI2)
+		str = "csi";
+	else
+		str = "gpio";
+	pin_ctrl = pinctrl_get_select((struct device *)(&cam_pdev->dev), str);
+
+	#ifdef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5645
+	amlogic_gpio_request(cam_dev->rst_pin, "camera");
+	amlogic_gpio_direction_output(cam_dev->rst_pin, 0, "camera");
+	msleep(20);
+	#endif
+	/* select XTAL as camera clock */
+	cam_enable_clk(cam_dev->mclk, cam_dev->spread_spectrum);
+
+	msleep(20);
+	/* set camera power enable */
+	amlogic_gpio_request(cam_dev->pwdn_pin, "camera");
+	amlogic_gpio_direction_output(cam_dev->pwdn_pin,
+			cam_dev->pwdn_act, "camera");
+	msleep(20);
+
+	#ifndef CONFIG_VIDEO_AMLOGIC_CAPTURE_OV5645
+	amlogic_gpio_request(cam_dev->rst_pin, "camera");
+	amlogic_gpio_direction_output(cam_dev->rst_pin, 0, "camera");
+	msleep(20);
+	#endif
+
+	amlogic_gpio_direction_output(cam_dev->rst_pin, 1, "camera");
+	msleep(20);
+
+	/* set camera power enable */
+	amlogic_gpio_direction_output(cam_dev->pwdn_pin,
+			!(cam_dev->pwdn_act), "camera");
+	msleep(20);
+
+	pr_info("aml_cams: %s init OK\n",  cam_dev->name);
+
+}
+
+void aml_cam_uninit(aml_cam_info_t *cam_dev)
+{
+	struct pinctrl *p;
+	pr_info("aml_cams: %s uninit.\n", cam_dev->name);
+	/* set camera power disable */
+	amlogic_gpio_direction_output(cam_dev->pwdn_pin,
+					cam_dev->pwdn_act, "camera");
+	msleep(5);
+
+	cam_disable_clk(cam_dev->spread_spectrum);
+
+	p = pinctrl_get(&cam_pdev->dev);
+	if (IS_ERR(p))
+		return;
+	devm_pinctrl_put(p);
+}
+
+void aml_cam_flash(aml_cam_info_t *cam_dev, int is_on)
+{
+	if (cam_dev->flash_support) {
+		pr_info("aml_cams: %s flash %s.\n",
+				cam_dev->name, is_on ? "on" : "off");
+		amlogic_gpio_direction_output(cam_dev->flash_ctrl_pin,
+			cam_dev->flash_ctrl_level ? is_on : !is_on, "camera");
+	}
+}
+
+void aml_cam_torch(aml_cam_info_t *cam_dev, int is_on)
+{
+	if (cam_dev->torch_support) {
+		pr_info("aml_cams: %s torch %s.\n",
+				cam_dev->name, is_on ? "on" : "off");
+		amlogic_gpio_direction_output(cam_dev->torch_ctrl_pin,
+			cam_dev->torch_ctrl_level ? is_on : !is_on, "camera");
+	}
+}
+
+static struct list_head cam_head = LIST_HEAD_INIT(cam_head);
+
+#define DEBUG_DUMP_CAM_INFO
+
+static int fill_csi_dev(struct device_node *p_node, aml_cam_info_t *cam_dev)
+{
+	const char *str;
+	int ret = 0;
+	/* aml_cam_dev_info_t* cam_info = NULL; */
+	/* struct i2c_adapter *adapter; */
+
+	ret = of_property_read_string(p_node, "clk_channel", &str);
+	if (ret) {
+		pr_info("failed to read clock channel, \"a or b\"\n");
+		cam_dev->clk_channel = CLK_CHANNEL_A;
+	} else {
+		pr_info("clock channel:clk %s\n", str);
+		if (strncmp("a", str, 1) == 0)
+			cam_dev->clk_channel = CLK_CHANNEL_A;
+		else
+			cam_dev->clk_channel = CLK_CHANNEL_B;
+	}
+
+	return ret;
+
+}
+static int fill_cam_dev(struct device_node *p_node, aml_cam_info_t *cam_dev)
+{
+	const char *str;
+	int ret = 0;
+	aml_cam_dev_info_t *cam_info = NULL;
+	struct i2c_adapter *adapter;
+	unsigned mclk = 0;
+	unsigned vcm_mode = 0;
+
+	if (!p_node || !cam_dev)
+		return -1;
+
+	ret = of_property_read_string(p_node, "cam_name", &cam_dev->name);
+	if (ret) {
+		pr_info("get camera name failed!\n");
+		goto err_out;
+	}
+
+	ret = of_property_read_string(p_node, "gpio_pwdn", &str);
+	if (ret) {
+		pr_info("%s: faild to get gpio_pwdn!\n", cam_dev->name);
+		goto err_out;
+	}
+	ret = amlogic_gpio_name_map_num(str);
+	if (ret < 0) {
+		pr_info("%s: faild to map gpio_pwdn !\n", cam_dev->name);
+		goto err_out;
+	}
+	cam_dev->pwdn_pin = ret;
+
+	ret = of_property_read_string(p_node, "gpio_rst", &str);
+	if (ret) {
+		pr_info("%s: faild to get gpio_rst!\n", cam_dev->name);
+		goto err_out;
+	}
+	ret = amlogic_gpio_name_map_num(str);
+	if (ret < 0) {
+		pr_info("%s: faild to map gpio_rst !\n", cam_dev->name);
+		goto err_out;
+	}
+	cam_dev->rst_pin = ret;
+
+	ret = of_property_read_string(p_node, "i2c_bus", &str);
+	if (ret) {
+		pr_info("%s: faild to get i2c_bus str!\n", cam_dev->name);
+		cam_dev->i2c_bus_num = AML_I2C_MASTER_A;
+	} else {
+		if (!strncmp(str, "i2c_bus_a", 9))
+			cam_dev->i2c_bus_num = AML_I2C_MASTER_A;
+		else if (!strncmp(str, "i2c_bus_b", 9))
+			cam_dev->i2c_bus_num = AML_I2C_MASTER_B;
+		else if (!strncmp(str, "i2c_bus_c", 9))
+			cam_dev->i2c_bus_num = AML_I2C_MASTER_C;
+		else if (!strncmp(str, "i2c_bus_d", 9))
+			cam_dev->i2c_bus_num = AML_I2C_MASTER_D;
+		else if (!strncmp(str, "i2c_bus_ao", 9))
+			cam_dev->i2c_bus_num = AML_I2C_MASTER_AO;
+		else
+			cam_dev->i2c_bus_num = AML_I2C_MASTER_A;
+	}
+
+	cam_info = get_cam_info_by_name(cam_dev->name);
+	if (cam_info == NULL) {
+		pr_info("camera %s is not support\n", cam_dev->name);
+		ret = -1;
+		goto err_out;
+	}
+
+	of_property_read_u32(p_node, "spread_spectrum",
+			&cam_dev->spread_spectrum);
+
+	cam_dev->pwdn_act = cam_info->pwdn;
+	cam_dev->i2c_addr = cam_info->addr;
+	pr_info("camer addr: 0x%x\n", cam_dev->i2c_addr);
+	pr_info("camer i2c bus: %d\n", cam_dev->i2c_bus_num);
+
+	/* test if the camera is exist */
+	adapter = i2c_get_adapter(cam_dev->i2c_bus_num);
+	if (adapter && cam_info->probe_func) {
+		aml_cam_init(cam_dev);
+		if (cam_info->probe_func(adapter) != 1) {
+			pr_info("camera %s not on board\n", cam_dev->name);
+			ret = -1;
+			aml_cam_uninit(cam_dev);
+			goto err_out;
+		}
+		aml_cam_uninit(cam_dev);
+	} else {
+		pr_info("can not do probe function\n");
+		ret = -1;
+		goto err_out;
+	}
+
+	of_property_read_u32(p_node, "front_back", &cam_dev->front_back);
+	of_property_read_u32(p_node, "mirror_flip", &cam_dev->m_flip);
+	of_property_read_u32(p_node, "vertical_flip", &cam_dev->v_flip);
+
+	ret = of_property_read_string(p_node, "max_cap_size", &str);
+	if (ret)
+		pr_info("failed to read max_cap_size\n");
+	else {
+		pr_info("max_cap_size :%s\n", str);
+		cam_dev->max_cap_size = get_res_size(str);
+	}
+	if (cam_dev->max_cap_size == SIZE_NULL)
+		cam_dev->max_cap_size = cam_info->max_cap_size;
+
+	ret = of_property_read_string(p_node, "bt_path", &str);
+	if (ret) {
+		pr_info("failed to read bt_path\n");
+		cam_dev->bt_path = BT_PATH_GPIO;
+	} else {
+		pr_info("bt_path :%s\n", (char *)cam_dev->bt_path);
+		if (strncmp("csi", str, 3) == 0)
+			cam_dev->bt_path = BT_PATH_CSI2;
+		else
+			cam_dev->bt_path = BT_PATH_GPIO;
+	}
+
+	ret = of_property_read_u32(p_node, "mclk", &mclk);
+	if (ret)
+		cam_dev->mclk = 24000;
+	else
+		cam_dev->mclk = mclk;
+
+	ret = of_property_read_u32(p_node, "vcm_mode", &vcm_mode);
+	if (ret)
+		cam_dev->vcm_mode = 0;
+	else
+		cam_dev->vcm_mode = vcm_mode;
+
+	pr_info("vcm mode is %d\n", cam_dev->vcm_mode);
+
+	ret = of_property_read_u32(p_node, "flash_support",
+			&cam_dev->flash_support);
+	if (cam_dev->flash_support) {
+		of_property_read_u32(p_node, "flash_ctrl_level",
+				&cam_dev->flash_ctrl_level);
+		ret = of_property_read_string(p_node, "flash_ctrl_pin", &str);
+		if (ret) {
+			pr_info("%s: faild to get flash_ctrl_pin!\n",
+					cam_dev->name);
+			cam_dev->flash_support = 0;
+		} else {
+			ret = amlogic_gpio_name_map_num(str);
+			if (ret < 0) {
+				pr_info("%s: faild to map flash_ctrl_pin !\n",
+						cam_dev->name);
+				cam_dev->flash_support = 0;
+				cam_dev->flash_ctrl_level = 0;
+			}
+			cam_dev->flash_ctrl_pin = ret;
+			amlogic_gpio_request(cam_dev->flash_ctrl_pin,
+					"camera");
+		}
+	}
+
+	ret = of_property_read_u32(p_node, "torch_support",
+			&cam_dev->torch_support);
+	if (cam_dev->torch_support) {
+		of_property_read_u32(p_node, "torch_ctrl_level",
+				&cam_dev->torch_ctrl_level);
+		ret = of_property_read_string(p_node, "torch_ctrl_pin", &str);
+		if (ret) {
+			pr_info("%s: faild to get torch_ctrl_pin!\n",
+					cam_dev->name);
+			cam_dev->torch_support = 0;
+		} else {
+			ret = amlogic_gpio_name_map_num(str);
+			if (ret < 0) {
+				pr_info("%s: faild to map flash_ctrl_pin !\n",
+						cam_dev->name);
+				cam_dev->torch_support = 0;
+				cam_dev->torch_ctrl_level = 0;
+			}
+			cam_dev->torch_ctrl_pin = ret;
+			amlogic_gpio_request(cam_dev->torch_ctrl_pin,
+					"camera");
+		}
+	}
+
+	ret = of_property_read_string(p_node, "interface", &str);
+	if (ret) {
+		pr_info("failed to read camera interface \"mipi or dvp\"\n");
+		cam_dev->interface = CAM_DVP;
+	} else {
+		pr_info("camera interface:%s\n", str);
+		if (strncmp("dvp", str, 1) == 0)
+			cam_dev->interface = CAM_DVP;
+		else
+			cam_dev->interface = CAM_MIPI;
+	}
+	if (CAM_MIPI == cam_dev->interface) {
+		ret = fill_csi_dev(p_node, cam_dev);
+		if (ret < 0)
+			goto err_out;
+	}
+
+	ret = of_property_read_string(p_node, "bayer_fmt", &str);
+	if (ret) {
+		pr_info("failed to read camera bayer fmt\n");
+		cam_dev->bayer_fmt = TVIN_GBRG;
+	} else {
+		pr_info("color format:%s\n", str);
+		if (strncmp("BGGR", str, 4) == 0)
+			cam_dev->bayer_fmt = TVIN_BGGR;
+		else if (strncmp("RGGB", str, 4) == 0)
+			cam_dev->bayer_fmt = TVIN_RGGB;
+		else if (strncmp("GBRG", str, 4) == 0)
+			cam_dev->bayer_fmt = TVIN_GBRG;
+		else if (strncmp("GRBG", str, 4) == 0)
+			cam_dev->bayer_fmt = TVIN_GRBG;
+		else
+			cam_dev->bayer_fmt = TVIN_GBRG;
+	}
+
+	ret = of_property_read_string(p_node, "config_path", &cam_dev->config);
+	/* cam_dev->config = "/system/etc/myconfig"; */
+	/* ret = 0; */
+	if (ret)
+		pr_info("failed to read config_file path\n");
+	else
+		pr_info("config path :%s\n", cam_dev->config);
+
+#ifdef DEBUG_DUMP_CAM_INFO
+	pr_info("=======cam %s info=======\n"
+		"i2c_bus_num: %d\n"
+		"pwdn_act: %d\n"
+		"front_back: %d\n"
+		"m_flip: %d\n"
+		"v_flip: %d\n"
+		"i2c_addr: 0x%x\n"
+		"config path:%s\n"
+		"bt_path:%d\n",
+		cam_dev->name,
+		cam_dev->i2c_bus_num, cam_dev->pwdn_act, cam_dev->front_back,
+		cam_dev->m_flip, cam_dev->v_flip, cam_dev->i2c_addr,
+		cam_dev->config,
+		cam_dev->bt_path);
+#endif /* DEBUG_DUMP_CAM_INFO */
+
+	ret = 0;
+
+err_out:
+	return ret;
+}
+
+static int  do_read_work(char argn , char **argv)
+{
+	unsigned int dev_addr, reg_addr, data_len = 1, result;
+	unsigned int i2c_bus;
+	struct i2c_adapter *adapter;
+
+	if (argn < 4) {
+		pr_info("args num error");
+		return -1;
+	}
+
+
+	if (!strncmp(argv[1], "i2c_bus_ao", 9))
+		i2c_bus = AML_I2C_MASTER_AO;
+	else if (!strncmp(argv[1], "i2c_bus_a", 9))
+		i2c_bus = AML_I2C_MASTER_A;
+	else if (!strncmp(argv[1], "i2c_bus_b", 9))
+		i2c_bus = AML_I2C_MASTER_B;
+	else if (!strncmp(argv[1], "i2c_bus_c", 9))
+		i2c_bus = AML_I2C_MASTER_C;
+	else if (!strncmp(argv[1], "i2c_bus_d", 9))
+		i2c_bus = AML_I2C_MASTER_D;
+	else {
+		pr_info("bus name error!\n");
+		return -1;
+	}
+
+	adapter = i2c_get_adapter(i2c_bus);
+
+	if (adapter == NULL) {
+		pr_info("no adapter!\n");
+		return -1;
+	}
+
+	dev_addr = kstrtol(argv[2], 16, NULL);
+	reg_addr = kstrtol(argv[3], 16, NULL);
+	if (argn == 5) {
+		pr_info("argv[4] is %s\n", argv[4]);
+		data_len = kstrtol(argv[4], 16, NULL);
+	}
+
+	if (reg_addr > 256) {
+		if (data_len != 2) {
+			result = aml_i2c_get_byte(adapter, dev_addr,
+					reg_addr);
+			pr_info("register [0x%04x]=0x%02x\n", reg_addr,
+					result);
+		} else {
+			result = aml_i2c_get_word(adapter, dev_addr,
+					reg_addr);
+			pr_info("register [0x%04x]=0x%04x\n", reg_addr,
+					result);
+		}
+	} else {
+		if (data_len != 2) {
+			result = aml_i2c_get_byte_add8(adapter, dev_addr,
+					reg_addr);
+			pr_info("register [0x%02x]=0x%02x\n", reg_addr,
+					result);
+		} else {
+			result = aml_i2c_get_word_add8(adapter, dev_addr,
+					reg_addr);
+			pr_info("register [0x%02x]=0x%04x\n", reg_addr,
+				       result);
+		}
+	}
+
+	return 0;
+}
+
+static int do_write_work(char argn , char **argv)
+{
+	unsigned int dev_addr, reg_addr, reg_val, data_len = 1, ret = 0;
+	unsigned int i2c_bus;
+	struct i2c_adapter *adapter;
+
+
+	if (argn < 5) {
+		pr_info("args num error");
+		return -1;
+	}
+
+	if (!strncmp(argv[1], "i2c_bus_a", 9))
+		i2c_bus = AML_I2C_MASTER_A;
+	else if (!strncmp(argv[1], "i2c_bus_b", 9))
+		i2c_bus = AML_I2C_MASTER_B;
+	else if (!strncmp(argv[1], "i2c_bus_c", 9))
+		i2c_bus = AML_I2C_MASTER_C;
+	else if (!strncmp(argv[1], "i2c_bus_d", 9))
+		i2c_bus = AML_I2C_MASTER_D;
+	else if (!strncmp(argv[1], "i2c_bus_ao", 9))
+		i2c_bus = AML_I2C_MASTER_AO;
+	else {
+		pr_info("bus name error!\n");
+		return -1;
+	}
+
+	adapter = i2c_get_adapter(i2c_bus);
+
+	if (adapter == NULL) {
+		pr_info("no adapter!\n");
+		return -1;
+	}
+
+	dev_addr = kstrtol(argv[2], 16, NULL);
+	reg_addr = kstrtol(argv[3], 16, NULL);
+	reg_val  = kstrtol(argv[4], 16, NULL);
+	if (argn == 6)
+		data_len = kstrtol(argv[5], 16, NULL);
+	if (reg_addr > 256) {
+		if (data_len != 2) {
+			if (aml_i2c_put_byte(adapter, dev_addr,
+						reg_addr, reg_val) < 0) {
+				pr_info("write error\n");
+				ret = -1;
+			} else {
+				pr_info("write ok\n");
+				ret = 0;
+			}
+		} else {
+			if (aml_i2c_put_word(adapter, dev_addr,
+						reg_addr, reg_val) < 0) {
+				pr_info("write error\n");
+				ret = -1;
+			} else {
+				pr_info("write ok\n");
+				ret = 0;
+			}
+		}
+	} else {
+		if (data_len != 2) {
+			if (aml_i2c_put_byte_add8(adapter, dev_addr,
+						reg_addr, reg_val) < 0) {
+				pr_info("write error\n");
+				ret = -1;
+			} else {
+				pr_info("write ok\n");
+				ret = 0;
+			}
+		} else {
+			if (aml_i2c_put_word_add8(adapter, dev_addr,
+						reg_addr, reg_val) < 0) {
+				pr_info("write error\n");
+				ret = -1;
+			} else {
+				pr_info("write ok\n");
+				ret = 0;
+			}
+		}
+	}
+
+	return ret;
+}
+
+static struct class *cam_clsp;
+
+
+static ssize_t show_help(struct class *class, struct class_attribute *attr,
+	char *buf)
+{
+	ssize_t size = 0;
+	pr_info("echo [read | write] i2c_bus_type device_address "
+			"register_address [value] [data_len] > i2c_debug\n"
+		"i2c_bus_type are: i2c_bus_ao, i2c_bus_a, "
+		"i2c_bus_b, i2c_bus_c, i2c_bus_d\n"
+		"e.g.: echo read i2c_bus_ao 0x3c 0x18 1\n"
+		"      echo write i2c_bus_ao 0x3c 0x18 0x24 1\n");
+	return size;
+}
+
+static ssize_t store_i2c_debug(struct class *class,
+		struct class_attribute *attr,
+		const char *buf, size_t count)
+{
+	int argn;
+	char *buf_work, *p, *para;
+	char cmd;
+	char *argv[6];
+
+	buf_work = kstrdup(buf, GFP_KERNEL);
+	p = buf_work;
+
+	for (argn = 0; argn < 6; argn++) {
+		para = strsep(&p, " ");
+		if (para == NULL)
+			break;
+		argv[argn] = para;
+		pr_info("argv[%d] = %s\n", argn, para);
+	}
+
+	if (argn < 4 || argn > 6)
+		goto end;
+
+	cmd = argv[0][0];
+	switch (cmd) {
+	case 'r':
+	case 'R':
+		do_read_work(argn, argv);
+		break;
+	case 'w':
+	case 'W':
+		do_write_work(argn, argv);
+		break;
+	}
+	return count;
+end:
+	pr_info("error command!\n");
+	kfree(buf_work);
+	return -EINVAL;
+}
+
+static LIST_HEAD(info_head);
+
+static ssize_t cam_info_show(struct class *class,
+			struct class_attribute *attr, char *buf)
+{
+	struct list_head *p;
+	aml_cam_info_t *cam_info = NULL;
+	int count = 0;
+	if (!list_empty(&info_head)) {
+		count += sprintf(&buf[count], "name\t\tversion\t\t\tface_dir\t"
+					"i2c_addr\n");
+		list_for_each(p, &info_head) {
+			cam_info = list_entry(p, aml_cam_info_t, info_entry);
+			if (cam_info) {
+				count += sprintf(&buf[count], "%s\t\t%s\t\t%s"
+					"\t\t0x%x\n",
+					cam_info->name, cam_info->version,
+					cam_info->front_back?"front":"back",
+					cam_info->i2c_addr);
+			}
+		}
+	}
+	return count;
+}
+
+static struct class_attribute aml_cam_attrs[] = {
+	__ATTR(i2c_debug,  S_IRUGO | S_IWUSR, show_help, store_i2c_debug),
+	__ATTR_RO(cam_info),
+	__ATTR(help,  S_IRUGO | S_IWUSR, show_help, NULL),
+	__ATTR_NULL,
+};
+
+int aml_cam_info_reg(aml_cam_info_t *cam_info)
+{
+	int ret = -1;
+	if (cam_info) {
+		/* pr_info("reg camera %s\n", cam_info->name); */
+		list_add(&cam_info->info_entry, &info_head);
+		ret = 0;
+	}
+	return ret;
+}
+
+int aml_cam_info_unreg(aml_cam_info_t *cam_info)
+{
+	int ret = -1;
+	struct list_head *p, *n;
+	aml_cam_info_t *tmp_info = NULL;
+	if (cam_info) {
+		list_for_each_safe(p, n, &info_head) {
+			tmp_info = list_entry(p, aml_cam_info_t, info_entry);
+			if (tmp_info == cam_info) {
+				list_del(p);
+				return 0;
+			}
+		}
+	}
+	return ret;
+}
+
+static int aml_cams_probe(struct platform_device *pdev)
+{
+	/* pr_info("##############aml_cams_probe start############\n"); */
+
+	struct device_node *cams_node = pdev->dev.of_node;
+	struct device_node *child;
+	struct i2c_board_info board_info;
+	struct i2c_adapter *adapter;
+	int i;
+	aml_cam_info_t temp_cam;
+	cam_pdev = pdev;
+	for_each_child_of_node(cams_node, child) {
+		/*
+		temp_cam = kzalloc(sizeof(aml_cam_info_t), GFP_KERNEL);
+		if (!temp_cam) {
+			pr_info("alloc mem error\n");
+			return -ENOMEM;
+		}
+		*/
+		memset(&temp_cam, 0, sizeof(aml_cam_info_t));
+
+		if (fill_cam_dev(child, &temp_cam))
+			continue;
+
+		/* register exist camera */
+		memset(&board_info, 0, sizeof(board_info));
+		strncpy(board_info.type, temp_cam.name, I2C_NAME_SIZE);
+		adapter = i2c_get_adapter(temp_cam.i2c_bus_num);
+		board_info.addr = temp_cam.i2c_addr;
+		board_info.platform_data = &temp_cam;
+		pr_info("new i2c device\n");
+		i2c_new_existing_device(adapter, &board_info);
+	}
+	/* pr_info("aml probe finish\n"); */
+	cam_clsp = class_create(THIS_MODULE, "aml_camera");
+	for (i = 0; aml_cam_attrs[i].attr.name; i++) {
+		if (class_create_file(cam_clsp, &aml_cam_attrs[i]) < 0)
+			return -1;
+	}
+	return 0;
+}
+
+static int aml_cams_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static const struct of_device_id cams_prober_dt_match[] = {
+	{
+		.compatible = "amlogic,cams_prober",
+	},
+	{},
+};
+
+static  struct platform_driver aml_cams_prober_driver = {
+	.probe		= aml_cams_probe,
+	.remove		= aml_cams_remove,
+	.driver		= {
+		.name	= "aml_cams_prober",
+		.owner	= THIS_MODULE,
+		.of_match_table = cams_prober_dt_match,
+	},
+};
+
+static int __init aml_cams_prober_init(void)
+{
+	if (platform_driver_register(&aml_cams_prober_driver)) {
+		printk(KERN_ERR"aml_cams_probre_driver register failed\n");
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+static void __exit aml_cams_prober_exit(void)
+{
+	platform_driver_unregister(&aml_cams_prober_driver);
+}
+
+module_init(aml_cams_prober_init);
+module_exit(aml_cams_prober_exit);
+
+MODULE_LICENSE("GPL v2");
+MODULE_DESCRIPTION("Amlogic Cameras prober driver");
+
+
diff --git a/drivers/amlogic/camera/ov5645.c b/drivers/amlogic/camera/ov5645.c
new file mode 100644
index 000000000000..7715ec584077
--- /dev/null
+++ b/drivers/amlogic/camera/ov5645.c
@@ -0,0 +1,4102 @@
+/*
+ *ov5645 - This code emulates a real video device with v4l2 api
+ *
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the BSD Licence, GNU General Public License
+ * as published by the Free Software Foundation; either version 2 of the
+ * License, or (at your option) any later version
+ */
+#include <linux/sizes.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/errno.h>
+#include <linux/fs.h>
+#include <linux/kernel.h>
+#include <linux/wait.h>
+#include <linux/slab.h>
+#include <linux/mm.h>
+#include <linux/ioport.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/pci.h>
+#include <linux/random.h>
+#include <linux/version.h>
+#include <linux/mutex.h>
+#include <linux/videodev2.h>
+#include <linux/dma-mapping.h>
+#include <linux/interrupt.h>
+#include <linux/kthread.h>
+#include <linux/highmem.h>
+#include <linux/freezer.h>
+#include <media/videobuf-res.h>
+#include <media/v4l2-device.h>
+#include <media/v4l2-ioctl.h>
+#include <linux/wakelock.h>
+
+#include <linux/i2c.h>
+#include <media/v4l2-chip-ident.h>
+#include <linux/amlogic/camera/aml_cam_info.h>
+#include <linux/amlogic/vmapi.h>
+
+#include <mach/am_regs.h>
+/* #include <mach/am_eth_pinmux.h> */
+#include <mach/pinmux.h>
+#include <mach/gpio.h>
+
+#include "common/plat_ctrl.h"
+#include "common/vm.h"
+#include "ov5645_firmware.h"
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+#include <mach/mod_gate.h>
+#endif
+#define ov5645_CAMERA_MODULE_NAME "ov5645"
+#define MAGIC_RE_MEM 0x123039dc
+#define ov5645_RES0_CANVAS_INDEX CAMERA_USER_CANVAS_INDEX
+
+/* Wake up at about 30 fps */
+#define WAKE_NUMERATOR 30
+#define WAKE_DENOMINATOR 1001
+#define BUFFER_TIMEOUT     msecs_to_jiffies(500)  /* 0.5 seconds */
+
+#define ov5645_CAMERA_MAJOR_VERSION 0
+#define ov5645_CAMERA_MINOR_VERSION 7
+#define ov5645_CAMERA_RELEASE 0
+#define ov5645_CAMERA_VERSION \
+	KERNEL_VERSION(ov5645_CAMERA_MAJOR_VERSION, \
+			ov5645_CAMERA_MINOR_VERSION, ov5645_CAMERA_RELEASE)
+
+MODULE_DESCRIPTION("ov5645 On Board");
+MODULE_AUTHOR("amlogic-sh");
+MODULE_LICENSE("GPL v2");
+
+#define ov5645_DRIVER_VERSION "ov5645-COMMON-01-150701"
+
+static unsigned video_nr = -1;  /* videoX start number, -1 is autodetect. */
+
+static unsigned debug;
+/* module_param(debug, uint, 0644); */
+/* MODULE_PARM_DESC(debug, "activates debug info"); */
+
+static unsigned int vid_limit = 32;
+/* module_param(vid_limit, uint, 0644); */
+/* MODULE_PARM_DESC(vid_limit, "capture memory limit in megabytes"); */
+struct i2c_client *g_client = NULL;
+#define OV5645MIPI_write_cmos_sensor(a, b) i2c_put_byte(g_client, a, b)
+#define OV5645MIPIYUV_read_cmos_sensor(v) i2c_get_byte(g_client, v)
+
+/* extern int disable_ov5645; */
+static int ov5645_have_opened;
+
+static void OV5645_set_AWB_mode(bool AWB_enable);
+static void do_download(struct work_struct *work);
+static DECLARE_DELAYED_WORK(dl_work, do_download);
+
+static struct vdin_v4l2_ops_s *vops;
+
+static bool bDoingAutoFocusMode;
+static int temp_frame =  -1;
+static struct v4l2_fract ov5645_frmintervals_active = {
+	.numerator = 1,
+	.denominator = 15,
+};
+
+static struct v4l2_frmivalenum ov5645_frmivalenum[] = {
+	{
+		.index = 0,
+		.pixel_format = V4L2_PIX_FMT_NV21,
+		.width = 640,
+		.height = 480,
+		.type = V4L2_FRMIVAL_TYPE_DISCRETE,
+		{
+			.discrete = {
+				.numerator = 1,
+				.denominator = 30,
+			}
+		}
+	}, {
+		.index = 0,
+		.pixel_format = V4L2_PIX_FMT_NV21,
+		.width = 1024,
+		.height = 768,
+		.type = V4L2_FRMIVAL_TYPE_DISCRETE,
+		{
+			.discrete = {
+				.numerator = 1,
+				.denominator = 30,
+			}
+		}
+	}, {
+		.index = 0,
+		.pixel_format = V4L2_PIX_FMT_NV21,
+		.width = 1280,
+		.height = 720,
+		.type = V4L2_FRMIVAL_TYPE_DISCRETE,
+		{
+			.discrete = {
+				.numerator = 1,
+				.denominator = 30,
+			}
+		}
+	}, {
+		.index = 0,
+		.pixel_format = V4L2_PIX_FMT_NV21,
+		.width = 1920,
+		.height = 1080,
+		.type = V4L2_FRMIVAL_TYPE_DISCRETE,
+		{
+			.discrete = {
+				.numerator = 1,
+				.denominator = 30,
+			}
+		}
+	}, {
+		.index = 1,
+		.pixel_format = V4L2_PIX_FMT_NV21,
+		.width = 1600,
+		.height = 1200,
+		.type = V4L2_FRMIVAL_TYPE_DISCRETE,
+		{
+			.discrete = {
+				.numerator = 1,
+				.denominator = 5,
+			}
+		}
+	}, {
+		.index = 1,
+		.pixel_format = V4L2_PIX_FMT_NV21,
+		.width = 2048,
+		.height = 1536,
+		.type = V4L2_FRMIVAL_TYPE_DISCRETE,
+		{
+			.discrete = {
+				.numerator = 1,
+				.denominator = 5,
+			}
+		}
+	}, {
+		.index = 1,
+		.pixel_format = V4L2_PIX_FMT_NV21,
+		.width = 2592,
+		.height = 1944,
+		.type = V4L2_FRMIVAL_TYPE_DISCRETE,
+		{
+			.discrete = {
+				.numerator = 1,
+				.denominator = 5,
+			}
+		}
+	},
+};
+
+/* supported controls */
+static struct v4l2_queryctrl ov5645_qctrl[] = {
+	{
+		.id            = V4L2_CID_BRIGHTNESS,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "Brightness",
+		.minimum       = 0,
+		.maximum       = 255,
+		.step          = 1,
+		.default_value = 127,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id            = V4L2_CID_CONTRAST,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "Contrast",
+		.minimum       = 0x10,
+		.maximum       = 0x60,
+		.step          = 0xa,
+		.default_value = 0x30,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id            = V4L2_CID_HFLIP,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "flip on horizontal",
+		.minimum       = 0,
+		.maximum       = 1,
+		.step          = 0x1,
+		.default_value = 0,
+		.flags         = V4L2_CTRL_FLAG_DISABLED,
+	} , {
+		.id            = V4L2_CID_VFLIP,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "flip on vertical",
+		.minimum       = 0,
+		.maximum       = 1,
+		.step          = 0x1,
+		.default_value = 0,
+		.flags         = V4L2_CTRL_FLAG_DISABLED,
+	}, {
+		.id            = V4L2_CID_DO_WHITE_BALANCE,
+		.type          = V4L2_CTRL_TYPE_MENU,
+		.name          = "white balance",
+		.minimum       = 0,
+		.maximum       = 6,
+		.step          = 0x1,
+		.default_value = 0,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id            = V4L2_CID_EXPOSURE,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "exposure",
+		.minimum       = 0,
+		.maximum       = 8,
+		.step          = 0x1,
+		.default_value = 4,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id            = V4L2_CID_COLORFX,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "effect",
+		.minimum       = 0,
+		.maximum       = 6,
+		.step          = 0x1,
+		.default_value = 0,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id            = V4L2_CID_WHITENESS,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "banding",
+		.minimum       = 0,
+		.maximum       = 1,
+		.step          = 0x1,
+		.default_value = 0,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	},
+	/*
+	{
+		.id            = V4L2_CID_FOCUS_AUTO,
+		.type          = V4L2_CTRL_TYPE_MENU,
+		.name          = "auto focus",
+		.minimum       = CAM_FOCUS_MODE_RELEASE,
+		.maximum       = CAM_FOCUS_MODE_CONTI_PIC,
+		.step          = 0x1,
+		.default_value = CAM_FOCUS_MODE_CONTI_PIC,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	},
+	*/
+	{
+		.id            = V4L2_CID_BACKLIGHT_COMPENSATION,
+		.type          = V4L2_CTRL_TYPE_MENU,
+		.name          = "flash",
+		.minimum       = FLASHLIGHT_ON,
+		.maximum       = FLASHLIGHT_TORCH,
+		.step          = 0x1,
+		.default_value = FLASHLIGHT_OFF,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id            = V4L2_CID_ZOOM_ABSOLUTE,
+		.type          = V4L2_CTRL_TYPE_INTEGER,
+		.name          = "Zoom, Absolute",
+		.minimum       = 100,
+		.maximum       = 300,
+		.step          = 20,
+		.default_value = 100,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id		= V4L2_CID_ROTATE,
+		.type		= V4L2_CTRL_TYPE_INTEGER,
+		.name		= "Rotate",
+		.minimum	= 0,
+		.maximum	= 270,
+		.step		= 90,
+		.default_value	= 0,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}, {
+		.id            = V4L2_CID_AUTO_FOCUS_STATUS,
+		.type          = 8,/* V4L2_CTRL_TYPE_BITMASK, */
+		.name          = "focus status",
+		.minimum       = 0,
+		.maximum       = ~3,
+		.step          = 0x1,
+		.default_value = V4L2_AUTO_FOCUS_STATUS_IDLE,
+		.flags         = V4L2_CTRL_FLAG_READ_ONLY,
+	}, {
+		.id		= V4L2_CID_FOCUS_ABSOLUTE,
+		.type		= V4L2_CTRL_TYPE_INTEGER,
+		.name		= "focus center",
+		.minimum	= 0,
+		.maximum	= ((2000) << 16) | 2000,
+		.step		= 1,
+		.default_value	= (1000 << 16) | 1000,
+		.flags         = V4L2_CTRL_FLAG_SLIDER,
+	}
+};
+
+struct v4l2_querymenu ov5645_qmenu_autofocus[] = {
+	{
+		.id         = V4L2_CID_FOCUS_AUTO,
+		.index      = CAM_FOCUS_MODE_INFINITY,
+		.name       = "infinity",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_FOCUS_AUTO,
+		.index      = CAM_FOCUS_MODE_AUTO,
+		.name       = "auto",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_FOCUS_AUTO,
+		.index      = CAM_FOCUS_MODE_CONTI_VID,
+		.name       = "continuous-video",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_FOCUS_AUTO,
+		.index      = CAM_FOCUS_MODE_CONTI_PIC,
+		.name       = "continuous-picture",
+		.reserved   = 0,
+	}
+};
+
+struct v4l2_querymenu ov5645_qmenu_flashmode[] = {
+	{
+		.id         = V4L2_CID_BACKLIGHT_COMPENSATION,
+		.index      = FLASHLIGHT_ON,
+		.name       = "on",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_BACKLIGHT_COMPENSATION,
+		.index      = FLASHLIGHT_OFF,
+		.name       = "off",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_BACKLIGHT_COMPENSATION,
+		.index      = FLASHLIGHT_TORCH,
+		.name       = "torch",
+		.reserved   = 0,
+	}
+};
+
+struct v4l2_querymenu ov5645_qmenu_wbmode[] = {
+	{
+		.id         = V4L2_CID_DO_WHITE_BALANCE,
+		.index      = CAM_WB_AUTO,
+		.name       = "auto",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_DO_WHITE_BALANCE,
+		.index      = CAM_WB_CLOUD,
+		.name       = "cloudy-daylight",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_DO_WHITE_BALANCE,
+		.index      = CAM_WB_INCANDESCENCE,
+		.name       = "incandescent",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_DO_WHITE_BALANCE,
+		.index      = CAM_WB_DAYLIGHT,
+		.name       = "daylight",
+		.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_DO_WHITE_BALANCE,
+			.index      = CAM_WB_FLUORESCENT,
+			.name       = "fluorescent",
+			.reserved   = 0,
+	}, {
+		.id         = V4L2_CID_DO_WHITE_BALANCE,
+			.index      = CAM_WB_FLUORESCENT,
+			.name       = "warm-fluorescent",
+			.reserved   = 0,
+	},
+};
+
+struct {
+	__u32   id;
+	int     num;
+	struct v4l2_querymenu *ov5645_qmenu;
+} ov5645_qmenu_set[] = {
+	/*
+	   {
+	   .id             = V4L2_CID_FOCUS_AUTO,
+	   .num            = ARRAY_SIZE(ov5645_qmenu_autofocus),
+	   .ov5645_qmenu   = ov5645_qmenu_autofocus,
+	   },*/
+	{
+		.id             = V4L2_CID_BACKLIGHT_COMPENSATION,
+		.num            = ARRAY_SIZE(ov5645_qmenu_flashmode),
+		.ov5645_qmenu   = ov5645_qmenu_flashmode,
+	}, {
+		.id		= V4L2_CID_DO_WHITE_BALANCE,
+		.num            = ARRAY_SIZE(ov5645_qmenu_wbmode),
+		.ov5645_qmenu   = ov5645_qmenu_wbmode,
+	}
+};
+
+#define dprintk(dev, level, fmt, arg...) \
+	v4l2_dbg(level, debug, &dev->v4l2_dev, fmt, ## arg)
+
+/* ------------------------------------------------------------------
+	Basic structures
+   ------------------------------------------------------------------*/
+
+struct ov5645_fmt {
+	char  *name;
+	u32   fourcc;          /* v4l2 format id */
+	int   depth;
+};
+
+static struct ov5645_fmt formats[] = {
+	{
+		.name     = "RGB565 (BE)",
+		.fourcc   = V4L2_PIX_FMT_RGB565X, /* rrrrrggg gggbbbbb */
+		.depth    = 16,
+	}, {
+		.name     = "RGB888 (24)",
+		.fourcc   = V4L2_PIX_FMT_RGB24, /* 24  RGB-8-8-8 */
+		.depth    = 24,
+	}, {
+		.name     = "BGR888 (24)",
+		.fourcc   = V4L2_PIX_FMT_BGR24, /* 24  BGR-8-8-8 */
+		.depth    = 24,
+	}, {
+		.name     = "12  Y/CbCr 4:2:0SP",
+		.fourcc   = V4L2_PIX_FMT_NV12,
+		.depth    = 12,
+	}, {
+		.name     = "12  Y/CbCr 4:2:0SP",
+		.fourcc   = V4L2_PIX_FMT_NV21,
+		.depth    = 12,
+	}, {
+		.name     = "YUV420P",
+		.fourcc   = V4L2_PIX_FMT_YUV420,
+		.depth    = 12,
+	}, {
+		.name     = "YVU420P",
+		.fourcc   = V4L2_PIX_FMT_YVU420,
+		.depth    = 12,
+	}
+};
+
+static struct ov5645_fmt *get_format(struct v4l2_format *f)
+{
+	struct ov5645_fmt *fmt;
+	unsigned int k;
+
+	for (k = 0; k < ARRAY_SIZE(formats); k++) {
+		fmt = &formats[k];
+		if (fmt->fourcc == f->fmt.pix.pixelformat)
+			break;
+	}
+
+	if (k == ARRAY_SIZE(formats))
+		return NULL;
+
+	return &formats[k];
+}
+
+struct sg_to_addr {
+	int pos;
+	struct scatterlist *sg;
+};
+
+/* buffer for one video frame */
+struct ov5645_buffer {
+    /* common v4l buffer stuff -- must be first */
+	struct videobuf_buffer vb;
+
+	struct ov5645_fmt        *fmt;
+
+	unsigned int canvas_id;
+};
+
+struct ov5645_dmaqueue {
+	struct list_head       active;
+
+    /* thread for generating video stream*/
+	struct task_struct         *kthread;
+	wait_queue_head_t          wq;
+    /* Counters to control fps rate */
+	int                        frame;
+	int                        ini_jiffies;
+};
+
+struct resolution_param {
+	struct v4l2_frmsize_discrete frmsize;
+	struct v4l2_frmsize_discrete active_frmsize;
+	int active_fps;
+	resolution_size_t size_type;
+	struct aml_camera_i2c_fig_s *reg_script;
+};
+
+static LIST_HEAD(ov5645_devicelist);
+
+struct ov5645_device {
+	struct list_head		ov5645_devicelist;
+	struct v4l2_subdev		sd;
+	struct v4l2_device		v4l2_dev;
+
+	spinlock_t                 slock;
+	struct mutex			mutex;
+
+	int                        users;
+
+	/* various device info */
+	struct video_device        *vdev;
+
+	struct ov5645_dmaqueue       vidq;
+
+	/* Several counters */
+	unsigned long              jiffies;
+
+	/* Input Number */
+	int	           input;
+
+	/* platform device data from board initting. */
+	aml_cam_info_t  cam_info;
+
+	/* Control 'registers' */
+	int                qctl_regs[ARRAY_SIZE(ov5645_qctrl)];
+
+	/* current resolution param for preview and capture */
+	struct resolution_param *cur_resolution_param;
+
+	/* wake lock */
+	struct wake_lock	wake_lock;
+
+	/* for down load firmware */
+	struct work_struct dl_work;
+
+	int firmware_ready;
+};
+
+static DEFINE_MUTEX(firmware_mutex);
+
+static inline struct ov5645_device *to_dev(struct v4l2_subdev *sd)
+{
+	return container_of(sd, struct ov5645_device, sd);
+}
+
+struct ov5645_fh {
+	struct ov5645_device            *dev;
+
+	/* video capture */
+	struct ov5645_fmt            *fmt;
+	unsigned int               width, height;
+	struct videobuf_queue      vb_vidq;
+
+	struct videobuf_res_privdata res;
+
+	enum v4l2_buf_type         type;
+	int	           input;     /* Input Number on bars */
+	int  stream_on;
+	unsigned int		f_flags;
+};
+
+/*static inline struct ov5645_fh *to_fh(struct ov5645_device *dev)
+{
+	return container_of(dev, struct ov5645_fh, dev);
+}*/
+
+/* below is OV provided. 20150713 */
+static struct aml_camera_i2c_fig_s ov5645_script[] = {
+	/* @@ MIPI_2lane_(YUV) 960p  30fps */
+	{0x3031, 0x00},
+	{0x302c, 0x42},
+	{0x3008, 0x42},
+	{0x3103, 0x03},
+	{0x4050, 0x6e},
+	{0x4051, 0x7f},
+	{0x3017, 0x40},
+	{0x3018, 0x00},
+	{0x3503, 0x00}, /* 0x07 */
+	{0x3500, 0x00},
+	{0x3501, 0x3d},
+	{0x3502, 0x80},
+	{0x350a, 0x00},
+	{0x350b, 0x3c},
+	{0x3611, 0x06},
+	{0x3614, 0x50},
+	{0x3702, 0x6e},
+	{0x370f, 0x10},
+	{0x3739, 0x70},
+	{0x3719, 0x86},
+	{0x3826, 0x03},
+	{0x3828, 0x08},
+	{0x4520, 0xb0},
+	{0x4800, 0x24},/* {0x4800, 0x04}chage mipi data free/gate */
+	{0x4818, 0x01},
+	{0x481d, 0xf0},
+	{0x481f, 0x50}, /* 0x50 */
+	{0x4823, 0x70},
+	{0x4831, 0x14},
+	{0x505c, 0x30},
+	{0x5a00, 0x08},
+	{0x5a21, 0x00},
+	{0x5a24, 0x00},
+	{0x3108, 0x01},
+	{0x3630, 0x2d},
+	{0x3631, 0x00},
+	{0x3632, 0x32},
+	{0x3633, 0x52},
+	{0x3621, 0xe0},
+	{0x3704, 0xa0},
+	{0x3703, 0x52},
+	{0x3715, 0x08},
+	{0x3717, 0x01},
+	{0x370b, 0x61},
+	{0x3705, 0x33},
+	{0x3905, 0x02},
+	{0x3906, 0x10},
+	{0x3901, 0x0a},
+	{0x3731, 0x22},
+	{0x3600, 0x09},
+	{0x3601, 0x43},
+	{0x3620, 0x33},
+	{0x371b, 0x20},
+	{0x3a18, 0x00},
+	{0x3a19, 0xc0},/* f8 */
+	{0x3635, 0x13},
+	{0x3636, 0x03},
+	{0x3634, 0x70},
+	{0x3622, 0x01},
+	{0x3c04, 0x28},
+	{0x3c05, 0x98},
+	{0x3c07, 0x07},
+	{0x3c09, 0xc2},
+	{0x3c0a, 0x9c},
+	{0x3c0b, 0x40},
+	{0x3004, 0xef},
+	{0x3820, 0x41},
+	{0x3821, 0x07},
+	{0x4514, 0x00},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x06},
+	{0x3804, 0x0a},
+	{0x3805, 0x3f},
+	{0x3806, 0x07},
+	{0x3807, 0x9d},
+	{0x3808, 0x05},
+	{0x3809, 0x00},
+	{0x380a, 0x03},
+	{0x380b, 0xc0},
+	{0x3810, 0x00},
+	{0x3811, 0x10},
+	{0x3812, 0x00},
+	{0x3813, 0x06},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x3034, 0x18},
+	{0x3035, 0x11},
+	{0x3036, 0x38},
+	{0x3037, 0x13},
+	{0x380c, 0x07},
+	{0x380d, 0x68},
+	{0x380e, 0x03},
+	{0x380f, 0xd8},
+	{0x3c01, 0xb4},
+	{0x3c00, 0x04},
+	{0x3a08, 0x01},
+	{0x3a09, 0x27},
+	{0x3a0e, 0x03},
+	{0x3a0a, 0x00},
+	{0x3a0b, 0xf6},
+	{0x3a0d, 0x04},
+	{0x3a00, 0x3c},
+	{0x3a02, 0x0b},
+	{0x3a03, 0x88},
+	{0x3a14, 0x0b},
+	{0x3a15, 0x88},
+	{0x3a17, 0x02},
+	{0x3618, 0x00},
+	{0x3612, 0xab},
+	{0x3708, 0x66},
+	{0x3709, 0x52},
+	{0x370c, 0xc3},
+	{0x4001, 0x02},
+	{0x4004, 0x02},
+	{0x3002, 0x1c},
+	{0x3006, 0xc3},
+	{0x300e, 0x45},
+	{0x302e, 0x0b},
+	{0x4300, 0x32}, /* YUV order */
+	{0x501f, 0x00},
+	{0x460b, 0x37},
+	{0x460c, 0x20},
+	{0x4837, 0x20},
+	{0x3824, 0x01},
+	{0x5001, 0xa3},
+	{0x5180, 0xff},/* 0xff */
+	{0x5181, 0xf2},
+	{0x5182, 0x00},
+	{0x5183, 0x14},
+	{0x5184, 0x25},
+	{0x5185, 0x24},
+	{0x5186, 0x15},
+	{0x5187, 0x20},
+	{0x5188, 0x16},
+	{0x5189, 0x71},/* 64//5e */
+	{0x518a, 0x5c},/* 5c */
+	{0x518b, 0xf9},
+	{0x518c, 0xb2},
+	{0x518d, 0x3f},
+	{0x518e, 0x33},
+	{0x518f, 0x5c},
+	{0x5190, 0x48},
+	{0x5191, 0xf8},
+	{0x5192, 0x04},
+	{0x5193, 0x70},
+	{0x5194, 0xf0},
+	{0x5195, 0xf0},
+	{0x5196, 0x03},
+	{0x5197, 0x01},
+	{0x5198, 0x04},
+	{0x5199, 0xd6},
+	{0x519a, 0x04},
+	{0x519b, 0x00},
+	{0x519c, 0x07},
+	{0x519d, 0x03},
+	{0x519e, 0x38},
+	{0x5180, 0xff},/* 0xff */
+	{0x5181, 0xf2},
+	{0x5182, 0x00},
+	{0x5183, 0x14},
+	{0x5184, 0x25},
+	{0x5185, 0x24},
+	{0x5186, 0x15},/* 1 */
+	{0x5187, 0x20},/* 16 */
+	{0x5188, 0x22},
+	{0x5189, 0x75},/* 5e */
+	{0x518a, 0x5e},/* 5c */
+	{0x518b, 0xf9},/* e4 */
+	{0x518c, 0xb2},/* dd */
+	{0x518d, 0x3f},
+	{0x518e, 0x31}, /* 40 2e */
+	{0x518f, 0x61},
+	{0x5190, 0x4a}, /* 43 */
+	{0x5191, 0xf8},
+	{0x5192, 0x04},
+	{0x5193, 0x70},
+	{0x5194, 0xf0},
+	{0x5195, 0xf0},
+	{0x5196, 0x03},
+	{0x5197, 0x01},
+	{0x5198, 0x06},
+	{0x5199, 0xc2},
+	{0x519a, 0x04},
+	{0x519b, 0x00},
+	{0x519c, 0x05},
+	{0x519d, 0x8c},
+	{0x519e, 0x38},
+	{0x5381, 0x1a},
+	{0x5382, 0x68},
+	{0x5383, 0x01},
+	{0x5384, 0x1f},
+	{0x5385, 0x5a},
+	{0x5386, 0x79},
+	{0x5387, 0x8d},
+	{0x5388, 0x74},
+	{0x5389, 0x18},
+	{0x538a, 0x01},
+	{0x538b, 0x9C},
+	{0x5480, 0x01},
+	{0x5481, 0x08},
+	{0x5482, 0x14},
+	{0x5483, 0x28},
+	{0x5484, 0x51},
+	{0x5485, 0x65},
+	{0x5486, 0x71},
+	{0x5487, 0x7d},
+	{0x5488, 0x87},
+	{0x5489, 0x91},
+	{0x548a, 0x9a},
+	{0x548b, 0xaa},
+	{0x548c, 0xb8},
+	{0x548d, 0xcd},
+	{0x548e, 0xdd},
+	{0x548f, 0xea},
+	{0x5490, 0x1d},
+	{0x5300, 0x08},
+	{0x5301, 0x30},
+	{0x5302, 0x3f},
+	{0x5303, 0x10},
+	{0x5304, 0x08},
+	{0x5305, 0x30},
+	{0x5306, 0x04},
+	{0x5307, 0x14},
+	{0x5309, 0x08},
+	{0x530a, 0x30},
+	{0x530b, 0x04},
+	{0x530c, 0x06},
+	{0x5580, 0x06},
+	{0x5583, 0x40},
+	{0x5584, 0x10},/* 20//10 */
+	{0x5589, 0x10},
+	{0x558a, 0x00},
+	{0x558b, 0xf8},
+	{0x5000, 0xa7},
+	{0x5800, 0x28},
+	{0x5801, 0x20},
+	{0x5802, 0x18},
+	{0x5803, 0x18},
+	{0x5804, 0x20},
+	{0x5805, 0x28},
+	{0x5806, 0x17},
+	{0x5807, 0x0C},
+	{0x5808, 0x08},
+	{0x5809, 0x08},
+	{0x580A, 0x0C},
+	{0x580B, 0x17},
+	{0x580C, 0x0C},
+	{0x580D, 0x05},
+	{0x580E, 0x01},
+	{0x580F, 0x01},
+	{0x5810, 0x05},
+	{0x5811, 0x0C},
+	{0x5812, 0x0C},
+	{0x5813, 0x05},
+	{0x5814, 0x01},
+	{0x5815, 0x01},
+	{0x5816, 0x05},
+	{0x5817, 0x0C},
+	{0x5818, 0x16},
+	{0x5819, 0x0B},
+	{0x581A, 0x07},
+	{0x581B, 0x08},
+	{0x581C, 0x0C},
+	{0x581D, 0x17},
+	{0x581E, 0x27},
+	{0x581F, 0x1F},
+	{0x5820, 0x18},
+	{0x5821, 0x18},
+	{0x5822, 0x20},
+	{0x5823, 0x28},/* ;2a;29 */
+	{0x5824, 0x16},/* ;18;17 */
+	{0x5825, 0x1a},/* ;1c;1B */
+	{0x5826, 0x1C},/*  */
+	{0x5827, 0x1a},/* ;1c;1B */
+	{0x5828, 0x26},/*  */
+	{0x5829, 0x1A},/*  */
+	{0x582A, 0x26},/* ;28;27 */
+	{0x582B, 0x34},/* ;36;35 */
+	{0x582C, 0x26},/* ;28;27 */
+	{0x582D, 0x1A},/*  */
+	{0x582E, 0x18},/* ;1a;19 */
+	{0x582F, 0x42},/*  */
+	{0x5830, 0x40},/*  */
+	{0x5831, 0x42},/*  */
+	{0x5832, 0x18},/* ;1a;19 */
+	{0x5833, 0x2A},/*  */
+	{0x5834, 0x26},/* ;28;27 */
+	{0x5835, 0x26},/*  */
+	{0x5836, 0x26},/* ;28;27 */
+	{0x5837, 0x28},/* ;2a;29 */
+	{0x5838, 0x16},/* ;18;17 */
+	{0x5839, 0x1A},/*  */
+	{0x583A, 0x1A},/*  */
+	{0x583B, 0x1A},/*  */
+	{0x583C, 0x26},/* ;28;27 */
+	{0x583D, 0xCE},/*  */
+	{0x5688, 0x11},
+	{0x5689, 0x11},
+	{0x568a, 0x11},
+	{0x568b, 0x11},
+	{0x568c, 0x11},
+	{0x568d, 0x11},
+	{0x568e, 0x11},
+	{0x568f, 0x11},
+	{0x5025, 0x00},
+	{0x3a0f, 0x28}, /* 30  //28 */
+	{0x3a10, 0x23}, /* 28  //20 */
+	{0x3a11, 0x51}, /* 61  //51 */
+	{0x3a1b, 0x28}, /* 30  //28 */
+	{0x3a1e, 0x23}, /* 28  //20 */
+	{0x3a1f, 0x10},
+	{0x3a17, 0x02},
+	{0x4005, 0x18},
+	{0x3503, 0x00},
+	{0x3008, 0x02},
+	{0x501d, 0x00},
+	{0x5780, 0xfc},
+	{0x5781, 0x13},
+	{0x5782, 0x03},
+	{0x5786, 0x20},
+	{0x5787, 0x40},
+	{0x5788, 0x08},
+	{0x5789, 0x08},
+	{0x578a, 0x02},
+	{0x578b, 0x01},
+	{0x578c, 0x01},
+	{0x578d, 0x0c},
+	{0x578e, 0x02},
+	{0x578f, 0x01},
+	{0x5790, 0x01},
+
+	{ 0xffff, 0xff}
+};
+
+/* below is OV provided, 20150713 */
+static struct aml_camera_i2c_fig_s ov5645_preview_VGA_script[] = {
+	/* 640x480 */
+
+	{0x3008, 0x42},
+	{0x4050, 0x6e},
+	{0x4051, 0x8f},
+	{0x5302, 0x1d},/*  */
+	{0x5303, 0x00},/*  */
+	{0x5306, 0x08},/* dns */
+	{0x5307, 0x1f},/* dns */
+	{0x3600, 0x09},
+	{0x3601, 0x43},
+	{0x3820, 0x47},/* 0x41 */
+	{0x3821, 0x01},/* 0x07 */
+	{0x4514, 0x00},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x06},
+	{0x3804, 0x0a},
+	{0x3805, 0x3f},
+	{0x3806, 0x07},
+	{0x3807, 0x9d},
+	{0x3808, 0x02},
+	{0x3809, 0x80},
+	{0x380a, 0x01},
+	{0x380b, 0xe0},
+	{0x3810, 0x00},
+	{0x3811, 0x10},
+	{0x3812, 0x00},
+	{0x3813, 0x06},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x3034, 0x18},
+	{0x3035, 0x11},
+	{0x3036, 0x38},
+	{0x3037, 0x13},
+	{0x380c, 0x07},
+	{0x380d, 0x68},
+	{0x380e, 0x03},
+	{0x380f, 0xd8},
+	{0x3a08, 0x01},
+	{0x3a09, 0x27},
+	{0x3a0e, 0x03},
+	{0x3a0a, 0x00},
+	{0x3a0b, 0xf6},
+	{0x3a0d, 0x04},
+	{0x3618, 0x00},
+	{0x3612, 0xab},
+	{0x3708, 0x66},
+	{0x3709, 0x52},
+	{0x370c, 0xc3},
+	{0x4004, 0x02},
+	{0x460b, 0x37},
+	{0x460c, 0x20},
+	{0x4837, 0x11},
+	{0x3824, 0x01},
+	{0x5001, 0x83},
+	{0x5002, 0x80},
+	{0x5003, 0x08},
+	{0x3032, 0x00},
+	{0x3008, 0x02},
+
+	{ 0xffff, 0xff },
+};
+/* #define FPS_30_HZ_960P */
+/* #define FPS_20_HZ_960P */
+#define FPS_15_HZ_960P
+/* #define FPS_10_HZ_960P */
+
+/* below is OV provided. 20150713 */
+static struct aml_camera_i2c_fig_s ov5645_preview_960P_30HZ_script[] = {
+/* 1280x960 30fps */
+	{0x3008, 0x42},
+
+	{0x3a00, 0x38},
+	{0x4050, 0x6e},
+	{0x4051, 0x8f},
+	{0x5302, 0x1d},/*  */
+	{0x5303, 0x00},/*  */
+	{0x5306, 0x08},/* dns */
+	{0x5307, 0x1f},/* dns */
+	{0x3600, 0x09},
+	{0x3601, 0x43},
+	{0x3820, 0x47},/* 0x41 */
+	{0x3821, 0x01},/* 0x07 */
+	{0x4514, 0x00},
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x06},
+	{0x3804, 0x0a},
+	{0x3805, 0x3f},
+	{0x3806, 0x07},
+	{0x3807, 0x9d},
+	{0x3808, 0x05},
+	{0x3809, 0x00}, /* 0x00 */
+	{0x380a, 0x03},
+	{0x380b, 0xc0}, /* 0xc0 */
+	{0x3810, 0x00},
+	{0x3811, 0x10},
+	{0x3812, 0x00},
+	{0x3813, 0x06},
+	{0x3814, 0x31},
+	{0x3815, 0x31},
+	{0x3034, 0x18},
+	{0x3035, 0x11},
+	{0x3036, 0x38},
+	{0x3037, 0x13},
+	{0x380c, 0x07},
+	{0x380d, 0x68},
+	{0x380e, 0x03},
+	{0x380f, 0xd8},
+	{0x3a08, 0x01},
+	{0x3a09, 0x27},
+	{0x3a0e, 0x03},
+	{0x3a0a, 0x00},
+	{0x3a0b, 0xf6},
+	{0x3a0d, 0x04},
+	{0x3618, 0x00},
+	{0x3612, 0xab},
+	{0x3708, 0x66},
+	{0x3709, 0x52},
+	{0x370c, 0xc3},
+	{0x4004, 0x02},
+	{0x460b, 0x37},
+	{0x460c, 0x20},
+	{0x4837, 0x11},
+	{0x3824, 0x01},
+	{0x5001, 0x83},
+	{0x5002, 0x80},
+	{0x5003, 0x08},
+	{0x3032, 0x00},
+	{0x3008, 0x02},
+
+	{0x3503, 0x00}, /* auto AE */
+	{0x3406, 0x00},/* auto AWB */
+
+	{0xffff, 0xff}
+};
+
+/* below OV provide. 20150713 */
+static struct aml_camera_i2c_fig_s ov5645_capture_5M_script[]  = {
+	{0x4202, 0x08},/* stop mipi stream */
+
+	/* {0x3008, 0x42},// software power down */
+
+	{0x3a00, 0x38},
+	{0x4050, 0x6e},
+	{0x4051, 0x8f},
+	{0x5302, 0x1c},
+	{0x5303, 0x06},/* 08 */
+	{0x5306, 0x06},
+	{0x5307, 0x5f},/* 16 */
+	{0x3600, 0x08},
+	{0x3601, 0x33},
+	{0x3820, 0x46},/* 46 */
+	{0x3821, 0x00},/* 00 */
+	{0x4514, 0x00},/* 88 */
+	{0x3800, 0x00},
+	{0x3801, 0x00},
+	{0x3802, 0x00},
+	{0x3803, 0x00},
+	{0x3804, 0x0a},
+	{0x3805, 0x3f},
+	{0x3806, 0x07},
+	{0x3807, 0x9f},
+	{0x3808, 0x0a}, /* 0x0a */
+	{0x3809, 0x20}, /* 0x20 */
+	{0x380a, 0x07}, /* 0x07 */
+	{0x380b, 0x98}, /* 0x98 */
+	{0x3810, 0x00},
+	{0x3811, 0x10},
+	{0x3812, 0x00},
+	{0x3813, 0x04}, /* 0x04 */
+	{0x3814, 0x11},
+	{0x3815, 0x11},
+	{0x3034, 0x18},
+	{0x3035, 0x21},/* 0x11=15fps,0x21=7.5fps */
+	{0x3036, 0x5a}, /* 0x54 */
+	{0x3037, 0x13},
+	{0x380c, 0x0b},
+	{0x380d, 0xec}, /* 0xec 0x1c //here is debuged */
+	{0x380e, 0x07},
+	{0x380f, 0xb0},
+	{0x3a08, 0x01},/* 01 */
+	{0x3a09, 0x93},/* 27 for 15fps */
+	{0x3a0e, 0x0c},/* 06 for 15fps */
+	{0x3a0a, 0x00},
+	{0x3a0b, 0x7a},/* f6 for 15fps */
+	{0x3a0d, 0x0f},/* 08 for 15fps */
+	{0x3618, 0x04},
+	{0x3612, 0xab},
+	{0x3708, 0x63},
+	{0x3709, 0x12},
+	{0x370c, 0xc0},
+	{0x4004, 0x06},
+	{0x460c, 0x20},
+	{0x4837, 0x16}, /* 0x16 here is debuged 20150720 */
+	{0x3824, 0x01},
+	{0x5001, 0xa3}, /* 0x83 */
+	{0x5002, 0x81},
+	{0x5003, 0x08},
+	{0x3032, 0x00},
+
+	{0x4202, 0x00}, /* open mipi steam */
+
+	/* {0x3008, 0x02}, //	; software power up */
+
+	{0xffff, 0xff},
+};
+
+static struct resolution_param  prev_resolution_array[] = {
+	{
+		.frmsize		= {1280, 960},
+		/* .active_frmsize	= {1280, 960}, */
+		.active_frmsize		= {2592, 1944},
+		.active_fps		= 15,
+		.size_type		= SIZE_1280X960,
+		/* .reg_script		= ov5645_preview_960P_30HZ_script, */
+		.reg_script		= ov5645_capture_5M_script,
+	}, {
+		.frmsize		= {1280, 720},
+		.active_frmsize		= {1280, 960},
+		.active_fps		= 30,
+		.size_type		= SIZE_1280X720,
+		.reg_script		= ov5645_preview_960P_30HZ_script,
+	},
+	/*
+	{
+		.frmsize		= {1024, 768},
+		.active_frmsize		= {1280, 960},
+		.active_fps		= 15,
+		.size_type		= SIZE_1024X768,
+		.reg_script		= ov5645_preview_960P_30HZ_script,
+	},
+	{
+		.frmsize		= {640, 480},
+		.active_frmsize		= {640, 480},
+		.active_fps		= 30,
+		.size_type		= SIZE_640X480,
+		.reg_script		= ov5645_preview_VGA_script,
+	},{
+		.frmsize		= {320, 240},
+		.active_frmsize		= {640, 480},
+		.active_fps		= 30,
+		.size_type		= SIZE_320X240,
+		.reg_script		= ov5645_preview_VGA_script,
+	},{
+		.frmsize		= {352, 288},
+		.active_frmsize		= {640, 480},
+		.active_fps		= 30,
+		.size_type		= SIZE_352X288,
+		.reg_script		= ov5645_preview_VGA_script,
+	},{
+		.frmsize		= {176, 144},
+		.active_frmsize		= {640, 480},
+		.active_fps		= 30,
+		.size_type		= SIZE_176X144,
+		.reg_script		= ov5645_preview_VGA_script,
+	}, */
+};
+
+static struct resolution_param  capture_resolution_array[] = {
+	{
+		.frmsize		= {2592, 1944},
+		.active_frmsize		= {2592, 1944},
+		.active_fps		= 15,
+		.size_type		= SIZE_2592X1944,
+		.reg_script		= ov5645_capture_5M_script,
+	},
+	{
+		.frmsize		= {1600, 1200},
+		.active_frmsize		= {2592, 1942},
+		.active_fps		= 15,
+		.size_type		= SIZE_1600X1200,
+		.reg_script		= ov5645_capture_5M_script,
+	}, {
+		.frmsize		= {2048, 1536},
+		.active_frmsize		= {2592, 1942},
+		.active_fps		= 15,
+		.size_type		= SIZE_2048X1536,
+		.reg_script		= ov5645_capture_5M_script,
+	},
+};
+
+static void ov5645_open_mipi_stream(void)
+{
+	pr_info("%s\n", __func__);
+	i2c_put_byte(g_client, 0x4202, 0x00); /* ov5645 open mipi stream */
+}
+
+/* download firmware by single i2c write */
+static int ov5645_download_firmware(struct ov5645_device *dev)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	int i = 0, d = 0;
+
+	pr_info("%s start ....\n", __func__);
+
+	i2c_put_byte(client, 0x3000, 0x20);
+	if (ov5645_have_opened) {
+		/* OV5645_FW_data_pair_size */
+		for (d = 0; d < ARRAY_SIZE(OV5645_AF_firmware); d++) {
+			u8 *pdata = OV5645_AF_firmware[d];
+			for (i = 0; i < OV5645_FW_data_pair_size[d]; i++) {
+				if ((i2c_put_byte(client, OV5645_FW_ADDR,
+							pdata[i])) < 0) {
+					pr_info("fail in download firmware\n");
+					break;
+				}
+			}
+			i++;
+		}
+	}
+	OV5645MIPI_write_cmos_sensor(0x3022, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x3023, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x3024, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x3025, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x3026, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x3027, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x3028, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x3029, 0x7F);
+	OV5645MIPI_write_cmos_sensor(0x3000, 0x00); /* Enable MCU */
+
+	return 0;
+}
+
+static camera_focus_mode_t start_focus_mode = CAM_FOCUS_MODE_RELEASE;
+static int ov5645_AutoFocus(struct ov5645_device *dev, int focus_mode);
+
+static void do_download(struct work_struct *work)
+{
+	struct ov5645_device *dev = container_of(work, struct ov5645_device,
+			dl_work);
+	/* struct i2c_client *client = v4l2_get_subdevdata(&dev->sd); */
+	mutex_lock(&firmware_mutex);
+	if (ov5645_have_opened) {
+		if (ov5645_download_firmware(dev) >= 0)
+			msleep(10);
+	}
+	dev->firmware_ready = 1;
+	mutex_unlock(&firmware_mutex);
+	if (start_focus_mode) {
+		ov5645_AutoFocus(dev, (int)start_focus_mode);
+		start_focus_mode = CAM_FOCUS_MODE_RELEASE;
+	}
+}
+
+void ov5645_reset(struct i2c_client *client)
+{
+	pr_info("%s\n", __func__);
+	i2c_put_byte(client, 0x3103, 0x11);/* ; PLL clock selection */
+	msleep(5);
+	i2c_put_byte(client, 0x3008, 0x82);
+	/* msleep(10); //delay(2);		//; delay 2ms */
+}
+
+void ov5645_init_regs(struct ov5645_device *dev)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	int i = 0;
+	ov5645_reset(client);
+	while (1) {
+		if (ov5645_script[i].val == 0xff &&
+				ov5645_script[i].addr == 0xffff) {
+			pr_info("success in initial ov5645.\n");
+			break;
+		}
+		if ((i2c_put_byte(client, ov5645_script[i].addr,
+						ov5645_script[i].val)) < 0) {
+			pr_info("fail in initial ov5645.\n");
+			return;
+		}
+		i++;
+	}
+	return;
+}
+
+#if 0
+static int get_exposure_param(struct ov5645_device *dev,
+	unsigned char *gain, unsigned char *exposurelow,
+	unsigned char *exposuremid, unsigned char *exposurehigh)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	int ret;
+	unsigned char ogain, oexposurelow, oexposuremid, oexposurehigh;
+	int capture_maxLines;
+	int preview_maxlines;
+	int preview_maxLine_H;
+	int preview_maxLine_L;
+	long capture_Exposure;
+	long capture_exposure_gain;
+	long previewExposure;
+	long capture_gain;
+	int lines_10ms;
+	#define CAPTURE_FRAMERATE 375
+	#define PREVIEW_FRAMERATE 1500
+
+	/* i2c_put_byte(client, 0x3503, 0x07); */
+
+	ogain = i2c_get_byte(client, 0x350b);
+	pr_info("0x350b = 0x%x\n", ogain);
+
+	oexposurelow = i2c_get_byte(client, 0x3502);
+	pr_info("0x3502 = 0x%x\n", oexposurelow);
+
+	oexposuremid = i2c_get_byte(client, 0x3501);
+	pr_info("0x3501 = 0x%x\n", oexposuremid);
+
+	oexposurehigh = i2c_get_byte(client, 0x3500) & 0xf;
+	pr_info("0x3500 = 0x%x\n", oexposurehigh);
+
+	preview_maxLine_H = i2c_get_byte(client, 0x380e);
+	pr_info("preview_maxLine_H = %d\n", preview_maxLine_H);
+	preview_maxLine_L = i2c_get_byte(client, 0x380f);
+	pr_info("preview_maxLine_L = %d\n", preview_maxLine_L);
+	preview_maxlines = preview_maxLine_H << 8 + preview_maxLine_L;
+	pr_info("preview_maxlines = %d\n", preview_maxlines);
+	preview_maxlines = 984;
+	capture_maxLines = 1968;
+	if (ov5645_qctrl[7].default_value == CAM_BANDING_60HZ) /* 60Hz */
+		lines_10ms = CAPTURE_FRAMERATE * capture_maxLines/12000;
+	else
+		lines_10ms = CAPTURE_FRAMERATE * capture_maxLines/10000;
+
+	pr_info("lines_10ms is %d\n", lines_10ms);
+
+	previewExposure = ((unsigned int)(oexposurehigh))<<12;
+	previewExposure += ((unsigned int)oexposuremid)<<4;
+	previewExposure += ((unsigned int)oexposurelow)>>4;
+
+	capture_Exposure =
+		(previewExposure*CAPTURE_FRAMERATE*capture_maxLines)/
+				(preview_maxlines*PREVIEW_FRAMERATE);
+	pr_info("capture_Exposure = %d\n", capture_Exposure);
+
+	capture_gain = (ogain&0xf) + 16;
+
+	if (ogain & 0x10)
+		capture_gain = capture_gain << 1;
+
+	if (ogain & 0x20)
+		capture_gain = capture_gain << 1;
+
+	if (ogain & 0x40)
+		capture_gain = capture_gain << 1;
+
+	if (ogain & 0x80)
+		capture_gain = capture_gain << 1;
+
+	pr_info("capture_gain = %d\n", capture_gain);
+
+	capture_exposure_gain = capture_Exposure * capture_gain;
+
+	pr_info("capture_exposure_gain = %d\n", capture_exposure_gain);
+
+	if (capture_exposure_gain <
+			((signed int)(capture_maxLines)*16)) {
+		capture_Exposure = capture_exposure_gain/16;
+		if (capture_Exposure > lines_10ms) {
+			capture_Exposure /= lines_10ms;
+			capture_Exposure *= lines_10ms;
+			pr_info("capture_Exposure is %d\n", capture_Exposure);
+		}
+	} else
+		capture_Exposure = capture_maxLines;
+
+	pr_info("capture_Exposure is %d\n", capture_Exposure);
+	if (capture_Exposure == 0)
+		capture_Exposure = 1;
+
+	capture_gain = (capture_exposure_gain*2/capture_Exposure + 1)/2;
+	*exposurelow = (unsigned char)(capture_Exposure<<4) & 0xff;
+	*exposuremid = (unsigned char)(capture_Exposure >> 4) & 0xff;
+	*exposurehigh = (unsigned char)(capture_Exposure >> 12) & 0xf;
+	*gain = (unsigned char) capture_gain;
+
+	return 0;
+}
+static int set_exposure_param_500m(struct ov5645_device *dev,
+	unsigned char gain , unsigned char exposurelow,
+	unsigned char exposuremid, unsigned char exposurehigh)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	int ret;
+	ret = i2c_put_byte(client, 0x350b, gain);
+	if (ret < 0) {
+		pr_info("sensor_write err !\n");
+		return ret;
+	}
+
+	ret = i2c_put_byte(client, 0x3502, exposurelow);
+	if (ret < 0) {
+		pr_info("sensor_write err !\n");
+		return ret;
+	}
+
+	ret = i2c_put_byte(client, 0x3501, exposuremid);
+	if (ret < 0) {
+		pr_info("sensor_write err !\n");
+		return ret;
+	}
+
+	ret = i2c_put_byte(client, 0x3500, exposurehigh);
+	if (ret < 0) {
+		pr_info("sensor_write err !\n");
+		return ret;
+	}
+
+	return 0;
+}
+#else
+#define PRE_EXP (0x5c4)
+#define PRE_EXTRA_LINES (0)
+#define PRE_GAIN (0x38)
+
+/* Sensor Exposure Line Limitation */
+#define OV5645MIPI_PV_EXPOSURE_LIMITATION	(984-4)
+#define OV5645MIPI_FULL_EXPOSURE_LIMITATION	(1968-4)
+
+#if 0
+static unsigned long ov5645_preview_maxlines;
+static int Get_preview_exposure_gain(struct ov5645_device *dev)
+{
+	int rc = 0;
+	unsigned int ret_l, ret_m, ret_h;
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	ret_h = ret_m = ret_l = 0;
+	ret_h = i2c_get_byte(client, 0x350c);
+	ret_l = i2c_get_byte(client, 0x350d);
+	ov5645_preview_extra_lines = ((ret_h << 8) + ret_l);
+	i2c_put_byte(client, 0x3503, 0x07);
+	/* get preview exp & gain */
+	ret_h = ret_m = ret_l = 0;
+	ov5645_preview_exposure = 0;
+	ret_h = i2c_get_byte(client, 0x3500);
+	ret_m = i2c_get_byte(client, 0x3501);
+	ret_l = i2c_get_byte(client, 0x3502);
+	pr_info("%s, exp h:0x%x04x m:0x%04x l:0x%04x\n", __func__,
+			ret_h, ret_m, ret_l);
+	ov5645_preview_exposure = (ret_h << 12) + (ret_m << 4) + (ret_l >> 4);
+	ret_h = ret_m = ret_l = 0;
+	ov5645_preview_exposure = ov5645_preview_exposure +
+		(ov5645_preview_extra_lines)/16;
+	pr_info("preview_exposure=%lx\n", ov5645_preview_exposure);
+	ret_h = ret_m = ret_l = 0;
+	ov5645_preview_maxlines = 0;
+	ret_h = i2c_get_byte(client, 0x380e);
+	ret_l = i2c_get_byte(client, 0x380f);
+	ov5645_preview_maxlines = (ret_h << 8) + ret_l;
+	pr_info("%s, Preview_Maxlines=%lx\n", __func__,
+			ov5645_preview_maxlines);
+	/* Read back AGC Gain for preview */
+	ov5645_gain = 0;
+	ov5645_gain = i2c_get_byte(client, 0x350b);
+	pr_info("Gain,0x350b=0x%lx\n", ov5645_gain);
+
+	return rc;
+}
+
+static int cal_exposure(struct ov5645_device *dev, int pre_fps, int cap_fps)
+{
+	int rc = 0;
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	/* calculate capture exp & gain */
+	unsigned char ExposureLow, ExposureMid, ExposureHigh;
+	unsigned char Capture_MaxLines_High, Capture_MaxLines_Low;
+	unsigned int ret_l, ret_m, ret_h, Lines_10ms;
+	unsigned short ulCapture_Exposure, iCapture_Gain;
+	unsigned int ulCapture_Exposure_Gain, Capture_MaxLines;
+	ret_h = ret_m = ret_l = 0;
+	ret_h = i2c_get_byte(client, 0x380e);
+	ret_l = i2c_get_byte(client, 0x380f);
+	Capture_MaxLines = (ret_h << 8) + ret_l;
+	Capture_MaxLines = Capture_MaxLines + (ov5645_preview_extra_lines)/16;
+	pr_info("Capture_MaxLines=%d\n", Capture_MaxLines);
+	if (ov5645_qctrl[7].default_value == CAM_BANDING_60HZ) /* 60Hz */
+		Lines_10ms = cap_fps * Capture_MaxLines/12000;
+	else
+		Lines_10ms = cap_fps * Capture_MaxLines/10000;
+
+	if (ov5645_preview_maxlines == 0)
+		ov5645_preview_maxlines = 1;
+
+	ulCapture_Exposure =
+		(ov5645_preview_exposure*(cap_fps)*(Capture_MaxLines))/
+			(((ov5645_preview_maxlines)*(pre_fps)));
+	iCapture_Gain = ov5645_gain;
+	ulCapture_Exposure_Gain = ulCapture_Exposure * iCapture_Gain;
+	if (ulCapture_Exposure_Gain < Capture_MaxLines*16) {
+		ulCapture_Exposure = ulCapture_Exposure_Gain/16;
+		if (ulCapture_Exposure > Lines_10ms) {
+			ulCapture_Exposure /= Lines_10ms;
+			ulCapture_Exposure *= Lines_10ms;
+		}
+	} else
+		ulCapture_Exposure = Capture_MaxLines;
+
+	if (ulCapture_Exposure == 0)
+		ulCapture_Exposure = 1;
+
+	iCapture_Gain = (ulCapture_Exposure_Gain*2/ulCapture_Exposure + 1)/2;
+	ExposureLow = ((unsigned char)ulCapture_Exposure)<<4;
+	ExposureMid = (unsigned char)(ulCapture_Exposure >> 4) & 0xff;
+	ExposureHigh = (unsigned char)(ulCapture_Exposure >> 12);
+	Capture_MaxLines_Low = (unsigned char)(Capture_MaxLines & 0xff);
+	Capture_MaxLines_High = (unsigned char)(Capture_MaxLines >> 8);
+	i2c_put_byte(client, 0x380e, Capture_MaxLines_High);
+	i2c_put_byte(client, 0x380f, Capture_MaxLines_Low);
+	i2c_put_byte(client, 0x350b, iCapture_Gain);
+	i2c_put_byte(client, 0x3502, ExposureLow);
+	i2c_put_byte(client, 0x3501, ExposureMid);
+	i2c_put_byte(client, 0x3500, ExposureHigh);
+	pr_info("iCapture_Gain=%d\n", iCapture_Gain);
+	pr_info("ExposureLow=%d\n", ExposureLow);
+	pr_info("ExposureMid=%d\n", ExposureMid);
+	pr_info("ExposureHigh=%d\n", ExposureHigh);
+	/* msleep(250); */
+	return rc;
+}
+#else
+
+static void OV5645_WB_calibattion(u32 color_r_gain,
+		u32 color_g_gain, u32 color_b_gain, int ignore)
+{
+	u32 color_r_gain_w = 0x400;
+	u32 color_g_gain_w = 0x400;
+	u32 color_b_gain_w = 0x400;
+	u8 temp = OV5645MIPIYUV_read_cmos_sensor(0x350b);
+	pr_info("[OV5645MIPIOFILM]enter OV5645WBcalibattion function:\n ");
+
+	if (ignore)
+		return;
+
+	if (color_r_gain > 0x600) {
+		if (temp >= 0xb0) {
+			color_r_gain_w = color_r_gain * 94/100;
+			color_g_gain_w = color_g_gain;
+			color_b_gain_w = color_b_gain*96/100;
+		} else if (temp >= 0x70) {
+			color_r_gain_w = color_r_gain * 95/100;
+			color_g_gain_w = color_g_gain;
+			color_b_gain_w = color_b_gain*97/100;
+		} else if (temp >= 0x58) {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+			color_b_gain_w = color_b_gain*98/100;
+		} else if (temp >= 0x48) {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*98/100;
+		} else if (temp >= 0x30) {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*98/100;
+		} else {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*98/100;
+		}
+	} else if (color_r_gain > 0x540) {
+		if (temp >= 0xb0) {
+			color_r_gain_w = color_r_gain * 94/100;
+			color_g_gain_w = color_g_gain;
+			color_b_gain_w = color_b_gain*96/100;
+		} else if (temp >= 0x70) {
+			color_r_gain_w = color_r_gain * 97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*98/100;
+		} else if (temp >= 0x58) {
+			color_r_gain_w = color_r_gain*98/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*99/100;
+		} else if (temp >= 0x48) {
+			color_r_gain_w = color_r_gain*98/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*99/100;
+		} else if (temp >= 0x30) {
+			color_r_gain_w = color_r_gain*99/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*99/100;
+		} else {
+			color_r_gain_w = color_r_gain*99/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*99/100;
+		}
+	} else if (color_r_gain > 0x480) {
+		if (temp >= 0xb0) {
+			color_r_gain_w = color_r_gain * 94/100;
+			color_g_gain_w = color_g_gain;
+			color_b_gain_w = color_b_gain*96/100;
+		} else if (temp >= 0x70) {
+			color_r_gain_w = color_r_gain * 97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else if (temp >= 0x58) {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else if (temp >= 0x48) {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else if (temp >= 0x30) {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else {
+			color_r_gain_w = color_r_gain*97/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		}
+	} else {
+		if (temp >= 0xb0) {
+			color_r_gain_w = color_r_gain * 94/100;
+			color_g_gain_w = color_g_gain;
+			color_b_gain_w = color_b_gain*96/100;
+		} else if (temp >= 0x70) {
+			color_r_gain_w = color_r_gain * 98/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else if (temp >= 0x58) {
+			color_r_gain_w = color_r_gain*98/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else if (temp >= 0x48) {
+			color_r_gain_w = color_r_gain*98/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else if (temp >= 0x30) {
+			color_r_gain_w = color_r_gain*98/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		} else {
+			color_r_gain_w = color_r_gain*98/100;
+			color_g_gain_w = color_g_gain;
+
+			color_b_gain_w = color_b_gain*97/100;
+		}
+	}
+	/* OV5645MIPI_write_cmos_sensor(0x3212,0x02); */
+	OV5645MIPI_write_cmos_sensor(0x3400, (color_r_gain_w & 0xff00)>>8);
+	OV5645MIPI_write_cmos_sensor(0x3401, color_r_gain_w & 0xff);
+
+
+	OV5645MIPI_write_cmos_sensor(0x3402, (color_g_gain_w & 0xff00)>>8);
+
+	OV5645MIPI_write_cmos_sensor(0x3403, color_g_gain_w & 0xff);
+	OV5645MIPI_write_cmos_sensor(0x3404, (color_b_gain_w & 0xff00)>>8);
+
+	OV5645MIPI_write_cmos_sensor(0x3405, color_b_gain_w & 0xff);
+	/* OV5645MIPI_write_cmos_sensor(0x3212,0x12); */
+	/* OV5645MIPI_write_cmos_sensor(0x3212,0xa2); */
+	pr_info("color_r_gain_w=%x,color_g_gain_w=%x,color_b_gain_w=%x\n",
+			color_r_gain_w, color_g_gain_w, color_b_gain_w);
+}
+static void OV5645MIPI_Write_Shutter(u32 shutter)
+{
+	u32 extra_exposure_vts = 0;
+	if (shutter < 1)
+		shutter = 1;
+
+	if (shutter > OV5645MIPI_FULL_EXPOSURE_LIMITATION) {
+		extra_exposure_vts = shutter+4;
+		OV5645MIPI_write_cmos_sensor(0x380f,
+				extra_exposure_vts & 0xFF); /* EXVTS[b7~b0] */
+		OV5645MIPI_write_cmos_sensor(0x380e,
+				(extra_exposure_vts & 0xFF00) >> 8);
+		OV5645MIPI_write_cmos_sensor(0x350D, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x350C, 0x00);
+	}
+	shutter *= 16;
+	OV5645MIPI_write_cmos_sensor(0x3502, (shutter & 0x00FF));
+	OV5645MIPI_write_cmos_sensor(0x3501, ((shutter & 0x0FF00) >> 8));
+	OV5645MIPI_write_cmos_sensor(0x3500, ((shutter & 0xFF0000) >> 16));
+	pr_info("OV5645MIPIWriteShutter function: shutter:0x%04x\n", shutter);
+}  /* OV5645MIPI_write_shutter */
+
+static u32 OV5645MIPI_Read_Shutter(void)
+{
+	u16 temp_reg1, temp_reg2 , temp_reg3;
+	u32 PreviewShutter = 0;
+	pr_info("[OV5645MIPI]enter OV5645MIPIReadShutter function:\n ");
+	temp_reg1 = OV5645MIPIYUV_read_cmos_sensor(0x3500); /* AEC[b19~b16] */
+	temp_reg2 = OV5645MIPIYUV_read_cmos_sensor(0x3501); /* AEC[b15~b8] */
+	temp_reg3 = OV5645MIPIYUV_read_cmos_sensor(0x3502); /* AEC[b7~b0] */
+
+	PreviewShutter = (temp_reg1 << 12) | (temp_reg2<<4)|(temp_reg3>>4);
+	pr_info("[OV5645MIPI]exit OV5645MIPIReadShutter function:\n ");
+	return PreviewShutter;
+}
+#endif
+#if 0
+static unsigned long ov5645_preview_exposure = 0x5c4;
+static unsigned long ov5645_preview_extra_lines;
+static unsigned long ov5645_gain = 0x38;
+static void OV5645MIPIWriteExpShutter(u32 shutter)
+{
+	shutter *= 16;
+	OV5645MIPI_write_cmos_sensor(0x3502, (shutter & 0x00FF));/* AEC[7:0] */
+	OV5645MIPI_write_cmos_sensor(0x3501, ((shutter & 0x0FF00) >> 8));
+	OV5645MIPI_write_cmos_sensor(0x3500, ((shutter & 0xFF0000) >> 16));
+	pr_info("[OV5645MIPI]exit OV5645MIPIWriteExpShutter function:\n ");
+}
+static void OV5645MIPIWriteExtraShutter(u32 shutter)
+{
+	OV5645MIPI_write_cmos_sensor(0x350D, shutter & 0xFF);/* EXVTS[b7~b0] */
+	OV5645MIPI_write_cmos_sensor(0x350C, (shutter & 0xFF00) >> 8);
+	pr_info("[OV5645MIPI]exit OV5645MIPIWriteExtraShutter function:\n ");
+}
+static void OV5645MIPIWriteSensorGain(u32 gain)
+{
+	u16 temp_reg;
+	if (gain > 1024) {
+		pr_err("gain is bigger then 1024\n");
+		return;
+	}
+	temp_reg = 0;
+	temp_reg = gain&0x0FF;
+	OV5645MIPI_write_cmos_sensor(0x350B, temp_reg);
+	pr_info("[OV5645MIPI]exit OV5645MIPIWriteSensorGain function:\n ");
+}
+
+static void pre_default_exposure(void)
+{
+	ov5645_preview_extra_lines = PRE_EXTRA_LINES;
+	ov5645_preview_exposure = PRE_EXP;
+	ov5645_gain = PRE_GAIN;
+	OV5645MIPIWriteExtraShutter(ov5645_preview_extra_lines);
+	OV5645MIPIWriteExpShutter(ov5645_preview_exposure);
+	OV5645MIPIWriteSensorGain(ov5645_gain);
+}
+#endif
+
+#endif
+void OV5645MIPI_set_contrast(u16 para)
+{
+	pr_info("enter OV5645MIPI_set_contrast function:\n ");
+	switch (para) {
+	case 1:/* ISP_CONTRAST_LOW: */
+		OV5645MIPI_write_cmos_sensor(0x5586, 0x14);
+		OV5645MIPI_write_cmos_sensor(0x5585, 0x14);
+		break;
+	case 9:/* ISP_CONTRAST_HIGH: */
+		OV5645MIPI_write_cmos_sensor(0x5586, 0x2c);
+		OV5645MIPI_write_cmos_sensor(0x5585, 0x1c);
+		break;
+	case 5:/* ISP_CONTRAST_MIDDLE: */
+	default:
+		OV5645MIPI_write_cmos_sensor(0x5586, 0x20);
+		OV5645MIPI_write_cmos_sensor(0x5585, 0x00);
+		break;
+	}
+	pr_info("exit OV5645MIPI_set_contrast function:\n ");
+	return;
+}
+
+void OV5645MIPI_set_brightness(u16 para)
+{
+	pr_info("enter OV5645MIPI_set_brightness function:\n ");
+	switch (para) {
+	case 1:/* ISP_BRIGHT_LOW: */
+		OV5645MIPI_write_cmos_sensor(0x5587, 0x40);
+		OV5645MIPI_write_cmos_sensor(0x5588, 0x09);
+		break;
+	case 9: /* ISP_BRIGHT_HIGH: */
+		OV5645MIPI_write_cmos_sensor(0x5587, 0x40);
+		OV5645MIPI_write_cmos_sensor(0x5588, 0x01);
+		break;
+	case 5:/* ISP_BRIGHT_MIDDLE: */
+	default:
+		OV5645MIPI_write_cmos_sensor(0x5587, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x5588, 0x01);
+		break;
+	}
+	pr_info("exit OV5645MIPI_set_brightness function:\n ");
+	return;
+}
+
+void OV5645MIPI_set_saturation(u16 para)
+{
+	pr_info("enter OV5645MIPI_set_saturation function:\n ");
+	switch (para) {
+	case 9:/* ISP_SAT_HIGH: */
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645MIPI_write_cmos_sensor(0x5381, 0x22);
+		OV5645MIPI_write_cmos_sensor(0x5382, 0x55);
+		OV5645MIPI_write_cmos_sensor(0x5383, 0x12);
+		OV5645MIPI_write_cmos_sensor(0x5384, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x5385, 0x94);
+		OV5645MIPI_write_cmos_sensor(0x5386, 0x98);
+		OV5645MIPI_write_cmos_sensor(0x5387, 0xa9);
+		OV5645MIPI_write_cmos_sensor(0x5388, 0x9a);
+		OV5645MIPI_write_cmos_sensor(0x5389, 0x0e);
+		OV5645MIPI_write_cmos_sensor(0x538a, 0x01);
+		OV5645MIPI_write_cmos_sensor(0x538b, 0x98);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+		break;
+	case 1:/* ISP_SAT_LOW: */
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645MIPI_write_cmos_sensor(0x5381, 0x22);
+		OV5645MIPI_write_cmos_sensor(0x5382, 0x55);
+		OV5645MIPI_write_cmos_sensor(0x5383, 0x12);
+		OV5645MIPI_write_cmos_sensor(0x5384, 0x02);
+		OV5645MIPI_write_cmos_sensor(0x5385, 0x62);
+		OV5645MIPI_write_cmos_sensor(0x5386, 0x66);
+		OV5645MIPI_write_cmos_sensor(0x5387, 0x71);
+		OV5645MIPI_write_cmos_sensor(0x5388, 0x66);
+		OV5645MIPI_write_cmos_sensor(0x5389, 0x0a);
+		OV5645MIPI_write_cmos_sensor(0x538a, 0x01);
+		OV5645MIPI_write_cmos_sensor(0x538b, 0x98);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+		break;
+	case 5:/* ISP_SAT_MIDDLE: */
+	default:
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645MIPI_write_cmos_sensor(0x5381, 0x24);
+		OV5645MIPI_write_cmos_sensor(0x5382, 0x5b);
+		OV5645MIPI_write_cmos_sensor(0x5383, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x5384, 0x03);
+		OV5645MIPI_write_cmos_sensor(0x5385, 0x7f);
+		OV5645MIPI_write_cmos_sensor(0x5386, 0x83);
+		OV5645MIPI_write_cmos_sensor(0x5387, 0x91);
+		OV5645MIPI_write_cmos_sensor(0x5388, 0x84);
+		OV5645MIPI_write_cmos_sensor(0x5389, 0x0d);
+		OV5645MIPI_write_cmos_sensor(0x538a, 0x01);
+		OV5645MIPI_write_cmos_sensor(0x538b, 0x98);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+		break;
+	}
+	msleep(50);
+	pr_info("[OV5645MIPI]exit OV5645MIPI_set_saturation function:\n ");
+	return;
+}
+
+#if 0
+void OV5645MIPI_scene_mode_PORTRAIT(void)
+{
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+	/*FRAME rate*/
+	OV5645MIPI_write_cmos_sensor(0x3A00, 0x3c);
+	OV5645MIPI_write_cmos_sensor(0x3a02, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a03, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x3a14, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a15, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x350c, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x350d, 0x00);
+	/*AE Weight - CenterAverage*/
+	OV5645MIPI_write_cmos_sensor(0x501d, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x5688, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x5689, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568a, 0x21);
+	OV5645MIPI_write_cmos_sensor(0x568b, 0x12);
+	OV5645MIPI_write_cmos_sensor(0x568c, 0x12);
+	OV5645MIPI_write_cmos_sensor(0x568d, 0x21);
+	OV5645MIPI_write_cmos_sensor(0x568e, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568f, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+	pr_info("exit OV5645MIPI_scene_mode_PORTRAIT function:\n ");
+}
+
+void OV5645MIPI_scene_mode_LANDSCAPE(void)
+{
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+	/*FRAME rate*/
+	OV5645MIPI_write_cmos_sensor(0x3A00, 0x3c);
+	OV5645MIPI_write_cmos_sensor(0x3a02, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a03, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x3a14, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a15, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x350c, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x350d, 0x00);
+	/*AE Weight - CenterAverage*/
+	OV5645MIPI_write_cmos_sensor(0x501d, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x5688, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x5689, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568a, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568b, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568c, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568d, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568e, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568f, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+	pr_info("exit OV5645MIPI_scene_mode_LANDSCAPE function:\n ");
+}
+void OV5645MIPI_scene_mode_SUNSET(void)
+{
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+	/*FRAME rate*/
+	OV5645MIPI_write_cmos_sensor(0x3A00, 0x3c);
+	OV5645MIPI_write_cmos_sensor(0x3a02, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a03, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x3a14, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a15, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x350c, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x350d, 0x00);
+	/*AE Weight - CenterAverage*/
+	OV5645MIPI_write_cmos_sensor(0x501d, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x5688, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x5689, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568a, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568b, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568c, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568d, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568e, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568f, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+	pr_info("exit OV5645MIPI_scene_mode_SUNSET function:\n ");
+}
+void OV5645MIPI_scene_mode_SPORTS(void)
+{
+	pr_info("enter OV5645MIPI_scene_mode_SPORTS function:\n ");
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+	/*FRAME rate*/
+#if 0   /* Fix SBELI-302 */
+	OV5645MIPI_write_cmos_sensor(0x3A00, 0x38);
+	OV5645MIPI_write_cmos_sensor(0x3a02, 0x03);
+	OV5645MIPI_write_cmos_sensor(0x3a03, 0xd8);
+	OV5645MIPI_write_cmos_sensor(0x3a14, 0x03);
+	OV5645MIPI_write_cmos_sensor(0x3a15, 0xd8);
+	OV5645MIPI_write_cmos_sensor(0x350c, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x350d, 0x00);
+#else
+	OV5645MIPI_write_cmos_sensor(0x3A00, 0x3c);
+	OV5645MIPI_write_cmos_sensor(0x3a02, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a03, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x3a14, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a15, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x350c, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x350d, 0x00);
+#endif
+	/*AE Weight - CenterAverage*/
+	OV5645MIPI_write_cmos_sensor(0x501d, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x5688, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x5689, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568a, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568b, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568c, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568d, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568e, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568f, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+	pr_info("exit OV5645MIPI_scene_mode_SPORTS function:\n ");
+}
+void OV5645MIPI_scene_mode_OFF(void)
+{
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+	/*FRAME rate*/
+	OV5645MIPI_write_cmos_sensor(0x3A00, 0x3c);
+	OV5645MIPI_write_cmos_sensor(0x3a02, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a03, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x3a14, 0x0b);
+	OV5645MIPI_write_cmos_sensor(0x3a15, 0x88);
+	OV5645MIPI_write_cmos_sensor(0x350c, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x350d, 0x00);
+	/*AE Weight - CenterAverage*/
+	OV5645MIPI_write_cmos_sensor(0x501d, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x5688, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x5689, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568a, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568b, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568c, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568d, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568e, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568f, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+	mDELAY(100);
+	pr_info("[OV5645MIPI]exit OV5645MIPI_scene_mode_OFF function:\n ");
+}
+void OV5645MIPI_scene_mode_NIGHT(void)
+{
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+	/*FRAME rate*/
+	OV5645MIPI_write_cmos_sensor(0x3A00, 0x3c);
+	OV5645MIPI_write_cmos_sensor(0x3a02, 0x17);
+	OV5645MIPI_write_cmos_sensor(0x3a03, 0x10);
+	OV5645MIPI_write_cmos_sensor(0x3a14, 0x17);
+	OV5645MIPI_write_cmos_sensor(0x3a15, 0x10);
+	OV5645MIPI_write_cmos_sensor(0x350c, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x350d, 0x00);
+	/*AE Weight - Average*/
+	OV5645MIPI_write_cmos_sensor(0x501d, 0x00);
+	OV5645MIPI_write_cmos_sensor(0x5688, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x5689, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568a, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568b, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568c, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568d, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568e, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x568f, 0x11);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+	OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+
+	mdelay(10);
+	pr_info("[OV5645MIPI]exit OV5645MIPI_scene_mode_NIGHT function:\n ");
+}
+
+void OV5645MIPI_set_scene_mode(u16 para)
+{
+	pr_info("[OV5645MIPI] OV5645MIPI_set_scene_mode=%d\n", para);
+
+	switch (para) {
+	case SCENE_MODE_NIGHTSCENE:
+		OV5645MIPI_scene_mode_NIGHT();
+		break;
+	case SCENE_MODE_PORTRAIT:
+		OV5645MIPI_scene_mode_PORTRAIT();
+		break;
+	case SCENE_MODE_LANDSCAPE:
+		OV5645MIPI_scene_mode_LANDSCAPE();
+		break;
+	case SCENE_MODE_SUNSET:
+		OV5645MIPI_scene_mode_SUNSET();
+		break;
+	case SCENE_MODE_SPORTS:
+		OV5645MIPI_scene_mode_SPORTS();
+		break;
+	case SCENE_MODE_HDR:
+		if (1 == OV5645MIPISensor.manualAEStart) {
+			OV5645MIPI_set_AE_mode(1);
+			spin_lock(&ov5645mipi_drv_lock);
+			OV5645MIPISensor.manualAEStart = 0;
+			OV5645MIPISensor.currentExposureTime = 0;
+			OV5645MIPISensor.currentAxDGain = 0;
+			spin_unlock(&ov5645mipi_drv_lock);
+		}
+		break;
+	case SCENE_MODE_OFF:
+		pr_info("[OV5645MIPI]set SCENE_MODE_OFF :\n ");
+		OV5645MIPI_scene_mode_OFF();
+		break;
+	default:
+		pr_info("[OV5645MIPI]set default mode :\n ");
+		OV5645MIPI_scene_mode_OFF();
+		break;
+	}
+	pr_info("[OV5645MIPI]exit OV5645MIPI_set_scene_mode function:\n ");
+	return;
+}
+#endif
+enum ISO_ID {
+	AE_ISO_AUTO,
+	AE_ISO_100,
+	AE_ISO_200,
+	AE_ISO_400,
+};
+void OV5645MIPI_set_iso(u16 para)
+{
+	switch (para) {
+	case AE_ISO_100:
+	case AE_ISO_AUTO:
+		OV5645MIPI_write_cmos_sensor(0x3a18, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3a19, 0x60);
+		break;
+	case AE_ISO_200:
+		OV5645MIPI_write_cmos_sensor(0x3a18, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3a19, 0x90);
+		break;
+	case AE_ISO_400:
+		OV5645MIPI_write_cmos_sensor(0x3a18, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3a19, 0xc0);
+		break;
+	default:
+		break;
+	}
+	pr_info("[OV5645MIPI]exit OV5645MIPI_set_iso function:\n ");
+	return;
+}
+/*
+static void ov5645_set_contrast_brightness_satuation_iso_def(void)
+{
+	OV5645MIPI_set_contrast(5);
+	OV5645MIPI_set_brightness(5);
+	OV5645MIPI_set_saturation(5);
+	OV5645MIPI_set_iso(AE_ISO_AUTO);
+}
+*/
+static void OV5645_set_AE_mode(bool AE_enable)
+{
+	u8 AeTemp;
+	pr_info("[OV5645MIPI]enter OV5645MIPI_set_AE_mode function:\n ");
+	AeTemp = i2c_get_byte(g_client, 0x3503);
+	if (AE_enable == true)
+		/* turn on AEC/AGC */
+		OV5645MIPI_write_cmos_sensor(0x3503, (AeTemp&(~0x07)));
+	else
+		/* turn off AEC/AGC */
+		OV5645MIPI_write_cmos_sensor(0x3503, (AeTemp|0x07));
+
+	pr_info("[OV5645MIPI]exit OV5645MIPI_set_AE_mode function:\n ");
+}
+static void OV5645_set_AWB_mode(bool AWB_enable)
+{
+	u8 AwbTemp;
+	pr_info("[OV5645MIPI]enter OV5645MIPI_set_AWB_mode function:\n ");
+	AwbTemp = i2c_get_byte(g_client, 0x3406);
+
+	if (AWB_enable == true)
+		OV5645MIPI_write_cmos_sensor(0x3406, AwbTemp&0xFE);
+	else
+		OV5645MIPI_write_cmos_sensor(0x3406, AwbTemp|0x01);
+
+	pr_info("[OV5645MIPI]exit OV5645MIPI_set_AWB_mode function:\n ");
+}
+
+/*************************************************************************
+* FUNCTION
+*    ov5645_set_param_wb
+*
+* DESCRIPTION
+*    wb setting.
+*
+* PARAMETERS
+*    none
+*
+* RETURNS
+*    None
+*
+* GLOBALS AFFECTED
+*
+*************************************************************************/
+void ov5645_set_param_wb(struct ov5645_device *dev,
+		enum camera_wb_flip_e para)
+{
+	/* struct i2c_client *client = v4l2_get_subdevdata(&dev->sd); */
+
+	switch (para) {
+	case CAM_WB_AUTO:/* ?Զ? */
+		OV5645_set_AWB_mode(true);
+		break;
+
+	case CAM_WB_CLOUD: /* ???? */
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645_set_AWB_mode(false);
+		OV5645MIPI_write_cmos_sensor(0x3400, 0x06);
+		OV5645MIPI_write_cmos_sensor(0x3401, 0x30);
+		OV5645MIPI_write_cmos_sensor(0x3402, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3403, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3404, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3405, 0x30);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+
+		break;
+
+	case CAM_WB_DAYLIGHT: /*  */
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645_set_AWB_mode(false);
+		OV5645MIPI_write_cmos_sensor(0x3400, 0x06);
+		OV5645MIPI_write_cmos_sensor(0x3401, 0x10);
+		OV5645MIPI_write_cmos_sensor(0x3402, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3403, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3404, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3405, 0x48);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+
+		break;
+
+	case CAM_WB_INCANDESCENCE:
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645_set_AWB_mode(false);
+		OV5645MIPI_write_cmos_sensor(0x3400, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3401, 0xe0);
+		OV5645MIPI_write_cmos_sensor(0x3402, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3403, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3404, 0x05);
+		OV5645MIPI_write_cmos_sensor(0x3405, 0xa0);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+
+		break;
+
+	case CAM_WB_TUNGSTEN:
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645_set_AWB_mode(false);
+		OV5645MIPI_write_cmos_sensor(0x3400, 0x05);
+		OV5645MIPI_write_cmos_sensor(0x3401, 0x48);
+		OV5645MIPI_write_cmos_sensor(0x3402, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3403, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3404, 0x05);
+		OV5645MIPI_write_cmos_sensor(0x3405, 0xe0);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+
+		break;
+
+	case CAM_WB_FLUORESCENT:
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x03);
+		OV5645_set_AWB_mode(false);
+		OV5645MIPI_write_cmos_sensor(0x3400, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3401, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3402, 0x04);
+		OV5645MIPI_write_cmos_sensor(0x3403, 0x00);
+		OV5645MIPI_write_cmos_sensor(0x3404, 0x06);
+		OV5645MIPI_write_cmos_sensor(0x3405, 0x50);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0x13);
+		OV5645MIPI_write_cmos_sensor(0x3212, 0xa3);
+		break;
+
+	case CAM_WB_MANUAL:
+		/* TODO */
+		break;
+	default:
+		break;
+	}
+} /* ov5645_set_param_wb */
+/*************************************************************************
+* FUNCTION
+*    ov5645_set_param_exposure
+*
+* DESCRIPTION
+*    exposure setting.
+*
+* PARAMETERS
+*    none
+*
+* RETURNS
+*    None
+*
+* GLOBALS AFFECTED
+*
+*************************************************************************/
+void ov5645_set_param_exposure(struct ov5645_device *dev,
+		enum camera_exposure_e para)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+
+	switch (para) {
+		/*
+	case EXPOSURE_N4_STEP:  //??4??
+		i2c_put_byte(client,0x3a0f , 0x10);
+		i2c_put_byte(client,0x3a10 , 0x08);
+		i2c_put_byte(client,0x3a1b , 0x10);
+		i2c_put_byte(client,0x3a1e , 0x08);
+		i2c_put_byte(client,0x3a11 , 0x20);
+		i2c_put_byte(client,0x3a1f , 0x10);
+		break;
+
+	case EXPOSURE_N3_STEP:
+		i2c_put_byte(client,0x3a0f , 0x18);
+		i2c_put_byte(client,0x3a10 , 0x10);
+		i2c_put_byte(client,0x3a1b , 0x18);
+		i2c_put_byte(client,0x3a1e , 0x10);
+		i2c_put_byte(client,0x3a11 , 0x30);
+		i2c_put_byte(client,0x3a1f , 0x10);
+		break;
+	    */
+	case EXPOSURE_N2_STEP:
+		i2c_put_byte(client, 0x3a0f, 0x16);/* ; AEC in H */
+		i2c_put_byte(client, 0x3a10, 0x10);/* ; AEC in L */
+		i2c_put_byte(client, 0x3a11, 0x3c);/* ; AEC out H */
+		i2c_put_byte(client, 0x3a1b, 0x16);/* ; AEC out L */
+		i2c_put_byte(client, 0x3a1e, 0x10);/* ; control zone H */
+		i2c_put_byte(client, 0x3a1f, 0x0c);/* ; control zone L */
+		break;
+
+	case EXPOSURE_N1_STEP:
+		i2c_put_byte(client, 0x3a0f, 0x1e);/* ; AEC in H */
+		i2c_put_byte(client, 0x3a10, 0x18);/* ; AEC in L */
+		i2c_put_byte(client, 0x3a11, 0x3c);/* ; AEC out H */
+		i2c_put_byte(client, 0x3a1b, 0x1e);/* ; AEC out L */
+		i2c_put_byte(client, 0x3a1e, 0x18);/* ; control zone H */
+		i2c_put_byte(client, 0x3a1f, 0x0c);/* ; control zone L */
+		break;
+
+	case EXPOSURE_0_STEP:/* Ĭ???㵵 */
+		i2c_put_byte(client, 0x3a0f, 0x22);/* ; AEC in H */
+		i2c_put_byte(client, 0x3a10, 0x1e);/* ; AEC in L */
+		i2c_put_byte(client, 0x3a11, 0x45);/* ; AEC out H */
+		i2c_put_byte(client, 0x3a1b, 0x22);/* ; AEC out L */
+		i2c_put_byte(client, 0x3a1e, 0x1e);/* ; control zone H */
+		i2c_put_byte(client, 0x3a1f, 0x10);
+		break;
+
+	case EXPOSURE_P1_STEP:/* ??һ?? */
+		i2c_put_byte(client, 0x3a0f, 0x40);/* ; AEC in H */
+		i2c_put_byte(client, 0x3a10, 0x38);/* ; AEC in L */
+		i2c_put_byte(client, 0x3a11, 0x80);/* ; AEC out H */
+		i2c_put_byte(client, 0x3a1b, 0x40);/* ; AEC out L */
+		i2c_put_byte(client, 0x3a1e, 0x38);/* ; control zone H */
+		i2c_put_byte(client, 0x3a1f, 0x1c);/* ; control zone L */
+		break;
+
+	case EXPOSURE_P2_STEP:
+		i2c_put_byte(client, 0x3a0f, 0x50);/* ; AEC in H */
+		i2c_put_byte(client, 0x3a10, 0x48);/* ; AEC in L */
+		i2c_put_byte(client, 0x3a11, 0x90);/* ; AEC out H */
+		i2c_put_byte(client, 0x3a1b, 0x50);/* ; AEC out L */
+		i2c_put_byte(client, 0x3a1e, 0x48);/* ; control zone H */
+		i2c_put_byte(client, 0x3a1f, 0x24);/* ; control zone L */
+		break;
+	/*
+	case EXPOSURE_P3_STEP:
+		i2c_put_byte(client,0x3a0f , 0x58);
+		i2c_put_byte(client,0x3a10 , 0x50);
+		i2c_put_byte(client,0x3a11 , 0x91);
+		i2c_put_byte(client,0x3a1b , 0x58);
+		i2c_put_byte(client,0x3a1e , 0x50);
+		i2c_put_byte(client,0x3a1f , 0x20);
+		break;
+
+	case EXPOSURE_P4_STEP:
+		i2c_put_byte(client,0x3a0f , 0x60);
+		i2c_put_byte(client,0x3a10 , 0x58);
+		i2c_put_byte(client,0x3a11 , 0xa0);
+		i2c_put_byte(client,0x3a1b , 0x60);
+		i2c_put_byte(client,0x3a1e , 0x58);
+		i2c_put_byte(client,0x3a1f , 0x20);
+		break;
+	*/
+	default:
+		i2c_put_byte(client, 0x3a0f, 0x22);
+		i2c_put_byte(client, 0x3a10, 0x1e);
+		i2c_put_byte(client, 0x3a11, 0x45);
+		i2c_put_byte(client, 0x3a1b, 0x22);
+		i2c_put_byte(client, 0x3a1e, 0x1e);
+		i2c_put_byte(client, 0x3a1f, 0x10);
+		break;
+	}
+} /* ov5645_set_param_exposure */
+/*************************************************************************
+* FUNCTION
+*    ov5645_set_param_effect
+*
+* DESCRIPTION
+*    effect setting.
+*
+* PARAMETERS
+*    none
+*
+* RETURNS
+*    None
+*
+* GLOBALS AFFECTED
+*
+*************************************************************************/
+void ov5645_set_param_effect(struct ov5645_device *dev,
+		enum camera_effect_flip_e para)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+
+	switch (para) {
+	case CAM_EFFECT_ENC_NORMAL:
+		i2c_put_byte(client, 0x5580, 0x06);
+		i2c_put_byte(client, 0x5583, 0x38); /* 0x40 */
+		i2c_put_byte(client, 0x5584, 0x20);
+		break;
+
+	case CAM_EFFECT_ENC_GRAYSCALE:
+		break;
+
+	case CAM_EFFECT_ENC_SEPIA:
+		i2c_put_byte(client, 0x5580, 0x1e);
+		i2c_put_byte(client, 0x5583, 0x40);
+		i2c_put_byte(client, 0x5584, 0xa0);
+		break;
+
+	case CAM_EFFECT_ENC_SEPIAGREEN:
+		i2c_put_byte(client, 0x5580, 0x1e);
+		i2c_put_byte(client, 0x5583, 0x60);
+		i2c_put_byte(client, 0x5584, 0x60);
+		break;
+
+	case CAM_EFFECT_ENC_SEPIABLUE:
+		i2c_put_byte(client, 0x5580, 0x1e);
+		i2c_put_byte(client, 0x5583, 0xa0);
+		i2c_put_byte(client, 0x5584, 0x40);
+		break;
+
+	case CAM_EFFECT_ENC_COLORINV:
+		i2c_put_byte(client, 0x5001, 0x83);
+		i2c_put_byte(client, 0x5580, 0x40);
+		break;
+
+	default:
+		break;
+	}
+} /* ov5645_set_param_effect */
+
+/*************************************************************************
+* FUNCTION
+*	ov5645_night_mode
+*
+* DESCRIPTION
+*    This function night mode of ov5645.
+*
+* PARAMETERS
+*    none
+*
+* RETURNS
+*    None
+*
+* GLOBALS AFFECTED
+*
+*************************************************************************/
+static void ov5645_set_param_banding(struct ov5645_device *dev,
+		enum camera_banding_flip_e banding)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	/* unsigned char buf[4]; */
+	switch (banding) {
+	case CAM_BANDING_60HZ:
+		pr_info("set banding 60Hz\n");
+		i2c_put_byte(client, 0x3c00, 0x00);
+		i2c_put_byte(client, 0x3c01, 0x80);
+		break;
+	case CAM_BANDING_50HZ:
+		pr_info("set banding 50Hz\n");
+		i2c_put_byte(client, 0x3c00, 0x04);
+		i2c_put_byte(client, 0x3c01, 0x80);
+		break;
+	default:
+		break;
+	}
+}
+
+static int ov5645_AutoFocus(struct ov5645_device *dev, int focus_mode)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	int ret = 0;
+	/* int i = 0; */
+
+	switch (focus_mode) {
+	case CAM_FOCUS_MODE_AUTO:
+		i2c_put_byte(client, 0x3023 , 0x1);
+		i2c_put_byte(client, 0x3022 , 0x3); /* start to auto focus */
+		bDoingAutoFocusMode = true;
+		#if 0
+		while (i2c_get_byte(client, 0x3023) && i < 40) {
+			/*wait for the auto focus to be done */
+			/* printk("waiting for focus ready\n"); */
+			i++;
+			msleep(10);
+		}
+
+		if (i2c_get_byte(client, 0x3028) == 0)
+			ret = -1;
+		else {
+			msleep(10);
+			i2c_put_byte(client, 0x3022 , 0x6); /* pause */
+			i2c_put_byte(client, 0x3023 , 0x1);
+		}
+		#endif
+		pr_info("auto mode start\n");
+		break;
+
+	case CAM_FOCUS_MODE_CONTI_VID:
+	case CAM_FOCUS_MODE_CONTI_PIC:
+		i2c_put_byte(client, 0x3023 , 0x1);
+		i2c_put_byte(client, 0x3022 , 0x4); /* start to auto focus */
+		/*while(i2c_get_byte(client, 0x3023) == 0x1) {
+			msleep(10);
+		}*/
+		pr_info("start continous focus\n");
+		break;
+
+	case CAM_FOCUS_MODE_RELEASE:
+	case CAM_FOCUS_MODE_FIXED:
+	default:
+		i2c_put_byte(client, 0x3023 , 0x1);
+		i2c_put_byte(client, 0x3022 , 0x6);
+		pr_info("release focus to infinit\n");
+		break;
+	}
+	return ret;
+
+}    /* ov5645_AutoFocus */
+
+static int ov5645_FlashCtrl(struct ov5645_device *dev, int flash_mode)
+{
+	/* struct i2c_client *client = v4l2_get_subdevdata(&dev->sd); */
+	int ret = 0;
+
+	switch (flash_mode) {
+	case FLASHLIGHT_ON:
+	case FLASHLIGHT_AUTO:
+		if (dev->cam_info.torch_support)
+			aml_cam_torch(&dev->cam_info, 1);
+		aml_cam_flash(&dev->cam_info, 1);
+		break;
+	case FLASHLIGHT_TORCH:
+		if (dev->cam_info.torch_support) {
+			aml_cam_torch(&dev->cam_info, 1);
+			aml_cam_flash(&dev->cam_info, 0);
+		} else
+			aml_cam_torch(&dev->cam_info, 1);
+		break;
+	case FLASHLIGHT_OFF:
+		aml_cam_flash(&dev->cam_info, 0);
+		if (dev->cam_info.torch_support)
+			aml_cam_torch(&dev->cam_info, 0);
+		break;
+	default:
+		pr_info("this flash mode not support yet\n");
+		break;
+	}
+	return ret;
+
+}    /* ov5645_FlashCtrl */
+
+static resolution_size_t get_size_type(int width, int height)
+{
+	resolution_size_t rv = SIZE_NULL;
+	if (width * height >= 2500 * 1900)
+		rv = SIZE_2592X1944;
+	else if (width * height >= 2000 * 1500)
+		rv = SIZE_2048X1536;
+	else if (width * height >= 1920 * 1080)
+		rv = SIZE_1920X1080;
+	else if (width * height >= 1600 * 1200)
+		rv = SIZE_1600X1200;
+	else if (width * height >= 1280 * 960)
+		rv = SIZE_1280X960;
+	else if (width * height >= 1280 * 720)
+		rv = SIZE_1280X720;
+	else if (width * height >= 1024 * 768)
+		rv = SIZE_1024X768;
+	else if (width * height >= 800 * 600)
+		rv = SIZE_800X600;
+	else if (width * height >= 600 * 400)
+		rv = SIZE_640X480;
+	else if (width * height >= 352 * 288)
+		rv = SIZE_352X288;
+	else if (width * height >= 300 * 200)
+		rv = SIZE_320X240;
+	else if (width * height >= 170 * 140)
+		rv = SIZE_176X144;
+	return rv;
+}
+
+static int set_flip(struct ov5645_device *dev)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	unsigned char temp;
+	temp = i2c_get_byte(client, 0x3821);
+	temp &= 0xf9;
+	temp |= dev->cam_info.m_flip << 1 | dev->cam_info.m_flip << 2;
+	if ((i2c_put_byte(client, 0x3821, temp)) < 0) {
+		pr_info("fail in setting sensor orientation\n");
+		return -1;
+	}
+	temp = i2c_get_byte(client, 0x3820);
+	temp &= 0xf9;
+	temp |= dev->cam_info.v_flip << 1 | dev->cam_info.v_flip << 2;
+	if ((i2c_put_byte(client, 0x3820, temp)) < 0) {
+		pr_info("fail in setting sensor orientation\n");
+		return -1;
+	}
+
+	return 0;
+}
+
+static struct resolution_param *get_resolution_param(struct ov5645_device *dev,
+	       int is_capture, int width, int height)
+{
+	int i = 0;
+	int arry_size = 0;
+	struct resolution_param *tmp_resolution_param = NULL;
+	resolution_size_t res_type = SIZE_NULL;
+	res_type = get_size_type(width, height);
+	if (res_type == SIZE_NULL)
+		return NULL;
+	if (is_capture) {
+		tmp_resolution_param = capture_resolution_array;
+		arry_size = sizeof(capture_resolution_array);
+	} else {
+		tmp_resolution_param = prev_resolution_array;
+		arry_size = sizeof(prev_resolution_array);
+		ov5645_frmintervals_active.denominator = 23;
+		ov5645_frmintervals_active.numerator = 1;
+	}
+
+	for (i = 0; i < arry_size; i++) {
+		if (tmp_resolution_param[i].size_type == res_type) {
+			ov5645_frmintervals_active.denominator =
+				tmp_resolution_param[i].active_fps;
+			ov5645_frmintervals_active.numerator = 1;
+			return &tmp_resolution_param[i];
+		}
+	}
+	return NULL;
+}
+
+static int set_resolution_param(struct ov5645_device *dev,
+		struct resolution_param *res_param)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	int i = 0;
+	/* int rc = -1; */
+	if (!res_param->reg_script) {
+		pr_info("error, resolution reg script is NULL\n");
+		return -1;
+	}
+	while (1) {
+		if (res_param->reg_script[i].val == 0xff &&
+				res_param->reg_script[i].addr == 0xffff) {
+			pr_info("setting resolutin param complete\n");
+			break;
+		}
+		if ((i2c_put_byte(client, res_param->reg_script[i].addr,
+					res_param->reg_script[i].val)) < 0) {
+			pr_info("fail in setting resolution param. i=%d\n", i);
+			break;
+		} else {
+		}
+		i++;
+	}
+	dev->cur_resolution_param = res_param;
+	set_flip(dev);
+
+	return 0;
+}
+
+static int set_focus_zone(struct ov5645_device *dev, int value)
+{
+	int xc, yc;
+	/* struct i2c_client *client = v4l2_get_subdevdata(&dev->sd); */
+	int retry_count = 10;
+	int ret = -1;
+
+	xc = ((value >> 16) & 0xffff) * 80 / 2000;
+	yc = (value & 0xffff) * 60 / 2000;
+	pr_info("xc = %d, yc = %d\n", xc, yc);
+	/*
+	i2c_put_byte(client, CMD_PARA0, xc);
+	i2c_put_byte(client, CMD_PARA1, yc);
+	i2c_put_byte(client, CMD_ACK, 0x01);
+	i2c_put_byte(client, CMD_MAIN, 0x81);
+	do {
+		msleep(5);
+		pr_info("waiting for focus zone to be set\n");
+	} while (i2c_get_byte(client, CMD_ACK) && retry_count--);
+	*/
+	if (retry_count)
+		ret = 0;
+	return ret;
+}
+
+unsigned char v4l_2_ov5645(int val)
+{
+	int ret = val/0x20;
+	if (ret < 4)
+		return ret*0x20+0x80;
+	else if (ret < 8)
+		return ret*0x20+0x20;
+	else
+		return 0;
+}
+
+static int convert_canvas_index(unsigned int v4l2_format,
+		unsigned int start_canvas)
+{
+	int canvas = start_canvas;
+
+	switch (v4l2_format) {
+	case V4L2_PIX_FMT_RGB565X:
+	case V4L2_PIX_FMT_VYUY:
+		canvas = start_canvas;
+		break;
+	case V4L2_PIX_FMT_YUV444:
+	case V4L2_PIX_FMT_BGR24:
+	case V4L2_PIX_FMT_RGB24:
+		canvas = start_canvas;
+		break;
+	case V4L2_PIX_FMT_NV12:
+	case V4L2_PIX_FMT_NV21:
+		canvas = start_canvas | ((start_canvas+1)<<8);
+		break;
+	case V4L2_PIX_FMT_YVU420:
+	case V4L2_PIX_FMT_YUV420:
+		if (V4L2_PIX_FMT_YUV420 == v4l2_format) {
+			canvas = start_canvas|((start_canvas+1)<<8)
+				|((start_canvas+2)<<16);
+		} else{
+			canvas = start_canvas|((start_canvas+2)<<8)
+				|((start_canvas+1)<<16);
+		}
+		break;
+	default:
+		break;
+	}
+	return canvas;
+}
+
+static int ov5645_setting(struct ov5645_device *dev, int PROP_ID, int value)
+{
+	int ret = 0;
+	/* unsigned char cur_val; */
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	switch (PROP_ID)  {
+	case V4L2_CID_BRIGHTNESS:
+		mutex_lock(&firmware_mutex);
+		pr_info("setting brightned:%d\n", v4l_2_ov5645(value));
+		/* OV5645MIPI_set_brightness(); */
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_CONTRAST:
+		mutex_lock(&firmware_mutex);
+		ret = i2c_put_byte(client, 0x0200, value);
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_SATURATION:
+		mutex_lock(&firmware_mutex);
+		ret = i2c_put_byte(client, 0x0202, value);
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_HFLIP:    /* set flip on H. */
+		value = value & 0x3;
+		if (ov5645_qctrl[2].default_value != value) {
+			ov5645_qctrl[2].default_value = value;
+			pr_info(" set camera  h filp =%d.\n", value);
+		}
+		break;
+	case V4L2_CID_VFLIP:    /* set flip on V. */
+		break;
+	case V4L2_CID_DO_WHITE_BALANCE:
+		mutex_lock(&firmware_mutex);
+		if (ov5645_qctrl[4].default_value != value) {
+			ov5645_qctrl[4].default_value = value;
+			ov5645_set_param_wb(dev, value);
+			pr_info(" set camera  white_balance=%d.\n", value);
+		}
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_EXPOSURE:
+		mutex_lock(&firmware_mutex);
+		if (ov5645_qctrl[5].default_value != value) {
+			ov5645_qctrl[5].default_value = value;
+			ov5645_set_param_exposure(dev, value);
+			pr_info(" set camera  exposure=%d.\n ", value);
+		}
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_COLORFX:
+		mutex_lock(&firmware_mutex);
+		if (ov5645_qctrl[6].default_value != value) {
+			ov5645_qctrl[6].default_value = value;
+			ov5645_set_param_effect(dev, value);
+			pr_info(" set camera  effect=%d.\n ", value);
+		}
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_WHITENESS:
+		mutex_lock(&firmware_mutex);
+		if (ov5645_qctrl[7].default_value != value) {
+			ov5645_qctrl[7].default_value = value;
+			ov5645_set_param_banding(dev, value);
+			pr_info(" set camera  banding=%d.\n ", value);
+		}
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_FOCUS_AUTO:
+		pr_info("ov5645_setting, V4L2_CID_FOCUS_AUTO\n");
+		mutex_lock(&firmware_mutex);
+		if (ov5645_have_opened) {
+			if (dev->firmware_ready)
+				ret = ov5645_AutoFocus(dev, value);
+			else if (value == CAM_FOCUS_MODE_CONTI_VID ||
+					value == CAM_FOCUS_MODE_CONTI_PIC)
+				start_focus_mode = value;
+			else
+				ret = -1;
+		}
+		mutex_unlock(&firmware_mutex);
+		break;
+	case V4L2_CID_BACKLIGHT_COMPENSATION:
+		if (dev->cam_info.flash_support)
+			ret = ov5645_FlashCtrl(dev, value);
+		else
+			ret = -1;
+		break;
+	case V4L2_CID_ZOOM_ABSOLUTE:
+		if (ov5645_qctrl[10].default_value != value)
+			ov5645_qctrl[10].default_value = value;
+
+		break;
+	case V4L2_CID_ROTATE:
+		if (ov5645_qctrl[11].default_value != value) {
+			ov5645_qctrl[11].default_value = value;
+			pr_info(" set camera  rotate =%d.\n ", value);
+		}
+		break;
+	case V4L2_CID_FOCUS_ABSOLUTE:
+		if (ov5645_qctrl[12].default_value != value) {
+			ov5645_qctrl[12].default_value = value;
+			pr_info(" set camera  focus zone =%d.\n ", value);
+			set_focus_zone(dev, value);
+		}
+		break;
+	default:
+		ret =  -1;
+		break;
+	}
+	return ret;
+
+}
+
+static void power_down_ov5645(struct ov5645_device *dev)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	i2c_put_byte(client, 0x3022, 0x8);
+	i2c_put_byte(client, 0x3008, 0x42);
+}
+
+/* ------------------------------------------------------------------
+	DMA and thread functions
+   ------------------------------------------------------------------*/
+
+#define TSTAMP_MIN_Y	24
+#define TSTAMP_MAX_Y	(TSTAMP_MIN_Y + 15)
+#define TSTAMP_INPUT_X	10
+#define TSTAMP_MIN_X	(54 + TSTAMP_INPUT_X)
+
+static void ov5645_fillbuff(struct ov5645_fh *fh, struct ov5645_buffer *buf)
+{
+	struct ov5645_device *dev = fh->dev;
+	/* void *vbuf = videobuf_to_vmalloc(&buf->vb); */
+	void *vbuf = (void *)videobuf_to_res(&buf->vb);
+	vm_output_para_t para = {0};
+	dprintk(dev, 1, "%s\n", __func__);
+	if (!vbuf)
+		return;
+	/*  0x18221223 indicate the memory type is MAGIC_VMAL_MEM*/
+	if (buf->canvas_id == 0)
+		buf->canvas_id = convert_canvas_index(fh->fmt->fourcc,
+				ov5645_RES0_CANVAS_INDEX+buf->vb.i*3);
+	para.mirror = ov5645_qctrl[2].default_value&3;
+	para.v4l2_format = fh->fmt->fourcc;
+	para.v4l2_memory = MAGIC_RE_MEM;/* 0x18221223; */
+	para.zoom = ov5645_qctrl[10].default_value;
+	para.angle = ov5645_qctrl[11].default_value;
+	para.vaddr = (unsigned)vbuf;
+	para.ext_canvas = buf->canvas_id;
+	para.width = buf->vb.width;
+	para.height = (buf->vb.height == 1080)?1088:buf->vb.height;
+	vm_fill_buffer(&buf->vb, &para);
+	buf->vb.state = VIDEOBUF_DONE;
+}
+
+static void ov5645_thread_tick(struct ov5645_fh *fh)
+{
+	struct ov5645_buffer *buf;
+	struct ov5645_device *dev = fh->dev;
+	struct ov5645_dmaqueue *dma_q = &dev->vidq;
+
+	unsigned long flags = 0;
+
+	dprintk(dev, 1, "Thread tick\n");
+	if (!fh->stream_on) {
+		dprintk(dev, 1, "sensor doesn't stream on\n");
+		return;
+	}
+
+	spin_lock_irqsave(&dev->slock, flags);
+	if (list_empty(&dma_q->active)) {
+		dprintk(dev, 1, "No active queue to serve\n");
+		goto unlock;
+	}
+
+	buf = list_entry(dma_q->active.next,
+			struct ov5645_buffer, vb.queue);
+	dprintk(dev, 1, "%s\n", __func__);
+	dprintk(dev, 1, "list entry get buf is %x\n", (unsigned)buf);
+
+
+	if (!(fh->f_flags & O_NONBLOCK)) {
+		/* Nobody is waiting on this buffer, return */
+		if (!waitqueue_active(&buf->vb.done))
+			goto unlock;
+	}
+	buf->vb.state = VIDEOBUF_ACTIVE;
+
+	list_del(&buf->vb.queue);
+
+	do_gettimeofday(&buf->vb.ts);
+
+	/* Fill buffer */
+	spin_unlock_irqrestore(&dev->slock, flags);
+	ov5645_fillbuff(fh, buf);
+	dprintk(dev, 1, "filled buffer %p\n", buf);
+
+	wake_up(&buf->vb.done);
+	dprintk(dev, 2, "[%p/%d] wakeup\n", buf, buf->vb. i);
+	return;
+unlock:
+	spin_unlock_irqrestore(&dev->slock, flags);
+	return;
+}
+
+static void ov5645_sleep(struct ov5645_fh *fh)
+{
+	struct ov5645_device *dev = fh->dev;
+	struct ov5645_dmaqueue *dma_q = &dev->vidq;
+
+	/* int timeout; */
+	DECLARE_WAITQUEUE(wait, current);
+
+	dprintk(dev, 1, "%s dma_q=0x%08lx\n", __func__, (unsigned long)dma_q);
+
+	add_wait_queue(&dma_q->wq, &wait);
+	if (kthread_should_stop())
+		goto stop_task;
+
+	/* Calculate time to wake up */
+	/* timeout = msecs_to_jiffies(1); */
+
+	ov5645_thread_tick(fh);
+
+	schedule_timeout_interruptible(1);
+
+stop_task:
+	remove_wait_queue(&dma_q->wq, &wait);
+	try_to_freeze();
+}
+
+static int ov5645_thread(void *data)
+{
+	struct ov5645_fh  *fh = data;
+	struct ov5645_device *dev = fh->dev;
+
+	dprintk(dev, 1, "thread started\n");
+
+	set_freezable();
+
+	for (;;) {
+		ov5645_sleep(fh);
+
+		if (kthread_should_stop())
+			break;
+	}
+	dprintk(dev, 1, "thread: exit\n");
+	return 0;
+}
+
+static int ov5645_start_thread(struct ov5645_fh *fh)
+{
+	struct ov5645_device *dev = fh->dev;
+	struct ov5645_dmaqueue *dma_q = &dev->vidq;
+
+	dma_q->frame = 0;
+	dma_q->ini_jiffies = jiffies;
+
+	dprintk(dev, 1, "%s\n", __func__);
+
+	dma_q->kthread = kthread_run(ov5645_thread, fh, "ov5645");
+
+	if (IS_ERR(dma_q->kthread)) {
+		v4l2_err(&dev->v4l2_dev, "kernel_thread() failed\n");
+		return PTR_ERR(dma_q->kthread);
+	}
+	/* Wakes thread */
+	wake_up_interruptible(&dma_q->wq);
+
+	dprintk(dev, 1, "returning from %s\n", __func__);
+	return 0;
+}
+
+static void ov5645_stop_thread(struct ov5645_dmaqueue  *dma_q)
+{
+	struct ov5645_device *dev = container_of(dma_q,
+			struct ov5645_device, vidq);
+
+	dprintk(dev, 1, "%s\n", __func__);
+	/* shutdown control thread */
+	if (dma_q->kthread) {
+		kthread_stop(dma_q->kthread);
+		dma_q->kthread = NULL;
+	}
+}
+
+/* ------------------------------------------------------------------
+	Videobuf operations
+   ------------------------------------------------------------------*/
+static int buffer_setup(struct videobuf_queue *vq,
+		unsigned int *count, unsigned int *size)
+{
+	struct videobuf_res_privdata *res = vq->priv_data;
+	struct ov5645_fh *fh  = container_of(res, struct ov5645_fh, res);
+	struct ov5645_device *dev  = fh->dev;
+	/* int bytes = fh->fmt->depth >> 3 ; */
+	int height = fh->height;
+	if (height == 1080)
+		height = 1088;
+	*size = (fh->width*height*fh->fmt->depth)>>3;
+	if (0 == *count)
+		*count = 32;
+
+	while (*size * *count > vid_limit * 1024 * 1024)
+		(*count)--;
+
+	dprintk(dev, 1, "%s, count=%d, size=%d\n", __func__,
+			*count, *size);
+
+	return 0;
+}
+
+static void free_buffer(struct videobuf_queue *vq, struct ov5645_buffer *buf)
+{
+	struct videobuf_res_privdata *res = vq->priv_data;
+	struct ov5645_fh *fh  = container_of(res, struct ov5645_fh, res);
+	struct ov5645_device *dev  = fh->dev;
+
+	dprintk(dev, 1, "%s, state: %i\n", __func__, buf->vb.state);
+	videobuf_waiton(vq, &buf->vb, 0, 0);
+
+	if (in_interrupt())
+		BUG();
+
+	videobuf_res_free(vq, &buf->vb);
+	dprintk(dev, 1, "free_buffer: freed\n");
+	buf->vb.state = VIDEOBUF_NEEDS_INIT;
+}
+
+#define norm_maxw() 3000
+#define norm_maxh() 3000
+static int buffer_prepare(struct videobuf_queue *vq,
+		struct videobuf_buffer *vb, enum v4l2_field field)
+{
+	struct videobuf_res_privdata *res = vq->priv_data;
+	struct ov5645_fh *fh  = container_of(res, struct ov5645_fh, res);
+	struct ov5645_device    *dev = fh->dev;
+	struct ov5645_buffer *buf = container_of(vb, struct ov5645_buffer, vb);
+	int rc;
+	/* int bytes = fh->fmt->depth >> 3 ; */
+	dprintk(dev, 1, "%s, field=%d\n", __func__, field);
+
+	BUG_ON(NULL == fh->fmt);
+
+	if (fh->width  < 48 || fh->width  > norm_maxw() ||
+			fh->height < 32 || fh->height > norm_maxh())
+		return -EINVAL;
+
+	buf->vb.size = (fh->width*fh->height*fh->fmt->depth)>>3;
+	if (0 != buf->vb.baddr  &&  buf->vb.bsize < buf->vb.size)
+		return -EINVAL;
+
+	/* These properties only change when queue is idle, see s_fmt */
+	buf->fmt       = fh->fmt;
+	buf->vb.width  = fh->width;
+	buf->vb.height = fh->height;
+	buf->vb.field  = field;
+
+	/* precalculate_bars(fh); */
+
+	if (VIDEOBUF_NEEDS_INIT == buf->vb.state) {
+		rc = videobuf_iolock(vq, &buf->vb, NULL);
+		if (rc < 0)
+			goto fail;
+	}
+
+	buf->vb.state = VIDEOBUF_PREPARED;
+
+	return 0;
+
+fail:
+	free_buffer(vq, buf);
+	return rc;
+}
+
+static void
+buffer_queue(struct videobuf_queue *vq, struct videobuf_buffer *vb)
+{
+	struct ov5645_buffer *buf = container_of(vb, struct ov5645_buffer, vb);
+	struct videobuf_res_privdata *res = vq->priv_data;
+	struct ov5645_fh *fh  = container_of(res, struct ov5645_fh, res);
+	struct ov5645_device       *dev  = fh->dev;
+	struct ov5645_dmaqueue *vidq = &dev->vidq;
+
+	dprintk(dev, 1, "%s\n", __func__);
+	buf->vb.state = VIDEOBUF_QUEUED;
+	list_add_tail(&buf->vb.queue, &vidq->active);
+}
+
+static void buffer_release(struct videobuf_queue *vq,
+	       struct videobuf_buffer *vb)
+{
+	struct ov5645_buffer *buf = container_of(vb, struct ov5645_buffer, vb);
+	struct videobuf_res_privdata *res = vq->priv_data;
+	struct ov5645_fh *fh  = container_of(res, struct ov5645_fh, res);
+	struct ov5645_device *dev = (struct ov5645_device *)fh->dev;
+
+	dprintk(dev, 1, "%s\n", __func__);
+
+	free_buffer(vq, buf);
+}
+
+static struct videobuf_queue_ops ov5645_video_qops = {
+	.buf_setup      = buffer_setup,
+	.buf_prepare    = buffer_prepare,
+	.buf_queue      = buffer_queue,
+	.buf_release    = buffer_release,
+};
+
+/* ------------------------------------------------------------------
+	IOCTL vidioc handling
+   ------------------------------------------------------------------*/
+static int vidioc_querycap(struct file *file, void  *priv,
+			struct v4l2_capability *cap)
+{
+	struct ov5645_fh  *fh  = priv;
+	struct ov5645_device *dev = fh->dev;
+
+	strcpy(cap->driver, "ov5645");
+	strcpy(cap->card, "ov5645.canvas");
+	strlcpy(cap->bus_info, dev->v4l2_dev.name, sizeof(cap->bus_info));
+	cap->version = ov5645_CAMERA_VERSION;
+	cap->capabilities =	V4L2_CAP_VIDEO_CAPTURE |
+				V4L2_CAP_STREAMING     |
+				V4L2_CAP_READWRITE;
+	return 0;
+}
+
+static int vidioc_enum_fmt_vid_cap(struct file *file, void  *priv,
+			struct v4l2_fmtdesc *f)
+{
+	struct ov5645_fmt *fmt;
+
+	if (f->index >= ARRAY_SIZE(formats))
+		return -EINVAL;
+
+	fmt = &formats[f->index];
+
+	strlcpy(f->description, fmt->name, sizeof(f->description));
+	f->pixelformat = fmt->fourcc;
+	return 0;
+}
+
+static int vidioc_g_fmt_vid_cap(struct file *file, void *priv,
+			struct v4l2_format *f)
+{
+	struct ov5645_fh *fh = priv;
+
+	pr_info("vidioc_g_fmt_vid_cap...fh->width =%d,fh->height=%d\n",
+			fh->width, fh->height);
+	f->fmt.pix.width        = fh->width;
+	f->fmt.pix.height       = fh->height;
+	f->fmt.pix.field        = fh->vb_vidq.field;
+	f->fmt.pix.pixelformat  = fh->fmt->fourcc;
+	f->fmt.pix.bytesperline =
+		(f->fmt.pix.width * fh->fmt->depth) >> 3;
+	f->fmt.pix.sizeimage =
+	f->fmt.pix.height * f->fmt.pix.bytesperline;
+
+	return 0;
+}
+
+static int vidioc_enum_frameintervals(struct file *file, void *priv,
+					struct v4l2_frmivalenum *fival)
+{
+	unsigned int k;
+
+	if (fival->index > ARRAY_SIZE(ov5645_frmivalenum))
+		return -EINVAL;
+
+	for (k = 0; k < ARRAY_SIZE(ov5645_frmivalenum); k++) {
+		if ((fival->index == ov5645_frmivalenum[k].index) &&
+			(fival->pixel_format ==
+				ov5645_frmivalenum[k].pixel_format) &&
+			(fival->width ==
+				ov5645_frmivalenum[k].width) &&
+			(fival->height == ov5645_frmivalenum[k].height)) {
+			memcpy(fival, &ov5645_frmivalenum[k],
+					sizeof(struct v4l2_frmivalenum));
+			return 0;
+		}
+	}
+
+	return -EINVAL;
+}
+
+static int vidioc_try_fmt_vid_cap(struct file *file, void *priv,
+		struct v4l2_format *f)
+{
+	struct ov5645_fh  *fh  = priv;
+	struct ov5645_device *dev = fh->dev;
+	struct ov5645_fmt *fmt;
+	enum v4l2_field field;
+	unsigned int maxw, maxh;
+
+	fmt = get_format(f);
+	if (!fmt) {
+		dprintk(dev, 1, "Fourcc format (0x%08x) invalid.\n",
+				f->fmt.pix.pixelformat);
+		return -EINVAL;
+	}
+
+	field = f->fmt.pix.field;
+
+	if (field == V4L2_FIELD_ANY) {
+		field = V4L2_FIELD_INTERLACED;
+	} else if (V4L2_FIELD_INTERLACED != field) {
+		dprintk(dev, 1, "Field type invalid.\n");
+		return -EINVAL;
+	}
+
+	maxw  = norm_maxw();
+	maxh  = norm_maxh();
+
+	f->fmt.pix.field = field;
+	v4l_bound_align_image(&f->fmt.pix.width, 48, maxw, 2,
+		  &f->fmt.pix.height, 32, maxh, 0, 0);
+	f->fmt.pix.bytesperline =
+		(f->fmt.pix.width * fmt->depth) >> 3;
+	f->fmt.pix.sizeimage =
+		f->fmt.pix.height * f->fmt.pix.bytesperline;
+
+	return 0;
+}
+
+static struct resolution_param *prev_res;
+
+/*FIXME: This seems to be generic enough to be at videodev2 */
+static int vidioc_s_fmt_vid_cap(struct file *file, void *priv,
+			struct v4l2_format *f)
+{
+	struct ov5645_fh *fh = priv;
+	struct videobuf_queue *q = &fh->vb_vidq;
+	struct ov5645_device *dev = fh->dev;
+	struct resolution_param *res_param = NULL;
+	int ret = 0;
+	/* struct i2c_client *client = v4l2_get_subdevdata(&dev->sd); */
+	int cap_fps, pre_fps;
+	u32 shutter = 0;
+	/* u32 extshutter = 0; */
+	u32 color_r_gain = 0;
+	u32 color_b_gain = 0;
+	u32 color_g_gain = 0;
+	/* u32 readval = 0; */
+
+	f->fmt.pix.width = (f->fmt.pix.width + (CANVAS_WIDTH_ALIGN-1)) &
+		(~(CANVAS_WIDTH_ALIGN-1));
+	if ((f->fmt.pix.pixelformat == V4L2_PIX_FMT_YVU420) ||
+			(f->fmt.pix.pixelformat == V4L2_PIX_FMT_YUV420)) {
+		f->fmt.pix.width =
+			(f->fmt.pix.width + (CANVAS_WIDTH_ALIGN*2-1))
+			& (~(CANVAS_WIDTH_ALIGN*2-1));
+	}
+	ret = vidioc_try_fmt_vid_cap(file, fh, f);
+	if (ret < 0)
+		return ret;
+
+	mutex_lock(&q->vb_lock);
+
+	if (videobuf_queue_is_busy(&fh->vb_vidq)) {
+		dprintk(fh->dev, 1, "%s queue busy\n", __func__);
+		ret = -EBUSY;
+		goto out;
+	}
+	ret = -EINVAL;
+
+	fh->fmt           = get_format(f);
+	fh->width         = f->fmt.pix.width;
+	fh->height        = f->fmt.pix.height;
+	fh->vb_vidq.field = f->fmt.pix.field;
+	fh->type          = f->type;
+	pr_info("system aquire ...fh->height=%d, fh->width= %d\n",
+			fh->height, fh->width);
+	if (f->fmt.pix.pixelformat == V4L2_PIX_FMT_RGB24) {
+		res_param = get_resolution_param(dev, 1, fh->width, fh->height);
+		if (!res_param) {
+			pr_info("error,capture resolution param not get\n");
+			goto out;
+		}
+
+		if (dev->cur_resolution_param->active_frmsize.width ==
+				res_param->active_frmsize.width &&
+			dev->cur_resolution_param->active_frmsize.height ==
+			res_param->active_frmsize.height) {
+			pr_info("cur_resolution is same as willSetting\n");
+			ret = 0;
+			goto out;
+		}
+
+#if 0
+		Get_preview_exposure_gain(dev);
+#else
+		/* OV provided */
+		shutter = OV5645MIPI_Read_Shutter();
+		/* OV5645_set_AE_mode(false); */
+		/* OV5645_set_AWB_mode(false); */
+#endif
+		color_r_gain = ((i2c_get_byte(g_client, 0x3401)&0xFF)+
+				((i2c_get_byte(g_client, 0x3400)&0xFF)*256));
+		color_b_gain = ((i2c_get_byte(g_client, 0x3405)&0xFF)+
+				((i2c_get_byte(g_client, 0x3404)&0xFF)*256));
+		color_g_gain = ((i2c_get_byte(g_client, 0x3403)&0xFF)+
+				((i2c_get_byte(g_client, 0x3402)&0xFF)*256));
+
+		set_resolution_param(dev, res_param);
+		OV5645_WB_calibattion(color_r_gain, color_g_gain,
+				color_b_gain, 1);
+		shutter = shutter * 4;
+		OV5645MIPI_Write_Shutter(shutter);
+
+		if (prev_res && (prev_res->size_type == SIZE_1280X960
+				|| prev_res->size_type == SIZE_1024X768))
+			pre_fps = 1500;
+		else if (prev_res && prev_res->size_type == SIZE_1280X720)
+			pre_fps = 3000;
+		else
+			pre_fps = 1500;
+
+		cap_fps = 500;
+		/* cal_exposure(dev, pre_fps, cap_fps); */
+
+		pr_info("pre_fps=%d,cap_fps=%d\n", pre_fps, cap_fps);
+	} else {
+		pr_info("preview resolution need to set\n");
+		res_param = get_resolution_param(dev, 0,
+				fh->width, fh->height);
+		if (!res_param) {
+			pr_info("error,preview resolution param not get\n");
+			goto out;
+		}
+		set_resolution_param(dev, res_param);
+#if 1
+		/* pre_default_exposure(); */
+		OV5645_set_AE_mode(true);
+		OV5645_set_AWB_mode(true);
+#endif
+		prev_res = res_param;
+	}
+
+	ov5645_open_mipi_stream();
+
+	ret = 0;
+out:
+	mutex_unlock(&q->vb_lock);
+
+	return ret;
+}
+
+static int vidioc_g_parm(struct file *file, void *priv,
+				struct v4l2_streamparm *parms)
+{
+	struct ov5645_fh *fh = priv;
+	struct ov5645_device *dev = fh->dev;
+	struct v4l2_captureparm *cp = &parms->parm.capture;
+
+	dprintk(dev, 3, "vidioc_g_parm\n");
+	if (parms->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+
+	memset(cp, 0, sizeof(struct v4l2_captureparm));
+	cp->capability = V4L2_CAP_TIMEPERFRAME;
+
+	cp->timeperframe = ov5645_frmintervals_active;
+	pr_info("g_parm,deno=%d, numerator=%d\n", cp->timeperframe.denominator,
+		cp->timeperframe.numerator);
+	return 0;
+}
+
+static int vidioc_reqbufs(struct file *file, void *priv,
+	      struct v4l2_requestbuffers *p)
+{
+	struct ov5645_fh  *fh = priv;
+
+	return videobuf_reqbufs(&fh->vb_vidq, p);
+}
+
+static int vidioc_querybuf(struct file *file, void *priv, struct v4l2_buffer *p)
+{
+	struct ov5645_fh  *fh = priv;
+	int ret = videobuf_querybuf(&fh->vb_vidq, p);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+	if (ret == 0)
+	    p->reserved  = convert_canvas_index(fh->fmt->fourcc,
+			    ov5645_RES0_CANVAS_INDEX+p->index*3);
+	else
+	    p->reserved = 0;
+#endif
+	return ret;
+}
+
+static int vidioc_qbuf(struct file *file, void *priv, struct v4l2_buffer *p)
+{
+	struct ov5645_fh *fh = priv;
+
+	return videobuf_qbuf(&fh->vb_vidq, p);
+}
+
+static int vidioc_dqbuf(struct file *file, void *priv, struct v4l2_buffer *p)
+{
+	struct ov5645_fh  *fh = priv;
+
+	return videobuf_dqbuf(&fh->vb_vidq, p, file->f_flags & O_NONBLOCK);
+}
+
+#ifdef CONFIG_VIDEO_V4L1_COMPAT
+static int vidiocgmbuf(struct file *file, void *priv, struct video_mbuf *mbuf)
+{
+	struct ov5645_fh  *fh = priv;
+
+	return videobuf_cgmbuf(&fh->vb_vidq, mbuf, 8);
+}
+#endif
+
+static int vidioc_streamon(struct file *file, void *priv, enum v4l2_buf_type i)
+{
+	struct ov5645_fh  *fh = priv;
+	struct ov5645_device *dev = fh->dev;
+	vdin_parm_t para;
+	int ret = 0;
+	if (fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+	if (i != fh->type)
+		return -EINVAL;
+
+	memset(&para, 0, sizeof(para));
+	para.port  = TVIN_PORT_MIPI;
+	para.fmt = TVIN_SIG_FMT_MAX;
+	para.scan_mode = TVIN_SCAN_MODE_PROGRESSIVE;
+	para.frame_rate = ov5645_frmintervals_active.denominator;
+	para.h_active =
+		fh->dev->cur_resolution_param->active_frmsize.width;
+	para.v_active =
+		fh->dev->cur_resolution_param->active_frmsize.height;
+	para.hs_bp = 0;
+	para.vs_bp = 2;
+
+	if (temp_frame < 0 || para.h_active <= 1290) {
+	    temp_frame = para.frame_rate;
+	    para.skip_count =  2;
+	} else {
+	    temp_frame = para.frame_rate;
+	    para.skip_count =  3;
+	}
+	pr_info("ov5645: h_active = %d; v_active = %d\n",
+			para.h_active, para.v_active);
+	para.cfmt = TVIN_YUV422;
+	/* para.dfmt = TVIN_NV21; */
+	para.hsync_phase = 1;
+	para.vsync_phase  = 1;
+	para.bt_path = dev->cam_info.bt_path;
+	if (CAM_MIPI == dev->cam_info.interface) {
+		pr_info("mipi param init\n");
+		para.csi_hw_info.lanes = 2;
+		para.csi_hw_info.channel = 1;
+		para.csi_hw_info.mode = 1;
+		para.csi_hw_info.clock_lane_mode = 1;
+		para.csi_hw_info.active_pixel = para.h_active;
+		para.csi_hw_info.active_line = para.v_active;
+		para.csi_hw_info.frame_size = 0;
+		para.csi_hw_info.settle = 24; /* 24 need to be changed ? */
+		para.csi_hw_info.ui_val = 2; /* ns */
+		para.csi_hw_info.urgent = 1;
+
+		para.csi_hw_info.hs_freq = 410;
+		para.csi_hw_info.clk_channel = dev->cam_info.clk_channel;
+	}
+	ret =  videobuf_streamon(&fh->vb_vidq);
+	if (ret == 0) {
+		vops->start_tvin_service(0, &para);
+		fh->stream_on = 1;
+	}
+	return ret;
+}
+
+static int vidioc_streamoff(struct file *file, void *priv, enum v4l2_buf_type i)
+{
+	struct ov5645_fh  *fh = priv;
+
+	int ret = 0;
+	if (fh->type != V4L2_BUF_TYPE_VIDEO_CAPTURE)
+		return -EINVAL;
+	if (i != fh->type)
+		return -EINVAL;
+	ret = videobuf_streamoff(&fh->vb_vidq);
+	if (ret == 0) {
+		vops->stop_tvin_service(0);
+		fh->stream_on        = 0;
+	}
+	return ret;
+}
+
+static int vidioc_enum_framesizes(struct file *file, void *fh,
+		struct v4l2_frmsizeenum *fsize)
+{
+	int ret = 0, i = 0;
+	struct ov5645_fmt *fmt = NULL;
+	struct v4l2_frmsize_discrete *frmsize = NULL;
+	for (i = 0; i < ARRAY_SIZE(formats); i++) {
+		if (formats[i].fourcc == fsize->pixel_format) {
+			fmt = &formats[i];
+			break;
+		}
+	}
+	if (fmt == NULL)
+		return -EINVAL;
+	if ((fmt->fourcc == V4L2_PIX_FMT_NV21)
+			|| (fmt->fourcc == V4L2_PIX_FMT_NV12)
+			|| (fmt->fourcc == V4L2_PIX_FMT_YUV420)
+			|| (fmt->fourcc == V4L2_PIX_FMT_YVU420)) {
+		if (fsize->index >= ARRAY_SIZE(prev_resolution_array))
+			return -EINVAL;
+		frmsize = &prev_resolution_array[fsize->index].frmsize;
+		fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
+		fsize->discrete.width = frmsize->width;
+		fsize->discrete.height = frmsize->height;
+	} else if (fmt->fourcc == V4L2_PIX_FMT_RGB24) {
+		if (fsize->index >= ARRAY_SIZE(capture_resolution_array))
+			return -EINVAL;
+		frmsize = &capture_resolution_array[fsize->index].frmsize;
+		fsize->type = V4L2_FRMSIZE_TYPE_DISCRETE;
+		fsize->discrete.width = frmsize->width;
+		fsize->discrete.height = frmsize->height;
+	}
+	return ret;
+}
+
+static int vidioc_s_std(struct file *file, void *priv, v4l2_std_id i)
+{
+	return 0;
+}
+
+/* only one input in this sample driver */
+static int vidioc_enum_input(struct file *file, void *priv,
+		struct v4l2_input *inp)
+{
+    /* if (inp->index >= NUM_INPUTS) */
+	/* return -EINVAL; */
+
+	inp->type = V4L2_INPUT_TYPE_CAMERA;
+	inp->std = V4L2_STD_525_60;
+	sprintf(inp->name, "Camera %u", inp->index);
+
+	return 0;
+}
+
+static int vidioc_g_input(struct file *file, void *priv, unsigned int *i)
+{
+	struct ov5645_fh *fh = priv;
+	struct ov5645_device *dev = fh->dev;
+
+	*i = dev->input;
+
+	return 0;
+}
+
+static int vidioc_s_input(struct file *file, void *priv, unsigned int i)
+{
+	struct ov5645_fh *fh = priv;
+	struct ov5645_device *dev = fh->dev;
+
+	/* if (i >= NUM_INPUTS) */
+	/* return -EINVAL; */
+
+	dev->input = i;
+	/* precalculate_bars(fh); */
+
+	return 0;
+}
+
+    /* --- controls ---------------------------------------------- */
+static int vidioc_queryctrl(struct file *file, void *priv,
+		struct v4l2_queryctrl *qc)
+{
+	int i;
+	struct ov5645_fh *fh = priv;
+	struct ov5645_device *dev = fh->dev;
+
+	if (!dev->cam_info.flash_support
+			&& qc->id == V4L2_CID_BACKLIGHT_COMPENSATION)
+		return -EINVAL;
+
+	for (i = 0; i < ARRAY_SIZE(ov5645_qctrl); i++)
+		if (qc->id && qc->id == ov5645_qctrl[i].id) {
+			memcpy(qc, &(ov5645_qctrl[i]),
+				sizeof(*qc));
+			if (ov5645_qctrl[i].type == V4L2_CTRL_TYPE_MENU)
+				return ov5645_qctrl[i].maximum+1;
+			else
+				return 0;
+		}
+
+	return -EINVAL;
+}
+
+static int vidioc_querymenu(struct file *file, void *priv,
+		struct v4l2_querymenu *a)
+{
+	int i, j;
+	u32 id = 0;
+
+	for (i = 0; i < ARRAY_SIZE(ov5645_qmenu_set); i++)
+		if (a->id && a->id == ov5645_qmenu_set[i].id) {
+			for (j = 0; j < ov5645_qmenu_set[i].num; j++)
+				id = ov5645_qmenu_set[i].ov5645_qmenu[j].index;
+				if (a->index == id) {
+					memcpy(a,
+					&(ov5645_qmenu_set[i].ov5645_qmenu[j]),
+						sizeof(*a));
+					return 0;
+				}
+		}
+
+	return -EINVAL;
+}
+
+static int vidioc_g_ctrl(struct file *file, void *priv,
+	     struct v4l2_control *ctrl)
+{
+	struct ov5645_fh *fh = priv;
+	struct ov5645_device *dev = fh->dev;
+	struct i2c_client *client = v4l2_get_subdevdata(&dev->sd);
+	int i;
+	int i2cret = -1;
+
+	for (i = 0; i < ARRAY_SIZE(ov5645_qctrl); i++)
+		if (ctrl->id == ov5645_qctrl[i].id) {
+			if ((V4L2_CID_FOCUS_AUTO == ctrl->id)
+					&& bDoingAutoFocusMode){
+				if (i2c_get_byte(client, 0x3023)) {
+					return -EBUSY;
+				} else {
+					bDoingAutoFocusMode = false;
+					if (i2c_get_byte(client, 0x3028) == 0) {
+						pr_info("auto mode failed!\n");
+						return -EAGAIN;
+					} else {
+						i2c_put_byte(client,
+							       0x3022, 0x6);
+						i2c_put_byte(client,
+							       0x3023, 0x1);
+					}
+				}
+			} else if (V4L2_CID_AUTO_FOCUS_STATUS == ctrl->id) {
+				i2cret = i2c_get_byte(client, 0x3029);
+				if (0x00 == i2cret) {
+					ctrl->value =
+						V4L2_AUTO_FOCUS_STATUS_BUSY;
+				} else if (0x10 == i2cret) {
+					ctrl->value =
+						V4L2_AUTO_FOCUS_STATUS_REACHED;
+				} else if (0x20 == i2cret) {
+					ctrl->value =
+					       V4L2_AUTO_FOCUS_STATUS_IDLE;
+				} else{
+					pr_info("should resart focus\n");
+					ctrl->value =
+						V4L2_AUTO_FOCUS_STATUS_FAILED;
+				}
+
+				return 0;
+			}
+			ctrl->value = dev->qctl_regs[i];
+			return 0;
+		}
+
+	return -EINVAL;
+}
+
+static int vidioc_s_ctrl(struct file *file, void *priv,
+		struct v4l2_control *ctrl)
+{
+	struct ov5645_fh *fh = priv;
+	struct ov5645_device *dev = fh->dev;
+	int i;
+
+	for (i = 0; i < ARRAY_SIZE(ov5645_qctrl); i++)
+		if (ctrl->id == ov5645_qctrl[i].id) {
+			if (ctrl->value < ov5645_qctrl[i].minimum ||
+				ctrl->value > ov5645_qctrl[i].maximum ||
+				ov5645_setting(dev, ctrl->id, ctrl->value) < 0)
+				return -ERANGE;
+			dev->qctl_regs[i] = ctrl->value;
+			return 0;
+		}
+	return -EINVAL;
+}
+
+/* ------------------------------------------------------------------
+	File operations for the device
+   ------------------------------------------------------------------*/
+
+static int ov5645_open(struct file *file)
+{
+	struct ov5645_device *dev = video_drvdata(file);
+	struct ov5645_fh *fh = NULL;
+	/* struct i2c_client *client = v4l2_get_subdevdata(&dev->sd); */
+	resource_size_t mem_start = 0;
+	unsigned int mem_size = 0;
+	int retval = 0;
+	/* int reg_val; */
+	/* int i = 0; */
+#ifdef CONFIG_CMA
+	retval = vm_init_buf(24*SZ_1M);
+	if (retval < 0) {
+		pr_info("error: no cma memory\n");
+		return -1;
+	}
+#endif
+	mutex_lock(&firmware_mutex);
+	ov5645_have_opened = 1;
+	mutex_unlock(&firmware_mutex);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	switch_mod_gate_by_name("ge2d", 1);
+#endif
+	aml_cam_init(&dev->cam_info);
+
+	ov5645_init_regs(dev);
+
+	msleep(50);
+
+	/* schedule_work(&(dev->dl_work)); */
+
+	mutex_lock(&dev->mutex);
+	dev->users++;
+	if (dev->users > 1) {
+		dev->users--;
+		mutex_unlock(&dev->mutex);
+		return -EBUSY;
+	}
+
+	dprintk(dev, 1, "open %s type=%s users=%d\n",
+	video_device_node_name(dev->vdev),
+	v4l2_type_names[V4L2_BUF_TYPE_VIDEO_CAPTURE], dev->users);
+
+	/* init video dma queues */
+	INIT_LIST_HEAD(&dev->vidq.active);
+	init_waitqueue_head(&dev->vidq.wq);
+	spin_lock_init(&dev->slock);
+	/* allocate + initialize per filehandle data */
+	fh = kzalloc(sizeof(*fh), GFP_KERNEL);
+	if (NULL == fh) {
+		dev->users--;
+		retval = -ENOMEM;
+	}
+	mutex_unlock(&dev->mutex);
+
+	if (retval)
+		return retval;
+
+	wake_lock(&(dev->wake_lock));
+	file->private_data = fh;
+	fh->dev      = dev;
+
+	fh->type     = V4L2_BUF_TYPE_VIDEO_CAPTURE;
+	fh->fmt      = &formats[0];
+	fh->width    = 640;
+	fh->height   = 480;
+	fh->stream_on = 0;
+	fh->f_flags  = file->f_flags;
+	/* Resets frame counters */
+	dev->jiffies = jiffies;
+
+	get_vm_buf_info(&mem_start, &mem_size, NULL);
+	fh->res.start = mem_start;
+	fh->res.end = mem_start+mem_size-1;
+	fh->res.magic = MAGIC_RE_MEM;
+	fh->res.priv = NULL;
+	videobuf_queue_res_init(&fh->vb_vidq, &ov5645_video_qops,
+			NULL, &dev->slock, fh->type, V4L2_FIELD_INTERLACED,
+			sizeof(struct ov5645_buffer), (void *)&fh->res, NULL);
+
+	bDoingAutoFocusMode = false;
+	ov5645_start_thread(fh);
+	pr_info("%s done\n", __func__);
+	return 0;
+}
+
+static ssize_t
+ov5645_read(struct file *file, char __user *data, size_t count, loff_t *ppos)
+{
+	struct ov5645_fh *fh = file->private_data;
+
+	if (fh->type == V4L2_BUF_TYPE_VIDEO_CAPTURE) {
+		return videobuf_read_stream(&fh->vb_vidq, data, count, ppos, 0,
+			file->f_flags & O_NONBLOCK);
+	}
+	return 0;
+}
+
+static unsigned int
+ov5645_poll(struct file *file, struct poll_table_struct *wait)
+{
+	struct ov5645_fh        *fh = file->private_data;
+	struct ov5645_device       *dev = fh->dev;
+	struct videobuf_queue *q = &fh->vb_vidq;
+
+	dprintk(dev, 1, "%s\n", __func__);
+
+	if (V4L2_BUF_TYPE_VIDEO_CAPTURE != fh->type)
+		return POLLERR;
+
+	return videobuf_poll_stream(file, q, wait);
+}
+
+static int ov5645_close(struct file *file)
+{
+	struct ov5645_fh         *fh = file->private_data;
+	struct ov5645_device *dev       = fh->dev;
+	struct ov5645_dmaqueue *vidq = &dev->vidq;
+	struct video_device  *vdev = video_devdata(file);
+	mutex_lock(&firmware_mutex);
+	ov5645_have_opened = 0;
+	dev->firmware_ready = 0;
+	mutex_unlock(&firmware_mutex);
+
+	ov5645_stop_thread(vidq);
+	videobuf_stop(&fh->vb_vidq);
+	if (fh->stream_on)
+		vops->stop_tvin_service(0);
+
+	videobuf_mmap_free(&fh->vb_vidq);
+
+	kfree(fh);
+
+	mutex_lock(&dev->mutex);
+	dev->users--;
+	mutex_unlock(&dev->mutex);
+
+	dprintk(dev, 1, "close called (dev=%s, users=%d)\n",
+	video_device_node_name(vdev), dev->users);
+#if 1
+	ov5645_qctrl[4].default_value = 0;
+	ov5645_qctrl[5].default_value = 4;
+	ov5645_qctrl[6].default_value = 0;
+
+	ov5645_qctrl[2].default_value = 0;
+	ov5645_qctrl[10].default_value = 100;
+	ov5645_qctrl[11].default_value = 0;
+	temp_frame =  -1;
+	power_down_ov5645(dev);
+#endif
+	ov5645_frmintervals_active.numerator = 1;
+	ov5645_frmintervals_active.denominator = 25;
+
+	aml_cam_uninit(&dev->cam_info);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	switch_mod_gate_by_name("ge2d", 0);
+#endif
+	wake_unlock(&(dev->wake_lock));
+#ifdef CONFIG_CMA
+	vm_deinit_buf();
+#endif
+	return 0;
+}
+
+static int ov5645_mmap(struct file *file, struct vm_area_struct *vma)
+{
+	struct ov5645_fh  *fh = file->private_data;
+	struct ov5645_device *dev = fh->dev;
+	int ret;
+
+	dprintk(dev, 1, "mmap called, vma=0x%08lx\n", (unsigned long)vma);
+
+	ret = videobuf_mmap_mapper(&fh->vb_vidq, vma);
+
+	dprintk(dev, 1, "vma start=0x%08lx, size=%ld, ret=%d\n",
+		(unsigned long)vma->vm_start,
+		(unsigned long)vma->vm_end-(unsigned long)vma->vm_start,
+		ret);
+
+	return ret;
+}
+
+static const struct v4l2_file_operations ov5645_fops = {
+	.owner	    = THIS_MODULE,
+	.open       = ov5645_open,
+	.release    = ov5645_close,
+	.read       = ov5645_read,
+	.poll	    = ov5645_poll,
+	.ioctl      = video_ioctl2, /* V4L2 ioctl handler */
+	.mmap       = ov5645_mmap,
+};
+
+static const struct v4l2_ioctl_ops ov5645_ioctl_ops = {
+	.vidioc_querycap      = vidioc_querycap,
+	.vidioc_enum_fmt_vid_cap  = vidioc_enum_fmt_vid_cap,
+	.vidioc_g_fmt_vid_cap     = vidioc_g_fmt_vid_cap,
+	.vidioc_try_fmt_vid_cap   = vidioc_try_fmt_vid_cap,
+	.vidioc_s_fmt_vid_cap     = vidioc_s_fmt_vid_cap,
+	.vidioc_reqbufs       = vidioc_reqbufs,
+	.vidioc_querybuf      = vidioc_querybuf,
+	.vidioc_qbuf          = vidioc_qbuf,
+	.vidioc_dqbuf         = vidioc_dqbuf,
+	.vidioc_s_std         = vidioc_s_std,
+	.vidioc_enum_input    = vidioc_enum_input,
+	.vidioc_g_input       = vidioc_g_input,
+	.vidioc_s_input       = vidioc_s_input,
+	.vidioc_queryctrl     = vidioc_queryctrl,
+	.vidioc_querymenu     = vidioc_querymenu,
+	.vidioc_g_ctrl        = vidioc_g_ctrl,
+	.vidioc_s_ctrl        = vidioc_s_ctrl,
+	.vidioc_streamon      = vidioc_streamon,
+	.vidioc_streamoff     = vidioc_streamoff,
+	.vidioc_enum_framesizes = vidioc_enum_framesizes,
+	.vidioc_g_parm = vidioc_g_parm,
+	.vidioc_enum_frameintervals = vidioc_enum_frameintervals,
+#ifdef CONFIG_VIDEO_V4L1_COMPAT
+	.vidiocgmbuf          = vidiocgmbuf,
+#endif
+};
+
+static struct video_device ov5645_template = {
+	.name	        = "ov5645_v4l",
+	.fops           = &ov5645_fops,
+	.ioctl_ops      = &ov5645_ioctl_ops,
+	.release	    = video_device_release,
+
+	.tvnorms        = V4L2_STD_525_60,
+	.current_norm   = V4L2_STD_NTSC_M,
+};
+
+static int ov5645_g_chip_ident(struct v4l2_subdev *sd,
+		struct v4l2_dbg_chip_ident *chip)
+{
+	struct i2c_client *client = v4l2_get_subdevdata(sd);
+
+	return v4l2_chip_ident_i2c_client(client, chip, V4L2_IDENT_OV5640, 0);
+}
+
+static const struct v4l2_subdev_core_ops ov5645_core_ops = {
+	.g_chip_ident = ov5645_g_chip_ident,
+};
+
+static const struct v4l2_subdev_ops ov5645_ops = {
+	.core = &ov5645_core_ops,
+};
+static ssize_t cam_info_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	int i = 0;
+	pr_info("init regs:\r");
+	for (i = 0; ; i++) {
+		if (ov5645_script[i].addr == 0xffff &&
+				ov5645_script[i].val == 0xff)
+			break;
+		pr_info("0x%04x:0x%02x\n", ov5645_script[i].addr,
+				i2c_get_byte(g_client, ov5645_script[i].addr));
+	}
+	pr_info("preview regs:\r");
+	for (i = 0;; i++) {
+		if (ov5645_preview_VGA_script[i].addr == 0xffff &&
+			       ov5645_preview_VGA_script[i].val == 0xff)
+			break;
+		pr_info("0x%04x:0x%02x\n", ov5645_preview_VGA_script[i].addr,
+				i2c_get_byte(g_client,
+					ov5645_preview_VGA_script[i].addr));
+	}
+	pr_info("capture regs:\r");
+	for (i = 0; ; i++) {
+		if (ov5645_capture_5M_script[i].addr == 0xffff &&
+				ov5645_capture_5M_script[i].val == 0xff)
+			break;
+		pr_info("0x%04x:0x%02x\n", ov5645_capture_5M_script[i].addr,
+			       i2c_get_byte(g_client,
+				       ov5645_capture_5M_script[i].addr));
+	}
+	return 1;
+}
+
+static DEVICE_ATTR(cam_info, 0664, cam_info_show, NULL);
+static int ov5645_probe(struct i2c_client *client,
+		const struct i2c_device_id *id)
+{
+	aml_cam_info_t *plat_dat;
+	int err;
+	struct ov5645_device *t;
+	struct v4l2_subdev *sd;
+	vops = get_vdin_v4l2_ops();
+	v4l_info(client, "chip found @ 0x%x (%s)\n",
+		client->addr << 1, client->adapter->name);
+	t = kzalloc(sizeof(*t), GFP_KERNEL);
+	if (t == NULL)
+		return -ENOMEM;
+	sd = &t->sd;
+	v4l2_i2c_subdev_init(sd, client, &ov5645_ops);
+	mutex_init(&t->mutex);
+
+	g_client = client;
+
+	/* Now create a video4linux device */
+	t->vdev = video_device_alloc();
+	if (t->vdev == NULL) {
+		kfree(t);
+		kfree(client);
+		return -ENOMEM;
+	}
+	memcpy(t->vdev, &ov5645_template, sizeof(*t->vdev));
+
+	video_set_drvdata(t->vdev, t);
+
+	/* INIT_WORK(&(t->dl_work), do_download); */
+
+	wake_lock_init(&(t->wake_lock), WAKE_LOCK_SUSPEND, "ov5645");
+	/* Register it */
+	plat_dat = (aml_cam_info_t *)client->dev.platform_data;
+	if (plat_dat) {
+		memcpy(&t->cam_info, plat_dat, sizeof(aml_cam_info_t));
+		if (plat_dat->front_back >= 0)
+			video_nr = plat_dat->front_back;
+	} else {
+		pr_info("camera ov5645: have no platform data\n");
+		kfree(t);
+		kfree(client);
+		return -1;
+	}
+
+	t->cam_info.version = ov5645_DRIVER_VERSION;
+	if (aml_cam_info_reg(&t->cam_info) < 0)
+		pr_info("reg caminfo error\n");
+
+	err = video_register_device(t->vdev, VFL_TYPE_GRABBER, video_nr);
+	if (err < 0) {
+		video_device_release(t->vdev);
+		kfree(t);
+		return err;
+	}
+	device_create_file(&t->vdev->dev, &dev_attr_cam_info);
+	return 0;
+}
+
+static int ov5645_remove(struct i2c_client *client)
+{
+	struct v4l2_subdev *sd = i2c_get_clientdata(client);
+	struct ov5645_device *t = to_dev(sd);
+
+	video_unregister_device(t->vdev);
+	v4l2_device_unregister_subdev(sd);
+	wake_lock_destroy(&(t->wake_lock));
+	aml_cam_info_unreg(&t->cam_info);
+	kfree(t);
+	return 0;
+}
+
+static const struct i2c_device_id ov5645_id[] = {
+	{ "ov5645", 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, ov5645_id);
+
+static struct i2c_driver ov5645_i2c_driver = {
+	.driver = {
+		.name = "ov5645",
+	},
+	.probe = ov5645_probe,
+	.remove = ov5645_remove,
+	.id_table = ov5645_id,
+};
+
+module_i2c_driver(ov5645_i2c_driver);
+
diff --git a/drivers/amlogic/camera/ov5645_firmware.h b/drivers/amlogic/camera/ov5645_firmware.h
new file mode 100644
index 000000000000..29a7d5e2a8c4
--- /dev/null
+++ b/drivers/amlogic/camera/ov5645_firmware.h
@@ -0,0 +1,581 @@
+#ifndef OV5645_FIRMWARE_H
+#define OV5645_FIRMWARE_H
+
+#define CMD_MAIN	0x3024
+#define CMD_ACK		0x3025
+#define CMD_PARA0	0x5082
+#define CMD_PARA1	0x5083
+#define CMD_PARA2	0x5084
+#define CMD_PARA3	0x5085
+#define CMD_PARA4	0x3026
+#define FW_STATUS	0x3027
+#define OV5645_FW_ADDR    (0x8000)
+
+static u8 OV5645AF_addr_data_pair1[254] =
+{
+	/* 0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f */
+	/* 0x8000 */
+	0x80,
+	0x00,
+	0x02, 0x15, 0x5c, 0x02, 0x12, 0x01, 0xc2, 0x01, 0x22, 0x00, 0x00, 0x02, 0x15, 0x18, 0x78, 0xc3, /* 0x8000, */
+	0xe6, 0x18, 0xf6, 0xe5, 0x30, 0xc3, 0x13, 0xfc, 0xe5, 0x31, 0x13, 0xfd, 0xe5, 0x2e, 0xc3, 0x13, /* 0x8010, */
+	0xfe, 0xe5, 0x2f, 0x13, 0x2d, 0x78, 0x9b, 0xf6, 0xee, 0x3c, 0x18, 0xf6, 0x78, 0xc3, 0xa6, 0x4f, /* 0x8020, */
+	0xe5, 0x1e, 0x70, 0x6b, 0xe6, 0x12, 0x0f, 0x25, 0xff, 0x33, 0x95, 0xe0, 0xfe, 0x74, 0x9d, 0x2f, /* 0x8030, */
+	0xf5, 0x82, 0x74, 0x0e, 0x3e, 0xf5, 0x83, 0xe4, 0x93, 0x78, 0xc1, 0xf6, 0x75, 0x4e, 0x02, 0x12, /* 0x8040, */
+	0x0f, 0x31, 0x78, 0x56, 0x12, 0x0f, 0x2c, 0x78, 0x96, 0x12, 0x0f, 0x2c, 0x12, 0x0f, 0x91, 0x78, /* 0x8050, */
+	0xc3, 0xe6, 0x78, 0x9e, 0xf6, 0x78, 0xc3, 0xe6, 0x78, 0xbe, 0xf6, 0x78, 0xc3, 0xe6, 0x78, 0xbf, /* 0x8060, */
+	0xf6, 0x08, 0x76, 0x02, 0x78, 0xc5, 0x76, 0x01, 0x08, 0x76, 0x01, 0x08, 0x76, 0x01, 0xe6, 0x78, /* 0x8070, */
+	0xc9, 0xf6, 0xe6, 0x78, 0xcb, 0xf6, 0x78, 0xc9, 0xe6, 0x78, 0xcc, 0xf6, 0xe4, 0x08, 0xf6, 0x08, /* 0x8080, */
+	0xf6, 0x08, 0x76, 0x40, 0x78, 0xc3, 0xe6, 0x78, 0xd0, 0xf6, 0xe4, 0x08, 0xf6, 0xc2, 0x38, 0xe5, /* 0x8090, */
+	0x1e, 0x64, 0x06, 0x70, 0x2e, 0xd3, 0x78, 0xc0, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x40, 0x02, 0x16, /* 0x80a0, */
+	0x22, 0xa2, 0x38, 0xe4, 0x33, 0xf5, 0x41, 0x90, 0x30, 0x28, 0xf0, 0xe4, 0xf5, 0x1e, 0xc2, 0x01, /* 0x80b0, */
+	0x75, 0x1d, 0x10, 0xd2, 0x36, 0x78, 0x52, 0xa6, 0x2e, 0x08, 0xa6, 0x2f, 0x08, 0xa6, 0x30, 0x08, /* 0x80c0, */
+	0xa6, 0x31, 0x22, 0x79, 0xc3, 0xe7, 0x78, 0xc1, 0x26, 0x78, 0xc4, 0xf6, 0xc3, 0x78, 0xce, 0xe6, /* 0x80d0, */
+	0x64, 0x80, 0xf8, 0x09, 0xe7, 0x64, 0x80, 0x98, 0x50, 0x06, 0x78, 0xce, 0xe6, 0x78, 0xc4, 0xf6, /* 0x80e0, */
+	0xd3, 0x78, 0xcf, 0xe6, 0x64, 0x80, 0xf8, 0x79, 0xc4, 0xe7, 0x64, 0x80, /* 0x80f0 */
+};
+
+static u8 OV5645AF_addr_data_pair2[255] =
+{
+	/* 0x80fc */
+	0x80,
+	0xfc,
+	0x98, 0x40, 0x06, 0x78,
+	0xcf, 0xe6, 0x78, 0xc4, 0xf6, 0x78, 0xc4, 0xe6, 0xf5, 0x4f, 0x12, 0x12, 0xaf, 0x78, 0xc1, 0xe6, /* 0x8100, */
+	0xff, 0x33, 0x95, 0xe0, 0xfe, 0x12, 0x15, 0x2e, 0x8f, 0x0a, 0xd3, 0xe5, 0x0a, 0x64, 0x80, 0x94, /* 0x8110, */
+	0x86, 0x40, 0x05, 0x75, 0x1e, 0x01, 0x80, 0x1f, 0xd3, 0xe5, 0x0a, 0x64, 0x80, 0x94, 0x83, 0x40, /* 0x8120, */
+	0x05, 0x75, 0x1e, 0x02, 0x80, 0x11, 0xd3, 0xe5, 0x0a, 0x64, 0x80, 0x94, 0x81, 0x40, 0x05, 0x75, /* 0x8130, */
+	0x1e, 0x03, 0x80, 0x03, 0x75, 0x1e, 0x04, 0xd3, 0x78, 0xc0, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x40, /* 0x8140, */
+	0x02, 0x16, 0x22, 0x78, 0xc6, 0xe6, 0x18, 0xf6, 0x08, 0x06, 0x78, 0xc2, 0xe6, 0xff, 0x12, 0x0f, /* 0x8150, */
+	0x99, 0x12, 0x0f, 0x2f, 0x78, 0xc5, 0xe6, 0x25, 0xe0, 0x24, 0x56, 0xf8, 0xa6, 0x06, 0x08, 0xa6, /* 0x8160, */
+	0x07, 0x79, 0xc5, 0xe7, 0x78, 0xc7, 0x66, 0x70, 0x05, 0xe6, 0x78, 0xc9, 0xf6, 0x22, 0x78, 0xc5, /* 0x8170, */
+	0xe6, 0x78, 0x99, 0x12, 0x0e, 0xfa, 0x40, 0x0d, 0x78, 0xc5, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, /* 0x8180, */
+	0xe6, 0xff, 0x12, 0x0f, 0x91, 0x78, 0xc5, 0xe6, 0x25, 0xe0, 0x24, 0x57, 0xf9, 0xc3, 0xe7, 0x78, /* 0x8190, */
+	0x97, 0x96, 0x19, 0xe7, 0x18, 0x96, 0x50, 0x11, 0x78, 0xc5, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, /* 0x81a0, */
+	0xe6, 0xff, 0x78, 0x96, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x78, 0xc5, 0xe6, 0x25, 0xe0, 0x24, 0x57, /* 0x81b0, */
+	0xf9, 0x78, 0xc9, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, 0xe6, 0xc3, 0x97, 0xee, 0x19, 0x97, 0x50, /* 0x81c0, */
+	0x06, 0x78, 0xc5, 0xe6, 0x78, 0xc9, 0xf6, 0x78, 0xc5, 0xe6, 0x24, 0x9e, 0x78, 0xbe, 0x12, 0x0f, /* 0x81d0, */
+	0x09, 0x40, 0x07, 0x12, 0x0f, 0x99, 0xe6, 0x78, 0xbe, 0xf6, 0x78, 0xc5, 0xe6, 0x24, 0x9e, 0x78, /* 0x81e0, */
+	0xbf, 0x12, 0x0e, 0xe8, 0x50, 0x07, 0x12, 0x0f, 0x99, /* 0x81f0, */
+};
+
+static u8 OV5645AF_addr_data_pair3[255] =
+{
+	/* 0x81f9 */
+	0x81,
+	0xf9,
+	0xe6, 0x78, 0xbf, 0xf6, 0x78, 0xc5, 0xe6,
+	0x78, 0xc8, 0xf6, 0x12, 0x10, 0x7f, 0x12, 0x0c, 0x86, 0x12, 0x14, 0xdd, 0x78, 0xcd, 0xa6, 0x07, /* 0x8200, */
+	0xe6, 0x24, 0x02, 0x70, 0x03, 0x02, 0x02, 0x9e, 0x14, 0x70, 0x03, 0x02, 0x02, 0x9e, 0x24, 0xfe, /* 0x8210, */
+	0x60, 0x03, 0x02, 0x03, 0xb1, 0xd2, 0x38, 0x12, 0x0f, 0x16, 0x40, 0x16, 0x78, 0xc9, 0xe6, 0x24, /* 0x8220, */
+	0x9d, 0x12, 0x0e, 0xe6, 0x50, 0x20, 0x78, 0xc9, 0xe6, 0x24, 0x9d, 0xf8, 0xe6, 0x78, 0xce, 0xf6, /* 0x8230, */
+	0x80, 0x14, 0x78, 0xc9, 0xe6, 0x24, 0x9d, 0x12, 0x0f, 0x07, 0x40, 0x0a, 0x78, 0xc9, 0xe6, 0x24, /* 0x8240, */
+	0x9d, 0xf8, 0xe6, 0x78, 0xcf, 0xf6, 0x78, 0xca, 0x12, 0x0f, 0x52, 0x79, 0xc2, 0xe7, 0x78, 0xc3, /* 0x8250, */
+	0x66, 0x60, 0x03, 0x02, 0x04, 0x9f, 0x78, 0xd1, 0x06, 0xe5, 0x1e, 0xb4, 0x01, 0x07, 0x12, 0x0f, /* 0x8260, */
+	0x1f, 0xf6, 0x09, 0x80, 0x1e, 0xe5, 0x1e, 0xb4, 0x02, 0x08, 0x12, 0x0f, 0x1f, 0xf6, 0x79, 0xc3, /* 0x8270, */
+	0x80, 0x11, 0xe5, 0x1e, 0xb4, 0x03, 0x14, 0x78, 0xc1, 0xe6, 0xf4, 0x04, 0xff, 0xa2, 0xe7, 0x13, /* 0x8280, */
+	0xf6, 0x79, 0xc3, 0xe7, 0x26, 0x78, 0xc4, 0xf6, 0x02, 0x04, 0x8a, 0x02, 0x04, 0x1c, 0xd2, 0x38, /* 0x8290, */
+	0x78, 0xd1, 0x06, 0xc3, 0x12, 0x0f, 0x17, 0x50, 0x25, 0x79, 0xc9, 0xe7, 0x78, 0xc5, 0x66, 0x78, /* 0x82a0, */
+	0xc9, 0x60, 0x05, 0xe6, 0x04, 0xff, 0x80, 0x02, 0xe6, 0xff, 0x8f, 0x0a, 0x74, 0x9e, 0x2f, 0x12, /* 0x82b0, */
+	0x0e, 0xe6, 0x50, 0x2d, 0x74, 0x9e, 0x2f, 0xf8, 0xe6, 0x78, 0xce, 0xf6, 0x80, 0x23, 0x79, 0xc9, /* 0x82c0, */
+	0xe7, 0x78, 0xc5, 0x66, 0x78, 0xc9, 0x60, 0x05, 0xe6, 0x04, 0xff, 0x80, 0x02, 0xe6, 0xff, 0x8f, /* 0x82d0, */
+	0x0a, 0x74, 0x9e, 0x2f, 0x12, 0x0f, 0x07, 0x40, 0x08, 0x74, 0x9e, 0x2f, 0xf8, 0xe6, 0x78, 0xcf, /* 0x82e0, */
+	0xf6, 0x12, 0x0f, 0x50, 0x78, 0xc1, /* 0x82f0, */
+};
+
+static u8 OV5645AF_addr_data_pair4[255] =
+{
+	/* 0x82f6 */
+	0x82,
+	0xf6,
+	0xe6, 0xff, 0x33, 0x95, 0xe0, 0xfe, 0xef, 0x78, 0x02, 0xc3,
+	0x33, 0xce, 0x33, 0xce, 0xd8, 0xf9, 0xff, 0x12, 0x15, 0x2e, 0x78, 0xce, 0xe6, 0xfd, 0x33, 0x95, /* 0x8300, */
+	0xe0, 0xfc, 0x08, 0xe6, 0xfb, 0x33, 0x95, 0xe0, 0xfa, 0xc3, 0xeb, 0x9d, 0xfd, 0xea, 0x9c, 0xfc, /* 0x8310, */
+	0xd3, 0xed, 0x9f, 0xee, 0x64, 0x80, 0xf8, 0xec, 0x64, 0x80, 0x98, 0x40, 0x02, 0x80, 0x01, 0xd3, /* 0x8320, */
+	0x92, 0x3a, 0xe5, 0x1e, 0x64, 0x01, 0x70, 0x21, 0x12, 0x0f, 0x72, 0x30, 0x3a, 0x05, 0xe6, 0xa2, /* 0x8330, */
+	0xe7, 0x13, 0xf6, 0x12, 0x0f, 0x16, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, /* 0x8340, */
+	0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, 0xe5, 0x1e, 0x64, 0x02, 0x70, 0x21, 0x12, /* 0x8350, */
+	0x0f, 0x72, 0x30, 0x3a, 0x05, 0xe6, 0xa2, 0xe7, 0x13, 0xf6, 0x12, 0x0f, 0x16, 0x40, 0x06, 0x78, /* 0x8360, */
+	0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, /* 0x8370, */
+	0xe5, 0x1e, 0x64, 0x03, 0x70, 0x21, 0x12, 0x0f, 0x72, 0x30, 0x3a, 0x05, 0xe6, 0xa2, 0xe7, 0x13, /* 0x8380, */
+	0xf6, 0x12, 0x0f, 0x16, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, /* 0x8390, */
+	0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, 0x78, 0xc0, 0x76, 0x01, 0x12, 0x0f, 0xa0, 0x02, 0x04, /* 0x83a0, */
+	0x9c, 0x79, 0xc2, 0xe7, 0x78, 0xc3, 0x66, 0x60, 0x03, 0x02, 0x04, 0x9f, 0x78, 0xd1, 0x06, 0xc3, /* 0x83b0, */
+	0x12, 0x0f, 0x17, 0x50, 0x16, 0x78, 0xc9, 0xe6, 0x24, 0x9f, 0x12, 0x0e, 0xe6, 0x50, 0x20, 0x78, /* 0x83c0, */
+	0xc9, 0xe6, 0x24, 0x9f, 0xf8, 0xe6, 0x78, 0xce, 0xf6, 0x80, 0x14, 0x78, 0xc9, 0xe6, 0x24, 0x9f, /* 0x83d0, */
+	0x12, 0x0f, 0x07, 0x40, 0x0a, 0x78, 0xc9, 0xe6, 0x24, 0x9f, 0xf8, 0xe6, 0x78, 0xcf, 0xf6, 0x12, /* 0x83e0, */
+	0x0f, 0x50, 0x20, /* 0x83f0, */
+};
+
+static u8 OV5645AF_addr_data_pair5[255] =
+{
+	/* 0x83f3 */
+	0x83,
+	0xf3,
+	0x38, 0x2e, 0xc3, 0x08, 0xe6, 0x64, 0x80, 0x94, 0x82, 0x50, 0x1b, 0x12, 0x0f,
+	0x72, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, /* 0x8400, */
+	0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x02, 0x04, 0x8a, 0x12, 0x0f, 0xa0, 0x78, 0xc0, 0x76, 0x01, /* 0x8410, */
+	0x02, 0x04, 0x9c, 0xe5, 0x1e, 0x64, 0x01, 0x70, 0x1d, 0x78, 0xc1, 0xe6, 0xf4, 0x04, 0x12, 0x0f, /* 0x8420, */
+	0x25, 0x12, 0x0f, 0x81, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, /* 0x8430, */
+	0x78, 0xc4, 0xa6, 0x07, 0x80, 0x44, 0xe5, 0x1e, 0x64, 0x02, 0x70, 0x1d, 0x78, 0xc1, 0xe6, 0xf4, /* 0x8440, */
+	0x04, 0x12, 0x0f, 0x25, 0x12, 0x0f, 0x81, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, 0x80, 0x04, 0x78, /* 0x8450, */
+	0xcf, 0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x80, 0x21, 0xe5, 0x1e, 0x64, 0x03, 0x70, 0x26, 0x78, /* 0x8460, */
+	0xc1, 0xe6, 0xf4, 0x04, 0xa2, 0xe7, 0x13, 0x12, 0x0f, 0x81, 0x40, 0x06, 0x78, 0xce, 0xe6, 0xff, /* 0x8470, */
+	0x80, 0x04, 0x78, 0xcf, 0xe6, 0xff, 0x78, 0xc4, 0xa6, 0x07, 0x78, 0xc6, 0xe6, 0x08, 0xf6, 0x78, /* 0x8480, */
+	0xc0, 0x76, 0x01, 0x80, 0x0a, 0x12, 0x0f, 0xa0, 0x78, 0xc0, 0x76, 0x01, 0x75, 0x1e, 0x06, 0x78, /* 0x8490, */
+	0xc4, 0xe6, 0xf5, 0x4f, 0x12, 0x12, 0xaf, 0x22, 0x30, 0x01, 0x03, 0x02, 0x08, 0x5f, 0x30, 0x02, /* 0x84a0, */
+	0x03, 0x02, 0x08, 0x5f, 0xe5, 0x1e, 0x60, 0x03, 0x02, 0x05, 0x3b, 0x75, 0x1d, 0x20, 0xd2, 0x36, /* 0x84b0, */
+	0xd3, 0x78, 0x53, 0xe6, 0x94, 0x00, 0x18, 0xe6, 0x94, 0x00, 0x40, 0x07, 0xe6, 0xfe, 0x08, 0xe6, /* 0x84c0, */
+	0xff, 0x80, 0x0e, 0x90, 0x0e, 0x8d, 0xe4, 0x93, 0x25, 0xe0, 0x25, 0xe0, 0x24, 0x2a, 0x12, 0x11, /* 0x84d0, */
+	0x8e, 0x78, 0x52, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0xd3, 0x78, 0x55, 0xe6, 0x94, 0x00, 0x18, 0xe6, /* 0x84e0, */
+};
+
+static u8 OV5645AF_addr_data_pair6[255] =
+{
+	/* 0x84f0 */
+	0x84,
+	0xf0,
+	0x94, 0x00, 0x40, 0x07, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x80, 0x08, 0x90, 0x0e, 0x8d, 0xe4, 0x93, /* 0x84f0, */
+	0x12, 0x11, 0x88, 0x78, 0x54, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x12, 0x11, 0xd8, 0x12, 0x11, 0xa9, /* 0x8500, */
+	0x78, 0x5a, 0x12, 0x11, 0x82, 0x78, 0x5c, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x12, 0x11, 0xd8, 0x78, /* 0x8510, */
+	0xad, 0xa6, 0x33, 0x08, 0xa6, 0x33, 0x08, 0xa6, 0x35, 0x78, 0xb3, 0xa6, 0x33, 0x08, 0xa6, 0x33, /* 0x8520, */
+	0x08, 0xa6, 0x35, 0x75, 0x1e, 0x01, 0x78, 0xaa, 0x76, 0x01, 0x22, 0xe5, 0x1e, 0xb4, 0x05, 0x10, /* 0x8530, */
+	0xd2, 0x01, 0xc2, 0x02, 0xe4, 0xf5, 0x1e, 0xf5, 0x1d, 0xd2, 0x36, 0xd2, 0x34, 0xd2, 0x37, 0x22, /* 0x8540, */
+	0x12, 0x11, 0xc7, 0x24, 0xb3, 0x12, 0x11, 0xc4, 0x24, 0xb4, 0x12, 0x11, 0xc4, 0x24, 0xb5, 0xf8, /* 0x8550, */
+	0xa6, 0x35, 0x12, 0x11, 0xa9, 0x12, 0x11, 0xbc, 0x24, 0x5a, 0xf8, 0x12, 0x11, 0x82, 0x12, 0x11, /* 0x8560, */
+	0xbc, 0x24, 0x5c, 0xf8, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x12, 0x11, 0xbc, 0x24, 0x5e, 0xf8, 0xa6, /* 0x8570, */
+	0x2a, 0x08, 0xa6, 0x2b, 0x12, 0x11, 0xbc, 0x24, 0x60, 0xf8, 0xa6, 0x2c, 0x08, 0xa6, 0x2d, 0x90, /* 0x8580, */
+	0x0e, 0x99, 0xe4, 0x93, 0x24, 0xff, 0xff, 0xe4, 0x34, 0xff, 0xfe, 0x78, 0xaa, 0xe6, 0x24, 0x01, /* 0x8590, */
+	0xfd, 0xe4, 0x33, 0xfc, 0xd3, 0xed, 0x9f, 0xee, 0x64, 0x80, 0xf8, 0xec, 0x64, 0x80, 0x98, 0x40, /* 0x85a0, */
+	0x04, 0x7f, 0x00, 0x80, 0x05, 0x78, 0xaa, 0xe6, 0x04, 0xff, 0x78, 0xaa, 0xa6, 0x07, 0xe5, 0x1e, /* 0x85b0, */
+	0xb4, 0x01, 0x07, 0xe6, 0x70, 0x04, 0x75, 0x1e, 0x02, 0x22, 0xe4, 0x78, 0xab, 0xf6, 0x08, 0xf6, /* 0x85c0, */
+	0xf5, 0x0b, 0x12, 0x11, 0xcf, 0xf5, 0x14, 0x08, 0xe6, 0xf5, 0x15, 0x12, 0x11, 0xcf, 0xf5, 0x16, /* 0x85d0, */
+	0x08, 0xe6, 0xf5, 0x17, 0x12, 0x11, 0xcf, 0xfe, 0x08, 0xe6, 0xff, 0x12, 0x11, /* 0x85e0, */
+};
+
+static u8 OV5645AF_addr_data_pair7[255] =
+{
+	/* 0x85ed */
+	0x85,
+	0xed,
+	0xf0, 0x75, 0x0a,
+	0x01, 0x90, 0x0e, 0x99, 0xe4, 0x93, 0xfb, 0xe5, 0x0a, 0xc3, 0x9b, 0x50, 0x67, 0x12, 0x11, 0x73, /* 0x85f0, */
+	0xf8, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0xe4, 0xfc, 0xfd, 0xe5, 0x0f, 0x2f, 0xf5, 0x0f, 0xe5, 0x0e, /* 0x8600, */
+	0x3e, 0xf5, 0x0e, 0xed, 0x35, 0x0d, 0xf5, 0x0d, 0xec, 0x35, 0x0c, 0xf5, 0x0c, 0xe5, 0x0a, 0x75, /* 0x8610, */
+	0xf0, 0x08, 0xa4, 0x24, 0x5b, 0x12, 0x11, 0x7b, 0xf9, 0xc3, 0xe5, 0x15, 0x97, 0xe5, 0x14, 0x19, /* 0x8620, */
+	0x97, 0x50, 0x0b, 0x12, 0x11, 0x73, 0xf8, 0xe6, 0xf5, 0x14, 0x08, 0xe6, 0xf5, 0x15, 0xe5, 0x0a, /* 0x8630, */
+	0x75, 0xf0, 0x08, 0xa4, 0x24, 0x5b, 0x12, 0x11, 0x7b, 0xf9, 0xd3, 0xe5, 0x17, 0x97, 0xe5, 0x16, /* 0x8640, */
+	0x19, 0x97, 0x40, 0x0b, 0x12, 0x11, 0x73, 0xf8, 0xe6, 0xf5, 0x16, 0x08, 0xe6, 0xf5, 0x17, 0x05, /* 0x8650, */
+	0x0a, 0x02, 0x05, 0xf1, 0xe4, 0xfa, 0xf9, 0xf8, 0xaf, 0x0f, 0xae, 0x0e, 0xad, 0x0d, 0xac, 0x0c, /* 0x8660, */
+	0x12, 0x0b, 0x7b, 0x8e, 0x18, 0x8f, 0x19, 0xc3, 0xe5, 0x15, 0x95, 0x17, 0xff, 0xe5, 0x14, 0x95, /* 0x8670, */
+	0x16, 0xfe, 0xe5, 0x0b, 0x25, 0xe0, 0x24, 0x53, 0xf9, 0xd3, 0xe5, 0x15, 0x97, 0xe5, 0x14, 0x19, /* 0x8680, */
+	0x97, 0xe5, 0x0b, 0x40, 0x11, 0x25, 0xe0, 0x24, 0x53, 0xf8, 0xc3, 0xe5, 0x15, 0x96, 0xfd, 0xe5, /* 0x8690, */
+	0x14, 0x18, 0x96, 0xfc, 0x80, 0x0f, 0x25, 0xe0, 0x24, 0x53, 0xf8, 0xc3, 0xe6, 0x95, 0x15, 0xfd, /* 0x86a0, */
+	0x18, 0xe6, 0x95, 0x14, 0xfc, 0x8c, 0x1a, 0x8d, 0x1b, 0x12, 0x11, 0xf0, 0x12, 0x11, 0x6a, 0x90, /* 0x86b0, */
+	0x0e, 0x8e, 0x12, 0x11, 0x95, 0xe4, 0x85, 0x15, 0x13, 0x85, 0x14, 0x12, 0xf5, 0x11, 0xf5, 0x10, /* 0x86c0, */
+	0xaf, 0x13, 0xae, 0x12, 0x7b, 0x04, 0x12, 0x11, 0x58, 0xc3, 0x12, 0x0c, 0x0d, 0x50, 0x11, 0xaf, /* 0x86d0, */
+	0x0b, 0x74, 0x01, 0xa8, 0x07, 0x08, 0x80, 0x02, 0xc3, 0x33, /* 0x86e0, */
+};
+
+static u8 OV5645AF_addr_data_pair8[255] =
+{
+	/* 0x86ea */
+	0x86,
+	0xea,
+	0xd8, 0xfc, 0x78, 0xab, 0x26, 0xf6,
+	0xe4, 0x85, 0x1b, 0x0f, 0x85, 0x1a, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0x12, 0x11, 0x6a, 0x90, 0x0e, /* 0x86f0, */
+	0x92, 0x12, 0x11, 0x95, 0xe5, 0x0b, 0x25, 0xe0, 0x24, 0x53, 0xf9, 0xd3, 0xe5, 0x19, 0x97, 0xe5, /* 0x8700, */
+	0x18, 0x19, 0x97, 0x40, 0x0e, 0xe5, 0x0b, 0x25, 0xe0, 0x24, 0x52, 0xf8, 0xe6, 0xfe, 0x08, 0xe6, /* 0x8710, */
+	0xff, 0x80, 0x04, 0xae, 0x18, 0xaf, 0x19, 0xe4, 0x8f, 0x13, 0x8e, 0x12, 0xf5, 0x11, 0xf5, 0x10, /* 0x8720, */
+	0x7b, 0x10, 0x12, 0x11, 0x58, 0xd3, 0x12, 0x0c, 0x0d, 0x40, 0x11, 0xaf, 0x0b, 0x74, 0x01, 0xa8, /* 0x8730, */
+	0x07, 0x08, 0x80, 0x02, 0xc3, 0x33, 0xd8, 0xfc, 0x78, 0xac, 0x26, 0xf6, 0x05, 0x0b, 0xe5, 0x0b, /* 0x8740, */
+	0x64, 0x04, 0x60, 0x03, 0x02, 0x05, 0xd2, 0xe4, 0xf5, 0x0b, 0x12, 0x11, 0xfa, 0xfb, 0x12, 0x11, /* 0x8750, */
+	0xfa, 0xfa, 0x12, 0x11, 0xfa, 0x75, 0x18, 0x00, 0xf5, 0x19, 0x75, 0x0a, 0x01, 0x90, 0x0e, 0x99, /* 0x8760, */
+	0xe4, 0x93, 0xff, 0xe5, 0x0a, 0xc3, 0x9f, 0x50, 0x2a, 0x12, 0x11, 0x4b, 0x25, 0x19, 0xf5, 0x19, /* 0x8770, */
+	0xe4, 0x35, 0x18, 0xf5, 0x18, 0x12, 0x11, 0x4b, 0xfe, 0xeb, 0xc3, 0x9e, 0x50, 0x04, 0x12, 0x11, /* 0x8780, */
+	0x4b, 0xfb, 0x12, 0x11, 0x4b, 0xfe, 0xea, 0xd3, 0x9e, 0x40, 0x04, 0x12, 0x11, 0x4b, 0xfa, 0x05, /* 0x8790, */
+	0x0a, 0x80, 0xca, 0xef, 0xfd, 0x7c, 0x00, 0xae, 0x18, 0xaf, 0x19, 0x12, 0x0a, 0x9b, 0xc3, 0xeb, /* 0x87a0, */
+	0x9a, 0xfe, 0x74, 0xad, 0x25, 0x0b, 0xf8, 0xe6, 0xfd, 0xef, 0xd3, 0x9d, 0x74, 0xad, 0x40, 0x0b, /* 0x87b0, */
+	0x25, 0x0b, 0xf8, 0xe6, 0xfd, 0xc3, 0xef, 0x9d, 0xff, 0x80, 0x07, 0x25, 0x0b, 0xf8, 0xc3, 0xe6, /* 0x87c0, */
+	0x9f, 0xff, 0x8f, 0x1c, 0x90, 0x0e, 0x96, 0xe4, 0x93, 0xff, 0xee, 0xc3, 0x9f, 0x50, 0x0d, 0x12, /* 0x87d0, */
+	0x11, 0xe5, 0x80, 0x02, 0xc3, 0x33, 0xd8, /* 0x87e0, */
+};
+
+static u8 OV5645AF_addr_data_pair9[255] =
+{
+	/* 0x87e7 */
+	0x87,
+	0xe7,
+	0xfc, 0x78, 0xab, 0x26, 0xf6, 0x90, 0x0e, 0x97, 0xe4,
+	0x93, 0xff, 0xe5, 0x1c, 0xd3, 0x9f, 0x40, 0x0d, 0x12, 0x11, 0xe5, 0x80, 0x02, 0xc3, 0x33, 0xd8, /* 0x87f0, */
+	0xfc, 0x78, 0xac, 0x26, 0xf6, 0x74, 0xb0, 0x25, 0x0b, 0xf8, 0xa6, 0x1c, 0x05, 0x0b, 0xe5, 0x0b, /* 0x8800, */
+	0x64, 0x03, 0x60, 0x03, 0x02, 0x07, 0x5a, 0x78, 0xb1, 0xe6, 0xff, 0x18, 0xe6, 0x2f, 0xff, 0xe4, /* 0x8810, */
+	0x33, 0xfe, 0x78, 0xb2, 0xe6, 0x7c, 0x00, 0x2f, 0xf5, 0x1b, 0xec, 0x3e, 0xf5, 0x1a, 0x90, 0x0e, /* 0x8820, */
+	0x98, 0xe4, 0x93, 0xff, 0xd3, 0xe5, 0x1b, 0x9f, 0xe5, 0x1a, 0x94, 0x00, 0x40, 0x06, 0x78, 0xac, /* 0x8830, */
+	0x74, 0x80, 0x26, 0xf6, 0x78, 0xac, 0xe6, 0x79, 0xab, 0x57, 0xf6, 0xe5, 0x1e, 0xb4, 0x02, 0x0f, /* 0x8840, */
+	0x18, 0xe6, 0xb4, 0x7f, 0x0a, 0x08, 0xe6, 0xd3, 0x94, 0x00, 0x40, 0x03, 0x75, 0x1e, 0x05, 0x22, /* 0x8850, */
+	0x90, 0x0e, 0x89, 0x12, 0x0c, 0x44, 0x8f, 0x4d, 0x8e, 0x4c, 0x8d, 0x4b, 0x8c, 0x4a, 0x90, 0x38, /* 0x8860, */
+	0x04, 0x12, 0x14, 0xa8, 0xfb, 0xaa, 0x06, 0x90, 0x38, 0x00, 0x12, 0x14, 0xa8, 0xff, 0xc3, 0xeb, /* 0x8870, */
+	0x9f, 0xfb, 0xea, 0x9e, 0xfa, 0x90, 0x38, 0x10, 0xe0, 0xa3, 0xe0, 0x75, 0xf0, 0x02, 0xa4, 0xff, /* 0x8880, */
+	0xc3, 0xeb, 0x9f, 0xfb, 0xea, 0x95, 0xf0, 0xfa, 0x90, 0x38, 0x06, 0xe0, 0xfe, 0xa3, 0xe0, 0xfd, /* 0x8890, */
+	0xee, 0xf5, 0x0c, 0xed, 0xf5, 0x0d, 0x90, 0x38, 0x02, 0x12, 0x14, 0xa8, 0xff, 0x12, 0x14, 0x91, /* 0x88a0, */
+	0x90, 0x38, 0x12, 0xe0, 0xa3, 0xe0, 0x75, 0xf0, 0x02, 0xa4, 0xff, 0xae, 0xf0, 0x12, 0x14, 0x91, /* 0x88b0, */
+	0xa3, 0xe0, 0xb4, 0x31, 0x07, 0xea, 0xc3, 0x13, 0xfa, 0xeb, 0x13, 0xfb, 0x90, 0x38, 0x14, 0xe0, /* 0x88c0, */
+	0xb4, 0x71, 0x0f, 0xeb, 0xae, 0x02, 0x78, 0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xfb, /* 0x88d0, */
+	0xaa, 0x06, 0x90, 0x38, /* 0x88e0, */
+};
+
+static u8 OV5645AF_addr_data_pair10[255] =
+{
+	/* 0x88e4, */
+	0x88,
+	0xe4,
+	0x15, 0xe0, 0xb4, 0x31, 0x0b, 0xe5, 0x0c, 0xc3, 0x13, 0xf5, 0x0c, 0xe5,
+	0x0d, 0x13, 0xf5, 0x0d, 0x90, 0x38, 0x15, 0xe0, 0xb4, 0x71, 0x11, 0xe5, 0x0d, 0xae, 0x0c, 0x78, /* 0x88f0, */
+	0x02, 0xce, 0xc3, 0x13, 0xce, 0x13, 0xd8, 0xf9, 0xf5, 0x0d, 0x8e, 0x0c, 0xea, 0xc4, 0xf8, 0x54, /* 0x8900, */
+	0xf0, 0xc8, 0x68, 0xfa, 0xeb, 0xc4, 0x54, 0x0f, 0x48, 0xfb, 0xe5, 0x0c, 0xc4, 0xf8, 0x54, 0xf0, /* 0x8910, */
+	0xc8, 0x68, 0xf5, 0x0c, 0xe5, 0x0d, 0xc4, 0x54, 0x0f, 0x48, 0xf5, 0x0d, 0xe5, 0x41, 0x54, 0x10, /* 0x8920, */
+	0xd3, 0x94, 0x00, 0x40, 0x08, 0x85, 0x42, 0x4a, 0x85, 0x43, 0x4b, 0x80, 0x0b, 0x30, 0x39, 0x04, /* 0x8930, */
+	0x7f, 0x16, 0x80, 0x02, 0x7f, 0x1e, 0x8f, 0x4b, 0xaf, 0x4a, 0x12, 0x14, 0x76, 0xaf, 0x4b, 0x7e, /* 0x8940, */
+	0x00, 0xac, 0x0c, 0xad, 0x0d, 0x12, 0x14, 0x84, 0xfd, 0x7c, 0x00, 0xae, 0x0e, 0xaf, 0x0f, 0x12, /* 0x8950, */
+	0x0a, 0x9b, 0x8f, 0x4a, 0xae, 0x10, 0xaf, 0x11, 0x7c, 0x00, 0x30, 0x39, 0x04, 0x7d, 0x2d, 0x80, /* 0x8960, */
+	0x02, 0x7d, 0x3c, 0x12, 0x0a, 0x9b, 0x8f, 0x4b, 0x8b, 0x49, 0x85, 0x0d, 0x48, 0xaf, 0x4c, 0x12, /* 0x8970, */
+	0x14, 0x76, 0xaf, 0x4d, 0x7e, 0x00, 0x12, 0x14, 0x84, 0xfb, 0xae, 0x0e, 0xaf, 0x0f, 0xfd, 0x7c, /* 0x8980, */
+	0x00, 0x12, 0x0a, 0x9b, 0x8f, 0x4c, 0xae, 0x10, 0xaf, 0x11, 0xad, 0x03, 0x7c, 0x00, 0x12, 0x0a, /* 0x8990, */
+	0x9b, 0x8f, 0x4d, 0xe5, 0x4c, 0x75, 0xf0, 0x02, 0xa4, 0xad, 0x49, 0x7c, 0x00, 0xd3, 0x9d, 0x74, /* 0x89a0, */
+	0x80, 0xf8, 0x65, 0xf0, 0x98, 0x40, 0x05, 0xe5, 0x49, 0x13, 0xf5, 0x4c, 0xe5, 0x4d, 0x75, 0xf0, /* 0x89b0, */
+	0x02, 0xa4, 0xd3, 0x95, 0x48, 0x74, 0x80, 0xf8, 0x65, 0xf0, 0x98, 0x40, 0x05, 0xe5, 0x48, 0x13, /* 0x89c0, */
+	0xf5, 0x4d, 0xe5, 0x4a, 0xc3, 0x95, 0x4c, 0x50, 0x03, 0x85, 0x4c, 0x4a, 0xe5, 0x4b, 0xc3, 0x95, /* 0x89d0, */
+	0x4d, /* 0x89e0, */
+};
+
+static u8 OV5645AF_addr_data_pair11[255] =
+{
+	/* 0x89e1 */
+	0x89,
+	0xe1,
+	0x50, 0x03, 0x85, 0x4d, 0x4b, 0xe5, 0x4a, 0x25, 0x4c, 0xff, 0xe4, 0x33, 0xfe, 0xd3, 0xef,
+	0x9d, 0xec, 0x64, 0x80, 0xf8, 0xee, 0x64, 0x80, 0x98, 0x40, 0x06, 0xe5, 0x49, 0x95, 0x4c, 0xf5, /* 0x89f0, */
+	0x4a, 0xe5, 0x4b, 0x25, 0x4d, 0xff, 0xe4, 0x33, 0xfe, 0xd3, 0xef, 0x95, 0x48, 0x74, 0x80, 0xf8, /* 0x8a00, */
+	0x6e, 0x98, 0x40, 0x06, 0xe5, 0x48, 0x95, 0x4d, 0xf5, 0x4b, 0xc3, 0xe5, 0x4a, 0x95, 0x4c, 0xf5, /* 0x8a10, */
+	0x0a, 0xc3, 0xe5, 0x4b, 0x95, 0x4d, 0xf5, 0x0b, 0xe5, 0x4a, 0x25, 0x4c, 0xf9, 0xe5, 0x4b, 0x25, /* 0x8a20, */
+	0x4d, 0xfd, 0x90, 0x60, 0x01, 0xe4, 0xf0, 0xa3, 0xf0, 0xa3, 0xe5, 0x49, 0xf0, 0xa3, 0xe5, 0x48, /* 0x8a30, */
+	0xf0, 0x7c, 0x01, 0xec, 0x75, 0xf0, 0x04, 0xa4, 0xff, 0x24, 0x01, 0x12, 0x14, 0x9d, 0xe5, 0x0a, /* 0x8a40, */
+	0xf0, 0xef, 0x24, 0x02, 0xff, 0xee, 0x34, 0x60, 0x8f, 0x82, 0xf5, 0x83, 0xe5, 0x0b, 0xf0, 0xec, /* 0x8a50, */
+	0x75, 0xf0, 0x04, 0xa4, 0xff, 0x24, 0x03, 0x12, 0x14, 0x9d, 0xe9, 0xf0, 0xef, 0x24, 0x04, 0xff, /* 0x8a60, */
+	0xee, 0x34, 0x60, 0x8f, 0x82, 0xf5, 0x83, 0xed, 0xf0, 0x0c, 0xbc, 0x05, 0xc6, 0x90, 0x30, 0x01, /* 0x8a70, */
+	0xe0, 0x44, 0x40, 0xf0, 0xe0, 0x54, 0xbf, 0xf0, 0x22, 0xef, 0x8d, 0xf0, 0xa4, 0xa8, 0xf0, 0xcf, /* 0x8a80, */
+	0x8c, 0xf0, 0xa4, 0x28, 0xce, 0x8d, 0xf0, 0xa4, 0x2e, 0xfe, 0x22, 0xbc, 0x00, 0x0b, 0xbe, 0x00, /* 0x8a90, */
+	0x29, 0xef, 0x8d, 0xf0, 0x84, 0xff, 0xad, 0xf0, 0x22, 0xe4, 0xcc, 0xf8, 0x75, 0xf0, 0x08, 0xef, /* 0x8aa0, */
+	0x2f, 0xff, 0xee, 0x33, 0xfe, 0xec, 0x33, 0xfc, 0xee, 0x9d, 0xec, 0x98, 0x40, 0x05, 0xfc, 0xee, /* 0x8ab0, */
+	0x9d, 0xfe, 0x0f, 0xd5, 0xf0, 0xe9, 0xe4, 0xce, 0xfd, 0x22, 0xed, 0xf8, 0xf5, 0xf0, 0xee, 0x84, /* 0x8ac0, */
+	0x20, 0xd2, 0x1c, 0xfe, 0xad, 0xf0, 0x75, 0xf0, 0x08, 0xef, 0x2f, 0xff, 0xed, 0x33, /* 0x8ad0, */
+};
+
+static u8 OV5645AF_addr_data_pair12[255] =
+{
+	/* 0x8ade */
+	0x8a,
+	0xde,
+	0xfd, 0x40,
+	0x07, 0x98, 0x50, 0x06, 0xd5, 0xf0, 0xf2, 0x22, 0xc3, 0x98, 0xfd, 0x0f, 0xd5, 0xf0, 0xea, 0x22, /* 0x8ae0, */
+	0xe8, 0x8f, 0xf0, 0xa4, 0xcc, 0x8b, 0xf0, 0xa4, 0x2c, 0xfc, 0xe9, 0x8e, 0xf0, 0xa4, 0x2c, 0xfc, /* 0x8af0, */
+	0x8a, 0xf0, 0xed, 0xa4, 0x2c, 0xfc, 0xea, 0x8e, 0xf0, 0xa4, 0xcd, 0xa8, 0xf0, 0x8b, 0xf0, 0xa4, /* 0x8b00, */
+	0x2d, 0xcc, 0x38, 0x25, 0xf0, 0xfd, 0xe9, 0x8f, 0xf0, 0xa4, 0x2c, 0xcd, 0x35, 0xf0, 0xfc, 0xeb, /* 0x8b10, */
+	0x8e, 0xf0, 0xa4, 0xfe, 0xa9, 0xf0, 0xeb, 0x8f, 0xf0, 0xa4, 0xcf, 0xc5, 0xf0, 0x2e, 0xcd, 0x39, /* 0x8b20, */
+	0xfe, 0xe4, 0x3c, 0xfc, 0xea, 0xa4, 0x2d, 0xce, 0x35, 0xf0, 0xfd, 0xe4, 0x3c, 0xfc, 0x22, 0x75, /* 0x8b30, */
+	0xf0, 0x08, 0x75, 0x82, 0x00, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xcd, 0x33, 0xcd, 0xcc, 0x33, /* 0x8b40, */
+	0xcc, 0xc5, 0x82, 0x33, 0xc5, 0x82, 0x9b, 0xed, 0x9a, 0xec, 0x99, 0xe5, 0x82, 0x98, 0x40, 0x0c, /* 0x8b50, */
+	0xf5, 0x82, 0xee, 0x9b, 0xfe, 0xed, 0x9a, 0xfd, 0xec, 0x99, 0xfc, 0x0f, 0xd5, 0xf0, 0xd6, 0xe4, /* 0x8b60, */
+	0xce, 0xfb, 0xe4, 0xcd, 0xfa, 0xe4, 0xcc, 0xf9, 0xa8, 0x82, 0x22, 0xb8, 0x00, 0xc1, 0xb9, 0x00, /* 0x8b70, */
+	0x59, 0xba, 0x00, 0x2d, 0xec, 0x8b, 0xf0, 0x84, 0xcf, 0xce, 0xcd, 0xfc, 0xe5, 0xf0, 0xcb, 0xf9, /* 0x8b80, */
+	0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xeb, 0x33, /* 0x8b90, */
+	0xfb, 0x10, 0xd7, 0x03, 0x99, 0x40, 0x04, 0xeb, 0x99, 0xfb, 0x0f, 0xd8, 0xe5, 0xe4, 0xf9, 0xfa, /* 0x8ba0, */
+	0x22, 0x78, 0x18, 0xef, 0x2f, 0xff, 0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, 0xfc, 0xc9, /* 0x8bb0, */
+	0x33, 0xc9, 0x10, 0xd7, 0x05, 0x9b, 0xe9, 0x9a, 0x40, 0x07, 0xec, 0x9b, 0xfc, 0xe9, 0x9a, 0xf9, /* 0x8bc0, */
+	0x0f, 0xd8, 0xe0, 0xe4, 0xc9, 0xfa, 0xe4, 0xcc, 0xfb, 0x22, 0x75, /* 0x8bd0, */
+};
+
+static u8 OV5645AF_addr_data_pair13[255] =
+{
+	/* 0x8bdb */
+	0x8b,
+	0xdb,
+	0xf0, 0x10, 0xef, 0x2f, 0xff,
+	0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xcc, 0x33, 0xcc, 0xc8, 0x33, 0xc8, 0x10, 0xd7, 0x07, 0x9b, /* 0x8be0, */
+	0xec, 0x9a, 0xe8, 0x99, 0x40, 0x0a, 0xed, 0x9b, 0xfd, 0xec, 0x9a, 0xfc, 0xe8, 0x99, 0xf8, 0x0f, /* 0x8bf0, */
+	0xd5, 0xf0, 0xda, 0xe4, 0xcd, 0xfb, 0xe4, 0xcc, 0xfa, 0xe4, 0xc8, 0xf9, 0x22, 0xeb, 0x9f, 0xf5, /* 0x8c00, */
+	0xf0, 0xea, 0x9e, 0x42, 0xf0, 0xe9, 0x9d, 0x42, 0xf0, 0xe8, 0x9c, 0x45, 0xf0, 0x22, 0xe8, 0x60, /* 0x8c10, */
+	0x0f, 0xec, 0xc3, 0x13, 0xfc, 0xed, 0x13, 0xfd, 0xee, 0x13, 0xfe, 0xef, 0x13, 0xff, 0xd8, 0xf1, /* 0x8c20, */
+	0x22, 0xe8, 0x60, 0x0f, 0xef, 0xc3, 0x33, 0xff, 0xee, 0x33, 0xfe, 0xed, 0x33, 0xfd, 0xec, 0x33, /* 0x8c30, */
+	0xfc, 0xd8, 0xf1, 0x22, 0xe4, 0x93, 0xfc, 0x74, 0x01, 0x93, 0xfd, 0x74, 0x02, 0x93, 0xfe, 0x74, /* 0x8c40, */
+	0x03, 0x93, 0xff, 0x22, 0xa4, 0x25, 0x82, 0xf5, 0x82, 0xe5, 0xf0, 0x35, 0x83, 0xf5, 0x83, 0x22, /* 0x8c50, */
+	0xd0, 0x83, 0xd0, 0x82, 0xf8, 0xe4, 0x93, 0x70, 0x12, 0x74, 0x01, 0x93, 0x70, 0x0d, 0xa3, 0xa3, /* 0x8c60, */
+	0x93, 0xf8, 0x74, 0x01, 0x93, 0xf5, 0x82, 0x88, 0x83, 0xe4, 0x73, 0x74, 0x02, 0x93, 0x68, 0x60, /* 0x8c70, */
+	0xef, 0xa3, 0xa3, 0xa3, 0x80, 0xdf, 0x90, 0x0e, 0x9a, 0x12, 0x0f, 0x65, 0x78, 0x98, 0xe6, 0xf5, /* 0x8c80, */
+	0x0f, 0x08, 0xe6, 0xf5, 0x10, 0xe4, 0xfd, 0xed, 0xc3, 0x94, 0x08, 0x50, 0x18, 0xe5, 0x10, 0x94, /* 0x8c90, */
+	0x00, 0xe5, 0x0f, 0x94, 0x78, 0x50, 0x0e, 0xe5, 0x10, 0x25, 0xe0, 0xf5, 0x10, 0xe5, 0x0f, 0x33, /* 0x8ca0, */
+	0xf5, 0x0f, 0x1d, 0x80, 0xe2, 0xc3, 0x74, 0x07, 0x9d, 0xfd, 0xc3, 0x94, 0x00, 0x50, 0x02, 0xe4, /* 0x8cb0, */
+	0xfd, 0x12, 0x0e, 0xca, 0xed, 0x90, 0x0d, 0xd5, 0x12, 0x0f, 0x8a, 0x12, 0x0a, 0xf0, 0x12, 0x0e, /* 0x8cc0, */
+	0xc2, 0xc0, 0x00, 0x78, 0xd0, 0xe6, 0x12, 0x0f, /* 0x8cd0, */
+};
+
+static u8 OV5645AF_addr_data_pair14[255] =
+{
+	/* 0x8cd8 */
+	0x8c,
+	0xd8,
+	0x25, 0xff, 0x33, 0x95, 0xe0, 0xfe, 0x74, 0xc4,
+	0x2f, 0xf5, 0x82, 0x74, 0x0d, 0x12, 0x0f, 0x39, 0xd0, 0x00, 0x12, 0x0a, 0xf0, 0x12, 0x0e, 0xc2, /* 0x8ce0, */
+	0xc0, 0x00, 0xc0, 0x01, 0xc3, 0x79, 0xbf, 0xe7, 0x78, 0xbe, 0x96, 0x12, 0x0f, 0x25, 0xff, 0x33, /* 0x8cf0, */
+	0x95, 0xe0, 0xfe, 0x74, 0xb3, 0x2f, 0xf5, 0x82, 0x74, 0x0d, 0x12, 0x0f, 0x39, 0xd0, 0x01, 0xd0, /* 0x8d00, */
+	0x00, 0x12, 0x0e, 0xb2, 0x90, 0x0d, 0xee, 0x12, 0x0f, 0x89, 0x12, 0x0e, 0xb2, 0xc0, 0x00, 0xc0, /* 0x8d10, */
+	0x01, 0xc3, 0x79, 0xcf, 0xe7, 0x78, 0xce, 0x96, 0x12, 0x0f, 0x25, 0xff, 0x33, 0x95, 0xe0, 0xfe, /* 0x8d20, */
+	0x74, 0xdd, 0x2f, 0xf5, 0x82, 0x74, 0x0d, 0x12, 0x0f, 0x39, 0xd0, 0x01, 0xd0, 0x00, 0x12, 0x0f, /* 0x8d30, */
+	0x44, 0x78, 0x0e, 0x12, 0x0e, 0xbf, 0xc0, 0x00, 0x78, 0x98, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0xe4, /* 0x8d40, */
+	0xfc, 0xfd, 0xd0, 0x00, 0x12, 0x0f, 0x44, 0x78, 0x0e, 0x12, 0x0c, 0x1e, 0x12, 0x0f, 0x47, 0x90, /* 0x8d50, */
+	0x0e, 0x9b, 0x12, 0x0f, 0x89, 0x12, 0x0e, 0xca, 0xc3, 0x12, 0x0c, 0x0d, 0x50, 0x06, 0x90, 0x0e, /* 0x8d60, */
+	0x9b, 0x12, 0x0f, 0x65, 0x78, 0xc9, 0xe6, 0x12, 0x0e, 0xdf, 0xfe, 0x08, 0xe6, 0xff, 0xe4, 0xfc, /* 0x8d70, */
+	0xfd, 0x12, 0x0e, 0xca, 0xd3, 0x12, 0x0c, 0x0d, 0x40, 0x07, 0xe4, 0xf5, 0x0f, 0xf5, 0x10, 0x80, /* 0x8d80, */
+	0x1a, 0x85, 0x0d, 0x0f, 0x85, 0x0e, 0x10, 0x78, 0xc9, 0xe6, 0x25, 0xe0, 0x24, 0x57, 0xf8, 0xc3, /* 0x8d90, */
+	0xe6, 0x95, 0x10, 0xf5, 0x10, 0x18, 0xe6, 0x95, 0x0f, 0xf5, 0x0f, 0x78, 0x9c, 0xa6, 0x0f, 0x08, /* 0x8da0, */
+	0xa6, 0x10, 0x22, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, /* 0x8db0, */
+	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, /* 0x8dc0, */
+	0x80, 0x80, 0x80, 0x80, 0x80, /* 0x8dd0, */
+};
+
+static u8 OV5645AF_addr_data_pair15[255] =
+{
+	/* 0x8dd5, */
+	0x8d,
+	0xd5,
+	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x10, 0x18, 0x20,
+	0x28, 0x30, 0x38, 0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78, 0x80, 0x80, 0x80, 0x80, 0x80, /* 0x8de0, */
+	0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /* 0x8df0, */
+	0x13, 0x04, 0x26, 0x15, 0x01, 0x36, 0x4f, 0x56, 0x54, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43, 0x01, /* 0x8e00, */
+	0x10, 0x00, 0x56, 0x45, 0x1a, 0x30, 0x29, 0x7e, 0x00, 0x30, 0x04, 0x20, 0xdf, 0x30, 0x05, 0x40, /* 0x8e10, */
+	0xbf, 0x50, 0x03, 0x00, 0xfd, 0x50, 0x27, 0x01, 0xfe, 0x60, 0x00, 0x13, 0x00, 0x36, 0x06, 0x07, /* 0x8e20, */
+	0x00, 0x3f, 0x05, 0x30, 0x00, 0x3f, 0x06, 0x22, 0x00, 0x3f, 0x08, 0x00, 0x00, 0x3f, 0x09, 0x00, /* 0x8e30, */
+	0x00, 0x3f, 0x0a, 0x00, 0x00, 0x3f, 0x0b, 0x0f, 0x00, 0x3f, 0x01, 0x2a, 0x00, 0x3f, 0x02, 0x00, /* 0x8e40, */
+	0x00, 0x30, 0x01, 0x40, 0xbf, 0x30, 0x01, 0x00, 0xbf, 0x30, 0x29, 0x70, 0x00, 0x3a, 0x00, 0x00, /* 0x8e50, */
+	0xff, 0x3a, 0x00, 0x00, 0xff, 0x36, 0x03, 0x36, 0x02, 0x41, 0x44, 0x58, 0x20, 0x18, 0x10, 0x0a, /* 0x8e60, */
+	0x04, 0x04, 0x00, 0x03, 0xff, 0x64, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, /* 0x8e70, */
+	0x04, 0x06, 0x06, 0x00, 0x02, 0x64, 0x00, 0xcc, 0x50, 0x28, 0x1e, 0x08, 0x08, 0x01, 0x1e, 0x1e, /* 0x8e80,8e84 */
+	0x1e, 0x1e, 0x68, 0x68, 0x68, 0x68, 0x03, 0x05, 0x0a, 0x08, 0x10, 0x01, 0x0a, 0x06, 0x06, 0x05, /* 0x8e90,98/98 9/5 */
+	0x05, 0x05, 0x05, 0x04, 0x04, 0x04, 0x04, 0x04, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x00, 0xa5, /* 0x8ea0, */
+	0x5a, 0x00, 0x12, 0x0a, 0xf0, 0x8f, 0x0e, 0x8e, 0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0x78, 0x07, 0x12, /* 0x8eb0, */
+	0x0c, 0x1e, 0x8f, 0x0e, 0x8e, 0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0xab, 0x0e, 0xaa, 0x0d, 0xa9, 0x0c, /* 0x8ec0, */
+	0xa8, 0x0b, /* 0x8ed0, */
+};
+
+static u8 OV5645AF_addr_data_pair16[255] =
+{
+	/* 0x8ed2 */
+	0x8e,
+	0xd2,
+	0x22, 0xef, 0x25, 0xe0, 0x24, 0x56, 0xf8, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0xee, 0x25,
+	0xe0, 0x24, 0x56, 0xf8, 0xe6, 0x22, 0x78, 0xce, 0xf9, 0xc3, 0xe7, 0x64, 0x80, 0xf5, 0xf0, 0xe6, /* 0x8ee0, */
+	0x64, 0x80, 0x95, 0xf0, 0x22, 0x78, 0xcb, 0xe6, 0x78, 0x9d, 0x25, 0xe0, 0x24, 0x57, 0xf9, 0xd3, /* 0x8ef0, */
+	0xe7, 0x96, 0x19, 0xe7, 0x18, 0x96, 0x22, 0x78, 0xcf, 0xf9, 0xd3, 0xe7, 0x64, 0x80, 0xf5, 0xf0, /* 0x8f00, */
+	0xe6, 0x64, 0x80, 0x95, 0xf0, 0x22, 0xd3, 0x78, 0xc1, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x22, 0x78, /* 0x8f10, */
+	0xc1, 0xe6, 0xf4, 0x04, 0xff, 0xa2, 0xe7, 0x13, 0xa2, 0xe7, 0x13, 0x22, 0xa6, 0x06, 0x08, 0xa6, /* 0x8f20, */
+	0x07, 0x78, 0x9a, 0xe6, 0xfe, 0x08, 0xe6, 0xff, 0x22, 0x3e, 0xf5, 0x83, 0xe4, 0x93, 0xff, 0xe4, /* 0x8f30, */
+	0xfc, 0xfd, 0xfe, 0x22, 0x12, 0x0a, 0xf0, 0x8f, 0x0e, 0x8e, 0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0x22, /* 0x8f40, */
+	0x78, 0xc9, 0xe6, 0x24, 0x9e, 0xf8, 0xe6, 0x78, 0xd0, 0xf6, 0x22, 0xc3, 0xe6, 0x64, 0x80, 0xf8, /* 0x8f50, */
+	0xef, 0x64, 0x80, 0x98, 0x22, 0xe4, 0x93, 0xff, 0xe4, 0x8f, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0xf5, /* 0x8f60, */
+	0x0b, 0x22, 0x78, 0xc1, 0xe6, 0xf4, 0x04, 0xf6, 0x22, 0xfa, 0x08, 0xe6, 0xc3, 0x9d, 0xea, 0x9c, /* 0x8f70, */
+	0x22, 0xf6, 0xd3, 0xe6, 0x64, 0x80, 0x94, 0x80, 0x22, 0xe4, 0x93, 0xff, 0xe4, 0xfc, 0xfd, 0xfe, /* 0x8f80, */
+	0x22, 0x78, 0x98, 0xa6, 0x06, 0x08, 0xa6, 0x07, 0x22, 0x78, 0xc5, 0xe6, 0x24, 0x9e, 0xf8, 0x22, /* 0x8f90, */
+	0x78, 0xd0, 0xe6, 0x78, 0xc4, 0xf6, 0x22, 0x85, 0x28, 0x46, 0x90, 0x30, 0x24, 0xe0, 0xf5, 0x42, /* 0x8fa0, */
+	0xa3, 0xe0, 0xf5, 0x43, 0xa3, 0xe0, 0xf5, 0x44, 0xa3, 0xe0, 0xf5, 0x45, 0xa3, 0xe0, 0xf5, 0x41, /* 0x8fb0, */
+	0xd2, 0x35, 0xe5, 0x46, 0x12, 0x0c, 0x60, 0x0f, 0xf2, 0x03, 0x0f, 0xff, 0x04, 0x10, 0x10, /* 0x8fc0, */
+};
+
+static u8 OV5645AF_addr_data_pair17[255] =
+{
+	/* 0x8fcf, */
+	0x8f,
+	0xcf,
+	0x05,
+	0x10, 0x13, 0x06, 0x10, 0x63, 0x07, 0x10, 0x1c, 0x08, 0x10, 0x31, 0x12, 0x10, 0x40, 0x1a, 0x10, /* 0x8fd0, */
+	0x4b, 0x1b, 0x10, 0x31, 0x80, 0x10, 0x2c, 0x81, 0x10, 0x63, 0xdc, 0x10, 0x53, 0xec, 0x00, 0x00, /* 0x8fe0, */
+	0x10, 0x7e, 0x12, 0x15, 0x4e, 0xd2, 0x37, 0xd2, 0x01, 0xc2, 0x02, 0x12, 0x15, 0x53, 0x22, 0xd2, /* 0x8ff0, */
+	0x34, 0xd2, 0x37, 0xe5, 0x42, 0xd3, 0x94, 0x00, 0x40, 0x03, 0x12, 0x15, 0x4e, 0xd2, 0x03, 0x22, /* 0x9000, */
+	0xd2, 0x03, 0x22, 0xc2, 0x03, 0x20, 0x01, 0x66, 0x30, 0x02, 0x48, 0x22, 0xc2, 0x01, 0xc2, 0x02, /* 0x9010, */
+	0xc2, 0x03, 0x12, 0x13, 0xc5, 0x75, 0x1d, 0x70, 0xd2, 0x36, 0x80, 0x37, 0x43, 0x41, 0x10, 0x80, /* 0x9020, */
+	0x0a, 0xe5, 0x41, 0x70, 0x03, 0xc3, 0x80, 0x01, 0xd3, 0x92, 0x39, 0x12, 0x08, 0x60, 0x80, 0x23, /* 0x9030, */
+	0x85, 0x45, 0x4e, 0x85, 0x41, 0x4f, 0x12, 0x12, 0xaf, 0x80, 0x18, 0x85, 0x4e, 0x45, 0x85, 0x4f, /* 0x9040, */
+	0x41, 0x80, 0x10, 0xc2, 0xaf, 0x85, 0x2a, 0x42, 0x85, 0x2b, 0x43, 0x85, 0x2c, 0x44, 0x85, 0x2d, /* 0x9050, */
+	0x45, 0xd2, 0xaf, 0x90, 0x30, 0x24, 0xe5, 0x42, 0xf0, 0xa3, 0xe5, 0x43, 0xf0, 0xa3, 0xe5, 0x44, /* 0x9060, */
+	0xf0, 0xa3, 0xe5, 0x45, 0xf0, 0xa3, 0xe5, 0x41, 0xf0, 0x90, 0x30, 0x23, 0xe4, 0xf0, 0x22, 0x78, /* 0x9070, */
+	0xc8, 0xe6, 0xf5, 0x0b, 0x18, 0xe6, 0xf5, 0x0c, 0xe4, 0xf5, 0x0d, 0xf5, 0x0e, 0xf5, 0x0f, 0xf9, /* 0x9080, */
+	0x78, 0xc9, 0xe6, 0x08, 0xf6, 0x78, 0xc7, 0xe6, 0xff, 0x04, 0xfe, 0x78, 0xc8, 0x12, 0x0f, 0x5b, /* 0x9090, */
+	0x50, 0x54, 0x12, 0x0e, 0xd3, 0xfa, 0x08, 0xe6, 0xd3, 0x9d, 0xea, 0x9c, 0x40, 0x14, 0x05, 0x0f, /* 0x90a0, */
+	0xd3, 0xe5, 0x0e, 0x64, 0x80, 0xf8, 0xe9, 0x64, 0x80, 0x98, 0x40, 0x02, 0x89, 0x0e, 0xe4, 0xf9, /* 0x90b0, */
+	0x80, 0x1b, 0x12, 0x0e, 0xd3, 0x12, 0x0f, 0x79, 0x50, 0x13, 0x09, 0xe5, /* 0x90c0, */
+};
+
+static u8 OV5645AF_addr_data_pair18[255] =
+{
+	/* 0x90cc, */
+	0x90,
+	0xcc,
+	0x0d, 0x64, 0x80, 0xf8,
+	0xe5, 0x0f, 0x64, 0x80, 0x98, 0x40, 0x03, 0x85, 0x0f, 0x0d, 0xe4, 0xf5, 0x0f, 0x78, 0xc9, 0xe6, /* 0x90d0, */
+	0x12, 0x0e, 0xd4, 0xfa, 0x08, 0xe6, 0xb5, 0x05, 0x08, 0xea, 0xb5, 0x04, 0x04, 0x78, 0xca, 0xa6, /* 0x90e0, */
+	0x06, 0x0f, 0x0e, 0x02, 0x10, 0x9b, 0x78, 0xc7, 0xe6, 0xf5, 0x0c, 0xe6, 0x04, 0xff, 0x78, 0xc9, /* 0x90f0, */
+	0x12, 0x0f, 0x5b, 0x50, 0x17, 0xe5, 0x0c, 0x12, 0x0e, 0xdf, 0xfc, 0x08, 0xe6, 0xfd, 0xef, 0x12, /* 0x9100, */
+	0x0e, 0xdf, 0x12, 0x0f, 0x79, 0x50, 0x02, 0x8f, 0x0c, 0x0f, 0x80, 0xe2, 0x78, 0xc8, 0xe6, 0xf5, /* 0x9110, */
+	0x0b, 0xe6, 0x14, 0xff, 0x78, 0xca, 0xd3, 0x12, 0x0f, 0x5c, 0x40, 0x17, 0xe5, 0x0b, 0x12, 0x0e, /* 0x9120, */
+	0xdf, 0xfc, 0x08, 0xe6, 0xfd, 0xef, 0x12, 0x0e, 0xdf, 0x12, 0x0f, 0x79, 0x50, 0x02, 0x8f, 0x0b, /* 0x9130, */
+	0x1f, 0x80, 0xe1, 0x78, 0xcb, 0xa6, 0x0c, 0x08, 0xa6, 0x0b, 0x22, 0xe5, 0x0a, 0x75, 0xf0, 0x03, /* 0x9140, */
+	0xa4, 0x24, 0xb3, 0x25, 0x0b, 0xf8, 0xe6, 0x22, 0xad, 0x11, 0xac, 0x10, 0xfa, 0xf9, 0xf8, 0x12, /* 0x9150, */
+	0x0a, 0xf0, 0x8f, 0x13, 0x8e, 0x12, 0x8d, 0x11, 0x8c, 0x10, 0xab, 0x0f, 0xaa, 0x0e, 0xa9, 0x0d, /* 0x9160, */
+	0xa8, 0x0c, 0x22, 0xe5, 0x0a, 0x75, 0xf0, 0x08, 0xa4, 0x24, 0x5a, 0xf8, 0xe5, 0x0b, 0x25, 0xe0, /* 0x9170, */
+	0x28, 0x22, 0xa6, 0x04, 0x08, 0xa6, 0x05, 0xef, 0x25, 0xe0, 0x25, 0xe0, 0x24, 0x2c, 0xf8, 0xe6, /* 0x9180, */
+	0xfe, 0x08, 0xe6, 0xff, 0x22, 0xe5, 0x0b, 0x93, 0xff, 0xe4, 0xfc, 0xfd, 0xfe, 0x12, 0x0a, 0xf0, /* 0x9190, */
+	0x8f, 0x0f, 0x8e, 0x0e, 0x8d, 0x0d, 0x8c, 0x0c, 0x22, 0x90, 0x0e, 0x8d, 0xe4, 0x93, 0xff, 0x25, /* 0x91a0, */
+	0xe0, 0x25, 0xe0, 0x24, 0x2a, 0xf8, 0xe6, 0xfc, 0x08, 0xe6, 0xfd, 0x22, 0x78, 0xaa, 0xe6, 0x75, /* 0x91b0, */
+	0xf0, 0x08, 0xa4, 0x22, 0xf8, 0xa6, 0x33, 0x78, 0xaa, /* 0x91c0, */
+};
+
+static u8 OV5645AF_addr_data_pair19[255] =
+{
+	/* 0x91c9 */
+	0x91,
+	0xc9,
+	0xe6, 0x75, 0xf0, 0x03, 0xa4, 0x22, 0xe5,
+	0x0b, 0x25, 0xe0, 0x24, 0x5a, 0xf8, 0xe6, 0x22, 0x08, 0xa6, 0x2a, 0x08, 0xa6, 0x2b, 0x08, 0xa6, /* 0x91d0, */
+	0x2c, 0x08, 0xa6, 0x2d, 0x22, 0xe5, 0x0b, 0x24, 0x04, 0xff, 0x74, 0x01, 0xa8, 0x07, 0x08, 0x22, /* 0x91e0, */
+	0xe4, 0x8f, 0x0f, 0x8e, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0x22, 0x74, 0xb3, 0x25, 0x0b, 0xf8, 0xe6, /* 0x91f0, */
+	0x22, 0xc0, 0xe0, 0xc0, 0x83, 0xc0, 0x82, 0xc0, 0xd0, 0x90, 0x3f, 0x0c, 0xe0, 0xf5, 0x08, 0xe5, /* 0x9200, */
+	0x08, 0x30, 0xe3, 0x60, 0x30, 0x37, 0x52, 0x90, 0x60, 0x19, 0xe0, 0xf5, 0x2a, 0xa3, 0xe0, 0xf5, /* 0x9210, */
+	0x2b, 0x90, 0x60, 0x1d, 0xe0, 0xf5, 0x2c, 0xa3, 0xe0, 0xf5, 0x2d, 0x90, 0x60, 0x21, 0xe0, 0xf5, /* 0x9220, */
+	0x2e, 0xa3, 0xe0, 0xf5, 0x2f, 0x90, 0x60, 0x25, 0xe0, 0xf5, 0x30, 0xa3, 0xe0, 0xf5, 0x31, 0x30, /* 0x9230, */
+	0x01, 0x06, 0x30, 0x34, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x09, 0x30, 0x02, 0x06, 0x30, 0x34, /* 0x9240, */
+	0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x0a, 0x30, 0x34, 0x0c, 0x30, 0x03, 0x09, 0x20, 0x02, 0x06, /* 0x9250, */
+	0x20, 0x01, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x0b, 0x90, 0x30, 0x01, 0xe0, 0x44, 0x40, 0xf0, /* 0x9260, */
+	0xe0, 0x54, 0xbf, 0xf0, 0xe5, 0x08, 0x30, 0xe1, 0x14, 0x30, 0x35, 0x11, 0x90, 0x30, 0x22, 0xe0, /* 0x9270, */
+	0xf5, 0x28, 0xe4, 0xf0, 0x30, 0x00, 0x03, 0xd3, 0x80, 0x01, 0xc3, 0x92, 0x08, 0xe5, 0x08, 0x30, /* 0x9280, */
+	0xe2, 0x0e, 0x90, 0x51, 0xa5, 0xe0, 0xf5, 0x33, 0xa3, 0xe0, 0xf5, 0x34, 0xa3, 0xe0, 0xf5, 0x35, /* 0x9290, */
+	0x90, 0x3f, 0x0c, 0xe5, 0x08, 0xf0, 0xd0, 0xd0, 0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xe0, 0x32, 0xe5, /* 0x92a0, */
+	0x4f, 0xd3, 0x94, 0x40, 0x40, 0x04, 0x7f, 0x40, 0x80, 0x02, 0xaf, 0x4f, 0x8f, 0x4f, 0x90, 0x0e, /* 0x92b0, */
+	0x86, 0xe4, 0x93, 0xfe, 0x74, 0x01, /* 0x92c0, */
+};
+
+static u8 OV5645AF_addr_data_pair20[255] =
+{
+	/* 0x92c6, */
+	0x92,
+	0xc6,
+	0x93, 0xff, 0xc3, 0x90, 0x0e, 0x84, 0x74, 0x01, 0x93, 0x9f,
+	0xff, 0xe4, 0x93, 0x9e, 0xfe, 0xe4, 0x8f, 0x12, 0x8e, 0x11, 0xf5, 0x10, 0xf5, 0x0f, 0xab, 0x12, /* 0x92d0, */
+	0xaa, 0x11, 0xa9, 0x10, 0xa8, 0x0f, 0xaf, 0x4f, 0xfc, 0xfd, 0xfe, 0x12, 0x0a, 0xf0, 0x12, 0x14, /* 0x92e0, */
+	0xfd, 0xe4, 0x7b, 0x40, 0xfa, 0xf9, 0xf8, 0x12, 0x0b, 0x7b, 0x12, 0x14, 0xfd, 0x90, 0x0e, 0x71, /* 0x92f0, */
+	0xe4, 0x12, 0x15, 0x12, 0x12, 0x14, 0xfd, 0xe4, 0x85, 0x4e, 0x0e, 0xf5, 0x0d, 0xf5, 0x0c, 0xf5, /* 0x9300, */
+	0x0b, 0xaf, 0x0e, 0xae, 0x0d, 0xad, 0x0c, 0xac, 0x0b, 0xa3, 0x12, 0x15, 0x12, 0x8f, 0x0e, 0x8e, /* 0x9310, */
+	0x0d, 0x8d, 0x0c, 0x8c, 0x0b, 0xe5, 0x12, 0x45, 0x0e, 0xf5, 0x12, 0xe5, 0x11, 0x45, 0x0d, 0xf5, /* 0x9320, */
+	0x11, 0xe5, 0x10, 0x45, 0x0c, 0xf5, 0x10, 0xe5, 0x0f, 0x45, 0x0b, 0xf5, 0x0f, 0xe4, 0xf5, 0x22, /* 0x9330, */
+	0xf5, 0x23, 0x85, 0x12, 0x40, 0x85, 0x11, 0x3f, 0x85, 0x10, 0x3e, 0x85, 0x0f, 0x3d, 0x02, 0x14, /* 0x9340, */
+	0xaf, 0x75, 0x89, 0x03, 0x75, 0xa8, 0x01, 0x75, 0xb8, 0x04, 0x75, 0x0a, 0xff, 0x75, 0x0b, 0x0e, /* 0x9350, */
+	0x75, 0x0c, 0x15, 0x75, 0x0d, 0x0f, 0x12, 0x14, 0x36, 0x12, 0x08, 0x60, 0xc2, 0x39, 0x12, 0x00, /* 0x9360, */
+	0x06, 0xd2, 0x00, 0xd2, 0x35, 0xd2, 0xaf, 0x75, 0x0a, 0xff, 0x75, 0x0b, 0x0e, 0x75, 0x0c, 0x51, /* 0x9370, */
+	0x75, 0x0d, 0x03, 0x12, 0x14, 0x36, 0x30, 0x08, 0x09, 0xc2, 0x35, 0x12, 0x0f, 0xa7, 0xc2, 0x08, /* 0x9380, */
+	0xd2, 0x35, 0x30, 0x0b, 0x09, 0xc2, 0x37, 0x12, 0x04, 0xa8, 0xc2, 0x0b, 0xd2, 0x37, 0x30, 0x09, /* 0x9390, */
+	0x09, 0xc2, 0x37, 0x12, 0x00, 0x0e, 0xc2, 0x09, 0xd2, 0x37, 0x30, 0x0e, 0x03, 0x12, 0x08, 0x60, /* 0x93a0, */
+	0x30, 0x36, 0xd3, 0x90, 0x30, 0x29, 0xe5, 0x1d, 0xf0, 0xb4, 0x10, 0x05, 0x90, 0x30, 0x23, 0xe4, /* 0x93b0, */
+	0xf0, 0xc2, 0x36, /* 0x93c0, */
+};
+
+static u8 OV5645AF_addr_data_pair21[255] =
+{
+	/* 0x93c3 */
+	0x93,
+	0xc3,
+	0x80, 0xc1, 0xe4, 0xf5, 0x4f, 0x90, 0x0e, 0x82, 0x93, 0xff, 0xe4, 0x8f, 0x0d,
+	0xf5, 0x0c, 0xf5, 0x0b, 0xf5, 0x0a, 0xaf, 0x0d, 0xae, 0x0c, 0xad, 0x0b, 0xac, 0x0a, 0x90, 0x0e, /* 0x93d0, */
+	0x72, 0x12, 0x15, 0x12, 0x8f, 0x0d, 0x8e, 0x0c, 0x8d, 0x0b, 0x8c, 0x0a, 0x90, 0x0e, 0x7a, 0x12, /* 0x93e0, */
+	0x0c, 0x44, 0xef, 0x45, 0x0d, 0xf5, 0x0d, 0xee, 0x45, 0x0c, 0xf5, 0x0c, 0xed, 0x45, 0x0b, 0xf5, /* 0x93f0, */
+	0x0b, 0xec, 0x45, 0x0a, 0xf5, 0x0a, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x85, 0x0d, 0x40, 0x85, 0x0c, /* 0x9400, */
+	0x3f, 0x85, 0x0b, 0x3e, 0x85, 0x0a, 0x3d, 0x12, 0x14, 0xaf, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x90, /* 0x9410, */
+	0x0e, 0x7a, 0x12, 0x15, 0x06, 0x12, 0x14, 0xaf, 0xe4, 0xf5, 0x22, 0xf5, 0x23, 0x90, 0x0e, 0x76, /* 0x9420, */
+	0x12, 0x15, 0x06, 0x02, 0x14, 0xaf, 0xae, 0x0b, 0xaf, 0x0c, 0xe4, 0xfd, 0xed, 0xc3, 0x95, 0x0d, /* 0x9430, */
+	0x50, 0x33, 0x12, 0x15, 0x68, 0xe4, 0x93, 0xf5, 0x0e, 0x74, 0x01, 0x93, 0xf5, 0x0f, 0x45, 0x0e, /* 0x9440, */
+	0x60, 0x23, 0x85, 0x0f, 0x82, 0x85, 0x0e, 0x83, 0xe0, 0xfc, 0x12, 0x15, 0x68, 0x74, 0x03, 0x93, /* 0x9450, */
+	0x52, 0x04, 0x12, 0x15, 0x68, 0x74, 0x02, 0x93, 0x42, 0x04, 0x85, 0x0f, 0x82, 0x85, 0x0e, 0x83, /* 0x9460, */
+	0xec, 0xf0, 0x0d, 0x80, 0xc7, 0x22, 0x7e, 0x00, 0xad, 0x03, 0xac, 0x02, 0x12, 0x0a, 0x89, 0x8e, /* 0x9470, */
+	0x0e, 0x8f, 0x0f, 0x22, 0x12, 0x0a, 0x89, 0x8e, 0x10, 0x8f, 0x11, 0x90, 0x0e, 0x88, 0xe4, 0x93, /* 0x9480, */
+	0x22, 0xc3, 0xe5, 0x0d, 0x9f, 0xf5, 0x0d, 0xe5, 0x0c, 0x9e, 0xf5, 0x0c, 0x22, 0xae, 0xf0, 0xfb, /* 0x9490, */
+	0xee, 0x34, 0x60, 0x8b, 0x82, 0xf5, 0x83, 0x22, 0xe0, 0xfe, 0xa3, 0xe0, 0xfd, 0xed, 0x22, 0xa2, /* 0x94a0, */
+	0xaf, 0x92, 0x33, 0xc2, 0xaf, 0xe5, 0x23, 0x45, 0x22, 0x90, 0x0e, 0x65, 0x60, 0x0e, 0x12, 0x15, /* 0x94b0, */
+};
+
+static u8 OV5645AF_addr_data_pair22[181] =
+{
+	/* 0x94c0, */
+	0x94,
+	0xc0,
+	0x43, 0xe0, 0xf5, 0x3b, 0x12, 0x15, 0x40, 0xe0, 0xf5, 0x3c, 0x80, 0x0c, 0x12, 0x15, 0x43, 0xe5, /* 0x94c0, */
+	0x3f, 0xf0, 0x12, 0x15, 0x40, 0xe5, 0x40, 0xf0, 0xa2, 0x33, 0x92, 0xaf, 0x22, 0x78, 0xcc, 0x12, /* 0x94d0, */
+	0x0e, 0xf7, 0x40, 0x0d, 0x12, 0x0e, 0xf5, 0x40, 0x04, 0xe4, 0xff, 0x80, 0x0f, 0x7f, 0x01, 0x80, /* 0x94e0, */
+	0x0b, 0x12, 0x0e, 0xf5, 0x40, 0x04, 0x7f, 0xff, 0x80, 0x02, 0x7f, 0xfe, 0x22, 0x8f, 0x12, 0x8e, /* 0x94f0, */
+	0x11, 0x8d, 0x10, 0x8c, 0x0f, 0x22, 0x12, 0x0c, 0x44, 0x8f, 0x40, 0x8e, 0x3f, 0x8d, 0x3e, 0x8c, /* 0x9500, */
+	0x3d, 0x22, 0x93, 0xf9, 0xf8, 0x02, 0x0c, 0x31, 0xc0, 0xe0, 0xc0, 0x83, 0xc0, 0x82, 0x90, 0x3f, /* 0x9510, */
+	0x0d, 0xe0, 0xf5, 0x09, 0xe5, 0x09, 0xf0, 0xd0, 0x82, 0xd0, 0x83, 0xd0, 0xe0, 0x32, 0xc3, 0xee, /* 0x9520, */
+	0x64, 0x80, 0x94, 0x80, 0x40, 0x02, 0x80, 0x07, 0xc3, 0xe4, 0x9f, 0xff, 0xe4, 0x9e, 0xfe, 0x22, /* 0x9530, */
+	0x90, 0x0e, 0x67, 0xe4, 0x93, 0xfe, 0x74, 0x01, 0x93, 0xf5, 0x82, 0x8e, 0x83, 0x22, 0xd2, 0x01, /* 0x9540, */
+	0xc2, 0x02, 0xe4, 0xf5, 0x1e, 0xf5, 0x1d, 0xd2, 0x36, 0xd2, 0x34, 0x22, 0x78, 0x7f, 0xe4, 0xf6, /* 0x9550, */
+	0xd8, 0xfd, 0x75, 0x81, 0xd1, 0x02, 0x13, 0x51, 0x8f, 0x82, 0x8e, 0x83, 0x75, 0xf0, 0x04, 0xed, /* 0x9560, */
+	0x02, 0x0c, 0x54,
+};
+
+static u8 OV5645_FW_data_pair_size[] = {
+	254,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	255,
+	181,
+};
+static u8 *OV5645_AF_firmware[] = {
+	OV5645AF_addr_data_pair1,
+	OV5645AF_addr_data_pair2,
+	OV5645AF_addr_data_pair3,
+	OV5645AF_addr_data_pair4,
+	OV5645AF_addr_data_pair5,
+	OV5645AF_addr_data_pair6,
+	OV5645AF_addr_data_pair7,
+	OV5645AF_addr_data_pair8,
+	OV5645AF_addr_data_pair9,
+	OV5645AF_addr_data_pair10,
+	OV5645AF_addr_data_pair11,
+	OV5645AF_addr_data_pair12,
+	OV5645AF_addr_data_pair13,
+	OV5645AF_addr_data_pair14,
+	OV5645AF_addr_data_pair15,
+	OV5645AF_addr_data_pair16,
+	OV5645AF_addr_data_pair17,
+	OV5645AF_addr_data_pair18,
+	OV5645AF_addr_data_pair19,
+	OV5645AF_addr_data_pair20,
+	OV5645AF_addr_data_pair21,
+	OV5645AF_addr_data_pair22,
+
+};
+#endif /* OV5645_FIRMWARE_H */
-- 
2.19.0

