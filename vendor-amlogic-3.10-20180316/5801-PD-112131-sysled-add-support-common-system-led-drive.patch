From c566bd367c6c221d19cb2e8a5f715692ccdb8ffc Mon Sep 17 00:00:00 2001
From: Bo Yang <bo.yang@amlogic.com>
Date: Wed, 26 Aug 2015 21:06:38 +0800
Subject: [PATCH 5801/5965] PD#112131: sysled: add support common system led
 driver

Add a new system led driver to allow userspace control
the system led.

The new system led driver depends kernel leds core framework.
To support this system led driver, you should select the option
    CONFIG_NEW_LEDS
    CONFIG_LEDS_CLASS
    CONFIG_AMLOGIC_LED
    CONFIG_AML_LED_SYS

You should configure the following dts parameter for the
new system led driver
    <led_gpio>
        set the gpio that control the system led.
    <led_active_low>
        set the gpio active.
        1 is active_low, 0 is active_high.

sysfs node: /sys/class/leds/led-sys/brightness
    echo 0 > /sys/class/leds/led-sys/brightness
    echo 1 > /sys/class/leds/led-sys/brightness

This new system led driver have been validated on platform
    N301.

Change-Id: Ia232dc6c5835c0775cfdd3eb9a722a2e5e6e5329
---
 arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd |  25 +--
 arch/arm/configs/mesong9tv_defconfig         |   7 +-
 drivers/amlogic/led/Kconfig                  |   4 +-
 drivers/amlogic/led/aml.dtd                  |  31 +++
 drivers/amlogic/led/aml_led_sys.c            | 220 +++++++++++++++++++
 drivers/amlogic/led/aml_led_sys.h            |  48 ++++
 6 files changed, 311 insertions(+), 24 deletions(-)
 create mode 100644 drivers/amlogic/led/aml.dtd
 create mode 100644 drivers/amlogic/led/aml_led_sys.c
 create mode 100644 drivers/amlogic/led/aml_led_sys.h

diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
index 1e07ca70268c..f2cdf8627382 100644
--- a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
@@ -852,27 +852,12 @@
 		};
 	};
 
-
-	led {
-		compatible = "amlogic,tv_led";
-		dev_name = "aml_led";
+	sysled {
+		compatible = "amlogic, sysled";
+		dev_name = "sysled";
 		status = "okay";
-
-		pinctrl-names = "default";
-		pinctrl-0 = <&aml_tv_led_pins>;
-
-		/* 0: pinmux as other pin 1: use as gpio */
-		led_use_gpio = <1>;
-		led_gpio_name = "GPIOAO_11";
-		led_gpio_low = <1>;
-		/* 0: none 1: use gpio pullup */
-		led_use_gpio_pullup = <1>;
-		led_gpio_pullup_low = <0>;
-		/* 0: no jtag pin 1: has jtag pin */
-		led_has_jtag = <1>;
-		/* 0: disable      1: from ao cpu    */
-		/* 2: from sys cpu 3: from audio cpu */
-		led_jtag_select = <0>;
+		led_gpio = "GPIOAO_11";
+		led_active_low = <1>;
 	};
 
 
diff --git a/arch/arm/configs/mesong9tv_defconfig b/arch/arm/configs/mesong9tv_defconfig
index 6436b45bf11c..5826af354750 100644
--- a/arch/arm/configs/mesong9tv_defconfig
+++ b/arch/arm/configs/mesong9tv_defconfig
@@ -38,6 +38,7 @@ CONFIG_CPU_FREQ_GOV_ONDEMAND=y
 CONFIG_CPU_FREQ_GOV_INTERACTIVE=y
 CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
 CONFIG_AMLOGIC_MESON_CPUFREQ=y
+CONFIG_FIX_SYSPLL=y
 CONFIG_VFP=y
 CONFIG_NEON=y
 CONFIG_BINFMT_MISC=y
@@ -199,9 +200,10 @@ CONFIG_FB_OSD1_DEFAULT_WIDTH_VIRTUAL=1920
 CONFIG_FB_OSD1_DEFAULT_HEIGHT_VIRTUAL=2160
 # CONFIG_AMLOGIC_BACKLIGHT is not set
 CONFIG_AMLOGIC_TV_BACKLIGHT=y
+CONFIG_AM_LOGO=y
 CONFIG_AMLOGIC_LED=y
+CONFIG_AML_LED_SYS=y
 CONFIG_AML_TV_LED=y
-CONFIG_AM_LOGO=y
 CONFIG_AML_HDMI_TX_20=y
 # CONFIG_AML_HDMI_TX is not set
 CONFIG_TVIN=y
@@ -274,6 +276,8 @@ CONFIG_AMLOGIC_USB2PHY=y
 CONFIG_AMLOGIC_USB3PHY=y
 CONFIG_USB_GADGET=y
 CONFIG_USB_G_ANDROID=y
+CONFIG_NEW_LEDS=y
+CONFIG_LEDS_CLASS=y
 CONFIG_RTC_CLASS=y
 CONFIG_UIO=y
 CONFIG_UIO_PDRV=y
@@ -337,4 +341,3 @@ CONFIG_CRYPTO_ECB=y
 CONFIG_CRYPTO_SHA256=y
 CONFIG_CRC_T10DIF=y
 CONFIG_CRC7=y
-CONFIG_FIX_SYSPLL=y
diff --git a/drivers/amlogic/led/Kconfig b/drivers/amlogic/led/Kconfig
index 0c74271db384..36d28d69d528 100644
--- a/drivers/amlogic/led/Kconfig
+++ b/drivers/amlogic/led/Kconfig
@@ -16,7 +16,7 @@ menuconfig AMLOGIC_LED
 if AMLOGIC_LED
 
 config AML_LED_SYS
-	tristate "sys led module support"
+	tristate "common sys led module support"
 	depends on LEDS_CLASS
 	default n
 	help
@@ -32,7 +32,7 @@ config AML_TV_LED
 		Amlogic TV LED management.
 
 config AMLOGIC_SYS_LED
-	bool "sys led module support(old)"
+	bool "old sys led module support"
 	select SETIO_CLASS_DEVICE
 	default y
 	help
diff --git a/drivers/amlogic/led/aml.dtd b/drivers/amlogic/led/aml.dtd
new file mode 100644
index 000000000000..dee33cf0a046
--- /dev/null
+++ b/drivers/amlogic/led/aml.dtd
@@ -0,0 +1,31 @@
+// if you use tvled, add the tvled node to your project dtd.
+tvled {
+	compatible = "amlogic,tv_led";
+	dev_name = "aml_led";
+	status = "okay";
+
+	pinctrl-names = "default";
+	pinctrl-0 = <&aml_tv_led_pins>;
+
+	/* 0: pinmux as other pin 1: use as gpio */
+	led_use_gpio = <1>;
+	led_gpio_name = "GPIOAO_11";
+	led_gpio_low = <1>;
+	/* 0: none 1: use gpio pullup */
+	led_use_gpio_pullup = <1>;
+	led_gpio_pullup_low = <0>;
+	/* 0: no jtag pin 1: has jtag pin */
+	led_has_jtag = <1>;
+	/* 0: disable      1: from ao cpu    */
+	/* 2: from sys cpu 3: from audio cpu */
+	led_jtag_select = <0>;
+};
+
+// if you use common sys led, add the sysled node to your project dtd.
+sysled {
+	compatible = "amlogic, sysled";
+	dev_name = "sysled";
+	status = "okay";
+	led_gpio = "GPIOAO_11";
+	led_active_low = <1>;
+};
diff --git a/drivers/amlogic/led/aml_led_sys.c b/drivers/amlogic/led/aml_led_sys.c
new file mode 100644
index 000000000000..25d76b11ac52
--- /dev/null
+++ b/drivers/amlogic/led/aml_led_sys.c
@@ -0,0 +1,220 @@
+/*
+ * drivers/amlogic/led/aml_led_sys.h
+ *
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+#include <linux/init.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/of_gpio.h>
+#include <linux/leds.h>
+#include <linux/gpio.h>
+#include <linux/printk.h>
+#include <linux/string.h>
+#include <linux/slab.h>
+
+#include <linux/amlogic/aml_gpio_consumer.h>
+#include "aml_led_sys.h"
+
+
+#define AML_DEV_NAME		"sysled"
+#define AML_LED_NAME		"led-sys"
+
+#define DEBUG
+
+#ifndef DEBUG
+#define INFO(format, arg...)
+#define ERR(format,  arg...)
+#else
+#define INFO(format, arg...) pr_info("%s: " format, __func__ , ## arg)
+#define ERR(format,  arg...) pr_err("%s: "  format, __func__ , ## arg)
+#endif
+
+
+static void aml_sysled_work(struct work_struct *work)
+{
+	struct aml_sysled_dev *ldev;
+	unsigned int level;
+
+	ldev = container_of(work, struct aml_sysled_dev, work);
+
+	mutex_lock(&ldev->lock);
+
+	if (ldev->new_brightness == LED_OFF)
+		level = 0;
+	else
+		level = 1;
+
+	if (ldev->d.active_low)
+		level = !level;
+
+	gpio_direction_output(ldev->d.pin, level);
+
+	mutex_unlock(&ldev->lock);
+}
+
+
+static void aml_sysled_brightness_set(struct led_classdev *cdev,
+	enum led_brightness value)
+{
+	struct aml_sysled_dev *ldev;
+	struct platform_device *pdev;
+
+	pdev = to_platform_device(cdev->dev->parent);
+	ldev = platform_get_drvdata(pdev);
+	ldev->new_brightness = value;
+	schedule_work(&ldev->work);
+}
+
+
+static int aml_sysled_dt_parse(struct platform_device *pdev)
+{
+	struct device_node *node;
+	struct aml_sysled_dev *ldev;
+	unsigned int val;
+	const char *str;
+	int ret;
+
+	ldev = platform_get_drvdata(pdev);
+	node = pdev->dev.of_node;
+	if (!node) {
+		ERR("failed to find node for %s\n", AML_DEV_NAME);
+		return -ENODEV;
+	}
+
+	//desc = of_get_named_gpiod_flags(node, "led_gpio", 0, NULL);
+	//ldev->d.pin = desc_to_gpio(desc);
+	ret = of_property_read_string(node, "led_gpio", &str);
+	if (ret) {
+		ERR("faild to get led_gpio\n");
+		return -ENODEV;
+	}
+	INFO("led_gpio = %s\n", str);
+	ldev->d.name = str;
+	ldev->d.pin = amlogic_gpio_name_map_num(str);
+
+
+
+	gpio_request(ldev->d.pin, AML_DEV_NAME);
+
+	ret = of_property_read_u32(node, "led_active_low", &val);
+	if (ret) {
+		ERR("faild to get active_low\n");
+		/* set default active_low */
+		val = 1;
+	}
+	INFO("active_low = %u\n", val);
+	ldev->d.active_low = !!val;
+	return 0;
+}
+
+
+
+static const struct of_device_id aml_sysled_dt_match[] = {
+	{
+		.compatible = "amlogic, sysled",
+	},
+	{},
+};
+
+
+static int aml_sysled_probe(struct platform_device *pdev)
+{
+	struct aml_sysled_dev *ldev;
+	int ret;
+
+	ldev = kzalloc(sizeof(struct aml_sysled_dev), GFP_KERNEL);
+	if (!ldev) {
+		ERR("kzalloc error\n");
+		return -ENOMEM;
+	}
+
+	/* set driver data */
+	platform_set_drvdata(pdev, ldev);
+
+	/* parse dt param */
+	ret = aml_sysled_dt_parse(pdev);
+	if (ret)
+		return ret;
+
+	/* register led class device */
+	ldev->cdev.name = AML_LED_NAME;
+	ldev->cdev.brightness_set = aml_sysled_brightness_set;
+	mutex_init(&ldev->lock);
+	INIT_WORK(&ldev->work, aml_sysled_work);
+	ret = led_classdev_register(&pdev->dev, &ldev->cdev);
+	if (ret < 0) {
+		kfree(ldev);
+		return ret;
+	}
+
+	INFO("module probed ok\n");
+	return 0;
+}
+
+
+static int __exit aml_sysled_remove(struct platform_device *pdev)
+{
+	struct aml_sysled_dev *ldev = platform_get_drvdata(pdev);
+
+	led_classdev_unregister(&ldev->cdev);
+	cancel_work_sync(&ldev->work);
+	gpio_free(ldev->d.pin);
+	platform_set_drvdata(pdev, NULL);
+	kfree(ldev);
+	return 0;
+}
+
+
+static struct platform_driver aml_sysled_driver = {
+	.driver = {
+		.name = AML_DEV_NAME,
+		.owner = THIS_MODULE,
+		.of_match_table = aml_sysled_dt_match,
+	},
+	.probe = aml_sysled_probe,
+	.remove = __exit_p(aml_sysled_remove),
+};
+
+
+static int __init aml_sysled_init(void)
+{
+	INFO("module init\n");
+	if (platform_driver_register(&aml_sysled_driver)) {
+		ERR("failed to register driver\n");
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+
+static void __exit aml_sysled_exit(void)
+{
+	INFO("module exit\n");
+	platform_driver_unregister(&aml_sysled_driver);
+}
+
+
+module_init(aml_sysled_init);
+module_exit(aml_sysled_exit);
+
+MODULE_DESCRIPTION("Amlogic sys led driver");
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Amlogic, Inc.");
+
diff --git a/drivers/amlogic/led/aml_led_sys.h b/drivers/amlogic/led/aml_led_sys.h
new file mode 100644
index 000000000000..96bb0eb7f144
--- /dev/null
+++ b/drivers/amlogic/led/aml_led_sys.h
@@ -0,0 +1,48 @@
+/*
+ * drivers/amlogic/led/aml_led_sys.h
+ *
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+#ifndef __AML_LED_SYS_H
+#define __AML_LED_SYS_H
+
+#include <linux/leds.h>
+#include <linux/workqueue.h>
+#include <linux/mutex.h>
+
+enum {
+	LED_GPIO_STATE_OFF = 0,
+	LED_GPIO_STATE_ON,
+};
+
+struct aml_led_gpio {
+	const char *name;
+	unsigned int pin;
+	unsigned int active_low;
+	unsigned int state;
+};
+
+
+struct aml_sysled_dev {
+	struct aml_led_gpio d;
+	struct led_classdev cdev;
+	enum led_brightness new_brightness;
+
+	struct work_struct work;
+	struct mutex lock;
+};
+
+#endif
-- 
2.19.0

