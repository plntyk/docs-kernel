From 619f14a4d464b7ffe4887e68a44edaf3a73e8926 Mon Sep 17 00:00:00 2001
From: Long Yu <long.yu@amlogic.com>
Date: Tue, 25 Aug 2015 21:15:38 +0800
Subject: [PATCH 5806/5965] PD#111295: emmc: support emmc pre_defined mode

Change-Id: Ib986118edf9ec9ebe9a16357f440f8f3f24fd60b
---
 arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd |  2 +-
 drivers/amlogic/mmc/aml_sdhc_m8.c             |  8 +++---
 drivers/mmc/card/emmc_key.h                   |  2 +-
 drivers/mmc/card/emmc_partitions.c            | 25 +++++++++++++++++++
 drivers/mmc/core/core.c                       |  3 +++
 drivers/mmc/core/mmc_ops.c                    | 20 +++++++++++++++
 drivers/mmc/core/mmc_ops.h                    |  1 +
 7 files changed, 56 insertions(+), 5 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd b/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
index ca054c893c59..6b3a4afc0ade 100644
--- a/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8b_m200_1G.dtd
@@ -622,7 +622,7 @@ void root_func(){
             port = <5>;          /**0:sdio_a, 1:sdio_b, 2:sdio_c, 3:sdhc_a, 4:sdhc_b, 5:sdhc_c */
             pinname = "emmc";
             ocr_avail = <0x00200080>; // 3.3:0x200000, 1.8+3.3:0x00200080
-            caps = "MMC_CAP_8_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
+            caps = "MMC_CAP_8_BIT_DATA","MMC_CAP_MMC_HIGHSPEED","MMC_CAP_SD_HIGHSPEED", "MMC_CAP_NONREMOVABLE","MMC_CAP_ERASE", "MMC_CAP_HW_RESET", "MMC_CAP_CMD23"; // MMC_CAP_NEEDS_POLL -- for detect, MMC_CAP_NONREMOVABLE -- for eMMC/TSD
             caps2 = "MMC_CAP2_HS200_1_8V_SDR";
 	    f_min = <300000>;
             f_max = <100000000>;
diff --git a/drivers/amlogic/mmc/aml_sdhc_m8.c b/drivers/amlogic/mmc/aml_sdhc_m8.c
index 0c235e5ee223..61167b2bb29c 100755
--- a/drivers/amlogic/mmc/aml_sdhc_m8.c
+++ b/drivers/amlogic/mmc/aml_sdhc_m8.c
@@ -831,7 +831,10 @@ void aml_sdhc_start_cmd(struct amlsd_platform* pdata, struct mmc_request* mrq)
             misc->manual_stop = 1;
         }
         else{
-            misc->manual_stop = 0;
+            if (mmc_host_cmd23(host->mmc))
+                misc->manual_stop = 1;
+            else
+                misc->manual_stop = 0;
         }
         writel(vmisc, host->base + SDHC_MISC);
 
@@ -1001,7 +1004,7 @@ void aml_sdhc_request_done(struct mmc_host *mmc, struct mmc_request *mrq)
 
     if (pdata->xfer_post)
         pdata->xfer_post(pdata);
-
+    //printk("%s [%d] mrq->cmd->opcode = %d\n",__func__, __LINE__, mrq->cmd->opcode);
     aml_sdhc_disable_imask(host, SDHC_ICTL_ALL);
     /*Set irq status: write 1 clear*/
     writel(SDHC_ISTA_W1C_ALL, host->base+SDHC_ISTA);
@@ -1346,7 +1349,6 @@ void aml_sdhc_request(struct mmc_host *mmc, struct mmc_request *mrq)
     sdhc_dbg(AMLSD_DBG_REQ ,"%s: starting CMD%u arg %08x flags %08x\n",
         mmc_hostname(mmc), mrq->cmd->opcode,
         mrq->cmd->arg, mrq->cmd->flags);
-
 #ifdef      CONFIG_AML_MMC_DEBUG_FORCE_SINGLE_BLOCK_RW
     if ((mrq->cmd->opcode == 18) || (mrq->cmd->opcode == 25)) { // ???? for debug
         sdhc_err("cmd%d\n", mrq->cmd->opcode);
diff --git a/drivers/mmc/card/emmc_key.h b/drivers/mmc/card/emmc_key.h
index e64ef1cad374..55bbbdaa1b97 100755
--- a/drivers/mmc/card/emmc_key.h
+++ b/drivers/mmc/card/emmc_key.h
@@ -16,7 +16,7 @@
 
 #define EMMC_KEYAREA_SIZE		(128*1024)
 #define EMMC_KEYAREA_COUNT		2
-
+#define MMC_CMD_RETRIES			2
 
 //#define KEY_PREVIOUS_PARTITION 	"boot_env"
 //#define KEY_LATER_PARTITION		"logo"
diff --git a/drivers/mmc/card/emmc_partitions.c b/drivers/mmc/card/emmc_partitions.c
index 2e7459e29d04..0f12e890b92d 100755
--- a/drivers/mmc/card/emmc_partitions.c
+++ b/drivers/mmc/card/emmc_partitions.c
@@ -89,6 +89,27 @@ unsigned int mmc_capacity (struct mmc_card *card)
         return card->csd.capacity << (card->csd.read_blkbits - 9);
 }
 
+static int mmc_send_cmd23(struct mmc_host *host,
+                unsigned int blockcount)
+{
+    int err;
+    struct mmc_command cmd = {0};
+
+    BUG_ON(!host);
+
+    cmd.opcode = MMC_SET_BLOCK_COUNT;
+    cmd.arg = blockcount;
+    cmd.flags = MMC_RSP_R1 | MMC_CMD_AC;
+
+    err = mmc_wait_for_cmd(host, &cmd, MMC_CMD_RETRIES);
+    if (err) {
+        pr_err("%s %d error\n",__func__, __LINE__);
+        return err;
+    }
+
+    return 0;
+}
+
 static int mmc_transfer (struct mmc_card *card, unsigned dev_addr,
         unsigned blocks, void *buf, int write)
 {
@@ -106,6 +127,10 @@ static int mmc_transfer (struct mmc_card *card, unsigned dev_addr,
         goto exit_err;
     }
 
+    if (mmc_host_cmd23(card->host)) {
+        mmc_send_cmd23(card->host, blocks);
+    }
+
     size = blocks << card->csd.read_blkbits;
     sg_init_one(&sg, buf, size);
 
diff --git a/drivers/mmc/core/core.c b/drivers/mmc/core/core.c
index 98f0b5c691c8..0b15d3268bb1 100755
--- a/drivers/mmc/core/core.c
+++ b/drivers/mmc/core/core.c
@@ -544,6 +544,9 @@ struct mmc_async_req *mmc_start_req(struct mmc_host *host,
 		trace_mmc_blk_rw_start(areq->mrq->cmd->opcode,
 				       areq->mrq->cmd->arg,
 				       areq->mrq->data);
+		if (mmc_host_cmd23(host)) {
+			mmc_send_cmd23_req(host, areq->mrq->sbc->arg);
+		}
 		start_err = __mmc_start_data_req(host, areq->mrq);
 	}
 
diff --git a/drivers/mmc/core/mmc_ops.c b/drivers/mmc/core/mmc_ops.c
index bd2cc701dbb6..edb4c41cf81d 100755
--- a/drivers/mmc/core/mmc_ops.c
+++ b/drivers/mmc/core/mmc_ops.c
@@ -130,6 +130,26 @@ int mmc_go_idle(struct mmc_host *host)
 	return err;
 }
 
+int mmc_send_cmd23_req(struct mmc_host *host, unsigned int blockcount)
+{
+	int err;
+	struct mmc_command cmd = {0};
+
+	BUG_ON(!host);
+
+	cmd.opcode = MMC_SET_BLOCK_COUNT;
+	cmd.arg = blockcount;
+	cmd.flags = MMC_RSP_R1 | MMC_CMD_AC;
+
+	err = mmc_wait_for_cmd(host, &cmd, MMC_CMD_RETRIES);
+	if (err) {
+		pr_err("%s %d error\n",__func__, __LINE__);
+		return err;
+	}
+
+	return 0;
+}
+
 int mmc_send_op_cond(struct mmc_host *host, u32 ocr, u32 *rocr)
 {
 	struct mmc_command cmd = {0};
diff --git a/drivers/mmc/core/mmc_ops.h b/drivers/mmc/core/mmc_ops.h
index 3dd8941c2980..90c80c97ab92 100644
--- a/drivers/mmc/core/mmc_ops.h
+++ b/drivers/mmc/core/mmc_ops.h
@@ -27,6 +27,7 @@ int mmc_spi_set_crc(struct mmc_host *host, int use_crc);
 int mmc_card_sleepawake(struct mmc_host *host, int sleep);
 int mmc_bus_test(struct mmc_card *card, u8 bus_width);
 int mmc_send_hpi_cmd(struct mmc_card *card, u32 *status);
+int mmc_send_cmd23_req(struct mmc_host *host, unsigned int blocks);
 
 #endif
 
-- 
2.19.0

