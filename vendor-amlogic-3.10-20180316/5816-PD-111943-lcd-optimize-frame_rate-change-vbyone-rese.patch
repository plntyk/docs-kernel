From a4d2244bdd9397e77ff0fe9e453c95804555149b Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Tue, 8 Sep 2015 13:47:56 +0800
Subject: [PATCH 5816/5965] PD#111943: lcd: optimize frame_rate change & vbyone
 reset method

Change-Id: I05d00ebb581322cc26b6b07ef65409557b7c1ce2
---
 arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd  | 10 ++--
 arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd  | 10 ++--
 drivers/amlogic/display/lcd/aml_lcd_tv.c      | 55 +++++++++++++------
 drivers/amlogic/display/lcd/aml_lcd_tv.h      |  1 +
 .../display/lcd/aml_tv_lcd_port/lcd_common.c  |  6 +-
 .../display/lcd/aml_tv_lcd_port/vbyone_drv.c  | 36 +++++++-----
 6 files changed, 74 insertions(+), 44 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
index 36a2cd71fb75..776c526301ae 100644
--- a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
@@ -739,7 +739,7 @@
 			pixel_clock=<148000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1920 1080 2200 1125 148 41>; /**h_active v_active h_period v_period h_blank v_blank*/
 			lcd_timing = <0x500404ad 0x00414400 0x71486980 44 2156 0 1079 2100 2164 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 1 1 0x3>;	/** lvds_bits lvds_repack pn_swap dual_port port_reverse lvds_fifo_wr_mode*/
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -751,7 +751,7 @@
 			pixel_clock=<80000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1648 810 280 42>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -762,7 +762,7 @@
 			interface="lvds";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <1366 768 1560 806 190 30>;
 			lcd_timing = <0x500404ad 0x00454400 0x71486980 20 30 0 809 20 1200 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -774,7 +774,7 @@
 			pixel_clock=<82000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1696 806 300 38>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -785,7 +785,7 @@
 			interface="vbyone";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <3840 2160 4400 2250 557 90>;
 			lcd_timing = <0xffffffff 0xffffffff 0xffffffff 47 80 47 80 47 47 3 9>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			vbyone_att = <8 4 2 4>;
 			panel_power_pin ="GPIOH_9";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
index 8e5fa2a935c7..1f241068edf3 100644
--- a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
@@ -1020,7 +1020,7 @@
 			pixel_clock=<148000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1920 1080 2200 1125 148 41>; /**h_active v_active h_period v_period h_blank v_blank*/
 			lcd_timing = <0x500404ad 0x00414400 0x71486900 44 2156 0 1079 2100 2164 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 1 1 0x3>;	/** lvds_bits lvds_repack pn_swap dual_port port_reverse lvds_fifo_wr_mode*/
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -1032,7 +1032,7 @@
 			pixel_clock=<80000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1648 810 280 42>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -1044,7 +1044,7 @@
 			pixel_clock=<74250000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1560 806 190 30>;
 			lcd_timing = <0x500404ad 0x00454400 0x71486900 20 30 0 809 20 1200 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -1056,7 +1056,7 @@
 			pixel_clock=<82000000>; /** pixel clock_hz(unit in Hz)*/
 			basic_setting = <1366 768 1696 806 300 38>;
 			lcd_timing = <0x5000068c 0x00454400 0x71c86900 20 30 0 809 20 1200 3 5>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			lvds_att = <8 1 0 0 0 0x101>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
@@ -1067,7 +1067,7 @@
 			interface="vbyone";		/** lcd_interface(lvds, vbyone, ttl) */
 			basic_setting = <3840 2160 4400 2250 557 90>;
 			lcd_timing = <0xffffffff 0xffffffff 0xffffffff 47 80 47 80 47 47 3 9>;
-			frame_rate_adjust_type=<1>; /** 0=htotal adjust, 1=clock adjust */
+			frame_rate_adjust_type=<0>; /** 0=clock adjust, 1=htotal adjust, 2=vtotal adjust */
 			vbyone_att = <8 4 2 4>;
 			panel_power_pin ="GPIOH_10";
 			panel_power_att = <1 0 50 50>;		/** on off on_delay off_delay*/
diff --git a/drivers/amlogic/display/lcd/aml_lcd_tv.c b/drivers/amlogic/display/lcd/aml_lcd_tv.c
index 5ca3c3f5e8dc..122f25146c74 100644
--- a/drivers/amlogic/display/lcd/aml_lcd_tv.c
+++ b/drivers/amlogic/display/lcd/aml_lcd_tv.c
@@ -46,6 +46,8 @@ struct aml_lcd *pDev = NULL;
 static struct class *tv_lcd_class;
 #define LCD_ARG_NUM 4
 
+static unsigned short h_period_store, v_period_store;
+
 static const char* lcd_type_table[]={
 	"LVDS",
 	"vbyone",
@@ -251,7 +253,6 @@ static ssize_t tv_lcd_debug_store(struct class *cls,
 		break;
 	case 'f':
 		value = simple_strtol(argv[1], NULL, 10);
-		value = (value > 0) ? 1 : 0;
 		pDev->pConf->lcd_timing.frame_rate_adj_type = (unsigned char)value;
 		printk("change lcd frame rate change type: %d\n", value);
 		break;
@@ -399,9 +400,9 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 		}
 
 		if (of_property_read_u32(child, "frame_rate_adjust_type", &val)) {
-			printk("failed to get frame_rate_adjust_type, default to 0\n");
+			TV_LCD_INFO("failed to get frame_rate_adjust_type, default to 0\n");
 			/* default use clock adjust */
-			plcd_config->lcd_timing.frame_rate_adj_type = 1;
+			plcd_config->lcd_timing.frame_rate_adj_type = 0;
 		} else {
 			plcd_config->lcd_timing.frame_rate_adj_type = (unsigned char)val;
 		}
@@ -581,11 +582,11 @@ static struct aml_lcd_platdata * _get_lcd_config(struct platform_device *pdev)
 
 static void init_lcd_config(struct aml_lcd *pDev)
 {
-	unsigned int h_period = pDev->pConf->lcd_basic.h_period;
-	unsigned int v_period = pDev->pConf->lcd_basic.v_period;
+	h_period_store = pDev->pConf->lcd_basic.h_period;
+	v_period_store = pDev->pConf->lcd_basic.v_period;
 
 	/* prepare 60hz clock */
-	pDev->pConf->lcd_timing.lcd_clk = h_period * v_period * 60;
+	pDev->pConf->lcd_timing.lcd_clk = h_period_store * v_period_store * 60;
 }
 #endif
 
@@ -634,20 +635,40 @@ static int lcd_vmode_change(int index)
 	unsigned int sync_duration_den = lcd_info[index].sync_duration_den;
 
 	/* frame rate adjust */
-	if (type) { /* adjust clock */
+	switch (type) {
+	case 1: /* htotal adjust */
+		pclk = pDev->pConf->lcd_timing.lcd_clk;
+		if ((sync_duration_den / sync_duration_num) < 55) { /* 50hz */
+			h_period = ((pclk / v_period) * sync_duration_den * 10) / sync_duration_num;
+			h_period = (h_period + 5) / 10; /* round off */
+		} else { /* 60hz */
+			h_period = h_period_store;
+		}
+		printk("lcd: %s: adjust h_period %u -> %u\n",
+			__func__, pDev->pConf->lcd_basic.h_period, h_period);
+		pDev->pConf->lcd_basic.h_period = h_period;
+		break;
+	case 2: /* vtotal adjust */
+		pclk = pDev->pConf->lcd_timing.lcd_clk;
+		if ((sync_duration_den / sync_duration_num) < 55) { /* 50hz */
+			v_period = ((pclk / h_period) * sync_duration_den * 10) / sync_duration_num;
+			v_period = (v_period + 5) / 10; /* round off */
+		} else { /* 60hz */
+			v_period = v_period_store;
+		}
+		printk("lcd: %s: adjust v_period %u -> %u\n",
+			__func__, pDev->pConf->lcd_basic.v_period, v_period);
+		pDev->pConf->lcd_basic.v_period = v_period;
+		break;
+	case 0: /* pixel clk adjust */
+	default:
 		pclk = (h_period * v_period * sync_duration_num) / sync_duration_den;
-		printk("%s: adjust pclk %u.%03uMHz -> %u.%03uMHz\n",
+		printk("lcd: %s: adjust pclk %u.%03uMHz -> %u.%03uMHz\n",
 			__func__, (pDev->pConf->lcd_timing.lcd_clk / 1000000),
 			((pDev->pConf->lcd_timing.lcd_clk / 1000) % 1000),
 			(pclk / 1000000), ((pclk / 1000) % 1000));
 		pDev->pConf->lcd_timing.lcd_clk = pclk;
-	} else { /* adjust h_period */
-		pclk = pDev->pConf->lcd_timing.lcd_clk;
-		h_period = ((pclk / v_period) * sync_duration_den * 10) / sync_duration_num;
-		h_period = (h_period + 5) / 10; /* round off */
-		printk("%s: adjust h_period %u -> %u\n",
-			__func__, pDev->pConf->lcd_basic.h_period, h_period);
-		pDev->pConf->lcd_basic.h_period = h_period;
+		break;
 	}
 
 	return 0;
@@ -655,6 +676,7 @@ static int lcd_vmode_change(int index)
 
 static void _lcd_module_enable(void)
 {
+	printk("lcd: driver version: %s\n", LCD_TV_DRIVER_VERSION);
 	lcd_vmode_change(lcd_output_mode);
 	_init_display_driver(pDev);
 }
@@ -720,9 +742,8 @@ static int lcd_vmode_is_supported(vmode_t mode)
 	int m;
 
 	mode &= VMODE_MODE_BIT_MASK;
-	printk("initcall %s mode = %d\n", __func__, mode);
 	m = get_lcd_vmode(mode);
-	printk("lcd mode: %d(%s)\n", m, lcd_info[m].name);
+	printk("initcall vmode = %d, lcd mode = %d(%s)\n", mode, m, lcd_info[m].name);
 
 	switch (mode) {
 	case VMODE_1080P:
diff --git a/drivers/amlogic/display/lcd/aml_lcd_tv.h b/drivers/amlogic/display/lcd/aml_lcd_tv.h
index f003a17b5089..e61c496310e7 100644
--- a/drivers/amlogic/display/lcd/aml_lcd_tv.h
+++ b/drivers/amlogic/display/lcd/aml_lcd_tv.h
@@ -26,6 +26,7 @@
 
 #include <linux/amlogic/vout/vinfo.h>
 
+#define LCD_TV_DRIVER_VERSION        "20150908"
 
 typedef enum {
     OFF = 0,
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
index 6a932707a018..fffe2026e72e 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lcd_common.c
@@ -297,7 +297,7 @@ void generate_clk_parameter(Lcd_Config_t *pconf)
 	pll.od2_sel = 0;
 	pll.od3_sel = 0;
 
-	printk("lcd_clk = %dHz\n", pconf->lcd_timing.lcd_clk);
+	//printk("lcd_clk = %dHz\n", pconf->lcd_timing.lcd_clk);
 	fout = pconf->lcd_timing.lcd_clk / 1000; /* kHz */
 
 	if (fout > ENCL_MAX_CLK_IN)
@@ -351,7 +351,7 @@ generate_clk_done:
 			((crt_xd << CLK_CTRL_XD) |
 			(pll.frac << CLK_CTRL_FRAC)));
 
-		printk("pll_ctrl=0x%x div_ctrl=0x%x clk_ctrl=0x%x \n",
+		printk("lcd: pll_ctrl=0x%x div_ctrl=0x%x clk_ctrl=0x%x \n",
 			pconf->lcd_timing.pll_ctrl, pconf->lcd_timing.div_ctrl,pconf->lcd_timing.clk_ctrl);
 
 	} else {
@@ -362,7 +362,7 @@ generate_clk_done:
 			(CLK_DIV_SEL_1 << DIV_CTRL_CLK_DIV);
 		pconf->lcd_timing.clk_ctrl = (pconf->lcd_timing.clk_ctrl &
 			~(0xff << CLK_CTRL_XD)) | (7 << CLK_CTRL_XD);
-		printk("Out of clock range, reset to default setting!\n");
+		printk("lcd: Out of clock range, reset to default setting\n");
 	}
 }
 
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
index 46eba45252ec..b59044e39ca7 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
@@ -299,23 +299,22 @@ static void set_control_vbyone(Lcd_Config_t *pConf)
 
 	//force vencl clk enable, otherwise, it might auto turn off by mipi DSI
 	//WRITE_VCBUS_REG_BITS(VPU_MISC_CTRL, 1, 0, 1);
-
-	//write REG_VBO_GCLK_LANE[3:2] == 0x0 to open the aln_clk
-	//for vbyone timer handler correction
-	aml_write_reg32(P_VBO_GCLK_LANE_L, 0);
 }
 
 static void vbyone_wait_stable(void)
 {
 	int i = 1000;
 
-	printk("%s ", __func__);
+	printk("lcd: %s ", __func__);
 	while ((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) != 0x20) {
 		udelay(5);
 		if (i-- == 0)
 			break;
 	}
-	vx1_cdr_status_check = false;
+	//vx1_cdr_status_check = false;
+	aml_write_reg32(P_VBO_GCLK_LANE_L, 4); //write REG_VBO_GCLK_LANE[3:2] == 0x1 to close the aln_clk);
+	vx1_cdr_status_check = true;
+	vx1_irq_check = false;
 	printk("status: 0x%x\n", aml_read_reg32(P_VBO_STATUS_L));
 }
 
@@ -421,7 +420,7 @@ static void set_pll_vbyone(Lcd_Config_t *pConf)
 	//}
 
 	pclk_div = (((byte == 3) ? 30:40)*100)/minlane;
-	TV_LCD_INFO("vbyone byte=%d, lane=%d, pclk=%d, phy_div=%d \n", byte, lane, pclk_div, phy_div);
+	//TV_LCD_INFO("vbyone byte=%d, lane=%d, pclk=%d, phy_div=%d \n", byte, lane, pclk_div, phy_div);
 	//configure vid_clk_div_top
 	if (byte == 3) {
 		if (pclk_div == 375) {
@@ -536,8 +535,8 @@ static void set_vbyone_config(Lcd_Config_t *pConf)
 	}
 	pConf->lcd_control.vbyone_config->phy_div = phy_div;
 	pConf->lcd_control.vbyone_config->bit_rate = bit_rate;
-	printk("lane_count=%u, bit_rate = %uMHz, clk=%u.%03uMhz\n",
-		lane_count, (bit_rate / 1000000), (pclk / 1000), (pclk % 1000));
+	//printk("lane_count=%u, bit_rate = %uMHz, clk=%u.%03uMhz\n",
+	//	lane_count, (bit_rate / 1000000), (pclk / 1000), (pclk % 1000));
 }
 
 static void adjust_vx1_pll_by_parameters(Lcd_Config_t *pConf)
@@ -607,7 +606,7 @@ static void set_clk_vbyone(Lcd_Config_t *pConf)
 
 	if (pConf->lcd_timing.frame_rate_adj_type) {
 		bit_rate = pConf->lcd_control.vbyone_config->bit_rate / 1000000;
-		printk("bit rate change to %dMHz\n", bit_rate);
+		//printk("bit rate change to %dMHz\n", bit_rate);
 		if (VX1_PLL_ADJUST) {
 			generate_clk_parameter(pConf);
 			adjust_vx1_pll_by_parameters(pConf);
@@ -624,6 +623,10 @@ unsigned int vbyone_init(struct aml_lcd *pDev)
 
 	mutex_lock(&pDev->init_lock);
 	vx1_init_flag = true; //flag to bypass vx1_cdr_status_check
+	/* prepare ALN clk for vbyone init, because the vbyone timer handler close that */
+	//write REG_VBO_GCLK_LANE[3:2] == 0x0 to open the aln_clk
+	aml_write_reg32(P_VBO_GCLK_LANE_L, 0);
+
 	set_vbyone_config(pDev->pConf);
 	set_clk_vbyone(pDev->pConf);
 	venc_set_vbyone(pDev->pConf);
@@ -641,8 +644,9 @@ unsigned int vbyone_init(struct aml_lcd *pDev)
 
 static void vbyone_handler(void)
 {
-	int i = 200;
-
+	int i = 200, n = 5;
+	int done = 0;
+#if 0
 	if (vx1_cdr_status_check == false) { //In normal status
 		//if (vx1_debug_log)
 		//	printk("\nvx1_cdr_status_check->1\n");
@@ -654,11 +658,13 @@ static void vbyone_handler(void)
 				printk("\nvx1_cdr_status_check->2\n");
 		}
 	}
+#endif
 	//if(vx1_cdr_status_check == true) {
+	while ((done == 0) && (n-- > 0)) {
 		if (((aml_read_reg32(P_VBO_STATUS_L) & 0x1c) != 0) ||
 			(vx1_irq_reset == true)) { //in ALN status
 			if (vx1_debug_log)
-				printk("\nvx1 reset\n");
+				printk("\nvx1 reset %d\n", n);
 			//1) force phy output all 1, let tcon pull lockn high
 			vx1_irq_reset = false;
 			aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL0, aml_read_reg32(P_HHI_LVDS_TX_PHY_CNTL0)|0xc00);
@@ -680,16 +686,18 @@ static void vbyone_handler(void)
 			aml_write_reg32(P_HHI_LVDS_TX_PHY_CNTL0, aml_read_reg32(P_HHI_LVDS_TX_PHY_CNTL0)&0xfffff3ff);
 			//if((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) != 0x8){
 			vx1_irq_check = true;
-			udelay(10);
+			mdelay(5);
 			if ((aml_read_reg32(P_VBO_STATUS_L) & 0x3f) == 0x20) {
 				aml_write_reg32(P_VBO_GCLK_LANE_L, 4);   //write REG_VBO_GCLK_LANE[3:2] == 0x1 to close the aln_clk);
 				vx1_cdr_status_check = true;
+				done = 1;
 				if (vx1_debug_log)
 					printk("\nvx1_cdr_status_check-->3\n");
 			} else {
 				vx1_cdr_status_check = false;
 			}
 		}
+	}
 	//}
 }
 
-- 
2.19.0

