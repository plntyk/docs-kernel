From e3591a1d6253b2c7916ff9bdf8b4841647124c63 Mon Sep 17 00:00:00 2001
From: Evoke Zhang <evoke.zhang@amlogic.com>
Date: Thu, 24 Sep 2015 13:06:59 +0800
Subject: [PATCH 5863/5965] PD#113166: backlight: add pwm_vs control method

Change-Id: I17340aba3249d3fac384f59cc1bf1f4dbce7bda8
---
 arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd  |  16 +-
 arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd  |  16 +-
 drivers/amlogic/display/backlight/aml_tv_bl.c | 185 +++++++++++++-----
 drivers/amlogic/display/backlight/aml_tv_bl.h |   5 +-
 drivers/amlogic/display/lcd/aml_lcd_tv.c      |   3 +-
 .../display/lcd/aml_tv_lcd_port/lvds_drv.c    |  33 +++-
 .../display/lcd/aml_tv_lcd_port/vbyone_drv.c  |   3 +
 include/linux/amlogic/display/lcd.h           |   2 +
 8 files changed, 200 insertions(+), 63 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
index 855ddfd3a324..41b77c3f02b6 100644
--- a/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9bb_n303.dtd
@@ -817,15 +817,16 @@
 		dev_name = "backlight";
 		status = "okay";
 
-		pinctrl-names = "default";
+		pinctrl-names = "default","pwm_vs";
 		pinctrl-0 = <&aml_bl_pwm_pins>;
+		pinctrl-1 = <&aml_bl_pwm_vs_pins>;
 
 		backlight_0 {
 			index = <0>;
 			name = "backlight_0";
 			bl_en_gpio = "GPIOY_6";
 			bl_en_gpio_on = <0>; /** 1=output high, 0=output low **/
-			bl_pwm_port = "PWM_B";
+			bl_pwm_port = "PWM_B"; /* PWM_A, PWM_B, PWM_C, PWM_D, PWM_VS */
 			bl_pwm_positive = <0>; /* 1: positive 0: negative */
 			bl_pwm_gpio = "GPIOY_7";
 			bl_pwm_gpio_on = <0>; /** 1=output high, 0=output low **/
@@ -837,7 +838,7 @@
 			bl_pwm_off_delay = <200>; /* unit: ms */
 			bl_power_on_delay  = <5>; /* unit: ms */
 			bl_power_off_delay = <5>; /* unit: ms */
-			bl_pwm_freq = <1000>;
+			bl_pwm_freq = <1000>; /* pwm_vs: 1~4(vfreq multiple), other pwm: real freq(unit: Hz) */
 			bl_pwm_duty_max_min = <100 25>; /* 100% - 25%*/
 		};
 	};
@@ -1462,6 +1463,15 @@
 			amlogic,pins = "GPIOY_7";
 		};
 
+		aml_bl_pwm_vs_pins:bl_pwm_vs_pins {
+			amlogic,setmask = <9  0x04000000>;
+			amlogic,clrmask = <3  0x00000020
+					   5  0x04000000
+					   9  0x02000001
+					   10 0x00280000>;
+			amlogic,pins = "GPIOY_7";
+		};
+
 		//$$ MATCH "uart_ao_pin_match" = "&ao_uart_pins"
 		//$$ L2 PROP_U32 2 = "amlogic,setmask"
 		//$$ L2 PROP_STR 2 = "amlogic,pins"
diff --git a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
index ab440688b3b9..c15d8ba6aba3 100644
--- a/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
+++ b/arch/arm/boot/dts/amlogic/mesong9tv_n301.dtd
@@ -1122,15 +1122,16 @@
 		dev_name = "backlight";
 		status = "okay";
 
-		pinctrl-names = "default";
+		pinctrl-names = "default","pwm_vs";
 		pinctrl-0 = <&aml_bl_pwm_pins>;
+		pinctrl-1 = <&aml_bl_pwm_vs_pins>;
 
 		backlight_0 {
 			index = <0>;
 			name = "backlight_0";
 			bl_en_gpio = "GPIOY_6";
 			bl_en_gpio_on = <0>; /** 1=output high, 0=output low **/
-			bl_pwm_port = "PWM_B";
+			bl_pwm_port = "PWM_B"; /* PWM_A, PWM_B, PWM_C, PWM_D, PWM_VS */
 			bl_pwm_positive = <0>; /* 1: positive 0: negative */
 			bl_pwm_gpio = "GPIOY_7";
 			bl_pwm_gpio_on = <0>; /** 1=output high, 0=output low **/
@@ -1142,7 +1143,7 @@
 			bl_pwm_off_delay = <200>; /* unit: ms */
 			bl_power_on_delay  = <5>; /* unit: ms */
 			bl_power_off_delay = <5>; /* unit: ms */
-			bl_pwm_freq = <1000>;
+			bl_pwm_freq = <1000>; /* pwm_vs: 1~4(vfreq multiple), other pwm: real freq(unit: Hz) */
 			bl_pwm_duty_max_min = <100 25>; /* 100% - 25%*/
 		};
 	};
@@ -1453,6 +1454,15 @@
 			amlogic,pins = "GPIOY_7";
 		};
 
+		aml_bl_pwm_vs_pins:bl_pwm_vs_pins {
+			amlogic,setmask = <9  0x04000000>;
+			amlogic,clrmask = <3  0x00000020
+					   5  0x04000000
+					   9  0x02000001
+					   10 0x00280000>;
+			amlogic,pins = "GPIOY_7";
+		};
+
 		aml_tv_led_pins:aml_led_pins {
 			amlogic,setmask = <13  0x00400000>;
 			amlogic,clrmask = <13  0x10000000>;
diff --git a/drivers/amlogic/display/backlight/aml_tv_bl.c b/drivers/amlogic/display/backlight/aml_tv_bl.c
index f80b301cda25..789fed9c823a 100644
--- a/drivers/amlogic/display/backlight/aml_tv_bl.c
+++ b/drivers/amlogic/display/backlight/aml_tv_bl.c
@@ -52,6 +52,7 @@
 #define ERR(format, arg...)  printk(KERN_ERR  "%s: " format, \
 	__FUNCTION__ , ## arg)
 
+static int aml_bl_brightness_update_force = 0;
 
 static int aml_bl_reboot_notify_callback(struct notifier_block *self,
 				unsigned long event, void *data)
@@ -67,7 +68,6 @@ static int aml_bl_reboot_notify_callback(struct notifier_block *self,
 	return NOTIFY_OK;
 }
 
-
 static void aml_bl_pwm_init(struct backlight_device *bd)
 {
 	unsigned int port;
@@ -111,6 +111,8 @@ static void aml_bl_pwm_init(struct backlight_device *bd)
 		/* pwm_d_clk_en: bit[23] */
 		aml_set_reg32_bits(P_PWM_MISC_REG_CD, 1, 23, 1);
 		break;
+	case AML_BL_PWM_VS:
+		break;
 	default:
 		ERR("unsupport pwm port %u\n", port);
 		break;
@@ -131,11 +133,20 @@ static void aml_bl_pwm_on(struct backlight_device *bd)
 
 	amlogic_gpio_free(bdev->d->pwm_gpio, AML_BL_NAME);
 
-	s = pinctrl_lookup_state(bdev->p, "default");
-	if (IS_ERR(s)) {
-		ERR("failed to pinctrl_lookup_state default\n");
-		devm_pinctrl_put(bdev->p);
-		return;
+	if (bdev->d->pwm_port == AML_BL_PWM_VS) {
+		s = pinctrl_lookup_state(bdev->p, "pwm_vs");
+		if (IS_ERR(s)) {
+			ERR("failed to pinctrl_lookup_state pwm_vs\n");
+			devm_pinctrl_put(bdev->p);
+			return;
+		}
+	} else {
+		s = pinctrl_lookup_state(bdev->p, "default");
+		if (IS_ERR(s)) {
+			ERR("failed to pinctrl_lookup_state default\n");
+			devm_pinctrl_put(bdev->p);
+			return;
+		}
 	}
 
 	ret = pinctrl_select_state(bdev->p, s);
@@ -162,6 +173,8 @@ static void aml_bl_pwm_on(struct backlight_device *bd)
 		/* pwm_d_en bit[1] */
 		aml_set_reg32_bits(P_PWM_MISC_REG_CD, 1, 1, 1);
 		break;
+	case AML_BL_PWM_VS:
+		break;
 	default:
 		ERR("unsupport pwm port %u\n", port);
 		break;
@@ -199,6 +212,8 @@ static void aml_bl_pwm_off(struct backlight_device *bd)
 		/* pwm_d_en bit[1] */
 		aml_set_reg32_bits(P_PWM_MISC_REG_CD, 0, 1, 1);
 		break;
+	case AML_BL_PWM_VS:
+		break;
 	default:
 		ERR("unsupport pwm port %u\n", port);
 		break;
@@ -237,7 +252,7 @@ static void aml_bl_power_on(struct backlight_device *bd)
 	/* set state flag */
 	bdev->bd->props.state |= AML_BL_FLAG_POWERON;
 	mutex_unlock(&bdev->power_lock);
-	INFO("power on");
+	INFO("power on\n");
 }
 
 
@@ -269,6 +284,35 @@ static void aml_bl_pwm_duty_set(struct backlight_device *bd,
 	unsigned int pwm_high, unsigned int pwm_low)
 {
 	struct aml_bl *bdev = bl_get_data(bd);
+	unsigned int high, low;
+	unsigned int vs[4], ve[4], sw, n, i;
+
+	//INFO("pwm_high=%d, pwm_low=%d\n", pwm_high, pwm_low);
+	if (bdev->d->pwm_port == AML_BL_PWM_VS) {
+		memset(vs, 0, sizeof(unsigned int) * 4);
+		memset(ve, 0, sizeof(unsigned int) * 4);
+		n = bdev->d->pwm_freq;
+		sw = (bdev->pwm_cnt * 10 / n + 5) / 10;
+		if (bdev->d->pwm_positive)
+			high = (pwm_high * 10 / n + 5) / 10;
+		else
+			high = (pwm_low * 10 / n + 5) / 10;
+		high = (high > 1) ? high : 1;
+		//INFO("n=%d, sw=%d, high=%d\n", n, sw, high);
+		for (i = 0; i < n; i++) {
+			vs[i] = 1 + (sw * i);
+			ve[i] = vs[i] + high - 1;
+			//INFO("vs[%d]=%d, ve[%d]=%d\n", i, vs[i], i, ve[i]);
+		}
+	} else {
+		if (bdev->d->pwm_positive) {
+			high = pwm_high;
+			low = pwm_low;
+		} else {
+			high = pwm_low;
+			low = pwm_high;
+		}
+	}
 
 	switch (bdev->d->pwm_port) {
 	case AML_BL_PWM_A:
@@ -283,6 +327,12 @@ static void aml_bl_pwm_duty_set(struct backlight_device *bd,
 	case AML_BL_PWM_D:
 		aml_write_reg32(P_PWM_PWM_D, (pwm_high << 16) | (pwm_low));
 		break;
+	case AML_BL_PWM_VS:
+		aml_write_reg32(P_VPU_VPU_PWM_V0, (ve[0] << 16) | (vs[0]));
+		aml_write_reg32(P_VPU_VPU_PWM_V1, (ve[1] << 16) | (vs[1]));
+		aml_write_reg32(P_VPU_VPU_PWM_V2, (ve[2] << 16) | (vs[2]));
+		aml_write_reg32(P_VPU_VPU_PWM_V3, (ve[3] << 16) | (vs[3]));
+		break;
 	default:
 		break;
 	}
@@ -294,10 +344,12 @@ static void aml_bl_set_level(struct backlight_device *bd, unsigned level)
 	unsigned int pwm_high, pwm_low;
 	struct aml_bl *bdev = bl_get_data(bd);
 
-	INFO("input level %u\n", level);
+	//INFO("input level %u\n", level);
 
-	if (bdev->curr_brightness == level)
-		return;
+	if (aml_bl_brightness_update_force == 0) {
+		if (bdev->curr_brightness == level)
+			return;
+	}
 
 	/* validate value */
 	if (level > bdev->d->level_max)
@@ -313,15 +365,8 @@ static void aml_bl_set_level(struct backlight_device *bd, unsigned level)
 	lv = level - bdev->d->level_min;
 	level = pw * lv / lw + bdev->pwm_min;
 
-	if (bdev->d->pwm_positive) {
-		pwm_high = level;
-		pwm_low = bdev->pwm_cnt - level;
-	}
-	else {
-		pwm_high = bdev->pwm_cnt - level;
-		pwm_low = level;
-	}
-
+	pwm_high = level;
+	pwm_low = bdev->pwm_cnt - level;
 	aml_bl_pwm_duty_set(bd, pwm_high, pwm_low);
 
 	INFO("set level ok\n");
@@ -410,40 +455,42 @@ static int aml_bl_register_backlight(struct platform_device *pdev)
 
 #define XTAL_FREQ_HZ		(24*1000*1000) /* 24M in HZ */
 #define XTAL_HALF_FREQ_HZ	(24*1000*500)  /* 24M/2 in HZ */
-#define AML_BL_PWM_FREQ_DEF	(1000)
 
-static void aml_bl_pwm_param_init(struct platform_device *pdev)
+static void aml_bl_pwm_param_init(struct aml_bl *bdev)
 {
-	struct aml_bl *bdev;
 	unsigned int pwm_freq;
 	unsigned int pwm_clk_div;
 	unsigned int pwm_cnt;
 	int i;
 
-	bdev = platform_get_drvdata(pdev);
 	pwm_freq = bdev->d->pwm_freq;
 
-
-	/* 0x7f(7bit): PWMA[14:8] or PWMB[22:6]*/
-	/*
-	 * pwm_clk_in = xtal / clk_div
-	 * pwm_out = pwm_clk_in/((high + 1) + (low + 1))
-	 *
-	 */
-	for (i = 0; i < 0x7f; i++) {
-		pwm_clk_div = i;
-		pwm_cnt = XTAL_FREQ_HZ / (pwm_freq * (pwm_clk_div + 1)) - 2;
-		if (pwm_cnt <= 0xffff) /* 16bit */
-			break;
+	if (bdev->d->pwm_port == AML_BL_PWM_VS) {
+		pwm_cnt = aml_read_reg32(P_ENCL_VIDEO_MAX_LNCNT) + 1;
+		bdev->pwm_cnt = pwm_cnt;
+		INFO("pwm_cnt = %u\n", bdev->pwm_cnt);
+	} else {
+		/* 0x7f(7bit): PWMA[14:8] or PWMB[22:6]*/
+		/*
+		 * pwm_clk_in = xtal / clk_div
+		 * pwm_out = pwm_clk_in/((high + 1) + (low + 1))
+		 *
+		 */
+		for (i = 0; i < 0x7f; i++) {
+			pwm_clk_div = i;
+			pwm_cnt = XTAL_FREQ_HZ / (pwm_freq * (pwm_clk_div + 1)) - 2;
+			if (pwm_cnt <= 0xffff) /* 16bit */
+				break;
+		}
+
+		bdev->pwm_cnt = pwm_cnt;
+		bdev->pwm_clk_div = pwm_clk_div;
+		INFO("pwm_cnt = %u, pwm_clk_div = %u\n", pwm_cnt, pwm_clk_div);
 	}
 
-	bdev->pwm_cnt = pwm_cnt;
-	bdev->pwm_clk_div = pwm_clk_div;
-	INFO("pwm_cnt = %u, pwm_clk_div = %u\n", pwm_cnt, pwm_clk_div);
-
 	bdev->pwm_max = (pwm_cnt * bdev->d->pwm_duty_max / 100);
 	bdev->pwm_min = (pwm_cnt * bdev->d->pwm_duty_min / 100);
-	INFO("pwm_max = %u, pwm_min = %u\n", bdev->pwm_max, bdev->pwm_min);
+	//INFO("pwm_max = %u, pwm_min = %u\n", bdev->pwm_max, bdev->pwm_min);
 }
 
 static struct aml_bl_dt aml_bl_dt_def = {
@@ -532,6 +579,8 @@ static int aml_bl_dt_parse(struct platform_device *pdev)
 			bdev->d->pwm_port = AML_BL_PWM_C;
 		else if (strcmp(str, "PWM_D") == 0)
 			bdev->d->pwm_port = AML_BL_PWM_D;
+		else if (strcmp(str, "PWM_VS") == 0)
+			bdev->d->pwm_port = AML_BL_PWM_VS;
 		else
 			bdev->d->pwm_port = AML_BL_PWM_MAX;
 	}
@@ -551,14 +600,27 @@ static int aml_bl_dt_parse(struct platform_device *pdev)
 	ret = of_property_read_u32(child, "bl_pwm_freq", &val);
 	if (ret) {
 		ERR("failed to get bl_pwm_freq\n");
-		val = AML_BL_FREQ_DEF;
+		if (bdev->d->pwm_port == AML_BL_PWM_VS)
+			val = AML_BL_FREQ_VS_DEF;
+		else
+			val = AML_BL_FREQ_DEF;
+	}
+	if (bdev->d->pwm_port == AML_BL_PWM_VS) {
+		if (val > 4) {
+			ERR("invalid pwm_vs freq\n");
+			val = AML_BL_FREQ_VS_DEF;
+		} else {
+			bdev->d->pwm_freq = val;
+		}
+		INFO("bl pwm_vs_freq = %u x vfreq\n",  bdev->d->pwm_freq);
+	} else {
+		/* validate: less than the half of xtal */
+		if (val > XTAL_HALF_FREQ_HZ)
+			bdev->d->pwm_freq = XTAL_HALF_FREQ_HZ;
+		else
+			bdev->d->pwm_freq = val;
+		INFO("bl pwm_freq = %uHz\n",  bdev->d->pwm_freq);
 	}
-	/* validate: less than the half of xtal */
-	if (val > XTAL_HALF_FREQ_HZ)
-		bdev->d->pwm_freq = XTAL_HALF_FREQ_HZ;
-	else
-		bdev->d->pwm_freq = val;
-	INFO("bl_pwm_freq = %u\n",  bdev->d->pwm_freq);
 
 	/* BL_PWM_GPIO */
 	ret = of_property_read_string(child, "bl_pwm_gpio", &str);
@@ -662,6 +724,25 @@ static int aml_bl_dt_parse(struct platform_device *pdev)
 	return 0;
 }
 
+static int aml_bl_lcd_update_notifier(struct notifier_block *nb, unsigned long event, void *cmd)
+ {
+	struct aml_bl *bdev;
+
+	/* If we aren't interested in this event, skip it immediately */
+	if (event != LCD_EVENT_BL_UPDATE)
+		return 0;
+
+	printk("bl_lcd_update_notifier: event = %lu\n", event);
+	bdev = container_of(nb, struct aml_bl, bl_update_nb);
+	if (bdev->d->pwm_port == AML_BL_PWM_VS) {
+		aml_bl_brightness_update_force = 1;
+		aml_bl_pwm_param_init(bdev);
+		aml_bl_update_status(bdev->bd);
+		aml_bl_brightness_update_force = 0;
+	}
+
+	return NOTIFY_OK;
+}
 
 static const struct of_device_id aml_bl_dt_match[] = {
 	{
@@ -675,6 +756,8 @@ static int aml_bl_probe(struct platform_device *pdev)
 	struct aml_bl *bdev;
 	int ret;
 
+	aml_bl_brightness_update_force = 0;
+
 	bdev = kzalloc(sizeof(struct aml_bl), GFP_KERNEL);
 	if (!bdev ) {
 	    ERR("kzalloc error\n");
@@ -689,7 +772,7 @@ static int aml_bl_probe(struct platform_device *pdev)
 	ret = aml_bl_dt_parse(pdev);
 	if (ret)
 		return ret;
-	aml_bl_pwm_param_init(pdev);
+	aml_bl_pwm_param_init(bdev);
 
 
 	/* setup pinmux */
@@ -713,6 +796,12 @@ static int aml_bl_probe(struct platform_device *pdev)
 	bdev->reboot_nb.notifier_call = aml_bl_reboot_notify_callback;
 	ret = register_reboot_notifier(&bdev->reboot_nb);
 
+	bdev->bl_update_nb.notifier_call = aml_bl_lcd_update_notifier;
+	ret = lcd_register_client(&bdev->bl_update_nb);
+	if (ret) {
+		ERR("bl_register_client fail\n");
+	}
+
 	INFO("module probed ok\n");
 	return 0;
 }
diff --git a/drivers/amlogic/display/backlight/aml_tv_bl.h b/drivers/amlogic/display/backlight/aml_tv_bl.h
index 031798283579..f4b5a59820f2 100644
--- a/drivers/amlogic/display/backlight/aml_tv_bl.h
+++ b/drivers/amlogic/display/backlight/aml_tv_bl.h
@@ -22,6 +22,7 @@
 #include <linux/notifier.h>
 
 #define AML_BL_FREQ_DEF			1000	/* unit: HZ */
+#define AML_BL_FREQ_VS_DEF		2 /* multiple 2 of vfreq */
 
 #define AML_BL_LEVEL_DEF		128
 #define AML_BL_LEVEL_MAX		255
@@ -39,6 +40,7 @@ typedef enum {
 	AML_BL_PWM_B,
 	AML_BL_PWM_C,
 	AML_BL_PWM_D,
+	AML_BL_PWM_VS,
 	AML_BL_PWM_MAX,
 } aml_bl_pwm_port_t;
 
@@ -71,7 +73,7 @@ struct aml_bl_dt {
 	unsigned int power_on_delay; /* unit: ms */
 	unsigned int power_off_delay; /* unit: ms */
 
-	unsigned int pwm_freq;
+	unsigned int pwm_freq; /* pwm_vs: 1~4(vfreq multiple), other pwm: real freq(unit: Hz) */
 	unsigned int pwm_duty_min;
 	unsigned int pwm_duty_max;
 	unsigned int pwm_positive; /* 1: positive 0: negative */
@@ -92,6 +94,7 @@ struct aml_bl {
 
 	struct mutex power_lock;
 	struct notifier_block reboot_nb;
+	struct notifier_block bl_update_nb;
 	bool reboot; /* true: notify reboot, false: other */
 };
 
diff --git a/drivers/amlogic/display/lcd/aml_lcd_tv.c b/drivers/amlogic/display/lcd/aml_lcd_tv.c
index 386518eb5b3a..06ec4cb2758d 100644
--- a/drivers/amlogic/display/lcd/aml_lcd_tv.c
+++ b/drivers/amlogic/display/lcd/aml_lcd_tv.c
@@ -1134,12 +1134,11 @@ static void _init_vout(struct aml_lcd *pDev)
 
 static int lcd_power_notifier(struct notifier_block *nb, unsigned long event, void *cmd)
  {
-	TV_LCD_INFO("event = %lu\n", event);
-
 	/* If we aren't interested in this event, skip it immediately */
 	if (event != LCD_EVENT_POWERON && event != LCD_EVENT_POWEROFF)
 		return 0;
 
+	TV_LCD_INFO("event = %lu\n", event);
 	if (event == LCD_EVENT_POWEROFF) {
 		_disable_display_driver();
 		panel_power_ctrl(OFF);
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c
index bad8dc6725ca..49a5aadf97fd 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/lvds_drv.c
@@ -20,6 +20,7 @@
 #include <linux/delay.h>
 #include <linux/types.h>
 #include <mach/am_regs.h>
+#include <linux/amlogic/display/lcd.h>
 
 #include "../aml_lcd_tv.h"
 #include "lcd_common.h"
@@ -136,6 +137,15 @@ static void set_venc_lvds(Lcd_Config_t *pConf)
 	aml_write_reg32(P_ENCL_VIDEO_EN, 1);
 }
 
+static void venc_change_lvds(Lcd_Config_t *pConf)
+{
+	aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT, pConf->lcd_basic.h_period - 1);
+	aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT, pConf->lcd_basic.v_period - 1);
+	printk("lcd: venc changed: %d,%d\n", pConf->lcd_basic.h_period, pConf->lcd_basic.v_period);
+
+	lcd_notifier_call_chain(LCD_EVENT_BL_UPDATE, NULL);
+}
+
 static void set_pll_lvds(Lcd_Config_t *pConf)
 {
 	unsigned int sw_port 	= (pConf->lcd_control.lvds_config->lvds_fifo_wr_mode)&0x100;
@@ -175,12 +185,23 @@ unsigned int  lvds_init(struct aml_lcd *pDev)
 	TV_LCD_INFO("lvds mode is selected\n");
 
 	mutex_lock(&pDev->init_lock);
-	set_pll_lvds(pDev->pConf);
-	set_venc_lvds(pDev->pConf);
-	set_tcon_lvds(pDev->pConf);
-	set_control_lvds(pDev->pConf);
-	init_phy_lvds(pDev->pConf);
-	_enable_vsync_interrupt();
+
+	switch (pDev->pConf->lcd_timing.frame_rate_adj_type) {
+	case 0: /* clk adjust */
+		set_pll_lvds(pDev->pConf);
+		set_venc_lvds(pDev->pConf);
+		set_tcon_lvds(pDev->pConf);
+		set_control_lvds(pDev->pConf);
+		init_phy_lvds(pDev->pConf);
+		_enable_vsync_interrupt();
+		break;
+	case 1: /* htotal adjust */
+	case 2: /* vtotal adjust */
+		venc_change_lvds(pDev->pConf);
+		break;
+	default:
+		break;
+	}
 	mutex_unlock(&pDev->init_lock);
 
 	return 0;
diff --git a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
index f34468022977..11ebde98af0d 100644
--- a/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
+++ b/drivers/amlogic/display/lcd/aml_tv_lcd_port/vbyone_drv.c
@@ -20,6 +20,7 @@
 #include <linux/delay.h>
 #include <linux/types.h>
 #include <mach/am_regs.h>
+#include <linux/amlogic/display/lcd.h>
 
 #include "../aml_lcd_tv.h"
 #include "lcd_common.h"
@@ -364,6 +365,8 @@ static void venc_change_vbyone(Lcd_Config_t *pConf)
 	aml_write_reg32(P_ENCL_VIDEO_MAX_PXCNT, pConf->lcd_basic.h_period - 1);
 	aml_write_reg32(P_ENCL_VIDEO_MAX_LNCNT, pConf->lcd_basic.v_period - 1);
 	printk("lcd: venc changed: %d,%d\n", pConf->lcd_basic.h_period, pConf->lcd_basic.v_period);
+
+	lcd_notifier_call_chain(LCD_EVENT_BL_UPDATE, NULL);
 }
 
 //clock seting for VX1
diff --git a/include/linux/amlogic/display/lcd.h b/include/linux/amlogic/display/lcd.h
index bd384a2d790f..451e790a6a8f 100644
--- a/include/linux/amlogic/display/lcd.h
+++ b/include/linux/amlogic/display/lcd.h
@@ -39,6 +39,8 @@
 #define LCD_EVENT_BLANK			0x06
 /* lcd unblank change occurred */
 #define LCD_EVENT_UNBLANK		0x07
+/* lcd bl pwm_vs vfreq change occurred */
+#define LCD_EVENT_BL_UPDATE		0x10
 
 
 extern int lcd_register_client(struct notifier_block *nb);
-- 
2.19.0

