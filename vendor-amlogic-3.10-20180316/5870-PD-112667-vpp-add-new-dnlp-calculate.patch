From cdca7bf57445e48aad3d5ecb2deee77090acdeed Mon Sep 17 00:00:00 2001
From: MingLiang Dong <mingliang.dong@amlogic.com>
Date: Mon, 28 Sep 2015 20:28:47 +0800
Subject: [PATCH 5870/5965] PD#112667: vpp: add new dnlp calculate

Change-Id: I09fd0a41d2e3ec9460bff6dc483db943b12498ec
---
 drivers/amlogic/amvecm/amve.c | 596 +++++++++++++++++++++++++++++++++-
 include/linux/amlogic/ve.h    |  12 +
 2 files changed, 603 insertions(+), 5 deletions(-)

diff --git a/drivers/amlogic/amvecm/amve.c b/drivers/amlogic/amvecm/amve.c
index b417ebda2039..914e4da7c59a 100755
--- a/drivers/amlogic/amvecm/amve.c
+++ b/drivers/amlogic/amvecm/amve.c
@@ -113,7 +113,7 @@ static int ve_dnlp_hghrange = 18;
 module_param(ve_dnlp_hghrange, int, 0664);
 MODULE_PARM_DESC(ve_dnlp_hghrange, "ve_dnlp_hghrange");
 
-static int ve_dnlp_lowalpha = 24;
+static int ve_dnlp_lowalpha = 20;
 module_param(ve_dnlp_lowalpha, int, 0664);
 MODULE_PARM_DESC(ve_dnlp_lowalpha, "ve_dnlp_lowalpha");
 
@@ -121,7 +121,7 @@ static int ve_dnlp_midalpha = 24;
 module_param(ve_dnlp_midalpha, int, 0664);
 MODULE_PARM_DESC(ve_dnlp_midalpha, "ve_dnlp_midalpha");
 
-static int ve_dnlp_hghalpha = 24;
+static int ve_dnlp_hghalpha = 28;
 module_param(ve_dnlp_hghalpha, int, 0664);
 MODULE_PARM_DESC(ve_dnlp_hghalpha, "ve_dnlp_hghalpha");
 
@@ -145,6 +145,54 @@ static int video_rgb_ogo_mode_sw = 0;
 module_param(video_rgb_ogo_mode_sw, int, 0664);
 MODULE_PARM_DESC(video_rgb_ogo_mode_sw, "enable/disable video_rgb_ogo_mode_sw");
 
+static int ve_dnlp_lowalpha_new = 20;
+module_param(ve_dnlp_lowalpha_new, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_lowalpha_new, "ve_dnlp_lowalpha_new");
+
+static int ve_dnlp_hghalpha_new = 28;
+module_param(ve_dnlp_hghalpha_new, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_hghalpha_new, "ve_dnlp_hghalpha_new");
+
+static int ve_dnlp_cliprate_new = 6;
+module_param(ve_dnlp_cliprate_new, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_cliprate_new, "ve_dnlp_cliprate_new");
+
+static int ve_dnlp_adj_level = 6 ;
+module_param(ve_dnlp_adj_level, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_adj_level, "ve_dnlp_adj_level");
+
+static int ve_dnlp_mvreflsh = 4;
+module_param(ve_dnlp_mvreflsh, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_mvreflsh, "ve_dnlp_mvreflsh");
+
+static int ve_dnlp_gmma_rate = 60;
+module_param(ve_dnlp_gmma_rate, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_gmma_rate, "ve_dnlp_gmma_rate");
+
+static int ve_dnlp_sbgnbnd = 0;
+module_param(ve_dnlp_sbgnbnd, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_sbgnbnd, "ve_dnlp_sbgnbnd");
+
+static int ve_dnlp_sendbnd = 5;
+module_param(ve_dnlp_sendbnd, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_sendbnd, "ve_dnlp_sendbnd");
+
+static int ve_dnlp_clashBgn = 0;
+module_param(ve_dnlp_clashBgn, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_clashBgn, "ve_dnlp_clashBgn");
+
+static int ve_dnlp_clashEnd = 10;
+module_param(ve_dnlp_clashEnd, int, 0664);
+MODULE_PARM_DESC(ve_dnlp_clashEnd, "ve_dnlp_clashEnd");
+
+static int ve_mtdbld_rate = 32;
+module_param(ve_mtdbld_rate, int, 0664);
+MODULE_PARM_DESC(ve_mtdbld_rate, "ve_mtdbld_rate");
+
+static int ve_blkgma_rate = 4;  //u6 dft32
+module_param(ve_blkgma_rate, int, 0664);
+MODULE_PARM_DESC(ve_blkgma_rate, "ve_blkgma_rate");
+
 // ***************************************************************************
 // *** VPP_FIQ-oriented functions *********************************************
 // ***************************************************************************
@@ -474,6 +522,491 @@ static void ve_dnlp_calculate_tgtx(vframe_t *vf)
 	return;
 }
 
+
+static unsigned int pre_2_gamma[65];
+static unsigned int pre_1_gamma[65];
+
+static unsigned int pst_2_gamma[65];
+static unsigned int pst_1_gamma[65];
+static unsigned int pst_0_gamma[65];
+
+unsigned int pst_curve_1[65];
+
+//rGmIn[0:64]   ==>0:4:256, gamma
+//rGmOt[0:pwdth]==>0-0, pwdth-64-256
+void GetSubCurve(unsigned int *rGmOt, unsigned int *rGmIn, unsigned int pwdth)
+{
+	int nT0 = 0;
+	unsigned int BASE = 64;
+
+	unsigned int plft = 0;
+	unsigned int prto = 0;
+	unsigned int rst = 0;
+	//unsigned int pdlt=0;
+
+	unsigned int idx1 = 0;
+	unsigned int idx2 = 0;
+
+	if (pwdth == 0)
+		pwdth = 1;
+
+	for (nT0 = 0; nT0 <= pwdth; nT0++)
+	{
+		plft = nT0*64/pwdth;
+		prto = (BASE*(nT0*BASE-plft*pwdth) + pwdth/2)/pwdth;
+
+		idx1 = plft;
+		idx2 = plft+1;
+		if (idx1 > 64)
+			idx1 = 64;
+		if (idx2 > 64)
+			idx2 = 64;
+
+		rst = rGmIn[idx1]*(BASE-prto) + rGmIn[idx2]*prto;
+		rst = (rst + BASE/2)*4*pwdth/BASE;
+		rst = ((rst + 128)>>8);
+
+		if (rst > 4*pwdth)
+			rst = 4*pwdth;
+
+		rGmOt[nT0] = rst;
+	}
+}
+
+//rGmOt[0:64]
+//rGmIn[0:64]
+void GetGmCurves(unsigned int *rGmOt, unsigned int *rGmIn, unsigned int pval, unsigned int BgnBnd, unsigned EndBnd)
+{
+	int nT0 = 0;
+	//unsigned int rst=0;
+	unsigned int pwdth = 0;
+	unsigned int pLst[65];
+
+	if (pval <= 2) {
+		for (nT0 = 0; nT0 < 65; nT0++) {
+			rGmOt[nT0] = rGmIn[nT0];
+		}
+		return;
+	} else if (pval >= 63) {
+        for (nT0 = 0; nT0 < 65; nT0++) {
+			rGmOt[64-nT0] = 255-rGmIn[nT0];
+		}
+		return;
+	}
+
+	if (BgnBnd > 4)
+		BgnBnd = 4;
+	if (EndBnd > 4)
+		EndBnd = 4;
+
+	for (nT0 = 0; nT0 < 65; nT0++) {
+		rGmOt[nT0] = (nT0<<2);
+	}
+
+	if (pval > BgnBnd) {
+		pwdth = pval - BgnBnd;
+		GetSubCurve(pLst, rGmIn, pwdth);
+		for (nT0 = BgnBnd; nT0 <= pval; nT0++) {
+			rGmOt[nT0] = pLst[nT0 - BgnBnd] + (BgnBnd<<2);
+		}
+	}
+
+	if (64 > pval + EndBnd) {
+		pwdth = 64 - pval - EndBnd;
+		GetSubCurve(pLst, rGmIn, pwdth);
+		for (nT0 = pval; nT0 <= 64 - EndBnd; nT0++) {
+			rGmOt[nT0] = 256 - (EndBnd<<2) - pLst[pwdth - (nT0 - pval)];
+		}
+	}
+}
+
+unsigned int AdjHistAvg(unsigned int pval, unsigned int ihstEnd)
+{
+	unsigned int pEXT = 224;
+	unsigned int pMid = 128;
+	unsigned int pMAX = 236;
+	if (ihstEnd > 59)
+		pMAX = ihstEnd << 2;
+
+	if (pval > pMid) {
+		pval = pMid + (pMAX - pMid)*(pval - pMid)/(pEXT - pMid);
+		if (pval > pMAX) {
+			pval = pMAX;
+		}
+	}
+
+	return pval;
+}
+
+
+//iHst[0:63]: [0,4)->iHst[0], [252,256)->iHst[63]
+//oMap[0:64]:0:4:256
+void clash(unsigned int *oMap, unsigned int *iHst, unsigned int clip_rate, unsigned int hstBgn,unsigned int hstEnd)
+{
+	//unsigned int hstBgn=0;
+	//unsigned int hstEnd=59;
+	//unsigned int clip_rate=6;
+
+	unsigned int i = 0,j = 0;
+	unsigned int tmax = 0;
+	unsigned int tsum = 0;
+	unsigned int oHst[65];
+	unsigned int cLmt = 0;
+	unsigned int tLen = (hstEnd - hstBgn);
+	unsigned int tAvg = 0;
+	unsigned int nExc = 0;
+	unsigned int nStp = 0;
+	unsigned int uLmt = 0;
+	unsigned int stp = 0;
+
+	if (hstBgn > 16)
+		hstBgn = 16;
+
+	if (hstEnd > 64)
+		hstEnd = 64;
+	else if (hstEnd < 48)
+		hstEnd = 48;
+
+	oMap[64] = 256;
+	// 64 bins, max, ave
+	for (i = 0; i < 64; i++) {
+		oHst[i] = iHst[i];
+		oMap[i] = 4*i;
+
+		if (i >= hstBgn && i <= hstEnd-1) {
+			if (tmax < iHst[i])
+				tmax = iHst[i];
+			tsum += iHst[i];
+		} else {
+			oHst[i] = 0;
+		}
+	}
+
+	if (hstEnd <= hstBgn)
+	    return;
+
+	cLmt = (clip_rate*tsum)>>8;
+	tAvg = (tsum + tLen/2)/tLen;
+	// invalid histgram: freeze dnlp curve
+	if (tmax <= (tLen<<4))
+		return;
+
+	nExc = 0;
+	for (i = hstBgn; i < hstEnd; i++) { //[bgn, end-1]
+		if (iHst[i] > cLmt)
+			nExc += (iHst[i] - cLmt);
+	}
+	nStp = (nExc + tLen/2)/tLen;
+	uLmt = cLmt - nStp;
+
+	if (clip_rate <= 4 || tAvg <= 2) {
+		cLmt = (tsum + tLen/2)/tLen;
+		tsum = cLmt*tLen;
+		for (i = hstBgn; i < hstEnd; i++) {
+			oHst[i] = cLmt;
+		}
+	} else if(nStp != 0) {
+		for (i = hstBgn; i < hstEnd; i++) {
+			if (iHst[i] >= cLmt)
+				oHst[i] = cLmt;
+			else {
+				if (iHst[i] > uLmt) {
+					oHst[i] = cLmt;
+					nExc -= cLmt - iHst[i];
+				} else {
+					oHst[i] = iHst[i]+nStp;
+					nExc -= nStp;
+				}
+				if (nExc < 0 )
+				nExc = 0;
+			}
+		}
+		j = hstBgn;
+		while (nExc > 0) {
+			if (nExc >= tLen) {
+				nStp = 1;
+				stp = nExc/tLen;
+			} else {
+				nStp = tLen/nExc;
+				stp = 1;
+			}
+			for (i = j;i < hstEnd;i += nStp) {
+				if (oHst[i] < cLmt ) {
+					oHst[i] += stp;
+					nExc -= stp;
+				}
+				if (nExc <= 1)
+					break;
+			}
+			j += 1;
+			if (j > hstEnd - 1)
+				break;
+		}
+	}
+
+	//hstBgn:hstEnd-1
+	tsum = 0;
+	for (i = hstBgn; i < hstEnd; i++) {
+		if (oHst[i] > cLmt)
+			oHst[i] = cLmt;
+		tsum += oHst[i];
+	}
+
+	nStp = 0;
+	//sum -= oHst[4];
+	for (i = hstBgn; i < hstEnd; i++) {//5,59
+		nStp += oHst[i];
+
+		j = 4*(hstEnd - hstBgn)*nStp;
+		j += (tsum>>1);
+		j /= tsum;
+		oMap[i+1] = j + 4*hstBgn;
+	}
+}
+
+//xhu
+//#define DEBUG_DNLP
+static void ve_dnlp_calculate_tgtx_new(vframe_t *vf)
+{
+	struct vframe_prop_s *p = &vf->prop;
+
+	static unsigned int iHst[65];
+	static unsigned int tSumDif[10];
+	static unsigned int tDifHst[10];
+
+	unsigned int oHst[65];
+	unsigned int tLumDif[9];
+	unsigned int clash_curve[65];
+
+	static unsigned int nTstCnt=0;
+
+	static unsigned int sum_b = 0, sum_c = 0;
+	unsigned int i = 0, sum = 0, max = 0; //j = 0,
+	//unsigned int stp=0, tstp=0; //cLmt=0, nStp=0, uLmt=0,
+	unsigned int nTmp = 0;
+	unsigned int nT0;//,nT1;
+	unsigned int lSby = 0;
+
+	//unsigned int adj_level = (unsigned int)ve_dnlp_adj_level; //[0-32]dft6
+	unsigned int mvreflsh = (unsigned int) ve_dnlp_mvreflsh; // u4[0-8] smooth moving, reflesh the curve, 0-refresh one frame
+	unsigned int gmma_rate = (unsigned int) ve_dnlp_gmma_rate; //u8larger-->near to gamma1.8, smaller->gamma1.2 [0-256]dft60
+	unsigned int low_alpha = (unsigned int) ve_dnlp_lowalpha_new; // u6[0-64]dft20
+	unsigned int hgh_alpha = (unsigned int) ve_dnlp_hghalpha_new; // u6[0-64]dft28
+
+	unsigned int sBgnBnd = (unsigned int) ve_dnlp_sbgnbnd; //u4s-curve begin band [0-16]dft0
+	unsigned int sEndBnd = (unsigned int) ve_dnlp_sendbnd; //u4s-curve begin band [0-16]dft5
+
+	unsigned int clip_rate = (unsigned int) ve_dnlp_cliprate_new; //u6clash max slope[4-64]    dft6
+	unsigned int clashBgn = (unsigned int) ve_dnlp_clashBgn; //u4clash hist begin point [0-16] dft0
+	unsigned int clashEnd = (unsigned int) ve_dnlp_clashEnd+49; //u4 clash hist end point [0~15] dft10
+
+	//please add the parameters
+	unsigned int mtdbld_rate = (unsigned int) ve_mtdbld_rate; //u6method blending rate (0~64) dft32
+	unsigned int blkgma_rate=(unsigned int) ve_blkgma_rate; //u6 dft32
+	//unsigned int chst_bgn = 4;  //histogram beginning
+	//unsigned int chst_end = 59; //histogram ending, (bgn<= x <end)
+
+	//-------------------------------------------------
+	unsigned int tAvg = 0;
+	//unsigned int nPnt=0;
+	//unsigned int mRng=0;
+	unsigned int luma_avg = 0;
+	static unsigned int pre_luma_avg4 = 0;
+	unsigned int luma_avg4 = 0;
+
+	unsigned int ihstBgn = 0;  //input histogram range[0,64)
+	unsigned int ihstEnd = 0;
+
+	unsigned int rGm1p2[] = {0,2,4,7,9,12,15,18,21,24,28,31,34,38,41,45,49,52,56,60,63, \
+		67,71,75,79,83,87,91,95,99,103,107,111,116,120,124,128,133,137,141,146,150,154,159, \
+		163,168,172,177,181,186,190,195,200,204,209,213,218,223,227,232,237,242,246,251,256};
+
+	unsigned int rGm1p8[] = {0,0,1,1,2,3,4,5,6,7,9,11,13,15,17,19,21,24,26,29,32,34,37,41,44,\
+		47,51,54,58,62,65,69,74,78,82,86,91,95,100,105,110,115,120,125,130,136,141,147,153,158,\
+		164,170,176,182,189,195,201,208,214,221,228,235,242,249,256};
+
+    if (low_alpha > 64)
+		low_alpha=64;
+    if (hgh_alpha > 64)
+		hgh_alpha=64;
+	if (clashBgn > 16)
+		clashBgn=16;
+	if (clashEnd > 64)
+		clashEnd=64;
+	if (clashEnd < 49)
+		clashEnd=49;
+	// old historic luma sum
+	sum_b = sum_c;
+	// new historic luma sum
+	ve_dnlp_luma_sum = p->hist.luma_sum;
+	sum_c = ve_dnlp_luma_sum;
+
+	if (dnlp_respond) {
+		if (!ve_dnlp_luma_sum)// new luma sum is 0, something is wrong, freeze dnlp curve
+			return;
+	}
+
+	for (i = 0; i < 64; i++) {
+		pre_2_gamma[i] = pre_1_gamma[i];
+		pre_1_gamma[i] = iHst[i];
+		iHst[i]        = (unsigned int)p->hist.gamma[i];
+
+		pst_2_gamma[i] = pst_1_gamma[i];
+		pst_1_gamma[i] = pst_0_gamma[i];
+		pst_0_gamma[i] = ve_dnlp_tgt[i];
+	}
+
+	for (i = 0; i < 64; i++) {
+		if (iHst[i] != 0) {
+			if (ihstBgn == 0)
+				ihstBgn = i;
+
+			if (ihstEnd != 64)
+				ihstEnd = i+1;
+		}
+		clash_curve[i] = (i<<2);
+	}
+	clash_curve[64] = 256;
+
+	// new historic luma sum
+	pr_amve_dbg("ve_dnlp_luma_sum=%x,sum_b=%x,sum_c=%x\n",ve_dnlp_luma_sum,sum_b,sum_c);
+	// picture mode: freeze dnlp curve
+	sum = 0;
+	max = 0;
+	luma_avg = 0;
+	for (i = 0; i < 64; i++) {
+		nTmp = iHst[i];
+
+		oHst[i] = nTmp;
+
+		sum += nTmp;
+
+		if (max < nTmp)
+		max = nTmp;
+
+		luma_avg += nTmp*i; //lower extension [0-63]
+	}
+
+	// invalid histgram: freeze dnlp curve
+	if (max <= 55 || sum == 0)
+		return;
+
+	tAvg = sum>>6; //tAvg = sum/64; (64bins)
+	luma_avg4 = 4*luma_avg/sum;
+	luma_avg4 = AdjHistAvg(luma_avg4, ihstEnd);//150918 for 32-step luma pattern
+
+	luma_avg = (luma_avg4>>2);
+
+	nTstCnt++;
+	if (nTstCnt > 99)
+		nTstCnt = 0;
+
+	for (i = 0; i < 9; i++) {
+		tDifHst[i] = tDifHst[i+1];
+	}
+	tDifHst[9] = ve_dnlp_luma_sum;
+
+	for (i = 0; i < 9; i++) {
+		tLumDif[i] = (tDifHst[i+1] > tDifHst[0]) ? (tDifHst[i+1] - tDifHst[0]) : (tDifHst[0] - tDifHst[i+1]);
+	}
+
+	lSby=0; //max=8
+	for (i = 0; i < 8; i++) {
+		if (tLumDif[i+1] > tLumDif[i]) {
+			lSby++;
+		}
+	}
+
+	for (i = 0; i < 9; i++) {
+		tSumDif[i] = tSumDif[i+1];
+	}
+	tSumDif[9] = ((sum_b > ve_dnlp_luma_sum) ? (sum_b - ve_dnlp_luma_sum) : (ve_dnlp_luma_sum - sum_b));
+
+	nTmp = 0;
+	for (i = 5; i <= 9; i++) {
+		nTmp = nTmp + tSumDif[i];
+	}
+
+	nT0 = ve_dnlp_adj_level;
+
+	if (nT0 + luma_avg <= 8) {
+		nT0 = 0;
+	} else if (luma_avg <= 8) {
+		nT0 = nT0 - (8 - luma_avg);
+	}
+
+	// new luma sum is closed to old one (1 +/- 1/64), picture mode, freeze curve
+    if ((nTmp < (sum_b >> nT0)) && lSby<mvreflsh) {
+		for (i = 0; i < 64; i++) {
+			ve_dnlp_tgt[i] = pst_1_gamma[i];
+			pst_0_gamma[i] = ve_dnlp_tgt[i];
+		}
+		return;
+	}
+
+#ifdef DEBUG_DNLP
+	printk("1.0 CalAvg (%d, %d)\n",max, luma_avg4);
+	printk("1.1 GetGmCurves (%d, %d, %d)\n",luma_avg, sBgnBnd, sEndBnd);
+#endif
+	GetGmCurves(pst_0_gamma, rGm1p2, luma_avg, sBgnBnd, sEndBnd);
+#ifdef DEBUG_DNLP
+	printk("1.2 GetGmCurves2 \n");
+#endif
+	GetGmCurves(pst_curve_1, rGm1p8, luma_avg, sBgnBnd, sEndBnd);
+
+	nTmp = (luma_avg>31) ? luma_avg-31 : 31-luma_avg; //abs
+	nTmp = (32-nTmp+2)>>2;
+
+	gmma_rate = gmma_rate + nTmp;
+	if (gmma_rate > 255)
+		gmma_rate = 255;
+
+	if (luma_avg4 <= 32)
+		low_alpha = low_alpha + (32 - luma_avg4);
+
+	if (luma_avg4 >= 224) {
+		if (low_alpha < (luma_avg4 - 224))
+			low_alpha = 0;
+		else
+			low_alpha = low_alpha - (luma_avg4 - 224);
+	}
+
+#ifdef DEBUG_DNLP
+	printk("2. CLASH Alg\n");
+#endif
+	clash(clash_curve, iHst, clip_rate, clashBgn, clashEnd);
+
+    for (i = 0; i < 64; i++) { //5,59
+		nTmp = (((256 - gmma_rate)*pst_0_gamma[i] + pst_curve_1[i]*gmma_rate + 128)>>8);
+
+		if (i <= luma_avg) {
+			nTmp = (nTmp*(64 - low_alpha) + low_alpha*4*i + 32)>>6;
+		} else {
+			nTmp = (nTmp*(64 - hgh_alpha) + hgh_alpha*4*i + 32)>>6;
+		}
+
+		nTmp = nTmp*mtdbld_rate + clash_curve[i]*(64 - mtdbld_rate);
+		nTmp = (nTmp + 32)>>6;
+		nTmp = rGm1p8[i]*blkgma_rate + nTmp*(64-mtdbld_rate);
+		nTmp = (nTmp+32)>>6;
+
+		pst_0_gamma[i] = nTmp;
+		ve_dnlp_tgt[i] = nTmp;
+
+	//LOGD(TAG_VPP, "[vpp.c]ve_dnlp_tgt[%d]=%x\n",i,ve_dnlp_tgt[i]);
+	}
+
+#ifdef DEBUG_DNLP
+	printk("3.1Pars %d,%d,%d,%d,%d,%d\n",mvreflsh,gmma_rate,low_alpha,hgh_alpha,sBgnBnd,sEndBnd);
+	printk("3.2Pars %d,%d,%d,%d\n",clip_rate,clashBgn,clashEnd,mtdbld_rate);
+#endif
+
+	pre_luma_avg4 = luma_avg4;
+	//---------------------------------------------
+
+	return;
+}
+
 static void ve_dnlp_calculate_tgt(vframe_t *vf)
 {
 	struct vframe_prop_s *p = &vf->prop;
@@ -639,14 +1172,17 @@ void ve_on_vs(vframe_t *vf)
 
 	if (ve_en){
 		// calculate dnlp target data
-		if(ve_dnlp_method == 0)
+		if (ve_dnlp_method == 0)
 			ve_dnlp_calculate_tgt(vf);
-		else if(ve_dnlp_method == 1)
+		else if (ve_dnlp_method == 1)
 			ve_dnlp_calculate_tgtx(vf);
-		else if(ve_dnlp_method == 2)
+		else if (ve_dnlp_method == 2)
 			ve_dnlp_calculate_tgt_ext(vf);
+		else if (ve_dnlp_method == 3)
+			ve_dnlp_calculate_tgtx_new(vf);
 		else
 			ve_dnlp_calculate_tgt(vf);
+
 		// calculate dnlp low-pass-filter data
 		ve_dnlp_calculate_lpf();
 		// calculate dnlp reg data
@@ -787,6 +1323,23 @@ void ve_set_dnlp_2(void)
 	ve_dnlp_hghalpha     = 26;
 	ve_dnlp_midalpha     = 28;
 	ve_dnlp_lowalpha     = 18;
+
+	ve_dnlp_mvreflsh  = 4; // u4[0-8] smooth moving, reflesh the curve, 0-refresh one frame
+	ve_dnlp_gmma_rate =60; //u8larger-->near to gamma1.8, smaller->gamma1.2 [0-256]dft60
+	ve_dnlp_lowalpha_new  =20; // u6[0-64]dft20
+	ve_dnlp_hghalpha_new  =28; // u6[0-64]dft28
+
+	ve_dnlp_sbgnbnd   =0; //u4s-curve begin band [0-16]dft0
+	ve_dnlp_sendbnd   =6; //u4s-curve begin band [0-16]dft5
+
+	ve_dnlp_cliprate_new  =6; //u6clash max slope[4-64]    dft6
+	ve_dnlp_clashBgn  =0; //u4clash hist begin point [0-16] dft0
+	ve_dnlp_clashEnd  =10; //u4clash hist end point [0~15] dft10
+
+	//please add the parameters
+	ve_mtdbld_rate    =32; //u6method blending rate (0~64) dft32
+	ve_blkgma_rate    =4;  //u6 dft4
+
 	// clear historic luma sum
 	ve_dnlp_luma_sum = 0;
 	// init tgt & lpf
@@ -812,6 +1365,23 @@ void ve_set_new_dnlp(struct ve_dnlp_table_s *p)
 	ve_dnlp_hghalpha     = p->hghalpha;
 	ve_dnlp_midalpha     = p->midalpha;
 	ve_dnlp_lowalpha     = p->lowalpha;
+
+	ve_dnlp_mvreflsh  = p->new_mvreflsh;
+	ve_dnlp_gmma_rate = p->new_gmma_rate;
+	ve_dnlp_lowalpha_new  = p->new_lowalpha;
+	ve_dnlp_hghalpha_new  = p->new_hghalpha;
+
+	ve_dnlp_sbgnbnd   = p->new_sbgnbnd;
+	ve_dnlp_sendbnd   = p->new_sendbnd;
+
+	ve_dnlp_cliprate_new  = p->new_cliprate;
+	ve_dnlp_clashBgn  = p->new_clashBgn;
+	ve_dnlp_clashEnd  = p->new_clashEnd;
+
+	//please add the parameters
+	ve_mtdbld_rate    = p->new_mtdbld_rate;
+	//ve_blkgma_rate    = p->ve_blkgma_rate; //u6 dft32
+
 	if(ve_en){
 		// clear historic luma sum
 		ve_dnlp_luma_sum = 0;
@@ -1036,6 +1606,22 @@ void ve_new_dnlp_param_update(void)
 	if (am_ve_new_dnlp.lowalpha> 48) am_ve_new_dnlp.lowalpha= 48;
 	if (am_ve_new_dnlp.midalpha> 48) am_ve_new_dnlp.midalpha= 48;
 	if (am_ve_new_dnlp.hghalpha> 48) am_ve_new_dnlp.hghalpha= 48;
+
+	if (am_ve_new_dnlp.new_mvreflsh> 7) am_ve_new_dnlp.new_mvreflsh= 7;
+	if (am_ve_new_dnlp.new_gmma_rate> 255) am_ve_new_dnlp.new_gmma_rate= 255;
+	if (am_ve_new_dnlp.new_lowalpha> 63) am_ve_new_dnlp.new_lowalpha= 63;
+	if (am_ve_new_dnlp.new_hghalpha> 63) am_ve_new_dnlp.new_hghalpha= 63;
+	if (am_ve_new_dnlp.new_sbgnbnd> 15) am_ve_new_dnlp.new_sbgnbnd= 15;
+	if (am_ve_new_dnlp.new_sendbnd> 15) am_ve_new_dnlp.new_sendbnd= 15;
+
+	if (am_ve_new_dnlp.new_cliprate> 63) am_ve_new_dnlp.new_cliprate= 63;
+	if (am_ve_new_dnlp.new_cliprate< 4) am_ve_new_dnlp.new_cliprate= 4;
+	if (am_ve_new_dnlp.new_clashBgn> 15) am_ve_new_dnlp.new_clashBgn= 15;
+	if (am_ve_new_dnlp.new_clashEnd> 15) am_ve_new_dnlp.new_clashEnd= 15;
+	if (am_ve_new_dnlp.new_clashEnd< 0) am_ve_new_dnlp.new_clashEnd= 0;
+	if (am_ve_new_dnlp.new_mtdbld_rate> 63) am_ve_new_dnlp.new_mtdbld_rate= 63;
+
+
 	vecm_latch_flag |= FLAG_VE_NEW_DNLP;
 }
 
diff --git a/include/linux/amlogic/ve.h b/include/linux/amlogic/ve.h
index a058d68c8d87..39bbbe3b0368 100755
--- a/include/linux/amlogic/ve.h
+++ b/include/linux/amlogic/ve.h
@@ -71,6 +71,18 @@ typedef struct ve_dnlp_table_s {
 	unsigned int lowalpha;
 	unsigned int midalpha;
 	unsigned int hghalpha;
+	unsigned int adj_level;
+	unsigned int new_adj_level;
+	unsigned int new_mvreflsh;
+	unsigned int new_gmma_rate;
+	unsigned int new_lowalpha;
+	unsigned int new_hghalpha;
+	unsigned int new_sbgnbnd;
+	unsigned int new_sendbnd;
+	unsigned int new_clashBgn;
+	unsigned int new_clashEnd;
+	unsigned int new_cliprate;
+	unsigned int new_mtdbld_rate;
 } ve_dnlp_table_t;
 #else
 typedef struct ve_dnlp_s {
-- 
2.19.0

