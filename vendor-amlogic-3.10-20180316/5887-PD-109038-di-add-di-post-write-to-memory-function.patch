From c0e2fb4835a11b84865219798080c92d6f56c99f Mon Sep 17 00:00:00 2001
From: KeLe Bai <kele.bai@amlogic.com>
Date: Tue, 18 Aug 2015 23:21:39 +0800
Subject: [PATCH 5887/5965] PD#109038: di: add di post write to memory function

Change-Id: Ifa3a1970c20f75f54e08e6d9b8adaeeaf9c3a404
---
 .../arm/boot/dts/amlogic/meson8m2_n200_2G.dtd |   2 +-
 drivers/amlogic/deinterlace/deinterlace.c     | 292 ++++++++++++++----
 drivers/amlogic/deinterlace/deinterlace.h     |   4 +-
 drivers/amlogic/deinterlace/deinterlace_hw.c  |  98 +++++-
 include/linux/amlogic/amports/canvas.h        |   2 +-
 5 files changed, 334 insertions(+), 64 deletions(-)

diff --git a/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd b/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
index f8efdb312c60..63f1eff61723 100644
--- a/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
+++ b/arch/arm/boot/dts/amlogic/meson8m2_n200_2G.dtd
@@ -156,7 +156,7 @@ void root_func(){
 		compatible = "amlogic,deinterlace";
 		dev_name = "deinterlace";
 		status = "ok";
-		reserve-memory = <0x02100000>; //10x1920x1088x3/2=33M
+		reserve-memory = <0x028e0000>; //7x1920x1088x3/2 + 1920x1088x5=41M
 	};
 
 /// ***************************************************************************************
diff --git a/drivers/amlogic/deinterlace/deinterlace.c b/drivers/amlogic/deinterlace/deinterlace.c
index 8891d3aae337..f12327379113 100644
--- a/drivers/amlogic/deinterlace/deinterlace.c
+++ b/drivers/amlogic/deinterlace/deinterlace.c
@@ -244,6 +244,7 @@ static int post_hold_line = 10;
 static int force_update_post_reg = 0x12;
 #endif
 static int bypass_post = 0;
+static bool post_wr_en = false;
 static int bypass_post_state = 0;
 static int bypass_dynamic = 0;
 static int bypass_dynamic_flag = 0;
@@ -1146,7 +1147,8 @@ all buffers are in
 #define QUEUE_RECYCLE		   5
 #define QUEUE_DISPLAY		   6
 #define QUEUE_TMP			   7
-#define QUEUE_NUM 8
+#define QUEUE_POST_DOING	   8
+#define QUEUE_NUM			   9
 
 #ifdef USE_LIST
 static struct list_head local_free_list_head = LIST_HEAD_INIT(local_free_list_head); // vframe is local_vframe
@@ -1236,7 +1238,7 @@ static void queue_init(int local_buffer_num)
 		q->out_idx = 0;
 		q->num = 0;
 		q->type = 0;
-		if ((i == QUEUE_RECYCLE) || (i == QUEUE_DISPLAY) || (i == QUEUE_TMP)) {
+		if ((i == QUEUE_RECYCLE) || (i == QUEUE_DISPLAY) || (i == QUEUE_TMP) || (i == QUEUE_POST_DOING)) {
 			q->type = 1;
 		}
 		if ((i == QUEUE_LOCAL_FREE) && use_2_interlace_buff)
@@ -1717,6 +1719,7 @@ static void dump_di_pre_stru(void)
 typedef struct{
 	DI_MIF_t di_buf0_mif;
 	DI_MIF_t di_buf1_mif;
+	DI_SIM_MIF_t di_diwr_mif;
 	#ifndef NEW_DI_V2
 	DI_SIM_MIF_t di_mtncrd_mif;
 	#endif
@@ -1724,6 +1727,7 @@ typedef struct{
 	#ifdef NEW_DI_V3
 	DI_MC_MIF_t di_mcvecrd_mif;
 	#endif
+	di_buf_t *cur_post_buf;
 	int update_post_reg_flag;
 	int post_process_fun_index;
 	int run_early_proc_fun_flag;
@@ -1734,8 +1738,22 @@ typedef struct{
 	bool vscale_skip_flag;
 	uint start_pts;
 	int buf_type;
+	int de_post_process_done;
+	int post_de_busy;
+	int di_post_num;
 }di_post_stru_t;
+
 static di_post_stru_t di_post_stru;
+static void dump_di_post_stru(void)
+{
+	printk("\ndi_post_stru:\n");
+	printk("run_early_proc_fun_flag	= %d\n", di_post_stru.run_early_proc_fun_flag);
+	printk("cur_disp_index			= %d\n", di_post_stru.cur_disp_index);
+	printk("post_de_busy			= %d\n", di_post_stru.post_de_busy);
+	printk("de_post_process_done	= %d\n", di_post_stru.de_post_process_done);
+	printk("cur_post_buf			= 0x%p\n,", di_post_stru.cur_post_buf);
+}
+
 #ifdef NEW_DI_V1
 static ssize_t store_dump_mem(struct device * dev, struct device_attribute *attr, const char * buf, size_t len)
 {
@@ -2199,6 +2217,12 @@ static void dis2_di(void)
 	if (get_blackout_policy()) {
 		di_set_power_control(1,0);
 	}
+	if (post_wr_en) {
+		diwr_set_power_control(0);
+		#ifdef CONFIG_VSYNC_RDMA
+		enable_rdma(1);
+		#endif
+	}
 	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 	spin_unlock_irqrestore(&plist_lock, flags);
 }
@@ -2397,9 +2421,8 @@ static int di_post_buf0_canvas_idx[2];
 static int di_post_buf1_canvas_idx[2];
 static int di_post_mtncrd_canvas_idx[2];
 static int di_post_mtnprd_canvas_idx[2];
-#ifdef NEW_DI_V3
 static int di_post_mcvecrd_canvas_idx[2];
-#endif
+
 static void config_canvas_idx(di_buf_t* di_buf, int nr_canvas_idx, int mtn_canvas_idx)
 {
 	if (di_buf) {
@@ -2491,9 +2514,11 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 	unsigned dp_mem_start = 0;
 #endif
 	unsigned int di_buf_size;
+	unsigned int di_post_mem = 0, di_post_buf_size = 0;
 	frame_count = 0;
 	disp_frame_count = 0;
 	cur_post_ready_di_buf = NULL;
+
 	for (i=0; i<MAX_IN_BUF_NUM; i++) {
 	vframe_in[i]=NULL;
 	}
@@ -2541,7 +2566,9 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 		else
 #endif
 		local_buf_num = di_mem_size/di_buf_size;
-
+		if (post_wr_en) {
+			local_buf_num = (di_mem_size + (width*canvas_height<<2))/(di_buf_size + (width*canvas_height<<1));
+		}
 		local_buf_num_available = local_buf_num;
 		if (local_buf_num > MAX_LOCAL_BUF_NUM) {
 			local_buf_num = MAX_LOCAL_BUF_NUM;
@@ -2649,8 +2676,16 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 			queue_in(di_buf, QUEUE_IN_FREE);
 		}
 	}
-
-	for (i=0; i<MAX_POST_BUF_NUM; i++) {
+	if (post_wr_en) {
+		di_post_mem = di_mem_start + di_buf_size*local_buf_num;
+		di_post_buf_size = width*canvas_height*2;
+		/* pre buffer must 2 more than post buffer */
+		di_post_stru.di_post_num = local_buf_num - 2;
+	} else {
+		di_post_stru.di_post_num = MAX_POST_BUF_NUM;
+		di_post_buf_size = 0;
+	}
+	for (i=0; i<di_post_stru.di_post_num; i++) {
 		di_buf_t* di_buf = &(di_buf_post[i]);
 	if (di_buf) {
 			if (i != used_post_buf_index) {
@@ -2660,7 +2695,10 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 				di_buf->vframe = &(vframe_post[i]);
 				di_buf->vframe->private_data = di_buf;
 				di_buf->queue_index = -1;
+				di_buf->canvas_config_size = (width<<16)|canvas_height;
+				di_buf->canvas_config_flag = 1;
 				di_buf->invert_top_bot_flag = 0;
+				di_buf->nr_adr = di_post_mem + di_post_buf_size*i;
 				queue_in(di_buf, QUEUE_POST_FREE);
 			}
 		}
@@ -2763,6 +2801,9 @@ static void di_uninit_buf(void)
 
 	di_pre_stru.pre_de_process_done = 0;
 	di_pre_stru.pre_de_busy = 0;
+	di_post_stru.cur_post_buf = NULL;
+	di_post_stru.post_de_busy = 0;
+	di_post_stru.de_post_process_done = 0;
 
 }
 /*
@@ -3046,10 +3087,14 @@ static void dump_state(void)
 	queue_for_each_entry(p, ptmp, QUEUE_PRE_READY, list) {
 		print_di_buf(p, 2);
 	}
-	printk("post_free_list (max %d):\n", MAX_POST_BUF_NUM);
+	printk("post_free_list (max %d):\n", di_post_stru.di_post_num);
 	queue_for_each_entry(p, ptmp, QUEUE_POST_FREE, list) {
 		printk("index %2d, 0x%p, type %d, vframetype 0x%x\n", p->index, p, p->type ,p->vframe->type);
 	}
+	printk("post_doing_list:\n");
+	queue_for_each_entry(p, ptmp, QUEUE_POST_DOING, list) {
+		print_di_buf(p, 2);
+	}
 	printk("post_ready_list:\n");
 	queue_for_each_entry(p, ptmp, QUEUE_POST_READY, list) {
 		print_di_buf(p, 2);
@@ -3080,6 +3125,7 @@ static void dump_state(void)
 	else
 		printk("di_wr_buf: NULL\n");
 	dump_di_pre_stru();
+	dump_di_post_stru();
 	printk("vframe_in[]:");
 	for (i=0; i<MAX_IN_BUF_NUM; i++) {
 			  printk("0x%p ",vframe_in[i]);
@@ -3404,7 +3450,7 @@ static void pre_de_process(void)
 #ifdef NEW_DI_V1
   Wr(DI_INTR_CTRL, ((di_pre_stru.enable_mtnwr?1:0) << 16) |		  // mask nrwr interrupt.
 				((di_pre_stru.enable_mtnwr?0:1) << 17) |	   //  mtnwr interrupt.
-					(1 << 18) |		  // mask diwr interrupt.
+					(post_wr_en?0:1 << 18) |		  // mask diwr interrupt.
 					(1 << 19) |		  // mask hist check interrupt.
 					(1 << 20) |		  // mask cont interrupt.
 					#ifdef NEW_DI_V3
@@ -3412,7 +3458,7 @@ static void pre_de_process(void)
 			(1 << 22) |		  // mask vecwr interrupt.
 			(1 << 23) |		  // mask infwr interrupt.
 					#endif
-					 0xf );			   // clean all pending interrupt bits.
+					 0xb);			   // clean all pending interrupt bits.
 #else
 	Wr(DI_INTR_CTRL, (0 << 16) |	   //  nrwr interrupt.
 				((di_pre_stru.enable_mtnwr?0:1) << 17) |	   //  mtnwr interrupt.
@@ -3493,24 +3539,23 @@ static void pre_de_process(void)
 		di_mtn_1_ctrl1 &= (~(1<<29));//disable txt
 		cont_rd = 1;
 	}
-	if (di_pre_stru.field_count_for_cont >= 3) {
-		di_mtn_1_ctrl1 |= 1<<29;//enable txt
-		#ifndef NEW_DI_V3
-		Wr(DI_CLKG_CTRL, 0xfeff0000); //di enable nr clock gate
-		#else
+		if (di_pre_stru.field_count_for_cont >= 3) {
+			di_mtn_1_ctrl1 |= 1<<29;//enable txt
+			#ifndef NEW_DI_V3
+			Wr(DI_CLKG_CTRL, 0xfeff0000); //di enable nr clock gate
+			#else
 		Wr(DI_CLKG_CTRL, 0xfdf60000); //nr/blend0/ei0/mtn0 clock gate
-		#endif
-		Wr(DI_PRE_CTRL, Rd(DI_PRE_CTRL)|(cont_rd<<25));
-		#ifdef NEW_DI_V4
-		Wr(DNR_CTRL,dnr_en?0x1ff00:0);
-		#endif
-		#ifdef NEW_DI_V3
-		if (di_pre_stru.cur_prog_flag == 0) {
+			#endif
+			Wr(DI_PRE_CTRL, Rd(DI_PRE_CTRL)|(cont_rd<<25));
+			#ifdef NEW_DI_V4
+			Wr(DNR_CTRL,dnr_en?0x1ff00:0);
+			#endif
+			#ifdef NEW_DI_V3
+			if (di_pre_stru.cur_prog_flag == 0) {
 			if (di_pre_stru.field_count_for_cont == 3)
 				Wr(DI_MTN_CTRL1, (0xffffcfff&Rd(DI_MTN_CTRL1)));//disable me(mc di)
 			else
 				Wr(DI_MTN_CTRL1, (mcpre_en?0x3000:0)|Rd(DI_MTN_CTRL1));//enable me(mc di)
-
 			if (di_pre_stru.field_count_for_cont == 4) {
 				di_mtn_1_ctrl1 &= (~(1<<30)); // enable contp2rd and contprd
 				Wr(MCDI_MOTINEN,1<<1|1);	//enable motin refinement
@@ -3518,7 +3563,7 @@ static void pre_de_process(void)
 			if (di_pre_stru.field_count_for_cont == 5)
 				Wr(MCDI_CTRL_MODE,0x1bfeefff);//disalbe reflinfo
 			}
-		#else
+			#else
 		di_mtn_1_ctrl1 &= (~(1<<30)); // enable contp2rd and contprd
 		#endif
 
@@ -3535,7 +3580,7 @@ static void pre_de_process(void)
 			Wr(DNR_CTRL,0);
 			#endif
 		}
-		di_pre_stru.field_count_for_cont++;
+			di_pre_stru.field_count_for_cont++;
 	}
 	else if (get_new_mode_flag() == 0) {
 		di_mtn_1_ctrl1 &= (~(1<<31)); // disable contwr
@@ -4615,6 +4660,12 @@ static irqreturn_t de_irq(int irq, void *dev_instance)
 #endif
 	//Wr(A9_0_IRQ_IN1_INTR_STAT_CLR, 1 << 14);
    //Rd(A9_0_IRQ_IN1_INTR_STAT_CLR);
+	if (post_wr_en && (data32&0x4)) {
+		di_post_stru.de_post_process_done = 1;
+		di_post_stru.post_de_busy = 0;
+		if (!(data32 & 0x2))
+			goto end;
+	}
 	if (pre_process_time_force) {
 		return IRQ_HANDLED;
 	}
@@ -4635,7 +4686,7 @@ static irqreturn_t de_irq(int irq, void *dev_instance)
 #endif
 	di_pre_stru.pre_de_process_done = 1;
 	di_pre_stru.pre_de_busy = 0;
-
+end:
 	if (init_flag) {
 		//printk("%s:up di sema\n", __func__);
 		trigger_pre_di_process('i');
@@ -4852,6 +4903,7 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	int di_width, di_height, di_start_x, di_end_x, di_start_y, di_end_y;
 	int hold_line = post_hold_line;
 	int post_blend_en=0, post_blend_mode=0, blend_mtn_en=0, ei_en=0, post_field_num=0;
+	int di_vpp_en, di_ddr_en;
 
 	if (di_get_power_control(1) == 0) {
 		return 0;
@@ -4927,11 +4979,15 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 			di_post_stru.di_buf1_mif.luma_y_start0 = di_start_y>>1;
 			di_post_stru.di_buf1_mif.luma_y_end0 = di_end_y>>1;
 	}
-		di_post_stru.di_buf0_mif.luma_x_start0	= di_start_x;
-		di_post_stru.di_buf0_mif.luma_x_end0	= di_end_x;
-		di_post_stru.di_buf1_mif.luma_x_start0	= di_start_x;
+	di_post_stru.di_buf0_mif.luma_x_start0	= di_start_x;
+	di_post_stru.di_buf0_mif.luma_x_end0	= di_end_x;
+	di_post_stru.di_buf1_mif.luma_x_start0	= di_start_x;
 	di_post_stru.di_buf1_mif.luma_x_end0	= di_end_x;
 
+	di_post_stru.di_diwr_mif.start_x = di_start_x;
+	di_post_stru.di_diwr_mif.end_x = di_end_x;
+	di_post_stru.di_diwr_mif.start_y = di_start_y;
+	di_post_stru.di_diwr_mif.end_y = di_end_y;
 	#ifndef NEW_DI_V2
 	di_post_stru.di_mtncrd_mif.start_x	= di_start_x;
 	di_post_stru.di_mtncrd_mif.end_x		= di_end_x;
@@ -4970,6 +5026,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);//remove from m8
+		#else
+		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
 		#ifdef NEW_DI_V3
 		config_mcvec_canvas_idx(di_buf->di_buf_dup_p[2], di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id]);
@@ -4981,6 +5039,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[2], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
+				#else
+		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
 		#ifdef NEW_DI_V3
 		config_mcvec_canvas_idx(di_buf->di_buf_dup_p[2], di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id]);
@@ -4992,6 +5052,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
+				#else
+		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
 		break;
 		case PULL_DOWN_BUF1://wave with buf1
@@ -5000,11 +5062,16 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[0], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
+				#else
+		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
 		break;
 		case PULL_DOWN_EI:
 		if (di_buf->di_buf_dup_p[1])
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
+		#ifdef NEW_DI_V2
+		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
+		#endif
 		break;
 		default:
 		break;
@@ -5017,8 +5084,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 				post_field_num = (di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)==VIDTYPE_INTERLACE_TOP?0:1;
 		di_post_stru.di_buf0_mif.canvas0_addr0 = di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		di_post_stru.di_diwr_mif.canvas_num	= di_buf->nr_canvas_idx;
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+				#else
+		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
 		#ifdef NEW_DI_V3
@@ -5044,6 +5114,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+						#else
+		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
 		#ifdef NEW_DI_V3
 		di_post_stru.di_mcvecrd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
@@ -5060,6 +5132,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
+						#else
+		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
 		post_blend_mode = 0;
 		blend_mtn_en = 1;
@@ -5073,6 +5147,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[0]->nr_canvas_idx;
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[0]->mtn_canvas_idx;
+						#else
+		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
 		post_blend_mode = 1;
 		blend_mtn_en = 0;//must enable
@@ -5087,6 +5163,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 			post_field_num = (di_buf->di_buf_dup_p[0]->vframe->type & VIDTYPE_TYPEMASK)==VIDTYPE_INTERLACE_TOP?0:1;
 		   di_post_stru.di_buf0_mif.src_field_mode = post_field_num;
 			}
+		#ifdef NEW_DI_V2
+		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
+		#endif
 		post_blend_mode = 2;
 		blend_mtn_en = 0;//must enable
 		ei_en = 1;
@@ -5104,6 +5183,14 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		blend_ctrl &= (~(1<<31));
 	}
 #endif
+	if (post_wr_en) {
+		di_vpp_en = 0;
+		di_ddr_en = 1;
+	} else {
+		di_vpp_en = 1;
+		di_ddr_en = 0;
+	}
+
 
 #ifdef NEW_DI_V3
 	di_post_stru.di_mcvecrd_mif.blend_mode = post_blend_mode;
@@ -5112,7 +5199,7 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		enable_di_post_2(
 				&di_post_stru.di_buf0_mif,
 				&di_post_stru.di_buf1_mif,
-				NULL,
+				&di_post_stru.di_diwr_mif,
 				#ifndef NEW_DI_V2
 				&di_post_stru.di_mtncrd_mif,
 				#endif
@@ -5121,8 +5208,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 				post_blend_en,													// blend enable
 				blend_mtn_en,													// blend mtn enable
 				post_blend_mode,												// blend mode.
-				1,																// di_vpp_en.
-				0,																// di_ddr_en.
+				di_vpp_en,																// di_vpp_en.
+				di_ddr_en,																// di_ddr_en.
 						post_field_num,		// 1 bottom generate top
 				hold_line,
 				post_urgent
@@ -5138,7 +5225,7 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		 di_post_switch_buffer(
 				&di_post_stru.di_buf0_mif,
 				&di_post_stru.di_buf1_mif,
-				NULL,
+				&di_post_stru.di_diwr_mif,
 				#ifndef NEW_DI_V2
 				&di_post_stru.di_mtncrd_mif,
 				#endif
@@ -5150,8 +5237,8 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 				post_blend_en,													// blend enable
 				blend_mtn_en,													// blend mtn enable
 				post_blend_mode,												// blend mode.
-				1,																// di_vpp_en.
-				0,																// di_ddr_en.
+				di_vpp_en,															// di_vpp_en.
+				di_ddr_en,															// di_ddr_en.
 				post_field_num,		// 1 bottom generate top
 				hold_line,
 				post_urgent
@@ -5176,6 +5263,45 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	di_post_stru.update_post_reg_flag--;
 	return 0;
 }
+
+static void post_de_done_buf_config(void)
+{
+	ulong fiq_flag=0, irq_flag2=0;
+	di_buf_t *di_buf = NULL;
+	if (di_post_stru.cur_post_buf == NULL)
+		return;
+
+	di_lock_irqfiq_save(irq_flag2, fiq_flag);
+	queue_out(di_post_stru.cur_post_buf);
+	di_buf = di_post_stru.cur_post_buf;
+	queue_in(di_post_stru.cur_post_buf,QUEUE_POST_READY);
+	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
+	vf_notify_receiver(VFM_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
+	di_post_stru.cur_post_buf = NULL;
+
+}
+
+static void di_post_process(void)
+{
+	struct di_buf_s *di_buf = NULL;
+	vframe_t *vf_p = NULL;
+	if (!queue_empty(QUEUE_POST_DOING) && !di_post_stru.post_de_busy) {
+		di_buf = get_di_buf_head(QUEUE_POST_DOING);
+		if (check_di_buf(di_buf, 20)) {
+			return;
+		}
+		vf_p = di_buf->vframe;
+		if (di_post_stru.run_early_proc_fun_flag) {
+			if (vf_p->early_process_fun) {
+				vf_p->early_process_fun(vf_p->private_data, vf_p);
+			}
+		}
+		if (di_buf->process_fun_index)
+			de_post_process(di_buf,0,vf_p->width-1,0,vf_p->height-1,vf_p);
+		di_post_stru.post_de_busy = 1;
+		di_post_stru.cur_post_buf = di_buf;
+	}
+}
 #if 0
 static int de_post_process_pd(void* arg, unsigned zoom_start_x_lines,
 	 unsigned zoom_end_x_lines, unsigned zoom_start_y_lines, unsigned zoom_end_y_lines, vframe_t* disp_vf)
@@ -5948,7 +6074,7 @@ static int process_post_vframe(void)
 						/*for debug*/
 							if (debug_blend_mode != -1)
 								di_buf->pulldown_mode = debug_blend_mode;
-							di_buf->vframe->process_fun = de_post_process;
+							di_buf->vframe->process_fun = post_wr_en?NULL:de_post_process;
 							di_buf->process_fun_index = PROCESS_FUN_DI;
 							inc_post_ref_count(di_buf);
 						}
@@ -5968,12 +6094,15 @@ static int process_post_vframe(void)
 #endif
 						}
 						else{
-				if (frame_count == start_frame_drop_count) {
+							if (frame_count == start_frame_drop_count) {
 								if ((di_post_stru.start_pts != 0) && (di_buf->vframe->pts == 0))
 									di_buf->vframe->pts = di_post_stru.start_pts;
 								di_post_stru.start_pts = 0;
 							}
-							queue_in(di_buf, QUEUE_POST_READY);
+							if (post_wr_en)
+								queue_in(di_buf, QUEUE_POST_DOING);
+							else
+								queue_in(di_buf, QUEUE_POST_READY);
 						}
 						frame_count++;
 						di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
@@ -5982,6 +6111,7 @@ static int process_post_vframe(void)
 #ifdef DI_DEBUG
 					di_print("%s <interlace>: ", __func__);
 #endif
+					if (!post_wr_en)
 					vf_notify_receiver(VFM_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
 				}
 				ret = 1;
@@ -6081,7 +6211,7 @@ static int process_post_vframe(void)
 					if (ready_di_buf->post_proc_flag == -2) {
 						di_buf->vframe->type |= VIDTYPE_VIU_FIELD;
 						di_buf->vframe->type &= ~(VIDTYPE_TYPEMASK);
-						di_buf->vframe->process_fun = de_post_process;
+						di_buf->vframe->process_fun = post_wr_en?NULL:de_post_process;
 						di_buf->process_fun_index = PROCESS_FUN_DI;
 						di_buf->pulldown_mode = PULL_DOWN_EI;
 					}else{
@@ -6120,7 +6250,10 @@ static int process_post_vframe(void)
 								di_buf->vframe->pts = di_post_stru.start_pts;
 							di_post_stru.start_pts = 0;
 						}
-						queue_in(di_buf, QUEUE_POST_READY);
+						if (post_wr_en && (di_buf->process_fun_index != PROCESS_FUN_NULL))
+							queue_in(di_buf, QUEUE_POST_DOING);
+						else
+							queue_in(di_buf, QUEUE_POST_READY);
 					}
 					frame_count++;
 					di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
@@ -6186,7 +6319,7 @@ static int process_post_vframe(void)
 						di_buf->vframe->early_process_fun = do_nothing_fun;
 					}
 					di_buf->pulldown_mode = PULL_DOWN_BUF1;
-					di_buf->vframe->process_fun = de_post_process;
+					di_buf->vframe->process_fun = post_wr_en?NULL:de_post_process;
 					di_buf->process_fun_index = PROCESS_FUN_DI;
 				}
 				else if (prog_tb_field_proc_type == 0) {
@@ -6257,7 +6390,10 @@ static int process_post_vframe(void)
 								di_buf->vframe->pts = di_post_stru.start_pts;
 							di_post_stru.start_pts = 0;
 						}
-						queue_in(di_buf, QUEUE_POST_READY);
+						if (post_wr_en)
+							queue_in(di_buf, QUEUE_POST_DOING);
+						else
+							queue_in(di_buf, QUEUE_POST_READY);
 				   }
 				}
 				frame_count++;
@@ -6340,6 +6476,12 @@ unreg:
 				if (get_blackout_policy()) {
 					di_set_power_control(1,0);
 				}
+				if (post_wr_en) {
+					diwr_set_power_control(0);
+					#ifdef CONFIG_VSYNC_RDMA
+					enable_rdma(1);
+					#endif
+				}
 				di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
 #if (!(defined RUN_DI_PROCESS_IN_IRQ))||(defined ENABLE_SPIN_LOCK_ALWAYS)
@@ -6376,6 +6518,12 @@ static void di_unreg_process_irq(void)
 		if (get_blackout_policy()) {
 			di_set_power_control(1,0);
 		}
+		if (post_wr_en) {
+			diwr_set_power_control(0);
+			#ifdef CONFIG_VSYNC_RDMA
+			enable_rdma(1);
+			#endif
+		}
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
 #if (defined ENABLE_SPIN_LOCK_ALWAYS)
@@ -6423,7 +6571,12 @@ static void di_reg_process(void)
 		if (vframe) {
 			di_set_power_control(0,1);
 			di_set_power_control(1,1);
-
+			if (post_wr_en) {
+				diwr_set_power_control(1);
+				#ifdef CONFIG_VSYNC_RDMA
+				enable_rdma(0);
+				#endif
+			}
 /* add for di Reg re-init */
 #ifdef NEW_DI_TV
 di_set_para_by_tvinfo(vframe);
@@ -6562,7 +6715,6 @@ static void di_process(void)
 			while (check_recycle_buf()&1) {};
 			di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
-
 			if ((di_pre_stru.pre_de_busy == 0) && (di_pre_stru.pre_de_process_done == 0)) {
 				if ((pre_run_flag == DI_RUN_FLAG_RUN) || (pre_run_flag == DI_RUN_FLAG_STEP)) {
 					if (pre_run_flag == DI_RUN_FLAG_STEP)
@@ -6581,7 +6733,13 @@ static void di_process(void)
 	di_post_read_reverse(overturn);
 #endif
 			while (process_post_vframe()) {};
-
+			if (post_wr_en) {
+			if (di_post_stru.post_de_busy == 0 && di_post_stru.de_post_process_done) {
+				post_de_done_buf_config();
+				di_post_stru.de_post_process_done = 0;
+			}
+			di_post_process();
+		}
 
 #if (!(defined RUN_DI_PROCESS_IN_IRQ))||(defined ENABLE_SPIN_LOCK_ALWAYS)
 			spin_unlock_irqrestore(&plist_lock, flags);
@@ -6915,14 +7073,14 @@ light_unreg:
 			pre_urgent = 0;
 		}
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
-		if (strcmp(vf_get_receiver_name(VFM_NAME), "ppmgr") == 0 ) {
-			di_post_stru.run_early_proc_fun_flag = 1;
-			receiver_is_amvideo = 0;
+		if (strcmp(vf_get_receiver_name(VFM_NAME), "amvideo") == 0 ) {
+			di_post_stru.run_early_proc_fun_flag = 0;
+			receiver_is_amvideo = 1;
 			//printk("set run_early_proc_fun_flag to 1\n");
 		}
 		else{
-			di_post_stru.run_early_proc_fun_flag = 0;
-			receiver_is_amvideo = 1;
+			di_post_stru.run_early_proc_fun_flag = 1;
+			receiver_is_amvideo = 0;
 		}
 #endif
 	}
@@ -6991,6 +7149,7 @@ static vframe_t *di_vf_peek(void* arg)
 {
 	vframe_t* vframe_ret = NULL;
 	di_buf_t* di_buf = NULL;
+
 	video_peek_cnt++;
 	if ((init_flag == 0) || recovery_flag || di_pre_stru.unreg_req_flag || dump_state_flag)
 		return NULL;
@@ -7018,6 +7177,14 @@ static vframe_t *di_vf_peek(void* arg)
 	   di_buf = get_di_buf_head(QUEUE_POST_READY);
 	   if (di_buf) {
 	   vframe_ret = di_buf->vframe;
+	   /*
+	    if (di_buf->process_fun_index != PROCESS_FUN_NULL) {
+
+	   config_canvas_idx(di_buf, (di_post_stru.canvas_id?42:43), -1);//vdin canvas
+	   vframe_ret->canvas0Addr = di_buf->nr_canvas_idx;
+	   vframe_ret->canvas1Addr = di_buf->nr_canvas_idx;
+		}
+		*/
 	}
 	}
 	}
@@ -7031,6 +7198,7 @@ static vframe_t *di_vf_peek(void* arg)
 			vframe_ret->duration = 0;
 		}
 	}
+
 	return vframe_ret;
 }
 /*recycle the buffer for keeping buffer*/
@@ -7057,6 +7225,7 @@ static void recycle_keep_buffer(void)
  }
 static vframe_t *di_vf_get(void* arg)
 {
+
 	vframe_t* vframe_ret = NULL;
 	di_buf_t* di_buf = NULL;
 	ulong irq_flag2=0, fiq_flag=0;
@@ -7090,10 +7259,17 @@ get_vframe:
 
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
-	   if (di_buf) {
-	   vframe_ret = di_buf->vframe;
+		if (di_buf) {
+			vframe_ret = di_buf->vframe;
+			if (post_wr_en && (di_buf->process_fun_index != PROCESS_FUN_NULL)) {
+				config_canvas_idx(di_buf, di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id], -1);
+				vframe_ret->canvas0Addr = di_buf->nr_canvas_idx;
+				vframe_ret->canvas1Addr = di_buf->nr_canvas_idx;
+				vframe_ret->early_process_fun = NULL;
+				vframe_ret->process_fun = NULL;
+			}
 		}
-	   disp_frame_count++;
+		disp_frame_count++;
 	   if (run_flag == DI_RUN_FLAG_STEP) {
 			run_flag = DI_RUN_FLAG_STEP_DONE;
 	   }
@@ -7110,11 +7286,12 @@ get_vframe:
 		}
 	}
 
-	if (di_post_stru.run_early_proc_fun_flag && vframe_ret) {
+	if (!post_wr_en && di_post_stru.run_early_proc_fun_flag && vframe_ret) {
 		if (vframe_ret->early_process_fun == do_pre_only_fun) {
 			vframe_ret->early_process_fun(vframe_ret->private_data, vframe_ret);
 		}
 	}
+
 	//if(vframe_ret)
 	   //recycle_keep_buffer();
 
@@ -7269,10 +7446,10 @@ static int di_probe(struct platform_device *pdev)
 	di_post_buf1_canvas_idx[0] = DI_POST_BUF1_CANVAS_IDX;
 	di_post_mtncrd_canvas_idx[0] = DI_POST_MTNCRD_CANVAS_IDX;
 	di_post_mtnprd_canvas_idx[0] = DI_POST_MTNPRD_CANVAS_IDX;
-#ifdef NEW_DI_V3
+//#ifdef NEW_DI_V3
 		di_post_mcvecrd_canvas_idx[0] = DI_POST_MCVECRD_CANVAS_IDX;
 		di_post_mcvecrd_canvas_idx[1] = DI_POST_MCVECRD_CANVAS_IDX2;
-#endif
+//#endif
 #ifdef CONFIG_VSYNC_RDMA
 	di_post_buf0_canvas_idx[1] = DI_POST_BUF0_CANVAS_IDX2;
 	di_post_buf1_canvas_idx[1] = DI_POST_BUF1_CANVAS_IDX2;
@@ -7795,6 +7972,9 @@ module_param(timeout_miss_policy, uint, 0664);
 MODULE_PARM_DESC(bypass_post, "\n bypass_post\n");
 module_param(bypass_post, uint, 0664);
 
+MODULE_PARM_DESC(post_wr_en, "\n post write enable\n");
+module_param(post_wr_en, bool, 0664);
+
 MODULE_PARM_DESC(bypass_post_state, "\n bypass_post_state\n");
 module_param(bypass_post_state, uint, 0664);
 
diff --git a/drivers/amlogic/deinterlace/deinterlace.h b/drivers/amlogic/deinterlace/deinterlace.h
index 6aff00d2884b..bf8de151a063 100755
--- a/drivers/amlogic/deinterlace/deinterlace.h
+++ b/drivers/amlogic/deinterlace/deinterlace.h
@@ -72,6 +72,7 @@
 #endif
 
 
+
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define Wr(adr, val) WRITE_VCBUS_REG(adr, val)
 #define Rd(adr) READ_VCBUS_REG(adr)
@@ -369,7 +370,6 @@ void enable_di_pre_aml (
    		int nr_en, int mtn_en, int pd32_check_en, int pd22_check_en, int hist_check_en,
    		int pre_field_num, int pre_vdin_link, int hold_line, int urgent
    	);
-
 #ifdef NEW_DI_V3
 void enable_mc_di_pre(DI_MC_MIF_t *di_mcinford_mif,DI_MC_MIF_t *di_mcinfowr_mif,DI_MC_MIF_t *di_mcvecwr_mif,int urgent);
 void enable_mc_di_post(DI_MC_MIF_t *di_mcvecrd_mif,int urgent,bool reverse);
@@ -510,7 +510,7 @@ typedef struct reg_cfg_{
 int get_current_vscale_skip_count(vframe_t* vf);
 
 void di_set_power_control(unsigned char type, unsigned char enable);
-
+void diwr_set_power_control(unsigned char enable);
 unsigned char di_get_power_control(unsigned char type);
 
 #endif
diff --git a/drivers/amlogic/deinterlace/deinterlace_hw.c b/drivers/amlogic/deinterlace/deinterlace_hw.c
index 172514fe252d..1a1f1d9cdf63 100755
--- a/drivers/amlogic/deinterlace/deinterlace_hw.c
+++ b/drivers/amlogic/deinterlace/deinterlace_hw.c
@@ -268,6 +268,17 @@ static void set_di_mem_fmt_more (
 
 static void set_di_mem_mif ( DI_MIF_t * mif, int urgent, int hold_line );
 
+static void set_di_if0_fmt_more (
+		int hfmt_en,
+		int hz_yc_ratio,		//2bit
+		int hz_ini_phase,		//4bit
+		int vfmt_en,
+		int vt_yc_ratio,		//2bit
+		int vt_ini_phase,		//4bit
+		int y_length,
+		int c_length,
+		int hz_rpt				//1bit
+	);
 static void set_di_if1_fmt_more (
 		int hfmt_en,
 		int hz_yc_ratio,		//2bit
@@ -995,7 +1006,37 @@ static void set_di_mem_mif(DI_MIF_t *mif, int urgent, int hold_line)
 						0 );														// hz repeat.
 	}
 }
+static void set_di_if0_fmt_more (int hfmt_en,
+				int hz_yc_ratio,		//2bit
+				int hz_ini_phase,		//4bit
+				int vfmt_en,
+				int vt_yc_ratio,		//2bit
+				int vt_ini_phase,		//4bit
+				int y_length,
+				int c_length,
+				int hz_rpt				//1bit
+				)
+{
+	int vt_phase_step = (16 >> vt_yc_ratio);
 
+	VSYNC_WR_MPEG_REG(VIU_VD1_FMT_CTRL,
+							  (hz_rpt << 28)		|		//hz rpt pixel
+							  (hz_ini_phase << 24)	|		//hz ini phase
+							  (0 << 23)				|		//repeat p0 enable
+							  (hz_yc_ratio << 21)	|		//hz yc ratio
+							  (hfmt_en << 20)		|		//hz enable
+							  (1 << 17)				|		//nrpt_phase0 enable
+							  (0 << 16)				|		//repeat l0 enable
+							  (0 << 12)				|		//skip line num
+							  (vt_ini_phase << 8)	|		//vt ini phase
+							  (vt_phase_step << 1)	|		//vt phase step (3.4)
+							  (vfmt_en << 0)				//vt enable
+					);
+
+	VSYNC_WR_MPEG_REG(VIU_VD1_FMT_W, (y_length << 16) |		//hz format width
+							 (c_length << 0)				//vt format width
+					);
+}
 static void set_di_if1_fmt_more (int hfmt_en,
 				int hz_yc_ratio,		//2bit
 				int hz_ini_phase,		//4bit
@@ -1251,6 +1292,7 @@ static void set_di_chan2_mif ( DI_MIF_t *mif, int urgent, int hold_line)
 static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 {
 	unsigned int pat, loop=0;
+	unsigned bytes_per_pixel, demux_mode;
 
 	if (mif->set_separate_en == 1) {
 	pat = vpat[(di_vscale_skip_count_real<<1)+1];
@@ -1262,6 +1304,23 @@ static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 	} else {
 		loop = 0;
 	pat = vpat[di_vscale_skip_count_real];
+		bytes_per_pixel = mif->set_separate_en ? 0 : (mif->video_mode ? 2 : 1);
+	demux_mode = mif->video_mode;
+	VSYNC_WR_MPEG_REG(VD1_IF0_GEN_REG, (1 << 29)    |	 //reset on go field
+								(urgent << 28)				|	// urgent
+								(urgent << 27)				|	// luma urgent
+								(1 << 25)					|	// no dummy data.
+								(hold_line << 19)			|	// hold lines
+								(1 << 18)					|	// push dummy pixel
+								(demux_mode << 16)			|	// demux_mode
+								(bytes_per_pixel << 14)		|
+								(mif->burst_size_cr << 12)	|
+								(mif->burst_size_cb << 10)	|
+								(mif->burst_size_y << 8)	|
+								(0 << 6)	|
+								((mif->set_separate_en!=0) << 1)	|
+								(1 << 0)						// cntl_enable
+		);
 	// ----------------------
 	// Canvas
 	// ----------------------
@@ -1297,6 +1356,30 @@ static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 				   (loop << 0));
 	VSYNC_WR_MPEG_REG(VD1_IF0_LUMA0_RPT_PAT,   pat);
 	VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA0_RPT_PAT, pat);
+		if (mif->set_separate_en != 0)	 // 4:2:0 block mode.
+	{
+		set_di_if0_fmt_more (
+							 1, // hfmt_en
+							 1,	// hz_yc_ratio
+							 0,	// hz_ini_phase
+							 1,	// vfmt_en
+							 1, // vt_yc_ratio
+							 0, // vt_ini_phase
+						mif->luma_x_end0 - mif->luma_x_start0 + 1, // y_length
+						mif->chroma_x_end0 - mif->chroma_x_start0 + 1, // c length
+							 0 ); // hz repeat.
+	} else {
+		set_di_if0_fmt_more (
+							 1,	// hfmt_en
+							 1,	// hz_yc_ratio
+							 0, // hz_ini_phase
+							 0,	// vfmt_en
+							 0,	// vt_yc_ratio
+							 0, // vt_ini_phase
+						mif->luma_x_end0 - mif->luma_x_start0 + 1, // y_length
+						((mif->luma_x_end0 >>1 ) - (mif->luma_x_start0>>1) + 1), // c length
+							 0); // hz repeat
+	}
 }
 
 void initial_di_pre_aml(int hsize_pre, int vsize_pre, int hold_line)
@@ -1363,6 +1446,7 @@ void initial_di_post_2(int hsize_post, int vsize_post, int hold_line)
 					  (0 << 29) |						// post field number.
 					  (0x3 << 30)						// post soft rst  post frame rst.
 		);
+
 }
 
 void di_post_switch_buffer (
@@ -1473,7 +1557,7 @@ void di_post_switch_buffer (
 					  (di_vpp_en << 12) |							// post viu link
 					  (hold_line << 16) |							// post hold line number
 					  (post_field_num << 29) |						// post field number.
-					  (0x1 << 30 )									// post soft rst  post frame rst.
+					  (0x3 << 30 )									// post soft rst  post frame rst.
 		);
 }
 
@@ -1539,7 +1623,7 @@ void enable_di_post_2 (
 	if (di_ddr_en)
 	{
 	   VSYNC_WR_MPEG_REG(DI_DIWR_X, (di_diwr_mif->start_x <<16) | (di_diwr_mif->end_x));				// start_x 0 end_x 719.
-	   VSYNC_WR_MPEG_REG(DI_DIWR_Y, (di_diwr_mif->start_y <<16) | (di_diwr_mif->end_y *2 + 1 ));			// start_y 0 end_y 479.
+	   VSYNC_WR_MPEG_REG(DI_DIWR_Y, (di_diwr_mif->start_y <<16) | (di_diwr_mif->end_y));			// start_y 0 end_y 479.
 	   VSYNC_WR_MPEG_REG(DI_DIWR_CTRL, di_diwr_mif->canvas_num |										// canvas index.
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 						(urgent << 16));																// urgent.
@@ -1589,7 +1673,7 @@ void enable_di_post_2 (
 					  (di_vpp_en << 12) |							// post viu link
 					  (hold_line << 16) |							// post hold line number
 					  (post_field_num << 29) |						// post field number.
-					  (0x1 << 30 )									// post soft rst  post frame rst.
+					  (0x3 << 30 )									// post soft rst  post frame rst.
 		);
 #ifdef NEW_DI_V1
 		VSYNC_WR_MPEG_REG(DI_EI_CTRL3, ei_ctrl3);
@@ -1960,7 +2044,13 @@ void di_post_read_reverse_irq(bool reverse)
 	}
 #endif
 }
-
+void diwr_set_power_control(unsigned char enable)
+{
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+	switch_vpu_mem_pd_vmod(VPU_VIU_VD1, enable?VPU_MEM_POWER_ON:VPU_MEM_POWER_DOWN);
+	switch_vpu_mem_pd_vmod(VPU_DI_POST, enable?VPU_MEM_POWER_ON:VPU_MEM_POWER_DOWN);
+	#endif
+}
 static unsigned char pre_power_on = 0;
 //static unsigned char post_power_on = 0;
 void di_set_power_control(unsigned char type, unsigned char enable)
diff --git a/include/linux/amlogic/amports/canvas.h b/include/linux/amlogic/amports/canvas.h
index db78ffac98eb..77ccc22dcfd7 100755
--- a/include/linux/amlogic/amports/canvas.h
+++ b/include/linux/amlogic/amports/canvas.h
@@ -41,7 +41,7 @@ typedef struct {
 #define AMVDEC_ALL_CANVAS_RANGE_1 0x25 //mjpeg
 
 #define PPMGR2_MAX_CANVAS 8
-#define PPMGR2_CANVAS_INDEX 0x70    // 0x70-0x7f for PPMGR2 (IONVIDEO)
+#define PPMGR2_CANVAS_INDEX 0xf0    // 0x70-0x7f for PPMGR2 (IONVIDEO)
 
 #define AMVDEC_H264MVC_CANVAS_INDEX 0x78
 #define AMVDEC_H264MVC_CANVAS_MAX 0xbf
-- 
2.19.0

