From bbfd25d8b7a589a2fec501e06ad0b22fccb225ae Mon Sep 17 00:00:00 2001
From: Zhituo Xia <zhituo.xia@amlogic.com>
Date: Mon, 16 Nov 2015 21:56:50 +0800
Subject: [PATCH 5909/5965] PD#109038: di: fix m6 compile err

Change-Id: Ibf51d6fab312a8555e4a12975225e371bdb4f2d3
---
 drivers/amlogic/deinterlace/deinterlace.c    | 196 +++++++++++++++++--
 drivers/amlogic/deinterlace/deinterlace.h    |   2 +
 drivers/amlogic/deinterlace/deinterlace_hw.c |  25 +++
 include/linux/amlogic/amports/canvas.h       |   9 +
 4 files changed, 212 insertions(+), 20 deletions(-)
 mode change 100755 => 100644 drivers/amlogic/deinterlace/deinterlace.h
 mode change 100755 => 100644 drivers/amlogic/deinterlace/deinterlace_hw.c
 mode change 100755 => 100644 include/linux/amlogic/amports/canvas.h

diff --git a/drivers/amlogic/deinterlace/deinterlace.c b/drivers/amlogic/deinterlace/deinterlace.c
index f12327379113..74352eb42a6a 100644
--- a/drivers/amlogic/deinterlace/deinterlace.c
+++ b/drivers/amlogic/deinterlace/deinterlace.c
@@ -71,6 +71,15 @@
 //#define RUN_DI_PROCESS_IN_TIMER_IRQ
 //#define RUN_DI_PROCESS_IN_TIMER
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+#ifndef D2D3_CANVAS_DBR_INDEX
+#define D2D3_CANVAS_DBR_INDEX  0xE5
+#endif
+#endif
+
+//#define RUN_DI_PROCESS_IN_TIMER_IRQ
+//#define RUN_DI_PROCESS_IN_TIMER
+
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 #ifdef CONFIG_AML_VSYNC_FIQ_ENABLE
 #define FIQ_VSYNC
@@ -244,7 +253,9 @@ static int post_hold_line = 10;
 static int force_update_post_reg = 0x12;
 #endif
 static int bypass_post = 0;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 static bool post_wr_en = false;
+#endif
 static int bypass_post_state = 0;
 static int bypass_dynamic = 0;
 static int bypass_dynamic_flag = 0;
@@ -1147,8 +1158,12 @@ all buffers are in
 #define QUEUE_RECYCLE		   5
 #define QUEUE_DISPLAY		   6
 #define QUEUE_TMP			   7
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define QUEUE_POST_DOING	   8
 #define QUEUE_NUM			   9
+#else
+#define QUEUE_NUM 8
+#endif
 
 #ifdef USE_LIST
 static struct list_head local_free_list_head = LIST_HEAD_INIT(local_free_list_head); // vframe is local_vframe
@@ -1238,7 +1253,11 @@ static void queue_init(int local_buffer_num)
 		q->out_idx = 0;
 		q->num = 0;
 		q->type = 0;
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		if ((i == QUEUE_RECYCLE) || (i == QUEUE_DISPLAY) || (i == QUEUE_TMP) || (i == QUEUE_POST_DOING)) {
+		#else
+		if ((i == QUEUE_RECYCLE) || (i == QUEUE_DISPLAY) || (i == QUEUE_TMP)) {
+		#endif
 			q->type = 1;
 		}
 		if ((i == QUEUE_LOCAL_FREE) && use_2_interlace_buff)
@@ -1744,6 +1763,7 @@ typedef struct{
 }di_post_stru_t;
 
 static di_post_stru_t di_post_stru;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 static void dump_di_post_stru(void)
 {
 	printk("\ndi_post_stru:\n");
@@ -1753,7 +1773,7 @@ static void dump_di_post_stru(void)
 	printk("de_post_process_done	= %d\n", di_post_stru.de_post_process_done);
 	printk("cur_post_buf			= 0x%p\n,", di_post_stru.cur_post_buf);
 }
-
+#endif
 #ifdef NEW_DI_V1
 static ssize_t store_dump_mem(struct device * dev, struct device_attribute *attr, const char * buf, size_t len)
 {
@@ -2217,12 +2237,14 @@ static void dis2_di(void)
 	if (get_blackout_policy()) {
 		di_set_power_control(1,0);
 	}
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	if (post_wr_en) {
 		diwr_set_power_control(0);
 		#ifdef CONFIG_VSYNC_RDMA
 		enable_rdma(1);
 		#endif
 	}
+	#endif
 	di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 	spin_unlock_irqrestore(&plist_lock, flags);
 }
@@ -2514,7 +2536,9 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 	unsigned dp_mem_start = 0;
 #endif
 	unsigned int di_buf_size;
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	unsigned int di_post_mem = 0, di_post_buf_size = 0;
+	#endif
 	frame_count = 0;
 	disp_frame_count = 0;
 	cur_post_ready_di_buf = NULL;
@@ -2566,9 +2590,11 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 		else
 #endif
 		local_buf_num = di_mem_size/di_buf_size;
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		if (post_wr_en) {
 			local_buf_num = (di_mem_size + (width*canvas_height<<2))/(di_buf_size + (width*canvas_height<<1));
 		}
+		#endif
 		local_buf_num_available = local_buf_num;
 		if (local_buf_num > MAX_LOCAL_BUF_NUM) {
 			local_buf_num = MAX_LOCAL_BUF_NUM;
@@ -2676,6 +2702,7 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 			queue_in(di_buf, QUEUE_IN_FREE);
 		}
 	}
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	if (post_wr_en) {
 		di_post_mem = di_mem_start + di_buf_size*local_buf_num;
 		di_post_buf_size = width*canvas_height*2;
@@ -2685,7 +2712,12 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 		di_post_stru.di_post_num = MAX_POST_BUF_NUM;
 		di_post_buf_size = 0;
 	}
+	#endif
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	for (i=0; i<di_post_stru.di_post_num; i++) {
+	#else
+	for (i=0; i<MAX_POST_BUF_NUM; i++) {
+	#endif
 		di_buf_t* di_buf = &(di_buf_post[i]);
 	if (di_buf) {
 			if (i != used_post_buf_index) {
@@ -2695,10 +2727,12 @@ static int di_init_buf(int width, int height, unsigned char prog_flag)
 				di_buf->vframe = &(vframe_post[i]);
 				di_buf->vframe->private_data = di_buf;
 				di_buf->queue_index = -1;
+				#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 				di_buf->canvas_config_size = (width<<16)|canvas_height;
 				di_buf->canvas_config_flag = 1;
-				di_buf->invert_top_bot_flag = 0;
 				di_buf->nr_adr = di_post_mem + di_post_buf_size*i;
+				#endif
+				di_buf->invert_top_bot_flag = 0;
 				queue_in(di_buf, QUEUE_POST_FREE);
 			}
 		}
@@ -2801,9 +2835,11 @@ static void di_uninit_buf(void)
 
 	di_pre_stru.pre_de_process_done = 0;
 	di_pre_stru.pre_de_busy = 0;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	di_post_stru.cur_post_buf = NULL;
 	di_post_stru.post_de_busy = 0;
 	di_post_stru.de_post_process_done = 0;
+#endif
 
 }
 /*
@@ -3087,14 +3123,20 @@ static void dump_state(void)
 	queue_for_each_entry(p, ptmp, QUEUE_PRE_READY, list) {
 		print_di_buf(p, 2);
 	}
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	printk("post_free_list (max %d):\n", di_post_stru.di_post_num);
+	#else
+	printk("post_free_list (max %d):\n", MAX_POST_BUF_NUM);
+	#endif
 	queue_for_each_entry(p, ptmp, QUEUE_POST_FREE, list) {
 		printk("index %2d, 0x%p, type %d, vframetype 0x%x\n", p->index, p, p->type ,p->vframe->type);
 	}
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	printk("post_doing_list:\n");
 	queue_for_each_entry(p, ptmp, QUEUE_POST_DOING, list) {
 		print_di_buf(p, 2);
 	}
+	#endif
 	printk("post_ready_list:\n");
 	queue_for_each_entry(p, ptmp, QUEUE_POST_READY, list) {
 		print_di_buf(p, 2);
@@ -3125,7 +3167,9 @@ static void dump_state(void)
 	else
 		printk("di_wr_buf: NULL\n");
 	dump_di_pre_stru();
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	dump_di_post_stru();
+	#endif
 	printk("vframe_in[]:");
 	for (i=0; i<MAX_IN_BUF_NUM; i++) {
 			  printk("0x%p ",vframe_in[i]);
@@ -3450,7 +3494,11 @@ static void pre_de_process(void)
 #ifdef NEW_DI_V1
   Wr(DI_INTR_CTRL, ((di_pre_stru.enable_mtnwr?1:0) << 16) |		  // mask nrwr interrupt.
 				((di_pre_stru.enable_mtnwr?0:1) << 17) |	   //  mtnwr interrupt.
+					#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 					(post_wr_en?0:1 << 18) |		  // mask diwr interrupt.
+					#else
+					(1 << 18) |		  // mask diwr interrupt.
+					#endif
 					(1 << 19) |		  // mask hist check interrupt.
 					(1 << 20) |		  // mask cont interrupt.
 					#ifdef NEW_DI_V3
@@ -3458,7 +3506,11 @@ static void pre_de_process(void)
 			(1 << 22) |		  // mask vecwr interrupt.
 			(1 << 23) |		  // mask infwr interrupt.
 					#endif
+					#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 					 0xb);			   // clean all pending interrupt bits.
+					#else
+					0xf );			   // clean all pending interrupt bits.
+					#endif
 #else
 	Wr(DI_INTR_CTRL, (0 << 16) |	   //  nrwr interrupt.
 				((di_pre_stru.enable_mtnwr?0:1) << 17) |	   //  mtnwr interrupt.
@@ -4660,12 +4712,14 @@ static irqreturn_t de_irq(int irq, void *dev_instance)
 #endif
 	//Wr(A9_0_IRQ_IN1_INTR_STAT_CLR, 1 << 14);
    //Rd(A9_0_IRQ_IN1_INTR_STAT_CLR);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	if (post_wr_en && (data32&0x4)) {
 		di_post_stru.de_post_process_done = 1;
 		di_post_stru.post_de_busy = 0;
 		if (!(data32 & 0x2))
 			goto end;
 	}
+#endif
 	if (pre_process_time_force) {
 		return IRQ_HANDLED;
 	}
@@ -4686,7 +4740,9 @@ static irqreturn_t de_irq(int irq, void *dev_instance)
 #endif
 	di_pre_stru.pre_de_process_done = 1;
 	di_pre_stru.pre_de_busy = 0;
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 end:
+#endif
 	if (init_flag) {
 		//printk("%s:up di sema\n", __func__);
 		trigger_pre_di_process('i');
@@ -4903,7 +4959,9 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	int di_width, di_height, di_start_x, di_end_x, di_start_y, di_end_y;
 	int hold_line = post_hold_line;
 	int post_blend_en=0, post_blend_mode=0, blend_mtn_en=0, ei_en=0, post_field_num=0;
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	int di_vpp_en, di_ddr_en;
+	#endif
 
 	if (di_get_power_control(1) == 0) {
 		return 0;
@@ -4984,10 +5042,13 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	di_post_stru.di_buf1_mif.luma_x_start0	= di_start_x;
 	di_post_stru.di_buf1_mif.luma_x_end0	= di_end_x;
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	di_post_stru.di_diwr_mif.start_x = di_start_x;
 	di_post_stru.di_diwr_mif.end_x = di_end_x;
 	di_post_stru.di_diwr_mif.start_y = di_start_y;
 	di_post_stru.di_diwr_mif.end_y = di_end_y;
+#endif
+
 	#ifndef NEW_DI_V2
 	di_post_stru.di_mtncrd_mif.start_x	= di_start_x;
 	di_post_stru.di_mtncrd_mif.end_x		= di_end_x;
@@ -5027,8 +5088,10 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);//remove from m8
 		#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
+		#endif
 		#ifdef NEW_DI_V3
 		config_mcvec_canvas_idx(di_buf->di_buf_dup_p[2], di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id]);
 		#endif
@@ -5039,9 +5102,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[2], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
-				#else
+		#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
+		#endif
 		#ifdef NEW_DI_V3
 		config_mcvec_canvas_idx(di_buf->di_buf_dup_p[2], di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id]);
 		#endif
@@ -5052,9 +5117,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[1], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
-				#else
+		#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
+		#endif
 		break;
 		case PULL_DOWN_BUF1://wave with buf1
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
@@ -5062,16 +5129,20 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		config_canvas_idx(di_buf->di_buf_dup_p[0], di_post_buf1_canvas_idx[di_post_stru.canvas_id], -1);
 		#ifndef NEW_DI_V2
 		config_canvas_idx(di_buf->di_buf_dup_p[0], -1, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id]);
-				#else
+		#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
+		#endif
 		break;
 		case PULL_DOWN_EI:
 		if (di_buf->di_buf_dup_p[1])
 		config_canvas_idx(di_buf->di_buf_dup_p[1], di_post_buf0_canvas_idx[di_post_stru.canvas_id], -1);
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		#ifdef NEW_DI_V2
 		config_canvas_idx(di_buf, di_post_mtncrd_canvas_idx[di_post_stru.canvas_id], -1);
 		#endif
+		#endif
 		break;
 		default:
 		break;
@@ -5084,12 +5155,16 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 				post_field_num = (di_buf->di_buf_dup_p[1]->vframe->type & VIDTYPE_TYPEMASK)==VIDTYPE_INTERLACE_TOP?0:1;
 		di_post_stru.di_buf0_mif.canvas0_addr0 = di_buf->di_buf_dup_p[1]->nr_canvas_idx;
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[0]->nr_canvas_idx;
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		di_post_stru.di_diwr_mif.canvas_num	= di_buf->nr_canvas_idx;
+		#endif
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
-				#else
+		#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
+		#endif
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
 		#ifdef NEW_DI_V3
 		di_post_stru.di_mcvecrd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
@@ -5114,9 +5189,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
-						#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+		#else
 		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
+		#endif
 		#ifdef NEW_DI_V3
 		di_post_stru.di_mcvecrd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mcvec_canvas_idx;
 		#endif
@@ -5132,9 +5209,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_mtnprd_mif.canvas_num = di_buf->di_buf_dup_p[2]->mtn_canvas_idx;
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[1]->mtn_canvas_idx;
-						#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+		#else
 		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
+		#endif
 		post_blend_mode = 0;
 		blend_mtn_en = 1;
 		ei_en = 1;
@@ -5147,9 +5226,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_post_stru.di_buf1_mif.canvas0_addr0 = di_buf->di_buf_dup_p[0]->nr_canvas_idx;
 		#ifndef NEW_DI_V2
 		di_post_stru.di_mtncrd_mif.canvas_num = di_buf->di_buf_dup_p[0]->mtn_canvas_idx;
-						#else
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+		#else
 		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
+		#endif
 		post_blend_mode = 1;
 		blend_mtn_en = 0;//must enable
 		ei_en = 0;//must enable
@@ -5163,9 +5244,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 			post_field_num = (di_buf->di_buf_dup_p[0]->vframe->type & VIDTYPE_TYPEMASK)==VIDTYPE_INTERLACE_TOP?0:1;
 		   di_post_stru.di_buf0_mif.src_field_mode = post_field_num;
 			}
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		#ifdef NEW_DI_V2
 		di_post_stru.di_diwr_mif.canvas_num = di_buf->nr_canvas_idx;
 		#endif
+		#endif
 		post_blend_mode = 2;
 		blend_mtn_en = 0;//must enable
 		ei_en = 1;
@@ -5183,6 +5266,7 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		blend_ctrl &= (~(1<<31));
 	}
 #endif
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	if (post_wr_en) {
 		di_vpp_en = 0;
 		di_ddr_en = 1;
@@ -5190,7 +5274,7 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		di_vpp_en = 1;
 		di_ddr_en = 0;
 	}
-
+#endif
 
 #ifdef NEW_DI_V3
 	di_post_stru.di_mcvecrd_mif.blend_mode = post_blend_mode;
@@ -5199,7 +5283,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		enable_di_post_2(
 				&di_post_stru.di_buf0_mif,
 				&di_post_stru.di_buf1_mif,
+				#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 				&di_post_stru.di_diwr_mif,
+				#else
+				NULL,
+				#endif
 				#ifndef NEW_DI_V2
 				&di_post_stru.di_mtncrd_mif,
 				#endif
@@ -5208,9 +5296,14 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 				post_blend_en,													// blend enable
 				blend_mtn_en,													// blend mtn enable
 				post_blend_mode,												// blend mode.
-				di_vpp_en,																// di_vpp_en.
-				di_ddr_en,																// di_ddr_en.
-						post_field_num,		// 1 bottom generate top
+				#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
+				di_vpp_en,
+				di_ddr_en,
+				#else
+				1,                                                              // di_vpp_en.
+				0,                                                              // di_ddr_en.
+				#endif
+				post_field_num,		// 1 bottom generate top
 				hold_line,
 				post_urgent
 						#ifndef NEW_DI_V1
@@ -5225,7 +5318,11 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 		 di_post_switch_buffer(
 				&di_post_stru.di_buf0_mif,
 				&di_post_stru.di_buf1_mif,
+				#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 				&di_post_stru.di_diwr_mif,
+				#else
+				NULL,
+				#endif
 				#ifndef NEW_DI_V2
 				&di_post_stru.di_mtncrd_mif,
 				#endif
@@ -5237,8 +5334,13 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 				post_blend_en,													// blend enable
 				blend_mtn_en,													// blend mtn enable
 				post_blend_mode,												// blend mode.
+				#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 				di_vpp_en,															// di_vpp_en.
 				di_ddr_en,															// di_ddr_en.
+				#else
+				1,
+				0,
+				#endif
 				post_field_num,		// 1 bottom generate top
 				hold_line,
 				post_urgent
@@ -5263,7 +5365,7 @@ static int de_post_process(void* arg, unsigned zoom_start_x_lines,
 	di_post_stru.update_post_reg_flag--;
 	return 0;
 }
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 static void post_de_done_buf_config(void)
 {
 	ulong fiq_flag=0, irq_flag2=0;
@@ -5302,6 +5404,7 @@ static void di_post_process(void)
 		di_post_stru.cur_post_buf = di_buf;
 	}
 }
+#endif
 #if 0
 static int de_post_process_pd(void* arg, unsigned zoom_start_x_lines,
 	 unsigned zoom_end_x_lines, unsigned zoom_start_y_lines, unsigned zoom_end_y_lines, vframe_t* disp_vf)
@@ -6074,7 +6177,11 @@ static int process_post_vframe(void)
 						/*for debug*/
 							if (debug_blend_mode != -1)
 								di_buf->pulldown_mode = debug_blend_mode;
+							#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 							di_buf->vframe->process_fun = post_wr_en?NULL:de_post_process;
+							#else
+							di_buf->vframe->process_fun = de_post_process;
+							#endif
 							di_buf->process_fun_index = PROCESS_FUN_DI;
 							inc_post_ref_count(di_buf);
 						}
@@ -6099,10 +6206,14 @@ static int process_post_vframe(void)
 									di_buf->vframe->pts = di_post_stru.start_pts;
 								di_post_stru.start_pts = 0;
 							}
+							#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 							if (post_wr_en)
 								queue_in(di_buf, QUEUE_POST_DOING);
 							else
 								queue_in(di_buf, QUEUE_POST_READY);
+							#else
+							queue_in(di_buf, QUEUE_POST_READY);
+							#endif
 						}
 						frame_count++;
 						di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
@@ -6111,7 +6222,9 @@ static int process_post_vframe(void)
 #ifdef DI_DEBUG
 					di_print("%s <interlace>: ", __func__);
 #endif
+					#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 					if (!post_wr_en)
+					#endif
 					vf_notify_receiver(VFM_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
 				}
 				ret = 1;
@@ -6211,7 +6324,11 @@ static int process_post_vframe(void)
 					if (ready_di_buf->post_proc_flag == -2) {
 						di_buf->vframe->type |= VIDTYPE_VIU_FIELD;
 						di_buf->vframe->type &= ~(VIDTYPE_TYPEMASK);
+						#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 						di_buf->vframe->process_fun = post_wr_en?NULL:de_post_process;
+						#else
+						di_buf->vframe->process_fun = de_post_process;
+						#endif
 						di_buf->process_fun_index = PROCESS_FUN_DI;
 						di_buf->pulldown_mode = PULL_DOWN_EI;
 					}else{
@@ -6250,10 +6367,14 @@ static int process_post_vframe(void)
 								di_buf->vframe->pts = di_post_stru.start_pts;
 							di_post_stru.start_pts = 0;
 						}
+						#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 						if (post_wr_en && (di_buf->process_fun_index != PROCESS_FUN_NULL))
 							queue_in(di_buf, QUEUE_POST_DOING);
 						else
 							queue_in(di_buf, QUEUE_POST_READY);
+						#else
+						queue_in(di_buf, QUEUE_POST_READY);
+						#endif
 					}
 					frame_count++;
 					di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
@@ -6319,7 +6440,11 @@ static int process_post_vframe(void)
 						di_buf->vframe->early_process_fun = do_nothing_fun;
 					}
 					di_buf->pulldown_mode = PULL_DOWN_BUF1;
+					#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 					di_buf->vframe->process_fun = post_wr_en?NULL:de_post_process;
+					#else
+					di_buf->vframe->process_fun = de_post_process;
+					#endif
 					di_buf->process_fun_index = PROCESS_FUN_DI;
 				}
 				else if (prog_tb_field_proc_type == 0) {
@@ -6390,10 +6515,14 @@ static int process_post_vframe(void)
 								di_buf->vframe->pts = di_post_stru.start_pts;
 							di_post_stru.start_pts = 0;
 						}
+						#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 						if (post_wr_en)
 							queue_in(di_buf, QUEUE_POST_DOING);
 						else
 							queue_in(di_buf, QUEUE_POST_READY);
+						#else
+						queue_in(di_buf, QUEUE_POST_READY);
+						#endif
 				   }
 				}
 				frame_count++;
@@ -6476,12 +6605,14 @@ unreg:
 				if (get_blackout_policy()) {
 					di_set_power_control(1,0);
 				}
+				#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 				if (post_wr_en) {
 					diwr_set_power_control(0);
 					#ifdef CONFIG_VSYNC_RDMA
 					enable_rdma(1);
 					#endif
 				}
+				#endif
 				di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
 #if (!(defined RUN_DI_PROCESS_IN_IRQ))||(defined ENABLE_SPIN_LOCK_ALWAYS)
@@ -6518,12 +6649,14 @@ static void di_unreg_process_irq(void)
 		if (get_blackout_policy()) {
 			di_set_power_control(1,0);
 		}
+		#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		if (post_wr_en) {
 			diwr_set_power_control(0);
 			#ifdef CONFIG_VSYNC_RDMA
 			enable_rdma(1);
 			#endif
 		}
+		#endif
 		di_unlock_irqfiq_restore(irq_flag2, fiq_flag);
 
 #if (defined ENABLE_SPIN_LOCK_ALWAYS)
@@ -6571,12 +6704,14 @@ static void di_reg_process(void)
 		if (vframe) {
 			di_set_power_control(0,1);
 			di_set_power_control(1,1);
+			#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 			if (post_wr_en) {
 				diwr_set_power_control(1);
 				#ifdef CONFIG_VSYNC_RDMA
 				enable_rdma(0);
 				#endif
 			}
+			#endif
 /* add for di Reg re-init */
 #ifdef NEW_DI_TV
 di_set_para_by_tvinfo(vframe);
@@ -6733,13 +6868,15 @@ static void di_process(void)
 	di_post_read_reverse(overturn);
 #endif
 			while (process_post_vframe()) {};
+			#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 			if (post_wr_en) {
-			if (di_post_stru.post_de_busy == 0 && di_post_stru.de_post_process_done) {
-				post_de_done_buf_config();
-				di_post_stru.de_post_process_done = 0;
+				if (di_post_stru.post_de_busy == 0 && di_post_stru.de_post_process_done) {
+					post_de_done_buf_config();
+					di_post_stru.de_post_process_done = 0;
+				}
+				di_post_process();
 			}
-			di_post_process();
-		}
+			#endif
 
 #if (!(defined RUN_DI_PROCESS_IN_IRQ))||(defined ENABLE_SPIN_LOCK_ALWAYS)
 			spin_unlock_irqrestore(&plist_lock, flags);
@@ -7073,6 +7210,7 @@ light_unreg:
 			pre_urgent = 0;
 		}
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		if (strcmp(vf_get_receiver_name(VFM_NAME), "amvideo") == 0 ) {
 			di_post_stru.run_early_proc_fun_flag = 0;
 			receiver_is_amvideo = 1;
@@ -7082,6 +7220,17 @@ light_unreg:
 			di_post_stru.run_early_proc_fun_flag = 1;
 			receiver_is_amvideo = 0;
 		}
+	#else
+		if (strcmp(vf_get_receiver_name(VFM_NAME), "ppmgr") == 0 ) {
+			di_post_stru.run_early_proc_fun_flag = 1;
+			receiver_is_amvideo = 0;
+			//printk("set run_early_proc_fun_flag to 1\n");
+		}
+		else{
+			di_post_stru.run_early_proc_fun_flag = 0;
+			receiver_is_amvideo = 1;
+		}
+	#endif
 #endif
 	}
 #ifdef DET3D
@@ -7261,6 +7410,7 @@ get_vframe:
 
 		if (di_buf) {
 			vframe_ret = di_buf->vframe;
+			#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 			if (post_wr_en && (di_buf->process_fun_index != PROCESS_FUN_NULL)) {
 				config_canvas_idx(di_buf, di_post_mcvecrd_canvas_idx[di_post_stru.canvas_id], -1);
 				vframe_ret->canvas0Addr = di_buf->nr_canvas_idx;
@@ -7268,6 +7418,7 @@ get_vframe:
 				vframe_ret->early_process_fun = NULL;
 				vframe_ret->process_fun = NULL;
 			}
+			#endif
 		}
 		disp_frame_count++;
 	   if (run_flag == DI_RUN_FLAG_STEP) {
@@ -7285,8 +7436,11 @@ get_vframe:
 			vframe_ret->duration = 0;
 		}
 	}
-
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	if (!post_wr_en && di_post_stru.run_early_proc_fun_flag && vframe_ret) {
+#else
+	if (di_post_stru.run_early_proc_fun_flag && vframe_ret) {
+#endif
 		if (vframe_ret->early_process_fun == do_pre_only_fun) {
 			vframe_ret->early_process_fun(vframe_ret->private_data, vframe_ret);
 		}
@@ -7972,8 +8126,10 @@ module_param(timeout_miss_policy, uint, 0664);
 MODULE_PARM_DESC(bypass_post, "\n bypass_post\n");
 module_param(bypass_post, uint, 0664);
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 MODULE_PARM_DESC(post_wr_en, "\n post write enable\n");
 module_param(post_wr_en, bool, 0664);
+#endif
 
 MODULE_PARM_DESC(bypass_post_state, "\n bypass_post_state\n");
 module_param(bypass_post_state, uint, 0664);
diff --git a/drivers/amlogic/deinterlace/deinterlace.h b/drivers/amlogic/deinterlace/deinterlace.h
old mode 100755
new mode 100644
index bf8de151a063..68a395e02b75
--- a/drivers/amlogic/deinterlace/deinterlace.h
+++ b/drivers/amlogic/deinterlace/deinterlace.h
@@ -510,7 +510,9 @@ typedef struct reg_cfg_{
 int get_current_vscale_skip_count(vframe_t* vf);
 
 void di_set_power_control(unsigned char type, unsigned char enable);
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 void diwr_set_power_control(unsigned char enable);
+#endif
 unsigned char di_get_power_control(unsigned char type);
 
 #endif
diff --git a/drivers/amlogic/deinterlace/deinterlace_hw.c b/drivers/amlogic/deinterlace/deinterlace_hw.c
old mode 100755
new mode 100644
index 50a15de64385..01ca4d480c28
--- a/drivers/amlogic/deinterlace/deinterlace_hw.c
+++ b/drivers/amlogic/deinterlace/deinterlace_hw.c
@@ -270,6 +270,7 @@ static void set_di_mem_fmt_more (
 
 static void set_di_mem_mif ( DI_MIF_t * mif, int urgent, int hold_line );
 
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 static void set_di_if0_fmt_more (
 		int hfmt_en,
 		int hz_yc_ratio,		//2bit
@@ -281,6 +282,7 @@ static void set_di_if0_fmt_more (
 		int c_length,
 		int hz_rpt				//1bit
 	);
+#endif
 static void set_di_if1_fmt_more (
 		int hfmt_en,
 		int hz_yc_ratio,		//2bit
@@ -1008,6 +1010,8 @@ static void set_di_mem_mif(DI_MIF_t *mif, int urgent, int hold_line)
 						0 );														// hz repeat.
 	}
 }
+
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 static void set_di_if0_fmt_more (int hfmt_en,
 				int hz_yc_ratio,		//2bit
 				int hz_ini_phase,		//4bit
@@ -1039,6 +1043,7 @@ static void set_di_if0_fmt_more (int hfmt_en,
 							 (c_length << 0)				//vt format width
 					);
 }
+#endif
 static void set_di_if1_fmt_more (int hfmt_en,
 				int hz_yc_ratio,		//2bit
 				int hz_ini_phase,		//4bit
@@ -1294,7 +1299,9 @@ static void set_di_chan2_mif ( DI_MIF_t *mif, int urgent, int hold_line)
 static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 {
 	unsigned int pat, loop=0;
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	unsigned bytes_per_pixel, demux_mode;
+	#endif
 
 	if (mif->set_separate_en == 1) {
 	pat = vpat[(di_vscale_skip_count_real<<1)+1];
@@ -1306,6 +1313,7 @@ static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 	} else {
 		loop = 0;
 	pat = vpat[di_vscale_skip_count_real];
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		bytes_per_pixel = mif->set_separate_en ? 0 : (mif->video_mode ? 2 : 1);
 	demux_mode = mif->video_mode;
 	VSYNC_WR_MPEG_REG(VD1_IF0_GEN_REG, (1 << 29)    |	 //reset on go field
@@ -1323,6 +1331,7 @@ static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 								((mif->set_separate_en!=0) << 1)	|
 								(1 << 0)						// cntl_enable
 		);
+	#endif
 	// ----------------------
 	// Canvas
 	// ----------------------
@@ -1358,6 +1367,7 @@ static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 				   (loop << 0));
 	VSYNC_WR_MPEG_REG(VD1_IF0_LUMA0_RPT_PAT,   pat);
 	VSYNC_WR_MPEG_REG(VD1_IF0_CHROMA0_RPT_PAT, pat);
+	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 		if (mif->set_separate_en != 0)	 // 4:2:0 block mode.
 	{
 		set_di_if0_fmt_more (
@@ -1382,6 +1392,7 @@ static void set_di_if0_mif (DI_MIF_t *mif, int urgent, int hold_line)
 						((mif->luma_x_end0 >>1 ) - (mif->luma_x_start0>>1) + 1), // c length
 							 0); // hz repeat
 	}
+	#endif
 }
 
 void initial_di_pre_aml(int hsize_pre, int vsize_pre, int hold_line)
@@ -1559,7 +1570,11 @@ void di_post_switch_buffer (
 					  (di_vpp_en << 12) |							// post viu link
 					  (hold_line << 16) |							// post hold line number
 					  (post_field_num << 29) |						// post field number.
+					  #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 					  (0x3 << 30 )									// post soft rst  post frame rst.
+					  #else
+					  (0x1 << 30 )									// post soft rst  post frame rst.
+					  #endif
 		);
 }
 
@@ -1625,7 +1640,11 @@ void enable_di_post_2 (
 	if (di_ddr_en)
 	{
 	   VSYNC_WR_MPEG_REG(DI_DIWR_X, (di_diwr_mif->start_x <<16) | (di_diwr_mif->end_x));				// start_x 0 end_x 719.
+	   #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 	   VSYNC_WR_MPEG_REG(DI_DIWR_Y, (di_diwr_mif->start_y <<16) | (di_diwr_mif->end_y));			// start_y 0 end_y 479.
+	   #else
+	   VSYNC_WR_MPEG_REG(DI_DIWR_Y, (di_diwr_mif->start_y <<16) | (di_diwr_mif->end_y *2 + 1 ));			// start_y 0 end_y 479.
+	   #endif
 	   VSYNC_WR_MPEG_REG(DI_DIWR_CTRL, di_diwr_mif->canvas_num |										// canvas index.
 #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON6
 						(urgent << 16));																// urgent.
@@ -1675,7 +1694,11 @@ void enable_di_post_2 (
 					  (di_vpp_en << 12) |							// post viu link
 					  (hold_line << 16) |							// post hold line number
 					  (post_field_num << 29) |						// post field number.
+					  #if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 					  (0x3 << 30 )									// post soft rst  post frame rst.
+					  #else
+					  (0x1 << 30 )									// post soft rst  post frame rst.
+					  #endif
 		);
 #ifdef NEW_DI_V1
 		VSYNC_WR_MPEG_REG(DI_EI_CTRL3, ei_ctrl3);
@@ -2046,6 +2069,7 @@ void di_post_read_reverse_irq(bool reverse)
 	}
 #endif
 }
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 void diwr_set_power_control(unsigned char enable)
 {
 	#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
@@ -2053,6 +2077,7 @@ void diwr_set_power_control(unsigned char enable)
 	switch_vpu_mem_pd_vmod(VPU_DI_POST, enable?VPU_MEM_POWER_ON:VPU_MEM_POWER_DOWN);
 	#endif
 }
+#endif
 static unsigned char pre_power_on = 0;
 //static unsigned char post_power_on = 0;
 void di_set_power_control(unsigned char type, unsigned char enable)
diff --git a/include/linux/amlogic/amports/canvas.h b/include/linux/amlogic/amports/canvas.h
old mode 100755
new mode 100644
index 77ccc22dcfd7..a97f6cf61c5e
--- a/include/linux/amlogic/amports/canvas.h
+++ b/include/linux/amlogic/amports/canvas.h
@@ -41,7 +41,16 @@ typedef struct {
 #define AMVDEC_ALL_CANVAS_RANGE_1 0x25 //mjpeg
 
 #define PPMGR2_MAX_CANVAS 8
+
+#ifndef MESON_CPU_TYPE_MESON8
+#define PPMGR2_CANVAS_INDEX 0x70    // 0x70-0x7f for PPMGR2 (IONVIDEO)
+#else
+#if MESON_CPU_TYPE >= MESON_CPU_TYPE_MESON8
 #define PPMGR2_CANVAS_INDEX 0xf0    // 0x70-0x7f for PPMGR2 (IONVIDEO)
+#else
+#define PPMGR2_CANVAS_INDEX 0x70    // 0x70-0x7f for PPMGR2 (IONVIDEO)
+#endif
+#endif
 
 #define AMVDEC_H264MVC_CANVAS_INDEX 0x78
 #define AMVDEC_H264MVC_CANVAS_MAX 0xbf
-- 
2.19.0

