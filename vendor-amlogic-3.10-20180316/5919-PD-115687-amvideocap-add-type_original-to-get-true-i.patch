From e222083fd39a1476fd4a77ec5d04d3b6dd8e7b16 Mon Sep 17 00:00:00 2001
From: Jian Wang <jian.wang@amlogic.com>
Date: Mon, 23 Nov 2015 03:12:17 -0500
Subject: [PATCH 5919/5965] PD#115687: amvideocap: add type_original to get
 true i/p type

Change-Id: I51d3a68f7534d8137977255eaea564f96b0500b2
---
 drivers/amlogic/amports/amvideocap.c   | 12 +++++++++---
 drivers/amlogic/amports/vavs.c         |  5 ++++-
 drivers/amlogic/amports/vh264.c        |  6 ++++++
 drivers/amlogic/amports/vh264mvc.c     |  4 ++--
 drivers/amlogic/amports/vh265.c        | 15 ++++++++++++++-
 drivers/amlogic/amports/vmjpeg.c       |  6 ++++--
 drivers/amlogic/amports/vmpeg12.c      |  4 +++-
 drivers/amlogic/amports/vmpeg4.c       |  3 +++
 drivers/amlogic/amports/vreal.c        |  1 +
 drivers/amlogic/amports/vvc1.c         | 11 ++++++++---
 include/linux/amlogic/amports/vframe.h |  1 +
 11 files changed, 55 insertions(+), 13 deletions(-)
 mode change 100755 => 100644 drivers/amlogic/amports/vh265.c
 mode change 100755 => 100644 drivers/amlogic/amports/vmjpeg.c
 mode change 100755 => 100644 drivers/amlogic/amports/vreal.c

diff --git a/drivers/amlogic/amports/amvideocap.c b/drivers/amlogic/amports/amvideocap.c
index 49a8d2a696d4..982d52f25196 100755
--- a/drivers/amlogic/amports/amvideocap.c
+++ b/drivers/amlogic/amports/amvideocap.c
@@ -285,11 +285,17 @@ static ssize_t  amvideocap_YUV_to_RGB(struct amvideocap_private *priv, u32 cur_i
         input_height = priv->src_rect.height;
     }
 
-    printk("vf->source_type : %d 0x%x\n", vf->source_type, vf->type);
-    if ((intfmt == GE2D_FORMAT_S16_YUV422) && (vf->source_type != VFRAME_SOURCE_TYPE_OTHERS)
-        && (vf->source_type != VFRAME_SOURCE_TYPE_HDMI)) {
+#if MESON_CPU_TYPE == MESON_CPU_TYPE_MESONG9TV
+    printk("vf->source_type : %d now:0x%x original:0x%x\n",
+        vf->source_type, vf->type, vf->type_original);
+    if (vf->type_original & VIDTYPE_INTERLACE) {
         input_height = input_height / 2;
     }
+#else
+    if (intfmt == GE2D_FORMAT_S16_YUV422) {
+        input_height = input_height / 2;
+    }
+#endif
 
     ge2d_config.alu_const_color = 0;
     ge2d_config.bitmask_en  = 0;
diff --git a/drivers/amlogic/amports/vavs.c b/drivers/amlogic/amports/vavs.c
index 86ccd005e4c6..0b5bb39fbbfc 100644
--- a/drivers/amlogic/amports/vavs.c
+++ b/drivers/amlogic/amports/vavs.c
@@ -359,6 +359,8 @@ static void vavs_isr(void)
                         vf->type |= VIDTYPE_VIU_NV21;
 #endif
                         vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
+                        vf->type_original = vf->type;
+
 
                         if (debug_flag&1)
                             printk("buffer_index %d, canvas addr %x\n",buffer_index, vf->canvas0Addr);
@@ -396,6 +398,7 @@ static void vavs_isr(void)
                         vf->type |= VIDTYPE_VIU_NV21;
 #endif
                         vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
+                        vf->type_original = vf->type;
 
 
                         vfbuf_use[buffer_index]++;
@@ -456,6 +459,7 @@ static void vavs_isr(void)
                         vf->type |= VIDTYPE_VIU_NV21;
 #endif
                         vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
+                        vf->type_original = vf->type;
 
                         if (debug_flag&1)
                             printk("buffer_index %d, canvas addr %x\n",buffer_index, vf->canvas0Addr);
@@ -467,7 +471,6 @@ static void vavs_isr(void)
                         total_frame++;
                 }
 
-
                 //printk("PicType = %d, PTS = 0x%x\n", picture_type, vf->pts);
                 WRITE_VREG(AVS_BUFFEROUT, 0);
         }
diff --git a/drivers/amlogic/amports/vh264.c b/drivers/amlogic/amports/vh264.c
index 8e111a238ec6..f21e7392872d 100644
--- a/drivers/amlogic/amports/vh264.c
+++ b/drivers/amlogic/amports/vh264.c
@@ -1361,6 +1361,8 @@ static void vh264_isr(void)
                 else
                     vf->pts_us64= div64_u64(((u64)vf->pts)*100,9);
                 vf->canvas0Addr = vf->canvas1Addr = spec2canvas(&buffer_spec[buffer_index]);
+                vf->type_original = vf->type;
+
                 vfbuf_use[buffer_index]++;
                 if ((error_recovery_mode_use & 2) && error) {
                     kfifo_put(&recycle_q, (const vframe_t **)&vf);
@@ -1394,6 +1396,8 @@ static void vh264_isr(void)
                 else
                     vf->pts_us64= div64_u64(((u64)vf->pts)*100,9);
                 vf->canvas0Addr = vf->canvas1Addr = spec2canvas(&buffer_spec[buffer_index]);
+                vf->type_original = vf->type;
+
                 vfbuf_use[buffer_index]++;
                 p_last_vf = vf;
                 vf->ready_jiffies64=jiffies_64;
@@ -1436,6 +1440,8 @@ static void vh264_isr(void)
                 vf->pts = 0;
 
                 vf->canvas0Addr = vf->canvas1Addr = spec2canvas(&buffer_spec[buffer_index]);
+                vf->type_original = vf->type;
+
                 vfbuf_use[buffer_index]++;
 
                 p_last_vf = vf;
diff --git a/drivers/amlogic/amports/vh264mvc.c b/drivers/amlogic/amports/vh264mvc.c
index db5547fe38d3..54c4d6b6e5d8 100644
--- a/drivers/amlogic/amports/vh264mvc.c
+++ b/drivers/amlogic/amports/vh264mvc.c
@@ -425,8 +425,8 @@ static vframe_t *vh264mvc_vf_get(void* op_arg)
             vf->canvas1Addr = spec2canvas(&buffer_spec1[view1_buf_id]);
         }
     }
-	}
-    
+    }
+    vf->type_original = vf->type;
     if (((vfpool_idx[get_ptr].view0_drop != 0)||(vfpool_idx[get_ptr].view1_drop != 0))&&((no_dropping_cnt >= DROPPING_FIRST_WAIT))){
     	vf->frame_dirty	= 1;
     }else{
diff --git a/drivers/amlogic/amports/vh265.c b/drivers/amlogic/amports/vh265.c
old mode 100755
new mode 100644
index 8ac2e9d3d9c8..e3e83c7893e1
--- a/drivers/amlogic/amports/vh265.c
+++ b/drivers/amlogic/amports/vh265.c
@@ -3615,6 +3615,8 @@ static int process_pending_vframe(hevc_stru_t *hevc, PIC_t* pair_pic, unsigned c
           vf->index |= (pair_pic->index << 8);
           vf->canvas1Addr = spec2canvas(pair_pic);
           pair_pic->vf_ref++;
+          vf->type_original = vf->type;
+
           kfifo_put(&display_q, (const vframe_t **)&vf);
         }
       }
@@ -3628,6 +3630,8 @@ static int process_pending_vframe(hevc_stru_t *hevc, PIC_t* pair_pic, unsigned c
           vf->index |= pair_pic->index;
           vf->canvas0Addr = spec2canvas(pair_pic);
           pair_pic->vf_ref++;
+          vf->type_original = vf->type;
+
           kfifo_put(&display_q, (const vframe_t **)&vf);
         }
       }
@@ -3739,6 +3743,8 @@ static int prepare_display_buf(hevc_stru_t* hevc, PIC_t* pic)
             vf->type = VIDTYPE_INTERLACE_BOTTOM | VIDTYPE_VIU_NV21;
             vf2->type = VIDTYPE_INTERLACE_TOP | VIDTYPE_VIU_NV21;
           }
+          vf->type_original = vf->type;
+
             kfifo_put(&display_q, (const vframe_t **)&vf);
             kfifo_put(&display_q, (const vframe_t **)&vf2);
           }
@@ -3767,6 +3773,8 @@ static int prepare_display_buf(hevc_stru_t* hevc, PIC_t* pic)
             vf2->type = VIDTYPE_INTERLACE_TOP | VIDTYPE_VIU_NV21;
             vf3->type = VIDTYPE_INTERLACE_BOTTOM | VIDTYPE_VIU_NV21;
           }
+          vf->type_original = vf->type;
+
           kfifo_put(&display_q, (const vframe_t **)&vf);
             kfifo_put(&display_q, (const vframe_t **)&vf2);
           kfifo_put(&display_q, (const vframe_t **)&vf3);
@@ -3780,6 +3788,7 @@ static int prepare_display_buf(hevc_stru_t* hevc, PIC_t* pic)
           vf->height <<= 1;
           if (pic->pic_struct == 9) {
             vf->type = VIDTYPE_INTERLACE_TOP | VIDTYPE_VIU_NV21 | VIDTYPE_VIU_FIELD;
+
             process_pending_vframe(hevc, pre_bot_pic, 0);
         }
         else{
@@ -3806,6 +3815,8 @@ static int prepare_display_buf(hevc_stru_t* hevc, PIC_t* pic)
             vf->type = VIDTYPE_INTERLACE_BOTTOM | VIDTYPE_VIU_NV21 | VIDTYPE_VIU_FIELD;
             vf->index = (pic->index << 8) | 0xff;
           }
+          vf->type_original = vf->type;
+
           kfifo_put(&pending_q, (const vframe_t **)&vf);
 
           /**/
@@ -3836,13 +3847,15 @@ static int prepare_display_buf(hevc_stru_t* hevc, PIC_t* pic)
               pre_bot_pic = pic;
               break;
           }
+          vf->type_original = vf->type;
+
           kfifo_put(&display_q, (const vframe_t **)&vf);
         }
 #else
+        vf->type_original = vf->type;
         pic->vf_ref = 1;
         kfifo_put(&display_q, (const vframe_t **)&vf);
 #endif
-
         vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY, NULL);
     }
 
diff --git a/drivers/amlogic/amports/vmjpeg.c b/drivers/amlogic/amports/vmjpeg.c
old mode 100755
new mode 100644
index 4a5d6ed7558c..d1abd55d06e9
--- a/drivers/amlogic/amports/vmjpeg.c
+++ b/drivers/amlogic/amports/vmjpeg.c
@@ -198,7 +198,9 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
             vf->canvas0Addr = vf->canvas1Addr = index2canvas0(index);
             vf->pts = (pts_valid) ? pts : 0;
             vf->pts_us64 = (pts_valid) ? pts_us64 : 0;
-			vf->orientation = 0 ;
+            vf->orientation = 0 ;
+            vf->type_original = vf->type;
+
             vfbuf_use[index]++;
 
             kfifo_put(&display_q, (const vframe_t **)&vf);
@@ -270,6 +272,7 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
                 vf->pts = 0;
                 vf->pts_us64 = 0;
             }
+            vf->type_original = vf->type;
 
             vfbuf_use[index]++;
 
@@ -278,7 +281,6 @@ static irqreturn_t vmjpeg_isr(int irq, void *dev_id)
 		    vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);            
 #endif
         }
-
         WRITE_VREG(MREG_FROM_AMRISC, 0);
     }
 
diff --git a/drivers/amlogic/amports/vmpeg12.c b/drivers/amlogic/amports/vmpeg12.c
index bed4b9f382dc..8d1887b5eb8d 100644
--- a/drivers/amlogic/amports/vmpeg12.c
+++ b/drivers/amlogic/amports/vmpeg12.c
@@ -376,6 +376,7 @@ static irqreturn_t vmpeg12_isr(int irq, void *dev_id)
             vf->orientation = 0 ;
             vf->pts = (pts_valid) ? pts : 0;
             vf->pts_us64 = (pts_valid) ? pts_us64 : 0;
+            vf->type_original = vf->type;
 
             vfbuf_use[index] = 1;
 
@@ -432,6 +433,7 @@ static irqreturn_t vmpeg12_isr(int irq, void *dev_id)
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(index);
             vf->pts = (pts_valid) ? pts : 0;
             vf->pts_us64 = (pts_valid) ? pts_us64 : 0;
+            vf->type_original = vf->type;
 
             if ((error_skip(info, vf)) ||
                 ((first_i_frame_ready == 0) && ((PICINFO_TYPE_MASK & info) != PICINFO_TYPE_I))) {
@@ -462,6 +464,7 @@ static irqreturn_t vmpeg12_isr(int irq, void *dev_id)
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(index);
             vf->pts = 0;
             vf->pts_us64 = 0;
+            vf->type_original = vf->type;
 
             if ((error_skip(info, vf)) ||
                 ((first_i_frame_ready == 0) && ((PICINFO_TYPE_MASK & info) != PICINFO_TYPE_I))) {
@@ -471,7 +474,6 @@ static irqreturn_t vmpeg12_isr(int irq, void *dev_id)
                 vf_notify_receiver(PROVIDER_NAME,VFRAME_EVENT_PROVIDER_VFRAME_READY,NULL);
             }
         }
-
         WRITE_VREG(MREG_BUFFEROUT, 0);
     }
 
diff --git a/drivers/amlogic/amports/vmpeg4.c b/drivers/amlogic/amports/vmpeg4.c
index a2f3d87ecfd1..ce34357d3b2e 100644
--- a/drivers/amlogic/amports/vmpeg4.c
+++ b/drivers/amlogic/amports/vmpeg4.c
@@ -438,6 +438,7 @@ static irqreturn_t vmpeg4_isr(int irq, void *dev_id)
             vf->type |= VIDTYPE_VIU_NV21;
 #endif
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
+            vf->type_original = vf->type;
 
             set_aspect_ratio(vf, READ_VREG(MP4_PIC_RATIO));
 
@@ -469,6 +470,7 @@ static irqreturn_t vmpeg4_isr(int irq, void *dev_id)
             vf->type |= VIDTYPE_VIU_NV21;
 #endif
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
+            vf->type_original = vf->type;
 
             set_aspect_ratio(vf, READ_VREG(MP4_PIC_RATIO));
 
@@ -504,6 +506,7 @@ static irqreturn_t vmpeg4_isr(int irq, void *dev_id)
             vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
 #endif
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
+            vf->type_original = vf->type;
 
             set_aspect_ratio(vf, READ_VREG(MP4_PIC_RATIO));
 
diff --git a/drivers/amlogic/amports/vreal.c b/drivers/amlogic/amports/vreal.c
old mode 100755
new mode 100644
index cadc5fb0a368..191c456c2ca2
--- a/drivers/amlogic/amports/vreal.c
+++ b/drivers/amlogic/amports/vreal.c
@@ -330,6 +330,7 @@ static irqreturn_t vreal_isr(int irq, void *dev_id)
 #endif
         vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
         vf->orientation = 0 ;
+        vf->type_original = vf->type;
 
         vfbuf_use[buffer_index] = 1;
 
diff --git a/drivers/amlogic/amports/vvc1.c b/drivers/amlogic/amports/vvc1.c
index 7a187b5213cf..66dea01accb3 100644
--- a/drivers/amlogic/amports/vvc1.c
+++ b/drivers/amlogic/amports/vvc1.c
@@ -396,7 +396,9 @@ static irqreturn_t vvc1_isr(int irq, void *dev_id)
             vf->type |= VIDTYPE_VIU_NV21;
 #endif
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
-			vf->orientation = 0 ;
+            vf->orientation = 0 ;
+            vf->type_original = vf->type;
+
             set_aspect_ratio(vf, READ_VREG(VC1_PIC_RATIO));
 
             vfbuf_use[buffer_index]++;
@@ -438,7 +440,8 @@ static irqreturn_t vvc1_isr(int irq, void *dev_id)
             vf->type |= VIDTYPE_VIU_NV21;
 #endif
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
-			vf->orientation = 0 ;
+            vf->orientation = 0 ;
+            vf->type_original = vf->type;
             set_aspect_ratio(vf, READ_VREG(VC1_PIC_RATIO));
 
             vfbuf_use[buffer_index]++;
@@ -495,7 +498,9 @@ static irqreturn_t vvc1_isr(int irq, void *dev_id)
             vf->type = VIDTYPE_PROGRESSIVE | VIDTYPE_VIU_FIELD;
 #endif
             vf->canvas0Addr = vf->canvas1Addr = index2canvas(buffer_index);
-			vf->orientation = 0 ;
+            vf->orientation = 0 ;
+            vf->type_original = vf->type;
+
             set_aspect_ratio(vf, READ_VREG(VC1_PIC_RATIO));
 
             vfbuf_use[buffer_index]++;
diff --git a/include/linux/amlogic/amports/vframe.h b/include/linux/amlogic/amports/vframe.h
index e56a908935d1..cc19c1a3145a 100644
--- a/include/linux/amlogic/amports/vframe.h
+++ b/include/linux/amlogic/amports/vframe.h
@@ -154,6 +154,7 @@ typedef struct vframe_s {
         u32 index;
         u32 type;
         u32 type_backup;
+        u32 type_original;
         u32 blend_mode;
         u32 duration;
         u32 duration_pulldown;
-- 
2.19.0

