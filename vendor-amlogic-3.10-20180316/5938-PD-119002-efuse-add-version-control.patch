From 0eca516056e3bc7d8016cb68aa98d3ca8c174362 Mon Sep 17 00:00:00 2001
From: Jiaming Huang <jiaming.huang@amlogic.com>
Date: Thu, 4 Feb 2016 10:28:56 +0800
Subject: [PATCH 5938/5965] PD#119002: efuse: add version control

Validated on T868 N301 & customer ok.

Change-Id: Id6b4423cdc69609a30a97a234f2e3fa00da61ff5
---
 drivers/amlogic/efuse/efuse_hw.c      |  22 +++++
 drivers/amlogic/efuse/efuse_regs.h    |   6 ++
 drivers/amlogic/efuse/efuse_version.c | 125 +++++++++++++++++++-------
 3 files changed, 123 insertions(+), 30 deletions(-)
 mode change 100755 => 100644 drivers/amlogic/efuse/efuse_hw.c
 mode change 100755 => 100644 drivers/amlogic/efuse/efuse_regs.h
 mode change 100755 => 100644 drivers/amlogic/efuse/efuse_version.c

diff --git a/drivers/amlogic/efuse/efuse_hw.c b/drivers/amlogic/efuse/efuse_hw.c
old mode 100755
new mode 100644
index a272f0aa4020..002f9a21ba50
--- a/drivers/amlogic/efuse/efuse_hw.c
+++ b/drivers/amlogic/efuse/efuse_hw.c
@@ -351,6 +351,7 @@ static char *soc_chip[]={
 	{"efuse soc chip m8"},
 	{"efuse soc chip m6tvd"},
 	{"efuse soc chip m8baby"},
+	{"efuse soc chip g9tv"},
 	{"efuse soc chip unknow"},
 };
 #endif
@@ -458,6 +459,10 @@ static int efuse_checkversion(char *buf)
 						ver = -1;
 					}
 					break;
+				case EFUSE_SOC_CHIP_G9TV:
+					if (ver != G9TV_EFUSE_VERSION_SERIALNUM_V1)
+						ver = -1;
+					break;
 				case EFUSE_SOC_CHIP_UNKNOW:
 				default:
 					printk("%s:%d soc is unknow\n",__func__,__LINE__);
@@ -526,6 +531,13 @@ static int efuse_set_versioninfo(efuseinfo_item_t *info)
 			info->bch_reverse = M6TVD_EFUSE_VERSION_BCH_REVERSE;
 			ret = 0;
 			break;
+		case EFUSE_SOC_CHIP_G9TV:
+			info->offset = G9TV_EFUSE_VERSION_OFFSET; /* 509 */
+			info->data_len = G9TV_EFUSE_VERSION_DATA_LEN;
+			info->enc_len = G9TV_EFUSE_VERSION_ENC_LEN;
+			info->bch_en = G9TV_EFUSE_VERSION_BCH_EN;
+			ret = 0;
+			break;
 		case EFUSE_SOC_CHIP_UNKNOW:
 		default:
 			printk("%s:%d chip is unknow\n",__func__,__LINE__);
@@ -640,6 +652,9 @@ static int efuse_getinfo_byPOS(unsigned pos, efuseinfo_item_t *info)
 		case EFUSE_SOC_CHIP_M6TVD:
 			versionPOS = M6TVD_EFUSE_VERSION_OFFSET;
 			break;
+		case EFUSE_SOC_CHIP_G9TV:
+			versionPOS = G9TV_EFUSE_VERSION_OFFSET; /* 509 */
+			break;
 		case EFUSE_SOC_CHIP_UNKNOW:
 		default:
 			printk("%s:%d chip is unknow\n",__func__,__LINE__);
@@ -1143,6 +1158,9 @@ static uint32_t __v3_get_gap_start(uint32_t id)
 		case EFUSE_SOC_CHIP_M6TVD:
 			offset = -1;
 			break;
+		case EFUSE_SOC_CHIP_G9TV:
+			offset = -1; // error position
+			break;
 		case EFUSE_SOC_CHIP_UNKNOW:
 		default:
 			offset = -1; // error position
@@ -1226,6 +1244,8 @@ int32_t __v3_read_hash(uint32_t id,char * buf)
 		case EFUSE_SOC_CHIP_M8:
 		case EFUSE_SOC_CHIP_M8BABY:
 			break;
+		case EFUSE_SOC_CHIP_G9TV:
+			break;
 		case EFUSE_SOC_CHIP_M6TVD:
 			break;
 		case EFUSE_SOC_CHIP_UNKNOW:
@@ -1318,6 +1338,8 @@ int32_t __v3_write_hash(uint32_t id,char * buf)
 		case EFUSE_SOC_CHIP_M8:
 		case EFUSE_SOC_CHIP_M8BABY:
 			break;
+		case EFUSE_SOC_CHIP_G9TV:
+			break;
 		case EFUSE_SOC_CHIP_M6TVD:
 			break;
 		case EFUSE_SOC_CHIP_UNKNOW:
diff --git a/drivers/amlogic/efuse/efuse_regs.h b/drivers/amlogic/efuse/efuse_regs.h
old mode 100755
new mode 100644
index 4e6c1aef9d74..e64446b786ca
--- a/drivers/amlogic/efuse/efuse_regs.h
+++ b/drivers/amlogic/efuse/efuse_regs.h
@@ -139,6 +139,12 @@ bit[7-0]    XOR
 #define	M6TVD_EFUSE_VERSION_BCH_REVERSE	0
 #define M6TVD_EFUSE_VERSION_SERIALNUM_V1	40
 
+#define	G9TV_EFUSE_VERSION_OFFSET			509
+#define	G9TV_EFUSE_VERSION_ENC_LEN			1
+#define	G9TV_EFUSE_VERSION_DATA_LEN			1
+#define	G9TV_EFUSE_VERSION_BCH_EN			0
+#define	G9TV_EFUSE_VERSION_BCH_REVERSE		0
+#define G9TV_EFUSE_VERSION_SERIALNUM_V1		0x42  /*=66*/
 
 typedef enum {
 	EFUSE_SOC_CHIP_M1=1,
diff --git a/drivers/amlogic/efuse/efuse_version.c b/drivers/amlogic/efuse/efuse_version.c
old mode 100755
new mode 100644
index 26245930fa23..c151e986471c
--- a/drivers/amlogic/efuse/efuse_version.c
+++ b/drivers/amlogic/efuse/efuse_version.c
@@ -5,10 +5,10 @@
 
 
 /**
- * efuse version 0.1 (for M3 ) 
+ * efuse version 0.1 (for M3 )
  * M3 efuse: read all free efuse data maybe fail on addr 0 and addr 0x40
  * so M3 EFUSE layout avoid using 0 and 0x40
-title				offset			datasize			checksize			totalsize			
+title				offset			datasize			checksize			totalsize
 reserved 		0					0						0						4
 usid				4					33					2						35
 mac_wifi		39				6						1						7
@@ -21,14 +21,14 @@ reserved		378				0						0						2
 version		380				3						1						4    (version+machid, version=1)
 */
 
-static efuseinfo_item_t efuseinfo_v0[] = 
+static efuseinfo_item_t efuseinfo_v0[] =
 {
 	{
 		.title = "licence",
 		.id = EFUSE_LICENCE_ID,
 		.offset = 0,
-		.enc_len = 4,			
-		.data_len = 3,			
+		.enc_len = 4,
+		.data_len = 3,
 		.bch_en = 1,
 		.bch_reverse = 1,
 	},
@@ -37,7 +37,7 @@ static efuseinfo_item_t efuseinfo_v0[] =
 		.id = EFUSE_MAC_ID,
 		.offset = 4,
 		.enc_len = 7,
-		.data_len = 6,		
+		.data_len = 6,
 		.bch_en = 1,
 		.bch_reverse = 1,
 	},
@@ -46,7 +46,7 @@ static efuseinfo_item_t efuseinfo_v0[] =
 		.id = EFUSE_HDCP_ID,
 		.offset = 12,
 		.enc_len = 310,
-		.data_len = 300,		
+		.data_len = 300,
 		.bch_en = 1,
 		.bch_reverse = 1,
 	},
@@ -55,7 +55,7 @@ static efuseinfo_item_t efuseinfo_v0[] =
 		.id = EFUSE_MAC_BT_ID,
 		.offset = 322,
 		.enc_len = 7,
-		.data_len = 6,		
+		.data_len = 6,
 		.bch_en = 1,
 		.bch_reverse = 1,
 	},
@@ -64,7 +64,7 @@ static efuseinfo_item_t efuseinfo_v0[] =
 		.id = EFUSE_MAC_WIFI_ID,
 		.offset = 330,
 		.enc_len = 7,
-		.data_len = 6,		
+		.data_len = 6,
 		.bch_en = 1,
 		.bch_reverse = 1,
 	},
@@ -73,16 +73,16 @@ static efuseinfo_item_t efuseinfo_v0[] =
 		.id = EFUSE_USID_ID,
 		.offset = V0_EFUSE_USID_OFFSET, //337,
 		.enc_len = V0_EFUSE_USID_ENC_LEN, //43,
-		.data_len = V0_EFUSE_USID_DATA_LEN, //41,		
+		.data_len = V0_EFUSE_USID_DATA_LEN, //41,
 		.bch_en = V0_EFUSE_USID_BCH_EN, //1,
 		.bch_reverse = V0_EFUSE_USID_BCH_REVERSE, //1,
-	},	
+	},
 	{
 		.title= "version",     //1B(version=0)+2B(machid)
 		.id = EFUSE_VERSION_ID,
 		.offset=EFUSE_VERSION_OFFSET, //380,
 		.enc_len = EFUSE_VERSION_ENC_LEN, //4,
-		.data_len = EFUSE_VERSION_DATA_LEN, //3,		
+		.data_len = EFUSE_VERSION_DATA_LEN, //3,
 		.bch_en = EFUSE_VERSION_BCH_EN, //1,
 		.bch_reverse = EFUSE_VERSION_BCH_REVERSE, //0,
 	},
@@ -347,7 +347,7 @@ static efuseinfo_item_t efuseinfo_v4[] = {
         .data_len = 156,
         .bch_en = 0,
         .bch_reverse = 0,
-    },    
+    },
     {
         .title = "reserved",
         .offset = 292,
@@ -355,7 +355,7 @@ static efuseinfo_item_t efuseinfo_v4[] = {
         .data_len = 112,
         .bch_en = 0,
         .bch_reverse = 0,
-    },    
+    },
     {
         .title = "storagekey",
         .offset = 404,
@@ -417,18 +417,18 @@ static efuseinfo_item_t efuseinfo_v4[] = {
         .bch_en = 0,
         .bch_reverse = 0,
     },
-        
+
 };
 
 #endif///endif efuseinfo version3
-static efuseinfo_item_t efuseinfo_v2[] = 
+static efuseinfo_item_t efuseinfo_v2[] =
 {
 	{
 		.title = "licence",
 		.id = EFUSE_LICENCE_ID,
 		.offset = 0,
 		.enc_len = 3,
-		.data_len = 3,		
+		.data_len = 3,
 		.bch_en = 0,
 		.bch_reverse = 0,
 	},
@@ -437,8 +437,8 @@ static efuseinfo_item_t efuseinfo_v2[] =
 		.id = EFUSE_VERSION_ID,
 		.offset = V2_EFUSE_VERSION_OFFSET, //3,
 		.enc_len = V2_EFUSE_VERSION_ENC_LEN, //1,
-		.data_len = V2_EFUSE_VERSION_DATA_LEN, //1,		
-		.bch_en = V2_EFUSE_VERSION_BCH_EN, //0,	
+		.data_len = V2_EFUSE_VERSION_DATA_LEN, //1,
+		.bch_en = V2_EFUSE_VERSION_BCH_EN, //0,
 		.bch_reverse = V2_EFUSE_VERSION_BCH_REVERSE, //0,
 	},
 	{
@@ -446,8 +446,8 @@ static efuseinfo_item_t efuseinfo_v2[] =
 		.id = EFUSE_CUSTOMER_ID,
 		.offset = 4,
 		.enc_len = 4,
-		.data_len = 4,		
-		.bch_en = 0,	
+		.data_len = 4,
+		.bch_en = 0,
 		.bch_reverse = 0,
 	},
 	{
@@ -496,7 +496,7 @@ static efuseinfo_item_t efuseinfo_v2[] =
 		.bch_reverse = 0,
 	},
 	{
-		.title = "usid",   
+		.title = "usid",
 		.id = EFUSE_USID_ID,
 		.offset = V2_EFUSE_USID_OFFSET, //454,
 		.enc_len = V2_EFUSE_USID_ENC_LEN, //58,
@@ -505,7 +505,7 @@ static efuseinfo_item_t efuseinfo_v2[] =
 		.bch_reverse = V2_EFUSE_USID_BCH_REVERSE, //0,
 	},
 	{
-		.title = "machineid",   
+		.title = "machineid",
 		.id = EFUSE_MACHINEID_ID,
 		.offset = 502, //502,
 		.enc_len = 4, //4,
@@ -516,14 +516,14 @@ static efuseinfo_item_t efuseinfo_v2[] =
 };
 
 //m8 efuse layout according to haixiang.bao allocation
-static efuseinfo_item_t efuseinfo_M8_serialNum_v1[] = 
+static efuseinfo_item_t efuseinfo_M8_serialNum_v1[] =
 {
 	{
 		.title = "licence",
 		.id = EFUSE_LICENCE_ID,
 		.offset = 0,
 		.enc_len = 4,
-		.data_len = 4,		
+		.data_len = 4,
 		.bch_en = 0,
 		.bch_reverse = 0,
 	},
@@ -584,7 +584,7 @@ static efuseinfo_item_t efuseinfo_M8_serialNum_v1[] =
 };
 
 //M6TVD layout
-static efuseinfo_item_t efuseinfo_m6tvd_serialNum_v1[] = 
+static efuseinfo_item_t efuseinfo_m6tvd_serialNum_v1[] =
 {
 	{
 		.title = "licence",
@@ -642,23 +642,83 @@ static efuseinfo_item_t efuseinfo_m6tvd_serialNum_v1[] =
 	},
 };
 
+//G9TV efuse layout
+static efuseinfo_item_t efuseinfo_G9TV_serialNum_v1[] =
+{
+	{
+		.title = "licence",
+		.id = EFUSE_LICENCE_ID,
+		.offset = 0,
+		.enc_len = 4,
+		.data_len = 4,
+		.bch_en = 0,
+		.bch_reverse = 0,
+	},
+	{
+		.title = "mac",    //for the main network interface
+		.id = EFUSE_MAC_ID,
+		.offset = 436,
+		.enc_len = 6,
+		.data_len = 6,
+		.bch_en = 0,
+		.bch_reverse = 0,
+	},
+	{
+		.title = "mac_bt",  //for the second network interface or bt
+		.id = EFUSE_MAC_BT_ID,
+		.offset = 442,
+		.enc_len = 6,
+		.data_len = 6,
+		.bch_en = 0,
+		.bch_reverse = 0,
+	},
+	{
+		.title = "mac_wifi", //for the second network interface or bt
+		.id = EFUSE_MAC_WIFI_ID,
+		.offset = 448,
+		.enc_len = 6,
+		.data_len = 6,
+		.bch_en = 0,
+		.bch_reverse = 0,
+	},
+
+	{
+		.title = "usid",
+		.id = EFUSE_USID_ID,
+		.offset = 454,
+		.enc_len = 48,
+		.data_len = 48,
+		.bch_en = 0,
+		.bch_reverse = 0,
+	},
 
-efuseinfo_t efuseinfo[] = 
+	{
+		.title = "version",
+		.id = EFUSE_VERSION_ID,
+		.offset = G9TV_EFUSE_VERSION_OFFSET, //509
+		.enc_len = G9TV_EFUSE_VERSION_ENC_LEN, //1
+		.data_len = G9TV_EFUSE_VERSION_DATA_LEN,//1
+		.bch_en = G9TV_EFUSE_VERSION_BCH_EN, //0
+		.bch_reverse = G9TV_EFUSE_VERSION_BCH_REVERSE, //0
+	},
+};
+
+efuseinfo_t efuseinfo[] =
 {
 	{
 		.efuseinfo_version = efuseinfo_v0,
 		.size = sizeof(efuseinfo_v0)/sizeof(efuseinfo_item_t),
-		.version =0,	
+		.version =0,
 	},
 	{
 		.efuseinfo_version = efuseinfo_v1,
 		.size = sizeof(efuseinfo_v1)/sizeof(efuseinfo_item_t),
-		.version =1,		
+		.version =1,
 	},
 	{
 		.efuseinfo_version = efuseinfo_v2,
 		.size = sizeof(efuseinfo_v2)/sizeof(efuseinfo_item_t),
-		.version =2,		
+		.version =2,
 	},
 	{
 		.efuseinfo_version = efuseinfo_v3,
@@ -680,6 +740,11 @@ efuseinfo_t efuseinfo[] =
 		.size = sizeof(efuseinfo_m6tvd_serialNum_v1)/sizeof(efuseinfo_item_t),
 		.version =M6TVD_EFUSE_VERSION_SERIALNUM_V1,
 	},
+	{
+		.efuseinfo_version = efuseinfo_G9TV_serialNum_v1,
+		.size = sizeof(efuseinfo_G9TV_serialNum_v1)/sizeof(efuseinfo_item_t),
+		.version = G9TV_EFUSE_VERSION_SERIALNUM_V1,
+	},
 };
 
 int efuseinfo_num = sizeof(efuseinfo)/sizeof(efuseinfo_t);
-- 
2.19.0

